/// Auto-generated by Deno Win32: Windows.Win32.Graphics.Gdi.Apis

import * as util from "../../util.ts";

// Enums
export type R2_MODE = number;
export type RGN_COMBINE_MODE = number;
export type ETO_OPTIONS = number;
export type OBJ_TYPE = number;
export type DIB_USAGE = number;
export type DRAWEDGE_FLAGS = number;
export type DFC_TYPE = number;
export type DFCS_STATE = number;
export type CDS_TYPE = number;
export type DISP_CHANGE = number;
export type DRAWSTATE_FLAGS = number;
export type REDRAW_WINDOW_FLAGS = number;
export type ENUM_DISPLAY_SETTINGS_MODE = number;
export type TEXT_ALIGN_OPTIONS = number;
export type PEN_STYLE = number;
export type TTEMBED_FLAGS = number;
export type DRAW_TEXT_FORMAT = number;
export type EMBED_FONT_CHARSET = number;
export type GET_DCX_FLAGS = number;
export type GET_GLYPH_OUTLINE_FORMAT = number;
export type SET_BOUNDS_RECT_FLAGS = number;
export type GET_STOCK_OBJECT_FLAGS = number;
export type MODIFY_WORLD_TRANSFORM_MODE = number;
export type FONT_CLIP_PRECISION = number;
export type CREATE_POLYGON_RGN_MODE = number;
export type EMBEDDED_FONT_PRIV_STATUS = number;
export type MONITOR_FROM_FLAGS = number;
export type FONT_RESOURCE_CHARACTERISTICS = number;
export type DC_LAYOUT = number;
export type GET_DEVICE_CAPS_INDEX = number;
export type FONT_OUTPUT_PRECISION = number;
export type FONT_WEIGHT = number;
export type FONT_CHARSET = number;
export type ARC_DIRECTION = number;
export type TTLOAD_EMBEDDED_FONT_STATUS = number;
export type STRETCH_BLT_MODE = number;
export type FONT_QUALITY = number;
export type BACKGROUND_MODE = number;
export type GET_CHARACTER_PLACEMENT_FLAGS = number;
export type DRAW_EDGE_FLAGS = number;
export type SYS_COLOR_INDEX = number;
export type FONT_LICENSE_PRIVS = number;
export type GRADIENT_FILL = number;
export type CREATE_FONT_PACKAGE_SUBSET_ENCODING = number;
export type EXT_FLOOD_FILL_TYPE = number;
export type HATCH_BRUSH_STYLE = number;
export type DRAW_CAPTION_FLAGS = number;
export type SYSTEM_PALETTE_USE = number;
export type GRAPHICS_MODE = number;
export type FONT_PITCH = number;
export type FONT_FAMILY = number;
export type ROP_CODE = number;
export type CREATE_FONT_PACKAGE_SUBSET_PLATFORM = number;
export type HDC_MAP_MODE = number;
export type GDI_REGION_TYPE = number;
export type BRUSH_STYLE = number;
export type TMPF_FLAGS = number;
export type BI_COMPRESSION = number;
export type ENHANCED_METAFILE_RECORD_TYPE = number;
export type DEVMODE_FIELD_FLAGS = number;
export type DEVMODE_COLOR = number;
export type DEVMODE_DUPLEX = number;
export type DEVMODE_COLLATE = number;
export type DEVMODE_TRUETYPE_OPTION = number;
export type PAN_FAMILY_TYPE = number;
export type PAN_SERIF_STYLE = number;
export type PAN_WEIGHT = number;
export type PAN_STROKE_VARIATION = number;
export type PAN_PROPORTION = number;
export type PAN_CONTRAST = number;
export type PAN_ARM_STYLE = number;
export type PAN_LETT_FORM = number;
export type PAN_MIDLINE = number;
export type PAN_XHEIGHT = number;
export type DISPLAYCONFIG_COLOR_ENCODING = number;

// Constants
export const R2_BLACK = 1;
export const R2_NOTMERGEPEN = 2;
export const R2_MASKNOTPEN = 3;
export const R2_NOTCOPYPEN = 4;
export const R2_MASKPENNOT = 5;
export const R2_NOT = 6;
export const R2_XORPEN = 7;
export const R2_NOTMASKPEN = 8;
export const R2_MASKPEN = 9;
export const R2_NOTXORPEN = 10;
export const R2_NOP = 11;
export const R2_MERGENOTPEN = 12;
export const R2_COPYPEN = 13;
export const R2_MERGEPENNOT = 14;
export const R2_MERGEPEN = 15;
export const R2_WHITE = 16;
export const R2_LAST = 16;
export const RGN_AND = 1;
export const RGN_OR = 2;
export const RGN_XOR = 3;
export const RGN_DIFF = 4;
export const RGN_COPY = 5;
export const RGN_MIN = 1;
export const RGN_MAX = 5;
export const ETO_OPAQUE = 2;
export const ETO_CLIPPED = 4;
export const ETO_GLYPH_INDEX = 16;
export const ETO_RTLREADING = 128;
export const ETO_NUMERICSLOCAL = 1024;
export const ETO_NUMERICSLATIN = 2048;
export const ETO_IGNORELANGUAGE = 4096;
export const ETO_PDY = 8192;
export const ETO_REVERSE_INDEX_MAP = 65536;
export const OBJ_PEN = 1;
export const OBJ_BRUSH = 2;
export const OBJ_DC = 3;
export const OBJ_METADC = 4;
export const OBJ_PAL = 5;
export const OBJ_FONT = 6;
export const OBJ_BITMAP = 7;
export const OBJ_REGION = 8;
export const OBJ_METAFILE = 9;
export const OBJ_MEMDC = 10;
export const OBJ_EXTPEN = 11;
export const OBJ_ENHMETADC = 12;
export const OBJ_ENHMETAFILE = 13;
export const OBJ_COLORSPACE = 14;
export const DIB_RGB_COLORS = 0;
export const DIB_PAL_COLORS = 1;
export const GDI_ERROR = `-1`;
export const ERROR = 0;
export const MAXSTRETCHBLTMODE = 4;
export const POLYFILL_LAST = 2;
export const LAYOUT_BTT = 2;
export const LAYOUT_VBH = 4;
export const ASPECT_FILTERING = 1;
export const META_SETBKCOLOR = 513;
export const META_SETBKMODE = 258;
export const META_SETMAPMODE = 259;
export const META_SETROP2 = 260;
export const META_SETRELABS = 261;
export const META_SETPOLYFILLMODE = 262;
export const META_SETSTRETCHBLTMODE = 263;
export const META_SETTEXTCHAREXTRA = 264;
export const META_SETTEXTCOLOR = 521;
export const META_SETTEXTJUSTIFICATION = 522;
export const META_SETWINDOWORG = 523;
export const META_SETWINDOWEXT = 524;
export const META_SETVIEWPORTORG = 525;
export const META_SETVIEWPORTEXT = 526;
export const META_OFFSETWINDOWORG = 527;
export const META_SCALEWINDOWEXT = 1040;
export const META_OFFSETVIEWPORTORG = 529;
export const META_SCALEVIEWPORTEXT = 1042;
export const META_LINETO = 531;
export const META_MOVETO = 532;
export const META_EXCLUDECLIPRECT = 1045;
export const META_INTERSECTCLIPRECT = 1046;
export const META_ARC = 2071;
export const META_ELLIPSE = 1048;
export const META_FLOODFILL = 1049;
export const META_PIE = 2074;
export const META_RECTANGLE = 1051;
export const META_ROUNDRECT = 1564;
export const META_PATBLT = 1565;
export const META_SAVEDC = 30;
export const META_SETPIXEL = 1055;
export const META_OFFSETCLIPRGN = 544;
export const META_TEXTOUT = 1313;
export const META_BITBLT = 2338;
export const META_STRETCHBLT = 2851;
export const META_POLYGON = 804;
export const META_POLYLINE = 805;
export const META_ESCAPE = 1574;
export const META_RESTOREDC = 295;
export const META_FILLREGION = 552;
export const META_FRAMEREGION = 1065;
export const META_INVERTREGION = 298;
export const META_PAINTREGION = 299;
export const META_SELECTCLIPREGION = 300;
export const META_SELECTOBJECT = 301;
export const META_SETTEXTALIGN = 302;
export const META_CHORD = 2096;
export const META_SETMAPPERFLAGS = 561;
export const META_EXTTEXTOUT = 2610;
export const META_SETDIBTODEV = 3379;
export const META_SELECTPALETTE = 564;
export const META_REALIZEPALETTE = 53;
export const META_ANIMATEPALETTE = 1078;
export const META_SETPALENTRIES = 55;
export const META_POLYPOLYGON = 1336;
export const META_RESIZEPALETTE = 313;
export const META_DIBBITBLT = 2368;
export const META_DIBSTRETCHBLT = 2881;
export const META_DIBCREATEPATTERNBRUSH = 322;
export const META_STRETCHDIB = 3907;
export const META_EXTFLOODFILL = 1352;
export const META_SETLAYOUT = 329;
export const META_DELETEOBJECT = 496;
export const META_CREATEPALETTE = 247;
export const META_CREATEPATTERNBRUSH = 505;
export const META_CREATEPENINDIRECT = 762;
export const META_CREATEFONTINDIRECT = 763;
export const META_CREATEBRUSHINDIRECT = 764;
export const META_CREATEREGION = 1791;
export const NEWFRAME = 1;
export const ABORTDOC = 2;
export const NEXTBAND = 3;
export const SETCOLORTABLE = 4;
export const GETCOLORTABLE = 5;
export const FLUSHOUTPUT = 6;
export const DRAFTMODE = 7;
export const QUERYESCSUPPORT = 8;
export const SETABORTPROC = 9;
export const STARTDOC = 10;
export const ENDDOC = 11;
export const GETPHYSPAGESIZE = 12;
export const GETPRINTINGOFFSET = 13;
export const GETSCALINGFACTOR = 14;
export const MFCOMMENT = 15;
export const GETPENWIDTH = 16;
export const SETCOPYCOUNT = 17;
export const SELECTPAPERSOURCE = 18;
export const DEVICEDATA = 19;
export const PASSTHROUGH = 19;
export const GETTECHNOLGY = 20;
export const GETTECHNOLOGY = 20;
export const SETLINECAP = 21;
export const SETLINEJOIN = 22;
export const SETMITERLIMIT = 23;
export const BANDINFO = 24;
export const DRAWPATTERNRECT = 25;
export const GETVECTORPENSIZE = 26;
export const GETVECTORBRUSHSIZE = 27;
export const ENABLEDUPLEX = 28;
export const GETSETPAPERBINS = 29;
export const GETSETPRINTORIENT = 30;
export const ENUMPAPERBINS = 31;
export const SETDIBSCALING = 32;
export const EPSPRINTING = 33;
export const ENUMPAPERMETRICS = 34;
export const GETSETPAPERMETRICS = 35;
export const POSTSCRIPT_DATA = 37;
export const POSTSCRIPT_IGNORE = 38;
export const MOUSETRAILS = 39;
export const GETDEVICEUNITS = 42;
export const GETEXTENDEDTEXTMETRICS = 256;
export const GETEXTENTTABLE = 257;
export const GETPAIRKERNTABLE = 258;
export const GETTRACKKERNTABLE = 259;
export const EXTTEXTOUT = 512;
export const GETFACENAME = 513;
export const DOWNLOADFACE = 514;
export const ENABLERELATIVEWIDTHS = 768;
export const ENABLEPAIRKERNING = 769;
export const SETKERNTRACK = 770;
export const SETALLJUSTVALUES = 771;
export const SETCHARSET = 772;
export const STRETCHBLT = 2048;
export const METAFILE_DRIVER = 2049;
export const GETSETSCREENPARAMS = 3072;
export const QUERYDIBSUPPORT = 3073;
export const BEGIN_PATH = 4096;
export const CLIP_TO_PATH = 4097;
export const END_PATH = 4098;
export const EXT_DEVICE_CAPS = 4099;
export const RESTORE_CTM = 4100;
export const SAVE_CTM = 4101;
export const SET_ARC_DIRECTION = 4102;
export const SET_BACKGROUND_COLOR = 4103;
export const SET_POLY_MODE = 4104;
export const SET_SCREEN_ANGLE = 4105;
export const SET_SPREAD = 4106;
export const TRANSFORM_CTM = 4107;
export const SET_CLIP_BOX = 4108;
export const SET_BOUNDS = 4109;
export const SET_MIRROR_MODE = 4110;
export const OPENCHANNEL = 4110;
export const DOWNLOADHEADER = 4111;
export const CLOSECHANNEL = 4112;
export const POSTSCRIPT_PASSTHROUGH = 4115;
export const ENCAPSULATED_POSTSCRIPT = 4116;
export const POSTSCRIPT_IDENTIFY = 4117;
export const POSTSCRIPT_INJECTION = 4118;
export const CHECKJPEGFORMAT = 4119;
export const CHECKPNGFORMAT = 4120;
export const GET_PS_FEATURESETTING = 4121;
export const GDIPLUS_TS_QUERYVER = 4122;
export const GDIPLUS_TS_RECORD = 4123;
export const MILCORE_TS_QUERYVER_RESULT_FALSE = 0;
export const MILCORE_TS_QUERYVER_RESULT_TRUE = 2147483647;
export const SPCLPASSTHROUGH2 = 4568;
export const PSIDENT_GDICENTRIC = 0;
export const PSIDENT_PSCENTRIC = 1;
export const PSINJECT_DLFONT = 3722304989;
export const FEATURESETTING_NUP = 0;
export const FEATURESETTING_OUTPUT = 1;
export const FEATURESETTING_PSLEVEL = 2;
export const FEATURESETTING_CUSTPAPER = 3;
export const FEATURESETTING_MIRROR = 4;
export const FEATURESETTING_NEGATIVE = 5;
export const FEATURESETTING_PROTOCOL = 6;
export const FEATURESETTING_PRIVATE_BEGIN = 4096;
export const FEATURESETTING_PRIVATE_END = 8191;
export const PSPROTOCOL_ASCII = 0;
export const PSPROTOCOL_BCP = 1;
export const PSPROTOCOL_TBCP = 2;
export const PSPROTOCOL_BINARY = 3;
export const QDI_SETDIBITS = 1;
export const QDI_GETDIBITS = 2;
export const QDI_DIBTOSCREEN = 4;
export const QDI_STRETCHDIB = 8;
export const SP_NOTREPORTED = 16384;
export const SP_ERROR = `-1`;
export const SP_APPABORT = `-2`;
export const SP_USERABORT = `-3`;
export const SP_OUTOFDISK = `-4`;
export const SP_OUTOFMEMORY = `-5`;
export const PR_JOBSTATUS = 0;
export const LCS_CALIBRATED_RGB = 0;
export const LCS_GM_BUSINESS = 1;
export const LCS_GM_GRAPHICS = 2;
export const LCS_GM_IMAGES = 4;
export const LCS_GM_ABS_COLORIMETRIC = 8;
export const CM_OUT_OF_GAMUT = 255;
export const CM_IN_GAMUT = 0;
export const NTM_REGULAR = 64;
export const NTM_BOLD = 32;
export const NTM_ITALIC = 1;
export const NTM_NONNEGATIVE_AC = 65536;
export const NTM_PS_OPENTYPE = 131072;
export const NTM_TT_OPENTYPE = 262144;
export const NTM_MULTIPLEMASTER = 524288;
export const NTM_TYPE1 = 1048576;
export const NTM_DSIG = 2097152;
export const LF_FACESIZE = 32;
export const LF_FULLFACESIZE = 64;
export const CLEARTYPE_NATURAL_QUALITY = 6;
export const MONO_FONT = 8;
export const FS_LATIN1 = 1;
export const FS_LATIN2 = 2;
export const FS_CYRILLIC = 4;
export const FS_GREEK = 8;
export const FS_TURKISH = 16;
export const FS_HEBREW = 32;
export const FS_ARABIC = 64;
export const FS_BALTIC = 128;
export const FS_VIETNAMESE = 256;
export const FS_THAI = 65536;
export const FS_JISJAPAN = 131072;
export const FS_CHINESESIMP = 262144;
export const FS_WANSUNG = 524288;
export const FS_CHINESETRAD = 1048576;
export const FS_JOHAB = 2097152;
export const FS_SYMBOL = `-2147483648`;
export const PANOSE_COUNT = 10;
export const PAN_FAMILYTYPE_INDEX = 0;
export const PAN_SERIFSTYLE_INDEX = 1;
export const PAN_PROPORTION_INDEX = 3;
export const PAN_STROKEVARIATION_INDEX = 5;
export const PAN_ARMSTYLE_INDEX = 6;
export const PAN_LETTERFORM_INDEX = 7;
export const PAN_CULTURE_LATIN = 0;
export const PAN_ANY = 0;
export const PAN_NO_FIT = 1;
export const ELF_VENDOR_SIZE = 4;
export const ELF_VERSION = 0;
export const ELF_CULTURE_LATIN = 0;
export const RASTER_FONTTYPE = 1;
export const DEVICE_FONTTYPE = 2;
export const TRUETYPE_FONTTYPE = 4;
export const PC_RESERVED = 1;
export const PC_EXPLICIT = 2;
export const PC_NOCOLLAPSE = 4;
export const BKMODE_LAST = 2;
export const GM_LAST = 2;
export const PT_CLOSEFIGURE = 1;
export const PT_LINETO = 2;
export const PT_BEZIERTO = 4;
export const PT_MOVETO = 6;
export const ABSOLUTE = 1;
export const RELATIVE = 2;
export const STOCK_LAST = 19;
export const CLR_INVALID = 4294967295;
export const HS_API_MAX = 12;
export const DT_PLOTTER = 0;
export const DT_RASDISPLAY = 1;
export const DT_RASPRINTER = 2;
export const DT_RASCAMERA = 3;
export const DT_CHARSTREAM = 4;
export const DT_METAFILE = 5;
export const DT_DISPFILE = 6;
export const CC_NONE = 0;
export const CC_CIRCLES = 1;
export const CC_PIE = 2;
export const CC_CHORD = 4;
export const CC_ELLIPSES = 8;
export const CC_WIDE = 16;
export const CC_STYLED = 32;
export const CC_WIDESTYLED = 64;
export const CC_INTERIORS = 128;
export const CC_ROUNDRECT = 256;
export const LC_NONE = 0;
export const LC_POLYLINE = 2;
export const LC_MARKER = 4;
export const LC_POLYMARKER = 8;
export const LC_WIDE = 16;
export const LC_STYLED = 32;
export const LC_WIDESTYLED = 64;
export const LC_INTERIORS = 128;
export const PC_NONE = 0;
export const PC_POLYGON = 1;
export const PC_RECTANGLE = 2;
export const PC_WINDPOLYGON = 4;
export const PC_TRAPEZOID = 4;
export const PC_SCANLINE = 8;
export const PC_WIDE = 16;
export const PC_STYLED = 32;
export const PC_WIDESTYLED = 64;
export const PC_INTERIORS = 128;
export const PC_POLYPOLYGON = 256;
export const PC_PATHS = 512;
export const CP_NONE = 0;
export const CP_RECTANGLE = 1;
export const CP_REGION = 2;
export const TC_OP_CHARACTER = 1;
export const TC_OP_STROKE = 2;
export const TC_CP_STROKE = 4;
export const TC_CR_90 = 8;
export const TC_CR_ANY = 16;
export const TC_SF_X_YINDEP = 32;
export const TC_SA_DOUBLE = 64;
export const TC_SA_INTEGER = 128;
export const TC_SA_CONTIN = 256;
export const TC_EA_DOUBLE = 512;
export const TC_IA_ABLE = 1024;
export const TC_UA_ABLE = 2048;
export const TC_SO_ABLE = 4096;
export const TC_RA_ABLE = 8192;
export const TC_VA_ABLE = 16384;
export const TC_RESERVED = 32768;
export const TC_SCROLLBLT = 65536;
export const RC_BITBLT = 1;
export const RC_BANDING = 2;
export const RC_SCALING = 4;
export const RC_BITMAP64 = 8;
export const RC_GDI20_OUTPUT = 16;
export const RC_GDI20_STATE = 32;
export const RC_SAVEBITMAP = 64;
export const RC_DI_BITMAP = 128;
export const RC_PALETTE = 256;
export const RC_DIBTODEV = 512;
export const RC_BIGFONT = 1024;
export const RC_STRETCHBLT = 2048;
export const RC_FLOODFILL = 4096;
export const RC_STRETCHDIB = 8192;
export const RC_OP_DX_OUTPUT = 16384;
export const RC_DEVBITS = 32768;
export const SB_NONE = 0;
export const SB_CONST_ALPHA = 1;
export const SB_PIXEL_ALPHA = 2;
export const SB_PREMULT_ALPHA = 4;
export const SB_GRAD_RECT = 16;
export const SB_GRAD_TRI = 32;
export const CM_NONE = 0;
export const CM_DEVICE_ICM = 1;
export const CM_GAMMA_RAMP = 2;
export const CM_CMYK_COLOR = 4;
export const SYSPAL_ERROR = 0;
export const CBM_INIT = 4;
export const CCHFORMNAME = 32;
export const DMORIENT_PORTRAIT = 1;
export const DMORIENT_LANDSCAPE = 2;
export const DMPAPER_LETTER = 1;
export const DMPAPER_LETTERSMALL = 2;
export const DMPAPER_TABLOID = 3;
export const DMPAPER_LEDGER = 4;
export const DMPAPER_LEGAL = 5;
export const DMPAPER_STATEMENT = 6;
export const DMPAPER_EXECUTIVE = 7;
export const DMPAPER_A3 = 8;
export const DMPAPER_A4 = 9;
export const DMPAPER_A4SMALL = 10;
export const DMPAPER_A5 = 11;
export const DMPAPER_B4 = 12;
export const DMPAPER_B5 = 13;
export const DMPAPER_FOLIO = 14;
export const DMPAPER_QUARTO = 15;
export const DMPAPER_10X14 = 16;
export const DMPAPER_11X17 = 17;
export const DMPAPER_NOTE = 18;
export const DMPAPER_ENV_9 = 19;
export const DMPAPER_ENV_10 = 20;
export const DMPAPER_ENV_11 = 21;
export const DMPAPER_ENV_12 = 22;
export const DMPAPER_ENV_14 = 23;
export const DMPAPER_CSHEET = 24;
export const DMPAPER_DSHEET = 25;
export const DMPAPER_ESHEET = 26;
export const DMPAPER_ENV_DL = 27;
export const DMPAPER_ENV_C5 = 28;
export const DMPAPER_ENV_C3 = 29;
export const DMPAPER_ENV_C4 = 30;
export const DMPAPER_ENV_C6 = 31;
export const DMPAPER_ENV_C65 = 32;
export const DMPAPER_ENV_B4 = 33;
export const DMPAPER_ENV_B5 = 34;
export const DMPAPER_ENV_B6 = 35;
export const DMPAPER_ENV_ITALY = 36;
export const DMPAPER_ENV_MONARCH = 37;
export const DMPAPER_ENV_PERSONAL = 38;
export const DMPAPER_FANFOLD_US = 39;
export const DMPAPER_FANFOLD_STD_GERMAN = 40;
export const DMPAPER_FANFOLD_LGL_GERMAN = 41;
export const DMPAPER_ISO_B4 = 42;
export const DMPAPER_JAPANESE_POSTCARD = 43;
export const DMPAPER_9X11 = 44;
export const DMPAPER_10X11 = 45;
export const DMPAPER_15X11 = 46;
export const DMPAPER_ENV_INVITE = 47;
export const DMPAPER_RESERVED_48 = 48;
export const DMPAPER_RESERVED_49 = 49;
export const DMPAPER_LETTER_EXTRA = 50;
export const DMPAPER_LEGAL_EXTRA = 51;
export const DMPAPER_TABLOID_EXTRA = 52;
export const DMPAPER_A4_EXTRA = 53;
export const DMPAPER_LETTER_TRANSVERSE = 54;
export const DMPAPER_A4_TRANSVERSE = 55;
export const DMPAPER_LETTER_EXTRA_TRANSVERSE = 56;
export const DMPAPER_A_PLUS = 57;
export const DMPAPER_B_PLUS = 58;
export const DMPAPER_LETTER_PLUS = 59;
export const DMPAPER_A4_PLUS = 60;
export const DMPAPER_A5_TRANSVERSE = 61;
export const DMPAPER_B5_TRANSVERSE = 62;
export const DMPAPER_A3_EXTRA = 63;
export const DMPAPER_A5_EXTRA = 64;
export const DMPAPER_B5_EXTRA = 65;
export const DMPAPER_A2 = 66;
export const DMPAPER_A3_TRANSVERSE = 67;
export const DMPAPER_A3_EXTRA_TRANSVERSE = 68;
export const DMPAPER_DBL_JAPANESE_POSTCARD = 69;
export const DMPAPER_A6 = 70;
export const DMPAPER_JENV_KAKU2 = 71;
export const DMPAPER_JENV_KAKU3 = 72;
export const DMPAPER_JENV_CHOU3 = 73;
export const DMPAPER_JENV_CHOU4 = 74;
export const DMPAPER_LETTER_ROTATED = 75;
export const DMPAPER_A3_ROTATED = 76;
export const DMPAPER_A4_ROTATED = 77;
export const DMPAPER_A5_ROTATED = 78;
export const DMPAPER_B4_JIS_ROTATED = 79;
export const DMPAPER_B5_JIS_ROTATED = 80;
export const DMPAPER_JAPANESE_POSTCARD_ROTATED = 81;
export const DMPAPER_DBL_JAPANESE_POSTCARD_ROTATED = 82;
export const DMPAPER_A6_ROTATED = 83;
export const DMPAPER_JENV_KAKU2_ROTATED = 84;
export const DMPAPER_JENV_KAKU3_ROTATED = 85;
export const DMPAPER_JENV_CHOU3_ROTATED = 86;
export const DMPAPER_JENV_CHOU4_ROTATED = 87;
export const DMPAPER_B6_JIS = 88;
export const DMPAPER_B6_JIS_ROTATED = 89;
export const DMPAPER_12X11 = 90;
export const DMPAPER_JENV_YOU4 = 91;
export const DMPAPER_JENV_YOU4_ROTATED = 92;
export const DMPAPER_P16K = 93;
export const DMPAPER_P32K = 94;
export const DMPAPER_P32KBIG = 95;
export const DMPAPER_PENV_1 = 96;
export const DMPAPER_PENV_2 = 97;
export const DMPAPER_PENV_3 = 98;
export const DMPAPER_PENV_4 = 99;
export const DMPAPER_PENV_5 = 100;
export const DMPAPER_PENV_6 = 101;
export const DMPAPER_PENV_7 = 102;
export const DMPAPER_PENV_8 = 103;
export const DMPAPER_PENV_9 = 104;
export const DMPAPER_PENV_10 = 105;
export const DMPAPER_P16K_ROTATED = 106;
export const DMPAPER_P32K_ROTATED = 107;
export const DMPAPER_P32KBIG_ROTATED = 108;
export const DMPAPER_PENV_1_ROTATED = 109;
export const DMPAPER_PENV_2_ROTATED = 110;
export const DMPAPER_PENV_3_ROTATED = 111;
export const DMPAPER_PENV_4_ROTATED = 112;
export const DMPAPER_PENV_5_ROTATED = 113;
export const DMPAPER_PENV_6_ROTATED = 114;
export const DMPAPER_PENV_7_ROTATED = 115;
export const DMPAPER_PENV_8_ROTATED = 116;
export const DMPAPER_PENV_9_ROTATED = 117;
export const DMPAPER_PENV_10_ROTATED = 118;
export const DMPAPER_LAST = 118;
export const DMPAPER_USER = 256;
export const DMBIN_UPPER = 1;
export const DMBIN_ONLYONE = 1;
export const DMBIN_LOWER = 2;
export const DMBIN_MIDDLE = 3;
export const DMBIN_MANUAL = 4;
export const DMBIN_ENVELOPE = 5;
export const DMBIN_ENVMANUAL = 6;
export const DMBIN_AUTO = 7;
export const DMBIN_TRACTOR = 8;
export const DMBIN_SMALLFMT = 9;
export const DMBIN_LARGEFMT = 10;
export const DMBIN_LARGECAPACITY = 11;
export const DMBIN_CASSETTE = 14;
export const DMBIN_FORMSOURCE = 15;
export const DMBIN_LAST = 15;
export const DMBIN_USER = 256;
export const DMRES_DRAFT = `-1`;
export const DMRES_LOW = `-2`;
export const DMRES_MEDIUM = `-3`;
export const DMRES_HIGH = `-4`;
export const DMDO_DEFAULT = 0;
export const DMDO_90 = 1;
export const DMDO_180 = 2;
export const DMDO_270 = 3;
export const DMDFO_DEFAULT = 0;
export const DMDFO_STRETCH = 1;
export const DMDFO_CENTER = 2;
export const DMDISPLAYFLAGS_TEXTMODE = 4;
export const DMNUP_SYSTEM = 1;
export const DMNUP_ONEUP = 2;
export const DMICMMETHOD_NONE = 1;
export const DMICMMETHOD_SYSTEM = 2;
export const DMICMMETHOD_DRIVER = 3;
export const DMICMMETHOD_DEVICE = 4;
export const DMICMMETHOD_USER = 256;
export const DMICM_SATURATE = 1;
export const DMICM_CONTRAST = 2;
export const DMICM_COLORIMETRIC = 3;
export const DMICM_ABS_COLORIMETRIC = 4;
export const DMICM_USER = 256;
export const DMMEDIA_STANDARD = 1;
export const DMMEDIA_TRANSPARENCY = 2;
export const DMMEDIA_GLOSSY = 3;
export const DMMEDIA_USER = 256;
export const DMDITHER_NONE = 1;
export const DMDITHER_COARSE = 2;
export const DMDITHER_FINE = 3;
export const DMDITHER_LINEART = 4;
export const DMDITHER_ERRORDIFFUSION = 5;
export const DMDITHER_RESERVED6 = 6;
export const DMDITHER_RESERVED7 = 7;
export const DMDITHER_RESERVED8 = 8;
export const DMDITHER_RESERVED9 = 9;
export const DMDITHER_GRAYSCALE = 10;
export const DMDITHER_USER = 256;
export const DISPLAY_DEVICE_ATTACHED_TO_DESKTOP = 1;
export const DISPLAY_DEVICE_MULTI_DRIVER = 2;
export const DISPLAY_DEVICE_PRIMARY_DEVICE = 4;
export const DISPLAY_DEVICE_MIRRORING_DRIVER = 8;
export const DISPLAY_DEVICE_VGA_COMPATIBLE = 16;
export const DISPLAY_DEVICE_REMOVABLE = 32;
export const DISPLAY_DEVICE_ACC_DRIVER = 64;
export const DISPLAY_DEVICE_MODESPRUNED = 134217728;
export const DISPLAY_DEVICE_RDPUDD = 16777216;
export const DISPLAY_DEVICE_REMOTE = 67108864;
export const DISPLAY_DEVICE_DISCONNECT = 33554432;
export const DISPLAY_DEVICE_TS_COMPATIBLE = 2097152;
export const DISPLAY_DEVICE_UNSAFE_MODES_ON = 524288;
export const DISPLAY_DEVICE_ACTIVE = 1;
export const DISPLAY_DEVICE_ATTACHED = 2;
export const DISPLAYCONFIG_MAXPATH = 1024;
export const DISPLAYCONFIG_PATH_MODE_IDX_INVALID = 4294967295;
export const DISPLAYCONFIG_PATH_TARGET_MODE_IDX_INVALID = 65535;
export const DISPLAYCONFIG_PATH_DESKTOP_IMAGE_IDX_INVALID = 65535;
export const DISPLAYCONFIG_PATH_SOURCE_MODE_IDX_INVALID = 65535;
export const DISPLAYCONFIG_PATH_CLONE_GROUP_INVALID = 65535;
export const DISPLAYCONFIG_SOURCE_IN_USE = 1;
export const DISPLAYCONFIG_TARGET_IN_USE = 1;
export const DISPLAYCONFIG_TARGET_FORCIBLE = 2;
export const DISPLAYCONFIG_TARGET_FORCED_AVAILABILITY_BOOT = 4;
export const DISPLAYCONFIG_TARGET_FORCED_AVAILABILITY_PATH = 8;
export const DISPLAYCONFIG_TARGET_FORCED_AVAILABILITY_SYSTEM = 16;
export const DISPLAYCONFIG_TARGET_IS_HMD = 32;
export const DISPLAYCONFIG_PATH_ACTIVE = 1;
export const DISPLAYCONFIG_PATH_PREFERRED_UNSCALED = 4;
export const DISPLAYCONFIG_PATH_SUPPORT_VIRTUAL_MODE = 8;
export const DISPLAYCONFIG_PATH_VALID_FLAGS = 29;
export const QDC_ALL_PATHS = 1;
export const QDC_ONLY_ACTIVE_PATHS = 2;
export const QDC_DATABASE_CURRENT = 4;
export const QDC_VIRTUAL_MODE_AWARE = 16;
export const QDC_INCLUDE_HMD = 32;
export const QDC_VIRTUAL_REFRESH_RATE_AWARE = 64;
export const SDC_TOPOLOGY_INTERNAL = 1;
export const SDC_TOPOLOGY_CLONE = 2;
export const SDC_TOPOLOGY_EXTEND = 4;
export const SDC_TOPOLOGY_EXTERNAL = 8;
export const SDC_TOPOLOGY_SUPPLIED = 16;
export const SDC_USE_SUPPLIED_DISPLAY_CONFIG = 32;
export const SDC_VALIDATE = 64;
export const SDC_APPLY = 128;
export const SDC_NO_OPTIMIZATION = 256;
export const SDC_SAVE_TO_DATABASE = 512;
export const SDC_ALLOW_CHANGES = 1024;
export const SDC_PATH_PERSIST_IF_REQUIRED = 2048;
export const SDC_FORCE_MODE_ENUMERATION = 4096;
export const SDC_ALLOW_PATH_ORDER_CHANGES = 8192;
export const SDC_VIRTUAL_MODE_AWARE = 32768;
export const SDC_VIRTUAL_REFRESH_RATE_AWARE = 131072;
export const RDH_RECTANGLES = 1;
export const SYSRGN = 4;
export const TT_POLYGON_TYPE = 24;
export const TT_PRIM_LINE = 1;
export const TT_PRIM_QSPLINE = 2;
export const TT_PRIM_CSPLINE = 3;
export const GCP_DBCS = 1;
export const GCP_ERROR = 32768;
export const FLI_MASK = 4155;
export const FLI_GLYPHS = 262144;
export const GCP_JUSTIFYIN = 2097152;
export const GCPCLASS_LATIN = 1;
export const GCPCLASS_HEBREW = 2;
export const GCPCLASS_ARABIC = 2;
export const GCPCLASS_NEUTRAL = 3;
export const GCPCLASS_LOCALNUMBER = 4;
export const GCPCLASS_LATINNUMBER = 5;
export const GCPCLASS_LATINNUMERICTERMINATOR = 6;
export const GCPCLASS_LATINNUMERICSEPARATOR = 7;
export const GCPCLASS_NUMERICSEPARATOR = 8;
export const GCPCLASS_PREBOUNDLTR = 128;
export const GCPCLASS_PREBOUNDRTL = 64;
export const GCPCLASS_POSTBOUNDLTR = 32;
export const GCPCLASS_POSTBOUNDRTL = 16;
export const GCPGLYPH_LINKBEFORE = 32768;
export const GCPGLYPH_LINKAFTER = 16384;
export const TT_AVAILABLE = 1;
export const TT_ENABLED = 2;
export const DC_BINADJUST = 19;
export const DC_EMF_COMPLIANT = 20;
export const DC_DATATYPE_PRODUCED = 21;
export const DC_MANUFACTURER = 23;
export const DC_MODEL = 24;
export const PRINTRATEUNIT_PPM = 1;
export const PRINTRATEUNIT_CPS = 2;
export const PRINTRATEUNIT_LPM = 3;
export const PRINTRATEUNIT_IPM = 4;
export const DCTT_BITMAP = 1;
export const DCTT_DOWNLOAD = 2;
export const DCTT_SUBDEV = 4;
export const DCTT_DOWNLOAD_OUTLINE = 8;
export const DCBA_FACEUPNONE = 0;
export const DCBA_FACEUPCENTER = 1;
export const DCBA_FACEUPLEFT = 2;
export const DCBA_FACEUPRIGHT = 3;
export const DCBA_FACEDOWNNONE = 256;
export const DCBA_FACEDOWNCENTER = 257;
export const DCBA_FACEDOWNLEFT = 258;
export const DCBA_FACEDOWNRIGHT = 259;
export const GS_8BIT_INDICES = 1;
export const GGI_MARK_NONEXISTING_GLYPHS = 1;
export const MM_MAX_NUMAXES = 16;
export const MM_MAX_AXES_NAMELEN = 16;
export const GDIREGISTERDDRAWPACKETVERSION = 1;
export const AC_SRC_OVER = 0;
export const AC_SRC_ALPHA = 1;
export const GRADIENT_FILL_OP_FLAG = 255;
export const CA_NEGATIVE = 1;
export const CA_LOG_FILTER = 2;
export const ILLUMINANT_DEVICE_DEFAULT = 0;
export const ILLUMINANT_A = 1;
export const ILLUMINANT_B = 2;
export const ILLUMINANT_C = 3;
export const ILLUMINANT_D50 = 4;
export const ILLUMINANT_D55 = 5;
export const ILLUMINANT_D65 = 6;
export const ILLUMINANT_D75 = 7;
export const ILLUMINANT_F2 = 8;
export const ILLUMINANT_MAX_INDEX = 8;
export const ILLUMINANT_TUNGSTEN = 1;
export const ILLUMINANT_DAYLIGHT = 3;
export const ILLUMINANT_FLUORESCENT = 8;
export const ILLUMINANT_NTSC = 3;
export const DI_APPBANDING = 1;
export const DI_ROPS_READ_DESTINATION = 2;
export const FONTMAPPER_MAX = 10;
export const ENHMETA_SIGNATURE = 1179469088;
export const ENHMETA_STOCK_OBJECT = 2147483648;
export const SETICMPROFILE_EMBEDED = 1;
export const CREATECOLORSPACE_EMBEDED = 1;
export const COLORMATCHTOTARGET_EMBEDED = 1;
export const GDICOMMENT_IDENTIFIER = 1128875079;
export const GDICOMMENT_WINDOWS_METAFILE = 2147483649;
export const GDICOMMENT_BEGINGROUP = 2;
export const GDICOMMENT_ENDGROUP = 3;
export const GDICOMMENT_MULTIFORMATS = 1073741828;
export const EPS_SIGNATURE = 1179865157;
export const GDICOMMENT_UNICODE_STRING = 64;
export const GDICOMMENT_UNICODE_END = 128;
export const WGL_FONT_LINES = 0;
export const WGL_FONT_POLYGONS = 1;
export const LPD_DOUBLEBUFFER = 1;
export const LPD_STEREO = 2;
export const LPD_SUPPORT_GDI = 16;
export const LPD_SUPPORT_OPENGL = 32;
export const LPD_SHARE_DEPTH = 64;
export const LPD_SHARE_STENCIL = 128;
export const LPD_SHARE_ACCUM = 256;
export const LPD_SWAP_EXCHANGE = 512;
export const LPD_SWAP_COPY = 1024;
export const LPD_TRANSPARENT = 4096;
export const LPD_TYPE_RGBA = 0;
export const LPD_TYPE_COLORINDEX = 1;
export const WGL_SWAP_MAIN_PLANE = 1;
export const WGL_SWAP_OVERLAY1 = 2;
export const WGL_SWAP_OVERLAY2 = 4;
export const WGL_SWAP_OVERLAY3 = 8;
export const WGL_SWAP_OVERLAY4 = 16;
export const WGL_SWAP_OVERLAY5 = 32;
export const WGL_SWAP_OVERLAY6 = 64;
export const WGL_SWAP_OVERLAY7 = 128;
export const WGL_SWAP_OVERLAY8 = 256;
export const WGL_SWAP_OVERLAY9 = 512;
export const WGL_SWAP_OVERLAY10 = 1024;
export const WGL_SWAP_OVERLAY11 = 2048;
export const WGL_SWAP_OVERLAY12 = 4096;
export const WGL_SWAP_OVERLAY13 = 8192;
export const WGL_SWAP_OVERLAY14 = 16384;
export const WGL_SWAP_OVERLAY15 = 32768;
export const WGL_SWAP_UNDERLAY1 = 65536;
export const WGL_SWAP_UNDERLAY2 = 131072;
export const WGL_SWAP_UNDERLAY3 = 262144;
export const WGL_SWAP_UNDERLAY4 = 524288;
export const WGL_SWAP_UNDERLAY5 = 1048576;
export const WGL_SWAP_UNDERLAY6 = 2097152;
export const WGL_SWAP_UNDERLAY7 = 4194304;
export const WGL_SWAP_UNDERLAY8 = 8388608;
export const WGL_SWAP_UNDERLAY9 = 16777216;
export const WGL_SWAP_UNDERLAY10 = 33554432;
export const WGL_SWAP_UNDERLAY11 = 67108864;
export const WGL_SWAP_UNDERLAY12 = 134217728;
export const WGL_SWAP_UNDERLAY13 = 268435456;
export const WGL_SWAP_UNDERLAY14 = 536870912;
export const WGL_SWAP_UNDERLAY15 = 1073741824;
export const WGL_SWAPMULTIPLE_MAX = 16;
export const NEWTRANSPARENT = 3;
export const QUERYROPSUPPORT = 40;
export const SELECTDIB = 41;
export const SC_SCREENSAVE = 61760;
export const TTFCFP_SUBSET = 0;
export const TTFCFP_SUBSET1 = 1;
export const TTFCFP_DELTA = 2;
export const TTFCFP_APPLE_PLATFORMID = 1;
export const TTFCFP_MS_PLATFORMID = 3;
export const TTFCFP_DONT_CARE = 65535;
export const TTFCFP_LANG_KEEP_ALL = 0;
export const TTFCFP_FLAGS_SUBSET = 1;
export const TTFCFP_FLAGS_COMPRESS = 2;
export const TTFCFP_FLAGS_TTC = 4;
export const TTFCFP_FLAGS_GLYPHLIST = 8;
export const TTFMFP_SUBSET = 0;
export const TTFMFP_SUBSET1 = 1;
export const TTFMFP_DELTA = 2;
export const ERR_GENERIC = 1000;
export const ERR_READOUTOFBOUNDS = 1001;
export const ERR_WRITEOUTOFBOUNDS = 1002;
export const ERR_READCONTROL = 1003;
export const ERR_WRITECONTROL = 1004;
export const ERR_MEM = 1005;
export const ERR_FORMAT = 1006;
export const ERR_WOULD_GROW = 1007;
export const ERR_VERSION = 1008;
export const ERR_NO_GLYPHS = 1009;
export const ERR_INVALID_MERGE_FORMATS = 1010;
export const ERR_INVALID_MERGE_CHECKSUMS = 1011;
export const ERR_INVALID_MERGE_NUMGLYPHS = 1012;
export const ERR_INVALID_DELTA_FORMAT = 1013;
export const ERR_NOT_TTC = 1014;
export const ERR_INVALID_TTC_INDEX = 1015;
export const ERR_MISSING_CMAP = 1030;
export const ERR_MISSING_GLYF = 1031;
export const ERR_MISSING_HEAD = 1032;
export const ERR_MISSING_HHEA = 1033;
export const ERR_MISSING_HMTX = 1034;
export const ERR_MISSING_LOCA = 1035;
export const ERR_MISSING_MAXP = 1036;
export const ERR_MISSING_NAME = 1037;
export const ERR_MISSING_POST = 1038;
export const ERR_MISSING_OS2 = 1039;
export const ERR_MISSING_VHEA = 1040;
export const ERR_MISSING_VMTX = 1041;
export const ERR_MISSING_HHEA_OR_VHEA = 1042;
export const ERR_MISSING_HMTX_OR_VMTX = 1043;
export const ERR_MISSING_EBDT = 1044;
export const ERR_INVALID_CMAP = 1060;
export const ERR_INVALID_GLYF = 1061;
export const ERR_INVALID_HEAD = 1062;
export const ERR_INVALID_HHEA = 1063;
export const ERR_INVALID_HMTX = 1064;
export const ERR_INVALID_LOCA = 1065;
export const ERR_INVALID_MAXP = 1066;
export const ERR_INVALID_NAME = 1067;
export const ERR_INVALID_POST = 1068;
export const ERR_INVALID_OS2 = 1069;
export const ERR_INVALID_VHEA = 1070;
export const ERR_INVALID_VMTX = 1071;
export const ERR_INVALID_HHEA_OR_VHEA = 1072;
export const ERR_INVALID_HMTX_OR_VMTX = 1073;
export const ERR_INVALID_TTO = 1080;
export const ERR_INVALID_GSUB = 1081;
export const ERR_INVALID_GPOS = 1082;
export const ERR_INVALID_GDEF = 1083;
export const ERR_INVALID_JSTF = 1084;
export const ERR_INVALID_BASE = 1085;
export const ERR_INVALID_EBLC = 1086;
export const ERR_INVALID_LTSH = 1087;
export const ERR_INVALID_VDMX = 1088;
export const ERR_INVALID_HDMX = 1089;
export const ERR_PARAMETER0 = 1100;
export const ERR_PARAMETER1 = 1101;
export const ERR_PARAMETER2 = 1102;
export const ERR_PARAMETER3 = 1103;
export const ERR_PARAMETER4 = 1104;
export const ERR_PARAMETER5 = 1105;
export const ERR_PARAMETER6 = 1106;
export const ERR_PARAMETER7 = 1107;
export const ERR_PARAMETER8 = 1108;
export const ERR_PARAMETER9 = 1109;
export const ERR_PARAMETER10 = 1110;
export const ERR_PARAMETER11 = 1111;
export const ERR_PARAMETER12 = 1112;
export const ERR_PARAMETER13 = 1113;
export const ERR_PARAMETER14 = 1114;
export const ERR_PARAMETER15 = 1115;
export const ERR_PARAMETER16 = 1116;
export const CHARSET_DEFAULT = 1;
export const CHARSET_GLYPHIDX = 3;
export const TTEMBED_FAILIFVARIATIONSIMULATED = 16;
export const TTEMBED_WEBOBJECT = 128;
export const TTEMBED_XORENCRYPTDATA = 268435456;
export const TTEMBED_VARIATIONSIMULATED = 1;
export const TTEMBED_EUDCEMBEDDED = 2;
export const TTEMBED_SUBSETCANCEL = 4;
export const TTLOAD_PRIVATE = 1;
export const TTLOAD_EUDC_OVERWRITE = 2;
export const TTLOAD_EUDC_SET = 4;
export const TTDELETE_DONTREMOVEFONT = 1;
export const E_NONE = 0;
export const E_API_NOTIMPL = 1;
export const E_CHARCODECOUNTINVALID = 2;
export const E_CHARCODESETINVALID = 3;
export const E_DEVICETRUETYPEFONT = 4;
export const E_HDCINVALID = 6;
export const E_NOFREEMEMORY = 7;
export const E_FONTREFERENCEINVALID = 8;
export const E_NOTATRUETYPEFONT = 10;
export const E_ERRORACCESSINGFONTDATA = 12;
export const E_ERRORACCESSINGFACENAME = 13;
export const E_ERRORUNICODECONVERSION = 17;
export const E_ERRORCONVERTINGCHARS = 18;
export const E_EXCEPTION = 19;
export const E_RESERVEDPARAMNOTNULL = 20;
export const E_CHARSETINVALID = 21;
export const E_FILE_NOT_FOUND = 23;
export const E_TTC_INDEX_OUT_OF_RANGE = 24;
export const E_INPUTPARAMINVALID = 25;
export const E_ERRORCOMPRESSINGFONTDATA = 256;
export const E_FONTDATAINVALID = 258;
export const E_NAMECHANGEFAILED = 259;
export const E_FONTNOTEMBEDDABLE = 260;
export const E_PRIVSINVALID = 261;
export const E_SUBSETTINGFAILED = 262;
export const E_READFROMSTREAMFAILED = 263;
export const E_SAVETOSTREAMFAILED = 264;
export const E_NOOS2 = 265;
export const E_T2NOFREEMEMORY = 266;
export const E_ERRORREADINGFONTDATA = 267;
export const E_FLAGSINVALID = 268;
export const E_ERRORCREATINGFONTFILE = 269;
export const E_FONTALREADYEXISTS = 270;
export const E_FONTNAMEALREADYEXISTS = 271;
export const E_FONTINSTALLFAILED = 272;
export const E_ERRORDECOMPRESSINGFONTDATA = 273;
export const E_ERRORACCESSINGEXCLUDELIST = 274;
export const E_FACENAMEINVALID = 275;
export const E_STREAMINVALID = 276;
export const E_STATUSINVALID = 277;
export const E_PRIVSTATUSINVALID = 278;
export const E_PERMISSIONSINVALID = 279;
export const E_PBENABLEDINVALID = 280;
export const E_SUBSETTINGEXCEPTION = 281;
export const E_SUBSTRING_TEST_FAIL = 282;
export const E_FONTVARIATIONSIMULATED = 283;
export const E_FONTFAMILYNAMENOTINFULL = 285;
export const E_ADDFONTFAILED = 512;
export const E_COULDNTCREATETEMPFILE = 513;
export const E_FONTFILECREATEFAILED = 515;
export const E_WINDOWSAPI = 516;
export const E_FONTFILENOTFOUND = 517;
export const E_RESOURCEFILECREATEFAILED = 518;
export const E_ERROREXPANDINGFONTDATA = 519;
export const E_ERRORGETTINGDC = 520;
export const E_EXCEPTIONINDECOMPRESSION = 521;
export const E_EXCEPTIONINCOMPRESSION = 522;
export const BDR_RAISEDOUTER = 1;
export const BDR_SUNKENOUTER = 2;
export const BDR_RAISEDINNER = 4;
export const BDR_SUNKENINNER = 8;
export const BDR_OUTER = 3;
export const BDR_INNER = 12;
export const BDR_RAISED = 5;
export const BDR_SUNKEN = 10;
export const EDGE_RAISED = 5;
export const EDGE_SUNKEN = 10;
export const EDGE_ETCHED = 6;
export const EDGE_BUMP = 9;
export const DFC_CAPTION = 1;
export const DFC_MENU = 2;
export const DFC_SCROLL = 3;
export const DFC_BUTTON = 4;
export const DFC_POPUPMENU = 5;
export const DFCS_CAPTIONCLOSE = 0;
export const DFCS_CAPTIONMIN = 1;
export const DFCS_CAPTIONMAX = 2;
export const DFCS_CAPTIONRESTORE = 3;
export const DFCS_CAPTIONHELP = 4;
export const DFCS_MENUARROW = 0;
export const DFCS_MENUCHECK = 1;
export const DFCS_MENUBULLET = 2;
export const DFCS_MENUARROWRIGHT = 4;
export const DFCS_SCROLLUP = 0;
export const DFCS_SCROLLDOWN = 1;
export const DFCS_SCROLLLEFT = 2;
export const DFCS_SCROLLRIGHT = 3;
export const DFCS_SCROLLCOMBOBOX = 5;
export const DFCS_SCROLLSIZEGRIP = 8;
export const DFCS_SCROLLSIZEGRIPRIGHT = 16;
export const DFCS_BUTTONCHECK = 0;
export const DFCS_BUTTONRADIOIMAGE = 1;
export const DFCS_BUTTONRADIOMASK = 2;
export const DFCS_BUTTONRADIO = 4;
export const DFCS_BUTTON3STATE = 8;
export const DFCS_BUTTONPUSH = 16;
export const DFCS_INACTIVE = 256;
export const DFCS_PUSHED = 512;
export const DFCS_CHECKED = 1024;
export const DFCS_TRANSPARENT = 2048;
export const DFCS_HOT = 4096;
export const DFCS_ADJUSTRECT = 8192;
export const DFCS_FLAT = 16384;
export const DFCS_MONO = 32768;
export const CDS_FULLSCREEN = 4;
export const CDS_GLOBAL = 8;
export const CDS_NORESET = 268435456;
export const CDS_RESET = 1073741824;
export const CDS_SET_PRIMARY = 16;
export const CDS_TEST = 2;
export const CDS_UPDATEREGISTRY = 1;
export const CDS_VIDEOPARAMETERS = 32;
export const CDS_ENABLE_UNSAFE_MODES = 256;
export const CDS_DISABLE_UNSAFE_MODES = 512;
export const CDS_RESET_EX = 536870912;
export const DISP_CHANGE_SUCCESSFUL = 0;
export const DISP_CHANGE_RESTART = 1;
export const DISP_CHANGE_FAILED = `-1`;
export const DISP_CHANGE_BADMODE = `-2`;
export const DISP_CHANGE_NOTUPDATED = `-3`;
export const DISP_CHANGE_BADFLAGS = `-4`;
export const DISP_CHANGE_BADPARAM = `-5`;
export const DISP_CHANGE_BADDUALVIEW = `-6`;
export const DST_COMPLEX = 0;
export const DST_TEXT = 1;
export const DST_PREFIXTEXT = 2;
export const DST_ICON = 3;
export const DST_BITMAP = 4;
export const DSS_NORMAL = 0;
export const DSS_UNION = 16;
export const DSS_DISABLED = 32;
export const DSS_MONO = 128;
export const DSS_HIDEPREFIX = 512;
export const DSS_PREFIXONLY = 1024;
export const DSS_RIGHT = 32768;
export const RDW_INVALIDATE = 1;
export const RDW_INTERNALPAINT = 2;
export const RDW_ERASE = 4;
export const RDW_VALIDATE = 8;
export const RDW_NOINTERNALPAINT = 16;
export const RDW_NOERASE = 32;
export const RDW_NOCHILDREN = 64;
export const RDW_ALLCHILDREN = 128;
export const RDW_UPDATENOW = 256;
export const RDW_ERASENOW = 512;
export const RDW_FRAME = 1024;
export const RDW_NOFRAME = 2048;
export const ENUM_CURRENT_SETTINGS = 4294967295;
export const ENUM_REGISTRY_SETTINGS = 4294967294;
export const TA_NOUPDATECP = 0;
export const TA_UPDATECP = 1;
export const TA_LEFT = 0;
export const TA_RIGHT = 2;
export const TA_CENTER = 6;
export const TA_TOP = 0;
export const TA_BOTTOM = 8;
export const TA_BASELINE = 24;
export const TA_RTLREADING = 256;
export const TA_MASK = 287;
export const VTA_BASELINE = 24;
export const VTA_LEFT = 8;
export const VTA_RIGHT = 0;
export const VTA_CENTER = 6;
export const VTA_BOTTOM = 2;
export const VTA_TOP = 0;
export const PS_GEOMETRIC = 65536;
export const PS_COSMETIC = 0;
export const PS_SOLID = 0;
export const PS_DASH = 1;
export const PS_DOT = 2;
export const PS_DASHDOT = 3;
export const PS_DASHDOTDOT = 4;
export const PS_NULL = 5;
export const PS_INSIDEFRAME = 6;
export const PS_USERSTYLE = 7;
export const PS_ALTERNATE = 8;
export const PS_STYLE_MASK = 15;
export const PS_ENDCAP_ROUND = 0;
export const PS_ENDCAP_SQUARE = 256;
export const PS_ENDCAP_FLAT = 512;
export const PS_ENDCAP_MASK = 3840;
export const PS_JOIN_ROUND = 0;
export const PS_JOIN_BEVEL = 4096;
export const PS_JOIN_MITER = 8192;
export const PS_JOIN_MASK = 61440;
export const PS_TYPE_MASK = 983040;
export const TTEMBED_EMBEDEUDC = 32;
export const TTEMBED_RAW = 0;
export const TTEMBED_SUBSET = 1;
export const TTEMBED_TTCOMPRESSED = 4;
export const DT_BOTTOM = 8;
export const DT_CALCRECT = 1024;
export const DT_CENTER = 1;
export const DT_EDITCONTROL = 8192;
export const DT_END_ELLIPSIS = 32768;
export const DT_EXPANDTABS = 64;
export const DT_EXTERNALLEADING = 512;
export const DT_HIDEPREFIX = 1048576;
export const DT_INTERNAL = 4096;
export const DT_LEFT = 0;
export const DT_MODIFYSTRING = 65536;
export const DT_NOCLIP = 256;
export const DT_NOFULLWIDTHCHARBREAK = 524288;
export const DT_NOPREFIX = 2048;
export const DT_PATH_ELLIPSIS = 16384;
export const DT_PREFIXONLY = 2097152;
export const DT_RIGHT = 2;
export const DT_RTLREADING = 131072;
export const DT_SINGLELINE = 32;
export const DT_TABSTOP = 128;
export const DT_TOP = 0;
export const DT_VCENTER = 4;
export const DT_WORDBREAK = 16;
export const DT_WORD_ELLIPSIS = 262144;
export const CHARSET_UNICODE = 1;
export const CHARSET_SYMBOL = 2;
export const DCX_WINDOW = 1;
export const DCX_CACHE = 2;
export const DCX_PARENTCLIP = 32;
export const DCX_CLIPSIBLINGS = 16;
export const DCX_CLIPCHILDREN = 8;
export const DCX_NORESETATTRS = 4;
export const DCX_LOCKWINDOWUPDATE = 1024;
export const DCX_EXCLUDERGN = 64;
export const DCX_INTERSECTRGN = 128;
export const DCX_INTERSECTUPDATE = 512;
export const DCX_VALIDATE = 2097152;
export const GGO_BEZIER = 3;
export const GGO_BITMAP = 1;
export const GGO_GLYPH_INDEX = 128;
export const GGO_GRAY2_BITMAP = 4;
export const GGO_GRAY4_BITMAP = 5;
export const GGO_GRAY8_BITMAP = 6;
export const GGO_METRICS = 0;
export const GGO_NATIVE = 2;
export const GGO_UNHINTED = 256;
export const DCB_ACCUMULATE = 2;
export const DCB_DISABLE = 8;
export const DCB_ENABLE = 4;
export const DCB_RESET = 1;
export const BLACK_BRUSH = 4;
export const DKGRAY_BRUSH = 3;
export const DC_BRUSH = 18;
export const GRAY_BRUSH = 2;
export const HOLLOW_BRUSH = 5;
export const LTGRAY_BRUSH = 1;
export const NULL_BRUSH = 5;
export const WHITE_BRUSH = 0;
export const BLACK_PEN = 7;
export const DC_PEN = 19;
export const NULL_PEN = 8;
export const WHITE_PEN = 6;
export const ANSI_FIXED_FONT = 11;
export const ANSI_VAR_FONT = 12;
export const DEVICE_DEFAULT_FONT = 14;
export const DEFAULT_GUI_FONT = 17;
export const OEM_FIXED_FONT = 10;
export const SYSTEM_FONT = 13;
export const SYSTEM_FIXED_FONT = 16;
export const DEFAULT_PALETTE = 15;
export const MWT_IDENTITY = 1;
export const MWT_LEFTMULTIPLY = 2;
export const MWT_RIGHTMULTIPLY = 3;
export const CLIP_DEFAULT_PRECIS = 0;
export const CLIP_CHARACTER_PRECIS = 1;
export const CLIP_STROKE_PRECIS = 2;
export const CLIP_MASK = 15;
export const CLIP_LH_ANGLES = 16;
export const CLIP_TT_ALWAYS = 32;
export const CLIP_DFA_DISABLE = 64;
export const CLIP_EMBEDDED = 128;
export const CLIP_DFA_OVERRIDE = 64;
export const ALTERNATE = 1;
export const WINDING = 2;
export const EMBED_PREVIEWPRINT = 1;
export const EMBED_EDITABLE = 2;
export const EMBED_INSTALLABLE = 3;
export const EMBED_NOEMBEDDING = 4;
export const MONITOR_DEFAULTTONEAREST = 2;
export const MONITOR_DEFAULTTONULL = 0;
export const MONITOR_DEFAULTTOPRIMARY = 1;
export const FR_PRIVATE = 16;
export const FR_NOT_ENUM = 32;
export const LAYOUT_BITMAPORIENTATIONPRESERVED = 8;
export const LAYOUT_RTL = 1;
export const DRIVERVERSION = 0;
export const TECHNOLOGY = 2;
export const HORZSIZE = 4;
export const VERTSIZE = 6;
export const HORZRES = 8;
export const VERTRES = 10;
export const BITSPIXEL = 12;
export const PLANES = 14;
export const NUMBRUSHES = 16;
export const NUMPENS = 18;
export const NUMMARKERS = 20;
export const NUMFONTS = 22;
export const NUMCOLORS = 24;
export const PDEVICESIZE = 26;
export const CURVECAPS = 28;
export const LINECAPS = 30;
export const POLYGONALCAPS = 32;
export const TEXTCAPS = 34;
export const CLIPCAPS = 36;
export const RASTERCAPS = 38;
export const ASPECTX = 40;
export const ASPECTY = 42;
export const ASPECTXY = 44;
export const LOGPIXELSX = 88;
export const LOGPIXELSY = 90;
export const SIZEPALETTE = 104;
export const NUMRESERVED = 106;
export const COLORRES = 108;
export const PHYSICALWIDTH = 110;
export const PHYSICALHEIGHT = 111;
export const PHYSICALOFFSETX = 112;
export const PHYSICALOFFSETY = 113;
export const SCALINGFACTORX = 114;
export const SCALINGFACTORY = 115;
export const VREFRESH = 116;
export const DESKTOPVERTRES = 117;
export const DESKTOPHORZRES = 118;
export const BLTALIGNMENT = 119;
export const SHADEBLENDCAPS = 120;
export const COLORMGMTCAPS = 121;
export const OUT_DEFAULT_PRECIS = 0;
export const OUT_STRING_PRECIS = 1;
export const OUT_CHARACTER_PRECIS = 2;
export const OUT_STROKE_PRECIS = 3;
export const OUT_TT_PRECIS = 4;
export const OUT_DEVICE_PRECIS = 5;
export const OUT_RASTER_PRECIS = 6;
export const OUT_TT_ONLY_PRECIS = 7;
export const OUT_OUTLINE_PRECIS = 8;
export const OUT_SCREEN_OUTLINE_PRECIS = 9;
export const OUT_PS_ONLY_PRECIS = 10;
export const FW_DONTCARE = 0;
export const FW_THIN = 100;
export const FW_EXTRALIGHT = 200;
export const FW_LIGHT = 300;
export const FW_NORMAL = 400;
export const FW_MEDIUM = 500;
export const FW_SEMIBOLD = 600;
export const FW_BOLD = 700;
export const FW_EXTRABOLD = 800;
export const FW_HEAVY = 900;
export const FW_ULTRALIGHT = 200;
export const FW_REGULAR = 400;
export const FW_DEMIBOLD = 600;
export const FW_ULTRABOLD = 800;
export const FW_BLACK = 900;
export const ANSI_CHARSET = 0;
export const DEFAULT_CHARSET = 1;
export const SYMBOL_CHARSET = 2;
export const SHIFTJIS_CHARSET = 128;
export const HANGEUL_CHARSET = 129;
export const HANGUL_CHARSET = 129;
export const GB2312_CHARSET = 134;
export const CHINESEBIG5_CHARSET = 136;
export const OEM_CHARSET = 255;
export const JOHAB_CHARSET = 130;
export const HEBREW_CHARSET = 177;
export const ARABIC_CHARSET = 178;
export const GREEK_CHARSET = 161;
export const TURKISH_CHARSET = 162;
export const VIETNAMESE_CHARSET = 163;
export const THAI_CHARSET = 222;
export const EASTEUROPE_CHARSET = 238;
export const RUSSIAN_CHARSET = 204;
export const MAC_CHARSET = 77;
export const BALTIC_CHARSET = 186;
export const AD_COUNTERCLOCKWISE = 1;
export const AD_CLOCKWISE = 2;
export const TTLOAD_FONT_SUBSETTED = 1;
export const TTLOAD_FONT_IN_SYSSTARTUP = 2;
export const BLACKONWHITE = 1;
export const COLORONCOLOR = 3;
export const HALFTONE = 4;
export const STRETCH_ANDSCANS = 1;
export const STRETCH_DELETESCANS = 3;
export const STRETCH_HALFTONE = 4;
export const STRETCH_ORSCANS = 2;
export const WHITEONBLACK = 2;
export const DEFAULT_QUALITY = 0;
export const DRAFT_QUALITY = 1;
export const PROOF_QUALITY = 2;
export const NONANTIALIASED_QUALITY = 3;
export const ANTIALIASED_QUALITY = 4;
export const CLEARTYPE_QUALITY = 5;
export const OPAQUE = 2;
export const TRANSPARENT = 1;
export const GCP_CLASSIN = 524288;
export const GCP_DIACRITIC = 256;
export const GCP_DISPLAYZWG = 4194304;
export const GCP_GLYPHSHAPE = 16;
export const GCP_JUSTIFY = 65536;
export const GCP_KASHIDA = 1024;
export const GCP_LIGATE = 32;
export const GCP_MAXEXTENT = 1048576;
export const GCP_NEUTRALOVERRIDE = 33554432;
export const GCP_NUMERICOVERRIDE = 16777216;
export const GCP_NUMERICSLATIN = 67108864;
export const GCP_NUMERICSLOCAL = 134217728;
export const GCP_REORDER = 2;
export const GCP_SYMSWAPOFF = 8388608;
export const GCP_USEKERNING = 8;
export const BF_ADJUST = 8192;
export const BF_BOTTOM = 8;
export const BF_BOTTOMLEFT = 9;
export const BF_BOTTOMRIGHT = 12;
export const BF_DIAGONAL = 16;
export const BF_DIAGONAL_ENDBOTTOMLEFT = 25;
export const BF_DIAGONAL_ENDBOTTOMRIGHT = 28;
export const BF_DIAGONAL_ENDTOPLEFT = 19;
export const BF_DIAGONAL_ENDTOPRIGHT = 22;
export const BF_FLAT = 16384;
export const BF_LEFT = 1;
export const BF_MIDDLE = 2048;
export const BF_MONO = 32768;
export const BF_RECT = 15;
export const BF_RIGHT = 4;
export const BF_SOFT = 4096;
export const BF_TOP = 2;
export const BF_TOPLEFT = 3;
export const BF_TOPRIGHT = 6;
export const COLOR_SCROLLBAR = 0;
export const COLOR_BACKGROUND = 1;
export const COLOR_ACTIVECAPTION = 2;
export const COLOR_INACTIVECAPTION = 3;
export const COLOR_MENU = 4;
export const COLOR_WINDOW = 5;
export const COLOR_WINDOWFRAME = 6;
export const COLOR_MENUTEXT = 7;
export const COLOR_WINDOWTEXT = 8;
export const COLOR_CAPTIONTEXT = 9;
export const COLOR_ACTIVEBORDER = 10;
export const COLOR_INACTIVEBORDER = 11;
export const COLOR_APPWORKSPACE = 12;
export const COLOR_HIGHLIGHT = 13;
export const COLOR_HIGHLIGHTTEXT = 14;
export const COLOR_BTNFACE = 15;
export const COLOR_BTNSHADOW = 16;
export const COLOR_GRAYTEXT = 17;
export const COLOR_BTNTEXT = 18;
export const COLOR_INACTIVECAPTIONTEXT = 19;
export const COLOR_BTNHIGHLIGHT = 20;
export const COLOR_3DDKSHADOW = 21;
export const COLOR_3DLIGHT = 22;
export const COLOR_INFOTEXT = 23;
export const COLOR_INFOBK = 24;
export const COLOR_HOTLIGHT = 26;
export const COLOR_GRADIENTACTIVECAPTION = 27;
export const COLOR_GRADIENTINACTIVECAPTION = 28;
export const COLOR_MENUHILIGHT = 29;
export const COLOR_MENUBAR = 30;
export const COLOR_DESKTOP = 1;
export const COLOR_3DFACE = 15;
export const COLOR_3DSHADOW = 16;
export const COLOR_3DHIGHLIGHT = 20;
export const COLOR_3DHILIGHT = 20;
export const COLOR_BTNHILIGHT = 20;
export const LICENSE_PREVIEWPRINT = 4;
export const LICENSE_EDITABLE = 8;
export const LICENSE_INSTALLABLE = 0;
export const LICENSE_NOEMBEDDING = 2;
export const LICENSE_DEFAULT = 0;
export const GRADIENT_FILL_RECT_H = 0;
export const GRADIENT_FILL_RECT_V = 1;
export const GRADIENT_FILL_TRIANGLE = 2;
export const TTFCFP_STD_MAC_CHAR_SET = 0;
export const TTFCFP_SYMBOL_CHAR_SET = 0;
export const TTFCFP_UNICODE_CHAR_SET = 1;
export const FLOODFILLBORDER = 0;
export const FLOODFILLSURFACE = 1;
export const HS_BDIAGONAL = 3;
export const HS_CROSS = 4;
export const HS_DIAGCROSS = 5;
export const HS_FDIAGONAL = 2;
export const HS_HORIZONTAL = 0;
export const HS_VERTICAL = 1;
export const DC_ACTIVE = 1;
export const DC_BUTTONS = 4096;
export const DC_GRADIENT = 32;
export const DC_ICON = 4;
export const DC_INBUTTON = 16;
export const DC_SMALLCAP = 2;
export const DC_TEXT = 8;
export const SYSPAL_NOSTATIC = 2;
export const SYSPAL_NOSTATIC256 = 3;
export const SYSPAL_STATIC = 1;
export const GM_COMPATIBLE = 1;
export const GM_ADVANCED = 2;
export const DEFAULT_PITCH = 0;
export const FIXED_PITCH = 1;
export const VARIABLE_PITCH = 2;
export const FF_DECORATIVE = 80;
export const FF_DONTCARE = 0;
export const FF_MODERN = 48;
export const FF_ROMAN = 16;
export const FF_SCRIPT = 64;
export const FF_SWISS = 32;
export const BLACKNESS = 66;
export const NOTSRCERASE = 1114278;
export const NOTSRCCOPY = 3342344;
export const SRCERASE = 4457256;
export const DSTINVERT = 5570569;
export const PATINVERT = 5898313;
export const SRCINVERT = 6684742;
export const SRCAND = 8913094;
export const MERGEPAINT = 12255782;
export const MERGECOPY = 12583114;
export const SRCCOPY = 13369376;
export const SRCPAINT = 15597702;
export const PATCOPY = 15728673;
export const PATPAINT = 16452105;
export const WHITENESS = 16711778;
export const CAPTUREBLT = 1073741824;
export const NOMIRRORBITMAP = 2147483648;
export const TTFCFP_UNICODE_PLATFORMID = 0;
export const TTFCFP_ISO_PLATFORMID = 2;
export const MM_ANISOTROPIC = 8;
export const MM_HIENGLISH = 5;
export const MM_HIMETRIC = 3;
export const MM_ISOTROPIC = 7;
export const MM_LOENGLISH = 4;
export const MM_LOMETRIC = 2;
export const MM_TEXT = 1;
export const MM_TWIPS = 6;
export const RGN_ERROR = 0;
export const NULLREGION = 1;
export const SIMPLEREGION = 2;
export const COMPLEXREGION = 3;
export const BS_SOLID = 0;
export const BS_NULL = 1;
export const BS_HOLLOW = 1;
export const BS_HATCHED = 2;
export const BS_PATTERN = 3;
export const BS_INDEXED = 4;
export const BS_DIBPATTERN = 5;
export const BS_DIBPATTERNPT = 6;
export const BS_PATTERN8X8 = 7;
export const BS_DIBPATTERN8X8 = 8;
export const BS_MONOPATTERN = 9;
export const TMPF_FIXED_PITCH = 1;
export const TMPF_VECTOR = 2;
export const TMPF_DEVICE = 8;
export const TMPF_TRUETYPE = 4;
export const BI_RGB = 0;
export const BI_RLE8 = 1;
export const BI_RLE4 = 2;
export const BI_BITFIELDS = 3;
export const BI_JPEG = 4;
export const BI_PNG = 5;
export const EMR_HEADER = 1;
export const EMR_POLYBEZIER = 2;
export const EMR_POLYGON = 3;
export const EMR_POLYLINE = 4;
export const EMR_POLYBEZIERTO = 5;
export const EMR_POLYLINETO = 6;
export const EMR_POLYPOLYLINE = 7;
export const EMR_POLYPOLYGON = 8;
export const EMR_SETWINDOWEXTEX = 9;
export const EMR_SETWINDOWORGEX = 10;
export const EMR_SETVIEWPORTEXTEX = 11;
export const EMR_SETVIEWPORTORGEX = 12;
export const EMR_SETBRUSHORGEX = 13;
export const EMR_EOF = 14;
export const EMR_SETPIXELV = 15;
export const EMR_SETMAPPERFLAGS = 16;
export const EMR_SETMAPMODE = 17;
export const EMR_SETBKMODE = 18;
export const EMR_SETPOLYFILLMODE = 19;
export const EMR_SETROP2 = 20;
export const EMR_SETSTRETCHBLTMODE = 21;
export const EMR_SETTEXTALIGN = 22;
export const EMR_SETCOLORADJUSTMENT = 23;
export const EMR_SETTEXTCOLOR = 24;
export const EMR_SETBKCOLOR = 25;
export const EMR_OFFSETCLIPRGN = 26;
export const EMR_MOVETOEX = 27;
export const EMR_SETMETARGN = 28;
export const EMR_EXCLUDECLIPRECT = 29;
export const EMR_INTERSECTCLIPRECT = 30;
export const EMR_SCALEVIEWPORTEXTEX = 31;
export const EMR_SCALEWINDOWEXTEX = 32;
export const EMR_SAVEDC = 33;
export const EMR_RESTOREDC = 34;
export const EMR_SETWORLDTRANSFORM = 35;
export const EMR_MODIFYWORLDTRANSFORM = 36;
export const EMR_SELECTOBJECT = 37;
export const EMR_CREATEPEN = 38;
export const EMR_CREATEBRUSHINDIRECT = 39;
export const EMR_DELETEOBJECT = 40;
export const EMR_ANGLEARC = 41;
export const EMR_ELLIPSE = 42;
export const EMR_RECTANGLE = 43;
export const EMR_ROUNDRECT = 44;
export const EMR_ARC = 45;
export const EMR_CHORD = 46;
export const EMR_PIE = 47;
export const EMR_SELECTPALETTE = 48;
export const EMR_CREATEPALETTE = 49;
export const EMR_SETPALETTEENTRIES = 50;
export const EMR_RESIZEPALETTE = 51;
export const EMR_REALIZEPALETTE = 52;
export const EMR_EXTFLOODFILL = 53;
export const EMR_LINETO = 54;
export const EMR_ARCTO = 55;
export const EMR_POLYDRAW = 56;
export const EMR_SETARCDIRECTION = 57;
export const EMR_SETMITERLIMIT = 58;
export const EMR_BEGINPATH = 59;
export const EMR_ENDPATH = 60;
export const EMR_CLOSEFIGURE = 61;
export const EMR_FILLPATH = 62;
export const EMR_STROKEANDFILLPATH = 63;
export const EMR_STROKEPATH = 64;
export const EMR_FLATTENPATH = 65;
export const EMR_WIDENPATH = 66;
export const EMR_SELECTCLIPPATH = 67;
export const EMR_ABORTPATH = 68;
export const EMR_GDICOMMENT = 70;
export const EMR_FILLRGN = 71;
export const EMR_FRAMERGN = 72;
export const EMR_INVERTRGN = 73;
export const EMR_PAINTRGN = 74;
export const EMR_EXTSELECTCLIPRGN = 75;
export const EMR_BITBLT = 76;
export const EMR_STRETCHBLT = 77;
export const EMR_MASKBLT = 78;
export const EMR_PLGBLT = 79;
export const EMR_SETDIBITSTODEVICE = 80;
export const EMR_STRETCHDIBITS = 81;
export const EMR_EXTCREATEFONTINDIRECTW = 82;
export const EMR_EXTTEXTOUTA = 83;
export const EMR_EXTTEXTOUTW = 84;
export const EMR_POLYBEZIER16 = 85;
export const EMR_POLYGON16 = 86;
export const EMR_POLYLINE16 = 87;
export const EMR_POLYBEZIERTO16 = 88;
export const EMR_POLYLINETO16 = 89;
export const EMR_POLYPOLYLINE16 = 90;
export const EMR_POLYPOLYGON16 = 91;
export const EMR_POLYDRAW16 = 92;
export const EMR_CREATEMONOBRUSH = 93;
export const EMR_CREATEDIBPATTERNBRUSHPT = 94;
export const EMR_EXTCREATEPEN = 95;
export const EMR_POLYTEXTOUTA = 96;
export const EMR_POLYTEXTOUTW = 97;
export const EMR_SETICMMODE = 98;
export const EMR_CREATECOLORSPACE = 99;
export const EMR_SETCOLORSPACE = 100;
export const EMR_DELETECOLORSPACE = 101;
export const EMR_GLSRECORD = 102;
export const EMR_GLSBOUNDEDRECORD = 103;
export const EMR_PIXELFORMAT = 104;
export const EMR_RESERVED_105 = 105;
export const EMR_RESERVED_106 = 106;
export const EMR_RESERVED_107 = 107;
export const EMR_RESERVED_108 = 108;
export const EMR_RESERVED_109 = 109;
export const EMR_RESERVED_110 = 110;
export const EMR_COLORCORRECTPALETTE = 111;
export const EMR_SETICMPROFILEA = 112;
export const EMR_SETICMPROFILEW = 113;
export const EMR_ALPHABLEND = 114;
export const EMR_SETLAYOUT = 115;
export const EMR_TRANSPARENTBLT = 116;
export const EMR_RESERVED_117 = 117;
export const EMR_GRADIENTFILL = 118;
export const EMR_RESERVED_119 = 119;
export const EMR_RESERVED_120 = 120;
export const EMR_COLORMATCHTOTARGETW = 121;
export const EMR_CREATECOLORSPACEW = 122;
export const EMR_MIN = 1;
export const EMR_MAX = 122;
export const DM_SPECVERSION = 1025;
export const DM_ORIENTATION = 1;
export const DM_PAPERSIZE = 2;
export const DM_PAPERLENGTH = 4;
export const DM_PAPERWIDTH = 8;
export const DM_SCALE = 16;
export const DM_POSITION = 32;
export const DM_NUP = 64;
export const DM_DISPLAYORIENTATION = 128;
export const DM_COPIES = 256;
export const DM_DEFAULTSOURCE = 512;
export const DM_PRINTQUALITY = 1024;
export const DM_COLOR = 2048;
export const DM_DUPLEX = 4096;
export const DM_YRESOLUTION = 8192;
export const DM_TTOPTION = 16384;
export const DM_COLLATE = 32768;
export const DM_FORMNAME = 65536;
export const DM_LOGPIXELS = 131072;
export const DM_BITSPERPEL = 262144;
export const DM_PELSWIDTH = 524288;
export const DM_PELSHEIGHT = 1048576;
export const DM_DISPLAYFLAGS = 2097152;
export const DM_DISPLAYFREQUENCY = 4194304;
export const DM_ICMMETHOD = 8388608;
export const DM_ICMINTENT = 16777216;
export const DM_MEDIATYPE = 33554432;
export const DM_DITHERTYPE = 67108864;
export const DM_PANNINGWIDTH = 134217728;
export const DM_PANNINGHEIGHT = 268435456;
export const DM_DISPLAYFIXEDOUTPUT = 536870912;
export const DM_INTERLACED = 2;
export const DM_UPDATE = 1;
export const DM_COPY = 2;
export const DM_PROMPT = 4;
export const DM_MODIFY = 8;
export const DM_IN_BUFFER = 8;
export const DM_IN_PROMPT = 4;
export const DM_OUT_BUFFER = 2;
export const DM_OUT_DEFAULT = 1;
export const DMCOLOR_MONOCHROME = 1;
export const DMCOLOR_COLOR = 2;
export const DMDUP_SIMPLEX = 1;
export const DMDUP_VERTICAL = 2;
export const DMDUP_HORIZONTAL = 3;
export const DMCOLLATE_FALSE = 0;
export const DMCOLLATE_TRUE = 1;
export const DMTT_BITMAP = 1;
export const DMTT_DOWNLOAD = 2;
export const DMTT_SUBDEV = 3;
export const DMTT_DOWNLOAD_OUTLINE = 4;
export const PAN_FAMILY_ANY = 0;
export const PAN_FAMILY_NO_FIT = 1;
export const PAN_FAMILY_TEXT_DISPLAY = 2;
export const PAN_FAMILY_SCRIPT = 3;
export const PAN_FAMILY_DECORATIVE = 4;
export const PAN_FAMILY_PICTORIAL = 5;
export const PAN_SERIF_ANY = 0;
export const PAN_SERIF_NO_FIT = 1;
export const PAN_SERIF_COVE = 2;
export const PAN_SERIF_OBTUSE_COVE = 3;
export const PAN_SERIF_SQUARE_COVE = 4;
export const PAN_SERIF_OBTUSE_SQUARE_COVE = 5;
export const PAN_SERIF_SQUARE = 6;
export const PAN_SERIF_THIN = 7;
export const PAN_SERIF_BONE = 8;
export const PAN_SERIF_EXAGGERATED = 9;
export const PAN_SERIF_TRIANGLE = 10;
export const PAN_SERIF_NORMAL_SANS = 11;
export const PAN_SERIF_OBTUSE_SANS = 12;
export const PAN_SERIF_PERP_SANS = 13;
export const PAN_SERIF_FLARED = 14;
export const PAN_SERIF_ROUNDED = 15;
export const PAN_WEIGHT_ANY = 0;
export const PAN_WEIGHT_NO_FIT = 1;
export const PAN_WEIGHT_INDEX = 2;
export const PAN_WEIGHT_VERY_LIGHT = 2;
export const PAN_WEIGHT_LIGHT = 3;
export const PAN_WEIGHT_THIN = 4;
export const PAN_WEIGHT_BOOK = 5;
export const PAN_WEIGHT_MEDIUM = 6;
export const PAN_WEIGHT_DEMI = 7;
export const PAN_WEIGHT_BOLD = 8;
export const PAN_WEIGHT_HEAVY = 9;
export const PAN_WEIGHT_BLACK = 10;
export const PAN_WEIGHT_NORD = 11;
export const PAN_STROKE_ANY = 0;
export const PAN_STROKE_NO_FIT = 1;
export const PAN_STROKE_GRADUAL_DIAG = 2;
export const PAN_STROKE_GRADUAL_TRAN = 3;
export const PAN_STROKE_GRADUAL_VERT = 4;
export const PAN_STROKE_GRADUAL_HORZ = 5;
export const PAN_STROKE_RAPID_VERT = 6;
export const PAN_STROKE_RAPID_HORZ = 7;
export const PAN_STROKE_INSTANT_VERT = 8;
export const PAN_PROP_ANY = 0;
export const PAN_PROP_NO_FIT = 1;
export const PAN_PROP_OLD_STYLE = 2;
export const PAN_PROP_MODERN = 3;
export const PAN_PROP_EVEN_WIDTH = 4;
export const PAN_PROP_EXPANDED = 5;
export const PAN_PROP_CONDENSED = 6;
export const PAN_PROP_VERY_EXPANDED = 7;
export const PAN_PROP_VERY_CONDENSED = 8;
export const PAN_PROP_MONOSPACED = 9;
export const PAN_CONTRAST_ANY = 0;
export const PAN_CONTRAST_NO_FIT = 1;
export const PAN_CONTRAST_INDEX = 4;
export const PAN_CONTRAST_NONE = 2;
export const PAN_CONTRAST_VERY_LOW = 3;
export const PAN_CONTRAST_LOW = 4;
export const PAN_CONTRAST_MEDIUM_LOW = 5;
export const PAN_CONTRAST_MEDIUM = 6;
export const PAN_CONTRAST_MEDIUM_HIGH = 7;
export const PAN_CONTRAST_HIGH = 8;
export const PAN_CONTRAST_VERY_HIGH = 9;
export const PAN_ARM_ANY = 0;
export const PAN_ARM_NO_FIT = 1;
export const PAN_STRAIGHT_ARMS_HORZ = 2;
export const PAN_STRAIGHT_ARMS_WEDGE = 3;
export const PAN_STRAIGHT_ARMS_VERT = 4;
export const PAN_STRAIGHT_ARMS_SINGLE_SERIF = 5;
export const PAN_STRAIGHT_ARMS_DOUBLE_SERIF = 6;
export const PAN_BENT_ARMS_HORZ = 7;
export const PAN_BENT_ARMS_WEDGE = 8;
export const PAN_BENT_ARMS_VERT = 9;
export const PAN_BENT_ARMS_SINGLE_SERIF = 10;
export const PAN_BENT_ARMS_DOUBLE_SERIF = 11;
export const PAN_LETT_FORM_ANY = 0;
export const PAN_LETT_FORM_NO_FIT = 1;
export const PAN_LETT_NORMAL_CONTACT = 2;
export const PAN_LETT_NORMAL_WEIGHTED = 3;
export const PAN_LETT_NORMAL_BOXED = 4;
export const PAN_LETT_NORMAL_FLATTENED = 5;
export const PAN_LETT_NORMAL_ROUNDED = 6;
export const PAN_LETT_NORMAL_OFF_CENTER = 7;
export const PAN_LETT_NORMAL_SQUARE = 8;
export const PAN_LETT_OBLIQUE_CONTACT = 9;
export const PAN_LETT_OBLIQUE_WEIGHTED = 10;
export const PAN_LETT_OBLIQUE_BOXED = 11;
export const PAN_LETT_OBLIQUE_FLATTENED = 12;
export const PAN_LETT_OBLIQUE_ROUNDED = 13;
export const PAN_LETT_OBLIQUE_OFF_CENTER = 14;
export const PAN_LETT_OBLIQUE_SQUARE = 15;
export const PAN_MIDLINE_ANY = 0;
export const PAN_MIDLINE_NO_FIT = 1;
export const PAN_MIDLINE_INDEX = 8;
export const PAN_MIDLINE_STANDARD_TRIMMED = 2;
export const PAN_MIDLINE_STANDARD_POINTED = 3;
export const PAN_MIDLINE_STANDARD_SERIFED = 4;
export const PAN_MIDLINE_HIGH_TRIMMED = 5;
export const PAN_MIDLINE_HIGH_POINTED = 6;
export const PAN_MIDLINE_HIGH_SERIFED = 7;
export const PAN_MIDLINE_CONSTANT_TRIMMED = 8;
export const PAN_MIDLINE_CONSTANT_POINTED = 9;
export const PAN_MIDLINE_CONSTANT_SERIFED = 10;
export const PAN_MIDLINE_LOW_TRIMMED = 11;
export const PAN_MIDLINE_LOW_POINTED = 12;
export const PAN_MIDLINE_LOW_SERIFED = 13;
export const PAN_XHEIGHT_ANY = 0;
export const PAN_XHEIGHT_NO_FIT = 1;
export const PAN_XHEIGHT_INDEX = 9;
export const PAN_XHEIGHT_CONSTANT_SMALL = 2;
export const PAN_XHEIGHT_CONSTANT_STD = 3;
export const PAN_XHEIGHT_CONSTANT_LARGE = 4;
export const PAN_XHEIGHT_DUCKING_SMALL = 5;
export const PAN_XHEIGHT_DUCKING_STD = 6;
export const PAN_XHEIGHT_DUCKING_LARGE = 7;
export const DISPLAYCONFIG_COLOR_ENCODING_RGB = 0;
export const DISPLAYCONFIG_COLOR_ENCODING_YCBCR444 = 1;
export const DISPLAYCONFIG_COLOR_ENCODING_YCBCR422 = 2;
export const DISPLAYCONFIG_COLOR_ENCODING_YCBCR420 = 3;
export const DISPLAYCONFIG_COLOR_ENCODING_INTENSITY = 4;
export const DISPLAYCONFIG_COLOR_ENCODING_FORCE_UINT32 = `-1`;

// Structs

/**
 * Windows.Win32.Foundation.RECT (size: 16)
 */
export interface RECT {
  /** i32 */
  left: number;
  /** i32 */
  top: number;
  /** i32 */
  right: number;
  /** i32 */
  bottom: number;
}

export const sizeofRECT = 16;

export function allocRECT(data?: Partial<RECT>): Uint8Array {
  const buf = new Uint8Array(sizeofRECT);
  const view = new DataView(buf.buffer);
  // 0x00: i32
  if (data?.left !== undefined) view.setInt32(0, Number(data.left), true);
  // 0x04: i32
  if (data?.top !== undefined) view.setInt32(4, Number(data.top), true);
  // 0x08: i32
  if (data?.right !== undefined) view.setInt32(8, Number(data.right), true);
  // 0x0c: i32
  if (data?.bottom !== undefined) view.setInt32(12, Number(data.bottom), true);
  return buf;
}

export class RECTView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: i32
  get left(): number {
    return this.view.getInt32(0, true);
  }

  // 0x04: i32
  get top(): number {
    return this.view.getInt32(4, true);
  }

  // 0x08: i32
  get right(): number {
    return this.view.getInt32(8, true);
  }

  // 0x0c: i32
  get bottom(): number {
    return this.view.getInt32(12, true);
  }

  // 0x00: i32
  set left(value: number) {
    this.view.setInt32(0, value, true);
  }

  // 0x04: i32
  set top(value: number) {
    this.view.setInt32(4, value, true);
  }

  // 0x08: i32
  set right(value: number) {
    this.view.setInt32(8, value, true);
  }

  // 0x0c: i32
  set bottom(value: number) {
    this.view.setInt32(12, value, true);
  }
}

/**
 * Windows.Win32.Graphics.Gdi.MONITORINFO (size: 32)
 */
export interface MONITORINFO {
  /** u32 */
  cbSize: number;
  /** Windows.Win32.Foundation.RECT */
  rcMonitor: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.Foundation.RECT */
  rcWork: Uint8Array | Deno.PointerValue;
  /** u32 */
  dwFlags: number;
}

export const sizeofMONITORINFO = 32;

export function allocMONITORINFO(data?: Partial<MONITORINFO>): Uint8Array {
  const buf = new Uint8Array(sizeofMONITORINFO);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.cbSize !== undefined) view.setUint32(0, Number(data.cbSize), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.rcMonitor !== undefined) view.setBigUint64(8, data.rcMonitor === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.rcMonitor))), true);
  // 0x10: pointer
  if (data?.rcWork !== undefined) view.setBigUint64(16, data.rcWork === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.rcWork))), true);
  // 0x18: u32
  if (data?.dwFlags !== undefined) view.setUint32(24, Number(data.dwFlags), true);
  // 0x1c: pad4
  return buf;
}

export class MONITORINFOView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get cbSize(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  get rcMonitor(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x10: pointer
  get rcWork(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(16, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x18: u32
  get dwFlags(): number {
    return this.view.getUint32(24, true);
  }

  // 0x1c: pad4

  // 0x00: u32
  set cbSize(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  set rcMonitor(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x10: pointer
  set rcWork(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(16, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x18: u32
  set dwFlags(value: number) {
    this.view.setUint32(24, value, true);
  }

  // 0x1c: pad4
}

/**
 * Windows.Win32.Graphics.Gdi.MONITORINFOEXA (size: 16)
 */
export interface MONITORINFOEXA {
  /** Windows.Win32.Graphics.Gdi.MONITORINFO */
  monitorInfo: Uint8Array | Deno.PointerValue;
  /** array */
  szDevice: Deno.PointerValue;
}

export const sizeofMONITORINFOEXA = 16;

export function allocMONITORINFOEXA(data?: Partial<MONITORINFOEXA>): Uint8Array {
  const buf = new Uint8Array(sizeofMONITORINFOEXA);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.monitorInfo !== undefined) view.setBigUint64(0, data.monitorInfo === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.monitorInfo))), true);
  // 0x08: pointer
  if (data?.szDevice !== undefined) view.setBigUint64(8, data.szDevice === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.szDevice))), true);
  return buf;
}

export class MONITORINFOEXAView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get monitorInfo(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(0, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x08: pointer
  get szDevice(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: pointer
  set monitorInfo(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(0, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x08: pointer
  set szDevice(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.Graphics.Gdi.MONITORINFOEXW (size: 16)
 */
export interface MONITORINFOEXW {
  /** Windows.Win32.Graphics.Gdi.MONITORINFO */
  monitorInfo: Uint8Array | Deno.PointerValue;
  /** array */
  szDevice: Deno.PointerValue;
}

export const sizeofMONITORINFOEXW = 16;

export function allocMONITORINFOEXW(data?: Partial<MONITORINFOEXW>): Uint8Array {
  const buf = new Uint8Array(sizeofMONITORINFOEXW);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.monitorInfo !== undefined) view.setBigUint64(0, data.monitorInfo === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.monitorInfo))), true);
  // 0x08: pointer
  if (data?.szDevice !== undefined) view.setBigUint64(8, data.szDevice === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.szDevice))), true);
  return buf;
}

export class MONITORINFOEXWView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get monitorInfo(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(0, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x08: pointer
  get szDevice(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: pointer
  set monitorInfo(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(0, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x08: pointer
  set szDevice(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

export type HDC = Deno.PointerValue;

export type CreatedHDC = Deno.PointerValue;

export type HBITMAP = Deno.PointerValue;

export type HRGN = Deno.PointerValue;

export type HPEN = Deno.PointerValue;

export type HBRUSH = Deno.PointerValue;

export type HFONT = Deno.PointerValue;

export type HMETAFILE = Deno.PointerValue;

export type HENHMETAFILE = Deno.PointerValue;

export type HPALETTE = Deno.PointerValue;

export type HdcMetdataFileHandle = Deno.PointerValue;

export type HdcMetdataEnhFileHandle = Deno.PointerValue;

export type HGDIOBJ = Deno.PointerValue;

export type HMONITOR = Deno.PointerValue;

/**
 * Windows.Win32.Graphics.Gdi.XFORM (size: 24)
 */
export interface XFORM {
  /** f32 */
  eM11: number;
  /** f32 */
  eM12: number;
  /** f32 */
  eM21: number;
  /** f32 */
  eM22: number;
  /** f32 */
  eDx: number;
  /** f32 */
  eDy: number;
}

export const sizeofXFORM = 24;

export function allocXFORM(data?: Partial<XFORM>): Uint8Array {
  const buf = new Uint8Array(sizeofXFORM);
  const view = new DataView(buf.buffer);
  // 0x00: f32
  if (data?.eM11 !== undefined) view.setFloat32(0, Number(data.eM11), true);
  // 0x04: f32
  if (data?.eM12 !== undefined) view.setFloat32(4, Number(data.eM12), true);
  // 0x08: f32
  if (data?.eM21 !== undefined) view.setFloat32(8, Number(data.eM21), true);
  // 0x0c: f32
  if (data?.eM22 !== undefined) view.setFloat32(12, Number(data.eM22), true);
  // 0x10: f32
  if (data?.eDx !== undefined) view.setFloat32(16, Number(data.eDx), true);
  // 0x14: f32
  if (data?.eDy !== undefined) view.setFloat32(20, Number(data.eDy), true);
  return buf;
}

export class XFORMView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: f32
  get eM11(): number {
    return this.view.getFloat32(0, true);
  }

  // 0x04: f32
  get eM12(): number {
    return this.view.getFloat32(4, true);
  }

  // 0x08: f32
  get eM21(): number {
    return this.view.getFloat32(8, true);
  }

  // 0x0c: f32
  get eM22(): number {
    return this.view.getFloat32(12, true);
  }

  // 0x10: f32
  get eDx(): number {
    return this.view.getFloat32(16, true);
  }

  // 0x14: f32
  get eDy(): number {
    return this.view.getFloat32(20, true);
  }

  // 0x00: f32
  set eM11(value: number) {
    this.view.setFloat32(0, value, true);
  }

  // 0x04: f32
  set eM12(value: number) {
    this.view.setFloat32(4, value, true);
  }

  // 0x08: f32
  set eM21(value: number) {
    this.view.setFloat32(8, value, true);
  }

  // 0x0c: f32
  set eM22(value: number) {
    this.view.setFloat32(12, value, true);
  }

  // 0x10: f32
  set eDx(value: number) {
    this.view.setFloat32(16, value, true);
  }

  // 0x14: f32
  set eDy(value: number) {
    this.view.setFloat32(20, value, true);
  }
}

/**
 * Windows.Win32.Graphics.Gdi.BITMAP (size: 32)
 */
export interface BITMAP {
  /** i32 */
  bmType: number;
  /** i32 */
  bmWidth: number;
  /** i32 */
  bmHeight: number;
  /** i32 */
  bmWidthBytes: number;
  /** u16 */
  bmPlanes: number;
  /** u16 */
  bmBitsPixel: number;
  /** ptr */
  bmBits: Deno.PointerValue | Uint8Array;
}

export const sizeofBITMAP = 32;

export function allocBITMAP(data?: Partial<BITMAP>): Uint8Array {
  const buf = new Uint8Array(sizeofBITMAP);
  const view = new DataView(buf.buffer);
  // 0x00: i32
  if (data?.bmType !== undefined) view.setInt32(0, Number(data.bmType), true);
  // 0x04: i32
  if (data?.bmWidth !== undefined) view.setInt32(4, Number(data.bmWidth), true);
  // 0x08: i32
  if (data?.bmHeight !== undefined) view.setInt32(8, Number(data.bmHeight), true);
  // 0x0c: i32
  if (data?.bmWidthBytes !== undefined) view.setInt32(12, Number(data.bmWidthBytes), true);
  // 0x10: u16
  if (data?.bmPlanes !== undefined) view.setUint16(16, Number(data.bmPlanes), true);
  // 0x12: u16
  if (data?.bmBitsPixel !== undefined) view.setUint16(18, Number(data.bmBitsPixel), true);
  // 0x14: pad4
  // 0x18: pointer
  if (data?.bmBits !== undefined) view.setBigUint64(24, data.bmBits === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.bmBits))), true);
  return buf;
}

export class BITMAPView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: i32
  get bmType(): number {
    return this.view.getInt32(0, true);
  }

  // 0x04: i32
  get bmWidth(): number {
    return this.view.getInt32(4, true);
  }

  // 0x08: i32
  get bmHeight(): number {
    return this.view.getInt32(8, true);
  }

  // 0x0c: i32
  get bmWidthBytes(): number {
    return this.view.getInt32(12, true);
  }

  // 0x10: u16
  get bmPlanes(): number {
    return this.view.getUint16(16, true);
  }

  // 0x12: u16
  get bmBitsPixel(): number {
    return this.view.getUint16(18, true);
  }

  // 0x14: pad4

  // 0x18: pointer
  get bmBits(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(24, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: i32
  set bmType(value: number) {
    this.view.setInt32(0, value, true);
  }

  // 0x04: i32
  set bmWidth(value: number) {
    this.view.setInt32(4, value, true);
  }

  // 0x08: i32
  set bmHeight(value: number) {
    this.view.setInt32(8, value, true);
  }

  // 0x0c: i32
  set bmWidthBytes(value: number) {
    this.view.setInt32(12, value, true);
  }

  // 0x10: u16
  set bmPlanes(value: number) {
    this.view.setUint16(16, value, true);
  }

  // 0x12: u16
  set bmBitsPixel(value: number) {
    this.view.setUint16(18, value, true);
  }

  // 0x14: pad4

  // 0x18: pointer
  set bmBits(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(24, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.Graphics.Gdi.RGBTRIPLE (size: 8)
 */
export interface RGBTRIPLE {
  /** u8 */
  rgbtBlue: number;
  /** u8 */
  rgbtGreen: number;
  /** u8 */
  rgbtRed: number;
}

export const sizeofRGBTRIPLE = 8;

export function allocRGBTRIPLE(data?: Partial<RGBTRIPLE>): Uint8Array {
  const buf = new Uint8Array(sizeofRGBTRIPLE);
  const view = new DataView(buf.buffer);
  // 0x00: u8
  if (data?.rgbtBlue !== undefined) view.setUint8(0, Number(data.rgbtBlue));
  // 0x01: u8
  if (data?.rgbtGreen !== undefined) view.setUint8(1, Number(data.rgbtGreen));
  // 0x02: u8
  if (data?.rgbtRed !== undefined) view.setUint8(2, Number(data.rgbtRed));
  // 0x03: pad5
  return buf;
}

export class RGBTRIPLEView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u8
  get rgbtBlue(): number {
    return this.view.getUint8(0);
  }

  // 0x01: u8
  get rgbtGreen(): number {
    return this.view.getUint8(1);
  }

  // 0x02: u8
  get rgbtRed(): number {
    return this.view.getUint8(2);
  }

  // 0x03: pad5

  // 0x00: u8
  set rgbtBlue(value: number) {
    this.view.setUint8(0, value);
  }

  // 0x01: u8
  set rgbtGreen(value: number) {
    this.view.setUint8(1, value);
  }

  // 0x02: u8
  set rgbtRed(value: number) {
    this.view.setUint8(2, value);
  }

  // 0x03: pad5
}

/**
 * Windows.Win32.Graphics.Gdi.RGBQUAD (size: 8)
 */
export interface RGBQUAD {
  /** u8 */
  rgbBlue: number;
  /** u8 */
  rgbGreen: number;
  /** u8 */
  rgbRed: number;
  /** u8 */
  rgbReserved: number;
}

export const sizeofRGBQUAD = 8;

export function allocRGBQUAD(data?: Partial<RGBQUAD>): Uint8Array {
  const buf = new Uint8Array(sizeofRGBQUAD);
  const view = new DataView(buf.buffer);
  // 0x00: u8
  if (data?.rgbBlue !== undefined) view.setUint8(0, Number(data.rgbBlue));
  // 0x01: u8
  if (data?.rgbGreen !== undefined) view.setUint8(1, Number(data.rgbGreen));
  // 0x02: u8
  if (data?.rgbRed !== undefined) view.setUint8(2, Number(data.rgbRed));
  // 0x03: u8
  if (data?.rgbReserved !== undefined) view.setUint8(3, Number(data.rgbReserved));
  // 0x04: pad4
  return buf;
}

export class RGBQUADView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u8
  get rgbBlue(): number {
    return this.view.getUint8(0);
  }

  // 0x01: u8
  get rgbGreen(): number {
    return this.view.getUint8(1);
  }

  // 0x02: u8
  get rgbRed(): number {
    return this.view.getUint8(2);
  }

  // 0x03: u8
  get rgbReserved(): number {
    return this.view.getUint8(3);
  }

  // 0x04: pad4

  // 0x00: u8
  set rgbBlue(value: number) {
    this.view.setUint8(0, value);
  }

  // 0x01: u8
  set rgbGreen(value: number) {
    this.view.setUint8(1, value);
  }

  // 0x02: u8
  set rgbRed(value: number) {
    this.view.setUint8(2, value);
  }

  // 0x03: u8
  set rgbReserved(value: number) {
    this.view.setUint8(3, value);
  }

  // 0x04: pad4
}

/**
 * Windows.Win32.Graphics.Gdi.CIEXYZ (size: 16)
 */
export interface CIEXYZ {
  /** i32 */
  ciexyzX: number;
  /** i32 */
  ciexyzY: number;
  /** i32 */
  ciexyzZ: number;
}

export const sizeofCIEXYZ = 16;

export function allocCIEXYZ(data?: Partial<CIEXYZ>): Uint8Array {
  const buf = new Uint8Array(sizeofCIEXYZ);
  const view = new DataView(buf.buffer);
  // 0x00: i32
  if (data?.ciexyzX !== undefined) view.setInt32(0, Number(data.ciexyzX), true);
  // 0x04: i32
  if (data?.ciexyzY !== undefined) view.setInt32(4, Number(data.ciexyzY), true);
  // 0x08: i32
  if (data?.ciexyzZ !== undefined) view.setInt32(8, Number(data.ciexyzZ), true);
  // 0x0c: pad4
  return buf;
}

export class CIEXYZView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: i32
  get ciexyzX(): number {
    return this.view.getInt32(0, true);
  }

  // 0x04: i32
  get ciexyzY(): number {
    return this.view.getInt32(4, true);
  }

  // 0x08: i32
  get ciexyzZ(): number {
    return this.view.getInt32(8, true);
  }

  // 0x0c: pad4

  // 0x00: i32
  set ciexyzX(value: number) {
    this.view.setInt32(0, value, true);
  }

  // 0x04: i32
  set ciexyzY(value: number) {
    this.view.setInt32(4, value, true);
  }

  // 0x08: i32
  set ciexyzZ(value: number) {
    this.view.setInt32(8, value, true);
  }

  // 0x0c: pad4
}

/**
 * Windows.Win32.Graphics.Gdi.CIEXYZTRIPLE (size: 24)
 */
export interface CIEXYZTRIPLE {
  /** Windows.Win32.Graphics.Gdi.CIEXYZ */
  ciexyzRed: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.Graphics.Gdi.CIEXYZ */
  ciexyzGreen: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.Graphics.Gdi.CIEXYZ */
  ciexyzBlue: Uint8Array | Deno.PointerValue;
}

export const sizeofCIEXYZTRIPLE = 24;

export function allocCIEXYZTRIPLE(data?: Partial<CIEXYZTRIPLE>): Uint8Array {
  const buf = new Uint8Array(sizeofCIEXYZTRIPLE);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.ciexyzRed !== undefined) view.setBigUint64(0, data.ciexyzRed === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.ciexyzRed))), true);
  // 0x08: pointer
  if (data?.ciexyzGreen !== undefined) view.setBigUint64(8, data.ciexyzGreen === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.ciexyzGreen))), true);
  // 0x10: pointer
  if (data?.ciexyzBlue !== undefined) view.setBigUint64(16, data.ciexyzBlue === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.ciexyzBlue))), true);
  return buf;
}

export class CIEXYZTRIPLEView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get ciexyzRed(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(0, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x08: pointer
  get ciexyzGreen(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x10: pointer
  get ciexyzBlue(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(16, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: pointer
  set ciexyzRed(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(0, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x08: pointer
  set ciexyzGreen(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x10: pointer
  set ciexyzBlue(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(16, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.Graphics.Gdi.BITMAPCOREHEADER (size: 16)
 */
export interface BITMAPCOREHEADER {
  /** u32 */
  bcSize: number;
  /** u16 */
  bcWidth: number;
  /** u16 */
  bcHeight: number;
  /** u16 */
  bcPlanes: number;
  /** u16 */
  bcBitCount: number;
}

export const sizeofBITMAPCOREHEADER = 16;

export function allocBITMAPCOREHEADER(data?: Partial<BITMAPCOREHEADER>): Uint8Array {
  const buf = new Uint8Array(sizeofBITMAPCOREHEADER);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.bcSize !== undefined) view.setUint32(0, Number(data.bcSize), true);
  // 0x04: u16
  if (data?.bcWidth !== undefined) view.setUint16(4, Number(data.bcWidth), true);
  // 0x06: u16
  if (data?.bcHeight !== undefined) view.setUint16(6, Number(data.bcHeight), true);
  // 0x08: u16
  if (data?.bcPlanes !== undefined) view.setUint16(8, Number(data.bcPlanes), true);
  // 0x0a: u16
  if (data?.bcBitCount !== undefined) view.setUint16(10, Number(data.bcBitCount), true);
  // 0x0c: pad4
  return buf;
}

export class BITMAPCOREHEADERView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get bcSize(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: u16
  get bcWidth(): number {
    return this.view.getUint16(4, true);
  }

  // 0x06: u16
  get bcHeight(): number {
    return this.view.getUint16(6, true);
  }

  // 0x08: u16
  get bcPlanes(): number {
    return this.view.getUint16(8, true);
  }

  // 0x0a: u16
  get bcBitCount(): number {
    return this.view.getUint16(10, true);
  }

  // 0x0c: pad4

  // 0x00: u32
  set bcSize(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: u16
  set bcWidth(value: number) {
    this.view.setUint16(4, value, true);
  }

  // 0x06: u16
  set bcHeight(value: number) {
    this.view.setUint16(6, value, true);
  }

  // 0x08: u16
  set bcPlanes(value: number) {
    this.view.setUint16(8, value, true);
  }

  // 0x0a: u16
  set bcBitCount(value: number) {
    this.view.setUint16(10, value, true);
  }

  // 0x0c: pad4
}

/**
 * Windows.Win32.Graphics.Gdi.BITMAPINFOHEADER (size: 40)
 */
export interface BITMAPINFOHEADER {
  /** u32 */
  biSize: number;
  /** i32 */
  biWidth: number;
  /** i32 */
  biHeight: number;
  /** u16 */
  biPlanes: number;
  /** u16 */
  biBitCount: number;
  /** Windows.Win32.Graphics.Gdi.BI_COMPRESSION */
  biCompression: BI_COMPRESSION;
  /** u32 */
  biSizeImage: number;
  /** i32 */
  biXPelsPerMeter: number;
  /** i32 */
  biYPelsPerMeter: number;
  /** u32 */
  biClrUsed: number;
  /** u32 */
  biClrImportant: number;
}

export const sizeofBITMAPINFOHEADER = 40;

export function allocBITMAPINFOHEADER(data?: Partial<BITMAPINFOHEADER>): Uint8Array {
  const buf = new Uint8Array(sizeofBITMAPINFOHEADER);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.biSize !== undefined) view.setUint32(0, Number(data.biSize), true);
  // 0x04: i32
  if (data?.biWidth !== undefined) view.setInt32(4, Number(data.biWidth), true);
  // 0x08: i32
  if (data?.biHeight !== undefined) view.setInt32(8, Number(data.biHeight), true);
  // 0x0c: u16
  if (data?.biPlanes !== undefined) view.setUint16(12, Number(data.biPlanes), true);
  // 0x0e: u16
  if (data?.biBitCount !== undefined) view.setUint16(14, Number(data.biBitCount), true);
  // 0x10: i32
  if (data?.biCompression !== undefined) view.setInt32(16, Number(data.biCompression), true);
  // 0x14: u32
  if (data?.biSizeImage !== undefined) view.setUint32(20, Number(data.biSizeImage), true);
  // 0x18: i32
  if (data?.biXPelsPerMeter !== undefined) view.setInt32(24, Number(data.biXPelsPerMeter), true);
  // 0x1c: i32
  if (data?.biYPelsPerMeter !== undefined) view.setInt32(28, Number(data.biYPelsPerMeter), true);
  // 0x20: u32
  if (data?.biClrUsed !== undefined) view.setUint32(32, Number(data.biClrUsed), true);
  // 0x24: u32
  if (data?.biClrImportant !== undefined) view.setUint32(36, Number(data.biClrImportant), true);
  return buf;
}

export class BITMAPINFOHEADERView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get biSize(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: i32
  get biWidth(): number {
    return this.view.getInt32(4, true);
  }

  // 0x08: i32
  get biHeight(): number {
    return this.view.getInt32(8, true);
  }

  // 0x0c: u16
  get biPlanes(): number {
    return this.view.getUint16(12, true);
  }

  // 0x0e: u16
  get biBitCount(): number {
    return this.view.getUint16(14, true);
  }

  // 0x10: i32
  get biCompression(): number {
    return this.view.getInt32(16, true);
  }

  // 0x14: u32
  get biSizeImage(): number {
    return this.view.getUint32(20, true);
  }

  // 0x18: i32
  get biXPelsPerMeter(): number {
    return this.view.getInt32(24, true);
  }

  // 0x1c: i32
  get biYPelsPerMeter(): number {
    return this.view.getInt32(28, true);
  }

  // 0x20: u32
  get biClrUsed(): number {
    return this.view.getUint32(32, true);
  }

  // 0x24: u32
  get biClrImportant(): number {
    return this.view.getUint32(36, true);
  }

  // 0x00: u32
  set biSize(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: i32
  set biWidth(value: number) {
    this.view.setInt32(4, value, true);
  }

  // 0x08: i32
  set biHeight(value: number) {
    this.view.setInt32(8, value, true);
  }

  // 0x0c: u16
  set biPlanes(value: number) {
    this.view.setUint16(12, value, true);
  }

  // 0x0e: u16
  set biBitCount(value: number) {
    this.view.setUint16(14, value, true);
  }

  // 0x10: i32
  set biCompression(value: number) {
    this.view.setInt32(16, value, true);
  }

  // 0x14: u32
  set biSizeImage(value: number) {
    this.view.setUint32(20, value, true);
  }

  // 0x18: i32
  set biXPelsPerMeter(value: number) {
    this.view.setInt32(24, value, true);
  }

  // 0x1c: i32
  set biYPelsPerMeter(value: number) {
    this.view.setInt32(28, value, true);
  }

  // 0x20: u32
  set biClrUsed(value: number) {
    this.view.setUint32(32, value, true);
  }

  // 0x24: u32
  set biClrImportant(value: number) {
    this.view.setUint32(36, value, true);
  }
}

/**
 * Windows.Win32.Graphics.Gdi.BITMAPV4HEADER (size: 88)
 */
export interface BITMAPV4HEADER {
  /** u32 */
  bV4Size: number;
  /** i32 */
  bV4Width: number;
  /** i32 */
  bV4Height: number;
  /** u16 */
  bV4Planes: number;
  /** u16 */
  bV4BitCount: number;
  /** Windows.Win32.Graphics.Gdi.BI_COMPRESSION */
  bV4V4Compression: BI_COMPRESSION;
  /** u32 */
  bV4SizeImage: number;
  /** i32 */
  bV4XPelsPerMeter: number;
  /** i32 */
  bV4YPelsPerMeter: number;
  /** u32 */
  bV4ClrUsed: number;
  /** u32 */
  bV4ClrImportant: number;
  /** u32 */
  bV4RedMask: number;
  /** u32 */
  bV4GreenMask: number;
  /** u32 */
  bV4BlueMask: number;
  /** u32 */
  bV4AlphaMask: number;
  /** u32 */
  bV4CSType: number;
  /** Windows.Win32.Graphics.Gdi.CIEXYZTRIPLE */
  bV4Endpoints: Uint8Array | Deno.PointerValue;
  /** u32 */
  bV4GammaRed: number;
  /** u32 */
  bV4GammaGreen: number;
  /** u32 */
  bV4GammaBlue: number;
}

export const sizeofBITMAPV4HEADER = 88;

export function allocBITMAPV4HEADER(data?: Partial<BITMAPV4HEADER>): Uint8Array {
  const buf = new Uint8Array(sizeofBITMAPV4HEADER);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.bV4Size !== undefined) view.setUint32(0, Number(data.bV4Size), true);
  // 0x04: i32
  if (data?.bV4Width !== undefined) view.setInt32(4, Number(data.bV4Width), true);
  // 0x08: i32
  if (data?.bV4Height !== undefined) view.setInt32(8, Number(data.bV4Height), true);
  // 0x0c: u16
  if (data?.bV4Planes !== undefined) view.setUint16(12, Number(data.bV4Planes), true);
  // 0x0e: u16
  if (data?.bV4BitCount !== undefined) view.setUint16(14, Number(data.bV4BitCount), true);
  // 0x10: i32
  if (data?.bV4V4Compression !== undefined) view.setInt32(16, Number(data.bV4V4Compression), true);
  // 0x14: u32
  if (data?.bV4SizeImage !== undefined) view.setUint32(20, Number(data.bV4SizeImage), true);
  // 0x18: i32
  if (data?.bV4XPelsPerMeter !== undefined) view.setInt32(24, Number(data.bV4XPelsPerMeter), true);
  // 0x1c: i32
  if (data?.bV4YPelsPerMeter !== undefined) view.setInt32(28, Number(data.bV4YPelsPerMeter), true);
  // 0x20: u32
  if (data?.bV4ClrUsed !== undefined) view.setUint32(32, Number(data.bV4ClrUsed), true);
  // 0x24: u32
  if (data?.bV4ClrImportant !== undefined) view.setUint32(36, Number(data.bV4ClrImportant), true);
  // 0x28: u32
  if (data?.bV4RedMask !== undefined) view.setUint32(40, Number(data.bV4RedMask), true);
  // 0x2c: u32
  if (data?.bV4GreenMask !== undefined) view.setUint32(44, Number(data.bV4GreenMask), true);
  // 0x30: u32
  if (data?.bV4BlueMask !== undefined) view.setUint32(48, Number(data.bV4BlueMask), true);
  // 0x34: u32
  if (data?.bV4AlphaMask !== undefined) view.setUint32(52, Number(data.bV4AlphaMask), true);
  // 0x38: u32
  if (data?.bV4CSType !== undefined) view.setUint32(56, Number(data.bV4CSType), true);
  // 0x3c: pad4
  // 0x40: pointer
  if (data?.bV4Endpoints !== undefined) view.setBigUint64(64, data.bV4Endpoints === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.bV4Endpoints))), true);
  // 0x48: u32
  if (data?.bV4GammaRed !== undefined) view.setUint32(72, Number(data.bV4GammaRed), true);
  // 0x4c: u32
  if (data?.bV4GammaGreen !== undefined) view.setUint32(76, Number(data.bV4GammaGreen), true);
  // 0x50: u32
  if (data?.bV4GammaBlue !== undefined) view.setUint32(80, Number(data.bV4GammaBlue), true);
  // 0x54: pad4
  return buf;
}

export class BITMAPV4HEADERView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get bV4Size(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: i32
  get bV4Width(): number {
    return this.view.getInt32(4, true);
  }

  // 0x08: i32
  get bV4Height(): number {
    return this.view.getInt32(8, true);
  }

  // 0x0c: u16
  get bV4Planes(): number {
    return this.view.getUint16(12, true);
  }

  // 0x0e: u16
  get bV4BitCount(): number {
    return this.view.getUint16(14, true);
  }

  // 0x10: i32
  get bV4V4Compression(): number {
    return this.view.getInt32(16, true);
  }

  // 0x14: u32
  get bV4SizeImage(): number {
    return this.view.getUint32(20, true);
  }

  // 0x18: i32
  get bV4XPelsPerMeter(): number {
    return this.view.getInt32(24, true);
  }

  // 0x1c: i32
  get bV4YPelsPerMeter(): number {
    return this.view.getInt32(28, true);
  }

  // 0x20: u32
  get bV4ClrUsed(): number {
    return this.view.getUint32(32, true);
  }

  // 0x24: u32
  get bV4ClrImportant(): number {
    return this.view.getUint32(36, true);
  }

  // 0x28: u32
  get bV4RedMask(): number {
    return this.view.getUint32(40, true);
  }

  // 0x2c: u32
  get bV4GreenMask(): number {
    return this.view.getUint32(44, true);
  }

  // 0x30: u32
  get bV4BlueMask(): number {
    return this.view.getUint32(48, true);
  }

  // 0x34: u32
  get bV4AlphaMask(): number {
    return this.view.getUint32(52, true);
  }

  // 0x38: u32
  get bV4CSType(): number {
    return this.view.getUint32(56, true);
  }

  // 0x3c: pad4

  // 0x40: pointer
  get bV4Endpoints(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(64, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x48: u32
  get bV4GammaRed(): number {
    return this.view.getUint32(72, true);
  }

  // 0x4c: u32
  get bV4GammaGreen(): number {
    return this.view.getUint32(76, true);
  }

  // 0x50: u32
  get bV4GammaBlue(): number {
    return this.view.getUint32(80, true);
  }

  // 0x54: pad4

  // 0x00: u32
  set bV4Size(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: i32
  set bV4Width(value: number) {
    this.view.setInt32(4, value, true);
  }

  // 0x08: i32
  set bV4Height(value: number) {
    this.view.setInt32(8, value, true);
  }

  // 0x0c: u16
  set bV4Planes(value: number) {
    this.view.setUint16(12, value, true);
  }

  // 0x0e: u16
  set bV4BitCount(value: number) {
    this.view.setUint16(14, value, true);
  }

  // 0x10: i32
  set bV4V4Compression(value: number) {
    this.view.setInt32(16, value, true);
  }

  // 0x14: u32
  set bV4SizeImage(value: number) {
    this.view.setUint32(20, value, true);
  }

  // 0x18: i32
  set bV4XPelsPerMeter(value: number) {
    this.view.setInt32(24, value, true);
  }

  // 0x1c: i32
  set bV4YPelsPerMeter(value: number) {
    this.view.setInt32(28, value, true);
  }

  // 0x20: u32
  set bV4ClrUsed(value: number) {
    this.view.setUint32(32, value, true);
  }

  // 0x24: u32
  set bV4ClrImportant(value: number) {
    this.view.setUint32(36, value, true);
  }

  // 0x28: u32
  set bV4RedMask(value: number) {
    this.view.setUint32(40, value, true);
  }

  // 0x2c: u32
  set bV4GreenMask(value: number) {
    this.view.setUint32(44, value, true);
  }

  // 0x30: u32
  set bV4BlueMask(value: number) {
    this.view.setUint32(48, value, true);
  }

  // 0x34: u32
  set bV4AlphaMask(value: number) {
    this.view.setUint32(52, value, true);
  }

  // 0x38: u32
  set bV4CSType(value: number) {
    this.view.setUint32(56, value, true);
  }

  // 0x3c: pad4

  // 0x40: pointer
  set bV4Endpoints(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(64, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x48: u32
  set bV4GammaRed(value: number) {
    this.view.setUint32(72, value, true);
  }

  // 0x4c: u32
  set bV4GammaGreen(value: number) {
    this.view.setUint32(76, value, true);
  }

  // 0x50: u32
  set bV4GammaBlue(value: number) {
    this.view.setUint32(80, value, true);
  }

  // 0x54: pad4
}

/**
 * Windows.Win32.Graphics.Gdi.BITMAPV5HEADER (size: 104)
 */
export interface BITMAPV5HEADER {
  /** u32 */
  bV5Size: number;
  /** i32 */
  bV5Width: number;
  /** i32 */
  bV5Height: number;
  /** u16 */
  bV5Planes: number;
  /** u16 */
  bV5BitCount: number;
  /** Windows.Win32.Graphics.Gdi.BI_COMPRESSION */
  bV5Compression: BI_COMPRESSION;
  /** u32 */
  bV5SizeImage: number;
  /** i32 */
  bV5XPelsPerMeter: number;
  /** i32 */
  bV5YPelsPerMeter: number;
  /** u32 */
  bV5ClrUsed: number;
  /** u32 */
  bV5ClrImportant: number;
  /** u32 */
  bV5RedMask: number;
  /** u32 */
  bV5GreenMask: number;
  /** u32 */
  bV5BlueMask: number;
  /** u32 */
  bV5AlphaMask: number;
  /** u32 */
  bV5CSType: number;
  /** Windows.Win32.Graphics.Gdi.CIEXYZTRIPLE */
  bV5Endpoints: Uint8Array | Deno.PointerValue;
  /** u32 */
  bV5GammaRed: number;
  /** u32 */
  bV5GammaGreen: number;
  /** u32 */
  bV5GammaBlue: number;
  /** u32 */
  bV5Intent: number;
  /** u32 */
  bV5ProfileData: number;
  /** u32 */
  bV5ProfileSize: number;
  /** u32 */
  bV5Reserved: number;
}

export const sizeofBITMAPV5HEADER = 104;

export function allocBITMAPV5HEADER(data?: Partial<BITMAPV5HEADER>): Uint8Array {
  const buf = new Uint8Array(sizeofBITMAPV5HEADER);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.bV5Size !== undefined) view.setUint32(0, Number(data.bV5Size), true);
  // 0x04: i32
  if (data?.bV5Width !== undefined) view.setInt32(4, Number(data.bV5Width), true);
  // 0x08: i32
  if (data?.bV5Height !== undefined) view.setInt32(8, Number(data.bV5Height), true);
  // 0x0c: u16
  if (data?.bV5Planes !== undefined) view.setUint16(12, Number(data.bV5Planes), true);
  // 0x0e: u16
  if (data?.bV5BitCount !== undefined) view.setUint16(14, Number(data.bV5BitCount), true);
  // 0x10: i32
  if (data?.bV5Compression !== undefined) view.setInt32(16, Number(data.bV5Compression), true);
  // 0x14: u32
  if (data?.bV5SizeImage !== undefined) view.setUint32(20, Number(data.bV5SizeImage), true);
  // 0x18: i32
  if (data?.bV5XPelsPerMeter !== undefined) view.setInt32(24, Number(data.bV5XPelsPerMeter), true);
  // 0x1c: i32
  if (data?.bV5YPelsPerMeter !== undefined) view.setInt32(28, Number(data.bV5YPelsPerMeter), true);
  // 0x20: u32
  if (data?.bV5ClrUsed !== undefined) view.setUint32(32, Number(data.bV5ClrUsed), true);
  // 0x24: u32
  if (data?.bV5ClrImportant !== undefined) view.setUint32(36, Number(data.bV5ClrImportant), true);
  // 0x28: u32
  if (data?.bV5RedMask !== undefined) view.setUint32(40, Number(data.bV5RedMask), true);
  // 0x2c: u32
  if (data?.bV5GreenMask !== undefined) view.setUint32(44, Number(data.bV5GreenMask), true);
  // 0x30: u32
  if (data?.bV5BlueMask !== undefined) view.setUint32(48, Number(data.bV5BlueMask), true);
  // 0x34: u32
  if (data?.bV5AlphaMask !== undefined) view.setUint32(52, Number(data.bV5AlphaMask), true);
  // 0x38: u32
  if (data?.bV5CSType !== undefined) view.setUint32(56, Number(data.bV5CSType), true);
  // 0x3c: pad4
  // 0x40: pointer
  if (data?.bV5Endpoints !== undefined) view.setBigUint64(64, data.bV5Endpoints === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.bV5Endpoints))), true);
  // 0x48: u32
  if (data?.bV5GammaRed !== undefined) view.setUint32(72, Number(data.bV5GammaRed), true);
  // 0x4c: u32
  if (data?.bV5GammaGreen !== undefined) view.setUint32(76, Number(data.bV5GammaGreen), true);
  // 0x50: u32
  if (data?.bV5GammaBlue !== undefined) view.setUint32(80, Number(data.bV5GammaBlue), true);
  // 0x54: u32
  if (data?.bV5Intent !== undefined) view.setUint32(84, Number(data.bV5Intent), true);
  // 0x58: u32
  if (data?.bV5ProfileData !== undefined) view.setUint32(88, Number(data.bV5ProfileData), true);
  // 0x5c: u32
  if (data?.bV5ProfileSize !== undefined) view.setUint32(92, Number(data.bV5ProfileSize), true);
  // 0x60: u32
  if (data?.bV5Reserved !== undefined) view.setUint32(96, Number(data.bV5Reserved), true);
  // 0x64: pad4
  return buf;
}

export class BITMAPV5HEADERView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get bV5Size(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: i32
  get bV5Width(): number {
    return this.view.getInt32(4, true);
  }

  // 0x08: i32
  get bV5Height(): number {
    return this.view.getInt32(8, true);
  }

  // 0x0c: u16
  get bV5Planes(): number {
    return this.view.getUint16(12, true);
  }

  // 0x0e: u16
  get bV5BitCount(): number {
    return this.view.getUint16(14, true);
  }

  // 0x10: i32
  get bV5Compression(): number {
    return this.view.getInt32(16, true);
  }

  // 0x14: u32
  get bV5SizeImage(): number {
    return this.view.getUint32(20, true);
  }

  // 0x18: i32
  get bV5XPelsPerMeter(): number {
    return this.view.getInt32(24, true);
  }

  // 0x1c: i32
  get bV5YPelsPerMeter(): number {
    return this.view.getInt32(28, true);
  }

  // 0x20: u32
  get bV5ClrUsed(): number {
    return this.view.getUint32(32, true);
  }

  // 0x24: u32
  get bV5ClrImportant(): number {
    return this.view.getUint32(36, true);
  }

  // 0x28: u32
  get bV5RedMask(): number {
    return this.view.getUint32(40, true);
  }

  // 0x2c: u32
  get bV5GreenMask(): number {
    return this.view.getUint32(44, true);
  }

  // 0x30: u32
  get bV5BlueMask(): number {
    return this.view.getUint32(48, true);
  }

  // 0x34: u32
  get bV5AlphaMask(): number {
    return this.view.getUint32(52, true);
  }

  // 0x38: u32
  get bV5CSType(): number {
    return this.view.getUint32(56, true);
  }

  // 0x3c: pad4

  // 0x40: pointer
  get bV5Endpoints(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(64, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x48: u32
  get bV5GammaRed(): number {
    return this.view.getUint32(72, true);
  }

  // 0x4c: u32
  get bV5GammaGreen(): number {
    return this.view.getUint32(76, true);
  }

  // 0x50: u32
  get bV5GammaBlue(): number {
    return this.view.getUint32(80, true);
  }

  // 0x54: u32
  get bV5Intent(): number {
    return this.view.getUint32(84, true);
  }

  // 0x58: u32
  get bV5ProfileData(): number {
    return this.view.getUint32(88, true);
  }

  // 0x5c: u32
  get bV5ProfileSize(): number {
    return this.view.getUint32(92, true);
  }

  // 0x60: u32
  get bV5Reserved(): number {
    return this.view.getUint32(96, true);
  }

  // 0x64: pad4

  // 0x00: u32
  set bV5Size(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: i32
  set bV5Width(value: number) {
    this.view.setInt32(4, value, true);
  }

  // 0x08: i32
  set bV5Height(value: number) {
    this.view.setInt32(8, value, true);
  }

  // 0x0c: u16
  set bV5Planes(value: number) {
    this.view.setUint16(12, value, true);
  }

  // 0x0e: u16
  set bV5BitCount(value: number) {
    this.view.setUint16(14, value, true);
  }

  // 0x10: i32
  set bV5Compression(value: number) {
    this.view.setInt32(16, value, true);
  }

  // 0x14: u32
  set bV5SizeImage(value: number) {
    this.view.setUint32(20, value, true);
  }

  // 0x18: i32
  set bV5XPelsPerMeter(value: number) {
    this.view.setInt32(24, value, true);
  }

  // 0x1c: i32
  set bV5YPelsPerMeter(value: number) {
    this.view.setInt32(28, value, true);
  }

  // 0x20: u32
  set bV5ClrUsed(value: number) {
    this.view.setUint32(32, value, true);
  }

  // 0x24: u32
  set bV5ClrImportant(value: number) {
    this.view.setUint32(36, value, true);
  }

  // 0x28: u32
  set bV5RedMask(value: number) {
    this.view.setUint32(40, value, true);
  }

  // 0x2c: u32
  set bV5GreenMask(value: number) {
    this.view.setUint32(44, value, true);
  }

  // 0x30: u32
  set bV5BlueMask(value: number) {
    this.view.setUint32(48, value, true);
  }

  // 0x34: u32
  set bV5AlphaMask(value: number) {
    this.view.setUint32(52, value, true);
  }

  // 0x38: u32
  set bV5CSType(value: number) {
    this.view.setUint32(56, value, true);
  }

  // 0x3c: pad4

  // 0x40: pointer
  set bV5Endpoints(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(64, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x48: u32
  set bV5GammaRed(value: number) {
    this.view.setUint32(72, value, true);
  }

  // 0x4c: u32
  set bV5GammaGreen(value: number) {
    this.view.setUint32(76, value, true);
  }

  // 0x50: u32
  set bV5GammaBlue(value: number) {
    this.view.setUint32(80, value, true);
  }

  // 0x54: u32
  set bV5Intent(value: number) {
    this.view.setUint32(84, value, true);
  }

  // 0x58: u32
  set bV5ProfileData(value: number) {
    this.view.setUint32(88, value, true);
  }

  // 0x5c: u32
  set bV5ProfileSize(value: number) {
    this.view.setUint32(92, value, true);
  }

  // 0x60: u32
  set bV5Reserved(value: number) {
    this.view.setUint32(96, value, true);
  }

  // 0x64: pad4
}

/**
 * Windows.Win32.Graphics.Gdi.BITMAPINFO (size: 16)
 */
export interface BITMAPINFO {
  /** Windows.Win32.Graphics.Gdi.BITMAPINFOHEADER */
  bmiHeader: Uint8Array | Deno.PointerValue;
  /** array */
  bmiColors: Deno.PointerValue;
}

export const sizeofBITMAPINFO = 16;

export function allocBITMAPINFO(data?: Partial<BITMAPINFO>): Uint8Array {
  const buf = new Uint8Array(sizeofBITMAPINFO);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.bmiHeader !== undefined) view.setBigUint64(0, data.bmiHeader === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.bmiHeader))), true);
  // 0x08: pointer
  if (data?.bmiColors !== undefined) view.setBigUint64(8, data.bmiColors === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.bmiColors))), true);
  return buf;
}

export class BITMAPINFOView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get bmiHeader(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(0, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x08: pointer
  get bmiColors(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: pointer
  set bmiHeader(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(0, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x08: pointer
  set bmiColors(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.Graphics.Gdi.BITMAPCOREINFO (size: 16)
 */
export interface BITMAPCOREINFO {
  /** Windows.Win32.Graphics.Gdi.BITMAPCOREHEADER */
  bmciHeader: Uint8Array | Deno.PointerValue;
  /** array */
  bmciColors: Deno.PointerValue;
}

export const sizeofBITMAPCOREINFO = 16;

export function allocBITMAPCOREINFO(data?: Partial<BITMAPCOREINFO>): Uint8Array {
  const buf = new Uint8Array(sizeofBITMAPCOREINFO);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.bmciHeader !== undefined) view.setBigUint64(0, data.bmciHeader === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.bmciHeader))), true);
  // 0x08: pointer
  if (data?.bmciColors !== undefined) view.setBigUint64(8, data.bmciColors === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.bmciColors))), true);
  return buf;
}

export class BITMAPCOREINFOView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get bmciHeader(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(0, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x08: pointer
  get bmciColors(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: pointer
  set bmciHeader(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(0, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x08: pointer
  set bmciColors(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.Graphics.Gdi.BITMAPFILEHEADER (size: 16)
 */
export interface BITMAPFILEHEADER {
  /** u16 */
  bfType: number;
  /** u32 */
  bfSize: number;
  /** u16 */
  bfReserved1: number;
  /** u16 */
  bfReserved2: number;
  /** u32 */
  bfOffBits: number;
}

export const sizeofBITMAPFILEHEADER = 16;

export function allocBITMAPFILEHEADER(data?: Partial<BITMAPFILEHEADER>): Uint8Array {
  const buf = new Uint8Array(sizeofBITMAPFILEHEADER);
  const view = new DataView(buf.buffer);
  // 0x00: u16
  if (data?.bfType !== undefined) view.setUint16(0, Number(data.bfType), true);
  // 0x02: u32
  if (data?.bfSize !== undefined) view.setUint32(2, Number(data.bfSize), true);
  // 0x06: u16
  if (data?.bfReserved1 !== undefined) view.setUint16(6, Number(data.bfReserved1), true);
  // 0x08: u16
  if (data?.bfReserved2 !== undefined) view.setUint16(8, Number(data.bfReserved2), true);
  // 0x0a: u32
  if (data?.bfOffBits !== undefined) view.setUint32(10, Number(data.bfOffBits), true);
  // 0x0e: pad2
  return buf;
}

export class BITMAPFILEHEADERView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u16
  get bfType(): number {
    return this.view.getUint16(0, true);
  }

  // 0x02: u32
  get bfSize(): number {
    return this.view.getUint32(2, true);
  }

  // 0x06: u16
  get bfReserved1(): number {
    return this.view.getUint16(6, true);
  }

  // 0x08: u16
  get bfReserved2(): number {
    return this.view.getUint16(8, true);
  }

  // 0x0a: u32
  get bfOffBits(): number {
    return this.view.getUint32(10, true);
  }

  // 0x0e: pad2

  // 0x00: u16
  set bfType(value: number) {
    this.view.setUint16(0, value, true);
  }

  // 0x02: u32
  set bfSize(value: number) {
    this.view.setUint32(2, value, true);
  }

  // 0x06: u16
  set bfReserved1(value: number) {
    this.view.setUint16(6, value, true);
  }

  // 0x08: u16
  set bfReserved2(value: number) {
    this.view.setUint16(8, value, true);
  }

  // 0x0a: u32
  set bfOffBits(value: number) {
    this.view.setUint32(10, value, true);
  }

  // 0x0e: pad2
}

/**
 * Windows.Win32.Graphics.Gdi.HANDLETABLE (size: 8)
 */
export interface HANDLETABLE {
  /** array */
  objectHandle: Deno.PointerValue;
}

export const sizeofHANDLETABLE = 8;

export function allocHANDLETABLE(data?: Partial<HANDLETABLE>): Uint8Array {
  const buf = new Uint8Array(sizeofHANDLETABLE);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.objectHandle !== undefined) view.setBigUint64(0, data.objectHandle === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.objectHandle))), true);
  return buf;
}

export class HANDLETABLEView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get objectHandle(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(0, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: pointer
  set objectHandle(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(0, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.Graphics.Gdi.METARECORD (size: 16)
 */
export interface METARECORD {
  /** u32 */
  rdSize: number;
  /** u16 */
  rdFunction: number;
  /** array */
  rdParm: Deno.PointerValue;
}

export const sizeofMETARECORD = 16;

export function allocMETARECORD(data?: Partial<METARECORD>): Uint8Array {
  const buf = new Uint8Array(sizeofMETARECORD);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.rdSize !== undefined) view.setUint32(0, Number(data.rdSize), true);
  // 0x04: u16
  if (data?.rdFunction !== undefined) view.setUint16(4, Number(data.rdFunction), true);
  // 0x06: pad2
  // 0x08: pointer
  if (data?.rdParm !== undefined) view.setBigUint64(8, data.rdParm === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.rdParm))), true);
  return buf;
}

export class METARECORDView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get rdSize(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: u16
  get rdFunction(): number {
    return this.view.getUint16(4, true);
  }

  // 0x06: pad2

  // 0x08: pointer
  get rdParm(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: u32
  set rdSize(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: u16
  set rdFunction(value: number) {
    this.view.setUint16(4, value, true);
  }

  // 0x06: pad2

  // 0x08: pointer
  set rdParm(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.Graphics.Gdi.METAHEADER (size: 24)
 */
export interface METAHEADER {
  /** u16 */
  mtType: number;
  /** u16 */
  mtHeaderSize: number;
  /** u16 */
  mtVersion: number;
  /** u32 */
  mtSize: number;
  /** u16 */
  mtNoObjects: number;
  /** u32 */
  mtMaxRecord: number;
  /** u16 */
  mtNoParameters: number;
}

export const sizeofMETAHEADER = 24;

export function allocMETAHEADER(data?: Partial<METAHEADER>): Uint8Array {
  const buf = new Uint8Array(sizeofMETAHEADER);
  const view = new DataView(buf.buffer);
  // 0x00: u16
  if (data?.mtType !== undefined) view.setUint16(0, Number(data.mtType), true);
  // 0x02: u16
  if (data?.mtHeaderSize !== undefined) view.setUint16(2, Number(data.mtHeaderSize), true);
  // 0x04: u16
  if (data?.mtVersion !== undefined) view.setUint16(4, Number(data.mtVersion), true);
  // 0x06: u32
  if (data?.mtSize !== undefined) view.setUint32(6, Number(data.mtSize), true);
  // 0x0a: u16
  if (data?.mtNoObjects !== undefined) view.setUint16(10, Number(data.mtNoObjects), true);
  // 0x0c: u32
  if (data?.mtMaxRecord !== undefined) view.setUint32(12, Number(data.mtMaxRecord), true);
  // 0x10: u16
  if (data?.mtNoParameters !== undefined) view.setUint16(16, Number(data.mtNoParameters), true);
  // 0x12: pad6
  return buf;
}

export class METAHEADERView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u16
  get mtType(): number {
    return this.view.getUint16(0, true);
  }

  // 0x02: u16
  get mtHeaderSize(): number {
    return this.view.getUint16(2, true);
  }

  // 0x04: u16
  get mtVersion(): number {
    return this.view.getUint16(4, true);
  }

  // 0x06: u32
  get mtSize(): number {
    return this.view.getUint32(6, true);
  }

  // 0x0a: u16
  get mtNoObjects(): number {
    return this.view.getUint16(10, true);
  }

  // 0x0c: u32
  get mtMaxRecord(): number {
    return this.view.getUint32(12, true);
  }

  // 0x10: u16
  get mtNoParameters(): number {
    return this.view.getUint16(16, true);
  }

  // 0x12: pad6

  // 0x00: u16
  set mtType(value: number) {
    this.view.setUint16(0, value, true);
  }

  // 0x02: u16
  set mtHeaderSize(value: number) {
    this.view.setUint16(2, value, true);
  }

  // 0x04: u16
  set mtVersion(value: number) {
    this.view.setUint16(4, value, true);
  }

  // 0x06: u32
  set mtSize(value: number) {
    this.view.setUint32(6, value, true);
  }

  // 0x0a: u16
  set mtNoObjects(value: number) {
    this.view.setUint16(10, value, true);
  }

  // 0x0c: u32
  set mtMaxRecord(value: number) {
    this.view.setUint32(12, value, true);
  }

  // 0x10: u16
  set mtNoParameters(value: number) {
    this.view.setUint16(16, value, true);
  }

  // 0x12: pad6
}

/**
 * Windows.Win32.Graphics.Gdi.ENHMETARECORD (size: 16)
 */
export interface ENHMETARECORD {
  /** Windows.Win32.Graphics.Gdi.ENHANCED_METAFILE_RECORD_TYPE */
  iType: ENHANCED_METAFILE_RECORD_TYPE;
  /** u32 */
  nSize: number;
  /** array */
  dParm: Deno.PointerValue;
}

export const sizeofENHMETARECORD = 16;

export function allocENHMETARECORD(data?: Partial<ENHMETARECORD>): Uint8Array {
  const buf = new Uint8Array(sizeofENHMETARECORD);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.iType !== undefined) view.setUint32(0, Number(data.iType), true);
  // 0x04: u32
  if (data?.nSize !== undefined) view.setUint32(4, Number(data.nSize), true);
  // 0x08: pointer
  if (data?.dParm !== undefined) view.setBigUint64(8, data.dParm === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.dParm))), true);
  return buf;
}

export class ENHMETARECORDView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get iType(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: u32
  get nSize(): number {
    return this.view.getUint32(4, true);
  }

  // 0x08: pointer
  get dParm(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: u32
  set iType(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: u32
  set nSize(value: number) {
    this.view.setUint32(4, value, true);
  }

  // 0x08: pointer
  set dParm(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.Foundation.RECTL (size: 16)
 */
export interface RECTL {
  /** i32 */
  left: number;
  /** i32 */
  top: number;
  /** i32 */
  right: number;
  /** i32 */
  bottom: number;
}

export const sizeofRECTL = 16;

export function allocRECTL(data?: Partial<RECTL>): Uint8Array {
  const buf = new Uint8Array(sizeofRECTL);
  const view = new DataView(buf.buffer);
  // 0x00: i32
  if (data?.left !== undefined) view.setInt32(0, Number(data.left), true);
  // 0x04: i32
  if (data?.top !== undefined) view.setInt32(4, Number(data.top), true);
  // 0x08: i32
  if (data?.right !== undefined) view.setInt32(8, Number(data.right), true);
  // 0x0c: i32
  if (data?.bottom !== undefined) view.setInt32(12, Number(data.bottom), true);
  return buf;
}

export class RECTLView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: i32
  get left(): number {
    return this.view.getInt32(0, true);
  }

  // 0x04: i32
  get top(): number {
    return this.view.getInt32(4, true);
  }

  // 0x08: i32
  get right(): number {
    return this.view.getInt32(8, true);
  }

  // 0x0c: i32
  get bottom(): number {
    return this.view.getInt32(12, true);
  }

  // 0x00: i32
  set left(value: number) {
    this.view.setInt32(0, value, true);
  }

  // 0x04: i32
  set top(value: number) {
    this.view.setInt32(4, value, true);
  }

  // 0x08: i32
  set right(value: number) {
    this.view.setInt32(8, value, true);
  }

  // 0x0c: i32
  set bottom(value: number) {
    this.view.setInt32(12, value, true);
  }
}

/**
 * Windows.Win32.Foundation.SIZE (size: 8)
 */
export interface SIZE {
  /** i32 */
  cx: number;
  /** i32 */
  cy: number;
}

export const sizeofSIZE = 8;

export function allocSIZE(data?: Partial<SIZE>): Uint8Array {
  const buf = new Uint8Array(sizeofSIZE);
  const view = new DataView(buf.buffer);
  // 0x00: i32
  if (data?.cx !== undefined) view.setInt32(0, Number(data.cx), true);
  // 0x04: i32
  if (data?.cy !== undefined) view.setInt32(4, Number(data.cy), true);
  return buf;
}

export class SIZEView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: i32
  get cx(): number {
    return this.view.getInt32(0, true);
  }

  // 0x04: i32
  get cy(): number {
    return this.view.getInt32(4, true);
  }

  // 0x00: i32
  set cx(value: number) {
    this.view.setInt32(0, value, true);
  }

  // 0x04: i32
  set cy(value: number) {
    this.view.setInt32(4, value, true);
  }
}

/**
 * Windows.Win32.Graphics.Gdi.ENHMETAHEADER (size: 96)
 */
export interface ENHMETAHEADER {
  /** u32 */
  iType: number;
  /** u32 */
  nSize: number;
  /** Windows.Win32.Foundation.RECTL */
  rclBounds: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.Foundation.RECTL */
  rclFrame: Uint8Array | Deno.PointerValue;
  /** u32 */
  dSignature: number;
  /** u32 */
  nVersion: number;
  /** u32 */
  nBytes: number;
  /** u32 */
  nRecords: number;
  /** u16 */
  nHandles: number;
  /** u16 */
  sReserved: number;
  /** u32 */
  nDescription: number;
  /** u32 */
  offDescription: number;
  /** u32 */
  nPalEntries: number;
  /** Windows.Win32.Foundation.SIZE */
  szlDevice: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.Foundation.SIZE */
  szlMillimeters: Uint8Array | Deno.PointerValue;
  /** u32 */
  cbPixelFormat: number;
  /** u32 */
  offPixelFormat: number;
  /** u32 */
  bOpenGL: number;
  /** Windows.Win32.Foundation.SIZE */
  szlMicrometers: Uint8Array | Deno.PointerValue;
}

export const sizeofENHMETAHEADER = 96;

export function allocENHMETAHEADER(data?: Partial<ENHMETAHEADER>): Uint8Array {
  const buf = new Uint8Array(sizeofENHMETAHEADER);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.iType !== undefined) view.setUint32(0, Number(data.iType), true);
  // 0x04: u32
  if (data?.nSize !== undefined) view.setUint32(4, Number(data.nSize), true);
  // 0x08: pointer
  if (data?.rclBounds !== undefined) view.setBigUint64(8, data.rclBounds === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.rclBounds))), true);
  // 0x10: pointer
  if (data?.rclFrame !== undefined) view.setBigUint64(16, data.rclFrame === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.rclFrame))), true);
  // 0x18: u32
  if (data?.dSignature !== undefined) view.setUint32(24, Number(data.dSignature), true);
  // 0x1c: u32
  if (data?.nVersion !== undefined) view.setUint32(28, Number(data.nVersion), true);
  // 0x20: u32
  if (data?.nBytes !== undefined) view.setUint32(32, Number(data.nBytes), true);
  // 0x24: u32
  if (data?.nRecords !== undefined) view.setUint32(36, Number(data.nRecords), true);
  // 0x28: u16
  if (data?.nHandles !== undefined) view.setUint16(40, Number(data.nHandles), true);
  // 0x2a: u16
  if (data?.sReserved !== undefined) view.setUint16(42, Number(data.sReserved), true);
  // 0x2c: u32
  if (data?.nDescription !== undefined) view.setUint32(44, Number(data.nDescription), true);
  // 0x30: u32
  if (data?.offDescription !== undefined) view.setUint32(48, Number(data.offDescription), true);
  // 0x34: u32
  if (data?.nPalEntries !== undefined) view.setUint32(52, Number(data.nPalEntries), true);
  // 0x38: pointer
  if (data?.szlDevice !== undefined) view.setBigUint64(56, data.szlDevice === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.szlDevice))), true);
  // 0x40: pointer
  if (data?.szlMillimeters !== undefined) view.setBigUint64(64, data.szlMillimeters === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.szlMillimeters))), true);
  // 0x48: u32
  if (data?.cbPixelFormat !== undefined) view.setUint32(72, Number(data.cbPixelFormat), true);
  // 0x4c: u32
  if (data?.offPixelFormat !== undefined) view.setUint32(76, Number(data.offPixelFormat), true);
  // 0x50: u32
  if (data?.bOpenGL !== undefined) view.setUint32(80, Number(data.bOpenGL), true);
  // 0x54: pad4
  // 0x58: pointer
  if (data?.szlMicrometers !== undefined) view.setBigUint64(88, data.szlMicrometers === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.szlMicrometers))), true);
  return buf;
}

export class ENHMETAHEADERView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get iType(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: u32
  get nSize(): number {
    return this.view.getUint32(4, true);
  }

  // 0x08: pointer
  get rclBounds(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x10: pointer
  get rclFrame(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(16, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x18: u32
  get dSignature(): number {
    return this.view.getUint32(24, true);
  }

  // 0x1c: u32
  get nVersion(): number {
    return this.view.getUint32(28, true);
  }

  // 0x20: u32
  get nBytes(): number {
    return this.view.getUint32(32, true);
  }

  // 0x24: u32
  get nRecords(): number {
    return this.view.getUint32(36, true);
  }

  // 0x28: u16
  get nHandles(): number {
    return this.view.getUint16(40, true);
  }

  // 0x2a: u16
  get sReserved(): number {
    return this.view.getUint16(42, true);
  }

  // 0x2c: u32
  get nDescription(): number {
    return this.view.getUint32(44, true);
  }

  // 0x30: u32
  get offDescription(): number {
    return this.view.getUint32(48, true);
  }

  // 0x34: u32
  get nPalEntries(): number {
    return this.view.getUint32(52, true);
  }

  // 0x38: pointer
  get szlDevice(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(56, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x40: pointer
  get szlMillimeters(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(64, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x48: u32
  get cbPixelFormat(): number {
    return this.view.getUint32(72, true);
  }

  // 0x4c: u32
  get offPixelFormat(): number {
    return this.view.getUint32(76, true);
  }

  // 0x50: u32
  get bOpenGL(): number {
    return this.view.getUint32(80, true);
  }

  // 0x54: pad4

  // 0x58: pointer
  get szlMicrometers(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(88, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: u32
  set iType(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: u32
  set nSize(value: number) {
    this.view.setUint32(4, value, true);
  }

  // 0x08: pointer
  set rclBounds(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x10: pointer
  set rclFrame(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(16, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x18: u32
  set dSignature(value: number) {
    this.view.setUint32(24, value, true);
  }

  // 0x1c: u32
  set nVersion(value: number) {
    this.view.setUint32(28, value, true);
  }

  // 0x20: u32
  set nBytes(value: number) {
    this.view.setUint32(32, value, true);
  }

  // 0x24: u32
  set nRecords(value: number) {
    this.view.setUint32(36, value, true);
  }

  // 0x28: u16
  set nHandles(value: number) {
    this.view.setUint16(40, value, true);
  }

  // 0x2a: u16
  set sReserved(value: number) {
    this.view.setUint16(42, value, true);
  }

  // 0x2c: u32
  set nDescription(value: number) {
    this.view.setUint32(44, value, true);
  }

  // 0x30: u32
  set offDescription(value: number) {
    this.view.setUint32(48, value, true);
  }

  // 0x34: u32
  set nPalEntries(value: number) {
    this.view.setUint32(52, value, true);
  }

  // 0x38: pointer
  set szlDevice(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(56, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x40: pointer
  set szlMillimeters(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(64, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x48: u32
  set cbPixelFormat(value: number) {
    this.view.setUint32(72, value, true);
  }

  // 0x4c: u32
  set offPixelFormat(value: number) {
    this.view.setUint32(76, value, true);
  }

  // 0x50: u32
  set bOpenGL(value: number) {
    this.view.setUint32(80, value, true);
  }

  // 0x54: pad4

  // 0x58: pointer
  set szlMicrometers(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(88, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.Graphics.Gdi.TEXTMETRICA (size: 56)
 */
export interface TEXTMETRICA {
  /** i32 */
  tmHeight: number;
  /** i32 */
  tmAscent: number;
  /** i32 */
  tmDescent: number;
  /** i32 */
  tmInternalLeading: number;
  /** i32 */
  tmExternalLeading: number;
  /** i32 */
  tmAveCharWidth: number;
  /** i32 */
  tmMaxCharWidth: number;
  /** i32 */
  tmWeight: number;
  /** i32 */
  tmOverhang: number;
  /** i32 */
  tmDigitizedAspectX: number;
  /** i32 */
  tmDigitizedAspectY: number;
  /** u8 */
  tmFirstChar: number;
  /** u8 */
  tmLastChar: number;
  /** u8 */
  tmDefaultChar: number;
  /** u8 */
  tmBreakChar: number;
  /** u8 */
  tmItalic: number;
  /** u8 */
  tmUnderlined: number;
  /** u8 */
  tmStruckOut: number;
  /** Windows.Win32.Graphics.Gdi.TMPF_FLAGS */
  tmPitchAndFamily: TMPF_FLAGS;
  /** u8 */
  tmCharSet: number;
}

export const sizeofTEXTMETRICA = 56;

export function allocTEXTMETRICA(data?: Partial<TEXTMETRICA>): Uint8Array {
  const buf = new Uint8Array(sizeofTEXTMETRICA);
  const view = new DataView(buf.buffer);
  // 0x00: i32
  if (data?.tmHeight !== undefined) view.setInt32(0, Number(data.tmHeight), true);
  // 0x04: i32
  if (data?.tmAscent !== undefined) view.setInt32(4, Number(data.tmAscent), true);
  // 0x08: i32
  if (data?.tmDescent !== undefined) view.setInt32(8, Number(data.tmDescent), true);
  // 0x0c: i32
  if (data?.tmInternalLeading !== undefined) view.setInt32(12, Number(data.tmInternalLeading), true);
  // 0x10: i32
  if (data?.tmExternalLeading !== undefined) view.setInt32(16, Number(data.tmExternalLeading), true);
  // 0x14: i32
  if (data?.tmAveCharWidth !== undefined) view.setInt32(20, Number(data.tmAveCharWidth), true);
  // 0x18: i32
  if (data?.tmMaxCharWidth !== undefined) view.setInt32(24, Number(data.tmMaxCharWidth), true);
  // 0x1c: i32
  if (data?.tmWeight !== undefined) view.setInt32(28, Number(data.tmWeight), true);
  // 0x20: i32
  if (data?.tmOverhang !== undefined) view.setInt32(32, Number(data.tmOverhang), true);
  // 0x24: i32
  if (data?.tmDigitizedAspectX !== undefined) view.setInt32(36, Number(data.tmDigitizedAspectX), true);
  // 0x28: i32
  if (data?.tmDigitizedAspectY !== undefined) view.setInt32(40, Number(data.tmDigitizedAspectY), true);
  // 0x2c: u8
  if (data?.tmFirstChar !== undefined) view.setUint8(44, Number(data.tmFirstChar));
  // 0x2d: u8
  if (data?.tmLastChar !== undefined) view.setUint8(45, Number(data.tmLastChar));
  // 0x2e: u8
  if (data?.tmDefaultChar !== undefined) view.setUint8(46, Number(data.tmDefaultChar));
  // 0x2f: u8
  if (data?.tmBreakChar !== undefined) view.setUint8(47, Number(data.tmBreakChar));
  // 0x30: u8
  if (data?.tmItalic !== undefined) view.setUint8(48, Number(data.tmItalic));
  // 0x31: u8
  if (data?.tmUnderlined !== undefined) view.setUint8(49, Number(data.tmUnderlined));
  // 0x32: u8
  if (data?.tmStruckOut !== undefined) view.setUint8(50, Number(data.tmStruckOut));
  // 0x33: u8
  if (data?.tmPitchAndFamily !== undefined) view.setUint8(51, Number(data.tmPitchAndFamily));
  // 0x34: u8
  if (data?.tmCharSet !== undefined) view.setUint8(52, Number(data.tmCharSet));
  // 0x35: pad3
  return buf;
}

export class TEXTMETRICAView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: i32
  get tmHeight(): number {
    return this.view.getInt32(0, true);
  }

  // 0x04: i32
  get tmAscent(): number {
    return this.view.getInt32(4, true);
  }

  // 0x08: i32
  get tmDescent(): number {
    return this.view.getInt32(8, true);
  }

  // 0x0c: i32
  get tmInternalLeading(): number {
    return this.view.getInt32(12, true);
  }

  // 0x10: i32
  get tmExternalLeading(): number {
    return this.view.getInt32(16, true);
  }

  // 0x14: i32
  get tmAveCharWidth(): number {
    return this.view.getInt32(20, true);
  }

  // 0x18: i32
  get tmMaxCharWidth(): number {
    return this.view.getInt32(24, true);
  }

  // 0x1c: i32
  get tmWeight(): number {
    return this.view.getInt32(28, true);
  }

  // 0x20: i32
  get tmOverhang(): number {
    return this.view.getInt32(32, true);
  }

  // 0x24: i32
  get tmDigitizedAspectX(): number {
    return this.view.getInt32(36, true);
  }

  // 0x28: i32
  get tmDigitizedAspectY(): number {
    return this.view.getInt32(40, true);
  }

  // 0x2c: u8
  get tmFirstChar(): number {
    return this.view.getUint8(44);
  }

  // 0x2d: u8
  get tmLastChar(): number {
    return this.view.getUint8(45);
  }

  // 0x2e: u8
  get tmDefaultChar(): number {
    return this.view.getUint8(46);
  }

  // 0x2f: u8
  get tmBreakChar(): number {
    return this.view.getUint8(47);
  }

  // 0x30: u8
  get tmItalic(): number {
    return this.view.getUint8(48);
  }

  // 0x31: u8
  get tmUnderlined(): number {
    return this.view.getUint8(49);
  }

  // 0x32: u8
  get tmStruckOut(): number {
    return this.view.getUint8(50);
  }

  // 0x33: u8
  get tmPitchAndFamily(): number {
    return this.view.getUint8(51);
  }

  // 0x34: u8
  get tmCharSet(): number {
    return this.view.getUint8(52);
  }

  // 0x35: pad3

  // 0x00: i32
  set tmHeight(value: number) {
    this.view.setInt32(0, value, true);
  }

  // 0x04: i32
  set tmAscent(value: number) {
    this.view.setInt32(4, value, true);
  }

  // 0x08: i32
  set tmDescent(value: number) {
    this.view.setInt32(8, value, true);
  }

  // 0x0c: i32
  set tmInternalLeading(value: number) {
    this.view.setInt32(12, value, true);
  }

  // 0x10: i32
  set tmExternalLeading(value: number) {
    this.view.setInt32(16, value, true);
  }

  // 0x14: i32
  set tmAveCharWidth(value: number) {
    this.view.setInt32(20, value, true);
  }

  // 0x18: i32
  set tmMaxCharWidth(value: number) {
    this.view.setInt32(24, value, true);
  }

  // 0x1c: i32
  set tmWeight(value: number) {
    this.view.setInt32(28, value, true);
  }

  // 0x20: i32
  set tmOverhang(value: number) {
    this.view.setInt32(32, value, true);
  }

  // 0x24: i32
  set tmDigitizedAspectX(value: number) {
    this.view.setInt32(36, value, true);
  }

  // 0x28: i32
  set tmDigitizedAspectY(value: number) {
    this.view.setInt32(40, value, true);
  }

  // 0x2c: u8
  set tmFirstChar(value: number) {
    this.view.setUint8(44, value);
  }

  // 0x2d: u8
  set tmLastChar(value: number) {
    this.view.setUint8(45, value);
  }

  // 0x2e: u8
  set tmDefaultChar(value: number) {
    this.view.setUint8(46, value);
  }

  // 0x2f: u8
  set tmBreakChar(value: number) {
    this.view.setUint8(47, value);
  }

  // 0x30: u8
  set tmItalic(value: number) {
    this.view.setUint8(48, value);
  }

  // 0x31: u8
  set tmUnderlined(value: number) {
    this.view.setUint8(49, value);
  }

  // 0x32: u8
  set tmStruckOut(value: number) {
    this.view.setUint8(50, value);
  }

  // 0x33: u8
  set tmPitchAndFamily(value: number) {
    this.view.setUint8(51, value);
  }

  // 0x34: u8
  set tmCharSet(value: number) {
    this.view.setUint8(52, value);
  }

  // 0x35: pad3
}

/**
 * Windows.Win32.Graphics.Gdi.TEXTMETRICW (size: 88)
 */
export interface TEXTMETRICW {
  /** i32 */
  tmHeight: number;
  /** i32 */
  tmAscent: number;
  /** i32 */
  tmDescent: number;
  /** i32 */
  tmInternalLeading: number;
  /** i32 */
  tmExternalLeading: number;
  /** i32 */
  tmAveCharWidth: number;
  /** i32 */
  tmMaxCharWidth: number;
  /** i32 */
  tmWeight: number;
  /** i32 */
  tmOverhang: number;
  /** i32 */
  tmDigitizedAspectX: number;
  /** i32 */
  tmDigitizedAspectY: number;
  /** char */
  tmFirstChar: Uint8Array | Deno.PointerValue;
  /** char */
  tmLastChar: Uint8Array | Deno.PointerValue;
  /** char */
  tmDefaultChar: Uint8Array | Deno.PointerValue;
  /** char */
  tmBreakChar: Uint8Array | Deno.PointerValue;
  /** u8 */
  tmItalic: number;
  /** u8 */
  tmUnderlined: number;
  /** u8 */
  tmStruckOut: number;
  /** Windows.Win32.Graphics.Gdi.TMPF_FLAGS */
  tmPitchAndFamily: TMPF_FLAGS;
  /** u8 */
  tmCharSet: number;
}

export const sizeofTEXTMETRICW = 88;

export function allocTEXTMETRICW(data?: Partial<TEXTMETRICW>): Uint8Array {
  const buf = new Uint8Array(sizeofTEXTMETRICW);
  const view = new DataView(buf.buffer);
  // 0x00: i32
  if (data?.tmHeight !== undefined) view.setInt32(0, Number(data.tmHeight), true);
  // 0x04: i32
  if (data?.tmAscent !== undefined) view.setInt32(4, Number(data.tmAscent), true);
  // 0x08: i32
  if (data?.tmDescent !== undefined) view.setInt32(8, Number(data.tmDescent), true);
  // 0x0c: i32
  if (data?.tmInternalLeading !== undefined) view.setInt32(12, Number(data.tmInternalLeading), true);
  // 0x10: i32
  if (data?.tmExternalLeading !== undefined) view.setInt32(16, Number(data.tmExternalLeading), true);
  // 0x14: i32
  if (data?.tmAveCharWidth !== undefined) view.setInt32(20, Number(data.tmAveCharWidth), true);
  // 0x18: i32
  if (data?.tmMaxCharWidth !== undefined) view.setInt32(24, Number(data.tmMaxCharWidth), true);
  // 0x1c: i32
  if (data?.tmWeight !== undefined) view.setInt32(28, Number(data.tmWeight), true);
  // 0x20: i32
  if (data?.tmOverhang !== undefined) view.setInt32(32, Number(data.tmOverhang), true);
  // 0x24: i32
  if (data?.tmDigitizedAspectX !== undefined) view.setInt32(36, Number(data.tmDigitizedAspectX), true);
  // 0x28: i32
  if (data?.tmDigitizedAspectY !== undefined) view.setInt32(40, Number(data.tmDigitizedAspectY), true);
  // 0x2c: pad4
  // 0x30: pointer
  if (data?.tmFirstChar !== undefined) view.setBigUint64(48, data.tmFirstChar === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.tmFirstChar))), true);
  // 0x38: pointer
  if (data?.tmLastChar !== undefined) view.setBigUint64(56, data.tmLastChar === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.tmLastChar))), true);
  // 0x40: pointer
  if (data?.tmDefaultChar !== undefined) view.setBigUint64(64, data.tmDefaultChar === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.tmDefaultChar))), true);
  // 0x48: pointer
  if (data?.tmBreakChar !== undefined) view.setBigUint64(72, data.tmBreakChar === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.tmBreakChar))), true);
  // 0x50: u8
  if (data?.tmItalic !== undefined) view.setUint8(80, Number(data.tmItalic));
  // 0x51: u8
  if (data?.tmUnderlined !== undefined) view.setUint8(81, Number(data.tmUnderlined));
  // 0x52: u8
  if (data?.tmStruckOut !== undefined) view.setUint8(82, Number(data.tmStruckOut));
  // 0x53: u8
  if (data?.tmPitchAndFamily !== undefined) view.setUint8(83, Number(data.tmPitchAndFamily));
  // 0x54: u8
  if (data?.tmCharSet !== undefined) view.setUint8(84, Number(data.tmCharSet));
  // 0x55: pad3
  return buf;
}

export class TEXTMETRICWView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: i32
  get tmHeight(): number {
    return this.view.getInt32(0, true);
  }

  // 0x04: i32
  get tmAscent(): number {
    return this.view.getInt32(4, true);
  }

  // 0x08: i32
  get tmDescent(): number {
    return this.view.getInt32(8, true);
  }

  // 0x0c: i32
  get tmInternalLeading(): number {
    return this.view.getInt32(12, true);
  }

  // 0x10: i32
  get tmExternalLeading(): number {
    return this.view.getInt32(16, true);
  }

  // 0x14: i32
  get tmAveCharWidth(): number {
    return this.view.getInt32(20, true);
  }

  // 0x18: i32
  get tmMaxCharWidth(): number {
    return this.view.getInt32(24, true);
  }

  // 0x1c: i32
  get tmWeight(): number {
    return this.view.getInt32(28, true);
  }

  // 0x20: i32
  get tmOverhang(): number {
    return this.view.getInt32(32, true);
  }

  // 0x24: i32
  get tmDigitizedAspectX(): number {
    return this.view.getInt32(36, true);
  }

  // 0x28: i32
  get tmDigitizedAspectY(): number {
    return this.view.getInt32(40, true);
  }

  // 0x2c: pad4

  // 0x30: pointer
  get tmFirstChar(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(48, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x38: pointer
  get tmLastChar(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(56, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x40: pointer
  get tmDefaultChar(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(64, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x48: pointer
  get tmBreakChar(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(72, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x50: u8
  get tmItalic(): number {
    return this.view.getUint8(80);
  }

  // 0x51: u8
  get tmUnderlined(): number {
    return this.view.getUint8(81);
  }

  // 0x52: u8
  get tmStruckOut(): number {
    return this.view.getUint8(82);
  }

  // 0x53: u8
  get tmPitchAndFamily(): number {
    return this.view.getUint8(83);
  }

  // 0x54: u8
  get tmCharSet(): number {
    return this.view.getUint8(84);
  }

  // 0x55: pad3

  // 0x00: i32
  set tmHeight(value: number) {
    this.view.setInt32(0, value, true);
  }

  // 0x04: i32
  set tmAscent(value: number) {
    this.view.setInt32(4, value, true);
  }

  // 0x08: i32
  set tmDescent(value: number) {
    this.view.setInt32(8, value, true);
  }

  // 0x0c: i32
  set tmInternalLeading(value: number) {
    this.view.setInt32(12, value, true);
  }

  // 0x10: i32
  set tmExternalLeading(value: number) {
    this.view.setInt32(16, value, true);
  }

  // 0x14: i32
  set tmAveCharWidth(value: number) {
    this.view.setInt32(20, value, true);
  }

  // 0x18: i32
  set tmMaxCharWidth(value: number) {
    this.view.setInt32(24, value, true);
  }

  // 0x1c: i32
  set tmWeight(value: number) {
    this.view.setInt32(28, value, true);
  }

  // 0x20: i32
  set tmOverhang(value: number) {
    this.view.setInt32(32, value, true);
  }

  // 0x24: i32
  set tmDigitizedAspectX(value: number) {
    this.view.setInt32(36, value, true);
  }

  // 0x28: i32
  set tmDigitizedAspectY(value: number) {
    this.view.setInt32(40, value, true);
  }

  // 0x2c: pad4

  // 0x30: pointer
  set tmFirstChar(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(48, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x38: pointer
  set tmLastChar(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(56, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x40: pointer
  set tmDefaultChar(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(64, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x48: pointer
  set tmBreakChar(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(72, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x50: u8
  set tmItalic(value: number) {
    this.view.setUint8(80, value);
  }

  // 0x51: u8
  set tmUnderlined(value: number) {
    this.view.setUint8(81, value);
  }

  // 0x52: u8
  set tmStruckOut(value: number) {
    this.view.setUint8(82, value);
  }

  // 0x53: u8
  set tmPitchAndFamily(value: number) {
    this.view.setUint8(83, value);
  }

  // 0x54: u8
  set tmCharSet(value: number) {
    this.view.setUint8(84, value);
  }

  // 0x55: pad3
}

/**
 * Windows.Win32.Graphics.Gdi.NEWTEXTMETRICA (size: 72)
 */
export interface NEWTEXTMETRICA {
  /** i32 */
  tmHeight: number;
  /** i32 */
  tmAscent: number;
  /** i32 */
  tmDescent: number;
  /** i32 */
  tmInternalLeading: number;
  /** i32 */
  tmExternalLeading: number;
  /** i32 */
  tmAveCharWidth: number;
  /** i32 */
  tmMaxCharWidth: number;
  /** i32 */
  tmWeight: number;
  /** i32 */
  tmOverhang: number;
  /** i32 */
  tmDigitizedAspectX: number;
  /** i32 */
  tmDigitizedAspectY: number;
  /** u8 */
  tmFirstChar: number;
  /** u8 */
  tmLastChar: number;
  /** u8 */
  tmDefaultChar: number;
  /** u8 */
  tmBreakChar: number;
  /** u8 */
  tmItalic: number;
  /** u8 */
  tmUnderlined: number;
  /** u8 */
  tmStruckOut: number;
  /** Windows.Win32.Graphics.Gdi.TMPF_FLAGS */
  tmPitchAndFamily: TMPF_FLAGS;
  /** u8 */
  tmCharSet: number;
  /** u32 */
  ntmFlags: number;
  /** u32 */
  ntmSizeEM: number;
  /** u32 */
  ntmCellHeight: number;
  /** u32 */
  ntmAvgWidth: number;
}

export const sizeofNEWTEXTMETRICA = 72;

export function allocNEWTEXTMETRICA(data?: Partial<NEWTEXTMETRICA>): Uint8Array {
  const buf = new Uint8Array(sizeofNEWTEXTMETRICA);
  const view = new DataView(buf.buffer);
  // 0x00: i32
  if (data?.tmHeight !== undefined) view.setInt32(0, Number(data.tmHeight), true);
  // 0x04: i32
  if (data?.tmAscent !== undefined) view.setInt32(4, Number(data.tmAscent), true);
  // 0x08: i32
  if (data?.tmDescent !== undefined) view.setInt32(8, Number(data.tmDescent), true);
  // 0x0c: i32
  if (data?.tmInternalLeading !== undefined) view.setInt32(12, Number(data.tmInternalLeading), true);
  // 0x10: i32
  if (data?.tmExternalLeading !== undefined) view.setInt32(16, Number(data.tmExternalLeading), true);
  // 0x14: i32
  if (data?.tmAveCharWidth !== undefined) view.setInt32(20, Number(data.tmAveCharWidth), true);
  // 0x18: i32
  if (data?.tmMaxCharWidth !== undefined) view.setInt32(24, Number(data.tmMaxCharWidth), true);
  // 0x1c: i32
  if (data?.tmWeight !== undefined) view.setInt32(28, Number(data.tmWeight), true);
  // 0x20: i32
  if (data?.tmOverhang !== undefined) view.setInt32(32, Number(data.tmOverhang), true);
  // 0x24: i32
  if (data?.tmDigitizedAspectX !== undefined) view.setInt32(36, Number(data.tmDigitizedAspectX), true);
  // 0x28: i32
  if (data?.tmDigitizedAspectY !== undefined) view.setInt32(40, Number(data.tmDigitizedAspectY), true);
  // 0x2c: u8
  if (data?.tmFirstChar !== undefined) view.setUint8(44, Number(data.tmFirstChar));
  // 0x2d: u8
  if (data?.tmLastChar !== undefined) view.setUint8(45, Number(data.tmLastChar));
  // 0x2e: u8
  if (data?.tmDefaultChar !== undefined) view.setUint8(46, Number(data.tmDefaultChar));
  // 0x2f: u8
  if (data?.tmBreakChar !== undefined) view.setUint8(47, Number(data.tmBreakChar));
  // 0x30: u8
  if (data?.tmItalic !== undefined) view.setUint8(48, Number(data.tmItalic));
  // 0x31: u8
  if (data?.tmUnderlined !== undefined) view.setUint8(49, Number(data.tmUnderlined));
  // 0x32: u8
  if (data?.tmStruckOut !== undefined) view.setUint8(50, Number(data.tmStruckOut));
  // 0x33: u8
  if (data?.tmPitchAndFamily !== undefined) view.setUint8(51, Number(data.tmPitchAndFamily));
  // 0x34: u8
  if (data?.tmCharSet !== undefined) view.setUint8(52, Number(data.tmCharSet));
  // 0x35: u32
  if (data?.ntmFlags !== undefined) view.setUint32(53, Number(data.ntmFlags), true);
  // 0x39: u32
  if (data?.ntmSizeEM !== undefined) view.setUint32(57, Number(data.ntmSizeEM), true);
  // 0x3d: u32
  if (data?.ntmCellHeight !== undefined) view.setUint32(61, Number(data.ntmCellHeight), true);
  // 0x41: u32
  if (data?.ntmAvgWidth !== undefined) view.setUint32(65, Number(data.ntmAvgWidth), true);
  // 0x45: pad3
  return buf;
}

export class NEWTEXTMETRICAView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: i32
  get tmHeight(): number {
    return this.view.getInt32(0, true);
  }

  // 0x04: i32
  get tmAscent(): number {
    return this.view.getInt32(4, true);
  }

  // 0x08: i32
  get tmDescent(): number {
    return this.view.getInt32(8, true);
  }

  // 0x0c: i32
  get tmInternalLeading(): number {
    return this.view.getInt32(12, true);
  }

  // 0x10: i32
  get tmExternalLeading(): number {
    return this.view.getInt32(16, true);
  }

  // 0x14: i32
  get tmAveCharWidth(): number {
    return this.view.getInt32(20, true);
  }

  // 0x18: i32
  get tmMaxCharWidth(): number {
    return this.view.getInt32(24, true);
  }

  // 0x1c: i32
  get tmWeight(): number {
    return this.view.getInt32(28, true);
  }

  // 0x20: i32
  get tmOverhang(): number {
    return this.view.getInt32(32, true);
  }

  // 0x24: i32
  get tmDigitizedAspectX(): number {
    return this.view.getInt32(36, true);
  }

  // 0x28: i32
  get tmDigitizedAspectY(): number {
    return this.view.getInt32(40, true);
  }

  // 0x2c: u8
  get tmFirstChar(): number {
    return this.view.getUint8(44);
  }

  // 0x2d: u8
  get tmLastChar(): number {
    return this.view.getUint8(45);
  }

  // 0x2e: u8
  get tmDefaultChar(): number {
    return this.view.getUint8(46);
  }

  // 0x2f: u8
  get tmBreakChar(): number {
    return this.view.getUint8(47);
  }

  // 0x30: u8
  get tmItalic(): number {
    return this.view.getUint8(48);
  }

  // 0x31: u8
  get tmUnderlined(): number {
    return this.view.getUint8(49);
  }

  // 0x32: u8
  get tmStruckOut(): number {
    return this.view.getUint8(50);
  }

  // 0x33: u8
  get tmPitchAndFamily(): number {
    return this.view.getUint8(51);
  }

  // 0x34: u8
  get tmCharSet(): number {
    return this.view.getUint8(52);
  }

  // 0x35: u32
  get ntmFlags(): number {
    return this.view.getUint32(53, true);
  }

  // 0x39: u32
  get ntmSizeEM(): number {
    return this.view.getUint32(57, true);
  }

  // 0x3d: u32
  get ntmCellHeight(): number {
    return this.view.getUint32(61, true);
  }

  // 0x41: u32
  get ntmAvgWidth(): number {
    return this.view.getUint32(65, true);
  }

  // 0x45: pad3

  // 0x00: i32
  set tmHeight(value: number) {
    this.view.setInt32(0, value, true);
  }

  // 0x04: i32
  set tmAscent(value: number) {
    this.view.setInt32(4, value, true);
  }

  // 0x08: i32
  set tmDescent(value: number) {
    this.view.setInt32(8, value, true);
  }

  // 0x0c: i32
  set tmInternalLeading(value: number) {
    this.view.setInt32(12, value, true);
  }

  // 0x10: i32
  set tmExternalLeading(value: number) {
    this.view.setInt32(16, value, true);
  }

  // 0x14: i32
  set tmAveCharWidth(value: number) {
    this.view.setInt32(20, value, true);
  }

  // 0x18: i32
  set tmMaxCharWidth(value: number) {
    this.view.setInt32(24, value, true);
  }

  // 0x1c: i32
  set tmWeight(value: number) {
    this.view.setInt32(28, value, true);
  }

  // 0x20: i32
  set tmOverhang(value: number) {
    this.view.setInt32(32, value, true);
  }

  // 0x24: i32
  set tmDigitizedAspectX(value: number) {
    this.view.setInt32(36, value, true);
  }

  // 0x28: i32
  set tmDigitizedAspectY(value: number) {
    this.view.setInt32(40, value, true);
  }

  // 0x2c: u8
  set tmFirstChar(value: number) {
    this.view.setUint8(44, value);
  }

  // 0x2d: u8
  set tmLastChar(value: number) {
    this.view.setUint8(45, value);
  }

  // 0x2e: u8
  set tmDefaultChar(value: number) {
    this.view.setUint8(46, value);
  }

  // 0x2f: u8
  set tmBreakChar(value: number) {
    this.view.setUint8(47, value);
  }

  // 0x30: u8
  set tmItalic(value: number) {
    this.view.setUint8(48, value);
  }

  // 0x31: u8
  set tmUnderlined(value: number) {
    this.view.setUint8(49, value);
  }

  // 0x32: u8
  set tmStruckOut(value: number) {
    this.view.setUint8(50, value);
  }

  // 0x33: u8
  set tmPitchAndFamily(value: number) {
    this.view.setUint8(51, value);
  }

  // 0x34: u8
  set tmCharSet(value: number) {
    this.view.setUint8(52, value);
  }

  // 0x35: u32
  set ntmFlags(value: number) {
    this.view.setUint32(53, value, true);
  }

  // 0x39: u32
  set ntmSizeEM(value: number) {
    this.view.setUint32(57, value, true);
  }

  // 0x3d: u32
  set ntmCellHeight(value: number) {
    this.view.setUint32(61, value, true);
  }

  // 0x41: u32
  set ntmAvgWidth(value: number) {
    this.view.setUint32(65, value, true);
  }

  // 0x45: pad3
}

/**
 * Windows.Win32.Graphics.Gdi.NEWTEXTMETRICW (size: 104)
 */
export interface NEWTEXTMETRICW {
  /** i32 */
  tmHeight: number;
  /** i32 */
  tmAscent: number;
  /** i32 */
  tmDescent: number;
  /** i32 */
  tmInternalLeading: number;
  /** i32 */
  tmExternalLeading: number;
  /** i32 */
  tmAveCharWidth: number;
  /** i32 */
  tmMaxCharWidth: number;
  /** i32 */
  tmWeight: number;
  /** i32 */
  tmOverhang: number;
  /** i32 */
  tmDigitizedAspectX: number;
  /** i32 */
  tmDigitizedAspectY: number;
  /** char */
  tmFirstChar: Uint8Array | Deno.PointerValue;
  /** char */
  tmLastChar: Uint8Array | Deno.PointerValue;
  /** char */
  tmDefaultChar: Uint8Array | Deno.PointerValue;
  /** char */
  tmBreakChar: Uint8Array | Deno.PointerValue;
  /** u8 */
  tmItalic: number;
  /** u8 */
  tmUnderlined: number;
  /** u8 */
  tmStruckOut: number;
  /** Windows.Win32.Graphics.Gdi.TMPF_FLAGS */
  tmPitchAndFamily: TMPF_FLAGS;
  /** u8 */
  tmCharSet: number;
  /** u32 */
  ntmFlags: number;
  /** u32 */
  ntmSizeEM: number;
  /** u32 */
  ntmCellHeight: number;
  /** u32 */
  ntmAvgWidth: number;
}

export const sizeofNEWTEXTMETRICW = 104;

export function allocNEWTEXTMETRICW(data?: Partial<NEWTEXTMETRICW>): Uint8Array {
  const buf = new Uint8Array(sizeofNEWTEXTMETRICW);
  const view = new DataView(buf.buffer);
  // 0x00: i32
  if (data?.tmHeight !== undefined) view.setInt32(0, Number(data.tmHeight), true);
  // 0x04: i32
  if (data?.tmAscent !== undefined) view.setInt32(4, Number(data.tmAscent), true);
  // 0x08: i32
  if (data?.tmDescent !== undefined) view.setInt32(8, Number(data.tmDescent), true);
  // 0x0c: i32
  if (data?.tmInternalLeading !== undefined) view.setInt32(12, Number(data.tmInternalLeading), true);
  // 0x10: i32
  if (data?.tmExternalLeading !== undefined) view.setInt32(16, Number(data.tmExternalLeading), true);
  // 0x14: i32
  if (data?.tmAveCharWidth !== undefined) view.setInt32(20, Number(data.tmAveCharWidth), true);
  // 0x18: i32
  if (data?.tmMaxCharWidth !== undefined) view.setInt32(24, Number(data.tmMaxCharWidth), true);
  // 0x1c: i32
  if (data?.tmWeight !== undefined) view.setInt32(28, Number(data.tmWeight), true);
  // 0x20: i32
  if (data?.tmOverhang !== undefined) view.setInt32(32, Number(data.tmOverhang), true);
  // 0x24: i32
  if (data?.tmDigitizedAspectX !== undefined) view.setInt32(36, Number(data.tmDigitizedAspectX), true);
  // 0x28: i32
  if (data?.tmDigitizedAspectY !== undefined) view.setInt32(40, Number(data.tmDigitizedAspectY), true);
  // 0x2c: pad4
  // 0x30: pointer
  if (data?.tmFirstChar !== undefined) view.setBigUint64(48, data.tmFirstChar === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.tmFirstChar))), true);
  // 0x38: pointer
  if (data?.tmLastChar !== undefined) view.setBigUint64(56, data.tmLastChar === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.tmLastChar))), true);
  // 0x40: pointer
  if (data?.tmDefaultChar !== undefined) view.setBigUint64(64, data.tmDefaultChar === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.tmDefaultChar))), true);
  // 0x48: pointer
  if (data?.tmBreakChar !== undefined) view.setBigUint64(72, data.tmBreakChar === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.tmBreakChar))), true);
  // 0x50: u8
  if (data?.tmItalic !== undefined) view.setUint8(80, Number(data.tmItalic));
  // 0x51: u8
  if (data?.tmUnderlined !== undefined) view.setUint8(81, Number(data.tmUnderlined));
  // 0x52: u8
  if (data?.tmStruckOut !== undefined) view.setUint8(82, Number(data.tmStruckOut));
  // 0x53: u8
  if (data?.tmPitchAndFamily !== undefined) view.setUint8(83, Number(data.tmPitchAndFamily));
  // 0x54: u8
  if (data?.tmCharSet !== undefined) view.setUint8(84, Number(data.tmCharSet));
  // 0x55: u32
  if (data?.ntmFlags !== undefined) view.setUint32(85, Number(data.ntmFlags), true);
  // 0x59: u32
  if (data?.ntmSizeEM !== undefined) view.setUint32(89, Number(data.ntmSizeEM), true);
  // 0x5d: u32
  if (data?.ntmCellHeight !== undefined) view.setUint32(93, Number(data.ntmCellHeight), true);
  // 0x61: u32
  if (data?.ntmAvgWidth !== undefined) view.setUint32(97, Number(data.ntmAvgWidth), true);
  // 0x65: pad3
  return buf;
}

export class NEWTEXTMETRICWView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: i32
  get tmHeight(): number {
    return this.view.getInt32(0, true);
  }

  // 0x04: i32
  get tmAscent(): number {
    return this.view.getInt32(4, true);
  }

  // 0x08: i32
  get tmDescent(): number {
    return this.view.getInt32(8, true);
  }

  // 0x0c: i32
  get tmInternalLeading(): number {
    return this.view.getInt32(12, true);
  }

  // 0x10: i32
  get tmExternalLeading(): number {
    return this.view.getInt32(16, true);
  }

  // 0x14: i32
  get tmAveCharWidth(): number {
    return this.view.getInt32(20, true);
  }

  // 0x18: i32
  get tmMaxCharWidth(): number {
    return this.view.getInt32(24, true);
  }

  // 0x1c: i32
  get tmWeight(): number {
    return this.view.getInt32(28, true);
  }

  // 0x20: i32
  get tmOverhang(): number {
    return this.view.getInt32(32, true);
  }

  // 0x24: i32
  get tmDigitizedAspectX(): number {
    return this.view.getInt32(36, true);
  }

  // 0x28: i32
  get tmDigitizedAspectY(): number {
    return this.view.getInt32(40, true);
  }

  // 0x2c: pad4

  // 0x30: pointer
  get tmFirstChar(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(48, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x38: pointer
  get tmLastChar(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(56, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x40: pointer
  get tmDefaultChar(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(64, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x48: pointer
  get tmBreakChar(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(72, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x50: u8
  get tmItalic(): number {
    return this.view.getUint8(80);
  }

  // 0x51: u8
  get tmUnderlined(): number {
    return this.view.getUint8(81);
  }

  // 0x52: u8
  get tmStruckOut(): number {
    return this.view.getUint8(82);
  }

  // 0x53: u8
  get tmPitchAndFamily(): number {
    return this.view.getUint8(83);
  }

  // 0x54: u8
  get tmCharSet(): number {
    return this.view.getUint8(84);
  }

  // 0x55: u32
  get ntmFlags(): number {
    return this.view.getUint32(85, true);
  }

  // 0x59: u32
  get ntmSizeEM(): number {
    return this.view.getUint32(89, true);
  }

  // 0x5d: u32
  get ntmCellHeight(): number {
    return this.view.getUint32(93, true);
  }

  // 0x61: u32
  get ntmAvgWidth(): number {
    return this.view.getUint32(97, true);
  }

  // 0x65: pad3

  // 0x00: i32
  set tmHeight(value: number) {
    this.view.setInt32(0, value, true);
  }

  // 0x04: i32
  set tmAscent(value: number) {
    this.view.setInt32(4, value, true);
  }

  // 0x08: i32
  set tmDescent(value: number) {
    this.view.setInt32(8, value, true);
  }

  // 0x0c: i32
  set tmInternalLeading(value: number) {
    this.view.setInt32(12, value, true);
  }

  // 0x10: i32
  set tmExternalLeading(value: number) {
    this.view.setInt32(16, value, true);
  }

  // 0x14: i32
  set tmAveCharWidth(value: number) {
    this.view.setInt32(20, value, true);
  }

  // 0x18: i32
  set tmMaxCharWidth(value: number) {
    this.view.setInt32(24, value, true);
  }

  // 0x1c: i32
  set tmWeight(value: number) {
    this.view.setInt32(28, value, true);
  }

  // 0x20: i32
  set tmOverhang(value: number) {
    this.view.setInt32(32, value, true);
  }

  // 0x24: i32
  set tmDigitizedAspectX(value: number) {
    this.view.setInt32(36, value, true);
  }

  // 0x28: i32
  set tmDigitizedAspectY(value: number) {
    this.view.setInt32(40, value, true);
  }

  // 0x2c: pad4

  // 0x30: pointer
  set tmFirstChar(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(48, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x38: pointer
  set tmLastChar(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(56, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x40: pointer
  set tmDefaultChar(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(64, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x48: pointer
  set tmBreakChar(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(72, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x50: u8
  set tmItalic(value: number) {
    this.view.setUint8(80, value);
  }

  // 0x51: u8
  set tmUnderlined(value: number) {
    this.view.setUint8(81, value);
  }

  // 0x52: u8
  set tmStruckOut(value: number) {
    this.view.setUint8(82, value);
  }

  // 0x53: u8
  set tmPitchAndFamily(value: number) {
    this.view.setUint8(83, value);
  }

  // 0x54: u8
  set tmCharSet(value: number) {
    this.view.setUint8(84, value);
  }

  // 0x55: u32
  set ntmFlags(value: number) {
    this.view.setUint32(85, value, true);
  }

  // 0x59: u32
  set ntmSizeEM(value: number) {
    this.view.setUint32(89, value, true);
  }

  // 0x5d: u32
  set ntmCellHeight(value: number) {
    this.view.setUint32(93, value, true);
  }

  // 0x61: u32
  set ntmAvgWidth(value: number) {
    this.view.setUint32(97, value, true);
  }

  // 0x65: pad3
}

/**
 * Windows.Win32.Graphics.Gdi.PELARRAY (size: 24)
 */
export interface PELARRAY {
  /** i32 */
  paXCount: number;
  /** i32 */
  paYCount: number;
  /** i32 */
  paXExt: number;
  /** i32 */
  paYExt: number;
  /** u8 */
  paRGBs: number;
}

export const sizeofPELARRAY = 24;

export function allocPELARRAY(data?: Partial<PELARRAY>): Uint8Array {
  const buf = new Uint8Array(sizeofPELARRAY);
  const view = new DataView(buf.buffer);
  // 0x00: i32
  if (data?.paXCount !== undefined) view.setInt32(0, Number(data.paXCount), true);
  // 0x04: i32
  if (data?.paYCount !== undefined) view.setInt32(4, Number(data.paYCount), true);
  // 0x08: i32
  if (data?.paXExt !== undefined) view.setInt32(8, Number(data.paXExt), true);
  // 0x0c: i32
  if (data?.paYExt !== undefined) view.setInt32(12, Number(data.paYExt), true);
  // 0x10: u8
  if (data?.paRGBs !== undefined) view.setUint8(16, Number(data.paRGBs));
  // 0x11: pad7
  return buf;
}

export class PELARRAYView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: i32
  get paXCount(): number {
    return this.view.getInt32(0, true);
  }

  // 0x04: i32
  get paYCount(): number {
    return this.view.getInt32(4, true);
  }

  // 0x08: i32
  get paXExt(): number {
    return this.view.getInt32(8, true);
  }

  // 0x0c: i32
  get paYExt(): number {
    return this.view.getInt32(12, true);
  }

  // 0x10: u8
  get paRGBs(): number {
    return this.view.getUint8(16);
  }

  // 0x11: pad7

  // 0x00: i32
  set paXCount(value: number) {
    this.view.setInt32(0, value, true);
  }

  // 0x04: i32
  set paYCount(value: number) {
    this.view.setInt32(4, value, true);
  }

  // 0x08: i32
  set paXExt(value: number) {
    this.view.setInt32(8, value, true);
  }

  // 0x0c: i32
  set paYExt(value: number) {
    this.view.setInt32(12, value, true);
  }

  // 0x10: u8
  set paRGBs(value: number) {
    this.view.setUint8(16, value);
  }

  // 0x11: pad7
}

export type COLORREF = number;

/**
 * Windows.Win32.Graphics.Gdi.LOGBRUSH (size: 24)
 */
export interface LOGBRUSH {
  /** Windows.Win32.Graphics.Gdi.BRUSH_STYLE */
  lbStyle: BRUSH_STYLE;
  /** Windows.Win32.Foundation.COLORREF */
  lbColor: Uint8Array | Deno.PointerValue;
  /** usize */
  lbHatch: Deno.PointerValue;
}

export const sizeofLOGBRUSH = 24;

export function allocLOGBRUSH(data?: Partial<LOGBRUSH>): Uint8Array {
  const buf = new Uint8Array(sizeofLOGBRUSH);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.lbStyle !== undefined) view.setUint32(0, Number(data.lbStyle), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.lbColor !== undefined) view.setBigUint64(8, data.lbColor === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.lbColor))), true);
  // 0x10: usize
  if (data?.lbHatch !== undefined) view.setBigUint64(16, BigInt(data.lbHatch), true);
  return buf;
}

export class LOGBRUSHView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get lbStyle(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  get lbColor(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x10: usize
  get lbHatch(): Deno.PointerValue {
    return Number(this.view.getBigUint64(16, true));
  }

  // 0x00: u32
  set lbStyle(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  set lbColor(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x10: usize
  set lbHatch(value: Deno.PointerValue) {
    this.view.setBigUint64(16, BigInt(value), true);
  }
}

/**
 * Windows.Win32.Graphics.Gdi.LOGBRUSH32 (size: 24)
 */
export interface LOGBRUSH32 {
  /** Windows.Win32.Graphics.Gdi.BRUSH_STYLE */
  lbStyle: BRUSH_STYLE;
  /** Windows.Win32.Foundation.COLORREF */
  lbColor: Uint8Array | Deno.PointerValue;
  /** u32 */
  lbHatch: number;
}

export const sizeofLOGBRUSH32 = 24;

export function allocLOGBRUSH32(data?: Partial<LOGBRUSH32>): Uint8Array {
  const buf = new Uint8Array(sizeofLOGBRUSH32);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.lbStyle !== undefined) view.setUint32(0, Number(data.lbStyle), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.lbColor !== undefined) view.setBigUint64(8, data.lbColor === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.lbColor))), true);
  // 0x10: u32
  if (data?.lbHatch !== undefined) view.setUint32(16, Number(data.lbHatch), true);
  // 0x14: pad4
  return buf;
}

export class LOGBRUSH32View {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get lbStyle(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  get lbColor(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x10: u32
  get lbHatch(): number {
    return this.view.getUint32(16, true);
  }

  // 0x14: pad4

  // 0x00: u32
  set lbStyle(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  set lbColor(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x10: u32
  set lbHatch(value: number) {
    this.view.setUint32(16, value, true);
  }

  // 0x14: pad4
}

/**
 * Windows.Win32.Foundation.POINT (size: 8)
 */
export interface POINT {
  /** i32 */
  x: number;
  /** i32 */
  y: number;
}

export const sizeofPOINT = 8;

export function allocPOINT(data?: Partial<POINT>): Uint8Array {
  const buf = new Uint8Array(sizeofPOINT);
  const view = new DataView(buf.buffer);
  // 0x00: i32
  if (data?.x !== undefined) view.setInt32(0, Number(data.x), true);
  // 0x04: i32
  if (data?.y !== undefined) view.setInt32(4, Number(data.y), true);
  return buf;
}

export class POINTView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: i32
  get x(): number {
    return this.view.getInt32(0, true);
  }

  // 0x04: i32
  get y(): number {
    return this.view.getInt32(4, true);
  }

  // 0x00: i32
  set x(value: number) {
    this.view.setInt32(0, value, true);
  }

  // 0x04: i32
  set y(value: number) {
    this.view.setInt32(4, value, true);
  }
}

/**
 * Windows.Win32.Graphics.Gdi.LOGPEN (size: 24)
 */
export interface LOGPEN {
  /** Windows.Win32.Graphics.Gdi.PEN_STYLE */
  lopnStyle: PEN_STYLE;
  /** Windows.Win32.Foundation.POINT */
  lopnWidth: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.Foundation.COLORREF */
  lopnColor: Uint8Array | Deno.PointerValue;
}

export const sizeofLOGPEN = 24;

export function allocLOGPEN(data?: Partial<LOGPEN>): Uint8Array {
  const buf = new Uint8Array(sizeofLOGPEN);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.lopnStyle !== undefined) view.setUint32(0, Number(data.lopnStyle), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.lopnWidth !== undefined) view.setBigUint64(8, data.lopnWidth === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.lopnWidth))), true);
  // 0x10: pointer
  if (data?.lopnColor !== undefined) view.setBigUint64(16, data.lopnColor === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.lopnColor))), true);
  return buf;
}

export class LOGPENView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get lopnStyle(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  get lopnWidth(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x10: pointer
  get lopnColor(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(16, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: u32
  set lopnStyle(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  set lopnWidth(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x10: pointer
  set lopnColor(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(16, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.Graphics.Gdi.EXTLOGPEN (size: 48)
 */
export interface EXTLOGPEN {
  /** Windows.Win32.Graphics.Gdi.PEN_STYLE */
  elpPenStyle: PEN_STYLE;
  /** u32 */
  elpWidth: number;
  /** u32 */
  elpBrushStyle: number;
  /** Windows.Win32.Foundation.COLORREF */
  elpColor: Uint8Array | Deno.PointerValue;
  /** usize */
  elpHatch: Deno.PointerValue;
  /** u32 */
  elpNumEntries: number;
  /** array */
  elpStyleEntry: Deno.PointerValue;
}

export const sizeofEXTLOGPEN = 48;

export function allocEXTLOGPEN(data?: Partial<EXTLOGPEN>): Uint8Array {
  const buf = new Uint8Array(sizeofEXTLOGPEN);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.elpPenStyle !== undefined) view.setUint32(0, Number(data.elpPenStyle), true);
  // 0x04: u32
  if (data?.elpWidth !== undefined) view.setUint32(4, Number(data.elpWidth), true);
  // 0x08: u32
  if (data?.elpBrushStyle !== undefined) view.setUint32(8, Number(data.elpBrushStyle), true);
  // 0x0c: pad4
  // 0x10: pointer
  if (data?.elpColor !== undefined) view.setBigUint64(16, data.elpColor === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.elpColor))), true);
  // 0x18: usize
  if (data?.elpHatch !== undefined) view.setBigUint64(24, BigInt(data.elpHatch), true);
  // 0x20: u32
  if (data?.elpNumEntries !== undefined) view.setUint32(32, Number(data.elpNumEntries), true);
  // 0x24: pad4
  // 0x28: pointer
  if (data?.elpStyleEntry !== undefined) view.setBigUint64(40, data.elpStyleEntry === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.elpStyleEntry))), true);
  return buf;
}

export class EXTLOGPENView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get elpPenStyle(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: u32
  get elpWidth(): number {
    return this.view.getUint32(4, true);
  }

  // 0x08: u32
  get elpBrushStyle(): number {
    return this.view.getUint32(8, true);
  }

  // 0x0c: pad4

  // 0x10: pointer
  get elpColor(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(16, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x18: usize
  get elpHatch(): Deno.PointerValue {
    return Number(this.view.getBigUint64(24, true));
  }

  // 0x20: u32
  get elpNumEntries(): number {
    return this.view.getUint32(32, true);
  }

  // 0x24: pad4

  // 0x28: pointer
  get elpStyleEntry(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(40, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: u32
  set elpPenStyle(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: u32
  set elpWidth(value: number) {
    this.view.setUint32(4, value, true);
  }

  // 0x08: u32
  set elpBrushStyle(value: number) {
    this.view.setUint32(8, value, true);
  }

  // 0x0c: pad4

  // 0x10: pointer
  set elpColor(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(16, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x18: usize
  set elpHatch(value: Deno.PointerValue) {
    this.view.setBigUint64(24, BigInt(value), true);
  }

  // 0x20: u32
  set elpNumEntries(value: number) {
    this.view.setUint32(32, value, true);
  }

  // 0x24: pad4

  // 0x28: pointer
  set elpStyleEntry(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(40, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.Graphics.Gdi.EXTLOGPEN32 (size: 40)
 */
export interface EXTLOGPEN32 {
  /** Windows.Win32.Graphics.Gdi.PEN_STYLE */
  elpPenStyle: PEN_STYLE;
  /** u32 */
  elpWidth: number;
  /** u32 */
  elpBrushStyle: number;
  /** Windows.Win32.Foundation.COLORREF */
  elpColor: Uint8Array | Deno.PointerValue;
  /** u32 */
  elpHatch: number;
  /** u32 */
  elpNumEntries: number;
  /** array */
  elpStyleEntry: Deno.PointerValue;
}

export const sizeofEXTLOGPEN32 = 40;

export function allocEXTLOGPEN32(data?: Partial<EXTLOGPEN32>): Uint8Array {
  const buf = new Uint8Array(sizeofEXTLOGPEN32);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.elpPenStyle !== undefined) view.setUint32(0, Number(data.elpPenStyle), true);
  // 0x04: u32
  if (data?.elpWidth !== undefined) view.setUint32(4, Number(data.elpWidth), true);
  // 0x08: u32
  if (data?.elpBrushStyle !== undefined) view.setUint32(8, Number(data.elpBrushStyle), true);
  // 0x0c: pad4
  // 0x10: pointer
  if (data?.elpColor !== undefined) view.setBigUint64(16, data.elpColor === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.elpColor))), true);
  // 0x18: u32
  if (data?.elpHatch !== undefined) view.setUint32(24, Number(data.elpHatch), true);
  // 0x1c: u32
  if (data?.elpNumEntries !== undefined) view.setUint32(28, Number(data.elpNumEntries), true);
  // 0x20: pointer
  if (data?.elpStyleEntry !== undefined) view.setBigUint64(32, data.elpStyleEntry === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.elpStyleEntry))), true);
  return buf;
}

export class EXTLOGPEN32View {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get elpPenStyle(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: u32
  get elpWidth(): number {
    return this.view.getUint32(4, true);
  }

  // 0x08: u32
  get elpBrushStyle(): number {
    return this.view.getUint32(8, true);
  }

  // 0x0c: pad4

  // 0x10: pointer
  get elpColor(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(16, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x18: u32
  get elpHatch(): number {
    return this.view.getUint32(24, true);
  }

  // 0x1c: u32
  get elpNumEntries(): number {
    return this.view.getUint32(28, true);
  }

  // 0x20: pointer
  get elpStyleEntry(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(32, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: u32
  set elpPenStyle(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: u32
  set elpWidth(value: number) {
    this.view.setUint32(4, value, true);
  }

  // 0x08: u32
  set elpBrushStyle(value: number) {
    this.view.setUint32(8, value, true);
  }

  // 0x0c: pad4

  // 0x10: pointer
  set elpColor(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(16, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x18: u32
  set elpHatch(value: number) {
    this.view.setUint32(24, value, true);
  }

  // 0x1c: u32
  set elpNumEntries(value: number) {
    this.view.setUint32(28, value, true);
  }

  // 0x20: pointer
  set elpStyleEntry(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(32, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.Graphics.Gdi.PALETTEENTRY (size: 8)
 */
export interface PALETTEENTRY {
  /** u8 */
  peRed: number;
  /** u8 */
  peGreen: number;
  /** u8 */
  peBlue: number;
  /** u8 */
  peFlags: number;
}

export const sizeofPALETTEENTRY = 8;

export function allocPALETTEENTRY(data?: Partial<PALETTEENTRY>): Uint8Array {
  const buf = new Uint8Array(sizeofPALETTEENTRY);
  const view = new DataView(buf.buffer);
  // 0x00: u8
  if (data?.peRed !== undefined) view.setUint8(0, Number(data.peRed));
  // 0x01: u8
  if (data?.peGreen !== undefined) view.setUint8(1, Number(data.peGreen));
  // 0x02: u8
  if (data?.peBlue !== undefined) view.setUint8(2, Number(data.peBlue));
  // 0x03: u8
  if (data?.peFlags !== undefined) view.setUint8(3, Number(data.peFlags));
  // 0x04: pad4
  return buf;
}

export class PALETTEENTRYView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u8
  get peRed(): number {
    return this.view.getUint8(0);
  }

  // 0x01: u8
  get peGreen(): number {
    return this.view.getUint8(1);
  }

  // 0x02: u8
  get peBlue(): number {
    return this.view.getUint8(2);
  }

  // 0x03: u8
  get peFlags(): number {
    return this.view.getUint8(3);
  }

  // 0x04: pad4

  // 0x00: u8
  set peRed(value: number) {
    this.view.setUint8(0, value);
  }

  // 0x01: u8
  set peGreen(value: number) {
    this.view.setUint8(1, value);
  }

  // 0x02: u8
  set peBlue(value: number) {
    this.view.setUint8(2, value);
  }

  // 0x03: u8
  set peFlags(value: number) {
    this.view.setUint8(3, value);
  }

  // 0x04: pad4
}

/**
 * Windows.Win32.Graphics.Gdi.LOGPALETTE (size: 16)
 */
export interface LOGPALETTE {
  /** u16 */
  palVersion: number;
  /** u16 */
  palNumEntries: number;
  /** array */
  palPalEntry: Deno.PointerValue;
}

export const sizeofLOGPALETTE = 16;

export function allocLOGPALETTE(data?: Partial<LOGPALETTE>): Uint8Array {
  const buf = new Uint8Array(sizeofLOGPALETTE);
  const view = new DataView(buf.buffer);
  // 0x00: u16
  if (data?.palVersion !== undefined) view.setUint16(0, Number(data.palVersion), true);
  // 0x02: u16
  if (data?.palNumEntries !== undefined) view.setUint16(2, Number(data.palNumEntries), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.palPalEntry !== undefined) view.setBigUint64(8, data.palPalEntry === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.palPalEntry))), true);
  return buf;
}

export class LOGPALETTEView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u16
  get palVersion(): number {
    return this.view.getUint16(0, true);
  }

  // 0x02: u16
  get palNumEntries(): number {
    return this.view.getUint16(2, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  get palPalEntry(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: u16
  set palVersion(value: number) {
    this.view.setUint16(0, value, true);
  }

  // 0x02: u16
  set palNumEntries(value: number) {
    this.view.setUint16(2, value, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  set palPalEntry(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.Graphics.Gdi.LOGFONTA (size: 40)
 */
export interface LOGFONTA {
  /** i32 */
  lfHeight: number;
  /** i32 */
  lfWidth: number;
  /** i32 */
  lfEscapement: number;
  /** i32 */
  lfOrientation: number;
  /** i32 */
  lfWeight: number;
  /** u8 */
  lfItalic: number;
  /** u8 */
  lfUnderline: number;
  /** u8 */
  lfStrikeOut: number;
  /** Windows.Win32.Graphics.Gdi.FONT_CHARSET */
  lfCharSet: FONT_CHARSET;
  /** Windows.Win32.Graphics.Gdi.FONT_OUTPUT_PRECISION */
  lfOutPrecision: FONT_OUTPUT_PRECISION;
  /** Windows.Win32.Graphics.Gdi.FONT_CLIP_PRECISION */
  lfClipPrecision: FONT_CLIP_PRECISION;
  /** Windows.Win32.Graphics.Gdi.FONT_QUALITY */
  lfQuality: FONT_QUALITY;
  /** u8 */
  lfPitchAndFamily: number;
  /** array */
  lfFaceName: Deno.PointerValue;
}

export const sizeofLOGFONTA = 40;

export function allocLOGFONTA(data?: Partial<LOGFONTA>): Uint8Array {
  const buf = new Uint8Array(sizeofLOGFONTA);
  const view = new DataView(buf.buffer);
  // 0x00: i32
  if (data?.lfHeight !== undefined) view.setInt32(0, Number(data.lfHeight), true);
  // 0x04: i32
  if (data?.lfWidth !== undefined) view.setInt32(4, Number(data.lfWidth), true);
  // 0x08: i32
  if (data?.lfEscapement !== undefined) view.setInt32(8, Number(data.lfEscapement), true);
  // 0x0c: i32
  if (data?.lfOrientation !== undefined) view.setInt32(12, Number(data.lfOrientation), true);
  // 0x10: i32
  if (data?.lfWeight !== undefined) view.setInt32(16, Number(data.lfWeight), true);
  // 0x14: u8
  if (data?.lfItalic !== undefined) view.setUint8(20, Number(data.lfItalic));
  // 0x15: u8
  if (data?.lfUnderline !== undefined) view.setUint8(21, Number(data.lfUnderline));
  // 0x16: u8
  if (data?.lfStrikeOut !== undefined) view.setUint8(22, Number(data.lfStrikeOut));
  // 0x17: u8
  if (data?.lfCharSet !== undefined) view.setUint8(23, Number(data.lfCharSet));
  // 0x18: u8
  if (data?.lfOutPrecision !== undefined) view.setUint8(24, Number(data.lfOutPrecision));
  // 0x19: u8
  if (data?.lfClipPrecision !== undefined) view.setUint8(25, Number(data.lfClipPrecision));
  // 0x1a: u8
  if (data?.lfQuality !== undefined) view.setUint8(26, Number(data.lfQuality));
  // 0x1b: u8
  if (data?.lfPitchAndFamily !== undefined) view.setUint8(27, Number(data.lfPitchAndFamily));
  // 0x1c: pad4
  // 0x20: pointer
  if (data?.lfFaceName !== undefined) view.setBigUint64(32, data.lfFaceName === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.lfFaceName))), true);
  return buf;
}

export class LOGFONTAView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: i32
  get lfHeight(): number {
    return this.view.getInt32(0, true);
  }

  // 0x04: i32
  get lfWidth(): number {
    return this.view.getInt32(4, true);
  }

  // 0x08: i32
  get lfEscapement(): number {
    return this.view.getInt32(8, true);
  }

  // 0x0c: i32
  get lfOrientation(): number {
    return this.view.getInt32(12, true);
  }

  // 0x10: i32
  get lfWeight(): number {
    return this.view.getInt32(16, true);
  }

  // 0x14: u8
  get lfItalic(): number {
    return this.view.getUint8(20);
  }

  // 0x15: u8
  get lfUnderline(): number {
    return this.view.getUint8(21);
  }

  // 0x16: u8
  get lfStrikeOut(): number {
    return this.view.getUint8(22);
  }

  // 0x17: u8
  get lfCharSet(): number {
    return this.view.getUint8(23);
  }

  // 0x18: u8
  get lfOutPrecision(): number {
    return this.view.getUint8(24);
  }

  // 0x19: u8
  get lfClipPrecision(): number {
    return this.view.getUint8(25);
  }

  // 0x1a: u8
  get lfQuality(): number {
    return this.view.getUint8(26);
  }

  // 0x1b: u8
  get lfPitchAndFamily(): number {
    return this.view.getUint8(27);
  }

  // 0x1c: pad4

  // 0x20: pointer
  get lfFaceName(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(32, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: i32
  set lfHeight(value: number) {
    this.view.setInt32(0, value, true);
  }

  // 0x04: i32
  set lfWidth(value: number) {
    this.view.setInt32(4, value, true);
  }

  // 0x08: i32
  set lfEscapement(value: number) {
    this.view.setInt32(8, value, true);
  }

  // 0x0c: i32
  set lfOrientation(value: number) {
    this.view.setInt32(12, value, true);
  }

  // 0x10: i32
  set lfWeight(value: number) {
    this.view.setInt32(16, value, true);
  }

  // 0x14: u8
  set lfItalic(value: number) {
    this.view.setUint8(20, value);
  }

  // 0x15: u8
  set lfUnderline(value: number) {
    this.view.setUint8(21, value);
  }

  // 0x16: u8
  set lfStrikeOut(value: number) {
    this.view.setUint8(22, value);
  }

  // 0x17: u8
  set lfCharSet(value: number) {
    this.view.setUint8(23, value);
  }

  // 0x18: u8
  set lfOutPrecision(value: number) {
    this.view.setUint8(24, value);
  }

  // 0x19: u8
  set lfClipPrecision(value: number) {
    this.view.setUint8(25, value);
  }

  // 0x1a: u8
  set lfQuality(value: number) {
    this.view.setUint8(26, value);
  }

  // 0x1b: u8
  set lfPitchAndFamily(value: number) {
    this.view.setUint8(27, value);
  }

  // 0x1c: pad4

  // 0x20: pointer
  set lfFaceName(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(32, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.Graphics.Gdi.LOGFONTW (size: 40)
 */
export interface LOGFONTW {
  /** i32 */
  lfHeight: number;
  /** i32 */
  lfWidth: number;
  /** i32 */
  lfEscapement: number;
  /** i32 */
  lfOrientation: number;
  /** i32 */
  lfWeight: number;
  /** u8 */
  lfItalic: number;
  /** u8 */
  lfUnderline: number;
  /** u8 */
  lfStrikeOut: number;
  /** Windows.Win32.Graphics.Gdi.FONT_CHARSET */
  lfCharSet: FONT_CHARSET;
  /** Windows.Win32.Graphics.Gdi.FONT_OUTPUT_PRECISION */
  lfOutPrecision: FONT_OUTPUT_PRECISION;
  /** Windows.Win32.Graphics.Gdi.FONT_CLIP_PRECISION */
  lfClipPrecision: FONT_CLIP_PRECISION;
  /** Windows.Win32.Graphics.Gdi.FONT_QUALITY */
  lfQuality: FONT_QUALITY;
  /** u8 */
  lfPitchAndFamily: number;
  /** array */
  lfFaceName: Deno.PointerValue;
}

export const sizeofLOGFONTW = 40;

export function allocLOGFONTW(data?: Partial<LOGFONTW>): Uint8Array {
  const buf = new Uint8Array(sizeofLOGFONTW);
  const view = new DataView(buf.buffer);
  // 0x00: i32
  if (data?.lfHeight !== undefined) view.setInt32(0, Number(data.lfHeight), true);
  // 0x04: i32
  if (data?.lfWidth !== undefined) view.setInt32(4, Number(data.lfWidth), true);
  // 0x08: i32
  if (data?.lfEscapement !== undefined) view.setInt32(8, Number(data.lfEscapement), true);
  // 0x0c: i32
  if (data?.lfOrientation !== undefined) view.setInt32(12, Number(data.lfOrientation), true);
  // 0x10: i32
  if (data?.lfWeight !== undefined) view.setInt32(16, Number(data.lfWeight), true);
  // 0x14: u8
  if (data?.lfItalic !== undefined) view.setUint8(20, Number(data.lfItalic));
  // 0x15: u8
  if (data?.lfUnderline !== undefined) view.setUint8(21, Number(data.lfUnderline));
  // 0x16: u8
  if (data?.lfStrikeOut !== undefined) view.setUint8(22, Number(data.lfStrikeOut));
  // 0x17: u8
  if (data?.lfCharSet !== undefined) view.setUint8(23, Number(data.lfCharSet));
  // 0x18: u8
  if (data?.lfOutPrecision !== undefined) view.setUint8(24, Number(data.lfOutPrecision));
  // 0x19: u8
  if (data?.lfClipPrecision !== undefined) view.setUint8(25, Number(data.lfClipPrecision));
  // 0x1a: u8
  if (data?.lfQuality !== undefined) view.setUint8(26, Number(data.lfQuality));
  // 0x1b: u8
  if (data?.lfPitchAndFamily !== undefined) view.setUint8(27, Number(data.lfPitchAndFamily));
  // 0x1c: pad4
  // 0x20: pointer
  if (data?.lfFaceName !== undefined) view.setBigUint64(32, data.lfFaceName === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.lfFaceName))), true);
  return buf;
}

export class LOGFONTWView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: i32
  get lfHeight(): number {
    return this.view.getInt32(0, true);
  }

  // 0x04: i32
  get lfWidth(): number {
    return this.view.getInt32(4, true);
  }

  // 0x08: i32
  get lfEscapement(): number {
    return this.view.getInt32(8, true);
  }

  // 0x0c: i32
  get lfOrientation(): number {
    return this.view.getInt32(12, true);
  }

  // 0x10: i32
  get lfWeight(): number {
    return this.view.getInt32(16, true);
  }

  // 0x14: u8
  get lfItalic(): number {
    return this.view.getUint8(20);
  }

  // 0x15: u8
  get lfUnderline(): number {
    return this.view.getUint8(21);
  }

  // 0x16: u8
  get lfStrikeOut(): number {
    return this.view.getUint8(22);
  }

  // 0x17: u8
  get lfCharSet(): number {
    return this.view.getUint8(23);
  }

  // 0x18: u8
  get lfOutPrecision(): number {
    return this.view.getUint8(24);
  }

  // 0x19: u8
  get lfClipPrecision(): number {
    return this.view.getUint8(25);
  }

  // 0x1a: u8
  get lfQuality(): number {
    return this.view.getUint8(26);
  }

  // 0x1b: u8
  get lfPitchAndFamily(): number {
    return this.view.getUint8(27);
  }

  // 0x1c: pad4

  // 0x20: pointer
  get lfFaceName(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(32, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: i32
  set lfHeight(value: number) {
    this.view.setInt32(0, value, true);
  }

  // 0x04: i32
  set lfWidth(value: number) {
    this.view.setInt32(4, value, true);
  }

  // 0x08: i32
  set lfEscapement(value: number) {
    this.view.setInt32(8, value, true);
  }

  // 0x0c: i32
  set lfOrientation(value: number) {
    this.view.setInt32(12, value, true);
  }

  // 0x10: i32
  set lfWeight(value: number) {
    this.view.setInt32(16, value, true);
  }

  // 0x14: u8
  set lfItalic(value: number) {
    this.view.setUint8(20, value);
  }

  // 0x15: u8
  set lfUnderline(value: number) {
    this.view.setUint8(21, value);
  }

  // 0x16: u8
  set lfStrikeOut(value: number) {
    this.view.setUint8(22, value);
  }

  // 0x17: u8
  set lfCharSet(value: number) {
    this.view.setUint8(23, value);
  }

  // 0x18: u8
  set lfOutPrecision(value: number) {
    this.view.setUint8(24, value);
  }

  // 0x19: u8
  set lfClipPrecision(value: number) {
    this.view.setUint8(25, value);
  }

  // 0x1a: u8
  set lfQuality(value: number) {
    this.view.setUint8(26, value);
  }

  // 0x1b: u8
  set lfPitchAndFamily(value: number) {
    this.view.setUint8(27, value);
  }

  // 0x1c: pad4

  // 0x20: pointer
  set lfFaceName(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(32, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.Graphics.Gdi.ENUMLOGFONTA (size: 24)
 */
export interface ENUMLOGFONTA {
  /** Windows.Win32.Graphics.Gdi.LOGFONTA */
  elfLogFont: Uint8Array | Deno.PointerValue;
  /** array */
  elfFullName: Deno.PointerValue;
  /** array */
  elfStyle: Deno.PointerValue;
}

export const sizeofENUMLOGFONTA = 24;

export function allocENUMLOGFONTA(data?: Partial<ENUMLOGFONTA>): Uint8Array {
  const buf = new Uint8Array(sizeofENUMLOGFONTA);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.elfLogFont !== undefined) view.setBigUint64(0, data.elfLogFont === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.elfLogFont))), true);
  // 0x08: pointer
  if (data?.elfFullName !== undefined) view.setBigUint64(8, data.elfFullName === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.elfFullName))), true);
  // 0x10: pointer
  if (data?.elfStyle !== undefined) view.setBigUint64(16, data.elfStyle === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.elfStyle))), true);
  return buf;
}

export class ENUMLOGFONTAView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get elfLogFont(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(0, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x08: pointer
  get elfFullName(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x10: pointer
  get elfStyle(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(16, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: pointer
  set elfLogFont(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(0, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x08: pointer
  set elfFullName(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x10: pointer
  set elfStyle(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(16, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.Graphics.Gdi.ENUMLOGFONTW (size: 24)
 */
export interface ENUMLOGFONTW {
  /** Windows.Win32.Graphics.Gdi.LOGFONTW */
  elfLogFont: Uint8Array | Deno.PointerValue;
  /** array */
  elfFullName: Deno.PointerValue;
  /** array */
  elfStyle: Deno.PointerValue;
}

export const sizeofENUMLOGFONTW = 24;

export function allocENUMLOGFONTW(data?: Partial<ENUMLOGFONTW>): Uint8Array {
  const buf = new Uint8Array(sizeofENUMLOGFONTW);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.elfLogFont !== undefined) view.setBigUint64(0, data.elfLogFont === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.elfLogFont))), true);
  // 0x08: pointer
  if (data?.elfFullName !== undefined) view.setBigUint64(8, data.elfFullName === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.elfFullName))), true);
  // 0x10: pointer
  if (data?.elfStyle !== undefined) view.setBigUint64(16, data.elfStyle === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.elfStyle))), true);
  return buf;
}

export class ENUMLOGFONTWView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get elfLogFont(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(0, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x08: pointer
  get elfFullName(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x10: pointer
  get elfStyle(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(16, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: pointer
  set elfLogFont(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(0, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x08: pointer
  set elfFullName(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x10: pointer
  set elfStyle(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(16, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.Graphics.Gdi.ENUMLOGFONTEXA (size: 32)
 */
export interface ENUMLOGFONTEXA {
  /** Windows.Win32.Graphics.Gdi.LOGFONTA */
  elfLogFont: Uint8Array | Deno.PointerValue;
  /** array */
  elfFullName: Deno.PointerValue;
  /** array */
  elfStyle: Deno.PointerValue;
  /** array */
  elfScript: Deno.PointerValue;
}

export const sizeofENUMLOGFONTEXA = 32;

export function allocENUMLOGFONTEXA(data?: Partial<ENUMLOGFONTEXA>): Uint8Array {
  const buf = new Uint8Array(sizeofENUMLOGFONTEXA);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.elfLogFont !== undefined) view.setBigUint64(0, data.elfLogFont === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.elfLogFont))), true);
  // 0x08: pointer
  if (data?.elfFullName !== undefined) view.setBigUint64(8, data.elfFullName === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.elfFullName))), true);
  // 0x10: pointer
  if (data?.elfStyle !== undefined) view.setBigUint64(16, data.elfStyle === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.elfStyle))), true);
  // 0x18: pointer
  if (data?.elfScript !== undefined) view.setBigUint64(24, data.elfScript === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.elfScript))), true);
  return buf;
}

export class ENUMLOGFONTEXAView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get elfLogFont(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(0, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x08: pointer
  get elfFullName(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x10: pointer
  get elfStyle(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(16, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x18: pointer
  get elfScript(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(24, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: pointer
  set elfLogFont(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(0, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x08: pointer
  set elfFullName(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x10: pointer
  set elfStyle(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(16, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x18: pointer
  set elfScript(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(24, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.Graphics.Gdi.ENUMLOGFONTEXW (size: 32)
 */
export interface ENUMLOGFONTEXW {
  /** Windows.Win32.Graphics.Gdi.LOGFONTW */
  elfLogFont: Uint8Array | Deno.PointerValue;
  /** array */
  elfFullName: Deno.PointerValue;
  /** array */
  elfStyle: Deno.PointerValue;
  /** array */
  elfScript: Deno.PointerValue;
}

export const sizeofENUMLOGFONTEXW = 32;

export function allocENUMLOGFONTEXW(data?: Partial<ENUMLOGFONTEXW>): Uint8Array {
  const buf = new Uint8Array(sizeofENUMLOGFONTEXW);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.elfLogFont !== undefined) view.setBigUint64(0, data.elfLogFont === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.elfLogFont))), true);
  // 0x08: pointer
  if (data?.elfFullName !== undefined) view.setBigUint64(8, data.elfFullName === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.elfFullName))), true);
  // 0x10: pointer
  if (data?.elfStyle !== undefined) view.setBigUint64(16, data.elfStyle === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.elfStyle))), true);
  // 0x18: pointer
  if (data?.elfScript !== undefined) view.setBigUint64(24, data.elfScript === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.elfScript))), true);
  return buf;
}

export class ENUMLOGFONTEXWView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get elfLogFont(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(0, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x08: pointer
  get elfFullName(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x10: pointer
  get elfStyle(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(16, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x18: pointer
  get elfScript(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(24, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: pointer
  set elfLogFont(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(0, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x08: pointer
  set elfFullName(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x10: pointer
  set elfStyle(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(16, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x18: pointer
  set elfScript(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(24, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.Graphics.Gdi.PANOSE (size: 40)
 */
export interface PANOSE {
  /** Windows.Win32.Graphics.Gdi.PAN_FAMILY_TYPE */
  bFamilyType: PAN_FAMILY_TYPE;
  /** Windows.Win32.Graphics.Gdi.PAN_SERIF_STYLE */
  bSerifStyle: PAN_SERIF_STYLE;
  /** Windows.Win32.Graphics.Gdi.PAN_WEIGHT */
  bWeight: PAN_WEIGHT;
  /** Windows.Win32.Graphics.Gdi.PAN_PROPORTION */
  bProportion: PAN_PROPORTION;
  /** Windows.Win32.Graphics.Gdi.PAN_CONTRAST */
  bContrast: PAN_CONTRAST;
  /** Windows.Win32.Graphics.Gdi.PAN_STROKE_VARIATION */
  bStrokeVariation: PAN_STROKE_VARIATION;
  /** Windows.Win32.Graphics.Gdi.PAN_ARM_STYLE */
  bArmStyle: PAN_ARM_STYLE;
  /** Windows.Win32.Graphics.Gdi.PAN_LETT_FORM */
  bLetterform: PAN_LETT_FORM;
  /** Windows.Win32.Graphics.Gdi.PAN_MIDLINE */
  bMidline: PAN_MIDLINE;
  /** Windows.Win32.Graphics.Gdi.PAN_XHEIGHT */
  bXHeight: PAN_XHEIGHT;
}

export const sizeofPANOSE = 40;

export function allocPANOSE(data?: Partial<PANOSE>): Uint8Array {
  const buf = new Uint8Array(sizeofPANOSE);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.bFamilyType !== undefined) view.setUint32(0, Number(data.bFamilyType), true);
  // 0x04: u32
  if (data?.bSerifStyle !== undefined) view.setUint32(4, Number(data.bSerifStyle), true);
  // 0x08: u32
  if (data?.bWeight !== undefined) view.setUint32(8, Number(data.bWeight), true);
  // 0x0c: u32
  if (data?.bProportion !== undefined) view.setUint32(12, Number(data.bProportion), true);
  // 0x10: u32
  if (data?.bContrast !== undefined) view.setUint32(16, Number(data.bContrast), true);
  // 0x14: u32
  if (data?.bStrokeVariation !== undefined) view.setUint32(20, Number(data.bStrokeVariation), true);
  // 0x18: u32
  if (data?.bArmStyle !== undefined) view.setUint32(24, Number(data.bArmStyle), true);
  // 0x1c: u32
  if (data?.bLetterform !== undefined) view.setUint32(28, Number(data.bLetterform), true);
  // 0x20: u32
  if (data?.bMidline !== undefined) view.setUint32(32, Number(data.bMidline), true);
  // 0x24: u32
  if (data?.bXHeight !== undefined) view.setUint32(36, Number(data.bXHeight), true);
  return buf;
}

export class PANOSEView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get bFamilyType(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: u32
  get bSerifStyle(): number {
    return this.view.getUint32(4, true);
  }

  // 0x08: u32
  get bWeight(): number {
    return this.view.getUint32(8, true);
  }

  // 0x0c: u32
  get bProportion(): number {
    return this.view.getUint32(12, true);
  }

  // 0x10: u32
  get bContrast(): number {
    return this.view.getUint32(16, true);
  }

  // 0x14: u32
  get bStrokeVariation(): number {
    return this.view.getUint32(20, true);
  }

  // 0x18: u32
  get bArmStyle(): number {
    return this.view.getUint32(24, true);
  }

  // 0x1c: u32
  get bLetterform(): number {
    return this.view.getUint32(28, true);
  }

  // 0x20: u32
  get bMidline(): number {
    return this.view.getUint32(32, true);
  }

  // 0x24: u32
  get bXHeight(): number {
    return this.view.getUint32(36, true);
  }

  // 0x00: u32
  set bFamilyType(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: u32
  set bSerifStyle(value: number) {
    this.view.setUint32(4, value, true);
  }

  // 0x08: u32
  set bWeight(value: number) {
    this.view.setUint32(8, value, true);
  }

  // 0x0c: u32
  set bProportion(value: number) {
    this.view.setUint32(12, value, true);
  }

  // 0x10: u32
  set bContrast(value: number) {
    this.view.setUint32(16, value, true);
  }

  // 0x14: u32
  set bStrokeVariation(value: number) {
    this.view.setUint32(20, value, true);
  }

  // 0x18: u32
  set bArmStyle(value: number) {
    this.view.setUint32(24, value, true);
  }

  // 0x1c: u32
  set bLetterform(value: number) {
    this.view.setUint32(28, value, true);
  }

  // 0x20: u32
  set bMidline(value: number) {
    this.view.setUint32(32, value, true);
  }

  // 0x24: u32
  set bXHeight(value: number) {
    this.view.setUint32(36, value, true);
  }
}

/**
 * Windows.Win32.Graphics.Gdi.EXTLOGFONTA (size: 64)
 */
export interface EXTLOGFONTA {
  /** Windows.Win32.Graphics.Gdi.LOGFONTA */
  elfLogFont: Uint8Array | Deno.PointerValue;
  /** array */
  elfFullName: Deno.PointerValue;
  /** array */
  elfStyle: Deno.PointerValue;
  /** u32 */
  elfVersion: number;
  /** u32 */
  elfStyleSize: number;
  /** u32 */
  elfMatch: number;
  /** u32 */
  elfReserved: number;
  /** array */
  elfVendorId: Deno.PointerValue;
  /** u32 */
  elfCulture: number;
  /** Windows.Win32.Graphics.Gdi.PANOSE */
  elfPanose: Uint8Array | Deno.PointerValue;
}

export const sizeofEXTLOGFONTA = 64;

export function allocEXTLOGFONTA(data?: Partial<EXTLOGFONTA>): Uint8Array {
  const buf = new Uint8Array(sizeofEXTLOGFONTA);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.elfLogFont !== undefined) view.setBigUint64(0, data.elfLogFont === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.elfLogFont))), true);
  // 0x08: pointer
  if (data?.elfFullName !== undefined) view.setBigUint64(8, data.elfFullName === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.elfFullName))), true);
  // 0x10: pointer
  if (data?.elfStyle !== undefined) view.setBigUint64(16, data.elfStyle === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.elfStyle))), true);
  // 0x18: u32
  if (data?.elfVersion !== undefined) view.setUint32(24, Number(data.elfVersion), true);
  // 0x1c: u32
  if (data?.elfStyleSize !== undefined) view.setUint32(28, Number(data.elfStyleSize), true);
  // 0x20: u32
  if (data?.elfMatch !== undefined) view.setUint32(32, Number(data.elfMatch), true);
  // 0x24: u32
  if (data?.elfReserved !== undefined) view.setUint32(36, Number(data.elfReserved), true);
  // 0x28: pointer
  if (data?.elfVendorId !== undefined) view.setBigUint64(40, data.elfVendorId === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.elfVendorId))), true);
  // 0x30: u32
  if (data?.elfCulture !== undefined) view.setUint32(48, Number(data.elfCulture), true);
  // 0x34: pad4
  // 0x38: pointer
  if (data?.elfPanose !== undefined) view.setBigUint64(56, data.elfPanose === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.elfPanose))), true);
  return buf;
}

export class EXTLOGFONTAView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get elfLogFont(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(0, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x08: pointer
  get elfFullName(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x10: pointer
  get elfStyle(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(16, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x18: u32
  get elfVersion(): number {
    return this.view.getUint32(24, true);
  }

  // 0x1c: u32
  get elfStyleSize(): number {
    return this.view.getUint32(28, true);
  }

  // 0x20: u32
  get elfMatch(): number {
    return this.view.getUint32(32, true);
  }

  // 0x24: u32
  get elfReserved(): number {
    return this.view.getUint32(36, true);
  }

  // 0x28: pointer
  get elfVendorId(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(40, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x30: u32
  get elfCulture(): number {
    return this.view.getUint32(48, true);
  }

  // 0x34: pad4

  // 0x38: pointer
  get elfPanose(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(56, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: pointer
  set elfLogFont(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(0, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x08: pointer
  set elfFullName(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x10: pointer
  set elfStyle(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(16, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x18: u32
  set elfVersion(value: number) {
    this.view.setUint32(24, value, true);
  }

  // 0x1c: u32
  set elfStyleSize(value: number) {
    this.view.setUint32(28, value, true);
  }

  // 0x20: u32
  set elfMatch(value: number) {
    this.view.setUint32(32, value, true);
  }

  // 0x24: u32
  set elfReserved(value: number) {
    this.view.setUint32(36, value, true);
  }

  // 0x28: pointer
  set elfVendorId(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(40, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x30: u32
  set elfCulture(value: number) {
    this.view.setUint32(48, value, true);
  }

  // 0x34: pad4

  // 0x38: pointer
  set elfPanose(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(56, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.Graphics.Gdi.EXTLOGFONTW (size: 64)
 */
export interface EXTLOGFONTW {
  /** Windows.Win32.Graphics.Gdi.LOGFONTW */
  elfLogFont: Uint8Array | Deno.PointerValue;
  /** array */
  elfFullName: Deno.PointerValue;
  /** array */
  elfStyle: Deno.PointerValue;
  /** u32 */
  elfVersion: number;
  /** u32 */
  elfStyleSize: number;
  /** u32 */
  elfMatch: number;
  /** u32 */
  elfReserved: number;
  /** array */
  elfVendorId: Deno.PointerValue;
  /** u32 */
  elfCulture: number;
  /** Windows.Win32.Graphics.Gdi.PANOSE */
  elfPanose: Uint8Array | Deno.PointerValue;
}

export const sizeofEXTLOGFONTW = 64;

export function allocEXTLOGFONTW(data?: Partial<EXTLOGFONTW>): Uint8Array {
  const buf = new Uint8Array(sizeofEXTLOGFONTW);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.elfLogFont !== undefined) view.setBigUint64(0, data.elfLogFont === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.elfLogFont))), true);
  // 0x08: pointer
  if (data?.elfFullName !== undefined) view.setBigUint64(8, data.elfFullName === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.elfFullName))), true);
  // 0x10: pointer
  if (data?.elfStyle !== undefined) view.setBigUint64(16, data.elfStyle === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.elfStyle))), true);
  // 0x18: u32
  if (data?.elfVersion !== undefined) view.setUint32(24, Number(data.elfVersion), true);
  // 0x1c: u32
  if (data?.elfStyleSize !== undefined) view.setUint32(28, Number(data.elfStyleSize), true);
  // 0x20: u32
  if (data?.elfMatch !== undefined) view.setUint32(32, Number(data.elfMatch), true);
  // 0x24: u32
  if (data?.elfReserved !== undefined) view.setUint32(36, Number(data.elfReserved), true);
  // 0x28: pointer
  if (data?.elfVendorId !== undefined) view.setBigUint64(40, data.elfVendorId === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.elfVendorId))), true);
  // 0x30: u32
  if (data?.elfCulture !== undefined) view.setUint32(48, Number(data.elfCulture), true);
  // 0x34: pad4
  // 0x38: pointer
  if (data?.elfPanose !== undefined) view.setBigUint64(56, data.elfPanose === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.elfPanose))), true);
  return buf;
}

export class EXTLOGFONTWView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get elfLogFont(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(0, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x08: pointer
  get elfFullName(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x10: pointer
  get elfStyle(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(16, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x18: u32
  get elfVersion(): number {
    return this.view.getUint32(24, true);
  }

  // 0x1c: u32
  get elfStyleSize(): number {
    return this.view.getUint32(28, true);
  }

  // 0x20: u32
  get elfMatch(): number {
    return this.view.getUint32(32, true);
  }

  // 0x24: u32
  get elfReserved(): number {
    return this.view.getUint32(36, true);
  }

  // 0x28: pointer
  get elfVendorId(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(40, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x30: u32
  get elfCulture(): number {
    return this.view.getUint32(48, true);
  }

  // 0x34: pad4

  // 0x38: pointer
  get elfPanose(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(56, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: pointer
  set elfLogFont(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(0, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x08: pointer
  set elfFullName(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x10: pointer
  set elfStyle(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(16, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x18: u32
  set elfVersion(value: number) {
    this.view.setUint32(24, value, true);
  }

  // 0x1c: u32
  set elfStyleSize(value: number) {
    this.view.setUint32(28, value, true);
  }

  // 0x20: u32
  set elfMatch(value: number) {
    this.view.setUint32(32, value, true);
  }

  // 0x24: u32
  set elfReserved(value: number) {
    this.view.setUint32(36, value, true);
  }

  // 0x28: pointer
  set elfVendorId(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(40, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x30: u32
  set elfCulture(value: number) {
    this.view.setUint32(48, value, true);
  }

  // 0x34: pad4

  // 0x38: pointer
  set elfPanose(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(56, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

export type PWSTR = Deno.PointerValue | Uint8Array;

/**
 * _Anonymous1_e__Union (size: 64)
 */
export interface _Anonymous1_e__Union {
  /** usize */
  Data0: Deno.PointerValue;
  /** Windows.Win32.Foundation.PWSTR */
  String: string | null | Uint8Array | Uint16Array;
  /** usize */
  u: Deno.PointerValue;
  /** ptr */
  psid: Deno.PointerValue | Uint8Array;
  /** ptr */
  pguid: Deno.PointerValue | Uint8Array;
  /** u32 */
  LogonId_LowPart: number;
  /** ptr */
  pObjectTypes: Deno.PointerValue | Uint8Array;
  /** ptr */
  pIpAddress: Deno.PointerValue | Uint8Array;
}

export const sizeof_Anonymous1_e__Union = 64;

export function alloc_Anonymous1_e__Union(data?: Partial<_Anonymous1_e__Union>): Uint8Array {
  const buf = new Uint8Array(sizeof_Anonymous1_e__Union);
  const view = new DataView(buf.buffer);
  // 0x00: usize
  if (data?.Data0 !== undefined) view.setBigUint64(0, BigInt(data.Data0), true);
  // 0x08: buffer
  if (data?.String !== undefined) {
    (buf as any)._f8 = util.pwstrToFfi(data.String);
    view.setBigUint64(8, (buf as any)._f8 === null ? 0n : BigInt(Deno.UnsafePointer.value(Deno.UnsafePointer.of((buf as any)._f8))), true);
  }
  // 0x10: usize
  if (data?.u !== undefined) view.setBigUint64(16, BigInt(data.u), true);
  // 0x18: pointer
  if (data?.psid !== undefined) view.setBigUint64(24, data.psid === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.psid))), true);
  // 0x20: pointer
  if (data?.pguid !== undefined) view.setBigUint64(32, data.pguid === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.pguid))), true);
  // 0x28: u32
  if (data?.LogonId_LowPart !== undefined) view.setUint32(40, Number(data.LogonId_LowPart), true);
  // 0x2c: pad4
  // 0x30: pointer
  if (data?.pObjectTypes !== undefined) view.setBigUint64(48, data.pObjectTypes === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.pObjectTypes))), true);
  // 0x38: pointer
  if (data?.pIpAddress !== undefined) view.setBigUint64(56, data.pIpAddress === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.pIpAddress))), true);
  return buf;
}

export class _Anonymous1_e__UnionView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: usize
  get Data0(): Deno.PointerValue {
    return Number(this.view.getBigUint64(0, true));
  }

  // 0x08: buffer
  get String(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x10: usize
  get u(): Deno.PointerValue {
    return Number(this.view.getBigUint64(16, true));
  }

  // 0x18: pointer
  get psid(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(24, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x20: pointer
  get pguid(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(32, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x28: u32
  get LogonId_LowPart(): number {
    return this.view.getUint32(40, true);
  }

  // 0x2c: pad4

  // 0x30: pointer
  get pObjectTypes(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(48, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x38: pointer
  get pIpAddress(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(56, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: usize
  set Data0(value: Deno.PointerValue) {
    this.view.setBigUint64(0, BigInt(value), true);
  }

  // 0x08: buffer
  set String(value: Uint8Array | Deno.PointerValue) {
    (this.buf as any)._f8 = value;
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer((this.buf as any)._f8))), true);
  }

  // 0x10: usize
  set u(value: Deno.PointerValue) {
    this.view.setBigUint64(16, BigInt(value), true);
  }

  // 0x18: pointer
  set psid(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(24, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x20: pointer
  set pguid(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(32, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x28: u32
  set LogonId_LowPart(value: number) {
    this.view.setUint32(40, value, true);
  }

  // 0x2c: pad4

  // 0x30: pointer
  set pObjectTypes(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(48, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x38: pointer
  set pIpAddress(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(56, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * _Anonymous2_e__Union (size: 16)
 */
export interface _Anonymous2_e__Union {
  /** usize */
  Data1: Deno.PointerValue;
  /** i32 */
  LogonId_HighPart: number;
}

export const sizeof_Anonymous2_e__Union = 16;

export function alloc_Anonymous2_e__Union(data?: Partial<_Anonymous2_e__Union>): Uint8Array {
  const buf = new Uint8Array(sizeof_Anonymous2_e__Union);
  const view = new DataView(buf.buffer);
  // 0x00: usize
  if (data?.Data1 !== undefined) view.setBigUint64(0, BigInt(data.Data1), true);
  // 0x08: i32
  if (data?.LogonId_HighPart !== undefined) view.setInt32(8, Number(data.LogonId_HighPart), true);
  // 0x0c: pad4
  return buf;
}

export class _Anonymous2_e__UnionView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: usize
  get Data1(): Deno.PointerValue {
    return Number(this.view.getBigUint64(0, true));
  }

  // 0x08: i32
  get LogonId_HighPart(): number {
    return this.view.getInt32(8, true);
  }

  // 0x0c: pad4

  // 0x00: usize
  set Data1(value: Deno.PointerValue) {
    this.view.setBigUint64(0, BigInt(value), true);
  }

  // 0x08: i32
  set LogonId_HighPart(value: number) {
    this.view.setInt32(8, value, true);
  }

  // 0x0c: pad4
}

/**
 * Windows.Win32.Graphics.Gdi.DEVMODEA (size: 120)
 */
export interface DEVMODEA {
  /** array */
  dmDeviceName: Deno.PointerValue;
  /** u16 */
  dmSpecVersion: number;
  /** u16 */
  dmDriverVersion: number;
  /** u16 */
  dmSize: number;
  /** u16 */
  dmDriverExtra: number;
  /** Windows.Win32.Graphics.Gdi.DEVMODE_FIELD_FLAGS */
  dmFields: DEVMODE_FIELD_FLAGS;
  /** _Anonymous1_e__Union */
  Anonymous1: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.Graphics.Gdi.DEVMODE_COLOR */
  dmColor: DEVMODE_COLOR;
  /** i16 */
  dmDuplex: number;
  /** i16 */
  dmYResolution: number;
  /** Windows.Win32.Graphics.Gdi.DEVMODE_TRUETYPE_OPTION */
  dmTTOption: DEVMODE_TRUETYPE_OPTION;
  /** Windows.Win32.Graphics.Gdi.DEVMODE_COLLATE */
  dmCollate: DEVMODE_COLLATE;
  /** array */
  dmFormName: Deno.PointerValue;
  /** u16 */
  dmLogPixels: number;
  /** u32 */
  dmBitsPerPel: number;
  /** u32 */
  dmPelsWidth: number;
  /** u32 */
  dmPelsHeight: number;
  /** _Anonymous2_e__Union */
  Anonymous2: Uint8Array | Deno.PointerValue;
  /** u32 */
  dmDisplayFrequency: number;
  /** u32 */
  dmICMMethod: number;
  /** u32 */
  dmICMIntent: number;
  /** u32 */
  dmMediaType: number;
  /** u32 */
  dmDitherType: number;
  /** u32 */
  dmReserved1: number;
  /** u32 */
  dmReserved2: number;
  /** u32 */
  dmPanningWidth: number;
  /** u32 */
  dmPanningHeight: number;
}

export const sizeofDEVMODEA = 120;

export function allocDEVMODEA(data?: Partial<DEVMODEA>): Uint8Array {
  const buf = new Uint8Array(sizeofDEVMODEA);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.dmDeviceName !== undefined) view.setBigUint64(0, data.dmDeviceName === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.dmDeviceName))), true);
  // 0x08: u16
  if (data?.dmSpecVersion !== undefined) view.setUint16(8, Number(data.dmSpecVersion), true);
  // 0x0a: u16
  if (data?.dmDriverVersion !== undefined) view.setUint16(10, Number(data.dmDriverVersion), true);
  // 0x0c: u16
  if (data?.dmSize !== undefined) view.setUint16(12, Number(data.dmSize), true);
  // 0x0e: u16
  if (data?.dmDriverExtra !== undefined) view.setUint16(14, Number(data.dmDriverExtra), true);
  // 0x10: u32
  if (data?.dmFields !== undefined) view.setUint32(16, Number(data.dmFields), true);
  // 0x14: pad4
  // 0x18: pointer
  if (data?.Anonymous1 !== undefined) view.setBigUint64(24, data.Anonymous1 === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.Anonymous1))), true);
  // 0x20: u32
  if (data?.dmColor !== undefined) view.setUint32(32, Number(data.dmColor), true);
  // 0x24: i16
  if (data?.dmDuplex !== undefined) view.setInt16(36, Number(data.dmDuplex), true);
  // 0x26: i16
  if (data?.dmYResolution !== undefined) view.setInt16(38, Number(data.dmYResolution), true);
  // 0x28: u32
  if (data?.dmTTOption !== undefined) view.setUint32(40, Number(data.dmTTOption), true);
  // 0x2c: u32
  if (data?.dmCollate !== undefined) view.setUint32(44, Number(data.dmCollate), true);
  // 0x30: pointer
  if (data?.dmFormName !== undefined) view.setBigUint64(48, data.dmFormName === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.dmFormName))), true);
  // 0x38: u16
  if (data?.dmLogPixels !== undefined) view.setUint16(56, Number(data.dmLogPixels), true);
  // 0x3a: u32
  if (data?.dmBitsPerPel !== undefined) view.setUint32(58, Number(data.dmBitsPerPel), true);
  // 0x3e: u32
  if (data?.dmPelsWidth !== undefined) view.setUint32(62, Number(data.dmPelsWidth), true);
  // 0x42: u32
  if (data?.dmPelsHeight !== undefined) view.setUint32(66, Number(data.dmPelsHeight), true);
  // 0x46: pad2
  // 0x48: pointer
  if (data?.Anonymous2 !== undefined) view.setBigUint64(72, data.Anonymous2 === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.Anonymous2))), true);
  // 0x50: u32
  if (data?.dmDisplayFrequency !== undefined) view.setUint32(80, Number(data.dmDisplayFrequency), true);
  // 0x54: u32
  if (data?.dmICMMethod !== undefined) view.setUint32(84, Number(data.dmICMMethod), true);
  // 0x58: u32
  if (data?.dmICMIntent !== undefined) view.setUint32(88, Number(data.dmICMIntent), true);
  // 0x5c: u32
  if (data?.dmMediaType !== undefined) view.setUint32(92, Number(data.dmMediaType), true);
  // 0x60: u32
  if (data?.dmDitherType !== undefined) view.setUint32(96, Number(data.dmDitherType), true);
  // 0x64: u32
  if (data?.dmReserved1 !== undefined) view.setUint32(100, Number(data.dmReserved1), true);
  // 0x68: u32
  if (data?.dmReserved2 !== undefined) view.setUint32(104, Number(data.dmReserved2), true);
  // 0x6c: u32
  if (data?.dmPanningWidth !== undefined) view.setUint32(108, Number(data.dmPanningWidth), true);
  // 0x70: u32
  if (data?.dmPanningHeight !== undefined) view.setUint32(112, Number(data.dmPanningHeight), true);
  // 0x74: pad4
  return buf;
}

export class DEVMODEAView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get dmDeviceName(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(0, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x08: u16
  get dmSpecVersion(): number {
    return this.view.getUint16(8, true);
  }

  // 0x0a: u16
  get dmDriverVersion(): number {
    return this.view.getUint16(10, true);
  }

  // 0x0c: u16
  get dmSize(): number {
    return this.view.getUint16(12, true);
  }

  // 0x0e: u16
  get dmDriverExtra(): number {
    return this.view.getUint16(14, true);
  }

  // 0x10: u32
  get dmFields(): number {
    return this.view.getUint32(16, true);
  }

  // 0x14: pad4

  // 0x18: pointer
  get Anonymous1(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(24, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x20: u32
  get dmColor(): number {
    return this.view.getUint32(32, true);
  }

  // 0x24: i16
  get dmDuplex(): number {
    return this.view.getInt16(36, true);
  }

  // 0x26: i16
  get dmYResolution(): number {
    return this.view.getInt16(38, true);
  }

  // 0x28: u32
  get dmTTOption(): number {
    return this.view.getUint32(40, true);
  }

  // 0x2c: u32
  get dmCollate(): number {
    return this.view.getUint32(44, true);
  }

  // 0x30: pointer
  get dmFormName(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(48, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x38: u16
  get dmLogPixels(): number {
    return this.view.getUint16(56, true);
  }

  // 0x3a: u32
  get dmBitsPerPel(): number {
    return this.view.getUint32(58, true);
  }

  // 0x3e: u32
  get dmPelsWidth(): number {
    return this.view.getUint32(62, true);
  }

  // 0x42: u32
  get dmPelsHeight(): number {
    return this.view.getUint32(66, true);
  }

  // 0x46: pad2

  // 0x48: pointer
  get Anonymous2(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(72, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x50: u32
  get dmDisplayFrequency(): number {
    return this.view.getUint32(80, true);
  }

  // 0x54: u32
  get dmICMMethod(): number {
    return this.view.getUint32(84, true);
  }

  // 0x58: u32
  get dmICMIntent(): number {
    return this.view.getUint32(88, true);
  }

  // 0x5c: u32
  get dmMediaType(): number {
    return this.view.getUint32(92, true);
  }

  // 0x60: u32
  get dmDitherType(): number {
    return this.view.getUint32(96, true);
  }

  // 0x64: u32
  get dmReserved1(): number {
    return this.view.getUint32(100, true);
  }

  // 0x68: u32
  get dmReserved2(): number {
    return this.view.getUint32(104, true);
  }

  // 0x6c: u32
  get dmPanningWidth(): number {
    return this.view.getUint32(108, true);
  }

  // 0x70: u32
  get dmPanningHeight(): number {
    return this.view.getUint32(112, true);
  }

  // 0x74: pad4

  // 0x00: pointer
  set dmDeviceName(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(0, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x08: u16
  set dmSpecVersion(value: number) {
    this.view.setUint16(8, value, true);
  }

  // 0x0a: u16
  set dmDriverVersion(value: number) {
    this.view.setUint16(10, value, true);
  }

  // 0x0c: u16
  set dmSize(value: number) {
    this.view.setUint16(12, value, true);
  }

  // 0x0e: u16
  set dmDriverExtra(value: number) {
    this.view.setUint16(14, value, true);
  }

  // 0x10: u32
  set dmFields(value: number) {
    this.view.setUint32(16, value, true);
  }

  // 0x14: pad4

  // 0x18: pointer
  set Anonymous1(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(24, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x20: u32
  set dmColor(value: number) {
    this.view.setUint32(32, value, true);
  }

  // 0x24: i16
  set dmDuplex(value: number) {
    this.view.setInt16(36, value, true);
  }

  // 0x26: i16
  set dmYResolution(value: number) {
    this.view.setInt16(38, value, true);
  }

  // 0x28: u32
  set dmTTOption(value: number) {
    this.view.setUint32(40, value, true);
  }

  // 0x2c: u32
  set dmCollate(value: number) {
    this.view.setUint32(44, value, true);
  }

  // 0x30: pointer
  set dmFormName(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(48, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x38: u16
  set dmLogPixels(value: number) {
    this.view.setUint16(56, value, true);
  }

  // 0x3a: u32
  set dmBitsPerPel(value: number) {
    this.view.setUint32(58, value, true);
  }

  // 0x3e: u32
  set dmPelsWidth(value: number) {
    this.view.setUint32(62, value, true);
  }

  // 0x42: u32
  set dmPelsHeight(value: number) {
    this.view.setUint32(66, value, true);
  }

  // 0x46: pad2

  // 0x48: pointer
  set Anonymous2(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(72, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x50: u32
  set dmDisplayFrequency(value: number) {
    this.view.setUint32(80, value, true);
  }

  // 0x54: u32
  set dmICMMethod(value: number) {
    this.view.setUint32(84, value, true);
  }

  // 0x58: u32
  set dmICMIntent(value: number) {
    this.view.setUint32(88, value, true);
  }

  // 0x5c: u32
  set dmMediaType(value: number) {
    this.view.setUint32(92, value, true);
  }

  // 0x60: u32
  set dmDitherType(value: number) {
    this.view.setUint32(96, value, true);
  }

  // 0x64: u32
  set dmReserved1(value: number) {
    this.view.setUint32(100, value, true);
  }

  // 0x68: u32
  set dmReserved2(value: number) {
    this.view.setUint32(104, value, true);
  }

  // 0x6c: u32
  set dmPanningWidth(value: number) {
    this.view.setUint32(108, value, true);
  }

  // 0x70: u32
  set dmPanningHeight(value: number) {
    this.view.setUint32(112, value, true);
  }

  // 0x74: pad4
}

/**
 * Windows.Win32.Graphics.Gdi.DEVMODEW (size: 120)
 */
export interface DEVMODEW {
  /** array */
  dmDeviceName: Deno.PointerValue;
  /** u16 */
  dmSpecVersion: number;
  /** u16 */
  dmDriverVersion: number;
  /** u16 */
  dmSize: number;
  /** u16 */
  dmDriverExtra: number;
  /** Windows.Win32.Graphics.Gdi.DEVMODE_FIELD_FLAGS */
  dmFields: DEVMODE_FIELD_FLAGS;
  /** _Anonymous1_e__Union */
  Anonymous1: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.Graphics.Gdi.DEVMODE_COLOR */
  dmColor: DEVMODE_COLOR;
  /** i16 */
  dmDuplex: number;
  /** i16 */
  dmYResolution: number;
  /** Windows.Win32.Graphics.Gdi.DEVMODE_TRUETYPE_OPTION */
  dmTTOption: DEVMODE_TRUETYPE_OPTION;
  /** Windows.Win32.Graphics.Gdi.DEVMODE_COLLATE */
  dmCollate: DEVMODE_COLLATE;
  /** array */
  dmFormName: Deno.PointerValue;
  /** u16 */
  dmLogPixels: number;
  /** u32 */
  dmBitsPerPel: number;
  /** u32 */
  dmPelsWidth: number;
  /** u32 */
  dmPelsHeight: number;
  /** _Anonymous2_e__Union */
  Anonymous2: Uint8Array | Deno.PointerValue;
  /** u32 */
  dmDisplayFrequency: number;
  /** u32 */
  dmICMMethod: number;
  /** u32 */
  dmICMIntent: number;
  /** u32 */
  dmMediaType: number;
  /** u32 */
  dmDitherType: number;
  /** u32 */
  dmReserved1: number;
  /** u32 */
  dmReserved2: number;
  /** u32 */
  dmPanningWidth: number;
  /** u32 */
  dmPanningHeight: number;
}

export const sizeofDEVMODEW = 120;

export function allocDEVMODEW(data?: Partial<DEVMODEW>): Uint8Array {
  const buf = new Uint8Array(sizeofDEVMODEW);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.dmDeviceName !== undefined) view.setBigUint64(0, data.dmDeviceName === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.dmDeviceName))), true);
  // 0x08: u16
  if (data?.dmSpecVersion !== undefined) view.setUint16(8, Number(data.dmSpecVersion), true);
  // 0x0a: u16
  if (data?.dmDriverVersion !== undefined) view.setUint16(10, Number(data.dmDriverVersion), true);
  // 0x0c: u16
  if (data?.dmSize !== undefined) view.setUint16(12, Number(data.dmSize), true);
  // 0x0e: u16
  if (data?.dmDriverExtra !== undefined) view.setUint16(14, Number(data.dmDriverExtra), true);
  // 0x10: u32
  if (data?.dmFields !== undefined) view.setUint32(16, Number(data.dmFields), true);
  // 0x14: pad4
  // 0x18: pointer
  if (data?.Anonymous1 !== undefined) view.setBigUint64(24, data.Anonymous1 === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.Anonymous1))), true);
  // 0x20: u32
  if (data?.dmColor !== undefined) view.setUint32(32, Number(data.dmColor), true);
  // 0x24: i16
  if (data?.dmDuplex !== undefined) view.setInt16(36, Number(data.dmDuplex), true);
  // 0x26: i16
  if (data?.dmYResolution !== undefined) view.setInt16(38, Number(data.dmYResolution), true);
  // 0x28: u32
  if (data?.dmTTOption !== undefined) view.setUint32(40, Number(data.dmTTOption), true);
  // 0x2c: u32
  if (data?.dmCollate !== undefined) view.setUint32(44, Number(data.dmCollate), true);
  // 0x30: pointer
  if (data?.dmFormName !== undefined) view.setBigUint64(48, data.dmFormName === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.dmFormName))), true);
  // 0x38: u16
  if (data?.dmLogPixels !== undefined) view.setUint16(56, Number(data.dmLogPixels), true);
  // 0x3a: u32
  if (data?.dmBitsPerPel !== undefined) view.setUint32(58, Number(data.dmBitsPerPel), true);
  // 0x3e: u32
  if (data?.dmPelsWidth !== undefined) view.setUint32(62, Number(data.dmPelsWidth), true);
  // 0x42: u32
  if (data?.dmPelsHeight !== undefined) view.setUint32(66, Number(data.dmPelsHeight), true);
  // 0x46: pad2
  // 0x48: pointer
  if (data?.Anonymous2 !== undefined) view.setBigUint64(72, data.Anonymous2 === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.Anonymous2))), true);
  // 0x50: u32
  if (data?.dmDisplayFrequency !== undefined) view.setUint32(80, Number(data.dmDisplayFrequency), true);
  // 0x54: u32
  if (data?.dmICMMethod !== undefined) view.setUint32(84, Number(data.dmICMMethod), true);
  // 0x58: u32
  if (data?.dmICMIntent !== undefined) view.setUint32(88, Number(data.dmICMIntent), true);
  // 0x5c: u32
  if (data?.dmMediaType !== undefined) view.setUint32(92, Number(data.dmMediaType), true);
  // 0x60: u32
  if (data?.dmDitherType !== undefined) view.setUint32(96, Number(data.dmDitherType), true);
  // 0x64: u32
  if (data?.dmReserved1 !== undefined) view.setUint32(100, Number(data.dmReserved1), true);
  // 0x68: u32
  if (data?.dmReserved2 !== undefined) view.setUint32(104, Number(data.dmReserved2), true);
  // 0x6c: u32
  if (data?.dmPanningWidth !== undefined) view.setUint32(108, Number(data.dmPanningWidth), true);
  // 0x70: u32
  if (data?.dmPanningHeight !== undefined) view.setUint32(112, Number(data.dmPanningHeight), true);
  // 0x74: pad4
  return buf;
}

export class DEVMODEWView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get dmDeviceName(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(0, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x08: u16
  get dmSpecVersion(): number {
    return this.view.getUint16(8, true);
  }

  // 0x0a: u16
  get dmDriverVersion(): number {
    return this.view.getUint16(10, true);
  }

  // 0x0c: u16
  get dmSize(): number {
    return this.view.getUint16(12, true);
  }

  // 0x0e: u16
  get dmDriverExtra(): number {
    return this.view.getUint16(14, true);
  }

  // 0x10: u32
  get dmFields(): number {
    return this.view.getUint32(16, true);
  }

  // 0x14: pad4

  // 0x18: pointer
  get Anonymous1(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(24, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x20: u32
  get dmColor(): number {
    return this.view.getUint32(32, true);
  }

  // 0x24: i16
  get dmDuplex(): number {
    return this.view.getInt16(36, true);
  }

  // 0x26: i16
  get dmYResolution(): number {
    return this.view.getInt16(38, true);
  }

  // 0x28: u32
  get dmTTOption(): number {
    return this.view.getUint32(40, true);
  }

  // 0x2c: u32
  get dmCollate(): number {
    return this.view.getUint32(44, true);
  }

  // 0x30: pointer
  get dmFormName(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(48, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x38: u16
  get dmLogPixels(): number {
    return this.view.getUint16(56, true);
  }

  // 0x3a: u32
  get dmBitsPerPel(): number {
    return this.view.getUint32(58, true);
  }

  // 0x3e: u32
  get dmPelsWidth(): number {
    return this.view.getUint32(62, true);
  }

  // 0x42: u32
  get dmPelsHeight(): number {
    return this.view.getUint32(66, true);
  }

  // 0x46: pad2

  // 0x48: pointer
  get Anonymous2(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(72, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x50: u32
  get dmDisplayFrequency(): number {
    return this.view.getUint32(80, true);
  }

  // 0x54: u32
  get dmICMMethod(): number {
    return this.view.getUint32(84, true);
  }

  // 0x58: u32
  get dmICMIntent(): number {
    return this.view.getUint32(88, true);
  }

  // 0x5c: u32
  get dmMediaType(): number {
    return this.view.getUint32(92, true);
  }

  // 0x60: u32
  get dmDitherType(): number {
    return this.view.getUint32(96, true);
  }

  // 0x64: u32
  get dmReserved1(): number {
    return this.view.getUint32(100, true);
  }

  // 0x68: u32
  get dmReserved2(): number {
    return this.view.getUint32(104, true);
  }

  // 0x6c: u32
  get dmPanningWidth(): number {
    return this.view.getUint32(108, true);
  }

  // 0x70: u32
  get dmPanningHeight(): number {
    return this.view.getUint32(112, true);
  }

  // 0x74: pad4

  // 0x00: pointer
  set dmDeviceName(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(0, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x08: u16
  set dmSpecVersion(value: number) {
    this.view.setUint16(8, value, true);
  }

  // 0x0a: u16
  set dmDriverVersion(value: number) {
    this.view.setUint16(10, value, true);
  }

  // 0x0c: u16
  set dmSize(value: number) {
    this.view.setUint16(12, value, true);
  }

  // 0x0e: u16
  set dmDriverExtra(value: number) {
    this.view.setUint16(14, value, true);
  }

  // 0x10: u32
  set dmFields(value: number) {
    this.view.setUint32(16, value, true);
  }

  // 0x14: pad4

  // 0x18: pointer
  set Anonymous1(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(24, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x20: u32
  set dmColor(value: number) {
    this.view.setUint32(32, value, true);
  }

  // 0x24: i16
  set dmDuplex(value: number) {
    this.view.setInt16(36, value, true);
  }

  // 0x26: i16
  set dmYResolution(value: number) {
    this.view.setInt16(38, value, true);
  }

  // 0x28: u32
  set dmTTOption(value: number) {
    this.view.setUint32(40, value, true);
  }

  // 0x2c: u32
  set dmCollate(value: number) {
    this.view.setUint32(44, value, true);
  }

  // 0x30: pointer
  set dmFormName(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(48, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x38: u16
  set dmLogPixels(value: number) {
    this.view.setUint16(56, value, true);
  }

  // 0x3a: u32
  set dmBitsPerPel(value: number) {
    this.view.setUint32(58, value, true);
  }

  // 0x3e: u32
  set dmPelsWidth(value: number) {
    this.view.setUint32(62, value, true);
  }

  // 0x42: u32
  set dmPelsHeight(value: number) {
    this.view.setUint32(66, value, true);
  }

  // 0x46: pad2

  // 0x48: pointer
  set Anonymous2(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(72, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x50: u32
  set dmDisplayFrequency(value: number) {
    this.view.setUint32(80, value, true);
  }

  // 0x54: u32
  set dmICMMethod(value: number) {
    this.view.setUint32(84, value, true);
  }

  // 0x58: u32
  set dmICMIntent(value: number) {
    this.view.setUint32(88, value, true);
  }

  // 0x5c: u32
  set dmMediaType(value: number) {
    this.view.setUint32(92, value, true);
  }

  // 0x60: u32
  set dmDitherType(value: number) {
    this.view.setUint32(96, value, true);
  }

  // 0x64: u32
  set dmReserved1(value: number) {
    this.view.setUint32(100, value, true);
  }

  // 0x68: u32
  set dmReserved2(value: number) {
    this.view.setUint32(104, value, true);
  }

  // 0x6c: u32
  set dmPanningWidth(value: number) {
    this.view.setUint32(108, value, true);
  }

  // 0x70: u32
  set dmPanningHeight(value: number) {
    this.view.setUint32(112, value, true);
  }

  // 0x74: pad4
}

/**
 * Windows.Win32.Graphics.Gdi.DISPLAY_DEVICEA (size: 48)
 */
export interface DISPLAY_DEVICEA {
  /** u32 */
  cb: number;
  /** array */
  DeviceName: Deno.PointerValue;
  /** array */
  DeviceString: Deno.PointerValue;
  /** u32 */
  StateFlags: number;
  /** array */
  DeviceID: Deno.PointerValue;
  /** array */
  DeviceKey: Deno.PointerValue;
}

export const sizeofDISPLAY_DEVICEA = 48;

export function allocDISPLAY_DEVICEA(data?: Partial<DISPLAY_DEVICEA>): Uint8Array {
  const buf = new Uint8Array(sizeofDISPLAY_DEVICEA);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.cb !== undefined) view.setUint32(0, Number(data.cb), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.DeviceName !== undefined) view.setBigUint64(8, data.DeviceName === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.DeviceName))), true);
  // 0x10: pointer
  if (data?.DeviceString !== undefined) view.setBigUint64(16, data.DeviceString === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.DeviceString))), true);
  // 0x18: u32
  if (data?.StateFlags !== undefined) view.setUint32(24, Number(data.StateFlags), true);
  // 0x1c: pad4
  // 0x20: pointer
  if (data?.DeviceID !== undefined) view.setBigUint64(32, data.DeviceID === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.DeviceID))), true);
  // 0x28: pointer
  if (data?.DeviceKey !== undefined) view.setBigUint64(40, data.DeviceKey === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.DeviceKey))), true);
  return buf;
}

export class DISPLAY_DEVICEAView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get cb(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  get DeviceName(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x10: pointer
  get DeviceString(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(16, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x18: u32
  get StateFlags(): number {
    return this.view.getUint32(24, true);
  }

  // 0x1c: pad4

  // 0x20: pointer
  get DeviceID(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(32, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x28: pointer
  get DeviceKey(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(40, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: u32
  set cb(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  set DeviceName(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x10: pointer
  set DeviceString(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(16, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x18: u32
  set StateFlags(value: number) {
    this.view.setUint32(24, value, true);
  }

  // 0x1c: pad4

  // 0x20: pointer
  set DeviceID(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(32, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x28: pointer
  set DeviceKey(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(40, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.Graphics.Gdi.DISPLAY_DEVICEW (size: 48)
 */
export interface DISPLAY_DEVICEW {
  /** u32 */
  cb: number;
  /** array */
  DeviceName: Deno.PointerValue;
  /** array */
  DeviceString: Deno.PointerValue;
  /** u32 */
  StateFlags: number;
  /** array */
  DeviceID: Deno.PointerValue;
  /** array */
  DeviceKey: Deno.PointerValue;
}

export const sizeofDISPLAY_DEVICEW = 48;

export function allocDISPLAY_DEVICEW(data?: Partial<DISPLAY_DEVICEW>): Uint8Array {
  const buf = new Uint8Array(sizeofDISPLAY_DEVICEW);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.cb !== undefined) view.setUint32(0, Number(data.cb), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.DeviceName !== undefined) view.setBigUint64(8, data.DeviceName === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.DeviceName))), true);
  // 0x10: pointer
  if (data?.DeviceString !== undefined) view.setBigUint64(16, data.DeviceString === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.DeviceString))), true);
  // 0x18: u32
  if (data?.StateFlags !== undefined) view.setUint32(24, Number(data.StateFlags), true);
  // 0x1c: pad4
  // 0x20: pointer
  if (data?.DeviceID !== undefined) view.setBigUint64(32, data.DeviceID === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.DeviceID))), true);
  // 0x28: pointer
  if (data?.DeviceKey !== undefined) view.setBigUint64(40, data.DeviceKey === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.DeviceKey))), true);
  return buf;
}

export class DISPLAY_DEVICEWView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get cb(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  get DeviceName(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x10: pointer
  get DeviceString(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(16, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x18: u32
  get StateFlags(): number {
    return this.view.getUint32(24, true);
  }

  // 0x1c: pad4

  // 0x20: pointer
  get DeviceID(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(32, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x28: pointer
  get DeviceKey(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(40, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: u32
  set cb(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  set DeviceName(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x10: pointer
  set DeviceString(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(16, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x18: u32
  set StateFlags(value: number) {
    this.view.setUint32(24, value, true);
  }

  // 0x1c: pad4

  // 0x20: pointer
  set DeviceID(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(32, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x28: pointer
  set DeviceKey(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(40, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.Graphics.Gdi.RGNDATAHEADER (size: 24)
 */
export interface RGNDATAHEADER {
  /** u32 */
  dwSize: number;
  /** u32 */
  iType: number;
  /** u32 */
  nCount: number;
  /** u32 */
  nRgnSize: number;
  /** Windows.Win32.Foundation.RECT */
  rcBound: Uint8Array | Deno.PointerValue;
}

export const sizeofRGNDATAHEADER = 24;

export function allocRGNDATAHEADER(data?: Partial<RGNDATAHEADER>): Uint8Array {
  const buf = new Uint8Array(sizeofRGNDATAHEADER);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.dwSize !== undefined) view.setUint32(0, Number(data.dwSize), true);
  // 0x04: u32
  if (data?.iType !== undefined) view.setUint32(4, Number(data.iType), true);
  // 0x08: u32
  if (data?.nCount !== undefined) view.setUint32(8, Number(data.nCount), true);
  // 0x0c: u32
  if (data?.nRgnSize !== undefined) view.setUint32(12, Number(data.nRgnSize), true);
  // 0x10: pointer
  if (data?.rcBound !== undefined) view.setBigUint64(16, data.rcBound === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.rcBound))), true);
  return buf;
}

export class RGNDATAHEADERView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get dwSize(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: u32
  get iType(): number {
    return this.view.getUint32(4, true);
  }

  // 0x08: u32
  get nCount(): number {
    return this.view.getUint32(8, true);
  }

  // 0x0c: u32
  get nRgnSize(): number {
    return this.view.getUint32(12, true);
  }

  // 0x10: pointer
  get rcBound(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(16, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: u32
  set dwSize(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: u32
  set iType(value: number) {
    this.view.setUint32(4, value, true);
  }

  // 0x08: u32
  set nCount(value: number) {
    this.view.setUint32(8, value, true);
  }

  // 0x0c: u32
  set nRgnSize(value: number) {
    this.view.setUint32(12, value, true);
  }

  // 0x10: pointer
  set rcBound(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(16, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.Graphics.Gdi.RGNDATA (size: 16)
 */
export interface RGNDATA {
  /** Windows.Win32.Graphics.Gdi.RGNDATAHEADER */
  rdh: Uint8Array | Deno.PointerValue;
  /** array */
  Buffer: Deno.PointerValue;
}

export const sizeofRGNDATA = 16;

export function allocRGNDATA(data?: Partial<RGNDATA>): Uint8Array {
  const buf = new Uint8Array(sizeofRGNDATA);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.rdh !== undefined) view.setBigUint64(0, data.rdh === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.rdh))), true);
  // 0x08: pointer
  if (data?.Buffer !== undefined) view.setBigUint64(8, data.Buffer === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.Buffer))), true);
  return buf;
}

export class RGNDATAView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get rdh(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(0, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x08: pointer
  get Buffer(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: pointer
  set rdh(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(0, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x08: pointer
  set Buffer(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.Graphics.Gdi.ABC (size: 16)
 */
export interface ABC {
  /** i32 */
  abcA: number;
  /** u32 */
  abcB: number;
  /** i32 */
  abcC: number;
}

export const sizeofABC = 16;

export function allocABC(data?: Partial<ABC>): Uint8Array {
  const buf = new Uint8Array(sizeofABC);
  const view = new DataView(buf.buffer);
  // 0x00: i32
  if (data?.abcA !== undefined) view.setInt32(0, Number(data.abcA), true);
  // 0x04: u32
  if (data?.abcB !== undefined) view.setUint32(4, Number(data.abcB), true);
  // 0x08: i32
  if (data?.abcC !== undefined) view.setInt32(8, Number(data.abcC), true);
  // 0x0c: pad4
  return buf;
}

export class ABCView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: i32
  get abcA(): number {
    return this.view.getInt32(0, true);
  }

  // 0x04: u32
  get abcB(): number {
    return this.view.getUint32(4, true);
  }

  // 0x08: i32
  get abcC(): number {
    return this.view.getInt32(8, true);
  }

  // 0x0c: pad4

  // 0x00: i32
  set abcA(value: number) {
    this.view.setInt32(0, value, true);
  }

  // 0x04: u32
  set abcB(value: number) {
    this.view.setUint32(4, value, true);
  }

  // 0x08: i32
  set abcC(value: number) {
    this.view.setInt32(8, value, true);
  }

  // 0x0c: pad4
}

/**
 * Windows.Win32.Graphics.Gdi.ABCFLOAT (size: 16)
 */
export interface ABCFLOAT {
  /** f32 */
  abcfA: number;
  /** f32 */
  abcfB: number;
  /** f32 */
  abcfC: number;
}

export const sizeofABCFLOAT = 16;

export function allocABCFLOAT(data?: Partial<ABCFLOAT>): Uint8Array {
  const buf = new Uint8Array(sizeofABCFLOAT);
  const view = new DataView(buf.buffer);
  // 0x00: f32
  if (data?.abcfA !== undefined) view.setFloat32(0, Number(data.abcfA), true);
  // 0x04: f32
  if (data?.abcfB !== undefined) view.setFloat32(4, Number(data.abcfB), true);
  // 0x08: f32
  if (data?.abcfC !== undefined) view.setFloat32(8, Number(data.abcfC), true);
  // 0x0c: pad4
  return buf;
}

export class ABCFLOATView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: f32
  get abcfA(): number {
    return this.view.getFloat32(0, true);
  }

  // 0x04: f32
  get abcfB(): number {
    return this.view.getFloat32(4, true);
  }

  // 0x08: f32
  get abcfC(): number {
    return this.view.getFloat32(8, true);
  }

  // 0x0c: pad4

  // 0x00: f32
  set abcfA(value: number) {
    this.view.setFloat32(0, value, true);
  }

  // 0x04: f32
  set abcfB(value: number) {
    this.view.setFloat32(4, value, true);
  }

  // 0x08: f32
  set abcfC(value: number) {
    this.view.setFloat32(8, value, true);
  }

  // 0x0c: pad4
}

export type PSTR = Deno.PointerValue | Uint8Array;

/**
 * Windows.Win32.Graphics.Gdi.OUTLINETEXTMETRICA (size: 184)
 */
export interface OUTLINETEXTMETRICA {
  /** u32 */
  otmSize: number;
  /** Windows.Win32.Graphics.Gdi.TEXTMETRICA */
  otmTextMetrics: Uint8Array | Deno.PointerValue;
  /** u8 */
  otmFiller: number;
  /** Windows.Win32.Graphics.Gdi.PANOSE */
  otmPanoseNumber: Uint8Array | Deno.PointerValue;
  /** u32 */
  otmfsSelection: number;
  /** u32 */
  otmfsType: number;
  /** i32 */
  otmsCharSlopeRise: number;
  /** i32 */
  otmsCharSlopeRun: number;
  /** i32 */
  otmItalicAngle: number;
  /** u32 */
  otmEMSquare: number;
  /** i32 */
  otmAscent: number;
  /** i32 */
  otmDescent: number;
  /** u32 */
  otmLineGap: number;
  /** u32 */
  otmsCapEmHeight: number;
  /** u32 */
  otmsXHeight: number;
  /** Windows.Win32.Foundation.RECT */
  otmrcFontBox: Uint8Array | Deno.PointerValue;
  /** i32 */
  otmMacAscent: number;
  /** i32 */
  otmMacDescent: number;
  /** u32 */
  otmMacLineGap: number;
  /** u32 */
  otmusMinimumPPEM: number;
  /** Windows.Win32.Foundation.POINT */
  otmptSubscriptSize: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.Foundation.POINT */
  otmptSubscriptOffset: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.Foundation.POINT */
  otmptSuperscriptSize: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.Foundation.POINT */
  otmptSuperscriptOffset: Uint8Array | Deno.PointerValue;
  /** u32 */
  otmsStrikeoutSize: number;
  /** i32 */
  otmsStrikeoutPosition: number;
  /** i32 */
  otmsUnderscoreSize: number;
  /** i32 */
  otmsUnderscorePosition: number;
  /** Windows.Win32.Foundation.PSTR */
  otmpFamilyName: string | null | Uint8Array;
  /** Windows.Win32.Foundation.PSTR */
  otmpFaceName: string | null | Uint8Array;
  /** Windows.Win32.Foundation.PSTR */
  otmpStyleName: string | null | Uint8Array;
  /** Windows.Win32.Foundation.PSTR */
  otmpFullName: string | null | Uint8Array;
}

export const sizeofOUTLINETEXTMETRICA = 184;

export function allocOUTLINETEXTMETRICA(data?: Partial<OUTLINETEXTMETRICA>): Uint8Array {
  const buf = new Uint8Array(sizeofOUTLINETEXTMETRICA);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.otmSize !== undefined) view.setUint32(0, Number(data.otmSize), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.otmTextMetrics !== undefined) view.setBigUint64(8, data.otmTextMetrics === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.otmTextMetrics))), true);
  // 0x10: u8
  if (data?.otmFiller !== undefined) view.setUint8(16, Number(data.otmFiller));
  // 0x11: pad7
  // 0x18: pointer
  if (data?.otmPanoseNumber !== undefined) view.setBigUint64(24, data.otmPanoseNumber === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.otmPanoseNumber))), true);
  // 0x20: u32
  if (data?.otmfsSelection !== undefined) view.setUint32(32, Number(data.otmfsSelection), true);
  // 0x24: u32
  if (data?.otmfsType !== undefined) view.setUint32(36, Number(data.otmfsType), true);
  // 0x28: i32
  if (data?.otmsCharSlopeRise !== undefined) view.setInt32(40, Number(data.otmsCharSlopeRise), true);
  // 0x2c: i32
  if (data?.otmsCharSlopeRun !== undefined) view.setInt32(44, Number(data.otmsCharSlopeRun), true);
  // 0x30: i32
  if (data?.otmItalicAngle !== undefined) view.setInt32(48, Number(data.otmItalicAngle), true);
  // 0x34: u32
  if (data?.otmEMSquare !== undefined) view.setUint32(52, Number(data.otmEMSquare), true);
  // 0x38: i32
  if (data?.otmAscent !== undefined) view.setInt32(56, Number(data.otmAscent), true);
  // 0x3c: i32
  if (data?.otmDescent !== undefined) view.setInt32(60, Number(data.otmDescent), true);
  // 0x40: u32
  if (data?.otmLineGap !== undefined) view.setUint32(64, Number(data.otmLineGap), true);
  // 0x44: u32
  if (data?.otmsCapEmHeight !== undefined) view.setUint32(68, Number(data.otmsCapEmHeight), true);
  // 0x48: u32
  if (data?.otmsXHeight !== undefined) view.setUint32(72, Number(data.otmsXHeight), true);
  // 0x4c: pad4
  // 0x50: pointer
  if (data?.otmrcFontBox !== undefined) view.setBigUint64(80, data.otmrcFontBox === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.otmrcFontBox))), true);
  // 0x58: i32
  if (data?.otmMacAscent !== undefined) view.setInt32(88, Number(data.otmMacAscent), true);
  // 0x5c: i32
  if (data?.otmMacDescent !== undefined) view.setInt32(92, Number(data.otmMacDescent), true);
  // 0x60: u32
  if (data?.otmMacLineGap !== undefined) view.setUint32(96, Number(data.otmMacLineGap), true);
  // 0x64: u32
  if (data?.otmusMinimumPPEM !== undefined) view.setUint32(100, Number(data.otmusMinimumPPEM), true);
  // 0x68: pointer
  if (data?.otmptSubscriptSize !== undefined) view.setBigUint64(104, data.otmptSubscriptSize === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.otmptSubscriptSize))), true);
  // 0x70: pointer
  if (data?.otmptSubscriptOffset !== undefined) view.setBigUint64(112, data.otmptSubscriptOffset === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.otmptSubscriptOffset))), true);
  // 0x78: pointer
  if (data?.otmptSuperscriptSize !== undefined) view.setBigUint64(120, data.otmptSuperscriptSize === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.otmptSuperscriptSize))), true);
  // 0x80: pointer
  if (data?.otmptSuperscriptOffset !== undefined) view.setBigUint64(128, data.otmptSuperscriptOffset === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.otmptSuperscriptOffset))), true);
  // 0x88: u32
  if (data?.otmsStrikeoutSize !== undefined) view.setUint32(136, Number(data.otmsStrikeoutSize), true);
  // 0x8c: i32
  if (data?.otmsStrikeoutPosition !== undefined) view.setInt32(140, Number(data.otmsStrikeoutPosition), true);
  // 0x90: i32
  if (data?.otmsUnderscoreSize !== undefined) view.setInt32(144, Number(data.otmsUnderscoreSize), true);
  // 0x94: i32
  if (data?.otmsUnderscorePosition !== undefined) view.setInt32(148, Number(data.otmsUnderscorePosition), true);
  // 0x98: buffer
  if (data?.otmpFamilyName !== undefined) {
    (buf as any)._f152 = util.pstrToFfi(data.otmpFamilyName);
    view.setBigUint64(152, (buf as any)._f152 === null ? 0n : BigInt(Deno.UnsafePointer.value(Deno.UnsafePointer.of((buf as any)._f152))), true);
  }
  // 0xa0: buffer
  if (data?.otmpFaceName !== undefined) {
    (buf as any)._f160 = util.pstrToFfi(data.otmpFaceName);
    view.setBigUint64(160, (buf as any)._f160 === null ? 0n : BigInt(Deno.UnsafePointer.value(Deno.UnsafePointer.of((buf as any)._f160))), true);
  }
  // 0xa8: buffer
  if (data?.otmpStyleName !== undefined) {
    (buf as any)._f168 = util.pstrToFfi(data.otmpStyleName);
    view.setBigUint64(168, (buf as any)._f168 === null ? 0n : BigInt(Deno.UnsafePointer.value(Deno.UnsafePointer.of((buf as any)._f168))), true);
  }
  // 0xb0: buffer
  if (data?.otmpFullName !== undefined) {
    (buf as any)._f176 = util.pstrToFfi(data.otmpFullName);
    view.setBigUint64(176, (buf as any)._f176 === null ? 0n : BigInt(Deno.UnsafePointer.value(Deno.UnsafePointer.of((buf as any)._f176))), true);
  }
  return buf;
}

export class OUTLINETEXTMETRICAView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get otmSize(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  get otmTextMetrics(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x10: u8
  get otmFiller(): number {
    return this.view.getUint8(16);
  }

  // 0x11: pad7

  // 0x18: pointer
  get otmPanoseNumber(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(24, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x20: u32
  get otmfsSelection(): number {
    return this.view.getUint32(32, true);
  }

  // 0x24: u32
  get otmfsType(): number {
    return this.view.getUint32(36, true);
  }

  // 0x28: i32
  get otmsCharSlopeRise(): number {
    return this.view.getInt32(40, true);
  }

  // 0x2c: i32
  get otmsCharSlopeRun(): number {
    return this.view.getInt32(44, true);
  }

  // 0x30: i32
  get otmItalicAngle(): number {
    return this.view.getInt32(48, true);
  }

  // 0x34: u32
  get otmEMSquare(): number {
    return this.view.getUint32(52, true);
  }

  // 0x38: i32
  get otmAscent(): number {
    return this.view.getInt32(56, true);
  }

  // 0x3c: i32
  get otmDescent(): number {
    return this.view.getInt32(60, true);
  }

  // 0x40: u32
  get otmLineGap(): number {
    return this.view.getUint32(64, true);
  }

  // 0x44: u32
  get otmsCapEmHeight(): number {
    return this.view.getUint32(68, true);
  }

  // 0x48: u32
  get otmsXHeight(): number {
    return this.view.getUint32(72, true);
  }

  // 0x4c: pad4

  // 0x50: pointer
  get otmrcFontBox(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(80, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x58: i32
  get otmMacAscent(): number {
    return this.view.getInt32(88, true);
  }

  // 0x5c: i32
  get otmMacDescent(): number {
    return this.view.getInt32(92, true);
  }

  // 0x60: u32
  get otmMacLineGap(): number {
    return this.view.getUint32(96, true);
  }

  // 0x64: u32
  get otmusMinimumPPEM(): number {
    return this.view.getUint32(100, true);
  }

  // 0x68: pointer
  get otmptSubscriptSize(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(104, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x70: pointer
  get otmptSubscriptOffset(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(112, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x78: pointer
  get otmptSuperscriptSize(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(120, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x80: pointer
  get otmptSuperscriptOffset(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(128, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x88: u32
  get otmsStrikeoutSize(): number {
    return this.view.getUint32(136, true);
  }

  // 0x8c: i32
  get otmsStrikeoutPosition(): number {
    return this.view.getInt32(140, true);
  }

  // 0x90: i32
  get otmsUnderscoreSize(): number {
    return this.view.getInt32(144, true);
  }

  // 0x94: i32
  get otmsUnderscorePosition(): number {
    return this.view.getInt32(148, true);
  }

  // 0x98: buffer
  get otmpFamilyName(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(152, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0xa0: buffer
  get otmpFaceName(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(160, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0xa8: buffer
  get otmpStyleName(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(168, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0xb0: buffer
  get otmpFullName(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(176, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: u32
  set otmSize(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  set otmTextMetrics(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x10: u8
  set otmFiller(value: number) {
    this.view.setUint8(16, value);
  }

  // 0x11: pad7

  // 0x18: pointer
  set otmPanoseNumber(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(24, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x20: u32
  set otmfsSelection(value: number) {
    this.view.setUint32(32, value, true);
  }

  // 0x24: u32
  set otmfsType(value: number) {
    this.view.setUint32(36, value, true);
  }

  // 0x28: i32
  set otmsCharSlopeRise(value: number) {
    this.view.setInt32(40, value, true);
  }

  // 0x2c: i32
  set otmsCharSlopeRun(value: number) {
    this.view.setInt32(44, value, true);
  }

  // 0x30: i32
  set otmItalicAngle(value: number) {
    this.view.setInt32(48, value, true);
  }

  // 0x34: u32
  set otmEMSquare(value: number) {
    this.view.setUint32(52, value, true);
  }

  // 0x38: i32
  set otmAscent(value: number) {
    this.view.setInt32(56, value, true);
  }

  // 0x3c: i32
  set otmDescent(value: number) {
    this.view.setInt32(60, value, true);
  }

  // 0x40: u32
  set otmLineGap(value: number) {
    this.view.setUint32(64, value, true);
  }

  // 0x44: u32
  set otmsCapEmHeight(value: number) {
    this.view.setUint32(68, value, true);
  }

  // 0x48: u32
  set otmsXHeight(value: number) {
    this.view.setUint32(72, value, true);
  }

  // 0x4c: pad4

  // 0x50: pointer
  set otmrcFontBox(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(80, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x58: i32
  set otmMacAscent(value: number) {
    this.view.setInt32(88, value, true);
  }

  // 0x5c: i32
  set otmMacDescent(value: number) {
    this.view.setInt32(92, value, true);
  }

  // 0x60: u32
  set otmMacLineGap(value: number) {
    this.view.setUint32(96, value, true);
  }

  // 0x64: u32
  set otmusMinimumPPEM(value: number) {
    this.view.setUint32(100, value, true);
  }

  // 0x68: pointer
  set otmptSubscriptSize(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(104, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x70: pointer
  set otmptSubscriptOffset(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(112, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x78: pointer
  set otmptSuperscriptSize(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(120, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x80: pointer
  set otmptSuperscriptOffset(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(128, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x88: u32
  set otmsStrikeoutSize(value: number) {
    this.view.setUint32(136, value, true);
  }

  // 0x8c: i32
  set otmsStrikeoutPosition(value: number) {
    this.view.setInt32(140, value, true);
  }

  // 0x90: i32
  set otmsUnderscoreSize(value: number) {
    this.view.setInt32(144, value, true);
  }

  // 0x94: i32
  set otmsUnderscorePosition(value: number) {
    this.view.setInt32(148, value, true);
  }

  // 0x98: buffer
  set otmpFamilyName(value: Uint8Array | Deno.PointerValue) {
    (this.buf as any)._f152 = value;
    this.view.setBigUint64(152, BigInt(Deno.UnsafePointer.value(util.toPointer((this.buf as any)._f152))), true);
  }

  // 0xa0: buffer
  set otmpFaceName(value: Uint8Array | Deno.PointerValue) {
    (this.buf as any)._f160 = value;
    this.view.setBigUint64(160, BigInt(Deno.UnsafePointer.value(util.toPointer((this.buf as any)._f160))), true);
  }

  // 0xa8: buffer
  set otmpStyleName(value: Uint8Array | Deno.PointerValue) {
    (this.buf as any)._f168 = value;
    this.view.setBigUint64(168, BigInt(Deno.UnsafePointer.value(util.toPointer((this.buf as any)._f168))), true);
  }

  // 0xb0: buffer
  set otmpFullName(value: Uint8Array | Deno.PointerValue) {
    (this.buf as any)._f176 = value;
    this.view.setBigUint64(176, BigInt(Deno.UnsafePointer.value(util.toPointer((this.buf as any)._f176))), true);
  }
}

/**
 * Windows.Win32.Graphics.Gdi.OUTLINETEXTMETRICW (size: 184)
 */
export interface OUTLINETEXTMETRICW {
  /** u32 */
  otmSize: number;
  /** Windows.Win32.Graphics.Gdi.TEXTMETRICW */
  otmTextMetrics: Uint8Array | Deno.PointerValue;
  /** u8 */
  otmFiller: number;
  /** Windows.Win32.Graphics.Gdi.PANOSE */
  otmPanoseNumber: Uint8Array | Deno.PointerValue;
  /** u32 */
  otmfsSelection: number;
  /** u32 */
  otmfsType: number;
  /** i32 */
  otmsCharSlopeRise: number;
  /** i32 */
  otmsCharSlopeRun: number;
  /** i32 */
  otmItalicAngle: number;
  /** u32 */
  otmEMSquare: number;
  /** i32 */
  otmAscent: number;
  /** i32 */
  otmDescent: number;
  /** u32 */
  otmLineGap: number;
  /** u32 */
  otmsCapEmHeight: number;
  /** u32 */
  otmsXHeight: number;
  /** Windows.Win32.Foundation.RECT */
  otmrcFontBox: Uint8Array | Deno.PointerValue;
  /** i32 */
  otmMacAscent: number;
  /** i32 */
  otmMacDescent: number;
  /** u32 */
  otmMacLineGap: number;
  /** u32 */
  otmusMinimumPPEM: number;
  /** Windows.Win32.Foundation.POINT */
  otmptSubscriptSize: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.Foundation.POINT */
  otmptSubscriptOffset: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.Foundation.POINT */
  otmptSuperscriptSize: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.Foundation.POINT */
  otmptSuperscriptOffset: Uint8Array | Deno.PointerValue;
  /** u32 */
  otmsStrikeoutSize: number;
  /** i32 */
  otmsStrikeoutPosition: number;
  /** i32 */
  otmsUnderscoreSize: number;
  /** i32 */
  otmsUnderscorePosition: number;
  /** Windows.Win32.Foundation.PSTR */
  otmpFamilyName: string | null | Uint8Array;
  /** Windows.Win32.Foundation.PSTR */
  otmpFaceName: string | null | Uint8Array;
  /** Windows.Win32.Foundation.PSTR */
  otmpStyleName: string | null | Uint8Array;
  /** Windows.Win32.Foundation.PSTR */
  otmpFullName: string | null | Uint8Array;
}

export const sizeofOUTLINETEXTMETRICW = 184;

export function allocOUTLINETEXTMETRICW(data?: Partial<OUTLINETEXTMETRICW>): Uint8Array {
  const buf = new Uint8Array(sizeofOUTLINETEXTMETRICW);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.otmSize !== undefined) view.setUint32(0, Number(data.otmSize), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.otmTextMetrics !== undefined) view.setBigUint64(8, data.otmTextMetrics === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.otmTextMetrics))), true);
  // 0x10: u8
  if (data?.otmFiller !== undefined) view.setUint8(16, Number(data.otmFiller));
  // 0x11: pad7
  // 0x18: pointer
  if (data?.otmPanoseNumber !== undefined) view.setBigUint64(24, data.otmPanoseNumber === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.otmPanoseNumber))), true);
  // 0x20: u32
  if (data?.otmfsSelection !== undefined) view.setUint32(32, Number(data.otmfsSelection), true);
  // 0x24: u32
  if (data?.otmfsType !== undefined) view.setUint32(36, Number(data.otmfsType), true);
  // 0x28: i32
  if (data?.otmsCharSlopeRise !== undefined) view.setInt32(40, Number(data.otmsCharSlopeRise), true);
  // 0x2c: i32
  if (data?.otmsCharSlopeRun !== undefined) view.setInt32(44, Number(data.otmsCharSlopeRun), true);
  // 0x30: i32
  if (data?.otmItalicAngle !== undefined) view.setInt32(48, Number(data.otmItalicAngle), true);
  // 0x34: u32
  if (data?.otmEMSquare !== undefined) view.setUint32(52, Number(data.otmEMSquare), true);
  // 0x38: i32
  if (data?.otmAscent !== undefined) view.setInt32(56, Number(data.otmAscent), true);
  // 0x3c: i32
  if (data?.otmDescent !== undefined) view.setInt32(60, Number(data.otmDescent), true);
  // 0x40: u32
  if (data?.otmLineGap !== undefined) view.setUint32(64, Number(data.otmLineGap), true);
  // 0x44: u32
  if (data?.otmsCapEmHeight !== undefined) view.setUint32(68, Number(data.otmsCapEmHeight), true);
  // 0x48: u32
  if (data?.otmsXHeight !== undefined) view.setUint32(72, Number(data.otmsXHeight), true);
  // 0x4c: pad4
  // 0x50: pointer
  if (data?.otmrcFontBox !== undefined) view.setBigUint64(80, data.otmrcFontBox === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.otmrcFontBox))), true);
  // 0x58: i32
  if (data?.otmMacAscent !== undefined) view.setInt32(88, Number(data.otmMacAscent), true);
  // 0x5c: i32
  if (data?.otmMacDescent !== undefined) view.setInt32(92, Number(data.otmMacDescent), true);
  // 0x60: u32
  if (data?.otmMacLineGap !== undefined) view.setUint32(96, Number(data.otmMacLineGap), true);
  // 0x64: u32
  if (data?.otmusMinimumPPEM !== undefined) view.setUint32(100, Number(data.otmusMinimumPPEM), true);
  // 0x68: pointer
  if (data?.otmptSubscriptSize !== undefined) view.setBigUint64(104, data.otmptSubscriptSize === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.otmptSubscriptSize))), true);
  // 0x70: pointer
  if (data?.otmptSubscriptOffset !== undefined) view.setBigUint64(112, data.otmptSubscriptOffset === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.otmptSubscriptOffset))), true);
  // 0x78: pointer
  if (data?.otmptSuperscriptSize !== undefined) view.setBigUint64(120, data.otmptSuperscriptSize === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.otmptSuperscriptSize))), true);
  // 0x80: pointer
  if (data?.otmptSuperscriptOffset !== undefined) view.setBigUint64(128, data.otmptSuperscriptOffset === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.otmptSuperscriptOffset))), true);
  // 0x88: u32
  if (data?.otmsStrikeoutSize !== undefined) view.setUint32(136, Number(data.otmsStrikeoutSize), true);
  // 0x8c: i32
  if (data?.otmsStrikeoutPosition !== undefined) view.setInt32(140, Number(data.otmsStrikeoutPosition), true);
  // 0x90: i32
  if (data?.otmsUnderscoreSize !== undefined) view.setInt32(144, Number(data.otmsUnderscoreSize), true);
  // 0x94: i32
  if (data?.otmsUnderscorePosition !== undefined) view.setInt32(148, Number(data.otmsUnderscorePosition), true);
  // 0x98: buffer
  if (data?.otmpFamilyName !== undefined) {
    (buf as any)._f152 = util.pstrToFfi(data.otmpFamilyName);
    view.setBigUint64(152, (buf as any)._f152 === null ? 0n : BigInt(Deno.UnsafePointer.value(Deno.UnsafePointer.of((buf as any)._f152))), true);
  }
  // 0xa0: buffer
  if (data?.otmpFaceName !== undefined) {
    (buf as any)._f160 = util.pstrToFfi(data.otmpFaceName);
    view.setBigUint64(160, (buf as any)._f160 === null ? 0n : BigInt(Deno.UnsafePointer.value(Deno.UnsafePointer.of((buf as any)._f160))), true);
  }
  // 0xa8: buffer
  if (data?.otmpStyleName !== undefined) {
    (buf as any)._f168 = util.pstrToFfi(data.otmpStyleName);
    view.setBigUint64(168, (buf as any)._f168 === null ? 0n : BigInt(Deno.UnsafePointer.value(Deno.UnsafePointer.of((buf as any)._f168))), true);
  }
  // 0xb0: buffer
  if (data?.otmpFullName !== undefined) {
    (buf as any)._f176 = util.pstrToFfi(data.otmpFullName);
    view.setBigUint64(176, (buf as any)._f176 === null ? 0n : BigInt(Deno.UnsafePointer.value(Deno.UnsafePointer.of((buf as any)._f176))), true);
  }
  return buf;
}

export class OUTLINETEXTMETRICWView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get otmSize(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  get otmTextMetrics(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x10: u8
  get otmFiller(): number {
    return this.view.getUint8(16);
  }

  // 0x11: pad7

  // 0x18: pointer
  get otmPanoseNumber(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(24, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x20: u32
  get otmfsSelection(): number {
    return this.view.getUint32(32, true);
  }

  // 0x24: u32
  get otmfsType(): number {
    return this.view.getUint32(36, true);
  }

  // 0x28: i32
  get otmsCharSlopeRise(): number {
    return this.view.getInt32(40, true);
  }

  // 0x2c: i32
  get otmsCharSlopeRun(): number {
    return this.view.getInt32(44, true);
  }

  // 0x30: i32
  get otmItalicAngle(): number {
    return this.view.getInt32(48, true);
  }

  // 0x34: u32
  get otmEMSquare(): number {
    return this.view.getUint32(52, true);
  }

  // 0x38: i32
  get otmAscent(): number {
    return this.view.getInt32(56, true);
  }

  // 0x3c: i32
  get otmDescent(): number {
    return this.view.getInt32(60, true);
  }

  // 0x40: u32
  get otmLineGap(): number {
    return this.view.getUint32(64, true);
  }

  // 0x44: u32
  get otmsCapEmHeight(): number {
    return this.view.getUint32(68, true);
  }

  // 0x48: u32
  get otmsXHeight(): number {
    return this.view.getUint32(72, true);
  }

  // 0x4c: pad4

  // 0x50: pointer
  get otmrcFontBox(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(80, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x58: i32
  get otmMacAscent(): number {
    return this.view.getInt32(88, true);
  }

  // 0x5c: i32
  get otmMacDescent(): number {
    return this.view.getInt32(92, true);
  }

  // 0x60: u32
  get otmMacLineGap(): number {
    return this.view.getUint32(96, true);
  }

  // 0x64: u32
  get otmusMinimumPPEM(): number {
    return this.view.getUint32(100, true);
  }

  // 0x68: pointer
  get otmptSubscriptSize(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(104, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x70: pointer
  get otmptSubscriptOffset(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(112, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x78: pointer
  get otmptSuperscriptSize(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(120, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x80: pointer
  get otmptSuperscriptOffset(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(128, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x88: u32
  get otmsStrikeoutSize(): number {
    return this.view.getUint32(136, true);
  }

  // 0x8c: i32
  get otmsStrikeoutPosition(): number {
    return this.view.getInt32(140, true);
  }

  // 0x90: i32
  get otmsUnderscoreSize(): number {
    return this.view.getInt32(144, true);
  }

  // 0x94: i32
  get otmsUnderscorePosition(): number {
    return this.view.getInt32(148, true);
  }

  // 0x98: buffer
  get otmpFamilyName(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(152, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0xa0: buffer
  get otmpFaceName(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(160, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0xa8: buffer
  get otmpStyleName(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(168, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0xb0: buffer
  get otmpFullName(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(176, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: u32
  set otmSize(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  set otmTextMetrics(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x10: u8
  set otmFiller(value: number) {
    this.view.setUint8(16, value);
  }

  // 0x11: pad7

  // 0x18: pointer
  set otmPanoseNumber(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(24, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x20: u32
  set otmfsSelection(value: number) {
    this.view.setUint32(32, value, true);
  }

  // 0x24: u32
  set otmfsType(value: number) {
    this.view.setUint32(36, value, true);
  }

  // 0x28: i32
  set otmsCharSlopeRise(value: number) {
    this.view.setInt32(40, value, true);
  }

  // 0x2c: i32
  set otmsCharSlopeRun(value: number) {
    this.view.setInt32(44, value, true);
  }

  // 0x30: i32
  set otmItalicAngle(value: number) {
    this.view.setInt32(48, value, true);
  }

  // 0x34: u32
  set otmEMSquare(value: number) {
    this.view.setUint32(52, value, true);
  }

  // 0x38: i32
  set otmAscent(value: number) {
    this.view.setInt32(56, value, true);
  }

  // 0x3c: i32
  set otmDescent(value: number) {
    this.view.setInt32(60, value, true);
  }

  // 0x40: u32
  set otmLineGap(value: number) {
    this.view.setUint32(64, value, true);
  }

  // 0x44: u32
  set otmsCapEmHeight(value: number) {
    this.view.setUint32(68, value, true);
  }

  // 0x48: u32
  set otmsXHeight(value: number) {
    this.view.setUint32(72, value, true);
  }

  // 0x4c: pad4

  // 0x50: pointer
  set otmrcFontBox(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(80, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x58: i32
  set otmMacAscent(value: number) {
    this.view.setInt32(88, value, true);
  }

  // 0x5c: i32
  set otmMacDescent(value: number) {
    this.view.setInt32(92, value, true);
  }

  // 0x60: u32
  set otmMacLineGap(value: number) {
    this.view.setUint32(96, value, true);
  }

  // 0x64: u32
  set otmusMinimumPPEM(value: number) {
    this.view.setUint32(100, value, true);
  }

  // 0x68: pointer
  set otmptSubscriptSize(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(104, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x70: pointer
  set otmptSubscriptOffset(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(112, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x78: pointer
  set otmptSuperscriptSize(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(120, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x80: pointer
  set otmptSuperscriptOffset(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(128, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x88: u32
  set otmsStrikeoutSize(value: number) {
    this.view.setUint32(136, value, true);
  }

  // 0x8c: i32
  set otmsStrikeoutPosition(value: number) {
    this.view.setInt32(140, value, true);
  }

  // 0x90: i32
  set otmsUnderscoreSize(value: number) {
    this.view.setInt32(144, value, true);
  }

  // 0x94: i32
  set otmsUnderscorePosition(value: number) {
    this.view.setInt32(148, value, true);
  }

  // 0x98: buffer
  set otmpFamilyName(value: Uint8Array | Deno.PointerValue) {
    (this.buf as any)._f152 = value;
    this.view.setBigUint64(152, BigInt(Deno.UnsafePointer.value(util.toPointer((this.buf as any)._f152))), true);
  }

  // 0xa0: buffer
  set otmpFaceName(value: Uint8Array | Deno.PointerValue) {
    (this.buf as any)._f160 = value;
    this.view.setBigUint64(160, BigInt(Deno.UnsafePointer.value(util.toPointer((this.buf as any)._f160))), true);
  }

  // 0xa8: buffer
  set otmpStyleName(value: Uint8Array | Deno.PointerValue) {
    (this.buf as any)._f168 = value;
    this.view.setBigUint64(168, BigInt(Deno.UnsafePointer.value(util.toPointer((this.buf as any)._f168))), true);
  }

  // 0xb0: buffer
  set otmpFullName(value: Uint8Array | Deno.PointerValue) {
    (this.buf as any)._f176 = value;
    this.view.setBigUint64(176, BigInt(Deno.UnsafePointer.value(util.toPointer((this.buf as any)._f176))), true);
  }
}

/**
 * Windows.Win32.Graphics.Gdi.POLYTEXTA (size: 48)
 */
export interface POLYTEXTA {
  /** i32 */
  x: number;
  /** i32 */
  y: number;
  /** u32 */
  n: number;
  /** Windows.Win32.Foundation.PSTR */
  lpstr: string | null | Uint8Array;
  /** u32 */
  uiFlags: number;
  /** Windows.Win32.Foundation.RECT */
  rcl: Uint8Array | Deno.PointerValue;
  /** ptr */
  pdx: Deno.PointerValue | Uint8Array;
}

export const sizeofPOLYTEXTA = 48;

export function allocPOLYTEXTA(data?: Partial<POLYTEXTA>): Uint8Array {
  const buf = new Uint8Array(sizeofPOLYTEXTA);
  const view = new DataView(buf.buffer);
  // 0x00: i32
  if (data?.x !== undefined) view.setInt32(0, Number(data.x), true);
  // 0x04: i32
  if (data?.y !== undefined) view.setInt32(4, Number(data.y), true);
  // 0x08: u32
  if (data?.n !== undefined) view.setUint32(8, Number(data.n), true);
  // 0x0c: pad4
  // 0x10: buffer
  if (data?.lpstr !== undefined) {
    (buf as any)._f16 = util.pstrToFfi(data.lpstr);
    view.setBigUint64(16, (buf as any)._f16 === null ? 0n : BigInt(Deno.UnsafePointer.value(Deno.UnsafePointer.of((buf as any)._f16))), true);
  }
  // 0x18: u32
  if (data?.uiFlags !== undefined) view.setUint32(24, Number(data.uiFlags), true);
  // 0x1c: pad4
  // 0x20: pointer
  if (data?.rcl !== undefined) view.setBigUint64(32, data.rcl === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.rcl))), true);
  // 0x28: pointer
  if (data?.pdx !== undefined) view.setBigUint64(40, data.pdx === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.pdx))), true);
  return buf;
}

export class POLYTEXTAView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: i32
  get x(): number {
    return this.view.getInt32(0, true);
  }

  // 0x04: i32
  get y(): number {
    return this.view.getInt32(4, true);
  }

  // 0x08: u32
  get n(): number {
    return this.view.getUint32(8, true);
  }

  // 0x0c: pad4

  // 0x10: buffer
  get lpstr(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(16, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x18: u32
  get uiFlags(): number {
    return this.view.getUint32(24, true);
  }

  // 0x1c: pad4

  // 0x20: pointer
  get rcl(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(32, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x28: pointer
  get pdx(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(40, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: i32
  set x(value: number) {
    this.view.setInt32(0, value, true);
  }

  // 0x04: i32
  set y(value: number) {
    this.view.setInt32(4, value, true);
  }

  // 0x08: u32
  set n(value: number) {
    this.view.setUint32(8, value, true);
  }

  // 0x0c: pad4

  // 0x10: buffer
  set lpstr(value: Uint8Array | Deno.PointerValue) {
    (this.buf as any)._f16 = value;
    this.view.setBigUint64(16, BigInt(Deno.UnsafePointer.value(util.toPointer((this.buf as any)._f16))), true);
  }

  // 0x18: u32
  set uiFlags(value: number) {
    this.view.setUint32(24, value, true);
  }

  // 0x1c: pad4

  // 0x20: pointer
  set rcl(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(32, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x28: pointer
  set pdx(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(40, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.Graphics.Gdi.POLYTEXTW (size: 48)
 */
export interface POLYTEXTW {
  /** i32 */
  x: number;
  /** i32 */
  y: number;
  /** u32 */
  n: number;
  /** Windows.Win32.Foundation.PWSTR */
  lpstr: string | null | Uint8Array | Uint16Array;
  /** u32 */
  uiFlags: number;
  /** Windows.Win32.Foundation.RECT */
  rcl: Uint8Array | Deno.PointerValue;
  /** ptr */
  pdx: Deno.PointerValue | Uint8Array;
}

export const sizeofPOLYTEXTW = 48;

export function allocPOLYTEXTW(data?: Partial<POLYTEXTW>): Uint8Array {
  const buf = new Uint8Array(sizeofPOLYTEXTW);
  const view = new DataView(buf.buffer);
  // 0x00: i32
  if (data?.x !== undefined) view.setInt32(0, Number(data.x), true);
  // 0x04: i32
  if (data?.y !== undefined) view.setInt32(4, Number(data.y), true);
  // 0x08: u32
  if (data?.n !== undefined) view.setUint32(8, Number(data.n), true);
  // 0x0c: pad4
  // 0x10: buffer
  if (data?.lpstr !== undefined) {
    (buf as any)._f16 = util.pwstrToFfi(data.lpstr);
    view.setBigUint64(16, (buf as any)._f16 === null ? 0n : BigInt(Deno.UnsafePointer.value(Deno.UnsafePointer.of((buf as any)._f16))), true);
  }
  // 0x18: u32
  if (data?.uiFlags !== undefined) view.setUint32(24, Number(data.uiFlags), true);
  // 0x1c: pad4
  // 0x20: pointer
  if (data?.rcl !== undefined) view.setBigUint64(32, data.rcl === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.rcl))), true);
  // 0x28: pointer
  if (data?.pdx !== undefined) view.setBigUint64(40, data.pdx === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.pdx))), true);
  return buf;
}

export class POLYTEXTWView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: i32
  get x(): number {
    return this.view.getInt32(0, true);
  }

  // 0x04: i32
  get y(): number {
    return this.view.getInt32(4, true);
  }

  // 0x08: u32
  get n(): number {
    return this.view.getUint32(8, true);
  }

  // 0x0c: pad4

  // 0x10: buffer
  get lpstr(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(16, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x18: u32
  get uiFlags(): number {
    return this.view.getUint32(24, true);
  }

  // 0x1c: pad4

  // 0x20: pointer
  get rcl(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(32, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x28: pointer
  get pdx(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(40, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: i32
  set x(value: number) {
    this.view.setInt32(0, value, true);
  }

  // 0x04: i32
  set y(value: number) {
    this.view.setInt32(4, value, true);
  }

  // 0x08: u32
  set n(value: number) {
    this.view.setUint32(8, value, true);
  }

  // 0x0c: pad4

  // 0x10: buffer
  set lpstr(value: Uint8Array | Deno.PointerValue) {
    (this.buf as any)._f16 = value;
    this.view.setBigUint64(16, BigInt(Deno.UnsafePointer.value(util.toPointer((this.buf as any)._f16))), true);
  }

  // 0x18: u32
  set uiFlags(value: number) {
    this.view.setUint32(24, value, true);
  }

  // 0x1c: pad4

  // 0x20: pointer
  set rcl(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(32, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x28: pointer
  set pdx(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(40, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.Graphics.Gdi.FIXED (size: 8)
 */
export interface FIXED {
  /** u16 */
  fract: number;
  /** i16 */
  value: number;
}

export const sizeofFIXED = 8;

export function allocFIXED(data?: Partial<FIXED>): Uint8Array {
  const buf = new Uint8Array(sizeofFIXED);
  const view = new DataView(buf.buffer);
  // 0x00: u16
  if (data?.fract !== undefined) view.setUint16(0, Number(data.fract), true);
  // 0x02: i16
  if (data?.value !== undefined) view.setInt16(2, Number(data.value), true);
  // 0x04: pad4
  return buf;
}

export class FIXEDView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u16
  get fract(): number {
    return this.view.getUint16(0, true);
  }

  // 0x02: i16
  get value(): number {
    return this.view.getInt16(2, true);
  }

  // 0x04: pad4

  // 0x00: u16
  set fract(value: number) {
    this.view.setUint16(0, value, true);
  }

  // 0x02: i16
  set value(value: number) {
    this.view.setInt16(2, value, true);
  }

  // 0x04: pad4
}

/**
 * Windows.Win32.Graphics.Gdi.MAT2 (size: 32)
 */
export interface MAT2 {
  /** Windows.Win32.Graphics.Gdi.FIXED */
  eM11: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.Graphics.Gdi.FIXED */
  eM12: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.Graphics.Gdi.FIXED */
  eM21: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.Graphics.Gdi.FIXED */
  eM22: Uint8Array | Deno.PointerValue;
}

export const sizeofMAT2 = 32;

export function allocMAT2(data?: Partial<MAT2>): Uint8Array {
  const buf = new Uint8Array(sizeofMAT2);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.eM11 !== undefined) view.setBigUint64(0, data.eM11 === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.eM11))), true);
  // 0x08: pointer
  if (data?.eM12 !== undefined) view.setBigUint64(8, data.eM12 === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.eM12))), true);
  // 0x10: pointer
  if (data?.eM21 !== undefined) view.setBigUint64(16, data.eM21 === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.eM21))), true);
  // 0x18: pointer
  if (data?.eM22 !== undefined) view.setBigUint64(24, data.eM22 === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.eM22))), true);
  return buf;
}

export class MAT2View {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get eM11(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(0, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x08: pointer
  get eM12(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x10: pointer
  get eM21(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(16, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x18: pointer
  get eM22(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(24, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: pointer
  set eM11(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(0, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x08: pointer
  set eM12(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x10: pointer
  set eM21(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(16, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x18: pointer
  set eM22(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(24, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.Graphics.Gdi.GLYPHMETRICS (size: 24)
 */
export interface GLYPHMETRICS {
  /** u32 */
  gmBlackBoxX: number;
  /** u32 */
  gmBlackBoxY: number;
  /** Windows.Win32.Foundation.POINT */
  gmptGlyphOrigin: Uint8Array | Deno.PointerValue;
  /** i16 */
  gmCellIncX: number;
  /** i16 */
  gmCellIncY: number;
}

export const sizeofGLYPHMETRICS = 24;

export function allocGLYPHMETRICS(data?: Partial<GLYPHMETRICS>): Uint8Array {
  const buf = new Uint8Array(sizeofGLYPHMETRICS);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.gmBlackBoxX !== undefined) view.setUint32(0, Number(data.gmBlackBoxX), true);
  // 0x04: u32
  if (data?.gmBlackBoxY !== undefined) view.setUint32(4, Number(data.gmBlackBoxY), true);
  // 0x08: pointer
  if (data?.gmptGlyphOrigin !== undefined) view.setBigUint64(8, data.gmptGlyphOrigin === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.gmptGlyphOrigin))), true);
  // 0x10: i16
  if (data?.gmCellIncX !== undefined) view.setInt16(16, Number(data.gmCellIncX), true);
  // 0x12: i16
  if (data?.gmCellIncY !== undefined) view.setInt16(18, Number(data.gmCellIncY), true);
  // 0x14: pad4
  return buf;
}

export class GLYPHMETRICSView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get gmBlackBoxX(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: u32
  get gmBlackBoxY(): number {
    return this.view.getUint32(4, true);
  }

  // 0x08: pointer
  get gmptGlyphOrigin(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x10: i16
  get gmCellIncX(): number {
    return this.view.getInt16(16, true);
  }

  // 0x12: i16
  get gmCellIncY(): number {
    return this.view.getInt16(18, true);
  }

  // 0x14: pad4

  // 0x00: u32
  set gmBlackBoxX(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: u32
  set gmBlackBoxY(value: number) {
    this.view.setUint32(4, value, true);
  }

  // 0x08: pointer
  set gmptGlyphOrigin(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x10: i16
  set gmCellIncX(value: number) {
    this.view.setInt16(16, value, true);
  }

  // 0x12: i16
  set gmCellIncY(value: number) {
    this.view.setInt16(18, value, true);
  }

  // 0x14: pad4
}

/**
 * Windows.Win32.Graphics.Gdi.POINTFX (size: 16)
 */
export interface POINTFX {
  /** Windows.Win32.Graphics.Gdi.FIXED */
  x: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.Graphics.Gdi.FIXED */
  y: Uint8Array | Deno.PointerValue;
}

export const sizeofPOINTFX = 16;

export function allocPOINTFX(data?: Partial<POINTFX>): Uint8Array {
  const buf = new Uint8Array(sizeofPOINTFX);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.x !== undefined) view.setBigUint64(0, data.x === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.x))), true);
  // 0x08: pointer
  if (data?.y !== undefined) view.setBigUint64(8, data.y === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.y))), true);
  return buf;
}

export class POINTFXView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get x(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(0, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x08: pointer
  get y(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: pointer
  set x(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(0, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x08: pointer
  set y(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.Graphics.Gdi.TTPOLYCURVE (size: 16)
 */
export interface TTPOLYCURVE {
  /** u16 */
  wType: number;
  /** u16 */
  cpfx: number;
  /** array */
  apfx: Deno.PointerValue;
}

export const sizeofTTPOLYCURVE = 16;

export function allocTTPOLYCURVE(data?: Partial<TTPOLYCURVE>): Uint8Array {
  const buf = new Uint8Array(sizeofTTPOLYCURVE);
  const view = new DataView(buf.buffer);
  // 0x00: u16
  if (data?.wType !== undefined) view.setUint16(0, Number(data.wType), true);
  // 0x02: u16
  if (data?.cpfx !== undefined) view.setUint16(2, Number(data.cpfx), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.apfx !== undefined) view.setBigUint64(8, data.apfx === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.apfx))), true);
  return buf;
}

export class TTPOLYCURVEView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u16
  get wType(): number {
    return this.view.getUint16(0, true);
  }

  // 0x02: u16
  get cpfx(): number {
    return this.view.getUint16(2, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  get apfx(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: u16
  set wType(value: number) {
    this.view.setUint16(0, value, true);
  }

  // 0x02: u16
  set cpfx(value: number) {
    this.view.setUint16(2, value, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  set apfx(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.Graphics.Gdi.TTPOLYGONHEADER (size: 16)
 */
export interface TTPOLYGONHEADER {
  /** u32 */
  cb: number;
  /** u32 */
  dwType: number;
  /** Windows.Win32.Graphics.Gdi.POINTFX */
  pfxStart: Uint8Array | Deno.PointerValue;
}

export const sizeofTTPOLYGONHEADER = 16;

export function allocTTPOLYGONHEADER(data?: Partial<TTPOLYGONHEADER>): Uint8Array {
  const buf = new Uint8Array(sizeofTTPOLYGONHEADER);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.cb !== undefined) view.setUint32(0, Number(data.cb), true);
  // 0x04: u32
  if (data?.dwType !== undefined) view.setUint32(4, Number(data.dwType), true);
  // 0x08: pointer
  if (data?.pfxStart !== undefined) view.setBigUint64(8, data.pfxStart === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.pfxStart))), true);
  return buf;
}

export class TTPOLYGONHEADERView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get cb(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: u32
  get dwType(): number {
    return this.view.getUint32(4, true);
  }

  // 0x08: pointer
  get pfxStart(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: u32
  set cb(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: u32
  set dwType(value: number) {
    this.view.setUint32(4, value, true);
  }

  // 0x08: pointer
  set pfxStart(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.Graphics.Gdi.GCP_RESULTSA (size: 64)
 */
export interface GCP_RESULTSA {
  /** u32 */
  lStructSize: number;
  /** Windows.Win32.Foundation.PSTR */
  lpOutString: string | null | Uint8Array;
  /** ptr */
  lpOrder: Deno.PointerValue | Uint8Array;
  /** ptr */
  lpDx: Deno.PointerValue | Uint8Array;
  /** ptr */
  lpCaretPos: Deno.PointerValue | Uint8Array;
  /** Windows.Win32.Foundation.PSTR */
  lpClass: string | null | Uint8Array;
  /** Windows.Win32.Foundation.PWSTR */
  lpGlyphs: string | null | Uint8Array | Uint16Array;
  /** u32 */
  nGlyphs: number;
  /** i32 */
  nMaxFit: number;
}

export const sizeofGCP_RESULTSA = 64;

export function allocGCP_RESULTSA(data?: Partial<GCP_RESULTSA>): Uint8Array {
  const buf = new Uint8Array(sizeofGCP_RESULTSA);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.lStructSize !== undefined) view.setUint32(0, Number(data.lStructSize), true);
  // 0x04: pad4
  // 0x08: buffer
  if (data?.lpOutString !== undefined) {
    (buf as any)._f8 = util.pstrToFfi(data.lpOutString);
    view.setBigUint64(8, (buf as any)._f8 === null ? 0n : BigInt(Deno.UnsafePointer.value(Deno.UnsafePointer.of((buf as any)._f8))), true);
  }
  // 0x10: pointer
  if (data?.lpOrder !== undefined) view.setBigUint64(16, data.lpOrder === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.lpOrder))), true);
  // 0x18: pointer
  if (data?.lpDx !== undefined) view.setBigUint64(24, data.lpDx === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.lpDx))), true);
  // 0x20: pointer
  if (data?.lpCaretPos !== undefined) view.setBigUint64(32, data.lpCaretPos === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.lpCaretPos))), true);
  // 0x28: buffer
  if (data?.lpClass !== undefined) {
    (buf as any)._f40 = util.pstrToFfi(data.lpClass);
    view.setBigUint64(40, (buf as any)._f40 === null ? 0n : BigInt(Deno.UnsafePointer.value(Deno.UnsafePointer.of((buf as any)._f40))), true);
  }
  // 0x30: buffer
  if (data?.lpGlyphs !== undefined) {
    (buf as any)._f48 = util.pwstrToFfi(data.lpGlyphs);
    view.setBigUint64(48, (buf as any)._f48 === null ? 0n : BigInt(Deno.UnsafePointer.value(Deno.UnsafePointer.of((buf as any)._f48))), true);
  }
  // 0x38: u32
  if (data?.nGlyphs !== undefined) view.setUint32(56, Number(data.nGlyphs), true);
  // 0x3c: i32
  if (data?.nMaxFit !== undefined) view.setInt32(60, Number(data.nMaxFit), true);
  return buf;
}

export class GCP_RESULTSAView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get lStructSize(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: pad4

  // 0x08: buffer
  get lpOutString(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x10: pointer
  get lpOrder(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(16, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x18: pointer
  get lpDx(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(24, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x20: pointer
  get lpCaretPos(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(32, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x28: buffer
  get lpClass(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(40, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x30: buffer
  get lpGlyphs(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(48, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x38: u32
  get nGlyphs(): number {
    return this.view.getUint32(56, true);
  }

  // 0x3c: i32
  get nMaxFit(): number {
    return this.view.getInt32(60, true);
  }

  // 0x00: u32
  set lStructSize(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: pad4

  // 0x08: buffer
  set lpOutString(value: Uint8Array | Deno.PointerValue) {
    (this.buf as any)._f8 = value;
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer((this.buf as any)._f8))), true);
  }

  // 0x10: pointer
  set lpOrder(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(16, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x18: pointer
  set lpDx(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(24, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x20: pointer
  set lpCaretPos(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(32, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x28: buffer
  set lpClass(value: Uint8Array | Deno.PointerValue) {
    (this.buf as any)._f40 = value;
    this.view.setBigUint64(40, BigInt(Deno.UnsafePointer.value(util.toPointer((this.buf as any)._f40))), true);
  }

  // 0x30: buffer
  set lpGlyphs(value: Uint8Array | Deno.PointerValue) {
    (this.buf as any)._f48 = value;
    this.view.setBigUint64(48, BigInt(Deno.UnsafePointer.value(util.toPointer((this.buf as any)._f48))), true);
  }

  // 0x38: u32
  set nGlyphs(value: number) {
    this.view.setUint32(56, value, true);
  }

  // 0x3c: i32
  set nMaxFit(value: number) {
    this.view.setInt32(60, value, true);
  }
}

/**
 * Windows.Win32.Graphics.Gdi.GCP_RESULTSW (size: 64)
 */
export interface GCP_RESULTSW {
  /** u32 */
  lStructSize: number;
  /** Windows.Win32.Foundation.PWSTR */
  lpOutString: string | null | Uint8Array | Uint16Array;
  /** ptr */
  lpOrder: Deno.PointerValue | Uint8Array;
  /** ptr */
  lpDx: Deno.PointerValue | Uint8Array;
  /** ptr */
  lpCaretPos: Deno.PointerValue | Uint8Array;
  /** Windows.Win32.Foundation.PSTR */
  lpClass: string | null | Uint8Array;
  /** Windows.Win32.Foundation.PWSTR */
  lpGlyphs: string | null | Uint8Array | Uint16Array;
  /** u32 */
  nGlyphs: number;
  /** i32 */
  nMaxFit: number;
}

export const sizeofGCP_RESULTSW = 64;

export function allocGCP_RESULTSW(data?: Partial<GCP_RESULTSW>): Uint8Array {
  const buf = new Uint8Array(sizeofGCP_RESULTSW);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.lStructSize !== undefined) view.setUint32(0, Number(data.lStructSize), true);
  // 0x04: pad4
  // 0x08: buffer
  if (data?.lpOutString !== undefined) {
    (buf as any)._f8 = util.pwstrToFfi(data.lpOutString);
    view.setBigUint64(8, (buf as any)._f8 === null ? 0n : BigInt(Deno.UnsafePointer.value(Deno.UnsafePointer.of((buf as any)._f8))), true);
  }
  // 0x10: pointer
  if (data?.lpOrder !== undefined) view.setBigUint64(16, data.lpOrder === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.lpOrder))), true);
  // 0x18: pointer
  if (data?.lpDx !== undefined) view.setBigUint64(24, data.lpDx === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.lpDx))), true);
  // 0x20: pointer
  if (data?.lpCaretPos !== undefined) view.setBigUint64(32, data.lpCaretPos === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.lpCaretPos))), true);
  // 0x28: buffer
  if (data?.lpClass !== undefined) {
    (buf as any)._f40 = util.pstrToFfi(data.lpClass);
    view.setBigUint64(40, (buf as any)._f40 === null ? 0n : BigInt(Deno.UnsafePointer.value(Deno.UnsafePointer.of((buf as any)._f40))), true);
  }
  // 0x30: buffer
  if (data?.lpGlyphs !== undefined) {
    (buf as any)._f48 = util.pwstrToFfi(data.lpGlyphs);
    view.setBigUint64(48, (buf as any)._f48 === null ? 0n : BigInt(Deno.UnsafePointer.value(Deno.UnsafePointer.of((buf as any)._f48))), true);
  }
  // 0x38: u32
  if (data?.nGlyphs !== undefined) view.setUint32(56, Number(data.nGlyphs), true);
  // 0x3c: i32
  if (data?.nMaxFit !== undefined) view.setInt32(60, Number(data.nMaxFit), true);
  return buf;
}

export class GCP_RESULTSWView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get lStructSize(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: pad4

  // 0x08: buffer
  get lpOutString(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x10: pointer
  get lpOrder(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(16, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x18: pointer
  get lpDx(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(24, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x20: pointer
  get lpCaretPos(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(32, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x28: buffer
  get lpClass(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(40, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x30: buffer
  get lpGlyphs(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(48, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x38: u32
  get nGlyphs(): number {
    return this.view.getUint32(56, true);
  }

  // 0x3c: i32
  get nMaxFit(): number {
    return this.view.getInt32(60, true);
  }

  // 0x00: u32
  set lStructSize(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: pad4

  // 0x08: buffer
  set lpOutString(value: Uint8Array | Deno.PointerValue) {
    (this.buf as any)._f8 = value;
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer((this.buf as any)._f8))), true);
  }

  // 0x10: pointer
  set lpOrder(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(16, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x18: pointer
  set lpDx(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(24, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x20: pointer
  set lpCaretPos(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(32, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x28: buffer
  set lpClass(value: Uint8Array | Deno.PointerValue) {
    (this.buf as any)._f40 = value;
    this.view.setBigUint64(40, BigInt(Deno.UnsafePointer.value(util.toPointer((this.buf as any)._f40))), true);
  }

  // 0x30: buffer
  set lpGlyphs(value: Uint8Array | Deno.PointerValue) {
    (this.buf as any)._f48 = value;
    this.view.setBigUint64(48, BigInt(Deno.UnsafePointer.value(util.toPointer((this.buf as any)._f48))), true);
  }

  // 0x38: u32
  set nGlyphs(value: number) {
    this.view.setUint32(56, value, true);
  }

  // 0x3c: i32
  set nMaxFit(value: number) {
    this.view.setInt32(60, value, true);
  }
}

/**
 * Windows.Win32.Graphics.Gdi.RASTERIZER_STATUS (size: 8)
 */
export interface RASTERIZER_STATUS {
  /** i16 */
  nSize: number;
  /** i16 */
  wFlags: number;
  /** i16 */
  nLanguageID: number;
}

export const sizeofRASTERIZER_STATUS = 8;

export function allocRASTERIZER_STATUS(data?: Partial<RASTERIZER_STATUS>): Uint8Array {
  const buf = new Uint8Array(sizeofRASTERIZER_STATUS);
  const view = new DataView(buf.buffer);
  // 0x00: i16
  if (data?.nSize !== undefined) view.setInt16(0, Number(data.nSize), true);
  // 0x02: i16
  if (data?.wFlags !== undefined) view.setInt16(2, Number(data.wFlags), true);
  // 0x04: i16
  if (data?.nLanguageID !== undefined) view.setInt16(4, Number(data.nLanguageID), true);
  // 0x06: pad2
  return buf;
}

export class RASTERIZER_STATUSView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: i16
  get nSize(): number {
    return this.view.getInt16(0, true);
  }

  // 0x02: i16
  get wFlags(): number {
    return this.view.getInt16(2, true);
  }

  // 0x04: i16
  get nLanguageID(): number {
    return this.view.getInt16(4, true);
  }

  // 0x06: pad2

  // 0x00: i16
  set nSize(value: number) {
    this.view.setInt16(0, value, true);
  }

  // 0x02: i16
  set wFlags(value: number) {
    this.view.setInt16(2, value, true);
  }

  // 0x04: i16
  set nLanguageID(value: number) {
    this.view.setInt16(4, value, true);
  }

  // 0x06: pad2
}

/**
 * Windows.Win32.Graphics.Gdi.WCRANGE (size: 16)
 */
export interface WCRANGE {
  /** char */
  wcLow: Uint8Array | Deno.PointerValue;
  /** u16 */
  cGlyphs: number;
}

export const sizeofWCRANGE = 16;

export function allocWCRANGE(data?: Partial<WCRANGE>): Uint8Array {
  const buf = new Uint8Array(sizeofWCRANGE);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.wcLow !== undefined) view.setBigUint64(0, data.wcLow === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.wcLow))), true);
  // 0x08: u16
  if (data?.cGlyphs !== undefined) view.setUint16(8, Number(data.cGlyphs), true);
  // 0x0a: pad6
  return buf;
}

export class WCRANGEView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get wcLow(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(0, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x08: u16
  get cGlyphs(): number {
    return this.view.getUint16(8, true);
  }

  // 0x0a: pad6

  // 0x00: pointer
  set wcLow(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(0, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x08: u16
  set cGlyphs(value: number) {
    this.view.setUint16(8, value, true);
  }

  // 0x0a: pad6
}

/**
 * Windows.Win32.Graphics.Gdi.GLYPHSET (size: 24)
 */
export interface GLYPHSET {
  /** u32 */
  cbThis: number;
  /** u32 */
  flAccel: number;
  /** u32 */
  cGlyphsSupported: number;
  /** u32 */
  cRanges: number;
  /** array */
  ranges: Deno.PointerValue;
}

export const sizeofGLYPHSET = 24;

export function allocGLYPHSET(data?: Partial<GLYPHSET>): Uint8Array {
  const buf = new Uint8Array(sizeofGLYPHSET);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.cbThis !== undefined) view.setUint32(0, Number(data.cbThis), true);
  // 0x04: u32
  if (data?.flAccel !== undefined) view.setUint32(4, Number(data.flAccel), true);
  // 0x08: u32
  if (data?.cGlyphsSupported !== undefined) view.setUint32(8, Number(data.cGlyphsSupported), true);
  // 0x0c: u32
  if (data?.cRanges !== undefined) view.setUint32(12, Number(data.cRanges), true);
  // 0x10: pointer
  if (data?.ranges !== undefined) view.setBigUint64(16, data.ranges === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.ranges))), true);
  return buf;
}

export class GLYPHSETView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get cbThis(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: u32
  get flAccel(): number {
    return this.view.getUint32(4, true);
  }

  // 0x08: u32
  get cGlyphsSupported(): number {
    return this.view.getUint32(8, true);
  }

  // 0x0c: u32
  get cRanges(): number {
    return this.view.getUint32(12, true);
  }

  // 0x10: pointer
  get ranges(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(16, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: u32
  set cbThis(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: u32
  set flAccel(value: number) {
    this.view.setUint32(4, value, true);
  }

  // 0x08: u32
  set cGlyphsSupported(value: number) {
    this.view.setUint32(8, value, true);
  }

  // 0x0c: u32
  set cRanges(value: number) {
    this.view.setUint32(12, value, true);
  }

  // 0x10: pointer
  set ranges(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(16, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.Graphics.Gdi.DESIGNVECTOR (size: 16)
 */
export interface DESIGNVECTOR {
  /** u32 */
  dvReserved: number;
  /** u32 */
  dvNumAxes: number;
  /** array */
  dvValues: Deno.PointerValue;
}

export const sizeofDESIGNVECTOR = 16;

export function allocDESIGNVECTOR(data?: Partial<DESIGNVECTOR>): Uint8Array {
  const buf = new Uint8Array(sizeofDESIGNVECTOR);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.dvReserved !== undefined) view.setUint32(0, Number(data.dvReserved), true);
  // 0x04: u32
  if (data?.dvNumAxes !== undefined) view.setUint32(4, Number(data.dvNumAxes), true);
  // 0x08: pointer
  if (data?.dvValues !== undefined) view.setBigUint64(8, data.dvValues === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.dvValues))), true);
  return buf;
}

export class DESIGNVECTORView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get dvReserved(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: u32
  get dvNumAxes(): number {
    return this.view.getUint32(4, true);
  }

  // 0x08: pointer
  get dvValues(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: u32
  set dvReserved(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: u32
  set dvNumAxes(value: number) {
    this.view.setUint32(4, value, true);
  }

  // 0x08: pointer
  set dvValues(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.Graphics.Gdi.AXISINFOA (size: 16)
 */
export interface AXISINFOA {
  /** i32 */
  axMinValue: number;
  /** i32 */
  axMaxValue: number;
  /** array */
  axAxisName: Deno.PointerValue;
}

export const sizeofAXISINFOA = 16;

export function allocAXISINFOA(data?: Partial<AXISINFOA>): Uint8Array {
  const buf = new Uint8Array(sizeofAXISINFOA);
  const view = new DataView(buf.buffer);
  // 0x00: i32
  if (data?.axMinValue !== undefined) view.setInt32(0, Number(data.axMinValue), true);
  // 0x04: i32
  if (data?.axMaxValue !== undefined) view.setInt32(4, Number(data.axMaxValue), true);
  // 0x08: pointer
  if (data?.axAxisName !== undefined) view.setBigUint64(8, data.axAxisName === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.axAxisName))), true);
  return buf;
}

export class AXISINFOAView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: i32
  get axMinValue(): number {
    return this.view.getInt32(0, true);
  }

  // 0x04: i32
  get axMaxValue(): number {
    return this.view.getInt32(4, true);
  }

  // 0x08: pointer
  get axAxisName(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: i32
  set axMinValue(value: number) {
    this.view.setInt32(0, value, true);
  }

  // 0x04: i32
  set axMaxValue(value: number) {
    this.view.setInt32(4, value, true);
  }

  // 0x08: pointer
  set axAxisName(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.Graphics.Gdi.AXISINFOW (size: 16)
 */
export interface AXISINFOW {
  /** i32 */
  axMinValue: number;
  /** i32 */
  axMaxValue: number;
  /** array */
  axAxisName: Deno.PointerValue;
}

export const sizeofAXISINFOW = 16;

export function allocAXISINFOW(data?: Partial<AXISINFOW>): Uint8Array {
  const buf = new Uint8Array(sizeofAXISINFOW);
  const view = new DataView(buf.buffer);
  // 0x00: i32
  if (data?.axMinValue !== undefined) view.setInt32(0, Number(data.axMinValue), true);
  // 0x04: i32
  if (data?.axMaxValue !== undefined) view.setInt32(4, Number(data.axMaxValue), true);
  // 0x08: pointer
  if (data?.axAxisName !== undefined) view.setBigUint64(8, data.axAxisName === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.axAxisName))), true);
  return buf;
}

export class AXISINFOWView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: i32
  get axMinValue(): number {
    return this.view.getInt32(0, true);
  }

  // 0x04: i32
  get axMaxValue(): number {
    return this.view.getInt32(4, true);
  }

  // 0x08: pointer
  get axAxisName(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: i32
  set axMinValue(value: number) {
    this.view.setInt32(0, value, true);
  }

  // 0x04: i32
  set axMaxValue(value: number) {
    this.view.setInt32(4, value, true);
  }

  // 0x08: pointer
  set axAxisName(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.Graphics.Gdi.AXESLISTA (size: 16)
 */
export interface AXESLISTA {
  /** u32 */
  axlReserved: number;
  /** u32 */
  axlNumAxes: number;
  /** array */
  axlAxisInfo: Deno.PointerValue;
}

export const sizeofAXESLISTA = 16;

export function allocAXESLISTA(data?: Partial<AXESLISTA>): Uint8Array {
  const buf = new Uint8Array(sizeofAXESLISTA);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.axlReserved !== undefined) view.setUint32(0, Number(data.axlReserved), true);
  // 0x04: u32
  if (data?.axlNumAxes !== undefined) view.setUint32(4, Number(data.axlNumAxes), true);
  // 0x08: pointer
  if (data?.axlAxisInfo !== undefined) view.setBigUint64(8, data.axlAxisInfo === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.axlAxisInfo))), true);
  return buf;
}

export class AXESLISTAView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get axlReserved(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: u32
  get axlNumAxes(): number {
    return this.view.getUint32(4, true);
  }

  // 0x08: pointer
  get axlAxisInfo(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: u32
  set axlReserved(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: u32
  set axlNumAxes(value: number) {
    this.view.setUint32(4, value, true);
  }

  // 0x08: pointer
  set axlAxisInfo(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.Graphics.Gdi.AXESLISTW (size: 16)
 */
export interface AXESLISTW {
  /** u32 */
  axlReserved: number;
  /** u32 */
  axlNumAxes: number;
  /** array */
  axlAxisInfo: Deno.PointerValue;
}

export const sizeofAXESLISTW = 16;

export function allocAXESLISTW(data?: Partial<AXESLISTW>): Uint8Array {
  const buf = new Uint8Array(sizeofAXESLISTW);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.axlReserved !== undefined) view.setUint32(0, Number(data.axlReserved), true);
  // 0x04: u32
  if (data?.axlNumAxes !== undefined) view.setUint32(4, Number(data.axlNumAxes), true);
  // 0x08: pointer
  if (data?.axlAxisInfo !== undefined) view.setBigUint64(8, data.axlAxisInfo === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.axlAxisInfo))), true);
  return buf;
}

export class AXESLISTWView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get axlReserved(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: u32
  get axlNumAxes(): number {
    return this.view.getUint32(4, true);
  }

  // 0x08: pointer
  get axlAxisInfo(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: u32
  set axlReserved(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: u32
  set axlNumAxes(value: number) {
    this.view.setUint32(4, value, true);
  }

  // 0x08: pointer
  set axlAxisInfo(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.Graphics.Gdi.ENUMLOGFONTEXDVA (size: 16)
 */
export interface ENUMLOGFONTEXDVA {
  /** Windows.Win32.Graphics.Gdi.ENUMLOGFONTEXA */
  elfEnumLogfontEx: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.Graphics.Gdi.DESIGNVECTOR */
  elfDesignVector: Uint8Array | Deno.PointerValue;
}

export const sizeofENUMLOGFONTEXDVA = 16;

export function allocENUMLOGFONTEXDVA(data?: Partial<ENUMLOGFONTEXDVA>): Uint8Array {
  const buf = new Uint8Array(sizeofENUMLOGFONTEXDVA);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.elfEnumLogfontEx !== undefined) view.setBigUint64(0, data.elfEnumLogfontEx === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.elfEnumLogfontEx))), true);
  // 0x08: pointer
  if (data?.elfDesignVector !== undefined) view.setBigUint64(8, data.elfDesignVector === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.elfDesignVector))), true);
  return buf;
}

export class ENUMLOGFONTEXDVAView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get elfEnumLogfontEx(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(0, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x08: pointer
  get elfDesignVector(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: pointer
  set elfEnumLogfontEx(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(0, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x08: pointer
  set elfDesignVector(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.Graphics.Gdi.ENUMLOGFONTEXDVW (size: 16)
 */
export interface ENUMLOGFONTEXDVW {
  /** Windows.Win32.Graphics.Gdi.ENUMLOGFONTEXW */
  elfEnumLogfontEx: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.Graphics.Gdi.DESIGNVECTOR */
  elfDesignVector: Uint8Array | Deno.PointerValue;
}

export const sizeofENUMLOGFONTEXDVW = 16;

export function allocENUMLOGFONTEXDVW(data?: Partial<ENUMLOGFONTEXDVW>): Uint8Array {
  const buf = new Uint8Array(sizeofENUMLOGFONTEXDVW);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.elfEnumLogfontEx !== undefined) view.setBigUint64(0, data.elfEnumLogfontEx === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.elfEnumLogfontEx))), true);
  // 0x08: pointer
  if (data?.elfDesignVector !== undefined) view.setBigUint64(8, data.elfDesignVector === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.elfDesignVector))), true);
  return buf;
}

export class ENUMLOGFONTEXDVWView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get elfEnumLogfontEx(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(0, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x08: pointer
  get elfDesignVector(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: pointer
  set elfEnumLogfontEx(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(0, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x08: pointer
  set elfDesignVector(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.Graphics.Gdi.TRIVERTEX (size: 16)
 */
export interface TRIVERTEX {
  /** i32 */
  x: number;
  /** i32 */
  y: number;
  /** u16 */
  Red: number;
  /** u16 */
  Green: number;
  /** u16 */
  Blue: number;
  /** u16 */
  Alpha: number;
}

export const sizeofTRIVERTEX = 16;

export function allocTRIVERTEX(data?: Partial<TRIVERTEX>): Uint8Array {
  const buf = new Uint8Array(sizeofTRIVERTEX);
  const view = new DataView(buf.buffer);
  // 0x00: i32
  if (data?.x !== undefined) view.setInt32(0, Number(data.x), true);
  // 0x04: i32
  if (data?.y !== undefined) view.setInt32(4, Number(data.y), true);
  // 0x08: u16
  if (data?.Red !== undefined) view.setUint16(8, Number(data.Red), true);
  // 0x0a: u16
  if (data?.Green !== undefined) view.setUint16(10, Number(data.Green), true);
  // 0x0c: u16
  if (data?.Blue !== undefined) view.setUint16(12, Number(data.Blue), true);
  // 0x0e: u16
  if (data?.Alpha !== undefined) view.setUint16(14, Number(data.Alpha), true);
  return buf;
}

export class TRIVERTEXView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: i32
  get x(): number {
    return this.view.getInt32(0, true);
  }

  // 0x04: i32
  get y(): number {
    return this.view.getInt32(4, true);
  }

  // 0x08: u16
  get Red(): number {
    return this.view.getUint16(8, true);
  }

  // 0x0a: u16
  get Green(): number {
    return this.view.getUint16(10, true);
  }

  // 0x0c: u16
  get Blue(): number {
    return this.view.getUint16(12, true);
  }

  // 0x0e: u16
  get Alpha(): number {
    return this.view.getUint16(14, true);
  }

  // 0x00: i32
  set x(value: number) {
    this.view.setInt32(0, value, true);
  }

  // 0x04: i32
  set y(value: number) {
    this.view.setInt32(4, value, true);
  }

  // 0x08: u16
  set Red(value: number) {
    this.view.setUint16(8, value, true);
  }

  // 0x0a: u16
  set Green(value: number) {
    this.view.setUint16(10, value, true);
  }

  // 0x0c: u16
  set Blue(value: number) {
    this.view.setUint16(12, value, true);
  }

  // 0x0e: u16
  set Alpha(value: number) {
    this.view.setUint16(14, value, true);
  }
}

/**
 * Windows.Win32.Graphics.Gdi.GRADIENT_TRIANGLE (size: 16)
 */
export interface GRADIENT_TRIANGLE {
  /** u32 */
  Vertex1: number;
  /** u32 */
  Vertex2: number;
  /** u32 */
  Vertex3: number;
}

export const sizeofGRADIENT_TRIANGLE = 16;

export function allocGRADIENT_TRIANGLE(data?: Partial<GRADIENT_TRIANGLE>): Uint8Array {
  const buf = new Uint8Array(sizeofGRADIENT_TRIANGLE);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.Vertex1 !== undefined) view.setUint32(0, Number(data.Vertex1), true);
  // 0x04: u32
  if (data?.Vertex2 !== undefined) view.setUint32(4, Number(data.Vertex2), true);
  // 0x08: u32
  if (data?.Vertex3 !== undefined) view.setUint32(8, Number(data.Vertex3), true);
  // 0x0c: pad4
  return buf;
}

export class GRADIENT_TRIANGLEView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get Vertex1(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: u32
  get Vertex2(): number {
    return this.view.getUint32(4, true);
  }

  // 0x08: u32
  get Vertex3(): number {
    return this.view.getUint32(8, true);
  }

  // 0x0c: pad4

  // 0x00: u32
  set Vertex1(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: u32
  set Vertex2(value: number) {
    this.view.setUint32(4, value, true);
  }

  // 0x08: u32
  set Vertex3(value: number) {
    this.view.setUint32(8, value, true);
  }

  // 0x0c: pad4
}

/**
 * Windows.Win32.Graphics.Gdi.GRADIENT_RECT (size: 8)
 */
export interface GRADIENT_RECT {
  /** u32 */
  UpperLeft: number;
  /** u32 */
  LowerRight: number;
}

export const sizeofGRADIENT_RECT = 8;

export function allocGRADIENT_RECT(data?: Partial<GRADIENT_RECT>): Uint8Array {
  const buf = new Uint8Array(sizeofGRADIENT_RECT);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.UpperLeft !== undefined) view.setUint32(0, Number(data.UpperLeft), true);
  // 0x04: u32
  if (data?.LowerRight !== undefined) view.setUint32(4, Number(data.LowerRight), true);
  return buf;
}

export class GRADIENT_RECTView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get UpperLeft(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: u32
  get LowerRight(): number {
    return this.view.getUint32(4, true);
  }

  // 0x00: u32
  set UpperLeft(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: u32
  set LowerRight(value: number) {
    this.view.setUint32(4, value, true);
  }
}

/**
 * Windows.Win32.Graphics.Gdi.BLENDFUNCTION (size: 8)
 */
export interface BLENDFUNCTION {
  /** u8 */
  BlendOp: number;
  /** u8 */
  BlendFlags: number;
  /** u8 */
  SourceConstantAlpha: number;
  /** u8 */
  AlphaFormat: number;
}

export const sizeofBLENDFUNCTION = 8;

export function allocBLENDFUNCTION(data?: Partial<BLENDFUNCTION>): Uint8Array {
  const buf = new Uint8Array(sizeofBLENDFUNCTION);
  const view = new DataView(buf.buffer);
  // 0x00: u8
  if (data?.BlendOp !== undefined) view.setUint8(0, Number(data.BlendOp));
  // 0x01: u8
  if (data?.BlendFlags !== undefined) view.setUint8(1, Number(data.BlendFlags));
  // 0x02: u8
  if (data?.SourceConstantAlpha !== undefined) view.setUint8(2, Number(data.SourceConstantAlpha));
  // 0x03: u8
  if (data?.AlphaFormat !== undefined) view.setUint8(3, Number(data.AlphaFormat));
  // 0x04: pad4
  return buf;
}

export class BLENDFUNCTIONView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u8
  get BlendOp(): number {
    return this.view.getUint8(0);
  }

  // 0x01: u8
  get BlendFlags(): number {
    return this.view.getUint8(1);
  }

  // 0x02: u8
  get SourceConstantAlpha(): number {
    return this.view.getUint8(2);
  }

  // 0x03: u8
  get AlphaFormat(): number {
    return this.view.getUint8(3);
  }

  // 0x04: pad4

  // 0x00: u8
  set BlendOp(value: number) {
    this.view.setUint8(0, value);
  }

  // 0x01: u8
  set BlendFlags(value: number) {
    this.view.setUint8(1, value);
  }

  // 0x02: u8
  set SourceConstantAlpha(value: number) {
    this.view.setUint8(2, value);
  }

  // 0x03: u8
  set AlphaFormat(value: number) {
    this.view.setUint8(3, value);
  }

  // 0x04: pad4
}

export type HANDLE = Deno.PointerValue;

/**
 * Windows.Win32.Graphics.Gdi.DIBSECTION (size: 40)
 */
export interface DIBSECTION {
  /** Windows.Win32.Graphics.Gdi.BITMAP */
  dsBm: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.Graphics.Gdi.BITMAPINFOHEADER */
  dsBmih: Uint8Array | Deno.PointerValue;
  /** array */
  dsBitfields: Deno.PointerValue;
  /** Windows.Win32.Foundation.HANDLE */
  dshSection: Uint8Array | Deno.PointerValue;
  /** u32 */
  dsOffset: number;
}

export const sizeofDIBSECTION = 40;

export function allocDIBSECTION(data?: Partial<DIBSECTION>): Uint8Array {
  const buf = new Uint8Array(sizeofDIBSECTION);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.dsBm !== undefined) view.setBigUint64(0, data.dsBm === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.dsBm))), true);
  // 0x08: pointer
  if (data?.dsBmih !== undefined) view.setBigUint64(8, data.dsBmih === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.dsBmih))), true);
  // 0x10: pointer
  if (data?.dsBitfields !== undefined) view.setBigUint64(16, data.dsBitfields === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.dsBitfields))), true);
  // 0x18: pointer
  if (data?.dshSection !== undefined) view.setBigUint64(24, data.dshSection === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.dshSection))), true);
  // 0x20: u32
  if (data?.dsOffset !== undefined) view.setUint32(32, Number(data.dsOffset), true);
  // 0x24: pad4
  return buf;
}

export class DIBSECTIONView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get dsBm(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(0, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x08: pointer
  get dsBmih(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x10: pointer
  get dsBitfields(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(16, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x18: pointer
  get dshSection(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(24, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x20: u32
  get dsOffset(): number {
    return this.view.getUint32(32, true);
  }

  // 0x24: pad4

  // 0x00: pointer
  set dsBm(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(0, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x08: pointer
  set dsBmih(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x10: pointer
  set dsBitfields(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(16, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x18: pointer
  set dshSection(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(24, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x20: u32
  set dsOffset(value: number) {
    this.view.setUint32(32, value, true);
  }

  // 0x24: pad4
}

/**
 * Windows.Win32.Graphics.Gdi.COLORADJUSTMENT (size: 24)
 */
export interface COLORADJUSTMENT {
  /** u16 */
  caSize: number;
  /** u16 */
  caFlags: number;
  /** u16 */
  caIlluminantIndex: number;
  /** u16 */
  caRedGamma: number;
  /** u16 */
  caGreenGamma: number;
  /** u16 */
  caBlueGamma: number;
  /** u16 */
  caReferenceBlack: number;
  /** u16 */
  caReferenceWhite: number;
  /** i16 */
  caContrast: number;
  /** i16 */
  caBrightness: number;
  /** i16 */
  caColorfulness: number;
  /** i16 */
  caRedGreenTint: number;
}

export const sizeofCOLORADJUSTMENT = 24;

export function allocCOLORADJUSTMENT(data?: Partial<COLORADJUSTMENT>): Uint8Array {
  const buf = new Uint8Array(sizeofCOLORADJUSTMENT);
  const view = new DataView(buf.buffer);
  // 0x00: u16
  if (data?.caSize !== undefined) view.setUint16(0, Number(data.caSize), true);
  // 0x02: u16
  if (data?.caFlags !== undefined) view.setUint16(2, Number(data.caFlags), true);
  // 0x04: u16
  if (data?.caIlluminantIndex !== undefined) view.setUint16(4, Number(data.caIlluminantIndex), true);
  // 0x06: u16
  if (data?.caRedGamma !== undefined) view.setUint16(6, Number(data.caRedGamma), true);
  // 0x08: u16
  if (data?.caGreenGamma !== undefined) view.setUint16(8, Number(data.caGreenGamma), true);
  // 0x0a: u16
  if (data?.caBlueGamma !== undefined) view.setUint16(10, Number(data.caBlueGamma), true);
  // 0x0c: u16
  if (data?.caReferenceBlack !== undefined) view.setUint16(12, Number(data.caReferenceBlack), true);
  // 0x0e: u16
  if (data?.caReferenceWhite !== undefined) view.setUint16(14, Number(data.caReferenceWhite), true);
  // 0x10: i16
  if (data?.caContrast !== undefined) view.setInt16(16, Number(data.caContrast), true);
  // 0x12: i16
  if (data?.caBrightness !== undefined) view.setInt16(18, Number(data.caBrightness), true);
  // 0x14: i16
  if (data?.caColorfulness !== undefined) view.setInt16(20, Number(data.caColorfulness), true);
  // 0x16: i16
  if (data?.caRedGreenTint !== undefined) view.setInt16(22, Number(data.caRedGreenTint), true);
  return buf;
}

export class COLORADJUSTMENTView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u16
  get caSize(): number {
    return this.view.getUint16(0, true);
  }

  // 0x02: u16
  get caFlags(): number {
    return this.view.getUint16(2, true);
  }

  // 0x04: u16
  get caIlluminantIndex(): number {
    return this.view.getUint16(4, true);
  }

  // 0x06: u16
  get caRedGamma(): number {
    return this.view.getUint16(6, true);
  }

  // 0x08: u16
  get caGreenGamma(): number {
    return this.view.getUint16(8, true);
  }

  // 0x0a: u16
  get caBlueGamma(): number {
    return this.view.getUint16(10, true);
  }

  // 0x0c: u16
  get caReferenceBlack(): number {
    return this.view.getUint16(12, true);
  }

  // 0x0e: u16
  get caReferenceWhite(): number {
    return this.view.getUint16(14, true);
  }

  // 0x10: i16
  get caContrast(): number {
    return this.view.getInt16(16, true);
  }

  // 0x12: i16
  get caBrightness(): number {
    return this.view.getInt16(18, true);
  }

  // 0x14: i16
  get caColorfulness(): number {
    return this.view.getInt16(20, true);
  }

  // 0x16: i16
  get caRedGreenTint(): number {
    return this.view.getInt16(22, true);
  }

  // 0x00: u16
  set caSize(value: number) {
    this.view.setUint16(0, value, true);
  }

  // 0x02: u16
  set caFlags(value: number) {
    this.view.setUint16(2, value, true);
  }

  // 0x04: u16
  set caIlluminantIndex(value: number) {
    this.view.setUint16(4, value, true);
  }

  // 0x06: u16
  set caRedGamma(value: number) {
    this.view.setUint16(6, value, true);
  }

  // 0x08: u16
  set caGreenGamma(value: number) {
    this.view.setUint16(8, value, true);
  }

  // 0x0a: u16
  set caBlueGamma(value: number) {
    this.view.setUint16(10, value, true);
  }

  // 0x0c: u16
  set caReferenceBlack(value: number) {
    this.view.setUint16(12, value, true);
  }

  // 0x0e: u16
  set caReferenceWhite(value: number) {
    this.view.setUint16(14, value, true);
  }

  // 0x10: i16
  set caContrast(value: number) {
    this.view.setInt16(16, value, true);
  }

  // 0x12: i16
  set caBrightness(value: number) {
    this.view.setInt16(18, value, true);
  }

  // 0x14: i16
  set caColorfulness(value: number) {
    this.view.setInt16(20, value, true);
  }

  // 0x16: i16
  set caRedGreenTint(value: number) {
    this.view.setInt16(22, value, true);
  }
}

/**
 * Windows.Win32.Graphics.Gdi.KERNINGPAIR (size: 8)
 */
export interface KERNINGPAIR {
  /** u16 */
  wFirst: number;
  /** u16 */
  wSecond: number;
  /** i32 */
  iKernAmount: number;
}

export const sizeofKERNINGPAIR = 8;

export function allocKERNINGPAIR(data?: Partial<KERNINGPAIR>): Uint8Array {
  const buf = new Uint8Array(sizeofKERNINGPAIR);
  const view = new DataView(buf.buffer);
  // 0x00: u16
  if (data?.wFirst !== undefined) view.setUint16(0, Number(data.wFirst), true);
  // 0x02: u16
  if (data?.wSecond !== undefined) view.setUint16(2, Number(data.wSecond), true);
  // 0x04: i32
  if (data?.iKernAmount !== undefined) view.setInt32(4, Number(data.iKernAmount), true);
  return buf;
}

export class KERNINGPAIRView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u16
  get wFirst(): number {
    return this.view.getUint16(0, true);
  }

  // 0x02: u16
  get wSecond(): number {
    return this.view.getUint16(2, true);
  }

  // 0x04: i32
  get iKernAmount(): number {
    return this.view.getInt32(4, true);
  }

  // 0x00: u16
  set wFirst(value: number) {
    this.view.setUint16(0, value, true);
  }

  // 0x02: u16
  set wSecond(value: number) {
    this.view.setUint16(2, value, true);
  }

  // 0x04: i32
  set iKernAmount(value: number) {
    this.view.setInt32(4, value, true);
  }
}

/**
 * Windows.Win32.Graphics.Gdi.EMR (size: 8)
 */
export interface EMR {
  /** Windows.Win32.Graphics.Gdi.ENHANCED_METAFILE_RECORD_TYPE */
  iType: ENHANCED_METAFILE_RECORD_TYPE;
  /** u32 */
  nSize: number;
}

export const sizeofEMR = 8;

export function allocEMR(data?: Partial<EMR>): Uint8Array {
  const buf = new Uint8Array(sizeofEMR);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.iType !== undefined) view.setUint32(0, Number(data.iType), true);
  // 0x04: u32
  if (data?.nSize !== undefined) view.setUint32(4, Number(data.nSize), true);
  return buf;
}

export class EMRView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get iType(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: u32
  get nSize(): number {
    return this.view.getUint32(4, true);
  }

  // 0x00: u32
  set iType(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: u32
  set nSize(value: number) {
    this.view.setUint32(4, value, true);
  }
}

/**
 * Windows.Win32.Foundation.POINTL (size: 8)
 */
export interface POINTL {
  /** i32 */
  x: number;
  /** i32 */
  y: number;
}

export const sizeofPOINTL = 8;

export function allocPOINTL(data?: Partial<POINTL>): Uint8Array {
  const buf = new Uint8Array(sizeofPOINTL);
  const view = new DataView(buf.buffer);
  // 0x00: i32
  if (data?.x !== undefined) view.setInt32(0, Number(data.x), true);
  // 0x04: i32
  if (data?.y !== undefined) view.setInt32(4, Number(data.y), true);
  return buf;
}

export class POINTLView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: i32
  get x(): number {
    return this.view.getInt32(0, true);
  }

  // 0x04: i32
  get y(): number {
    return this.view.getInt32(4, true);
  }

  // 0x00: i32
  set x(value: number) {
    this.view.setInt32(0, value, true);
  }

  // 0x04: i32
  set y(value: number) {
    this.view.setInt32(4, value, true);
  }
}

/**
 * Windows.Win32.Graphics.Gdi.EMRTEXT (size: 40)
 */
export interface EMRTEXT {
  /** Windows.Win32.Foundation.POINTL */
  ptlReference: Uint8Array | Deno.PointerValue;
  /** u32 */
  nChars: number;
  /** u32 */
  offString: number;
  /** u32 */
  fOptions: number;
  /** Windows.Win32.Foundation.RECTL */
  rcl: Uint8Array | Deno.PointerValue;
  /** u32 */
  offDx: number;
}

export const sizeofEMRTEXT = 40;

export function allocEMRTEXT(data?: Partial<EMRTEXT>): Uint8Array {
  const buf = new Uint8Array(sizeofEMRTEXT);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.ptlReference !== undefined) view.setBigUint64(0, data.ptlReference === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.ptlReference))), true);
  // 0x08: u32
  if (data?.nChars !== undefined) view.setUint32(8, Number(data.nChars), true);
  // 0x0c: u32
  if (data?.offString !== undefined) view.setUint32(12, Number(data.offString), true);
  // 0x10: u32
  if (data?.fOptions !== undefined) view.setUint32(16, Number(data.fOptions), true);
  // 0x14: pad4
  // 0x18: pointer
  if (data?.rcl !== undefined) view.setBigUint64(24, data.rcl === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.rcl))), true);
  // 0x20: u32
  if (data?.offDx !== undefined) view.setUint32(32, Number(data.offDx), true);
  // 0x24: pad4
  return buf;
}

export class EMRTEXTView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get ptlReference(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(0, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x08: u32
  get nChars(): number {
    return this.view.getUint32(8, true);
  }

  // 0x0c: u32
  get offString(): number {
    return this.view.getUint32(12, true);
  }

  // 0x10: u32
  get fOptions(): number {
    return this.view.getUint32(16, true);
  }

  // 0x14: pad4

  // 0x18: pointer
  get rcl(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(24, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x20: u32
  get offDx(): number {
    return this.view.getUint32(32, true);
  }

  // 0x24: pad4

  // 0x00: pointer
  set ptlReference(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(0, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x08: u32
  set nChars(value: number) {
    this.view.setUint32(8, value, true);
  }

  // 0x0c: u32
  set offString(value: number) {
    this.view.setUint32(12, value, true);
  }

  // 0x10: u32
  set fOptions(value: number) {
    this.view.setUint32(16, value, true);
  }

  // 0x14: pad4

  // 0x18: pointer
  set rcl(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(24, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x20: u32
  set offDx(value: number) {
    this.view.setUint32(32, value, true);
  }

  // 0x24: pad4
}

/**
 * Windows.Win32.Graphics.Gdi.ABORTPATH (size: 8)
 */
export interface ABORTPATH {
  /** Windows.Win32.Graphics.Gdi.EMR */
  emr: Uint8Array | Deno.PointerValue;
}

export const sizeofABORTPATH = 8;

export function allocABORTPATH(data?: Partial<ABORTPATH>): Uint8Array {
  const buf = new Uint8Array(sizeofABORTPATH);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.emr !== undefined) view.setBigUint64(0, data.emr === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.emr))), true);
  return buf;
}

export class ABORTPATHView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get emr(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(0, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: pointer
  set emr(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(0, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.Graphics.Gdi.EMRSELECTCLIPPATH (size: 16)
 */
export interface EMRSELECTCLIPPATH {
  /** Windows.Win32.Graphics.Gdi.EMR */
  emr: Uint8Array | Deno.PointerValue;
  /** u32 */
  iMode: number;
}

export const sizeofEMRSELECTCLIPPATH = 16;

export function allocEMRSELECTCLIPPATH(data?: Partial<EMRSELECTCLIPPATH>): Uint8Array {
  const buf = new Uint8Array(sizeofEMRSELECTCLIPPATH);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.emr !== undefined) view.setBigUint64(0, data.emr === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.emr))), true);
  // 0x08: u32
  if (data?.iMode !== undefined) view.setUint32(8, Number(data.iMode), true);
  // 0x0c: pad4
  return buf;
}

export class EMRSELECTCLIPPATHView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get emr(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(0, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x08: u32
  get iMode(): number {
    return this.view.getUint32(8, true);
  }

  // 0x0c: pad4

  // 0x00: pointer
  set emr(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(0, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x08: u32
  set iMode(value: number) {
    this.view.setUint32(8, value, true);
  }

  // 0x0c: pad4
}

/**
 * Windows.Win32.Graphics.Gdi.EMRSETMITERLIMIT (size: 16)
 */
export interface EMRSETMITERLIMIT {
  /** Windows.Win32.Graphics.Gdi.EMR */
  emr: Uint8Array | Deno.PointerValue;
  /** f32 */
  eMiterLimit: number;
}

export const sizeofEMRSETMITERLIMIT = 16;

export function allocEMRSETMITERLIMIT(data?: Partial<EMRSETMITERLIMIT>): Uint8Array {
  const buf = new Uint8Array(sizeofEMRSETMITERLIMIT);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.emr !== undefined) view.setBigUint64(0, data.emr === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.emr))), true);
  // 0x08: f32
  if (data?.eMiterLimit !== undefined) view.setFloat32(8, Number(data.eMiterLimit), true);
  // 0x0c: pad4
  return buf;
}

export class EMRSETMITERLIMITView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get emr(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(0, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x08: f32
  get eMiterLimit(): number {
    return this.view.getFloat32(8, true);
  }

  // 0x0c: pad4

  // 0x00: pointer
  set emr(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(0, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x08: f32
  set eMiterLimit(value: number) {
    this.view.setFloat32(8, value, true);
  }

  // 0x0c: pad4
}

/**
 * Windows.Win32.Graphics.Gdi.EMRRESTOREDC (size: 16)
 */
export interface EMRRESTOREDC {
  /** Windows.Win32.Graphics.Gdi.EMR */
  emr: Uint8Array | Deno.PointerValue;
  /** i32 */
  iRelative: number;
}

export const sizeofEMRRESTOREDC = 16;

export function allocEMRRESTOREDC(data?: Partial<EMRRESTOREDC>): Uint8Array {
  const buf = new Uint8Array(sizeofEMRRESTOREDC);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.emr !== undefined) view.setBigUint64(0, data.emr === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.emr))), true);
  // 0x08: i32
  if (data?.iRelative !== undefined) view.setInt32(8, Number(data.iRelative), true);
  // 0x0c: pad4
  return buf;
}

export class EMRRESTOREDCView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get emr(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(0, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x08: i32
  get iRelative(): number {
    return this.view.getInt32(8, true);
  }

  // 0x0c: pad4

  // 0x00: pointer
  set emr(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(0, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x08: i32
  set iRelative(value: number) {
    this.view.setInt32(8, value, true);
  }

  // 0x0c: pad4
}

/**
 * Windows.Win32.Graphics.Gdi.EMRSETARCDIRECTION (size: 16)
 */
export interface EMRSETARCDIRECTION {
  /** Windows.Win32.Graphics.Gdi.EMR */
  emr: Uint8Array | Deno.PointerValue;
  /** u32 */
  iArcDirection: number;
}

export const sizeofEMRSETARCDIRECTION = 16;

export function allocEMRSETARCDIRECTION(data?: Partial<EMRSETARCDIRECTION>): Uint8Array {
  const buf = new Uint8Array(sizeofEMRSETARCDIRECTION);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.emr !== undefined) view.setBigUint64(0, data.emr === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.emr))), true);
  // 0x08: u32
  if (data?.iArcDirection !== undefined) view.setUint32(8, Number(data.iArcDirection), true);
  // 0x0c: pad4
  return buf;
}

export class EMRSETARCDIRECTIONView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get emr(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(0, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x08: u32
  get iArcDirection(): number {
    return this.view.getUint32(8, true);
  }

  // 0x0c: pad4

  // 0x00: pointer
  set emr(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(0, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x08: u32
  set iArcDirection(value: number) {
    this.view.setUint32(8, value, true);
  }

  // 0x0c: pad4
}

/**
 * Windows.Win32.Graphics.Gdi.EMRSETMAPPERFLAGS (size: 16)
 */
export interface EMRSETMAPPERFLAGS {
  /** Windows.Win32.Graphics.Gdi.EMR */
  emr: Uint8Array | Deno.PointerValue;
  /** u32 */
  dwFlags: number;
}

export const sizeofEMRSETMAPPERFLAGS = 16;

export function allocEMRSETMAPPERFLAGS(data?: Partial<EMRSETMAPPERFLAGS>): Uint8Array {
  const buf = new Uint8Array(sizeofEMRSETMAPPERFLAGS);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.emr !== undefined) view.setBigUint64(0, data.emr === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.emr))), true);
  // 0x08: u32
  if (data?.dwFlags !== undefined) view.setUint32(8, Number(data.dwFlags), true);
  // 0x0c: pad4
  return buf;
}

export class EMRSETMAPPERFLAGSView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get emr(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(0, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x08: u32
  get dwFlags(): number {
    return this.view.getUint32(8, true);
  }

  // 0x0c: pad4

  // 0x00: pointer
  set emr(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(0, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x08: u32
  set dwFlags(value: number) {
    this.view.setUint32(8, value, true);
  }

  // 0x0c: pad4
}

/**
 * Windows.Win32.Graphics.Gdi.EMRSETTEXTCOLOR (size: 16)
 */
export interface EMRSETTEXTCOLOR {
  /** Windows.Win32.Graphics.Gdi.EMR */
  emr: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.Foundation.COLORREF */
  crColor: Uint8Array | Deno.PointerValue;
}

export const sizeofEMRSETTEXTCOLOR = 16;

export function allocEMRSETTEXTCOLOR(data?: Partial<EMRSETTEXTCOLOR>): Uint8Array {
  const buf = new Uint8Array(sizeofEMRSETTEXTCOLOR);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.emr !== undefined) view.setBigUint64(0, data.emr === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.emr))), true);
  // 0x08: pointer
  if (data?.crColor !== undefined) view.setBigUint64(8, data.crColor === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.crColor))), true);
  return buf;
}

export class EMRSETTEXTCOLORView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get emr(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(0, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x08: pointer
  get crColor(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: pointer
  set emr(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(0, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x08: pointer
  set crColor(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.Graphics.Gdi.EMRSELECTOBJECT (size: 16)
 */
export interface EMRSELECTOBJECT {
  /** Windows.Win32.Graphics.Gdi.EMR */
  emr: Uint8Array | Deno.PointerValue;
  /** u32 */
  ihObject: number;
}

export const sizeofEMRSELECTOBJECT = 16;

export function allocEMRSELECTOBJECT(data?: Partial<EMRSELECTOBJECT>): Uint8Array {
  const buf = new Uint8Array(sizeofEMRSELECTOBJECT);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.emr !== undefined) view.setBigUint64(0, data.emr === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.emr))), true);
  // 0x08: u32
  if (data?.ihObject !== undefined) view.setUint32(8, Number(data.ihObject), true);
  // 0x0c: pad4
  return buf;
}

export class EMRSELECTOBJECTView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get emr(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(0, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x08: u32
  get ihObject(): number {
    return this.view.getUint32(8, true);
  }

  // 0x0c: pad4

  // 0x00: pointer
  set emr(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(0, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x08: u32
  set ihObject(value: number) {
    this.view.setUint32(8, value, true);
  }

  // 0x0c: pad4
}

/**
 * Windows.Win32.Graphics.Gdi.EMRSELECTPALETTE (size: 16)
 */
export interface EMRSELECTPALETTE {
  /** Windows.Win32.Graphics.Gdi.EMR */
  emr: Uint8Array | Deno.PointerValue;
  /** u32 */
  ihPal: number;
}

export const sizeofEMRSELECTPALETTE = 16;

export function allocEMRSELECTPALETTE(data?: Partial<EMRSELECTPALETTE>): Uint8Array {
  const buf = new Uint8Array(sizeofEMRSELECTPALETTE);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.emr !== undefined) view.setBigUint64(0, data.emr === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.emr))), true);
  // 0x08: u32
  if (data?.ihPal !== undefined) view.setUint32(8, Number(data.ihPal), true);
  // 0x0c: pad4
  return buf;
}

export class EMRSELECTPALETTEView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get emr(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(0, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x08: u32
  get ihPal(): number {
    return this.view.getUint32(8, true);
  }

  // 0x0c: pad4

  // 0x00: pointer
  set emr(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(0, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x08: u32
  set ihPal(value: number) {
    this.view.setUint32(8, value, true);
  }

  // 0x0c: pad4
}

/**
 * Windows.Win32.Graphics.Gdi.EMRRESIZEPALETTE (size: 16)
 */
export interface EMRRESIZEPALETTE {
  /** Windows.Win32.Graphics.Gdi.EMR */
  emr: Uint8Array | Deno.PointerValue;
  /** u32 */
  ihPal: number;
  /** u32 */
  cEntries: number;
}

export const sizeofEMRRESIZEPALETTE = 16;

export function allocEMRRESIZEPALETTE(data?: Partial<EMRRESIZEPALETTE>): Uint8Array {
  const buf = new Uint8Array(sizeofEMRRESIZEPALETTE);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.emr !== undefined) view.setBigUint64(0, data.emr === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.emr))), true);
  // 0x08: u32
  if (data?.ihPal !== undefined) view.setUint32(8, Number(data.ihPal), true);
  // 0x0c: u32
  if (data?.cEntries !== undefined) view.setUint32(12, Number(data.cEntries), true);
  return buf;
}

export class EMRRESIZEPALETTEView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get emr(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(0, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x08: u32
  get ihPal(): number {
    return this.view.getUint32(8, true);
  }

  // 0x0c: u32
  get cEntries(): number {
    return this.view.getUint32(12, true);
  }

  // 0x00: pointer
  set emr(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(0, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x08: u32
  set ihPal(value: number) {
    this.view.setUint32(8, value, true);
  }

  // 0x0c: u32
  set cEntries(value: number) {
    this.view.setUint32(12, value, true);
  }
}

/**
 * Windows.Win32.Graphics.Gdi.EMRSETPALETTEENTRIES (size: 32)
 */
export interface EMRSETPALETTEENTRIES {
  /** Windows.Win32.Graphics.Gdi.EMR */
  emr: Uint8Array | Deno.PointerValue;
  /** u32 */
  ihPal: number;
  /** u32 */
  iStart: number;
  /** u32 */
  cEntries: number;
  /** array */
  aPalEntries: Deno.PointerValue;
}

export const sizeofEMRSETPALETTEENTRIES = 32;

export function allocEMRSETPALETTEENTRIES(data?: Partial<EMRSETPALETTEENTRIES>): Uint8Array {
  const buf = new Uint8Array(sizeofEMRSETPALETTEENTRIES);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.emr !== undefined) view.setBigUint64(0, data.emr === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.emr))), true);
  // 0x08: u32
  if (data?.ihPal !== undefined) view.setUint32(8, Number(data.ihPal), true);
  // 0x0c: u32
  if (data?.iStart !== undefined) view.setUint32(12, Number(data.iStart), true);
  // 0x10: u32
  if (data?.cEntries !== undefined) view.setUint32(16, Number(data.cEntries), true);
  // 0x14: pad4
  // 0x18: pointer
  if (data?.aPalEntries !== undefined) view.setBigUint64(24, data.aPalEntries === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.aPalEntries))), true);
  return buf;
}

export class EMRSETPALETTEENTRIESView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get emr(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(0, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x08: u32
  get ihPal(): number {
    return this.view.getUint32(8, true);
  }

  // 0x0c: u32
  get iStart(): number {
    return this.view.getUint32(12, true);
  }

  // 0x10: u32
  get cEntries(): number {
    return this.view.getUint32(16, true);
  }

  // 0x14: pad4

  // 0x18: pointer
  get aPalEntries(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(24, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: pointer
  set emr(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(0, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x08: u32
  set ihPal(value: number) {
    this.view.setUint32(8, value, true);
  }

  // 0x0c: u32
  set iStart(value: number) {
    this.view.setUint32(12, value, true);
  }

  // 0x10: u32
  set cEntries(value: number) {
    this.view.setUint32(16, value, true);
  }

  // 0x14: pad4

  // 0x18: pointer
  set aPalEntries(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(24, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.Graphics.Gdi.EMRSETCOLORADJUSTMENT (size: 16)
 */
export interface EMRSETCOLORADJUSTMENT {
  /** Windows.Win32.Graphics.Gdi.EMR */
  emr: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.Graphics.Gdi.COLORADJUSTMENT */
  ColorAdjustment: Uint8Array | Deno.PointerValue;
}

export const sizeofEMRSETCOLORADJUSTMENT = 16;

export function allocEMRSETCOLORADJUSTMENT(data?: Partial<EMRSETCOLORADJUSTMENT>): Uint8Array {
  const buf = new Uint8Array(sizeofEMRSETCOLORADJUSTMENT);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.emr !== undefined) view.setBigUint64(0, data.emr === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.emr))), true);
  // 0x08: pointer
  if (data?.ColorAdjustment !== undefined) view.setBigUint64(8, data.ColorAdjustment === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.ColorAdjustment))), true);
  return buf;
}

export class EMRSETCOLORADJUSTMENTView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get emr(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(0, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x08: pointer
  get ColorAdjustment(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: pointer
  set emr(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(0, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x08: pointer
  set ColorAdjustment(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.Graphics.Gdi.EMRGDICOMMENT (size: 24)
 */
export interface EMRGDICOMMENT {
  /** Windows.Win32.Graphics.Gdi.EMR */
  emr: Uint8Array | Deno.PointerValue;
  /** u32 */
  cbData: number;
  /** array */
  Data: Deno.PointerValue;
}

export const sizeofEMRGDICOMMENT = 24;

export function allocEMRGDICOMMENT(data?: Partial<EMRGDICOMMENT>): Uint8Array {
  const buf = new Uint8Array(sizeofEMRGDICOMMENT);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.emr !== undefined) view.setBigUint64(0, data.emr === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.emr))), true);
  // 0x08: u32
  if (data?.cbData !== undefined) view.setUint32(8, Number(data.cbData), true);
  // 0x0c: pad4
  // 0x10: pointer
  if (data?.Data !== undefined) view.setBigUint64(16, data.Data === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.Data))), true);
  return buf;
}

export class EMRGDICOMMENTView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get emr(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(0, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x08: u32
  get cbData(): number {
    return this.view.getUint32(8, true);
  }

  // 0x0c: pad4

  // 0x10: pointer
  get Data(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(16, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: pointer
  set emr(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(0, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x08: u32
  set cbData(value: number) {
    this.view.setUint32(8, value, true);
  }

  // 0x0c: pad4

  // 0x10: pointer
  set Data(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(16, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.Graphics.Gdi.EMREOF (size: 24)
 */
export interface EMREOF {
  /** Windows.Win32.Graphics.Gdi.EMR */
  emr: Uint8Array | Deno.PointerValue;
  /** u32 */
  nPalEntries: number;
  /** u32 */
  offPalEntries: number;
  /** u32 */
  nSizeLast: number;
}

export const sizeofEMREOF = 24;

export function allocEMREOF(data?: Partial<EMREOF>): Uint8Array {
  const buf = new Uint8Array(sizeofEMREOF);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.emr !== undefined) view.setBigUint64(0, data.emr === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.emr))), true);
  // 0x08: u32
  if (data?.nPalEntries !== undefined) view.setUint32(8, Number(data.nPalEntries), true);
  // 0x0c: u32
  if (data?.offPalEntries !== undefined) view.setUint32(12, Number(data.offPalEntries), true);
  // 0x10: u32
  if (data?.nSizeLast !== undefined) view.setUint32(16, Number(data.nSizeLast), true);
  // 0x14: pad4
  return buf;
}

export class EMREOFView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get emr(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(0, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x08: u32
  get nPalEntries(): number {
    return this.view.getUint32(8, true);
  }

  // 0x0c: u32
  get offPalEntries(): number {
    return this.view.getUint32(12, true);
  }

  // 0x10: u32
  get nSizeLast(): number {
    return this.view.getUint32(16, true);
  }

  // 0x14: pad4

  // 0x00: pointer
  set emr(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(0, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x08: u32
  set nPalEntries(value: number) {
    this.view.setUint32(8, value, true);
  }

  // 0x0c: u32
  set offPalEntries(value: number) {
    this.view.setUint32(12, value, true);
  }

  // 0x10: u32
  set nSizeLast(value: number) {
    this.view.setUint32(16, value, true);
  }

  // 0x14: pad4
}

/**
 * Windows.Win32.Graphics.Gdi.EMRLINETO (size: 16)
 */
export interface EMRLINETO {
  /** Windows.Win32.Graphics.Gdi.EMR */
  emr: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.Foundation.POINTL */
  ptl: Uint8Array | Deno.PointerValue;
}

export const sizeofEMRLINETO = 16;

export function allocEMRLINETO(data?: Partial<EMRLINETO>): Uint8Array {
  const buf = new Uint8Array(sizeofEMRLINETO);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.emr !== undefined) view.setBigUint64(0, data.emr === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.emr))), true);
  // 0x08: pointer
  if (data?.ptl !== undefined) view.setBigUint64(8, data.ptl === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.ptl))), true);
  return buf;
}

export class EMRLINETOView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get emr(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(0, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x08: pointer
  get ptl(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: pointer
  set emr(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(0, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x08: pointer
  set ptl(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.Graphics.Gdi.EMROFFSETCLIPRGN (size: 16)
 */
export interface EMROFFSETCLIPRGN {
  /** Windows.Win32.Graphics.Gdi.EMR */
  emr: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.Foundation.POINTL */
  ptlOffset: Uint8Array | Deno.PointerValue;
}

export const sizeofEMROFFSETCLIPRGN = 16;

export function allocEMROFFSETCLIPRGN(data?: Partial<EMROFFSETCLIPRGN>): Uint8Array {
  const buf = new Uint8Array(sizeofEMROFFSETCLIPRGN);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.emr !== undefined) view.setBigUint64(0, data.emr === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.emr))), true);
  // 0x08: pointer
  if (data?.ptlOffset !== undefined) view.setBigUint64(8, data.ptlOffset === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.ptlOffset))), true);
  return buf;
}

export class EMROFFSETCLIPRGNView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get emr(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(0, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x08: pointer
  get ptlOffset(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: pointer
  set emr(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(0, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x08: pointer
  set ptlOffset(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.Graphics.Gdi.EMRFILLPATH (size: 16)
 */
export interface EMRFILLPATH {
  /** Windows.Win32.Graphics.Gdi.EMR */
  emr: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.Foundation.RECTL */
  rclBounds: Uint8Array | Deno.PointerValue;
}

export const sizeofEMRFILLPATH = 16;

export function allocEMRFILLPATH(data?: Partial<EMRFILLPATH>): Uint8Array {
  const buf = new Uint8Array(sizeofEMRFILLPATH);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.emr !== undefined) view.setBigUint64(0, data.emr === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.emr))), true);
  // 0x08: pointer
  if (data?.rclBounds !== undefined) view.setBigUint64(8, data.rclBounds === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.rclBounds))), true);
  return buf;
}

export class EMRFILLPATHView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get emr(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(0, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x08: pointer
  get rclBounds(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: pointer
  set emr(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(0, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x08: pointer
  set rclBounds(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.Graphics.Gdi.EMREXCLUDECLIPRECT (size: 16)
 */
export interface EMREXCLUDECLIPRECT {
  /** Windows.Win32.Graphics.Gdi.EMR */
  emr: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.Foundation.RECTL */
  rclClip: Uint8Array | Deno.PointerValue;
}

export const sizeofEMREXCLUDECLIPRECT = 16;

export function allocEMREXCLUDECLIPRECT(data?: Partial<EMREXCLUDECLIPRECT>): Uint8Array {
  const buf = new Uint8Array(sizeofEMREXCLUDECLIPRECT);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.emr !== undefined) view.setBigUint64(0, data.emr === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.emr))), true);
  // 0x08: pointer
  if (data?.rclClip !== undefined) view.setBigUint64(8, data.rclClip === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.rclClip))), true);
  return buf;
}

export class EMREXCLUDECLIPRECTView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get emr(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(0, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x08: pointer
  get rclClip(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: pointer
  set emr(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(0, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x08: pointer
  set rclClip(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.Graphics.Gdi.EMRSETVIEWPORTORGEX (size: 16)
 */
export interface EMRSETVIEWPORTORGEX {
  /** Windows.Win32.Graphics.Gdi.EMR */
  emr: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.Foundation.POINTL */
  ptlOrigin: Uint8Array | Deno.PointerValue;
}

export const sizeofEMRSETVIEWPORTORGEX = 16;

export function allocEMRSETVIEWPORTORGEX(data?: Partial<EMRSETVIEWPORTORGEX>): Uint8Array {
  const buf = new Uint8Array(sizeofEMRSETVIEWPORTORGEX);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.emr !== undefined) view.setBigUint64(0, data.emr === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.emr))), true);
  // 0x08: pointer
  if (data?.ptlOrigin !== undefined) view.setBigUint64(8, data.ptlOrigin === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.ptlOrigin))), true);
  return buf;
}

export class EMRSETVIEWPORTORGEXView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get emr(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(0, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x08: pointer
  get ptlOrigin(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: pointer
  set emr(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(0, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x08: pointer
  set ptlOrigin(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.Graphics.Gdi.EMRSETVIEWPORTEXTEX (size: 16)
 */
export interface EMRSETVIEWPORTEXTEX {
  /** Windows.Win32.Graphics.Gdi.EMR */
  emr: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.Foundation.SIZE */
  szlExtent: Uint8Array | Deno.PointerValue;
}

export const sizeofEMRSETVIEWPORTEXTEX = 16;

export function allocEMRSETVIEWPORTEXTEX(data?: Partial<EMRSETVIEWPORTEXTEX>): Uint8Array {
  const buf = new Uint8Array(sizeofEMRSETVIEWPORTEXTEX);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.emr !== undefined) view.setBigUint64(0, data.emr === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.emr))), true);
  // 0x08: pointer
  if (data?.szlExtent !== undefined) view.setBigUint64(8, data.szlExtent === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.szlExtent))), true);
  return buf;
}

export class EMRSETVIEWPORTEXTEXView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get emr(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(0, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x08: pointer
  get szlExtent(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: pointer
  set emr(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(0, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x08: pointer
  set szlExtent(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.Graphics.Gdi.EMRSCALEVIEWPORTEXTEX (size: 24)
 */
export interface EMRSCALEVIEWPORTEXTEX {
  /** Windows.Win32.Graphics.Gdi.EMR */
  emr: Uint8Array | Deno.PointerValue;
  /** i32 */
  xNum: number;
  /** i32 */
  xDenom: number;
  /** i32 */
  yNum: number;
  /** i32 */
  yDenom: number;
}

export const sizeofEMRSCALEVIEWPORTEXTEX = 24;

export function allocEMRSCALEVIEWPORTEXTEX(data?: Partial<EMRSCALEVIEWPORTEXTEX>): Uint8Array {
  const buf = new Uint8Array(sizeofEMRSCALEVIEWPORTEXTEX);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.emr !== undefined) view.setBigUint64(0, data.emr === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.emr))), true);
  // 0x08: i32
  if (data?.xNum !== undefined) view.setInt32(8, Number(data.xNum), true);
  // 0x0c: i32
  if (data?.xDenom !== undefined) view.setInt32(12, Number(data.xDenom), true);
  // 0x10: i32
  if (data?.yNum !== undefined) view.setInt32(16, Number(data.yNum), true);
  // 0x14: i32
  if (data?.yDenom !== undefined) view.setInt32(20, Number(data.yDenom), true);
  return buf;
}

export class EMRSCALEVIEWPORTEXTEXView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get emr(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(0, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x08: i32
  get xNum(): number {
    return this.view.getInt32(8, true);
  }

  // 0x0c: i32
  get xDenom(): number {
    return this.view.getInt32(12, true);
  }

  // 0x10: i32
  get yNum(): number {
    return this.view.getInt32(16, true);
  }

  // 0x14: i32
  get yDenom(): number {
    return this.view.getInt32(20, true);
  }

  // 0x00: pointer
  set emr(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(0, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x08: i32
  set xNum(value: number) {
    this.view.setInt32(8, value, true);
  }

  // 0x0c: i32
  set xDenom(value: number) {
    this.view.setInt32(12, value, true);
  }

  // 0x10: i32
  set yNum(value: number) {
    this.view.setInt32(16, value, true);
  }

  // 0x14: i32
  set yDenom(value: number) {
    this.view.setInt32(20, value, true);
  }
}

/**
 * Windows.Win32.Graphics.Gdi.EMRSETWORLDTRANSFORM (size: 16)
 */
export interface EMRSETWORLDTRANSFORM {
  /** Windows.Win32.Graphics.Gdi.EMR */
  emr: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.Graphics.Gdi.XFORM */
  xform: Uint8Array | Deno.PointerValue;
}

export const sizeofEMRSETWORLDTRANSFORM = 16;

export function allocEMRSETWORLDTRANSFORM(data?: Partial<EMRSETWORLDTRANSFORM>): Uint8Array {
  const buf = new Uint8Array(sizeofEMRSETWORLDTRANSFORM);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.emr !== undefined) view.setBigUint64(0, data.emr === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.emr))), true);
  // 0x08: pointer
  if (data?.xform !== undefined) view.setBigUint64(8, data.xform === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.xform))), true);
  return buf;
}

export class EMRSETWORLDTRANSFORMView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get emr(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(0, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x08: pointer
  get xform(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: pointer
  set emr(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(0, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x08: pointer
  set xform(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.Graphics.Gdi.EMRMODIFYWORLDTRANSFORM (size: 24)
 */
export interface EMRMODIFYWORLDTRANSFORM {
  /** Windows.Win32.Graphics.Gdi.EMR */
  emr: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.Graphics.Gdi.XFORM */
  xform: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.Graphics.Gdi.MODIFY_WORLD_TRANSFORM_MODE */
  iMode: MODIFY_WORLD_TRANSFORM_MODE;
}

export const sizeofEMRMODIFYWORLDTRANSFORM = 24;

export function allocEMRMODIFYWORLDTRANSFORM(data?: Partial<EMRMODIFYWORLDTRANSFORM>): Uint8Array {
  const buf = new Uint8Array(sizeofEMRMODIFYWORLDTRANSFORM);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.emr !== undefined) view.setBigUint64(0, data.emr === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.emr))), true);
  // 0x08: pointer
  if (data?.xform !== undefined) view.setBigUint64(8, data.xform === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.xform))), true);
  // 0x10: u32
  if (data?.iMode !== undefined) view.setUint32(16, Number(data.iMode), true);
  // 0x14: pad4
  return buf;
}

export class EMRMODIFYWORLDTRANSFORMView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get emr(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(0, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x08: pointer
  get xform(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x10: u32
  get iMode(): number {
    return this.view.getUint32(16, true);
  }

  // 0x14: pad4

  // 0x00: pointer
  set emr(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(0, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x08: pointer
  set xform(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x10: u32
  set iMode(value: number) {
    this.view.setUint32(16, value, true);
  }

  // 0x14: pad4
}

/**
 * Windows.Win32.Graphics.Gdi.EMRSETPIXELV (size: 24)
 */
export interface EMRSETPIXELV {
  /** Windows.Win32.Graphics.Gdi.EMR */
  emr: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.Foundation.POINTL */
  ptlPixel: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.Foundation.COLORREF */
  crColor: Uint8Array | Deno.PointerValue;
}

export const sizeofEMRSETPIXELV = 24;

export function allocEMRSETPIXELV(data?: Partial<EMRSETPIXELV>): Uint8Array {
  const buf = new Uint8Array(sizeofEMRSETPIXELV);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.emr !== undefined) view.setBigUint64(0, data.emr === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.emr))), true);
  // 0x08: pointer
  if (data?.ptlPixel !== undefined) view.setBigUint64(8, data.ptlPixel === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.ptlPixel))), true);
  // 0x10: pointer
  if (data?.crColor !== undefined) view.setBigUint64(16, data.crColor === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.crColor))), true);
  return buf;
}

export class EMRSETPIXELVView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get emr(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(0, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x08: pointer
  get ptlPixel(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x10: pointer
  get crColor(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(16, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: pointer
  set emr(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(0, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x08: pointer
  set ptlPixel(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x10: pointer
  set crColor(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(16, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.Graphics.Gdi.EMREXTFLOODFILL (size: 32)
 */
export interface EMREXTFLOODFILL {
  /** Windows.Win32.Graphics.Gdi.EMR */
  emr: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.Foundation.POINTL */
  ptlStart: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.Foundation.COLORREF */
  crColor: Uint8Array | Deno.PointerValue;
  /** u32 */
  iMode: number;
}

export const sizeofEMREXTFLOODFILL = 32;

export function allocEMREXTFLOODFILL(data?: Partial<EMREXTFLOODFILL>): Uint8Array {
  const buf = new Uint8Array(sizeofEMREXTFLOODFILL);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.emr !== undefined) view.setBigUint64(0, data.emr === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.emr))), true);
  // 0x08: pointer
  if (data?.ptlStart !== undefined) view.setBigUint64(8, data.ptlStart === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.ptlStart))), true);
  // 0x10: pointer
  if (data?.crColor !== undefined) view.setBigUint64(16, data.crColor === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.crColor))), true);
  // 0x18: u32
  if (data?.iMode !== undefined) view.setUint32(24, Number(data.iMode), true);
  // 0x1c: pad4
  return buf;
}

export class EMREXTFLOODFILLView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get emr(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(0, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x08: pointer
  get ptlStart(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x10: pointer
  get crColor(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(16, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x18: u32
  get iMode(): number {
    return this.view.getUint32(24, true);
  }

  // 0x1c: pad4

  // 0x00: pointer
  set emr(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(0, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x08: pointer
  set ptlStart(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x10: pointer
  set crColor(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(16, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x18: u32
  set iMode(value: number) {
    this.view.setUint32(24, value, true);
  }

  // 0x1c: pad4
}

/**
 * Windows.Win32.Graphics.Gdi.EMRELLIPSE (size: 16)
 */
export interface EMRELLIPSE {
  /** Windows.Win32.Graphics.Gdi.EMR */
  emr: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.Foundation.RECTL */
  rclBox: Uint8Array | Deno.PointerValue;
}

export const sizeofEMRELLIPSE = 16;

export function allocEMRELLIPSE(data?: Partial<EMRELLIPSE>): Uint8Array {
  const buf = new Uint8Array(sizeofEMRELLIPSE);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.emr !== undefined) view.setBigUint64(0, data.emr === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.emr))), true);
  // 0x08: pointer
  if (data?.rclBox !== undefined) view.setBigUint64(8, data.rclBox === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.rclBox))), true);
  return buf;
}

export class EMRELLIPSEView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get emr(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(0, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x08: pointer
  get rclBox(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: pointer
  set emr(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(0, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x08: pointer
  set rclBox(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.Graphics.Gdi.EMRROUNDRECT (size: 24)
 */
export interface EMRROUNDRECT {
  /** Windows.Win32.Graphics.Gdi.EMR */
  emr: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.Foundation.RECTL */
  rclBox: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.Foundation.SIZE */
  szlCorner: Uint8Array | Deno.PointerValue;
}

export const sizeofEMRROUNDRECT = 24;

export function allocEMRROUNDRECT(data?: Partial<EMRROUNDRECT>): Uint8Array {
  const buf = new Uint8Array(sizeofEMRROUNDRECT);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.emr !== undefined) view.setBigUint64(0, data.emr === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.emr))), true);
  // 0x08: pointer
  if (data?.rclBox !== undefined) view.setBigUint64(8, data.rclBox === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.rclBox))), true);
  // 0x10: pointer
  if (data?.szlCorner !== undefined) view.setBigUint64(16, data.szlCorner === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.szlCorner))), true);
  return buf;
}

export class EMRROUNDRECTView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get emr(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(0, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x08: pointer
  get rclBox(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x10: pointer
  get szlCorner(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(16, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: pointer
  set emr(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(0, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x08: pointer
  set rclBox(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x10: pointer
  set szlCorner(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(16, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.Graphics.Gdi.EMRARC (size: 32)
 */
export interface EMRARC {
  /** Windows.Win32.Graphics.Gdi.EMR */
  emr: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.Foundation.RECTL */
  rclBox: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.Foundation.POINTL */
  ptlStart: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.Foundation.POINTL */
  ptlEnd: Uint8Array | Deno.PointerValue;
}

export const sizeofEMRARC = 32;

export function allocEMRARC(data?: Partial<EMRARC>): Uint8Array {
  const buf = new Uint8Array(sizeofEMRARC);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.emr !== undefined) view.setBigUint64(0, data.emr === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.emr))), true);
  // 0x08: pointer
  if (data?.rclBox !== undefined) view.setBigUint64(8, data.rclBox === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.rclBox))), true);
  // 0x10: pointer
  if (data?.ptlStart !== undefined) view.setBigUint64(16, data.ptlStart === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.ptlStart))), true);
  // 0x18: pointer
  if (data?.ptlEnd !== undefined) view.setBigUint64(24, data.ptlEnd === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.ptlEnd))), true);
  return buf;
}

export class EMRARCView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get emr(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(0, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x08: pointer
  get rclBox(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x10: pointer
  get ptlStart(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(16, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x18: pointer
  get ptlEnd(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(24, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: pointer
  set emr(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(0, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x08: pointer
  set rclBox(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x10: pointer
  set ptlStart(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(16, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x18: pointer
  set ptlEnd(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(24, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.Graphics.Gdi.EMRANGLEARC (size: 32)
 */
export interface EMRANGLEARC {
  /** Windows.Win32.Graphics.Gdi.EMR */
  emr: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.Foundation.POINTL */
  ptlCenter: Uint8Array | Deno.PointerValue;
  /** u32 */
  nRadius: number;
  /** f32 */
  eStartAngle: number;
  /** f32 */
  eSweepAngle: number;
}

export const sizeofEMRANGLEARC = 32;

export function allocEMRANGLEARC(data?: Partial<EMRANGLEARC>): Uint8Array {
  const buf = new Uint8Array(sizeofEMRANGLEARC);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.emr !== undefined) view.setBigUint64(0, data.emr === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.emr))), true);
  // 0x08: pointer
  if (data?.ptlCenter !== undefined) view.setBigUint64(8, data.ptlCenter === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.ptlCenter))), true);
  // 0x10: u32
  if (data?.nRadius !== undefined) view.setUint32(16, Number(data.nRadius), true);
  // 0x14: f32
  if (data?.eStartAngle !== undefined) view.setFloat32(20, Number(data.eStartAngle), true);
  // 0x18: f32
  if (data?.eSweepAngle !== undefined) view.setFloat32(24, Number(data.eSweepAngle), true);
  // 0x1c: pad4
  return buf;
}

export class EMRANGLEARCView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get emr(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(0, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x08: pointer
  get ptlCenter(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x10: u32
  get nRadius(): number {
    return this.view.getUint32(16, true);
  }

  // 0x14: f32
  get eStartAngle(): number {
    return this.view.getFloat32(20, true);
  }

  // 0x18: f32
  get eSweepAngle(): number {
    return this.view.getFloat32(24, true);
  }

  // 0x1c: pad4

  // 0x00: pointer
  set emr(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(0, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x08: pointer
  set ptlCenter(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x10: u32
  set nRadius(value: number) {
    this.view.setUint32(16, value, true);
  }

  // 0x14: f32
  set eStartAngle(value: number) {
    this.view.setFloat32(20, value, true);
  }

  // 0x18: f32
  set eSweepAngle(value: number) {
    this.view.setFloat32(24, value, true);
  }

  // 0x1c: pad4
}

/**
 * Windows.Win32.Graphics.Gdi.EMRPOLYLINE (size: 32)
 */
export interface EMRPOLYLINE {
  /** Windows.Win32.Graphics.Gdi.EMR */
  emr: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.Foundation.RECTL */
  rclBounds: Uint8Array | Deno.PointerValue;
  /** u32 */
  cptl: number;
  /** array */
  aptl: Deno.PointerValue;
}

export const sizeofEMRPOLYLINE = 32;

export function allocEMRPOLYLINE(data?: Partial<EMRPOLYLINE>): Uint8Array {
  const buf = new Uint8Array(sizeofEMRPOLYLINE);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.emr !== undefined) view.setBigUint64(0, data.emr === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.emr))), true);
  // 0x08: pointer
  if (data?.rclBounds !== undefined) view.setBigUint64(8, data.rclBounds === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.rclBounds))), true);
  // 0x10: u32
  if (data?.cptl !== undefined) view.setUint32(16, Number(data.cptl), true);
  // 0x14: pad4
  // 0x18: pointer
  if (data?.aptl !== undefined) view.setBigUint64(24, data.aptl === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.aptl))), true);
  return buf;
}

export class EMRPOLYLINEView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get emr(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(0, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x08: pointer
  get rclBounds(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x10: u32
  get cptl(): number {
    return this.view.getUint32(16, true);
  }

  // 0x14: pad4

  // 0x18: pointer
  get aptl(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(24, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: pointer
  set emr(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(0, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x08: pointer
  set rclBounds(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x10: u32
  set cptl(value: number) {
    this.view.setUint32(16, value, true);
  }

  // 0x14: pad4

  // 0x18: pointer
  set aptl(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(24, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.Graphics.Gdi.EMRPOLYLINE16 (size: 32)
 */
export interface EMRPOLYLINE16 {
  /** Windows.Win32.Graphics.Gdi.EMR */
  emr: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.Foundation.RECTL */
  rclBounds: Uint8Array | Deno.PointerValue;
  /** u32 */
  cpts: number;
  /** array */
  apts: Deno.PointerValue;
}

export const sizeofEMRPOLYLINE16 = 32;

export function allocEMRPOLYLINE16(data?: Partial<EMRPOLYLINE16>): Uint8Array {
  const buf = new Uint8Array(sizeofEMRPOLYLINE16);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.emr !== undefined) view.setBigUint64(0, data.emr === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.emr))), true);
  // 0x08: pointer
  if (data?.rclBounds !== undefined) view.setBigUint64(8, data.rclBounds === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.rclBounds))), true);
  // 0x10: u32
  if (data?.cpts !== undefined) view.setUint32(16, Number(data.cpts), true);
  // 0x14: pad4
  // 0x18: pointer
  if (data?.apts !== undefined) view.setBigUint64(24, data.apts === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.apts))), true);
  return buf;
}

export class EMRPOLYLINE16View {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get emr(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(0, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x08: pointer
  get rclBounds(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x10: u32
  get cpts(): number {
    return this.view.getUint32(16, true);
  }

  // 0x14: pad4

  // 0x18: pointer
  get apts(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(24, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: pointer
  set emr(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(0, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x08: pointer
  set rclBounds(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x10: u32
  set cpts(value: number) {
    this.view.setUint32(16, value, true);
  }

  // 0x14: pad4

  // 0x18: pointer
  set apts(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(24, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.Graphics.Gdi.EMRPOLYDRAW (size: 40)
 */
export interface EMRPOLYDRAW {
  /** Windows.Win32.Graphics.Gdi.EMR */
  emr: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.Foundation.RECTL */
  rclBounds: Uint8Array | Deno.PointerValue;
  /** u32 */
  cptl: number;
  /** array */
  aptl: Deno.PointerValue;
  /** array */
  abTypes: Deno.PointerValue;
}

export const sizeofEMRPOLYDRAW = 40;

export function allocEMRPOLYDRAW(data?: Partial<EMRPOLYDRAW>): Uint8Array {
  const buf = new Uint8Array(sizeofEMRPOLYDRAW);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.emr !== undefined) view.setBigUint64(0, data.emr === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.emr))), true);
  // 0x08: pointer
  if (data?.rclBounds !== undefined) view.setBigUint64(8, data.rclBounds === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.rclBounds))), true);
  // 0x10: u32
  if (data?.cptl !== undefined) view.setUint32(16, Number(data.cptl), true);
  // 0x14: pad4
  // 0x18: pointer
  if (data?.aptl !== undefined) view.setBigUint64(24, data.aptl === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.aptl))), true);
  // 0x20: pointer
  if (data?.abTypes !== undefined) view.setBigUint64(32, data.abTypes === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.abTypes))), true);
  return buf;
}

export class EMRPOLYDRAWView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get emr(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(0, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x08: pointer
  get rclBounds(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x10: u32
  get cptl(): number {
    return this.view.getUint32(16, true);
  }

  // 0x14: pad4

  // 0x18: pointer
  get aptl(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(24, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x20: pointer
  get abTypes(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(32, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: pointer
  set emr(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(0, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x08: pointer
  set rclBounds(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x10: u32
  set cptl(value: number) {
    this.view.setUint32(16, value, true);
  }

  // 0x14: pad4

  // 0x18: pointer
  set aptl(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(24, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x20: pointer
  set abTypes(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(32, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.Graphics.Gdi.EMRPOLYDRAW16 (size: 40)
 */
export interface EMRPOLYDRAW16 {
  /** Windows.Win32.Graphics.Gdi.EMR */
  emr: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.Foundation.RECTL */
  rclBounds: Uint8Array | Deno.PointerValue;
  /** u32 */
  cpts: number;
  /** array */
  apts: Deno.PointerValue;
  /** array */
  abTypes: Deno.PointerValue;
}

export const sizeofEMRPOLYDRAW16 = 40;

export function allocEMRPOLYDRAW16(data?: Partial<EMRPOLYDRAW16>): Uint8Array {
  const buf = new Uint8Array(sizeofEMRPOLYDRAW16);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.emr !== undefined) view.setBigUint64(0, data.emr === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.emr))), true);
  // 0x08: pointer
  if (data?.rclBounds !== undefined) view.setBigUint64(8, data.rclBounds === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.rclBounds))), true);
  // 0x10: u32
  if (data?.cpts !== undefined) view.setUint32(16, Number(data.cpts), true);
  // 0x14: pad4
  // 0x18: pointer
  if (data?.apts !== undefined) view.setBigUint64(24, data.apts === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.apts))), true);
  // 0x20: pointer
  if (data?.abTypes !== undefined) view.setBigUint64(32, data.abTypes === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.abTypes))), true);
  return buf;
}

export class EMRPOLYDRAW16View {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get emr(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(0, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x08: pointer
  get rclBounds(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x10: u32
  get cpts(): number {
    return this.view.getUint32(16, true);
  }

  // 0x14: pad4

  // 0x18: pointer
  get apts(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(24, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x20: pointer
  get abTypes(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(32, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: pointer
  set emr(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(0, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x08: pointer
  set rclBounds(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x10: u32
  set cpts(value: number) {
    this.view.setUint32(16, value, true);
  }

  // 0x14: pad4

  // 0x18: pointer
  set apts(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(24, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x20: pointer
  set abTypes(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(32, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.Graphics.Gdi.EMRPOLYPOLYLINE (size: 40)
 */
export interface EMRPOLYPOLYLINE {
  /** Windows.Win32.Graphics.Gdi.EMR */
  emr: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.Foundation.RECTL */
  rclBounds: Uint8Array | Deno.PointerValue;
  /** u32 */
  nPolys: number;
  /** u32 */
  cptl: number;
  /** array */
  aPolyCounts: Deno.PointerValue;
  /** array */
  aptl: Deno.PointerValue;
}

export const sizeofEMRPOLYPOLYLINE = 40;

export function allocEMRPOLYPOLYLINE(data?: Partial<EMRPOLYPOLYLINE>): Uint8Array {
  const buf = new Uint8Array(sizeofEMRPOLYPOLYLINE);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.emr !== undefined) view.setBigUint64(0, data.emr === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.emr))), true);
  // 0x08: pointer
  if (data?.rclBounds !== undefined) view.setBigUint64(8, data.rclBounds === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.rclBounds))), true);
  // 0x10: u32
  if (data?.nPolys !== undefined) view.setUint32(16, Number(data.nPolys), true);
  // 0x14: u32
  if (data?.cptl !== undefined) view.setUint32(20, Number(data.cptl), true);
  // 0x18: pointer
  if (data?.aPolyCounts !== undefined) view.setBigUint64(24, data.aPolyCounts === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.aPolyCounts))), true);
  // 0x20: pointer
  if (data?.aptl !== undefined) view.setBigUint64(32, data.aptl === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.aptl))), true);
  return buf;
}

export class EMRPOLYPOLYLINEView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get emr(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(0, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x08: pointer
  get rclBounds(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x10: u32
  get nPolys(): number {
    return this.view.getUint32(16, true);
  }

  // 0x14: u32
  get cptl(): number {
    return this.view.getUint32(20, true);
  }

  // 0x18: pointer
  get aPolyCounts(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(24, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x20: pointer
  get aptl(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(32, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: pointer
  set emr(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(0, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x08: pointer
  set rclBounds(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x10: u32
  set nPolys(value: number) {
    this.view.setUint32(16, value, true);
  }

  // 0x14: u32
  set cptl(value: number) {
    this.view.setUint32(20, value, true);
  }

  // 0x18: pointer
  set aPolyCounts(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(24, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x20: pointer
  set aptl(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(32, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.Graphics.Gdi.EMRPOLYPOLYLINE16 (size: 40)
 */
export interface EMRPOLYPOLYLINE16 {
  /** Windows.Win32.Graphics.Gdi.EMR */
  emr: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.Foundation.RECTL */
  rclBounds: Uint8Array | Deno.PointerValue;
  /** u32 */
  nPolys: number;
  /** u32 */
  cpts: number;
  /** array */
  aPolyCounts: Deno.PointerValue;
  /** array */
  apts: Deno.PointerValue;
}

export const sizeofEMRPOLYPOLYLINE16 = 40;

export function allocEMRPOLYPOLYLINE16(data?: Partial<EMRPOLYPOLYLINE16>): Uint8Array {
  const buf = new Uint8Array(sizeofEMRPOLYPOLYLINE16);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.emr !== undefined) view.setBigUint64(0, data.emr === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.emr))), true);
  // 0x08: pointer
  if (data?.rclBounds !== undefined) view.setBigUint64(8, data.rclBounds === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.rclBounds))), true);
  // 0x10: u32
  if (data?.nPolys !== undefined) view.setUint32(16, Number(data.nPolys), true);
  // 0x14: u32
  if (data?.cpts !== undefined) view.setUint32(20, Number(data.cpts), true);
  // 0x18: pointer
  if (data?.aPolyCounts !== undefined) view.setBigUint64(24, data.aPolyCounts === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.aPolyCounts))), true);
  // 0x20: pointer
  if (data?.apts !== undefined) view.setBigUint64(32, data.apts === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.apts))), true);
  return buf;
}

export class EMRPOLYPOLYLINE16View {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get emr(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(0, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x08: pointer
  get rclBounds(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x10: u32
  get nPolys(): number {
    return this.view.getUint32(16, true);
  }

  // 0x14: u32
  get cpts(): number {
    return this.view.getUint32(20, true);
  }

  // 0x18: pointer
  get aPolyCounts(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(24, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x20: pointer
  get apts(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(32, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: pointer
  set emr(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(0, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x08: pointer
  set rclBounds(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x10: u32
  set nPolys(value: number) {
    this.view.setUint32(16, value, true);
  }

  // 0x14: u32
  set cpts(value: number) {
    this.view.setUint32(20, value, true);
  }

  // 0x18: pointer
  set aPolyCounts(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(24, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x20: pointer
  set apts(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(32, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.Graphics.Gdi.EMRINVERTRGN (size: 32)
 */
export interface EMRINVERTRGN {
  /** Windows.Win32.Graphics.Gdi.EMR */
  emr: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.Foundation.RECTL */
  rclBounds: Uint8Array | Deno.PointerValue;
  /** u32 */
  cbRgnData: number;
  /** array */
  RgnData: Deno.PointerValue;
}

export const sizeofEMRINVERTRGN = 32;

export function allocEMRINVERTRGN(data?: Partial<EMRINVERTRGN>): Uint8Array {
  const buf = new Uint8Array(sizeofEMRINVERTRGN);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.emr !== undefined) view.setBigUint64(0, data.emr === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.emr))), true);
  // 0x08: pointer
  if (data?.rclBounds !== undefined) view.setBigUint64(8, data.rclBounds === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.rclBounds))), true);
  // 0x10: u32
  if (data?.cbRgnData !== undefined) view.setUint32(16, Number(data.cbRgnData), true);
  // 0x14: pad4
  // 0x18: pointer
  if (data?.RgnData !== undefined) view.setBigUint64(24, data.RgnData === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.RgnData))), true);
  return buf;
}

export class EMRINVERTRGNView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get emr(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(0, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x08: pointer
  get rclBounds(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x10: u32
  get cbRgnData(): number {
    return this.view.getUint32(16, true);
  }

  // 0x14: pad4

  // 0x18: pointer
  get RgnData(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(24, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: pointer
  set emr(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(0, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x08: pointer
  set rclBounds(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x10: u32
  set cbRgnData(value: number) {
    this.view.setUint32(16, value, true);
  }

  // 0x14: pad4

  // 0x18: pointer
  set RgnData(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(24, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.Graphics.Gdi.EMRFILLRGN (size: 32)
 */
export interface EMRFILLRGN {
  /** Windows.Win32.Graphics.Gdi.EMR */
  emr: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.Foundation.RECTL */
  rclBounds: Uint8Array | Deno.PointerValue;
  /** u32 */
  cbRgnData: number;
  /** u32 */
  ihBrush: number;
  /** array */
  RgnData: Deno.PointerValue;
}

export const sizeofEMRFILLRGN = 32;

export function allocEMRFILLRGN(data?: Partial<EMRFILLRGN>): Uint8Array {
  const buf = new Uint8Array(sizeofEMRFILLRGN);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.emr !== undefined) view.setBigUint64(0, data.emr === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.emr))), true);
  // 0x08: pointer
  if (data?.rclBounds !== undefined) view.setBigUint64(8, data.rclBounds === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.rclBounds))), true);
  // 0x10: u32
  if (data?.cbRgnData !== undefined) view.setUint32(16, Number(data.cbRgnData), true);
  // 0x14: u32
  if (data?.ihBrush !== undefined) view.setUint32(20, Number(data.ihBrush), true);
  // 0x18: pointer
  if (data?.RgnData !== undefined) view.setBigUint64(24, data.RgnData === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.RgnData))), true);
  return buf;
}

export class EMRFILLRGNView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get emr(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(0, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x08: pointer
  get rclBounds(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x10: u32
  get cbRgnData(): number {
    return this.view.getUint32(16, true);
  }

  // 0x14: u32
  get ihBrush(): number {
    return this.view.getUint32(20, true);
  }

  // 0x18: pointer
  get RgnData(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(24, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: pointer
  set emr(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(0, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x08: pointer
  set rclBounds(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x10: u32
  set cbRgnData(value: number) {
    this.view.setUint32(16, value, true);
  }

  // 0x14: u32
  set ihBrush(value: number) {
    this.view.setUint32(20, value, true);
  }

  // 0x18: pointer
  set RgnData(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(24, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.Graphics.Gdi.EMRFRAMERGN (size: 40)
 */
export interface EMRFRAMERGN {
  /** Windows.Win32.Graphics.Gdi.EMR */
  emr: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.Foundation.RECTL */
  rclBounds: Uint8Array | Deno.PointerValue;
  /** u32 */
  cbRgnData: number;
  /** u32 */
  ihBrush: number;
  /** Windows.Win32.Foundation.SIZE */
  szlStroke: Uint8Array | Deno.PointerValue;
  /** array */
  RgnData: Deno.PointerValue;
}

export const sizeofEMRFRAMERGN = 40;

export function allocEMRFRAMERGN(data?: Partial<EMRFRAMERGN>): Uint8Array {
  const buf = new Uint8Array(sizeofEMRFRAMERGN);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.emr !== undefined) view.setBigUint64(0, data.emr === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.emr))), true);
  // 0x08: pointer
  if (data?.rclBounds !== undefined) view.setBigUint64(8, data.rclBounds === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.rclBounds))), true);
  // 0x10: u32
  if (data?.cbRgnData !== undefined) view.setUint32(16, Number(data.cbRgnData), true);
  // 0x14: u32
  if (data?.ihBrush !== undefined) view.setUint32(20, Number(data.ihBrush), true);
  // 0x18: pointer
  if (data?.szlStroke !== undefined) view.setBigUint64(24, data.szlStroke === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.szlStroke))), true);
  // 0x20: pointer
  if (data?.RgnData !== undefined) view.setBigUint64(32, data.RgnData === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.RgnData))), true);
  return buf;
}

export class EMRFRAMERGNView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get emr(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(0, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x08: pointer
  get rclBounds(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x10: u32
  get cbRgnData(): number {
    return this.view.getUint32(16, true);
  }

  // 0x14: u32
  get ihBrush(): number {
    return this.view.getUint32(20, true);
  }

  // 0x18: pointer
  get szlStroke(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(24, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x20: pointer
  get RgnData(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(32, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: pointer
  set emr(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(0, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x08: pointer
  set rclBounds(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x10: u32
  set cbRgnData(value: number) {
    this.view.setUint32(16, value, true);
  }

  // 0x14: u32
  set ihBrush(value: number) {
    this.view.setUint32(20, value, true);
  }

  // 0x18: pointer
  set szlStroke(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(24, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x20: pointer
  set RgnData(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(32, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.Graphics.Gdi.EMREXTSELECTCLIPRGN (size: 24)
 */
export interface EMREXTSELECTCLIPRGN {
  /** Windows.Win32.Graphics.Gdi.EMR */
  emr: Uint8Array | Deno.PointerValue;
  /** u32 */
  cbRgnData: number;
  /** Windows.Win32.Graphics.Gdi.RGN_COMBINE_MODE */
  iMode: RGN_COMBINE_MODE;
  /** array */
  RgnData: Deno.PointerValue;
}

export const sizeofEMREXTSELECTCLIPRGN = 24;

export function allocEMREXTSELECTCLIPRGN(data?: Partial<EMREXTSELECTCLIPRGN>): Uint8Array {
  const buf = new Uint8Array(sizeofEMREXTSELECTCLIPRGN);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.emr !== undefined) view.setBigUint64(0, data.emr === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.emr))), true);
  // 0x08: u32
  if (data?.cbRgnData !== undefined) view.setUint32(8, Number(data.cbRgnData), true);
  // 0x0c: i32
  if (data?.iMode !== undefined) view.setInt32(12, Number(data.iMode), true);
  // 0x10: pointer
  if (data?.RgnData !== undefined) view.setBigUint64(16, data.RgnData === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.RgnData))), true);
  return buf;
}

export class EMREXTSELECTCLIPRGNView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get emr(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(0, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x08: u32
  get cbRgnData(): number {
    return this.view.getUint32(8, true);
  }

  // 0x0c: i32
  get iMode(): number {
    return this.view.getInt32(12, true);
  }

  // 0x10: pointer
  get RgnData(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(16, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: pointer
  set emr(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(0, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x08: u32
  set cbRgnData(value: number) {
    this.view.setUint32(8, value, true);
  }

  // 0x0c: i32
  set iMode(value: number) {
    this.view.setInt32(12, value, true);
  }

  // 0x10: pointer
  set RgnData(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(16, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.Graphics.Gdi.EMREXTTEXTOUTA (size: 40)
 */
export interface EMREXTTEXTOUTA {
  /** Windows.Win32.Graphics.Gdi.EMR */
  emr: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.Foundation.RECTL */
  rclBounds: Uint8Array | Deno.PointerValue;
  /** u32 */
  iGraphicsMode: number;
  /** f32 */
  exScale: number;
  /** f32 */
  eyScale: number;
  /** Windows.Win32.Graphics.Gdi.EMRTEXT */
  emrtext: Uint8Array | Deno.PointerValue;
}

export const sizeofEMREXTTEXTOUTA = 40;

export function allocEMREXTTEXTOUTA(data?: Partial<EMREXTTEXTOUTA>): Uint8Array {
  const buf = new Uint8Array(sizeofEMREXTTEXTOUTA);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.emr !== undefined) view.setBigUint64(0, data.emr === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.emr))), true);
  // 0x08: pointer
  if (data?.rclBounds !== undefined) view.setBigUint64(8, data.rclBounds === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.rclBounds))), true);
  // 0x10: u32
  if (data?.iGraphicsMode !== undefined) view.setUint32(16, Number(data.iGraphicsMode), true);
  // 0x14: f32
  if (data?.exScale !== undefined) view.setFloat32(20, Number(data.exScale), true);
  // 0x18: f32
  if (data?.eyScale !== undefined) view.setFloat32(24, Number(data.eyScale), true);
  // 0x1c: pad4
  // 0x20: pointer
  if (data?.emrtext !== undefined) view.setBigUint64(32, data.emrtext === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.emrtext))), true);
  return buf;
}

export class EMREXTTEXTOUTAView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get emr(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(0, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x08: pointer
  get rclBounds(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x10: u32
  get iGraphicsMode(): number {
    return this.view.getUint32(16, true);
  }

  // 0x14: f32
  get exScale(): number {
    return this.view.getFloat32(20, true);
  }

  // 0x18: f32
  get eyScale(): number {
    return this.view.getFloat32(24, true);
  }

  // 0x1c: pad4

  // 0x20: pointer
  get emrtext(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(32, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: pointer
  set emr(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(0, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x08: pointer
  set rclBounds(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x10: u32
  set iGraphicsMode(value: number) {
    this.view.setUint32(16, value, true);
  }

  // 0x14: f32
  set exScale(value: number) {
    this.view.setFloat32(20, value, true);
  }

  // 0x18: f32
  set eyScale(value: number) {
    this.view.setFloat32(24, value, true);
  }

  // 0x1c: pad4

  // 0x20: pointer
  set emrtext(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(32, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.Graphics.Gdi.EMRPOLYTEXTOUTA (size: 40)
 */
export interface EMRPOLYTEXTOUTA {
  /** Windows.Win32.Graphics.Gdi.EMR */
  emr: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.Foundation.RECTL */
  rclBounds: Uint8Array | Deno.PointerValue;
  /** u32 */
  iGraphicsMode: number;
  /** f32 */
  exScale: number;
  /** f32 */
  eyScale: number;
  /** i32 */
  cStrings: number;
  /** array */
  aemrtext: Deno.PointerValue;
}

export const sizeofEMRPOLYTEXTOUTA = 40;

export function allocEMRPOLYTEXTOUTA(data?: Partial<EMRPOLYTEXTOUTA>): Uint8Array {
  const buf = new Uint8Array(sizeofEMRPOLYTEXTOUTA);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.emr !== undefined) view.setBigUint64(0, data.emr === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.emr))), true);
  // 0x08: pointer
  if (data?.rclBounds !== undefined) view.setBigUint64(8, data.rclBounds === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.rclBounds))), true);
  // 0x10: u32
  if (data?.iGraphicsMode !== undefined) view.setUint32(16, Number(data.iGraphicsMode), true);
  // 0x14: f32
  if (data?.exScale !== undefined) view.setFloat32(20, Number(data.exScale), true);
  // 0x18: f32
  if (data?.eyScale !== undefined) view.setFloat32(24, Number(data.eyScale), true);
  // 0x1c: i32
  if (data?.cStrings !== undefined) view.setInt32(28, Number(data.cStrings), true);
  // 0x20: pointer
  if (data?.aemrtext !== undefined) view.setBigUint64(32, data.aemrtext === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.aemrtext))), true);
  return buf;
}

export class EMRPOLYTEXTOUTAView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get emr(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(0, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x08: pointer
  get rclBounds(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x10: u32
  get iGraphicsMode(): number {
    return this.view.getUint32(16, true);
  }

  // 0x14: f32
  get exScale(): number {
    return this.view.getFloat32(20, true);
  }

  // 0x18: f32
  get eyScale(): number {
    return this.view.getFloat32(24, true);
  }

  // 0x1c: i32
  get cStrings(): number {
    return this.view.getInt32(28, true);
  }

  // 0x20: pointer
  get aemrtext(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(32, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: pointer
  set emr(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(0, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x08: pointer
  set rclBounds(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x10: u32
  set iGraphicsMode(value: number) {
    this.view.setUint32(16, value, true);
  }

  // 0x14: f32
  set exScale(value: number) {
    this.view.setFloat32(20, value, true);
  }

  // 0x18: f32
  set eyScale(value: number) {
    this.view.setFloat32(24, value, true);
  }

  // 0x1c: i32
  set cStrings(value: number) {
    this.view.setInt32(28, value, true);
  }

  // 0x20: pointer
  set aemrtext(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(32, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.Graphics.Gdi.EMRBITBLT (size: 88)
 */
export interface EMRBITBLT {
  /** Windows.Win32.Graphics.Gdi.EMR */
  emr: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.Foundation.RECTL */
  rclBounds: Uint8Array | Deno.PointerValue;
  /** i32 */
  xDest: number;
  /** i32 */
  yDest: number;
  /** i32 */
  cxDest: number;
  /** i32 */
  cyDest: number;
  /** u32 */
  dwRop: number;
  /** i32 */
  xSrc: number;
  /** i32 */
  ySrc: number;
  /** Windows.Win32.Graphics.Gdi.XFORM */
  xformSrc: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.Foundation.COLORREF */
  crBkColorSrc: Uint8Array | Deno.PointerValue;
  /** u32 */
  iUsageSrc: number;
  /** u32 */
  offBmiSrc: number;
  /** u32 */
  cbBmiSrc: number;
  /** u32 */
  offBitsSrc: number;
  /** u32 */
  cbBitsSrc: number;
}

export const sizeofEMRBITBLT = 88;

export function allocEMRBITBLT(data?: Partial<EMRBITBLT>): Uint8Array {
  const buf = new Uint8Array(sizeofEMRBITBLT);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.emr !== undefined) view.setBigUint64(0, data.emr === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.emr))), true);
  // 0x08: pointer
  if (data?.rclBounds !== undefined) view.setBigUint64(8, data.rclBounds === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.rclBounds))), true);
  // 0x10: i32
  if (data?.xDest !== undefined) view.setInt32(16, Number(data.xDest), true);
  // 0x14: i32
  if (data?.yDest !== undefined) view.setInt32(20, Number(data.yDest), true);
  // 0x18: i32
  if (data?.cxDest !== undefined) view.setInt32(24, Number(data.cxDest), true);
  // 0x1c: i32
  if (data?.cyDest !== undefined) view.setInt32(28, Number(data.cyDest), true);
  // 0x20: u32
  if (data?.dwRop !== undefined) view.setUint32(32, Number(data.dwRop), true);
  // 0x24: i32
  if (data?.xSrc !== undefined) view.setInt32(36, Number(data.xSrc), true);
  // 0x28: i32
  if (data?.ySrc !== undefined) view.setInt32(40, Number(data.ySrc), true);
  // 0x2c: pad4
  // 0x30: pointer
  if (data?.xformSrc !== undefined) view.setBigUint64(48, data.xformSrc === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.xformSrc))), true);
  // 0x38: pointer
  if (data?.crBkColorSrc !== undefined) view.setBigUint64(56, data.crBkColorSrc === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.crBkColorSrc))), true);
  // 0x40: u32
  if (data?.iUsageSrc !== undefined) view.setUint32(64, Number(data.iUsageSrc), true);
  // 0x44: u32
  if (data?.offBmiSrc !== undefined) view.setUint32(68, Number(data.offBmiSrc), true);
  // 0x48: u32
  if (data?.cbBmiSrc !== undefined) view.setUint32(72, Number(data.cbBmiSrc), true);
  // 0x4c: u32
  if (data?.offBitsSrc !== undefined) view.setUint32(76, Number(data.offBitsSrc), true);
  // 0x50: u32
  if (data?.cbBitsSrc !== undefined) view.setUint32(80, Number(data.cbBitsSrc), true);
  // 0x54: pad4
  return buf;
}

export class EMRBITBLTView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get emr(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(0, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x08: pointer
  get rclBounds(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x10: i32
  get xDest(): number {
    return this.view.getInt32(16, true);
  }

  // 0x14: i32
  get yDest(): number {
    return this.view.getInt32(20, true);
  }

  // 0x18: i32
  get cxDest(): number {
    return this.view.getInt32(24, true);
  }

  // 0x1c: i32
  get cyDest(): number {
    return this.view.getInt32(28, true);
  }

  // 0x20: u32
  get dwRop(): number {
    return this.view.getUint32(32, true);
  }

  // 0x24: i32
  get xSrc(): number {
    return this.view.getInt32(36, true);
  }

  // 0x28: i32
  get ySrc(): number {
    return this.view.getInt32(40, true);
  }

  // 0x2c: pad4

  // 0x30: pointer
  get xformSrc(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(48, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x38: pointer
  get crBkColorSrc(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(56, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x40: u32
  get iUsageSrc(): number {
    return this.view.getUint32(64, true);
  }

  // 0x44: u32
  get offBmiSrc(): number {
    return this.view.getUint32(68, true);
  }

  // 0x48: u32
  get cbBmiSrc(): number {
    return this.view.getUint32(72, true);
  }

  // 0x4c: u32
  get offBitsSrc(): number {
    return this.view.getUint32(76, true);
  }

  // 0x50: u32
  get cbBitsSrc(): number {
    return this.view.getUint32(80, true);
  }

  // 0x54: pad4

  // 0x00: pointer
  set emr(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(0, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x08: pointer
  set rclBounds(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x10: i32
  set xDest(value: number) {
    this.view.setInt32(16, value, true);
  }

  // 0x14: i32
  set yDest(value: number) {
    this.view.setInt32(20, value, true);
  }

  // 0x18: i32
  set cxDest(value: number) {
    this.view.setInt32(24, value, true);
  }

  // 0x1c: i32
  set cyDest(value: number) {
    this.view.setInt32(28, value, true);
  }

  // 0x20: u32
  set dwRop(value: number) {
    this.view.setUint32(32, value, true);
  }

  // 0x24: i32
  set xSrc(value: number) {
    this.view.setInt32(36, value, true);
  }

  // 0x28: i32
  set ySrc(value: number) {
    this.view.setInt32(40, value, true);
  }

  // 0x2c: pad4

  // 0x30: pointer
  set xformSrc(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(48, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x38: pointer
  set crBkColorSrc(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(56, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x40: u32
  set iUsageSrc(value: number) {
    this.view.setUint32(64, value, true);
  }

  // 0x44: u32
  set offBmiSrc(value: number) {
    this.view.setUint32(68, value, true);
  }

  // 0x48: u32
  set cbBmiSrc(value: number) {
    this.view.setUint32(72, value, true);
  }

  // 0x4c: u32
  set offBitsSrc(value: number) {
    this.view.setUint32(76, value, true);
  }

  // 0x50: u32
  set cbBitsSrc(value: number) {
    this.view.setUint32(80, value, true);
  }

  // 0x54: pad4
}

/**
 * Windows.Win32.Graphics.Gdi.EMRSTRETCHBLT (size: 96)
 */
export interface EMRSTRETCHBLT {
  /** Windows.Win32.Graphics.Gdi.EMR */
  emr: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.Foundation.RECTL */
  rclBounds: Uint8Array | Deno.PointerValue;
  /** i32 */
  xDest: number;
  /** i32 */
  yDest: number;
  /** i32 */
  cxDest: number;
  /** i32 */
  cyDest: number;
  /** u32 */
  dwRop: number;
  /** i32 */
  xSrc: number;
  /** i32 */
  ySrc: number;
  /** Windows.Win32.Graphics.Gdi.XFORM */
  xformSrc: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.Foundation.COLORREF */
  crBkColorSrc: Uint8Array | Deno.PointerValue;
  /** u32 */
  iUsageSrc: number;
  /** u32 */
  offBmiSrc: number;
  /** u32 */
  cbBmiSrc: number;
  /** u32 */
  offBitsSrc: number;
  /** u32 */
  cbBitsSrc: number;
  /** i32 */
  cxSrc: number;
  /** i32 */
  cySrc: number;
}

export const sizeofEMRSTRETCHBLT = 96;

export function allocEMRSTRETCHBLT(data?: Partial<EMRSTRETCHBLT>): Uint8Array {
  const buf = new Uint8Array(sizeofEMRSTRETCHBLT);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.emr !== undefined) view.setBigUint64(0, data.emr === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.emr))), true);
  // 0x08: pointer
  if (data?.rclBounds !== undefined) view.setBigUint64(8, data.rclBounds === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.rclBounds))), true);
  // 0x10: i32
  if (data?.xDest !== undefined) view.setInt32(16, Number(data.xDest), true);
  // 0x14: i32
  if (data?.yDest !== undefined) view.setInt32(20, Number(data.yDest), true);
  // 0x18: i32
  if (data?.cxDest !== undefined) view.setInt32(24, Number(data.cxDest), true);
  // 0x1c: i32
  if (data?.cyDest !== undefined) view.setInt32(28, Number(data.cyDest), true);
  // 0x20: u32
  if (data?.dwRop !== undefined) view.setUint32(32, Number(data.dwRop), true);
  // 0x24: i32
  if (data?.xSrc !== undefined) view.setInt32(36, Number(data.xSrc), true);
  // 0x28: i32
  if (data?.ySrc !== undefined) view.setInt32(40, Number(data.ySrc), true);
  // 0x2c: pad4
  // 0x30: pointer
  if (data?.xformSrc !== undefined) view.setBigUint64(48, data.xformSrc === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.xformSrc))), true);
  // 0x38: pointer
  if (data?.crBkColorSrc !== undefined) view.setBigUint64(56, data.crBkColorSrc === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.crBkColorSrc))), true);
  // 0x40: u32
  if (data?.iUsageSrc !== undefined) view.setUint32(64, Number(data.iUsageSrc), true);
  // 0x44: u32
  if (data?.offBmiSrc !== undefined) view.setUint32(68, Number(data.offBmiSrc), true);
  // 0x48: u32
  if (data?.cbBmiSrc !== undefined) view.setUint32(72, Number(data.cbBmiSrc), true);
  // 0x4c: u32
  if (data?.offBitsSrc !== undefined) view.setUint32(76, Number(data.offBitsSrc), true);
  // 0x50: u32
  if (data?.cbBitsSrc !== undefined) view.setUint32(80, Number(data.cbBitsSrc), true);
  // 0x54: i32
  if (data?.cxSrc !== undefined) view.setInt32(84, Number(data.cxSrc), true);
  // 0x58: i32
  if (data?.cySrc !== undefined) view.setInt32(88, Number(data.cySrc), true);
  // 0x5c: pad4
  return buf;
}

export class EMRSTRETCHBLTView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get emr(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(0, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x08: pointer
  get rclBounds(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x10: i32
  get xDest(): number {
    return this.view.getInt32(16, true);
  }

  // 0x14: i32
  get yDest(): number {
    return this.view.getInt32(20, true);
  }

  // 0x18: i32
  get cxDest(): number {
    return this.view.getInt32(24, true);
  }

  // 0x1c: i32
  get cyDest(): number {
    return this.view.getInt32(28, true);
  }

  // 0x20: u32
  get dwRop(): number {
    return this.view.getUint32(32, true);
  }

  // 0x24: i32
  get xSrc(): number {
    return this.view.getInt32(36, true);
  }

  // 0x28: i32
  get ySrc(): number {
    return this.view.getInt32(40, true);
  }

  // 0x2c: pad4

  // 0x30: pointer
  get xformSrc(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(48, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x38: pointer
  get crBkColorSrc(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(56, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x40: u32
  get iUsageSrc(): number {
    return this.view.getUint32(64, true);
  }

  // 0x44: u32
  get offBmiSrc(): number {
    return this.view.getUint32(68, true);
  }

  // 0x48: u32
  get cbBmiSrc(): number {
    return this.view.getUint32(72, true);
  }

  // 0x4c: u32
  get offBitsSrc(): number {
    return this.view.getUint32(76, true);
  }

  // 0x50: u32
  get cbBitsSrc(): number {
    return this.view.getUint32(80, true);
  }

  // 0x54: i32
  get cxSrc(): number {
    return this.view.getInt32(84, true);
  }

  // 0x58: i32
  get cySrc(): number {
    return this.view.getInt32(88, true);
  }

  // 0x5c: pad4

  // 0x00: pointer
  set emr(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(0, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x08: pointer
  set rclBounds(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x10: i32
  set xDest(value: number) {
    this.view.setInt32(16, value, true);
  }

  // 0x14: i32
  set yDest(value: number) {
    this.view.setInt32(20, value, true);
  }

  // 0x18: i32
  set cxDest(value: number) {
    this.view.setInt32(24, value, true);
  }

  // 0x1c: i32
  set cyDest(value: number) {
    this.view.setInt32(28, value, true);
  }

  // 0x20: u32
  set dwRop(value: number) {
    this.view.setUint32(32, value, true);
  }

  // 0x24: i32
  set xSrc(value: number) {
    this.view.setInt32(36, value, true);
  }

  // 0x28: i32
  set ySrc(value: number) {
    this.view.setInt32(40, value, true);
  }

  // 0x2c: pad4

  // 0x30: pointer
  set xformSrc(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(48, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x38: pointer
  set crBkColorSrc(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(56, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x40: u32
  set iUsageSrc(value: number) {
    this.view.setUint32(64, value, true);
  }

  // 0x44: u32
  set offBmiSrc(value: number) {
    this.view.setUint32(68, value, true);
  }

  // 0x48: u32
  set cbBmiSrc(value: number) {
    this.view.setUint32(72, value, true);
  }

  // 0x4c: u32
  set offBitsSrc(value: number) {
    this.view.setUint32(76, value, true);
  }

  // 0x50: u32
  set cbBitsSrc(value: number) {
    this.view.setUint32(80, value, true);
  }

  // 0x54: i32
  set cxSrc(value: number) {
    this.view.setInt32(84, value, true);
  }

  // 0x58: i32
  set cySrc(value: number) {
    this.view.setInt32(88, value, true);
  }

  // 0x5c: pad4
}

/**
 * Windows.Win32.Graphics.Gdi.EMRMASKBLT (size: 112)
 */
export interface EMRMASKBLT {
  /** Windows.Win32.Graphics.Gdi.EMR */
  emr: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.Foundation.RECTL */
  rclBounds: Uint8Array | Deno.PointerValue;
  /** i32 */
  xDest: number;
  /** i32 */
  yDest: number;
  /** i32 */
  cxDest: number;
  /** i32 */
  cyDest: number;
  /** u32 */
  dwRop: number;
  /** i32 */
  xSrc: number;
  /** i32 */
  ySrc: number;
  /** Windows.Win32.Graphics.Gdi.XFORM */
  xformSrc: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.Foundation.COLORREF */
  crBkColorSrc: Uint8Array | Deno.PointerValue;
  /** u32 */
  iUsageSrc: number;
  /** u32 */
  offBmiSrc: number;
  /** u32 */
  cbBmiSrc: number;
  /** u32 */
  offBitsSrc: number;
  /** u32 */
  cbBitsSrc: number;
  /** i32 */
  xMask: number;
  /** i32 */
  yMask: number;
  /** u32 */
  iUsageMask: number;
  /** u32 */
  offBmiMask: number;
  /** u32 */
  cbBmiMask: number;
  /** u32 */
  offBitsMask: number;
  /** u32 */
  cbBitsMask: number;
}

export const sizeofEMRMASKBLT = 112;

export function allocEMRMASKBLT(data?: Partial<EMRMASKBLT>): Uint8Array {
  const buf = new Uint8Array(sizeofEMRMASKBLT);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.emr !== undefined) view.setBigUint64(0, data.emr === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.emr))), true);
  // 0x08: pointer
  if (data?.rclBounds !== undefined) view.setBigUint64(8, data.rclBounds === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.rclBounds))), true);
  // 0x10: i32
  if (data?.xDest !== undefined) view.setInt32(16, Number(data.xDest), true);
  // 0x14: i32
  if (data?.yDest !== undefined) view.setInt32(20, Number(data.yDest), true);
  // 0x18: i32
  if (data?.cxDest !== undefined) view.setInt32(24, Number(data.cxDest), true);
  // 0x1c: i32
  if (data?.cyDest !== undefined) view.setInt32(28, Number(data.cyDest), true);
  // 0x20: u32
  if (data?.dwRop !== undefined) view.setUint32(32, Number(data.dwRop), true);
  // 0x24: i32
  if (data?.xSrc !== undefined) view.setInt32(36, Number(data.xSrc), true);
  // 0x28: i32
  if (data?.ySrc !== undefined) view.setInt32(40, Number(data.ySrc), true);
  // 0x2c: pad4
  // 0x30: pointer
  if (data?.xformSrc !== undefined) view.setBigUint64(48, data.xformSrc === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.xformSrc))), true);
  // 0x38: pointer
  if (data?.crBkColorSrc !== undefined) view.setBigUint64(56, data.crBkColorSrc === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.crBkColorSrc))), true);
  // 0x40: u32
  if (data?.iUsageSrc !== undefined) view.setUint32(64, Number(data.iUsageSrc), true);
  // 0x44: u32
  if (data?.offBmiSrc !== undefined) view.setUint32(68, Number(data.offBmiSrc), true);
  // 0x48: u32
  if (data?.cbBmiSrc !== undefined) view.setUint32(72, Number(data.cbBmiSrc), true);
  // 0x4c: u32
  if (data?.offBitsSrc !== undefined) view.setUint32(76, Number(data.offBitsSrc), true);
  // 0x50: u32
  if (data?.cbBitsSrc !== undefined) view.setUint32(80, Number(data.cbBitsSrc), true);
  // 0x54: i32
  if (data?.xMask !== undefined) view.setInt32(84, Number(data.xMask), true);
  // 0x58: i32
  if (data?.yMask !== undefined) view.setInt32(88, Number(data.yMask), true);
  // 0x5c: u32
  if (data?.iUsageMask !== undefined) view.setUint32(92, Number(data.iUsageMask), true);
  // 0x60: u32
  if (data?.offBmiMask !== undefined) view.setUint32(96, Number(data.offBmiMask), true);
  // 0x64: u32
  if (data?.cbBmiMask !== undefined) view.setUint32(100, Number(data.cbBmiMask), true);
  // 0x68: u32
  if (data?.offBitsMask !== undefined) view.setUint32(104, Number(data.offBitsMask), true);
  // 0x6c: u32
  if (data?.cbBitsMask !== undefined) view.setUint32(108, Number(data.cbBitsMask), true);
  return buf;
}

export class EMRMASKBLTView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get emr(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(0, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x08: pointer
  get rclBounds(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x10: i32
  get xDest(): number {
    return this.view.getInt32(16, true);
  }

  // 0x14: i32
  get yDest(): number {
    return this.view.getInt32(20, true);
  }

  // 0x18: i32
  get cxDest(): number {
    return this.view.getInt32(24, true);
  }

  // 0x1c: i32
  get cyDest(): number {
    return this.view.getInt32(28, true);
  }

  // 0x20: u32
  get dwRop(): number {
    return this.view.getUint32(32, true);
  }

  // 0x24: i32
  get xSrc(): number {
    return this.view.getInt32(36, true);
  }

  // 0x28: i32
  get ySrc(): number {
    return this.view.getInt32(40, true);
  }

  // 0x2c: pad4

  // 0x30: pointer
  get xformSrc(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(48, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x38: pointer
  get crBkColorSrc(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(56, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x40: u32
  get iUsageSrc(): number {
    return this.view.getUint32(64, true);
  }

  // 0x44: u32
  get offBmiSrc(): number {
    return this.view.getUint32(68, true);
  }

  // 0x48: u32
  get cbBmiSrc(): number {
    return this.view.getUint32(72, true);
  }

  // 0x4c: u32
  get offBitsSrc(): number {
    return this.view.getUint32(76, true);
  }

  // 0x50: u32
  get cbBitsSrc(): number {
    return this.view.getUint32(80, true);
  }

  // 0x54: i32
  get xMask(): number {
    return this.view.getInt32(84, true);
  }

  // 0x58: i32
  get yMask(): number {
    return this.view.getInt32(88, true);
  }

  // 0x5c: u32
  get iUsageMask(): number {
    return this.view.getUint32(92, true);
  }

  // 0x60: u32
  get offBmiMask(): number {
    return this.view.getUint32(96, true);
  }

  // 0x64: u32
  get cbBmiMask(): number {
    return this.view.getUint32(100, true);
  }

  // 0x68: u32
  get offBitsMask(): number {
    return this.view.getUint32(104, true);
  }

  // 0x6c: u32
  get cbBitsMask(): number {
    return this.view.getUint32(108, true);
  }

  // 0x00: pointer
  set emr(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(0, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x08: pointer
  set rclBounds(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x10: i32
  set xDest(value: number) {
    this.view.setInt32(16, value, true);
  }

  // 0x14: i32
  set yDest(value: number) {
    this.view.setInt32(20, value, true);
  }

  // 0x18: i32
  set cxDest(value: number) {
    this.view.setInt32(24, value, true);
  }

  // 0x1c: i32
  set cyDest(value: number) {
    this.view.setInt32(28, value, true);
  }

  // 0x20: u32
  set dwRop(value: number) {
    this.view.setUint32(32, value, true);
  }

  // 0x24: i32
  set xSrc(value: number) {
    this.view.setInt32(36, value, true);
  }

  // 0x28: i32
  set ySrc(value: number) {
    this.view.setInt32(40, value, true);
  }

  // 0x2c: pad4

  // 0x30: pointer
  set xformSrc(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(48, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x38: pointer
  set crBkColorSrc(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(56, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x40: u32
  set iUsageSrc(value: number) {
    this.view.setUint32(64, value, true);
  }

  // 0x44: u32
  set offBmiSrc(value: number) {
    this.view.setUint32(68, value, true);
  }

  // 0x48: u32
  set cbBmiSrc(value: number) {
    this.view.setUint32(72, value, true);
  }

  // 0x4c: u32
  set offBitsSrc(value: number) {
    this.view.setUint32(76, value, true);
  }

  // 0x50: u32
  set cbBitsSrc(value: number) {
    this.view.setUint32(80, value, true);
  }

  // 0x54: i32
  set xMask(value: number) {
    this.view.setInt32(84, value, true);
  }

  // 0x58: i32
  set yMask(value: number) {
    this.view.setInt32(88, value, true);
  }

  // 0x5c: u32
  set iUsageMask(value: number) {
    this.view.setUint32(92, value, true);
  }

  // 0x60: u32
  set offBmiMask(value: number) {
    this.view.setUint32(96, value, true);
  }

  // 0x64: u32
  set cbBmiMask(value: number) {
    this.view.setUint32(100, value, true);
  }

  // 0x68: u32
  set offBitsMask(value: number) {
    this.view.setUint32(104, value, true);
  }

  // 0x6c: u32
  set cbBitsMask(value: number) {
    this.view.setUint32(108, value, true);
  }
}

/**
 * Windows.Win32.Graphics.Gdi.EMRPLGBLT (size: 104)
 */
export interface EMRPLGBLT {
  /** Windows.Win32.Graphics.Gdi.EMR */
  emr: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.Foundation.RECTL */
  rclBounds: Uint8Array | Deno.PointerValue;
  /** array */
  aptlDest: Deno.PointerValue;
  /** i32 */
  xSrc: number;
  /** i32 */
  ySrc: number;
  /** i32 */
  cxSrc: number;
  /** i32 */
  cySrc: number;
  /** Windows.Win32.Graphics.Gdi.XFORM */
  xformSrc: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.Foundation.COLORREF */
  crBkColorSrc: Uint8Array | Deno.PointerValue;
  /** u32 */
  iUsageSrc: number;
  /** u32 */
  offBmiSrc: number;
  /** u32 */
  cbBmiSrc: number;
  /** u32 */
  offBitsSrc: number;
  /** u32 */
  cbBitsSrc: number;
  /** i32 */
  xMask: number;
  /** i32 */
  yMask: number;
  /** u32 */
  iUsageMask: number;
  /** u32 */
  offBmiMask: number;
  /** u32 */
  cbBmiMask: number;
  /** u32 */
  offBitsMask: number;
  /** u32 */
  cbBitsMask: number;
}

export const sizeofEMRPLGBLT = 104;

export function allocEMRPLGBLT(data?: Partial<EMRPLGBLT>): Uint8Array {
  const buf = new Uint8Array(sizeofEMRPLGBLT);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.emr !== undefined) view.setBigUint64(0, data.emr === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.emr))), true);
  // 0x08: pointer
  if (data?.rclBounds !== undefined) view.setBigUint64(8, data.rclBounds === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.rclBounds))), true);
  // 0x10: pointer
  if (data?.aptlDest !== undefined) view.setBigUint64(16, data.aptlDest === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.aptlDest))), true);
  // 0x18: i32
  if (data?.xSrc !== undefined) view.setInt32(24, Number(data.xSrc), true);
  // 0x1c: i32
  if (data?.ySrc !== undefined) view.setInt32(28, Number(data.ySrc), true);
  // 0x20: i32
  if (data?.cxSrc !== undefined) view.setInt32(32, Number(data.cxSrc), true);
  // 0x24: i32
  if (data?.cySrc !== undefined) view.setInt32(36, Number(data.cySrc), true);
  // 0x28: pointer
  if (data?.xformSrc !== undefined) view.setBigUint64(40, data.xformSrc === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.xformSrc))), true);
  // 0x30: pointer
  if (data?.crBkColorSrc !== undefined) view.setBigUint64(48, data.crBkColorSrc === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.crBkColorSrc))), true);
  // 0x38: u32
  if (data?.iUsageSrc !== undefined) view.setUint32(56, Number(data.iUsageSrc), true);
  // 0x3c: u32
  if (data?.offBmiSrc !== undefined) view.setUint32(60, Number(data.offBmiSrc), true);
  // 0x40: u32
  if (data?.cbBmiSrc !== undefined) view.setUint32(64, Number(data.cbBmiSrc), true);
  // 0x44: u32
  if (data?.offBitsSrc !== undefined) view.setUint32(68, Number(data.offBitsSrc), true);
  // 0x48: u32
  if (data?.cbBitsSrc !== undefined) view.setUint32(72, Number(data.cbBitsSrc), true);
  // 0x4c: i32
  if (data?.xMask !== undefined) view.setInt32(76, Number(data.xMask), true);
  // 0x50: i32
  if (data?.yMask !== undefined) view.setInt32(80, Number(data.yMask), true);
  // 0x54: u32
  if (data?.iUsageMask !== undefined) view.setUint32(84, Number(data.iUsageMask), true);
  // 0x58: u32
  if (data?.offBmiMask !== undefined) view.setUint32(88, Number(data.offBmiMask), true);
  // 0x5c: u32
  if (data?.cbBmiMask !== undefined) view.setUint32(92, Number(data.cbBmiMask), true);
  // 0x60: u32
  if (data?.offBitsMask !== undefined) view.setUint32(96, Number(data.offBitsMask), true);
  // 0x64: u32
  if (data?.cbBitsMask !== undefined) view.setUint32(100, Number(data.cbBitsMask), true);
  return buf;
}

export class EMRPLGBLTView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get emr(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(0, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x08: pointer
  get rclBounds(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x10: pointer
  get aptlDest(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(16, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x18: i32
  get xSrc(): number {
    return this.view.getInt32(24, true);
  }

  // 0x1c: i32
  get ySrc(): number {
    return this.view.getInt32(28, true);
  }

  // 0x20: i32
  get cxSrc(): number {
    return this.view.getInt32(32, true);
  }

  // 0x24: i32
  get cySrc(): number {
    return this.view.getInt32(36, true);
  }

  // 0x28: pointer
  get xformSrc(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(40, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x30: pointer
  get crBkColorSrc(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(48, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x38: u32
  get iUsageSrc(): number {
    return this.view.getUint32(56, true);
  }

  // 0x3c: u32
  get offBmiSrc(): number {
    return this.view.getUint32(60, true);
  }

  // 0x40: u32
  get cbBmiSrc(): number {
    return this.view.getUint32(64, true);
  }

  // 0x44: u32
  get offBitsSrc(): number {
    return this.view.getUint32(68, true);
  }

  // 0x48: u32
  get cbBitsSrc(): number {
    return this.view.getUint32(72, true);
  }

  // 0x4c: i32
  get xMask(): number {
    return this.view.getInt32(76, true);
  }

  // 0x50: i32
  get yMask(): number {
    return this.view.getInt32(80, true);
  }

  // 0x54: u32
  get iUsageMask(): number {
    return this.view.getUint32(84, true);
  }

  // 0x58: u32
  get offBmiMask(): number {
    return this.view.getUint32(88, true);
  }

  // 0x5c: u32
  get cbBmiMask(): number {
    return this.view.getUint32(92, true);
  }

  // 0x60: u32
  get offBitsMask(): number {
    return this.view.getUint32(96, true);
  }

  // 0x64: u32
  get cbBitsMask(): number {
    return this.view.getUint32(100, true);
  }

  // 0x00: pointer
  set emr(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(0, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x08: pointer
  set rclBounds(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x10: pointer
  set aptlDest(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(16, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x18: i32
  set xSrc(value: number) {
    this.view.setInt32(24, value, true);
  }

  // 0x1c: i32
  set ySrc(value: number) {
    this.view.setInt32(28, value, true);
  }

  // 0x20: i32
  set cxSrc(value: number) {
    this.view.setInt32(32, value, true);
  }

  // 0x24: i32
  set cySrc(value: number) {
    this.view.setInt32(36, value, true);
  }

  // 0x28: pointer
  set xformSrc(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(40, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x30: pointer
  set crBkColorSrc(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(48, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x38: u32
  set iUsageSrc(value: number) {
    this.view.setUint32(56, value, true);
  }

  // 0x3c: u32
  set offBmiSrc(value: number) {
    this.view.setUint32(60, value, true);
  }

  // 0x40: u32
  set cbBmiSrc(value: number) {
    this.view.setUint32(64, value, true);
  }

  // 0x44: u32
  set offBitsSrc(value: number) {
    this.view.setUint32(68, value, true);
  }

  // 0x48: u32
  set cbBitsSrc(value: number) {
    this.view.setUint32(72, value, true);
  }

  // 0x4c: i32
  set xMask(value: number) {
    this.view.setInt32(76, value, true);
  }

  // 0x50: i32
  set yMask(value: number) {
    this.view.setInt32(80, value, true);
  }

  // 0x54: u32
  set iUsageMask(value: number) {
    this.view.setUint32(84, value, true);
  }

  // 0x58: u32
  set offBmiMask(value: number) {
    this.view.setUint32(88, value, true);
  }

  // 0x5c: u32
  set cbBmiMask(value: number) {
    this.view.setUint32(92, value, true);
  }

  // 0x60: u32
  set offBitsMask(value: number) {
    this.view.setUint32(96, value, true);
  }

  // 0x64: u32
  set cbBitsMask(value: number) {
    this.view.setUint32(100, value, true);
  }
}

/**
 * Windows.Win32.Graphics.Gdi.EMRSETDIBITSTODEVICE (size: 72)
 */
export interface EMRSETDIBITSTODEVICE {
  /** Windows.Win32.Graphics.Gdi.EMR */
  emr: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.Foundation.RECTL */
  rclBounds: Uint8Array | Deno.PointerValue;
  /** i32 */
  xDest: number;
  /** i32 */
  yDest: number;
  /** i32 */
  xSrc: number;
  /** i32 */
  ySrc: number;
  /** i32 */
  cxSrc: number;
  /** i32 */
  cySrc: number;
  /** u32 */
  offBmiSrc: number;
  /** u32 */
  cbBmiSrc: number;
  /** u32 */
  offBitsSrc: number;
  /** u32 */
  cbBitsSrc: number;
  /** u32 */
  iUsageSrc: number;
  /** u32 */
  iStartScan: number;
  /** u32 */
  cScans: number;
}

export const sizeofEMRSETDIBITSTODEVICE = 72;

export function allocEMRSETDIBITSTODEVICE(data?: Partial<EMRSETDIBITSTODEVICE>): Uint8Array {
  const buf = new Uint8Array(sizeofEMRSETDIBITSTODEVICE);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.emr !== undefined) view.setBigUint64(0, data.emr === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.emr))), true);
  // 0x08: pointer
  if (data?.rclBounds !== undefined) view.setBigUint64(8, data.rclBounds === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.rclBounds))), true);
  // 0x10: i32
  if (data?.xDest !== undefined) view.setInt32(16, Number(data.xDest), true);
  // 0x14: i32
  if (data?.yDest !== undefined) view.setInt32(20, Number(data.yDest), true);
  // 0x18: i32
  if (data?.xSrc !== undefined) view.setInt32(24, Number(data.xSrc), true);
  // 0x1c: i32
  if (data?.ySrc !== undefined) view.setInt32(28, Number(data.ySrc), true);
  // 0x20: i32
  if (data?.cxSrc !== undefined) view.setInt32(32, Number(data.cxSrc), true);
  // 0x24: i32
  if (data?.cySrc !== undefined) view.setInt32(36, Number(data.cySrc), true);
  // 0x28: u32
  if (data?.offBmiSrc !== undefined) view.setUint32(40, Number(data.offBmiSrc), true);
  // 0x2c: u32
  if (data?.cbBmiSrc !== undefined) view.setUint32(44, Number(data.cbBmiSrc), true);
  // 0x30: u32
  if (data?.offBitsSrc !== undefined) view.setUint32(48, Number(data.offBitsSrc), true);
  // 0x34: u32
  if (data?.cbBitsSrc !== undefined) view.setUint32(52, Number(data.cbBitsSrc), true);
  // 0x38: u32
  if (data?.iUsageSrc !== undefined) view.setUint32(56, Number(data.iUsageSrc), true);
  // 0x3c: u32
  if (data?.iStartScan !== undefined) view.setUint32(60, Number(data.iStartScan), true);
  // 0x40: u32
  if (data?.cScans !== undefined) view.setUint32(64, Number(data.cScans), true);
  // 0x44: pad4
  return buf;
}

export class EMRSETDIBITSTODEVICEView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get emr(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(0, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x08: pointer
  get rclBounds(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x10: i32
  get xDest(): number {
    return this.view.getInt32(16, true);
  }

  // 0x14: i32
  get yDest(): number {
    return this.view.getInt32(20, true);
  }

  // 0x18: i32
  get xSrc(): number {
    return this.view.getInt32(24, true);
  }

  // 0x1c: i32
  get ySrc(): number {
    return this.view.getInt32(28, true);
  }

  // 0x20: i32
  get cxSrc(): number {
    return this.view.getInt32(32, true);
  }

  // 0x24: i32
  get cySrc(): number {
    return this.view.getInt32(36, true);
  }

  // 0x28: u32
  get offBmiSrc(): number {
    return this.view.getUint32(40, true);
  }

  // 0x2c: u32
  get cbBmiSrc(): number {
    return this.view.getUint32(44, true);
  }

  // 0x30: u32
  get offBitsSrc(): number {
    return this.view.getUint32(48, true);
  }

  // 0x34: u32
  get cbBitsSrc(): number {
    return this.view.getUint32(52, true);
  }

  // 0x38: u32
  get iUsageSrc(): number {
    return this.view.getUint32(56, true);
  }

  // 0x3c: u32
  get iStartScan(): number {
    return this.view.getUint32(60, true);
  }

  // 0x40: u32
  get cScans(): number {
    return this.view.getUint32(64, true);
  }

  // 0x44: pad4

  // 0x00: pointer
  set emr(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(0, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x08: pointer
  set rclBounds(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x10: i32
  set xDest(value: number) {
    this.view.setInt32(16, value, true);
  }

  // 0x14: i32
  set yDest(value: number) {
    this.view.setInt32(20, value, true);
  }

  // 0x18: i32
  set xSrc(value: number) {
    this.view.setInt32(24, value, true);
  }

  // 0x1c: i32
  set ySrc(value: number) {
    this.view.setInt32(28, value, true);
  }

  // 0x20: i32
  set cxSrc(value: number) {
    this.view.setInt32(32, value, true);
  }

  // 0x24: i32
  set cySrc(value: number) {
    this.view.setInt32(36, value, true);
  }

  // 0x28: u32
  set offBmiSrc(value: number) {
    this.view.setUint32(40, value, true);
  }

  // 0x2c: u32
  set cbBmiSrc(value: number) {
    this.view.setUint32(44, value, true);
  }

  // 0x30: u32
  set offBitsSrc(value: number) {
    this.view.setUint32(48, value, true);
  }

  // 0x34: u32
  set cbBitsSrc(value: number) {
    this.view.setUint32(52, value, true);
  }

  // 0x38: u32
  set iUsageSrc(value: number) {
    this.view.setUint32(56, value, true);
  }

  // 0x3c: u32
  set iStartScan(value: number) {
    this.view.setUint32(60, value, true);
  }

  // 0x40: u32
  set cScans(value: number) {
    this.view.setUint32(64, value, true);
  }

  // 0x44: pad4
}

/**
 * Windows.Win32.Graphics.Gdi.EMRSTRETCHDIBITS (size: 72)
 */
export interface EMRSTRETCHDIBITS {
  /** Windows.Win32.Graphics.Gdi.EMR */
  emr: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.Foundation.RECTL */
  rclBounds: Uint8Array | Deno.PointerValue;
  /** i32 */
  xDest: number;
  /** i32 */
  yDest: number;
  /** i32 */
  xSrc: number;
  /** i32 */
  ySrc: number;
  /** i32 */
  cxSrc: number;
  /** i32 */
  cySrc: number;
  /** u32 */
  offBmiSrc: number;
  /** u32 */
  cbBmiSrc: number;
  /** u32 */
  offBitsSrc: number;
  /** u32 */
  cbBitsSrc: number;
  /** u32 */
  iUsageSrc: number;
  /** u32 */
  dwRop: number;
  /** i32 */
  cxDest: number;
  /** i32 */
  cyDest: number;
}

export const sizeofEMRSTRETCHDIBITS = 72;

export function allocEMRSTRETCHDIBITS(data?: Partial<EMRSTRETCHDIBITS>): Uint8Array {
  const buf = new Uint8Array(sizeofEMRSTRETCHDIBITS);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.emr !== undefined) view.setBigUint64(0, data.emr === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.emr))), true);
  // 0x08: pointer
  if (data?.rclBounds !== undefined) view.setBigUint64(8, data.rclBounds === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.rclBounds))), true);
  // 0x10: i32
  if (data?.xDest !== undefined) view.setInt32(16, Number(data.xDest), true);
  // 0x14: i32
  if (data?.yDest !== undefined) view.setInt32(20, Number(data.yDest), true);
  // 0x18: i32
  if (data?.xSrc !== undefined) view.setInt32(24, Number(data.xSrc), true);
  // 0x1c: i32
  if (data?.ySrc !== undefined) view.setInt32(28, Number(data.ySrc), true);
  // 0x20: i32
  if (data?.cxSrc !== undefined) view.setInt32(32, Number(data.cxSrc), true);
  // 0x24: i32
  if (data?.cySrc !== undefined) view.setInt32(36, Number(data.cySrc), true);
  // 0x28: u32
  if (data?.offBmiSrc !== undefined) view.setUint32(40, Number(data.offBmiSrc), true);
  // 0x2c: u32
  if (data?.cbBmiSrc !== undefined) view.setUint32(44, Number(data.cbBmiSrc), true);
  // 0x30: u32
  if (data?.offBitsSrc !== undefined) view.setUint32(48, Number(data.offBitsSrc), true);
  // 0x34: u32
  if (data?.cbBitsSrc !== undefined) view.setUint32(52, Number(data.cbBitsSrc), true);
  // 0x38: u32
  if (data?.iUsageSrc !== undefined) view.setUint32(56, Number(data.iUsageSrc), true);
  // 0x3c: u32
  if (data?.dwRop !== undefined) view.setUint32(60, Number(data.dwRop), true);
  // 0x40: i32
  if (data?.cxDest !== undefined) view.setInt32(64, Number(data.cxDest), true);
  // 0x44: i32
  if (data?.cyDest !== undefined) view.setInt32(68, Number(data.cyDest), true);
  return buf;
}

export class EMRSTRETCHDIBITSView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get emr(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(0, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x08: pointer
  get rclBounds(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x10: i32
  get xDest(): number {
    return this.view.getInt32(16, true);
  }

  // 0x14: i32
  get yDest(): number {
    return this.view.getInt32(20, true);
  }

  // 0x18: i32
  get xSrc(): number {
    return this.view.getInt32(24, true);
  }

  // 0x1c: i32
  get ySrc(): number {
    return this.view.getInt32(28, true);
  }

  // 0x20: i32
  get cxSrc(): number {
    return this.view.getInt32(32, true);
  }

  // 0x24: i32
  get cySrc(): number {
    return this.view.getInt32(36, true);
  }

  // 0x28: u32
  get offBmiSrc(): number {
    return this.view.getUint32(40, true);
  }

  // 0x2c: u32
  get cbBmiSrc(): number {
    return this.view.getUint32(44, true);
  }

  // 0x30: u32
  get offBitsSrc(): number {
    return this.view.getUint32(48, true);
  }

  // 0x34: u32
  get cbBitsSrc(): number {
    return this.view.getUint32(52, true);
  }

  // 0x38: u32
  get iUsageSrc(): number {
    return this.view.getUint32(56, true);
  }

  // 0x3c: u32
  get dwRop(): number {
    return this.view.getUint32(60, true);
  }

  // 0x40: i32
  get cxDest(): number {
    return this.view.getInt32(64, true);
  }

  // 0x44: i32
  get cyDest(): number {
    return this.view.getInt32(68, true);
  }

  // 0x00: pointer
  set emr(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(0, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x08: pointer
  set rclBounds(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x10: i32
  set xDest(value: number) {
    this.view.setInt32(16, value, true);
  }

  // 0x14: i32
  set yDest(value: number) {
    this.view.setInt32(20, value, true);
  }

  // 0x18: i32
  set xSrc(value: number) {
    this.view.setInt32(24, value, true);
  }

  // 0x1c: i32
  set ySrc(value: number) {
    this.view.setInt32(28, value, true);
  }

  // 0x20: i32
  set cxSrc(value: number) {
    this.view.setInt32(32, value, true);
  }

  // 0x24: i32
  set cySrc(value: number) {
    this.view.setInt32(36, value, true);
  }

  // 0x28: u32
  set offBmiSrc(value: number) {
    this.view.setUint32(40, value, true);
  }

  // 0x2c: u32
  set cbBmiSrc(value: number) {
    this.view.setUint32(44, value, true);
  }

  // 0x30: u32
  set offBitsSrc(value: number) {
    this.view.setUint32(48, value, true);
  }

  // 0x34: u32
  set cbBitsSrc(value: number) {
    this.view.setUint32(52, value, true);
  }

  // 0x38: u32
  set iUsageSrc(value: number) {
    this.view.setUint32(56, value, true);
  }

  // 0x3c: u32
  set dwRop(value: number) {
    this.view.setUint32(60, value, true);
  }

  // 0x40: i32
  set cxDest(value: number) {
    this.view.setInt32(64, value, true);
  }

  // 0x44: i32
  set cyDest(value: number) {
    this.view.setInt32(68, value, true);
  }
}

/**
 * Windows.Win32.Graphics.Gdi.EMREXTCREATEFONTINDIRECTW (size: 24)
 */
export interface EMREXTCREATEFONTINDIRECTW {
  /** Windows.Win32.Graphics.Gdi.EMR */
  emr: Uint8Array | Deno.PointerValue;
  /** u32 */
  ihFont: number;
  /** Windows.Win32.Graphics.Gdi.EXTLOGFONTW */
  elfw: Uint8Array | Deno.PointerValue;
}

export const sizeofEMREXTCREATEFONTINDIRECTW = 24;

export function allocEMREXTCREATEFONTINDIRECTW(data?: Partial<EMREXTCREATEFONTINDIRECTW>): Uint8Array {
  const buf = new Uint8Array(sizeofEMREXTCREATEFONTINDIRECTW);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.emr !== undefined) view.setBigUint64(0, data.emr === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.emr))), true);
  // 0x08: u32
  if (data?.ihFont !== undefined) view.setUint32(8, Number(data.ihFont), true);
  // 0x0c: pad4
  // 0x10: pointer
  if (data?.elfw !== undefined) view.setBigUint64(16, data.elfw === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.elfw))), true);
  return buf;
}

export class EMREXTCREATEFONTINDIRECTWView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get emr(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(0, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x08: u32
  get ihFont(): number {
    return this.view.getUint32(8, true);
  }

  // 0x0c: pad4

  // 0x10: pointer
  get elfw(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(16, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: pointer
  set emr(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(0, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x08: u32
  set ihFont(value: number) {
    this.view.setUint32(8, value, true);
  }

  // 0x0c: pad4

  // 0x10: pointer
  set elfw(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(16, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.Graphics.Gdi.EMRCREATEPALETTE (size: 24)
 */
export interface EMRCREATEPALETTE {
  /** Windows.Win32.Graphics.Gdi.EMR */
  emr: Uint8Array | Deno.PointerValue;
  /** u32 */
  ihPal: number;
  /** Windows.Win32.Graphics.Gdi.LOGPALETTE */
  lgpl: Uint8Array | Deno.PointerValue;
}

export const sizeofEMRCREATEPALETTE = 24;

export function allocEMRCREATEPALETTE(data?: Partial<EMRCREATEPALETTE>): Uint8Array {
  const buf = new Uint8Array(sizeofEMRCREATEPALETTE);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.emr !== undefined) view.setBigUint64(0, data.emr === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.emr))), true);
  // 0x08: u32
  if (data?.ihPal !== undefined) view.setUint32(8, Number(data.ihPal), true);
  // 0x0c: pad4
  // 0x10: pointer
  if (data?.lgpl !== undefined) view.setBigUint64(16, data.lgpl === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.lgpl))), true);
  return buf;
}

export class EMRCREATEPALETTEView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get emr(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(0, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x08: u32
  get ihPal(): number {
    return this.view.getUint32(8, true);
  }

  // 0x0c: pad4

  // 0x10: pointer
  get lgpl(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(16, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: pointer
  set emr(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(0, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x08: u32
  set ihPal(value: number) {
    this.view.setUint32(8, value, true);
  }

  // 0x0c: pad4

  // 0x10: pointer
  set lgpl(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(16, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.Graphics.Gdi.EMRCREATEPEN (size: 24)
 */
export interface EMRCREATEPEN {
  /** Windows.Win32.Graphics.Gdi.EMR */
  emr: Uint8Array | Deno.PointerValue;
  /** u32 */
  ihPen: number;
  /** Windows.Win32.Graphics.Gdi.LOGPEN */
  lopn: Uint8Array | Deno.PointerValue;
}

export const sizeofEMRCREATEPEN = 24;

export function allocEMRCREATEPEN(data?: Partial<EMRCREATEPEN>): Uint8Array {
  const buf = new Uint8Array(sizeofEMRCREATEPEN);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.emr !== undefined) view.setBigUint64(0, data.emr === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.emr))), true);
  // 0x08: u32
  if (data?.ihPen !== undefined) view.setUint32(8, Number(data.ihPen), true);
  // 0x0c: pad4
  // 0x10: pointer
  if (data?.lopn !== undefined) view.setBigUint64(16, data.lopn === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.lopn))), true);
  return buf;
}

export class EMRCREATEPENView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get emr(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(0, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x08: u32
  get ihPen(): number {
    return this.view.getUint32(8, true);
  }

  // 0x0c: pad4

  // 0x10: pointer
  get lopn(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(16, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: pointer
  set emr(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(0, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x08: u32
  set ihPen(value: number) {
    this.view.setUint32(8, value, true);
  }

  // 0x0c: pad4

  // 0x10: pointer
  set lopn(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(16, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.Graphics.Gdi.EMREXTCREATEPEN (size: 40)
 */
export interface EMREXTCREATEPEN {
  /** Windows.Win32.Graphics.Gdi.EMR */
  emr: Uint8Array | Deno.PointerValue;
  /** u32 */
  ihPen: number;
  /** u32 */
  offBmi: number;
  /** u32 */
  cbBmi: number;
  /** u32 */
  offBits: number;
  /** u32 */
  cbBits: number;
  /** Windows.Win32.Graphics.Gdi.EXTLOGPEN32 */
  elp: Uint8Array | Deno.PointerValue;
}

export const sizeofEMREXTCREATEPEN = 40;

export function allocEMREXTCREATEPEN(data?: Partial<EMREXTCREATEPEN>): Uint8Array {
  const buf = new Uint8Array(sizeofEMREXTCREATEPEN);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.emr !== undefined) view.setBigUint64(0, data.emr === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.emr))), true);
  // 0x08: u32
  if (data?.ihPen !== undefined) view.setUint32(8, Number(data.ihPen), true);
  // 0x0c: u32
  if (data?.offBmi !== undefined) view.setUint32(12, Number(data.offBmi), true);
  // 0x10: u32
  if (data?.cbBmi !== undefined) view.setUint32(16, Number(data.cbBmi), true);
  // 0x14: u32
  if (data?.offBits !== undefined) view.setUint32(20, Number(data.offBits), true);
  // 0x18: u32
  if (data?.cbBits !== undefined) view.setUint32(24, Number(data.cbBits), true);
  // 0x1c: pad4
  // 0x20: pointer
  if (data?.elp !== undefined) view.setBigUint64(32, data.elp === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.elp))), true);
  return buf;
}

export class EMREXTCREATEPENView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get emr(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(0, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x08: u32
  get ihPen(): number {
    return this.view.getUint32(8, true);
  }

  // 0x0c: u32
  get offBmi(): number {
    return this.view.getUint32(12, true);
  }

  // 0x10: u32
  get cbBmi(): number {
    return this.view.getUint32(16, true);
  }

  // 0x14: u32
  get offBits(): number {
    return this.view.getUint32(20, true);
  }

  // 0x18: u32
  get cbBits(): number {
    return this.view.getUint32(24, true);
  }

  // 0x1c: pad4

  // 0x20: pointer
  get elp(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(32, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: pointer
  set emr(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(0, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x08: u32
  set ihPen(value: number) {
    this.view.setUint32(8, value, true);
  }

  // 0x0c: u32
  set offBmi(value: number) {
    this.view.setUint32(12, value, true);
  }

  // 0x10: u32
  set cbBmi(value: number) {
    this.view.setUint32(16, value, true);
  }

  // 0x14: u32
  set offBits(value: number) {
    this.view.setUint32(20, value, true);
  }

  // 0x18: u32
  set cbBits(value: number) {
    this.view.setUint32(24, value, true);
  }

  // 0x1c: pad4

  // 0x20: pointer
  set elp(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(32, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.Graphics.Gdi.EMRCREATEBRUSHINDIRECT (size: 24)
 */
export interface EMRCREATEBRUSHINDIRECT {
  /** Windows.Win32.Graphics.Gdi.EMR */
  emr: Uint8Array | Deno.PointerValue;
  /** u32 */
  ihBrush: number;
  /** Windows.Win32.Graphics.Gdi.LOGBRUSH32 */
  lb: Uint8Array | Deno.PointerValue;
}

export const sizeofEMRCREATEBRUSHINDIRECT = 24;

export function allocEMRCREATEBRUSHINDIRECT(data?: Partial<EMRCREATEBRUSHINDIRECT>): Uint8Array {
  const buf = new Uint8Array(sizeofEMRCREATEBRUSHINDIRECT);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.emr !== undefined) view.setBigUint64(0, data.emr === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.emr))), true);
  // 0x08: u32
  if (data?.ihBrush !== undefined) view.setUint32(8, Number(data.ihBrush), true);
  // 0x0c: pad4
  // 0x10: pointer
  if (data?.lb !== undefined) view.setBigUint64(16, data.lb === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.lb))), true);
  return buf;
}

export class EMRCREATEBRUSHINDIRECTView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get emr(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(0, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x08: u32
  get ihBrush(): number {
    return this.view.getUint32(8, true);
  }

  // 0x0c: pad4

  // 0x10: pointer
  get lb(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(16, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: pointer
  set emr(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(0, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x08: u32
  set ihBrush(value: number) {
    this.view.setUint32(8, value, true);
  }

  // 0x0c: pad4

  // 0x10: pointer
  set lb(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(16, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.Graphics.Gdi.EMRCREATEMONOBRUSH (size: 32)
 */
export interface EMRCREATEMONOBRUSH {
  /** Windows.Win32.Graphics.Gdi.EMR */
  emr: Uint8Array | Deno.PointerValue;
  /** u32 */
  ihBrush: number;
  /** u32 */
  iUsage: number;
  /** u32 */
  offBmi: number;
  /** u32 */
  cbBmi: number;
  /** u32 */
  offBits: number;
  /** u32 */
  cbBits: number;
}

export const sizeofEMRCREATEMONOBRUSH = 32;

export function allocEMRCREATEMONOBRUSH(data?: Partial<EMRCREATEMONOBRUSH>): Uint8Array {
  const buf = new Uint8Array(sizeofEMRCREATEMONOBRUSH);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.emr !== undefined) view.setBigUint64(0, data.emr === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.emr))), true);
  // 0x08: u32
  if (data?.ihBrush !== undefined) view.setUint32(8, Number(data.ihBrush), true);
  // 0x0c: u32
  if (data?.iUsage !== undefined) view.setUint32(12, Number(data.iUsage), true);
  // 0x10: u32
  if (data?.offBmi !== undefined) view.setUint32(16, Number(data.offBmi), true);
  // 0x14: u32
  if (data?.cbBmi !== undefined) view.setUint32(20, Number(data.cbBmi), true);
  // 0x18: u32
  if (data?.offBits !== undefined) view.setUint32(24, Number(data.offBits), true);
  // 0x1c: u32
  if (data?.cbBits !== undefined) view.setUint32(28, Number(data.cbBits), true);
  return buf;
}

export class EMRCREATEMONOBRUSHView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get emr(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(0, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x08: u32
  get ihBrush(): number {
    return this.view.getUint32(8, true);
  }

  // 0x0c: u32
  get iUsage(): number {
    return this.view.getUint32(12, true);
  }

  // 0x10: u32
  get offBmi(): number {
    return this.view.getUint32(16, true);
  }

  // 0x14: u32
  get cbBmi(): number {
    return this.view.getUint32(20, true);
  }

  // 0x18: u32
  get offBits(): number {
    return this.view.getUint32(24, true);
  }

  // 0x1c: u32
  get cbBits(): number {
    return this.view.getUint32(28, true);
  }

  // 0x00: pointer
  set emr(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(0, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x08: u32
  set ihBrush(value: number) {
    this.view.setUint32(8, value, true);
  }

  // 0x0c: u32
  set iUsage(value: number) {
    this.view.setUint32(12, value, true);
  }

  // 0x10: u32
  set offBmi(value: number) {
    this.view.setUint32(16, value, true);
  }

  // 0x14: u32
  set cbBmi(value: number) {
    this.view.setUint32(20, value, true);
  }

  // 0x18: u32
  set offBits(value: number) {
    this.view.setUint32(24, value, true);
  }

  // 0x1c: u32
  set cbBits(value: number) {
    this.view.setUint32(28, value, true);
  }
}

/**
 * Windows.Win32.Graphics.Gdi.EMRCREATEDIBPATTERNBRUSHPT (size: 32)
 */
export interface EMRCREATEDIBPATTERNBRUSHPT {
  /** Windows.Win32.Graphics.Gdi.EMR */
  emr: Uint8Array | Deno.PointerValue;
  /** u32 */
  ihBrush: number;
  /** u32 */
  iUsage: number;
  /** u32 */
  offBmi: number;
  /** u32 */
  cbBmi: number;
  /** u32 */
  offBits: number;
  /** u32 */
  cbBits: number;
}

export const sizeofEMRCREATEDIBPATTERNBRUSHPT = 32;

export function allocEMRCREATEDIBPATTERNBRUSHPT(data?: Partial<EMRCREATEDIBPATTERNBRUSHPT>): Uint8Array {
  const buf = new Uint8Array(sizeofEMRCREATEDIBPATTERNBRUSHPT);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.emr !== undefined) view.setBigUint64(0, data.emr === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.emr))), true);
  // 0x08: u32
  if (data?.ihBrush !== undefined) view.setUint32(8, Number(data.ihBrush), true);
  // 0x0c: u32
  if (data?.iUsage !== undefined) view.setUint32(12, Number(data.iUsage), true);
  // 0x10: u32
  if (data?.offBmi !== undefined) view.setUint32(16, Number(data.offBmi), true);
  // 0x14: u32
  if (data?.cbBmi !== undefined) view.setUint32(20, Number(data.cbBmi), true);
  // 0x18: u32
  if (data?.offBits !== undefined) view.setUint32(24, Number(data.offBits), true);
  // 0x1c: u32
  if (data?.cbBits !== undefined) view.setUint32(28, Number(data.cbBits), true);
  return buf;
}

export class EMRCREATEDIBPATTERNBRUSHPTView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get emr(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(0, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x08: u32
  get ihBrush(): number {
    return this.view.getUint32(8, true);
  }

  // 0x0c: u32
  get iUsage(): number {
    return this.view.getUint32(12, true);
  }

  // 0x10: u32
  get offBmi(): number {
    return this.view.getUint32(16, true);
  }

  // 0x14: u32
  get cbBmi(): number {
    return this.view.getUint32(20, true);
  }

  // 0x18: u32
  get offBits(): number {
    return this.view.getUint32(24, true);
  }

  // 0x1c: u32
  get cbBits(): number {
    return this.view.getUint32(28, true);
  }

  // 0x00: pointer
  set emr(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(0, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x08: u32
  set ihBrush(value: number) {
    this.view.setUint32(8, value, true);
  }

  // 0x0c: u32
  set iUsage(value: number) {
    this.view.setUint32(12, value, true);
  }

  // 0x10: u32
  set offBmi(value: number) {
    this.view.setUint32(16, value, true);
  }

  // 0x14: u32
  set cbBmi(value: number) {
    this.view.setUint32(20, value, true);
  }

  // 0x18: u32
  set offBits(value: number) {
    this.view.setUint32(24, value, true);
  }

  // 0x1c: u32
  set cbBits(value: number) {
    this.view.setUint32(28, value, true);
  }
}

/**
 * Windows.Win32.Graphics.Gdi.EMRFORMAT (size: 16)
 */
export interface EMRFORMAT {
  /** u32 */
  dSignature: number;
  /** u32 */
  nVersion: number;
  /** u32 */
  cbData: number;
  /** u32 */
  offData: number;
}

export const sizeofEMRFORMAT = 16;

export function allocEMRFORMAT(data?: Partial<EMRFORMAT>): Uint8Array {
  const buf = new Uint8Array(sizeofEMRFORMAT);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.dSignature !== undefined) view.setUint32(0, Number(data.dSignature), true);
  // 0x04: u32
  if (data?.nVersion !== undefined) view.setUint32(4, Number(data.nVersion), true);
  // 0x08: u32
  if (data?.cbData !== undefined) view.setUint32(8, Number(data.cbData), true);
  // 0x0c: u32
  if (data?.offData !== undefined) view.setUint32(12, Number(data.offData), true);
  return buf;
}

export class EMRFORMATView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get dSignature(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: u32
  get nVersion(): number {
    return this.view.getUint32(4, true);
  }

  // 0x08: u32
  get cbData(): number {
    return this.view.getUint32(8, true);
  }

  // 0x0c: u32
  get offData(): number {
    return this.view.getUint32(12, true);
  }

  // 0x00: u32
  set dSignature(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: u32
  set nVersion(value: number) {
    this.view.setUint32(4, value, true);
  }

  // 0x08: u32
  set cbData(value: number) {
    this.view.setUint32(8, value, true);
  }

  // 0x0c: u32
  set offData(value: number) {
    this.view.setUint32(12, value, true);
  }
}

/**
 * Windows.Win32.Graphics.Gdi.EMRGLSRECORD (size: 24)
 */
export interface EMRGLSRECORD {
  /** Windows.Win32.Graphics.Gdi.EMR */
  emr: Uint8Array | Deno.PointerValue;
  /** u32 */
  cbData: number;
  /** array */
  Data: Deno.PointerValue;
}

export const sizeofEMRGLSRECORD = 24;

export function allocEMRGLSRECORD(data?: Partial<EMRGLSRECORD>): Uint8Array {
  const buf = new Uint8Array(sizeofEMRGLSRECORD);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.emr !== undefined) view.setBigUint64(0, data.emr === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.emr))), true);
  // 0x08: u32
  if (data?.cbData !== undefined) view.setUint32(8, Number(data.cbData), true);
  // 0x0c: pad4
  // 0x10: pointer
  if (data?.Data !== undefined) view.setBigUint64(16, data.Data === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.Data))), true);
  return buf;
}

export class EMRGLSRECORDView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get emr(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(0, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x08: u32
  get cbData(): number {
    return this.view.getUint32(8, true);
  }

  // 0x0c: pad4

  // 0x10: pointer
  get Data(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(16, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: pointer
  set emr(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(0, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x08: u32
  set cbData(value: number) {
    this.view.setUint32(8, value, true);
  }

  // 0x0c: pad4

  // 0x10: pointer
  set Data(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(16, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.Graphics.Gdi.EMRGLSBOUNDEDRECORD (size: 32)
 */
export interface EMRGLSBOUNDEDRECORD {
  /** Windows.Win32.Graphics.Gdi.EMR */
  emr: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.Foundation.RECTL */
  rclBounds: Uint8Array | Deno.PointerValue;
  /** u32 */
  cbData: number;
  /** array */
  Data: Deno.PointerValue;
}

export const sizeofEMRGLSBOUNDEDRECORD = 32;

export function allocEMRGLSBOUNDEDRECORD(data?: Partial<EMRGLSBOUNDEDRECORD>): Uint8Array {
  const buf = new Uint8Array(sizeofEMRGLSBOUNDEDRECORD);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.emr !== undefined) view.setBigUint64(0, data.emr === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.emr))), true);
  // 0x08: pointer
  if (data?.rclBounds !== undefined) view.setBigUint64(8, data.rclBounds === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.rclBounds))), true);
  // 0x10: u32
  if (data?.cbData !== undefined) view.setUint32(16, Number(data.cbData), true);
  // 0x14: pad4
  // 0x18: pointer
  if (data?.Data !== undefined) view.setBigUint64(24, data.Data === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.Data))), true);
  return buf;
}

export class EMRGLSBOUNDEDRECORDView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get emr(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(0, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x08: pointer
  get rclBounds(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x10: u32
  get cbData(): number {
    return this.view.getUint32(16, true);
  }

  // 0x14: pad4

  // 0x18: pointer
  get Data(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(24, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: pointer
  set emr(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(0, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x08: pointer
  set rclBounds(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x10: u32
  set cbData(value: number) {
    this.view.setUint32(16, value, true);
  }

  // 0x14: pad4

  // 0x18: pointer
  set Data(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(24, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.Graphics.Gdi.EMRSETCOLORSPACE (size: 16)
 */
export interface EMRSETCOLORSPACE {
  /** Windows.Win32.Graphics.Gdi.EMR */
  emr: Uint8Array | Deno.PointerValue;
  /** u32 */
  ihCS: number;
}

export const sizeofEMRSETCOLORSPACE = 16;

export function allocEMRSETCOLORSPACE(data?: Partial<EMRSETCOLORSPACE>): Uint8Array {
  const buf = new Uint8Array(sizeofEMRSETCOLORSPACE);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.emr !== undefined) view.setBigUint64(0, data.emr === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.emr))), true);
  // 0x08: u32
  if (data?.ihCS !== undefined) view.setUint32(8, Number(data.ihCS), true);
  // 0x0c: pad4
  return buf;
}

export class EMRSETCOLORSPACEView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get emr(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(0, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x08: u32
  get ihCS(): number {
    return this.view.getUint32(8, true);
  }

  // 0x0c: pad4

  // 0x00: pointer
  set emr(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(0, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x08: u32
  set ihCS(value: number) {
    this.view.setUint32(8, value, true);
  }

  // 0x0c: pad4
}

/**
 * Windows.Win32.Graphics.Gdi.EMREXTESCAPE (size: 24)
 */
export interface EMREXTESCAPE {
  /** Windows.Win32.Graphics.Gdi.EMR */
  emr: Uint8Array | Deno.PointerValue;
  /** i32 */
  iEscape: number;
  /** i32 */
  cbEscData: number;
  /** array */
  EscData: Deno.PointerValue;
}

export const sizeofEMREXTESCAPE = 24;

export function allocEMREXTESCAPE(data?: Partial<EMREXTESCAPE>): Uint8Array {
  const buf = new Uint8Array(sizeofEMREXTESCAPE);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.emr !== undefined) view.setBigUint64(0, data.emr === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.emr))), true);
  // 0x08: i32
  if (data?.iEscape !== undefined) view.setInt32(8, Number(data.iEscape), true);
  // 0x0c: i32
  if (data?.cbEscData !== undefined) view.setInt32(12, Number(data.cbEscData), true);
  // 0x10: pointer
  if (data?.EscData !== undefined) view.setBigUint64(16, data.EscData === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.EscData))), true);
  return buf;
}

export class EMREXTESCAPEView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get emr(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(0, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x08: i32
  get iEscape(): number {
    return this.view.getInt32(8, true);
  }

  // 0x0c: i32
  get cbEscData(): number {
    return this.view.getInt32(12, true);
  }

  // 0x10: pointer
  get EscData(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(16, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: pointer
  set emr(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(0, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x08: i32
  set iEscape(value: number) {
    this.view.setInt32(8, value, true);
  }

  // 0x0c: i32
  set cbEscData(value: number) {
    this.view.setInt32(12, value, true);
  }

  // 0x10: pointer
  set EscData(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(16, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.Graphics.Gdi.EMRNAMEDESCAPE (size: 32)
 */
export interface EMRNAMEDESCAPE {
  /** Windows.Win32.Graphics.Gdi.EMR */
  emr: Uint8Array | Deno.PointerValue;
  /** i32 */
  iEscape: number;
  /** i32 */
  cbDriver: number;
  /** i32 */
  cbEscData: number;
  /** array */
  EscData: Deno.PointerValue;
}

export const sizeofEMRNAMEDESCAPE = 32;

export function allocEMRNAMEDESCAPE(data?: Partial<EMRNAMEDESCAPE>): Uint8Array {
  const buf = new Uint8Array(sizeofEMRNAMEDESCAPE);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.emr !== undefined) view.setBigUint64(0, data.emr === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.emr))), true);
  // 0x08: i32
  if (data?.iEscape !== undefined) view.setInt32(8, Number(data.iEscape), true);
  // 0x0c: i32
  if (data?.cbDriver !== undefined) view.setInt32(12, Number(data.cbDriver), true);
  // 0x10: i32
  if (data?.cbEscData !== undefined) view.setInt32(16, Number(data.cbEscData), true);
  // 0x14: pad4
  // 0x18: pointer
  if (data?.EscData !== undefined) view.setBigUint64(24, data.EscData === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.EscData))), true);
  return buf;
}

export class EMRNAMEDESCAPEView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get emr(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(0, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x08: i32
  get iEscape(): number {
    return this.view.getInt32(8, true);
  }

  // 0x0c: i32
  get cbDriver(): number {
    return this.view.getInt32(12, true);
  }

  // 0x10: i32
  get cbEscData(): number {
    return this.view.getInt32(16, true);
  }

  // 0x14: pad4

  // 0x18: pointer
  get EscData(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(24, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: pointer
  set emr(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(0, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x08: i32
  set iEscape(value: number) {
    this.view.setInt32(8, value, true);
  }

  // 0x0c: i32
  set cbDriver(value: number) {
    this.view.setInt32(12, value, true);
  }

  // 0x10: i32
  set cbEscData(value: number) {
    this.view.setInt32(16, value, true);
  }

  // 0x14: pad4

  // 0x18: pointer
  set EscData(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(24, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.Graphics.Gdi.EMRSETICMPROFILE (size: 32)
 */
export interface EMRSETICMPROFILE {
  /** Windows.Win32.Graphics.Gdi.EMR */
  emr: Uint8Array | Deno.PointerValue;
  /** u32 */
  dwFlags: number;
  /** u32 */
  cbName: number;
  /** u32 */
  cbData: number;
  /** array */
  Data: Deno.PointerValue;
}

export const sizeofEMRSETICMPROFILE = 32;

export function allocEMRSETICMPROFILE(data?: Partial<EMRSETICMPROFILE>): Uint8Array {
  const buf = new Uint8Array(sizeofEMRSETICMPROFILE);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.emr !== undefined) view.setBigUint64(0, data.emr === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.emr))), true);
  // 0x08: u32
  if (data?.dwFlags !== undefined) view.setUint32(8, Number(data.dwFlags), true);
  // 0x0c: u32
  if (data?.cbName !== undefined) view.setUint32(12, Number(data.cbName), true);
  // 0x10: u32
  if (data?.cbData !== undefined) view.setUint32(16, Number(data.cbData), true);
  // 0x14: pad4
  // 0x18: pointer
  if (data?.Data !== undefined) view.setBigUint64(24, data.Data === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.Data))), true);
  return buf;
}

export class EMRSETICMPROFILEView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get emr(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(0, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x08: u32
  get dwFlags(): number {
    return this.view.getUint32(8, true);
  }

  // 0x0c: u32
  get cbName(): number {
    return this.view.getUint32(12, true);
  }

  // 0x10: u32
  get cbData(): number {
    return this.view.getUint32(16, true);
  }

  // 0x14: pad4

  // 0x18: pointer
  get Data(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(24, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: pointer
  set emr(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(0, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x08: u32
  set dwFlags(value: number) {
    this.view.setUint32(8, value, true);
  }

  // 0x0c: u32
  set cbName(value: number) {
    this.view.setUint32(12, value, true);
  }

  // 0x10: u32
  set cbData(value: number) {
    this.view.setUint32(16, value, true);
  }

  // 0x14: pad4

  // 0x18: pointer
  set Data(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(24, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.Graphics.Gdi.EMRCOLORMATCHTOTARGET (size: 32)
 */
export interface EMRCOLORMATCHTOTARGET {
  /** Windows.Win32.Graphics.Gdi.EMR */
  emr: Uint8Array | Deno.PointerValue;
  /** u32 */
  dwAction: number;
  /** u32 */
  dwFlags: number;
  /** u32 */
  cbName: number;
  /** u32 */
  cbData: number;
  /** array */
  Data: Deno.PointerValue;
}

export const sizeofEMRCOLORMATCHTOTARGET = 32;

export function allocEMRCOLORMATCHTOTARGET(data?: Partial<EMRCOLORMATCHTOTARGET>): Uint8Array {
  const buf = new Uint8Array(sizeofEMRCOLORMATCHTOTARGET);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.emr !== undefined) view.setBigUint64(0, data.emr === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.emr))), true);
  // 0x08: u32
  if (data?.dwAction !== undefined) view.setUint32(8, Number(data.dwAction), true);
  // 0x0c: u32
  if (data?.dwFlags !== undefined) view.setUint32(12, Number(data.dwFlags), true);
  // 0x10: u32
  if (data?.cbName !== undefined) view.setUint32(16, Number(data.cbName), true);
  // 0x14: u32
  if (data?.cbData !== undefined) view.setUint32(20, Number(data.cbData), true);
  // 0x18: pointer
  if (data?.Data !== undefined) view.setBigUint64(24, data.Data === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.Data))), true);
  return buf;
}

export class EMRCOLORMATCHTOTARGETView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get emr(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(0, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x08: u32
  get dwAction(): number {
    return this.view.getUint32(8, true);
  }

  // 0x0c: u32
  get dwFlags(): number {
    return this.view.getUint32(12, true);
  }

  // 0x10: u32
  get cbName(): number {
    return this.view.getUint32(16, true);
  }

  // 0x14: u32
  get cbData(): number {
    return this.view.getUint32(20, true);
  }

  // 0x18: pointer
  get Data(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(24, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: pointer
  set emr(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(0, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x08: u32
  set dwAction(value: number) {
    this.view.setUint32(8, value, true);
  }

  // 0x0c: u32
  set dwFlags(value: number) {
    this.view.setUint32(12, value, true);
  }

  // 0x10: u32
  set cbName(value: number) {
    this.view.setUint32(16, value, true);
  }

  // 0x14: u32
  set cbData(value: number) {
    this.view.setUint32(20, value, true);
  }

  // 0x18: pointer
  set Data(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(24, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.Graphics.Gdi.EMRCOLORCORRECTPALETTE (size: 24)
 */
export interface EMRCOLORCORRECTPALETTE {
  /** Windows.Win32.Graphics.Gdi.EMR */
  emr: Uint8Array | Deno.PointerValue;
  /** u32 */
  ihPalette: number;
  /** u32 */
  nFirstEntry: number;
  /** u32 */
  nPalEntries: number;
  /** u32 */
  nReserved: number;
}

export const sizeofEMRCOLORCORRECTPALETTE = 24;

export function allocEMRCOLORCORRECTPALETTE(data?: Partial<EMRCOLORCORRECTPALETTE>): Uint8Array {
  const buf = new Uint8Array(sizeofEMRCOLORCORRECTPALETTE);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.emr !== undefined) view.setBigUint64(0, data.emr === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.emr))), true);
  // 0x08: u32
  if (data?.ihPalette !== undefined) view.setUint32(8, Number(data.ihPalette), true);
  // 0x0c: u32
  if (data?.nFirstEntry !== undefined) view.setUint32(12, Number(data.nFirstEntry), true);
  // 0x10: u32
  if (data?.nPalEntries !== undefined) view.setUint32(16, Number(data.nPalEntries), true);
  // 0x14: u32
  if (data?.nReserved !== undefined) view.setUint32(20, Number(data.nReserved), true);
  return buf;
}

export class EMRCOLORCORRECTPALETTEView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get emr(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(0, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x08: u32
  get ihPalette(): number {
    return this.view.getUint32(8, true);
  }

  // 0x0c: u32
  get nFirstEntry(): number {
    return this.view.getUint32(12, true);
  }

  // 0x10: u32
  get nPalEntries(): number {
    return this.view.getUint32(16, true);
  }

  // 0x14: u32
  get nReserved(): number {
    return this.view.getUint32(20, true);
  }

  // 0x00: pointer
  set emr(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(0, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x08: u32
  set ihPalette(value: number) {
    this.view.setUint32(8, value, true);
  }

  // 0x0c: u32
  set nFirstEntry(value: number) {
    this.view.setUint32(12, value, true);
  }

  // 0x10: u32
  set nPalEntries(value: number) {
    this.view.setUint32(16, value, true);
  }

  // 0x14: u32
  set nReserved(value: number) {
    this.view.setUint32(20, value, true);
  }
}

/**
 * Windows.Win32.Graphics.Gdi.EMRALPHABLEND (size: 96)
 */
export interface EMRALPHABLEND {
  /** Windows.Win32.Graphics.Gdi.EMR */
  emr: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.Foundation.RECTL */
  rclBounds: Uint8Array | Deno.PointerValue;
  /** i32 */
  xDest: number;
  /** i32 */
  yDest: number;
  /** i32 */
  cxDest: number;
  /** i32 */
  cyDest: number;
  /** u32 */
  dwRop: number;
  /** i32 */
  xSrc: number;
  /** i32 */
  ySrc: number;
  /** Windows.Win32.Graphics.Gdi.XFORM */
  xformSrc: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.Foundation.COLORREF */
  crBkColorSrc: Uint8Array | Deno.PointerValue;
  /** u32 */
  iUsageSrc: number;
  /** u32 */
  offBmiSrc: number;
  /** u32 */
  cbBmiSrc: number;
  /** u32 */
  offBitsSrc: number;
  /** u32 */
  cbBitsSrc: number;
  /** i32 */
  cxSrc: number;
  /** i32 */
  cySrc: number;
}

export const sizeofEMRALPHABLEND = 96;

export function allocEMRALPHABLEND(data?: Partial<EMRALPHABLEND>): Uint8Array {
  const buf = new Uint8Array(sizeofEMRALPHABLEND);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.emr !== undefined) view.setBigUint64(0, data.emr === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.emr))), true);
  // 0x08: pointer
  if (data?.rclBounds !== undefined) view.setBigUint64(8, data.rclBounds === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.rclBounds))), true);
  // 0x10: i32
  if (data?.xDest !== undefined) view.setInt32(16, Number(data.xDest), true);
  // 0x14: i32
  if (data?.yDest !== undefined) view.setInt32(20, Number(data.yDest), true);
  // 0x18: i32
  if (data?.cxDest !== undefined) view.setInt32(24, Number(data.cxDest), true);
  // 0x1c: i32
  if (data?.cyDest !== undefined) view.setInt32(28, Number(data.cyDest), true);
  // 0x20: u32
  if (data?.dwRop !== undefined) view.setUint32(32, Number(data.dwRop), true);
  // 0x24: i32
  if (data?.xSrc !== undefined) view.setInt32(36, Number(data.xSrc), true);
  // 0x28: i32
  if (data?.ySrc !== undefined) view.setInt32(40, Number(data.ySrc), true);
  // 0x2c: pad4
  // 0x30: pointer
  if (data?.xformSrc !== undefined) view.setBigUint64(48, data.xformSrc === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.xformSrc))), true);
  // 0x38: pointer
  if (data?.crBkColorSrc !== undefined) view.setBigUint64(56, data.crBkColorSrc === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.crBkColorSrc))), true);
  // 0x40: u32
  if (data?.iUsageSrc !== undefined) view.setUint32(64, Number(data.iUsageSrc), true);
  // 0x44: u32
  if (data?.offBmiSrc !== undefined) view.setUint32(68, Number(data.offBmiSrc), true);
  // 0x48: u32
  if (data?.cbBmiSrc !== undefined) view.setUint32(72, Number(data.cbBmiSrc), true);
  // 0x4c: u32
  if (data?.offBitsSrc !== undefined) view.setUint32(76, Number(data.offBitsSrc), true);
  // 0x50: u32
  if (data?.cbBitsSrc !== undefined) view.setUint32(80, Number(data.cbBitsSrc), true);
  // 0x54: i32
  if (data?.cxSrc !== undefined) view.setInt32(84, Number(data.cxSrc), true);
  // 0x58: i32
  if (data?.cySrc !== undefined) view.setInt32(88, Number(data.cySrc), true);
  // 0x5c: pad4
  return buf;
}

export class EMRALPHABLENDView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get emr(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(0, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x08: pointer
  get rclBounds(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x10: i32
  get xDest(): number {
    return this.view.getInt32(16, true);
  }

  // 0x14: i32
  get yDest(): number {
    return this.view.getInt32(20, true);
  }

  // 0x18: i32
  get cxDest(): number {
    return this.view.getInt32(24, true);
  }

  // 0x1c: i32
  get cyDest(): number {
    return this.view.getInt32(28, true);
  }

  // 0x20: u32
  get dwRop(): number {
    return this.view.getUint32(32, true);
  }

  // 0x24: i32
  get xSrc(): number {
    return this.view.getInt32(36, true);
  }

  // 0x28: i32
  get ySrc(): number {
    return this.view.getInt32(40, true);
  }

  // 0x2c: pad4

  // 0x30: pointer
  get xformSrc(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(48, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x38: pointer
  get crBkColorSrc(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(56, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x40: u32
  get iUsageSrc(): number {
    return this.view.getUint32(64, true);
  }

  // 0x44: u32
  get offBmiSrc(): number {
    return this.view.getUint32(68, true);
  }

  // 0x48: u32
  get cbBmiSrc(): number {
    return this.view.getUint32(72, true);
  }

  // 0x4c: u32
  get offBitsSrc(): number {
    return this.view.getUint32(76, true);
  }

  // 0x50: u32
  get cbBitsSrc(): number {
    return this.view.getUint32(80, true);
  }

  // 0x54: i32
  get cxSrc(): number {
    return this.view.getInt32(84, true);
  }

  // 0x58: i32
  get cySrc(): number {
    return this.view.getInt32(88, true);
  }

  // 0x5c: pad4

  // 0x00: pointer
  set emr(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(0, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x08: pointer
  set rclBounds(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x10: i32
  set xDest(value: number) {
    this.view.setInt32(16, value, true);
  }

  // 0x14: i32
  set yDest(value: number) {
    this.view.setInt32(20, value, true);
  }

  // 0x18: i32
  set cxDest(value: number) {
    this.view.setInt32(24, value, true);
  }

  // 0x1c: i32
  set cyDest(value: number) {
    this.view.setInt32(28, value, true);
  }

  // 0x20: u32
  set dwRop(value: number) {
    this.view.setUint32(32, value, true);
  }

  // 0x24: i32
  set xSrc(value: number) {
    this.view.setInt32(36, value, true);
  }

  // 0x28: i32
  set ySrc(value: number) {
    this.view.setInt32(40, value, true);
  }

  // 0x2c: pad4

  // 0x30: pointer
  set xformSrc(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(48, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x38: pointer
  set crBkColorSrc(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(56, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x40: u32
  set iUsageSrc(value: number) {
    this.view.setUint32(64, value, true);
  }

  // 0x44: u32
  set offBmiSrc(value: number) {
    this.view.setUint32(68, value, true);
  }

  // 0x48: u32
  set cbBmiSrc(value: number) {
    this.view.setUint32(72, value, true);
  }

  // 0x4c: u32
  set offBitsSrc(value: number) {
    this.view.setUint32(76, value, true);
  }

  // 0x50: u32
  set cbBitsSrc(value: number) {
    this.view.setUint32(80, value, true);
  }

  // 0x54: i32
  set cxSrc(value: number) {
    this.view.setInt32(84, value, true);
  }

  // 0x58: i32
  set cySrc(value: number) {
    this.view.setInt32(88, value, true);
  }

  // 0x5c: pad4
}

/**
 * Windows.Win32.Graphics.Gdi.EMRGRADIENTFILL (size: 40)
 */
export interface EMRGRADIENTFILL {
  /** Windows.Win32.Graphics.Gdi.EMR */
  emr: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.Foundation.RECTL */
  rclBounds: Uint8Array | Deno.PointerValue;
  /** u32 */
  nVer: number;
  /** u32 */
  nTri: number;
  /** Windows.Win32.Graphics.Gdi.GRADIENT_FILL */
  ulMode: GRADIENT_FILL;
  /** array */
  Ver: Deno.PointerValue;
}

export const sizeofEMRGRADIENTFILL = 40;

export function allocEMRGRADIENTFILL(data?: Partial<EMRGRADIENTFILL>): Uint8Array {
  const buf = new Uint8Array(sizeofEMRGRADIENTFILL);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.emr !== undefined) view.setBigUint64(0, data.emr === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.emr))), true);
  // 0x08: pointer
  if (data?.rclBounds !== undefined) view.setBigUint64(8, data.rclBounds === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.rclBounds))), true);
  // 0x10: u32
  if (data?.nVer !== undefined) view.setUint32(16, Number(data.nVer), true);
  // 0x14: u32
  if (data?.nTri !== undefined) view.setUint32(20, Number(data.nTri), true);
  // 0x18: u32
  if (data?.ulMode !== undefined) view.setUint32(24, Number(data.ulMode), true);
  // 0x1c: pad4
  // 0x20: pointer
  if (data?.Ver !== undefined) view.setBigUint64(32, data.Ver === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.Ver))), true);
  return buf;
}

export class EMRGRADIENTFILLView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get emr(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(0, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x08: pointer
  get rclBounds(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x10: u32
  get nVer(): number {
    return this.view.getUint32(16, true);
  }

  // 0x14: u32
  get nTri(): number {
    return this.view.getUint32(20, true);
  }

  // 0x18: u32
  get ulMode(): number {
    return this.view.getUint32(24, true);
  }

  // 0x1c: pad4

  // 0x20: pointer
  get Ver(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(32, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: pointer
  set emr(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(0, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x08: pointer
  set rclBounds(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x10: u32
  set nVer(value: number) {
    this.view.setUint32(16, value, true);
  }

  // 0x14: u32
  set nTri(value: number) {
    this.view.setUint32(20, value, true);
  }

  // 0x18: u32
  set ulMode(value: number) {
    this.view.setUint32(24, value, true);
  }

  // 0x1c: pad4

  // 0x20: pointer
  set Ver(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(32, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.Graphics.Gdi.EMRTRANSPARENTBLT (size: 96)
 */
export interface EMRTRANSPARENTBLT {
  /** Windows.Win32.Graphics.Gdi.EMR */
  emr: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.Foundation.RECTL */
  rclBounds: Uint8Array | Deno.PointerValue;
  /** i32 */
  xDest: number;
  /** i32 */
  yDest: number;
  /** i32 */
  cxDest: number;
  /** i32 */
  cyDest: number;
  /** u32 */
  dwRop: number;
  /** i32 */
  xSrc: number;
  /** i32 */
  ySrc: number;
  /** Windows.Win32.Graphics.Gdi.XFORM */
  xformSrc: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.Foundation.COLORREF */
  crBkColorSrc: Uint8Array | Deno.PointerValue;
  /** u32 */
  iUsageSrc: number;
  /** u32 */
  offBmiSrc: number;
  /** u32 */
  cbBmiSrc: number;
  /** u32 */
  offBitsSrc: number;
  /** u32 */
  cbBitsSrc: number;
  /** i32 */
  cxSrc: number;
  /** i32 */
  cySrc: number;
}

export const sizeofEMRTRANSPARENTBLT = 96;

export function allocEMRTRANSPARENTBLT(data?: Partial<EMRTRANSPARENTBLT>): Uint8Array {
  const buf = new Uint8Array(sizeofEMRTRANSPARENTBLT);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.emr !== undefined) view.setBigUint64(0, data.emr === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.emr))), true);
  // 0x08: pointer
  if (data?.rclBounds !== undefined) view.setBigUint64(8, data.rclBounds === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.rclBounds))), true);
  // 0x10: i32
  if (data?.xDest !== undefined) view.setInt32(16, Number(data.xDest), true);
  // 0x14: i32
  if (data?.yDest !== undefined) view.setInt32(20, Number(data.yDest), true);
  // 0x18: i32
  if (data?.cxDest !== undefined) view.setInt32(24, Number(data.cxDest), true);
  // 0x1c: i32
  if (data?.cyDest !== undefined) view.setInt32(28, Number(data.cyDest), true);
  // 0x20: u32
  if (data?.dwRop !== undefined) view.setUint32(32, Number(data.dwRop), true);
  // 0x24: i32
  if (data?.xSrc !== undefined) view.setInt32(36, Number(data.xSrc), true);
  // 0x28: i32
  if (data?.ySrc !== undefined) view.setInt32(40, Number(data.ySrc), true);
  // 0x2c: pad4
  // 0x30: pointer
  if (data?.xformSrc !== undefined) view.setBigUint64(48, data.xformSrc === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.xformSrc))), true);
  // 0x38: pointer
  if (data?.crBkColorSrc !== undefined) view.setBigUint64(56, data.crBkColorSrc === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.crBkColorSrc))), true);
  // 0x40: u32
  if (data?.iUsageSrc !== undefined) view.setUint32(64, Number(data.iUsageSrc), true);
  // 0x44: u32
  if (data?.offBmiSrc !== undefined) view.setUint32(68, Number(data.offBmiSrc), true);
  // 0x48: u32
  if (data?.cbBmiSrc !== undefined) view.setUint32(72, Number(data.cbBmiSrc), true);
  // 0x4c: u32
  if (data?.offBitsSrc !== undefined) view.setUint32(76, Number(data.offBitsSrc), true);
  // 0x50: u32
  if (data?.cbBitsSrc !== undefined) view.setUint32(80, Number(data.cbBitsSrc), true);
  // 0x54: i32
  if (data?.cxSrc !== undefined) view.setInt32(84, Number(data.cxSrc), true);
  // 0x58: i32
  if (data?.cySrc !== undefined) view.setInt32(88, Number(data.cySrc), true);
  // 0x5c: pad4
  return buf;
}

export class EMRTRANSPARENTBLTView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get emr(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(0, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x08: pointer
  get rclBounds(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x10: i32
  get xDest(): number {
    return this.view.getInt32(16, true);
  }

  // 0x14: i32
  get yDest(): number {
    return this.view.getInt32(20, true);
  }

  // 0x18: i32
  get cxDest(): number {
    return this.view.getInt32(24, true);
  }

  // 0x1c: i32
  get cyDest(): number {
    return this.view.getInt32(28, true);
  }

  // 0x20: u32
  get dwRop(): number {
    return this.view.getUint32(32, true);
  }

  // 0x24: i32
  get xSrc(): number {
    return this.view.getInt32(36, true);
  }

  // 0x28: i32
  get ySrc(): number {
    return this.view.getInt32(40, true);
  }

  // 0x2c: pad4

  // 0x30: pointer
  get xformSrc(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(48, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x38: pointer
  get crBkColorSrc(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(56, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x40: u32
  get iUsageSrc(): number {
    return this.view.getUint32(64, true);
  }

  // 0x44: u32
  get offBmiSrc(): number {
    return this.view.getUint32(68, true);
  }

  // 0x48: u32
  get cbBmiSrc(): number {
    return this.view.getUint32(72, true);
  }

  // 0x4c: u32
  get offBitsSrc(): number {
    return this.view.getUint32(76, true);
  }

  // 0x50: u32
  get cbBitsSrc(): number {
    return this.view.getUint32(80, true);
  }

  // 0x54: i32
  get cxSrc(): number {
    return this.view.getInt32(84, true);
  }

  // 0x58: i32
  get cySrc(): number {
    return this.view.getInt32(88, true);
  }

  // 0x5c: pad4

  // 0x00: pointer
  set emr(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(0, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x08: pointer
  set rclBounds(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x10: i32
  set xDest(value: number) {
    this.view.setInt32(16, value, true);
  }

  // 0x14: i32
  set yDest(value: number) {
    this.view.setInt32(20, value, true);
  }

  // 0x18: i32
  set cxDest(value: number) {
    this.view.setInt32(24, value, true);
  }

  // 0x1c: i32
  set cyDest(value: number) {
    this.view.setInt32(28, value, true);
  }

  // 0x20: u32
  set dwRop(value: number) {
    this.view.setUint32(32, value, true);
  }

  // 0x24: i32
  set xSrc(value: number) {
    this.view.setInt32(36, value, true);
  }

  // 0x28: i32
  set ySrc(value: number) {
    this.view.setInt32(40, value, true);
  }

  // 0x2c: pad4

  // 0x30: pointer
  set xformSrc(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(48, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x38: pointer
  set crBkColorSrc(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(56, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x40: u32
  set iUsageSrc(value: number) {
    this.view.setUint32(64, value, true);
  }

  // 0x44: u32
  set offBmiSrc(value: number) {
    this.view.setUint32(68, value, true);
  }

  // 0x48: u32
  set cbBmiSrc(value: number) {
    this.view.setUint32(72, value, true);
  }

  // 0x4c: u32
  set offBitsSrc(value: number) {
    this.view.setUint32(76, value, true);
  }

  // 0x50: u32
  set cbBitsSrc(value: number) {
    this.view.setUint32(80, value, true);
  }

  // 0x54: i32
  set cxSrc(value: number) {
    this.view.setInt32(84, value, true);
  }

  // 0x58: i32
  set cySrc(value: number) {
    this.view.setInt32(88, value, true);
  }

  // 0x5c: pad4
}

/**
 * Windows.Win32.Graphics.Gdi.WGLSWAP (size: 16)
 */
export interface WGLSWAP {
  /** Windows.Win32.Graphics.Gdi.HDC */
  hdc: Uint8Array | Deno.PointerValue;
  /** u32 */
  uiFlags: number;
}

export const sizeofWGLSWAP = 16;

export function allocWGLSWAP(data?: Partial<WGLSWAP>): Uint8Array {
  const buf = new Uint8Array(sizeofWGLSWAP);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.hdc !== undefined) view.setBigUint64(0, data.hdc === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.hdc))), true);
  // 0x08: u32
  if (data?.uiFlags !== undefined) view.setUint32(8, Number(data.uiFlags), true);
  // 0x0c: pad4
  return buf;
}

export class WGLSWAPView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get hdc(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(0, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x08: u32
  get uiFlags(): number {
    return this.view.getUint32(8, true);
  }

  // 0x0c: pad4

  // 0x00: pointer
  set hdc(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(0, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x08: u32
  set uiFlags(value: number) {
    this.view.setUint32(8, value, true);
  }

  // 0x0c: pad4
}

/**
 * Windows.Win32.Graphics.Gdi.TTLOADINFO (size: 16)
 */
export interface TTLOADINFO {
  /** u16 */
  usStructSize: number;
  /** u16 */
  usRefStrSize: number;
  /** ptr */
  pusRefStr: Deno.PointerValue | Uint8Array;
}

export const sizeofTTLOADINFO = 16;

export function allocTTLOADINFO(data?: Partial<TTLOADINFO>): Uint8Array {
  const buf = new Uint8Array(sizeofTTLOADINFO);
  const view = new DataView(buf.buffer);
  // 0x00: u16
  if (data?.usStructSize !== undefined) view.setUint16(0, Number(data.usStructSize), true);
  // 0x02: u16
  if (data?.usRefStrSize !== undefined) view.setUint16(2, Number(data.usRefStrSize), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.pusRefStr !== undefined) view.setBigUint64(8, data.pusRefStr === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.pusRefStr))), true);
  return buf;
}

export class TTLOADINFOView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u16
  get usStructSize(): number {
    return this.view.getUint16(0, true);
  }

  // 0x02: u16
  get usRefStrSize(): number {
    return this.view.getUint16(2, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  get pusRefStr(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: u16
  set usStructSize(value: number) {
    this.view.setUint16(0, value, true);
  }

  // 0x02: u16
  set usRefStrSize(value: number) {
    this.view.setUint16(2, value, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  set pusRefStr(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.Graphics.Gdi.TTEMBEDINFO (size: 16)
 */
export interface TTEMBEDINFO {
  /** u16 */
  usStructSize: number;
  /** u16 */
  usRootStrSize: number;
  /** ptr */
  pusRootStr: Deno.PointerValue | Uint8Array;
}

export const sizeofTTEMBEDINFO = 16;

export function allocTTEMBEDINFO(data?: Partial<TTEMBEDINFO>): Uint8Array {
  const buf = new Uint8Array(sizeofTTEMBEDINFO);
  const view = new DataView(buf.buffer);
  // 0x00: u16
  if (data?.usStructSize !== undefined) view.setUint16(0, Number(data.usStructSize), true);
  // 0x02: u16
  if (data?.usRootStrSize !== undefined) view.setUint16(2, Number(data.usRootStrSize), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.pusRootStr !== undefined) view.setBigUint64(8, data.pusRootStr === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.pusRootStr))), true);
  return buf;
}

export class TTEMBEDINFOView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u16
  get usStructSize(): number {
    return this.view.getUint16(0, true);
  }

  // 0x02: u16
  get usRootStrSize(): number {
    return this.view.getUint16(2, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  get pusRootStr(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: u16
  set usStructSize(value: number) {
    this.view.setUint16(0, value, true);
  }

  // 0x02: u16
  set usRootStrSize(value: number) {
    this.view.setUint16(2, value, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  set pusRootStr(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.Graphics.Gdi.TTVALIDATIONTESTSPARAMS (size: 32)
 */
export interface TTVALIDATIONTESTSPARAMS {
  /** u32 */
  ulStructSize: number;
  /** i32 */
  lTestFromSize: number;
  /** i32 */
  lTestToSize: number;
  /** u32 */
  ulCharSet: number;
  /** u16 */
  usReserved1: number;
  /** u16 */
  usCharCodeCount: number;
  /** ptr */
  pusCharCodeSet: Deno.PointerValue | Uint8Array;
}

export const sizeofTTVALIDATIONTESTSPARAMS = 32;

export function allocTTVALIDATIONTESTSPARAMS(data?: Partial<TTVALIDATIONTESTSPARAMS>): Uint8Array {
  const buf = new Uint8Array(sizeofTTVALIDATIONTESTSPARAMS);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.ulStructSize !== undefined) view.setUint32(0, Number(data.ulStructSize), true);
  // 0x04: i32
  if (data?.lTestFromSize !== undefined) view.setInt32(4, Number(data.lTestFromSize), true);
  // 0x08: i32
  if (data?.lTestToSize !== undefined) view.setInt32(8, Number(data.lTestToSize), true);
  // 0x0c: u32
  if (data?.ulCharSet !== undefined) view.setUint32(12, Number(data.ulCharSet), true);
  // 0x10: u16
  if (data?.usReserved1 !== undefined) view.setUint16(16, Number(data.usReserved1), true);
  // 0x12: u16
  if (data?.usCharCodeCount !== undefined) view.setUint16(18, Number(data.usCharCodeCount), true);
  // 0x14: pad4
  // 0x18: pointer
  if (data?.pusCharCodeSet !== undefined) view.setBigUint64(24, data.pusCharCodeSet === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.pusCharCodeSet))), true);
  return buf;
}

export class TTVALIDATIONTESTSPARAMSView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get ulStructSize(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: i32
  get lTestFromSize(): number {
    return this.view.getInt32(4, true);
  }

  // 0x08: i32
  get lTestToSize(): number {
    return this.view.getInt32(8, true);
  }

  // 0x0c: u32
  get ulCharSet(): number {
    return this.view.getUint32(12, true);
  }

  // 0x10: u16
  get usReserved1(): number {
    return this.view.getUint16(16, true);
  }

  // 0x12: u16
  get usCharCodeCount(): number {
    return this.view.getUint16(18, true);
  }

  // 0x14: pad4

  // 0x18: pointer
  get pusCharCodeSet(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(24, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: u32
  set ulStructSize(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: i32
  set lTestFromSize(value: number) {
    this.view.setInt32(4, value, true);
  }

  // 0x08: i32
  set lTestToSize(value: number) {
    this.view.setInt32(8, value, true);
  }

  // 0x0c: u32
  set ulCharSet(value: number) {
    this.view.setUint32(12, value, true);
  }

  // 0x10: u16
  set usReserved1(value: number) {
    this.view.setUint16(16, value, true);
  }

  // 0x12: u16
  set usCharCodeCount(value: number) {
    this.view.setUint16(18, value, true);
  }

  // 0x14: pad4

  // 0x18: pointer
  set pusCharCodeSet(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(24, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.Graphics.Gdi.TTVALIDATIONTESTSPARAMSEX (size: 32)
 */
export interface TTVALIDATIONTESTSPARAMSEX {
  /** u32 */
  ulStructSize: number;
  /** i32 */
  lTestFromSize: number;
  /** i32 */
  lTestToSize: number;
  /** u32 */
  ulCharSet: number;
  /** u16 */
  usReserved1: number;
  /** u16 */
  usCharCodeCount: number;
  /** ptr */
  pulCharCodeSet: Deno.PointerValue | Uint8Array;
}

export const sizeofTTVALIDATIONTESTSPARAMSEX = 32;

export function allocTTVALIDATIONTESTSPARAMSEX(data?: Partial<TTVALIDATIONTESTSPARAMSEX>): Uint8Array {
  const buf = new Uint8Array(sizeofTTVALIDATIONTESTSPARAMSEX);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.ulStructSize !== undefined) view.setUint32(0, Number(data.ulStructSize), true);
  // 0x04: i32
  if (data?.lTestFromSize !== undefined) view.setInt32(4, Number(data.lTestFromSize), true);
  // 0x08: i32
  if (data?.lTestToSize !== undefined) view.setInt32(8, Number(data.lTestToSize), true);
  // 0x0c: u32
  if (data?.ulCharSet !== undefined) view.setUint32(12, Number(data.ulCharSet), true);
  // 0x10: u16
  if (data?.usReserved1 !== undefined) view.setUint16(16, Number(data.usReserved1), true);
  // 0x12: u16
  if (data?.usCharCodeCount !== undefined) view.setUint16(18, Number(data.usCharCodeCount), true);
  // 0x14: pad4
  // 0x18: pointer
  if (data?.pulCharCodeSet !== undefined) view.setBigUint64(24, data.pulCharCodeSet === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.pulCharCodeSet))), true);
  return buf;
}

export class TTVALIDATIONTESTSPARAMSEXView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get ulStructSize(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: i32
  get lTestFromSize(): number {
    return this.view.getInt32(4, true);
  }

  // 0x08: i32
  get lTestToSize(): number {
    return this.view.getInt32(8, true);
  }

  // 0x0c: u32
  get ulCharSet(): number {
    return this.view.getUint32(12, true);
  }

  // 0x10: u16
  get usReserved1(): number {
    return this.view.getUint16(16, true);
  }

  // 0x12: u16
  get usCharCodeCount(): number {
    return this.view.getUint16(18, true);
  }

  // 0x14: pad4

  // 0x18: pointer
  get pulCharCodeSet(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(24, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: u32
  set ulStructSize(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: i32
  set lTestFromSize(value: number) {
    this.view.setInt32(4, value, true);
  }

  // 0x08: i32
  set lTestToSize(value: number) {
    this.view.setInt32(8, value, true);
  }

  // 0x0c: u32
  set ulCharSet(value: number) {
    this.view.setUint32(12, value, true);
  }

  // 0x10: u16
  set usReserved1(value: number) {
    this.view.setUint16(16, value, true);
  }

  // 0x12: u16
  set usCharCodeCount(value: number) {
    this.view.setUint16(18, value, true);
  }

  // 0x14: pad4

  // 0x18: pointer
  set pulCharCodeSet(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(24, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

export type BOOL = number;

/**
 * Windows.Win32.Graphics.Gdi.PAINTSTRUCT (size: 40)
 */
export interface PAINTSTRUCT {
  /** Windows.Win32.Graphics.Gdi.HDC */
  hdc: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.Foundation.BOOL */
  fErase: boolean;
  /** Windows.Win32.Foundation.RECT */
  rcPaint: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.Foundation.BOOL */
  fRestore: boolean;
  /** Windows.Win32.Foundation.BOOL */
  fIncUpdate: boolean;
  /** array */
  rgbReserved: Deno.PointerValue;
}

export const sizeofPAINTSTRUCT = 40;

export function allocPAINTSTRUCT(data?: Partial<PAINTSTRUCT>): Uint8Array {
  const buf = new Uint8Array(sizeofPAINTSTRUCT);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.hdc !== undefined) view.setBigUint64(0, data.hdc === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.hdc))), true);
  // 0x08: i32
  if (data?.fErase !== undefined) view.setInt32(8, Number(data.fErase), true);
  // 0x0c: pad4
  // 0x10: pointer
  if (data?.rcPaint !== undefined) view.setBigUint64(16, data.rcPaint === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.rcPaint))), true);
  // 0x18: i32
  if (data?.fRestore !== undefined) view.setInt32(24, Number(data.fRestore), true);
  // 0x1c: i32
  if (data?.fIncUpdate !== undefined) view.setInt32(28, Number(data.fIncUpdate), true);
  // 0x20: pointer
  if (data?.rgbReserved !== undefined) view.setBigUint64(32, data.rgbReserved === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.rgbReserved))), true);
  return buf;
}

export class PAINTSTRUCTView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get hdc(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(0, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x08: i32
  get fErase(): number {
    return this.view.getInt32(8, true);
  }

  // 0x0c: pad4

  // 0x10: pointer
  get rcPaint(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(16, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x18: i32
  get fRestore(): number {
    return this.view.getInt32(24, true);
  }

  // 0x1c: i32
  get fIncUpdate(): number {
    return this.view.getInt32(28, true);
  }

  // 0x20: pointer
  get rgbReserved(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(32, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: pointer
  set hdc(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(0, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x08: i32
  set fErase(value: number) {
    this.view.setInt32(8, value, true);
  }

  // 0x0c: pad4

  // 0x10: pointer
  set rcPaint(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(16, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x18: i32
  set fRestore(value: number) {
    this.view.setInt32(24, value, true);
  }

  // 0x1c: i32
  set fIncUpdate(value: number) {
    this.view.setInt32(28, value, true);
  }

  // 0x20: pointer
  set rgbReserved(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(32, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.Graphics.Gdi.DRAWTEXTPARAMS (size: 24)
 */
export interface DRAWTEXTPARAMS {
  /** u32 */
  cbSize: number;
  /** i32 */
  iTabLength: number;
  /** i32 */
  iLeftMargin: number;
  /** i32 */
  iRightMargin: number;
  /** u32 */
  uiLengthDrawn: number;
}

export const sizeofDRAWTEXTPARAMS = 24;

export function allocDRAWTEXTPARAMS(data?: Partial<DRAWTEXTPARAMS>): Uint8Array {
  const buf = new Uint8Array(sizeofDRAWTEXTPARAMS);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.cbSize !== undefined) view.setUint32(0, Number(data.cbSize), true);
  // 0x04: i32
  if (data?.iTabLength !== undefined) view.setInt32(4, Number(data.iTabLength), true);
  // 0x08: i32
  if (data?.iLeftMargin !== undefined) view.setInt32(8, Number(data.iLeftMargin), true);
  // 0x0c: i32
  if (data?.iRightMargin !== undefined) view.setInt32(12, Number(data.iRightMargin), true);
  // 0x10: u32
  if (data?.uiLengthDrawn !== undefined) view.setUint32(16, Number(data.uiLengthDrawn), true);
  // 0x14: pad4
  return buf;
}

export class DRAWTEXTPARAMSView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get cbSize(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: i32
  get iTabLength(): number {
    return this.view.getInt32(4, true);
  }

  // 0x08: i32
  get iLeftMargin(): number {
    return this.view.getInt32(8, true);
  }

  // 0x0c: i32
  get iRightMargin(): number {
    return this.view.getInt32(12, true);
  }

  // 0x10: u32
  get uiLengthDrawn(): number {
    return this.view.getUint32(16, true);
  }

  // 0x14: pad4

  // 0x00: u32
  set cbSize(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: i32
  set iTabLength(value: number) {
    this.view.setInt32(4, value, true);
  }

  // 0x08: i32
  set iLeftMargin(value: number) {
    this.view.setInt32(8, value, true);
  }

  // 0x0c: i32
  set iRightMargin(value: number) {
    this.view.setInt32(12, value, true);
  }

  // 0x10: u32
  set uiLengthDrawn(value: number) {
    this.view.setUint32(16, value, true);
  }

  // 0x14: pad4
}

export type LPARAM = Deno.PointerValue;

export type HWND = Deno.PointerValue;

export type WPARAM = Deno.PointerValue;

export type HINSTANCE = Deno.PointerValue;

// Native Libraries

try {
  var libGDI32_dll = Deno.dlopen("GDI32.dll", {
    GetObjectA: {
      parameters: ["pointer", "i32", "pointer"],
      result: "i32",
    },
    AddFontResourceA: {
      parameters: ["buffer"],
      result: "i32",
    },
    AddFontResourceW: {
      parameters: ["buffer"],
      result: "i32",
    },
    AnimatePalette: {
      parameters: ["pointer", "u32", "u32", "pointer"],
      result: "i32",
    },
    Arc: {
      parameters: ["pointer", "i32", "i32", "i32", "i32", "i32", "i32", "i32", "i32"],
      result: "i32",
    },
    BitBlt: {
      parameters: ["pointer", "i32", "i32", "i32", "i32", "pointer", "i32", "i32", "u32"],
      result: "i32",
    },
    CancelDC: {
      parameters: ["pointer"],
      result: "i32",
    },
    Chord: {
      parameters: ["pointer", "i32", "i32", "i32", "i32", "i32", "i32", "i32", "i32"],
      result: "i32",
    },
    CloseMetaFile: {
      parameters: ["pointer"],
      result: "pointer",
    },
    CombineRgn: {
      parameters: ["pointer", "pointer", "pointer", "i32"],
      result: "i32",
    },
    CopyMetaFileA: {
      parameters: ["pointer", "buffer"],
      result: "pointer",
    },
    CopyMetaFileW: {
      parameters: ["pointer", "buffer"],
      result: "pointer",
    },
    CreateBitmap: {
      parameters: ["i32", "i32", "u32", "u32", "pointer"],
      result: "pointer",
    },
    CreateBitmapIndirect: {
      parameters: ["pointer"],
      result: "pointer",
    },
    CreateBrushIndirect: {
      parameters: ["pointer"],
      result: "pointer",
    },
    CreateCompatibleBitmap: {
      parameters: ["pointer", "i32", "i32"],
      result: "pointer",
    },
    CreateDiscardableBitmap: {
      parameters: ["pointer", "i32", "i32"],
      result: "pointer",
    },
    CreateCompatibleDC: {
      parameters: ["pointer"],
      result: "pointer",
    },
    CreateDCA: {
      parameters: ["buffer", "buffer", "buffer", "pointer"],
      result: "pointer",
    },
    CreateDCW: {
      parameters: ["buffer", "buffer", "buffer", "pointer"],
      result: "pointer",
    },
    CreateDIBitmap: {
      parameters: ["pointer", "pointer", "u32", "pointer", "pointer", "u32"],
      result: "pointer",
    },
    CreateDIBPatternBrush: {
      parameters: ["isize", "u32"],
      result: "pointer",
    },
    CreateDIBPatternBrushPt: {
      parameters: ["pointer", "u32"],
      result: "pointer",
    },
    CreateEllipticRgn: {
      parameters: ["i32", "i32", "i32", "i32"],
      result: "pointer",
    },
    CreateEllipticRgnIndirect: {
      parameters: ["pointer"],
      result: "pointer",
    },
    CreateFontIndirectA: {
      parameters: ["pointer"],
      result: "pointer",
    },
    CreateFontIndirectW: {
      parameters: ["pointer"],
      result: "pointer",
    },
    CreateFontA: {
      parameters: ["i32", "i32", "i32", "i32", "i32", "u32", "u32", "u32", "u32", "u32", "u32", "u32", "u32", "buffer"],
      result: "pointer",
    },
    CreateFontW: {
      parameters: ["i32", "i32", "i32", "i32", "i32", "u32", "u32", "u32", "u32", "u32", "u32", "u32", "u32", "buffer"],
      result: "pointer",
    },
    CreateHatchBrush: {
      parameters: ["u32", "pointer"],
      result: "pointer",
    },
    CreateICA: {
      parameters: ["buffer", "buffer", "buffer", "pointer"],
      result: "pointer",
    },
    CreateICW: {
      parameters: ["buffer", "buffer", "buffer", "pointer"],
      result: "pointer",
    },
    CreateMetaFileA: {
      parameters: ["buffer"],
      result: "pointer",
    },
    CreateMetaFileW: {
      parameters: ["buffer"],
      result: "pointer",
    },
    CreatePalette: {
      parameters: ["pointer"],
      result: "pointer",
    },
    CreatePen: {
      parameters: ["u32", "i32", "pointer"],
      result: "pointer",
    },
    CreatePenIndirect: {
      parameters: ["pointer"],
      result: "pointer",
    },
    CreatePolyPolygonRgn: {
      parameters: ["pointer", "pointer", "i32", "u32"],
      result: "pointer",
    },
    CreatePatternBrush: {
      parameters: ["pointer"],
      result: "pointer",
    },
    CreateRectRgn: {
      parameters: ["i32", "i32", "i32", "i32"],
      result: "pointer",
    },
    CreateRectRgnIndirect: {
      parameters: ["pointer"],
      result: "pointer",
    },
    CreateRoundRectRgn: {
      parameters: ["i32", "i32", "i32", "i32", "i32", "i32"],
      result: "pointer",
    },
    CreateScalableFontResourceA: {
      parameters: ["u32", "buffer", "buffer", "buffer"],
      result: "i32",
    },
    CreateScalableFontResourceW: {
      parameters: ["u32", "buffer", "buffer", "buffer"],
      result: "i32",
    },
    CreateSolidBrush: {
      parameters: ["pointer"],
      result: "pointer",
    },
    DeleteDC: {
      parameters: ["pointer"],
      result: "i32",
    },
    DeleteMetaFile: {
      parameters: ["pointer"],
      result: "i32",
    },
    DeleteObject: {
      parameters: ["pointer"],
      result: "i32",
    },
    DrawEscape: {
      parameters: ["pointer", "i32", "i32", "buffer"],
      result: "i32",
    },
    Ellipse: {
      parameters: ["pointer", "i32", "i32", "i32", "i32"],
      result: "i32",
    },
    EnumFontFamiliesExA: {
      parameters: ["pointer", "pointer", "pointer", "pointer", "u32"],
      result: "i32",
    },
    EnumFontFamiliesExW: {
      parameters: ["pointer", "pointer", "pointer", "pointer", "u32"],
      result: "i32",
    },
    EnumFontFamiliesA: {
      parameters: ["pointer", "buffer", "pointer", "pointer"],
      result: "i32",
    },
    EnumFontFamiliesW: {
      parameters: ["pointer", "buffer", "pointer", "pointer"],
      result: "i32",
    },
    EnumFontsA: {
      parameters: ["pointer", "buffer", "pointer", "pointer"],
      result: "i32",
    },
    EnumFontsW: {
      parameters: ["pointer", "buffer", "pointer", "pointer"],
      result: "i32",
    },
    EnumObjects: {
      parameters: ["pointer", "i32", "pointer", "pointer"],
      result: "i32",
    },
    EqualRgn: {
      parameters: ["pointer", "pointer"],
      result: "i32",
    },
    ExcludeClipRect: {
      parameters: ["pointer", "i32", "i32", "i32", "i32"],
      result: "i32",
    },
    ExtCreateRegion: {
      parameters: ["pointer", "u32", "pointer"],
      result: "pointer",
    },
    ExtFloodFill: {
      parameters: ["pointer", "i32", "i32", "pointer", "u32"],
      result: "i32",
    },
    FillRgn: {
      parameters: ["pointer", "pointer", "pointer"],
      result: "i32",
    },
    FloodFill: {
      parameters: ["pointer", "i32", "i32", "pointer"],
      result: "i32",
    },
    FrameRgn: {
      parameters: ["pointer", "pointer", "pointer", "i32", "i32"],
      result: "i32",
    },
    GetROP2: {
      parameters: ["pointer"],
      result: "i32",
    },
    GetAspectRatioFilterEx: {
      parameters: ["pointer", "pointer"],
      result: "i32",
    },
    GetBkColor: {
      parameters: ["pointer"],
      result: "pointer",
    },
    GetDCBrushColor: {
      parameters: ["pointer"],
      result: "pointer",
    },
    GetDCPenColor: {
      parameters: ["pointer"],
      result: "pointer",
    },
    GetBkMode: {
      parameters: ["pointer"],
      result: "u32",
    },
    GetBitmapBits: {
      parameters: ["pointer", "i32", "pointer"],
      result: "i32",
    },
    GetBitmapDimensionEx: {
      parameters: ["pointer", "pointer"],
      result: "i32",
    },
    GetBoundsRect: {
      parameters: ["pointer", "pointer", "u32"],
      result: "u32",
    },
    GetBrushOrgEx: {
      parameters: ["pointer", "pointer"],
      result: "i32",
    },
    GetCharWidthA: {
      parameters: ["pointer", "u32", "u32", "pointer"],
      result: "i32",
    },
    GetCharWidthW: {
      parameters: ["pointer", "u32", "u32", "pointer"],
      result: "i32",
    },
    GetCharWidth32A: {
      parameters: ["pointer", "u32", "u32", "pointer"],
      result: "i32",
    },
    GetCharWidth32W: {
      parameters: ["pointer", "u32", "u32", "pointer"],
      result: "i32",
    },
    GetCharWidthFloatA: {
      parameters: ["pointer", "u32", "u32", "pointer"],
      result: "i32",
    },
    GetCharWidthFloatW: {
      parameters: ["pointer", "u32", "u32", "pointer"],
      result: "i32",
    },
    GetCharABCWidthsA: {
      parameters: ["pointer", "u32", "u32", "pointer"],
      result: "i32",
    },
    GetCharABCWidthsW: {
      parameters: ["pointer", "u32", "u32", "pointer"],
      result: "i32",
    },
    GetCharABCWidthsFloatA: {
      parameters: ["pointer", "u32", "u32", "pointer"],
      result: "i32",
    },
    GetCharABCWidthsFloatW: {
      parameters: ["pointer", "u32", "u32", "pointer"],
      result: "i32",
    },
    GetClipBox: {
      parameters: ["pointer", "pointer"],
      result: "i32",
    },
    GetClipRgn: {
      parameters: ["pointer", "pointer"],
      result: "i32",
    },
    GetMetaRgn: {
      parameters: ["pointer", "pointer"],
      result: "i32",
    },
    GetCurrentObject: {
      parameters: ["pointer", "i32"],
      result: "pointer",
    },
    GetCurrentPositionEx: {
      parameters: ["pointer", "pointer"],
      result: "i32",
    },
    GetDeviceCaps: {
      parameters: ["pointer", "u32"],
      result: "i32",
    },
    GetDIBits: {
      parameters: ["pointer", "pointer", "u32", "u32", "pointer", "pointer", "u32"],
      result: "i32",
    },
    GetFontData: {
      parameters: ["pointer", "u32", "u32", "pointer", "u32"],
      result: "u32",
    },
    GetGlyphOutlineA: {
      parameters: ["pointer", "u32", "u32", "pointer", "u32", "pointer", "pointer"],
      result: "u32",
    },
    GetGlyphOutlineW: {
      parameters: ["pointer", "u32", "u32", "pointer", "u32", "pointer", "pointer"],
      result: "u32",
    },
    GetGraphicsMode: {
      parameters: ["pointer"],
      result: "i32",
    },
    GetMapMode: {
      parameters: ["pointer"],
      result: "u32",
    },
    GetMetaFileBitsEx: {
      parameters: ["pointer", "u32", "pointer"],
      result: "u32",
    },
    GetMetaFileA: {
      parameters: ["buffer"],
      result: "pointer",
    },
    GetMetaFileW: {
      parameters: ["buffer"],
      result: "pointer",
    },
    GetNearestColor: {
      parameters: ["pointer", "pointer"],
      result: "pointer",
    },
    GetNearestPaletteIndex: {
      parameters: ["pointer", "pointer"],
      result: "u32",
    },
    GetObjectType: {
      parameters: ["pointer"],
      result: "u32",
    },
    GetOutlineTextMetricsA: {
      parameters: ["pointer", "u32", "pointer"],
      result: "u32",
    },
    GetOutlineTextMetricsW: {
      parameters: ["pointer", "u32", "pointer"],
      result: "u32",
    },
    GetPaletteEntries: {
      parameters: ["pointer", "u32", "u32", "pointer"],
      result: "u32",
    },
    GetPixel: {
      parameters: ["pointer", "i32", "i32"],
      result: "pointer",
    },
    GetPolyFillMode: {
      parameters: ["pointer"],
      result: "i32",
    },
    GetRasterizerCaps: {
      parameters: ["pointer", "u32"],
      result: "i32",
    },
    GetRandomRgn: {
      parameters: ["pointer", "pointer", "i32"],
      result: "i32",
    },
    GetRegionData: {
      parameters: ["pointer", "u32", "pointer"],
      result: "u32",
    },
    GetRgnBox: {
      parameters: ["pointer", "pointer"],
      result: "i32",
    },
    GetStockObject: {
      parameters: ["u32"],
      result: "pointer",
    },
    GetStretchBltMode: {
      parameters: ["pointer"],
      result: "i32",
    },
    GetSystemPaletteEntries: {
      parameters: ["pointer", "u32", "u32", "pointer"],
      result: "u32",
    },
    GetSystemPaletteUse: {
      parameters: ["pointer"],
      result: "u32",
    },
    GetTextCharacterExtra: {
      parameters: ["pointer"],
      result: "i32",
    },
    GetTextAlign: {
      parameters: ["pointer"],
      result: "u32",
    },
    GetTextColor: {
      parameters: ["pointer"],
      result: "pointer",
    },
    GetTextExtentPointA: {
      parameters: ["pointer", "buffer", "i32", "pointer"],
      result: "i32",
    },
    GetTextExtentPointW: {
      parameters: ["pointer", "buffer", "i32", "pointer"],
      result: "i32",
    },
    GetTextExtentPoint32A: {
      parameters: ["pointer", "buffer", "i32", "pointer"],
      result: "i32",
    },
    GetTextExtentPoint32W: {
      parameters: ["pointer", "buffer", "i32", "pointer"],
      result: "i32",
    },
    GetTextExtentExPointA: {
      parameters: ["pointer", "buffer", "i32", "i32", "pointer", "pointer", "pointer"],
      result: "i32",
    },
    GetTextExtentExPointW: {
      parameters: ["pointer", "buffer", "i32", "i32", "pointer", "pointer", "pointer"],
      result: "i32",
    },
    GetFontLanguageInfo: {
      parameters: ["pointer"],
      result: "u32",
    },
    GetCharacterPlacementA: {
      parameters: ["pointer", "buffer", "i32", "i32", "pointer", "u32"],
      result: "u32",
    },
    GetCharacterPlacementW: {
      parameters: ["pointer", "buffer", "i32", "i32", "pointer", "u32"],
      result: "u32",
    },
    GetFontUnicodeRanges: {
      parameters: ["pointer", "pointer"],
      result: "u32",
    },
    GetGlyphIndicesA: {
      parameters: ["pointer", "buffer", "i32", "pointer", "u32"],
      result: "u32",
    },
    GetGlyphIndicesW: {
      parameters: ["pointer", "buffer", "i32", "pointer", "u32"],
      result: "u32",
    },
    GetTextExtentPointI: {
      parameters: ["pointer", "pointer", "i32", "pointer"],
      result: "i32",
    },
    GetTextExtentExPointI: {
      parameters: ["pointer", "pointer", "i32", "i32", "pointer", "pointer", "pointer"],
      result: "i32",
    },
    GetCharWidthI: {
      parameters: ["pointer", "u32", "u32", "pointer", "pointer"],
      result: "i32",
    },
    GetCharABCWidthsI: {
      parameters: ["pointer", "u32", "u32", "pointer", "pointer"],
      result: "i32",
    },
    AddFontResourceExA: {
      parameters: ["buffer", "u32", "pointer"],
      result: "i32",
    },
    AddFontResourceExW: {
      parameters: ["buffer", "u32", "pointer"],
      result: "i32",
    },
    RemoveFontResourceExA: {
      parameters: ["buffer", "u32", "pointer"],
      result: "i32",
    },
    RemoveFontResourceExW: {
      parameters: ["buffer", "u32", "pointer"],
      result: "i32",
    },
    AddFontMemResourceEx: {
      parameters: ["pointer", "u32", "pointer", "pointer"],
      result: "pointer",
    },
    RemoveFontMemResourceEx: {
      parameters: ["pointer"],
      result: "i32",
    },
    CreateFontIndirectExA: {
      parameters: ["pointer"],
      result: "pointer",
    },
    CreateFontIndirectExW: {
      parameters: ["pointer"],
      result: "pointer",
    },
    GetViewportExtEx: {
      parameters: ["pointer", "pointer"],
      result: "i32",
    },
    GetViewportOrgEx: {
      parameters: ["pointer", "pointer"],
      result: "i32",
    },
    GetWindowExtEx: {
      parameters: ["pointer", "pointer"],
      result: "i32",
    },
    GetWindowOrgEx: {
      parameters: ["pointer", "pointer"],
      result: "i32",
    },
    IntersectClipRect: {
      parameters: ["pointer", "i32", "i32", "i32", "i32"],
      result: "i32",
    },
    InvertRgn: {
      parameters: ["pointer", "pointer"],
      result: "i32",
    },
    LineDDA: {
      parameters: ["i32", "i32", "i32", "i32", "pointer", "pointer"],
      result: "i32",
    },
    LineTo: {
      parameters: ["pointer", "i32", "i32"],
      result: "i32",
    },
    MaskBlt: {
      parameters: ["pointer", "i32", "i32", "i32", "i32", "pointer", "i32", "i32", "pointer", "i32", "i32", "u32"],
      result: "i32",
    },
    PlgBlt: {
      parameters: ["pointer", "pointer", "pointer", "i32", "i32", "i32", "i32", "pointer", "i32", "i32"],
      result: "i32",
    },
    OffsetClipRgn: {
      parameters: ["pointer", "i32", "i32"],
      result: "i32",
    },
    OffsetRgn: {
      parameters: ["pointer", "i32", "i32"],
      result: "i32",
    },
    PatBlt: {
      parameters: ["pointer", "i32", "i32", "i32", "i32", "u32"],
      result: "i32",
    },
    Pie: {
      parameters: ["pointer", "i32", "i32", "i32", "i32", "i32", "i32", "i32", "i32"],
      result: "i32",
    },
    PlayMetaFile: {
      parameters: ["pointer", "pointer"],
      result: "i32",
    },
    PaintRgn: {
      parameters: ["pointer", "pointer"],
      result: "i32",
    },
    PolyPolygon: {
      parameters: ["pointer", "pointer", "pointer", "i32"],
      result: "i32",
    },
    PtInRegion: {
      parameters: ["pointer", "i32", "i32"],
      result: "i32",
    },
    PtVisible: {
      parameters: ["pointer", "i32", "i32"],
      result: "i32",
    },
    RectInRegion: {
      parameters: ["pointer", "pointer"],
      result: "i32",
    },
    RectVisible: {
      parameters: ["pointer", "pointer"],
      result: "i32",
    },
    Rectangle: {
      parameters: ["pointer", "i32", "i32", "i32", "i32"],
      result: "i32",
    },
    RestoreDC: {
      parameters: ["pointer", "i32"],
      result: "i32",
    },
    ResetDCA: {
      parameters: ["pointer", "pointer"],
      result: "pointer",
    },
    ResetDCW: {
      parameters: ["pointer", "pointer"],
      result: "pointer",
    },
    RealizePalette: {
      parameters: ["pointer"],
      result: "u32",
    },
    RemoveFontResourceA: {
      parameters: ["buffer"],
      result: "i32",
    },
    RemoveFontResourceW: {
      parameters: ["buffer"],
      result: "i32",
    },
    RoundRect: {
      parameters: ["pointer", "i32", "i32", "i32", "i32", "i32", "i32"],
      result: "i32",
    },
    ResizePalette: {
      parameters: ["pointer", "u32"],
      result: "i32",
    },
    SaveDC: {
      parameters: ["pointer"],
      result: "i32",
    },
    SelectClipRgn: {
      parameters: ["pointer", "pointer"],
      result: "i32",
    },
    ExtSelectClipRgn: {
      parameters: ["pointer", "pointer", "i32"],
      result: "i32",
    },
    SetMetaRgn: {
      parameters: ["pointer"],
      result: "i32",
    },
    SelectObject: {
      parameters: ["pointer", "pointer"],
      result: "pointer",
    },
    SelectPalette: {
      parameters: ["pointer", "pointer", "i32"],
      result: "pointer",
    },
    SetBkColor: {
      parameters: ["pointer", "pointer"],
      result: "pointer",
    },
    SetDCBrushColor: {
      parameters: ["pointer", "pointer"],
      result: "pointer",
    },
    SetDCPenColor: {
      parameters: ["pointer", "pointer"],
      result: "pointer",
    },
    SetBkMode: {
      parameters: ["pointer", "u32"],
      result: "i32",
    },
    SetBitmapBits: {
      parameters: ["pointer", "u32", "pointer"],
      result: "i32",
    },
    SetBoundsRect: {
      parameters: ["pointer", "pointer", "u32"],
      result: "u32",
    },
    SetDIBits: {
      parameters: ["pointer", "pointer", "u32", "u32", "pointer", "pointer", "u32"],
      result: "i32",
    },
    SetDIBitsToDevice: {
      parameters: ["pointer", "i32", "i32", "u32", "u32", "i32", "i32", "u32", "u32", "pointer", "pointer", "u32"],
      result: "i32",
    },
    SetMapperFlags: {
      parameters: ["pointer", "u32"],
      result: "u32",
    },
    SetGraphicsMode: {
      parameters: ["pointer", "u32"],
      result: "i32",
    },
    SetMapMode: {
      parameters: ["pointer", "u32"],
      result: "i32",
    },
    SetLayout: {
      parameters: ["pointer", "u32"],
      result: "u32",
    },
    GetLayout: {
      parameters: ["pointer"],
      result: "u32",
    },
    SetMetaFileBitsEx: {
      parameters: ["u32", "pointer"],
      result: "pointer",
    },
    SetPaletteEntries: {
      parameters: ["pointer", "u32", "u32", "pointer"],
      result: "u32",
    },
    SetPixel: {
      parameters: ["pointer", "i32", "i32", "pointer"],
      result: "pointer",
    },
    SetPixelV: {
      parameters: ["pointer", "i32", "i32", "pointer"],
      result: "i32",
    },
    SetPolyFillMode: {
      parameters: ["pointer", "u32"],
      result: "i32",
    },
    StretchBlt: {
      parameters: ["pointer", "i32", "i32", "i32", "i32", "pointer", "i32", "i32", "i32", "i32", "u32"],
      result: "i32",
    },
    SetRectRgn: {
      parameters: ["pointer", "i32", "i32", "i32", "i32"],
      result: "i32",
    },
    StretchDIBits: {
      parameters: ["pointer", "i32", "i32", "i32", "i32", "i32", "i32", "i32", "i32", "pointer", "pointer", "u32", "u32"],
      result: "i32",
    },
    SetROP2: {
      parameters: ["pointer", "i32"],
      result: "i32",
    },
    SetStretchBltMode: {
      parameters: ["pointer", "u32"],
      result: "i32",
    },
    SetSystemPaletteUse: {
      parameters: ["pointer", "u32"],
      result: "u32",
    },
    SetTextCharacterExtra: {
      parameters: ["pointer", "i32"],
      result: "i32",
    },
    SetTextColor: {
      parameters: ["pointer", "pointer"],
      result: "pointer",
    },
    SetTextAlign: {
      parameters: ["pointer", "u32"],
      result: "u32",
    },
    SetTextJustification: {
      parameters: ["pointer", "i32", "i32"],
      result: "i32",
    },
    UpdateColors: {
      parameters: ["pointer"],
      result: "i32",
    },
    GdiAlphaBlend: {
      parameters: ["pointer", "i32", "i32", "i32", "i32", "pointer", "i32", "i32", "i32", "i32", "pointer"],
      result: "i32",
    },
    GdiTransparentBlt: {
      parameters: ["pointer", "i32", "i32", "i32", "i32", "pointer", "i32", "i32", "i32", "i32", "u32"],
      result: "i32",
    },
    GdiGradientFill: {
      parameters: ["pointer", "pointer", "u32", "pointer", "u32", "u32"],
      result: "i32",
    },
    PlayMetaFileRecord: {
      parameters: ["pointer", "pointer", "pointer", "u32"],
      result: "i32",
    },
    EnumMetaFile: {
      parameters: ["pointer", "pointer", "pointer", "pointer"],
      result: "i32",
    },
    CloseEnhMetaFile: {
      parameters: ["pointer"],
      result: "pointer",
    },
    CopyEnhMetaFileA: {
      parameters: ["pointer", "buffer"],
      result: "pointer",
    },
    CopyEnhMetaFileW: {
      parameters: ["pointer", "buffer"],
      result: "pointer",
    },
    CreateEnhMetaFileA: {
      parameters: ["pointer", "buffer", "pointer", "buffer"],
      result: "pointer",
    },
    CreateEnhMetaFileW: {
      parameters: ["pointer", "buffer", "pointer", "buffer"],
      result: "pointer",
    },
    DeleteEnhMetaFile: {
      parameters: ["pointer"],
      result: "i32",
    },
    EnumEnhMetaFile: {
      parameters: ["pointer", "pointer", "pointer", "pointer", "pointer"],
      result: "i32",
    },
    GetEnhMetaFileA: {
      parameters: ["buffer"],
      result: "pointer",
    },
    GetEnhMetaFileW: {
      parameters: ["buffer"],
      result: "pointer",
    },
    GetEnhMetaFileBits: {
      parameters: ["pointer", "u32", "pointer"],
      result: "u32",
    },
    GetEnhMetaFileDescriptionA: {
      parameters: ["pointer", "u32", "buffer"],
      result: "u32",
    },
    GetEnhMetaFileDescriptionW: {
      parameters: ["pointer", "u32", "buffer"],
      result: "u32",
    },
    GetEnhMetaFileHeader: {
      parameters: ["pointer", "u32", "pointer"],
      result: "u32",
    },
    GetEnhMetaFilePaletteEntries: {
      parameters: ["pointer", "u32", "pointer"],
      result: "u32",
    },
    GetWinMetaFileBits: {
      parameters: ["pointer", "u32", "pointer", "i32", "pointer"],
      result: "u32",
    },
    PlayEnhMetaFile: {
      parameters: ["pointer", "pointer", "pointer"],
      result: "i32",
    },
    PlayEnhMetaFileRecord: {
      parameters: ["pointer", "pointer", "pointer", "u32"],
      result: "i32",
    },
    SetEnhMetaFileBits: {
      parameters: ["u32", "pointer"],
      result: "pointer",
    },
    GdiComment: {
      parameters: ["pointer", "u32", "pointer"],
      result: "i32",
    },
    GetTextMetricsA: {
      parameters: ["pointer", "pointer"],
      result: "i32",
    },
    GetTextMetricsW: {
      parameters: ["pointer", "pointer"],
      result: "i32",
    },
    AngleArc: {
      parameters: ["pointer", "i32", "i32", "u32", "f32", "f32"],
      result: "i32",
    },
    PolyPolyline: {
      parameters: ["pointer", "pointer", "pointer", "u32"],
      result: "i32",
    },
    GetWorldTransform: {
      parameters: ["pointer", "pointer"],
      result: "i32",
    },
    SetWorldTransform: {
      parameters: ["pointer", "pointer"],
      result: "i32",
    },
    ModifyWorldTransform: {
      parameters: ["pointer", "pointer", "u32"],
      result: "i32",
    },
    CombineTransform: {
      parameters: ["pointer", "pointer", "pointer"],
      result: "i32",
    },
    CreateDIBSection: {
      parameters: ["pointer", "pointer", "u32", "pointer", "pointer", "u32"],
      result: "pointer",
    },
    GetDIBColorTable: {
      parameters: ["pointer", "u32", "u32", "pointer"],
      result: "u32",
    },
    SetDIBColorTable: {
      parameters: ["pointer", "u32", "u32", "pointer"],
      result: "u32",
    },
    SetColorAdjustment: {
      parameters: ["pointer", "pointer"],
      result: "i32",
    },
    GetColorAdjustment: {
      parameters: ["pointer", "pointer"],
      result: "i32",
    },
    CreateHalftonePalette: {
      parameters: ["pointer"],
      result: "pointer",
    },
    AbortPath: {
      parameters: ["pointer"],
      result: "i32",
    },
    ArcTo: {
      parameters: ["pointer", "i32", "i32", "i32", "i32", "i32", "i32", "i32", "i32"],
      result: "i32",
    },
    BeginPath: {
      parameters: ["pointer"],
      result: "i32",
    },
    CloseFigure: {
      parameters: ["pointer"],
      result: "i32",
    },
    EndPath: {
      parameters: ["pointer"],
      result: "i32",
    },
    FillPath: {
      parameters: ["pointer"],
      result: "i32",
    },
    FlattenPath: {
      parameters: ["pointer"],
      result: "i32",
    },
    GetPath: {
      parameters: ["pointer", "pointer", "pointer", "i32"],
      result: "i32",
    },
    PathToRegion: {
      parameters: ["pointer"],
      result: "pointer",
    },
    PolyDraw: {
      parameters: ["pointer", "pointer", "pointer", "i32"],
      result: "i32",
    },
    SelectClipPath: {
      parameters: ["pointer", "i32"],
      result: "i32",
    },
    SetArcDirection: {
      parameters: ["pointer", "u32"],
      result: "i32",
    },
    SetMiterLimit: {
      parameters: ["pointer", "f32", "pointer"],
      result: "i32",
    },
    StrokeAndFillPath: {
      parameters: ["pointer"],
      result: "i32",
    },
    StrokePath: {
      parameters: ["pointer"],
      result: "i32",
    },
    WidenPath: {
      parameters: ["pointer"],
      result: "i32",
    },
    ExtCreatePen: {
      parameters: ["u32", "u32", "pointer", "u32", "pointer"],
      result: "pointer",
    },
    GetMiterLimit: {
      parameters: ["pointer", "pointer"],
      result: "i32",
    },
    GetArcDirection: {
      parameters: ["pointer"],
      result: "i32",
    },
    GetObjectW: {
      parameters: ["pointer", "i32", "pointer"],
      result: "i32",
    },
    MoveToEx: {
      parameters: ["pointer", "i32", "i32", "pointer"],
      result: "i32",
    },
    TextOutA: {
      parameters: ["pointer", "i32", "i32", "buffer", "i32"],
      result: "i32",
    },
    TextOutW: {
      parameters: ["pointer", "i32", "i32", "buffer", "i32"],
      result: "i32",
    },
    ExtTextOutA: {
      parameters: ["pointer", "i32", "i32", "u32", "pointer", "buffer", "u32", "pointer"],
      result: "i32",
    },
    ExtTextOutW: {
      parameters: ["pointer", "i32", "i32", "u32", "pointer", "buffer", "u32", "pointer"],
      result: "i32",
    },
    PolyTextOutA: {
      parameters: ["pointer", "pointer", "i32"],
      result: "i32",
    },
    PolyTextOutW: {
      parameters: ["pointer", "pointer", "i32"],
      result: "i32",
    },
    CreatePolygonRgn: {
      parameters: ["pointer", "i32", "u32"],
      result: "pointer",
    },
    DPtoLP: {
      parameters: ["pointer", "pointer", "i32"],
      result: "i32",
    },
    LPtoDP: {
      parameters: ["pointer", "pointer", "i32"],
      result: "i32",
    },
    Polygon: {
      parameters: ["pointer", "pointer", "i32"],
      result: "i32",
    },
    Polyline: {
      parameters: ["pointer", "pointer", "i32"],
      result: "i32",
    },
    PolyBezier: {
      parameters: ["pointer", "pointer", "u32"],
      result: "i32",
    },
    PolyBezierTo: {
      parameters: ["pointer", "pointer", "u32"],
      result: "i32",
    },
    PolylineTo: {
      parameters: ["pointer", "pointer", "u32"],
      result: "i32",
    },
    SetViewportExtEx: {
      parameters: ["pointer", "i32", "i32", "pointer"],
      result: "i32",
    },
    SetViewportOrgEx: {
      parameters: ["pointer", "i32", "i32", "pointer"],
      result: "i32",
    },
    SetWindowExtEx: {
      parameters: ["pointer", "i32", "i32", "pointer"],
      result: "i32",
    },
    SetWindowOrgEx: {
      parameters: ["pointer", "i32", "i32", "pointer"],
      result: "i32",
    },
    OffsetViewportOrgEx: {
      parameters: ["pointer", "i32", "i32", "pointer"],
      result: "i32",
    },
    OffsetWindowOrgEx: {
      parameters: ["pointer", "i32", "i32", "pointer"],
      result: "i32",
    },
    ScaleViewportExtEx: {
      parameters: ["pointer", "i32", "i32", "i32", "i32", "pointer"],
      result: "i32",
    },
    ScaleWindowExtEx: {
      parameters: ["pointer", "i32", "i32", "i32", "i32", "pointer"],
      result: "i32",
    },
    SetBitmapDimensionEx: {
      parameters: ["pointer", "i32", "i32", "pointer"],
      result: "i32",
    },
    SetBrushOrgEx: {
      parameters: ["pointer", "i32", "i32", "pointer"],
      result: "i32",
    },
    GetTextFaceA: {
      parameters: ["pointer", "i32", "buffer"],
      result: "i32",
    },
    GetTextFaceW: {
      parameters: ["pointer", "i32", "buffer"],
      result: "i32",
    },
    GetKerningPairsA: {
      parameters: ["pointer", "u32", "pointer"],
      result: "u32",
    },
    GetKerningPairsW: {
      parameters: ["pointer", "u32", "pointer"],
      result: "u32",
    },
    GetDCOrgEx: {
      parameters: ["pointer", "pointer"],
      result: "i32",
    },
    FixBrushOrgEx: {
      parameters: ["pointer", "i32", "i32", "pointer"],
      result: "i32",
    },
    UnrealizeObject: {
      parameters: ["pointer"],
      result: "i32",
    },
    GdiFlush: {
      parameters: [],
      result: "i32",
    },
    GdiSetBatchLimit: {
      parameters: ["u32"],
      result: "u32",
    },
    GdiGetBatchLimit: {
      parameters: [],
      result: "u32",
    },
  }).symbols;
} catch(e) { /* ignore */ }

try {
  var libMSIMG32_dll = Deno.dlopen("MSIMG32.dll", {
    AlphaBlend: {
      parameters: ["pointer", "i32", "i32", "i32", "i32", "pointer", "i32", "i32", "i32", "i32", "pointer"],
      result: "i32",
    },
    TransparentBlt: {
      parameters: ["pointer", "i32", "i32", "i32", "i32", "pointer", "i32", "i32", "i32", "i32", "u32"],
      result: "i32",
    },
    GradientFill: {
      parameters: ["pointer", "pointer", "u32", "pointer", "u32", "u32"],
      result: "i32",
    },
  }).symbols;
} catch(e) { /* ignore */ }

try {
  var libOPENGL32_dll = Deno.dlopen("OPENGL32.dll", {
    wglSwapMultipleBuffers: {
      parameters: ["u32", "pointer"],
      result: "u32",
    },
  }).symbols;
} catch(e) { /* ignore */ }

try {
  var libFONTSUB_dll = Deno.dlopen("FONTSUB.dll", {
    CreateFontPackage: {
      parameters: ["pointer", "u32", "pointer", "pointer", "pointer", "u16", "u16", "u16", "u16", "u16", "u16", "pointer", "u16", "pointer", "pointer", "pointer", "pointer"],
      result: "u32",
    },
    MergeFontPackage: {
      parameters: ["pointer", "u32", "pointer", "u32", "pointer", "pointer", "pointer", "u16", "pointer", "pointer", "pointer", "pointer"],
      result: "u32",
    },
  }).symbols;
} catch(e) { /* ignore */ }

try {
  var libt2embed_dll = Deno.dlopen("t2embed.dll", {
    TTEmbedFont: {
      parameters: ["pointer", "u32", "u32", "pointer", "pointer", "pointer", "pointer", "pointer", "u16", "u16", "pointer"],
      result: "i32",
    },
    TTEmbedFontFromFileA: {
      parameters: ["pointer", "buffer", "u16", "u32", "u32", "pointer", "pointer", "pointer", "pointer", "pointer", "u16", "u16", "pointer"],
      result: "i32",
    },
    TTLoadEmbeddedFont: {
      parameters: ["pointer", "u32", "pointer", "u32", "pointer", "pointer", "pointer", "buffer", "buffer", "pointer"],
      result: "i32",
    },
    TTGetEmbeddedFontInfo: {
      parameters: ["u32", "pointer", "u32", "pointer", "pointer", "pointer", "pointer"],
      result: "i32",
    },
    TTDeleteEmbeddedFont: {
      parameters: ["pointer", "u32", "pointer"],
      result: "i32",
    },
    TTGetEmbeddingType: {
      parameters: ["pointer", "pointer"],
      result: "i32",
    },
    TTCharToUnicode: {
      parameters: ["pointer", "pointer", "u32", "pointer", "u32", "u32"],
      result: "i32",
    },
    TTRunValidationTests: {
      parameters: ["pointer", "pointer"],
      result: "i32",
    },
    TTIsEmbeddingEnabled: {
      parameters: ["pointer", "pointer"],
      result: "i32",
    },
    TTIsEmbeddingEnabledForFacename: {
      parameters: ["buffer", "pointer"],
      result: "i32",
    },
    TTEnableEmbeddingForFacename: {
      parameters: ["buffer", "i32"],
      result: "i32",
    },
    TTEmbedFontEx: {
      parameters: ["pointer", "u32", "u32", "pointer", "pointer", "pointer", "pointer", "pointer", "u16", "u16", "pointer"],
      result: "i32",
    },
    TTRunValidationTestsEx: {
      parameters: ["pointer", "pointer"],
      result: "i32",
    },
    TTGetNewFontName: {
      parameters: ["pointer", "buffer", "i32", "buffer", "i32"],
      result: "i32",
    },
  }).symbols;
} catch(e) { /* ignore */ }

try {
  var libUSER32_dll = Deno.dlopen("USER32.dll", {
    DrawEdge: {
      parameters: ["pointer", "pointer", "u32", "u32"],
      result: "i32",
    },
    DrawFrameControl: {
      parameters: ["pointer", "pointer", "u32", "u32"],
      result: "i32",
    },
    DrawCaption: {
      parameters: ["pointer", "pointer", "pointer", "u32"],
      result: "i32",
    },
    DrawAnimatedRects: {
      parameters: ["pointer", "i32", "pointer", "pointer"],
      result: "i32",
    },
    DrawTextA: {
      parameters: ["pointer", "buffer", "i32", "pointer", "u32"],
      result: "i32",
    },
    DrawTextW: {
      parameters: ["pointer", "buffer", "i32", "pointer", "u32"],
      result: "i32",
    },
    DrawTextExA: {
      parameters: ["pointer", "buffer", "i32", "pointer", "u32", "pointer"],
      result: "i32",
    },
    DrawTextExW: {
      parameters: ["pointer", "buffer", "i32", "pointer", "u32", "pointer"],
      result: "i32",
    },
    GrayStringA: {
      parameters: ["pointer", "pointer", "pointer", "pointer", "i32", "i32", "i32", "i32", "i32"],
      result: "i32",
    },
    GrayStringW: {
      parameters: ["pointer", "pointer", "pointer", "pointer", "i32", "i32", "i32", "i32", "i32"],
      result: "i32",
    },
    DrawStateA: {
      parameters: ["pointer", "pointer", "pointer", "pointer", "pointer", "i32", "i32", "i32", "i32", "u32"],
      result: "i32",
    },
    DrawStateW: {
      parameters: ["pointer", "pointer", "pointer", "pointer", "pointer", "i32", "i32", "i32", "i32", "u32"],
      result: "i32",
    },
    TabbedTextOutA: {
      parameters: ["pointer", "i32", "i32", "buffer", "i32", "i32", "pointer", "i32"],
      result: "i32",
    },
    TabbedTextOutW: {
      parameters: ["pointer", "i32", "i32", "buffer", "i32", "i32", "pointer", "i32"],
      result: "i32",
    },
    GetTabbedTextExtentA: {
      parameters: ["pointer", "buffer", "i32", "i32", "pointer"],
      result: "u32",
    },
    GetTabbedTextExtentW: {
      parameters: ["pointer", "buffer", "i32", "i32", "pointer"],
      result: "u32",
    },
    UpdateWindow: {
      parameters: ["pointer"],
      result: "i32",
    },
    PaintDesktop: {
      parameters: ["pointer"],
      result: "i32",
    },
    WindowFromDC: {
      parameters: ["pointer"],
      result: "pointer",
    },
    GetDC: {
      parameters: ["pointer"],
      result: "pointer",
    },
    GetDCEx: {
      parameters: ["pointer", "pointer", "u32"],
      result: "pointer",
    },
    GetWindowDC: {
      parameters: ["pointer"],
      result: "pointer",
    },
    ReleaseDC: {
      parameters: ["pointer", "pointer"],
      result: "i32",
    },
    BeginPaint: {
      parameters: ["pointer", "pointer"],
      result: "pointer",
    },
    EndPaint: {
      parameters: ["pointer", "pointer"],
      result: "i32",
    },
    GetUpdateRect: {
      parameters: ["pointer", "pointer", "i32"],
      result: "i32",
    },
    GetUpdateRgn: {
      parameters: ["pointer", "pointer", "i32"],
      result: "i32",
    },
    SetWindowRgn: {
      parameters: ["pointer", "pointer", "i32"],
      result: "i32",
    },
    GetWindowRgn: {
      parameters: ["pointer", "pointer"],
      result: "i32",
    },
    GetWindowRgnBox: {
      parameters: ["pointer", "pointer"],
      result: "i32",
    },
    ExcludeUpdateRgn: {
      parameters: ["pointer", "pointer"],
      result: "i32",
    },
    InvalidateRect: {
      parameters: ["pointer", "pointer", "i32"],
      result: "i32",
    },
    ValidateRect: {
      parameters: ["pointer", "pointer"],
      result: "i32",
    },
    InvalidateRgn: {
      parameters: ["pointer", "pointer", "i32"],
      result: "i32",
    },
    ValidateRgn: {
      parameters: ["pointer", "pointer"],
      result: "i32",
    },
    RedrawWindow: {
      parameters: ["pointer", "pointer", "pointer", "u32"],
      result: "i32",
    },
    LockWindowUpdate: {
      parameters: ["pointer"],
      result: "i32",
    },
    ClientToScreen: {
      parameters: ["pointer", "pointer"],
      result: "i32",
    },
    ScreenToClient: {
      parameters: ["pointer", "pointer"],
      result: "i32",
    },
    MapWindowPoints: {
      parameters: ["pointer", "pointer", "pointer", "u32"],
      result: "i32",
    },
    GetSysColor: {
      parameters: ["i32"],
      result: "u32",
    },
    GetSysColorBrush: {
      parameters: ["i32"],
      result: "pointer",
    },
    SetSysColors: {
      parameters: ["i32", "pointer", "pointer"],
      result: "i32",
    },
    DrawFocusRect: {
      parameters: ["pointer", "pointer"],
      result: "i32",
    },
    FillRect: {
      parameters: ["pointer", "pointer", "pointer"],
      result: "i32",
    },
    FrameRect: {
      parameters: ["pointer", "pointer", "pointer"],
      result: "i32",
    },
    InvertRect: {
      parameters: ["pointer", "pointer"],
      result: "i32",
    },
    SetRect: {
      parameters: ["pointer", "i32", "i32", "i32", "i32"],
      result: "i32",
    },
    SetRectEmpty: {
      parameters: ["pointer"],
      result: "i32",
    },
    CopyRect: {
      parameters: ["pointer", "pointer"],
      result: "i32",
    },
    InflateRect: {
      parameters: ["pointer", "i32", "i32"],
      result: "i32",
    },
    IntersectRect: {
      parameters: ["pointer", "pointer", "pointer"],
      result: "i32",
    },
    UnionRect: {
      parameters: ["pointer", "pointer", "pointer"],
      result: "i32",
    },
    SubtractRect: {
      parameters: ["pointer", "pointer", "pointer"],
      result: "i32",
    },
    OffsetRect: {
      parameters: ["pointer", "i32", "i32"],
      result: "i32",
    },
    IsRectEmpty: {
      parameters: ["pointer"],
      result: "i32",
    },
    EqualRect: {
      parameters: ["pointer", "pointer"],
      result: "i32",
    },
    PtInRect: {
      parameters: ["pointer", "pointer"],
      result: "i32",
    },
    LoadBitmapA: {
      parameters: ["pointer", "buffer"],
      result: "pointer",
    },
    LoadBitmapW: {
      parameters: ["pointer", "buffer"],
      result: "pointer",
    },
    ChangeDisplaySettingsA: {
      parameters: ["pointer", "u32"],
      result: "i32",
    },
    ChangeDisplaySettingsW: {
      parameters: ["pointer", "u32"],
      result: "i32",
    },
    ChangeDisplaySettingsExA: {
      parameters: ["buffer", "pointer", "pointer", "u32", "pointer"],
      result: "i32",
    },
    ChangeDisplaySettingsExW: {
      parameters: ["buffer", "pointer", "pointer", "u32", "pointer"],
      result: "i32",
    },
    EnumDisplaySettingsA: {
      parameters: ["buffer", "u32", "pointer"],
      result: "i32",
    },
    EnumDisplaySettingsW: {
      parameters: ["buffer", "u32", "pointer"],
      result: "i32",
    },
    EnumDisplaySettingsExA: {
      parameters: ["buffer", "u32", "pointer", "u32"],
      result: "i32",
    },
    EnumDisplaySettingsExW: {
      parameters: ["buffer", "u32", "pointer", "u32"],
      result: "i32",
    },
    EnumDisplayDevicesA: {
      parameters: ["buffer", "u32", "pointer", "u32"],
      result: "i32",
    },
    EnumDisplayDevicesW: {
      parameters: ["buffer", "u32", "pointer", "u32"],
      result: "i32",
    },
    MonitorFromPoint: {
      parameters: ["pointer", "u32"],
      result: "pointer",
    },
    MonitorFromRect: {
      parameters: ["pointer", "u32"],
      result: "pointer",
    },
    MonitorFromWindow: {
      parameters: ["pointer", "u32"],
      result: "pointer",
    },
    GetMonitorInfoA: {
      parameters: ["pointer", "pointer"],
      result: "i32",
    },
    GetMonitorInfoW: {
      parameters: ["pointer", "pointer"],
      result: "i32",
    },
    EnumDisplayMonitors: {
      parameters: ["pointer", "pointer", "pointer", "pointer"],
      result: "i32",
    },
  }).symbols;
} catch(e) { /* ignore */ }

// Symbols

export function GetObjectA(
  h: Uint8Array | Deno.PointerValue /* Windows.Win32.Graphics.Gdi.HGDIOBJ */,
  c: number /* i32 */,
  pv: Deno.PointerValue | Uint8Array /* ptr */,
): number /* i32 */ {
  return libGDI32_dll.GetObjectA(util.toPointer(h), c, util.toPointer(pv));
}

export function AddFontResourceA(
  param0: string | null | Uint8Array /* Windows.Win32.Foundation.PSTR */,
): number /* i32 */ {
  return libGDI32_dll.AddFontResourceA(util.pstrToFfi(param0));
}

export function AddFontResourceW(
  param0: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
): number /* i32 */ {
  return libGDI32_dll.AddFontResourceW(util.pwstrToFfi(param0));
}

export function AnimatePalette(
  hPal: Uint8Array | Deno.PointerValue /* Windows.Win32.Graphics.Gdi.HPALETTE */,
  iStartIndex: number /* u32 */,
  cEntries: number /* u32 */,
  ppe: Deno.PointerValue | Uint8Array /* ptr */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libGDI32_dll.AnimatePalette(util.toPointer(hPal), iStartIndex, cEntries, util.toPointer(ppe)));
}

export function Arc(
  hdc: Uint8Array | Deno.PointerValue /* Windows.Win32.Graphics.Gdi.HDC */,
  x1: number /* i32 */,
  y1: number /* i32 */,
  x2: number /* i32 */,
  y2: number /* i32 */,
  x3: number /* i32 */,
  y3: number /* i32 */,
  x4: number /* i32 */,
  y4: number /* i32 */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libGDI32_dll.Arc(util.toPointer(hdc), x1, y1, x2, y2, x3, y3, x4, y4));
}

export function BitBlt(
  hdc: Uint8Array | Deno.PointerValue /* Windows.Win32.Graphics.Gdi.HDC */,
  x: number /* i32 */,
  y: number /* i32 */,
  cx: number /* i32 */,
  cy: number /* i32 */,
  hdcSrc: Uint8Array | Deno.PointerValue /* Windows.Win32.Graphics.Gdi.HDC */,
  x1: number /* i32 */,
  y1: number /* i32 */,
  rop: ROP_CODE /* Windows.Win32.Graphics.Gdi.ROP_CODE */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libGDI32_dll.BitBlt(util.toPointer(hdc), x, y, cx, cy, util.toPointer(hdcSrc), x1, y1, rop));
}

export function CancelDC(
  hdc: Uint8Array | Deno.PointerValue /* Windows.Win32.Graphics.Gdi.HDC */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libGDI32_dll.CancelDC(util.toPointer(hdc)));
}

export function Chord(
  hdc: Uint8Array | Deno.PointerValue /* Windows.Win32.Graphics.Gdi.HDC */,
  x1: number /* i32 */,
  y1: number /* i32 */,
  x2: number /* i32 */,
  y2: number /* i32 */,
  x3: number /* i32 */,
  y3: number /* i32 */,
  x4: number /* i32 */,
  y4: number /* i32 */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libGDI32_dll.Chord(util.toPointer(hdc), x1, y1, x2, y2, x3, y3, x4, y4));
}

export function CloseMetaFile(
  hdc: Uint8Array | Deno.PointerValue /* Windows.Win32.Graphics.Gdi.HDC */,
): Deno.PointerValue /* Windows.Win32.Graphics.Gdi.HMETAFILE */ {
  return libGDI32_dll.CloseMetaFile(util.toPointer(hdc));
}

export function CombineRgn(
  hrgnDst: Uint8Array | Deno.PointerValue /* Windows.Win32.Graphics.Gdi.HRGN */,
  hrgnSrc1: Uint8Array | Deno.PointerValue /* Windows.Win32.Graphics.Gdi.HRGN */,
  hrgnSrc2: Uint8Array | Deno.PointerValue /* Windows.Win32.Graphics.Gdi.HRGN */,
  iMode: RGN_COMBINE_MODE /* Windows.Win32.Graphics.Gdi.RGN_COMBINE_MODE */,
): GDI_REGION_TYPE /* Windows.Win32.Graphics.Gdi.GDI_REGION_TYPE */ {
  return libGDI32_dll.CombineRgn(util.toPointer(hrgnDst), util.toPointer(hrgnSrc1), util.toPointer(hrgnSrc2), iMode);
}

export function CopyMetaFileA(
  param0: Uint8Array | Deno.PointerValue /* Windows.Win32.Graphics.Gdi.HMETAFILE */,
  param1: string | null | Uint8Array /* Windows.Win32.Foundation.PSTR */,
): Deno.PointerValue /* Windows.Win32.Graphics.Gdi.HMETAFILE */ {
  return libGDI32_dll.CopyMetaFileA(util.toPointer(param0), util.pstrToFfi(param1));
}

export function CopyMetaFileW(
  param0: Uint8Array | Deno.PointerValue /* Windows.Win32.Graphics.Gdi.HMETAFILE */,
  param1: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
): Deno.PointerValue /* Windows.Win32.Graphics.Gdi.HMETAFILE */ {
  return libGDI32_dll.CopyMetaFileW(util.toPointer(param0), util.pwstrToFfi(param1));
}

export function CreateBitmap(
  nWidth: number /* i32 */,
  nHeight: number /* i32 */,
  nPlanes: number /* u32 */,
  nBitCount: number /* u32 */,
  lpBits: Deno.PointerValue | Uint8Array /* ptr */,
): Deno.PointerValue /* Windows.Win32.Graphics.Gdi.HBITMAP */ {
  return libGDI32_dll.CreateBitmap(nWidth, nHeight, nPlanes, nBitCount, util.toPointer(lpBits));
}

export function CreateBitmapIndirect(
  pbm: Deno.PointerValue | Uint8Array /* ptr */,
): Deno.PointerValue /* Windows.Win32.Graphics.Gdi.HBITMAP */ {
  return libGDI32_dll.CreateBitmapIndirect(util.toPointer(pbm));
}

export function CreateBrushIndirect(
  plbrush: Deno.PointerValue | Uint8Array /* ptr */,
): Deno.PointerValue /* Windows.Win32.Graphics.Gdi.HBRUSH */ {
  return libGDI32_dll.CreateBrushIndirect(util.toPointer(plbrush));
}

export function CreateCompatibleBitmap(
  hdc: Uint8Array | Deno.PointerValue /* Windows.Win32.Graphics.Gdi.HDC */,
  cx: number /* i32 */,
  cy: number /* i32 */,
): Deno.PointerValue /* Windows.Win32.Graphics.Gdi.HBITMAP */ {
  return libGDI32_dll.CreateCompatibleBitmap(util.toPointer(hdc), cx, cy);
}

export function CreateDiscardableBitmap(
  hdc: Uint8Array | Deno.PointerValue /* Windows.Win32.Graphics.Gdi.HDC */,
  cx: number /* i32 */,
  cy: number /* i32 */,
): Deno.PointerValue /* Windows.Win32.Graphics.Gdi.HBITMAP */ {
  return libGDI32_dll.CreateDiscardableBitmap(util.toPointer(hdc), cx, cy);
}

export function CreateCompatibleDC(
  hdc: Uint8Array | Deno.PointerValue /* Windows.Win32.Graphics.Gdi.HDC */,
): Deno.PointerValue /* Windows.Win32.Graphics.Gdi.CreatedHDC */ {
  return libGDI32_dll.CreateCompatibleDC(util.toPointer(hdc));
}

export function CreateDCA(
  pwszDriver: string | null | Uint8Array /* Windows.Win32.Foundation.PSTR */,
  pwszDevice: string | null | Uint8Array /* Windows.Win32.Foundation.PSTR */,
  pszPort: string | null | Uint8Array /* Windows.Win32.Foundation.PSTR */,
  pdm: Deno.PointerValue | Uint8Array /* ptr */,
): Deno.PointerValue /* Windows.Win32.Graphics.Gdi.CreatedHDC */ {
  return libGDI32_dll.CreateDCA(util.pstrToFfi(pwszDriver), util.pstrToFfi(pwszDevice), util.pstrToFfi(pszPort), util.toPointer(pdm));
}

export function CreateDCW(
  pwszDriver: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  pwszDevice: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  pszPort: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  pdm: Deno.PointerValue | Uint8Array /* ptr */,
): Deno.PointerValue /* Windows.Win32.Graphics.Gdi.CreatedHDC */ {
  return libGDI32_dll.CreateDCW(util.pwstrToFfi(pwszDriver), util.pwstrToFfi(pwszDevice), util.pwstrToFfi(pszPort), util.toPointer(pdm));
}

export function CreateDIBitmap(
  hdc: Uint8Array | Deno.PointerValue /* Windows.Win32.Graphics.Gdi.HDC */,
  pbmih: Deno.PointerValue | Uint8Array /* ptr */,
  flInit: number /* u32 */,
  pjBits: Deno.PointerValue | Uint8Array /* ptr */,
  pbmi: Deno.PointerValue | Uint8Array /* ptr */,
  iUsage: DIB_USAGE /* Windows.Win32.Graphics.Gdi.DIB_USAGE */,
): Deno.PointerValue /* Windows.Win32.Graphics.Gdi.HBITMAP */ {
  return libGDI32_dll.CreateDIBitmap(util.toPointer(hdc), util.toPointer(pbmih), flInit, util.toPointer(pjBits), util.toPointer(pbmi), iUsage);
}

export function CreateDIBPatternBrush(
  h: Deno.PointerValue /* isize */,
  iUsage: DIB_USAGE /* Windows.Win32.Graphics.Gdi.DIB_USAGE */,
): Deno.PointerValue /* Windows.Win32.Graphics.Gdi.HBRUSH */ {
  return libGDI32_dll.CreateDIBPatternBrush(h, iUsage);
}

export function CreateDIBPatternBrushPt(
  lpPackedDIB: Deno.PointerValue | Uint8Array /* ptr */,
  iUsage: DIB_USAGE /* Windows.Win32.Graphics.Gdi.DIB_USAGE */,
): Deno.PointerValue /* Windows.Win32.Graphics.Gdi.HBRUSH */ {
  return libGDI32_dll.CreateDIBPatternBrushPt(util.toPointer(lpPackedDIB), iUsage);
}

export function CreateEllipticRgn(
  x1: number /* i32 */,
  y1: number /* i32 */,
  x2: number /* i32 */,
  y2: number /* i32 */,
): Deno.PointerValue /* Windows.Win32.Graphics.Gdi.HRGN */ {
  return libGDI32_dll.CreateEllipticRgn(x1, y1, x2, y2);
}

export function CreateEllipticRgnIndirect(
  lprect: Deno.PointerValue | Uint8Array /* ptr */,
): Deno.PointerValue /* Windows.Win32.Graphics.Gdi.HRGN */ {
  return libGDI32_dll.CreateEllipticRgnIndirect(util.toPointer(lprect));
}

export function CreateFontIndirectA(
  lplf: Deno.PointerValue | Uint8Array /* ptr */,
): Deno.PointerValue /* Windows.Win32.Graphics.Gdi.HFONT */ {
  return libGDI32_dll.CreateFontIndirectA(util.toPointer(lplf));
}

export function CreateFontIndirectW(
  lplf: Deno.PointerValue | Uint8Array /* ptr */,
): Deno.PointerValue /* Windows.Win32.Graphics.Gdi.HFONT */ {
  return libGDI32_dll.CreateFontIndirectW(util.toPointer(lplf));
}

export function CreateFontA(
  cHeight: number /* i32 */,
  cWidth: number /* i32 */,
  cEscapement: number /* i32 */,
  cOrientation: number /* i32 */,
  cWeight: number /* i32 */,
  bItalic: number /* u32 */,
  bUnderline: number /* u32 */,
  bStrikeOut: number /* u32 */,
  iCharSet: number /* u32 */,
  iOutPrecision: number /* u32 */,
  iClipPrecision: number /* u32 */,
  iQuality: number /* u32 */,
  iPitchAndFamily: number /* u32 */,
  pszFaceName: string | null | Uint8Array /* Windows.Win32.Foundation.PSTR */,
): Deno.PointerValue /* Windows.Win32.Graphics.Gdi.HFONT */ {
  return libGDI32_dll.CreateFontA(cHeight, cWidth, cEscapement, cOrientation, cWeight, bItalic, bUnderline, bStrikeOut, iCharSet, iOutPrecision, iClipPrecision, iQuality, iPitchAndFamily, util.pstrToFfi(pszFaceName));
}

export function CreateFontW(
  cHeight: number /* i32 */,
  cWidth: number /* i32 */,
  cEscapement: number /* i32 */,
  cOrientation: number /* i32 */,
  cWeight: number /* i32 */,
  bItalic: number /* u32 */,
  bUnderline: number /* u32 */,
  bStrikeOut: number /* u32 */,
  iCharSet: number /* u32 */,
  iOutPrecision: number /* u32 */,
  iClipPrecision: number /* u32 */,
  iQuality: number /* u32 */,
  iPitchAndFamily: number /* u32 */,
  pszFaceName: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
): Deno.PointerValue /* Windows.Win32.Graphics.Gdi.HFONT */ {
  return libGDI32_dll.CreateFontW(cHeight, cWidth, cEscapement, cOrientation, cWeight, bItalic, bUnderline, bStrikeOut, iCharSet, iOutPrecision, iClipPrecision, iQuality, iPitchAndFamily, util.pwstrToFfi(pszFaceName));
}

export function CreateHatchBrush(
  iHatch: HATCH_BRUSH_STYLE /* Windows.Win32.Graphics.Gdi.HATCH_BRUSH_STYLE */,
  color: Uint8Array | Deno.PointerValue /* Windows.Win32.Foundation.COLORREF */,
): Deno.PointerValue /* Windows.Win32.Graphics.Gdi.HBRUSH */ {
  return libGDI32_dll.CreateHatchBrush(iHatch, util.toPointer(color));
}

export function CreateICA(
  pszDriver: string | null | Uint8Array /* Windows.Win32.Foundation.PSTR */,
  pszDevice: string | null | Uint8Array /* Windows.Win32.Foundation.PSTR */,
  pszPort: string | null | Uint8Array /* Windows.Win32.Foundation.PSTR */,
  pdm: Deno.PointerValue | Uint8Array /* ptr */,
): Deno.PointerValue /* Windows.Win32.Graphics.Gdi.CreatedHDC */ {
  return libGDI32_dll.CreateICA(util.pstrToFfi(pszDriver), util.pstrToFfi(pszDevice), util.pstrToFfi(pszPort), util.toPointer(pdm));
}

export function CreateICW(
  pszDriver: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  pszDevice: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  pszPort: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  pdm: Deno.PointerValue | Uint8Array /* ptr */,
): Deno.PointerValue /* Windows.Win32.Graphics.Gdi.CreatedHDC */ {
  return libGDI32_dll.CreateICW(util.pwstrToFfi(pszDriver), util.pwstrToFfi(pszDevice), util.pwstrToFfi(pszPort), util.toPointer(pdm));
}

export function CreateMetaFileA(
  pszFile: string | null | Uint8Array /* Windows.Win32.Foundation.PSTR */,
): Deno.PointerValue /* Windows.Win32.Graphics.Gdi.HdcMetdataFileHandle */ {
  return libGDI32_dll.CreateMetaFileA(util.pstrToFfi(pszFile));
}

export function CreateMetaFileW(
  pszFile: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
): Deno.PointerValue /* Windows.Win32.Graphics.Gdi.HdcMetdataFileHandle */ {
  return libGDI32_dll.CreateMetaFileW(util.pwstrToFfi(pszFile));
}

export function CreatePalette(
  plpal: Deno.PointerValue | Uint8Array /* ptr */,
): Deno.PointerValue /* Windows.Win32.Graphics.Gdi.HPALETTE */ {
  return libGDI32_dll.CreatePalette(util.toPointer(plpal));
}

export function CreatePen(
  iStyle: PEN_STYLE /* Windows.Win32.Graphics.Gdi.PEN_STYLE */,
  cWidth: number /* i32 */,
  color: Uint8Array | Deno.PointerValue /* Windows.Win32.Foundation.COLORREF */,
): Deno.PointerValue /* Windows.Win32.Graphics.Gdi.HPEN */ {
  return libGDI32_dll.CreatePen(iStyle, cWidth, util.toPointer(color));
}

export function CreatePenIndirect(
  plpen: Deno.PointerValue | Uint8Array /* ptr */,
): Deno.PointerValue /* Windows.Win32.Graphics.Gdi.HPEN */ {
  return libGDI32_dll.CreatePenIndirect(util.toPointer(plpen));
}

export function CreatePolyPolygonRgn(
  pptl: Deno.PointerValue | Uint8Array /* ptr */,
  pc: Deno.PointerValue | Uint8Array /* ptr */,
  cPoly: number /* i32 */,
  iMode: CREATE_POLYGON_RGN_MODE /* Windows.Win32.Graphics.Gdi.CREATE_POLYGON_RGN_MODE */,
): Deno.PointerValue /* Windows.Win32.Graphics.Gdi.HRGN */ {
  return libGDI32_dll.CreatePolyPolygonRgn(util.toPointer(pptl), util.toPointer(pc), cPoly, iMode);
}

export function CreatePatternBrush(
  hbm: Uint8Array | Deno.PointerValue /* Windows.Win32.Graphics.Gdi.HBITMAP */,
): Deno.PointerValue /* Windows.Win32.Graphics.Gdi.HBRUSH */ {
  return libGDI32_dll.CreatePatternBrush(util.toPointer(hbm));
}

export function CreateRectRgn(
  x1: number /* i32 */,
  y1: number /* i32 */,
  x2: number /* i32 */,
  y2: number /* i32 */,
): Deno.PointerValue /* Windows.Win32.Graphics.Gdi.HRGN */ {
  return libGDI32_dll.CreateRectRgn(x1, y1, x2, y2);
}

export function CreateRectRgnIndirect(
  lprect: Deno.PointerValue | Uint8Array /* ptr */,
): Deno.PointerValue /* Windows.Win32.Graphics.Gdi.HRGN */ {
  return libGDI32_dll.CreateRectRgnIndirect(util.toPointer(lprect));
}

export function CreateRoundRectRgn(
  x1: number /* i32 */,
  y1: number /* i32 */,
  x2: number /* i32 */,
  y2: number /* i32 */,
  w: number /* i32 */,
  h: number /* i32 */,
): Deno.PointerValue /* Windows.Win32.Graphics.Gdi.HRGN */ {
  return libGDI32_dll.CreateRoundRectRgn(x1, y1, x2, y2, w, h);
}

export function CreateScalableFontResourceA(
  fdwHidden: number /* u32 */,
  lpszFont: string | null | Uint8Array /* Windows.Win32.Foundation.PSTR */,
  lpszFile: string | null | Uint8Array /* Windows.Win32.Foundation.PSTR */,
  lpszPath: string | null | Uint8Array /* Windows.Win32.Foundation.PSTR */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libGDI32_dll.CreateScalableFontResourceA(fdwHidden, util.pstrToFfi(lpszFont), util.pstrToFfi(lpszFile), util.pstrToFfi(lpszPath)));
}

export function CreateScalableFontResourceW(
  fdwHidden: number /* u32 */,
  lpszFont: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  lpszFile: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  lpszPath: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libGDI32_dll.CreateScalableFontResourceW(fdwHidden, util.pwstrToFfi(lpszFont), util.pwstrToFfi(lpszFile), util.pwstrToFfi(lpszPath)));
}

export function CreateSolidBrush(
  color: Uint8Array | Deno.PointerValue /* Windows.Win32.Foundation.COLORREF */,
): Deno.PointerValue /* Windows.Win32.Graphics.Gdi.HBRUSH */ {
  return libGDI32_dll.CreateSolidBrush(util.toPointer(color));
}

export function DeleteDC(
  hdc: Uint8Array | Deno.PointerValue /* Windows.Win32.Graphics.Gdi.CreatedHDC */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libGDI32_dll.DeleteDC(util.toPointer(hdc)));
}

export function DeleteMetaFile(
  hmf: Uint8Array | Deno.PointerValue /* Windows.Win32.Graphics.Gdi.HMETAFILE */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libGDI32_dll.DeleteMetaFile(util.toPointer(hmf)));
}

export function DeleteObject(
  ho: Uint8Array | Deno.PointerValue /* Windows.Win32.Graphics.Gdi.HGDIOBJ */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libGDI32_dll.DeleteObject(util.toPointer(ho)));
}

export function DrawEscape(
  hdc: Uint8Array | Deno.PointerValue /* Windows.Win32.Graphics.Gdi.HDC */,
  iEscape: number /* i32 */,
  cjIn: number /* i32 */,
  lpIn: string | null | Uint8Array /* Windows.Win32.Foundation.PSTR */,
): number /* i32 */ {
  return libGDI32_dll.DrawEscape(util.toPointer(hdc), iEscape, cjIn, util.pstrToFfi(lpIn));
}

export function Ellipse(
  hdc: Uint8Array | Deno.PointerValue /* Windows.Win32.Graphics.Gdi.HDC */,
  left: number /* i32 */,
  top: number /* i32 */,
  right: number /* i32 */,
  bottom: number /* i32 */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libGDI32_dll.Ellipse(util.toPointer(hdc), left, top, right, bottom));
}

export function EnumFontFamiliesExA(
  hdc: Uint8Array | Deno.PointerValue /* Windows.Win32.Graphics.Gdi.HDC */,
  lpLogfont: Deno.PointerValue | Uint8Array /* ptr */,
  lpProc: Uint8Array | Deno.PointerValue /* Windows.Win32.Graphics.Gdi.FONTENUMPROCA */,
  lParam: Uint8Array | Deno.PointerValue /* Windows.Win32.Foundation.LPARAM */,
  dwFlags: number /* u32 */,
): number /* i32 */ {
  return libGDI32_dll.EnumFontFamiliesExA(util.toPointer(hdc), util.toPointer(lpLogfont), util.toPointer(lpProc), util.toPointer(lParam), dwFlags);
}

export function EnumFontFamiliesExW(
  hdc: Uint8Array | Deno.PointerValue /* Windows.Win32.Graphics.Gdi.HDC */,
  lpLogfont: Deno.PointerValue | Uint8Array /* ptr */,
  lpProc: Uint8Array | Deno.PointerValue /* Windows.Win32.Graphics.Gdi.FONTENUMPROCW */,
  lParam: Uint8Array | Deno.PointerValue /* Windows.Win32.Foundation.LPARAM */,
  dwFlags: number /* u32 */,
): number /* i32 */ {
  return libGDI32_dll.EnumFontFamiliesExW(util.toPointer(hdc), util.toPointer(lpLogfont), util.toPointer(lpProc), util.toPointer(lParam), dwFlags);
}

export function EnumFontFamiliesA(
  hdc: Uint8Array | Deno.PointerValue /* Windows.Win32.Graphics.Gdi.HDC */,
  lpLogfont: string | null | Uint8Array /* Windows.Win32.Foundation.PSTR */,
  lpProc: Uint8Array | Deno.PointerValue /* Windows.Win32.Graphics.Gdi.FONTENUMPROCA */,
  lParam: Uint8Array | Deno.PointerValue /* Windows.Win32.Foundation.LPARAM */,
): number /* i32 */ {
  return libGDI32_dll.EnumFontFamiliesA(util.toPointer(hdc), util.pstrToFfi(lpLogfont), util.toPointer(lpProc), util.toPointer(lParam));
}

export function EnumFontFamiliesW(
  hdc: Uint8Array | Deno.PointerValue /* Windows.Win32.Graphics.Gdi.HDC */,
  lpLogfont: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  lpProc: Uint8Array | Deno.PointerValue /* Windows.Win32.Graphics.Gdi.FONTENUMPROCW */,
  lParam: Uint8Array | Deno.PointerValue /* Windows.Win32.Foundation.LPARAM */,
): number /* i32 */ {
  return libGDI32_dll.EnumFontFamiliesW(util.toPointer(hdc), util.pwstrToFfi(lpLogfont), util.toPointer(lpProc), util.toPointer(lParam));
}

export function EnumFontsA(
  hdc: Uint8Array | Deno.PointerValue /* Windows.Win32.Graphics.Gdi.HDC */,
  lpLogfont: string | null | Uint8Array /* Windows.Win32.Foundation.PSTR */,
  lpProc: Uint8Array | Deno.PointerValue /* Windows.Win32.Graphics.Gdi.FONTENUMPROCA */,
  lParam: Uint8Array | Deno.PointerValue /* Windows.Win32.Foundation.LPARAM */,
): number /* i32 */ {
  return libGDI32_dll.EnumFontsA(util.toPointer(hdc), util.pstrToFfi(lpLogfont), util.toPointer(lpProc), util.toPointer(lParam));
}

export function EnumFontsW(
  hdc: Uint8Array | Deno.PointerValue /* Windows.Win32.Graphics.Gdi.HDC */,
  lpLogfont: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  lpProc: Uint8Array | Deno.PointerValue /* Windows.Win32.Graphics.Gdi.FONTENUMPROCW */,
  lParam: Uint8Array | Deno.PointerValue /* Windows.Win32.Foundation.LPARAM */,
): number /* i32 */ {
  return libGDI32_dll.EnumFontsW(util.toPointer(hdc), util.pwstrToFfi(lpLogfont), util.toPointer(lpProc), util.toPointer(lParam));
}

export function EnumObjects(
  hdc: Uint8Array | Deno.PointerValue /* Windows.Win32.Graphics.Gdi.HDC */,
  nType: OBJ_TYPE /* Windows.Win32.Graphics.Gdi.OBJ_TYPE */,
  lpFunc: Uint8Array | Deno.PointerValue /* Windows.Win32.Graphics.Gdi.GOBJENUMPROC */,
  lParam: Uint8Array | Deno.PointerValue /* Windows.Win32.Foundation.LPARAM */,
): number /* i32 */ {
  return libGDI32_dll.EnumObjects(util.toPointer(hdc), nType, util.toPointer(lpFunc), util.toPointer(lParam));
}

export function EqualRgn(
  hrgn1: Uint8Array | Deno.PointerValue /* Windows.Win32.Graphics.Gdi.HRGN */,
  hrgn2: Uint8Array | Deno.PointerValue /* Windows.Win32.Graphics.Gdi.HRGN */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libGDI32_dll.EqualRgn(util.toPointer(hrgn1), util.toPointer(hrgn2)));
}

export function ExcludeClipRect(
  hdc: Uint8Array | Deno.PointerValue /* Windows.Win32.Graphics.Gdi.HDC */,
  left: number /* i32 */,
  top: number /* i32 */,
  right: number /* i32 */,
  bottom: number /* i32 */,
): GDI_REGION_TYPE /* Windows.Win32.Graphics.Gdi.GDI_REGION_TYPE */ {
  return libGDI32_dll.ExcludeClipRect(util.toPointer(hdc), left, top, right, bottom);
}

export function ExtCreateRegion(
  lpx: Deno.PointerValue | Uint8Array /* ptr */,
  nCount: number /* u32 */,
  lpData: Deno.PointerValue | Uint8Array /* ptr */,
): Deno.PointerValue /* Windows.Win32.Graphics.Gdi.HRGN */ {
  return libGDI32_dll.ExtCreateRegion(util.toPointer(lpx), nCount, util.toPointer(lpData));
}

export function ExtFloodFill(
  hdc: Uint8Array | Deno.PointerValue /* Windows.Win32.Graphics.Gdi.HDC */,
  x: number /* i32 */,
  y: number /* i32 */,
  color: Uint8Array | Deno.PointerValue /* Windows.Win32.Foundation.COLORREF */,
  type: EXT_FLOOD_FILL_TYPE /* Windows.Win32.Graphics.Gdi.EXT_FLOOD_FILL_TYPE */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libGDI32_dll.ExtFloodFill(util.toPointer(hdc), x, y, util.toPointer(color), type));
}

export function FillRgn(
  hdc: Uint8Array | Deno.PointerValue /* Windows.Win32.Graphics.Gdi.HDC */,
  hrgn: Uint8Array | Deno.PointerValue /* Windows.Win32.Graphics.Gdi.HRGN */,
  hbr: Uint8Array | Deno.PointerValue /* Windows.Win32.Graphics.Gdi.HBRUSH */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libGDI32_dll.FillRgn(util.toPointer(hdc), util.toPointer(hrgn), util.toPointer(hbr)));
}

export function FloodFill(
  hdc: Uint8Array | Deno.PointerValue /* Windows.Win32.Graphics.Gdi.HDC */,
  x: number /* i32 */,
  y: number /* i32 */,
  color: Uint8Array | Deno.PointerValue /* Windows.Win32.Foundation.COLORREF */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libGDI32_dll.FloodFill(util.toPointer(hdc), x, y, util.toPointer(color)));
}

export function FrameRgn(
  hdc: Uint8Array | Deno.PointerValue /* Windows.Win32.Graphics.Gdi.HDC */,
  hrgn: Uint8Array | Deno.PointerValue /* Windows.Win32.Graphics.Gdi.HRGN */,
  hbr: Uint8Array | Deno.PointerValue /* Windows.Win32.Graphics.Gdi.HBRUSH */,
  w: number /* i32 */,
  h: number /* i32 */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libGDI32_dll.FrameRgn(util.toPointer(hdc), util.toPointer(hrgn), util.toPointer(hbr), w, h));
}

export function GetROP2(
  hdc: Uint8Array | Deno.PointerValue /* Windows.Win32.Graphics.Gdi.HDC */,
): R2_MODE /* Windows.Win32.Graphics.Gdi.R2_MODE */ {
  return libGDI32_dll.GetROP2(util.toPointer(hdc));
}

export function GetAspectRatioFilterEx(
  hdc: Uint8Array | Deno.PointerValue /* Windows.Win32.Graphics.Gdi.HDC */,
  lpsize: Deno.PointerValue | Uint8Array /* ptr */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libGDI32_dll.GetAspectRatioFilterEx(util.toPointer(hdc), util.toPointer(lpsize)));
}

export function GetBkColor(
  hdc: Uint8Array | Deno.PointerValue /* Windows.Win32.Graphics.Gdi.HDC */,
): Deno.PointerValue /* Windows.Win32.Foundation.COLORREF */ {
  return libGDI32_dll.GetBkColor(util.toPointer(hdc));
}

export function GetDCBrushColor(
  hdc: Uint8Array | Deno.PointerValue /* Windows.Win32.Graphics.Gdi.HDC */,
): Deno.PointerValue /* Windows.Win32.Foundation.COLORREF */ {
  return libGDI32_dll.GetDCBrushColor(util.toPointer(hdc));
}

export function GetDCPenColor(
  hdc: Uint8Array | Deno.PointerValue /* Windows.Win32.Graphics.Gdi.HDC */,
): Deno.PointerValue /* Windows.Win32.Foundation.COLORREF */ {
  return libGDI32_dll.GetDCPenColor(util.toPointer(hdc));
}

export function GetBkMode(
  hdc: Uint8Array | Deno.PointerValue /* Windows.Win32.Graphics.Gdi.HDC */,
): BACKGROUND_MODE /* Windows.Win32.Graphics.Gdi.BACKGROUND_MODE */ {
  return libGDI32_dll.GetBkMode(util.toPointer(hdc));
}

export function GetBitmapBits(
  hbit: Uint8Array | Deno.PointerValue /* Windows.Win32.Graphics.Gdi.HBITMAP */,
  cb: number /* i32 */,
  lpvBits: Deno.PointerValue | Uint8Array /* ptr */,
): number /* i32 */ {
  return libGDI32_dll.GetBitmapBits(util.toPointer(hbit), cb, util.toPointer(lpvBits));
}

export function GetBitmapDimensionEx(
  hbit: Uint8Array | Deno.PointerValue /* Windows.Win32.Graphics.Gdi.HBITMAP */,
  lpsize: Deno.PointerValue | Uint8Array /* ptr */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libGDI32_dll.GetBitmapDimensionEx(util.toPointer(hbit), util.toPointer(lpsize)));
}

export function GetBoundsRect(
  hdc: Uint8Array | Deno.PointerValue /* Windows.Win32.Graphics.Gdi.HDC */,
  lprect: Deno.PointerValue | Uint8Array /* ptr */,
  flags: number /* u32 */,
): number /* u32 */ {
  return libGDI32_dll.GetBoundsRect(util.toPointer(hdc), util.toPointer(lprect), flags);
}

export function GetBrushOrgEx(
  hdc: Uint8Array | Deno.PointerValue /* Windows.Win32.Graphics.Gdi.HDC */,
  lppt: Deno.PointerValue | Uint8Array /* ptr */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libGDI32_dll.GetBrushOrgEx(util.toPointer(hdc), util.toPointer(lppt)));
}

export function GetCharWidthA(
  hdc: Uint8Array | Deno.PointerValue /* Windows.Win32.Graphics.Gdi.HDC */,
  iFirst: number /* u32 */,
  iLast: number /* u32 */,
  lpBuffer: Deno.PointerValue | Uint8Array /* ptr */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libGDI32_dll.GetCharWidthA(util.toPointer(hdc), iFirst, iLast, util.toPointer(lpBuffer)));
}

export function GetCharWidthW(
  hdc: Uint8Array | Deno.PointerValue /* Windows.Win32.Graphics.Gdi.HDC */,
  iFirst: number /* u32 */,
  iLast: number /* u32 */,
  lpBuffer: Deno.PointerValue | Uint8Array /* ptr */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libGDI32_dll.GetCharWidthW(util.toPointer(hdc), iFirst, iLast, util.toPointer(lpBuffer)));
}

export function GetCharWidth32A(
  hdc: Uint8Array | Deno.PointerValue /* Windows.Win32.Graphics.Gdi.HDC */,
  iFirst: number /* u32 */,
  iLast: number /* u32 */,
  lpBuffer: Deno.PointerValue | Uint8Array /* ptr */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libGDI32_dll.GetCharWidth32A(util.toPointer(hdc), iFirst, iLast, util.toPointer(lpBuffer)));
}

export function GetCharWidth32W(
  hdc: Uint8Array | Deno.PointerValue /* Windows.Win32.Graphics.Gdi.HDC */,
  iFirst: number /* u32 */,
  iLast: number /* u32 */,
  lpBuffer: Deno.PointerValue | Uint8Array /* ptr */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libGDI32_dll.GetCharWidth32W(util.toPointer(hdc), iFirst, iLast, util.toPointer(lpBuffer)));
}

export function GetCharWidthFloatA(
  hdc: Uint8Array | Deno.PointerValue /* Windows.Win32.Graphics.Gdi.HDC */,
  iFirst: number /* u32 */,
  iLast: number /* u32 */,
  lpBuffer: Deno.PointerValue | Uint8Array /* ptr */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libGDI32_dll.GetCharWidthFloatA(util.toPointer(hdc), iFirst, iLast, util.toPointer(lpBuffer)));
}

export function GetCharWidthFloatW(
  hdc: Uint8Array | Deno.PointerValue /* Windows.Win32.Graphics.Gdi.HDC */,
  iFirst: number /* u32 */,
  iLast: number /* u32 */,
  lpBuffer: Deno.PointerValue | Uint8Array /* ptr */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libGDI32_dll.GetCharWidthFloatW(util.toPointer(hdc), iFirst, iLast, util.toPointer(lpBuffer)));
}

export function GetCharABCWidthsA(
  hdc: Uint8Array | Deno.PointerValue /* Windows.Win32.Graphics.Gdi.HDC */,
  wFirst: number /* u32 */,
  wLast: number /* u32 */,
  lpABC: Deno.PointerValue | Uint8Array /* ptr */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libGDI32_dll.GetCharABCWidthsA(util.toPointer(hdc), wFirst, wLast, util.toPointer(lpABC)));
}

export function GetCharABCWidthsW(
  hdc: Uint8Array | Deno.PointerValue /* Windows.Win32.Graphics.Gdi.HDC */,
  wFirst: number /* u32 */,
  wLast: number /* u32 */,
  lpABC: Deno.PointerValue | Uint8Array /* ptr */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libGDI32_dll.GetCharABCWidthsW(util.toPointer(hdc), wFirst, wLast, util.toPointer(lpABC)));
}

export function GetCharABCWidthsFloatA(
  hdc: Uint8Array | Deno.PointerValue /* Windows.Win32.Graphics.Gdi.HDC */,
  iFirst: number /* u32 */,
  iLast: number /* u32 */,
  lpABC: Deno.PointerValue | Uint8Array /* ptr */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libGDI32_dll.GetCharABCWidthsFloatA(util.toPointer(hdc), iFirst, iLast, util.toPointer(lpABC)));
}

export function GetCharABCWidthsFloatW(
  hdc: Uint8Array | Deno.PointerValue /* Windows.Win32.Graphics.Gdi.HDC */,
  iFirst: number /* u32 */,
  iLast: number /* u32 */,
  lpABC: Deno.PointerValue | Uint8Array /* ptr */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libGDI32_dll.GetCharABCWidthsFloatW(util.toPointer(hdc), iFirst, iLast, util.toPointer(lpABC)));
}

export function GetClipBox(
  hdc: Uint8Array | Deno.PointerValue /* Windows.Win32.Graphics.Gdi.HDC */,
  lprect: Deno.PointerValue | Uint8Array /* ptr */,
): GDI_REGION_TYPE /* Windows.Win32.Graphics.Gdi.GDI_REGION_TYPE */ {
  return libGDI32_dll.GetClipBox(util.toPointer(hdc), util.toPointer(lprect));
}

export function GetClipRgn(
  hdc: Uint8Array | Deno.PointerValue /* Windows.Win32.Graphics.Gdi.HDC */,
  hrgn: Uint8Array | Deno.PointerValue /* Windows.Win32.Graphics.Gdi.HRGN */,
): number /* i32 */ {
  return libGDI32_dll.GetClipRgn(util.toPointer(hdc), util.toPointer(hrgn));
}

export function GetMetaRgn(
  hdc: Uint8Array | Deno.PointerValue /* Windows.Win32.Graphics.Gdi.HDC */,
  hrgn: Uint8Array | Deno.PointerValue /* Windows.Win32.Graphics.Gdi.HRGN */,
): number /* i32 */ {
  return libGDI32_dll.GetMetaRgn(util.toPointer(hdc), util.toPointer(hrgn));
}

export function GetCurrentObject(
  hdc: Uint8Array | Deno.PointerValue /* Windows.Win32.Graphics.Gdi.HDC */,
  type: OBJ_TYPE /* Windows.Win32.Graphics.Gdi.OBJ_TYPE */,
): Deno.PointerValue /* Windows.Win32.Graphics.Gdi.HGDIOBJ */ {
  return libGDI32_dll.GetCurrentObject(util.toPointer(hdc), type);
}

export function GetCurrentPositionEx(
  hdc: Uint8Array | Deno.PointerValue /* Windows.Win32.Graphics.Gdi.HDC */,
  lppt: Deno.PointerValue | Uint8Array /* ptr */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libGDI32_dll.GetCurrentPositionEx(util.toPointer(hdc), util.toPointer(lppt)));
}

export function GetDeviceCaps(
  hdc: Uint8Array | Deno.PointerValue /* Windows.Win32.Graphics.Gdi.HDC */,
  index: GET_DEVICE_CAPS_INDEX /* Windows.Win32.Graphics.Gdi.GET_DEVICE_CAPS_INDEX */,
): number /* i32 */ {
  return libGDI32_dll.GetDeviceCaps(util.toPointer(hdc), index);
}

export function GetDIBits(
  hdc: Uint8Array | Deno.PointerValue /* Windows.Win32.Graphics.Gdi.HDC */,
  hbm: Uint8Array | Deno.PointerValue /* Windows.Win32.Graphics.Gdi.HBITMAP */,
  start: number /* u32 */,
  cLines: number /* u32 */,
  lpvBits: Deno.PointerValue | Uint8Array /* ptr */,
  lpbmi: Deno.PointerValue | Uint8Array /* ptr */,
  usage: DIB_USAGE /* Windows.Win32.Graphics.Gdi.DIB_USAGE */,
): number /* i32 */ {
  return libGDI32_dll.GetDIBits(util.toPointer(hdc), util.toPointer(hbm), start, cLines, util.toPointer(lpvBits), util.toPointer(lpbmi), usage);
}

export function GetFontData(
  hdc: Uint8Array | Deno.PointerValue /* Windows.Win32.Graphics.Gdi.HDC */,
  dwTable: number /* u32 */,
  dwOffset: number /* u32 */,
  pvBuffer: Deno.PointerValue | Uint8Array /* ptr */,
  cjBuffer: number /* u32 */,
): number /* u32 */ {
  return libGDI32_dll.GetFontData(util.toPointer(hdc), dwTable, dwOffset, util.toPointer(pvBuffer), cjBuffer);
}

export function GetGlyphOutlineA(
  hdc: Uint8Array | Deno.PointerValue /* Windows.Win32.Graphics.Gdi.HDC */,
  uChar: number /* u32 */,
  fuFormat: GET_GLYPH_OUTLINE_FORMAT /* Windows.Win32.Graphics.Gdi.GET_GLYPH_OUTLINE_FORMAT */,
  lpgm: Deno.PointerValue | Uint8Array /* ptr */,
  cjBuffer: number /* u32 */,
  pvBuffer: Deno.PointerValue | Uint8Array /* ptr */,
  lpmat2: Deno.PointerValue | Uint8Array /* ptr */,
): number /* u32 */ {
  return libGDI32_dll.GetGlyphOutlineA(util.toPointer(hdc), uChar, fuFormat, util.toPointer(lpgm), cjBuffer, util.toPointer(pvBuffer), util.toPointer(lpmat2));
}

export function GetGlyphOutlineW(
  hdc: Uint8Array | Deno.PointerValue /* Windows.Win32.Graphics.Gdi.HDC */,
  uChar: number /* u32 */,
  fuFormat: GET_GLYPH_OUTLINE_FORMAT /* Windows.Win32.Graphics.Gdi.GET_GLYPH_OUTLINE_FORMAT */,
  lpgm: Deno.PointerValue | Uint8Array /* ptr */,
  cjBuffer: number /* u32 */,
  pvBuffer: Deno.PointerValue | Uint8Array /* ptr */,
  lpmat2: Deno.PointerValue | Uint8Array /* ptr */,
): number /* u32 */ {
  return libGDI32_dll.GetGlyphOutlineW(util.toPointer(hdc), uChar, fuFormat, util.toPointer(lpgm), cjBuffer, util.toPointer(pvBuffer), util.toPointer(lpmat2));
}

export function GetGraphicsMode(
  hdc: Uint8Array | Deno.PointerValue /* Windows.Win32.Graphics.Gdi.HDC */,
): number /* i32 */ {
  return libGDI32_dll.GetGraphicsMode(util.toPointer(hdc));
}

export function GetMapMode(
  hdc: Uint8Array | Deno.PointerValue /* Windows.Win32.Graphics.Gdi.HDC */,
): HDC_MAP_MODE /* Windows.Win32.Graphics.Gdi.HDC_MAP_MODE */ {
  return libGDI32_dll.GetMapMode(util.toPointer(hdc));
}

export function GetMetaFileBitsEx(
  hMF: Uint8Array | Deno.PointerValue /* Windows.Win32.Graphics.Gdi.HMETAFILE */,
  cbBuffer: number /* u32 */,
  lpData: Deno.PointerValue | Uint8Array /* ptr */,
): number /* u32 */ {
  return libGDI32_dll.GetMetaFileBitsEx(util.toPointer(hMF), cbBuffer, util.toPointer(lpData));
}

export function GetMetaFileA(
  lpName: string | null | Uint8Array /* Windows.Win32.Foundation.PSTR */,
): Deno.PointerValue /* Windows.Win32.Graphics.Gdi.HMETAFILE */ {
  return libGDI32_dll.GetMetaFileA(util.pstrToFfi(lpName));
}

export function GetMetaFileW(
  lpName: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
): Deno.PointerValue /* Windows.Win32.Graphics.Gdi.HMETAFILE */ {
  return libGDI32_dll.GetMetaFileW(util.pwstrToFfi(lpName));
}

export function GetNearestColor(
  hdc: Uint8Array | Deno.PointerValue /* Windows.Win32.Graphics.Gdi.HDC */,
  color: Uint8Array | Deno.PointerValue /* Windows.Win32.Foundation.COLORREF */,
): Deno.PointerValue /* Windows.Win32.Foundation.COLORREF */ {
  return libGDI32_dll.GetNearestColor(util.toPointer(hdc), util.toPointer(color));
}

export function GetNearestPaletteIndex(
  h: Uint8Array | Deno.PointerValue /* Windows.Win32.Graphics.Gdi.HPALETTE */,
  color: Uint8Array | Deno.PointerValue /* Windows.Win32.Foundation.COLORREF */,
): number /* u32 */ {
  return libGDI32_dll.GetNearestPaletteIndex(util.toPointer(h), util.toPointer(color));
}

export function GetObjectType(
  h: Uint8Array | Deno.PointerValue /* Windows.Win32.Graphics.Gdi.HGDIOBJ */,
): number /* u32 */ {
  return libGDI32_dll.GetObjectType(util.toPointer(h));
}

export function GetOutlineTextMetricsA(
  hdc: Uint8Array | Deno.PointerValue /* Windows.Win32.Graphics.Gdi.HDC */,
  cjCopy: number /* u32 */,
  potm: Deno.PointerValue | Uint8Array /* ptr */,
): number /* u32 */ {
  return libGDI32_dll.GetOutlineTextMetricsA(util.toPointer(hdc), cjCopy, util.toPointer(potm));
}

export function GetOutlineTextMetricsW(
  hdc: Uint8Array | Deno.PointerValue /* Windows.Win32.Graphics.Gdi.HDC */,
  cjCopy: number /* u32 */,
  potm: Deno.PointerValue | Uint8Array /* ptr */,
): number /* u32 */ {
  return libGDI32_dll.GetOutlineTextMetricsW(util.toPointer(hdc), cjCopy, util.toPointer(potm));
}

export function GetPaletteEntries(
  hpal: Uint8Array | Deno.PointerValue /* Windows.Win32.Graphics.Gdi.HPALETTE */,
  iStart: number /* u32 */,
  cEntries: number /* u32 */,
  pPalEntries: Deno.PointerValue | Uint8Array /* ptr */,
): number /* u32 */ {
  return libGDI32_dll.GetPaletteEntries(util.toPointer(hpal), iStart, cEntries, util.toPointer(pPalEntries));
}

export function GetPixel(
  hdc: Uint8Array | Deno.PointerValue /* Windows.Win32.Graphics.Gdi.HDC */,
  x: number /* i32 */,
  y: number /* i32 */,
): Deno.PointerValue /* Windows.Win32.Foundation.COLORREF */ {
  return libGDI32_dll.GetPixel(util.toPointer(hdc), x, y);
}

export function GetPolyFillMode(
  hdc: Uint8Array | Deno.PointerValue /* Windows.Win32.Graphics.Gdi.HDC */,
): number /* i32 */ {
  return libGDI32_dll.GetPolyFillMode(util.toPointer(hdc));
}

export function GetRasterizerCaps(
  lpraststat: Deno.PointerValue | Uint8Array /* ptr */,
  cjBytes: number /* u32 */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libGDI32_dll.GetRasterizerCaps(util.toPointer(lpraststat), cjBytes));
}

export function GetRandomRgn(
  hdc: Uint8Array | Deno.PointerValue /* Windows.Win32.Graphics.Gdi.HDC */,
  hrgn: Uint8Array | Deno.PointerValue /* Windows.Win32.Graphics.Gdi.HRGN */,
  i: number /* i32 */,
): number /* i32 */ {
  return libGDI32_dll.GetRandomRgn(util.toPointer(hdc), util.toPointer(hrgn), i);
}

export function GetRegionData(
  hrgn: Uint8Array | Deno.PointerValue /* Windows.Win32.Graphics.Gdi.HRGN */,
  nCount: number /* u32 */,
  lpRgnData: Deno.PointerValue | Uint8Array /* ptr */,
): number /* u32 */ {
  return libGDI32_dll.GetRegionData(util.toPointer(hrgn), nCount, util.toPointer(lpRgnData));
}

export function GetRgnBox(
  hrgn: Uint8Array | Deno.PointerValue /* Windows.Win32.Graphics.Gdi.HRGN */,
  lprc: Deno.PointerValue | Uint8Array /* ptr */,
): GDI_REGION_TYPE /* Windows.Win32.Graphics.Gdi.GDI_REGION_TYPE */ {
  return libGDI32_dll.GetRgnBox(util.toPointer(hrgn), util.toPointer(lprc));
}

export function GetStockObject(
  i: GET_STOCK_OBJECT_FLAGS /* Windows.Win32.Graphics.Gdi.GET_STOCK_OBJECT_FLAGS */,
): Deno.PointerValue /* Windows.Win32.Graphics.Gdi.HGDIOBJ */ {
  return libGDI32_dll.GetStockObject(i);
}

export function GetStretchBltMode(
  hdc: Uint8Array | Deno.PointerValue /* Windows.Win32.Graphics.Gdi.HDC */,
): number /* i32 */ {
  return libGDI32_dll.GetStretchBltMode(util.toPointer(hdc));
}

export function GetSystemPaletteEntries(
  hdc: Uint8Array | Deno.PointerValue /* Windows.Win32.Graphics.Gdi.HDC */,
  iStart: number /* u32 */,
  cEntries: number /* u32 */,
  pPalEntries: Deno.PointerValue | Uint8Array /* ptr */,
): number /* u32 */ {
  return libGDI32_dll.GetSystemPaletteEntries(util.toPointer(hdc), iStart, cEntries, util.toPointer(pPalEntries));
}

export function GetSystemPaletteUse(
  hdc: Uint8Array | Deno.PointerValue /* Windows.Win32.Graphics.Gdi.HDC */,
): number /* u32 */ {
  return libGDI32_dll.GetSystemPaletteUse(util.toPointer(hdc));
}

export function GetTextCharacterExtra(
  hdc: Uint8Array | Deno.PointerValue /* Windows.Win32.Graphics.Gdi.HDC */,
): number /* i32 */ {
  return libGDI32_dll.GetTextCharacterExtra(util.toPointer(hdc));
}

export function GetTextAlign(
  hdc: Uint8Array | Deno.PointerValue /* Windows.Win32.Graphics.Gdi.HDC */,
): TEXT_ALIGN_OPTIONS /* Windows.Win32.Graphics.Gdi.TEXT_ALIGN_OPTIONS */ {
  return libGDI32_dll.GetTextAlign(util.toPointer(hdc));
}

export function GetTextColor(
  hdc: Uint8Array | Deno.PointerValue /* Windows.Win32.Graphics.Gdi.HDC */,
): Deno.PointerValue /* Windows.Win32.Foundation.COLORREF */ {
  return libGDI32_dll.GetTextColor(util.toPointer(hdc));
}

export function GetTextExtentPointA(
  hdc: Uint8Array | Deno.PointerValue /* Windows.Win32.Graphics.Gdi.HDC */,
  lpString: string | null | Uint8Array /* Windows.Win32.Foundation.PSTR */,
  c: number /* i32 */,
  lpsz: Deno.PointerValue | Uint8Array /* ptr */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libGDI32_dll.GetTextExtentPointA(util.toPointer(hdc), util.pstrToFfi(lpString), c, util.toPointer(lpsz)));
}

export function GetTextExtentPointW(
  hdc: Uint8Array | Deno.PointerValue /* Windows.Win32.Graphics.Gdi.HDC */,
  lpString: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  c: number /* i32 */,
  lpsz: Deno.PointerValue | Uint8Array /* ptr */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libGDI32_dll.GetTextExtentPointW(util.toPointer(hdc), util.pwstrToFfi(lpString), c, util.toPointer(lpsz)));
}

export function GetTextExtentPoint32A(
  hdc: Uint8Array | Deno.PointerValue /* Windows.Win32.Graphics.Gdi.HDC */,
  lpString: string | null | Uint8Array /* Windows.Win32.Foundation.PSTR */,
  c: number /* i32 */,
  psizl: Deno.PointerValue | Uint8Array /* ptr */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libGDI32_dll.GetTextExtentPoint32A(util.toPointer(hdc), util.pstrToFfi(lpString), c, util.toPointer(psizl)));
}

export function GetTextExtentPoint32W(
  hdc: Uint8Array | Deno.PointerValue /* Windows.Win32.Graphics.Gdi.HDC */,
  lpString: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  c: number /* i32 */,
  psizl: Deno.PointerValue | Uint8Array /* ptr */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libGDI32_dll.GetTextExtentPoint32W(util.toPointer(hdc), util.pwstrToFfi(lpString), c, util.toPointer(psizl)));
}

export function GetTextExtentExPointA(
  hdc: Uint8Array | Deno.PointerValue /* Windows.Win32.Graphics.Gdi.HDC */,
  lpszString: string | null | Uint8Array /* Windows.Win32.Foundation.PSTR */,
  cchString: number /* i32 */,
  nMaxExtent: number /* i32 */,
  lpnFit: Deno.PointerValue | Uint8Array /* ptr */,
  lpnDx: Deno.PointerValue | Uint8Array /* ptr */,
  lpSize: Deno.PointerValue | Uint8Array /* ptr */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libGDI32_dll.GetTextExtentExPointA(util.toPointer(hdc), util.pstrToFfi(lpszString), cchString, nMaxExtent, util.toPointer(lpnFit), util.toPointer(lpnDx), util.toPointer(lpSize)));
}

export function GetTextExtentExPointW(
  hdc: Uint8Array | Deno.PointerValue /* Windows.Win32.Graphics.Gdi.HDC */,
  lpszString: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  cchString: number /* i32 */,
  nMaxExtent: number /* i32 */,
  lpnFit: Deno.PointerValue | Uint8Array /* ptr */,
  lpnDx: Deno.PointerValue | Uint8Array /* ptr */,
  lpSize: Deno.PointerValue | Uint8Array /* ptr */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libGDI32_dll.GetTextExtentExPointW(util.toPointer(hdc), util.pwstrToFfi(lpszString), cchString, nMaxExtent, util.toPointer(lpnFit), util.toPointer(lpnDx), util.toPointer(lpSize)));
}

export function GetFontLanguageInfo(
  hdc: Uint8Array | Deno.PointerValue /* Windows.Win32.Graphics.Gdi.HDC */,
): number /* u32 */ {
  return libGDI32_dll.GetFontLanguageInfo(util.toPointer(hdc));
}

export function GetCharacterPlacementA(
  hdc: Uint8Array | Deno.PointerValue /* Windows.Win32.Graphics.Gdi.HDC */,
  lpString: string | null | Uint8Array /* Windows.Win32.Foundation.PSTR */,
  nCount: number /* i32 */,
  nMexExtent: number /* i32 */,
  lpResults: Deno.PointerValue | Uint8Array /* ptr */,
  dwFlags: GET_CHARACTER_PLACEMENT_FLAGS /* Windows.Win32.Graphics.Gdi.GET_CHARACTER_PLACEMENT_FLAGS */,
): number /* u32 */ {
  return libGDI32_dll.GetCharacterPlacementA(util.toPointer(hdc), util.pstrToFfi(lpString), nCount, nMexExtent, util.toPointer(lpResults), dwFlags);
}

export function GetCharacterPlacementW(
  hdc: Uint8Array | Deno.PointerValue /* Windows.Win32.Graphics.Gdi.HDC */,
  lpString: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  nCount: number /* i32 */,
  nMexExtent: number /* i32 */,
  lpResults: Deno.PointerValue | Uint8Array /* ptr */,
  dwFlags: GET_CHARACTER_PLACEMENT_FLAGS /* Windows.Win32.Graphics.Gdi.GET_CHARACTER_PLACEMENT_FLAGS */,
): number /* u32 */ {
  return libGDI32_dll.GetCharacterPlacementW(util.toPointer(hdc), util.pwstrToFfi(lpString), nCount, nMexExtent, util.toPointer(lpResults), dwFlags);
}

export function GetFontUnicodeRanges(
  hdc: Uint8Array | Deno.PointerValue /* Windows.Win32.Graphics.Gdi.HDC */,
  lpgs: Deno.PointerValue | Uint8Array /* ptr */,
): number /* u32 */ {
  return libGDI32_dll.GetFontUnicodeRanges(util.toPointer(hdc), util.toPointer(lpgs));
}

export function GetGlyphIndicesA(
  hdc: Uint8Array | Deno.PointerValue /* Windows.Win32.Graphics.Gdi.HDC */,
  lpstr: string | null | Uint8Array /* Windows.Win32.Foundation.PSTR */,
  c: number /* i32 */,
  pgi: Deno.PointerValue | Uint8Array /* ptr */,
  fl: number /* u32 */,
): number /* u32 */ {
  return libGDI32_dll.GetGlyphIndicesA(util.toPointer(hdc), util.pstrToFfi(lpstr), c, util.toPointer(pgi), fl);
}

export function GetGlyphIndicesW(
  hdc: Uint8Array | Deno.PointerValue /* Windows.Win32.Graphics.Gdi.HDC */,
  lpstr: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  c: number /* i32 */,
  pgi: Deno.PointerValue | Uint8Array /* ptr */,
  fl: number /* u32 */,
): number /* u32 */ {
  return libGDI32_dll.GetGlyphIndicesW(util.toPointer(hdc), util.pwstrToFfi(lpstr), c, util.toPointer(pgi), fl);
}

export function GetTextExtentPointI(
  hdc: Uint8Array | Deno.PointerValue /* Windows.Win32.Graphics.Gdi.HDC */,
  pgiIn: Deno.PointerValue | Uint8Array /* ptr */,
  cgi: number /* i32 */,
  psize: Deno.PointerValue | Uint8Array /* ptr */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libGDI32_dll.GetTextExtentPointI(util.toPointer(hdc), util.toPointer(pgiIn), cgi, util.toPointer(psize)));
}

export function GetTextExtentExPointI(
  hdc: Uint8Array | Deno.PointerValue /* Windows.Win32.Graphics.Gdi.HDC */,
  lpwszString: Deno.PointerValue | Uint8Array /* ptr */,
  cwchString: number /* i32 */,
  nMaxExtent: number /* i32 */,
  lpnFit: Deno.PointerValue | Uint8Array /* ptr */,
  lpnDx: Deno.PointerValue | Uint8Array /* ptr */,
  lpSize: Deno.PointerValue | Uint8Array /* ptr */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libGDI32_dll.GetTextExtentExPointI(util.toPointer(hdc), util.toPointer(lpwszString), cwchString, nMaxExtent, util.toPointer(lpnFit), util.toPointer(lpnDx), util.toPointer(lpSize)));
}

export function GetCharWidthI(
  hdc: Uint8Array | Deno.PointerValue /* Windows.Win32.Graphics.Gdi.HDC */,
  giFirst: number /* u32 */,
  cgi: number /* u32 */,
  pgi: Deno.PointerValue | Uint8Array /* ptr */,
  piWidths: Deno.PointerValue | Uint8Array /* ptr */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libGDI32_dll.GetCharWidthI(util.toPointer(hdc), giFirst, cgi, util.toPointer(pgi), util.toPointer(piWidths)));
}

export function GetCharABCWidthsI(
  hdc: Uint8Array | Deno.PointerValue /* Windows.Win32.Graphics.Gdi.HDC */,
  giFirst: number /* u32 */,
  cgi: number /* u32 */,
  pgi: Deno.PointerValue | Uint8Array /* ptr */,
  pabc: Deno.PointerValue | Uint8Array /* ptr */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libGDI32_dll.GetCharABCWidthsI(util.toPointer(hdc), giFirst, cgi, util.toPointer(pgi), util.toPointer(pabc)));
}

export function AddFontResourceExA(
  name: string | null | Uint8Array /* Windows.Win32.Foundation.PSTR */,
  fl: FONT_RESOURCE_CHARACTERISTICS /* Windows.Win32.Graphics.Gdi.FONT_RESOURCE_CHARACTERISTICS */,
  res: Deno.PointerValue | Uint8Array /* ptr */,
): number /* i32 */ {
  return libGDI32_dll.AddFontResourceExA(util.pstrToFfi(name), fl, util.toPointer(res));
}

export function AddFontResourceExW(
  name: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  fl: FONT_RESOURCE_CHARACTERISTICS /* Windows.Win32.Graphics.Gdi.FONT_RESOURCE_CHARACTERISTICS */,
  res: Deno.PointerValue | Uint8Array /* ptr */,
): number /* i32 */ {
  return libGDI32_dll.AddFontResourceExW(util.pwstrToFfi(name), fl, util.toPointer(res));
}

export function RemoveFontResourceExA(
  name: string | null | Uint8Array /* Windows.Win32.Foundation.PSTR */,
  fl: number /* u32 */,
  pdv: Deno.PointerValue | Uint8Array /* ptr */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libGDI32_dll.RemoveFontResourceExA(util.pstrToFfi(name), fl, util.toPointer(pdv)));
}

export function RemoveFontResourceExW(
  name: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  fl: number /* u32 */,
  pdv: Deno.PointerValue | Uint8Array /* ptr */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libGDI32_dll.RemoveFontResourceExW(util.pwstrToFfi(name), fl, util.toPointer(pdv)));
}

export function AddFontMemResourceEx(
  pFileView: Deno.PointerValue | Uint8Array /* ptr */,
  cjSize: number /* u32 */,
  pvResrved: Deno.PointerValue | Uint8Array /* ptr */,
  pNumFonts: Deno.PointerValue | Uint8Array /* ptr */,
): Deno.PointerValue /* Windows.Win32.Foundation.HANDLE */ {
  return libGDI32_dll.AddFontMemResourceEx(util.toPointer(pFileView), cjSize, util.toPointer(pvResrved), util.toPointer(pNumFonts));
}

export function RemoveFontMemResourceEx(
  h: Uint8Array | Deno.PointerValue /* Windows.Win32.Foundation.HANDLE */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libGDI32_dll.RemoveFontMemResourceEx(util.toPointer(h)));
}

export function CreateFontIndirectExA(
  param0: Deno.PointerValue | Uint8Array /* ptr */,
): Deno.PointerValue /* Windows.Win32.Graphics.Gdi.HFONT */ {
  return libGDI32_dll.CreateFontIndirectExA(util.toPointer(param0));
}

export function CreateFontIndirectExW(
  param0: Deno.PointerValue | Uint8Array /* ptr */,
): Deno.PointerValue /* Windows.Win32.Graphics.Gdi.HFONT */ {
  return libGDI32_dll.CreateFontIndirectExW(util.toPointer(param0));
}

export function GetViewportExtEx(
  hdc: Uint8Array | Deno.PointerValue /* Windows.Win32.Graphics.Gdi.HDC */,
  lpsize: Deno.PointerValue | Uint8Array /* ptr */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libGDI32_dll.GetViewportExtEx(util.toPointer(hdc), util.toPointer(lpsize)));
}

export function GetViewportOrgEx(
  hdc: Uint8Array | Deno.PointerValue /* Windows.Win32.Graphics.Gdi.HDC */,
  lppoint: Deno.PointerValue | Uint8Array /* ptr */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libGDI32_dll.GetViewportOrgEx(util.toPointer(hdc), util.toPointer(lppoint)));
}

export function GetWindowExtEx(
  hdc: Uint8Array | Deno.PointerValue /* Windows.Win32.Graphics.Gdi.HDC */,
  lpsize: Deno.PointerValue | Uint8Array /* ptr */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libGDI32_dll.GetWindowExtEx(util.toPointer(hdc), util.toPointer(lpsize)));
}

export function GetWindowOrgEx(
  hdc: Uint8Array | Deno.PointerValue /* Windows.Win32.Graphics.Gdi.HDC */,
  lppoint: Deno.PointerValue | Uint8Array /* ptr */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libGDI32_dll.GetWindowOrgEx(util.toPointer(hdc), util.toPointer(lppoint)));
}

export function IntersectClipRect(
  hdc: Uint8Array | Deno.PointerValue /* Windows.Win32.Graphics.Gdi.HDC */,
  left: number /* i32 */,
  top: number /* i32 */,
  right: number /* i32 */,
  bottom: number /* i32 */,
): GDI_REGION_TYPE /* Windows.Win32.Graphics.Gdi.GDI_REGION_TYPE */ {
  return libGDI32_dll.IntersectClipRect(util.toPointer(hdc), left, top, right, bottom);
}

export function InvertRgn(
  hdc: Uint8Array | Deno.PointerValue /* Windows.Win32.Graphics.Gdi.HDC */,
  hrgn: Uint8Array | Deno.PointerValue /* Windows.Win32.Graphics.Gdi.HRGN */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libGDI32_dll.InvertRgn(util.toPointer(hdc), util.toPointer(hrgn)));
}

export function LineDDA(
  xStart: number /* i32 */,
  yStart: number /* i32 */,
  xEnd: number /* i32 */,
  yEnd: number /* i32 */,
  lpProc: Uint8Array | Deno.PointerValue /* Windows.Win32.Graphics.Gdi.LINEDDAPROC */,
  data: Uint8Array | Deno.PointerValue /* Windows.Win32.Foundation.LPARAM */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libGDI32_dll.LineDDA(xStart, yStart, xEnd, yEnd, util.toPointer(lpProc), util.toPointer(data)));
}

export function LineTo(
  hdc: Uint8Array | Deno.PointerValue /* Windows.Win32.Graphics.Gdi.HDC */,
  x: number /* i32 */,
  y: number /* i32 */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libGDI32_dll.LineTo(util.toPointer(hdc), x, y));
}

export function MaskBlt(
  hdcDest: Uint8Array | Deno.PointerValue /* Windows.Win32.Graphics.Gdi.HDC */,
  xDest: number /* i32 */,
  yDest: number /* i32 */,
  width: number /* i32 */,
  height: number /* i32 */,
  hdcSrc: Uint8Array | Deno.PointerValue /* Windows.Win32.Graphics.Gdi.HDC */,
  xSrc: number /* i32 */,
  ySrc: number /* i32 */,
  hbmMask: Uint8Array | Deno.PointerValue /* Windows.Win32.Graphics.Gdi.HBITMAP */,
  xMask: number /* i32 */,
  yMask: number /* i32 */,
  rop: number /* u32 */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libGDI32_dll.MaskBlt(util.toPointer(hdcDest), xDest, yDest, width, height, util.toPointer(hdcSrc), xSrc, ySrc, util.toPointer(hbmMask), xMask, yMask, rop));
}

export function PlgBlt(
  hdcDest: Uint8Array | Deno.PointerValue /* Windows.Win32.Graphics.Gdi.HDC */,
  lpPoint: Deno.PointerValue | Uint8Array /* ptr */,
  hdcSrc: Uint8Array | Deno.PointerValue /* Windows.Win32.Graphics.Gdi.HDC */,
  xSrc: number /* i32 */,
  ySrc: number /* i32 */,
  width: number /* i32 */,
  height: number /* i32 */,
  hbmMask: Uint8Array | Deno.PointerValue /* Windows.Win32.Graphics.Gdi.HBITMAP */,
  xMask: number /* i32 */,
  yMask: number /* i32 */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libGDI32_dll.PlgBlt(util.toPointer(hdcDest), util.toPointer(lpPoint), util.toPointer(hdcSrc), xSrc, ySrc, width, height, util.toPointer(hbmMask), xMask, yMask));
}

export function OffsetClipRgn(
  hdc: Uint8Array | Deno.PointerValue /* Windows.Win32.Graphics.Gdi.HDC */,
  x: number /* i32 */,
  y: number /* i32 */,
): GDI_REGION_TYPE /* Windows.Win32.Graphics.Gdi.GDI_REGION_TYPE */ {
  return libGDI32_dll.OffsetClipRgn(util.toPointer(hdc), x, y);
}

export function OffsetRgn(
  hrgn: Uint8Array | Deno.PointerValue /* Windows.Win32.Graphics.Gdi.HRGN */,
  x: number /* i32 */,
  y: number /* i32 */,
): GDI_REGION_TYPE /* Windows.Win32.Graphics.Gdi.GDI_REGION_TYPE */ {
  return libGDI32_dll.OffsetRgn(util.toPointer(hrgn), x, y);
}

export function PatBlt(
  hdc: Uint8Array | Deno.PointerValue /* Windows.Win32.Graphics.Gdi.HDC */,
  x: number /* i32 */,
  y: number /* i32 */,
  w: number /* i32 */,
  h: number /* i32 */,
  rop: ROP_CODE /* Windows.Win32.Graphics.Gdi.ROP_CODE */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libGDI32_dll.PatBlt(util.toPointer(hdc), x, y, w, h, rop));
}

export function Pie(
  hdc: Uint8Array | Deno.PointerValue /* Windows.Win32.Graphics.Gdi.HDC */,
  left: number /* i32 */,
  top: number /* i32 */,
  right: number /* i32 */,
  bottom: number /* i32 */,
  xr1: number /* i32 */,
  yr1: number /* i32 */,
  xr2: number /* i32 */,
  yr2: number /* i32 */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libGDI32_dll.Pie(util.toPointer(hdc), left, top, right, bottom, xr1, yr1, xr2, yr2));
}

export function PlayMetaFile(
  hdc: Uint8Array | Deno.PointerValue /* Windows.Win32.Graphics.Gdi.HDC */,
  hmf: Uint8Array | Deno.PointerValue /* Windows.Win32.Graphics.Gdi.HMETAFILE */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libGDI32_dll.PlayMetaFile(util.toPointer(hdc), util.toPointer(hmf)));
}

export function PaintRgn(
  hdc: Uint8Array | Deno.PointerValue /* Windows.Win32.Graphics.Gdi.HDC */,
  hrgn: Uint8Array | Deno.PointerValue /* Windows.Win32.Graphics.Gdi.HRGN */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libGDI32_dll.PaintRgn(util.toPointer(hdc), util.toPointer(hrgn)));
}

export function PolyPolygon(
  hdc: Uint8Array | Deno.PointerValue /* Windows.Win32.Graphics.Gdi.HDC */,
  apt: Deno.PointerValue | Uint8Array /* ptr */,
  asz: Deno.PointerValue | Uint8Array /* ptr */,
  csz: number /* i32 */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libGDI32_dll.PolyPolygon(util.toPointer(hdc), util.toPointer(apt), util.toPointer(asz), csz));
}

export function PtInRegion(
  hrgn: Uint8Array | Deno.PointerValue /* Windows.Win32.Graphics.Gdi.HRGN */,
  x: number /* i32 */,
  y: number /* i32 */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libGDI32_dll.PtInRegion(util.toPointer(hrgn), x, y));
}

export function PtVisible(
  hdc: Uint8Array | Deno.PointerValue /* Windows.Win32.Graphics.Gdi.HDC */,
  x: number /* i32 */,
  y: number /* i32 */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libGDI32_dll.PtVisible(util.toPointer(hdc), x, y));
}

export function RectInRegion(
  hrgn: Uint8Array | Deno.PointerValue /* Windows.Win32.Graphics.Gdi.HRGN */,
  lprect: Deno.PointerValue | Uint8Array /* ptr */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libGDI32_dll.RectInRegion(util.toPointer(hrgn), util.toPointer(lprect)));
}

export function RectVisible(
  hdc: Uint8Array | Deno.PointerValue /* Windows.Win32.Graphics.Gdi.HDC */,
  lprect: Deno.PointerValue | Uint8Array /* ptr */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libGDI32_dll.RectVisible(util.toPointer(hdc), util.toPointer(lprect)));
}

export function Rectangle(
  hdc: Uint8Array | Deno.PointerValue /* Windows.Win32.Graphics.Gdi.HDC */,
  left: number /* i32 */,
  top: number /* i32 */,
  right: number /* i32 */,
  bottom: number /* i32 */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libGDI32_dll.Rectangle(util.toPointer(hdc), left, top, right, bottom));
}

export function RestoreDC(
  hdc: Uint8Array | Deno.PointerValue /* Windows.Win32.Graphics.Gdi.HDC */,
  nSavedDC: number /* i32 */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libGDI32_dll.RestoreDC(util.toPointer(hdc), nSavedDC));
}

export function ResetDCA(
  hdc: Uint8Array | Deno.PointerValue /* Windows.Win32.Graphics.Gdi.HDC */,
  lpdm: Deno.PointerValue | Uint8Array /* ptr */,
): Deno.PointerValue /* Windows.Win32.Graphics.Gdi.HDC */ {
  return libGDI32_dll.ResetDCA(util.toPointer(hdc), util.toPointer(lpdm));
}

export function ResetDCW(
  hdc: Uint8Array | Deno.PointerValue /* Windows.Win32.Graphics.Gdi.HDC */,
  lpdm: Deno.PointerValue | Uint8Array /* ptr */,
): Deno.PointerValue /* Windows.Win32.Graphics.Gdi.HDC */ {
  return libGDI32_dll.ResetDCW(util.toPointer(hdc), util.toPointer(lpdm));
}

export function RealizePalette(
  hdc: Uint8Array | Deno.PointerValue /* Windows.Win32.Graphics.Gdi.HDC */,
): number /* u32 */ {
  return libGDI32_dll.RealizePalette(util.toPointer(hdc));
}

export function RemoveFontResourceA(
  lpFileName: string | null | Uint8Array /* Windows.Win32.Foundation.PSTR */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libGDI32_dll.RemoveFontResourceA(util.pstrToFfi(lpFileName)));
}

export function RemoveFontResourceW(
  lpFileName: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libGDI32_dll.RemoveFontResourceW(util.pwstrToFfi(lpFileName)));
}

export function RoundRect(
  hdc: Uint8Array | Deno.PointerValue /* Windows.Win32.Graphics.Gdi.HDC */,
  left: number /* i32 */,
  top: number /* i32 */,
  right: number /* i32 */,
  bottom: number /* i32 */,
  width: number /* i32 */,
  height: number /* i32 */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libGDI32_dll.RoundRect(util.toPointer(hdc), left, top, right, bottom, width, height));
}

export function ResizePalette(
  hpal: Uint8Array | Deno.PointerValue /* Windows.Win32.Graphics.Gdi.HPALETTE */,
  n: number /* u32 */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libGDI32_dll.ResizePalette(util.toPointer(hpal), n));
}

export function SaveDC(
  hdc: Uint8Array | Deno.PointerValue /* Windows.Win32.Graphics.Gdi.HDC */,
): number /* i32 */ {
  return libGDI32_dll.SaveDC(util.toPointer(hdc));
}

export function SelectClipRgn(
  hdc: Uint8Array | Deno.PointerValue /* Windows.Win32.Graphics.Gdi.HDC */,
  hrgn: Uint8Array | Deno.PointerValue /* Windows.Win32.Graphics.Gdi.HRGN */,
): GDI_REGION_TYPE /* Windows.Win32.Graphics.Gdi.GDI_REGION_TYPE */ {
  return libGDI32_dll.SelectClipRgn(util.toPointer(hdc), util.toPointer(hrgn));
}

export function ExtSelectClipRgn(
  hdc: Uint8Array | Deno.PointerValue /* Windows.Win32.Graphics.Gdi.HDC */,
  hrgn: Uint8Array | Deno.PointerValue /* Windows.Win32.Graphics.Gdi.HRGN */,
  mode: RGN_COMBINE_MODE /* Windows.Win32.Graphics.Gdi.RGN_COMBINE_MODE */,
): GDI_REGION_TYPE /* Windows.Win32.Graphics.Gdi.GDI_REGION_TYPE */ {
  return libGDI32_dll.ExtSelectClipRgn(util.toPointer(hdc), util.toPointer(hrgn), mode);
}

export function SetMetaRgn(
  hdc: Uint8Array | Deno.PointerValue /* Windows.Win32.Graphics.Gdi.HDC */,
): GDI_REGION_TYPE /* Windows.Win32.Graphics.Gdi.GDI_REGION_TYPE */ {
  return libGDI32_dll.SetMetaRgn(util.toPointer(hdc));
}

export function SelectObject(
  hdc: Uint8Array | Deno.PointerValue /* Windows.Win32.Graphics.Gdi.HDC */,
  h: Uint8Array | Deno.PointerValue /* Windows.Win32.Graphics.Gdi.HGDIOBJ */,
): Deno.PointerValue /* Windows.Win32.Graphics.Gdi.HGDIOBJ */ {
  return libGDI32_dll.SelectObject(util.toPointer(hdc), util.toPointer(h));
}

export function SelectPalette(
  hdc: Uint8Array | Deno.PointerValue /* Windows.Win32.Graphics.Gdi.HDC */,
  hPal: Uint8Array | Deno.PointerValue /* Windows.Win32.Graphics.Gdi.HPALETTE */,
  bForceBkgd: boolean /* Windows.Win32.Foundation.BOOL */,
): Deno.PointerValue /* Windows.Win32.Graphics.Gdi.HPALETTE */ {
  return libGDI32_dll.SelectPalette(util.toPointer(hdc), util.toPointer(hPal), util.boolToFfi(bForceBkgd));
}

export function SetBkColor(
  hdc: Uint8Array | Deno.PointerValue /* Windows.Win32.Graphics.Gdi.HDC */,
  color: Uint8Array | Deno.PointerValue /* Windows.Win32.Foundation.COLORREF */,
): Deno.PointerValue /* Windows.Win32.Foundation.COLORREF */ {
  return libGDI32_dll.SetBkColor(util.toPointer(hdc), util.toPointer(color));
}

export function SetDCBrushColor(
  hdc: Uint8Array | Deno.PointerValue /* Windows.Win32.Graphics.Gdi.HDC */,
  color: Uint8Array | Deno.PointerValue /* Windows.Win32.Foundation.COLORREF */,
): Deno.PointerValue /* Windows.Win32.Foundation.COLORREF */ {
  return libGDI32_dll.SetDCBrushColor(util.toPointer(hdc), util.toPointer(color));
}

export function SetDCPenColor(
  hdc: Uint8Array | Deno.PointerValue /* Windows.Win32.Graphics.Gdi.HDC */,
  color: Uint8Array | Deno.PointerValue /* Windows.Win32.Foundation.COLORREF */,
): Deno.PointerValue /* Windows.Win32.Foundation.COLORREF */ {
  return libGDI32_dll.SetDCPenColor(util.toPointer(hdc), util.toPointer(color));
}

export function SetBkMode(
  hdc: Uint8Array | Deno.PointerValue /* Windows.Win32.Graphics.Gdi.HDC */,
  mode: BACKGROUND_MODE /* Windows.Win32.Graphics.Gdi.BACKGROUND_MODE */,
): number /* i32 */ {
  return libGDI32_dll.SetBkMode(util.toPointer(hdc), mode);
}

export function SetBitmapBits(
  hbm: Uint8Array | Deno.PointerValue /* Windows.Win32.Graphics.Gdi.HBITMAP */,
  cb: number /* u32 */,
  pvBits: Deno.PointerValue | Uint8Array /* ptr */,
): number /* i32 */ {
  return libGDI32_dll.SetBitmapBits(util.toPointer(hbm), cb, util.toPointer(pvBits));
}

export function SetBoundsRect(
  hdc: Uint8Array | Deno.PointerValue /* Windows.Win32.Graphics.Gdi.HDC */,
  lprect: Deno.PointerValue | Uint8Array /* ptr */,
  flags: SET_BOUNDS_RECT_FLAGS /* Windows.Win32.Graphics.Gdi.SET_BOUNDS_RECT_FLAGS */,
): number /* u32 */ {
  return libGDI32_dll.SetBoundsRect(util.toPointer(hdc), util.toPointer(lprect), flags);
}

export function SetDIBits(
  hdc: Uint8Array | Deno.PointerValue /* Windows.Win32.Graphics.Gdi.HDC */,
  hbm: Uint8Array | Deno.PointerValue /* Windows.Win32.Graphics.Gdi.HBITMAP */,
  start: number /* u32 */,
  cLines: number /* u32 */,
  lpBits: Deno.PointerValue | Uint8Array /* ptr */,
  lpbmi: Deno.PointerValue | Uint8Array /* ptr */,
  ColorUse: DIB_USAGE /* Windows.Win32.Graphics.Gdi.DIB_USAGE */,
): number /* i32 */ {
  return libGDI32_dll.SetDIBits(util.toPointer(hdc), util.toPointer(hbm), start, cLines, util.toPointer(lpBits), util.toPointer(lpbmi), ColorUse);
}

export function SetDIBitsToDevice(
  hdc: Uint8Array | Deno.PointerValue /* Windows.Win32.Graphics.Gdi.HDC */,
  xDest: number /* i32 */,
  yDest: number /* i32 */,
  w: number /* u32 */,
  h: number /* u32 */,
  xSrc: number /* i32 */,
  ySrc: number /* i32 */,
  StartScan: number /* u32 */,
  cLines: number /* u32 */,
  lpvBits: Deno.PointerValue | Uint8Array /* ptr */,
  lpbmi: Deno.PointerValue | Uint8Array /* ptr */,
  ColorUse: DIB_USAGE /* Windows.Win32.Graphics.Gdi.DIB_USAGE */,
): number /* i32 */ {
  return libGDI32_dll.SetDIBitsToDevice(util.toPointer(hdc), xDest, yDest, w, h, xSrc, ySrc, StartScan, cLines, util.toPointer(lpvBits), util.toPointer(lpbmi), ColorUse);
}

export function SetMapperFlags(
  hdc: Uint8Array | Deno.PointerValue /* Windows.Win32.Graphics.Gdi.HDC */,
  flags: number /* u32 */,
): number /* u32 */ {
  return libGDI32_dll.SetMapperFlags(util.toPointer(hdc), flags);
}

export function SetGraphicsMode(
  hdc: Uint8Array | Deno.PointerValue /* Windows.Win32.Graphics.Gdi.HDC */,
  iMode: GRAPHICS_MODE /* Windows.Win32.Graphics.Gdi.GRAPHICS_MODE */,
): number /* i32 */ {
  return libGDI32_dll.SetGraphicsMode(util.toPointer(hdc), iMode);
}

export function SetMapMode(
  hdc: Uint8Array | Deno.PointerValue /* Windows.Win32.Graphics.Gdi.HDC */,
  iMode: HDC_MAP_MODE /* Windows.Win32.Graphics.Gdi.HDC_MAP_MODE */,
): number /* i32 */ {
  return libGDI32_dll.SetMapMode(util.toPointer(hdc), iMode);
}

export function SetLayout(
  hdc: Uint8Array | Deno.PointerValue /* Windows.Win32.Graphics.Gdi.HDC */,
  l: DC_LAYOUT /* Windows.Win32.Graphics.Gdi.DC_LAYOUT */,
): number /* u32 */ {
  return libGDI32_dll.SetLayout(util.toPointer(hdc), l);
}

export function GetLayout(
  hdc: Uint8Array | Deno.PointerValue /* Windows.Win32.Graphics.Gdi.HDC */,
): number /* u32 */ {
  return libGDI32_dll.GetLayout(util.toPointer(hdc));
}

export function SetMetaFileBitsEx(
  cbBuffer: number /* u32 */,
  lpData: Deno.PointerValue | Uint8Array /* ptr */,
): Deno.PointerValue /* Windows.Win32.Graphics.Gdi.HMETAFILE */ {
  return libGDI32_dll.SetMetaFileBitsEx(cbBuffer, util.toPointer(lpData));
}

export function SetPaletteEntries(
  hpal: Uint8Array | Deno.PointerValue /* Windows.Win32.Graphics.Gdi.HPALETTE */,
  iStart: number /* u32 */,
  cEntries: number /* u32 */,
  pPalEntries: Deno.PointerValue | Uint8Array /* ptr */,
): number /* u32 */ {
  return libGDI32_dll.SetPaletteEntries(util.toPointer(hpal), iStart, cEntries, util.toPointer(pPalEntries));
}

export function SetPixel(
  hdc: Uint8Array | Deno.PointerValue /* Windows.Win32.Graphics.Gdi.HDC */,
  x: number /* i32 */,
  y: number /* i32 */,
  color: Uint8Array | Deno.PointerValue /* Windows.Win32.Foundation.COLORREF */,
): Deno.PointerValue /* Windows.Win32.Foundation.COLORREF */ {
  return libGDI32_dll.SetPixel(util.toPointer(hdc), x, y, util.toPointer(color));
}

export function SetPixelV(
  hdc: Uint8Array | Deno.PointerValue /* Windows.Win32.Graphics.Gdi.HDC */,
  x: number /* i32 */,
  y: number /* i32 */,
  color: Uint8Array | Deno.PointerValue /* Windows.Win32.Foundation.COLORREF */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libGDI32_dll.SetPixelV(util.toPointer(hdc), x, y, util.toPointer(color)));
}

export function SetPolyFillMode(
  hdc: Uint8Array | Deno.PointerValue /* Windows.Win32.Graphics.Gdi.HDC */,
  mode: CREATE_POLYGON_RGN_MODE /* Windows.Win32.Graphics.Gdi.CREATE_POLYGON_RGN_MODE */,
): number /* i32 */ {
  return libGDI32_dll.SetPolyFillMode(util.toPointer(hdc), mode);
}

export function StretchBlt(
  hdcDest: Uint8Array | Deno.PointerValue /* Windows.Win32.Graphics.Gdi.HDC */,
  xDest: number /* i32 */,
  yDest: number /* i32 */,
  wDest: number /* i32 */,
  hDest: number /* i32 */,
  hdcSrc: Uint8Array | Deno.PointerValue /* Windows.Win32.Graphics.Gdi.HDC */,
  xSrc: number /* i32 */,
  ySrc: number /* i32 */,
  wSrc: number /* i32 */,
  hSrc: number /* i32 */,
  rop: ROP_CODE /* Windows.Win32.Graphics.Gdi.ROP_CODE */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libGDI32_dll.StretchBlt(util.toPointer(hdcDest), xDest, yDest, wDest, hDest, util.toPointer(hdcSrc), xSrc, ySrc, wSrc, hSrc, rop));
}

export function SetRectRgn(
  hrgn: Uint8Array | Deno.PointerValue /* Windows.Win32.Graphics.Gdi.HRGN */,
  left: number /* i32 */,
  top: number /* i32 */,
  right: number /* i32 */,
  bottom: number /* i32 */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libGDI32_dll.SetRectRgn(util.toPointer(hrgn), left, top, right, bottom));
}

export function StretchDIBits(
  hdc: Uint8Array | Deno.PointerValue /* Windows.Win32.Graphics.Gdi.HDC */,
  xDest: number /* i32 */,
  yDest: number /* i32 */,
  DestWidth: number /* i32 */,
  DestHeight: number /* i32 */,
  xSrc: number /* i32 */,
  ySrc: number /* i32 */,
  SrcWidth: number /* i32 */,
  SrcHeight: number /* i32 */,
  lpBits: Deno.PointerValue | Uint8Array /* ptr */,
  lpbmi: Deno.PointerValue | Uint8Array /* ptr */,
  iUsage: DIB_USAGE /* Windows.Win32.Graphics.Gdi.DIB_USAGE */,
  rop: ROP_CODE /* Windows.Win32.Graphics.Gdi.ROP_CODE */,
): number /* i32 */ {
  return libGDI32_dll.StretchDIBits(util.toPointer(hdc), xDest, yDest, DestWidth, DestHeight, xSrc, ySrc, SrcWidth, SrcHeight, util.toPointer(lpBits), util.toPointer(lpbmi), iUsage, rop);
}

export function SetROP2(
  hdc: Uint8Array | Deno.PointerValue /* Windows.Win32.Graphics.Gdi.HDC */,
  rop2: R2_MODE /* Windows.Win32.Graphics.Gdi.R2_MODE */,
): number /* i32 */ {
  return libGDI32_dll.SetROP2(util.toPointer(hdc), rop2);
}

export function SetStretchBltMode(
  hdc: Uint8Array | Deno.PointerValue /* Windows.Win32.Graphics.Gdi.HDC */,
  mode: STRETCH_BLT_MODE /* Windows.Win32.Graphics.Gdi.STRETCH_BLT_MODE */,
): number /* i32 */ {
  return libGDI32_dll.SetStretchBltMode(util.toPointer(hdc), mode);
}

export function SetSystemPaletteUse(
  hdc: Uint8Array | Deno.PointerValue /* Windows.Win32.Graphics.Gdi.HDC */,
  use: SYSTEM_PALETTE_USE /* Windows.Win32.Graphics.Gdi.SYSTEM_PALETTE_USE */,
): number /* u32 */ {
  return libGDI32_dll.SetSystemPaletteUse(util.toPointer(hdc), use);
}

export function SetTextCharacterExtra(
  hdc: Uint8Array | Deno.PointerValue /* Windows.Win32.Graphics.Gdi.HDC */,
  extra: number /* i32 */,
): number /* i32 */ {
  return libGDI32_dll.SetTextCharacterExtra(util.toPointer(hdc), extra);
}

export function SetTextColor(
  hdc: Uint8Array | Deno.PointerValue /* Windows.Win32.Graphics.Gdi.HDC */,
  color: Uint8Array | Deno.PointerValue /* Windows.Win32.Foundation.COLORREF */,
): Deno.PointerValue /* Windows.Win32.Foundation.COLORREF */ {
  return libGDI32_dll.SetTextColor(util.toPointer(hdc), util.toPointer(color));
}

export function SetTextAlign(
  hdc: Uint8Array | Deno.PointerValue /* Windows.Win32.Graphics.Gdi.HDC */,
  align: TEXT_ALIGN_OPTIONS /* Windows.Win32.Graphics.Gdi.TEXT_ALIGN_OPTIONS */,
): number /* u32 */ {
  return libGDI32_dll.SetTextAlign(util.toPointer(hdc), align);
}

export function SetTextJustification(
  hdc: Uint8Array | Deno.PointerValue /* Windows.Win32.Graphics.Gdi.HDC */,
  extra: number /* i32 */,
  count: number /* i32 */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libGDI32_dll.SetTextJustification(util.toPointer(hdc), extra, count));
}

export function UpdateColors(
  hdc: Uint8Array | Deno.PointerValue /* Windows.Win32.Graphics.Gdi.HDC */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libGDI32_dll.UpdateColors(util.toPointer(hdc)));
}

export function AlphaBlend(
  hdcDest: Uint8Array | Deno.PointerValue /* Windows.Win32.Graphics.Gdi.HDC */,
  xoriginDest: number /* i32 */,
  yoriginDest: number /* i32 */,
  wDest: number /* i32 */,
  hDest: number /* i32 */,
  hdcSrc: Uint8Array | Deno.PointerValue /* Windows.Win32.Graphics.Gdi.HDC */,
  xoriginSrc: number /* i32 */,
  yoriginSrc: number /* i32 */,
  wSrc: number /* i32 */,
  hSrc: number /* i32 */,
  ftn: Uint8Array | Deno.PointerValue /* Windows.Win32.Graphics.Gdi.BLENDFUNCTION */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libMSIMG32_dll.AlphaBlend(util.toPointer(hdcDest), xoriginDest, yoriginDest, wDest, hDest, util.toPointer(hdcSrc), xoriginSrc, yoriginSrc, wSrc, hSrc, util.toPointer(ftn)));
}

export function TransparentBlt(
  hdcDest: Uint8Array | Deno.PointerValue /* Windows.Win32.Graphics.Gdi.HDC */,
  xoriginDest: number /* i32 */,
  yoriginDest: number /* i32 */,
  wDest: number /* i32 */,
  hDest: number /* i32 */,
  hdcSrc: Uint8Array | Deno.PointerValue /* Windows.Win32.Graphics.Gdi.HDC */,
  xoriginSrc: number /* i32 */,
  yoriginSrc: number /* i32 */,
  wSrc: number /* i32 */,
  hSrc: number /* i32 */,
  crTransparent: number /* u32 */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libMSIMG32_dll.TransparentBlt(util.toPointer(hdcDest), xoriginDest, yoriginDest, wDest, hDest, util.toPointer(hdcSrc), xoriginSrc, yoriginSrc, wSrc, hSrc, crTransparent));
}

export function GradientFill(
  hdc: Uint8Array | Deno.PointerValue /* Windows.Win32.Graphics.Gdi.HDC */,
  pVertex: Deno.PointerValue | Uint8Array /* ptr */,
  nVertex: number /* u32 */,
  pMesh: Deno.PointerValue | Uint8Array /* ptr */,
  nMesh: number /* u32 */,
  ulMode: GRADIENT_FILL /* Windows.Win32.Graphics.Gdi.GRADIENT_FILL */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libMSIMG32_dll.GradientFill(util.toPointer(hdc), util.toPointer(pVertex), nVertex, util.toPointer(pMesh), nMesh, ulMode));
}

export function GdiAlphaBlend(
  hdcDest: Uint8Array | Deno.PointerValue /* Windows.Win32.Graphics.Gdi.HDC */,
  xoriginDest: number /* i32 */,
  yoriginDest: number /* i32 */,
  wDest: number /* i32 */,
  hDest: number /* i32 */,
  hdcSrc: Uint8Array | Deno.PointerValue /* Windows.Win32.Graphics.Gdi.HDC */,
  xoriginSrc: number /* i32 */,
  yoriginSrc: number /* i32 */,
  wSrc: number /* i32 */,
  hSrc: number /* i32 */,
  ftn: Uint8Array | Deno.PointerValue /* Windows.Win32.Graphics.Gdi.BLENDFUNCTION */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libGDI32_dll.GdiAlphaBlend(util.toPointer(hdcDest), xoriginDest, yoriginDest, wDest, hDest, util.toPointer(hdcSrc), xoriginSrc, yoriginSrc, wSrc, hSrc, util.toPointer(ftn)));
}

export function GdiTransparentBlt(
  hdcDest: Uint8Array | Deno.PointerValue /* Windows.Win32.Graphics.Gdi.HDC */,
  xoriginDest: number /* i32 */,
  yoriginDest: number /* i32 */,
  wDest: number /* i32 */,
  hDest: number /* i32 */,
  hdcSrc: Uint8Array | Deno.PointerValue /* Windows.Win32.Graphics.Gdi.HDC */,
  xoriginSrc: number /* i32 */,
  yoriginSrc: number /* i32 */,
  wSrc: number /* i32 */,
  hSrc: number /* i32 */,
  crTransparent: number /* u32 */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libGDI32_dll.GdiTransparentBlt(util.toPointer(hdcDest), xoriginDest, yoriginDest, wDest, hDest, util.toPointer(hdcSrc), xoriginSrc, yoriginSrc, wSrc, hSrc, crTransparent));
}

export function GdiGradientFill(
  hdc: Uint8Array | Deno.PointerValue /* Windows.Win32.Graphics.Gdi.HDC */,
  pVertex: Deno.PointerValue | Uint8Array /* ptr */,
  nVertex: number /* u32 */,
  pMesh: Deno.PointerValue | Uint8Array /* ptr */,
  nCount: number /* u32 */,
  ulMode: GRADIENT_FILL /* Windows.Win32.Graphics.Gdi.GRADIENT_FILL */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libGDI32_dll.GdiGradientFill(util.toPointer(hdc), util.toPointer(pVertex), nVertex, util.toPointer(pMesh), nCount, ulMode));
}

export function PlayMetaFileRecord(
  hdc: Uint8Array | Deno.PointerValue /* Windows.Win32.Graphics.Gdi.HDC */,
  lpHandleTable: Deno.PointerValue | Uint8Array /* ptr */,
  lpMR: Deno.PointerValue | Uint8Array /* ptr */,
  noObjs: number /* u32 */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libGDI32_dll.PlayMetaFileRecord(util.toPointer(hdc), util.toPointer(lpHandleTable), util.toPointer(lpMR), noObjs));
}

export function EnumMetaFile(
  hdc: Uint8Array | Deno.PointerValue /* Windows.Win32.Graphics.Gdi.HDC */,
  hmf: Uint8Array | Deno.PointerValue /* Windows.Win32.Graphics.Gdi.HMETAFILE */,
  proc: Uint8Array | Deno.PointerValue /* Windows.Win32.Graphics.Gdi.MFENUMPROC */,
  param3: Uint8Array | Deno.PointerValue /* Windows.Win32.Foundation.LPARAM */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libGDI32_dll.EnumMetaFile(util.toPointer(hdc), util.toPointer(hmf), util.toPointer(proc), util.toPointer(param3)));
}

export function CloseEnhMetaFile(
  hdc: Uint8Array | Deno.PointerValue /* Windows.Win32.Graphics.Gdi.HDC */,
): Deno.PointerValue /* Windows.Win32.Graphics.Gdi.HENHMETAFILE */ {
  return libGDI32_dll.CloseEnhMetaFile(util.toPointer(hdc));
}

export function CopyEnhMetaFileA(
  hEnh: Uint8Array | Deno.PointerValue /* Windows.Win32.Graphics.Gdi.HENHMETAFILE */,
  lpFileName: string | null | Uint8Array /* Windows.Win32.Foundation.PSTR */,
): Deno.PointerValue /* Windows.Win32.Graphics.Gdi.HENHMETAFILE */ {
  return libGDI32_dll.CopyEnhMetaFileA(util.toPointer(hEnh), util.pstrToFfi(lpFileName));
}

export function CopyEnhMetaFileW(
  hEnh: Uint8Array | Deno.PointerValue /* Windows.Win32.Graphics.Gdi.HENHMETAFILE */,
  lpFileName: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
): Deno.PointerValue /* Windows.Win32.Graphics.Gdi.HENHMETAFILE */ {
  return libGDI32_dll.CopyEnhMetaFileW(util.toPointer(hEnh), util.pwstrToFfi(lpFileName));
}

export function CreateEnhMetaFileA(
  hdc: Uint8Array | Deno.PointerValue /* Windows.Win32.Graphics.Gdi.HDC */,
  lpFilename: string | null | Uint8Array /* Windows.Win32.Foundation.PSTR */,
  lprc: Deno.PointerValue | Uint8Array /* ptr */,
  lpDesc: string | null | Uint8Array /* Windows.Win32.Foundation.PSTR */,
): Deno.PointerValue /* Windows.Win32.Graphics.Gdi.HdcMetdataEnhFileHandle */ {
  return libGDI32_dll.CreateEnhMetaFileA(util.toPointer(hdc), util.pstrToFfi(lpFilename), util.toPointer(lprc), util.pstrToFfi(lpDesc));
}

export function CreateEnhMetaFileW(
  hdc: Uint8Array | Deno.PointerValue /* Windows.Win32.Graphics.Gdi.HDC */,
  lpFilename: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  lprc: Deno.PointerValue | Uint8Array /* ptr */,
  lpDesc: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
): Deno.PointerValue /* Windows.Win32.Graphics.Gdi.HdcMetdataEnhFileHandle */ {
  return libGDI32_dll.CreateEnhMetaFileW(util.toPointer(hdc), util.pwstrToFfi(lpFilename), util.toPointer(lprc), util.pwstrToFfi(lpDesc));
}

export function DeleteEnhMetaFile(
  hmf: Uint8Array | Deno.PointerValue /* Windows.Win32.Graphics.Gdi.HENHMETAFILE */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libGDI32_dll.DeleteEnhMetaFile(util.toPointer(hmf)));
}

export function EnumEnhMetaFile(
  hdc: Uint8Array | Deno.PointerValue /* Windows.Win32.Graphics.Gdi.HDC */,
  hmf: Uint8Array | Deno.PointerValue /* Windows.Win32.Graphics.Gdi.HENHMETAFILE */,
  proc: Uint8Array | Deno.PointerValue /* Windows.Win32.Graphics.Gdi.ENHMFENUMPROC */,
  param3: Deno.PointerValue | Uint8Array /* ptr */,
  lpRect: Deno.PointerValue | Uint8Array /* ptr */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libGDI32_dll.EnumEnhMetaFile(util.toPointer(hdc), util.toPointer(hmf), util.toPointer(proc), util.toPointer(param3), util.toPointer(lpRect)));
}

export function GetEnhMetaFileA(
  lpName: string | null | Uint8Array /* Windows.Win32.Foundation.PSTR */,
): Deno.PointerValue /* Windows.Win32.Graphics.Gdi.HENHMETAFILE */ {
  return libGDI32_dll.GetEnhMetaFileA(util.pstrToFfi(lpName));
}

export function GetEnhMetaFileW(
  lpName: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
): Deno.PointerValue /* Windows.Win32.Graphics.Gdi.HENHMETAFILE */ {
  return libGDI32_dll.GetEnhMetaFileW(util.pwstrToFfi(lpName));
}

export function GetEnhMetaFileBits(
  hEMF: Uint8Array | Deno.PointerValue /* Windows.Win32.Graphics.Gdi.HENHMETAFILE */,
  nSize: number /* u32 */,
  lpData: Deno.PointerValue | Uint8Array /* ptr */,
): number /* u32 */ {
  return libGDI32_dll.GetEnhMetaFileBits(util.toPointer(hEMF), nSize, util.toPointer(lpData));
}

export function GetEnhMetaFileDescriptionA(
  hemf: Uint8Array | Deno.PointerValue /* Windows.Win32.Graphics.Gdi.HENHMETAFILE */,
  cchBuffer: number /* u32 */,
  lpDescription: string | null | Uint8Array /* Windows.Win32.Foundation.PSTR */,
): number /* u32 */ {
  return libGDI32_dll.GetEnhMetaFileDescriptionA(util.toPointer(hemf), cchBuffer, util.pstrToFfi(lpDescription));
}

export function GetEnhMetaFileDescriptionW(
  hemf: Uint8Array | Deno.PointerValue /* Windows.Win32.Graphics.Gdi.HENHMETAFILE */,
  cchBuffer: number /* u32 */,
  lpDescription: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
): number /* u32 */ {
  return libGDI32_dll.GetEnhMetaFileDescriptionW(util.toPointer(hemf), cchBuffer, util.pwstrToFfi(lpDescription));
}

export function GetEnhMetaFileHeader(
  hemf: Uint8Array | Deno.PointerValue /* Windows.Win32.Graphics.Gdi.HENHMETAFILE */,
  nSize: number /* u32 */,
  lpEnhMetaHeader: Deno.PointerValue | Uint8Array /* ptr */,
): number /* u32 */ {
  return libGDI32_dll.GetEnhMetaFileHeader(util.toPointer(hemf), nSize, util.toPointer(lpEnhMetaHeader));
}

export function GetEnhMetaFilePaletteEntries(
  hemf: Uint8Array | Deno.PointerValue /* Windows.Win32.Graphics.Gdi.HENHMETAFILE */,
  nNumEntries: number /* u32 */,
  lpPaletteEntries: Deno.PointerValue | Uint8Array /* ptr */,
): number /* u32 */ {
  return libGDI32_dll.GetEnhMetaFilePaletteEntries(util.toPointer(hemf), nNumEntries, util.toPointer(lpPaletteEntries));
}

export function GetWinMetaFileBits(
  hemf: Uint8Array | Deno.PointerValue /* Windows.Win32.Graphics.Gdi.HENHMETAFILE */,
  cbData16: number /* u32 */,
  pData16: Deno.PointerValue | Uint8Array /* ptr */,
  iMapMode: number /* i32 */,
  hdcRef: Uint8Array | Deno.PointerValue /* Windows.Win32.Graphics.Gdi.HDC */,
): number /* u32 */ {
  return libGDI32_dll.GetWinMetaFileBits(util.toPointer(hemf), cbData16, util.toPointer(pData16), iMapMode, util.toPointer(hdcRef));
}

export function PlayEnhMetaFile(
  hdc: Uint8Array | Deno.PointerValue /* Windows.Win32.Graphics.Gdi.HDC */,
  hmf: Uint8Array | Deno.PointerValue /* Windows.Win32.Graphics.Gdi.HENHMETAFILE */,
  lprect: Deno.PointerValue | Uint8Array /* ptr */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libGDI32_dll.PlayEnhMetaFile(util.toPointer(hdc), util.toPointer(hmf), util.toPointer(lprect)));
}

export function PlayEnhMetaFileRecord(
  hdc: Uint8Array | Deno.PointerValue /* Windows.Win32.Graphics.Gdi.HDC */,
  pht: Deno.PointerValue | Uint8Array /* ptr */,
  pmr: Deno.PointerValue | Uint8Array /* ptr */,
  cht: number /* u32 */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libGDI32_dll.PlayEnhMetaFileRecord(util.toPointer(hdc), util.toPointer(pht), util.toPointer(pmr), cht));
}

export function SetEnhMetaFileBits(
  nSize: number /* u32 */,
  pb: Deno.PointerValue | Uint8Array /* ptr */,
): Deno.PointerValue /* Windows.Win32.Graphics.Gdi.HENHMETAFILE */ {
  return libGDI32_dll.SetEnhMetaFileBits(nSize, util.toPointer(pb));
}

export function GdiComment(
  hdc: Uint8Array | Deno.PointerValue /* Windows.Win32.Graphics.Gdi.HDC */,
  nSize: number /* u32 */,
  lpData: Deno.PointerValue | Uint8Array /* ptr */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libGDI32_dll.GdiComment(util.toPointer(hdc), nSize, util.toPointer(lpData)));
}

export function GetTextMetricsA(
  hdc: Uint8Array | Deno.PointerValue /* Windows.Win32.Graphics.Gdi.HDC */,
  lptm: Deno.PointerValue | Uint8Array /* ptr */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libGDI32_dll.GetTextMetricsA(util.toPointer(hdc), util.toPointer(lptm)));
}

export function GetTextMetricsW(
  hdc: Uint8Array | Deno.PointerValue /* Windows.Win32.Graphics.Gdi.HDC */,
  lptm: Deno.PointerValue | Uint8Array /* ptr */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libGDI32_dll.GetTextMetricsW(util.toPointer(hdc), util.toPointer(lptm)));
}

export function AngleArc(
  hdc: Uint8Array | Deno.PointerValue /* Windows.Win32.Graphics.Gdi.HDC */,
  x: number /* i32 */,
  y: number /* i32 */,
  r: number /* u32 */,
  StartAngle: number /* f32 */,
  SweepAngle: number /* f32 */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libGDI32_dll.AngleArc(util.toPointer(hdc), x, y, r, StartAngle, SweepAngle));
}

export function PolyPolyline(
  hdc: Uint8Array | Deno.PointerValue /* Windows.Win32.Graphics.Gdi.HDC */,
  apt: Deno.PointerValue | Uint8Array /* ptr */,
  asz: Deno.PointerValue | Uint8Array /* ptr */,
  csz: number /* u32 */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libGDI32_dll.PolyPolyline(util.toPointer(hdc), util.toPointer(apt), util.toPointer(asz), csz));
}

export function GetWorldTransform(
  hdc: Uint8Array | Deno.PointerValue /* Windows.Win32.Graphics.Gdi.HDC */,
  lpxf: Deno.PointerValue | Uint8Array /* ptr */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libGDI32_dll.GetWorldTransform(util.toPointer(hdc), util.toPointer(lpxf)));
}

export function SetWorldTransform(
  hdc: Uint8Array | Deno.PointerValue /* Windows.Win32.Graphics.Gdi.HDC */,
  lpxf: Deno.PointerValue | Uint8Array /* ptr */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libGDI32_dll.SetWorldTransform(util.toPointer(hdc), util.toPointer(lpxf)));
}

export function ModifyWorldTransform(
  hdc: Uint8Array | Deno.PointerValue /* Windows.Win32.Graphics.Gdi.HDC */,
  lpxf: Deno.PointerValue | Uint8Array /* ptr */,
  mode: MODIFY_WORLD_TRANSFORM_MODE /* Windows.Win32.Graphics.Gdi.MODIFY_WORLD_TRANSFORM_MODE */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libGDI32_dll.ModifyWorldTransform(util.toPointer(hdc), util.toPointer(lpxf), mode));
}

export function CombineTransform(
  lpxfOut: Deno.PointerValue | Uint8Array /* ptr */,
  lpxf1: Deno.PointerValue | Uint8Array /* ptr */,
  lpxf2: Deno.PointerValue | Uint8Array /* ptr */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libGDI32_dll.CombineTransform(util.toPointer(lpxfOut), util.toPointer(lpxf1), util.toPointer(lpxf2)));
}

export function CreateDIBSection(
  hdc: Uint8Array | Deno.PointerValue /* Windows.Win32.Graphics.Gdi.HDC */,
  pbmi: Deno.PointerValue | Uint8Array /* ptr */,
  usage: DIB_USAGE /* Windows.Win32.Graphics.Gdi.DIB_USAGE */,
  ppvBits: Deno.PointerValue | Uint8Array /* ptr */,
  hSection: Uint8Array | Deno.PointerValue /* Windows.Win32.Foundation.HANDLE */,
  offset: number /* u32 */,
): Deno.PointerValue /* Windows.Win32.Graphics.Gdi.HBITMAP */ {
  return libGDI32_dll.CreateDIBSection(util.toPointer(hdc), util.toPointer(pbmi), usage, util.toPointer(ppvBits), util.toPointer(hSection), offset);
}

export function GetDIBColorTable(
  hdc: Uint8Array | Deno.PointerValue /* Windows.Win32.Graphics.Gdi.HDC */,
  iStart: number /* u32 */,
  cEntries: number /* u32 */,
  prgbq: Deno.PointerValue | Uint8Array /* ptr */,
): number /* u32 */ {
  return libGDI32_dll.GetDIBColorTable(util.toPointer(hdc), iStart, cEntries, util.toPointer(prgbq));
}

export function SetDIBColorTable(
  hdc: Uint8Array | Deno.PointerValue /* Windows.Win32.Graphics.Gdi.HDC */,
  iStart: number /* u32 */,
  cEntries: number /* u32 */,
  prgbq: Deno.PointerValue | Uint8Array /* ptr */,
): number /* u32 */ {
  return libGDI32_dll.SetDIBColorTable(util.toPointer(hdc), iStart, cEntries, util.toPointer(prgbq));
}

export function SetColorAdjustment(
  hdc: Uint8Array | Deno.PointerValue /* Windows.Win32.Graphics.Gdi.HDC */,
  lpca: Deno.PointerValue | Uint8Array /* ptr */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libGDI32_dll.SetColorAdjustment(util.toPointer(hdc), util.toPointer(lpca)));
}

export function GetColorAdjustment(
  hdc: Uint8Array | Deno.PointerValue /* Windows.Win32.Graphics.Gdi.HDC */,
  lpca: Deno.PointerValue | Uint8Array /* ptr */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libGDI32_dll.GetColorAdjustment(util.toPointer(hdc), util.toPointer(lpca)));
}

export function CreateHalftonePalette(
  hdc: Uint8Array | Deno.PointerValue /* Windows.Win32.Graphics.Gdi.HDC */,
): Deno.PointerValue /* Windows.Win32.Graphics.Gdi.HPALETTE */ {
  return libGDI32_dll.CreateHalftonePalette(util.toPointer(hdc));
}

export function AbortPath(
  hdc: Uint8Array | Deno.PointerValue /* Windows.Win32.Graphics.Gdi.HDC */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libGDI32_dll.AbortPath(util.toPointer(hdc)));
}

export function ArcTo(
  hdc: Uint8Array | Deno.PointerValue /* Windows.Win32.Graphics.Gdi.HDC */,
  left: number /* i32 */,
  top: number /* i32 */,
  right: number /* i32 */,
  bottom: number /* i32 */,
  xr1: number /* i32 */,
  yr1: number /* i32 */,
  xr2: number /* i32 */,
  yr2: number /* i32 */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libGDI32_dll.ArcTo(util.toPointer(hdc), left, top, right, bottom, xr1, yr1, xr2, yr2));
}

export function BeginPath(
  hdc: Uint8Array | Deno.PointerValue /* Windows.Win32.Graphics.Gdi.HDC */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libGDI32_dll.BeginPath(util.toPointer(hdc)));
}

export function CloseFigure(
  hdc: Uint8Array | Deno.PointerValue /* Windows.Win32.Graphics.Gdi.HDC */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libGDI32_dll.CloseFigure(util.toPointer(hdc)));
}

export function EndPath(
  hdc: Uint8Array | Deno.PointerValue /* Windows.Win32.Graphics.Gdi.HDC */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libGDI32_dll.EndPath(util.toPointer(hdc)));
}

export function FillPath(
  hdc: Uint8Array | Deno.PointerValue /* Windows.Win32.Graphics.Gdi.HDC */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libGDI32_dll.FillPath(util.toPointer(hdc)));
}

export function FlattenPath(
  hdc: Uint8Array | Deno.PointerValue /* Windows.Win32.Graphics.Gdi.HDC */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libGDI32_dll.FlattenPath(util.toPointer(hdc)));
}

export function GetPath(
  hdc: Uint8Array | Deno.PointerValue /* Windows.Win32.Graphics.Gdi.HDC */,
  apt: Deno.PointerValue | Uint8Array /* ptr */,
  aj: Deno.PointerValue | Uint8Array /* ptr */,
  cpt: number /* i32 */,
): number /* i32 */ {
  return libGDI32_dll.GetPath(util.toPointer(hdc), util.toPointer(apt), util.toPointer(aj), cpt);
}

export function PathToRegion(
  hdc: Uint8Array | Deno.PointerValue /* Windows.Win32.Graphics.Gdi.HDC */,
): Deno.PointerValue /* Windows.Win32.Graphics.Gdi.HRGN */ {
  return libGDI32_dll.PathToRegion(util.toPointer(hdc));
}

export function PolyDraw(
  hdc: Uint8Array | Deno.PointerValue /* Windows.Win32.Graphics.Gdi.HDC */,
  apt: Deno.PointerValue | Uint8Array /* ptr */,
  aj: Deno.PointerValue | Uint8Array /* ptr */,
  cpt: number /* i32 */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libGDI32_dll.PolyDraw(util.toPointer(hdc), util.toPointer(apt), util.toPointer(aj), cpt));
}

export function SelectClipPath(
  hdc: Uint8Array | Deno.PointerValue /* Windows.Win32.Graphics.Gdi.HDC */,
  mode: RGN_COMBINE_MODE /* Windows.Win32.Graphics.Gdi.RGN_COMBINE_MODE */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libGDI32_dll.SelectClipPath(util.toPointer(hdc), mode));
}

export function SetArcDirection(
  hdc: Uint8Array | Deno.PointerValue /* Windows.Win32.Graphics.Gdi.HDC */,
  dir: ARC_DIRECTION /* Windows.Win32.Graphics.Gdi.ARC_DIRECTION */,
): number /* i32 */ {
  return libGDI32_dll.SetArcDirection(util.toPointer(hdc), dir);
}

export function SetMiterLimit(
  hdc: Uint8Array | Deno.PointerValue /* Windows.Win32.Graphics.Gdi.HDC */,
  limit: number /* f32 */,
  old: Deno.PointerValue | Uint8Array /* ptr */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libGDI32_dll.SetMiterLimit(util.toPointer(hdc), limit, util.toPointer(old)));
}

export function StrokeAndFillPath(
  hdc: Uint8Array | Deno.PointerValue /* Windows.Win32.Graphics.Gdi.HDC */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libGDI32_dll.StrokeAndFillPath(util.toPointer(hdc)));
}

export function StrokePath(
  hdc: Uint8Array | Deno.PointerValue /* Windows.Win32.Graphics.Gdi.HDC */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libGDI32_dll.StrokePath(util.toPointer(hdc)));
}

export function WidenPath(
  hdc: Uint8Array | Deno.PointerValue /* Windows.Win32.Graphics.Gdi.HDC */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libGDI32_dll.WidenPath(util.toPointer(hdc)));
}

export function ExtCreatePen(
  iPenStyle: PEN_STYLE /* Windows.Win32.Graphics.Gdi.PEN_STYLE */,
  cWidth: number /* u32 */,
  plbrush: Deno.PointerValue | Uint8Array /* ptr */,
  cStyle: number /* u32 */,
  pstyle: Deno.PointerValue | Uint8Array /* ptr */,
): Deno.PointerValue /* Windows.Win32.Graphics.Gdi.HPEN */ {
  return libGDI32_dll.ExtCreatePen(iPenStyle, cWidth, util.toPointer(plbrush), cStyle, util.toPointer(pstyle));
}

export function GetMiterLimit(
  hdc: Uint8Array | Deno.PointerValue /* Windows.Win32.Graphics.Gdi.HDC */,
  plimit: Deno.PointerValue | Uint8Array /* ptr */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libGDI32_dll.GetMiterLimit(util.toPointer(hdc), util.toPointer(plimit)));
}

export function GetArcDirection(
  hdc: Uint8Array | Deno.PointerValue /* Windows.Win32.Graphics.Gdi.HDC */,
): number /* i32 */ {
  return libGDI32_dll.GetArcDirection(util.toPointer(hdc));
}

export function GetObjectW(
  h: Uint8Array | Deno.PointerValue /* Windows.Win32.Graphics.Gdi.HGDIOBJ */,
  c: number /* i32 */,
  pv: Deno.PointerValue | Uint8Array /* ptr */,
): number /* i32 */ {
  return libGDI32_dll.GetObjectW(util.toPointer(h), c, util.toPointer(pv));
}

export function MoveToEx(
  hdc: Uint8Array | Deno.PointerValue /* Windows.Win32.Graphics.Gdi.HDC */,
  x: number /* i32 */,
  y: number /* i32 */,
  lppt: Deno.PointerValue | Uint8Array /* ptr */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libGDI32_dll.MoveToEx(util.toPointer(hdc), x, y, util.toPointer(lppt)));
}

export function TextOutA(
  hdc: Uint8Array | Deno.PointerValue /* Windows.Win32.Graphics.Gdi.HDC */,
  x: number /* i32 */,
  y: number /* i32 */,
  lpString: string | null | Uint8Array /* Windows.Win32.Foundation.PSTR */,
  c: number /* i32 */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libGDI32_dll.TextOutA(util.toPointer(hdc), x, y, util.pstrToFfi(lpString), c));
}

export function TextOutW(
  hdc: Uint8Array | Deno.PointerValue /* Windows.Win32.Graphics.Gdi.HDC */,
  x: number /* i32 */,
  y: number /* i32 */,
  lpString: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  c: number /* i32 */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libGDI32_dll.TextOutW(util.toPointer(hdc), x, y, util.pwstrToFfi(lpString), c));
}

export function ExtTextOutA(
  hdc: Uint8Array | Deno.PointerValue /* Windows.Win32.Graphics.Gdi.HDC */,
  x: number /* i32 */,
  y: number /* i32 */,
  options: ETO_OPTIONS /* Windows.Win32.Graphics.Gdi.ETO_OPTIONS */,
  lprect: Deno.PointerValue | Uint8Array /* ptr */,
  lpString: string | null | Uint8Array /* Windows.Win32.Foundation.PSTR */,
  c: number /* u32 */,
  lpDx: Deno.PointerValue | Uint8Array /* ptr */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libGDI32_dll.ExtTextOutA(util.toPointer(hdc), x, y, options, util.toPointer(lprect), util.pstrToFfi(lpString), c, util.toPointer(lpDx)));
}

export function ExtTextOutW(
  hdc: Uint8Array | Deno.PointerValue /* Windows.Win32.Graphics.Gdi.HDC */,
  x: number /* i32 */,
  y: number /* i32 */,
  options: ETO_OPTIONS /* Windows.Win32.Graphics.Gdi.ETO_OPTIONS */,
  lprect: Deno.PointerValue | Uint8Array /* ptr */,
  lpString: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  c: number /* u32 */,
  lpDx: Deno.PointerValue | Uint8Array /* ptr */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libGDI32_dll.ExtTextOutW(util.toPointer(hdc), x, y, options, util.toPointer(lprect), util.pwstrToFfi(lpString), c, util.toPointer(lpDx)));
}

export function PolyTextOutA(
  hdc: Uint8Array | Deno.PointerValue /* Windows.Win32.Graphics.Gdi.HDC */,
  ppt: Deno.PointerValue | Uint8Array /* ptr */,
  nstrings: number /* i32 */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libGDI32_dll.PolyTextOutA(util.toPointer(hdc), util.toPointer(ppt), nstrings));
}

export function PolyTextOutW(
  hdc: Uint8Array | Deno.PointerValue /* Windows.Win32.Graphics.Gdi.HDC */,
  ppt: Deno.PointerValue | Uint8Array /* ptr */,
  nstrings: number /* i32 */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libGDI32_dll.PolyTextOutW(util.toPointer(hdc), util.toPointer(ppt), nstrings));
}

export function CreatePolygonRgn(
  pptl: Deno.PointerValue | Uint8Array /* ptr */,
  cPoint: number /* i32 */,
  iMode: CREATE_POLYGON_RGN_MODE /* Windows.Win32.Graphics.Gdi.CREATE_POLYGON_RGN_MODE */,
): Deno.PointerValue /* Windows.Win32.Graphics.Gdi.HRGN */ {
  return libGDI32_dll.CreatePolygonRgn(util.toPointer(pptl), cPoint, iMode);
}

export function DPtoLP(
  hdc: Uint8Array | Deno.PointerValue /* Windows.Win32.Graphics.Gdi.HDC */,
  lppt: Deno.PointerValue | Uint8Array /* ptr */,
  c: number /* i32 */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libGDI32_dll.DPtoLP(util.toPointer(hdc), util.toPointer(lppt), c));
}

export function LPtoDP(
  hdc: Uint8Array | Deno.PointerValue /* Windows.Win32.Graphics.Gdi.HDC */,
  lppt: Deno.PointerValue | Uint8Array /* ptr */,
  c: number /* i32 */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libGDI32_dll.LPtoDP(util.toPointer(hdc), util.toPointer(lppt), c));
}

export function Polygon(
  hdc: Uint8Array | Deno.PointerValue /* Windows.Win32.Graphics.Gdi.HDC */,
  apt: Deno.PointerValue | Uint8Array /* ptr */,
  cpt: number /* i32 */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libGDI32_dll.Polygon(util.toPointer(hdc), util.toPointer(apt), cpt));
}

export function Polyline(
  hdc: Uint8Array | Deno.PointerValue /* Windows.Win32.Graphics.Gdi.HDC */,
  apt: Deno.PointerValue | Uint8Array /* ptr */,
  cpt: number /* i32 */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libGDI32_dll.Polyline(util.toPointer(hdc), util.toPointer(apt), cpt));
}

export function PolyBezier(
  hdc: Uint8Array | Deno.PointerValue /* Windows.Win32.Graphics.Gdi.HDC */,
  apt: Deno.PointerValue | Uint8Array /* ptr */,
  cpt: number /* u32 */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libGDI32_dll.PolyBezier(util.toPointer(hdc), util.toPointer(apt), cpt));
}

export function PolyBezierTo(
  hdc: Uint8Array | Deno.PointerValue /* Windows.Win32.Graphics.Gdi.HDC */,
  apt: Deno.PointerValue | Uint8Array /* ptr */,
  cpt: number /* u32 */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libGDI32_dll.PolyBezierTo(util.toPointer(hdc), util.toPointer(apt), cpt));
}

export function PolylineTo(
  hdc: Uint8Array | Deno.PointerValue /* Windows.Win32.Graphics.Gdi.HDC */,
  apt: Deno.PointerValue | Uint8Array /* ptr */,
  cpt: number /* u32 */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libGDI32_dll.PolylineTo(util.toPointer(hdc), util.toPointer(apt), cpt));
}

export function SetViewportExtEx(
  hdc: Uint8Array | Deno.PointerValue /* Windows.Win32.Graphics.Gdi.HDC */,
  x: number /* i32 */,
  y: number /* i32 */,
  lpsz: Deno.PointerValue | Uint8Array /* ptr */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libGDI32_dll.SetViewportExtEx(util.toPointer(hdc), x, y, util.toPointer(lpsz)));
}

export function SetViewportOrgEx(
  hdc: Uint8Array | Deno.PointerValue /* Windows.Win32.Graphics.Gdi.HDC */,
  x: number /* i32 */,
  y: number /* i32 */,
  lppt: Deno.PointerValue | Uint8Array /* ptr */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libGDI32_dll.SetViewportOrgEx(util.toPointer(hdc), x, y, util.toPointer(lppt)));
}

export function SetWindowExtEx(
  hdc: Uint8Array | Deno.PointerValue /* Windows.Win32.Graphics.Gdi.HDC */,
  x: number /* i32 */,
  y: number /* i32 */,
  lpsz: Deno.PointerValue | Uint8Array /* ptr */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libGDI32_dll.SetWindowExtEx(util.toPointer(hdc), x, y, util.toPointer(lpsz)));
}

export function SetWindowOrgEx(
  hdc: Uint8Array | Deno.PointerValue /* Windows.Win32.Graphics.Gdi.HDC */,
  x: number /* i32 */,
  y: number /* i32 */,
  lppt: Deno.PointerValue | Uint8Array /* ptr */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libGDI32_dll.SetWindowOrgEx(util.toPointer(hdc), x, y, util.toPointer(lppt)));
}

export function OffsetViewportOrgEx(
  hdc: Uint8Array | Deno.PointerValue /* Windows.Win32.Graphics.Gdi.HDC */,
  x: number /* i32 */,
  y: number /* i32 */,
  lppt: Deno.PointerValue | Uint8Array /* ptr */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libGDI32_dll.OffsetViewportOrgEx(util.toPointer(hdc), x, y, util.toPointer(lppt)));
}

export function OffsetWindowOrgEx(
  hdc: Uint8Array | Deno.PointerValue /* Windows.Win32.Graphics.Gdi.HDC */,
  x: number /* i32 */,
  y: number /* i32 */,
  lppt: Deno.PointerValue | Uint8Array /* ptr */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libGDI32_dll.OffsetWindowOrgEx(util.toPointer(hdc), x, y, util.toPointer(lppt)));
}

export function ScaleViewportExtEx(
  hdc: Uint8Array | Deno.PointerValue /* Windows.Win32.Graphics.Gdi.HDC */,
  xn: number /* i32 */,
  dx: number /* i32 */,
  yn: number /* i32 */,
  yd: number /* i32 */,
  lpsz: Deno.PointerValue | Uint8Array /* ptr */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libGDI32_dll.ScaleViewportExtEx(util.toPointer(hdc), xn, dx, yn, yd, util.toPointer(lpsz)));
}

export function ScaleWindowExtEx(
  hdc: Uint8Array | Deno.PointerValue /* Windows.Win32.Graphics.Gdi.HDC */,
  xn: number /* i32 */,
  xd: number /* i32 */,
  yn: number /* i32 */,
  yd: number /* i32 */,
  lpsz: Deno.PointerValue | Uint8Array /* ptr */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libGDI32_dll.ScaleWindowExtEx(util.toPointer(hdc), xn, xd, yn, yd, util.toPointer(lpsz)));
}

export function SetBitmapDimensionEx(
  hbm: Uint8Array | Deno.PointerValue /* Windows.Win32.Graphics.Gdi.HBITMAP */,
  w: number /* i32 */,
  h: number /* i32 */,
  lpsz: Deno.PointerValue | Uint8Array /* ptr */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libGDI32_dll.SetBitmapDimensionEx(util.toPointer(hbm), w, h, util.toPointer(lpsz)));
}

export function SetBrushOrgEx(
  hdc: Uint8Array | Deno.PointerValue /* Windows.Win32.Graphics.Gdi.HDC */,
  x: number /* i32 */,
  y: number /* i32 */,
  lppt: Deno.PointerValue | Uint8Array /* ptr */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libGDI32_dll.SetBrushOrgEx(util.toPointer(hdc), x, y, util.toPointer(lppt)));
}

export function GetTextFaceA(
  hdc: Uint8Array | Deno.PointerValue /* Windows.Win32.Graphics.Gdi.HDC */,
  c: number /* i32 */,
  lpName: string | null | Uint8Array /* Windows.Win32.Foundation.PSTR */,
): number /* i32 */ {
  return libGDI32_dll.GetTextFaceA(util.toPointer(hdc), c, util.pstrToFfi(lpName));
}

export function GetTextFaceW(
  hdc: Uint8Array | Deno.PointerValue /* Windows.Win32.Graphics.Gdi.HDC */,
  c: number /* i32 */,
  lpName: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
): number /* i32 */ {
  return libGDI32_dll.GetTextFaceW(util.toPointer(hdc), c, util.pwstrToFfi(lpName));
}

export function GetKerningPairsA(
  hdc: Uint8Array | Deno.PointerValue /* Windows.Win32.Graphics.Gdi.HDC */,
  nPairs: number /* u32 */,
  lpKernPair: Deno.PointerValue | Uint8Array /* ptr */,
): number /* u32 */ {
  return libGDI32_dll.GetKerningPairsA(util.toPointer(hdc), nPairs, util.toPointer(lpKernPair));
}

export function GetKerningPairsW(
  hdc: Uint8Array | Deno.PointerValue /* Windows.Win32.Graphics.Gdi.HDC */,
  nPairs: number /* u32 */,
  lpKernPair: Deno.PointerValue | Uint8Array /* ptr */,
): number /* u32 */ {
  return libGDI32_dll.GetKerningPairsW(util.toPointer(hdc), nPairs, util.toPointer(lpKernPair));
}

export function GetDCOrgEx(
  hdc: Uint8Array | Deno.PointerValue /* Windows.Win32.Graphics.Gdi.HDC */,
  lppt: Deno.PointerValue | Uint8Array /* ptr */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libGDI32_dll.GetDCOrgEx(util.toPointer(hdc), util.toPointer(lppt)));
}

export function FixBrushOrgEx(
  hdc: Uint8Array | Deno.PointerValue /* Windows.Win32.Graphics.Gdi.HDC */,
  x: number /* i32 */,
  y: number /* i32 */,
  ptl: Deno.PointerValue | Uint8Array /* ptr */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libGDI32_dll.FixBrushOrgEx(util.toPointer(hdc), x, y, util.toPointer(ptl)));
}

export function UnrealizeObject(
  h: Uint8Array | Deno.PointerValue /* Windows.Win32.Graphics.Gdi.HGDIOBJ */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libGDI32_dll.UnrealizeObject(util.toPointer(h)));
}

export function GdiFlush(): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libGDI32_dll.GdiFlush());
}

export function GdiSetBatchLimit(
  dw: number /* u32 */,
): number /* u32 */ {
  return libGDI32_dll.GdiSetBatchLimit(dw);
}

export function GdiGetBatchLimit(): number /* u32 */ {
  return libGDI32_dll.GdiGetBatchLimit();
}

export function wglSwapMultipleBuffers(
  param0: number /* u32 */,
  param1: Deno.PointerValue | Uint8Array /* ptr */,
): number /* u32 */ {
  return libOPENGL32_dll.wglSwapMultipleBuffers(param0, util.toPointer(param1));
}

export function CreateFontPackage(
  puchSrcBuffer: Deno.PointerValue | Uint8Array /* ptr */,
  ulSrcBufferSize: number /* u32 */,
  ppuchFontPackageBuffer: Deno.PointerValue | Uint8Array /* ptr */,
  pulFontPackageBufferSize: Deno.PointerValue | Uint8Array /* ptr */,
  pulBytesWritten: Deno.PointerValue | Uint8Array /* ptr */,
  usFlag: number /* u16 */,
  usTTCIndex: number /* u16 */,
  usSubsetFormat: number /* u16 */,
  usSubsetLanguage: number /* u16 */,
  usSubsetPlatform: CREATE_FONT_PACKAGE_SUBSET_PLATFORM /* Windows.Win32.Graphics.Gdi.CREATE_FONT_PACKAGE_SUBSET_PLATFORM */,
  usSubsetEncoding: CREATE_FONT_PACKAGE_SUBSET_ENCODING /* Windows.Win32.Graphics.Gdi.CREATE_FONT_PACKAGE_SUBSET_ENCODING */,
  pusSubsetKeepList: Deno.PointerValue | Uint8Array /* ptr */,
  usSubsetListCount: number /* u16 */,
  lpfnAllocate: Uint8Array | Deno.PointerValue /* Windows.Win32.Graphics.Gdi.CFP_ALLOCPROC */,
  lpfnReAllocate: Uint8Array | Deno.PointerValue /* Windows.Win32.Graphics.Gdi.CFP_REALLOCPROC */,
  lpfnFree: Uint8Array | Deno.PointerValue /* Windows.Win32.Graphics.Gdi.CFP_FREEPROC */,
  lpvReserved: Deno.PointerValue | Uint8Array /* ptr */,
): number /* u32 */ {
  return libFONTSUB_dll.CreateFontPackage(util.toPointer(puchSrcBuffer), ulSrcBufferSize, util.toPointer(ppuchFontPackageBuffer), util.toPointer(pulFontPackageBufferSize), util.toPointer(pulBytesWritten), usFlag, usTTCIndex, usSubsetFormat, usSubsetLanguage, usSubsetPlatform, usSubsetEncoding, util.toPointer(pusSubsetKeepList), usSubsetListCount, util.toPointer(lpfnAllocate), util.toPointer(lpfnReAllocate), util.toPointer(lpfnFree), util.toPointer(lpvReserved));
}

export function MergeFontPackage(
  puchMergeFontBuffer: Deno.PointerValue | Uint8Array /* ptr */,
  ulMergeFontBufferSize: number /* u32 */,
  puchFontPackageBuffer: Deno.PointerValue | Uint8Array /* ptr */,
  ulFontPackageBufferSize: number /* u32 */,
  ppuchDestBuffer: Deno.PointerValue | Uint8Array /* ptr */,
  pulDestBufferSize: Deno.PointerValue | Uint8Array /* ptr */,
  pulBytesWritten: Deno.PointerValue | Uint8Array /* ptr */,
  usMode: number /* u16 */,
  lpfnAllocate: Uint8Array | Deno.PointerValue /* Windows.Win32.Graphics.Gdi.CFP_ALLOCPROC */,
  lpfnReAllocate: Uint8Array | Deno.PointerValue /* Windows.Win32.Graphics.Gdi.CFP_REALLOCPROC */,
  lpfnFree: Uint8Array | Deno.PointerValue /* Windows.Win32.Graphics.Gdi.CFP_FREEPROC */,
  lpvReserved: Deno.PointerValue | Uint8Array /* ptr */,
): number /* u32 */ {
  return libFONTSUB_dll.MergeFontPackage(util.toPointer(puchMergeFontBuffer), ulMergeFontBufferSize, util.toPointer(puchFontPackageBuffer), ulFontPackageBufferSize, util.toPointer(ppuchDestBuffer), util.toPointer(pulDestBufferSize), util.toPointer(pulBytesWritten), usMode, util.toPointer(lpfnAllocate), util.toPointer(lpfnReAllocate), util.toPointer(lpfnFree), util.toPointer(lpvReserved));
}

export function TTEmbedFont(
  hDC: Uint8Array | Deno.PointerValue /* Windows.Win32.Graphics.Gdi.HDC */,
  ulFlags: TTEMBED_FLAGS /* Windows.Win32.Graphics.Gdi.TTEMBED_FLAGS */,
  ulCharSet: EMBED_FONT_CHARSET /* Windows.Win32.Graphics.Gdi.EMBED_FONT_CHARSET */,
  pulPrivStatus: Deno.PointerValue | Uint8Array /* ptr */,
  pulStatus: Deno.PointerValue | Uint8Array /* ptr */,
  lpfnWriteToStream: Uint8Array | Deno.PointerValue /* Windows.Win32.Graphics.Gdi.WRITEEMBEDPROC */,
  lpvWriteStream: Deno.PointerValue | Uint8Array /* ptr */,
  pusCharCodeSet: Deno.PointerValue | Uint8Array /* ptr */,
  usCharCodeCount: number /* u16 */,
  usLanguage: number /* u16 */,
  pTTEmbedInfo: Deno.PointerValue | Uint8Array /* ptr */,
): number /* i32 */ {
  return libt2embed_dll.TTEmbedFont(util.toPointer(hDC), ulFlags, ulCharSet, util.toPointer(pulPrivStatus), util.toPointer(pulStatus), util.toPointer(lpfnWriteToStream), util.toPointer(lpvWriteStream), util.toPointer(pusCharCodeSet), usCharCodeCount, usLanguage, util.toPointer(pTTEmbedInfo));
}

export function TTEmbedFontFromFileA(
  hDC: Uint8Array | Deno.PointerValue /* Windows.Win32.Graphics.Gdi.HDC */,
  szFontFileName: string | null | Uint8Array /* Windows.Win32.Foundation.PSTR */,
  usTTCIndex: number /* u16 */,
  ulFlags: TTEMBED_FLAGS /* Windows.Win32.Graphics.Gdi.TTEMBED_FLAGS */,
  ulCharSet: EMBED_FONT_CHARSET /* Windows.Win32.Graphics.Gdi.EMBED_FONT_CHARSET */,
  pulPrivStatus: Deno.PointerValue | Uint8Array /* ptr */,
  pulStatus: Deno.PointerValue | Uint8Array /* ptr */,
  lpfnWriteToStream: Uint8Array | Deno.PointerValue /* Windows.Win32.Graphics.Gdi.WRITEEMBEDPROC */,
  lpvWriteStream: Deno.PointerValue | Uint8Array /* ptr */,
  pusCharCodeSet: Deno.PointerValue | Uint8Array /* ptr */,
  usCharCodeCount: number /* u16 */,
  usLanguage: number /* u16 */,
  pTTEmbedInfo: Deno.PointerValue | Uint8Array /* ptr */,
): number /* i32 */ {
  return libt2embed_dll.TTEmbedFontFromFileA(util.toPointer(hDC), util.pstrToFfi(szFontFileName), usTTCIndex, ulFlags, ulCharSet, util.toPointer(pulPrivStatus), util.toPointer(pulStatus), util.toPointer(lpfnWriteToStream), util.toPointer(lpvWriteStream), util.toPointer(pusCharCodeSet), usCharCodeCount, usLanguage, util.toPointer(pTTEmbedInfo));
}

export function TTLoadEmbeddedFont(
  phFontReference: Deno.PointerValue | Uint8Array /* ptr */,
  ulFlags: number /* u32 */,
  pulPrivStatus: Deno.PointerValue | Uint8Array /* ptr */,
  ulPrivs: FONT_LICENSE_PRIVS /* Windows.Win32.Graphics.Gdi.FONT_LICENSE_PRIVS */,
  pulStatus: Deno.PointerValue | Uint8Array /* ptr */,
  lpfnReadFromStream: Uint8Array | Deno.PointerValue /* Windows.Win32.Graphics.Gdi.READEMBEDPROC */,
  lpvReadStream: Deno.PointerValue | Uint8Array /* ptr */,
  szWinFamilyName: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  szMacFamilyName: string | null | Uint8Array /* Windows.Win32.Foundation.PSTR */,
  pTTLoadInfo: Deno.PointerValue | Uint8Array /* ptr */,
): number /* i32 */ {
  return libt2embed_dll.TTLoadEmbeddedFont(util.toPointer(phFontReference), ulFlags, util.toPointer(pulPrivStatus), ulPrivs, util.toPointer(pulStatus), util.toPointer(lpfnReadFromStream), util.toPointer(lpvReadStream), util.pwstrToFfi(szWinFamilyName), util.pstrToFfi(szMacFamilyName), util.toPointer(pTTLoadInfo));
}

export function TTGetEmbeddedFontInfo(
  ulFlags: TTEMBED_FLAGS /* Windows.Win32.Graphics.Gdi.TTEMBED_FLAGS */,
  pulPrivStatus: Deno.PointerValue | Uint8Array /* ptr */,
  ulPrivs: FONT_LICENSE_PRIVS /* Windows.Win32.Graphics.Gdi.FONT_LICENSE_PRIVS */,
  pulStatus: Deno.PointerValue | Uint8Array /* ptr */,
  lpfnReadFromStream: Uint8Array | Deno.PointerValue /* Windows.Win32.Graphics.Gdi.READEMBEDPROC */,
  lpvReadStream: Deno.PointerValue | Uint8Array /* ptr */,
  pTTLoadInfo: Deno.PointerValue | Uint8Array /* ptr */,
): number /* i32 */ {
  return libt2embed_dll.TTGetEmbeddedFontInfo(ulFlags, util.toPointer(pulPrivStatus), ulPrivs, util.toPointer(pulStatus), util.toPointer(lpfnReadFromStream), util.toPointer(lpvReadStream), util.toPointer(pTTLoadInfo));
}

export function TTDeleteEmbeddedFont(
  hFontReference: Uint8Array | Deno.PointerValue /* Windows.Win32.Foundation.HANDLE */,
  ulFlags: number /* u32 */,
  pulStatus: Deno.PointerValue | Uint8Array /* ptr */,
): number /* i32 */ {
  return libt2embed_dll.TTDeleteEmbeddedFont(util.toPointer(hFontReference), ulFlags, util.toPointer(pulStatus));
}

export function TTGetEmbeddingType(
  hDC: Uint8Array | Deno.PointerValue /* Windows.Win32.Graphics.Gdi.HDC */,
  pulEmbedType: Deno.PointerValue | Uint8Array /* ptr */,
): number /* i32 */ {
  return libt2embed_dll.TTGetEmbeddingType(util.toPointer(hDC), util.toPointer(pulEmbedType));
}

export function TTCharToUnicode(
  hDC: Uint8Array | Deno.PointerValue /* Windows.Win32.Graphics.Gdi.HDC */,
  pucCharCodes: Deno.PointerValue | Uint8Array /* ptr */,
  ulCharCodeSize: number /* u32 */,
  pusShortCodes: Deno.PointerValue | Uint8Array /* ptr */,
  ulShortCodeSize: number /* u32 */,
  ulFlags: number /* u32 */,
): number /* i32 */ {
  return libt2embed_dll.TTCharToUnicode(util.toPointer(hDC), util.toPointer(pucCharCodes), ulCharCodeSize, util.toPointer(pusShortCodes), ulShortCodeSize, ulFlags);
}

export function TTRunValidationTests(
  hDC: Uint8Array | Deno.PointerValue /* Windows.Win32.Graphics.Gdi.HDC */,
  pTestParam: Deno.PointerValue | Uint8Array /* ptr */,
): number /* i32 */ {
  return libt2embed_dll.TTRunValidationTests(util.toPointer(hDC), util.toPointer(pTestParam));
}

export function TTIsEmbeddingEnabled(
  hDC: Uint8Array | Deno.PointerValue /* Windows.Win32.Graphics.Gdi.HDC */,
  pbEnabled: Deno.PointerValue | Uint8Array /* ptr */,
): number /* i32 */ {
  return libt2embed_dll.TTIsEmbeddingEnabled(util.toPointer(hDC), util.toPointer(pbEnabled));
}

export function TTIsEmbeddingEnabledForFacename(
  lpszFacename: string | null | Uint8Array /* Windows.Win32.Foundation.PSTR */,
  pbEnabled: Deno.PointerValue | Uint8Array /* ptr */,
): number /* i32 */ {
  return libt2embed_dll.TTIsEmbeddingEnabledForFacename(util.pstrToFfi(lpszFacename), util.toPointer(pbEnabled));
}

export function TTEnableEmbeddingForFacename(
  lpszFacename: string | null | Uint8Array /* Windows.Win32.Foundation.PSTR */,
  bEnable: boolean /* Windows.Win32.Foundation.BOOL */,
): number /* i32 */ {
  return libt2embed_dll.TTEnableEmbeddingForFacename(util.pstrToFfi(lpszFacename), util.boolToFfi(bEnable));
}

export function TTEmbedFontEx(
  hDC: Uint8Array | Deno.PointerValue /* Windows.Win32.Graphics.Gdi.HDC */,
  ulFlags: TTEMBED_FLAGS /* Windows.Win32.Graphics.Gdi.TTEMBED_FLAGS */,
  ulCharSet: EMBED_FONT_CHARSET /* Windows.Win32.Graphics.Gdi.EMBED_FONT_CHARSET */,
  pulPrivStatus: Deno.PointerValue | Uint8Array /* ptr */,
  pulStatus: Deno.PointerValue | Uint8Array /* ptr */,
  lpfnWriteToStream: Uint8Array | Deno.PointerValue /* Windows.Win32.Graphics.Gdi.WRITEEMBEDPROC */,
  lpvWriteStream: Deno.PointerValue | Uint8Array /* ptr */,
  pulCharCodeSet: Deno.PointerValue | Uint8Array /* ptr */,
  usCharCodeCount: number /* u16 */,
  usLanguage: number /* u16 */,
  pTTEmbedInfo: Deno.PointerValue | Uint8Array /* ptr */,
): number /* i32 */ {
  return libt2embed_dll.TTEmbedFontEx(util.toPointer(hDC), ulFlags, ulCharSet, util.toPointer(pulPrivStatus), util.toPointer(pulStatus), util.toPointer(lpfnWriteToStream), util.toPointer(lpvWriteStream), util.toPointer(pulCharCodeSet), usCharCodeCount, usLanguage, util.toPointer(pTTEmbedInfo));
}

export function TTRunValidationTestsEx(
  hDC: Uint8Array | Deno.PointerValue /* Windows.Win32.Graphics.Gdi.HDC */,
  pTestParam: Deno.PointerValue | Uint8Array /* ptr */,
): number /* i32 */ {
  return libt2embed_dll.TTRunValidationTestsEx(util.toPointer(hDC), util.toPointer(pTestParam));
}

export function TTGetNewFontName(
  phFontReference: Deno.PointerValue | Uint8Array /* ptr */,
  wzWinFamilyName: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  cchMaxWinName: number /* i32 */,
  szMacFamilyName: string | null | Uint8Array /* Windows.Win32.Foundation.PSTR */,
  cchMaxMacName: number /* i32 */,
): number /* i32 */ {
  return libt2embed_dll.TTGetNewFontName(util.toPointer(phFontReference), util.pwstrToFfi(wzWinFamilyName), cchMaxWinName, util.pstrToFfi(szMacFamilyName), cchMaxMacName);
}

export function DrawEdge(
  hdc: Uint8Array | Deno.PointerValue /* Windows.Win32.Graphics.Gdi.HDC */,
  qrc: Deno.PointerValue | Uint8Array /* ptr */,
  edge: DRAWEDGE_FLAGS /* Windows.Win32.Graphics.Gdi.DRAWEDGE_FLAGS */,
  grfFlags: DRAW_EDGE_FLAGS /* Windows.Win32.Graphics.Gdi.DRAW_EDGE_FLAGS */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libUSER32_dll.DrawEdge(util.toPointer(hdc), util.toPointer(qrc), edge, grfFlags));
}

export function DrawFrameControl(
  param0: Uint8Array | Deno.PointerValue /* Windows.Win32.Graphics.Gdi.HDC */,
  param1: Deno.PointerValue | Uint8Array /* ptr */,
  param2: DFC_TYPE /* Windows.Win32.Graphics.Gdi.DFC_TYPE */,
  param3: DFCS_STATE /* Windows.Win32.Graphics.Gdi.DFCS_STATE */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libUSER32_dll.DrawFrameControl(util.toPointer(param0), util.toPointer(param1), param2, param3));
}

export function DrawCaption(
  hwnd: Deno.PointerValue /* Windows.Win32.Foundation.HWND */,
  hdc: Uint8Array | Deno.PointerValue /* Windows.Win32.Graphics.Gdi.HDC */,
  lprect: Deno.PointerValue | Uint8Array /* ptr */,
  flags: DRAW_CAPTION_FLAGS /* Windows.Win32.Graphics.Gdi.DRAW_CAPTION_FLAGS */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libUSER32_dll.DrawCaption((hwnd), util.toPointer(hdc), util.toPointer(lprect), flags));
}

export function DrawAnimatedRects(
  hwnd: Deno.PointerValue /* Windows.Win32.Foundation.HWND */,
  idAni: number /* i32 */,
  lprcFrom: Deno.PointerValue | Uint8Array /* ptr */,
  lprcTo: Deno.PointerValue | Uint8Array /* ptr */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libUSER32_dll.DrawAnimatedRects((hwnd), idAni, util.toPointer(lprcFrom), util.toPointer(lprcTo)));
}

export function DrawTextA(
  hdc: Uint8Array | Deno.PointerValue /* Windows.Win32.Graphics.Gdi.HDC */,
  lpchText: string | null | Uint8Array /* Windows.Win32.Foundation.PSTR */,
  cchText: number /* i32 */,
  lprc: Deno.PointerValue | Uint8Array /* ptr */,
  format: DRAW_TEXT_FORMAT /* Windows.Win32.Graphics.Gdi.DRAW_TEXT_FORMAT */,
): number /* i32 */ {
  return libUSER32_dll.DrawTextA(util.toPointer(hdc), util.pstrToFfi(lpchText), cchText, util.toPointer(lprc), format);
}

export function DrawTextW(
  hdc: Uint8Array | Deno.PointerValue /* Windows.Win32.Graphics.Gdi.HDC */,
  lpchText: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  cchText: number /* i32 */,
  lprc: Deno.PointerValue | Uint8Array /* ptr */,
  format: DRAW_TEXT_FORMAT /* Windows.Win32.Graphics.Gdi.DRAW_TEXT_FORMAT */,
): number /* i32 */ {
  return libUSER32_dll.DrawTextW(util.toPointer(hdc), util.pwstrToFfi(lpchText), cchText, util.toPointer(lprc), format);
}

export function DrawTextExA(
  hdc: Uint8Array | Deno.PointerValue /* Windows.Win32.Graphics.Gdi.HDC */,
  lpchText: string | null | Uint8Array /* Windows.Win32.Foundation.PSTR */,
  cchText: number /* i32 */,
  lprc: Deno.PointerValue | Uint8Array /* ptr */,
  format: DRAW_TEXT_FORMAT /* Windows.Win32.Graphics.Gdi.DRAW_TEXT_FORMAT */,
  lpdtp: Deno.PointerValue | Uint8Array /* ptr */,
): number /* i32 */ {
  return libUSER32_dll.DrawTextExA(util.toPointer(hdc), util.pstrToFfi(lpchText), cchText, util.toPointer(lprc), format, util.toPointer(lpdtp));
}

export function DrawTextExW(
  hdc: Uint8Array | Deno.PointerValue /* Windows.Win32.Graphics.Gdi.HDC */,
  lpchText: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  cchText: number /* i32 */,
  lprc: Deno.PointerValue | Uint8Array /* ptr */,
  format: DRAW_TEXT_FORMAT /* Windows.Win32.Graphics.Gdi.DRAW_TEXT_FORMAT */,
  lpdtp: Deno.PointerValue | Uint8Array /* ptr */,
): number /* i32 */ {
  return libUSER32_dll.DrawTextExW(util.toPointer(hdc), util.pwstrToFfi(lpchText), cchText, util.toPointer(lprc), format, util.toPointer(lpdtp));
}

export function GrayStringA(
  hDC: Uint8Array | Deno.PointerValue /* Windows.Win32.Graphics.Gdi.HDC */,
  hBrush: Uint8Array | Deno.PointerValue /* Windows.Win32.Graphics.Gdi.HBRUSH */,
  lpOutputFunc: Uint8Array | Deno.PointerValue /* Windows.Win32.Graphics.Gdi.GRAYSTRINGPROC */,
  lpData: Uint8Array | Deno.PointerValue /* Windows.Win32.Foundation.LPARAM */,
  nCount: number /* i32 */,
  X: number /* i32 */,
  Y: number /* i32 */,
  nWidth: number /* i32 */,
  nHeight: number /* i32 */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libUSER32_dll.GrayStringA(util.toPointer(hDC), util.toPointer(hBrush), util.toPointer(lpOutputFunc), util.toPointer(lpData), nCount, X, Y, nWidth, nHeight));
}

export function GrayStringW(
  hDC: Uint8Array | Deno.PointerValue /* Windows.Win32.Graphics.Gdi.HDC */,
  hBrush: Uint8Array | Deno.PointerValue /* Windows.Win32.Graphics.Gdi.HBRUSH */,
  lpOutputFunc: Uint8Array | Deno.PointerValue /* Windows.Win32.Graphics.Gdi.GRAYSTRINGPROC */,
  lpData: Uint8Array | Deno.PointerValue /* Windows.Win32.Foundation.LPARAM */,
  nCount: number /* i32 */,
  X: number /* i32 */,
  Y: number /* i32 */,
  nWidth: number /* i32 */,
  nHeight: number /* i32 */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libUSER32_dll.GrayStringW(util.toPointer(hDC), util.toPointer(hBrush), util.toPointer(lpOutputFunc), util.toPointer(lpData), nCount, X, Y, nWidth, nHeight));
}

export function DrawStateA(
  hdc: Uint8Array | Deno.PointerValue /* Windows.Win32.Graphics.Gdi.HDC */,
  hbrFore: Uint8Array | Deno.PointerValue /* Windows.Win32.Graphics.Gdi.HBRUSH */,
  qfnCallBack: Uint8Array | Deno.PointerValue /* Windows.Win32.Graphics.Gdi.DRAWSTATEPROC */,
  lData: Uint8Array | Deno.PointerValue /* Windows.Win32.Foundation.LPARAM */,
  wData: Uint8Array | Deno.PointerValue /* Windows.Win32.Foundation.WPARAM */,
  x: number /* i32 */,
  y: number /* i32 */,
  cx: number /* i32 */,
  cy: number /* i32 */,
  uFlags: DRAWSTATE_FLAGS /* Windows.Win32.Graphics.Gdi.DRAWSTATE_FLAGS */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libUSER32_dll.DrawStateA(util.toPointer(hdc), util.toPointer(hbrFore), util.toPointer(qfnCallBack), util.toPointer(lData), util.toPointer(wData), x, y, cx, cy, uFlags));
}

export function DrawStateW(
  hdc: Uint8Array | Deno.PointerValue /* Windows.Win32.Graphics.Gdi.HDC */,
  hbrFore: Uint8Array | Deno.PointerValue /* Windows.Win32.Graphics.Gdi.HBRUSH */,
  qfnCallBack: Uint8Array | Deno.PointerValue /* Windows.Win32.Graphics.Gdi.DRAWSTATEPROC */,
  lData: Uint8Array | Deno.PointerValue /* Windows.Win32.Foundation.LPARAM */,
  wData: Uint8Array | Deno.PointerValue /* Windows.Win32.Foundation.WPARAM */,
  x: number /* i32 */,
  y: number /* i32 */,
  cx: number /* i32 */,
  cy: number /* i32 */,
  uFlags: DRAWSTATE_FLAGS /* Windows.Win32.Graphics.Gdi.DRAWSTATE_FLAGS */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libUSER32_dll.DrawStateW(util.toPointer(hdc), util.toPointer(hbrFore), util.toPointer(qfnCallBack), util.toPointer(lData), util.toPointer(wData), x, y, cx, cy, uFlags));
}

export function TabbedTextOutA(
  hdc: Uint8Array | Deno.PointerValue /* Windows.Win32.Graphics.Gdi.HDC */,
  x: number /* i32 */,
  y: number /* i32 */,
  lpString: string | null | Uint8Array /* Windows.Win32.Foundation.PSTR */,
  chCount: number /* i32 */,
  nTabPositions: number /* i32 */,
  lpnTabStopPositions: Deno.PointerValue | Uint8Array /* ptr */,
  nTabOrigin: number /* i32 */,
): number /* i32 */ {
  return libUSER32_dll.TabbedTextOutA(util.toPointer(hdc), x, y, util.pstrToFfi(lpString), chCount, nTabPositions, util.toPointer(lpnTabStopPositions), nTabOrigin);
}

export function TabbedTextOutW(
  hdc: Uint8Array | Deno.PointerValue /* Windows.Win32.Graphics.Gdi.HDC */,
  x: number /* i32 */,
  y: number /* i32 */,
  lpString: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  chCount: number /* i32 */,
  nTabPositions: number /* i32 */,
  lpnTabStopPositions: Deno.PointerValue | Uint8Array /* ptr */,
  nTabOrigin: number /* i32 */,
): number /* i32 */ {
  return libUSER32_dll.TabbedTextOutW(util.toPointer(hdc), x, y, util.pwstrToFfi(lpString), chCount, nTabPositions, util.toPointer(lpnTabStopPositions), nTabOrigin);
}

export function GetTabbedTextExtentA(
  hdc: Uint8Array | Deno.PointerValue /* Windows.Win32.Graphics.Gdi.HDC */,
  lpString: string | null | Uint8Array /* Windows.Win32.Foundation.PSTR */,
  chCount: number /* i32 */,
  nTabPositions: number /* i32 */,
  lpnTabStopPositions: Deno.PointerValue | Uint8Array /* ptr */,
): number /* u32 */ {
  return libUSER32_dll.GetTabbedTextExtentA(util.toPointer(hdc), util.pstrToFfi(lpString), chCount, nTabPositions, util.toPointer(lpnTabStopPositions));
}

export function GetTabbedTextExtentW(
  hdc: Uint8Array | Deno.PointerValue /* Windows.Win32.Graphics.Gdi.HDC */,
  lpString: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  chCount: number /* i32 */,
  nTabPositions: number /* i32 */,
  lpnTabStopPositions: Deno.PointerValue | Uint8Array /* ptr */,
): number /* u32 */ {
  return libUSER32_dll.GetTabbedTextExtentW(util.toPointer(hdc), util.pwstrToFfi(lpString), chCount, nTabPositions, util.toPointer(lpnTabStopPositions));
}

export function UpdateWindow(
  hWnd: Deno.PointerValue /* Windows.Win32.Foundation.HWND */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libUSER32_dll.UpdateWindow((hWnd)));
}

export function PaintDesktop(
  hdc: Uint8Array | Deno.PointerValue /* Windows.Win32.Graphics.Gdi.HDC */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libUSER32_dll.PaintDesktop(util.toPointer(hdc)));
}

export function WindowFromDC(
  hDC: Uint8Array | Deno.PointerValue /* Windows.Win32.Graphics.Gdi.HDC */,
): Deno.PointerValue /* Windows.Win32.Foundation.HWND */ {
  return (libUSER32_dll.WindowFromDC(util.toPointer(hDC)));
}

export function GetDC(
  hWnd: Deno.PointerValue /* Windows.Win32.Foundation.HWND */,
): Deno.PointerValue /* Windows.Win32.Graphics.Gdi.HDC */ {
  return libUSER32_dll.GetDC((hWnd));
}

export function GetDCEx(
  hWnd: Deno.PointerValue /* Windows.Win32.Foundation.HWND */,
  hrgnClip: Uint8Array | Deno.PointerValue /* Windows.Win32.Graphics.Gdi.HRGN */,
  flags: GET_DCX_FLAGS /* Windows.Win32.Graphics.Gdi.GET_DCX_FLAGS */,
): Deno.PointerValue /* Windows.Win32.Graphics.Gdi.HDC */ {
  return libUSER32_dll.GetDCEx((hWnd), util.toPointer(hrgnClip), flags);
}

export function GetWindowDC(
  hWnd: Deno.PointerValue /* Windows.Win32.Foundation.HWND */,
): Deno.PointerValue /* Windows.Win32.Graphics.Gdi.HDC */ {
  return libUSER32_dll.GetWindowDC((hWnd));
}

export function ReleaseDC(
  hWnd: Deno.PointerValue /* Windows.Win32.Foundation.HWND */,
  hDC: Uint8Array | Deno.PointerValue /* Windows.Win32.Graphics.Gdi.HDC */,
): number /* i32 */ {
  return libUSER32_dll.ReleaseDC((hWnd), util.toPointer(hDC));
}

export function BeginPaint(
  hWnd: Deno.PointerValue /* Windows.Win32.Foundation.HWND */,
  lpPaint: Deno.PointerValue | Uint8Array /* ptr */,
): Deno.PointerValue /* Windows.Win32.Graphics.Gdi.HDC */ {
  return libUSER32_dll.BeginPaint((hWnd), util.toPointer(lpPaint));
}

export function EndPaint(
  hWnd: Deno.PointerValue /* Windows.Win32.Foundation.HWND */,
  lpPaint: Deno.PointerValue | Uint8Array /* ptr */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libUSER32_dll.EndPaint((hWnd), util.toPointer(lpPaint)));
}

export function GetUpdateRect(
  hWnd: Deno.PointerValue /* Windows.Win32.Foundation.HWND */,
  lpRect: Deno.PointerValue | Uint8Array /* ptr */,
  bErase: boolean /* Windows.Win32.Foundation.BOOL */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libUSER32_dll.GetUpdateRect((hWnd), util.toPointer(lpRect), util.boolToFfi(bErase)));
}

export function GetUpdateRgn(
  hWnd: Deno.PointerValue /* Windows.Win32.Foundation.HWND */,
  hRgn: Uint8Array | Deno.PointerValue /* Windows.Win32.Graphics.Gdi.HRGN */,
  bErase: boolean /* Windows.Win32.Foundation.BOOL */,
): GDI_REGION_TYPE /* Windows.Win32.Graphics.Gdi.GDI_REGION_TYPE */ {
  return libUSER32_dll.GetUpdateRgn((hWnd), util.toPointer(hRgn), util.boolToFfi(bErase));
}

export function SetWindowRgn(
  hWnd: Deno.PointerValue /* Windows.Win32.Foundation.HWND */,
  hRgn: Uint8Array | Deno.PointerValue /* Windows.Win32.Graphics.Gdi.HRGN */,
  bRedraw: boolean /* Windows.Win32.Foundation.BOOL */,
): number /* i32 */ {
  return libUSER32_dll.SetWindowRgn((hWnd), util.toPointer(hRgn), util.boolToFfi(bRedraw));
}

export function GetWindowRgn(
  hWnd: Deno.PointerValue /* Windows.Win32.Foundation.HWND */,
  hRgn: Uint8Array | Deno.PointerValue /* Windows.Win32.Graphics.Gdi.HRGN */,
): GDI_REGION_TYPE /* Windows.Win32.Graphics.Gdi.GDI_REGION_TYPE */ {
  return libUSER32_dll.GetWindowRgn((hWnd), util.toPointer(hRgn));
}

export function GetWindowRgnBox(
  hWnd: Deno.PointerValue /* Windows.Win32.Foundation.HWND */,
  lprc: Deno.PointerValue | Uint8Array /* ptr */,
): GDI_REGION_TYPE /* Windows.Win32.Graphics.Gdi.GDI_REGION_TYPE */ {
  return libUSER32_dll.GetWindowRgnBox((hWnd), util.toPointer(lprc));
}

export function ExcludeUpdateRgn(
  hDC: Uint8Array | Deno.PointerValue /* Windows.Win32.Graphics.Gdi.HDC */,
  hWnd: Deno.PointerValue /* Windows.Win32.Foundation.HWND */,
): number /* i32 */ {
  return libUSER32_dll.ExcludeUpdateRgn(util.toPointer(hDC), (hWnd));
}

export function InvalidateRect(
  hWnd: Deno.PointerValue /* Windows.Win32.Foundation.HWND */,
  lpRect: Deno.PointerValue | Uint8Array /* ptr */,
  bErase: boolean /* Windows.Win32.Foundation.BOOL */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libUSER32_dll.InvalidateRect((hWnd), util.toPointer(lpRect), util.boolToFfi(bErase)));
}

export function ValidateRect(
  hWnd: Deno.PointerValue /* Windows.Win32.Foundation.HWND */,
  lpRect: Deno.PointerValue | Uint8Array /* ptr */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libUSER32_dll.ValidateRect((hWnd), util.toPointer(lpRect)));
}

export function InvalidateRgn(
  hWnd: Deno.PointerValue /* Windows.Win32.Foundation.HWND */,
  hRgn: Uint8Array | Deno.PointerValue /* Windows.Win32.Graphics.Gdi.HRGN */,
  bErase: boolean /* Windows.Win32.Foundation.BOOL */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libUSER32_dll.InvalidateRgn((hWnd), util.toPointer(hRgn), util.boolToFfi(bErase)));
}

export function ValidateRgn(
  hWnd: Deno.PointerValue /* Windows.Win32.Foundation.HWND */,
  hRgn: Uint8Array | Deno.PointerValue /* Windows.Win32.Graphics.Gdi.HRGN */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libUSER32_dll.ValidateRgn((hWnd), util.toPointer(hRgn)));
}

export function RedrawWindow(
  hWnd: Deno.PointerValue /* Windows.Win32.Foundation.HWND */,
  lprcUpdate: Deno.PointerValue | Uint8Array /* ptr */,
  hrgnUpdate: Uint8Array | Deno.PointerValue /* Windows.Win32.Graphics.Gdi.HRGN */,
  flags: REDRAW_WINDOW_FLAGS /* Windows.Win32.Graphics.Gdi.REDRAW_WINDOW_FLAGS */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libUSER32_dll.RedrawWindow((hWnd), util.toPointer(lprcUpdate), util.toPointer(hrgnUpdate), flags));
}

export function LockWindowUpdate(
  hWndLock: Deno.PointerValue /* Windows.Win32.Foundation.HWND */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libUSER32_dll.LockWindowUpdate((hWndLock)));
}

export function ClientToScreen(
  hWnd: Deno.PointerValue /* Windows.Win32.Foundation.HWND */,
  lpPoint: Deno.PointerValue | Uint8Array /* ptr */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libUSER32_dll.ClientToScreen((hWnd), util.toPointer(lpPoint)));
}

export function ScreenToClient(
  hWnd: Deno.PointerValue /* Windows.Win32.Foundation.HWND */,
  lpPoint: Deno.PointerValue | Uint8Array /* ptr */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libUSER32_dll.ScreenToClient((hWnd), util.toPointer(lpPoint)));
}

export function MapWindowPoints(
  hWndFrom: Deno.PointerValue /* Windows.Win32.Foundation.HWND */,
  hWndTo: Deno.PointerValue /* Windows.Win32.Foundation.HWND */,
  lpPoints: Deno.PointerValue | Uint8Array /* ptr */,
  cPoints: number /* u32 */,
): number /* i32 */ {
  return libUSER32_dll.MapWindowPoints((hWndFrom), (hWndTo), util.toPointer(lpPoints), cPoints);
}

export function GetSysColor(
  nIndex: SYS_COLOR_INDEX /* Windows.Win32.Graphics.Gdi.SYS_COLOR_INDEX */,
): number /* u32 */ {
  return libUSER32_dll.GetSysColor(nIndex);
}

export function GetSysColorBrush(
  nIndex: SYS_COLOR_INDEX /* Windows.Win32.Graphics.Gdi.SYS_COLOR_INDEX */,
): Deno.PointerValue /* Windows.Win32.Graphics.Gdi.HBRUSH */ {
  return libUSER32_dll.GetSysColorBrush(nIndex);
}

export function SetSysColors(
  cElements: number /* i32 */,
  lpaElements: Deno.PointerValue | Uint8Array /* ptr */,
  lpaRgbValues: Deno.PointerValue | Uint8Array /* ptr */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libUSER32_dll.SetSysColors(cElements, util.toPointer(lpaElements), util.toPointer(lpaRgbValues)));
}

export function DrawFocusRect(
  hDC: Uint8Array | Deno.PointerValue /* Windows.Win32.Graphics.Gdi.HDC */,
  lprc: Deno.PointerValue | Uint8Array /* ptr */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libUSER32_dll.DrawFocusRect(util.toPointer(hDC), util.toPointer(lprc)));
}

export function FillRect(
  hDC: Uint8Array | Deno.PointerValue /* Windows.Win32.Graphics.Gdi.HDC */,
  lprc: Deno.PointerValue | Uint8Array /* ptr */,
  hbr: Uint8Array | Deno.PointerValue /* Windows.Win32.Graphics.Gdi.HBRUSH */,
): number /* i32 */ {
  return libUSER32_dll.FillRect(util.toPointer(hDC), util.toPointer(lprc), util.toPointer(hbr));
}

export function FrameRect(
  hDC: Uint8Array | Deno.PointerValue /* Windows.Win32.Graphics.Gdi.HDC */,
  lprc: Deno.PointerValue | Uint8Array /* ptr */,
  hbr: Uint8Array | Deno.PointerValue /* Windows.Win32.Graphics.Gdi.HBRUSH */,
): number /* i32 */ {
  return libUSER32_dll.FrameRect(util.toPointer(hDC), util.toPointer(lprc), util.toPointer(hbr));
}

export function InvertRect(
  hDC: Uint8Array | Deno.PointerValue /* Windows.Win32.Graphics.Gdi.HDC */,
  lprc: Deno.PointerValue | Uint8Array /* ptr */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libUSER32_dll.InvertRect(util.toPointer(hDC), util.toPointer(lprc)));
}

export function SetRect(
  lprc: Deno.PointerValue | Uint8Array /* ptr */,
  xLeft: number /* i32 */,
  yTop: number /* i32 */,
  xRight: number /* i32 */,
  yBottom: number /* i32 */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libUSER32_dll.SetRect(util.toPointer(lprc), xLeft, yTop, xRight, yBottom));
}

export function SetRectEmpty(
  lprc: Deno.PointerValue | Uint8Array /* ptr */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libUSER32_dll.SetRectEmpty(util.toPointer(lprc)));
}

export function CopyRect(
  lprcDst: Deno.PointerValue | Uint8Array /* ptr */,
  lprcSrc: Deno.PointerValue | Uint8Array /* ptr */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libUSER32_dll.CopyRect(util.toPointer(lprcDst), util.toPointer(lprcSrc)));
}

export function InflateRect(
  lprc: Deno.PointerValue | Uint8Array /* ptr */,
  dx: number /* i32 */,
  dy: number /* i32 */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libUSER32_dll.InflateRect(util.toPointer(lprc), dx, dy));
}

export function IntersectRect(
  lprcDst: Deno.PointerValue | Uint8Array /* ptr */,
  lprcSrc1: Deno.PointerValue | Uint8Array /* ptr */,
  lprcSrc2: Deno.PointerValue | Uint8Array /* ptr */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libUSER32_dll.IntersectRect(util.toPointer(lprcDst), util.toPointer(lprcSrc1), util.toPointer(lprcSrc2)));
}

export function UnionRect(
  lprcDst: Deno.PointerValue | Uint8Array /* ptr */,
  lprcSrc1: Deno.PointerValue | Uint8Array /* ptr */,
  lprcSrc2: Deno.PointerValue | Uint8Array /* ptr */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libUSER32_dll.UnionRect(util.toPointer(lprcDst), util.toPointer(lprcSrc1), util.toPointer(lprcSrc2)));
}

export function SubtractRect(
  lprcDst: Deno.PointerValue | Uint8Array /* ptr */,
  lprcSrc1: Deno.PointerValue | Uint8Array /* ptr */,
  lprcSrc2: Deno.PointerValue | Uint8Array /* ptr */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libUSER32_dll.SubtractRect(util.toPointer(lprcDst), util.toPointer(lprcSrc1), util.toPointer(lprcSrc2)));
}

export function OffsetRect(
  lprc: Deno.PointerValue | Uint8Array /* ptr */,
  dx: number /* i32 */,
  dy: number /* i32 */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libUSER32_dll.OffsetRect(util.toPointer(lprc), dx, dy));
}

export function IsRectEmpty(
  lprc: Deno.PointerValue | Uint8Array /* ptr */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libUSER32_dll.IsRectEmpty(util.toPointer(lprc)));
}

export function EqualRect(
  lprc1: Deno.PointerValue | Uint8Array /* ptr */,
  lprc2: Deno.PointerValue | Uint8Array /* ptr */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libUSER32_dll.EqualRect(util.toPointer(lprc1), util.toPointer(lprc2)));
}

export function PtInRect(
  lprc: Deno.PointerValue | Uint8Array /* ptr */,
  pt: Uint8Array | Deno.PointerValue /* Windows.Win32.Foundation.POINT */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libUSER32_dll.PtInRect(util.toPointer(lprc), util.toPointer(pt)));
}

export function LoadBitmapA(
  hInstance: Uint8Array | Deno.PointerValue /* Windows.Win32.Foundation.HINSTANCE */,
  lpBitmapName: string | null | Uint8Array /* Windows.Win32.Foundation.PSTR */,
): Deno.PointerValue /* Windows.Win32.Graphics.Gdi.HBITMAP */ {
  return libUSER32_dll.LoadBitmapA(util.toPointer(hInstance), util.pstrToFfi(lpBitmapName));
}

export function LoadBitmapW(
  hInstance: Uint8Array | Deno.PointerValue /* Windows.Win32.Foundation.HINSTANCE */,
  lpBitmapName: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
): Deno.PointerValue /* Windows.Win32.Graphics.Gdi.HBITMAP */ {
  return libUSER32_dll.LoadBitmapW(util.toPointer(hInstance), util.pwstrToFfi(lpBitmapName));
}

export function ChangeDisplaySettingsA(
  lpDevMode: Deno.PointerValue | Uint8Array /* ptr */,
  dwFlags: CDS_TYPE /* Windows.Win32.Graphics.Gdi.CDS_TYPE */,
): DISP_CHANGE /* Windows.Win32.Graphics.Gdi.DISP_CHANGE */ {
  return libUSER32_dll.ChangeDisplaySettingsA(util.toPointer(lpDevMode), dwFlags);
}

export function ChangeDisplaySettingsW(
  lpDevMode: Deno.PointerValue | Uint8Array /* ptr */,
  dwFlags: CDS_TYPE /* Windows.Win32.Graphics.Gdi.CDS_TYPE */,
): DISP_CHANGE /* Windows.Win32.Graphics.Gdi.DISP_CHANGE */ {
  return libUSER32_dll.ChangeDisplaySettingsW(util.toPointer(lpDevMode), dwFlags);
}

export function ChangeDisplaySettingsExA(
  lpszDeviceName: string | null | Uint8Array /* Windows.Win32.Foundation.PSTR */,
  lpDevMode: Deno.PointerValue | Uint8Array /* ptr */,
  hwnd: Deno.PointerValue /* Windows.Win32.Foundation.HWND */,
  dwflags: CDS_TYPE /* Windows.Win32.Graphics.Gdi.CDS_TYPE */,
  lParam: Deno.PointerValue | Uint8Array /* ptr */,
): DISP_CHANGE /* Windows.Win32.Graphics.Gdi.DISP_CHANGE */ {
  return libUSER32_dll.ChangeDisplaySettingsExA(util.pstrToFfi(lpszDeviceName), util.toPointer(lpDevMode), (hwnd), dwflags, util.toPointer(lParam));
}

export function ChangeDisplaySettingsExW(
  lpszDeviceName: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  lpDevMode: Deno.PointerValue | Uint8Array /* ptr */,
  hwnd: Deno.PointerValue /* Windows.Win32.Foundation.HWND */,
  dwflags: CDS_TYPE /* Windows.Win32.Graphics.Gdi.CDS_TYPE */,
  lParam: Deno.PointerValue | Uint8Array /* ptr */,
): DISP_CHANGE /* Windows.Win32.Graphics.Gdi.DISP_CHANGE */ {
  return libUSER32_dll.ChangeDisplaySettingsExW(util.pwstrToFfi(lpszDeviceName), util.toPointer(lpDevMode), (hwnd), dwflags, util.toPointer(lParam));
}

export function EnumDisplaySettingsA(
  lpszDeviceName: string | null | Uint8Array /* Windows.Win32.Foundation.PSTR */,
  iModeNum: ENUM_DISPLAY_SETTINGS_MODE /* Windows.Win32.Graphics.Gdi.ENUM_DISPLAY_SETTINGS_MODE */,
  lpDevMode: Deno.PointerValue | Uint8Array /* ptr */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libUSER32_dll.EnumDisplaySettingsA(util.pstrToFfi(lpszDeviceName), iModeNum, util.toPointer(lpDevMode)));
}

export function EnumDisplaySettingsW(
  lpszDeviceName: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  iModeNum: ENUM_DISPLAY_SETTINGS_MODE /* Windows.Win32.Graphics.Gdi.ENUM_DISPLAY_SETTINGS_MODE */,
  lpDevMode: Deno.PointerValue | Uint8Array /* ptr */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libUSER32_dll.EnumDisplaySettingsW(util.pwstrToFfi(lpszDeviceName), iModeNum, util.toPointer(lpDevMode)));
}

export function EnumDisplaySettingsExA(
  lpszDeviceName: string | null | Uint8Array /* Windows.Win32.Foundation.PSTR */,
  iModeNum: ENUM_DISPLAY_SETTINGS_MODE /* Windows.Win32.Graphics.Gdi.ENUM_DISPLAY_SETTINGS_MODE */,
  lpDevMode: Deno.PointerValue | Uint8Array /* ptr */,
  dwFlags: number /* u32 */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libUSER32_dll.EnumDisplaySettingsExA(util.pstrToFfi(lpszDeviceName), iModeNum, util.toPointer(lpDevMode), dwFlags));
}

export function EnumDisplaySettingsExW(
  lpszDeviceName: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  iModeNum: ENUM_DISPLAY_SETTINGS_MODE /* Windows.Win32.Graphics.Gdi.ENUM_DISPLAY_SETTINGS_MODE */,
  lpDevMode: Deno.PointerValue | Uint8Array /* ptr */,
  dwFlags: number /* u32 */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libUSER32_dll.EnumDisplaySettingsExW(util.pwstrToFfi(lpszDeviceName), iModeNum, util.toPointer(lpDevMode), dwFlags));
}

export function EnumDisplayDevicesA(
  lpDevice: string | null | Uint8Array /* Windows.Win32.Foundation.PSTR */,
  iDevNum: number /* u32 */,
  lpDisplayDevice: Deno.PointerValue | Uint8Array /* ptr */,
  dwFlags: number /* u32 */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libUSER32_dll.EnumDisplayDevicesA(util.pstrToFfi(lpDevice), iDevNum, util.toPointer(lpDisplayDevice), dwFlags));
}

export function EnumDisplayDevicesW(
  lpDevice: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  iDevNum: number /* u32 */,
  lpDisplayDevice: Deno.PointerValue | Uint8Array /* ptr */,
  dwFlags: number /* u32 */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libUSER32_dll.EnumDisplayDevicesW(util.pwstrToFfi(lpDevice), iDevNum, util.toPointer(lpDisplayDevice), dwFlags));
}

export function MonitorFromPoint(
  pt: Uint8Array | Deno.PointerValue /* Windows.Win32.Foundation.POINT */,
  dwFlags: MONITOR_FROM_FLAGS /* Windows.Win32.Graphics.Gdi.MONITOR_FROM_FLAGS */,
): Deno.PointerValue /* Windows.Win32.Graphics.Gdi.HMONITOR */ {
  return libUSER32_dll.MonitorFromPoint(util.toPointer(pt), dwFlags);
}

export function MonitorFromRect(
  lprc: Deno.PointerValue | Uint8Array /* ptr */,
  dwFlags: MONITOR_FROM_FLAGS /* Windows.Win32.Graphics.Gdi.MONITOR_FROM_FLAGS */,
): Deno.PointerValue /* Windows.Win32.Graphics.Gdi.HMONITOR */ {
  return libUSER32_dll.MonitorFromRect(util.toPointer(lprc), dwFlags);
}

export function MonitorFromWindow(
  hwnd: Deno.PointerValue /* Windows.Win32.Foundation.HWND */,
  dwFlags: MONITOR_FROM_FLAGS /* Windows.Win32.Graphics.Gdi.MONITOR_FROM_FLAGS */,
): Deno.PointerValue /* Windows.Win32.Graphics.Gdi.HMONITOR */ {
  return libUSER32_dll.MonitorFromWindow((hwnd), dwFlags);
}

export function GetMonitorInfoA(
  hMonitor: Uint8Array | Deno.PointerValue /* Windows.Win32.Graphics.Gdi.HMONITOR */,
  lpmi: Deno.PointerValue | Uint8Array /* ptr */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libUSER32_dll.GetMonitorInfoA(util.toPointer(hMonitor), util.toPointer(lpmi)));
}

export function GetMonitorInfoW(
  hMonitor: Uint8Array | Deno.PointerValue /* Windows.Win32.Graphics.Gdi.HMONITOR */,
  lpmi: Deno.PointerValue | Uint8Array /* ptr */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libUSER32_dll.GetMonitorInfoW(util.toPointer(hMonitor), util.toPointer(lpmi)));
}

export function EnumDisplayMonitors(
  hdc: Uint8Array | Deno.PointerValue /* Windows.Win32.Graphics.Gdi.HDC */,
  lprcClip: Deno.PointerValue | Uint8Array /* ptr */,
  lpfnEnum: Uint8Array | Deno.PointerValue /* Windows.Win32.Graphics.Gdi.MONITORENUMPROC */,
  dwData: Uint8Array | Deno.PointerValue /* Windows.Win32.Foundation.LPARAM */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libUSER32_dll.EnumDisplayMonitors(util.toPointer(hdc), util.toPointer(lprcClip), util.toPointer(lpfnEnum), util.toPointer(dwData)));
}

