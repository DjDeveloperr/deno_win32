/// Auto-generated by Deno Win32: Windows.Win32.Graphics.DXCore.Apis

import * as util from "../../util.ts";

// Enums
export type DXCoreAdapterProperty = number;
export type DXCoreAdapterState = number;
export type DXCoreSegmentGroup = number;
export type DXCoreNotificationType = number;
export type DXCoreAdapterPreference = number;

// Constants
export const _FACDXCORE = 2176;
export const InstanceLuid = 0;
export const DriverVersion = 1;
export const DriverDescription = 2;
export const HardwareID = 3;
export const KmdModelVersion = 4;
export const ComputePreemptionGranularity = 5;
export const GraphicsPreemptionGranularity = 6;
export const DedicatedAdapterMemory = 7;
export const DedicatedSystemMemory = 8;
export const SharedSystemMemory = 9;
export const AcgCompatible = 10;
export const IsHardware = 11;
export const IsIntegrated = 12;
export const IsDetachable = 13;
export const HardwareIDParts = 14;
export const IsDriverUpdateInProgress = 0;
export const AdapterMemoryBudget = 1;
export const Local = 0;
export const NonLocal = 1;
export const AdapterListStale = 0;
export const AdapterNoLongerValid = 1;
export const AdapterBudgetChange = 2;
export const AdapterHardwareContentProtectionTeardown = 3;
export const Hardware = 0;
export const MinimumPower = 1;
export const HighPerformance = 2;

// Structs

/**
 * Windows.Win32.Graphics.DXCore.DXCoreHardwareID (size: 16)
 */
export interface DXCoreHardwareID {
  /** u32 */
  vendorID: number;
  /** u32 */
  deviceID: number;
  /** u32 */
  subSysID: number;
  /** u32 */
  revision: number;
}

export const sizeofDXCoreHardwareID = 16;

export function allocDXCoreHardwareID(data?: Partial<DXCoreHardwareID>): Uint8Array {
  const buf = new Uint8Array(sizeofDXCoreHardwareID);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.vendorID !== undefined) view.setUint32(0, Number(data.vendorID), true);
  // 0x04: u32
  if (data?.deviceID !== undefined) view.setUint32(4, Number(data.deviceID), true);
  // 0x08: u32
  if (data?.subSysID !== undefined) view.setUint32(8, Number(data.subSysID), true);
  // 0x0c: u32
  if (data?.revision !== undefined) view.setUint32(12, Number(data.revision), true);
  return buf;
}

/**
 * Windows.Win32.Graphics.DXCore.DXCoreHardwareIDParts (size: 24)
 */
export interface DXCoreHardwareIDParts {
  /** u32 */
  vendorID: number;
  /** u32 */
  deviceID: number;
  /** u32 */
  subSystemID: number;
  /** u32 */
  subVendorID: number;
  /** u32 */
  revisionID: number;
}

export const sizeofDXCoreHardwareIDParts = 24;

export function allocDXCoreHardwareIDParts(data?: Partial<DXCoreHardwareIDParts>): Uint8Array {
  const buf = new Uint8Array(sizeofDXCoreHardwareIDParts);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.vendorID !== undefined) view.setUint32(0, Number(data.vendorID), true);
  // 0x04: u32
  if (data?.deviceID !== undefined) view.setUint32(4, Number(data.deviceID), true);
  // 0x08: u32
  if (data?.subSystemID !== undefined) view.setUint32(8, Number(data.subSystemID), true);
  // 0x0c: u32
  if (data?.subVendorID !== undefined) view.setUint32(12, Number(data.subVendorID), true);
  // 0x10: u32
  if (data?.revisionID !== undefined) view.setUint32(16, Number(data.revisionID), true);
  // 0x14: pad4
  return buf;
}

/**
 * Windows.Win32.Graphics.DXCore.DXCoreAdapterMemoryBudgetNodeSegmentGroup (size: 8)
 */
export interface DXCoreAdapterMemoryBudgetNodeSegmentGroup {
  /** u32 */
  nodeIndex: number;
  /** Windows.Win32.Graphics.DXCore.DXCoreSegmentGroup */
  segmentGroup: DXCoreSegmentGroup;
}

export const sizeofDXCoreAdapterMemoryBudgetNodeSegmentGroup = 8;

export function allocDXCoreAdapterMemoryBudgetNodeSegmentGroup(data?: Partial<DXCoreAdapterMemoryBudgetNodeSegmentGroup>): Uint8Array {
  const buf = new Uint8Array(sizeofDXCoreAdapterMemoryBudgetNodeSegmentGroup);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.nodeIndex !== undefined) view.setUint32(0, Number(data.nodeIndex), true);
  // 0x04: u32
  if (data?.segmentGroup !== undefined) view.setUint32(4, Number(data.segmentGroup), true);
  return buf;
}

/**
 * Windows.Win32.Graphics.DXCore.DXCoreAdapterMemoryBudget (size: 32)
 */
export interface DXCoreAdapterMemoryBudget {
  /** u64 */
  budget: Deno.PointerValue;
  /** u64 */
  currentUsage: Deno.PointerValue;
  /** u64 */
  availableForReservation: Deno.PointerValue;
  /** u64 */
  currentReservation: Deno.PointerValue;
}

export const sizeofDXCoreAdapterMemoryBudget = 32;

export function allocDXCoreAdapterMemoryBudget(data?: Partial<DXCoreAdapterMemoryBudget>): Uint8Array {
  const buf = new Uint8Array(sizeofDXCoreAdapterMemoryBudget);
  const view = new DataView(buf.buffer);
  // 0x00: u64
  if (data?.budget !== undefined) view.setBigUint64(0, BigInt(data.budget), true);
  // 0x08: u64
  if (data?.currentUsage !== undefined) view.setBigUint64(8, BigInt(data.currentUsage), true);
  // 0x10: u64
  if (data?.availableForReservation !== undefined) view.setBigUint64(16, BigInt(data.availableForReservation), true);
  // 0x18: u64
  if (data?.currentReservation !== undefined) view.setBigUint64(24, BigInt(data.currentReservation), true);
  return buf;
}

export type HRESULT = number;

// Native Libraries

try {
  var libDXCORE = Deno.dlopen("DXCORE", {
    DXCoreCreateAdapterFactory: {
      parameters: ["pointer", "pointer"],
      result: "pointer",
    },
  }).symbols;
} catch(e) { /* ignore */ }

// Symbols

export function DXCoreCreateAdapterFactory(
  riid: Deno.PointerValue | Uint8Array | null /* ptr */,
  ppvFactory: Deno.PointerValue | Uint8Array | null /* ptr */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libDXCORE.DXCoreCreateAdapterFactory(util.toPointer(riid), util.toPointer(ppvFactory)));
}

