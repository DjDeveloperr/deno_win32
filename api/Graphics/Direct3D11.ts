/// Auto-generated by Deno Win32: Windows.Win32.Graphics.Direct3D11.Apis

import * as util from "../../util.ts";

// Enums
export type D3D11_INPUT_CLASSIFICATION = number;
export type DXGI_FORMAT = number;
export type D3D11_FILL_MODE = number;
export type D3D11_CULL_MODE = number;
export type D3D11_RESOURCE_DIMENSION = number;
export type D3D11_DSV_DIMENSION = number;
export type D3D11_RTV_DIMENSION = number;
export type D3D11_UAV_DIMENSION = number;
export type D3D11_USAGE = number;
export type D3D11_BIND_FLAG = number;
export type D3D11_CPU_ACCESS_FLAG = number;
export type D3D11_RESOURCE_MISC_FLAG = number;
export type D3D11_MAP = number;
export type D3D11_MAP_FLAG = number;
export type D3D11_RAISE_FLAG = number;
export type D3D11_CLEAR_FLAG = number;
export type D3D11_COMPARISON_FUNC = number;
export type D3D11_DEPTH_WRITE_MASK = number;
export type D3D11_STENCIL_OP = number;
export type D3D11_BLEND = number;
export type D3D11_BLEND_OP = number;
export type D3D11_COLOR_WRITE_ENABLE = number;
export type D3D11_TEXTURECUBE_FACE = number;
export type D3D11_BUFFEREX_SRV_FLAG = number;
export type D3D_SRV_DIMENSION = number;
export type D3D11_DSV_FLAG = number;
export type D3D11_BUFFER_UAV_FLAG = number;
export type D3D11_FILTER = number;
export type D3D11_FILTER_TYPE = number;
export type D3D11_FILTER_REDUCTION_TYPE = number;
export type D3D11_TEXTURE_ADDRESS_MODE = number;
export type D3D11_FORMAT_SUPPORT = number;
export type D3D11_FORMAT_SUPPORT2 = number;
export type D3D11_ASYNC_GETDATA_FLAG = number;
export type D3D11_QUERY = number;
export type D3D11_QUERY_MISC_FLAG = number;
export type D3D11_COUNTER = number;
export type D3D11_COUNTER_TYPE = number;
export type D3D11_STANDARD_MULTISAMPLE_QUALITY_LEVELS = number;
export type D3D11_DEVICE_CONTEXT_TYPE = number;
export type D3D11_FEATURE = number;
export type D3D11_SHADER_MIN_PRECISION_SUPPORT = number;
export type D3D11_TILED_RESOURCES_TIER = number;
export type D3D11_CONSERVATIVE_RASTERIZATION_TIER = number;
export type D3D11_SHADER_CACHE_SUPPORT_FLAGS = number;
export type D3D11_SHARED_RESOURCE_TIER = number;
export type D3D11_VIDEO_DECODER_BUFFER_TYPE = number;
export type D3D11_VIDEO_PROCESSOR_FORMAT_SUPPORT = number;
export type D3D11_VIDEO_PROCESSOR_DEVICE_CAPS = number;
export type D3D11_VIDEO_PROCESSOR_FEATURE_CAPS = number;
export type D3D11_VIDEO_PROCESSOR_FILTER_CAPS = number;
export type D3D11_VIDEO_PROCESSOR_FORMAT_CAPS = number;
export type D3D11_VIDEO_PROCESSOR_AUTO_STREAM_CAPS = number;
export type D3D11_VIDEO_PROCESSOR_STEREO_CAPS = number;
export type D3D11_VIDEO_PROCESSOR_PROCESSOR_CAPS = number;
export type D3D11_VIDEO_PROCESSOR_ITELECINE_CAPS = number;
export type D3D11_CONTENT_PROTECTION_CAPS = number;
export type D3D11_VIDEO_PROCESSOR_FILTER = number;
export type D3D11_VIDEO_FRAME_FORMAT = number;
export type D3D11_VIDEO_USAGE = number;
export type D3D11_VIDEO_PROCESSOR_NOMINAL_RANGE = number;
export type D3D11_VIDEO_PROCESSOR_ALPHA_FILL_MODE = number;
export type D3D11_VIDEO_PROCESSOR_OUTPUT_RATE = number;
export type D3D11_VIDEO_PROCESSOR_STEREO_FORMAT = number;
export type D3D11_VIDEO_PROCESSOR_STEREO_FLIP_MODE = number;
export type D3D11_VIDEO_PROCESSOR_ROTATION = number;
export type D3D11_AUTHENTICATED_CHANNEL_TYPE = number;
export type D3D11_AUTHENTICATED_PROCESS_IDENTIFIER_TYPE = number;
export type D3D11_BUS_TYPE = number;
export type D3D11_VDOV_DIMENSION = number;
export type D3D11_VPIV_DIMENSION = number;
export type D3D11_VPOV_DIMENSION = number;
export type D3D11_CREATE_DEVICE_FLAG = number;
export type D3D11_RLDO_FLAGS = number;
export type D3D11_SHADER_TRACKING_RESOURCE_TYPE = number;
export type D3D11_SHADER_TRACKING_OPTIONS = number;
export type D3D11_MESSAGE_CATEGORY = number;
export type D3D11_MESSAGE_SEVERITY = number;
export type D3D11_MESSAGE_ID = number;
export type D3D11_COPY_FLAGS = number;
export type D3D11_LOGIC_OP = number;
export type D3D11_1_CREATE_DEVICE_CONTEXT_STATE_FLAG = number;
export type D3D11_VIDEO_DECODER_CAPS = number;
export type D3D11_VIDEO_PROCESSOR_BEHAVIOR_HINTS = number;
export type D3D11_CRYPTO_SESSION_STATUS = number;
export type DXGI_COLOR_SPACE_TYPE = number;
export type D3D11_TILE_MAPPING_FLAG = number;
export type D3D11_TILE_RANGE_FLAG = number;
export type D3D11_CHECK_MULTISAMPLE_QUALITY_LEVELS_FLAG = number;
export type D3D11_TILE_COPY_FLAG = number;
export type D3D11_CONTEXT_TYPE = number;
export type D3D11_TEXTURE_LAYOUT = number;
export type D3D11_CONSERVATIVE_RASTERIZATION_MODE = number;
export type D3D11_FENCE_FLAG = number;
export type D3D11_FEATURE_VIDEO = number;
export type D3D11_VIDEO_DECODER_HISTOGRAM_COMPONENT = number;
export type D3D11_VIDEO_DECODER_HISTOGRAM_COMPONENT_FLAGS = number;
export type D3D11_CRYPTO_SESSION_KEY_EXCHANGE_FLAGS = number;
export type D3D11_SHADER_VERSION_TYPE = number;
export type D3D_NAME = number;
export type D3D_REGISTER_COMPONENT_TYPE = number;
export type D3D_MIN_PRECISION = number;
export type D3D_CBUFFER_TYPE = number;
export type D3D_SHADER_VARIABLE_CLASS = number;
export type D3D_SHADER_VARIABLE_TYPE = number;
export type D3D_PRIMITIVE_TOPOLOGY = number;
export type D3D_PRIMITIVE = number;
export type D3D_TESSELLATOR_OUTPUT_PRIMITIVE = number;
export type D3D_TESSELLATOR_PARTITIONING = number;
export type D3D_TESSELLATOR_DOMAIN = number;
export type D3D_SHADER_INPUT_TYPE = number;
export type D3D_RESOURCE_RETURN_TYPE = number;
export type D3D_FEATURE_LEVEL = number;
export type D3D_INTERPOLATION_MODE = number;
export type D3D_PARAMETER_FLAGS = number;
export type D3D11_SHADER_TYPE = number;
export type D3D11_TRACE_GS_INPUT_PRIMITIVE = number;
export type D3D11_TRACE_REGISTER_TYPE = number;
export type D3DX11_SCAN_DATA_TYPE = number;
export type D3DX11_SCAN_OPCODE = number;
export type D3DX11_SCAN_DIRECTION = number;
export type D3DX11_FFT_DATA_TYPE = number;
export type D3DX11_FFT_DIM_MASK = number;
export type D3DX11_FFT_CREATE_FLAG = number;
export type D3D_DRIVER_TYPE = number;

// Constants
export const D3D11_16BIT_INDEX_STRIP_CUT_VALUE = 65535;
export const D3D11_32BIT_INDEX_STRIP_CUT_VALUE = 4294967295;
export const D3D11_8BIT_INDEX_STRIP_CUT_VALUE = 255;
export const D3D11_ARRAY_AXIS_ADDRESS_RANGE_BIT_COUNT = 9;
export const D3D11_CLIP_OR_CULL_DISTANCE_COUNT = 8;
export const D3D11_CLIP_OR_CULL_DISTANCE_ELEMENT_COUNT = 2;
export const D3D11_COMMONSHADER_CONSTANT_BUFFER_API_SLOT_COUNT = 14;
export const D3D11_COMMONSHADER_CONSTANT_BUFFER_COMPONENTS = 4;
export const D3D11_COMMONSHADER_CONSTANT_BUFFER_COMPONENT_BIT_COUNT = 32;
export const D3D11_COMMONSHADER_CONSTANT_BUFFER_HW_SLOT_COUNT = 15;
export const D3D11_COMMONSHADER_CONSTANT_BUFFER_PARTIAL_UPDATE_EXTENTS_BYTE_ALIGNMENT = 16;
export const D3D11_COMMONSHADER_CONSTANT_BUFFER_REGISTER_COMPONENTS = 4;
export const D3D11_COMMONSHADER_CONSTANT_BUFFER_REGISTER_COUNT = 15;
export const D3D11_COMMONSHADER_CONSTANT_BUFFER_REGISTER_READS_PER_INST = 1;
export const D3D11_COMMONSHADER_CONSTANT_BUFFER_REGISTER_READ_PORTS = 1;
export const D3D11_COMMONSHADER_FLOWCONTROL_NESTING_LIMIT = 64;
export const D3D11_COMMONSHADER_IMMEDIATE_CONSTANT_BUFFER_REGISTER_COMPONENTS = 4;
export const D3D11_COMMONSHADER_IMMEDIATE_CONSTANT_BUFFER_REGISTER_COUNT = 1;
export const D3D11_COMMONSHADER_IMMEDIATE_CONSTANT_BUFFER_REGISTER_READS_PER_INST = 1;
export const D3D11_COMMONSHADER_IMMEDIATE_CONSTANT_BUFFER_REGISTER_READ_PORTS = 1;
export const D3D11_COMMONSHADER_IMMEDIATE_VALUE_COMPONENT_BIT_COUNT = 32;
export const D3D11_COMMONSHADER_INPUT_RESOURCE_REGISTER_COMPONENTS = 1;
export const D3D11_COMMONSHADER_INPUT_RESOURCE_REGISTER_COUNT = 128;
export const D3D11_COMMONSHADER_INPUT_RESOURCE_REGISTER_READS_PER_INST = 1;
export const D3D11_COMMONSHADER_INPUT_RESOURCE_REGISTER_READ_PORTS = 1;
export const D3D11_COMMONSHADER_INPUT_RESOURCE_SLOT_COUNT = 128;
export const D3D11_COMMONSHADER_SAMPLER_REGISTER_COMPONENTS = 1;
export const D3D11_COMMONSHADER_SAMPLER_REGISTER_COUNT = 16;
export const D3D11_COMMONSHADER_SAMPLER_REGISTER_READS_PER_INST = 1;
export const D3D11_COMMONSHADER_SAMPLER_REGISTER_READ_PORTS = 1;
export const D3D11_COMMONSHADER_SAMPLER_SLOT_COUNT = 16;
export const D3D11_COMMONSHADER_SUBROUTINE_NESTING_LIMIT = 32;
export const D3D11_COMMONSHADER_TEMP_REGISTER_COMPONENTS = 4;
export const D3D11_COMMONSHADER_TEMP_REGISTER_COMPONENT_BIT_COUNT = 32;
export const D3D11_COMMONSHADER_TEMP_REGISTER_COUNT = 4096;
export const D3D11_COMMONSHADER_TEMP_REGISTER_READS_PER_INST = 3;
export const D3D11_COMMONSHADER_TEMP_REGISTER_READ_PORTS = 3;
export const D3D11_COMMONSHADER_TEXCOORD_RANGE_REDUCTION_MAX = 10;
export const D3D11_COMMONSHADER_TEXCOORD_RANGE_REDUCTION_MIN = `-10`;
export const D3D11_COMMONSHADER_TEXEL_OFFSET_MAX_NEGATIVE = `-8`;
export const D3D11_COMMONSHADER_TEXEL_OFFSET_MAX_POSITIVE = 7;
export const D3D11_CS_4_X_BUCKET00_MAX_BYTES_TGSM_WRITABLE_PER_THREAD = 256;
export const D3D11_CS_4_X_BUCKET00_MAX_NUM_THREADS_PER_GROUP = 64;
export const D3D11_CS_4_X_BUCKET01_MAX_BYTES_TGSM_WRITABLE_PER_THREAD = 240;
export const D3D11_CS_4_X_BUCKET01_MAX_NUM_THREADS_PER_GROUP = 68;
export const D3D11_CS_4_X_BUCKET02_MAX_BYTES_TGSM_WRITABLE_PER_THREAD = 224;
export const D3D11_CS_4_X_BUCKET02_MAX_NUM_THREADS_PER_GROUP = 72;
export const D3D11_CS_4_X_BUCKET03_MAX_BYTES_TGSM_WRITABLE_PER_THREAD = 208;
export const D3D11_CS_4_X_BUCKET03_MAX_NUM_THREADS_PER_GROUP = 76;
export const D3D11_CS_4_X_BUCKET04_MAX_BYTES_TGSM_WRITABLE_PER_THREAD = 192;
export const D3D11_CS_4_X_BUCKET04_MAX_NUM_THREADS_PER_GROUP = 84;
export const D3D11_CS_4_X_BUCKET05_MAX_BYTES_TGSM_WRITABLE_PER_THREAD = 176;
export const D3D11_CS_4_X_BUCKET05_MAX_NUM_THREADS_PER_GROUP = 92;
export const D3D11_CS_4_X_BUCKET06_MAX_BYTES_TGSM_WRITABLE_PER_THREAD = 160;
export const D3D11_CS_4_X_BUCKET06_MAX_NUM_THREADS_PER_GROUP = 100;
export const D3D11_CS_4_X_BUCKET07_MAX_BYTES_TGSM_WRITABLE_PER_THREAD = 144;
export const D3D11_CS_4_X_BUCKET07_MAX_NUM_THREADS_PER_GROUP = 112;
export const D3D11_CS_4_X_BUCKET08_MAX_BYTES_TGSM_WRITABLE_PER_THREAD = 128;
export const D3D11_CS_4_X_BUCKET08_MAX_NUM_THREADS_PER_GROUP = 128;
export const D3D11_CS_4_X_BUCKET09_MAX_BYTES_TGSM_WRITABLE_PER_THREAD = 112;
export const D3D11_CS_4_X_BUCKET09_MAX_NUM_THREADS_PER_GROUP = 144;
export const D3D11_CS_4_X_BUCKET10_MAX_BYTES_TGSM_WRITABLE_PER_THREAD = 96;
export const D3D11_CS_4_X_BUCKET10_MAX_NUM_THREADS_PER_GROUP = 168;
export const D3D11_CS_4_X_BUCKET11_MAX_BYTES_TGSM_WRITABLE_PER_THREAD = 80;
export const D3D11_CS_4_X_BUCKET11_MAX_NUM_THREADS_PER_GROUP = 204;
export const D3D11_CS_4_X_BUCKET12_MAX_BYTES_TGSM_WRITABLE_PER_THREAD = 64;
export const D3D11_CS_4_X_BUCKET12_MAX_NUM_THREADS_PER_GROUP = 256;
export const D3D11_CS_4_X_BUCKET13_MAX_BYTES_TGSM_WRITABLE_PER_THREAD = 48;
export const D3D11_CS_4_X_BUCKET13_MAX_NUM_THREADS_PER_GROUP = 340;
export const D3D11_CS_4_X_BUCKET14_MAX_BYTES_TGSM_WRITABLE_PER_THREAD = 32;
export const D3D11_CS_4_X_BUCKET14_MAX_NUM_THREADS_PER_GROUP = 512;
export const D3D11_CS_4_X_BUCKET15_MAX_BYTES_TGSM_WRITABLE_PER_THREAD = 16;
export const D3D11_CS_4_X_BUCKET15_MAX_NUM_THREADS_PER_GROUP = 768;
export const D3D11_CS_4_X_DISPATCH_MAX_THREAD_GROUPS_IN_Z_DIMENSION = 1;
export const D3D11_CS_4_X_RAW_UAV_BYTE_ALIGNMENT = 256;
export const D3D11_CS_4_X_THREAD_GROUP_MAX_THREADS_PER_GROUP = 768;
export const D3D11_CS_4_X_THREAD_GROUP_MAX_X = 768;
export const D3D11_CS_4_X_THREAD_GROUP_MAX_Y = 768;
export const D3D11_CS_4_X_UAV_REGISTER_COUNT = 1;
export const D3D11_CS_DISPATCH_MAX_THREAD_GROUPS_PER_DIMENSION = 65535;
export const D3D11_CS_TGSM_REGISTER_COUNT = 8192;
export const D3D11_CS_TGSM_REGISTER_READS_PER_INST = 1;
export const D3D11_CS_TGSM_RESOURCE_REGISTER_COMPONENTS = 1;
export const D3D11_CS_TGSM_RESOURCE_REGISTER_READ_PORTS = 1;
export const D3D11_CS_THREADGROUPID_REGISTER_COMPONENTS = 3;
export const D3D11_CS_THREADGROUPID_REGISTER_COUNT = 1;
export const D3D11_CS_THREADIDINGROUPFLATTENED_REGISTER_COMPONENTS = 1;
export const D3D11_CS_THREADIDINGROUPFLATTENED_REGISTER_COUNT = 1;
export const D3D11_CS_THREADIDINGROUP_REGISTER_COMPONENTS = 3;
export const D3D11_CS_THREADIDINGROUP_REGISTER_COUNT = 1;
export const D3D11_CS_THREADID_REGISTER_COMPONENTS = 3;
export const D3D11_CS_THREADID_REGISTER_COUNT = 1;
export const D3D11_CS_THREAD_GROUP_MAX_THREADS_PER_GROUP = 1024;
export const D3D11_CS_THREAD_GROUP_MAX_X = 1024;
export const D3D11_CS_THREAD_GROUP_MAX_Y = 1024;
export const D3D11_CS_THREAD_GROUP_MAX_Z = 64;
export const D3D11_CS_THREAD_GROUP_MIN_X = 1;
export const D3D11_CS_THREAD_GROUP_MIN_Y = 1;
export const D3D11_CS_THREAD_GROUP_MIN_Z = 1;
export const D3D11_CS_THREAD_LOCAL_TEMP_REGISTER_POOL = 16384;
export const D3D11_DEFAULT_BLEND_FACTOR_ALPHA = 1;
export const D3D11_DEFAULT_BLEND_FACTOR_BLUE = 1;
export const D3D11_DEFAULT_BLEND_FACTOR_GREEN = 1;
export const D3D11_DEFAULT_BLEND_FACTOR_RED = 1;
export const D3D11_DEFAULT_BORDER_COLOR_COMPONENT = 0;
export const D3D11_DEFAULT_DEPTH_BIAS = 0;
export const D3D11_DEFAULT_DEPTH_BIAS_CLAMP = 0;
export const D3D11_DEFAULT_MAX_ANISOTROPY = 16;
export const D3D11_DEFAULT_MIP_LOD_BIAS = 0;
export const D3D11_DEFAULT_RENDER_TARGET_ARRAY_INDEX = 0;
export const D3D11_DEFAULT_SAMPLE_MASK = 4294967295;
export const D3D11_DEFAULT_SCISSOR_ENDX = 0;
export const D3D11_DEFAULT_SCISSOR_ENDY = 0;
export const D3D11_DEFAULT_SCISSOR_STARTX = 0;
export const D3D11_DEFAULT_SCISSOR_STARTY = 0;
export const D3D11_DEFAULT_SLOPE_SCALED_DEPTH_BIAS = 0;
export const D3D11_DEFAULT_STENCIL_READ_MASK = 255;
export const D3D11_DEFAULT_STENCIL_REFERENCE = 0;
export const D3D11_DEFAULT_STENCIL_WRITE_MASK = 255;
export const D3D11_DEFAULT_VIEWPORT_AND_SCISSORRECT_INDEX = 0;
export const D3D11_DEFAULT_VIEWPORT_HEIGHT = 0;
export const D3D11_DEFAULT_VIEWPORT_MAX_DEPTH = 0;
export const D3D11_DEFAULT_VIEWPORT_MIN_DEPTH = 0;
export const D3D11_DEFAULT_VIEWPORT_TOPLEFTX = 0;
export const D3D11_DEFAULT_VIEWPORT_TOPLEFTY = 0;
export const D3D11_DEFAULT_VIEWPORT_WIDTH = 0;
export const D3D11_DS_INPUT_CONTROL_POINTS_MAX_TOTAL_SCALARS = 3968;
export const D3D11_DS_INPUT_CONTROL_POINT_REGISTER_COMPONENTS = 4;
export const D3D11_DS_INPUT_CONTROL_POINT_REGISTER_COMPONENT_BIT_COUNT = 32;
export const D3D11_DS_INPUT_CONTROL_POINT_REGISTER_COUNT = 32;
export const D3D11_DS_INPUT_CONTROL_POINT_REGISTER_READS_PER_INST = 2;
export const D3D11_DS_INPUT_CONTROL_POINT_REGISTER_READ_PORTS = 1;
export const D3D11_DS_INPUT_DOMAIN_POINT_REGISTER_COMPONENTS = 3;
export const D3D11_DS_INPUT_DOMAIN_POINT_REGISTER_COMPONENT_BIT_COUNT = 32;
export const D3D11_DS_INPUT_DOMAIN_POINT_REGISTER_COUNT = 1;
export const D3D11_DS_INPUT_DOMAIN_POINT_REGISTER_READS_PER_INST = 2;
export const D3D11_DS_INPUT_DOMAIN_POINT_REGISTER_READ_PORTS = 1;
export const D3D11_DS_INPUT_PATCH_CONSTANT_REGISTER_COMPONENTS = 4;
export const D3D11_DS_INPUT_PATCH_CONSTANT_REGISTER_COMPONENT_BIT_COUNT = 32;
export const D3D11_DS_INPUT_PATCH_CONSTANT_REGISTER_COUNT = 32;
export const D3D11_DS_INPUT_PATCH_CONSTANT_REGISTER_READS_PER_INST = 2;
export const D3D11_DS_INPUT_PATCH_CONSTANT_REGISTER_READ_PORTS = 1;
export const D3D11_DS_INPUT_PRIMITIVE_ID_REGISTER_COMPONENTS = 1;
export const D3D11_DS_INPUT_PRIMITIVE_ID_REGISTER_COMPONENT_BIT_COUNT = 32;
export const D3D11_DS_INPUT_PRIMITIVE_ID_REGISTER_COUNT = 1;
export const D3D11_DS_INPUT_PRIMITIVE_ID_REGISTER_READS_PER_INST = 2;
export const D3D11_DS_INPUT_PRIMITIVE_ID_REGISTER_READ_PORTS = 1;
export const D3D11_DS_OUTPUT_REGISTER_COMPONENTS = 4;
export const D3D11_DS_OUTPUT_REGISTER_COMPONENT_BIT_COUNT = 32;
export const D3D11_DS_OUTPUT_REGISTER_COUNT = 32;
export const D3D11_FLOAT16_FUSED_TOLERANCE_IN_ULP = `0.6`;
export const D3D11_FLOAT32_MAX = `3.4028234663852886e+38`;
export const D3D11_FLOAT32_TO_INTEGER_TOLERANCE_IN_ULP = `0.6000000238418579`;
export const D3D11_FLOAT_TO_SRGB_EXPONENT_DENOMINATOR = `2.4000000953674316`;
export const D3D11_FLOAT_TO_SRGB_EXPONENT_NUMERATOR = 1;
export const D3D11_FLOAT_TO_SRGB_OFFSET = `0.054999999701976776`;
export const D3D11_FLOAT_TO_SRGB_SCALE_1 = `12.920000076293945`;
export const D3D11_FLOAT_TO_SRGB_SCALE_2 = `1.0549999475479126`;
export const D3D11_FLOAT_TO_SRGB_THRESHOLD = `0.0031308000907301903`;
export const D3D11_FTOI_INSTRUCTION_MAX_INPUT = 2147483648;
export const D3D11_FTOI_INSTRUCTION_MIN_INPUT = `-2147483648`;
export const D3D11_FTOU_INSTRUCTION_MAX_INPUT = 4294967296;
export const D3D11_FTOU_INSTRUCTION_MIN_INPUT = 0;
export const D3D11_GS_INPUT_INSTANCE_ID_READS_PER_INST = 2;
export const D3D11_GS_INPUT_INSTANCE_ID_READ_PORTS = 1;
export const D3D11_GS_INPUT_INSTANCE_ID_REGISTER_COMPONENTS = 1;
export const D3D11_GS_INPUT_INSTANCE_ID_REGISTER_COMPONENT_BIT_COUNT = 32;
export const D3D11_GS_INPUT_INSTANCE_ID_REGISTER_COUNT = 1;
export const D3D11_GS_INPUT_PRIM_CONST_REGISTER_COMPONENTS = 1;
export const D3D11_GS_INPUT_PRIM_CONST_REGISTER_COMPONENT_BIT_COUNT = 32;
export const D3D11_GS_INPUT_PRIM_CONST_REGISTER_COUNT = 1;
export const D3D11_GS_INPUT_PRIM_CONST_REGISTER_READS_PER_INST = 2;
export const D3D11_GS_INPUT_PRIM_CONST_REGISTER_READ_PORTS = 1;
export const D3D11_GS_INPUT_REGISTER_COMPONENTS = 4;
export const D3D11_GS_INPUT_REGISTER_COMPONENT_BIT_COUNT = 32;
export const D3D11_GS_INPUT_REGISTER_COUNT = 32;
export const D3D11_GS_INPUT_REGISTER_READS_PER_INST = 2;
export const D3D11_GS_INPUT_REGISTER_READ_PORTS = 1;
export const D3D11_GS_INPUT_REGISTER_VERTICES = 32;
export const D3D11_GS_MAX_INSTANCE_COUNT = 32;
export const D3D11_GS_MAX_OUTPUT_VERTEX_COUNT_ACROSS_INSTANCES = 1024;
export const D3D11_GS_OUTPUT_ELEMENTS = 32;
export const D3D11_GS_OUTPUT_REGISTER_COMPONENTS = 4;
export const D3D11_GS_OUTPUT_REGISTER_COMPONENT_BIT_COUNT = 32;
export const D3D11_GS_OUTPUT_REGISTER_COUNT = 32;
export const D3D11_HS_CONTROL_POINT_PHASE_INPUT_REGISTER_COUNT = 32;
export const D3D11_HS_CONTROL_POINT_PHASE_OUTPUT_REGISTER_COUNT = 32;
export const D3D11_HS_CONTROL_POINT_REGISTER_COMPONENTS = 4;
export const D3D11_HS_CONTROL_POINT_REGISTER_COMPONENT_BIT_COUNT = 32;
export const D3D11_HS_CONTROL_POINT_REGISTER_READS_PER_INST = 2;
export const D3D11_HS_CONTROL_POINT_REGISTER_READ_PORTS = 1;
export const D3D11_HS_FORK_PHASE_INSTANCE_COUNT_UPPER_BOUND = 4294967295;
export const D3D11_HS_INPUT_FORK_INSTANCE_ID_REGISTER_COMPONENTS = 1;
export const D3D11_HS_INPUT_FORK_INSTANCE_ID_REGISTER_COMPONENT_BIT_COUNT = 32;
export const D3D11_HS_INPUT_FORK_INSTANCE_ID_REGISTER_COUNT = 1;
export const D3D11_HS_INPUT_FORK_INSTANCE_ID_REGISTER_READS_PER_INST = 2;
export const D3D11_HS_INPUT_FORK_INSTANCE_ID_REGISTER_READ_PORTS = 1;
export const D3D11_HS_INPUT_JOIN_INSTANCE_ID_REGISTER_COMPONENTS = 1;
export const D3D11_HS_INPUT_JOIN_INSTANCE_ID_REGISTER_COMPONENT_BIT_COUNT = 32;
export const D3D11_HS_INPUT_JOIN_INSTANCE_ID_REGISTER_COUNT = 1;
export const D3D11_HS_INPUT_JOIN_INSTANCE_ID_REGISTER_READS_PER_INST = 2;
export const D3D11_HS_INPUT_JOIN_INSTANCE_ID_REGISTER_READ_PORTS = 1;
export const D3D11_HS_INPUT_PRIMITIVE_ID_REGISTER_COMPONENTS = 1;
export const D3D11_HS_INPUT_PRIMITIVE_ID_REGISTER_COMPONENT_BIT_COUNT = 32;
export const D3D11_HS_INPUT_PRIMITIVE_ID_REGISTER_COUNT = 1;
export const D3D11_HS_INPUT_PRIMITIVE_ID_REGISTER_READS_PER_INST = 2;
export const D3D11_HS_INPUT_PRIMITIVE_ID_REGISTER_READ_PORTS = 1;
export const D3D11_HS_JOIN_PHASE_INSTANCE_COUNT_UPPER_BOUND = 4294967295;
export const D3D11_HS_MAXTESSFACTOR_LOWER_BOUND = 1;
export const D3D11_HS_MAXTESSFACTOR_UPPER_BOUND = 64;
export const D3D11_HS_OUTPUT_CONTROL_POINTS_MAX_TOTAL_SCALARS = 3968;
export const D3D11_HS_OUTPUT_CONTROL_POINT_ID_REGISTER_COMPONENTS = 1;
export const D3D11_HS_OUTPUT_CONTROL_POINT_ID_REGISTER_COMPONENT_BIT_COUNT = 32;
export const D3D11_HS_OUTPUT_CONTROL_POINT_ID_REGISTER_COUNT = 1;
export const D3D11_HS_OUTPUT_CONTROL_POINT_ID_REGISTER_READS_PER_INST = 2;
export const D3D11_HS_OUTPUT_CONTROL_POINT_ID_REGISTER_READ_PORTS = 1;
export const D3D11_HS_OUTPUT_PATCH_CONSTANT_REGISTER_COMPONENTS = 4;
export const D3D11_HS_OUTPUT_PATCH_CONSTANT_REGISTER_COMPONENT_BIT_COUNT = 32;
export const D3D11_HS_OUTPUT_PATCH_CONSTANT_REGISTER_COUNT = 32;
export const D3D11_HS_OUTPUT_PATCH_CONSTANT_REGISTER_READS_PER_INST = 2;
export const D3D11_HS_OUTPUT_PATCH_CONSTANT_REGISTER_READ_PORTS = 1;
export const D3D11_HS_OUTPUT_PATCH_CONSTANT_REGISTER_SCALAR_COMPONENTS = 128;
export const D3D11_IA_DEFAULT_INDEX_BUFFER_OFFSET_IN_BYTES = 0;
export const D3D11_IA_DEFAULT_PRIMITIVE_TOPOLOGY = 0;
export const D3D11_IA_DEFAULT_VERTEX_BUFFER_OFFSET_IN_BYTES = 0;
export const D3D11_IA_INDEX_INPUT_RESOURCE_SLOT_COUNT = 1;
export const D3D11_IA_INSTANCE_ID_BIT_COUNT = 32;
export const D3D11_IA_INTEGER_ARITHMETIC_BIT_COUNT = 32;
export const D3D11_IA_PATCH_MAX_CONTROL_POINT_COUNT = 32;
export const D3D11_IA_PRIMITIVE_ID_BIT_COUNT = 32;
export const D3D11_IA_VERTEX_ID_BIT_COUNT = 32;
export const D3D11_IA_VERTEX_INPUT_RESOURCE_SLOT_COUNT = 32;
export const D3D11_IA_VERTEX_INPUT_STRUCTURE_ELEMENTS_COMPONENTS = 128;
export const D3D11_IA_VERTEX_INPUT_STRUCTURE_ELEMENT_COUNT = 32;
export const D3D11_INTEGER_DIVIDE_BY_ZERO_QUOTIENT = 4294967295;
export const D3D11_INTEGER_DIVIDE_BY_ZERO_REMAINDER = 4294967295;
export const D3D11_KEEP_RENDER_TARGETS_AND_DEPTH_STENCIL = 4294967295;
export const D3D11_KEEP_UNORDERED_ACCESS_VIEWS = 4294967295;
export const D3D11_LINEAR_GAMMA = 1;
export const D3D11_MAJOR_VERSION = 11;
export const D3D11_MAX_BORDER_COLOR_COMPONENT = 1;
export const D3D11_MAX_DEPTH = 1;
export const D3D11_MAX_MAXANISOTROPY = 16;
export const D3D11_MAX_MULTISAMPLE_SAMPLE_COUNT = 32;
export const D3D11_MAX_POSITION_VALUE = `3.4028235832468283e+34`;
export const D3D11_MAX_TEXTURE_DIMENSION_2_TO_EXP = 17;
export const D3D11_MINOR_VERSION = 0;
export const D3D11_MIN_BORDER_COLOR_COMPONENT = 0;
export const D3D11_MIN_DEPTH = 0;
export const D3D11_MIN_MAXANISOTROPY = 0;
export const D3D11_MIP_LOD_BIAS_MAX = `15.989999771118164`;
export const D3D11_MIP_LOD_BIAS_MIN = `-16`;
export const D3D11_MIP_LOD_FRACTIONAL_BIT_COUNT = 8;
export const D3D11_MIP_LOD_RANGE_BIT_COUNT = 8;
export const D3D11_MULTISAMPLE_ANTIALIAS_LINE_WIDTH = `1.399999976158142`;
export const D3D11_NONSAMPLE_FETCH_OUT_OF_RANGE_ACCESS_RESULT = 0;
export const D3D11_PIXEL_ADDRESS_RANGE_BIT_COUNT = 15;
export const D3D11_PRE_SCISSOR_PIXEL_ADDRESS_RANGE_BIT_COUNT = 16;
export const D3D11_PS_CS_UAV_REGISTER_COMPONENTS = 1;
export const D3D11_PS_CS_UAV_REGISTER_COUNT = 8;
export const D3D11_PS_CS_UAV_REGISTER_READS_PER_INST = 1;
export const D3D11_PS_CS_UAV_REGISTER_READ_PORTS = 1;
export const D3D11_PS_FRONTFACING_DEFAULT_VALUE = 4294967295;
export const D3D11_PS_FRONTFACING_FALSE_VALUE = 0;
export const D3D11_PS_FRONTFACING_TRUE_VALUE = 4294967295;
export const D3D11_PS_INPUT_REGISTER_COMPONENTS = 4;
export const D3D11_PS_INPUT_REGISTER_COMPONENT_BIT_COUNT = 32;
export const D3D11_PS_INPUT_REGISTER_COUNT = 32;
export const D3D11_PS_INPUT_REGISTER_READS_PER_INST = 2;
export const D3D11_PS_INPUT_REGISTER_READ_PORTS = 1;
export const D3D11_PS_LEGACY_PIXEL_CENTER_FRACTIONAL_COMPONENT = 0;
export const D3D11_PS_OUTPUT_DEPTH_REGISTER_COMPONENTS = 1;
export const D3D11_PS_OUTPUT_DEPTH_REGISTER_COMPONENT_BIT_COUNT = 32;
export const D3D11_PS_OUTPUT_DEPTH_REGISTER_COUNT = 1;
export const D3D11_PS_OUTPUT_MASK_REGISTER_COMPONENTS = 1;
export const D3D11_PS_OUTPUT_MASK_REGISTER_COMPONENT_BIT_COUNT = 32;
export const D3D11_PS_OUTPUT_MASK_REGISTER_COUNT = 1;
export const D3D11_PS_OUTPUT_REGISTER_COMPONENTS = 4;
export const D3D11_PS_OUTPUT_REGISTER_COMPONENT_BIT_COUNT = 32;
export const D3D11_PS_OUTPUT_REGISTER_COUNT = 8;
export const D3D11_PS_PIXEL_CENTER_FRACTIONAL_COMPONENT = `0.5`;
export const D3D11_RAW_UAV_SRV_BYTE_ALIGNMENT = 16;
export const D3D11_REQ_BLEND_OBJECT_COUNT_PER_DEVICE = 4096;
export const D3D11_REQ_BUFFER_RESOURCE_TEXEL_COUNT_2_TO_EXP = 27;
export const D3D11_REQ_CONSTANT_BUFFER_ELEMENT_COUNT = 4096;
export const D3D11_REQ_DEPTH_STENCIL_OBJECT_COUNT_PER_DEVICE = 4096;
export const D3D11_REQ_DRAWINDEXED_INDEX_COUNT_2_TO_EXP = 32;
export const D3D11_REQ_DRAW_VERTEX_COUNT_2_TO_EXP = 32;
export const D3D11_REQ_FILTERING_HW_ADDRESSABLE_RESOURCE_DIMENSION = 16384;
export const D3D11_REQ_GS_INVOCATION_32BIT_OUTPUT_COMPONENT_LIMIT = 1024;
export const D3D11_REQ_IMMEDIATE_CONSTANT_BUFFER_ELEMENT_COUNT = 4096;
export const D3D11_REQ_MAXANISOTROPY = 16;
export const D3D11_REQ_MIP_LEVELS = 15;
export const D3D11_REQ_MULTI_ELEMENT_STRUCTURE_SIZE_IN_BYTES = 2048;
export const D3D11_REQ_RASTERIZER_OBJECT_COUNT_PER_DEVICE = 4096;
export const D3D11_REQ_RENDER_TO_BUFFER_WINDOW_WIDTH = 16384;
export const D3D11_REQ_RESOURCE_SIZE_IN_MEGABYTES_EXPRESSION_A_TERM = 128;
export const D3D11_REQ_RESOURCE_SIZE_IN_MEGABYTES_EXPRESSION_B_TERM = `0.25`;
export const D3D11_REQ_RESOURCE_SIZE_IN_MEGABYTES_EXPRESSION_C_TERM = 2048;
export const D3D11_REQ_RESOURCE_VIEW_COUNT_PER_DEVICE_2_TO_EXP = 20;
export const D3D11_REQ_SAMPLER_OBJECT_COUNT_PER_DEVICE = 4096;
export const D3D11_REQ_TEXTURE1D_ARRAY_AXIS_DIMENSION = 2048;
export const D3D11_REQ_TEXTURE1D_U_DIMENSION = 16384;
export const D3D11_REQ_TEXTURE2D_ARRAY_AXIS_DIMENSION = 2048;
export const D3D11_REQ_TEXTURE2D_U_OR_V_DIMENSION = 16384;
export const D3D11_REQ_TEXTURE3D_U_V_OR_W_DIMENSION = 2048;
export const D3D11_REQ_TEXTURECUBE_DIMENSION = 16384;
export const D3D11_RESINFO_INSTRUCTION_MISSING_COMPONENT_RETVAL = 0;
export const D3D11_SHADER_MAJOR_VERSION = 5;
export const D3D11_SHADER_MAX_INSTANCES = 65535;
export const D3D11_SHADER_MAX_INTERFACES = 253;
export const D3D11_SHADER_MAX_INTERFACE_CALL_SITES = 4096;
export const D3D11_SHADER_MAX_TYPES = 65535;
export const D3D11_SHADER_MINOR_VERSION = 0;
export const D3D11_SHIFT_INSTRUCTION_PAD_VALUE = 0;
export const D3D11_SHIFT_INSTRUCTION_SHIFT_VALUE_BIT_COUNT = 5;
export const D3D11_SIMULTANEOUS_RENDER_TARGET_COUNT = 8;
export const D3D11_SO_BUFFER_MAX_STRIDE_IN_BYTES = 2048;
export const D3D11_SO_BUFFER_MAX_WRITE_WINDOW_IN_BYTES = 512;
export const D3D11_SO_BUFFER_SLOT_COUNT = 4;
export const D3D11_SO_DDI_REGISTER_INDEX_DENOTING_GAP = 4294967295;
export const D3D11_SO_NO_RASTERIZED_STREAM = 4294967295;
export const D3D11_SO_OUTPUT_COMPONENT_COUNT = 128;
export const D3D11_SO_STREAM_COUNT = 4;
export const D3D11_SPEC_DATE_DAY = 16;
export const D3D11_SPEC_DATE_MONTH = 5;
export const D3D11_SPEC_DATE_YEAR = 2011;
export const D3D11_SPEC_VERSION = `1.07`;
export const D3D11_SRGB_GAMMA = `2.200000047683716`;
export const D3D11_SRGB_TO_FLOAT_DENOMINATOR_1 = `12.920000076293945`;
export const D3D11_SRGB_TO_FLOAT_DENOMINATOR_2 = `1.0549999475479126`;
export const D3D11_SRGB_TO_FLOAT_EXPONENT = `2.4000000953674316`;
export const D3D11_SRGB_TO_FLOAT_OFFSET = `0.054999999701976776`;
export const D3D11_SRGB_TO_FLOAT_THRESHOLD = `0.040449999272823334`;
export const D3D11_SRGB_TO_FLOAT_TOLERANCE_IN_ULP = `0.5`;
export const D3D11_STANDARD_COMPONENT_BIT_COUNT = 32;
export const D3D11_STANDARD_COMPONENT_BIT_COUNT_DOUBLED = 64;
export const D3D11_STANDARD_MAXIMUM_ELEMENT_ALIGNMENT_BYTE_MULTIPLE = 4;
export const D3D11_STANDARD_PIXEL_COMPONENT_COUNT = 128;
export const D3D11_STANDARD_PIXEL_ELEMENT_COUNT = 32;
export const D3D11_STANDARD_VECTOR_SIZE = 4;
export const D3D11_STANDARD_VERTEX_ELEMENT_COUNT = 32;
export const D3D11_STANDARD_VERTEX_TOTAL_COMPONENT_COUNT = 64;
export const D3D11_SUBPIXEL_FRACTIONAL_BIT_COUNT = 8;
export const D3D11_SUBTEXEL_FRACTIONAL_BIT_COUNT = 8;
export const D3D11_TESSELLATOR_MAX_EVEN_TESSELLATION_FACTOR = 64;
export const D3D11_TESSELLATOR_MAX_ISOLINE_DENSITY_TESSELLATION_FACTOR = 64;
export const D3D11_TESSELLATOR_MAX_ODD_TESSELLATION_FACTOR = 63;
export const D3D11_TESSELLATOR_MAX_TESSELLATION_FACTOR = 64;
export const D3D11_TESSELLATOR_MIN_EVEN_TESSELLATION_FACTOR = 2;
export const D3D11_TESSELLATOR_MIN_ISOLINE_DENSITY_TESSELLATION_FACTOR = 1;
export const D3D11_TESSELLATOR_MIN_ODD_TESSELLATION_FACTOR = 1;
export const D3D11_TEXEL_ADDRESS_RANGE_BIT_COUNT = 16;
export const D3D11_UNBOUND_MEMORY_ACCESS_RESULT = 0;
export const D3D11_VIEWPORT_AND_SCISSORRECT_MAX_INDEX = 15;
export const D3D11_VIEWPORT_AND_SCISSORRECT_OBJECT_COUNT_PER_PIPELINE = 16;
export const D3D11_VIEWPORT_BOUNDS_MAX = 32767;
export const D3D11_VIEWPORT_BOUNDS_MIN = `-32768`;
export const D3D11_VS_INPUT_REGISTER_COMPONENTS = 4;
export const D3D11_VS_INPUT_REGISTER_COMPONENT_BIT_COUNT = 32;
export const D3D11_VS_INPUT_REGISTER_COUNT = 32;
export const D3D11_VS_INPUT_REGISTER_READS_PER_INST = 2;
export const D3D11_VS_INPUT_REGISTER_READ_PORTS = 1;
export const D3D11_VS_OUTPUT_REGISTER_COMPONENTS = 4;
export const D3D11_VS_OUTPUT_REGISTER_COMPONENT_BIT_COUNT = 32;
export const D3D11_VS_OUTPUT_REGISTER_COUNT = 32;
export const D3D11_WHQL_CONTEXT_COUNT_FOR_RESOURCE_LIMIT = 10;
export const D3D11_WHQL_DRAWINDEXED_INDEX_COUNT_2_TO_EXP = 25;
export const D3D11_WHQL_DRAW_VERTEX_COUNT_2_TO_EXP = 25;
export const D3D11_1_UAV_SLOT_COUNT = 64;
export const D3D11_2_TILED_RESOURCE_TILE_SIZE_IN_BYTES = 65536;
export const D3D11_4_VIDEO_DECODER_MAX_HISTOGRAM_COMPONENTS = 4;
export const D3D11_4_VIDEO_DECODER_HISTOGRAM_OFFSET_ALIGNMENT = 256;
export const _FACD3D11 = 2172;
export const D3D11_APPEND_ALIGNED_ELEMENT = 4294967295;
export const D3D11_FILTER_REDUCTION_TYPE_MASK = 3;
export const D3D11_FILTER_REDUCTION_TYPE_SHIFT = 7;
export const D3D11_FILTER_TYPE_MASK = 3;
export const D3D11_MIN_FILTER_SHIFT = 4;
export const D3D11_MAG_FILTER_SHIFT = 2;
export const D3D11_MIP_FILTER_SHIFT = 0;
export const D3D11_COMPARISON_FILTERING_BIT = 128;
export const D3D11_ANISOTROPIC_FILTERING_BIT = 64;
export const D3D11_SDK_VERSION = 7;
export const D3D11_PACKED_TILE = 4294967295;
export const D3D11_SDK_LAYERS_VERSION = 1;
export const D3D11_DEBUG_FEATURE_FLUSH_PER_RENDER_OP = 1;
export const D3D11_DEBUG_FEATURE_FINISH_PER_RENDER_OP = 2;
export const D3D11_DEBUG_FEATURE_PRESENT_PER_RENDER_OP = 4;
export const D3D11_DEBUG_FEATURE_ALWAYS_DISCARD_OFFERED_RESOURCE = 8;
export const D3D11_DEBUG_FEATURE_NEVER_DISCARD_OFFERED_RESOURCE = 16;
export const D3D11_DEBUG_FEATURE_AVOID_BEHAVIOR_CHANGING_DEBUG_AIDS = 64;
export const D3D11_DEBUG_FEATURE_DISABLE_TILED_RESOURCE_MAPPING_TRACKING_AND_VALIDATION = 128;
export const D3D11_REGKEY_PATH = `Software\\Microsoft\\Direct3D`;
export const D3D11_MUTE_DEBUG_OUTPUT = `MuteDebugOutput`;
export const D3D11_ENABLE_BREAK_ON_MESSAGE = `EnableBreakOnMessage`;
export const D3D11_INFOQUEUE_STORAGE_FILTER_OVERRIDE = `InfoQueueStorageFilterOverride`;
export const D3D11_MUTE_CATEGORY = `Mute_CATEGORY_%s`;
export const D3D11_MUTE_SEVERITY = `Mute_SEVERITY_%s`;
export const D3D11_MUTE_ID_STRING = `Mute_ID_%s`;
export const D3D11_MUTE_ID_DECIMAL = `Mute_ID_%d`;
export const D3D11_UNMUTE_SEVERITY_INFO = `Unmute_SEVERITY_INFO`;
export const D3D11_BREAKON_CATEGORY = `BreakOn_CATEGORY_%s`;
export const D3D11_BREAKON_SEVERITY = `BreakOn_SEVERITY_%s`;
export const D3D11_BREAKON_ID_STRING = `BreakOn_ID_%s`;
export const D3D11_BREAKON_ID_DECIMAL = `BreakOn_ID_%d`;
export const D3D11_APPSIZE_STRING = `Size`;
export const D3D11_APPNAME_STRING = `Name`;
export const D3D11_FORCE_DEBUGGABLE = `ForceDebuggable`;
export const D3D11_FORCE_SHADER_SKIP_OPTIMIZATION = `ForceShaderSkipOptimization`;
export const D3D11_INFO_QUEUE_DEFAULT_MESSAGE_COUNT_LIMIT = 1024;
export const D3D_RETURN_PARAMETER_INDEX = `-1`;
export const D3D_SHADER_REQUIRES_DOUBLES = 1;
export const D3D_SHADER_REQUIRES_EARLY_DEPTH_STENCIL = 2;
export const D3D_SHADER_REQUIRES_UAVS_AT_EVERY_STAGE = 4;
export const D3D_SHADER_REQUIRES_64_UAVS = 8;
export const D3D_SHADER_REQUIRES_MINIMUM_PRECISION = 16;
export const D3D_SHADER_REQUIRES_11_1_DOUBLE_EXTENSIONS = 32;
export const D3D_SHADER_REQUIRES_11_1_SHADER_EXTENSIONS = 64;
export const D3D_SHADER_REQUIRES_LEVEL_9_COMPARISON_FILTERING = 128;
export const D3D_SHADER_REQUIRES_TILED_RESOURCES = 256;
export const D3D11_TRACE_COMPONENT_X = 1;
export const D3D11_TRACE_COMPONENT_Y = 2;
export const D3D11_TRACE_COMPONENT_Z = 4;
export const D3D11_TRACE_COMPONENT_W = 8;
export const D3D11_SHADER_TRACE_FLAG_RECORD_REGISTER_WRITES = 1;
export const D3D11_SHADER_TRACE_FLAG_RECORD_REGISTER_READS = 2;
export const D3D11_TRACE_REGISTER_FLAGS_RELATIVE_INDEXING = 1;
export const D3D11_TRACE_MISC_GS_EMIT = 1;
export const D3D11_TRACE_MISC_GS_CUT = 2;
export const D3D11_TRACE_MISC_PS_DISCARD = 4;
export const D3D11_TRACE_MISC_GS_EMIT_STREAM = 8;
export const D3D11_TRACE_MISC_GS_CUT_STREAM = 16;
export const D3D11_TRACE_MISC_HALT = 32;
export const D3D11_TRACE_MISC_MESSAGE = 64;
export const D3DCSX_DLL_W = `d3dcsx_47.dll`;
export const D3DCSX_DLL_A = `d3dcsx_47.dll`;
export const D3DCSX_DLL = `d3dcsx_47.dll`;
export const D3DX11_FFT_MAX_PRECOMPUTE_BUFFERS = 4;
export const D3DX11_FFT_MAX_TEMP_BUFFERS = 4;
export const D3DX11_FFT_MAX_DIMENSIONS = 32;
export const D3D11_INPUT_PER_VERTEX_DATA = 0;
export const D3D11_INPUT_PER_INSTANCE_DATA = 1;
export const DXGI_FORMAT_UNKNOWN = 0;
export const DXGI_FORMAT_R32G32B32A32_TYPELESS = 1;
export const DXGI_FORMAT_R32G32B32A32_FLOAT = 2;
export const DXGI_FORMAT_R32G32B32A32_UINT = 3;
export const DXGI_FORMAT_R32G32B32A32_SINT = 4;
export const DXGI_FORMAT_R32G32B32_TYPELESS = 5;
export const DXGI_FORMAT_R32G32B32_FLOAT = 6;
export const DXGI_FORMAT_R32G32B32_UINT = 7;
export const DXGI_FORMAT_R32G32B32_SINT = 8;
export const DXGI_FORMAT_R16G16B16A16_TYPELESS = 9;
export const DXGI_FORMAT_R16G16B16A16_FLOAT = 10;
export const DXGI_FORMAT_R16G16B16A16_UNORM = 11;
export const DXGI_FORMAT_R16G16B16A16_UINT = 12;
export const DXGI_FORMAT_R16G16B16A16_SNORM = 13;
export const DXGI_FORMAT_R16G16B16A16_SINT = 14;
export const DXGI_FORMAT_R32G32_TYPELESS = 15;
export const DXGI_FORMAT_R32G32_FLOAT = 16;
export const DXGI_FORMAT_R32G32_UINT = 17;
export const DXGI_FORMAT_R32G32_SINT = 18;
export const DXGI_FORMAT_R32G8X24_TYPELESS = 19;
export const DXGI_FORMAT_D32_FLOAT_S8X24_UINT = 20;
export const DXGI_FORMAT_R32_FLOAT_X8X24_TYPELESS = 21;
export const DXGI_FORMAT_X32_TYPELESS_G8X24_UINT = 22;
export const DXGI_FORMAT_R10G10B10A2_TYPELESS = 23;
export const DXGI_FORMAT_R10G10B10A2_UNORM = 24;
export const DXGI_FORMAT_R10G10B10A2_UINT = 25;
export const DXGI_FORMAT_R11G11B10_FLOAT = 26;
export const DXGI_FORMAT_R8G8B8A8_TYPELESS = 27;
export const DXGI_FORMAT_R8G8B8A8_UNORM = 28;
export const DXGI_FORMAT_R8G8B8A8_UNORM_SRGB = 29;
export const DXGI_FORMAT_R8G8B8A8_UINT = 30;
export const DXGI_FORMAT_R8G8B8A8_SNORM = 31;
export const DXGI_FORMAT_R8G8B8A8_SINT = 32;
export const DXGI_FORMAT_R16G16_TYPELESS = 33;
export const DXGI_FORMAT_R16G16_FLOAT = 34;
export const DXGI_FORMAT_R16G16_UNORM = 35;
export const DXGI_FORMAT_R16G16_UINT = 36;
export const DXGI_FORMAT_R16G16_SNORM = 37;
export const DXGI_FORMAT_R16G16_SINT = 38;
export const DXGI_FORMAT_R32_TYPELESS = 39;
export const DXGI_FORMAT_D32_FLOAT = 40;
export const DXGI_FORMAT_R32_FLOAT = 41;
export const DXGI_FORMAT_R32_UINT = 42;
export const DXGI_FORMAT_R32_SINT = 43;
export const DXGI_FORMAT_R24G8_TYPELESS = 44;
export const DXGI_FORMAT_D24_UNORM_S8_UINT = 45;
export const DXGI_FORMAT_R24_UNORM_X8_TYPELESS = 46;
export const DXGI_FORMAT_X24_TYPELESS_G8_UINT = 47;
export const DXGI_FORMAT_R8G8_TYPELESS = 48;
export const DXGI_FORMAT_R8G8_UNORM = 49;
export const DXGI_FORMAT_R8G8_UINT = 50;
export const DXGI_FORMAT_R8G8_SNORM = 51;
export const DXGI_FORMAT_R8G8_SINT = 52;
export const DXGI_FORMAT_R16_TYPELESS = 53;
export const DXGI_FORMAT_R16_FLOAT = 54;
export const DXGI_FORMAT_D16_UNORM = 55;
export const DXGI_FORMAT_R16_UNORM = 56;
export const DXGI_FORMAT_R16_UINT = 57;
export const DXGI_FORMAT_R16_SNORM = 58;
export const DXGI_FORMAT_R16_SINT = 59;
export const DXGI_FORMAT_R8_TYPELESS = 60;
export const DXGI_FORMAT_R8_UNORM = 61;
export const DXGI_FORMAT_R8_UINT = 62;
export const DXGI_FORMAT_R8_SNORM = 63;
export const DXGI_FORMAT_R8_SINT = 64;
export const DXGI_FORMAT_A8_UNORM = 65;
export const DXGI_FORMAT_R1_UNORM = 66;
export const DXGI_FORMAT_R9G9B9E5_SHAREDEXP = 67;
export const DXGI_FORMAT_R8G8_B8G8_UNORM = 68;
export const DXGI_FORMAT_G8R8_G8B8_UNORM = 69;
export const DXGI_FORMAT_BC1_TYPELESS = 70;
export const DXGI_FORMAT_BC1_UNORM = 71;
export const DXGI_FORMAT_BC1_UNORM_SRGB = 72;
export const DXGI_FORMAT_BC2_TYPELESS = 73;
export const DXGI_FORMAT_BC2_UNORM = 74;
export const DXGI_FORMAT_BC2_UNORM_SRGB = 75;
export const DXGI_FORMAT_BC3_TYPELESS = 76;
export const DXGI_FORMAT_BC3_UNORM = 77;
export const DXGI_FORMAT_BC3_UNORM_SRGB = 78;
export const DXGI_FORMAT_BC4_TYPELESS = 79;
export const DXGI_FORMAT_BC4_UNORM = 80;
export const DXGI_FORMAT_BC4_SNORM = 81;
export const DXGI_FORMAT_BC5_TYPELESS = 82;
export const DXGI_FORMAT_BC5_UNORM = 83;
export const DXGI_FORMAT_BC5_SNORM = 84;
export const DXGI_FORMAT_B5G6R5_UNORM = 85;
export const DXGI_FORMAT_B5G5R5A1_UNORM = 86;
export const DXGI_FORMAT_B8G8R8A8_UNORM = 87;
export const DXGI_FORMAT_B8G8R8X8_UNORM = 88;
export const DXGI_FORMAT_R10G10B10_XR_BIAS_A2_UNORM = 89;
export const DXGI_FORMAT_B8G8R8A8_TYPELESS = 90;
export const DXGI_FORMAT_B8G8R8A8_UNORM_SRGB = 91;
export const DXGI_FORMAT_B8G8R8X8_TYPELESS = 92;
export const DXGI_FORMAT_B8G8R8X8_UNORM_SRGB = 93;
export const DXGI_FORMAT_BC6H_TYPELESS = 94;
export const DXGI_FORMAT_BC6H_UF16 = 95;
export const DXGI_FORMAT_BC6H_SF16 = 96;
export const DXGI_FORMAT_BC7_TYPELESS = 97;
export const DXGI_FORMAT_BC7_UNORM = 98;
export const DXGI_FORMAT_BC7_UNORM_SRGB = 99;
export const DXGI_FORMAT_AYUV = 100;
export const DXGI_FORMAT_Y410 = 101;
export const DXGI_FORMAT_Y416 = 102;
export const DXGI_FORMAT_NV12 = 103;
export const DXGI_FORMAT_P010 = 104;
export const DXGI_FORMAT_P016 = 105;
export const DXGI_FORMAT_420_OPAQUE = 106;
export const DXGI_FORMAT_YUY2 = 107;
export const DXGI_FORMAT_Y210 = 108;
export const DXGI_FORMAT_Y216 = 109;
export const DXGI_FORMAT_NV11 = 110;
export const DXGI_FORMAT_AI44 = 111;
export const DXGI_FORMAT_IA44 = 112;
export const DXGI_FORMAT_P8 = 113;
export const DXGI_FORMAT_A8P8 = 114;
export const DXGI_FORMAT_B4G4R4A4_UNORM = 115;
export const DXGI_FORMAT_P208 = 130;
export const DXGI_FORMAT_V208 = 131;
export const DXGI_FORMAT_V408 = 132;
export const DXGI_FORMAT_SAMPLER_FEEDBACK_MIN_MIP_OPAQUE = 189;
export const DXGI_FORMAT_SAMPLER_FEEDBACK_MIP_REGION_USED_OPAQUE = 190;
export const DXGI_FORMAT_FORCE_UINT = 4294967295;
export const D3D11_FILL_WIREFRAME = 2;
export const D3D11_FILL_SOLID = 3;
export const D3D11_CULL_NONE = 1;
export const D3D11_CULL_FRONT = 2;
export const D3D11_CULL_BACK = 3;
export const D3D11_RESOURCE_DIMENSION_UNKNOWN = 0;
export const D3D11_RESOURCE_DIMENSION_BUFFER = 1;
export const D3D11_RESOURCE_DIMENSION_TEXTURE1D = 2;
export const D3D11_RESOURCE_DIMENSION_TEXTURE2D = 3;
export const D3D11_RESOURCE_DIMENSION_TEXTURE3D = 4;
export const D3D11_DSV_DIMENSION_UNKNOWN = 0;
export const D3D11_DSV_DIMENSION_TEXTURE1D = 1;
export const D3D11_DSV_DIMENSION_TEXTURE1DARRAY = 2;
export const D3D11_DSV_DIMENSION_TEXTURE2D = 3;
export const D3D11_DSV_DIMENSION_TEXTURE2DARRAY = 4;
export const D3D11_DSV_DIMENSION_TEXTURE2DMS = 5;
export const D3D11_DSV_DIMENSION_TEXTURE2DMSARRAY = 6;
export const D3D11_RTV_DIMENSION_UNKNOWN = 0;
export const D3D11_RTV_DIMENSION_BUFFER = 1;
export const D3D11_RTV_DIMENSION_TEXTURE1D = 2;
export const D3D11_RTV_DIMENSION_TEXTURE1DARRAY = 3;
export const D3D11_RTV_DIMENSION_TEXTURE2D = 4;
export const D3D11_RTV_DIMENSION_TEXTURE2DARRAY = 5;
export const D3D11_RTV_DIMENSION_TEXTURE2DMS = 6;
export const D3D11_RTV_DIMENSION_TEXTURE2DMSARRAY = 7;
export const D3D11_RTV_DIMENSION_TEXTURE3D = 8;
export const D3D11_UAV_DIMENSION_UNKNOWN = 0;
export const D3D11_UAV_DIMENSION_BUFFER = 1;
export const D3D11_UAV_DIMENSION_TEXTURE1D = 2;
export const D3D11_UAV_DIMENSION_TEXTURE1DARRAY = 3;
export const D3D11_UAV_DIMENSION_TEXTURE2D = 4;
export const D3D11_UAV_DIMENSION_TEXTURE2DARRAY = 5;
export const D3D11_UAV_DIMENSION_TEXTURE3D = 8;
export const D3D11_USAGE_DEFAULT = 0;
export const D3D11_USAGE_IMMUTABLE = 1;
export const D3D11_USAGE_DYNAMIC = 2;
export const D3D11_USAGE_STAGING = 3;
export const D3D11_BIND_VERTEX_BUFFER = 1;
export const D3D11_BIND_INDEX_BUFFER = 2;
export const D3D11_BIND_CONSTANT_BUFFER = 4;
export const D3D11_BIND_SHADER_RESOURCE = 8;
export const D3D11_BIND_STREAM_OUTPUT = 16;
export const D3D11_BIND_RENDER_TARGET = 32;
export const D3D11_BIND_DEPTH_STENCIL = 64;
export const D3D11_BIND_UNORDERED_ACCESS = 128;
export const D3D11_BIND_DECODER = 512;
export const D3D11_BIND_VIDEO_ENCODER = 1024;
export const D3D11_CPU_ACCESS_WRITE = 65536;
export const D3D11_CPU_ACCESS_READ = 131072;
export const D3D11_RESOURCE_MISC_GENERATE_MIPS = 1;
export const D3D11_RESOURCE_MISC_SHARED = 2;
export const D3D11_RESOURCE_MISC_TEXTURECUBE = 4;
export const D3D11_RESOURCE_MISC_DRAWINDIRECT_ARGS = 16;
export const D3D11_RESOURCE_MISC_BUFFER_ALLOW_RAW_VIEWS = 32;
export const D3D11_RESOURCE_MISC_BUFFER_STRUCTURED = 64;
export const D3D11_RESOURCE_MISC_RESOURCE_CLAMP = 128;
export const D3D11_RESOURCE_MISC_SHARED_KEYEDMUTEX = 256;
export const D3D11_RESOURCE_MISC_GDI_COMPATIBLE = 512;
export const D3D11_RESOURCE_MISC_SHARED_NTHANDLE = 2048;
export const D3D11_RESOURCE_MISC_RESTRICTED_CONTENT = 4096;
export const D3D11_RESOURCE_MISC_RESTRICT_SHARED_RESOURCE = 8192;
export const D3D11_RESOURCE_MISC_RESTRICT_SHARED_RESOURCE_DRIVER = 16384;
export const D3D11_RESOURCE_MISC_GUARDED = 32768;
export const D3D11_RESOURCE_MISC_TILE_POOL = 131072;
export const D3D11_RESOURCE_MISC_TILED = 262144;
export const D3D11_RESOURCE_MISC_HW_PROTECTED = 524288;
export const D3D11_RESOURCE_MISC_SHARED_DISPLAYABLE = 1048576;
export const D3D11_RESOURCE_MISC_SHARED_EXCLUSIVE_WRITER = 2097152;
export const D3D11_MAP_READ = 1;
export const D3D11_MAP_WRITE = 2;
export const D3D11_MAP_READ_WRITE = 3;
export const D3D11_MAP_WRITE_DISCARD = 4;
export const D3D11_MAP_WRITE_NO_OVERWRITE = 5;
export const D3D11_MAP_FLAG_DO_NOT_WAIT = 1048576;
export const D3D11_RAISE_FLAG_DRIVER_INTERNAL_ERROR = 1;
export const D3D11_CLEAR_DEPTH = 1;
export const D3D11_CLEAR_STENCIL = 2;
export const D3D11_COMPARISON_NEVER = 1;
export const D3D11_COMPARISON_LESS = 2;
export const D3D11_COMPARISON_EQUAL = 3;
export const D3D11_COMPARISON_LESS_EQUAL = 4;
export const D3D11_COMPARISON_GREATER = 5;
export const D3D11_COMPARISON_NOT_EQUAL = 6;
export const D3D11_COMPARISON_GREATER_EQUAL = 7;
export const D3D11_COMPARISON_ALWAYS = 8;
export const D3D11_DEPTH_WRITE_MASK_ZERO = 0;
export const D3D11_DEPTH_WRITE_MASK_ALL = 1;
export const D3D11_STENCIL_OP_KEEP = 1;
export const D3D11_STENCIL_OP_ZERO = 2;
export const D3D11_STENCIL_OP_REPLACE = 3;
export const D3D11_STENCIL_OP_INCR_SAT = 4;
export const D3D11_STENCIL_OP_DECR_SAT = 5;
export const D3D11_STENCIL_OP_INVERT = 6;
export const D3D11_STENCIL_OP_INCR = 7;
export const D3D11_STENCIL_OP_DECR = 8;
export const D3D11_BLEND_ZERO = 1;
export const D3D11_BLEND_ONE = 2;
export const D3D11_BLEND_SRC_COLOR = 3;
export const D3D11_BLEND_INV_SRC_COLOR = 4;
export const D3D11_BLEND_SRC_ALPHA = 5;
export const D3D11_BLEND_INV_SRC_ALPHA = 6;
export const D3D11_BLEND_DEST_ALPHA = 7;
export const D3D11_BLEND_INV_DEST_ALPHA = 8;
export const D3D11_BLEND_DEST_COLOR = 9;
export const D3D11_BLEND_INV_DEST_COLOR = 10;
export const D3D11_BLEND_SRC_ALPHA_SAT = 11;
export const D3D11_BLEND_BLEND_FACTOR = 14;
export const D3D11_BLEND_INV_BLEND_FACTOR = 15;
export const D3D11_BLEND_SRC1_COLOR = 16;
export const D3D11_BLEND_INV_SRC1_COLOR = 17;
export const D3D11_BLEND_SRC1_ALPHA = 18;
export const D3D11_BLEND_INV_SRC1_ALPHA = 19;
export const D3D11_BLEND_OP_ADD = 1;
export const D3D11_BLEND_OP_SUBTRACT = 2;
export const D3D11_BLEND_OP_REV_SUBTRACT = 3;
export const D3D11_BLEND_OP_MIN = 4;
export const D3D11_BLEND_OP_MAX = 5;
export const D3D11_COLOR_WRITE_ENABLE_RED = 1;
export const D3D11_COLOR_WRITE_ENABLE_GREEN = 2;
export const D3D11_COLOR_WRITE_ENABLE_BLUE = 4;
export const D3D11_COLOR_WRITE_ENABLE_ALPHA = 8;
export const D3D11_COLOR_WRITE_ENABLE_ALL = 15;
export const D3D11_TEXTURECUBE_FACE_POSITIVE_X = 0;
export const D3D11_TEXTURECUBE_FACE_NEGATIVE_X = 1;
export const D3D11_TEXTURECUBE_FACE_POSITIVE_Y = 2;
export const D3D11_TEXTURECUBE_FACE_NEGATIVE_Y = 3;
export const D3D11_TEXTURECUBE_FACE_POSITIVE_Z = 4;
export const D3D11_TEXTURECUBE_FACE_NEGATIVE_Z = 5;
export const D3D11_BUFFEREX_SRV_FLAG_RAW = 1;
export const D3D_SRV_DIMENSION_UNKNOWN = 0;
export const D3D_SRV_DIMENSION_BUFFER = 1;
export const D3D_SRV_DIMENSION_TEXTURE1D = 2;
export const D3D_SRV_DIMENSION_TEXTURE1DARRAY = 3;
export const D3D_SRV_DIMENSION_TEXTURE2D = 4;
export const D3D_SRV_DIMENSION_TEXTURE2DARRAY = 5;
export const D3D_SRV_DIMENSION_TEXTURE2DMS = 6;
export const D3D_SRV_DIMENSION_TEXTURE2DMSARRAY = 7;
export const D3D_SRV_DIMENSION_TEXTURE3D = 8;
export const D3D_SRV_DIMENSION_TEXTURECUBE = 9;
export const D3D_SRV_DIMENSION_TEXTURECUBEARRAY = 10;
export const D3D_SRV_DIMENSION_BUFFEREX = 11;
export const D3D10_SRV_DIMENSION_UNKNOWN = 0;
export const D3D10_SRV_DIMENSION_BUFFER = 1;
export const D3D10_SRV_DIMENSION_TEXTURE1D = 2;
export const D3D10_SRV_DIMENSION_TEXTURE1DARRAY = 3;
export const D3D10_SRV_DIMENSION_TEXTURE2D = 4;
export const D3D10_SRV_DIMENSION_TEXTURE2DARRAY = 5;
export const D3D10_SRV_DIMENSION_TEXTURE2DMS = 6;
export const D3D10_SRV_DIMENSION_TEXTURE2DMSARRAY = 7;
export const D3D10_SRV_DIMENSION_TEXTURE3D = 8;
export const D3D10_SRV_DIMENSION_TEXTURECUBE = 9;
export const D3D10_1_SRV_DIMENSION_UNKNOWN = 0;
export const D3D10_1_SRV_DIMENSION_BUFFER = 1;
export const D3D10_1_SRV_DIMENSION_TEXTURE1D = 2;
export const D3D10_1_SRV_DIMENSION_TEXTURE1DARRAY = 3;
export const D3D10_1_SRV_DIMENSION_TEXTURE2D = 4;
export const D3D10_1_SRV_DIMENSION_TEXTURE2DARRAY = 5;
export const D3D10_1_SRV_DIMENSION_TEXTURE2DMS = 6;
export const D3D10_1_SRV_DIMENSION_TEXTURE2DMSARRAY = 7;
export const D3D10_1_SRV_DIMENSION_TEXTURE3D = 8;
export const D3D10_1_SRV_DIMENSION_TEXTURECUBE = 9;
export const D3D10_1_SRV_DIMENSION_TEXTURECUBEARRAY = 10;
export const D3D11_SRV_DIMENSION_UNKNOWN = 0;
export const D3D11_SRV_DIMENSION_BUFFER = 1;
export const D3D11_SRV_DIMENSION_TEXTURE1D = 2;
export const D3D11_SRV_DIMENSION_TEXTURE1DARRAY = 3;
export const D3D11_SRV_DIMENSION_TEXTURE2D = 4;
export const D3D11_SRV_DIMENSION_TEXTURE2DARRAY = 5;
export const D3D11_SRV_DIMENSION_TEXTURE2DMS = 6;
export const D3D11_SRV_DIMENSION_TEXTURE2DMSARRAY = 7;
export const D3D11_SRV_DIMENSION_TEXTURE3D = 8;
export const D3D11_SRV_DIMENSION_TEXTURECUBE = 9;
export const D3D11_SRV_DIMENSION_TEXTURECUBEARRAY = 10;
export const D3D11_SRV_DIMENSION_BUFFEREX = 11;
export const D3D11_DSV_READ_ONLY_DEPTH = 1;
export const D3D11_DSV_READ_ONLY_STENCIL = 2;
export const D3D11_BUFFER_UAV_FLAG_RAW = 1;
export const D3D11_BUFFER_UAV_FLAG_APPEND = 2;
export const D3D11_BUFFER_UAV_FLAG_COUNTER = 4;
export const D3D11_FILTER_MIN_MAG_MIP_POINT = 0;
export const D3D11_FILTER_MIN_MAG_POINT_MIP_LINEAR = 1;
export const D3D11_FILTER_MIN_POINT_MAG_LINEAR_MIP_POINT = 4;
export const D3D11_FILTER_MIN_POINT_MAG_MIP_LINEAR = 5;
export const D3D11_FILTER_MIN_LINEAR_MAG_MIP_POINT = 16;
export const D3D11_FILTER_MIN_LINEAR_MAG_POINT_MIP_LINEAR = 17;
export const D3D11_FILTER_MIN_MAG_LINEAR_MIP_POINT = 20;
export const D3D11_FILTER_MIN_MAG_MIP_LINEAR = 21;
export const D3D11_FILTER_ANISOTROPIC = 85;
export const D3D11_FILTER_COMPARISON_MIN_MAG_MIP_POINT = 128;
export const D3D11_FILTER_COMPARISON_MIN_MAG_POINT_MIP_LINEAR = 129;
export const D3D11_FILTER_COMPARISON_MIN_POINT_MAG_LINEAR_MIP_POINT = 132;
export const D3D11_FILTER_COMPARISON_MIN_POINT_MAG_MIP_LINEAR = 133;
export const D3D11_FILTER_COMPARISON_MIN_LINEAR_MAG_MIP_POINT = 144;
export const D3D11_FILTER_COMPARISON_MIN_LINEAR_MAG_POINT_MIP_LINEAR = 145;
export const D3D11_FILTER_COMPARISON_MIN_MAG_LINEAR_MIP_POINT = 148;
export const D3D11_FILTER_COMPARISON_MIN_MAG_MIP_LINEAR = 149;
export const D3D11_FILTER_COMPARISON_ANISOTROPIC = 213;
export const D3D11_FILTER_MINIMUM_MIN_MAG_MIP_POINT = 256;
export const D3D11_FILTER_MINIMUM_MIN_MAG_POINT_MIP_LINEAR = 257;
export const D3D11_FILTER_MINIMUM_MIN_POINT_MAG_LINEAR_MIP_POINT = 260;
export const D3D11_FILTER_MINIMUM_MIN_POINT_MAG_MIP_LINEAR = 261;
export const D3D11_FILTER_MINIMUM_MIN_LINEAR_MAG_MIP_POINT = 272;
export const D3D11_FILTER_MINIMUM_MIN_LINEAR_MAG_POINT_MIP_LINEAR = 273;
export const D3D11_FILTER_MINIMUM_MIN_MAG_LINEAR_MIP_POINT = 276;
export const D3D11_FILTER_MINIMUM_MIN_MAG_MIP_LINEAR = 277;
export const D3D11_FILTER_MINIMUM_ANISOTROPIC = 341;
export const D3D11_FILTER_MAXIMUM_MIN_MAG_MIP_POINT = 384;
export const D3D11_FILTER_MAXIMUM_MIN_MAG_POINT_MIP_LINEAR = 385;
export const D3D11_FILTER_MAXIMUM_MIN_POINT_MAG_LINEAR_MIP_POINT = 388;
export const D3D11_FILTER_MAXIMUM_MIN_POINT_MAG_MIP_LINEAR = 389;
export const D3D11_FILTER_MAXIMUM_MIN_LINEAR_MAG_MIP_POINT = 400;
export const D3D11_FILTER_MAXIMUM_MIN_LINEAR_MAG_POINT_MIP_LINEAR = 401;
export const D3D11_FILTER_MAXIMUM_MIN_MAG_LINEAR_MIP_POINT = 404;
export const D3D11_FILTER_MAXIMUM_MIN_MAG_MIP_LINEAR = 405;
export const D3D11_FILTER_MAXIMUM_ANISOTROPIC = 469;
export const D3D11_FILTER_TYPE_POINT = 0;
export const D3D11_FILTER_TYPE_LINEAR = 1;
export const D3D11_FILTER_REDUCTION_TYPE_STANDARD = 0;
export const D3D11_FILTER_REDUCTION_TYPE_COMPARISON = 1;
export const D3D11_FILTER_REDUCTION_TYPE_MINIMUM = 2;
export const D3D11_FILTER_REDUCTION_TYPE_MAXIMUM = 3;
export const D3D11_TEXTURE_ADDRESS_WRAP = 1;
export const D3D11_TEXTURE_ADDRESS_MIRROR = 2;
export const D3D11_TEXTURE_ADDRESS_CLAMP = 3;
export const D3D11_TEXTURE_ADDRESS_BORDER = 4;
export const D3D11_TEXTURE_ADDRESS_MIRROR_ONCE = 5;
export const D3D11_FORMAT_SUPPORT_BUFFER = 1;
export const D3D11_FORMAT_SUPPORT_IA_VERTEX_BUFFER = 2;
export const D3D11_FORMAT_SUPPORT_IA_INDEX_BUFFER = 4;
export const D3D11_FORMAT_SUPPORT_SO_BUFFER = 8;
export const D3D11_FORMAT_SUPPORT_TEXTURE1D = 16;
export const D3D11_FORMAT_SUPPORT_TEXTURE2D = 32;
export const D3D11_FORMAT_SUPPORT_TEXTURE3D = 64;
export const D3D11_FORMAT_SUPPORT_TEXTURECUBE = 128;
export const D3D11_FORMAT_SUPPORT_SHADER_LOAD = 256;
export const D3D11_FORMAT_SUPPORT_SHADER_SAMPLE = 512;
export const D3D11_FORMAT_SUPPORT_SHADER_SAMPLE_COMPARISON = 1024;
export const D3D11_FORMAT_SUPPORT_SHADER_SAMPLE_MONO_TEXT = 2048;
export const D3D11_FORMAT_SUPPORT_MIP = 4096;
export const D3D11_FORMAT_SUPPORT_MIP_AUTOGEN = 8192;
export const D3D11_FORMAT_SUPPORT_RENDER_TARGET = 16384;
export const D3D11_FORMAT_SUPPORT_BLENDABLE = 32768;
export const D3D11_FORMAT_SUPPORT_DEPTH_STENCIL = 65536;
export const D3D11_FORMAT_SUPPORT_CPU_LOCKABLE = 131072;
export const D3D11_FORMAT_SUPPORT_MULTISAMPLE_RESOLVE = 262144;
export const D3D11_FORMAT_SUPPORT_DISPLAY = 524288;
export const D3D11_FORMAT_SUPPORT_CAST_WITHIN_BIT_LAYOUT = 1048576;
export const D3D11_FORMAT_SUPPORT_MULTISAMPLE_RENDERTARGET = 2097152;
export const D3D11_FORMAT_SUPPORT_MULTISAMPLE_LOAD = 4194304;
export const D3D11_FORMAT_SUPPORT_SHADER_GATHER = 8388608;
export const D3D11_FORMAT_SUPPORT_BACK_BUFFER_CAST = 16777216;
export const D3D11_FORMAT_SUPPORT_TYPED_UNORDERED_ACCESS_VIEW = 33554432;
export const D3D11_FORMAT_SUPPORT_SHADER_GATHER_COMPARISON = 67108864;
export const D3D11_FORMAT_SUPPORT_DECODER_OUTPUT = 134217728;
export const D3D11_FORMAT_SUPPORT_VIDEO_PROCESSOR_OUTPUT = 268435456;
export const D3D11_FORMAT_SUPPORT_VIDEO_PROCESSOR_INPUT = 536870912;
export const D3D11_FORMAT_SUPPORT_VIDEO_ENCODER = 1073741824;
export const D3D11_FORMAT_SUPPORT2_UAV_ATOMIC_ADD = 1;
export const D3D11_FORMAT_SUPPORT2_UAV_ATOMIC_BITWISE_OPS = 2;
export const D3D11_FORMAT_SUPPORT2_UAV_ATOMIC_COMPARE_STORE_OR_COMPARE_EXCHANGE = 4;
export const D3D11_FORMAT_SUPPORT2_UAV_ATOMIC_EXCHANGE = 8;
export const D3D11_FORMAT_SUPPORT2_UAV_ATOMIC_SIGNED_MIN_OR_MAX = 16;
export const D3D11_FORMAT_SUPPORT2_UAV_ATOMIC_UNSIGNED_MIN_OR_MAX = 32;
export const D3D11_FORMAT_SUPPORT2_UAV_TYPED_LOAD = 64;
export const D3D11_FORMAT_SUPPORT2_UAV_TYPED_STORE = 128;
export const D3D11_FORMAT_SUPPORT2_OUTPUT_MERGER_LOGIC_OP = 256;
export const D3D11_FORMAT_SUPPORT2_TILED = 512;
export const D3D11_FORMAT_SUPPORT2_SHAREABLE = 1024;
export const D3D11_FORMAT_SUPPORT2_MULTIPLANE_OVERLAY = 16384;
export const D3D11_ASYNC_GETDATA_DONOTFLUSH = 1;
export const D3D11_QUERY_EVENT = 0;
export const D3D11_QUERY_OCCLUSION = 1;
export const D3D11_QUERY_TIMESTAMP = 2;
export const D3D11_QUERY_TIMESTAMP_DISJOINT = 3;
export const D3D11_QUERY_PIPELINE_STATISTICS = 4;
export const D3D11_QUERY_OCCLUSION_PREDICATE = 5;
export const D3D11_QUERY_SO_STATISTICS = 6;
export const D3D11_QUERY_SO_OVERFLOW_PREDICATE = 7;
export const D3D11_QUERY_SO_STATISTICS_STREAM0 = 8;
export const D3D11_QUERY_SO_OVERFLOW_PREDICATE_STREAM0 = 9;
export const D3D11_QUERY_SO_STATISTICS_STREAM1 = 10;
export const D3D11_QUERY_SO_OVERFLOW_PREDICATE_STREAM1 = 11;
export const D3D11_QUERY_SO_STATISTICS_STREAM2 = 12;
export const D3D11_QUERY_SO_OVERFLOW_PREDICATE_STREAM2 = 13;
export const D3D11_QUERY_SO_STATISTICS_STREAM3 = 14;
export const D3D11_QUERY_SO_OVERFLOW_PREDICATE_STREAM3 = 15;
export const D3D11_QUERY_MISC_PREDICATEHINT = 1;
export const D3D11_COUNTER_DEVICE_DEPENDENT_0 = 1073741824;
export const D3D11_COUNTER_TYPE_FLOAT32 = 0;
export const D3D11_COUNTER_TYPE_UINT16 = 1;
export const D3D11_COUNTER_TYPE_UINT32 = 2;
export const D3D11_COUNTER_TYPE_UINT64 = 3;
export const D3D11_STANDARD_MULTISAMPLE_PATTERN = `-1`;
export const D3D11_CENTER_MULTISAMPLE_PATTERN = `-2`;
export const D3D11_DEVICE_CONTEXT_IMMEDIATE = 0;
export const D3D11_DEVICE_CONTEXT_DEFERRED = 1;
export const D3D11_FEATURE_THREADING = 0;
export const D3D11_FEATURE_DOUBLES = 1;
export const D3D11_FEATURE_FORMAT_SUPPORT = 2;
export const D3D11_FEATURE_FORMAT_SUPPORT2 = 3;
export const D3D11_FEATURE_D3D10_X_HARDWARE_OPTIONS = 4;
export const D3D11_FEATURE_D3D11_OPTIONS = 5;
export const D3D11_FEATURE_ARCHITECTURE_INFO = 6;
export const D3D11_FEATURE_D3D9_OPTIONS = 7;
export const D3D11_FEATURE_SHADER_MIN_PRECISION_SUPPORT = 8;
export const D3D11_FEATURE_D3D9_SHADOW_SUPPORT = 9;
export const D3D11_FEATURE_D3D11_OPTIONS1 = 10;
export const D3D11_FEATURE_D3D9_SIMPLE_INSTANCING_SUPPORT = 11;
export const D3D11_FEATURE_MARKER_SUPPORT = 12;
export const D3D11_FEATURE_D3D9_OPTIONS1 = 13;
export const D3D11_FEATURE_D3D11_OPTIONS2 = 14;
export const D3D11_FEATURE_D3D11_OPTIONS3 = 15;
export const D3D11_FEATURE_GPU_VIRTUAL_ADDRESS_SUPPORT = 16;
export const D3D11_FEATURE_D3D11_OPTIONS4 = 17;
export const D3D11_FEATURE_SHADER_CACHE = 18;
export const D3D11_FEATURE_D3D11_OPTIONS5 = 19;
export const D3D11_FEATURE_DISPLAYABLE = 20;
export const D3D11_SHADER_MIN_PRECISION_10_BIT = 1;
export const D3D11_SHADER_MIN_PRECISION_16_BIT = 2;
export const D3D11_TILED_RESOURCES_NOT_SUPPORTED = 0;
export const D3D11_TILED_RESOURCES_TIER_1 = 1;
export const D3D11_TILED_RESOURCES_TIER_2 = 2;
export const D3D11_TILED_RESOURCES_TIER_3 = 3;
export const D3D11_CONSERVATIVE_RASTERIZATION_NOT_SUPPORTED = 0;
export const D3D11_CONSERVATIVE_RASTERIZATION_TIER_1 = 1;
export const D3D11_CONSERVATIVE_RASTERIZATION_TIER_2 = 2;
export const D3D11_CONSERVATIVE_RASTERIZATION_TIER_3 = 3;
export const D3D11_SHADER_CACHE_SUPPORT_NONE = 0;
export const D3D11_SHADER_CACHE_SUPPORT_AUTOMATIC_INPROC_CACHE = 1;
export const D3D11_SHADER_CACHE_SUPPORT_AUTOMATIC_DISK_CACHE = 2;
export const D3D11_SHARED_RESOURCE_TIER_0 = 0;
export const D3D11_SHARED_RESOURCE_TIER_1 = 1;
export const D3D11_SHARED_RESOURCE_TIER_2 = 2;
export const D3D11_SHARED_RESOURCE_TIER_3 = 3;
export const D3D11_VIDEO_DECODER_BUFFER_PICTURE_PARAMETERS = 0;
export const D3D11_VIDEO_DECODER_BUFFER_MACROBLOCK_CONTROL = 1;
export const D3D11_VIDEO_DECODER_BUFFER_RESIDUAL_DIFFERENCE = 2;
export const D3D11_VIDEO_DECODER_BUFFER_DEBLOCKING_CONTROL = 3;
export const D3D11_VIDEO_DECODER_BUFFER_INVERSE_QUANTIZATION_MATRIX = 4;
export const D3D11_VIDEO_DECODER_BUFFER_SLICE_CONTROL = 5;
export const D3D11_VIDEO_DECODER_BUFFER_BITSTREAM = 6;
export const D3D11_VIDEO_DECODER_BUFFER_MOTION_VECTOR = 7;
export const D3D11_VIDEO_DECODER_BUFFER_FILM_GRAIN = 8;
export const D3D11_VIDEO_PROCESSOR_FORMAT_SUPPORT_INPUT = 1;
export const D3D11_VIDEO_PROCESSOR_FORMAT_SUPPORT_OUTPUT = 2;
export const D3D11_VIDEO_PROCESSOR_DEVICE_CAPS_LINEAR_SPACE = 1;
export const D3D11_VIDEO_PROCESSOR_DEVICE_CAPS_xvYCC = 2;
export const D3D11_VIDEO_PROCESSOR_DEVICE_CAPS_RGB_RANGE_CONVERSION = 4;
export const D3D11_VIDEO_PROCESSOR_DEVICE_CAPS_YCbCr_MATRIX_CONVERSION = 8;
export const D3D11_VIDEO_PROCESSOR_DEVICE_CAPS_NOMINAL_RANGE = 16;
export const D3D11_VIDEO_PROCESSOR_FEATURE_CAPS_ALPHA_FILL = 1;
export const D3D11_VIDEO_PROCESSOR_FEATURE_CAPS_CONSTRICTION = 2;
export const D3D11_VIDEO_PROCESSOR_FEATURE_CAPS_LUMA_KEY = 4;
export const D3D11_VIDEO_PROCESSOR_FEATURE_CAPS_ALPHA_PALETTE = 8;
export const D3D11_VIDEO_PROCESSOR_FEATURE_CAPS_LEGACY = 16;
export const D3D11_VIDEO_PROCESSOR_FEATURE_CAPS_STEREO = 32;
export const D3D11_VIDEO_PROCESSOR_FEATURE_CAPS_ROTATION = 64;
export const D3D11_VIDEO_PROCESSOR_FEATURE_CAPS_ALPHA_STREAM = 128;
export const D3D11_VIDEO_PROCESSOR_FEATURE_CAPS_PIXEL_ASPECT_RATIO = 256;
export const D3D11_VIDEO_PROCESSOR_FEATURE_CAPS_MIRROR = 512;
export const D3D11_VIDEO_PROCESSOR_FEATURE_CAPS_SHADER_USAGE = 1024;
export const D3D11_VIDEO_PROCESSOR_FEATURE_CAPS_METADATA_HDR10 = 2048;
export const D3D11_VIDEO_PROCESSOR_FILTER_CAPS_BRIGHTNESS = 1;
export const D3D11_VIDEO_PROCESSOR_FILTER_CAPS_CONTRAST = 2;
export const D3D11_VIDEO_PROCESSOR_FILTER_CAPS_HUE = 4;
export const D3D11_VIDEO_PROCESSOR_FILTER_CAPS_SATURATION = 8;
export const D3D11_VIDEO_PROCESSOR_FILTER_CAPS_NOISE_REDUCTION = 16;
export const D3D11_VIDEO_PROCESSOR_FILTER_CAPS_EDGE_ENHANCEMENT = 32;
export const D3D11_VIDEO_PROCESSOR_FILTER_CAPS_ANAMORPHIC_SCALING = 64;
export const D3D11_VIDEO_PROCESSOR_FILTER_CAPS_STEREO_ADJUSTMENT = 128;
export const D3D11_VIDEO_PROCESSOR_FORMAT_CAPS_RGB_INTERLACED = 1;
export const D3D11_VIDEO_PROCESSOR_FORMAT_CAPS_RGB_PROCAMP = 2;
export const D3D11_VIDEO_PROCESSOR_FORMAT_CAPS_RGB_LUMA_KEY = 4;
export const D3D11_VIDEO_PROCESSOR_FORMAT_CAPS_PALETTE_INTERLACED = 8;
export const D3D11_VIDEO_PROCESSOR_AUTO_STREAM_CAPS_DENOISE = 1;
export const D3D11_VIDEO_PROCESSOR_AUTO_STREAM_CAPS_DERINGING = 2;
export const D3D11_VIDEO_PROCESSOR_AUTO_STREAM_CAPS_EDGE_ENHANCEMENT = 4;
export const D3D11_VIDEO_PROCESSOR_AUTO_STREAM_CAPS_COLOR_CORRECTION = 8;
export const D3D11_VIDEO_PROCESSOR_AUTO_STREAM_CAPS_FLESH_TONE_MAPPING = 16;
export const D3D11_VIDEO_PROCESSOR_AUTO_STREAM_CAPS_IMAGE_STABILIZATION = 32;
export const D3D11_VIDEO_PROCESSOR_AUTO_STREAM_CAPS_SUPER_RESOLUTION = 64;
export const D3D11_VIDEO_PROCESSOR_AUTO_STREAM_CAPS_ANAMORPHIC_SCALING = 128;
export const D3D11_VIDEO_PROCESSOR_STEREO_CAPS_MONO_OFFSET = 1;
export const D3D11_VIDEO_PROCESSOR_STEREO_CAPS_ROW_INTERLEAVED = 2;
export const D3D11_VIDEO_PROCESSOR_STEREO_CAPS_COLUMN_INTERLEAVED = 4;
export const D3D11_VIDEO_PROCESSOR_STEREO_CAPS_CHECKERBOARD = 8;
export const D3D11_VIDEO_PROCESSOR_STEREO_CAPS_FLIP_MODE = 16;
export const D3D11_VIDEO_PROCESSOR_PROCESSOR_CAPS_DEINTERLACE_BLEND = 1;
export const D3D11_VIDEO_PROCESSOR_PROCESSOR_CAPS_DEINTERLACE_BOB = 2;
export const D3D11_VIDEO_PROCESSOR_PROCESSOR_CAPS_DEINTERLACE_ADAPTIVE = 4;
export const D3D11_VIDEO_PROCESSOR_PROCESSOR_CAPS_DEINTERLACE_MOTION_COMPENSATION = 8;
export const D3D11_VIDEO_PROCESSOR_PROCESSOR_CAPS_INVERSE_TELECINE = 16;
export const D3D11_VIDEO_PROCESSOR_PROCESSOR_CAPS_FRAME_RATE_CONVERSION = 32;
export const D3D11_VIDEO_PROCESSOR_ITELECINE_CAPS_32 = 1;
export const D3D11_VIDEO_PROCESSOR_ITELECINE_CAPS_22 = 2;
export const D3D11_VIDEO_PROCESSOR_ITELECINE_CAPS_2224 = 4;
export const D3D11_VIDEO_PROCESSOR_ITELECINE_CAPS_2332 = 8;
export const D3D11_VIDEO_PROCESSOR_ITELECINE_CAPS_32322 = 16;
export const D3D11_VIDEO_PROCESSOR_ITELECINE_CAPS_55 = 32;
export const D3D11_VIDEO_PROCESSOR_ITELECINE_CAPS_64 = 64;
export const D3D11_VIDEO_PROCESSOR_ITELECINE_CAPS_87 = 128;
export const D3D11_VIDEO_PROCESSOR_ITELECINE_CAPS_222222222223 = 256;
export const D3D11_VIDEO_PROCESSOR_ITELECINE_CAPS_OTHER = `-2147483648`;
export const D3D11_CONTENT_PROTECTION_CAPS_SOFTWARE = 1;
export const D3D11_CONTENT_PROTECTION_CAPS_HARDWARE = 2;
export const D3D11_CONTENT_PROTECTION_CAPS_PROTECTION_ALWAYS_ON = 4;
export const D3D11_CONTENT_PROTECTION_CAPS_PARTIAL_DECRYPTION = 8;
export const D3D11_CONTENT_PROTECTION_CAPS_CONTENT_KEY = 16;
export const D3D11_CONTENT_PROTECTION_CAPS_FRESHEN_SESSION_KEY = 32;
export const D3D11_CONTENT_PROTECTION_CAPS_ENCRYPTED_READ_BACK = 64;
export const D3D11_CONTENT_PROTECTION_CAPS_ENCRYPTED_READ_BACK_KEY = 128;
export const D3D11_CONTENT_PROTECTION_CAPS_SEQUENTIAL_CTR_IV = 256;
export const D3D11_CONTENT_PROTECTION_CAPS_ENCRYPT_SLICEDATA_ONLY = 512;
export const D3D11_CONTENT_PROTECTION_CAPS_DECRYPTION_BLT = 1024;
export const D3D11_CONTENT_PROTECTION_CAPS_HARDWARE_PROTECT_UNCOMPRESSED = 2048;
export const D3D11_CONTENT_PROTECTION_CAPS_HARDWARE_PROTECTED_MEMORY_PAGEABLE = 4096;
export const D3D11_CONTENT_PROTECTION_CAPS_HARDWARE_TEARDOWN = 8192;
export const D3D11_CONTENT_PROTECTION_CAPS_HARDWARE_DRM_COMMUNICATION = 16384;
export const D3D11_CONTENT_PROTECTION_CAPS_HARDWARE_DRM_COMMUNICATION_MULTI_THREADED = 32768;
export const D3D11_VIDEO_PROCESSOR_FILTER_BRIGHTNESS = 0;
export const D3D11_VIDEO_PROCESSOR_FILTER_CONTRAST = 1;
export const D3D11_VIDEO_PROCESSOR_FILTER_HUE = 2;
export const D3D11_VIDEO_PROCESSOR_FILTER_SATURATION = 3;
export const D3D11_VIDEO_PROCESSOR_FILTER_NOISE_REDUCTION = 4;
export const D3D11_VIDEO_PROCESSOR_FILTER_EDGE_ENHANCEMENT = 5;
export const D3D11_VIDEO_PROCESSOR_FILTER_ANAMORPHIC_SCALING = 6;
export const D3D11_VIDEO_PROCESSOR_FILTER_STEREO_ADJUSTMENT = 7;
export const D3D11_VIDEO_FRAME_FORMAT_PROGRESSIVE = 0;
export const D3D11_VIDEO_FRAME_FORMAT_INTERLACED_TOP_FIELD_FIRST = 1;
export const D3D11_VIDEO_FRAME_FORMAT_INTERLACED_BOTTOM_FIELD_FIRST = 2;
export const D3D11_VIDEO_USAGE_PLAYBACK_NORMAL = 0;
export const D3D11_VIDEO_USAGE_OPTIMAL_SPEED = 1;
export const D3D11_VIDEO_USAGE_OPTIMAL_QUALITY = 2;
export const D3D11_VIDEO_PROCESSOR_NOMINAL_RANGE_UNDEFINED = 0;
export const D3D11_VIDEO_PROCESSOR_NOMINAL_RANGE_16_235 = 1;
export const D3D11_VIDEO_PROCESSOR_NOMINAL_RANGE_0_255 = 2;
export const D3D11_VIDEO_PROCESSOR_ALPHA_FILL_MODE_OPAQUE = 0;
export const D3D11_VIDEO_PROCESSOR_ALPHA_FILL_MODE_BACKGROUND = 1;
export const D3D11_VIDEO_PROCESSOR_ALPHA_FILL_MODE_DESTINATION = 2;
export const D3D11_VIDEO_PROCESSOR_ALPHA_FILL_MODE_SOURCE_STREAM = 3;
export const D3D11_VIDEO_PROCESSOR_OUTPUT_RATE_NORMAL = 0;
export const D3D11_VIDEO_PROCESSOR_OUTPUT_RATE_HALF = 1;
export const D3D11_VIDEO_PROCESSOR_OUTPUT_RATE_CUSTOM = 2;
export const D3D11_VIDEO_PROCESSOR_STEREO_FORMAT_MONO = 0;
export const D3D11_VIDEO_PROCESSOR_STEREO_FORMAT_HORIZONTAL = 1;
export const D3D11_VIDEO_PROCESSOR_STEREO_FORMAT_VERTICAL = 2;
export const D3D11_VIDEO_PROCESSOR_STEREO_FORMAT_SEPARATE = 3;
export const D3D11_VIDEO_PROCESSOR_STEREO_FORMAT_MONO_OFFSET = 4;
export const D3D11_VIDEO_PROCESSOR_STEREO_FORMAT_ROW_INTERLEAVED = 5;
export const D3D11_VIDEO_PROCESSOR_STEREO_FORMAT_COLUMN_INTERLEAVED = 6;
export const D3D11_VIDEO_PROCESSOR_STEREO_FORMAT_CHECKERBOARD = 7;
export const D3D11_VIDEO_PROCESSOR_STEREO_FLIP_NONE = 0;
export const D3D11_VIDEO_PROCESSOR_STEREO_FLIP_FRAME0 = 1;
export const D3D11_VIDEO_PROCESSOR_STEREO_FLIP_FRAME1 = 2;
export const D3D11_VIDEO_PROCESSOR_ROTATION_IDENTITY = 0;
export const D3D11_VIDEO_PROCESSOR_ROTATION_90 = 1;
export const D3D11_VIDEO_PROCESSOR_ROTATION_180 = 2;
export const D3D11_VIDEO_PROCESSOR_ROTATION_270 = 3;
export const D3D11_AUTHENTICATED_CHANNEL_D3D11 = 1;
export const D3D11_AUTHENTICATED_CHANNEL_DRIVER_SOFTWARE = 2;
export const D3D11_AUTHENTICATED_CHANNEL_DRIVER_HARDWARE = 3;
export const D3D11_PROCESSIDTYPE_UNKNOWN = 0;
export const D3D11_PROCESSIDTYPE_DWM = 1;
export const D3D11_PROCESSIDTYPE_HANDLE = 2;
export const D3D11_BUS_TYPE_OTHER = 0;
export const D3D11_BUS_TYPE_PCI = 1;
export const D3D11_BUS_TYPE_PCIX = 2;
export const D3D11_BUS_TYPE_PCIEXPRESS = 3;
export const D3D11_BUS_TYPE_AGP = 4;
export const D3D11_BUS_IMPL_MODIFIER_INSIDE_OF_CHIPSET = 65536;
export const D3D11_BUS_IMPL_MODIFIER_TRACKS_ON_MOTHER_BOARD_TO_CHIP = 131072;
export const D3D11_BUS_IMPL_MODIFIER_TRACKS_ON_MOTHER_BOARD_TO_SOCKET = 196608;
export const D3D11_BUS_IMPL_MODIFIER_DAUGHTER_BOARD_CONNECTOR = 262144;
export const D3D11_BUS_IMPL_MODIFIER_DAUGHTER_BOARD_CONNECTOR_INSIDE_OF_NUAE = 327680;
export const D3D11_BUS_IMPL_MODIFIER_NON_STANDARD = `-2147483648`;
export const D3D11_VDOV_DIMENSION_UNKNOWN = 0;
export const D3D11_VDOV_DIMENSION_TEXTURE2D = 1;
export const D3D11_VPIV_DIMENSION_UNKNOWN = 0;
export const D3D11_VPIV_DIMENSION_TEXTURE2D = 1;
export const D3D11_VPOV_DIMENSION_UNKNOWN = 0;
export const D3D11_VPOV_DIMENSION_TEXTURE2D = 1;
export const D3D11_VPOV_DIMENSION_TEXTURE2DARRAY = 2;
export const D3D11_CREATE_DEVICE_SINGLETHREADED = 1;
export const D3D11_CREATE_DEVICE_DEBUG = 2;
export const D3D11_CREATE_DEVICE_SWITCH_TO_REF = 4;
export const D3D11_CREATE_DEVICE_PREVENT_INTERNAL_THREADING_OPTIMIZATIONS = 8;
export const D3D11_CREATE_DEVICE_BGRA_SUPPORT = 32;
export const D3D11_CREATE_DEVICE_DEBUGGABLE = 64;
export const D3D11_CREATE_DEVICE_PREVENT_ALTERING_LAYER_SETTINGS_FROM_REGISTRY = 128;
export const D3D11_CREATE_DEVICE_DISABLE_GPU_TIMEOUT = 256;
export const D3D11_CREATE_DEVICE_VIDEO_SUPPORT = 2048;
export const D3D11_RLDO_SUMMARY = 1;
export const D3D11_RLDO_DETAIL = 2;
export const D3D11_RLDO_IGNORE_INTERNAL = 4;
export const D3D11_SHADER_TRACKING_RESOURCE_TYPE_NONE = 0;
export const D3D11_SHADER_TRACKING_RESOURCE_TYPE_UAV_DEVICEMEMORY = 1;
export const D3D11_SHADER_TRACKING_RESOURCE_TYPE_NON_UAV_DEVICEMEMORY = 2;
export const D3D11_SHADER_TRACKING_RESOURCE_TYPE_ALL_DEVICEMEMORY = 3;
export const D3D11_SHADER_TRACKING_RESOURCE_TYPE_GROUPSHARED_MEMORY = 4;
export const D3D11_SHADER_TRACKING_RESOURCE_TYPE_ALL_SHARED_MEMORY = 5;
export const D3D11_SHADER_TRACKING_RESOURCE_TYPE_GROUPSHARED_NON_UAV = 6;
export const D3D11_SHADER_TRACKING_RESOURCE_TYPE_ALL = 7;
export const D3D11_SHADER_TRACKING_OPTION_IGNORE = 0;
export const D3D11_SHADER_TRACKING_OPTION_TRACK_UNINITIALIZED = 1;
export const D3D11_SHADER_TRACKING_OPTION_TRACK_RAW = 2;
export const D3D11_SHADER_TRACKING_OPTION_TRACK_WAR = 4;
export const D3D11_SHADER_TRACKING_OPTION_TRACK_WAW = 8;
export const D3D11_SHADER_TRACKING_OPTION_ALLOW_SAME = 16;
export const D3D11_SHADER_TRACKING_OPTION_TRACK_ATOMIC_CONSISTENCY = 32;
export const D3D11_SHADER_TRACKING_OPTION_TRACK_RAW_ACROSS_THREADGROUPS = 64;
export const D3D11_SHADER_TRACKING_OPTION_TRACK_WAR_ACROSS_THREADGROUPS = 128;
export const D3D11_SHADER_TRACKING_OPTION_TRACK_WAW_ACROSS_THREADGROUPS = 256;
export const D3D11_SHADER_TRACKING_OPTION_TRACK_ATOMIC_CONSISTENCY_ACROSS_THREADGROUPS = 512;
export const D3D11_SHADER_TRACKING_OPTION_UAV_SPECIFIC_FLAGS = 960;
export const D3D11_SHADER_TRACKING_OPTION_ALL_HAZARDS = 1006;
export const D3D11_SHADER_TRACKING_OPTION_ALL_HAZARDS_ALLOWING_SAME = 1022;
export const D3D11_SHADER_TRACKING_OPTION_ALL_OPTIONS = 1023;
export const D3D11_MESSAGE_CATEGORY_APPLICATION_DEFINED = 0;
export const D3D11_MESSAGE_CATEGORY_MISCELLANEOUS = 1;
export const D3D11_MESSAGE_CATEGORY_INITIALIZATION = 2;
export const D3D11_MESSAGE_CATEGORY_CLEANUP = 3;
export const D3D11_MESSAGE_CATEGORY_COMPILATION = 4;
export const D3D11_MESSAGE_CATEGORY_STATE_CREATION = 5;
export const D3D11_MESSAGE_CATEGORY_STATE_SETTING = 6;
export const D3D11_MESSAGE_CATEGORY_STATE_GETTING = 7;
export const D3D11_MESSAGE_CATEGORY_RESOURCE_MANIPULATION = 8;
export const D3D11_MESSAGE_CATEGORY_EXECUTION = 9;
export const D3D11_MESSAGE_CATEGORY_SHADER = 10;
export const D3D11_MESSAGE_SEVERITY_CORRUPTION = 0;
export const D3D11_MESSAGE_SEVERITY_ERROR = 1;
export const D3D11_MESSAGE_SEVERITY_WARNING = 2;
export const D3D11_MESSAGE_SEVERITY_INFO = 3;
export const D3D11_MESSAGE_SEVERITY_MESSAGE = 4;
export const D3D11_MESSAGE_ID_UNKNOWN = 0;
export const D3D11_MESSAGE_ID_DEVICE_IASETVERTEXBUFFERS_HAZARD = 1;
export const D3D11_MESSAGE_ID_DEVICE_IASETINDEXBUFFER_HAZARD = 2;
export const D3D11_MESSAGE_ID_DEVICE_VSSETSHADERRESOURCES_HAZARD = 3;
export const D3D11_MESSAGE_ID_DEVICE_VSSETCONSTANTBUFFERS_HAZARD = 4;
export const D3D11_MESSAGE_ID_DEVICE_GSSETSHADERRESOURCES_HAZARD = 5;
export const D3D11_MESSAGE_ID_DEVICE_GSSETCONSTANTBUFFERS_HAZARD = 6;
export const D3D11_MESSAGE_ID_DEVICE_PSSETSHADERRESOURCES_HAZARD = 7;
export const D3D11_MESSAGE_ID_DEVICE_PSSETCONSTANTBUFFERS_HAZARD = 8;
export const D3D11_MESSAGE_ID_DEVICE_OMSETRENDERTARGETS_HAZARD = 9;
export const D3D11_MESSAGE_ID_DEVICE_SOSETTARGETS_HAZARD = 10;
export const D3D11_MESSAGE_ID_STRING_FROM_APPLICATION = 11;
export const D3D11_MESSAGE_ID_CORRUPTED_THIS = 12;
export const D3D11_MESSAGE_ID_CORRUPTED_PARAMETER1 = 13;
export const D3D11_MESSAGE_ID_CORRUPTED_PARAMETER2 = 14;
export const D3D11_MESSAGE_ID_CORRUPTED_PARAMETER3 = 15;
export const D3D11_MESSAGE_ID_CORRUPTED_PARAMETER4 = 16;
export const D3D11_MESSAGE_ID_CORRUPTED_PARAMETER5 = 17;
export const D3D11_MESSAGE_ID_CORRUPTED_PARAMETER6 = 18;
export const D3D11_MESSAGE_ID_CORRUPTED_PARAMETER7 = 19;
export const D3D11_MESSAGE_ID_CORRUPTED_PARAMETER8 = 20;
export const D3D11_MESSAGE_ID_CORRUPTED_PARAMETER9 = 21;
export const D3D11_MESSAGE_ID_CORRUPTED_PARAMETER10 = 22;
export const D3D11_MESSAGE_ID_CORRUPTED_PARAMETER11 = 23;
export const D3D11_MESSAGE_ID_CORRUPTED_PARAMETER12 = 24;
export const D3D11_MESSAGE_ID_CORRUPTED_PARAMETER13 = 25;
export const D3D11_MESSAGE_ID_CORRUPTED_PARAMETER14 = 26;
export const D3D11_MESSAGE_ID_CORRUPTED_PARAMETER15 = 27;
export const D3D11_MESSAGE_ID_CORRUPTED_MULTITHREADING = 28;
export const D3D11_MESSAGE_ID_MESSAGE_REPORTING_OUTOFMEMORY = 29;
export const D3D11_MESSAGE_ID_IASETINPUTLAYOUT_UNBINDDELETINGOBJECT = 30;
export const D3D11_MESSAGE_ID_IASETVERTEXBUFFERS_UNBINDDELETINGOBJECT = 31;
export const D3D11_MESSAGE_ID_IASETINDEXBUFFER_UNBINDDELETINGOBJECT = 32;
export const D3D11_MESSAGE_ID_VSSETSHADER_UNBINDDELETINGOBJECT = 33;
export const D3D11_MESSAGE_ID_VSSETSHADERRESOURCES_UNBINDDELETINGOBJECT = 34;
export const D3D11_MESSAGE_ID_VSSETCONSTANTBUFFERS_UNBINDDELETINGOBJECT = 35;
export const D3D11_MESSAGE_ID_VSSETSAMPLERS_UNBINDDELETINGOBJECT = 36;
export const D3D11_MESSAGE_ID_GSSETSHADER_UNBINDDELETINGOBJECT = 37;
export const D3D11_MESSAGE_ID_GSSETSHADERRESOURCES_UNBINDDELETINGOBJECT = 38;
export const D3D11_MESSAGE_ID_GSSETCONSTANTBUFFERS_UNBINDDELETINGOBJECT = 39;
export const D3D11_MESSAGE_ID_GSSETSAMPLERS_UNBINDDELETINGOBJECT = 40;
export const D3D11_MESSAGE_ID_SOSETTARGETS_UNBINDDELETINGOBJECT = 41;
export const D3D11_MESSAGE_ID_PSSETSHADER_UNBINDDELETINGOBJECT = 42;
export const D3D11_MESSAGE_ID_PSSETSHADERRESOURCES_UNBINDDELETINGOBJECT = 43;
export const D3D11_MESSAGE_ID_PSSETCONSTANTBUFFERS_UNBINDDELETINGOBJECT = 44;
export const D3D11_MESSAGE_ID_PSSETSAMPLERS_UNBINDDELETINGOBJECT = 45;
export const D3D11_MESSAGE_ID_RSSETSTATE_UNBINDDELETINGOBJECT = 46;
export const D3D11_MESSAGE_ID_OMSETBLENDSTATE_UNBINDDELETINGOBJECT = 47;
export const D3D11_MESSAGE_ID_OMSETDEPTHSTENCILSTATE_UNBINDDELETINGOBJECT = 48;
export const D3D11_MESSAGE_ID_OMSETRENDERTARGETS_UNBINDDELETINGOBJECT = 49;
export const D3D11_MESSAGE_ID_SETPREDICATION_UNBINDDELETINGOBJECT = 50;
export const D3D11_MESSAGE_ID_GETPRIVATEDATA_MOREDATA = 51;
export const D3D11_MESSAGE_ID_SETPRIVATEDATA_INVALIDFREEDATA = 52;
export const D3D11_MESSAGE_ID_SETPRIVATEDATA_INVALIDIUNKNOWN = 53;
export const D3D11_MESSAGE_ID_SETPRIVATEDATA_INVALIDFLAGS = 54;
export const D3D11_MESSAGE_ID_SETPRIVATEDATA_CHANGINGPARAMS = 55;
export const D3D11_MESSAGE_ID_SETPRIVATEDATA_OUTOFMEMORY = 56;
export const D3D11_MESSAGE_ID_CREATEBUFFER_UNRECOGNIZEDFORMAT = 57;
export const D3D11_MESSAGE_ID_CREATEBUFFER_INVALIDSAMPLES = 58;
export const D3D11_MESSAGE_ID_CREATEBUFFER_UNRECOGNIZEDUSAGE = 59;
export const D3D11_MESSAGE_ID_CREATEBUFFER_UNRECOGNIZEDBINDFLAGS = 60;
export const D3D11_MESSAGE_ID_CREATEBUFFER_UNRECOGNIZEDCPUACCESSFLAGS = 61;
export const D3D11_MESSAGE_ID_CREATEBUFFER_UNRECOGNIZEDMISCFLAGS = 62;
export const D3D11_MESSAGE_ID_CREATEBUFFER_INVALIDCPUACCESSFLAGS = 63;
export const D3D11_MESSAGE_ID_CREATEBUFFER_INVALIDBINDFLAGS = 64;
export const D3D11_MESSAGE_ID_CREATEBUFFER_INVALIDINITIALDATA = 65;
export const D3D11_MESSAGE_ID_CREATEBUFFER_INVALIDDIMENSIONS = 66;
export const D3D11_MESSAGE_ID_CREATEBUFFER_INVALIDMIPLEVELS = 67;
export const D3D11_MESSAGE_ID_CREATEBUFFER_INVALIDMISCFLAGS = 68;
export const D3D11_MESSAGE_ID_CREATEBUFFER_INVALIDARG_RETURN = 69;
export const D3D11_MESSAGE_ID_CREATEBUFFER_OUTOFMEMORY_RETURN = 70;
export const D3D11_MESSAGE_ID_CREATEBUFFER_NULLDESC = 71;
export const D3D11_MESSAGE_ID_CREATEBUFFER_INVALIDCONSTANTBUFFERBINDINGS = 72;
export const D3D11_MESSAGE_ID_CREATEBUFFER_LARGEALLOCATION = 73;
export const D3D11_MESSAGE_ID_CREATETEXTURE1D_UNRECOGNIZEDFORMAT = 74;
export const D3D11_MESSAGE_ID_CREATETEXTURE1D_UNSUPPORTEDFORMAT = 75;
export const D3D11_MESSAGE_ID_CREATETEXTURE1D_INVALIDSAMPLES = 76;
export const D3D11_MESSAGE_ID_CREATETEXTURE1D_UNRECOGNIZEDUSAGE = 77;
export const D3D11_MESSAGE_ID_CREATETEXTURE1D_UNRECOGNIZEDBINDFLAGS = 78;
export const D3D11_MESSAGE_ID_CREATETEXTURE1D_UNRECOGNIZEDCPUACCESSFLAGS = 79;
export const D3D11_MESSAGE_ID_CREATETEXTURE1D_UNRECOGNIZEDMISCFLAGS = 80;
export const D3D11_MESSAGE_ID_CREATETEXTURE1D_INVALIDCPUACCESSFLAGS = 81;
export const D3D11_MESSAGE_ID_CREATETEXTURE1D_INVALIDBINDFLAGS = 82;
export const D3D11_MESSAGE_ID_CREATETEXTURE1D_INVALIDINITIALDATA = 83;
export const D3D11_MESSAGE_ID_CREATETEXTURE1D_INVALIDDIMENSIONS = 84;
export const D3D11_MESSAGE_ID_CREATETEXTURE1D_INVALIDMIPLEVELS = 85;
export const D3D11_MESSAGE_ID_CREATETEXTURE1D_INVALIDMISCFLAGS = 86;
export const D3D11_MESSAGE_ID_CREATETEXTURE1D_INVALIDARG_RETURN = 87;
export const D3D11_MESSAGE_ID_CREATETEXTURE1D_OUTOFMEMORY_RETURN = 88;
export const D3D11_MESSAGE_ID_CREATETEXTURE1D_NULLDESC = 89;
export const D3D11_MESSAGE_ID_CREATETEXTURE1D_LARGEALLOCATION = 90;
export const D3D11_MESSAGE_ID_CREATETEXTURE2D_UNRECOGNIZEDFORMAT = 91;
export const D3D11_MESSAGE_ID_CREATETEXTURE2D_UNSUPPORTEDFORMAT = 92;
export const D3D11_MESSAGE_ID_CREATETEXTURE2D_INVALIDSAMPLES = 93;
export const D3D11_MESSAGE_ID_CREATETEXTURE2D_UNRECOGNIZEDUSAGE = 94;
export const D3D11_MESSAGE_ID_CREATETEXTURE2D_UNRECOGNIZEDBINDFLAGS = 95;
export const D3D11_MESSAGE_ID_CREATETEXTURE2D_UNRECOGNIZEDCPUACCESSFLAGS = 96;
export const D3D11_MESSAGE_ID_CREATETEXTURE2D_UNRECOGNIZEDMISCFLAGS = 97;
export const D3D11_MESSAGE_ID_CREATETEXTURE2D_INVALIDCPUACCESSFLAGS = 98;
export const D3D11_MESSAGE_ID_CREATETEXTURE2D_INVALIDBINDFLAGS = 99;
export const D3D11_MESSAGE_ID_CREATETEXTURE2D_INVALIDINITIALDATA = 100;
export const D3D11_MESSAGE_ID_CREATETEXTURE2D_INVALIDDIMENSIONS = 101;
export const D3D11_MESSAGE_ID_CREATETEXTURE2D_INVALIDMIPLEVELS = 102;
export const D3D11_MESSAGE_ID_CREATETEXTURE2D_INVALIDMISCFLAGS = 103;
export const D3D11_MESSAGE_ID_CREATETEXTURE2D_INVALIDARG_RETURN = 104;
export const D3D11_MESSAGE_ID_CREATETEXTURE2D_OUTOFMEMORY_RETURN = 105;
export const D3D11_MESSAGE_ID_CREATETEXTURE2D_NULLDESC = 106;
export const D3D11_MESSAGE_ID_CREATETEXTURE2D_LARGEALLOCATION = 107;
export const D3D11_MESSAGE_ID_CREATETEXTURE3D_UNRECOGNIZEDFORMAT = 108;
export const D3D11_MESSAGE_ID_CREATETEXTURE3D_UNSUPPORTEDFORMAT = 109;
export const D3D11_MESSAGE_ID_CREATETEXTURE3D_INVALIDSAMPLES = 110;
export const D3D11_MESSAGE_ID_CREATETEXTURE3D_UNRECOGNIZEDUSAGE = 111;
export const D3D11_MESSAGE_ID_CREATETEXTURE3D_UNRECOGNIZEDBINDFLAGS = 112;
export const D3D11_MESSAGE_ID_CREATETEXTURE3D_UNRECOGNIZEDCPUACCESSFLAGS = 113;
export const D3D11_MESSAGE_ID_CREATETEXTURE3D_UNRECOGNIZEDMISCFLAGS = 114;
export const D3D11_MESSAGE_ID_CREATETEXTURE3D_INVALIDCPUACCESSFLAGS = 115;
export const D3D11_MESSAGE_ID_CREATETEXTURE3D_INVALIDBINDFLAGS = 116;
export const D3D11_MESSAGE_ID_CREATETEXTURE3D_INVALIDINITIALDATA = 117;
export const D3D11_MESSAGE_ID_CREATETEXTURE3D_INVALIDDIMENSIONS = 118;
export const D3D11_MESSAGE_ID_CREATETEXTURE3D_INVALIDMIPLEVELS = 119;
export const D3D11_MESSAGE_ID_CREATETEXTURE3D_INVALIDMISCFLAGS = 120;
export const D3D11_MESSAGE_ID_CREATETEXTURE3D_INVALIDARG_RETURN = 121;
export const D3D11_MESSAGE_ID_CREATETEXTURE3D_OUTOFMEMORY_RETURN = 122;
export const D3D11_MESSAGE_ID_CREATETEXTURE3D_NULLDESC = 123;
export const D3D11_MESSAGE_ID_CREATETEXTURE3D_LARGEALLOCATION = 124;
export const D3D11_MESSAGE_ID_CREATESHADERRESOURCEVIEW_UNRECOGNIZEDFORMAT = 125;
export const D3D11_MESSAGE_ID_CREATESHADERRESOURCEVIEW_INVALIDDESC = 126;
export const D3D11_MESSAGE_ID_CREATESHADERRESOURCEVIEW_INVALIDFORMAT = 127;
export const D3D11_MESSAGE_ID_CREATESHADERRESOURCEVIEW_INVALIDDIMENSIONS = 128;
export const D3D11_MESSAGE_ID_CREATESHADERRESOURCEVIEW_INVALIDRESOURCE = 129;
export const D3D11_MESSAGE_ID_CREATESHADERRESOURCEVIEW_TOOMANYOBJECTS = 130;
export const D3D11_MESSAGE_ID_CREATESHADERRESOURCEVIEW_INVALIDARG_RETURN = 131;
export const D3D11_MESSAGE_ID_CREATESHADERRESOURCEVIEW_OUTOFMEMORY_RETURN = 132;
export const D3D11_MESSAGE_ID_CREATERENDERTARGETVIEW_UNRECOGNIZEDFORMAT = 133;
export const D3D11_MESSAGE_ID_CREATERENDERTARGETVIEW_UNSUPPORTEDFORMAT = 134;
export const D3D11_MESSAGE_ID_CREATERENDERTARGETVIEW_INVALIDDESC = 135;
export const D3D11_MESSAGE_ID_CREATERENDERTARGETVIEW_INVALIDFORMAT = 136;
export const D3D11_MESSAGE_ID_CREATERENDERTARGETVIEW_INVALIDDIMENSIONS = 137;
export const D3D11_MESSAGE_ID_CREATERENDERTARGETVIEW_INVALIDRESOURCE = 138;
export const D3D11_MESSAGE_ID_CREATERENDERTARGETVIEW_TOOMANYOBJECTS = 139;
export const D3D11_MESSAGE_ID_CREATERENDERTARGETVIEW_INVALIDARG_RETURN = 140;
export const D3D11_MESSAGE_ID_CREATERENDERTARGETVIEW_OUTOFMEMORY_RETURN = 141;
export const D3D11_MESSAGE_ID_CREATEDEPTHSTENCILVIEW_UNRECOGNIZEDFORMAT = 142;
export const D3D11_MESSAGE_ID_CREATEDEPTHSTENCILVIEW_INVALIDDESC = 143;
export const D3D11_MESSAGE_ID_CREATEDEPTHSTENCILVIEW_INVALIDFORMAT = 144;
export const D3D11_MESSAGE_ID_CREATEDEPTHSTENCILVIEW_INVALIDDIMENSIONS = 145;
export const D3D11_MESSAGE_ID_CREATEDEPTHSTENCILVIEW_INVALIDRESOURCE = 146;
export const D3D11_MESSAGE_ID_CREATEDEPTHSTENCILVIEW_TOOMANYOBJECTS = 147;
export const D3D11_MESSAGE_ID_CREATEDEPTHSTENCILVIEW_INVALIDARG_RETURN = 148;
export const D3D11_MESSAGE_ID_CREATEDEPTHSTENCILVIEW_OUTOFMEMORY_RETURN = 149;
export const D3D11_MESSAGE_ID_CREATEINPUTLAYOUT_OUTOFMEMORY = 150;
export const D3D11_MESSAGE_ID_CREATEINPUTLAYOUT_TOOMANYELEMENTS = 151;
export const D3D11_MESSAGE_ID_CREATEINPUTLAYOUT_INVALIDFORMAT = 152;
export const D3D11_MESSAGE_ID_CREATEINPUTLAYOUT_INCOMPATIBLEFORMAT = 153;
export const D3D11_MESSAGE_ID_CREATEINPUTLAYOUT_INVALIDSLOT = 154;
export const D3D11_MESSAGE_ID_CREATEINPUTLAYOUT_INVALIDINPUTSLOTCLASS = 155;
export const D3D11_MESSAGE_ID_CREATEINPUTLAYOUT_STEPRATESLOTCLASSMISMATCH = 156;
export const D3D11_MESSAGE_ID_CREATEINPUTLAYOUT_INVALIDSLOTCLASSCHANGE = 157;
export const D3D11_MESSAGE_ID_CREATEINPUTLAYOUT_INVALIDSTEPRATECHANGE = 158;
export const D3D11_MESSAGE_ID_CREATEINPUTLAYOUT_INVALIDALIGNMENT = 159;
export const D3D11_MESSAGE_ID_CREATEINPUTLAYOUT_DUPLICATESEMANTIC = 160;
export const D3D11_MESSAGE_ID_CREATEINPUTLAYOUT_UNPARSEABLEINPUTSIGNATURE = 161;
export const D3D11_MESSAGE_ID_CREATEINPUTLAYOUT_NULLSEMANTIC = 162;
export const D3D11_MESSAGE_ID_CREATEINPUTLAYOUT_MISSINGELEMENT = 163;
export const D3D11_MESSAGE_ID_CREATEINPUTLAYOUT_NULLDESC = 164;
export const D3D11_MESSAGE_ID_CREATEVERTEXSHADER_OUTOFMEMORY = 165;
export const D3D11_MESSAGE_ID_CREATEVERTEXSHADER_INVALIDSHADERBYTECODE = 166;
export const D3D11_MESSAGE_ID_CREATEVERTEXSHADER_INVALIDSHADERTYPE = 167;
export const D3D11_MESSAGE_ID_CREATEGEOMETRYSHADER_OUTOFMEMORY = 168;
export const D3D11_MESSAGE_ID_CREATEGEOMETRYSHADER_INVALIDSHADERBYTECODE = 169;
export const D3D11_MESSAGE_ID_CREATEGEOMETRYSHADER_INVALIDSHADERTYPE = 170;
export const D3D11_MESSAGE_ID_CREATEGEOMETRYSHADERWITHSTREAMOUTPUT_OUTOFMEMORY = 171;
export const D3D11_MESSAGE_ID_CREATEGEOMETRYSHADERWITHSTREAMOUTPUT_INVALIDSHADERBYTECODE = 172;
export const D3D11_MESSAGE_ID_CREATEGEOMETRYSHADERWITHSTREAMOUTPUT_INVALIDSHADERTYPE = 173;
export const D3D11_MESSAGE_ID_CREATEGEOMETRYSHADERWITHSTREAMOUTPUT_INVALIDNUMENTRIES = 174;
export const D3D11_MESSAGE_ID_CREATEGEOMETRYSHADERWITHSTREAMOUTPUT_OUTPUTSTREAMSTRIDEUNUSED = 175;
export const D3D11_MESSAGE_ID_CREATEGEOMETRYSHADERWITHSTREAMOUTPUT_UNEXPECTEDDECL = 176;
export const D3D11_MESSAGE_ID_CREATEGEOMETRYSHADERWITHSTREAMOUTPUT_EXPECTEDDECL = 177;
export const D3D11_MESSAGE_ID_CREATEGEOMETRYSHADERWITHSTREAMOUTPUT_OUTPUTSLOT0EXPECTED = 178;
export const D3D11_MESSAGE_ID_CREATEGEOMETRYSHADERWITHSTREAMOUTPUT_INVALIDOUTPUTSLOT = 179;
export const D3D11_MESSAGE_ID_CREATEGEOMETRYSHADERWITHSTREAMOUTPUT_ONLYONEELEMENTPERSLOT = 180;
export const D3D11_MESSAGE_ID_CREATEGEOMETRYSHADERWITHSTREAMOUTPUT_INVALIDCOMPONENTCOUNT = 181;
export const D3D11_MESSAGE_ID_CREATEGEOMETRYSHADERWITHSTREAMOUTPUT_INVALIDSTARTCOMPONENTANDCOMPONENTCOUNT = 182;
export const D3D11_MESSAGE_ID_CREATEGEOMETRYSHADERWITHSTREAMOUTPUT_INVALIDGAPDEFINITION = 183;
export const D3D11_MESSAGE_ID_CREATEGEOMETRYSHADERWITHSTREAMOUTPUT_REPEATEDOUTPUT = 184;
export const D3D11_MESSAGE_ID_CREATEGEOMETRYSHADERWITHSTREAMOUTPUT_INVALIDOUTPUTSTREAMSTRIDE = 185;
export const D3D11_MESSAGE_ID_CREATEGEOMETRYSHADERWITHSTREAMOUTPUT_MISSINGSEMANTIC = 186;
export const D3D11_MESSAGE_ID_CREATEGEOMETRYSHADERWITHSTREAMOUTPUT_MASKMISMATCH = 187;
export const D3D11_MESSAGE_ID_CREATEGEOMETRYSHADERWITHSTREAMOUTPUT_CANTHAVEONLYGAPS = 188;
export const D3D11_MESSAGE_ID_CREATEGEOMETRYSHADERWITHSTREAMOUTPUT_DECLTOOCOMPLEX = 189;
export const D3D11_MESSAGE_ID_CREATEGEOMETRYSHADERWITHSTREAMOUTPUT_MISSINGOUTPUTSIGNATURE = 190;
export const D3D11_MESSAGE_ID_CREATEPIXELSHADER_OUTOFMEMORY = 191;
export const D3D11_MESSAGE_ID_CREATEPIXELSHADER_INVALIDSHADERBYTECODE = 192;
export const D3D11_MESSAGE_ID_CREATEPIXELSHADER_INVALIDSHADERTYPE = 193;
export const D3D11_MESSAGE_ID_CREATERASTERIZERSTATE_INVALIDFILLMODE = 194;
export const D3D11_MESSAGE_ID_CREATERASTERIZERSTATE_INVALIDCULLMODE = 195;
export const D3D11_MESSAGE_ID_CREATERASTERIZERSTATE_INVALIDDEPTHBIASCLAMP = 196;
export const D3D11_MESSAGE_ID_CREATERASTERIZERSTATE_INVALIDSLOPESCALEDDEPTHBIAS = 197;
export const D3D11_MESSAGE_ID_CREATERASTERIZERSTATE_TOOMANYOBJECTS = 198;
export const D3D11_MESSAGE_ID_CREATERASTERIZERSTATE_NULLDESC = 199;
export const D3D11_MESSAGE_ID_CREATEDEPTHSTENCILSTATE_INVALIDDEPTHWRITEMASK = 200;
export const D3D11_MESSAGE_ID_CREATEDEPTHSTENCILSTATE_INVALIDDEPTHFUNC = 201;
export const D3D11_MESSAGE_ID_CREATEDEPTHSTENCILSTATE_INVALIDFRONTFACESTENCILFAILOP = 202;
export const D3D11_MESSAGE_ID_CREATEDEPTHSTENCILSTATE_INVALIDFRONTFACESTENCILZFAILOP = 203;
export const D3D11_MESSAGE_ID_CREATEDEPTHSTENCILSTATE_INVALIDFRONTFACESTENCILPASSOP = 204;
export const D3D11_MESSAGE_ID_CREATEDEPTHSTENCILSTATE_INVALIDFRONTFACESTENCILFUNC = 205;
export const D3D11_MESSAGE_ID_CREATEDEPTHSTENCILSTATE_INVALIDBACKFACESTENCILFAILOP = 206;
export const D3D11_MESSAGE_ID_CREATEDEPTHSTENCILSTATE_INVALIDBACKFACESTENCILZFAILOP = 207;
export const D3D11_MESSAGE_ID_CREATEDEPTHSTENCILSTATE_INVALIDBACKFACESTENCILPASSOP = 208;
export const D3D11_MESSAGE_ID_CREATEDEPTHSTENCILSTATE_INVALIDBACKFACESTENCILFUNC = 209;
export const D3D11_MESSAGE_ID_CREATEDEPTHSTENCILSTATE_TOOMANYOBJECTS = 210;
export const D3D11_MESSAGE_ID_CREATEDEPTHSTENCILSTATE_NULLDESC = 211;
export const D3D11_MESSAGE_ID_CREATEBLENDSTATE_INVALIDSRCBLEND = 212;
export const D3D11_MESSAGE_ID_CREATEBLENDSTATE_INVALIDDESTBLEND = 213;
export const D3D11_MESSAGE_ID_CREATEBLENDSTATE_INVALIDBLENDOP = 214;
export const D3D11_MESSAGE_ID_CREATEBLENDSTATE_INVALIDSRCBLENDALPHA = 215;
export const D3D11_MESSAGE_ID_CREATEBLENDSTATE_INVALIDDESTBLENDALPHA = 216;
export const D3D11_MESSAGE_ID_CREATEBLENDSTATE_INVALIDBLENDOPALPHA = 217;
export const D3D11_MESSAGE_ID_CREATEBLENDSTATE_INVALIDRENDERTARGETWRITEMASK = 218;
export const D3D11_MESSAGE_ID_CREATEBLENDSTATE_TOOMANYOBJECTS = 219;
export const D3D11_MESSAGE_ID_CREATEBLENDSTATE_NULLDESC = 220;
export const D3D11_MESSAGE_ID_CREATESAMPLERSTATE_INVALIDFILTER = 221;
export const D3D11_MESSAGE_ID_CREATESAMPLERSTATE_INVALIDADDRESSU = 222;
export const D3D11_MESSAGE_ID_CREATESAMPLERSTATE_INVALIDADDRESSV = 223;
export const D3D11_MESSAGE_ID_CREATESAMPLERSTATE_INVALIDADDRESSW = 224;
export const D3D11_MESSAGE_ID_CREATESAMPLERSTATE_INVALIDMIPLODBIAS = 225;
export const D3D11_MESSAGE_ID_CREATESAMPLERSTATE_INVALIDMAXANISOTROPY = 226;
export const D3D11_MESSAGE_ID_CREATESAMPLERSTATE_INVALIDCOMPARISONFUNC = 227;
export const D3D11_MESSAGE_ID_CREATESAMPLERSTATE_INVALIDMINLOD = 228;
export const D3D11_MESSAGE_ID_CREATESAMPLERSTATE_INVALIDMAXLOD = 229;
export const D3D11_MESSAGE_ID_CREATESAMPLERSTATE_TOOMANYOBJECTS = 230;
export const D3D11_MESSAGE_ID_CREATESAMPLERSTATE_NULLDESC = 231;
export const D3D11_MESSAGE_ID_CREATEQUERYORPREDICATE_INVALIDQUERY = 232;
export const D3D11_MESSAGE_ID_CREATEQUERYORPREDICATE_INVALIDMISCFLAGS = 233;
export const D3D11_MESSAGE_ID_CREATEQUERYORPREDICATE_UNEXPECTEDMISCFLAG = 234;
export const D3D11_MESSAGE_ID_CREATEQUERYORPREDICATE_NULLDESC = 235;
export const D3D11_MESSAGE_ID_DEVICE_IASETPRIMITIVETOPOLOGY_TOPOLOGY_UNRECOGNIZED = 236;
export const D3D11_MESSAGE_ID_DEVICE_IASETPRIMITIVETOPOLOGY_TOPOLOGY_UNDEFINED = 237;
export const D3D11_MESSAGE_ID_IASETVERTEXBUFFERS_INVALIDBUFFER = 238;
export const D3D11_MESSAGE_ID_DEVICE_IASETVERTEXBUFFERS_OFFSET_TOO_LARGE = 239;
export const D3D11_MESSAGE_ID_DEVICE_IASETVERTEXBUFFERS_BUFFERS_EMPTY = 240;
export const D3D11_MESSAGE_ID_IASETINDEXBUFFER_INVALIDBUFFER = 241;
export const D3D11_MESSAGE_ID_DEVICE_IASETINDEXBUFFER_FORMAT_INVALID = 242;
export const D3D11_MESSAGE_ID_DEVICE_IASETINDEXBUFFER_OFFSET_TOO_LARGE = 243;
export const D3D11_MESSAGE_ID_DEVICE_IASETINDEXBUFFER_OFFSET_UNALIGNED = 244;
export const D3D11_MESSAGE_ID_DEVICE_VSSETSHADERRESOURCES_VIEWS_EMPTY = 245;
export const D3D11_MESSAGE_ID_VSSETCONSTANTBUFFERS_INVALIDBUFFER = 246;
export const D3D11_MESSAGE_ID_DEVICE_VSSETCONSTANTBUFFERS_BUFFERS_EMPTY = 247;
export const D3D11_MESSAGE_ID_DEVICE_VSSETSAMPLERS_SAMPLERS_EMPTY = 248;
export const D3D11_MESSAGE_ID_DEVICE_GSSETSHADERRESOURCES_VIEWS_EMPTY = 249;
export const D3D11_MESSAGE_ID_GSSETCONSTANTBUFFERS_INVALIDBUFFER = 250;
export const D3D11_MESSAGE_ID_DEVICE_GSSETCONSTANTBUFFERS_BUFFERS_EMPTY = 251;
export const D3D11_MESSAGE_ID_DEVICE_GSSETSAMPLERS_SAMPLERS_EMPTY = 252;
export const D3D11_MESSAGE_ID_SOSETTARGETS_INVALIDBUFFER = 253;
export const D3D11_MESSAGE_ID_DEVICE_SOSETTARGETS_OFFSET_UNALIGNED = 254;
export const D3D11_MESSAGE_ID_DEVICE_PSSETSHADERRESOURCES_VIEWS_EMPTY = 255;
export const D3D11_MESSAGE_ID_PSSETCONSTANTBUFFERS_INVALIDBUFFER = 256;
export const D3D11_MESSAGE_ID_DEVICE_PSSETCONSTANTBUFFERS_BUFFERS_EMPTY = 257;
export const D3D11_MESSAGE_ID_DEVICE_PSSETSAMPLERS_SAMPLERS_EMPTY = 258;
export const D3D11_MESSAGE_ID_DEVICE_RSSETVIEWPORTS_INVALIDVIEWPORT = 259;
export const D3D11_MESSAGE_ID_DEVICE_RSSETSCISSORRECTS_INVALIDSCISSOR = 260;
export const D3D11_MESSAGE_ID_CLEARRENDERTARGETVIEW_DENORMFLUSH = 261;
export const D3D11_MESSAGE_ID_CLEARDEPTHSTENCILVIEW_DENORMFLUSH = 262;
export const D3D11_MESSAGE_ID_CLEARDEPTHSTENCILVIEW_INVALID = 263;
export const D3D11_MESSAGE_ID_DEVICE_IAGETVERTEXBUFFERS_BUFFERS_EMPTY = 264;
export const D3D11_MESSAGE_ID_DEVICE_VSGETSHADERRESOURCES_VIEWS_EMPTY = 265;
export const D3D11_MESSAGE_ID_DEVICE_VSGETCONSTANTBUFFERS_BUFFERS_EMPTY = 266;
export const D3D11_MESSAGE_ID_DEVICE_VSGETSAMPLERS_SAMPLERS_EMPTY = 267;
export const D3D11_MESSAGE_ID_DEVICE_GSGETSHADERRESOURCES_VIEWS_EMPTY = 268;
export const D3D11_MESSAGE_ID_DEVICE_GSGETCONSTANTBUFFERS_BUFFERS_EMPTY = 269;
export const D3D11_MESSAGE_ID_DEVICE_GSGETSAMPLERS_SAMPLERS_EMPTY = 270;
export const D3D11_MESSAGE_ID_DEVICE_SOGETTARGETS_BUFFERS_EMPTY = 271;
export const D3D11_MESSAGE_ID_DEVICE_PSGETSHADERRESOURCES_VIEWS_EMPTY = 272;
export const D3D11_MESSAGE_ID_DEVICE_PSGETCONSTANTBUFFERS_BUFFERS_EMPTY = 273;
export const D3D11_MESSAGE_ID_DEVICE_PSGETSAMPLERS_SAMPLERS_EMPTY = 274;
export const D3D11_MESSAGE_ID_DEVICE_RSGETVIEWPORTS_VIEWPORTS_EMPTY = 275;
export const D3D11_MESSAGE_ID_DEVICE_RSGETSCISSORRECTS_RECTS_EMPTY = 276;
export const D3D11_MESSAGE_ID_DEVICE_GENERATEMIPS_RESOURCE_INVALID = 277;
export const D3D11_MESSAGE_ID_COPYSUBRESOURCEREGION_INVALIDDESTINATIONSUBRESOURCE = 278;
export const D3D11_MESSAGE_ID_COPYSUBRESOURCEREGION_INVALIDSOURCESUBRESOURCE = 279;
export const D3D11_MESSAGE_ID_COPYSUBRESOURCEREGION_INVALIDSOURCEBOX = 280;
export const D3D11_MESSAGE_ID_COPYSUBRESOURCEREGION_INVALIDSOURCE = 281;
export const D3D11_MESSAGE_ID_COPYSUBRESOURCEREGION_INVALIDDESTINATIONSTATE = 282;
export const D3D11_MESSAGE_ID_COPYSUBRESOURCEREGION_INVALIDSOURCESTATE = 283;
export const D3D11_MESSAGE_ID_COPYRESOURCE_INVALIDSOURCE = 284;
export const D3D11_MESSAGE_ID_COPYRESOURCE_INVALIDDESTINATIONSTATE = 285;
export const D3D11_MESSAGE_ID_COPYRESOURCE_INVALIDSOURCESTATE = 286;
export const D3D11_MESSAGE_ID_UPDATESUBRESOURCE_INVALIDDESTINATIONSUBRESOURCE = 287;
export const D3D11_MESSAGE_ID_UPDATESUBRESOURCE_INVALIDDESTINATIONBOX = 288;
export const D3D11_MESSAGE_ID_UPDATESUBRESOURCE_INVALIDDESTINATIONSTATE = 289;
export const D3D11_MESSAGE_ID_DEVICE_RESOLVESUBRESOURCE_DESTINATION_INVALID = 290;
export const D3D11_MESSAGE_ID_DEVICE_RESOLVESUBRESOURCE_DESTINATION_SUBRESOURCE_INVALID = 291;
export const D3D11_MESSAGE_ID_DEVICE_RESOLVESUBRESOURCE_SOURCE_INVALID = 292;
export const D3D11_MESSAGE_ID_DEVICE_RESOLVESUBRESOURCE_SOURCE_SUBRESOURCE_INVALID = 293;
export const D3D11_MESSAGE_ID_DEVICE_RESOLVESUBRESOURCE_FORMAT_INVALID = 294;
export const D3D11_MESSAGE_ID_BUFFER_MAP_INVALIDMAPTYPE = 295;
export const D3D11_MESSAGE_ID_BUFFER_MAP_INVALIDFLAGS = 296;
export const D3D11_MESSAGE_ID_BUFFER_MAP_ALREADYMAPPED = 297;
export const D3D11_MESSAGE_ID_BUFFER_MAP_DEVICEREMOVED_RETURN = 298;
export const D3D11_MESSAGE_ID_BUFFER_UNMAP_NOTMAPPED = 299;
export const D3D11_MESSAGE_ID_TEXTURE1D_MAP_INVALIDMAPTYPE = 300;
export const D3D11_MESSAGE_ID_TEXTURE1D_MAP_INVALIDSUBRESOURCE = 301;
export const D3D11_MESSAGE_ID_TEXTURE1D_MAP_INVALIDFLAGS = 302;
export const D3D11_MESSAGE_ID_TEXTURE1D_MAP_ALREADYMAPPED = 303;
export const D3D11_MESSAGE_ID_TEXTURE1D_MAP_DEVICEREMOVED_RETURN = 304;
export const D3D11_MESSAGE_ID_TEXTURE1D_UNMAP_INVALIDSUBRESOURCE = 305;
export const D3D11_MESSAGE_ID_TEXTURE1D_UNMAP_NOTMAPPED = 306;
export const D3D11_MESSAGE_ID_TEXTURE2D_MAP_INVALIDMAPTYPE = 307;
export const D3D11_MESSAGE_ID_TEXTURE2D_MAP_INVALIDSUBRESOURCE = 308;
export const D3D11_MESSAGE_ID_TEXTURE2D_MAP_INVALIDFLAGS = 309;
export const D3D11_MESSAGE_ID_TEXTURE2D_MAP_ALREADYMAPPED = 310;
export const D3D11_MESSAGE_ID_TEXTURE2D_MAP_DEVICEREMOVED_RETURN = 311;
export const D3D11_MESSAGE_ID_TEXTURE2D_UNMAP_INVALIDSUBRESOURCE = 312;
export const D3D11_MESSAGE_ID_TEXTURE2D_UNMAP_NOTMAPPED = 313;
export const D3D11_MESSAGE_ID_TEXTURE3D_MAP_INVALIDMAPTYPE = 314;
export const D3D11_MESSAGE_ID_TEXTURE3D_MAP_INVALIDSUBRESOURCE = 315;
export const D3D11_MESSAGE_ID_TEXTURE3D_MAP_INVALIDFLAGS = 316;
export const D3D11_MESSAGE_ID_TEXTURE3D_MAP_ALREADYMAPPED = 317;
export const D3D11_MESSAGE_ID_TEXTURE3D_MAP_DEVICEREMOVED_RETURN = 318;
export const D3D11_MESSAGE_ID_TEXTURE3D_UNMAP_INVALIDSUBRESOURCE = 319;
export const D3D11_MESSAGE_ID_TEXTURE3D_UNMAP_NOTMAPPED = 320;
export const D3D11_MESSAGE_ID_CHECKFORMATSUPPORT_FORMAT_DEPRECATED = 321;
export const D3D11_MESSAGE_ID_CHECKMULTISAMPLEQUALITYLEVELS_FORMAT_DEPRECATED = 322;
export const D3D11_MESSAGE_ID_SETEXCEPTIONMODE_UNRECOGNIZEDFLAGS = 323;
export const D3D11_MESSAGE_ID_SETEXCEPTIONMODE_INVALIDARG_RETURN = 324;
export const D3D11_MESSAGE_ID_SETEXCEPTIONMODE_DEVICEREMOVED_RETURN = 325;
export const D3D11_MESSAGE_ID_REF_SIMULATING_INFINITELY_FAST_HARDWARE = 326;
export const D3D11_MESSAGE_ID_REF_THREADING_MODE = 327;
export const D3D11_MESSAGE_ID_REF_UMDRIVER_EXCEPTION = 328;
export const D3D11_MESSAGE_ID_REF_KMDRIVER_EXCEPTION = 329;
export const D3D11_MESSAGE_ID_REF_HARDWARE_EXCEPTION = 330;
export const D3D11_MESSAGE_ID_REF_ACCESSING_INDEXABLE_TEMP_OUT_OF_RANGE = 331;
export const D3D11_MESSAGE_ID_REF_PROBLEM_PARSING_SHADER = 332;
export const D3D11_MESSAGE_ID_REF_OUT_OF_MEMORY = 333;
export const D3D11_MESSAGE_ID_REF_INFO = 334;
export const D3D11_MESSAGE_ID_DEVICE_DRAW_VERTEXPOS_OVERFLOW = 335;
export const D3D11_MESSAGE_ID_DEVICE_DRAWINDEXED_INDEXPOS_OVERFLOW = 336;
export const D3D11_MESSAGE_ID_DEVICE_DRAWINSTANCED_VERTEXPOS_OVERFLOW = 337;
export const D3D11_MESSAGE_ID_DEVICE_DRAWINSTANCED_INSTANCEPOS_OVERFLOW = 338;
export const D3D11_MESSAGE_ID_DEVICE_DRAWINDEXEDINSTANCED_INSTANCEPOS_OVERFLOW = 339;
export const D3D11_MESSAGE_ID_DEVICE_DRAWINDEXEDINSTANCED_INDEXPOS_OVERFLOW = 340;
export const D3D11_MESSAGE_ID_DEVICE_DRAW_VERTEX_SHADER_NOT_SET = 341;
export const D3D11_MESSAGE_ID_DEVICE_SHADER_LINKAGE_SEMANTICNAME_NOT_FOUND = 342;
export const D3D11_MESSAGE_ID_DEVICE_SHADER_LINKAGE_REGISTERINDEX = 343;
export const D3D11_MESSAGE_ID_DEVICE_SHADER_LINKAGE_COMPONENTTYPE = 344;
export const D3D11_MESSAGE_ID_DEVICE_SHADER_LINKAGE_REGISTERMASK = 345;
export const D3D11_MESSAGE_ID_DEVICE_SHADER_LINKAGE_SYSTEMVALUE = 346;
export const D3D11_MESSAGE_ID_DEVICE_SHADER_LINKAGE_NEVERWRITTEN_ALWAYSREADS = 347;
export const D3D11_MESSAGE_ID_DEVICE_DRAW_VERTEX_BUFFER_NOT_SET = 348;
export const D3D11_MESSAGE_ID_DEVICE_DRAW_INPUTLAYOUT_NOT_SET = 349;
export const D3D11_MESSAGE_ID_DEVICE_DRAW_CONSTANT_BUFFER_NOT_SET = 350;
export const D3D11_MESSAGE_ID_DEVICE_DRAW_CONSTANT_BUFFER_TOO_SMALL = 351;
export const D3D11_MESSAGE_ID_DEVICE_DRAW_SAMPLER_NOT_SET = 352;
export const D3D11_MESSAGE_ID_DEVICE_DRAW_SHADERRESOURCEVIEW_NOT_SET = 353;
export const D3D11_MESSAGE_ID_DEVICE_DRAW_VIEW_DIMENSION_MISMATCH = 354;
export const D3D11_MESSAGE_ID_DEVICE_DRAW_VERTEX_BUFFER_STRIDE_TOO_SMALL = 355;
export const D3D11_MESSAGE_ID_DEVICE_DRAW_VERTEX_BUFFER_TOO_SMALL = 356;
export const D3D11_MESSAGE_ID_DEVICE_DRAW_INDEX_BUFFER_NOT_SET = 357;
export const D3D11_MESSAGE_ID_DEVICE_DRAW_INDEX_BUFFER_FORMAT_INVALID = 358;
export const D3D11_MESSAGE_ID_DEVICE_DRAW_INDEX_BUFFER_TOO_SMALL = 359;
export const D3D11_MESSAGE_ID_DEVICE_DRAW_GS_INPUT_PRIMITIVE_MISMATCH = 360;
export const D3D11_MESSAGE_ID_DEVICE_DRAW_RESOURCE_RETURN_TYPE_MISMATCH = 361;
export const D3D11_MESSAGE_ID_DEVICE_DRAW_POSITION_NOT_PRESENT = 362;
export const D3D11_MESSAGE_ID_DEVICE_DRAW_OUTPUT_STREAM_NOT_SET = 363;
export const D3D11_MESSAGE_ID_DEVICE_DRAW_BOUND_RESOURCE_MAPPED = 364;
export const D3D11_MESSAGE_ID_DEVICE_DRAW_INVALID_PRIMITIVETOPOLOGY = 365;
export const D3D11_MESSAGE_ID_DEVICE_DRAW_VERTEX_OFFSET_UNALIGNED = 366;
export const D3D11_MESSAGE_ID_DEVICE_DRAW_VERTEX_STRIDE_UNALIGNED = 367;
export const D3D11_MESSAGE_ID_DEVICE_DRAW_INDEX_OFFSET_UNALIGNED = 368;
export const D3D11_MESSAGE_ID_DEVICE_DRAW_OUTPUT_STREAM_OFFSET_UNALIGNED = 369;
export const D3D11_MESSAGE_ID_DEVICE_DRAW_RESOURCE_FORMAT_LD_UNSUPPORTED = 370;
export const D3D11_MESSAGE_ID_DEVICE_DRAW_RESOURCE_FORMAT_SAMPLE_UNSUPPORTED = 371;
export const D3D11_MESSAGE_ID_DEVICE_DRAW_RESOURCE_FORMAT_SAMPLE_C_UNSUPPORTED = 372;
export const D3D11_MESSAGE_ID_DEVICE_DRAW_RESOURCE_MULTISAMPLE_UNSUPPORTED = 373;
export const D3D11_MESSAGE_ID_DEVICE_DRAW_SO_TARGETS_BOUND_WITHOUT_SOURCE = 374;
export const D3D11_MESSAGE_ID_DEVICE_DRAW_SO_STRIDE_LARGER_THAN_BUFFER = 375;
export const D3D11_MESSAGE_ID_DEVICE_DRAW_OM_RENDER_TARGET_DOES_NOT_SUPPORT_BLENDING = 376;
export const D3D11_MESSAGE_ID_DEVICE_DRAW_OM_DUAL_SOURCE_BLENDING_CAN_ONLY_HAVE_RENDER_TARGET_0 = 377;
export const D3D11_MESSAGE_ID_DEVICE_REMOVAL_PROCESS_AT_FAULT = 378;
export const D3D11_MESSAGE_ID_DEVICE_REMOVAL_PROCESS_POSSIBLY_AT_FAULT = 379;
export const D3D11_MESSAGE_ID_DEVICE_REMOVAL_PROCESS_NOT_AT_FAULT = 380;
export const D3D11_MESSAGE_ID_DEVICE_OPEN_SHARED_RESOURCE_INVALIDARG_RETURN = 381;
export const D3D11_MESSAGE_ID_DEVICE_OPEN_SHARED_RESOURCE_OUTOFMEMORY_RETURN = 382;
export const D3D11_MESSAGE_ID_DEVICE_OPEN_SHARED_RESOURCE_BADINTERFACE_RETURN = 383;
export const D3D11_MESSAGE_ID_DEVICE_DRAW_VIEWPORT_NOT_SET = 384;
export const D3D11_MESSAGE_ID_CREATEINPUTLAYOUT_TRAILING_DIGIT_IN_SEMANTIC = 385;
export const D3D11_MESSAGE_ID_CREATEGEOMETRYSHADERWITHSTREAMOUTPUT_TRAILING_DIGIT_IN_SEMANTIC = 386;
export const D3D11_MESSAGE_ID_DEVICE_RSSETVIEWPORTS_DENORMFLUSH = 387;
export const D3D11_MESSAGE_ID_OMSETRENDERTARGETS_INVALIDVIEW = 388;
export const D3D11_MESSAGE_ID_DEVICE_SETTEXTFILTERSIZE_INVALIDDIMENSIONS = 389;
export const D3D11_MESSAGE_ID_DEVICE_DRAW_SAMPLER_MISMATCH = 390;
export const D3D11_MESSAGE_ID_CREATEINPUTLAYOUT_TYPE_MISMATCH = 391;
export const D3D11_MESSAGE_ID_BLENDSTATE_GETDESC_LEGACY = 392;
export const D3D11_MESSAGE_ID_SHADERRESOURCEVIEW_GETDESC_LEGACY = 393;
export const D3D11_MESSAGE_ID_CREATEQUERY_OUTOFMEMORY_RETURN = 394;
export const D3D11_MESSAGE_ID_CREATEPREDICATE_OUTOFMEMORY_RETURN = 395;
export const D3D11_MESSAGE_ID_CREATECOUNTER_OUTOFRANGE_COUNTER = 396;
export const D3D11_MESSAGE_ID_CREATECOUNTER_SIMULTANEOUS_ACTIVE_COUNTERS_EXHAUSTED = 397;
export const D3D11_MESSAGE_ID_CREATECOUNTER_UNSUPPORTED_WELLKNOWN_COUNTER = 398;
export const D3D11_MESSAGE_ID_CREATECOUNTER_OUTOFMEMORY_RETURN = 399;
export const D3D11_MESSAGE_ID_CREATECOUNTER_NONEXCLUSIVE_RETURN = 400;
export const D3D11_MESSAGE_ID_CREATECOUNTER_NULLDESC = 401;
export const D3D11_MESSAGE_ID_CHECKCOUNTER_OUTOFRANGE_COUNTER = 402;
export const D3D11_MESSAGE_ID_CHECKCOUNTER_UNSUPPORTED_WELLKNOWN_COUNTER = 403;
export const D3D11_MESSAGE_ID_SETPREDICATION_INVALID_PREDICATE_STATE = 404;
export const D3D11_MESSAGE_ID_QUERY_BEGIN_UNSUPPORTED = 405;
export const D3D11_MESSAGE_ID_PREDICATE_BEGIN_DURING_PREDICATION = 406;
export const D3D11_MESSAGE_ID_QUERY_BEGIN_DUPLICATE = 407;
export const D3D11_MESSAGE_ID_QUERY_BEGIN_ABANDONING_PREVIOUS_RESULTS = 408;
export const D3D11_MESSAGE_ID_PREDICATE_END_DURING_PREDICATION = 409;
export const D3D11_MESSAGE_ID_QUERY_END_ABANDONING_PREVIOUS_RESULTS = 410;
export const D3D11_MESSAGE_ID_QUERY_END_WITHOUT_BEGIN = 411;
export const D3D11_MESSAGE_ID_QUERY_GETDATA_INVALID_DATASIZE = 412;
export const D3D11_MESSAGE_ID_QUERY_GETDATA_INVALID_FLAGS = 413;
export const D3D11_MESSAGE_ID_QUERY_GETDATA_INVALID_CALL = 414;
export const D3D11_MESSAGE_ID_DEVICE_DRAW_PS_OUTPUT_TYPE_MISMATCH = 415;
export const D3D11_MESSAGE_ID_DEVICE_DRAW_RESOURCE_FORMAT_GATHER_UNSUPPORTED = 416;
export const D3D11_MESSAGE_ID_DEVICE_DRAW_INVALID_USE_OF_CENTER_MULTISAMPLE_PATTERN = 417;
export const D3D11_MESSAGE_ID_DEVICE_IASETVERTEXBUFFERS_STRIDE_TOO_LARGE = 418;
export const D3D11_MESSAGE_ID_DEVICE_IASETVERTEXBUFFERS_INVALIDRANGE = 419;
export const D3D11_MESSAGE_ID_CREATEINPUTLAYOUT_EMPTY_LAYOUT = 420;
export const D3D11_MESSAGE_ID_DEVICE_DRAW_RESOURCE_SAMPLE_COUNT_MISMATCH = 421;
export const D3D11_MESSAGE_ID_LIVE_OBJECT_SUMMARY = 422;
export const D3D11_MESSAGE_ID_LIVE_BUFFER = 423;
export const D3D11_MESSAGE_ID_LIVE_TEXTURE1D = 424;
export const D3D11_MESSAGE_ID_LIVE_TEXTURE2D = 425;
export const D3D11_MESSAGE_ID_LIVE_TEXTURE3D = 426;
export const D3D11_MESSAGE_ID_LIVE_SHADERRESOURCEVIEW = 427;
export const D3D11_MESSAGE_ID_LIVE_RENDERTARGETVIEW = 428;
export const D3D11_MESSAGE_ID_LIVE_DEPTHSTENCILVIEW = 429;
export const D3D11_MESSAGE_ID_LIVE_VERTEXSHADER = 430;
export const D3D11_MESSAGE_ID_LIVE_GEOMETRYSHADER = 431;
export const D3D11_MESSAGE_ID_LIVE_PIXELSHADER = 432;
export const D3D11_MESSAGE_ID_LIVE_INPUTLAYOUT = 433;
export const D3D11_MESSAGE_ID_LIVE_SAMPLER = 434;
export const D3D11_MESSAGE_ID_LIVE_BLENDSTATE = 435;
export const D3D11_MESSAGE_ID_LIVE_DEPTHSTENCILSTATE = 436;
export const D3D11_MESSAGE_ID_LIVE_RASTERIZERSTATE = 437;
export const D3D11_MESSAGE_ID_LIVE_QUERY = 438;
export const D3D11_MESSAGE_ID_LIVE_PREDICATE = 439;
export const D3D11_MESSAGE_ID_LIVE_COUNTER = 440;
export const D3D11_MESSAGE_ID_LIVE_DEVICE = 441;
export const D3D11_MESSAGE_ID_LIVE_SWAPCHAIN = 442;
export const D3D11_MESSAGE_ID_D3D10_MESSAGES_END = 443;
export const D3D11_MESSAGE_ID_D3D10L9_MESSAGES_START = 1048576;
export const D3D11_MESSAGE_ID_CREATEDEPTHSTENCILSTATE_STENCIL_NO_TWO_SIDED = 1048577;
export const D3D11_MESSAGE_ID_CREATERASTERIZERSTATE_DepthBiasClamp_NOT_SUPPORTED = 1048578;
export const D3D11_MESSAGE_ID_CREATESAMPLERSTATE_NO_COMPARISON_SUPPORT = 1048579;
export const D3D11_MESSAGE_ID_CREATESAMPLERSTATE_EXCESSIVE_ANISOTROPY = 1048580;
export const D3D11_MESSAGE_ID_CREATESAMPLERSTATE_BORDER_OUT_OF_RANGE = 1048581;
export const D3D11_MESSAGE_ID_VSSETSAMPLERS_NOT_SUPPORTED = 1048582;
export const D3D11_MESSAGE_ID_VSSETSAMPLERS_TOO_MANY_SAMPLERS = 1048583;
export const D3D11_MESSAGE_ID_PSSETSAMPLERS_TOO_MANY_SAMPLERS = 1048584;
export const D3D11_MESSAGE_ID_CREATERESOURCE_NO_ARRAYS = 1048585;
export const D3D11_MESSAGE_ID_CREATERESOURCE_NO_VB_AND_IB_BIND = 1048586;
export const D3D11_MESSAGE_ID_CREATERESOURCE_NO_TEXTURE_1D = 1048587;
export const D3D11_MESSAGE_ID_CREATERESOURCE_DIMENSION_OUT_OF_RANGE = 1048588;
export const D3D11_MESSAGE_ID_CREATERESOURCE_NOT_BINDABLE_AS_SHADER_RESOURCE = 1048589;
export const D3D11_MESSAGE_ID_OMSETRENDERTARGETS_TOO_MANY_RENDER_TARGETS = 1048590;
export const D3D11_MESSAGE_ID_OMSETRENDERTARGETS_NO_DIFFERING_BIT_DEPTHS = 1048591;
export const D3D11_MESSAGE_ID_IASETVERTEXBUFFERS_BAD_BUFFER_INDEX = 1048592;
export const D3D11_MESSAGE_ID_DEVICE_RSSETVIEWPORTS_TOO_MANY_VIEWPORTS = 1048593;
export const D3D11_MESSAGE_ID_DEVICE_IASETPRIMITIVETOPOLOGY_ADJACENCY_UNSUPPORTED = 1048594;
export const D3D11_MESSAGE_ID_DEVICE_RSSETSCISSORRECTS_TOO_MANY_SCISSORS = 1048595;
export const D3D11_MESSAGE_ID_COPYRESOURCE_ONLY_TEXTURE_2D_WITHIN_GPU_MEMORY = 1048596;
export const D3D11_MESSAGE_ID_COPYRESOURCE_NO_TEXTURE_3D_READBACK = 1048597;
export const D3D11_MESSAGE_ID_COPYRESOURCE_NO_TEXTURE_ONLY_READBACK = 1048598;
export const D3D11_MESSAGE_ID_CREATEINPUTLAYOUT_UNSUPPORTED_FORMAT = 1048599;
export const D3D11_MESSAGE_ID_CREATEBLENDSTATE_NO_ALPHA_TO_COVERAGE = 1048600;
export const D3D11_MESSAGE_ID_CREATERASTERIZERSTATE_DepthClipEnable_MUST_BE_TRUE = 1048601;
export const D3D11_MESSAGE_ID_DRAWINDEXED_STARTINDEXLOCATION_MUST_BE_POSITIVE = 1048602;
export const D3D11_MESSAGE_ID_CREATESHADERRESOURCEVIEW_MUST_USE_LOWEST_LOD = 1048603;
export const D3D11_MESSAGE_ID_CREATESAMPLERSTATE_MINLOD_MUST_NOT_BE_FRACTIONAL = 1048604;
export const D3D11_MESSAGE_ID_CREATESAMPLERSTATE_MAXLOD_MUST_BE_FLT_MAX = 1048605;
export const D3D11_MESSAGE_ID_CREATESHADERRESOURCEVIEW_FIRSTARRAYSLICE_MUST_BE_ZERO = 1048606;
export const D3D11_MESSAGE_ID_CREATESHADERRESOURCEVIEW_CUBES_MUST_HAVE_6_SIDES = 1048607;
export const D3D11_MESSAGE_ID_CREATERESOURCE_NOT_BINDABLE_AS_RENDER_TARGET = 1048608;
export const D3D11_MESSAGE_ID_CREATERESOURCE_NO_DWORD_INDEX_BUFFER = 1048609;
export const D3D11_MESSAGE_ID_CREATERESOURCE_MSAA_PRECLUDES_SHADER_RESOURCE = 1048610;
export const D3D11_MESSAGE_ID_CREATERESOURCE_PRESENTATION_PRECLUDES_SHADER_RESOURCE = 1048611;
export const D3D11_MESSAGE_ID_CREATEBLENDSTATE_NO_INDEPENDENT_BLEND_ENABLE = 1048612;
export const D3D11_MESSAGE_ID_CREATEBLENDSTATE_NO_INDEPENDENT_WRITE_MASKS = 1048613;
export const D3D11_MESSAGE_ID_CREATERESOURCE_NO_STREAM_OUT = 1048614;
export const D3D11_MESSAGE_ID_CREATERESOURCE_ONLY_VB_IB_FOR_BUFFERS = 1048615;
export const D3D11_MESSAGE_ID_CREATERESOURCE_NO_AUTOGEN_FOR_VOLUMES = 1048616;
export const D3D11_MESSAGE_ID_CREATERESOURCE_DXGI_FORMAT_R8G8B8A8_CANNOT_BE_SHARED = 1048617;
export const D3D11_MESSAGE_ID_VSSHADERRESOURCES_NOT_SUPPORTED = 1048618;
export const D3D11_MESSAGE_ID_GEOMETRY_SHADER_NOT_SUPPORTED = 1048619;
export const D3D11_MESSAGE_ID_STREAM_OUT_NOT_SUPPORTED = 1048620;
export const D3D11_MESSAGE_ID_TEXT_FILTER_NOT_SUPPORTED = 1048621;
export const D3D11_MESSAGE_ID_CREATEBLENDSTATE_NO_SEPARATE_ALPHA_BLEND = 1048622;
export const D3D11_MESSAGE_ID_CREATEBLENDSTATE_NO_MRT_BLEND = 1048623;
export const D3D11_MESSAGE_ID_CREATEBLENDSTATE_OPERATION_NOT_SUPPORTED = 1048624;
export const D3D11_MESSAGE_ID_CREATESAMPLERSTATE_NO_MIRRORONCE = 1048625;
export const D3D11_MESSAGE_ID_DRAWINSTANCED_NOT_SUPPORTED = 1048626;
export const D3D11_MESSAGE_ID_DRAWINDEXEDINSTANCED_NOT_SUPPORTED_BELOW_9_3 = 1048627;
export const D3D11_MESSAGE_ID_DRAWINDEXED_POINTLIST_UNSUPPORTED = 1048628;
export const D3D11_MESSAGE_ID_SETBLENDSTATE_SAMPLE_MASK_CANNOT_BE_ZERO = 1048629;
export const D3D11_MESSAGE_ID_CREATERESOURCE_DIMENSION_EXCEEDS_FEATURE_LEVEL_DEFINITION = 1048630;
export const D3D11_MESSAGE_ID_CREATERESOURCE_ONLY_SINGLE_MIP_LEVEL_DEPTH_STENCIL_SUPPORTED = 1048631;
export const D3D11_MESSAGE_ID_DEVICE_RSSETSCISSORRECTS_NEGATIVESCISSOR = 1048632;
export const D3D11_MESSAGE_ID_SLOT_ZERO_MUST_BE_D3D10_INPUT_PER_VERTEX_DATA = 1048633;
export const D3D11_MESSAGE_ID_CREATERESOURCE_NON_POW_2_MIPMAP = 1048634;
export const D3D11_MESSAGE_ID_CREATESAMPLERSTATE_BORDER_NOT_SUPPORTED = 1048635;
export const D3D11_MESSAGE_ID_OMSETRENDERTARGETS_NO_SRGB_MRT = 1048636;
export const D3D11_MESSAGE_ID_COPYRESOURCE_NO_3D_MISMATCHED_UPDATES = 1048637;
export const D3D11_MESSAGE_ID_D3D10L9_MESSAGES_END = 1048638;
export const D3D11_MESSAGE_ID_D3D11_MESSAGES_START = 2097152;
export const D3D11_MESSAGE_ID_CREATEDEPTHSTENCILVIEW_INVALIDFLAGS = 2097153;
export const D3D11_MESSAGE_ID_CREATEVERTEXSHADER_INVALIDCLASSLINKAGE = 2097154;
export const D3D11_MESSAGE_ID_CREATEGEOMETRYSHADER_INVALIDCLASSLINKAGE = 2097155;
export const D3D11_MESSAGE_ID_CREATEGEOMETRYSHADERWITHSTREAMOUTPUT_INVALIDNUMSTREAMS = 2097156;
export const D3D11_MESSAGE_ID_CREATEGEOMETRYSHADERWITHSTREAMOUTPUT_INVALIDSTREAMTORASTERIZER = 2097157;
export const D3D11_MESSAGE_ID_CREATEGEOMETRYSHADERWITHSTREAMOUTPUT_UNEXPECTEDSTREAMS = 2097158;
export const D3D11_MESSAGE_ID_CREATEGEOMETRYSHADERWITHSTREAMOUTPUT_INVALIDCLASSLINKAGE = 2097159;
export const D3D11_MESSAGE_ID_CREATEPIXELSHADER_INVALIDCLASSLINKAGE = 2097160;
export const D3D11_MESSAGE_ID_CREATEDEFERREDCONTEXT_INVALID_COMMANDLISTFLAGS = 2097161;
export const D3D11_MESSAGE_ID_CREATEDEFERREDCONTEXT_SINGLETHREADED = 2097162;
export const D3D11_MESSAGE_ID_CREATEDEFERREDCONTEXT_INVALIDARG_RETURN = 2097163;
export const D3D11_MESSAGE_ID_CREATEDEFERREDCONTEXT_INVALID_CALL_RETURN = 2097164;
export const D3D11_MESSAGE_ID_CREATEDEFERREDCONTEXT_OUTOFMEMORY_RETURN = 2097165;
export const D3D11_MESSAGE_ID_FINISHDISPLAYLIST_ONIMMEDIATECONTEXT = 2097166;
export const D3D11_MESSAGE_ID_FINISHDISPLAYLIST_OUTOFMEMORY_RETURN = 2097167;
export const D3D11_MESSAGE_ID_FINISHDISPLAYLIST_INVALID_CALL_RETURN = 2097168;
export const D3D11_MESSAGE_ID_CREATEGEOMETRYSHADERWITHSTREAMOUTPUT_INVALIDSTREAM = 2097169;
export const D3D11_MESSAGE_ID_CREATEGEOMETRYSHADERWITHSTREAMOUTPUT_UNEXPECTEDENTRIES = 2097170;
export const D3D11_MESSAGE_ID_CREATEGEOMETRYSHADERWITHSTREAMOUTPUT_UNEXPECTEDSTRIDES = 2097171;
export const D3D11_MESSAGE_ID_CREATEGEOMETRYSHADERWITHSTREAMOUTPUT_INVALIDNUMSTRIDES = 2097172;
export const D3D11_MESSAGE_ID_DEVICE_HSSETSHADERRESOURCES_HAZARD = 2097173;
export const D3D11_MESSAGE_ID_DEVICE_HSSETCONSTANTBUFFERS_HAZARD = 2097174;
export const D3D11_MESSAGE_ID_HSSETSHADERRESOURCES_UNBINDDELETINGOBJECT = 2097175;
export const D3D11_MESSAGE_ID_HSSETCONSTANTBUFFERS_UNBINDDELETINGOBJECT = 2097176;
export const D3D11_MESSAGE_ID_CREATEHULLSHADER_INVALIDCALL = 2097177;
export const D3D11_MESSAGE_ID_CREATEHULLSHADER_OUTOFMEMORY = 2097178;
export const D3D11_MESSAGE_ID_CREATEHULLSHADER_INVALIDSHADERBYTECODE = 2097179;
export const D3D11_MESSAGE_ID_CREATEHULLSHADER_INVALIDSHADERTYPE = 2097180;
export const D3D11_MESSAGE_ID_CREATEHULLSHADER_INVALIDCLASSLINKAGE = 2097181;
export const D3D11_MESSAGE_ID_DEVICE_HSSETSHADERRESOURCES_VIEWS_EMPTY = 2097182;
export const D3D11_MESSAGE_ID_HSSETCONSTANTBUFFERS_INVALIDBUFFER = 2097183;
export const D3D11_MESSAGE_ID_DEVICE_HSSETCONSTANTBUFFERS_BUFFERS_EMPTY = 2097184;
export const D3D11_MESSAGE_ID_DEVICE_HSSETSAMPLERS_SAMPLERS_EMPTY = 2097185;
export const D3D11_MESSAGE_ID_DEVICE_HSGETSHADERRESOURCES_VIEWS_EMPTY = 2097186;
export const D3D11_MESSAGE_ID_DEVICE_HSGETCONSTANTBUFFERS_BUFFERS_EMPTY = 2097187;
export const D3D11_MESSAGE_ID_DEVICE_HSGETSAMPLERS_SAMPLERS_EMPTY = 2097188;
export const D3D11_MESSAGE_ID_DEVICE_DSSETSHADERRESOURCES_HAZARD = 2097189;
export const D3D11_MESSAGE_ID_DEVICE_DSSETCONSTANTBUFFERS_HAZARD = 2097190;
export const D3D11_MESSAGE_ID_DSSETSHADERRESOURCES_UNBINDDELETINGOBJECT = 2097191;
export const D3D11_MESSAGE_ID_DSSETCONSTANTBUFFERS_UNBINDDELETINGOBJECT = 2097192;
export const D3D11_MESSAGE_ID_CREATEDOMAINSHADER_INVALIDCALL = 2097193;
export const D3D11_MESSAGE_ID_CREATEDOMAINSHADER_OUTOFMEMORY = 2097194;
export const D3D11_MESSAGE_ID_CREATEDOMAINSHADER_INVALIDSHADERBYTECODE = 2097195;
export const D3D11_MESSAGE_ID_CREATEDOMAINSHADER_INVALIDSHADERTYPE = 2097196;
export const D3D11_MESSAGE_ID_CREATEDOMAINSHADER_INVALIDCLASSLINKAGE = 2097197;
export const D3D11_MESSAGE_ID_DEVICE_DSSETSHADERRESOURCES_VIEWS_EMPTY = 2097198;
export const D3D11_MESSAGE_ID_DSSETCONSTANTBUFFERS_INVALIDBUFFER = 2097199;
export const D3D11_MESSAGE_ID_DEVICE_DSSETCONSTANTBUFFERS_BUFFERS_EMPTY = 2097200;
export const D3D11_MESSAGE_ID_DEVICE_DSSETSAMPLERS_SAMPLERS_EMPTY = 2097201;
export const D3D11_MESSAGE_ID_DEVICE_DSGETSHADERRESOURCES_VIEWS_EMPTY = 2097202;
export const D3D11_MESSAGE_ID_DEVICE_DSGETCONSTANTBUFFERS_BUFFERS_EMPTY = 2097203;
export const D3D11_MESSAGE_ID_DEVICE_DSGETSAMPLERS_SAMPLERS_EMPTY = 2097204;
export const D3D11_MESSAGE_ID_DEVICE_DRAW_HS_XOR_DS_MISMATCH = 2097205;
export const D3D11_MESSAGE_ID_DEFERRED_CONTEXT_REMOVAL_PROCESS_AT_FAULT = 2097206;
export const D3D11_MESSAGE_ID_DEVICE_DRAWINDIRECT_INVALID_ARG_BUFFER = 2097207;
export const D3D11_MESSAGE_ID_DEVICE_DRAWINDIRECT_OFFSET_UNALIGNED = 2097208;
export const D3D11_MESSAGE_ID_DEVICE_DRAWINDIRECT_OFFSET_OVERFLOW = 2097209;
export const D3D11_MESSAGE_ID_RESOURCE_MAP_INVALIDMAPTYPE = 2097210;
export const D3D11_MESSAGE_ID_RESOURCE_MAP_INVALIDSUBRESOURCE = 2097211;
export const D3D11_MESSAGE_ID_RESOURCE_MAP_INVALIDFLAGS = 2097212;
export const D3D11_MESSAGE_ID_RESOURCE_MAP_ALREADYMAPPED = 2097213;
export const D3D11_MESSAGE_ID_RESOURCE_MAP_DEVICEREMOVED_RETURN = 2097214;
export const D3D11_MESSAGE_ID_RESOURCE_MAP_OUTOFMEMORY_RETURN = 2097215;
export const D3D11_MESSAGE_ID_RESOURCE_MAP_WITHOUT_INITIAL_DISCARD = 2097216;
export const D3D11_MESSAGE_ID_RESOURCE_UNMAP_INVALIDSUBRESOURCE = 2097217;
export const D3D11_MESSAGE_ID_RESOURCE_UNMAP_NOTMAPPED = 2097218;
export const D3D11_MESSAGE_ID_DEVICE_DRAW_RASTERIZING_CONTROL_POINTS = 2097219;
export const D3D11_MESSAGE_ID_DEVICE_IASETPRIMITIVETOPOLOGY_TOPOLOGY_UNSUPPORTED = 2097220;
export const D3D11_MESSAGE_ID_DEVICE_DRAW_HS_DS_SIGNATURE_MISMATCH = 2097221;
export const D3D11_MESSAGE_ID_DEVICE_DRAW_HULL_SHADER_INPUT_TOPOLOGY_MISMATCH = 2097222;
export const D3D11_MESSAGE_ID_DEVICE_DRAW_HS_DS_CONTROL_POINT_COUNT_MISMATCH = 2097223;
export const D3D11_MESSAGE_ID_DEVICE_DRAW_HS_DS_TESSELLATOR_DOMAIN_MISMATCH = 2097224;
export const D3D11_MESSAGE_ID_CREATE_CONTEXT = 2097225;
export const D3D11_MESSAGE_ID_LIVE_CONTEXT = 2097226;
export const D3D11_MESSAGE_ID_DESTROY_CONTEXT = 2097227;
export const D3D11_MESSAGE_ID_CREATE_BUFFER = 2097228;
export const D3D11_MESSAGE_ID_LIVE_BUFFER_WIN7 = 2097229;
export const D3D11_MESSAGE_ID_DESTROY_BUFFER = 2097230;
export const D3D11_MESSAGE_ID_CREATE_TEXTURE1D = 2097231;
export const D3D11_MESSAGE_ID_LIVE_TEXTURE1D_WIN7 = 2097232;
export const D3D11_MESSAGE_ID_DESTROY_TEXTURE1D = 2097233;
export const D3D11_MESSAGE_ID_CREATE_TEXTURE2D = 2097234;
export const D3D11_MESSAGE_ID_LIVE_TEXTURE2D_WIN7 = 2097235;
export const D3D11_MESSAGE_ID_DESTROY_TEXTURE2D = 2097236;
export const D3D11_MESSAGE_ID_CREATE_TEXTURE3D = 2097237;
export const D3D11_MESSAGE_ID_LIVE_TEXTURE3D_WIN7 = 2097238;
export const D3D11_MESSAGE_ID_DESTROY_TEXTURE3D = 2097239;
export const D3D11_MESSAGE_ID_CREATE_SHADERRESOURCEVIEW = 2097240;
export const D3D11_MESSAGE_ID_LIVE_SHADERRESOURCEVIEW_WIN7 = 2097241;
export const D3D11_MESSAGE_ID_DESTROY_SHADERRESOURCEVIEW = 2097242;
export const D3D11_MESSAGE_ID_CREATE_RENDERTARGETVIEW = 2097243;
export const D3D11_MESSAGE_ID_LIVE_RENDERTARGETVIEW_WIN7 = 2097244;
export const D3D11_MESSAGE_ID_DESTROY_RENDERTARGETVIEW = 2097245;
export const D3D11_MESSAGE_ID_CREATE_DEPTHSTENCILVIEW = 2097246;
export const D3D11_MESSAGE_ID_LIVE_DEPTHSTENCILVIEW_WIN7 = 2097247;
export const D3D11_MESSAGE_ID_DESTROY_DEPTHSTENCILVIEW = 2097248;
export const D3D11_MESSAGE_ID_CREATE_VERTEXSHADER = 2097249;
export const D3D11_MESSAGE_ID_LIVE_VERTEXSHADER_WIN7 = 2097250;
export const D3D11_MESSAGE_ID_DESTROY_VERTEXSHADER = 2097251;
export const D3D11_MESSAGE_ID_CREATE_HULLSHADER = 2097252;
export const D3D11_MESSAGE_ID_LIVE_HULLSHADER = 2097253;
export const D3D11_MESSAGE_ID_DESTROY_HULLSHADER = 2097254;
export const D3D11_MESSAGE_ID_CREATE_DOMAINSHADER = 2097255;
export const D3D11_MESSAGE_ID_LIVE_DOMAINSHADER = 2097256;
export const D3D11_MESSAGE_ID_DESTROY_DOMAINSHADER = 2097257;
export const D3D11_MESSAGE_ID_CREATE_GEOMETRYSHADER = 2097258;
export const D3D11_MESSAGE_ID_LIVE_GEOMETRYSHADER_WIN7 = 2097259;
export const D3D11_MESSAGE_ID_DESTROY_GEOMETRYSHADER = 2097260;
export const D3D11_MESSAGE_ID_CREATE_PIXELSHADER = 2097261;
export const D3D11_MESSAGE_ID_LIVE_PIXELSHADER_WIN7 = 2097262;
export const D3D11_MESSAGE_ID_DESTROY_PIXELSHADER = 2097263;
export const D3D11_MESSAGE_ID_CREATE_INPUTLAYOUT = 2097264;
export const D3D11_MESSAGE_ID_LIVE_INPUTLAYOUT_WIN7 = 2097265;
export const D3D11_MESSAGE_ID_DESTROY_INPUTLAYOUT = 2097266;
export const D3D11_MESSAGE_ID_CREATE_SAMPLER = 2097267;
export const D3D11_MESSAGE_ID_LIVE_SAMPLER_WIN7 = 2097268;
export const D3D11_MESSAGE_ID_DESTROY_SAMPLER = 2097269;
export const D3D11_MESSAGE_ID_CREATE_BLENDSTATE = 2097270;
export const D3D11_MESSAGE_ID_LIVE_BLENDSTATE_WIN7 = 2097271;
export const D3D11_MESSAGE_ID_DESTROY_BLENDSTATE = 2097272;
export const D3D11_MESSAGE_ID_CREATE_DEPTHSTENCILSTATE = 2097273;
export const D3D11_MESSAGE_ID_LIVE_DEPTHSTENCILSTATE_WIN7 = 2097274;
export const D3D11_MESSAGE_ID_DESTROY_DEPTHSTENCILSTATE = 2097275;
export const D3D11_MESSAGE_ID_CREATE_RASTERIZERSTATE = 2097276;
export const D3D11_MESSAGE_ID_LIVE_RASTERIZERSTATE_WIN7 = 2097277;
export const D3D11_MESSAGE_ID_DESTROY_RASTERIZERSTATE = 2097278;
export const D3D11_MESSAGE_ID_CREATE_QUERY = 2097279;
export const D3D11_MESSAGE_ID_LIVE_QUERY_WIN7 = 2097280;
export const D3D11_MESSAGE_ID_DESTROY_QUERY = 2097281;
export const D3D11_MESSAGE_ID_CREATE_PREDICATE = 2097282;
export const D3D11_MESSAGE_ID_LIVE_PREDICATE_WIN7 = 2097283;
export const D3D11_MESSAGE_ID_DESTROY_PREDICATE = 2097284;
export const D3D11_MESSAGE_ID_CREATE_COUNTER = 2097285;
export const D3D11_MESSAGE_ID_DESTROY_COUNTER = 2097286;
export const D3D11_MESSAGE_ID_CREATE_COMMANDLIST = 2097287;
export const D3D11_MESSAGE_ID_LIVE_COMMANDLIST = 2097288;
export const D3D11_MESSAGE_ID_DESTROY_COMMANDLIST = 2097289;
export const D3D11_MESSAGE_ID_CREATE_CLASSINSTANCE = 2097290;
export const D3D11_MESSAGE_ID_LIVE_CLASSINSTANCE = 2097291;
export const D3D11_MESSAGE_ID_DESTROY_CLASSINSTANCE = 2097292;
export const D3D11_MESSAGE_ID_CREATE_CLASSLINKAGE = 2097293;
export const D3D11_MESSAGE_ID_LIVE_CLASSLINKAGE = 2097294;
export const D3D11_MESSAGE_ID_DESTROY_CLASSLINKAGE = 2097295;
export const D3D11_MESSAGE_ID_LIVE_DEVICE_WIN7 = 2097296;
export const D3D11_MESSAGE_ID_LIVE_OBJECT_SUMMARY_WIN7 = 2097297;
export const D3D11_MESSAGE_ID_CREATE_COMPUTESHADER = 2097298;
export const D3D11_MESSAGE_ID_LIVE_COMPUTESHADER = 2097299;
export const D3D11_MESSAGE_ID_DESTROY_COMPUTESHADER = 2097300;
export const D3D11_MESSAGE_ID_CREATE_UNORDEREDACCESSVIEW = 2097301;
export const D3D11_MESSAGE_ID_LIVE_UNORDEREDACCESSVIEW = 2097302;
export const D3D11_MESSAGE_ID_DESTROY_UNORDEREDACCESSVIEW = 2097303;
export const D3D11_MESSAGE_ID_DEVICE_SETSHADER_INTERFACES_FEATURELEVEL = 2097304;
export const D3D11_MESSAGE_ID_DEVICE_SETSHADER_INTERFACE_COUNT_MISMATCH = 2097305;
export const D3D11_MESSAGE_ID_DEVICE_SETSHADER_INVALID_INSTANCE = 2097306;
export const D3D11_MESSAGE_ID_DEVICE_SETSHADER_INVALID_INSTANCE_INDEX = 2097307;
export const D3D11_MESSAGE_ID_DEVICE_SETSHADER_INVALID_INSTANCE_TYPE = 2097308;
export const D3D11_MESSAGE_ID_DEVICE_SETSHADER_INVALID_INSTANCE_DATA = 2097309;
export const D3D11_MESSAGE_ID_DEVICE_SETSHADER_UNBOUND_INSTANCE_DATA = 2097310;
export const D3D11_MESSAGE_ID_DEVICE_SETSHADER_INSTANCE_DATA_BINDINGS = 2097311;
export const D3D11_MESSAGE_ID_DEVICE_CREATESHADER_CLASSLINKAGE_FULL = 2097312;
export const D3D11_MESSAGE_ID_DEVICE_CHECKFEATURESUPPORT_UNRECOGNIZED_FEATURE = 2097313;
export const D3D11_MESSAGE_ID_DEVICE_CHECKFEATURESUPPORT_MISMATCHED_DATA_SIZE = 2097314;
export const D3D11_MESSAGE_ID_DEVICE_CHECKFEATURESUPPORT_INVALIDARG_RETURN = 2097315;
export const D3D11_MESSAGE_ID_DEVICE_CSSETSHADERRESOURCES_HAZARD = 2097316;
export const D3D11_MESSAGE_ID_DEVICE_CSSETCONSTANTBUFFERS_HAZARD = 2097317;
export const D3D11_MESSAGE_ID_CSSETSHADERRESOURCES_UNBINDDELETINGOBJECT = 2097318;
export const D3D11_MESSAGE_ID_CSSETCONSTANTBUFFERS_UNBINDDELETINGOBJECT = 2097319;
export const D3D11_MESSAGE_ID_CREATECOMPUTESHADER_INVALIDCALL = 2097320;
export const D3D11_MESSAGE_ID_CREATECOMPUTESHADER_OUTOFMEMORY = 2097321;
export const D3D11_MESSAGE_ID_CREATECOMPUTESHADER_INVALIDSHADERBYTECODE = 2097322;
export const D3D11_MESSAGE_ID_CREATECOMPUTESHADER_INVALIDSHADERTYPE = 2097323;
export const D3D11_MESSAGE_ID_CREATECOMPUTESHADER_INVALIDCLASSLINKAGE = 2097324;
export const D3D11_MESSAGE_ID_DEVICE_CSSETSHADERRESOURCES_VIEWS_EMPTY = 2097325;
export const D3D11_MESSAGE_ID_CSSETCONSTANTBUFFERS_INVALIDBUFFER = 2097326;
export const D3D11_MESSAGE_ID_DEVICE_CSSETCONSTANTBUFFERS_BUFFERS_EMPTY = 2097327;
export const D3D11_MESSAGE_ID_DEVICE_CSSETSAMPLERS_SAMPLERS_EMPTY = 2097328;
export const D3D11_MESSAGE_ID_DEVICE_CSGETSHADERRESOURCES_VIEWS_EMPTY = 2097329;
export const D3D11_MESSAGE_ID_DEVICE_CSGETCONSTANTBUFFERS_BUFFERS_EMPTY = 2097330;
export const D3D11_MESSAGE_ID_DEVICE_CSGETSAMPLERS_SAMPLERS_EMPTY = 2097331;
export const D3D11_MESSAGE_ID_DEVICE_CREATEVERTEXSHADER_DOUBLEFLOATOPSNOTSUPPORTED = 2097332;
export const D3D11_MESSAGE_ID_DEVICE_CREATEHULLSHADER_DOUBLEFLOATOPSNOTSUPPORTED = 2097333;
export const D3D11_MESSAGE_ID_DEVICE_CREATEDOMAINSHADER_DOUBLEFLOATOPSNOTSUPPORTED = 2097334;
export const D3D11_MESSAGE_ID_DEVICE_CREATEGEOMETRYSHADER_DOUBLEFLOATOPSNOTSUPPORTED = 2097335;
export const D3D11_MESSAGE_ID_DEVICE_CREATEGEOMETRYSHADERWITHSTREAMOUTPUT_DOUBLEFLOATOPSNOTSUPPORTED = 2097336;
export const D3D11_MESSAGE_ID_DEVICE_CREATEPIXELSHADER_DOUBLEFLOATOPSNOTSUPPORTED = 2097337;
export const D3D11_MESSAGE_ID_DEVICE_CREATECOMPUTESHADER_DOUBLEFLOATOPSNOTSUPPORTED = 2097338;
export const D3D11_MESSAGE_ID_CREATEBUFFER_INVALIDSTRUCTURESTRIDE = 2097339;
export const D3D11_MESSAGE_ID_CREATESHADERRESOURCEVIEW_INVALIDFLAGS = 2097340;
export const D3D11_MESSAGE_ID_CREATEUNORDEREDACCESSVIEW_INVALIDRESOURCE = 2097341;
export const D3D11_MESSAGE_ID_CREATEUNORDEREDACCESSVIEW_INVALIDDESC = 2097342;
export const D3D11_MESSAGE_ID_CREATEUNORDEREDACCESSVIEW_INVALIDFORMAT = 2097343;
export const D3D11_MESSAGE_ID_CREATEUNORDEREDACCESSVIEW_INVALIDDIMENSIONS = 2097344;
export const D3D11_MESSAGE_ID_CREATEUNORDEREDACCESSVIEW_UNRECOGNIZEDFORMAT = 2097345;
export const D3D11_MESSAGE_ID_DEVICE_OMSETRENDERTARGETSANDUNORDEREDACCESSVIEWS_HAZARD = 2097346;
export const D3D11_MESSAGE_ID_DEVICE_OMSETRENDERTARGETSANDUNORDEREDACCESSVIEWS_OVERLAPPING_OLD_SLOTS = 2097347;
export const D3D11_MESSAGE_ID_DEVICE_OMSETRENDERTARGETSANDUNORDEREDACCESSVIEWS_NO_OP = 2097348;
export const D3D11_MESSAGE_ID_CSSETUNORDEREDACCESSVIEWS_UNBINDDELETINGOBJECT = 2097349;
export const D3D11_MESSAGE_ID_PSSETUNORDEREDACCESSVIEWS_UNBINDDELETINGOBJECT = 2097350;
export const D3D11_MESSAGE_ID_CREATEUNORDEREDACCESSVIEW_INVALIDARG_RETURN = 2097351;
export const D3D11_MESSAGE_ID_CREATEUNORDEREDACCESSVIEW_OUTOFMEMORY_RETURN = 2097352;
export const D3D11_MESSAGE_ID_CREATEUNORDEREDACCESSVIEW_TOOMANYOBJECTS = 2097353;
export const D3D11_MESSAGE_ID_DEVICE_CSSETUNORDEREDACCESSVIEWS_HAZARD = 2097354;
export const D3D11_MESSAGE_ID_CLEARUNORDEREDACCESSVIEW_DENORMFLUSH = 2097355;
export const D3D11_MESSAGE_ID_DEVICE_CSSETUNORDEREDACCESSS_VIEWS_EMPTY = 2097356;
export const D3D11_MESSAGE_ID_DEVICE_CSGETUNORDEREDACCESSS_VIEWS_EMPTY = 2097357;
export const D3D11_MESSAGE_ID_CREATEUNORDEREDACCESSVIEW_INVALIDFLAGS = 2097358;
export const D3D11_MESSAGE_ID_CREATESHADERRESESOURCEVIEW_TOOMANYOBJECTS = 2097359;
export const D3D11_MESSAGE_ID_DEVICE_DISPATCHINDIRECT_INVALID_ARG_BUFFER = 2097360;
export const D3D11_MESSAGE_ID_DEVICE_DISPATCHINDIRECT_OFFSET_UNALIGNED = 2097361;
export const D3D11_MESSAGE_ID_DEVICE_DISPATCHINDIRECT_OFFSET_OVERFLOW = 2097362;
export const D3D11_MESSAGE_ID_DEVICE_SETRESOURCEMINLOD_INVALIDCONTEXT = 2097363;
export const D3D11_MESSAGE_ID_DEVICE_SETRESOURCEMINLOD_INVALIDRESOURCE = 2097364;
export const D3D11_MESSAGE_ID_DEVICE_SETRESOURCEMINLOD_INVALIDMINLOD = 2097365;
export const D3D11_MESSAGE_ID_DEVICE_GETRESOURCEMINLOD_INVALIDCONTEXT = 2097366;
export const D3D11_MESSAGE_ID_DEVICE_GETRESOURCEMINLOD_INVALIDRESOURCE = 2097367;
export const D3D11_MESSAGE_ID_OMSETDEPTHSTENCIL_UNBINDDELETINGOBJECT = 2097368;
export const D3D11_MESSAGE_ID_CLEARDEPTHSTENCILVIEW_DEPTH_READONLY = 2097369;
export const D3D11_MESSAGE_ID_CLEARDEPTHSTENCILVIEW_STENCIL_READONLY = 2097370;
export const D3D11_MESSAGE_ID_CHECKFEATURESUPPORT_FORMAT_DEPRECATED = 2097371;
export const D3D11_MESSAGE_ID_DEVICE_UNORDEREDACCESSVIEW_RETURN_TYPE_MISMATCH = 2097372;
export const D3D11_MESSAGE_ID_DEVICE_UNORDEREDACCESSVIEW_NOT_SET = 2097373;
export const D3D11_MESSAGE_ID_DEVICE_DRAW_UNORDEREDACCESSVIEW_RENDERTARGETVIEW_OVERLAP = 2097374;
export const D3D11_MESSAGE_ID_DEVICE_UNORDEREDACCESSVIEW_DIMENSION_MISMATCH = 2097375;
export const D3D11_MESSAGE_ID_DEVICE_UNORDEREDACCESSVIEW_APPEND_UNSUPPORTED = 2097376;
export const D3D11_MESSAGE_ID_DEVICE_UNORDEREDACCESSVIEW_ATOMICS_UNSUPPORTED = 2097377;
export const D3D11_MESSAGE_ID_DEVICE_UNORDEREDACCESSVIEW_STRUCTURE_STRIDE_MISMATCH = 2097378;
export const D3D11_MESSAGE_ID_DEVICE_UNORDEREDACCESSVIEW_BUFFER_TYPE_MISMATCH = 2097379;
export const D3D11_MESSAGE_ID_DEVICE_UNORDEREDACCESSVIEW_RAW_UNSUPPORTED = 2097380;
export const D3D11_MESSAGE_ID_DEVICE_UNORDEREDACCESSVIEW_FORMAT_LD_UNSUPPORTED = 2097381;
export const D3D11_MESSAGE_ID_DEVICE_UNORDEREDACCESSVIEW_FORMAT_STORE_UNSUPPORTED = 2097382;
export const D3D11_MESSAGE_ID_DEVICE_UNORDEREDACCESSVIEW_ATOMIC_ADD_UNSUPPORTED = 2097383;
export const D3D11_MESSAGE_ID_DEVICE_UNORDEREDACCESSVIEW_ATOMIC_BITWISE_OPS_UNSUPPORTED = 2097384;
export const D3D11_MESSAGE_ID_DEVICE_UNORDEREDACCESSVIEW_ATOMIC_CMPSTORE_CMPEXCHANGE_UNSUPPORTED = 2097385;
export const D3D11_MESSAGE_ID_DEVICE_UNORDEREDACCESSVIEW_ATOMIC_EXCHANGE_UNSUPPORTED = 2097386;
export const D3D11_MESSAGE_ID_DEVICE_UNORDEREDACCESSVIEW_ATOMIC_SIGNED_MINMAX_UNSUPPORTED = 2097387;
export const D3D11_MESSAGE_ID_DEVICE_UNORDEREDACCESSVIEW_ATOMIC_UNSIGNED_MINMAX_UNSUPPORTED = 2097388;
export const D3D11_MESSAGE_ID_DEVICE_DISPATCH_BOUND_RESOURCE_MAPPED = 2097389;
export const D3D11_MESSAGE_ID_DEVICE_DISPATCH_THREADGROUPCOUNT_OVERFLOW = 2097390;
export const D3D11_MESSAGE_ID_DEVICE_DISPATCH_THREADGROUPCOUNT_ZERO = 2097391;
export const D3D11_MESSAGE_ID_DEVICE_SHADERRESOURCEVIEW_STRUCTURE_STRIDE_MISMATCH = 2097392;
export const D3D11_MESSAGE_ID_DEVICE_SHADERRESOURCEVIEW_BUFFER_TYPE_MISMATCH = 2097393;
export const D3D11_MESSAGE_ID_DEVICE_SHADERRESOURCEVIEW_RAW_UNSUPPORTED = 2097394;
export const D3D11_MESSAGE_ID_DEVICE_DISPATCH_UNSUPPORTED = 2097395;
export const D3D11_MESSAGE_ID_DEVICE_DISPATCHINDIRECT_UNSUPPORTED = 2097396;
export const D3D11_MESSAGE_ID_COPYSTRUCTURECOUNT_INVALIDOFFSET = 2097397;
export const D3D11_MESSAGE_ID_COPYSTRUCTURECOUNT_LARGEOFFSET = 2097398;
export const D3D11_MESSAGE_ID_COPYSTRUCTURECOUNT_INVALIDDESTINATIONSTATE = 2097399;
export const D3D11_MESSAGE_ID_COPYSTRUCTURECOUNT_INVALIDSOURCESTATE = 2097400;
export const D3D11_MESSAGE_ID_CHECKFORMATSUPPORT_FORMAT_NOT_SUPPORTED = 2097401;
export const D3D11_MESSAGE_ID_DEVICE_CSSETUNORDEREDACCESSVIEWS_INVALIDVIEW = 2097402;
export const D3D11_MESSAGE_ID_DEVICE_CSSETUNORDEREDACCESSVIEWS_INVALIDOFFSET = 2097403;
export const D3D11_MESSAGE_ID_DEVICE_CSSETUNORDEREDACCESSVIEWS_TOOMANYVIEWS = 2097404;
export const D3D11_MESSAGE_ID_CLEARUNORDEREDACCESSVIEWFLOAT_INVALIDFORMAT = 2097405;
export const D3D11_MESSAGE_ID_DEVICE_UNORDEREDACCESSVIEW_COUNTER_UNSUPPORTED = 2097406;
export const D3D11_MESSAGE_ID_REF_WARNING = 2097407;
export const D3D11_MESSAGE_ID_DEVICE_DRAW_PIXEL_SHADER_WITHOUT_RTV_OR_DSV = 2097408;
export const D3D11_MESSAGE_ID_SHADER_ABORT = 2097409;
export const D3D11_MESSAGE_ID_SHADER_MESSAGE = 2097410;
export const D3D11_MESSAGE_ID_SHADER_ERROR = 2097411;
export const D3D11_MESSAGE_ID_OFFERRESOURCES_INVALIDRESOURCE = 2097412;
export const D3D11_MESSAGE_ID_HSSETSAMPLERS_UNBINDDELETINGOBJECT = 2097413;
export const D3D11_MESSAGE_ID_DSSETSAMPLERS_UNBINDDELETINGOBJECT = 2097414;
export const D3D11_MESSAGE_ID_CSSETSAMPLERS_UNBINDDELETINGOBJECT = 2097415;
export const D3D11_MESSAGE_ID_HSSETSHADER_UNBINDDELETINGOBJECT = 2097416;
export const D3D11_MESSAGE_ID_DSSETSHADER_UNBINDDELETINGOBJECT = 2097417;
export const D3D11_MESSAGE_ID_CSSETSHADER_UNBINDDELETINGOBJECT = 2097418;
export const D3D11_MESSAGE_ID_ENQUEUESETEVENT_INVALIDARG_RETURN = 2097419;
export const D3D11_MESSAGE_ID_ENQUEUESETEVENT_OUTOFMEMORY_RETURN = 2097420;
export const D3D11_MESSAGE_ID_ENQUEUESETEVENT_ACCESSDENIED_RETURN = 2097421;
export const D3D11_MESSAGE_ID_DEVICE_OMSETRENDERTARGETSANDUNORDEREDACCESSVIEWS_NUMUAVS_INVALIDRANGE = 2097422;
export const D3D11_MESSAGE_ID_USE_OF_ZERO_REFCOUNT_OBJECT = 2097423;
export const D3D11_MESSAGE_ID_D3D11_MESSAGES_END = 2097424;
export const D3D11_MESSAGE_ID_D3D11_1_MESSAGES_START = 3145728;
export const D3D11_MESSAGE_ID_CREATE_VIDEODECODER = 3145729;
export const D3D11_MESSAGE_ID_CREATE_VIDEOPROCESSORENUM = 3145730;
export const D3D11_MESSAGE_ID_CREATE_VIDEOPROCESSOR = 3145731;
export const D3D11_MESSAGE_ID_CREATE_DECODEROUTPUTVIEW = 3145732;
export const D3D11_MESSAGE_ID_CREATE_PROCESSORINPUTVIEW = 3145733;
export const D3D11_MESSAGE_ID_CREATE_PROCESSOROUTPUTVIEW = 3145734;
export const D3D11_MESSAGE_ID_CREATE_DEVICECONTEXTSTATE = 3145735;
export const D3D11_MESSAGE_ID_LIVE_VIDEODECODER = 3145736;
export const D3D11_MESSAGE_ID_LIVE_VIDEOPROCESSORENUM = 3145737;
export const D3D11_MESSAGE_ID_LIVE_VIDEOPROCESSOR = 3145738;
export const D3D11_MESSAGE_ID_LIVE_DECODEROUTPUTVIEW = 3145739;
export const D3D11_MESSAGE_ID_LIVE_PROCESSORINPUTVIEW = 3145740;
export const D3D11_MESSAGE_ID_LIVE_PROCESSOROUTPUTVIEW = 3145741;
export const D3D11_MESSAGE_ID_LIVE_DEVICECONTEXTSTATE = 3145742;
export const D3D11_MESSAGE_ID_DESTROY_VIDEODECODER = 3145743;
export const D3D11_MESSAGE_ID_DESTROY_VIDEOPROCESSORENUM = 3145744;
export const D3D11_MESSAGE_ID_DESTROY_VIDEOPROCESSOR = 3145745;
export const D3D11_MESSAGE_ID_DESTROY_DECODEROUTPUTVIEW = 3145746;
export const D3D11_MESSAGE_ID_DESTROY_PROCESSORINPUTVIEW = 3145747;
export const D3D11_MESSAGE_ID_DESTROY_PROCESSOROUTPUTVIEW = 3145748;
export const D3D11_MESSAGE_ID_DESTROY_DEVICECONTEXTSTATE = 3145749;
export const D3D11_MESSAGE_ID_CREATEDEVICECONTEXTSTATE_INVALIDFLAGS = 3145750;
export const D3D11_MESSAGE_ID_CREATEDEVICECONTEXTSTATE_INVALIDFEATURELEVEL = 3145751;
export const D3D11_MESSAGE_ID_CREATEDEVICECONTEXTSTATE_FEATURELEVELS_NOT_SUPPORTED = 3145752;
export const D3D11_MESSAGE_ID_CREATEDEVICECONTEXTSTATE_INVALIDREFIID = 3145753;
export const D3D11_MESSAGE_ID_DEVICE_DISCARDVIEW_INVALIDVIEW = 3145754;
export const D3D11_MESSAGE_ID_COPYSUBRESOURCEREGION1_INVALIDCOPYFLAGS = 3145755;
export const D3D11_MESSAGE_ID_UPDATESUBRESOURCE1_INVALIDCOPYFLAGS = 3145756;
export const D3D11_MESSAGE_ID_CREATERASTERIZERSTATE_INVALIDFORCEDSAMPLECOUNT = 3145757;
export const D3D11_MESSAGE_ID_CREATEVIDEODECODER_OUTOFMEMORY_RETURN = 3145758;
export const D3D11_MESSAGE_ID_CREATEVIDEODECODER_NULLPARAM = 3145759;
export const D3D11_MESSAGE_ID_CREATEVIDEODECODER_INVALIDFORMAT = 3145760;
export const D3D11_MESSAGE_ID_CREATEVIDEODECODER_ZEROWIDTHHEIGHT = 3145761;
export const D3D11_MESSAGE_ID_CREATEVIDEODECODER_DRIVER_INVALIDBUFFERSIZE = 3145762;
export const D3D11_MESSAGE_ID_CREATEVIDEODECODER_DRIVER_INVALIDBUFFERUSAGE = 3145763;
export const D3D11_MESSAGE_ID_GETVIDEODECODERPROFILECOUNT_OUTOFMEMORY = 3145764;
export const D3D11_MESSAGE_ID_GETVIDEODECODERPROFILE_NULLPARAM = 3145765;
export const D3D11_MESSAGE_ID_GETVIDEODECODERPROFILE_INVALIDINDEX = 3145766;
export const D3D11_MESSAGE_ID_GETVIDEODECODERPROFILE_OUTOFMEMORY_RETURN = 3145767;
export const D3D11_MESSAGE_ID_CHECKVIDEODECODERFORMAT_NULLPARAM = 3145768;
export const D3D11_MESSAGE_ID_CHECKVIDEODECODERFORMAT_OUTOFMEMORY_RETURN = 3145769;
export const D3D11_MESSAGE_ID_GETVIDEODECODERCONFIGCOUNT_NULLPARAM = 3145770;
export const D3D11_MESSAGE_ID_GETVIDEODECODERCONFIGCOUNT_OUTOFMEMORY_RETURN = 3145771;
export const D3D11_MESSAGE_ID_GETVIDEODECODERCONFIG_NULLPARAM = 3145772;
export const D3D11_MESSAGE_ID_GETVIDEODECODERCONFIG_INVALIDINDEX = 3145773;
export const D3D11_MESSAGE_ID_GETVIDEODECODERCONFIG_OUTOFMEMORY_RETURN = 3145774;
export const D3D11_MESSAGE_ID_GETDECODERCREATIONPARAMS_NULLPARAM = 3145775;
export const D3D11_MESSAGE_ID_GETDECODERDRIVERHANDLE_NULLPARAM = 3145776;
export const D3D11_MESSAGE_ID_GETDECODERBUFFER_NULLPARAM = 3145777;
export const D3D11_MESSAGE_ID_GETDECODERBUFFER_INVALIDBUFFER = 3145778;
export const D3D11_MESSAGE_ID_GETDECODERBUFFER_INVALIDTYPE = 3145779;
export const D3D11_MESSAGE_ID_GETDECODERBUFFER_LOCKED = 3145780;
export const D3D11_MESSAGE_ID_RELEASEDECODERBUFFER_NULLPARAM = 3145781;
export const D3D11_MESSAGE_ID_RELEASEDECODERBUFFER_INVALIDTYPE = 3145782;
export const D3D11_MESSAGE_ID_RELEASEDECODERBUFFER_NOTLOCKED = 3145783;
export const D3D11_MESSAGE_ID_DECODERBEGINFRAME_NULLPARAM = 3145784;
export const D3D11_MESSAGE_ID_DECODERBEGINFRAME_HAZARD = 3145785;
export const D3D11_MESSAGE_ID_DECODERENDFRAME_NULLPARAM = 3145786;
export const D3D11_MESSAGE_ID_SUBMITDECODERBUFFERS_NULLPARAM = 3145787;
export const D3D11_MESSAGE_ID_SUBMITDECODERBUFFERS_INVALIDTYPE = 3145788;
export const D3D11_MESSAGE_ID_DECODEREXTENSION_NULLPARAM = 3145789;
export const D3D11_MESSAGE_ID_DECODEREXTENSION_INVALIDRESOURCE = 3145790;
export const D3D11_MESSAGE_ID_CREATEVIDEOPROCESSORENUMERATOR_OUTOFMEMORY_RETURN = 3145791;
export const D3D11_MESSAGE_ID_CREATEVIDEOPROCESSORENUMERATOR_NULLPARAM = 3145792;
export const D3D11_MESSAGE_ID_CREATEVIDEOPROCESSORENUMERATOR_INVALIDFRAMEFORMAT = 3145793;
export const D3D11_MESSAGE_ID_CREATEVIDEOPROCESSORENUMERATOR_INVALIDUSAGE = 3145794;
export const D3D11_MESSAGE_ID_CREATEVIDEOPROCESSORENUMERATOR_INVALIDINPUTFRAMERATE = 3145795;
export const D3D11_MESSAGE_ID_CREATEVIDEOPROCESSORENUMERATOR_INVALIDOUTPUTFRAMERATE = 3145796;
export const D3D11_MESSAGE_ID_CREATEVIDEOPROCESSORENUMERATOR_INVALIDWIDTHHEIGHT = 3145797;
export const D3D11_MESSAGE_ID_GETVIDEOPROCESSORCONTENTDESC_NULLPARAM = 3145798;
export const D3D11_MESSAGE_ID_CHECKVIDEOPROCESSORFORMAT_NULLPARAM = 3145799;
export const D3D11_MESSAGE_ID_GETVIDEOPROCESSORCAPS_NULLPARAM = 3145800;
export const D3D11_MESSAGE_ID_GETVIDEOPROCESSORRATECONVERSIONCAPS_NULLPARAM = 3145801;
export const D3D11_MESSAGE_ID_GETVIDEOPROCESSORRATECONVERSIONCAPS_INVALIDINDEX = 3145802;
export const D3D11_MESSAGE_ID_GETVIDEOPROCESSORCUSTOMRATE_NULLPARAM = 3145803;
export const D3D11_MESSAGE_ID_GETVIDEOPROCESSORCUSTOMRATE_INVALIDINDEX = 3145804;
export const D3D11_MESSAGE_ID_GETVIDEOPROCESSORFILTERRANGE_NULLPARAM = 3145805;
export const D3D11_MESSAGE_ID_GETVIDEOPROCESSORFILTERRANGE_UNSUPPORTED = 3145806;
export const D3D11_MESSAGE_ID_CREATEVIDEOPROCESSOR_OUTOFMEMORY_RETURN = 3145807;
export const D3D11_MESSAGE_ID_CREATEVIDEOPROCESSOR_NULLPARAM = 3145808;
export const D3D11_MESSAGE_ID_VIDEOPROCESSORSETOUTPUTTARGETRECT_NULLPARAM = 3145809;
export const D3D11_MESSAGE_ID_VIDEOPROCESSORSETOUTPUTBACKGROUNDCOLOR_NULLPARAM = 3145810;
export const D3D11_MESSAGE_ID_VIDEOPROCESSORSETOUTPUTBACKGROUNDCOLOR_INVALIDALPHA = 3145811;
export const D3D11_MESSAGE_ID_VIDEOPROCESSORSETOUTPUTCOLORSPACE_NULLPARAM = 3145812;
export const D3D11_MESSAGE_ID_VIDEOPROCESSORSETOUTPUTALPHAFILLMODE_NULLPARAM = 3145813;
export const D3D11_MESSAGE_ID_VIDEOPROCESSORSETOUTPUTALPHAFILLMODE_UNSUPPORTED = 3145814;
export const D3D11_MESSAGE_ID_VIDEOPROCESSORSETOUTPUTALPHAFILLMODE_INVALIDSTREAM = 3145815;
export const D3D11_MESSAGE_ID_VIDEOPROCESSORSETOUTPUTALPHAFILLMODE_INVALIDFILLMODE = 3145816;
export const D3D11_MESSAGE_ID_VIDEOPROCESSORSETOUTPUTCONSTRICTION_NULLPARAM = 3145817;
export const D3D11_MESSAGE_ID_VIDEOPROCESSORSETOUTPUTSTEREOMODE_NULLPARAM = 3145818;
export const D3D11_MESSAGE_ID_VIDEOPROCESSORSETOUTPUTSTEREOMODE_UNSUPPORTED = 3145819;
export const D3D11_MESSAGE_ID_VIDEOPROCESSORSETOUTPUTEXTENSION_NULLPARAM = 3145820;
export const D3D11_MESSAGE_ID_VIDEOPROCESSORGETOUTPUTTARGETRECT_NULLPARAM = 3145821;
export const D3D11_MESSAGE_ID_VIDEOPROCESSORGETOUTPUTBACKGROUNDCOLOR_NULLPARAM = 3145822;
export const D3D11_MESSAGE_ID_VIDEOPROCESSORGETOUTPUTCOLORSPACE_NULLPARAM = 3145823;
export const D3D11_MESSAGE_ID_VIDEOPROCESSORGETOUTPUTALPHAFILLMODE_NULLPARAM = 3145824;
export const D3D11_MESSAGE_ID_VIDEOPROCESSORGETOUTPUTCONSTRICTION_NULLPARAM = 3145825;
export const D3D11_MESSAGE_ID_VIDEOPROCESSORSETOUTPUTCONSTRICTION_UNSUPPORTED = 3145826;
export const D3D11_MESSAGE_ID_VIDEOPROCESSORSETOUTPUTCONSTRICTION_INVALIDSIZE = 3145827;
export const D3D11_MESSAGE_ID_VIDEOPROCESSORGETOUTPUTSTEREOMODE_NULLPARAM = 3145828;
export const D3D11_MESSAGE_ID_VIDEOPROCESSORGETOUTPUTEXTENSION_NULLPARAM = 3145829;
export const D3D11_MESSAGE_ID_VIDEOPROCESSORSETSTREAMFRAMEFORMAT_NULLPARAM = 3145830;
export const D3D11_MESSAGE_ID_VIDEOPROCESSORSETSTREAMFRAMEFORMAT_INVALIDFORMAT = 3145831;
export const D3D11_MESSAGE_ID_VIDEOPROCESSORSETSTREAMFRAMEFORMAT_INVALIDSTREAM = 3145832;
export const D3D11_MESSAGE_ID_VIDEOPROCESSORSETSTREAMCOLORSPACE_NULLPARAM = 3145833;
export const D3D11_MESSAGE_ID_VIDEOPROCESSORSETSTREAMCOLORSPACE_INVALIDSTREAM = 3145834;
export const D3D11_MESSAGE_ID_VIDEOPROCESSORSETSTREAMOUTPUTRATE_NULLPARAM = 3145835;
export const D3D11_MESSAGE_ID_VIDEOPROCESSORSETSTREAMOUTPUTRATE_INVALIDRATE = 3145836;
export const D3D11_MESSAGE_ID_VIDEOPROCESSORSETSTREAMOUTPUTRATE_INVALIDFLAG = 3145837;
export const D3D11_MESSAGE_ID_VIDEOPROCESSORSETSTREAMOUTPUTRATE_INVALIDSTREAM = 3145838;
export const D3D11_MESSAGE_ID_VIDEOPROCESSORSETSTREAMSOURCERECT_NULLPARAM = 3145839;
export const D3D11_MESSAGE_ID_VIDEOPROCESSORSETSTREAMSOURCERECT_INVALIDSTREAM = 3145840;
export const D3D11_MESSAGE_ID_VIDEOPROCESSORSETSTREAMSOURCERECT_INVALIDRECT = 3145841;
export const D3D11_MESSAGE_ID_VIDEOPROCESSORSETSTREAMDESTRECT_NULLPARAM = 3145842;
export const D3D11_MESSAGE_ID_VIDEOPROCESSORSETSTREAMDESTRECT_INVALIDSTREAM = 3145843;
export const D3D11_MESSAGE_ID_VIDEOPROCESSORSETSTREAMDESTRECT_INVALIDRECT = 3145844;
export const D3D11_MESSAGE_ID_VIDEOPROCESSORSETSTREAMALPHA_NULLPARAM = 3145845;
export const D3D11_MESSAGE_ID_VIDEOPROCESSORSETSTREAMALPHA_INVALIDSTREAM = 3145846;
export const D3D11_MESSAGE_ID_VIDEOPROCESSORSETSTREAMALPHA_INVALIDALPHA = 3145847;
export const D3D11_MESSAGE_ID_VIDEOPROCESSORSETSTREAMPALETTE_NULLPARAM = 3145848;
export const D3D11_MESSAGE_ID_VIDEOPROCESSORSETSTREAMPALETTE_INVALIDSTREAM = 3145849;
export const D3D11_MESSAGE_ID_VIDEOPROCESSORSETSTREAMPALETTE_INVALIDCOUNT = 3145850;
export const D3D11_MESSAGE_ID_VIDEOPROCESSORSETSTREAMPALETTE_INVALIDALPHA = 3145851;
export const D3D11_MESSAGE_ID_VIDEOPROCESSORSETSTREAMPIXELASPECTRATIO_NULLPARAM = 3145852;
export const D3D11_MESSAGE_ID_VIDEOPROCESSORSETSTREAMPIXELASPECTRATIO_INVALIDSTREAM = 3145853;
export const D3D11_MESSAGE_ID_VIDEOPROCESSORSETSTREAMPIXELASPECTRATIO_INVALIDRATIO = 3145854;
export const D3D11_MESSAGE_ID_VIDEOPROCESSORSETSTREAMLUMAKEY_NULLPARAM = 3145855;
export const D3D11_MESSAGE_ID_VIDEOPROCESSORSETSTREAMLUMAKEY_INVALIDSTREAM = 3145856;
export const D3D11_MESSAGE_ID_VIDEOPROCESSORSETSTREAMLUMAKEY_INVALIDRANGE = 3145857;
export const D3D11_MESSAGE_ID_VIDEOPROCESSORSETSTREAMLUMAKEY_UNSUPPORTED = 3145858;
export const D3D11_MESSAGE_ID_VIDEOPROCESSORSETSTREAMSTEREOFORMAT_NULLPARAM = 3145859;
export const D3D11_MESSAGE_ID_VIDEOPROCESSORSETSTREAMSTEREOFORMAT_INVALIDSTREAM = 3145860;
export const D3D11_MESSAGE_ID_VIDEOPROCESSORSETSTREAMSTEREOFORMAT_UNSUPPORTED = 3145861;
export const D3D11_MESSAGE_ID_VIDEOPROCESSORSETSTREAMSTEREOFORMAT_FLIPUNSUPPORTED = 3145862;
export const D3D11_MESSAGE_ID_VIDEOPROCESSORSETSTREAMSTEREOFORMAT_MONOOFFSETUNSUPPORTED = 3145863;
export const D3D11_MESSAGE_ID_VIDEOPROCESSORSETSTREAMSTEREOFORMAT_FORMATUNSUPPORTED = 3145864;
export const D3D11_MESSAGE_ID_VIDEOPROCESSORSETSTREAMSTEREOFORMAT_INVALIDFORMAT = 3145865;
export const D3D11_MESSAGE_ID_VIDEOPROCESSORSETSTREAMAUTOPROCESSINGMODE_NULLPARAM = 3145866;
export const D3D11_MESSAGE_ID_VIDEOPROCESSORSETSTREAMAUTOPROCESSINGMODE_INVALIDSTREAM = 3145867;
export const D3D11_MESSAGE_ID_VIDEOPROCESSORSETSTREAMFILTER_NULLPARAM = 3145868;
export const D3D11_MESSAGE_ID_VIDEOPROCESSORSETSTREAMFILTER_INVALIDSTREAM = 3145869;
export const D3D11_MESSAGE_ID_VIDEOPROCESSORSETSTREAMFILTER_INVALIDFILTER = 3145870;
export const D3D11_MESSAGE_ID_VIDEOPROCESSORSETSTREAMFILTER_UNSUPPORTED = 3145871;
export const D3D11_MESSAGE_ID_VIDEOPROCESSORSETSTREAMFILTER_INVALIDLEVEL = 3145872;
export const D3D11_MESSAGE_ID_VIDEOPROCESSORSETSTREAMEXTENSION_NULLPARAM = 3145873;
export const D3D11_MESSAGE_ID_VIDEOPROCESSORSETSTREAMEXTENSION_INVALIDSTREAM = 3145874;
export const D3D11_MESSAGE_ID_VIDEOPROCESSORGETSTREAMFRAMEFORMAT_NULLPARAM = 3145875;
export const D3D11_MESSAGE_ID_VIDEOPROCESSORGETSTREAMCOLORSPACE_NULLPARAM = 3145876;
export const D3D11_MESSAGE_ID_VIDEOPROCESSORGETSTREAMOUTPUTRATE_NULLPARAM = 3145877;
export const D3D11_MESSAGE_ID_VIDEOPROCESSORGETSTREAMSOURCERECT_NULLPARAM = 3145878;
export const D3D11_MESSAGE_ID_VIDEOPROCESSORGETSTREAMDESTRECT_NULLPARAM = 3145879;
export const D3D11_MESSAGE_ID_VIDEOPROCESSORGETSTREAMALPHA_NULLPARAM = 3145880;
export const D3D11_MESSAGE_ID_VIDEOPROCESSORGETSTREAMPALETTE_NULLPARAM = 3145881;
export const D3D11_MESSAGE_ID_VIDEOPROCESSORGETSTREAMPIXELASPECTRATIO_NULLPARAM = 3145882;
export const D3D11_MESSAGE_ID_VIDEOPROCESSORGETSTREAMLUMAKEY_NULLPARAM = 3145883;
export const D3D11_MESSAGE_ID_VIDEOPROCESSORGETSTREAMSTEREOFORMAT_NULLPARAM = 3145884;
export const D3D11_MESSAGE_ID_VIDEOPROCESSORGETSTREAMAUTOPROCESSINGMODE_NULLPARAM = 3145885;
export const D3D11_MESSAGE_ID_VIDEOPROCESSORGETSTREAMFILTER_NULLPARAM = 3145886;
export const D3D11_MESSAGE_ID_VIDEOPROCESSORGETSTREAMEXTENSION_NULLPARAM = 3145887;
export const D3D11_MESSAGE_ID_VIDEOPROCESSORGETSTREAMEXTENSION_INVALIDSTREAM = 3145888;
export const D3D11_MESSAGE_ID_VIDEOPROCESSORBLT_NULLPARAM = 3145889;
export const D3D11_MESSAGE_ID_VIDEOPROCESSORBLT_INVALIDSTREAMCOUNT = 3145890;
export const D3D11_MESSAGE_ID_VIDEOPROCESSORBLT_TARGETRECT = 3145891;
export const D3D11_MESSAGE_ID_VIDEOPROCESSORBLT_INVALIDOUTPUT = 3145892;
export const D3D11_MESSAGE_ID_VIDEOPROCESSORBLT_INVALIDPASTFRAMES = 3145893;
export const D3D11_MESSAGE_ID_VIDEOPROCESSORBLT_INVALIDFUTUREFRAMES = 3145894;
export const D3D11_MESSAGE_ID_VIDEOPROCESSORBLT_INVALIDSOURCERECT = 3145895;
export const D3D11_MESSAGE_ID_VIDEOPROCESSORBLT_INVALIDDESTRECT = 3145896;
export const D3D11_MESSAGE_ID_VIDEOPROCESSORBLT_INVALIDINPUTRESOURCE = 3145897;
export const D3D11_MESSAGE_ID_VIDEOPROCESSORBLT_INVALIDARRAYSIZE = 3145898;
export const D3D11_MESSAGE_ID_VIDEOPROCESSORBLT_INVALIDARRAY = 3145899;
export const D3D11_MESSAGE_ID_VIDEOPROCESSORBLT_RIGHTEXPECTED = 3145900;
export const D3D11_MESSAGE_ID_VIDEOPROCESSORBLT_RIGHTNOTEXPECTED = 3145901;
export const D3D11_MESSAGE_ID_VIDEOPROCESSORBLT_STEREONOTENABLED = 3145902;
export const D3D11_MESSAGE_ID_VIDEOPROCESSORBLT_INVALIDRIGHTRESOURCE = 3145903;
export const D3D11_MESSAGE_ID_VIDEOPROCESSORBLT_NOSTEREOSTREAMS = 3145904;
export const D3D11_MESSAGE_ID_VIDEOPROCESSORBLT_INPUTHAZARD = 3145905;
export const D3D11_MESSAGE_ID_VIDEOPROCESSORBLT_OUTPUTHAZARD = 3145906;
export const D3D11_MESSAGE_ID_CREATEVIDEODECODEROUTPUTVIEW_OUTOFMEMORY_RETURN = 3145907;
export const D3D11_MESSAGE_ID_CREATEVIDEODECODEROUTPUTVIEW_NULLPARAM = 3145908;
export const D3D11_MESSAGE_ID_CREATEVIDEODECODEROUTPUTVIEW_INVALIDTYPE = 3145909;
export const D3D11_MESSAGE_ID_CREATEVIDEODECODEROUTPUTVIEW_INVALIDBIND = 3145910;
export const D3D11_MESSAGE_ID_CREATEVIDEODECODEROUTPUTVIEW_UNSUPPORTEDFORMAT = 3145911;
export const D3D11_MESSAGE_ID_CREATEVIDEODECODEROUTPUTVIEW_INVALIDMIP = 3145912;
export const D3D11_MESSAGE_ID_CREATEVIDEODECODEROUTPUTVIEW_UNSUPPORTEMIP = 3145913;
export const D3D11_MESSAGE_ID_CREATEVIDEODECODEROUTPUTVIEW_INVALIDARRAYSIZE = 3145914;
export const D3D11_MESSAGE_ID_CREATEVIDEODECODEROUTPUTVIEW_INVALIDARRAY = 3145915;
export const D3D11_MESSAGE_ID_CREATEVIDEODECODEROUTPUTVIEW_INVALIDDIMENSION = 3145916;
export const D3D11_MESSAGE_ID_CREATEVIDEOPROCESSORINPUTVIEW_OUTOFMEMORY_RETURN = 3145917;
export const D3D11_MESSAGE_ID_CREATEVIDEOPROCESSORINPUTVIEW_NULLPARAM = 3145918;
export const D3D11_MESSAGE_ID_CREATEVIDEOPROCESSORINPUTVIEW_INVALIDTYPE = 3145919;
export const D3D11_MESSAGE_ID_CREATEVIDEOPROCESSORINPUTVIEW_INVALIDBIND = 3145920;
export const D3D11_MESSAGE_ID_CREATEVIDEOPROCESSORINPUTVIEW_INVALIDMISC = 3145921;
export const D3D11_MESSAGE_ID_CREATEVIDEOPROCESSORINPUTVIEW_INVALIDUSAGE = 3145922;
export const D3D11_MESSAGE_ID_CREATEVIDEOPROCESSORINPUTVIEW_INVALIDFORMAT = 3145923;
export const D3D11_MESSAGE_ID_CREATEVIDEOPROCESSORINPUTVIEW_INVALIDFOURCC = 3145924;
export const D3D11_MESSAGE_ID_CREATEVIDEOPROCESSORINPUTVIEW_INVALIDMIP = 3145925;
export const D3D11_MESSAGE_ID_CREATEVIDEOPROCESSORINPUTVIEW_UNSUPPORTEDMIP = 3145926;
export const D3D11_MESSAGE_ID_CREATEVIDEOPROCESSORINPUTVIEW_INVALIDARRAYSIZE = 3145927;
export const D3D11_MESSAGE_ID_CREATEVIDEOPROCESSORINPUTVIEW_INVALIDARRAY = 3145928;
export const D3D11_MESSAGE_ID_CREATEVIDEOPROCESSORINPUTVIEW_INVALIDDIMENSION = 3145929;
export const D3D11_MESSAGE_ID_CREATEVIDEOPROCESSOROUTPUTVIEW_OUTOFMEMORY_RETURN = 3145930;
export const D3D11_MESSAGE_ID_CREATEVIDEOPROCESSOROUTPUTVIEW_NULLPARAM = 3145931;
export const D3D11_MESSAGE_ID_CREATEVIDEOPROCESSOROUTPUTVIEW_INVALIDTYPE = 3145932;
export const D3D11_MESSAGE_ID_CREATEVIDEOPROCESSOROUTPUTVIEW_INVALIDBIND = 3145933;
export const D3D11_MESSAGE_ID_CREATEVIDEOPROCESSOROUTPUTVIEW_INVALIDFORMAT = 3145934;
export const D3D11_MESSAGE_ID_CREATEVIDEOPROCESSOROUTPUTVIEW_INVALIDMIP = 3145935;
export const D3D11_MESSAGE_ID_CREATEVIDEOPROCESSOROUTPUTVIEW_UNSUPPORTEDMIP = 3145936;
export const D3D11_MESSAGE_ID_CREATEVIDEOPROCESSOROUTPUTVIEW_UNSUPPORTEDARRAY = 3145937;
export const D3D11_MESSAGE_ID_CREATEVIDEOPROCESSOROUTPUTVIEW_INVALIDARRAY = 3145938;
export const D3D11_MESSAGE_ID_CREATEVIDEOPROCESSOROUTPUTVIEW_INVALIDDIMENSION = 3145939;
export const D3D11_MESSAGE_ID_DEVICE_DRAW_INVALID_USE_OF_FORCED_SAMPLE_COUNT = 3145940;
export const D3D11_MESSAGE_ID_CREATEBLENDSTATE_INVALIDLOGICOPS = 3145941;
export const D3D11_MESSAGE_ID_CREATESHADERRESOURCEVIEW_INVALIDDARRAYWITHDECODER = 3145942;
export const D3D11_MESSAGE_ID_CREATEUNORDEREDACCESSVIEW_INVALIDDARRAYWITHDECODER = 3145943;
export const D3D11_MESSAGE_ID_CREATERENDERTARGETVIEW_INVALIDDARRAYWITHDECODER = 3145944;
export const D3D11_MESSAGE_ID_DEVICE_LOCKEDOUT_INTERFACE = 3145945;
export const D3D11_MESSAGE_ID_REF_WARNING_ATOMIC_INCONSISTENT = 3145946;
export const D3D11_MESSAGE_ID_REF_WARNING_READING_UNINITIALIZED_RESOURCE = 3145947;
export const D3D11_MESSAGE_ID_REF_WARNING_RAW_HAZARD = 3145948;
export const D3D11_MESSAGE_ID_REF_WARNING_WAR_HAZARD = 3145949;
export const D3D11_MESSAGE_ID_REF_WARNING_WAW_HAZARD = 3145950;
export const D3D11_MESSAGE_ID_CREATECRYPTOSESSION_NULLPARAM = 3145951;
export const D3D11_MESSAGE_ID_CREATECRYPTOSESSION_OUTOFMEMORY_RETURN = 3145952;
export const D3D11_MESSAGE_ID_GETCRYPTOTYPE_NULLPARAM = 3145953;
export const D3D11_MESSAGE_ID_GETDECODERPROFILE_NULLPARAM = 3145954;
export const D3D11_MESSAGE_ID_GETCRYPTOSESSIONCERTIFICATESIZE_NULLPARAM = 3145955;
export const D3D11_MESSAGE_ID_GETCRYPTOSESSIONCERTIFICATE_NULLPARAM = 3145956;
export const D3D11_MESSAGE_ID_GETCRYPTOSESSIONCERTIFICATE_WRONGSIZE = 3145957;
export const D3D11_MESSAGE_ID_GETCRYPTOSESSIONHANDLE_WRONGSIZE = 3145958;
export const D3D11_MESSAGE_ID_NEGOTIATECRPYTOSESSIONKEYEXCHANGE_NULLPARAM = 3145959;
export const D3D11_MESSAGE_ID_ENCRYPTIONBLT_UNSUPPORTED = 3145960;
export const D3D11_MESSAGE_ID_ENCRYPTIONBLT_NULLPARAM = 3145961;
export const D3D11_MESSAGE_ID_ENCRYPTIONBLT_SRC_WRONGDEVICE = 3145962;
export const D3D11_MESSAGE_ID_ENCRYPTIONBLT_DST_WRONGDEVICE = 3145963;
export const D3D11_MESSAGE_ID_ENCRYPTIONBLT_FORMAT_MISMATCH = 3145964;
export const D3D11_MESSAGE_ID_ENCRYPTIONBLT_SIZE_MISMATCH = 3145965;
export const D3D11_MESSAGE_ID_ENCRYPTIONBLT_SRC_MULTISAMPLED = 3145966;
export const D3D11_MESSAGE_ID_ENCRYPTIONBLT_DST_NOT_STAGING = 3145967;
export const D3D11_MESSAGE_ID_ENCRYPTIONBLT_SRC_MAPPED = 3145968;
export const D3D11_MESSAGE_ID_ENCRYPTIONBLT_DST_MAPPED = 3145969;
export const D3D11_MESSAGE_ID_ENCRYPTIONBLT_SRC_OFFERED = 3145970;
export const D3D11_MESSAGE_ID_ENCRYPTIONBLT_DST_OFFERED = 3145971;
export const D3D11_MESSAGE_ID_ENCRYPTIONBLT_SRC_CONTENT_UNDEFINED = 3145972;
export const D3D11_MESSAGE_ID_DECRYPTIONBLT_UNSUPPORTED = 3145973;
export const D3D11_MESSAGE_ID_DECRYPTIONBLT_NULLPARAM = 3145974;
export const D3D11_MESSAGE_ID_DECRYPTIONBLT_SRC_WRONGDEVICE = 3145975;
export const D3D11_MESSAGE_ID_DECRYPTIONBLT_DST_WRONGDEVICE = 3145976;
export const D3D11_MESSAGE_ID_DECRYPTIONBLT_FORMAT_MISMATCH = 3145977;
export const D3D11_MESSAGE_ID_DECRYPTIONBLT_SIZE_MISMATCH = 3145978;
export const D3D11_MESSAGE_ID_DECRYPTIONBLT_DST_MULTISAMPLED = 3145979;
export const D3D11_MESSAGE_ID_DECRYPTIONBLT_SRC_NOT_STAGING = 3145980;
export const D3D11_MESSAGE_ID_DECRYPTIONBLT_DST_NOT_RENDER_TARGET = 3145981;
export const D3D11_MESSAGE_ID_DECRYPTIONBLT_SRC_MAPPED = 3145982;
export const D3D11_MESSAGE_ID_DECRYPTIONBLT_DST_MAPPED = 3145983;
export const D3D11_MESSAGE_ID_DECRYPTIONBLT_SRC_OFFERED = 3145984;
export const D3D11_MESSAGE_ID_DECRYPTIONBLT_DST_OFFERED = 3145985;
export const D3D11_MESSAGE_ID_DECRYPTIONBLT_SRC_CONTENT_UNDEFINED = 3145986;
export const D3D11_MESSAGE_ID_STARTSESSIONKEYREFRESH_NULLPARAM = 3145987;
export const D3D11_MESSAGE_ID_STARTSESSIONKEYREFRESH_INVALIDSIZE = 3145988;
export const D3D11_MESSAGE_ID_FINISHSESSIONKEYREFRESH_NULLPARAM = 3145989;
export const D3D11_MESSAGE_ID_GETENCRYPTIONBLTKEY_NULLPARAM = 3145990;
export const D3D11_MESSAGE_ID_GETENCRYPTIONBLTKEY_INVALIDSIZE = 3145991;
export const D3D11_MESSAGE_ID_GETCONTENTPROTECTIONCAPS_NULLPARAM = 3145992;
export const D3D11_MESSAGE_ID_CHECKCRYPTOKEYEXCHANGE_NULLPARAM = 3145993;
export const D3D11_MESSAGE_ID_CHECKCRYPTOKEYEXCHANGE_INVALIDINDEX = 3145994;
export const D3D11_MESSAGE_ID_CREATEAUTHENTICATEDCHANNEL_NULLPARAM = 3145995;
export const D3D11_MESSAGE_ID_CREATEAUTHENTICATEDCHANNEL_UNSUPPORTED = 3145996;
export const D3D11_MESSAGE_ID_CREATEAUTHENTICATEDCHANNEL_INVALIDTYPE = 3145997;
export const D3D11_MESSAGE_ID_CREATEAUTHENTICATEDCHANNEL_OUTOFMEMORY_RETURN = 3145998;
export const D3D11_MESSAGE_ID_GETAUTHENTICATEDCHANNELCERTIFICATESIZE_INVALIDCHANNEL = 3145999;
export const D3D11_MESSAGE_ID_GETAUTHENTICATEDCHANNELCERTIFICATESIZE_NULLPARAM = 3146000;
export const D3D11_MESSAGE_ID_GETAUTHENTICATEDCHANNELCERTIFICATE_INVALIDCHANNEL = 3146001;
export const D3D11_MESSAGE_ID_GETAUTHENTICATEDCHANNELCERTIFICATE_NULLPARAM = 3146002;
export const D3D11_MESSAGE_ID_GETAUTHENTICATEDCHANNELCERTIFICATE_WRONGSIZE = 3146003;
export const D3D11_MESSAGE_ID_NEGOTIATEAUTHENTICATEDCHANNELKEYEXCHANGE_INVALIDCHANNEL = 3146004;
export const D3D11_MESSAGE_ID_NEGOTIATEAUTHENTICATEDCHANNELKEYEXCHANGE_NULLPARAM = 3146005;
export const D3D11_MESSAGE_ID_QUERYAUTHENTICATEDCHANNEL_NULLPARAM = 3146006;
export const D3D11_MESSAGE_ID_QUERYAUTHENTICATEDCHANNEL_WRONGCHANNEL = 3146007;
export const D3D11_MESSAGE_ID_QUERYAUTHENTICATEDCHANNEL_UNSUPPORTEDQUERY = 3146008;
export const D3D11_MESSAGE_ID_QUERYAUTHENTICATEDCHANNEL_WRONGSIZE = 3146009;
export const D3D11_MESSAGE_ID_QUERYAUTHENTICATEDCHANNEL_INVALIDPROCESSINDEX = 3146010;
export const D3D11_MESSAGE_ID_CONFIGUREAUTHENTICATEDCHANNEL_NULLPARAM = 3146011;
export const D3D11_MESSAGE_ID_CONFIGUREAUTHENTICATEDCHANNEL_WRONGCHANNEL = 3146012;
export const D3D11_MESSAGE_ID_CONFIGUREAUTHENTICATEDCHANNEL_UNSUPPORTEDCONFIGURE = 3146013;
export const D3D11_MESSAGE_ID_CONFIGUREAUTHENTICATEDCHANNEL_WRONGSIZE = 3146014;
export const D3D11_MESSAGE_ID_CONFIGUREAUTHENTICATEDCHANNEL_INVALIDPROCESSIDTYPE = 3146015;
export const D3D11_MESSAGE_ID_VSSETCONSTANTBUFFERS_INVALIDBUFFEROFFSETORCOUNT = 3146016;
export const D3D11_MESSAGE_ID_DSSETCONSTANTBUFFERS_INVALIDBUFFEROFFSETORCOUNT = 3146017;
export const D3D11_MESSAGE_ID_HSSETCONSTANTBUFFERS_INVALIDBUFFEROFFSETORCOUNT = 3146018;
export const D3D11_MESSAGE_ID_GSSETCONSTANTBUFFERS_INVALIDBUFFEROFFSETORCOUNT = 3146019;
export const D3D11_MESSAGE_ID_PSSETCONSTANTBUFFERS_INVALIDBUFFEROFFSETORCOUNT = 3146020;
export const D3D11_MESSAGE_ID_CSSETCONSTANTBUFFERS_INVALIDBUFFEROFFSETORCOUNT = 3146021;
export const D3D11_MESSAGE_ID_NEGOTIATECRPYTOSESSIONKEYEXCHANGE_INVALIDSIZE = 3146022;
export const D3D11_MESSAGE_ID_NEGOTIATEAUTHENTICATEDCHANNELKEYEXCHANGE_INVALIDSIZE = 3146023;
export const D3D11_MESSAGE_ID_OFFERRESOURCES_INVALIDPRIORITY = 3146024;
export const D3D11_MESSAGE_ID_GETCRYPTOSESSIONHANDLE_OUTOFMEMORY = 3146025;
export const D3D11_MESSAGE_ID_ACQUIREHANDLEFORCAPTURE_NULLPARAM = 3146026;
export const D3D11_MESSAGE_ID_ACQUIREHANDLEFORCAPTURE_INVALIDTYPE = 3146027;
export const D3D11_MESSAGE_ID_ACQUIREHANDLEFORCAPTURE_INVALIDBIND = 3146028;
export const D3D11_MESSAGE_ID_ACQUIREHANDLEFORCAPTURE_INVALIDARRAY = 3146029;
export const D3D11_MESSAGE_ID_VIDEOPROCESSORSETSTREAMROTATION_NULLPARAM = 3146030;
export const D3D11_MESSAGE_ID_VIDEOPROCESSORSETSTREAMROTATION_INVALIDSTREAM = 3146031;
export const D3D11_MESSAGE_ID_VIDEOPROCESSORSETSTREAMROTATION_INVALID = 3146032;
export const D3D11_MESSAGE_ID_VIDEOPROCESSORSETSTREAMROTATION_UNSUPPORTED = 3146033;
export const D3D11_MESSAGE_ID_VIDEOPROCESSORGETSTREAMROTATION_NULLPARAM = 3146034;
export const D3D11_MESSAGE_ID_DEVICE_CLEARVIEW_INVALIDVIEW = 3146035;
export const D3D11_MESSAGE_ID_DEVICE_CREATEVERTEXSHADER_DOUBLEEXTENSIONSNOTSUPPORTED = 3146036;
export const D3D11_MESSAGE_ID_DEVICE_CREATEVERTEXSHADER_SHADEREXTENSIONSNOTSUPPORTED = 3146037;
export const D3D11_MESSAGE_ID_DEVICE_CREATEHULLSHADER_DOUBLEEXTENSIONSNOTSUPPORTED = 3146038;
export const D3D11_MESSAGE_ID_DEVICE_CREATEHULLSHADER_SHADEREXTENSIONSNOTSUPPORTED = 3146039;
export const D3D11_MESSAGE_ID_DEVICE_CREATEDOMAINSHADER_DOUBLEEXTENSIONSNOTSUPPORTED = 3146040;
export const D3D11_MESSAGE_ID_DEVICE_CREATEDOMAINSHADER_SHADEREXTENSIONSNOTSUPPORTED = 3146041;
export const D3D11_MESSAGE_ID_DEVICE_CREATEGEOMETRYSHADER_DOUBLEEXTENSIONSNOTSUPPORTED = 3146042;
export const D3D11_MESSAGE_ID_DEVICE_CREATEGEOMETRYSHADER_SHADEREXTENSIONSNOTSUPPORTED = 3146043;
export const D3D11_MESSAGE_ID_DEVICE_CREATEGEOMETRYSHADERWITHSTREAMOUTPUT_DOUBLEEXTENSIONSNOTSUPPORTED = 3146044;
export const D3D11_MESSAGE_ID_DEVICE_CREATEGEOMETRYSHADERWITHSTREAMOUTPUT_SHADEREXTENSIONSNOTSUPPORTED = 3146045;
export const D3D11_MESSAGE_ID_DEVICE_CREATEPIXELSHADER_DOUBLEEXTENSIONSNOTSUPPORTED = 3146046;
export const D3D11_MESSAGE_ID_DEVICE_CREATEPIXELSHADER_SHADEREXTENSIONSNOTSUPPORTED = 3146047;
export const D3D11_MESSAGE_ID_DEVICE_CREATECOMPUTESHADER_DOUBLEEXTENSIONSNOTSUPPORTED = 3146048;
export const D3D11_MESSAGE_ID_DEVICE_CREATECOMPUTESHADER_SHADEREXTENSIONSNOTSUPPORTED = 3146049;
export const D3D11_MESSAGE_ID_DEVICE_SHADER_LINKAGE_MINPRECISION = 3146050;
export const D3D11_MESSAGE_ID_VIDEOPROCESSORSETSTREAMALPHA_UNSUPPORTED = 3146051;
export const D3D11_MESSAGE_ID_VIDEOPROCESSORSETSTREAMPIXELASPECTRATIO_UNSUPPORTED = 3146052;
export const D3D11_MESSAGE_ID_DEVICE_CREATEVERTEXSHADER_UAVSNOTSUPPORTED = 3146053;
export const D3D11_MESSAGE_ID_DEVICE_CREATEHULLSHADER_UAVSNOTSUPPORTED = 3146054;
export const D3D11_MESSAGE_ID_DEVICE_CREATEDOMAINSHADER_UAVSNOTSUPPORTED = 3146055;
export const D3D11_MESSAGE_ID_DEVICE_CREATEGEOMETRYSHADER_UAVSNOTSUPPORTED = 3146056;
export const D3D11_MESSAGE_ID_DEVICE_CREATEGEOMETRYSHADERWITHSTREAMOUTPUT_UAVSNOTSUPPORTED = 3146057;
export const D3D11_MESSAGE_ID_DEVICE_CREATEPIXELSHADER_UAVSNOTSUPPORTED = 3146058;
export const D3D11_MESSAGE_ID_DEVICE_CREATECOMPUTESHADER_UAVSNOTSUPPORTED = 3146059;
export const D3D11_MESSAGE_ID_DEVICE_OMSETRENDERTARGETSANDUNORDEREDACCESSVIEWS_INVALIDOFFSET = 3146060;
export const D3D11_MESSAGE_ID_DEVICE_OMSETRENDERTARGETSANDUNORDEREDACCESSVIEWS_TOOMANYVIEWS = 3146061;
export const D3D11_MESSAGE_ID_DEVICE_CLEARVIEW_NOTSUPPORTED = 3146062;
export const D3D11_MESSAGE_ID_SWAPDEVICECONTEXTSTATE_NOTSUPPORTED = 3146063;
export const D3D11_MESSAGE_ID_UPDATESUBRESOURCE_PREFERUPDATESUBRESOURCE1 = 3146064;
export const D3D11_MESSAGE_ID_GETDC_INACCESSIBLE = 3146065;
export const D3D11_MESSAGE_ID_DEVICE_CLEARVIEW_INVALIDRECT = 3146066;
export const D3D11_MESSAGE_ID_DEVICE_DRAW_SAMPLE_MASK_IGNORED_ON_FL9 = 3146067;
export const D3D11_MESSAGE_ID_DEVICE_OPEN_SHARED_RESOURCE1_NOT_SUPPORTED = 3146068;
export const D3D11_MESSAGE_ID_DEVICE_OPEN_SHARED_RESOURCE_BY_NAME_NOT_SUPPORTED = 3146069;
export const D3D11_MESSAGE_ID_ENQUEUESETEVENT_NOT_SUPPORTED = 3146070;
export const D3D11_MESSAGE_ID_OFFERRELEASE_NOT_SUPPORTED = 3146071;
export const D3D11_MESSAGE_ID_OFFERRESOURCES_INACCESSIBLE = 3146072;
export const D3D11_MESSAGE_ID_CREATEVIDEOPROCESSORINPUTVIEW_INVALIDMSAA = 3146073;
export const D3D11_MESSAGE_ID_CREATEVIDEOPROCESSOROUTPUTVIEW_INVALIDMSAA = 3146074;
export const D3D11_MESSAGE_ID_DEVICE_CLEARVIEW_INVALIDSOURCERECT = 3146075;
export const D3D11_MESSAGE_ID_DEVICE_CLEARVIEW_EMPTYRECT = 3146076;
export const D3D11_MESSAGE_ID_UPDATESUBRESOURCE_EMPTYDESTBOX = 3146077;
export const D3D11_MESSAGE_ID_COPYSUBRESOURCEREGION_EMPTYSOURCEBOX = 3146078;
export const D3D11_MESSAGE_ID_DEVICE_DRAW_OM_RENDER_TARGET_DOES_NOT_SUPPORT_LOGIC_OPS = 3146079;
export const D3D11_MESSAGE_ID_DEVICE_DRAW_DEPTHSTENCILVIEW_NOT_SET = 3146080;
export const D3D11_MESSAGE_ID_DEVICE_DRAW_RENDERTARGETVIEW_NOT_SET = 3146081;
export const D3D11_MESSAGE_ID_DEVICE_DRAW_RENDERTARGETVIEW_NOT_SET_DUE_TO_FLIP_PRESENT = 3146082;
export const D3D11_MESSAGE_ID_DEVICE_UNORDEREDACCESSVIEW_NOT_SET_DUE_TO_FLIP_PRESENT = 3146083;
export const D3D11_MESSAGE_ID_GETDATAFORNEWHARDWAREKEY_NULLPARAM = 3146084;
export const D3D11_MESSAGE_ID_CHECKCRYPTOSESSIONSTATUS_NULLPARAM = 3146085;
export const D3D11_MESSAGE_ID_GETCRYPTOSESSIONPRIVATEDATASIZE_NULLPARAM = 3146086;
export const D3D11_MESSAGE_ID_GETVIDEODECODERCAPS_NULLPARAM = 3146087;
export const D3D11_MESSAGE_ID_GETVIDEODECODERCAPS_ZEROWIDTHHEIGHT = 3146088;
export const D3D11_MESSAGE_ID_CHECKVIDEODECODERDOWNSAMPLING_NULLPARAM = 3146089;
export const D3D11_MESSAGE_ID_CHECKVIDEODECODERDOWNSAMPLING_INVALIDCOLORSPACE = 3146090;
export const D3D11_MESSAGE_ID_CHECKVIDEODECODERDOWNSAMPLING_ZEROWIDTHHEIGHT = 3146091;
export const D3D11_MESSAGE_ID_VIDEODECODERENABLEDOWNSAMPLING_NULLPARAM = 3146092;
export const D3D11_MESSAGE_ID_VIDEODECODERENABLEDOWNSAMPLING_UNSUPPORTED = 3146093;
export const D3D11_MESSAGE_ID_VIDEODECODERUPDATEDOWNSAMPLING_NULLPARAM = 3146094;
export const D3D11_MESSAGE_ID_VIDEODECODERUPDATEDOWNSAMPLING_UNSUPPORTED = 3146095;
export const D3D11_MESSAGE_ID_CHECKVIDEOPROCESSORFORMATCONVERSION_NULLPARAM = 3146096;
export const D3D11_MESSAGE_ID_VIDEOPROCESSORSETOUTPUTCOLORSPACE1_NULLPARAM = 3146097;
export const D3D11_MESSAGE_ID_VIDEOPROCESSORGETOUTPUTCOLORSPACE1_NULLPARAM = 3146098;
export const D3D11_MESSAGE_ID_VIDEOPROCESSORSETSTREAMCOLORSPACE1_NULLPARAM = 3146099;
export const D3D11_MESSAGE_ID_VIDEOPROCESSORSETSTREAMCOLORSPACE1_INVALIDSTREAM = 3146100;
export const D3D11_MESSAGE_ID_VIDEOPROCESSORSETSTREAMMIRROR_NULLPARAM = 3146101;
export const D3D11_MESSAGE_ID_VIDEOPROCESSORSETSTREAMMIRROR_INVALIDSTREAM = 3146102;
export const D3D11_MESSAGE_ID_VIDEOPROCESSORSETSTREAMMIRROR_UNSUPPORTED = 3146103;
export const D3D11_MESSAGE_ID_VIDEOPROCESSORGETSTREAMCOLORSPACE1_NULLPARAM = 3146104;
export const D3D11_MESSAGE_ID_VIDEOPROCESSORGETSTREAMMIRROR_NULLPARAM = 3146105;
export const D3D11_MESSAGE_ID_RECOMMENDVIDEODECODERDOWNSAMPLING_NULLPARAM = 3146106;
export const D3D11_MESSAGE_ID_RECOMMENDVIDEODECODERDOWNSAMPLING_INVALIDCOLORSPACE = 3146107;
export const D3D11_MESSAGE_ID_RECOMMENDVIDEODECODERDOWNSAMPLING_ZEROWIDTHHEIGHT = 3146108;
export const D3D11_MESSAGE_ID_VIDEOPROCESSORSETOUTPUTSHADERUSAGE_NULLPARAM = 3146109;
export const D3D11_MESSAGE_ID_VIDEOPROCESSORGETOUTPUTSHADERUSAGE_NULLPARAM = 3146110;
export const D3D11_MESSAGE_ID_VIDEOPROCESSORGETBEHAVIORHINTS_NULLPARAM = 3146111;
export const D3D11_MESSAGE_ID_VIDEOPROCESSORGETBEHAVIORHINTS_INVALIDSTREAMCOUNT = 3146112;
export const D3D11_MESSAGE_ID_VIDEOPROCESSORGETBEHAVIORHINTS_TARGETRECT = 3146113;
export const D3D11_MESSAGE_ID_VIDEOPROCESSORGETBEHAVIORHINTS_INVALIDSOURCERECT = 3146114;
export const D3D11_MESSAGE_ID_VIDEOPROCESSORGETBEHAVIORHINTS_INVALIDDESTRECT = 3146115;
export const D3D11_MESSAGE_ID_GETCRYPTOSESSIONPRIVATEDATASIZE_INVALID_KEY_EXCHANGE_TYPE = 3146116;
export const D3D11_MESSAGE_ID_D3D11_1_MESSAGES_END = 3146117;
export const D3D11_MESSAGE_ID_D3D11_2_MESSAGES_START = 3146118;
export const D3D11_MESSAGE_ID_CREATEBUFFER_INVALIDUSAGE = 3146119;
export const D3D11_MESSAGE_ID_CREATETEXTURE1D_INVALIDUSAGE = 3146120;
export const D3D11_MESSAGE_ID_CREATETEXTURE2D_INVALIDUSAGE = 3146121;
export const D3D11_MESSAGE_ID_CREATEINPUTLAYOUT_LEVEL9_STEPRATE_NOT_1 = 3146122;
export const D3D11_MESSAGE_ID_CREATEINPUTLAYOUT_LEVEL9_INSTANCING_NOT_SUPPORTED = 3146123;
export const D3D11_MESSAGE_ID_UPDATETILEMAPPINGS_INVALID_PARAMETER = 3146124;
export const D3D11_MESSAGE_ID_COPYTILEMAPPINGS_INVALID_PARAMETER = 3146125;
export const D3D11_MESSAGE_ID_COPYTILES_INVALID_PARAMETER = 3146126;
export const D3D11_MESSAGE_ID_UPDATETILES_INVALID_PARAMETER = 3146127;
export const D3D11_MESSAGE_ID_RESIZETILEPOOL_INVALID_PARAMETER = 3146128;
export const D3D11_MESSAGE_ID_TILEDRESOURCEBARRIER_INVALID_PARAMETER = 3146129;
export const D3D11_MESSAGE_ID_NULL_TILE_MAPPING_ACCESS_WARNING = 3146130;
export const D3D11_MESSAGE_ID_NULL_TILE_MAPPING_ACCESS_ERROR = 3146131;
export const D3D11_MESSAGE_ID_DIRTY_TILE_MAPPING_ACCESS = 3146132;
export const D3D11_MESSAGE_ID_DUPLICATE_TILE_MAPPINGS_IN_COVERED_AREA = 3146133;
export const D3D11_MESSAGE_ID_TILE_MAPPINGS_IN_COVERED_AREA_DUPLICATED_OUTSIDE = 3146134;
export const D3D11_MESSAGE_ID_TILE_MAPPINGS_SHARED_BETWEEN_INCOMPATIBLE_RESOURCES = 3146135;
export const D3D11_MESSAGE_ID_TILE_MAPPINGS_SHARED_BETWEEN_INPUT_AND_OUTPUT = 3146136;
export const D3D11_MESSAGE_ID_CHECKMULTISAMPLEQUALITYLEVELS_INVALIDFLAGS = 3146137;
export const D3D11_MESSAGE_ID_GETRESOURCETILING_NONTILED_RESOURCE = 3146138;
export const D3D11_MESSAGE_ID_RESIZETILEPOOL_SHRINK_WITH_MAPPINGS_STILL_DEFINED_PAST_END = 3146139;
export const D3D11_MESSAGE_ID_NEED_TO_CALL_TILEDRESOURCEBARRIER = 3146140;
export const D3D11_MESSAGE_ID_CREATEDEVICE_INVALIDARGS = 3146141;
export const D3D11_MESSAGE_ID_CREATEDEVICE_WARNING = 3146142;
export const D3D11_MESSAGE_ID_CLEARUNORDEREDACCESSVIEWUINT_HAZARD = 3146143;
export const D3D11_MESSAGE_ID_CLEARUNORDEREDACCESSVIEWFLOAT_HAZARD = 3146144;
export const D3D11_MESSAGE_ID_TILED_RESOURCE_TIER_1_BUFFER_TEXTURE_MISMATCH = 3146145;
export const D3D11_MESSAGE_ID_CREATE_CRYPTOSESSION = 3146146;
export const D3D11_MESSAGE_ID_CREATE_AUTHENTICATEDCHANNEL = 3146147;
export const D3D11_MESSAGE_ID_LIVE_CRYPTOSESSION = 3146148;
export const D3D11_MESSAGE_ID_LIVE_AUTHENTICATEDCHANNEL = 3146149;
export const D3D11_MESSAGE_ID_DESTROY_CRYPTOSESSION = 3146150;
export const D3D11_MESSAGE_ID_DESTROY_AUTHENTICATEDCHANNEL = 3146151;
export const D3D11_MESSAGE_ID_D3D11_2_MESSAGES_END = 3146152;
export const D3D11_MESSAGE_ID_D3D11_3_MESSAGES_START = 3146153;
export const D3D11_MESSAGE_ID_CREATERASTERIZERSTATE_INVALID_CONSERVATIVERASTERMODE = 3146154;
export const D3D11_MESSAGE_ID_DEVICE_DRAW_INVALID_SYSTEMVALUE = 3146155;
export const D3D11_MESSAGE_ID_CREATEQUERYORPREDICATE_INVALIDCONTEXTTYPE = 3146156;
export const D3D11_MESSAGE_ID_CREATEQUERYORPREDICATE_DECODENOTSUPPORTED = 3146157;
export const D3D11_MESSAGE_ID_CREATEQUERYORPREDICATE_ENCODENOTSUPPORTED = 3146158;
export const D3D11_MESSAGE_ID_CREATESHADERRESOURCEVIEW_INVALIDPLANEINDEX = 3146159;
export const D3D11_MESSAGE_ID_CREATESHADERRESOURCEVIEW_INVALIDVIDEOPLANEINDEX = 3146160;
export const D3D11_MESSAGE_ID_CREATESHADERRESOURCEVIEW_AMBIGUOUSVIDEOPLANEINDEX = 3146161;
export const D3D11_MESSAGE_ID_CREATERENDERTARGETVIEW_INVALIDPLANEINDEX = 3146162;
export const D3D11_MESSAGE_ID_CREATERENDERTARGETVIEW_INVALIDVIDEOPLANEINDEX = 3146163;
export const D3D11_MESSAGE_ID_CREATERENDERTARGETVIEW_AMBIGUOUSVIDEOPLANEINDEX = 3146164;
export const D3D11_MESSAGE_ID_CREATEUNORDEREDACCESSVIEW_INVALIDPLANEINDEX = 3146165;
export const D3D11_MESSAGE_ID_CREATEUNORDEREDACCESSVIEW_INVALIDVIDEOPLANEINDEX = 3146166;
export const D3D11_MESSAGE_ID_CREATEUNORDEREDACCESSVIEW_AMBIGUOUSVIDEOPLANEINDEX = 3146167;
export const D3D11_MESSAGE_ID_JPEGDECODE_INVALIDSCANDATAOFFSET = 3146168;
export const D3D11_MESSAGE_ID_JPEGDECODE_NOTSUPPORTED = 3146169;
export const D3D11_MESSAGE_ID_JPEGDECODE_DIMENSIONSTOOLARGE = 3146170;
export const D3D11_MESSAGE_ID_JPEGDECODE_INVALIDCOMPONENTS = 3146171;
export const D3D11_MESSAGE_ID_JPEGDECODE_DESTINATIONNOT2D = 3146172;
export const D3D11_MESSAGE_ID_JPEGDECODE_TILEDRESOURCESUNSUPPORTED = 3146173;
export const D3D11_MESSAGE_ID_JPEGDECODE_GUARDRECTSUNSUPPORTED = 3146174;
export const D3D11_MESSAGE_ID_JPEGDECODE_FORMATUNSUPPORTED = 3146175;
export const D3D11_MESSAGE_ID_JPEGDECODE_INVALIDSUBRESOURCE = 3146176;
export const D3D11_MESSAGE_ID_JPEGDECODE_INVALIDMIPLEVEL = 3146177;
export const D3D11_MESSAGE_ID_JPEGDECODE_EMPTYDESTBOX = 3146178;
export const D3D11_MESSAGE_ID_JPEGDECODE_DESTBOXNOT2D = 3146179;
export const D3D11_MESSAGE_ID_JPEGDECODE_DESTBOXNOTSUB = 3146180;
export const D3D11_MESSAGE_ID_JPEGDECODE_DESTBOXESINTERSECT = 3146181;
export const D3D11_MESSAGE_ID_JPEGDECODE_XSUBSAMPLEMISMATCH = 3146182;
export const D3D11_MESSAGE_ID_JPEGDECODE_YSUBSAMPLEMISMATCH = 3146183;
export const D3D11_MESSAGE_ID_JPEGDECODE_XSUBSAMPLEODD = 3146184;
export const D3D11_MESSAGE_ID_JPEGDECODE_YSUBSAMPLEODD = 3146185;
export const D3D11_MESSAGE_ID_JPEGDECODE_OUTPUTDIMENSIONSTOOLARGE = 3146186;
export const D3D11_MESSAGE_ID_JPEGDECODE_NONPOW2SCALEUNSUPPORTED = 3146187;
export const D3D11_MESSAGE_ID_JPEGDECODE_FRACTIONALDOWNSCALETOLARGE = 3146188;
export const D3D11_MESSAGE_ID_JPEGDECODE_CHROMASIZEMISMATCH = 3146189;
export const D3D11_MESSAGE_ID_JPEGDECODE_LUMACHROMASIZEMISMATCH = 3146190;
export const D3D11_MESSAGE_ID_JPEGDECODE_INVALIDNUMDESTINATIONS = 3146191;
export const D3D11_MESSAGE_ID_JPEGDECODE_SUBBOXUNSUPPORTED = 3146192;
export const D3D11_MESSAGE_ID_JPEGDECODE_1DESTUNSUPPORTEDFORMAT = 3146193;
export const D3D11_MESSAGE_ID_JPEGDECODE_3DESTUNSUPPORTEDFORMAT = 3146194;
export const D3D11_MESSAGE_ID_JPEGDECODE_SCALEUNSUPPORTED = 3146195;
export const D3D11_MESSAGE_ID_JPEGDECODE_INVALIDSOURCESIZE = 3146196;
export const D3D11_MESSAGE_ID_JPEGDECODE_INVALIDCOPYFLAGS = 3146197;
export const D3D11_MESSAGE_ID_JPEGDECODE_HAZARD = 3146198;
export const D3D11_MESSAGE_ID_JPEGDECODE_UNSUPPORTEDSRCBUFFERUSAGE = 3146199;
export const D3D11_MESSAGE_ID_JPEGDECODE_UNSUPPORTEDSRCBUFFERMISCFLAGS = 3146200;
export const D3D11_MESSAGE_ID_JPEGDECODE_UNSUPPORTEDDSTTEXTUREUSAGE = 3146201;
export const D3D11_MESSAGE_ID_JPEGDECODE_BACKBUFFERNOTSUPPORTED = 3146202;
export const D3D11_MESSAGE_ID_JPEGDECODE_UNSUPPRTEDCOPYFLAGS = 3146203;
export const D3D11_MESSAGE_ID_JPEGENCODE_NOTSUPPORTED = 3146204;
export const D3D11_MESSAGE_ID_JPEGENCODE_INVALIDSCANDATAOFFSET = 3146205;
export const D3D11_MESSAGE_ID_JPEGENCODE_INVALIDCOMPONENTS = 3146206;
export const D3D11_MESSAGE_ID_JPEGENCODE_SOURCENOT2D = 3146207;
export const D3D11_MESSAGE_ID_JPEGENCODE_TILEDRESOURCESUNSUPPORTED = 3146208;
export const D3D11_MESSAGE_ID_JPEGENCODE_GUARDRECTSUNSUPPORTED = 3146209;
export const D3D11_MESSAGE_ID_JPEGENCODE_XSUBSAMPLEMISMATCH = 3146210;
export const D3D11_MESSAGE_ID_JPEGENCODE_YSUBSAMPLEMISMATCH = 3146211;
export const D3D11_MESSAGE_ID_JPEGENCODE_FORMATUNSUPPORTED = 3146212;
export const D3D11_MESSAGE_ID_JPEGENCODE_INVALIDSUBRESOURCE = 3146213;
export const D3D11_MESSAGE_ID_JPEGENCODE_INVALIDMIPLEVEL = 3146214;
export const D3D11_MESSAGE_ID_JPEGENCODE_DIMENSIONSTOOLARGE = 3146215;
export const D3D11_MESSAGE_ID_JPEGENCODE_HAZARD = 3146216;
export const D3D11_MESSAGE_ID_JPEGENCODE_UNSUPPORTEDDSTBUFFERUSAGE = 3146217;
export const D3D11_MESSAGE_ID_JPEGENCODE_UNSUPPORTEDDSTBUFFERMISCFLAGS = 3146218;
export const D3D11_MESSAGE_ID_JPEGENCODE_UNSUPPORTEDSRCTEXTUREUSAGE = 3146219;
export const D3D11_MESSAGE_ID_JPEGENCODE_BACKBUFFERNOTSUPPORTED = 3146220;
export const D3D11_MESSAGE_ID_CREATEQUERYORPREDICATE_UNSUPPORTEDCONTEXTTTYPEFORQUERY = 3146221;
export const D3D11_MESSAGE_ID_FLUSH1_INVALIDCONTEXTTYPE = 3146222;
export const D3D11_MESSAGE_ID_DEVICE_SETHARDWAREPROTECTION_INVALIDCONTEXT = 3146223;
export const D3D11_MESSAGE_ID_VIDEOPROCESSORSETOUTPUTHDRMETADATA_NULLPARAM = 3146224;
export const D3D11_MESSAGE_ID_VIDEOPROCESSORSETOUTPUTHDRMETADATA_INVALIDSIZE = 3146225;
export const D3D11_MESSAGE_ID_VIDEOPROCESSORGETOUTPUTHDRMETADATA_NULLPARAM = 3146226;
export const D3D11_MESSAGE_ID_VIDEOPROCESSORGETOUTPUTHDRMETADATA_INVALIDSIZE = 3146227;
export const D3D11_MESSAGE_ID_VIDEOPROCESSORSETSTREAMHDRMETADATA_NULLPARAM = 3146228;
export const D3D11_MESSAGE_ID_VIDEOPROCESSORSETSTREAMHDRMETADATA_INVALIDSTREAM = 3146229;
export const D3D11_MESSAGE_ID_VIDEOPROCESSORSETSTREAMHDRMETADATA_INVALIDSIZE = 3146230;
export const D3D11_MESSAGE_ID_VIDEOPROCESSORGETSTREAMHDRMETADATA_NULLPARAM = 3146231;
export const D3D11_MESSAGE_ID_VIDEOPROCESSORGETSTREAMHDRMETADATA_INVALIDSTREAM = 3146232;
export const D3D11_MESSAGE_ID_VIDEOPROCESSORGETSTREAMHDRMETADATA_INVALIDSIZE = 3146233;
export const D3D11_MESSAGE_ID_VIDEOPROCESSORGETSTREAMFRAMEFORMAT_INVALIDSTREAM = 3146234;
export const D3D11_MESSAGE_ID_VIDEOPROCESSORGETSTREAMCOLORSPACE_INVALIDSTREAM = 3146235;
export const D3D11_MESSAGE_ID_VIDEOPROCESSORGETSTREAMOUTPUTRATE_INVALIDSTREAM = 3146236;
export const D3D11_MESSAGE_ID_VIDEOPROCESSORGETSTREAMSOURCERECT_INVALIDSTREAM = 3146237;
export const D3D11_MESSAGE_ID_VIDEOPROCESSORGETSTREAMDESTRECT_INVALIDSTREAM = 3146238;
export const D3D11_MESSAGE_ID_VIDEOPROCESSORGETSTREAMALPHA_INVALIDSTREAM = 3146239;
export const D3D11_MESSAGE_ID_VIDEOPROCESSORGETSTREAMPALETTE_INVALIDSTREAM = 3146240;
export const D3D11_MESSAGE_ID_VIDEOPROCESSORGETSTREAMPIXELASPECTRATIO_INVALIDSTREAM = 3146241;
export const D3D11_MESSAGE_ID_VIDEOPROCESSORGETSTREAMLUMAKEY_INVALIDSTREAM = 3146242;
export const D3D11_MESSAGE_ID_VIDEOPROCESSORGETSTREAMSTEREOFORMAT_INVALIDSTREAM = 3146243;
export const D3D11_MESSAGE_ID_VIDEOPROCESSORGETSTREAMAUTOPROCESSINGMODE_INVALIDSTREAM = 3146244;
export const D3D11_MESSAGE_ID_VIDEOPROCESSORGETSTREAMFILTER_INVALIDSTREAM = 3146245;
export const D3D11_MESSAGE_ID_VIDEOPROCESSORGETSTREAMROTATION_INVALIDSTREAM = 3146246;
export const D3D11_MESSAGE_ID_VIDEOPROCESSORGETSTREAMCOLORSPACE1_INVALIDSTREAM = 3146247;
export const D3D11_MESSAGE_ID_VIDEOPROCESSORGETSTREAMMIRROR_INVALIDSTREAM = 3146248;
export const D3D11_MESSAGE_ID_CREATE_FENCE = 3146249;
export const D3D11_MESSAGE_ID_LIVE_FENCE = 3146250;
export const D3D11_MESSAGE_ID_DESTROY_FENCE = 3146251;
export const D3D11_MESSAGE_ID_CREATE_SYNCHRONIZEDCHANNEL = 3146252;
export const D3D11_MESSAGE_ID_LIVE_SYNCHRONIZEDCHANNEL = 3146253;
export const D3D11_MESSAGE_ID_DESTROY_SYNCHRONIZEDCHANNEL = 3146254;
export const D3D11_MESSAGE_ID_CREATEFENCE_INVALIDFLAGS = 3146255;
export const D3D11_MESSAGE_ID_D3D11_3_MESSAGES_END = 3146256;
export const D3D11_MESSAGE_ID_D3D11_5_MESSAGES_START = 3146257;
export const D3D11_MESSAGE_ID_NEGOTIATECRYPTOSESSIONKEYEXCHANGEMT_INVALIDKEYEXCHANGETYPE = 3146258;
export const D3D11_MESSAGE_ID_NEGOTIATECRYPTOSESSIONKEYEXCHANGEMT_NOT_SUPPORTED = 3146259;
export const D3D11_MESSAGE_ID_DECODERBEGINFRAME_INVALID_HISTOGRAM_COMPONENT_COUNT = 3146260;
export const D3D11_MESSAGE_ID_DECODERBEGINFRAME_INVALID_HISTOGRAM_COMPONENT = 3146261;
export const D3D11_MESSAGE_ID_DECODERBEGINFRAME_INVALID_HISTOGRAM_BUFFER_SIZE = 3146262;
export const D3D11_MESSAGE_ID_DECODERBEGINFRAME_INVALID_HISTOGRAM_BUFFER_USAGE = 3146263;
export const D3D11_MESSAGE_ID_DECODERBEGINFRAME_INVALID_HISTOGRAM_BUFFER_MISC_FLAGS = 3146264;
export const D3D11_MESSAGE_ID_DECODERBEGINFRAME_INVALID_HISTOGRAM_BUFFER_OFFSET = 3146265;
export const D3D11_MESSAGE_ID_CREATE_TRACKEDWORKLOAD = 3146266;
export const D3D11_MESSAGE_ID_LIVE_TRACKEDWORKLOAD = 3146267;
export const D3D11_MESSAGE_ID_DESTROY_TRACKEDWORKLOAD = 3146268;
export const D3D11_MESSAGE_ID_CREATE_TRACKED_WORKLOAD_NULLPARAM = 3146269;
export const D3D11_MESSAGE_ID_CREATE_TRACKED_WORKLOAD_INVALID_MAX_INSTANCES = 3146270;
export const D3D11_MESSAGE_ID_CREATE_TRACKED_WORKLOAD_INVALID_DEADLINE_TYPE = 3146271;
export const D3D11_MESSAGE_ID_CREATE_TRACKED_WORKLOAD_INVALID_ENGINE_TYPE = 3146272;
export const D3D11_MESSAGE_ID_MULTIPLE_TRACKED_WORKLOADS = 3146273;
export const D3D11_MESSAGE_ID_MULTIPLE_TRACKED_WORKLOAD_PAIRS = 3146274;
export const D3D11_MESSAGE_ID_INCOMPLETE_TRACKED_WORKLOAD_PAIR = 3146275;
export const D3D11_MESSAGE_ID_OUT_OF_ORDER_TRACKED_WORKLOAD_PAIR = 3146276;
export const D3D11_MESSAGE_ID_CANNOT_ADD_TRACKED_WORKLOAD = 3146277;
export const D3D11_MESSAGE_ID_TRACKED_WORKLOAD_NOT_SUPPORTED = 3146278;
export const D3D11_MESSAGE_ID_TRACKED_WORKLOAD_ENGINE_TYPE_NOT_FOUND = 3146279;
export const D3D11_MESSAGE_ID_NO_TRACKED_WORKLOAD_SLOT_AVAILABLE = 3146280;
export const D3D11_MESSAGE_ID_END_TRACKED_WORKLOAD_INVALID_ARG = 3146281;
export const D3D11_MESSAGE_ID_TRACKED_WORKLOAD_DISJOINT_FAILURE = 3146282;
export const D3D11_MESSAGE_ID_D3D11_5_MESSAGES_END = 3146283;
export const D3D11_COPY_NO_OVERWRITE = 1;
export const D3D11_COPY_DISCARD = 2;
export const D3D11_LOGIC_OP_CLEAR = 0;
export const D3D11_LOGIC_OP_SET = 1;
export const D3D11_LOGIC_OP_COPY = 2;
export const D3D11_LOGIC_OP_COPY_INVERTED = 3;
export const D3D11_LOGIC_OP_NOOP = 4;
export const D3D11_LOGIC_OP_INVERT = 5;
export const D3D11_LOGIC_OP_AND = 6;
export const D3D11_LOGIC_OP_NAND = 7;
export const D3D11_LOGIC_OP_OR = 8;
export const D3D11_LOGIC_OP_NOR = 9;
export const D3D11_LOGIC_OP_XOR = 10;
export const D3D11_LOGIC_OP_EQUIV = 11;
export const D3D11_LOGIC_OP_AND_REVERSE = 12;
export const D3D11_LOGIC_OP_AND_INVERTED = 13;
export const D3D11_LOGIC_OP_OR_REVERSE = 14;
export const D3D11_LOGIC_OP_OR_INVERTED = 15;
export const D3D11_1_CREATE_DEVICE_CONTEXT_STATE_SINGLETHREADED = 1;
export const D3D11_VIDEO_DECODER_CAPS_DOWNSAMPLE = 1;
export const D3D11_VIDEO_DECODER_CAPS_NON_REAL_TIME = 2;
export const D3D11_VIDEO_DECODER_CAPS_DOWNSAMPLE_DYNAMIC = 4;
export const D3D11_VIDEO_DECODER_CAPS_DOWNSAMPLE_REQUIRED = 8;
export const D3D11_VIDEO_DECODER_CAPS_UNSUPPORTED = 16;
export const D3D11_VIDEO_PROCESSOR_BEHAVIOR_HINT_MULTIPLANE_OVERLAY_ROTATION = 1;
export const D3D11_VIDEO_PROCESSOR_BEHAVIOR_HINT_MULTIPLANE_OVERLAY_RESIZE = 2;
export const D3D11_VIDEO_PROCESSOR_BEHAVIOR_HINT_MULTIPLANE_OVERLAY_COLOR_SPACE_CONVERSION = 4;
export const D3D11_VIDEO_PROCESSOR_BEHAVIOR_HINT_TRIPLE_BUFFER_OUTPUT = 8;
export const D3D11_CRYPTO_SESSION_STATUS_OK = 0;
export const D3D11_CRYPTO_SESSION_STATUS_KEY_LOST = 1;
export const D3D11_CRYPTO_SESSION_STATUS_KEY_AND_CONTENT_LOST = 2;
export const DXGI_COLOR_SPACE_RGB_FULL_G22_NONE_P709 = 0;
export const DXGI_COLOR_SPACE_RGB_FULL_G10_NONE_P709 = 1;
export const DXGI_COLOR_SPACE_RGB_STUDIO_G22_NONE_P709 = 2;
export const DXGI_COLOR_SPACE_RGB_STUDIO_G22_NONE_P2020 = 3;
export const DXGI_COLOR_SPACE_RESERVED = 4;
export const DXGI_COLOR_SPACE_YCBCR_FULL_G22_NONE_P709_X601 = 5;
export const DXGI_COLOR_SPACE_YCBCR_STUDIO_G22_LEFT_P601 = 6;
export const DXGI_COLOR_SPACE_YCBCR_FULL_G22_LEFT_P601 = 7;
export const DXGI_COLOR_SPACE_YCBCR_STUDIO_G22_LEFT_P709 = 8;
export const DXGI_COLOR_SPACE_YCBCR_FULL_G22_LEFT_P709 = 9;
export const DXGI_COLOR_SPACE_YCBCR_STUDIO_G22_LEFT_P2020 = 10;
export const DXGI_COLOR_SPACE_YCBCR_FULL_G22_LEFT_P2020 = 11;
export const DXGI_COLOR_SPACE_RGB_FULL_G2084_NONE_P2020 = 12;
export const DXGI_COLOR_SPACE_YCBCR_STUDIO_G2084_LEFT_P2020 = 13;
export const DXGI_COLOR_SPACE_RGB_STUDIO_G2084_NONE_P2020 = 14;
export const DXGI_COLOR_SPACE_YCBCR_STUDIO_G22_TOPLEFT_P2020 = 15;
export const DXGI_COLOR_SPACE_YCBCR_STUDIO_G2084_TOPLEFT_P2020 = 16;
export const DXGI_COLOR_SPACE_RGB_FULL_G22_NONE_P2020 = 17;
export const DXGI_COLOR_SPACE_YCBCR_STUDIO_GHLG_TOPLEFT_P2020 = 18;
export const DXGI_COLOR_SPACE_YCBCR_FULL_GHLG_TOPLEFT_P2020 = 19;
export const DXGI_COLOR_SPACE_RGB_STUDIO_G24_NONE_P709 = 20;
export const DXGI_COLOR_SPACE_RGB_STUDIO_G24_NONE_P2020 = 21;
export const DXGI_COLOR_SPACE_YCBCR_STUDIO_G24_LEFT_P709 = 22;
export const DXGI_COLOR_SPACE_YCBCR_STUDIO_G24_LEFT_P2020 = 23;
export const DXGI_COLOR_SPACE_YCBCR_STUDIO_G24_TOPLEFT_P2020 = 24;
export const DXGI_COLOR_SPACE_CUSTOM = `-1`;
export const D3D11_TILE_MAPPING_NO_OVERWRITE = 1;
export const D3D11_TILE_RANGE_NULL = 1;
export const D3D11_TILE_RANGE_SKIP = 2;
export const D3D11_TILE_RANGE_REUSE_SINGLE_TILE = 4;
export const D3D11_CHECK_MULTISAMPLE_QUALITY_LEVELS_TILED_RESOURCE = 1;
export const D3D11_TILE_COPY_NO_OVERWRITE = 1;
export const D3D11_TILE_COPY_LINEAR_BUFFER_TO_SWIZZLED_TILED_RESOURCE = 2;
export const D3D11_TILE_COPY_SWIZZLED_TILED_RESOURCE_TO_LINEAR_BUFFER = 4;
export const D3D11_CONTEXT_TYPE_ALL = 0;
export const D3D11_CONTEXT_TYPE_3D = 1;
export const D3D11_CONTEXT_TYPE_COMPUTE = 2;
export const D3D11_CONTEXT_TYPE_COPY = 3;
export const D3D11_CONTEXT_TYPE_VIDEO = 4;
export const D3D11_TEXTURE_LAYOUT_UNDEFINED = 0;
export const D3D11_TEXTURE_LAYOUT_ROW_MAJOR = 1;
export const D3D11_TEXTURE_LAYOUT_64K_STANDARD_SWIZZLE = 2;
export const D3D11_CONSERVATIVE_RASTERIZATION_MODE_OFF = 0;
export const D3D11_CONSERVATIVE_RASTERIZATION_MODE_ON = 1;
export const D3D11_FENCE_FLAG_NONE = 0;
export const D3D11_FENCE_FLAG_SHARED = 2;
export const D3D11_FENCE_FLAG_SHARED_CROSS_ADAPTER = 4;
export const D3D11_FENCE_FLAG_NON_MONITORED = 8;
export const D3D11_FEATURE_VIDEO_DECODER_HISTOGRAM = 0;
export const D3D11_VIDEO_DECODER_HISTOGRAM_COMPONENT_Y = 0;
export const D3D11_VIDEO_DECODER_HISTOGRAM_COMPONENT_U = 1;
export const D3D11_VIDEO_DECODER_HISTOGRAM_COMPONENT_V = 2;
export const D3D11_VIDEO_DECODER_HISTOGRAM_COMPONENT_R = 0;
export const D3D11_VIDEO_DECODER_HISTOGRAM_COMPONENT_G = 1;
export const D3D11_VIDEO_DECODER_HISTOGRAM_COMPONENT_B = 2;
export const D3D11_VIDEO_DECODER_HISTOGRAM_COMPONENT_A = 3;
export const D3D11_VIDEO_DECODER_HISTOGRAM_COMPONENT_FLAG_NONE = 0;
export const D3D11_VIDEO_DECODER_HISTOGRAM_COMPONENT_FLAG_Y = 1;
export const D3D11_VIDEO_DECODER_HISTOGRAM_COMPONENT_FLAG_U = 2;
export const D3D11_VIDEO_DECODER_HISTOGRAM_COMPONENT_FLAG_V = 4;
export const D3D11_VIDEO_DECODER_HISTOGRAM_COMPONENT_FLAG_R = 1;
export const D3D11_VIDEO_DECODER_HISTOGRAM_COMPONENT_FLAG_G = 2;
export const D3D11_VIDEO_DECODER_HISTOGRAM_COMPONENT_FLAG_B = 4;
export const D3D11_VIDEO_DECODER_HISTOGRAM_COMPONENT_FLAG_A = 8;
export const D3D11_CRYPTO_SESSION_KEY_EXCHANGE_FLAG_NONE = 0;
export const D3D11_SHVER_PIXEL_SHADER = 0;
export const D3D11_SHVER_VERTEX_SHADER = 1;
export const D3D11_SHVER_GEOMETRY_SHADER = 2;
export const D3D11_SHVER_HULL_SHADER = 3;
export const D3D11_SHVER_DOMAIN_SHADER = 4;
export const D3D11_SHVER_COMPUTE_SHADER = 5;
export const D3D11_SHVER_RESERVED0 = 65520;
export const D3D_NAME_UNDEFINED = 0;
export const D3D_NAME_POSITION = 1;
export const D3D_NAME_CLIP_DISTANCE = 2;
export const D3D_NAME_CULL_DISTANCE = 3;
export const D3D_NAME_RENDER_TARGET_ARRAY_INDEX = 4;
export const D3D_NAME_VIEWPORT_ARRAY_INDEX = 5;
export const D3D_NAME_VERTEX_ID = 6;
export const D3D_NAME_PRIMITIVE_ID = 7;
export const D3D_NAME_INSTANCE_ID = 8;
export const D3D_NAME_IS_FRONT_FACE = 9;
export const D3D_NAME_SAMPLE_INDEX = 10;
export const D3D_NAME_FINAL_QUAD_EDGE_TESSFACTOR = 11;
export const D3D_NAME_FINAL_QUAD_INSIDE_TESSFACTOR = 12;
export const D3D_NAME_FINAL_TRI_EDGE_TESSFACTOR = 13;
export const D3D_NAME_FINAL_TRI_INSIDE_TESSFACTOR = 14;
export const D3D_NAME_FINAL_LINE_DETAIL_TESSFACTOR = 15;
export const D3D_NAME_FINAL_LINE_DENSITY_TESSFACTOR = 16;
export const D3D_NAME_BARYCENTRICS = 23;
export const D3D_NAME_SHADINGRATE = 24;
export const D3D_NAME_CULLPRIMITIVE = 25;
export const D3D_NAME_TARGET = 64;
export const D3D_NAME_DEPTH = 65;
export const D3D_NAME_COVERAGE = 66;
export const D3D_NAME_DEPTH_GREATER_EQUAL = 67;
export const D3D_NAME_DEPTH_LESS_EQUAL = 68;
export const D3D_NAME_STENCIL_REF = 69;
export const D3D_NAME_INNER_COVERAGE = 70;
export const D3D10_NAME_UNDEFINED = 0;
export const D3D10_NAME_POSITION = 1;
export const D3D10_NAME_CLIP_DISTANCE = 2;
export const D3D10_NAME_CULL_DISTANCE = 3;
export const D3D10_NAME_RENDER_TARGET_ARRAY_INDEX = 4;
export const D3D10_NAME_VIEWPORT_ARRAY_INDEX = 5;
export const D3D10_NAME_VERTEX_ID = 6;
export const D3D10_NAME_PRIMITIVE_ID = 7;
export const D3D10_NAME_INSTANCE_ID = 8;
export const D3D10_NAME_IS_FRONT_FACE = 9;
export const D3D10_NAME_SAMPLE_INDEX = 10;
export const D3D10_NAME_TARGET = 64;
export const D3D10_NAME_DEPTH = 65;
export const D3D10_NAME_COVERAGE = 66;
export const D3D11_NAME_FINAL_QUAD_EDGE_TESSFACTOR = 11;
export const D3D11_NAME_FINAL_QUAD_INSIDE_TESSFACTOR = 12;
export const D3D11_NAME_FINAL_TRI_EDGE_TESSFACTOR = 13;
export const D3D11_NAME_FINAL_TRI_INSIDE_TESSFACTOR = 14;
export const D3D11_NAME_FINAL_LINE_DETAIL_TESSFACTOR = 15;
export const D3D11_NAME_FINAL_LINE_DENSITY_TESSFACTOR = 16;
export const D3D11_NAME_DEPTH_GREATER_EQUAL = 67;
export const D3D11_NAME_DEPTH_LESS_EQUAL = 68;
export const D3D11_NAME_STENCIL_REF = 69;
export const D3D11_NAME_INNER_COVERAGE = 70;
export const D3D12_NAME_BARYCENTRICS = 23;
export const D3D12_NAME_SHADINGRATE = 24;
export const D3D12_NAME_CULLPRIMITIVE = 25;
export const D3D_REGISTER_COMPONENT_UNKNOWN = 0;
export const D3D_REGISTER_COMPONENT_UINT32 = 1;
export const D3D_REGISTER_COMPONENT_SINT32 = 2;
export const D3D_REGISTER_COMPONENT_FLOAT32 = 3;
export const D3D10_REGISTER_COMPONENT_UNKNOWN = 0;
export const D3D10_REGISTER_COMPONENT_UINT32 = 1;
export const D3D10_REGISTER_COMPONENT_SINT32 = 2;
export const D3D10_REGISTER_COMPONENT_FLOAT32 = 3;
export const D3D_MIN_PRECISION_DEFAULT = 0;
export const D3D_MIN_PRECISION_FLOAT_16 = 1;
export const D3D_MIN_PRECISION_FLOAT_2_8 = 2;
export const D3D_MIN_PRECISION_RESERVED = 3;
export const D3D_MIN_PRECISION_SINT_16 = 4;
export const D3D_MIN_PRECISION_UINT_16 = 5;
export const D3D_MIN_PRECISION_ANY_16 = 240;
export const D3D_MIN_PRECISION_ANY_10 = 241;
export const D3D_CT_CBUFFER = 0;
export const D3D_CT_TBUFFER = 1;
export const D3D_CT_INTERFACE_POINTERS = 2;
export const D3D_CT_RESOURCE_BIND_INFO = 3;
export const D3D10_CT_CBUFFER = 0;
export const D3D10_CT_TBUFFER = 1;
export const D3D11_CT_CBUFFER = 0;
export const D3D11_CT_TBUFFER = 1;
export const D3D11_CT_INTERFACE_POINTERS = 2;
export const D3D11_CT_RESOURCE_BIND_INFO = 3;
export const D3D_SVC_SCALAR = 0;
export const D3D_SVC_VECTOR = 1;
export const D3D_SVC_MATRIX_ROWS = 2;
export const D3D_SVC_MATRIX_COLUMNS = 3;
export const D3D_SVC_OBJECT = 4;
export const D3D_SVC_STRUCT = 5;
export const D3D_SVC_INTERFACE_CLASS = 6;
export const D3D_SVC_INTERFACE_POINTER = 7;
export const D3D10_SVC_SCALAR = 0;
export const D3D10_SVC_VECTOR = 1;
export const D3D10_SVC_MATRIX_ROWS = 2;
export const D3D10_SVC_MATRIX_COLUMNS = 3;
export const D3D10_SVC_OBJECT = 4;
export const D3D10_SVC_STRUCT = 5;
export const D3D11_SVC_INTERFACE_CLASS = 6;
export const D3D11_SVC_INTERFACE_POINTER = 7;
export const D3D_SVC_FORCE_DWORD = 2147483647;
export const D3D_SVT_VOID = 0;
export const D3D_SVT_BOOL = 1;
export const D3D_SVT_INT = 2;
export const D3D_SVT_FLOAT = 3;
export const D3D_SVT_STRING = 4;
export const D3D_SVT_TEXTURE = 5;
export const D3D_SVT_TEXTURE1D = 6;
export const D3D_SVT_TEXTURE2D = 7;
export const D3D_SVT_TEXTURE3D = 8;
export const D3D_SVT_TEXTURECUBE = 9;
export const D3D_SVT_SAMPLER = 10;
export const D3D_SVT_SAMPLER1D = 11;
export const D3D_SVT_SAMPLER2D = 12;
export const D3D_SVT_SAMPLER3D = 13;
export const D3D_SVT_SAMPLERCUBE = 14;
export const D3D_SVT_PIXELSHADER = 15;
export const D3D_SVT_VERTEXSHADER = 16;
export const D3D_SVT_PIXELFRAGMENT = 17;
export const D3D_SVT_VERTEXFRAGMENT = 18;
export const D3D_SVT_UINT = 19;
export const D3D_SVT_UINT8 = 20;
export const D3D_SVT_GEOMETRYSHADER = 21;
export const D3D_SVT_RASTERIZER = 22;
export const D3D_SVT_DEPTHSTENCIL = 23;
export const D3D_SVT_BLEND = 24;
export const D3D_SVT_BUFFER = 25;
export const D3D_SVT_CBUFFER = 26;
export const D3D_SVT_TBUFFER = 27;
export const D3D_SVT_TEXTURE1DARRAY = 28;
export const D3D_SVT_TEXTURE2DARRAY = 29;
export const D3D_SVT_RENDERTARGETVIEW = 30;
export const D3D_SVT_DEPTHSTENCILVIEW = 31;
export const D3D_SVT_TEXTURE2DMS = 32;
export const D3D_SVT_TEXTURE2DMSARRAY = 33;
export const D3D_SVT_TEXTURECUBEARRAY = 34;
export const D3D_SVT_HULLSHADER = 35;
export const D3D_SVT_DOMAINSHADER = 36;
export const D3D_SVT_INTERFACE_POINTER = 37;
export const D3D_SVT_COMPUTESHADER = 38;
export const D3D_SVT_DOUBLE = 39;
export const D3D_SVT_RWTEXTURE1D = 40;
export const D3D_SVT_RWTEXTURE1DARRAY = 41;
export const D3D_SVT_RWTEXTURE2D = 42;
export const D3D_SVT_RWTEXTURE2DARRAY = 43;
export const D3D_SVT_RWTEXTURE3D = 44;
export const D3D_SVT_RWBUFFER = 45;
export const D3D_SVT_BYTEADDRESS_BUFFER = 46;
export const D3D_SVT_RWBYTEADDRESS_BUFFER = 47;
export const D3D_SVT_STRUCTURED_BUFFER = 48;
export const D3D_SVT_RWSTRUCTURED_BUFFER = 49;
export const D3D_SVT_APPEND_STRUCTURED_BUFFER = 50;
export const D3D_SVT_CONSUME_STRUCTURED_BUFFER = 51;
export const D3D_SVT_MIN8FLOAT = 52;
export const D3D_SVT_MIN10FLOAT = 53;
export const D3D_SVT_MIN16FLOAT = 54;
export const D3D_SVT_MIN12INT = 55;
export const D3D_SVT_MIN16INT = 56;
export const D3D_SVT_MIN16UINT = 57;
export const D3D_SVT_INT16 = 58;
export const D3D_SVT_UINT16 = 59;
export const D3D_SVT_FLOAT16 = 60;
export const D3D_SVT_INT64 = 61;
export const D3D_SVT_UINT64 = 62;
export const D3D10_SVT_VOID = 0;
export const D3D10_SVT_BOOL = 1;
export const D3D10_SVT_INT = 2;
export const D3D10_SVT_FLOAT = 3;
export const D3D10_SVT_STRING = 4;
export const D3D10_SVT_TEXTURE = 5;
export const D3D10_SVT_TEXTURE1D = 6;
export const D3D10_SVT_TEXTURE2D = 7;
export const D3D10_SVT_TEXTURE3D = 8;
export const D3D10_SVT_TEXTURECUBE = 9;
export const D3D10_SVT_SAMPLER = 10;
export const D3D10_SVT_SAMPLER1D = 11;
export const D3D10_SVT_SAMPLER2D = 12;
export const D3D10_SVT_SAMPLER3D = 13;
export const D3D10_SVT_SAMPLERCUBE = 14;
export const D3D10_SVT_PIXELSHADER = 15;
export const D3D10_SVT_VERTEXSHADER = 16;
export const D3D10_SVT_PIXELFRAGMENT = 17;
export const D3D10_SVT_VERTEXFRAGMENT = 18;
export const D3D10_SVT_UINT = 19;
export const D3D10_SVT_UINT8 = 20;
export const D3D10_SVT_GEOMETRYSHADER = 21;
export const D3D10_SVT_RASTERIZER = 22;
export const D3D10_SVT_DEPTHSTENCIL = 23;
export const D3D10_SVT_BLEND = 24;
export const D3D10_SVT_BUFFER = 25;
export const D3D10_SVT_CBUFFER = 26;
export const D3D10_SVT_TBUFFER = 27;
export const D3D10_SVT_TEXTURE1DARRAY = 28;
export const D3D10_SVT_TEXTURE2DARRAY = 29;
export const D3D10_SVT_RENDERTARGETVIEW = 30;
export const D3D10_SVT_DEPTHSTENCILVIEW = 31;
export const D3D10_SVT_TEXTURE2DMS = 32;
export const D3D10_SVT_TEXTURE2DMSARRAY = 33;
export const D3D10_SVT_TEXTURECUBEARRAY = 34;
export const D3D11_SVT_HULLSHADER = 35;
export const D3D11_SVT_DOMAINSHADER = 36;
export const D3D11_SVT_INTERFACE_POINTER = 37;
export const D3D11_SVT_COMPUTESHADER = 38;
export const D3D11_SVT_DOUBLE = 39;
export const D3D11_SVT_RWTEXTURE1D = 40;
export const D3D11_SVT_RWTEXTURE1DARRAY = 41;
export const D3D11_SVT_RWTEXTURE2D = 42;
export const D3D11_SVT_RWTEXTURE2DARRAY = 43;
export const D3D11_SVT_RWTEXTURE3D = 44;
export const D3D11_SVT_RWBUFFER = 45;
export const D3D11_SVT_BYTEADDRESS_BUFFER = 46;
export const D3D11_SVT_RWBYTEADDRESS_BUFFER = 47;
export const D3D11_SVT_STRUCTURED_BUFFER = 48;
export const D3D11_SVT_RWSTRUCTURED_BUFFER = 49;
export const D3D11_SVT_APPEND_STRUCTURED_BUFFER = 50;
export const D3D11_SVT_CONSUME_STRUCTURED_BUFFER = 51;
export const D3D_SVT_FORCE_DWORD = 2147483647;
export const D3D_PRIMITIVE_TOPOLOGY_UNDEFINED = 0;
export const D3D_PRIMITIVE_TOPOLOGY_POINTLIST = 1;
export const D3D_PRIMITIVE_TOPOLOGY_LINELIST = 2;
export const D3D_PRIMITIVE_TOPOLOGY_LINESTRIP = 3;
export const D3D_PRIMITIVE_TOPOLOGY_TRIANGLELIST = 4;
export const D3D_PRIMITIVE_TOPOLOGY_TRIANGLESTRIP = 5;
export const D3D_PRIMITIVE_TOPOLOGY_LINELIST_ADJ = 10;
export const D3D_PRIMITIVE_TOPOLOGY_LINESTRIP_ADJ = 11;
export const D3D_PRIMITIVE_TOPOLOGY_TRIANGLELIST_ADJ = 12;
export const D3D_PRIMITIVE_TOPOLOGY_TRIANGLESTRIP_ADJ = 13;
export const D3D_PRIMITIVE_TOPOLOGY_1_CONTROL_POINT_PATCHLIST = 33;
export const D3D_PRIMITIVE_TOPOLOGY_2_CONTROL_POINT_PATCHLIST = 34;
export const D3D_PRIMITIVE_TOPOLOGY_3_CONTROL_POINT_PATCHLIST = 35;
export const D3D_PRIMITIVE_TOPOLOGY_4_CONTROL_POINT_PATCHLIST = 36;
export const D3D_PRIMITIVE_TOPOLOGY_5_CONTROL_POINT_PATCHLIST = 37;
export const D3D_PRIMITIVE_TOPOLOGY_6_CONTROL_POINT_PATCHLIST = 38;
export const D3D_PRIMITIVE_TOPOLOGY_7_CONTROL_POINT_PATCHLIST = 39;
export const D3D_PRIMITIVE_TOPOLOGY_8_CONTROL_POINT_PATCHLIST = 40;
export const D3D_PRIMITIVE_TOPOLOGY_9_CONTROL_POINT_PATCHLIST = 41;
export const D3D_PRIMITIVE_TOPOLOGY_10_CONTROL_POINT_PATCHLIST = 42;
export const D3D_PRIMITIVE_TOPOLOGY_11_CONTROL_POINT_PATCHLIST = 43;
export const D3D_PRIMITIVE_TOPOLOGY_12_CONTROL_POINT_PATCHLIST = 44;
export const D3D_PRIMITIVE_TOPOLOGY_13_CONTROL_POINT_PATCHLIST = 45;
export const D3D_PRIMITIVE_TOPOLOGY_14_CONTROL_POINT_PATCHLIST = 46;
export const D3D_PRIMITIVE_TOPOLOGY_15_CONTROL_POINT_PATCHLIST = 47;
export const D3D_PRIMITIVE_TOPOLOGY_16_CONTROL_POINT_PATCHLIST = 48;
export const D3D_PRIMITIVE_TOPOLOGY_17_CONTROL_POINT_PATCHLIST = 49;
export const D3D_PRIMITIVE_TOPOLOGY_18_CONTROL_POINT_PATCHLIST = 50;
export const D3D_PRIMITIVE_TOPOLOGY_19_CONTROL_POINT_PATCHLIST = 51;
export const D3D_PRIMITIVE_TOPOLOGY_20_CONTROL_POINT_PATCHLIST = 52;
export const D3D_PRIMITIVE_TOPOLOGY_21_CONTROL_POINT_PATCHLIST = 53;
export const D3D_PRIMITIVE_TOPOLOGY_22_CONTROL_POINT_PATCHLIST = 54;
export const D3D_PRIMITIVE_TOPOLOGY_23_CONTROL_POINT_PATCHLIST = 55;
export const D3D_PRIMITIVE_TOPOLOGY_24_CONTROL_POINT_PATCHLIST = 56;
export const D3D_PRIMITIVE_TOPOLOGY_25_CONTROL_POINT_PATCHLIST = 57;
export const D3D_PRIMITIVE_TOPOLOGY_26_CONTROL_POINT_PATCHLIST = 58;
export const D3D_PRIMITIVE_TOPOLOGY_27_CONTROL_POINT_PATCHLIST = 59;
export const D3D_PRIMITIVE_TOPOLOGY_28_CONTROL_POINT_PATCHLIST = 60;
export const D3D_PRIMITIVE_TOPOLOGY_29_CONTROL_POINT_PATCHLIST = 61;
export const D3D_PRIMITIVE_TOPOLOGY_30_CONTROL_POINT_PATCHLIST = 62;
export const D3D_PRIMITIVE_TOPOLOGY_31_CONTROL_POINT_PATCHLIST = 63;
export const D3D_PRIMITIVE_TOPOLOGY_32_CONTROL_POINT_PATCHLIST = 64;
export const D3D10_PRIMITIVE_TOPOLOGY_UNDEFINED = 0;
export const D3D10_PRIMITIVE_TOPOLOGY_POINTLIST = 1;
export const D3D10_PRIMITIVE_TOPOLOGY_LINELIST = 2;
export const D3D10_PRIMITIVE_TOPOLOGY_LINESTRIP = 3;
export const D3D10_PRIMITIVE_TOPOLOGY_TRIANGLELIST = 4;
export const D3D10_PRIMITIVE_TOPOLOGY_TRIANGLESTRIP = 5;
export const D3D10_PRIMITIVE_TOPOLOGY_LINELIST_ADJ = 10;
export const D3D10_PRIMITIVE_TOPOLOGY_LINESTRIP_ADJ = 11;
export const D3D10_PRIMITIVE_TOPOLOGY_TRIANGLELIST_ADJ = 12;
export const D3D10_PRIMITIVE_TOPOLOGY_TRIANGLESTRIP_ADJ = 13;
export const D3D11_PRIMITIVE_TOPOLOGY_UNDEFINED = 0;
export const D3D11_PRIMITIVE_TOPOLOGY_POINTLIST = 1;
export const D3D11_PRIMITIVE_TOPOLOGY_LINELIST = 2;
export const D3D11_PRIMITIVE_TOPOLOGY_LINESTRIP = 3;
export const D3D11_PRIMITIVE_TOPOLOGY_TRIANGLELIST = 4;
export const D3D11_PRIMITIVE_TOPOLOGY_TRIANGLESTRIP = 5;
export const D3D11_PRIMITIVE_TOPOLOGY_LINELIST_ADJ = 10;
export const D3D11_PRIMITIVE_TOPOLOGY_LINESTRIP_ADJ = 11;
export const D3D11_PRIMITIVE_TOPOLOGY_TRIANGLELIST_ADJ = 12;
export const D3D11_PRIMITIVE_TOPOLOGY_TRIANGLESTRIP_ADJ = 13;
export const D3D11_PRIMITIVE_TOPOLOGY_1_CONTROL_POINT_PATCHLIST = 33;
export const D3D11_PRIMITIVE_TOPOLOGY_2_CONTROL_POINT_PATCHLIST = 34;
export const D3D11_PRIMITIVE_TOPOLOGY_3_CONTROL_POINT_PATCHLIST = 35;
export const D3D11_PRIMITIVE_TOPOLOGY_4_CONTROL_POINT_PATCHLIST = 36;
export const D3D11_PRIMITIVE_TOPOLOGY_5_CONTROL_POINT_PATCHLIST = 37;
export const D3D11_PRIMITIVE_TOPOLOGY_6_CONTROL_POINT_PATCHLIST = 38;
export const D3D11_PRIMITIVE_TOPOLOGY_7_CONTROL_POINT_PATCHLIST = 39;
export const D3D11_PRIMITIVE_TOPOLOGY_8_CONTROL_POINT_PATCHLIST = 40;
export const D3D11_PRIMITIVE_TOPOLOGY_9_CONTROL_POINT_PATCHLIST = 41;
export const D3D11_PRIMITIVE_TOPOLOGY_10_CONTROL_POINT_PATCHLIST = 42;
export const D3D11_PRIMITIVE_TOPOLOGY_11_CONTROL_POINT_PATCHLIST = 43;
export const D3D11_PRIMITIVE_TOPOLOGY_12_CONTROL_POINT_PATCHLIST = 44;
export const D3D11_PRIMITIVE_TOPOLOGY_13_CONTROL_POINT_PATCHLIST = 45;
export const D3D11_PRIMITIVE_TOPOLOGY_14_CONTROL_POINT_PATCHLIST = 46;
export const D3D11_PRIMITIVE_TOPOLOGY_15_CONTROL_POINT_PATCHLIST = 47;
export const D3D11_PRIMITIVE_TOPOLOGY_16_CONTROL_POINT_PATCHLIST = 48;
export const D3D11_PRIMITIVE_TOPOLOGY_17_CONTROL_POINT_PATCHLIST = 49;
export const D3D11_PRIMITIVE_TOPOLOGY_18_CONTROL_POINT_PATCHLIST = 50;
export const D3D11_PRIMITIVE_TOPOLOGY_19_CONTROL_POINT_PATCHLIST = 51;
export const D3D11_PRIMITIVE_TOPOLOGY_20_CONTROL_POINT_PATCHLIST = 52;
export const D3D11_PRIMITIVE_TOPOLOGY_21_CONTROL_POINT_PATCHLIST = 53;
export const D3D11_PRIMITIVE_TOPOLOGY_22_CONTROL_POINT_PATCHLIST = 54;
export const D3D11_PRIMITIVE_TOPOLOGY_23_CONTROL_POINT_PATCHLIST = 55;
export const D3D11_PRIMITIVE_TOPOLOGY_24_CONTROL_POINT_PATCHLIST = 56;
export const D3D11_PRIMITIVE_TOPOLOGY_25_CONTROL_POINT_PATCHLIST = 57;
export const D3D11_PRIMITIVE_TOPOLOGY_26_CONTROL_POINT_PATCHLIST = 58;
export const D3D11_PRIMITIVE_TOPOLOGY_27_CONTROL_POINT_PATCHLIST = 59;
export const D3D11_PRIMITIVE_TOPOLOGY_28_CONTROL_POINT_PATCHLIST = 60;
export const D3D11_PRIMITIVE_TOPOLOGY_29_CONTROL_POINT_PATCHLIST = 61;
export const D3D11_PRIMITIVE_TOPOLOGY_30_CONTROL_POINT_PATCHLIST = 62;
export const D3D11_PRIMITIVE_TOPOLOGY_31_CONTROL_POINT_PATCHLIST = 63;
export const D3D11_PRIMITIVE_TOPOLOGY_32_CONTROL_POINT_PATCHLIST = 64;
export const D3D_PRIMITIVE_UNDEFINED = 0;
export const D3D_PRIMITIVE_POINT = 1;
export const D3D_PRIMITIVE_LINE = 2;
export const D3D_PRIMITIVE_TRIANGLE = 3;
export const D3D_PRIMITIVE_LINE_ADJ = 6;
export const D3D_PRIMITIVE_TRIANGLE_ADJ = 7;
export const D3D_PRIMITIVE_1_CONTROL_POINT_PATCH = 8;
export const D3D_PRIMITIVE_2_CONTROL_POINT_PATCH = 9;
export const D3D_PRIMITIVE_3_CONTROL_POINT_PATCH = 10;
export const D3D_PRIMITIVE_4_CONTROL_POINT_PATCH = 11;
export const D3D_PRIMITIVE_5_CONTROL_POINT_PATCH = 12;
export const D3D_PRIMITIVE_6_CONTROL_POINT_PATCH = 13;
export const D3D_PRIMITIVE_7_CONTROL_POINT_PATCH = 14;
export const D3D_PRIMITIVE_8_CONTROL_POINT_PATCH = 15;
export const D3D_PRIMITIVE_9_CONTROL_POINT_PATCH = 16;
export const D3D_PRIMITIVE_10_CONTROL_POINT_PATCH = 17;
export const D3D_PRIMITIVE_11_CONTROL_POINT_PATCH = 18;
export const D3D_PRIMITIVE_12_CONTROL_POINT_PATCH = 19;
export const D3D_PRIMITIVE_13_CONTROL_POINT_PATCH = 20;
export const D3D_PRIMITIVE_14_CONTROL_POINT_PATCH = 21;
export const D3D_PRIMITIVE_15_CONTROL_POINT_PATCH = 22;
export const D3D_PRIMITIVE_16_CONTROL_POINT_PATCH = 23;
export const D3D_PRIMITIVE_17_CONTROL_POINT_PATCH = 24;
export const D3D_PRIMITIVE_18_CONTROL_POINT_PATCH = 25;
export const D3D_PRIMITIVE_19_CONTROL_POINT_PATCH = 26;
export const D3D_PRIMITIVE_20_CONTROL_POINT_PATCH = 27;
export const D3D_PRIMITIVE_21_CONTROL_POINT_PATCH = 28;
export const D3D_PRIMITIVE_22_CONTROL_POINT_PATCH = 29;
export const D3D_PRIMITIVE_23_CONTROL_POINT_PATCH = 30;
export const D3D_PRIMITIVE_24_CONTROL_POINT_PATCH = 31;
export const D3D_PRIMITIVE_25_CONTROL_POINT_PATCH = 32;
export const D3D_PRIMITIVE_26_CONTROL_POINT_PATCH = 33;
export const D3D_PRIMITIVE_27_CONTROL_POINT_PATCH = 34;
export const D3D_PRIMITIVE_28_CONTROL_POINT_PATCH = 35;
export const D3D_PRIMITIVE_29_CONTROL_POINT_PATCH = 36;
export const D3D_PRIMITIVE_30_CONTROL_POINT_PATCH = 37;
export const D3D_PRIMITIVE_31_CONTROL_POINT_PATCH = 38;
export const D3D_PRIMITIVE_32_CONTROL_POINT_PATCH = 39;
export const D3D10_PRIMITIVE_UNDEFINED = 0;
export const D3D10_PRIMITIVE_POINT = 1;
export const D3D10_PRIMITIVE_LINE = 2;
export const D3D10_PRIMITIVE_TRIANGLE = 3;
export const D3D10_PRIMITIVE_LINE_ADJ = 6;
export const D3D10_PRIMITIVE_TRIANGLE_ADJ = 7;
export const D3D11_PRIMITIVE_UNDEFINED = 0;
export const D3D11_PRIMITIVE_POINT = 1;
export const D3D11_PRIMITIVE_LINE = 2;
export const D3D11_PRIMITIVE_TRIANGLE = 3;
export const D3D11_PRIMITIVE_LINE_ADJ = 6;
export const D3D11_PRIMITIVE_TRIANGLE_ADJ = 7;
export const D3D11_PRIMITIVE_1_CONTROL_POINT_PATCH = 8;
export const D3D11_PRIMITIVE_2_CONTROL_POINT_PATCH = 9;
export const D3D11_PRIMITIVE_3_CONTROL_POINT_PATCH = 10;
export const D3D11_PRIMITIVE_4_CONTROL_POINT_PATCH = 11;
export const D3D11_PRIMITIVE_5_CONTROL_POINT_PATCH = 12;
export const D3D11_PRIMITIVE_6_CONTROL_POINT_PATCH = 13;
export const D3D11_PRIMITIVE_7_CONTROL_POINT_PATCH = 14;
export const D3D11_PRIMITIVE_8_CONTROL_POINT_PATCH = 15;
export const D3D11_PRIMITIVE_9_CONTROL_POINT_PATCH = 16;
export const D3D11_PRIMITIVE_10_CONTROL_POINT_PATCH = 17;
export const D3D11_PRIMITIVE_11_CONTROL_POINT_PATCH = 18;
export const D3D11_PRIMITIVE_12_CONTROL_POINT_PATCH = 19;
export const D3D11_PRIMITIVE_13_CONTROL_POINT_PATCH = 20;
export const D3D11_PRIMITIVE_14_CONTROL_POINT_PATCH = 21;
export const D3D11_PRIMITIVE_15_CONTROL_POINT_PATCH = 22;
export const D3D11_PRIMITIVE_16_CONTROL_POINT_PATCH = 23;
export const D3D11_PRIMITIVE_17_CONTROL_POINT_PATCH = 24;
export const D3D11_PRIMITIVE_18_CONTROL_POINT_PATCH = 25;
export const D3D11_PRIMITIVE_19_CONTROL_POINT_PATCH = 26;
export const D3D11_PRIMITIVE_20_CONTROL_POINT_PATCH = 27;
export const D3D11_PRIMITIVE_21_CONTROL_POINT_PATCH = 28;
export const D3D11_PRIMITIVE_22_CONTROL_POINT_PATCH = 29;
export const D3D11_PRIMITIVE_23_CONTROL_POINT_PATCH = 30;
export const D3D11_PRIMITIVE_24_CONTROL_POINT_PATCH = 31;
export const D3D11_PRIMITIVE_25_CONTROL_POINT_PATCH = 32;
export const D3D11_PRIMITIVE_26_CONTROL_POINT_PATCH = 33;
export const D3D11_PRIMITIVE_27_CONTROL_POINT_PATCH = 34;
export const D3D11_PRIMITIVE_28_CONTROL_POINT_PATCH = 35;
export const D3D11_PRIMITIVE_29_CONTROL_POINT_PATCH = 36;
export const D3D11_PRIMITIVE_30_CONTROL_POINT_PATCH = 37;
export const D3D11_PRIMITIVE_31_CONTROL_POINT_PATCH = 38;
export const D3D11_PRIMITIVE_32_CONTROL_POINT_PATCH = 39;
export const D3D_TESSELLATOR_OUTPUT_UNDEFINED = 0;
export const D3D_TESSELLATOR_OUTPUT_POINT = 1;
export const D3D_TESSELLATOR_OUTPUT_LINE = 2;
export const D3D_TESSELLATOR_OUTPUT_TRIANGLE_CW = 3;
export const D3D_TESSELLATOR_OUTPUT_TRIANGLE_CCW = 4;
export const D3D11_TESSELLATOR_OUTPUT_UNDEFINED = 0;
export const D3D11_TESSELLATOR_OUTPUT_POINT = 1;
export const D3D11_TESSELLATOR_OUTPUT_LINE = 2;
export const D3D11_TESSELLATOR_OUTPUT_TRIANGLE_CW = 3;
export const D3D11_TESSELLATOR_OUTPUT_TRIANGLE_CCW = 4;
export const D3D_TESSELLATOR_PARTITIONING_UNDEFINED = 0;
export const D3D_TESSELLATOR_PARTITIONING_INTEGER = 1;
export const D3D_TESSELLATOR_PARTITIONING_POW2 = 2;
export const D3D_TESSELLATOR_PARTITIONING_FRACTIONAL_ODD = 3;
export const D3D_TESSELLATOR_PARTITIONING_FRACTIONAL_EVEN = 4;
export const D3D11_TESSELLATOR_PARTITIONING_UNDEFINED = 0;
export const D3D11_TESSELLATOR_PARTITIONING_INTEGER = 1;
export const D3D11_TESSELLATOR_PARTITIONING_POW2 = 2;
export const D3D11_TESSELLATOR_PARTITIONING_FRACTIONAL_ODD = 3;
export const D3D11_TESSELLATOR_PARTITIONING_FRACTIONAL_EVEN = 4;
export const D3D_TESSELLATOR_DOMAIN_UNDEFINED = 0;
export const D3D_TESSELLATOR_DOMAIN_ISOLINE = 1;
export const D3D_TESSELLATOR_DOMAIN_TRI = 2;
export const D3D_TESSELLATOR_DOMAIN_QUAD = 3;
export const D3D11_TESSELLATOR_DOMAIN_UNDEFINED = 0;
export const D3D11_TESSELLATOR_DOMAIN_ISOLINE = 1;
export const D3D11_TESSELLATOR_DOMAIN_TRI = 2;
export const D3D11_TESSELLATOR_DOMAIN_QUAD = 3;
export const D3D_SIT_CBUFFER = 0;
export const D3D_SIT_TBUFFER = 1;
export const D3D_SIT_TEXTURE = 2;
export const D3D_SIT_SAMPLER = 3;
export const D3D_SIT_UAV_RWTYPED = 4;
export const D3D_SIT_STRUCTURED = 5;
export const D3D_SIT_UAV_RWSTRUCTURED = 6;
export const D3D_SIT_BYTEADDRESS = 7;
export const D3D_SIT_UAV_RWBYTEADDRESS = 8;
export const D3D_SIT_UAV_APPEND_STRUCTURED = 9;
export const D3D_SIT_UAV_CONSUME_STRUCTURED = 10;
export const D3D_SIT_UAV_RWSTRUCTURED_WITH_COUNTER = 11;
export const D3D_SIT_RTACCELERATIONSTRUCTURE = 12;
export const D3D_SIT_UAV_FEEDBACKTEXTURE = 13;
export const D3D10_SIT_CBUFFER = 0;
export const D3D10_SIT_TBUFFER = 1;
export const D3D10_SIT_TEXTURE = 2;
export const D3D10_SIT_SAMPLER = 3;
export const D3D11_SIT_UAV_RWTYPED = 4;
export const D3D11_SIT_STRUCTURED = 5;
export const D3D11_SIT_UAV_RWSTRUCTURED = 6;
export const D3D11_SIT_BYTEADDRESS = 7;
export const D3D11_SIT_UAV_RWBYTEADDRESS = 8;
export const D3D11_SIT_UAV_APPEND_STRUCTURED = 9;
export const D3D11_SIT_UAV_CONSUME_STRUCTURED = 10;
export const D3D11_SIT_UAV_RWSTRUCTURED_WITH_COUNTER = 11;
export const D3D_RETURN_TYPE_UNORM = 1;
export const D3D_RETURN_TYPE_SNORM = 2;
export const D3D_RETURN_TYPE_SINT = 3;
export const D3D_RETURN_TYPE_UINT = 4;
export const D3D_RETURN_TYPE_FLOAT = 5;
export const D3D_RETURN_TYPE_MIXED = 6;
export const D3D_RETURN_TYPE_DOUBLE = 7;
export const D3D_RETURN_TYPE_CONTINUED = 8;
export const D3D10_RETURN_TYPE_UNORM = 1;
export const D3D10_RETURN_TYPE_SNORM = 2;
export const D3D10_RETURN_TYPE_SINT = 3;
export const D3D10_RETURN_TYPE_UINT = 4;
export const D3D10_RETURN_TYPE_FLOAT = 5;
export const D3D10_RETURN_TYPE_MIXED = 6;
export const D3D11_RETURN_TYPE_UNORM = 1;
export const D3D11_RETURN_TYPE_SNORM = 2;
export const D3D11_RETURN_TYPE_SINT = 3;
export const D3D11_RETURN_TYPE_UINT = 4;
export const D3D11_RETURN_TYPE_FLOAT = 5;
export const D3D11_RETURN_TYPE_MIXED = 6;
export const D3D11_RETURN_TYPE_DOUBLE = 7;
export const D3D11_RETURN_TYPE_CONTINUED = 8;
export const D3D_FEATURE_LEVEL_1_0_CORE = 4096;
export const D3D_FEATURE_LEVEL_9_1 = 37120;
export const D3D_FEATURE_LEVEL_9_2 = 37376;
export const D3D_FEATURE_LEVEL_9_3 = 37632;
export const D3D_FEATURE_LEVEL_10_0 = 40960;
export const D3D_FEATURE_LEVEL_10_1 = 41216;
export const D3D_FEATURE_LEVEL_11_0 = 45056;
export const D3D_FEATURE_LEVEL_11_1 = 45312;
export const D3D_FEATURE_LEVEL_12_0 = 49152;
export const D3D_FEATURE_LEVEL_12_1 = 49408;
export const D3D_FEATURE_LEVEL_12_2 = 49664;
export const D3D_INTERPOLATION_UNDEFINED = 0;
export const D3D_INTERPOLATION_CONSTANT = 1;
export const D3D_INTERPOLATION_LINEAR = 2;
export const D3D_INTERPOLATION_LINEAR_CENTROID = 3;
export const D3D_INTERPOLATION_LINEAR_NOPERSPECTIVE = 4;
export const D3D_INTERPOLATION_LINEAR_NOPERSPECTIVE_CENTROID = 5;
export const D3D_INTERPOLATION_LINEAR_SAMPLE = 6;
export const D3D_INTERPOLATION_LINEAR_NOPERSPECTIVE_SAMPLE = 7;
export const D3D_PF_NONE = 0;
export const D3D_PF_IN = 1;
export const D3D_PF_OUT = 2;
export const D3D_PF_FORCE_DWORD = 2147483647;
export const D3D11_VERTEX_SHADER = 1;
export const D3D11_HULL_SHADER = 2;
export const D3D11_DOMAIN_SHADER = 3;
export const D3D11_GEOMETRY_SHADER = 4;
export const D3D11_PIXEL_SHADER = 5;
export const D3D11_COMPUTE_SHADER = 6;
export const D3D11_TRACE_GS_INPUT_PRIMITIVE_UNDEFINED = 0;
export const D3D11_TRACE_GS_INPUT_PRIMITIVE_POINT = 1;
export const D3D11_TRACE_GS_INPUT_PRIMITIVE_LINE = 2;
export const D3D11_TRACE_GS_INPUT_PRIMITIVE_TRIANGLE = 3;
export const D3D11_TRACE_GS_INPUT_PRIMITIVE_LINE_ADJ = 6;
export const D3D11_TRACE_GS_INPUT_PRIMITIVE_TRIANGLE_ADJ = 7;
export const D3D11_TRACE_OUTPUT_NULL_REGISTER = 0;
export const D3D11_TRACE_INPUT_REGISTER = 1;
export const D3D11_TRACE_INPUT_PRIMITIVE_ID_REGISTER = 2;
export const D3D11_TRACE_IMMEDIATE_CONSTANT_BUFFER = 3;
export const D3D11_TRACE_TEMP_REGISTER = 4;
export const D3D11_TRACE_INDEXABLE_TEMP_REGISTER = 5;
export const D3D11_TRACE_OUTPUT_REGISTER = 6;
export const D3D11_TRACE_OUTPUT_DEPTH_REGISTER = 7;
export const D3D11_TRACE_CONSTANT_BUFFER = 8;
export const D3D11_TRACE_IMMEDIATE32 = 9;
export const D3D11_TRACE_SAMPLER = 10;
export const D3D11_TRACE_RESOURCE = 11;
export const D3D11_TRACE_RASTERIZER = 12;
export const D3D11_TRACE_OUTPUT_COVERAGE_MASK = 13;
export const D3D11_TRACE_STREAM = 14;
export const D3D11_TRACE_THIS_POINTER = 15;
export const D3D11_TRACE_OUTPUT_CONTROL_POINT_ID_REGISTER = 16;
export const D3D11_TRACE_INPUT_FORK_INSTANCE_ID_REGISTER = 17;
export const D3D11_TRACE_INPUT_JOIN_INSTANCE_ID_REGISTER = 18;
export const D3D11_TRACE_INPUT_CONTROL_POINT_REGISTER = 19;
export const D3D11_TRACE_OUTPUT_CONTROL_POINT_REGISTER = 20;
export const D3D11_TRACE_INPUT_PATCH_CONSTANT_REGISTER = 21;
export const D3D11_TRACE_INPUT_DOMAIN_POINT_REGISTER = 22;
export const D3D11_TRACE_UNORDERED_ACCESS_VIEW = 23;
export const D3D11_TRACE_THREAD_GROUP_SHARED_MEMORY = 24;
export const D3D11_TRACE_INPUT_THREAD_ID_REGISTER = 25;
export const D3D11_TRACE_INPUT_THREAD_GROUP_ID_REGISTER = 26;
export const D3D11_TRACE_INPUT_THREAD_ID_IN_GROUP_REGISTER = 27;
export const D3D11_TRACE_INPUT_COVERAGE_MASK_REGISTER = 28;
export const D3D11_TRACE_INPUT_THREAD_ID_IN_GROUP_FLATTENED_REGISTER = 29;
export const D3D11_TRACE_INPUT_GS_INSTANCE_ID_REGISTER = 30;
export const D3D11_TRACE_OUTPUT_DEPTH_GREATER_EQUAL_REGISTER = 31;
export const D3D11_TRACE_OUTPUT_DEPTH_LESS_EQUAL_REGISTER = 32;
export const D3D11_TRACE_IMMEDIATE64 = 33;
export const D3D11_TRACE_INPUT_CYCLE_COUNTER_REGISTER = 34;
export const D3D11_TRACE_INTERFACE_POINTER = 35;
export const D3DX11_SCAN_DATA_TYPE_FLOAT = 1;
export const D3DX11_SCAN_DATA_TYPE_INT = 2;
export const D3DX11_SCAN_DATA_TYPE_UINT = 3;
export const D3DX11_SCAN_OPCODE_ADD = 1;
export const D3DX11_SCAN_OPCODE_MIN = 2;
export const D3DX11_SCAN_OPCODE_MAX = 3;
export const D3DX11_SCAN_OPCODE_MUL = 4;
export const D3DX11_SCAN_OPCODE_AND = 5;
export const D3DX11_SCAN_OPCODE_OR = 6;
export const D3DX11_SCAN_OPCODE_XOR = 7;
export const D3DX11_SCAN_DIRECTION_FORWARD = 1;
export const D3DX11_SCAN_DIRECTION_BACKWARD = 2;
export const D3DX11_FFT_DATA_TYPE_REAL = 0;
export const D3DX11_FFT_DATA_TYPE_COMPLEX = 1;
export const D3DX11_FFT_DIM_MASK_1D = 1;
export const D3DX11_FFT_DIM_MASK_2D = 3;
export const D3DX11_FFT_DIM_MASK_3D = 7;
export const D3DX11_FFT_CREATE_FLAG_NO_PRECOMPUTE_BUFFERS = 1;
export const D3D_DRIVER_TYPE_UNKNOWN = 0;
export const D3D_DRIVER_TYPE_HARDWARE = 1;
export const D3D_DRIVER_TYPE_REFERENCE = 2;
export const D3D_DRIVER_TYPE_NULL = 3;
export const D3D_DRIVER_TYPE_SOFTWARE = 4;
export const D3D_DRIVER_TYPE_WARP = 5;

// Structs

export type PSTR = Deno.PointerValue | Uint8Array | null;

/**
 * Windows.Win32.Graphics.Direct3D11.D3D11_INPUT_ELEMENT_DESC (size: 32)
 */
export interface D3D11_INPUT_ELEMENT_DESC {
  /** Windows.Win32.Foundation.PSTR */
  SemanticName: string | null;
  /** u32 */
  SemanticIndex: number;
  /** Windows.Win32.Graphics.Dxgi.Common.DXGI_FORMAT */
  Format: DXGI_FORMAT;
  /** u32 */
  InputSlot: number;
  /** u32 */
  AlignedByteOffset: number;
  /** Windows.Win32.Graphics.Direct3D11.D3D11_INPUT_CLASSIFICATION */
  InputSlotClass: D3D11_INPUT_CLASSIFICATION;
  /** u32 */
  InstanceDataStepRate: number;
}

export const sizeofD3D11_INPUT_ELEMENT_DESC = 32;

export function allocD3D11_INPUT_ELEMENT_DESC(data?: Partial<D3D11_INPUT_ELEMENT_DESC>): Uint8Array {
  const buf = new Uint8Array(sizeofD3D11_INPUT_ELEMENT_DESC);
  const view = new DataView(buf.buffer);
  // 0x00: buffer
  if (data?.SemanticName !== undefined) {
    (buf as any)._f0 = util.pstrToFfi(data.SemanticName);
    view.setBigUint64(0, (buf as any)._f0 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f0)), true);
  }
  // 0x08: u32
  if (data?.SemanticIndex !== undefined) view.setUint32(8, Number(data.SemanticIndex), true);
  // 0x0c: u32
  if (data?.Format !== undefined) view.setUint32(12, Number(data.Format), true);
  // 0x10: u32
  if (data?.InputSlot !== undefined) view.setUint32(16, Number(data.InputSlot), true);
  // 0x14: u32
  if (data?.AlignedByteOffset !== undefined) view.setUint32(20, Number(data.AlignedByteOffset), true);
  // 0x18: i32
  if (data?.InputSlotClass !== undefined) view.setInt32(24, Number(data.InputSlotClass), true);
  // 0x1c: u32
  if (data?.InstanceDataStepRate !== undefined) view.setUint32(28, Number(data.InstanceDataStepRate), true);
  return buf;
}

/**
 * Windows.Win32.Graphics.Direct3D11.D3D11_SO_DECLARATION_ENTRY (size: 24)
 */
export interface D3D11_SO_DECLARATION_ENTRY {
  /** u32 */
  Stream: number;
  /** Windows.Win32.Foundation.PSTR */
  SemanticName: string | null;
  /** u32 */
  SemanticIndex: number;
  /** u8 */
  StartComponent: number;
  /** u8 */
  ComponentCount: number;
  /** u8 */
  OutputSlot: number;
}

export const sizeofD3D11_SO_DECLARATION_ENTRY = 24;

export function allocD3D11_SO_DECLARATION_ENTRY(data?: Partial<D3D11_SO_DECLARATION_ENTRY>): Uint8Array {
  const buf = new Uint8Array(sizeofD3D11_SO_DECLARATION_ENTRY);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.Stream !== undefined) view.setUint32(0, Number(data.Stream), true);
  // 0x04: pad4
  // 0x08: buffer
  if (data?.SemanticName !== undefined) {
    (buf as any)._f8 = util.pstrToFfi(data.SemanticName);
    view.setBigUint64(8, (buf as any)._f8 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f8)), true);
  }
  // 0x10: u32
  if (data?.SemanticIndex !== undefined) view.setUint32(16, Number(data.SemanticIndex), true);
  // 0x14: u8
  if (data?.StartComponent !== undefined) view.setUint8(20, Number(data.StartComponent));
  // 0x15: u8
  if (data?.ComponentCount !== undefined) view.setUint8(21, Number(data.ComponentCount));
  // 0x16: u8
  if (data?.OutputSlot !== undefined) view.setUint8(22, Number(data.OutputSlot));
  // 0x17: pad1
  return buf;
}

/**
 * Windows.Win32.Graphics.Direct3D11.D3D11_VIEWPORT (size: 24)
 */
export interface D3D11_VIEWPORT {
  /** f32 */
  TopLeftX: number;
  /** f32 */
  TopLeftY: number;
  /** f32 */
  Width: number;
  /** f32 */
  Height: number;
  /** f32 */
  MinDepth: number;
  /** f32 */
  MaxDepth: number;
}

export const sizeofD3D11_VIEWPORT = 24;

export function allocD3D11_VIEWPORT(data?: Partial<D3D11_VIEWPORT>): Uint8Array {
  const buf = new Uint8Array(sizeofD3D11_VIEWPORT);
  const view = new DataView(buf.buffer);
  // 0x00: f32
  if (data?.TopLeftX !== undefined) view.setFloat32(0, Number(data.TopLeftX), true);
  // 0x04: f32
  if (data?.TopLeftY !== undefined) view.setFloat32(4, Number(data.TopLeftY), true);
  // 0x08: f32
  if (data?.Width !== undefined) view.setFloat32(8, Number(data.Width), true);
  // 0x0c: f32
  if (data?.Height !== undefined) view.setFloat32(12, Number(data.Height), true);
  // 0x10: f32
  if (data?.MinDepth !== undefined) view.setFloat32(16, Number(data.MinDepth), true);
  // 0x14: f32
  if (data?.MaxDepth !== undefined) view.setFloat32(20, Number(data.MaxDepth), true);
  return buf;
}

/**
 * Windows.Win32.Graphics.Direct3D11.D3D11_DRAW_INSTANCED_INDIRECT_ARGS (size: 16)
 */
export interface D3D11_DRAW_INSTANCED_INDIRECT_ARGS {
  /** u32 */
  VertexCountPerInstance: number;
  /** u32 */
  InstanceCount: number;
  /** u32 */
  StartVertexLocation: number;
  /** u32 */
  StartInstanceLocation: number;
}

export const sizeofD3D11_DRAW_INSTANCED_INDIRECT_ARGS = 16;

export function allocD3D11_DRAW_INSTANCED_INDIRECT_ARGS(data?: Partial<D3D11_DRAW_INSTANCED_INDIRECT_ARGS>): Uint8Array {
  const buf = new Uint8Array(sizeofD3D11_DRAW_INSTANCED_INDIRECT_ARGS);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.VertexCountPerInstance !== undefined) view.setUint32(0, Number(data.VertexCountPerInstance), true);
  // 0x04: u32
  if (data?.InstanceCount !== undefined) view.setUint32(4, Number(data.InstanceCount), true);
  // 0x08: u32
  if (data?.StartVertexLocation !== undefined) view.setUint32(8, Number(data.StartVertexLocation), true);
  // 0x0c: u32
  if (data?.StartInstanceLocation !== undefined) view.setUint32(12, Number(data.StartInstanceLocation), true);
  return buf;
}

/**
 * Windows.Win32.Graphics.Direct3D11.D3D11_DRAW_INDEXED_INSTANCED_INDIRECT_ARGS (size: 24)
 */
export interface D3D11_DRAW_INDEXED_INSTANCED_INDIRECT_ARGS {
  /** u32 */
  IndexCountPerInstance: number;
  /** u32 */
  InstanceCount: number;
  /** u32 */
  StartIndexLocation: number;
  /** i32 */
  BaseVertexLocation: number;
  /** u32 */
  StartInstanceLocation: number;
}

export const sizeofD3D11_DRAW_INDEXED_INSTANCED_INDIRECT_ARGS = 24;

export function allocD3D11_DRAW_INDEXED_INSTANCED_INDIRECT_ARGS(data?: Partial<D3D11_DRAW_INDEXED_INSTANCED_INDIRECT_ARGS>): Uint8Array {
  const buf = new Uint8Array(sizeofD3D11_DRAW_INDEXED_INSTANCED_INDIRECT_ARGS);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.IndexCountPerInstance !== undefined) view.setUint32(0, Number(data.IndexCountPerInstance), true);
  // 0x04: u32
  if (data?.InstanceCount !== undefined) view.setUint32(4, Number(data.InstanceCount), true);
  // 0x08: u32
  if (data?.StartIndexLocation !== undefined) view.setUint32(8, Number(data.StartIndexLocation), true);
  // 0x0c: i32
  if (data?.BaseVertexLocation !== undefined) view.setInt32(12, Number(data.BaseVertexLocation), true);
  // 0x10: u32
  if (data?.StartInstanceLocation !== undefined) view.setUint32(16, Number(data.StartInstanceLocation), true);
  // 0x14: pad4
  return buf;
}

/**
 * Windows.Win32.Graphics.Direct3D11.D3D11_BOX (size: 24)
 */
export interface D3D11_BOX {
  /** u32 */
  left: number;
  /** u32 */
  top: number;
  /** u32 */
  front: number;
  /** u32 */
  right: number;
  /** u32 */
  bottom: number;
  /** u32 */
  back: number;
}

export const sizeofD3D11_BOX = 24;

export function allocD3D11_BOX(data?: Partial<D3D11_BOX>): Uint8Array {
  const buf = new Uint8Array(sizeofD3D11_BOX);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.left !== undefined) view.setUint32(0, Number(data.left), true);
  // 0x04: u32
  if (data?.top !== undefined) view.setUint32(4, Number(data.top), true);
  // 0x08: u32
  if (data?.front !== undefined) view.setUint32(8, Number(data.front), true);
  // 0x0c: u32
  if (data?.right !== undefined) view.setUint32(12, Number(data.right), true);
  // 0x10: u32
  if (data?.bottom !== undefined) view.setUint32(16, Number(data.bottom), true);
  // 0x14: u32
  if (data?.back !== undefined) view.setUint32(20, Number(data.back), true);
  return buf;
}

/**
 * Windows.Win32.Graphics.Direct3D11.D3D11_DEPTH_STENCILOP_DESC (size: 16)
 */
export interface D3D11_DEPTH_STENCILOP_DESC {
  /** Windows.Win32.Graphics.Direct3D11.D3D11_STENCIL_OP */
  StencilFailOp: D3D11_STENCIL_OP;
  /** Windows.Win32.Graphics.Direct3D11.D3D11_STENCIL_OP */
  StencilDepthFailOp: D3D11_STENCIL_OP;
  /** Windows.Win32.Graphics.Direct3D11.D3D11_STENCIL_OP */
  StencilPassOp: D3D11_STENCIL_OP;
  /** Windows.Win32.Graphics.Direct3D11.D3D11_COMPARISON_FUNC */
  StencilFunc: D3D11_COMPARISON_FUNC;
}

export const sizeofD3D11_DEPTH_STENCILOP_DESC = 16;

export function allocD3D11_DEPTH_STENCILOP_DESC(data?: Partial<D3D11_DEPTH_STENCILOP_DESC>): Uint8Array {
  const buf = new Uint8Array(sizeofD3D11_DEPTH_STENCILOP_DESC);
  const view = new DataView(buf.buffer);
  // 0x00: i32
  if (data?.StencilFailOp !== undefined) view.setInt32(0, Number(data.StencilFailOp), true);
  // 0x04: i32
  if (data?.StencilDepthFailOp !== undefined) view.setInt32(4, Number(data.StencilDepthFailOp), true);
  // 0x08: i32
  if (data?.StencilPassOp !== undefined) view.setInt32(8, Number(data.StencilPassOp), true);
  // 0x0c: i32
  if (data?.StencilFunc !== undefined) view.setInt32(12, Number(data.StencilFunc), true);
  return buf;
}

export type BOOL = number;

/**
 * Windows.Win32.Graphics.Direct3D11.D3D11_DEPTH_STENCIL_DESC (size: 40)
 */
export interface D3D11_DEPTH_STENCIL_DESC {
  /** Windows.Win32.Foundation.BOOL */
  DepthEnable: boolean;
  /** Windows.Win32.Graphics.Direct3D11.D3D11_DEPTH_WRITE_MASK */
  DepthWriteMask: D3D11_DEPTH_WRITE_MASK;
  /** Windows.Win32.Graphics.Direct3D11.D3D11_COMPARISON_FUNC */
  DepthFunc: D3D11_COMPARISON_FUNC;
  /** Windows.Win32.Foundation.BOOL */
  StencilEnable: boolean;
  /** u8 */
  StencilReadMask: number;
  /** u8 */
  StencilWriteMask: number;
  /** Windows.Win32.Graphics.Direct3D11.D3D11_DEPTH_STENCILOP_DESC */
  FrontFace: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Graphics.Direct3D11.D3D11_DEPTH_STENCILOP_DESC */
  BackFace: Uint8Array | Deno.PointerValue | null;
}

export const sizeofD3D11_DEPTH_STENCIL_DESC = 40;

export function allocD3D11_DEPTH_STENCIL_DESC(data?: Partial<D3D11_DEPTH_STENCIL_DESC>): Uint8Array {
  const buf = new Uint8Array(sizeofD3D11_DEPTH_STENCIL_DESC);
  const view = new DataView(buf.buffer);
  // 0x00: i32
  if (data?.DepthEnable !== undefined) view.setInt32(0, Number(data.DepthEnable), true);
  // 0x04: i32
  if (data?.DepthWriteMask !== undefined) view.setInt32(4, Number(data.DepthWriteMask), true);
  // 0x08: i32
  if (data?.DepthFunc !== undefined) view.setInt32(8, Number(data.DepthFunc), true);
  // 0x0c: i32
  if (data?.StencilEnable !== undefined) view.setInt32(12, Number(data.StencilEnable), true);
  // 0x10: u8
  if (data?.StencilReadMask !== undefined) view.setUint8(16, Number(data.StencilReadMask));
  // 0x11: u8
  if (data?.StencilWriteMask !== undefined) view.setUint8(17, Number(data.StencilWriteMask));
  // 0x12: pad6
  // 0x18: pointer
  if (data?.FrontFace !== undefined) view.setBigUint64(24, data.FrontFace === null ? 0n : BigInt(util.toPointer(data.FrontFace)), true);
  // 0x20: pointer
  if (data?.BackFace !== undefined) view.setBigUint64(32, data.BackFace === null ? 0n : BigInt(util.toPointer(data.BackFace)), true);
  return buf;
}

/**
 * Windows.Win32.Graphics.Direct3D11.D3D11_RENDER_TARGET_BLEND_DESC (size: 32)
 */
export interface D3D11_RENDER_TARGET_BLEND_DESC {
  /** Windows.Win32.Foundation.BOOL */
  BlendEnable: boolean;
  /** Windows.Win32.Graphics.Direct3D11.D3D11_BLEND */
  SrcBlend: D3D11_BLEND;
  /** Windows.Win32.Graphics.Direct3D11.D3D11_BLEND */
  DestBlend: D3D11_BLEND;
  /** Windows.Win32.Graphics.Direct3D11.D3D11_BLEND_OP */
  BlendOp: D3D11_BLEND_OP;
  /** Windows.Win32.Graphics.Direct3D11.D3D11_BLEND */
  SrcBlendAlpha: D3D11_BLEND;
  /** Windows.Win32.Graphics.Direct3D11.D3D11_BLEND */
  DestBlendAlpha: D3D11_BLEND;
  /** Windows.Win32.Graphics.Direct3D11.D3D11_BLEND_OP */
  BlendOpAlpha: D3D11_BLEND_OP;
  /** u8 */
  RenderTargetWriteMask: number;
}

export const sizeofD3D11_RENDER_TARGET_BLEND_DESC = 32;

export function allocD3D11_RENDER_TARGET_BLEND_DESC(data?: Partial<D3D11_RENDER_TARGET_BLEND_DESC>): Uint8Array {
  const buf = new Uint8Array(sizeofD3D11_RENDER_TARGET_BLEND_DESC);
  const view = new DataView(buf.buffer);
  // 0x00: i32
  if (data?.BlendEnable !== undefined) view.setInt32(0, Number(data.BlendEnable), true);
  // 0x04: i32
  if (data?.SrcBlend !== undefined) view.setInt32(4, Number(data.SrcBlend), true);
  // 0x08: i32
  if (data?.DestBlend !== undefined) view.setInt32(8, Number(data.DestBlend), true);
  // 0x0c: i32
  if (data?.BlendOp !== undefined) view.setInt32(12, Number(data.BlendOp), true);
  // 0x10: i32
  if (data?.SrcBlendAlpha !== undefined) view.setInt32(16, Number(data.SrcBlendAlpha), true);
  // 0x14: i32
  if (data?.DestBlendAlpha !== undefined) view.setInt32(20, Number(data.DestBlendAlpha), true);
  // 0x18: i32
  if (data?.BlendOpAlpha !== undefined) view.setInt32(24, Number(data.BlendOpAlpha), true);
  // 0x1c: u8
  if (data?.RenderTargetWriteMask !== undefined) view.setUint8(28, Number(data.RenderTargetWriteMask));
  // 0x1d: pad3
  return buf;
}

/**
 * Windows.Win32.Graphics.Direct3D11.D3D11_BLEND_DESC (size: 16)
 */
export interface D3D11_BLEND_DESC {
  /** Windows.Win32.Foundation.BOOL */
  AlphaToCoverageEnable: boolean;
  /** Windows.Win32.Foundation.BOOL */
  IndependentBlendEnable: boolean;
  /** array */
  RenderTarget: Deno.PointerValue | null;
}

export const sizeofD3D11_BLEND_DESC = 16;

export function allocD3D11_BLEND_DESC(data?: Partial<D3D11_BLEND_DESC>): Uint8Array {
  const buf = new Uint8Array(sizeofD3D11_BLEND_DESC);
  const view = new DataView(buf.buffer);
  // 0x00: i32
  if (data?.AlphaToCoverageEnable !== undefined) view.setInt32(0, Number(data.AlphaToCoverageEnable), true);
  // 0x04: i32
  if (data?.IndependentBlendEnable !== undefined) view.setInt32(4, Number(data.IndependentBlendEnable), true);
  // 0x08: pointer
  if (data?.RenderTarget !== undefined) view.setBigUint64(8, data.RenderTarget === null ? 0n : BigInt(util.toPointer(data.RenderTarget)), true);
  return buf;
}

/**
 * Windows.Win32.Graphics.Direct3D11.D3D11_RASTERIZER_DESC (size: 40)
 */
export interface D3D11_RASTERIZER_DESC {
  /** Windows.Win32.Graphics.Direct3D11.D3D11_FILL_MODE */
  FillMode: D3D11_FILL_MODE;
  /** Windows.Win32.Graphics.Direct3D11.D3D11_CULL_MODE */
  CullMode: D3D11_CULL_MODE;
  /** Windows.Win32.Foundation.BOOL */
  FrontCounterClockwise: boolean;
  /** i32 */
  DepthBias: number;
  /** f32 */
  DepthBiasClamp: number;
  /** f32 */
  SlopeScaledDepthBias: number;
  /** Windows.Win32.Foundation.BOOL */
  DepthClipEnable: boolean;
  /** Windows.Win32.Foundation.BOOL */
  ScissorEnable: boolean;
  /** Windows.Win32.Foundation.BOOL */
  MultisampleEnable: boolean;
  /** Windows.Win32.Foundation.BOOL */
  AntialiasedLineEnable: boolean;
}

export const sizeofD3D11_RASTERIZER_DESC = 40;

export function allocD3D11_RASTERIZER_DESC(data?: Partial<D3D11_RASTERIZER_DESC>): Uint8Array {
  const buf = new Uint8Array(sizeofD3D11_RASTERIZER_DESC);
  const view = new DataView(buf.buffer);
  // 0x00: i32
  if (data?.FillMode !== undefined) view.setInt32(0, Number(data.FillMode), true);
  // 0x04: i32
  if (data?.CullMode !== undefined) view.setInt32(4, Number(data.CullMode), true);
  // 0x08: i32
  if (data?.FrontCounterClockwise !== undefined) view.setInt32(8, Number(data.FrontCounterClockwise), true);
  // 0x0c: i32
  if (data?.DepthBias !== undefined) view.setInt32(12, Number(data.DepthBias), true);
  // 0x10: f32
  if (data?.DepthBiasClamp !== undefined) view.setFloat32(16, Number(data.DepthBiasClamp), true);
  // 0x14: f32
  if (data?.SlopeScaledDepthBias !== undefined) view.setFloat32(20, Number(data.SlopeScaledDepthBias), true);
  // 0x18: i32
  if (data?.DepthClipEnable !== undefined) view.setInt32(24, Number(data.DepthClipEnable), true);
  // 0x1c: i32
  if (data?.ScissorEnable !== undefined) view.setInt32(28, Number(data.ScissorEnable), true);
  // 0x20: i32
  if (data?.MultisampleEnable !== undefined) view.setInt32(32, Number(data.MultisampleEnable), true);
  // 0x24: i32
  if (data?.AntialiasedLineEnable !== undefined) view.setInt32(36, Number(data.AntialiasedLineEnable), true);
  return buf;
}

/**
 * Windows.Win32.Graphics.Direct3D11.D3D11_SUBRESOURCE_DATA (size: 16)
 */
export interface D3D11_SUBRESOURCE_DATA {
  /** ptr */
  pSysMem: Deno.PointerValue | Uint8Array | null;
  /** u32 */
  SysMemPitch: number;
  /** u32 */
  SysMemSlicePitch: number;
}

export const sizeofD3D11_SUBRESOURCE_DATA = 16;

export function allocD3D11_SUBRESOURCE_DATA(data?: Partial<D3D11_SUBRESOURCE_DATA>): Uint8Array {
  const buf = new Uint8Array(sizeofD3D11_SUBRESOURCE_DATA);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.pSysMem !== undefined) view.setBigUint64(0, data.pSysMem === null ? 0n : BigInt(util.toPointer(data.pSysMem)), true);
  // 0x08: u32
  if (data?.SysMemPitch !== undefined) view.setUint32(8, Number(data.SysMemPitch), true);
  // 0x0c: u32
  if (data?.SysMemSlicePitch !== undefined) view.setUint32(12, Number(data.SysMemSlicePitch), true);
  return buf;
}

/**
 * Windows.Win32.Graphics.Direct3D11.D3D11_MAPPED_SUBRESOURCE (size: 16)
 */
export interface D3D11_MAPPED_SUBRESOURCE {
  /** ptr */
  pData: Deno.PointerValue | Uint8Array | null;
  /** u32 */
  RowPitch: number;
  /** u32 */
  DepthPitch: number;
}

export const sizeofD3D11_MAPPED_SUBRESOURCE = 16;

export function allocD3D11_MAPPED_SUBRESOURCE(data?: Partial<D3D11_MAPPED_SUBRESOURCE>): Uint8Array {
  const buf = new Uint8Array(sizeofD3D11_MAPPED_SUBRESOURCE);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.pData !== undefined) view.setBigUint64(0, data.pData === null ? 0n : BigInt(util.toPointer(data.pData)), true);
  // 0x08: u32
  if (data?.RowPitch !== undefined) view.setUint32(8, Number(data.RowPitch), true);
  // 0x0c: u32
  if (data?.DepthPitch !== undefined) view.setUint32(12, Number(data.DepthPitch), true);
  return buf;
}

/**
 * Windows.Win32.Graphics.Direct3D11.D3D11_BUFFER_DESC (size: 24)
 */
export interface D3D11_BUFFER_DESC {
  /** u32 */
  ByteWidth: number;
  /** Windows.Win32.Graphics.Direct3D11.D3D11_USAGE */
  Usage: D3D11_USAGE;
  /** Windows.Win32.Graphics.Direct3D11.D3D11_BIND_FLAG */
  BindFlags: D3D11_BIND_FLAG;
  /** Windows.Win32.Graphics.Direct3D11.D3D11_CPU_ACCESS_FLAG */
  CPUAccessFlags: D3D11_CPU_ACCESS_FLAG;
  /** Windows.Win32.Graphics.Direct3D11.D3D11_RESOURCE_MISC_FLAG */
  MiscFlags: D3D11_RESOURCE_MISC_FLAG;
  /** u32 */
  StructureByteStride: number;
}

export const sizeofD3D11_BUFFER_DESC = 24;

export function allocD3D11_BUFFER_DESC(data?: Partial<D3D11_BUFFER_DESC>): Uint8Array {
  const buf = new Uint8Array(sizeofD3D11_BUFFER_DESC);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.ByteWidth !== undefined) view.setUint32(0, Number(data.ByteWidth), true);
  // 0x04: i32
  if (data?.Usage !== undefined) view.setInt32(4, Number(data.Usage), true);
  // 0x08: u32
  if (data?.BindFlags !== undefined) view.setUint32(8, Number(data.BindFlags), true);
  // 0x0c: u32
  if (data?.CPUAccessFlags !== undefined) view.setUint32(12, Number(data.CPUAccessFlags), true);
  // 0x10: u32
  if (data?.MiscFlags !== undefined) view.setUint32(16, Number(data.MiscFlags), true);
  // 0x14: u32
  if (data?.StructureByteStride !== undefined) view.setUint32(20, Number(data.StructureByteStride), true);
  return buf;
}

/**
 * Windows.Win32.Graphics.Direct3D11.D3D11_TEXTURE1D_DESC (size: 32)
 */
export interface D3D11_TEXTURE1D_DESC {
  /** u32 */
  Width: number;
  /** u32 */
  MipLevels: number;
  /** u32 */
  ArraySize: number;
  /** Windows.Win32.Graphics.Dxgi.Common.DXGI_FORMAT */
  Format: DXGI_FORMAT;
  /** Windows.Win32.Graphics.Direct3D11.D3D11_USAGE */
  Usage: D3D11_USAGE;
  /** Windows.Win32.Graphics.Direct3D11.D3D11_BIND_FLAG */
  BindFlags: D3D11_BIND_FLAG;
  /** Windows.Win32.Graphics.Direct3D11.D3D11_CPU_ACCESS_FLAG */
  CPUAccessFlags: D3D11_CPU_ACCESS_FLAG;
  /** Windows.Win32.Graphics.Direct3D11.D3D11_RESOURCE_MISC_FLAG */
  MiscFlags: D3D11_RESOURCE_MISC_FLAG;
}

export const sizeofD3D11_TEXTURE1D_DESC = 32;

export function allocD3D11_TEXTURE1D_DESC(data?: Partial<D3D11_TEXTURE1D_DESC>): Uint8Array {
  const buf = new Uint8Array(sizeofD3D11_TEXTURE1D_DESC);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.Width !== undefined) view.setUint32(0, Number(data.Width), true);
  // 0x04: u32
  if (data?.MipLevels !== undefined) view.setUint32(4, Number(data.MipLevels), true);
  // 0x08: u32
  if (data?.ArraySize !== undefined) view.setUint32(8, Number(data.ArraySize), true);
  // 0x0c: u32
  if (data?.Format !== undefined) view.setUint32(12, Number(data.Format), true);
  // 0x10: i32
  if (data?.Usage !== undefined) view.setInt32(16, Number(data.Usage), true);
  // 0x14: u32
  if (data?.BindFlags !== undefined) view.setUint32(20, Number(data.BindFlags), true);
  // 0x18: u32
  if (data?.CPUAccessFlags !== undefined) view.setUint32(24, Number(data.CPUAccessFlags), true);
  // 0x1c: u32
  if (data?.MiscFlags !== undefined) view.setUint32(28, Number(data.MiscFlags), true);
  return buf;
}

/**
 * Windows.Win32.Graphics.Dxgi.Common.DXGI_SAMPLE_DESC (size: 8)
 */
export interface DXGI_SAMPLE_DESC {
  /** u32 */
  Count: number;
  /** u32 */
  Quality: number;
}

export const sizeofDXGI_SAMPLE_DESC = 8;

export function allocDXGI_SAMPLE_DESC(data?: Partial<DXGI_SAMPLE_DESC>): Uint8Array {
  const buf = new Uint8Array(sizeofDXGI_SAMPLE_DESC);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.Count !== undefined) view.setUint32(0, Number(data.Count), true);
  // 0x04: u32
  if (data?.Quality !== undefined) view.setUint32(4, Number(data.Quality), true);
  return buf;
}

/**
 * Windows.Win32.Graphics.Direct3D11.D3D11_TEXTURE2D_DESC (size: 48)
 */
export interface D3D11_TEXTURE2D_DESC {
  /** u32 */
  Width: number;
  /** u32 */
  Height: number;
  /** u32 */
  MipLevels: number;
  /** u32 */
  ArraySize: number;
  /** Windows.Win32.Graphics.Dxgi.Common.DXGI_FORMAT */
  Format: DXGI_FORMAT;
  /** Windows.Win32.Graphics.Dxgi.Common.DXGI_SAMPLE_DESC */
  SampleDesc: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Graphics.Direct3D11.D3D11_USAGE */
  Usage: D3D11_USAGE;
  /** Windows.Win32.Graphics.Direct3D11.D3D11_BIND_FLAG */
  BindFlags: D3D11_BIND_FLAG;
  /** Windows.Win32.Graphics.Direct3D11.D3D11_CPU_ACCESS_FLAG */
  CPUAccessFlags: D3D11_CPU_ACCESS_FLAG;
  /** Windows.Win32.Graphics.Direct3D11.D3D11_RESOURCE_MISC_FLAG */
  MiscFlags: D3D11_RESOURCE_MISC_FLAG;
}

export const sizeofD3D11_TEXTURE2D_DESC = 48;

export function allocD3D11_TEXTURE2D_DESC(data?: Partial<D3D11_TEXTURE2D_DESC>): Uint8Array {
  const buf = new Uint8Array(sizeofD3D11_TEXTURE2D_DESC);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.Width !== undefined) view.setUint32(0, Number(data.Width), true);
  // 0x04: u32
  if (data?.Height !== undefined) view.setUint32(4, Number(data.Height), true);
  // 0x08: u32
  if (data?.MipLevels !== undefined) view.setUint32(8, Number(data.MipLevels), true);
  // 0x0c: u32
  if (data?.ArraySize !== undefined) view.setUint32(12, Number(data.ArraySize), true);
  // 0x10: u32
  if (data?.Format !== undefined) view.setUint32(16, Number(data.Format), true);
  // 0x14: pad4
  // 0x18: pointer
  if (data?.SampleDesc !== undefined) view.setBigUint64(24, data.SampleDesc === null ? 0n : BigInt(util.toPointer(data.SampleDesc)), true);
  // 0x20: i32
  if (data?.Usage !== undefined) view.setInt32(32, Number(data.Usage), true);
  // 0x24: u32
  if (data?.BindFlags !== undefined) view.setUint32(36, Number(data.BindFlags), true);
  // 0x28: u32
  if (data?.CPUAccessFlags !== undefined) view.setUint32(40, Number(data.CPUAccessFlags), true);
  // 0x2c: u32
  if (data?.MiscFlags !== undefined) view.setUint32(44, Number(data.MiscFlags), true);
  return buf;
}

/**
 * Windows.Win32.Graphics.Direct3D11.D3D11_TEXTURE3D_DESC (size: 40)
 */
export interface D3D11_TEXTURE3D_DESC {
  /** u32 */
  Width: number;
  /** u32 */
  Height: number;
  /** u32 */
  Depth: number;
  /** u32 */
  MipLevels: number;
  /** Windows.Win32.Graphics.Dxgi.Common.DXGI_FORMAT */
  Format: DXGI_FORMAT;
  /** Windows.Win32.Graphics.Direct3D11.D3D11_USAGE */
  Usage: D3D11_USAGE;
  /** Windows.Win32.Graphics.Direct3D11.D3D11_BIND_FLAG */
  BindFlags: D3D11_BIND_FLAG;
  /** Windows.Win32.Graphics.Direct3D11.D3D11_CPU_ACCESS_FLAG */
  CPUAccessFlags: D3D11_CPU_ACCESS_FLAG;
  /** Windows.Win32.Graphics.Direct3D11.D3D11_RESOURCE_MISC_FLAG */
  MiscFlags: D3D11_RESOURCE_MISC_FLAG;
}

export const sizeofD3D11_TEXTURE3D_DESC = 40;

export function allocD3D11_TEXTURE3D_DESC(data?: Partial<D3D11_TEXTURE3D_DESC>): Uint8Array {
  const buf = new Uint8Array(sizeofD3D11_TEXTURE3D_DESC);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.Width !== undefined) view.setUint32(0, Number(data.Width), true);
  // 0x04: u32
  if (data?.Height !== undefined) view.setUint32(4, Number(data.Height), true);
  // 0x08: u32
  if (data?.Depth !== undefined) view.setUint32(8, Number(data.Depth), true);
  // 0x0c: u32
  if (data?.MipLevels !== undefined) view.setUint32(12, Number(data.MipLevels), true);
  // 0x10: u32
  if (data?.Format !== undefined) view.setUint32(16, Number(data.Format), true);
  // 0x14: i32
  if (data?.Usage !== undefined) view.setInt32(20, Number(data.Usage), true);
  // 0x18: u32
  if (data?.BindFlags !== undefined) view.setUint32(24, Number(data.BindFlags), true);
  // 0x1c: u32
  if (data?.CPUAccessFlags !== undefined) view.setUint32(28, Number(data.CPUAccessFlags), true);
  // 0x20: u32
  if (data?.MiscFlags !== undefined) view.setUint32(32, Number(data.MiscFlags), true);
  // 0x24: pad4
  return buf;
}

export type PWSTR = Deno.PointerValue | Uint8Array | null;

/**
 * _Anonymous1_e__Union (size: 64)
 */
export interface _Anonymous1_e__Union {
  /** usize */
  Data0: Deno.PointerValue;
  /** Windows.Win32.Foundation.PWSTR */
  String: string | null;
  /** usize */
  u: Deno.PointerValue;
  /** ptr */
  psid: Deno.PointerValue | Uint8Array | null;
  /** ptr */
  pguid: Deno.PointerValue | Uint8Array | null;
  /** u32 */
  LogonId_LowPart: number;
  /** ptr */
  pObjectTypes: Deno.PointerValue | Uint8Array | null;
  /** ptr */
  pIpAddress: Deno.PointerValue | Uint8Array | null;
}

export const sizeof_Anonymous1_e__Union = 64;

export function alloc_Anonymous1_e__Union(data?: Partial<_Anonymous1_e__Union>): Uint8Array {
  const buf = new Uint8Array(sizeof_Anonymous1_e__Union);
  const view = new DataView(buf.buffer);
  // 0x00: usize
  if (data?.Data0 !== undefined) view.setBigUint64(0, BigInt(data.Data0), true);
  // 0x08: buffer
  if (data?.String !== undefined) {
    (buf as any)._f8 = util.pwstrToFfi(data.String);
    view.setBigUint64(8, (buf as any)._f8 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f8)), true);
  }
  // 0x10: usize
  if (data?.u !== undefined) view.setBigUint64(16, BigInt(data.u), true);
  // 0x18: pointer
  if (data?.psid !== undefined) view.setBigUint64(24, data.psid === null ? 0n : BigInt(util.toPointer(data.psid)), true);
  // 0x20: pointer
  if (data?.pguid !== undefined) view.setBigUint64(32, data.pguid === null ? 0n : BigInt(util.toPointer(data.pguid)), true);
  // 0x28: u32
  if (data?.LogonId_LowPart !== undefined) view.setUint32(40, Number(data.LogonId_LowPart), true);
  // 0x2c: pad4
  // 0x30: pointer
  if (data?.pObjectTypes !== undefined) view.setBigUint64(48, data.pObjectTypes === null ? 0n : BigInt(util.toPointer(data.pObjectTypes)), true);
  // 0x38: pointer
  if (data?.pIpAddress !== undefined) view.setBigUint64(56, data.pIpAddress === null ? 0n : BigInt(util.toPointer(data.pIpAddress)), true);
  return buf;
}

/**
 * _Anonymous2_e__Union (size: 16)
 */
export interface _Anonymous2_e__Union {
  /** usize */
  Data1: Deno.PointerValue;
  /** i32 */
  LogonId_HighPart: number;
}

export const sizeof_Anonymous2_e__Union = 16;

export function alloc_Anonymous2_e__Union(data?: Partial<_Anonymous2_e__Union>): Uint8Array {
  const buf = new Uint8Array(sizeof_Anonymous2_e__Union);
  const view = new DataView(buf.buffer);
  // 0x00: usize
  if (data?.Data1 !== undefined) view.setBigUint64(0, BigInt(data.Data1), true);
  // 0x08: i32
  if (data?.LogonId_HighPart !== undefined) view.setInt32(8, Number(data.LogonId_HighPart), true);
  // 0x0c: pad4
  return buf;
}

/**
 * Windows.Win32.Graphics.Direct3D11.D3D11_BUFFER_SRV (size: 16)
 */
export interface D3D11_BUFFER_SRV {
  /** _Anonymous1_e__Union */
  Anonymous1: Uint8Array | Deno.PointerValue | null;
  /** _Anonymous2_e__Union */
  Anonymous2: Uint8Array | Deno.PointerValue | null;
}

export const sizeofD3D11_BUFFER_SRV = 16;

export function allocD3D11_BUFFER_SRV(data?: Partial<D3D11_BUFFER_SRV>): Uint8Array {
  const buf = new Uint8Array(sizeofD3D11_BUFFER_SRV);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.Anonymous1 !== undefined) view.setBigUint64(0, data.Anonymous1 === null ? 0n : BigInt(util.toPointer(data.Anonymous1)), true);
  // 0x08: pointer
  if (data?.Anonymous2 !== undefined) view.setBigUint64(8, data.Anonymous2 === null ? 0n : BigInt(util.toPointer(data.Anonymous2)), true);
  return buf;
}

/**
 * Windows.Win32.Graphics.Direct3D11.D3D11_BUFFEREX_SRV (size: 16)
 */
export interface D3D11_BUFFEREX_SRV {
  /** u32 */
  FirstElement: number;
  /** u32 */
  NumElements: number;
  /** u32 */
  Flags: number;
}

export const sizeofD3D11_BUFFEREX_SRV = 16;

export function allocD3D11_BUFFEREX_SRV(data?: Partial<D3D11_BUFFEREX_SRV>): Uint8Array {
  const buf = new Uint8Array(sizeofD3D11_BUFFEREX_SRV);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.FirstElement !== undefined) view.setUint32(0, Number(data.FirstElement), true);
  // 0x04: u32
  if (data?.NumElements !== undefined) view.setUint32(4, Number(data.NumElements), true);
  // 0x08: u32
  if (data?.Flags !== undefined) view.setUint32(8, Number(data.Flags), true);
  // 0x0c: pad4
  return buf;
}

/**
 * Windows.Win32.Graphics.Direct3D11.D3D11_TEX1D_SRV (size: 8)
 */
export interface D3D11_TEX1D_SRV {
  /** u32 */
  MostDetailedMip: number;
  /** u32 */
  MipLevels: number;
}

export const sizeofD3D11_TEX1D_SRV = 8;

export function allocD3D11_TEX1D_SRV(data?: Partial<D3D11_TEX1D_SRV>): Uint8Array {
  const buf = new Uint8Array(sizeofD3D11_TEX1D_SRV);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.MostDetailedMip !== undefined) view.setUint32(0, Number(data.MostDetailedMip), true);
  // 0x04: u32
  if (data?.MipLevels !== undefined) view.setUint32(4, Number(data.MipLevels), true);
  return buf;
}

/**
 * Windows.Win32.Graphics.Direct3D11.D3D11_TEX1D_ARRAY_SRV (size: 16)
 */
export interface D3D11_TEX1D_ARRAY_SRV {
  /** u32 */
  MostDetailedMip: number;
  /** u32 */
  MipLevels: number;
  /** u32 */
  FirstArraySlice: number;
  /** u32 */
  ArraySize: number;
}

export const sizeofD3D11_TEX1D_ARRAY_SRV = 16;

export function allocD3D11_TEX1D_ARRAY_SRV(data?: Partial<D3D11_TEX1D_ARRAY_SRV>): Uint8Array {
  const buf = new Uint8Array(sizeofD3D11_TEX1D_ARRAY_SRV);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.MostDetailedMip !== undefined) view.setUint32(0, Number(data.MostDetailedMip), true);
  // 0x04: u32
  if (data?.MipLevels !== undefined) view.setUint32(4, Number(data.MipLevels), true);
  // 0x08: u32
  if (data?.FirstArraySlice !== undefined) view.setUint32(8, Number(data.FirstArraySlice), true);
  // 0x0c: u32
  if (data?.ArraySize !== undefined) view.setUint32(12, Number(data.ArraySize), true);
  return buf;
}

/**
 * Windows.Win32.Graphics.Direct3D11.D3D11_TEX2D_SRV (size: 8)
 */
export interface D3D11_TEX2D_SRV {
  /** u32 */
  MostDetailedMip: number;
  /** u32 */
  MipLevels: number;
}

export const sizeofD3D11_TEX2D_SRV = 8;

export function allocD3D11_TEX2D_SRV(data?: Partial<D3D11_TEX2D_SRV>): Uint8Array {
  const buf = new Uint8Array(sizeofD3D11_TEX2D_SRV);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.MostDetailedMip !== undefined) view.setUint32(0, Number(data.MostDetailedMip), true);
  // 0x04: u32
  if (data?.MipLevels !== undefined) view.setUint32(4, Number(data.MipLevels), true);
  return buf;
}

/**
 * Windows.Win32.Graphics.Direct3D11.D3D11_TEX2D_ARRAY_SRV (size: 16)
 */
export interface D3D11_TEX2D_ARRAY_SRV {
  /** u32 */
  MostDetailedMip: number;
  /** u32 */
  MipLevels: number;
  /** u32 */
  FirstArraySlice: number;
  /** u32 */
  ArraySize: number;
}

export const sizeofD3D11_TEX2D_ARRAY_SRV = 16;

export function allocD3D11_TEX2D_ARRAY_SRV(data?: Partial<D3D11_TEX2D_ARRAY_SRV>): Uint8Array {
  const buf = new Uint8Array(sizeofD3D11_TEX2D_ARRAY_SRV);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.MostDetailedMip !== undefined) view.setUint32(0, Number(data.MostDetailedMip), true);
  // 0x04: u32
  if (data?.MipLevels !== undefined) view.setUint32(4, Number(data.MipLevels), true);
  // 0x08: u32
  if (data?.FirstArraySlice !== undefined) view.setUint32(8, Number(data.FirstArraySlice), true);
  // 0x0c: u32
  if (data?.ArraySize !== undefined) view.setUint32(12, Number(data.ArraySize), true);
  return buf;
}

/**
 * Windows.Win32.Graphics.Direct3D11.D3D11_TEX3D_SRV (size: 8)
 */
export interface D3D11_TEX3D_SRV {
  /** u32 */
  MostDetailedMip: number;
  /** u32 */
  MipLevels: number;
}

export const sizeofD3D11_TEX3D_SRV = 8;

export function allocD3D11_TEX3D_SRV(data?: Partial<D3D11_TEX3D_SRV>): Uint8Array {
  const buf = new Uint8Array(sizeofD3D11_TEX3D_SRV);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.MostDetailedMip !== undefined) view.setUint32(0, Number(data.MostDetailedMip), true);
  // 0x04: u32
  if (data?.MipLevels !== undefined) view.setUint32(4, Number(data.MipLevels), true);
  return buf;
}

/**
 * Windows.Win32.Graphics.Direct3D11.D3D11_TEXCUBE_SRV (size: 8)
 */
export interface D3D11_TEXCUBE_SRV {
  /** u32 */
  MostDetailedMip: number;
  /** u32 */
  MipLevels: number;
}

export const sizeofD3D11_TEXCUBE_SRV = 8;

export function allocD3D11_TEXCUBE_SRV(data?: Partial<D3D11_TEXCUBE_SRV>): Uint8Array {
  const buf = new Uint8Array(sizeofD3D11_TEXCUBE_SRV);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.MostDetailedMip !== undefined) view.setUint32(0, Number(data.MostDetailedMip), true);
  // 0x04: u32
  if (data?.MipLevels !== undefined) view.setUint32(4, Number(data.MipLevels), true);
  return buf;
}

/**
 * Windows.Win32.Graphics.Direct3D11.D3D11_TEXCUBE_ARRAY_SRV (size: 16)
 */
export interface D3D11_TEXCUBE_ARRAY_SRV {
  /** u32 */
  MostDetailedMip: number;
  /** u32 */
  MipLevels: number;
  /** u32 */
  First2DArrayFace: number;
  /** u32 */
  NumCubes: number;
}

export const sizeofD3D11_TEXCUBE_ARRAY_SRV = 16;

export function allocD3D11_TEXCUBE_ARRAY_SRV(data?: Partial<D3D11_TEXCUBE_ARRAY_SRV>): Uint8Array {
  const buf = new Uint8Array(sizeofD3D11_TEXCUBE_ARRAY_SRV);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.MostDetailedMip !== undefined) view.setUint32(0, Number(data.MostDetailedMip), true);
  // 0x04: u32
  if (data?.MipLevels !== undefined) view.setUint32(4, Number(data.MipLevels), true);
  // 0x08: u32
  if (data?.First2DArrayFace !== undefined) view.setUint32(8, Number(data.First2DArrayFace), true);
  // 0x0c: u32
  if (data?.NumCubes !== undefined) view.setUint32(12, Number(data.NumCubes), true);
  return buf;
}

/**
 * Windows.Win32.Graphics.Direct3D11.D3D11_TEX2DMS_SRV (size: 8)
 */
export interface D3D11_TEX2DMS_SRV {
  /** u32 */
  UnusedField_NothingToDefine: number;
}

export const sizeofD3D11_TEX2DMS_SRV = 8;

export function allocD3D11_TEX2DMS_SRV(data?: Partial<D3D11_TEX2DMS_SRV>): Uint8Array {
  const buf = new Uint8Array(sizeofD3D11_TEX2DMS_SRV);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.UnusedField_NothingToDefine !== undefined) view.setUint32(0, Number(data.UnusedField_NothingToDefine), true);
  // 0x04: pad4
  return buf;
}

/**
 * Windows.Win32.Graphics.Direct3D11.D3D11_TEX2DMS_ARRAY_SRV (size: 8)
 */
export interface D3D11_TEX2DMS_ARRAY_SRV {
  /** u32 */
  FirstArraySlice: number;
  /** u32 */
  ArraySize: number;
}

export const sizeofD3D11_TEX2DMS_ARRAY_SRV = 8;

export function allocD3D11_TEX2DMS_ARRAY_SRV(data?: Partial<D3D11_TEX2DMS_ARRAY_SRV>): Uint8Array {
  const buf = new Uint8Array(sizeofD3D11_TEX2DMS_ARRAY_SRV);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.FirstArraySlice !== undefined) view.setUint32(0, Number(data.FirstArraySlice), true);
  // 0x04: u32
  if (data?.ArraySize !== undefined) view.setUint32(4, Number(data.ArraySize), true);
  return buf;
}

/**
 * _Anonymous_e__Struct (size: 16)
 */
export interface _Anonymous_e__Struct {
  /** u64 */
  Alignment: Deno.PointerValue;
  /** u64 */
  Region: Deno.PointerValue;
}

export const sizeof_Anonymous_e__Struct = 16;

export function alloc_Anonymous_e__Struct(data?: Partial<_Anonymous_e__Struct>): Uint8Array {
  const buf = new Uint8Array(sizeof_Anonymous_e__Struct);
  const view = new DataView(buf.buffer);
  // 0x00: u64
  if (data?.Alignment !== undefined) view.setBigUint64(0, BigInt(data.Alignment), true);
  // 0x08: u64
  if (data?.Region !== undefined) view.setBigUint64(8, BigInt(data.Region), true);
  return buf;
}

/**
 * _Anonymous_e__Union (size: 16)
 */
export interface _Anonymous_e__Union {
  /** _Anonymous_e__Struct */
  Anonymous: Uint8Array | Deno.PointerValue | null;
  /** array */
  X: Deno.PointerValue | null;
}

export const sizeof_Anonymous_e__Union = 16;

export function alloc_Anonymous_e__Union(data?: Partial<_Anonymous_e__Union>): Uint8Array {
  const buf = new Uint8Array(sizeof_Anonymous_e__Union);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.Anonymous !== undefined) view.setBigUint64(0, data.Anonymous === null ? 0n : BigInt(util.toPointer(data.Anonymous)), true);
  // 0x08: pointer
  if (data?.X !== undefined) view.setBigUint64(8, data.X === null ? 0n : BigInt(util.toPointer(data.X)), true);
  return buf;
}

/**
 * Windows.Win32.Graphics.Direct3D11.D3D11_SHADER_RESOURCE_VIEW_DESC (size: 16)
 */
export interface D3D11_SHADER_RESOURCE_VIEW_DESC {
  /** Windows.Win32.Graphics.Dxgi.Common.DXGI_FORMAT */
  Format: DXGI_FORMAT;
  /** Windows.Win32.Graphics.Direct3D.D3D_SRV_DIMENSION */
  ViewDimension: D3D_SRV_DIMENSION;
  /** _Anonymous_e__Union */
  Anonymous: Uint8Array | Deno.PointerValue | null;
}

export const sizeofD3D11_SHADER_RESOURCE_VIEW_DESC = 16;

export function allocD3D11_SHADER_RESOURCE_VIEW_DESC(data?: Partial<D3D11_SHADER_RESOURCE_VIEW_DESC>): Uint8Array {
  const buf = new Uint8Array(sizeofD3D11_SHADER_RESOURCE_VIEW_DESC);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.Format !== undefined) view.setUint32(0, Number(data.Format), true);
  // 0x04: i32
  if (data?.ViewDimension !== undefined) view.setInt32(4, Number(data.ViewDimension), true);
  // 0x08: pointer
  if (data?.Anonymous !== undefined) view.setBigUint64(8, data.Anonymous === null ? 0n : BigInt(util.toPointer(data.Anonymous)), true);
  return buf;
}

/**
 * Windows.Win32.Graphics.Direct3D11.D3D11_BUFFER_RTV (size: 16)
 */
export interface D3D11_BUFFER_RTV {
  /** _Anonymous1_e__Union */
  Anonymous1: Uint8Array | Deno.PointerValue | null;
  /** _Anonymous2_e__Union */
  Anonymous2: Uint8Array | Deno.PointerValue | null;
}

export const sizeofD3D11_BUFFER_RTV = 16;

export function allocD3D11_BUFFER_RTV(data?: Partial<D3D11_BUFFER_RTV>): Uint8Array {
  const buf = new Uint8Array(sizeofD3D11_BUFFER_RTV);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.Anonymous1 !== undefined) view.setBigUint64(0, data.Anonymous1 === null ? 0n : BigInt(util.toPointer(data.Anonymous1)), true);
  // 0x08: pointer
  if (data?.Anonymous2 !== undefined) view.setBigUint64(8, data.Anonymous2 === null ? 0n : BigInt(util.toPointer(data.Anonymous2)), true);
  return buf;
}

/**
 * Windows.Win32.Graphics.Direct3D11.D3D11_TEX1D_RTV (size: 8)
 */
export interface D3D11_TEX1D_RTV {
  /** u32 */
  MipSlice: number;
}

export const sizeofD3D11_TEX1D_RTV = 8;

export function allocD3D11_TEX1D_RTV(data?: Partial<D3D11_TEX1D_RTV>): Uint8Array {
  const buf = new Uint8Array(sizeofD3D11_TEX1D_RTV);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.MipSlice !== undefined) view.setUint32(0, Number(data.MipSlice), true);
  // 0x04: pad4
  return buf;
}

/**
 * Windows.Win32.Graphics.Direct3D11.D3D11_TEX1D_ARRAY_RTV (size: 16)
 */
export interface D3D11_TEX1D_ARRAY_RTV {
  /** u32 */
  MipSlice: number;
  /** u32 */
  FirstArraySlice: number;
  /** u32 */
  ArraySize: number;
}

export const sizeofD3D11_TEX1D_ARRAY_RTV = 16;

export function allocD3D11_TEX1D_ARRAY_RTV(data?: Partial<D3D11_TEX1D_ARRAY_RTV>): Uint8Array {
  const buf = new Uint8Array(sizeofD3D11_TEX1D_ARRAY_RTV);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.MipSlice !== undefined) view.setUint32(0, Number(data.MipSlice), true);
  // 0x04: u32
  if (data?.FirstArraySlice !== undefined) view.setUint32(4, Number(data.FirstArraySlice), true);
  // 0x08: u32
  if (data?.ArraySize !== undefined) view.setUint32(8, Number(data.ArraySize), true);
  // 0x0c: pad4
  return buf;
}

/**
 * Windows.Win32.Graphics.Direct3D11.D3D11_TEX2D_RTV (size: 8)
 */
export interface D3D11_TEX2D_RTV {
  /** u32 */
  MipSlice: number;
}

export const sizeofD3D11_TEX2D_RTV = 8;

export function allocD3D11_TEX2D_RTV(data?: Partial<D3D11_TEX2D_RTV>): Uint8Array {
  const buf = new Uint8Array(sizeofD3D11_TEX2D_RTV);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.MipSlice !== undefined) view.setUint32(0, Number(data.MipSlice), true);
  // 0x04: pad4
  return buf;
}

/**
 * Windows.Win32.Graphics.Direct3D11.D3D11_TEX2DMS_RTV (size: 8)
 */
export interface D3D11_TEX2DMS_RTV {
  /** u32 */
  UnusedField_NothingToDefine: number;
}

export const sizeofD3D11_TEX2DMS_RTV = 8;

export function allocD3D11_TEX2DMS_RTV(data?: Partial<D3D11_TEX2DMS_RTV>): Uint8Array {
  const buf = new Uint8Array(sizeofD3D11_TEX2DMS_RTV);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.UnusedField_NothingToDefine !== undefined) view.setUint32(0, Number(data.UnusedField_NothingToDefine), true);
  // 0x04: pad4
  return buf;
}

/**
 * Windows.Win32.Graphics.Direct3D11.D3D11_TEX2D_ARRAY_RTV (size: 16)
 */
export interface D3D11_TEX2D_ARRAY_RTV {
  /** u32 */
  MipSlice: number;
  /** u32 */
  FirstArraySlice: number;
  /** u32 */
  ArraySize: number;
}

export const sizeofD3D11_TEX2D_ARRAY_RTV = 16;

export function allocD3D11_TEX2D_ARRAY_RTV(data?: Partial<D3D11_TEX2D_ARRAY_RTV>): Uint8Array {
  const buf = new Uint8Array(sizeofD3D11_TEX2D_ARRAY_RTV);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.MipSlice !== undefined) view.setUint32(0, Number(data.MipSlice), true);
  // 0x04: u32
  if (data?.FirstArraySlice !== undefined) view.setUint32(4, Number(data.FirstArraySlice), true);
  // 0x08: u32
  if (data?.ArraySize !== undefined) view.setUint32(8, Number(data.ArraySize), true);
  // 0x0c: pad4
  return buf;
}

/**
 * Windows.Win32.Graphics.Direct3D11.D3D11_TEX2DMS_ARRAY_RTV (size: 8)
 */
export interface D3D11_TEX2DMS_ARRAY_RTV {
  /** u32 */
  FirstArraySlice: number;
  /** u32 */
  ArraySize: number;
}

export const sizeofD3D11_TEX2DMS_ARRAY_RTV = 8;

export function allocD3D11_TEX2DMS_ARRAY_RTV(data?: Partial<D3D11_TEX2DMS_ARRAY_RTV>): Uint8Array {
  const buf = new Uint8Array(sizeofD3D11_TEX2DMS_ARRAY_RTV);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.FirstArraySlice !== undefined) view.setUint32(0, Number(data.FirstArraySlice), true);
  // 0x04: u32
  if (data?.ArraySize !== undefined) view.setUint32(4, Number(data.ArraySize), true);
  return buf;
}

/**
 * Windows.Win32.Graphics.Direct3D11.D3D11_TEX3D_RTV (size: 16)
 */
export interface D3D11_TEX3D_RTV {
  /** u32 */
  MipSlice: number;
  /** u32 */
  FirstWSlice: number;
  /** u32 */
  WSize: number;
}

export const sizeofD3D11_TEX3D_RTV = 16;

export function allocD3D11_TEX3D_RTV(data?: Partial<D3D11_TEX3D_RTV>): Uint8Array {
  const buf = new Uint8Array(sizeofD3D11_TEX3D_RTV);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.MipSlice !== undefined) view.setUint32(0, Number(data.MipSlice), true);
  // 0x04: u32
  if (data?.FirstWSlice !== undefined) view.setUint32(4, Number(data.FirstWSlice), true);
  // 0x08: u32
  if (data?.WSize !== undefined) view.setUint32(8, Number(data.WSize), true);
  // 0x0c: pad4
  return buf;
}

/**
 * Windows.Win32.Graphics.Direct3D11.D3D11_RENDER_TARGET_VIEW_DESC (size: 16)
 */
export interface D3D11_RENDER_TARGET_VIEW_DESC {
  /** Windows.Win32.Graphics.Dxgi.Common.DXGI_FORMAT */
  Format: DXGI_FORMAT;
  /** Windows.Win32.Graphics.Direct3D11.D3D11_RTV_DIMENSION */
  ViewDimension: D3D11_RTV_DIMENSION;
  /** _Anonymous_e__Union */
  Anonymous: Uint8Array | Deno.PointerValue | null;
}

export const sizeofD3D11_RENDER_TARGET_VIEW_DESC = 16;

export function allocD3D11_RENDER_TARGET_VIEW_DESC(data?: Partial<D3D11_RENDER_TARGET_VIEW_DESC>): Uint8Array {
  const buf = new Uint8Array(sizeofD3D11_RENDER_TARGET_VIEW_DESC);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.Format !== undefined) view.setUint32(0, Number(data.Format), true);
  // 0x04: i32
  if (data?.ViewDimension !== undefined) view.setInt32(4, Number(data.ViewDimension), true);
  // 0x08: pointer
  if (data?.Anonymous !== undefined) view.setBigUint64(8, data.Anonymous === null ? 0n : BigInt(util.toPointer(data.Anonymous)), true);
  return buf;
}

/**
 * Windows.Win32.Graphics.Direct3D11.D3D11_TEX1D_DSV (size: 8)
 */
export interface D3D11_TEX1D_DSV {
  /** u32 */
  MipSlice: number;
}

export const sizeofD3D11_TEX1D_DSV = 8;

export function allocD3D11_TEX1D_DSV(data?: Partial<D3D11_TEX1D_DSV>): Uint8Array {
  const buf = new Uint8Array(sizeofD3D11_TEX1D_DSV);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.MipSlice !== undefined) view.setUint32(0, Number(data.MipSlice), true);
  // 0x04: pad4
  return buf;
}

/**
 * Windows.Win32.Graphics.Direct3D11.D3D11_TEX1D_ARRAY_DSV (size: 16)
 */
export interface D3D11_TEX1D_ARRAY_DSV {
  /** u32 */
  MipSlice: number;
  /** u32 */
  FirstArraySlice: number;
  /** u32 */
  ArraySize: number;
}

export const sizeofD3D11_TEX1D_ARRAY_DSV = 16;

export function allocD3D11_TEX1D_ARRAY_DSV(data?: Partial<D3D11_TEX1D_ARRAY_DSV>): Uint8Array {
  const buf = new Uint8Array(sizeofD3D11_TEX1D_ARRAY_DSV);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.MipSlice !== undefined) view.setUint32(0, Number(data.MipSlice), true);
  // 0x04: u32
  if (data?.FirstArraySlice !== undefined) view.setUint32(4, Number(data.FirstArraySlice), true);
  // 0x08: u32
  if (data?.ArraySize !== undefined) view.setUint32(8, Number(data.ArraySize), true);
  // 0x0c: pad4
  return buf;
}

/**
 * Windows.Win32.Graphics.Direct3D11.D3D11_TEX2D_DSV (size: 8)
 */
export interface D3D11_TEX2D_DSV {
  /** u32 */
  MipSlice: number;
}

export const sizeofD3D11_TEX2D_DSV = 8;

export function allocD3D11_TEX2D_DSV(data?: Partial<D3D11_TEX2D_DSV>): Uint8Array {
  const buf = new Uint8Array(sizeofD3D11_TEX2D_DSV);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.MipSlice !== undefined) view.setUint32(0, Number(data.MipSlice), true);
  // 0x04: pad4
  return buf;
}

/**
 * Windows.Win32.Graphics.Direct3D11.D3D11_TEX2D_ARRAY_DSV (size: 16)
 */
export interface D3D11_TEX2D_ARRAY_DSV {
  /** u32 */
  MipSlice: number;
  /** u32 */
  FirstArraySlice: number;
  /** u32 */
  ArraySize: number;
}

export const sizeofD3D11_TEX2D_ARRAY_DSV = 16;

export function allocD3D11_TEX2D_ARRAY_DSV(data?: Partial<D3D11_TEX2D_ARRAY_DSV>): Uint8Array {
  const buf = new Uint8Array(sizeofD3D11_TEX2D_ARRAY_DSV);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.MipSlice !== undefined) view.setUint32(0, Number(data.MipSlice), true);
  // 0x04: u32
  if (data?.FirstArraySlice !== undefined) view.setUint32(4, Number(data.FirstArraySlice), true);
  // 0x08: u32
  if (data?.ArraySize !== undefined) view.setUint32(8, Number(data.ArraySize), true);
  // 0x0c: pad4
  return buf;
}

/**
 * Windows.Win32.Graphics.Direct3D11.D3D11_TEX2DMS_DSV (size: 8)
 */
export interface D3D11_TEX2DMS_DSV {
  /** u32 */
  UnusedField_NothingToDefine: number;
}

export const sizeofD3D11_TEX2DMS_DSV = 8;

export function allocD3D11_TEX2DMS_DSV(data?: Partial<D3D11_TEX2DMS_DSV>): Uint8Array {
  const buf = new Uint8Array(sizeofD3D11_TEX2DMS_DSV);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.UnusedField_NothingToDefine !== undefined) view.setUint32(0, Number(data.UnusedField_NothingToDefine), true);
  // 0x04: pad4
  return buf;
}

/**
 * Windows.Win32.Graphics.Direct3D11.D3D11_TEX2DMS_ARRAY_DSV (size: 8)
 */
export interface D3D11_TEX2DMS_ARRAY_DSV {
  /** u32 */
  FirstArraySlice: number;
  /** u32 */
  ArraySize: number;
}

export const sizeofD3D11_TEX2DMS_ARRAY_DSV = 8;

export function allocD3D11_TEX2DMS_ARRAY_DSV(data?: Partial<D3D11_TEX2DMS_ARRAY_DSV>): Uint8Array {
  const buf = new Uint8Array(sizeofD3D11_TEX2DMS_ARRAY_DSV);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.FirstArraySlice !== undefined) view.setUint32(0, Number(data.FirstArraySlice), true);
  // 0x04: u32
  if (data?.ArraySize !== undefined) view.setUint32(4, Number(data.ArraySize), true);
  return buf;
}

/**
 * Windows.Win32.Graphics.Direct3D11.D3D11_DEPTH_STENCIL_VIEW_DESC (size: 24)
 */
export interface D3D11_DEPTH_STENCIL_VIEW_DESC {
  /** Windows.Win32.Graphics.Dxgi.Common.DXGI_FORMAT */
  Format: DXGI_FORMAT;
  /** Windows.Win32.Graphics.Direct3D11.D3D11_DSV_DIMENSION */
  ViewDimension: D3D11_DSV_DIMENSION;
  /** u32 */
  Flags: number;
  /** _Anonymous_e__Union */
  Anonymous: Uint8Array | Deno.PointerValue | null;
}

export const sizeofD3D11_DEPTH_STENCIL_VIEW_DESC = 24;

export function allocD3D11_DEPTH_STENCIL_VIEW_DESC(data?: Partial<D3D11_DEPTH_STENCIL_VIEW_DESC>): Uint8Array {
  const buf = new Uint8Array(sizeofD3D11_DEPTH_STENCIL_VIEW_DESC);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.Format !== undefined) view.setUint32(0, Number(data.Format), true);
  // 0x04: i32
  if (data?.ViewDimension !== undefined) view.setInt32(4, Number(data.ViewDimension), true);
  // 0x08: u32
  if (data?.Flags !== undefined) view.setUint32(8, Number(data.Flags), true);
  // 0x0c: pad4
  // 0x10: pointer
  if (data?.Anonymous !== undefined) view.setBigUint64(16, data.Anonymous === null ? 0n : BigInt(util.toPointer(data.Anonymous)), true);
  return buf;
}

/**
 * Windows.Win32.Graphics.Direct3D11.D3D11_BUFFER_UAV (size: 16)
 */
export interface D3D11_BUFFER_UAV {
  /** u32 */
  FirstElement: number;
  /** u32 */
  NumElements: number;
  /** u32 */
  Flags: number;
}

export const sizeofD3D11_BUFFER_UAV = 16;

export function allocD3D11_BUFFER_UAV(data?: Partial<D3D11_BUFFER_UAV>): Uint8Array {
  const buf = new Uint8Array(sizeofD3D11_BUFFER_UAV);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.FirstElement !== undefined) view.setUint32(0, Number(data.FirstElement), true);
  // 0x04: u32
  if (data?.NumElements !== undefined) view.setUint32(4, Number(data.NumElements), true);
  // 0x08: u32
  if (data?.Flags !== undefined) view.setUint32(8, Number(data.Flags), true);
  // 0x0c: pad4
  return buf;
}

/**
 * Windows.Win32.Graphics.Direct3D11.D3D11_TEX1D_UAV (size: 8)
 */
export interface D3D11_TEX1D_UAV {
  /** u32 */
  MipSlice: number;
}

export const sizeofD3D11_TEX1D_UAV = 8;

export function allocD3D11_TEX1D_UAV(data?: Partial<D3D11_TEX1D_UAV>): Uint8Array {
  const buf = new Uint8Array(sizeofD3D11_TEX1D_UAV);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.MipSlice !== undefined) view.setUint32(0, Number(data.MipSlice), true);
  // 0x04: pad4
  return buf;
}

/**
 * Windows.Win32.Graphics.Direct3D11.D3D11_TEX1D_ARRAY_UAV (size: 16)
 */
export interface D3D11_TEX1D_ARRAY_UAV {
  /** u32 */
  MipSlice: number;
  /** u32 */
  FirstArraySlice: number;
  /** u32 */
  ArraySize: number;
}

export const sizeofD3D11_TEX1D_ARRAY_UAV = 16;

export function allocD3D11_TEX1D_ARRAY_UAV(data?: Partial<D3D11_TEX1D_ARRAY_UAV>): Uint8Array {
  const buf = new Uint8Array(sizeofD3D11_TEX1D_ARRAY_UAV);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.MipSlice !== undefined) view.setUint32(0, Number(data.MipSlice), true);
  // 0x04: u32
  if (data?.FirstArraySlice !== undefined) view.setUint32(4, Number(data.FirstArraySlice), true);
  // 0x08: u32
  if (data?.ArraySize !== undefined) view.setUint32(8, Number(data.ArraySize), true);
  // 0x0c: pad4
  return buf;
}

/**
 * Windows.Win32.Graphics.Direct3D11.D3D11_TEX2D_UAV (size: 8)
 */
export interface D3D11_TEX2D_UAV {
  /** u32 */
  MipSlice: number;
}

export const sizeofD3D11_TEX2D_UAV = 8;

export function allocD3D11_TEX2D_UAV(data?: Partial<D3D11_TEX2D_UAV>): Uint8Array {
  const buf = new Uint8Array(sizeofD3D11_TEX2D_UAV);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.MipSlice !== undefined) view.setUint32(0, Number(data.MipSlice), true);
  // 0x04: pad4
  return buf;
}

/**
 * Windows.Win32.Graphics.Direct3D11.D3D11_TEX2D_ARRAY_UAV (size: 16)
 */
export interface D3D11_TEX2D_ARRAY_UAV {
  /** u32 */
  MipSlice: number;
  /** u32 */
  FirstArraySlice: number;
  /** u32 */
  ArraySize: number;
}

export const sizeofD3D11_TEX2D_ARRAY_UAV = 16;

export function allocD3D11_TEX2D_ARRAY_UAV(data?: Partial<D3D11_TEX2D_ARRAY_UAV>): Uint8Array {
  const buf = new Uint8Array(sizeofD3D11_TEX2D_ARRAY_UAV);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.MipSlice !== undefined) view.setUint32(0, Number(data.MipSlice), true);
  // 0x04: u32
  if (data?.FirstArraySlice !== undefined) view.setUint32(4, Number(data.FirstArraySlice), true);
  // 0x08: u32
  if (data?.ArraySize !== undefined) view.setUint32(8, Number(data.ArraySize), true);
  // 0x0c: pad4
  return buf;
}

/**
 * Windows.Win32.Graphics.Direct3D11.D3D11_TEX3D_UAV (size: 16)
 */
export interface D3D11_TEX3D_UAV {
  /** u32 */
  MipSlice: number;
  /** u32 */
  FirstWSlice: number;
  /** u32 */
  WSize: number;
}

export const sizeofD3D11_TEX3D_UAV = 16;

export function allocD3D11_TEX3D_UAV(data?: Partial<D3D11_TEX3D_UAV>): Uint8Array {
  const buf = new Uint8Array(sizeofD3D11_TEX3D_UAV);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.MipSlice !== undefined) view.setUint32(0, Number(data.MipSlice), true);
  // 0x04: u32
  if (data?.FirstWSlice !== undefined) view.setUint32(4, Number(data.FirstWSlice), true);
  // 0x08: u32
  if (data?.WSize !== undefined) view.setUint32(8, Number(data.WSize), true);
  // 0x0c: pad4
  return buf;
}

/**
 * Windows.Win32.Graphics.Direct3D11.D3D11_UNORDERED_ACCESS_VIEW_DESC (size: 16)
 */
export interface D3D11_UNORDERED_ACCESS_VIEW_DESC {
  /** Windows.Win32.Graphics.Dxgi.Common.DXGI_FORMAT */
  Format: DXGI_FORMAT;
  /** Windows.Win32.Graphics.Direct3D11.D3D11_UAV_DIMENSION */
  ViewDimension: D3D11_UAV_DIMENSION;
  /** _Anonymous_e__Union */
  Anonymous: Uint8Array | Deno.PointerValue | null;
}

export const sizeofD3D11_UNORDERED_ACCESS_VIEW_DESC = 16;

export function allocD3D11_UNORDERED_ACCESS_VIEW_DESC(data?: Partial<D3D11_UNORDERED_ACCESS_VIEW_DESC>): Uint8Array {
  const buf = new Uint8Array(sizeofD3D11_UNORDERED_ACCESS_VIEW_DESC);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.Format !== undefined) view.setUint32(0, Number(data.Format), true);
  // 0x04: i32
  if (data?.ViewDimension !== undefined) view.setInt32(4, Number(data.ViewDimension), true);
  // 0x08: pointer
  if (data?.Anonymous !== undefined) view.setBigUint64(8, data.Anonymous === null ? 0n : BigInt(util.toPointer(data.Anonymous)), true);
  return buf;
}

/**
 * Windows.Win32.Graphics.Direct3D11.D3D11_SAMPLER_DESC (size: 48)
 */
export interface D3D11_SAMPLER_DESC {
  /** Windows.Win32.Graphics.Direct3D11.D3D11_FILTER */
  Filter: D3D11_FILTER;
  /** Windows.Win32.Graphics.Direct3D11.D3D11_TEXTURE_ADDRESS_MODE */
  AddressU: D3D11_TEXTURE_ADDRESS_MODE;
  /** Windows.Win32.Graphics.Direct3D11.D3D11_TEXTURE_ADDRESS_MODE */
  AddressV: D3D11_TEXTURE_ADDRESS_MODE;
  /** Windows.Win32.Graphics.Direct3D11.D3D11_TEXTURE_ADDRESS_MODE */
  AddressW: D3D11_TEXTURE_ADDRESS_MODE;
  /** f32 */
  MipLODBias: number;
  /** u32 */
  MaxAnisotropy: number;
  /** Windows.Win32.Graphics.Direct3D11.D3D11_COMPARISON_FUNC */
  ComparisonFunc: D3D11_COMPARISON_FUNC;
  /** array */
  BorderColor: Deno.PointerValue | null;
  /** f32 */
  MinLOD: number;
  /** f32 */
  MaxLOD: number;
}

export const sizeofD3D11_SAMPLER_DESC = 48;

export function allocD3D11_SAMPLER_DESC(data?: Partial<D3D11_SAMPLER_DESC>): Uint8Array {
  const buf = new Uint8Array(sizeofD3D11_SAMPLER_DESC);
  const view = new DataView(buf.buffer);
  // 0x00: i32
  if (data?.Filter !== undefined) view.setInt32(0, Number(data.Filter), true);
  // 0x04: i32
  if (data?.AddressU !== undefined) view.setInt32(4, Number(data.AddressU), true);
  // 0x08: i32
  if (data?.AddressV !== undefined) view.setInt32(8, Number(data.AddressV), true);
  // 0x0c: i32
  if (data?.AddressW !== undefined) view.setInt32(12, Number(data.AddressW), true);
  // 0x10: f32
  if (data?.MipLODBias !== undefined) view.setFloat32(16, Number(data.MipLODBias), true);
  // 0x14: u32
  if (data?.MaxAnisotropy !== undefined) view.setUint32(20, Number(data.MaxAnisotropy), true);
  // 0x18: i32
  if (data?.ComparisonFunc !== undefined) view.setInt32(24, Number(data.ComparisonFunc), true);
  // 0x1c: pad4
  // 0x20: pointer
  if (data?.BorderColor !== undefined) view.setBigUint64(32, data.BorderColor === null ? 0n : BigInt(util.toPointer(data.BorderColor)), true);
  // 0x28: f32
  if (data?.MinLOD !== undefined) view.setFloat32(40, Number(data.MinLOD), true);
  // 0x2c: f32
  if (data?.MaxLOD !== undefined) view.setFloat32(44, Number(data.MaxLOD), true);
  return buf;
}

/**
 * Windows.Win32.Graphics.Direct3D11.D3D11_QUERY_DESC (size: 8)
 */
export interface D3D11_QUERY_DESC {
  /** Windows.Win32.Graphics.Direct3D11.D3D11_QUERY */
  Query: D3D11_QUERY;
  /** u32 */
  MiscFlags: number;
}

export const sizeofD3D11_QUERY_DESC = 8;

export function allocD3D11_QUERY_DESC(data?: Partial<D3D11_QUERY_DESC>): Uint8Array {
  const buf = new Uint8Array(sizeofD3D11_QUERY_DESC);
  const view = new DataView(buf.buffer);
  // 0x00: i32
  if (data?.Query !== undefined) view.setInt32(0, Number(data.Query), true);
  // 0x04: u32
  if (data?.MiscFlags !== undefined) view.setUint32(4, Number(data.MiscFlags), true);
  return buf;
}

/**
 * Windows.Win32.Graphics.Direct3D11.D3D11_QUERY_DATA_TIMESTAMP_DISJOINT (size: 16)
 */
export interface D3D11_QUERY_DATA_TIMESTAMP_DISJOINT {
  /** u64 */
  Frequency: Deno.PointerValue;
  /** Windows.Win32.Foundation.BOOL */
  Disjoint: boolean;
}

export const sizeofD3D11_QUERY_DATA_TIMESTAMP_DISJOINT = 16;

export function allocD3D11_QUERY_DATA_TIMESTAMP_DISJOINT(data?: Partial<D3D11_QUERY_DATA_TIMESTAMP_DISJOINT>): Uint8Array {
  const buf = new Uint8Array(sizeofD3D11_QUERY_DATA_TIMESTAMP_DISJOINT);
  const view = new DataView(buf.buffer);
  // 0x00: u64
  if (data?.Frequency !== undefined) view.setBigUint64(0, BigInt(data.Frequency), true);
  // 0x08: i32
  if (data?.Disjoint !== undefined) view.setInt32(8, Number(data.Disjoint), true);
  // 0x0c: pad4
  return buf;
}

/**
 * Windows.Win32.Graphics.Direct3D11.D3D11_QUERY_DATA_PIPELINE_STATISTICS (size: 88)
 */
export interface D3D11_QUERY_DATA_PIPELINE_STATISTICS {
  /** u64 */
  IAVertices: Deno.PointerValue;
  /** u64 */
  IAPrimitives: Deno.PointerValue;
  /** u64 */
  VSInvocations: Deno.PointerValue;
  /** u64 */
  GSInvocations: Deno.PointerValue;
  /** u64 */
  GSPrimitives: Deno.PointerValue;
  /** u64 */
  CInvocations: Deno.PointerValue;
  /** u64 */
  CPrimitives: Deno.PointerValue;
  /** u64 */
  PSInvocations: Deno.PointerValue;
  /** u64 */
  HSInvocations: Deno.PointerValue;
  /** u64 */
  DSInvocations: Deno.PointerValue;
  /** u64 */
  CSInvocations: Deno.PointerValue;
}

export const sizeofD3D11_QUERY_DATA_PIPELINE_STATISTICS = 88;

export function allocD3D11_QUERY_DATA_PIPELINE_STATISTICS(data?: Partial<D3D11_QUERY_DATA_PIPELINE_STATISTICS>): Uint8Array {
  const buf = new Uint8Array(sizeofD3D11_QUERY_DATA_PIPELINE_STATISTICS);
  const view = new DataView(buf.buffer);
  // 0x00: u64
  if (data?.IAVertices !== undefined) view.setBigUint64(0, BigInt(data.IAVertices), true);
  // 0x08: u64
  if (data?.IAPrimitives !== undefined) view.setBigUint64(8, BigInt(data.IAPrimitives), true);
  // 0x10: u64
  if (data?.VSInvocations !== undefined) view.setBigUint64(16, BigInt(data.VSInvocations), true);
  // 0x18: u64
  if (data?.GSInvocations !== undefined) view.setBigUint64(24, BigInt(data.GSInvocations), true);
  // 0x20: u64
  if (data?.GSPrimitives !== undefined) view.setBigUint64(32, BigInt(data.GSPrimitives), true);
  // 0x28: u64
  if (data?.CInvocations !== undefined) view.setBigUint64(40, BigInt(data.CInvocations), true);
  // 0x30: u64
  if (data?.CPrimitives !== undefined) view.setBigUint64(48, BigInt(data.CPrimitives), true);
  // 0x38: u64
  if (data?.PSInvocations !== undefined) view.setBigUint64(56, BigInt(data.PSInvocations), true);
  // 0x40: u64
  if (data?.HSInvocations !== undefined) view.setBigUint64(64, BigInt(data.HSInvocations), true);
  // 0x48: u64
  if (data?.DSInvocations !== undefined) view.setBigUint64(72, BigInt(data.DSInvocations), true);
  // 0x50: u64
  if (data?.CSInvocations !== undefined) view.setBigUint64(80, BigInt(data.CSInvocations), true);
  return buf;
}

/**
 * Windows.Win32.Graphics.Direct3D11.D3D11_QUERY_DATA_SO_STATISTICS (size: 16)
 */
export interface D3D11_QUERY_DATA_SO_STATISTICS {
  /** u64 */
  NumPrimitivesWritten: Deno.PointerValue;
  /** u64 */
  PrimitivesStorageNeeded: Deno.PointerValue;
}

export const sizeofD3D11_QUERY_DATA_SO_STATISTICS = 16;

export function allocD3D11_QUERY_DATA_SO_STATISTICS(data?: Partial<D3D11_QUERY_DATA_SO_STATISTICS>): Uint8Array {
  const buf = new Uint8Array(sizeofD3D11_QUERY_DATA_SO_STATISTICS);
  const view = new DataView(buf.buffer);
  // 0x00: u64
  if (data?.NumPrimitivesWritten !== undefined) view.setBigUint64(0, BigInt(data.NumPrimitivesWritten), true);
  // 0x08: u64
  if (data?.PrimitivesStorageNeeded !== undefined) view.setBigUint64(8, BigInt(data.PrimitivesStorageNeeded), true);
  return buf;
}

/**
 * Windows.Win32.Graphics.Direct3D11.D3D11_COUNTER_DESC (size: 8)
 */
export interface D3D11_COUNTER_DESC {
  /** Windows.Win32.Graphics.Direct3D11.D3D11_COUNTER */
  Counter: D3D11_COUNTER;
  /** u32 */
  MiscFlags: number;
}

export const sizeofD3D11_COUNTER_DESC = 8;

export function allocD3D11_COUNTER_DESC(data?: Partial<D3D11_COUNTER_DESC>): Uint8Array {
  const buf = new Uint8Array(sizeofD3D11_COUNTER_DESC);
  const view = new DataView(buf.buffer);
  // 0x00: i32
  if (data?.Counter !== undefined) view.setInt32(0, Number(data.Counter), true);
  // 0x04: u32
  if (data?.MiscFlags !== undefined) view.setUint32(4, Number(data.MiscFlags), true);
  return buf;
}

/**
 * Windows.Win32.Graphics.Direct3D11.D3D11_COUNTER_INFO (size: 16)
 */
export interface D3D11_COUNTER_INFO {
  /** Windows.Win32.Graphics.Direct3D11.D3D11_COUNTER */
  LastDeviceDependentCounter: D3D11_COUNTER;
  /** u32 */
  NumSimultaneousCounters: number;
  /** u8 */
  NumDetectableParallelUnits: number;
}

export const sizeofD3D11_COUNTER_INFO = 16;

export function allocD3D11_COUNTER_INFO(data?: Partial<D3D11_COUNTER_INFO>): Uint8Array {
  const buf = new Uint8Array(sizeofD3D11_COUNTER_INFO);
  const view = new DataView(buf.buffer);
  // 0x00: i32
  if (data?.LastDeviceDependentCounter !== undefined) view.setInt32(0, Number(data.LastDeviceDependentCounter), true);
  // 0x04: u32
  if (data?.NumSimultaneousCounters !== undefined) view.setUint32(4, Number(data.NumSimultaneousCounters), true);
  // 0x08: u8
  if (data?.NumDetectableParallelUnits !== undefined) view.setUint8(8, Number(data.NumDetectableParallelUnits));
  // 0x09: pad7
  return buf;
}

/**
 * Windows.Win32.Graphics.Direct3D11.D3D11_CLASS_INSTANCE_DESC (size: 32)
 */
export interface D3D11_CLASS_INSTANCE_DESC {
  /** u32 */
  InstanceId: number;
  /** u32 */
  InstanceIndex: number;
  /** u32 */
  TypeId: number;
  /** u32 */
  ConstantBuffer: number;
  /** u32 */
  BaseConstantBufferOffset: number;
  /** u32 */
  BaseTexture: number;
  /** u32 */
  BaseSampler: number;
  /** Windows.Win32.Foundation.BOOL */
  Created: boolean;
}

export const sizeofD3D11_CLASS_INSTANCE_DESC = 32;

export function allocD3D11_CLASS_INSTANCE_DESC(data?: Partial<D3D11_CLASS_INSTANCE_DESC>): Uint8Array {
  const buf = new Uint8Array(sizeofD3D11_CLASS_INSTANCE_DESC);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.InstanceId !== undefined) view.setUint32(0, Number(data.InstanceId), true);
  // 0x04: u32
  if (data?.InstanceIndex !== undefined) view.setUint32(4, Number(data.InstanceIndex), true);
  // 0x08: u32
  if (data?.TypeId !== undefined) view.setUint32(8, Number(data.TypeId), true);
  // 0x0c: u32
  if (data?.ConstantBuffer !== undefined) view.setUint32(12, Number(data.ConstantBuffer), true);
  // 0x10: u32
  if (data?.BaseConstantBufferOffset !== undefined) view.setUint32(16, Number(data.BaseConstantBufferOffset), true);
  // 0x14: u32
  if (data?.BaseTexture !== undefined) view.setUint32(20, Number(data.BaseTexture), true);
  // 0x18: u32
  if (data?.BaseSampler !== undefined) view.setUint32(24, Number(data.BaseSampler), true);
  // 0x1c: i32
  if (data?.Created !== undefined) view.setInt32(28, Number(data.Created), true);
  return buf;
}

/**
 * Windows.Win32.Graphics.Direct3D11.D3D11_FEATURE_DATA_THREADING (size: 8)
 */
export interface D3D11_FEATURE_DATA_THREADING {
  /** Windows.Win32.Foundation.BOOL */
  DriverConcurrentCreates: boolean;
  /** Windows.Win32.Foundation.BOOL */
  DriverCommandLists: boolean;
}

export const sizeofD3D11_FEATURE_DATA_THREADING = 8;

export function allocD3D11_FEATURE_DATA_THREADING(data?: Partial<D3D11_FEATURE_DATA_THREADING>): Uint8Array {
  const buf = new Uint8Array(sizeofD3D11_FEATURE_DATA_THREADING);
  const view = new DataView(buf.buffer);
  // 0x00: i32
  if (data?.DriverConcurrentCreates !== undefined) view.setInt32(0, Number(data.DriverConcurrentCreates), true);
  // 0x04: i32
  if (data?.DriverCommandLists !== undefined) view.setInt32(4, Number(data.DriverCommandLists), true);
  return buf;
}

/**
 * Windows.Win32.Graphics.Direct3D11.D3D11_FEATURE_DATA_DOUBLES (size: 8)
 */
export interface D3D11_FEATURE_DATA_DOUBLES {
  /** Windows.Win32.Foundation.BOOL */
  DoublePrecisionFloatShaderOps: boolean;
}

export const sizeofD3D11_FEATURE_DATA_DOUBLES = 8;

export function allocD3D11_FEATURE_DATA_DOUBLES(data?: Partial<D3D11_FEATURE_DATA_DOUBLES>): Uint8Array {
  const buf = new Uint8Array(sizeofD3D11_FEATURE_DATA_DOUBLES);
  const view = new DataView(buf.buffer);
  // 0x00: i32
  if (data?.DoublePrecisionFloatShaderOps !== undefined) view.setInt32(0, Number(data.DoublePrecisionFloatShaderOps), true);
  // 0x04: pad4
  return buf;
}

/**
 * Windows.Win32.Graphics.Direct3D11.D3D11_FEATURE_DATA_FORMAT_SUPPORT (size: 8)
 */
export interface D3D11_FEATURE_DATA_FORMAT_SUPPORT {
  /** Windows.Win32.Graphics.Dxgi.Common.DXGI_FORMAT */
  InFormat: DXGI_FORMAT;
  /** u32 */
  OutFormatSupport: number;
}

export const sizeofD3D11_FEATURE_DATA_FORMAT_SUPPORT = 8;

export function allocD3D11_FEATURE_DATA_FORMAT_SUPPORT(data?: Partial<D3D11_FEATURE_DATA_FORMAT_SUPPORT>): Uint8Array {
  const buf = new Uint8Array(sizeofD3D11_FEATURE_DATA_FORMAT_SUPPORT);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.InFormat !== undefined) view.setUint32(0, Number(data.InFormat), true);
  // 0x04: u32
  if (data?.OutFormatSupport !== undefined) view.setUint32(4, Number(data.OutFormatSupport), true);
  return buf;
}

/**
 * Windows.Win32.Graphics.Direct3D11.D3D11_FEATURE_DATA_FORMAT_SUPPORT2 (size: 8)
 */
export interface D3D11_FEATURE_DATA_FORMAT_SUPPORT2 {
  /** Windows.Win32.Graphics.Dxgi.Common.DXGI_FORMAT */
  InFormat: DXGI_FORMAT;
  /** u32 */
  OutFormatSupport2: number;
}

export const sizeofD3D11_FEATURE_DATA_FORMAT_SUPPORT2 = 8;

export function allocD3D11_FEATURE_DATA_FORMAT_SUPPORT2(data?: Partial<D3D11_FEATURE_DATA_FORMAT_SUPPORT2>): Uint8Array {
  const buf = new Uint8Array(sizeofD3D11_FEATURE_DATA_FORMAT_SUPPORT2);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.InFormat !== undefined) view.setUint32(0, Number(data.InFormat), true);
  // 0x04: u32
  if (data?.OutFormatSupport2 !== undefined) view.setUint32(4, Number(data.OutFormatSupport2), true);
  return buf;
}

/**
 * Windows.Win32.Graphics.Direct3D11.D3D11_FEATURE_DATA_D3D10_X_HARDWARE_OPTIONS (size: 8)
 */
export interface D3D11_FEATURE_DATA_D3D10_X_HARDWARE_OPTIONS {
  /** Windows.Win32.Foundation.BOOL */
  ComputeShaders_Plus_RawAndStructuredBuffers_Via_Shader_4_x: boolean;
}

export const sizeofD3D11_FEATURE_DATA_D3D10_X_HARDWARE_OPTIONS = 8;

export function allocD3D11_FEATURE_DATA_D3D10_X_HARDWARE_OPTIONS(data?: Partial<D3D11_FEATURE_DATA_D3D10_X_HARDWARE_OPTIONS>): Uint8Array {
  const buf = new Uint8Array(sizeofD3D11_FEATURE_DATA_D3D10_X_HARDWARE_OPTIONS);
  const view = new DataView(buf.buffer);
  // 0x00: i32
  if (data?.ComputeShaders_Plus_RawAndStructuredBuffers_Via_Shader_4_x !== undefined) view.setInt32(0, Number(data.ComputeShaders_Plus_RawAndStructuredBuffers_Via_Shader_4_x), true);
  // 0x04: pad4
  return buf;
}

/**
 * Windows.Win32.Graphics.Direct3D11.D3D11_FEATURE_DATA_D3D11_OPTIONS (size: 56)
 */
export interface D3D11_FEATURE_DATA_D3D11_OPTIONS {
  /** Windows.Win32.Foundation.BOOL */
  OutputMergerLogicOp: boolean;
  /** Windows.Win32.Foundation.BOOL */
  UAVOnlyRenderingForcedSampleCount: boolean;
  /** Windows.Win32.Foundation.BOOL */
  DiscardAPIsSeenByDriver: boolean;
  /** Windows.Win32.Foundation.BOOL */
  FlagsForUpdateAndCopySeenByDriver: boolean;
  /** Windows.Win32.Foundation.BOOL */
  ClearView: boolean;
  /** Windows.Win32.Foundation.BOOL */
  CopyWithOverlap: boolean;
  /** Windows.Win32.Foundation.BOOL */
  ConstantBufferPartialUpdate: boolean;
  /** Windows.Win32.Foundation.BOOL */
  ConstantBufferOffsetting: boolean;
  /** Windows.Win32.Foundation.BOOL */
  MapNoOverwriteOnDynamicConstantBuffer: boolean;
  /** Windows.Win32.Foundation.BOOL */
  MapNoOverwriteOnDynamicBufferSRV: boolean;
  /** Windows.Win32.Foundation.BOOL */
  MultisampleRTVWithForcedSampleCountOne: boolean;
  /** Windows.Win32.Foundation.BOOL */
  SAD4ShaderInstructions: boolean;
  /** Windows.Win32.Foundation.BOOL */
  ExtendedDoublesShaderInstructions: boolean;
  /** Windows.Win32.Foundation.BOOL */
  ExtendedResourceSharing: boolean;
}

export const sizeofD3D11_FEATURE_DATA_D3D11_OPTIONS = 56;

export function allocD3D11_FEATURE_DATA_D3D11_OPTIONS(data?: Partial<D3D11_FEATURE_DATA_D3D11_OPTIONS>): Uint8Array {
  const buf = new Uint8Array(sizeofD3D11_FEATURE_DATA_D3D11_OPTIONS);
  const view = new DataView(buf.buffer);
  // 0x00: i32
  if (data?.OutputMergerLogicOp !== undefined) view.setInt32(0, Number(data.OutputMergerLogicOp), true);
  // 0x04: i32
  if (data?.UAVOnlyRenderingForcedSampleCount !== undefined) view.setInt32(4, Number(data.UAVOnlyRenderingForcedSampleCount), true);
  // 0x08: i32
  if (data?.DiscardAPIsSeenByDriver !== undefined) view.setInt32(8, Number(data.DiscardAPIsSeenByDriver), true);
  // 0x0c: i32
  if (data?.FlagsForUpdateAndCopySeenByDriver !== undefined) view.setInt32(12, Number(data.FlagsForUpdateAndCopySeenByDriver), true);
  // 0x10: i32
  if (data?.ClearView !== undefined) view.setInt32(16, Number(data.ClearView), true);
  // 0x14: i32
  if (data?.CopyWithOverlap !== undefined) view.setInt32(20, Number(data.CopyWithOverlap), true);
  // 0x18: i32
  if (data?.ConstantBufferPartialUpdate !== undefined) view.setInt32(24, Number(data.ConstantBufferPartialUpdate), true);
  // 0x1c: i32
  if (data?.ConstantBufferOffsetting !== undefined) view.setInt32(28, Number(data.ConstantBufferOffsetting), true);
  // 0x20: i32
  if (data?.MapNoOverwriteOnDynamicConstantBuffer !== undefined) view.setInt32(32, Number(data.MapNoOverwriteOnDynamicConstantBuffer), true);
  // 0x24: i32
  if (data?.MapNoOverwriteOnDynamicBufferSRV !== undefined) view.setInt32(36, Number(data.MapNoOverwriteOnDynamicBufferSRV), true);
  // 0x28: i32
  if (data?.MultisampleRTVWithForcedSampleCountOne !== undefined) view.setInt32(40, Number(data.MultisampleRTVWithForcedSampleCountOne), true);
  // 0x2c: i32
  if (data?.SAD4ShaderInstructions !== undefined) view.setInt32(44, Number(data.SAD4ShaderInstructions), true);
  // 0x30: i32
  if (data?.ExtendedDoublesShaderInstructions !== undefined) view.setInt32(48, Number(data.ExtendedDoublesShaderInstructions), true);
  // 0x34: i32
  if (data?.ExtendedResourceSharing !== undefined) view.setInt32(52, Number(data.ExtendedResourceSharing), true);
  return buf;
}

/**
 * Windows.Win32.Graphics.Direct3D11.D3D11_FEATURE_DATA_ARCHITECTURE_INFO (size: 8)
 */
export interface D3D11_FEATURE_DATA_ARCHITECTURE_INFO {
  /** Windows.Win32.Foundation.BOOL */
  TileBasedDeferredRenderer: boolean;
}

export const sizeofD3D11_FEATURE_DATA_ARCHITECTURE_INFO = 8;

export function allocD3D11_FEATURE_DATA_ARCHITECTURE_INFO(data?: Partial<D3D11_FEATURE_DATA_ARCHITECTURE_INFO>): Uint8Array {
  const buf = new Uint8Array(sizeofD3D11_FEATURE_DATA_ARCHITECTURE_INFO);
  const view = new DataView(buf.buffer);
  // 0x00: i32
  if (data?.TileBasedDeferredRenderer !== undefined) view.setInt32(0, Number(data.TileBasedDeferredRenderer), true);
  // 0x04: pad4
  return buf;
}

/**
 * Windows.Win32.Graphics.Direct3D11.D3D11_FEATURE_DATA_D3D9_OPTIONS (size: 8)
 */
export interface D3D11_FEATURE_DATA_D3D9_OPTIONS {
  /** Windows.Win32.Foundation.BOOL */
  FullNonPow2TextureSupport: boolean;
}

export const sizeofD3D11_FEATURE_DATA_D3D9_OPTIONS = 8;

export function allocD3D11_FEATURE_DATA_D3D9_OPTIONS(data?: Partial<D3D11_FEATURE_DATA_D3D9_OPTIONS>): Uint8Array {
  const buf = new Uint8Array(sizeofD3D11_FEATURE_DATA_D3D9_OPTIONS);
  const view = new DataView(buf.buffer);
  // 0x00: i32
  if (data?.FullNonPow2TextureSupport !== undefined) view.setInt32(0, Number(data.FullNonPow2TextureSupport), true);
  // 0x04: pad4
  return buf;
}

/**
 * Windows.Win32.Graphics.Direct3D11.D3D11_FEATURE_DATA_D3D9_SHADOW_SUPPORT (size: 8)
 */
export interface D3D11_FEATURE_DATA_D3D9_SHADOW_SUPPORT {
  /** Windows.Win32.Foundation.BOOL */
  SupportsDepthAsTextureWithLessEqualComparisonFilter: boolean;
}

export const sizeofD3D11_FEATURE_DATA_D3D9_SHADOW_SUPPORT = 8;

export function allocD3D11_FEATURE_DATA_D3D9_SHADOW_SUPPORT(data?: Partial<D3D11_FEATURE_DATA_D3D9_SHADOW_SUPPORT>): Uint8Array {
  const buf = new Uint8Array(sizeofD3D11_FEATURE_DATA_D3D9_SHADOW_SUPPORT);
  const view = new DataView(buf.buffer);
  // 0x00: i32
  if (data?.SupportsDepthAsTextureWithLessEqualComparisonFilter !== undefined) view.setInt32(0, Number(data.SupportsDepthAsTextureWithLessEqualComparisonFilter), true);
  // 0x04: pad4
  return buf;
}

/**
 * Windows.Win32.Graphics.Direct3D11.D3D11_FEATURE_DATA_SHADER_MIN_PRECISION_SUPPORT (size: 8)
 */
export interface D3D11_FEATURE_DATA_SHADER_MIN_PRECISION_SUPPORT {
  /** u32 */
  PixelShaderMinPrecision: number;
  /** u32 */
  AllOtherShaderStagesMinPrecision: number;
}

export const sizeofD3D11_FEATURE_DATA_SHADER_MIN_PRECISION_SUPPORT = 8;

export function allocD3D11_FEATURE_DATA_SHADER_MIN_PRECISION_SUPPORT(data?: Partial<D3D11_FEATURE_DATA_SHADER_MIN_PRECISION_SUPPORT>): Uint8Array {
  const buf = new Uint8Array(sizeofD3D11_FEATURE_DATA_SHADER_MIN_PRECISION_SUPPORT);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.PixelShaderMinPrecision !== undefined) view.setUint32(0, Number(data.PixelShaderMinPrecision), true);
  // 0x04: u32
  if (data?.AllOtherShaderStagesMinPrecision !== undefined) view.setUint32(4, Number(data.AllOtherShaderStagesMinPrecision), true);
  return buf;
}

/**
 * Windows.Win32.Graphics.Direct3D11.D3D11_FEATURE_DATA_D3D11_OPTIONS1 (size: 16)
 */
export interface D3D11_FEATURE_DATA_D3D11_OPTIONS1 {
  /** Windows.Win32.Graphics.Direct3D11.D3D11_TILED_RESOURCES_TIER */
  TiledResourcesTier: D3D11_TILED_RESOURCES_TIER;
  /** Windows.Win32.Foundation.BOOL */
  MinMaxFiltering: boolean;
  /** Windows.Win32.Foundation.BOOL */
  ClearViewAlsoSupportsDepthOnlyFormats: boolean;
  /** Windows.Win32.Foundation.BOOL */
  MapOnDefaultBuffers: boolean;
}

export const sizeofD3D11_FEATURE_DATA_D3D11_OPTIONS1 = 16;

export function allocD3D11_FEATURE_DATA_D3D11_OPTIONS1(data?: Partial<D3D11_FEATURE_DATA_D3D11_OPTIONS1>): Uint8Array {
  const buf = new Uint8Array(sizeofD3D11_FEATURE_DATA_D3D11_OPTIONS1);
  const view = new DataView(buf.buffer);
  // 0x00: i32
  if (data?.TiledResourcesTier !== undefined) view.setInt32(0, Number(data.TiledResourcesTier), true);
  // 0x04: i32
  if (data?.MinMaxFiltering !== undefined) view.setInt32(4, Number(data.MinMaxFiltering), true);
  // 0x08: i32
  if (data?.ClearViewAlsoSupportsDepthOnlyFormats !== undefined) view.setInt32(8, Number(data.ClearViewAlsoSupportsDepthOnlyFormats), true);
  // 0x0c: i32
  if (data?.MapOnDefaultBuffers !== undefined) view.setInt32(12, Number(data.MapOnDefaultBuffers), true);
  return buf;
}

/**
 * Windows.Win32.Graphics.Direct3D11.D3D11_FEATURE_DATA_D3D9_SIMPLE_INSTANCING_SUPPORT (size: 8)
 */
export interface D3D11_FEATURE_DATA_D3D9_SIMPLE_INSTANCING_SUPPORT {
  /** Windows.Win32.Foundation.BOOL */
  SimpleInstancingSupported: boolean;
}

export const sizeofD3D11_FEATURE_DATA_D3D9_SIMPLE_INSTANCING_SUPPORT = 8;

export function allocD3D11_FEATURE_DATA_D3D9_SIMPLE_INSTANCING_SUPPORT(data?: Partial<D3D11_FEATURE_DATA_D3D9_SIMPLE_INSTANCING_SUPPORT>): Uint8Array {
  const buf = new Uint8Array(sizeofD3D11_FEATURE_DATA_D3D9_SIMPLE_INSTANCING_SUPPORT);
  const view = new DataView(buf.buffer);
  // 0x00: i32
  if (data?.SimpleInstancingSupported !== undefined) view.setInt32(0, Number(data.SimpleInstancingSupported), true);
  // 0x04: pad4
  return buf;
}

/**
 * Windows.Win32.Graphics.Direct3D11.D3D11_FEATURE_DATA_MARKER_SUPPORT (size: 8)
 */
export interface D3D11_FEATURE_DATA_MARKER_SUPPORT {
  /** Windows.Win32.Foundation.BOOL */
  Profile: boolean;
}

export const sizeofD3D11_FEATURE_DATA_MARKER_SUPPORT = 8;

export function allocD3D11_FEATURE_DATA_MARKER_SUPPORT(data?: Partial<D3D11_FEATURE_DATA_MARKER_SUPPORT>): Uint8Array {
  const buf = new Uint8Array(sizeofD3D11_FEATURE_DATA_MARKER_SUPPORT);
  const view = new DataView(buf.buffer);
  // 0x00: i32
  if (data?.Profile !== undefined) view.setInt32(0, Number(data.Profile), true);
  // 0x04: pad4
  return buf;
}

/**
 * Windows.Win32.Graphics.Direct3D11.D3D11_FEATURE_DATA_D3D9_OPTIONS1 (size: 16)
 */
export interface D3D11_FEATURE_DATA_D3D9_OPTIONS1 {
  /** Windows.Win32.Foundation.BOOL */
  FullNonPow2TextureSupported: boolean;
  /** Windows.Win32.Foundation.BOOL */
  DepthAsTextureWithLessEqualComparisonFilterSupported: boolean;
  /** Windows.Win32.Foundation.BOOL */
  SimpleInstancingSupported: boolean;
  /** Windows.Win32.Foundation.BOOL */
  TextureCubeFaceRenderTargetWithNonCubeDepthStencilSupported: boolean;
}

export const sizeofD3D11_FEATURE_DATA_D3D9_OPTIONS1 = 16;

export function allocD3D11_FEATURE_DATA_D3D9_OPTIONS1(data?: Partial<D3D11_FEATURE_DATA_D3D9_OPTIONS1>): Uint8Array {
  const buf = new Uint8Array(sizeofD3D11_FEATURE_DATA_D3D9_OPTIONS1);
  const view = new DataView(buf.buffer);
  // 0x00: i32
  if (data?.FullNonPow2TextureSupported !== undefined) view.setInt32(0, Number(data.FullNonPow2TextureSupported), true);
  // 0x04: i32
  if (data?.DepthAsTextureWithLessEqualComparisonFilterSupported !== undefined) view.setInt32(4, Number(data.DepthAsTextureWithLessEqualComparisonFilterSupported), true);
  // 0x08: i32
  if (data?.SimpleInstancingSupported !== undefined) view.setInt32(8, Number(data.SimpleInstancingSupported), true);
  // 0x0c: i32
  if (data?.TextureCubeFaceRenderTargetWithNonCubeDepthStencilSupported !== undefined) view.setInt32(12, Number(data.TextureCubeFaceRenderTargetWithNonCubeDepthStencilSupported), true);
  return buf;
}

/**
 * Windows.Win32.Graphics.Direct3D11.D3D11_FEATURE_DATA_D3D11_OPTIONS2 (size: 32)
 */
export interface D3D11_FEATURE_DATA_D3D11_OPTIONS2 {
  /** Windows.Win32.Foundation.BOOL */
  PSSpecifiedStencilRefSupported: boolean;
  /** Windows.Win32.Foundation.BOOL */
  TypedUAVLoadAdditionalFormats: boolean;
  /** Windows.Win32.Foundation.BOOL */
  ROVsSupported: boolean;
  /** Windows.Win32.Graphics.Direct3D11.D3D11_CONSERVATIVE_RASTERIZATION_TIER */
  ConservativeRasterizationTier: D3D11_CONSERVATIVE_RASTERIZATION_TIER;
  /** Windows.Win32.Graphics.Direct3D11.D3D11_TILED_RESOURCES_TIER */
  TiledResourcesTier: D3D11_TILED_RESOURCES_TIER;
  /** Windows.Win32.Foundation.BOOL */
  MapOnDefaultTextures: boolean;
  /** Windows.Win32.Foundation.BOOL */
  StandardSwizzle: boolean;
  /** Windows.Win32.Foundation.BOOL */
  UnifiedMemoryArchitecture: boolean;
}

export const sizeofD3D11_FEATURE_DATA_D3D11_OPTIONS2 = 32;

export function allocD3D11_FEATURE_DATA_D3D11_OPTIONS2(data?: Partial<D3D11_FEATURE_DATA_D3D11_OPTIONS2>): Uint8Array {
  const buf = new Uint8Array(sizeofD3D11_FEATURE_DATA_D3D11_OPTIONS2);
  const view = new DataView(buf.buffer);
  // 0x00: i32
  if (data?.PSSpecifiedStencilRefSupported !== undefined) view.setInt32(0, Number(data.PSSpecifiedStencilRefSupported), true);
  // 0x04: i32
  if (data?.TypedUAVLoadAdditionalFormats !== undefined) view.setInt32(4, Number(data.TypedUAVLoadAdditionalFormats), true);
  // 0x08: i32
  if (data?.ROVsSupported !== undefined) view.setInt32(8, Number(data.ROVsSupported), true);
  // 0x0c: i32
  if (data?.ConservativeRasterizationTier !== undefined) view.setInt32(12, Number(data.ConservativeRasterizationTier), true);
  // 0x10: i32
  if (data?.TiledResourcesTier !== undefined) view.setInt32(16, Number(data.TiledResourcesTier), true);
  // 0x14: i32
  if (data?.MapOnDefaultTextures !== undefined) view.setInt32(20, Number(data.MapOnDefaultTextures), true);
  // 0x18: i32
  if (data?.StandardSwizzle !== undefined) view.setInt32(24, Number(data.StandardSwizzle), true);
  // 0x1c: i32
  if (data?.UnifiedMemoryArchitecture !== undefined) view.setInt32(28, Number(data.UnifiedMemoryArchitecture), true);
  return buf;
}

/**
 * Windows.Win32.Graphics.Direct3D11.D3D11_FEATURE_DATA_D3D11_OPTIONS3 (size: 8)
 */
export interface D3D11_FEATURE_DATA_D3D11_OPTIONS3 {
  /** Windows.Win32.Foundation.BOOL */
  VPAndRTArrayIndexFromAnyShaderFeedingRasterizer: boolean;
}

export const sizeofD3D11_FEATURE_DATA_D3D11_OPTIONS3 = 8;

export function allocD3D11_FEATURE_DATA_D3D11_OPTIONS3(data?: Partial<D3D11_FEATURE_DATA_D3D11_OPTIONS3>): Uint8Array {
  const buf = new Uint8Array(sizeofD3D11_FEATURE_DATA_D3D11_OPTIONS3);
  const view = new DataView(buf.buffer);
  // 0x00: i32
  if (data?.VPAndRTArrayIndexFromAnyShaderFeedingRasterizer !== undefined) view.setInt32(0, Number(data.VPAndRTArrayIndexFromAnyShaderFeedingRasterizer), true);
  // 0x04: pad4
  return buf;
}

/**
 * Windows.Win32.Graphics.Direct3D11.D3D11_FEATURE_DATA_GPU_VIRTUAL_ADDRESS_SUPPORT (size: 8)
 */
export interface D3D11_FEATURE_DATA_GPU_VIRTUAL_ADDRESS_SUPPORT {
  /** u32 */
  MaxGPUVirtualAddressBitsPerResource: number;
  /** u32 */
  MaxGPUVirtualAddressBitsPerProcess: number;
}

export const sizeofD3D11_FEATURE_DATA_GPU_VIRTUAL_ADDRESS_SUPPORT = 8;

export function allocD3D11_FEATURE_DATA_GPU_VIRTUAL_ADDRESS_SUPPORT(data?: Partial<D3D11_FEATURE_DATA_GPU_VIRTUAL_ADDRESS_SUPPORT>): Uint8Array {
  const buf = new Uint8Array(sizeofD3D11_FEATURE_DATA_GPU_VIRTUAL_ADDRESS_SUPPORT);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.MaxGPUVirtualAddressBitsPerResource !== undefined) view.setUint32(0, Number(data.MaxGPUVirtualAddressBitsPerResource), true);
  // 0x04: u32
  if (data?.MaxGPUVirtualAddressBitsPerProcess !== undefined) view.setUint32(4, Number(data.MaxGPUVirtualAddressBitsPerProcess), true);
  return buf;
}

/**
 * Windows.Win32.Graphics.Direct3D11.D3D11_FEATURE_DATA_SHADER_CACHE (size: 8)
 */
export interface D3D11_FEATURE_DATA_SHADER_CACHE {
  /** u32 */
  SupportFlags: number;
}

export const sizeofD3D11_FEATURE_DATA_SHADER_CACHE = 8;

export function allocD3D11_FEATURE_DATA_SHADER_CACHE(data?: Partial<D3D11_FEATURE_DATA_SHADER_CACHE>): Uint8Array {
  const buf = new Uint8Array(sizeofD3D11_FEATURE_DATA_SHADER_CACHE);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.SupportFlags !== undefined) view.setUint32(0, Number(data.SupportFlags), true);
  // 0x04: pad4
  return buf;
}

/**
 * Windows.Win32.Graphics.Direct3D11.D3D11_FEATURE_DATA_DISPLAYABLE (size: 8)
 */
export interface D3D11_FEATURE_DATA_DISPLAYABLE {
  /** Windows.Win32.Foundation.BOOL */
  DisplayableTexture: boolean;
  /** Windows.Win32.Graphics.Direct3D11.D3D11_SHARED_RESOURCE_TIER */
  SharedResourceTier: D3D11_SHARED_RESOURCE_TIER;
}

export const sizeofD3D11_FEATURE_DATA_DISPLAYABLE = 8;

export function allocD3D11_FEATURE_DATA_DISPLAYABLE(data?: Partial<D3D11_FEATURE_DATA_DISPLAYABLE>): Uint8Array {
  const buf = new Uint8Array(sizeofD3D11_FEATURE_DATA_DISPLAYABLE);
  const view = new DataView(buf.buffer);
  // 0x00: i32
  if (data?.DisplayableTexture !== undefined) view.setInt32(0, Number(data.DisplayableTexture), true);
  // 0x04: i32
  if (data?.SharedResourceTier !== undefined) view.setInt32(4, Number(data.SharedResourceTier), true);
  return buf;
}

/**
 * Windows.Win32.Graphics.Direct3D11.D3D11_FEATURE_DATA_D3D11_OPTIONS5 (size: 8)
 */
export interface D3D11_FEATURE_DATA_D3D11_OPTIONS5 {
  /** Windows.Win32.Graphics.Direct3D11.D3D11_SHARED_RESOURCE_TIER */
  SharedResourceTier: D3D11_SHARED_RESOURCE_TIER;
}

export const sizeofD3D11_FEATURE_DATA_D3D11_OPTIONS5 = 8;

export function allocD3D11_FEATURE_DATA_D3D11_OPTIONS5(data?: Partial<D3D11_FEATURE_DATA_D3D11_OPTIONS5>): Uint8Array {
  const buf = new Uint8Array(sizeofD3D11_FEATURE_DATA_D3D11_OPTIONS5);
  const view = new DataView(buf.buffer);
  // 0x00: i32
  if (data?.SharedResourceTier !== undefined) view.setInt32(0, Number(data.SharedResourceTier), true);
  // 0x04: pad4
  return buf;
}

/**
 * Windows.Win32.Graphics.Direct3D11.D3D11_VIDEO_DECODER_DESC (size: 24)
 */
export interface D3D11_VIDEO_DECODER_DESC {
  /** System.Guid */
  Guid: Uint8Array | Deno.PointerValue | null;
  /** u32 */
  SampleWidth: number;
  /** u32 */
  SampleHeight: number;
  /** Windows.Win32.Graphics.Dxgi.Common.DXGI_FORMAT */
  OutputFormat: DXGI_FORMAT;
}

export const sizeofD3D11_VIDEO_DECODER_DESC = 24;

export function allocD3D11_VIDEO_DECODER_DESC(data?: Partial<D3D11_VIDEO_DECODER_DESC>): Uint8Array {
  const buf = new Uint8Array(sizeofD3D11_VIDEO_DECODER_DESC);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.Guid !== undefined) view.setBigUint64(0, data.Guid === null ? 0n : BigInt(util.toPointer(data.Guid)), true);
  // 0x08: u32
  if (data?.SampleWidth !== undefined) view.setUint32(8, Number(data.SampleWidth), true);
  // 0x0c: u32
  if (data?.SampleHeight !== undefined) view.setUint32(12, Number(data.SampleHeight), true);
  // 0x10: u32
  if (data?.OutputFormat !== undefined) view.setUint32(16, Number(data.OutputFormat), true);
  // 0x14: pad4
  return buf;
}

/**
 * Windows.Win32.Graphics.Direct3D11.D3D11_VIDEO_DECODER_CONFIG (size: 80)
 */
export interface D3D11_VIDEO_DECODER_CONFIG {
  /** System.Guid */
  guidConfigBitstreamEncryption: Uint8Array | Deno.PointerValue | null;
  /** System.Guid */
  guidConfigMBcontrolEncryption: Uint8Array | Deno.PointerValue | null;
  /** System.Guid */
  guidConfigResidDiffEncryption: Uint8Array | Deno.PointerValue | null;
  /** u32 */
  ConfigBitstreamRaw: number;
  /** u32 */
  ConfigMBcontrolRasterOrder: number;
  /** u32 */
  ConfigResidDiffHost: number;
  /** u32 */
  ConfigSpatialResid8: number;
  /** u32 */
  ConfigResid8Subtraction: number;
  /** u32 */
  ConfigSpatialHost8or9Clipping: number;
  /** u32 */
  ConfigSpatialResidInterleaved: number;
  /** u32 */
  ConfigIntraResidUnsigned: number;
  /** u32 */
  ConfigResidDiffAccelerator: number;
  /** u32 */
  ConfigHostInverseScan: number;
  /** u32 */
  ConfigSpecificIDCT: number;
  /** u32 */
  Config4GroupedCoefs: number;
  /** u16 */
  ConfigMinRenderTargetBuffCount: number;
  /** u16 */
  ConfigDecoderSpecific: number;
}

export const sizeofD3D11_VIDEO_DECODER_CONFIG = 80;

export function allocD3D11_VIDEO_DECODER_CONFIG(data?: Partial<D3D11_VIDEO_DECODER_CONFIG>): Uint8Array {
  const buf = new Uint8Array(sizeofD3D11_VIDEO_DECODER_CONFIG);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.guidConfigBitstreamEncryption !== undefined) view.setBigUint64(0, data.guidConfigBitstreamEncryption === null ? 0n : BigInt(util.toPointer(data.guidConfigBitstreamEncryption)), true);
  // 0x08: pointer
  if (data?.guidConfigMBcontrolEncryption !== undefined) view.setBigUint64(8, data.guidConfigMBcontrolEncryption === null ? 0n : BigInt(util.toPointer(data.guidConfigMBcontrolEncryption)), true);
  // 0x10: pointer
  if (data?.guidConfigResidDiffEncryption !== undefined) view.setBigUint64(16, data.guidConfigResidDiffEncryption === null ? 0n : BigInt(util.toPointer(data.guidConfigResidDiffEncryption)), true);
  // 0x18: u32
  if (data?.ConfigBitstreamRaw !== undefined) view.setUint32(24, Number(data.ConfigBitstreamRaw), true);
  // 0x1c: u32
  if (data?.ConfigMBcontrolRasterOrder !== undefined) view.setUint32(28, Number(data.ConfigMBcontrolRasterOrder), true);
  // 0x20: u32
  if (data?.ConfigResidDiffHost !== undefined) view.setUint32(32, Number(data.ConfigResidDiffHost), true);
  // 0x24: u32
  if (data?.ConfigSpatialResid8 !== undefined) view.setUint32(36, Number(data.ConfigSpatialResid8), true);
  // 0x28: u32
  if (data?.ConfigResid8Subtraction !== undefined) view.setUint32(40, Number(data.ConfigResid8Subtraction), true);
  // 0x2c: u32
  if (data?.ConfigSpatialHost8or9Clipping !== undefined) view.setUint32(44, Number(data.ConfigSpatialHost8or9Clipping), true);
  // 0x30: u32
  if (data?.ConfigSpatialResidInterleaved !== undefined) view.setUint32(48, Number(data.ConfigSpatialResidInterleaved), true);
  // 0x34: u32
  if (data?.ConfigIntraResidUnsigned !== undefined) view.setUint32(52, Number(data.ConfigIntraResidUnsigned), true);
  // 0x38: u32
  if (data?.ConfigResidDiffAccelerator !== undefined) view.setUint32(56, Number(data.ConfigResidDiffAccelerator), true);
  // 0x3c: u32
  if (data?.ConfigHostInverseScan !== undefined) view.setUint32(60, Number(data.ConfigHostInverseScan), true);
  // 0x40: u32
  if (data?.ConfigSpecificIDCT !== undefined) view.setUint32(64, Number(data.ConfigSpecificIDCT), true);
  // 0x44: u32
  if (data?.Config4GroupedCoefs !== undefined) view.setUint32(68, Number(data.Config4GroupedCoefs), true);
  // 0x48: u16
  if (data?.ConfigMinRenderTargetBuffCount !== undefined) view.setUint16(72, Number(data.ConfigMinRenderTargetBuffCount), true);
  // 0x4a: u16
  if (data?.ConfigDecoderSpecific !== undefined) view.setUint16(74, Number(data.ConfigDecoderSpecific), true);
  // 0x4c: pad4
  return buf;
}

/**
 * Windows.Win32.Graphics.Direct3D11.D3D11_AES_CTR_IV (size: 16)
 */
export interface D3D11_AES_CTR_IV {
  /** u64 */
  IV: Deno.PointerValue;
  /** u64 */
  Count: Deno.PointerValue;
}

export const sizeofD3D11_AES_CTR_IV = 16;

export function allocD3D11_AES_CTR_IV(data?: Partial<D3D11_AES_CTR_IV>): Uint8Array {
  const buf = new Uint8Array(sizeofD3D11_AES_CTR_IV);
  const view = new DataView(buf.buffer);
  // 0x00: u64
  if (data?.IV !== undefined) view.setBigUint64(0, BigInt(data.IV), true);
  // 0x08: u64
  if (data?.Count !== undefined) view.setBigUint64(8, BigInt(data.Count), true);
  return buf;
}

/**
 * Windows.Win32.Graphics.Direct3D11.D3D11_ENCRYPTED_BLOCK_INFO (size: 16)
 */
export interface D3D11_ENCRYPTED_BLOCK_INFO {
  /** u32 */
  NumEncryptedBytesAtBeginning: number;
  /** u32 */
  NumBytesInSkipPattern: number;
  /** u32 */
  NumBytesInEncryptPattern: number;
}

export const sizeofD3D11_ENCRYPTED_BLOCK_INFO = 16;

export function allocD3D11_ENCRYPTED_BLOCK_INFO(data?: Partial<D3D11_ENCRYPTED_BLOCK_INFO>): Uint8Array {
  const buf = new Uint8Array(sizeofD3D11_ENCRYPTED_BLOCK_INFO);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.NumEncryptedBytesAtBeginning !== undefined) view.setUint32(0, Number(data.NumEncryptedBytesAtBeginning), true);
  // 0x04: u32
  if (data?.NumBytesInSkipPattern !== undefined) view.setUint32(4, Number(data.NumBytesInSkipPattern), true);
  // 0x08: u32
  if (data?.NumBytesInEncryptPattern !== undefined) view.setUint32(8, Number(data.NumBytesInEncryptPattern), true);
  // 0x0c: pad4
  return buf;
}

/**
 * Windows.Win32.Graphics.Direct3D11.D3D11_VIDEO_DECODER_BUFFER_DESC (size: 64)
 */
export interface D3D11_VIDEO_DECODER_BUFFER_DESC {
  /** Windows.Win32.Graphics.Direct3D11.D3D11_VIDEO_DECODER_BUFFER_TYPE */
  BufferType: D3D11_VIDEO_DECODER_BUFFER_TYPE;
  /** u32 */
  BufferIndex: number;
  /** u32 */
  DataOffset: number;
  /** u32 */
  DataSize: number;
  /** u32 */
  FirstMBaddress: number;
  /** u32 */
  NumMBsInBuffer: number;
  /** u32 */
  Width: number;
  /** u32 */
  Height: number;
  /** u32 */
  Stride: number;
  /** u32 */
  ReservedBits: number;
  /** ptr */
  pIV: Deno.PointerValue | Uint8Array | null;
  /** u32 */
  IVSize: number;
  /** Windows.Win32.Foundation.BOOL */
  PartialEncryption: boolean;
  /** Windows.Win32.Graphics.Direct3D11.D3D11_ENCRYPTED_BLOCK_INFO */
  EncryptedBlockInfo: Uint8Array | Deno.PointerValue | null;
}

export const sizeofD3D11_VIDEO_DECODER_BUFFER_DESC = 64;

export function allocD3D11_VIDEO_DECODER_BUFFER_DESC(data?: Partial<D3D11_VIDEO_DECODER_BUFFER_DESC>): Uint8Array {
  const buf = new Uint8Array(sizeofD3D11_VIDEO_DECODER_BUFFER_DESC);
  const view = new DataView(buf.buffer);
  // 0x00: i32
  if (data?.BufferType !== undefined) view.setInt32(0, Number(data.BufferType), true);
  // 0x04: u32
  if (data?.BufferIndex !== undefined) view.setUint32(4, Number(data.BufferIndex), true);
  // 0x08: u32
  if (data?.DataOffset !== undefined) view.setUint32(8, Number(data.DataOffset), true);
  // 0x0c: u32
  if (data?.DataSize !== undefined) view.setUint32(12, Number(data.DataSize), true);
  // 0x10: u32
  if (data?.FirstMBaddress !== undefined) view.setUint32(16, Number(data.FirstMBaddress), true);
  // 0x14: u32
  if (data?.NumMBsInBuffer !== undefined) view.setUint32(20, Number(data.NumMBsInBuffer), true);
  // 0x18: u32
  if (data?.Width !== undefined) view.setUint32(24, Number(data.Width), true);
  // 0x1c: u32
  if (data?.Height !== undefined) view.setUint32(28, Number(data.Height), true);
  // 0x20: u32
  if (data?.Stride !== undefined) view.setUint32(32, Number(data.Stride), true);
  // 0x24: u32
  if (data?.ReservedBits !== undefined) view.setUint32(36, Number(data.ReservedBits), true);
  // 0x28: pointer
  if (data?.pIV !== undefined) view.setBigUint64(40, data.pIV === null ? 0n : BigInt(util.toPointer(data.pIV)), true);
  // 0x30: u32
  if (data?.IVSize !== undefined) view.setUint32(48, Number(data.IVSize), true);
  // 0x34: i32
  if (data?.PartialEncryption !== undefined) view.setInt32(52, Number(data.PartialEncryption), true);
  // 0x38: pointer
  if (data?.EncryptedBlockInfo !== undefined) view.setBigUint64(56, data.EncryptedBlockInfo === null ? 0n : BigInt(util.toPointer(data.EncryptedBlockInfo)), true);
  return buf;
}

/**
 * Windows.Win32.Graphics.Direct3D11.D3D11_VIDEO_DECODER_EXTENSION (size: 48)
 */
export interface D3D11_VIDEO_DECODER_EXTENSION {
  /** u32 */
  Function: number;
  /** ptr */
  pPrivateInputData: Deno.PointerValue | Uint8Array | null;
  /** u32 */
  PrivateInputDataSize: number;
  /** ptr */
  pPrivateOutputData: Deno.PointerValue | Uint8Array | null;
  /** u32 */
  PrivateOutputDataSize: number;
  /** u32 */
  ResourceCount: number;
  /** ptr */
  ppResourceList: Deno.PointerValue | Uint8Array | null;
}

export const sizeofD3D11_VIDEO_DECODER_EXTENSION = 48;

export function allocD3D11_VIDEO_DECODER_EXTENSION(data?: Partial<D3D11_VIDEO_DECODER_EXTENSION>): Uint8Array {
  const buf = new Uint8Array(sizeofD3D11_VIDEO_DECODER_EXTENSION);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.Function !== undefined) view.setUint32(0, Number(data.Function), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.pPrivateInputData !== undefined) view.setBigUint64(8, data.pPrivateInputData === null ? 0n : BigInt(util.toPointer(data.pPrivateInputData)), true);
  // 0x10: u32
  if (data?.PrivateInputDataSize !== undefined) view.setUint32(16, Number(data.PrivateInputDataSize), true);
  // 0x14: pad4
  // 0x18: pointer
  if (data?.pPrivateOutputData !== undefined) view.setBigUint64(24, data.pPrivateOutputData === null ? 0n : BigInt(util.toPointer(data.pPrivateOutputData)), true);
  // 0x20: u32
  if (data?.PrivateOutputDataSize !== undefined) view.setUint32(32, Number(data.PrivateOutputDataSize), true);
  // 0x24: u32
  if (data?.ResourceCount !== undefined) view.setUint32(36, Number(data.ResourceCount), true);
  // 0x28: pointer
  if (data?.ppResourceList !== undefined) view.setBigUint64(40, data.ppResourceList === null ? 0n : BigInt(util.toPointer(data.ppResourceList)), true);
  return buf;
}

/**
 * Windows.Win32.Graphics.Direct3D11.D3D11_VIDEO_PROCESSOR_CAPS (size: 40)
 */
export interface D3D11_VIDEO_PROCESSOR_CAPS {
  /** u32 */
  DeviceCaps: number;
  /** u32 */
  FeatureCaps: number;
  /** u32 */
  FilterCaps: number;
  /** u32 */
  InputFormatCaps: number;
  /** u32 */
  AutoStreamCaps: number;
  /** u32 */
  StereoCaps: number;
  /** u32 */
  RateConversionCapsCount: number;
  /** u32 */
  MaxInputStreams: number;
  /** u32 */
  MaxStreamStates: number;
}

export const sizeofD3D11_VIDEO_PROCESSOR_CAPS = 40;

export function allocD3D11_VIDEO_PROCESSOR_CAPS(data?: Partial<D3D11_VIDEO_PROCESSOR_CAPS>): Uint8Array {
  const buf = new Uint8Array(sizeofD3D11_VIDEO_PROCESSOR_CAPS);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.DeviceCaps !== undefined) view.setUint32(0, Number(data.DeviceCaps), true);
  // 0x04: u32
  if (data?.FeatureCaps !== undefined) view.setUint32(4, Number(data.FeatureCaps), true);
  // 0x08: u32
  if (data?.FilterCaps !== undefined) view.setUint32(8, Number(data.FilterCaps), true);
  // 0x0c: u32
  if (data?.InputFormatCaps !== undefined) view.setUint32(12, Number(data.InputFormatCaps), true);
  // 0x10: u32
  if (data?.AutoStreamCaps !== undefined) view.setUint32(16, Number(data.AutoStreamCaps), true);
  // 0x14: u32
  if (data?.StereoCaps !== undefined) view.setUint32(20, Number(data.StereoCaps), true);
  // 0x18: u32
  if (data?.RateConversionCapsCount !== undefined) view.setUint32(24, Number(data.RateConversionCapsCount), true);
  // 0x1c: u32
  if (data?.MaxInputStreams !== undefined) view.setUint32(28, Number(data.MaxInputStreams), true);
  // 0x20: u32
  if (data?.MaxStreamStates !== undefined) view.setUint32(32, Number(data.MaxStreamStates), true);
  // 0x24: pad4
  return buf;
}

/**
 * Windows.Win32.Graphics.Direct3D11.D3D11_VIDEO_PROCESSOR_RATE_CONVERSION_CAPS (size: 24)
 */
export interface D3D11_VIDEO_PROCESSOR_RATE_CONVERSION_CAPS {
  /** u32 */
  PastFrames: number;
  /** u32 */
  FutureFrames: number;
  /** u32 */
  ProcessorCaps: number;
  /** u32 */
  ITelecineCaps: number;
  /** u32 */
  CustomRateCount: number;
}

export const sizeofD3D11_VIDEO_PROCESSOR_RATE_CONVERSION_CAPS = 24;

export function allocD3D11_VIDEO_PROCESSOR_RATE_CONVERSION_CAPS(data?: Partial<D3D11_VIDEO_PROCESSOR_RATE_CONVERSION_CAPS>): Uint8Array {
  const buf = new Uint8Array(sizeofD3D11_VIDEO_PROCESSOR_RATE_CONVERSION_CAPS);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.PastFrames !== undefined) view.setUint32(0, Number(data.PastFrames), true);
  // 0x04: u32
  if (data?.FutureFrames !== undefined) view.setUint32(4, Number(data.FutureFrames), true);
  // 0x08: u32
  if (data?.ProcessorCaps !== undefined) view.setUint32(8, Number(data.ProcessorCaps), true);
  // 0x0c: u32
  if (data?.ITelecineCaps !== undefined) view.setUint32(12, Number(data.ITelecineCaps), true);
  // 0x10: u32
  if (data?.CustomRateCount !== undefined) view.setUint32(16, Number(data.CustomRateCount), true);
  // 0x14: pad4
  return buf;
}

/**
 * Windows.Win32.Graphics.Direct3D11.D3D11_VIDEO_CONTENT_PROTECTION_CAPS (size: 24)
 */
export interface D3D11_VIDEO_CONTENT_PROTECTION_CAPS {
  /** u32 */
  Caps: number;
  /** u32 */
  KeyExchangeTypeCount: number;
  /** u32 */
  BlockAlignmentSize: number;
  /** u64 */
  ProtectedMemorySize: Deno.PointerValue;
}

export const sizeofD3D11_VIDEO_CONTENT_PROTECTION_CAPS = 24;

export function allocD3D11_VIDEO_CONTENT_PROTECTION_CAPS(data?: Partial<D3D11_VIDEO_CONTENT_PROTECTION_CAPS>): Uint8Array {
  const buf = new Uint8Array(sizeofD3D11_VIDEO_CONTENT_PROTECTION_CAPS);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.Caps !== undefined) view.setUint32(0, Number(data.Caps), true);
  // 0x04: u32
  if (data?.KeyExchangeTypeCount !== undefined) view.setUint32(4, Number(data.KeyExchangeTypeCount), true);
  // 0x08: u32
  if (data?.BlockAlignmentSize !== undefined) view.setUint32(8, Number(data.BlockAlignmentSize), true);
  // 0x0c: pad4
  // 0x10: u64
  if (data?.ProtectedMemorySize !== undefined) view.setBigUint64(16, BigInt(data.ProtectedMemorySize), true);
  return buf;
}

/**
 * Windows.Win32.Graphics.Dxgi.Common.DXGI_RATIONAL (size: 8)
 */
export interface DXGI_RATIONAL {
  /** u32 */
  Numerator: number;
  /** u32 */
  Denominator: number;
}

export const sizeofDXGI_RATIONAL = 8;

export function allocDXGI_RATIONAL(data?: Partial<DXGI_RATIONAL>): Uint8Array {
  const buf = new Uint8Array(sizeofDXGI_RATIONAL);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.Numerator !== undefined) view.setUint32(0, Number(data.Numerator), true);
  // 0x04: u32
  if (data?.Denominator !== undefined) view.setUint32(4, Number(data.Denominator), true);
  return buf;
}

/**
 * Windows.Win32.Graphics.Direct3D11.D3D11_VIDEO_PROCESSOR_CUSTOM_RATE (size: 24)
 */
export interface D3D11_VIDEO_PROCESSOR_CUSTOM_RATE {
  /** Windows.Win32.Graphics.Dxgi.Common.DXGI_RATIONAL */
  CustomRate: Uint8Array | Deno.PointerValue | null;
  /** u32 */
  OutputFrames: number;
  /** Windows.Win32.Foundation.BOOL */
  InputInterlaced: boolean;
  /** u32 */
  InputFramesOrFields: number;
}

export const sizeofD3D11_VIDEO_PROCESSOR_CUSTOM_RATE = 24;

export function allocD3D11_VIDEO_PROCESSOR_CUSTOM_RATE(data?: Partial<D3D11_VIDEO_PROCESSOR_CUSTOM_RATE>): Uint8Array {
  const buf = new Uint8Array(sizeofD3D11_VIDEO_PROCESSOR_CUSTOM_RATE);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.CustomRate !== undefined) view.setBigUint64(0, data.CustomRate === null ? 0n : BigInt(util.toPointer(data.CustomRate)), true);
  // 0x08: u32
  if (data?.OutputFrames !== undefined) view.setUint32(8, Number(data.OutputFrames), true);
  // 0x0c: i32
  if (data?.InputInterlaced !== undefined) view.setInt32(12, Number(data.InputInterlaced), true);
  // 0x10: u32
  if (data?.InputFramesOrFields !== undefined) view.setUint32(16, Number(data.InputFramesOrFields), true);
  // 0x14: pad4
  return buf;
}

/**
 * Windows.Win32.Graphics.Direct3D11.D3D11_VIDEO_PROCESSOR_FILTER_RANGE (size: 16)
 */
export interface D3D11_VIDEO_PROCESSOR_FILTER_RANGE {
  /** i32 */
  Minimum: number;
  /** i32 */
  Maximum: number;
  /** i32 */
  Default: number;
  /** f32 */
  Multiplier: number;
}

export const sizeofD3D11_VIDEO_PROCESSOR_FILTER_RANGE = 16;

export function allocD3D11_VIDEO_PROCESSOR_FILTER_RANGE(data?: Partial<D3D11_VIDEO_PROCESSOR_FILTER_RANGE>): Uint8Array {
  const buf = new Uint8Array(sizeofD3D11_VIDEO_PROCESSOR_FILTER_RANGE);
  const view = new DataView(buf.buffer);
  // 0x00: i32
  if (data?.Minimum !== undefined) view.setInt32(0, Number(data.Minimum), true);
  // 0x04: i32
  if (data?.Maximum !== undefined) view.setInt32(4, Number(data.Maximum), true);
  // 0x08: i32
  if (data?.Default !== undefined) view.setInt32(8, Number(data.Default), true);
  // 0x0c: f32
  if (data?.Multiplier !== undefined) view.setFloat32(12, Number(data.Multiplier), true);
  return buf;
}

/**
 * Windows.Win32.Graphics.Direct3D11.D3D11_VIDEO_PROCESSOR_CONTENT_DESC (size: 48)
 */
export interface D3D11_VIDEO_PROCESSOR_CONTENT_DESC {
  /** Windows.Win32.Graphics.Direct3D11.D3D11_VIDEO_FRAME_FORMAT */
  InputFrameFormat: D3D11_VIDEO_FRAME_FORMAT;
  /** Windows.Win32.Graphics.Dxgi.Common.DXGI_RATIONAL */
  InputFrameRate: Uint8Array | Deno.PointerValue | null;
  /** u32 */
  InputWidth: number;
  /** u32 */
  InputHeight: number;
  /** Windows.Win32.Graphics.Dxgi.Common.DXGI_RATIONAL */
  OutputFrameRate: Uint8Array | Deno.PointerValue | null;
  /** u32 */
  OutputWidth: number;
  /** u32 */
  OutputHeight: number;
  /** Windows.Win32.Graphics.Direct3D11.D3D11_VIDEO_USAGE */
  Usage: D3D11_VIDEO_USAGE;
}

export const sizeofD3D11_VIDEO_PROCESSOR_CONTENT_DESC = 48;

export function allocD3D11_VIDEO_PROCESSOR_CONTENT_DESC(data?: Partial<D3D11_VIDEO_PROCESSOR_CONTENT_DESC>): Uint8Array {
  const buf = new Uint8Array(sizeofD3D11_VIDEO_PROCESSOR_CONTENT_DESC);
  const view = new DataView(buf.buffer);
  // 0x00: i32
  if (data?.InputFrameFormat !== undefined) view.setInt32(0, Number(data.InputFrameFormat), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.InputFrameRate !== undefined) view.setBigUint64(8, data.InputFrameRate === null ? 0n : BigInt(util.toPointer(data.InputFrameRate)), true);
  // 0x10: u32
  if (data?.InputWidth !== undefined) view.setUint32(16, Number(data.InputWidth), true);
  // 0x14: u32
  if (data?.InputHeight !== undefined) view.setUint32(20, Number(data.InputHeight), true);
  // 0x18: pointer
  if (data?.OutputFrameRate !== undefined) view.setBigUint64(24, data.OutputFrameRate === null ? 0n : BigInt(util.toPointer(data.OutputFrameRate)), true);
  // 0x20: u32
  if (data?.OutputWidth !== undefined) view.setUint32(32, Number(data.OutputWidth), true);
  // 0x24: u32
  if (data?.OutputHeight !== undefined) view.setUint32(36, Number(data.OutputHeight), true);
  // 0x28: i32
  if (data?.Usage !== undefined) view.setInt32(40, Number(data.Usage), true);
  // 0x2c: pad4
  return buf;
}

/**
 * Windows.Win32.Graphics.Direct3D11.D3D11_VIDEO_COLOR_RGBA (size: 16)
 */
export interface D3D11_VIDEO_COLOR_RGBA {
  /** f32 */
  R: number;
  /** f32 */
  G: number;
  /** f32 */
  B: number;
  /** f32 */
  A: number;
}

export const sizeofD3D11_VIDEO_COLOR_RGBA = 16;

export function allocD3D11_VIDEO_COLOR_RGBA(data?: Partial<D3D11_VIDEO_COLOR_RGBA>): Uint8Array {
  const buf = new Uint8Array(sizeofD3D11_VIDEO_COLOR_RGBA);
  const view = new DataView(buf.buffer);
  // 0x00: f32
  if (data?.R !== undefined) view.setFloat32(0, Number(data.R), true);
  // 0x04: f32
  if (data?.G !== undefined) view.setFloat32(4, Number(data.G), true);
  // 0x08: f32
  if (data?.B !== undefined) view.setFloat32(8, Number(data.B), true);
  // 0x0c: f32
  if (data?.A !== undefined) view.setFloat32(12, Number(data.A), true);
  return buf;
}

/**
 * Windows.Win32.Graphics.Direct3D11.D3D11_VIDEO_COLOR_YCbCrA (size: 16)
 */
export interface D3D11_VIDEO_COLOR_YCbCrA {
  /** f32 */
  Y: number;
  /** f32 */
  Cb: number;
  /** f32 */
  Cr: number;
  /** f32 */
  A: number;
}

export const sizeofD3D11_VIDEO_COLOR_YCbCrA = 16;

export function allocD3D11_VIDEO_COLOR_YCbCrA(data?: Partial<D3D11_VIDEO_COLOR_YCbCrA>): Uint8Array {
  const buf = new Uint8Array(sizeofD3D11_VIDEO_COLOR_YCbCrA);
  const view = new DataView(buf.buffer);
  // 0x00: f32
  if (data?.Y !== undefined) view.setFloat32(0, Number(data.Y), true);
  // 0x04: f32
  if (data?.Cb !== undefined) view.setFloat32(4, Number(data.Cb), true);
  // 0x08: f32
  if (data?.Cr !== undefined) view.setFloat32(8, Number(data.Cr), true);
  // 0x0c: f32
  if (data?.A !== undefined) view.setFloat32(12, Number(data.A), true);
  return buf;
}

/**
 * Windows.Win32.Graphics.Direct3D11.D3D11_VIDEO_COLOR (size: 8)
 */
export interface D3D11_VIDEO_COLOR {
  /** _Anonymous_e__Union */
  Anonymous: Uint8Array | Deno.PointerValue | null;
}

export const sizeofD3D11_VIDEO_COLOR = 8;

export function allocD3D11_VIDEO_COLOR(data?: Partial<D3D11_VIDEO_COLOR>): Uint8Array {
  const buf = new Uint8Array(sizeofD3D11_VIDEO_COLOR);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.Anonymous !== undefined) view.setBigUint64(0, data.Anonymous === null ? 0n : BigInt(util.toPointer(data.Anonymous)), true);
  return buf;
}

/**
 * Windows.Win32.Graphics.Direct3D11.D3D11_VIDEO_PROCESSOR_COLOR_SPACE (size: 8)
 */
export interface D3D11_VIDEO_PROCESSOR_COLOR_SPACE {
  /** u32 */
  _bitfield: number;
}

export const sizeofD3D11_VIDEO_PROCESSOR_COLOR_SPACE = 8;

export function allocD3D11_VIDEO_PROCESSOR_COLOR_SPACE(data?: Partial<D3D11_VIDEO_PROCESSOR_COLOR_SPACE>): Uint8Array {
  const buf = new Uint8Array(sizeofD3D11_VIDEO_PROCESSOR_COLOR_SPACE);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?._bitfield !== undefined) view.setUint32(0, Number(data._bitfield), true);
  // 0x04: pad4
  return buf;
}

/**
 * Windows.Win32.Graphics.Direct3D11.D3D11_VIDEO_PROCESSOR_STREAM (size: 72)
 */
export interface D3D11_VIDEO_PROCESSOR_STREAM {
  /** Windows.Win32.Foundation.BOOL */
  Enable: boolean;
  /** u32 */
  OutputIndex: number;
  /** u32 */
  InputFrameOrField: number;
  /** u32 */
  PastFrames: number;
  /** u32 */
  FutureFrames: number;
  /** ptr */
  ppPastSurfaces: Deno.PointerValue | Uint8Array | null;
  /** Windows.Win32.Graphics.Direct3D11.ID3D11VideoProcessorInputView */
  pInputSurface: Uint8Array | Deno.PointerValue | null;
  /** ptr */
  ppFutureSurfaces: Deno.PointerValue | Uint8Array | null;
  /** ptr */
  ppPastSurfacesRight: Deno.PointerValue | Uint8Array | null;
  /** Windows.Win32.Graphics.Direct3D11.ID3D11VideoProcessorInputView */
  pInputSurfaceRight: Uint8Array | Deno.PointerValue | null;
  /** ptr */
  ppFutureSurfacesRight: Deno.PointerValue | Uint8Array | null;
}

export const sizeofD3D11_VIDEO_PROCESSOR_STREAM = 72;

export function allocD3D11_VIDEO_PROCESSOR_STREAM(data?: Partial<D3D11_VIDEO_PROCESSOR_STREAM>): Uint8Array {
  const buf = new Uint8Array(sizeofD3D11_VIDEO_PROCESSOR_STREAM);
  const view = new DataView(buf.buffer);
  // 0x00: i32
  if (data?.Enable !== undefined) view.setInt32(0, Number(data.Enable), true);
  // 0x04: u32
  if (data?.OutputIndex !== undefined) view.setUint32(4, Number(data.OutputIndex), true);
  // 0x08: u32
  if (data?.InputFrameOrField !== undefined) view.setUint32(8, Number(data.InputFrameOrField), true);
  // 0x0c: u32
  if (data?.PastFrames !== undefined) view.setUint32(12, Number(data.PastFrames), true);
  // 0x10: u32
  if (data?.FutureFrames !== undefined) view.setUint32(16, Number(data.FutureFrames), true);
  // 0x14: pad4
  // 0x18: pointer
  if (data?.ppPastSurfaces !== undefined) view.setBigUint64(24, data.ppPastSurfaces === null ? 0n : BigInt(util.toPointer(data.ppPastSurfaces)), true);
  // 0x20: pointer
  if (data?.pInputSurface !== undefined) view.setBigUint64(32, data.pInputSurface === null ? 0n : BigInt(util.toPointer(data.pInputSurface)), true);
  // 0x28: pointer
  if (data?.ppFutureSurfaces !== undefined) view.setBigUint64(40, data.ppFutureSurfaces === null ? 0n : BigInt(util.toPointer(data.ppFutureSurfaces)), true);
  // 0x30: pointer
  if (data?.ppPastSurfacesRight !== undefined) view.setBigUint64(48, data.ppPastSurfacesRight === null ? 0n : BigInt(util.toPointer(data.ppPastSurfacesRight)), true);
  // 0x38: pointer
  if (data?.pInputSurfaceRight !== undefined) view.setBigUint64(56, data.pInputSurfaceRight === null ? 0n : BigInt(util.toPointer(data.pInputSurfaceRight)), true);
  // 0x40: pointer
  if (data?.ppFutureSurfacesRight !== undefined) view.setBigUint64(64, data.ppFutureSurfacesRight === null ? 0n : BigInt(util.toPointer(data.ppFutureSurfacesRight)), true);
  return buf;
}

/**
 * Windows.Win32.Graphics.Direct3D11.D3D11_OMAC (size: 8)
 */
export interface D3D11_OMAC {
  /** array */
  Omac: Deno.PointerValue | null;
}

export const sizeofD3D11_OMAC = 8;

export function allocD3D11_OMAC(data?: Partial<D3D11_OMAC>): Uint8Array {
  const buf = new Uint8Array(sizeofD3D11_OMAC);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.Omac !== undefined) view.setBigUint64(0, data.Omac === null ? 0n : BigInt(util.toPointer(data.Omac)), true);
  return buf;
}

export type HANDLE = Deno.PointerValue;

/**
 * Windows.Win32.Graphics.Direct3D11.D3D11_AUTHENTICATED_QUERY_INPUT (size: 24)
 */
export interface D3D11_AUTHENTICATED_QUERY_INPUT {
  /** System.Guid */
  QueryType: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Foundation.HANDLE */
  hChannel: Uint8Array | Deno.PointerValue | null;
  /** u32 */
  SequenceNumber: number;
}

export const sizeofD3D11_AUTHENTICATED_QUERY_INPUT = 24;

export function allocD3D11_AUTHENTICATED_QUERY_INPUT(data?: Partial<D3D11_AUTHENTICATED_QUERY_INPUT>): Uint8Array {
  const buf = new Uint8Array(sizeofD3D11_AUTHENTICATED_QUERY_INPUT);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.QueryType !== undefined) view.setBigUint64(0, data.QueryType === null ? 0n : BigInt(util.toPointer(data.QueryType)), true);
  // 0x08: pointer
  if (data?.hChannel !== undefined) view.setBigUint64(8, data.hChannel === null ? 0n : BigInt(util.toPointer(data.hChannel)), true);
  // 0x10: u32
  if (data?.SequenceNumber !== undefined) view.setUint32(16, Number(data.SequenceNumber), true);
  // 0x14: pad4
  return buf;
}

export type HRESULT = number;

/**
 * Windows.Win32.Graphics.Direct3D11.D3D11_AUTHENTICATED_QUERY_OUTPUT (size: 40)
 */
export interface D3D11_AUTHENTICATED_QUERY_OUTPUT {
  /** Windows.Win32.Graphics.Direct3D11.D3D11_OMAC */
  omac: Uint8Array | Deno.PointerValue | null;
  /** System.Guid */
  QueryType: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Foundation.HANDLE */
  hChannel: Uint8Array | Deno.PointerValue | null;
  /** u32 */
  SequenceNumber: number;
  /** Windows.Win32.Foundation.HRESULT */
  ReturnCode: Uint8Array | Deno.PointerValue | null;
}

export const sizeofD3D11_AUTHENTICATED_QUERY_OUTPUT = 40;

export function allocD3D11_AUTHENTICATED_QUERY_OUTPUT(data?: Partial<D3D11_AUTHENTICATED_QUERY_OUTPUT>): Uint8Array {
  const buf = new Uint8Array(sizeofD3D11_AUTHENTICATED_QUERY_OUTPUT);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.omac !== undefined) view.setBigUint64(0, data.omac === null ? 0n : BigInt(util.toPointer(data.omac)), true);
  // 0x08: pointer
  if (data?.QueryType !== undefined) view.setBigUint64(8, data.QueryType === null ? 0n : BigInt(util.toPointer(data.QueryType)), true);
  // 0x10: pointer
  if (data?.hChannel !== undefined) view.setBigUint64(16, data.hChannel === null ? 0n : BigInt(util.toPointer(data.hChannel)), true);
  // 0x18: u32
  if (data?.SequenceNumber !== undefined) view.setUint32(24, Number(data.SequenceNumber), true);
  // 0x1c: pad4
  // 0x20: pointer
  if (data?.ReturnCode !== undefined) view.setBigUint64(32, data.ReturnCode === null ? 0n : BigInt(util.toPointer(data.ReturnCode)), true);
  return buf;
}

/**
 * _Flags_e__Struct (size: 8)
 */
export interface _Flags_e__Struct {
  /** u32 */
  _bitfield: number;
}

export const sizeof_Flags_e__Struct = 8;

export function alloc_Flags_e__Struct(data?: Partial<_Flags_e__Struct>): Uint8Array {
  const buf = new Uint8Array(sizeof_Flags_e__Struct);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?._bitfield !== undefined) view.setUint32(0, Number(data._bitfield), true);
  // 0x04: pad4
  return buf;
}

/**
 * Windows.Win32.Graphics.Direct3D11.D3D11_AUTHENTICATED_PROTECTION_FLAGS (size: 16)
 */
export interface D3D11_AUTHENTICATED_PROTECTION_FLAGS {
  /** _Flags_e__Struct */
  Flags: Uint8Array | Deno.PointerValue | null;
  /** u32 */
  Value: number;
}

export const sizeofD3D11_AUTHENTICATED_PROTECTION_FLAGS = 16;

export function allocD3D11_AUTHENTICATED_PROTECTION_FLAGS(data?: Partial<D3D11_AUTHENTICATED_PROTECTION_FLAGS>): Uint8Array {
  const buf = new Uint8Array(sizeofD3D11_AUTHENTICATED_PROTECTION_FLAGS);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.Flags !== undefined) view.setBigUint64(0, data.Flags === null ? 0n : BigInt(util.toPointer(data.Flags)), true);
  // 0x08: u32
  if (data?.Value !== undefined) view.setUint32(8, Number(data.Value), true);
  // 0x0c: pad4
  return buf;
}

/**
 * Windows.Win32.Graphics.Direct3D11.D3D11_AUTHENTICATED_QUERY_PROTECTION_OUTPUT (size: 16)
 */
export interface D3D11_AUTHENTICATED_QUERY_PROTECTION_OUTPUT {
  /** Windows.Win32.Graphics.Direct3D11.D3D11_AUTHENTICATED_QUERY_OUTPUT */
  Output: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Graphics.Direct3D11.D3D11_AUTHENTICATED_PROTECTION_FLAGS */
  ProtectionFlags: Uint8Array | Deno.PointerValue | null;
}

export const sizeofD3D11_AUTHENTICATED_QUERY_PROTECTION_OUTPUT = 16;

export function allocD3D11_AUTHENTICATED_QUERY_PROTECTION_OUTPUT(data?: Partial<D3D11_AUTHENTICATED_QUERY_PROTECTION_OUTPUT>): Uint8Array {
  const buf = new Uint8Array(sizeofD3D11_AUTHENTICATED_QUERY_PROTECTION_OUTPUT);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.Output !== undefined) view.setBigUint64(0, data.Output === null ? 0n : BigInt(util.toPointer(data.Output)), true);
  // 0x08: pointer
  if (data?.ProtectionFlags !== undefined) view.setBigUint64(8, data.ProtectionFlags === null ? 0n : BigInt(util.toPointer(data.ProtectionFlags)), true);
  return buf;
}

/**
 * Windows.Win32.Graphics.Direct3D11.D3D11_AUTHENTICATED_QUERY_CHANNEL_TYPE_OUTPUT (size: 16)
 */
export interface D3D11_AUTHENTICATED_QUERY_CHANNEL_TYPE_OUTPUT {
  /** Windows.Win32.Graphics.Direct3D11.D3D11_AUTHENTICATED_QUERY_OUTPUT */
  Output: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Graphics.Direct3D11.D3D11_AUTHENTICATED_CHANNEL_TYPE */
  ChannelType: D3D11_AUTHENTICATED_CHANNEL_TYPE;
}

export const sizeofD3D11_AUTHENTICATED_QUERY_CHANNEL_TYPE_OUTPUT = 16;

export function allocD3D11_AUTHENTICATED_QUERY_CHANNEL_TYPE_OUTPUT(data?: Partial<D3D11_AUTHENTICATED_QUERY_CHANNEL_TYPE_OUTPUT>): Uint8Array {
  const buf = new Uint8Array(sizeofD3D11_AUTHENTICATED_QUERY_CHANNEL_TYPE_OUTPUT);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.Output !== undefined) view.setBigUint64(0, data.Output === null ? 0n : BigInt(util.toPointer(data.Output)), true);
  // 0x08: i32
  if (data?.ChannelType !== undefined) view.setInt32(8, Number(data.ChannelType), true);
  // 0x0c: pad4
  return buf;
}

/**
 * Windows.Win32.Graphics.Direct3D11.D3D11_AUTHENTICATED_QUERY_DEVICE_HANDLE_OUTPUT (size: 16)
 */
export interface D3D11_AUTHENTICATED_QUERY_DEVICE_HANDLE_OUTPUT {
  /** Windows.Win32.Graphics.Direct3D11.D3D11_AUTHENTICATED_QUERY_OUTPUT */
  Output: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Foundation.HANDLE */
  DeviceHandle: Uint8Array | Deno.PointerValue | null;
}

export const sizeofD3D11_AUTHENTICATED_QUERY_DEVICE_HANDLE_OUTPUT = 16;

export function allocD3D11_AUTHENTICATED_QUERY_DEVICE_HANDLE_OUTPUT(data?: Partial<D3D11_AUTHENTICATED_QUERY_DEVICE_HANDLE_OUTPUT>): Uint8Array {
  const buf = new Uint8Array(sizeofD3D11_AUTHENTICATED_QUERY_DEVICE_HANDLE_OUTPUT);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.Output !== undefined) view.setBigUint64(0, data.Output === null ? 0n : BigInt(util.toPointer(data.Output)), true);
  // 0x08: pointer
  if (data?.DeviceHandle !== undefined) view.setBigUint64(8, data.DeviceHandle === null ? 0n : BigInt(util.toPointer(data.DeviceHandle)), true);
  return buf;
}

/**
 * Windows.Win32.Graphics.Direct3D11.D3D11_AUTHENTICATED_QUERY_CRYPTO_SESSION_INPUT (size: 16)
 */
export interface D3D11_AUTHENTICATED_QUERY_CRYPTO_SESSION_INPUT {
  /** Windows.Win32.Graphics.Direct3D11.D3D11_AUTHENTICATED_QUERY_INPUT */
  Input: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Foundation.HANDLE */
  DecoderHandle: Uint8Array | Deno.PointerValue | null;
}

export const sizeofD3D11_AUTHENTICATED_QUERY_CRYPTO_SESSION_INPUT = 16;

export function allocD3D11_AUTHENTICATED_QUERY_CRYPTO_SESSION_INPUT(data?: Partial<D3D11_AUTHENTICATED_QUERY_CRYPTO_SESSION_INPUT>): Uint8Array {
  const buf = new Uint8Array(sizeofD3D11_AUTHENTICATED_QUERY_CRYPTO_SESSION_INPUT);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.Input !== undefined) view.setBigUint64(0, data.Input === null ? 0n : BigInt(util.toPointer(data.Input)), true);
  // 0x08: pointer
  if (data?.DecoderHandle !== undefined) view.setBigUint64(8, data.DecoderHandle === null ? 0n : BigInt(util.toPointer(data.DecoderHandle)), true);
  return buf;
}

/**
 * Windows.Win32.Graphics.Direct3D11.D3D11_AUTHENTICATED_QUERY_CRYPTO_SESSION_OUTPUT (size: 32)
 */
export interface D3D11_AUTHENTICATED_QUERY_CRYPTO_SESSION_OUTPUT {
  /** Windows.Win32.Graphics.Direct3D11.D3D11_AUTHENTICATED_QUERY_OUTPUT */
  Output: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Foundation.HANDLE */
  DecoderHandle: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Foundation.HANDLE */
  CryptoSessionHandle: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Foundation.HANDLE */
  DeviceHandle: Uint8Array | Deno.PointerValue | null;
}

export const sizeofD3D11_AUTHENTICATED_QUERY_CRYPTO_SESSION_OUTPUT = 32;

export function allocD3D11_AUTHENTICATED_QUERY_CRYPTO_SESSION_OUTPUT(data?: Partial<D3D11_AUTHENTICATED_QUERY_CRYPTO_SESSION_OUTPUT>): Uint8Array {
  const buf = new Uint8Array(sizeofD3D11_AUTHENTICATED_QUERY_CRYPTO_SESSION_OUTPUT);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.Output !== undefined) view.setBigUint64(0, data.Output === null ? 0n : BigInt(util.toPointer(data.Output)), true);
  // 0x08: pointer
  if (data?.DecoderHandle !== undefined) view.setBigUint64(8, data.DecoderHandle === null ? 0n : BigInt(util.toPointer(data.DecoderHandle)), true);
  // 0x10: pointer
  if (data?.CryptoSessionHandle !== undefined) view.setBigUint64(16, data.CryptoSessionHandle === null ? 0n : BigInt(util.toPointer(data.CryptoSessionHandle)), true);
  // 0x18: pointer
  if (data?.DeviceHandle !== undefined) view.setBigUint64(24, data.DeviceHandle === null ? 0n : BigInt(util.toPointer(data.DeviceHandle)), true);
  return buf;
}

/**
 * Windows.Win32.Graphics.Direct3D11.D3D11_AUTHENTICATED_QUERY_RESTRICTED_SHARED_RESOURCE_PROCESS_COUNT_OUTPUT (size: 16)
 */
export interface D3D11_AUTHENTICATED_QUERY_RESTRICTED_SHARED_RESOURCE_PROCESS_COUNT_OUTPUT {
  /** Windows.Win32.Graphics.Direct3D11.D3D11_AUTHENTICATED_QUERY_OUTPUT */
  Output: Uint8Array | Deno.PointerValue | null;
  /** u32 */
  RestrictedSharedResourceProcessCount: number;
}

export const sizeofD3D11_AUTHENTICATED_QUERY_RESTRICTED_SHARED_RESOURCE_PROCESS_COUNT_OUTPUT = 16;

export function allocD3D11_AUTHENTICATED_QUERY_RESTRICTED_SHARED_RESOURCE_PROCESS_COUNT_OUTPUT(data?: Partial<D3D11_AUTHENTICATED_QUERY_RESTRICTED_SHARED_RESOURCE_PROCESS_COUNT_OUTPUT>): Uint8Array {
  const buf = new Uint8Array(sizeofD3D11_AUTHENTICATED_QUERY_RESTRICTED_SHARED_RESOURCE_PROCESS_COUNT_OUTPUT);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.Output !== undefined) view.setBigUint64(0, data.Output === null ? 0n : BigInt(util.toPointer(data.Output)), true);
  // 0x08: u32
  if (data?.RestrictedSharedResourceProcessCount !== undefined) view.setUint32(8, Number(data.RestrictedSharedResourceProcessCount), true);
  // 0x0c: pad4
  return buf;
}

/**
 * Windows.Win32.Graphics.Direct3D11.D3D11_AUTHENTICATED_QUERY_RESTRICTED_SHARED_RESOURCE_PROCESS_INPUT (size: 16)
 */
export interface D3D11_AUTHENTICATED_QUERY_RESTRICTED_SHARED_RESOURCE_PROCESS_INPUT {
  /** Windows.Win32.Graphics.Direct3D11.D3D11_AUTHENTICATED_QUERY_INPUT */
  Input: Uint8Array | Deno.PointerValue | null;
  /** u32 */
  ProcessIndex: number;
}

export const sizeofD3D11_AUTHENTICATED_QUERY_RESTRICTED_SHARED_RESOURCE_PROCESS_INPUT = 16;

export function allocD3D11_AUTHENTICATED_QUERY_RESTRICTED_SHARED_RESOURCE_PROCESS_INPUT(data?: Partial<D3D11_AUTHENTICATED_QUERY_RESTRICTED_SHARED_RESOURCE_PROCESS_INPUT>): Uint8Array {
  const buf = new Uint8Array(sizeofD3D11_AUTHENTICATED_QUERY_RESTRICTED_SHARED_RESOURCE_PROCESS_INPUT);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.Input !== undefined) view.setBigUint64(0, data.Input === null ? 0n : BigInt(util.toPointer(data.Input)), true);
  // 0x08: u32
  if (data?.ProcessIndex !== undefined) view.setUint32(8, Number(data.ProcessIndex), true);
  // 0x0c: pad4
  return buf;
}

/**
 * Windows.Win32.Graphics.Direct3D11.D3D11_AUTHENTICATED_QUERY_RESTRICTED_SHARED_RESOURCE_PROCESS_OUTPUT (size: 24)
 */
export interface D3D11_AUTHENTICATED_QUERY_RESTRICTED_SHARED_RESOURCE_PROCESS_OUTPUT {
  /** Windows.Win32.Graphics.Direct3D11.D3D11_AUTHENTICATED_QUERY_OUTPUT */
  Output: Uint8Array | Deno.PointerValue | null;
  /** u32 */
  ProcessIndex: number;
  /** Windows.Win32.Graphics.Direct3D11.D3D11_AUTHENTICATED_PROCESS_IDENTIFIER_TYPE */
  ProcessIdentifier: D3D11_AUTHENTICATED_PROCESS_IDENTIFIER_TYPE;
  /** Windows.Win32.Foundation.HANDLE */
  ProcessHandle: Uint8Array | Deno.PointerValue | null;
}

export const sizeofD3D11_AUTHENTICATED_QUERY_RESTRICTED_SHARED_RESOURCE_PROCESS_OUTPUT = 24;

export function allocD3D11_AUTHENTICATED_QUERY_RESTRICTED_SHARED_RESOURCE_PROCESS_OUTPUT(data?: Partial<D3D11_AUTHENTICATED_QUERY_RESTRICTED_SHARED_RESOURCE_PROCESS_OUTPUT>): Uint8Array {
  const buf = new Uint8Array(sizeofD3D11_AUTHENTICATED_QUERY_RESTRICTED_SHARED_RESOURCE_PROCESS_OUTPUT);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.Output !== undefined) view.setBigUint64(0, data.Output === null ? 0n : BigInt(util.toPointer(data.Output)), true);
  // 0x08: u32
  if (data?.ProcessIndex !== undefined) view.setUint32(8, Number(data.ProcessIndex), true);
  // 0x0c: i32
  if (data?.ProcessIdentifier !== undefined) view.setInt32(12, Number(data.ProcessIdentifier), true);
  // 0x10: pointer
  if (data?.ProcessHandle !== undefined) view.setBigUint64(16, data.ProcessHandle === null ? 0n : BigInt(util.toPointer(data.ProcessHandle)), true);
  return buf;
}

/**
 * Windows.Win32.Graphics.Direct3D11.D3D11_AUTHENTICATED_QUERY_UNRESTRICTED_PROTECTED_SHARED_RESOURCE_COUNT_OUTPUT (size: 16)
 */
export interface D3D11_AUTHENTICATED_QUERY_UNRESTRICTED_PROTECTED_SHARED_RESOURCE_COUNT_OUTPUT {
  /** Windows.Win32.Graphics.Direct3D11.D3D11_AUTHENTICATED_QUERY_OUTPUT */
  Output: Uint8Array | Deno.PointerValue | null;
  /** u32 */
  UnrestrictedProtectedSharedResourceCount: number;
}

export const sizeofD3D11_AUTHENTICATED_QUERY_UNRESTRICTED_PROTECTED_SHARED_RESOURCE_COUNT_OUTPUT = 16;

export function allocD3D11_AUTHENTICATED_QUERY_UNRESTRICTED_PROTECTED_SHARED_RESOURCE_COUNT_OUTPUT(data?: Partial<D3D11_AUTHENTICATED_QUERY_UNRESTRICTED_PROTECTED_SHARED_RESOURCE_COUNT_OUTPUT>): Uint8Array {
  const buf = new Uint8Array(sizeofD3D11_AUTHENTICATED_QUERY_UNRESTRICTED_PROTECTED_SHARED_RESOURCE_COUNT_OUTPUT);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.Output !== undefined) view.setBigUint64(0, data.Output === null ? 0n : BigInt(util.toPointer(data.Output)), true);
  // 0x08: u32
  if (data?.UnrestrictedProtectedSharedResourceCount !== undefined) view.setUint32(8, Number(data.UnrestrictedProtectedSharedResourceCount), true);
  // 0x0c: pad4
  return buf;
}

/**
 * Windows.Win32.Graphics.Direct3D11.D3D11_AUTHENTICATED_QUERY_OUTPUT_ID_COUNT_INPUT (size: 24)
 */
export interface D3D11_AUTHENTICATED_QUERY_OUTPUT_ID_COUNT_INPUT {
  /** Windows.Win32.Graphics.Direct3D11.D3D11_AUTHENTICATED_QUERY_INPUT */
  Input: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Foundation.HANDLE */
  DeviceHandle: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Foundation.HANDLE */
  CryptoSessionHandle: Uint8Array | Deno.PointerValue | null;
}

export const sizeofD3D11_AUTHENTICATED_QUERY_OUTPUT_ID_COUNT_INPUT = 24;

export function allocD3D11_AUTHENTICATED_QUERY_OUTPUT_ID_COUNT_INPUT(data?: Partial<D3D11_AUTHENTICATED_QUERY_OUTPUT_ID_COUNT_INPUT>): Uint8Array {
  const buf = new Uint8Array(sizeofD3D11_AUTHENTICATED_QUERY_OUTPUT_ID_COUNT_INPUT);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.Input !== undefined) view.setBigUint64(0, data.Input === null ? 0n : BigInt(util.toPointer(data.Input)), true);
  // 0x08: pointer
  if (data?.DeviceHandle !== undefined) view.setBigUint64(8, data.DeviceHandle === null ? 0n : BigInt(util.toPointer(data.DeviceHandle)), true);
  // 0x10: pointer
  if (data?.CryptoSessionHandle !== undefined) view.setBigUint64(16, data.CryptoSessionHandle === null ? 0n : BigInt(util.toPointer(data.CryptoSessionHandle)), true);
  return buf;
}

/**
 * Windows.Win32.Graphics.Direct3D11.D3D11_AUTHENTICATED_QUERY_OUTPUT_ID_COUNT_OUTPUT (size: 32)
 */
export interface D3D11_AUTHENTICATED_QUERY_OUTPUT_ID_COUNT_OUTPUT {
  /** Windows.Win32.Graphics.Direct3D11.D3D11_AUTHENTICATED_QUERY_OUTPUT */
  Output: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Foundation.HANDLE */
  DeviceHandle: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Foundation.HANDLE */
  CryptoSessionHandle: Uint8Array | Deno.PointerValue | null;
  /** u32 */
  OutputIDCount: number;
}

export const sizeofD3D11_AUTHENTICATED_QUERY_OUTPUT_ID_COUNT_OUTPUT = 32;

export function allocD3D11_AUTHENTICATED_QUERY_OUTPUT_ID_COUNT_OUTPUT(data?: Partial<D3D11_AUTHENTICATED_QUERY_OUTPUT_ID_COUNT_OUTPUT>): Uint8Array {
  const buf = new Uint8Array(sizeofD3D11_AUTHENTICATED_QUERY_OUTPUT_ID_COUNT_OUTPUT);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.Output !== undefined) view.setBigUint64(0, data.Output === null ? 0n : BigInt(util.toPointer(data.Output)), true);
  // 0x08: pointer
  if (data?.DeviceHandle !== undefined) view.setBigUint64(8, data.DeviceHandle === null ? 0n : BigInt(util.toPointer(data.DeviceHandle)), true);
  // 0x10: pointer
  if (data?.CryptoSessionHandle !== undefined) view.setBigUint64(16, data.CryptoSessionHandle === null ? 0n : BigInt(util.toPointer(data.CryptoSessionHandle)), true);
  // 0x18: u32
  if (data?.OutputIDCount !== undefined) view.setUint32(24, Number(data.OutputIDCount), true);
  // 0x1c: pad4
  return buf;
}

/**
 * Windows.Win32.Graphics.Direct3D11.D3D11_AUTHENTICATED_QUERY_OUTPUT_ID_INPUT (size: 32)
 */
export interface D3D11_AUTHENTICATED_QUERY_OUTPUT_ID_INPUT {
  /** Windows.Win32.Graphics.Direct3D11.D3D11_AUTHENTICATED_QUERY_INPUT */
  Input: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Foundation.HANDLE */
  DeviceHandle: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Foundation.HANDLE */
  CryptoSessionHandle: Uint8Array | Deno.PointerValue | null;
  /** u32 */
  OutputIDIndex: number;
}

export const sizeofD3D11_AUTHENTICATED_QUERY_OUTPUT_ID_INPUT = 32;

export function allocD3D11_AUTHENTICATED_QUERY_OUTPUT_ID_INPUT(data?: Partial<D3D11_AUTHENTICATED_QUERY_OUTPUT_ID_INPUT>): Uint8Array {
  const buf = new Uint8Array(sizeofD3D11_AUTHENTICATED_QUERY_OUTPUT_ID_INPUT);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.Input !== undefined) view.setBigUint64(0, data.Input === null ? 0n : BigInt(util.toPointer(data.Input)), true);
  // 0x08: pointer
  if (data?.DeviceHandle !== undefined) view.setBigUint64(8, data.DeviceHandle === null ? 0n : BigInt(util.toPointer(data.DeviceHandle)), true);
  // 0x10: pointer
  if (data?.CryptoSessionHandle !== undefined) view.setBigUint64(16, data.CryptoSessionHandle === null ? 0n : BigInt(util.toPointer(data.CryptoSessionHandle)), true);
  // 0x18: u32
  if (data?.OutputIDIndex !== undefined) view.setUint32(24, Number(data.OutputIDIndex), true);
  // 0x1c: pad4
  return buf;
}

/**
 * Windows.Win32.Graphics.Direct3D11.D3D11_AUTHENTICATED_QUERY_OUTPUT_ID_OUTPUT (size: 40)
 */
export interface D3D11_AUTHENTICATED_QUERY_OUTPUT_ID_OUTPUT {
  /** Windows.Win32.Graphics.Direct3D11.D3D11_AUTHENTICATED_QUERY_OUTPUT */
  Output: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Foundation.HANDLE */
  DeviceHandle: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Foundation.HANDLE */
  CryptoSessionHandle: Uint8Array | Deno.PointerValue | null;
  /** u32 */
  OutputIDIndex: number;
  /** u64 */
  OutputID: Deno.PointerValue;
}

export const sizeofD3D11_AUTHENTICATED_QUERY_OUTPUT_ID_OUTPUT = 40;

export function allocD3D11_AUTHENTICATED_QUERY_OUTPUT_ID_OUTPUT(data?: Partial<D3D11_AUTHENTICATED_QUERY_OUTPUT_ID_OUTPUT>): Uint8Array {
  const buf = new Uint8Array(sizeofD3D11_AUTHENTICATED_QUERY_OUTPUT_ID_OUTPUT);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.Output !== undefined) view.setBigUint64(0, data.Output === null ? 0n : BigInt(util.toPointer(data.Output)), true);
  // 0x08: pointer
  if (data?.DeviceHandle !== undefined) view.setBigUint64(8, data.DeviceHandle === null ? 0n : BigInt(util.toPointer(data.DeviceHandle)), true);
  // 0x10: pointer
  if (data?.CryptoSessionHandle !== undefined) view.setBigUint64(16, data.CryptoSessionHandle === null ? 0n : BigInt(util.toPointer(data.CryptoSessionHandle)), true);
  // 0x18: u32
  if (data?.OutputIDIndex !== undefined) view.setUint32(24, Number(data.OutputIDIndex), true);
  // 0x1c: pad4
  // 0x20: u64
  if (data?.OutputID !== undefined) view.setBigUint64(32, BigInt(data.OutputID), true);
  return buf;
}

/**
 * Windows.Win32.Graphics.Direct3D11.D3D11_AUTHENTICATED_QUERY_ACCESSIBILITY_OUTPUT (size: 24)
 */
export interface D3D11_AUTHENTICATED_QUERY_ACCESSIBILITY_OUTPUT {
  /** Windows.Win32.Graphics.Direct3D11.D3D11_AUTHENTICATED_QUERY_OUTPUT */
  Output: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Graphics.Direct3D11.D3D11_BUS_TYPE */
  BusType: D3D11_BUS_TYPE;
  /** Windows.Win32.Foundation.BOOL */
  AccessibleInContiguousBlocks: boolean;
  /** Windows.Win32.Foundation.BOOL */
  AccessibleInNonContiguousBlocks: boolean;
}

export const sizeofD3D11_AUTHENTICATED_QUERY_ACCESSIBILITY_OUTPUT = 24;

export function allocD3D11_AUTHENTICATED_QUERY_ACCESSIBILITY_OUTPUT(data?: Partial<D3D11_AUTHENTICATED_QUERY_ACCESSIBILITY_OUTPUT>): Uint8Array {
  const buf = new Uint8Array(sizeofD3D11_AUTHENTICATED_QUERY_ACCESSIBILITY_OUTPUT);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.Output !== undefined) view.setBigUint64(0, data.Output === null ? 0n : BigInt(util.toPointer(data.Output)), true);
  // 0x08: i32
  if (data?.BusType !== undefined) view.setInt32(8, Number(data.BusType), true);
  // 0x0c: i32
  if (data?.AccessibleInContiguousBlocks !== undefined) view.setInt32(12, Number(data.AccessibleInContiguousBlocks), true);
  // 0x10: i32
  if (data?.AccessibleInNonContiguousBlocks !== undefined) view.setInt32(16, Number(data.AccessibleInNonContiguousBlocks), true);
  // 0x14: pad4
  return buf;
}

/**
 * Windows.Win32.Graphics.Direct3D11.D3D11_AUTHENTICATED_QUERY_ACCESSIBILITY_ENCRYPTION_GUID_COUNT_OUTPUT (size: 16)
 */
export interface D3D11_AUTHENTICATED_QUERY_ACCESSIBILITY_ENCRYPTION_GUID_COUNT_OUTPUT {
  /** Windows.Win32.Graphics.Direct3D11.D3D11_AUTHENTICATED_QUERY_OUTPUT */
  Output: Uint8Array | Deno.PointerValue | null;
  /** u32 */
  EncryptionGuidCount: number;
}

export const sizeofD3D11_AUTHENTICATED_QUERY_ACCESSIBILITY_ENCRYPTION_GUID_COUNT_OUTPUT = 16;

export function allocD3D11_AUTHENTICATED_QUERY_ACCESSIBILITY_ENCRYPTION_GUID_COUNT_OUTPUT(data?: Partial<D3D11_AUTHENTICATED_QUERY_ACCESSIBILITY_ENCRYPTION_GUID_COUNT_OUTPUT>): Uint8Array {
  const buf = new Uint8Array(sizeofD3D11_AUTHENTICATED_QUERY_ACCESSIBILITY_ENCRYPTION_GUID_COUNT_OUTPUT);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.Output !== undefined) view.setBigUint64(0, data.Output === null ? 0n : BigInt(util.toPointer(data.Output)), true);
  // 0x08: u32
  if (data?.EncryptionGuidCount !== undefined) view.setUint32(8, Number(data.EncryptionGuidCount), true);
  // 0x0c: pad4
  return buf;
}

/**
 * Windows.Win32.Graphics.Direct3D11.D3D11_AUTHENTICATED_QUERY_ACCESSIBILITY_ENCRYPTION_GUID_INPUT (size: 16)
 */
export interface D3D11_AUTHENTICATED_QUERY_ACCESSIBILITY_ENCRYPTION_GUID_INPUT {
  /** Windows.Win32.Graphics.Direct3D11.D3D11_AUTHENTICATED_QUERY_INPUT */
  Input: Uint8Array | Deno.PointerValue | null;
  /** u32 */
  EncryptionGuidIndex: number;
}

export const sizeofD3D11_AUTHENTICATED_QUERY_ACCESSIBILITY_ENCRYPTION_GUID_INPUT = 16;

export function allocD3D11_AUTHENTICATED_QUERY_ACCESSIBILITY_ENCRYPTION_GUID_INPUT(data?: Partial<D3D11_AUTHENTICATED_QUERY_ACCESSIBILITY_ENCRYPTION_GUID_INPUT>): Uint8Array {
  const buf = new Uint8Array(sizeofD3D11_AUTHENTICATED_QUERY_ACCESSIBILITY_ENCRYPTION_GUID_INPUT);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.Input !== undefined) view.setBigUint64(0, data.Input === null ? 0n : BigInt(util.toPointer(data.Input)), true);
  // 0x08: u32
  if (data?.EncryptionGuidIndex !== undefined) view.setUint32(8, Number(data.EncryptionGuidIndex), true);
  // 0x0c: pad4
  return buf;
}

/**
 * Windows.Win32.Graphics.Direct3D11.D3D11_AUTHENTICATED_QUERY_ACCESSIBILITY_ENCRYPTION_GUID_OUTPUT (size: 24)
 */
export interface D3D11_AUTHENTICATED_QUERY_ACCESSIBILITY_ENCRYPTION_GUID_OUTPUT {
  /** Windows.Win32.Graphics.Direct3D11.D3D11_AUTHENTICATED_QUERY_OUTPUT */
  Output: Uint8Array | Deno.PointerValue | null;
  /** u32 */
  EncryptionGuidIndex: number;
  /** System.Guid */
  EncryptionGuid: Uint8Array | Deno.PointerValue | null;
}

export const sizeofD3D11_AUTHENTICATED_QUERY_ACCESSIBILITY_ENCRYPTION_GUID_OUTPUT = 24;

export function allocD3D11_AUTHENTICATED_QUERY_ACCESSIBILITY_ENCRYPTION_GUID_OUTPUT(data?: Partial<D3D11_AUTHENTICATED_QUERY_ACCESSIBILITY_ENCRYPTION_GUID_OUTPUT>): Uint8Array {
  const buf = new Uint8Array(sizeofD3D11_AUTHENTICATED_QUERY_ACCESSIBILITY_ENCRYPTION_GUID_OUTPUT);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.Output !== undefined) view.setBigUint64(0, data.Output === null ? 0n : BigInt(util.toPointer(data.Output)), true);
  // 0x08: u32
  if (data?.EncryptionGuidIndex !== undefined) view.setUint32(8, Number(data.EncryptionGuidIndex), true);
  // 0x0c: pad4
  // 0x10: pointer
  if (data?.EncryptionGuid !== undefined) view.setBigUint64(16, data.EncryptionGuid === null ? 0n : BigInt(util.toPointer(data.EncryptionGuid)), true);
  return buf;
}

/**
 * Windows.Win32.Graphics.Direct3D11.D3D11_AUTHENTICATED_QUERY_CURRENT_ACCESSIBILITY_ENCRYPTION_OUTPUT (size: 16)
 */
export interface D3D11_AUTHENTICATED_QUERY_CURRENT_ACCESSIBILITY_ENCRYPTION_OUTPUT {
  /** Windows.Win32.Graphics.Direct3D11.D3D11_AUTHENTICATED_QUERY_OUTPUT */
  Output: Uint8Array | Deno.PointerValue | null;
  /** System.Guid */
  EncryptionGuid: Uint8Array | Deno.PointerValue | null;
}

export const sizeofD3D11_AUTHENTICATED_QUERY_CURRENT_ACCESSIBILITY_ENCRYPTION_OUTPUT = 16;

export function allocD3D11_AUTHENTICATED_QUERY_CURRENT_ACCESSIBILITY_ENCRYPTION_OUTPUT(data?: Partial<D3D11_AUTHENTICATED_QUERY_CURRENT_ACCESSIBILITY_ENCRYPTION_OUTPUT>): Uint8Array {
  const buf = new Uint8Array(sizeofD3D11_AUTHENTICATED_QUERY_CURRENT_ACCESSIBILITY_ENCRYPTION_OUTPUT);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.Output !== undefined) view.setBigUint64(0, data.Output === null ? 0n : BigInt(util.toPointer(data.Output)), true);
  // 0x08: pointer
  if (data?.EncryptionGuid !== undefined) view.setBigUint64(8, data.EncryptionGuid === null ? 0n : BigInt(util.toPointer(data.EncryptionGuid)), true);
  return buf;
}

/**
 * Windows.Win32.Graphics.Direct3D11.D3D11_AUTHENTICATED_CONFIGURE_INPUT (size: 32)
 */
export interface D3D11_AUTHENTICATED_CONFIGURE_INPUT {
  /** Windows.Win32.Graphics.Direct3D11.D3D11_OMAC */
  omac: Uint8Array | Deno.PointerValue | null;
  /** System.Guid */
  ConfigureType: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Foundation.HANDLE */
  hChannel: Uint8Array | Deno.PointerValue | null;
  /** u32 */
  SequenceNumber: number;
}

export const sizeofD3D11_AUTHENTICATED_CONFIGURE_INPUT = 32;

export function allocD3D11_AUTHENTICATED_CONFIGURE_INPUT(data?: Partial<D3D11_AUTHENTICATED_CONFIGURE_INPUT>): Uint8Array {
  const buf = new Uint8Array(sizeofD3D11_AUTHENTICATED_CONFIGURE_INPUT);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.omac !== undefined) view.setBigUint64(0, data.omac === null ? 0n : BigInt(util.toPointer(data.omac)), true);
  // 0x08: pointer
  if (data?.ConfigureType !== undefined) view.setBigUint64(8, data.ConfigureType === null ? 0n : BigInt(util.toPointer(data.ConfigureType)), true);
  // 0x10: pointer
  if (data?.hChannel !== undefined) view.setBigUint64(16, data.hChannel === null ? 0n : BigInt(util.toPointer(data.hChannel)), true);
  // 0x18: u32
  if (data?.SequenceNumber !== undefined) view.setUint32(24, Number(data.SequenceNumber), true);
  // 0x1c: pad4
  return buf;
}

/**
 * Windows.Win32.Graphics.Direct3D11.D3D11_AUTHENTICATED_CONFIGURE_OUTPUT (size: 40)
 */
export interface D3D11_AUTHENTICATED_CONFIGURE_OUTPUT {
  /** Windows.Win32.Graphics.Direct3D11.D3D11_OMAC */
  omac: Uint8Array | Deno.PointerValue | null;
  /** System.Guid */
  ConfigureType: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Foundation.HANDLE */
  hChannel: Uint8Array | Deno.PointerValue | null;
  /** u32 */
  SequenceNumber: number;
  /** Windows.Win32.Foundation.HRESULT */
  ReturnCode: Uint8Array | Deno.PointerValue | null;
}

export const sizeofD3D11_AUTHENTICATED_CONFIGURE_OUTPUT = 40;

export function allocD3D11_AUTHENTICATED_CONFIGURE_OUTPUT(data?: Partial<D3D11_AUTHENTICATED_CONFIGURE_OUTPUT>): Uint8Array {
  const buf = new Uint8Array(sizeofD3D11_AUTHENTICATED_CONFIGURE_OUTPUT);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.omac !== undefined) view.setBigUint64(0, data.omac === null ? 0n : BigInt(util.toPointer(data.omac)), true);
  // 0x08: pointer
  if (data?.ConfigureType !== undefined) view.setBigUint64(8, data.ConfigureType === null ? 0n : BigInt(util.toPointer(data.ConfigureType)), true);
  // 0x10: pointer
  if (data?.hChannel !== undefined) view.setBigUint64(16, data.hChannel === null ? 0n : BigInt(util.toPointer(data.hChannel)), true);
  // 0x18: u32
  if (data?.SequenceNumber !== undefined) view.setUint32(24, Number(data.SequenceNumber), true);
  // 0x1c: pad4
  // 0x20: pointer
  if (data?.ReturnCode !== undefined) view.setBigUint64(32, data.ReturnCode === null ? 0n : BigInt(util.toPointer(data.ReturnCode)), true);
  return buf;
}

/**
 * Windows.Win32.Graphics.Direct3D11.D3D11_AUTHENTICATED_CONFIGURE_INITIALIZE_INPUT (size: 16)
 */
export interface D3D11_AUTHENTICATED_CONFIGURE_INITIALIZE_INPUT {
  /** Windows.Win32.Graphics.Direct3D11.D3D11_AUTHENTICATED_CONFIGURE_INPUT */
  Parameters: Uint8Array | Deno.PointerValue | null;
  /** u32 */
  StartSequenceQuery: number;
  /** u32 */
  StartSequenceConfigure: number;
}

export const sizeofD3D11_AUTHENTICATED_CONFIGURE_INITIALIZE_INPUT = 16;

export function allocD3D11_AUTHENTICATED_CONFIGURE_INITIALIZE_INPUT(data?: Partial<D3D11_AUTHENTICATED_CONFIGURE_INITIALIZE_INPUT>): Uint8Array {
  const buf = new Uint8Array(sizeofD3D11_AUTHENTICATED_CONFIGURE_INITIALIZE_INPUT);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.Parameters !== undefined) view.setBigUint64(0, data.Parameters === null ? 0n : BigInt(util.toPointer(data.Parameters)), true);
  // 0x08: u32
  if (data?.StartSequenceQuery !== undefined) view.setUint32(8, Number(data.StartSequenceQuery), true);
  // 0x0c: u32
  if (data?.StartSequenceConfigure !== undefined) view.setUint32(12, Number(data.StartSequenceConfigure), true);
  return buf;
}

/**
 * Windows.Win32.Graphics.Direct3D11.D3D11_AUTHENTICATED_CONFIGURE_PROTECTION_INPUT (size: 16)
 */
export interface D3D11_AUTHENTICATED_CONFIGURE_PROTECTION_INPUT {
  /** Windows.Win32.Graphics.Direct3D11.D3D11_AUTHENTICATED_CONFIGURE_INPUT */
  Parameters: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Graphics.Direct3D11.D3D11_AUTHENTICATED_PROTECTION_FLAGS */
  Protections: Uint8Array | Deno.PointerValue | null;
}

export const sizeofD3D11_AUTHENTICATED_CONFIGURE_PROTECTION_INPUT = 16;

export function allocD3D11_AUTHENTICATED_CONFIGURE_PROTECTION_INPUT(data?: Partial<D3D11_AUTHENTICATED_CONFIGURE_PROTECTION_INPUT>): Uint8Array {
  const buf = new Uint8Array(sizeofD3D11_AUTHENTICATED_CONFIGURE_PROTECTION_INPUT);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.Parameters !== undefined) view.setBigUint64(0, data.Parameters === null ? 0n : BigInt(util.toPointer(data.Parameters)), true);
  // 0x08: pointer
  if (data?.Protections !== undefined) view.setBigUint64(8, data.Protections === null ? 0n : BigInt(util.toPointer(data.Protections)), true);
  return buf;
}

/**
 * Windows.Win32.Graphics.Direct3D11.D3D11_AUTHENTICATED_CONFIGURE_CRYPTO_SESSION_INPUT (size: 32)
 */
export interface D3D11_AUTHENTICATED_CONFIGURE_CRYPTO_SESSION_INPUT {
  /** Windows.Win32.Graphics.Direct3D11.D3D11_AUTHENTICATED_CONFIGURE_INPUT */
  Parameters: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Foundation.HANDLE */
  DecoderHandle: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Foundation.HANDLE */
  CryptoSessionHandle: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Foundation.HANDLE */
  DeviceHandle: Uint8Array | Deno.PointerValue | null;
}

export const sizeofD3D11_AUTHENTICATED_CONFIGURE_CRYPTO_SESSION_INPUT = 32;

export function allocD3D11_AUTHENTICATED_CONFIGURE_CRYPTO_SESSION_INPUT(data?: Partial<D3D11_AUTHENTICATED_CONFIGURE_CRYPTO_SESSION_INPUT>): Uint8Array {
  const buf = new Uint8Array(sizeofD3D11_AUTHENTICATED_CONFIGURE_CRYPTO_SESSION_INPUT);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.Parameters !== undefined) view.setBigUint64(0, data.Parameters === null ? 0n : BigInt(util.toPointer(data.Parameters)), true);
  // 0x08: pointer
  if (data?.DecoderHandle !== undefined) view.setBigUint64(8, data.DecoderHandle === null ? 0n : BigInt(util.toPointer(data.DecoderHandle)), true);
  // 0x10: pointer
  if (data?.CryptoSessionHandle !== undefined) view.setBigUint64(16, data.CryptoSessionHandle === null ? 0n : BigInt(util.toPointer(data.CryptoSessionHandle)), true);
  // 0x18: pointer
  if (data?.DeviceHandle !== undefined) view.setBigUint64(24, data.DeviceHandle === null ? 0n : BigInt(util.toPointer(data.DeviceHandle)), true);
  return buf;
}

/**
 * Windows.Win32.Graphics.Direct3D11.D3D11_AUTHENTICATED_CONFIGURE_SHARED_RESOURCE_INPUT (size: 32)
 */
export interface D3D11_AUTHENTICATED_CONFIGURE_SHARED_RESOURCE_INPUT {
  /** Windows.Win32.Graphics.Direct3D11.D3D11_AUTHENTICATED_CONFIGURE_INPUT */
  Parameters: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Graphics.Direct3D11.D3D11_AUTHENTICATED_PROCESS_IDENTIFIER_TYPE */
  ProcessType: D3D11_AUTHENTICATED_PROCESS_IDENTIFIER_TYPE;
  /** Windows.Win32.Foundation.HANDLE */
  ProcessHandle: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Foundation.BOOL */
  AllowAccess: boolean;
}

export const sizeofD3D11_AUTHENTICATED_CONFIGURE_SHARED_RESOURCE_INPUT = 32;

export function allocD3D11_AUTHENTICATED_CONFIGURE_SHARED_RESOURCE_INPUT(data?: Partial<D3D11_AUTHENTICATED_CONFIGURE_SHARED_RESOURCE_INPUT>): Uint8Array {
  const buf = new Uint8Array(sizeofD3D11_AUTHENTICATED_CONFIGURE_SHARED_RESOURCE_INPUT);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.Parameters !== undefined) view.setBigUint64(0, data.Parameters === null ? 0n : BigInt(util.toPointer(data.Parameters)), true);
  // 0x08: i32
  if (data?.ProcessType !== undefined) view.setInt32(8, Number(data.ProcessType), true);
  // 0x0c: pad4
  // 0x10: pointer
  if (data?.ProcessHandle !== undefined) view.setBigUint64(16, data.ProcessHandle === null ? 0n : BigInt(util.toPointer(data.ProcessHandle)), true);
  // 0x18: i32
  if (data?.AllowAccess !== undefined) view.setInt32(24, Number(data.AllowAccess), true);
  // 0x1c: pad4
  return buf;
}

/**
 * Windows.Win32.Graphics.Direct3D11.D3D11_AUTHENTICATED_CONFIGURE_ACCESSIBLE_ENCRYPTION_INPUT (size: 16)
 */
export interface D3D11_AUTHENTICATED_CONFIGURE_ACCESSIBLE_ENCRYPTION_INPUT {
  /** Windows.Win32.Graphics.Direct3D11.D3D11_AUTHENTICATED_CONFIGURE_INPUT */
  Parameters: Uint8Array | Deno.PointerValue | null;
  /** System.Guid */
  EncryptionGuid: Uint8Array | Deno.PointerValue | null;
}

export const sizeofD3D11_AUTHENTICATED_CONFIGURE_ACCESSIBLE_ENCRYPTION_INPUT = 16;

export function allocD3D11_AUTHENTICATED_CONFIGURE_ACCESSIBLE_ENCRYPTION_INPUT(data?: Partial<D3D11_AUTHENTICATED_CONFIGURE_ACCESSIBLE_ENCRYPTION_INPUT>): Uint8Array {
  const buf = new Uint8Array(sizeofD3D11_AUTHENTICATED_CONFIGURE_ACCESSIBLE_ENCRYPTION_INPUT);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.Parameters !== undefined) view.setBigUint64(0, data.Parameters === null ? 0n : BigInt(util.toPointer(data.Parameters)), true);
  // 0x08: pointer
  if (data?.EncryptionGuid !== undefined) view.setBigUint64(8, data.EncryptionGuid === null ? 0n : BigInt(util.toPointer(data.EncryptionGuid)), true);
  return buf;
}

/**
 * Windows.Win32.Graphics.Direct3D11.D3D11_TEX2D_VDOV (size: 8)
 */
export interface D3D11_TEX2D_VDOV {
  /** u32 */
  ArraySlice: number;
}

export const sizeofD3D11_TEX2D_VDOV = 8;

export function allocD3D11_TEX2D_VDOV(data?: Partial<D3D11_TEX2D_VDOV>): Uint8Array {
  const buf = new Uint8Array(sizeofD3D11_TEX2D_VDOV);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.ArraySlice !== undefined) view.setUint32(0, Number(data.ArraySlice), true);
  // 0x04: pad4
  return buf;
}

/**
 * Windows.Win32.Graphics.Direct3D11.D3D11_VIDEO_DECODER_OUTPUT_VIEW_DESC (size: 24)
 */
export interface D3D11_VIDEO_DECODER_OUTPUT_VIEW_DESC {
  /** System.Guid */
  DecodeProfile: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Graphics.Direct3D11.D3D11_VDOV_DIMENSION */
  ViewDimension: D3D11_VDOV_DIMENSION;
  /** _Anonymous_e__Union */
  Anonymous: Uint8Array | Deno.PointerValue | null;
}

export const sizeofD3D11_VIDEO_DECODER_OUTPUT_VIEW_DESC = 24;

export function allocD3D11_VIDEO_DECODER_OUTPUT_VIEW_DESC(data?: Partial<D3D11_VIDEO_DECODER_OUTPUT_VIEW_DESC>): Uint8Array {
  const buf = new Uint8Array(sizeofD3D11_VIDEO_DECODER_OUTPUT_VIEW_DESC);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.DecodeProfile !== undefined) view.setBigUint64(0, data.DecodeProfile === null ? 0n : BigInt(util.toPointer(data.DecodeProfile)), true);
  // 0x08: i32
  if (data?.ViewDimension !== undefined) view.setInt32(8, Number(data.ViewDimension), true);
  // 0x0c: pad4
  // 0x10: pointer
  if (data?.Anonymous !== undefined) view.setBigUint64(16, data.Anonymous === null ? 0n : BigInt(util.toPointer(data.Anonymous)), true);
  return buf;
}

/**
 * Windows.Win32.Graphics.Direct3D11.D3D11_TEX2D_VPIV (size: 8)
 */
export interface D3D11_TEX2D_VPIV {
  /** u32 */
  MipSlice: number;
  /** u32 */
  ArraySlice: number;
}

export const sizeofD3D11_TEX2D_VPIV = 8;

export function allocD3D11_TEX2D_VPIV(data?: Partial<D3D11_TEX2D_VPIV>): Uint8Array {
  const buf = new Uint8Array(sizeofD3D11_TEX2D_VPIV);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.MipSlice !== undefined) view.setUint32(0, Number(data.MipSlice), true);
  // 0x04: u32
  if (data?.ArraySlice !== undefined) view.setUint32(4, Number(data.ArraySlice), true);
  return buf;
}

/**
 * Windows.Win32.Graphics.Direct3D11.D3D11_VIDEO_PROCESSOR_INPUT_VIEW_DESC (size: 16)
 */
export interface D3D11_VIDEO_PROCESSOR_INPUT_VIEW_DESC {
  /** u32 */
  FourCC: number;
  /** Windows.Win32.Graphics.Direct3D11.D3D11_VPIV_DIMENSION */
  ViewDimension: D3D11_VPIV_DIMENSION;
  /** _Anonymous_e__Union */
  Anonymous: Uint8Array | Deno.PointerValue | null;
}

export const sizeofD3D11_VIDEO_PROCESSOR_INPUT_VIEW_DESC = 16;

export function allocD3D11_VIDEO_PROCESSOR_INPUT_VIEW_DESC(data?: Partial<D3D11_VIDEO_PROCESSOR_INPUT_VIEW_DESC>): Uint8Array {
  const buf = new Uint8Array(sizeofD3D11_VIDEO_PROCESSOR_INPUT_VIEW_DESC);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.FourCC !== undefined) view.setUint32(0, Number(data.FourCC), true);
  // 0x04: i32
  if (data?.ViewDimension !== undefined) view.setInt32(4, Number(data.ViewDimension), true);
  // 0x08: pointer
  if (data?.Anonymous !== undefined) view.setBigUint64(8, data.Anonymous === null ? 0n : BigInt(util.toPointer(data.Anonymous)), true);
  return buf;
}

/**
 * Windows.Win32.Graphics.Direct3D11.D3D11_TEX2D_VPOV (size: 8)
 */
export interface D3D11_TEX2D_VPOV {
  /** u32 */
  MipSlice: number;
}

export const sizeofD3D11_TEX2D_VPOV = 8;

export function allocD3D11_TEX2D_VPOV(data?: Partial<D3D11_TEX2D_VPOV>): Uint8Array {
  const buf = new Uint8Array(sizeofD3D11_TEX2D_VPOV);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.MipSlice !== undefined) view.setUint32(0, Number(data.MipSlice), true);
  // 0x04: pad4
  return buf;
}

/**
 * Windows.Win32.Graphics.Direct3D11.D3D11_TEX2D_ARRAY_VPOV (size: 16)
 */
export interface D3D11_TEX2D_ARRAY_VPOV {
  /** u32 */
  MipSlice: number;
  /** u32 */
  FirstArraySlice: number;
  /** u32 */
  ArraySize: number;
}

export const sizeofD3D11_TEX2D_ARRAY_VPOV = 16;

export function allocD3D11_TEX2D_ARRAY_VPOV(data?: Partial<D3D11_TEX2D_ARRAY_VPOV>): Uint8Array {
  const buf = new Uint8Array(sizeofD3D11_TEX2D_ARRAY_VPOV);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.MipSlice !== undefined) view.setUint32(0, Number(data.MipSlice), true);
  // 0x04: u32
  if (data?.FirstArraySlice !== undefined) view.setUint32(4, Number(data.FirstArraySlice), true);
  // 0x08: u32
  if (data?.ArraySize !== undefined) view.setUint32(8, Number(data.ArraySize), true);
  // 0x0c: pad4
  return buf;
}

/**
 * Windows.Win32.Graphics.Direct3D11.D3D11_VIDEO_PROCESSOR_OUTPUT_VIEW_DESC (size: 16)
 */
export interface D3D11_VIDEO_PROCESSOR_OUTPUT_VIEW_DESC {
  /** Windows.Win32.Graphics.Direct3D11.D3D11_VPOV_DIMENSION */
  ViewDimension: D3D11_VPOV_DIMENSION;
  /** _Anonymous_e__Union */
  Anonymous: Uint8Array | Deno.PointerValue | null;
}

export const sizeofD3D11_VIDEO_PROCESSOR_OUTPUT_VIEW_DESC = 16;

export function allocD3D11_VIDEO_PROCESSOR_OUTPUT_VIEW_DESC(data?: Partial<D3D11_VIDEO_PROCESSOR_OUTPUT_VIEW_DESC>): Uint8Array {
  const buf = new Uint8Array(sizeofD3D11_VIDEO_PROCESSOR_OUTPUT_VIEW_DESC);
  const view = new DataView(buf.buffer);
  // 0x00: i32
  if (data?.ViewDimension !== undefined) view.setInt32(0, Number(data.ViewDimension), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.Anonymous !== undefined) view.setBigUint64(8, data.Anonymous === null ? 0n : BigInt(util.toPointer(data.Anonymous)), true);
  return buf;
}

/**
 * Windows.Win32.Graphics.Direct3D11.D3D11_MESSAGE (size: 32)
 */
export interface D3D11_MESSAGE {
  /** Windows.Win32.Graphics.Direct3D11.D3D11_MESSAGE_CATEGORY */
  Category: D3D11_MESSAGE_CATEGORY;
  /** Windows.Win32.Graphics.Direct3D11.D3D11_MESSAGE_SEVERITY */
  Severity: D3D11_MESSAGE_SEVERITY;
  /** Windows.Win32.Graphics.Direct3D11.D3D11_MESSAGE_ID */
  ID: D3D11_MESSAGE_ID;
  /** ptr */
  pDescription: Deno.PointerValue | Uint8Array | null;
  /** usize */
  DescriptionByteLength: Deno.PointerValue;
}

export const sizeofD3D11_MESSAGE = 32;

export function allocD3D11_MESSAGE(data?: Partial<D3D11_MESSAGE>): Uint8Array {
  const buf = new Uint8Array(sizeofD3D11_MESSAGE);
  const view = new DataView(buf.buffer);
  // 0x00: i32
  if (data?.Category !== undefined) view.setInt32(0, Number(data.Category), true);
  // 0x04: i32
  if (data?.Severity !== undefined) view.setInt32(4, Number(data.Severity), true);
  // 0x08: i32
  if (data?.ID !== undefined) view.setInt32(8, Number(data.ID), true);
  // 0x0c: pad4
  // 0x10: pointer
  if (data?.pDescription !== undefined) view.setBigUint64(16, data.pDescription === null ? 0n : BigInt(util.toPointer(data.pDescription)), true);
  // 0x18: usize
  if (data?.DescriptionByteLength !== undefined) view.setBigUint64(24, BigInt(data.DescriptionByteLength), true);
  return buf;
}

/**
 * Windows.Win32.Graphics.Direct3D11.D3D11_INFO_QUEUE_FILTER_DESC (size: 48)
 */
export interface D3D11_INFO_QUEUE_FILTER_DESC {
  /** u32 */
  NumCategories: number;
  /** ptr */
  pCategoryList: Deno.PointerValue | Uint8Array | null;
  /** u32 */
  NumSeverities: number;
  /** ptr */
  pSeverityList: Deno.PointerValue | Uint8Array | null;
  /** u32 */
  NumIDs: number;
  /** ptr */
  pIDList: Deno.PointerValue | Uint8Array | null;
}

export const sizeofD3D11_INFO_QUEUE_FILTER_DESC = 48;

export function allocD3D11_INFO_QUEUE_FILTER_DESC(data?: Partial<D3D11_INFO_QUEUE_FILTER_DESC>): Uint8Array {
  const buf = new Uint8Array(sizeofD3D11_INFO_QUEUE_FILTER_DESC);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.NumCategories !== undefined) view.setUint32(0, Number(data.NumCategories), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.pCategoryList !== undefined) view.setBigUint64(8, data.pCategoryList === null ? 0n : BigInt(util.toPointer(data.pCategoryList)), true);
  // 0x10: u32
  if (data?.NumSeverities !== undefined) view.setUint32(16, Number(data.NumSeverities), true);
  // 0x14: pad4
  // 0x18: pointer
  if (data?.pSeverityList !== undefined) view.setBigUint64(24, data.pSeverityList === null ? 0n : BigInt(util.toPointer(data.pSeverityList)), true);
  // 0x20: u32
  if (data?.NumIDs !== undefined) view.setUint32(32, Number(data.NumIDs), true);
  // 0x24: pad4
  // 0x28: pointer
  if (data?.pIDList !== undefined) view.setBigUint64(40, data.pIDList === null ? 0n : BigInt(util.toPointer(data.pIDList)), true);
  return buf;
}

/**
 * Windows.Win32.Graphics.Direct3D11.D3D11_INFO_QUEUE_FILTER (size: 16)
 */
export interface D3D11_INFO_QUEUE_FILTER {
  /** Windows.Win32.Graphics.Direct3D11.D3D11_INFO_QUEUE_FILTER_DESC */
  AllowList: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Graphics.Direct3D11.D3D11_INFO_QUEUE_FILTER_DESC */
  DenyList: Uint8Array | Deno.PointerValue | null;
}

export const sizeofD3D11_INFO_QUEUE_FILTER = 16;

export function allocD3D11_INFO_QUEUE_FILTER(data?: Partial<D3D11_INFO_QUEUE_FILTER>): Uint8Array {
  const buf = new Uint8Array(sizeofD3D11_INFO_QUEUE_FILTER);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.AllowList !== undefined) view.setBigUint64(0, data.AllowList === null ? 0n : BigInt(util.toPointer(data.AllowList)), true);
  // 0x08: pointer
  if (data?.DenyList !== undefined) view.setBigUint64(8, data.DenyList === null ? 0n : BigInt(util.toPointer(data.DenyList)), true);
  return buf;
}

/**
 * Windows.Win32.Graphics.Direct3D11.D3D11_RENDER_TARGET_BLEND_DESC1 (size: 40)
 */
export interface D3D11_RENDER_TARGET_BLEND_DESC1 {
  /** Windows.Win32.Foundation.BOOL */
  BlendEnable: boolean;
  /** Windows.Win32.Foundation.BOOL */
  LogicOpEnable: boolean;
  /** Windows.Win32.Graphics.Direct3D11.D3D11_BLEND */
  SrcBlend: D3D11_BLEND;
  /** Windows.Win32.Graphics.Direct3D11.D3D11_BLEND */
  DestBlend: D3D11_BLEND;
  /** Windows.Win32.Graphics.Direct3D11.D3D11_BLEND_OP */
  BlendOp: D3D11_BLEND_OP;
  /** Windows.Win32.Graphics.Direct3D11.D3D11_BLEND */
  SrcBlendAlpha: D3D11_BLEND;
  /** Windows.Win32.Graphics.Direct3D11.D3D11_BLEND */
  DestBlendAlpha: D3D11_BLEND;
  /** Windows.Win32.Graphics.Direct3D11.D3D11_BLEND_OP */
  BlendOpAlpha: D3D11_BLEND_OP;
  /** Windows.Win32.Graphics.Direct3D11.D3D11_LOGIC_OP */
  LogicOp: D3D11_LOGIC_OP;
  /** u8 */
  RenderTargetWriteMask: number;
}

export const sizeofD3D11_RENDER_TARGET_BLEND_DESC1 = 40;

export function allocD3D11_RENDER_TARGET_BLEND_DESC1(data?: Partial<D3D11_RENDER_TARGET_BLEND_DESC1>): Uint8Array {
  const buf = new Uint8Array(sizeofD3D11_RENDER_TARGET_BLEND_DESC1);
  const view = new DataView(buf.buffer);
  // 0x00: i32
  if (data?.BlendEnable !== undefined) view.setInt32(0, Number(data.BlendEnable), true);
  // 0x04: i32
  if (data?.LogicOpEnable !== undefined) view.setInt32(4, Number(data.LogicOpEnable), true);
  // 0x08: i32
  if (data?.SrcBlend !== undefined) view.setInt32(8, Number(data.SrcBlend), true);
  // 0x0c: i32
  if (data?.DestBlend !== undefined) view.setInt32(12, Number(data.DestBlend), true);
  // 0x10: i32
  if (data?.BlendOp !== undefined) view.setInt32(16, Number(data.BlendOp), true);
  // 0x14: i32
  if (data?.SrcBlendAlpha !== undefined) view.setInt32(20, Number(data.SrcBlendAlpha), true);
  // 0x18: i32
  if (data?.DestBlendAlpha !== undefined) view.setInt32(24, Number(data.DestBlendAlpha), true);
  // 0x1c: i32
  if (data?.BlendOpAlpha !== undefined) view.setInt32(28, Number(data.BlendOpAlpha), true);
  // 0x20: i32
  if (data?.LogicOp !== undefined) view.setInt32(32, Number(data.LogicOp), true);
  // 0x24: u8
  if (data?.RenderTargetWriteMask !== undefined) view.setUint8(36, Number(data.RenderTargetWriteMask));
  // 0x25: pad3
  return buf;
}

/**
 * Windows.Win32.Graphics.Direct3D11.D3D11_BLEND_DESC1 (size: 16)
 */
export interface D3D11_BLEND_DESC1 {
  /** Windows.Win32.Foundation.BOOL */
  AlphaToCoverageEnable: boolean;
  /** Windows.Win32.Foundation.BOOL */
  IndependentBlendEnable: boolean;
  /** array */
  RenderTarget: Deno.PointerValue | null;
}

export const sizeofD3D11_BLEND_DESC1 = 16;

export function allocD3D11_BLEND_DESC1(data?: Partial<D3D11_BLEND_DESC1>): Uint8Array {
  const buf = new Uint8Array(sizeofD3D11_BLEND_DESC1);
  const view = new DataView(buf.buffer);
  // 0x00: i32
  if (data?.AlphaToCoverageEnable !== undefined) view.setInt32(0, Number(data.AlphaToCoverageEnable), true);
  // 0x04: i32
  if (data?.IndependentBlendEnable !== undefined) view.setInt32(4, Number(data.IndependentBlendEnable), true);
  // 0x08: pointer
  if (data?.RenderTarget !== undefined) view.setBigUint64(8, data.RenderTarget === null ? 0n : BigInt(util.toPointer(data.RenderTarget)), true);
  return buf;
}

/**
 * Windows.Win32.Graphics.Direct3D11.D3D11_RASTERIZER_DESC1 (size: 48)
 */
export interface D3D11_RASTERIZER_DESC1 {
  /** Windows.Win32.Graphics.Direct3D11.D3D11_FILL_MODE */
  FillMode: D3D11_FILL_MODE;
  /** Windows.Win32.Graphics.Direct3D11.D3D11_CULL_MODE */
  CullMode: D3D11_CULL_MODE;
  /** Windows.Win32.Foundation.BOOL */
  FrontCounterClockwise: boolean;
  /** i32 */
  DepthBias: number;
  /** f32 */
  DepthBiasClamp: number;
  /** f32 */
  SlopeScaledDepthBias: number;
  /** Windows.Win32.Foundation.BOOL */
  DepthClipEnable: boolean;
  /** Windows.Win32.Foundation.BOOL */
  ScissorEnable: boolean;
  /** Windows.Win32.Foundation.BOOL */
  MultisampleEnable: boolean;
  /** Windows.Win32.Foundation.BOOL */
  AntialiasedLineEnable: boolean;
  /** u32 */
  ForcedSampleCount: number;
}

export const sizeofD3D11_RASTERIZER_DESC1 = 48;

export function allocD3D11_RASTERIZER_DESC1(data?: Partial<D3D11_RASTERIZER_DESC1>): Uint8Array {
  const buf = new Uint8Array(sizeofD3D11_RASTERIZER_DESC1);
  const view = new DataView(buf.buffer);
  // 0x00: i32
  if (data?.FillMode !== undefined) view.setInt32(0, Number(data.FillMode), true);
  // 0x04: i32
  if (data?.CullMode !== undefined) view.setInt32(4, Number(data.CullMode), true);
  // 0x08: i32
  if (data?.FrontCounterClockwise !== undefined) view.setInt32(8, Number(data.FrontCounterClockwise), true);
  // 0x0c: i32
  if (data?.DepthBias !== undefined) view.setInt32(12, Number(data.DepthBias), true);
  // 0x10: f32
  if (data?.DepthBiasClamp !== undefined) view.setFloat32(16, Number(data.DepthBiasClamp), true);
  // 0x14: f32
  if (data?.SlopeScaledDepthBias !== undefined) view.setFloat32(20, Number(data.SlopeScaledDepthBias), true);
  // 0x18: i32
  if (data?.DepthClipEnable !== undefined) view.setInt32(24, Number(data.DepthClipEnable), true);
  // 0x1c: i32
  if (data?.ScissorEnable !== undefined) view.setInt32(28, Number(data.ScissorEnable), true);
  // 0x20: i32
  if (data?.MultisampleEnable !== undefined) view.setInt32(32, Number(data.MultisampleEnable), true);
  // 0x24: i32
  if (data?.AntialiasedLineEnable !== undefined) view.setInt32(36, Number(data.AntialiasedLineEnable), true);
  // 0x28: u32
  if (data?.ForcedSampleCount !== undefined) view.setUint32(40, Number(data.ForcedSampleCount), true);
  // 0x2c: pad4
  return buf;
}

/**
 * Windows.Win32.Graphics.Direct3D11.D3D11_VIDEO_DECODER_SUB_SAMPLE_MAPPING_BLOCK (size: 8)
 */
export interface D3D11_VIDEO_DECODER_SUB_SAMPLE_MAPPING_BLOCK {
  /** u32 */
  ClearSize: number;
  /** u32 */
  EncryptedSize: number;
}

export const sizeofD3D11_VIDEO_DECODER_SUB_SAMPLE_MAPPING_BLOCK = 8;

export function allocD3D11_VIDEO_DECODER_SUB_SAMPLE_MAPPING_BLOCK(data?: Partial<D3D11_VIDEO_DECODER_SUB_SAMPLE_MAPPING_BLOCK>): Uint8Array {
  const buf = new Uint8Array(sizeofD3D11_VIDEO_DECODER_SUB_SAMPLE_MAPPING_BLOCK);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.ClearSize !== undefined) view.setUint32(0, Number(data.ClearSize), true);
  // 0x04: u32
  if (data?.EncryptedSize !== undefined) view.setUint32(4, Number(data.EncryptedSize), true);
  return buf;
}

/**
 * Windows.Win32.Graphics.Direct3D11.D3D11_VIDEO_DECODER_BUFFER_DESC1 (size: 48)
 */
export interface D3D11_VIDEO_DECODER_BUFFER_DESC1 {
  /** Windows.Win32.Graphics.Direct3D11.D3D11_VIDEO_DECODER_BUFFER_TYPE */
  BufferType: D3D11_VIDEO_DECODER_BUFFER_TYPE;
  /** u32 */
  DataOffset: number;
  /** u32 */
  DataSize: number;
  /** ptr */
  pIV: Deno.PointerValue | Uint8Array | null;
  /** u32 */
  IVSize: number;
  /** ptr */
  pSubSampleMappingBlock: Deno.PointerValue | Uint8Array | null;
  /** u32 */
  SubSampleMappingCount: number;
}

export const sizeofD3D11_VIDEO_DECODER_BUFFER_DESC1 = 48;

export function allocD3D11_VIDEO_DECODER_BUFFER_DESC1(data?: Partial<D3D11_VIDEO_DECODER_BUFFER_DESC1>): Uint8Array {
  const buf = new Uint8Array(sizeofD3D11_VIDEO_DECODER_BUFFER_DESC1);
  const view = new DataView(buf.buffer);
  // 0x00: i32
  if (data?.BufferType !== undefined) view.setInt32(0, Number(data.BufferType), true);
  // 0x04: u32
  if (data?.DataOffset !== undefined) view.setUint32(4, Number(data.DataOffset), true);
  // 0x08: u32
  if (data?.DataSize !== undefined) view.setUint32(8, Number(data.DataSize), true);
  // 0x0c: pad4
  // 0x10: pointer
  if (data?.pIV !== undefined) view.setBigUint64(16, data.pIV === null ? 0n : BigInt(util.toPointer(data.pIV)), true);
  // 0x18: u32
  if (data?.IVSize !== undefined) view.setUint32(24, Number(data.IVSize), true);
  // 0x1c: pad4
  // 0x20: pointer
  if (data?.pSubSampleMappingBlock !== undefined) view.setBigUint64(32, data.pSubSampleMappingBlock === null ? 0n : BigInt(util.toPointer(data.pSubSampleMappingBlock)), true);
  // 0x28: u32
  if (data?.SubSampleMappingCount !== undefined) view.setUint32(40, Number(data.SubSampleMappingCount), true);
  // 0x2c: pad4
  return buf;
}

/**
 * Windows.Win32.Graphics.Direct3D11.D3D11_VIDEO_DECODER_BEGIN_FRAME_CRYPTO_SESSION (size: 48)
 */
export interface D3D11_VIDEO_DECODER_BEGIN_FRAME_CRYPTO_SESSION {
  /** Windows.Win32.Graphics.Direct3D11.ID3D11CryptoSession */
  pCryptoSession: Uint8Array | Deno.PointerValue | null;
  /** u32 */
  BlobSize: number;
  /** ptr */
  pBlob: Deno.PointerValue | Uint8Array | null;
  /** ptr */
  pKeyInfoId: Deno.PointerValue | Uint8Array | null;
  /** u32 */
  PrivateDataSize: number;
  /** ptr */
  pPrivateData: Deno.PointerValue | Uint8Array | null;
}

export const sizeofD3D11_VIDEO_DECODER_BEGIN_FRAME_CRYPTO_SESSION = 48;

export function allocD3D11_VIDEO_DECODER_BEGIN_FRAME_CRYPTO_SESSION(data?: Partial<D3D11_VIDEO_DECODER_BEGIN_FRAME_CRYPTO_SESSION>): Uint8Array {
  const buf = new Uint8Array(sizeofD3D11_VIDEO_DECODER_BEGIN_FRAME_CRYPTO_SESSION);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.pCryptoSession !== undefined) view.setBigUint64(0, data.pCryptoSession === null ? 0n : BigInt(util.toPointer(data.pCryptoSession)), true);
  // 0x08: u32
  if (data?.BlobSize !== undefined) view.setUint32(8, Number(data.BlobSize), true);
  // 0x0c: pad4
  // 0x10: pointer
  if (data?.pBlob !== undefined) view.setBigUint64(16, data.pBlob === null ? 0n : BigInt(util.toPointer(data.pBlob)), true);
  // 0x18: pointer
  if (data?.pKeyInfoId !== undefined) view.setBigUint64(24, data.pKeyInfoId === null ? 0n : BigInt(util.toPointer(data.pKeyInfoId)), true);
  // 0x20: u32
  if (data?.PrivateDataSize !== undefined) view.setUint32(32, Number(data.PrivateDataSize), true);
  // 0x24: pad4
  // 0x28: pointer
  if (data?.pPrivateData !== undefined) view.setBigUint64(40, data.pPrivateData === null ? 0n : BigInt(util.toPointer(data.pPrivateData)), true);
  return buf;
}

/**
 * Windows.Win32.Graphics.Direct3D11.D3D11_VIDEO_PROCESSOR_STREAM_BEHAVIOR_HINT (size: 16)
 */
export interface D3D11_VIDEO_PROCESSOR_STREAM_BEHAVIOR_HINT {
  /** Windows.Win32.Foundation.BOOL */
  Enable: boolean;
  /** u32 */
  Width: number;
  /** u32 */
  Height: number;
  /** Windows.Win32.Graphics.Dxgi.Common.DXGI_FORMAT */
  Format: DXGI_FORMAT;
}

export const sizeofD3D11_VIDEO_PROCESSOR_STREAM_BEHAVIOR_HINT = 16;

export function allocD3D11_VIDEO_PROCESSOR_STREAM_BEHAVIOR_HINT(data?: Partial<D3D11_VIDEO_PROCESSOR_STREAM_BEHAVIOR_HINT>): Uint8Array {
  const buf = new Uint8Array(sizeofD3D11_VIDEO_PROCESSOR_STREAM_BEHAVIOR_HINT);
  const view = new DataView(buf.buffer);
  // 0x00: i32
  if (data?.Enable !== undefined) view.setInt32(0, Number(data.Enable), true);
  // 0x04: u32
  if (data?.Width !== undefined) view.setUint32(4, Number(data.Width), true);
  // 0x08: u32
  if (data?.Height !== undefined) view.setUint32(8, Number(data.Height), true);
  // 0x0c: u32
  if (data?.Format !== undefined) view.setUint32(12, Number(data.Format), true);
  return buf;
}

/**
 * Windows.Win32.Graphics.Direct3D11.D3D11_KEY_EXCHANGE_HW_PROTECTION_INPUT_DATA (size: 16)
 */
export interface D3D11_KEY_EXCHANGE_HW_PROTECTION_INPUT_DATA {
  /** u32 */
  PrivateDataSize: number;
  /** u32 */
  HWProtectionDataSize: number;
  /** array */
  pbInput: Deno.PointerValue | null;
}

export const sizeofD3D11_KEY_EXCHANGE_HW_PROTECTION_INPUT_DATA = 16;

export function allocD3D11_KEY_EXCHANGE_HW_PROTECTION_INPUT_DATA(data?: Partial<D3D11_KEY_EXCHANGE_HW_PROTECTION_INPUT_DATA>): Uint8Array {
  const buf = new Uint8Array(sizeofD3D11_KEY_EXCHANGE_HW_PROTECTION_INPUT_DATA);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.PrivateDataSize !== undefined) view.setUint32(0, Number(data.PrivateDataSize), true);
  // 0x04: u32
  if (data?.HWProtectionDataSize !== undefined) view.setUint32(4, Number(data.HWProtectionDataSize), true);
  // 0x08: pointer
  if (data?.pbInput !== undefined) view.setBigUint64(8, data.pbInput === null ? 0n : BigInt(util.toPointer(data.pbInput)), true);
  return buf;
}

/**
 * Windows.Win32.Graphics.Direct3D11.D3D11_KEY_EXCHANGE_HW_PROTECTION_OUTPUT_DATA (size: 40)
 */
export interface D3D11_KEY_EXCHANGE_HW_PROTECTION_OUTPUT_DATA {
  /** u32 */
  PrivateDataSize: number;
  /** u32 */
  MaxHWProtectionDataSize: number;
  /** u32 */
  HWProtectionDataSize: number;
  /** u64 */
  TransportTime: Deno.PointerValue;
  /** u64 */
  ExecutionTime: Deno.PointerValue;
  /** array */
  pbOutput: Deno.PointerValue | null;
}

export const sizeofD3D11_KEY_EXCHANGE_HW_PROTECTION_OUTPUT_DATA = 40;

export function allocD3D11_KEY_EXCHANGE_HW_PROTECTION_OUTPUT_DATA(data?: Partial<D3D11_KEY_EXCHANGE_HW_PROTECTION_OUTPUT_DATA>): Uint8Array {
  const buf = new Uint8Array(sizeofD3D11_KEY_EXCHANGE_HW_PROTECTION_OUTPUT_DATA);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.PrivateDataSize !== undefined) view.setUint32(0, Number(data.PrivateDataSize), true);
  // 0x04: u32
  if (data?.MaxHWProtectionDataSize !== undefined) view.setUint32(4, Number(data.MaxHWProtectionDataSize), true);
  // 0x08: u32
  if (data?.HWProtectionDataSize !== undefined) view.setUint32(8, Number(data.HWProtectionDataSize), true);
  // 0x0c: pad4
  // 0x10: u64
  if (data?.TransportTime !== undefined) view.setBigUint64(16, BigInt(data.TransportTime), true);
  // 0x18: u64
  if (data?.ExecutionTime !== undefined) view.setBigUint64(24, BigInt(data.ExecutionTime), true);
  // 0x20: pointer
  if (data?.pbOutput !== undefined) view.setBigUint64(32, data.pbOutput === null ? 0n : BigInt(util.toPointer(data.pbOutput)), true);
  return buf;
}

/**
 * Windows.Win32.Graphics.Direct3D11.D3D11_KEY_EXCHANGE_HW_PROTECTION_DATA (size: 32)
 */
export interface D3D11_KEY_EXCHANGE_HW_PROTECTION_DATA {
  /** u32 */
  HWProtectionFunctionID: number;
  /** ptr */
  pInputData: Deno.PointerValue | Uint8Array | null;
  /** ptr */
  pOutputData: Deno.PointerValue | Uint8Array | null;
  /** Windows.Win32.Foundation.HRESULT */
  Status: Uint8Array | Deno.PointerValue | null;
}

export const sizeofD3D11_KEY_EXCHANGE_HW_PROTECTION_DATA = 32;

export function allocD3D11_KEY_EXCHANGE_HW_PROTECTION_DATA(data?: Partial<D3D11_KEY_EXCHANGE_HW_PROTECTION_DATA>): Uint8Array {
  const buf = new Uint8Array(sizeofD3D11_KEY_EXCHANGE_HW_PROTECTION_DATA);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.HWProtectionFunctionID !== undefined) view.setUint32(0, Number(data.HWProtectionFunctionID), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.pInputData !== undefined) view.setBigUint64(8, data.pInputData === null ? 0n : BigInt(util.toPointer(data.pInputData)), true);
  // 0x10: pointer
  if (data?.pOutputData !== undefined) view.setBigUint64(16, data.pOutputData === null ? 0n : BigInt(util.toPointer(data.pOutputData)), true);
  // 0x18: pointer
  if (data?.Status !== undefined) view.setBigUint64(24, data.Status === null ? 0n : BigInt(util.toPointer(data.Status)), true);
  return buf;
}

/**
 * Windows.Win32.Graphics.Direct3D11.D3D11_VIDEO_SAMPLE_DESC (size: 16)
 */
export interface D3D11_VIDEO_SAMPLE_DESC {
  /** u32 */
  Width: number;
  /** u32 */
  Height: number;
  /** Windows.Win32.Graphics.Dxgi.Common.DXGI_FORMAT */
  Format: DXGI_FORMAT;
  /** Windows.Win32.Graphics.Dxgi.Common.DXGI_COLOR_SPACE_TYPE */
  ColorSpace: DXGI_COLOR_SPACE_TYPE;
}

export const sizeofD3D11_VIDEO_SAMPLE_DESC = 16;

export function allocD3D11_VIDEO_SAMPLE_DESC(data?: Partial<D3D11_VIDEO_SAMPLE_DESC>): Uint8Array {
  const buf = new Uint8Array(sizeofD3D11_VIDEO_SAMPLE_DESC);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.Width !== undefined) view.setUint32(0, Number(data.Width), true);
  // 0x04: u32
  if (data?.Height !== undefined) view.setUint32(4, Number(data.Height), true);
  // 0x08: u32
  if (data?.Format !== undefined) view.setUint32(8, Number(data.Format), true);
  // 0x0c: i32
  if (data?.ColorSpace !== undefined) view.setInt32(12, Number(data.ColorSpace), true);
  return buf;
}

/**
 * Windows.Win32.Graphics.Direct3D11.D3D11_TILED_RESOURCE_COORDINATE (size: 16)
 */
export interface D3D11_TILED_RESOURCE_COORDINATE {
  /** u32 */
  X: number;
  /** u32 */
  Y: number;
  /** u32 */
  Z: number;
  /** u32 */
  Subresource: number;
}

export const sizeofD3D11_TILED_RESOURCE_COORDINATE = 16;

export function allocD3D11_TILED_RESOURCE_COORDINATE(data?: Partial<D3D11_TILED_RESOURCE_COORDINATE>): Uint8Array {
  const buf = new Uint8Array(sizeofD3D11_TILED_RESOURCE_COORDINATE);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.X !== undefined) view.setUint32(0, Number(data.X), true);
  // 0x04: u32
  if (data?.Y !== undefined) view.setUint32(4, Number(data.Y), true);
  // 0x08: u32
  if (data?.Z !== undefined) view.setUint32(8, Number(data.Z), true);
  // 0x0c: u32
  if (data?.Subresource !== undefined) view.setUint32(12, Number(data.Subresource), true);
  return buf;
}

/**
 * Windows.Win32.Graphics.Direct3D11.D3D11_TILE_REGION_SIZE (size: 16)
 */
export interface D3D11_TILE_REGION_SIZE {
  /** u32 */
  NumTiles: number;
  /** Windows.Win32.Foundation.BOOL */
  bUseBox: boolean;
  /** u32 */
  Width: number;
  /** u16 */
  Height: number;
  /** u16 */
  Depth: number;
}

export const sizeofD3D11_TILE_REGION_SIZE = 16;

export function allocD3D11_TILE_REGION_SIZE(data?: Partial<D3D11_TILE_REGION_SIZE>): Uint8Array {
  const buf = new Uint8Array(sizeofD3D11_TILE_REGION_SIZE);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.NumTiles !== undefined) view.setUint32(0, Number(data.NumTiles), true);
  // 0x04: i32
  if (data?.bUseBox !== undefined) view.setInt32(4, Number(data.bUseBox), true);
  // 0x08: u32
  if (data?.Width !== undefined) view.setUint32(8, Number(data.Width), true);
  // 0x0c: u16
  if (data?.Height !== undefined) view.setUint16(12, Number(data.Height), true);
  // 0x0e: u16
  if (data?.Depth !== undefined) view.setUint16(14, Number(data.Depth), true);
  return buf;
}

/**
 * Windows.Win32.Graphics.Direct3D11.D3D11_SUBRESOURCE_TILING (size: 16)
 */
export interface D3D11_SUBRESOURCE_TILING {
  /** u32 */
  WidthInTiles: number;
  /** u16 */
  HeightInTiles: number;
  /** u16 */
  DepthInTiles: number;
  /** u32 */
  StartTileIndexInOverallResource: number;
}

export const sizeofD3D11_SUBRESOURCE_TILING = 16;

export function allocD3D11_SUBRESOURCE_TILING(data?: Partial<D3D11_SUBRESOURCE_TILING>): Uint8Array {
  const buf = new Uint8Array(sizeofD3D11_SUBRESOURCE_TILING);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.WidthInTiles !== undefined) view.setUint32(0, Number(data.WidthInTiles), true);
  // 0x04: u16
  if (data?.HeightInTiles !== undefined) view.setUint16(4, Number(data.HeightInTiles), true);
  // 0x06: u16
  if (data?.DepthInTiles !== undefined) view.setUint16(6, Number(data.DepthInTiles), true);
  // 0x08: u32
  if (data?.StartTileIndexInOverallResource !== undefined) view.setUint32(8, Number(data.StartTileIndexInOverallResource), true);
  // 0x0c: pad4
  return buf;
}

/**
 * Windows.Win32.Graphics.Direct3D11.D3D11_TILE_SHAPE (size: 16)
 */
export interface D3D11_TILE_SHAPE {
  /** u32 */
  WidthInTexels: number;
  /** u32 */
  HeightInTexels: number;
  /** u32 */
  DepthInTexels: number;
}

export const sizeofD3D11_TILE_SHAPE = 16;

export function allocD3D11_TILE_SHAPE(data?: Partial<D3D11_TILE_SHAPE>): Uint8Array {
  const buf = new Uint8Array(sizeofD3D11_TILE_SHAPE);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.WidthInTexels !== undefined) view.setUint32(0, Number(data.WidthInTexels), true);
  // 0x04: u32
  if (data?.HeightInTexels !== undefined) view.setUint32(4, Number(data.HeightInTexels), true);
  // 0x08: u32
  if (data?.DepthInTexels !== undefined) view.setUint32(8, Number(data.DepthInTexels), true);
  // 0x0c: pad4
  return buf;
}

/**
 * Windows.Win32.Graphics.Direct3D11.D3D11_PACKED_MIP_DESC (size: 16)
 */
export interface D3D11_PACKED_MIP_DESC {
  /** u8 */
  NumStandardMips: number;
  /** u8 */
  NumPackedMips: number;
  /** u32 */
  NumTilesForPackedMips: number;
  /** u32 */
  StartTileIndexInOverallResource: number;
}

export const sizeofD3D11_PACKED_MIP_DESC = 16;

export function allocD3D11_PACKED_MIP_DESC(data?: Partial<D3D11_PACKED_MIP_DESC>): Uint8Array {
  const buf = new Uint8Array(sizeofD3D11_PACKED_MIP_DESC);
  const view = new DataView(buf.buffer);
  // 0x00: u8
  if (data?.NumStandardMips !== undefined) view.setUint8(0, Number(data.NumStandardMips));
  // 0x01: u8
  if (data?.NumPackedMips !== undefined) view.setUint8(1, Number(data.NumPackedMips));
  // 0x02: u32
  if (data?.NumTilesForPackedMips !== undefined) view.setUint32(2, Number(data.NumTilesForPackedMips), true);
  // 0x06: u32
  if (data?.StartTileIndexInOverallResource !== undefined) view.setUint32(6, Number(data.StartTileIndexInOverallResource), true);
  // 0x0a: pad6
  return buf;
}

/**
 * Windows.Win32.Graphics.Direct3D11.D3D11_TEXTURE2D_DESC1 (size: 56)
 */
export interface D3D11_TEXTURE2D_DESC1 {
  /** u32 */
  Width: number;
  /** u32 */
  Height: number;
  /** u32 */
  MipLevels: number;
  /** u32 */
  ArraySize: number;
  /** Windows.Win32.Graphics.Dxgi.Common.DXGI_FORMAT */
  Format: DXGI_FORMAT;
  /** Windows.Win32.Graphics.Dxgi.Common.DXGI_SAMPLE_DESC */
  SampleDesc: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Graphics.Direct3D11.D3D11_USAGE */
  Usage: D3D11_USAGE;
  /** Windows.Win32.Graphics.Direct3D11.D3D11_BIND_FLAG */
  BindFlags: D3D11_BIND_FLAG;
  /** Windows.Win32.Graphics.Direct3D11.D3D11_CPU_ACCESS_FLAG */
  CPUAccessFlags: D3D11_CPU_ACCESS_FLAG;
  /** Windows.Win32.Graphics.Direct3D11.D3D11_RESOURCE_MISC_FLAG */
  MiscFlags: D3D11_RESOURCE_MISC_FLAG;
  /** Windows.Win32.Graphics.Direct3D11.D3D11_TEXTURE_LAYOUT */
  TextureLayout: D3D11_TEXTURE_LAYOUT;
}

export const sizeofD3D11_TEXTURE2D_DESC1 = 56;

export function allocD3D11_TEXTURE2D_DESC1(data?: Partial<D3D11_TEXTURE2D_DESC1>): Uint8Array {
  const buf = new Uint8Array(sizeofD3D11_TEXTURE2D_DESC1);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.Width !== undefined) view.setUint32(0, Number(data.Width), true);
  // 0x04: u32
  if (data?.Height !== undefined) view.setUint32(4, Number(data.Height), true);
  // 0x08: u32
  if (data?.MipLevels !== undefined) view.setUint32(8, Number(data.MipLevels), true);
  // 0x0c: u32
  if (data?.ArraySize !== undefined) view.setUint32(12, Number(data.ArraySize), true);
  // 0x10: u32
  if (data?.Format !== undefined) view.setUint32(16, Number(data.Format), true);
  // 0x14: pad4
  // 0x18: pointer
  if (data?.SampleDesc !== undefined) view.setBigUint64(24, data.SampleDesc === null ? 0n : BigInt(util.toPointer(data.SampleDesc)), true);
  // 0x20: i32
  if (data?.Usage !== undefined) view.setInt32(32, Number(data.Usage), true);
  // 0x24: u32
  if (data?.BindFlags !== undefined) view.setUint32(36, Number(data.BindFlags), true);
  // 0x28: u32
  if (data?.CPUAccessFlags !== undefined) view.setUint32(40, Number(data.CPUAccessFlags), true);
  // 0x2c: u32
  if (data?.MiscFlags !== undefined) view.setUint32(44, Number(data.MiscFlags), true);
  // 0x30: i32
  if (data?.TextureLayout !== undefined) view.setInt32(48, Number(data.TextureLayout), true);
  // 0x34: pad4
  return buf;
}

/**
 * Windows.Win32.Graphics.Direct3D11.D3D11_TEXTURE3D_DESC1 (size: 40)
 */
export interface D3D11_TEXTURE3D_DESC1 {
  /** u32 */
  Width: number;
  /** u32 */
  Height: number;
  /** u32 */
  Depth: number;
  /** u32 */
  MipLevels: number;
  /** Windows.Win32.Graphics.Dxgi.Common.DXGI_FORMAT */
  Format: DXGI_FORMAT;
  /** Windows.Win32.Graphics.Direct3D11.D3D11_USAGE */
  Usage: D3D11_USAGE;
  /** Windows.Win32.Graphics.Direct3D11.D3D11_BIND_FLAG */
  BindFlags: D3D11_BIND_FLAG;
  /** Windows.Win32.Graphics.Direct3D11.D3D11_CPU_ACCESS_FLAG */
  CPUAccessFlags: D3D11_CPU_ACCESS_FLAG;
  /** Windows.Win32.Graphics.Direct3D11.D3D11_RESOURCE_MISC_FLAG */
  MiscFlags: D3D11_RESOURCE_MISC_FLAG;
  /** Windows.Win32.Graphics.Direct3D11.D3D11_TEXTURE_LAYOUT */
  TextureLayout: D3D11_TEXTURE_LAYOUT;
}

export const sizeofD3D11_TEXTURE3D_DESC1 = 40;

export function allocD3D11_TEXTURE3D_DESC1(data?: Partial<D3D11_TEXTURE3D_DESC1>): Uint8Array {
  const buf = new Uint8Array(sizeofD3D11_TEXTURE3D_DESC1);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.Width !== undefined) view.setUint32(0, Number(data.Width), true);
  // 0x04: u32
  if (data?.Height !== undefined) view.setUint32(4, Number(data.Height), true);
  // 0x08: u32
  if (data?.Depth !== undefined) view.setUint32(8, Number(data.Depth), true);
  // 0x0c: u32
  if (data?.MipLevels !== undefined) view.setUint32(12, Number(data.MipLevels), true);
  // 0x10: u32
  if (data?.Format !== undefined) view.setUint32(16, Number(data.Format), true);
  // 0x14: i32
  if (data?.Usage !== undefined) view.setInt32(20, Number(data.Usage), true);
  // 0x18: u32
  if (data?.BindFlags !== undefined) view.setUint32(24, Number(data.BindFlags), true);
  // 0x1c: u32
  if (data?.CPUAccessFlags !== undefined) view.setUint32(28, Number(data.CPUAccessFlags), true);
  // 0x20: u32
  if (data?.MiscFlags !== undefined) view.setUint32(32, Number(data.MiscFlags), true);
  // 0x24: i32
  if (data?.TextureLayout !== undefined) view.setInt32(36, Number(data.TextureLayout), true);
  return buf;
}

/**
 * Windows.Win32.Graphics.Direct3D11.D3D11_RASTERIZER_DESC2 (size: 48)
 */
export interface D3D11_RASTERIZER_DESC2 {
  /** Windows.Win32.Graphics.Direct3D11.D3D11_FILL_MODE */
  FillMode: D3D11_FILL_MODE;
  /** Windows.Win32.Graphics.Direct3D11.D3D11_CULL_MODE */
  CullMode: D3D11_CULL_MODE;
  /** Windows.Win32.Foundation.BOOL */
  FrontCounterClockwise: boolean;
  /** i32 */
  DepthBias: number;
  /** f32 */
  DepthBiasClamp: number;
  /** f32 */
  SlopeScaledDepthBias: number;
  /** Windows.Win32.Foundation.BOOL */
  DepthClipEnable: boolean;
  /** Windows.Win32.Foundation.BOOL */
  ScissorEnable: boolean;
  /** Windows.Win32.Foundation.BOOL */
  MultisampleEnable: boolean;
  /** Windows.Win32.Foundation.BOOL */
  AntialiasedLineEnable: boolean;
  /** u32 */
  ForcedSampleCount: number;
  /** Windows.Win32.Graphics.Direct3D11.D3D11_CONSERVATIVE_RASTERIZATION_MODE */
  ConservativeRaster: D3D11_CONSERVATIVE_RASTERIZATION_MODE;
}

export const sizeofD3D11_RASTERIZER_DESC2 = 48;

export function allocD3D11_RASTERIZER_DESC2(data?: Partial<D3D11_RASTERIZER_DESC2>): Uint8Array {
  const buf = new Uint8Array(sizeofD3D11_RASTERIZER_DESC2);
  const view = new DataView(buf.buffer);
  // 0x00: i32
  if (data?.FillMode !== undefined) view.setInt32(0, Number(data.FillMode), true);
  // 0x04: i32
  if (data?.CullMode !== undefined) view.setInt32(4, Number(data.CullMode), true);
  // 0x08: i32
  if (data?.FrontCounterClockwise !== undefined) view.setInt32(8, Number(data.FrontCounterClockwise), true);
  // 0x0c: i32
  if (data?.DepthBias !== undefined) view.setInt32(12, Number(data.DepthBias), true);
  // 0x10: f32
  if (data?.DepthBiasClamp !== undefined) view.setFloat32(16, Number(data.DepthBiasClamp), true);
  // 0x14: f32
  if (data?.SlopeScaledDepthBias !== undefined) view.setFloat32(20, Number(data.SlopeScaledDepthBias), true);
  // 0x18: i32
  if (data?.DepthClipEnable !== undefined) view.setInt32(24, Number(data.DepthClipEnable), true);
  // 0x1c: i32
  if (data?.ScissorEnable !== undefined) view.setInt32(28, Number(data.ScissorEnable), true);
  // 0x20: i32
  if (data?.MultisampleEnable !== undefined) view.setInt32(32, Number(data.MultisampleEnable), true);
  // 0x24: i32
  if (data?.AntialiasedLineEnable !== undefined) view.setInt32(36, Number(data.AntialiasedLineEnable), true);
  // 0x28: u32
  if (data?.ForcedSampleCount !== undefined) view.setUint32(40, Number(data.ForcedSampleCount), true);
  // 0x2c: i32
  if (data?.ConservativeRaster !== undefined) view.setInt32(44, Number(data.ConservativeRaster), true);
  return buf;
}

/**
 * Windows.Win32.Graphics.Direct3D11.D3D11_TEX2D_SRV1 (size: 16)
 */
export interface D3D11_TEX2D_SRV1 {
  /** u32 */
  MostDetailedMip: number;
  /** u32 */
  MipLevels: number;
  /** u32 */
  PlaneSlice: number;
}

export const sizeofD3D11_TEX2D_SRV1 = 16;

export function allocD3D11_TEX2D_SRV1(data?: Partial<D3D11_TEX2D_SRV1>): Uint8Array {
  const buf = new Uint8Array(sizeofD3D11_TEX2D_SRV1);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.MostDetailedMip !== undefined) view.setUint32(0, Number(data.MostDetailedMip), true);
  // 0x04: u32
  if (data?.MipLevels !== undefined) view.setUint32(4, Number(data.MipLevels), true);
  // 0x08: u32
  if (data?.PlaneSlice !== undefined) view.setUint32(8, Number(data.PlaneSlice), true);
  // 0x0c: pad4
  return buf;
}

/**
 * Windows.Win32.Graphics.Direct3D11.D3D11_TEX2D_ARRAY_SRV1 (size: 24)
 */
export interface D3D11_TEX2D_ARRAY_SRV1 {
  /** u32 */
  MostDetailedMip: number;
  /** u32 */
  MipLevels: number;
  /** u32 */
  FirstArraySlice: number;
  /** u32 */
  ArraySize: number;
  /** u32 */
  PlaneSlice: number;
}

export const sizeofD3D11_TEX2D_ARRAY_SRV1 = 24;

export function allocD3D11_TEX2D_ARRAY_SRV1(data?: Partial<D3D11_TEX2D_ARRAY_SRV1>): Uint8Array {
  const buf = new Uint8Array(sizeofD3D11_TEX2D_ARRAY_SRV1);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.MostDetailedMip !== undefined) view.setUint32(0, Number(data.MostDetailedMip), true);
  // 0x04: u32
  if (data?.MipLevels !== undefined) view.setUint32(4, Number(data.MipLevels), true);
  // 0x08: u32
  if (data?.FirstArraySlice !== undefined) view.setUint32(8, Number(data.FirstArraySlice), true);
  // 0x0c: u32
  if (data?.ArraySize !== undefined) view.setUint32(12, Number(data.ArraySize), true);
  // 0x10: u32
  if (data?.PlaneSlice !== undefined) view.setUint32(16, Number(data.PlaneSlice), true);
  // 0x14: pad4
  return buf;
}

/**
 * Windows.Win32.Graphics.Direct3D11.D3D11_SHADER_RESOURCE_VIEW_DESC1 (size: 16)
 */
export interface D3D11_SHADER_RESOURCE_VIEW_DESC1 {
  /** Windows.Win32.Graphics.Dxgi.Common.DXGI_FORMAT */
  Format: DXGI_FORMAT;
  /** Windows.Win32.Graphics.Direct3D.D3D_SRV_DIMENSION */
  ViewDimension: D3D_SRV_DIMENSION;
  /** _Anonymous_e__Union */
  Anonymous: Uint8Array | Deno.PointerValue | null;
}

export const sizeofD3D11_SHADER_RESOURCE_VIEW_DESC1 = 16;

export function allocD3D11_SHADER_RESOURCE_VIEW_DESC1(data?: Partial<D3D11_SHADER_RESOURCE_VIEW_DESC1>): Uint8Array {
  const buf = new Uint8Array(sizeofD3D11_SHADER_RESOURCE_VIEW_DESC1);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.Format !== undefined) view.setUint32(0, Number(data.Format), true);
  // 0x04: i32
  if (data?.ViewDimension !== undefined) view.setInt32(4, Number(data.ViewDimension), true);
  // 0x08: pointer
  if (data?.Anonymous !== undefined) view.setBigUint64(8, data.Anonymous === null ? 0n : BigInt(util.toPointer(data.Anonymous)), true);
  return buf;
}

/**
 * Windows.Win32.Graphics.Direct3D11.D3D11_TEX2D_RTV1 (size: 8)
 */
export interface D3D11_TEX2D_RTV1 {
  /** u32 */
  MipSlice: number;
  /** u32 */
  PlaneSlice: number;
}

export const sizeofD3D11_TEX2D_RTV1 = 8;

export function allocD3D11_TEX2D_RTV1(data?: Partial<D3D11_TEX2D_RTV1>): Uint8Array {
  const buf = new Uint8Array(sizeofD3D11_TEX2D_RTV1);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.MipSlice !== undefined) view.setUint32(0, Number(data.MipSlice), true);
  // 0x04: u32
  if (data?.PlaneSlice !== undefined) view.setUint32(4, Number(data.PlaneSlice), true);
  return buf;
}

/**
 * Windows.Win32.Graphics.Direct3D11.D3D11_TEX2D_ARRAY_RTV1 (size: 16)
 */
export interface D3D11_TEX2D_ARRAY_RTV1 {
  /** u32 */
  MipSlice: number;
  /** u32 */
  FirstArraySlice: number;
  /** u32 */
  ArraySize: number;
  /** u32 */
  PlaneSlice: number;
}

export const sizeofD3D11_TEX2D_ARRAY_RTV1 = 16;

export function allocD3D11_TEX2D_ARRAY_RTV1(data?: Partial<D3D11_TEX2D_ARRAY_RTV1>): Uint8Array {
  const buf = new Uint8Array(sizeofD3D11_TEX2D_ARRAY_RTV1);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.MipSlice !== undefined) view.setUint32(0, Number(data.MipSlice), true);
  // 0x04: u32
  if (data?.FirstArraySlice !== undefined) view.setUint32(4, Number(data.FirstArraySlice), true);
  // 0x08: u32
  if (data?.ArraySize !== undefined) view.setUint32(8, Number(data.ArraySize), true);
  // 0x0c: u32
  if (data?.PlaneSlice !== undefined) view.setUint32(12, Number(data.PlaneSlice), true);
  return buf;
}

/**
 * Windows.Win32.Graphics.Direct3D11.D3D11_RENDER_TARGET_VIEW_DESC1 (size: 16)
 */
export interface D3D11_RENDER_TARGET_VIEW_DESC1 {
  /** Windows.Win32.Graphics.Dxgi.Common.DXGI_FORMAT */
  Format: DXGI_FORMAT;
  /** Windows.Win32.Graphics.Direct3D11.D3D11_RTV_DIMENSION */
  ViewDimension: D3D11_RTV_DIMENSION;
  /** _Anonymous_e__Union */
  Anonymous: Uint8Array | Deno.PointerValue | null;
}

export const sizeofD3D11_RENDER_TARGET_VIEW_DESC1 = 16;

export function allocD3D11_RENDER_TARGET_VIEW_DESC1(data?: Partial<D3D11_RENDER_TARGET_VIEW_DESC1>): Uint8Array {
  const buf = new Uint8Array(sizeofD3D11_RENDER_TARGET_VIEW_DESC1);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.Format !== undefined) view.setUint32(0, Number(data.Format), true);
  // 0x04: i32
  if (data?.ViewDimension !== undefined) view.setInt32(4, Number(data.ViewDimension), true);
  // 0x08: pointer
  if (data?.Anonymous !== undefined) view.setBigUint64(8, data.Anonymous === null ? 0n : BigInt(util.toPointer(data.Anonymous)), true);
  return buf;
}

/**
 * Windows.Win32.Graphics.Direct3D11.D3D11_TEX2D_UAV1 (size: 8)
 */
export interface D3D11_TEX2D_UAV1 {
  /** u32 */
  MipSlice: number;
  /** u32 */
  PlaneSlice: number;
}

export const sizeofD3D11_TEX2D_UAV1 = 8;

export function allocD3D11_TEX2D_UAV1(data?: Partial<D3D11_TEX2D_UAV1>): Uint8Array {
  const buf = new Uint8Array(sizeofD3D11_TEX2D_UAV1);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.MipSlice !== undefined) view.setUint32(0, Number(data.MipSlice), true);
  // 0x04: u32
  if (data?.PlaneSlice !== undefined) view.setUint32(4, Number(data.PlaneSlice), true);
  return buf;
}

/**
 * Windows.Win32.Graphics.Direct3D11.D3D11_TEX2D_ARRAY_UAV1 (size: 16)
 */
export interface D3D11_TEX2D_ARRAY_UAV1 {
  /** u32 */
  MipSlice: number;
  /** u32 */
  FirstArraySlice: number;
  /** u32 */
  ArraySize: number;
  /** u32 */
  PlaneSlice: number;
}

export const sizeofD3D11_TEX2D_ARRAY_UAV1 = 16;

export function allocD3D11_TEX2D_ARRAY_UAV1(data?: Partial<D3D11_TEX2D_ARRAY_UAV1>): Uint8Array {
  const buf = new Uint8Array(sizeofD3D11_TEX2D_ARRAY_UAV1);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.MipSlice !== undefined) view.setUint32(0, Number(data.MipSlice), true);
  // 0x04: u32
  if (data?.FirstArraySlice !== undefined) view.setUint32(4, Number(data.FirstArraySlice), true);
  // 0x08: u32
  if (data?.ArraySize !== undefined) view.setUint32(8, Number(data.ArraySize), true);
  // 0x0c: u32
  if (data?.PlaneSlice !== undefined) view.setUint32(12, Number(data.PlaneSlice), true);
  return buf;
}

/**
 * Windows.Win32.Graphics.Direct3D11.D3D11_UNORDERED_ACCESS_VIEW_DESC1 (size: 16)
 */
export interface D3D11_UNORDERED_ACCESS_VIEW_DESC1 {
  /** Windows.Win32.Graphics.Dxgi.Common.DXGI_FORMAT */
  Format: DXGI_FORMAT;
  /** Windows.Win32.Graphics.Direct3D11.D3D11_UAV_DIMENSION */
  ViewDimension: D3D11_UAV_DIMENSION;
  /** _Anonymous_e__Union */
  Anonymous: Uint8Array | Deno.PointerValue | null;
}

export const sizeofD3D11_UNORDERED_ACCESS_VIEW_DESC1 = 16;

export function allocD3D11_UNORDERED_ACCESS_VIEW_DESC1(data?: Partial<D3D11_UNORDERED_ACCESS_VIEW_DESC1>): Uint8Array {
  const buf = new Uint8Array(sizeofD3D11_UNORDERED_ACCESS_VIEW_DESC1);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.Format !== undefined) view.setUint32(0, Number(data.Format), true);
  // 0x04: i32
  if (data?.ViewDimension !== undefined) view.setInt32(4, Number(data.ViewDimension), true);
  // 0x08: pointer
  if (data?.Anonymous !== undefined) view.setBigUint64(8, data.Anonymous === null ? 0n : BigInt(util.toPointer(data.Anonymous)), true);
  return buf;
}

/**
 * Windows.Win32.Graphics.Direct3D11.D3D11_QUERY_DESC1 (size: 16)
 */
export interface D3D11_QUERY_DESC1 {
  /** Windows.Win32.Graphics.Direct3D11.D3D11_QUERY */
  Query: D3D11_QUERY;
  /** u32 */
  MiscFlags: number;
  /** Windows.Win32.Graphics.Direct3D11.D3D11_CONTEXT_TYPE */
  ContextType: D3D11_CONTEXT_TYPE;
}

export const sizeofD3D11_QUERY_DESC1 = 16;

export function allocD3D11_QUERY_DESC1(data?: Partial<D3D11_QUERY_DESC1>): Uint8Array {
  const buf = new Uint8Array(sizeofD3D11_QUERY_DESC1);
  const view = new DataView(buf.buffer);
  // 0x00: i32
  if (data?.Query !== undefined) view.setInt32(0, Number(data.Query), true);
  // 0x04: u32
  if (data?.MiscFlags !== undefined) view.setUint32(4, Number(data.MiscFlags), true);
  // 0x08: i32
  if (data?.ContextType !== undefined) view.setInt32(8, Number(data.ContextType), true);
  // 0x0c: pad4
  return buf;
}

/**
 * Windows.Win32.Graphics.Direct3D11.D3D11_FEATURE_DATA_VIDEO_DECODER_HISTOGRAM (size: 24)
 */
export interface D3D11_FEATURE_DATA_VIDEO_DECODER_HISTOGRAM {
  /** Windows.Win32.Graphics.Direct3D11.D3D11_VIDEO_DECODER_DESC */
  DecoderDesc: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Graphics.Direct3D11.D3D11_VIDEO_DECODER_HISTOGRAM_COMPONENT_FLAGS */
  Components: D3D11_VIDEO_DECODER_HISTOGRAM_COMPONENT_FLAGS;
  /** u32 */
  BinCount: number;
  /** u32 */
  CounterBitDepth: number;
}

export const sizeofD3D11_FEATURE_DATA_VIDEO_DECODER_HISTOGRAM = 24;

export function allocD3D11_FEATURE_DATA_VIDEO_DECODER_HISTOGRAM(data?: Partial<D3D11_FEATURE_DATA_VIDEO_DECODER_HISTOGRAM>): Uint8Array {
  const buf = new Uint8Array(sizeofD3D11_FEATURE_DATA_VIDEO_DECODER_HISTOGRAM);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.DecoderDesc !== undefined) view.setBigUint64(0, data.DecoderDesc === null ? 0n : BigInt(util.toPointer(data.DecoderDesc)), true);
  // 0x08: u32
  if (data?.Components !== undefined) view.setUint32(8, Number(data.Components), true);
  // 0x0c: u32
  if (data?.BinCount !== undefined) view.setUint32(12, Number(data.BinCount), true);
  // 0x10: u32
  if (data?.CounterBitDepth !== undefined) view.setUint32(16, Number(data.CounterBitDepth), true);
  // 0x14: pad4
  return buf;
}

/**
 * Windows.Win32.Graphics.Direct3D11.D3D11_VIDEO_DECODER_BUFFER_DESC2 (size: 56)
 */
export interface D3D11_VIDEO_DECODER_BUFFER_DESC2 {
  /** Windows.Win32.Graphics.Direct3D11.D3D11_VIDEO_DECODER_BUFFER_TYPE */
  BufferType: D3D11_VIDEO_DECODER_BUFFER_TYPE;
  /** u32 */
  DataOffset: number;
  /** u32 */
  DataSize: number;
  /** ptr */
  pIV: Deno.PointerValue | Uint8Array | null;
  /** u32 */
  IVSize: number;
  /** ptr */
  pSubSampleMappingBlock: Deno.PointerValue | Uint8Array | null;
  /** u32 */
  SubSampleMappingCount: number;
  /** u32 */
  cBlocksStripeEncrypted: number;
  /** u32 */
  cBlocksStripeClear: number;
}

export const sizeofD3D11_VIDEO_DECODER_BUFFER_DESC2 = 56;

export function allocD3D11_VIDEO_DECODER_BUFFER_DESC2(data?: Partial<D3D11_VIDEO_DECODER_BUFFER_DESC2>): Uint8Array {
  const buf = new Uint8Array(sizeofD3D11_VIDEO_DECODER_BUFFER_DESC2);
  const view = new DataView(buf.buffer);
  // 0x00: i32
  if (data?.BufferType !== undefined) view.setInt32(0, Number(data.BufferType), true);
  // 0x04: u32
  if (data?.DataOffset !== undefined) view.setUint32(4, Number(data.DataOffset), true);
  // 0x08: u32
  if (data?.DataSize !== undefined) view.setUint32(8, Number(data.DataSize), true);
  // 0x0c: pad4
  // 0x10: pointer
  if (data?.pIV !== undefined) view.setBigUint64(16, data.pIV === null ? 0n : BigInt(util.toPointer(data.pIV)), true);
  // 0x18: u32
  if (data?.IVSize !== undefined) view.setUint32(24, Number(data.IVSize), true);
  // 0x1c: pad4
  // 0x20: pointer
  if (data?.pSubSampleMappingBlock !== undefined) view.setBigUint64(32, data.pSubSampleMappingBlock === null ? 0n : BigInt(util.toPointer(data.pSubSampleMappingBlock)), true);
  // 0x28: u32
  if (data?.SubSampleMappingCount !== undefined) view.setUint32(40, Number(data.SubSampleMappingCount), true);
  // 0x2c: u32
  if (data?.cBlocksStripeEncrypted !== undefined) view.setUint32(44, Number(data.cBlocksStripeEncrypted), true);
  // 0x30: u32
  if (data?.cBlocksStripeClear !== undefined) view.setUint32(48, Number(data.cBlocksStripeClear), true);
  // 0x34: pad4
  return buf;
}

/**
 * Windows.Win32.Graphics.Direct3D11.D3D11_FEATURE_DATA_D3D11_OPTIONS4 (size: 8)
 */
export interface D3D11_FEATURE_DATA_D3D11_OPTIONS4 {
  /** Windows.Win32.Foundation.BOOL */
  ExtendedNV12SharedTextureSupported: boolean;
}

export const sizeofD3D11_FEATURE_DATA_D3D11_OPTIONS4 = 8;

export function allocD3D11_FEATURE_DATA_D3D11_OPTIONS4(data?: Partial<D3D11_FEATURE_DATA_D3D11_OPTIONS4>): Uint8Array {
  const buf = new Uint8Array(sizeofD3D11_FEATURE_DATA_D3D11_OPTIONS4);
  const view = new DataView(buf.buffer);
  // 0x00: i32
  if (data?.ExtendedNV12SharedTextureSupported !== undefined) view.setInt32(0, Number(data.ExtendedNV12SharedTextureSupported), true);
  // 0x04: pad4
  return buf;
}

/**
 * Windows.Win32.Graphics.Direct3D11.D3D11_SIGNATURE_PARAMETER_DESC (size: 40)
 */
export interface D3D11_SIGNATURE_PARAMETER_DESC {
  /** Windows.Win32.Foundation.PSTR */
  SemanticName: string | null;
  /** u32 */
  SemanticIndex: number;
  /** u32 */
  Register: number;
  /** Windows.Win32.Graphics.Direct3D.D3D_NAME */
  SystemValueType: D3D_NAME;
  /** Windows.Win32.Graphics.Direct3D.D3D_REGISTER_COMPONENT_TYPE */
  ComponentType: D3D_REGISTER_COMPONENT_TYPE;
  /** u8 */
  Mask: number;
  /** u8 */
  ReadWriteMask: number;
  /** u32 */
  Stream: number;
  /** Windows.Win32.Graphics.Direct3D.D3D_MIN_PRECISION */
  MinPrecision: D3D_MIN_PRECISION;
}

export const sizeofD3D11_SIGNATURE_PARAMETER_DESC = 40;

export function allocD3D11_SIGNATURE_PARAMETER_DESC(data?: Partial<D3D11_SIGNATURE_PARAMETER_DESC>): Uint8Array {
  const buf = new Uint8Array(sizeofD3D11_SIGNATURE_PARAMETER_DESC);
  const view = new DataView(buf.buffer);
  // 0x00: buffer
  if (data?.SemanticName !== undefined) {
    (buf as any)._f0 = util.pstrToFfi(data.SemanticName);
    view.setBigUint64(0, (buf as any)._f0 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f0)), true);
  }
  // 0x08: u32
  if (data?.SemanticIndex !== undefined) view.setUint32(8, Number(data.SemanticIndex), true);
  // 0x0c: u32
  if (data?.Register !== undefined) view.setUint32(12, Number(data.Register), true);
  // 0x10: i32
  if (data?.SystemValueType !== undefined) view.setInt32(16, Number(data.SystemValueType), true);
  // 0x14: i32
  if (data?.ComponentType !== undefined) view.setInt32(20, Number(data.ComponentType), true);
  // 0x18: u8
  if (data?.Mask !== undefined) view.setUint8(24, Number(data.Mask));
  // 0x19: u8
  if (data?.ReadWriteMask !== undefined) view.setUint8(25, Number(data.ReadWriteMask));
  // 0x1a: u32
  if (data?.Stream !== undefined) view.setUint32(26, Number(data.Stream), true);
  // 0x1e: i32
  if (data?.MinPrecision !== undefined) view.setInt32(30, Number(data.MinPrecision), true);
  // 0x22: pad6
  return buf;
}

/**
 * Windows.Win32.Graphics.Direct3D11.D3D11_SHADER_BUFFER_DESC (size: 24)
 */
export interface D3D11_SHADER_BUFFER_DESC {
  /** Windows.Win32.Foundation.PSTR */
  Name: string | null;
  /** Windows.Win32.Graphics.Direct3D.D3D_CBUFFER_TYPE */
  Type: D3D_CBUFFER_TYPE;
  /** u32 */
  Variables: number;
  /** u32 */
  Size: number;
  /** u32 */
  uFlags: number;
}

export const sizeofD3D11_SHADER_BUFFER_DESC = 24;

export function allocD3D11_SHADER_BUFFER_DESC(data?: Partial<D3D11_SHADER_BUFFER_DESC>): Uint8Array {
  const buf = new Uint8Array(sizeofD3D11_SHADER_BUFFER_DESC);
  const view = new DataView(buf.buffer);
  // 0x00: buffer
  if (data?.Name !== undefined) {
    (buf as any)._f0 = util.pstrToFfi(data.Name);
    view.setBigUint64(0, (buf as any)._f0 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f0)), true);
  }
  // 0x08: i32
  if (data?.Type !== undefined) view.setInt32(8, Number(data.Type), true);
  // 0x0c: u32
  if (data?.Variables !== undefined) view.setUint32(12, Number(data.Variables), true);
  // 0x10: u32
  if (data?.Size !== undefined) view.setUint32(16, Number(data.Size), true);
  // 0x14: u32
  if (data?.uFlags !== undefined) view.setUint32(20, Number(data.uFlags), true);
  return buf;
}

/**
 * Windows.Win32.Graphics.Direct3D11.D3D11_SHADER_VARIABLE_DESC (size: 48)
 */
export interface D3D11_SHADER_VARIABLE_DESC {
  /** Windows.Win32.Foundation.PSTR */
  Name: string | null;
  /** u32 */
  StartOffset: number;
  /** u32 */
  Size: number;
  /** u32 */
  uFlags: number;
  /** ptr */
  DefaultValue: Deno.PointerValue | Uint8Array | null;
  /** u32 */
  StartTexture: number;
  /** u32 */
  TextureSize: number;
  /** u32 */
  StartSampler: number;
  /** u32 */
  SamplerSize: number;
}

export const sizeofD3D11_SHADER_VARIABLE_DESC = 48;

export function allocD3D11_SHADER_VARIABLE_DESC(data?: Partial<D3D11_SHADER_VARIABLE_DESC>): Uint8Array {
  const buf = new Uint8Array(sizeofD3D11_SHADER_VARIABLE_DESC);
  const view = new DataView(buf.buffer);
  // 0x00: buffer
  if (data?.Name !== undefined) {
    (buf as any)._f0 = util.pstrToFfi(data.Name);
    view.setBigUint64(0, (buf as any)._f0 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f0)), true);
  }
  // 0x08: u32
  if (data?.StartOffset !== undefined) view.setUint32(8, Number(data.StartOffset), true);
  // 0x0c: u32
  if (data?.Size !== undefined) view.setUint32(12, Number(data.Size), true);
  // 0x10: u32
  if (data?.uFlags !== undefined) view.setUint32(16, Number(data.uFlags), true);
  // 0x14: pad4
  // 0x18: pointer
  if (data?.DefaultValue !== undefined) view.setBigUint64(24, data.DefaultValue === null ? 0n : BigInt(util.toPointer(data.DefaultValue)), true);
  // 0x20: u32
  if (data?.StartTexture !== undefined) view.setUint32(32, Number(data.StartTexture), true);
  // 0x24: u32
  if (data?.TextureSize !== undefined) view.setUint32(36, Number(data.TextureSize), true);
  // 0x28: u32
  if (data?.StartSampler !== undefined) view.setUint32(40, Number(data.StartSampler), true);
  // 0x2c: u32
  if (data?.SamplerSize !== undefined) view.setUint32(44, Number(data.SamplerSize), true);
  return buf;
}

/**
 * Windows.Win32.Graphics.Direct3D11.D3D11_SHADER_TYPE_DESC (size: 40)
 */
export interface D3D11_SHADER_TYPE_DESC {
  /** Windows.Win32.Graphics.Direct3D.D3D_SHADER_VARIABLE_CLASS */
  Class: D3D_SHADER_VARIABLE_CLASS;
  /** Windows.Win32.Graphics.Direct3D.D3D_SHADER_VARIABLE_TYPE */
  Type: D3D_SHADER_VARIABLE_TYPE;
  /** u32 */
  Rows: number;
  /** u32 */
  Columns: number;
  /** u32 */
  Elements: number;
  /** u32 */
  Members: number;
  /** u32 */
  Offset: number;
  /** Windows.Win32.Foundation.PSTR */
  Name: string | null;
}

export const sizeofD3D11_SHADER_TYPE_DESC = 40;

export function allocD3D11_SHADER_TYPE_DESC(data?: Partial<D3D11_SHADER_TYPE_DESC>): Uint8Array {
  const buf = new Uint8Array(sizeofD3D11_SHADER_TYPE_DESC);
  const view = new DataView(buf.buffer);
  // 0x00: i32
  if (data?.Class !== undefined) view.setInt32(0, Number(data.Class), true);
  // 0x04: i32
  if (data?.Type !== undefined) view.setInt32(4, Number(data.Type), true);
  // 0x08: u32
  if (data?.Rows !== undefined) view.setUint32(8, Number(data.Rows), true);
  // 0x0c: u32
  if (data?.Columns !== undefined) view.setUint32(12, Number(data.Columns), true);
  // 0x10: u32
  if (data?.Elements !== undefined) view.setUint32(16, Number(data.Elements), true);
  // 0x14: u32
  if (data?.Members !== undefined) view.setUint32(20, Number(data.Members), true);
  // 0x18: u32
  if (data?.Offset !== undefined) view.setUint32(24, Number(data.Offset), true);
  // 0x1c: pad4
  // 0x20: buffer
  if (data?.Name !== undefined) {
    (buf as any)._f32 = util.pstrToFfi(data.Name);
    view.setBigUint64(32, (buf as any)._f32 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f32)), true);
  }
  return buf;
}

/**
 * Windows.Win32.Graphics.Direct3D11.D3D11_SHADER_DESC (size: 160)
 */
export interface D3D11_SHADER_DESC {
  /** u32 */
  Version: number;
  /** Windows.Win32.Foundation.PSTR */
  Creator: string | null;
  /** u32 */
  Flags: number;
  /** u32 */
  ConstantBuffers: number;
  /** u32 */
  BoundResources: number;
  /** u32 */
  InputParameters: number;
  /** u32 */
  OutputParameters: number;
  /** u32 */
  InstructionCount: number;
  /** u32 */
  TempRegisterCount: number;
  /** u32 */
  TempArrayCount: number;
  /** u32 */
  DefCount: number;
  /** u32 */
  DclCount: number;
  /** u32 */
  TextureNormalInstructions: number;
  /** u32 */
  TextureLoadInstructions: number;
  /** u32 */
  TextureCompInstructions: number;
  /** u32 */
  TextureBiasInstructions: number;
  /** u32 */
  TextureGradientInstructions: number;
  /** u32 */
  FloatInstructionCount: number;
  /** u32 */
  IntInstructionCount: number;
  /** u32 */
  UintInstructionCount: number;
  /** u32 */
  StaticFlowControlCount: number;
  /** u32 */
  DynamicFlowControlCount: number;
  /** u32 */
  MacroInstructionCount: number;
  /** u32 */
  ArrayInstructionCount: number;
  /** u32 */
  CutInstructionCount: number;
  /** u32 */
  EmitInstructionCount: number;
  /** Windows.Win32.Graphics.Direct3D.D3D_PRIMITIVE_TOPOLOGY */
  GSOutputTopology: D3D_PRIMITIVE_TOPOLOGY;
  /** u32 */
  GSMaxOutputVertexCount: number;
  /** Windows.Win32.Graphics.Direct3D.D3D_PRIMITIVE */
  InputPrimitive: D3D_PRIMITIVE;
  /** u32 */
  PatchConstantParameters: number;
  /** u32 */
  cGSInstanceCount: number;
  /** u32 */
  cControlPoints: number;
  /** Windows.Win32.Graphics.Direct3D.D3D_TESSELLATOR_OUTPUT_PRIMITIVE */
  HSOutputPrimitive: D3D_TESSELLATOR_OUTPUT_PRIMITIVE;
  /** Windows.Win32.Graphics.Direct3D.D3D_TESSELLATOR_PARTITIONING */
  HSPartitioning: D3D_TESSELLATOR_PARTITIONING;
  /** Windows.Win32.Graphics.Direct3D.D3D_TESSELLATOR_DOMAIN */
  TessellatorDomain: D3D_TESSELLATOR_DOMAIN;
  /** u32 */
  cBarrierInstructions: number;
  /** u32 */
  cInterlockedInstructions: number;
  /** u32 */
  cTextureStoreInstructions: number;
}

export const sizeofD3D11_SHADER_DESC = 160;

export function allocD3D11_SHADER_DESC(data?: Partial<D3D11_SHADER_DESC>): Uint8Array {
  const buf = new Uint8Array(sizeofD3D11_SHADER_DESC);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.Version !== undefined) view.setUint32(0, Number(data.Version), true);
  // 0x04: pad4
  // 0x08: buffer
  if (data?.Creator !== undefined) {
    (buf as any)._f8 = util.pstrToFfi(data.Creator);
    view.setBigUint64(8, (buf as any)._f8 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f8)), true);
  }
  // 0x10: u32
  if (data?.Flags !== undefined) view.setUint32(16, Number(data.Flags), true);
  // 0x14: u32
  if (data?.ConstantBuffers !== undefined) view.setUint32(20, Number(data.ConstantBuffers), true);
  // 0x18: u32
  if (data?.BoundResources !== undefined) view.setUint32(24, Number(data.BoundResources), true);
  // 0x1c: u32
  if (data?.InputParameters !== undefined) view.setUint32(28, Number(data.InputParameters), true);
  // 0x20: u32
  if (data?.OutputParameters !== undefined) view.setUint32(32, Number(data.OutputParameters), true);
  // 0x24: u32
  if (data?.InstructionCount !== undefined) view.setUint32(36, Number(data.InstructionCount), true);
  // 0x28: u32
  if (data?.TempRegisterCount !== undefined) view.setUint32(40, Number(data.TempRegisterCount), true);
  // 0x2c: u32
  if (data?.TempArrayCount !== undefined) view.setUint32(44, Number(data.TempArrayCount), true);
  // 0x30: u32
  if (data?.DefCount !== undefined) view.setUint32(48, Number(data.DefCount), true);
  // 0x34: u32
  if (data?.DclCount !== undefined) view.setUint32(52, Number(data.DclCount), true);
  // 0x38: u32
  if (data?.TextureNormalInstructions !== undefined) view.setUint32(56, Number(data.TextureNormalInstructions), true);
  // 0x3c: u32
  if (data?.TextureLoadInstructions !== undefined) view.setUint32(60, Number(data.TextureLoadInstructions), true);
  // 0x40: u32
  if (data?.TextureCompInstructions !== undefined) view.setUint32(64, Number(data.TextureCompInstructions), true);
  // 0x44: u32
  if (data?.TextureBiasInstructions !== undefined) view.setUint32(68, Number(data.TextureBiasInstructions), true);
  // 0x48: u32
  if (data?.TextureGradientInstructions !== undefined) view.setUint32(72, Number(data.TextureGradientInstructions), true);
  // 0x4c: u32
  if (data?.FloatInstructionCount !== undefined) view.setUint32(76, Number(data.FloatInstructionCount), true);
  // 0x50: u32
  if (data?.IntInstructionCount !== undefined) view.setUint32(80, Number(data.IntInstructionCount), true);
  // 0x54: u32
  if (data?.UintInstructionCount !== undefined) view.setUint32(84, Number(data.UintInstructionCount), true);
  // 0x58: u32
  if (data?.StaticFlowControlCount !== undefined) view.setUint32(88, Number(data.StaticFlowControlCount), true);
  // 0x5c: u32
  if (data?.DynamicFlowControlCount !== undefined) view.setUint32(92, Number(data.DynamicFlowControlCount), true);
  // 0x60: u32
  if (data?.MacroInstructionCount !== undefined) view.setUint32(96, Number(data.MacroInstructionCount), true);
  // 0x64: u32
  if (data?.ArrayInstructionCount !== undefined) view.setUint32(100, Number(data.ArrayInstructionCount), true);
  // 0x68: u32
  if (data?.CutInstructionCount !== undefined) view.setUint32(104, Number(data.CutInstructionCount), true);
  // 0x6c: u32
  if (data?.EmitInstructionCount !== undefined) view.setUint32(108, Number(data.EmitInstructionCount), true);
  // 0x70: i32
  if (data?.GSOutputTopology !== undefined) view.setInt32(112, Number(data.GSOutputTopology), true);
  // 0x74: u32
  if (data?.GSMaxOutputVertexCount !== undefined) view.setUint32(116, Number(data.GSMaxOutputVertexCount), true);
  // 0x78: i32
  if (data?.InputPrimitive !== undefined) view.setInt32(120, Number(data.InputPrimitive), true);
  // 0x7c: u32
  if (data?.PatchConstantParameters !== undefined) view.setUint32(124, Number(data.PatchConstantParameters), true);
  // 0x80: u32
  if (data?.cGSInstanceCount !== undefined) view.setUint32(128, Number(data.cGSInstanceCount), true);
  // 0x84: u32
  if (data?.cControlPoints !== undefined) view.setUint32(132, Number(data.cControlPoints), true);
  // 0x88: i32
  if (data?.HSOutputPrimitive !== undefined) view.setInt32(136, Number(data.HSOutputPrimitive), true);
  // 0x8c: i32
  if (data?.HSPartitioning !== undefined) view.setInt32(140, Number(data.HSPartitioning), true);
  // 0x90: i32
  if (data?.TessellatorDomain !== undefined) view.setInt32(144, Number(data.TessellatorDomain), true);
  // 0x94: u32
  if (data?.cBarrierInstructions !== undefined) view.setUint32(148, Number(data.cBarrierInstructions), true);
  // 0x98: u32
  if (data?.cInterlockedInstructions !== undefined) view.setUint32(152, Number(data.cInterlockedInstructions), true);
  // 0x9c: u32
  if (data?.cTextureStoreInstructions !== undefined) view.setUint32(156, Number(data.cTextureStoreInstructions), true);
  return buf;
}

/**
 * Windows.Win32.Graphics.Direct3D11.D3D11_SHADER_INPUT_BIND_DESC (size: 40)
 */
export interface D3D11_SHADER_INPUT_BIND_DESC {
  /** Windows.Win32.Foundation.PSTR */
  Name: string | null;
  /** Windows.Win32.Graphics.Direct3D.D3D_SHADER_INPUT_TYPE */
  Type: D3D_SHADER_INPUT_TYPE;
  /** u32 */
  BindPoint: number;
  /** u32 */
  BindCount: number;
  /** u32 */
  uFlags: number;
  /** Windows.Win32.Graphics.Direct3D.D3D_RESOURCE_RETURN_TYPE */
  ReturnType: D3D_RESOURCE_RETURN_TYPE;
  /** Windows.Win32.Graphics.Direct3D.D3D_SRV_DIMENSION */
  Dimension: D3D_SRV_DIMENSION;
  /** u32 */
  NumSamples: number;
}

export const sizeofD3D11_SHADER_INPUT_BIND_DESC = 40;

export function allocD3D11_SHADER_INPUT_BIND_DESC(data?: Partial<D3D11_SHADER_INPUT_BIND_DESC>): Uint8Array {
  const buf = new Uint8Array(sizeofD3D11_SHADER_INPUT_BIND_DESC);
  const view = new DataView(buf.buffer);
  // 0x00: buffer
  if (data?.Name !== undefined) {
    (buf as any)._f0 = util.pstrToFfi(data.Name);
    view.setBigUint64(0, (buf as any)._f0 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f0)), true);
  }
  // 0x08: i32
  if (data?.Type !== undefined) view.setInt32(8, Number(data.Type), true);
  // 0x0c: u32
  if (data?.BindPoint !== undefined) view.setUint32(12, Number(data.BindPoint), true);
  // 0x10: u32
  if (data?.BindCount !== undefined) view.setUint32(16, Number(data.BindCount), true);
  // 0x14: u32
  if (data?.uFlags !== undefined) view.setUint32(20, Number(data.uFlags), true);
  // 0x18: i32
  if (data?.ReturnType !== undefined) view.setInt32(24, Number(data.ReturnType), true);
  // 0x1c: i32
  if (data?.Dimension !== undefined) view.setInt32(28, Number(data.Dimension), true);
  // 0x20: u32
  if (data?.NumSamples !== undefined) view.setUint32(32, Number(data.NumSamples), true);
  // 0x24: pad4
  return buf;
}

/**
 * Windows.Win32.Graphics.Direct3D11.D3D11_LIBRARY_DESC (size: 16)
 */
export interface D3D11_LIBRARY_DESC {
  /** Windows.Win32.Foundation.PSTR */
  Creator: string | null;
  /** u32 */
  Flags: number;
  /** u32 */
  FunctionCount: number;
}

export const sizeofD3D11_LIBRARY_DESC = 16;

export function allocD3D11_LIBRARY_DESC(data?: Partial<D3D11_LIBRARY_DESC>): Uint8Array {
  const buf = new Uint8Array(sizeofD3D11_LIBRARY_DESC);
  const view = new DataView(buf.buffer);
  // 0x00: buffer
  if (data?.Creator !== undefined) {
    (buf as any)._f0 = util.pstrToFfi(data.Creator);
    view.setBigUint64(0, (buf as any)._f0 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f0)), true);
  }
  // 0x08: u32
  if (data?.Flags !== undefined) view.setUint32(8, Number(data.Flags), true);
  // 0x0c: u32
  if (data?.FunctionCount !== undefined) view.setUint32(12, Number(data.FunctionCount), true);
  return buf;
}

/**
 * Windows.Win32.Graphics.Direct3D11.D3D11_FUNCTION_DESC (size: 152)
 */
export interface D3D11_FUNCTION_DESC {
  /** u32 */
  Version: number;
  /** Windows.Win32.Foundation.PSTR */
  Creator: string | null;
  /** u32 */
  Flags: number;
  /** u32 */
  ConstantBuffers: number;
  /** u32 */
  BoundResources: number;
  /** u32 */
  InstructionCount: number;
  /** u32 */
  TempRegisterCount: number;
  /** u32 */
  TempArrayCount: number;
  /** u32 */
  DefCount: number;
  /** u32 */
  DclCount: number;
  /** u32 */
  TextureNormalInstructions: number;
  /** u32 */
  TextureLoadInstructions: number;
  /** u32 */
  TextureCompInstructions: number;
  /** u32 */
  TextureBiasInstructions: number;
  /** u32 */
  TextureGradientInstructions: number;
  /** u32 */
  FloatInstructionCount: number;
  /** u32 */
  IntInstructionCount: number;
  /** u32 */
  UintInstructionCount: number;
  /** u32 */
  StaticFlowControlCount: number;
  /** u32 */
  DynamicFlowControlCount: number;
  /** u32 */
  MacroInstructionCount: number;
  /** u32 */
  ArrayInstructionCount: number;
  /** u32 */
  MovInstructionCount: number;
  /** u32 */
  MovcInstructionCount: number;
  /** u32 */
  ConversionInstructionCount: number;
  /** u32 */
  BitwiseInstructionCount: number;
  /** Windows.Win32.Graphics.Direct3D.D3D_FEATURE_LEVEL */
  MinFeatureLevel: D3D_FEATURE_LEVEL;
  /** u64 */
  RequiredFeatureFlags: Deno.PointerValue;
  /** Windows.Win32.Foundation.PSTR */
  Name: string | null;
  /** i32 */
  FunctionParameterCount: number;
  /** Windows.Win32.Foundation.BOOL */
  HasReturn: boolean;
  /** Windows.Win32.Foundation.BOOL */
  Has10Level9VertexShader: boolean;
  /** Windows.Win32.Foundation.BOOL */
  Has10Level9PixelShader: boolean;
}

export const sizeofD3D11_FUNCTION_DESC = 152;

export function allocD3D11_FUNCTION_DESC(data?: Partial<D3D11_FUNCTION_DESC>): Uint8Array {
  const buf = new Uint8Array(sizeofD3D11_FUNCTION_DESC);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.Version !== undefined) view.setUint32(0, Number(data.Version), true);
  // 0x04: pad4
  // 0x08: buffer
  if (data?.Creator !== undefined) {
    (buf as any)._f8 = util.pstrToFfi(data.Creator);
    view.setBigUint64(8, (buf as any)._f8 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f8)), true);
  }
  // 0x10: u32
  if (data?.Flags !== undefined) view.setUint32(16, Number(data.Flags), true);
  // 0x14: u32
  if (data?.ConstantBuffers !== undefined) view.setUint32(20, Number(data.ConstantBuffers), true);
  // 0x18: u32
  if (data?.BoundResources !== undefined) view.setUint32(24, Number(data.BoundResources), true);
  // 0x1c: u32
  if (data?.InstructionCount !== undefined) view.setUint32(28, Number(data.InstructionCount), true);
  // 0x20: u32
  if (data?.TempRegisterCount !== undefined) view.setUint32(32, Number(data.TempRegisterCount), true);
  // 0x24: u32
  if (data?.TempArrayCount !== undefined) view.setUint32(36, Number(data.TempArrayCount), true);
  // 0x28: u32
  if (data?.DefCount !== undefined) view.setUint32(40, Number(data.DefCount), true);
  // 0x2c: u32
  if (data?.DclCount !== undefined) view.setUint32(44, Number(data.DclCount), true);
  // 0x30: u32
  if (data?.TextureNormalInstructions !== undefined) view.setUint32(48, Number(data.TextureNormalInstructions), true);
  // 0x34: u32
  if (data?.TextureLoadInstructions !== undefined) view.setUint32(52, Number(data.TextureLoadInstructions), true);
  // 0x38: u32
  if (data?.TextureCompInstructions !== undefined) view.setUint32(56, Number(data.TextureCompInstructions), true);
  // 0x3c: u32
  if (data?.TextureBiasInstructions !== undefined) view.setUint32(60, Number(data.TextureBiasInstructions), true);
  // 0x40: u32
  if (data?.TextureGradientInstructions !== undefined) view.setUint32(64, Number(data.TextureGradientInstructions), true);
  // 0x44: u32
  if (data?.FloatInstructionCount !== undefined) view.setUint32(68, Number(data.FloatInstructionCount), true);
  // 0x48: u32
  if (data?.IntInstructionCount !== undefined) view.setUint32(72, Number(data.IntInstructionCount), true);
  // 0x4c: u32
  if (data?.UintInstructionCount !== undefined) view.setUint32(76, Number(data.UintInstructionCount), true);
  // 0x50: u32
  if (data?.StaticFlowControlCount !== undefined) view.setUint32(80, Number(data.StaticFlowControlCount), true);
  // 0x54: u32
  if (data?.DynamicFlowControlCount !== undefined) view.setUint32(84, Number(data.DynamicFlowControlCount), true);
  // 0x58: u32
  if (data?.MacroInstructionCount !== undefined) view.setUint32(88, Number(data.MacroInstructionCount), true);
  // 0x5c: u32
  if (data?.ArrayInstructionCount !== undefined) view.setUint32(92, Number(data.ArrayInstructionCount), true);
  // 0x60: u32
  if (data?.MovInstructionCount !== undefined) view.setUint32(96, Number(data.MovInstructionCount), true);
  // 0x64: u32
  if (data?.MovcInstructionCount !== undefined) view.setUint32(100, Number(data.MovcInstructionCount), true);
  // 0x68: u32
  if (data?.ConversionInstructionCount !== undefined) view.setUint32(104, Number(data.ConversionInstructionCount), true);
  // 0x6c: u32
  if (data?.BitwiseInstructionCount !== undefined) view.setUint32(108, Number(data.BitwiseInstructionCount), true);
  // 0x70: i32
  if (data?.MinFeatureLevel !== undefined) view.setInt32(112, Number(data.MinFeatureLevel), true);
  // 0x74: pad4
  // 0x78: u64
  if (data?.RequiredFeatureFlags !== undefined) view.setBigUint64(120, BigInt(data.RequiredFeatureFlags), true);
  // 0x80: buffer
  if (data?.Name !== undefined) {
    (buf as any)._f128 = util.pstrToFfi(data.Name);
    view.setBigUint64(128, (buf as any)._f128 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f128)), true);
  }
  // 0x88: i32
  if (data?.FunctionParameterCount !== undefined) view.setInt32(136, Number(data.FunctionParameterCount), true);
  // 0x8c: i32
  if (data?.HasReturn !== undefined) view.setInt32(140, Number(data.HasReturn), true);
  // 0x90: i32
  if (data?.Has10Level9VertexShader !== undefined) view.setInt32(144, Number(data.Has10Level9VertexShader), true);
  // 0x94: i32
  if (data?.Has10Level9PixelShader !== undefined) view.setInt32(148, Number(data.Has10Level9PixelShader), true);
  return buf;
}

/**
 * Windows.Win32.Graphics.Direct3D11.D3D11_PARAMETER_DESC (size: 56)
 */
export interface D3D11_PARAMETER_DESC {
  /** Windows.Win32.Foundation.PSTR */
  Name: string | null;
  /** Windows.Win32.Foundation.PSTR */
  SemanticName: string | null;
  /** Windows.Win32.Graphics.Direct3D.D3D_SHADER_VARIABLE_TYPE */
  Type: D3D_SHADER_VARIABLE_TYPE;
  /** Windows.Win32.Graphics.Direct3D.D3D_SHADER_VARIABLE_CLASS */
  Class: D3D_SHADER_VARIABLE_CLASS;
  /** u32 */
  Rows: number;
  /** u32 */
  Columns: number;
  /** Windows.Win32.Graphics.Direct3D.D3D_INTERPOLATION_MODE */
  InterpolationMode: D3D_INTERPOLATION_MODE;
  /** Windows.Win32.Graphics.Direct3D.D3D_PARAMETER_FLAGS */
  Flags: D3D_PARAMETER_FLAGS;
  /** u32 */
  FirstInRegister: number;
  /** u32 */
  FirstInComponent: number;
  /** u32 */
  FirstOutRegister: number;
  /** u32 */
  FirstOutComponent: number;
}

export const sizeofD3D11_PARAMETER_DESC = 56;

export function allocD3D11_PARAMETER_DESC(data?: Partial<D3D11_PARAMETER_DESC>): Uint8Array {
  const buf = new Uint8Array(sizeofD3D11_PARAMETER_DESC);
  const view = new DataView(buf.buffer);
  // 0x00: buffer
  if (data?.Name !== undefined) {
    (buf as any)._f0 = util.pstrToFfi(data.Name);
    view.setBigUint64(0, (buf as any)._f0 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f0)), true);
  }
  // 0x08: buffer
  if (data?.SemanticName !== undefined) {
    (buf as any)._f8 = util.pstrToFfi(data.SemanticName);
    view.setBigUint64(8, (buf as any)._f8 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f8)), true);
  }
  // 0x10: i32
  if (data?.Type !== undefined) view.setInt32(16, Number(data.Type), true);
  // 0x14: i32
  if (data?.Class !== undefined) view.setInt32(20, Number(data.Class), true);
  // 0x18: u32
  if (data?.Rows !== undefined) view.setUint32(24, Number(data.Rows), true);
  // 0x1c: u32
  if (data?.Columns !== undefined) view.setUint32(28, Number(data.Columns), true);
  // 0x20: i32
  if (data?.InterpolationMode !== undefined) view.setInt32(32, Number(data.InterpolationMode), true);
  // 0x24: i32
  if (data?.Flags !== undefined) view.setInt32(36, Number(data.Flags), true);
  // 0x28: u32
  if (data?.FirstInRegister !== undefined) view.setUint32(40, Number(data.FirstInRegister), true);
  // 0x2c: u32
  if (data?.FirstInComponent !== undefined) view.setUint32(44, Number(data.FirstInComponent), true);
  // 0x30: u32
  if (data?.FirstOutRegister !== undefined) view.setUint32(48, Number(data.FirstOutRegister), true);
  // 0x34: u32
  if (data?.FirstOutComponent !== undefined) view.setUint32(52, Number(data.FirstOutComponent), true);
  return buf;
}

/**
 * Windows.Win32.Graphics.Direct3D11.D3D11_VERTEX_SHADER_TRACE_DESC (size: 8)
 */
export interface D3D11_VERTEX_SHADER_TRACE_DESC {
  /** u64 */
  Invocation: Deno.PointerValue;
}

export const sizeofD3D11_VERTEX_SHADER_TRACE_DESC = 8;

export function allocD3D11_VERTEX_SHADER_TRACE_DESC(data?: Partial<D3D11_VERTEX_SHADER_TRACE_DESC>): Uint8Array {
  const buf = new Uint8Array(sizeofD3D11_VERTEX_SHADER_TRACE_DESC);
  const view = new DataView(buf.buffer);
  // 0x00: u64
  if (data?.Invocation !== undefined) view.setBigUint64(0, BigInt(data.Invocation), true);
  return buf;
}

/**
 * Windows.Win32.Graphics.Direct3D11.D3D11_HULL_SHADER_TRACE_DESC (size: 8)
 */
export interface D3D11_HULL_SHADER_TRACE_DESC {
  /** u64 */
  Invocation: Deno.PointerValue;
}

export const sizeofD3D11_HULL_SHADER_TRACE_DESC = 8;

export function allocD3D11_HULL_SHADER_TRACE_DESC(data?: Partial<D3D11_HULL_SHADER_TRACE_DESC>): Uint8Array {
  const buf = new Uint8Array(sizeofD3D11_HULL_SHADER_TRACE_DESC);
  const view = new DataView(buf.buffer);
  // 0x00: u64
  if (data?.Invocation !== undefined) view.setBigUint64(0, BigInt(data.Invocation), true);
  return buf;
}

/**
 * Windows.Win32.Graphics.Direct3D11.D3D11_DOMAIN_SHADER_TRACE_DESC (size: 8)
 */
export interface D3D11_DOMAIN_SHADER_TRACE_DESC {
  /** u64 */
  Invocation: Deno.PointerValue;
}

export const sizeofD3D11_DOMAIN_SHADER_TRACE_DESC = 8;

export function allocD3D11_DOMAIN_SHADER_TRACE_DESC(data?: Partial<D3D11_DOMAIN_SHADER_TRACE_DESC>): Uint8Array {
  const buf = new Uint8Array(sizeofD3D11_DOMAIN_SHADER_TRACE_DESC);
  const view = new DataView(buf.buffer);
  // 0x00: u64
  if (data?.Invocation !== undefined) view.setBigUint64(0, BigInt(data.Invocation), true);
  return buf;
}

/**
 * Windows.Win32.Graphics.Direct3D11.D3D11_GEOMETRY_SHADER_TRACE_DESC (size: 8)
 */
export interface D3D11_GEOMETRY_SHADER_TRACE_DESC {
  /** u64 */
  Invocation: Deno.PointerValue;
}

export const sizeofD3D11_GEOMETRY_SHADER_TRACE_DESC = 8;

export function allocD3D11_GEOMETRY_SHADER_TRACE_DESC(data?: Partial<D3D11_GEOMETRY_SHADER_TRACE_DESC>): Uint8Array {
  const buf = new Uint8Array(sizeofD3D11_GEOMETRY_SHADER_TRACE_DESC);
  const view = new DataView(buf.buffer);
  // 0x00: u64
  if (data?.Invocation !== undefined) view.setBigUint64(0, BigInt(data.Invocation), true);
  return buf;
}

/**
 * Windows.Win32.Graphics.Direct3D11.D3D11_PIXEL_SHADER_TRACE_DESC (size: 24)
 */
export interface D3D11_PIXEL_SHADER_TRACE_DESC {
  /** u64 */
  Invocation: Deno.PointerValue;
  /** i32 */
  X: number;
  /** i32 */
  Y: number;
  /** u64 */
  SampleMask: Deno.PointerValue;
}

export const sizeofD3D11_PIXEL_SHADER_TRACE_DESC = 24;

export function allocD3D11_PIXEL_SHADER_TRACE_DESC(data?: Partial<D3D11_PIXEL_SHADER_TRACE_DESC>): Uint8Array {
  const buf = new Uint8Array(sizeofD3D11_PIXEL_SHADER_TRACE_DESC);
  const view = new DataView(buf.buffer);
  // 0x00: u64
  if (data?.Invocation !== undefined) view.setBigUint64(0, BigInt(data.Invocation), true);
  // 0x08: i32
  if (data?.X !== undefined) view.setInt32(8, Number(data.X), true);
  // 0x0c: i32
  if (data?.Y !== undefined) view.setInt32(12, Number(data.Y), true);
  // 0x10: u64
  if (data?.SampleMask !== undefined) view.setBigUint64(16, BigInt(data.SampleMask), true);
  return buf;
}

/**
 * Windows.Win32.Graphics.Direct3D11.D3D11_COMPUTE_SHADER_TRACE_DESC (size: 24)
 */
export interface D3D11_COMPUTE_SHADER_TRACE_DESC {
  /** u64 */
  Invocation: Deno.PointerValue;
  /** array */
  ThreadIDInGroup: Deno.PointerValue | null;
  /** array */
  ThreadGroupID: Deno.PointerValue | null;
}

export const sizeofD3D11_COMPUTE_SHADER_TRACE_DESC = 24;

export function allocD3D11_COMPUTE_SHADER_TRACE_DESC(data?: Partial<D3D11_COMPUTE_SHADER_TRACE_DESC>): Uint8Array {
  const buf = new Uint8Array(sizeofD3D11_COMPUTE_SHADER_TRACE_DESC);
  const view = new DataView(buf.buffer);
  // 0x00: u64
  if (data?.Invocation !== undefined) view.setBigUint64(0, BigInt(data.Invocation), true);
  // 0x08: pointer
  if (data?.ThreadIDInGroup !== undefined) view.setBigUint64(8, data.ThreadIDInGroup === null ? 0n : BigInt(util.toPointer(data.ThreadIDInGroup)), true);
  // 0x10: pointer
  if (data?.ThreadGroupID !== undefined) view.setBigUint64(16, data.ThreadGroupID === null ? 0n : BigInt(util.toPointer(data.ThreadGroupID)), true);
  return buf;
}

/**
 * Windows.Win32.Graphics.Direct3D11.D3D11_SHADER_TRACE_DESC (size: 16)
 */
export interface D3D11_SHADER_TRACE_DESC {
  /** Windows.Win32.Graphics.Direct3D11.D3D11_SHADER_TYPE */
  Type: D3D11_SHADER_TYPE;
  /** u32 */
  Flags: number;
  /** _Anonymous_e__Union */
  Anonymous: Uint8Array | Deno.PointerValue | null;
}

export const sizeofD3D11_SHADER_TRACE_DESC = 16;

export function allocD3D11_SHADER_TRACE_DESC(data?: Partial<D3D11_SHADER_TRACE_DESC>): Uint8Array {
  const buf = new Uint8Array(sizeofD3D11_SHADER_TRACE_DESC);
  const view = new DataView(buf.buffer);
  // 0x00: i32
  if (data?.Type !== undefined) view.setInt32(0, Number(data.Type), true);
  // 0x04: u32
  if (data?.Flags !== undefined) view.setUint32(4, Number(data.Flags), true);
  // 0x08: pointer
  if (data?.Anonymous !== undefined) view.setBigUint64(8, data.Anonymous === null ? 0n : BigInt(util.toPointer(data.Anonymous)), true);
  return buf;
}

/**
 * Windows.Win32.Graphics.Direct3D11.D3D11_TRACE_STATS (size: 144)
 */
export interface D3D11_TRACE_STATS {
  /** Windows.Win32.Graphics.Direct3D11.D3D11_SHADER_TRACE_DESC */
  TraceDesc: Uint8Array | Deno.PointerValue | null;
  /** u8 */
  NumInvocationsInStamp: number;
  /** u8 */
  TargetStampIndex: number;
  /** u32 */
  NumTraceSteps: number;
  /** array */
  InputMask: Deno.PointerValue | null;
  /** array */
  OutputMask: Deno.PointerValue | null;
  /** u16 */
  NumTemps: number;
  /** u16 */
  MaxIndexableTempIndex: number;
  /** array */
  IndexableTempSize: Deno.PointerValue | null;
  /** u16 */
  ImmediateConstantBufferSize: number;
  /** array */
  PixelPosition: Deno.PointerValue | null;
  /** array */
  PixelCoverageMask: Deno.PointerValue | null;
  /** array */
  PixelDiscardedMask: Deno.PointerValue | null;
  /** array */
  PixelCoverageMaskAfterShader: Deno.PointerValue | null;
  /** array */
  PixelCoverageMaskAfterA2CSampleMask: Deno.PointerValue | null;
  /** array */
  PixelCoverageMaskAfterA2CSampleMaskDepth: Deno.PointerValue | null;
  /** array */
  PixelCoverageMaskAfterA2CSampleMaskDepthStencil: Deno.PointerValue | null;
  /** Windows.Win32.Foundation.BOOL */
  PSOutputsDepth: boolean;
  /** Windows.Win32.Foundation.BOOL */
  PSOutputsMask: boolean;
  /** Windows.Win32.Graphics.Direct3D11.D3D11_TRACE_GS_INPUT_PRIMITIVE */
  GSInputPrimitive: D3D11_TRACE_GS_INPUT_PRIMITIVE;
  /** Windows.Win32.Foundation.BOOL */
  GSInputsPrimitiveID: boolean;
  /** array */
  HSOutputPatchConstantMask: Deno.PointerValue | null;
  /** array */
  DSInputPatchConstantMask: Deno.PointerValue | null;
}

export const sizeofD3D11_TRACE_STATS = 144;

export function allocD3D11_TRACE_STATS(data?: Partial<D3D11_TRACE_STATS>): Uint8Array {
  const buf = new Uint8Array(sizeofD3D11_TRACE_STATS);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.TraceDesc !== undefined) view.setBigUint64(0, data.TraceDesc === null ? 0n : BigInt(util.toPointer(data.TraceDesc)), true);
  // 0x08: u8
  if (data?.NumInvocationsInStamp !== undefined) view.setUint8(8, Number(data.NumInvocationsInStamp));
  // 0x09: u8
  if (data?.TargetStampIndex !== undefined) view.setUint8(9, Number(data.TargetStampIndex));
  // 0x0a: u32
  if (data?.NumTraceSteps !== undefined) view.setUint32(10, Number(data.NumTraceSteps), true);
  // 0x0e: pad2
  // 0x10: pointer
  if (data?.InputMask !== undefined) view.setBigUint64(16, data.InputMask === null ? 0n : BigInt(util.toPointer(data.InputMask)), true);
  // 0x18: pointer
  if (data?.OutputMask !== undefined) view.setBigUint64(24, data.OutputMask === null ? 0n : BigInt(util.toPointer(data.OutputMask)), true);
  // 0x20: u16
  if (data?.NumTemps !== undefined) view.setUint16(32, Number(data.NumTemps), true);
  // 0x22: u16
  if (data?.MaxIndexableTempIndex !== undefined) view.setUint16(34, Number(data.MaxIndexableTempIndex), true);
  // 0x24: pad4
  // 0x28: pointer
  if (data?.IndexableTempSize !== undefined) view.setBigUint64(40, data.IndexableTempSize === null ? 0n : BigInt(util.toPointer(data.IndexableTempSize)), true);
  // 0x30: u16
  if (data?.ImmediateConstantBufferSize !== undefined) view.setUint16(48, Number(data.ImmediateConstantBufferSize), true);
  // 0x32: pad6
  // 0x38: pointer
  if (data?.PixelPosition !== undefined) view.setBigUint64(56, data.PixelPosition === null ? 0n : BigInt(util.toPointer(data.PixelPosition)), true);
  // 0x40: pointer
  if (data?.PixelCoverageMask !== undefined) view.setBigUint64(64, data.PixelCoverageMask === null ? 0n : BigInt(util.toPointer(data.PixelCoverageMask)), true);
  // 0x48: pointer
  if (data?.PixelDiscardedMask !== undefined) view.setBigUint64(72, data.PixelDiscardedMask === null ? 0n : BigInt(util.toPointer(data.PixelDiscardedMask)), true);
  // 0x50: pointer
  if (data?.PixelCoverageMaskAfterShader !== undefined) view.setBigUint64(80, data.PixelCoverageMaskAfterShader === null ? 0n : BigInt(util.toPointer(data.PixelCoverageMaskAfterShader)), true);
  // 0x58: pointer
  if (data?.PixelCoverageMaskAfterA2CSampleMask !== undefined) view.setBigUint64(88, data.PixelCoverageMaskAfterA2CSampleMask === null ? 0n : BigInt(util.toPointer(data.PixelCoverageMaskAfterA2CSampleMask)), true);
  // 0x60: pointer
  if (data?.PixelCoverageMaskAfterA2CSampleMaskDepth !== undefined) view.setBigUint64(96, data.PixelCoverageMaskAfterA2CSampleMaskDepth === null ? 0n : BigInt(util.toPointer(data.PixelCoverageMaskAfterA2CSampleMaskDepth)), true);
  // 0x68: pointer
  if (data?.PixelCoverageMaskAfterA2CSampleMaskDepthStencil !== undefined) view.setBigUint64(104, data.PixelCoverageMaskAfterA2CSampleMaskDepthStencil === null ? 0n : BigInt(util.toPointer(data.PixelCoverageMaskAfterA2CSampleMaskDepthStencil)), true);
  // 0x70: i32
  if (data?.PSOutputsDepth !== undefined) view.setInt32(112, Number(data.PSOutputsDepth), true);
  // 0x74: i32
  if (data?.PSOutputsMask !== undefined) view.setInt32(116, Number(data.PSOutputsMask), true);
  // 0x78: i32
  if (data?.GSInputPrimitive !== undefined) view.setInt32(120, Number(data.GSInputPrimitive), true);
  // 0x7c: i32
  if (data?.GSInputsPrimitiveID !== undefined) view.setInt32(124, Number(data.GSInputsPrimitiveID), true);
  // 0x80: pointer
  if (data?.HSOutputPatchConstantMask !== undefined) view.setBigUint64(128, data.HSOutputPatchConstantMask === null ? 0n : BigInt(util.toPointer(data.HSOutputPatchConstantMask)), true);
  // 0x88: pointer
  if (data?.DSInputPatchConstantMask !== undefined) view.setBigUint64(136, data.DSInputPatchConstantMask === null ? 0n : BigInt(util.toPointer(data.DSInputPatchConstantMask)), true);
  return buf;
}

/**
 * Windows.Win32.Graphics.Direct3D11.D3D11_TRACE_VALUE (size: 16)
 */
export interface D3D11_TRACE_VALUE {
  /** array */
  Bits: Deno.PointerValue | null;
  /** u8 */
  ValidMask: number;
}

export const sizeofD3D11_TRACE_VALUE = 16;

export function allocD3D11_TRACE_VALUE(data?: Partial<D3D11_TRACE_VALUE>): Uint8Array {
  const buf = new Uint8Array(sizeofD3D11_TRACE_VALUE);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.Bits !== undefined) view.setBigUint64(0, data.Bits === null ? 0n : BigInt(util.toPointer(data.Bits)), true);
  // 0x08: u8
  if (data?.ValidMask !== undefined) view.setUint8(8, Number(data.ValidMask));
  // 0x09: pad7
  return buf;
}

/**
 * Windows.Win32.Graphics.Direct3D11.D3D11_TRACE_REGISTER (size: 24)
 */
export interface D3D11_TRACE_REGISTER {
  /** Windows.Win32.Graphics.Direct3D11.D3D11_TRACE_REGISTER_TYPE */
  RegType: D3D11_TRACE_REGISTER_TYPE;
  /** _Anonymous_e__Union */
  Anonymous: Uint8Array | Deno.PointerValue | null;
  /** u8 */
  OperandIndex: number;
  /** u8 */
  Flags: number;
}

export const sizeofD3D11_TRACE_REGISTER = 24;

export function allocD3D11_TRACE_REGISTER(data?: Partial<D3D11_TRACE_REGISTER>): Uint8Array {
  const buf = new Uint8Array(sizeofD3D11_TRACE_REGISTER);
  const view = new DataView(buf.buffer);
  // 0x00: i32
  if (data?.RegType !== undefined) view.setInt32(0, Number(data.RegType), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.Anonymous !== undefined) view.setBigUint64(8, data.Anonymous === null ? 0n : BigInt(util.toPointer(data.Anonymous)), true);
  // 0x10: u8
  if (data?.OperandIndex !== undefined) view.setUint8(16, Number(data.OperandIndex));
  // 0x11: u8
  if (data?.Flags !== undefined) view.setUint8(17, Number(data.Flags));
  // 0x12: pad6
  return buf;
}

/**
 * Windows.Win32.Graphics.Direct3D11.D3D11_TRACE_STEP (size: 24)
 */
export interface D3D11_TRACE_STEP {
  /** u32 */
  ID: number;
  /** Windows.Win32.Foundation.BOOL */
  InstructionActive: boolean;
  /** u8 */
  NumRegistersWritten: number;
  /** u8 */
  NumRegistersRead: number;
  /** u16 */
  MiscOperations: number;
  /** u32 */
  OpcodeType: number;
  /** u64 */
  CurrentGlobalCycle: Deno.PointerValue;
}

export const sizeofD3D11_TRACE_STEP = 24;

export function allocD3D11_TRACE_STEP(data?: Partial<D3D11_TRACE_STEP>): Uint8Array {
  const buf = new Uint8Array(sizeofD3D11_TRACE_STEP);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.ID !== undefined) view.setUint32(0, Number(data.ID), true);
  // 0x04: i32
  if (data?.InstructionActive !== undefined) view.setInt32(4, Number(data.InstructionActive), true);
  // 0x08: u8
  if (data?.NumRegistersWritten !== undefined) view.setUint8(8, Number(data.NumRegistersWritten));
  // 0x09: u8
  if (data?.NumRegistersRead !== undefined) view.setUint8(9, Number(data.NumRegistersRead));
  // 0x0a: u16
  if (data?.MiscOperations !== undefined) view.setUint16(10, Number(data.MiscOperations), true);
  // 0x0c: u32
  if (data?.OpcodeType !== undefined) view.setUint32(12, Number(data.OpcodeType), true);
  // 0x10: u64
  if (data?.CurrentGlobalCycle !== undefined) view.setBigUint64(16, BigInt(data.CurrentGlobalCycle), true);
  return buf;
}

/**
 * Windows.Win32.Graphics.Direct3D11.D3DX11_FFT_DESC (size: 24)
 */
export interface D3DX11_FFT_DESC {
  /** u32 */
  NumDimensions: number;
  /** array */
  ElementLengths: Deno.PointerValue | null;
  /** u32 */
  DimensionMask: number;
  /** Windows.Win32.Graphics.Direct3D11.D3DX11_FFT_DATA_TYPE */
  Type: D3DX11_FFT_DATA_TYPE;
}

export const sizeofD3DX11_FFT_DESC = 24;

export function allocD3DX11_FFT_DESC(data?: Partial<D3DX11_FFT_DESC>): Uint8Array {
  const buf = new Uint8Array(sizeofD3DX11_FFT_DESC);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.NumDimensions !== undefined) view.setUint32(0, Number(data.NumDimensions), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.ElementLengths !== undefined) view.setBigUint64(8, data.ElementLengths === null ? 0n : BigInt(util.toPointer(data.ElementLengths)), true);
  // 0x10: u32
  if (data?.DimensionMask !== undefined) view.setUint32(16, Number(data.DimensionMask), true);
  // 0x14: i32
  if (data?.Type !== undefined) view.setInt32(20, Number(data.Type), true);
  return buf;
}

/**
 * Windows.Win32.Graphics.Direct3D11.D3DX11_FFT_BUFFER_INFO (size: 32)
 */
export interface D3DX11_FFT_BUFFER_INFO {
  /** u32 */
  NumTempBufferSizes: number;
  /** array */
  TempBufferFloatSizes: Deno.PointerValue | null;
  /** u32 */
  NumPrecomputeBufferSizes: number;
  /** array */
  PrecomputeBufferFloatSizes: Deno.PointerValue | null;
}

export const sizeofD3DX11_FFT_BUFFER_INFO = 32;

export function allocD3DX11_FFT_BUFFER_INFO(data?: Partial<D3DX11_FFT_BUFFER_INFO>): Uint8Array {
  const buf = new Uint8Array(sizeofD3DX11_FFT_BUFFER_INFO);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.NumTempBufferSizes !== undefined) view.setUint32(0, Number(data.NumTempBufferSizes), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.TempBufferFloatSizes !== undefined) view.setBigUint64(8, data.TempBufferFloatSizes === null ? 0n : BigInt(util.toPointer(data.TempBufferFloatSizes)), true);
  // 0x10: u32
  if (data?.NumPrecomputeBufferSizes !== undefined) view.setUint32(16, Number(data.NumPrecomputeBufferSizes), true);
  // 0x14: pad4
  // 0x18: pointer
  if (data?.PrecomputeBufferFloatSizes !== undefined) view.setBigUint64(24, data.PrecomputeBufferFloatSizes === null ? 0n : BigInt(util.toPointer(data.PrecomputeBufferFloatSizes)), true);
  return buf;
}

/**
 * Windows.Win32.Graphics.Direct3D11on12.D3D11_RESOURCE_FLAGS (size: 16)
 */
export interface D3D11_RESOURCE_FLAGS {
  /** u32 */
  BindFlags: number;
  /** u32 */
  MiscFlags: number;
  /** u32 */
  CPUAccessFlags: number;
  /** u32 */
  StructureByteStride: number;
}

export const sizeofD3D11_RESOURCE_FLAGS = 16;

export function allocD3D11_RESOURCE_FLAGS(data?: Partial<D3D11_RESOURCE_FLAGS>): Uint8Array {
  const buf = new Uint8Array(sizeofD3D11_RESOURCE_FLAGS);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.BindFlags !== undefined) view.setUint32(0, Number(data.BindFlags), true);
  // 0x04: u32
  if (data?.MiscFlags !== undefined) view.setUint32(4, Number(data.MiscFlags), true);
  // 0x08: u32
  if (data?.CPUAccessFlags !== undefined) view.setUint32(8, Number(data.CPUAccessFlags), true);
  // 0x0c: u32
  if (data?.StructureByteStride !== undefined) view.setUint32(12, Number(data.StructureByteStride), true);
  return buf;
}

export type HINSTANCE = Deno.PointerValue;

// Native Libraries

try {
  var libd3d11_dll = Deno.dlopen("d3d11.dll", {
    D3D11CreateDevice: {
      parameters: ["pointer", "i32", "pointer", "u32", "pointer", "u32", "u32", "pointer", "pointer", "pointer"],
      result: "pointer",
    },
    D3D11CreateDeviceAndSwapChain: {
      parameters: ["pointer", "i32", "pointer", "u32", "pointer", "u32", "u32", "pointer", "pointer", "pointer", "pointer", "pointer"],
      result: "pointer",
    },
  }).symbols;
} catch(e) { /* ignore */ }

try {
  var libD3DCOMPILER_47_dll = Deno.dlopen("D3DCOMPILER_47.dll", {
    D3DDisassemble11Trace: {
      parameters: ["pointer", "usize", "pointer", "u32", "u32", "u32", "pointer"],
      result: "pointer",
    },
  }).symbols;
} catch(e) { /* ignore */ }

try {
  var libd3dcsx_dll = Deno.dlopen("d3dcsx.dll", {
    D3DX11CreateScan: {
      parameters: ["pointer", "u32", "u32", "pointer"],
      result: "pointer",
    },
    D3DX11CreateSegmentedScan: {
      parameters: ["pointer", "u32", "pointer"],
      result: "pointer",
    },
    D3DX11CreateFFT: {
      parameters: ["pointer", "pointer", "u32", "pointer", "pointer"],
      result: "pointer",
    },
    D3DX11CreateFFT1DReal: {
      parameters: ["pointer", "u32", "u32", "pointer", "pointer"],
      result: "pointer",
    },
    D3DX11CreateFFT1DComplex: {
      parameters: ["pointer", "u32", "u32", "pointer", "pointer"],
      result: "pointer",
    },
    D3DX11CreateFFT2DReal: {
      parameters: ["pointer", "u32", "u32", "u32", "pointer", "pointer"],
      result: "pointer",
    },
    D3DX11CreateFFT2DComplex: {
      parameters: ["pointer", "u32", "u32", "u32", "pointer", "pointer"],
      result: "pointer",
    },
    D3DX11CreateFFT3DReal: {
      parameters: ["pointer", "u32", "u32", "u32", "u32", "pointer", "pointer"],
      result: "pointer",
    },
    D3DX11CreateFFT3DComplex: {
      parameters: ["pointer", "u32", "u32", "u32", "u32", "pointer", "pointer"],
      result: "pointer",
    },
  }).symbols;
} catch(e) { /* ignore */ }

// Symbols

export function D3D11CreateDevice(
  pAdapter: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Graphics.Dxgi.IDXGIAdapter */,
  DriverType: D3D_DRIVER_TYPE /* Windows.Win32.Graphics.Direct3D.D3D_DRIVER_TYPE */,
  Software: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Foundation.HINSTANCE */,
  Flags: D3D11_CREATE_DEVICE_FLAG /* Windows.Win32.Graphics.Direct3D11.D3D11_CREATE_DEVICE_FLAG */,
  pFeatureLevels: Deno.PointerValue | Uint8Array | null /* ptr */,
  FeatureLevels: number /* u32 */,
  SDKVersion: number /* u32 */,
  ppDevice: Deno.PointerValue | Uint8Array | null /* ptr */,
  pFeatureLevel: Deno.PointerValue | Uint8Array | null /* ptr */,
  ppImmediateContext: Deno.PointerValue | Uint8Array | null /* ptr */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libd3d11_dll.D3D11CreateDevice(util.toPointer(pAdapter), DriverType, util.toPointer(Software), Flags, util.toPointer(pFeatureLevels), FeatureLevels, SDKVersion, util.toPointer(ppDevice), util.toPointer(pFeatureLevel), util.toPointer(ppImmediateContext)));
}

export function D3D11CreateDeviceAndSwapChain(
  pAdapter: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Graphics.Dxgi.IDXGIAdapter */,
  DriverType: D3D_DRIVER_TYPE /* Windows.Win32.Graphics.Direct3D.D3D_DRIVER_TYPE */,
  Software: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Foundation.HINSTANCE */,
  Flags: D3D11_CREATE_DEVICE_FLAG /* Windows.Win32.Graphics.Direct3D11.D3D11_CREATE_DEVICE_FLAG */,
  pFeatureLevels: Deno.PointerValue | Uint8Array | null /* ptr */,
  FeatureLevels: number /* u32 */,
  SDKVersion: number /* u32 */,
  pSwapChainDesc: Deno.PointerValue | Uint8Array | null /* ptr */,
  ppSwapChain: Deno.PointerValue | Uint8Array | null /* ptr */,
  ppDevice: Deno.PointerValue | Uint8Array | null /* ptr */,
  pFeatureLevel: Deno.PointerValue | Uint8Array | null /* ptr */,
  ppImmediateContext: Deno.PointerValue | Uint8Array | null /* ptr */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libd3d11_dll.D3D11CreateDeviceAndSwapChain(util.toPointer(pAdapter), DriverType, util.toPointer(Software), Flags, util.toPointer(pFeatureLevels), FeatureLevels, SDKVersion, util.toPointer(pSwapChainDesc), util.toPointer(ppSwapChain), util.toPointer(ppDevice), util.toPointer(pFeatureLevel), util.toPointer(ppImmediateContext)));
}

export function D3DDisassemble11Trace(
  pSrcData: Deno.PointerValue | Uint8Array | null /* ptr */,
  SrcDataSize: Deno.PointerValue /* usize */,
  pTrace: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Graphics.Direct3D11.ID3D11ShaderTrace */,
  StartStep: number /* u32 */,
  NumSteps: number /* u32 */,
  Flags: number /* u32 */,
  ppDisassembly: Deno.PointerValue | Uint8Array | null /* ptr */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libD3DCOMPILER_47_dll.D3DDisassemble11Trace(util.toPointer(pSrcData), SrcDataSize, util.toPointer(pTrace), StartStep, NumSteps, Flags, util.toPointer(ppDisassembly)));
}

export function D3DX11CreateScan(
  pDeviceContext: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Graphics.Direct3D11.ID3D11DeviceContext */,
  MaxElementScanSize: number /* u32 */,
  MaxScanCount: number /* u32 */,
  ppScan: Deno.PointerValue | Uint8Array | null /* ptr */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libd3dcsx_dll.D3DX11CreateScan(util.toPointer(pDeviceContext), MaxElementScanSize, MaxScanCount, util.toPointer(ppScan)));
}

export function D3DX11CreateSegmentedScan(
  pDeviceContext: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Graphics.Direct3D11.ID3D11DeviceContext */,
  MaxElementScanSize: number /* u32 */,
  ppScan: Deno.PointerValue | Uint8Array | null /* ptr */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libd3dcsx_dll.D3DX11CreateSegmentedScan(util.toPointer(pDeviceContext), MaxElementScanSize, util.toPointer(ppScan)));
}

export function D3DX11CreateFFT(
  pDeviceContext: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Graphics.Direct3D11.ID3D11DeviceContext */,
  pDesc: Deno.PointerValue | Uint8Array | null /* ptr */,
  Flags: number /* u32 */,
  pBufferInfo: Deno.PointerValue | Uint8Array | null /* ptr */,
  ppFFT: Deno.PointerValue | Uint8Array | null /* ptr */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libd3dcsx_dll.D3DX11CreateFFT(util.toPointer(pDeviceContext), util.toPointer(pDesc), Flags, util.toPointer(pBufferInfo), util.toPointer(ppFFT)));
}

export function D3DX11CreateFFT1DReal(
  pDeviceContext: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Graphics.Direct3D11.ID3D11DeviceContext */,
  X: number /* u32 */,
  Flags: number /* u32 */,
  pBufferInfo: Deno.PointerValue | Uint8Array | null /* ptr */,
  ppFFT: Deno.PointerValue | Uint8Array | null /* ptr */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libd3dcsx_dll.D3DX11CreateFFT1DReal(util.toPointer(pDeviceContext), X, Flags, util.toPointer(pBufferInfo), util.toPointer(ppFFT)));
}

export function D3DX11CreateFFT1DComplex(
  pDeviceContext: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Graphics.Direct3D11.ID3D11DeviceContext */,
  X: number /* u32 */,
  Flags: number /* u32 */,
  pBufferInfo: Deno.PointerValue | Uint8Array | null /* ptr */,
  ppFFT: Deno.PointerValue | Uint8Array | null /* ptr */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libd3dcsx_dll.D3DX11CreateFFT1DComplex(util.toPointer(pDeviceContext), X, Flags, util.toPointer(pBufferInfo), util.toPointer(ppFFT)));
}

export function D3DX11CreateFFT2DReal(
  pDeviceContext: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Graphics.Direct3D11.ID3D11DeviceContext */,
  X: number /* u32 */,
  Y: number /* u32 */,
  Flags: number /* u32 */,
  pBufferInfo: Deno.PointerValue | Uint8Array | null /* ptr */,
  ppFFT: Deno.PointerValue | Uint8Array | null /* ptr */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libd3dcsx_dll.D3DX11CreateFFT2DReal(util.toPointer(pDeviceContext), X, Y, Flags, util.toPointer(pBufferInfo), util.toPointer(ppFFT)));
}

export function D3DX11CreateFFT2DComplex(
  pDeviceContext: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Graphics.Direct3D11.ID3D11DeviceContext */,
  X: number /* u32 */,
  Y: number /* u32 */,
  Flags: number /* u32 */,
  pBufferInfo: Deno.PointerValue | Uint8Array | null /* ptr */,
  ppFFT: Deno.PointerValue | Uint8Array | null /* ptr */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libd3dcsx_dll.D3DX11CreateFFT2DComplex(util.toPointer(pDeviceContext), X, Y, Flags, util.toPointer(pBufferInfo), util.toPointer(ppFFT)));
}

export function D3DX11CreateFFT3DReal(
  pDeviceContext: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Graphics.Direct3D11.ID3D11DeviceContext */,
  X: number /* u32 */,
  Y: number /* u32 */,
  Z: number /* u32 */,
  Flags: number /* u32 */,
  pBufferInfo: Deno.PointerValue | Uint8Array | null /* ptr */,
  ppFFT: Deno.PointerValue | Uint8Array | null /* ptr */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libd3dcsx_dll.D3DX11CreateFFT3DReal(util.toPointer(pDeviceContext), X, Y, Z, Flags, util.toPointer(pBufferInfo), util.toPointer(ppFFT)));
}

export function D3DX11CreateFFT3DComplex(
  pDeviceContext: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Graphics.Direct3D11.ID3D11DeviceContext */,
  X: number /* u32 */,
  Y: number /* u32 */,
  Z: number /* u32 */,
  Flags: number /* u32 */,
  pBufferInfo: Deno.PointerValue | Uint8Array | null /* ptr */,
  ppFFT: Deno.PointerValue | Uint8Array | null /* ptr */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libd3dcsx_dll.D3DX11CreateFFT3DComplex(util.toPointer(pDeviceContext), X, Y, Z, Flags, util.toPointer(pBufferInfo), util.toPointer(ppFFT)));
}

