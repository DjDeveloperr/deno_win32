/// Auto-generated by Deno Win32: Windows.Win32.Graphics.Direct3D.Apis

import * as util from "../../util.ts";

// Enums
export type DXC_CP = number;
export type D3D_DRIVER_TYPE = number;
export type D3D_FEATURE_LEVEL = number;
export type D3D_PRIMITIVE_TOPOLOGY = number;
export type D3D_PRIMITIVE = number;
export type D3D_SRV_DIMENSION = number;
export type D3D_INCLUDE_TYPE = number;
export type D3D_SHADER_VARIABLE_CLASS = number;
export type D3D_SHADER_VARIABLE_FLAGS = number;
export type D3D_SHADER_VARIABLE_TYPE = number;
export type D3D_SHADER_INPUT_FLAGS = number;
export type D3D_SHADER_INPUT_TYPE = number;
export type D3D_SHADER_CBUFFER_FLAGS = number;
export type D3D_CBUFFER_TYPE = number;
export type D3D_NAME = number;
export type D3D_RESOURCE_RETURN_TYPE = number;
export type D3D_REGISTER_COMPONENT_TYPE = number;
export type D3D_TESSELLATOR_DOMAIN = number;
export type D3D_TESSELLATOR_PARTITIONING = number;
export type D3D_TESSELLATOR_OUTPUT_PRIMITIVE = number;
export type D3D_MIN_PRECISION = number;
export type D3D_INTERPOLATION_MODE = number;
export type D3D_PARAMETER_FLAGS = number;
export type D3D10_INPUT_CLASSIFICATION = number;
export type DXGI_FORMAT = number;
export type D3D10_FILL_MODE = number;
export type D3D10_CULL_MODE = number;
export type D3D10_RESOURCE_DIMENSION = number;
export type D3D10_DSV_DIMENSION = number;
export type D3D10_RTV_DIMENSION = number;
export type D3D10_USAGE = number;
export type D3D10_BIND_FLAG = number;
export type D3D10_CPU_ACCESS_FLAG = number;
export type D3D10_RESOURCE_MISC_FLAG = number;
export type D3D10_MAP = number;
export type D3D10_MAP_FLAG = number;
export type D3D10_RAISE_FLAG = number;
export type D3D10_CLEAR_FLAG = number;
export type D3D10_COMPARISON_FUNC = number;
export type D3D10_DEPTH_WRITE_MASK = number;
export type D3D10_STENCIL_OP = number;
export type D3D10_BLEND = number;
export type D3D10_BLEND_OP = number;
export type D3D10_COLOR_WRITE_ENABLE = number;
export type D3D10_TEXTURECUBE_FACE = number;
export type D3D10_FILTER = number;
export type D3D10_FILTER_TYPE = number;
export type D3D10_TEXTURE_ADDRESS_MODE = number;
export type D3D10_FORMAT_SUPPORT = number;
export type D3D10_ASYNC_GETDATA_FLAG = number;
export type D3D10_QUERY = number;
export type D3D10_QUERY_MISC_FLAG = number;
export type D3D10_COUNTER = number;
export type D3D10_COUNTER_TYPE = number;
export type D3D10_CREATE_DEVICE_FLAG = number;
export type D3D10_MESSAGE_CATEGORY = number;
export type D3D10_MESSAGE_SEVERITY = number;
export type D3D10_MESSAGE_ID = number;
export type D3D10_DRIVER_TYPE = number;
export type D3D10_DEVICE_STATE_TYPES = number;
export type D3D10_FEATURE_LEVEL1 = number;
export type D3D10_STANDARD_MULTISAMPLE_QUALITY_LEVELS = number;
export type D3D10_SHADER_DEBUG_REGTYPE = number;
export type D3D10_SHADER_DEBUG_SCOPETYPE = number;
export type D3D10_SHADER_DEBUG_VARTYPE = number;
export type D3D11_INPUT_CLASSIFICATION = number;
export type D3D11_FILL_MODE = number;
export type D3D11_CULL_MODE = number;
export type D3D11_RESOURCE_DIMENSION = number;
export type D3D11_DSV_DIMENSION = number;
export type D3D11_RTV_DIMENSION = number;
export type D3D11_UAV_DIMENSION = number;
export type D3D11_USAGE = number;
export type D3D11_BIND_FLAG = number;
export type D3D11_CPU_ACCESS_FLAG = number;
export type D3D11_RESOURCE_MISC_FLAG = number;
export type D3D11_MAP = number;
export type D3D11_MAP_FLAG = number;
export type D3D11_RAISE_FLAG = number;
export type D3D11_CLEAR_FLAG = number;
export type D3D11_COMPARISON_FUNC = number;
export type D3D11_DEPTH_WRITE_MASK = number;
export type D3D11_STENCIL_OP = number;
export type D3D11_BLEND = number;
export type D3D11_BLEND_OP = number;
export type D3D11_COLOR_WRITE_ENABLE = number;
export type D3D11_TEXTURECUBE_FACE = number;
export type D3D11_BUFFEREX_SRV_FLAG = number;
export type D3D11_DSV_FLAG = number;
export type D3D11_BUFFER_UAV_FLAG = number;
export type D3D11_FILTER = number;
export type D3D11_FILTER_TYPE = number;
export type D3D11_FILTER_REDUCTION_TYPE = number;
export type D3D11_TEXTURE_ADDRESS_MODE = number;
export type D3D11_FORMAT_SUPPORT = number;
export type D3D11_FORMAT_SUPPORT2 = number;
export type D3D11_ASYNC_GETDATA_FLAG = number;
export type D3D11_QUERY = number;
export type D3D11_QUERY_MISC_FLAG = number;
export type D3D11_COUNTER = number;
export type D3D11_COUNTER_TYPE = number;
export type D3D11_STANDARD_MULTISAMPLE_QUALITY_LEVELS = number;
export type D3D11_DEVICE_CONTEXT_TYPE = number;
export type D3D11_FEATURE = number;
export type D3D11_SHADER_MIN_PRECISION_SUPPORT = number;
export type D3D11_TILED_RESOURCES_TIER = number;
export type D3D11_CONSERVATIVE_RASTERIZATION_TIER = number;
export type D3D11_SHADER_CACHE_SUPPORT_FLAGS = number;
export type D3D11_SHARED_RESOURCE_TIER = number;
export type D3D11_VIDEO_DECODER_BUFFER_TYPE = number;
export type D3D11_VIDEO_PROCESSOR_FORMAT_SUPPORT = number;
export type D3D11_VIDEO_PROCESSOR_DEVICE_CAPS = number;
export type D3D11_VIDEO_PROCESSOR_FEATURE_CAPS = number;
export type D3D11_VIDEO_PROCESSOR_FILTER_CAPS = number;
export type D3D11_VIDEO_PROCESSOR_FORMAT_CAPS = number;
export type D3D11_VIDEO_PROCESSOR_AUTO_STREAM_CAPS = number;
export type D3D11_VIDEO_PROCESSOR_STEREO_CAPS = number;
export type D3D11_VIDEO_PROCESSOR_PROCESSOR_CAPS = number;
export type D3D11_VIDEO_PROCESSOR_ITELECINE_CAPS = number;
export type D3D11_CONTENT_PROTECTION_CAPS = number;
export type D3D11_VIDEO_PROCESSOR_FILTER = number;
export type D3D11_VIDEO_FRAME_FORMAT = number;
export type D3D11_VIDEO_USAGE = number;
export type D3D11_VIDEO_PROCESSOR_NOMINAL_RANGE = number;
export type D3D11_VIDEO_PROCESSOR_ALPHA_FILL_MODE = number;
export type D3D11_VIDEO_PROCESSOR_OUTPUT_RATE = number;
export type D3D11_VIDEO_PROCESSOR_STEREO_FORMAT = number;
export type D3D11_VIDEO_PROCESSOR_STEREO_FLIP_MODE = number;
export type D3D11_VIDEO_PROCESSOR_ROTATION = number;
export type D3D11_AUTHENTICATED_CHANNEL_TYPE = number;
export type D3D11_AUTHENTICATED_PROCESS_IDENTIFIER_TYPE = number;
export type D3D11_BUS_TYPE = number;
export type D3D11_VDOV_DIMENSION = number;
export type D3D11_VPIV_DIMENSION = number;
export type D3D11_VPOV_DIMENSION = number;
export type D3D11_CREATE_DEVICE_FLAG = number;
export type D3D11_RLDO_FLAGS = number;
export type D3D11_SHADER_TRACKING_RESOURCE_TYPE = number;
export type D3D11_SHADER_TRACKING_OPTIONS = number;
export type D3D11_MESSAGE_CATEGORY = number;
export type D3D11_MESSAGE_SEVERITY = number;
export type D3D11_MESSAGE_ID = number;
export type D3D11_COPY_FLAGS = number;
export type D3D11_LOGIC_OP = number;
export type D3D11_1_CREATE_DEVICE_CONTEXT_STATE_FLAG = number;
export type D3D11_VIDEO_DECODER_CAPS = number;
export type D3D11_VIDEO_PROCESSOR_BEHAVIOR_HINTS = number;
export type D3D11_CRYPTO_SESSION_STATUS = number;
export type DXGI_COLOR_SPACE_TYPE = number;
export type D3D11_TILE_MAPPING_FLAG = number;
export type D3D11_TILE_RANGE_FLAG = number;
export type D3D11_CHECK_MULTISAMPLE_QUALITY_LEVELS_FLAG = number;
export type D3D11_TILE_COPY_FLAG = number;
export type D3D11_CONTEXT_TYPE = number;
export type D3D11_TEXTURE_LAYOUT = number;
export type D3D11_CONSERVATIVE_RASTERIZATION_MODE = number;
export type D3D11_FENCE_FLAG = number;
export type D3D11_FEATURE_VIDEO = number;
export type D3D11_VIDEO_DECODER_HISTOGRAM_COMPONENT = number;
export type D3D11_VIDEO_DECODER_HISTOGRAM_COMPONENT_FLAGS = number;
export type D3D11_CRYPTO_SESSION_KEY_EXCHANGE_FLAGS = number;
export type D3D11_SHADER_VERSION_TYPE = number;
export type D3D11_SHADER_TYPE = number;
export type D3D11_TRACE_GS_INPUT_PRIMITIVE = number;
export type D3D11_TRACE_REGISTER_TYPE = number;
export type D3DX11_SCAN_DATA_TYPE = number;
export type D3DX11_SCAN_OPCODE = number;
export type D3DX11_SCAN_DIRECTION = number;
export type D3DX11_FFT_DATA_TYPE = number;
export type D3DX11_FFT_DIM_MASK = number;
export type D3DX11_FFT_CREATE_FLAG = number;
export type D3D12_COMMAND_LIST_TYPE = number;
export type D3D12_COMMAND_QUEUE_FLAGS = number;
export type D3D12_COMMAND_QUEUE_PRIORITY = number;
export type D3D12_PRIMITIVE_TOPOLOGY_TYPE = number;
export type D3D12_INPUT_CLASSIFICATION = number;
export type D3D12_FILL_MODE = number;
export type D3D12_CULL_MODE = number;
export type D3D12_COMPARISON_FUNC = number;
export type D3D12_DEPTH_WRITE_MASK = number;
export type D3D12_STENCIL_OP = number;
export type D3D12_BLEND = number;
export type D3D12_BLEND_OP = number;
export type D3D12_COLOR_WRITE_ENABLE = number;
export type D3D12_LOGIC_OP = number;
export type D3D12_CONSERVATIVE_RASTERIZATION_MODE = number;
export type D3D12_INDEX_BUFFER_STRIP_CUT_VALUE = number;
export type D3D12_PIPELINE_STATE_FLAGS = number;
export type D3D12_PIPELINE_STATE_SUBOBJECT_TYPE = number;
export type D3D12_FEATURE = number;
export type D3D12_SHADER_MIN_PRECISION_SUPPORT = number;
export type D3D12_TILED_RESOURCES_TIER = number;
export type D3D12_RESOURCE_BINDING_TIER = number;
export type D3D12_CONSERVATIVE_RASTERIZATION_TIER = number;
export type D3D12_FORMAT_SUPPORT1 = number;
export type D3D12_FORMAT_SUPPORT2 = number;
export type D3D12_MULTISAMPLE_QUALITY_LEVEL_FLAGS = number;
export type D3D12_CROSS_NODE_SHARING_TIER = number;
export type D3D12_RESOURCE_HEAP_TIER = number;
export type D3D12_PROGRAMMABLE_SAMPLE_POSITIONS_TIER = number;
export type D3D12_VIEW_INSTANCING_TIER = number;
export type D3D_ROOT_SIGNATURE_VERSION = number;
export type D3D_SHADER_MODEL = number;
export type D3D12_SHADER_CACHE_SUPPORT_FLAGS = number;
export type D3D12_COMMAND_LIST_SUPPORT_FLAGS = number;
export type D3D12_SHARED_RESOURCE_COMPATIBILITY_TIER = number;
export type D3D12_HEAP_SERIALIZATION_TIER = number;
export type D3D12_RENDER_PASS_TIER = number;
export type D3D12_RAYTRACING_TIER = number;
export type D3D12_VARIABLE_SHADING_RATE_TIER = number;
export type D3D12_MESH_SHADER_TIER = number;
export type D3D12_SAMPLER_FEEDBACK_TIER = number;
export type D3D12_WAVE_MMA_TIER = number;
export type D3D12_HEAP_TYPE = number;
export type D3D12_CPU_PAGE_PROPERTY = number;
export type D3D12_MEMORY_POOL = number;
export type D3D12_HEAP_FLAGS = number;
export type D3D12_RESOURCE_DIMENSION = number;
export type D3D12_TEXTURE_LAYOUT = number;
export type D3D12_RESOURCE_FLAGS = number;
export type D3D12_TILE_RANGE_FLAGS = number;
export type D3D12_TILE_MAPPING_FLAGS = number;
export type D3D12_TILE_COPY_FLAGS = number;
export type D3D12_RESOURCE_STATES = number;
export type D3D12_RESOURCE_BARRIER_TYPE = number;
export type D3D12_RESOURCE_BARRIER_FLAGS = number;
export type D3D12_TEXTURE_COPY_TYPE = number;
export type D3D12_RESOLVE_MODE = number;
export type D3D12_VIEW_INSTANCING_FLAGS = number;
export type D3D12_SHADER_COMPONENT_MAPPING = number;
export type D3D12_BUFFER_SRV_FLAGS = number;
export type D3D12_SRV_DIMENSION = number;
export type D3D12_FILTER = number;
export type D3D12_FILTER_TYPE = number;
export type D3D12_FILTER_REDUCTION_TYPE = number;
export type D3D12_TEXTURE_ADDRESS_MODE = number;
export type D3D12_BUFFER_UAV_FLAGS = number;
export type D3D12_UAV_DIMENSION = number;
export type D3D12_RTV_DIMENSION = number;
export type D3D12_DSV_FLAGS = number;
export type D3D12_DSV_DIMENSION = number;
export type D3D12_CLEAR_FLAGS = number;
export type D3D12_FENCE_FLAGS = number;
export type D3D12_DESCRIPTOR_HEAP_TYPE = number;
export type D3D12_DESCRIPTOR_HEAP_FLAGS = number;
export type D3D12_DESCRIPTOR_RANGE_TYPE = number;
export type D3D12_SHADER_VISIBILITY = number;
export type D3D12_ROOT_PARAMETER_TYPE = number;
export type D3D12_ROOT_SIGNATURE_FLAGS = number;
export type D3D12_STATIC_BORDER_COLOR = number;
export type D3D12_DESCRIPTOR_RANGE_FLAGS = number;
export type D3D12_ROOT_DESCRIPTOR_FLAGS = number;
export type D3D12_QUERY_HEAP_TYPE = number;
export type D3D12_QUERY_TYPE = number;
export type D3D12_PREDICATION_OP = number;
export type D3D12_INDIRECT_ARGUMENT_TYPE = number;
export type D3D12_WRITEBUFFERIMMEDIATE_MODE = number;
export type D3D12_MULTIPLE_FENCE_WAIT_FLAGS = number;
export type D3D12_RESIDENCY_PRIORITY = number;
export type D3D12_RESIDENCY_FLAGS = number;
export type D3D12_COMMAND_LIST_FLAGS = number;
export type D3D12_COMMAND_POOL_FLAGS = number;
export type D3D12_COMMAND_RECORDER_FLAGS = number;
export type D3D12_PROTECTED_SESSION_STATUS = number;
export type D3D12_PROTECTED_RESOURCE_SESSION_SUPPORT_FLAGS = number;
export type D3D12_PROTECTED_RESOURCE_SESSION_FLAGS = number;
export type D3D12_LIFETIME_STATE = number;
export type D3D12_META_COMMAND_PARAMETER_TYPE = number;
export type D3D12_META_COMMAND_PARAMETER_FLAGS = number;
export type D3D12_META_COMMAND_PARAMETER_STAGE = number;
export type D3D12_GRAPHICS_STATES = number;
export type D3D12_STATE_SUBOBJECT_TYPE = number;
export type D3D12_STATE_OBJECT_FLAGS = number;
export type D3D12_EXPORT_FLAGS = number;
export type D3D12_HIT_GROUP_TYPE = number;
export type D3D12_RAYTRACING_PIPELINE_FLAGS = number;
export type D3D12_STATE_OBJECT_TYPE = number;
export type D3D12_RAYTRACING_GEOMETRY_FLAGS = number;
export type D3D12_RAYTRACING_GEOMETRY_TYPE = number;
export type D3D12_RAYTRACING_INSTANCE_FLAGS = number;
export type D3D12_RAYTRACING_ACCELERATION_STRUCTURE_BUILD_FLAGS = number;
export type D3D12_RAYTRACING_ACCELERATION_STRUCTURE_COPY_MODE = number;
export type D3D12_RAYTRACING_ACCELERATION_STRUCTURE_TYPE = number;
export type D3D12_ELEMENTS_LAYOUT = number;
export type D3D12_RAYTRACING_ACCELERATION_STRUCTURE_POSTBUILD_INFO_TYPE = number;
export type D3D12_SERIALIZED_DATA_TYPE = number;
export type D3D12_DRIVER_MATCHING_IDENTIFIER_STATUS = number;
export type D3D12_RAY_FLAGS = number;
export type D3D12_HIT_KIND = number;
export type D3D12_AUTO_BREADCRUMB_OP = number;
export type D3D12_DRED_VERSION = number;
export type D3D12_DRED_FLAGS = number;
export type D3D12_DRED_ENABLEMENT = number;
export type D3D12_DRED_ALLOCATION_TYPE = number;
export type D3D12_DRED_PAGE_FAULT_FLAGS = number;
export type D3D12_DRED_DEVICE_STATE = number;
export type D3D12_BACKGROUND_PROCESSING_MODE = number;
export type D3D12_MEASUREMENTS_ACTION = number;
export type D3D12_RENDER_PASS_BEGINNING_ACCESS_TYPE = number;
export type D3D12_RENDER_PASS_ENDING_ACCESS_TYPE = number;
export type D3D12_RENDER_PASS_FLAGS = number;
export type D3D12_SHADER_CACHE_MODE = number;
export type D3D12_SHADER_CACHE_FLAGS = number;
export type D3D12_SHADER_CACHE_KIND_FLAGS = number;
export type D3D12_SHADER_CACHE_CONTROL_FLAGS = number;
export type D3D12_GPU_BASED_VALIDATION_FLAGS = number;
export type D3D12_RLDO_FLAGS = number;
export type D3D12_DEBUG_DEVICE_PARAMETER_TYPE = number;
export type D3D12_DEBUG_FEATURE = number;
export type D3D12_GPU_BASED_VALIDATION_SHADER_PATCH_MODE = number;
export type D3D12_GPU_BASED_VALIDATION_PIPELINE_STATE_CREATE_FLAGS = number;
export type D3D12_DEBUG_COMMAND_LIST_PARAMETER_TYPE = number;
export type D3D12_MESSAGE_CATEGORY = number;
export type D3D12_MESSAGE_SEVERITY = number;
export type D3D12_MESSAGE_ID = number;
export type D3D12_MESSAGE_CALLBACK_FLAGS = number;
export type D3D12_AXIS_SHADING_RATE = number;
export type D3D12_SHADING_RATE = number;
export type D3D12_SHADING_RATE_COMBINER = number;
export type D3D12_SHADER_VERSION_TYPE = number;
export type DXC_OUT_KIND = number;
export type D3DCOMPILER_STRIP_FLAGS = number;
export type D3D_BLOB_PART = number;
export type D3DLIGHTTYPE = number;
export type D3DSHADEMODE = number;
export type D3DFILLMODE = number;
export type D3DBLEND = number;
export type D3DBLENDOP = number;
export type D3DTEXTUREADDRESS = number;
export type D3DCULL = number;
export type D3DCMPFUNC = number;
export type D3DSTENCILOP = number;
export type D3DFOGMODE = number;
export type D3DZBUFFERTYPE = number;
export type D3DPRIMITIVETYPE = number;
export type D3DTRANSFORMSTATETYPE = number;
export type D3DRENDERSTATETYPE = number;
export type D3DMATERIALCOLORSOURCE = number;
export type D3DTEXTURESTAGESTATETYPE = number;
export type D3DSAMPLERSTATETYPE = number;
export type D3DTEXTUREOP = number;
export type D3DTEXTUREFILTERTYPE = number;
export type D3DDECLUSAGE = number;
export type D3DDECLMETHOD = number;
export type D3DDECLTYPE = number;
export type D3DSHADER_INSTRUCTION_OPCODE_TYPE = number;
export type D3DSHADER_COMPARISON = number;
export type D3DSAMPLER_TEXTURE_TYPE = number;
export type D3DSHADER_PARAM_REGISTER_TYPE = number;
export type D3DSHADER_MISCTYPE_OFFSETS = number;
export type D3DVS_RASTOUT_OFFSETS = number;
export type D3DVS_ADDRESSMODE_TYPE = number;
export type D3DSHADER_ADDRESSMODE_TYPE = number;
export type D3DSHADER_PARAM_SRCMOD_TYPE = number;
export type D3DSHADER_MIN_PRECISION = number;
export type D3DBASISTYPE = number;
export type D3DDEGREETYPE = number;
export type D3DPATCHEDGESTYLE = number;
export type D3DSTATEBLOCKTYPE = number;
export type D3DVERTEXBLENDFLAGS = number;
export type D3DTEXTURETRANSFORMFLAGS = number;
export type D3DDEVTYPE = number;
export type D3DMULTISAMPLE_TYPE = number;
export type D3DFORMAT = number;
export type D3DSWAPEFFECT = number;
export type D3DPOOL = number;
export type D3DBACKBUFFER_TYPE = number;
export type D3DRESOURCETYPE = number;
export type D3DCUBEMAP_FACES = number;
export type D3DDEBUGMONITORTOKENS = number;
export type D3DQUERYTYPE = number;
export type D3DCOMPOSERECTSOP = number;
export type D3DSCANLINEORDERING = number;
export type D3DDISPLAYROTATION = number;
export type D3DAUTHENTICATEDCHANNELTYPE = number;
export type D3DAUTHENTICATEDCHANNEL_PROCESSIDENTIFIERTYPE = number;
export type D3DBUSTYPE = number;

// Constants
export const D3D11_16BIT_INDEX_STRIP_CUT_VALUE = 65535;
export const D3D11_32BIT_INDEX_STRIP_CUT_VALUE = 4294967295;
export const D3D11_8BIT_INDEX_STRIP_CUT_VALUE = 255;
export const D3D11_ARRAY_AXIS_ADDRESS_RANGE_BIT_COUNT = 9;
export const D3D11_CLIP_OR_CULL_DISTANCE_COUNT = 8;
export const D3D11_CLIP_OR_CULL_DISTANCE_ELEMENT_COUNT = 2;
export const D3D11_COMMONSHADER_CONSTANT_BUFFER_API_SLOT_COUNT = 14;
export const D3D11_COMMONSHADER_CONSTANT_BUFFER_COMPONENTS = 4;
export const D3D11_COMMONSHADER_CONSTANT_BUFFER_COMPONENT_BIT_COUNT = 32;
export const D3D11_COMMONSHADER_CONSTANT_BUFFER_HW_SLOT_COUNT = 15;
export const D3D11_COMMONSHADER_CONSTANT_BUFFER_PARTIAL_UPDATE_EXTENTS_BYTE_ALIGNMENT = 16;
export const D3D11_COMMONSHADER_CONSTANT_BUFFER_REGISTER_COMPONENTS = 4;
export const D3D11_COMMONSHADER_CONSTANT_BUFFER_REGISTER_COUNT = 15;
export const D3D11_COMMONSHADER_CONSTANT_BUFFER_REGISTER_READS_PER_INST = 1;
export const D3D11_COMMONSHADER_CONSTANT_BUFFER_REGISTER_READ_PORTS = 1;
export const D3D11_COMMONSHADER_FLOWCONTROL_NESTING_LIMIT = 64;
export const D3D11_COMMONSHADER_IMMEDIATE_CONSTANT_BUFFER_REGISTER_COMPONENTS = 4;
export const D3D11_COMMONSHADER_IMMEDIATE_CONSTANT_BUFFER_REGISTER_COUNT = 1;
export const D3D11_COMMONSHADER_IMMEDIATE_CONSTANT_BUFFER_REGISTER_READS_PER_INST = 1;
export const D3D11_COMMONSHADER_IMMEDIATE_CONSTANT_BUFFER_REGISTER_READ_PORTS = 1;
export const D3D11_COMMONSHADER_IMMEDIATE_VALUE_COMPONENT_BIT_COUNT = 32;
export const D3D11_COMMONSHADER_INPUT_RESOURCE_REGISTER_COMPONENTS = 1;
export const D3D11_COMMONSHADER_INPUT_RESOURCE_REGISTER_COUNT = 128;
export const D3D11_COMMONSHADER_INPUT_RESOURCE_REGISTER_READS_PER_INST = 1;
export const D3D11_COMMONSHADER_INPUT_RESOURCE_REGISTER_READ_PORTS = 1;
export const D3D11_COMMONSHADER_INPUT_RESOURCE_SLOT_COUNT = 128;
export const D3D11_COMMONSHADER_SAMPLER_REGISTER_COMPONENTS = 1;
export const D3D11_COMMONSHADER_SAMPLER_REGISTER_COUNT = 16;
export const D3D11_COMMONSHADER_SAMPLER_REGISTER_READS_PER_INST = 1;
export const D3D11_COMMONSHADER_SAMPLER_REGISTER_READ_PORTS = 1;
export const D3D11_COMMONSHADER_SAMPLER_SLOT_COUNT = 16;
export const D3D11_COMMONSHADER_SUBROUTINE_NESTING_LIMIT = 32;
export const D3D11_COMMONSHADER_TEMP_REGISTER_COMPONENTS = 4;
export const D3D11_COMMONSHADER_TEMP_REGISTER_COMPONENT_BIT_COUNT = 32;
export const D3D11_COMMONSHADER_TEMP_REGISTER_COUNT = 4096;
export const D3D11_COMMONSHADER_TEMP_REGISTER_READS_PER_INST = 3;
export const D3D11_COMMONSHADER_TEMP_REGISTER_READ_PORTS = 3;
export const D3D11_COMMONSHADER_TEXCOORD_RANGE_REDUCTION_MAX = 10;
export const D3D11_COMMONSHADER_TEXCOORD_RANGE_REDUCTION_MIN = `-10`;
export const D3D11_COMMONSHADER_TEXEL_OFFSET_MAX_NEGATIVE = `-8`;
export const D3D11_COMMONSHADER_TEXEL_OFFSET_MAX_POSITIVE = 7;
export const D3D11_CS_4_X_BUCKET00_MAX_BYTES_TGSM_WRITABLE_PER_THREAD = 256;
export const D3D11_CS_4_X_BUCKET00_MAX_NUM_THREADS_PER_GROUP = 64;
export const D3D11_CS_4_X_BUCKET01_MAX_BYTES_TGSM_WRITABLE_PER_THREAD = 240;
export const D3D11_CS_4_X_BUCKET01_MAX_NUM_THREADS_PER_GROUP = 68;
export const D3D11_CS_4_X_BUCKET02_MAX_BYTES_TGSM_WRITABLE_PER_THREAD = 224;
export const D3D11_CS_4_X_BUCKET02_MAX_NUM_THREADS_PER_GROUP = 72;
export const D3D11_CS_4_X_BUCKET03_MAX_BYTES_TGSM_WRITABLE_PER_THREAD = 208;
export const D3D11_CS_4_X_BUCKET03_MAX_NUM_THREADS_PER_GROUP = 76;
export const D3D11_CS_4_X_BUCKET04_MAX_BYTES_TGSM_WRITABLE_PER_THREAD = 192;
export const D3D11_CS_4_X_BUCKET04_MAX_NUM_THREADS_PER_GROUP = 84;
export const D3D11_CS_4_X_BUCKET05_MAX_BYTES_TGSM_WRITABLE_PER_THREAD = 176;
export const D3D11_CS_4_X_BUCKET05_MAX_NUM_THREADS_PER_GROUP = 92;
export const D3D11_CS_4_X_BUCKET06_MAX_BYTES_TGSM_WRITABLE_PER_THREAD = 160;
export const D3D11_CS_4_X_BUCKET06_MAX_NUM_THREADS_PER_GROUP = 100;
export const D3D11_CS_4_X_BUCKET07_MAX_BYTES_TGSM_WRITABLE_PER_THREAD = 144;
export const D3D11_CS_4_X_BUCKET07_MAX_NUM_THREADS_PER_GROUP = 112;
export const D3D11_CS_4_X_BUCKET08_MAX_BYTES_TGSM_WRITABLE_PER_THREAD = 128;
export const D3D11_CS_4_X_BUCKET08_MAX_NUM_THREADS_PER_GROUP = 128;
export const D3D11_CS_4_X_BUCKET09_MAX_BYTES_TGSM_WRITABLE_PER_THREAD = 112;
export const D3D11_CS_4_X_BUCKET09_MAX_NUM_THREADS_PER_GROUP = 144;
export const D3D11_CS_4_X_BUCKET10_MAX_BYTES_TGSM_WRITABLE_PER_THREAD = 96;
export const D3D11_CS_4_X_BUCKET10_MAX_NUM_THREADS_PER_GROUP = 168;
export const D3D11_CS_4_X_BUCKET11_MAX_BYTES_TGSM_WRITABLE_PER_THREAD = 80;
export const D3D11_CS_4_X_BUCKET11_MAX_NUM_THREADS_PER_GROUP = 204;
export const D3D11_CS_4_X_BUCKET12_MAX_BYTES_TGSM_WRITABLE_PER_THREAD = 64;
export const D3D11_CS_4_X_BUCKET12_MAX_NUM_THREADS_PER_GROUP = 256;
export const D3D11_CS_4_X_BUCKET13_MAX_BYTES_TGSM_WRITABLE_PER_THREAD = 48;
export const D3D11_CS_4_X_BUCKET13_MAX_NUM_THREADS_PER_GROUP = 340;
export const D3D11_CS_4_X_BUCKET14_MAX_BYTES_TGSM_WRITABLE_PER_THREAD = 32;
export const D3D11_CS_4_X_BUCKET14_MAX_NUM_THREADS_PER_GROUP = 512;
export const D3D11_CS_4_X_BUCKET15_MAX_BYTES_TGSM_WRITABLE_PER_THREAD = 16;
export const D3D11_CS_4_X_BUCKET15_MAX_NUM_THREADS_PER_GROUP = 768;
export const D3D11_CS_4_X_DISPATCH_MAX_THREAD_GROUPS_IN_Z_DIMENSION = 1;
export const D3D11_CS_4_X_RAW_UAV_BYTE_ALIGNMENT = 256;
export const D3D11_CS_4_X_THREAD_GROUP_MAX_THREADS_PER_GROUP = 768;
export const D3D11_CS_4_X_THREAD_GROUP_MAX_X = 768;
export const D3D11_CS_4_X_THREAD_GROUP_MAX_Y = 768;
export const D3D11_CS_4_X_UAV_REGISTER_COUNT = 1;
export const D3D11_CS_DISPATCH_MAX_THREAD_GROUPS_PER_DIMENSION = 65535;
export const D3D11_CS_TGSM_REGISTER_COUNT = 8192;
export const D3D11_CS_TGSM_REGISTER_READS_PER_INST = 1;
export const D3D11_CS_TGSM_RESOURCE_REGISTER_COMPONENTS = 1;
export const D3D11_CS_TGSM_RESOURCE_REGISTER_READ_PORTS = 1;
export const D3D11_CS_THREADGROUPID_REGISTER_COMPONENTS = 3;
export const D3D11_CS_THREADGROUPID_REGISTER_COUNT = 1;
export const D3D11_CS_THREADIDINGROUPFLATTENED_REGISTER_COMPONENTS = 1;
export const D3D11_CS_THREADIDINGROUPFLATTENED_REGISTER_COUNT = 1;
export const D3D11_CS_THREADIDINGROUP_REGISTER_COMPONENTS = 3;
export const D3D11_CS_THREADIDINGROUP_REGISTER_COUNT = 1;
export const D3D11_CS_THREADID_REGISTER_COMPONENTS = 3;
export const D3D11_CS_THREADID_REGISTER_COUNT = 1;
export const D3D11_CS_THREAD_GROUP_MAX_THREADS_PER_GROUP = 1024;
export const D3D11_CS_THREAD_GROUP_MAX_X = 1024;
export const D3D11_CS_THREAD_GROUP_MAX_Y = 1024;
export const D3D11_CS_THREAD_GROUP_MAX_Z = 64;
export const D3D11_CS_THREAD_GROUP_MIN_X = 1;
export const D3D11_CS_THREAD_GROUP_MIN_Y = 1;
export const D3D11_CS_THREAD_GROUP_MIN_Z = 1;
export const D3D11_CS_THREAD_LOCAL_TEMP_REGISTER_POOL = 16384;
export const D3D11_DEFAULT_BLEND_FACTOR_ALPHA = 1;
export const D3D11_DEFAULT_BLEND_FACTOR_BLUE = 1;
export const D3D11_DEFAULT_BLEND_FACTOR_GREEN = 1;
export const D3D11_DEFAULT_BLEND_FACTOR_RED = 1;
export const D3D11_DEFAULT_BORDER_COLOR_COMPONENT = 0;
export const D3D11_DEFAULT_DEPTH_BIAS = 0;
export const D3D11_DEFAULT_DEPTH_BIAS_CLAMP = 0;
export const D3D11_DEFAULT_MAX_ANISOTROPY = 16;
export const D3D11_DEFAULT_MIP_LOD_BIAS = 0;
export const D3D11_DEFAULT_RENDER_TARGET_ARRAY_INDEX = 0;
export const D3D11_DEFAULT_SAMPLE_MASK = 4294967295;
export const D3D11_DEFAULT_SCISSOR_ENDX = 0;
export const D3D11_DEFAULT_SCISSOR_ENDY = 0;
export const D3D11_DEFAULT_SCISSOR_STARTX = 0;
export const D3D11_DEFAULT_SCISSOR_STARTY = 0;
export const D3D11_DEFAULT_SLOPE_SCALED_DEPTH_BIAS = 0;
export const D3D11_DEFAULT_STENCIL_READ_MASK = 255;
export const D3D11_DEFAULT_STENCIL_REFERENCE = 0;
export const D3D11_DEFAULT_STENCIL_WRITE_MASK = 255;
export const D3D11_DEFAULT_VIEWPORT_AND_SCISSORRECT_INDEX = 0;
export const D3D11_DEFAULT_VIEWPORT_HEIGHT = 0;
export const D3D11_DEFAULT_VIEWPORT_MAX_DEPTH = 0;
export const D3D11_DEFAULT_VIEWPORT_MIN_DEPTH = 0;
export const D3D11_DEFAULT_VIEWPORT_TOPLEFTX = 0;
export const D3D11_DEFAULT_VIEWPORT_TOPLEFTY = 0;
export const D3D11_DEFAULT_VIEWPORT_WIDTH = 0;
export const D3D11_DS_INPUT_CONTROL_POINTS_MAX_TOTAL_SCALARS = 3968;
export const D3D11_DS_INPUT_CONTROL_POINT_REGISTER_COMPONENTS = 4;
export const D3D11_DS_INPUT_CONTROL_POINT_REGISTER_COMPONENT_BIT_COUNT = 32;
export const D3D11_DS_INPUT_CONTROL_POINT_REGISTER_COUNT = 32;
export const D3D11_DS_INPUT_CONTROL_POINT_REGISTER_READS_PER_INST = 2;
export const D3D11_DS_INPUT_CONTROL_POINT_REGISTER_READ_PORTS = 1;
export const D3D11_DS_INPUT_DOMAIN_POINT_REGISTER_COMPONENTS = 3;
export const D3D11_DS_INPUT_DOMAIN_POINT_REGISTER_COMPONENT_BIT_COUNT = 32;
export const D3D11_DS_INPUT_DOMAIN_POINT_REGISTER_COUNT = 1;
export const D3D11_DS_INPUT_DOMAIN_POINT_REGISTER_READS_PER_INST = 2;
export const D3D11_DS_INPUT_DOMAIN_POINT_REGISTER_READ_PORTS = 1;
export const D3D11_DS_INPUT_PATCH_CONSTANT_REGISTER_COMPONENTS = 4;
export const D3D11_DS_INPUT_PATCH_CONSTANT_REGISTER_COMPONENT_BIT_COUNT = 32;
export const D3D11_DS_INPUT_PATCH_CONSTANT_REGISTER_COUNT = 32;
export const D3D11_DS_INPUT_PATCH_CONSTANT_REGISTER_READS_PER_INST = 2;
export const D3D11_DS_INPUT_PATCH_CONSTANT_REGISTER_READ_PORTS = 1;
export const D3D11_DS_INPUT_PRIMITIVE_ID_REGISTER_COMPONENTS = 1;
export const D3D11_DS_INPUT_PRIMITIVE_ID_REGISTER_COMPONENT_BIT_COUNT = 32;
export const D3D11_DS_INPUT_PRIMITIVE_ID_REGISTER_COUNT = 1;
export const D3D11_DS_INPUT_PRIMITIVE_ID_REGISTER_READS_PER_INST = 2;
export const D3D11_DS_INPUT_PRIMITIVE_ID_REGISTER_READ_PORTS = 1;
export const D3D11_DS_OUTPUT_REGISTER_COMPONENTS = 4;
export const D3D11_DS_OUTPUT_REGISTER_COMPONENT_BIT_COUNT = 32;
export const D3D11_DS_OUTPUT_REGISTER_COUNT = 32;
export const D3D11_FLOAT16_FUSED_TOLERANCE_IN_ULP = `0.6`;
export const D3D11_FLOAT32_MAX = `3.4028234663852886e+38`;
export const D3D11_FLOAT32_TO_INTEGER_TOLERANCE_IN_ULP = `0.6000000238418579`;
export const D3D11_FLOAT_TO_SRGB_EXPONENT_DENOMINATOR = `2.4000000953674316`;
export const D3D11_FLOAT_TO_SRGB_EXPONENT_NUMERATOR = 1;
export const D3D11_FLOAT_TO_SRGB_OFFSET = `0.054999999701976776`;
export const D3D11_FLOAT_TO_SRGB_SCALE_1 = `12.920000076293945`;
export const D3D11_FLOAT_TO_SRGB_SCALE_2 = `1.0549999475479126`;
export const D3D11_FLOAT_TO_SRGB_THRESHOLD = `0.0031308000907301903`;
export const D3D11_FTOI_INSTRUCTION_MAX_INPUT = 2147483648;
export const D3D11_FTOI_INSTRUCTION_MIN_INPUT = `-2147483648`;
export const D3D11_FTOU_INSTRUCTION_MAX_INPUT = 4294967296;
export const D3D11_FTOU_INSTRUCTION_MIN_INPUT = 0;
export const D3D11_GS_INPUT_INSTANCE_ID_READS_PER_INST = 2;
export const D3D11_GS_INPUT_INSTANCE_ID_READ_PORTS = 1;
export const D3D11_GS_INPUT_INSTANCE_ID_REGISTER_COMPONENTS = 1;
export const D3D11_GS_INPUT_INSTANCE_ID_REGISTER_COMPONENT_BIT_COUNT = 32;
export const D3D11_GS_INPUT_INSTANCE_ID_REGISTER_COUNT = 1;
export const D3D11_GS_INPUT_PRIM_CONST_REGISTER_COMPONENTS = 1;
export const D3D11_GS_INPUT_PRIM_CONST_REGISTER_COMPONENT_BIT_COUNT = 32;
export const D3D11_GS_INPUT_PRIM_CONST_REGISTER_COUNT = 1;
export const D3D11_GS_INPUT_PRIM_CONST_REGISTER_READS_PER_INST = 2;
export const D3D11_GS_INPUT_PRIM_CONST_REGISTER_READ_PORTS = 1;
export const D3D11_GS_INPUT_REGISTER_COMPONENTS = 4;
export const D3D11_GS_INPUT_REGISTER_COMPONENT_BIT_COUNT = 32;
export const D3D11_GS_INPUT_REGISTER_COUNT = 32;
export const D3D11_GS_INPUT_REGISTER_READS_PER_INST = 2;
export const D3D11_GS_INPUT_REGISTER_READ_PORTS = 1;
export const D3D11_GS_INPUT_REGISTER_VERTICES = 32;
export const D3D11_GS_MAX_INSTANCE_COUNT = 32;
export const D3D11_GS_MAX_OUTPUT_VERTEX_COUNT_ACROSS_INSTANCES = 1024;
export const D3D11_GS_OUTPUT_ELEMENTS = 32;
export const D3D11_GS_OUTPUT_REGISTER_COMPONENTS = 4;
export const D3D11_GS_OUTPUT_REGISTER_COMPONENT_BIT_COUNT = 32;
export const D3D11_GS_OUTPUT_REGISTER_COUNT = 32;
export const D3D11_HS_CONTROL_POINT_PHASE_INPUT_REGISTER_COUNT = 32;
export const D3D11_HS_CONTROL_POINT_PHASE_OUTPUT_REGISTER_COUNT = 32;
export const D3D11_HS_CONTROL_POINT_REGISTER_COMPONENTS = 4;
export const D3D11_HS_CONTROL_POINT_REGISTER_COMPONENT_BIT_COUNT = 32;
export const D3D11_HS_CONTROL_POINT_REGISTER_READS_PER_INST = 2;
export const D3D11_HS_CONTROL_POINT_REGISTER_READ_PORTS = 1;
export const D3D11_HS_FORK_PHASE_INSTANCE_COUNT_UPPER_BOUND = 4294967295;
export const D3D11_HS_INPUT_FORK_INSTANCE_ID_REGISTER_COMPONENTS = 1;
export const D3D11_HS_INPUT_FORK_INSTANCE_ID_REGISTER_COMPONENT_BIT_COUNT = 32;
export const D3D11_HS_INPUT_FORK_INSTANCE_ID_REGISTER_COUNT = 1;
export const D3D11_HS_INPUT_FORK_INSTANCE_ID_REGISTER_READS_PER_INST = 2;
export const D3D11_HS_INPUT_FORK_INSTANCE_ID_REGISTER_READ_PORTS = 1;
export const D3D11_HS_INPUT_JOIN_INSTANCE_ID_REGISTER_COMPONENTS = 1;
export const D3D11_HS_INPUT_JOIN_INSTANCE_ID_REGISTER_COMPONENT_BIT_COUNT = 32;
export const D3D11_HS_INPUT_JOIN_INSTANCE_ID_REGISTER_COUNT = 1;
export const D3D11_HS_INPUT_JOIN_INSTANCE_ID_REGISTER_READS_PER_INST = 2;
export const D3D11_HS_INPUT_JOIN_INSTANCE_ID_REGISTER_READ_PORTS = 1;
export const D3D11_HS_INPUT_PRIMITIVE_ID_REGISTER_COMPONENTS = 1;
export const D3D11_HS_INPUT_PRIMITIVE_ID_REGISTER_COMPONENT_BIT_COUNT = 32;
export const D3D11_HS_INPUT_PRIMITIVE_ID_REGISTER_COUNT = 1;
export const D3D11_HS_INPUT_PRIMITIVE_ID_REGISTER_READS_PER_INST = 2;
export const D3D11_HS_INPUT_PRIMITIVE_ID_REGISTER_READ_PORTS = 1;
export const D3D11_HS_JOIN_PHASE_INSTANCE_COUNT_UPPER_BOUND = 4294967295;
export const D3D11_HS_MAXTESSFACTOR_LOWER_BOUND = 1;
export const D3D11_HS_MAXTESSFACTOR_UPPER_BOUND = 64;
export const D3D11_HS_OUTPUT_CONTROL_POINTS_MAX_TOTAL_SCALARS = 3968;
export const D3D11_HS_OUTPUT_CONTROL_POINT_ID_REGISTER_COMPONENTS = 1;
export const D3D11_HS_OUTPUT_CONTROL_POINT_ID_REGISTER_COMPONENT_BIT_COUNT = 32;
export const D3D11_HS_OUTPUT_CONTROL_POINT_ID_REGISTER_COUNT = 1;
export const D3D11_HS_OUTPUT_CONTROL_POINT_ID_REGISTER_READS_PER_INST = 2;
export const D3D11_HS_OUTPUT_CONTROL_POINT_ID_REGISTER_READ_PORTS = 1;
export const D3D11_HS_OUTPUT_PATCH_CONSTANT_REGISTER_COMPONENTS = 4;
export const D3D11_HS_OUTPUT_PATCH_CONSTANT_REGISTER_COMPONENT_BIT_COUNT = 32;
export const D3D11_HS_OUTPUT_PATCH_CONSTANT_REGISTER_COUNT = 32;
export const D3D11_HS_OUTPUT_PATCH_CONSTANT_REGISTER_READS_PER_INST = 2;
export const D3D11_HS_OUTPUT_PATCH_CONSTANT_REGISTER_READ_PORTS = 1;
export const D3D11_HS_OUTPUT_PATCH_CONSTANT_REGISTER_SCALAR_COMPONENTS = 128;
export const D3D11_IA_DEFAULT_INDEX_BUFFER_OFFSET_IN_BYTES = 0;
export const D3D11_IA_DEFAULT_PRIMITIVE_TOPOLOGY = 0;
export const D3D11_IA_DEFAULT_VERTEX_BUFFER_OFFSET_IN_BYTES = 0;
export const D3D11_IA_INDEX_INPUT_RESOURCE_SLOT_COUNT = 1;
export const D3D11_IA_INSTANCE_ID_BIT_COUNT = 32;
export const D3D11_IA_INTEGER_ARITHMETIC_BIT_COUNT = 32;
export const D3D11_IA_PATCH_MAX_CONTROL_POINT_COUNT = 32;
export const D3D11_IA_PRIMITIVE_ID_BIT_COUNT = 32;
export const D3D11_IA_VERTEX_ID_BIT_COUNT = 32;
export const D3D11_IA_VERTEX_INPUT_RESOURCE_SLOT_COUNT = 32;
export const D3D11_IA_VERTEX_INPUT_STRUCTURE_ELEMENTS_COMPONENTS = 128;
export const D3D11_IA_VERTEX_INPUT_STRUCTURE_ELEMENT_COUNT = 32;
export const D3D11_INTEGER_DIVIDE_BY_ZERO_QUOTIENT = 4294967295;
export const D3D11_INTEGER_DIVIDE_BY_ZERO_REMAINDER = 4294967295;
export const D3D11_KEEP_RENDER_TARGETS_AND_DEPTH_STENCIL = 4294967295;
export const D3D11_KEEP_UNORDERED_ACCESS_VIEWS = 4294967295;
export const D3D11_LINEAR_GAMMA = 1;
export const D3D11_MAJOR_VERSION = 11;
export const D3D11_MAX_BORDER_COLOR_COMPONENT = 1;
export const D3D11_MAX_DEPTH = 1;
export const D3D11_MAX_MAXANISOTROPY = 16;
export const D3D11_MAX_MULTISAMPLE_SAMPLE_COUNT = 32;
export const D3D11_MAX_POSITION_VALUE = `3.4028235832468283e+34`;
export const D3D11_MAX_TEXTURE_DIMENSION_2_TO_EXP = 17;
export const D3D11_MINOR_VERSION = 0;
export const D3D11_MIN_BORDER_COLOR_COMPONENT = 0;
export const D3D11_MIN_DEPTH = 0;
export const D3D11_MIN_MAXANISOTROPY = 0;
export const D3D11_MIP_LOD_BIAS_MAX = `15.989999771118164`;
export const D3D11_MIP_LOD_BIAS_MIN = `-16`;
export const D3D11_MIP_LOD_FRACTIONAL_BIT_COUNT = 8;
export const D3D11_MIP_LOD_RANGE_BIT_COUNT = 8;
export const D3D11_MULTISAMPLE_ANTIALIAS_LINE_WIDTH = `1.399999976158142`;
export const D3D11_NONSAMPLE_FETCH_OUT_OF_RANGE_ACCESS_RESULT = 0;
export const D3D11_PIXEL_ADDRESS_RANGE_BIT_COUNT = 15;
export const D3D11_PRE_SCISSOR_PIXEL_ADDRESS_RANGE_BIT_COUNT = 16;
export const D3D11_PS_CS_UAV_REGISTER_COMPONENTS = 1;
export const D3D11_PS_CS_UAV_REGISTER_COUNT = 8;
export const D3D11_PS_CS_UAV_REGISTER_READS_PER_INST = 1;
export const D3D11_PS_CS_UAV_REGISTER_READ_PORTS = 1;
export const D3D11_PS_FRONTFACING_DEFAULT_VALUE = 4294967295;
export const D3D11_PS_FRONTFACING_FALSE_VALUE = 0;
export const D3D11_PS_FRONTFACING_TRUE_VALUE = 4294967295;
export const D3D11_PS_INPUT_REGISTER_COMPONENTS = 4;
export const D3D11_PS_INPUT_REGISTER_COMPONENT_BIT_COUNT = 32;
export const D3D11_PS_INPUT_REGISTER_COUNT = 32;
export const D3D11_PS_INPUT_REGISTER_READS_PER_INST = 2;
export const D3D11_PS_INPUT_REGISTER_READ_PORTS = 1;
export const D3D11_PS_LEGACY_PIXEL_CENTER_FRACTIONAL_COMPONENT = 0;
export const D3D11_PS_OUTPUT_DEPTH_REGISTER_COMPONENTS = 1;
export const D3D11_PS_OUTPUT_DEPTH_REGISTER_COMPONENT_BIT_COUNT = 32;
export const D3D11_PS_OUTPUT_DEPTH_REGISTER_COUNT = 1;
export const D3D11_PS_OUTPUT_MASK_REGISTER_COMPONENTS = 1;
export const D3D11_PS_OUTPUT_MASK_REGISTER_COMPONENT_BIT_COUNT = 32;
export const D3D11_PS_OUTPUT_MASK_REGISTER_COUNT = 1;
export const D3D11_PS_OUTPUT_REGISTER_COMPONENTS = 4;
export const D3D11_PS_OUTPUT_REGISTER_COMPONENT_BIT_COUNT = 32;
export const D3D11_PS_OUTPUT_REGISTER_COUNT = 8;
export const D3D11_PS_PIXEL_CENTER_FRACTIONAL_COMPONENT = `0.5`;
export const D3D11_RAW_UAV_SRV_BYTE_ALIGNMENT = 16;
export const D3D11_REQ_BLEND_OBJECT_COUNT_PER_DEVICE = 4096;
export const D3D11_REQ_BUFFER_RESOURCE_TEXEL_COUNT_2_TO_EXP = 27;
export const D3D11_REQ_CONSTANT_BUFFER_ELEMENT_COUNT = 4096;
export const D3D11_REQ_DEPTH_STENCIL_OBJECT_COUNT_PER_DEVICE = 4096;
export const D3D11_REQ_DRAWINDEXED_INDEX_COUNT_2_TO_EXP = 32;
export const D3D11_REQ_DRAW_VERTEX_COUNT_2_TO_EXP = 32;
export const D3D11_REQ_FILTERING_HW_ADDRESSABLE_RESOURCE_DIMENSION = 16384;
export const D3D11_REQ_GS_INVOCATION_32BIT_OUTPUT_COMPONENT_LIMIT = 1024;
export const D3D11_REQ_IMMEDIATE_CONSTANT_BUFFER_ELEMENT_COUNT = 4096;
export const D3D11_REQ_MAXANISOTROPY = 16;
export const D3D11_REQ_MIP_LEVELS = 15;
export const D3D11_REQ_MULTI_ELEMENT_STRUCTURE_SIZE_IN_BYTES = 2048;
export const D3D11_REQ_RASTERIZER_OBJECT_COUNT_PER_DEVICE = 4096;
export const D3D11_REQ_RENDER_TO_BUFFER_WINDOW_WIDTH = 16384;
export const D3D11_REQ_RESOURCE_SIZE_IN_MEGABYTES_EXPRESSION_A_TERM = 128;
export const D3D11_REQ_RESOURCE_SIZE_IN_MEGABYTES_EXPRESSION_B_TERM = `0.25`;
export const D3D11_REQ_RESOURCE_SIZE_IN_MEGABYTES_EXPRESSION_C_TERM = 2048;
export const D3D11_REQ_RESOURCE_VIEW_COUNT_PER_DEVICE_2_TO_EXP = 20;
export const D3D11_REQ_SAMPLER_OBJECT_COUNT_PER_DEVICE = 4096;
export const D3D11_REQ_TEXTURE1D_ARRAY_AXIS_DIMENSION = 2048;
export const D3D11_REQ_TEXTURE1D_U_DIMENSION = 16384;
export const D3D11_REQ_TEXTURE2D_ARRAY_AXIS_DIMENSION = 2048;
export const D3D11_REQ_TEXTURE2D_U_OR_V_DIMENSION = 16384;
export const D3D11_REQ_TEXTURE3D_U_V_OR_W_DIMENSION = 2048;
export const D3D11_REQ_TEXTURECUBE_DIMENSION = 16384;
export const D3D11_RESINFO_INSTRUCTION_MISSING_COMPONENT_RETVAL = 0;
export const D3D11_SHADER_MAJOR_VERSION = 5;
export const D3D11_SHADER_MAX_INSTANCES = 65535;
export const D3D11_SHADER_MAX_INTERFACES = 253;
export const D3D11_SHADER_MAX_INTERFACE_CALL_SITES = 4096;
export const D3D11_SHADER_MAX_TYPES = 65535;
export const D3D11_SHADER_MINOR_VERSION = 0;
export const D3D11_SHIFT_INSTRUCTION_PAD_VALUE = 0;
export const D3D11_SHIFT_INSTRUCTION_SHIFT_VALUE_BIT_COUNT = 5;
export const D3D11_SIMULTANEOUS_RENDER_TARGET_COUNT = 8;
export const D3D11_SO_BUFFER_MAX_STRIDE_IN_BYTES = 2048;
export const D3D11_SO_BUFFER_MAX_WRITE_WINDOW_IN_BYTES = 512;
export const D3D11_SO_BUFFER_SLOT_COUNT = 4;
export const D3D11_SO_DDI_REGISTER_INDEX_DENOTING_GAP = 4294967295;
export const D3D11_SO_NO_RASTERIZED_STREAM = 4294967295;
export const D3D11_SO_OUTPUT_COMPONENT_COUNT = 128;
export const D3D11_SO_STREAM_COUNT = 4;
export const D3D11_SPEC_DATE_DAY = 16;
export const D3D11_SPEC_DATE_MONTH = 5;
export const D3D11_SPEC_DATE_YEAR = 2011;
export const D3D11_SPEC_VERSION = `1.07`;
export const D3D11_SRGB_GAMMA = `2.200000047683716`;
export const D3D11_SRGB_TO_FLOAT_DENOMINATOR_1 = `12.920000076293945`;
export const D3D11_SRGB_TO_FLOAT_DENOMINATOR_2 = `1.0549999475479126`;
export const D3D11_SRGB_TO_FLOAT_EXPONENT = `2.4000000953674316`;
export const D3D11_SRGB_TO_FLOAT_OFFSET = `0.054999999701976776`;
export const D3D11_SRGB_TO_FLOAT_THRESHOLD = `0.040449999272823334`;
export const D3D11_SRGB_TO_FLOAT_TOLERANCE_IN_ULP = `0.5`;
export const D3D11_STANDARD_COMPONENT_BIT_COUNT = 32;
export const D3D11_STANDARD_COMPONENT_BIT_COUNT_DOUBLED = 64;
export const D3D11_STANDARD_MAXIMUM_ELEMENT_ALIGNMENT_BYTE_MULTIPLE = 4;
export const D3D11_STANDARD_PIXEL_COMPONENT_COUNT = 128;
export const D3D11_STANDARD_PIXEL_ELEMENT_COUNT = 32;
export const D3D11_STANDARD_VECTOR_SIZE = 4;
export const D3D11_STANDARD_VERTEX_ELEMENT_COUNT = 32;
export const D3D11_STANDARD_VERTEX_TOTAL_COMPONENT_COUNT = 64;
export const D3D11_SUBPIXEL_FRACTIONAL_BIT_COUNT = 8;
export const D3D11_SUBTEXEL_FRACTIONAL_BIT_COUNT = 8;
export const D3D11_TESSELLATOR_MAX_EVEN_TESSELLATION_FACTOR = 64;
export const D3D11_TESSELLATOR_MAX_ISOLINE_DENSITY_TESSELLATION_FACTOR = 64;
export const D3D11_TESSELLATOR_MAX_ODD_TESSELLATION_FACTOR = 63;
export const D3D11_TESSELLATOR_MAX_TESSELLATION_FACTOR = 64;
export const D3D11_TESSELLATOR_MIN_EVEN_TESSELLATION_FACTOR = 2;
export const D3D11_TESSELLATOR_MIN_ISOLINE_DENSITY_TESSELLATION_FACTOR = 1;
export const D3D11_TESSELLATOR_MIN_ODD_TESSELLATION_FACTOR = 1;
export const D3D11_TEXEL_ADDRESS_RANGE_BIT_COUNT = 16;
export const D3D11_UNBOUND_MEMORY_ACCESS_RESULT = 0;
export const D3D11_VIEWPORT_AND_SCISSORRECT_MAX_INDEX = 15;
export const D3D11_VIEWPORT_AND_SCISSORRECT_OBJECT_COUNT_PER_PIPELINE = 16;
export const D3D11_VIEWPORT_BOUNDS_MAX = 32767;
export const D3D11_VIEWPORT_BOUNDS_MIN = `-32768`;
export const D3D11_VS_INPUT_REGISTER_COMPONENTS = 4;
export const D3D11_VS_INPUT_REGISTER_COMPONENT_BIT_COUNT = 32;
export const D3D11_VS_INPUT_REGISTER_COUNT = 32;
export const D3D11_VS_INPUT_REGISTER_READS_PER_INST = 2;
export const D3D11_VS_INPUT_REGISTER_READ_PORTS = 1;
export const D3D11_VS_OUTPUT_REGISTER_COMPONENTS = 4;
export const D3D11_VS_OUTPUT_REGISTER_COMPONENT_BIT_COUNT = 32;
export const D3D11_VS_OUTPUT_REGISTER_COUNT = 32;
export const D3D11_WHQL_CONTEXT_COUNT_FOR_RESOURCE_LIMIT = 10;
export const D3D11_WHQL_DRAWINDEXED_INDEX_COUNT_2_TO_EXP = 25;
export const D3D11_WHQL_DRAW_VERTEX_COUNT_2_TO_EXP = 25;
export const D3D11_1_UAV_SLOT_COUNT = 64;
export const D3D11_2_TILED_RESOURCE_TILE_SIZE_IN_BYTES = 65536;
export const D3D11_4_VIDEO_DECODER_MAX_HISTOGRAM_COMPONENTS = 4;
export const D3D11_4_VIDEO_DECODER_HISTOGRAM_OFFSET_ALIGNMENT = 256;
export const _FACD3D11 = 2172;
export const D3D11_APPEND_ALIGNED_ELEMENT = 4294967295;
export const D3D11_FILTER_REDUCTION_TYPE_MASK = 3;
export const D3D11_FILTER_REDUCTION_TYPE_SHIFT = 7;
export const D3D11_FILTER_TYPE_MASK = 3;
export const D3D11_MIN_FILTER_SHIFT = 4;
export const D3D11_MAG_FILTER_SHIFT = 2;
export const D3D11_MIP_FILTER_SHIFT = 0;
export const D3D11_COMPARISON_FILTERING_BIT = 128;
export const D3D11_ANISOTROPIC_FILTERING_BIT = 64;
export const D3D11_SDK_VERSION = 7;
export const D3D11_PACKED_TILE = 4294967295;
export const D3D11_SDK_LAYERS_VERSION = 1;
export const D3D11_DEBUG_FEATURE_FLUSH_PER_RENDER_OP = 1;
export const D3D11_DEBUG_FEATURE_FINISH_PER_RENDER_OP = 2;
export const D3D11_DEBUG_FEATURE_PRESENT_PER_RENDER_OP = 4;
export const D3D11_DEBUG_FEATURE_ALWAYS_DISCARD_OFFERED_RESOURCE = 8;
export const D3D11_DEBUG_FEATURE_NEVER_DISCARD_OFFERED_RESOURCE = 16;
export const D3D11_DEBUG_FEATURE_AVOID_BEHAVIOR_CHANGING_DEBUG_AIDS = 64;
export const D3D11_DEBUG_FEATURE_DISABLE_TILED_RESOURCE_MAPPING_TRACKING_AND_VALIDATION = 128;
export const D3D11_REGKEY_PATH = `Software\\Microsoft\\Direct3D`;
export const D3D11_MUTE_DEBUG_OUTPUT = `MuteDebugOutput`;
export const D3D11_ENABLE_BREAK_ON_MESSAGE = `EnableBreakOnMessage`;
export const D3D11_INFOQUEUE_STORAGE_FILTER_OVERRIDE = `InfoQueueStorageFilterOverride`;
export const D3D11_MUTE_CATEGORY = `Mute_CATEGORY_%s`;
export const D3D11_MUTE_SEVERITY = `Mute_SEVERITY_%s`;
export const D3D11_MUTE_ID_STRING = `Mute_ID_%s`;
export const D3D11_MUTE_ID_DECIMAL = `Mute_ID_%d`;
export const D3D11_UNMUTE_SEVERITY_INFO = `Unmute_SEVERITY_INFO`;
export const D3D11_BREAKON_CATEGORY = `BreakOn_CATEGORY_%s`;
export const D3D11_BREAKON_SEVERITY = `BreakOn_SEVERITY_%s`;
export const D3D11_BREAKON_ID_STRING = `BreakOn_ID_%s`;
export const D3D11_BREAKON_ID_DECIMAL = `BreakOn_ID_%d`;
export const D3D11_APPSIZE_STRING = `Size`;
export const D3D11_APPNAME_STRING = `Name`;
export const D3D11_FORCE_DEBUGGABLE = `ForceDebuggable`;
export const D3D11_FORCE_SHADER_SKIP_OPTIMIZATION = `ForceShaderSkipOptimization`;
export const D3D11_INFO_QUEUE_DEFAULT_MESSAGE_COUNT_LIMIT = 1024;
export const D3D_RETURN_PARAMETER_INDEX = `-1`;
export const D3D_SHADER_REQUIRES_DOUBLES = 1;
export const D3D_SHADER_REQUIRES_EARLY_DEPTH_STENCIL = 2;
export const D3D_SHADER_REQUIRES_UAVS_AT_EVERY_STAGE = 4;
export const D3D_SHADER_REQUIRES_64_UAVS = 8;
export const D3D_SHADER_REQUIRES_MINIMUM_PRECISION = 16;
export const D3D_SHADER_REQUIRES_11_1_DOUBLE_EXTENSIONS = 32;
export const D3D_SHADER_REQUIRES_11_1_SHADER_EXTENSIONS = 64;
export const D3D_SHADER_REQUIRES_LEVEL_9_COMPARISON_FILTERING = 128;
export const D3D_SHADER_REQUIRES_TILED_RESOURCES = 256;
export const D3D11_TRACE_COMPONENT_X = 1;
export const D3D11_TRACE_COMPONENT_Y = 2;
export const D3D11_TRACE_COMPONENT_Z = 4;
export const D3D11_TRACE_COMPONENT_W = 8;
export const D3D11_SHADER_TRACE_FLAG_RECORD_REGISTER_WRITES = 1;
export const D3D11_SHADER_TRACE_FLAG_RECORD_REGISTER_READS = 2;
export const D3D11_TRACE_REGISTER_FLAGS_RELATIVE_INDEXING = 1;
export const D3D11_TRACE_MISC_GS_EMIT = 1;
export const D3D11_TRACE_MISC_GS_CUT = 2;
export const D3D11_TRACE_MISC_PS_DISCARD = 4;
export const D3D11_TRACE_MISC_GS_EMIT_STREAM = 8;
export const D3D11_TRACE_MISC_GS_CUT_STREAM = 16;
export const D3D11_TRACE_MISC_HALT = 32;
export const D3D11_TRACE_MISC_MESSAGE = 64;
export const D3DCSX_DLL_W = `d3dcsx_47.dll`;
export const D3DCSX_DLL_A = `d3dcsx_47.dll`;
export const D3DCSX_DLL = `d3dcsx_47.dll`;
export const D3DX11_FFT_MAX_PRECOMPUTE_BUFFERS = 4;
export const D3DX11_FFT_MAX_TEMP_BUFFERS = 4;
export const D3DX11_FFT_MAX_DIMENSIONS = 32;
export const D3D12_SHADER_COMPONENT_MAPPING_ALWAYS_SET_BIT_AVOIDING_ZEROMEM_MISTAKES = 4096;
export const D3D12_DEFAULT_SHADER_4_COMPONENT_MAPPING = 5768;
export const D3D12_16BIT_INDEX_STRIP_CUT_VALUE = 65535;
export const D3D12_32BIT_INDEX_STRIP_CUT_VALUE = 4294967295;
export const D3D12_8BIT_INDEX_STRIP_CUT_VALUE = 255;
export const D3D12_APPEND_ALIGNED_ELEMENT = 4294967295;
export const D3D12_ARRAY_AXIS_ADDRESS_RANGE_BIT_COUNT = 9;
export const D3D12_CLIP_OR_CULL_DISTANCE_COUNT = 8;
export const D3D12_CLIP_OR_CULL_DISTANCE_ELEMENT_COUNT = 2;
export const D3D12_COMMONSHADER_CONSTANT_BUFFER_API_SLOT_COUNT = 14;
export const D3D12_COMMONSHADER_CONSTANT_BUFFER_COMPONENTS = 4;
export const D3D12_COMMONSHADER_CONSTANT_BUFFER_COMPONENT_BIT_COUNT = 32;
export const D3D12_COMMONSHADER_CONSTANT_BUFFER_HW_SLOT_COUNT = 15;
export const D3D12_COMMONSHADER_CONSTANT_BUFFER_PARTIAL_UPDATE_EXTENTS_BYTE_ALIGNMENT = 16;
export const D3D12_COMMONSHADER_CONSTANT_BUFFER_REGISTER_COMPONENTS = 4;
export const D3D12_COMMONSHADER_CONSTANT_BUFFER_REGISTER_COUNT = 15;
export const D3D12_COMMONSHADER_CONSTANT_BUFFER_REGISTER_READS_PER_INST = 1;
export const D3D12_COMMONSHADER_CONSTANT_BUFFER_REGISTER_READ_PORTS = 1;
export const D3D12_COMMONSHADER_FLOWCONTROL_NESTING_LIMIT = 64;
export const D3D12_COMMONSHADER_IMMEDIATE_CONSTANT_BUFFER_REGISTER_COMPONENTS = 4;
export const D3D12_COMMONSHADER_IMMEDIATE_CONSTANT_BUFFER_REGISTER_COUNT = 1;
export const D3D12_COMMONSHADER_IMMEDIATE_CONSTANT_BUFFER_REGISTER_READS_PER_INST = 1;
export const D3D12_COMMONSHADER_IMMEDIATE_CONSTANT_BUFFER_REGISTER_READ_PORTS = 1;
export const D3D12_COMMONSHADER_IMMEDIATE_VALUE_COMPONENT_BIT_COUNT = 32;
export const D3D12_COMMONSHADER_INPUT_RESOURCE_REGISTER_COMPONENTS = 1;
export const D3D12_COMMONSHADER_INPUT_RESOURCE_REGISTER_COUNT = 128;
export const D3D12_COMMONSHADER_INPUT_RESOURCE_REGISTER_READS_PER_INST = 1;
export const D3D12_COMMONSHADER_INPUT_RESOURCE_REGISTER_READ_PORTS = 1;
export const D3D12_COMMONSHADER_INPUT_RESOURCE_SLOT_COUNT = 128;
export const D3D12_COMMONSHADER_SAMPLER_REGISTER_COMPONENTS = 1;
export const D3D12_COMMONSHADER_SAMPLER_REGISTER_COUNT = 16;
export const D3D12_COMMONSHADER_SAMPLER_REGISTER_READS_PER_INST = 1;
export const D3D12_COMMONSHADER_SAMPLER_REGISTER_READ_PORTS = 1;
export const D3D12_COMMONSHADER_SAMPLER_SLOT_COUNT = 16;
export const D3D12_COMMONSHADER_SUBROUTINE_NESTING_LIMIT = 32;
export const D3D12_COMMONSHADER_TEMP_REGISTER_COMPONENTS = 4;
export const D3D12_COMMONSHADER_TEMP_REGISTER_COMPONENT_BIT_COUNT = 32;
export const D3D12_COMMONSHADER_TEMP_REGISTER_COUNT = 4096;
export const D3D12_COMMONSHADER_TEMP_REGISTER_READS_PER_INST = 3;
export const D3D12_COMMONSHADER_TEMP_REGISTER_READ_PORTS = 3;
export const D3D12_COMMONSHADER_TEXCOORD_RANGE_REDUCTION_MAX = 10;
export const D3D12_COMMONSHADER_TEXCOORD_RANGE_REDUCTION_MIN = `-10`;
export const D3D12_COMMONSHADER_TEXEL_OFFSET_MAX_NEGATIVE = `-8`;
export const D3D12_COMMONSHADER_TEXEL_OFFSET_MAX_POSITIVE = 7;
export const D3D12_CONSTANT_BUFFER_DATA_PLACEMENT_ALIGNMENT = 256;
export const D3D12_CS_4_X_BUCKET00_MAX_BYTES_TGSM_WRITABLE_PER_THREAD = 256;
export const D3D12_CS_4_X_BUCKET00_MAX_NUM_THREADS_PER_GROUP = 64;
export const D3D12_CS_4_X_BUCKET01_MAX_BYTES_TGSM_WRITABLE_PER_THREAD = 240;
export const D3D12_CS_4_X_BUCKET01_MAX_NUM_THREADS_PER_GROUP = 68;
export const D3D12_CS_4_X_BUCKET02_MAX_BYTES_TGSM_WRITABLE_PER_THREAD = 224;
export const D3D12_CS_4_X_BUCKET02_MAX_NUM_THREADS_PER_GROUP = 72;
export const D3D12_CS_4_X_BUCKET03_MAX_BYTES_TGSM_WRITABLE_PER_THREAD = 208;
export const D3D12_CS_4_X_BUCKET03_MAX_NUM_THREADS_PER_GROUP = 76;
export const D3D12_CS_4_X_BUCKET04_MAX_BYTES_TGSM_WRITABLE_PER_THREAD = 192;
export const D3D12_CS_4_X_BUCKET04_MAX_NUM_THREADS_PER_GROUP = 84;
export const D3D12_CS_4_X_BUCKET05_MAX_BYTES_TGSM_WRITABLE_PER_THREAD = 176;
export const D3D12_CS_4_X_BUCKET05_MAX_NUM_THREADS_PER_GROUP = 92;
export const D3D12_CS_4_X_BUCKET06_MAX_BYTES_TGSM_WRITABLE_PER_THREAD = 160;
export const D3D12_CS_4_X_BUCKET06_MAX_NUM_THREADS_PER_GROUP = 100;
export const D3D12_CS_4_X_BUCKET07_MAX_BYTES_TGSM_WRITABLE_PER_THREAD = 144;
export const D3D12_CS_4_X_BUCKET07_MAX_NUM_THREADS_PER_GROUP = 112;
export const D3D12_CS_4_X_BUCKET08_MAX_BYTES_TGSM_WRITABLE_PER_THREAD = 128;
export const D3D12_CS_4_X_BUCKET08_MAX_NUM_THREADS_PER_GROUP = 128;
export const D3D12_CS_4_X_BUCKET09_MAX_BYTES_TGSM_WRITABLE_PER_THREAD = 112;
export const D3D12_CS_4_X_BUCKET09_MAX_NUM_THREADS_PER_GROUP = 144;
export const D3D12_CS_4_X_BUCKET10_MAX_BYTES_TGSM_WRITABLE_PER_THREAD = 96;
export const D3D12_CS_4_X_BUCKET10_MAX_NUM_THREADS_PER_GROUP = 168;
export const D3D12_CS_4_X_BUCKET11_MAX_BYTES_TGSM_WRITABLE_PER_THREAD = 80;
export const D3D12_CS_4_X_BUCKET11_MAX_NUM_THREADS_PER_GROUP = 204;
export const D3D12_CS_4_X_BUCKET12_MAX_BYTES_TGSM_WRITABLE_PER_THREAD = 64;
export const D3D12_CS_4_X_BUCKET12_MAX_NUM_THREADS_PER_GROUP = 256;
export const D3D12_CS_4_X_BUCKET13_MAX_BYTES_TGSM_WRITABLE_PER_THREAD = 48;
export const D3D12_CS_4_X_BUCKET13_MAX_NUM_THREADS_PER_GROUP = 340;
export const D3D12_CS_4_X_BUCKET14_MAX_BYTES_TGSM_WRITABLE_PER_THREAD = 32;
export const D3D12_CS_4_X_BUCKET14_MAX_NUM_THREADS_PER_GROUP = 512;
export const D3D12_CS_4_X_BUCKET15_MAX_BYTES_TGSM_WRITABLE_PER_THREAD = 16;
export const D3D12_CS_4_X_BUCKET15_MAX_NUM_THREADS_PER_GROUP = 768;
export const D3D12_CS_4_X_DISPATCH_MAX_THREAD_GROUPS_IN_Z_DIMENSION = 1;
export const D3D12_CS_4_X_RAW_UAV_BYTE_ALIGNMENT = 256;
export const D3D12_CS_4_X_THREAD_GROUP_MAX_THREADS_PER_GROUP = 768;
export const D3D12_CS_4_X_THREAD_GROUP_MAX_X = 768;
export const D3D12_CS_4_X_THREAD_GROUP_MAX_Y = 768;
export const D3D12_CS_4_X_UAV_REGISTER_COUNT = 1;
export const D3D12_CS_DISPATCH_MAX_THREAD_GROUPS_PER_DIMENSION = 65535;
export const D3D12_CS_TGSM_REGISTER_COUNT = 8192;
export const D3D12_CS_TGSM_REGISTER_READS_PER_INST = 1;
export const D3D12_CS_TGSM_RESOURCE_REGISTER_COMPONENTS = 1;
export const D3D12_CS_TGSM_RESOURCE_REGISTER_READ_PORTS = 1;
export const D3D12_CS_THREADGROUPID_REGISTER_COMPONENTS = 3;
export const D3D12_CS_THREADGROUPID_REGISTER_COUNT = 1;
export const D3D12_CS_THREADIDINGROUPFLATTENED_REGISTER_COMPONENTS = 1;
export const D3D12_CS_THREADIDINGROUPFLATTENED_REGISTER_COUNT = 1;
export const D3D12_CS_THREADIDINGROUP_REGISTER_COMPONENTS = 3;
export const D3D12_CS_THREADIDINGROUP_REGISTER_COUNT = 1;
export const D3D12_CS_THREADID_REGISTER_COMPONENTS = 3;
export const D3D12_CS_THREADID_REGISTER_COUNT = 1;
export const D3D12_CS_THREAD_GROUP_MAX_THREADS_PER_GROUP = 1024;
export const D3D12_CS_THREAD_GROUP_MAX_X = 1024;
export const D3D12_CS_THREAD_GROUP_MAX_Y = 1024;
export const D3D12_CS_THREAD_GROUP_MAX_Z = 64;
export const D3D12_CS_THREAD_GROUP_MIN_X = 1;
export const D3D12_CS_THREAD_GROUP_MIN_Y = 1;
export const D3D12_CS_THREAD_GROUP_MIN_Z = 1;
export const D3D12_CS_THREAD_LOCAL_TEMP_REGISTER_POOL = 16384;
export const D3D12_DEFAULT_BLEND_FACTOR_ALPHA = 1;
export const D3D12_DEFAULT_BLEND_FACTOR_BLUE = 1;
export const D3D12_DEFAULT_BLEND_FACTOR_GREEN = 1;
export const D3D12_DEFAULT_BLEND_FACTOR_RED = 1;
export const D3D12_DEFAULT_BORDER_COLOR_COMPONENT = 0;
export const D3D12_DEFAULT_DEPTH_BIAS = 0;
export const D3D12_DEFAULT_DEPTH_BIAS_CLAMP = 0;
export const D3D12_DEFAULT_MAX_ANISOTROPY = 16;
export const D3D12_DEFAULT_MIP_LOD_BIAS = 0;
export const D3D12_DEFAULT_MSAA_RESOURCE_PLACEMENT_ALIGNMENT = 4194304;
export const D3D12_DEFAULT_RENDER_TARGET_ARRAY_INDEX = 0;
export const D3D12_DEFAULT_RESOURCE_PLACEMENT_ALIGNMENT = 65536;
export const D3D12_DEFAULT_SAMPLE_MASK = 4294967295;
export const D3D12_DEFAULT_SCISSOR_ENDX = 0;
export const D3D12_DEFAULT_SCISSOR_ENDY = 0;
export const D3D12_DEFAULT_SCISSOR_STARTX = 0;
export const D3D12_DEFAULT_SCISSOR_STARTY = 0;
export const D3D12_DEFAULT_SLOPE_SCALED_DEPTH_BIAS = 0;
export const D3D12_DEFAULT_STENCIL_READ_MASK = 255;
export const D3D12_DEFAULT_STENCIL_REFERENCE = 0;
export const D3D12_DEFAULT_STENCIL_WRITE_MASK = 255;
export const D3D12_DEFAULT_VIEWPORT_AND_SCISSORRECT_INDEX = 0;
export const D3D12_DEFAULT_VIEWPORT_HEIGHT = 0;
export const D3D12_DEFAULT_VIEWPORT_MAX_DEPTH = 0;
export const D3D12_DEFAULT_VIEWPORT_MIN_DEPTH = 0;
export const D3D12_DEFAULT_VIEWPORT_TOPLEFTX = 0;
export const D3D12_DEFAULT_VIEWPORT_TOPLEFTY = 0;
export const D3D12_DEFAULT_VIEWPORT_WIDTH = 0;
export const D3D12_DESCRIPTOR_RANGE_OFFSET_APPEND = 4294967295;
export const D3D12_DRIVER_RESERVED_REGISTER_SPACE_VALUES_END = 4294967287;
export const D3D12_DRIVER_RESERVED_REGISTER_SPACE_VALUES_START = 4294967280;
export const D3D12_DS_INPUT_CONTROL_POINTS_MAX_TOTAL_SCALARS = 3968;
export const D3D12_DS_INPUT_CONTROL_POINT_REGISTER_COMPONENTS = 4;
export const D3D12_DS_INPUT_CONTROL_POINT_REGISTER_COMPONENT_BIT_COUNT = 32;
export const D3D12_DS_INPUT_CONTROL_POINT_REGISTER_COUNT = 32;
export const D3D12_DS_INPUT_CONTROL_POINT_REGISTER_READS_PER_INST = 2;
export const D3D12_DS_INPUT_CONTROL_POINT_REGISTER_READ_PORTS = 1;
export const D3D12_DS_INPUT_DOMAIN_POINT_REGISTER_COMPONENTS = 3;
export const D3D12_DS_INPUT_DOMAIN_POINT_REGISTER_COMPONENT_BIT_COUNT = 32;
export const D3D12_DS_INPUT_DOMAIN_POINT_REGISTER_COUNT = 1;
export const D3D12_DS_INPUT_DOMAIN_POINT_REGISTER_READS_PER_INST = 2;
export const D3D12_DS_INPUT_DOMAIN_POINT_REGISTER_READ_PORTS = 1;
export const D3D12_DS_INPUT_PATCH_CONSTANT_REGISTER_COMPONENTS = 4;
export const D3D12_DS_INPUT_PATCH_CONSTANT_REGISTER_COMPONENT_BIT_COUNT = 32;
export const D3D12_DS_INPUT_PATCH_CONSTANT_REGISTER_COUNT = 32;
export const D3D12_DS_INPUT_PATCH_CONSTANT_REGISTER_READS_PER_INST = 2;
export const D3D12_DS_INPUT_PATCH_CONSTANT_REGISTER_READ_PORTS = 1;
export const D3D12_DS_INPUT_PRIMITIVE_ID_REGISTER_COMPONENTS = 1;
export const D3D12_DS_INPUT_PRIMITIVE_ID_REGISTER_COMPONENT_BIT_COUNT = 32;
export const D3D12_DS_INPUT_PRIMITIVE_ID_REGISTER_COUNT = 1;
export const D3D12_DS_INPUT_PRIMITIVE_ID_REGISTER_READS_PER_INST = 2;
export const D3D12_DS_INPUT_PRIMITIVE_ID_REGISTER_READ_PORTS = 1;
export const D3D12_DS_OUTPUT_REGISTER_COMPONENTS = 4;
export const D3D12_DS_OUTPUT_REGISTER_COMPONENT_BIT_COUNT = 32;
export const D3D12_DS_OUTPUT_REGISTER_COUNT = 32;
export const D3D12_FLOAT16_FUSED_TOLERANCE_IN_ULP = `0.6`;
export const D3D12_FLOAT32_MAX = `3.4028234663852886e+38`;
export const D3D12_FLOAT32_TO_INTEGER_TOLERANCE_IN_ULP = `0.6000000238418579`;
export const D3D12_FLOAT_TO_SRGB_EXPONENT_DENOMINATOR = `2.4000000953674316`;
export const D3D12_FLOAT_TO_SRGB_EXPONENT_NUMERATOR = 1;
export const D3D12_FLOAT_TO_SRGB_OFFSET = `0.054999999701976776`;
export const D3D12_FLOAT_TO_SRGB_SCALE_1 = `12.920000076293945`;
export const D3D12_FLOAT_TO_SRGB_SCALE_2 = `1.0549999475479126`;
export const D3D12_FLOAT_TO_SRGB_THRESHOLD = `0.0031308000907301903`;
export const D3D12_FTOI_INSTRUCTION_MAX_INPUT = 2147483648;
export const D3D12_FTOI_INSTRUCTION_MIN_INPUT = `-2147483648`;
export const D3D12_FTOU_INSTRUCTION_MAX_INPUT = 4294967296;
export const D3D12_FTOU_INSTRUCTION_MIN_INPUT = 0;
export const D3D12_GS_INPUT_INSTANCE_ID_READS_PER_INST = 2;
export const D3D12_GS_INPUT_INSTANCE_ID_READ_PORTS = 1;
export const D3D12_GS_INPUT_INSTANCE_ID_REGISTER_COMPONENTS = 1;
export const D3D12_GS_INPUT_INSTANCE_ID_REGISTER_COMPONENT_BIT_COUNT = 32;
export const D3D12_GS_INPUT_INSTANCE_ID_REGISTER_COUNT = 1;
export const D3D12_GS_INPUT_PRIM_CONST_REGISTER_COMPONENTS = 1;
export const D3D12_GS_INPUT_PRIM_CONST_REGISTER_COMPONENT_BIT_COUNT = 32;
export const D3D12_GS_INPUT_PRIM_CONST_REGISTER_COUNT = 1;
export const D3D12_GS_INPUT_PRIM_CONST_REGISTER_READS_PER_INST = 2;
export const D3D12_GS_INPUT_PRIM_CONST_REGISTER_READ_PORTS = 1;
export const D3D12_GS_INPUT_REGISTER_COMPONENTS = 4;
export const D3D12_GS_INPUT_REGISTER_COMPONENT_BIT_COUNT = 32;
export const D3D12_GS_INPUT_REGISTER_COUNT = 32;
export const D3D12_GS_INPUT_REGISTER_READS_PER_INST = 2;
export const D3D12_GS_INPUT_REGISTER_READ_PORTS = 1;
export const D3D12_GS_INPUT_REGISTER_VERTICES = 32;
export const D3D12_GS_MAX_INSTANCE_COUNT = 32;
export const D3D12_GS_MAX_OUTPUT_VERTEX_COUNT_ACROSS_INSTANCES = 1024;
export const D3D12_GS_OUTPUT_ELEMENTS = 32;
export const D3D12_GS_OUTPUT_REGISTER_COMPONENTS = 4;
export const D3D12_GS_OUTPUT_REGISTER_COMPONENT_BIT_COUNT = 32;
export const D3D12_GS_OUTPUT_REGISTER_COUNT = 32;
export const D3D12_HS_CONTROL_POINT_PHASE_INPUT_REGISTER_COUNT = 32;
export const D3D12_HS_CONTROL_POINT_PHASE_OUTPUT_REGISTER_COUNT = 32;
export const D3D12_HS_CONTROL_POINT_REGISTER_COMPONENTS = 4;
export const D3D12_HS_CONTROL_POINT_REGISTER_COMPONENT_BIT_COUNT = 32;
export const D3D12_HS_CONTROL_POINT_REGISTER_READS_PER_INST = 2;
export const D3D12_HS_CONTROL_POINT_REGISTER_READ_PORTS = 1;
export const D3D12_HS_FORK_PHASE_INSTANCE_COUNT_UPPER_BOUND = 4294967295;
export const D3D12_HS_INPUT_FORK_INSTANCE_ID_REGISTER_COMPONENTS = 1;
export const D3D12_HS_INPUT_FORK_INSTANCE_ID_REGISTER_COMPONENT_BIT_COUNT = 32;
export const D3D12_HS_INPUT_FORK_INSTANCE_ID_REGISTER_COUNT = 1;
export const D3D12_HS_INPUT_FORK_INSTANCE_ID_REGISTER_READS_PER_INST = 2;
export const D3D12_HS_INPUT_FORK_INSTANCE_ID_REGISTER_READ_PORTS = 1;
export const D3D12_HS_INPUT_JOIN_INSTANCE_ID_REGISTER_COMPONENTS = 1;
export const D3D12_HS_INPUT_JOIN_INSTANCE_ID_REGISTER_COMPONENT_BIT_COUNT = 32;
export const D3D12_HS_INPUT_JOIN_INSTANCE_ID_REGISTER_COUNT = 1;
export const D3D12_HS_INPUT_JOIN_INSTANCE_ID_REGISTER_READS_PER_INST = 2;
export const D3D12_HS_INPUT_JOIN_INSTANCE_ID_REGISTER_READ_PORTS = 1;
export const D3D12_HS_INPUT_PRIMITIVE_ID_REGISTER_COMPONENTS = 1;
export const D3D12_HS_INPUT_PRIMITIVE_ID_REGISTER_COMPONENT_BIT_COUNT = 32;
export const D3D12_HS_INPUT_PRIMITIVE_ID_REGISTER_COUNT = 1;
export const D3D12_HS_INPUT_PRIMITIVE_ID_REGISTER_READS_PER_INST = 2;
export const D3D12_HS_INPUT_PRIMITIVE_ID_REGISTER_READ_PORTS = 1;
export const D3D12_HS_JOIN_PHASE_INSTANCE_COUNT_UPPER_BOUND = 4294967295;
export const D3D12_HS_MAXTESSFACTOR_LOWER_BOUND = 1;
export const D3D12_HS_MAXTESSFACTOR_UPPER_BOUND = 64;
export const D3D12_HS_OUTPUT_CONTROL_POINTS_MAX_TOTAL_SCALARS = 3968;
export const D3D12_HS_OUTPUT_CONTROL_POINT_ID_REGISTER_COMPONENTS = 1;
export const D3D12_HS_OUTPUT_CONTROL_POINT_ID_REGISTER_COMPONENT_BIT_COUNT = 32;
export const D3D12_HS_OUTPUT_CONTROL_POINT_ID_REGISTER_COUNT = 1;
export const D3D12_HS_OUTPUT_CONTROL_POINT_ID_REGISTER_READS_PER_INST = 2;
export const D3D12_HS_OUTPUT_CONTROL_POINT_ID_REGISTER_READ_PORTS = 1;
export const D3D12_HS_OUTPUT_PATCH_CONSTANT_REGISTER_COMPONENTS = 4;
export const D3D12_HS_OUTPUT_PATCH_CONSTANT_REGISTER_COMPONENT_BIT_COUNT = 32;
export const D3D12_HS_OUTPUT_PATCH_CONSTANT_REGISTER_COUNT = 32;
export const D3D12_HS_OUTPUT_PATCH_CONSTANT_REGISTER_READS_PER_INST = 2;
export const D3D12_HS_OUTPUT_PATCH_CONSTANT_REGISTER_READ_PORTS = 1;
export const D3D12_HS_OUTPUT_PATCH_CONSTANT_REGISTER_SCALAR_COMPONENTS = 128;
export const D3D12_IA_DEFAULT_INDEX_BUFFER_OFFSET_IN_BYTES = 0;
export const D3D12_IA_DEFAULT_PRIMITIVE_TOPOLOGY = 0;
export const D3D12_IA_DEFAULT_VERTEX_BUFFER_OFFSET_IN_BYTES = 0;
export const D3D12_IA_INDEX_INPUT_RESOURCE_SLOT_COUNT = 1;
export const D3D12_IA_INSTANCE_ID_BIT_COUNT = 32;
export const D3D12_IA_INTEGER_ARITHMETIC_BIT_COUNT = 32;
export const D3D12_IA_PATCH_MAX_CONTROL_POINT_COUNT = 32;
export const D3D12_IA_PRIMITIVE_ID_BIT_COUNT = 32;
export const D3D12_IA_VERTEX_ID_BIT_COUNT = 32;
export const D3D12_IA_VERTEX_INPUT_RESOURCE_SLOT_COUNT = 32;
export const D3D12_IA_VERTEX_INPUT_STRUCTURE_ELEMENTS_COMPONENTS = 128;
export const D3D12_IA_VERTEX_INPUT_STRUCTURE_ELEMENT_COUNT = 32;
export const D3D12_INTEGER_DIVIDE_BY_ZERO_QUOTIENT = 4294967295;
export const D3D12_INTEGER_DIVIDE_BY_ZERO_REMAINDER = 4294967295;
export const D3D12_KEEP_RENDER_TARGETS_AND_DEPTH_STENCIL = 4294967295;
export const D3D12_KEEP_UNORDERED_ACCESS_VIEWS = 4294967295;
export const D3D12_LINEAR_GAMMA = 1;
export const D3D12_MAJOR_VERSION = 12;
export const D3D12_MAX_BORDER_COLOR_COMPONENT = 1;
export const D3D12_MAX_DEPTH = 1;
export const D3D12_MAX_LIVE_STATIC_SAMPLERS = 2032;
export const D3D12_MAX_MAXANISOTROPY = 16;
export const D3D12_MAX_MULTISAMPLE_SAMPLE_COUNT = 32;
export const D3D12_MAX_POSITION_VALUE = `3.4028235832468283e+34`;
export const D3D12_MAX_ROOT_COST = 64;
export const D3D12_MAX_SHADER_VISIBLE_DESCRIPTOR_HEAP_SIZE_TIER_1 = 1000000;
export const D3D12_MAX_SHADER_VISIBLE_DESCRIPTOR_HEAP_SIZE_TIER_2 = 1000000;
export const D3D12_MAX_SHADER_VISIBLE_SAMPLER_HEAP_SIZE = 2048;
export const D3D12_MAX_TEXTURE_DIMENSION_2_TO_EXP = 17;
export const D3D12_MAX_VIEW_INSTANCE_COUNT = 4;
export const D3D12_MINOR_VERSION = 0;
export const D3D12_MIN_BORDER_COLOR_COMPONENT = 0;
export const D3D12_MIN_DEPTH = 0;
export const D3D12_MIN_MAXANISOTROPY = 0;
export const D3D12_MIP_LOD_BIAS_MAX = `15.989999771118164`;
export const D3D12_MIP_LOD_BIAS_MIN = `-16`;
export const D3D12_MIP_LOD_FRACTIONAL_BIT_COUNT = 8;
export const D3D12_MIP_LOD_RANGE_BIT_COUNT = 8;
export const D3D12_MULTISAMPLE_ANTIALIAS_LINE_WIDTH = `1.399999976158142`;
export const D3D12_NONSAMPLE_FETCH_OUT_OF_RANGE_ACCESS_RESULT = 0;
export const D3D12_OS_RESERVED_REGISTER_SPACE_VALUES_END = 4294967295;
export const D3D12_OS_RESERVED_REGISTER_SPACE_VALUES_START = 4294967288;
export const D3D12_PACKED_TILE = 4294967295;
export const D3D12_PIXEL_ADDRESS_RANGE_BIT_COUNT = 15;
export const D3D12_PRE_SCISSOR_PIXEL_ADDRESS_RANGE_BIT_COUNT = 16;
export const D3D12_PS_CS_UAV_REGISTER_COMPONENTS = 1;
export const D3D12_PS_CS_UAV_REGISTER_COUNT = 8;
export const D3D12_PS_CS_UAV_REGISTER_READS_PER_INST = 1;
export const D3D12_PS_CS_UAV_REGISTER_READ_PORTS = 1;
export const D3D12_PS_FRONTFACING_DEFAULT_VALUE = 4294967295;
export const D3D12_PS_FRONTFACING_FALSE_VALUE = 0;
export const D3D12_PS_FRONTFACING_TRUE_VALUE = 4294967295;
export const D3D12_PS_INPUT_REGISTER_COMPONENTS = 4;
export const D3D12_PS_INPUT_REGISTER_COMPONENT_BIT_COUNT = 32;
export const D3D12_PS_INPUT_REGISTER_COUNT = 32;
export const D3D12_PS_INPUT_REGISTER_READS_PER_INST = 2;
export const D3D12_PS_INPUT_REGISTER_READ_PORTS = 1;
export const D3D12_PS_LEGACY_PIXEL_CENTER_FRACTIONAL_COMPONENT = 0;
export const D3D12_PS_OUTPUT_DEPTH_REGISTER_COMPONENTS = 1;
export const D3D12_PS_OUTPUT_DEPTH_REGISTER_COMPONENT_BIT_COUNT = 32;
export const D3D12_PS_OUTPUT_DEPTH_REGISTER_COUNT = 1;
export const D3D12_PS_OUTPUT_MASK_REGISTER_COMPONENTS = 1;
export const D3D12_PS_OUTPUT_MASK_REGISTER_COMPONENT_BIT_COUNT = 32;
export const D3D12_PS_OUTPUT_MASK_REGISTER_COUNT = 1;
export const D3D12_PS_OUTPUT_REGISTER_COMPONENTS = 4;
export const D3D12_PS_OUTPUT_REGISTER_COMPONENT_BIT_COUNT = 32;
export const D3D12_PS_OUTPUT_REGISTER_COUNT = 8;
export const D3D12_PS_PIXEL_CENTER_FRACTIONAL_COMPONENT = `0.5`;
export const D3D12_RAW_UAV_SRV_BYTE_ALIGNMENT = 16;
export const D3D12_RAYTRACING_AABB_BYTE_ALIGNMENT = 8;
export const D3D12_RAYTRACING_ACCELERATION_STRUCTURE_BYTE_ALIGNMENT = 256;
export const D3D12_RAYTRACING_INSTANCE_DESCS_BYTE_ALIGNMENT = 16;
export const D3D12_RAYTRACING_MAX_ATTRIBUTE_SIZE_IN_BYTES = 32;
export const D3D12_RAYTRACING_MAX_DECLARABLE_TRACE_RECURSION_DEPTH = 31;
export const D3D12_RAYTRACING_MAX_GEOMETRIES_PER_BOTTOM_LEVEL_ACCELERATION_STRUCTURE = 16777216;
export const D3D12_RAYTRACING_MAX_INSTANCES_PER_TOP_LEVEL_ACCELERATION_STRUCTURE = 16777216;
export const D3D12_RAYTRACING_MAX_PRIMITIVES_PER_BOTTOM_LEVEL_ACCELERATION_STRUCTURE = 536870912;
export const D3D12_RAYTRACING_MAX_RAY_GENERATION_SHADER_THREADS = 1073741824;
export const D3D12_RAYTRACING_MAX_SHADER_RECORD_STRIDE = 4096;
export const D3D12_RAYTRACING_SHADER_RECORD_BYTE_ALIGNMENT = 32;
export const D3D12_RAYTRACING_SHADER_TABLE_BYTE_ALIGNMENT = 64;
export const D3D12_RAYTRACING_TRANSFORM3X4_BYTE_ALIGNMENT = 16;
export const D3D12_REQ_BLEND_OBJECT_COUNT_PER_DEVICE = 4096;
export const D3D12_REQ_BUFFER_RESOURCE_TEXEL_COUNT_2_TO_EXP = 27;
export const D3D12_REQ_CONSTANT_BUFFER_ELEMENT_COUNT = 4096;
export const D3D12_REQ_DEPTH_STENCIL_OBJECT_COUNT_PER_DEVICE = 4096;
export const D3D12_REQ_DRAWINDEXED_INDEX_COUNT_2_TO_EXP = 32;
export const D3D12_REQ_DRAW_VERTEX_COUNT_2_TO_EXP = 32;
export const D3D12_REQ_FILTERING_HW_ADDRESSABLE_RESOURCE_DIMENSION = 16384;
export const D3D12_REQ_GS_INVOCATION_32BIT_OUTPUT_COMPONENT_LIMIT = 1024;
export const D3D12_REQ_IMMEDIATE_CONSTANT_BUFFER_ELEMENT_COUNT = 4096;
export const D3D12_REQ_MAXANISOTROPY = 16;
export const D3D12_REQ_MIP_LEVELS = 15;
export const D3D12_REQ_MULTI_ELEMENT_STRUCTURE_SIZE_IN_BYTES = 2048;
export const D3D12_REQ_RASTERIZER_OBJECT_COUNT_PER_DEVICE = 4096;
export const D3D12_REQ_RENDER_TO_BUFFER_WINDOW_WIDTH = 16384;
export const D3D12_REQ_RESOURCE_SIZE_IN_MEGABYTES_EXPRESSION_A_TERM = 128;
export const D3D12_REQ_RESOURCE_SIZE_IN_MEGABYTES_EXPRESSION_B_TERM = `0.25`;
export const D3D12_REQ_RESOURCE_SIZE_IN_MEGABYTES_EXPRESSION_C_TERM = 2048;
export const D3D12_REQ_RESOURCE_VIEW_COUNT_PER_DEVICE_2_TO_EXP = 20;
export const D3D12_REQ_SAMPLER_OBJECT_COUNT_PER_DEVICE = 4096;
export const D3D12_REQ_SUBRESOURCES = 30720;
export const D3D12_REQ_TEXTURE1D_ARRAY_AXIS_DIMENSION = 2048;
export const D3D12_REQ_TEXTURE1D_U_DIMENSION = 16384;
export const D3D12_REQ_TEXTURE2D_ARRAY_AXIS_DIMENSION = 2048;
export const D3D12_REQ_TEXTURE2D_U_OR_V_DIMENSION = 16384;
export const D3D12_REQ_TEXTURE3D_U_V_OR_W_DIMENSION = 2048;
export const D3D12_REQ_TEXTURECUBE_DIMENSION = 16384;
export const D3D12_RESINFO_INSTRUCTION_MISSING_COMPONENT_RETVAL = 0;
export const D3D12_RESOURCE_BARRIER_ALL_SUBRESOURCES = 4294967295;
export const D3D12_RS_SET_SHADING_RATE_COMBINER_COUNT = 2;
export const D3D12_SDK_VERSION = 5;
export const D3D12_SHADER_IDENTIFIER_SIZE_IN_BYTES = 32;
export const D3D12_SHADER_MAJOR_VERSION = 5;
export const D3D12_SHADER_MAX_INSTANCES = 65535;
export const D3D12_SHADER_MAX_INTERFACES = 253;
export const D3D12_SHADER_MAX_INTERFACE_CALL_SITES = 4096;
export const D3D12_SHADER_MAX_TYPES = 65535;
export const D3D12_SHADER_MINOR_VERSION = 1;
export const D3D12_SHIFT_INSTRUCTION_PAD_VALUE = 0;
export const D3D12_SHIFT_INSTRUCTION_SHIFT_VALUE_BIT_COUNT = 5;
export const D3D12_SIMULTANEOUS_RENDER_TARGET_COUNT = 8;
export const D3D12_SMALL_MSAA_RESOURCE_PLACEMENT_ALIGNMENT = 65536;
export const D3D12_SMALL_RESOURCE_PLACEMENT_ALIGNMENT = 4096;
export const D3D12_SO_BUFFER_MAX_STRIDE_IN_BYTES = 2048;
export const D3D12_SO_BUFFER_MAX_WRITE_WINDOW_IN_BYTES = 512;
export const D3D12_SO_BUFFER_SLOT_COUNT = 4;
export const D3D12_SO_DDI_REGISTER_INDEX_DENOTING_GAP = 4294967295;
export const D3D12_SO_NO_RASTERIZED_STREAM = 4294967295;
export const D3D12_SO_OUTPUT_COMPONENT_COUNT = 128;
export const D3D12_SO_STREAM_COUNT = 4;
export const D3D12_SPEC_DATE_DAY = 14;
export const D3D12_SPEC_DATE_MONTH = 11;
export const D3D12_SPEC_DATE_YEAR = 2014;
export const D3D12_SPEC_VERSION = `1.16`;
export const D3D12_SRGB_GAMMA = `2.200000047683716`;
export const D3D12_SRGB_TO_FLOAT_DENOMINATOR_1 = `12.920000076293945`;
export const D3D12_SRGB_TO_FLOAT_DENOMINATOR_2 = `1.0549999475479126`;
export const D3D12_SRGB_TO_FLOAT_EXPONENT = `2.4000000953674316`;
export const D3D12_SRGB_TO_FLOAT_OFFSET = `0.054999999701976776`;
export const D3D12_SRGB_TO_FLOAT_THRESHOLD = `0.040449999272823334`;
export const D3D12_SRGB_TO_FLOAT_TOLERANCE_IN_ULP = `0.5`;
export const D3D12_STANDARD_COMPONENT_BIT_COUNT = 32;
export const D3D12_STANDARD_COMPONENT_BIT_COUNT_DOUBLED = 64;
export const D3D12_STANDARD_MAXIMUM_ELEMENT_ALIGNMENT_BYTE_MULTIPLE = 4;
export const D3D12_STANDARD_PIXEL_COMPONENT_COUNT = 128;
export const D3D12_STANDARD_PIXEL_ELEMENT_COUNT = 32;
export const D3D12_STANDARD_VECTOR_SIZE = 4;
export const D3D12_STANDARD_VERTEX_ELEMENT_COUNT = 32;
export const D3D12_STANDARD_VERTEX_TOTAL_COMPONENT_COUNT = 64;
export const D3D12_SUBPIXEL_FRACTIONAL_BIT_COUNT = 8;
export const D3D12_SUBTEXEL_FRACTIONAL_BIT_COUNT = 8;
export const D3D12_SYSTEM_RESERVED_REGISTER_SPACE_VALUES_END = 4294967295;
export const D3D12_SYSTEM_RESERVED_REGISTER_SPACE_VALUES_START = 4294967280;
export const D3D12_TESSELLATOR_MAX_EVEN_TESSELLATION_FACTOR = 64;
export const D3D12_TESSELLATOR_MAX_ISOLINE_DENSITY_TESSELLATION_FACTOR = 64;
export const D3D12_TESSELLATOR_MAX_ODD_TESSELLATION_FACTOR = 63;
export const D3D12_TESSELLATOR_MAX_TESSELLATION_FACTOR = 64;
export const D3D12_TESSELLATOR_MIN_EVEN_TESSELLATION_FACTOR = 2;
export const D3D12_TESSELLATOR_MIN_ISOLINE_DENSITY_TESSELLATION_FACTOR = 1;
export const D3D12_TESSELLATOR_MIN_ODD_TESSELLATION_FACTOR = 1;
export const D3D12_TEXEL_ADDRESS_RANGE_BIT_COUNT = 16;
export const D3D12_TEXTURE_DATA_PITCH_ALIGNMENT = 256;
export const D3D12_TEXTURE_DATA_PLACEMENT_ALIGNMENT = 512;
export const D3D12_TILED_RESOURCE_TILE_SIZE_IN_BYTES = 65536;
export const D3D12_TRACKED_WORKLOAD_MAX_INSTANCES = 32;
export const D3D12_UAV_COUNTER_PLACEMENT_ALIGNMENT = 4096;
export const D3D12_UAV_SLOT_COUNT = 64;
export const D3D12_UNBOUND_MEMORY_ACCESS_RESULT = 0;
export const D3D12_VIDEO_DECODE_MAX_ARGUMENTS = 10;
export const D3D12_VIDEO_DECODE_MAX_HISTOGRAM_COMPONENTS = 4;
export const D3D12_VIDEO_DECODE_MIN_BITSTREAM_OFFSET_ALIGNMENT = 256;
export const D3D12_VIDEO_DECODE_MIN_HISTOGRAM_OFFSET_ALIGNMENT = 256;
export const D3D12_VIDEO_DECODE_STATUS_MACROBLOCKS_AFFECTED_UNKNOWN = 4294967295;
export const D3D12_VIDEO_PROCESS_MAX_FILTERS = 32;
export const D3D12_VIDEO_PROCESS_STEREO_VIEWS = 2;
export const D3D12_VIEWPORT_AND_SCISSORRECT_MAX_INDEX = 15;
export const D3D12_VIEWPORT_AND_SCISSORRECT_OBJECT_COUNT_PER_PIPELINE = 16;
export const D3D12_VIEWPORT_BOUNDS_MAX = 32767;
export const D3D12_VIEWPORT_BOUNDS_MIN = `-32768`;
export const D3D12_VS_INPUT_REGISTER_COMPONENTS = 4;
export const D3D12_VS_INPUT_REGISTER_COMPONENT_BIT_COUNT = 32;
export const D3D12_VS_INPUT_REGISTER_COUNT = 32;
export const D3D12_VS_INPUT_REGISTER_READS_PER_INST = 2;
export const D3D12_VS_INPUT_REGISTER_READ_PORTS = 1;
export const D3D12_VS_OUTPUT_REGISTER_COMPONENTS = 4;
export const D3D12_VS_OUTPUT_REGISTER_COMPONENT_BIT_COUNT = 32;
export const D3D12_VS_OUTPUT_REGISTER_COUNT = 32;
export const D3D12_WHQL_CONTEXT_COUNT_FOR_RESOURCE_LIMIT = 10;
export const D3D12_WHQL_DRAWINDEXED_INDEX_COUNT_2_TO_EXP = 25;
export const D3D12_WHQL_DRAW_VERTEX_COUNT_2_TO_EXP = 25;
export const D3D12_SHADER_COMPONENT_MAPPING_MASK = 7;
export const D3D12_SHADER_COMPONENT_MAPPING_SHIFT = 3;
export const D3D12_FILTER_REDUCTION_TYPE_MASK = 3;
export const D3D12_FILTER_REDUCTION_TYPE_SHIFT = 7;
export const D3D12_FILTER_TYPE_MASK = 3;
export const D3D12_MIN_FILTER_SHIFT = 4;
export const D3D12_MAG_FILTER_SHIFT = 2;
export const D3D12_MIP_FILTER_SHIFT = 0;
export const D3D12_ANISOTROPIC_FILTERING_BIT = 64;
export const LUID_DEFINED = 1;
export const D3D12_SHADING_RATE_X_AXIS_SHIFT = 2;
export const D3D12_SHADING_RATE_VALID_MASK = 3;
export const D3D12_INFO_QUEUE_DEFAULT_MESSAGE_COUNT_LIMIT = 1024;
export const D3D_SHADER_REQUIRES_STENCIL_REF = 512;
export const D3D_SHADER_REQUIRES_INNER_COVERAGE = 1024;
export const D3D_SHADER_REQUIRES_TYPED_UAV_LOAD_ADDITIONAL_FORMATS = 2048;
export const D3D_SHADER_REQUIRES_ROVS = 4096;
export const D3D_SHADER_REQUIRES_VIEWPORT_AND_RT_ARRAY_INDEX_FROM_ANY_SHADER_FEEDING_RASTERIZER = 8192;
export const D3D_SHADER_REQUIRES_WAVE_OPS = 16384;
export const D3D_SHADER_REQUIRES_INT64_OPS = 32768;
export const D3D_SHADER_REQUIRES_VIEW_ID = 65536;
export const D3D_SHADER_REQUIRES_BARYCENTRICS = 131072;
export const D3D_SHADER_REQUIRES_NATIVE_16BIT_OPS = 262144;
export const D3D_SHADER_REQUIRES_SHADING_RATE = 524288;
export const D3D_SHADER_REQUIRES_RAYTRACING_TIER_1_1 = 1048576;
export const D3D_SHADER_REQUIRES_SAMPLER_FEEDBACK = 2097152;
export const D3D_SHADER_REQUIRES_ATOMIC_INT64_ON_TYPED_RESOURCE = 4194304;
export const D3D_SHADER_REQUIRES_ATOMIC_INT64_ON_GROUP_SHARED = 8388608;
export const D3D_SHADER_REQUIRES_DERIVATIVES_IN_MESH_AND_AMPLIFICATION_SHADERS = 16777216;
export const D3D_SHADER_REQUIRES_RESOURCE_DESCRIPTOR_HEAP_INDEXING = 33554432;
export const D3D_SHADER_REQUIRES_SAMPLER_DESCRIPTOR_HEAP_INDEXING = 67108864;
export const D3D_SHADER_REQUIRES_WAVE_MMA = 134217728;
export const D3D_SHADER_REQUIRES_ATOMIC_INT64_ON_DESCRIPTOR_HEAP_RESOURCE = 268435456;
export const D3DRTYPECOUNT = 8;
export const D3DCS_LEFT = 1;
export const D3DCS_RIGHT = 2;
export const D3DCS_TOP = 4;
export const D3DCS_BOTTOM = 8;
export const D3DCS_FRONT = 16;
export const D3DCS_BACK = 32;
export const D3DCS_PLANE0 = 64;
export const D3DCS_PLANE1 = 128;
export const D3DCS_PLANE2 = 256;
export const D3DCS_PLANE3 = 512;
export const D3DCS_PLANE4 = 1024;
export const D3DCS_PLANE5 = 2048;
export const D3D_MAX_SIMULTANEOUS_RENDERTARGETS = 4;
export const D3DWRAP_W = 4;
export const D3DDMAPSAMPLER = 256;
export const D3DVERTEXTEXTURESAMPLER0 = 257;
export const D3DVERTEXTEXTURESAMPLER1 = 258;
export const D3DVERTEXTEXTURESAMPLER2 = 259;
export const D3DVERTEXTEXTURESAMPLER3 = 260;
export const D3DTSS_TCI_SPHEREMAP = 262144;
export const D3DTA_TEMP = 5;
export const D3DTA_CONSTANT = 6;
export const D3DFVF_XYZW = 16386;
export const D3DFVF_PSIZE = 32;
export const D3DFVF_LASTBETA_UBYTE4 = 4096;
export const D3DFVF_LASTBETA_D3DCOLOR = 32768;
export const MAXD3DDECLUSAGEINDEX = 15;
export const MAXD3DDECLLENGTH = 64;
export const D3DSTREAMSOURCE_INDEXEDDATA = 1073741824;
export const D3DSTREAMSOURCE_INSTANCEDATA = 2147483648;
export const D3DSI_OPCODE_MASK = 65535;
export const D3DSI_INSTLENGTH_MASK = 251658240;
export const D3DSI_INSTLENGTH_SHIFT = 24;
export const D3DSI_COISSUE = 1073741824;
export const D3DSP_OPCODESPECIFICCONTROL_MASK = 16711680;
export const D3DSP_OPCODESPECIFICCONTROL_SHIFT = 16;
export const D3DSHADER_COMPARISON_SHIFT = 16;
export const D3DSP_DCL_USAGE_SHIFT = 0;
export const D3DSP_DCL_USAGE_MASK = 15;
export const D3DSP_DCL_USAGEINDEX_SHIFT = 16;
export const D3DSP_DCL_USAGEINDEX_MASK = 983040;
export const D3DSP_TEXTURETYPE_SHIFT = 27;
export const D3DSP_TEXTURETYPE_MASK = 2013265920;
export const D3DSP_REGNUM_MASK = 2047;
export const D3DSP_WRITEMASK_0 = 65536;
export const D3DSP_WRITEMASK_1 = 131072;
export const D3DSP_WRITEMASK_2 = 262144;
export const D3DSP_WRITEMASK_3 = 524288;
export const D3DSP_WRITEMASK_ALL = 983040;
export const D3DSP_DSTMOD_SHIFT = 20;
export const D3DSP_DSTMOD_MASK = 15728640;
export const D3DSP_DSTSHIFT_SHIFT = 24;
export const D3DSP_DSTSHIFT_MASK = 251658240;
export const D3DSP_REGTYPE_SHIFT = 28;
export const D3DSP_REGTYPE_SHIFT2 = 8;
export const D3DSP_REGTYPE_MASK = 1879048192;
export const D3DSP_REGTYPE_MASK2 = 6144;
export const D3DVS_ADDRESSMODE_SHIFT = 13;
export const D3DSHADER_ADDRESSMODE_SHIFT = 13;
export const D3DVS_SWIZZLE_SHIFT = 16;
export const D3DVS_SWIZZLE_MASK = 16711680;
export const D3DSP_SWIZZLE_SHIFT = 16;
export const D3DSP_SWIZZLE_MASK = 16711680;
export const D3DSP_SRCMOD_SHIFT = 24;
export const D3DSP_SRCMOD_MASK = 251658240;
export const D3DSP_MIN_PRECISION_SHIFT = 14;
export const D3DSP_MIN_PRECISION_MASK = 49152;
export const D3DSI_COMMENTSIZE_SHIFT = 16;
export const D3DSI_COMMENTSIZE_MASK = 2147418112;
export const D3DPRESENT_RATE_DEFAULT = 0;
export const D3DPRESENTFLAG_LOCKABLE_BACKBUFFER = 1;
export const D3DPRESENTFLAG_DISCARD_DEPTHSTENCIL = 2;
export const D3DPRESENTFLAG_DEVICECLIP = 4;
export const D3DPRESENTFLAG_VIDEO = 16;
export const D3DPRESENTFLAG_NOAUTOROTATE = 32;
export const D3DPRESENTFLAG_UNPRUNEDMODE = 64;
export const D3DPRESENTFLAG_OVERLAY_LIMITEDRGB = 128;
export const D3DPRESENTFLAG_OVERLAY_YCbCr_BT709 = 256;
export const D3DPRESENTFLAG_OVERLAY_YCbCr_xvYCC = 512;
export const D3DPRESENTFLAG_RESTRICTED_CONTENT = 1024;
export const D3DPRESENTFLAG_RESTRICT_SHARED_RESOURCE_DRIVER = 2048;
export const D3DUSAGE_RENDERTARGET = 1;
export const D3DUSAGE_DEPTHSTENCIL = 2;
export const D3DUSAGE_DYNAMIC = 512;
export const D3DUSAGE_NONSECURE = 8388608;
export const D3DUSAGE_AUTOGENMIPMAP = 1024;
export const D3DUSAGE_DMAP = 16384;
export const D3DUSAGE_QUERY_LEGACYBUMPMAP = 32768;
export const D3DUSAGE_QUERY_SRGBREAD = 65536;
export const D3DUSAGE_QUERY_FILTER = 131072;
export const D3DUSAGE_QUERY_SRGBWRITE = 262144;
export const D3DUSAGE_QUERY_POSTPIXELSHADER_BLENDING = 524288;
export const D3DUSAGE_QUERY_VERTEXTEXTURE = 1048576;
export const D3DUSAGE_QUERY_WRAPANDMIP = 2097152;
export const D3DUSAGE_WRITEONLY = 8;
export const D3DUSAGE_SOFTWAREPROCESSING = 16;
export const D3DUSAGE_DONOTCLIP = 32;
export const D3DUSAGE_POINTS = 64;
export const D3DUSAGE_RTPATCHES = 128;
export const D3DUSAGE_NPATCHES = 256;
export const D3DUSAGE_TEXTAPI = 268435456;
export const D3DUSAGE_RESTRICTED_CONTENT = 2048;
export const D3DUSAGE_RESTRICT_SHARED_RESOURCE = 8192;
export const D3DUSAGE_RESTRICT_SHARED_RESOURCE_DRIVER = 4096;
export const D3DLOCK_READONLY = 16;
export const D3DLOCK_DISCARD = 8192;
export const D3DLOCK_NOOVERWRITE = 4096;
export const D3DLOCK_NOSYSLOCK = 2048;
export const D3DLOCK_DONOTWAIT = 16384;
export const D3DLOCK_NO_DIRTY_UPDATE = 32768;
export const MAX_DEVICE_IDENTIFIER_STRING = 512;
export const D3DISSUE_END = 1;
export const D3DISSUE_BEGIN = 2;
export const D3DGETDATA_FLUSH = 1;
export const D3DCOMPOSERECTS_MAXNUMRECTS = 65535;
export const D3DCONVOLUTIONMONO_MAXWIDTH = 7;
export const D3DCONVOLUTIONMONO_MAXHEIGHT = 7;
export const D3DFMT_A1_SURFACE_MAXWIDTH = 8192;
export const D3DFMT_A1_SURFACE_MAXHEIGHT = 2048;
export const D3D9_RESOURCE_PRIORITY_MINIMUM = 671088640;
export const D3D9_RESOURCE_PRIORITY_LOW = 1342177280;
export const D3D9_RESOURCE_PRIORITY_NORMAL = 2013265920;
export const D3D9_RESOURCE_PRIORITY_HIGH = 2684354560;
export const D3D9_RESOURCE_PRIORITY_MAXIMUM = 3355443200;
export const D3D_OMAC_SIZE = 16;
export const D3DVS20CAPS_PREDICATION = 1;
export const D3DVS20_MAX_DYNAMICFLOWCONTROLDEPTH = 24;
export const D3DVS20_MIN_DYNAMICFLOWCONTROLDEPTH = 0;
export const D3DVS20_MAX_NUMTEMPS = 32;
export const D3DVS20_MIN_NUMTEMPS = 12;
export const D3DVS20_MAX_STATICFLOWCONTROLDEPTH = 4;
export const D3DVS20_MIN_STATICFLOWCONTROLDEPTH = 1;
export const D3DPS20CAPS_ARBITRARYSWIZZLE = 1;
export const D3DPS20CAPS_GRADIENTINSTRUCTIONS = 2;
export const D3DPS20CAPS_PREDICATION = 4;
export const D3DPS20CAPS_NODEPENDENTREADLIMIT = 8;
export const D3DPS20CAPS_NOTEXINSTRUCTIONLIMIT = 16;
export const D3DPS20_MAX_DYNAMICFLOWCONTROLDEPTH = 24;
export const D3DPS20_MIN_DYNAMICFLOWCONTROLDEPTH = 0;
export const D3DPS20_MAX_NUMTEMPS = 32;
export const D3DPS20_MIN_NUMTEMPS = 12;
export const D3DPS20_MAX_STATICFLOWCONTROLDEPTH = 4;
export const D3DPS20_MIN_STATICFLOWCONTROLDEPTH = 0;
export const D3DPS20_MAX_NUMINSTRUCTIONSLOTS = 512;
export const D3DPS20_MIN_NUMINSTRUCTIONSLOTS = 96;
export const D3DMIN30SHADERINSTRUCTIONS = 512;
export const D3DMAX30SHADERINSTRUCTIONS = 32768;
export const D3DOVERLAYCAPS_FULLRANGERGB = 1;
export const D3DOVERLAYCAPS_LIMITEDRANGERGB = 2;
export const D3DOVERLAYCAPS_YCbCr_BT601 = 4;
export const D3DOVERLAYCAPS_YCbCr_BT709 = 8;
export const D3DOVERLAYCAPS_YCbCr_BT601_xvYCC = 16;
export const D3DOVERLAYCAPS_YCbCr_BT709_xvYCC = 32;
export const D3DOVERLAYCAPS_STRETCHX = 64;
export const D3DOVERLAYCAPS_STRETCHY = 128;
export const D3DCPCAPS_SOFTWARE = 1;
export const D3DCPCAPS_HARDWARE = 2;
export const D3DCPCAPS_PROTECTIONALWAYSON = 4;
export const D3DCPCAPS_PARTIALDECRYPTION = 8;
export const D3DCPCAPS_CONTENTKEY = 16;
export const D3DCPCAPS_FRESHENSESSIONKEY = 32;
export const D3DCPCAPS_ENCRYPTEDREADBACK = 64;
export const D3DCPCAPS_ENCRYPTEDREADBACKKEY = 128;
export const D3DCPCAPS_SEQUENTIAL_CTR_IV = 256;
export const D3DCPCAPS_ENCRYPTSLICEDATAONLY = 512;
export const D3DCAPS_OVERLAY = 2048;
export const D3DCAPS_READ_SCANLINE = 131072;
export const D3DCAPS2_FULLSCREENGAMMA = 131072;
export const D3DCAPS2_CANCALIBRATEGAMMA = 1048576;
export const D3DCAPS2_RESERVED = 33554432;
export const D3DCAPS2_CANMANAGERESOURCE = 268435456;
export const D3DCAPS2_DYNAMICTEXTURES = 536870912;
export const D3DCAPS2_CANAUTOGENMIPMAP = 1073741824;
export const D3DCAPS2_CANSHARERESOURCE = `-2147483648`;
export const D3DCAPS3_RESERVED = `-2147483617`;
export const D3DCAPS3_ALPHA_FULLSCREEN_FLIP_OR_DISCARD = 32;
export const D3DCAPS3_LINEAR_TO_SRGB_PRESENTATION = 128;
export const D3DCAPS3_COPY_TO_VIDMEM = 256;
export const D3DCAPS3_COPY_TO_SYSTEMMEM = 512;
export const D3DCAPS3_DXVAHD = 1024;
export const D3DCAPS3_DXVAHD_LIMITED = 2048;
export const D3DPRESENT_INTERVAL_DEFAULT = 0;
export const D3DPRESENT_INTERVAL_ONE = 1;
export const D3DPRESENT_INTERVAL_TWO = 2;
export const D3DPRESENT_INTERVAL_THREE = 4;
export const D3DPRESENT_INTERVAL_FOUR = 8;
export const D3DPRESENT_INTERVAL_IMMEDIATE = `-2147483648`;
export const D3DCURSORCAPS_COLOR = 1;
export const D3DCURSORCAPS_LOWRES = 2;
export const D3DDEVCAPS_PUREDEVICE = 1048576;
export const D3DDEVCAPS_QUINTICRTPATCHES = 2097152;
export const D3DDEVCAPS_RTPATCHES = 4194304;
export const D3DDEVCAPS_RTPATCHHANDLEZERO = 8388608;
export const D3DDEVCAPS_NPATCHES = 16777216;
export const D3DPMISCCAPS_COLORWRITEENABLE = 128;
export const D3DPMISCCAPS_CLIPPLANESCALEDPOINTS = 256;
export const D3DPMISCCAPS_CLIPTLVERTS = 512;
export const D3DPMISCCAPS_TSSARGTEMP = 1024;
export const D3DPMISCCAPS_BLENDOP = 2048;
export const D3DPMISCCAPS_NULLREFERENCE = 4096;
export const D3DPMISCCAPS_INDEPENDENTWRITEMASKS = 16384;
export const D3DPMISCCAPS_PERSTAGECONSTANT = 32768;
export const D3DPMISCCAPS_FOGANDSPECULARALPHA = 65536;
export const D3DPMISCCAPS_SEPARATEALPHABLEND = 131072;
export const D3DPMISCCAPS_MRTINDEPENDENTBITDEPTHS = 262144;
export const D3DPMISCCAPS_MRTPOSTPIXELSHADERBLENDING = 524288;
export const D3DPMISCCAPS_FOGVERTEXCLAMPED = 1048576;
export const D3DPMISCCAPS_POSTBLENDSRGBCONVERT = 2097152;
export const D3DLINECAPS_TEXTURE = 1;
export const D3DLINECAPS_ZTEST = 2;
export const D3DLINECAPS_BLEND = 4;
export const D3DLINECAPS_ALPHACMP = 8;
export const D3DLINECAPS_FOG = 16;
export const D3DLINECAPS_ANTIALIAS = 32;
export const D3DPRASTERCAPS_COLORPERSPECTIVE = 4194304;
export const D3DPRASTERCAPS_SCISSORTEST = 16777216;
export const D3DPRASTERCAPS_SLOPESCALEDEPTHBIAS = 33554432;
export const D3DPRASTERCAPS_DEPTHBIAS = 67108864;
export const D3DPRASTERCAPS_MULTISAMPLE_TOGGLE = 134217728;
export const D3DPBLENDCAPS_BLENDFACTOR = 8192;
export const D3DPBLENDCAPS_SRCCOLOR2 = 16384;
export const D3DPBLENDCAPS_INVSRCCOLOR2 = 32768;
export const D3DPTEXTURECAPS_VOLUMEMAP = 8192;
export const D3DPTEXTURECAPS_MIPMAP = 16384;
export const D3DPTEXTURECAPS_MIPVOLUMEMAP = 32768;
export const D3DPTEXTURECAPS_MIPCUBEMAP = 65536;
export const D3DPTEXTURECAPS_CUBEMAP_POW2 = 131072;
export const D3DPTEXTURECAPS_VOLUMEMAP_POW2 = 262144;
export const D3DPTEXTURECAPS_NOPROJECTEDBUMPENV = 2097152;
export const D3DPTFILTERCAPS_MINFPYRAMIDALQUAD = 2048;
export const D3DPTFILTERCAPS_MINFGAUSSIANQUAD = 4096;
export const D3DPTFILTERCAPS_CONVOLUTIONMONO = 262144;
export const D3DPTFILTERCAPS_MAGFPYRAMIDALQUAD = 134217728;
export const D3DPTFILTERCAPS_MAGFGAUSSIANQUAD = 268435456;
export const D3DPTADDRESSCAPS_MIRRORONCE = 32;
export const D3DSTENCILCAPS_TWOSIDED = 256;
export const D3DTEXOPCAPS_MULTIPLYADD = 16777216;
export const D3DTEXOPCAPS_LERP = 33554432;
export const D3DFVFCAPS_PSIZE = 1048576;
export const D3DVTXPCAPS_TWEENING = 64;
export const D3DVTXPCAPS_TEXGEN_SPHEREMAP = 256;
export const D3DVTXPCAPS_NO_TEXGEN_NONLOCALVIEWER = 512;
export const D3DDEVCAPS2_STREAMOFFSET = 1;
export const D3DDEVCAPS2_DMAPNPATCH = 2;
export const D3DDEVCAPS2_ADAPTIVETESSRTPATCH = 4;
export const D3DDEVCAPS2_ADAPTIVETESSNPATCH = 8;
export const D3DDEVCAPS2_CAN_STRETCHRECT_FROM_TEXTURES = 16;
export const D3DDEVCAPS2_PRESAMPLEDDMAPNPATCH = 32;
export const D3DDEVCAPS2_VERTEXELEMENTSCANSHARESTREAMOFFSET = 64;
export const D3DDTCAPS_UBYTE4 = 1;
export const D3DDTCAPS_UBYTE4N = 2;
export const D3DDTCAPS_SHORT2N = 4;
export const D3DDTCAPS_SHORT4N = 8;
export const D3DDTCAPS_USHORT2N = 16;
export const D3DDTCAPS_USHORT4N = 32;
export const D3DDTCAPS_UDEC3 = 64;
export const D3DDTCAPS_DEC3N = 128;
export const D3DDTCAPS_FLOAT16_2 = 256;
export const D3DDTCAPS_FLOAT16_4 = 512;
export const D3DSPD_IUNKNOWN = 1;
export const D3DCREATE_FPU_PRESERVE = 2;
export const D3DCREATE_MULTITHREADED = 4;
export const D3DCREATE_PUREDEVICE = 16;
export const D3DCREATE_SOFTWARE_VERTEXPROCESSING = 32;
export const D3DCREATE_HARDWARE_VERTEXPROCESSING = 64;
export const D3DCREATE_MIXED_VERTEXPROCESSING = 128;
export const D3DCREATE_DISABLE_DRIVER_MANAGEMENT = 256;
export const D3DCREATE_ADAPTERGROUP_DEVICE = 512;
export const D3DADAPTER_DEFAULT = 0;
export const D3DENUM_NO_DRIVERVERSION = 4;
export const D3DPRESENT_BACK_BUFFERS_MAX = 3;
export const D3DSGR_NO_CALIBRATION = 0;
export const D3DSGR_CALIBRATE = 1;
export const D3DCURSOR_IMMEDIATE_UPDATE = 1;
export const D3DPRESENT_DONOTWAIT = 1;
export const D3DPRESENT_LINEAR_CONTENT = 2;
export const _FACD3D = 2166;
export const D3D_SDK_VERSION = 32;
export const D3D9b_SDK_VERSION = 31;
export const D3DCREATE_DISABLE_DRIVER_MANAGEMENT_EX = 1024;
export const D3DCREATE_NOWINDOWCHANGES = 2048;
export const D3DCREATE_DISABLE_PSGP_THREADING = 8192;
export const D3DCREATE_ENABLE_PRESENTSTATS = 16384;
export const D3DCREATE_DISABLE_PRINTSCREEN = 32768;
export const D3DCREATE_SCREENSAVER = 268435456;
export const D3DENUM_WHQL_LEVEL = 2;
export const D3DPRESENT_BACK_BUFFERS_MAX_EX = 30;
export const D3DPRESENT_DONOTFLIP = 4;
export const D3DPRESENT_FLIPRESTART = 8;
export const D3DPRESENT_VIDEO_RESTRICT_TO_MONITOR = 16;
export const D3DPRESENT_UPDATEOVERLAYONLY = 32;
export const D3DPRESENT_HIDEOVERLAY = 64;
export const D3DPRESENT_UPDATECOLORKEY = 128;
export const D3DPRESENT_FORCEIMMEDIATE = 256;
export const DXC_CP_ACP = 0;
export const DXC_CP_UTF16 = 1200;
export const DXC_CP_UTF8 = 65001;
export const D3D_FL9_1_REQ_TEXTURE1D_U_DIMENSION = 2048;
export const D3D_FL9_3_REQ_TEXTURE1D_U_DIMENSION = 4096;
export const D3D_FL9_1_REQ_TEXTURE2D_U_OR_V_DIMENSION = 2048;
export const D3D_FL9_3_REQ_TEXTURE2D_U_OR_V_DIMENSION = 4096;
export const D3D_FL9_1_REQ_TEXTURECUBE_DIMENSION = 512;
export const D3D_FL9_3_REQ_TEXTURECUBE_DIMENSION = 4096;
export const D3D_FL9_1_REQ_TEXTURE3D_U_V_OR_W_DIMENSION = 256;
export const D3D_FL9_1_DEFAULT_MAX_ANISOTROPY = 2;
export const D3D_FL9_1_IA_PRIMITIVE_MAX_COUNT = 65535;
export const D3D_FL9_2_IA_PRIMITIVE_MAX_COUNT = 1048575;
export const D3D_FL9_1_SIMULTANEOUS_RENDER_TARGET_COUNT = 1;
export const D3D_FL9_3_SIMULTANEOUS_RENDER_TARGET_COUNT = 4;
export const D3D_FL9_1_MAX_TEXTURE_REPEAT = 128;
export const D3D_FL9_2_MAX_TEXTURE_REPEAT = 2048;
export const D3D_FL9_3_MAX_TEXTURE_REPEAT = 8192;
export const D3D_SHADER_FEATURE_DOUBLES = 1;
export const D3D_SHADER_FEATURE_COMPUTE_SHADERS_PLUS_RAW_AND_STRUCTURED_BUFFERS_VIA_SHADER_4_X = 2;
export const D3D_SHADER_FEATURE_UAVS_AT_EVERY_STAGE = 4;
export const D3D_SHADER_FEATURE_64_UAVS = 8;
export const D3D_SHADER_FEATURE_MINIMUM_PRECISION = 16;
export const D3D_SHADER_FEATURE_11_1_DOUBLE_EXTENSIONS = 32;
export const D3D_SHADER_FEATURE_11_1_SHADER_EXTENSIONS = 64;
export const D3D_SHADER_FEATURE_LEVEL_9_COMPARISON_FILTERING = 128;
export const D3D_SHADER_FEATURE_TILED_RESOURCES = 256;
export const D3D_SHADER_FEATURE_STENCIL_REF = 512;
export const D3D_SHADER_FEATURE_INNER_COVERAGE = 1024;
export const D3D_SHADER_FEATURE_TYPED_UAV_LOAD_ADDITIONAL_FORMATS = 2048;
export const D3D_SHADER_FEATURE_ROVS = 4096;
export const D3D_SHADER_FEATURE_VIEWPORT_AND_RT_ARRAY_INDEX_FROM_ANY_SHADER_FEEDING_RASTERIZER = 8192;
export const D3D_SHADER_FEATURE_WAVE_OPS = 16384;
export const D3D_SHADER_FEATURE_INT64_OPS = 32768;
export const D3D_SHADER_FEATURE_VIEW_ID = 65536;
export const D3D_SHADER_FEATURE_BARYCENTRICS = 131072;
export const D3D_SHADER_FEATURE_NATIVE_16BIT_OPS = 262144;
export const D3D_SHADER_FEATURE_SHADING_RATE = 524288;
export const D3D_SHADER_FEATURE_RAYTRACING_TIER_1_1 = 1048576;
export const D3D_SHADER_FEATURE_SAMPLER_FEEDBACK = 2097152;
export const D3D_SHADER_FEATURE_ATOMIC_INT64_ON_TYPED_RESOURCE = 4194304;
export const D3D_SHADER_FEATURE_ATOMIC_INT64_ON_GROUP_SHARED = 8388608;
export const D3D_SHADER_FEATURE_DERIVATIVES_IN_MESH_AND_AMPLIFICATION_SHADERS = 16777216;
export const D3D_SHADER_FEATURE_RESOURCE_DESCRIPTOR_HEAP_INDEXING = 33554432;
export const D3D_SHADER_FEATURE_SAMPLER_DESCRIPTOR_HEAP_INDEXING = 67108864;
export const D3D_SHADER_FEATURE_WAVE_MMA = 134217728;
export const D3D_SHADER_FEATURE_ATOMIC_INT64_ON_DESCRIPTOR_HEAP_RESOURCE = 268435456;
export const D3D_COMPONENT_MASK_X = 1;
export const D3D_COMPONENT_MASK_Y = 2;
export const D3D_COMPONENT_MASK_Z = 4;
export const D3D_COMPONENT_MASK_W = 8;
export const DXC_HASHFLAG_INCLUDES_SOURCE = 1;
export const DXC_ARG_DEBUG = `-Zi`;
export const DXC_ARG_SKIP_VALIDATION = `-Vd`;
export const DXC_ARG_SKIP_OPTIMIZATIONS = `-Od`;
export const DXC_ARG_PACK_MATRIX_ROW_MAJOR = `-Zpr`;
export const DXC_ARG_PACK_MATRIX_COLUMN_MAJOR = `-Zpc`;
export const DXC_ARG_AVOID_FLOW_CONTROL = `-Gfa`;
export const DXC_ARG_PREFER_FLOW_CONTROL = `-Gfp`;
export const DXC_ARG_ENABLE_STRICTNESS = `-Ges`;
export const DXC_ARG_ENABLE_BACKWARDS_COMPATIBILITY = `-Gec`;
export const DXC_ARG_IEEE_STRICTNESS = `-Gis`;
export const DXC_ARG_OPTIMIZATION_LEVEL0 = `-O0`;
export const DXC_ARG_OPTIMIZATION_LEVEL1 = `-O1`;
export const DXC_ARG_OPTIMIZATION_LEVEL2 = `-O2`;
export const DXC_ARG_OPTIMIZATION_LEVEL3 = `-O3`;
export const DXC_ARG_WARNINGS_ARE_ERRORS = `-WX`;
export const DXC_ARG_RESOURCES_MAY_ALIAS = `-res_may_alias`;
export const DXC_ARG_ALL_RESOURCES_BOUND = `-all_resources_bound`;
export const DXC_ARG_DEBUG_NAME_FOR_SOURCE = `-Zss`;
export const DXC_ARG_DEBUG_NAME_FOR_BINARY = `-Zsb`;
export const DXC_EXTRA_OUTPUT_NAME_STDOUT = `*stdout*`;
export const DXC_EXTRA_OUTPUT_NAME_STDERR = `*stderr*`;
export const DxcValidatorFlags_Default = 0;
export const DxcValidatorFlags_InPlaceEdit = 1;
export const DxcValidatorFlags_RootSignatureOnly = 2;
export const DxcValidatorFlags_ModuleOnly = 4;
export const DxcValidatorFlags_ValidMask = 7;
export const DxcVersionInfoFlags_None = 0;
export const DxcVersionInfoFlags_Debug = 1;
export const DxcVersionInfoFlags_Internal = 2;
export const D3DCOMPILER_DLL_W = `d3dcompiler_47.dll`;
export const D3DCOMPILER_DLL_A = `d3dcompiler_47.dll`;
export const D3D_COMPILER_VERSION = 47;
export const D3DCOMPILE_DEBUG = 1;
export const D3DCOMPILE_SKIP_VALIDATION = 2;
export const D3DCOMPILE_SKIP_OPTIMIZATION = 4;
export const D3DCOMPILE_PACK_MATRIX_ROW_MAJOR = 8;
export const D3DCOMPILE_PACK_MATRIX_COLUMN_MAJOR = 16;
export const D3DCOMPILE_PARTIAL_PRECISION = 32;
export const D3DCOMPILE_FORCE_VS_SOFTWARE_NO_OPT = 64;
export const D3DCOMPILE_FORCE_PS_SOFTWARE_NO_OPT = 128;
export const D3DCOMPILE_NO_PRESHADER = 256;
export const D3DCOMPILE_AVOID_FLOW_CONTROL = 512;
export const D3DCOMPILE_PREFER_FLOW_CONTROL = 1024;
export const D3DCOMPILE_ENABLE_STRICTNESS = 2048;
export const D3DCOMPILE_ENABLE_BACKWARDS_COMPATIBILITY = 4096;
export const D3DCOMPILE_IEEE_STRICTNESS = 8192;
export const D3DCOMPILE_OPTIMIZATION_LEVEL0 = 16384;
export const D3DCOMPILE_OPTIMIZATION_LEVEL1 = 0;
export const D3DCOMPILE_OPTIMIZATION_LEVEL3 = 32768;
export const D3DCOMPILE_RESERVED16 = 65536;
export const D3DCOMPILE_RESERVED17 = 131072;
export const D3DCOMPILE_WARNINGS_ARE_ERRORS = 262144;
export const D3DCOMPILE_RESOURCES_MAY_ALIAS = 524288;
export const D3DCOMPILE_ENABLE_UNBOUNDED_DESCRIPTOR_TABLES = 1048576;
export const D3DCOMPILE_ALL_RESOURCES_BOUND = 2097152;
export const D3DCOMPILE_DEBUG_NAME_FOR_SOURCE = 4194304;
export const D3DCOMPILE_DEBUG_NAME_FOR_BINARY = 8388608;
export const D3DCOMPILE_EFFECT_CHILD_EFFECT = 1;
export const D3DCOMPILE_EFFECT_ALLOW_SLOW_OPS = 2;
export const D3DCOMPILE_FLAGS2_FORCE_ROOT_SIGNATURE_LATEST = 0;
export const D3DCOMPILE_FLAGS2_FORCE_ROOT_SIGNATURE_1_0 = 16;
export const D3DCOMPILE_FLAGS2_FORCE_ROOT_SIGNATURE_1_1 = 32;
export const D3DCOMPILE_SECDATA_MERGE_UAV_SLOTS = 1;
export const D3DCOMPILE_SECDATA_PRESERVE_TEMPLATE_SLOTS = 2;
export const D3DCOMPILE_SECDATA_REQUIRE_TEMPLATE_MATCH = 4;
export const D3D_DISASM_ENABLE_COLOR_CODE = 1;
export const D3D_DISASM_ENABLE_DEFAULT_VALUE_PRINTS = 2;
export const D3D_DISASM_ENABLE_INSTRUCTION_NUMBERING = 4;
export const D3D_DISASM_ENABLE_INSTRUCTION_CYCLE = 8;
export const D3D_DISASM_DISABLE_DEBUG_INFO = 16;
export const D3D_DISASM_ENABLE_INSTRUCTION_OFFSET = 32;
export const D3D_DISASM_INSTRUCTION_ONLY = 64;
export const D3D_DISASM_PRINT_HEX_LITERALS = 128;
export const D3D_GET_INST_OFFSETS_INCLUDE_NON_EXECUTABLE = 1;
export const D3D_COMPRESS_SHADER_KEEP_ALL_PARTS = 1;
export const D3D10_16BIT_INDEX_STRIP_CUT_VALUE = 65535;
export const D3D10_32BIT_INDEX_STRIP_CUT_VALUE = 4294967295;
export const D3D10_8BIT_INDEX_STRIP_CUT_VALUE = 255;
export const D3D10_ARRAY_AXIS_ADDRESS_RANGE_BIT_COUNT = 9;
export const D3D10_CLIP_OR_CULL_DISTANCE_COUNT = 8;
export const D3D10_CLIP_OR_CULL_DISTANCE_ELEMENT_COUNT = 2;
export const D3D10_COMMONSHADER_CONSTANT_BUFFER_API_SLOT_COUNT = 14;
export const D3D10_COMMONSHADER_CONSTANT_BUFFER_COMPONENTS = 4;
export const D3D10_COMMONSHADER_CONSTANT_BUFFER_COMPONENT_BIT_COUNT = 32;
export const D3D10_COMMONSHADER_CONSTANT_BUFFER_HW_SLOT_COUNT = 15;
export const D3D10_COMMONSHADER_CONSTANT_BUFFER_REGISTER_COMPONENTS = 4;
export const D3D10_COMMONSHADER_CONSTANT_BUFFER_REGISTER_COUNT = 15;
export const D3D10_COMMONSHADER_CONSTANT_BUFFER_REGISTER_READS_PER_INST = 1;
export const D3D10_COMMONSHADER_CONSTANT_BUFFER_REGISTER_READ_PORTS = 1;
export const D3D10_COMMONSHADER_FLOWCONTROL_NESTING_LIMIT = 64;
export const D3D10_COMMONSHADER_IMMEDIATE_CONSTANT_BUFFER_REGISTER_COMPONENTS = 4;
export const D3D10_COMMONSHADER_IMMEDIATE_CONSTANT_BUFFER_REGISTER_COUNT = 1;
export const D3D10_COMMONSHADER_IMMEDIATE_CONSTANT_BUFFER_REGISTER_READS_PER_INST = 1;
export const D3D10_COMMONSHADER_IMMEDIATE_CONSTANT_BUFFER_REGISTER_READ_PORTS = 1;
export const D3D10_COMMONSHADER_IMMEDIATE_VALUE_COMPONENT_BIT_COUNT = 32;
export const D3D10_COMMONSHADER_INPUT_RESOURCE_REGISTER_COMPONENTS = 1;
export const D3D10_COMMONSHADER_INPUT_RESOURCE_REGISTER_COUNT = 128;
export const D3D10_COMMONSHADER_INPUT_RESOURCE_REGISTER_READS_PER_INST = 1;
export const D3D10_COMMONSHADER_INPUT_RESOURCE_REGISTER_READ_PORTS = 1;
export const D3D10_COMMONSHADER_INPUT_RESOURCE_SLOT_COUNT = 128;
export const D3D10_COMMONSHADER_SAMPLER_REGISTER_COMPONENTS = 1;
export const D3D10_COMMONSHADER_SAMPLER_REGISTER_COUNT = 16;
export const D3D10_COMMONSHADER_SAMPLER_REGISTER_READS_PER_INST = 1;
export const D3D10_COMMONSHADER_SAMPLER_REGISTER_READ_PORTS = 1;
export const D3D10_COMMONSHADER_SAMPLER_SLOT_COUNT = 16;
export const D3D10_COMMONSHADER_SUBROUTINE_NESTING_LIMIT = 32;
export const D3D10_COMMONSHADER_TEMP_REGISTER_COMPONENTS = 4;
export const D3D10_COMMONSHADER_TEMP_REGISTER_COMPONENT_BIT_COUNT = 32;
export const D3D10_COMMONSHADER_TEMP_REGISTER_COUNT = 4096;
export const D3D10_COMMONSHADER_TEMP_REGISTER_READS_PER_INST = 3;
export const D3D10_COMMONSHADER_TEMP_REGISTER_READ_PORTS = 3;
export const D3D10_COMMONSHADER_TEXCOORD_RANGE_REDUCTION_MAX = 10;
export const D3D10_COMMONSHADER_TEXCOORD_RANGE_REDUCTION_MIN = `-10`;
export const D3D10_COMMONSHADER_TEXEL_OFFSET_MAX_NEGATIVE = `-8`;
export const D3D10_COMMONSHADER_TEXEL_OFFSET_MAX_POSITIVE = 7;
export const D3D10_DEFAULT_BLEND_FACTOR_ALPHA = 1;
export const D3D10_DEFAULT_BLEND_FACTOR_BLUE = 1;
export const D3D10_DEFAULT_BLEND_FACTOR_GREEN = 1;
export const D3D10_DEFAULT_BLEND_FACTOR_RED = 1;
export const D3D10_DEFAULT_BORDER_COLOR_COMPONENT = 0;
export const D3D10_DEFAULT_DEPTH_BIAS = 0;
export const D3D10_DEFAULT_DEPTH_BIAS_CLAMP = 0;
export const D3D10_DEFAULT_MAX_ANISOTROPY = 16;
export const D3D10_DEFAULT_MIP_LOD_BIAS = 0;
export const D3D10_DEFAULT_RENDER_TARGET_ARRAY_INDEX = 0;
export const D3D10_DEFAULT_SAMPLE_MASK = 4294967295;
export const D3D10_DEFAULT_SCISSOR_ENDX = 0;
export const D3D10_DEFAULT_SCISSOR_ENDY = 0;
export const D3D10_DEFAULT_SCISSOR_STARTX = 0;
export const D3D10_DEFAULT_SCISSOR_STARTY = 0;
export const D3D10_DEFAULT_SLOPE_SCALED_DEPTH_BIAS = 0;
export const D3D10_DEFAULT_STENCIL_READ_MASK = 255;
export const D3D10_DEFAULT_STENCIL_REFERENCE = 0;
export const D3D10_DEFAULT_STENCIL_WRITE_MASK = 255;
export const D3D10_DEFAULT_VIEWPORT_AND_SCISSORRECT_INDEX = 0;
export const D3D10_DEFAULT_VIEWPORT_HEIGHT = 0;
export const D3D10_DEFAULT_VIEWPORT_MAX_DEPTH = 0;
export const D3D10_DEFAULT_VIEWPORT_MIN_DEPTH = 0;
export const D3D10_DEFAULT_VIEWPORT_TOPLEFTX = 0;
export const D3D10_DEFAULT_VIEWPORT_TOPLEFTY = 0;
export const D3D10_DEFAULT_VIEWPORT_WIDTH = 0;
export const D3D10_FLOAT16_FUSED_TOLERANCE_IN_ULP = `0.6`;
export const D3D10_FLOAT32_MAX = `3.4028234663852886e+38`;
export const D3D10_FLOAT32_TO_INTEGER_TOLERANCE_IN_ULP = `0.6000000238418579`;
export const D3D10_FLOAT_TO_SRGB_EXPONENT_DENOMINATOR = `2.4000000953674316`;
export const D3D10_FLOAT_TO_SRGB_EXPONENT_NUMERATOR = 1;
export const D3D10_FLOAT_TO_SRGB_OFFSET = `0.054999999701976776`;
export const D3D10_FLOAT_TO_SRGB_SCALE_1 = `12.920000076293945`;
export const D3D10_FLOAT_TO_SRGB_SCALE_2 = `1.0549999475479126`;
export const D3D10_FLOAT_TO_SRGB_THRESHOLD = `0.0031308000907301903`;
export const D3D10_FTOI_INSTRUCTION_MAX_INPUT = 2147483648;
export const D3D10_FTOI_INSTRUCTION_MIN_INPUT = `-2147483648`;
export const D3D10_FTOU_INSTRUCTION_MAX_INPUT = 4294967296;
export const D3D10_FTOU_INSTRUCTION_MIN_INPUT = 0;
export const D3D10_GS_INPUT_PRIM_CONST_REGISTER_COMPONENTS = 1;
export const D3D10_GS_INPUT_PRIM_CONST_REGISTER_COMPONENT_BIT_COUNT = 32;
export const D3D10_GS_INPUT_PRIM_CONST_REGISTER_COUNT = 1;
export const D3D10_GS_INPUT_PRIM_CONST_REGISTER_READS_PER_INST = 2;
export const D3D10_GS_INPUT_PRIM_CONST_REGISTER_READ_PORTS = 1;
export const D3D10_GS_INPUT_REGISTER_COMPONENTS = 4;
export const D3D10_GS_INPUT_REGISTER_COMPONENT_BIT_COUNT = 32;
export const D3D10_GS_INPUT_REGISTER_COUNT = 16;
export const D3D10_GS_INPUT_REGISTER_READS_PER_INST = 2;
export const D3D10_GS_INPUT_REGISTER_READ_PORTS = 1;
export const D3D10_GS_INPUT_REGISTER_VERTICES = 6;
export const D3D10_GS_OUTPUT_ELEMENTS = 32;
export const D3D10_GS_OUTPUT_REGISTER_COMPONENTS = 4;
export const D3D10_GS_OUTPUT_REGISTER_COMPONENT_BIT_COUNT = 32;
export const D3D10_GS_OUTPUT_REGISTER_COUNT = 32;
export const D3D10_IA_DEFAULT_INDEX_BUFFER_OFFSET_IN_BYTES = 0;
export const D3D10_IA_DEFAULT_PRIMITIVE_TOPOLOGY = 0;
export const D3D10_IA_DEFAULT_VERTEX_BUFFER_OFFSET_IN_BYTES = 0;
export const D3D10_IA_INDEX_INPUT_RESOURCE_SLOT_COUNT = 1;
export const D3D10_IA_INSTANCE_ID_BIT_COUNT = 32;
export const D3D10_IA_INTEGER_ARITHMETIC_BIT_COUNT = 32;
export const D3D10_IA_PRIMITIVE_ID_BIT_COUNT = 32;
export const D3D10_IA_VERTEX_ID_BIT_COUNT = 32;
export const D3D10_IA_VERTEX_INPUT_RESOURCE_SLOT_COUNT = 16;
export const D3D10_IA_VERTEX_INPUT_STRUCTURE_ELEMENTS_COMPONENTS = 64;
export const D3D10_IA_VERTEX_INPUT_STRUCTURE_ELEMENT_COUNT = 16;
export const D3D10_INTEGER_DIVIDE_BY_ZERO_QUOTIENT = 4294967295;
export const D3D10_INTEGER_DIVIDE_BY_ZERO_REMAINDER = 4294967295;
export const D3D10_LINEAR_GAMMA = 1;
export const D3D10_MAX_BORDER_COLOR_COMPONENT = 1;
export const D3D10_MAX_DEPTH = 1;
export const D3D10_MAX_MAXANISOTROPY = 16;
export const D3D10_MAX_MULTISAMPLE_SAMPLE_COUNT = 32;
export const D3D10_MAX_POSITION_VALUE = `3.4028235832468283e+34`;
export const D3D10_MAX_TEXTURE_DIMENSION_2_TO_EXP = 17;
export const D3D10_MIN_BORDER_COLOR_COMPONENT = 0;
export const D3D10_MIN_DEPTH = 0;
export const D3D10_MIN_MAXANISOTROPY = 0;
export const D3D10_MIP_LOD_BIAS_MAX = `15.989999771118164`;
export const D3D10_MIP_LOD_BIAS_MIN = `-16`;
export const D3D10_MIP_LOD_FRACTIONAL_BIT_COUNT = 6;
export const D3D10_MIP_LOD_RANGE_BIT_COUNT = 8;
export const D3D10_MULTISAMPLE_ANTIALIAS_LINE_WIDTH = `1.399999976158142`;
export const D3D10_NONSAMPLE_FETCH_OUT_OF_RANGE_ACCESS_RESULT = 0;
export const D3D10_PIXEL_ADDRESS_RANGE_BIT_COUNT = 13;
export const D3D10_PRE_SCISSOR_PIXEL_ADDRESS_RANGE_BIT_COUNT = 15;
export const D3D10_PS_FRONTFACING_DEFAULT_VALUE = 4294967295;
export const D3D10_PS_FRONTFACING_FALSE_VALUE = 0;
export const D3D10_PS_FRONTFACING_TRUE_VALUE = 4294967295;
export const D3D10_PS_INPUT_REGISTER_COMPONENTS = 4;
export const D3D10_PS_INPUT_REGISTER_COMPONENT_BIT_COUNT = 32;
export const D3D10_PS_INPUT_REGISTER_COUNT = 32;
export const D3D10_PS_INPUT_REGISTER_READS_PER_INST = 2;
export const D3D10_PS_INPUT_REGISTER_READ_PORTS = 1;
export const D3D10_PS_LEGACY_PIXEL_CENTER_FRACTIONAL_COMPONENT = 0;
export const D3D10_PS_OUTPUT_DEPTH_REGISTER_COMPONENTS = 1;
export const D3D10_PS_OUTPUT_DEPTH_REGISTER_COMPONENT_BIT_COUNT = 32;
export const D3D10_PS_OUTPUT_DEPTH_REGISTER_COUNT = 1;
export const D3D10_PS_OUTPUT_REGISTER_COMPONENTS = 4;
export const D3D10_PS_OUTPUT_REGISTER_COMPONENT_BIT_COUNT = 32;
export const D3D10_PS_OUTPUT_REGISTER_COUNT = 8;
export const D3D10_PS_PIXEL_CENTER_FRACTIONAL_COMPONENT = `0.5`;
export const D3D10_REQ_BLEND_OBJECT_COUNT_PER_CONTEXT = 4096;
export const D3D10_REQ_BUFFER_RESOURCE_TEXEL_COUNT_2_TO_EXP = 27;
export const D3D10_REQ_CONSTANT_BUFFER_ELEMENT_COUNT = 4096;
export const D3D10_REQ_DEPTH_STENCIL_OBJECT_COUNT_PER_CONTEXT = 4096;
export const D3D10_REQ_DRAWINDEXED_INDEX_COUNT_2_TO_EXP = 32;
export const D3D10_REQ_DRAW_VERTEX_COUNT_2_TO_EXP = 32;
export const D3D10_REQ_FILTERING_HW_ADDRESSABLE_RESOURCE_DIMENSION = 8192;
export const D3D10_REQ_GS_INVOCATION_32BIT_OUTPUT_COMPONENT_LIMIT = 1024;
export const D3D10_REQ_IMMEDIATE_CONSTANT_BUFFER_ELEMENT_COUNT = 4096;
export const D3D10_REQ_MAXANISOTROPY = 16;
export const D3D10_REQ_MIP_LEVELS = 14;
export const D3D10_REQ_MULTI_ELEMENT_STRUCTURE_SIZE_IN_BYTES = 2048;
export const D3D10_REQ_RASTERIZER_OBJECT_COUNT_PER_CONTEXT = 4096;
export const D3D10_REQ_RENDER_TO_BUFFER_WINDOW_WIDTH = 8192;
export const D3D10_REQ_RESOURCE_SIZE_IN_MEGABYTES = 128;
export const D3D10_REQ_RESOURCE_VIEW_COUNT_PER_CONTEXT_2_TO_EXP = 20;
export const D3D10_REQ_SAMPLER_OBJECT_COUNT_PER_CONTEXT = 4096;
export const D3D10_REQ_TEXTURE1D_ARRAY_AXIS_DIMENSION = 512;
export const D3D10_REQ_TEXTURE1D_U_DIMENSION = 8192;
export const D3D10_REQ_TEXTURE2D_ARRAY_AXIS_DIMENSION = 512;
export const D3D10_REQ_TEXTURE2D_U_OR_V_DIMENSION = 8192;
export const D3D10_REQ_TEXTURE3D_U_V_OR_W_DIMENSION = 2048;
export const D3D10_REQ_TEXTURECUBE_DIMENSION = 8192;
export const D3D10_RESINFO_INSTRUCTION_MISSING_COMPONENT_RETVAL = 0;
export const D3D10_SHADER_MAJOR_VERSION = 4;
export const D3D10_SHADER_MINOR_VERSION = 0;
export const D3D10_SHIFT_INSTRUCTION_PAD_VALUE = 0;
export const D3D10_SHIFT_INSTRUCTION_SHIFT_VALUE_BIT_COUNT = 5;
export const D3D10_SIMULTANEOUS_RENDER_TARGET_COUNT = 8;
export const D3D10_SO_BUFFER_MAX_STRIDE_IN_BYTES = 2048;
export const D3D10_SO_BUFFER_MAX_WRITE_WINDOW_IN_BYTES = 256;
export const D3D10_SO_BUFFER_SLOT_COUNT = 4;
export const D3D10_SO_DDI_REGISTER_INDEX_DENOTING_GAP = 4294967295;
export const D3D10_SO_MULTIPLE_BUFFER_ELEMENTS_PER_BUFFER = 1;
export const D3D10_SO_SINGLE_BUFFER_COMPONENT_LIMIT = 64;
export const D3D10_SRGB_GAMMA = `2.200000047683716`;
export const D3D10_SRGB_TO_FLOAT_DENOMINATOR_1 = `12.920000076293945`;
export const D3D10_SRGB_TO_FLOAT_DENOMINATOR_2 = `1.0549999475479126`;
export const D3D10_SRGB_TO_FLOAT_EXPONENT = `2.4000000953674316`;
export const D3D10_SRGB_TO_FLOAT_OFFSET = `0.054999999701976776`;
export const D3D10_SRGB_TO_FLOAT_THRESHOLD = `0.040449999272823334`;
export const D3D10_SRGB_TO_FLOAT_TOLERANCE_IN_ULP = `0.5`;
export const D3D10_STANDARD_COMPONENT_BIT_COUNT = 32;
export const D3D10_STANDARD_COMPONENT_BIT_COUNT_DOUBLED = 64;
export const D3D10_STANDARD_MAXIMUM_ELEMENT_ALIGNMENT_BYTE_MULTIPLE = 4;
export const D3D10_STANDARD_PIXEL_COMPONENT_COUNT = 128;
export const D3D10_STANDARD_PIXEL_ELEMENT_COUNT = 32;
export const D3D10_STANDARD_VECTOR_SIZE = 4;
export const D3D10_STANDARD_VERTEX_ELEMENT_COUNT = 16;
export const D3D10_STANDARD_VERTEX_TOTAL_COMPONENT_COUNT = 64;
export const D3D10_SUBPIXEL_FRACTIONAL_BIT_COUNT = 8;
export const D3D10_SUBTEXEL_FRACTIONAL_BIT_COUNT = 6;
export const D3D10_TEXEL_ADDRESS_RANGE_BIT_COUNT = 18;
export const D3D10_UNBOUND_MEMORY_ACCESS_RESULT = 0;
export const D3D10_VIEWPORT_AND_SCISSORRECT_MAX_INDEX = 15;
export const D3D10_VIEWPORT_AND_SCISSORRECT_OBJECT_COUNT_PER_PIPELINE = 16;
export const D3D10_VIEWPORT_BOUNDS_MAX = 16383;
export const D3D10_VIEWPORT_BOUNDS_MIN = `-16384`;
export const D3D10_VS_INPUT_REGISTER_COMPONENTS = 4;
export const D3D10_VS_INPUT_REGISTER_COMPONENT_BIT_COUNT = 32;
export const D3D10_VS_INPUT_REGISTER_COUNT = 16;
export const D3D10_VS_INPUT_REGISTER_READS_PER_INST = 2;
export const D3D10_VS_INPUT_REGISTER_READ_PORTS = 1;
export const D3D10_VS_OUTPUT_REGISTER_COMPONENTS = 4;
export const D3D10_VS_OUTPUT_REGISTER_COMPONENT_BIT_COUNT = 32;
export const D3D10_VS_OUTPUT_REGISTER_COUNT = 16;
export const D3D10_WHQL_CONTEXT_COUNT_FOR_RESOURCE_LIMIT = 10;
export const D3D10_WHQL_DRAWINDEXED_INDEX_COUNT_2_TO_EXP = 25;
export const D3D10_WHQL_DRAW_VERTEX_COUNT_2_TO_EXP = 25;
export const D3D_MAJOR_VERSION = 10;
export const D3D_MINOR_VERSION = 0;
export const D3D_SPEC_DATE_DAY = 8;
export const D3D_SPEC_DATE_MONTH = 8;
export const D3D_SPEC_DATE_YEAR = 2006;
export const D3D_SPEC_VERSION = `1.050005`;
export const D3D10_1_IA_VERTEX_INPUT_STRUCTURE_ELEMENT_COUNT = 16;
export const D3D10_1_IA_VERTEX_INPUT_RESOURCE_SLOT_COUNT = 16;
export const _FACD3D10 = 2169;
export const D3D10_APPEND_ALIGNED_ELEMENT = 4294967295;
export const D3D10_FILTER_TYPE_MASK = 3;
export const D3D10_MIN_FILTER_SHIFT = 4;
export const D3D10_MAG_FILTER_SHIFT = 2;
export const D3D10_MIP_FILTER_SHIFT = 0;
export const D3D10_COMPARISON_FILTERING_BIT = 128;
export const D3D10_ANISOTROPIC_FILTERING_BIT = 64;
export const D3D10_TEXT_1BIT_BIT = 2147483648;
export const D3D10_SDK_VERSION = 29;
export const D3D10_1_DEFAULT_SAMPLE_MASK = 4294967295;
export const D3D10_1_FLOAT16_FUSED_TOLERANCE_IN_ULP = `0.6`;
export const D3D10_1_FLOAT32_TO_INTEGER_TOLERANCE_IN_ULP = `0.6000000238418579`;
export const D3D10_1_GS_INPUT_REGISTER_COUNT = 32;
export const D3D10_1_IA_VERTEX_INPUT_STRUCTURE_ELEMENTS_COMPONENTS = 128;
export const D3D10_1_PS_OUTPUT_MASK_REGISTER_COMPONENTS = 1;
export const D3D10_1_PS_OUTPUT_MASK_REGISTER_COMPONENT_BIT_COUNT = 32;
export const D3D10_1_PS_OUTPUT_MASK_REGISTER_COUNT = 1;
export const D3D10_1_SHADER_MAJOR_VERSION = 4;
export const D3D10_1_SHADER_MINOR_VERSION = 1;
export const D3D10_1_SO_BUFFER_MAX_STRIDE_IN_BYTES = 2048;
export const D3D10_1_SO_BUFFER_MAX_WRITE_WINDOW_IN_BYTES = 256;
export const D3D10_1_SO_BUFFER_SLOT_COUNT = 4;
export const D3D10_1_SO_MULTIPLE_BUFFER_ELEMENTS_PER_BUFFER = 1;
export const D3D10_1_SO_SINGLE_BUFFER_COMPONENT_LIMIT = 64;
export const D3D10_1_STANDARD_VERTEX_ELEMENT_COUNT = 32;
export const D3D10_1_SUBPIXEL_FRACTIONAL_BIT_COUNT = 8;
export const D3D10_1_VS_INPUT_REGISTER_COUNT = 32;
export const D3D10_1_VS_OUTPUT_REGISTER_COUNT = 32;
export const D3D10_SDK_LAYERS_VERSION = 11;
export const D3D10_DEBUG_FEATURE_FLUSH_PER_RENDER_OP = 1;
export const D3D10_DEBUG_FEATURE_FINISH_PER_RENDER_OP = 2;
export const D3D10_DEBUG_FEATURE_PRESENT_PER_RENDER_OP = 4;
export const D3D10_REGKEY_PATH = `Software\\Microsoft\\Direct3D`;
export const D3D10_MUTE_DEBUG_OUTPUT = `MuteDebugOutput`;
export const D3D10_ENABLE_BREAK_ON_MESSAGE = `EnableBreakOnMessage`;
export const D3D10_INFOQUEUE_STORAGE_FILTER_OVERRIDE = `InfoQueueStorageFilterOverride`;
export const D3D10_MUTE_CATEGORY = `Mute_CATEGORY_%s`;
export const D3D10_MUTE_SEVERITY = `Mute_SEVERITY_%s`;
export const D3D10_MUTE_ID_STRING = `Mute_ID_%s`;
export const D3D10_MUTE_ID_DECIMAL = `Mute_ID_%d`;
export const D3D10_UNMUTE_SEVERITY_INFO = `Unmute_SEVERITY_INFO`;
export const D3D10_BREAKON_CATEGORY = `BreakOn_CATEGORY_%s`;
export const D3D10_BREAKON_SEVERITY = `BreakOn_SEVERITY_%s`;
export const D3D10_BREAKON_ID_STRING = `BreakOn_ID_%s`;
export const D3D10_BREAKON_ID_DECIMAL = `BreakOn_ID_%d`;
export const D3D10_APPSIZE_STRING = `Size`;
export const D3D10_APPNAME_STRING = `Name`;
export const D3D10_INFO_QUEUE_DEFAULT_MESSAGE_COUNT_LIMIT = 1024;
export const D3D10_SHADER_DEBUG = 1;
export const D3D10_SHADER_SKIP_VALIDATION = 2;
export const D3D10_SHADER_SKIP_OPTIMIZATION = 4;
export const D3D10_SHADER_PACK_MATRIX_ROW_MAJOR = 8;
export const D3D10_SHADER_PACK_MATRIX_COLUMN_MAJOR = 16;
export const D3D10_SHADER_PARTIAL_PRECISION = 32;
export const D3D10_SHADER_FORCE_VS_SOFTWARE_NO_OPT = 64;
export const D3D10_SHADER_FORCE_PS_SOFTWARE_NO_OPT = 128;
export const D3D10_SHADER_NO_PRESHADER = 256;
export const D3D10_SHADER_AVOID_FLOW_CONTROL = 512;
export const D3D10_SHADER_PREFER_FLOW_CONTROL = 1024;
export const D3D10_SHADER_ENABLE_STRICTNESS = 2048;
export const D3D10_SHADER_ENABLE_BACKWARDS_COMPATIBILITY = 4096;
export const D3D10_SHADER_IEEE_STRICTNESS = 8192;
export const D3D10_SHADER_WARNINGS_ARE_ERRORS = 262144;
export const D3D10_SHADER_RESOURCES_MAY_ALIAS = 524288;
export const D3D10_ENABLE_UNBOUNDED_DESCRIPTOR_TABLES = 1048576;
export const D3D10_ALL_RESOURCES_BOUND = 2097152;
export const D3D10_SHADER_DEBUG_NAME_FOR_SOURCE = 4194304;
export const D3D10_SHADER_DEBUG_NAME_FOR_BINARY = 8388608;
export const D3D10_SHADER_OPTIMIZATION_LEVEL0 = 16384;
export const D3D10_SHADER_OPTIMIZATION_LEVEL1 = 0;
export const D3D10_SHADER_OPTIMIZATION_LEVEL3 = 32768;
export const D3D10_SHADER_FLAGS2_FORCE_ROOT_SIGNATURE_LATEST = 0;
export const D3D10_SHADER_FLAGS2_FORCE_ROOT_SIGNATURE_1_0 = 16;
export const D3D10_SHADER_FLAGS2_FORCE_ROOT_SIGNATURE_1_1 = 32;
export const D3D10_EFFECT_COMPILE_CHILD_EFFECT = 1;
export const D3D10_EFFECT_COMPILE_ALLOW_SLOW_OPS = 2;
export const D3D10_EFFECT_SINGLE_THREADED = 8;
export const D3D10_EFFECT_VARIABLE_POOLED = 1;
export const D3D10_EFFECT_VARIABLE_ANNOTATION = 2;
export const D3D10_EFFECT_VARIABLE_EXPLICIT_BIND_POINT = 4;
export const MAX_D3D9ON12_QUEUES = 2;
export const D3D_DRIVER_TYPE_UNKNOWN = 0;
export const D3D_DRIVER_TYPE_HARDWARE = 1;
export const D3D_DRIVER_TYPE_REFERENCE = 2;
export const D3D_DRIVER_TYPE_NULL = 3;
export const D3D_DRIVER_TYPE_SOFTWARE = 4;
export const D3D_DRIVER_TYPE_WARP = 5;
export const D3D_FEATURE_LEVEL_1_0_CORE = 4096;
export const D3D_FEATURE_LEVEL_9_1 = 37120;
export const D3D_FEATURE_LEVEL_9_2 = 37376;
export const D3D_FEATURE_LEVEL_9_3 = 37632;
export const D3D_FEATURE_LEVEL_10_0 = 40960;
export const D3D_FEATURE_LEVEL_10_1 = 41216;
export const D3D_FEATURE_LEVEL_11_0 = 45056;
export const D3D_FEATURE_LEVEL_11_1 = 45312;
export const D3D_FEATURE_LEVEL_12_0 = 49152;
export const D3D_FEATURE_LEVEL_12_1 = 49408;
export const D3D_FEATURE_LEVEL_12_2 = 49664;
export const D3D_PRIMITIVE_TOPOLOGY_UNDEFINED = 0;
export const D3D_PRIMITIVE_TOPOLOGY_POINTLIST = 1;
export const D3D_PRIMITIVE_TOPOLOGY_LINELIST = 2;
export const D3D_PRIMITIVE_TOPOLOGY_LINESTRIP = 3;
export const D3D_PRIMITIVE_TOPOLOGY_TRIANGLELIST = 4;
export const D3D_PRIMITIVE_TOPOLOGY_TRIANGLESTRIP = 5;
export const D3D_PRIMITIVE_TOPOLOGY_LINELIST_ADJ = 10;
export const D3D_PRIMITIVE_TOPOLOGY_LINESTRIP_ADJ = 11;
export const D3D_PRIMITIVE_TOPOLOGY_TRIANGLELIST_ADJ = 12;
export const D3D_PRIMITIVE_TOPOLOGY_TRIANGLESTRIP_ADJ = 13;
export const D3D_PRIMITIVE_TOPOLOGY_1_CONTROL_POINT_PATCHLIST = 33;
export const D3D_PRIMITIVE_TOPOLOGY_2_CONTROL_POINT_PATCHLIST = 34;
export const D3D_PRIMITIVE_TOPOLOGY_3_CONTROL_POINT_PATCHLIST = 35;
export const D3D_PRIMITIVE_TOPOLOGY_4_CONTROL_POINT_PATCHLIST = 36;
export const D3D_PRIMITIVE_TOPOLOGY_5_CONTROL_POINT_PATCHLIST = 37;
export const D3D_PRIMITIVE_TOPOLOGY_6_CONTROL_POINT_PATCHLIST = 38;
export const D3D_PRIMITIVE_TOPOLOGY_7_CONTROL_POINT_PATCHLIST = 39;
export const D3D_PRIMITIVE_TOPOLOGY_8_CONTROL_POINT_PATCHLIST = 40;
export const D3D_PRIMITIVE_TOPOLOGY_9_CONTROL_POINT_PATCHLIST = 41;
export const D3D_PRIMITIVE_TOPOLOGY_10_CONTROL_POINT_PATCHLIST = 42;
export const D3D_PRIMITIVE_TOPOLOGY_11_CONTROL_POINT_PATCHLIST = 43;
export const D3D_PRIMITIVE_TOPOLOGY_12_CONTROL_POINT_PATCHLIST = 44;
export const D3D_PRIMITIVE_TOPOLOGY_13_CONTROL_POINT_PATCHLIST = 45;
export const D3D_PRIMITIVE_TOPOLOGY_14_CONTROL_POINT_PATCHLIST = 46;
export const D3D_PRIMITIVE_TOPOLOGY_15_CONTROL_POINT_PATCHLIST = 47;
export const D3D_PRIMITIVE_TOPOLOGY_16_CONTROL_POINT_PATCHLIST = 48;
export const D3D_PRIMITIVE_TOPOLOGY_17_CONTROL_POINT_PATCHLIST = 49;
export const D3D_PRIMITIVE_TOPOLOGY_18_CONTROL_POINT_PATCHLIST = 50;
export const D3D_PRIMITIVE_TOPOLOGY_19_CONTROL_POINT_PATCHLIST = 51;
export const D3D_PRIMITIVE_TOPOLOGY_20_CONTROL_POINT_PATCHLIST = 52;
export const D3D_PRIMITIVE_TOPOLOGY_21_CONTROL_POINT_PATCHLIST = 53;
export const D3D_PRIMITIVE_TOPOLOGY_22_CONTROL_POINT_PATCHLIST = 54;
export const D3D_PRIMITIVE_TOPOLOGY_23_CONTROL_POINT_PATCHLIST = 55;
export const D3D_PRIMITIVE_TOPOLOGY_24_CONTROL_POINT_PATCHLIST = 56;
export const D3D_PRIMITIVE_TOPOLOGY_25_CONTROL_POINT_PATCHLIST = 57;
export const D3D_PRIMITIVE_TOPOLOGY_26_CONTROL_POINT_PATCHLIST = 58;
export const D3D_PRIMITIVE_TOPOLOGY_27_CONTROL_POINT_PATCHLIST = 59;
export const D3D_PRIMITIVE_TOPOLOGY_28_CONTROL_POINT_PATCHLIST = 60;
export const D3D_PRIMITIVE_TOPOLOGY_29_CONTROL_POINT_PATCHLIST = 61;
export const D3D_PRIMITIVE_TOPOLOGY_30_CONTROL_POINT_PATCHLIST = 62;
export const D3D_PRIMITIVE_TOPOLOGY_31_CONTROL_POINT_PATCHLIST = 63;
export const D3D_PRIMITIVE_TOPOLOGY_32_CONTROL_POINT_PATCHLIST = 64;
export const D3D10_PRIMITIVE_TOPOLOGY_UNDEFINED = 0;
export const D3D10_PRIMITIVE_TOPOLOGY_POINTLIST = 1;
export const D3D10_PRIMITIVE_TOPOLOGY_LINELIST = 2;
export const D3D10_PRIMITIVE_TOPOLOGY_LINESTRIP = 3;
export const D3D10_PRIMITIVE_TOPOLOGY_TRIANGLELIST = 4;
export const D3D10_PRIMITIVE_TOPOLOGY_TRIANGLESTRIP = 5;
export const D3D10_PRIMITIVE_TOPOLOGY_LINELIST_ADJ = 10;
export const D3D10_PRIMITIVE_TOPOLOGY_LINESTRIP_ADJ = 11;
export const D3D10_PRIMITIVE_TOPOLOGY_TRIANGLELIST_ADJ = 12;
export const D3D10_PRIMITIVE_TOPOLOGY_TRIANGLESTRIP_ADJ = 13;
export const D3D11_PRIMITIVE_TOPOLOGY_UNDEFINED = 0;
export const D3D11_PRIMITIVE_TOPOLOGY_POINTLIST = 1;
export const D3D11_PRIMITIVE_TOPOLOGY_LINELIST = 2;
export const D3D11_PRIMITIVE_TOPOLOGY_LINESTRIP = 3;
export const D3D11_PRIMITIVE_TOPOLOGY_TRIANGLELIST = 4;
export const D3D11_PRIMITIVE_TOPOLOGY_TRIANGLESTRIP = 5;
export const D3D11_PRIMITIVE_TOPOLOGY_LINELIST_ADJ = 10;
export const D3D11_PRIMITIVE_TOPOLOGY_LINESTRIP_ADJ = 11;
export const D3D11_PRIMITIVE_TOPOLOGY_TRIANGLELIST_ADJ = 12;
export const D3D11_PRIMITIVE_TOPOLOGY_TRIANGLESTRIP_ADJ = 13;
export const D3D11_PRIMITIVE_TOPOLOGY_1_CONTROL_POINT_PATCHLIST = 33;
export const D3D11_PRIMITIVE_TOPOLOGY_2_CONTROL_POINT_PATCHLIST = 34;
export const D3D11_PRIMITIVE_TOPOLOGY_3_CONTROL_POINT_PATCHLIST = 35;
export const D3D11_PRIMITIVE_TOPOLOGY_4_CONTROL_POINT_PATCHLIST = 36;
export const D3D11_PRIMITIVE_TOPOLOGY_5_CONTROL_POINT_PATCHLIST = 37;
export const D3D11_PRIMITIVE_TOPOLOGY_6_CONTROL_POINT_PATCHLIST = 38;
export const D3D11_PRIMITIVE_TOPOLOGY_7_CONTROL_POINT_PATCHLIST = 39;
export const D3D11_PRIMITIVE_TOPOLOGY_8_CONTROL_POINT_PATCHLIST = 40;
export const D3D11_PRIMITIVE_TOPOLOGY_9_CONTROL_POINT_PATCHLIST = 41;
export const D3D11_PRIMITIVE_TOPOLOGY_10_CONTROL_POINT_PATCHLIST = 42;
export const D3D11_PRIMITIVE_TOPOLOGY_11_CONTROL_POINT_PATCHLIST = 43;
export const D3D11_PRIMITIVE_TOPOLOGY_12_CONTROL_POINT_PATCHLIST = 44;
export const D3D11_PRIMITIVE_TOPOLOGY_13_CONTROL_POINT_PATCHLIST = 45;
export const D3D11_PRIMITIVE_TOPOLOGY_14_CONTROL_POINT_PATCHLIST = 46;
export const D3D11_PRIMITIVE_TOPOLOGY_15_CONTROL_POINT_PATCHLIST = 47;
export const D3D11_PRIMITIVE_TOPOLOGY_16_CONTROL_POINT_PATCHLIST = 48;
export const D3D11_PRIMITIVE_TOPOLOGY_17_CONTROL_POINT_PATCHLIST = 49;
export const D3D11_PRIMITIVE_TOPOLOGY_18_CONTROL_POINT_PATCHLIST = 50;
export const D3D11_PRIMITIVE_TOPOLOGY_19_CONTROL_POINT_PATCHLIST = 51;
export const D3D11_PRIMITIVE_TOPOLOGY_20_CONTROL_POINT_PATCHLIST = 52;
export const D3D11_PRIMITIVE_TOPOLOGY_21_CONTROL_POINT_PATCHLIST = 53;
export const D3D11_PRIMITIVE_TOPOLOGY_22_CONTROL_POINT_PATCHLIST = 54;
export const D3D11_PRIMITIVE_TOPOLOGY_23_CONTROL_POINT_PATCHLIST = 55;
export const D3D11_PRIMITIVE_TOPOLOGY_24_CONTROL_POINT_PATCHLIST = 56;
export const D3D11_PRIMITIVE_TOPOLOGY_25_CONTROL_POINT_PATCHLIST = 57;
export const D3D11_PRIMITIVE_TOPOLOGY_26_CONTROL_POINT_PATCHLIST = 58;
export const D3D11_PRIMITIVE_TOPOLOGY_27_CONTROL_POINT_PATCHLIST = 59;
export const D3D11_PRIMITIVE_TOPOLOGY_28_CONTROL_POINT_PATCHLIST = 60;
export const D3D11_PRIMITIVE_TOPOLOGY_29_CONTROL_POINT_PATCHLIST = 61;
export const D3D11_PRIMITIVE_TOPOLOGY_30_CONTROL_POINT_PATCHLIST = 62;
export const D3D11_PRIMITIVE_TOPOLOGY_31_CONTROL_POINT_PATCHLIST = 63;
export const D3D11_PRIMITIVE_TOPOLOGY_32_CONTROL_POINT_PATCHLIST = 64;
export const D3D_PRIMITIVE_UNDEFINED = 0;
export const D3D_PRIMITIVE_POINT = 1;
export const D3D_PRIMITIVE_LINE = 2;
export const D3D_PRIMITIVE_TRIANGLE = 3;
export const D3D_PRIMITIVE_LINE_ADJ = 6;
export const D3D_PRIMITIVE_TRIANGLE_ADJ = 7;
export const D3D_PRIMITIVE_1_CONTROL_POINT_PATCH = 8;
export const D3D_PRIMITIVE_2_CONTROL_POINT_PATCH = 9;
export const D3D_PRIMITIVE_3_CONTROL_POINT_PATCH = 10;
export const D3D_PRIMITIVE_4_CONTROL_POINT_PATCH = 11;
export const D3D_PRIMITIVE_5_CONTROL_POINT_PATCH = 12;
export const D3D_PRIMITIVE_6_CONTROL_POINT_PATCH = 13;
export const D3D_PRIMITIVE_7_CONTROL_POINT_PATCH = 14;
export const D3D_PRIMITIVE_8_CONTROL_POINT_PATCH = 15;
export const D3D_PRIMITIVE_9_CONTROL_POINT_PATCH = 16;
export const D3D_PRIMITIVE_10_CONTROL_POINT_PATCH = 17;
export const D3D_PRIMITIVE_11_CONTROL_POINT_PATCH = 18;
export const D3D_PRIMITIVE_12_CONTROL_POINT_PATCH = 19;
export const D3D_PRIMITIVE_13_CONTROL_POINT_PATCH = 20;
export const D3D_PRIMITIVE_14_CONTROL_POINT_PATCH = 21;
export const D3D_PRIMITIVE_15_CONTROL_POINT_PATCH = 22;
export const D3D_PRIMITIVE_16_CONTROL_POINT_PATCH = 23;
export const D3D_PRIMITIVE_17_CONTROL_POINT_PATCH = 24;
export const D3D_PRIMITIVE_18_CONTROL_POINT_PATCH = 25;
export const D3D_PRIMITIVE_19_CONTROL_POINT_PATCH = 26;
export const D3D_PRIMITIVE_20_CONTROL_POINT_PATCH = 27;
export const D3D_PRIMITIVE_21_CONTROL_POINT_PATCH = 28;
export const D3D_PRIMITIVE_22_CONTROL_POINT_PATCH = 29;
export const D3D_PRIMITIVE_23_CONTROL_POINT_PATCH = 30;
export const D3D_PRIMITIVE_24_CONTROL_POINT_PATCH = 31;
export const D3D_PRIMITIVE_25_CONTROL_POINT_PATCH = 32;
export const D3D_PRIMITIVE_26_CONTROL_POINT_PATCH = 33;
export const D3D_PRIMITIVE_27_CONTROL_POINT_PATCH = 34;
export const D3D_PRIMITIVE_28_CONTROL_POINT_PATCH = 35;
export const D3D_PRIMITIVE_29_CONTROL_POINT_PATCH = 36;
export const D3D_PRIMITIVE_30_CONTROL_POINT_PATCH = 37;
export const D3D_PRIMITIVE_31_CONTROL_POINT_PATCH = 38;
export const D3D_PRIMITIVE_32_CONTROL_POINT_PATCH = 39;
export const D3D10_PRIMITIVE_UNDEFINED = 0;
export const D3D10_PRIMITIVE_POINT = 1;
export const D3D10_PRIMITIVE_LINE = 2;
export const D3D10_PRIMITIVE_TRIANGLE = 3;
export const D3D10_PRIMITIVE_LINE_ADJ = 6;
export const D3D10_PRIMITIVE_TRIANGLE_ADJ = 7;
export const D3D11_PRIMITIVE_UNDEFINED = 0;
export const D3D11_PRIMITIVE_POINT = 1;
export const D3D11_PRIMITIVE_LINE = 2;
export const D3D11_PRIMITIVE_TRIANGLE = 3;
export const D3D11_PRIMITIVE_LINE_ADJ = 6;
export const D3D11_PRIMITIVE_TRIANGLE_ADJ = 7;
export const D3D11_PRIMITIVE_1_CONTROL_POINT_PATCH = 8;
export const D3D11_PRIMITIVE_2_CONTROL_POINT_PATCH = 9;
export const D3D11_PRIMITIVE_3_CONTROL_POINT_PATCH = 10;
export const D3D11_PRIMITIVE_4_CONTROL_POINT_PATCH = 11;
export const D3D11_PRIMITIVE_5_CONTROL_POINT_PATCH = 12;
export const D3D11_PRIMITIVE_6_CONTROL_POINT_PATCH = 13;
export const D3D11_PRIMITIVE_7_CONTROL_POINT_PATCH = 14;
export const D3D11_PRIMITIVE_8_CONTROL_POINT_PATCH = 15;
export const D3D11_PRIMITIVE_9_CONTROL_POINT_PATCH = 16;
export const D3D11_PRIMITIVE_10_CONTROL_POINT_PATCH = 17;
export const D3D11_PRIMITIVE_11_CONTROL_POINT_PATCH = 18;
export const D3D11_PRIMITIVE_12_CONTROL_POINT_PATCH = 19;
export const D3D11_PRIMITIVE_13_CONTROL_POINT_PATCH = 20;
export const D3D11_PRIMITIVE_14_CONTROL_POINT_PATCH = 21;
export const D3D11_PRIMITIVE_15_CONTROL_POINT_PATCH = 22;
export const D3D11_PRIMITIVE_16_CONTROL_POINT_PATCH = 23;
export const D3D11_PRIMITIVE_17_CONTROL_POINT_PATCH = 24;
export const D3D11_PRIMITIVE_18_CONTROL_POINT_PATCH = 25;
export const D3D11_PRIMITIVE_19_CONTROL_POINT_PATCH = 26;
export const D3D11_PRIMITIVE_20_CONTROL_POINT_PATCH = 27;
export const D3D11_PRIMITIVE_21_CONTROL_POINT_PATCH = 28;
export const D3D11_PRIMITIVE_22_CONTROL_POINT_PATCH = 29;
export const D3D11_PRIMITIVE_23_CONTROL_POINT_PATCH = 30;
export const D3D11_PRIMITIVE_24_CONTROL_POINT_PATCH = 31;
export const D3D11_PRIMITIVE_25_CONTROL_POINT_PATCH = 32;
export const D3D11_PRIMITIVE_26_CONTROL_POINT_PATCH = 33;
export const D3D11_PRIMITIVE_27_CONTROL_POINT_PATCH = 34;
export const D3D11_PRIMITIVE_28_CONTROL_POINT_PATCH = 35;
export const D3D11_PRIMITIVE_29_CONTROL_POINT_PATCH = 36;
export const D3D11_PRIMITIVE_30_CONTROL_POINT_PATCH = 37;
export const D3D11_PRIMITIVE_31_CONTROL_POINT_PATCH = 38;
export const D3D11_PRIMITIVE_32_CONTROL_POINT_PATCH = 39;
export const D3D_SRV_DIMENSION_UNKNOWN = 0;
export const D3D_SRV_DIMENSION_BUFFER = 1;
export const D3D_SRV_DIMENSION_TEXTURE1D = 2;
export const D3D_SRV_DIMENSION_TEXTURE1DARRAY = 3;
export const D3D_SRV_DIMENSION_TEXTURE2D = 4;
export const D3D_SRV_DIMENSION_TEXTURE2DARRAY = 5;
export const D3D_SRV_DIMENSION_TEXTURE2DMS = 6;
export const D3D_SRV_DIMENSION_TEXTURE2DMSARRAY = 7;
export const D3D_SRV_DIMENSION_TEXTURE3D = 8;
export const D3D_SRV_DIMENSION_TEXTURECUBE = 9;
export const D3D_SRV_DIMENSION_TEXTURECUBEARRAY = 10;
export const D3D_SRV_DIMENSION_BUFFEREX = 11;
export const D3D10_SRV_DIMENSION_UNKNOWN = 0;
export const D3D10_SRV_DIMENSION_BUFFER = 1;
export const D3D10_SRV_DIMENSION_TEXTURE1D = 2;
export const D3D10_SRV_DIMENSION_TEXTURE1DARRAY = 3;
export const D3D10_SRV_DIMENSION_TEXTURE2D = 4;
export const D3D10_SRV_DIMENSION_TEXTURE2DARRAY = 5;
export const D3D10_SRV_DIMENSION_TEXTURE2DMS = 6;
export const D3D10_SRV_DIMENSION_TEXTURE2DMSARRAY = 7;
export const D3D10_SRV_DIMENSION_TEXTURE3D = 8;
export const D3D10_SRV_DIMENSION_TEXTURECUBE = 9;
export const D3D10_1_SRV_DIMENSION_UNKNOWN = 0;
export const D3D10_1_SRV_DIMENSION_BUFFER = 1;
export const D3D10_1_SRV_DIMENSION_TEXTURE1D = 2;
export const D3D10_1_SRV_DIMENSION_TEXTURE1DARRAY = 3;
export const D3D10_1_SRV_DIMENSION_TEXTURE2D = 4;
export const D3D10_1_SRV_DIMENSION_TEXTURE2DARRAY = 5;
export const D3D10_1_SRV_DIMENSION_TEXTURE2DMS = 6;
export const D3D10_1_SRV_DIMENSION_TEXTURE2DMSARRAY = 7;
export const D3D10_1_SRV_DIMENSION_TEXTURE3D = 8;
export const D3D10_1_SRV_DIMENSION_TEXTURECUBE = 9;
export const D3D10_1_SRV_DIMENSION_TEXTURECUBEARRAY = 10;
export const D3D11_SRV_DIMENSION_UNKNOWN = 0;
export const D3D11_SRV_DIMENSION_BUFFER = 1;
export const D3D11_SRV_DIMENSION_TEXTURE1D = 2;
export const D3D11_SRV_DIMENSION_TEXTURE1DARRAY = 3;
export const D3D11_SRV_DIMENSION_TEXTURE2D = 4;
export const D3D11_SRV_DIMENSION_TEXTURE2DARRAY = 5;
export const D3D11_SRV_DIMENSION_TEXTURE2DMS = 6;
export const D3D11_SRV_DIMENSION_TEXTURE2DMSARRAY = 7;
export const D3D11_SRV_DIMENSION_TEXTURE3D = 8;
export const D3D11_SRV_DIMENSION_TEXTURECUBE = 9;
export const D3D11_SRV_DIMENSION_TEXTURECUBEARRAY = 10;
export const D3D11_SRV_DIMENSION_BUFFEREX = 11;
export const D3D_INCLUDE_LOCAL = 0;
export const D3D_INCLUDE_SYSTEM = 1;
export const D3D10_INCLUDE_LOCAL = 0;
export const D3D10_INCLUDE_SYSTEM = 1;
export const D3D_INCLUDE_FORCE_DWORD = 2147483647;
export const D3D_SVC_SCALAR = 0;
export const D3D_SVC_VECTOR = 1;
export const D3D_SVC_MATRIX_ROWS = 2;
export const D3D_SVC_MATRIX_COLUMNS = 3;
export const D3D_SVC_OBJECT = 4;
export const D3D_SVC_STRUCT = 5;
export const D3D_SVC_INTERFACE_CLASS = 6;
export const D3D_SVC_INTERFACE_POINTER = 7;
export const D3D10_SVC_SCALAR = 0;
export const D3D10_SVC_VECTOR = 1;
export const D3D10_SVC_MATRIX_ROWS = 2;
export const D3D10_SVC_MATRIX_COLUMNS = 3;
export const D3D10_SVC_OBJECT = 4;
export const D3D10_SVC_STRUCT = 5;
export const D3D11_SVC_INTERFACE_CLASS = 6;
export const D3D11_SVC_INTERFACE_POINTER = 7;
export const D3D_SVC_FORCE_DWORD = 2147483647;
export const D3D_SVF_USERPACKED = 1;
export const D3D_SVF_USED = 2;
export const D3D_SVF_INTERFACE_POINTER = 4;
export const D3D_SVF_INTERFACE_PARAMETER = 8;
export const D3D10_SVF_USERPACKED = 1;
export const D3D10_SVF_USED = 2;
export const D3D11_SVF_INTERFACE_POINTER = 4;
export const D3D11_SVF_INTERFACE_PARAMETER = 8;
export const D3D_SVF_FORCE_DWORD = 2147483647;
export const D3D_SVT_VOID = 0;
export const D3D_SVT_BOOL = 1;
export const D3D_SVT_INT = 2;
export const D3D_SVT_FLOAT = 3;
export const D3D_SVT_STRING = 4;
export const D3D_SVT_TEXTURE = 5;
export const D3D_SVT_TEXTURE1D = 6;
export const D3D_SVT_TEXTURE2D = 7;
export const D3D_SVT_TEXTURE3D = 8;
export const D3D_SVT_TEXTURECUBE = 9;
export const D3D_SVT_SAMPLER = 10;
export const D3D_SVT_SAMPLER1D = 11;
export const D3D_SVT_SAMPLER2D = 12;
export const D3D_SVT_SAMPLER3D = 13;
export const D3D_SVT_SAMPLERCUBE = 14;
export const D3D_SVT_PIXELSHADER = 15;
export const D3D_SVT_VERTEXSHADER = 16;
export const D3D_SVT_PIXELFRAGMENT = 17;
export const D3D_SVT_VERTEXFRAGMENT = 18;
export const D3D_SVT_UINT = 19;
export const D3D_SVT_UINT8 = 20;
export const D3D_SVT_GEOMETRYSHADER = 21;
export const D3D_SVT_RASTERIZER = 22;
export const D3D_SVT_DEPTHSTENCIL = 23;
export const D3D_SVT_BLEND = 24;
export const D3D_SVT_BUFFER = 25;
export const D3D_SVT_CBUFFER = 26;
export const D3D_SVT_TBUFFER = 27;
export const D3D_SVT_TEXTURE1DARRAY = 28;
export const D3D_SVT_TEXTURE2DARRAY = 29;
export const D3D_SVT_RENDERTARGETVIEW = 30;
export const D3D_SVT_DEPTHSTENCILVIEW = 31;
export const D3D_SVT_TEXTURE2DMS = 32;
export const D3D_SVT_TEXTURE2DMSARRAY = 33;
export const D3D_SVT_TEXTURECUBEARRAY = 34;
export const D3D_SVT_HULLSHADER = 35;
export const D3D_SVT_DOMAINSHADER = 36;
export const D3D_SVT_INTERFACE_POINTER = 37;
export const D3D_SVT_COMPUTESHADER = 38;
export const D3D_SVT_DOUBLE = 39;
export const D3D_SVT_RWTEXTURE1D = 40;
export const D3D_SVT_RWTEXTURE1DARRAY = 41;
export const D3D_SVT_RWTEXTURE2D = 42;
export const D3D_SVT_RWTEXTURE2DARRAY = 43;
export const D3D_SVT_RWTEXTURE3D = 44;
export const D3D_SVT_RWBUFFER = 45;
export const D3D_SVT_BYTEADDRESS_BUFFER = 46;
export const D3D_SVT_RWBYTEADDRESS_BUFFER = 47;
export const D3D_SVT_STRUCTURED_BUFFER = 48;
export const D3D_SVT_RWSTRUCTURED_BUFFER = 49;
export const D3D_SVT_APPEND_STRUCTURED_BUFFER = 50;
export const D3D_SVT_CONSUME_STRUCTURED_BUFFER = 51;
export const D3D_SVT_MIN8FLOAT = 52;
export const D3D_SVT_MIN10FLOAT = 53;
export const D3D_SVT_MIN16FLOAT = 54;
export const D3D_SVT_MIN12INT = 55;
export const D3D_SVT_MIN16INT = 56;
export const D3D_SVT_MIN16UINT = 57;
export const D3D_SVT_INT16 = 58;
export const D3D_SVT_UINT16 = 59;
export const D3D_SVT_FLOAT16 = 60;
export const D3D_SVT_INT64 = 61;
export const D3D_SVT_UINT64 = 62;
export const D3D10_SVT_VOID = 0;
export const D3D10_SVT_BOOL = 1;
export const D3D10_SVT_INT = 2;
export const D3D10_SVT_FLOAT = 3;
export const D3D10_SVT_STRING = 4;
export const D3D10_SVT_TEXTURE = 5;
export const D3D10_SVT_TEXTURE1D = 6;
export const D3D10_SVT_TEXTURE2D = 7;
export const D3D10_SVT_TEXTURE3D = 8;
export const D3D10_SVT_TEXTURECUBE = 9;
export const D3D10_SVT_SAMPLER = 10;
export const D3D10_SVT_SAMPLER1D = 11;
export const D3D10_SVT_SAMPLER2D = 12;
export const D3D10_SVT_SAMPLER3D = 13;
export const D3D10_SVT_SAMPLERCUBE = 14;
export const D3D10_SVT_PIXELSHADER = 15;
export const D3D10_SVT_VERTEXSHADER = 16;
export const D3D10_SVT_PIXELFRAGMENT = 17;
export const D3D10_SVT_VERTEXFRAGMENT = 18;
export const D3D10_SVT_UINT = 19;
export const D3D10_SVT_UINT8 = 20;
export const D3D10_SVT_GEOMETRYSHADER = 21;
export const D3D10_SVT_RASTERIZER = 22;
export const D3D10_SVT_DEPTHSTENCIL = 23;
export const D3D10_SVT_BLEND = 24;
export const D3D10_SVT_BUFFER = 25;
export const D3D10_SVT_CBUFFER = 26;
export const D3D10_SVT_TBUFFER = 27;
export const D3D10_SVT_TEXTURE1DARRAY = 28;
export const D3D10_SVT_TEXTURE2DARRAY = 29;
export const D3D10_SVT_RENDERTARGETVIEW = 30;
export const D3D10_SVT_DEPTHSTENCILVIEW = 31;
export const D3D10_SVT_TEXTURE2DMS = 32;
export const D3D10_SVT_TEXTURE2DMSARRAY = 33;
export const D3D10_SVT_TEXTURECUBEARRAY = 34;
export const D3D11_SVT_HULLSHADER = 35;
export const D3D11_SVT_DOMAINSHADER = 36;
export const D3D11_SVT_INTERFACE_POINTER = 37;
export const D3D11_SVT_COMPUTESHADER = 38;
export const D3D11_SVT_DOUBLE = 39;
export const D3D11_SVT_RWTEXTURE1D = 40;
export const D3D11_SVT_RWTEXTURE1DARRAY = 41;
export const D3D11_SVT_RWTEXTURE2D = 42;
export const D3D11_SVT_RWTEXTURE2DARRAY = 43;
export const D3D11_SVT_RWTEXTURE3D = 44;
export const D3D11_SVT_RWBUFFER = 45;
export const D3D11_SVT_BYTEADDRESS_BUFFER = 46;
export const D3D11_SVT_RWBYTEADDRESS_BUFFER = 47;
export const D3D11_SVT_STRUCTURED_BUFFER = 48;
export const D3D11_SVT_RWSTRUCTURED_BUFFER = 49;
export const D3D11_SVT_APPEND_STRUCTURED_BUFFER = 50;
export const D3D11_SVT_CONSUME_STRUCTURED_BUFFER = 51;
export const D3D_SVT_FORCE_DWORD = 2147483647;
export const D3D_SIF_USERPACKED = 1;
export const D3D_SIF_COMPARISON_SAMPLER = 2;
export const D3D_SIF_TEXTURE_COMPONENT_0 = 4;
export const D3D_SIF_TEXTURE_COMPONENT_1 = 8;
export const D3D_SIF_TEXTURE_COMPONENTS = 12;
export const D3D_SIF_UNUSED = 16;
export const D3D10_SIF_USERPACKED = 1;
export const D3D10_SIF_COMPARISON_SAMPLER = 2;
export const D3D10_SIF_TEXTURE_COMPONENT_0 = 4;
export const D3D10_SIF_TEXTURE_COMPONENT_1 = 8;
export const D3D10_SIF_TEXTURE_COMPONENTS = 12;
export const D3D_SIF_FORCE_DWORD = 2147483647;
export const D3D_SIT_CBUFFER = 0;
export const D3D_SIT_TBUFFER = 1;
export const D3D_SIT_TEXTURE = 2;
export const D3D_SIT_SAMPLER = 3;
export const D3D_SIT_UAV_RWTYPED = 4;
export const D3D_SIT_STRUCTURED = 5;
export const D3D_SIT_UAV_RWSTRUCTURED = 6;
export const D3D_SIT_BYTEADDRESS = 7;
export const D3D_SIT_UAV_RWBYTEADDRESS = 8;
export const D3D_SIT_UAV_APPEND_STRUCTURED = 9;
export const D3D_SIT_UAV_CONSUME_STRUCTURED = 10;
export const D3D_SIT_UAV_RWSTRUCTURED_WITH_COUNTER = 11;
export const D3D_SIT_RTACCELERATIONSTRUCTURE = 12;
export const D3D_SIT_UAV_FEEDBACKTEXTURE = 13;
export const D3D10_SIT_CBUFFER = 0;
export const D3D10_SIT_TBUFFER = 1;
export const D3D10_SIT_TEXTURE = 2;
export const D3D10_SIT_SAMPLER = 3;
export const D3D11_SIT_UAV_RWTYPED = 4;
export const D3D11_SIT_STRUCTURED = 5;
export const D3D11_SIT_UAV_RWSTRUCTURED = 6;
export const D3D11_SIT_BYTEADDRESS = 7;
export const D3D11_SIT_UAV_RWBYTEADDRESS = 8;
export const D3D11_SIT_UAV_APPEND_STRUCTURED = 9;
export const D3D11_SIT_UAV_CONSUME_STRUCTURED = 10;
export const D3D11_SIT_UAV_RWSTRUCTURED_WITH_COUNTER = 11;
export const D3D_CBF_USERPACKED = 1;
export const D3D10_CBF_USERPACKED = 1;
export const D3D_CBF_FORCE_DWORD = 2147483647;
export const D3D_CT_CBUFFER = 0;
export const D3D_CT_TBUFFER = 1;
export const D3D_CT_INTERFACE_POINTERS = 2;
export const D3D_CT_RESOURCE_BIND_INFO = 3;
export const D3D10_CT_CBUFFER = 0;
export const D3D10_CT_TBUFFER = 1;
export const D3D11_CT_CBUFFER = 0;
export const D3D11_CT_TBUFFER = 1;
export const D3D11_CT_INTERFACE_POINTERS = 2;
export const D3D11_CT_RESOURCE_BIND_INFO = 3;
export const D3D_NAME_UNDEFINED = 0;
export const D3D_NAME_POSITION = 1;
export const D3D_NAME_CLIP_DISTANCE = 2;
export const D3D_NAME_CULL_DISTANCE = 3;
export const D3D_NAME_RENDER_TARGET_ARRAY_INDEX = 4;
export const D3D_NAME_VIEWPORT_ARRAY_INDEX = 5;
export const D3D_NAME_VERTEX_ID = 6;
export const D3D_NAME_PRIMITIVE_ID = 7;
export const D3D_NAME_INSTANCE_ID = 8;
export const D3D_NAME_IS_FRONT_FACE = 9;
export const D3D_NAME_SAMPLE_INDEX = 10;
export const D3D_NAME_FINAL_QUAD_EDGE_TESSFACTOR = 11;
export const D3D_NAME_FINAL_QUAD_INSIDE_TESSFACTOR = 12;
export const D3D_NAME_FINAL_TRI_EDGE_TESSFACTOR = 13;
export const D3D_NAME_FINAL_TRI_INSIDE_TESSFACTOR = 14;
export const D3D_NAME_FINAL_LINE_DETAIL_TESSFACTOR = 15;
export const D3D_NAME_FINAL_LINE_DENSITY_TESSFACTOR = 16;
export const D3D_NAME_BARYCENTRICS = 23;
export const D3D_NAME_SHADINGRATE = 24;
export const D3D_NAME_CULLPRIMITIVE = 25;
export const D3D_NAME_TARGET = 64;
export const D3D_NAME_DEPTH = 65;
export const D3D_NAME_COVERAGE = 66;
export const D3D_NAME_DEPTH_GREATER_EQUAL = 67;
export const D3D_NAME_DEPTH_LESS_EQUAL = 68;
export const D3D_NAME_STENCIL_REF = 69;
export const D3D_NAME_INNER_COVERAGE = 70;
export const D3D10_NAME_UNDEFINED = 0;
export const D3D10_NAME_POSITION = 1;
export const D3D10_NAME_CLIP_DISTANCE = 2;
export const D3D10_NAME_CULL_DISTANCE = 3;
export const D3D10_NAME_RENDER_TARGET_ARRAY_INDEX = 4;
export const D3D10_NAME_VIEWPORT_ARRAY_INDEX = 5;
export const D3D10_NAME_VERTEX_ID = 6;
export const D3D10_NAME_PRIMITIVE_ID = 7;
export const D3D10_NAME_INSTANCE_ID = 8;
export const D3D10_NAME_IS_FRONT_FACE = 9;
export const D3D10_NAME_SAMPLE_INDEX = 10;
export const D3D10_NAME_TARGET = 64;
export const D3D10_NAME_DEPTH = 65;
export const D3D10_NAME_COVERAGE = 66;
export const D3D11_NAME_FINAL_QUAD_EDGE_TESSFACTOR = 11;
export const D3D11_NAME_FINAL_QUAD_INSIDE_TESSFACTOR = 12;
export const D3D11_NAME_FINAL_TRI_EDGE_TESSFACTOR = 13;
export const D3D11_NAME_FINAL_TRI_INSIDE_TESSFACTOR = 14;
export const D3D11_NAME_FINAL_LINE_DETAIL_TESSFACTOR = 15;
export const D3D11_NAME_FINAL_LINE_DENSITY_TESSFACTOR = 16;
export const D3D11_NAME_DEPTH_GREATER_EQUAL = 67;
export const D3D11_NAME_DEPTH_LESS_EQUAL = 68;
export const D3D11_NAME_STENCIL_REF = 69;
export const D3D11_NAME_INNER_COVERAGE = 70;
export const D3D12_NAME_BARYCENTRICS = 23;
export const D3D12_NAME_SHADINGRATE = 24;
export const D3D12_NAME_CULLPRIMITIVE = 25;
export const D3D_RETURN_TYPE_UNORM = 1;
export const D3D_RETURN_TYPE_SNORM = 2;
export const D3D_RETURN_TYPE_SINT = 3;
export const D3D_RETURN_TYPE_UINT = 4;
export const D3D_RETURN_TYPE_FLOAT = 5;
export const D3D_RETURN_TYPE_MIXED = 6;
export const D3D_RETURN_TYPE_DOUBLE = 7;
export const D3D_RETURN_TYPE_CONTINUED = 8;
export const D3D10_RETURN_TYPE_UNORM = 1;
export const D3D10_RETURN_TYPE_SNORM = 2;
export const D3D10_RETURN_TYPE_SINT = 3;
export const D3D10_RETURN_TYPE_UINT = 4;
export const D3D10_RETURN_TYPE_FLOAT = 5;
export const D3D10_RETURN_TYPE_MIXED = 6;
export const D3D11_RETURN_TYPE_UNORM = 1;
export const D3D11_RETURN_TYPE_SNORM = 2;
export const D3D11_RETURN_TYPE_SINT = 3;
export const D3D11_RETURN_TYPE_UINT = 4;
export const D3D11_RETURN_TYPE_FLOAT = 5;
export const D3D11_RETURN_TYPE_MIXED = 6;
export const D3D11_RETURN_TYPE_DOUBLE = 7;
export const D3D11_RETURN_TYPE_CONTINUED = 8;
export const D3D_REGISTER_COMPONENT_UNKNOWN = 0;
export const D3D_REGISTER_COMPONENT_UINT32 = 1;
export const D3D_REGISTER_COMPONENT_SINT32 = 2;
export const D3D_REGISTER_COMPONENT_FLOAT32 = 3;
export const D3D10_REGISTER_COMPONENT_UNKNOWN = 0;
export const D3D10_REGISTER_COMPONENT_UINT32 = 1;
export const D3D10_REGISTER_COMPONENT_SINT32 = 2;
export const D3D10_REGISTER_COMPONENT_FLOAT32 = 3;
export const D3D_TESSELLATOR_DOMAIN_UNDEFINED = 0;
export const D3D_TESSELLATOR_DOMAIN_ISOLINE = 1;
export const D3D_TESSELLATOR_DOMAIN_TRI = 2;
export const D3D_TESSELLATOR_DOMAIN_QUAD = 3;
export const D3D11_TESSELLATOR_DOMAIN_UNDEFINED = 0;
export const D3D11_TESSELLATOR_DOMAIN_ISOLINE = 1;
export const D3D11_TESSELLATOR_DOMAIN_TRI = 2;
export const D3D11_TESSELLATOR_DOMAIN_QUAD = 3;
export const D3D_TESSELLATOR_PARTITIONING_UNDEFINED = 0;
export const D3D_TESSELLATOR_PARTITIONING_INTEGER = 1;
export const D3D_TESSELLATOR_PARTITIONING_POW2 = 2;
export const D3D_TESSELLATOR_PARTITIONING_FRACTIONAL_ODD = 3;
export const D3D_TESSELLATOR_PARTITIONING_FRACTIONAL_EVEN = 4;
export const D3D11_TESSELLATOR_PARTITIONING_UNDEFINED = 0;
export const D3D11_TESSELLATOR_PARTITIONING_INTEGER = 1;
export const D3D11_TESSELLATOR_PARTITIONING_POW2 = 2;
export const D3D11_TESSELLATOR_PARTITIONING_FRACTIONAL_ODD = 3;
export const D3D11_TESSELLATOR_PARTITIONING_FRACTIONAL_EVEN = 4;
export const D3D_TESSELLATOR_OUTPUT_UNDEFINED = 0;
export const D3D_TESSELLATOR_OUTPUT_POINT = 1;
export const D3D_TESSELLATOR_OUTPUT_LINE = 2;
export const D3D_TESSELLATOR_OUTPUT_TRIANGLE_CW = 3;
export const D3D_TESSELLATOR_OUTPUT_TRIANGLE_CCW = 4;
export const D3D11_TESSELLATOR_OUTPUT_UNDEFINED = 0;
export const D3D11_TESSELLATOR_OUTPUT_POINT = 1;
export const D3D11_TESSELLATOR_OUTPUT_LINE = 2;
export const D3D11_TESSELLATOR_OUTPUT_TRIANGLE_CW = 3;
export const D3D11_TESSELLATOR_OUTPUT_TRIANGLE_CCW = 4;
export const D3D_MIN_PRECISION_DEFAULT = 0;
export const D3D_MIN_PRECISION_FLOAT_16 = 1;
export const D3D_MIN_PRECISION_FLOAT_2_8 = 2;
export const D3D_MIN_PRECISION_RESERVED = 3;
export const D3D_MIN_PRECISION_SINT_16 = 4;
export const D3D_MIN_PRECISION_UINT_16 = 5;
export const D3D_MIN_PRECISION_ANY_16 = 240;
export const D3D_MIN_PRECISION_ANY_10 = 241;
export const D3D_INTERPOLATION_UNDEFINED = 0;
export const D3D_INTERPOLATION_CONSTANT = 1;
export const D3D_INTERPOLATION_LINEAR = 2;
export const D3D_INTERPOLATION_LINEAR_CENTROID = 3;
export const D3D_INTERPOLATION_LINEAR_NOPERSPECTIVE = 4;
export const D3D_INTERPOLATION_LINEAR_NOPERSPECTIVE_CENTROID = 5;
export const D3D_INTERPOLATION_LINEAR_SAMPLE = 6;
export const D3D_INTERPOLATION_LINEAR_NOPERSPECTIVE_SAMPLE = 7;
export const D3D_PF_NONE = 0;
export const D3D_PF_IN = 1;
export const D3D_PF_OUT = 2;
export const D3D_PF_FORCE_DWORD = 2147483647;
export const D3D10_INPUT_PER_VERTEX_DATA = 0;
export const D3D10_INPUT_PER_INSTANCE_DATA = 1;
export const DXGI_FORMAT_UNKNOWN = 0;
export const DXGI_FORMAT_R32G32B32A32_TYPELESS = 1;
export const DXGI_FORMAT_R32G32B32A32_FLOAT = 2;
export const DXGI_FORMAT_R32G32B32A32_UINT = 3;
export const DXGI_FORMAT_R32G32B32A32_SINT = 4;
export const DXGI_FORMAT_R32G32B32_TYPELESS = 5;
export const DXGI_FORMAT_R32G32B32_FLOAT = 6;
export const DXGI_FORMAT_R32G32B32_UINT = 7;
export const DXGI_FORMAT_R32G32B32_SINT = 8;
export const DXGI_FORMAT_R16G16B16A16_TYPELESS = 9;
export const DXGI_FORMAT_R16G16B16A16_FLOAT = 10;
export const DXGI_FORMAT_R16G16B16A16_UNORM = 11;
export const DXGI_FORMAT_R16G16B16A16_UINT = 12;
export const DXGI_FORMAT_R16G16B16A16_SNORM = 13;
export const DXGI_FORMAT_R16G16B16A16_SINT = 14;
export const DXGI_FORMAT_R32G32_TYPELESS = 15;
export const DXGI_FORMAT_R32G32_FLOAT = 16;
export const DXGI_FORMAT_R32G32_UINT = 17;
export const DXGI_FORMAT_R32G32_SINT = 18;
export const DXGI_FORMAT_R32G8X24_TYPELESS = 19;
export const DXGI_FORMAT_D32_FLOAT_S8X24_UINT = 20;
export const DXGI_FORMAT_R32_FLOAT_X8X24_TYPELESS = 21;
export const DXGI_FORMAT_X32_TYPELESS_G8X24_UINT = 22;
export const DXGI_FORMAT_R10G10B10A2_TYPELESS = 23;
export const DXGI_FORMAT_R10G10B10A2_UNORM = 24;
export const DXGI_FORMAT_R10G10B10A2_UINT = 25;
export const DXGI_FORMAT_R11G11B10_FLOAT = 26;
export const DXGI_FORMAT_R8G8B8A8_TYPELESS = 27;
export const DXGI_FORMAT_R8G8B8A8_UNORM = 28;
export const DXGI_FORMAT_R8G8B8A8_UNORM_SRGB = 29;
export const DXGI_FORMAT_R8G8B8A8_UINT = 30;
export const DXGI_FORMAT_R8G8B8A8_SNORM = 31;
export const DXGI_FORMAT_R8G8B8A8_SINT = 32;
export const DXGI_FORMAT_R16G16_TYPELESS = 33;
export const DXGI_FORMAT_R16G16_FLOAT = 34;
export const DXGI_FORMAT_R16G16_UNORM = 35;
export const DXGI_FORMAT_R16G16_UINT = 36;
export const DXGI_FORMAT_R16G16_SNORM = 37;
export const DXGI_FORMAT_R16G16_SINT = 38;
export const DXGI_FORMAT_R32_TYPELESS = 39;
export const DXGI_FORMAT_D32_FLOAT = 40;
export const DXGI_FORMAT_R32_FLOAT = 41;
export const DXGI_FORMAT_R32_UINT = 42;
export const DXGI_FORMAT_R32_SINT = 43;
export const DXGI_FORMAT_R24G8_TYPELESS = 44;
export const DXGI_FORMAT_D24_UNORM_S8_UINT = 45;
export const DXGI_FORMAT_R24_UNORM_X8_TYPELESS = 46;
export const DXGI_FORMAT_X24_TYPELESS_G8_UINT = 47;
export const DXGI_FORMAT_R8G8_TYPELESS = 48;
export const DXGI_FORMAT_R8G8_UNORM = 49;
export const DXGI_FORMAT_R8G8_UINT = 50;
export const DXGI_FORMAT_R8G8_SNORM = 51;
export const DXGI_FORMAT_R8G8_SINT = 52;
export const DXGI_FORMAT_R16_TYPELESS = 53;
export const DXGI_FORMAT_R16_FLOAT = 54;
export const DXGI_FORMAT_D16_UNORM = 55;
export const DXGI_FORMAT_R16_UNORM = 56;
export const DXGI_FORMAT_R16_UINT = 57;
export const DXGI_FORMAT_R16_SNORM = 58;
export const DXGI_FORMAT_R16_SINT = 59;
export const DXGI_FORMAT_R8_TYPELESS = 60;
export const DXGI_FORMAT_R8_UNORM = 61;
export const DXGI_FORMAT_R8_UINT = 62;
export const DXGI_FORMAT_R8_SNORM = 63;
export const DXGI_FORMAT_R8_SINT = 64;
export const DXGI_FORMAT_A8_UNORM = 65;
export const DXGI_FORMAT_R1_UNORM = 66;
export const DXGI_FORMAT_R9G9B9E5_SHAREDEXP = 67;
export const DXGI_FORMAT_R8G8_B8G8_UNORM = 68;
export const DXGI_FORMAT_G8R8_G8B8_UNORM = 69;
export const DXGI_FORMAT_BC1_TYPELESS = 70;
export const DXGI_FORMAT_BC1_UNORM = 71;
export const DXGI_FORMAT_BC1_UNORM_SRGB = 72;
export const DXGI_FORMAT_BC2_TYPELESS = 73;
export const DXGI_FORMAT_BC2_UNORM = 74;
export const DXGI_FORMAT_BC2_UNORM_SRGB = 75;
export const DXGI_FORMAT_BC3_TYPELESS = 76;
export const DXGI_FORMAT_BC3_UNORM = 77;
export const DXGI_FORMAT_BC3_UNORM_SRGB = 78;
export const DXGI_FORMAT_BC4_TYPELESS = 79;
export const DXGI_FORMAT_BC4_UNORM = 80;
export const DXGI_FORMAT_BC4_SNORM = 81;
export const DXGI_FORMAT_BC5_TYPELESS = 82;
export const DXGI_FORMAT_BC5_UNORM = 83;
export const DXGI_FORMAT_BC5_SNORM = 84;
export const DXGI_FORMAT_B5G6R5_UNORM = 85;
export const DXGI_FORMAT_B5G5R5A1_UNORM = 86;
export const DXGI_FORMAT_B8G8R8A8_UNORM = 87;
export const DXGI_FORMAT_B8G8R8X8_UNORM = 88;
export const DXGI_FORMAT_R10G10B10_XR_BIAS_A2_UNORM = 89;
export const DXGI_FORMAT_B8G8R8A8_TYPELESS = 90;
export const DXGI_FORMAT_B8G8R8A8_UNORM_SRGB = 91;
export const DXGI_FORMAT_B8G8R8X8_TYPELESS = 92;
export const DXGI_FORMAT_B8G8R8X8_UNORM_SRGB = 93;
export const DXGI_FORMAT_BC6H_TYPELESS = 94;
export const DXGI_FORMAT_BC6H_UF16 = 95;
export const DXGI_FORMAT_BC6H_SF16 = 96;
export const DXGI_FORMAT_BC7_TYPELESS = 97;
export const DXGI_FORMAT_BC7_UNORM = 98;
export const DXGI_FORMAT_BC7_UNORM_SRGB = 99;
export const DXGI_FORMAT_AYUV = 100;
export const DXGI_FORMAT_Y410 = 101;
export const DXGI_FORMAT_Y416 = 102;
export const DXGI_FORMAT_NV12 = 103;
export const DXGI_FORMAT_P010 = 104;
export const DXGI_FORMAT_P016 = 105;
export const DXGI_FORMAT_420_OPAQUE = 106;
export const DXGI_FORMAT_YUY2 = 107;
export const DXGI_FORMAT_Y210 = 108;
export const DXGI_FORMAT_Y216 = 109;
export const DXGI_FORMAT_NV11 = 110;
export const DXGI_FORMAT_AI44 = 111;
export const DXGI_FORMAT_IA44 = 112;
export const DXGI_FORMAT_P8 = 113;
export const DXGI_FORMAT_A8P8 = 114;
export const DXGI_FORMAT_B4G4R4A4_UNORM = 115;
export const DXGI_FORMAT_P208 = 130;
export const DXGI_FORMAT_V208 = 131;
export const DXGI_FORMAT_V408 = 132;
export const DXGI_FORMAT_SAMPLER_FEEDBACK_MIN_MIP_OPAQUE = 189;
export const DXGI_FORMAT_SAMPLER_FEEDBACK_MIP_REGION_USED_OPAQUE = 190;
export const DXGI_FORMAT_FORCE_UINT = 4294967295;
export const D3D10_FILL_WIREFRAME = 2;
export const D3D10_FILL_SOLID = 3;
export const D3D10_CULL_NONE = 1;
export const D3D10_CULL_FRONT = 2;
export const D3D10_CULL_BACK = 3;
export const D3D10_RESOURCE_DIMENSION_UNKNOWN = 0;
export const D3D10_RESOURCE_DIMENSION_BUFFER = 1;
export const D3D10_RESOURCE_DIMENSION_TEXTURE1D = 2;
export const D3D10_RESOURCE_DIMENSION_TEXTURE2D = 3;
export const D3D10_RESOURCE_DIMENSION_TEXTURE3D = 4;
export const D3D10_DSV_DIMENSION_UNKNOWN = 0;
export const D3D10_DSV_DIMENSION_TEXTURE1D = 1;
export const D3D10_DSV_DIMENSION_TEXTURE1DARRAY = 2;
export const D3D10_DSV_DIMENSION_TEXTURE2D = 3;
export const D3D10_DSV_DIMENSION_TEXTURE2DARRAY = 4;
export const D3D10_DSV_DIMENSION_TEXTURE2DMS = 5;
export const D3D10_DSV_DIMENSION_TEXTURE2DMSARRAY = 6;
export const D3D10_RTV_DIMENSION_UNKNOWN = 0;
export const D3D10_RTV_DIMENSION_BUFFER = 1;
export const D3D10_RTV_DIMENSION_TEXTURE1D = 2;
export const D3D10_RTV_DIMENSION_TEXTURE1DARRAY = 3;
export const D3D10_RTV_DIMENSION_TEXTURE2D = 4;
export const D3D10_RTV_DIMENSION_TEXTURE2DARRAY = 5;
export const D3D10_RTV_DIMENSION_TEXTURE2DMS = 6;
export const D3D10_RTV_DIMENSION_TEXTURE2DMSARRAY = 7;
export const D3D10_RTV_DIMENSION_TEXTURE3D = 8;
export const D3D10_USAGE_DEFAULT = 0;
export const D3D10_USAGE_IMMUTABLE = 1;
export const D3D10_USAGE_DYNAMIC = 2;
export const D3D10_USAGE_STAGING = 3;
export const D3D10_BIND_VERTEX_BUFFER = 1;
export const D3D10_BIND_INDEX_BUFFER = 2;
export const D3D10_BIND_CONSTANT_BUFFER = 4;
export const D3D10_BIND_SHADER_RESOURCE = 8;
export const D3D10_BIND_STREAM_OUTPUT = 16;
export const D3D10_BIND_RENDER_TARGET = 32;
export const D3D10_BIND_DEPTH_STENCIL = 64;
export const D3D10_CPU_ACCESS_WRITE = 65536;
export const D3D10_CPU_ACCESS_READ = 131072;
export const D3D10_RESOURCE_MISC_GENERATE_MIPS = 1;
export const D3D10_RESOURCE_MISC_SHARED = 2;
export const D3D10_RESOURCE_MISC_TEXTURECUBE = 4;
export const D3D10_RESOURCE_MISC_SHARED_KEYEDMUTEX = 16;
export const D3D10_RESOURCE_MISC_GDI_COMPATIBLE = 32;
export const D3D10_MAP_READ = 1;
export const D3D10_MAP_WRITE = 2;
export const D3D10_MAP_READ_WRITE = 3;
export const D3D10_MAP_WRITE_DISCARD = 4;
export const D3D10_MAP_WRITE_NO_OVERWRITE = 5;
export const D3D10_MAP_FLAG_DO_NOT_WAIT = 1048576;
export const D3D10_RAISE_FLAG_DRIVER_INTERNAL_ERROR = 1;
export const D3D10_CLEAR_DEPTH = 1;
export const D3D10_CLEAR_STENCIL = 2;
export const D3D10_COMPARISON_NEVER = 1;
export const D3D10_COMPARISON_LESS = 2;
export const D3D10_COMPARISON_EQUAL = 3;
export const D3D10_COMPARISON_LESS_EQUAL = 4;
export const D3D10_COMPARISON_GREATER = 5;
export const D3D10_COMPARISON_NOT_EQUAL = 6;
export const D3D10_COMPARISON_GREATER_EQUAL = 7;
export const D3D10_COMPARISON_ALWAYS = 8;
export const D3D10_DEPTH_WRITE_MASK_ZERO = 0;
export const D3D10_DEPTH_WRITE_MASK_ALL = 1;
export const D3D10_STENCIL_OP_KEEP = 1;
export const D3D10_STENCIL_OP_ZERO = 2;
export const D3D10_STENCIL_OP_REPLACE = 3;
export const D3D10_STENCIL_OP_INCR_SAT = 4;
export const D3D10_STENCIL_OP_DECR_SAT = 5;
export const D3D10_STENCIL_OP_INVERT = 6;
export const D3D10_STENCIL_OP_INCR = 7;
export const D3D10_STENCIL_OP_DECR = 8;
export const D3D10_BLEND_ZERO = 1;
export const D3D10_BLEND_ONE = 2;
export const D3D10_BLEND_SRC_COLOR = 3;
export const D3D10_BLEND_INV_SRC_COLOR = 4;
export const D3D10_BLEND_SRC_ALPHA = 5;
export const D3D10_BLEND_INV_SRC_ALPHA = 6;
export const D3D10_BLEND_DEST_ALPHA = 7;
export const D3D10_BLEND_INV_DEST_ALPHA = 8;
export const D3D10_BLEND_DEST_COLOR = 9;
export const D3D10_BLEND_INV_DEST_COLOR = 10;
export const D3D10_BLEND_SRC_ALPHA_SAT = 11;
export const D3D10_BLEND_BLEND_FACTOR = 14;
export const D3D10_BLEND_INV_BLEND_FACTOR = 15;
export const D3D10_BLEND_SRC1_COLOR = 16;
export const D3D10_BLEND_INV_SRC1_COLOR = 17;
export const D3D10_BLEND_SRC1_ALPHA = 18;
export const D3D10_BLEND_INV_SRC1_ALPHA = 19;
export const D3D10_BLEND_OP_ADD = 1;
export const D3D10_BLEND_OP_SUBTRACT = 2;
export const D3D10_BLEND_OP_REV_SUBTRACT = 3;
export const D3D10_BLEND_OP_MIN = 4;
export const D3D10_BLEND_OP_MAX = 5;
export const D3D10_COLOR_WRITE_ENABLE_RED = 1;
export const D3D10_COLOR_WRITE_ENABLE_GREEN = 2;
export const D3D10_COLOR_WRITE_ENABLE_BLUE = 4;
export const D3D10_COLOR_WRITE_ENABLE_ALPHA = 8;
export const D3D10_COLOR_WRITE_ENABLE_ALL = 15;
export const D3D10_TEXTURECUBE_FACE_POSITIVE_X = 0;
export const D3D10_TEXTURECUBE_FACE_NEGATIVE_X = 1;
export const D3D10_TEXTURECUBE_FACE_POSITIVE_Y = 2;
export const D3D10_TEXTURECUBE_FACE_NEGATIVE_Y = 3;
export const D3D10_TEXTURECUBE_FACE_POSITIVE_Z = 4;
export const D3D10_TEXTURECUBE_FACE_NEGATIVE_Z = 5;
export const D3D10_FILTER_MIN_MAG_MIP_POINT = 0;
export const D3D10_FILTER_MIN_MAG_POINT_MIP_LINEAR = 1;
export const D3D10_FILTER_MIN_POINT_MAG_LINEAR_MIP_POINT = 4;
export const D3D10_FILTER_MIN_POINT_MAG_MIP_LINEAR = 5;
export const D3D10_FILTER_MIN_LINEAR_MAG_MIP_POINT = 16;
export const D3D10_FILTER_MIN_LINEAR_MAG_POINT_MIP_LINEAR = 17;
export const D3D10_FILTER_MIN_MAG_LINEAR_MIP_POINT = 20;
export const D3D10_FILTER_MIN_MAG_MIP_LINEAR = 21;
export const D3D10_FILTER_ANISOTROPIC = 85;
export const D3D10_FILTER_COMPARISON_MIN_MAG_MIP_POINT = 128;
export const D3D10_FILTER_COMPARISON_MIN_MAG_POINT_MIP_LINEAR = 129;
export const D3D10_FILTER_COMPARISON_MIN_POINT_MAG_LINEAR_MIP_POINT = 132;
export const D3D10_FILTER_COMPARISON_MIN_POINT_MAG_MIP_LINEAR = 133;
export const D3D10_FILTER_COMPARISON_MIN_LINEAR_MAG_MIP_POINT = 144;
export const D3D10_FILTER_COMPARISON_MIN_LINEAR_MAG_POINT_MIP_LINEAR = 145;
export const D3D10_FILTER_COMPARISON_MIN_MAG_LINEAR_MIP_POINT = 148;
export const D3D10_FILTER_COMPARISON_MIN_MAG_MIP_LINEAR = 149;
export const D3D10_FILTER_COMPARISON_ANISOTROPIC = 213;
export const D3D10_FILTER_TEXT_1BIT = `-2147483648`;
export const D3D10_FILTER_TYPE_POINT = 0;
export const D3D10_FILTER_TYPE_LINEAR = 1;
export const D3D10_TEXTURE_ADDRESS_WRAP = 1;
export const D3D10_TEXTURE_ADDRESS_MIRROR = 2;
export const D3D10_TEXTURE_ADDRESS_CLAMP = 3;
export const D3D10_TEXTURE_ADDRESS_BORDER = 4;
export const D3D10_TEXTURE_ADDRESS_MIRROR_ONCE = 5;
export const D3D10_FORMAT_SUPPORT_BUFFER = 1;
export const D3D10_FORMAT_SUPPORT_IA_VERTEX_BUFFER = 2;
export const D3D10_FORMAT_SUPPORT_IA_INDEX_BUFFER = 4;
export const D3D10_FORMAT_SUPPORT_SO_BUFFER = 8;
export const D3D10_FORMAT_SUPPORT_TEXTURE1D = 16;
export const D3D10_FORMAT_SUPPORT_TEXTURE2D = 32;
export const D3D10_FORMAT_SUPPORT_TEXTURE3D = 64;
export const D3D10_FORMAT_SUPPORT_TEXTURECUBE = 128;
export const D3D10_FORMAT_SUPPORT_SHADER_LOAD = 256;
export const D3D10_FORMAT_SUPPORT_SHADER_SAMPLE = 512;
export const D3D10_FORMAT_SUPPORT_SHADER_SAMPLE_COMPARISON = 1024;
export const D3D10_FORMAT_SUPPORT_SHADER_SAMPLE_MONO_TEXT = 2048;
export const D3D10_FORMAT_SUPPORT_MIP = 4096;
export const D3D10_FORMAT_SUPPORT_MIP_AUTOGEN = 8192;
export const D3D10_FORMAT_SUPPORT_RENDER_TARGET = 16384;
export const D3D10_FORMAT_SUPPORT_BLENDABLE = 32768;
export const D3D10_FORMAT_SUPPORT_DEPTH_STENCIL = 65536;
export const D3D10_FORMAT_SUPPORT_CPU_LOCKABLE = 131072;
export const D3D10_FORMAT_SUPPORT_MULTISAMPLE_RESOLVE = 262144;
export const D3D10_FORMAT_SUPPORT_DISPLAY = 524288;
export const D3D10_FORMAT_SUPPORT_CAST_WITHIN_BIT_LAYOUT = 1048576;
export const D3D10_FORMAT_SUPPORT_MULTISAMPLE_RENDERTARGET = 2097152;
export const D3D10_FORMAT_SUPPORT_MULTISAMPLE_LOAD = 4194304;
export const D3D10_FORMAT_SUPPORT_SHADER_GATHER = 8388608;
export const D3D10_FORMAT_SUPPORT_BACK_BUFFER_CAST = 16777216;
export const D3D10_ASYNC_GETDATA_DONOTFLUSH = 1;
export const D3D10_QUERY_EVENT = 0;
export const D3D10_QUERY_OCCLUSION = 1;
export const D3D10_QUERY_TIMESTAMP = 2;
export const D3D10_QUERY_TIMESTAMP_DISJOINT = 3;
export const D3D10_QUERY_PIPELINE_STATISTICS = 4;
export const D3D10_QUERY_OCCLUSION_PREDICATE = 5;
export const D3D10_QUERY_SO_STATISTICS = 6;
export const D3D10_QUERY_SO_OVERFLOW_PREDICATE = 7;
export const D3D10_QUERY_MISC_PREDICATEHINT = 1;
export const D3D10_COUNTER_GPU_IDLE = 0;
export const D3D10_COUNTER_VERTEX_PROCESSING = 1;
export const D3D10_COUNTER_GEOMETRY_PROCESSING = 2;
export const D3D10_COUNTER_PIXEL_PROCESSING = 3;
export const D3D10_COUNTER_OTHER_GPU_PROCESSING = 4;
export const D3D10_COUNTER_HOST_ADAPTER_BANDWIDTH_UTILIZATION = 5;
export const D3D10_COUNTER_LOCAL_VIDMEM_BANDWIDTH_UTILIZATION = 6;
export const D3D10_COUNTER_VERTEX_THROUGHPUT_UTILIZATION = 7;
export const D3D10_COUNTER_TRIANGLE_SETUP_THROUGHPUT_UTILIZATION = 8;
export const D3D10_COUNTER_FILLRATE_THROUGHPUT_UTILIZATION = 9;
export const D3D10_COUNTER_VS_MEMORY_LIMITED = 10;
export const D3D10_COUNTER_VS_COMPUTATION_LIMITED = 11;
export const D3D10_COUNTER_GS_MEMORY_LIMITED = 12;
export const D3D10_COUNTER_GS_COMPUTATION_LIMITED = 13;
export const D3D10_COUNTER_PS_MEMORY_LIMITED = 14;
export const D3D10_COUNTER_PS_COMPUTATION_LIMITED = 15;
export const D3D10_COUNTER_POST_TRANSFORM_CACHE_HIT_RATE = 16;
export const D3D10_COUNTER_TEXTURE_CACHE_HIT_RATE = 17;
export const D3D10_COUNTER_DEVICE_DEPENDENT_0 = 1073741824;
export const D3D10_COUNTER_TYPE_FLOAT32 = 0;
export const D3D10_COUNTER_TYPE_UINT16 = 1;
export const D3D10_COUNTER_TYPE_UINT32 = 2;
export const D3D10_COUNTER_TYPE_UINT64 = 3;
export const D3D10_CREATE_DEVICE_SINGLETHREADED = 1;
export const D3D10_CREATE_DEVICE_DEBUG = 2;
export const D3D10_CREATE_DEVICE_SWITCH_TO_REF = 4;
export const D3D10_CREATE_DEVICE_PREVENT_INTERNAL_THREADING_OPTIMIZATIONS = 8;
export const D3D10_CREATE_DEVICE_ALLOW_NULL_FROM_MAP = 16;
export const D3D10_CREATE_DEVICE_BGRA_SUPPORT = 32;
export const D3D10_CREATE_DEVICE_PREVENT_ALTERING_LAYER_SETTINGS_FROM_REGISTRY = 128;
export const D3D10_CREATE_DEVICE_STRICT_VALIDATION = 512;
export const D3D10_CREATE_DEVICE_DEBUGGABLE = 1024;
export const D3D10_MESSAGE_CATEGORY_APPLICATION_DEFINED = 0;
export const D3D10_MESSAGE_CATEGORY_MISCELLANEOUS = 1;
export const D3D10_MESSAGE_CATEGORY_INITIALIZATION = 2;
export const D3D10_MESSAGE_CATEGORY_CLEANUP = 3;
export const D3D10_MESSAGE_CATEGORY_COMPILATION = 4;
export const D3D10_MESSAGE_CATEGORY_STATE_CREATION = 5;
export const D3D10_MESSAGE_CATEGORY_STATE_SETTING = 6;
export const D3D10_MESSAGE_CATEGORY_STATE_GETTING = 7;
export const D3D10_MESSAGE_CATEGORY_RESOURCE_MANIPULATION = 8;
export const D3D10_MESSAGE_CATEGORY_EXECUTION = 9;
export const D3D10_MESSAGE_CATEGORY_SHADER = 10;
export const D3D10_MESSAGE_SEVERITY_CORRUPTION = 0;
export const D3D10_MESSAGE_SEVERITY_ERROR = 1;
export const D3D10_MESSAGE_SEVERITY_WARNING = 2;
export const D3D10_MESSAGE_SEVERITY_INFO = 3;
export const D3D10_MESSAGE_SEVERITY_MESSAGE = 4;
export const D3D10_MESSAGE_ID_UNKNOWN = 0;
export const D3D10_MESSAGE_ID_DEVICE_IASETVERTEXBUFFERS_HAZARD = 1;
export const D3D10_MESSAGE_ID_DEVICE_IASETINDEXBUFFER_HAZARD = 2;
export const D3D10_MESSAGE_ID_DEVICE_VSSETSHADERRESOURCES_HAZARD = 3;
export const D3D10_MESSAGE_ID_DEVICE_VSSETCONSTANTBUFFERS_HAZARD = 4;
export const D3D10_MESSAGE_ID_DEVICE_GSSETSHADERRESOURCES_HAZARD = 5;
export const D3D10_MESSAGE_ID_DEVICE_GSSETCONSTANTBUFFERS_HAZARD = 6;
export const D3D10_MESSAGE_ID_DEVICE_PSSETSHADERRESOURCES_HAZARD = 7;
export const D3D10_MESSAGE_ID_DEVICE_PSSETCONSTANTBUFFERS_HAZARD = 8;
export const D3D10_MESSAGE_ID_DEVICE_OMSETRENDERTARGETS_HAZARD = 9;
export const D3D10_MESSAGE_ID_DEVICE_SOSETTARGETS_HAZARD = 10;
export const D3D10_MESSAGE_ID_STRING_FROM_APPLICATION = 11;
export const D3D10_MESSAGE_ID_CORRUPTED_THIS = 12;
export const D3D10_MESSAGE_ID_CORRUPTED_PARAMETER1 = 13;
export const D3D10_MESSAGE_ID_CORRUPTED_PARAMETER2 = 14;
export const D3D10_MESSAGE_ID_CORRUPTED_PARAMETER3 = 15;
export const D3D10_MESSAGE_ID_CORRUPTED_PARAMETER4 = 16;
export const D3D10_MESSAGE_ID_CORRUPTED_PARAMETER5 = 17;
export const D3D10_MESSAGE_ID_CORRUPTED_PARAMETER6 = 18;
export const D3D10_MESSAGE_ID_CORRUPTED_PARAMETER7 = 19;
export const D3D10_MESSAGE_ID_CORRUPTED_PARAMETER8 = 20;
export const D3D10_MESSAGE_ID_CORRUPTED_PARAMETER9 = 21;
export const D3D10_MESSAGE_ID_CORRUPTED_PARAMETER10 = 22;
export const D3D10_MESSAGE_ID_CORRUPTED_PARAMETER11 = 23;
export const D3D10_MESSAGE_ID_CORRUPTED_PARAMETER12 = 24;
export const D3D10_MESSAGE_ID_CORRUPTED_PARAMETER13 = 25;
export const D3D10_MESSAGE_ID_CORRUPTED_PARAMETER14 = 26;
export const D3D10_MESSAGE_ID_CORRUPTED_PARAMETER15 = 27;
export const D3D10_MESSAGE_ID_CORRUPTED_MULTITHREADING = 28;
export const D3D10_MESSAGE_ID_MESSAGE_REPORTING_OUTOFMEMORY = 29;
export const D3D10_MESSAGE_ID_IASETINPUTLAYOUT_UNBINDDELETINGOBJECT = 30;
export const D3D10_MESSAGE_ID_IASETVERTEXBUFFERS_UNBINDDELETINGOBJECT = 31;
export const D3D10_MESSAGE_ID_IASETINDEXBUFFER_UNBINDDELETINGOBJECT = 32;
export const D3D10_MESSAGE_ID_VSSETSHADER_UNBINDDELETINGOBJECT = 33;
export const D3D10_MESSAGE_ID_VSSETSHADERRESOURCES_UNBINDDELETINGOBJECT = 34;
export const D3D10_MESSAGE_ID_VSSETCONSTANTBUFFERS_UNBINDDELETINGOBJECT = 35;
export const D3D10_MESSAGE_ID_VSSETSAMPLERS_UNBINDDELETINGOBJECT = 36;
export const D3D10_MESSAGE_ID_GSSETSHADER_UNBINDDELETINGOBJECT = 37;
export const D3D10_MESSAGE_ID_GSSETSHADERRESOURCES_UNBINDDELETINGOBJECT = 38;
export const D3D10_MESSAGE_ID_GSSETCONSTANTBUFFERS_UNBINDDELETINGOBJECT = 39;
export const D3D10_MESSAGE_ID_GSSETSAMPLERS_UNBINDDELETINGOBJECT = 40;
export const D3D10_MESSAGE_ID_SOSETTARGETS_UNBINDDELETINGOBJECT = 41;
export const D3D10_MESSAGE_ID_PSSETSHADER_UNBINDDELETINGOBJECT = 42;
export const D3D10_MESSAGE_ID_PSSETSHADERRESOURCES_UNBINDDELETINGOBJECT = 43;
export const D3D10_MESSAGE_ID_PSSETCONSTANTBUFFERS_UNBINDDELETINGOBJECT = 44;
export const D3D10_MESSAGE_ID_PSSETSAMPLERS_UNBINDDELETINGOBJECT = 45;
export const D3D10_MESSAGE_ID_RSSETSTATE_UNBINDDELETINGOBJECT = 46;
export const D3D10_MESSAGE_ID_OMSETBLENDSTATE_UNBINDDELETINGOBJECT = 47;
export const D3D10_MESSAGE_ID_OMSETDEPTHSTENCILSTATE_UNBINDDELETINGOBJECT = 48;
export const D3D10_MESSAGE_ID_OMSETRENDERTARGETS_UNBINDDELETINGOBJECT = 49;
export const D3D10_MESSAGE_ID_SETPREDICATION_UNBINDDELETINGOBJECT = 50;
export const D3D10_MESSAGE_ID_GETPRIVATEDATA_MOREDATA = 51;
export const D3D10_MESSAGE_ID_SETPRIVATEDATA_INVALIDFREEDATA = 52;
export const D3D10_MESSAGE_ID_SETPRIVATEDATA_INVALIDIUNKNOWN = 53;
export const D3D10_MESSAGE_ID_SETPRIVATEDATA_INVALIDFLAGS = 54;
export const D3D10_MESSAGE_ID_SETPRIVATEDATA_CHANGINGPARAMS = 55;
export const D3D10_MESSAGE_ID_SETPRIVATEDATA_OUTOFMEMORY = 56;
export const D3D10_MESSAGE_ID_CREATEBUFFER_UNRECOGNIZEDFORMAT = 57;
export const D3D10_MESSAGE_ID_CREATEBUFFER_INVALIDSAMPLES = 58;
export const D3D10_MESSAGE_ID_CREATEBUFFER_UNRECOGNIZEDUSAGE = 59;
export const D3D10_MESSAGE_ID_CREATEBUFFER_UNRECOGNIZEDBINDFLAGS = 60;
export const D3D10_MESSAGE_ID_CREATEBUFFER_UNRECOGNIZEDCPUACCESSFLAGS = 61;
export const D3D10_MESSAGE_ID_CREATEBUFFER_UNRECOGNIZEDMISCFLAGS = 62;
export const D3D10_MESSAGE_ID_CREATEBUFFER_INVALIDCPUACCESSFLAGS = 63;
export const D3D10_MESSAGE_ID_CREATEBUFFER_INVALIDBINDFLAGS = 64;
export const D3D10_MESSAGE_ID_CREATEBUFFER_INVALIDINITIALDATA = 65;
export const D3D10_MESSAGE_ID_CREATEBUFFER_INVALIDDIMENSIONS = 66;
export const D3D10_MESSAGE_ID_CREATEBUFFER_INVALIDMIPLEVELS = 67;
export const D3D10_MESSAGE_ID_CREATEBUFFER_INVALIDMISCFLAGS = 68;
export const D3D10_MESSAGE_ID_CREATEBUFFER_INVALIDARG_RETURN = 69;
export const D3D10_MESSAGE_ID_CREATEBUFFER_OUTOFMEMORY_RETURN = 70;
export const D3D10_MESSAGE_ID_CREATEBUFFER_NULLDESC = 71;
export const D3D10_MESSAGE_ID_CREATEBUFFER_INVALIDCONSTANTBUFFERBINDINGS = 72;
export const D3D10_MESSAGE_ID_CREATEBUFFER_LARGEALLOCATION = 73;
export const D3D10_MESSAGE_ID_CREATETEXTURE1D_UNRECOGNIZEDFORMAT = 74;
export const D3D10_MESSAGE_ID_CREATETEXTURE1D_UNSUPPORTEDFORMAT = 75;
export const D3D10_MESSAGE_ID_CREATETEXTURE1D_INVALIDSAMPLES = 76;
export const D3D10_MESSAGE_ID_CREATETEXTURE1D_UNRECOGNIZEDUSAGE = 77;
export const D3D10_MESSAGE_ID_CREATETEXTURE1D_UNRECOGNIZEDBINDFLAGS = 78;
export const D3D10_MESSAGE_ID_CREATETEXTURE1D_UNRECOGNIZEDCPUACCESSFLAGS = 79;
export const D3D10_MESSAGE_ID_CREATETEXTURE1D_UNRECOGNIZEDMISCFLAGS = 80;
export const D3D10_MESSAGE_ID_CREATETEXTURE1D_INVALIDCPUACCESSFLAGS = 81;
export const D3D10_MESSAGE_ID_CREATETEXTURE1D_INVALIDBINDFLAGS = 82;
export const D3D10_MESSAGE_ID_CREATETEXTURE1D_INVALIDINITIALDATA = 83;
export const D3D10_MESSAGE_ID_CREATETEXTURE1D_INVALIDDIMENSIONS = 84;
export const D3D10_MESSAGE_ID_CREATETEXTURE1D_INVALIDMIPLEVELS = 85;
export const D3D10_MESSAGE_ID_CREATETEXTURE1D_INVALIDMISCFLAGS = 86;
export const D3D10_MESSAGE_ID_CREATETEXTURE1D_INVALIDARG_RETURN = 87;
export const D3D10_MESSAGE_ID_CREATETEXTURE1D_OUTOFMEMORY_RETURN = 88;
export const D3D10_MESSAGE_ID_CREATETEXTURE1D_NULLDESC = 89;
export const D3D10_MESSAGE_ID_CREATETEXTURE1D_LARGEALLOCATION = 90;
export const D3D10_MESSAGE_ID_CREATETEXTURE2D_UNRECOGNIZEDFORMAT = 91;
export const D3D10_MESSAGE_ID_CREATETEXTURE2D_UNSUPPORTEDFORMAT = 92;
export const D3D10_MESSAGE_ID_CREATETEXTURE2D_INVALIDSAMPLES = 93;
export const D3D10_MESSAGE_ID_CREATETEXTURE2D_UNRECOGNIZEDUSAGE = 94;
export const D3D10_MESSAGE_ID_CREATETEXTURE2D_UNRECOGNIZEDBINDFLAGS = 95;
export const D3D10_MESSAGE_ID_CREATETEXTURE2D_UNRECOGNIZEDCPUACCESSFLAGS = 96;
export const D3D10_MESSAGE_ID_CREATETEXTURE2D_UNRECOGNIZEDMISCFLAGS = 97;
export const D3D10_MESSAGE_ID_CREATETEXTURE2D_INVALIDCPUACCESSFLAGS = 98;
export const D3D10_MESSAGE_ID_CREATETEXTURE2D_INVALIDBINDFLAGS = 99;
export const D3D10_MESSAGE_ID_CREATETEXTURE2D_INVALIDINITIALDATA = 100;
export const D3D10_MESSAGE_ID_CREATETEXTURE2D_INVALIDDIMENSIONS = 101;
export const D3D10_MESSAGE_ID_CREATETEXTURE2D_INVALIDMIPLEVELS = 102;
export const D3D10_MESSAGE_ID_CREATETEXTURE2D_INVALIDMISCFLAGS = 103;
export const D3D10_MESSAGE_ID_CREATETEXTURE2D_INVALIDARG_RETURN = 104;
export const D3D10_MESSAGE_ID_CREATETEXTURE2D_OUTOFMEMORY_RETURN = 105;
export const D3D10_MESSAGE_ID_CREATETEXTURE2D_NULLDESC = 106;
export const D3D10_MESSAGE_ID_CREATETEXTURE2D_LARGEALLOCATION = 107;
export const D3D10_MESSAGE_ID_CREATETEXTURE3D_UNRECOGNIZEDFORMAT = 108;
export const D3D10_MESSAGE_ID_CREATETEXTURE3D_UNSUPPORTEDFORMAT = 109;
export const D3D10_MESSAGE_ID_CREATETEXTURE3D_INVALIDSAMPLES = 110;
export const D3D10_MESSAGE_ID_CREATETEXTURE3D_UNRECOGNIZEDUSAGE = 111;
export const D3D10_MESSAGE_ID_CREATETEXTURE3D_UNRECOGNIZEDBINDFLAGS = 112;
export const D3D10_MESSAGE_ID_CREATETEXTURE3D_UNRECOGNIZEDCPUACCESSFLAGS = 113;
export const D3D10_MESSAGE_ID_CREATETEXTURE3D_UNRECOGNIZEDMISCFLAGS = 114;
export const D3D10_MESSAGE_ID_CREATETEXTURE3D_INVALIDCPUACCESSFLAGS = 115;
export const D3D10_MESSAGE_ID_CREATETEXTURE3D_INVALIDBINDFLAGS = 116;
export const D3D10_MESSAGE_ID_CREATETEXTURE3D_INVALIDINITIALDATA = 117;
export const D3D10_MESSAGE_ID_CREATETEXTURE3D_INVALIDDIMENSIONS = 118;
export const D3D10_MESSAGE_ID_CREATETEXTURE3D_INVALIDMIPLEVELS = 119;
export const D3D10_MESSAGE_ID_CREATETEXTURE3D_INVALIDMISCFLAGS = 120;
export const D3D10_MESSAGE_ID_CREATETEXTURE3D_INVALIDARG_RETURN = 121;
export const D3D10_MESSAGE_ID_CREATETEXTURE3D_OUTOFMEMORY_RETURN = 122;
export const D3D10_MESSAGE_ID_CREATETEXTURE3D_NULLDESC = 123;
export const D3D10_MESSAGE_ID_CREATETEXTURE3D_LARGEALLOCATION = 124;
export const D3D10_MESSAGE_ID_CREATESHADERRESOURCEVIEW_UNRECOGNIZEDFORMAT = 125;
export const D3D10_MESSAGE_ID_CREATESHADERRESOURCEVIEW_INVALIDDESC = 126;
export const D3D10_MESSAGE_ID_CREATESHADERRESOURCEVIEW_INVALIDFORMAT = 127;
export const D3D10_MESSAGE_ID_CREATESHADERRESOURCEVIEW_INVALIDDIMENSIONS = 128;
export const D3D10_MESSAGE_ID_CREATESHADERRESOURCEVIEW_INVALIDRESOURCE = 129;
export const D3D10_MESSAGE_ID_CREATESHADERRESOURCEVIEW_TOOMANYOBJECTS = 130;
export const D3D10_MESSAGE_ID_CREATESHADERRESOURCEVIEW_INVALIDARG_RETURN = 131;
export const D3D10_MESSAGE_ID_CREATESHADERRESOURCEVIEW_OUTOFMEMORY_RETURN = 132;
export const D3D10_MESSAGE_ID_CREATERENDERTARGETVIEW_UNRECOGNIZEDFORMAT = 133;
export const D3D10_MESSAGE_ID_CREATERENDERTARGETVIEW_UNSUPPORTEDFORMAT = 134;
export const D3D10_MESSAGE_ID_CREATERENDERTARGETVIEW_INVALIDDESC = 135;
export const D3D10_MESSAGE_ID_CREATERENDERTARGETVIEW_INVALIDFORMAT = 136;
export const D3D10_MESSAGE_ID_CREATERENDERTARGETVIEW_INVALIDDIMENSIONS = 137;
export const D3D10_MESSAGE_ID_CREATERENDERTARGETVIEW_INVALIDRESOURCE = 138;
export const D3D10_MESSAGE_ID_CREATERENDERTARGETVIEW_TOOMANYOBJECTS = 139;
export const D3D10_MESSAGE_ID_CREATERENDERTARGETVIEW_INVALIDARG_RETURN = 140;
export const D3D10_MESSAGE_ID_CREATERENDERTARGETVIEW_OUTOFMEMORY_RETURN = 141;
export const D3D10_MESSAGE_ID_CREATEDEPTHSTENCILVIEW_UNRECOGNIZEDFORMAT = 142;
export const D3D10_MESSAGE_ID_CREATEDEPTHSTENCILVIEW_INVALIDDESC = 143;
export const D3D10_MESSAGE_ID_CREATEDEPTHSTENCILVIEW_INVALIDFORMAT = 144;
export const D3D10_MESSAGE_ID_CREATEDEPTHSTENCILVIEW_INVALIDDIMENSIONS = 145;
export const D3D10_MESSAGE_ID_CREATEDEPTHSTENCILVIEW_INVALIDRESOURCE = 146;
export const D3D10_MESSAGE_ID_CREATEDEPTHSTENCILVIEW_TOOMANYOBJECTS = 147;
export const D3D10_MESSAGE_ID_CREATEDEPTHSTENCILVIEW_INVALIDARG_RETURN = 148;
export const D3D10_MESSAGE_ID_CREATEDEPTHSTENCILVIEW_OUTOFMEMORY_RETURN = 149;
export const D3D10_MESSAGE_ID_CREATEINPUTLAYOUT_OUTOFMEMORY = 150;
export const D3D10_MESSAGE_ID_CREATEINPUTLAYOUT_TOOMANYELEMENTS = 151;
export const D3D10_MESSAGE_ID_CREATEINPUTLAYOUT_INVALIDFORMAT = 152;
export const D3D10_MESSAGE_ID_CREATEINPUTLAYOUT_INCOMPATIBLEFORMAT = 153;
export const D3D10_MESSAGE_ID_CREATEINPUTLAYOUT_INVALIDSLOT = 154;
export const D3D10_MESSAGE_ID_CREATEINPUTLAYOUT_INVALIDINPUTSLOTCLASS = 155;
export const D3D10_MESSAGE_ID_CREATEINPUTLAYOUT_STEPRATESLOTCLASSMISMATCH = 156;
export const D3D10_MESSAGE_ID_CREATEINPUTLAYOUT_INVALIDSLOTCLASSCHANGE = 157;
export const D3D10_MESSAGE_ID_CREATEINPUTLAYOUT_INVALIDSTEPRATECHANGE = 158;
export const D3D10_MESSAGE_ID_CREATEINPUTLAYOUT_INVALIDALIGNMENT = 159;
export const D3D10_MESSAGE_ID_CREATEINPUTLAYOUT_DUPLICATESEMANTIC = 160;
export const D3D10_MESSAGE_ID_CREATEINPUTLAYOUT_UNPARSEABLEINPUTSIGNATURE = 161;
export const D3D10_MESSAGE_ID_CREATEINPUTLAYOUT_NULLSEMANTIC = 162;
export const D3D10_MESSAGE_ID_CREATEINPUTLAYOUT_MISSINGELEMENT = 163;
export const D3D10_MESSAGE_ID_CREATEINPUTLAYOUT_NULLDESC = 164;
export const D3D10_MESSAGE_ID_CREATEVERTEXSHADER_OUTOFMEMORY = 165;
export const D3D10_MESSAGE_ID_CREATEVERTEXSHADER_INVALIDSHADERBYTECODE = 166;
export const D3D10_MESSAGE_ID_CREATEVERTEXSHADER_INVALIDSHADERTYPE = 167;
export const D3D10_MESSAGE_ID_CREATEGEOMETRYSHADER_OUTOFMEMORY = 168;
export const D3D10_MESSAGE_ID_CREATEGEOMETRYSHADER_INVALIDSHADERBYTECODE = 169;
export const D3D10_MESSAGE_ID_CREATEGEOMETRYSHADER_INVALIDSHADERTYPE = 170;
export const D3D10_MESSAGE_ID_CREATEGEOMETRYSHADERWITHSTREAMOUTPUT_OUTOFMEMORY = 171;
export const D3D10_MESSAGE_ID_CREATEGEOMETRYSHADERWITHSTREAMOUTPUT_INVALIDSHADERBYTECODE = 172;
export const D3D10_MESSAGE_ID_CREATEGEOMETRYSHADERWITHSTREAMOUTPUT_INVALIDSHADERTYPE = 173;
export const D3D10_MESSAGE_ID_CREATEGEOMETRYSHADERWITHSTREAMOUTPUT_INVALIDNUMENTRIES = 174;
export const D3D10_MESSAGE_ID_CREATEGEOMETRYSHADERWITHSTREAMOUTPUT_OUTPUTSTREAMSTRIDEUNUSED = 175;
export const D3D10_MESSAGE_ID_CREATEGEOMETRYSHADERWITHSTREAMOUTPUT_UNEXPECTEDDECL = 176;
export const D3D10_MESSAGE_ID_CREATEGEOMETRYSHADERWITHSTREAMOUTPUT_EXPECTEDDECL = 177;
export const D3D10_MESSAGE_ID_CREATEGEOMETRYSHADERWITHSTREAMOUTPUT_OUTPUTSLOT0EXPECTED = 178;
export const D3D10_MESSAGE_ID_CREATEGEOMETRYSHADERWITHSTREAMOUTPUT_INVALIDOUTPUTSLOT = 179;
export const D3D10_MESSAGE_ID_CREATEGEOMETRYSHADERWITHSTREAMOUTPUT_ONLYONEELEMENTPERSLOT = 180;
export const D3D10_MESSAGE_ID_CREATEGEOMETRYSHADERWITHSTREAMOUTPUT_INVALIDCOMPONENTCOUNT = 181;
export const D3D10_MESSAGE_ID_CREATEGEOMETRYSHADERWITHSTREAMOUTPUT_INVALIDSTARTCOMPONENTANDCOMPONENTCOUNT = 182;
export const D3D10_MESSAGE_ID_CREATEGEOMETRYSHADERWITHSTREAMOUTPUT_INVALIDGAPDEFINITION = 183;
export const D3D10_MESSAGE_ID_CREATEGEOMETRYSHADERWITHSTREAMOUTPUT_REPEATEDOUTPUT = 184;
export const D3D10_MESSAGE_ID_CREATEGEOMETRYSHADERWITHSTREAMOUTPUT_INVALIDOUTPUTSTREAMSTRIDE = 185;
export const D3D10_MESSAGE_ID_CREATEGEOMETRYSHADERWITHSTREAMOUTPUT_MISSINGSEMANTIC = 186;
export const D3D10_MESSAGE_ID_CREATEGEOMETRYSHADERWITHSTREAMOUTPUT_MASKMISMATCH = 187;
export const D3D10_MESSAGE_ID_CREATEGEOMETRYSHADERWITHSTREAMOUTPUT_CANTHAVEONLYGAPS = 188;
export const D3D10_MESSAGE_ID_CREATEGEOMETRYSHADERWITHSTREAMOUTPUT_DECLTOOCOMPLEX = 189;
export const D3D10_MESSAGE_ID_CREATEGEOMETRYSHADERWITHSTREAMOUTPUT_MISSINGOUTPUTSIGNATURE = 190;
export const D3D10_MESSAGE_ID_CREATEPIXELSHADER_OUTOFMEMORY = 191;
export const D3D10_MESSAGE_ID_CREATEPIXELSHADER_INVALIDSHADERBYTECODE = 192;
export const D3D10_MESSAGE_ID_CREATEPIXELSHADER_INVALIDSHADERTYPE = 193;
export const D3D10_MESSAGE_ID_CREATERASTERIZERSTATE_INVALIDFILLMODE = 194;
export const D3D10_MESSAGE_ID_CREATERASTERIZERSTATE_INVALIDCULLMODE = 195;
export const D3D10_MESSAGE_ID_CREATERASTERIZERSTATE_INVALIDDEPTHBIASCLAMP = 196;
export const D3D10_MESSAGE_ID_CREATERASTERIZERSTATE_INVALIDSLOPESCALEDDEPTHBIAS = 197;
export const D3D10_MESSAGE_ID_CREATERASTERIZERSTATE_TOOMANYOBJECTS = 198;
export const D3D10_MESSAGE_ID_CREATERASTERIZERSTATE_NULLDESC = 199;
export const D3D10_MESSAGE_ID_CREATEDEPTHSTENCILSTATE_INVALIDDEPTHWRITEMASK = 200;
export const D3D10_MESSAGE_ID_CREATEDEPTHSTENCILSTATE_INVALIDDEPTHFUNC = 201;
export const D3D10_MESSAGE_ID_CREATEDEPTHSTENCILSTATE_INVALIDFRONTFACESTENCILFAILOP = 202;
export const D3D10_MESSAGE_ID_CREATEDEPTHSTENCILSTATE_INVALIDFRONTFACESTENCILZFAILOP = 203;
export const D3D10_MESSAGE_ID_CREATEDEPTHSTENCILSTATE_INVALIDFRONTFACESTENCILPASSOP = 204;
export const D3D10_MESSAGE_ID_CREATEDEPTHSTENCILSTATE_INVALIDFRONTFACESTENCILFUNC = 205;
export const D3D10_MESSAGE_ID_CREATEDEPTHSTENCILSTATE_INVALIDBACKFACESTENCILFAILOP = 206;
export const D3D10_MESSAGE_ID_CREATEDEPTHSTENCILSTATE_INVALIDBACKFACESTENCILZFAILOP = 207;
export const D3D10_MESSAGE_ID_CREATEDEPTHSTENCILSTATE_INVALIDBACKFACESTENCILPASSOP = 208;
export const D3D10_MESSAGE_ID_CREATEDEPTHSTENCILSTATE_INVALIDBACKFACESTENCILFUNC = 209;
export const D3D10_MESSAGE_ID_CREATEDEPTHSTENCILSTATE_TOOMANYOBJECTS = 210;
export const D3D10_MESSAGE_ID_CREATEDEPTHSTENCILSTATE_NULLDESC = 211;
export const D3D10_MESSAGE_ID_CREATEBLENDSTATE_INVALIDSRCBLEND = 212;
export const D3D10_MESSAGE_ID_CREATEBLENDSTATE_INVALIDDESTBLEND = 213;
export const D3D10_MESSAGE_ID_CREATEBLENDSTATE_INVALIDBLENDOP = 214;
export const D3D10_MESSAGE_ID_CREATEBLENDSTATE_INVALIDSRCBLENDALPHA = 215;
export const D3D10_MESSAGE_ID_CREATEBLENDSTATE_INVALIDDESTBLENDALPHA = 216;
export const D3D10_MESSAGE_ID_CREATEBLENDSTATE_INVALIDBLENDOPALPHA = 217;
export const D3D10_MESSAGE_ID_CREATEBLENDSTATE_INVALIDRENDERTARGETWRITEMASK = 218;
export const D3D10_MESSAGE_ID_CREATEBLENDSTATE_TOOMANYOBJECTS = 219;
export const D3D10_MESSAGE_ID_CREATEBLENDSTATE_NULLDESC = 220;
export const D3D10_MESSAGE_ID_CREATESAMPLERSTATE_INVALIDFILTER = 221;
export const D3D10_MESSAGE_ID_CREATESAMPLERSTATE_INVALIDADDRESSU = 222;
export const D3D10_MESSAGE_ID_CREATESAMPLERSTATE_INVALIDADDRESSV = 223;
export const D3D10_MESSAGE_ID_CREATESAMPLERSTATE_INVALIDADDRESSW = 224;
export const D3D10_MESSAGE_ID_CREATESAMPLERSTATE_INVALIDMIPLODBIAS = 225;
export const D3D10_MESSAGE_ID_CREATESAMPLERSTATE_INVALIDMAXANISOTROPY = 226;
export const D3D10_MESSAGE_ID_CREATESAMPLERSTATE_INVALIDCOMPARISONFUNC = 227;
export const D3D10_MESSAGE_ID_CREATESAMPLERSTATE_INVALIDMINLOD = 228;
export const D3D10_MESSAGE_ID_CREATESAMPLERSTATE_INVALIDMAXLOD = 229;
export const D3D10_MESSAGE_ID_CREATESAMPLERSTATE_TOOMANYOBJECTS = 230;
export const D3D10_MESSAGE_ID_CREATESAMPLERSTATE_NULLDESC = 231;
export const D3D10_MESSAGE_ID_CREATEQUERYORPREDICATE_INVALIDQUERY = 232;
export const D3D10_MESSAGE_ID_CREATEQUERYORPREDICATE_INVALIDMISCFLAGS = 233;
export const D3D10_MESSAGE_ID_CREATEQUERYORPREDICATE_UNEXPECTEDMISCFLAG = 234;
export const D3D10_MESSAGE_ID_CREATEQUERYORPREDICATE_NULLDESC = 235;
export const D3D10_MESSAGE_ID_DEVICE_IASETPRIMITIVETOPOLOGY_TOPOLOGY_UNRECOGNIZED = 236;
export const D3D10_MESSAGE_ID_DEVICE_IASETPRIMITIVETOPOLOGY_TOPOLOGY_UNDEFINED = 237;
export const D3D10_MESSAGE_ID_IASETVERTEXBUFFERS_INVALIDBUFFER = 238;
export const D3D10_MESSAGE_ID_DEVICE_IASETVERTEXBUFFERS_OFFSET_TOO_LARGE = 239;
export const D3D10_MESSAGE_ID_DEVICE_IASETVERTEXBUFFERS_BUFFERS_EMPTY = 240;
export const D3D10_MESSAGE_ID_IASETINDEXBUFFER_INVALIDBUFFER = 241;
export const D3D10_MESSAGE_ID_DEVICE_IASETINDEXBUFFER_FORMAT_INVALID = 242;
export const D3D10_MESSAGE_ID_DEVICE_IASETINDEXBUFFER_OFFSET_TOO_LARGE = 243;
export const D3D10_MESSAGE_ID_DEVICE_IASETINDEXBUFFER_OFFSET_UNALIGNED = 244;
export const D3D10_MESSAGE_ID_DEVICE_VSSETSHADERRESOURCES_VIEWS_EMPTY = 245;
export const D3D10_MESSAGE_ID_VSSETCONSTANTBUFFERS_INVALIDBUFFER = 246;
export const D3D10_MESSAGE_ID_DEVICE_VSSETCONSTANTBUFFERS_BUFFERS_EMPTY = 247;
export const D3D10_MESSAGE_ID_DEVICE_VSSETSAMPLERS_SAMPLERS_EMPTY = 248;
export const D3D10_MESSAGE_ID_DEVICE_GSSETSHADERRESOURCES_VIEWS_EMPTY = 249;
export const D3D10_MESSAGE_ID_GSSETCONSTANTBUFFERS_INVALIDBUFFER = 250;
export const D3D10_MESSAGE_ID_DEVICE_GSSETCONSTANTBUFFERS_BUFFERS_EMPTY = 251;
export const D3D10_MESSAGE_ID_DEVICE_GSSETSAMPLERS_SAMPLERS_EMPTY = 252;
export const D3D10_MESSAGE_ID_SOSETTARGETS_INVALIDBUFFER = 253;
export const D3D10_MESSAGE_ID_DEVICE_SOSETTARGETS_OFFSET_UNALIGNED = 254;
export const D3D10_MESSAGE_ID_DEVICE_PSSETSHADERRESOURCES_VIEWS_EMPTY = 255;
export const D3D10_MESSAGE_ID_PSSETCONSTANTBUFFERS_INVALIDBUFFER = 256;
export const D3D10_MESSAGE_ID_DEVICE_PSSETCONSTANTBUFFERS_BUFFERS_EMPTY = 257;
export const D3D10_MESSAGE_ID_DEVICE_PSSETSAMPLERS_SAMPLERS_EMPTY = 258;
export const D3D10_MESSAGE_ID_DEVICE_RSSETVIEWPORTS_INVALIDVIEWPORT = 259;
export const D3D10_MESSAGE_ID_DEVICE_RSSETSCISSORRECTS_INVALIDSCISSOR = 260;
export const D3D10_MESSAGE_ID_CLEARRENDERTARGETVIEW_DENORMFLUSH = 261;
export const D3D10_MESSAGE_ID_CLEARDEPTHSTENCILVIEW_DENORMFLUSH = 262;
export const D3D10_MESSAGE_ID_CLEARDEPTHSTENCILVIEW_INVALID = 263;
export const D3D10_MESSAGE_ID_DEVICE_IAGETVERTEXBUFFERS_BUFFERS_EMPTY = 264;
export const D3D10_MESSAGE_ID_DEVICE_VSGETSHADERRESOURCES_VIEWS_EMPTY = 265;
export const D3D10_MESSAGE_ID_DEVICE_VSGETCONSTANTBUFFERS_BUFFERS_EMPTY = 266;
export const D3D10_MESSAGE_ID_DEVICE_VSGETSAMPLERS_SAMPLERS_EMPTY = 267;
export const D3D10_MESSAGE_ID_DEVICE_GSGETSHADERRESOURCES_VIEWS_EMPTY = 268;
export const D3D10_MESSAGE_ID_DEVICE_GSGETCONSTANTBUFFERS_BUFFERS_EMPTY = 269;
export const D3D10_MESSAGE_ID_DEVICE_GSGETSAMPLERS_SAMPLERS_EMPTY = 270;
export const D3D10_MESSAGE_ID_DEVICE_SOGETTARGETS_BUFFERS_EMPTY = 271;
export const D3D10_MESSAGE_ID_DEVICE_PSGETSHADERRESOURCES_VIEWS_EMPTY = 272;
export const D3D10_MESSAGE_ID_DEVICE_PSGETCONSTANTBUFFERS_BUFFERS_EMPTY = 273;
export const D3D10_MESSAGE_ID_DEVICE_PSGETSAMPLERS_SAMPLERS_EMPTY = 274;
export const D3D10_MESSAGE_ID_DEVICE_RSGETVIEWPORTS_VIEWPORTS_EMPTY = 275;
export const D3D10_MESSAGE_ID_DEVICE_RSGETSCISSORRECTS_RECTS_EMPTY = 276;
export const D3D10_MESSAGE_ID_DEVICE_GENERATEMIPS_RESOURCE_INVALID = 277;
export const D3D10_MESSAGE_ID_COPYSUBRESOURCEREGION_INVALIDDESTINATIONSUBRESOURCE = 278;
export const D3D10_MESSAGE_ID_COPYSUBRESOURCEREGION_INVALIDSOURCESUBRESOURCE = 279;
export const D3D10_MESSAGE_ID_COPYSUBRESOURCEREGION_INVALIDSOURCEBOX = 280;
export const D3D10_MESSAGE_ID_COPYSUBRESOURCEREGION_INVALIDSOURCE = 281;
export const D3D10_MESSAGE_ID_COPYSUBRESOURCEREGION_INVALIDDESTINATIONSTATE = 282;
export const D3D10_MESSAGE_ID_COPYSUBRESOURCEREGION_INVALIDSOURCESTATE = 283;
export const D3D10_MESSAGE_ID_COPYRESOURCE_INVALIDSOURCE = 284;
export const D3D10_MESSAGE_ID_COPYRESOURCE_INVALIDDESTINATIONSTATE = 285;
export const D3D10_MESSAGE_ID_COPYRESOURCE_INVALIDSOURCESTATE = 286;
export const D3D10_MESSAGE_ID_UPDATESUBRESOURCE_INVALIDDESTINATIONSUBRESOURCE = 287;
export const D3D10_MESSAGE_ID_UPDATESUBRESOURCE_INVALIDDESTINATIONBOX = 288;
export const D3D10_MESSAGE_ID_UPDATESUBRESOURCE_INVALIDDESTINATIONSTATE = 289;
export const D3D10_MESSAGE_ID_DEVICE_RESOLVESUBRESOURCE_DESTINATION_INVALID = 290;
export const D3D10_MESSAGE_ID_DEVICE_RESOLVESUBRESOURCE_DESTINATION_SUBRESOURCE_INVALID = 291;
export const D3D10_MESSAGE_ID_DEVICE_RESOLVESUBRESOURCE_SOURCE_INVALID = 292;
export const D3D10_MESSAGE_ID_DEVICE_RESOLVESUBRESOURCE_SOURCE_SUBRESOURCE_INVALID = 293;
export const D3D10_MESSAGE_ID_DEVICE_RESOLVESUBRESOURCE_FORMAT_INVALID = 294;
export const D3D10_MESSAGE_ID_BUFFER_MAP_INVALIDMAPTYPE = 295;
export const D3D10_MESSAGE_ID_BUFFER_MAP_INVALIDFLAGS = 296;
export const D3D10_MESSAGE_ID_BUFFER_MAP_ALREADYMAPPED = 297;
export const D3D10_MESSAGE_ID_BUFFER_MAP_DEVICEREMOVED_RETURN = 298;
export const D3D10_MESSAGE_ID_BUFFER_UNMAP_NOTMAPPED = 299;
export const D3D10_MESSAGE_ID_TEXTURE1D_MAP_INVALIDMAPTYPE = 300;
export const D3D10_MESSAGE_ID_TEXTURE1D_MAP_INVALIDSUBRESOURCE = 301;
export const D3D10_MESSAGE_ID_TEXTURE1D_MAP_INVALIDFLAGS = 302;
export const D3D10_MESSAGE_ID_TEXTURE1D_MAP_ALREADYMAPPED = 303;
export const D3D10_MESSAGE_ID_TEXTURE1D_MAP_DEVICEREMOVED_RETURN = 304;
export const D3D10_MESSAGE_ID_TEXTURE1D_UNMAP_INVALIDSUBRESOURCE = 305;
export const D3D10_MESSAGE_ID_TEXTURE1D_UNMAP_NOTMAPPED = 306;
export const D3D10_MESSAGE_ID_TEXTURE2D_MAP_INVALIDMAPTYPE = 307;
export const D3D10_MESSAGE_ID_TEXTURE2D_MAP_INVALIDSUBRESOURCE = 308;
export const D3D10_MESSAGE_ID_TEXTURE2D_MAP_INVALIDFLAGS = 309;
export const D3D10_MESSAGE_ID_TEXTURE2D_MAP_ALREADYMAPPED = 310;
export const D3D10_MESSAGE_ID_TEXTURE2D_MAP_DEVICEREMOVED_RETURN = 311;
export const D3D10_MESSAGE_ID_TEXTURE2D_UNMAP_INVALIDSUBRESOURCE = 312;
export const D3D10_MESSAGE_ID_TEXTURE2D_UNMAP_NOTMAPPED = 313;
export const D3D10_MESSAGE_ID_TEXTURE3D_MAP_INVALIDMAPTYPE = 314;
export const D3D10_MESSAGE_ID_TEXTURE3D_MAP_INVALIDSUBRESOURCE = 315;
export const D3D10_MESSAGE_ID_TEXTURE3D_MAP_INVALIDFLAGS = 316;
export const D3D10_MESSAGE_ID_TEXTURE3D_MAP_ALREADYMAPPED = 317;
export const D3D10_MESSAGE_ID_TEXTURE3D_MAP_DEVICEREMOVED_RETURN = 318;
export const D3D10_MESSAGE_ID_TEXTURE3D_UNMAP_INVALIDSUBRESOURCE = 319;
export const D3D10_MESSAGE_ID_TEXTURE3D_UNMAP_NOTMAPPED = 320;
export const D3D10_MESSAGE_ID_CHECKFORMATSUPPORT_FORMAT_DEPRECATED = 321;
export const D3D10_MESSAGE_ID_CHECKMULTISAMPLEQUALITYLEVELS_FORMAT_DEPRECATED = 322;
export const D3D10_MESSAGE_ID_SETEXCEPTIONMODE_UNRECOGNIZEDFLAGS = 323;
export const D3D10_MESSAGE_ID_SETEXCEPTIONMODE_INVALIDARG_RETURN = 324;
export const D3D10_MESSAGE_ID_SETEXCEPTIONMODE_DEVICEREMOVED_RETURN = 325;
export const D3D10_MESSAGE_ID_REF_SIMULATING_INFINITELY_FAST_HARDWARE = 326;
export const D3D10_MESSAGE_ID_REF_THREADING_MODE = 327;
export const D3D10_MESSAGE_ID_REF_UMDRIVER_EXCEPTION = 328;
export const D3D10_MESSAGE_ID_REF_KMDRIVER_EXCEPTION = 329;
export const D3D10_MESSAGE_ID_REF_HARDWARE_EXCEPTION = 330;
export const D3D10_MESSAGE_ID_REF_ACCESSING_INDEXABLE_TEMP_OUT_OF_RANGE = 331;
export const D3D10_MESSAGE_ID_REF_PROBLEM_PARSING_SHADER = 332;
export const D3D10_MESSAGE_ID_REF_OUT_OF_MEMORY = 333;
export const D3D10_MESSAGE_ID_REF_INFO = 334;
export const D3D10_MESSAGE_ID_DEVICE_DRAW_VERTEXPOS_OVERFLOW = 335;
export const D3D10_MESSAGE_ID_DEVICE_DRAWINDEXED_INDEXPOS_OVERFLOW = 336;
export const D3D10_MESSAGE_ID_DEVICE_DRAWINSTANCED_VERTEXPOS_OVERFLOW = 337;
export const D3D10_MESSAGE_ID_DEVICE_DRAWINSTANCED_INSTANCEPOS_OVERFLOW = 338;
export const D3D10_MESSAGE_ID_DEVICE_DRAWINDEXEDINSTANCED_INSTANCEPOS_OVERFLOW = 339;
export const D3D10_MESSAGE_ID_DEVICE_DRAWINDEXEDINSTANCED_INDEXPOS_OVERFLOW = 340;
export const D3D10_MESSAGE_ID_DEVICE_DRAW_VERTEX_SHADER_NOT_SET = 341;
export const D3D10_MESSAGE_ID_DEVICE_SHADER_LINKAGE_SEMANTICNAME_NOT_FOUND = 342;
export const D3D10_MESSAGE_ID_DEVICE_SHADER_LINKAGE_REGISTERINDEX = 343;
export const D3D10_MESSAGE_ID_DEVICE_SHADER_LINKAGE_COMPONENTTYPE = 344;
export const D3D10_MESSAGE_ID_DEVICE_SHADER_LINKAGE_REGISTERMASK = 345;
export const D3D10_MESSAGE_ID_DEVICE_SHADER_LINKAGE_SYSTEMVALUE = 346;
export const D3D10_MESSAGE_ID_DEVICE_SHADER_LINKAGE_NEVERWRITTEN_ALWAYSREADS = 347;
export const D3D10_MESSAGE_ID_DEVICE_DRAW_VERTEX_BUFFER_NOT_SET = 348;
export const D3D10_MESSAGE_ID_DEVICE_DRAW_INPUTLAYOUT_NOT_SET = 349;
export const D3D10_MESSAGE_ID_DEVICE_DRAW_CONSTANT_BUFFER_NOT_SET = 350;
export const D3D10_MESSAGE_ID_DEVICE_DRAW_CONSTANT_BUFFER_TOO_SMALL = 351;
export const D3D10_MESSAGE_ID_DEVICE_DRAW_SAMPLER_NOT_SET = 352;
export const D3D10_MESSAGE_ID_DEVICE_DRAW_SHADERRESOURCEVIEW_NOT_SET = 353;
export const D3D10_MESSAGE_ID_DEVICE_DRAW_VIEW_DIMENSION_MISMATCH = 354;
export const D3D10_MESSAGE_ID_DEVICE_DRAW_VERTEX_BUFFER_STRIDE_TOO_SMALL = 355;
export const D3D10_MESSAGE_ID_DEVICE_DRAW_VERTEX_BUFFER_TOO_SMALL = 356;
export const D3D10_MESSAGE_ID_DEVICE_DRAW_INDEX_BUFFER_NOT_SET = 357;
export const D3D10_MESSAGE_ID_DEVICE_DRAW_INDEX_BUFFER_FORMAT_INVALID = 358;
export const D3D10_MESSAGE_ID_DEVICE_DRAW_INDEX_BUFFER_TOO_SMALL = 359;
export const D3D10_MESSAGE_ID_DEVICE_DRAW_GS_INPUT_PRIMITIVE_MISMATCH = 360;
export const D3D10_MESSAGE_ID_DEVICE_DRAW_RESOURCE_RETURN_TYPE_MISMATCH = 361;
export const D3D10_MESSAGE_ID_DEVICE_DRAW_POSITION_NOT_PRESENT = 362;
export const D3D10_MESSAGE_ID_DEVICE_DRAW_OUTPUT_STREAM_NOT_SET = 363;
export const D3D10_MESSAGE_ID_DEVICE_DRAW_BOUND_RESOURCE_MAPPED = 364;
export const D3D10_MESSAGE_ID_DEVICE_DRAW_INVALID_PRIMITIVETOPOLOGY = 365;
export const D3D10_MESSAGE_ID_DEVICE_DRAW_VERTEX_OFFSET_UNALIGNED = 366;
export const D3D10_MESSAGE_ID_DEVICE_DRAW_VERTEX_STRIDE_UNALIGNED = 367;
export const D3D10_MESSAGE_ID_DEVICE_DRAW_INDEX_OFFSET_UNALIGNED = 368;
export const D3D10_MESSAGE_ID_DEVICE_DRAW_OUTPUT_STREAM_OFFSET_UNALIGNED = 369;
export const D3D10_MESSAGE_ID_DEVICE_DRAW_RESOURCE_FORMAT_LD_UNSUPPORTED = 370;
export const D3D10_MESSAGE_ID_DEVICE_DRAW_RESOURCE_FORMAT_SAMPLE_UNSUPPORTED = 371;
export const D3D10_MESSAGE_ID_DEVICE_DRAW_RESOURCE_FORMAT_SAMPLE_C_UNSUPPORTED = 372;
export const D3D10_MESSAGE_ID_DEVICE_DRAW_RESOURCE_MULTISAMPLE_UNSUPPORTED = 373;
export const D3D10_MESSAGE_ID_DEVICE_DRAW_SO_TARGETS_BOUND_WITHOUT_SOURCE = 374;
export const D3D10_MESSAGE_ID_DEVICE_DRAW_SO_STRIDE_LARGER_THAN_BUFFER = 375;
export const D3D10_MESSAGE_ID_DEVICE_DRAW_OM_RENDER_TARGET_DOES_NOT_SUPPORT_BLENDING = 376;
export const D3D10_MESSAGE_ID_DEVICE_DRAW_OM_DUAL_SOURCE_BLENDING_CAN_ONLY_HAVE_RENDER_TARGET_0 = 377;
export const D3D10_MESSAGE_ID_DEVICE_REMOVAL_PROCESS_AT_FAULT = 378;
export const D3D10_MESSAGE_ID_DEVICE_REMOVAL_PROCESS_POSSIBLY_AT_FAULT = 379;
export const D3D10_MESSAGE_ID_DEVICE_REMOVAL_PROCESS_NOT_AT_FAULT = 380;
export const D3D10_MESSAGE_ID_DEVICE_OPEN_SHARED_RESOURCE_INVALIDARG_RETURN = 381;
export const D3D10_MESSAGE_ID_DEVICE_OPEN_SHARED_RESOURCE_OUTOFMEMORY_RETURN = 382;
export const D3D10_MESSAGE_ID_DEVICE_OPEN_SHARED_RESOURCE_BADINTERFACE_RETURN = 383;
export const D3D10_MESSAGE_ID_DEVICE_DRAW_VIEWPORT_NOT_SET = 384;
export const D3D10_MESSAGE_ID_CREATEINPUTLAYOUT_TRAILING_DIGIT_IN_SEMANTIC = 385;
export const D3D10_MESSAGE_ID_CREATEGEOMETRYSHADERWITHSTREAMOUTPUT_TRAILING_DIGIT_IN_SEMANTIC = 386;
export const D3D10_MESSAGE_ID_DEVICE_RSSETVIEWPORTS_DENORMFLUSH = 387;
export const D3D10_MESSAGE_ID_OMSETRENDERTARGETS_INVALIDVIEW = 388;
export const D3D10_MESSAGE_ID_DEVICE_SETTEXTFILTERSIZE_INVALIDDIMENSIONS = 389;
export const D3D10_MESSAGE_ID_DEVICE_DRAW_SAMPLER_MISMATCH = 390;
export const D3D10_MESSAGE_ID_CREATEINPUTLAYOUT_TYPE_MISMATCH = 391;
export const D3D10_MESSAGE_ID_BLENDSTATE_GETDESC_LEGACY = 392;
export const D3D10_MESSAGE_ID_SHADERRESOURCEVIEW_GETDESC_LEGACY = 393;
export const D3D10_MESSAGE_ID_CREATEQUERY_OUTOFMEMORY_RETURN = 394;
export const D3D10_MESSAGE_ID_CREATEPREDICATE_OUTOFMEMORY_RETURN = 395;
export const D3D10_MESSAGE_ID_CREATECOUNTER_OUTOFRANGE_COUNTER = 396;
export const D3D10_MESSAGE_ID_CREATECOUNTER_SIMULTANEOUS_ACTIVE_COUNTERS_EXHAUSTED = 397;
export const D3D10_MESSAGE_ID_CREATECOUNTER_UNSUPPORTED_WELLKNOWN_COUNTER = 398;
export const D3D10_MESSAGE_ID_CREATECOUNTER_OUTOFMEMORY_RETURN = 399;
export const D3D10_MESSAGE_ID_CREATECOUNTER_NONEXCLUSIVE_RETURN = 400;
export const D3D10_MESSAGE_ID_CREATECOUNTER_NULLDESC = 401;
export const D3D10_MESSAGE_ID_CHECKCOUNTER_OUTOFRANGE_COUNTER = 402;
export const D3D10_MESSAGE_ID_CHECKCOUNTER_UNSUPPORTED_WELLKNOWN_COUNTER = 403;
export const D3D10_MESSAGE_ID_SETPREDICATION_INVALID_PREDICATE_STATE = 404;
export const D3D10_MESSAGE_ID_QUERY_BEGIN_UNSUPPORTED = 405;
export const D3D10_MESSAGE_ID_PREDICATE_BEGIN_DURING_PREDICATION = 406;
export const D3D10_MESSAGE_ID_QUERY_BEGIN_DUPLICATE = 407;
export const D3D10_MESSAGE_ID_QUERY_BEGIN_ABANDONING_PREVIOUS_RESULTS = 408;
export const D3D10_MESSAGE_ID_PREDICATE_END_DURING_PREDICATION = 409;
export const D3D10_MESSAGE_ID_QUERY_END_ABANDONING_PREVIOUS_RESULTS = 410;
export const D3D10_MESSAGE_ID_QUERY_END_WITHOUT_BEGIN = 411;
export const D3D10_MESSAGE_ID_QUERY_GETDATA_INVALID_DATASIZE = 412;
export const D3D10_MESSAGE_ID_QUERY_GETDATA_INVALID_FLAGS = 413;
export const D3D10_MESSAGE_ID_QUERY_GETDATA_INVALID_CALL = 414;
export const D3D10_MESSAGE_ID_DEVICE_DRAW_PS_OUTPUT_TYPE_MISMATCH = 415;
export const D3D10_MESSAGE_ID_DEVICE_DRAW_RESOURCE_FORMAT_GATHER_UNSUPPORTED = 416;
export const D3D10_MESSAGE_ID_DEVICE_DRAW_INVALID_USE_OF_CENTER_MULTISAMPLE_PATTERN = 417;
export const D3D10_MESSAGE_ID_DEVICE_IASETVERTEXBUFFERS_STRIDE_TOO_LARGE = 418;
export const D3D10_MESSAGE_ID_DEVICE_IASETVERTEXBUFFERS_INVALIDRANGE = 419;
export const D3D10_MESSAGE_ID_CREATEINPUTLAYOUT_EMPTY_LAYOUT = 420;
export const D3D10_MESSAGE_ID_DEVICE_DRAW_RESOURCE_SAMPLE_COUNT_MISMATCH = 421;
export const D3D10_MESSAGE_ID_LIVE_OBJECT_SUMMARY = 422;
export const D3D10_MESSAGE_ID_LIVE_BUFFER = 423;
export const D3D10_MESSAGE_ID_LIVE_TEXTURE1D = 424;
export const D3D10_MESSAGE_ID_LIVE_TEXTURE2D = 425;
export const D3D10_MESSAGE_ID_LIVE_TEXTURE3D = 426;
export const D3D10_MESSAGE_ID_LIVE_SHADERRESOURCEVIEW = 427;
export const D3D10_MESSAGE_ID_LIVE_RENDERTARGETVIEW = 428;
export const D3D10_MESSAGE_ID_LIVE_DEPTHSTENCILVIEW = 429;
export const D3D10_MESSAGE_ID_LIVE_VERTEXSHADER = 430;
export const D3D10_MESSAGE_ID_LIVE_GEOMETRYSHADER = 431;
export const D3D10_MESSAGE_ID_LIVE_PIXELSHADER = 432;
export const D3D10_MESSAGE_ID_LIVE_INPUTLAYOUT = 433;
export const D3D10_MESSAGE_ID_LIVE_SAMPLER = 434;
export const D3D10_MESSAGE_ID_LIVE_BLENDSTATE = 435;
export const D3D10_MESSAGE_ID_LIVE_DEPTHSTENCILSTATE = 436;
export const D3D10_MESSAGE_ID_LIVE_RASTERIZERSTATE = 437;
export const D3D10_MESSAGE_ID_LIVE_QUERY = 438;
export const D3D10_MESSAGE_ID_LIVE_PREDICATE = 439;
export const D3D10_MESSAGE_ID_LIVE_COUNTER = 440;
export const D3D10_MESSAGE_ID_LIVE_DEVICE = 441;
export const D3D10_MESSAGE_ID_LIVE_SWAPCHAIN = 442;
export const D3D10_MESSAGE_ID_D3D10_MESSAGES_END = 443;
export const D3D10_MESSAGE_ID_D3D10L9_MESSAGES_START = 1048576;
export const D3D10_MESSAGE_ID_CREATEDEPTHSTENCILSTATE_STENCIL_NO_TWO_SIDED = 1048577;
export const D3D10_MESSAGE_ID_CREATERASTERIZERSTATE_DepthBiasClamp_NOT_SUPPORTED = 1048578;
export const D3D10_MESSAGE_ID_CREATESAMPLERSTATE_NO_COMPARISON_SUPPORT = 1048579;
export const D3D10_MESSAGE_ID_CREATESAMPLERSTATE_EXCESSIVE_ANISOTROPY = 1048580;
export const D3D10_MESSAGE_ID_CREATESAMPLERSTATE_BORDER_OUT_OF_RANGE = 1048581;
export const D3D10_MESSAGE_ID_VSSETSAMPLERS_NOT_SUPPORTED = 1048582;
export const D3D10_MESSAGE_ID_VSSETSAMPLERS_TOO_MANY_SAMPLERS = 1048583;
export const D3D10_MESSAGE_ID_PSSETSAMPLERS_TOO_MANY_SAMPLERS = 1048584;
export const D3D10_MESSAGE_ID_CREATERESOURCE_NO_ARRAYS = 1048585;
export const D3D10_MESSAGE_ID_CREATERESOURCE_NO_VB_AND_IB_BIND = 1048586;
export const D3D10_MESSAGE_ID_CREATERESOURCE_NO_TEXTURE_1D = 1048587;
export const D3D10_MESSAGE_ID_CREATERESOURCE_DIMENSION_OUT_OF_RANGE = 1048588;
export const D3D10_MESSAGE_ID_CREATERESOURCE_NOT_BINDABLE_AS_SHADER_RESOURCE = 1048589;
export const D3D10_MESSAGE_ID_OMSETRENDERTARGETS_TOO_MANY_RENDER_TARGETS = 1048590;
export const D3D10_MESSAGE_ID_OMSETRENDERTARGETS_NO_DIFFERING_BIT_DEPTHS = 1048591;
export const D3D10_MESSAGE_ID_IASETVERTEXBUFFERS_BAD_BUFFER_INDEX = 1048592;
export const D3D10_MESSAGE_ID_DEVICE_RSSETVIEWPORTS_TOO_MANY_VIEWPORTS = 1048593;
export const D3D10_MESSAGE_ID_DEVICE_IASETPRIMITIVETOPOLOGY_ADJACENCY_UNSUPPORTED = 1048594;
export const D3D10_MESSAGE_ID_DEVICE_RSSETSCISSORRECTS_TOO_MANY_SCISSORS = 1048595;
export const D3D10_MESSAGE_ID_COPYRESOURCE_ONLY_TEXTURE_2D_WITHIN_GPU_MEMORY = 1048596;
export const D3D10_MESSAGE_ID_COPYRESOURCE_NO_TEXTURE_3D_READBACK = 1048597;
export const D3D10_MESSAGE_ID_COPYRESOURCE_NO_TEXTURE_ONLY_READBACK = 1048598;
export const D3D10_MESSAGE_ID_CREATEINPUTLAYOUT_UNSUPPORTED_FORMAT = 1048599;
export const D3D10_MESSAGE_ID_CREATEBLENDSTATE_NO_ALPHA_TO_COVERAGE = 1048600;
export const D3D10_MESSAGE_ID_CREATERASTERIZERSTATE_DepthClipEnable_MUST_BE_TRUE = 1048601;
export const D3D10_MESSAGE_ID_DRAWINDEXED_STARTINDEXLOCATION_MUST_BE_POSITIVE = 1048602;
export const D3D10_MESSAGE_ID_CREATESHADERRESOURCEVIEW_MUST_USE_LOWEST_LOD = 1048603;
export const D3D10_MESSAGE_ID_CREATESAMPLERSTATE_MINLOD_MUST_NOT_BE_FRACTIONAL = 1048604;
export const D3D10_MESSAGE_ID_CREATESAMPLERSTATE_MAXLOD_MUST_BE_FLT_MAX = 1048605;
export const D3D10_MESSAGE_ID_CREATESHADERRESOURCEVIEW_FIRSTARRAYSLICE_MUST_BE_ZERO = 1048606;
export const D3D10_MESSAGE_ID_CREATESHADERRESOURCEVIEW_CUBES_MUST_HAVE_6_SIDES = 1048607;
export const D3D10_MESSAGE_ID_CREATERESOURCE_NOT_BINDABLE_AS_RENDER_TARGET = 1048608;
export const D3D10_MESSAGE_ID_CREATERESOURCE_NO_DWORD_INDEX_BUFFER = 1048609;
export const D3D10_MESSAGE_ID_CREATERESOURCE_MSAA_PRECLUDES_SHADER_RESOURCE = 1048610;
export const D3D10_MESSAGE_ID_CREATERESOURCE_PRESENTATION_PRECLUDES_SHADER_RESOURCE = 1048611;
export const D3D10_MESSAGE_ID_CREATEBLENDSTATE_NO_INDEPENDENT_BLEND_ENABLE = 1048612;
export const D3D10_MESSAGE_ID_CREATEBLENDSTATE_NO_INDEPENDENT_WRITE_MASKS = 1048613;
export const D3D10_MESSAGE_ID_CREATERESOURCE_NO_STREAM_OUT = 1048614;
export const D3D10_MESSAGE_ID_CREATERESOURCE_ONLY_VB_IB_FOR_BUFFERS = 1048615;
export const D3D10_MESSAGE_ID_CREATERESOURCE_NO_AUTOGEN_FOR_VOLUMES = 1048616;
export const D3D10_MESSAGE_ID_CREATERESOURCE_DXGI_FORMAT_R8G8B8A8_CANNOT_BE_SHARED = 1048617;
export const D3D10_MESSAGE_ID_VSSHADERRESOURCES_NOT_SUPPORTED = 1048618;
export const D3D10_MESSAGE_ID_GEOMETRY_SHADER_NOT_SUPPORTED = 1048619;
export const D3D10_MESSAGE_ID_STREAM_OUT_NOT_SUPPORTED = 1048620;
export const D3D10_MESSAGE_ID_TEXT_FILTER_NOT_SUPPORTED = 1048621;
export const D3D10_MESSAGE_ID_CREATEBLENDSTATE_NO_SEPARATE_ALPHA_BLEND = 1048622;
export const D3D10_MESSAGE_ID_CREATEBLENDSTATE_NO_MRT_BLEND = 1048623;
export const D3D10_MESSAGE_ID_CREATEBLENDSTATE_OPERATION_NOT_SUPPORTED = 1048624;
export const D3D10_MESSAGE_ID_CREATESAMPLERSTATE_NO_MIRRORONCE = 1048625;
export const D3D10_MESSAGE_ID_DRAWINSTANCED_NOT_SUPPORTED = 1048626;
export const D3D10_MESSAGE_ID_DRAWINDEXEDINSTANCED_NOT_SUPPORTED_BELOW_9_3 = 1048627;
export const D3D10_MESSAGE_ID_DRAWINDEXED_POINTLIST_UNSUPPORTED = 1048628;
export const D3D10_MESSAGE_ID_SETBLENDSTATE_SAMPLE_MASK_CANNOT_BE_ZERO = 1048629;
export const D3D10_MESSAGE_ID_CREATERESOURCE_DIMENSION_EXCEEDS_FEATURE_LEVEL_DEFINITION = 1048630;
export const D3D10_MESSAGE_ID_CREATERESOURCE_ONLY_SINGLE_MIP_LEVEL_DEPTH_STENCIL_SUPPORTED = 1048631;
export const D3D10_MESSAGE_ID_DEVICE_RSSETSCISSORRECTS_NEGATIVESCISSOR = 1048632;
export const D3D10_MESSAGE_ID_SLOT_ZERO_MUST_BE_D3D10_INPUT_PER_VERTEX_DATA = 1048633;
export const D3D10_MESSAGE_ID_CREATERESOURCE_NON_POW_2_MIPMAP = 1048634;
export const D3D10_MESSAGE_ID_CREATESAMPLERSTATE_BORDER_NOT_SUPPORTED = 1048635;
export const D3D10_MESSAGE_ID_OMSETRENDERTARGETS_NO_SRGB_MRT = 1048636;
export const D3D10_MESSAGE_ID_COPYRESOURCE_NO_3D_MISMATCHED_UPDATES = 1048637;
export const D3D10_MESSAGE_ID_D3D10L9_MESSAGES_END = 1048638;
export const D3D10_DRIVER_TYPE_HARDWARE = 0;
export const D3D10_DRIVER_TYPE_REFERENCE = 1;
export const D3D10_DRIVER_TYPE_NULL = 2;
export const D3D10_DRIVER_TYPE_SOFTWARE = 3;
export const D3D10_DRIVER_TYPE_WARP = 5;
export const D3D10_DST_SO_BUFFERS = 1;
export const D3D10_DST_OM_RENDER_TARGETS = 2;
export const D3D10_DST_OM_DEPTH_STENCIL_STATE = 3;
export const D3D10_DST_OM_BLEND_STATE = 4;
export const D3D10_DST_VS = 5;
export const D3D10_DST_VS_SAMPLERS = 6;
export const D3D10_DST_VS_SHADER_RESOURCES = 7;
export const D3D10_DST_VS_CONSTANT_BUFFERS = 8;
export const D3D10_DST_GS = 9;
export const D3D10_DST_GS_SAMPLERS = 10;
export const D3D10_DST_GS_SHADER_RESOURCES = 11;
export const D3D10_DST_GS_CONSTANT_BUFFERS = 12;
export const D3D10_DST_PS = 13;
export const D3D10_DST_PS_SAMPLERS = 14;
export const D3D10_DST_PS_SHADER_RESOURCES = 15;
export const D3D10_DST_PS_CONSTANT_BUFFERS = 16;
export const D3D10_DST_IA_VERTEX_BUFFERS = 17;
export const D3D10_DST_IA_INDEX_BUFFER = 18;
export const D3D10_DST_IA_INPUT_LAYOUT = 19;
export const D3D10_DST_IA_PRIMITIVE_TOPOLOGY = 20;
export const D3D10_DST_RS_VIEWPORTS = 21;
export const D3D10_DST_RS_SCISSOR_RECTS = 22;
export const D3D10_DST_RS_RASTERIZER_STATE = 23;
export const D3D10_DST_PREDICATION = 24;
export const D3D10_FEATURE_LEVEL_10_0 = 40960;
export const D3D10_FEATURE_LEVEL_10_1 = 41216;
export const D3D10_FEATURE_LEVEL_9_1 = 37120;
export const D3D10_FEATURE_LEVEL_9_2 = 37376;
export const D3D10_FEATURE_LEVEL_9_3 = 37632;
export const D3D10_STANDARD_MULTISAMPLE_PATTERN = `-1`;
export const D3D10_CENTER_MULTISAMPLE_PATTERN = `-2`;
export const D3D10_SHADER_DEBUG_REG_INPUT = 0;
export const D3D10_SHADER_DEBUG_REG_OUTPUT = 1;
export const D3D10_SHADER_DEBUG_REG_CBUFFER = 2;
export const D3D10_SHADER_DEBUG_REG_TBUFFER = 3;
export const D3D10_SHADER_DEBUG_REG_TEMP = 4;
export const D3D10_SHADER_DEBUG_REG_TEMPARRAY = 5;
export const D3D10_SHADER_DEBUG_REG_TEXTURE = 6;
export const D3D10_SHADER_DEBUG_REG_SAMPLER = 7;
export const D3D10_SHADER_DEBUG_REG_IMMEDIATECBUFFER = 8;
export const D3D10_SHADER_DEBUG_REG_LITERAL = 9;
export const D3D10_SHADER_DEBUG_REG_UNUSED = 10;
export const D3D11_SHADER_DEBUG_REG_INTERFACE_POINTERS = 11;
export const D3D11_SHADER_DEBUG_REG_UAV = 12;
export const D3D10_SHADER_DEBUG_REG_FORCE_DWORD = 2147483647;
export const D3D10_SHADER_DEBUG_SCOPE_GLOBAL = 0;
export const D3D10_SHADER_DEBUG_SCOPE_BLOCK = 1;
export const D3D10_SHADER_DEBUG_SCOPE_FORLOOP = 2;
export const D3D10_SHADER_DEBUG_SCOPE_STRUCT = 3;
export const D3D10_SHADER_DEBUG_SCOPE_FUNC_PARAMS = 4;
export const D3D10_SHADER_DEBUG_SCOPE_STATEBLOCK = 5;
export const D3D10_SHADER_DEBUG_SCOPE_NAMESPACE = 6;
export const D3D10_SHADER_DEBUG_SCOPE_ANNOTATION = 7;
export const D3D10_SHADER_DEBUG_SCOPE_FORCE_DWORD = 2147483647;
export const D3D10_SHADER_DEBUG_VAR_VARIABLE = 0;
export const D3D10_SHADER_DEBUG_VAR_FUNCTION = 1;
export const D3D10_SHADER_DEBUG_VAR_FORCE_DWORD = 2147483647;
export const D3D11_INPUT_PER_VERTEX_DATA = 0;
export const D3D11_INPUT_PER_INSTANCE_DATA = 1;
export const D3D11_FILL_WIREFRAME = 2;
export const D3D11_FILL_SOLID = 3;
export const D3D11_CULL_NONE = 1;
export const D3D11_CULL_FRONT = 2;
export const D3D11_CULL_BACK = 3;
export const D3D11_RESOURCE_DIMENSION_UNKNOWN = 0;
export const D3D11_RESOURCE_DIMENSION_BUFFER = 1;
export const D3D11_RESOURCE_DIMENSION_TEXTURE1D = 2;
export const D3D11_RESOURCE_DIMENSION_TEXTURE2D = 3;
export const D3D11_RESOURCE_DIMENSION_TEXTURE3D = 4;
export const D3D11_DSV_DIMENSION_UNKNOWN = 0;
export const D3D11_DSV_DIMENSION_TEXTURE1D = 1;
export const D3D11_DSV_DIMENSION_TEXTURE1DARRAY = 2;
export const D3D11_DSV_DIMENSION_TEXTURE2D = 3;
export const D3D11_DSV_DIMENSION_TEXTURE2DARRAY = 4;
export const D3D11_DSV_DIMENSION_TEXTURE2DMS = 5;
export const D3D11_DSV_DIMENSION_TEXTURE2DMSARRAY = 6;
export const D3D11_RTV_DIMENSION_UNKNOWN = 0;
export const D3D11_RTV_DIMENSION_BUFFER = 1;
export const D3D11_RTV_DIMENSION_TEXTURE1D = 2;
export const D3D11_RTV_DIMENSION_TEXTURE1DARRAY = 3;
export const D3D11_RTV_DIMENSION_TEXTURE2D = 4;
export const D3D11_RTV_DIMENSION_TEXTURE2DARRAY = 5;
export const D3D11_RTV_DIMENSION_TEXTURE2DMS = 6;
export const D3D11_RTV_DIMENSION_TEXTURE2DMSARRAY = 7;
export const D3D11_RTV_DIMENSION_TEXTURE3D = 8;
export const D3D11_UAV_DIMENSION_UNKNOWN = 0;
export const D3D11_UAV_DIMENSION_BUFFER = 1;
export const D3D11_UAV_DIMENSION_TEXTURE1D = 2;
export const D3D11_UAV_DIMENSION_TEXTURE1DARRAY = 3;
export const D3D11_UAV_DIMENSION_TEXTURE2D = 4;
export const D3D11_UAV_DIMENSION_TEXTURE2DARRAY = 5;
export const D3D11_UAV_DIMENSION_TEXTURE3D = 8;
export const D3D11_USAGE_DEFAULT = 0;
export const D3D11_USAGE_IMMUTABLE = 1;
export const D3D11_USAGE_DYNAMIC = 2;
export const D3D11_USAGE_STAGING = 3;
export const D3D11_BIND_VERTEX_BUFFER = 1;
export const D3D11_BIND_INDEX_BUFFER = 2;
export const D3D11_BIND_CONSTANT_BUFFER = 4;
export const D3D11_BIND_SHADER_RESOURCE = 8;
export const D3D11_BIND_STREAM_OUTPUT = 16;
export const D3D11_BIND_RENDER_TARGET = 32;
export const D3D11_BIND_DEPTH_STENCIL = 64;
export const D3D11_BIND_UNORDERED_ACCESS = 128;
export const D3D11_BIND_DECODER = 512;
export const D3D11_BIND_VIDEO_ENCODER = 1024;
export const D3D11_CPU_ACCESS_WRITE = 65536;
export const D3D11_CPU_ACCESS_READ = 131072;
export const D3D11_RESOURCE_MISC_GENERATE_MIPS = 1;
export const D3D11_RESOURCE_MISC_SHARED = 2;
export const D3D11_RESOURCE_MISC_TEXTURECUBE = 4;
export const D3D11_RESOURCE_MISC_DRAWINDIRECT_ARGS = 16;
export const D3D11_RESOURCE_MISC_BUFFER_ALLOW_RAW_VIEWS = 32;
export const D3D11_RESOURCE_MISC_BUFFER_STRUCTURED = 64;
export const D3D11_RESOURCE_MISC_RESOURCE_CLAMP = 128;
export const D3D11_RESOURCE_MISC_SHARED_KEYEDMUTEX = 256;
export const D3D11_RESOURCE_MISC_GDI_COMPATIBLE = 512;
export const D3D11_RESOURCE_MISC_SHARED_NTHANDLE = 2048;
export const D3D11_RESOURCE_MISC_RESTRICTED_CONTENT = 4096;
export const D3D11_RESOURCE_MISC_RESTRICT_SHARED_RESOURCE = 8192;
export const D3D11_RESOURCE_MISC_RESTRICT_SHARED_RESOURCE_DRIVER = 16384;
export const D3D11_RESOURCE_MISC_GUARDED = 32768;
export const D3D11_RESOURCE_MISC_TILE_POOL = 131072;
export const D3D11_RESOURCE_MISC_TILED = 262144;
export const D3D11_RESOURCE_MISC_HW_PROTECTED = 524288;
export const D3D11_RESOURCE_MISC_SHARED_DISPLAYABLE = 1048576;
export const D3D11_RESOURCE_MISC_SHARED_EXCLUSIVE_WRITER = 2097152;
export const D3D11_MAP_READ = 1;
export const D3D11_MAP_WRITE = 2;
export const D3D11_MAP_READ_WRITE = 3;
export const D3D11_MAP_WRITE_DISCARD = 4;
export const D3D11_MAP_WRITE_NO_OVERWRITE = 5;
export const D3D11_MAP_FLAG_DO_NOT_WAIT = 1048576;
export const D3D11_RAISE_FLAG_DRIVER_INTERNAL_ERROR = 1;
export const D3D11_CLEAR_DEPTH = 1;
export const D3D11_CLEAR_STENCIL = 2;
export const D3D11_COMPARISON_NEVER = 1;
export const D3D11_COMPARISON_LESS = 2;
export const D3D11_COMPARISON_EQUAL = 3;
export const D3D11_COMPARISON_LESS_EQUAL = 4;
export const D3D11_COMPARISON_GREATER = 5;
export const D3D11_COMPARISON_NOT_EQUAL = 6;
export const D3D11_COMPARISON_GREATER_EQUAL = 7;
export const D3D11_COMPARISON_ALWAYS = 8;
export const D3D11_DEPTH_WRITE_MASK_ZERO = 0;
export const D3D11_DEPTH_WRITE_MASK_ALL = 1;
export const D3D11_STENCIL_OP_KEEP = 1;
export const D3D11_STENCIL_OP_ZERO = 2;
export const D3D11_STENCIL_OP_REPLACE = 3;
export const D3D11_STENCIL_OP_INCR_SAT = 4;
export const D3D11_STENCIL_OP_DECR_SAT = 5;
export const D3D11_STENCIL_OP_INVERT = 6;
export const D3D11_STENCIL_OP_INCR = 7;
export const D3D11_STENCIL_OP_DECR = 8;
export const D3D11_BLEND_ZERO = 1;
export const D3D11_BLEND_ONE = 2;
export const D3D11_BLEND_SRC_COLOR = 3;
export const D3D11_BLEND_INV_SRC_COLOR = 4;
export const D3D11_BLEND_SRC_ALPHA = 5;
export const D3D11_BLEND_INV_SRC_ALPHA = 6;
export const D3D11_BLEND_DEST_ALPHA = 7;
export const D3D11_BLEND_INV_DEST_ALPHA = 8;
export const D3D11_BLEND_DEST_COLOR = 9;
export const D3D11_BLEND_INV_DEST_COLOR = 10;
export const D3D11_BLEND_SRC_ALPHA_SAT = 11;
export const D3D11_BLEND_BLEND_FACTOR = 14;
export const D3D11_BLEND_INV_BLEND_FACTOR = 15;
export const D3D11_BLEND_SRC1_COLOR = 16;
export const D3D11_BLEND_INV_SRC1_COLOR = 17;
export const D3D11_BLEND_SRC1_ALPHA = 18;
export const D3D11_BLEND_INV_SRC1_ALPHA = 19;
export const D3D11_BLEND_OP_ADD = 1;
export const D3D11_BLEND_OP_SUBTRACT = 2;
export const D3D11_BLEND_OP_REV_SUBTRACT = 3;
export const D3D11_BLEND_OP_MIN = 4;
export const D3D11_BLEND_OP_MAX = 5;
export const D3D11_COLOR_WRITE_ENABLE_RED = 1;
export const D3D11_COLOR_WRITE_ENABLE_GREEN = 2;
export const D3D11_COLOR_WRITE_ENABLE_BLUE = 4;
export const D3D11_COLOR_WRITE_ENABLE_ALPHA = 8;
export const D3D11_COLOR_WRITE_ENABLE_ALL = 15;
export const D3D11_TEXTURECUBE_FACE_POSITIVE_X = 0;
export const D3D11_TEXTURECUBE_FACE_NEGATIVE_X = 1;
export const D3D11_TEXTURECUBE_FACE_POSITIVE_Y = 2;
export const D3D11_TEXTURECUBE_FACE_NEGATIVE_Y = 3;
export const D3D11_TEXTURECUBE_FACE_POSITIVE_Z = 4;
export const D3D11_TEXTURECUBE_FACE_NEGATIVE_Z = 5;
export const D3D11_BUFFEREX_SRV_FLAG_RAW = 1;
export const D3D11_DSV_READ_ONLY_DEPTH = 1;
export const D3D11_DSV_READ_ONLY_STENCIL = 2;
export const D3D11_BUFFER_UAV_FLAG_RAW = 1;
export const D3D11_BUFFER_UAV_FLAG_APPEND = 2;
export const D3D11_BUFFER_UAV_FLAG_COUNTER = 4;
export const D3D11_FILTER_MIN_MAG_MIP_POINT = 0;
export const D3D11_FILTER_MIN_MAG_POINT_MIP_LINEAR = 1;
export const D3D11_FILTER_MIN_POINT_MAG_LINEAR_MIP_POINT = 4;
export const D3D11_FILTER_MIN_POINT_MAG_MIP_LINEAR = 5;
export const D3D11_FILTER_MIN_LINEAR_MAG_MIP_POINT = 16;
export const D3D11_FILTER_MIN_LINEAR_MAG_POINT_MIP_LINEAR = 17;
export const D3D11_FILTER_MIN_MAG_LINEAR_MIP_POINT = 20;
export const D3D11_FILTER_MIN_MAG_MIP_LINEAR = 21;
export const D3D11_FILTER_ANISOTROPIC = 85;
export const D3D11_FILTER_COMPARISON_MIN_MAG_MIP_POINT = 128;
export const D3D11_FILTER_COMPARISON_MIN_MAG_POINT_MIP_LINEAR = 129;
export const D3D11_FILTER_COMPARISON_MIN_POINT_MAG_LINEAR_MIP_POINT = 132;
export const D3D11_FILTER_COMPARISON_MIN_POINT_MAG_MIP_LINEAR = 133;
export const D3D11_FILTER_COMPARISON_MIN_LINEAR_MAG_MIP_POINT = 144;
export const D3D11_FILTER_COMPARISON_MIN_LINEAR_MAG_POINT_MIP_LINEAR = 145;
export const D3D11_FILTER_COMPARISON_MIN_MAG_LINEAR_MIP_POINT = 148;
export const D3D11_FILTER_COMPARISON_MIN_MAG_MIP_LINEAR = 149;
export const D3D11_FILTER_COMPARISON_ANISOTROPIC = 213;
export const D3D11_FILTER_MINIMUM_MIN_MAG_MIP_POINT = 256;
export const D3D11_FILTER_MINIMUM_MIN_MAG_POINT_MIP_LINEAR = 257;
export const D3D11_FILTER_MINIMUM_MIN_POINT_MAG_LINEAR_MIP_POINT = 260;
export const D3D11_FILTER_MINIMUM_MIN_POINT_MAG_MIP_LINEAR = 261;
export const D3D11_FILTER_MINIMUM_MIN_LINEAR_MAG_MIP_POINT = 272;
export const D3D11_FILTER_MINIMUM_MIN_LINEAR_MAG_POINT_MIP_LINEAR = 273;
export const D3D11_FILTER_MINIMUM_MIN_MAG_LINEAR_MIP_POINT = 276;
export const D3D11_FILTER_MINIMUM_MIN_MAG_MIP_LINEAR = 277;
export const D3D11_FILTER_MINIMUM_ANISOTROPIC = 341;
export const D3D11_FILTER_MAXIMUM_MIN_MAG_MIP_POINT = 384;
export const D3D11_FILTER_MAXIMUM_MIN_MAG_POINT_MIP_LINEAR = 385;
export const D3D11_FILTER_MAXIMUM_MIN_POINT_MAG_LINEAR_MIP_POINT = 388;
export const D3D11_FILTER_MAXIMUM_MIN_POINT_MAG_MIP_LINEAR = 389;
export const D3D11_FILTER_MAXIMUM_MIN_LINEAR_MAG_MIP_POINT = 400;
export const D3D11_FILTER_MAXIMUM_MIN_LINEAR_MAG_POINT_MIP_LINEAR = 401;
export const D3D11_FILTER_MAXIMUM_MIN_MAG_LINEAR_MIP_POINT = 404;
export const D3D11_FILTER_MAXIMUM_MIN_MAG_MIP_LINEAR = 405;
export const D3D11_FILTER_MAXIMUM_ANISOTROPIC = 469;
export const D3D11_FILTER_TYPE_POINT = 0;
export const D3D11_FILTER_TYPE_LINEAR = 1;
export const D3D11_FILTER_REDUCTION_TYPE_STANDARD = 0;
export const D3D11_FILTER_REDUCTION_TYPE_COMPARISON = 1;
export const D3D11_FILTER_REDUCTION_TYPE_MINIMUM = 2;
export const D3D11_FILTER_REDUCTION_TYPE_MAXIMUM = 3;
export const D3D11_TEXTURE_ADDRESS_WRAP = 1;
export const D3D11_TEXTURE_ADDRESS_MIRROR = 2;
export const D3D11_TEXTURE_ADDRESS_CLAMP = 3;
export const D3D11_TEXTURE_ADDRESS_BORDER = 4;
export const D3D11_TEXTURE_ADDRESS_MIRROR_ONCE = 5;
export const D3D11_FORMAT_SUPPORT_BUFFER = 1;
export const D3D11_FORMAT_SUPPORT_IA_VERTEX_BUFFER = 2;
export const D3D11_FORMAT_SUPPORT_IA_INDEX_BUFFER = 4;
export const D3D11_FORMAT_SUPPORT_SO_BUFFER = 8;
export const D3D11_FORMAT_SUPPORT_TEXTURE1D = 16;
export const D3D11_FORMAT_SUPPORT_TEXTURE2D = 32;
export const D3D11_FORMAT_SUPPORT_TEXTURE3D = 64;
export const D3D11_FORMAT_SUPPORT_TEXTURECUBE = 128;
export const D3D11_FORMAT_SUPPORT_SHADER_LOAD = 256;
export const D3D11_FORMAT_SUPPORT_SHADER_SAMPLE = 512;
export const D3D11_FORMAT_SUPPORT_SHADER_SAMPLE_COMPARISON = 1024;
export const D3D11_FORMAT_SUPPORT_SHADER_SAMPLE_MONO_TEXT = 2048;
export const D3D11_FORMAT_SUPPORT_MIP = 4096;
export const D3D11_FORMAT_SUPPORT_MIP_AUTOGEN = 8192;
export const D3D11_FORMAT_SUPPORT_RENDER_TARGET = 16384;
export const D3D11_FORMAT_SUPPORT_BLENDABLE = 32768;
export const D3D11_FORMAT_SUPPORT_DEPTH_STENCIL = 65536;
export const D3D11_FORMAT_SUPPORT_CPU_LOCKABLE = 131072;
export const D3D11_FORMAT_SUPPORT_MULTISAMPLE_RESOLVE = 262144;
export const D3D11_FORMAT_SUPPORT_DISPLAY = 524288;
export const D3D11_FORMAT_SUPPORT_CAST_WITHIN_BIT_LAYOUT = 1048576;
export const D3D11_FORMAT_SUPPORT_MULTISAMPLE_RENDERTARGET = 2097152;
export const D3D11_FORMAT_SUPPORT_MULTISAMPLE_LOAD = 4194304;
export const D3D11_FORMAT_SUPPORT_SHADER_GATHER = 8388608;
export const D3D11_FORMAT_SUPPORT_BACK_BUFFER_CAST = 16777216;
export const D3D11_FORMAT_SUPPORT_TYPED_UNORDERED_ACCESS_VIEW = 33554432;
export const D3D11_FORMAT_SUPPORT_SHADER_GATHER_COMPARISON = 67108864;
export const D3D11_FORMAT_SUPPORT_DECODER_OUTPUT = 134217728;
export const D3D11_FORMAT_SUPPORT_VIDEO_PROCESSOR_OUTPUT = 268435456;
export const D3D11_FORMAT_SUPPORT_VIDEO_PROCESSOR_INPUT = 536870912;
export const D3D11_FORMAT_SUPPORT_VIDEO_ENCODER = 1073741824;
export const D3D11_FORMAT_SUPPORT2_UAV_ATOMIC_ADD = 1;
export const D3D11_FORMAT_SUPPORT2_UAV_ATOMIC_BITWISE_OPS = 2;
export const D3D11_FORMAT_SUPPORT2_UAV_ATOMIC_COMPARE_STORE_OR_COMPARE_EXCHANGE = 4;
export const D3D11_FORMAT_SUPPORT2_UAV_ATOMIC_EXCHANGE = 8;
export const D3D11_FORMAT_SUPPORT2_UAV_ATOMIC_SIGNED_MIN_OR_MAX = 16;
export const D3D11_FORMAT_SUPPORT2_UAV_ATOMIC_UNSIGNED_MIN_OR_MAX = 32;
export const D3D11_FORMAT_SUPPORT2_UAV_TYPED_LOAD = 64;
export const D3D11_FORMAT_SUPPORT2_UAV_TYPED_STORE = 128;
export const D3D11_FORMAT_SUPPORT2_OUTPUT_MERGER_LOGIC_OP = 256;
export const D3D11_FORMAT_SUPPORT2_TILED = 512;
export const D3D11_FORMAT_SUPPORT2_SHAREABLE = 1024;
export const D3D11_FORMAT_SUPPORT2_MULTIPLANE_OVERLAY = 16384;
export const D3D11_ASYNC_GETDATA_DONOTFLUSH = 1;
export const D3D11_QUERY_EVENT = 0;
export const D3D11_QUERY_OCCLUSION = 1;
export const D3D11_QUERY_TIMESTAMP = 2;
export const D3D11_QUERY_TIMESTAMP_DISJOINT = 3;
export const D3D11_QUERY_PIPELINE_STATISTICS = 4;
export const D3D11_QUERY_OCCLUSION_PREDICATE = 5;
export const D3D11_QUERY_SO_STATISTICS = 6;
export const D3D11_QUERY_SO_OVERFLOW_PREDICATE = 7;
export const D3D11_QUERY_SO_STATISTICS_STREAM0 = 8;
export const D3D11_QUERY_SO_OVERFLOW_PREDICATE_STREAM0 = 9;
export const D3D11_QUERY_SO_STATISTICS_STREAM1 = 10;
export const D3D11_QUERY_SO_OVERFLOW_PREDICATE_STREAM1 = 11;
export const D3D11_QUERY_SO_STATISTICS_STREAM2 = 12;
export const D3D11_QUERY_SO_OVERFLOW_PREDICATE_STREAM2 = 13;
export const D3D11_QUERY_SO_STATISTICS_STREAM3 = 14;
export const D3D11_QUERY_SO_OVERFLOW_PREDICATE_STREAM3 = 15;
export const D3D11_QUERY_MISC_PREDICATEHINT = 1;
export const D3D11_COUNTER_DEVICE_DEPENDENT_0 = 1073741824;
export const D3D11_COUNTER_TYPE_FLOAT32 = 0;
export const D3D11_COUNTER_TYPE_UINT16 = 1;
export const D3D11_COUNTER_TYPE_UINT32 = 2;
export const D3D11_COUNTER_TYPE_UINT64 = 3;
export const D3D11_STANDARD_MULTISAMPLE_PATTERN = `-1`;
export const D3D11_CENTER_MULTISAMPLE_PATTERN = `-2`;
export const D3D11_DEVICE_CONTEXT_IMMEDIATE = 0;
export const D3D11_DEVICE_CONTEXT_DEFERRED = 1;
export const D3D11_FEATURE_THREADING = 0;
export const D3D11_FEATURE_DOUBLES = 1;
export const D3D11_FEATURE_FORMAT_SUPPORT = 2;
export const D3D11_FEATURE_FORMAT_SUPPORT2 = 3;
export const D3D11_FEATURE_D3D10_X_HARDWARE_OPTIONS = 4;
export const D3D11_FEATURE_D3D11_OPTIONS = 5;
export const D3D11_FEATURE_ARCHITECTURE_INFO = 6;
export const D3D11_FEATURE_D3D9_OPTIONS = 7;
export const D3D11_FEATURE_SHADER_MIN_PRECISION_SUPPORT = 8;
export const D3D11_FEATURE_D3D9_SHADOW_SUPPORT = 9;
export const D3D11_FEATURE_D3D11_OPTIONS1 = 10;
export const D3D11_FEATURE_D3D9_SIMPLE_INSTANCING_SUPPORT = 11;
export const D3D11_FEATURE_MARKER_SUPPORT = 12;
export const D3D11_FEATURE_D3D9_OPTIONS1 = 13;
export const D3D11_FEATURE_D3D11_OPTIONS2 = 14;
export const D3D11_FEATURE_D3D11_OPTIONS3 = 15;
export const D3D11_FEATURE_GPU_VIRTUAL_ADDRESS_SUPPORT = 16;
export const D3D11_FEATURE_D3D11_OPTIONS4 = 17;
export const D3D11_FEATURE_SHADER_CACHE = 18;
export const D3D11_FEATURE_D3D11_OPTIONS5 = 19;
export const D3D11_FEATURE_DISPLAYABLE = 20;
export const D3D11_SHADER_MIN_PRECISION_10_BIT = 1;
export const D3D11_SHADER_MIN_PRECISION_16_BIT = 2;
export const D3D11_TILED_RESOURCES_NOT_SUPPORTED = 0;
export const D3D11_TILED_RESOURCES_TIER_1 = 1;
export const D3D11_TILED_RESOURCES_TIER_2 = 2;
export const D3D11_TILED_RESOURCES_TIER_3 = 3;
export const D3D11_CONSERVATIVE_RASTERIZATION_NOT_SUPPORTED = 0;
export const D3D11_CONSERVATIVE_RASTERIZATION_TIER_1 = 1;
export const D3D11_CONSERVATIVE_RASTERIZATION_TIER_2 = 2;
export const D3D11_CONSERVATIVE_RASTERIZATION_TIER_3 = 3;
export const D3D11_SHADER_CACHE_SUPPORT_NONE = 0;
export const D3D11_SHADER_CACHE_SUPPORT_AUTOMATIC_INPROC_CACHE = 1;
export const D3D11_SHADER_CACHE_SUPPORT_AUTOMATIC_DISK_CACHE = 2;
export const D3D11_SHARED_RESOURCE_TIER_0 = 0;
export const D3D11_SHARED_RESOURCE_TIER_1 = 1;
export const D3D11_SHARED_RESOURCE_TIER_2 = 2;
export const D3D11_SHARED_RESOURCE_TIER_3 = 3;
export const D3D11_VIDEO_DECODER_BUFFER_PICTURE_PARAMETERS = 0;
export const D3D11_VIDEO_DECODER_BUFFER_MACROBLOCK_CONTROL = 1;
export const D3D11_VIDEO_DECODER_BUFFER_RESIDUAL_DIFFERENCE = 2;
export const D3D11_VIDEO_DECODER_BUFFER_DEBLOCKING_CONTROL = 3;
export const D3D11_VIDEO_DECODER_BUFFER_INVERSE_QUANTIZATION_MATRIX = 4;
export const D3D11_VIDEO_DECODER_BUFFER_SLICE_CONTROL = 5;
export const D3D11_VIDEO_DECODER_BUFFER_BITSTREAM = 6;
export const D3D11_VIDEO_DECODER_BUFFER_MOTION_VECTOR = 7;
export const D3D11_VIDEO_DECODER_BUFFER_FILM_GRAIN = 8;
export const D3D11_VIDEO_PROCESSOR_FORMAT_SUPPORT_INPUT = 1;
export const D3D11_VIDEO_PROCESSOR_FORMAT_SUPPORT_OUTPUT = 2;
export const D3D11_VIDEO_PROCESSOR_DEVICE_CAPS_LINEAR_SPACE = 1;
export const D3D11_VIDEO_PROCESSOR_DEVICE_CAPS_xvYCC = 2;
export const D3D11_VIDEO_PROCESSOR_DEVICE_CAPS_RGB_RANGE_CONVERSION = 4;
export const D3D11_VIDEO_PROCESSOR_DEVICE_CAPS_YCbCr_MATRIX_CONVERSION = 8;
export const D3D11_VIDEO_PROCESSOR_DEVICE_CAPS_NOMINAL_RANGE = 16;
export const D3D11_VIDEO_PROCESSOR_FEATURE_CAPS_ALPHA_FILL = 1;
export const D3D11_VIDEO_PROCESSOR_FEATURE_CAPS_CONSTRICTION = 2;
export const D3D11_VIDEO_PROCESSOR_FEATURE_CAPS_LUMA_KEY = 4;
export const D3D11_VIDEO_PROCESSOR_FEATURE_CAPS_ALPHA_PALETTE = 8;
export const D3D11_VIDEO_PROCESSOR_FEATURE_CAPS_LEGACY = 16;
export const D3D11_VIDEO_PROCESSOR_FEATURE_CAPS_STEREO = 32;
export const D3D11_VIDEO_PROCESSOR_FEATURE_CAPS_ROTATION = 64;
export const D3D11_VIDEO_PROCESSOR_FEATURE_CAPS_ALPHA_STREAM = 128;
export const D3D11_VIDEO_PROCESSOR_FEATURE_CAPS_PIXEL_ASPECT_RATIO = 256;
export const D3D11_VIDEO_PROCESSOR_FEATURE_CAPS_MIRROR = 512;
export const D3D11_VIDEO_PROCESSOR_FEATURE_CAPS_SHADER_USAGE = 1024;
export const D3D11_VIDEO_PROCESSOR_FEATURE_CAPS_METADATA_HDR10 = 2048;
export const D3D11_VIDEO_PROCESSOR_FILTER_CAPS_BRIGHTNESS = 1;
export const D3D11_VIDEO_PROCESSOR_FILTER_CAPS_CONTRAST = 2;
export const D3D11_VIDEO_PROCESSOR_FILTER_CAPS_HUE = 4;
export const D3D11_VIDEO_PROCESSOR_FILTER_CAPS_SATURATION = 8;
export const D3D11_VIDEO_PROCESSOR_FILTER_CAPS_NOISE_REDUCTION = 16;
export const D3D11_VIDEO_PROCESSOR_FILTER_CAPS_EDGE_ENHANCEMENT = 32;
export const D3D11_VIDEO_PROCESSOR_FILTER_CAPS_ANAMORPHIC_SCALING = 64;
export const D3D11_VIDEO_PROCESSOR_FILTER_CAPS_STEREO_ADJUSTMENT = 128;
export const D3D11_VIDEO_PROCESSOR_FORMAT_CAPS_RGB_INTERLACED = 1;
export const D3D11_VIDEO_PROCESSOR_FORMAT_CAPS_RGB_PROCAMP = 2;
export const D3D11_VIDEO_PROCESSOR_FORMAT_CAPS_RGB_LUMA_KEY = 4;
export const D3D11_VIDEO_PROCESSOR_FORMAT_CAPS_PALETTE_INTERLACED = 8;
export const D3D11_VIDEO_PROCESSOR_AUTO_STREAM_CAPS_DENOISE = 1;
export const D3D11_VIDEO_PROCESSOR_AUTO_STREAM_CAPS_DERINGING = 2;
export const D3D11_VIDEO_PROCESSOR_AUTO_STREAM_CAPS_EDGE_ENHANCEMENT = 4;
export const D3D11_VIDEO_PROCESSOR_AUTO_STREAM_CAPS_COLOR_CORRECTION = 8;
export const D3D11_VIDEO_PROCESSOR_AUTO_STREAM_CAPS_FLESH_TONE_MAPPING = 16;
export const D3D11_VIDEO_PROCESSOR_AUTO_STREAM_CAPS_IMAGE_STABILIZATION = 32;
export const D3D11_VIDEO_PROCESSOR_AUTO_STREAM_CAPS_SUPER_RESOLUTION = 64;
export const D3D11_VIDEO_PROCESSOR_AUTO_STREAM_CAPS_ANAMORPHIC_SCALING = 128;
export const D3D11_VIDEO_PROCESSOR_STEREO_CAPS_MONO_OFFSET = 1;
export const D3D11_VIDEO_PROCESSOR_STEREO_CAPS_ROW_INTERLEAVED = 2;
export const D3D11_VIDEO_PROCESSOR_STEREO_CAPS_COLUMN_INTERLEAVED = 4;
export const D3D11_VIDEO_PROCESSOR_STEREO_CAPS_CHECKERBOARD = 8;
export const D3D11_VIDEO_PROCESSOR_STEREO_CAPS_FLIP_MODE = 16;
export const D3D11_VIDEO_PROCESSOR_PROCESSOR_CAPS_DEINTERLACE_BLEND = 1;
export const D3D11_VIDEO_PROCESSOR_PROCESSOR_CAPS_DEINTERLACE_BOB = 2;
export const D3D11_VIDEO_PROCESSOR_PROCESSOR_CAPS_DEINTERLACE_ADAPTIVE = 4;
export const D3D11_VIDEO_PROCESSOR_PROCESSOR_CAPS_DEINTERLACE_MOTION_COMPENSATION = 8;
export const D3D11_VIDEO_PROCESSOR_PROCESSOR_CAPS_INVERSE_TELECINE = 16;
export const D3D11_VIDEO_PROCESSOR_PROCESSOR_CAPS_FRAME_RATE_CONVERSION = 32;
export const D3D11_VIDEO_PROCESSOR_ITELECINE_CAPS_32 = 1;
export const D3D11_VIDEO_PROCESSOR_ITELECINE_CAPS_22 = 2;
export const D3D11_VIDEO_PROCESSOR_ITELECINE_CAPS_2224 = 4;
export const D3D11_VIDEO_PROCESSOR_ITELECINE_CAPS_2332 = 8;
export const D3D11_VIDEO_PROCESSOR_ITELECINE_CAPS_32322 = 16;
export const D3D11_VIDEO_PROCESSOR_ITELECINE_CAPS_55 = 32;
export const D3D11_VIDEO_PROCESSOR_ITELECINE_CAPS_64 = 64;
export const D3D11_VIDEO_PROCESSOR_ITELECINE_CAPS_87 = 128;
export const D3D11_VIDEO_PROCESSOR_ITELECINE_CAPS_222222222223 = 256;
export const D3D11_VIDEO_PROCESSOR_ITELECINE_CAPS_OTHER = `-2147483648`;
export const D3D11_CONTENT_PROTECTION_CAPS_SOFTWARE = 1;
export const D3D11_CONTENT_PROTECTION_CAPS_HARDWARE = 2;
export const D3D11_CONTENT_PROTECTION_CAPS_PROTECTION_ALWAYS_ON = 4;
export const D3D11_CONTENT_PROTECTION_CAPS_PARTIAL_DECRYPTION = 8;
export const D3D11_CONTENT_PROTECTION_CAPS_CONTENT_KEY = 16;
export const D3D11_CONTENT_PROTECTION_CAPS_FRESHEN_SESSION_KEY = 32;
export const D3D11_CONTENT_PROTECTION_CAPS_ENCRYPTED_READ_BACK = 64;
export const D3D11_CONTENT_PROTECTION_CAPS_ENCRYPTED_READ_BACK_KEY = 128;
export const D3D11_CONTENT_PROTECTION_CAPS_SEQUENTIAL_CTR_IV = 256;
export const D3D11_CONTENT_PROTECTION_CAPS_ENCRYPT_SLICEDATA_ONLY = 512;
export const D3D11_CONTENT_PROTECTION_CAPS_DECRYPTION_BLT = 1024;
export const D3D11_CONTENT_PROTECTION_CAPS_HARDWARE_PROTECT_UNCOMPRESSED = 2048;
export const D3D11_CONTENT_PROTECTION_CAPS_HARDWARE_PROTECTED_MEMORY_PAGEABLE = 4096;
export const D3D11_CONTENT_PROTECTION_CAPS_HARDWARE_TEARDOWN = 8192;
export const D3D11_CONTENT_PROTECTION_CAPS_HARDWARE_DRM_COMMUNICATION = 16384;
export const D3D11_CONTENT_PROTECTION_CAPS_HARDWARE_DRM_COMMUNICATION_MULTI_THREADED = 32768;
export const D3D11_VIDEO_PROCESSOR_FILTER_BRIGHTNESS = 0;
export const D3D11_VIDEO_PROCESSOR_FILTER_CONTRAST = 1;
export const D3D11_VIDEO_PROCESSOR_FILTER_HUE = 2;
export const D3D11_VIDEO_PROCESSOR_FILTER_SATURATION = 3;
export const D3D11_VIDEO_PROCESSOR_FILTER_NOISE_REDUCTION = 4;
export const D3D11_VIDEO_PROCESSOR_FILTER_EDGE_ENHANCEMENT = 5;
export const D3D11_VIDEO_PROCESSOR_FILTER_ANAMORPHIC_SCALING = 6;
export const D3D11_VIDEO_PROCESSOR_FILTER_STEREO_ADJUSTMENT = 7;
export const D3D11_VIDEO_FRAME_FORMAT_PROGRESSIVE = 0;
export const D3D11_VIDEO_FRAME_FORMAT_INTERLACED_TOP_FIELD_FIRST = 1;
export const D3D11_VIDEO_FRAME_FORMAT_INTERLACED_BOTTOM_FIELD_FIRST = 2;
export const D3D11_VIDEO_USAGE_PLAYBACK_NORMAL = 0;
export const D3D11_VIDEO_USAGE_OPTIMAL_SPEED = 1;
export const D3D11_VIDEO_USAGE_OPTIMAL_QUALITY = 2;
export const D3D11_VIDEO_PROCESSOR_NOMINAL_RANGE_UNDEFINED = 0;
export const D3D11_VIDEO_PROCESSOR_NOMINAL_RANGE_16_235 = 1;
export const D3D11_VIDEO_PROCESSOR_NOMINAL_RANGE_0_255 = 2;
export const D3D11_VIDEO_PROCESSOR_ALPHA_FILL_MODE_OPAQUE = 0;
export const D3D11_VIDEO_PROCESSOR_ALPHA_FILL_MODE_BACKGROUND = 1;
export const D3D11_VIDEO_PROCESSOR_ALPHA_FILL_MODE_DESTINATION = 2;
export const D3D11_VIDEO_PROCESSOR_ALPHA_FILL_MODE_SOURCE_STREAM = 3;
export const D3D11_VIDEO_PROCESSOR_OUTPUT_RATE_NORMAL = 0;
export const D3D11_VIDEO_PROCESSOR_OUTPUT_RATE_HALF = 1;
export const D3D11_VIDEO_PROCESSOR_OUTPUT_RATE_CUSTOM = 2;
export const D3D11_VIDEO_PROCESSOR_STEREO_FORMAT_MONO = 0;
export const D3D11_VIDEO_PROCESSOR_STEREO_FORMAT_HORIZONTAL = 1;
export const D3D11_VIDEO_PROCESSOR_STEREO_FORMAT_VERTICAL = 2;
export const D3D11_VIDEO_PROCESSOR_STEREO_FORMAT_SEPARATE = 3;
export const D3D11_VIDEO_PROCESSOR_STEREO_FORMAT_MONO_OFFSET = 4;
export const D3D11_VIDEO_PROCESSOR_STEREO_FORMAT_ROW_INTERLEAVED = 5;
export const D3D11_VIDEO_PROCESSOR_STEREO_FORMAT_COLUMN_INTERLEAVED = 6;
export const D3D11_VIDEO_PROCESSOR_STEREO_FORMAT_CHECKERBOARD = 7;
export const D3D11_VIDEO_PROCESSOR_STEREO_FLIP_NONE = 0;
export const D3D11_VIDEO_PROCESSOR_STEREO_FLIP_FRAME0 = 1;
export const D3D11_VIDEO_PROCESSOR_STEREO_FLIP_FRAME1 = 2;
export const D3D11_VIDEO_PROCESSOR_ROTATION_IDENTITY = 0;
export const D3D11_VIDEO_PROCESSOR_ROTATION_90 = 1;
export const D3D11_VIDEO_PROCESSOR_ROTATION_180 = 2;
export const D3D11_VIDEO_PROCESSOR_ROTATION_270 = 3;
export const D3D11_AUTHENTICATED_CHANNEL_D3D11 = 1;
export const D3D11_AUTHENTICATED_CHANNEL_DRIVER_SOFTWARE = 2;
export const D3D11_AUTHENTICATED_CHANNEL_DRIVER_HARDWARE = 3;
export const D3D11_PROCESSIDTYPE_UNKNOWN = 0;
export const D3D11_PROCESSIDTYPE_DWM = 1;
export const D3D11_PROCESSIDTYPE_HANDLE = 2;
export const D3D11_BUS_TYPE_OTHER = 0;
export const D3D11_BUS_TYPE_PCI = 1;
export const D3D11_BUS_TYPE_PCIX = 2;
export const D3D11_BUS_TYPE_PCIEXPRESS = 3;
export const D3D11_BUS_TYPE_AGP = 4;
export const D3D11_BUS_IMPL_MODIFIER_INSIDE_OF_CHIPSET = 65536;
export const D3D11_BUS_IMPL_MODIFIER_TRACKS_ON_MOTHER_BOARD_TO_CHIP = 131072;
export const D3D11_BUS_IMPL_MODIFIER_TRACKS_ON_MOTHER_BOARD_TO_SOCKET = 196608;
export const D3D11_BUS_IMPL_MODIFIER_DAUGHTER_BOARD_CONNECTOR = 262144;
export const D3D11_BUS_IMPL_MODIFIER_DAUGHTER_BOARD_CONNECTOR_INSIDE_OF_NUAE = 327680;
export const D3D11_BUS_IMPL_MODIFIER_NON_STANDARD = `-2147483648`;
export const D3D11_VDOV_DIMENSION_UNKNOWN = 0;
export const D3D11_VDOV_DIMENSION_TEXTURE2D = 1;
export const D3D11_VPIV_DIMENSION_UNKNOWN = 0;
export const D3D11_VPIV_DIMENSION_TEXTURE2D = 1;
export const D3D11_VPOV_DIMENSION_UNKNOWN = 0;
export const D3D11_VPOV_DIMENSION_TEXTURE2D = 1;
export const D3D11_VPOV_DIMENSION_TEXTURE2DARRAY = 2;
export const D3D11_CREATE_DEVICE_SINGLETHREADED = 1;
export const D3D11_CREATE_DEVICE_DEBUG = 2;
export const D3D11_CREATE_DEVICE_SWITCH_TO_REF = 4;
export const D3D11_CREATE_DEVICE_PREVENT_INTERNAL_THREADING_OPTIMIZATIONS = 8;
export const D3D11_CREATE_DEVICE_BGRA_SUPPORT = 32;
export const D3D11_CREATE_DEVICE_DEBUGGABLE = 64;
export const D3D11_CREATE_DEVICE_PREVENT_ALTERING_LAYER_SETTINGS_FROM_REGISTRY = 128;
export const D3D11_CREATE_DEVICE_DISABLE_GPU_TIMEOUT = 256;
export const D3D11_CREATE_DEVICE_VIDEO_SUPPORT = 2048;
export const D3D11_RLDO_SUMMARY = 1;
export const D3D11_RLDO_DETAIL = 2;
export const D3D11_RLDO_IGNORE_INTERNAL = 4;
export const D3D11_SHADER_TRACKING_RESOURCE_TYPE_NONE = 0;
export const D3D11_SHADER_TRACKING_RESOURCE_TYPE_UAV_DEVICEMEMORY = 1;
export const D3D11_SHADER_TRACKING_RESOURCE_TYPE_NON_UAV_DEVICEMEMORY = 2;
export const D3D11_SHADER_TRACKING_RESOURCE_TYPE_ALL_DEVICEMEMORY = 3;
export const D3D11_SHADER_TRACKING_RESOURCE_TYPE_GROUPSHARED_MEMORY = 4;
export const D3D11_SHADER_TRACKING_RESOURCE_TYPE_ALL_SHARED_MEMORY = 5;
export const D3D11_SHADER_TRACKING_RESOURCE_TYPE_GROUPSHARED_NON_UAV = 6;
export const D3D11_SHADER_TRACKING_RESOURCE_TYPE_ALL = 7;
export const D3D11_SHADER_TRACKING_OPTION_IGNORE = 0;
export const D3D11_SHADER_TRACKING_OPTION_TRACK_UNINITIALIZED = 1;
export const D3D11_SHADER_TRACKING_OPTION_TRACK_RAW = 2;
export const D3D11_SHADER_TRACKING_OPTION_TRACK_WAR = 4;
export const D3D11_SHADER_TRACKING_OPTION_TRACK_WAW = 8;
export const D3D11_SHADER_TRACKING_OPTION_ALLOW_SAME = 16;
export const D3D11_SHADER_TRACKING_OPTION_TRACK_ATOMIC_CONSISTENCY = 32;
export const D3D11_SHADER_TRACKING_OPTION_TRACK_RAW_ACROSS_THREADGROUPS = 64;
export const D3D11_SHADER_TRACKING_OPTION_TRACK_WAR_ACROSS_THREADGROUPS = 128;
export const D3D11_SHADER_TRACKING_OPTION_TRACK_WAW_ACROSS_THREADGROUPS = 256;
export const D3D11_SHADER_TRACKING_OPTION_TRACK_ATOMIC_CONSISTENCY_ACROSS_THREADGROUPS = 512;
export const D3D11_SHADER_TRACKING_OPTION_UAV_SPECIFIC_FLAGS = 960;
export const D3D11_SHADER_TRACKING_OPTION_ALL_HAZARDS = 1006;
export const D3D11_SHADER_TRACKING_OPTION_ALL_HAZARDS_ALLOWING_SAME = 1022;
export const D3D11_SHADER_TRACKING_OPTION_ALL_OPTIONS = 1023;
export const D3D11_MESSAGE_CATEGORY_APPLICATION_DEFINED = 0;
export const D3D11_MESSAGE_CATEGORY_MISCELLANEOUS = 1;
export const D3D11_MESSAGE_CATEGORY_INITIALIZATION = 2;
export const D3D11_MESSAGE_CATEGORY_CLEANUP = 3;
export const D3D11_MESSAGE_CATEGORY_COMPILATION = 4;
export const D3D11_MESSAGE_CATEGORY_STATE_CREATION = 5;
export const D3D11_MESSAGE_CATEGORY_STATE_SETTING = 6;
export const D3D11_MESSAGE_CATEGORY_STATE_GETTING = 7;
export const D3D11_MESSAGE_CATEGORY_RESOURCE_MANIPULATION = 8;
export const D3D11_MESSAGE_CATEGORY_EXECUTION = 9;
export const D3D11_MESSAGE_CATEGORY_SHADER = 10;
export const D3D11_MESSAGE_SEVERITY_CORRUPTION = 0;
export const D3D11_MESSAGE_SEVERITY_ERROR = 1;
export const D3D11_MESSAGE_SEVERITY_WARNING = 2;
export const D3D11_MESSAGE_SEVERITY_INFO = 3;
export const D3D11_MESSAGE_SEVERITY_MESSAGE = 4;
export const D3D11_MESSAGE_ID_UNKNOWN = 0;
export const D3D11_MESSAGE_ID_DEVICE_IASETVERTEXBUFFERS_HAZARD = 1;
export const D3D11_MESSAGE_ID_DEVICE_IASETINDEXBUFFER_HAZARD = 2;
export const D3D11_MESSAGE_ID_DEVICE_VSSETSHADERRESOURCES_HAZARD = 3;
export const D3D11_MESSAGE_ID_DEVICE_VSSETCONSTANTBUFFERS_HAZARD = 4;
export const D3D11_MESSAGE_ID_DEVICE_GSSETSHADERRESOURCES_HAZARD = 5;
export const D3D11_MESSAGE_ID_DEVICE_GSSETCONSTANTBUFFERS_HAZARD = 6;
export const D3D11_MESSAGE_ID_DEVICE_PSSETSHADERRESOURCES_HAZARD = 7;
export const D3D11_MESSAGE_ID_DEVICE_PSSETCONSTANTBUFFERS_HAZARD = 8;
export const D3D11_MESSAGE_ID_DEVICE_OMSETRENDERTARGETS_HAZARD = 9;
export const D3D11_MESSAGE_ID_DEVICE_SOSETTARGETS_HAZARD = 10;
export const D3D11_MESSAGE_ID_STRING_FROM_APPLICATION = 11;
export const D3D11_MESSAGE_ID_CORRUPTED_THIS = 12;
export const D3D11_MESSAGE_ID_CORRUPTED_PARAMETER1 = 13;
export const D3D11_MESSAGE_ID_CORRUPTED_PARAMETER2 = 14;
export const D3D11_MESSAGE_ID_CORRUPTED_PARAMETER3 = 15;
export const D3D11_MESSAGE_ID_CORRUPTED_PARAMETER4 = 16;
export const D3D11_MESSAGE_ID_CORRUPTED_PARAMETER5 = 17;
export const D3D11_MESSAGE_ID_CORRUPTED_PARAMETER6 = 18;
export const D3D11_MESSAGE_ID_CORRUPTED_PARAMETER7 = 19;
export const D3D11_MESSAGE_ID_CORRUPTED_PARAMETER8 = 20;
export const D3D11_MESSAGE_ID_CORRUPTED_PARAMETER9 = 21;
export const D3D11_MESSAGE_ID_CORRUPTED_PARAMETER10 = 22;
export const D3D11_MESSAGE_ID_CORRUPTED_PARAMETER11 = 23;
export const D3D11_MESSAGE_ID_CORRUPTED_PARAMETER12 = 24;
export const D3D11_MESSAGE_ID_CORRUPTED_PARAMETER13 = 25;
export const D3D11_MESSAGE_ID_CORRUPTED_PARAMETER14 = 26;
export const D3D11_MESSAGE_ID_CORRUPTED_PARAMETER15 = 27;
export const D3D11_MESSAGE_ID_CORRUPTED_MULTITHREADING = 28;
export const D3D11_MESSAGE_ID_MESSAGE_REPORTING_OUTOFMEMORY = 29;
export const D3D11_MESSAGE_ID_IASETINPUTLAYOUT_UNBINDDELETINGOBJECT = 30;
export const D3D11_MESSAGE_ID_IASETVERTEXBUFFERS_UNBINDDELETINGOBJECT = 31;
export const D3D11_MESSAGE_ID_IASETINDEXBUFFER_UNBINDDELETINGOBJECT = 32;
export const D3D11_MESSAGE_ID_VSSETSHADER_UNBINDDELETINGOBJECT = 33;
export const D3D11_MESSAGE_ID_VSSETSHADERRESOURCES_UNBINDDELETINGOBJECT = 34;
export const D3D11_MESSAGE_ID_VSSETCONSTANTBUFFERS_UNBINDDELETINGOBJECT = 35;
export const D3D11_MESSAGE_ID_VSSETSAMPLERS_UNBINDDELETINGOBJECT = 36;
export const D3D11_MESSAGE_ID_GSSETSHADER_UNBINDDELETINGOBJECT = 37;
export const D3D11_MESSAGE_ID_GSSETSHADERRESOURCES_UNBINDDELETINGOBJECT = 38;
export const D3D11_MESSAGE_ID_GSSETCONSTANTBUFFERS_UNBINDDELETINGOBJECT = 39;
export const D3D11_MESSAGE_ID_GSSETSAMPLERS_UNBINDDELETINGOBJECT = 40;
export const D3D11_MESSAGE_ID_SOSETTARGETS_UNBINDDELETINGOBJECT = 41;
export const D3D11_MESSAGE_ID_PSSETSHADER_UNBINDDELETINGOBJECT = 42;
export const D3D11_MESSAGE_ID_PSSETSHADERRESOURCES_UNBINDDELETINGOBJECT = 43;
export const D3D11_MESSAGE_ID_PSSETCONSTANTBUFFERS_UNBINDDELETINGOBJECT = 44;
export const D3D11_MESSAGE_ID_PSSETSAMPLERS_UNBINDDELETINGOBJECT = 45;
export const D3D11_MESSAGE_ID_RSSETSTATE_UNBINDDELETINGOBJECT = 46;
export const D3D11_MESSAGE_ID_OMSETBLENDSTATE_UNBINDDELETINGOBJECT = 47;
export const D3D11_MESSAGE_ID_OMSETDEPTHSTENCILSTATE_UNBINDDELETINGOBJECT = 48;
export const D3D11_MESSAGE_ID_OMSETRENDERTARGETS_UNBINDDELETINGOBJECT = 49;
export const D3D11_MESSAGE_ID_SETPREDICATION_UNBINDDELETINGOBJECT = 50;
export const D3D11_MESSAGE_ID_GETPRIVATEDATA_MOREDATA = 51;
export const D3D11_MESSAGE_ID_SETPRIVATEDATA_INVALIDFREEDATA = 52;
export const D3D11_MESSAGE_ID_SETPRIVATEDATA_INVALIDIUNKNOWN = 53;
export const D3D11_MESSAGE_ID_SETPRIVATEDATA_INVALIDFLAGS = 54;
export const D3D11_MESSAGE_ID_SETPRIVATEDATA_CHANGINGPARAMS = 55;
export const D3D11_MESSAGE_ID_SETPRIVATEDATA_OUTOFMEMORY = 56;
export const D3D11_MESSAGE_ID_CREATEBUFFER_UNRECOGNIZEDFORMAT = 57;
export const D3D11_MESSAGE_ID_CREATEBUFFER_INVALIDSAMPLES = 58;
export const D3D11_MESSAGE_ID_CREATEBUFFER_UNRECOGNIZEDUSAGE = 59;
export const D3D11_MESSAGE_ID_CREATEBUFFER_UNRECOGNIZEDBINDFLAGS = 60;
export const D3D11_MESSAGE_ID_CREATEBUFFER_UNRECOGNIZEDCPUACCESSFLAGS = 61;
export const D3D11_MESSAGE_ID_CREATEBUFFER_UNRECOGNIZEDMISCFLAGS = 62;
export const D3D11_MESSAGE_ID_CREATEBUFFER_INVALIDCPUACCESSFLAGS = 63;
export const D3D11_MESSAGE_ID_CREATEBUFFER_INVALIDBINDFLAGS = 64;
export const D3D11_MESSAGE_ID_CREATEBUFFER_INVALIDINITIALDATA = 65;
export const D3D11_MESSAGE_ID_CREATEBUFFER_INVALIDDIMENSIONS = 66;
export const D3D11_MESSAGE_ID_CREATEBUFFER_INVALIDMIPLEVELS = 67;
export const D3D11_MESSAGE_ID_CREATEBUFFER_INVALIDMISCFLAGS = 68;
export const D3D11_MESSAGE_ID_CREATEBUFFER_INVALIDARG_RETURN = 69;
export const D3D11_MESSAGE_ID_CREATEBUFFER_OUTOFMEMORY_RETURN = 70;
export const D3D11_MESSAGE_ID_CREATEBUFFER_NULLDESC = 71;
export const D3D11_MESSAGE_ID_CREATEBUFFER_INVALIDCONSTANTBUFFERBINDINGS = 72;
export const D3D11_MESSAGE_ID_CREATEBUFFER_LARGEALLOCATION = 73;
export const D3D11_MESSAGE_ID_CREATETEXTURE1D_UNRECOGNIZEDFORMAT = 74;
export const D3D11_MESSAGE_ID_CREATETEXTURE1D_UNSUPPORTEDFORMAT = 75;
export const D3D11_MESSAGE_ID_CREATETEXTURE1D_INVALIDSAMPLES = 76;
export const D3D11_MESSAGE_ID_CREATETEXTURE1D_UNRECOGNIZEDUSAGE = 77;
export const D3D11_MESSAGE_ID_CREATETEXTURE1D_UNRECOGNIZEDBINDFLAGS = 78;
export const D3D11_MESSAGE_ID_CREATETEXTURE1D_UNRECOGNIZEDCPUACCESSFLAGS = 79;
export const D3D11_MESSAGE_ID_CREATETEXTURE1D_UNRECOGNIZEDMISCFLAGS = 80;
export const D3D11_MESSAGE_ID_CREATETEXTURE1D_INVALIDCPUACCESSFLAGS = 81;
export const D3D11_MESSAGE_ID_CREATETEXTURE1D_INVALIDBINDFLAGS = 82;
export const D3D11_MESSAGE_ID_CREATETEXTURE1D_INVALIDINITIALDATA = 83;
export const D3D11_MESSAGE_ID_CREATETEXTURE1D_INVALIDDIMENSIONS = 84;
export const D3D11_MESSAGE_ID_CREATETEXTURE1D_INVALIDMIPLEVELS = 85;
export const D3D11_MESSAGE_ID_CREATETEXTURE1D_INVALIDMISCFLAGS = 86;
export const D3D11_MESSAGE_ID_CREATETEXTURE1D_INVALIDARG_RETURN = 87;
export const D3D11_MESSAGE_ID_CREATETEXTURE1D_OUTOFMEMORY_RETURN = 88;
export const D3D11_MESSAGE_ID_CREATETEXTURE1D_NULLDESC = 89;
export const D3D11_MESSAGE_ID_CREATETEXTURE1D_LARGEALLOCATION = 90;
export const D3D11_MESSAGE_ID_CREATETEXTURE2D_UNRECOGNIZEDFORMAT = 91;
export const D3D11_MESSAGE_ID_CREATETEXTURE2D_UNSUPPORTEDFORMAT = 92;
export const D3D11_MESSAGE_ID_CREATETEXTURE2D_INVALIDSAMPLES = 93;
export const D3D11_MESSAGE_ID_CREATETEXTURE2D_UNRECOGNIZEDUSAGE = 94;
export const D3D11_MESSAGE_ID_CREATETEXTURE2D_UNRECOGNIZEDBINDFLAGS = 95;
export const D3D11_MESSAGE_ID_CREATETEXTURE2D_UNRECOGNIZEDCPUACCESSFLAGS = 96;
export const D3D11_MESSAGE_ID_CREATETEXTURE2D_UNRECOGNIZEDMISCFLAGS = 97;
export const D3D11_MESSAGE_ID_CREATETEXTURE2D_INVALIDCPUACCESSFLAGS = 98;
export const D3D11_MESSAGE_ID_CREATETEXTURE2D_INVALIDBINDFLAGS = 99;
export const D3D11_MESSAGE_ID_CREATETEXTURE2D_INVALIDINITIALDATA = 100;
export const D3D11_MESSAGE_ID_CREATETEXTURE2D_INVALIDDIMENSIONS = 101;
export const D3D11_MESSAGE_ID_CREATETEXTURE2D_INVALIDMIPLEVELS = 102;
export const D3D11_MESSAGE_ID_CREATETEXTURE2D_INVALIDMISCFLAGS = 103;
export const D3D11_MESSAGE_ID_CREATETEXTURE2D_INVALIDARG_RETURN = 104;
export const D3D11_MESSAGE_ID_CREATETEXTURE2D_OUTOFMEMORY_RETURN = 105;
export const D3D11_MESSAGE_ID_CREATETEXTURE2D_NULLDESC = 106;
export const D3D11_MESSAGE_ID_CREATETEXTURE2D_LARGEALLOCATION = 107;
export const D3D11_MESSAGE_ID_CREATETEXTURE3D_UNRECOGNIZEDFORMAT = 108;
export const D3D11_MESSAGE_ID_CREATETEXTURE3D_UNSUPPORTEDFORMAT = 109;
export const D3D11_MESSAGE_ID_CREATETEXTURE3D_INVALIDSAMPLES = 110;
export const D3D11_MESSAGE_ID_CREATETEXTURE3D_UNRECOGNIZEDUSAGE = 111;
export const D3D11_MESSAGE_ID_CREATETEXTURE3D_UNRECOGNIZEDBINDFLAGS = 112;
export const D3D11_MESSAGE_ID_CREATETEXTURE3D_UNRECOGNIZEDCPUACCESSFLAGS = 113;
export const D3D11_MESSAGE_ID_CREATETEXTURE3D_UNRECOGNIZEDMISCFLAGS = 114;
export const D3D11_MESSAGE_ID_CREATETEXTURE3D_INVALIDCPUACCESSFLAGS = 115;
export const D3D11_MESSAGE_ID_CREATETEXTURE3D_INVALIDBINDFLAGS = 116;
export const D3D11_MESSAGE_ID_CREATETEXTURE3D_INVALIDINITIALDATA = 117;
export const D3D11_MESSAGE_ID_CREATETEXTURE3D_INVALIDDIMENSIONS = 118;
export const D3D11_MESSAGE_ID_CREATETEXTURE3D_INVALIDMIPLEVELS = 119;
export const D3D11_MESSAGE_ID_CREATETEXTURE3D_INVALIDMISCFLAGS = 120;
export const D3D11_MESSAGE_ID_CREATETEXTURE3D_INVALIDARG_RETURN = 121;
export const D3D11_MESSAGE_ID_CREATETEXTURE3D_OUTOFMEMORY_RETURN = 122;
export const D3D11_MESSAGE_ID_CREATETEXTURE3D_NULLDESC = 123;
export const D3D11_MESSAGE_ID_CREATETEXTURE3D_LARGEALLOCATION = 124;
export const D3D11_MESSAGE_ID_CREATESHADERRESOURCEVIEW_UNRECOGNIZEDFORMAT = 125;
export const D3D11_MESSAGE_ID_CREATESHADERRESOURCEVIEW_INVALIDDESC = 126;
export const D3D11_MESSAGE_ID_CREATESHADERRESOURCEVIEW_INVALIDFORMAT = 127;
export const D3D11_MESSAGE_ID_CREATESHADERRESOURCEVIEW_INVALIDDIMENSIONS = 128;
export const D3D11_MESSAGE_ID_CREATESHADERRESOURCEVIEW_INVALIDRESOURCE = 129;
export const D3D11_MESSAGE_ID_CREATESHADERRESOURCEVIEW_TOOMANYOBJECTS = 130;
export const D3D11_MESSAGE_ID_CREATESHADERRESOURCEVIEW_INVALIDARG_RETURN = 131;
export const D3D11_MESSAGE_ID_CREATESHADERRESOURCEVIEW_OUTOFMEMORY_RETURN = 132;
export const D3D11_MESSAGE_ID_CREATERENDERTARGETVIEW_UNRECOGNIZEDFORMAT = 133;
export const D3D11_MESSAGE_ID_CREATERENDERTARGETVIEW_UNSUPPORTEDFORMAT = 134;
export const D3D11_MESSAGE_ID_CREATERENDERTARGETVIEW_INVALIDDESC = 135;
export const D3D11_MESSAGE_ID_CREATERENDERTARGETVIEW_INVALIDFORMAT = 136;
export const D3D11_MESSAGE_ID_CREATERENDERTARGETVIEW_INVALIDDIMENSIONS = 137;
export const D3D11_MESSAGE_ID_CREATERENDERTARGETVIEW_INVALIDRESOURCE = 138;
export const D3D11_MESSAGE_ID_CREATERENDERTARGETVIEW_TOOMANYOBJECTS = 139;
export const D3D11_MESSAGE_ID_CREATERENDERTARGETVIEW_INVALIDARG_RETURN = 140;
export const D3D11_MESSAGE_ID_CREATERENDERTARGETVIEW_OUTOFMEMORY_RETURN = 141;
export const D3D11_MESSAGE_ID_CREATEDEPTHSTENCILVIEW_UNRECOGNIZEDFORMAT = 142;
export const D3D11_MESSAGE_ID_CREATEDEPTHSTENCILVIEW_INVALIDDESC = 143;
export const D3D11_MESSAGE_ID_CREATEDEPTHSTENCILVIEW_INVALIDFORMAT = 144;
export const D3D11_MESSAGE_ID_CREATEDEPTHSTENCILVIEW_INVALIDDIMENSIONS = 145;
export const D3D11_MESSAGE_ID_CREATEDEPTHSTENCILVIEW_INVALIDRESOURCE = 146;
export const D3D11_MESSAGE_ID_CREATEDEPTHSTENCILVIEW_TOOMANYOBJECTS = 147;
export const D3D11_MESSAGE_ID_CREATEDEPTHSTENCILVIEW_INVALIDARG_RETURN = 148;
export const D3D11_MESSAGE_ID_CREATEDEPTHSTENCILVIEW_OUTOFMEMORY_RETURN = 149;
export const D3D11_MESSAGE_ID_CREATEINPUTLAYOUT_OUTOFMEMORY = 150;
export const D3D11_MESSAGE_ID_CREATEINPUTLAYOUT_TOOMANYELEMENTS = 151;
export const D3D11_MESSAGE_ID_CREATEINPUTLAYOUT_INVALIDFORMAT = 152;
export const D3D11_MESSAGE_ID_CREATEINPUTLAYOUT_INCOMPATIBLEFORMAT = 153;
export const D3D11_MESSAGE_ID_CREATEINPUTLAYOUT_INVALIDSLOT = 154;
export const D3D11_MESSAGE_ID_CREATEINPUTLAYOUT_INVALIDINPUTSLOTCLASS = 155;
export const D3D11_MESSAGE_ID_CREATEINPUTLAYOUT_STEPRATESLOTCLASSMISMATCH = 156;
export const D3D11_MESSAGE_ID_CREATEINPUTLAYOUT_INVALIDSLOTCLASSCHANGE = 157;
export const D3D11_MESSAGE_ID_CREATEINPUTLAYOUT_INVALIDSTEPRATECHANGE = 158;
export const D3D11_MESSAGE_ID_CREATEINPUTLAYOUT_INVALIDALIGNMENT = 159;
export const D3D11_MESSAGE_ID_CREATEINPUTLAYOUT_DUPLICATESEMANTIC = 160;
export const D3D11_MESSAGE_ID_CREATEINPUTLAYOUT_UNPARSEABLEINPUTSIGNATURE = 161;
export const D3D11_MESSAGE_ID_CREATEINPUTLAYOUT_NULLSEMANTIC = 162;
export const D3D11_MESSAGE_ID_CREATEINPUTLAYOUT_MISSINGELEMENT = 163;
export const D3D11_MESSAGE_ID_CREATEINPUTLAYOUT_NULLDESC = 164;
export const D3D11_MESSAGE_ID_CREATEVERTEXSHADER_OUTOFMEMORY = 165;
export const D3D11_MESSAGE_ID_CREATEVERTEXSHADER_INVALIDSHADERBYTECODE = 166;
export const D3D11_MESSAGE_ID_CREATEVERTEXSHADER_INVALIDSHADERTYPE = 167;
export const D3D11_MESSAGE_ID_CREATEGEOMETRYSHADER_OUTOFMEMORY = 168;
export const D3D11_MESSAGE_ID_CREATEGEOMETRYSHADER_INVALIDSHADERBYTECODE = 169;
export const D3D11_MESSAGE_ID_CREATEGEOMETRYSHADER_INVALIDSHADERTYPE = 170;
export const D3D11_MESSAGE_ID_CREATEGEOMETRYSHADERWITHSTREAMOUTPUT_OUTOFMEMORY = 171;
export const D3D11_MESSAGE_ID_CREATEGEOMETRYSHADERWITHSTREAMOUTPUT_INVALIDSHADERBYTECODE = 172;
export const D3D11_MESSAGE_ID_CREATEGEOMETRYSHADERWITHSTREAMOUTPUT_INVALIDSHADERTYPE = 173;
export const D3D11_MESSAGE_ID_CREATEGEOMETRYSHADERWITHSTREAMOUTPUT_INVALIDNUMENTRIES = 174;
export const D3D11_MESSAGE_ID_CREATEGEOMETRYSHADERWITHSTREAMOUTPUT_OUTPUTSTREAMSTRIDEUNUSED = 175;
export const D3D11_MESSAGE_ID_CREATEGEOMETRYSHADERWITHSTREAMOUTPUT_UNEXPECTEDDECL = 176;
export const D3D11_MESSAGE_ID_CREATEGEOMETRYSHADERWITHSTREAMOUTPUT_EXPECTEDDECL = 177;
export const D3D11_MESSAGE_ID_CREATEGEOMETRYSHADERWITHSTREAMOUTPUT_OUTPUTSLOT0EXPECTED = 178;
export const D3D11_MESSAGE_ID_CREATEGEOMETRYSHADERWITHSTREAMOUTPUT_INVALIDOUTPUTSLOT = 179;
export const D3D11_MESSAGE_ID_CREATEGEOMETRYSHADERWITHSTREAMOUTPUT_ONLYONEELEMENTPERSLOT = 180;
export const D3D11_MESSAGE_ID_CREATEGEOMETRYSHADERWITHSTREAMOUTPUT_INVALIDCOMPONENTCOUNT = 181;
export const D3D11_MESSAGE_ID_CREATEGEOMETRYSHADERWITHSTREAMOUTPUT_INVALIDSTARTCOMPONENTANDCOMPONENTCOUNT = 182;
export const D3D11_MESSAGE_ID_CREATEGEOMETRYSHADERWITHSTREAMOUTPUT_INVALIDGAPDEFINITION = 183;
export const D3D11_MESSAGE_ID_CREATEGEOMETRYSHADERWITHSTREAMOUTPUT_REPEATEDOUTPUT = 184;
export const D3D11_MESSAGE_ID_CREATEGEOMETRYSHADERWITHSTREAMOUTPUT_INVALIDOUTPUTSTREAMSTRIDE = 185;
export const D3D11_MESSAGE_ID_CREATEGEOMETRYSHADERWITHSTREAMOUTPUT_MISSINGSEMANTIC = 186;
export const D3D11_MESSAGE_ID_CREATEGEOMETRYSHADERWITHSTREAMOUTPUT_MASKMISMATCH = 187;
export const D3D11_MESSAGE_ID_CREATEGEOMETRYSHADERWITHSTREAMOUTPUT_CANTHAVEONLYGAPS = 188;
export const D3D11_MESSAGE_ID_CREATEGEOMETRYSHADERWITHSTREAMOUTPUT_DECLTOOCOMPLEX = 189;
export const D3D11_MESSAGE_ID_CREATEGEOMETRYSHADERWITHSTREAMOUTPUT_MISSINGOUTPUTSIGNATURE = 190;
export const D3D11_MESSAGE_ID_CREATEPIXELSHADER_OUTOFMEMORY = 191;
export const D3D11_MESSAGE_ID_CREATEPIXELSHADER_INVALIDSHADERBYTECODE = 192;
export const D3D11_MESSAGE_ID_CREATEPIXELSHADER_INVALIDSHADERTYPE = 193;
export const D3D11_MESSAGE_ID_CREATERASTERIZERSTATE_INVALIDFILLMODE = 194;
export const D3D11_MESSAGE_ID_CREATERASTERIZERSTATE_INVALIDCULLMODE = 195;
export const D3D11_MESSAGE_ID_CREATERASTERIZERSTATE_INVALIDDEPTHBIASCLAMP = 196;
export const D3D11_MESSAGE_ID_CREATERASTERIZERSTATE_INVALIDSLOPESCALEDDEPTHBIAS = 197;
export const D3D11_MESSAGE_ID_CREATERASTERIZERSTATE_TOOMANYOBJECTS = 198;
export const D3D11_MESSAGE_ID_CREATERASTERIZERSTATE_NULLDESC = 199;
export const D3D11_MESSAGE_ID_CREATEDEPTHSTENCILSTATE_INVALIDDEPTHWRITEMASK = 200;
export const D3D11_MESSAGE_ID_CREATEDEPTHSTENCILSTATE_INVALIDDEPTHFUNC = 201;
export const D3D11_MESSAGE_ID_CREATEDEPTHSTENCILSTATE_INVALIDFRONTFACESTENCILFAILOP = 202;
export const D3D11_MESSAGE_ID_CREATEDEPTHSTENCILSTATE_INVALIDFRONTFACESTENCILZFAILOP = 203;
export const D3D11_MESSAGE_ID_CREATEDEPTHSTENCILSTATE_INVALIDFRONTFACESTENCILPASSOP = 204;
export const D3D11_MESSAGE_ID_CREATEDEPTHSTENCILSTATE_INVALIDFRONTFACESTENCILFUNC = 205;
export const D3D11_MESSAGE_ID_CREATEDEPTHSTENCILSTATE_INVALIDBACKFACESTENCILFAILOP = 206;
export const D3D11_MESSAGE_ID_CREATEDEPTHSTENCILSTATE_INVALIDBACKFACESTENCILZFAILOP = 207;
export const D3D11_MESSAGE_ID_CREATEDEPTHSTENCILSTATE_INVALIDBACKFACESTENCILPASSOP = 208;
export const D3D11_MESSAGE_ID_CREATEDEPTHSTENCILSTATE_INVALIDBACKFACESTENCILFUNC = 209;
export const D3D11_MESSAGE_ID_CREATEDEPTHSTENCILSTATE_TOOMANYOBJECTS = 210;
export const D3D11_MESSAGE_ID_CREATEDEPTHSTENCILSTATE_NULLDESC = 211;
export const D3D11_MESSAGE_ID_CREATEBLENDSTATE_INVALIDSRCBLEND = 212;
export const D3D11_MESSAGE_ID_CREATEBLENDSTATE_INVALIDDESTBLEND = 213;
export const D3D11_MESSAGE_ID_CREATEBLENDSTATE_INVALIDBLENDOP = 214;
export const D3D11_MESSAGE_ID_CREATEBLENDSTATE_INVALIDSRCBLENDALPHA = 215;
export const D3D11_MESSAGE_ID_CREATEBLENDSTATE_INVALIDDESTBLENDALPHA = 216;
export const D3D11_MESSAGE_ID_CREATEBLENDSTATE_INVALIDBLENDOPALPHA = 217;
export const D3D11_MESSAGE_ID_CREATEBLENDSTATE_INVALIDRENDERTARGETWRITEMASK = 218;
export const D3D11_MESSAGE_ID_CREATEBLENDSTATE_TOOMANYOBJECTS = 219;
export const D3D11_MESSAGE_ID_CREATEBLENDSTATE_NULLDESC = 220;
export const D3D11_MESSAGE_ID_CREATESAMPLERSTATE_INVALIDFILTER = 221;
export const D3D11_MESSAGE_ID_CREATESAMPLERSTATE_INVALIDADDRESSU = 222;
export const D3D11_MESSAGE_ID_CREATESAMPLERSTATE_INVALIDADDRESSV = 223;
export const D3D11_MESSAGE_ID_CREATESAMPLERSTATE_INVALIDADDRESSW = 224;
export const D3D11_MESSAGE_ID_CREATESAMPLERSTATE_INVALIDMIPLODBIAS = 225;
export const D3D11_MESSAGE_ID_CREATESAMPLERSTATE_INVALIDMAXANISOTROPY = 226;
export const D3D11_MESSAGE_ID_CREATESAMPLERSTATE_INVALIDCOMPARISONFUNC = 227;
export const D3D11_MESSAGE_ID_CREATESAMPLERSTATE_INVALIDMINLOD = 228;
export const D3D11_MESSAGE_ID_CREATESAMPLERSTATE_INVALIDMAXLOD = 229;
export const D3D11_MESSAGE_ID_CREATESAMPLERSTATE_TOOMANYOBJECTS = 230;
export const D3D11_MESSAGE_ID_CREATESAMPLERSTATE_NULLDESC = 231;
export const D3D11_MESSAGE_ID_CREATEQUERYORPREDICATE_INVALIDQUERY = 232;
export const D3D11_MESSAGE_ID_CREATEQUERYORPREDICATE_INVALIDMISCFLAGS = 233;
export const D3D11_MESSAGE_ID_CREATEQUERYORPREDICATE_UNEXPECTEDMISCFLAG = 234;
export const D3D11_MESSAGE_ID_CREATEQUERYORPREDICATE_NULLDESC = 235;
export const D3D11_MESSAGE_ID_DEVICE_IASETPRIMITIVETOPOLOGY_TOPOLOGY_UNRECOGNIZED = 236;
export const D3D11_MESSAGE_ID_DEVICE_IASETPRIMITIVETOPOLOGY_TOPOLOGY_UNDEFINED = 237;
export const D3D11_MESSAGE_ID_IASETVERTEXBUFFERS_INVALIDBUFFER = 238;
export const D3D11_MESSAGE_ID_DEVICE_IASETVERTEXBUFFERS_OFFSET_TOO_LARGE = 239;
export const D3D11_MESSAGE_ID_DEVICE_IASETVERTEXBUFFERS_BUFFERS_EMPTY = 240;
export const D3D11_MESSAGE_ID_IASETINDEXBUFFER_INVALIDBUFFER = 241;
export const D3D11_MESSAGE_ID_DEVICE_IASETINDEXBUFFER_FORMAT_INVALID = 242;
export const D3D11_MESSAGE_ID_DEVICE_IASETINDEXBUFFER_OFFSET_TOO_LARGE = 243;
export const D3D11_MESSAGE_ID_DEVICE_IASETINDEXBUFFER_OFFSET_UNALIGNED = 244;
export const D3D11_MESSAGE_ID_DEVICE_VSSETSHADERRESOURCES_VIEWS_EMPTY = 245;
export const D3D11_MESSAGE_ID_VSSETCONSTANTBUFFERS_INVALIDBUFFER = 246;
export const D3D11_MESSAGE_ID_DEVICE_VSSETCONSTANTBUFFERS_BUFFERS_EMPTY = 247;
export const D3D11_MESSAGE_ID_DEVICE_VSSETSAMPLERS_SAMPLERS_EMPTY = 248;
export const D3D11_MESSAGE_ID_DEVICE_GSSETSHADERRESOURCES_VIEWS_EMPTY = 249;
export const D3D11_MESSAGE_ID_GSSETCONSTANTBUFFERS_INVALIDBUFFER = 250;
export const D3D11_MESSAGE_ID_DEVICE_GSSETCONSTANTBUFFERS_BUFFERS_EMPTY = 251;
export const D3D11_MESSAGE_ID_DEVICE_GSSETSAMPLERS_SAMPLERS_EMPTY = 252;
export const D3D11_MESSAGE_ID_SOSETTARGETS_INVALIDBUFFER = 253;
export const D3D11_MESSAGE_ID_DEVICE_SOSETTARGETS_OFFSET_UNALIGNED = 254;
export const D3D11_MESSAGE_ID_DEVICE_PSSETSHADERRESOURCES_VIEWS_EMPTY = 255;
export const D3D11_MESSAGE_ID_PSSETCONSTANTBUFFERS_INVALIDBUFFER = 256;
export const D3D11_MESSAGE_ID_DEVICE_PSSETCONSTANTBUFFERS_BUFFERS_EMPTY = 257;
export const D3D11_MESSAGE_ID_DEVICE_PSSETSAMPLERS_SAMPLERS_EMPTY = 258;
export const D3D11_MESSAGE_ID_DEVICE_RSSETVIEWPORTS_INVALIDVIEWPORT = 259;
export const D3D11_MESSAGE_ID_DEVICE_RSSETSCISSORRECTS_INVALIDSCISSOR = 260;
export const D3D11_MESSAGE_ID_CLEARRENDERTARGETVIEW_DENORMFLUSH = 261;
export const D3D11_MESSAGE_ID_CLEARDEPTHSTENCILVIEW_DENORMFLUSH = 262;
export const D3D11_MESSAGE_ID_CLEARDEPTHSTENCILVIEW_INVALID = 263;
export const D3D11_MESSAGE_ID_DEVICE_IAGETVERTEXBUFFERS_BUFFERS_EMPTY = 264;
export const D3D11_MESSAGE_ID_DEVICE_VSGETSHADERRESOURCES_VIEWS_EMPTY = 265;
export const D3D11_MESSAGE_ID_DEVICE_VSGETCONSTANTBUFFERS_BUFFERS_EMPTY = 266;
export const D3D11_MESSAGE_ID_DEVICE_VSGETSAMPLERS_SAMPLERS_EMPTY = 267;
export const D3D11_MESSAGE_ID_DEVICE_GSGETSHADERRESOURCES_VIEWS_EMPTY = 268;
export const D3D11_MESSAGE_ID_DEVICE_GSGETCONSTANTBUFFERS_BUFFERS_EMPTY = 269;
export const D3D11_MESSAGE_ID_DEVICE_GSGETSAMPLERS_SAMPLERS_EMPTY = 270;
export const D3D11_MESSAGE_ID_DEVICE_SOGETTARGETS_BUFFERS_EMPTY = 271;
export const D3D11_MESSAGE_ID_DEVICE_PSGETSHADERRESOURCES_VIEWS_EMPTY = 272;
export const D3D11_MESSAGE_ID_DEVICE_PSGETCONSTANTBUFFERS_BUFFERS_EMPTY = 273;
export const D3D11_MESSAGE_ID_DEVICE_PSGETSAMPLERS_SAMPLERS_EMPTY = 274;
export const D3D11_MESSAGE_ID_DEVICE_RSGETVIEWPORTS_VIEWPORTS_EMPTY = 275;
export const D3D11_MESSAGE_ID_DEVICE_RSGETSCISSORRECTS_RECTS_EMPTY = 276;
export const D3D11_MESSAGE_ID_DEVICE_GENERATEMIPS_RESOURCE_INVALID = 277;
export const D3D11_MESSAGE_ID_COPYSUBRESOURCEREGION_INVALIDDESTINATIONSUBRESOURCE = 278;
export const D3D11_MESSAGE_ID_COPYSUBRESOURCEREGION_INVALIDSOURCESUBRESOURCE = 279;
export const D3D11_MESSAGE_ID_COPYSUBRESOURCEREGION_INVALIDSOURCEBOX = 280;
export const D3D11_MESSAGE_ID_COPYSUBRESOURCEREGION_INVALIDSOURCE = 281;
export const D3D11_MESSAGE_ID_COPYSUBRESOURCEREGION_INVALIDDESTINATIONSTATE = 282;
export const D3D11_MESSAGE_ID_COPYSUBRESOURCEREGION_INVALIDSOURCESTATE = 283;
export const D3D11_MESSAGE_ID_COPYRESOURCE_INVALIDSOURCE = 284;
export const D3D11_MESSAGE_ID_COPYRESOURCE_INVALIDDESTINATIONSTATE = 285;
export const D3D11_MESSAGE_ID_COPYRESOURCE_INVALIDSOURCESTATE = 286;
export const D3D11_MESSAGE_ID_UPDATESUBRESOURCE_INVALIDDESTINATIONSUBRESOURCE = 287;
export const D3D11_MESSAGE_ID_UPDATESUBRESOURCE_INVALIDDESTINATIONBOX = 288;
export const D3D11_MESSAGE_ID_UPDATESUBRESOURCE_INVALIDDESTINATIONSTATE = 289;
export const D3D11_MESSAGE_ID_DEVICE_RESOLVESUBRESOURCE_DESTINATION_INVALID = 290;
export const D3D11_MESSAGE_ID_DEVICE_RESOLVESUBRESOURCE_DESTINATION_SUBRESOURCE_INVALID = 291;
export const D3D11_MESSAGE_ID_DEVICE_RESOLVESUBRESOURCE_SOURCE_INVALID = 292;
export const D3D11_MESSAGE_ID_DEVICE_RESOLVESUBRESOURCE_SOURCE_SUBRESOURCE_INVALID = 293;
export const D3D11_MESSAGE_ID_DEVICE_RESOLVESUBRESOURCE_FORMAT_INVALID = 294;
export const D3D11_MESSAGE_ID_BUFFER_MAP_INVALIDMAPTYPE = 295;
export const D3D11_MESSAGE_ID_BUFFER_MAP_INVALIDFLAGS = 296;
export const D3D11_MESSAGE_ID_BUFFER_MAP_ALREADYMAPPED = 297;
export const D3D11_MESSAGE_ID_BUFFER_MAP_DEVICEREMOVED_RETURN = 298;
export const D3D11_MESSAGE_ID_BUFFER_UNMAP_NOTMAPPED = 299;
export const D3D11_MESSAGE_ID_TEXTURE1D_MAP_INVALIDMAPTYPE = 300;
export const D3D11_MESSAGE_ID_TEXTURE1D_MAP_INVALIDSUBRESOURCE = 301;
export const D3D11_MESSAGE_ID_TEXTURE1D_MAP_INVALIDFLAGS = 302;
export const D3D11_MESSAGE_ID_TEXTURE1D_MAP_ALREADYMAPPED = 303;
export const D3D11_MESSAGE_ID_TEXTURE1D_MAP_DEVICEREMOVED_RETURN = 304;
export const D3D11_MESSAGE_ID_TEXTURE1D_UNMAP_INVALIDSUBRESOURCE = 305;
export const D3D11_MESSAGE_ID_TEXTURE1D_UNMAP_NOTMAPPED = 306;
export const D3D11_MESSAGE_ID_TEXTURE2D_MAP_INVALIDMAPTYPE = 307;
export const D3D11_MESSAGE_ID_TEXTURE2D_MAP_INVALIDSUBRESOURCE = 308;
export const D3D11_MESSAGE_ID_TEXTURE2D_MAP_INVALIDFLAGS = 309;
export const D3D11_MESSAGE_ID_TEXTURE2D_MAP_ALREADYMAPPED = 310;
export const D3D11_MESSAGE_ID_TEXTURE2D_MAP_DEVICEREMOVED_RETURN = 311;
export const D3D11_MESSAGE_ID_TEXTURE2D_UNMAP_INVALIDSUBRESOURCE = 312;
export const D3D11_MESSAGE_ID_TEXTURE2D_UNMAP_NOTMAPPED = 313;
export const D3D11_MESSAGE_ID_TEXTURE3D_MAP_INVALIDMAPTYPE = 314;
export const D3D11_MESSAGE_ID_TEXTURE3D_MAP_INVALIDSUBRESOURCE = 315;
export const D3D11_MESSAGE_ID_TEXTURE3D_MAP_INVALIDFLAGS = 316;
export const D3D11_MESSAGE_ID_TEXTURE3D_MAP_ALREADYMAPPED = 317;
export const D3D11_MESSAGE_ID_TEXTURE3D_MAP_DEVICEREMOVED_RETURN = 318;
export const D3D11_MESSAGE_ID_TEXTURE3D_UNMAP_INVALIDSUBRESOURCE = 319;
export const D3D11_MESSAGE_ID_TEXTURE3D_UNMAP_NOTMAPPED = 320;
export const D3D11_MESSAGE_ID_CHECKFORMATSUPPORT_FORMAT_DEPRECATED = 321;
export const D3D11_MESSAGE_ID_CHECKMULTISAMPLEQUALITYLEVELS_FORMAT_DEPRECATED = 322;
export const D3D11_MESSAGE_ID_SETEXCEPTIONMODE_UNRECOGNIZEDFLAGS = 323;
export const D3D11_MESSAGE_ID_SETEXCEPTIONMODE_INVALIDARG_RETURN = 324;
export const D3D11_MESSAGE_ID_SETEXCEPTIONMODE_DEVICEREMOVED_RETURN = 325;
export const D3D11_MESSAGE_ID_REF_SIMULATING_INFINITELY_FAST_HARDWARE = 326;
export const D3D11_MESSAGE_ID_REF_THREADING_MODE = 327;
export const D3D11_MESSAGE_ID_REF_UMDRIVER_EXCEPTION = 328;
export const D3D11_MESSAGE_ID_REF_KMDRIVER_EXCEPTION = 329;
export const D3D11_MESSAGE_ID_REF_HARDWARE_EXCEPTION = 330;
export const D3D11_MESSAGE_ID_REF_ACCESSING_INDEXABLE_TEMP_OUT_OF_RANGE = 331;
export const D3D11_MESSAGE_ID_REF_PROBLEM_PARSING_SHADER = 332;
export const D3D11_MESSAGE_ID_REF_OUT_OF_MEMORY = 333;
export const D3D11_MESSAGE_ID_REF_INFO = 334;
export const D3D11_MESSAGE_ID_DEVICE_DRAW_VERTEXPOS_OVERFLOW = 335;
export const D3D11_MESSAGE_ID_DEVICE_DRAWINDEXED_INDEXPOS_OVERFLOW = 336;
export const D3D11_MESSAGE_ID_DEVICE_DRAWINSTANCED_VERTEXPOS_OVERFLOW = 337;
export const D3D11_MESSAGE_ID_DEVICE_DRAWINSTANCED_INSTANCEPOS_OVERFLOW = 338;
export const D3D11_MESSAGE_ID_DEVICE_DRAWINDEXEDINSTANCED_INSTANCEPOS_OVERFLOW = 339;
export const D3D11_MESSAGE_ID_DEVICE_DRAWINDEXEDINSTANCED_INDEXPOS_OVERFLOW = 340;
export const D3D11_MESSAGE_ID_DEVICE_DRAW_VERTEX_SHADER_NOT_SET = 341;
export const D3D11_MESSAGE_ID_DEVICE_SHADER_LINKAGE_SEMANTICNAME_NOT_FOUND = 342;
export const D3D11_MESSAGE_ID_DEVICE_SHADER_LINKAGE_REGISTERINDEX = 343;
export const D3D11_MESSAGE_ID_DEVICE_SHADER_LINKAGE_COMPONENTTYPE = 344;
export const D3D11_MESSAGE_ID_DEVICE_SHADER_LINKAGE_REGISTERMASK = 345;
export const D3D11_MESSAGE_ID_DEVICE_SHADER_LINKAGE_SYSTEMVALUE = 346;
export const D3D11_MESSAGE_ID_DEVICE_SHADER_LINKAGE_NEVERWRITTEN_ALWAYSREADS = 347;
export const D3D11_MESSAGE_ID_DEVICE_DRAW_VERTEX_BUFFER_NOT_SET = 348;
export const D3D11_MESSAGE_ID_DEVICE_DRAW_INPUTLAYOUT_NOT_SET = 349;
export const D3D11_MESSAGE_ID_DEVICE_DRAW_CONSTANT_BUFFER_NOT_SET = 350;
export const D3D11_MESSAGE_ID_DEVICE_DRAW_CONSTANT_BUFFER_TOO_SMALL = 351;
export const D3D11_MESSAGE_ID_DEVICE_DRAW_SAMPLER_NOT_SET = 352;
export const D3D11_MESSAGE_ID_DEVICE_DRAW_SHADERRESOURCEVIEW_NOT_SET = 353;
export const D3D11_MESSAGE_ID_DEVICE_DRAW_VIEW_DIMENSION_MISMATCH = 354;
export const D3D11_MESSAGE_ID_DEVICE_DRAW_VERTEX_BUFFER_STRIDE_TOO_SMALL = 355;
export const D3D11_MESSAGE_ID_DEVICE_DRAW_VERTEX_BUFFER_TOO_SMALL = 356;
export const D3D11_MESSAGE_ID_DEVICE_DRAW_INDEX_BUFFER_NOT_SET = 357;
export const D3D11_MESSAGE_ID_DEVICE_DRAW_INDEX_BUFFER_FORMAT_INVALID = 358;
export const D3D11_MESSAGE_ID_DEVICE_DRAW_INDEX_BUFFER_TOO_SMALL = 359;
export const D3D11_MESSAGE_ID_DEVICE_DRAW_GS_INPUT_PRIMITIVE_MISMATCH = 360;
export const D3D11_MESSAGE_ID_DEVICE_DRAW_RESOURCE_RETURN_TYPE_MISMATCH = 361;
export const D3D11_MESSAGE_ID_DEVICE_DRAW_POSITION_NOT_PRESENT = 362;
export const D3D11_MESSAGE_ID_DEVICE_DRAW_OUTPUT_STREAM_NOT_SET = 363;
export const D3D11_MESSAGE_ID_DEVICE_DRAW_BOUND_RESOURCE_MAPPED = 364;
export const D3D11_MESSAGE_ID_DEVICE_DRAW_INVALID_PRIMITIVETOPOLOGY = 365;
export const D3D11_MESSAGE_ID_DEVICE_DRAW_VERTEX_OFFSET_UNALIGNED = 366;
export const D3D11_MESSAGE_ID_DEVICE_DRAW_VERTEX_STRIDE_UNALIGNED = 367;
export const D3D11_MESSAGE_ID_DEVICE_DRAW_INDEX_OFFSET_UNALIGNED = 368;
export const D3D11_MESSAGE_ID_DEVICE_DRAW_OUTPUT_STREAM_OFFSET_UNALIGNED = 369;
export const D3D11_MESSAGE_ID_DEVICE_DRAW_RESOURCE_FORMAT_LD_UNSUPPORTED = 370;
export const D3D11_MESSAGE_ID_DEVICE_DRAW_RESOURCE_FORMAT_SAMPLE_UNSUPPORTED = 371;
export const D3D11_MESSAGE_ID_DEVICE_DRAW_RESOURCE_FORMAT_SAMPLE_C_UNSUPPORTED = 372;
export const D3D11_MESSAGE_ID_DEVICE_DRAW_RESOURCE_MULTISAMPLE_UNSUPPORTED = 373;
export const D3D11_MESSAGE_ID_DEVICE_DRAW_SO_TARGETS_BOUND_WITHOUT_SOURCE = 374;
export const D3D11_MESSAGE_ID_DEVICE_DRAW_SO_STRIDE_LARGER_THAN_BUFFER = 375;
export const D3D11_MESSAGE_ID_DEVICE_DRAW_OM_RENDER_TARGET_DOES_NOT_SUPPORT_BLENDING = 376;
export const D3D11_MESSAGE_ID_DEVICE_DRAW_OM_DUAL_SOURCE_BLENDING_CAN_ONLY_HAVE_RENDER_TARGET_0 = 377;
export const D3D11_MESSAGE_ID_DEVICE_REMOVAL_PROCESS_AT_FAULT = 378;
export const D3D11_MESSAGE_ID_DEVICE_REMOVAL_PROCESS_POSSIBLY_AT_FAULT = 379;
export const D3D11_MESSAGE_ID_DEVICE_REMOVAL_PROCESS_NOT_AT_FAULT = 380;
export const D3D11_MESSAGE_ID_DEVICE_OPEN_SHARED_RESOURCE_INVALIDARG_RETURN = 381;
export const D3D11_MESSAGE_ID_DEVICE_OPEN_SHARED_RESOURCE_OUTOFMEMORY_RETURN = 382;
export const D3D11_MESSAGE_ID_DEVICE_OPEN_SHARED_RESOURCE_BADINTERFACE_RETURN = 383;
export const D3D11_MESSAGE_ID_DEVICE_DRAW_VIEWPORT_NOT_SET = 384;
export const D3D11_MESSAGE_ID_CREATEINPUTLAYOUT_TRAILING_DIGIT_IN_SEMANTIC = 385;
export const D3D11_MESSAGE_ID_CREATEGEOMETRYSHADERWITHSTREAMOUTPUT_TRAILING_DIGIT_IN_SEMANTIC = 386;
export const D3D11_MESSAGE_ID_DEVICE_RSSETVIEWPORTS_DENORMFLUSH = 387;
export const D3D11_MESSAGE_ID_OMSETRENDERTARGETS_INVALIDVIEW = 388;
export const D3D11_MESSAGE_ID_DEVICE_SETTEXTFILTERSIZE_INVALIDDIMENSIONS = 389;
export const D3D11_MESSAGE_ID_DEVICE_DRAW_SAMPLER_MISMATCH = 390;
export const D3D11_MESSAGE_ID_CREATEINPUTLAYOUT_TYPE_MISMATCH = 391;
export const D3D11_MESSAGE_ID_BLENDSTATE_GETDESC_LEGACY = 392;
export const D3D11_MESSAGE_ID_SHADERRESOURCEVIEW_GETDESC_LEGACY = 393;
export const D3D11_MESSAGE_ID_CREATEQUERY_OUTOFMEMORY_RETURN = 394;
export const D3D11_MESSAGE_ID_CREATEPREDICATE_OUTOFMEMORY_RETURN = 395;
export const D3D11_MESSAGE_ID_CREATECOUNTER_OUTOFRANGE_COUNTER = 396;
export const D3D11_MESSAGE_ID_CREATECOUNTER_SIMULTANEOUS_ACTIVE_COUNTERS_EXHAUSTED = 397;
export const D3D11_MESSAGE_ID_CREATECOUNTER_UNSUPPORTED_WELLKNOWN_COUNTER = 398;
export const D3D11_MESSAGE_ID_CREATECOUNTER_OUTOFMEMORY_RETURN = 399;
export const D3D11_MESSAGE_ID_CREATECOUNTER_NONEXCLUSIVE_RETURN = 400;
export const D3D11_MESSAGE_ID_CREATECOUNTER_NULLDESC = 401;
export const D3D11_MESSAGE_ID_CHECKCOUNTER_OUTOFRANGE_COUNTER = 402;
export const D3D11_MESSAGE_ID_CHECKCOUNTER_UNSUPPORTED_WELLKNOWN_COUNTER = 403;
export const D3D11_MESSAGE_ID_SETPREDICATION_INVALID_PREDICATE_STATE = 404;
export const D3D11_MESSAGE_ID_QUERY_BEGIN_UNSUPPORTED = 405;
export const D3D11_MESSAGE_ID_PREDICATE_BEGIN_DURING_PREDICATION = 406;
export const D3D11_MESSAGE_ID_QUERY_BEGIN_DUPLICATE = 407;
export const D3D11_MESSAGE_ID_QUERY_BEGIN_ABANDONING_PREVIOUS_RESULTS = 408;
export const D3D11_MESSAGE_ID_PREDICATE_END_DURING_PREDICATION = 409;
export const D3D11_MESSAGE_ID_QUERY_END_ABANDONING_PREVIOUS_RESULTS = 410;
export const D3D11_MESSAGE_ID_QUERY_END_WITHOUT_BEGIN = 411;
export const D3D11_MESSAGE_ID_QUERY_GETDATA_INVALID_DATASIZE = 412;
export const D3D11_MESSAGE_ID_QUERY_GETDATA_INVALID_FLAGS = 413;
export const D3D11_MESSAGE_ID_QUERY_GETDATA_INVALID_CALL = 414;
export const D3D11_MESSAGE_ID_DEVICE_DRAW_PS_OUTPUT_TYPE_MISMATCH = 415;
export const D3D11_MESSAGE_ID_DEVICE_DRAW_RESOURCE_FORMAT_GATHER_UNSUPPORTED = 416;
export const D3D11_MESSAGE_ID_DEVICE_DRAW_INVALID_USE_OF_CENTER_MULTISAMPLE_PATTERN = 417;
export const D3D11_MESSAGE_ID_DEVICE_IASETVERTEXBUFFERS_STRIDE_TOO_LARGE = 418;
export const D3D11_MESSAGE_ID_DEVICE_IASETVERTEXBUFFERS_INVALIDRANGE = 419;
export const D3D11_MESSAGE_ID_CREATEINPUTLAYOUT_EMPTY_LAYOUT = 420;
export const D3D11_MESSAGE_ID_DEVICE_DRAW_RESOURCE_SAMPLE_COUNT_MISMATCH = 421;
export const D3D11_MESSAGE_ID_LIVE_OBJECT_SUMMARY = 422;
export const D3D11_MESSAGE_ID_LIVE_BUFFER = 423;
export const D3D11_MESSAGE_ID_LIVE_TEXTURE1D = 424;
export const D3D11_MESSAGE_ID_LIVE_TEXTURE2D = 425;
export const D3D11_MESSAGE_ID_LIVE_TEXTURE3D = 426;
export const D3D11_MESSAGE_ID_LIVE_SHADERRESOURCEVIEW = 427;
export const D3D11_MESSAGE_ID_LIVE_RENDERTARGETVIEW = 428;
export const D3D11_MESSAGE_ID_LIVE_DEPTHSTENCILVIEW = 429;
export const D3D11_MESSAGE_ID_LIVE_VERTEXSHADER = 430;
export const D3D11_MESSAGE_ID_LIVE_GEOMETRYSHADER = 431;
export const D3D11_MESSAGE_ID_LIVE_PIXELSHADER = 432;
export const D3D11_MESSAGE_ID_LIVE_INPUTLAYOUT = 433;
export const D3D11_MESSAGE_ID_LIVE_SAMPLER = 434;
export const D3D11_MESSAGE_ID_LIVE_BLENDSTATE = 435;
export const D3D11_MESSAGE_ID_LIVE_DEPTHSTENCILSTATE = 436;
export const D3D11_MESSAGE_ID_LIVE_RASTERIZERSTATE = 437;
export const D3D11_MESSAGE_ID_LIVE_QUERY = 438;
export const D3D11_MESSAGE_ID_LIVE_PREDICATE = 439;
export const D3D11_MESSAGE_ID_LIVE_COUNTER = 440;
export const D3D11_MESSAGE_ID_LIVE_DEVICE = 441;
export const D3D11_MESSAGE_ID_LIVE_SWAPCHAIN = 442;
export const D3D11_MESSAGE_ID_D3D10_MESSAGES_END = 443;
export const D3D11_MESSAGE_ID_D3D10L9_MESSAGES_START = 1048576;
export const D3D11_MESSAGE_ID_CREATEDEPTHSTENCILSTATE_STENCIL_NO_TWO_SIDED = 1048577;
export const D3D11_MESSAGE_ID_CREATERASTERIZERSTATE_DepthBiasClamp_NOT_SUPPORTED = 1048578;
export const D3D11_MESSAGE_ID_CREATESAMPLERSTATE_NO_COMPARISON_SUPPORT = 1048579;
export const D3D11_MESSAGE_ID_CREATESAMPLERSTATE_EXCESSIVE_ANISOTROPY = 1048580;
export const D3D11_MESSAGE_ID_CREATESAMPLERSTATE_BORDER_OUT_OF_RANGE = 1048581;
export const D3D11_MESSAGE_ID_VSSETSAMPLERS_NOT_SUPPORTED = 1048582;
export const D3D11_MESSAGE_ID_VSSETSAMPLERS_TOO_MANY_SAMPLERS = 1048583;
export const D3D11_MESSAGE_ID_PSSETSAMPLERS_TOO_MANY_SAMPLERS = 1048584;
export const D3D11_MESSAGE_ID_CREATERESOURCE_NO_ARRAYS = 1048585;
export const D3D11_MESSAGE_ID_CREATERESOURCE_NO_VB_AND_IB_BIND = 1048586;
export const D3D11_MESSAGE_ID_CREATERESOURCE_NO_TEXTURE_1D = 1048587;
export const D3D11_MESSAGE_ID_CREATERESOURCE_DIMENSION_OUT_OF_RANGE = 1048588;
export const D3D11_MESSAGE_ID_CREATERESOURCE_NOT_BINDABLE_AS_SHADER_RESOURCE = 1048589;
export const D3D11_MESSAGE_ID_OMSETRENDERTARGETS_TOO_MANY_RENDER_TARGETS = 1048590;
export const D3D11_MESSAGE_ID_OMSETRENDERTARGETS_NO_DIFFERING_BIT_DEPTHS = 1048591;
export const D3D11_MESSAGE_ID_IASETVERTEXBUFFERS_BAD_BUFFER_INDEX = 1048592;
export const D3D11_MESSAGE_ID_DEVICE_RSSETVIEWPORTS_TOO_MANY_VIEWPORTS = 1048593;
export const D3D11_MESSAGE_ID_DEVICE_IASETPRIMITIVETOPOLOGY_ADJACENCY_UNSUPPORTED = 1048594;
export const D3D11_MESSAGE_ID_DEVICE_RSSETSCISSORRECTS_TOO_MANY_SCISSORS = 1048595;
export const D3D11_MESSAGE_ID_COPYRESOURCE_ONLY_TEXTURE_2D_WITHIN_GPU_MEMORY = 1048596;
export const D3D11_MESSAGE_ID_COPYRESOURCE_NO_TEXTURE_3D_READBACK = 1048597;
export const D3D11_MESSAGE_ID_COPYRESOURCE_NO_TEXTURE_ONLY_READBACK = 1048598;
export const D3D11_MESSAGE_ID_CREATEINPUTLAYOUT_UNSUPPORTED_FORMAT = 1048599;
export const D3D11_MESSAGE_ID_CREATEBLENDSTATE_NO_ALPHA_TO_COVERAGE = 1048600;
export const D3D11_MESSAGE_ID_CREATERASTERIZERSTATE_DepthClipEnable_MUST_BE_TRUE = 1048601;
export const D3D11_MESSAGE_ID_DRAWINDEXED_STARTINDEXLOCATION_MUST_BE_POSITIVE = 1048602;
export const D3D11_MESSAGE_ID_CREATESHADERRESOURCEVIEW_MUST_USE_LOWEST_LOD = 1048603;
export const D3D11_MESSAGE_ID_CREATESAMPLERSTATE_MINLOD_MUST_NOT_BE_FRACTIONAL = 1048604;
export const D3D11_MESSAGE_ID_CREATESAMPLERSTATE_MAXLOD_MUST_BE_FLT_MAX = 1048605;
export const D3D11_MESSAGE_ID_CREATESHADERRESOURCEVIEW_FIRSTARRAYSLICE_MUST_BE_ZERO = 1048606;
export const D3D11_MESSAGE_ID_CREATESHADERRESOURCEVIEW_CUBES_MUST_HAVE_6_SIDES = 1048607;
export const D3D11_MESSAGE_ID_CREATERESOURCE_NOT_BINDABLE_AS_RENDER_TARGET = 1048608;
export const D3D11_MESSAGE_ID_CREATERESOURCE_NO_DWORD_INDEX_BUFFER = 1048609;
export const D3D11_MESSAGE_ID_CREATERESOURCE_MSAA_PRECLUDES_SHADER_RESOURCE = 1048610;
export const D3D11_MESSAGE_ID_CREATERESOURCE_PRESENTATION_PRECLUDES_SHADER_RESOURCE = 1048611;
export const D3D11_MESSAGE_ID_CREATEBLENDSTATE_NO_INDEPENDENT_BLEND_ENABLE = 1048612;
export const D3D11_MESSAGE_ID_CREATEBLENDSTATE_NO_INDEPENDENT_WRITE_MASKS = 1048613;
export const D3D11_MESSAGE_ID_CREATERESOURCE_NO_STREAM_OUT = 1048614;
export const D3D11_MESSAGE_ID_CREATERESOURCE_ONLY_VB_IB_FOR_BUFFERS = 1048615;
export const D3D11_MESSAGE_ID_CREATERESOURCE_NO_AUTOGEN_FOR_VOLUMES = 1048616;
export const D3D11_MESSAGE_ID_CREATERESOURCE_DXGI_FORMAT_R8G8B8A8_CANNOT_BE_SHARED = 1048617;
export const D3D11_MESSAGE_ID_VSSHADERRESOURCES_NOT_SUPPORTED = 1048618;
export const D3D11_MESSAGE_ID_GEOMETRY_SHADER_NOT_SUPPORTED = 1048619;
export const D3D11_MESSAGE_ID_STREAM_OUT_NOT_SUPPORTED = 1048620;
export const D3D11_MESSAGE_ID_TEXT_FILTER_NOT_SUPPORTED = 1048621;
export const D3D11_MESSAGE_ID_CREATEBLENDSTATE_NO_SEPARATE_ALPHA_BLEND = 1048622;
export const D3D11_MESSAGE_ID_CREATEBLENDSTATE_NO_MRT_BLEND = 1048623;
export const D3D11_MESSAGE_ID_CREATEBLENDSTATE_OPERATION_NOT_SUPPORTED = 1048624;
export const D3D11_MESSAGE_ID_CREATESAMPLERSTATE_NO_MIRRORONCE = 1048625;
export const D3D11_MESSAGE_ID_DRAWINSTANCED_NOT_SUPPORTED = 1048626;
export const D3D11_MESSAGE_ID_DRAWINDEXEDINSTANCED_NOT_SUPPORTED_BELOW_9_3 = 1048627;
export const D3D11_MESSAGE_ID_DRAWINDEXED_POINTLIST_UNSUPPORTED = 1048628;
export const D3D11_MESSAGE_ID_SETBLENDSTATE_SAMPLE_MASK_CANNOT_BE_ZERO = 1048629;
export const D3D11_MESSAGE_ID_CREATERESOURCE_DIMENSION_EXCEEDS_FEATURE_LEVEL_DEFINITION = 1048630;
export const D3D11_MESSAGE_ID_CREATERESOURCE_ONLY_SINGLE_MIP_LEVEL_DEPTH_STENCIL_SUPPORTED = 1048631;
export const D3D11_MESSAGE_ID_DEVICE_RSSETSCISSORRECTS_NEGATIVESCISSOR = 1048632;
export const D3D11_MESSAGE_ID_SLOT_ZERO_MUST_BE_D3D10_INPUT_PER_VERTEX_DATA = 1048633;
export const D3D11_MESSAGE_ID_CREATERESOURCE_NON_POW_2_MIPMAP = 1048634;
export const D3D11_MESSAGE_ID_CREATESAMPLERSTATE_BORDER_NOT_SUPPORTED = 1048635;
export const D3D11_MESSAGE_ID_OMSETRENDERTARGETS_NO_SRGB_MRT = 1048636;
export const D3D11_MESSAGE_ID_COPYRESOURCE_NO_3D_MISMATCHED_UPDATES = 1048637;
export const D3D11_MESSAGE_ID_D3D10L9_MESSAGES_END = 1048638;
export const D3D11_MESSAGE_ID_D3D11_MESSAGES_START = 2097152;
export const D3D11_MESSAGE_ID_CREATEDEPTHSTENCILVIEW_INVALIDFLAGS = 2097153;
export const D3D11_MESSAGE_ID_CREATEVERTEXSHADER_INVALIDCLASSLINKAGE = 2097154;
export const D3D11_MESSAGE_ID_CREATEGEOMETRYSHADER_INVALIDCLASSLINKAGE = 2097155;
export const D3D11_MESSAGE_ID_CREATEGEOMETRYSHADERWITHSTREAMOUTPUT_INVALIDNUMSTREAMS = 2097156;
export const D3D11_MESSAGE_ID_CREATEGEOMETRYSHADERWITHSTREAMOUTPUT_INVALIDSTREAMTORASTERIZER = 2097157;
export const D3D11_MESSAGE_ID_CREATEGEOMETRYSHADERWITHSTREAMOUTPUT_UNEXPECTEDSTREAMS = 2097158;
export const D3D11_MESSAGE_ID_CREATEGEOMETRYSHADERWITHSTREAMOUTPUT_INVALIDCLASSLINKAGE = 2097159;
export const D3D11_MESSAGE_ID_CREATEPIXELSHADER_INVALIDCLASSLINKAGE = 2097160;
export const D3D11_MESSAGE_ID_CREATEDEFERREDCONTEXT_INVALID_COMMANDLISTFLAGS = 2097161;
export const D3D11_MESSAGE_ID_CREATEDEFERREDCONTEXT_SINGLETHREADED = 2097162;
export const D3D11_MESSAGE_ID_CREATEDEFERREDCONTEXT_INVALIDARG_RETURN = 2097163;
export const D3D11_MESSAGE_ID_CREATEDEFERREDCONTEXT_INVALID_CALL_RETURN = 2097164;
export const D3D11_MESSAGE_ID_CREATEDEFERREDCONTEXT_OUTOFMEMORY_RETURN = 2097165;
export const D3D11_MESSAGE_ID_FINISHDISPLAYLIST_ONIMMEDIATECONTEXT = 2097166;
export const D3D11_MESSAGE_ID_FINISHDISPLAYLIST_OUTOFMEMORY_RETURN = 2097167;
export const D3D11_MESSAGE_ID_FINISHDISPLAYLIST_INVALID_CALL_RETURN = 2097168;
export const D3D11_MESSAGE_ID_CREATEGEOMETRYSHADERWITHSTREAMOUTPUT_INVALIDSTREAM = 2097169;
export const D3D11_MESSAGE_ID_CREATEGEOMETRYSHADERWITHSTREAMOUTPUT_UNEXPECTEDENTRIES = 2097170;
export const D3D11_MESSAGE_ID_CREATEGEOMETRYSHADERWITHSTREAMOUTPUT_UNEXPECTEDSTRIDES = 2097171;
export const D3D11_MESSAGE_ID_CREATEGEOMETRYSHADERWITHSTREAMOUTPUT_INVALIDNUMSTRIDES = 2097172;
export const D3D11_MESSAGE_ID_DEVICE_HSSETSHADERRESOURCES_HAZARD = 2097173;
export const D3D11_MESSAGE_ID_DEVICE_HSSETCONSTANTBUFFERS_HAZARD = 2097174;
export const D3D11_MESSAGE_ID_HSSETSHADERRESOURCES_UNBINDDELETINGOBJECT = 2097175;
export const D3D11_MESSAGE_ID_HSSETCONSTANTBUFFERS_UNBINDDELETINGOBJECT = 2097176;
export const D3D11_MESSAGE_ID_CREATEHULLSHADER_INVALIDCALL = 2097177;
export const D3D11_MESSAGE_ID_CREATEHULLSHADER_OUTOFMEMORY = 2097178;
export const D3D11_MESSAGE_ID_CREATEHULLSHADER_INVALIDSHADERBYTECODE = 2097179;
export const D3D11_MESSAGE_ID_CREATEHULLSHADER_INVALIDSHADERTYPE = 2097180;
export const D3D11_MESSAGE_ID_CREATEHULLSHADER_INVALIDCLASSLINKAGE = 2097181;
export const D3D11_MESSAGE_ID_DEVICE_HSSETSHADERRESOURCES_VIEWS_EMPTY = 2097182;
export const D3D11_MESSAGE_ID_HSSETCONSTANTBUFFERS_INVALIDBUFFER = 2097183;
export const D3D11_MESSAGE_ID_DEVICE_HSSETCONSTANTBUFFERS_BUFFERS_EMPTY = 2097184;
export const D3D11_MESSAGE_ID_DEVICE_HSSETSAMPLERS_SAMPLERS_EMPTY = 2097185;
export const D3D11_MESSAGE_ID_DEVICE_HSGETSHADERRESOURCES_VIEWS_EMPTY = 2097186;
export const D3D11_MESSAGE_ID_DEVICE_HSGETCONSTANTBUFFERS_BUFFERS_EMPTY = 2097187;
export const D3D11_MESSAGE_ID_DEVICE_HSGETSAMPLERS_SAMPLERS_EMPTY = 2097188;
export const D3D11_MESSAGE_ID_DEVICE_DSSETSHADERRESOURCES_HAZARD = 2097189;
export const D3D11_MESSAGE_ID_DEVICE_DSSETCONSTANTBUFFERS_HAZARD = 2097190;
export const D3D11_MESSAGE_ID_DSSETSHADERRESOURCES_UNBINDDELETINGOBJECT = 2097191;
export const D3D11_MESSAGE_ID_DSSETCONSTANTBUFFERS_UNBINDDELETINGOBJECT = 2097192;
export const D3D11_MESSAGE_ID_CREATEDOMAINSHADER_INVALIDCALL = 2097193;
export const D3D11_MESSAGE_ID_CREATEDOMAINSHADER_OUTOFMEMORY = 2097194;
export const D3D11_MESSAGE_ID_CREATEDOMAINSHADER_INVALIDSHADERBYTECODE = 2097195;
export const D3D11_MESSAGE_ID_CREATEDOMAINSHADER_INVALIDSHADERTYPE = 2097196;
export const D3D11_MESSAGE_ID_CREATEDOMAINSHADER_INVALIDCLASSLINKAGE = 2097197;
export const D3D11_MESSAGE_ID_DEVICE_DSSETSHADERRESOURCES_VIEWS_EMPTY = 2097198;
export const D3D11_MESSAGE_ID_DSSETCONSTANTBUFFERS_INVALIDBUFFER = 2097199;
export const D3D11_MESSAGE_ID_DEVICE_DSSETCONSTANTBUFFERS_BUFFERS_EMPTY = 2097200;
export const D3D11_MESSAGE_ID_DEVICE_DSSETSAMPLERS_SAMPLERS_EMPTY = 2097201;
export const D3D11_MESSAGE_ID_DEVICE_DSGETSHADERRESOURCES_VIEWS_EMPTY = 2097202;
export const D3D11_MESSAGE_ID_DEVICE_DSGETCONSTANTBUFFERS_BUFFERS_EMPTY = 2097203;
export const D3D11_MESSAGE_ID_DEVICE_DSGETSAMPLERS_SAMPLERS_EMPTY = 2097204;
export const D3D11_MESSAGE_ID_DEVICE_DRAW_HS_XOR_DS_MISMATCH = 2097205;
export const D3D11_MESSAGE_ID_DEFERRED_CONTEXT_REMOVAL_PROCESS_AT_FAULT = 2097206;
export const D3D11_MESSAGE_ID_DEVICE_DRAWINDIRECT_INVALID_ARG_BUFFER = 2097207;
export const D3D11_MESSAGE_ID_DEVICE_DRAWINDIRECT_OFFSET_UNALIGNED = 2097208;
export const D3D11_MESSAGE_ID_DEVICE_DRAWINDIRECT_OFFSET_OVERFLOW = 2097209;
export const D3D11_MESSAGE_ID_RESOURCE_MAP_INVALIDMAPTYPE = 2097210;
export const D3D11_MESSAGE_ID_RESOURCE_MAP_INVALIDSUBRESOURCE = 2097211;
export const D3D11_MESSAGE_ID_RESOURCE_MAP_INVALIDFLAGS = 2097212;
export const D3D11_MESSAGE_ID_RESOURCE_MAP_ALREADYMAPPED = 2097213;
export const D3D11_MESSAGE_ID_RESOURCE_MAP_DEVICEREMOVED_RETURN = 2097214;
export const D3D11_MESSAGE_ID_RESOURCE_MAP_OUTOFMEMORY_RETURN = 2097215;
export const D3D11_MESSAGE_ID_RESOURCE_MAP_WITHOUT_INITIAL_DISCARD = 2097216;
export const D3D11_MESSAGE_ID_RESOURCE_UNMAP_INVALIDSUBRESOURCE = 2097217;
export const D3D11_MESSAGE_ID_RESOURCE_UNMAP_NOTMAPPED = 2097218;
export const D3D11_MESSAGE_ID_DEVICE_DRAW_RASTERIZING_CONTROL_POINTS = 2097219;
export const D3D11_MESSAGE_ID_DEVICE_IASETPRIMITIVETOPOLOGY_TOPOLOGY_UNSUPPORTED = 2097220;
export const D3D11_MESSAGE_ID_DEVICE_DRAW_HS_DS_SIGNATURE_MISMATCH = 2097221;
export const D3D11_MESSAGE_ID_DEVICE_DRAW_HULL_SHADER_INPUT_TOPOLOGY_MISMATCH = 2097222;
export const D3D11_MESSAGE_ID_DEVICE_DRAW_HS_DS_CONTROL_POINT_COUNT_MISMATCH = 2097223;
export const D3D11_MESSAGE_ID_DEVICE_DRAW_HS_DS_TESSELLATOR_DOMAIN_MISMATCH = 2097224;
export const D3D11_MESSAGE_ID_CREATE_CONTEXT = 2097225;
export const D3D11_MESSAGE_ID_LIVE_CONTEXT = 2097226;
export const D3D11_MESSAGE_ID_DESTROY_CONTEXT = 2097227;
export const D3D11_MESSAGE_ID_CREATE_BUFFER = 2097228;
export const D3D11_MESSAGE_ID_LIVE_BUFFER_WIN7 = 2097229;
export const D3D11_MESSAGE_ID_DESTROY_BUFFER = 2097230;
export const D3D11_MESSAGE_ID_CREATE_TEXTURE1D = 2097231;
export const D3D11_MESSAGE_ID_LIVE_TEXTURE1D_WIN7 = 2097232;
export const D3D11_MESSAGE_ID_DESTROY_TEXTURE1D = 2097233;
export const D3D11_MESSAGE_ID_CREATE_TEXTURE2D = 2097234;
export const D3D11_MESSAGE_ID_LIVE_TEXTURE2D_WIN7 = 2097235;
export const D3D11_MESSAGE_ID_DESTROY_TEXTURE2D = 2097236;
export const D3D11_MESSAGE_ID_CREATE_TEXTURE3D = 2097237;
export const D3D11_MESSAGE_ID_LIVE_TEXTURE3D_WIN7 = 2097238;
export const D3D11_MESSAGE_ID_DESTROY_TEXTURE3D = 2097239;
export const D3D11_MESSAGE_ID_CREATE_SHADERRESOURCEVIEW = 2097240;
export const D3D11_MESSAGE_ID_LIVE_SHADERRESOURCEVIEW_WIN7 = 2097241;
export const D3D11_MESSAGE_ID_DESTROY_SHADERRESOURCEVIEW = 2097242;
export const D3D11_MESSAGE_ID_CREATE_RENDERTARGETVIEW = 2097243;
export const D3D11_MESSAGE_ID_LIVE_RENDERTARGETVIEW_WIN7 = 2097244;
export const D3D11_MESSAGE_ID_DESTROY_RENDERTARGETVIEW = 2097245;
export const D3D11_MESSAGE_ID_CREATE_DEPTHSTENCILVIEW = 2097246;
export const D3D11_MESSAGE_ID_LIVE_DEPTHSTENCILVIEW_WIN7 = 2097247;
export const D3D11_MESSAGE_ID_DESTROY_DEPTHSTENCILVIEW = 2097248;
export const D3D11_MESSAGE_ID_CREATE_VERTEXSHADER = 2097249;
export const D3D11_MESSAGE_ID_LIVE_VERTEXSHADER_WIN7 = 2097250;
export const D3D11_MESSAGE_ID_DESTROY_VERTEXSHADER = 2097251;
export const D3D11_MESSAGE_ID_CREATE_HULLSHADER = 2097252;
export const D3D11_MESSAGE_ID_LIVE_HULLSHADER = 2097253;
export const D3D11_MESSAGE_ID_DESTROY_HULLSHADER = 2097254;
export const D3D11_MESSAGE_ID_CREATE_DOMAINSHADER = 2097255;
export const D3D11_MESSAGE_ID_LIVE_DOMAINSHADER = 2097256;
export const D3D11_MESSAGE_ID_DESTROY_DOMAINSHADER = 2097257;
export const D3D11_MESSAGE_ID_CREATE_GEOMETRYSHADER = 2097258;
export const D3D11_MESSAGE_ID_LIVE_GEOMETRYSHADER_WIN7 = 2097259;
export const D3D11_MESSAGE_ID_DESTROY_GEOMETRYSHADER = 2097260;
export const D3D11_MESSAGE_ID_CREATE_PIXELSHADER = 2097261;
export const D3D11_MESSAGE_ID_LIVE_PIXELSHADER_WIN7 = 2097262;
export const D3D11_MESSAGE_ID_DESTROY_PIXELSHADER = 2097263;
export const D3D11_MESSAGE_ID_CREATE_INPUTLAYOUT = 2097264;
export const D3D11_MESSAGE_ID_LIVE_INPUTLAYOUT_WIN7 = 2097265;
export const D3D11_MESSAGE_ID_DESTROY_INPUTLAYOUT = 2097266;
export const D3D11_MESSAGE_ID_CREATE_SAMPLER = 2097267;
export const D3D11_MESSAGE_ID_LIVE_SAMPLER_WIN7 = 2097268;
export const D3D11_MESSAGE_ID_DESTROY_SAMPLER = 2097269;
export const D3D11_MESSAGE_ID_CREATE_BLENDSTATE = 2097270;
export const D3D11_MESSAGE_ID_LIVE_BLENDSTATE_WIN7 = 2097271;
export const D3D11_MESSAGE_ID_DESTROY_BLENDSTATE = 2097272;
export const D3D11_MESSAGE_ID_CREATE_DEPTHSTENCILSTATE = 2097273;
export const D3D11_MESSAGE_ID_LIVE_DEPTHSTENCILSTATE_WIN7 = 2097274;
export const D3D11_MESSAGE_ID_DESTROY_DEPTHSTENCILSTATE = 2097275;
export const D3D11_MESSAGE_ID_CREATE_RASTERIZERSTATE = 2097276;
export const D3D11_MESSAGE_ID_LIVE_RASTERIZERSTATE_WIN7 = 2097277;
export const D3D11_MESSAGE_ID_DESTROY_RASTERIZERSTATE = 2097278;
export const D3D11_MESSAGE_ID_CREATE_QUERY = 2097279;
export const D3D11_MESSAGE_ID_LIVE_QUERY_WIN7 = 2097280;
export const D3D11_MESSAGE_ID_DESTROY_QUERY = 2097281;
export const D3D11_MESSAGE_ID_CREATE_PREDICATE = 2097282;
export const D3D11_MESSAGE_ID_LIVE_PREDICATE_WIN7 = 2097283;
export const D3D11_MESSAGE_ID_DESTROY_PREDICATE = 2097284;
export const D3D11_MESSAGE_ID_CREATE_COUNTER = 2097285;
export const D3D11_MESSAGE_ID_DESTROY_COUNTER = 2097286;
export const D3D11_MESSAGE_ID_CREATE_COMMANDLIST = 2097287;
export const D3D11_MESSAGE_ID_LIVE_COMMANDLIST = 2097288;
export const D3D11_MESSAGE_ID_DESTROY_COMMANDLIST = 2097289;
export const D3D11_MESSAGE_ID_CREATE_CLASSINSTANCE = 2097290;
export const D3D11_MESSAGE_ID_LIVE_CLASSINSTANCE = 2097291;
export const D3D11_MESSAGE_ID_DESTROY_CLASSINSTANCE = 2097292;
export const D3D11_MESSAGE_ID_CREATE_CLASSLINKAGE = 2097293;
export const D3D11_MESSAGE_ID_LIVE_CLASSLINKAGE = 2097294;
export const D3D11_MESSAGE_ID_DESTROY_CLASSLINKAGE = 2097295;
export const D3D11_MESSAGE_ID_LIVE_DEVICE_WIN7 = 2097296;
export const D3D11_MESSAGE_ID_LIVE_OBJECT_SUMMARY_WIN7 = 2097297;
export const D3D11_MESSAGE_ID_CREATE_COMPUTESHADER = 2097298;
export const D3D11_MESSAGE_ID_LIVE_COMPUTESHADER = 2097299;
export const D3D11_MESSAGE_ID_DESTROY_COMPUTESHADER = 2097300;
export const D3D11_MESSAGE_ID_CREATE_UNORDEREDACCESSVIEW = 2097301;
export const D3D11_MESSAGE_ID_LIVE_UNORDEREDACCESSVIEW = 2097302;
export const D3D11_MESSAGE_ID_DESTROY_UNORDEREDACCESSVIEW = 2097303;
export const D3D11_MESSAGE_ID_DEVICE_SETSHADER_INTERFACES_FEATURELEVEL = 2097304;
export const D3D11_MESSAGE_ID_DEVICE_SETSHADER_INTERFACE_COUNT_MISMATCH = 2097305;
export const D3D11_MESSAGE_ID_DEVICE_SETSHADER_INVALID_INSTANCE = 2097306;
export const D3D11_MESSAGE_ID_DEVICE_SETSHADER_INVALID_INSTANCE_INDEX = 2097307;
export const D3D11_MESSAGE_ID_DEVICE_SETSHADER_INVALID_INSTANCE_TYPE = 2097308;
export const D3D11_MESSAGE_ID_DEVICE_SETSHADER_INVALID_INSTANCE_DATA = 2097309;
export const D3D11_MESSAGE_ID_DEVICE_SETSHADER_UNBOUND_INSTANCE_DATA = 2097310;
export const D3D11_MESSAGE_ID_DEVICE_SETSHADER_INSTANCE_DATA_BINDINGS = 2097311;
export const D3D11_MESSAGE_ID_DEVICE_CREATESHADER_CLASSLINKAGE_FULL = 2097312;
export const D3D11_MESSAGE_ID_DEVICE_CHECKFEATURESUPPORT_UNRECOGNIZED_FEATURE = 2097313;
export const D3D11_MESSAGE_ID_DEVICE_CHECKFEATURESUPPORT_MISMATCHED_DATA_SIZE = 2097314;
export const D3D11_MESSAGE_ID_DEVICE_CHECKFEATURESUPPORT_INVALIDARG_RETURN = 2097315;
export const D3D11_MESSAGE_ID_DEVICE_CSSETSHADERRESOURCES_HAZARD = 2097316;
export const D3D11_MESSAGE_ID_DEVICE_CSSETCONSTANTBUFFERS_HAZARD = 2097317;
export const D3D11_MESSAGE_ID_CSSETSHADERRESOURCES_UNBINDDELETINGOBJECT = 2097318;
export const D3D11_MESSAGE_ID_CSSETCONSTANTBUFFERS_UNBINDDELETINGOBJECT = 2097319;
export const D3D11_MESSAGE_ID_CREATECOMPUTESHADER_INVALIDCALL = 2097320;
export const D3D11_MESSAGE_ID_CREATECOMPUTESHADER_OUTOFMEMORY = 2097321;
export const D3D11_MESSAGE_ID_CREATECOMPUTESHADER_INVALIDSHADERBYTECODE = 2097322;
export const D3D11_MESSAGE_ID_CREATECOMPUTESHADER_INVALIDSHADERTYPE = 2097323;
export const D3D11_MESSAGE_ID_CREATECOMPUTESHADER_INVALIDCLASSLINKAGE = 2097324;
export const D3D11_MESSAGE_ID_DEVICE_CSSETSHADERRESOURCES_VIEWS_EMPTY = 2097325;
export const D3D11_MESSAGE_ID_CSSETCONSTANTBUFFERS_INVALIDBUFFER = 2097326;
export const D3D11_MESSAGE_ID_DEVICE_CSSETCONSTANTBUFFERS_BUFFERS_EMPTY = 2097327;
export const D3D11_MESSAGE_ID_DEVICE_CSSETSAMPLERS_SAMPLERS_EMPTY = 2097328;
export const D3D11_MESSAGE_ID_DEVICE_CSGETSHADERRESOURCES_VIEWS_EMPTY = 2097329;
export const D3D11_MESSAGE_ID_DEVICE_CSGETCONSTANTBUFFERS_BUFFERS_EMPTY = 2097330;
export const D3D11_MESSAGE_ID_DEVICE_CSGETSAMPLERS_SAMPLERS_EMPTY = 2097331;
export const D3D11_MESSAGE_ID_DEVICE_CREATEVERTEXSHADER_DOUBLEFLOATOPSNOTSUPPORTED = 2097332;
export const D3D11_MESSAGE_ID_DEVICE_CREATEHULLSHADER_DOUBLEFLOATOPSNOTSUPPORTED = 2097333;
export const D3D11_MESSAGE_ID_DEVICE_CREATEDOMAINSHADER_DOUBLEFLOATOPSNOTSUPPORTED = 2097334;
export const D3D11_MESSAGE_ID_DEVICE_CREATEGEOMETRYSHADER_DOUBLEFLOATOPSNOTSUPPORTED = 2097335;
export const D3D11_MESSAGE_ID_DEVICE_CREATEGEOMETRYSHADERWITHSTREAMOUTPUT_DOUBLEFLOATOPSNOTSUPPORTED = 2097336;
export const D3D11_MESSAGE_ID_DEVICE_CREATEPIXELSHADER_DOUBLEFLOATOPSNOTSUPPORTED = 2097337;
export const D3D11_MESSAGE_ID_DEVICE_CREATECOMPUTESHADER_DOUBLEFLOATOPSNOTSUPPORTED = 2097338;
export const D3D11_MESSAGE_ID_CREATEBUFFER_INVALIDSTRUCTURESTRIDE = 2097339;
export const D3D11_MESSAGE_ID_CREATESHADERRESOURCEVIEW_INVALIDFLAGS = 2097340;
export const D3D11_MESSAGE_ID_CREATEUNORDEREDACCESSVIEW_INVALIDRESOURCE = 2097341;
export const D3D11_MESSAGE_ID_CREATEUNORDEREDACCESSVIEW_INVALIDDESC = 2097342;
export const D3D11_MESSAGE_ID_CREATEUNORDEREDACCESSVIEW_INVALIDFORMAT = 2097343;
export const D3D11_MESSAGE_ID_CREATEUNORDEREDACCESSVIEW_INVALIDDIMENSIONS = 2097344;
export const D3D11_MESSAGE_ID_CREATEUNORDEREDACCESSVIEW_UNRECOGNIZEDFORMAT = 2097345;
export const D3D11_MESSAGE_ID_DEVICE_OMSETRENDERTARGETSANDUNORDEREDACCESSVIEWS_HAZARD = 2097346;
export const D3D11_MESSAGE_ID_DEVICE_OMSETRENDERTARGETSANDUNORDEREDACCESSVIEWS_OVERLAPPING_OLD_SLOTS = 2097347;
export const D3D11_MESSAGE_ID_DEVICE_OMSETRENDERTARGETSANDUNORDEREDACCESSVIEWS_NO_OP = 2097348;
export const D3D11_MESSAGE_ID_CSSETUNORDEREDACCESSVIEWS_UNBINDDELETINGOBJECT = 2097349;
export const D3D11_MESSAGE_ID_PSSETUNORDEREDACCESSVIEWS_UNBINDDELETINGOBJECT = 2097350;
export const D3D11_MESSAGE_ID_CREATEUNORDEREDACCESSVIEW_INVALIDARG_RETURN = 2097351;
export const D3D11_MESSAGE_ID_CREATEUNORDEREDACCESSVIEW_OUTOFMEMORY_RETURN = 2097352;
export const D3D11_MESSAGE_ID_CREATEUNORDEREDACCESSVIEW_TOOMANYOBJECTS = 2097353;
export const D3D11_MESSAGE_ID_DEVICE_CSSETUNORDEREDACCESSVIEWS_HAZARD = 2097354;
export const D3D11_MESSAGE_ID_CLEARUNORDEREDACCESSVIEW_DENORMFLUSH = 2097355;
export const D3D11_MESSAGE_ID_DEVICE_CSSETUNORDEREDACCESSS_VIEWS_EMPTY = 2097356;
export const D3D11_MESSAGE_ID_DEVICE_CSGETUNORDEREDACCESSS_VIEWS_EMPTY = 2097357;
export const D3D11_MESSAGE_ID_CREATEUNORDEREDACCESSVIEW_INVALIDFLAGS = 2097358;
export const D3D11_MESSAGE_ID_CREATESHADERRESESOURCEVIEW_TOOMANYOBJECTS = 2097359;
export const D3D11_MESSAGE_ID_DEVICE_DISPATCHINDIRECT_INVALID_ARG_BUFFER = 2097360;
export const D3D11_MESSAGE_ID_DEVICE_DISPATCHINDIRECT_OFFSET_UNALIGNED = 2097361;
export const D3D11_MESSAGE_ID_DEVICE_DISPATCHINDIRECT_OFFSET_OVERFLOW = 2097362;
export const D3D11_MESSAGE_ID_DEVICE_SETRESOURCEMINLOD_INVALIDCONTEXT = 2097363;
export const D3D11_MESSAGE_ID_DEVICE_SETRESOURCEMINLOD_INVALIDRESOURCE = 2097364;
export const D3D11_MESSAGE_ID_DEVICE_SETRESOURCEMINLOD_INVALIDMINLOD = 2097365;
export const D3D11_MESSAGE_ID_DEVICE_GETRESOURCEMINLOD_INVALIDCONTEXT = 2097366;
export const D3D11_MESSAGE_ID_DEVICE_GETRESOURCEMINLOD_INVALIDRESOURCE = 2097367;
export const D3D11_MESSAGE_ID_OMSETDEPTHSTENCIL_UNBINDDELETINGOBJECT = 2097368;
export const D3D11_MESSAGE_ID_CLEARDEPTHSTENCILVIEW_DEPTH_READONLY = 2097369;
export const D3D11_MESSAGE_ID_CLEARDEPTHSTENCILVIEW_STENCIL_READONLY = 2097370;
export const D3D11_MESSAGE_ID_CHECKFEATURESUPPORT_FORMAT_DEPRECATED = 2097371;
export const D3D11_MESSAGE_ID_DEVICE_UNORDEREDACCESSVIEW_RETURN_TYPE_MISMATCH = 2097372;
export const D3D11_MESSAGE_ID_DEVICE_UNORDEREDACCESSVIEW_NOT_SET = 2097373;
export const D3D11_MESSAGE_ID_DEVICE_DRAW_UNORDEREDACCESSVIEW_RENDERTARGETVIEW_OVERLAP = 2097374;
export const D3D11_MESSAGE_ID_DEVICE_UNORDEREDACCESSVIEW_DIMENSION_MISMATCH = 2097375;
export const D3D11_MESSAGE_ID_DEVICE_UNORDEREDACCESSVIEW_APPEND_UNSUPPORTED = 2097376;
export const D3D11_MESSAGE_ID_DEVICE_UNORDEREDACCESSVIEW_ATOMICS_UNSUPPORTED = 2097377;
export const D3D11_MESSAGE_ID_DEVICE_UNORDEREDACCESSVIEW_STRUCTURE_STRIDE_MISMATCH = 2097378;
export const D3D11_MESSAGE_ID_DEVICE_UNORDEREDACCESSVIEW_BUFFER_TYPE_MISMATCH = 2097379;
export const D3D11_MESSAGE_ID_DEVICE_UNORDEREDACCESSVIEW_RAW_UNSUPPORTED = 2097380;
export const D3D11_MESSAGE_ID_DEVICE_UNORDEREDACCESSVIEW_FORMAT_LD_UNSUPPORTED = 2097381;
export const D3D11_MESSAGE_ID_DEVICE_UNORDEREDACCESSVIEW_FORMAT_STORE_UNSUPPORTED = 2097382;
export const D3D11_MESSAGE_ID_DEVICE_UNORDEREDACCESSVIEW_ATOMIC_ADD_UNSUPPORTED = 2097383;
export const D3D11_MESSAGE_ID_DEVICE_UNORDEREDACCESSVIEW_ATOMIC_BITWISE_OPS_UNSUPPORTED = 2097384;
export const D3D11_MESSAGE_ID_DEVICE_UNORDEREDACCESSVIEW_ATOMIC_CMPSTORE_CMPEXCHANGE_UNSUPPORTED = 2097385;
export const D3D11_MESSAGE_ID_DEVICE_UNORDEREDACCESSVIEW_ATOMIC_EXCHANGE_UNSUPPORTED = 2097386;
export const D3D11_MESSAGE_ID_DEVICE_UNORDEREDACCESSVIEW_ATOMIC_SIGNED_MINMAX_UNSUPPORTED = 2097387;
export const D3D11_MESSAGE_ID_DEVICE_UNORDEREDACCESSVIEW_ATOMIC_UNSIGNED_MINMAX_UNSUPPORTED = 2097388;
export const D3D11_MESSAGE_ID_DEVICE_DISPATCH_BOUND_RESOURCE_MAPPED = 2097389;
export const D3D11_MESSAGE_ID_DEVICE_DISPATCH_THREADGROUPCOUNT_OVERFLOW = 2097390;
export const D3D11_MESSAGE_ID_DEVICE_DISPATCH_THREADGROUPCOUNT_ZERO = 2097391;
export const D3D11_MESSAGE_ID_DEVICE_SHADERRESOURCEVIEW_STRUCTURE_STRIDE_MISMATCH = 2097392;
export const D3D11_MESSAGE_ID_DEVICE_SHADERRESOURCEVIEW_BUFFER_TYPE_MISMATCH = 2097393;
export const D3D11_MESSAGE_ID_DEVICE_SHADERRESOURCEVIEW_RAW_UNSUPPORTED = 2097394;
export const D3D11_MESSAGE_ID_DEVICE_DISPATCH_UNSUPPORTED = 2097395;
export const D3D11_MESSAGE_ID_DEVICE_DISPATCHINDIRECT_UNSUPPORTED = 2097396;
export const D3D11_MESSAGE_ID_COPYSTRUCTURECOUNT_INVALIDOFFSET = 2097397;
export const D3D11_MESSAGE_ID_COPYSTRUCTURECOUNT_LARGEOFFSET = 2097398;
export const D3D11_MESSAGE_ID_COPYSTRUCTURECOUNT_INVALIDDESTINATIONSTATE = 2097399;
export const D3D11_MESSAGE_ID_COPYSTRUCTURECOUNT_INVALIDSOURCESTATE = 2097400;
export const D3D11_MESSAGE_ID_CHECKFORMATSUPPORT_FORMAT_NOT_SUPPORTED = 2097401;
export const D3D11_MESSAGE_ID_DEVICE_CSSETUNORDEREDACCESSVIEWS_INVALIDVIEW = 2097402;
export const D3D11_MESSAGE_ID_DEVICE_CSSETUNORDEREDACCESSVIEWS_INVALIDOFFSET = 2097403;
export const D3D11_MESSAGE_ID_DEVICE_CSSETUNORDEREDACCESSVIEWS_TOOMANYVIEWS = 2097404;
export const D3D11_MESSAGE_ID_CLEARUNORDEREDACCESSVIEWFLOAT_INVALIDFORMAT = 2097405;
export const D3D11_MESSAGE_ID_DEVICE_UNORDEREDACCESSVIEW_COUNTER_UNSUPPORTED = 2097406;
export const D3D11_MESSAGE_ID_REF_WARNING = 2097407;
export const D3D11_MESSAGE_ID_DEVICE_DRAW_PIXEL_SHADER_WITHOUT_RTV_OR_DSV = 2097408;
export const D3D11_MESSAGE_ID_SHADER_ABORT = 2097409;
export const D3D11_MESSAGE_ID_SHADER_MESSAGE = 2097410;
export const D3D11_MESSAGE_ID_SHADER_ERROR = 2097411;
export const D3D11_MESSAGE_ID_OFFERRESOURCES_INVALIDRESOURCE = 2097412;
export const D3D11_MESSAGE_ID_HSSETSAMPLERS_UNBINDDELETINGOBJECT = 2097413;
export const D3D11_MESSAGE_ID_DSSETSAMPLERS_UNBINDDELETINGOBJECT = 2097414;
export const D3D11_MESSAGE_ID_CSSETSAMPLERS_UNBINDDELETINGOBJECT = 2097415;
export const D3D11_MESSAGE_ID_HSSETSHADER_UNBINDDELETINGOBJECT = 2097416;
export const D3D11_MESSAGE_ID_DSSETSHADER_UNBINDDELETINGOBJECT = 2097417;
export const D3D11_MESSAGE_ID_CSSETSHADER_UNBINDDELETINGOBJECT = 2097418;
export const D3D11_MESSAGE_ID_ENQUEUESETEVENT_INVALIDARG_RETURN = 2097419;
export const D3D11_MESSAGE_ID_ENQUEUESETEVENT_OUTOFMEMORY_RETURN = 2097420;
export const D3D11_MESSAGE_ID_ENQUEUESETEVENT_ACCESSDENIED_RETURN = 2097421;
export const D3D11_MESSAGE_ID_DEVICE_OMSETRENDERTARGETSANDUNORDEREDACCESSVIEWS_NUMUAVS_INVALIDRANGE = 2097422;
export const D3D11_MESSAGE_ID_USE_OF_ZERO_REFCOUNT_OBJECT = 2097423;
export const D3D11_MESSAGE_ID_D3D11_MESSAGES_END = 2097424;
export const D3D11_MESSAGE_ID_D3D11_1_MESSAGES_START = 3145728;
export const D3D11_MESSAGE_ID_CREATE_VIDEODECODER = 3145729;
export const D3D11_MESSAGE_ID_CREATE_VIDEOPROCESSORENUM = 3145730;
export const D3D11_MESSAGE_ID_CREATE_VIDEOPROCESSOR = 3145731;
export const D3D11_MESSAGE_ID_CREATE_DECODEROUTPUTVIEW = 3145732;
export const D3D11_MESSAGE_ID_CREATE_PROCESSORINPUTVIEW = 3145733;
export const D3D11_MESSAGE_ID_CREATE_PROCESSOROUTPUTVIEW = 3145734;
export const D3D11_MESSAGE_ID_CREATE_DEVICECONTEXTSTATE = 3145735;
export const D3D11_MESSAGE_ID_LIVE_VIDEODECODER = 3145736;
export const D3D11_MESSAGE_ID_LIVE_VIDEOPROCESSORENUM = 3145737;
export const D3D11_MESSAGE_ID_LIVE_VIDEOPROCESSOR = 3145738;
export const D3D11_MESSAGE_ID_LIVE_DECODEROUTPUTVIEW = 3145739;
export const D3D11_MESSAGE_ID_LIVE_PROCESSORINPUTVIEW = 3145740;
export const D3D11_MESSAGE_ID_LIVE_PROCESSOROUTPUTVIEW = 3145741;
export const D3D11_MESSAGE_ID_LIVE_DEVICECONTEXTSTATE = 3145742;
export const D3D11_MESSAGE_ID_DESTROY_VIDEODECODER = 3145743;
export const D3D11_MESSAGE_ID_DESTROY_VIDEOPROCESSORENUM = 3145744;
export const D3D11_MESSAGE_ID_DESTROY_VIDEOPROCESSOR = 3145745;
export const D3D11_MESSAGE_ID_DESTROY_DECODEROUTPUTVIEW = 3145746;
export const D3D11_MESSAGE_ID_DESTROY_PROCESSORINPUTVIEW = 3145747;
export const D3D11_MESSAGE_ID_DESTROY_PROCESSOROUTPUTVIEW = 3145748;
export const D3D11_MESSAGE_ID_DESTROY_DEVICECONTEXTSTATE = 3145749;
export const D3D11_MESSAGE_ID_CREATEDEVICECONTEXTSTATE_INVALIDFLAGS = 3145750;
export const D3D11_MESSAGE_ID_CREATEDEVICECONTEXTSTATE_INVALIDFEATURELEVEL = 3145751;
export const D3D11_MESSAGE_ID_CREATEDEVICECONTEXTSTATE_FEATURELEVELS_NOT_SUPPORTED = 3145752;
export const D3D11_MESSAGE_ID_CREATEDEVICECONTEXTSTATE_INVALIDREFIID = 3145753;
export const D3D11_MESSAGE_ID_DEVICE_DISCARDVIEW_INVALIDVIEW = 3145754;
export const D3D11_MESSAGE_ID_COPYSUBRESOURCEREGION1_INVALIDCOPYFLAGS = 3145755;
export const D3D11_MESSAGE_ID_UPDATESUBRESOURCE1_INVALIDCOPYFLAGS = 3145756;
export const D3D11_MESSAGE_ID_CREATERASTERIZERSTATE_INVALIDFORCEDSAMPLECOUNT = 3145757;
export const D3D11_MESSAGE_ID_CREATEVIDEODECODER_OUTOFMEMORY_RETURN = 3145758;
export const D3D11_MESSAGE_ID_CREATEVIDEODECODER_NULLPARAM = 3145759;
export const D3D11_MESSAGE_ID_CREATEVIDEODECODER_INVALIDFORMAT = 3145760;
export const D3D11_MESSAGE_ID_CREATEVIDEODECODER_ZEROWIDTHHEIGHT = 3145761;
export const D3D11_MESSAGE_ID_CREATEVIDEODECODER_DRIVER_INVALIDBUFFERSIZE = 3145762;
export const D3D11_MESSAGE_ID_CREATEVIDEODECODER_DRIVER_INVALIDBUFFERUSAGE = 3145763;
export const D3D11_MESSAGE_ID_GETVIDEODECODERPROFILECOUNT_OUTOFMEMORY = 3145764;
export const D3D11_MESSAGE_ID_GETVIDEODECODERPROFILE_NULLPARAM = 3145765;
export const D3D11_MESSAGE_ID_GETVIDEODECODERPROFILE_INVALIDINDEX = 3145766;
export const D3D11_MESSAGE_ID_GETVIDEODECODERPROFILE_OUTOFMEMORY_RETURN = 3145767;
export const D3D11_MESSAGE_ID_CHECKVIDEODECODERFORMAT_NULLPARAM = 3145768;
export const D3D11_MESSAGE_ID_CHECKVIDEODECODERFORMAT_OUTOFMEMORY_RETURN = 3145769;
export const D3D11_MESSAGE_ID_GETVIDEODECODERCONFIGCOUNT_NULLPARAM = 3145770;
export const D3D11_MESSAGE_ID_GETVIDEODECODERCONFIGCOUNT_OUTOFMEMORY_RETURN = 3145771;
export const D3D11_MESSAGE_ID_GETVIDEODECODERCONFIG_NULLPARAM = 3145772;
export const D3D11_MESSAGE_ID_GETVIDEODECODERCONFIG_INVALIDINDEX = 3145773;
export const D3D11_MESSAGE_ID_GETVIDEODECODERCONFIG_OUTOFMEMORY_RETURN = 3145774;
export const D3D11_MESSAGE_ID_GETDECODERCREATIONPARAMS_NULLPARAM = 3145775;
export const D3D11_MESSAGE_ID_GETDECODERDRIVERHANDLE_NULLPARAM = 3145776;
export const D3D11_MESSAGE_ID_GETDECODERBUFFER_NULLPARAM = 3145777;
export const D3D11_MESSAGE_ID_GETDECODERBUFFER_INVALIDBUFFER = 3145778;
export const D3D11_MESSAGE_ID_GETDECODERBUFFER_INVALIDTYPE = 3145779;
export const D3D11_MESSAGE_ID_GETDECODERBUFFER_LOCKED = 3145780;
export const D3D11_MESSAGE_ID_RELEASEDECODERBUFFER_NULLPARAM = 3145781;
export const D3D11_MESSAGE_ID_RELEASEDECODERBUFFER_INVALIDTYPE = 3145782;
export const D3D11_MESSAGE_ID_RELEASEDECODERBUFFER_NOTLOCKED = 3145783;
export const D3D11_MESSAGE_ID_DECODERBEGINFRAME_NULLPARAM = 3145784;
export const D3D11_MESSAGE_ID_DECODERBEGINFRAME_HAZARD = 3145785;
export const D3D11_MESSAGE_ID_DECODERENDFRAME_NULLPARAM = 3145786;
export const D3D11_MESSAGE_ID_SUBMITDECODERBUFFERS_NULLPARAM = 3145787;
export const D3D11_MESSAGE_ID_SUBMITDECODERBUFFERS_INVALIDTYPE = 3145788;
export const D3D11_MESSAGE_ID_DECODEREXTENSION_NULLPARAM = 3145789;
export const D3D11_MESSAGE_ID_DECODEREXTENSION_INVALIDRESOURCE = 3145790;
export const D3D11_MESSAGE_ID_CREATEVIDEOPROCESSORENUMERATOR_OUTOFMEMORY_RETURN = 3145791;
export const D3D11_MESSAGE_ID_CREATEVIDEOPROCESSORENUMERATOR_NULLPARAM = 3145792;
export const D3D11_MESSAGE_ID_CREATEVIDEOPROCESSORENUMERATOR_INVALIDFRAMEFORMAT = 3145793;
export const D3D11_MESSAGE_ID_CREATEVIDEOPROCESSORENUMERATOR_INVALIDUSAGE = 3145794;
export const D3D11_MESSAGE_ID_CREATEVIDEOPROCESSORENUMERATOR_INVALIDINPUTFRAMERATE = 3145795;
export const D3D11_MESSAGE_ID_CREATEVIDEOPROCESSORENUMERATOR_INVALIDOUTPUTFRAMERATE = 3145796;
export const D3D11_MESSAGE_ID_CREATEVIDEOPROCESSORENUMERATOR_INVALIDWIDTHHEIGHT = 3145797;
export const D3D11_MESSAGE_ID_GETVIDEOPROCESSORCONTENTDESC_NULLPARAM = 3145798;
export const D3D11_MESSAGE_ID_CHECKVIDEOPROCESSORFORMAT_NULLPARAM = 3145799;
export const D3D11_MESSAGE_ID_GETVIDEOPROCESSORCAPS_NULLPARAM = 3145800;
export const D3D11_MESSAGE_ID_GETVIDEOPROCESSORRATECONVERSIONCAPS_NULLPARAM = 3145801;
export const D3D11_MESSAGE_ID_GETVIDEOPROCESSORRATECONVERSIONCAPS_INVALIDINDEX = 3145802;
export const D3D11_MESSAGE_ID_GETVIDEOPROCESSORCUSTOMRATE_NULLPARAM = 3145803;
export const D3D11_MESSAGE_ID_GETVIDEOPROCESSORCUSTOMRATE_INVALIDINDEX = 3145804;
export const D3D11_MESSAGE_ID_GETVIDEOPROCESSORFILTERRANGE_NULLPARAM = 3145805;
export const D3D11_MESSAGE_ID_GETVIDEOPROCESSORFILTERRANGE_UNSUPPORTED = 3145806;
export const D3D11_MESSAGE_ID_CREATEVIDEOPROCESSOR_OUTOFMEMORY_RETURN = 3145807;
export const D3D11_MESSAGE_ID_CREATEVIDEOPROCESSOR_NULLPARAM = 3145808;
export const D3D11_MESSAGE_ID_VIDEOPROCESSORSETOUTPUTTARGETRECT_NULLPARAM = 3145809;
export const D3D11_MESSAGE_ID_VIDEOPROCESSORSETOUTPUTBACKGROUNDCOLOR_NULLPARAM = 3145810;
export const D3D11_MESSAGE_ID_VIDEOPROCESSORSETOUTPUTBACKGROUNDCOLOR_INVALIDALPHA = 3145811;
export const D3D11_MESSAGE_ID_VIDEOPROCESSORSETOUTPUTCOLORSPACE_NULLPARAM = 3145812;
export const D3D11_MESSAGE_ID_VIDEOPROCESSORSETOUTPUTALPHAFILLMODE_NULLPARAM = 3145813;
export const D3D11_MESSAGE_ID_VIDEOPROCESSORSETOUTPUTALPHAFILLMODE_UNSUPPORTED = 3145814;
export const D3D11_MESSAGE_ID_VIDEOPROCESSORSETOUTPUTALPHAFILLMODE_INVALIDSTREAM = 3145815;
export const D3D11_MESSAGE_ID_VIDEOPROCESSORSETOUTPUTALPHAFILLMODE_INVALIDFILLMODE = 3145816;
export const D3D11_MESSAGE_ID_VIDEOPROCESSORSETOUTPUTCONSTRICTION_NULLPARAM = 3145817;
export const D3D11_MESSAGE_ID_VIDEOPROCESSORSETOUTPUTSTEREOMODE_NULLPARAM = 3145818;
export const D3D11_MESSAGE_ID_VIDEOPROCESSORSETOUTPUTSTEREOMODE_UNSUPPORTED = 3145819;
export const D3D11_MESSAGE_ID_VIDEOPROCESSORSETOUTPUTEXTENSION_NULLPARAM = 3145820;
export const D3D11_MESSAGE_ID_VIDEOPROCESSORGETOUTPUTTARGETRECT_NULLPARAM = 3145821;
export const D3D11_MESSAGE_ID_VIDEOPROCESSORGETOUTPUTBACKGROUNDCOLOR_NULLPARAM = 3145822;
export const D3D11_MESSAGE_ID_VIDEOPROCESSORGETOUTPUTCOLORSPACE_NULLPARAM = 3145823;
export const D3D11_MESSAGE_ID_VIDEOPROCESSORGETOUTPUTALPHAFILLMODE_NULLPARAM = 3145824;
export const D3D11_MESSAGE_ID_VIDEOPROCESSORGETOUTPUTCONSTRICTION_NULLPARAM = 3145825;
export const D3D11_MESSAGE_ID_VIDEOPROCESSORSETOUTPUTCONSTRICTION_UNSUPPORTED = 3145826;
export const D3D11_MESSAGE_ID_VIDEOPROCESSORSETOUTPUTCONSTRICTION_INVALIDSIZE = 3145827;
export const D3D11_MESSAGE_ID_VIDEOPROCESSORGETOUTPUTSTEREOMODE_NULLPARAM = 3145828;
export const D3D11_MESSAGE_ID_VIDEOPROCESSORGETOUTPUTEXTENSION_NULLPARAM = 3145829;
export const D3D11_MESSAGE_ID_VIDEOPROCESSORSETSTREAMFRAMEFORMAT_NULLPARAM = 3145830;
export const D3D11_MESSAGE_ID_VIDEOPROCESSORSETSTREAMFRAMEFORMAT_INVALIDFORMAT = 3145831;
export const D3D11_MESSAGE_ID_VIDEOPROCESSORSETSTREAMFRAMEFORMAT_INVALIDSTREAM = 3145832;
export const D3D11_MESSAGE_ID_VIDEOPROCESSORSETSTREAMCOLORSPACE_NULLPARAM = 3145833;
export const D3D11_MESSAGE_ID_VIDEOPROCESSORSETSTREAMCOLORSPACE_INVALIDSTREAM = 3145834;
export const D3D11_MESSAGE_ID_VIDEOPROCESSORSETSTREAMOUTPUTRATE_NULLPARAM = 3145835;
export const D3D11_MESSAGE_ID_VIDEOPROCESSORSETSTREAMOUTPUTRATE_INVALIDRATE = 3145836;
export const D3D11_MESSAGE_ID_VIDEOPROCESSORSETSTREAMOUTPUTRATE_INVALIDFLAG = 3145837;
export const D3D11_MESSAGE_ID_VIDEOPROCESSORSETSTREAMOUTPUTRATE_INVALIDSTREAM = 3145838;
export const D3D11_MESSAGE_ID_VIDEOPROCESSORSETSTREAMSOURCERECT_NULLPARAM = 3145839;
export const D3D11_MESSAGE_ID_VIDEOPROCESSORSETSTREAMSOURCERECT_INVALIDSTREAM = 3145840;
export const D3D11_MESSAGE_ID_VIDEOPROCESSORSETSTREAMSOURCERECT_INVALIDRECT = 3145841;
export const D3D11_MESSAGE_ID_VIDEOPROCESSORSETSTREAMDESTRECT_NULLPARAM = 3145842;
export const D3D11_MESSAGE_ID_VIDEOPROCESSORSETSTREAMDESTRECT_INVALIDSTREAM = 3145843;
export const D3D11_MESSAGE_ID_VIDEOPROCESSORSETSTREAMDESTRECT_INVALIDRECT = 3145844;
export const D3D11_MESSAGE_ID_VIDEOPROCESSORSETSTREAMALPHA_NULLPARAM = 3145845;
export const D3D11_MESSAGE_ID_VIDEOPROCESSORSETSTREAMALPHA_INVALIDSTREAM = 3145846;
export const D3D11_MESSAGE_ID_VIDEOPROCESSORSETSTREAMALPHA_INVALIDALPHA = 3145847;
export const D3D11_MESSAGE_ID_VIDEOPROCESSORSETSTREAMPALETTE_NULLPARAM = 3145848;
export const D3D11_MESSAGE_ID_VIDEOPROCESSORSETSTREAMPALETTE_INVALIDSTREAM = 3145849;
export const D3D11_MESSAGE_ID_VIDEOPROCESSORSETSTREAMPALETTE_INVALIDCOUNT = 3145850;
export const D3D11_MESSAGE_ID_VIDEOPROCESSORSETSTREAMPALETTE_INVALIDALPHA = 3145851;
export const D3D11_MESSAGE_ID_VIDEOPROCESSORSETSTREAMPIXELASPECTRATIO_NULLPARAM = 3145852;
export const D3D11_MESSAGE_ID_VIDEOPROCESSORSETSTREAMPIXELASPECTRATIO_INVALIDSTREAM = 3145853;
export const D3D11_MESSAGE_ID_VIDEOPROCESSORSETSTREAMPIXELASPECTRATIO_INVALIDRATIO = 3145854;
export const D3D11_MESSAGE_ID_VIDEOPROCESSORSETSTREAMLUMAKEY_NULLPARAM = 3145855;
export const D3D11_MESSAGE_ID_VIDEOPROCESSORSETSTREAMLUMAKEY_INVALIDSTREAM = 3145856;
export const D3D11_MESSAGE_ID_VIDEOPROCESSORSETSTREAMLUMAKEY_INVALIDRANGE = 3145857;
export const D3D11_MESSAGE_ID_VIDEOPROCESSORSETSTREAMLUMAKEY_UNSUPPORTED = 3145858;
export const D3D11_MESSAGE_ID_VIDEOPROCESSORSETSTREAMSTEREOFORMAT_NULLPARAM = 3145859;
export const D3D11_MESSAGE_ID_VIDEOPROCESSORSETSTREAMSTEREOFORMAT_INVALIDSTREAM = 3145860;
export const D3D11_MESSAGE_ID_VIDEOPROCESSORSETSTREAMSTEREOFORMAT_UNSUPPORTED = 3145861;
export const D3D11_MESSAGE_ID_VIDEOPROCESSORSETSTREAMSTEREOFORMAT_FLIPUNSUPPORTED = 3145862;
export const D3D11_MESSAGE_ID_VIDEOPROCESSORSETSTREAMSTEREOFORMAT_MONOOFFSETUNSUPPORTED = 3145863;
export const D3D11_MESSAGE_ID_VIDEOPROCESSORSETSTREAMSTEREOFORMAT_FORMATUNSUPPORTED = 3145864;
export const D3D11_MESSAGE_ID_VIDEOPROCESSORSETSTREAMSTEREOFORMAT_INVALIDFORMAT = 3145865;
export const D3D11_MESSAGE_ID_VIDEOPROCESSORSETSTREAMAUTOPROCESSINGMODE_NULLPARAM = 3145866;
export const D3D11_MESSAGE_ID_VIDEOPROCESSORSETSTREAMAUTOPROCESSINGMODE_INVALIDSTREAM = 3145867;
export const D3D11_MESSAGE_ID_VIDEOPROCESSORSETSTREAMFILTER_NULLPARAM = 3145868;
export const D3D11_MESSAGE_ID_VIDEOPROCESSORSETSTREAMFILTER_INVALIDSTREAM = 3145869;
export const D3D11_MESSAGE_ID_VIDEOPROCESSORSETSTREAMFILTER_INVALIDFILTER = 3145870;
export const D3D11_MESSAGE_ID_VIDEOPROCESSORSETSTREAMFILTER_UNSUPPORTED = 3145871;
export const D3D11_MESSAGE_ID_VIDEOPROCESSORSETSTREAMFILTER_INVALIDLEVEL = 3145872;
export const D3D11_MESSAGE_ID_VIDEOPROCESSORSETSTREAMEXTENSION_NULLPARAM = 3145873;
export const D3D11_MESSAGE_ID_VIDEOPROCESSORSETSTREAMEXTENSION_INVALIDSTREAM = 3145874;
export const D3D11_MESSAGE_ID_VIDEOPROCESSORGETSTREAMFRAMEFORMAT_NULLPARAM = 3145875;
export const D3D11_MESSAGE_ID_VIDEOPROCESSORGETSTREAMCOLORSPACE_NULLPARAM = 3145876;
export const D3D11_MESSAGE_ID_VIDEOPROCESSORGETSTREAMOUTPUTRATE_NULLPARAM = 3145877;
export const D3D11_MESSAGE_ID_VIDEOPROCESSORGETSTREAMSOURCERECT_NULLPARAM = 3145878;
export const D3D11_MESSAGE_ID_VIDEOPROCESSORGETSTREAMDESTRECT_NULLPARAM = 3145879;
export const D3D11_MESSAGE_ID_VIDEOPROCESSORGETSTREAMALPHA_NULLPARAM = 3145880;
export const D3D11_MESSAGE_ID_VIDEOPROCESSORGETSTREAMPALETTE_NULLPARAM = 3145881;
export const D3D11_MESSAGE_ID_VIDEOPROCESSORGETSTREAMPIXELASPECTRATIO_NULLPARAM = 3145882;
export const D3D11_MESSAGE_ID_VIDEOPROCESSORGETSTREAMLUMAKEY_NULLPARAM = 3145883;
export const D3D11_MESSAGE_ID_VIDEOPROCESSORGETSTREAMSTEREOFORMAT_NULLPARAM = 3145884;
export const D3D11_MESSAGE_ID_VIDEOPROCESSORGETSTREAMAUTOPROCESSINGMODE_NULLPARAM = 3145885;
export const D3D11_MESSAGE_ID_VIDEOPROCESSORGETSTREAMFILTER_NULLPARAM = 3145886;
export const D3D11_MESSAGE_ID_VIDEOPROCESSORGETSTREAMEXTENSION_NULLPARAM = 3145887;
export const D3D11_MESSAGE_ID_VIDEOPROCESSORGETSTREAMEXTENSION_INVALIDSTREAM = 3145888;
export const D3D11_MESSAGE_ID_VIDEOPROCESSORBLT_NULLPARAM = 3145889;
export const D3D11_MESSAGE_ID_VIDEOPROCESSORBLT_INVALIDSTREAMCOUNT = 3145890;
export const D3D11_MESSAGE_ID_VIDEOPROCESSORBLT_TARGETRECT = 3145891;
export const D3D11_MESSAGE_ID_VIDEOPROCESSORBLT_INVALIDOUTPUT = 3145892;
export const D3D11_MESSAGE_ID_VIDEOPROCESSORBLT_INVALIDPASTFRAMES = 3145893;
export const D3D11_MESSAGE_ID_VIDEOPROCESSORBLT_INVALIDFUTUREFRAMES = 3145894;
export const D3D11_MESSAGE_ID_VIDEOPROCESSORBLT_INVALIDSOURCERECT = 3145895;
export const D3D11_MESSAGE_ID_VIDEOPROCESSORBLT_INVALIDDESTRECT = 3145896;
export const D3D11_MESSAGE_ID_VIDEOPROCESSORBLT_INVALIDINPUTRESOURCE = 3145897;
export const D3D11_MESSAGE_ID_VIDEOPROCESSORBLT_INVALIDARRAYSIZE = 3145898;
export const D3D11_MESSAGE_ID_VIDEOPROCESSORBLT_INVALIDARRAY = 3145899;
export const D3D11_MESSAGE_ID_VIDEOPROCESSORBLT_RIGHTEXPECTED = 3145900;
export const D3D11_MESSAGE_ID_VIDEOPROCESSORBLT_RIGHTNOTEXPECTED = 3145901;
export const D3D11_MESSAGE_ID_VIDEOPROCESSORBLT_STEREONOTENABLED = 3145902;
export const D3D11_MESSAGE_ID_VIDEOPROCESSORBLT_INVALIDRIGHTRESOURCE = 3145903;
export const D3D11_MESSAGE_ID_VIDEOPROCESSORBLT_NOSTEREOSTREAMS = 3145904;
export const D3D11_MESSAGE_ID_VIDEOPROCESSORBLT_INPUTHAZARD = 3145905;
export const D3D11_MESSAGE_ID_VIDEOPROCESSORBLT_OUTPUTHAZARD = 3145906;
export const D3D11_MESSAGE_ID_CREATEVIDEODECODEROUTPUTVIEW_OUTOFMEMORY_RETURN = 3145907;
export const D3D11_MESSAGE_ID_CREATEVIDEODECODEROUTPUTVIEW_NULLPARAM = 3145908;
export const D3D11_MESSAGE_ID_CREATEVIDEODECODEROUTPUTVIEW_INVALIDTYPE = 3145909;
export const D3D11_MESSAGE_ID_CREATEVIDEODECODEROUTPUTVIEW_INVALIDBIND = 3145910;
export const D3D11_MESSAGE_ID_CREATEVIDEODECODEROUTPUTVIEW_UNSUPPORTEDFORMAT = 3145911;
export const D3D11_MESSAGE_ID_CREATEVIDEODECODEROUTPUTVIEW_INVALIDMIP = 3145912;
export const D3D11_MESSAGE_ID_CREATEVIDEODECODEROUTPUTVIEW_UNSUPPORTEMIP = 3145913;
export const D3D11_MESSAGE_ID_CREATEVIDEODECODEROUTPUTVIEW_INVALIDARRAYSIZE = 3145914;
export const D3D11_MESSAGE_ID_CREATEVIDEODECODEROUTPUTVIEW_INVALIDARRAY = 3145915;
export const D3D11_MESSAGE_ID_CREATEVIDEODECODEROUTPUTVIEW_INVALIDDIMENSION = 3145916;
export const D3D11_MESSAGE_ID_CREATEVIDEOPROCESSORINPUTVIEW_OUTOFMEMORY_RETURN = 3145917;
export const D3D11_MESSAGE_ID_CREATEVIDEOPROCESSORINPUTVIEW_NULLPARAM = 3145918;
export const D3D11_MESSAGE_ID_CREATEVIDEOPROCESSORINPUTVIEW_INVALIDTYPE = 3145919;
export const D3D11_MESSAGE_ID_CREATEVIDEOPROCESSORINPUTVIEW_INVALIDBIND = 3145920;
export const D3D11_MESSAGE_ID_CREATEVIDEOPROCESSORINPUTVIEW_INVALIDMISC = 3145921;
export const D3D11_MESSAGE_ID_CREATEVIDEOPROCESSORINPUTVIEW_INVALIDUSAGE = 3145922;
export const D3D11_MESSAGE_ID_CREATEVIDEOPROCESSORINPUTVIEW_INVALIDFORMAT = 3145923;
export const D3D11_MESSAGE_ID_CREATEVIDEOPROCESSORINPUTVIEW_INVALIDFOURCC = 3145924;
export const D3D11_MESSAGE_ID_CREATEVIDEOPROCESSORINPUTVIEW_INVALIDMIP = 3145925;
export const D3D11_MESSAGE_ID_CREATEVIDEOPROCESSORINPUTVIEW_UNSUPPORTEDMIP = 3145926;
export const D3D11_MESSAGE_ID_CREATEVIDEOPROCESSORINPUTVIEW_INVALIDARRAYSIZE = 3145927;
export const D3D11_MESSAGE_ID_CREATEVIDEOPROCESSORINPUTVIEW_INVALIDARRAY = 3145928;
export const D3D11_MESSAGE_ID_CREATEVIDEOPROCESSORINPUTVIEW_INVALIDDIMENSION = 3145929;
export const D3D11_MESSAGE_ID_CREATEVIDEOPROCESSOROUTPUTVIEW_OUTOFMEMORY_RETURN = 3145930;
export const D3D11_MESSAGE_ID_CREATEVIDEOPROCESSOROUTPUTVIEW_NULLPARAM = 3145931;
export const D3D11_MESSAGE_ID_CREATEVIDEOPROCESSOROUTPUTVIEW_INVALIDTYPE = 3145932;
export const D3D11_MESSAGE_ID_CREATEVIDEOPROCESSOROUTPUTVIEW_INVALIDBIND = 3145933;
export const D3D11_MESSAGE_ID_CREATEVIDEOPROCESSOROUTPUTVIEW_INVALIDFORMAT = 3145934;
export const D3D11_MESSAGE_ID_CREATEVIDEOPROCESSOROUTPUTVIEW_INVALIDMIP = 3145935;
export const D3D11_MESSAGE_ID_CREATEVIDEOPROCESSOROUTPUTVIEW_UNSUPPORTEDMIP = 3145936;
export const D3D11_MESSAGE_ID_CREATEVIDEOPROCESSOROUTPUTVIEW_UNSUPPORTEDARRAY = 3145937;
export const D3D11_MESSAGE_ID_CREATEVIDEOPROCESSOROUTPUTVIEW_INVALIDARRAY = 3145938;
export const D3D11_MESSAGE_ID_CREATEVIDEOPROCESSOROUTPUTVIEW_INVALIDDIMENSION = 3145939;
export const D3D11_MESSAGE_ID_DEVICE_DRAW_INVALID_USE_OF_FORCED_SAMPLE_COUNT = 3145940;
export const D3D11_MESSAGE_ID_CREATEBLENDSTATE_INVALIDLOGICOPS = 3145941;
export const D3D11_MESSAGE_ID_CREATESHADERRESOURCEVIEW_INVALIDDARRAYWITHDECODER = 3145942;
export const D3D11_MESSAGE_ID_CREATEUNORDEREDACCESSVIEW_INVALIDDARRAYWITHDECODER = 3145943;
export const D3D11_MESSAGE_ID_CREATERENDERTARGETVIEW_INVALIDDARRAYWITHDECODER = 3145944;
export const D3D11_MESSAGE_ID_DEVICE_LOCKEDOUT_INTERFACE = 3145945;
export const D3D11_MESSAGE_ID_REF_WARNING_ATOMIC_INCONSISTENT = 3145946;
export const D3D11_MESSAGE_ID_REF_WARNING_READING_UNINITIALIZED_RESOURCE = 3145947;
export const D3D11_MESSAGE_ID_REF_WARNING_RAW_HAZARD = 3145948;
export const D3D11_MESSAGE_ID_REF_WARNING_WAR_HAZARD = 3145949;
export const D3D11_MESSAGE_ID_REF_WARNING_WAW_HAZARD = 3145950;
export const D3D11_MESSAGE_ID_CREATECRYPTOSESSION_NULLPARAM = 3145951;
export const D3D11_MESSAGE_ID_CREATECRYPTOSESSION_OUTOFMEMORY_RETURN = 3145952;
export const D3D11_MESSAGE_ID_GETCRYPTOTYPE_NULLPARAM = 3145953;
export const D3D11_MESSAGE_ID_GETDECODERPROFILE_NULLPARAM = 3145954;
export const D3D11_MESSAGE_ID_GETCRYPTOSESSIONCERTIFICATESIZE_NULLPARAM = 3145955;
export const D3D11_MESSAGE_ID_GETCRYPTOSESSIONCERTIFICATE_NULLPARAM = 3145956;
export const D3D11_MESSAGE_ID_GETCRYPTOSESSIONCERTIFICATE_WRONGSIZE = 3145957;
export const D3D11_MESSAGE_ID_GETCRYPTOSESSIONHANDLE_WRONGSIZE = 3145958;
export const D3D11_MESSAGE_ID_NEGOTIATECRPYTOSESSIONKEYEXCHANGE_NULLPARAM = 3145959;
export const D3D11_MESSAGE_ID_ENCRYPTIONBLT_UNSUPPORTED = 3145960;
export const D3D11_MESSAGE_ID_ENCRYPTIONBLT_NULLPARAM = 3145961;
export const D3D11_MESSAGE_ID_ENCRYPTIONBLT_SRC_WRONGDEVICE = 3145962;
export const D3D11_MESSAGE_ID_ENCRYPTIONBLT_DST_WRONGDEVICE = 3145963;
export const D3D11_MESSAGE_ID_ENCRYPTIONBLT_FORMAT_MISMATCH = 3145964;
export const D3D11_MESSAGE_ID_ENCRYPTIONBLT_SIZE_MISMATCH = 3145965;
export const D3D11_MESSAGE_ID_ENCRYPTIONBLT_SRC_MULTISAMPLED = 3145966;
export const D3D11_MESSAGE_ID_ENCRYPTIONBLT_DST_NOT_STAGING = 3145967;
export const D3D11_MESSAGE_ID_ENCRYPTIONBLT_SRC_MAPPED = 3145968;
export const D3D11_MESSAGE_ID_ENCRYPTIONBLT_DST_MAPPED = 3145969;
export const D3D11_MESSAGE_ID_ENCRYPTIONBLT_SRC_OFFERED = 3145970;
export const D3D11_MESSAGE_ID_ENCRYPTIONBLT_DST_OFFERED = 3145971;
export const D3D11_MESSAGE_ID_ENCRYPTIONBLT_SRC_CONTENT_UNDEFINED = 3145972;
export const D3D11_MESSAGE_ID_DECRYPTIONBLT_UNSUPPORTED = 3145973;
export const D3D11_MESSAGE_ID_DECRYPTIONBLT_NULLPARAM = 3145974;
export const D3D11_MESSAGE_ID_DECRYPTIONBLT_SRC_WRONGDEVICE = 3145975;
export const D3D11_MESSAGE_ID_DECRYPTIONBLT_DST_WRONGDEVICE = 3145976;
export const D3D11_MESSAGE_ID_DECRYPTIONBLT_FORMAT_MISMATCH = 3145977;
export const D3D11_MESSAGE_ID_DECRYPTIONBLT_SIZE_MISMATCH = 3145978;
export const D3D11_MESSAGE_ID_DECRYPTIONBLT_DST_MULTISAMPLED = 3145979;
export const D3D11_MESSAGE_ID_DECRYPTIONBLT_SRC_NOT_STAGING = 3145980;
export const D3D11_MESSAGE_ID_DECRYPTIONBLT_DST_NOT_RENDER_TARGET = 3145981;
export const D3D11_MESSAGE_ID_DECRYPTIONBLT_SRC_MAPPED = 3145982;
export const D3D11_MESSAGE_ID_DECRYPTIONBLT_DST_MAPPED = 3145983;
export const D3D11_MESSAGE_ID_DECRYPTIONBLT_SRC_OFFERED = 3145984;
export const D3D11_MESSAGE_ID_DECRYPTIONBLT_DST_OFFERED = 3145985;
export const D3D11_MESSAGE_ID_DECRYPTIONBLT_SRC_CONTENT_UNDEFINED = 3145986;
export const D3D11_MESSAGE_ID_STARTSESSIONKEYREFRESH_NULLPARAM = 3145987;
export const D3D11_MESSAGE_ID_STARTSESSIONKEYREFRESH_INVALIDSIZE = 3145988;
export const D3D11_MESSAGE_ID_FINISHSESSIONKEYREFRESH_NULLPARAM = 3145989;
export const D3D11_MESSAGE_ID_GETENCRYPTIONBLTKEY_NULLPARAM = 3145990;
export const D3D11_MESSAGE_ID_GETENCRYPTIONBLTKEY_INVALIDSIZE = 3145991;
export const D3D11_MESSAGE_ID_GETCONTENTPROTECTIONCAPS_NULLPARAM = 3145992;
export const D3D11_MESSAGE_ID_CHECKCRYPTOKEYEXCHANGE_NULLPARAM = 3145993;
export const D3D11_MESSAGE_ID_CHECKCRYPTOKEYEXCHANGE_INVALIDINDEX = 3145994;
export const D3D11_MESSAGE_ID_CREATEAUTHENTICATEDCHANNEL_NULLPARAM = 3145995;
export const D3D11_MESSAGE_ID_CREATEAUTHENTICATEDCHANNEL_UNSUPPORTED = 3145996;
export const D3D11_MESSAGE_ID_CREATEAUTHENTICATEDCHANNEL_INVALIDTYPE = 3145997;
export const D3D11_MESSAGE_ID_CREATEAUTHENTICATEDCHANNEL_OUTOFMEMORY_RETURN = 3145998;
export const D3D11_MESSAGE_ID_GETAUTHENTICATEDCHANNELCERTIFICATESIZE_INVALIDCHANNEL = 3145999;
export const D3D11_MESSAGE_ID_GETAUTHENTICATEDCHANNELCERTIFICATESIZE_NULLPARAM = 3146000;
export const D3D11_MESSAGE_ID_GETAUTHENTICATEDCHANNELCERTIFICATE_INVALIDCHANNEL = 3146001;
export const D3D11_MESSAGE_ID_GETAUTHENTICATEDCHANNELCERTIFICATE_NULLPARAM = 3146002;
export const D3D11_MESSAGE_ID_GETAUTHENTICATEDCHANNELCERTIFICATE_WRONGSIZE = 3146003;
export const D3D11_MESSAGE_ID_NEGOTIATEAUTHENTICATEDCHANNELKEYEXCHANGE_INVALIDCHANNEL = 3146004;
export const D3D11_MESSAGE_ID_NEGOTIATEAUTHENTICATEDCHANNELKEYEXCHANGE_NULLPARAM = 3146005;
export const D3D11_MESSAGE_ID_QUERYAUTHENTICATEDCHANNEL_NULLPARAM = 3146006;
export const D3D11_MESSAGE_ID_QUERYAUTHENTICATEDCHANNEL_WRONGCHANNEL = 3146007;
export const D3D11_MESSAGE_ID_QUERYAUTHENTICATEDCHANNEL_UNSUPPORTEDQUERY = 3146008;
export const D3D11_MESSAGE_ID_QUERYAUTHENTICATEDCHANNEL_WRONGSIZE = 3146009;
export const D3D11_MESSAGE_ID_QUERYAUTHENTICATEDCHANNEL_INVALIDPROCESSINDEX = 3146010;
export const D3D11_MESSAGE_ID_CONFIGUREAUTHENTICATEDCHANNEL_NULLPARAM = 3146011;
export const D3D11_MESSAGE_ID_CONFIGUREAUTHENTICATEDCHANNEL_WRONGCHANNEL = 3146012;
export const D3D11_MESSAGE_ID_CONFIGUREAUTHENTICATEDCHANNEL_UNSUPPORTEDCONFIGURE = 3146013;
export const D3D11_MESSAGE_ID_CONFIGUREAUTHENTICATEDCHANNEL_WRONGSIZE = 3146014;
export const D3D11_MESSAGE_ID_CONFIGUREAUTHENTICATEDCHANNEL_INVALIDPROCESSIDTYPE = 3146015;
export const D3D11_MESSAGE_ID_VSSETCONSTANTBUFFERS_INVALIDBUFFEROFFSETORCOUNT = 3146016;
export const D3D11_MESSAGE_ID_DSSETCONSTANTBUFFERS_INVALIDBUFFEROFFSETORCOUNT = 3146017;
export const D3D11_MESSAGE_ID_HSSETCONSTANTBUFFERS_INVALIDBUFFEROFFSETORCOUNT = 3146018;
export const D3D11_MESSAGE_ID_GSSETCONSTANTBUFFERS_INVALIDBUFFEROFFSETORCOUNT = 3146019;
export const D3D11_MESSAGE_ID_PSSETCONSTANTBUFFERS_INVALIDBUFFEROFFSETORCOUNT = 3146020;
export const D3D11_MESSAGE_ID_CSSETCONSTANTBUFFERS_INVALIDBUFFEROFFSETORCOUNT = 3146021;
export const D3D11_MESSAGE_ID_NEGOTIATECRPYTOSESSIONKEYEXCHANGE_INVALIDSIZE = 3146022;
export const D3D11_MESSAGE_ID_NEGOTIATEAUTHENTICATEDCHANNELKEYEXCHANGE_INVALIDSIZE = 3146023;
export const D3D11_MESSAGE_ID_OFFERRESOURCES_INVALIDPRIORITY = 3146024;
export const D3D11_MESSAGE_ID_GETCRYPTOSESSIONHANDLE_OUTOFMEMORY = 3146025;
export const D3D11_MESSAGE_ID_ACQUIREHANDLEFORCAPTURE_NULLPARAM = 3146026;
export const D3D11_MESSAGE_ID_ACQUIREHANDLEFORCAPTURE_INVALIDTYPE = 3146027;
export const D3D11_MESSAGE_ID_ACQUIREHANDLEFORCAPTURE_INVALIDBIND = 3146028;
export const D3D11_MESSAGE_ID_ACQUIREHANDLEFORCAPTURE_INVALIDARRAY = 3146029;
export const D3D11_MESSAGE_ID_VIDEOPROCESSORSETSTREAMROTATION_NULLPARAM = 3146030;
export const D3D11_MESSAGE_ID_VIDEOPROCESSORSETSTREAMROTATION_INVALIDSTREAM = 3146031;
export const D3D11_MESSAGE_ID_VIDEOPROCESSORSETSTREAMROTATION_INVALID = 3146032;
export const D3D11_MESSAGE_ID_VIDEOPROCESSORSETSTREAMROTATION_UNSUPPORTED = 3146033;
export const D3D11_MESSAGE_ID_VIDEOPROCESSORGETSTREAMROTATION_NULLPARAM = 3146034;
export const D3D11_MESSAGE_ID_DEVICE_CLEARVIEW_INVALIDVIEW = 3146035;
export const D3D11_MESSAGE_ID_DEVICE_CREATEVERTEXSHADER_DOUBLEEXTENSIONSNOTSUPPORTED = 3146036;
export const D3D11_MESSAGE_ID_DEVICE_CREATEVERTEXSHADER_SHADEREXTENSIONSNOTSUPPORTED = 3146037;
export const D3D11_MESSAGE_ID_DEVICE_CREATEHULLSHADER_DOUBLEEXTENSIONSNOTSUPPORTED = 3146038;
export const D3D11_MESSAGE_ID_DEVICE_CREATEHULLSHADER_SHADEREXTENSIONSNOTSUPPORTED = 3146039;
export const D3D11_MESSAGE_ID_DEVICE_CREATEDOMAINSHADER_DOUBLEEXTENSIONSNOTSUPPORTED = 3146040;
export const D3D11_MESSAGE_ID_DEVICE_CREATEDOMAINSHADER_SHADEREXTENSIONSNOTSUPPORTED = 3146041;
export const D3D11_MESSAGE_ID_DEVICE_CREATEGEOMETRYSHADER_DOUBLEEXTENSIONSNOTSUPPORTED = 3146042;
export const D3D11_MESSAGE_ID_DEVICE_CREATEGEOMETRYSHADER_SHADEREXTENSIONSNOTSUPPORTED = 3146043;
export const D3D11_MESSAGE_ID_DEVICE_CREATEGEOMETRYSHADERWITHSTREAMOUTPUT_DOUBLEEXTENSIONSNOTSUPPORTED = 3146044;
export const D3D11_MESSAGE_ID_DEVICE_CREATEGEOMETRYSHADERWITHSTREAMOUTPUT_SHADEREXTENSIONSNOTSUPPORTED = 3146045;
export const D3D11_MESSAGE_ID_DEVICE_CREATEPIXELSHADER_DOUBLEEXTENSIONSNOTSUPPORTED = 3146046;
export const D3D11_MESSAGE_ID_DEVICE_CREATEPIXELSHADER_SHADEREXTENSIONSNOTSUPPORTED = 3146047;
export const D3D11_MESSAGE_ID_DEVICE_CREATECOMPUTESHADER_DOUBLEEXTENSIONSNOTSUPPORTED = 3146048;
export const D3D11_MESSAGE_ID_DEVICE_CREATECOMPUTESHADER_SHADEREXTENSIONSNOTSUPPORTED = 3146049;
export const D3D11_MESSAGE_ID_DEVICE_SHADER_LINKAGE_MINPRECISION = 3146050;
export const D3D11_MESSAGE_ID_VIDEOPROCESSORSETSTREAMALPHA_UNSUPPORTED = 3146051;
export const D3D11_MESSAGE_ID_VIDEOPROCESSORSETSTREAMPIXELASPECTRATIO_UNSUPPORTED = 3146052;
export const D3D11_MESSAGE_ID_DEVICE_CREATEVERTEXSHADER_UAVSNOTSUPPORTED = 3146053;
export const D3D11_MESSAGE_ID_DEVICE_CREATEHULLSHADER_UAVSNOTSUPPORTED = 3146054;
export const D3D11_MESSAGE_ID_DEVICE_CREATEDOMAINSHADER_UAVSNOTSUPPORTED = 3146055;
export const D3D11_MESSAGE_ID_DEVICE_CREATEGEOMETRYSHADER_UAVSNOTSUPPORTED = 3146056;
export const D3D11_MESSAGE_ID_DEVICE_CREATEGEOMETRYSHADERWITHSTREAMOUTPUT_UAVSNOTSUPPORTED = 3146057;
export const D3D11_MESSAGE_ID_DEVICE_CREATEPIXELSHADER_UAVSNOTSUPPORTED = 3146058;
export const D3D11_MESSAGE_ID_DEVICE_CREATECOMPUTESHADER_UAVSNOTSUPPORTED = 3146059;
export const D3D11_MESSAGE_ID_DEVICE_OMSETRENDERTARGETSANDUNORDEREDACCESSVIEWS_INVALIDOFFSET = 3146060;
export const D3D11_MESSAGE_ID_DEVICE_OMSETRENDERTARGETSANDUNORDEREDACCESSVIEWS_TOOMANYVIEWS = 3146061;
export const D3D11_MESSAGE_ID_DEVICE_CLEARVIEW_NOTSUPPORTED = 3146062;
export const D3D11_MESSAGE_ID_SWAPDEVICECONTEXTSTATE_NOTSUPPORTED = 3146063;
export const D3D11_MESSAGE_ID_UPDATESUBRESOURCE_PREFERUPDATESUBRESOURCE1 = 3146064;
export const D3D11_MESSAGE_ID_GETDC_INACCESSIBLE = 3146065;
export const D3D11_MESSAGE_ID_DEVICE_CLEARVIEW_INVALIDRECT = 3146066;
export const D3D11_MESSAGE_ID_DEVICE_DRAW_SAMPLE_MASK_IGNORED_ON_FL9 = 3146067;
export const D3D11_MESSAGE_ID_DEVICE_OPEN_SHARED_RESOURCE1_NOT_SUPPORTED = 3146068;
export const D3D11_MESSAGE_ID_DEVICE_OPEN_SHARED_RESOURCE_BY_NAME_NOT_SUPPORTED = 3146069;
export const D3D11_MESSAGE_ID_ENQUEUESETEVENT_NOT_SUPPORTED = 3146070;
export const D3D11_MESSAGE_ID_OFFERRELEASE_NOT_SUPPORTED = 3146071;
export const D3D11_MESSAGE_ID_OFFERRESOURCES_INACCESSIBLE = 3146072;
export const D3D11_MESSAGE_ID_CREATEVIDEOPROCESSORINPUTVIEW_INVALIDMSAA = 3146073;
export const D3D11_MESSAGE_ID_CREATEVIDEOPROCESSOROUTPUTVIEW_INVALIDMSAA = 3146074;
export const D3D11_MESSAGE_ID_DEVICE_CLEARVIEW_INVALIDSOURCERECT = 3146075;
export const D3D11_MESSAGE_ID_DEVICE_CLEARVIEW_EMPTYRECT = 3146076;
export const D3D11_MESSAGE_ID_UPDATESUBRESOURCE_EMPTYDESTBOX = 3146077;
export const D3D11_MESSAGE_ID_COPYSUBRESOURCEREGION_EMPTYSOURCEBOX = 3146078;
export const D3D11_MESSAGE_ID_DEVICE_DRAW_OM_RENDER_TARGET_DOES_NOT_SUPPORT_LOGIC_OPS = 3146079;
export const D3D11_MESSAGE_ID_DEVICE_DRAW_DEPTHSTENCILVIEW_NOT_SET = 3146080;
export const D3D11_MESSAGE_ID_DEVICE_DRAW_RENDERTARGETVIEW_NOT_SET = 3146081;
export const D3D11_MESSAGE_ID_DEVICE_DRAW_RENDERTARGETVIEW_NOT_SET_DUE_TO_FLIP_PRESENT = 3146082;
export const D3D11_MESSAGE_ID_DEVICE_UNORDEREDACCESSVIEW_NOT_SET_DUE_TO_FLIP_PRESENT = 3146083;
export const D3D11_MESSAGE_ID_GETDATAFORNEWHARDWAREKEY_NULLPARAM = 3146084;
export const D3D11_MESSAGE_ID_CHECKCRYPTOSESSIONSTATUS_NULLPARAM = 3146085;
export const D3D11_MESSAGE_ID_GETCRYPTOSESSIONPRIVATEDATASIZE_NULLPARAM = 3146086;
export const D3D11_MESSAGE_ID_GETVIDEODECODERCAPS_NULLPARAM = 3146087;
export const D3D11_MESSAGE_ID_GETVIDEODECODERCAPS_ZEROWIDTHHEIGHT = 3146088;
export const D3D11_MESSAGE_ID_CHECKVIDEODECODERDOWNSAMPLING_NULLPARAM = 3146089;
export const D3D11_MESSAGE_ID_CHECKVIDEODECODERDOWNSAMPLING_INVALIDCOLORSPACE = 3146090;
export const D3D11_MESSAGE_ID_CHECKVIDEODECODERDOWNSAMPLING_ZEROWIDTHHEIGHT = 3146091;
export const D3D11_MESSAGE_ID_VIDEODECODERENABLEDOWNSAMPLING_NULLPARAM = 3146092;
export const D3D11_MESSAGE_ID_VIDEODECODERENABLEDOWNSAMPLING_UNSUPPORTED = 3146093;
export const D3D11_MESSAGE_ID_VIDEODECODERUPDATEDOWNSAMPLING_NULLPARAM = 3146094;
export const D3D11_MESSAGE_ID_VIDEODECODERUPDATEDOWNSAMPLING_UNSUPPORTED = 3146095;
export const D3D11_MESSAGE_ID_CHECKVIDEOPROCESSORFORMATCONVERSION_NULLPARAM = 3146096;
export const D3D11_MESSAGE_ID_VIDEOPROCESSORSETOUTPUTCOLORSPACE1_NULLPARAM = 3146097;
export const D3D11_MESSAGE_ID_VIDEOPROCESSORGETOUTPUTCOLORSPACE1_NULLPARAM = 3146098;
export const D3D11_MESSAGE_ID_VIDEOPROCESSORSETSTREAMCOLORSPACE1_NULLPARAM = 3146099;
export const D3D11_MESSAGE_ID_VIDEOPROCESSORSETSTREAMCOLORSPACE1_INVALIDSTREAM = 3146100;
export const D3D11_MESSAGE_ID_VIDEOPROCESSORSETSTREAMMIRROR_NULLPARAM = 3146101;
export const D3D11_MESSAGE_ID_VIDEOPROCESSORSETSTREAMMIRROR_INVALIDSTREAM = 3146102;
export const D3D11_MESSAGE_ID_VIDEOPROCESSORSETSTREAMMIRROR_UNSUPPORTED = 3146103;
export const D3D11_MESSAGE_ID_VIDEOPROCESSORGETSTREAMCOLORSPACE1_NULLPARAM = 3146104;
export const D3D11_MESSAGE_ID_VIDEOPROCESSORGETSTREAMMIRROR_NULLPARAM = 3146105;
export const D3D11_MESSAGE_ID_RECOMMENDVIDEODECODERDOWNSAMPLING_NULLPARAM = 3146106;
export const D3D11_MESSAGE_ID_RECOMMENDVIDEODECODERDOWNSAMPLING_INVALIDCOLORSPACE = 3146107;
export const D3D11_MESSAGE_ID_RECOMMENDVIDEODECODERDOWNSAMPLING_ZEROWIDTHHEIGHT = 3146108;
export const D3D11_MESSAGE_ID_VIDEOPROCESSORSETOUTPUTSHADERUSAGE_NULLPARAM = 3146109;
export const D3D11_MESSAGE_ID_VIDEOPROCESSORGETOUTPUTSHADERUSAGE_NULLPARAM = 3146110;
export const D3D11_MESSAGE_ID_VIDEOPROCESSORGETBEHAVIORHINTS_NULLPARAM = 3146111;
export const D3D11_MESSAGE_ID_VIDEOPROCESSORGETBEHAVIORHINTS_INVALIDSTREAMCOUNT = 3146112;
export const D3D11_MESSAGE_ID_VIDEOPROCESSORGETBEHAVIORHINTS_TARGETRECT = 3146113;
export const D3D11_MESSAGE_ID_VIDEOPROCESSORGETBEHAVIORHINTS_INVALIDSOURCERECT = 3146114;
export const D3D11_MESSAGE_ID_VIDEOPROCESSORGETBEHAVIORHINTS_INVALIDDESTRECT = 3146115;
export const D3D11_MESSAGE_ID_GETCRYPTOSESSIONPRIVATEDATASIZE_INVALID_KEY_EXCHANGE_TYPE = 3146116;
export const D3D11_MESSAGE_ID_D3D11_1_MESSAGES_END = 3146117;
export const D3D11_MESSAGE_ID_D3D11_2_MESSAGES_START = 3146118;
export const D3D11_MESSAGE_ID_CREATEBUFFER_INVALIDUSAGE = 3146119;
export const D3D11_MESSAGE_ID_CREATETEXTURE1D_INVALIDUSAGE = 3146120;
export const D3D11_MESSAGE_ID_CREATETEXTURE2D_INVALIDUSAGE = 3146121;
export const D3D11_MESSAGE_ID_CREATEINPUTLAYOUT_LEVEL9_STEPRATE_NOT_1 = 3146122;
export const D3D11_MESSAGE_ID_CREATEINPUTLAYOUT_LEVEL9_INSTANCING_NOT_SUPPORTED = 3146123;
export const D3D11_MESSAGE_ID_UPDATETILEMAPPINGS_INVALID_PARAMETER = 3146124;
export const D3D11_MESSAGE_ID_COPYTILEMAPPINGS_INVALID_PARAMETER = 3146125;
export const D3D11_MESSAGE_ID_COPYTILES_INVALID_PARAMETER = 3146126;
export const D3D11_MESSAGE_ID_UPDATETILES_INVALID_PARAMETER = 3146127;
export const D3D11_MESSAGE_ID_RESIZETILEPOOL_INVALID_PARAMETER = 3146128;
export const D3D11_MESSAGE_ID_TILEDRESOURCEBARRIER_INVALID_PARAMETER = 3146129;
export const D3D11_MESSAGE_ID_NULL_TILE_MAPPING_ACCESS_WARNING = 3146130;
export const D3D11_MESSAGE_ID_NULL_TILE_MAPPING_ACCESS_ERROR = 3146131;
export const D3D11_MESSAGE_ID_DIRTY_TILE_MAPPING_ACCESS = 3146132;
export const D3D11_MESSAGE_ID_DUPLICATE_TILE_MAPPINGS_IN_COVERED_AREA = 3146133;
export const D3D11_MESSAGE_ID_TILE_MAPPINGS_IN_COVERED_AREA_DUPLICATED_OUTSIDE = 3146134;
export const D3D11_MESSAGE_ID_TILE_MAPPINGS_SHARED_BETWEEN_INCOMPATIBLE_RESOURCES = 3146135;
export const D3D11_MESSAGE_ID_TILE_MAPPINGS_SHARED_BETWEEN_INPUT_AND_OUTPUT = 3146136;
export const D3D11_MESSAGE_ID_CHECKMULTISAMPLEQUALITYLEVELS_INVALIDFLAGS = 3146137;
export const D3D11_MESSAGE_ID_GETRESOURCETILING_NONTILED_RESOURCE = 3146138;
export const D3D11_MESSAGE_ID_RESIZETILEPOOL_SHRINK_WITH_MAPPINGS_STILL_DEFINED_PAST_END = 3146139;
export const D3D11_MESSAGE_ID_NEED_TO_CALL_TILEDRESOURCEBARRIER = 3146140;
export const D3D11_MESSAGE_ID_CREATEDEVICE_INVALIDARGS = 3146141;
export const D3D11_MESSAGE_ID_CREATEDEVICE_WARNING = 3146142;
export const D3D11_MESSAGE_ID_CLEARUNORDEREDACCESSVIEWUINT_HAZARD = 3146143;
export const D3D11_MESSAGE_ID_CLEARUNORDEREDACCESSVIEWFLOAT_HAZARD = 3146144;
export const D3D11_MESSAGE_ID_TILED_RESOURCE_TIER_1_BUFFER_TEXTURE_MISMATCH = 3146145;
export const D3D11_MESSAGE_ID_CREATE_CRYPTOSESSION = 3146146;
export const D3D11_MESSAGE_ID_CREATE_AUTHENTICATEDCHANNEL = 3146147;
export const D3D11_MESSAGE_ID_LIVE_CRYPTOSESSION = 3146148;
export const D3D11_MESSAGE_ID_LIVE_AUTHENTICATEDCHANNEL = 3146149;
export const D3D11_MESSAGE_ID_DESTROY_CRYPTOSESSION = 3146150;
export const D3D11_MESSAGE_ID_DESTROY_AUTHENTICATEDCHANNEL = 3146151;
export const D3D11_MESSAGE_ID_D3D11_2_MESSAGES_END = 3146152;
export const D3D11_MESSAGE_ID_D3D11_3_MESSAGES_START = 3146153;
export const D3D11_MESSAGE_ID_CREATERASTERIZERSTATE_INVALID_CONSERVATIVERASTERMODE = 3146154;
export const D3D11_MESSAGE_ID_DEVICE_DRAW_INVALID_SYSTEMVALUE = 3146155;
export const D3D11_MESSAGE_ID_CREATEQUERYORPREDICATE_INVALIDCONTEXTTYPE = 3146156;
export const D3D11_MESSAGE_ID_CREATEQUERYORPREDICATE_DECODENOTSUPPORTED = 3146157;
export const D3D11_MESSAGE_ID_CREATEQUERYORPREDICATE_ENCODENOTSUPPORTED = 3146158;
export const D3D11_MESSAGE_ID_CREATESHADERRESOURCEVIEW_INVALIDPLANEINDEX = 3146159;
export const D3D11_MESSAGE_ID_CREATESHADERRESOURCEVIEW_INVALIDVIDEOPLANEINDEX = 3146160;
export const D3D11_MESSAGE_ID_CREATESHADERRESOURCEVIEW_AMBIGUOUSVIDEOPLANEINDEX = 3146161;
export const D3D11_MESSAGE_ID_CREATERENDERTARGETVIEW_INVALIDPLANEINDEX = 3146162;
export const D3D11_MESSAGE_ID_CREATERENDERTARGETVIEW_INVALIDVIDEOPLANEINDEX = 3146163;
export const D3D11_MESSAGE_ID_CREATERENDERTARGETVIEW_AMBIGUOUSVIDEOPLANEINDEX = 3146164;
export const D3D11_MESSAGE_ID_CREATEUNORDEREDACCESSVIEW_INVALIDPLANEINDEX = 3146165;
export const D3D11_MESSAGE_ID_CREATEUNORDEREDACCESSVIEW_INVALIDVIDEOPLANEINDEX = 3146166;
export const D3D11_MESSAGE_ID_CREATEUNORDEREDACCESSVIEW_AMBIGUOUSVIDEOPLANEINDEX = 3146167;
export const D3D11_MESSAGE_ID_JPEGDECODE_INVALIDSCANDATAOFFSET = 3146168;
export const D3D11_MESSAGE_ID_JPEGDECODE_NOTSUPPORTED = 3146169;
export const D3D11_MESSAGE_ID_JPEGDECODE_DIMENSIONSTOOLARGE = 3146170;
export const D3D11_MESSAGE_ID_JPEGDECODE_INVALIDCOMPONENTS = 3146171;
export const D3D11_MESSAGE_ID_JPEGDECODE_DESTINATIONNOT2D = 3146172;
export const D3D11_MESSAGE_ID_JPEGDECODE_TILEDRESOURCESUNSUPPORTED = 3146173;
export const D3D11_MESSAGE_ID_JPEGDECODE_GUARDRECTSUNSUPPORTED = 3146174;
export const D3D11_MESSAGE_ID_JPEGDECODE_FORMATUNSUPPORTED = 3146175;
export const D3D11_MESSAGE_ID_JPEGDECODE_INVALIDSUBRESOURCE = 3146176;
export const D3D11_MESSAGE_ID_JPEGDECODE_INVALIDMIPLEVEL = 3146177;
export const D3D11_MESSAGE_ID_JPEGDECODE_EMPTYDESTBOX = 3146178;
export const D3D11_MESSAGE_ID_JPEGDECODE_DESTBOXNOT2D = 3146179;
export const D3D11_MESSAGE_ID_JPEGDECODE_DESTBOXNOTSUB = 3146180;
export const D3D11_MESSAGE_ID_JPEGDECODE_DESTBOXESINTERSECT = 3146181;
export const D3D11_MESSAGE_ID_JPEGDECODE_XSUBSAMPLEMISMATCH = 3146182;
export const D3D11_MESSAGE_ID_JPEGDECODE_YSUBSAMPLEMISMATCH = 3146183;
export const D3D11_MESSAGE_ID_JPEGDECODE_XSUBSAMPLEODD = 3146184;
export const D3D11_MESSAGE_ID_JPEGDECODE_YSUBSAMPLEODD = 3146185;
export const D3D11_MESSAGE_ID_JPEGDECODE_OUTPUTDIMENSIONSTOOLARGE = 3146186;
export const D3D11_MESSAGE_ID_JPEGDECODE_NONPOW2SCALEUNSUPPORTED = 3146187;
export const D3D11_MESSAGE_ID_JPEGDECODE_FRACTIONALDOWNSCALETOLARGE = 3146188;
export const D3D11_MESSAGE_ID_JPEGDECODE_CHROMASIZEMISMATCH = 3146189;
export const D3D11_MESSAGE_ID_JPEGDECODE_LUMACHROMASIZEMISMATCH = 3146190;
export const D3D11_MESSAGE_ID_JPEGDECODE_INVALIDNUMDESTINATIONS = 3146191;
export const D3D11_MESSAGE_ID_JPEGDECODE_SUBBOXUNSUPPORTED = 3146192;
export const D3D11_MESSAGE_ID_JPEGDECODE_1DESTUNSUPPORTEDFORMAT = 3146193;
export const D3D11_MESSAGE_ID_JPEGDECODE_3DESTUNSUPPORTEDFORMAT = 3146194;
export const D3D11_MESSAGE_ID_JPEGDECODE_SCALEUNSUPPORTED = 3146195;
export const D3D11_MESSAGE_ID_JPEGDECODE_INVALIDSOURCESIZE = 3146196;
export const D3D11_MESSAGE_ID_JPEGDECODE_INVALIDCOPYFLAGS = 3146197;
export const D3D11_MESSAGE_ID_JPEGDECODE_HAZARD = 3146198;
export const D3D11_MESSAGE_ID_JPEGDECODE_UNSUPPORTEDSRCBUFFERUSAGE = 3146199;
export const D3D11_MESSAGE_ID_JPEGDECODE_UNSUPPORTEDSRCBUFFERMISCFLAGS = 3146200;
export const D3D11_MESSAGE_ID_JPEGDECODE_UNSUPPORTEDDSTTEXTUREUSAGE = 3146201;
export const D3D11_MESSAGE_ID_JPEGDECODE_BACKBUFFERNOTSUPPORTED = 3146202;
export const D3D11_MESSAGE_ID_JPEGDECODE_UNSUPPRTEDCOPYFLAGS = 3146203;
export const D3D11_MESSAGE_ID_JPEGENCODE_NOTSUPPORTED = 3146204;
export const D3D11_MESSAGE_ID_JPEGENCODE_INVALIDSCANDATAOFFSET = 3146205;
export const D3D11_MESSAGE_ID_JPEGENCODE_INVALIDCOMPONENTS = 3146206;
export const D3D11_MESSAGE_ID_JPEGENCODE_SOURCENOT2D = 3146207;
export const D3D11_MESSAGE_ID_JPEGENCODE_TILEDRESOURCESUNSUPPORTED = 3146208;
export const D3D11_MESSAGE_ID_JPEGENCODE_GUARDRECTSUNSUPPORTED = 3146209;
export const D3D11_MESSAGE_ID_JPEGENCODE_XSUBSAMPLEMISMATCH = 3146210;
export const D3D11_MESSAGE_ID_JPEGENCODE_YSUBSAMPLEMISMATCH = 3146211;
export const D3D11_MESSAGE_ID_JPEGENCODE_FORMATUNSUPPORTED = 3146212;
export const D3D11_MESSAGE_ID_JPEGENCODE_INVALIDSUBRESOURCE = 3146213;
export const D3D11_MESSAGE_ID_JPEGENCODE_INVALIDMIPLEVEL = 3146214;
export const D3D11_MESSAGE_ID_JPEGENCODE_DIMENSIONSTOOLARGE = 3146215;
export const D3D11_MESSAGE_ID_JPEGENCODE_HAZARD = 3146216;
export const D3D11_MESSAGE_ID_JPEGENCODE_UNSUPPORTEDDSTBUFFERUSAGE = 3146217;
export const D3D11_MESSAGE_ID_JPEGENCODE_UNSUPPORTEDDSTBUFFERMISCFLAGS = 3146218;
export const D3D11_MESSAGE_ID_JPEGENCODE_UNSUPPORTEDSRCTEXTUREUSAGE = 3146219;
export const D3D11_MESSAGE_ID_JPEGENCODE_BACKBUFFERNOTSUPPORTED = 3146220;
export const D3D11_MESSAGE_ID_CREATEQUERYORPREDICATE_UNSUPPORTEDCONTEXTTTYPEFORQUERY = 3146221;
export const D3D11_MESSAGE_ID_FLUSH1_INVALIDCONTEXTTYPE = 3146222;
export const D3D11_MESSAGE_ID_DEVICE_SETHARDWAREPROTECTION_INVALIDCONTEXT = 3146223;
export const D3D11_MESSAGE_ID_VIDEOPROCESSORSETOUTPUTHDRMETADATA_NULLPARAM = 3146224;
export const D3D11_MESSAGE_ID_VIDEOPROCESSORSETOUTPUTHDRMETADATA_INVALIDSIZE = 3146225;
export const D3D11_MESSAGE_ID_VIDEOPROCESSORGETOUTPUTHDRMETADATA_NULLPARAM = 3146226;
export const D3D11_MESSAGE_ID_VIDEOPROCESSORGETOUTPUTHDRMETADATA_INVALIDSIZE = 3146227;
export const D3D11_MESSAGE_ID_VIDEOPROCESSORSETSTREAMHDRMETADATA_NULLPARAM = 3146228;
export const D3D11_MESSAGE_ID_VIDEOPROCESSORSETSTREAMHDRMETADATA_INVALIDSTREAM = 3146229;
export const D3D11_MESSAGE_ID_VIDEOPROCESSORSETSTREAMHDRMETADATA_INVALIDSIZE = 3146230;
export const D3D11_MESSAGE_ID_VIDEOPROCESSORGETSTREAMHDRMETADATA_NULLPARAM = 3146231;
export const D3D11_MESSAGE_ID_VIDEOPROCESSORGETSTREAMHDRMETADATA_INVALIDSTREAM = 3146232;
export const D3D11_MESSAGE_ID_VIDEOPROCESSORGETSTREAMHDRMETADATA_INVALIDSIZE = 3146233;
export const D3D11_MESSAGE_ID_VIDEOPROCESSORGETSTREAMFRAMEFORMAT_INVALIDSTREAM = 3146234;
export const D3D11_MESSAGE_ID_VIDEOPROCESSORGETSTREAMCOLORSPACE_INVALIDSTREAM = 3146235;
export const D3D11_MESSAGE_ID_VIDEOPROCESSORGETSTREAMOUTPUTRATE_INVALIDSTREAM = 3146236;
export const D3D11_MESSAGE_ID_VIDEOPROCESSORGETSTREAMSOURCERECT_INVALIDSTREAM = 3146237;
export const D3D11_MESSAGE_ID_VIDEOPROCESSORGETSTREAMDESTRECT_INVALIDSTREAM = 3146238;
export const D3D11_MESSAGE_ID_VIDEOPROCESSORGETSTREAMALPHA_INVALIDSTREAM = 3146239;
export const D3D11_MESSAGE_ID_VIDEOPROCESSORGETSTREAMPALETTE_INVALIDSTREAM = 3146240;
export const D3D11_MESSAGE_ID_VIDEOPROCESSORGETSTREAMPIXELASPECTRATIO_INVALIDSTREAM = 3146241;
export const D3D11_MESSAGE_ID_VIDEOPROCESSORGETSTREAMLUMAKEY_INVALIDSTREAM = 3146242;
export const D3D11_MESSAGE_ID_VIDEOPROCESSORGETSTREAMSTEREOFORMAT_INVALIDSTREAM = 3146243;
export const D3D11_MESSAGE_ID_VIDEOPROCESSORGETSTREAMAUTOPROCESSINGMODE_INVALIDSTREAM = 3146244;
export const D3D11_MESSAGE_ID_VIDEOPROCESSORGETSTREAMFILTER_INVALIDSTREAM = 3146245;
export const D3D11_MESSAGE_ID_VIDEOPROCESSORGETSTREAMROTATION_INVALIDSTREAM = 3146246;
export const D3D11_MESSAGE_ID_VIDEOPROCESSORGETSTREAMCOLORSPACE1_INVALIDSTREAM = 3146247;
export const D3D11_MESSAGE_ID_VIDEOPROCESSORGETSTREAMMIRROR_INVALIDSTREAM = 3146248;
export const D3D11_MESSAGE_ID_CREATE_FENCE = 3146249;
export const D3D11_MESSAGE_ID_LIVE_FENCE = 3146250;
export const D3D11_MESSAGE_ID_DESTROY_FENCE = 3146251;
export const D3D11_MESSAGE_ID_CREATE_SYNCHRONIZEDCHANNEL = 3146252;
export const D3D11_MESSAGE_ID_LIVE_SYNCHRONIZEDCHANNEL = 3146253;
export const D3D11_MESSAGE_ID_DESTROY_SYNCHRONIZEDCHANNEL = 3146254;
export const D3D11_MESSAGE_ID_CREATEFENCE_INVALIDFLAGS = 3146255;
export const D3D11_MESSAGE_ID_D3D11_3_MESSAGES_END = 3146256;
export const D3D11_MESSAGE_ID_D3D11_5_MESSAGES_START = 3146257;
export const D3D11_MESSAGE_ID_NEGOTIATECRYPTOSESSIONKEYEXCHANGEMT_INVALIDKEYEXCHANGETYPE = 3146258;
export const D3D11_MESSAGE_ID_NEGOTIATECRYPTOSESSIONKEYEXCHANGEMT_NOT_SUPPORTED = 3146259;
export const D3D11_MESSAGE_ID_DECODERBEGINFRAME_INVALID_HISTOGRAM_COMPONENT_COUNT = 3146260;
export const D3D11_MESSAGE_ID_DECODERBEGINFRAME_INVALID_HISTOGRAM_COMPONENT = 3146261;
export const D3D11_MESSAGE_ID_DECODERBEGINFRAME_INVALID_HISTOGRAM_BUFFER_SIZE = 3146262;
export const D3D11_MESSAGE_ID_DECODERBEGINFRAME_INVALID_HISTOGRAM_BUFFER_USAGE = 3146263;
export const D3D11_MESSAGE_ID_DECODERBEGINFRAME_INVALID_HISTOGRAM_BUFFER_MISC_FLAGS = 3146264;
export const D3D11_MESSAGE_ID_DECODERBEGINFRAME_INVALID_HISTOGRAM_BUFFER_OFFSET = 3146265;
export const D3D11_MESSAGE_ID_CREATE_TRACKEDWORKLOAD = 3146266;
export const D3D11_MESSAGE_ID_LIVE_TRACKEDWORKLOAD = 3146267;
export const D3D11_MESSAGE_ID_DESTROY_TRACKEDWORKLOAD = 3146268;
export const D3D11_MESSAGE_ID_CREATE_TRACKED_WORKLOAD_NULLPARAM = 3146269;
export const D3D11_MESSAGE_ID_CREATE_TRACKED_WORKLOAD_INVALID_MAX_INSTANCES = 3146270;
export const D3D11_MESSAGE_ID_CREATE_TRACKED_WORKLOAD_INVALID_DEADLINE_TYPE = 3146271;
export const D3D11_MESSAGE_ID_CREATE_TRACKED_WORKLOAD_INVALID_ENGINE_TYPE = 3146272;
export const D3D11_MESSAGE_ID_MULTIPLE_TRACKED_WORKLOADS = 3146273;
export const D3D11_MESSAGE_ID_MULTIPLE_TRACKED_WORKLOAD_PAIRS = 3146274;
export const D3D11_MESSAGE_ID_INCOMPLETE_TRACKED_WORKLOAD_PAIR = 3146275;
export const D3D11_MESSAGE_ID_OUT_OF_ORDER_TRACKED_WORKLOAD_PAIR = 3146276;
export const D3D11_MESSAGE_ID_CANNOT_ADD_TRACKED_WORKLOAD = 3146277;
export const D3D11_MESSAGE_ID_TRACKED_WORKLOAD_NOT_SUPPORTED = 3146278;
export const D3D11_MESSAGE_ID_TRACKED_WORKLOAD_ENGINE_TYPE_NOT_FOUND = 3146279;
export const D3D11_MESSAGE_ID_NO_TRACKED_WORKLOAD_SLOT_AVAILABLE = 3146280;
export const D3D11_MESSAGE_ID_END_TRACKED_WORKLOAD_INVALID_ARG = 3146281;
export const D3D11_MESSAGE_ID_TRACKED_WORKLOAD_DISJOINT_FAILURE = 3146282;
export const D3D11_MESSAGE_ID_D3D11_5_MESSAGES_END = 3146283;
export const D3D11_COPY_NO_OVERWRITE = 1;
export const D3D11_COPY_DISCARD = 2;
export const D3D11_LOGIC_OP_CLEAR = 0;
export const D3D11_LOGIC_OP_SET = 1;
export const D3D11_LOGIC_OP_COPY = 2;
export const D3D11_LOGIC_OP_COPY_INVERTED = 3;
export const D3D11_LOGIC_OP_NOOP = 4;
export const D3D11_LOGIC_OP_INVERT = 5;
export const D3D11_LOGIC_OP_AND = 6;
export const D3D11_LOGIC_OP_NAND = 7;
export const D3D11_LOGIC_OP_OR = 8;
export const D3D11_LOGIC_OP_NOR = 9;
export const D3D11_LOGIC_OP_XOR = 10;
export const D3D11_LOGIC_OP_EQUIV = 11;
export const D3D11_LOGIC_OP_AND_REVERSE = 12;
export const D3D11_LOGIC_OP_AND_INVERTED = 13;
export const D3D11_LOGIC_OP_OR_REVERSE = 14;
export const D3D11_LOGIC_OP_OR_INVERTED = 15;
export const D3D11_1_CREATE_DEVICE_CONTEXT_STATE_SINGLETHREADED = 1;
export const D3D11_VIDEO_DECODER_CAPS_DOWNSAMPLE = 1;
export const D3D11_VIDEO_DECODER_CAPS_NON_REAL_TIME = 2;
export const D3D11_VIDEO_DECODER_CAPS_DOWNSAMPLE_DYNAMIC = 4;
export const D3D11_VIDEO_DECODER_CAPS_DOWNSAMPLE_REQUIRED = 8;
export const D3D11_VIDEO_DECODER_CAPS_UNSUPPORTED = 16;
export const D3D11_VIDEO_PROCESSOR_BEHAVIOR_HINT_MULTIPLANE_OVERLAY_ROTATION = 1;
export const D3D11_VIDEO_PROCESSOR_BEHAVIOR_HINT_MULTIPLANE_OVERLAY_RESIZE = 2;
export const D3D11_VIDEO_PROCESSOR_BEHAVIOR_HINT_MULTIPLANE_OVERLAY_COLOR_SPACE_CONVERSION = 4;
export const D3D11_VIDEO_PROCESSOR_BEHAVIOR_HINT_TRIPLE_BUFFER_OUTPUT = 8;
export const D3D11_CRYPTO_SESSION_STATUS_OK = 0;
export const D3D11_CRYPTO_SESSION_STATUS_KEY_LOST = 1;
export const D3D11_CRYPTO_SESSION_STATUS_KEY_AND_CONTENT_LOST = 2;
export const DXGI_COLOR_SPACE_RGB_FULL_G22_NONE_P709 = 0;
export const DXGI_COLOR_SPACE_RGB_FULL_G10_NONE_P709 = 1;
export const DXGI_COLOR_SPACE_RGB_STUDIO_G22_NONE_P709 = 2;
export const DXGI_COLOR_SPACE_RGB_STUDIO_G22_NONE_P2020 = 3;
export const DXGI_COLOR_SPACE_RESERVED = 4;
export const DXGI_COLOR_SPACE_YCBCR_FULL_G22_NONE_P709_X601 = 5;
export const DXGI_COLOR_SPACE_YCBCR_STUDIO_G22_LEFT_P601 = 6;
export const DXGI_COLOR_SPACE_YCBCR_FULL_G22_LEFT_P601 = 7;
export const DXGI_COLOR_SPACE_YCBCR_STUDIO_G22_LEFT_P709 = 8;
export const DXGI_COLOR_SPACE_YCBCR_FULL_G22_LEFT_P709 = 9;
export const DXGI_COLOR_SPACE_YCBCR_STUDIO_G22_LEFT_P2020 = 10;
export const DXGI_COLOR_SPACE_YCBCR_FULL_G22_LEFT_P2020 = 11;
export const DXGI_COLOR_SPACE_RGB_FULL_G2084_NONE_P2020 = 12;
export const DXGI_COLOR_SPACE_YCBCR_STUDIO_G2084_LEFT_P2020 = 13;
export const DXGI_COLOR_SPACE_RGB_STUDIO_G2084_NONE_P2020 = 14;
export const DXGI_COLOR_SPACE_YCBCR_STUDIO_G22_TOPLEFT_P2020 = 15;
export const DXGI_COLOR_SPACE_YCBCR_STUDIO_G2084_TOPLEFT_P2020 = 16;
export const DXGI_COLOR_SPACE_RGB_FULL_G22_NONE_P2020 = 17;
export const DXGI_COLOR_SPACE_YCBCR_STUDIO_GHLG_TOPLEFT_P2020 = 18;
export const DXGI_COLOR_SPACE_YCBCR_FULL_GHLG_TOPLEFT_P2020 = 19;
export const DXGI_COLOR_SPACE_RGB_STUDIO_G24_NONE_P709 = 20;
export const DXGI_COLOR_SPACE_RGB_STUDIO_G24_NONE_P2020 = 21;
export const DXGI_COLOR_SPACE_YCBCR_STUDIO_G24_LEFT_P709 = 22;
export const DXGI_COLOR_SPACE_YCBCR_STUDIO_G24_LEFT_P2020 = 23;
export const DXGI_COLOR_SPACE_YCBCR_STUDIO_G24_TOPLEFT_P2020 = 24;
export const DXGI_COLOR_SPACE_CUSTOM = `-1`;
export const D3D11_TILE_MAPPING_NO_OVERWRITE = 1;
export const D3D11_TILE_RANGE_NULL = 1;
export const D3D11_TILE_RANGE_SKIP = 2;
export const D3D11_TILE_RANGE_REUSE_SINGLE_TILE = 4;
export const D3D11_CHECK_MULTISAMPLE_QUALITY_LEVELS_TILED_RESOURCE = 1;
export const D3D11_TILE_COPY_NO_OVERWRITE = 1;
export const D3D11_TILE_COPY_LINEAR_BUFFER_TO_SWIZZLED_TILED_RESOURCE = 2;
export const D3D11_TILE_COPY_SWIZZLED_TILED_RESOURCE_TO_LINEAR_BUFFER = 4;
export const D3D11_CONTEXT_TYPE_ALL = 0;
export const D3D11_CONTEXT_TYPE_3D = 1;
export const D3D11_CONTEXT_TYPE_COMPUTE = 2;
export const D3D11_CONTEXT_TYPE_COPY = 3;
export const D3D11_CONTEXT_TYPE_VIDEO = 4;
export const D3D11_TEXTURE_LAYOUT_UNDEFINED = 0;
export const D3D11_TEXTURE_LAYOUT_ROW_MAJOR = 1;
export const D3D11_TEXTURE_LAYOUT_64K_STANDARD_SWIZZLE = 2;
export const D3D11_CONSERVATIVE_RASTERIZATION_MODE_OFF = 0;
export const D3D11_CONSERVATIVE_RASTERIZATION_MODE_ON = 1;
export const D3D11_FENCE_FLAG_NONE = 0;
export const D3D11_FENCE_FLAG_SHARED = 2;
export const D3D11_FENCE_FLAG_SHARED_CROSS_ADAPTER = 4;
export const D3D11_FENCE_FLAG_NON_MONITORED = 8;
export const D3D11_FEATURE_VIDEO_DECODER_HISTOGRAM = 0;
export const D3D11_VIDEO_DECODER_HISTOGRAM_COMPONENT_Y = 0;
export const D3D11_VIDEO_DECODER_HISTOGRAM_COMPONENT_U = 1;
export const D3D11_VIDEO_DECODER_HISTOGRAM_COMPONENT_V = 2;
export const D3D11_VIDEO_DECODER_HISTOGRAM_COMPONENT_R = 0;
export const D3D11_VIDEO_DECODER_HISTOGRAM_COMPONENT_G = 1;
export const D3D11_VIDEO_DECODER_HISTOGRAM_COMPONENT_B = 2;
export const D3D11_VIDEO_DECODER_HISTOGRAM_COMPONENT_A = 3;
export const D3D11_VIDEO_DECODER_HISTOGRAM_COMPONENT_FLAG_NONE = 0;
export const D3D11_VIDEO_DECODER_HISTOGRAM_COMPONENT_FLAG_Y = 1;
export const D3D11_VIDEO_DECODER_HISTOGRAM_COMPONENT_FLAG_U = 2;
export const D3D11_VIDEO_DECODER_HISTOGRAM_COMPONENT_FLAG_V = 4;
export const D3D11_VIDEO_DECODER_HISTOGRAM_COMPONENT_FLAG_R = 1;
export const D3D11_VIDEO_DECODER_HISTOGRAM_COMPONENT_FLAG_G = 2;
export const D3D11_VIDEO_DECODER_HISTOGRAM_COMPONENT_FLAG_B = 4;
export const D3D11_VIDEO_DECODER_HISTOGRAM_COMPONENT_FLAG_A = 8;
export const D3D11_CRYPTO_SESSION_KEY_EXCHANGE_FLAG_NONE = 0;
export const D3D11_SHVER_PIXEL_SHADER = 0;
export const D3D11_SHVER_VERTEX_SHADER = 1;
export const D3D11_SHVER_GEOMETRY_SHADER = 2;
export const D3D11_SHVER_HULL_SHADER = 3;
export const D3D11_SHVER_DOMAIN_SHADER = 4;
export const D3D11_SHVER_COMPUTE_SHADER = 5;
export const D3D11_SHVER_RESERVED0 = 65520;
export const D3D11_VERTEX_SHADER = 1;
export const D3D11_HULL_SHADER = 2;
export const D3D11_DOMAIN_SHADER = 3;
export const D3D11_GEOMETRY_SHADER = 4;
export const D3D11_PIXEL_SHADER = 5;
export const D3D11_COMPUTE_SHADER = 6;
export const D3D11_TRACE_GS_INPUT_PRIMITIVE_UNDEFINED = 0;
export const D3D11_TRACE_GS_INPUT_PRIMITIVE_POINT = 1;
export const D3D11_TRACE_GS_INPUT_PRIMITIVE_LINE = 2;
export const D3D11_TRACE_GS_INPUT_PRIMITIVE_TRIANGLE = 3;
export const D3D11_TRACE_GS_INPUT_PRIMITIVE_LINE_ADJ = 6;
export const D3D11_TRACE_GS_INPUT_PRIMITIVE_TRIANGLE_ADJ = 7;
export const D3D11_TRACE_OUTPUT_NULL_REGISTER = 0;
export const D3D11_TRACE_INPUT_REGISTER = 1;
export const D3D11_TRACE_INPUT_PRIMITIVE_ID_REGISTER = 2;
export const D3D11_TRACE_IMMEDIATE_CONSTANT_BUFFER = 3;
export const D3D11_TRACE_TEMP_REGISTER = 4;
export const D3D11_TRACE_INDEXABLE_TEMP_REGISTER = 5;
export const D3D11_TRACE_OUTPUT_REGISTER = 6;
export const D3D11_TRACE_OUTPUT_DEPTH_REGISTER = 7;
export const D3D11_TRACE_CONSTANT_BUFFER = 8;
export const D3D11_TRACE_IMMEDIATE32 = 9;
export const D3D11_TRACE_SAMPLER = 10;
export const D3D11_TRACE_RESOURCE = 11;
export const D3D11_TRACE_RASTERIZER = 12;
export const D3D11_TRACE_OUTPUT_COVERAGE_MASK = 13;
export const D3D11_TRACE_STREAM = 14;
export const D3D11_TRACE_THIS_POINTER = 15;
export const D3D11_TRACE_OUTPUT_CONTROL_POINT_ID_REGISTER = 16;
export const D3D11_TRACE_INPUT_FORK_INSTANCE_ID_REGISTER = 17;
export const D3D11_TRACE_INPUT_JOIN_INSTANCE_ID_REGISTER = 18;
export const D3D11_TRACE_INPUT_CONTROL_POINT_REGISTER = 19;
export const D3D11_TRACE_OUTPUT_CONTROL_POINT_REGISTER = 20;
export const D3D11_TRACE_INPUT_PATCH_CONSTANT_REGISTER = 21;
export const D3D11_TRACE_INPUT_DOMAIN_POINT_REGISTER = 22;
export const D3D11_TRACE_UNORDERED_ACCESS_VIEW = 23;
export const D3D11_TRACE_THREAD_GROUP_SHARED_MEMORY = 24;
export const D3D11_TRACE_INPUT_THREAD_ID_REGISTER = 25;
export const D3D11_TRACE_INPUT_THREAD_GROUP_ID_REGISTER = 26;
export const D3D11_TRACE_INPUT_THREAD_ID_IN_GROUP_REGISTER = 27;
export const D3D11_TRACE_INPUT_COVERAGE_MASK_REGISTER = 28;
export const D3D11_TRACE_INPUT_THREAD_ID_IN_GROUP_FLATTENED_REGISTER = 29;
export const D3D11_TRACE_INPUT_GS_INSTANCE_ID_REGISTER = 30;
export const D3D11_TRACE_OUTPUT_DEPTH_GREATER_EQUAL_REGISTER = 31;
export const D3D11_TRACE_OUTPUT_DEPTH_LESS_EQUAL_REGISTER = 32;
export const D3D11_TRACE_IMMEDIATE64 = 33;
export const D3D11_TRACE_INPUT_CYCLE_COUNTER_REGISTER = 34;
export const D3D11_TRACE_INTERFACE_POINTER = 35;
export const D3DX11_SCAN_DATA_TYPE_FLOAT = 1;
export const D3DX11_SCAN_DATA_TYPE_INT = 2;
export const D3DX11_SCAN_DATA_TYPE_UINT = 3;
export const D3DX11_SCAN_OPCODE_ADD = 1;
export const D3DX11_SCAN_OPCODE_MIN = 2;
export const D3DX11_SCAN_OPCODE_MAX = 3;
export const D3DX11_SCAN_OPCODE_MUL = 4;
export const D3DX11_SCAN_OPCODE_AND = 5;
export const D3DX11_SCAN_OPCODE_OR = 6;
export const D3DX11_SCAN_OPCODE_XOR = 7;
export const D3DX11_SCAN_DIRECTION_FORWARD = 1;
export const D3DX11_SCAN_DIRECTION_BACKWARD = 2;
export const D3DX11_FFT_DATA_TYPE_REAL = 0;
export const D3DX11_FFT_DATA_TYPE_COMPLEX = 1;
export const D3DX11_FFT_DIM_MASK_1D = 1;
export const D3DX11_FFT_DIM_MASK_2D = 3;
export const D3DX11_FFT_DIM_MASK_3D = 7;
export const D3DX11_FFT_CREATE_FLAG_NO_PRECOMPUTE_BUFFERS = 1;
export const D3D12_COMMAND_LIST_TYPE_DIRECT = 0;
export const D3D12_COMMAND_LIST_TYPE_BUNDLE = 1;
export const D3D12_COMMAND_LIST_TYPE_COMPUTE = 2;
export const D3D12_COMMAND_LIST_TYPE_COPY = 3;
export const D3D12_COMMAND_LIST_TYPE_VIDEO_DECODE = 4;
export const D3D12_COMMAND_LIST_TYPE_VIDEO_PROCESS = 5;
export const D3D12_COMMAND_LIST_TYPE_VIDEO_ENCODE = 6;
export const D3D12_COMMAND_QUEUE_FLAG_NONE = 0;
export const D3D12_COMMAND_QUEUE_FLAG_DISABLE_GPU_TIMEOUT = 1;
export const D3D12_COMMAND_QUEUE_PRIORITY_NORMAL = 0;
export const D3D12_COMMAND_QUEUE_PRIORITY_HIGH = 100;
export const D3D12_COMMAND_QUEUE_PRIORITY_GLOBAL_REALTIME = 10000;
export const D3D12_PRIMITIVE_TOPOLOGY_TYPE_UNDEFINED = 0;
export const D3D12_PRIMITIVE_TOPOLOGY_TYPE_POINT = 1;
export const D3D12_PRIMITIVE_TOPOLOGY_TYPE_LINE = 2;
export const D3D12_PRIMITIVE_TOPOLOGY_TYPE_TRIANGLE = 3;
export const D3D12_PRIMITIVE_TOPOLOGY_TYPE_PATCH = 4;
export const D3D12_INPUT_CLASSIFICATION_PER_VERTEX_DATA = 0;
export const D3D12_INPUT_CLASSIFICATION_PER_INSTANCE_DATA = 1;
export const D3D12_FILL_MODE_WIREFRAME = 2;
export const D3D12_FILL_MODE_SOLID = 3;
export const D3D12_CULL_MODE_NONE = 1;
export const D3D12_CULL_MODE_FRONT = 2;
export const D3D12_CULL_MODE_BACK = 3;
export const D3D12_COMPARISON_FUNC_NEVER = 1;
export const D3D12_COMPARISON_FUNC_LESS = 2;
export const D3D12_COMPARISON_FUNC_EQUAL = 3;
export const D3D12_COMPARISON_FUNC_LESS_EQUAL = 4;
export const D3D12_COMPARISON_FUNC_GREATER = 5;
export const D3D12_COMPARISON_FUNC_NOT_EQUAL = 6;
export const D3D12_COMPARISON_FUNC_GREATER_EQUAL = 7;
export const D3D12_COMPARISON_FUNC_ALWAYS = 8;
export const D3D12_DEPTH_WRITE_MASK_ZERO = 0;
export const D3D12_DEPTH_WRITE_MASK_ALL = 1;
export const D3D12_STENCIL_OP_KEEP = 1;
export const D3D12_STENCIL_OP_ZERO = 2;
export const D3D12_STENCIL_OP_REPLACE = 3;
export const D3D12_STENCIL_OP_INCR_SAT = 4;
export const D3D12_STENCIL_OP_DECR_SAT = 5;
export const D3D12_STENCIL_OP_INVERT = 6;
export const D3D12_STENCIL_OP_INCR = 7;
export const D3D12_STENCIL_OP_DECR = 8;
export const D3D12_BLEND_ZERO = 1;
export const D3D12_BLEND_ONE = 2;
export const D3D12_BLEND_SRC_COLOR = 3;
export const D3D12_BLEND_INV_SRC_COLOR = 4;
export const D3D12_BLEND_SRC_ALPHA = 5;
export const D3D12_BLEND_INV_SRC_ALPHA = 6;
export const D3D12_BLEND_DEST_ALPHA = 7;
export const D3D12_BLEND_INV_DEST_ALPHA = 8;
export const D3D12_BLEND_DEST_COLOR = 9;
export const D3D12_BLEND_INV_DEST_COLOR = 10;
export const D3D12_BLEND_SRC_ALPHA_SAT = 11;
export const D3D12_BLEND_BLEND_FACTOR = 14;
export const D3D12_BLEND_INV_BLEND_FACTOR = 15;
export const D3D12_BLEND_SRC1_COLOR = 16;
export const D3D12_BLEND_INV_SRC1_COLOR = 17;
export const D3D12_BLEND_SRC1_ALPHA = 18;
export const D3D12_BLEND_INV_SRC1_ALPHA = 19;
export const D3D12_BLEND_OP_ADD = 1;
export const D3D12_BLEND_OP_SUBTRACT = 2;
export const D3D12_BLEND_OP_REV_SUBTRACT = 3;
export const D3D12_BLEND_OP_MIN = 4;
export const D3D12_BLEND_OP_MAX = 5;
export const D3D12_COLOR_WRITE_ENABLE_RED = 1;
export const D3D12_COLOR_WRITE_ENABLE_GREEN = 2;
export const D3D12_COLOR_WRITE_ENABLE_BLUE = 4;
export const D3D12_COLOR_WRITE_ENABLE_ALPHA = 8;
export const D3D12_COLOR_WRITE_ENABLE_ALL = 15;
export const D3D12_LOGIC_OP_CLEAR = 0;
export const D3D12_LOGIC_OP_SET = 1;
export const D3D12_LOGIC_OP_COPY = 2;
export const D3D12_LOGIC_OP_COPY_INVERTED = 3;
export const D3D12_LOGIC_OP_NOOP = 4;
export const D3D12_LOGIC_OP_INVERT = 5;
export const D3D12_LOGIC_OP_AND = 6;
export const D3D12_LOGIC_OP_NAND = 7;
export const D3D12_LOGIC_OP_OR = 8;
export const D3D12_LOGIC_OP_NOR = 9;
export const D3D12_LOGIC_OP_XOR = 10;
export const D3D12_LOGIC_OP_EQUIV = 11;
export const D3D12_LOGIC_OP_AND_REVERSE = 12;
export const D3D12_LOGIC_OP_AND_INVERTED = 13;
export const D3D12_LOGIC_OP_OR_REVERSE = 14;
export const D3D12_LOGIC_OP_OR_INVERTED = 15;
export const D3D12_CONSERVATIVE_RASTERIZATION_MODE_OFF = 0;
export const D3D12_CONSERVATIVE_RASTERIZATION_MODE_ON = 1;
export const D3D12_INDEX_BUFFER_STRIP_CUT_VALUE_DISABLED = 0;
export const D3D12_INDEX_BUFFER_STRIP_CUT_VALUE_0xFFFF = 1;
export const D3D12_INDEX_BUFFER_STRIP_CUT_VALUE_0xFFFFFFFF = 2;
export const D3D12_PIPELINE_STATE_FLAG_NONE = 0;
export const D3D12_PIPELINE_STATE_FLAG_TOOL_DEBUG = 1;
export const D3D12_PIPELINE_STATE_SUBOBJECT_TYPE_ROOT_SIGNATURE = 0;
export const D3D12_PIPELINE_STATE_SUBOBJECT_TYPE_VS = 1;
export const D3D12_PIPELINE_STATE_SUBOBJECT_TYPE_PS = 2;
export const D3D12_PIPELINE_STATE_SUBOBJECT_TYPE_DS = 3;
export const D3D12_PIPELINE_STATE_SUBOBJECT_TYPE_HS = 4;
export const D3D12_PIPELINE_STATE_SUBOBJECT_TYPE_GS = 5;
export const D3D12_PIPELINE_STATE_SUBOBJECT_TYPE_CS = 6;
export const D3D12_PIPELINE_STATE_SUBOBJECT_TYPE_STREAM_OUTPUT = 7;
export const D3D12_PIPELINE_STATE_SUBOBJECT_TYPE_BLEND = 8;
export const D3D12_PIPELINE_STATE_SUBOBJECT_TYPE_SAMPLE_MASK = 9;
export const D3D12_PIPELINE_STATE_SUBOBJECT_TYPE_RASTERIZER = 10;
export const D3D12_PIPELINE_STATE_SUBOBJECT_TYPE_DEPTH_STENCIL = 11;
export const D3D12_PIPELINE_STATE_SUBOBJECT_TYPE_INPUT_LAYOUT = 12;
export const D3D12_PIPELINE_STATE_SUBOBJECT_TYPE_IB_STRIP_CUT_VALUE = 13;
export const D3D12_PIPELINE_STATE_SUBOBJECT_TYPE_PRIMITIVE_TOPOLOGY = 14;
export const D3D12_PIPELINE_STATE_SUBOBJECT_TYPE_RENDER_TARGET_FORMATS = 15;
export const D3D12_PIPELINE_STATE_SUBOBJECT_TYPE_DEPTH_STENCIL_FORMAT = 16;
export const D3D12_PIPELINE_STATE_SUBOBJECT_TYPE_SAMPLE_DESC = 17;
export const D3D12_PIPELINE_STATE_SUBOBJECT_TYPE_NODE_MASK = 18;
export const D3D12_PIPELINE_STATE_SUBOBJECT_TYPE_CACHED_PSO = 19;
export const D3D12_PIPELINE_STATE_SUBOBJECT_TYPE_FLAGS = 20;
export const D3D12_PIPELINE_STATE_SUBOBJECT_TYPE_DEPTH_STENCIL1 = 21;
export const D3D12_PIPELINE_STATE_SUBOBJECT_TYPE_VIEW_INSTANCING = 22;
export const D3D12_PIPELINE_STATE_SUBOBJECT_TYPE_AS = 24;
export const D3D12_PIPELINE_STATE_SUBOBJECT_TYPE_MS = 25;
export const D3D12_PIPELINE_STATE_SUBOBJECT_TYPE_MAX_VALID = 26;
export const D3D12_FEATURE_D3D12_OPTIONS = 0;
export const D3D12_FEATURE_ARCHITECTURE = 1;
export const D3D12_FEATURE_FEATURE_LEVELS = 2;
export const D3D12_FEATURE_FORMAT_SUPPORT = 3;
export const D3D12_FEATURE_MULTISAMPLE_QUALITY_LEVELS = 4;
export const D3D12_FEATURE_FORMAT_INFO = 5;
export const D3D12_FEATURE_GPU_VIRTUAL_ADDRESS_SUPPORT = 6;
export const D3D12_FEATURE_SHADER_MODEL = 7;
export const D3D12_FEATURE_D3D12_OPTIONS1 = 8;
export const D3D12_FEATURE_PROTECTED_RESOURCE_SESSION_SUPPORT = 10;
export const D3D12_FEATURE_ROOT_SIGNATURE = 12;
export const D3D12_FEATURE_ARCHITECTURE1 = 16;
export const D3D12_FEATURE_D3D12_OPTIONS2 = 18;
export const D3D12_FEATURE_SHADER_CACHE = 19;
export const D3D12_FEATURE_COMMAND_QUEUE_PRIORITY = 20;
export const D3D12_FEATURE_D3D12_OPTIONS3 = 21;
export const D3D12_FEATURE_EXISTING_HEAPS = 22;
export const D3D12_FEATURE_D3D12_OPTIONS4 = 23;
export const D3D12_FEATURE_SERIALIZATION = 24;
export const D3D12_FEATURE_CROSS_NODE = 25;
export const D3D12_FEATURE_D3D12_OPTIONS5 = 27;
export const D3D12_FEATURE_DISPLAYABLE = 28;
export const D3D12_FEATURE_D3D12_OPTIONS6 = 30;
export const D3D12_FEATURE_QUERY_META_COMMAND = 31;
export const D3D12_FEATURE_D3D12_OPTIONS7 = 32;
export const D3D12_FEATURE_PROTECTED_RESOURCE_SESSION_TYPE_COUNT = 33;
export const D3D12_FEATURE_PROTECTED_RESOURCE_SESSION_TYPES = 34;
export const D3D12_FEATURE_D3D12_OPTIONS8 = 36;
export const D3D12_FEATURE_D3D12_OPTIONS9 = 37;
export const D3D12_FEATURE_D3D12_OPTIONS10 = 39;
export const D3D12_FEATURE_D3D12_OPTIONS11 = 40;
export const D3D12_SHADER_MIN_PRECISION_SUPPORT_NONE = 0;
export const D3D12_SHADER_MIN_PRECISION_SUPPORT_10_BIT = 1;
export const D3D12_SHADER_MIN_PRECISION_SUPPORT_16_BIT = 2;
export const D3D12_TILED_RESOURCES_TIER_NOT_SUPPORTED = 0;
export const D3D12_TILED_RESOURCES_TIER_1 = 1;
export const D3D12_TILED_RESOURCES_TIER_2 = 2;
export const D3D12_TILED_RESOURCES_TIER_3 = 3;
export const D3D12_TILED_RESOURCES_TIER_4 = 4;
export const D3D12_RESOURCE_BINDING_TIER_1 = 1;
export const D3D12_RESOURCE_BINDING_TIER_2 = 2;
export const D3D12_RESOURCE_BINDING_TIER_3 = 3;
export const D3D12_CONSERVATIVE_RASTERIZATION_TIER_NOT_SUPPORTED = 0;
export const D3D12_CONSERVATIVE_RASTERIZATION_TIER_1 = 1;
export const D3D12_CONSERVATIVE_RASTERIZATION_TIER_2 = 2;
export const D3D12_CONSERVATIVE_RASTERIZATION_TIER_3 = 3;
export const D3D12_FORMAT_SUPPORT1_NONE = 0;
export const D3D12_FORMAT_SUPPORT1_BUFFER = 1;
export const D3D12_FORMAT_SUPPORT1_IA_VERTEX_BUFFER = 2;
export const D3D12_FORMAT_SUPPORT1_IA_INDEX_BUFFER = 4;
export const D3D12_FORMAT_SUPPORT1_SO_BUFFER = 8;
export const D3D12_FORMAT_SUPPORT1_TEXTURE1D = 16;
export const D3D12_FORMAT_SUPPORT1_TEXTURE2D = 32;
export const D3D12_FORMAT_SUPPORT1_TEXTURE3D = 64;
export const D3D12_FORMAT_SUPPORT1_TEXTURECUBE = 128;
export const D3D12_FORMAT_SUPPORT1_SHADER_LOAD = 256;
export const D3D12_FORMAT_SUPPORT1_SHADER_SAMPLE = 512;
export const D3D12_FORMAT_SUPPORT1_SHADER_SAMPLE_COMPARISON = 1024;
export const D3D12_FORMAT_SUPPORT1_SHADER_SAMPLE_MONO_TEXT = 2048;
export const D3D12_FORMAT_SUPPORT1_MIP = 4096;
export const D3D12_FORMAT_SUPPORT1_RENDER_TARGET = 16384;
export const D3D12_FORMAT_SUPPORT1_BLENDABLE = 32768;
export const D3D12_FORMAT_SUPPORT1_DEPTH_STENCIL = 65536;
export const D3D12_FORMAT_SUPPORT1_MULTISAMPLE_RESOLVE = 262144;
export const D3D12_FORMAT_SUPPORT1_DISPLAY = 524288;
export const D3D12_FORMAT_SUPPORT1_CAST_WITHIN_BIT_LAYOUT = 1048576;
export const D3D12_FORMAT_SUPPORT1_MULTISAMPLE_RENDERTARGET = 2097152;
export const D3D12_FORMAT_SUPPORT1_MULTISAMPLE_LOAD = 4194304;
export const D3D12_FORMAT_SUPPORT1_SHADER_GATHER = 8388608;
export const D3D12_FORMAT_SUPPORT1_BACK_BUFFER_CAST = 16777216;
export const D3D12_FORMAT_SUPPORT1_TYPED_UNORDERED_ACCESS_VIEW = 33554432;
export const D3D12_FORMAT_SUPPORT1_SHADER_GATHER_COMPARISON = 67108864;
export const D3D12_FORMAT_SUPPORT1_DECODER_OUTPUT = 134217728;
export const D3D12_FORMAT_SUPPORT1_VIDEO_PROCESSOR_OUTPUT = 268435456;
export const D3D12_FORMAT_SUPPORT1_VIDEO_PROCESSOR_INPUT = 536870912;
export const D3D12_FORMAT_SUPPORT1_VIDEO_ENCODER = 1073741824;
export const D3D12_FORMAT_SUPPORT2_NONE = 0;
export const D3D12_FORMAT_SUPPORT2_UAV_ATOMIC_ADD = 1;
export const D3D12_FORMAT_SUPPORT2_UAV_ATOMIC_BITWISE_OPS = 2;
export const D3D12_FORMAT_SUPPORT2_UAV_ATOMIC_COMPARE_STORE_OR_COMPARE_EXCHANGE = 4;
export const D3D12_FORMAT_SUPPORT2_UAV_ATOMIC_EXCHANGE = 8;
export const D3D12_FORMAT_SUPPORT2_UAV_ATOMIC_SIGNED_MIN_OR_MAX = 16;
export const D3D12_FORMAT_SUPPORT2_UAV_ATOMIC_UNSIGNED_MIN_OR_MAX = 32;
export const D3D12_FORMAT_SUPPORT2_UAV_TYPED_LOAD = 64;
export const D3D12_FORMAT_SUPPORT2_UAV_TYPED_STORE = 128;
export const D3D12_FORMAT_SUPPORT2_OUTPUT_MERGER_LOGIC_OP = 256;
export const D3D12_FORMAT_SUPPORT2_TILED = 512;
export const D3D12_FORMAT_SUPPORT2_MULTIPLANE_OVERLAY = 16384;
export const D3D12_FORMAT_SUPPORT2_SAMPLER_FEEDBACK = 32768;
export const D3D12_MULTISAMPLE_QUALITY_LEVELS_FLAG_NONE = 0;
export const D3D12_MULTISAMPLE_QUALITY_LEVELS_FLAG_TILED_RESOURCE = 1;
export const D3D12_CROSS_NODE_SHARING_TIER_NOT_SUPPORTED = 0;
export const D3D12_CROSS_NODE_SHARING_TIER_1_EMULATED = 1;
export const D3D12_CROSS_NODE_SHARING_TIER_1 = 2;
export const D3D12_CROSS_NODE_SHARING_TIER_2 = 3;
export const D3D12_CROSS_NODE_SHARING_TIER_3 = 4;
export const D3D12_RESOURCE_HEAP_TIER_1 = 1;
export const D3D12_RESOURCE_HEAP_TIER_2 = 2;
export const D3D12_PROGRAMMABLE_SAMPLE_POSITIONS_TIER_NOT_SUPPORTED = 0;
export const D3D12_PROGRAMMABLE_SAMPLE_POSITIONS_TIER_1 = 1;
export const D3D12_PROGRAMMABLE_SAMPLE_POSITIONS_TIER_2 = 2;
export const D3D12_VIEW_INSTANCING_TIER_NOT_SUPPORTED = 0;
export const D3D12_VIEW_INSTANCING_TIER_1 = 1;
export const D3D12_VIEW_INSTANCING_TIER_2 = 2;
export const D3D12_VIEW_INSTANCING_TIER_3 = 3;
export const D3D_ROOT_SIGNATURE_VERSION_1 = 1;
export const D3D_ROOT_SIGNATURE_VERSION_1_0 = 1;
export const D3D_ROOT_SIGNATURE_VERSION_1_1 = 2;
export const D3D_SHADER_MODEL_5_1 = 81;
export const D3D_SHADER_MODEL_6_0 = 96;
export const D3D_SHADER_MODEL_6_1 = 97;
export const D3D_SHADER_MODEL_6_2 = 98;
export const D3D_SHADER_MODEL_6_3 = 99;
export const D3D_SHADER_MODEL_6_4 = 100;
export const D3D_SHADER_MODEL_6_5 = 101;
export const D3D_SHADER_MODEL_6_6 = 102;
export const D3D_SHADER_MODEL_6_7 = 103;
export const D3D12_SHADER_CACHE_SUPPORT_NONE = 0;
export const D3D12_SHADER_CACHE_SUPPORT_SINGLE_PSO = 1;
export const D3D12_SHADER_CACHE_SUPPORT_LIBRARY = 2;
export const D3D12_SHADER_CACHE_SUPPORT_AUTOMATIC_INPROC_CACHE = 4;
export const D3D12_SHADER_CACHE_SUPPORT_AUTOMATIC_DISK_CACHE = 8;
export const D3D12_SHADER_CACHE_SUPPORT_DRIVER_MANAGED_CACHE = 16;
export const D3D12_SHADER_CACHE_SUPPORT_SHADER_CONTROL_CLEAR = 32;
export const D3D12_SHADER_CACHE_SUPPORT_SHADER_SESSION_DELETE = 64;
export const D3D12_COMMAND_LIST_SUPPORT_FLAG_NONE = 0;
export const D3D12_COMMAND_LIST_SUPPORT_FLAG_DIRECT = 1;
export const D3D12_COMMAND_LIST_SUPPORT_FLAG_BUNDLE = 2;
export const D3D12_COMMAND_LIST_SUPPORT_FLAG_COMPUTE = 4;
export const D3D12_COMMAND_LIST_SUPPORT_FLAG_COPY = 8;
export const D3D12_COMMAND_LIST_SUPPORT_FLAG_VIDEO_DECODE = 16;
export const D3D12_COMMAND_LIST_SUPPORT_FLAG_VIDEO_PROCESS = 32;
export const D3D12_COMMAND_LIST_SUPPORT_FLAG_VIDEO_ENCODE = 64;
export const D3D12_SHARED_RESOURCE_COMPATIBILITY_TIER_0 = 0;
export const D3D12_SHARED_RESOURCE_COMPATIBILITY_TIER_1 = 1;
export const D3D12_SHARED_RESOURCE_COMPATIBILITY_TIER_2 = 2;
export const D3D12_HEAP_SERIALIZATION_TIER_0 = 0;
export const D3D12_HEAP_SERIALIZATION_TIER_10 = 10;
export const D3D12_RENDER_PASS_TIER_0 = 0;
export const D3D12_RENDER_PASS_TIER_1 = 1;
export const D3D12_RENDER_PASS_TIER_2 = 2;
export const D3D12_RAYTRACING_TIER_NOT_SUPPORTED = 0;
export const D3D12_RAYTRACING_TIER_1_0 = 10;
export const D3D12_RAYTRACING_TIER_1_1 = 11;
export const D3D12_VARIABLE_SHADING_RATE_TIER_NOT_SUPPORTED = 0;
export const D3D12_VARIABLE_SHADING_RATE_TIER_1 = 1;
export const D3D12_VARIABLE_SHADING_RATE_TIER_2 = 2;
export const D3D12_MESH_SHADER_TIER_NOT_SUPPORTED = 0;
export const D3D12_MESH_SHADER_TIER_1 = 10;
export const D3D12_SAMPLER_FEEDBACK_TIER_NOT_SUPPORTED = 0;
export const D3D12_SAMPLER_FEEDBACK_TIER_0_9 = 90;
export const D3D12_SAMPLER_FEEDBACK_TIER_1_0 = 100;
export const D3D12_WAVE_MMA_TIER_NOT_SUPPORTED = 0;
export const D3D12_WAVE_MMA_TIER_1_0 = 10;
export const D3D12_HEAP_TYPE_DEFAULT = 1;
export const D3D12_HEAP_TYPE_UPLOAD = 2;
export const D3D12_HEAP_TYPE_READBACK = 3;
export const D3D12_HEAP_TYPE_CUSTOM = 4;
export const D3D12_CPU_PAGE_PROPERTY_UNKNOWN = 0;
export const D3D12_CPU_PAGE_PROPERTY_NOT_AVAILABLE = 1;
export const D3D12_CPU_PAGE_PROPERTY_WRITE_COMBINE = 2;
export const D3D12_CPU_PAGE_PROPERTY_WRITE_BACK = 3;
export const D3D12_MEMORY_POOL_UNKNOWN = 0;
export const D3D12_MEMORY_POOL_L0 = 1;
export const D3D12_MEMORY_POOL_L1 = 2;
export const D3D12_HEAP_FLAG_NONE = 0;
export const D3D12_HEAP_FLAG_SHARED = 1;
export const D3D12_HEAP_FLAG_DENY_BUFFERS = 4;
export const D3D12_HEAP_FLAG_ALLOW_DISPLAY = 8;
export const D3D12_HEAP_FLAG_SHARED_CROSS_ADAPTER = 32;
export const D3D12_HEAP_FLAG_DENY_RT_DS_TEXTURES = 64;
export const D3D12_HEAP_FLAG_DENY_NON_RT_DS_TEXTURES = 128;
export const D3D12_HEAP_FLAG_HARDWARE_PROTECTED = 256;
export const D3D12_HEAP_FLAG_ALLOW_WRITE_WATCH = 512;
export const D3D12_HEAP_FLAG_ALLOW_SHADER_ATOMICS = 1024;
export const D3D12_HEAP_FLAG_CREATE_NOT_RESIDENT = 2048;
export const D3D12_HEAP_FLAG_CREATE_NOT_ZEROED = 4096;
export const D3D12_HEAP_FLAG_ALLOW_ALL_BUFFERS_AND_TEXTURES = 0;
export const D3D12_HEAP_FLAG_ALLOW_ONLY_BUFFERS = 192;
export const D3D12_HEAP_FLAG_ALLOW_ONLY_NON_RT_DS_TEXTURES = 68;
export const D3D12_HEAP_FLAG_ALLOW_ONLY_RT_DS_TEXTURES = 132;
export const D3D12_RESOURCE_DIMENSION_UNKNOWN = 0;
export const D3D12_RESOURCE_DIMENSION_BUFFER = 1;
export const D3D12_RESOURCE_DIMENSION_TEXTURE1D = 2;
export const D3D12_RESOURCE_DIMENSION_TEXTURE2D = 3;
export const D3D12_RESOURCE_DIMENSION_TEXTURE3D = 4;
export const D3D12_TEXTURE_LAYOUT_UNKNOWN = 0;
export const D3D12_TEXTURE_LAYOUT_ROW_MAJOR = 1;
export const D3D12_TEXTURE_LAYOUT_64KB_UNDEFINED_SWIZZLE = 2;
export const D3D12_TEXTURE_LAYOUT_64KB_STANDARD_SWIZZLE = 3;
export const D3D12_RESOURCE_FLAG_NONE = 0;
export const D3D12_RESOURCE_FLAG_ALLOW_RENDER_TARGET = 1;
export const D3D12_RESOURCE_FLAG_ALLOW_DEPTH_STENCIL = 2;
export const D3D12_RESOURCE_FLAG_ALLOW_UNORDERED_ACCESS = 4;
export const D3D12_RESOURCE_FLAG_DENY_SHADER_RESOURCE = 8;
export const D3D12_RESOURCE_FLAG_ALLOW_CROSS_ADAPTER = 16;
export const D3D12_RESOURCE_FLAG_ALLOW_SIMULTANEOUS_ACCESS = 32;
export const D3D12_RESOURCE_FLAG_VIDEO_DECODE_REFERENCE_ONLY = 64;
export const D3D12_RESOURCE_FLAG_VIDEO_ENCODE_REFERENCE_ONLY = 128;
export const D3D12_TILE_RANGE_FLAG_NONE = 0;
export const D3D12_TILE_RANGE_FLAG_NULL = 1;
export const D3D12_TILE_RANGE_FLAG_SKIP = 2;
export const D3D12_TILE_RANGE_FLAG_REUSE_SINGLE_TILE = 4;
export const D3D12_TILE_MAPPING_FLAG_NONE = 0;
export const D3D12_TILE_MAPPING_FLAG_NO_HAZARD = 1;
export const D3D12_TILE_COPY_FLAG_NONE = 0;
export const D3D12_TILE_COPY_FLAG_NO_HAZARD = 1;
export const D3D12_TILE_COPY_FLAG_LINEAR_BUFFER_TO_SWIZZLED_TILED_RESOURCE = 2;
export const D3D12_TILE_COPY_FLAG_SWIZZLED_TILED_RESOURCE_TO_LINEAR_BUFFER = 4;
export const D3D12_RESOURCE_STATE_COMMON = 0;
export const D3D12_RESOURCE_STATE_VERTEX_AND_CONSTANT_BUFFER = 1;
export const D3D12_RESOURCE_STATE_INDEX_BUFFER = 2;
export const D3D12_RESOURCE_STATE_RENDER_TARGET = 4;
export const D3D12_RESOURCE_STATE_UNORDERED_ACCESS = 8;
export const D3D12_RESOURCE_STATE_DEPTH_WRITE = 16;
export const D3D12_RESOURCE_STATE_DEPTH_READ = 32;
export const D3D12_RESOURCE_STATE_NON_PIXEL_SHADER_RESOURCE = 64;
export const D3D12_RESOURCE_STATE_PIXEL_SHADER_RESOURCE = 128;
export const D3D12_RESOURCE_STATE_STREAM_OUT = 256;
export const D3D12_RESOURCE_STATE_INDIRECT_ARGUMENT = 512;
export const D3D12_RESOURCE_STATE_COPY_DEST = 1024;
export const D3D12_RESOURCE_STATE_COPY_SOURCE = 2048;
export const D3D12_RESOURCE_STATE_RESOLVE_DEST = 4096;
export const D3D12_RESOURCE_STATE_RESOLVE_SOURCE = 8192;
export const D3D12_RESOURCE_STATE_RAYTRACING_ACCELERATION_STRUCTURE = 4194304;
export const D3D12_RESOURCE_STATE_SHADING_RATE_SOURCE = 16777216;
export const D3D12_RESOURCE_STATE_GENERIC_READ = 2755;
export const D3D12_RESOURCE_STATE_ALL_SHADER_RESOURCE = 192;
export const D3D12_RESOURCE_STATE_PRESENT = 0;
export const D3D12_RESOURCE_STATE_PREDICATION = 512;
export const D3D12_RESOURCE_STATE_VIDEO_DECODE_READ = 65536;
export const D3D12_RESOURCE_STATE_VIDEO_DECODE_WRITE = 131072;
export const D3D12_RESOURCE_STATE_VIDEO_PROCESS_READ = 262144;
export const D3D12_RESOURCE_STATE_VIDEO_PROCESS_WRITE = 524288;
export const D3D12_RESOURCE_STATE_VIDEO_ENCODE_READ = 2097152;
export const D3D12_RESOURCE_STATE_VIDEO_ENCODE_WRITE = 8388608;
export const D3D12_RESOURCE_BARRIER_TYPE_TRANSITION = 0;
export const D3D12_RESOURCE_BARRIER_TYPE_ALIASING = 1;
export const D3D12_RESOURCE_BARRIER_TYPE_UAV = 2;
export const D3D12_RESOURCE_BARRIER_FLAG_NONE = 0;
export const D3D12_RESOURCE_BARRIER_FLAG_BEGIN_ONLY = 1;
export const D3D12_RESOURCE_BARRIER_FLAG_END_ONLY = 2;
export const D3D12_TEXTURE_COPY_TYPE_SUBRESOURCE_INDEX = 0;
export const D3D12_TEXTURE_COPY_TYPE_PLACED_FOOTPRINT = 1;
export const D3D12_RESOLVE_MODE_DECOMPRESS = 0;
export const D3D12_RESOLVE_MODE_MIN = 1;
export const D3D12_RESOLVE_MODE_MAX = 2;
export const D3D12_RESOLVE_MODE_AVERAGE = 3;
export const D3D12_RESOLVE_MODE_ENCODE_SAMPLER_FEEDBACK = 4;
export const D3D12_RESOLVE_MODE_DECODE_SAMPLER_FEEDBACK = 5;
export const D3D12_VIEW_INSTANCING_FLAG_NONE = 0;
export const D3D12_VIEW_INSTANCING_FLAG_ENABLE_VIEW_INSTANCE_MASKING = 1;
export const D3D12_SHADER_COMPONENT_MAPPING_FROM_MEMORY_COMPONENT_0 = 0;
export const D3D12_SHADER_COMPONENT_MAPPING_FROM_MEMORY_COMPONENT_1 = 1;
export const D3D12_SHADER_COMPONENT_MAPPING_FROM_MEMORY_COMPONENT_2 = 2;
export const D3D12_SHADER_COMPONENT_MAPPING_FROM_MEMORY_COMPONENT_3 = 3;
export const D3D12_SHADER_COMPONENT_MAPPING_FORCE_VALUE_0 = 4;
export const D3D12_SHADER_COMPONENT_MAPPING_FORCE_VALUE_1 = 5;
export const D3D12_BUFFER_SRV_FLAG_NONE = 0;
export const D3D12_BUFFER_SRV_FLAG_RAW = 1;
export const D3D12_SRV_DIMENSION_UNKNOWN = 0;
export const D3D12_SRV_DIMENSION_BUFFER = 1;
export const D3D12_SRV_DIMENSION_TEXTURE1D = 2;
export const D3D12_SRV_DIMENSION_TEXTURE1DARRAY = 3;
export const D3D12_SRV_DIMENSION_TEXTURE2D = 4;
export const D3D12_SRV_DIMENSION_TEXTURE2DARRAY = 5;
export const D3D12_SRV_DIMENSION_TEXTURE2DMS = 6;
export const D3D12_SRV_DIMENSION_TEXTURE2DMSARRAY = 7;
export const D3D12_SRV_DIMENSION_TEXTURE3D = 8;
export const D3D12_SRV_DIMENSION_TEXTURECUBE = 9;
export const D3D12_SRV_DIMENSION_TEXTURECUBEARRAY = 10;
export const D3D12_SRV_DIMENSION_RAYTRACING_ACCELERATION_STRUCTURE = 11;
export const D3D12_FILTER_MIN_MAG_MIP_POINT = 0;
export const D3D12_FILTER_MIN_MAG_POINT_MIP_LINEAR = 1;
export const D3D12_FILTER_MIN_POINT_MAG_LINEAR_MIP_POINT = 4;
export const D3D12_FILTER_MIN_POINT_MAG_MIP_LINEAR = 5;
export const D3D12_FILTER_MIN_LINEAR_MAG_MIP_POINT = 16;
export const D3D12_FILTER_MIN_LINEAR_MAG_POINT_MIP_LINEAR = 17;
export const D3D12_FILTER_MIN_MAG_LINEAR_MIP_POINT = 20;
export const D3D12_FILTER_MIN_MAG_MIP_LINEAR = 21;
export const D3D12_FILTER_ANISOTROPIC = 85;
export const D3D12_FILTER_COMPARISON_MIN_MAG_MIP_POINT = 128;
export const D3D12_FILTER_COMPARISON_MIN_MAG_POINT_MIP_LINEAR = 129;
export const D3D12_FILTER_COMPARISON_MIN_POINT_MAG_LINEAR_MIP_POINT = 132;
export const D3D12_FILTER_COMPARISON_MIN_POINT_MAG_MIP_LINEAR = 133;
export const D3D12_FILTER_COMPARISON_MIN_LINEAR_MAG_MIP_POINT = 144;
export const D3D12_FILTER_COMPARISON_MIN_LINEAR_MAG_POINT_MIP_LINEAR = 145;
export const D3D12_FILTER_COMPARISON_MIN_MAG_LINEAR_MIP_POINT = 148;
export const D3D12_FILTER_COMPARISON_MIN_MAG_MIP_LINEAR = 149;
export const D3D12_FILTER_COMPARISON_ANISOTROPIC = 213;
export const D3D12_FILTER_MINIMUM_MIN_MAG_MIP_POINT = 256;
export const D3D12_FILTER_MINIMUM_MIN_MAG_POINT_MIP_LINEAR = 257;
export const D3D12_FILTER_MINIMUM_MIN_POINT_MAG_LINEAR_MIP_POINT = 260;
export const D3D12_FILTER_MINIMUM_MIN_POINT_MAG_MIP_LINEAR = 261;
export const D3D12_FILTER_MINIMUM_MIN_LINEAR_MAG_MIP_POINT = 272;
export const D3D12_FILTER_MINIMUM_MIN_LINEAR_MAG_POINT_MIP_LINEAR = 273;
export const D3D12_FILTER_MINIMUM_MIN_MAG_LINEAR_MIP_POINT = 276;
export const D3D12_FILTER_MINIMUM_MIN_MAG_MIP_LINEAR = 277;
export const D3D12_FILTER_MINIMUM_ANISOTROPIC = 341;
export const D3D12_FILTER_MAXIMUM_MIN_MAG_MIP_POINT = 384;
export const D3D12_FILTER_MAXIMUM_MIN_MAG_POINT_MIP_LINEAR = 385;
export const D3D12_FILTER_MAXIMUM_MIN_POINT_MAG_LINEAR_MIP_POINT = 388;
export const D3D12_FILTER_MAXIMUM_MIN_POINT_MAG_MIP_LINEAR = 389;
export const D3D12_FILTER_MAXIMUM_MIN_LINEAR_MAG_MIP_POINT = 400;
export const D3D12_FILTER_MAXIMUM_MIN_LINEAR_MAG_POINT_MIP_LINEAR = 401;
export const D3D12_FILTER_MAXIMUM_MIN_MAG_LINEAR_MIP_POINT = 404;
export const D3D12_FILTER_MAXIMUM_MIN_MAG_MIP_LINEAR = 405;
export const D3D12_FILTER_MAXIMUM_ANISOTROPIC = 469;
export const D3D12_FILTER_TYPE_POINT = 0;
export const D3D12_FILTER_TYPE_LINEAR = 1;
export const D3D12_FILTER_REDUCTION_TYPE_STANDARD = 0;
export const D3D12_FILTER_REDUCTION_TYPE_COMPARISON = 1;
export const D3D12_FILTER_REDUCTION_TYPE_MINIMUM = 2;
export const D3D12_FILTER_REDUCTION_TYPE_MAXIMUM = 3;
export const D3D12_TEXTURE_ADDRESS_MODE_WRAP = 1;
export const D3D12_TEXTURE_ADDRESS_MODE_MIRROR = 2;
export const D3D12_TEXTURE_ADDRESS_MODE_CLAMP = 3;
export const D3D12_TEXTURE_ADDRESS_MODE_BORDER = 4;
export const D3D12_TEXTURE_ADDRESS_MODE_MIRROR_ONCE = 5;
export const D3D12_BUFFER_UAV_FLAG_NONE = 0;
export const D3D12_BUFFER_UAV_FLAG_RAW = 1;
export const D3D12_UAV_DIMENSION_UNKNOWN = 0;
export const D3D12_UAV_DIMENSION_BUFFER = 1;
export const D3D12_UAV_DIMENSION_TEXTURE1D = 2;
export const D3D12_UAV_DIMENSION_TEXTURE1DARRAY = 3;
export const D3D12_UAV_DIMENSION_TEXTURE2D = 4;
export const D3D12_UAV_DIMENSION_TEXTURE2DARRAY = 5;
export const D3D12_UAV_DIMENSION_TEXTURE3D = 8;
export const D3D12_RTV_DIMENSION_UNKNOWN = 0;
export const D3D12_RTV_DIMENSION_BUFFER = 1;
export const D3D12_RTV_DIMENSION_TEXTURE1D = 2;
export const D3D12_RTV_DIMENSION_TEXTURE1DARRAY = 3;
export const D3D12_RTV_DIMENSION_TEXTURE2D = 4;
export const D3D12_RTV_DIMENSION_TEXTURE2DARRAY = 5;
export const D3D12_RTV_DIMENSION_TEXTURE2DMS = 6;
export const D3D12_RTV_DIMENSION_TEXTURE2DMSARRAY = 7;
export const D3D12_RTV_DIMENSION_TEXTURE3D = 8;
export const D3D12_DSV_FLAG_NONE = 0;
export const D3D12_DSV_FLAG_READ_ONLY_DEPTH = 1;
export const D3D12_DSV_FLAG_READ_ONLY_STENCIL = 2;
export const D3D12_DSV_DIMENSION_UNKNOWN = 0;
export const D3D12_DSV_DIMENSION_TEXTURE1D = 1;
export const D3D12_DSV_DIMENSION_TEXTURE1DARRAY = 2;
export const D3D12_DSV_DIMENSION_TEXTURE2D = 3;
export const D3D12_DSV_DIMENSION_TEXTURE2DARRAY = 4;
export const D3D12_DSV_DIMENSION_TEXTURE2DMS = 5;
export const D3D12_DSV_DIMENSION_TEXTURE2DMSARRAY = 6;
export const D3D12_CLEAR_FLAG_DEPTH = 1;
export const D3D12_CLEAR_FLAG_STENCIL = 2;
export const D3D12_FENCE_FLAG_NONE = 0;
export const D3D12_FENCE_FLAG_SHARED = 1;
export const D3D12_FENCE_FLAG_SHARED_CROSS_ADAPTER = 2;
export const D3D12_FENCE_FLAG_NON_MONITORED = 4;
export const D3D12_DESCRIPTOR_HEAP_TYPE_CBV_SRV_UAV = 0;
export const D3D12_DESCRIPTOR_HEAP_TYPE_SAMPLER = 1;
export const D3D12_DESCRIPTOR_HEAP_TYPE_RTV = 2;
export const D3D12_DESCRIPTOR_HEAP_TYPE_DSV = 3;
export const D3D12_DESCRIPTOR_HEAP_TYPE_NUM_TYPES = 4;
export const D3D12_DESCRIPTOR_HEAP_FLAG_NONE = 0;
export const D3D12_DESCRIPTOR_HEAP_FLAG_SHADER_VISIBLE = 1;
export const D3D12_DESCRIPTOR_RANGE_TYPE_SRV = 0;
export const D3D12_DESCRIPTOR_RANGE_TYPE_UAV = 1;
export const D3D12_DESCRIPTOR_RANGE_TYPE_CBV = 2;
export const D3D12_DESCRIPTOR_RANGE_TYPE_SAMPLER = 3;
export const D3D12_SHADER_VISIBILITY_ALL = 0;
export const D3D12_SHADER_VISIBILITY_VERTEX = 1;
export const D3D12_SHADER_VISIBILITY_HULL = 2;
export const D3D12_SHADER_VISIBILITY_DOMAIN = 3;
export const D3D12_SHADER_VISIBILITY_GEOMETRY = 4;
export const D3D12_SHADER_VISIBILITY_PIXEL = 5;
export const D3D12_SHADER_VISIBILITY_AMPLIFICATION = 6;
export const D3D12_SHADER_VISIBILITY_MESH = 7;
export const D3D12_ROOT_PARAMETER_TYPE_DESCRIPTOR_TABLE = 0;
export const D3D12_ROOT_PARAMETER_TYPE_32BIT_CONSTANTS = 1;
export const D3D12_ROOT_PARAMETER_TYPE_CBV = 2;
export const D3D12_ROOT_PARAMETER_TYPE_SRV = 3;
export const D3D12_ROOT_PARAMETER_TYPE_UAV = 4;
export const D3D12_ROOT_SIGNATURE_FLAG_NONE = 0;
export const D3D12_ROOT_SIGNATURE_FLAG_ALLOW_INPUT_ASSEMBLER_INPUT_LAYOUT = 1;
export const D3D12_ROOT_SIGNATURE_FLAG_DENY_VERTEX_SHADER_ROOT_ACCESS = 2;
export const D3D12_ROOT_SIGNATURE_FLAG_DENY_HULL_SHADER_ROOT_ACCESS = 4;
export const D3D12_ROOT_SIGNATURE_FLAG_DENY_DOMAIN_SHADER_ROOT_ACCESS = 8;
export const D3D12_ROOT_SIGNATURE_FLAG_DENY_GEOMETRY_SHADER_ROOT_ACCESS = 16;
export const D3D12_ROOT_SIGNATURE_FLAG_DENY_PIXEL_SHADER_ROOT_ACCESS = 32;
export const D3D12_ROOT_SIGNATURE_FLAG_ALLOW_STREAM_OUTPUT = 64;
export const D3D12_ROOT_SIGNATURE_FLAG_LOCAL_ROOT_SIGNATURE = 128;
export const D3D12_ROOT_SIGNATURE_FLAG_DENY_AMPLIFICATION_SHADER_ROOT_ACCESS = 256;
export const D3D12_ROOT_SIGNATURE_FLAG_DENY_MESH_SHADER_ROOT_ACCESS = 512;
export const D3D12_ROOT_SIGNATURE_FLAG_CBV_SRV_UAV_HEAP_DIRECTLY_INDEXED = 1024;
export const D3D12_ROOT_SIGNATURE_FLAG_SAMPLER_HEAP_DIRECTLY_INDEXED = 2048;
export const D3D12_STATIC_BORDER_COLOR_TRANSPARENT_BLACK = 0;
export const D3D12_STATIC_BORDER_COLOR_OPAQUE_BLACK = 1;
export const D3D12_STATIC_BORDER_COLOR_OPAQUE_WHITE = 2;
export const D3D12_DESCRIPTOR_RANGE_FLAG_NONE = 0;
export const D3D12_DESCRIPTOR_RANGE_FLAG_DESCRIPTORS_VOLATILE = 1;
export const D3D12_DESCRIPTOR_RANGE_FLAG_DATA_VOLATILE = 2;
export const D3D12_DESCRIPTOR_RANGE_FLAG_DATA_STATIC_WHILE_SET_AT_EXECUTE = 4;
export const D3D12_DESCRIPTOR_RANGE_FLAG_DATA_STATIC = 8;
export const D3D12_DESCRIPTOR_RANGE_FLAG_DESCRIPTORS_STATIC_KEEPING_BUFFER_BOUNDS_CHECKS = 65536;
export const D3D12_ROOT_DESCRIPTOR_FLAG_NONE = 0;
export const D3D12_ROOT_DESCRIPTOR_FLAG_DATA_VOLATILE = 2;
export const D3D12_ROOT_DESCRIPTOR_FLAG_DATA_STATIC_WHILE_SET_AT_EXECUTE = 4;
export const D3D12_ROOT_DESCRIPTOR_FLAG_DATA_STATIC = 8;
export const D3D12_QUERY_HEAP_TYPE_OCCLUSION = 0;
export const D3D12_QUERY_HEAP_TYPE_TIMESTAMP = 1;
export const D3D12_QUERY_HEAP_TYPE_PIPELINE_STATISTICS = 2;
export const D3D12_QUERY_HEAP_TYPE_SO_STATISTICS = 3;
export const D3D12_QUERY_HEAP_TYPE_VIDEO_DECODE_STATISTICS = 4;
export const D3D12_QUERY_HEAP_TYPE_COPY_QUEUE_TIMESTAMP = 5;
export const D3D12_QUERY_HEAP_TYPE_PIPELINE_STATISTICS1 = 7;
export const D3D12_QUERY_TYPE_OCCLUSION = 0;
export const D3D12_QUERY_TYPE_BINARY_OCCLUSION = 1;
export const D3D12_QUERY_TYPE_TIMESTAMP = 2;
export const D3D12_QUERY_TYPE_PIPELINE_STATISTICS = 3;
export const D3D12_QUERY_TYPE_SO_STATISTICS_STREAM0 = 4;
export const D3D12_QUERY_TYPE_SO_STATISTICS_STREAM1 = 5;
export const D3D12_QUERY_TYPE_SO_STATISTICS_STREAM2 = 6;
export const D3D12_QUERY_TYPE_SO_STATISTICS_STREAM3 = 7;
export const D3D12_QUERY_TYPE_VIDEO_DECODE_STATISTICS = 8;
export const D3D12_QUERY_TYPE_PIPELINE_STATISTICS1 = 10;
export const D3D12_PREDICATION_OP_EQUAL_ZERO = 0;
export const D3D12_PREDICATION_OP_NOT_EQUAL_ZERO = 1;
export const D3D12_INDIRECT_ARGUMENT_TYPE_DRAW = 0;
export const D3D12_INDIRECT_ARGUMENT_TYPE_DRAW_INDEXED = 1;
export const D3D12_INDIRECT_ARGUMENT_TYPE_DISPATCH = 2;
export const D3D12_INDIRECT_ARGUMENT_TYPE_VERTEX_BUFFER_VIEW = 3;
export const D3D12_INDIRECT_ARGUMENT_TYPE_INDEX_BUFFER_VIEW = 4;
export const D3D12_INDIRECT_ARGUMENT_TYPE_CONSTANT = 5;
export const D3D12_INDIRECT_ARGUMENT_TYPE_CONSTANT_BUFFER_VIEW = 6;
export const D3D12_INDIRECT_ARGUMENT_TYPE_SHADER_RESOURCE_VIEW = 7;
export const D3D12_INDIRECT_ARGUMENT_TYPE_UNORDERED_ACCESS_VIEW = 8;
export const D3D12_INDIRECT_ARGUMENT_TYPE_DISPATCH_RAYS = 9;
export const D3D12_INDIRECT_ARGUMENT_TYPE_DISPATCH_MESH = 10;
export const D3D12_WRITEBUFFERIMMEDIATE_MODE_DEFAULT = 0;
export const D3D12_WRITEBUFFERIMMEDIATE_MODE_MARKER_IN = 1;
export const D3D12_WRITEBUFFERIMMEDIATE_MODE_MARKER_OUT = 2;
export const D3D12_MULTIPLE_FENCE_WAIT_FLAG_NONE = 0;
export const D3D12_MULTIPLE_FENCE_WAIT_FLAG_ANY = 1;
export const D3D12_MULTIPLE_FENCE_WAIT_FLAG_ALL = 0;
export const D3D12_RESIDENCY_PRIORITY_MINIMUM = 671088640;
export const D3D12_RESIDENCY_PRIORITY_LOW = 1342177280;
export const D3D12_RESIDENCY_PRIORITY_NORMAL = 2013265920;
export const D3D12_RESIDENCY_PRIORITY_HIGH = `-1610547200`;
export const D3D12_RESIDENCY_PRIORITY_MAXIMUM = `-939524096`;
export const D3D12_RESIDENCY_FLAG_NONE = 0;
export const D3D12_RESIDENCY_FLAG_DENY_OVERBUDGET = 1;
export const D3D12_COMMAND_LIST_FLAG_NONE = 0;
export const D3D12_COMMAND_POOL_FLAG_NONE = 0;
export const D3D12_COMMAND_RECORDER_FLAG_NONE = 0;
export const D3D12_PROTECTED_SESSION_STATUS_OK = 0;
export const D3D12_PROTECTED_SESSION_STATUS_INVALID = 1;
export const D3D12_PROTECTED_RESOURCE_SESSION_SUPPORT_FLAG_NONE = 0;
export const D3D12_PROTECTED_RESOURCE_SESSION_SUPPORT_FLAG_SUPPORTED = 1;
export const D3D12_PROTECTED_RESOURCE_SESSION_FLAG_NONE = 0;
export const D3D12_LIFETIME_STATE_IN_USE = 0;
export const D3D12_LIFETIME_STATE_NOT_IN_USE = 1;
export const D3D12_META_COMMAND_PARAMETER_TYPE_FLOAT = 0;
export const D3D12_META_COMMAND_PARAMETER_TYPE_UINT64 = 1;
export const D3D12_META_COMMAND_PARAMETER_TYPE_GPU_VIRTUAL_ADDRESS = 2;
export const D3D12_META_COMMAND_PARAMETER_TYPE_CPU_DESCRIPTOR_HANDLE_HEAP_TYPE_CBV_SRV_UAV = 3;
export const D3D12_META_COMMAND_PARAMETER_TYPE_GPU_DESCRIPTOR_HANDLE_HEAP_TYPE_CBV_SRV_UAV = 4;
export const D3D12_META_COMMAND_PARAMETER_FLAG_INPUT = 1;
export const D3D12_META_COMMAND_PARAMETER_FLAG_OUTPUT = 2;
export const D3D12_META_COMMAND_PARAMETER_STAGE_CREATION = 0;
export const D3D12_META_COMMAND_PARAMETER_STAGE_INITIALIZATION = 1;
export const D3D12_META_COMMAND_PARAMETER_STAGE_EXECUTION = 2;
export const D3D12_GRAPHICS_STATE_NONE = 0;
export const D3D12_GRAPHICS_STATE_IA_VERTEX_BUFFERS = 1;
export const D3D12_GRAPHICS_STATE_IA_INDEX_BUFFER = 2;
export const D3D12_GRAPHICS_STATE_IA_PRIMITIVE_TOPOLOGY = 4;
export const D3D12_GRAPHICS_STATE_DESCRIPTOR_HEAP = 8;
export const D3D12_GRAPHICS_STATE_GRAPHICS_ROOT_SIGNATURE = 16;
export const D3D12_GRAPHICS_STATE_COMPUTE_ROOT_SIGNATURE = 32;
export const D3D12_GRAPHICS_STATE_RS_VIEWPORTS = 64;
export const D3D12_GRAPHICS_STATE_RS_SCISSOR_RECTS = 128;
export const D3D12_GRAPHICS_STATE_PREDICATION = 256;
export const D3D12_GRAPHICS_STATE_OM_RENDER_TARGETS = 512;
export const D3D12_GRAPHICS_STATE_OM_STENCIL_REF = 1024;
export const D3D12_GRAPHICS_STATE_OM_BLEND_FACTOR = 2048;
export const D3D12_GRAPHICS_STATE_PIPELINE_STATE = 4096;
export const D3D12_GRAPHICS_STATE_SO_TARGETS = 8192;
export const D3D12_GRAPHICS_STATE_OM_DEPTH_BOUNDS = 16384;
export const D3D12_GRAPHICS_STATE_SAMPLE_POSITIONS = 32768;
export const D3D12_GRAPHICS_STATE_VIEW_INSTANCE_MASK = 65536;
export const D3D12_STATE_SUBOBJECT_TYPE_STATE_OBJECT_CONFIG = 0;
export const D3D12_STATE_SUBOBJECT_TYPE_GLOBAL_ROOT_SIGNATURE = 1;
export const D3D12_STATE_SUBOBJECT_TYPE_LOCAL_ROOT_SIGNATURE = 2;
export const D3D12_STATE_SUBOBJECT_TYPE_NODE_MASK = 3;
export const D3D12_STATE_SUBOBJECT_TYPE_DXIL_LIBRARY = 5;
export const D3D12_STATE_SUBOBJECT_TYPE_EXISTING_COLLECTION = 6;
export const D3D12_STATE_SUBOBJECT_TYPE_SUBOBJECT_TO_EXPORTS_ASSOCIATION = 7;
export const D3D12_STATE_SUBOBJECT_TYPE_DXIL_SUBOBJECT_TO_EXPORTS_ASSOCIATION = 8;
export const D3D12_STATE_SUBOBJECT_TYPE_RAYTRACING_SHADER_CONFIG = 9;
export const D3D12_STATE_SUBOBJECT_TYPE_RAYTRACING_PIPELINE_CONFIG = 10;
export const D3D12_STATE_SUBOBJECT_TYPE_HIT_GROUP = 11;
export const D3D12_STATE_SUBOBJECT_TYPE_RAYTRACING_PIPELINE_CONFIG1 = 12;
export const D3D12_STATE_SUBOBJECT_TYPE_MAX_VALID = 13;
export const D3D12_STATE_OBJECT_FLAG_NONE = 0;
export const D3D12_STATE_OBJECT_FLAG_ALLOW_LOCAL_DEPENDENCIES_ON_EXTERNAL_DEFINITIONS = 1;
export const D3D12_STATE_OBJECT_FLAG_ALLOW_EXTERNAL_DEPENDENCIES_ON_LOCAL_DEFINITIONS = 2;
export const D3D12_STATE_OBJECT_FLAG_ALLOW_STATE_OBJECT_ADDITIONS = 4;
export const D3D12_EXPORT_FLAG_NONE = 0;
export const D3D12_HIT_GROUP_TYPE_TRIANGLES = 0;
export const D3D12_HIT_GROUP_TYPE_PROCEDURAL_PRIMITIVE = 1;
export const D3D12_RAYTRACING_PIPELINE_FLAG_NONE = 0;
export const D3D12_RAYTRACING_PIPELINE_FLAG_SKIP_TRIANGLES = 256;
export const D3D12_RAYTRACING_PIPELINE_FLAG_SKIP_PROCEDURAL_PRIMITIVES = 512;
export const D3D12_STATE_OBJECT_TYPE_COLLECTION = 0;
export const D3D12_STATE_OBJECT_TYPE_RAYTRACING_PIPELINE = 3;
export const D3D12_RAYTRACING_GEOMETRY_FLAG_NONE = 0;
export const D3D12_RAYTRACING_GEOMETRY_FLAG_OPAQUE = 1;
export const D3D12_RAYTRACING_GEOMETRY_FLAG_NO_DUPLICATE_ANYHIT_INVOCATION = 2;
export const D3D12_RAYTRACING_GEOMETRY_TYPE_TRIANGLES = 0;
export const D3D12_RAYTRACING_GEOMETRY_TYPE_PROCEDURAL_PRIMITIVE_AABBS = 1;
export const D3D12_RAYTRACING_INSTANCE_FLAG_NONE = 0;
export const D3D12_RAYTRACING_INSTANCE_FLAG_TRIANGLE_CULL_DISABLE = 1;
export const D3D12_RAYTRACING_INSTANCE_FLAG_TRIANGLE_FRONT_COUNTERCLOCKWISE = 2;
export const D3D12_RAYTRACING_INSTANCE_FLAG_FORCE_OPAQUE = 4;
export const D3D12_RAYTRACING_INSTANCE_FLAG_FORCE_NON_OPAQUE = 8;
export const D3D12_RAYTRACING_ACCELERATION_STRUCTURE_BUILD_FLAG_NONE = 0;
export const D3D12_RAYTRACING_ACCELERATION_STRUCTURE_BUILD_FLAG_ALLOW_UPDATE = 1;
export const D3D12_RAYTRACING_ACCELERATION_STRUCTURE_BUILD_FLAG_ALLOW_COMPACTION = 2;
export const D3D12_RAYTRACING_ACCELERATION_STRUCTURE_BUILD_FLAG_PREFER_FAST_TRACE = 4;
export const D3D12_RAYTRACING_ACCELERATION_STRUCTURE_BUILD_FLAG_PREFER_FAST_BUILD = 8;
export const D3D12_RAYTRACING_ACCELERATION_STRUCTURE_BUILD_FLAG_MINIMIZE_MEMORY = 16;
export const D3D12_RAYTRACING_ACCELERATION_STRUCTURE_BUILD_FLAG_PERFORM_UPDATE = 32;
export const D3D12_RAYTRACING_ACCELERATION_STRUCTURE_COPY_MODE_CLONE = 0;
export const D3D12_RAYTRACING_ACCELERATION_STRUCTURE_COPY_MODE_COMPACT = 1;
export const D3D12_RAYTRACING_ACCELERATION_STRUCTURE_COPY_MODE_VISUALIZATION_DECODE_FOR_TOOLS = 2;
export const D3D12_RAYTRACING_ACCELERATION_STRUCTURE_COPY_MODE_SERIALIZE = 3;
export const D3D12_RAYTRACING_ACCELERATION_STRUCTURE_COPY_MODE_DESERIALIZE = 4;
export const D3D12_RAYTRACING_ACCELERATION_STRUCTURE_TYPE_TOP_LEVEL = 0;
export const D3D12_RAYTRACING_ACCELERATION_STRUCTURE_TYPE_BOTTOM_LEVEL = 1;
export const D3D12_ELEMENTS_LAYOUT_ARRAY = 0;
export const D3D12_ELEMENTS_LAYOUT_ARRAY_OF_POINTERS = 1;
export const D3D12_RAYTRACING_ACCELERATION_STRUCTURE_POSTBUILD_INFO_COMPACTED_SIZE = 0;
export const D3D12_RAYTRACING_ACCELERATION_STRUCTURE_POSTBUILD_INFO_TOOLS_VISUALIZATION = 1;
export const D3D12_RAYTRACING_ACCELERATION_STRUCTURE_POSTBUILD_INFO_SERIALIZATION = 2;
export const D3D12_RAYTRACING_ACCELERATION_STRUCTURE_POSTBUILD_INFO_CURRENT_SIZE = 3;
export const D3D12_SERIALIZED_DATA_RAYTRACING_ACCELERATION_STRUCTURE = 0;
export const D3D12_DRIVER_MATCHING_IDENTIFIER_COMPATIBLE_WITH_DEVICE = 0;
export const D3D12_DRIVER_MATCHING_IDENTIFIER_UNSUPPORTED_TYPE = 1;
export const D3D12_DRIVER_MATCHING_IDENTIFIER_UNRECOGNIZED = 2;
export const D3D12_DRIVER_MATCHING_IDENTIFIER_INCOMPATIBLE_VERSION = 3;
export const D3D12_DRIVER_MATCHING_IDENTIFIER_INCOMPATIBLE_TYPE = 4;
export const D3D12_RAY_FLAG_NONE = 0;
export const D3D12_RAY_FLAG_FORCE_OPAQUE = 1;
export const D3D12_RAY_FLAG_FORCE_NON_OPAQUE = 2;
export const D3D12_RAY_FLAG_ACCEPT_FIRST_HIT_AND_END_SEARCH = 4;
export const D3D12_RAY_FLAG_SKIP_CLOSEST_HIT_SHADER = 8;
export const D3D12_RAY_FLAG_CULL_BACK_FACING_TRIANGLES = 16;
export const D3D12_RAY_FLAG_CULL_FRONT_FACING_TRIANGLES = 32;
export const D3D12_RAY_FLAG_CULL_OPAQUE = 64;
export const D3D12_RAY_FLAG_CULL_NON_OPAQUE = 128;
export const D3D12_RAY_FLAG_SKIP_TRIANGLES = 256;
export const D3D12_RAY_FLAG_SKIP_PROCEDURAL_PRIMITIVES = 512;
export const D3D12_HIT_KIND_TRIANGLE_FRONT_FACE = 254;
export const D3D12_HIT_KIND_TRIANGLE_BACK_FACE = 255;
export const D3D12_AUTO_BREADCRUMB_OP_SETMARKER = 0;
export const D3D12_AUTO_BREADCRUMB_OP_BEGINEVENT = 1;
export const D3D12_AUTO_BREADCRUMB_OP_ENDEVENT = 2;
export const D3D12_AUTO_BREADCRUMB_OP_DRAWINSTANCED = 3;
export const D3D12_AUTO_BREADCRUMB_OP_DRAWINDEXEDINSTANCED = 4;
export const D3D12_AUTO_BREADCRUMB_OP_EXECUTEINDIRECT = 5;
export const D3D12_AUTO_BREADCRUMB_OP_DISPATCH = 6;
export const D3D12_AUTO_BREADCRUMB_OP_COPYBUFFERREGION = 7;
export const D3D12_AUTO_BREADCRUMB_OP_COPYTEXTUREREGION = 8;
export const D3D12_AUTO_BREADCRUMB_OP_COPYRESOURCE = 9;
export const D3D12_AUTO_BREADCRUMB_OP_COPYTILES = 10;
export const D3D12_AUTO_BREADCRUMB_OP_RESOLVESUBRESOURCE = 11;
export const D3D12_AUTO_BREADCRUMB_OP_CLEARRENDERTARGETVIEW = 12;
export const D3D12_AUTO_BREADCRUMB_OP_CLEARUNORDEREDACCESSVIEW = 13;
export const D3D12_AUTO_BREADCRUMB_OP_CLEARDEPTHSTENCILVIEW = 14;
export const D3D12_AUTO_BREADCRUMB_OP_RESOURCEBARRIER = 15;
export const D3D12_AUTO_BREADCRUMB_OP_EXECUTEBUNDLE = 16;
export const D3D12_AUTO_BREADCRUMB_OP_PRESENT = 17;
export const D3D12_AUTO_BREADCRUMB_OP_RESOLVEQUERYDATA = 18;
export const D3D12_AUTO_BREADCRUMB_OP_BEGINSUBMISSION = 19;
export const D3D12_AUTO_BREADCRUMB_OP_ENDSUBMISSION = 20;
export const D3D12_AUTO_BREADCRUMB_OP_DECODEFRAME = 21;
export const D3D12_AUTO_BREADCRUMB_OP_PROCESSFRAMES = 22;
export const D3D12_AUTO_BREADCRUMB_OP_ATOMICCOPYBUFFERUINT = 23;
export const D3D12_AUTO_BREADCRUMB_OP_ATOMICCOPYBUFFERUINT64 = 24;
export const D3D12_AUTO_BREADCRUMB_OP_RESOLVESUBRESOURCEREGION = 25;
export const D3D12_AUTO_BREADCRUMB_OP_WRITEBUFFERIMMEDIATE = 26;
export const D3D12_AUTO_BREADCRUMB_OP_DECODEFRAME1 = 27;
export const D3D12_AUTO_BREADCRUMB_OP_SETPROTECTEDRESOURCESESSION = 28;
export const D3D12_AUTO_BREADCRUMB_OP_DECODEFRAME2 = 29;
export const D3D12_AUTO_BREADCRUMB_OP_PROCESSFRAMES1 = 30;
export const D3D12_AUTO_BREADCRUMB_OP_BUILDRAYTRACINGACCELERATIONSTRUCTURE = 31;
export const D3D12_AUTO_BREADCRUMB_OP_EMITRAYTRACINGACCELERATIONSTRUCTUREPOSTBUILDINFO = 32;
export const D3D12_AUTO_BREADCRUMB_OP_COPYRAYTRACINGACCELERATIONSTRUCTURE = 33;
export const D3D12_AUTO_BREADCRUMB_OP_DISPATCHRAYS = 34;
export const D3D12_AUTO_BREADCRUMB_OP_INITIALIZEMETACOMMAND = 35;
export const D3D12_AUTO_BREADCRUMB_OP_EXECUTEMETACOMMAND = 36;
export const D3D12_AUTO_BREADCRUMB_OP_ESTIMATEMOTION = 37;
export const D3D12_AUTO_BREADCRUMB_OP_RESOLVEMOTIONVECTORHEAP = 38;
export const D3D12_AUTO_BREADCRUMB_OP_SETPIPELINESTATE1 = 39;
export const D3D12_AUTO_BREADCRUMB_OP_INITIALIZEEXTENSIONCOMMAND = 40;
export const D3D12_AUTO_BREADCRUMB_OP_EXECUTEEXTENSIONCOMMAND = 41;
export const D3D12_AUTO_BREADCRUMB_OP_DISPATCHMESH = 42;
export const D3D12_AUTO_BREADCRUMB_OP_ENCODEFRAME = 43;
export const D3D12_AUTO_BREADCRUMB_OP_RESOLVEENCODEROUTPUTMETADATA = 44;
export const D3D12_DRED_VERSION_1_0 = 1;
export const D3D12_DRED_VERSION_1_1 = 2;
export const D3D12_DRED_VERSION_1_2 = 3;
export const D3D12_DRED_VERSION_1_3 = 4;
export const D3D12_DRED_FLAG_NONE = 0;
export const D3D12_DRED_FLAG_FORCE_ENABLE = 1;
export const D3D12_DRED_FLAG_DISABLE_AUTOBREADCRUMBS = 2;
export const D3D12_DRED_ENABLEMENT_SYSTEM_CONTROLLED = 0;
export const D3D12_DRED_ENABLEMENT_FORCED_OFF = 1;
export const D3D12_DRED_ENABLEMENT_FORCED_ON = 2;
export const D3D12_DRED_ALLOCATION_TYPE_COMMAND_QUEUE = 19;
export const D3D12_DRED_ALLOCATION_TYPE_COMMAND_ALLOCATOR = 20;
export const D3D12_DRED_ALLOCATION_TYPE_PIPELINE_STATE = 21;
export const D3D12_DRED_ALLOCATION_TYPE_COMMAND_LIST = 22;
export const D3D12_DRED_ALLOCATION_TYPE_FENCE = 23;
export const D3D12_DRED_ALLOCATION_TYPE_DESCRIPTOR_HEAP = 24;
export const D3D12_DRED_ALLOCATION_TYPE_HEAP = 25;
export const D3D12_DRED_ALLOCATION_TYPE_QUERY_HEAP = 27;
export const D3D12_DRED_ALLOCATION_TYPE_COMMAND_SIGNATURE = 28;
export const D3D12_DRED_ALLOCATION_TYPE_PIPELINE_LIBRARY = 29;
export const D3D12_DRED_ALLOCATION_TYPE_VIDEO_DECODER = 30;
export const D3D12_DRED_ALLOCATION_TYPE_VIDEO_PROCESSOR = 32;
export const D3D12_DRED_ALLOCATION_TYPE_RESOURCE = 34;
export const D3D12_DRED_ALLOCATION_TYPE_PASS = 35;
export const D3D12_DRED_ALLOCATION_TYPE_CRYPTOSESSION = 36;
export const D3D12_DRED_ALLOCATION_TYPE_CRYPTOSESSIONPOLICY = 37;
export const D3D12_DRED_ALLOCATION_TYPE_PROTECTEDRESOURCESESSION = 38;
export const D3D12_DRED_ALLOCATION_TYPE_VIDEO_DECODER_HEAP = 39;
export const D3D12_DRED_ALLOCATION_TYPE_COMMAND_POOL = 40;
export const D3D12_DRED_ALLOCATION_TYPE_COMMAND_RECORDER = 41;
export const D3D12_DRED_ALLOCATION_TYPE_STATE_OBJECT = 42;
export const D3D12_DRED_ALLOCATION_TYPE_METACOMMAND = 43;
export const D3D12_DRED_ALLOCATION_TYPE_SCHEDULINGGROUP = 44;
export const D3D12_DRED_ALLOCATION_TYPE_VIDEO_MOTION_ESTIMATOR = 45;
export const D3D12_DRED_ALLOCATION_TYPE_VIDEO_MOTION_VECTOR_HEAP = 46;
export const D3D12_DRED_ALLOCATION_TYPE_VIDEO_EXTENSION_COMMAND = 47;
export const D3D12_DRED_ALLOCATION_TYPE_VIDEO_ENCODER = 48;
export const D3D12_DRED_ALLOCATION_TYPE_VIDEO_ENCODER_HEAP = 49;
export const D3D12_DRED_ALLOCATION_TYPE_INVALID = `-1`;
export const D3D12_DRED_PAGE_FAULT_FLAGS_NONE = 0;
export const D3D12_DRED_DEVICE_STATE_UNKNOWN = 0;
export const D3D12_DRED_DEVICE_STATE_HUNG = 3;
export const D3D12_DRED_DEVICE_STATE_FAULT = 6;
export const D3D12_DRED_DEVICE_STATE_PAGEFAULT = 7;
export const D3D12_BACKGROUND_PROCESSING_MODE_ALLOWED = 0;
export const D3D12_BACKGROUND_PROCESSING_MODE_ALLOW_INTRUSIVE_MEASUREMENTS = 1;
export const D3D12_BACKGROUND_PROCESSING_MODE_DISABLE_BACKGROUND_WORK = 2;
export const D3D12_BACKGROUND_PROCESSING_MODE_DISABLE_PROFILING_BY_SYSTEM = 3;
export const D3D12_MEASUREMENTS_ACTION_KEEP_ALL = 0;
export const D3D12_MEASUREMENTS_ACTION_COMMIT_RESULTS = 1;
export const D3D12_MEASUREMENTS_ACTION_COMMIT_RESULTS_HIGH_PRIORITY = 2;
export const D3D12_MEASUREMENTS_ACTION_DISCARD_PREVIOUS = 3;
export const D3D12_RENDER_PASS_BEGINNING_ACCESS_TYPE_DISCARD = 0;
export const D3D12_RENDER_PASS_BEGINNING_ACCESS_TYPE_PRESERVE = 1;
export const D3D12_RENDER_PASS_BEGINNING_ACCESS_TYPE_CLEAR = 2;
export const D3D12_RENDER_PASS_BEGINNING_ACCESS_TYPE_NO_ACCESS = 3;
export const D3D12_RENDER_PASS_ENDING_ACCESS_TYPE_DISCARD = 0;
export const D3D12_RENDER_PASS_ENDING_ACCESS_TYPE_PRESERVE = 1;
export const D3D12_RENDER_PASS_ENDING_ACCESS_TYPE_RESOLVE = 2;
export const D3D12_RENDER_PASS_ENDING_ACCESS_TYPE_NO_ACCESS = 3;
export const D3D12_RENDER_PASS_FLAG_NONE = 0;
export const D3D12_RENDER_PASS_FLAG_ALLOW_UAV_WRITES = 1;
export const D3D12_RENDER_PASS_FLAG_SUSPENDING_PASS = 2;
export const D3D12_RENDER_PASS_FLAG_RESUMING_PASS = 4;
export const D3D12_SHADER_CACHE_MODE_MEMORY = 0;
export const D3D12_SHADER_CACHE_MODE_DISK = 1;
export const D3D12_SHADER_CACHE_FLAG_NONE = 0;
export const D3D12_SHADER_CACHE_FLAG_DRIVER_VERSIONED = 1;
export const D3D12_SHADER_CACHE_FLAG_USE_WORKING_DIR = 2;
export const D3D12_SHADER_CACHE_KIND_FLAG_IMPLICIT_D3D_CACHE_FOR_DRIVER = 1;
export const D3D12_SHADER_CACHE_KIND_FLAG_IMPLICIT_D3D_CONVERSIONS = 2;
export const D3D12_SHADER_CACHE_KIND_FLAG_IMPLICIT_DRIVER_MANAGED = 4;
export const D3D12_SHADER_CACHE_KIND_FLAG_APPLICATION_MANAGED = 8;
export const D3D12_SHADER_CACHE_CONTROL_FLAG_DISABLE = 1;
export const D3D12_SHADER_CACHE_CONTROL_FLAG_ENABLE = 2;
export const D3D12_SHADER_CACHE_CONTROL_FLAG_CLEAR = 4;
export const D3D12_GPU_BASED_VALIDATION_FLAGS_NONE = 0;
export const D3D12_GPU_BASED_VALIDATION_FLAGS_DISABLE_STATE_TRACKING = 1;
export const D3D12_RLDO_NONE = 0;
export const D3D12_RLDO_SUMMARY = 1;
export const D3D12_RLDO_DETAIL = 2;
export const D3D12_RLDO_IGNORE_INTERNAL = 4;
export const D3D12_DEBUG_DEVICE_PARAMETER_FEATURE_FLAGS = 0;
export const D3D12_DEBUG_DEVICE_PARAMETER_GPU_BASED_VALIDATION_SETTINGS = 1;
export const D3D12_DEBUG_DEVICE_PARAMETER_GPU_SLOWDOWN_PERFORMANCE_FACTOR = 2;
export const D3D12_DEBUG_FEATURE_NONE = 0;
export const D3D12_DEBUG_FEATURE_ALLOW_BEHAVIOR_CHANGING_DEBUG_AIDS = 1;
export const D3D12_DEBUG_FEATURE_CONSERVATIVE_RESOURCE_STATE_TRACKING = 2;
export const D3D12_DEBUG_FEATURE_DISABLE_VIRTUALIZED_BUNDLES_VALIDATION = 4;
export const D3D12_DEBUG_FEATURE_EMULATE_WINDOWS7 = 8;
export const D3D12_GPU_BASED_VALIDATION_SHADER_PATCH_MODE_NONE = 0;
export const D3D12_GPU_BASED_VALIDATION_SHADER_PATCH_MODE_STATE_TRACKING_ONLY = 1;
export const D3D12_GPU_BASED_VALIDATION_SHADER_PATCH_MODE_UNGUARDED_VALIDATION = 2;
export const D3D12_GPU_BASED_VALIDATION_SHADER_PATCH_MODE_GUARDED_VALIDATION = 3;
export const NUM_D3D12_GPU_BASED_VALIDATION_SHADER_PATCH_MODES = 4;
export const D3D12_GPU_BASED_VALIDATION_PIPELINE_STATE_CREATE_FLAG_NONE = 0;
export const D3D12_GPU_BASED_VALIDATION_PIPELINE_STATE_CREATE_FLAG_FRONT_LOAD_CREATE_TRACKING_ONLY_SHADERS = 1;
export const D3D12_GPU_BASED_VALIDATION_PIPELINE_STATE_CREATE_FLAG_FRONT_LOAD_CREATE_UNGUARDED_VALIDATION_SHADERS = 2;
export const D3D12_GPU_BASED_VALIDATION_PIPELINE_STATE_CREATE_FLAG_FRONT_LOAD_CREATE_GUARDED_VALIDATION_SHADERS = 4;
export const D3D12_GPU_BASED_VALIDATION_PIPELINE_STATE_CREATE_FLAGS_VALID_MASK = 7;
export const D3D12_DEBUG_COMMAND_LIST_PARAMETER_GPU_BASED_VALIDATION_SETTINGS = 0;
export const D3D12_MESSAGE_CATEGORY_APPLICATION_DEFINED = 0;
export const D3D12_MESSAGE_CATEGORY_MISCELLANEOUS = 1;
export const D3D12_MESSAGE_CATEGORY_INITIALIZATION = 2;
export const D3D12_MESSAGE_CATEGORY_CLEANUP = 3;
export const D3D12_MESSAGE_CATEGORY_COMPILATION = 4;
export const D3D12_MESSAGE_CATEGORY_STATE_CREATION = 5;
export const D3D12_MESSAGE_CATEGORY_STATE_SETTING = 6;
export const D3D12_MESSAGE_CATEGORY_STATE_GETTING = 7;
export const D3D12_MESSAGE_CATEGORY_RESOURCE_MANIPULATION = 8;
export const D3D12_MESSAGE_CATEGORY_EXECUTION = 9;
export const D3D12_MESSAGE_CATEGORY_SHADER = 10;
export const D3D12_MESSAGE_SEVERITY_CORRUPTION = 0;
export const D3D12_MESSAGE_SEVERITY_ERROR = 1;
export const D3D12_MESSAGE_SEVERITY_WARNING = 2;
export const D3D12_MESSAGE_SEVERITY_INFO = 3;
export const D3D12_MESSAGE_SEVERITY_MESSAGE = 4;
export const D3D12_MESSAGE_ID_UNKNOWN = 0;
export const D3D12_MESSAGE_ID_STRING_FROM_APPLICATION = 1;
export const D3D12_MESSAGE_ID_CORRUPTED_THIS = 2;
export const D3D12_MESSAGE_ID_CORRUPTED_PARAMETER1 = 3;
export const D3D12_MESSAGE_ID_CORRUPTED_PARAMETER2 = 4;
export const D3D12_MESSAGE_ID_CORRUPTED_PARAMETER3 = 5;
export const D3D12_MESSAGE_ID_CORRUPTED_PARAMETER4 = 6;
export const D3D12_MESSAGE_ID_CORRUPTED_PARAMETER5 = 7;
export const D3D12_MESSAGE_ID_CORRUPTED_PARAMETER6 = 8;
export const D3D12_MESSAGE_ID_CORRUPTED_PARAMETER7 = 9;
export const D3D12_MESSAGE_ID_CORRUPTED_PARAMETER8 = 10;
export const D3D12_MESSAGE_ID_CORRUPTED_PARAMETER9 = 11;
export const D3D12_MESSAGE_ID_CORRUPTED_PARAMETER10 = 12;
export const D3D12_MESSAGE_ID_CORRUPTED_PARAMETER11 = 13;
export const D3D12_MESSAGE_ID_CORRUPTED_PARAMETER12 = 14;
export const D3D12_MESSAGE_ID_CORRUPTED_PARAMETER13 = 15;
export const D3D12_MESSAGE_ID_CORRUPTED_PARAMETER14 = 16;
export const D3D12_MESSAGE_ID_CORRUPTED_PARAMETER15 = 17;
export const D3D12_MESSAGE_ID_CORRUPTED_MULTITHREADING = 18;
export const D3D12_MESSAGE_ID_MESSAGE_REPORTING_OUTOFMEMORY = 19;
export const D3D12_MESSAGE_ID_GETPRIVATEDATA_MOREDATA = 20;
export const D3D12_MESSAGE_ID_SETPRIVATEDATA_INVALIDFREEDATA = 21;
export const D3D12_MESSAGE_ID_SETPRIVATEDATA_CHANGINGPARAMS = 24;
export const D3D12_MESSAGE_ID_SETPRIVATEDATA_OUTOFMEMORY = 25;
export const D3D12_MESSAGE_ID_CREATESHADERRESOURCEVIEW_UNRECOGNIZEDFORMAT = 26;
export const D3D12_MESSAGE_ID_CREATESHADERRESOURCEVIEW_INVALIDDESC = 27;
export const D3D12_MESSAGE_ID_CREATESHADERRESOURCEVIEW_INVALIDFORMAT = 28;
export const D3D12_MESSAGE_ID_CREATESHADERRESOURCEVIEW_INVALIDVIDEOPLANESLICE = 29;
export const D3D12_MESSAGE_ID_CREATESHADERRESOURCEVIEW_INVALIDPLANESLICE = 30;
export const D3D12_MESSAGE_ID_CREATESHADERRESOURCEVIEW_INVALIDDIMENSIONS = 31;
export const D3D12_MESSAGE_ID_CREATESHADERRESOURCEVIEW_INVALIDRESOURCE = 32;
export const D3D12_MESSAGE_ID_CREATERENDERTARGETVIEW_UNRECOGNIZEDFORMAT = 35;
export const D3D12_MESSAGE_ID_CREATERENDERTARGETVIEW_UNSUPPORTEDFORMAT = 36;
export const D3D12_MESSAGE_ID_CREATERENDERTARGETVIEW_INVALIDDESC = 37;
export const D3D12_MESSAGE_ID_CREATERENDERTARGETVIEW_INVALIDFORMAT = 38;
export const D3D12_MESSAGE_ID_CREATERENDERTARGETVIEW_INVALIDVIDEOPLANESLICE = 39;
export const D3D12_MESSAGE_ID_CREATERENDERTARGETVIEW_INVALIDPLANESLICE = 40;
export const D3D12_MESSAGE_ID_CREATERENDERTARGETVIEW_INVALIDDIMENSIONS = 41;
export const D3D12_MESSAGE_ID_CREATERENDERTARGETVIEW_INVALIDRESOURCE = 42;
export const D3D12_MESSAGE_ID_CREATEDEPTHSTENCILVIEW_UNRECOGNIZEDFORMAT = 45;
export const D3D12_MESSAGE_ID_CREATEDEPTHSTENCILVIEW_INVALIDDESC = 46;
export const D3D12_MESSAGE_ID_CREATEDEPTHSTENCILVIEW_INVALIDFORMAT = 47;
export const D3D12_MESSAGE_ID_CREATEDEPTHSTENCILVIEW_INVALIDDIMENSIONS = 48;
export const D3D12_MESSAGE_ID_CREATEDEPTHSTENCILVIEW_INVALIDRESOURCE = 49;
export const D3D12_MESSAGE_ID_CREATEINPUTLAYOUT_OUTOFMEMORY = 52;
export const D3D12_MESSAGE_ID_CREATEINPUTLAYOUT_TOOMANYELEMENTS = 53;
export const D3D12_MESSAGE_ID_CREATEINPUTLAYOUT_INVALIDFORMAT = 54;
export const D3D12_MESSAGE_ID_CREATEINPUTLAYOUT_INCOMPATIBLEFORMAT = 55;
export const D3D12_MESSAGE_ID_CREATEINPUTLAYOUT_INVALIDSLOT = 56;
export const D3D12_MESSAGE_ID_CREATEINPUTLAYOUT_INVALIDINPUTSLOTCLASS = 57;
export const D3D12_MESSAGE_ID_CREATEINPUTLAYOUT_STEPRATESLOTCLASSMISMATCH = 58;
export const D3D12_MESSAGE_ID_CREATEINPUTLAYOUT_INVALIDSLOTCLASSCHANGE = 59;
export const D3D12_MESSAGE_ID_CREATEINPUTLAYOUT_INVALIDSTEPRATECHANGE = 60;
export const D3D12_MESSAGE_ID_CREATEINPUTLAYOUT_INVALIDALIGNMENT = 61;
export const D3D12_MESSAGE_ID_CREATEINPUTLAYOUT_DUPLICATESEMANTIC = 62;
export const D3D12_MESSAGE_ID_CREATEINPUTLAYOUT_UNPARSEABLEINPUTSIGNATURE = 63;
export const D3D12_MESSAGE_ID_CREATEINPUTLAYOUT_NULLSEMANTIC = 64;
export const D3D12_MESSAGE_ID_CREATEINPUTLAYOUT_MISSINGELEMENT = 65;
export const D3D12_MESSAGE_ID_CREATEVERTEXSHADER_OUTOFMEMORY = 66;
export const D3D12_MESSAGE_ID_CREATEVERTEXSHADER_INVALIDSHADERBYTECODE = 67;
export const D3D12_MESSAGE_ID_CREATEVERTEXSHADER_INVALIDSHADERTYPE = 68;
export const D3D12_MESSAGE_ID_CREATEGEOMETRYSHADER_OUTOFMEMORY = 69;
export const D3D12_MESSAGE_ID_CREATEGEOMETRYSHADER_INVALIDSHADERBYTECODE = 70;
export const D3D12_MESSAGE_ID_CREATEGEOMETRYSHADER_INVALIDSHADERTYPE = 71;
export const D3D12_MESSAGE_ID_CREATEGEOMETRYSHADERWITHSTREAMOUTPUT_OUTOFMEMORY = 72;
export const D3D12_MESSAGE_ID_CREATEGEOMETRYSHADERWITHSTREAMOUTPUT_INVALIDSHADERBYTECODE = 73;
export const D3D12_MESSAGE_ID_CREATEGEOMETRYSHADERWITHSTREAMOUTPUT_INVALIDSHADERTYPE = 74;
export const D3D12_MESSAGE_ID_CREATEGEOMETRYSHADERWITHSTREAMOUTPUT_INVALIDNUMENTRIES = 75;
export const D3D12_MESSAGE_ID_CREATEGEOMETRYSHADERWITHSTREAMOUTPUT_OUTPUTSTREAMSTRIDEUNUSED = 76;
export const D3D12_MESSAGE_ID_CREATEGEOMETRYSHADERWITHSTREAMOUTPUT_OUTPUTSLOT0EXPECTED = 79;
export const D3D12_MESSAGE_ID_CREATEGEOMETRYSHADERWITHSTREAMOUTPUT_INVALIDOUTPUTSLOT = 80;
export const D3D12_MESSAGE_ID_CREATEGEOMETRYSHADERWITHSTREAMOUTPUT_ONLYONEELEMENTPERSLOT = 81;
export const D3D12_MESSAGE_ID_CREATEGEOMETRYSHADERWITHSTREAMOUTPUT_INVALIDCOMPONENTCOUNT = 82;
export const D3D12_MESSAGE_ID_CREATEGEOMETRYSHADERWITHSTREAMOUTPUT_INVALIDSTARTCOMPONENTANDCOMPONENTCOUNT = 83;
export const D3D12_MESSAGE_ID_CREATEGEOMETRYSHADERWITHSTREAMOUTPUT_INVALIDGAPDEFINITION = 84;
export const D3D12_MESSAGE_ID_CREATEGEOMETRYSHADERWITHSTREAMOUTPUT_REPEATEDOUTPUT = 85;
export const D3D12_MESSAGE_ID_CREATEGEOMETRYSHADERWITHSTREAMOUTPUT_INVALIDOUTPUTSTREAMSTRIDE = 86;
export const D3D12_MESSAGE_ID_CREATEGEOMETRYSHADERWITHSTREAMOUTPUT_MISSINGSEMANTIC = 87;
export const D3D12_MESSAGE_ID_CREATEGEOMETRYSHADERWITHSTREAMOUTPUT_MASKMISMATCH = 88;
export const D3D12_MESSAGE_ID_CREATEGEOMETRYSHADERWITHSTREAMOUTPUT_CANTHAVEONLYGAPS = 89;
export const D3D12_MESSAGE_ID_CREATEGEOMETRYSHADERWITHSTREAMOUTPUT_DECLTOOCOMPLEX = 90;
export const D3D12_MESSAGE_ID_CREATEGEOMETRYSHADERWITHSTREAMOUTPUT_MISSINGOUTPUTSIGNATURE = 91;
export const D3D12_MESSAGE_ID_CREATEPIXELSHADER_OUTOFMEMORY = 92;
export const D3D12_MESSAGE_ID_CREATEPIXELSHADER_INVALIDSHADERBYTECODE = 93;
export const D3D12_MESSAGE_ID_CREATEPIXELSHADER_INVALIDSHADERTYPE = 94;
export const D3D12_MESSAGE_ID_CREATERASTERIZERSTATE_INVALIDFILLMODE = 95;
export const D3D12_MESSAGE_ID_CREATERASTERIZERSTATE_INVALIDCULLMODE = 96;
export const D3D12_MESSAGE_ID_CREATERASTERIZERSTATE_INVALIDDEPTHBIASCLAMP = 97;
export const D3D12_MESSAGE_ID_CREATERASTERIZERSTATE_INVALIDSLOPESCALEDDEPTHBIAS = 98;
export const D3D12_MESSAGE_ID_CREATEDEPTHSTENCILSTATE_INVALIDDEPTHWRITEMASK = 100;
export const D3D12_MESSAGE_ID_CREATEDEPTHSTENCILSTATE_INVALIDDEPTHFUNC = 101;
export const D3D12_MESSAGE_ID_CREATEDEPTHSTENCILSTATE_INVALIDFRONTFACESTENCILFAILOP = 102;
export const D3D12_MESSAGE_ID_CREATEDEPTHSTENCILSTATE_INVALIDFRONTFACESTENCILZFAILOP = 103;
export const D3D12_MESSAGE_ID_CREATEDEPTHSTENCILSTATE_INVALIDFRONTFACESTENCILPASSOP = 104;
export const D3D12_MESSAGE_ID_CREATEDEPTHSTENCILSTATE_INVALIDFRONTFACESTENCILFUNC = 105;
export const D3D12_MESSAGE_ID_CREATEDEPTHSTENCILSTATE_INVALIDBACKFACESTENCILFAILOP = 106;
export const D3D12_MESSAGE_ID_CREATEDEPTHSTENCILSTATE_INVALIDBACKFACESTENCILZFAILOP = 107;
export const D3D12_MESSAGE_ID_CREATEDEPTHSTENCILSTATE_INVALIDBACKFACESTENCILPASSOP = 108;
export const D3D12_MESSAGE_ID_CREATEDEPTHSTENCILSTATE_INVALIDBACKFACESTENCILFUNC = 109;
export const D3D12_MESSAGE_ID_CREATEBLENDSTATE_INVALIDSRCBLEND = 111;
export const D3D12_MESSAGE_ID_CREATEBLENDSTATE_INVALIDDESTBLEND = 112;
export const D3D12_MESSAGE_ID_CREATEBLENDSTATE_INVALIDBLENDOP = 113;
export const D3D12_MESSAGE_ID_CREATEBLENDSTATE_INVALIDSRCBLENDALPHA = 114;
export const D3D12_MESSAGE_ID_CREATEBLENDSTATE_INVALIDDESTBLENDALPHA = 115;
export const D3D12_MESSAGE_ID_CREATEBLENDSTATE_INVALIDBLENDOPALPHA = 116;
export const D3D12_MESSAGE_ID_CREATEBLENDSTATE_INVALIDRENDERTARGETWRITEMASK = 117;
export const D3D12_MESSAGE_ID_CLEARDEPTHSTENCILVIEW_INVALID = 135;
export const D3D12_MESSAGE_ID_COMMAND_LIST_DRAW_ROOT_SIGNATURE_NOT_SET = 200;
export const D3D12_MESSAGE_ID_COMMAND_LIST_DRAW_ROOT_SIGNATURE_MISMATCH = 201;
export const D3D12_MESSAGE_ID_COMMAND_LIST_DRAW_VERTEX_BUFFER_NOT_SET = 202;
export const D3D12_MESSAGE_ID_COMMAND_LIST_DRAW_VERTEX_BUFFER_STRIDE_TOO_SMALL = 209;
export const D3D12_MESSAGE_ID_COMMAND_LIST_DRAW_VERTEX_BUFFER_TOO_SMALL = 210;
export const D3D12_MESSAGE_ID_COMMAND_LIST_DRAW_INDEX_BUFFER_NOT_SET = 211;
export const D3D12_MESSAGE_ID_COMMAND_LIST_DRAW_INDEX_BUFFER_FORMAT_INVALID = 212;
export const D3D12_MESSAGE_ID_COMMAND_LIST_DRAW_INDEX_BUFFER_TOO_SMALL = 213;
export const D3D12_MESSAGE_ID_COMMAND_LIST_DRAW_INVALID_PRIMITIVETOPOLOGY = 219;
export const D3D12_MESSAGE_ID_COMMAND_LIST_DRAW_VERTEX_STRIDE_UNALIGNED = 221;
export const D3D12_MESSAGE_ID_COMMAND_LIST_DRAW_INDEX_OFFSET_UNALIGNED = 222;
export const D3D12_MESSAGE_ID_DEVICE_REMOVAL_PROCESS_AT_FAULT = 232;
export const D3D12_MESSAGE_ID_DEVICE_REMOVAL_PROCESS_POSSIBLY_AT_FAULT = 233;
export const D3D12_MESSAGE_ID_DEVICE_REMOVAL_PROCESS_NOT_AT_FAULT = 234;
export const D3D12_MESSAGE_ID_CREATEINPUTLAYOUT_TRAILING_DIGIT_IN_SEMANTIC = 239;
export const D3D12_MESSAGE_ID_CREATEGEOMETRYSHADERWITHSTREAMOUTPUT_TRAILING_DIGIT_IN_SEMANTIC = 240;
export const D3D12_MESSAGE_ID_CREATEINPUTLAYOUT_TYPE_MISMATCH = 245;
export const D3D12_MESSAGE_ID_CREATEINPUTLAYOUT_EMPTY_LAYOUT = 253;
export const D3D12_MESSAGE_ID_LIVE_OBJECT_SUMMARY = 255;
export const D3D12_MESSAGE_ID_LIVE_DEVICE = 274;
export const D3D12_MESSAGE_ID_LIVE_SWAPCHAIN = 275;
export const D3D12_MESSAGE_ID_CREATEDEPTHSTENCILVIEW_INVALIDFLAGS = 276;
export const D3D12_MESSAGE_ID_CREATEVERTEXSHADER_INVALIDCLASSLINKAGE = 277;
export const D3D12_MESSAGE_ID_CREATEGEOMETRYSHADER_INVALIDCLASSLINKAGE = 278;
export const D3D12_MESSAGE_ID_CREATEGEOMETRYSHADERWITHSTREAMOUTPUT_INVALIDSTREAMTORASTERIZER = 280;
export const D3D12_MESSAGE_ID_CREATEPIXELSHADER_INVALIDCLASSLINKAGE = 283;
export const D3D12_MESSAGE_ID_CREATEGEOMETRYSHADERWITHSTREAMOUTPUT_INVALIDSTREAM = 284;
export const D3D12_MESSAGE_ID_CREATEGEOMETRYSHADERWITHSTREAMOUTPUT_UNEXPECTEDENTRIES = 285;
export const D3D12_MESSAGE_ID_CREATEGEOMETRYSHADERWITHSTREAMOUTPUT_UNEXPECTEDSTRIDES = 286;
export const D3D12_MESSAGE_ID_CREATEGEOMETRYSHADERWITHSTREAMOUTPUT_INVALIDNUMSTRIDES = 287;
export const D3D12_MESSAGE_ID_CREATEHULLSHADER_OUTOFMEMORY = 289;
export const D3D12_MESSAGE_ID_CREATEHULLSHADER_INVALIDSHADERBYTECODE = 290;
export const D3D12_MESSAGE_ID_CREATEHULLSHADER_INVALIDSHADERTYPE = 291;
export const D3D12_MESSAGE_ID_CREATEHULLSHADER_INVALIDCLASSLINKAGE = 292;
export const D3D12_MESSAGE_ID_CREATEDOMAINSHADER_OUTOFMEMORY = 294;
export const D3D12_MESSAGE_ID_CREATEDOMAINSHADER_INVALIDSHADERBYTECODE = 295;
export const D3D12_MESSAGE_ID_CREATEDOMAINSHADER_INVALIDSHADERTYPE = 296;
export const D3D12_MESSAGE_ID_CREATEDOMAINSHADER_INVALIDCLASSLINKAGE = 297;
export const D3D12_MESSAGE_ID_RESOURCE_UNMAP_NOTMAPPED = 310;
export const D3D12_MESSAGE_ID_DEVICE_CHECKFEATURESUPPORT_MISMATCHED_DATA_SIZE = 318;
export const D3D12_MESSAGE_ID_CREATECOMPUTESHADER_OUTOFMEMORY = 321;
export const D3D12_MESSAGE_ID_CREATECOMPUTESHADER_INVALIDSHADERBYTECODE = 322;
export const D3D12_MESSAGE_ID_CREATECOMPUTESHADER_INVALIDCLASSLINKAGE = 323;
export const D3D12_MESSAGE_ID_DEVICE_CREATEVERTEXSHADER_DOUBLEFLOATOPSNOTSUPPORTED = 331;
export const D3D12_MESSAGE_ID_DEVICE_CREATEHULLSHADER_DOUBLEFLOATOPSNOTSUPPORTED = 332;
export const D3D12_MESSAGE_ID_DEVICE_CREATEDOMAINSHADER_DOUBLEFLOATOPSNOTSUPPORTED = 333;
export const D3D12_MESSAGE_ID_DEVICE_CREATEGEOMETRYSHADER_DOUBLEFLOATOPSNOTSUPPORTED = 334;
export const D3D12_MESSAGE_ID_DEVICE_CREATEGEOMETRYSHADERWITHSTREAMOUTPUT_DOUBLEFLOATOPSNOTSUPPORTED = 335;
export const D3D12_MESSAGE_ID_DEVICE_CREATEPIXELSHADER_DOUBLEFLOATOPSNOTSUPPORTED = 336;
export const D3D12_MESSAGE_ID_DEVICE_CREATECOMPUTESHADER_DOUBLEFLOATOPSNOTSUPPORTED = 337;
export const D3D12_MESSAGE_ID_CREATEUNORDEREDACCESSVIEW_INVALIDRESOURCE = 340;
export const D3D12_MESSAGE_ID_CREATEUNORDEREDACCESSVIEW_INVALIDDESC = 341;
export const D3D12_MESSAGE_ID_CREATEUNORDEREDACCESSVIEW_INVALIDFORMAT = 342;
export const D3D12_MESSAGE_ID_CREATEUNORDEREDACCESSVIEW_INVALIDVIDEOPLANESLICE = 343;
export const D3D12_MESSAGE_ID_CREATEUNORDEREDACCESSVIEW_INVALIDPLANESLICE = 344;
export const D3D12_MESSAGE_ID_CREATEUNORDEREDACCESSVIEW_INVALIDDIMENSIONS = 345;
export const D3D12_MESSAGE_ID_CREATEUNORDEREDACCESSVIEW_UNRECOGNIZEDFORMAT = 346;
export const D3D12_MESSAGE_ID_CREATEUNORDEREDACCESSVIEW_INVALIDFLAGS = 354;
export const D3D12_MESSAGE_ID_CREATERASTERIZERSTATE_INVALIDFORCEDSAMPLECOUNT = 401;
export const D3D12_MESSAGE_ID_CREATEBLENDSTATE_INVALIDLOGICOPS = 403;
export const D3D12_MESSAGE_ID_DEVICE_CREATEVERTEXSHADER_DOUBLEEXTENSIONSNOTSUPPORTED = 410;
export const D3D12_MESSAGE_ID_DEVICE_CREATEHULLSHADER_DOUBLEEXTENSIONSNOTSUPPORTED = 412;
export const D3D12_MESSAGE_ID_DEVICE_CREATEDOMAINSHADER_DOUBLEEXTENSIONSNOTSUPPORTED = 414;
export const D3D12_MESSAGE_ID_DEVICE_CREATEGEOMETRYSHADER_DOUBLEEXTENSIONSNOTSUPPORTED = 416;
export const D3D12_MESSAGE_ID_DEVICE_CREATEGEOMETRYSHADERWITHSTREAMOUTPUT_DOUBLEEXTENSIONSNOTSUPPORTED = 418;
export const D3D12_MESSAGE_ID_DEVICE_CREATEPIXELSHADER_DOUBLEEXTENSIONSNOTSUPPORTED = 420;
export const D3D12_MESSAGE_ID_DEVICE_CREATECOMPUTESHADER_DOUBLEEXTENSIONSNOTSUPPORTED = 422;
export const D3D12_MESSAGE_ID_DEVICE_CREATEVERTEXSHADER_UAVSNOTSUPPORTED = 425;
export const D3D12_MESSAGE_ID_DEVICE_CREATEHULLSHADER_UAVSNOTSUPPORTED = 426;
export const D3D12_MESSAGE_ID_DEVICE_CREATEDOMAINSHADER_UAVSNOTSUPPORTED = 427;
export const D3D12_MESSAGE_ID_DEVICE_CREATEGEOMETRYSHADER_UAVSNOTSUPPORTED = 428;
export const D3D12_MESSAGE_ID_DEVICE_CREATEGEOMETRYSHADERWITHSTREAMOUTPUT_UAVSNOTSUPPORTED = 429;
export const D3D12_MESSAGE_ID_DEVICE_CREATEPIXELSHADER_UAVSNOTSUPPORTED = 430;
export const D3D12_MESSAGE_ID_DEVICE_CREATECOMPUTESHADER_UAVSNOTSUPPORTED = 431;
export const D3D12_MESSAGE_ID_DEVICE_CLEARVIEW_INVALIDSOURCERECT = 447;
export const D3D12_MESSAGE_ID_DEVICE_CLEARVIEW_EMPTYRECT = 448;
export const D3D12_MESSAGE_ID_UPDATETILEMAPPINGS_INVALID_PARAMETER = 493;
export const D3D12_MESSAGE_ID_COPYTILEMAPPINGS_INVALID_PARAMETER = 494;
export const D3D12_MESSAGE_ID_CREATEDEVICE_INVALIDARGS = 506;
export const D3D12_MESSAGE_ID_CREATEDEVICE_WARNING = 507;
export const D3D12_MESSAGE_ID_RESOURCE_BARRIER_INVALID_TYPE = 519;
export const D3D12_MESSAGE_ID_RESOURCE_BARRIER_NULL_POINTER = 520;
export const D3D12_MESSAGE_ID_RESOURCE_BARRIER_INVALID_SUBRESOURCE = 521;
export const D3D12_MESSAGE_ID_RESOURCE_BARRIER_RESERVED_BITS = 522;
export const D3D12_MESSAGE_ID_RESOURCE_BARRIER_MISSING_BIND_FLAGS = 523;
export const D3D12_MESSAGE_ID_RESOURCE_BARRIER_MISMATCHING_MISC_FLAGS = 524;
export const D3D12_MESSAGE_ID_RESOURCE_BARRIER_MATCHING_STATES = 525;
export const D3D12_MESSAGE_ID_RESOURCE_BARRIER_INVALID_COMBINATION = 526;
export const D3D12_MESSAGE_ID_RESOURCE_BARRIER_BEFORE_AFTER_MISMATCH = 527;
export const D3D12_MESSAGE_ID_RESOURCE_BARRIER_INVALID_RESOURCE = 528;
export const D3D12_MESSAGE_ID_RESOURCE_BARRIER_SAMPLE_COUNT = 529;
export const D3D12_MESSAGE_ID_RESOURCE_BARRIER_INVALID_FLAGS = 530;
export const D3D12_MESSAGE_ID_RESOURCE_BARRIER_INVALID_COMBINED_FLAGS = 531;
export const D3D12_MESSAGE_ID_RESOURCE_BARRIER_INVALID_FLAGS_FOR_FORMAT = 532;
export const D3D12_MESSAGE_ID_RESOURCE_BARRIER_INVALID_SPLIT_BARRIER = 533;
export const D3D12_MESSAGE_ID_RESOURCE_BARRIER_UNMATCHED_END = 534;
export const D3D12_MESSAGE_ID_RESOURCE_BARRIER_UNMATCHED_BEGIN = 535;
export const D3D12_MESSAGE_ID_RESOURCE_BARRIER_INVALID_FLAG = 536;
export const D3D12_MESSAGE_ID_RESOURCE_BARRIER_INVALID_COMMAND_LIST_TYPE = 537;
export const D3D12_MESSAGE_ID_INVALID_SUBRESOURCE_STATE = 538;
export const D3D12_MESSAGE_ID_COMMAND_ALLOCATOR_CONTENTION = 540;
export const D3D12_MESSAGE_ID_COMMAND_ALLOCATOR_RESET = 541;
export const D3D12_MESSAGE_ID_COMMAND_ALLOCATOR_RESET_BUNDLE = 542;
export const D3D12_MESSAGE_ID_COMMAND_ALLOCATOR_CANNOT_RESET = 543;
export const D3D12_MESSAGE_ID_COMMAND_LIST_OPEN = 544;
export const D3D12_MESSAGE_ID_INVALID_BUNDLE_API = 546;
export const D3D12_MESSAGE_ID_COMMAND_LIST_CLOSED = 547;
export const D3D12_MESSAGE_ID_WRONG_COMMAND_ALLOCATOR_TYPE = 549;
export const D3D12_MESSAGE_ID_COMMAND_ALLOCATOR_SYNC = 552;
export const D3D12_MESSAGE_ID_COMMAND_LIST_SYNC = 553;
export const D3D12_MESSAGE_ID_SET_DESCRIPTOR_HEAP_INVALID = 554;
export const D3D12_MESSAGE_ID_CREATE_COMMANDQUEUE = 557;
export const D3D12_MESSAGE_ID_CREATE_COMMANDALLOCATOR = 558;
export const D3D12_MESSAGE_ID_CREATE_PIPELINESTATE = 559;
export const D3D12_MESSAGE_ID_CREATE_COMMANDLIST12 = 560;
export const D3D12_MESSAGE_ID_CREATE_RESOURCE = 562;
export const D3D12_MESSAGE_ID_CREATE_DESCRIPTORHEAP = 563;
export const D3D12_MESSAGE_ID_CREATE_ROOTSIGNATURE = 564;
export const D3D12_MESSAGE_ID_CREATE_LIBRARY = 565;
export const D3D12_MESSAGE_ID_CREATE_HEAP = 566;
export const D3D12_MESSAGE_ID_CREATE_MONITOREDFENCE = 567;
export const D3D12_MESSAGE_ID_CREATE_QUERYHEAP = 568;
export const D3D12_MESSAGE_ID_CREATE_COMMANDSIGNATURE = 569;
export const D3D12_MESSAGE_ID_LIVE_COMMANDQUEUE = 570;
export const D3D12_MESSAGE_ID_LIVE_COMMANDALLOCATOR = 571;
export const D3D12_MESSAGE_ID_LIVE_PIPELINESTATE = 572;
export const D3D12_MESSAGE_ID_LIVE_COMMANDLIST12 = 573;
export const D3D12_MESSAGE_ID_LIVE_RESOURCE = 575;
export const D3D12_MESSAGE_ID_LIVE_DESCRIPTORHEAP = 576;
export const D3D12_MESSAGE_ID_LIVE_ROOTSIGNATURE = 577;
export const D3D12_MESSAGE_ID_LIVE_LIBRARY = 578;
export const D3D12_MESSAGE_ID_LIVE_HEAP = 579;
export const D3D12_MESSAGE_ID_LIVE_MONITOREDFENCE = 580;
export const D3D12_MESSAGE_ID_LIVE_QUERYHEAP = 581;
export const D3D12_MESSAGE_ID_LIVE_COMMANDSIGNATURE = 582;
export const D3D12_MESSAGE_ID_DESTROY_COMMANDQUEUE = 583;
export const D3D12_MESSAGE_ID_DESTROY_COMMANDALLOCATOR = 584;
export const D3D12_MESSAGE_ID_DESTROY_PIPELINESTATE = 585;
export const D3D12_MESSAGE_ID_DESTROY_COMMANDLIST12 = 586;
export const D3D12_MESSAGE_ID_DESTROY_RESOURCE = 588;
export const D3D12_MESSAGE_ID_DESTROY_DESCRIPTORHEAP = 589;
export const D3D12_MESSAGE_ID_DESTROY_ROOTSIGNATURE = 590;
export const D3D12_MESSAGE_ID_DESTROY_LIBRARY = 591;
export const D3D12_MESSAGE_ID_DESTROY_HEAP = 592;
export const D3D12_MESSAGE_ID_DESTROY_MONITOREDFENCE = 593;
export const D3D12_MESSAGE_ID_DESTROY_QUERYHEAP = 594;
export const D3D12_MESSAGE_ID_DESTROY_COMMANDSIGNATURE = 595;
export const D3D12_MESSAGE_ID_CREATERESOURCE_INVALIDDIMENSIONS = 597;
export const D3D12_MESSAGE_ID_CREATERESOURCE_INVALIDMISCFLAGS = 599;
export const D3D12_MESSAGE_ID_CREATERESOURCE_INVALIDARG_RETURN = 602;
export const D3D12_MESSAGE_ID_CREATERESOURCE_OUTOFMEMORY_RETURN = 603;
export const D3D12_MESSAGE_ID_CREATERESOURCE_INVALIDDESC = 604;
export const D3D12_MESSAGE_ID_POSSIBLY_INVALID_SUBRESOURCE_STATE = 607;
export const D3D12_MESSAGE_ID_INVALID_USE_OF_NON_RESIDENT_RESOURCE = 608;
export const D3D12_MESSAGE_ID_POSSIBLE_INVALID_USE_OF_NON_RESIDENT_RESOURCE = 609;
export const D3D12_MESSAGE_ID_BUNDLE_PIPELINE_STATE_MISMATCH = 610;
export const D3D12_MESSAGE_ID_PRIMITIVE_TOPOLOGY_MISMATCH_PIPELINE_STATE = 611;
export const D3D12_MESSAGE_ID_RENDER_TARGET_FORMAT_MISMATCH_PIPELINE_STATE = 613;
export const D3D12_MESSAGE_ID_RENDER_TARGET_SAMPLE_DESC_MISMATCH_PIPELINE_STATE = 614;
export const D3D12_MESSAGE_ID_DEPTH_STENCIL_FORMAT_MISMATCH_PIPELINE_STATE = 615;
export const D3D12_MESSAGE_ID_DEPTH_STENCIL_SAMPLE_DESC_MISMATCH_PIPELINE_STATE = 616;
export const D3D12_MESSAGE_ID_CREATESHADER_INVALIDBYTECODE = 622;
export const D3D12_MESSAGE_ID_CREATEHEAP_NULLDESC = 623;
export const D3D12_MESSAGE_ID_CREATEHEAP_INVALIDSIZE = 624;
export const D3D12_MESSAGE_ID_CREATEHEAP_UNRECOGNIZEDHEAPTYPE = 625;
export const D3D12_MESSAGE_ID_CREATEHEAP_UNRECOGNIZEDCPUPAGEPROPERTIES = 626;
export const D3D12_MESSAGE_ID_CREATEHEAP_UNRECOGNIZEDMEMORYPOOL = 627;
export const D3D12_MESSAGE_ID_CREATEHEAP_INVALIDPROPERTIES = 628;
export const D3D12_MESSAGE_ID_CREATEHEAP_INVALIDALIGNMENT = 629;
export const D3D12_MESSAGE_ID_CREATEHEAP_UNRECOGNIZEDMISCFLAGS = 630;
export const D3D12_MESSAGE_ID_CREATEHEAP_INVALIDMISCFLAGS = 631;
export const D3D12_MESSAGE_ID_CREATEHEAP_INVALIDARG_RETURN = 632;
export const D3D12_MESSAGE_ID_CREATEHEAP_OUTOFMEMORY_RETURN = 633;
export const D3D12_MESSAGE_ID_CREATERESOURCEANDHEAP_NULLHEAPPROPERTIES = 634;
export const D3D12_MESSAGE_ID_CREATERESOURCEANDHEAP_UNRECOGNIZEDHEAPTYPE = 635;
export const D3D12_MESSAGE_ID_CREATERESOURCEANDHEAP_UNRECOGNIZEDCPUPAGEPROPERTIES = 636;
export const D3D12_MESSAGE_ID_CREATERESOURCEANDHEAP_UNRECOGNIZEDMEMORYPOOL = 637;
export const D3D12_MESSAGE_ID_CREATERESOURCEANDHEAP_INVALIDHEAPPROPERTIES = 638;
export const D3D12_MESSAGE_ID_CREATERESOURCEANDHEAP_UNRECOGNIZEDHEAPMISCFLAGS = 639;
export const D3D12_MESSAGE_ID_CREATERESOURCEANDHEAP_INVALIDHEAPMISCFLAGS = 640;
export const D3D12_MESSAGE_ID_CREATERESOURCEANDHEAP_INVALIDARG_RETURN = 641;
export const D3D12_MESSAGE_ID_CREATERESOURCEANDHEAP_OUTOFMEMORY_RETURN = 642;
export const D3D12_MESSAGE_ID_GETCUSTOMHEAPPROPERTIES_UNRECOGNIZEDHEAPTYPE = 643;
export const D3D12_MESSAGE_ID_GETCUSTOMHEAPPROPERTIES_INVALIDHEAPTYPE = 644;
export const D3D12_MESSAGE_ID_CREATE_DESCRIPTOR_HEAP_INVALID_DESC = 645;
export const D3D12_MESSAGE_ID_INVALID_DESCRIPTOR_HANDLE = 646;
export const D3D12_MESSAGE_ID_CREATERASTERIZERSTATE_INVALID_CONSERVATIVERASTERMODE = 647;
export const D3D12_MESSAGE_ID_CREATE_CONSTANT_BUFFER_VIEW_INVALID_RESOURCE = 649;
export const D3D12_MESSAGE_ID_CREATE_CONSTANT_BUFFER_VIEW_INVALID_DESC = 650;
export const D3D12_MESSAGE_ID_CREATE_UNORDEREDACCESS_VIEW_INVALID_COUNTER_USAGE = 652;
export const D3D12_MESSAGE_ID_COPY_DESCRIPTORS_INVALID_RANGES = 653;
export const D3D12_MESSAGE_ID_COPY_DESCRIPTORS_WRITE_ONLY_DESCRIPTOR = 654;
export const D3D12_MESSAGE_ID_CREATEGRAPHICSPIPELINESTATE_RTV_FORMAT_NOT_UNKNOWN = 655;
export const D3D12_MESSAGE_ID_CREATEGRAPHICSPIPELINESTATE_INVALID_RENDER_TARGET_COUNT = 656;
export const D3D12_MESSAGE_ID_CREATEGRAPHICSPIPELINESTATE_VERTEX_SHADER_NOT_SET = 657;
export const D3D12_MESSAGE_ID_CREATEGRAPHICSPIPELINESTATE_INPUTLAYOUT_NOT_SET = 658;
export const D3D12_MESSAGE_ID_CREATEGRAPHICSPIPELINESTATE_SHADER_LINKAGE_HS_DS_SIGNATURE_MISMATCH = 659;
export const D3D12_MESSAGE_ID_CREATEGRAPHICSPIPELINESTATE_SHADER_LINKAGE_REGISTERINDEX = 660;
export const D3D12_MESSAGE_ID_CREATEGRAPHICSPIPELINESTATE_SHADER_LINKAGE_COMPONENTTYPE = 661;
export const D3D12_MESSAGE_ID_CREATEGRAPHICSPIPELINESTATE_SHADER_LINKAGE_REGISTERMASK = 662;
export const D3D12_MESSAGE_ID_CREATEGRAPHICSPIPELINESTATE_SHADER_LINKAGE_SYSTEMVALUE = 663;
export const D3D12_MESSAGE_ID_CREATEGRAPHICSPIPELINESTATE_SHADER_LINKAGE_NEVERWRITTEN_ALWAYSREADS = 664;
export const D3D12_MESSAGE_ID_CREATEGRAPHICSPIPELINESTATE_SHADER_LINKAGE_MINPRECISION = 665;
export const D3D12_MESSAGE_ID_CREATEGRAPHICSPIPELINESTATE_SHADER_LINKAGE_SEMANTICNAME_NOT_FOUND = 666;
export const D3D12_MESSAGE_ID_CREATEGRAPHICSPIPELINESTATE_HS_XOR_DS_MISMATCH = 667;
export const D3D12_MESSAGE_ID_CREATEGRAPHICSPIPELINESTATE_HULL_SHADER_INPUT_TOPOLOGY_MISMATCH = 668;
export const D3D12_MESSAGE_ID_CREATEGRAPHICSPIPELINESTATE_HS_DS_CONTROL_POINT_COUNT_MISMATCH = 669;
export const D3D12_MESSAGE_ID_CREATEGRAPHICSPIPELINESTATE_HS_DS_TESSELLATOR_DOMAIN_MISMATCH = 670;
export const D3D12_MESSAGE_ID_CREATEGRAPHICSPIPELINESTATE_INVALID_USE_OF_CENTER_MULTISAMPLE_PATTERN = 671;
export const D3D12_MESSAGE_ID_CREATEGRAPHICSPIPELINESTATE_INVALID_USE_OF_FORCED_SAMPLE_COUNT = 672;
export const D3D12_MESSAGE_ID_CREATEGRAPHICSPIPELINESTATE_INVALID_PRIMITIVETOPOLOGY = 673;
export const D3D12_MESSAGE_ID_CREATEGRAPHICSPIPELINESTATE_INVALID_SYSTEMVALUE = 674;
export const D3D12_MESSAGE_ID_CREATEGRAPHICSPIPELINESTATE_OM_DUAL_SOURCE_BLENDING_CAN_ONLY_HAVE_RENDER_TARGET_0 = 675;
export const D3D12_MESSAGE_ID_CREATEGRAPHICSPIPELINESTATE_OM_RENDER_TARGET_DOES_NOT_SUPPORT_BLENDING = 676;
export const D3D12_MESSAGE_ID_CREATEGRAPHICSPIPELINESTATE_PS_OUTPUT_TYPE_MISMATCH = 677;
export const D3D12_MESSAGE_ID_CREATEGRAPHICSPIPELINESTATE_OM_RENDER_TARGET_DOES_NOT_SUPPORT_LOGIC_OPS = 678;
export const D3D12_MESSAGE_ID_CREATEGRAPHICSPIPELINESTATE_RENDERTARGETVIEW_NOT_SET = 679;
export const D3D12_MESSAGE_ID_CREATEGRAPHICSPIPELINESTATE_DEPTHSTENCILVIEW_NOT_SET = 680;
export const D3D12_MESSAGE_ID_CREATEGRAPHICSPIPELINESTATE_GS_INPUT_PRIMITIVE_MISMATCH = 681;
export const D3D12_MESSAGE_ID_CREATEGRAPHICSPIPELINESTATE_POSITION_NOT_PRESENT = 682;
export const D3D12_MESSAGE_ID_CREATEGRAPHICSPIPELINESTATE_MISSING_ROOT_SIGNATURE_FLAGS = 683;
export const D3D12_MESSAGE_ID_CREATEGRAPHICSPIPELINESTATE_INVALID_INDEX_BUFFER_PROPERTIES = 684;
export const D3D12_MESSAGE_ID_CREATEGRAPHICSPIPELINESTATE_INVALID_SAMPLE_DESC = 685;
export const D3D12_MESSAGE_ID_CREATEGRAPHICSPIPELINESTATE_HS_ROOT_SIGNATURE_MISMATCH = 686;
export const D3D12_MESSAGE_ID_CREATEGRAPHICSPIPELINESTATE_DS_ROOT_SIGNATURE_MISMATCH = 687;
export const D3D12_MESSAGE_ID_CREATEGRAPHICSPIPELINESTATE_VS_ROOT_SIGNATURE_MISMATCH = 688;
export const D3D12_MESSAGE_ID_CREATEGRAPHICSPIPELINESTATE_GS_ROOT_SIGNATURE_MISMATCH = 689;
export const D3D12_MESSAGE_ID_CREATEGRAPHICSPIPELINESTATE_PS_ROOT_SIGNATURE_MISMATCH = 690;
export const D3D12_MESSAGE_ID_CREATEGRAPHICSPIPELINESTATE_MISSING_ROOT_SIGNATURE = 691;
export const D3D12_MESSAGE_ID_EXECUTE_BUNDLE_OPEN_BUNDLE = 692;
export const D3D12_MESSAGE_ID_EXECUTE_BUNDLE_DESCRIPTOR_HEAP_MISMATCH = 693;
export const D3D12_MESSAGE_ID_EXECUTE_BUNDLE_TYPE = 694;
export const D3D12_MESSAGE_ID_DRAW_EMPTY_SCISSOR_RECTANGLE = 695;
export const D3D12_MESSAGE_ID_CREATE_ROOT_SIGNATURE_BLOB_NOT_FOUND = 696;
export const D3D12_MESSAGE_ID_CREATE_ROOT_SIGNATURE_DESERIALIZE_FAILED = 697;
export const D3D12_MESSAGE_ID_CREATE_ROOT_SIGNATURE_INVALID_CONFIGURATION = 698;
export const D3D12_MESSAGE_ID_CREATE_ROOT_SIGNATURE_NOT_SUPPORTED_ON_DEVICE = 699;
export const D3D12_MESSAGE_ID_CREATERESOURCEANDHEAP_NULLRESOURCEPROPERTIES = 700;
export const D3D12_MESSAGE_ID_CREATERESOURCEANDHEAP_NULLHEAP = 701;
export const D3D12_MESSAGE_ID_GETRESOURCEALLOCATIONINFO_INVALIDRDESCS = 702;
export const D3D12_MESSAGE_ID_MAKERESIDENT_NULLOBJECTARRAY = 703;
export const D3D12_MESSAGE_ID_EVICT_NULLOBJECTARRAY = 705;
export const D3D12_MESSAGE_ID_SET_DESCRIPTOR_TABLE_INVALID = 708;
export const D3D12_MESSAGE_ID_SET_ROOT_CONSTANT_INVALID = 709;
export const D3D12_MESSAGE_ID_SET_ROOT_CONSTANT_BUFFER_VIEW_INVALID = 710;
export const D3D12_MESSAGE_ID_SET_ROOT_SHADER_RESOURCE_VIEW_INVALID = 711;
export const D3D12_MESSAGE_ID_SET_ROOT_UNORDERED_ACCESS_VIEW_INVALID = 712;
export const D3D12_MESSAGE_ID_SET_VERTEX_BUFFERS_INVALID_DESC = 713;
export const D3D12_MESSAGE_ID_SET_INDEX_BUFFER_INVALID_DESC = 715;
export const D3D12_MESSAGE_ID_SET_STREAM_OUTPUT_BUFFERS_INVALID_DESC = 717;
export const D3D12_MESSAGE_ID_CREATERESOURCE_UNRECOGNIZEDDIMENSIONALITY = 718;
export const D3D12_MESSAGE_ID_CREATERESOURCE_UNRECOGNIZEDLAYOUT = 719;
export const D3D12_MESSAGE_ID_CREATERESOURCE_INVALIDDIMENSIONALITY = 720;
export const D3D12_MESSAGE_ID_CREATERESOURCE_INVALIDALIGNMENT = 721;
export const D3D12_MESSAGE_ID_CREATERESOURCE_INVALIDMIPLEVELS = 722;
export const D3D12_MESSAGE_ID_CREATERESOURCE_INVALIDSAMPLEDESC = 723;
export const D3D12_MESSAGE_ID_CREATERESOURCE_INVALIDLAYOUT = 724;
export const D3D12_MESSAGE_ID_SET_INDEX_BUFFER_INVALID = 725;
export const D3D12_MESSAGE_ID_SET_VERTEX_BUFFERS_INVALID = 726;
export const D3D12_MESSAGE_ID_SET_STREAM_OUTPUT_BUFFERS_INVALID = 727;
export const D3D12_MESSAGE_ID_SET_RENDER_TARGETS_INVALID = 728;
export const D3D12_MESSAGE_ID_CREATEQUERY_HEAP_INVALID_PARAMETERS = 729;
export const D3D12_MESSAGE_ID_BEGIN_END_QUERY_INVALID_PARAMETERS = 731;
export const D3D12_MESSAGE_ID_CLOSE_COMMAND_LIST_OPEN_QUERY = 732;
export const D3D12_MESSAGE_ID_RESOLVE_QUERY_DATA_INVALID_PARAMETERS = 733;
export const D3D12_MESSAGE_ID_SET_PREDICATION_INVALID_PARAMETERS = 734;
export const D3D12_MESSAGE_ID_TIMESTAMPS_NOT_SUPPORTED = 735;
export const D3D12_MESSAGE_ID_CREATERESOURCE_UNRECOGNIZEDFORMAT = 737;
export const D3D12_MESSAGE_ID_CREATERESOURCE_INVALIDFORMAT = 738;
export const D3D12_MESSAGE_ID_GETCOPYABLEFOOTPRINTS_INVALIDSUBRESOURCERANGE = 739;
export const D3D12_MESSAGE_ID_GETCOPYABLEFOOTPRINTS_INVALIDBASEOFFSET = 740;
export const D3D12_MESSAGE_ID_GETCOPYABLELAYOUT_INVALIDSUBRESOURCERANGE = 739;
export const D3D12_MESSAGE_ID_GETCOPYABLELAYOUT_INVALIDBASEOFFSET = 740;
export const D3D12_MESSAGE_ID_RESOURCE_BARRIER_INVALID_HEAP = 741;
export const D3D12_MESSAGE_ID_CREATE_SAMPLER_INVALID = 742;
export const D3D12_MESSAGE_ID_CREATECOMMANDSIGNATURE_INVALID = 743;
export const D3D12_MESSAGE_ID_EXECUTE_INDIRECT_INVALID_PARAMETERS = 744;
export const D3D12_MESSAGE_ID_GETGPUVIRTUALADDRESS_INVALID_RESOURCE_DIMENSION = 745;
export const D3D12_MESSAGE_ID_CREATERESOURCE_INVALIDCLEARVALUE = 815;
export const D3D12_MESSAGE_ID_CREATERESOURCE_UNRECOGNIZEDCLEARVALUEFORMAT = 816;
export const D3D12_MESSAGE_ID_CREATERESOURCE_INVALIDCLEARVALUEFORMAT = 817;
export const D3D12_MESSAGE_ID_CREATERESOURCE_CLEARVALUEDENORMFLUSH = 818;
export const D3D12_MESSAGE_ID_CLEARRENDERTARGETVIEW_MISMATCHINGCLEARVALUE = 820;
export const D3D12_MESSAGE_ID_CLEARDEPTHSTENCILVIEW_MISMATCHINGCLEARVALUE = 821;
export const D3D12_MESSAGE_ID_MAP_INVALIDHEAP = 822;
export const D3D12_MESSAGE_ID_UNMAP_INVALIDHEAP = 823;
export const D3D12_MESSAGE_ID_MAP_INVALIDRESOURCE = 824;
export const D3D12_MESSAGE_ID_UNMAP_INVALIDRESOURCE = 825;
export const D3D12_MESSAGE_ID_MAP_INVALIDSUBRESOURCE = 826;
export const D3D12_MESSAGE_ID_UNMAP_INVALIDSUBRESOURCE = 827;
export const D3D12_MESSAGE_ID_MAP_INVALIDRANGE = 828;
export const D3D12_MESSAGE_ID_UNMAP_INVALIDRANGE = 829;
export const D3D12_MESSAGE_ID_MAP_INVALIDDATAPOINTER = 832;
export const D3D12_MESSAGE_ID_MAP_INVALIDARG_RETURN = 833;
export const D3D12_MESSAGE_ID_MAP_OUTOFMEMORY_RETURN = 834;
export const D3D12_MESSAGE_ID_EXECUTECOMMANDLISTS_BUNDLENOTSUPPORTED = 835;
export const D3D12_MESSAGE_ID_EXECUTECOMMANDLISTS_COMMANDLISTMISMATCH = 836;
export const D3D12_MESSAGE_ID_EXECUTECOMMANDLISTS_OPENCOMMANDLIST = 837;
export const D3D12_MESSAGE_ID_EXECUTECOMMANDLISTS_FAILEDCOMMANDLIST = 838;
export const D3D12_MESSAGE_ID_COPYBUFFERREGION_NULLDST = 839;
export const D3D12_MESSAGE_ID_COPYBUFFERREGION_INVALIDDSTRESOURCEDIMENSION = 840;
export const D3D12_MESSAGE_ID_COPYBUFFERREGION_DSTRANGEOUTOFBOUNDS = 841;
export const D3D12_MESSAGE_ID_COPYBUFFERREGION_NULLSRC = 842;
export const D3D12_MESSAGE_ID_COPYBUFFERREGION_INVALIDSRCRESOURCEDIMENSION = 843;
export const D3D12_MESSAGE_ID_COPYBUFFERREGION_SRCRANGEOUTOFBOUNDS = 844;
export const D3D12_MESSAGE_ID_COPYBUFFERREGION_INVALIDCOPYFLAGS = 845;
export const D3D12_MESSAGE_ID_COPYTEXTUREREGION_NULLDST = 846;
export const D3D12_MESSAGE_ID_COPYTEXTUREREGION_UNRECOGNIZEDDSTTYPE = 847;
export const D3D12_MESSAGE_ID_COPYTEXTUREREGION_INVALIDDSTRESOURCEDIMENSION = 848;
export const D3D12_MESSAGE_ID_COPYTEXTUREREGION_INVALIDDSTRESOURCE = 849;
export const D3D12_MESSAGE_ID_COPYTEXTUREREGION_INVALIDDSTSUBRESOURCE = 850;
export const D3D12_MESSAGE_ID_COPYTEXTUREREGION_INVALIDDSTOFFSET = 851;
export const D3D12_MESSAGE_ID_COPYTEXTUREREGION_UNRECOGNIZEDDSTFORMAT = 852;
export const D3D12_MESSAGE_ID_COPYTEXTUREREGION_INVALIDDSTFORMAT = 853;
export const D3D12_MESSAGE_ID_COPYTEXTUREREGION_INVALIDDSTDIMENSIONS = 854;
export const D3D12_MESSAGE_ID_COPYTEXTUREREGION_INVALIDDSTROWPITCH = 855;
export const D3D12_MESSAGE_ID_COPYTEXTUREREGION_INVALIDDSTPLACEMENT = 856;
export const D3D12_MESSAGE_ID_COPYTEXTUREREGION_INVALIDDSTDSPLACEDFOOTPRINTFORMAT = 857;
export const D3D12_MESSAGE_ID_COPYTEXTUREREGION_DSTREGIONOUTOFBOUNDS = 858;
export const D3D12_MESSAGE_ID_COPYTEXTUREREGION_NULLSRC = 859;
export const D3D12_MESSAGE_ID_COPYTEXTUREREGION_UNRECOGNIZEDSRCTYPE = 860;
export const D3D12_MESSAGE_ID_COPYTEXTUREREGION_INVALIDSRCRESOURCEDIMENSION = 861;
export const D3D12_MESSAGE_ID_COPYTEXTUREREGION_INVALIDSRCRESOURCE = 862;
export const D3D12_MESSAGE_ID_COPYTEXTUREREGION_INVALIDSRCSUBRESOURCE = 863;
export const D3D12_MESSAGE_ID_COPYTEXTUREREGION_INVALIDSRCOFFSET = 864;
export const D3D12_MESSAGE_ID_COPYTEXTUREREGION_UNRECOGNIZEDSRCFORMAT = 865;
export const D3D12_MESSAGE_ID_COPYTEXTUREREGION_INVALIDSRCFORMAT = 866;
export const D3D12_MESSAGE_ID_COPYTEXTUREREGION_INVALIDSRCDIMENSIONS = 867;
export const D3D12_MESSAGE_ID_COPYTEXTUREREGION_INVALIDSRCROWPITCH = 868;
export const D3D12_MESSAGE_ID_COPYTEXTUREREGION_INVALIDSRCPLACEMENT = 869;
export const D3D12_MESSAGE_ID_COPYTEXTUREREGION_INVALIDSRCDSPLACEDFOOTPRINTFORMAT = 870;
export const D3D12_MESSAGE_ID_COPYTEXTUREREGION_SRCREGIONOUTOFBOUNDS = 871;
export const D3D12_MESSAGE_ID_COPYTEXTUREREGION_INVALIDDSTCOORDINATES = 872;
export const D3D12_MESSAGE_ID_COPYTEXTUREREGION_INVALIDSRCBOX = 873;
export const D3D12_MESSAGE_ID_COPYTEXTUREREGION_FORMATMISMATCH = 874;
export const D3D12_MESSAGE_ID_COPYTEXTUREREGION_EMPTYBOX = 875;
export const D3D12_MESSAGE_ID_COPYTEXTUREREGION_INVALIDCOPYFLAGS = 876;
export const D3D12_MESSAGE_ID_RESOLVESUBRESOURCE_INVALID_SUBRESOURCE_INDEX = 877;
export const D3D12_MESSAGE_ID_RESOLVESUBRESOURCE_INVALID_FORMAT = 878;
export const D3D12_MESSAGE_ID_RESOLVESUBRESOURCE_RESOURCE_MISMATCH = 879;
export const D3D12_MESSAGE_ID_RESOLVESUBRESOURCE_INVALID_SAMPLE_COUNT = 880;
export const D3D12_MESSAGE_ID_CREATECOMPUTEPIPELINESTATE_INVALID_SHADER = 881;
export const D3D12_MESSAGE_ID_CREATECOMPUTEPIPELINESTATE_CS_ROOT_SIGNATURE_MISMATCH = 882;
export const D3D12_MESSAGE_ID_CREATECOMPUTEPIPELINESTATE_MISSING_ROOT_SIGNATURE = 883;
export const D3D12_MESSAGE_ID_CREATEPIPELINESTATE_INVALIDCACHEDBLOB = 884;
export const D3D12_MESSAGE_ID_CREATEPIPELINESTATE_CACHEDBLOBADAPTERMISMATCH = 885;
export const D3D12_MESSAGE_ID_CREATEPIPELINESTATE_CACHEDBLOBDRIVERVERSIONMISMATCH = 886;
export const D3D12_MESSAGE_ID_CREATEPIPELINESTATE_CACHEDBLOBDESCMISMATCH = 887;
export const D3D12_MESSAGE_ID_CREATEPIPELINESTATE_CACHEDBLOBIGNORED = 888;
export const D3D12_MESSAGE_ID_WRITETOSUBRESOURCE_INVALIDHEAP = 889;
export const D3D12_MESSAGE_ID_WRITETOSUBRESOURCE_INVALIDRESOURCE = 890;
export const D3D12_MESSAGE_ID_WRITETOSUBRESOURCE_INVALIDBOX = 891;
export const D3D12_MESSAGE_ID_WRITETOSUBRESOURCE_INVALIDSUBRESOURCE = 892;
export const D3D12_MESSAGE_ID_WRITETOSUBRESOURCE_EMPTYBOX = 893;
export const D3D12_MESSAGE_ID_READFROMSUBRESOURCE_INVALIDHEAP = 894;
export const D3D12_MESSAGE_ID_READFROMSUBRESOURCE_INVALIDRESOURCE = 895;
export const D3D12_MESSAGE_ID_READFROMSUBRESOURCE_INVALIDBOX = 896;
export const D3D12_MESSAGE_ID_READFROMSUBRESOURCE_INVALIDSUBRESOURCE = 897;
export const D3D12_MESSAGE_ID_READFROMSUBRESOURCE_EMPTYBOX = 898;
export const D3D12_MESSAGE_ID_TOO_MANY_NODES_SPECIFIED = 899;
export const D3D12_MESSAGE_ID_INVALID_NODE_INDEX = 900;
export const D3D12_MESSAGE_ID_GETHEAPPROPERTIES_INVALIDRESOURCE = 901;
export const D3D12_MESSAGE_ID_NODE_MASK_MISMATCH = 902;
export const D3D12_MESSAGE_ID_COMMAND_LIST_OUTOFMEMORY = 903;
export const D3D12_MESSAGE_ID_COMMAND_LIST_MULTIPLE_SWAPCHAIN_BUFFER_REFERENCES = 904;
export const D3D12_MESSAGE_ID_COMMAND_LIST_TOO_MANY_SWAPCHAIN_REFERENCES = 905;
export const D3D12_MESSAGE_ID_COMMAND_QUEUE_TOO_MANY_SWAPCHAIN_REFERENCES = 906;
export const D3D12_MESSAGE_ID_EXECUTECOMMANDLISTS_WRONGSWAPCHAINBUFFERREFERENCE = 907;
export const D3D12_MESSAGE_ID_COMMAND_LIST_SETRENDERTARGETS_INVALIDNUMRENDERTARGETS = 908;
export const D3D12_MESSAGE_ID_CREATE_QUEUE_INVALID_TYPE = 909;
export const D3D12_MESSAGE_ID_CREATE_QUEUE_INVALID_FLAGS = 910;
export const D3D12_MESSAGE_ID_CREATESHAREDRESOURCE_INVALIDFLAGS = 911;
export const D3D12_MESSAGE_ID_CREATESHAREDRESOURCE_INVALIDFORMAT = 912;
export const D3D12_MESSAGE_ID_CREATESHAREDHEAP_INVALIDFLAGS = 913;
export const D3D12_MESSAGE_ID_REFLECTSHAREDPROPERTIES_UNRECOGNIZEDPROPERTIES = 914;
export const D3D12_MESSAGE_ID_REFLECTSHAREDPROPERTIES_INVALIDSIZE = 915;
export const D3D12_MESSAGE_ID_REFLECTSHAREDPROPERTIES_INVALIDOBJECT = 916;
export const D3D12_MESSAGE_ID_KEYEDMUTEX_INVALIDOBJECT = 917;
export const D3D12_MESSAGE_ID_KEYEDMUTEX_INVALIDKEY = 918;
export const D3D12_MESSAGE_ID_KEYEDMUTEX_WRONGSTATE = 919;
export const D3D12_MESSAGE_ID_CREATE_QUEUE_INVALID_PRIORITY = 920;
export const D3D12_MESSAGE_ID_OBJECT_DELETED_WHILE_STILL_IN_USE = 921;
export const D3D12_MESSAGE_ID_CREATEPIPELINESTATE_INVALID_FLAGS = 922;
export const D3D12_MESSAGE_ID_HEAP_ADDRESS_RANGE_HAS_NO_RESOURCE = 923;
export const D3D12_MESSAGE_ID_COMMAND_LIST_DRAW_RENDER_TARGET_DELETED = 924;
export const D3D12_MESSAGE_ID_CREATEGRAPHICSPIPELINESTATE_ALL_RENDER_TARGETS_HAVE_UNKNOWN_FORMAT = 925;
export const D3D12_MESSAGE_ID_HEAP_ADDRESS_RANGE_INTERSECTS_MULTIPLE_BUFFERS = 926;
export const D3D12_MESSAGE_ID_EXECUTECOMMANDLISTS_GPU_WRITTEN_READBACK_RESOURCE_MAPPED = 927;
export const D3D12_MESSAGE_ID_UNMAP_RANGE_NOT_EMPTY = 929;
export const D3D12_MESSAGE_ID_MAP_INVALID_NULLRANGE = 930;
export const D3D12_MESSAGE_ID_UNMAP_INVALID_NULLRANGE = 931;
export const D3D12_MESSAGE_ID_NO_GRAPHICS_API_SUPPORT = 932;
export const D3D12_MESSAGE_ID_NO_COMPUTE_API_SUPPORT = 933;
export const D3D12_MESSAGE_ID_RESOLVESUBRESOURCE_RESOURCE_FLAGS_NOT_SUPPORTED = 934;
export const D3D12_MESSAGE_ID_GPU_BASED_VALIDATION_ROOT_ARGUMENT_UNINITIALIZED = 935;
export const D3D12_MESSAGE_ID_GPU_BASED_VALIDATION_DESCRIPTOR_HEAP_INDEX_OUT_OF_BOUNDS = 936;
export const D3D12_MESSAGE_ID_GPU_BASED_VALIDATION_DESCRIPTOR_TABLE_REGISTER_INDEX_OUT_OF_BOUNDS = 937;
export const D3D12_MESSAGE_ID_GPU_BASED_VALIDATION_DESCRIPTOR_UNINITIALIZED = 938;
export const D3D12_MESSAGE_ID_GPU_BASED_VALIDATION_DESCRIPTOR_TYPE_MISMATCH = 939;
export const D3D12_MESSAGE_ID_GPU_BASED_VALIDATION_SRV_RESOURCE_DIMENSION_MISMATCH = 940;
export const D3D12_MESSAGE_ID_GPU_BASED_VALIDATION_UAV_RESOURCE_DIMENSION_MISMATCH = 941;
export const D3D12_MESSAGE_ID_GPU_BASED_VALIDATION_INCOMPATIBLE_RESOURCE_STATE = 942;
export const D3D12_MESSAGE_ID_COPYRESOURCE_NULLDST = 943;
export const D3D12_MESSAGE_ID_COPYRESOURCE_INVALIDDSTRESOURCE = 944;
export const D3D12_MESSAGE_ID_COPYRESOURCE_NULLSRC = 945;
export const D3D12_MESSAGE_ID_COPYRESOURCE_INVALIDSRCRESOURCE = 946;
export const D3D12_MESSAGE_ID_RESOLVESUBRESOURCE_NULLDST = 947;
export const D3D12_MESSAGE_ID_RESOLVESUBRESOURCE_INVALIDDSTRESOURCE = 948;
export const D3D12_MESSAGE_ID_RESOLVESUBRESOURCE_NULLSRC = 949;
export const D3D12_MESSAGE_ID_RESOLVESUBRESOURCE_INVALIDSRCRESOURCE = 950;
export const D3D12_MESSAGE_ID_PIPELINE_STATE_TYPE_MISMATCH = 951;
export const D3D12_MESSAGE_ID_COMMAND_LIST_DISPATCH_ROOT_SIGNATURE_NOT_SET = 952;
export const D3D12_MESSAGE_ID_COMMAND_LIST_DISPATCH_ROOT_SIGNATURE_MISMATCH = 953;
export const D3D12_MESSAGE_ID_RESOURCE_BARRIER_ZERO_BARRIERS = 954;
export const D3D12_MESSAGE_ID_BEGIN_END_EVENT_MISMATCH = 955;
export const D3D12_MESSAGE_ID_RESOURCE_BARRIER_POSSIBLE_BEFORE_AFTER_MISMATCH = 956;
export const D3D12_MESSAGE_ID_RESOURCE_BARRIER_MISMATCHING_BEGIN_END = 957;
export const D3D12_MESSAGE_ID_GPU_BASED_VALIDATION_INVALID_RESOURCE = 958;
export const D3D12_MESSAGE_ID_USE_OF_ZERO_REFCOUNT_OBJECT = 959;
export const D3D12_MESSAGE_ID_OBJECT_EVICTED_WHILE_STILL_IN_USE = 960;
export const D3D12_MESSAGE_ID_GPU_BASED_VALIDATION_ROOT_DESCRIPTOR_ACCESS_OUT_OF_BOUNDS = 961;
export const D3D12_MESSAGE_ID_CREATEPIPELINELIBRARY_INVALIDLIBRARYBLOB = 962;
export const D3D12_MESSAGE_ID_CREATEPIPELINELIBRARY_DRIVERVERSIONMISMATCH = 963;
export const D3D12_MESSAGE_ID_CREATEPIPELINELIBRARY_ADAPTERVERSIONMISMATCH = 964;
export const D3D12_MESSAGE_ID_CREATEPIPELINELIBRARY_UNSUPPORTED = 965;
export const D3D12_MESSAGE_ID_CREATE_PIPELINELIBRARY = 966;
export const D3D12_MESSAGE_ID_LIVE_PIPELINELIBRARY = 967;
export const D3D12_MESSAGE_ID_DESTROY_PIPELINELIBRARY = 968;
export const D3D12_MESSAGE_ID_STOREPIPELINE_NONAME = 969;
export const D3D12_MESSAGE_ID_STOREPIPELINE_DUPLICATENAME = 970;
export const D3D12_MESSAGE_ID_LOADPIPELINE_NAMENOTFOUND = 971;
export const D3D12_MESSAGE_ID_LOADPIPELINE_INVALIDDESC = 972;
export const D3D12_MESSAGE_ID_PIPELINELIBRARY_SERIALIZE_NOTENOUGHMEMORY = 973;
export const D3D12_MESSAGE_ID_CREATEGRAPHICSPIPELINESTATE_PS_OUTPUT_RT_OUTPUT_MISMATCH = 974;
export const D3D12_MESSAGE_ID_SETEVENTONMULTIPLEFENCECOMPLETION_INVALIDFLAGS = 975;
export const D3D12_MESSAGE_ID_CREATE_QUEUE_VIDEO_NOT_SUPPORTED = 976;
export const D3D12_MESSAGE_ID_CREATE_COMMAND_ALLOCATOR_VIDEO_NOT_SUPPORTED = 977;
export const D3D12_MESSAGE_ID_CREATEQUERY_HEAP_VIDEO_DECODE_STATISTICS_NOT_SUPPORTED = 978;
export const D3D12_MESSAGE_ID_CREATE_VIDEODECODECOMMANDLIST = 979;
export const D3D12_MESSAGE_ID_CREATE_VIDEODECODER = 980;
export const D3D12_MESSAGE_ID_CREATE_VIDEODECODESTREAM = 981;
export const D3D12_MESSAGE_ID_LIVE_VIDEODECODECOMMANDLIST = 982;
export const D3D12_MESSAGE_ID_LIVE_VIDEODECODER = 983;
export const D3D12_MESSAGE_ID_LIVE_VIDEODECODESTREAM = 984;
export const D3D12_MESSAGE_ID_DESTROY_VIDEODECODECOMMANDLIST = 985;
export const D3D12_MESSAGE_ID_DESTROY_VIDEODECODER = 986;
export const D3D12_MESSAGE_ID_DESTROY_VIDEODECODESTREAM = 987;
export const D3D12_MESSAGE_ID_DECODE_FRAME_INVALID_PARAMETERS = 988;
export const D3D12_MESSAGE_ID_DEPRECATED_API = 989;
export const D3D12_MESSAGE_ID_RESOURCE_BARRIER_MISMATCHING_COMMAND_LIST_TYPE = 990;
export const D3D12_MESSAGE_ID_COMMAND_LIST_DESCRIPTOR_TABLE_NOT_SET = 991;
export const D3D12_MESSAGE_ID_COMMAND_LIST_ROOT_CONSTANT_BUFFER_VIEW_NOT_SET = 992;
export const D3D12_MESSAGE_ID_COMMAND_LIST_ROOT_SHADER_RESOURCE_VIEW_NOT_SET = 993;
export const D3D12_MESSAGE_ID_COMMAND_LIST_ROOT_UNORDERED_ACCESS_VIEW_NOT_SET = 994;
export const D3D12_MESSAGE_ID_DISCARD_INVALID_SUBRESOURCE_RANGE = 995;
export const D3D12_MESSAGE_ID_DISCARD_ONE_SUBRESOURCE_FOR_MIPS_WITH_RECTS = 996;
export const D3D12_MESSAGE_ID_DISCARD_NO_RECTS_FOR_NON_TEXTURE2D = 997;
export const D3D12_MESSAGE_ID_COPY_ON_SAME_SUBRESOURCE = 998;
export const D3D12_MESSAGE_ID_SETRESIDENCYPRIORITY_INVALID_PAGEABLE = 999;
export const D3D12_MESSAGE_ID_GPU_BASED_VALIDATION_UNSUPPORTED = 1000;
export const D3D12_MESSAGE_ID_STATIC_DESCRIPTOR_INVALID_DESCRIPTOR_CHANGE = 1001;
export const D3D12_MESSAGE_ID_DATA_STATIC_DESCRIPTOR_INVALID_DATA_CHANGE = 1002;
export const D3D12_MESSAGE_ID_DATA_STATIC_WHILE_SET_AT_EXECUTE_DESCRIPTOR_INVALID_DATA_CHANGE = 1003;
export const D3D12_MESSAGE_ID_EXECUTE_BUNDLE_STATIC_DESCRIPTOR_DATA_STATIC_NOT_SET = 1004;
export const D3D12_MESSAGE_ID_GPU_BASED_VALIDATION_RESOURCE_ACCESS_OUT_OF_BOUNDS = 1005;
export const D3D12_MESSAGE_ID_GPU_BASED_VALIDATION_SAMPLER_MODE_MISMATCH = 1006;
export const D3D12_MESSAGE_ID_CREATE_FENCE_INVALID_FLAGS = 1007;
export const D3D12_MESSAGE_ID_RESOURCE_BARRIER_DUPLICATE_SUBRESOURCE_TRANSITIONS = 1008;
export const D3D12_MESSAGE_ID_SETRESIDENCYPRIORITY_INVALID_PRIORITY = 1009;
export const D3D12_MESSAGE_ID_CREATE_DESCRIPTOR_HEAP_LARGE_NUM_DESCRIPTORS = 1013;
export const D3D12_MESSAGE_ID_BEGIN_EVENT = 1014;
export const D3D12_MESSAGE_ID_END_EVENT = 1015;
export const D3D12_MESSAGE_ID_CREATEDEVICE_DEBUG_LAYER_STARTUP_OPTIONS = 1016;
export const D3D12_MESSAGE_ID_CREATEDEPTHSTENCILSTATE_DEPTHBOUNDSTEST_UNSUPPORTED = 1017;
export const D3D12_MESSAGE_ID_CREATEPIPELINESTATE_DUPLICATE_SUBOBJECT = 1018;
export const D3D12_MESSAGE_ID_CREATEPIPELINESTATE_UNKNOWN_SUBOBJECT = 1019;
export const D3D12_MESSAGE_ID_CREATEPIPELINESTATE_ZERO_SIZE_STREAM = 1020;
export const D3D12_MESSAGE_ID_CREATEPIPELINESTATE_INVALID_STREAM = 1021;
export const D3D12_MESSAGE_ID_CREATEPIPELINESTATE_CANNOT_DEDUCE_TYPE = 1022;
export const D3D12_MESSAGE_ID_COMMAND_LIST_STATIC_DESCRIPTOR_RESOURCE_DIMENSION_MISMATCH = 1023;
export const D3D12_MESSAGE_ID_CREATE_COMMAND_QUEUE_INSUFFICIENT_PRIVILEGE_FOR_GLOBAL_REALTIME = 1024;
export const D3D12_MESSAGE_ID_CREATE_COMMAND_QUEUE_INSUFFICIENT_HARDWARE_SUPPORT_FOR_GLOBAL_REALTIME = 1025;
export const D3D12_MESSAGE_ID_ATOMICCOPYBUFFER_INVALID_ARCHITECTURE = 1026;
export const D3D12_MESSAGE_ID_ATOMICCOPYBUFFER_NULL_DST = 1027;
export const D3D12_MESSAGE_ID_ATOMICCOPYBUFFER_INVALID_DST_RESOURCE_DIMENSION = 1028;
export const D3D12_MESSAGE_ID_ATOMICCOPYBUFFER_DST_RANGE_OUT_OF_BOUNDS = 1029;
export const D3D12_MESSAGE_ID_ATOMICCOPYBUFFER_NULL_SRC = 1030;
export const D3D12_MESSAGE_ID_ATOMICCOPYBUFFER_INVALID_SRC_RESOURCE_DIMENSION = 1031;
export const D3D12_MESSAGE_ID_ATOMICCOPYBUFFER_SRC_RANGE_OUT_OF_BOUNDS = 1032;
export const D3D12_MESSAGE_ID_ATOMICCOPYBUFFER_INVALID_OFFSET_ALIGNMENT = 1033;
export const D3D12_MESSAGE_ID_ATOMICCOPYBUFFER_NULL_DEPENDENT_RESOURCES = 1034;
export const D3D12_MESSAGE_ID_ATOMICCOPYBUFFER_NULL_DEPENDENT_SUBRESOURCE_RANGES = 1035;
export const D3D12_MESSAGE_ID_ATOMICCOPYBUFFER_INVALID_DEPENDENT_RESOURCE = 1036;
export const D3D12_MESSAGE_ID_ATOMICCOPYBUFFER_INVALID_DEPENDENT_SUBRESOURCE_RANGE = 1037;
export const D3D12_MESSAGE_ID_ATOMICCOPYBUFFER_DEPENDENT_SUBRESOURCE_OUT_OF_BOUNDS = 1038;
export const D3D12_MESSAGE_ID_ATOMICCOPYBUFFER_DEPENDENT_RANGE_OUT_OF_BOUNDS = 1039;
export const D3D12_MESSAGE_ID_ATOMICCOPYBUFFER_ZERO_DEPENDENCIES = 1040;
export const D3D12_MESSAGE_ID_DEVICE_CREATE_SHARED_HANDLE_INVALIDARG = 1041;
export const D3D12_MESSAGE_ID_DESCRIPTOR_HANDLE_WITH_INVALID_RESOURCE = 1042;
export const D3D12_MESSAGE_ID_SETDEPTHBOUNDS_INVALIDARGS = 1043;
export const D3D12_MESSAGE_ID_GPU_BASED_VALIDATION_RESOURCE_STATE_IMPRECISE = 1044;
export const D3D12_MESSAGE_ID_COMMAND_LIST_PIPELINE_STATE_NOT_SET = 1045;
export const D3D12_MESSAGE_ID_CREATEGRAPHICSPIPELINESTATE_SHADER_MODEL_MISMATCH = 1046;
export const D3D12_MESSAGE_ID_OBJECT_ACCESSED_WHILE_STILL_IN_USE = 1047;
export const D3D12_MESSAGE_ID_PROGRAMMABLE_MSAA_UNSUPPORTED = 1048;
export const D3D12_MESSAGE_ID_SETSAMPLEPOSITIONS_INVALIDARGS = 1049;
export const D3D12_MESSAGE_ID_RESOLVESUBRESOURCEREGION_INVALID_RECT = 1050;
export const D3D12_MESSAGE_ID_CREATE_VIDEODECODECOMMANDQUEUE = 1051;
export const D3D12_MESSAGE_ID_CREATE_VIDEOPROCESSCOMMANDLIST = 1052;
export const D3D12_MESSAGE_ID_CREATE_VIDEOPROCESSCOMMANDQUEUE = 1053;
export const D3D12_MESSAGE_ID_LIVE_VIDEODECODECOMMANDQUEUE = 1054;
export const D3D12_MESSAGE_ID_LIVE_VIDEOPROCESSCOMMANDLIST = 1055;
export const D3D12_MESSAGE_ID_LIVE_VIDEOPROCESSCOMMANDQUEUE = 1056;
export const D3D12_MESSAGE_ID_DESTROY_VIDEODECODECOMMANDQUEUE = 1057;
export const D3D12_MESSAGE_ID_DESTROY_VIDEOPROCESSCOMMANDLIST = 1058;
export const D3D12_MESSAGE_ID_DESTROY_VIDEOPROCESSCOMMANDQUEUE = 1059;
export const D3D12_MESSAGE_ID_CREATE_VIDEOPROCESSOR = 1060;
export const D3D12_MESSAGE_ID_CREATE_VIDEOPROCESSSTREAM = 1061;
export const D3D12_MESSAGE_ID_LIVE_VIDEOPROCESSOR = 1062;
export const D3D12_MESSAGE_ID_LIVE_VIDEOPROCESSSTREAM = 1063;
export const D3D12_MESSAGE_ID_DESTROY_VIDEOPROCESSOR = 1064;
export const D3D12_MESSAGE_ID_DESTROY_VIDEOPROCESSSTREAM = 1065;
export const D3D12_MESSAGE_ID_PROCESS_FRAME_INVALID_PARAMETERS = 1066;
export const D3D12_MESSAGE_ID_COPY_INVALIDLAYOUT = 1067;
export const D3D12_MESSAGE_ID_CREATE_CRYPTO_SESSION = 1068;
export const D3D12_MESSAGE_ID_CREATE_CRYPTO_SESSION_POLICY = 1069;
export const D3D12_MESSAGE_ID_CREATE_PROTECTED_RESOURCE_SESSION = 1070;
export const D3D12_MESSAGE_ID_LIVE_CRYPTO_SESSION = 1071;
export const D3D12_MESSAGE_ID_LIVE_CRYPTO_SESSION_POLICY = 1072;
export const D3D12_MESSAGE_ID_LIVE_PROTECTED_RESOURCE_SESSION = 1073;
export const D3D12_MESSAGE_ID_DESTROY_CRYPTO_SESSION = 1074;
export const D3D12_MESSAGE_ID_DESTROY_CRYPTO_SESSION_POLICY = 1075;
export const D3D12_MESSAGE_ID_DESTROY_PROTECTED_RESOURCE_SESSION = 1076;
export const D3D12_MESSAGE_ID_PROTECTED_RESOURCE_SESSION_UNSUPPORTED = 1077;
export const D3D12_MESSAGE_ID_FENCE_INVALIDOPERATION = 1078;
export const D3D12_MESSAGE_ID_CREATEQUERY_HEAP_COPY_QUEUE_TIMESTAMPS_NOT_SUPPORTED = 1079;
export const D3D12_MESSAGE_ID_SAMPLEPOSITIONS_MISMATCH_DEFERRED = 1080;
export const D3D12_MESSAGE_ID_SAMPLEPOSITIONS_MISMATCH_RECORDTIME_ASSUMEDFROMFIRSTUSE = 1081;
export const D3D12_MESSAGE_ID_SAMPLEPOSITIONS_MISMATCH_RECORDTIME_ASSUMEDFROMCLEAR = 1082;
export const D3D12_MESSAGE_ID_CREATE_VIDEODECODERHEAP = 1083;
export const D3D12_MESSAGE_ID_LIVE_VIDEODECODERHEAP = 1084;
export const D3D12_MESSAGE_ID_DESTROY_VIDEODECODERHEAP = 1085;
export const D3D12_MESSAGE_ID_OPENEXISTINGHEAP_INVALIDARG_RETURN = 1086;
export const D3D12_MESSAGE_ID_OPENEXISTINGHEAP_OUTOFMEMORY_RETURN = 1087;
export const D3D12_MESSAGE_ID_OPENEXISTINGHEAP_INVALIDADDRESS = 1088;
export const D3D12_MESSAGE_ID_OPENEXISTINGHEAP_INVALIDHANDLE = 1089;
export const D3D12_MESSAGE_ID_WRITEBUFFERIMMEDIATE_INVALID_DEST = 1090;
export const D3D12_MESSAGE_ID_WRITEBUFFERIMMEDIATE_INVALID_MODE = 1091;
export const D3D12_MESSAGE_ID_WRITEBUFFERIMMEDIATE_INVALID_ALIGNMENT = 1092;
export const D3D12_MESSAGE_ID_WRITEBUFFERIMMEDIATE_NOT_SUPPORTED = 1093;
export const D3D12_MESSAGE_ID_SETVIEWINSTANCEMASK_INVALIDARGS = 1094;
export const D3D12_MESSAGE_ID_VIEW_INSTANCING_UNSUPPORTED = 1095;
export const D3D12_MESSAGE_ID_VIEW_INSTANCING_INVALIDARGS = 1096;
export const D3D12_MESSAGE_ID_COPYTEXTUREREGION_MISMATCH_DECODE_REFERENCE_ONLY_FLAG = 1097;
export const D3D12_MESSAGE_ID_COPYRESOURCE_MISMATCH_DECODE_REFERENCE_ONLY_FLAG = 1098;
export const D3D12_MESSAGE_ID_CREATE_VIDEO_DECODE_HEAP_CAPS_FAILURE = 1099;
export const D3D12_MESSAGE_ID_CREATE_VIDEO_DECODE_HEAP_CAPS_UNSUPPORTED = 1100;
export const D3D12_MESSAGE_ID_VIDEO_DECODE_SUPPORT_INVALID_INPUT = 1101;
export const D3D12_MESSAGE_ID_CREATE_VIDEO_DECODER_UNSUPPORTED = 1102;
export const D3D12_MESSAGE_ID_CREATEGRAPHICSPIPELINESTATE_METADATA_ERROR = 1103;
export const D3D12_MESSAGE_ID_CREATEGRAPHICSPIPELINESTATE_VIEW_INSTANCING_VERTEX_SIZE_EXCEEDED = 1104;
export const D3D12_MESSAGE_ID_CREATEGRAPHICSPIPELINESTATE_RUNTIME_INTERNAL_ERROR = 1105;
export const D3D12_MESSAGE_ID_NO_VIDEO_API_SUPPORT = 1106;
export const D3D12_MESSAGE_ID_VIDEO_PROCESS_SUPPORT_INVALID_INPUT = 1107;
export const D3D12_MESSAGE_ID_CREATE_VIDEO_PROCESSOR_CAPS_FAILURE = 1108;
export const D3D12_MESSAGE_ID_VIDEO_PROCESS_SUPPORT_UNSUPPORTED_FORMAT = 1109;
export const D3D12_MESSAGE_ID_VIDEO_DECODE_FRAME_INVALID_ARGUMENT = 1110;
export const D3D12_MESSAGE_ID_ENQUEUE_MAKE_RESIDENT_INVALID_FLAGS = 1111;
export const D3D12_MESSAGE_ID_OPENEXISTINGHEAP_UNSUPPORTED = 1112;
export const D3D12_MESSAGE_ID_VIDEO_PROCESS_FRAMES_INVALID_ARGUMENT = 1113;
export const D3D12_MESSAGE_ID_VIDEO_DECODE_SUPPORT_UNSUPPORTED = 1114;
export const D3D12_MESSAGE_ID_CREATE_COMMANDRECORDER = 1115;
export const D3D12_MESSAGE_ID_LIVE_COMMANDRECORDER = 1116;
export const D3D12_MESSAGE_ID_DESTROY_COMMANDRECORDER = 1117;
export const D3D12_MESSAGE_ID_CREATE_COMMAND_RECORDER_VIDEO_NOT_SUPPORTED = 1118;
export const D3D12_MESSAGE_ID_CREATE_COMMAND_RECORDER_INVALID_SUPPORT_FLAGS = 1119;
export const D3D12_MESSAGE_ID_CREATE_COMMAND_RECORDER_INVALID_FLAGS = 1120;
export const D3D12_MESSAGE_ID_CREATE_COMMAND_RECORDER_MORE_RECORDERS_THAN_LOGICAL_PROCESSORS = 1121;
export const D3D12_MESSAGE_ID_CREATE_COMMANDPOOL = 1122;
export const D3D12_MESSAGE_ID_LIVE_COMMANDPOOL = 1123;
export const D3D12_MESSAGE_ID_DESTROY_COMMANDPOOL = 1124;
export const D3D12_MESSAGE_ID_CREATE_COMMAND_POOL_INVALID_FLAGS = 1125;
export const D3D12_MESSAGE_ID_CREATE_COMMAND_LIST_VIDEO_NOT_SUPPORTED = 1126;
export const D3D12_MESSAGE_ID_COMMAND_RECORDER_SUPPORT_FLAGS_MISMATCH = 1127;
export const D3D12_MESSAGE_ID_COMMAND_RECORDER_CONTENTION = 1128;
export const D3D12_MESSAGE_ID_COMMAND_RECORDER_USAGE_WITH_CREATECOMMANDLIST_COMMAND_LIST = 1129;
export const D3D12_MESSAGE_ID_COMMAND_ALLOCATOR_USAGE_WITH_CREATECOMMANDLIST1_COMMAND_LIST = 1130;
export const D3D12_MESSAGE_ID_CANNOT_EXECUTE_EMPTY_COMMAND_LIST = 1131;
export const D3D12_MESSAGE_ID_CANNOT_RESET_COMMAND_POOL_WITH_OPEN_COMMAND_LISTS = 1132;
export const D3D12_MESSAGE_ID_CANNOT_USE_COMMAND_RECORDER_WITHOUT_CURRENT_TARGET = 1133;
export const D3D12_MESSAGE_ID_CANNOT_CHANGE_COMMAND_RECORDER_TARGET_WHILE_RECORDING = 1134;
export const D3D12_MESSAGE_ID_COMMAND_POOL_SYNC = 1135;
export const D3D12_MESSAGE_ID_EVICT_UNDERFLOW = 1136;
export const D3D12_MESSAGE_ID_CREATE_META_COMMAND = 1137;
export const D3D12_MESSAGE_ID_LIVE_META_COMMAND = 1138;
export const D3D12_MESSAGE_ID_DESTROY_META_COMMAND = 1139;
export const D3D12_MESSAGE_ID_COPYBUFFERREGION_INVALID_DST_RESOURCE = 1140;
export const D3D12_MESSAGE_ID_COPYBUFFERREGION_INVALID_SRC_RESOURCE = 1141;
export const D3D12_MESSAGE_ID_ATOMICCOPYBUFFER_INVALID_DST_RESOURCE = 1142;
export const D3D12_MESSAGE_ID_ATOMICCOPYBUFFER_INVALID_SRC_RESOURCE = 1143;
export const D3D12_MESSAGE_ID_CREATEPLACEDRESOURCEONBUFFER_NULL_BUFFER = 1144;
export const D3D12_MESSAGE_ID_CREATEPLACEDRESOURCEONBUFFER_NULL_RESOURCE_DESC = 1145;
export const D3D12_MESSAGE_ID_CREATEPLACEDRESOURCEONBUFFER_UNSUPPORTED = 1146;
export const D3D12_MESSAGE_ID_CREATEPLACEDRESOURCEONBUFFER_INVALID_BUFFER_DIMENSION = 1147;
export const D3D12_MESSAGE_ID_CREATEPLACEDRESOURCEONBUFFER_INVALID_BUFFER_FLAGS = 1148;
export const D3D12_MESSAGE_ID_CREATEPLACEDRESOURCEONBUFFER_INVALID_BUFFER_OFFSET = 1149;
export const D3D12_MESSAGE_ID_CREATEPLACEDRESOURCEONBUFFER_INVALID_RESOURCE_DIMENSION = 1150;
export const D3D12_MESSAGE_ID_CREATEPLACEDRESOURCEONBUFFER_INVALID_RESOURCE_FLAGS = 1151;
export const D3D12_MESSAGE_ID_CREATEPLACEDRESOURCEONBUFFER_OUTOFMEMORY_RETURN = 1152;
export const D3D12_MESSAGE_ID_CANNOT_CREATE_GRAPHICS_AND_VIDEO_COMMAND_RECORDER = 1153;
export const D3D12_MESSAGE_ID_UPDATETILEMAPPINGS_POSSIBLY_MISMATCHING_PROPERTIES = 1154;
export const D3D12_MESSAGE_ID_CREATE_COMMAND_LIST_INVALID_COMMAND_LIST_TYPE = 1155;
export const D3D12_MESSAGE_ID_CLEARUNORDEREDACCESSVIEW_INCOMPATIBLE_WITH_STRUCTURED_BUFFERS = 1156;
export const D3D12_MESSAGE_ID_COMPUTE_ONLY_DEVICE_OPERATION_UNSUPPORTED = 1157;
export const D3D12_MESSAGE_ID_BUILD_RAYTRACING_ACCELERATION_STRUCTURE_INVALID = 1158;
export const D3D12_MESSAGE_ID_EMIT_RAYTRACING_ACCELERATION_STRUCTURE_POSTBUILD_INFO_INVALID = 1159;
export const D3D12_MESSAGE_ID_COPY_RAYTRACING_ACCELERATION_STRUCTURE_INVALID = 1160;
export const D3D12_MESSAGE_ID_DISPATCH_RAYS_INVALID = 1161;
export const D3D12_MESSAGE_ID_GET_RAYTRACING_ACCELERATION_STRUCTURE_PREBUILD_INFO_INVALID = 1162;
export const D3D12_MESSAGE_ID_CREATE_LIFETIMETRACKER = 1163;
export const D3D12_MESSAGE_ID_LIVE_LIFETIMETRACKER = 1164;
export const D3D12_MESSAGE_ID_DESTROY_LIFETIMETRACKER = 1165;
export const D3D12_MESSAGE_ID_DESTROYOWNEDOBJECT_OBJECTNOTOWNED = 1166;
export const D3D12_MESSAGE_ID_CREATE_TRACKEDWORKLOAD = 1167;
export const D3D12_MESSAGE_ID_LIVE_TRACKEDWORKLOAD = 1168;
export const D3D12_MESSAGE_ID_DESTROY_TRACKEDWORKLOAD = 1169;
export const D3D12_MESSAGE_ID_RENDER_PASS_ERROR = 1170;
export const D3D12_MESSAGE_ID_META_COMMAND_ID_INVALID = 1171;
export const D3D12_MESSAGE_ID_META_COMMAND_UNSUPPORTED_PARAMS = 1172;
export const D3D12_MESSAGE_ID_META_COMMAND_FAILED_ENUMERATION = 1173;
export const D3D12_MESSAGE_ID_META_COMMAND_PARAMETER_SIZE_MISMATCH = 1174;
export const D3D12_MESSAGE_ID_UNINITIALIZED_META_COMMAND = 1175;
export const D3D12_MESSAGE_ID_META_COMMAND_INVALID_GPU_VIRTUAL_ADDRESS = 1176;
export const D3D12_MESSAGE_ID_CREATE_VIDEOENCODECOMMANDLIST = 1177;
export const D3D12_MESSAGE_ID_LIVE_VIDEOENCODECOMMANDLIST = 1178;
export const D3D12_MESSAGE_ID_DESTROY_VIDEOENCODECOMMANDLIST = 1179;
export const D3D12_MESSAGE_ID_CREATE_VIDEOENCODECOMMANDQUEUE = 1180;
export const D3D12_MESSAGE_ID_LIVE_VIDEOENCODECOMMANDQUEUE = 1181;
export const D3D12_MESSAGE_ID_DESTROY_VIDEOENCODECOMMANDQUEUE = 1182;
export const D3D12_MESSAGE_ID_CREATE_VIDEOMOTIONESTIMATOR = 1183;
export const D3D12_MESSAGE_ID_LIVE_VIDEOMOTIONESTIMATOR = 1184;
export const D3D12_MESSAGE_ID_DESTROY_VIDEOMOTIONESTIMATOR = 1185;
export const D3D12_MESSAGE_ID_CREATE_VIDEOMOTIONVECTORHEAP = 1186;
export const D3D12_MESSAGE_ID_LIVE_VIDEOMOTIONVECTORHEAP = 1187;
export const D3D12_MESSAGE_ID_DESTROY_VIDEOMOTIONVECTORHEAP = 1188;
export const D3D12_MESSAGE_ID_MULTIPLE_TRACKED_WORKLOADS = 1189;
export const D3D12_MESSAGE_ID_MULTIPLE_TRACKED_WORKLOAD_PAIRS = 1190;
export const D3D12_MESSAGE_ID_OUT_OF_ORDER_TRACKED_WORKLOAD_PAIR = 1191;
export const D3D12_MESSAGE_ID_CANNOT_ADD_TRACKED_WORKLOAD = 1192;
export const D3D12_MESSAGE_ID_INCOMPLETE_TRACKED_WORKLOAD_PAIR = 1193;
export const D3D12_MESSAGE_ID_CREATE_STATE_OBJECT_ERROR = 1194;
export const D3D12_MESSAGE_ID_GET_SHADER_IDENTIFIER_ERROR = 1195;
export const D3D12_MESSAGE_ID_GET_SHADER_STACK_SIZE_ERROR = 1196;
export const D3D12_MESSAGE_ID_GET_PIPELINE_STACK_SIZE_ERROR = 1197;
export const D3D12_MESSAGE_ID_SET_PIPELINE_STACK_SIZE_ERROR = 1198;
export const D3D12_MESSAGE_ID_GET_SHADER_IDENTIFIER_SIZE_INVALID = 1199;
export const D3D12_MESSAGE_ID_CHECK_DRIVER_MATCHING_IDENTIFIER_INVALID = 1200;
export const D3D12_MESSAGE_ID_CHECK_DRIVER_MATCHING_IDENTIFIER_DRIVER_REPORTED_ISSUE = 1201;
export const D3D12_MESSAGE_ID_RENDER_PASS_INVALID_RESOURCE_BARRIER = 1202;
export const D3D12_MESSAGE_ID_RENDER_PASS_DISALLOWED_API_CALLED = 1203;
export const D3D12_MESSAGE_ID_RENDER_PASS_CANNOT_NEST_RENDER_PASSES = 1204;
export const D3D12_MESSAGE_ID_RENDER_PASS_CANNOT_END_WITHOUT_BEGIN = 1205;
export const D3D12_MESSAGE_ID_RENDER_PASS_CANNOT_CLOSE_COMMAND_LIST = 1206;
export const D3D12_MESSAGE_ID_RENDER_PASS_GPU_WORK_WHILE_SUSPENDED = 1207;
export const D3D12_MESSAGE_ID_RENDER_PASS_MISMATCHING_SUSPEND_RESUME = 1208;
export const D3D12_MESSAGE_ID_RENDER_PASS_NO_PRIOR_SUSPEND_WITHIN_EXECUTECOMMANDLISTS = 1209;
export const D3D12_MESSAGE_ID_RENDER_PASS_NO_SUBSEQUENT_RESUME_WITHIN_EXECUTECOMMANDLISTS = 1210;
export const D3D12_MESSAGE_ID_TRACKED_WORKLOAD_COMMAND_QUEUE_MISMATCH = 1211;
export const D3D12_MESSAGE_ID_TRACKED_WORKLOAD_NOT_SUPPORTED = 1212;
export const D3D12_MESSAGE_ID_RENDER_PASS_MISMATCHING_NO_ACCESS = 1213;
export const D3D12_MESSAGE_ID_RENDER_PASS_UNSUPPORTED_RESOLVE = 1214;
export const D3D12_MESSAGE_ID_CLEARUNORDEREDACCESSVIEW_INVALID_RESOURCE_PTR = 1215;
export const D3D12_MESSAGE_ID_WINDOWS7_FENCE_OUTOFORDER_SIGNAL = 1216;
export const D3D12_MESSAGE_ID_WINDOWS7_FENCE_OUTOFORDER_WAIT = 1217;
export const D3D12_MESSAGE_ID_VIDEO_CREATE_MOTION_ESTIMATOR_INVALID_ARGUMENT = 1218;
export const D3D12_MESSAGE_ID_VIDEO_CREATE_MOTION_VECTOR_HEAP_INVALID_ARGUMENT = 1219;
export const D3D12_MESSAGE_ID_ESTIMATE_MOTION_INVALID_ARGUMENT = 1220;
export const D3D12_MESSAGE_ID_RESOLVE_MOTION_VECTOR_HEAP_INVALID_ARGUMENT = 1221;
export const D3D12_MESSAGE_ID_GETGPUVIRTUALADDRESS_INVALID_HEAP_TYPE = 1222;
export const D3D12_MESSAGE_ID_SET_BACKGROUND_PROCESSING_MODE_INVALID_ARGUMENT = 1223;
export const D3D12_MESSAGE_ID_CREATE_COMMAND_LIST_INVALID_COMMAND_LIST_TYPE_FOR_FEATURE_LEVEL = 1224;
export const D3D12_MESSAGE_ID_CREATE_VIDEOEXTENSIONCOMMAND = 1225;
export const D3D12_MESSAGE_ID_LIVE_VIDEOEXTENSIONCOMMAND = 1226;
export const D3D12_MESSAGE_ID_DESTROY_VIDEOEXTENSIONCOMMAND = 1227;
export const D3D12_MESSAGE_ID_INVALID_VIDEO_EXTENSION_COMMAND_ID = 1228;
export const D3D12_MESSAGE_ID_VIDEO_EXTENSION_COMMAND_INVALID_ARGUMENT = 1229;
export const D3D12_MESSAGE_ID_CREATE_ROOT_SIGNATURE_NOT_UNIQUE_IN_DXIL_LIBRARY = 1230;
export const D3D12_MESSAGE_ID_VARIABLE_SHADING_RATE_NOT_ALLOWED_WITH_TIR = 1231;
export const D3D12_MESSAGE_ID_GEOMETRY_SHADER_OUTPUTTING_BOTH_VIEWPORT_ARRAY_INDEX_AND_SHADING_RATE_NOT_SUPPORTED_ON_DEVICE = 1232;
export const D3D12_MESSAGE_ID_RSSETSHADING_RATE_INVALID_SHADING_RATE = 1233;
export const D3D12_MESSAGE_ID_RSSETSHADING_RATE_SHADING_RATE_NOT_PERMITTED_BY_CAP = 1234;
export const D3D12_MESSAGE_ID_RSSETSHADING_RATE_INVALID_COMBINER = 1235;
export const D3D12_MESSAGE_ID_RSSETSHADINGRATEIMAGE_REQUIRES_TIER_2 = 1236;
export const D3D12_MESSAGE_ID_RSSETSHADINGRATE_REQUIRES_TIER_1 = 1237;
export const D3D12_MESSAGE_ID_SHADING_RATE_IMAGE_INCORRECT_FORMAT = 1238;
export const D3D12_MESSAGE_ID_SHADING_RATE_IMAGE_INCORRECT_ARRAY_SIZE = 1239;
export const D3D12_MESSAGE_ID_SHADING_RATE_IMAGE_INCORRECT_MIP_LEVEL = 1240;
export const D3D12_MESSAGE_ID_SHADING_RATE_IMAGE_INCORRECT_SAMPLE_COUNT = 1241;
export const D3D12_MESSAGE_ID_SHADING_RATE_IMAGE_INCORRECT_SAMPLE_QUALITY = 1242;
export const D3D12_MESSAGE_ID_NON_RETAIL_SHADER_MODEL_WONT_VALIDATE = 1243;
export const D3D12_MESSAGE_ID_CREATEGRAPHICSPIPELINESTATE_AS_ROOT_SIGNATURE_MISMATCH = 1244;
export const D3D12_MESSAGE_ID_CREATEGRAPHICSPIPELINESTATE_MS_ROOT_SIGNATURE_MISMATCH = 1245;
export const D3D12_MESSAGE_ID_ADD_TO_STATE_OBJECT_ERROR = 1246;
export const D3D12_MESSAGE_ID_CREATE_PROTECTED_RESOURCE_SESSION_INVALID_ARGUMENT = 1247;
export const D3D12_MESSAGE_ID_CREATEGRAPHICSPIPELINESTATE_MS_PSO_DESC_MISMATCH = 1248;
export const D3D12_MESSAGE_ID_CREATEPIPELINESTATE_MS_INCOMPLETE_TYPE = 1249;
export const D3D12_MESSAGE_ID_CREATEGRAPHICSPIPELINESTATE_AS_NOT_MS_MISMATCH = 1250;
export const D3D12_MESSAGE_ID_CREATEGRAPHICSPIPELINESTATE_MS_NOT_PS_MISMATCH = 1251;
export const D3D12_MESSAGE_ID_NONZERO_SAMPLER_FEEDBACK_MIP_REGION_WITH_INCOMPATIBLE_FORMAT = 1252;
export const D3D12_MESSAGE_ID_CREATEGRAPHICSPIPELINESTATE_INPUTLAYOUT_SHADER_MISMATCH = 1253;
export const D3D12_MESSAGE_ID_EMPTY_DISPATCH = 1254;
export const D3D12_MESSAGE_ID_RESOURCE_FORMAT_REQUIRES_SAMPLER_FEEDBACK_CAPABILITY = 1255;
export const D3D12_MESSAGE_ID_SAMPLER_FEEDBACK_MAP_INVALID_MIP_REGION = 1256;
export const D3D12_MESSAGE_ID_SAMPLER_FEEDBACK_MAP_INVALID_DIMENSION = 1257;
export const D3D12_MESSAGE_ID_SAMPLER_FEEDBACK_MAP_INVALID_SAMPLE_COUNT = 1258;
export const D3D12_MESSAGE_ID_SAMPLER_FEEDBACK_MAP_INVALID_SAMPLE_QUALITY = 1259;
export const D3D12_MESSAGE_ID_SAMPLER_FEEDBACK_MAP_INVALID_LAYOUT = 1260;
export const D3D12_MESSAGE_ID_SAMPLER_FEEDBACK_MAP_REQUIRES_UNORDERED_ACCESS_FLAG = 1261;
export const D3D12_MESSAGE_ID_SAMPLER_FEEDBACK_CREATE_UAV_NULL_ARGUMENTS = 1262;
export const D3D12_MESSAGE_ID_SAMPLER_FEEDBACK_UAV_REQUIRES_SAMPLER_FEEDBACK_CAPABILITY = 1263;
export const D3D12_MESSAGE_ID_SAMPLER_FEEDBACK_CREATE_UAV_REQUIRES_FEEDBACK_MAP_FORMAT = 1264;
export const D3D12_MESSAGE_ID_CREATEMESHSHADER_INVALIDSHADERBYTECODE = 1265;
export const D3D12_MESSAGE_ID_CREATEMESHSHADER_OUTOFMEMORY = 1266;
export const D3D12_MESSAGE_ID_CREATEMESHSHADERWITHSTREAMOUTPUT_INVALIDSHADERTYPE = 1267;
export const D3D12_MESSAGE_ID_RESOLVESUBRESOURCE_SAMPLER_FEEDBACK_TRANSCODE_INVALID_FORMAT = 1268;
export const D3D12_MESSAGE_ID_RESOLVESUBRESOURCE_SAMPLER_FEEDBACK_INVALID_MIP_LEVEL_COUNT = 1269;
export const D3D12_MESSAGE_ID_RESOLVESUBRESOURCE_SAMPLER_FEEDBACK_TRANSCODE_ARRAY_SIZE_MISMATCH = 1270;
export const D3D12_MESSAGE_ID_SAMPLER_FEEDBACK_CREATE_UAV_MISMATCHING_TARGETED_RESOURCE = 1271;
export const D3D12_MESSAGE_ID_CREATEMESHSHADER_OUTPUTEXCEEDSMAXSIZE = 1272;
export const D3D12_MESSAGE_ID_CREATEMESHSHADER_GROUPSHAREDEXCEEDSMAXSIZE = 1273;
export const D3D12_MESSAGE_ID_VERTEX_SHADER_OUTPUTTING_BOTH_VIEWPORT_ARRAY_INDEX_AND_SHADING_RATE_NOT_SUPPORTED_ON_DEVICE = 1274;
export const D3D12_MESSAGE_ID_MESH_SHADER_OUTPUTTING_BOTH_VIEWPORT_ARRAY_INDEX_AND_SHADING_RATE_NOT_SUPPORTED_ON_DEVICE = 1275;
export const D3D12_MESSAGE_ID_CREATEMESHSHADER_MISMATCHEDASMSPAYLOADSIZE = 1276;
export const D3D12_MESSAGE_ID_CREATE_ROOT_SIGNATURE_UNBOUNDED_STATIC_DESCRIPTORS = 1277;
export const D3D12_MESSAGE_ID_CREATEAMPLIFICATIONSHADER_INVALIDSHADERBYTECODE = 1278;
export const D3D12_MESSAGE_ID_CREATEAMPLIFICATIONSHADER_OUTOFMEMORY = 1279;
export const D3D12_MESSAGE_ID_CREATE_SHADERCACHESESSION = 1280;
export const D3D12_MESSAGE_ID_LIVE_SHADERCACHESESSION = 1281;
export const D3D12_MESSAGE_ID_DESTROY_SHADERCACHESESSION = 1282;
export const D3D12_MESSAGE_ID_CREATESHADERCACHESESSION_INVALIDARGS = 1283;
export const D3D12_MESSAGE_ID_CREATESHADERCACHESESSION_DISABLED = 1284;
export const D3D12_MESSAGE_ID_CREATESHADERCACHESESSION_ALREADYOPEN = 1285;
export const D3D12_MESSAGE_ID_SHADERCACHECONTROL_DEVELOPERMODE = 1286;
export const D3D12_MESSAGE_ID_SHADERCACHECONTROL_INVALIDFLAGS = 1287;
export const D3D12_MESSAGE_ID_SHADERCACHECONTROL_STATEALREADYSET = 1288;
export const D3D12_MESSAGE_ID_SHADERCACHECONTROL_IGNOREDFLAG = 1289;
export const D3D12_MESSAGE_ID_SHADERCACHESESSION_STOREVALUE_ALREADYPRESENT = 1290;
export const D3D12_MESSAGE_ID_SHADERCACHESESSION_STOREVALUE_HASHCOLLISION = 1291;
export const D3D12_MESSAGE_ID_SHADERCACHESESSION_STOREVALUE_CACHEFULL = 1292;
export const D3D12_MESSAGE_ID_SHADERCACHESESSION_FINDVALUE_NOTFOUND = 1293;
export const D3D12_MESSAGE_ID_SHADERCACHESESSION_CORRUPT = 1294;
export const D3D12_MESSAGE_ID_SHADERCACHESESSION_DISABLED = 1295;
export const D3D12_MESSAGE_ID_OVERSIZED_DISPATCH = 1296;
export const D3D12_MESSAGE_ID_CREATE_VIDEOENCODER = 1297;
export const D3D12_MESSAGE_ID_LIVE_VIDEOENCODER = 1298;
export const D3D12_MESSAGE_ID_DESTROY_VIDEOENCODER = 1299;
export const D3D12_MESSAGE_ID_CREATE_VIDEOENCODERHEAP = 1300;
export const D3D12_MESSAGE_ID_LIVE_VIDEOENCODERHEAP = 1301;
export const D3D12_MESSAGE_ID_DESTROY_VIDEOENCODERHEAP = 1302;
export const D3D12_MESSAGE_ID_COPYTEXTUREREGION_MISMATCH_ENCODE_REFERENCE_ONLY_FLAG = 1303;
export const D3D12_MESSAGE_ID_COPYRESOURCE_MISMATCH_ENCODE_REFERENCE_ONLY_FLAG = 1304;
export const D3D12_MESSAGE_ID_ENCODE_FRAME_INVALID_PARAMETERS = 1305;
export const D3D12_MESSAGE_ID_ENCODE_FRAME_UNSUPPORTED_PARAMETERS = 1306;
export const D3D12_MESSAGE_ID_RESOLVE_ENCODER_OUTPUT_METADATA_INVALID_PARAMETERS = 1307;
export const D3D12_MESSAGE_ID_RESOLVE_ENCODER_OUTPUT_METADATA_UNSUPPORTED_PARAMETERS = 1308;
export const D3D12_MESSAGE_ID_CREATE_VIDEO_ENCODER_INVALID_PARAMETERS = 1309;
export const D3D12_MESSAGE_ID_CREATE_VIDEO_ENCODER_UNSUPPORTED_PARAMETERS = 1310;
export const D3D12_MESSAGE_ID_CREATE_VIDEO_ENCODER_HEAP_INVALID_PARAMETERS = 1311;
export const D3D12_MESSAGE_ID_CREATE_VIDEO_ENCODER_HEAP_UNSUPPORTED_PARAMETERS = 1312;
export const D3D12_MESSAGE_ID_CREATECOMMANDLIST_NULL_COMMANDALLOCATOR = 1313;
export const D3D12_MESSAGE_ID_CLEAR_UNORDERED_ACCESS_VIEW_INVALID_DESCRIPTOR_HANDLE = 1314;
export const D3D12_MESSAGE_ID_DESCRIPTOR_HEAP_NOT_SHADER_VISIBLE = 1315;
export const D3D12_MESSAGE_ID_CREATEBLENDSTATE_BLENDOP_WARNING = 1316;
export const D3D12_MESSAGE_ID_CREATEBLENDSTATE_BLENDOPALPHA_WARNING = 1317;
export const D3D12_MESSAGE_ID_WRITE_COMBINE_PERFORMANCE_WARNING = 1318;
export const D3D12_MESSAGE_ID_RESOLVE_QUERY_INVALID_QUERY_STATE = 1319;
export const D3D12_MESSAGE_ID_SETPRIVATEDATA_NO_ACCESS = 1320;
export const D3D12_MESSAGE_ID_COMMAND_LIST_STATIC_DESCRIPTOR_SAMPLER_MODE_MISMATCH = 1321;
export const D3D12_MESSAGE_ID_GETCOPYABLEFOOTPRINTS_UNSUPPORTED_BUFFER_WIDTH = 1322;
export const D3D12_MESSAGE_ID_CREATEMESHSHADER_TOPOLOGY_MISMATCH = 1323;
export const D3D12_MESSAGE_ID_VRS_SUM_COMBINER_REQUIRES_CAPABILITY = 1324;
export const D3D12_MESSAGE_ID_SETTING_SHADING_RATE_FROM_MS_REQUIRES_CAPABILITY = 1325;
export const D3D12_MESSAGE_ID_SHADERCACHESESSION_SHADERCACHEDELETE_NOTSUPPORTED = 1326;
export const D3D12_MESSAGE_ID_SHADERCACHECONTROL_SHADERCACHECLEAR_NOTSUPPORTED = 1327;
export const D3D12_MESSAGE_ID_D3D12_MESSAGES_END = 1328;
export const D3D12_MESSAGE_CALLBACK_FLAG_NONE = 0;
export const D3D12_MESSAGE_CALLBACK_IGNORE_FILTERS = 1;
export const D3D12_AXIS_SHADING_RATE_1X = 0;
export const D3D12_AXIS_SHADING_RATE_2X = 1;
export const D3D12_AXIS_SHADING_RATE_4X = 2;
export const D3D12_SHADING_RATE_1X1 = 0;
export const D3D12_SHADING_RATE_1X2 = 1;
export const D3D12_SHADING_RATE_2X1 = 4;
export const D3D12_SHADING_RATE_2X2 = 5;
export const D3D12_SHADING_RATE_2X4 = 6;
export const D3D12_SHADING_RATE_4X2 = 9;
export const D3D12_SHADING_RATE_4X4 = 10;
export const D3D12_SHADING_RATE_COMBINER_PASSTHROUGH = 0;
export const D3D12_SHADING_RATE_COMBINER_OVERRIDE = 1;
export const D3D12_SHADING_RATE_COMBINER_MIN = 2;
export const D3D12_SHADING_RATE_COMBINER_MAX = 3;
export const D3D12_SHADING_RATE_COMBINER_SUM = 4;
export const D3D12_SHVER_PIXEL_SHADER = 0;
export const D3D12_SHVER_VERTEX_SHADER = 1;
export const D3D12_SHVER_GEOMETRY_SHADER = 2;
export const D3D12_SHVER_HULL_SHADER = 3;
export const D3D12_SHVER_DOMAIN_SHADER = 4;
export const D3D12_SHVER_COMPUTE_SHADER = 5;
export const D3D12_SHVER_RESERVED0 = 65520;
export const DXC_OUT_NONE = 0;
export const DXC_OUT_OBJECT = 1;
export const DXC_OUT_ERRORS = 2;
export const DXC_OUT_PDB = 3;
export const DXC_OUT_SHADER_HASH = 4;
export const DXC_OUT_DISASSEMBLY = 5;
export const DXC_OUT_HLSL = 6;
export const DXC_OUT_TEXT = 7;
export const DXC_OUT_REFLECTION = 8;
export const DXC_OUT_ROOT_SIGNATURE = 9;
export const DXC_OUT_EXTRA_OUTPUTS = 10;
export const DXC_OUT_FORCE_DWORD = `-1`;
export const D3DCOMPILER_STRIP_REFLECTION_DATA = 1;
export const D3DCOMPILER_STRIP_DEBUG_INFO = 2;
export const D3DCOMPILER_STRIP_TEST_BLOBS = 4;
export const D3DCOMPILER_STRIP_PRIVATE_DATA = 8;
export const D3DCOMPILER_STRIP_ROOT_SIGNATURE = 16;
export const D3DCOMPILER_STRIP_FORCE_DWORD = 2147483647;
export const D3D_BLOB_INPUT_SIGNATURE_BLOB = 0;
export const D3D_BLOB_OUTPUT_SIGNATURE_BLOB = 1;
export const D3D_BLOB_INPUT_AND_OUTPUT_SIGNATURE_BLOB = 2;
export const D3D_BLOB_PATCH_CONSTANT_SIGNATURE_BLOB = 3;
export const D3D_BLOB_ALL_SIGNATURE_BLOB = 4;
export const D3D_BLOB_DEBUG_INFO = 5;
export const D3D_BLOB_LEGACY_SHADER = 6;
export const D3D_BLOB_XNA_PREPASS_SHADER = 7;
export const D3D_BLOB_XNA_SHADER = 8;
export const D3D_BLOB_PDB = 9;
export const D3D_BLOB_PRIVATE_DATA = 10;
export const D3D_BLOB_ROOT_SIGNATURE = 11;
export const D3D_BLOB_DEBUG_NAME = 12;
export const D3D_BLOB_TEST_ALTERNATE_SHADER = 32768;
export const D3D_BLOB_TEST_COMPILE_DETAILS = 32769;
export const D3D_BLOB_TEST_COMPILE_PERF = 32770;
export const D3D_BLOB_TEST_COMPILE_REPORT = 32771;
export const D3DLIGHT_POINT = 1;
export const D3DLIGHT_SPOT = 2;
export const D3DLIGHT_DIRECTIONAL = 3;
export const D3DLIGHT_FORCE_DWORD = 2147483647;
export const D3DSHADE_FLAT = 1;
export const D3DSHADE_GOURAUD = 2;
export const D3DSHADE_PHONG = 3;
export const D3DSHADE_FORCE_DWORD = 2147483647;
export const D3DFILL_POINT = 1;
export const D3DFILL_WIREFRAME = 2;
export const D3DFILL_SOLID = 3;
export const D3DFILL_FORCE_DWORD = 2147483647;
export const D3DBLEND_ZERO = 1;
export const D3DBLEND_ONE = 2;
export const D3DBLEND_SRCCOLOR = 3;
export const D3DBLEND_INVSRCCOLOR = 4;
export const D3DBLEND_SRCALPHA = 5;
export const D3DBLEND_INVSRCALPHA = 6;
export const D3DBLEND_DESTALPHA = 7;
export const D3DBLEND_INVDESTALPHA = 8;
export const D3DBLEND_DESTCOLOR = 9;
export const D3DBLEND_INVDESTCOLOR = 10;
export const D3DBLEND_SRCALPHASAT = 11;
export const D3DBLEND_BOTHSRCALPHA = 12;
export const D3DBLEND_BOTHINVSRCALPHA = 13;
export const D3DBLEND_BLENDFACTOR = 14;
export const D3DBLEND_INVBLENDFACTOR = 15;
export const D3DBLEND_SRCCOLOR2 = 16;
export const D3DBLEND_INVSRCCOLOR2 = 17;
export const D3DBLEND_FORCE_DWORD = 2147483647;
export const D3DBLENDOP_ADD = 1;
export const D3DBLENDOP_SUBTRACT = 2;
export const D3DBLENDOP_REVSUBTRACT = 3;
export const D3DBLENDOP_MIN = 4;
export const D3DBLENDOP_MAX = 5;
export const D3DBLENDOP_FORCE_DWORD = 2147483647;
export const D3DTADDRESS_WRAP = 1;
export const D3DTADDRESS_MIRROR = 2;
export const D3DTADDRESS_CLAMP = 3;
export const D3DTADDRESS_BORDER = 4;
export const D3DTADDRESS_MIRRORONCE = 5;
export const D3DTADDRESS_FORCE_DWORD = 2147483647;
export const D3DCULL_NONE = 1;
export const D3DCULL_CW = 2;
export const D3DCULL_CCW = 3;
export const D3DCULL_FORCE_DWORD = 2147483647;
export const D3DCMP_NEVER = 1;
export const D3DCMP_LESS = 2;
export const D3DCMP_EQUAL = 3;
export const D3DCMP_LESSEQUAL = 4;
export const D3DCMP_GREATER = 5;
export const D3DCMP_NOTEQUAL = 6;
export const D3DCMP_GREATEREQUAL = 7;
export const D3DCMP_ALWAYS = 8;
export const D3DCMP_FORCE_DWORD = 2147483647;
export const D3DSTENCILOP_KEEP = 1;
export const D3DSTENCILOP_ZERO = 2;
export const D3DSTENCILOP_REPLACE = 3;
export const D3DSTENCILOP_INCRSAT = 4;
export const D3DSTENCILOP_DECRSAT = 5;
export const D3DSTENCILOP_INVERT = 6;
export const D3DSTENCILOP_INCR = 7;
export const D3DSTENCILOP_DECR = 8;
export const D3DSTENCILOP_FORCE_DWORD = 2147483647;
export const D3DFOG_NONE = 0;
export const D3DFOG_EXP = 1;
export const D3DFOG_EXP2 = 2;
export const D3DFOG_LINEAR = 3;
export const D3DFOG_FORCE_DWORD = 2147483647;
export const D3DZB_FALSE = 0;
export const D3DZB_TRUE = 1;
export const D3DZB_USEW = 2;
export const D3DZB_FORCE_DWORD = 2147483647;
export const D3DPT_POINTLIST = 1;
export const D3DPT_LINELIST = 2;
export const D3DPT_LINESTRIP = 3;
export const D3DPT_TRIANGLELIST = 4;
export const D3DPT_TRIANGLESTRIP = 5;
export const D3DPT_TRIANGLEFAN = 6;
export const D3DPT_FORCE_DWORD = 2147483647;
export const D3DTS_VIEW = 2;
export const D3DTS_PROJECTION = 3;
export const D3DTS_TEXTURE0 = 16;
export const D3DTS_TEXTURE1 = 17;
export const D3DTS_TEXTURE2 = 18;
export const D3DTS_TEXTURE3 = 19;
export const D3DTS_TEXTURE4 = 20;
export const D3DTS_TEXTURE5 = 21;
export const D3DTS_TEXTURE6 = 22;
export const D3DTS_TEXTURE7 = 23;
export const D3DTS_FORCE_DWORD = 2147483647;
export const D3DTS_WORLD = 256;
export const D3DTS_WORLD1 = 257;
export const D3DTS_WORLD2 = 258;
export const D3DTS_WORLD3 = 259;
export const D3DRS_ZENABLE = 7;
export const D3DRS_FILLMODE = 8;
export const D3DRS_SHADEMODE = 9;
export const D3DRS_ZWRITEENABLE = 14;
export const D3DRS_ALPHATESTENABLE = 15;
export const D3DRS_LASTPIXEL = 16;
export const D3DRS_SRCBLEND = 19;
export const D3DRS_DESTBLEND = 20;
export const D3DRS_CULLMODE = 22;
export const D3DRS_ZFUNC = 23;
export const D3DRS_ALPHAREF = 24;
export const D3DRS_ALPHAFUNC = 25;
export const D3DRS_DITHERENABLE = 26;
export const D3DRS_ALPHABLENDENABLE = 27;
export const D3DRS_FOGENABLE = 28;
export const D3DRS_SPECULARENABLE = 29;
export const D3DRS_FOGCOLOR = 34;
export const D3DRS_FOGTABLEMODE = 35;
export const D3DRS_FOGSTART = 36;
export const D3DRS_FOGEND = 37;
export const D3DRS_FOGDENSITY = 38;
export const D3DRS_RANGEFOGENABLE = 48;
export const D3DRS_STENCILENABLE = 52;
export const D3DRS_STENCILFAIL = 53;
export const D3DRS_STENCILZFAIL = 54;
export const D3DRS_STENCILPASS = 55;
export const D3DRS_STENCILFUNC = 56;
export const D3DRS_STENCILREF = 57;
export const D3DRS_STENCILMASK = 58;
export const D3DRS_STENCILWRITEMASK = 59;
export const D3DRS_TEXTUREFACTOR = 60;
export const D3DRS_WRAP0 = 128;
export const D3DRS_WRAP1 = 129;
export const D3DRS_WRAP2 = 130;
export const D3DRS_WRAP3 = 131;
export const D3DRS_WRAP4 = 132;
export const D3DRS_WRAP5 = 133;
export const D3DRS_WRAP6 = 134;
export const D3DRS_WRAP7 = 135;
export const D3DRS_CLIPPING = 136;
export const D3DRS_LIGHTING = 137;
export const D3DRS_AMBIENT = 139;
export const D3DRS_FOGVERTEXMODE = 140;
export const D3DRS_COLORVERTEX = 141;
export const D3DRS_LOCALVIEWER = 142;
export const D3DRS_NORMALIZENORMALS = 143;
export const D3DRS_DIFFUSEMATERIALSOURCE = 145;
export const D3DRS_SPECULARMATERIALSOURCE = 146;
export const D3DRS_AMBIENTMATERIALSOURCE = 147;
export const D3DRS_EMISSIVEMATERIALSOURCE = 148;
export const D3DRS_VERTEXBLEND = 151;
export const D3DRS_CLIPPLANEENABLE = 152;
export const D3DRS_POINTSIZE = 154;
export const D3DRS_POINTSIZE_MIN = 155;
export const D3DRS_POINTSPRITEENABLE = 156;
export const D3DRS_POINTSCALEENABLE = 157;
export const D3DRS_POINTSCALE_A = 158;
export const D3DRS_POINTSCALE_B = 159;
export const D3DRS_POINTSCALE_C = 160;
export const D3DRS_MULTISAMPLEANTIALIAS = 161;
export const D3DRS_MULTISAMPLEMASK = 162;
export const D3DRS_PATCHEDGESTYLE = 163;
export const D3DRS_DEBUGMONITORTOKEN = 165;
export const D3DRS_POINTSIZE_MAX = 166;
export const D3DRS_INDEXEDVERTEXBLENDENABLE = 167;
export const D3DRS_COLORWRITEENABLE = 168;
export const D3DRS_TWEENFACTOR = 170;
export const D3DRS_BLENDOP = 171;
export const D3DRS_POSITIONDEGREE = 172;
export const D3DRS_NORMALDEGREE = 173;
export const D3DRS_SCISSORTESTENABLE = 174;
export const D3DRS_SLOPESCALEDEPTHBIAS = 175;
export const D3DRS_ANTIALIASEDLINEENABLE = 176;
export const D3DRS_MINTESSELLATIONLEVEL = 178;
export const D3DRS_MAXTESSELLATIONLEVEL = 179;
export const D3DRS_ADAPTIVETESS_X = 180;
export const D3DRS_ADAPTIVETESS_Y = 181;
export const D3DRS_ADAPTIVETESS_Z = 182;
export const D3DRS_ADAPTIVETESS_W = 183;
export const D3DRS_ENABLEADAPTIVETESSELLATION = 184;
export const D3DRS_TWOSIDEDSTENCILMODE = 185;
export const D3DRS_CCW_STENCILFAIL = 186;
export const D3DRS_CCW_STENCILZFAIL = 187;
export const D3DRS_CCW_STENCILPASS = 188;
export const D3DRS_CCW_STENCILFUNC = 189;
export const D3DRS_COLORWRITEENABLE1 = 190;
export const D3DRS_COLORWRITEENABLE2 = 191;
export const D3DRS_COLORWRITEENABLE3 = 192;
export const D3DRS_BLENDFACTOR = 193;
export const D3DRS_SRGBWRITEENABLE = 194;
export const D3DRS_DEPTHBIAS = 195;
export const D3DRS_WRAP8 = 198;
export const D3DRS_WRAP9 = 199;
export const D3DRS_WRAP10 = 200;
export const D3DRS_WRAP11 = 201;
export const D3DRS_WRAP12 = 202;
export const D3DRS_WRAP13 = 203;
export const D3DRS_WRAP14 = 204;
export const D3DRS_WRAP15 = 205;
export const D3DRS_SEPARATEALPHABLENDENABLE = 206;
export const D3DRS_SRCBLENDALPHA = 207;
export const D3DRS_DESTBLENDALPHA = 208;
export const D3DRS_BLENDOPALPHA = 209;
export const D3DRS_FORCE_DWORD = 2147483647;
export const D3DMCS_MATERIAL = 0;
export const D3DMCS_COLOR1 = 1;
export const D3DMCS_COLOR2 = 2;
export const D3DMCS_FORCE_DWORD = 2147483647;
export const D3DTSS_COLOROP = 1;
export const D3DTSS_COLORARG1 = 2;
export const D3DTSS_COLORARG2 = 3;
export const D3DTSS_ALPHAOP = 4;
export const D3DTSS_ALPHAARG1 = 5;
export const D3DTSS_ALPHAARG2 = 6;
export const D3DTSS_BUMPENVMAT00 = 7;
export const D3DTSS_BUMPENVMAT01 = 8;
export const D3DTSS_BUMPENVMAT10 = 9;
export const D3DTSS_BUMPENVMAT11 = 10;
export const D3DTSS_TEXCOORDINDEX = 11;
export const D3DTSS_BUMPENVLSCALE = 22;
export const D3DTSS_BUMPENVLOFFSET = 23;
export const D3DTSS_TEXTURETRANSFORMFLAGS = 24;
export const D3DTSS_COLORARG0 = 26;
export const D3DTSS_ALPHAARG0 = 27;
export const D3DTSS_RESULTARG = 28;
export const D3DTSS_CONSTANT = 32;
export const D3DTSS_FORCE_DWORD = 2147483647;
export const D3DSAMP_ADDRESSU = 1;
export const D3DSAMP_ADDRESSV = 2;
export const D3DSAMP_ADDRESSW = 3;
export const D3DSAMP_BORDERCOLOR = 4;
export const D3DSAMP_MAGFILTER = 5;
export const D3DSAMP_MINFILTER = 6;
export const D3DSAMP_MIPFILTER = 7;
export const D3DSAMP_MIPMAPLODBIAS = 8;
export const D3DSAMP_MAXMIPLEVEL = 9;
export const D3DSAMP_MAXANISOTROPY = 10;
export const D3DSAMP_SRGBTEXTURE = 11;
export const D3DSAMP_ELEMENTINDEX = 12;
export const D3DSAMP_DMAPOFFSET = 13;
export const D3DSAMP_FORCE_DWORD = 2147483647;
export const D3DTOP_DISABLE = 1;
export const D3DTOP_SELECTARG1 = 2;
export const D3DTOP_SELECTARG2 = 3;
export const D3DTOP_MODULATE = 4;
export const D3DTOP_MODULATE2X = 5;
export const D3DTOP_MODULATE4X = 6;
export const D3DTOP_ADD = 7;
export const D3DTOP_ADDSIGNED = 8;
export const D3DTOP_ADDSIGNED2X = 9;
export const D3DTOP_SUBTRACT = 10;
export const D3DTOP_ADDSMOOTH = 11;
export const D3DTOP_BLENDDIFFUSEALPHA = 12;
export const D3DTOP_BLENDTEXTUREALPHA = 13;
export const D3DTOP_BLENDFACTORALPHA = 14;
export const D3DTOP_BLENDTEXTUREALPHAPM = 15;
export const D3DTOP_BLENDCURRENTALPHA = 16;
export const D3DTOP_PREMODULATE = 17;
export const D3DTOP_MODULATEALPHA_ADDCOLOR = 18;
export const D3DTOP_MODULATECOLOR_ADDALPHA = 19;
export const D3DTOP_MODULATEINVALPHA_ADDCOLOR = 20;
export const D3DTOP_MODULATEINVCOLOR_ADDALPHA = 21;
export const D3DTOP_BUMPENVMAP = 22;
export const D3DTOP_BUMPENVMAPLUMINANCE = 23;
export const D3DTOP_DOTPRODUCT3 = 24;
export const D3DTOP_MULTIPLYADD = 25;
export const D3DTOP_LERP = 26;
export const D3DTOP_FORCE_DWORD = 2147483647;
export const D3DTEXF_NONE = 0;
export const D3DTEXF_POINT = 1;
export const D3DTEXF_LINEAR = 2;
export const D3DTEXF_ANISOTROPIC = 3;
export const D3DTEXF_PYRAMIDALQUAD = 6;
export const D3DTEXF_GAUSSIANQUAD = 7;
export const D3DTEXF_CONVOLUTIONMONO = 8;
export const D3DTEXF_FORCE_DWORD = 2147483647;
export const D3DDECLUSAGE_POSITION = 0;
export const D3DDECLUSAGE_BLENDWEIGHT = 1;
export const D3DDECLUSAGE_BLENDINDICES = 2;
export const D3DDECLUSAGE_NORMAL = 3;
export const D3DDECLUSAGE_PSIZE = 4;
export const D3DDECLUSAGE_TEXCOORD = 5;
export const D3DDECLUSAGE_TANGENT = 6;
export const D3DDECLUSAGE_BINORMAL = 7;
export const D3DDECLUSAGE_TESSFACTOR = 8;
export const D3DDECLUSAGE_POSITIONT = 9;
export const D3DDECLUSAGE_COLOR = 10;
export const D3DDECLUSAGE_FOG = 11;
export const D3DDECLUSAGE_DEPTH = 12;
export const D3DDECLUSAGE_SAMPLE = 13;
export const D3DDECLMETHOD_DEFAULT = 0;
export const D3DDECLMETHOD_PARTIALU = 1;
export const D3DDECLMETHOD_PARTIALV = 2;
export const D3DDECLMETHOD_CROSSUV = 3;
export const D3DDECLMETHOD_UV = 4;
export const D3DDECLMETHOD_LOOKUP = 5;
export const D3DDECLMETHOD_LOOKUPPRESAMPLED = 6;
export const D3DDECLTYPE_FLOAT1 = 0;
export const D3DDECLTYPE_FLOAT2 = 1;
export const D3DDECLTYPE_FLOAT3 = 2;
export const D3DDECLTYPE_FLOAT4 = 3;
export const D3DDECLTYPE_D3DCOLOR = 4;
export const D3DDECLTYPE_UBYTE4 = 5;
export const D3DDECLTYPE_SHORT2 = 6;
export const D3DDECLTYPE_SHORT4 = 7;
export const D3DDECLTYPE_UBYTE4N = 8;
export const D3DDECLTYPE_SHORT2N = 9;
export const D3DDECLTYPE_SHORT4N = 10;
export const D3DDECLTYPE_USHORT2N = 11;
export const D3DDECLTYPE_USHORT4N = 12;
export const D3DDECLTYPE_UDEC3 = 13;
export const D3DDECLTYPE_DEC3N = 14;
export const D3DDECLTYPE_FLOAT16_2 = 15;
export const D3DDECLTYPE_FLOAT16_4 = 16;
export const D3DDECLTYPE_UNUSED = 17;
export const D3DSIO_NOP = 0;
export const D3DSIO_MOV = 1;
export const D3DSIO_ADD = 2;
export const D3DSIO_SUB = 3;
export const D3DSIO_MAD = 4;
export const D3DSIO_MUL = 5;
export const D3DSIO_RCP = 6;
export const D3DSIO_RSQ = 7;
export const D3DSIO_DP3 = 8;
export const D3DSIO_DP4 = 9;
export const D3DSIO_MIN = 10;
export const D3DSIO_MAX = 11;
export const D3DSIO_SLT = 12;
export const D3DSIO_SGE = 13;
export const D3DSIO_EXP = 14;
export const D3DSIO_LOG = 15;
export const D3DSIO_LIT = 16;
export const D3DSIO_DST = 17;
export const D3DSIO_LRP = 18;
export const D3DSIO_FRC = 19;
export const D3DSIO_M4x4 = 20;
export const D3DSIO_M4x3 = 21;
export const D3DSIO_M3x4 = 22;
export const D3DSIO_M3x3 = 23;
export const D3DSIO_M3x2 = 24;
export const D3DSIO_CALL = 25;
export const D3DSIO_CALLNZ = 26;
export const D3DSIO_LOOP = 27;
export const D3DSIO_RET = 28;
export const D3DSIO_ENDLOOP = 29;
export const D3DSIO_LABEL = 30;
export const D3DSIO_DCL = 31;
export const D3DSIO_POW = 32;
export const D3DSIO_CRS = 33;
export const D3DSIO_SGN = 34;
export const D3DSIO_ABS = 35;
export const D3DSIO_NRM = 36;
export const D3DSIO_SINCOS = 37;
export const D3DSIO_REP = 38;
export const D3DSIO_ENDREP = 39;
export const D3DSIO_IF = 40;
export const D3DSIO_IFC = 41;
export const D3DSIO_ELSE = 42;
export const D3DSIO_ENDIF = 43;
export const D3DSIO_BREAK = 44;
export const D3DSIO_BREAKC = 45;
export const D3DSIO_MOVA = 46;
export const D3DSIO_DEFB = 47;
export const D3DSIO_DEFI = 48;
export const D3DSIO_TEXCOORD = 64;
export const D3DSIO_TEXKILL = 65;
export const D3DSIO_TEX = 66;
export const D3DSIO_TEXBEM = 67;
export const D3DSIO_TEXBEML = 68;
export const D3DSIO_TEXREG2AR = 69;
export const D3DSIO_TEXREG2GB = 70;
export const D3DSIO_TEXM3x2PAD = 71;
export const D3DSIO_TEXM3x2TEX = 72;
export const D3DSIO_TEXM3x3PAD = 73;
export const D3DSIO_TEXM3x3TEX = 74;
export const D3DSIO_RESERVED0 = 75;
export const D3DSIO_TEXM3x3SPEC = 76;
export const D3DSIO_TEXM3x3VSPEC = 77;
export const D3DSIO_EXPP = 78;
export const D3DSIO_LOGP = 79;
export const D3DSIO_CND = 80;
export const D3DSIO_DEF = 81;
export const D3DSIO_TEXREG2RGB = 82;
export const D3DSIO_TEXDP3TEX = 83;
export const D3DSIO_TEXM3x2DEPTH = 84;
export const D3DSIO_TEXDP3 = 85;
export const D3DSIO_TEXM3x3 = 86;
export const D3DSIO_TEXDEPTH = 87;
export const D3DSIO_CMP = 88;
export const D3DSIO_BEM = 89;
export const D3DSIO_DP2ADD = 90;
export const D3DSIO_DSX = 91;
export const D3DSIO_DSY = 92;
export const D3DSIO_TEXLDD = 93;
export const D3DSIO_SETP = 94;
export const D3DSIO_TEXLDL = 95;
export const D3DSIO_BREAKP = 96;
export const D3DSIO_PHASE = 65533;
export const D3DSIO_COMMENT = 65534;
export const D3DSIO_END = 65535;
export const D3DSIO_FORCE_DWORD = 2147483647;
export const D3DSPC_RESERVED0 = 0;
export const D3DSPC_GT = 1;
export const D3DSPC_EQ = 2;
export const D3DSPC_GE = 3;
export const D3DSPC_LT = 4;
export const D3DSPC_NE = 5;
export const D3DSPC_LE = 6;
export const D3DSPC_RESERVED1 = 7;
export const D3DSTT_UNKNOWN = 0;
export const D3DSTT_2D = 268435456;
export const D3DSTT_CUBE = 402653184;
export const D3DSTT_VOLUME = 536870912;
export const D3DSTT_FORCE_DWORD = 2147483647;
export const D3DSPR_TEMP = 0;
export const D3DSPR_INPUT = 1;
export const D3DSPR_CONST = 2;
export const D3DSPR_ADDR = 3;
export const D3DSPR_TEXTURE = 3;
export const D3DSPR_RASTOUT = 4;
export const D3DSPR_ATTROUT = 5;
export const D3DSPR_TEXCRDOUT = 6;
export const D3DSPR_OUTPUT = 6;
export const D3DSPR_CONSTINT = 7;
export const D3DSPR_COLOROUT = 8;
export const D3DSPR_DEPTHOUT = 9;
export const D3DSPR_SAMPLER = 10;
export const D3DSPR_CONST2 = 11;
export const D3DSPR_CONST3 = 12;
export const D3DSPR_CONST4 = 13;
export const D3DSPR_CONSTBOOL = 14;
export const D3DSPR_LOOP = 15;
export const D3DSPR_TEMPFLOAT16 = 16;
export const D3DSPR_MISCTYPE = 17;
export const D3DSPR_LABEL = 18;
export const D3DSPR_PREDICATE = 19;
export const D3DSPR_FORCE_DWORD = 2147483647;
export const D3DSMO_POSITION = 0;
export const D3DSMO_FACE = 1;
export const D3DSRO_POSITION = 0;
export const D3DSRO_FOG = 1;
export const D3DSRO_POINT_SIZE = 2;
export const D3DSRO_FORCE_DWORD = 2147483647;
export const D3DVS_ADDRMODE_ABSOLUTE = 0;
export const D3DVS_ADDRMODE_RELATIVE = 8192;
export const D3DVS_ADDRMODE_FORCE_DWORD = 2147483647;
export const D3DSHADER_ADDRMODE_ABSOLUTE = 0;
export const D3DSHADER_ADDRMODE_RELATIVE = 8192;
export const D3DSHADER_ADDRMODE_FORCE_DWORD = 2147483647;
export const D3DSPSM_NONE = 0;
export const D3DSPSM_NEG = 16777216;
export const D3DSPSM_BIAS = 33554432;
export const D3DSPSM_BIASNEG = 50331648;
export const D3DSPSM_SIGN = 67108864;
export const D3DSPSM_SIGNNEG = 83886080;
export const D3DSPSM_COMP = 100663296;
export const D3DSPSM_X2 = 117440512;
export const D3DSPSM_X2NEG = 134217728;
export const D3DSPSM_DZ = 150994944;
export const D3DSPSM_DW = 167772160;
export const D3DSPSM_ABS = 184549376;
export const D3DSPSM_ABSNEG = 201326592;
export const D3DSPSM_NOT = 218103808;
export const D3DSPSM_FORCE_DWORD = 2147483647;
export const D3DMP_DEFAULT = 0;
export const D3DMP_16 = 1;
export const D3DMP_2_8 = 2;
export const D3DBASIS_BEZIER = 0;
export const D3DBASIS_BSPLINE = 1;
export const D3DBASIS_CATMULL_ROM = 2;
export const D3DBASIS_FORCE_DWORD = 2147483647;
export const D3DDEGREE_LINEAR = 1;
export const D3DDEGREE_QUADRATIC = 2;
export const D3DDEGREE_CUBIC = 3;
export const D3DDEGREE_QUINTIC = 5;
export const D3DDEGREE_FORCE_DWORD = 2147483647;
export const D3DPATCHEDGE_DISCRETE = 0;
export const D3DPATCHEDGE_CONTINUOUS = 1;
export const D3DPATCHEDGE_FORCE_DWORD = 2147483647;
export const D3DSBT_ALL = 1;
export const D3DSBT_PIXELSTATE = 2;
export const D3DSBT_VERTEXSTATE = 3;
export const D3DSBT_FORCE_DWORD = 2147483647;
export const D3DVBF_DISABLE = 0;
export const D3DVBF_1WEIGHTS = 1;
export const D3DVBF_2WEIGHTS = 2;
export const D3DVBF_3WEIGHTS = 3;
export const D3DVBF_TWEENING = 255;
export const D3DVBF_0WEIGHTS = 256;
export const D3DVBF_FORCE_DWORD = 2147483647;
export const D3DTTFF_DISABLE = 0;
export const D3DTTFF_COUNT1 = 1;
export const D3DTTFF_COUNT2 = 2;
export const D3DTTFF_COUNT3 = 3;
export const D3DTTFF_COUNT4 = 4;
export const D3DTTFF_PROJECTED = 256;
export const D3DTTFF_FORCE_DWORD = 2147483647;
export const D3DDEVTYPE_HAL = 1;
export const D3DDEVTYPE_REF = 2;
export const D3DDEVTYPE_SW = 3;
export const D3DDEVTYPE_NULLREF = 4;
export const D3DDEVTYPE_FORCE_DWORD = 2147483647;
export const D3DMULTISAMPLE_NONE = 0;
export const D3DMULTISAMPLE_NONMASKABLE = 1;
export const D3DMULTISAMPLE_2_SAMPLES = 2;
export const D3DMULTISAMPLE_3_SAMPLES = 3;
export const D3DMULTISAMPLE_4_SAMPLES = 4;
export const D3DMULTISAMPLE_5_SAMPLES = 5;
export const D3DMULTISAMPLE_6_SAMPLES = 6;
export const D3DMULTISAMPLE_7_SAMPLES = 7;
export const D3DMULTISAMPLE_8_SAMPLES = 8;
export const D3DMULTISAMPLE_9_SAMPLES = 9;
export const D3DMULTISAMPLE_10_SAMPLES = 10;
export const D3DMULTISAMPLE_11_SAMPLES = 11;
export const D3DMULTISAMPLE_12_SAMPLES = 12;
export const D3DMULTISAMPLE_13_SAMPLES = 13;
export const D3DMULTISAMPLE_14_SAMPLES = 14;
export const D3DMULTISAMPLE_15_SAMPLES = 15;
export const D3DMULTISAMPLE_16_SAMPLES = 16;
export const D3DMULTISAMPLE_FORCE_DWORD = 2147483647;
export const D3DFMT_UNKNOWN = 0;
export const D3DFMT_R8G8B8 = 20;
export const D3DFMT_A8R8G8B8 = 21;
export const D3DFMT_X8R8G8B8 = 22;
export const D3DFMT_R5G6B5 = 23;
export const D3DFMT_X1R5G5B5 = 24;
export const D3DFMT_A1R5G5B5 = 25;
export const D3DFMT_A4R4G4B4 = 26;
export const D3DFMT_R3G3B2 = 27;
export const D3DFMT_A8 = 28;
export const D3DFMT_A8R3G3B2 = 29;
export const D3DFMT_X4R4G4B4 = 30;
export const D3DFMT_A2B10G10R10 = 31;
export const D3DFMT_A8B8G8R8 = 32;
export const D3DFMT_X8B8G8R8 = 33;
export const D3DFMT_G16R16 = 34;
export const D3DFMT_A2R10G10B10 = 35;
export const D3DFMT_A16B16G16R16 = 36;
export const D3DFMT_A8P8 = 40;
export const D3DFMT_P8 = 41;
export const D3DFMT_L8 = 50;
export const D3DFMT_A8L8 = 51;
export const D3DFMT_A4L4 = 52;
export const D3DFMT_V8U8 = 60;
export const D3DFMT_L6V5U5 = 61;
export const D3DFMT_X8L8V8U8 = 62;
export const D3DFMT_Q8W8V8U8 = 63;
export const D3DFMT_V16U16 = 64;
export const D3DFMT_A2W10V10U10 = 67;
export const D3DFMT_UYVY = 1498831189;
export const D3DFMT_R8G8_B8G8 = 1195525970;
export const D3DFMT_YUY2 = 844715353;
export const D3DFMT_G8R8_G8B8 = 1111970375;
export const D3DFMT_DXT1 = 827611204;
export const D3DFMT_DXT2 = 844388420;
export const D3DFMT_DXT3 = 861165636;
export const D3DFMT_DXT4 = 877942852;
export const D3DFMT_DXT5 = 894720068;
export const D3DFMT_D16_LOCKABLE = 70;
export const D3DFMT_D32 = 71;
export const D3DFMT_D15S1 = 73;
export const D3DFMT_D24S8 = 75;
export const D3DFMT_D24X8 = 77;
export const D3DFMT_D24X4S4 = 79;
export const D3DFMT_D16 = 80;
export const D3DFMT_D32F_LOCKABLE = 82;
export const D3DFMT_D24FS8 = 83;
export const D3DFMT_D32_LOCKABLE = 84;
export const D3DFMT_S8_LOCKABLE = 85;
export const D3DFMT_L16 = 81;
export const D3DFMT_VERTEXDATA = 100;
export const D3DFMT_INDEX16 = 101;
export const D3DFMT_INDEX32 = 102;
export const D3DFMT_Q16W16V16U16 = 110;
export const D3DFMT_MULTI2_ARGB8 = 827606349;
export const D3DFMT_R16F = 111;
export const D3DFMT_G16R16F = 112;
export const D3DFMT_A16B16G16R16F = 113;
export const D3DFMT_R32F = 114;
export const D3DFMT_G32R32F = 115;
export const D3DFMT_A32B32G32R32F = 116;
export const D3DFMT_CxV8U8 = 117;
export const D3DFMT_A1 = 118;
export const D3DFMT_A2B10G10R10_XR_BIAS = 119;
export const D3DFMT_BINARYBUFFER = 199;
export const D3DFMT_FORCE_DWORD = 2147483647;
export const D3DSWAPEFFECT_DISCARD = 1;
export const D3DSWAPEFFECT_FLIP = 2;
export const D3DSWAPEFFECT_COPY = 3;
export const D3DSWAPEFFECT_OVERLAY = 4;
export const D3DSWAPEFFECT_FLIPEX = 5;
export const D3DSWAPEFFECT_FORCE_DWORD = 2147483647;
export const D3DPOOL_DEFAULT = 0;
export const D3DPOOL_MANAGED = 1;
export const D3DPOOL_SYSTEMMEM = 2;
export const D3DPOOL_SCRATCH = 3;
export const D3DPOOL_FORCE_DWORD = 2147483647;
export const D3DBACKBUFFER_TYPE_MONO = 0;
export const D3DBACKBUFFER_TYPE_LEFT = 1;
export const D3DBACKBUFFER_TYPE_RIGHT = 2;
export const D3DBACKBUFFER_TYPE_FORCE_DWORD = 2147483647;
export const D3DRTYPE_SURFACE = 1;
export const D3DRTYPE_VOLUME = 2;
export const D3DRTYPE_TEXTURE = 3;
export const D3DRTYPE_VOLUMETEXTURE = 4;
export const D3DRTYPE_CUBETEXTURE = 5;
export const D3DRTYPE_VERTEXBUFFER = 6;
export const D3DRTYPE_INDEXBUFFER = 7;
export const D3DRTYPE_FORCE_DWORD = 2147483647;
export const D3DCUBEMAP_FACE_POSITIVE_X = 0;
export const D3DCUBEMAP_FACE_NEGATIVE_X = 1;
export const D3DCUBEMAP_FACE_POSITIVE_Y = 2;
export const D3DCUBEMAP_FACE_NEGATIVE_Y = 3;
export const D3DCUBEMAP_FACE_POSITIVE_Z = 4;
export const D3DCUBEMAP_FACE_NEGATIVE_Z = 5;
export const D3DCUBEMAP_FACE_FORCE_DWORD = 2147483647;
export const D3DDMT_ENABLE = 0;
export const D3DDMT_DISABLE = 1;
export const D3DDMT_FORCE_DWORD = 2147483647;
export const D3DQUERYTYPE_VCACHE = 4;
export const D3DQUERYTYPE_RESOURCEMANAGER = 5;
export const D3DQUERYTYPE_VERTEXSTATS = 6;
export const D3DQUERYTYPE_EVENT = 8;
export const D3DQUERYTYPE_OCCLUSION = 9;
export const D3DQUERYTYPE_TIMESTAMP = 10;
export const D3DQUERYTYPE_TIMESTAMPDISJOINT = 11;
export const D3DQUERYTYPE_TIMESTAMPFREQ = 12;
export const D3DQUERYTYPE_PIPELINETIMINGS = 13;
export const D3DQUERYTYPE_INTERFACETIMINGS = 14;
export const D3DQUERYTYPE_VERTEXTIMINGS = 15;
export const D3DQUERYTYPE_PIXELTIMINGS = 16;
export const D3DQUERYTYPE_BANDWIDTHTIMINGS = 17;
export const D3DQUERYTYPE_CACHEUTILIZATION = 18;
export const D3DQUERYTYPE_MEMORYPRESSURE = 19;
export const D3DCOMPOSERECTS_COPY = 1;
export const D3DCOMPOSERECTS_OR = 2;
export const D3DCOMPOSERECTS_AND = 3;
export const D3DCOMPOSERECTS_NEG = 4;
export const D3DCOMPOSERECTS_FORCE_DWORD = 2147483647;
export const D3DSCANLINEORDERING_UNKNOWN = 0;
export const D3DSCANLINEORDERING_PROGRESSIVE = 1;
export const D3DSCANLINEORDERING_INTERLACED = 2;
export const D3DDISPLAYROTATION_IDENTITY = 1;
export const D3DDISPLAYROTATION_90 = 2;
export const D3DDISPLAYROTATION_180 = 3;
export const D3DDISPLAYROTATION_270 = 4;
export const D3DAUTHENTICATEDCHANNEL_D3D9 = 1;
export const D3DAUTHENTICATEDCHANNEL_DRIVER_SOFTWARE = 2;
export const D3DAUTHENTICATEDCHANNEL_DRIVER_HARDWARE = 3;
export const PROCESSIDTYPE_UNKNOWN = 0;
export const PROCESSIDTYPE_DWM = 1;
export const PROCESSIDTYPE_HANDLE = 2;
export const D3DBUSTYPE_OTHER = 0;
export const D3DBUSTYPE_PCI = 1;
export const D3DBUSTYPE_PCIX = 2;
export const D3DBUSTYPE_PCIEXPRESS = 3;
export const D3DBUSTYPE_AGP = 4;
export const D3DBUSIMPL_MODIFIER_INSIDE_OF_CHIPSET = 65536;
export const D3DBUSIMPL_MODIFIER_TRACKS_ON_MOTHER_BOARD_TO_CHIP = 131072;
export const D3DBUSIMPL_MODIFIER_TRACKS_ON_MOTHER_BOARD_TO_SOCKET = 196608;
export const D3DBUSIMPL_MODIFIER_DAUGHTER_BOARD_CONNECTOR = 262144;
export const D3DBUSIMPL_MODIFIER_DAUGHTER_BOARD_CONNECTOR_INSIDE_OF_NUAE = 327680;
export const D3DBUSIMPL_MODIFIER_NON_STANDARD = `-2147483648`;

// Structs

export type PSTR = Deno.PointerValue | Uint8Array | null;

/**
 * Windows.Win32.Graphics.Direct3D.D3D_SHADER_MACRO (size: 16)
 */
export interface D3D_SHADER_MACRO {
  /** Windows.Win32.Foundation.PSTR */
  Name: string | null | Uint8Array;
  /** Windows.Win32.Foundation.PSTR */
  Definition: string | null | Uint8Array;
}

export const sizeofD3D_SHADER_MACRO = 16;

export function allocD3D_SHADER_MACRO(data?: Partial<D3D_SHADER_MACRO>): Uint8Array {
  const buf = new Uint8Array(sizeofD3D_SHADER_MACRO);
  const view = new DataView(buf.buffer);
  // 0x00: buffer
  if (data?.Name !== undefined) {
    (buf as any)._f0 = util.pstrToFfi(data.Name);
    view.setBigUint64(0, (buf as any)._f0 === null ? 0n : util.toBigInt(Deno.UnsafePointer.of((buf as any)._f0)), true);
  }
  // 0x08: buffer
  if (data?.Definition !== undefined) {
    (buf as any)._f8 = util.pstrToFfi(data.Definition);
    view.setBigUint64(8, (buf as any)._f8 === null ? 0n : util.toBigInt(Deno.UnsafePointer.of((buf as any)._f8)), true);
  }
  return buf;
}

export class D3D_SHADER_MACROView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: buffer
  get Name(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(0, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x08: buffer
  get Definition(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(8, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: buffer
  set Name(value: Uint8Array | Deno.PointerValue | null) {
    (this.buf as any)._f0 = value;
    this.view.setBigUint64(0, util.toBigInt(util.toPointer((this.buf as any)._f0)), true);
  }

  // 0x08: buffer
  set Definition(value: Uint8Array | Deno.PointerValue | null) {
    (this.buf as any)._f8 = value;
    this.view.setBigUint64(8, util.toBigInt(util.toPointer((this.buf as any)._f8)), true);
  }
}

/**
 * Windows.Win32.Graphics.Direct3D10.D3D10_INPUT_ELEMENT_DESC (size: 32)
 */
export interface D3D10_INPUT_ELEMENT_DESC {
  /** Windows.Win32.Foundation.PSTR */
  SemanticName: string | null | Uint8Array;
  /** u32 */
  SemanticIndex: number;
  /** Windows.Win32.Graphics.Dxgi.Common.DXGI_FORMAT */
  Format: DXGI_FORMAT;
  /** u32 */
  InputSlot: number;
  /** u32 */
  AlignedByteOffset: number;
  /** Windows.Win32.Graphics.Direct3D10.D3D10_INPUT_CLASSIFICATION */
  InputSlotClass: D3D10_INPUT_CLASSIFICATION;
  /** u32 */
  InstanceDataStepRate: number;
}

export const sizeofD3D10_INPUT_ELEMENT_DESC = 32;

export function allocD3D10_INPUT_ELEMENT_DESC(data?: Partial<D3D10_INPUT_ELEMENT_DESC>): Uint8Array {
  const buf = new Uint8Array(sizeofD3D10_INPUT_ELEMENT_DESC);
  const view = new DataView(buf.buffer);
  // 0x00: buffer
  if (data?.SemanticName !== undefined) {
    (buf as any)._f0 = util.pstrToFfi(data.SemanticName);
    view.setBigUint64(0, (buf as any)._f0 === null ? 0n : util.toBigInt(Deno.UnsafePointer.of((buf as any)._f0)), true);
  }
  // 0x08: u32
  if (data?.SemanticIndex !== undefined) view.setUint32(8, Number(data.SemanticIndex), true);
  // 0x0c: u32
  if (data?.Format !== undefined) view.setUint32(12, Number(data.Format), true);
  // 0x10: u32
  if (data?.InputSlot !== undefined) view.setUint32(16, Number(data.InputSlot), true);
  // 0x14: u32
  if (data?.AlignedByteOffset !== undefined) view.setUint32(20, Number(data.AlignedByteOffset), true);
  // 0x18: i32
  if (data?.InputSlotClass !== undefined) view.setInt32(24, Number(data.InputSlotClass), true);
  // 0x1c: u32
  if (data?.InstanceDataStepRate !== undefined) view.setUint32(28, Number(data.InstanceDataStepRate), true);
  return buf;
}

export class D3D10_INPUT_ELEMENT_DESCView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: buffer
  get SemanticName(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(0, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x08: u32
  get SemanticIndex(): number {
    return this.view.getUint32(8, true);
  }

  // 0x0c: u32
  get Format(): number {
    return this.view.getUint32(12, true);
  }

  // 0x10: u32
  get InputSlot(): number {
    return this.view.getUint32(16, true);
  }

  // 0x14: u32
  get AlignedByteOffset(): number {
    return this.view.getUint32(20, true);
  }

  // 0x18: i32
  get InputSlotClass(): number {
    return this.view.getInt32(24, true);
  }

  // 0x1c: u32
  get InstanceDataStepRate(): number {
    return this.view.getUint32(28, true);
  }

  // 0x00: buffer
  set SemanticName(value: Uint8Array | Deno.PointerValue | null) {
    (this.buf as any)._f0 = value;
    this.view.setBigUint64(0, util.toBigInt(util.toPointer((this.buf as any)._f0)), true);
  }

  // 0x08: u32
  set SemanticIndex(value: number) {
    this.view.setUint32(8, value, true);
  }

  // 0x0c: u32
  set Format(value: number) {
    this.view.setUint32(12, value, true);
  }

  // 0x10: u32
  set InputSlot(value: number) {
    this.view.setUint32(16, value, true);
  }

  // 0x14: u32
  set AlignedByteOffset(value: number) {
    this.view.setUint32(20, value, true);
  }

  // 0x18: i32
  set InputSlotClass(value: number) {
    this.view.setInt32(24, value, true);
  }

  // 0x1c: u32
  set InstanceDataStepRate(value: number) {
    this.view.setUint32(28, value, true);
  }
}

/**
 * Windows.Win32.Graphics.Direct3D10.D3D10_SO_DECLARATION_ENTRY (size: 16)
 */
export interface D3D10_SO_DECLARATION_ENTRY {
  /** Windows.Win32.Foundation.PSTR */
  SemanticName: string | null | Uint8Array;
  /** u32 */
  SemanticIndex: number;
  /** u8 */
  StartComponent: number;
  /** u8 */
  ComponentCount: number;
  /** u8 */
  OutputSlot: number;
}

export const sizeofD3D10_SO_DECLARATION_ENTRY = 16;

export function allocD3D10_SO_DECLARATION_ENTRY(data?: Partial<D3D10_SO_DECLARATION_ENTRY>): Uint8Array {
  const buf = new Uint8Array(sizeofD3D10_SO_DECLARATION_ENTRY);
  const view = new DataView(buf.buffer);
  // 0x00: buffer
  if (data?.SemanticName !== undefined) {
    (buf as any)._f0 = util.pstrToFfi(data.SemanticName);
    view.setBigUint64(0, (buf as any)._f0 === null ? 0n : util.toBigInt(Deno.UnsafePointer.of((buf as any)._f0)), true);
  }
  // 0x08: u32
  if (data?.SemanticIndex !== undefined) view.setUint32(8, Number(data.SemanticIndex), true);
  // 0x0c: u8
  if (data?.StartComponent !== undefined) view.setUint8(12, Number(data.StartComponent));
  // 0x0d: u8
  if (data?.ComponentCount !== undefined) view.setUint8(13, Number(data.ComponentCount));
  // 0x0e: u8
  if (data?.OutputSlot !== undefined) view.setUint8(14, Number(data.OutputSlot));
  // 0x0f: pad1
  return buf;
}

export class D3D10_SO_DECLARATION_ENTRYView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: buffer
  get SemanticName(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(0, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x08: u32
  get SemanticIndex(): number {
    return this.view.getUint32(8, true);
  }

  // 0x0c: u8
  get StartComponent(): number {
    return this.view.getUint8(12);
  }

  // 0x0d: u8
  get ComponentCount(): number {
    return this.view.getUint8(13);
  }

  // 0x0e: u8
  get OutputSlot(): number {
    return this.view.getUint8(14);
  }

  // 0x0f: pad1

  // 0x00: buffer
  set SemanticName(value: Uint8Array | Deno.PointerValue | null) {
    (this.buf as any)._f0 = value;
    this.view.setBigUint64(0, util.toBigInt(util.toPointer((this.buf as any)._f0)), true);
  }

  // 0x08: u32
  set SemanticIndex(value: number) {
    this.view.setUint32(8, value, true);
  }

  // 0x0c: u8
  set StartComponent(value: number) {
    this.view.setUint8(12, value);
  }

  // 0x0d: u8
  set ComponentCount(value: number) {
    this.view.setUint8(13, value);
  }

  // 0x0e: u8
  set OutputSlot(value: number) {
    this.view.setUint8(14, value);
  }

  // 0x0f: pad1
}

/**
 * Windows.Win32.Graphics.Direct3D10.D3D10_VIEWPORT (size: 24)
 */
export interface D3D10_VIEWPORT {
  /** i32 */
  TopLeftX: number;
  /** i32 */
  TopLeftY: number;
  /** u32 */
  Width: number;
  /** u32 */
  Height: number;
  /** f32 */
  MinDepth: number;
  /** f32 */
  MaxDepth: number;
}

export const sizeofD3D10_VIEWPORT = 24;

export function allocD3D10_VIEWPORT(data?: Partial<D3D10_VIEWPORT>): Uint8Array {
  const buf = new Uint8Array(sizeofD3D10_VIEWPORT);
  const view = new DataView(buf.buffer);
  // 0x00: i32
  if (data?.TopLeftX !== undefined) view.setInt32(0, Number(data.TopLeftX), true);
  // 0x04: i32
  if (data?.TopLeftY !== undefined) view.setInt32(4, Number(data.TopLeftY), true);
  // 0x08: u32
  if (data?.Width !== undefined) view.setUint32(8, Number(data.Width), true);
  // 0x0c: u32
  if (data?.Height !== undefined) view.setUint32(12, Number(data.Height), true);
  // 0x10: f32
  if (data?.MinDepth !== undefined) view.setFloat32(16, Number(data.MinDepth), true);
  // 0x14: f32
  if (data?.MaxDepth !== undefined) view.setFloat32(20, Number(data.MaxDepth), true);
  return buf;
}

export class D3D10_VIEWPORTView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: i32
  get TopLeftX(): number {
    return this.view.getInt32(0, true);
  }

  // 0x04: i32
  get TopLeftY(): number {
    return this.view.getInt32(4, true);
  }

  // 0x08: u32
  get Width(): number {
    return this.view.getUint32(8, true);
  }

  // 0x0c: u32
  get Height(): number {
    return this.view.getUint32(12, true);
  }

  // 0x10: f32
  get MinDepth(): number {
    return this.view.getFloat32(16, true);
  }

  // 0x14: f32
  get MaxDepth(): number {
    return this.view.getFloat32(20, true);
  }

  // 0x00: i32
  set TopLeftX(value: number) {
    this.view.setInt32(0, value, true);
  }

  // 0x04: i32
  set TopLeftY(value: number) {
    this.view.setInt32(4, value, true);
  }

  // 0x08: u32
  set Width(value: number) {
    this.view.setUint32(8, value, true);
  }

  // 0x0c: u32
  set Height(value: number) {
    this.view.setUint32(12, value, true);
  }

  // 0x10: f32
  set MinDepth(value: number) {
    this.view.setFloat32(16, value, true);
  }

  // 0x14: f32
  set MaxDepth(value: number) {
    this.view.setFloat32(20, value, true);
  }
}

/**
 * Windows.Win32.Graphics.Direct3D10.D3D10_BOX (size: 24)
 */
export interface D3D10_BOX {
  /** u32 */
  left: number;
  /** u32 */
  top: number;
  /** u32 */
  front: number;
  /** u32 */
  right: number;
  /** u32 */
  bottom: number;
  /** u32 */
  back: number;
}

export const sizeofD3D10_BOX = 24;

export function allocD3D10_BOX(data?: Partial<D3D10_BOX>): Uint8Array {
  const buf = new Uint8Array(sizeofD3D10_BOX);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.left !== undefined) view.setUint32(0, Number(data.left), true);
  // 0x04: u32
  if (data?.top !== undefined) view.setUint32(4, Number(data.top), true);
  // 0x08: u32
  if (data?.front !== undefined) view.setUint32(8, Number(data.front), true);
  // 0x0c: u32
  if (data?.right !== undefined) view.setUint32(12, Number(data.right), true);
  // 0x10: u32
  if (data?.bottom !== undefined) view.setUint32(16, Number(data.bottom), true);
  // 0x14: u32
  if (data?.back !== undefined) view.setUint32(20, Number(data.back), true);
  return buf;
}

export class D3D10_BOXView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get left(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: u32
  get top(): number {
    return this.view.getUint32(4, true);
  }

  // 0x08: u32
  get front(): number {
    return this.view.getUint32(8, true);
  }

  // 0x0c: u32
  get right(): number {
    return this.view.getUint32(12, true);
  }

  // 0x10: u32
  get bottom(): number {
    return this.view.getUint32(16, true);
  }

  // 0x14: u32
  get back(): number {
    return this.view.getUint32(20, true);
  }

  // 0x00: u32
  set left(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: u32
  set top(value: number) {
    this.view.setUint32(4, value, true);
  }

  // 0x08: u32
  set front(value: number) {
    this.view.setUint32(8, value, true);
  }

  // 0x0c: u32
  set right(value: number) {
    this.view.setUint32(12, value, true);
  }

  // 0x10: u32
  set bottom(value: number) {
    this.view.setUint32(16, value, true);
  }

  // 0x14: u32
  set back(value: number) {
    this.view.setUint32(20, value, true);
  }
}

/**
 * Windows.Win32.Graphics.Direct3D10.D3D10_DEPTH_STENCILOP_DESC (size: 16)
 */
export interface D3D10_DEPTH_STENCILOP_DESC {
  /** Windows.Win32.Graphics.Direct3D10.D3D10_STENCIL_OP */
  StencilFailOp: D3D10_STENCIL_OP;
  /** Windows.Win32.Graphics.Direct3D10.D3D10_STENCIL_OP */
  StencilDepthFailOp: D3D10_STENCIL_OP;
  /** Windows.Win32.Graphics.Direct3D10.D3D10_STENCIL_OP */
  StencilPassOp: D3D10_STENCIL_OP;
  /** Windows.Win32.Graphics.Direct3D10.D3D10_COMPARISON_FUNC */
  StencilFunc: D3D10_COMPARISON_FUNC;
}

export const sizeofD3D10_DEPTH_STENCILOP_DESC = 16;

export function allocD3D10_DEPTH_STENCILOP_DESC(data?: Partial<D3D10_DEPTH_STENCILOP_DESC>): Uint8Array {
  const buf = new Uint8Array(sizeofD3D10_DEPTH_STENCILOP_DESC);
  const view = new DataView(buf.buffer);
  // 0x00: i32
  if (data?.StencilFailOp !== undefined) view.setInt32(0, Number(data.StencilFailOp), true);
  // 0x04: i32
  if (data?.StencilDepthFailOp !== undefined) view.setInt32(4, Number(data.StencilDepthFailOp), true);
  // 0x08: i32
  if (data?.StencilPassOp !== undefined) view.setInt32(8, Number(data.StencilPassOp), true);
  // 0x0c: i32
  if (data?.StencilFunc !== undefined) view.setInt32(12, Number(data.StencilFunc), true);
  return buf;
}

export class D3D10_DEPTH_STENCILOP_DESCView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: i32
  get StencilFailOp(): number {
    return this.view.getInt32(0, true);
  }

  // 0x04: i32
  get StencilDepthFailOp(): number {
    return this.view.getInt32(4, true);
  }

  // 0x08: i32
  get StencilPassOp(): number {
    return this.view.getInt32(8, true);
  }

  // 0x0c: i32
  get StencilFunc(): number {
    return this.view.getInt32(12, true);
  }

  // 0x00: i32
  set StencilFailOp(value: number) {
    this.view.setInt32(0, value, true);
  }

  // 0x04: i32
  set StencilDepthFailOp(value: number) {
    this.view.setInt32(4, value, true);
  }

  // 0x08: i32
  set StencilPassOp(value: number) {
    this.view.setInt32(8, value, true);
  }

  // 0x0c: i32
  set StencilFunc(value: number) {
    this.view.setInt32(12, value, true);
  }
}

export type BOOL = number;

/**
 * Windows.Win32.Graphics.Direct3D10.D3D10_DEPTH_STENCIL_DESC (size: 40)
 */
export interface D3D10_DEPTH_STENCIL_DESC {
  /** Windows.Win32.Foundation.BOOL */
  DepthEnable: boolean;
  /** Windows.Win32.Graphics.Direct3D10.D3D10_DEPTH_WRITE_MASK */
  DepthWriteMask: D3D10_DEPTH_WRITE_MASK;
  /** Windows.Win32.Graphics.Direct3D10.D3D10_COMPARISON_FUNC */
  DepthFunc: D3D10_COMPARISON_FUNC;
  /** Windows.Win32.Foundation.BOOL */
  StencilEnable: boolean;
  /** u8 */
  StencilReadMask: number;
  /** u8 */
  StencilWriteMask: number;
  /** Windows.Win32.Graphics.Direct3D10.D3D10_DEPTH_STENCILOP_DESC */
  FrontFace: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Graphics.Direct3D10.D3D10_DEPTH_STENCILOP_DESC */
  BackFace: Uint8Array | Deno.PointerValue | null;
}

export const sizeofD3D10_DEPTH_STENCIL_DESC = 40;

export function allocD3D10_DEPTH_STENCIL_DESC(data?: Partial<D3D10_DEPTH_STENCIL_DESC>): Uint8Array {
  const buf = new Uint8Array(sizeofD3D10_DEPTH_STENCIL_DESC);
  const view = new DataView(buf.buffer);
  // 0x00: i32
  if (data?.DepthEnable !== undefined) view.setInt32(0, Number(data.DepthEnable), true);
  // 0x04: i32
  if (data?.DepthWriteMask !== undefined) view.setInt32(4, Number(data.DepthWriteMask), true);
  // 0x08: i32
  if (data?.DepthFunc !== undefined) view.setInt32(8, Number(data.DepthFunc), true);
  // 0x0c: i32
  if (data?.StencilEnable !== undefined) view.setInt32(12, Number(data.StencilEnable), true);
  // 0x10: u8
  if (data?.StencilReadMask !== undefined) view.setUint8(16, Number(data.StencilReadMask));
  // 0x11: u8
  if (data?.StencilWriteMask !== undefined) view.setUint8(17, Number(data.StencilWriteMask));
  // 0x12: pad6
  // 0x18: pointer
  if (data?.FrontFace !== undefined) view.setBigUint64(24, data.FrontFace === null ? 0n : util.toBigInt(util.toPointer(data.FrontFace)), true);
  // 0x20: pointer
  if (data?.BackFace !== undefined) view.setBigUint64(32, data.BackFace === null ? 0n : util.toBigInt(util.toPointer(data.BackFace)), true);
  return buf;
}

export class D3D10_DEPTH_STENCIL_DESCView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: i32
  get DepthEnable(): number {
    return this.view.getInt32(0, true);
  }

  // 0x04: i32
  get DepthWriteMask(): number {
    return this.view.getInt32(4, true);
  }

  // 0x08: i32
  get DepthFunc(): number {
    return this.view.getInt32(8, true);
  }

  // 0x0c: i32
  get StencilEnable(): number {
    return this.view.getInt32(12, true);
  }

  // 0x10: u8
  get StencilReadMask(): number {
    return this.view.getUint8(16);
  }

  // 0x11: u8
  get StencilWriteMask(): number {
    return this.view.getUint8(17);
  }

  // 0x12: pad6

  // 0x18: pointer
  get FrontFace(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(24, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x20: pointer
  get BackFace(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(32, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: i32
  set DepthEnable(value: number) {
    this.view.setInt32(0, value, true);
  }

  // 0x04: i32
  set DepthWriteMask(value: number) {
    this.view.setInt32(4, value, true);
  }

  // 0x08: i32
  set DepthFunc(value: number) {
    this.view.setInt32(8, value, true);
  }

  // 0x0c: i32
  set StencilEnable(value: number) {
    this.view.setInt32(12, value, true);
  }

  // 0x10: u8
  set StencilReadMask(value: number) {
    this.view.setUint8(16, value);
  }

  // 0x11: u8
  set StencilWriteMask(value: number) {
    this.view.setUint8(17, value);
  }

  // 0x12: pad6

  // 0x18: pointer
  set FrontFace(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(24, util.toBigInt(util.toPointer(value)), true);
  }

  // 0x20: pointer
  set BackFace(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(32, util.toBigInt(util.toPointer(value)), true);
  }
}

/**
 * Windows.Win32.Graphics.Direct3D10.D3D10_BLEND_DESC (size: 48)
 */
export interface D3D10_BLEND_DESC {
  /** Windows.Win32.Foundation.BOOL */
  AlphaToCoverageEnable: boolean;
  /** array */
  BlendEnable: Deno.PointerValue | null;
  /** Windows.Win32.Graphics.Direct3D10.D3D10_BLEND */
  SrcBlend: D3D10_BLEND;
  /** Windows.Win32.Graphics.Direct3D10.D3D10_BLEND */
  DestBlend: D3D10_BLEND;
  /** Windows.Win32.Graphics.Direct3D10.D3D10_BLEND_OP */
  BlendOp: D3D10_BLEND_OP;
  /** Windows.Win32.Graphics.Direct3D10.D3D10_BLEND */
  SrcBlendAlpha: D3D10_BLEND;
  /** Windows.Win32.Graphics.Direct3D10.D3D10_BLEND */
  DestBlendAlpha: D3D10_BLEND;
  /** Windows.Win32.Graphics.Direct3D10.D3D10_BLEND_OP */
  BlendOpAlpha: D3D10_BLEND_OP;
  /** array */
  RenderTargetWriteMask: Deno.PointerValue | null;
}

export const sizeofD3D10_BLEND_DESC = 48;

export function allocD3D10_BLEND_DESC(data?: Partial<D3D10_BLEND_DESC>): Uint8Array {
  const buf = new Uint8Array(sizeofD3D10_BLEND_DESC);
  const view = new DataView(buf.buffer);
  // 0x00: i32
  if (data?.AlphaToCoverageEnable !== undefined) view.setInt32(0, Number(data.AlphaToCoverageEnable), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.BlendEnable !== undefined) view.setBigUint64(8, data.BlendEnable === null ? 0n : util.toBigInt(util.toPointer(data.BlendEnable)), true);
  // 0x10: i32
  if (data?.SrcBlend !== undefined) view.setInt32(16, Number(data.SrcBlend), true);
  // 0x14: i32
  if (data?.DestBlend !== undefined) view.setInt32(20, Number(data.DestBlend), true);
  // 0x18: i32
  if (data?.BlendOp !== undefined) view.setInt32(24, Number(data.BlendOp), true);
  // 0x1c: i32
  if (data?.SrcBlendAlpha !== undefined) view.setInt32(28, Number(data.SrcBlendAlpha), true);
  // 0x20: i32
  if (data?.DestBlendAlpha !== undefined) view.setInt32(32, Number(data.DestBlendAlpha), true);
  // 0x24: i32
  if (data?.BlendOpAlpha !== undefined) view.setInt32(36, Number(data.BlendOpAlpha), true);
  // 0x28: pointer
  if (data?.RenderTargetWriteMask !== undefined) view.setBigUint64(40, data.RenderTargetWriteMask === null ? 0n : util.toBigInt(util.toPointer(data.RenderTargetWriteMask)), true);
  return buf;
}

export class D3D10_BLEND_DESCView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: i32
  get AlphaToCoverageEnable(): number {
    return this.view.getInt32(0, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  get BlendEnable(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(8, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x10: i32
  get SrcBlend(): number {
    return this.view.getInt32(16, true);
  }

  // 0x14: i32
  get DestBlend(): number {
    return this.view.getInt32(20, true);
  }

  // 0x18: i32
  get BlendOp(): number {
    return this.view.getInt32(24, true);
  }

  // 0x1c: i32
  get SrcBlendAlpha(): number {
    return this.view.getInt32(28, true);
  }

  // 0x20: i32
  get DestBlendAlpha(): number {
    return this.view.getInt32(32, true);
  }

  // 0x24: i32
  get BlendOpAlpha(): number {
    return this.view.getInt32(36, true);
  }

  // 0x28: pointer
  get RenderTargetWriteMask(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(40, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: i32
  set AlphaToCoverageEnable(value: number) {
    this.view.setInt32(0, value, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  set BlendEnable(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(8, util.toBigInt(util.toPointer(value)), true);
  }

  // 0x10: i32
  set SrcBlend(value: number) {
    this.view.setInt32(16, value, true);
  }

  // 0x14: i32
  set DestBlend(value: number) {
    this.view.setInt32(20, value, true);
  }

  // 0x18: i32
  set BlendOp(value: number) {
    this.view.setInt32(24, value, true);
  }

  // 0x1c: i32
  set SrcBlendAlpha(value: number) {
    this.view.setInt32(28, value, true);
  }

  // 0x20: i32
  set DestBlendAlpha(value: number) {
    this.view.setInt32(32, value, true);
  }

  // 0x24: i32
  set BlendOpAlpha(value: number) {
    this.view.setInt32(36, value, true);
  }

  // 0x28: pointer
  set RenderTargetWriteMask(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(40, util.toBigInt(util.toPointer(value)), true);
  }
}

/**
 * Windows.Win32.Graphics.Direct3D10.D3D10_RASTERIZER_DESC (size: 40)
 */
export interface D3D10_RASTERIZER_DESC {
  /** Windows.Win32.Graphics.Direct3D10.D3D10_FILL_MODE */
  FillMode: D3D10_FILL_MODE;
  /** Windows.Win32.Graphics.Direct3D10.D3D10_CULL_MODE */
  CullMode: D3D10_CULL_MODE;
  /** Windows.Win32.Foundation.BOOL */
  FrontCounterClockwise: boolean;
  /** i32 */
  DepthBias: number;
  /** f32 */
  DepthBiasClamp: number;
  /** f32 */
  SlopeScaledDepthBias: number;
  /** Windows.Win32.Foundation.BOOL */
  DepthClipEnable: boolean;
  /** Windows.Win32.Foundation.BOOL */
  ScissorEnable: boolean;
  /** Windows.Win32.Foundation.BOOL */
  MultisampleEnable: boolean;
  /** Windows.Win32.Foundation.BOOL */
  AntialiasedLineEnable: boolean;
}

export const sizeofD3D10_RASTERIZER_DESC = 40;

export function allocD3D10_RASTERIZER_DESC(data?: Partial<D3D10_RASTERIZER_DESC>): Uint8Array {
  const buf = new Uint8Array(sizeofD3D10_RASTERIZER_DESC);
  const view = new DataView(buf.buffer);
  // 0x00: i32
  if (data?.FillMode !== undefined) view.setInt32(0, Number(data.FillMode), true);
  // 0x04: i32
  if (data?.CullMode !== undefined) view.setInt32(4, Number(data.CullMode), true);
  // 0x08: i32
  if (data?.FrontCounterClockwise !== undefined) view.setInt32(8, Number(data.FrontCounterClockwise), true);
  // 0x0c: i32
  if (data?.DepthBias !== undefined) view.setInt32(12, Number(data.DepthBias), true);
  // 0x10: f32
  if (data?.DepthBiasClamp !== undefined) view.setFloat32(16, Number(data.DepthBiasClamp), true);
  // 0x14: f32
  if (data?.SlopeScaledDepthBias !== undefined) view.setFloat32(20, Number(data.SlopeScaledDepthBias), true);
  // 0x18: i32
  if (data?.DepthClipEnable !== undefined) view.setInt32(24, Number(data.DepthClipEnable), true);
  // 0x1c: i32
  if (data?.ScissorEnable !== undefined) view.setInt32(28, Number(data.ScissorEnable), true);
  // 0x20: i32
  if (data?.MultisampleEnable !== undefined) view.setInt32(32, Number(data.MultisampleEnable), true);
  // 0x24: i32
  if (data?.AntialiasedLineEnable !== undefined) view.setInt32(36, Number(data.AntialiasedLineEnable), true);
  return buf;
}

export class D3D10_RASTERIZER_DESCView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: i32
  get FillMode(): number {
    return this.view.getInt32(0, true);
  }

  // 0x04: i32
  get CullMode(): number {
    return this.view.getInt32(4, true);
  }

  // 0x08: i32
  get FrontCounterClockwise(): number {
    return this.view.getInt32(8, true);
  }

  // 0x0c: i32
  get DepthBias(): number {
    return this.view.getInt32(12, true);
  }

  // 0x10: f32
  get DepthBiasClamp(): number {
    return this.view.getFloat32(16, true);
  }

  // 0x14: f32
  get SlopeScaledDepthBias(): number {
    return this.view.getFloat32(20, true);
  }

  // 0x18: i32
  get DepthClipEnable(): number {
    return this.view.getInt32(24, true);
  }

  // 0x1c: i32
  get ScissorEnable(): number {
    return this.view.getInt32(28, true);
  }

  // 0x20: i32
  get MultisampleEnable(): number {
    return this.view.getInt32(32, true);
  }

  // 0x24: i32
  get AntialiasedLineEnable(): number {
    return this.view.getInt32(36, true);
  }

  // 0x00: i32
  set FillMode(value: number) {
    this.view.setInt32(0, value, true);
  }

  // 0x04: i32
  set CullMode(value: number) {
    this.view.setInt32(4, value, true);
  }

  // 0x08: i32
  set FrontCounterClockwise(value: number) {
    this.view.setInt32(8, value, true);
  }

  // 0x0c: i32
  set DepthBias(value: number) {
    this.view.setInt32(12, value, true);
  }

  // 0x10: f32
  set DepthBiasClamp(value: number) {
    this.view.setFloat32(16, value, true);
  }

  // 0x14: f32
  set SlopeScaledDepthBias(value: number) {
    this.view.setFloat32(20, value, true);
  }

  // 0x18: i32
  set DepthClipEnable(value: number) {
    this.view.setInt32(24, value, true);
  }

  // 0x1c: i32
  set ScissorEnable(value: number) {
    this.view.setInt32(28, value, true);
  }

  // 0x20: i32
  set MultisampleEnable(value: number) {
    this.view.setInt32(32, value, true);
  }

  // 0x24: i32
  set AntialiasedLineEnable(value: number) {
    this.view.setInt32(36, value, true);
  }
}

/**
 * Windows.Win32.Graphics.Direct3D10.D3D10_SUBRESOURCE_DATA (size: 16)
 */
export interface D3D10_SUBRESOURCE_DATA {
  /** ptr */
  pSysMem: Deno.PointerValue | Uint8Array | null;
  /** u32 */
  SysMemPitch: number;
  /** u32 */
  SysMemSlicePitch: number;
}

export const sizeofD3D10_SUBRESOURCE_DATA = 16;

export function allocD3D10_SUBRESOURCE_DATA(data?: Partial<D3D10_SUBRESOURCE_DATA>): Uint8Array {
  const buf = new Uint8Array(sizeofD3D10_SUBRESOURCE_DATA);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.pSysMem !== undefined) view.setBigUint64(0, data.pSysMem === null ? 0n : util.toBigInt(util.toPointer(data.pSysMem)), true);
  // 0x08: u32
  if (data?.SysMemPitch !== undefined) view.setUint32(8, Number(data.SysMemPitch), true);
  // 0x0c: u32
  if (data?.SysMemSlicePitch !== undefined) view.setUint32(12, Number(data.SysMemSlicePitch), true);
  return buf;
}

export class D3D10_SUBRESOURCE_DATAView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get pSysMem(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(0, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x08: u32
  get SysMemPitch(): number {
    return this.view.getUint32(8, true);
  }

  // 0x0c: u32
  get SysMemSlicePitch(): number {
    return this.view.getUint32(12, true);
  }

  // 0x00: pointer
  set pSysMem(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(0, util.toBigInt(util.toPointer(value)), true);
  }

  // 0x08: u32
  set SysMemPitch(value: number) {
    this.view.setUint32(8, value, true);
  }

  // 0x0c: u32
  set SysMemSlicePitch(value: number) {
    this.view.setUint32(12, value, true);
  }
}

/**
 * Windows.Win32.Graphics.Direct3D10.D3D10_BUFFER_DESC (size: 24)
 */
export interface D3D10_BUFFER_DESC {
  /** u32 */
  ByteWidth: number;
  /** Windows.Win32.Graphics.Direct3D10.D3D10_USAGE */
  Usage: D3D10_USAGE;
  /** u32 */
  BindFlags: number;
  /** u32 */
  CPUAccessFlags: number;
  /** u32 */
  MiscFlags: number;
}

export const sizeofD3D10_BUFFER_DESC = 24;

export function allocD3D10_BUFFER_DESC(data?: Partial<D3D10_BUFFER_DESC>): Uint8Array {
  const buf = new Uint8Array(sizeofD3D10_BUFFER_DESC);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.ByteWidth !== undefined) view.setUint32(0, Number(data.ByteWidth), true);
  // 0x04: i32
  if (data?.Usage !== undefined) view.setInt32(4, Number(data.Usage), true);
  // 0x08: u32
  if (data?.BindFlags !== undefined) view.setUint32(8, Number(data.BindFlags), true);
  // 0x0c: u32
  if (data?.CPUAccessFlags !== undefined) view.setUint32(12, Number(data.CPUAccessFlags), true);
  // 0x10: u32
  if (data?.MiscFlags !== undefined) view.setUint32(16, Number(data.MiscFlags), true);
  // 0x14: pad4
  return buf;
}

export class D3D10_BUFFER_DESCView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get ByteWidth(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: i32
  get Usage(): number {
    return this.view.getInt32(4, true);
  }

  // 0x08: u32
  get BindFlags(): number {
    return this.view.getUint32(8, true);
  }

  // 0x0c: u32
  get CPUAccessFlags(): number {
    return this.view.getUint32(12, true);
  }

  // 0x10: u32
  get MiscFlags(): number {
    return this.view.getUint32(16, true);
  }

  // 0x14: pad4

  // 0x00: u32
  set ByteWidth(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: i32
  set Usage(value: number) {
    this.view.setInt32(4, value, true);
  }

  // 0x08: u32
  set BindFlags(value: number) {
    this.view.setUint32(8, value, true);
  }

  // 0x0c: u32
  set CPUAccessFlags(value: number) {
    this.view.setUint32(12, value, true);
  }

  // 0x10: u32
  set MiscFlags(value: number) {
    this.view.setUint32(16, value, true);
  }

  // 0x14: pad4
}

/**
 * Windows.Win32.Graphics.Direct3D10.D3D10_TEXTURE1D_DESC (size: 32)
 */
export interface D3D10_TEXTURE1D_DESC {
  /** u32 */
  Width: number;
  /** u32 */
  MipLevels: number;
  /** u32 */
  ArraySize: number;
  /** Windows.Win32.Graphics.Dxgi.Common.DXGI_FORMAT */
  Format: DXGI_FORMAT;
  /** Windows.Win32.Graphics.Direct3D10.D3D10_USAGE */
  Usage: D3D10_USAGE;
  /** u32 */
  BindFlags: number;
  /** u32 */
  CPUAccessFlags: number;
  /** u32 */
  MiscFlags: number;
}

export const sizeofD3D10_TEXTURE1D_DESC = 32;

export function allocD3D10_TEXTURE1D_DESC(data?: Partial<D3D10_TEXTURE1D_DESC>): Uint8Array {
  const buf = new Uint8Array(sizeofD3D10_TEXTURE1D_DESC);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.Width !== undefined) view.setUint32(0, Number(data.Width), true);
  // 0x04: u32
  if (data?.MipLevels !== undefined) view.setUint32(4, Number(data.MipLevels), true);
  // 0x08: u32
  if (data?.ArraySize !== undefined) view.setUint32(8, Number(data.ArraySize), true);
  // 0x0c: u32
  if (data?.Format !== undefined) view.setUint32(12, Number(data.Format), true);
  // 0x10: i32
  if (data?.Usage !== undefined) view.setInt32(16, Number(data.Usage), true);
  // 0x14: u32
  if (data?.BindFlags !== undefined) view.setUint32(20, Number(data.BindFlags), true);
  // 0x18: u32
  if (data?.CPUAccessFlags !== undefined) view.setUint32(24, Number(data.CPUAccessFlags), true);
  // 0x1c: u32
  if (data?.MiscFlags !== undefined) view.setUint32(28, Number(data.MiscFlags), true);
  return buf;
}

export class D3D10_TEXTURE1D_DESCView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get Width(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: u32
  get MipLevels(): number {
    return this.view.getUint32(4, true);
  }

  // 0x08: u32
  get ArraySize(): number {
    return this.view.getUint32(8, true);
  }

  // 0x0c: u32
  get Format(): number {
    return this.view.getUint32(12, true);
  }

  // 0x10: i32
  get Usage(): number {
    return this.view.getInt32(16, true);
  }

  // 0x14: u32
  get BindFlags(): number {
    return this.view.getUint32(20, true);
  }

  // 0x18: u32
  get CPUAccessFlags(): number {
    return this.view.getUint32(24, true);
  }

  // 0x1c: u32
  get MiscFlags(): number {
    return this.view.getUint32(28, true);
  }

  // 0x00: u32
  set Width(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: u32
  set MipLevels(value: number) {
    this.view.setUint32(4, value, true);
  }

  // 0x08: u32
  set ArraySize(value: number) {
    this.view.setUint32(8, value, true);
  }

  // 0x0c: u32
  set Format(value: number) {
    this.view.setUint32(12, value, true);
  }

  // 0x10: i32
  set Usage(value: number) {
    this.view.setInt32(16, value, true);
  }

  // 0x14: u32
  set BindFlags(value: number) {
    this.view.setUint32(20, value, true);
  }

  // 0x18: u32
  set CPUAccessFlags(value: number) {
    this.view.setUint32(24, value, true);
  }

  // 0x1c: u32
  set MiscFlags(value: number) {
    this.view.setUint32(28, value, true);
  }
}

/**
 * Windows.Win32.Graphics.Dxgi.Common.DXGI_SAMPLE_DESC (size: 8)
 */
export interface DXGI_SAMPLE_DESC {
  /** u32 */
  Count: number;
  /** u32 */
  Quality: number;
}

export const sizeofDXGI_SAMPLE_DESC = 8;

export function allocDXGI_SAMPLE_DESC(data?: Partial<DXGI_SAMPLE_DESC>): Uint8Array {
  const buf = new Uint8Array(sizeofDXGI_SAMPLE_DESC);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.Count !== undefined) view.setUint32(0, Number(data.Count), true);
  // 0x04: u32
  if (data?.Quality !== undefined) view.setUint32(4, Number(data.Quality), true);
  return buf;
}

export class DXGI_SAMPLE_DESCView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get Count(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: u32
  get Quality(): number {
    return this.view.getUint32(4, true);
  }

  // 0x00: u32
  set Count(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: u32
  set Quality(value: number) {
    this.view.setUint32(4, value, true);
  }
}

/**
 * Windows.Win32.Graphics.Direct3D10.D3D10_TEXTURE2D_DESC (size: 48)
 */
export interface D3D10_TEXTURE2D_DESC {
  /** u32 */
  Width: number;
  /** u32 */
  Height: number;
  /** u32 */
  MipLevels: number;
  /** u32 */
  ArraySize: number;
  /** Windows.Win32.Graphics.Dxgi.Common.DXGI_FORMAT */
  Format: DXGI_FORMAT;
  /** Windows.Win32.Graphics.Dxgi.Common.DXGI_SAMPLE_DESC */
  SampleDesc: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Graphics.Direct3D10.D3D10_USAGE */
  Usage: D3D10_USAGE;
  /** u32 */
  BindFlags: number;
  /** u32 */
  CPUAccessFlags: number;
  /** u32 */
  MiscFlags: number;
}

export const sizeofD3D10_TEXTURE2D_DESC = 48;

export function allocD3D10_TEXTURE2D_DESC(data?: Partial<D3D10_TEXTURE2D_DESC>): Uint8Array {
  const buf = new Uint8Array(sizeofD3D10_TEXTURE2D_DESC);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.Width !== undefined) view.setUint32(0, Number(data.Width), true);
  // 0x04: u32
  if (data?.Height !== undefined) view.setUint32(4, Number(data.Height), true);
  // 0x08: u32
  if (data?.MipLevels !== undefined) view.setUint32(8, Number(data.MipLevels), true);
  // 0x0c: u32
  if (data?.ArraySize !== undefined) view.setUint32(12, Number(data.ArraySize), true);
  // 0x10: u32
  if (data?.Format !== undefined) view.setUint32(16, Number(data.Format), true);
  // 0x14: pad4
  // 0x18: pointer
  if (data?.SampleDesc !== undefined) view.setBigUint64(24, data.SampleDesc === null ? 0n : util.toBigInt(util.toPointer(data.SampleDesc)), true);
  // 0x20: i32
  if (data?.Usage !== undefined) view.setInt32(32, Number(data.Usage), true);
  // 0x24: u32
  if (data?.BindFlags !== undefined) view.setUint32(36, Number(data.BindFlags), true);
  // 0x28: u32
  if (data?.CPUAccessFlags !== undefined) view.setUint32(40, Number(data.CPUAccessFlags), true);
  // 0x2c: u32
  if (data?.MiscFlags !== undefined) view.setUint32(44, Number(data.MiscFlags), true);
  return buf;
}

export class D3D10_TEXTURE2D_DESCView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get Width(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: u32
  get Height(): number {
    return this.view.getUint32(4, true);
  }

  // 0x08: u32
  get MipLevels(): number {
    return this.view.getUint32(8, true);
  }

  // 0x0c: u32
  get ArraySize(): number {
    return this.view.getUint32(12, true);
  }

  // 0x10: u32
  get Format(): number {
    return this.view.getUint32(16, true);
  }

  // 0x14: pad4

  // 0x18: pointer
  get SampleDesc(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(24, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x20: i32
  get Usage(): number {
    return this.view.getInt32(32, true);
  }

  // 0x24: u32
  get BindFlags(): number {
    return this.view.getUint32(36, true);
  }

  // 0x28: u32
  get CPUAccessFlags(): number {
    return this.view.getUint32(40, true);
  }

  // 0x2c: u32
  get MiscFlags(): number {
    return this.view.getUint32(44, true);
  }

  // 0x00: u32
  set Width(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: u32
  set Height(value: number) {
    this.view.setUint32(4, value, true);
  }

  // 0x08: u32
  set MipLevels(value: number) {
    this.view.setUint32(8, value, true);
  }

  // 0x0c: u32
  set ArraySize(value: number) {
    this.view.setUint32(12, value, true);
  }

  // 0x10: u32
  set Format(value: number) {
    this.view.setUint32(16, value, true);
  }

  // 0x14: pad4

  // 0x18: pointer
  set SampleDesc(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(24, util.toBigInt(util.toPointer(value)), true);
  }

  // 0x20: i32
  set Usage(value: number) {
    this.view.setInt32(32, value, true);
  }

  // 0x24: u32
  set BindFlags(value: number) {
    this.view.setUint32(36, value, true);
  }

  // 0x28: u32
  set CPUAccessFlags(value: number) {
    this.view.setUint32(40, value, true);
  }

  // 0x2c: u32
  set MiscFlags(value: number) {
    this.view.setUint32(44, value, true);
  }
}

/**
 * Windows.Win32.Graphics.Direct3D10.D3D10_MAPPED_TEXTURE2D (size: 16)
 */
export interface D3D10_MAPPED_TEXTURE2D {
  /** ptr */
  pData: Deno.PointerValue | Uint8Array | null;
  /** u32 */
  RowPitch: number;
}

export const sizeofD3D10_MAPPED_TEXTURE2D = 16;

export function allocD3D10_MAPPED_TEXTURE2D(data?: Partial<D3D10_MAPPED_TEXTURE2D>): Uint8Array {
  const buf = new Uint8Array(sizeofD3D10_MAPPED_TEXTURE2D);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.pData !== undefined) view.setBigUint64(0, data.pData === null ? 0n : util.toBigInt(util.toPointer(data.pData)), true);
  // 0x08: u32
  if (data?.RowPitch !== undefined) view.setUint32(8, Number(data.RowPitch), true);
  // 0x0c: pad4
  return buf;
}

export class D3D10_MAPPED_TEXTURE2DView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get pData(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(0, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x08: u32
  get RowPitch(): number {
    return this.view.getUint32(8, true);
  }

  // 0x0c: pad4

  // 0x00: pointer
  set pData(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(0, util.toBigInt(util.toPointer(value)), true);
  }

  // 0x08: u32
  set RowPitch(value: number) {
    this.view.setUint32(8, value, true);
  }

  // 0x0c: pad4
}

/**
 * Windows.Win32.Graphics.Direct3D10.D3D10_TEXTURE3D_DESC (size: 40)
 */
export interface D3D10_TEXTURE3D_DESC {
  /** u32 */
  Width: number;
  /** u32 */
  Height: number;
  /** u32 */
  Depth: number;
  /** u32 */
  MipLevels: number;
  /** Windows.Win32.Graphics.Dxgi.Common.DXGI_FORMAT */
  Format: DXGI_FORMAT;
  /** Windows.Win32.Graphics.Direct3D10.D3D10_USAGE */
  Usage: D3D10_USAGE;
  /** u32 */
  BindFlags: number;
  /** u32 */
  CPUAccessFlags: number;
  /** u32 */
  MiscFlags: number;
}

export const sizeofD3D10_TEXTURE3D_DESC = 40;

export function allocD3D10_TEXTURE3D_DESC(data?: Partial<D3D10_TEXTURE3D_DESC>): Uint8Array {
  const buf = new Uint8Array(sizeofD3D10_TEXTURE3D_DESC);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.Width !== undefined) view.setUint32(0, Number(data.Width), true);
  // 0x04: u32
  if (data?.Height !== undefined) view.setUint32(4, Number(data.Height), true);
  // 0x08: u32
  if (data?.Depth !== undefined) view.setUint32(8, Number(data.Depth), true);
  // 0x0c: u32
  if (data?.MipLevels !== undefined) view.setUint32(12, Number(data.MipLevels), true);
  // 0x10: u32
  if (data?.Format !== undefined) view.setUint32(16, Number(data.Format), true);
  // 0x14: i32
  if (data?.Usage !== undefined) view.setInt32(20, Number(data.Usage), true);
  // 0x18: u32
  if (data?.BindFlags !== undefined) view.setUint32(24, Number(data.BindFlags), true);
  // 0x1c: u32
  if (data?.CPUAccessFlags !== undefined) view.setUint32(28, Number(data.CPUAccessFlags), true);
  // 0x20: u32
  if (data?.MiscFlags !== undefined) view.setUint32(32, Number(data.MiscFlags), true);
  // 0x24: pad4
  return buf;
}

export class D3D10_TEXTURE3D_DESCView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get Width(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: u32
  get Height(): number {
    return this.view.getUint32(4, true);
  }

  // 0x08: u32
  get Depth(): number {
    return this.view.getUint32(8, true);
  }

  // 0x0c: u32
  get MipLevels(): number {
    return this.view.getUint32(12, true);
  }

  // 0x10: u32
  get Format(): number {
    return this.view.getUint32(16, true);
  }

  // 0x14: i32
  get Usage(): number {
    return this.view.getInt32(20, true);
  }

  // 0x18: u32
  get BindFlags(): number {
    return this.view.getUint32(24, true);
  }

  // 0x1c: u32
  get CPUAccessFlags(): number {
    return this.view.getUint32(28, true);
  }

  // 0x20: u32
  get MiscFlags(): number {
    return this.view.getUint32(32, true);
  }

  // 0x24: pad4

  // 0x00: u32
  set Width(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: u32
  set Height(value: number) {
    this.view.setUint32(4, value, true);
  }

  // 0x08: u32
  set Depth(value: number) {
    this.view.setUint32(8, value, true);
  }

  // 0x0c: u32
  set MipLevels(value: number) {
    this.view.setUint32(12, value, true);
  }

  // 0x10: u32
  set Format(value: number) {
    this.view.setUint32(16, value, true);
  }

  // 0x14: i32
  set Usage(value: number) {
    this.view.setInt32(20, value, true);
  }

  // 0x18: u32
  set BindFlags(value: number) {
    this.view.setUint32(24, value, true);
  }

  // 0x1c: u32
  set CPUAccessFlags(value: number) {
    this.view.setUint32(28, value, true);
  }

  // 0x20: u32
  set MiscFlags(value: number) {
    this.view.setUint32(32, value, true);
  }

  // 0x24: pad4
}

/**
 * Windows.Win32.Graphics.Direct3D10.D3D10_MAPPED_TEXTURE3D (size: 16)
 */
export interface D3D10_MAPPED_TEXTURE3D {
  /** ptr */
  pData: Deno.PointerValue | Uint8Array | null;
  /** u32 */
  RowPitch: number;
  /** u32 */
  DepthPitch: number;
}

export const sizeofD3D10_MAPPED_TEXTURE3D = 16;

export function allocD3D10_MAPPED_TEXTURE3D(data?: Partial<D3D10_MAPPED_TEXTURE3D>): Uint8Array {
  const buf = new Uint8Array(sizeofD3D10_MAPPED_TEXTURE3D);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.pData !== undefined) view.setBigUint64(0, data.pData === null ? 0n : util.toBigInt(util.toPointer(data.pData)), true);
  // 0x08: u32
  if (data?.RowPitch !== undefined) view.setUint32(8, Number(data.RowPitch), true);
  // 0x0c: u32
  if (data?.DepthPitch !== undefined) view.setUint32(12, Number(data.DepthPitch), true);
  return buf;
}

export class D3D10_MAPPED_TEXTURE3DView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get pData(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(0, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x08: u32
  get RowPitch(): number {
    return this.view.getUint32(8, true);
  }

  // 0x0c: u32
  get DepthPitch(): number {
    return this.view.getUint32(12, true);
  }

  // 0x00: pointer
  set pData(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(0, util.toBigInt(util.toPointer(value)), true);
  }

  // 0x08: u32
  set RowPitch(value: number) {
    this.view.setUint32(8, value, true);
  }

  // 0x0c: u32
  set DepthPitch(value: number) {
    this.view.setUint32(12, value, true);
  }
}

export type PWSTR = Deno.PointerValue | Uint8Array | null;

/**
 * _Anonymous1_e__Union (size: 64)
 */
export interface _Anonymous1_e__Union {
  /** usize */
  Data0: number | bigint;
  /** Windows.Win32.Foundation.PWSTR */
  String: string | null | Uint8Array | Uint16Array;
  /** usize */
  u: number | bigint;
  /** ptr */
  psid: Deno.PointerValue | Uint8Array | null;
  /** ptr */
  pguid: Deno.PointerValue | Uint8Array | null;
  /** u32 */
  LogonId_LowPart: number;
  /** ptr */
  pObjectTypes: Deno.PointerValue | Uint8Array | null;
  /** ptr */
  pIpAddress: Deno.PointerValue | Uint8Array | null;
}

export const sizeof_Anonymous1_e__Union = 64;

export function alloc_Anonymous1_e__Union(data?: Partial<_Anonymous1_e__Union>): Uint8Array {
  const buf = new Uint8Array(sizeof_Anonymous1_e__Union);
  const view = new DataView(buf.buffer);
  // 0x00: usize
  if (data?.Data0 !== undefined) view.setBigUint64(0, util.toBigInt(data.Data0), true);
  // 0x08: buffer
  if (data?.String !== undefined) {
    (buf as any)._f8 = util.pwstrToFfi(data.String);
    view.setBigUint64(8, (buf as any)._f8 === null ? 0n : util.toBigInt(Deno.UnsafePointer.of((buf as any)._f8)), true);
  }
  // 0x10: usize
  if (data?.u !== undefined) view.setBigUint64(16, util.toBigInt(data.u), true);
  // 0x18: pointer
  if (data?.psid !== undefined) view.setBigUint64(24, data.psid === null ? 0n : util.toBigInt(util.toPointer(data.psid)), true);
  // 0x20: pointer
  if (data?.pguid !== undefined) view.setBigUint64(32, data.pguid === null ? 0n : util.toBigInt(util.toPointer(data.pguid)), true);
  // 0x28: u32
  if (data?.LogonId_LowPart !== undefined) view.setUint32(40, Number(data.LogonId_LowPart), true);
  // 0x2c: pad4
  // 0x30: pointer
  if (data?.pObjectTypes !== undefined) view.setBigUint64(48, data.pObjectTypes === null ? 0n : util.toBigInt(util.toPointer(data.pObjectTypes)), true);
  // 0x38: pointer
  if (data?.pIpAddress !== undefined) view.setBigUint64(56, data.pIpAddress === null ? 0n : util.toBigInt(util.toPointer(data.pIpAddress)), true);
  return buf;
}

export class _Anonymous1_e__UnionView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: usize
  get Data0(): number | bigint {
    return this.view.getBigUint64(0, true);
  }

  // 0x08: buffer
  get String(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(8, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x10: usize
  get u(): number | bigint {
    return this.view.getBigUint64(16, true);
  }

  // 0x18: pointer
  get psid(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(24, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x20: pointer
  get pguid(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(32, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x28: u32
  get LogonId_LowPart(): number {
    return this.view.getUint32(40, true);
  }

  // 0x2c: pad4

  // 0x30: pointer
  get pObjectTypes(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(48, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x38: pointer
  get pIpAddress(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(56, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: usize
  set Data0(value: number | bigint) {
    this.view.setBigUint64(0, util.toBigInt(value), true);
  }

  // 0x08: buffer
  set String(value: Uint8Array | Deno.PointerValue | null) {
    (this.buf as any)._f8 = value;
    this.view.setBigUint64(8, util.toBigInt(util.toPointer((this.buf as any)._f8)), true);
  }

  // 0x10: usize
  set u(value: number | bigint) {
    this.view.setBigUint64(16, util.toBigInt(value), true);
  }

  // 0x18: pointer
  set psid(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(24, util.toBigInt(util.toPointer(value)), true);
  }

  // 0x20: pointer
  set pguid(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(32, util.toBigInt(util.toPointer(value)), true);
  }

  // 0x28: u32
  set LogonId_LowPart(value: number) {
    this.view.setUint32(40, value, true);
  }

  // 0x2c: pad4

  // 0x30: pointer
  set pObjectTypes(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(48, util.toBigInt(util.toPointer(value)), true);
  }

  // 0x38: pointer
  set pIpAddress(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(56, util.toBigInt(util.toPointer(value)), true);
  }
}

/**
 * _Anonymous2_e__Union (size: 16)
 */
export interface _Anonymous2_e__Union {
  /** usize */
  Data1: number | bigint;
  /** i32 */
  LogonId_HighPart: number;
}

export const sizeof_Anonymous2_e__Union = 16;

export function alloc_Anonymous2_e__Union(data?: Partial<_Anonymous2_e__Union>): Uint8Array {
  const buf = new Uint8Array(sizeof_Anonymous2_e__Union);
  const view = new DataView(buf.buffer);
  // 0x00: usize
  if (data?.Data1 !== undefined) view.setBigUint64(0, util.toBigInt(data.Data1), true);
  // 0x08: i32
  if (data?.LogonId_HighPart !== undefined) view.setInt32(8, Number(data.LogonId_HighPart), true);
  // 0x0c: pad4
  return buf;
}

export class _Anonymous2_e__UnionView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: usize
  get Data1(): number | bigint {
    return this.view.getBigUint64(0, true);
  }

  // 0x08: i32
  get LogonId_HighPart(): number {
    return this.view.getInt32(8, true);
  }

  // 0x0c: pad4

  // 0x00: usize
  set Data1(value: number | bigint) {
    this.view.setBigUint64(0, util.toBigInt(value), true);
  }

  // 0x08: i32
  set LogonId_HighPart(value: number) {
    this.view.setInt32(8, value, true);
  }

  // 0x0c: pad4
}

/**
 * Windows.Win32.Graphics.Direct3D10.D3D10_BUFFER_SRV (size: 16)
 */
export interface D3D10_BUFFER_SRV {
  /** _Anonymous1_e__Union */
  Anonymous1: Uint8Array | Deno.PointerValue | null;
  /** _Anonymous2_e__Union */
  Anonymous2: Uint8Array | Deno.PointerValue | null;
}

export const sizeofD3D10_BUFFER_SRV = 16;

export function allocD3D10_BUFFER_SRV(data?: Partial<D3D10_BUFFER_SRV>): Uint8Array {
  const buf = new Uint8Array(sizeofD3D10_BUFFER_SRV);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.Anonymous1 !== undefined) view.setBigUint64(0, data.Anonymous1 === null ? 0n : util.toBigInt(util.toPointer(data.Anonymous1)), true);
  // 0x08: pointer
  if (data?.Anonymous2 !== undefined) view.setBigUint64(8, data.Anonymous2 === null ? 0n : util.toBigInt(util.toPointer(data.Anonymous2)), true);
  return buf;
}

export class D3D10_BUFFER_SRVView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get Anonymous1(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(0, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x08: pointer
  get Anonymous2(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(8, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: pointer
  set Anonymous1(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(0, util.toBigInt(util.toPointer(value)), true);
  }

  // 0x08: pointer
  set Anonymous2(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(8, util.toBigInt(util.toPointer(value)), true);
  }
}

/**
 * Windows.Win32.Graphics.Direct3D10.D3D10_TEX1D_SRV (size: 8)
 */
export interface D3D10_TEX1D_SRV {
  /** u32 */
  MostDetailedMip: number;
  /** u32 */
  MipLevels: number;
}

export const sizeofD3D10_TEX1D_SRV = 8;

export function allocD3D10_TEX1D_SRV(data?: Partial<D3D10_TEX1D_SRV>): Uint8Array {
  const buf = new Uint8Array(sizeofD3D10_TEX1D_SRV);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.MostDetailedMip !== undefined) view.setUint32(0, Number(data.MostDetailedMip), true);
  // 0x04: u32
  if (data?.MipLevels !== undefined) view.setUint32(4, Number(data.MipLevels), true);
  return buf;
}

export class D3D10_TEX1D_SRVView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get MostDetailedMip(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: u32
  get MipLevels(): number {
    return this.view.getUint32(4, true);
  }

  // 0x00: u32
  set MostDetailedMip(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: u32
  set MipLevels(value: number) {
    this.view.setUint32(4, value, true);
  }
}

/**
 * Windows.Win32.Graphics.Direct3D10.D3D10_TEX1D_ARRAY_SRV (size: 16)
 */
export interface D3D10_TEX1D_ARRAY_SRV {
  /** u32 */
  MostDetailedMip: number;
  /** u32 */
  MipLevels: number;
  /** u32 */
  FirstArraySlice: number;
  /** u32 */
  ArraySize: number;
}

export const sizeofD3D10_TEX1D_ARRAY_SRV = 16;

export function allocD3D10_TEX1D_ARRAY_SRV(data?: Partial<D3D10_TEX1D_ARRAY_SRV>): Uint8Array {
  const buf = new Uint8Array(sizeofD3D10_TEX1D_ARRAY_SRV);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.MostDetailedMip !== undefined) view.setUint32(0, Number(data.MostDetailedMip), true);
  // 0x04: u32
  if (data?.MipLevels !== undefined) view.setUint32(4, Number(data.MipLevels), true);
  // 0x08: u32
  if (data?.FirstArraySlice !== undefined) view.setUint32(8, Number(data.FirstArraySlice), true);
  // 0x0c: u32
  if (data?.ArraySize !== undefined) view.setUint32(12, Number(data.ArraySize), true);
  return buf;
}

export class D3D10_TEX1D_ARRAY_SRVView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get MostDetailedMip(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: u32
  get MipLevels(): number {
    return this.view.getUint32(4, true);
  }

  // 0x08: u32
  get FirstArraySlice(): number {
    return this.view.getUint32(8, true);
  }

  // 0x0c: u32
  get ArraySize(): number {
    return this.view.getUint32(12, true);
  }

  // 0x00: u32
  set MostDetailedMip(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: u32
  set MipLevels(value: number) {
    this.view.setUint32(4, value, true);
  }

  // 0x08: u32
  set FirstArraySlice(value: number) {
    this.view.setUint32(8, value, true);
  }

  // 0x0c: u32
  set ArraySize(value: number) {
    this.view.setUint32(12, value, true);
  }
}

/**
 * Windows.Win32.Graphics.Direct3D10.D3D10_TEX2D_SRV (size: 8)
 */
export interface D3D10_TEX2D_SRV {
  /** u32 */
  MostDetailedMip: number;
  /** u32 */
  MipLevels: number;
}

export const sizeofD3D10_TEX2D_SRV = 8;

export function allocD3D10_TEX2D_SRV(data?: Partial<D3D10_TEX2D_SRV>): Uint8Array {
  const buf = new Uint8Array(sizeofD3D10_TEX2D_SRV);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.MostDetailedMip !== undefined) view.setUint32(0, Number(data.MostDetailedMip), true);
  // 0x04: u32
  if (data?.MipLevels !== undefined) view.setUint32(4, Number(data.MipLevels), true);
  return buf;
}

export class D3D10_TEX2D_SRVView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get MostDetailedMip(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: u32
  get MipLevels(): number {
    return this.view.getUint32(4, true);
  }

  // 0x00: u32
  set MostDetailedMip(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: u32
  set MipLevels(value: number) {
    this.view.setUint32(4, value, true);
  }
}

/**
 * Windows.Win32.Graphics.Direct3D10.D3D10_TEX2D_ARRAY_SRV (size: 16)
 */
export interface D3D10_TEX2D_ARRAY_SRV {
  /** u32 */
  MostDetailedMip: number;
  /** u32 */
  MipLevels: number;
  /** u32 */
  FirstArraySlice: number;
  /** u32 */
  ArraySize: number;
}

export const sizeofD3D10_TEX2D_ARRAY_SRV = 16;

export function allocD3D10_TEX2D_ARRAY_SRV(data?: Partial<D3D10_TEX2D_ARRAY_SRV>): Uint8Array {
  const buf = new Uint8Array(sizeofD3D10_TEX2D_ARRAY_SRV);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.MostDetailedMip !== undefined) view.setUint32(0, Number(data.MostDetailedMip), true);
  // 0x04: u32
  if (data?.MipLevels !== undefined) view.setUint32(4, Number(data.MipLevels), true);
  // 0x08: u32
  if (data?.FirstArraySlice !== undefined) view.setUint32(8, Number(data.FirstArraySlice), true);
  // 0x0c: u32
  if (data?.ArraySize !== undefined) view.setUint32(12, Number(data.ArraySize), true);
  return buf;
}

export class D3D10_TEX2D_ARRAY_SRVView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get MostDetailedMip(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: u32
  get MipLevels(): number {
    return this.view.getUint32(4, true);
  }

  // 0x08: u32
  get FirstArraySlice(): number {
    return this.view.getUint32(8, true);
  }

  // 0x0c: u32
  get ArraySize(): number {
    return this.view.getUint32(12, true);
  }

  // 0x00: u32
  set MostDetailedMip(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: u32
  set MipLevels(value: number) {
    this.view.setUint32(4, value, true);
  }

  // 0x08: u32
  set FirstArraySlice(value: number) {
    this.view.setUint32(8, value, true);
  }

  // 0x0c: u32
  set ArraySize(value: number) {
    this.view.setUint32(12, value, true);
  }
}

/**
 * Windows.Win32.Graphics.Direct3D10.D3D10_TEX3D_SRV (size: 8)
 */
export interface D3D10_TEX3D_SRV {
  /** u32 */
  MostDetailedMip: number;
  /** u32 */
  MipLevels: number;
}

export const sizeofD3D10_TEX3D_SRV = 8;

export function allocD3D10_TEX3D_SRV(data?: Partial<D3D10_TEX3D_SRV>): Uint8Array {
  const buf = new Uint8Array(sizeofD3D10_TEX3D_SRV);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.MostDetailedMip !== undefined) view.setUint32(0, Number(data.MostDetailedMip), true);
  // 0x04: u32
  if (data?.MipLevels !== undefined) view.setUint32(4, Number(data.MipLevels), true);
  return buf;
}

export class D3D10_TEX3D_SRVView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get MostDetailedMip(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: u32
  get MipLevels(): number {
    return this.view.getUint32(4, true);
  }

  // 0x00: u32
  set MostDetailedMip(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: u32
  set MipLevels(value: number) {
    this.view.setUint32(4, value, true);
  }
}

/**
 * Windows.Win32.Graphics.Direct3D10.D3D10_TEXCUBE_SRV (size: 8)
 */
export interface D3D10_TEXCUBE_SRV {
  /** u32 */
  MostDetailedMip: number;
  /** u32 */
  MipLevels: number;
}

export const sizeofD3D10_TEXCUBE_SRV = 8;

export function allocD3D10_TEXCUBE_SRV(data?: Partial<D3D10_TEXCUBE_SRV>): Uint8Array {
  const buf = new Uint8Array(sizeofD3D10_TEXCUBE_SRV);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.MostDetailedMip !== undefined) view.setUint32(0, Number(data.MostDetailedMip), true);
  // 0x04: u32
  if (data?.MipLevels !== undefined) view.setUint32(4, Number(data.MipLevels), true);
  return buf;
}

export class D3D10_TEXCUBE_SRVView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get MostDetailedMip(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: u32
  get MipLevels(): number {
    return this.view.getUint32(4, true);
  }

  // 0x00: u32
  set MostDetailedMip(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: u32
  set MipLevels(value: number) {
    this.view.setUint32(4, value, true);
  }
}

/**
 * Windows.Win32.Graphics.Direct3D10.D3D10_TEX2DMS_SRV (size: 8)
 */
export interface D3D10_TEX2DMS_SRV {
  /** u32 */
  UnusedField_NothingToDefine: number;
}

export const sizeofD3D10_TEX2DMS_SRV = 8;

export function allocD3D10_TEX2DMS_SRV(data?: Partial<D3D10_TEX2DMS_SRV>): Uint8Array {
  const buf = new Uint8Array(sizeofD3D10_TEX2DMS_SRV);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.UnusedField_NothingToDefine !== undefined) view.setUint32(0, Number(data.UnusedField_NothingToDefine), true);
  // 0x04: pad4
  return buf;
}

export class D3D10_TEX2DMS_SRVView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get UnusedField_NothingToDefine(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: pad4

  // 0x00: u32
  set UnusedField_NothingToDefine(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: pad4
}

/**
 * Windows.Win32.Graphics.Direct3D10.D3D10_TEX2DMS_ARRAY_SRV (size: 8)
 */
export interface D3D10_TEX2DMS_ARRAY_SRV {
  /** u32 */
  FirstArraySlice: number;
  /** u32 */
  ArraySize: number;
}

export const sizeofD3D10_TEX2DMS_ARRAY_SRV = 8;

export function allocD3D10_TEX2DMS_ARRAY_SRV(data?: Partial<D3D10_TEX2DMS_ARRAY_SRV>): Uint8Array {
  const buf = new Uint8Array(sizeofD3D10_TEX2DMS_ARRAY_SRV);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.FirstArraySlice !== undefined) view.setUint32(0, Number(data.FirstArraySlice), true);
  // 0x04: u32
  if (data?.ArraySize !== undefined) view.setUint32(4, Number(data.ArraySize), true);
  return buf;
}

export class D3D10_TEX2DMS_ARRAY_SRVView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get FirstArraySlice(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: u32
  get ArraySize(): number {
    return this.view.getUint32(4, true);
  }

  // 0x00: u32
  set FirstArraySlice(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: u32
  set ArraySize(value: number) {
    this.view.setUint32(4, value, true);
  }
}

/**
 * _Anonymous_e__Struct (size: 16)
 */
export interface _Anonymous_e__Struct {
  /** u64 */
  Alignment: number | bigint;
  /** u64 */
  Region: number | bigint;
}

export const sizeof_Anonymous_e__Struct = 16;

export function alloc_Anonymous_e__Struct(data?: Partial<_Anonymous_e__Struct>): Uint8Array {
  const buf = new Uint8Array(sizeof_Anonymous_e__Struct);
  const view = new DataView(buf.buffer);
  // 0x00: u64
  if (data?.Alignment !== undefined) view.setBigUint64(0, util.toBigInt(data.Alignment), true);
  // 0x08: u64
  if (data?.Region !== undefined) view.setBigUint64(8, util.toBigInt(data.Region), true);
  return buf;
}

export class _Anonymous_e__StructView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u64
  get Alignment(): number | bigint {
    return this.view.getBigUint64(0, true);
  }

  // 0x08: u64
  get Region(): number | bigint {
    return this.view.getBigUint64(8, true);
  }

  // 0x00: u64
  set Alignment(value: number | bigint) {
    this.view.setBigUint64(0, util.toBigInt(value), true);
  }

  // 0x08: u64
  set Region(value: number | bigint) {
    this.view.setBigUint64(8, util.toBigInt(value), true);
  }
}

/**
 * _Anonymous_e__Union (size: 16)
 */
export interface _Anonymous_e__Union {
  /** _Anonymous_e__Struct */
  Anonymous: Uint8Array | Deno.PointerValue | null;
  /** array */
  X: Deno.PointerValue | null;
}

export const sizeof_Anonymous_e__Union = 16;

export function alloc_Anonymous_e__Union(data?: Partial<_Anonymous_e__Union>): Uint8Array {
  const buf = new Uint8Array(sizeof_Anonymous_e__Union);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.Anonymous !== undefined) view.setBigUint64(0, data.Anonymous === null ? 0n : util.toBigInt(util.toPointer(data.Anonymous)), true);
  // 0x08: pointer
  if (data?.X !== undefined) view.setBigUint64(8, data.X === null ? 0n : util.toBigInt(util.toPointer(data.X)), true);
  return buf;
}

export class _Anonymous_e__UnionView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get Anonymous(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(0, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x08: pointer
  get X(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(8, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: pointer
  set Anonymous(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(0, util.toBigInt(util.toPointer(value)), true);
  }

  // 0x08: pointer
  set X(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(8, util.toBigInt(util.toPointer(value)), true);
  }
}

/**
 * Windows.Win32.Graphics.Direct3D10.D3D10_SHADER_RESOURCE_VIEW_DESC (size: 16)
 */
export interface D3D10_SHADER_RESOURCE_VIEW_DESC {
  /** Windows.Win32.Graphics.Dxgi.Common.DXGI_FORMAT */
  Format: DXGI_FORMAT;
  /** Windows.Win32.Graphics.Direct3D.D3D_SRV_DIMENSION */
  ViewDimension: D3D_SRV_DIMENSION;
  /** _Anonymous_e__Union */
  Anonymous: Uint8Array | Deno.PointerValue | null;
}

export const sizeofD3D10_SHADER_RESOURCE_VIEW_DESC = 16;

export function allocD3D10_SHADER_RESOURCE_VIEW_DESC(data?: Partial<D3D10_SHADER_RESOURCE_VIEW_DESC>): Uint8Array {
  const buf = new Uint8Array(sizeofD3D10_SHADER_RESOURCE_VIEW_DESC);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.Format !== undefined) view.setUint32(0, Number(data.Format), true);
  // 0x04: i32
  if (data?.ViewDimension !== undefined) view.setInt32(4, Number(data.ViewDimension), true);
  // 0x08: pointer
  if (data?.Anonymous !== undefined) view.setBigUint64(8, data.Anonymous === null ? 0n : util.toBigInt(util.toPointer(data.Anonymous)), true);
  return buf;
}

export class D3D10_SHADER_RESOURCE_VIEW_DESCView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get Format(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: i32
  get ViewDimension(): number {
    return this.view.getInt32(4, true);
  }

  // 0x08: pointer
  get Anonymous(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(8, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: u32
  set Format(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: i32
  set ViewDimension(value: number) {
    this.view.setInt32(4, value, true);
  }

  // 0x08: pointer
  set Anonymous(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(8, util.toBigInt(util.toPointer(value)), true);
  }
}

/**
 * Windows.Win32.Graphics.Direct3D10.D3D10_BUFFER_RTV (size: 16)
 */
export interface D3D10_BUFFER_RTV {
  /** _Anonymous1_e__Union */
  Anonymous1: Uint8Array | Deno.PointerValue | null;
  /** _Anonymous2_e__Union */
  Anonymous2: Uint8Array | Deno.PointerValue | null;
}

export const sizeofD3D10_BUFFER_RTV = 16;

export function allocD3D10_BUFFER_RTV(data?: Partial<D3D10_BUFFER_RTV>): Uint8Array {
  const buf = new Uint8Array(sizeofD3D10_BUFFER_RTV);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.Anonymous1 !== undefined) view.setBigUint64(0, data.Anonymous1 === null ? 0n : util.toBigInt(util.toPointer(data.Anonymous1)), true);
  // 0x08: pointer
  if (data?.Anonymous2 !== undefined) view.setBigUint64(8, data.Anonymous2 === null ? 0n : util.toBigInt(util.toPointer(data.Anonymous2)), true);
  return buf;
}

export class D3D10_BUFFER_RTVView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get Anonymous1(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(0, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x08: pointer
  get Anonymous2(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(8, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: pointer
  set Anonymous1(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(0, util.toBigInt(util.toPointer(value)), true);
  }

  // 0x08: pointer
  set Anonymous2(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(8, util.toBigInt(util.toPointer(value)), true);
  }
}

/**
 * Windows.Win32.Graphics.Direct3D10.D3D10_TEX1D_RTV (size: 8)
 */
export interface D3D10_TEX1D_RTV {
  /** u32 */
  MipSlice: number;
}

export const sizeofD3D10_TEX1D_RTV = 8;

export function allocD3D10_TEX1D_RTV(data?: Partial<D3D10_TEX1D_RTV>): Uint8Array {
  const buf = new Uint8Array(sizeofD3D10_TEX1D_RTV);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.MipSlice !== undefined) view.setUint32(0, Number(data.MipSlice), true);
  // 0x04: pad4
  return buf;
}

export class D3D10_TEX1D_RTVView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get MipSlice(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: pad4

  // 0x00: u32
  set MipSlice(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: pad4
}

/**
 * Windows.Win32.Graphics.Direct3D10.D3D10_TEX1D_ARRAY_RTV (size: 16)
 */
export interface D3D10_TEX1D_ARRAY_RTV {
  /** u32 */
  MipSlice: number;
  /** u32 */
  FirstArraySlice: number;
  /** u32 */
  ArraySize: number;
}

export const sizeofD3D10_TEX1D_ARRAY_RTV = 16;

export function allocD3D10_TEX1D_ARRAY_RTV(data?: Partial<D3D10_TEX1D_ARRAY_RTV>): Uint8Array {
  const buf = new Uint8Array(sizeofD3D10_TEX1D_ARRAY_RTV);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.MipSlice !== undefined) view.setUint32(0, Number(data.MipSlice), true);
  // 0x04: u32
  if (data?.FirstArraySlice !== undefined) view.setUint32(4, Number(data.FirstArraySlice), true);
  // 0x08: u32
  if (data?.ArraySize !== undefined) view.setUint32(8, Number(data.ArraySize), true);
  // 0x0c: pad4
  return buf;
}

export class D3D10_TEX1D_ARRAY_RTVView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get MipSlice(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: u32
  get FirstArraySlice(): number {
    return this.view.getUint32(4, true);
  }

  // 0x08: u32
  get ArraySize(): number {
    return this.view.getUint32(8, true);
  }

  // 0x0c: pad4

  // 0x00: u32
  set MipSlice(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: u32
  set FirstArraySlice(value: number) {
    this.view.setUint32(4, value, true);
  }

  // 0x08: u32
  set ArraySize(value: number) {
    this.view.setUint32(8, value, true);
  }

  // 0x0c: pad4
}

/**
 * Windows.Win32.Graphics.Direct3D10.D3D10_TEX2D_RTV (size: 8)
 */
export interface D3D10_TEX2D_RTV {
  /** u32 */
  MipSlice: number;
}

export const sizeofD3D10_TEX2D_RTV = 8;

export function allocD3D10_TEX2D_RTV(data?: Partial<D3D10_TEX2D_RTV>): Uint8Array {
  const buf = new Uint8Array(sizeofD3D10_TEX2D_RTV);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.MipSlice !== undefined) view.setUint32(0, Number(data.MipSlice), true);
  // 0x04: pad4
  return buf;
}

export class D3D10_TEX2D_RTVView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get MipSlice(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: pad4

  // 0x00: u32
  set MipSlice(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: pad4
}

/**
 * Windows.Win32.Graphics.Direct3D10.D3D10_TEX2DMS_RTV (size: 8)
 */
export interface D3D10_TEX2DMS_RTV {
  /** u32 */
  UnusedField_NothingToDefine: number;
}

export const sizeofD3D10_TEX2DMS_RTV = 8;

export function allocD3D10_TEX2DMS_RTV(data?: Partial<D3D10_TEX2DMS_RTV>): Uint8Array {
  const buf = new Uint8Array(sizeofD3D10_TEX2DMS_RTV);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.UnusedField_NothingToDefine !== undefined) view.setUint32(0, Number(data.UnusedField_NothingToDefine), true);
  // 0x04: pad4
  return buf;
}

export class D3D10_TEX2DMS_RTVView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get UnusedField_NothingToDefine(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: pad4

  // 0x00: u32
  set UnusedField_NothingToDefine(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: pad4
}

/**
 * Windows.Win32.Graphics.Direct3D10.D3D10_TEX2D_ARRAY_RTV (size: 16)
 */
export interface D3D10_TEX2D_ARRAY_RTV {
  /** u32 */
  MipSlice: number;
  /** u32 */
  FirstArraySlice: number;
  /** u32 */
  ArraySize: number;
}

export const sizeofD3D10_TEX2D_ARRAY_RTV = 16;

export function allocD3D10_TEX2D_ARRAY_RTV(data?: Partial<D3D10_TEX2D_ARRAY_RTV>): Uint8Array {
  const buf = new Uint8Array(sizeofD3D10_TEX2D_ARRAY_RTV);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.MipSlice !== undefined) view.setUint32(0, Number(data.MipSlice), true);
  // 0x04: u32
  if (data?.FirstArraySlice !== undefined) view.setUint32(4, Number(data.FirstArraySlice), true);
  // 0x08: u32
  if (data?.ArraySize !== undefined) view.setUint32(8, Number(data.ArraySize), true);
  // 0x0c: pad4
  return buf;
}

export class D3D10_TEX2D_ARRAY_RTVView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get MipSlice(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: u32
  get FirstArraySlice(): number {
    return this.view.getUint32(4, true);
  }

  // 0x08: u32
  get ArraySize(): number {
    return this.view.getUint32(8, true);
  }

  // 0x0c: pad4

  // 0x00: u32
  set MipSlice(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: u32
  set FirstArraySlice(value: number) {
    this.view.setUint32(4, value, true);
  }

  // 0x08: u32
  set ArraySize(value: number) {
    this.view.setUint32(8, value, true);
  }

  // 0x0c: pad4
}

/**
 * Windows.Win32.Graphics.Direct3D10.D3D10_TEX2DMS_ARRAY_RTV (size: 8)
 */
export interface D3D10_TEX2DMS_ARRAY_RTV {
  /** u32 */
  FirstArraySlice: number;
  /** u32 */
  ArraySize: number;
}

export const sizeofD3D10_TEX2DMS_ARRAY_RTV = 8;

export function allocD3D10_TEX2DMS_ARRAY_RTV(data?: Partial<D3D10_TEX2DMS_ARRAY_RTV>): Uint8Array {
  const buf = new Uint8Array(sizeofD3D10_TEX2DMS_ARRAY_RTV);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.FirstArraySlice !== undefined) view.setUint32(0, Number(data.FirstArraySlice), true);
  // 0x04: u32
  if (data?.ArraySize !== undefined) view.setUint32(4, Number(data.ArraySize), true);
  return buf;
}

export class D3D10_TEX2DMS_ARRAY_RTVView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get FirstArraySlice(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: u32
  get ArraySize(): number {
    return this.view.getUint32(4, true);
  }

  // 0x00: u32
  set FirstArraySlice(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: u32
  set ArraySize(value: number) {
    this.view.setUint32(4, value, true);
  }
}

/**
 * Windows.Win32.Graphics.Direct3D10.D3D10_TEX3D_RTV (size: 16)
 */
export interface D3D10_TEX3D_RTV {
  /** u32 */
  MipSlice: number;
  /** u32 */
  FirstWSlice: number;
  /** u32 */
  WSize: number;
}

export const sizeofD3D10_TEX3D_RTV = 16;

export function allocD3D10_TEX3D_RTV(data?: Partial<D3D10_TEX3D_RTV>): Uint8Array {
  const buf = new Uint8Array(sizeofD3D10_TEX3D_RTV);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.MipSlice !== undefined) view.setUint32(0, Number(data.MipSlice), true);
  // 0x04: u32
  if (data?.FirstWSlice !== undefined) view.setUint32(4, Number(data.FirstWSlice), true);
  // 0x08: u32
  if (data?.WSize !== undefined) view.setUint32(8, Number(data.WSize), true);
  // 0x0c: pad4
  return buf;
}

export class D3D10_TEX3D_RTVView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get MipSlice(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: u32
  get FirstWSlice(): number {
    return this.view.getUint32(4, true);
  }

  // 0x08: u32
  get WSize(): number {
    return this.view.getUint32(8, true);
  }

  // 0x0c: pad4

  // 0x00: u32
  set MipSlice(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: u32
  set FirstWSlice(value: number) {
    this.view.setUint32(4, value, true);
  }

  // 0x08: u32
  set WSize(value: number) {
    this.view.setUint32(8, value, true);
  }

  // 0x0c: pad4
}

/**
 * Windows.Win32.Graphics.Direct3D10.D3D10_RENDER_TARGET_VIEW_DESC (size: 16)
 */
export interface D3D10_RENDER_TARGET_VIEW_DESC {
  /** Windows.Win32.Graphics.Dxgi.Common.DXGI_FORMAT */
  Format: DXGI_FORMAT;
  /** Windows.Win32.Graphics.Direct3D10.D3D10_RTV_DIMENSION */
  ViewDimension: D3D10_RTV_DIMENSION;
  /** _Anonymous_e__Union */
  Anonymous: Uint8Array | Deno.PointerValue | null;
}

export const sizeofD3D10_RENDER_TARGET_VIEW_DESC = 16;

export function allocD3D10_RENDER_TARGET_VIEW_DESC(data?: Partial<D3D10_RENDER_TARGET_VIEW_DESC>): Uint8Array {
  const buf = new Uint8Array(sizeofD3D10_RENDER_TARGET_VIEW_DESC);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.Format !== undefined) view.setUint32(0, Number(data.Format), true);
  // 0x04: i32
  if (data?.ViewDimension !== undefined) view.setInt32(4, Number(data.ViewDimension), true);
  // 0x08: pointer
  if (data?.Anonymous !== undefined) view.setBigUint64(8, data.Anonymous === null ? 0n : util.toBigInt(util.toPointer(data.Anonymous)), true);
  return buf;
}

export class D3D10_RENDER_TARGET_VIEW_DESCView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get Format(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: i32
  get ViewDimension(): number {
    return this.view.getInt32(4, true);
  }

  // 0x08: pointer
  get Anonymous(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(8, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: u32
  set Format(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: i32
  set ViewDimension(value: number) {
    this.view.setInt32(4, value, true);
  }

  // 0x08: pointer
  set Anonymous(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(8, util.toBigInt(util.toPointer(value)), true);
  }
}

/**
 * Windows.Win32.Graphics.Direct3D10.D3D10_TEX1D_DSV (size: 8)
 */
export interface D3D10_TEX1D_DSV {
  /** u32 */
  MipSlice: number;
}

export const sizeofD3D10_TEX1D_DSV = 8;

export function allocD3D10_TEX1D_DSV(data?: Partial<D3D10_TEX1D_DSV>): Uint8Array {
  const buf = new Uint8Array(sizeofD3D10_TEX1D_DSV);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.MipSlice !== undefined) view.setUint32(0, Number(data.MipSlice), true);
  // 0x04: pad4
  return buf;
}

export class D3D10_TEX1D_DSVView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get MipSlice(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: pad4

  // 0x00: u32
  set MipSlice(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: pad4
}

/**
 * Windows.Win32.Graphics.Direct3D10.D3D10_TEX1D_ARRAY_DSV (size: 16)
 */
export interface D3D10_TEX1D_ARRAY_DSV {
  /** u32 */
  MipSlice: number;
  /** u32 */
  FirstArraySlice: number;
  /** u32 */
  ArraySize: number;
}

export const sizeofD3D10_TEX1D_ARRAY_DSV = 16;

export function allocD3D10_TEX1D_ARRAY_DSV(data?: Partial<D3D10_TEX1D_ARRAY_DSV>): Uint8Array {
  const buf = new Uint8Array(sizeofD3D10_TEX1D_ARRAY_DSV);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.MipSlice !== undefined) view.setUint32(0, Number(data.MipSlice), true);
  // 0x04: u32
  if (data?.FirstArraySlice !== undefined) view.setUint32(4, Number(data.FirstArraySlice), true);
  // 0x08: u32
  if (data?.ArraySize !== undefined) view.setUint32(8, Number(data.ArraySize), true);
  // 0x0c: pad4
  return buf;
}

export class D3D10_TEX1D_ARRAY_DSVView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get MipSlice(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: u32
  get FirstArraySlice(): number {
    return this.view.getUint32(4, true);
  }

  // 0x08: u32
  get ArraySize(): number {
    return this.view.getUint32(8, true);
  }

  // 0x0c: pad4

  // 0x00: u32
  set MipSlice(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: u32
  set FirstArraySlice(value: number) {
    this.view.setUint32(4, value, true);
  }

  // 0x08: u32
  set ArraySize(value: number) {
    this.view.setUint32(8, value, true);
  }

  // 0x0c: pad4
}

/**
 * Windows.Win32.Graphics.Direct3D10.D3D10_TEX2D_DSV (size: 8)
 */
export interface D3D10_TEX2D_DSV {
  /** u32 */
  MipSlice: number;
}

export const sizeofD3D10_TEX2D_DSV = 8;

export function allocD3D10_TEX2D_DSV(data?: Partial<D3D10_TEX2D_DSV>): Uint8Array {
  const buf = new Uint8Array(sizeofD3D10_TEX2D_DSV);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.MipSlice !== undefined) view.setUint32(0, Number(data.MipSlice), true);
  // 0x04: pad4
  return buf;
}

export class D3D10_TEX2D_DSVView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get MipSlice(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: pad4

  // 0x00: u32
  set MipSlice(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: pad4
}

/**
 * Windows.Win32.Graphics.Direct3D10.D3D10_TEX2D_ARRAY_DSV (size: 16)
 */
export interface D3D10_TEX2D_ARRAY_DSV {
  /** u32 */
  MipSlice: number;
  /** u32 */
  FirstArraySlice: number;
  /** u32 */
  ArraySize: number;
}

export const sizeofD3D10_TEX2D_ARRAY_DSV = 16;

export function allocD3D10_TEX2D_ARRAY_DSV(data?: Partial<D3D10_TEX2D_ARRAY_DSV>): Uint8Array {
  const buf = new Uint8Array(sizeofD3D10_TEX2D_ARRAY_DSV);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.MipSlice !== undefined) view.setUint32(0, Number(data.MipSlice), true);
  // 0x04: u32
  if (data?.FirstArraySlice !== undefined) view.setUint32(4, Number(data.FirstArraySlice), true);
  // 0x08: u32
  if (data?.ArraySize !== undefined) view.setUint32(8, Number(data.ArraySize), true);
  // 0x0c: pad4
  return buf;
}

export class D3D10_TEX2D_ARRAY_DSVView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get MipSlice(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: u32
  get FirstArraySlice(): number {
    return this.view.getUint32(4, true);
  }

  // 0x08: u32
  get ArraySize(): number {
    return this.view.getUint32(8, true);
  }

  // 0x0c: pad4

  // 0x00: u32
  set MipSlice(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: u32
  set FirstArraySlice(value: number) {
    this.view.setUint32(4, value, true);
  }

  // 0x08: u32
  set ArraySize(value: number) {
    this.view.setUint32(8, value, true);
  }

  // 0x0c: pad4
}

/**
 * Windows.Win32.Graphics.Direct3D10.D3D10_TEX2DMS_DSV (size: 8)
 */
export interface D3D10_TEX2DMS_DSV {
  /** u32 */
  UnusedField_NothingToDefine: number;
}

export const sizeofD3D10_TEX2DMS_DSV = 8;

export function allocD3D10_TEX2DMS_DSV(data?: Partial<D3D10_TEX2DMS_DSV>): Uint8Array {
  const buf = new Uint8Array(sizeofD3D10_TEX2DMS_DSV);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.UnusedField_NothingToDefine !== undefined) view.setUint32(0, Number(data.UnusedField_NothingToDefine), true);
  // 0x04: pad4
  return buf;
}

export class D3D10_TEX2DMS_DSVView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get UnusedField_NothingToDefine(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: pad4

  // 0x00: u32
  set UnusedField_NothingToDefine(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: pad4
}

/**
 * Windows.Win32.Graphics.Direct3D10.D3D10_TEX2DMS_ARRAY_DSV (size: 8)
 */
export interface D3D10_TEX2DMS_ARRAY_DSV {
  /** u32 */
  FirstArraySlice: number;
  /** u32 */
  ArraySize: number;
}

export const sizeofD3D10_TEX2DMS_ARRAY_DSV = 8;

export function allocD3D10_TEX2DMS_ARRAY_DSV(data?: Partial<D3D10_TEX2DMS_ARRAY_DSV>): Uint8Array {
  const buf = new Uint8Array(sizeofD3D10_TEX2DMS_ARRAY_DSV);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.FirstArraySlice !== undefined) view.setUint32(0, Number(data.FirstArraySlice), true);
  // 0x04: u32
  if (data?.ArraySize !== undefined) view.setUint32(4, Number(data.ArraySize), true);
  return buf;
}

export class D3D10_TEX2DMS_ARRAY_DSVView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get FirstArraySlice(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: u32
  get ArraySize(): number {
    return this.view.getUint32(4, true);
  }

  // 0x00: u32
  set FirstArraySlice(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: u32
  set ArraySize(value: number) {
    this.view.setUint32(4, value, true);
  }
}

/**
 * Windows.Win32.Graphics.Direct3D10.D3D10_DEPTH_STENCIL_VIEW_DESC (size: 16)
 */
export interface D3D10_DEPTH_STENCIL_VIEW_DESC {
  /** Windows.Win32.Graphics.Dxgi.Common.DXGI_FORMAT */
  Format: DXGI_FORMAT;
  /** Windows.Win32.Graphics.Direct3D10.D3D10_DSV_DIMENSION */
  ViewDimension: D3D10_DSV_DIMENSION;
  /** _Anonymous_e__Union */
  Anonymous: Uint8Array | Deno.PointerValue | null;
}

export const sizeofD3D10_DEPTH_STENCIL_VIEW_DESC = 16;

export function allocD3D10_DEPTH_STENCIL_VIEW_DESC(data?: Partial<D3D10_DEPTH_STENCIL_VIEW_DESC>): Uint8Array {
  const buf = new Uint8Array(sizeofD3D10_DEPTH_STENCIL_VIEW_DESC);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.Format !== undefined) view.setUint32(0, Number(data.Format), true);
  // 0x04: i32
  if (data?.ViewDimension !== undefined) view.setInt32(4, Number(data.ViewDimension), true);
  // 0x08: pointer
  if (data?.Anonymous !== undefined) view.setBigUint64(8, data.Anonymous === null ? 0n : util.toBigInt(util.toPointer(data.Anonymous)), true);
  return buf;
}

export class D3D10_DEPTH_STENCIL_VIEW_DESCView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get Format(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: i32
  get ViewDimension(): number {
    return this.view.getInt32(4, true);
  }

  // 0x08: pointer
  get Anonymous(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(8, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: u32
  set Format(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: i32
  set ViewDimension(value: number) {
    this.view.setInt32(4, value, true);
  }

  // 0x08: pointer
  set Anonymous(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(8, util.toBigInt(util.toPointer(value)), true);
  }
}

/**
 * Windows.Win32.Graphics.Direct3D10.D3D10_SAMPLER_DESC (size: 48)
 */
export interface D3D10_SAMPLER_DESC {
  /** Windows.Win32.Graphics.Direct3D10.D3D10_FILTER */
  Filter: D3D10_FILTER;
  /** Windows.Win32.Graphics.Direct3D10.D3D10_TEXTURE_ADDRESS_MODE */
  AddressU: D3D10_TEXTURE_ADDRESS_MODE;
  /** Windows.Win32.Graphics.Direct3D10.D3D10_TEXTURE_ADDRESS_MODE */
  AddressV: D3D10_TEXTURE_ADDRESS_MODE;
  /** Windows.Win32.Graphics.Direct3D10.D3D10_TEXTURE_ADDRESS_MODE */
  AddressW: D3D10_TEXTURE_ADDRESS_MODE;
  /** f32 */
  MipLODBias: number;
  /** u32 */
  MaxAnisotropy: number;
  /** Windows.Win32.Graphics.Direct3D10.D3D10_COMPARISON_FUNC */
  ComparisonFunc: D3D10_COMPARISON_FUNC;
  /** array */
  BorderColor: Deno.PointerValue | null;
  /** f32 */
  MinLOD: number;
  /** f32 */
  MaxLOD: number;
}

export const sizeofD3D10_SAMPLER_DESC = 48;

export function allocD3D10_SAMPLER_DESC(data?: Partial<D3D10_SAMPLER_DESC>): Uint8Array {
  const buf = new Uint8Array(sizeofD3D10_SAMPLER_DESC);
  const view = new DataView(buf.buffer);
  // 0x00: i32
  if (data?.Filter !== undefined) view.setInt32(0, Number(data.Filter), true);
  // 0x04: i32
  if (data?.AddressU !== undefined) view.setInt32(4, Number(data.AddressU), true);
  // 0x08: i32
  if (data?.AddressV !== undefined) view.setInt32(8, Number(data.AddressV), true);
  // 0x0c: i32
  if (data?.AddressW !== undefined) view.setInt32(12, Number(data.AddressW), true);
  // 0x10: f32
  if (data?.MipLODBias !== undefined) view.setFloat32(16, Number(data.MipLODBias), true);
  // 0x14: u32
  if (data?.MaxAnisotropy !== undefined) view.setUint32(20, Number(data.MaxAnisotropy), true);
  // 0x18: i32
  if (data?.ComparisonFunc !== undefined) view.setInt32(24, Number(data.ComparisonFunc), true);
  // 0x1c: pad4
  // 0x20: pointer
  if (data?.BorderColor !== undefined) view.setBigUint64(32, data.BorderColor === null ? 0n : util.toBigInt(util.toPointer(data.BorderColor)), true);
  // 0x28: f32
  if (data?.MinLOD !== undefined) view.setFloat32(40, Number(data.MinLOD), true);
  // 0x2c: f32
  if (data?.MaxLOD !== undefined) view.setFloat32(44, Number(data.MaxLOD), true);
  return buf;
}

export class D3D10_SAMPLER_DESCView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: i32
  get Filter(): number {
    return this.view.getInt32(0, true);
  }

  // 0x04: i32
  get AddressU(): number {
    return this.view.getInt32(4, true);
  }

  // 0x08: i32
  get AddressV(): number {
    return this.view.getInt32(8, true);
  }

  // 0x0c: i32
  get AddressW(): number {
    return this.view.getInt32(12, true);
  }

  // 0x10: f32
  get MipLODBias(): number {
    return this.view.getFloat32(16, true);
  }

  // 0x14: u32
  get MaxAnisotropy(): number {
    return this.view.getUint32(20, true);
  }

  // 0x18: i32
  get ComparisonFunc(): number {
    return this.view.getInt32(24, true);
  }

  // 0x1c: pad4

  // 0x20: pointer
  get BorderColor(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(32, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x28: f32
  get MinLOD(): number {
    return this.view.getFloat32(40, true);
  }

  // 0x2c: f32
  get MaxLOD(): number {
    return this.view.getFloat32(44, true);
  }

  // 0x00: i32
  set Filter(value: number) {
    this.view.setInt32(0, value, true);
  }

  // 0x04: i32
  set AddressU(value: number) {
    this.view.setInt32(4, value, true);
  }

  // 0x08: i32
  set AddressV(value: number) {
    this.view.setInt32(8, value, true);
  }

  // 0x0c: i32
  set AddressW(value: number) {
    this.view.setInt32(12, value, true);
  }

  // 0x10: f32
  set MipLODBias(value: number) {
    this.view.setFloat32(16, value, true);
  }

  // 0x14: u32
  set MaxAnisotropy(value: number) {
    this.view.setUint32(20, value, true);
  }

  // 0x18: i32
  set ComparisonFunc(value: number) {
    this.view.setInt32(24, value, true);
  }

  // 0x1c: pad4

  // 0x20: pointer
  set BorderColor(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(32, util.toBigInt(util.toPointer(value)), true);
  }

  // 0x28: f32
  set MinLOD(value: number) {
    this.view.setFloat32(40, value, true);
  }

  // 0x2c: f32
  set MaxLOD(value: number) {
    this.view.setFloat32(44, value, true);
  }
}

/**
 * Windows.Win32.Graphics.Direct3D10.D3D10_QUERY_DESC (size: 8)
 */
export interface D3D10_QUERY_DESC {
  /** Windows.Win32.Graphics.Direct3D10.D3D10_QUERY */
  Query: D3D10_QUERY;
  /** u32 */
  MiscFlags: number;
}

export const sizeofD3D10_QUERY_DESC = 8;

export function allocD3D10_QUERY_DESC(data?: Partial<D3D10_QUERY_DESC>): Uint8Array {
  const buf = new Uint8Array(sizeofD3D10_QUERY_DESC);
  const view = new DataView(buf.buffer);
  // 0x00: i32
  if (data?.Query !== undefined) view.setInt32(0, Number(data.Query), true);
  // 0x04: u32
  if (data?.MiscFlags !== undefined) view.setUint32(4, Number(data.MiscFlags), true);
  return buf;
}

export class D3D10_QUERY_DESCView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: i32
  get Query(): number {
    return this.view.getInt32(0, true);
  }

  // 0x04: u32
  get MiscFlags(): number {
    return this.view.getUint32(4, true);
  }

  // 0x00: i32
  set Query(value: number) {
    this.view.setInt32(0, value, true);
  }

  // 0x04: u32
  set MiscFlags(value: number) {
    this.view.setUint32(4, value, true);
  }
}

/**
 * Windows.Win32.Graphics.Direct3D10.D3D10_QUERY_DATA_TIMESTAMP_DISJOINT (size: 16)
 */
export interface D3D10_QUERY_DATA_TIMESTAMP_DISJOINT {
  /** u64 */
  Frequency: number | bigint;
  /** Windows.Win32.Foundation.BOOL */
  Disjoint: boolean;
}

export const sizeofD3D10_QUERY_DATA_TIMESTAMP_DISJOINT = 16;

export function allocD3D10_QUERY_DATA_TIMESTAMP_DISJOINT(data?: Partial<D3D10_QUERY_DATA_TIMESTAMP_DISJOINT>): Uint8Array {
  const buf = new Uint8Array(sizeofD3D10_QUERY_DATA_TIMESTAMP_DISJOINT);
  const view = new DataView(buf.buffer);
  // 0x00: u64
  if (data?.Frequency !== undefined) view.setBigUint64(0, util.toBigInt(data.Frequency), true);
  // 0x08: i32
  if (data?.Disjoint !== undefined) view.setInt32(8, Number(data.Disjoint), true);
  // 0x0c: pad4
  return buf;
}

export class D3D10_QUERY_DATA_TIMESTAMP_DISJOINTView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u64
  get Frequency(): number | bigint {
    return this.view.getBigUint64(0, true);
  }

  // 0x08: i32
  get Disjoint(): number {
    return this.view.getInt32(8, true);
  }

  // 0x0c: pad4

  // 0x00: u64
  set Frequency(value: number | bigint) {
    this.view.setBigUint64(0, util.toBigInt(value), true);
  }

  // 0x08: i32
  set Disjoint(value: number) {
    this.view.setInt32(8, value, true);
  }

  // 0x0c: pad4
}

/**
 * Windows.Win32.Graphics.Direct3D10.D3D10_QUERY_DATA_PIPELINE_STATISTICS (size: 64)
 */
export interface D3D10_QUERY_DATA_PIPELINE_STATISTICS {
  /** u64 */
  IAVertices: number | bigint;
  /** u64 */
  IAPrimitives: number | bigint;
  /** u64 */
  VSInvocations: number | bigint;
  /** u64 */
  GSInvocations: number | bigint;
  /** u64 */
  GSPrimitives: number | bigint;
  /** u64 */
  CInvocations: number | bigint;
  /** u64 */
  CPrimitives: number | bigint;
  /** u64 */
  PSInvocations: number | bigint;
}

export const sizeofD3D10_QUERY_DATA_PIPELINE_STATISTICS = 64;

export function allocD3D10_QUERY_DATA_PIPELINE_STATISTICS(data?: Partial<D3D10_QUERY_DATA_PIPELINE_STATISTICS>): Uint8Array {
  const buf = new Uint8Array(sizeofD3D10_QUERY_DATA_PIPELINE_STATISTICS);
  const view = new DataView(buf.buffer);
  // 0x00: u64
  if (data?.IAVertices !== undefined) view.setBigUint64(0, util.toBigInt(data.IAVertices), true);
  // 0x08: u64
  if (data?.IAPrimitives !== undefined) view.setBigUint64(8, util.toBigInt(data.IAPrimitives), true);
  // 0x10: u64
  if (data?.VSInvocations !== undefined) view.setBigUint64(16, util.toBigInt(data.VSInvocations), true);
  // 0x18: u64
  if (data?.GSInvocations !== undefined) view.setBigUint64(24, util.toBigInt(data.GSInvocations), true);
  // 0x20: u64
  if (data?.GSPrimitives !== undefined) view.setBigUint64(32, util.toBigInt(data.GSPrimitives), true);
  // 0x28: u64
  if (data?.CInvocations !== undefined) view.setBigUint64(40, util.toBigInt(data.CInvocations), true);
  // 0x30: u64
  if (data?.CPrimitives !== undefined) view.setBigUint64(48, util.toBigInt(data.CPrimitives), true);
  // 0x38: u64
  if (data?.PSInvocations !== undefined) view.setBigUint64(56, util.toBigInt(data.PSInvocations), true);
  return buf;
}

export class D3D10_QUERY_DATA_PIPELINE_STATISTICSView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u64
  get IAVertices(): number | bigint {
    return this.view.getBigUint64(0, true);
  }

  // 0x08: u64
  get IAPrimitives(): number | bigint {
    return this.view.getBigUint64(8, true);
  }

  // 0x10: u64
  get VSInvocations(): number | bigint {
    return this.view.getBigUint64(16, true);
  }

  // 0x18: u64
  get GSInvocations(): number | bigint {
    return this.view.getBigUint64(24, true);
  }

  // 0x20: u64
  get GSPrimitives(): number | bigint {
    return this.view.getBigUint64(32, true);
  }

  // 0x28: u64
  get CInvocations(): number | bigint {
    return this.view.getBigUint64(40, true);
  }

  // 0x30: u64
  get CPrimitives(): number | bigint {
    return this.view.getBigUint64(48, true);
  }

  // 0x38: u64
  get PSInvocations(): number | bigint {
    return this.view.getBigUint64(56, true);
  }

  // 0x00: u64
  set IAVertices(value: number | bigint) {
    this.view.setBigUint64(0, util.toBigInt(value), true);
  }

  // 0x08: u64
  set IAPrimitives(value: number | bigint) {
    this.view.setBigUint64(8, util.toBigInt(value), true);
  }

  // 0x10: u64
  set VSInvocations(value: number | bigint) {
    this.view.setBigUint64(16, util.toBigInt(value), true);
  }

  // 0x18: u64
  set GSInvocations(value: number | bigint) {
    this.view.setBigUint64(24, util.toBigInt(value), true);
  }

  // 0x20: u64
  set GSPrimitives(value: number | bigint) {
    this.view.setBigUint64(32, util.toBigInt(value), true);
  }

  // 0x28: u64
  set CInvocations(value: number | bigint) {
    this.view.setBigUint64(40, util.toBigInt(value), true);
  }

  // 0x30: u64
  set CPrimitives(value: number | bigint) {
    this.view.setBigUint64(48, util.toBigInt(value), true);
  }

  // 0x38: u64
  set PSInvocations(value: number | bigint) {
    this.view.setBigUint64(56, util.toBigInt(value), true);
  }
}

/**
 * Windows.Win32.Graphics.Direct3D10.D3D10_QUERY_DATA_SO_STATISTICS (size: 16)
 */
export interface D3D10_QUERY_DATA_SO_STATISTICS {
  /** u64 */
  NumPrimitivesWritten: number | bigint;
  /** u64 */
  PrimitivesStorageNeeded: number | bigint;
}

export const sizeofD3D10_QUERY_DATA_SO_STATISTICS = 16;

export function allocD3D10_QUERY_DATA_SO_STATISTICS(data?: Partial<D3D10_QUERY_DATA_SO_STATISTICS>): Uint8Array {
  const buf = new Uint8Array(sizeofD3D10_QUERY_DATA_SO_STATISTICS);
  const view = new DataView(buf.buffer);
  // 0x00: u64
  if (data?.NumPrimitivesWritten !== undefined) view.setBigUint64(0, util.toBigInt(data.NumPrimitivesWritten), true);
  // 0x08: u64
  if (data?.PrimitivesStorageNeeded !== undefined) view.setBigUint64(8, util.toBigInt(data.PrimitivesStorageNeeded), true);
  return buf;
}

export class D3D10_QUERY_DATA_SO_STATISTICSView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u64
  get NumPrimitivesWritten(): number | bigint {
    return this.view.getBigUint64(0, true);
  }

  // 0x08: u64
  get PrimitivesStorageNeeded(): number | bigint {
    return this.view.getBigUint64(8, true);
  }

  // 0x00: u64
  set NumPrimitivesWritten(value: number | bigint) {
    this.view.setBigUint64(0, util.toBigInt(value), true);
  }

  // 0x08: u64
  set PrimitivesStorageNeeded(value: number | bigint) {
    this.view.setBigUint64(8, util.toBigInt(value), true);
  }
}

/**
 * Windows.Win32.Graphics.Direct3D10.D3D10_COUNTER_DESC (size: 8)
 */
export interface D3D10_COUNTER_DESC {
  /** Windows.Win32.Graphics.Direct3D10.D3D10_COUNTER */
  Counter: D3D10_COUNTER;
  /** u32 */
  MiscFlags: number;
}

export const sizeofD3D10_COUNTER_DESC = 8;

export function allocD3D10_COUNTER_DESC(data?: Partial<D3D10_COUNTER_DESC>): Uint8Array {
  const buf = new Uint8Array(sizeofD3D10_COUNTER_DESC);
  const view = new DataView(buf.buffer);
  // 0x00: i32
  if (data?.Counter !== undefined) view.setInt32(0, Number(data.Counter), true);
  // 0x04: u32
  if (data?.MiscFlags !== undefined) view.setUint32(4, Number(data.MiscFlags), true);
  return buf;
}

export class D3D10_COUNTER_DESCView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: i32
  get Counter(): number {
    return this.view.getInt32(0, true);
  }

  // 0x04: u32
  get MiscFlags(): number {
    return this.view.getUint32(4, true);
  }

  // 0x00: i32
  set Counter(value: number) {
    this.view.setInt32(0, value, true);
  }

  // 0x04: u32
  set MiscFlags(value: number) {
    this.view.setUint32(4, value, true);
  }
}

/**
 * Windows.Win32.Graphics.Direct3D10.D3D10_COUNTER_INFO (size: 16)
 */
export interface D3D10_COUNTER_INFO {
  /** Windows.Win32.Graphics.Direct3D10.D3D10_COUNTER */
  LastDeviceDependentCounter: D3D10_COUNTER;
  /** u32 */
  NumSimultaneousCounters: number;
  /** u8 */
  NumDetectableParallelUnits: number;
}

export const sizeofD3D10_COUNTER_INFO = 16;

export function allocD3D10_COUNTER_INFO(data?: Partial<D3D10_COUNTER_INFO>): Uint8Array {
  const buf = new Uint8Array(sizeofD3D10_COUNTER_INFO);
  const view = new DataView(buf.buffer);
  // 0x00: i32
  if (data?.LastDeviceDependentCounter !== undefined) view.setInt32(0, Number(data.LastDeviceDependentCounter), true);
  // 0x04: u32
  if (data?.NumSimultaneousCounters !== undefined) view.setUint32(4, Number(data.NumSimultaneousCounters), true);
  // 0x08: u8
  if (data?.NumDetectableParallelUnits !== undefined) view.setUint8(8, Number(data.NumDetectableParallelUnits));
  // 0x09: pad7
  return buf;
}

export class D3D10_COUNTER_INFOView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: i32
  get LastDeviceDependentCounter(): number {
    return this.view.getInt32(0, true);
  }

  // 0x04: u32
  get NumSimultaneousCounters(): number {
    return this.view.getUint32(4, true);
  }

  // 0x08: u8
  get NumDetectableParallelUnits(): number {
    return this.view.getUint8(8);
  }

  // 0x09: pad7

  // 0x00: i32
  set LastDeviceDependentCounter(value: number) {
    this.view.setInt32(0, value, true);
  }

  // 0x04: u32
  set NumSimultaneousCounters(value: number) {
    this.view.setUint32(4, value, true);
  }

  // 0x08: u8
  set NumDetectableParallelUnits(value: number) {
    this.view.setUint8(8, value);
  }

  // 0x09: pad7
}

/**
 * Windows.Win32.Graphics.Direct3D10.D3D10_MESSAGE (size: 32)
 */
export interface D3D10_MESSAGE {
  /** Windows.Win32.Graphics.Direct3D10.D3D10_MESSAGE_CATEGORY */
  Category: D3D10_MESSAGE_CATEGORY;
  /** Windows.Win32.Graphics.Direct3D10.D3D10_MESSAGE_SEVERITY */
  Severity: D3D10_MESSAGE_SEVERITY;
  /** Windows.Win32.Graphics.Direct3D10.D3D10_MESSAGE_ID */
  ID: D3D10_MESSAGE_ID;
  /** ptr */
  pDescription: Deno.PointerValue | Uint8Array | null;
  /** usize */
  DescriptionByteLength: number | bigint;
}

export const sizeofD3D10_MESSAGE = 32;

export function allocD3D10_MESSAGE(data?: Partial<D3D10_MESSAGE>): Uint8Array {
  const buf = new Uint8Array(sizeofD3D10_MESSAGE);
  const view = new DataView(buf.buffer);
  // 0x00: i32
  if (data?.Category !== undefined) view.setInt32(0, Number(data.Category), true);
  // 0x04: i32
  if (data?.Severity !== undefined) view.setInt32(4, Number(data.Severity), true);
  // 0x08: i32
  if (data?.ID !== undefined) view.setInt32(8, Number(data.ID), true);
  // 0x0c: pad4
  // 0x10: pointer
  if (data?.pDescription !== undefined) view.setBigUint64(16, data.pDescription === null ? 0n : util.toBigInt(util.toPointer(data.pDescription)), true);
  // 0x18: usize
  if (data?.DescriptionByteLength !== undefined) view.setBigUint64(24, util.toBigInt(data.DescriptionByteLength), true);
  return buf;
}

export class D3D10_MESSAGEView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: i32
  get Category(): number {
    return this.view.getInt32(0, true);
  }

  // 0x04: i32
  get Severity(): number {
    return this.view.getInt32(4, true);
  }

  // 0x08: i32
  get ID(): number {
    return this.view.getInt32(8, true);
  }

  // 0x0c: pad4

  // 0x10: pointer
  get pDescription(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(16, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x18: usize
  get DescriptionByteLength(): number | bigint {
    return this.view.getBigUint64(24, true);
  }

  // 0x00: i32
  set Category(value: number) {
    this.view.setInt32(0, value, true);
  }

  // 0x04: i32
  set Severity(value: number) {
    this.view.setInt32(4, value, true);
  }

  // 0x08: i32
  set ID(value: number) {
    this.view.setInt32(8, value, true);
  }

  // 0x0c: pad4

  // 0x10: pointer
  set pDescription(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(16, util.toBigInt(util.toPointer(value)), true);
  }

  // 0x18: usize
  set DescriptionByteLength(value: number | bigint) {
    this.view.setBigUint64(24, util.toBigInt(value), true);
  }
}

/**
 * Windows.Win32.Graphics.Direct3D10.D3D10_INFO_QUEUE_FILTER_DESC (size: 48)
 */
export interface D3D10_INFO_QUEUE_FILTER_DESC {
  /** u32 */
  NumCategories: number;
  /** ptr */
  pCategoryList: Deno.PointerValue | Uint8Array | null;
  /** u32 */
  NumSeverities: number;
  /** ptr */
  pSeverityList: Deno.PointerValue | Uint8Array | null;
  /** u32 */
  NumIDs: number;
  /** ptr */
  pIDList: Deno.PointerValue | Uint8Array | null;
}

export const sizeofD3D10_INFO_QUEUE_FILTER_DESC = 48;

export function allocD3D10_INFO_QUEUE_FILTER_DESC(data?: Partial<D3D10_INFO_QUEUE_FILTER_DESC>): Uint8Array {
  const buf = new Uint8Array(sizeofD3D10_INFO_QUEUE_FILTER_DESC);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.NumCategories !== undefined) view.setUint32(0, Number(data.NumCategories), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.pCategoryList !== undefined) view.setBigUint64(8, data.pCategoryList === null ? 0n : util.toBigInt(util.toPointer(data.pCategoryList)), true);
  // 0x10: u32
  if (data?.NumSeverities !== undefined) view.setUint32(16, Number(data.NumSeverities), true);
  // 0x14: pad4
  // 0x18: pointer
  if (data?.pSeverityList !== undefined) view.setBigUint64(24, data.pSeverityList === null ? 0n : util.toBigInt(util.toPointer(data.pSeverityList)), true);
  // 0x20: u32
  if (data?.NumIDs !== undefined) view.setUint32(32, Number(data.NumIDs), true);
  // 0x24: pad4
  // 0x28: pointer
  if (data?.pIDList !== undefined) view.setBigUint64(40, data.pIDList === null ? 0n : util.toBigInt(util.toPointer(data.pIDList)), true);
  return buf;
}

export class D3D10_INFO_QUEUE_FILTER_DESCView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get NumCategories(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  get pCategoryList(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(8, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x10: u32
  get NumSeverities(): number {
    return this.view.getUint32(16, true);
  }

  // 0x14: pad4

  // 0x18: pointer
  get pSeverityList(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(24, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x20: u32
  get NumIDs(): number {
    return this.view.getUint32(32, true);
  }

  // 0x24: pad4

  // 0x28: pointer
  get pIDList(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(40, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: u32
  set NumCategories(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  set pCategoryList(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(8, util.toBigInt(util.toPointer(value)), true);
  }

  // 0x10: u32
  set NumSeverities(value: number) {
    this.view.setUint32(16, value, true);
  }

  // 0x14: pad4

  // 0x18: pointer
  set pSeverityList(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(24, util.toBigInt(util.toPointer(value)), true);
  }

  // 0x20: u32
  set NumIDs(value: number) {
    this.view.setUint32(32, value, true);
  }

  // 0x24: pad4

  // 0x28: pointer
  set pIDList(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(40, util.toBigInt(util.toPointer(value)), true);
  }
}

/**
 * Windows.Win32.Graphics.Direct3D10.D3D10_INFO_QUEUE_FILTER (size: 16)
 */
export interface D3D10_INFO_QUEUE_FILTER {
  /** Windows.Win32.Graphics.Direct3D10.D3D10_INFO_QUEUE_FILTER_DESC */
  AllowList: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Graphics.Direct3D10.D3D10_INFO_QUEUE_FILTER_DESC */
  DenyList: Uint8Array | Deno.PointerValue | null;
}

export const sizeofD3D10_INFO_QUEUE_FILTER = 16;

export function allocD3D10_INFO_QUEUE_FILTER(data?: Partial<D3D10_INFO_QUEUE_FILTER>): Uint8Array {
  const buf = new Uint8Array(sizeofD3D10_INFO_QUEUE_FILTER);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.AllowList !== undefined) view.setBigUint64(0, data.AllowList === null ? 0n : util.toBigInt(util.toPointer(data.AllowList)), true);
  // 0x08: pointer
  if (data?.DenyList !== undefined) view.setBigUint64(8, data.DenyList === null ? 0n : util.toBigInt(util.toPointer(data.DenyList)), true);
  return buf;
}

export class D3D10_INFO_QUEUE_FILTERView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get AllowList(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(0, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x08: pointer
  get DenyList(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(8, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: pointer
  set AllowList(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(0, util.toBigInt(util.toPointer(value)), true);
  }

  // 0x08: pointer
  set DenyList(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(8, util.toBigInt(util.toPointer(value)), true);
  }
}

/**
 * Windows.Win32.Graphics.Direct3D10.D3D10_SHADER_DESC (size: 120)
 */
export interface D3D10_SHADER_DESC {
  /** u32 */
  Version: number;
  /** Windows.Win32.Foundation.PSTR */
  Creator: string | null | Uint8Array;
  /** u32 */
  Flags: number;
  /** u32 */
  ConstantBuffers: number;
  /** u32 */
  BoundResources: number;
  /** u32 */
  InputParameters: number;
  /** u32 */
  OutputParameters: number;
  /** u32 */
  InstructionCount: number;
  /** u32 */
  TempRegisterCount: number;
  /** u32 */
  TempArrayCount: number;
  /** u32 */
  DefCount: number;
  /** u32 */
  DclCount: number;
  /** u32 */
  TextureNormalInstructions: number;
  /** u32 */
  TextureLoadInstructions: number;
  /** u32 */
  TextureCompInstructions: number;
  /** u32 */
  TextureBiasInstructions: number;
  /** u32 */
  TextureGradientInstructions: number;
  /** u32 */
  FloatInstructionCount: number;
  /** u32 */
  IntInstructionCount: number;
  /** u32 */
  UintInstructionCount: number;
  /** u32 */
  StaticFlowControlCount: number;
  /** u32 */
  DynamicFlowControlCount: number;
  /** u32 */
  MacroInstructionCount: number;
  /** u32 */
  ArrayInstructionCount: number;
  /** u32 */
  CutInstructionCount: number;
  /** u32 */
  EmitInstructionCount: number;
  /** Windows.Win32.Graphics.Direct3D.D3D_PRIMITIVE_TOPOLOGY */
  GSOutputTopology: D3D_PRIMITIVE_TOPOLOGY;
  /** u32 */
  GSMaxOutputVertexCount: number;
}

export const sizeofD3D10_SHADER_DESC = 120;

export function allocD3D10_SHADER_DESC(data?: Partial<D3D10_SHADER_DESC>): Uint8Array {
  const buf = new Uint8Array(sizeofD3D10_SHADER_DESC);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.Version !== undefined) view.setUint32(0, Number(data.Version), true);
  // 0x04: pad4
  // 0x08: buffer
  if (data?.Creator !== undefined) {
    (buf as any)._f8 = util.pstrToFfi(data.Creator);
    view.setBigUint64(8, (buf as any)._f8 === null ? 0n : util.toBigInt(Deno.UnsafePointer.of((buf as any)._f8)), true);
  }
  // 0x10: u32
  if (data?.Flags !== undefined) view.setUint32(16, Number(data.Flags), true);
  // 0x14: u32
  if (data?.ConstantBuffers !== undefined) view.setUint32(20, Number(data.ConstantBuffers), true);
  // 0x18: u32
  if (data?.BoundResources !== undefined) view.setUint32(24, Number(data.BoundResources), true);
  // 0x1c: u32
  if (data?.InputParameters !== undefined) view.setUint32(28, Number(data.InputParameters), true);
  // 0x20: u32
  if (data?.OutputParameters !== undefined) view.setUint32(32, Number(data.OutputParameters), true);
  // 0x24: u32
  if (data?.InstructionCount !== undefined) view.setUint32(36, Number(data.InstructionCount), true);
  // 0x28: u32
  if (data?.TempRegisterCount !== undefined) view.setUint32(40, Number(data.TempRegisterCount), true);
  // 0x2c: u32
  if (data?.TempArrayCount !== undefined) view.setUint32(44, Number(data.TempArrayCount), true);
  // 0x30: u32
  if (data?.DefCount !== undefined) view.setUint32(48, Number(data.DefCount), true);
  // 0x34: u32
  if (data?.DclCount !== undefined) view.setUint32(52, Number(data.DclCount), true);
  // 0x38: u32
  if (data?.TextureNormalInstructions !== undefined) view.setUint32(56, Number(data.TextureNormalInstructions), true);
  // 0x3c: u32
  if (data?.TextureLoadInstructions !== undefined) view.setUint32(60, Number(data.TextureLoadInstructions), true);
  // 0x40: u32
  if (data?.TextureCompInstructions !== undefined) view.setUint32(64, Number(data.TextureCompInstructions), true);
  // 0x44: u32
  if (data?.TextureBiasInstructions !== undefined) view.setUint32(68, Number(data.TextureBiasInstructions), true);
  // 0x48: u32
  if (data?.TextureGradientInstructions !== undefined) view.setUint32(72, Number(data.TextureGradientInstructions), true);
  // 0x4c: u32
  if (data?.FloatInstructionCount !== undefined) view.setUint32(76, Number(data.FloatInstructionCount), true);
  // 0x50: u32
  if (data?.IntInstructionCount !== undefined) view.setUint32(80, Number(data.IntInstructionCount), true);
  // 0x54: u32
  if (data?.UintInstructionCount !== undefined) view.setUint32(84, Number(data.UintInstructionCount), true);
  // 0x58: u32
  if (data?.StaticFlowControlCount !== undefined) view.setUint32(88, Number(data.StaticFlowControlCount), true);
  // 0x5c: u32
  if (data?.DynamicFlowControlCount !== undefined) view.setUint32(92, Number(data.DynamicFlowControlCount), true);
  // 0x60: u32
  if (data?.MacroInstructionCount !== undefined) view.setUint32(96, Number(data.MacroInstructionCount), true);
  // 0x64: u32
  if (data?.ArrayInstructionCount !== undefined) view.setUint32(100, Number(data.ArrayInstructionCount), true);
  // 0x68: u32
  if (data?.CutInstructionCount !== undefined) view.setUint32(104, Number(data.CutInstructionCount), true);
  // 0x6c: u32
  if (data?.EmitInstructionCount !== undefined) view.setUint32(108, Number(data.EmitInstructionCount), true);
  // 0x70: i32
  if (data?.GSOutputTopology !== undefined) view.setInt32(112, Number(data.GSOutputTopology), true);
  // 0x74: u32
  if (data?.GSMaxOutputVertexCount !== undefined) view.setUint32(116, Number(data.GSMaxOutputVertexCount), true);
  return buf;
}

export class D3D10_SHADER_DESCView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get Version(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: pad4

  // 0x08: buffer
  get Creator(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(8, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x10: u32
  get Flags(): number {
    return this.view.getUint32(16, true);
  }

  // 0x14: u32
  get ConstantBuffers(): number {
    return this.view.getUint32(20, true);
  }

  // 0x18: u32
  get BoundResources(): number {
    return this.view.getUint32(24, true);
  }

  // 0x1c: u32
  get InputParameters(): number {
    return this.view.getUint32(28, true);
  }

  // 0x20: u32
  get OutputParameters(): number {
    return this.view.getUint32(32, true);
  }

  // 0x24: u32
  get InstructionCount(): number {
    return this.view.getUint32(36, true);
  }

  // 0x28: u32
  get TempRegisterCount(): number {
    return this.view.getUint32(40, true);
  }

  // 0x2c: u32
  get TempArrayCount(): number {
    return this.view.getUint32(44, true);
  }

  // 0x30: u32
  get DefCount(): number {
    return this.view.getUint32(48, true);
  }

  // 0x34: u32
  get DclCount(): number {
    return this.view.getUint32(52, true);
  }

  // 0x38: u32
  get TextureNormalInstructions(): number {
    return this.view.getUint32(56, true);
  }

  // 0x3c: u32
  get TextureLoadInstructions(): number {
    return this.view.getUint32(60, true);
  }

  // 0x40: u32
  get TextureCompInstructions(): number {
    return this.view.getUint32(64, true);
  }

  // 0x44: u32
  get TextureBiasInstructions(): number {
    return this.view.getUint32(68, true);
  }

  // 0x48: u32
  get TextureGradientInstructions(): number {
    return this.view.getUint32(72, true);
  }

  // 0x4c: u32
  get FloatInstructionCount(): number {
    return this.view.getUint32(76, true);
  }

  // 0x50: u32
  get IntInstructionCount(): number {
    return this.view.getUint32(80, true);
  }

  // 0x54: u32
  get UintInstructionCount(): number {
    return this.view.getUint32(84, true);
  }

  // 0x58: u32
  get StaticFlowControlCount(): number {
    return this.view.getUint32(88, true);
  }

  // 0x5c: u32
  get DynamicFlowControlCount(): number {
    return this.view.getUint32(92, true);
  }

  // 0x60: u32
  get MacroInstructionCount(): number {
    return this.view.getUint32(96, true);
  }

  // 0x64: u32
  get ArrayInstructionCount(): number {
    return this.view.getUint32(100, true);
  }

  // 0x68: u32
  get CutInstructionCount(): number {
    return this.view.getUint32(104, true);
  }

  // 0x6c: u32
  get EmitInstructionCount(): number {
    return this.view.getUint32(108, true);
  }

  // 0x70: i32
  get GSOutputTopology(): number {
    return this.view.getInt32(112, true);
  }

  // 0x74: u32
  get GSMaxOutputVertexCount(): number {
    return this.view.getUint32(116, true);
  }

  // 0x00: u32
  set Version(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: pad4

  // 0x08: buffer
  set Creator(value: Uint8Array | Deno.PointerValue | null) {
    (this.buf as any)._f8 = value;
    this.view.setBigUint64(8, util.toBigInt(util.toPointer((this.buf as any)._f8)), true);
  }

  // 0x10: u32
  set Flags(value: number) {
    this.view.setUint32(16, value, true);
  }

  // 0x14: u32
  set ConstantBuffers(value: number) {
    this.view.setUint32(20, value, true);
  }

  // 0x18: u32
  set BoundResources(value: number) {
    this.view.setUint32(24, value, true);
  }

  // 0x1c: u32
  set InputParameters(value: number) {
    this.view.setUint32(28, value, true);
  }

  // 0x20: u32
  set OutputParameters(value: number) {
    this.view.setUint32(32, value, true);
  }

  // 0x24: u32
  set InstructionCount(value: number) {
    this.view.setUint32(36, value, true);
  }

  // 0x28: u32
  set TempRegisterCount(value: number) {
    this.view.setUint32(40, value, true);
  }

  // 0x2c: u32
  set TempArrayCount(value: number) {
    this.view.setUint32(44, value, true);
  }

  // 0x30: u32
  set DefCount(value: number) {
    this.view.setUint32(48, value, true);
  }

  // 0x34: u32
  set DclCount(value: number) {
    this.view.setUint32(52, value, true);
  }

  // 0x38: u32
  set TextureNormalInstructions(value: number) {
    this.view.setUint32(56, value, true);
  }

  // 0x3c: u32
  set TextureLoadInstructions(value: number) {
    this.view.setUint32(60, value, true);
  }

  // 0x40: u32
  set TextureCompInstructions(value: number) {
    this.view.setUint32(64, value, true);
  }

  // 0x44: u32
  set TextureBiasInstructions(value: number) {
    this.view.setUint32(68, value, true);
  }

  // 0x48: u32
  set TextureGradientInstructions(value: number) {
    this.view.setUint32(72, value, true);
  }

  // 0x4c: u32
  set FloatInstructionCount(value: number) {
    this.view.setUint32(76, value, true);
  }

  // 0x50: u32
  set IntInstructionCount(value: number) {
    this.view.setUint32(80, value, true);
  }

  // 0x54: u32
  set UintInstructionCount(value: number) {
    this.view.setUint32(84, value, true);
  }

  // 0x58: u32
  set StaticFlowControlCount(value: number) {
    this.view.setUint32(88, value, true);
  }

  // 0x5c: u32
  set DynamicFlowControlCount(value: number) {
    this.view.setUint32(92, value, true);
  }

  // 0x60: u32
  set MacroInstructionCount(value: number) {
    this.view.setUint32(96, value, true);
  }

  // 0x64: u32
  set ArrayInstructionCount(value: number) {
    this.view.setUint32(100, value, true);
  }

  // 0x68: u32
  set CutInstructionCount(value: number) {
    this.view.setUint32(104, value, true);
  }

  // 0x6c: u32
  set EmitInstructionCount(value: number) {
    this.view.setUint32(108, value, true);
  }

  // 0x70: i32
  set GSOutputTopology(value: number) {
    this.view.setInt32(112, value, true);
  }

  // 0x74: u32
  set GSMaxOutputVertexCount(value: number) {
    this.view.setUint32(116, value, true);
  }
}

/**
 * Windows.Win32.Graphics.Direct3D10.D3D10_SHADER_BUFFER_DESC (size: 24)
 */
export interface D3D10_SHADER_BUFFER_DESC {
  /** Windows.Win32.Foundation.PSTR */
  Name: string | null | Uint8Array;
  /** Windows.Win32.Graphics.Direct3D.D3D_CBUFFER_TYPE */
  Type: D3D_CBUFFER_TYPE;
  /** u32 */
  Variables: number;
  /** u32 */
  Size: number;
  /** u32 */
  uFlags: number;
}

export const sizeofD3D10_SHADER_BUFFER_DESC = 24;

export function allocD3D10_SHADER_BUFFER_DESC(data?: Partial<D3D10_SHADER_BUFFER_DESC>): Uint8Array {
  const buf = new Uint8Array(sizeofD3D10_SHADER_BUFFER_DESC);
  const view = new DataView(buf.buffer);
  // 0x00: buffer
  if (data?.Name !== undefined) {
    (buf as any)._f0 = util.pstrToFfi(data.Name);
    view.setBigUint64(0, (buf as any)._f0 === null ? 0n : util.toBigInt(Deno.UnsafePointer.of((buf as any)._f0)), true);
  }
  // 0x08: i32
  if (data?.Type !== undefined) view.setInt32(8, Number(data.Type), true);
  // 0x0c: u32
  if (data?.Variables !== undefined) view.setUint32(12, Number(data.Variables), true);
  // 0x10: u32
  if (data?.Size !== undefined) view.setUint32(16, Number(data.Size), true);
  // 0x14: u32
  if (data?.uFlags !== undefined) view.setUint32(20, Number(data.uFlags), true);
  return buf;
}

export class D3D10_SHADER_BUFFER_DESCView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: buffer
  get Name(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(0, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x08: i32
  get Type(): number {
    return this.view.getInt32(8, true);
  }

  // 0x0c: u32
  get Variables(): number {
    return this.view.getUint32(12, true);
  }

  // 0x10: u32
  get Size(): number {
    return this.view.getUint32(16, true);
  }

  // 0x14: u32
  get uFlags(): number {
    return this.view.getUint32(20, true);
  }

  // 0x00: buffer
  set Name(value: Uint8Array | Deno.PointerValue | null) {
    (this.buf as any)._f0 = value;
    this.view.setBigUint64(0, util.toBigInt(util.toPointer((this.buf as any)._f0)), true);
  }

  // 0x08: i32
  set Type(value: number) {
    this.view.setInt32(8, value, true);
  }

  // 0x0c: u32
  set Variables(value: number) {
    this.view.setUint32(12, value, true);
  }

  // 0x10: u32
  set Size(value: number) {
    this.view.setUint32(16, value, true);
  }

  // 0x14: u32
  set uFlags(value: number) {
    this.view.setUint32(20, value, true);
  }
}

/**
 * Windows.Win32.Graphics.Direct3D10.D3D10_SHADER_VARIABLE_DESC (size: 32)
 */
export interface D3D10_SHADER_VARIABLE_DESC {
  /** Windows.Win32.Foundation.PSTR */
  Name: string | null | Uint8Array;
  /** u32 */
  StartOffset: number;
  /** u32 */
  Size: number;
  /** u32 */
  uFlags: number;
  /** ptr */
  DefaultValue: Deno.PointerValue | Uint8Array | null;
}

export const sizeofD3D10_SHADER_VARIABLE_DESC = 32;

export function allocD3D10_SHADER_VARIABLE_DESC(data?: Partial<D3D10_SHADER_VARIABLE_DESC>): Uint8Array {
  const buf = new Uint8Array(sizeofD3D10_SHADER_VARIABLE_DESC);
  const view = new DataView(buf.buffer);
  // 0x00: buffer
  if (data?.Name !== undefined) {
    (buf as any)._f0 = util.pstrToFfi(data.Name);
    view.setBigUint64(0, (buf as any)._f0 === null ? 0n : util.toBigInt(Deno.UnsafePointer.of((buf as any)._f0)), true);
  }
  // 0x08: u32
  if (data?.StartOffset !== undefined) view.setUint32(8, Number(data.StartOffset), true);
  // 0x0c: u32
  if (data?.Size !== undefined) view.setUint32(12, Number(data.Size), true);
  // 0x10: u32
  if (data?.uFlags !== undefined) view.setUint32(16, Number(data.uFlags), true);
  // 0x14: pad4
  // 0x18: pointer
  if (data?.DefaultValue !== undefined) view.setBigUint64(24, data.DefaultValue === null ? 0n : util.toBigInt(util.toPointer(data.DefaultValue)), true);
  return buf;
}

export class D3D10_SHADER_VARIABLE_DESCView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: buffer
  get Name(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(0, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x08: u32
  get StartOffset(): number {
    return this.view.getUint32(8, true);
  }

  // 0x0c: u32
  get Size(): number {
    return this.view.getUint32(12, true);
  }

  // 0x10: u32
  get uFlags(): number {
    return this.view.getUint32(16, true);
  }

  // 0x14: pad4

  // 0x18: pointer
  get DefaultValue(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(24, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: buffer
  set Name(value: Uint8Array | Deno.PointerValue | null) {
    (this.buf as any)._f0 = value;
    this.view.setBigUint64(0, util.toBigInt(util.toPointer((this.buf as any)._f0)), true);
  }

  // 0x08: u32
  set StartOffset(value: number) {
    this.view.setUint32(8, value, true);
  }

  // 0x0c: u32
  set Size(value: number) {
    this.view.setUint32(12, value, true);
  }

  // 0x10: u32
  set uFlags(value: number) {
    this.view.setUint32(16, value, true);
  }

  // 0x14: pad4

  // 0x18: pointer
  set DefaultValue(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(24, util.toBigInt(util.toPointer(value)), true);
  }
}

/**
 * Windows.Win32.Graphics.Direct3D10.D3D10_SHADER_TYPE_DESC (size: 32)
 */
export interface D3D10_SHADER_TYPE_DESC {
  /** Windows.Win32.Graphics.Direct3D.D3D_SHADER_VARIABLE_CLASS */
  Class: D3D_SHADER_VARIABLE_CLASS;
  /** Windows.Win32.Graphics.Direct3D.D3D_SHADER_VARIABLE_TYPE */
  Type: D3D_SHADER_VARIABLE_TYPE;
  /** u32 */
  Rows: number;
  /** u32 */
  Columns: number;
  /** u32 */
  Elements: number;
  /** u32 */
  Members: number;
  /** u32 */
  Offset: number;
}

export const sizeofD3D10_SHADER_TYPE_DESC = 32;

export function allocD3D10_SHADER_TYPE_DESC(data?: Partial<D3D10_SHADER_TYPE_DESC>): Uint8Array {
  const buf = new Uint8Array(sizeofD3D10_SHADER_TYPE_DESC);
  const view = new DataView(buf.buffer);
  // 0x00: i32
  if (data?.Class !== undefined) view.setInt32(0, Number(data.Class), true);
  // 0x04: i32
  if (data?.Type !== undefined) view.setInt32(4, Number(data.Type), true);
  // 0x08: u32
  if (data?.Rows !== undefined) view.setUint32(8, Number(data.Rows), true);
  // 0x0c: u32
  if (data?.Columns !== undefined) view.setUint32(12, Number(data.Columns), true);
  // 0x10: u32
  if (data?.Elements !== undefined) view.setUint32(16, Number(data.Elements), true);
  // 0x14: u32
  if (data?.Members !== undefined) view.setUint32(20, Number(data.Members), true);
  // 0x18: u32
  if (data?.Offset !== undefined) view.setUint32(24, Number(data.Offset), true);
  // 0x1c: pad4
  return buf;
}

export class D3D10_SHADER_TYPE_DESCView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: i32
  get Class(): number {
    return this.view.getInt32(0, true);
  }

  // 0x04: i32
  get Type(): number {
    return this.view.getInt32(4, true);
  }

  // 0x08: u32
  get Rows(): number {
    return this.view.getUint32(8, true);
  }

  // 0x0c: u32
  get Columns(): number {
    return this.view.getUint32(12, true);
  }

  // 0x10: u32
  get Elements(): number {
    return this.view.getUint32(16, true);
  }

  // 0x14: u32
  get Members(): number {
    return this.view.getUint32(20, true);
  }

  // 0x18: u32
  get Offset(): number {
    return this.view.getUint32(24, true);
  }

  // 0x1c: pad4

  // 0x00: i32
  set Class(value: number) {
    this.view.setInt32(0, value, true);
  }

  // 0x04: i32
  set Type(value: number) {
    this.view.setInt32(4, value, true);
  }

  // 0x08: u32
  set Rows(value: number) {
    this.view.setUint32(8, value, true);
  }

  // 0x0c: u32
  set Columns(value: number) {
    this.view.setUint32(12, value, true);
  }

  // 0x10: u32
  set Elements(value: number) {
    this.view.setUint32(16, value, true);
  }

  // 0x14: u32
  set Members(value: number) {
    this.view.setUint32(20, value, true);
  }

  // 0x18: u32
  set Offset(value: number) {
    this.view.setUint32(24, value, true);
  }

  // 0x1c: pad4
}

/**
 * Windows.Win32.Graphics.Direct3D10.D3D10_SHADER_INPUT_BIND_DESC (size: 40)
 */
export interface D3D10_SHADER_INPUT_BIND_DESC {
  /** Windows.Win32.Foundation.PSTR */
  Name: string | null | Uint8Array;
  /** Windows.Win32.Graphics.Direct3D.D3D_SHADER_INPUT_TYPE */
  Type: D3D_SHADER_INPUT_TYPE;
  /** u32 */
  BindPoint: number;
  /** u32 */
  BindCount: number;
  /** u32 */
  uFlags: number;
  /** Windows.Win32.Graphics.Direct3D.D3D_RESOURCE_RETURN_TYPE */
  ReturnType: D3D_RESOURCE_RETURN_TYPE;
  /** Windows.Win32.Graphics.Direct3D.D3D_SRV_DIMENSION */
  Dimension: D3D_SRV_DIMENSION;
  /** u32 */
  NumSamples: number;
}

export const sizeofD3D10_SHADER_INPUT_BIND_DESC = 40;

export function allocD3D10_SHADER_INPUT_BIND_DESC(data?: Partial<D3D10_SHADER_INPUT_BIND_DESC>): Uint8Array {
  const buf = new Uint8Array(sizeofD3D10_SHADER_INPUT_BIND_DESC);
  const view = new DataView(buf.buffer);
  // 0x00: buffer
  if (data?.Name !== undefined) {
    (buf as any)._f0 = util.pstrToFfi(data.Name);
    view.setBigUint64(0, (buf as any)._f0 === null ? 0n : util.toBigInt(Deno.UnsafePointer.of((buf as any)._f0)), true);
  }
  // 0x08: i32
  if (data?.Type !== undefined) view.setInt32(8, Number(data.Type), true);
  // 0x0c: u32
  if (data?.BindPoint !== undefined) view.setUint32(12, Number(data.BindPoint), true);
  // 0x10: u32
  if (data?.BindCount !== undefined) view.setUint32(16, Number(data.BindCount), true);
  // 0x14: u32
  if (data?.uFlags !== undefined) view.setUint32(20, Number(data.uFlags), true);
  // 0x18: i32
  if (data?.ReturnType !== undefined) view.setInt32(24, Number(data.ReturnType), true);
  // 0x1c: i32
  if (data?.Dimension !== undefined) view.setInt32(28, Number(data.Dimension), true);
  // 0x20: u32
  if (data?.NumSamples !== undefined) view.setUint32(32, Number(data.NumSamples), true);
  // 0x24: pad4
  return buf;
}

export class D3D10_SHADER_INPUT_BIND_DESCView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: buffer
  get Name(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(0, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x08: i32
  get Type(): number {
    return this.view.getInt32(8, true);
  }

  // 0x0c: u32
  get BindPoint(): number {
    return this.view.getUint32(12, true);
  }

  // 0x10: u32
  get BindCount(): number {
    return this.view.getUint32(16, true);
  }

  // 0x14: u32
  get uFlags(): number {
    return this.view.getUint32(20, true);
  }

  // 0x18: i32
  get ReturnType(): number {
    return this.view.getInt32(24, true);
  }

  // 0x1c: i32
  get Dimension(): number {
    return this.view.getInt32(28, true);
  }

  // 0x20: u32
  get NumSamples(): number {
    return this.view.getUint32(32, true);
  }

  // 0x24: pad4

  // 0x00: buffer
  set Name(value: Uint8Array | Deno.PointerValue | null) {
    (this.buf as any)._f0 = value;
    this.view.setBigUint64(0, util.toBigInt(util.toPointer((this.buf as any)._f0)), true);
  }

  // 0x08: i32
  set Type(value: number) {
    this.view.setInt32(8, value, true);
  }

  // 0x0c: u32
  set BindPoint(value: number) {
    this.view.setUint32(12, value, true);
  }

  // 0x10: u32
  set BindCount(value: number) {
    this.view.setUint32(16, value, true);
  }

  // 0x14: u32
  set uFlags(value: number) {
    this.view.setUint32(20, value, true);
  }

  // 0x18: i32
  set ReturnType(value: number) {
    this.view.setInt32(24, value, true);
  }

  // 0x1c: i32
  set Dimension(value: number) {
    this.view.setInt32(28, value, true);
  }

  // 0x20: u32
  set NumSamples(value: number) {
    this.view.setUint32(32, value, true);
  }

  // 0x24: pad4
}

/**
 * Windows.Win32.Graphics.Direct3D10.D3D10_SIGNATURE_PARAMETER_DESC (size: 32)
 */
export interface D3D10_SIGNATURE_PARAMETER_DESC {
  /** Windows.Win32.Foundation.PSTR */
  SemanticName: string | null | Uint8Array;
  /** u32 */
  SemanticIndex: number;
  /** u32 */
  Register: number;
  /** Windows.Win32.Graphics.Direct3D.D3D_NAME */
  SystemValueType: D3D_NAME;
  /** Windows.Win32.Graphics.Direct3D.D3D_REGISTER_COMPONENT_TYPE */
  ComponentType: D3D_REGISTER_COMPONENT_TYPE;
  /** u8 */
  Mask: number;
  /** u8 */
  ReadWriteMask: number;
}

export const sizeofD3D10_SIGNATURE_PARAMETER_DESC = 32;

export function allocD3D10_SIGNATURE_PARAMETER_DESC(data?: Partial<D3D10_SIGNATURE_PARAMETER_DESC>): Uint8Array {
  const buf = new Uint8Array(sizeofD3D10_SIGNATURE_PARAMETER_DESC);
  const view = new DataView(buf.buffer);
  // 0x00: buffer
  if (data?.SemanticName !== undefined) {
    (buf as any)._f0 = util.pstrToFfi(data.SemanticName);
    view.setBigUint64(0, (buf as any)._f0 === null ? 0n : util.toBigInt(Deno.UnsafePointer.of((buf as any)._f0)), true);
  }
  // 0x08: u32
  if (data?.SemanticIndex !== undefined) view.setUint32(8, Number(data.SemanticIndex), true);
  // 0x0c: u32
  if (data?.Register !== undefined) view.setUint32(12, Number(data.Register), true);
  // 0x10: i32
  if (data?.SystemValueType !== undefined) view.setInt32(16, Number(data.SystemValueType), true);
  // 0x14: i32
  if (data?.ComponentType !== undefined) view.setInt32(20, Number(data.ComponentType), true);
  // 0x18: u8
  if (data?.Mask !== undefined) view.setUint8(24, Number(data.Mask));
  // 0x19: u8
  if (data?.ReadWriteMask !== undefined) view.setUint8(25, Number(data.ReadWriteMask));
  // 0x1a: pad6
  return buf;
}

export class D3D10_SIGNATURE_PARAMETER_DESCView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: buffer
  get SemanticName(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(0, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x08: u32
  get SemanticIndex(): number {
    return this.view.getUint32(8, true);
  }

  // 0x0c: u32
  get Register(): number {
    return this.view.getUint32(12, true);
  }

  // 0x10: i32
  get SystemValueType(): number {
    return this.view.getInt32(16, true);
  }

  // 0x14: i32
  get ComponentType(): number {
    return this.view.getInt32(20, true);
  }

  // 0x18: u8
  get Mask(): number {
    return this.view.getUint8(24);
  }

  // 0x19: u8
  get ReadWriteMask(): number {
    return this.view.getUint8(25);
  }

  // 0x1a: pad6

  // 0x00: buffer
  set SemanticName(value: Uint8Array | Deno.PointerValue | null) {
    (this.buf as any)._f0 = value;
    this.view.setBigUint64(0, util.toBigInt(util.toPointer((this.buf as any)._f0)), true);
  }

  // 0x08: u32
  set SemanticIndex(value: number) {
    this.view.setUint32(8, value, true);
  }

  // 0x0c: u32
  set Register(value: number) {
    this.view.setUint32(12, value, true);
  }

  // 0x10: i32
  set SystemValueType(value: number) {
    this.view.setInt32(16, value, true);
  }

  // 0x14: i32
  set ComponentType(value: number) {
    this.view.setInt32(20, value, true);
  }

  // 0x18: u8
  set Mask(value: number) {
    this.view.setUint8(24, value);
  }

  // 0x19: u8
  set ReadWriteMask(value: number) {
    this.view.setUint8(25, value);
  }

  // 0x1a: pad6
}

/**
 * Windows.Win32.Graphics.Direct3D10.D3D10_STATE_BLOCK_MASK (size: 120)
 */
export interface D3D10_STATE_BLOCK_MASK {
  /** u8 */
  VS: number;
  /** array */
  VSSamplers: Deno.PointerValue | null;
  /** array */
  VSShaderResources: Deno.PointerValue | null;
  /** array */
  VSConstantBuffers: Deno.PointerValue | null;
  /** u8 */
  GS: number;
  /** array */
  GSSamplers: Deno.PointerValue | null;
  /** array */
  GSShaderResources: Deno.PointerValue | null;
  /** array */
  GSConstantBuffers: Deno.PointerValue | null;
  /** u8 */
  PS: number;
  /** array */
  PSSamplers: Deno.PointerValue | null;
  /** array */
  PSShaderResources: Deno.PointerValue | null;
  /** array */
  PSConstantBuffers: Deno.PointerValue | null;
  /** array */
  IAVertexBuffers: Deno.PointerValue | null;
  /** u8 */
  IAIndexBuffer: number;
  /** u8 */
  IAInputLayout: number;
  /** u8 */
  IAPrimitiveTopology: number;
  /** u8 */
  OMRenderTargets: number;
  /** u8 */
  OMDepthStencilState: number;
  /** u8 */
  OMBlendState: number;
  /** u8 */
  RSViewports: number;
  /** u8 */
  RSScissorRects: number;
  /** u8 */
  RSRasterizerState: number;
  /** u8 */
  SOBuffers: number;
  /** u8 */
  Predication: number;
}

export const sizeofD3D10_STATE_BLOCK_MASK = 120;

export function allocD3D10_STATE_BLOCK_MASK(data?: Partial<D3D10_STATE_BLOCK_MASK>): Uint8Array {
  const buf = new Uint8Array(sizeofD3D10_STATE_BLOCK_MASK);
  const view = new DataView(buf.buffer);
  // 0x00: u8
  if (data?.VS !== undefined) view.setUint8(0, Number(data.VS));
  // 0x01: pad7
  // 0x08: pointer
  if (data?.VSSamplers !== undefined) view.setBigUint64(8, data.VSSamplers === null ? 0n : util.toBigInt(util.toPointer(data.VSSamplers)), true);
  // 0x10: pointer
  if (data?.VSShaderResources !== undefined) view.setBigUint64(16, data.VSShaderResources === null ? 0n : util.toBigInt(util.toPointer(data.VSShaderResources)), true);
  // 0x18: pointer
  if (data?.VSConstantBuffers !== undefined) view.setBigUint64(24, data.VSConstantBuffers === null ? 0n : util.toBigInt(util.toPointer(data.VSConstantBuffers)), true);
  // 0x20: u8
  if (data?.GS !== undefined) view.setUint8(32, Number(data.GS));
  // 0x21: pad7
  // 0x28: pointer
  if (data?.GSSamplers !== undefined) view.setBigUint64(40, data.GSSamplers === null ? 0n : util.toBigInt(util.toPointer(data.GSSamplers)), true);
  // 0x30: pointer
  if (data?.GSShaderResources !== undefined) view.setBigUint64(48, data.GSShaderResources === null ? 0n : util.toBigInt(util.toPointer(data.GSShaderResources)), true);
  // 0x38: pointer
  if (data?.GSConstantBuffers !== undefined) view.setBigUint64(56, data.GSConstantBuffers === null ? 0n : util.toBigInt(util.toPointer(data.GSConstantBuffers)), true);
  // 0x40: u8
  if (data?.PS !== undefined) view.setUint8(64, Number(data.PS));
  // 0x41: pad7
  // 0x48: pointer
  if (data?.PSSamplers !== undefined) view.setBigUint64(72, data.PSSamplers === null ? 0n : util.toBigInt(util.toPointer(data.PSSamplers)), true);
  // 0x50: pointer
  if (data?.PSShaderResources !== undefined) view.setBigUint64(80, data.PSShaderResources === null ? 0n : util.toBigInt(util.toPointer(data.PSShaderResources)), true);
  // 0x58: pointer
  if (data?.PSConstantBuffers !== undefined) view.setBigUint64(88, data.PSConstantBuffers === null ? 0n : util.toBigInt(util.toPointer(data.PSConstantBuffers)), true);
  // 0x60: pointer
  if (data?.IAVertexBuffers !== undefined) view.setBigUint64(96, data.IAVertexBuffers === null ? 0n : util.toBigInt(util.toPointer(data.IAVertexBuffers)), true);
  // 0x68: u8
  if (data?.IAIndexBuffer !== undefined) view.setUint8(104, Number(data.IAIndexBuffer));
  // 0x69: u8
  if (data?.IAInputLayout !== undefined) view.setUint8(105, Number(data.IAInputLayout));
  // 0x6a: u8
  if (data?.IAPrimitiveTopology !== undefined) view.setUint8(106, Number(data.IAPrimitiveTopology));
  // 0x6b: u8
  if (data?.OMRenderTargets !== undefined) view.setUint8(107, Number(data.OMRenderTargets));
  // 0x6c: u8
  if (data?.OMDepthStencilState !== undefined) view.setUint8(108, Number(data.OMDepthStencilState));
  // 0x6d: u8
  if (data?.OMBlendState !== undefined) view.setUint8(109, Number(data.OMBlendState));
  // 0x6e: u8
  if (data?.RSViewports !== undefined) view.setUint8(110, Number(data.RSViewports));
  // 0x6f: u8
  if (data?.RSScissorRects !== undefined) view.setUint8(111, Number(data.RSScissorRects));
  // 0x70: u8
  if (data?.RSRasterizerState !== undefined) view.setUint8(112, Number(data.RSRasterizerState));
  // 0x71: u8
  if (data?.SOBuffers !== undefined) view.setUint8(113, Number(data.SOBuffers));
  // 0x72: u8
  if (data?.Predication !== undefined) view.setUint8(114, Number(data.Predication));
  // 0x73: pad5
  return buf;
}

export class D3D10_STATE_BLOCK_MASKView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u8
  get VS(): number {
    return this.view.getUint8(0);
  }

  // 0x01: pad7

  // 0x08: pointer
  get VSSamplers(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(8, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x10: pointer
  get VSShaderResources(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(16, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x18: pointer
  get VSConstantBuffers(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(24, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x20: u8
  get GS(): number {
    return this.view.getUint8(32);
  }

  // 0x21: pad7

  // 0x28: pointer
  get GSSamplers(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(40, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x30: pointer
  get GSShaderResources(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(48, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x38: pointer
  get GSConstantBuffers(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(56, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x40: u8
  get PS(): number {
    return this.view.getUint8(64);
  }

  // 0x41: pad7

  // 0x48: pointer
  get PSSamplers(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(72, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x50: pointer
  get PSShaderResources(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(80, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x58: pointer
  get PSConstantBuffers(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(88, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x60: pointer
  get IAVertexBuffers(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(96, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x68: u8
  get IAIndexBuffer(): number {
    return this.view.getUint8(104);
  }

  // 0x69: u8
  get IAInputLayout(): number {
    return this.view.getUint8(105);
  }

  // 0x6a: u8
  get IAPrimitiveTopology(): number {
    return this.view.getUint8(106);
  }

  // 0x6b: u8
  get OMRenderTargets(): number {
    return this.view.getUint8(107);
  }

  // 0x6c: u8
  get OMDepthStencilState(): number {
    return this.view.getUint8(108);
  }

  // 0x6d: u8
  get OMBlendState(): number {
    return this.view.getUint8(109);
  }

  // 0x6e: u8
  get RSViewports(): number {
    return this.view.getUint8(110);
  }

  // 0x6f: u8
  get RSScissorRects(): number {
    return this.view.getUint8(111);
  }

  // 0x70: u8
  get RSRasterizerState(): number {
    return this.view.getUint8(112);
  }

  // 0x71: u8
  get SOBuffers(): number {
    return this.view.getUint8(113);
  }

  // 0x72: u8
  get Predication(): number {
    return this.view.getUint8(114);
  }

  // 0x73: pad5

  // 0x00: u8
  set VS(value: number) {
    this.view.setUint8(0, value);
  }

  // 0x01: pad7

  // 0x08: pointer
  set VSSamplers(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(8, util.toBigInt(util.toPointer(value)), true);
  }

  // 0x10: pointer
  set VSShaderResources(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(16, util.toBigInt(util.toPointer(value)), true);
  }

  // 0x18: pointer
  set VSConstantBuffers(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(24, util.toBigInt(util.toPointer(value)), true);
  }

  // 0x20: u8
  set GS(value: number) {
    this.view.setUint8(32, value);
  }

  // 0x21: pad7

  // 0x28: pointer
  set GSSamplers(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(40, util.toBigInt(util.toPointer(value)), true);
  }

  // 0x30: pointer
  set GSShaderResources(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(48, util.toBigInt(util.toPointer(value)), true);
  }

  // 0x38: pointer
  set GSConstantBuffers(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(56, util.toBigInt(util.toPointer(value)), true);
  }

  // 0x40: u8
  set PS(value: number) {
    this.view.setUint8(64, value);
  }

  // 0x41: pad7

  // 0x48: pointer
  set PSSamplers(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(72, util.toBigInt(util.toPointer(value)), true);
  }

  // 0x50: pointer
  set PSShaderResources(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(80, util.toBigInt(util.toPointer(value)), true);
  }

  // 0x58: pointer
  set PSConstantBuffers(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(88, util.toBigInt(util.toPointer(value)), true);
  }

  // 0x60: pointer
  set IAVertexBuffers(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(96, util.toBigInt(util.toPointer(value)), true);
  }

  // 0x68: u8
  set IAIndexBuffer(value: number) {
    this.view.setUint8(104, value);
  }

  // 0x69: u8
  set IAInputLayout(value: number) {
    this.view.setUint8(105, value);
  }

  // 0x6a: u8
  set IAPrimitiveTopology(value: number) {
    this.view.setUint8(106, value);
  }

  // 0x6b: u8
  set OMRenderTargets(value: number) {
    this.view.setUint8(107, value);
  }

  // 0x6c: u8
  set OMDepthStencilState(value: number) {
    this.view.setUint8(108, value);
  }

  // 0x6d: u8
  set OMBlendState(value: number) {
    this.view.setUint8(109, value);
  }

  // 0x6e: u8
  set RSViewports(value: number) {
    this.view.setUint8(110, value);
  }

  // 0x6f: u8
  set RSScissorRects(value: number) {
    this.view.setUint8(111, value);
  }

  // 0x70: u8
  set RSRasterizerState(value: number) {
    this.view.setUint8(112, value);
  }

  // 0x71: u8
  set SOBuffers(value: number) {
    this.view.setUint8(113, value);
  }

  // 0x72: u8
  set Predication(value: number) {
    this.view.setUint8(114, value);
  }

  // 0x73: pad5
}

/**
 * Windows.Win32.Graphics.Direct3D10.D3D10_EFFECT_TYPE_DESC (size: 48)
 */
export interface D3D10_EFFECT_TYPE_DESC {
  /** Windows.Win32.Foundation.PSTR */
  TypeName: string | null | Uint8Array;
  /** Windows.Win32.Graphics.Direct3D.D3D_SHADER_VARIABLE_CLASS */
  Class: D3D_SHADER_VARIABLE_CLASS;
  /** Windows.Win32.Graphics.Direct3D.D3D_SHADER_VARIABLE_TYPE */
  Type: D3D_SHADER_VARIABLE_TYPE;
  /** u32 */
  Elements: number;
  /** u32 */
  Members: number;
  /** u32 */
  Rows: number;
  /** u32 */
  Columns: number;
  /** u32 */
  PackedSize: number;
  /** u32 */
  UnpackedSize: number;
  /** u32 */
  Stride: number;
}

export const sizeofD3D10_EFFECT_TYPE_DESC = 48;

export function allocD3D10_EFFECT_TYPE_DESC(data?: Partial<D3D10_EFFECT_TYPE_DESC>): Uint8Array {
  const buf = new Uint8Array(sizeofD3D10_EFFECT_TYPE_DESC);
  const view = new DataView(buf.buffer);
  // 0x00: buffer
  if (data?.TypeName !== undefined) {
    (buf as any)._f0 = util.pstrToFfi(data.TypeName);
    view.setBigUint64(0, (buf as any)._f0 === null ? 0n : util.toBigInt(Deno.UnsafePointer.of((buf as any)._f0)), true);
  }
  // 0x08: i32
  if (data?.Class !== undefined) view.setInt32(8, Number(data.Class), true);
  // 0x0c: i32
  if (data?.Type !== undefined) view.setInt32(12, Number(data.Type), true);
  // 0x10: u32
  if (data?.Elements !== undefined) view.setUint32(16, Number(data.Elements), true);
  // 0x14: u32
  if (data?.Members !== undefined) view.setUint32(20, Number(data.Members), true);
  // 0x18: u32
  if (data?.Rows !== undefined) view.setUint32(24, Number(data.Rows), true);
  // 0x1c: u32
  if (data?.Columns !== undefined) view.setUint32(28, Number(data.Columns), true);
  // 0x20: u32
  if (data?.PackedSize !== undefined) view.setUint32(32, Number(data.PackedSize), true);
  // 0x24: u32
  if (data?.UnpackedSize !== undefined) view.setUint32(36, Number(data.UnpackedSize), true);
  // 0x28: u32
  if (data?.Stride !== undefined) view.setUint32(40, Number(data.Stride), true);
  // 0x2c: pad4
  return buf;
}

export class D3D10_EFFECT_TYPE_DESCView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: buffer
  get TypeName(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(0, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x08: i32
  get Class(): number {
    return this.view.getInt32(8, true);
  }

  // 0x0c: i32
  get Type(): number {
    return this.view.getInt32(12, true);
  }

  // 0x10: u32
  get Elements(): number {
    return this.view.getUint32(16, true);
  }

  // 0x14: u32
  get Members(): number {
    return this.view.getUint32(20, true);
  }

  // 0x18: u32
  get Rows(): number {
    return this.view.getUint32(24, true);
  }

  // 0x1c: u32
  get Columns(): number {
    return this.view.getUint32(28, true);
  }

  // 0x20: u32
  get PackedSize(): number {
    return this.view.getUint32(32, true);
  }

  // 0x24: u32
  get UnpackedSize(): number {
    return this.view.getUint32(36, true);
  }

  // 0x28: u32
  get Stride(): number {
    return this.view.getUint32(40, true);
  }

  // 0x2c: pad4

  // 0x00: buffer
  set TypeName(value: Uint8Array | Deno.PointerValue | null) {
    (this.buf as any)._f0 = value;
    this.view.setBigUint64(0, util.toBigInt(util.toPointer((this.buf as any)._f0)), true);
  }

  // 0x08: i32
  set Class(value: number) {
    this.view.setInt32(8, value, true);
  }

  // 0x0c: i32
  set Type(value: number) {
    this.view.setInt32(12, value, true);
  }

  // 0x10: u32
  set Elements(value: number) {
    this.view.setUint32(16, value, true);
  }

  // 0x14: u32
  set Members(value: number) {
    this.view.setUint32(20, value, true);
  }

  // 0x18: u32
  set Rows(value: number) {
    this.view.setUint32(24, value, true);
  }

  // 0x1c: u32
  set Columns(value: number) {
    this.view.setUint32(28, value, true);
  }

  // 0x20: u32
  set PackedSize(value: number) {
    this.view.setUint32(32, value, true);
  }

  // 0x24: u32
  set UnpackedSize(value: number) {
    this.view.setUint32(36, value, true);
  }

  // 0x28: u32
  set Stride(value: number) {
    this.view.setUint32(40, value, true);
  }

  // 0x2c: pad4
}

/**
 * Windows.Win32.Graphics.Direct3D10.D3D10_EFFECT_VARIABLE_DESC (size: 32)
 */
export interface D3D10_EFFECT_VARIABLE_DESC {
  /** Windows.Win32.Foundation.PSTR */
  Name: string | null | Uint8Array;
  /** Windows.Win32.Foundation.PSTR */
  Semantic: string | null | Uint8Array;
  /** u32 */
  Flags: number;
  /** u32 */
  Annotations: number;
  /** u32 */
  BufferOffset: number;
  /** u32 */
  ExplicitBindPoint: number;
}

export const sizeofD3D10_EFFECT_VARIABLE_DESC = 32;

export function allocD3D10_EFFECT_VARIABLE_DESC(data?: Partial<D3D10_EFFECT_VARIABLE_DESC>): Uint8Array {
  const buf = new Uint8Array(sizeofD3D10_EFFECT_VARIABLE_DESC);
  const view = new DataView(buf.buffer);
  // 0x00: buffer
  if (data?.Name !== undefined) {
    (buf as any)._f0 = util.pstrToFfi(data.Name);
    view.setBigUint64(0, (buf as any)._f0 === null ? 0n : util.toBigInt(Deno.UnsafePointer.of((buf as any)._f0)), true);
  }
  // 0x08: buffer
  if (data?.Semantic !== undefined) {
    (buf as any)._f8 = util.pstrToFfi(data.Semantic);
    view.setBigUint64(8, (buf as any)._f8 === null ? 0n : util.toBigInt(Deno.UnsafePointer.of((buf as any)._f8)), true);
  }
  // 0x10: u32
  if (data?.Flags !== undefined) view.setUint32(16, Number(data.Flags), true);
  // 0x14: u32
  if (data?.Annotations !== undefined) view.setUint32(20, Number(data.Annotations), true);
  // 0x18: u32
  if (data?.BufferOffset !== undefined) view.setUint32(24, Number(data.BufferOffset), true);
  // 0x1c: u32
  if (data?.ExplicitBindPoint !== undefined) view.setUint32(28, Number(data.ExplicitBindPoint), true);
  return buf;
}

export class D3D10_EFFECT_VARIABLE_DESCView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: buffer
  get Name(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(0, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x08: buffer
  get Semantic(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(8, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x10: u32
  get Flags(): number {
    return this.view.getUint32(16, true);
  }

  // 0x14: u32
  get Annotations(): number {
    return this.view.getUint32(20, true);
  }

  // 0x18: u32
  get BufferOffset(): number {
    return this.view.getUint32(24, true);
  }

  // 0x1c: u32
  get ExplicitBindPoint(): number {
    return this.view.getUint32(28, true);
  }

  // 0x00: buffer
  set Name(value: Uint8Array | Deno.PointerValue | null) {
    (this.buf as any)._f0 = value;
    this.view.setBigUint64(0, util.toBigInt(util.toPointer((this.buf as any)._f0)), true);
  }

  // 0x08: buffer
  set Semantic(value: Uint8Array | Deno.PointerValue | null) {
    (this.buf as any)._f8 = value;
    this.view.setBigUint64(8, util.toBigInt(util.toPointer((this.buf as any)._f8)), true);
  }

  // 0x10: u32
  set Flags(value: number) {
    this.view.setUint32(16, value, true);
  }

  // 0x14: u32
  set Annotations(value: number) {
    this.view.setUint32(20, value, true);
  }

  // 0x18: u32
  set BufferOffset(value: number) {
    this.view.setUint32(24, value, true);
  }

  // 0x1c: u32
  set ExplicitBindPoint(value: number) {
    this.view.setUint32(28, value, true);
  }
}

/**
 * Windows.Win32.Graphics.Direct3D10.D3D10_EFFECT_SHADER_DESC (size: 48)
 */
export interface D3D10_EFFECT_SHADER_DESC {
  /** ptr */
  pInputSignature: Deno.PointerValue | Uint8Array | null;
  /** Windows.Win32.Foundation.BOOL */
  IsInline: boolean;
  /** ptr */
  pBytecode: Deno.PointerValue | Uint8Array | null;
  /** u32 */
  BytecodeLength: number;
  /** Windows.Win32.Foundation.PSTR */
  SODecl: string | null | Uint8Array;
  /** u32 */
  NumInputSignatureEntries: number;
  /** u32 */
  NumOutputSignatureEntries: number;
}

export const sizeofD3D10_EFFECT_SHADER_DESC = 48;

export function allocD3D10_EFFECT_SHADER_DESC(data?: Partial<D3D10_EFFECT_SHADER_DESC>): Uint8Array {
  const buf = new Uint8Array(sizeofD3D10_EFFECT_SHADER_DESC);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.pInputSignature !== undefined) view.setBigUint64(0, data.pInputSignature === null ? 0n : util.toBigInt(util.toPointer(data.pInputSignature)), true);
  // 0x08: i32
  if (data?.IsInline !== undefined) view.setInt32(8, Number(data.IsInline), true);
  // 0x0c: pad4
  // 0x10: pointer
  if (data?.pBytecode !== undefined) view.setBigUint64(16, data.pBytecode === null ? 0n : util.toBigInt(util.toPointer(data.pBytecode)), true);
  // 0x18: u32
  if (data?.BytecodeLength !== undefined) view.setUint32(24, Number(data.BytecodeLength), true);
  // 0x1c: pad4
  // 0x20: buffer
  if (data?.SODecl !== undefined) {
    (buf as any)._f32 = util.pstrToFfi(data.SODecl);
    view.setBigUint64(32, (buf as any)._f32 === null ? 0n : util.toBigInt(Deno.UnsafePointer.of((buf as any)._f32)), true);
  }
  // 0x28: u32
  if (data?.NumInputSignatureEntries !== undefined) view.setUint32(40, Number(data.NumInputSignatureEntries), true);
  // 0x2c: u32
  if (data?.NumOutputSignatureEntries !== undefined) view.setUint32(44, Number(data.NumOutputSignatureEntries), true);
  return buf;
}

export class D3D10_EFFECT_SHADER_DESCView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get pInputSignature(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(0, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x08: i32
  get IsInline(): number {
    return this.view.getInt32(8, true);
  }

  // 0x0c: pad4

  // 0x10: pointer
  get pBytecode(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(16, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x18: u32
  get BytecodeLength(): number {
    return this.view.getUint32(24, true);
  }

  // 0x1c: pad4

  // 0x20: buffer
  get SODecl(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(32, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x28: u32
  get NumInputSignatureEntries(): number {
    return this.view.getUint32(40, true);
  }

  // 0x2c: u32
  get NumOutputSignatureEntries(): number {
    return this.view.getUint32(44, true);
  }

  // 0x00: pointer
  set pInputSignature(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(0, util.toBigInt(util.toPointer(value)), true);
  }

  // 0x08: i32
  set IsInline(value: number) {
    this.view.setInt32(8, value, true);
  }

  // 0x0c: pad4

  // 0x10: pointer
  set pBytecode(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(16, util.toBigInt(util.toPointer(value)), true);
  }

  // 0x18: u32
  set BytecodeLength(value: number) {
    this.view.setUint32(24, value, true);
  }

  // 0x1c: pad4

  // 0x20: buffer
  set SODecl(value: Uint8Array | Deno.PointerValue | null) {
    (this.buf as any)._f32 = value;
    this.view.setBigUint64(32, util.toBigInt(util.toPointer((this.buf as any)._f32)), true);
  }

  // 0x28: u32
  set NumInputSignatureEntries(value: number) {
    this.view.setUint32(40, value, true);
  }

  // 0x2c: u32
  set NumOutputSignatureEntries(value: number) {
    this.view.setUint32(44, value, true);
  }
}

/**
 * Windows.Win32.Graphics.Direct3D10.D3D10_PASS_DESC (size: 48)
 */
export interface D3D10_PASS_DESC {
  /** Windows.Win32.Foundation.PSTR */
  Name: string | null | Uint8Array;
  /** u32 */
  Annotations: number;
  /** ptr */
  pIAInputSignature: Deno.PointerValue | Uint8Array | null;
  /** usize */
  IAInputSignatureSize: number | bigint;
  /** u32 */
  StencilRef: number;
  /** u32 */
  SampleMask: number;
  /** array */
  BlendFactor: Deno.PointerValue | null;
}

export const sizeofD3D10_PASS_DESC = 48;

export function allocD3D10_PASS_DESC(data?: Partial<D3D10_PASS_DESC>): Uint8Array {
  const buf = new Uint8Array(sizeofD3D10_PASS_DESC);
  const view = new DataView(buf.buffer);
  // 0x00: buffer
  if (data?.Name !== undefined) {
    (buf as any)._f0 = util.pstrToFfi(data.Name);
    view.setBigUint64(0, (buf as any)._f0 === null ? 0n : util.toBigInt(Deno.UnsafePointer.of((buf as any)._f0)), true);
  }
  // 0x08: u32
  if (data?.Annotations !== undefined) view.setUint32(8, Number(data.Annotations), true);
  // 0x0c: pad4
  // 0x10: pointer
  if (data?.pIAInputSignature !== undefined) view.setBigUint64(16, data.pIAInputSignature === null ? 0n : util.toBigInt(util.toPointer(data.pIAInputSignature)), true);
  // 0x18: usize
  if (data?.IAInputSignatureSize !== undefined) view.setBigUint64(24, util.toBigInt(data.IAInputSignatureSize), true);
  // 0x20: u32
  if (data?.StencilRef !== undefined) view.setUint32(32, Number(data.StencilRef), true);
  // 0x24: u32
  if (data?.SampleMask !== undefined) view.setUint32(36, Number(data.SampleMask), true);
  // 0x28: pointer
  if (data?.BlendFactor !== undefined) view.setBigUint64(40, data.BlendFactor === null ? 0n : util.toBigInt(util.toPointer(data.BlendFactor)), true);
  return buf;
}

export class D3D10_PASS_DESCView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: buffer
  get Name(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(0, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x08: u32
  get Annotations(): number {
    return this.view.getUint32(8, true);
  }

  // 0x0c: pad4

  // 0x10: pointer
  get pIAInputSignature(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(16, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x18: usize
  get IAInputSignatureSize(): number | bigint {
    return this.view.getBigUint64(24, true);
  }

  // 0x20: u32
  get StencilRef(): number {
    return this.view.getUint32(32, true);
  }

  // 0x24: u32
  get SampleMask(): number {
    return this.view.getUint32(36, true);
  }

  // 0x28: pointer
  get BlendFactor(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(40, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: buffer
  set Name(value: Uint8Array | Deno.PointerValue | null) {
    (this.buf as any)._f0 = value;
    this.view.setBigUint64(0, util.toBigInt(util.toPointer((this.buf as any)._f0)), true);
  }

  // 0x08: u32
  set Annotations(value: number) {
    this.view.setUint32(8, value, true);
  }

  // 0x0c: pad4

  // 0x10: pointer
  set pIAInputSignature(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(16, util.toBigInt(util.toPointer(value)), true);
  }

  // 0x18: usize
  set IAInputSignatureSize(value: number | bigint) {
    this.view.setBigUint64(24, util.toBigInt(value), true);
  }

  // 0x20: u32
  set StencilRef(value: number) {
    this.view.setUint32(32, value, true);
  }

  // 0x24: u32
  set SampleMask(value: number) {
    this.view.setUint32(36, value, true);
  }

  // 0x28: pointer
  set BlendFactor(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(40, util.toBigInt(util.toPointer(value)), true);
  }
}

/**
 * Windows.Win32.Graphics.Direct3D10.D3D10_PASS_SHADER_DESC (size: 16)
 */
export interface D3D10_PASS_SHADER_DESC {
  /** Windows.Win32.Graphics.Direct3D10.ID3D10EffectShaderVariable */
  pShaderVariable: Uint8Array | Deno.PointerValue | null;
  /** u32 */
  ShaderIndex: number;
}

export const sizeofD3D10_PASS_SHADER_DESC = 16;

export function allocD3D10_PASS_SHADER_DESC(data?: Partial<D3D10_PASS_SHADER_DESC>): Uint8Array {
  const buf = new Uint8Array(sizeofD3D10_PASS_SHADER_DESC);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.pShaderVariable !== undefined) view.setBigUint64(0, data.pShaderVariable === null ? 0n : util.toBigInt(util.toPointer(data.pShaderVariable)), true);
  // 0x08: u32
  if (data?.ShaderIndex !== undefined) view.setUint32(8, Number(data.ShaderIndex), true);
  // 0x0c: pad4
  return buf;
}

export class D3D10_PASS_SHADER_DESCView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get pShaderVariable(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(0, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x08: u32
  get ShaderIndex(): number {
    return this.view.getUint32(8, true);
  }

  // 0x0c: pad4

  // 0x00: pointer
  set pShaderVariable(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(0, util.toBigInt(util.toPointer(value)), true);
  }

  // 0x08: u32
  set ShaderIndex(value: number) {
    this.view.setUint32(8, value, true);
  }

  // 0x0c: pad4
}

/**
 * Windows.Win32.Graphics.Direct3D10.D3D10_TECHNIQUE_DESC (size: 16)
 */
export interface D3D10_TECHNIQUE_DESC {
  /** Windows.Win32.Foundation.PSTR */
  Name: string | null | Uint8Array;
  /** u32 */
  Passes: number;
  /** u32 */
  Annotations: number;
}

export const sizeofD3D10_TECHNIQUE_DESC = 16;

export function allocD3D10_TECHNIQUE_DESC(data?: Partial<D3D10_TECHNIQUE_DESC>): Uint8Array {
  const buf = new Uint8Array(sizeofD3D10_TECHNIQUE_DESC);
  const view = new DataView(buf.buffer);
  // 0x00: buffer
  if (data?.Name !== undefined) {
    (buf as any)._f0 = util.pstrToFfi(data.Name);
    view.setBigUint64(0, (buf as any)._f0 === null ? 0n : util.toBigInt(Deno.UnsafePointer.of((buf as any)._f0)), true);
  }
  // 0x08: u32
  if (data?.Passes !== undefined) view.setUint32(8, Number(data.Passes), true);
  // 0x0c: u32
  if (data?.Annotations !== undefined) view.setUint32(12, Number(data.Annotations), true);
  return buf;
}

export class D3D10_TECHNIQUE_DESCView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: buffer
  get Name(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(0, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x08: u32
  get Passes(): number {
    return this.view.getUint32(8, true);
  }

  // 0x0c: u32
  get Annotations(): number {
    return this.view.getUint32(12, true);
  }

  // 0x00: buffer
  set Name(value: Uint8Array | Deno.PointerValue | null) {
    (this.buf as any)._f0 = value;
    this.view.setBigUint64(0, util.toBigInt(util.toPointer((this.buf as any)._f0)), true);
  }

  // 0x08: u32
  set Passes(value: number) {
    this.view.setUint32(8, value, true);
  }

  // 0x0c: u32
  set Annotations(value: number) {
    this.view.setUint32(12, value, true);
  }
}

/**
 * Windows.Win32.Graphics.Direct3D10.D3D10_EFFECT_DESC (size: 24)
 */
export interface D3D10_EFFECT_DESC {
  /** Windows.Win32.Foundation.BOOL */
  IsChildEffect: boolean;
  /** u32 */
  ConstantBuffers: number;
  /** u32 */
  SharedConstantBuffers: number;
  /** u32 */
  GlobalVariables: number;
  /** u32 */
  SharedGlobalVariables: number;
  /** u32 */
  Techniques: number;
}

export const sizeofD3D10_EFFECT_DESC = 24;

export function allocD3D10_EFFECT_DESC(data?: Partial<D3D10_EFFECT_DESC>): Uint8Array {
  const buf = new Uint8Array(sizeofD3D10_EFFECT_DESC);
  const view = new DataView(buf.buffer);
  // 0x00: i32
  if (data?.IsChildEffect !== undefined) view.setInt32(0, Number(data.IsChildEffect), true);
  // 0x04: u32
  if (data?.ConstantBuffers !== undefined) view.setUint32(4, Number(data.ConstantBuffers), true);
  // 0x08: u32
  if (data?.SharedConstantBuffers !== undefined) view.setUint32(8, Number(data.SharedConstantBuffers), true);
  // 0x0c: u32
  if (data?.GlobalVariables !== undefined) view.setUint32(12, Number(data.GlobalVariables), true);
  // 0x10: u32
  if (data?.SharedGlobalVariables !== undefined) view.setUint32(16, Number(data.SharedGlobalVariables), true);
  // 0x14: u32
  if (data?.Techniques !== undefined) view.setUint32(20, Number(data.Techniques), true);
  return buf;
}

export class D3D10_EFFECT_DESCView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: i32
  get IsChildEffect(): number {
    return this.view.getInt32(0, true);
  }

  // 0x04: u32
  get ConstantBuffers(): number {
    return this.view.getUint32(4, true);
  }

  // 0x08: u32
  get SharedConstantBuffers(): number {
    return this.view.getUint32(8, true);
  }

  // 0x0c: u32
  get GlobalVariables(): number {
    return this.view.getUint32(12, true);
  }

  // 0x10: u32
  get SharedGlobalVariables(): number {
    return this.view.getUint32(16, true);
  }

  // 0x14: u32
  get Techniques(): number {
    return this.view.getUint32(20, true);
  }

  // 0x00: i32
  set IsChildEffect(value: number) {
    this.view.setInt32(0, value, true);
  }

  // 0x04: u32
  set ConstantBuffers(value: number) {
    this.view.setUint32(4, value, true);
  }

  // 0x08: u32
  set SharedConstantBuffers(value: number) {
    this.view.setUint32(8, value, true);
  }

  // 0x0c: u32
  set GlobalVariables(value: number) {
    this.view.setUint32(12, value, true);
  }

  // 0x10: u32
  set SharedGlobalVariables(value: number) {
    this.view.setUint32(16, value, true);
  }

  // 0x14: u32
  set Techniques(value: number) {
    this.view.setUint32(20, value, true);
  }
}

/**
 * Windows.Win32.Graphics.Direct3D10.D3D10_RENDER_TARGET_BLEND_DESC1 (size: 32)
 */
export interface D3D10_RENDER_TARGET_BLEND_DESC1 {
  /** Windows.Win32.Foundation.BOOL */
  BlendEnable: boolean;
  /** Windows.Win32.Graphics.Direct3D10.D3D10_BLEND */
  SrcBlend: D3D10_BLEND;
  /** Windows.Win32.Graphics.Direct3D10.D3D10_BLEND */
  DestBlend: D3D10_BLEND;
  /** Windows.Win32.Graphics.Direct3D10.D3D10_BLEND_OP */
  BlendOp: D3D10_BLEND_OP;
  /** Windows.Win32.Graphics.Direct3D10.D3D10_BLEND */
  SrcBlendAlpha: D3D10_BLEND;
  /** Windows.Win32.Graphics.Direct3D10.D3D10_BLEND */
  DestBlendAlpha: D3D10_BLEND;
  /** Windows.Win32.Graphics.Direct3D10.D3D10_BLEND_OP */
  BlendOpAlpha: D3D10_BLEND_OP;
  /** u8 */
  RenderTargetWriteMask: number;
}

export const sizeofD3D10_RENDER_TARGET_BLEND_DESC1 = 32;

export function allocD3D10_RENDER_TARGET_BLEND_DESC1(data?: Partial<D3D10_RENDER_TARGET_BLEND_DESC1>): Uint8Array {
  const buf = new Uint8Array(sizeofD3D10_RENDER_TARGET_BLEND_DESC1);
  const view = new DataView(buf.buffer);
  // 0x00: i32
  if (data?.BlendEnable !== undefined) view.setInt32(0, Number(data.BlendEnable), true);
  // 0x04: i32
  if (data?.SrcBlend !== undefined) view.setInt32(4, Number(data.SrcBlend), true);
  // 0x08: i32
  if (data?.DestBlend !== undefined) view.setInt32(8, Number(data.DestBlend), true);
  // 0x0c: i32
  if (data?.BlendOp !== undefined) view.setInt32(12, Number(data.BlendOp), true);
  // 0x10: i32
  if (data?.SrcBlendAlpha !== undefined) view.setInt32(16, Number(data.SrcBlendAlpha), true);
  // 0x14: i32
  if (data?.DestBlendAlpha !== undefined) view.setInt32(20, Number(data.DestBlendAlpha), true);
  // 0x18: i32
  if (data?.BlendOpAlpha !== undefined) view.setInt32(24, Number(data.BlendOpAlpha), true);
  // 0x1c: u8
  if (data?.RenderTargetWriteMask !== undefined) view.setUint8(28, Number(data.RenderTargetWriteMask));
  // 0x1d: pad3
  return buf;
}

export class D3D10_RENDER_TARGET_BLEND_DESC1View {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: i32
  get BlendEnable(): number {
    return this.view.getInt32(0, true);
  }

  // 0x04: i32
  get SrcBlend(): number {
    return this.view.getInt32(4, true);
  }

  // 0x08: i32
  get DestBlend(): number {
    return this.view.getInt32(8, true);
  }

  // 0x0c: i32
  get BlendOp(): number {
    return this.view.getInt32(12, true);
  }

  // 0x10: i32
  get SrcBlendAlpha(): number {
    return this.view.getInt32(16, true);
  }

  // 0x14: i32
  get DestBlendAlpha(): number {
    return this.view.getInt32(20, true);
  }

  // 0x18: i32
  get BlendOpAlpha(): number {
    return this.view.getInt32(24, true);
  }

  // 0x1c: u8
  get RenderTargetWriteMask(): number {
    return this.view.getUint8(28);
  }

  // 0x1d: pad3

  // 0x00: i32
  set BlendEnable(value: number) {
    this.view.setInt32(0, value, true);
  }

  // 0x04: i32
  set SrcBlend(value: number) {
    this.view.setInt32(4, value, true);
  }

  // 0x08: i32
  set DestBlend(value: number) {
    this.view.setInt32(8, value, true);
  }

  // 0x0c: i32
  set BlendOp(value: number) {
    this.view.setInt32(12, value, true);
  }

  // 0x10: i32
  set SrcBlendAlpha(value: number) {
    this.view.setInt32(16, value, true);
  }

  // 0x14: i32
  set DestBlendAlpha(value: number) {
    this.view.setInt32(20, value, true);
  }

  // 0x18: i32
  set BlendOpAlpha(value: number) {
    this.view.setInt32(24, value, true);
  }

  // 0x1c: u8
  set RenderTargetWriteMask(value: number) {
    this.view.setUint8(28, value);
  }

  // 0x1d: pad3
}

/**
 * Windows.Win32.Graphics.Direct3D10.D3D10_BLEND_DESC1 (size: 16)
 */
export interface D3D10_BLEND_DESC1 {
  /** Windows.Win32.Foundation.BOOL */
  AlphaToCoverageEnable: boolean;
  /** Windows.Win32.Foundation.BOOL */
  IndependentBlendEnable: boolean;
  /** array */
  RenderTarget: Deno.PointerValue | null;
}

export const sizeofD3D10_BLEND_DESC1 = 16;

export function allocD3D10_BLEND_DESC1(data?: Partial<D3D10_BLEND_DESC1>): Uint8Array {
  const buf = new Uint8Array(sizeofD3D10_BLEND_DESC1);
  const view = new DataView(buf.buffer);
  // 0x00: i32
  if (data?.AlphaToCoverageEnable !== undefined) view.setInt32(0, Number(data.AlphaToCoverageEnable), true);
  // 0x04: i32
  if (data?.IndependentBlendEnable !== undefined) view.setInt32(4, Number(data.IndependentBlendEnable), true);
  // 0x08: pointer
  if (data?.RenderTarget !== undefined) view.setBigUint64(8, data.RenderTarget === null ? 0n : util.toBigInt(util.toPointer(data.RenderTarget)), true);
  return buf;
}

export class D3D10_BLEND_DESC1View {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: i32
  get AlphaToCoverageEnable(): number {
    return this.view.getInt32(0, true);
  }

  // 0x04: i32
  get IndependentBlendEnable(): number {
    return this.view.getInt32(4, true);
  }

  // 0x08: pointer
  get RenderTarget(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(8, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: i32
  set AlphaToCoverageEnable(value: number) {
    this.view.setInt32(0, value, true);
  }

  // 0x04: i32
  set IndependentBlendEnable(value: number) {
    this.view.setInt32(4, value, true);
  }

  // 0x08: pointer
  set RenderTarget(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(8, util.toBigInt(util.toPointer(value)), true);
  }
}

/**
 * Windows.Win32.Graphics.Direct3D10.D3D10_TEXCUBE_ARRAY_SRV1 (size: 16)
 */
export interface D3D10_TEXCUBE_ARRAY_SRV1 {
  /** u32 */
  MostDetailedMip: number;
  /** u32 */
  MipLevels: number;
  /** u32 */
  First2DArrayFace: number;
  /** u32 */
  NumCubes: number;
}

export const sizeofD3D10_TEXCUBE_ARRAY_SRV1 = 16;

export function allocD3D10_TEXCUBE_ARRAY_SRV1(data?: Partial<D3D10_TEXCUBE_ARRAY_SRV1>): Uint8Array {
  const buf = new Uint8Array(sizeofD3D10_TEXCUBE_ARRAY_SRV1);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.MostDetailedMip !== undefined) view.setUint32(0, Number(data.MostDetailedMip), true);
  // 0x04: u32
  if (data?.MipLevels !== undefined) view.setUint32(4, Number(data.MipLevels), true);
  // 0x08: u32
  if (data?.First2DArrayFace !== undefined) view.setUint32(8, Number(data.First2DArrayFace), true);
  // 0x0c: u32
  if (data?.NumCubes !== undefined) view.setUint32(12, Number(data.NumCubes), true);
  return buf;
}

export class D3D10_TEXCUBE_ARRAY_SRV1View {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get MostDetailedMip(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: u32
  get MipLevels(): number {
    return this.view.getUint32(4, true);
  }

  // 0x08: u32
  get First2DArrayFace(): number {
    return this.view.getUint32(8, true);
  }

  // 0x0c: u32
  get NumCubes(): number {
    return this.view.getUint32(12, true);
  }

  // 0x00: u32
  set MostDetailedMip(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: u32
  set MipLevels(value: number) {
    this.view.setUint32(4, value, true);
  }

  // 0x08: u32
  set First2DArrayFace(value: number) {
    this.view.setUint32(8, value, true);
  }

  // 0x0c: u32
  set NumCubes(value: number) {
    this.view.setUint32(12, value, true);
  }
}

/**
 * Windows.Win32.Graphics.Direct3D10.D3D10_SHADER_RESOURCE_VIEW_DESC1 (size: 16)
 */
export interface D3D10_SHADER_RESOURCE_VIEW_DESC1 {
  /** Windows.Win32.Graphics.Dxgi.Common.DXGI_FORMAT */
  Format: DXGI_FORMAT;
  /** Windows.Win32.Graphics.Direct3D.D3D_SRV_DIMENSION */
  ViewDimension: D3D_SRV_DIMENSION;
  /** _Anonymous_e__Union */
  Anonymous: Uint8Array | Deno.PointerValue | null;
}

export const sizeofD3D10_SHADER_RESOURCE_VIEW_DESC1 = 16;

export function allocD3D10_SHADER_RESOURCE_VIEW_DESC1(data?: Partial<D3D10_SHADER_RESOURCE_VIEW_DESC1>): Uint8Array {
  const buf = new Uint8Array(sizeofD3D10_SHADER_RESOURCE_VIEW_DESC1);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.Format !== undefined) view.setUint32(0, Number(data.Format), true);
  // 0x04: i32
  if (data?.ViewDimension !== undefined) view.setInt32(4, Number(data.ViewDimension), true);
  // 0x08: pointer
  if (data?.Anonymous !== undefined) view.setBigUint64(8, data.Anonymous === null ? 0n : util.toBigInt(util.toPointer(data.Anonymous)), true);
  return buf;
}

export class D3D10_SHADER_RESOURCE_VIEW_DESC1View {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get Format(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: i32
  get ViewDimension(): number {
    return this.view.getInt32(4, true);
  }

  // 0x08: pointer
  get Anonymous(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(8, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: u32
  set Format(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: i32
  set ViewDimension(value: number) {
    this.view.setInt32(4, value, true);
  }

  // 0x08: pointer
  set Anonymous(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(8, util.toBigInt(util.toPointer(value)), true);
  }
}

/**
 * Windows.Win32.Graphics.Direct3D10.D3D10_SHADER_DEBUG_TOKEN_INFO (size: 24)
 */
export interface D3D10_SHADER_DEBUG_TOKEN_INFO {
  /** u32 */
  File: number;
  /** u32 */
  Line: number;
  /** u32 */
  Column: number;
  /** u32 */
  TokenLength: number;
  /** u32 */
  TokenId: number;
}

export const sizeofD3D10_SHADER_DEBUG_TOKEN_INFO = 24;

export function allocD3D10_SHADER_DEBUG_TOKEN_INFO(data?: Partial<D3D10_SHADER_DEBUG_TOKEN_INFO>): Uint8Array {
  const buf = new Uint8Array(sizeofD3D10_SHADER_DEBUG_TOKEN_INFO);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.File !== undefined) view.setUint32(0, Number(data.File), true);
  // 0x04: u32
  if (data?.Line !== undefined) view.setUint32(4, Number(data.Line), true);
  // 0x08: u32
  if (data?.Column !== undefined) view.setUint32(8, Number(data.Column), true);
  // 0x0c: u32
  if (data?.TokenLength !== undefined) view.setUint32(12, Number(data.TokenLength), true);
  // 0x10: u32
  if (data?.TokenId !== undefined) view.setUint32(16, Number(data.TokenId), true);
  // 0x14: pad4
  return buf;
}

export class D3D10_SHADER_DEBUG_TOKEN_INFOView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get File(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: u32
  get Line(): number {
    return this.view.getUint32(4, true);
  }

  // 0x08: u32
  get Column(): number {
    return this.view.getUint32(8, true);
  }

  // 0x0c: u32
  get TokenLength(): number {
    return this.view.getUint32(12, true);
  }

  // 0x10: u32
  get TokenId(): number {
    return this.view.getUint32(16, true);
  }

  // 0x14: pad4

  // 0x00: u32
  set File(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: u32
  set Line(value: number) {
    this.view.setUint32(4, value, true);
  }

  // 0x08: u32
  set Column(value: number) {
    this.view.setUint32(8, value, true);
  }

  // 0x0c: u32
  set TokenLength(value: number) {
    this.view.setUint32(12, value, true);
  }

  // 0x10: u32
  set TokenId(value: number) {
    this.view.setUint32(16, value, true);
  }

  // 0x14: pad4
}

/**
 * Windows.Win32.Graphics.Direct3D10.D3D10_SHADER_DEBUG_VAR_INFO (size: 24)
 */
export interface D3D10_SHADER_DEBUG_VAR_INFO {
  /** u32 */
  TokenId: number;
  /** Windows.Win32.Graphics.Direct3D.D3D_SHADER_VARIABLE_TYPE */
  Type: D3D_SHADER_VARIABLE_TYPE;
  /** u32 */
  Register: number;
  /** u32 */
  Component: number;
  /** u32 */
  ScopeVar: number;
  /** u32 */
  ScopeVarOffset: number;
}

export const sizeofD3D10_SHADER_DEBUG_VAR_INFO = 24;

export function allocD3D10_SHADER_DEBUG_VAR_INFO(data?: Partial<D3D10_SHADER_DEBUG_VAR_INFO>): Uint8Array {
  const buf = new Uint8Array(sizeofD3D10_SHADER_DEBUG_VAR_INFO);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.TokenId !== undefined) view.setUint32(0, Number(data.TokenId), true);
  // 0x04: i32
  if (data?.Type !== undefined) view.setInt32(4, Number(data.Type), true);
  // 0x08: u32
  if (data?.Register !== undefined) view.setUint32(8, Number(data.Register), true);
  // 0x0c: u32
  if (data?.Component !== undefined) view.setUint32(12, Number(data.Component), true);
  // 0x10: u32
  if (data?.ScopeVar !== undefined) view.setUint32(16, Number(data.ScopeVar), true);
  // 0x14: u32
  if (data?.ScopeVarOffset !== undefined) view.setUint32(20, Number(data.ScopeVarOffset), true);
  return buf;
}

export class D3D10_SHADER_DEBUG_VAR_INFOView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get TokenId(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: i32
  get Type(): number {
    return this.view.getInt32(4, true);
  }

  // 0x08: u32
  get Register(): number {
    return this.view.getUint32(8, true);
  }

  // 0x0c: u32
  get Component(): number {
    return this.view.getUint32(12, true);
  }

  // 0x10: u32
  get ScopeVar(): number {
    return this.view.getUint32(16, true);
  }

  // 0x14: u32
  get ScopeVarOffset(): number {
    return this.view.getUint32(20, true);
  }

  // 0x00: u32
  set TokenId(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: i32
  set Type(value: number) {
    this.view.setInt32(4, value, true);
  }

  // 0x08: u32
  set Register(value: number) {
    this.view.setUint32(8, value, true);
  }

  // 0x0c: u32
  set Component(value: number) {
    this.view.setUint32(12, value, true);
  }

  // 0x10: u32
  set ScopeVar(value: number) {
    this.view.setUint32(16, value, true);
  }

  // 0x14: u32
  set ScopeVarOffset(value: number) {
    this.view.setUint32(20, value, true);
  }
}

/**
 * Windows.Win32.Graphics.Direct3D10.D3D10_SHADER_DEBUG_INPUT_INFO (size: 24)
 */
export interface D3D10_SHADER_DEBUG_INPUT_INFO {
  /** u32 */
  Var: number;
  /** Windows.Win32.Graphics.Direct3D10.D3D10_SHADER_DEBUG_REGTYPE */
  InitialRegisterSet: D3D10_SHADER_DEBUG_REGTYPE;
  /** u32 */
  InitialBank: number;
  /** u32 */
  InitialRegister: number;
  /** u32 */
  InitialComponent: number;
  /** u32 */
  InitialValue: number;
}

export const sizeofD3D10_SHADER_DEBUG_INPUT_INFO = 24;

export function allocD3D10_SHADER_DEBUG_INPUT_INFO(data?: Partial<D3D10_SHADER_DEBUG_INPUT_INFO>): Uint8Array {
  const buf = new Uint8Array(sizeofD3D10_SHADER_DEBUG_INPUT_INFO);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.Var !== undefined) view.setUint32(0, Number(data.Var), true);
  // 0x04: i32
  if (data?.InitialRegisterSet !== undefined) view.setInt32(4, Number(data.InitialRegisterSet), true);
  // 0x08: u32
  if (data?.InitialBank !== undefined) view.setUint32(8, Number(data.InitialBank), true);
  // 0x0c: u32
  if (data?.InitialRegister !== undefined) view.setUint32(12, Number(data.InitialRegister), true);
  // 0x10: u32
  if (data?.InitialComponent !== undefined) view.setUint32(16, Number(data.InitialComponent), true);
  // 0x14: u32
  if (data?.InitialValue !== undefined) view.setUint32(20, Number(data.InitialValue), true);
  return buf;
}

export class D3D10_SHADER_DEBUG_INPUT_INFOView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get Var(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: i32
  get InitialRegisterSet(): number {
    return this.view.getInt32(4, true);
  }

  // 0x08: u32
  get InitialBank(): number {
    return this.view.getUint32(8, true);
  }

  // 0x0c: u32
  get InitialRegister(): number {
    return this.view.getUint32(12, true);
  }

  // 0x10: u32
  get InitialComponent(): number {
    return this.view.getUint32(16, true);
  }

  // 0x14: u32
  get InitialValue(): number {
    return this.view.getUint32(20, true);
  }

  // 0x00: u32
  set Var(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: i32
  set InitialRegisterSet(value: number) {
    this.view.setInt32(4, value, true);
  }

  // 0x08: u32
  set InitialBank(value: number) {
    this.view.setUint32(8, value, true);
  }

  // 0x0c: u32
  set InitialRegister(value: number) {
    this.view.setUint32(12, value, true);
  }

  // 0x10: u32
  set InitialComponent(value: number) {
    this.view.setUint32(16, value, true);
  }

  // 0x14: u32
  set InitialValue(value: number) {
    this.view.setUint32(20, value, true);
  }
}

/**
 * Windows.Win32.Graphics.Direct3D10.D3D10_SHADER_DEBUG_SCOPEVAR_INFO (size: 48)
 */
export interface D3D10_SHADER_DEBUG_SCOPEVAR_INFO {
  /** u32 */
  TokenId: number;
  /** Windows.Win32.Graphics.Direct3D10.D3D10_SHADER_DEBUG_VARTYPE */
  VarType: D3D10_SHADER_DEBUG_VARTYPE;
  /** Windows.Win32.Graphics.Direct3D.D3D_SHADER_VARIABLE_CLASS */
  Class: D3D_SHADER_VARIABLE_CLASS;
  /** u32 */
  Rows: number;
  /** u32 */
  Columns: number;
  /** u32 */
  StructMemberScope: number;
  /** u32 */
  uArrayIndices: number;
  /** u32 */
  ArrayElements: number;
  /** u32 */
  ArrayStrides: number;
  /** u32 */
  uVariables: number;
  /** u32 */
  uFirstVariable: number;
}

export const sizeofD3D10_SHADER_DEBUG_SCOPEVAR_INFO = 48;

export function allocD3D10_SHADER_DEBUG_SCOPEVAR_INFO(data?: Partial<D3D10_SHADER_DEBUG_SCOPEVAR_INFO>): Uint8Array {
  const buf = new Uint8Array(sizeofD3D10_SHADER_DEBUG_SCOPEVAR_INFO);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.TokenId !== undefined) view.setUint32(0, Number(data.TokenId), true);
  // 0x04: i32
  if (data?.VarType !== undefined) view.setInt32(4, Number(data.VarType), true);
  // 0x08: i32
  if (data?.Class !== undefined) view.setInt32(8, Number(data.Class), true);
  // 0x0c: u32
  if (data?.Rows !== undefined) view.setUint32(12, Number(data.Rows), true);
  // 0x10: u32
  if (data?.Columns !== undefined) view.setUint32(16, Number(data.Columns), true);
  // 0x14: u32
  if (data?.StructMemberScope !== undefined) view.setUint32(20, Number(data.StructMemberScope), true);
  // 0x18: u32
  if (data?.uArrayIndices !== undefined) view.setUint32(24, Number(data.uArrayIndices), true);
  // 0x1c: u32
  if (data?.ArrayElements !== undefined) view.setUint32(28, Number(data.ArrayElements), true);
  // 0x20: u32
  if (data?.ArrayStrides !== undefined) view.setUint32(32, Number(data.ArrayStrides), true);
  // 0x24: u32
  if (data?.uVariables !== undefined) view.setUint32(36, Number(data.uVariables), true);
  // 0x28: u32
  if (data?.uFirstVariable !== undefined) view.setUint32(40, Number(data.uFirstVariable), true);
  // 0x2c: pad4
  return buf;
}

export class D3D10_SHADER_DEBUG_SCOPEVAR_INFOView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get TokenId(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: i32
  get VarType(): number {
    return this.view.getInt32(4, true);
  }

  // 0x08: i32
  get Class(): number {
    return this.view.getInt32(8, true);
  }

  // 0x0c: u32
  get Rows(): number {
    return this.view.getUint32(12, true);
  }

  // 0x10: u32
  get Columns(): number {
    return this.view.getUint32(16, true);
  }

  // 0x14: u32
  get StructMemberScope(): number {
    return this.view.getUint32(20, true);
  }

  // 0x18: u32
  get uArrayIndices(): number {
    return this.view.getUint32(24, true);
  }

  // 0x1c: u32
  get ArrayElements(): number {
    return this.view.getUint32(28, true);
  }

  // 0x20: u32
  get ArrayStrides(): number {
    return this.view.getUint32(32, true);
  }

  // 0x24: u32
  get uVariables(): number {
    return this.view.getUint32(36, true);
  }

  // 0x28: u32
  get uFirstVariable(): number {
    return this.view.getUint32(40, true);
  }

  // 0x2c: pad4

  // 0x00: u32
  set TokenId(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: i32
  set VarType(value: number) {
    this.view.setInt32(4, value, true);
  }

  // 0x08: i32
  set Class(value: number) {
    this.view.setInt32(8, value, true);
  }

  // 0x0c: u32
  set Rows(value: number) {
    this.view.setUint32(12, value, true);
  }

  // 0x10: u32
  set Columns(value: number) {
    this.view.setUint32(16, value, true);
  }

  // 0x14: u32
  set StructMemberScope(value: number) {
    this.view.setUint32(20, value, true);
  }

  // 0x18: u32
  set uArrayIndices(value: number) {
    this.view.setUint32(24, value, true);
  }

  // 0x1c: u32
  set ArrayElements(value: number) {
    this.view.setUint32(28, value, true);
  }

  // 0x20: u32
  set ArrayStrides(value: number) {
    this.view.setUint32(32, value, true);
  }

  // 0x24: u32
  set uVariables(value: number) {
    this.view.setUint32(36, value, true);
  }

  // 0x28: u32
  set uFirstVariable(value: number) {
    this.view.setUint32(40, value, true);
  }

  // 0x2c: pad4
}

/**
 * Windows.Win32.Graphics.Direct3D10.D3D10_SHADER_DEBUG_SCOPE_INFO (size: 24)
 */
export interface D3D10_SHADER_DEBUG_SCOPE_INFO {
  /** Windows.Win32.Graphics.Direct3D10.D3D10_SHADER_DEBUG_SCOPETYPE */
  ScopeType: D3D10_SHADER_DEBUG_SCOPETYPE;
  /** u32 */
  Name: number;
  /** u32 */
  uNameLen: number;
  /** u32 */
  uVariables: number;
  /** u32 */
  VariableData: number;
}

export const sizeofD3D10_SHADER_DEBUG_SCOPE_INFO = 24;

export function allocD3D10_SHADER_DEBUG_SCOPE_INFO(data?: Partial<D3D10_SHADER_DEBUG_SCOPE_INFO>): Uint8Array {
  const buf = new Uint8Array(sizeofD3D10_SHADER_DEBUG_SCOPE_INFO);
  const view = new DataView(buf.buffer);
  // 0x00: i32
  if (data?.ScopeType !== undefined) view.setInt32(0, Number(data.ScopeType), true);
  // 0x04: u32
  if (data?.Name !== undefined) view.setUint32(4, Number(data.Name), true);
  // 0x08: u32
  if (data?.uNameLen !== undefined) view.setUint32(8, Number(data.uNameLen), true);
  // 0x0c: u32
  if (data?.uVariables !== undefined) view.setUint32(12, Number(data.uVariables), true);
  // 0x10: u32
  if (data?.VariableData !== undefined) view.setUint32(16, Number(data.VariableData), true);
  // 0x14: pad4
  return buf;
}

export class D3D10_SHADER_DEBUG_SCOPE_INFOView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: i32
  get ScopeType(): number {
    return this.view.getInt32(0, true);
  }

  // 0x04: u32
  get Name(): number {
    return this.view.getUint32(4, true);
  }

  // 0x08: u32
  get uNameLen(): number {
    return this.view.getUint32(8, true);
  }

  // 0x0c: u32
  get uVariables(): number {
    return this.view.getUint32(12, true);
  }

  // 0x10: u32
  get VariableData(): number {
    return this.view.getUint32(16, true);
  }

  // 0x14: pad4

  // 0x00: i32
  set ScopeType(value: number) {
    this.view.setInt32(0, value, true);
  }

  // 0x04: u32
  set Name(value: number) {
    this.view.setUint32(4, value, true);
  }

  // 0x08: u32
  set uNameLen(value: number) {
    this.view.setUint32(8, value, true);
  }

  // 0x0c: u32
  set uVariables(value: number) {
    this.view.setUint32(12, value, true);
  }

  // 0x10: u32
  set VariableData(value: number) {
    this.view.setUint32(16, value, true);
  }

  // 0x14: pad4
}

/**
 * Windows.Win32.Graphics.Direct3D10.D3D10_SHADER_DEBUG_OUTPUTVAR (size: 40)
 */
export interface D3D10_SHADER_DEBUG_OUTPUTVAR {
  /** u32 */
  Var: number;
  /** u32 */
  uValueMin: number;
  /** u32 */
  uValueMax: number;
  /** i32 */
  iValueMin: number;
  /** i32 */
  iValueMax: number;
  /** f32 */
  fValueMin: number;
  /** f32 */
  fValueMax: number;
  /** Windows.Win32.Foundation.BOOL */
  bNaNPossible: boolean;
  /** Windows.Win32.Foundation.BOOL */
  bInfPossible: boolean;
}

export const sizeofD3D10_SHADER_DEBUG_OUTPUTVAR = 40;

export function allocD3D10_SHADER_DEBUG_OUTPUTVAR(data?: Partial<D3D10_SHADER_DEBUG_OUTPUTVAR>): Uint8Array {
  const buf = new Uint8Array(sizeofD3D10_SHADER_DEBUG_OUTPUTVAR);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.Var !== undefined) view.setUint32(0, Number(data.Var), true);
  // 0x04: u32
  if (data?.uValueMin !== undefined) view.setUint32(4, Number(data.uValueMin), true);
  // 0x08: u32
  if (data?.uValueMax !== undefined) view.setUint32(8, Number(data.uValueMax), true);
  // 0x0c: i32
  if (data?.iValueMin !== undefined) view.setInt32(12, Number(data.iValueMin), true);
  // 0x10: i32
  if (data?.iValueMax !== undefined) view.setInt32(16, Number(data.iValueMax), true);
  // 0x14: f32
  if (data?.fValueMin !== undefined) view.setFloat32(20, Number(data.fValueMin), true);
  // 0x18: f32
  if (data?.fValueMax !== undefined) view.setFloat32(24, Number(data.fValueMax), true);
  // 0x1c: i32
  if (data?.bNaNPossible !== undefined) view.setInt32(28, Number(data.bNaNPossible), true);
  // 0x20: i32
  if (data?.bInfPossible !== undefined) view.setInt32(32, Number(data.bInfPossible), true);
  // 0x24: pad4
  return buf;
}

export class D3D10_SHADER_DEBUG_OUTPUTVARView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get Var(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: u32
  get uValueMin(): number {
    return this.view.getUint32(4, true);
  }

  // 0x08: u32
  get uValueMax(): number {
    return this.view.getUint32(8, true);
  }

  // 0x0c: i32
  get iValueMin(): number {
    return this.view.getInt32(12, true);
  }

  // 0x10: i32
  get iValueMax(): number {
    return this.view.getInt32(16, true);
  }

  // 0x14: f32
  get fValueMin(): number {
    return this.view.getFloat32(20, true);
  }

  // 0x18: f32
  get fValueMax(): number {
    return this.view.getFloat32(24, true);
  }

  // 0x1c: i32
  get bNaNPossible(): number {
    return this.view.getInt32(28, true);
  }

  // 0x20: i32
  get bInfPossible(): number {
    return this.view.getInt32(32, true);
  }

  // 0x24: pad4

  // 0x00: u32
  set Var(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: u32
  set uValueMin(value: number) {
    this.view.setUint32(4, value, true);
  }

  // 0x08: u32
  set uValueMax(value: number) {
    this.view.setUint32(8, value, true);
  }

  // 0x0c: i32
  set iValueMin(value: number) {
    this.view.setInt32(12, value, true);
  }

  // 0x10: i32
  set iValueMax(value: number) {
    this.view.setInt32(16, value, true);
  }

  // 0x14: f32
  set fValueMin(value: number) {
    this.view.setFloat32(20, value, true);
  }

  // 0x18: f32
  set fValueMax(value: number) {
    this.view.setFloat32(24, value, true);
  }

  // 0x1c: i32
  set bNaNPossible(value: number) {
    this.view.setInt32(28, value, true);
  }

  // 0x20: i32
  set bInfPossible(value: number) {
    this.view.setInt32(32, value, true);
  }

  // 0x24: pad4
}

/**
 * Windows.Win32.Graphics.Direct3D10.D3D10_SHADER_DEBUG_OUTPUTREG_INFO (size: 40)
 */
export interface D3D10_SHADER_DEBUG_OUTPUTREG_INFO {
  /** Windows.Win32.Graphics.Direct3D10.D3D10_SHADER_DEBUG_REGTYPE */
  OutputRegisterSet: D3D10_SHADER_DEBUG_REGTYPE;
  /** u32 */
  OutputReg: number;
  /** u32 */
  TempArrayReg: number;
  /** array */
  OutputComponents: Deno.PointerValue | null;
  /** array */
  OutputVars: Deno.PointerValue | null;
  /** u32 */
  IndexReg: number;
  /** u32 */
  IndexComp: number;
}

export const sizeofD3D10_SHADER_DEBUG_OUTPUTREG_INFO = 40;

export function allocD3D10_SHADER_DEBUG_OUTPUTREG_INFO(data?: Partial<D3D10_SHADER_DEBUG_OUTPUTREG_INFO>): Uint8Array {
  const buf = new Uint8Array(sizeofD3D10_SHADER_DEBUG_OUTPUTREG_INFO);
  const view = new DataView(buf.buffer);
  // 0x00: i32
  if (data?.OutputRegisterSet !== undefined) view.setInt32(0, Number(data.OutputRegisterSet), true);
  // 0x04: u32
  if (data?.OutputReg !== undefined) view.setUint32(4, Number(data.OutputReg), true);
  // 0x08: u32
  if (data?.TempArrayReg !== undefined) view.setUint32(8, Number(data.TempArrayReg), true);
  // 0x0c: pad4
  // 0x10: pointer
  if (data?.OutputComponents !== undefined) view.setBigUint64(16, data.OutputComponents === null ? 0n : util.toBigInt(util.toPointer(data.OutputComponents)), true);
  // 0x18: pointer
  if (data?.OutputVars !== undefined) view.setBigUint64(24, data.OutputVars === null ? 0n : util.toBigInt(util.toPointer(data.OutputVars)), true);
  // 0x20: u32
  if (data?.IndexReg !== undefined) view.setUint32(32, Number(data.IndexReg), true);
  // 0x24: u32
  if (data?.IndexComp !== undefined) view.setUint32(36, Number(data.IndexComp), true);
  return buf;
}

export class D3D10_SHADER_DEBUG_OUTPUTREG_INFOView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: i32
  get OutputRegisterSet(): number {
    return this.view.getInt32(0, true);
  }

  // 0x04: u32
  get OutputReg(): number {
    return this.view.getUint32(4, true);
  }

  // 0x08: u32
  get TempArrayReg(): number {
    return this.view.getUint32(8, true);
  }

  // 0x0c: pad4

  // 0x10: pointer
  get OutputComponents(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(16, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x18: pointer
  get OutputVars(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(24, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x20: u32
  get IndexReg(): number {
    return this.view.getUint32(32, true);
  }

  // 0x24: u32
  get IndexComp(): number {
    return this.view.getUint32(36, true);
  }

  // 0x00: i32
  set OutputRegisterSet(value: number) {
    this.view.setInt32(0, value, true);
  }

  // 0x04: u32
  set OutputReg(value: number) {
    this.view.setUint32(4, value, true);
  }

  // 0x08: u32
  set TempArrayReg(value: number) {
    this.view.setUint32(8, value, true);
  }

  // 0x0c: pad4

  // 0x10: pointer
  set OutputComponents(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(16, util.toBigInt(util.toPointer(value)), true);
  }

  // 0x18: pointer
  set OutputVars(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(24, util.toBigInt(util.toPointer(value)), true);
  }

  // 0x20: u32
  set IndexReg(value: number) {
    this.view.setUint32(32, value, true);
  }

  // 0x24: u32
  set IndexComp(value: number) {
    this.view.setUint32(36, value, true);
  }
}

/**
 * Windows.Win32.Graphics.Direct3D10.D3D10_SHADER_DEBUG_INST_INFO (size: 48)
 */
export interface D3D10_SHADER_DEBUG_INST_INFO {
  /** u32 */
  Id: number;
  /** u32 */
  Opcode: number;
  /** u32 */
  uOutputs: number;
  /** array */
  pOutputs: Deno.PointerValue | null;
  /** u32 */
  TokenId: number;
  /** u32 */
  NestingLevel: number;
  /** u32 */
  Scopes: number;
  /** u32 */
  ScopeInfo: number;
  /** u32 */
  AccessedVars: number;
  /** u32 */
  AccessedVarsInfo: number;
}

export const sizeofD3D10_SHADER_DEBUG_INST_INFO = 48;

export function allocD3D10_SHADER_DEBUG_INST_INFO(data?: Partial<D3D10_SHADER_DEBUG_INST_INFO>): Uint8Array {
  const buf = new Uint8Array(sizeofD3D10_SHADER_DEBUG_INST_INFO);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.Id !== undefined) view.setUint32(0, Number(data.Id), true);
  // 0x04: u32
  if (data?.Opcode !== undefined) view.setUint32(4, Number(data.Opcode), true);
  // 0x08: u32
  if (data?.uOutputs !== undefined) view.setUint32(8, Number(data.uOutputs), true);
  // 0x0c: pad4
  // 0x10: pointer
  if (data?.pOutputs !== undefined) view.setBigUint64(16, data.pOutputs === null ? 0n : util.toBigInt(util.toPointer(data.pOutputs)), true);
  // 0x18: u32
  if (data?.TokenId !== undefined) view.setUint32(24, Number(data.TokenId), true);
  // 0x1c: u32
  if (data?.NestingLevel !== undefined) view.setUint32(28, Number(data.NestingLevel), true);
  // 0x20: u32
  if (data?.Scopes !== undefined) view.setUint32(32, Number(data.Scopes), true);
  // 0x24: u32
  if (data?.ScopeInfo !== undefined) view.setUint32(36, Number(data.ScopeInfo), true);
  // 0x28: u32
  if (data?.AccessedVars !== undefined) view.setUint32(40, Number(data.AccessedVars), true);
  // 0x2c: u32
  if (data?.AccessedVarsInfo !== undefined) view.setUint32(44, Number(data.AccessedVarsInfo), true);
  return buf;
}

export class D3D10_SHADER_DEBUG_INST_INFOView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get Id(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: u32
  get Opcode(): number {
    return this.view.getUint32(4, true);
  }

  // 0x08: u32
  get uOutputs(): number {
    return this.view.getUint32(8, true);
  }

  // 0x0c: pad4

  // 0x10: pointer
  get pOutputs(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(16, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x18: u32
  get TokenId(): number {
    return this.view.getUint32(24, true);
  }

  // 0x1c: u32
  get NestingLevel(): number {
    return this.view.getUint32(28, true);
  }

  // 0x20: u32
  get Scopes(): number {
    return this.view.getUint32(32, true);
  }

  // 0x24: u32
  get ScopeInfo(): number {
    return this.view.getUint32(36, true);
  }

  // 0x28: u32
  get AccessedVars(): number {
    return this.view.getUint32(40, true);
  }

  // 0x2c: u32
  get AccessedVarsInfo(): number {
    return this.view.getUint32(44, true);
  }

  // 0x00: u32
  set Id(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: u32
  set Opcode(value: number) {
    this.view.setUint32(4, value, true);
  }

  // 0x08: u32
  set uOutputs(value: number) {
    this.view.setUint32(8, value, true);
  }

  // 0x0c: pad4

  // 0x10: pointer
  set pOutputs(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(16, util.toBigInt(util.toPointer(value)), true);
  }

  // 0x18: u32
  set TokenId(value: number) {
    this.view.setUint32(24, value, true);
  }

  // 0x1c: u32
  set NestingLevel(value: number) {
    this.view.setUint32(28, value, true);
  }

  // 0x20: u32
  set Scopes(value: number) {
    this.view.setUint32(32, value, true);
  }

  // 0x24: u32
  set ScopeInfo(value: number) {
    this.view.setUint32(36, value, true);
  }

  // 0x28: u32
  set AccessedVars(value: number) {
    this.view.setUint32(40, value, true);
  }

  // 0x2c: u32
  set AccessedVarsInfo(value: number) {
    this.view.setUint32(44, value, true);
  }
}

/**
 * Windows.Win32.Graphics.Direct3D10.D3D10_SHADER_DEBUG_FILE_INFO (size: 16)
 */
export interface D3D10_SHADER_DEBUG_FILE_INFO {
  /** u32 */
  FileName: number;
  /** u32 */
  FileNameLen: number;
  /** u32 */
  FileData: number;
  /** u32 */
  FileLen: number;
}

export const sizeofD3D10_SHADER_DEBUG_FILE_INFO = 16;

export function allocD3D10_SHADER_DEBUG_FILE_INFO(data?: Partial<D3D10_SHADER_DEBUG_FILE_INFO>): Uint8Array {
  const buf = new Uint8Array(sizeofD3D10_SHADER_DEBUG_FILE_INFO);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.FileName !== undefined) view.setUint32(0, Number(data.FileName), true);
  // 0x04: u32
  if (data?.FileNameLen !== undefined) view.setUint32(4, Number(data.FileNameLen), true);
  // 0x08: u32
  if (data?.FileData !== undefined) view.setUint32(8, Number(data.FileData), true);
  // 0x0c: u32
  if (data?.FileLen !== undefined) view.setUint32(12, Number(data.FileLen), true);
  return buf;
}

export class D3D10_SHADER_DEBUG_FILE_INFOView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get FileName(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: u32
  get FileNameLen(): number {
    return this.view.getUint32(4, true);
  }

  // 0x08: u32
  get FileData(): number {
    return this.view.getUint32(8, true);
  }

  // 0x0c: u32
  get FileLen(): number {
    return this.view.getUint32(12, true);
  }

  // 0x00: u32
  set FileName(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: u32
  set FileNameLen(value: number) {
    this.view.setUint32(4, value, true);
  }

  // 0x08: u32
  set FileData(value: number) {
    this.view.setUint32(8, value, true);
  }

  // 0x0c: u32
  set FileLen(value: number) {
    this.view.setUint32(12, value, true);
  }
}

/**
 * Windows.Win32.Graphics.Direct3D10.D3D10_SHADER_DEBUG_INFO (size: 88)
 */
export interface D3D10_SHADER_DEBUG_INFO {
  /** u32 */
  Size: number;
  /** u32 */
  Creator: number;
  /** u32 */
  EntrypointName: number;
  /** u32 */
  ShaderTarget: number;
  /** u32 */
  CompileFlags: number;
  /** u32 */
  Files: number;
  /** u32 */
  FileInfo: number;
  /** u32 */
  Instructions: number;
  /** u32 */
  InstructionInfo: number;
  /** u32 */
  Variables: number;
  /** u32 */
  VariableInfo: number;
  /** u32 */
  InputVariables: number;
  /** u32 */
  InputVariableInfo: number;
  /** u32 */
  Tokens: number;
  /** u32 */
  TokenInfo: number;
  /** u32 */
  Scopes: number;
  /** u32 */
  ScopeInfo: number;
  /** u32 */
  ScopeVariables: number;
  /** u32 */
  ScopeVariableInfo: number;
  /** u32 */
  UintOffset: number;
  /** u32 */
  StringOffset: number;
}

export const sizeofD3D10_SHADER_DEBUG_INFO = 88;

export function allocD3D10_SHADER_DEBUG_INFO(data?: Partial<D3D10_SHADER_DEBUG_INFO>): Uint8Array {
  const buf = new Uint8Array(sizeofD3D10_SHADER_DEBUG_INFO);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.Size !== undefined) view.setUint32(0, Number(data.Size), true);
  // 0x04: u32
  if (data?.Creator !== undefined) view.setUint32(4, Number(data.Creator), true);
  // 0x08: u32
  if (data?.EntrypointName !== undefined) view.setUint32(8, Number(data.EntrypointName), true);
  // 0x0c: u32
  if (data?.ShaderTarget !== undefined) view.setUint32(12, Number(data.ShaderTarget), true);
  // 0x10: u32
  if (data?.CompileFlags !== undefined) view.setUint32(16, Number(data.CompileFlags), true);
  // 0x14: u32
  if (data?.Files !== undefined) view.setUint32(20, Number(data.Files), true);
  // 0x18: u32
  if (data?.FileInfo !== undefined) view.setUint32(24, Number(data.FileInfo), true);
  // 0x1c: u32
  if (data?.Instructions !== undefined) view.setUint32(28, Number(data.Instructions), true);
  // 0x20: u32
  if (data?.InstructionInfo !== undefined) view.setUint32(32, Number(data.InstructionInfo), true);
  // 0x24: u32
  if (data?.Variables !== undefined) view.setUint32(36, Number(data.Variables), true);
  // 0x28: u32
  if (data?.VariableInfo !== undefined) view.setUint32(40, Number(data.VariableInfo), true);
  // 0x2c: u32
  if (data?.InputVariables !== undefined) view.setUint32(44, Number(data.InputVariables), true);
  // 0x30: u32
  if (data?.InputVariableInfo !== undefined) view.setUint32(48, Number(data.InputVariableInfo), true);
  // 0x34: u32
  if (data?.Tokens !== undefined) view.setUint32(52, Number(data.Tokens), true);
  // 0x38: u32
  if (data?.TokenInfo !== undefined) view.setUint32(56, Number(data.TokenInfo), true);
  // 0x3c: u32
  if (data?.Scopes !== undefined) view.setUint32(60, Number(data.Scopes), true);
  // 0x40: u32
  if (data?.ScopeInfo !== undefined) view.setUint32(64, Number(data.ScopeInfo), true);
  // 0x44: u32
  if (data?.ScopeVariables !== undefined) view.setUint32(68, Number(data.ScopeVariables), true);
  // 0x48: u32
  if (data?.ScopeVariableInfo !== undefined) view.setUint32(72, Number(data.ScopeVariableInfo), true);
  // 0x4c: u32
  if (data?.UintOffset !== undefined) view.setUint32(76, Number(data.UintOffset), true);
  // 0x50: u32
  if (data?.StringOffset !== undefined) view.setUint32(80, Number(data.StringOffset), true);
  // 0x54: pad4
  return buf;
}

export class D3D10_SHADER_DEBUG_INFOView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get Size(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: u32
  get Creator(): number {
    return this.view.getUint32(4, true);
  }

  // 0x08: u32
  get EntrypointName(): number {
    return this.view.getUint32(8, true);
  }

  // 0x0c: u32
  get ShaderTarget(): number {
    return this.view.getUint32(12, true);
  }

  // 0x10: u32
  get CompileFlags(): number {
    return this.view.getUint32(16, true);
  }

  // 0x14: u32
  get Files(): number {
    return this.view.getUint32(20, true);
  }

  // 0x18: u32
  get FileInfo(): number {
    return this.view.getUint32(24, true);
  }

  // 0x1c: u32
  get Instructions(): number {
    return this.view.getUint32(28, true);
  }

  // 0x20: u32
  get InstructionInfo(): number {
    return this.view.getUint32(32, true);
  }

  // 0x24: u32
  get Variables(): number {
    return this.view.getUint32(36, true);
  }

  // 0x28: u32
  get VariableInfo(): number {
    return this.view.getUint32(40, true);
  }

  // 0x2c: u32
  get InputVariables(): number {
    return this.view.getUint32(44, true);
  }

  // 0x30: u32
  get InputVariableInfo(): number {
    return this.view.getUint32(48, true);
  }

  // 0x34: u32
  get Tokens(): number {
    return this.view.getUint32(52, true);
  }

  // 0x38: u32
  get TokenInfo(): number {
    return this.view.getUint32(56, true);
  }

  // 0x3c: u32
  get Scopes(): number {
    return this.view.getUint32(60, true);
  }

  // 0x40: u32
  get ScopeInfo(): number {
    return this.view.getUint32(64, true);
  }

  // 0x44: u32
  get ScopeVariables(): number {
    return this.view.getUint32(68, true);
  }

  // 0x48: u32
  get ScopeVariableInfo(): number {
    return this.view.getUint32(72, true);
  }

  // 0x4c: u32
  get UintOffset(): number {
    return this.view.getUint32(76, true);
  }

  // 0x50: u32
  get StringOffset(): number {
    return this.view.getUint32(80, true);
  }

  // 0x54: pad4

  // 0x00: u32
  set Size(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: u32
  set Creator(value: number) {
    this.view.setUint32(4, value, true);
  }

  // 0x08: u32
  set EntrypointName(value: number) {
    this.view.setUint32(8, value, true);
  }

  // 0x0c: u32
  set ShaderTarget(value: number) {
    this.view.setUint32(12, value, true);
  }

  // 0x10: u32
  set CompileFlags(value: number) {
    this.view.setUint32(16, value, true);
  }

  // 0x14: u32
  set Files(value: number) {
    this.view.setUint32(20, value, true);
  }

  // 0x18: u32
  set FileInfo(value: number) {
    this.view.setUint32(24, value, true);
  }

  // 0x1c: u32
  set Instructions(value: number) {
    this.view.setUint32(28, value, true);
  }

  // 0x20: u32
  set InstructionInfo(value: number) {
    this.view.setUint32(32, value, true);
  }

  // 0x24: u32
  set Variables(value: number) {
    this.view.setUint32(36, value, true);
  }

  // 0x28: u32
  set VariableInfo(value: number) {
    this.view.setUint32(40, value, true);
  }

  // 0x2c: u32
  set InputVariables(value: number) {
    this.view.setUint32(44, value, true);
  }

  // 0x30: u32
  set InputVariableInfo(value: number) {
    this.view.setUint32(48, value, true);
  }

  // 0x34: u32
  set Tokens(value: number) {
    this.view.setUint32(52, value, true);
  }

  // 0x38: u32
  set TokenInfo(value: number) {
    this.view.setUint32(56, value, true);
  }

  // 0x3c: u32
  set Scopes(value: number) {
    this.view.setUint32(60, value, true);
  }

  // 0x40: u32
  set ScopeInfo(value: number) {
    this.view.setUint32(64, value, true);
  }

  // 0x44: u32
  set ScopeVariables(value: number) {
    this.view.setUint32(68, value, true);
  }

  // 0x48: u32
  set ScopeVariableInfo(value: number) {
    this.view.setUint32(72, value, true);
  }

  // 0x4c: u32
  set UintOffset(value: number) {
    this.view.setUint32(76, value, true);
  }

  // 0x50: u32
  set StringOffset(value: number) {
    this.view.setUint32(80, value, true);
  }

  // 0x54: pad4
}

/**
 * Windows.Win32.Graphics.Direct3D11.D3D11_INPUT_ELEMENT_DESC (size: 32)
 */
export interface D3D11_INPUT_ELEMENT_DESC {
  /** Windows.Win32.Foundation.PSTR */
  SemanticName: string | null | Uint8Array;
  /** u32 */
  SemanticIndex: number;
  /** Windows.Win32.Graphics.Dxgi.Common.DXGI_FORMAT */
  Format: DXGI_FORMAT;
  /** u32 */
  InputSlot: number;
  /** u32 */
  AlignedByteOffset: number;
  /** Windows.Win32.Graphics.Direct3D11.D3D11_INPUT_CLASSIFICATION */
  InputSlotClass: D3D11_INPUT_CLASSIFICATION;
  /** u32 */
  InstanceDataStepRate: number;
}

export const sizeofD3D11_INPUT_ELEMENT_DESC = 32;

export function allocD3D11_INPUT_ELEMENT_DESC(data?: Partial<D3D11_INPUT_ELEMENT_DESC>): Uint8Array {
  const buf = new Uint8Array(sizeofD3D11_INPUT_ELEMENT_DESC);
  const view = new DataView(buf.buffer);
  // 0x00: buffer
  if (data?.SemanticName !== undefined) {
    (buf as any)._f0 = util.pstrToFfi(data.SemanticName);
    view.setBigUint64(0, (buf as any)._f0 === null ? 0n : util.toBigInt(Deno.UnsafePointer.of((buf as any)._f0)), true);
  }
  // 0x08: u32
  if (data?.SemanticIndex !== undefined) view.setUint32(8, Number(data.SemanticIndex), true);
  // 0x0c: u32
  if (data?.Format !== undefined) view.setUint32(12, Number(data.Format), true);
  // 0x10: u32
  if (data?.InputSlot !== undefined) view.setUint32(16, Number(data.InputSlot), true);
  // 0x14: u32
  if (data?.AlignedByteOffset !== undefined) view.setUint32(20, Number(data.AlignedByteOffset), true);
  // 0x18: i32
  if (data?.InputSlotClass !== undefined) view.setInt32(24, Number(data.InputSlotClass), true);
  // 0x1c: u32
  if (data?.InstanceDataStepRate !== undefined) view.setUint32(28, Number(data.InstanceDataStepRate), true);
  return buf;
}

export class D3D11_INPUT_ELEMENT_DESCView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: buffer
  get SemanticName(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(0, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x08: u32
  get SemanticIndex(): number {
    return this.view.getUint32(8, true);
  }

  // 0x0c: u32
  get Format(): number {
    return this.view.getUint32(12, true);
  }

  // 0x10: u32
  get InputSlot(): number {
    return this.view.getUint32(16, true);
  }

  // 0x14: u32
  get AlignedByteOffset(): number {
    return this.view.getUint32(20, true);
  }

  // 0x18: i32
  get InputSlotClass(): number {
    return this.view.getInt32(24, true);
  }

  // 0x1c: u32
  get InstanceDataStepRate(): number {
    return this.view.getUint32(28, true);
  }

  // 0x00: buffer
  set SemanticName(value: Uint8Array | Deno.PointerValue | null) {
    (this.buf as any)._f0 = value;
    this.view.setBigUint64(0, util.toBigInt(util.toPointer((this.buf as any)._f0)), true);
  }

  // 0x08: u32
  set SemanticIndex(value: number) {
    this.view.setUint32(8, value, true);
  }

  // 0x0c: u32
  set Format(value: number) {
    this.view.setUint32(12, value, true);
  }

  // 0x10: u32
  set InputSlot(value: number) {
    this.view.setUint32(16, value, true);
  }

  // 0x14: u32
  set AlignedByteOffset(value: number) {
    this.view.setUint32(20, value, true);
  }

  // 0x18: i32
  set InputSlotClass(value: number) {
    this.view.setInt32(24, value, true);
  }

  // 0x1c: u32
  set InstanceDataStepRate(value: number) {
    this.view.setUint32(28, value, true);
  }
}

/**
 * Windows.Win32.Graphics.Direct3D11.D3D11_SO_DECLARATION_ENTRY (size: 24)
 */
export interface D3D11_SO_DECLARATION_ENTRY {
  /** u32 */
  Stream: number;
  /** Windows.Win32.Foundation.PSTR */
  SemanticName: string | null | Uint8Array;
  /** u32 */
  SemanticIndex: number;
  /** u8 */
  StartComponent: number;
  /** u8 */
  ComponentCount: number;
  /** u8 */
  OutputSlot: number;
}

export const sizeofD3D11_SO_DECLARATION_ENTRY = 24;

export function allocD3D11_SO_DECLARATION_ENTRY(data?: Partial<D3D11_SO_DECLARATION_ENTRY>): Uint8Array {
  const buf = new Uint8Array(sizeofD3D11_SO_DECLARATION_ENTRY);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.Stream !== undefined) view.setUint32(0, Number(data.Stream), true);
  // 0x04: pad4
  // 0x08: buffer
  if (data?.SemanticName !== undefined) {
    (buf as any)._f8 = util.pstrToFfi(data.SemanticName);
    view.setBigUint64(8, (buf as any)._f8 === null ? 0n : util.toBigInt(Deno.UnsafePointer.of((buf as any)._f8)), true);
  }
  // 0x10: u32
  if (data?.SemanticIndex !== undefined) view.setUint32(16, Number(data.SemanticIndex), true);
  // 0x14: u8
  if (data?.StartComponent !== undefined) view.setUint8(20, Number(data.StartComponent));
  // 0x15: u8
  if (data?.ComponentCount !== undefined) view.setUint8(21, Number(data.ComponentCount));
  // 0x16: u8
  if (data?.OutputSlot !== undefined) view.setUint8(22, Number(data.OutputSlot));
  // 0x17: pad1
  return buf;
}

export class D3D11_SO_DECLARATION_ENTRYView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get Stream(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: pad4

  // 0x08: buffer
  get SemanticName(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(8, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x10: u32
  get SemanticIndex(): number {
    return this.view.getUint32(16, true);
  }

  // 0x14: u8
  get StartComponent(): number {
    return this.view.getUint8(20);
  }

  // 0x15: u8
  get ComponentCount(): number {
    return this.view.getUint8(21);
  }

  // 0x16: u8
  get OutputSlot(): number {
    return this.view.getUint8(22);
  }

  // 0x17: pad1

  // 0x00: u32
  set Stream(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: pad4

  // 0x08: buffer
  set SemanticName(value: Uint8Array | Deno.PointerValue | null) {
    (this.buf as any)._f8 = value;
    this.view.setBigUint64(8, util.toBigInt(util.toPointer((this.buf as any)._f8)), true);
  }

  // 0x10: u32
  set SemanticIndex(value: number) {
    this.view.setUint32(16, value, true);
  }

  // 0x14: u8
  set StartComponent(value: number) {
    this.view.setUint8(20, value);
  }

  // 0x15: u8
  set ComponentCount(value: number) {
    this.view.setUint8(21, value);
  }

  // 0x16: u8
  set OutputSlot(value: number) {
    this.view.setUint8(22, value);
  }

  // 0x17: pad1
}

/**
 * Windows.Win32.Graphics.Direct3D11.D3D11_VIEWPORT (size: 24)
 */
export interface D3D11_VIEWPORT {
  /** f32 */
  TopLeftX: number;
  /** f32 */
  TopLeftY: number;
  /** f32 */
  Width: number;
  /** f32 */
  Height: number;
  /** f32 */
  MinDepth: number;
  /** f32 */
  MaxDepth: number;
}

export const sizeofD3D11_VIEWPORT = 24;

export function allocD3D11_VIEWPORT(data?: Partial<D3D11_VIEWPORT>): Uint8Array {
  const buf = new Uint8Array(sizeofD3D11_VIEWPORT);
  const view = new DataView(buf.buffer);
  // 0x00: f32
  if (data?.TopLeftX !== undefined) view.setFloat32(0, Number(data.TopLeftX), true);
  // 0x04: f32
  if (data?.TopLeftY !== undefined) view.setFloat32(4, Number(data.TopLeftY), true);
  // 0x08: f32
  if (data?.Width !== undefined) view.setFloat32(8, Number(data.Width), true);
  // 0x0c: f32
  if (data?.Height !== undefined) view.setFloat32(12, Number(data.Height), true);
  // 0x10: f32
  if (data?.MinDepth !== undefined) view.setFloat32(16, Number(data.MinDepth), true);
  // 0x14: f32
  if (data?.MaxDepth !== undefined) view.setFloat32(20, Number(data.MaxDepth), true);
  return buf;
}

export class D3D11_VIEWPORTView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: f32
  get TopLeftX(): number {
    return this.view.getFloat32(0, true);
  }

  // 0x04: f32
  get TopLeftY(): number {
    return this.view.getFloat32(4, true);
  }

  // 0x08: f32
  get Width(): number {
    return this.view.getFloat32(8, true);
  }

  // 0x0c: f32
  get Height(): number {
    return this.view.getFloat32(12, true);
  }

  // 0x10: f32
  get MinDepth(): number {
    return this.view.getFloat32(16, true);
  }

  // 0x14: f32
  get MaxDepth(): number {
    return this.view.getFloat32(20, true);
  }

  // 0x00: f32
  set TopLeftX(value: number) {
    this.view.setFloat32(0, value, true);
  }

  // 0x04: f32
  set TopLeftY(value: number) {
    this.view.setFloat32(4, value, true);
  }

  // 0x08: f32
  set Width(value: number) {
    this.view.setFloat32(8, value, true);
  }

  // 0x0c: f32
  set Height(value: number) {
    this.view.setFloat32(12, value, true);
  }

  // 0x10: f32
  set MinDepth(value: number) {
    this.view.setFloat32(16, value, true);
  }

  // 0x14: f32
  set MaxDepth(value: number) {
    this.view.setFloat32(20, value, true);
  }
}

/**
 * Windows.Win32.Graphics.Direct3D11.D3D11_DRAW_INSTANCED_INDIRECT_ARGS (size: 16)
 */
export interface D3D11_DRAW_INSTANCED_INDIRECT_ARGS {
  /** u32 */
  VertexCountPerInstance: number;
  /** u32 */
  InstanceCount: number;
  /** u32 */
  StartVertexLocation: number;
  /** u32 */
  StartInstanceLocation: number;
}

export const sizeofD3D11_DRAW_INSTANCED_INDIRECT_ARGS = 16;

export function allocD3D11_DRAW_INSTANCED_INDIRECT_ARGS(data?: Partial<D3D11_DRAW_INSTANCED_INDIRECT_ARGS>): Uint8Array {
  const buf = new Uint8Array(sizeofD3D11_DRAW_INSTANCED_INDIRECT_ARGS);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.VertexCountPerInstance !== undefined) view.setUint32(0, Number(data.VertexCountPerInstance), true);
  // 0x04: u32
  if (data?.InstanceCount !== undefined) view.setUint32(4, Number(data.InstanceCount), true);
  // 0x08: u32
  if (data?.StartVertexLocation !== undefined) view.setUint32(8, Number(data.StartVertexLocation), true);
  // 0x0c: u32
  if (data?.StartInstanceLocation !== undefined) view.setUint32(12, Number(data.StartInstanceLocation), true);
  return buf;
}

export class D3D11_DRAW_INSTANCED_INDIRECT_ARGSView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get VertexCountPerInstance(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: u32
  get InstanceCount(): number {
    return this.view.getUint32(4, true);
  }

  // 0x08: u32
  get StartVertexLocation(): number {
    return this.view.getUint32(8, true);
  }

  // 0x0c: u32
  get StartInstanceLocation(): number {
    return this.view.getUint32(12, true);
  }

  // 0x00: u32
  set VertexCountPerInstance(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: u32
  set InstanceCount(value: number) {
    this.view.setUint32(4, value, true);
  }

  // 0x08: u32
  set StartVertexLocation(value: number) {
    this.view.setUint32(8, value, true);
  }

  // 0x0c: u32
  set StartInstanceLocation(value: number) {
    this.view.setUint32(12, value, true);
  }
}

/**
 * Windows.Win32.Graphics.Direct3D11.D3D11_DRAW_INDEXED_INSTANCED_INDIRECT_ARGS (size: 24)
 */
export interface D3D11_DRAW_INDEXED_INSTANCED_INDIRECT_ARGS {
  /** u32 */
  IndexCountPerInstance: number;
  /** u32 */
  InstanceCount: number;
  /** u32 */
  StartIndexLocation: number;
  /** i32 */
  BaseVertexLocation: number;
  /** u32 */
  StartInstanceLocation: number;
}

export const sizeofD3D11_DRAW_INDEXED_INSTANCED_INDIRECT_ARGS = 24;

export function allocD3D11_DRAW_INDEXED_INSTANCED_INDIRECT_ARGS(data?: Partial<D3D11_DRAW_INDEXED_INSTANCED_INDIRECT_ARGS>): Uint8Array {
  const buf = new Uint8Array(sizeofD3D11_DRAW_INDEXED_INSTANCED_INDIRECT_ARGS);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.IndexCountPerInstance !== undefined) view.setUint32(0, Number(data.IndexCountPerInstance), true);
  // 0x04: u32
  if (data?.InstanceCount !== undefined) view.setUint32(4, Number(data.InstanceCount), true);
  // 0x08: u32
  if (data?.StartIndexLocation !== undefined) view.setUint32(8, Number(data.StartIndexLocation), true);
  // 0x0c: i32
  if (data?.BaseVertexLocation !== undefined) view.setInt32(12, Number(data.BaseVertexLocation), true);
  // 0x10: u32
  if (data?.StartInstanceLocation !== undefined) view.setUint32(16, Number(data.StartInstanceLocation), true);
  // 0x14: pad4
  return buf;
}

export class D3D11_DRAW_INDEXED_INSTANCED_INDIRECT_ARGSView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get IndexCountPerInstance(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: u32
  get InstanceCount(): number {
    return this.view.getUint32(4, true);
  }

  // 0x08: u32
  get StartIndexLocation(): number {
    return this.view.getUint32(8, true);
  }

  // 0x0c: i32
  get BaseVertexLocation(): number {
    return this.view.getInt32(12, true);
  }

  // 0x10: u32
  get StartInstanceLocation(): number {
    return this.view.getUint32(16, true);
  }

  // 0x14: pad4

  // 0x00: u32
  set IndexCountPerInstance(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: u32
  set InstanceCount(value: number) {
    this.view.setUint32(4, value, true);
  }

  // 0x08: u32
  set StartIndexLocation(value: number) {
    this.view.setUint32(8, value, true);
  }

  // 0x0c: i32
  set BaseVertexLocation(value: number) {
    this.view.setInt32(12, value, true);
  }

  // 0x10: u32
  set StartInstanceLocation(value: number) {
    this.view.setUint32(16, value, true);
  }

  // 0x14: pad4
}

/**
 * Windows.Win32.Graphics.Direct3D11.D3D11_BOX (size: 24)
 */
export interface D3D11_BOX {
  /** u32 */
  left: number;
  /** u32 */
  top: number;
  /** u32 */
  front: number;
  /** u32 */
  right: number;
  /** u32 */
  bottom: number;
  /** u32 */
  back: number;
}

export const sizeofD3D11_BOX = 24;

export function allocD3D11_BOX(data?: Partial<D3D11_BOX>): Uint8Array {
  const buf = new Uint8Array(sizeofD3D11_BOX);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.left !== undefined) view.setUint32(0, Number(data.left), true);
  // 0x04: u32
  if (data?.top !== undefined) view.setUint32(4, Number(data.top), true);
  // 0x08: u32
  if (data?.front !== undefined) view.setUint32(8, Number(data.front), true);
  // 0x0c: u32
  if (data?.right !== undefined) view.setUint32(12, Number(data.right), true);
  // 0x10: u32
  if (data?.bottom !== undefined) view.setUint32(16, Number(data.bottom), true);
  // 0x14: u32
  if (data?.back !== undefined) view.setUint32(20, Number(data.back), true);
  return buf;
}

export class D3D11_BOXView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get left(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: u32
  get top(): number {
    return this.view.getUint32(4, true);
  }

  // 0x08: u32
  get front(): number {
    return this.view.getUint32(8, true);
  }

  // 0x0c: u32
  get right(): number {
    return this.view.getUint32(12, true);
  }

  // 0x10: u32
  get bottom(): number {
    return this.view.getUint32(16, true);
  }

  // 0x14: u32
  get back(): number {
    return this.view.getUint32(20, true);
  }

  // 0x00: u32
  set left(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: u32
  set top(value: number) {
    this.view.setUint32(4, value, true);
  }

  // 0x08: u32
  set front(value: number) {
    this.view.setUint32(8, value, true);
  }

  // 0x0c: u32
  set right(value: number) {
    this.view.setUint32(12, value, true);
  }

  // 0x10: u32
  set bottom(value: number) {
    this.view.setUint32(16, value, true);
  }

  // 0x14: u32
  set back(value: number) {
    this.view.setUint32(20, value, true);
  }
}

/**
 * Windows.Win32.Graphics.Direct3D11.D3D11_DEPTH_STENCILOP_DESC (size: 16)
 */
export interface D3D11_DEPTH_STENCILOP_DESC {
  /** Windows.Win32.Graphics.Direct3D11.D3D11_STENCIL_OP */
  StencilFailOp: D3D11_STENCIL_OP;
  /** Windows.Win32.Graphics.Direct3D11.D3D11_STENCIL_OP */
  StencilDepthFailOp: D3D11_STENCIL_OP;
  /** Windows.Win32.Graphics.Direct3D11.D3D11_STENCIL_OP */
  StencilPassOp: D3D11_STENCIL_OP;
  /** Windows.Win32.Graphics.Direct3D11.D3D11_COMPARISON_FUNC */
  StencilFunc: D3D11_COMPARISON_FUNC;
}

export const sizeofD3D11_DEPTH_STENCILOP_DESC = 16;

export function allocD3D11_DEPTH_STENCILOP_DESC(data?: Partial<D3D11_DEPTH_STENCILOP_DESC>): Uint8Array {
  const buf = new Uint8Array(sizeofD3D11_DEPTH_STENCILOP_DESC);
  const view = new DataView(buf.buffer);
  // 0x00: i32
  if (data?.StencilFailOp !== undefined) view.setInt32(0, Number(data.StencilFailOp), true);
  // 0x04: i32
  if (data?.StencilDepthFailOp !== undefined) view.setInt32(4, Number(data.StencilDepthFailOp), true);
  // 0x08: i32
  if (data?.StencilPassOp !== undefined) view.setInt32(8, Number(data.StencilPassOp), true);
  // 0x0c: i32
  if (data?.StencilFunc !== undefined) view.setInt32(12, Number(data.StencilFunc), true);
  return buf;
}

export class D3D11_DEPTH_STENCILOP_DESCView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: i32
  get StencilFailOp(): number {
    return this.view.getInt32(0, true);
  }

  // 0x04: i32
  get StencilDepthFailOp(): number {
    return this.view.getInt32(4, true);
  }

  // 0x08: i32
  get StencilPassOp(): number {
    return this.view.getInt32(8, true);
  }

  // 0x0c: i32
  get StencilFunc(): number {
    return this.view.getInt32(12, true);
  }

  // 0x00: i32
  set StencilFailOp(value: number) {
    this.view.setInt32(0, value, true);
  }

  // 0x04: i32
  set StencilDepthFailOp(value: number) {
    this.view.setInt32(4, value, true);
  }

  // 0x08: i32
  set StencilPassOp(value: number) {
    this.view.setInt32(8, value, true);
  }

  // 0x0c: i32
  set StencilFunc(value: number) {
    this.view.setInt32(12, value, true);
  }
}

/**
 * Windows.Win32.Graphics.Direct3D11.D3D11_DEPTH_STENCIL_DESC (size: 40)
 */
export interface D3D11_DEPTH_STENCIL_DESC {
  /** Windows.Win32.Foundation.BOOL */
  DepthEnable: boolean;
  /** Windows.Win32.Graphics.Direct3D11.D3D11_DEPTH_WRITE_MASK */
  DepthWriteMask: D3D11_DEPTH_WRITE_MASK;
  /** Windows.Win32.Graphics.Direct3D11.D3D11_COMPARISON_FUNC */
  DepthFunc: D3D11_COMPARISON_FUNC;
  /** Windows.Win32.Foundation.BOOL */
  StencilEnable: boolean;
  /** u8 */
  StencilReadMask: number;
  /** u8 */
  StencilWriteMask: number;
  /** Windows.Win32.Graphics.Direct3D11.D3D11_DEPTH_STENCILOP_DESC */
  FrontFace: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Graphics.Direct3D11.D3D11_DEPTH_STENCILOP_DESC */
  BackFace: Uint8Array | Deno.PointerValue | null;
}

export const sizeofD3D11_DEPTH_STENCIL_DESC = 40;

export function allocD3D11_DEPTH_STENCIL_DESC(data?: Partial<D3D11_DEPTH_STENCIL_DESC>): Uint8Array {
  const buf = new Uint8Array(sizeofD3D11_DEPTH_STENCIL_DESC);
  const view = new DataView(buf.buffer);
  // 0x00: i32
  if (data?.DepthEnable !== undefined) view.setInt32(0, Number(data.DepthEnable), true);
  // 0x04: i32
  if (data?.DepthWriteMask !== undefined) view.setInt32(4, Number(data.DepthWriteMask), true);
  // 0x08: i32
  if (data?.DepthFunc !== undefined) view.setInt32(8, Number(data.DepthFunc), true);
  // 0x0c: i32
  if (data?.StencilEnable !== undefined) view.setInt32(12, Number(data.StencilEnable), true);
  // 0x10: u8
  if (data?.StencilReadMask !== undefined) view.setUint8(16, Number(data.StencilReadMask));
  // 0x11: u8
  if (data?.StencilWriteMask !== undefined) view.setUint8(17, Number(data.StencilWriteMask));
  // 0x12: pad6
  // 0x18: pointer
  if (data?.FrontFace !== undefined) view.setBigUint64(24, data.FrontFace === null ? 0n : util.toBigInt(util.toPointer(data.FrontFace)), true);
  // 0x20: pointer
  if (data?.BackFace !== undefined) view.setBigUint64(32, data.BackFace === null ? 0n : util.toBigInt(util.toPointer(data.BackFace)), true);
  return buf;
}

export class D3D11_DEPTH_STENCIL_DESCView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: i32
  get DepthEnable(): number {
    return this.view.getInt32(0, true);
  }

  // 0x04: i32
  get DepthWriteMask(): number {
    return this.view.getInt32(4, true);
  }

  // 0x08: i32
  get DepthFunc(): number {
    return this.view.getInt32(8, true);
  }

  // 0x0c: i32
  get StencilEnable(): number {
    return this.view.getInt32(12, true);
  }

  // 0x10: u8
  get StencilReadMask(): number {
    return this.view.getUint8(16);
  }

  // 0x11: u8
  get StencilWriteMask(): number {
    return this.view.getUint8(17);
  }

  // 0x12: pad6

  // 0x18: pointer
  get FrontFace(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(24, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x20: pointer
  get BackFace(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(32, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: i32
  set DepthEnable(value: number) {
    this.view.setInt32(0, value, true);
  }

  // 0x04: i32
  set DepthWriteMask(value: number) {
    this.view.setInt32(4, value, true);
  }

  // 0x08: i32
  set DepthFunc(value: number) {
    this.view.setInt32(8, value, true);
  }

  // 0x0c: i32
  set StencilEnable(value: number) {
    this.view.setInt32(12, value, true);
  }

  // 0x10: u8
  set StencilReadMask(value: number) {
    this.view.setUint8(16, value);
  }

  // 0x11: u8
  set StencilWriteMask(value: number) {
    this.view.setUint8(17, value);
  }

  // 0x12: pad6

  // 0x18: pointer
  set FrontFace(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(24, util.toBigInt(util.toPointer(value)), true);
  }

  // 0x20: pointer
  set BackFace(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(32, util.toBigInt(util.toPointer(value)), true);
  }
}

/**
 * Windows.Win32.Graphics.Direct3D11.D3D11_RENDER_TARGET_BLEND_DESC (size: 32)
 */
export interface D3D11_RENDER_TARGET_BLEND_DESC {
  /** Windows.Win32.Foundation.BOOL */
  BlendEnable: boolean;
  /** Windows.Win32.Graphics.Direct3D11.D3D11_BLEND */
  SrcBlend: D3D11_BLEND;
  /** Windows.Win32.Graphics.Direct3D11.D3D11_BLEND */
  DestBlend: D3D11_BLEND;
  /** Windows.Win32.Graphics.Direct3D11.D3D11_BLEND_OP */
  BlendOp: D3D11_BLEND_OP;
  /** Windows.Win32.Graphics.Direct3D11.D3D11_BLEND */
  SrcBlendAlpha: D3D11_BLEND;
  /** Windows.Win32.Graphics.Direct3D11.D3D11_BLEND */
  DestBlendAlpha: D3D11_BLEND;
  /** Windows.Win32.Graphics.Direct3D11.D3D11_BLEND_OP */
  BlendOpAlpha: D3D11_BLEND_OP;
  /** u8 */
  RenderTargetWriteMask: number;
}

export const sizeofD3D11_RENDER_TARGET_BLEND_DESC = 32;

export function allocD3D11_RENDER_TARGET_BLEND_DESC(data?: Partial<D3D11_RENDER_TARGET_BLEND_DESC>): Uint8Array {
  const buf = new Uint8Array(sizeofD3D11_RENDER_TARGET_BLEND_DESC);
  const view = new DataView(buf.buffer);
  // 0x00: i32
  if (data?.BlendEnable !== undefined) view.setInt32(0, Number(data.BlendEnable), true);
  // 0x04: i32
  if (data?.SrcBlend !== undefined) view.setInt32(4, Number(data.SrcBlend), true);
  // 0x08: i32
  if (data?.DestBlend !== undefined) view.setInt32(8, Number(data.DestBlend), true);
  // 0x0c: i32
  if (data?.BlendOp !== undefined) view.setInt32(12, Number(data.BlendOp), true);
  // 0x10: i32
  if (data?.SrcBlendAlpha !== undefined) view.setInt32(16, Number(data.SrcBlendAlpha), true);
  // 0x14: i32
  if (data?.DestBlendAlpha !== undefined) view.setInt32(20, Number(data.DestBlendAlpha), true);
  // 0x18: i32
  if (data?.BlendOpAlpha !== undefined) view.setInt32(24, Number(data.BlendOpAlpha), true);
  // 0x1c: u8
  if (data?.RenderTargetWriteMask !== undefined) view.setUint8(28, Number(data.RenderTargetWriteMask));
  // 0x1d: pad3
  return buf;
}

export class D3D11_RENDER_TARGET_BLEND_DESCView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: i32
  get BlendEnable(): number {
    return this.view.getInt32(0, true);
  }

  // 0x04: i32
  get SrcBlend(): number {
    return this.view.getInt32(4, true);
  }

  // 0x08: i32
  get DestBlend(): number {
    return this.view.getInt32(8, true);
  }

  // 0x0c: i32
  get BlendOp(): number {
    return this.view.getInt32(12, true);
  }

  // 0x10: i32
  get SrcBlendAlpha(): number {
    return this.view.getInt32(16, true);
  }

  // 0x14: i32
  get DestBlendAlpha(): number {
    return this.view.getInt32(20, true);
  }

  // 0x18: i32
  get BlendOpAlpha(): number {
    return this.view.getInt32(24, true);
  }

  // 0x1c: u8
  get RenderTargetWriteMask(): number {
    return this.view.getUint8(28);
  }

  // 0x1d: pad3

  // 0x00: i32
  set BlendEnable(value: number) {
    this.view.setInt32(0, value, true);
  }

  // 0x04: i32
  set SrcBlend(value: number) {
    this.view.setInt32(4, value, true);
  }

  // 0x08: i32
  set DestBlend(value: number) {
    this.view.setInt32(8, value, true);
  }

  // 0x0c: i32
  set BlendOp(value: number) {
    this.view.setInt32(12, value, true);
  }

  // 0x10: i32
  set SrcBlendAlpha(value: number) {
    this.view.setInt32(16, value, true);
  }

  // 0x14: i32
  set DestBlendAlpha(value: number) {
    this.view.setInt32(20, value, true);
  }

  // 0x18: i32
  set BlendOpAlpha(value: number) {
    this.view.setInt32(24, value, true);
  }

  // 0x1c: u8
  set RenderTargetWriteMask(value: number) {
    this.view.setUint8(28, value);
  }

  // 0x1d: pad3
}

/**
 * Windows.Win32.Graphics.Direct3D11.D3D11_BLEND_DESC (size: 16)
 */
export interface D3D11_BLEND_DESC {
  /** Windows.Win32.Foundation.BOOL */
  AlphaToCoverageEnable: boolean;
  /** Windows.Win32.Foundation.BOOL */
  IndependentBlendEnable: boolean;
  /** array */
  RenderTarget: Deno.PointerValue | null;
}

export const sizeofD3D11_BLEND_DESC = 16;

export function allocD3D11_BLEND_DESC(data?: Partial<D3D11_BLEND_DESC>): Uint8Array {
  const buf = new Uint8Array(sizeofD3D11_BLEND_DESC);
  const view = new DataView(buf.buffer);
  // 0x00: i32
  if (data?.AlphaToCoverageEnable !== undefined) view.setInt32(0, Number(data.AlphaToCoverageEnable), true);
  // 0x04: i32
  if (data?.IndependentBlendEnable !== undefined) view.setInt32(4, Number(data.IndependentBlendEnable), true);
  // 0x08: pointer
  if (data?.RenderTarget !== undefined) view.setBigUint64(8, data.RenderTarget === null ? 0n : util.toBigInt(util.toPointer(data.RenderTarget)), true);
  return buf;
}

export class D3D11_BLEND_DESCView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: i32
  get AlphaToCoverageEnable(): number {
    return this.view.getInt32(0, true);
  }

  // 0x04: i32
  get IndependentBlendEnable(): number {
    return this.view.getInt32(4, true);
  }

  // 0x08: pointer
  get RenderTarget(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(8, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: i32
  set AlphaToCoverageEnable(value: number) {
    this.view.setInt32(0, value, true);
  }

  // 0x04: i32
  set IndependentBlendEnable(value: number) {
    this.view.setInt32(4, value, true);
  }

  // 0x08: pointer
  set RenderTarget(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(8, util.toBigInt(util.toPointer(value)), true);
  }
}

/**
 * Windows.Win32.Graphics.Direct3D11.D3D11_RASTERIZER_DESC (size: 40)
 */
export interface D3D11_RASTERIZER_DESC {
  /** Windows.Win32.Graphics.Direct3D11.D3D11_FILL_MODE */
  FillMode: D3D11_FILL_MODE;
  /** Windows.Win32.Graphics.Direct3D11.D3D11_CULL_MODE */
  CullMode: D3D11_CULL_MODE;
  /** Windows.Win32.Foundation.BOOL */
  FrontCounterClockwise: boolean;
  /** i32 */
  DepthBias: number;
  /** f32 */
  DepthBiasClamp: number;
  /** f32 */
  SlopeScaledDepthBias: number;
  /** Windows.Win32.Foundation.BOOL */
  DepthClipEnable: boolean;
  /** Windows.Win32.Foundation.BOOL */
  ScissorEnable: boolean;
  /** Windows.Win32.Foundation.BOOL */
  MultisampleEnable: boolean;
  /** Windows.Win32.Foundation.BOOL */
  AntialiasedLineEnable: boolean;
}

export const sizeofD3D11_RASTERIZER_DESC = 40;

export function allocD3D11_RASTERIZER_DESC(data?: Partial<D3D11_RASTERIZER_DESC>): Uint8Array {
  const buf = new Uint8Array(sizeofD3D11_RASTERIZER_DESC);
  const view = new DataView(buf.buffer);
  // 0x00: i32
  if (data?.FillMode !== undefined) view.setInt32(0, Number(data.FillMode), true);
  // 0x04: i32
  if (data?.CullMode !== undefined) view.setInt32(4, Number(data.CullMode), true);
  // 0x08: i32
  if (data?.FrontCounterClockwise !== undefined) view.setInt32(8, Number(data.FrontCounterClockwise), true);
  // 0x0c: i32
  if (data?.DepthBias !== undefined) view.setInt32(12, Number(data.DepthBias), true);
  // 0x10: f32
  if (data?.DepthBiasClamp !== undefined) view.setFloat32(16, Number(data.DepthBiasClamp), true);
  // 0x14: f32
  if (data?.SlopeScaledDepthBias !== undefined) view.setFloat32(20, Number(data.SlopeScaledDepthBias), true);
  // 0x18: i32
  if (data?.DepthClipEnable !== undefined) view.setInt32(24, Number(data.DepthClipEnable), true);
  // 0x1c: i32
  if (data?.ScissorEnable !== undefined) view.setInt32(28, Number(data.ScissorEnable), true);
  // 0x20: i32
  if (data?.MultisampleEnable !== undefined) view.setInt32(32, Number(data.MultisampleEnable), true);
  // 0x24: i32
  if (data?.AntialiasedLineEnable !== undefined) view.setInt32(36, Number(data.AntialiasedLineEnable), true);
  return buf;
}

export class D3D11_RASTERIZER_DESCView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: i32
  get FillMode(): number {
    return this.view.getInt32(0, true);
  }

  // 0x04: i32
  get CullMode(): number {
    return this.view.getInt32(4, true);
  }

  // 0x08: i32
  get FrontCounterClockwise(): number {
    return this.view.getInt32(8, true);
  }

  // 0x0c: i32
  get DepthBias(): number {
    return this.view.getInt32(12, true);
  }

  // 0x10: f32
  get DepthBiasClamp(): number {
    return this.view.getFloat32(16, true);
  }

  // 0x14: f32
  get SlopeScaledDepthBias(): number {
    return this.view.getFloat32(20, true);
  }

  // 0x18: i32
  get DepthClipEnable(): number {
    return this.view.getInt32(24, true);
  }

  // 0x1c: i32
  get ScissorEnable(): number {
    return this.view.getInt32(28, true);
  }

  // 0x20: i32
  get MultisampleEnable(): number {
    return this.view.getInt32(32, true);
  }

  // 0x24: i32
  get AntialiasedLineEnable(): number {
    return this.view.getInt32(36, true);
  }

  // 0x00: i32
  set FillMode(value: number) {
    this.view.setInt32(0, value, true);
  }

  // 0x04: i32
  set CullMode(value: number) {
    this.view.setInt32(4, value, true);
  }

  // 0x08: i32
  set FrontCounterClockwise(value: number) {
    this.view.setInt32(8, value, true);
  }

  // 0x0c: i32
  set DepthBias(value: number) {
    this.view.setInt32(12, value, true);
  }

  // 0x10: f32
  set DepthBiasClamp(value: number) {
    this.view.setFloat32(16, value, true);
  }

  // 0x14: f32
  set SlopeScaledDepthBias(value: number) {
    this.view.setFloat32(20, value, true);
  }

  // 0x18: i32
  set DepthClipEnable(value: number) {
    this.view.setInt32(24, value, true);
  }

  // 0x1c: i32
  set ScissorEnable(value: number) {
    this.view.setInt32(28, value, true);
  }

  // 0x20: i32
  set MultisampleEnable(value: number) {
    this.view.setInt32(32, value, true);
  }

  // 0x24: i32
  set AntialiasedLineEnable(value: number) {
    this.view.setInt32(36, value, true);
  }
}

/**
 * Windows.Win32.Graphics.Direct3D11.D3D11_SUBRESOURCE_DATA (size: 16)
 */
export interface D3D11_SUBRESOURCE_DATA {
  /** ptr */
  pSysMem: Deno.PointerValue | Uint8Array | null;
  /** u32 */
  SysMemPitch: number;
  /** u32 */
  SysMemSlicePitch: number;
}

export const sizeofD3D11_SUBRESOURCE_DATA = 16;

export function allocD3D11_SUBRESOURCE_DATA(data?: Partial<D3D11_SUBRESOURCE_DATA>): Uint8Array {
  const buf = new Uint8Array(sizeofD3D11_SUBRESOURCE_DATA);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.pSysMem !== undefined) view.setBigUint64(0, data.pSysMem === null ? 0n : util.toBigInt(util.toPointer(data.pSysMem)), true);
  // 0x08: u32
  if (data?.SysMemPitch !== undefined) view.setUint32(8, Number(data.SysMemPitch), true);
  // 0x0c: u32
  if (data?.SysMemSlicePitch !== undefined) view.setUint32(12, Number(data.SysMemSlicePitch), true);
  return buf;
}

export class D3D11_SUBRESOURCE_DATAView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get pSysMem(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(0, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x08: u32
  get SysMemPitch(): number {
    return this.view.getUint32(8, true);
  }

  // 0x0c: u32
  get SysMemSlicePitch(): number {
    return this.view.getUint32(12, true);
  }

  // 0x00: pointer
  set pSysMem(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(0, util.toBigInt(util.toPointer(value)), true);
  }

  // 0x08: u32
  set SysMemPitch(value: number) {
    this.view.setUint32(8, value, true);
  }

  // 0x0c: u32
  set SysMemSlicePitch(value: number) {
    this.view.setUint32(12, value, true);
  }
}

/**
 * Windows.Win32.Graphics.Direct3D11.D3D11_MAPPED_SUBRESOURCE (size: 16)
 */
export interface D3D11_MAPPED_SUBRESOURCE {
  /** ptr */
  pData: Deno.PointerValue | Uint8Array | null;
  /** u32 */
  RowPitch: number;
  /** u32 */
  DepthPitch: number;
}

export const sizeofD3D11_MAPPED_SUBRESOURCE = 16;

export function allocD3D11_MAPPED_SUBRESOURCE(data?: Partial<D3D11_MAPPED_SUBRESOURCE>): Uint8Array {
  const buf = new Uint8Array(sizeofD3D11_MAPPED_SUBRESOURCE);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.pData !== undefined) view.setBigUint64(0, data.pData === null ? 0n : util.toBigInt(util.toPointer(data.pData)), true);
  // 0x08: u32
  if (data?.RowPitch !== undefined) view.setUint32(8, Number(data.RowPitch), true);
  // 0x0c: u32
  if (data?.DepthPitch !== undefined) view.setUint32(12, Number(data.DepthPitch), true);
  return buf;
}

export class D3D11_MAPPED_SUBRESOURCEView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get pData(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(0, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x08: u32
  get RowPitch(): number {
    return this.view.getUint32(8, true);
  }

  // 0x0c: u32
  get DepthPitch(): number {
    return this.view.getUint32(12, true);
  }

  // 0x00: pointer
  set pData(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(0, util.toBigInt(util.toPointer(value)), true);
  }

  // 0x08: u32
  set RowPitch(value: number) {
    this.view.setUint32(8, value, true);
  }

  // 0x0c: u32
  set DepthPitch(value: number) {
    this.view.setUint32(12, value, true);
  }
}

/**
 * Windows.Win32.Graphics.Direct3D11.D3D11_BUFFER_DESC (size: 24)
 */
export interface D3D11_BUFFER_DESC {
  /** u32 */
  ByteWidth: number;
  /** Windows.Win32.Graphics.Direct3D11.D3D11_USAGE */
  Usage: D3D11_USAGE;
  /** Windows.Win32.Graphics.Direct3D11.D3D11_BIND_FLAG */
  BindFlags: D3D11_BIND_FLAG;
  /** Windows.Win32.Graphics.Direct3D11.D3D11_CPU_ACCESS_FLAG */
  CPUAccessFlags: D3D11_CPU_ACCESS_FLAG;
  /** Windows.Win32.Graphics.Direct3D11.D3D11_RESOURCE_MISC_FLAG */
  MiscFlags: D3D11_RESOURCE_MISC_FLAG;
  /** u32 */
  StructureByteStride: number;
}

export const sizeofD3D11_BUFFER_DESC = 24;

export function allocD3D11_BUFFER_DESC(data?: Partial<D3D11_BUFFER_DESC>): Uint8Array {
  const buf = new Uint8Array(sizeofD3D11_BUFFER_DESC);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.ByteWidth !== undefined) view.setUint32(0, Number(data.ByteWidth), true);
  // 0x04: i32
  if (data?.Usage !== undefined) view.setInt32(4, Number(data.Usage), true);
  // 0x08: u32
  if (data?.BindFlags !== undefined) view.setUint32(8, Number(data.BindFlags), true);
  // 0x0c: u32
  if (data?.CPUAccessFlags !== undefined) view.setUint32(12, Number(data.CPUAccessFlags), true);
  // 0x10: u32
  if (data?.MiscFlags !== undefined) view.setUint32(16, Number(data.MiscFlags), true);
  // 0x14: u32
  if (data?.StructureByteStride !== undefined) view.setUint32(20, Number(data.StructureByteStride), true);
  return buf;
}

export class D3D11_BUFFER_DESCView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get ByteWidth(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: i32
  get Usage(): number {
    return this.view.getInt32(4, true);
  }

  // 0x08: u32
  get BindFlags(): number {
    return this.view.getUint32(8, true);
  }

  // 0x0c: u32
  get CPUAccessFlags(): number {
    return this.view.getUint32(12, true);
  }

  // 0x10: u32
  get MiscFlags(): number {
    return this.view.getUint32(16, true);
  }

  // 0x14: u32
  get StructureByteStride(): number {
    return this.view.getUint32(20, true);
  }

  // 0x00: u32
  set ByteWidth(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: i32
  set Usage(value: number) {
    this.view.setInt32(4, value, true);
  }

  // 0x08: u32
  set BindFlags(value: number) {
    this.view.setUint32(8, value, true);
  }

  // 0x0c: u32
  set CPUAccessFlags(value: number) {
    this.view.setUint32(12, value, true);
  }

  // 0x10: u32
  set MiscFlags(value: number) {
    this.view.setUint32(16, value, true);
  }

  // 0x14: u32
  set StructureByteStride(value: number) {
    this.view.setUint32(20, value, true);
  }
}

/**
 * Windows.Win32.Graphics.Direct3D11.D3D11_TEXTURE1D_DESC (size: 32)
 */
export interface D3D11_TEXTURE1D_DESC {
  /** u32 */
  Width: number;
  /** u32 */
  MipLevels: number;
  /** u32 */
  ArraySize: number;
  /** Windows.Win32.Graphics.Dxgi.Common.DXGI_FORMAT */
  Format: DXGI_FORMAT;
  /** Windows.Win32.Graphics.Direct3D11.D3D11_USAGE */
  Usage: D3D11_USAGE;
  /** Windows.Win32.Graphics.Direct3D11.D3D11_BIND_FLAG */
  BindFlags: D3D11_BIND_FLAG;
  /** Windows.Win32.Graphics.Direct3D11.D3D11_CPU_ACCESS_FLAG */
  CPUAccessFlags: D3D11_CPU_ACCESS_FLAG;
  /** Windows.Win32.Graphics.Direct3D11.D3D11_RESOURCE_MISC_FLAG */
  MiscFlags: D3D11_RESOURCE_MISC_FLAG;
}

export const sizeofD3D11_TEXTURE1D_DESC = 32;

export function allocD3D11_TEXTURE1D_DESC(data?: Partial<D3D11_TEXTURE1D_DESC>): Uint8Array {
  const buf = new Uint8Array(sizeofD3D11_TEXTURE1D_DESC);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.Width !== undefined) view.setUint32(0, Number(data.Width), true);
  // 0x04: u32
  if (data?.MipLevels !== undefined) view.setUint32(4, Number(data.MipLevels), true);
  // 0x08: u32
  if (data?.ArraySize !== undefined) view.setUint32(8, Number(data.ArraySize), true);
  // 0x0c: u32
  if (data?.Format !== undefined) view.setUint32(12, Number(data.Format), true);
  // 0x10: i32
  if (data?.Usage !== undefined) view.setInt32(16, Number(data.Usage), true);
  // 0x14: u32
  if (data?.BindFlags !== undefined) view.setUint32(20, Number(data.BindFlags), true);
  // 0x18: u32
  if (data?.CPUAccessFlags !== undefined) view.setUint32(24, Number(data.CPUAccessFlags), true);
  // 0x1c: u32
  if (data?.MiscFlags !== undefined) view.setUint32(28, Number(data.MiscFlags), true);
  return buf;
}

export class D3D11_TEXTURE1D_DESCView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get Width(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: u32
  get MipLevels(): number {
    return this.view.getUint32(4, true);
  }

  // 0x08: u32
  get ArraySize(): number {
    return this.view.getUint32(8, true);
  }

  // 0x0c: u32
  get Format(): number {
    return this.view.getUint32(12, true);
  }

  // 0x10: i32
  get Usage(): number {
    return this.view.getInt32(16, true);
  }

  // 0x14: u32
  get BindFlags(): number {
    return this.view.getUint32(20, true);
  }

  // 0x18: u32
  get CPUAccessFlags(): number {
    return this.view.getUint32(24, true);
  }

  // 0x1c: u32
  get MiscFlags(): number {
    return this.view.getUint32(28, true);
  }

  // 0x00: u32
  set Width(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: u32
  set MipLevels(value: number) {
    this.view.setUint32(4, value, true);
  }

  // 0x08: u32
  set ArraySize(value: number) {
    this.view.setUint32(8, value, true);
  }

  // 0x0c: u32
  set Format(value: number) {
    this.view.setUint32(12, value, true);
  }

  // 0x10: i32
  set Usage(value: number) {
    this.view.setInt32(16, value, true);
  }

  // 0x14: u32
  set BindFlags(value: number) {
    this.view.setUint32(20, value, true);
  }

  // 0x18: u32
  set CPUAccessFlags(value: number) {
    this.view.setUint32(24, value, true);
  }

  // 0x1c: u32
  set MiscFlags(value: number) {
    this.view.setUint32(28, value, true);
  }
}

/**
 * Windows.Win32.Graphics.Direct3D11.D3D11_TEXTURE2D_DESC (size: 48)
 */
export interface D3D11_TEXTURE2D_DESC {
  /** u32 */
  Width: number;
  /** u32 */
  Height: number;
  /** u32 */
  MipLevels: number;
  /** u32 */
  ArraySize: number;
  /** Windows.Win32.Graphics.Dxgi.Common.DXGI_FORMAT */
  Format: DXGI_FORMAT;
  /** Windows.Win32.Graphics.Dxgi.Common.DXGI_SAMPLE_DESC */
  SampleDesc: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Graphics.Direct3D11.D3D11_USAGE */
  Usage: D3D11_USAGE;
  /** Windows.Win32.Graphics.Direct3D11.D3D11_BIND_FLAG */
  BindFlags: D3D11_BIND_FLAG;
  /** Windows.Win32.Graphics.Direct3D11.D3D11_CPU_ACCESS_FLAG */
  CPUAccessFlags: D3D11_CPU_ACCESS_FLAG;
  /** Windows.Win32.Graphics.Direct3D11.D3D11_RESOURCE_MISC_FLAG */
  MiscFlags: D3D11_RESOURCE_MISC_FLAG;
}

export const sizeofD3D11_TEXTURE2D_DESC = 48;

export function allocD3D11_TEXTURE2D_DESC(data?: Partial<D3D11_TEXTURE2D_DESC>): Uint8Array {
  const buf = new Uint8Array(sizeofD3D11_TEXTURE2D_DESC);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.Width !== undefined) view.setUint32(0, Number(data.Width), true);
  // 0x04: u32
  if (data?.Height !== undefined) view.setUint32(4, Number(data.Height), true);
  // 0x08: u32
  if (data?.MipLevels !== undefined) view.setUint32(8, Number(data.MipLevels), true);
  // 0x0c: u32
  if (data?.ArraySize !== undefined) view.setUint32(12, Number(data.ArraySize), true);
  // 0x10: u32
  if (data?.Format !== undefined) view.setUint32(16, Number(data.Format), true);
  // 0x14: pad4
  // 0x18: pointer
  if (data?.SampleDesc !== undefined) view.setBigUint64(24, data.SampleDesc === null ? 0n : util.toBigInt(util.toPointer(data.SampleDesc)), true);
  // 0x20: i32
  if (data?.Usage !== undefined) view.setInt32(32, Number(data.Usage), true);
  // 0x24: u32
  if (data?.BindFlags !== undefined) view.setUint32(36, Number(data.BindFlags), true);
  // 0x28: u32
  if (data?.CPUAccessFlags !== undefined) view.setUint32(40, Number(data.CPUAccessFlags), true);
  // 0x2c: u32
  if (data?.MiscFlags !== undefined) view.setUint32(44, Number(data.MiscFlags), true);
  return buf;
}

export class D3D11_TEXTURE2D_DESCView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get Width(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: u32
  get Height(): number {
    return this.view.getUint32(4, true);
  }

  // 0x08: u32
  get MipLevels(): number {
    return this.view.getUint32(8, true);
  }

  // 0x0c: u32
  get ArraySize(): number {
    return this.view.getUint32(12, true);
  }

  // 0x10: u32
  get Format(): number {
    return this.view.getUint32(16, true);
  }

  // 0x14: pad4

  // 0x18: pointer
  get SampleDesc(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(24, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x20: i32
  get Usage(): number {
    return this.view.getInt32(32, true);
  }

  // 0x24: u32
  get BindFlags(): number {
    return this.view.getUint32(36, true);
  }

  // 0x28: u32
  get CPUAccessFlags(): number {
    return this.view.getUint32(40, true);
  }

  // 0x2c: u32
  get MiscFlags(): number {
    return this.view.getUint32(44, true);
  }

  // 0x00: u32
  set Width(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: u32
  set Height(value: number) {
    this.view.setUint32(4, value, true);
  }

  // 0x08: u32
  set MipLevels(value: number) {
    this.view.setUint32(8, value, true);
  }

  // 0x0c: u32
  set ArraySize(value: number) {
    this.view.setUint32(12, value, true);
  }

  // 0x10: u32
  set Format(value: number) {
    this.view.setUint32(16, value, true);
  }

  // 0x14: pad4

  // 0x18: pointer
  set SampleDesc(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(24, util.toBigInt(util.toPointer(value)), true);
  }

  // 0x20: i32
  set Usage(value: number) {
    this.view.setInt32(32, value, true);
  }

  // 0x24: u32
  set BindFlags(value: number) {
    this.view.setUint32(36, value, true);
  }

  // 0x28: u32
  set CPUAccessFlags(value: number) {
    this.view.setUint32(40, value, true);
  }

  // 0x2c: u32
  set MiscFlags(value: number) {
    this.view.setUint32(44, value, true);
  }
}

/**
 * Windows.Win32.Graphics.Direct3D11.D3D11_TEXTURE3D_DESC (size: 40)
 */
export interface D3D11_TEXTURE3D_DESC {
  /** u32 */
  Width: number;
  /** u32 */
  Height: number;
  /** u32 */
  Depth: number;
  /** u32 */
  MipLevels: number;
  /** Windows.Win32.Graphics.Dxgi.Common.DXGI_FORMAT */
  Format: DXGI_FORMAT;
  /** Windows.Win32.Graphics.Direct3D11.D3D11_USAGE */
  Usage: D3D11_USAGE;
  /** Windows.Win32.Graphics.Direct3D11.D3D11_BIND_FLAG */
  BindFlags: D3D11_BIND_FLAG;
  /** Windows.Win32.Graphics.Direct3D11.D3D11_CPU_ACCESS_FLAG */
  CPUAccessFlags: D3D11_CPU_ACCESS_FLAG;
  /** Windows.Win32.Graphics.Direct3D11.D3D11_RESOURCE_MISC_FLAG */
  MiscFlags: D3D11_RESOURCE_MISC_FLAG;
}

export const sizeofD3D11_TEXTURE3D_DESC = 40;

export function allocD3D11_TEXTURE3D_DESC(data?: Partial<D3D11_TEXTURE3D_DESC>): Uint8Array {
  const buf = new Uint8Array(sizeofD3D11_TEXTURE3D_DESC);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.Width !== undefined) view.setUint32(0, Number(data.Width), true);
  // 0x04: u32
  if (data?.Height !== undefined) view.setUint32(4, Number(data.Height), true);
  // 0x08: u32
  if (data?.Depth !== undefined) view.setUint32(8, Number(data.Depth), true);
  // 0x0c: u32
  if (data?.MipLevels !== undefined) view.setUint32(12, Number(data.MipLevels), true);
  // 0x10: u32
  if (data?.Format !== undefined) view.setUint32(16, Number(data.Format), true);
  // 0x14: i32
  if (data?.Usage !== undefined) view.setInt32(20, Number(data.Usage), true);
  // 0x18: u32
  if (data?.BindFlags !== undefined) view.setUint32(24, Number(data.BindFlags), true);
  // 0x1c: u32
  if (data?.CPUAccessFlags !== undefined) view.setUint32(28, Number(data.CPUAccessFlags), true);
  // 0x20: u32
  if (data?.MiscFlags !== undefined) view.setUint32(32, Number(data.MiscFlags), true);
  // 0x24: pad4
  return buf;
}

export class D3D11_TEXTURE3D_DESCView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get Width(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: u32
  get Height(): number {
    return this.view.getUint32(4, true);
  }

  // 0x08: u32
  get Depth(): number {
    return this.view.getUint32(8, true);
  }

  // 0x0c: u32
  get MipLevels(): number {
    return this.view.getUint32(12, true);
  }

  // 0x10: u32
  get Format(): number {
    return this.view.getUint32(16, true);
  }

  // 0x14: i32
  get Usage(): number {
    return this.view.getInt32(20, true);
  }

  // 0x18: u32
  get BindFlags(): number {
    return this.view.getUint32(24, true);
  }

  // 0x1c: u32
  get CPUAccessFlags(): number {
    return this.view.getUint32(28, true);
  }

  // 0x20: u32
  get MiscFlags(): number {
    return this.view.getUint32(32, true);
  }

  // 0x24: pad4

  // 0x00: u32
  set Width(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: u32
  set Height(value: number) {
    this.view.setUint32(4, value, true);
  }

  // 0x08: u32
  set Depth(value: number) {
    this.view.setUint32(8, value, true);
  }

  // 0x0c: u32
  set MipLevels(value: number) {
    this.view.setUint32(12, value, true);
  }

  // 0x10: u32
  set Format(value: number) {
    this.view.setUint32(16, value, true);
  }

  // 0x14: i32
  set Usage(value: number) {
    this.view.setInt32(20, value, true);
  }

  // 0x18: u32
  set BindFlags(value: number) {
    this.view.setUint32(24, value, true);
  }

  // 0x1c: u32
  set CPUAccessFlags(value: number) {
    this.view.setUint32(28, value, true);
  }

  // 0x20: u32
  set MiscFlags(value: number) {
    this.view.setUint32(32, value, true);
  }

  // 0x24: pad4
}

/**
 * Windows.Win32.Graphics.Direct3D11.D3D11_BUFFER_SRV (size: 16)
 */
export interface D3D11_BUFFER_SRV {
  /** _Anonymous1_e__Union */
  Anonymous1: Uint8Array | Deno.PointerValue | null;
  /** _Anonymous2_e__Union */
  Anonymous2: Uint8Array | Deno.PointerValue | null;
}

export const sizeofD3D11_BUFFER_SRV = 16;

export function allocD3D11_BUFFER_SRV(data?: Partial<D3D11_BUFFER_SRV>): Uint8Array {
  const buf = new Uint8Array(sizeofD3D11_BUFFER_SRV);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.Anonymous1 !== undefined) view.setBigUint64(0, data.Anonymous1 === null ? 0n : util.toBigInt(util.toPointer(data.Anonymous1)), true);
  // 0x08: pointer
  if (data?.Anonymous2 !== undefined) view.setBigUint64(8, data.Anonymous2 === null ? 0n : util.toBigInt(util.toPointer(data.Anonymous2)), true);
  return buf;
}

export class D3D11_BUFFER_SRVView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get Anonymous1(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(0, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x08: pointer
  get Anonymous2(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(8, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: pointer
  set Anonymous1(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(0, util.toBigInt(util.toPointer(value)), true);
  }

  // 0x08: pointer
  set Anonymous2(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(8, util.toBigInt(util.toPointer(value)), true);
  }
}

/**
 * Windows.Win32.Graphics.Direct3D11.D3D11_BUFFEREX_SRV (size: 16)
 */
export interface D3D11_BUFFEREX_SRV {
  /** u32 */
  FirstElement: number;
  /** u32 */
  NumElements: number;
  /** u32 */
  Flags: number;
}

export const sizeofD3D11_BUFFEREX_SRV = 16;

export function allocD3D11_BUFFEREX_SRV(data?: Partial<D3D11_BUFFEREX_SRV>): Uint8Array {
  const buf = new Uint8Array(sizeofD3D11_BUFFEREX_SRV);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.FirstElement !== undefined) view.setUint32(0, Number(data.FirstElement), true);
  // 0x04: u32
  if (data?.NumElements !== undefined) view.setUint32(4, Number(data.NumElements), true);
  // 0x08: u32
  if (data?.Flags !== undefined) view.setUint32(8, Number(data.Flags), true);
  // 0x0c: pad4
  return buf;
}

export class D3D11_BUFFEREX_SRVView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get FirstElement(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: u32
  get NumElements(): number {
    return this.view.getUint32(4, true);
  }

  // 0x08: u32
  get Flags(): number {
    return this.view.getUint32(8, true);
  }

  // 0x0c: pad4

  // 0x00: u32
  set FirstElement(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: u32
  set NumElements(value: number) {
    this.view.setUint32(4, value, true);
  }

  // 0x08: u32
  set Flags(value: number) {
    this.view.setUint32(8, value, true);
  }

  // 0x0c: pad4
}

/**
 * Windows.Win32.Graphics.Direct3D11.D3D11_TEX1D_SRV (size: 8)
 */
export interface D3D11_TEX1D_SRV {
  /** u32 */
  MostDetailedMip: number;
  /** u32 */
  MipLevels: number;
}

export const sizeofD3D11_TEX1D_SRV = 8;

export function allocD3D11_TEX1D_SRV(data?: Partial<D3D11_TEX1D_SRV>): Uint8Array {
  const buf = new Uint8Array(sizeofD3D11_TEX1D_SRV);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.MostDetailedMip !== undefined) view.setUint32(0, Number(data.MostDetailedMip), true);
  // 0x04: u32
  if (data?.MipLevels !== undefined) view.setUint32(4, Number(data.MipLevels), true);
  return buf;
}

export class D3D11_TEX1D_SRVView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get MostDetailedMip(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: u32
  get MipLevels(): number {
    return this.view.getUint32(4, true);
  }

  // 0x00: u32
  set MostDetailedMip(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: u32
  set MipLevels(value: number) {
    this.view.setUint32(4, value, true);
  }
}

/**
 * Windows.Win32.Graphics.Direct3D11.D3D11_TEX1D_ARRAY_SRV (size: 16)
 */
export interface D3D11_TEX1D_ARRAY_SRV {
  /** u32 */
  MostDetailedMip: number;
  /** u32 */
  MipLevels: number;
  /** u32 */
  FirstArraySlice: number;
  /** u32 */
  ArraySize: number;
}

export const sizeofD3D11_TEX1D_ARRAY_SRV = 16;

export function allocD3D11_TEX1D_ARRAY_SRV(data?: Partial<D3D11_TEX1D_ARRAY_SRV>): Uint8Array {
  const buf = new Uint8Array(sizeofD3D11_TEX1D_ARRAY_SRV);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.MostDetailedMip !== undefined) view.setUint32(0, Number(data.MostDetailedMip), true);
  // 0x04: u32
  if (data?.MipLevels !== undefined) view.setUint32(4, Number(data.MipLevels), true);
  // 0x08: u32
  if (data?.FirstArraySlice !== undefined) view.setUint32(8, Number(data.FirstArraySlice), true);
  // 0x0c: u32
  if (data?.ArraySize !== undefined) view.setUint32(12, Number(data.ArraySize), true);
  return buf;
}

export class D3D11_TEX1D_ARRAY_SRVView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get MostDetailedMip(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: u32
  get MipLevels(): number {
    return this.view.getUint32(4, true);
  }

  // 0x08: u32
  get FirstArraySlice(): number {
    return this.view.getUint32(8, true);
  }

  // 0x0c: u32
  get ArraySize(): number {
    return this.view.getUint32(12, true);
  }

  // 0x00: u32
  set MostDetailedMip(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: u32
  set MipLevels(value: number) {
    this.view.setUint32(4, value, true);
  }

  // 0x08: u32
  set FirstArraySlice(value: number) {
    this.view.setUint32(8, value, true);
  }

  // 0x0c: u32
  set ArraySize(value: number) {
    this.view.setUint32(12, value, true);
  }
}

/**
 * Windows.Win32.Graphics.Direct3D11.D3D11_TEX2D_SRV (size: 8)
 */
export interface D3D11_TEX2D_SRV {
  /** u32 */
  MostDetailedMip: number;
  /** u32 */
  MipLevels: number;
}

export const sizeofD3D11_TEX2D_SRV = 8;

export function allocD3D11_TEX2D_SRV(data?: Partial<D3D11_TEX2D_SRV>): Uint8Array {
  const buf = new Uint8Array(sizeofD3D11_TEX2D_SRV);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.MostDetailedMip !== undefined) view.setUint32(0, Number(data.MostDetailedMip), true);
  // 0x04: u32
  if (data?.MipLevels !== undefined) view.setUint32(4, Number(data.MipLevels), true);
  return buf;
}

export class D3D11_TEX2D_SRVView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get MostDetailedMip(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: u32
  get MipLevels(): number {
    return this.view.getUint32(4, true);
  }

  // 0x00: u32
  set MostDetailedMip(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: u32
  set MipLevels(value: number) {
    this.view.setUint32(4, value, true);
  }
}

/**
 * Windows.Win32.Graphics.Direct3D11.D3D11_TEX2D_ARRAY_SRV (size: 16)
 */
export interface D3D11_TEX2D_ARRAY_SRV {
  /** u32 */
  MostDetailedMip: number;
  /** u32 */
  MipLevels: number;
  /** u32 */
  FirstArraySlice: number;
  /** u32 */
  ArraySize: number;
}

export const sizeofD3D11_TEX2D_ARRAY_SRV = 16;

export function allocD3D11_TEX2D_ARRAY_SRV(data?: Partial<D3D11_TEX2D_ARRAY_SRV>): Uint8Array {
  const buf = new Uint8Array(sizeofD3D11_TEX2D_ARRAY_SRV);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.MostDetailedMip !== undefined) view.setUint32(0, Number(data.MostDetailedMip), true);
  // 0x04: u32
  if (data?.MipLevels !== undefined) view.setUint32(4, Number(data.MipLevels), true);
  // 0x08: u32
  if (data?.FirstArraySlice !== undefined) view.setUint32(8, Number(data.FirstArraySlice), true);
  // 0x0c: u32
  if (data?.ArraySize !== undefined) view.setUint32(12, Number(data.ArraySize), true);
  return buf;
}

export class D3D11_TEX2D_ARRAY_SRVView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get MostDetailedMip(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: u32
  get MipLevels(): number {
    return this.view.getUint32(4, true);
  }

  // 0x08: u32
  get FirstArraySlice(): number {
    return this.view.getUint32(8, true);
  }

  // 0x0c: u32
  get ArraySize(): number {
    return this.view.getUint32(12, true);
  }

  // 0x00: u32
  set MostDetailedMip(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: u32
  set MipLevels(value: number) {
    this.view.setUint32(4, value, true);
  }

  // 0x08: u32
  set FirstArraySlice(value: number) {
    this.view.setUint32(8, value, true);
  }

  // 0x0c: u32
  set ArraySize(value: number) {
    this.view.setUint32(12, value, true);
  }
}

/**
 * Windows.Win32.Graphics.Direct3D11.D3D11_TEX3D_SRV (size: 8)
 */
export interface D3D11_TEX3D_SRV {
  /** u32 */
  MostDetailedMip: number;
  /** u32 */
  MipLevels: number;
}

export const sizeofD3D11_TEX3D_SRV = 8;

export function allocD3D11_TEX3D_SRV(data?: Partial<D3D11_TEX3D_SRV>): Uint8Array {
  const buf = new Uint8Array(sizeofD3D11_TEX3D_SRV);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.MostDetailedMip !== undefined) view.setUint32(0, Number(data.MostDetailedMip), true);
  // 0x04: u32
  if (data?.MipLevels !== undefined) view.setUint32(4, Number(data.MipLevels), true);
  return buf;
}

export class D3D11_TEX3D_SRVView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get MostDetailedMip(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: u32
  get MipLevels(): number {
    return this.view.getUint32(4, true);
  }

  // 0x00: u32
  set MostDetailedMip(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: u32
  set MipLevels(value: number) {
    this.view.setUint32(4, value, true);
  }
}

/**
 * Windows.Win32.Graphics.Direct3D11.D3D11_TEXCUBE_SRV (size: 8)
 */
export interface D3D11_TEXCUBE_SRV {
  /** u32 */
  MostDetailedMip: number;
  /** u32 */
  MipLevels: number;
}

export const sizeofD3D11_TEXCUBE_SRV = 8;

export function allocD3D11_TEXCUBE_SRV(data?: Partial<D3D11_TEXCUBE_SRV>): Uint8Array {
  const buf = new Uint8Array(sizeofD3D11_TEXCUBE_SRV);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.MostDetailedMip !== undefined) view.setUint32(0, Number(data.MostDetailedMip), true);
  // 0x04: u32
  if (data?.MipLevels !== undefined) view.setUint32(4, Number(data.MipLevels), true);
  return buf;
}

export class D3D11_TEXCUBE_SRVView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get MostDetailedMip(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: u32
  get MipLevels(): number {
    return this.view.getUint32(4, true);
  }

  // 0x00: u32
  set MostDetailedMip(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: u32
  set MipLevels(value: number) {
    this.view.setUint32(4, value, true);
  }
}

/**
 * Windows.Win32.Graphics.Direct3D11.D3D11_TEXCUBE_ARRAY_SRV (size: 16)
 */
export interface D3D11_TEXCUBE_ARRAY_SRV {
  /** u32 */
  MostDetailedMip: number;
  /** u32 */
  MipLevels: number;
  /** u32 */
  First2DArrayFace: number;
  /** u32 */
  NumCubes: number;
}

export const sizeofD3D11_TEXCUBE_ARRAY_SRV = 16;

export function allocD3D11_TEXCUBE_ARRAY_SRV(data?: Partial<D3D11_TEXCUBE_ARRAY_SRV>): Uint8Array {
  const buf = new Uint8Array(sizeofD3D11_TEXCUBE_ARRAY_SRV);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.MostDetailedMip !== undefined) view.setUint32(0, Number(data.MostDetailedMip), true);
  // 0x04: u32
  if (data?.MipLevels !== undefined) view.setUint32(4, Number(data.MipLevels), true);
  // 0x08: u32
  if (data?.First2DArrayFace !== undefined) view.setUint32(8, Number(data.First2DArrayFace), true);
  // 0x0c: u32
  if (data?.NumCubes !== undefined) view.setUint32(12, Number(data.NumCubes), true);
  return buf;
}

export class D3D11_TEXCUBE_ARRAY_SRVView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get MostDetailedMip(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: u32
  get MipLevels(): number {
    return this.view.getUint32(4, true);
  }

  // 0x08: u32
  get First2DArrayFace(): number {
    return this.view.getUint32(8, true);
  }

  // 0x0c: u32
  get NumCubes(): number {
    return this.view.getUint32(12, true);
  }

  // 0x00: u32
  set MostDetailedMip(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: u32
  set MipLevels(value: number) {
    this.view.setUint32(4, value, true);
  }

  // 0x08: u32
  set First2DArrayFace(value: number) {
    this.view.setUint32(8, value, true);
  }

  // 0x0c: u32
  set NumCubes(value: number) {
    this.view.setUint32(12, value, true);
  }
}

/**
 * Windows.Win32.Graphics.Direct3D11.D3D11_TEX2DMS_SRV (size: 8)
 */
export interface D3D11_TEX2DMS_SRV {
  /** u32 */
  UnusedField_NothingToDefine: number;
}

export const sizeofD3D11_TEX2DMS_SRV = 8;

export function allocD3D11_TEX2DMS_SRV(data?: Partial<D3D11_TEX2DMS_SRV>): Uint8Array {
  const buf = new Uint8Array(sizeofD3D11_TEX2DMS_SRV);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.UnusedField_NothingToDefine !== undefined) view.setUint32(0, Number(data.UnusedField_NothingToDefine), true);
  // 0x04: pad4
  return buf;
}

export class D3D11_TEX2DMS_SRVView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get UnusedField_NothingToDefine(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: pad4

  // 0x00: u32
  set UnusedField_NothingToDefine(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: pad4
}

/**
 * Windows.Win32.Graphics.Direct3D11.D3D11_TEX2DMS_ARRAY_SRV (size: 8)
 */
export interface D3D11_TEX2DMS_ARRAY_SRV {
  /** u32 */
  FirstArraySlice: number;
  /** u32 */
  ArraySize: number;
}

export const sizeofD3D11_TEX2DMS_ARRAY_SRV = 8;

export function allocD3D11_TEX2DMS_ARRAY_SRV(data?: Partial<D3D11_TEX2DMS_ARRAY_SRV>): Uint8Array {
  const buf = new Uint8Array(sizeofD3D11_TEX2DMS_ARRAY_SRV);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.FirstArraySlice !== undefined) view.setUint32(0, Number(data.FirstArraySlice), true);
  // 0x04: u32
  if (data?.ArraySize !== undefined) view.setUint32(4, Number(data.ArraySize), true);
  return buf;
}

export class D3D11_TEX2DMS_ARRAY_SRVView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get FirstArraySlice(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: u32
  get ArraySize(): number {
    return this.view.getUint32(4, true);
  }

  // 0x00: u32
  set FirstArraySlice(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: u32
  set ArraySize(value: number) {
    this.view.setUint32(4, value, true);
  }
}

/**
 * Windows.Win32.Graphics.Direct3D11.D3D11_SHADER_RESOURCE_VIEW_DESC (size: 16)
 */
export interface D3D11_SHADER_RESOURCE_VIEW_DESC {
  /** Windows.Win32.Graphics.Dxgi.Common.DXGI_FORMAT */
  Format: DXGI_FORMAT;
  /** Windows.Win32.Graphics.Direct3D.D3D_SRV_DIMENSION */
  ViewDimension: D3D_SRV_DIMENSION;
  /** _Anonymous_e__Union */
  Anonymous: Uint8Array | Deno.PointerValue | null;
}

export const sizeofD3D11_SHADER_RESOURCE_VIEW_DESC = 16;

export function allocD3D11_SHADER_RESOURCE_VIEW_DESC(data?: Partial<D3D11_SHADER_RESOURCE_VIEW_DESC>): Uint8Array {
  const buf = new Uint8Array(sizeofD3D11_SHADER_RESOURCE_VIEW_DESC);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.Format !== undefined) view.setUint32(0, Number(data.Format), true);
  // 0x04: i32
  if (data?.ViewDimension !== undefined) view.setInt32(4, Number(data.ViewDimension), true);
  // 0x08: pointer
  if (data?.Anonymous !== undefined) view.setBigUint64(8, data.Anonymous === null ? 0n : util.toBigInt(util.toPointer(data.Anonymous)), true);
  return buf;
}

export class D3D11_SHADER_RESOURCE_VIEW_DESCView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get Format(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: i32
  get ViewDimension(): number {
    return this.view.getInt32(4, true);
  }

  // 0x08: pointer
  get Anonymous(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(8, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: u32
  set Format(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: i32
  set ViewDimension(value: number) {
    this.view.setInt32(4, value, true);
  }

  // 0x08: pointer
  set Anonymous(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(8, util.toBigInt(util.toPointer(value)), true);
  }
}

/**
 * Windows.Win32.Graphics.Direct3D11.D3D11_BUFFER_RTV (size: 16)
 */
export interface D3D11_BUFFER_RTV {
  /** _Anonymous1_e__Union */
  Anonymous1: Uint8Array | Deno.PointerValue | null;
  /** _Anonymous2_e__Union */
  Anonymous2: Uint8Array | Deno.PointerValue | null;
}

export const sizeofD3D11_BUFFER_RTV = 16;

export function allocD3D11_BUFFER_RTV(data?: Partial<D3D11_BUFFER_RTV>): Uint8Array {
  const buf = new Uint8Array(sizeofD3D11_BUFFER_RTV);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.Anonymous1 !== undefined) view.setBigUint64(0, data.Anonymous1 === null ? 0n : util.toBigInt(util.toPointer(data.Anonymous1)), true);
  // 0x08: pointer
  if (data?.Anonymous2 !== undefined) view.setBigUint64(8, data.Anonymous2 === null ? 0n : util.toBigInt(util.toPointer(data.Anonymous2)), true);
  return buf;
}

export class D3D11_BUFFER_RTVView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get Anonymous1(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(0, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x08: pointer
  get Anonymous2(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(8, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: pointer
  set Anonymous1(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(0, util.toBigInt(util.toPointer(value)), true);
  }

  // 0x08: pointer
  set Anonymous2(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(8, util.toBigInt(util.toPointer(value)), true);
  }
}

/**
 * Windows.Win32.Graphics.Direct3D11.D3D11_TEX1D_RTV (size: 8)
 */
export interface D3D11_TEX1D_RTV {
  /** u32 */
  MipSlice: number;
}

export const sizeofD3D11_TEX1D_RTV = 8;

export function allocD3D11_TEX1D_RTV(data?: Partial<D3D11_TEX1D_RTV>): Uint8Array {
  const buf = new Uint8Array(sizeofD3D11_TEX1D_RTV);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.MipSlice !== undefined) view.setUint32(0, Number(data.MipSlice), true);
  // 0x04: pad4
  return buf;
}

export class D3D11_TEX1D_RTVView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get MipSlice(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: pad4

  // 0x00: u32
  set MipSlice(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: pad4
}

/**
 * Windows.Win32.Graphics.Direct3D11.D3D11_TEX1D_ARRAY_RTV (size: 16)
 */
export interface D3D11_TEX1D_ARRAY_RTV {
  /** u32 */
  MipSlice: number;
  /** u32 */
  FirstArraySlice: number;
  /** u32 */
  ArraySize: number;
}

export const sizeofD3D11_TEX1D_ARRAY_RTV = 16;

export function allocD3D11_TEX1D_ARRAY_RTV(data?: Partial<D3D11_TEX1D_ARRAY_RTV>): Uint8Array {
  const buf = new Uint8Array(sizeofD3D11_TEX1D_ARRAY_RTV);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.MipSlice !== undefined) view.setUint32(0, Number(data.MipSlice), true);
  // 0x04: u32
  if (data?.FirstArraySlice !== undefined) view.setUint32(4, Number(data.FirstArraySlice), true);
  // 0x08: u32
  if (data?.ArraySize !== undefined) view.setUint32(8, Number(data.ArraySize), true);
  // 0x0c: pad4
  return buf;
}

export class D3D11_TEX1D_ARRAY_RTVView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get MipSlice(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: u32
  get FirstArraySlice(): number {
    return this.view.getUint32(4, true);
  }

  // 0x08: u32
  get ArraySize(): number {
    return this.view.getUint32(8, true);
  }

  // 0x0c: pad4

  // 0x00: u32
  set MipSlice(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: u32
  set FirstArraySlice(value: number) {
    this.view.setUint32(4, value, true);
  }

  // 0x08: u32
  set ArraySize(value: number) {
    this.view.setUint32(8, value, true);
  }

  // 0x0c: pad4
}

/**
 * Windows.Win32.Graphics.Direct3D11.D3D11_TEX2D_RTV (size: 8)
 */
export interface D3D11_TEX2D_RTV {
  /** u32 */
  MipSlice: number;
}

export const sizeofD3D11_TEX2D_RTV = 8;

export function allocD3D11_TEX2D_RTV(data?: Partial<D3D11_TEX2D_RTV>): Uint8Array {
  const buf = new Uint8Array(sizeofD3D11_TEX2D_RTV);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.MipSlice !== undefined) view.setUint32(0, Number(data.MipSlice), true);
  // 0x04: pad4
  return buf;
}

export class D3D11_TEX2D_RTVView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get MipSlice(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: pad4

  // 0x00: u32
  set MipSlice(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: pad4
}

/**
 * Windows.Win32.Graphics.Direct3D11.D3D11_TEX2DMS_RTV (size: 8)
 */
export interface D3D11_TEX2DMS_RTV {
  /** u32 */
  UnusedField_NothingToDefine: number;
}

export const sizeofD3D11_TEX2DMS_RTV = 8;

export function allocD3D11_TEX2DMS_RTV(data?: Partial<D3D11_TEX2DMS_RTV>): Uint8Array {
  const buf = new Uint8Array(sizeofD3D11_TEX2DMS_RTV);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.UnusedField_NothingToDefine !== undefined) view.setUint32(0, Number(data.UnusedField_NothingToDefine), true);
  // 0x04: pad4
  return buf;
}

export class D3D11_TEX2DMS_RTVView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get UnusedField_NothingToDefine(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: pad4

  // 0x00: u32
  set UnusedField_NothingToDefine(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: pad4
}

/**
 * Windows.Win32.Graphics.Direct3D11.D3D11_TEX2D_ARRAY_RTV (size: 16)
 */
export interface D3D11_TEX2D_ARRAY_RTV {
  /** u32 */
  MipSlice: number;
  /** u32 */
  FirstArraySlice: number;
  /** u32 */
  ArraySize: number;
}

export const sizeofD3D11_TEX2D_ARRAY_RTV = 16;

export function allocD3D11_TEX2D_ARRAY_RTV(data?: Partial<D3D11_TEX2D_ARRAY_RTV>): Uint8Array {
  const buf = new Uint8Array(sizeofD3D11_TEX2D_ARRAY_RTV);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.MipSlice !== undefined) view.setUint32(0, Number(data.MipSlice), true);
  // 0x04: u32
  if (data?.FirstArraySlice !== undefined) view.setUint32(4, Number(data.FirstArraySlice), true);
  // 0x08: u32
  if (data?.ArraySize !== undefined) view.setUint32(8, Number(data.ArraySize), true);
  // 0x0c: pad4
  return buf;
}

export class D3D11_TEX2D_ARRAY_RTVView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get MipSlice(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: u32
  get FirstArraySlice(): number {
    return this.view.getUint32(4, true);
  }

  // 0x08: u32
  get ArraySize(): number {
    return this.view.getUint32(8, true);
  }

  // 0x0c: pad4

  // 0x00: u32
  set MipSlice(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: u32
  set FirstArraySlice(value: number) {
    this.view.setUint32(4, value, true);
  }

  // 0x08: u32
  set ArraySize(value: number) {
    this.view.setUint32(8, value, true);
  }

  // 0x0c: pad4
}

/**
 * Windows.Win32.Graphics.Direct3D11.D3D11_TEX2DMS_ARRAY_RTV (size: 8)
 */
export interface D3D11_TEX2DMS_ARRAY_RTV {
  /** u32 */
  FirstArraySlice: number;
  /** u32 */
  ArraySize: number;
}

export const sizeofD3D11_TEX2DMS_ARRAY_RTV = 8;

export function allocD3D11_TEX2DMS_ARRAY_RTV(data?: Partial<D3D11_TEX2DMS_ARRAY_RTV>): Uint8Array {
  const buf = new Uint8Array(sizeofD3D11_TEX2DMS_ARRAY_RTV);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.FirstArraySlice !== undefined) view.setUint32(0, Number(data.FirstArraySlice), true);
  // 0x04: u32
  if (data?.ArraySize !== undefined) view.setUint32(4, Number(data.ArraySize), true);
  return buf;
}

export class D3D11_TEX2DMS_ARRAY_RTVView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get FirstArraySlice(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: u32
  get ArraySize(): number {
    return this.view.getUint32(4, true);
  }

  // 0x00: u32
  set FirstArraySlice(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: u32
  set ArraySize(value: number) {
    this.view.setUint32(4, value, true);
  }
}

/**
 * Windows.Win32.Graphics.Direct3D11.D3D11_TEX3D_RTV (size: 16)
 */
export interface D3D11_TEX3D_RTV {
  /** u32 */
  MipSlice: number;
  /** u32 */
  FirstWSlice: number;
  /** u32 */
  WSize: number;
}

export const sizeofD3D11_TEX3D_RTV = 16;

export function allocD3D11_TEX3D_RTV(data?: Partial<D3D11_TEX3D_RTV>): Uint8Array {
  const buf = new Uint8Array(sizeofD3D11_TEX3D_RTV);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.MipSlice !== undefined) view.setUint32(0, Number(data.MipSlice), true);
  // 0x04: u32
  if (data?.FirstWSlice !== undefined) view.setUint32(4, Number(data.FirstWSlice), true);
  // 0x08: u32
  if (data?.WSize !== undefined) view.setUint32(8, Number(data.WSize), true);
  // 0x0c: pad4
  return buf;
}

export class D3D11_TEX3D_RTVView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get MipSlice(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: u32
  get FirstWSlice(): number {
    return this.view.getUint32(4, true);
  }

  // 0x08: u32
  get WSize(): number {
    return this.view.getUint32(8, true);
  }

  // 0x0c: pad4

  // 0x00: u32
  set MipSlice(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: u32
  set FirstWSlice(value: number) {
    this.view.setUint32(4, value, true);
  }

  // 0x08: u32
  set WSize(value: number) {
    this.view.setUint32(8, value, true);
  }

  // 0x0c: pad4
}

/**
 * Windows.Win32.Graphics.Direct3D11.D3D11_RENDER_TARGET_VIEW_DESC (size: 16)
 */
export interface D3D11_RENDER_TARGET_VIEW_DESC {
  /** Windows.Win32.Graphics.Dxgi.Common.DXGI_FORMAT */
  Format: DXGI_FORMAT;
  /** Windows.Win32.Graphics.Direct3D11.D3D11_RTV_DIMENSION */
  ViewDimension: D3D11_RTV_DIMENSION;
  /** _Anonymous_e__Union */
  Anonymous: Uint8Array | Deno.PointerValue | null;
}

export const sizeofD3D11_RENDER_TARGET_VIEW_DESC = 16;

export function allocD3D11_RENDER_TARGET_VIEW_DESC(data?: Partial<D3D11_RENDER_TARGET_VIEW_DESC>): Uint8Array {
  const buf = new Uint8Array(sizeofD3D11_RENDER_TARGET_VIEW_DESC);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.Format !== undefined) view.setUint32(0, Number(data.Format), true);
  // 0x04: i32
  if (data?.ViewDimension !== undefined) view.setInt32(4, Number(data.ViewDimension), true);
  // 0x08: pointer
  if (data?.Anonymous !== undefined) view.setBigUint64(8, data.Anonymous === null ? 0n : util.toBigInt(util.toPointer(data.Anonymous)), true);
  return buf;
}

export class D3D11_RENDER_TARGET_VIEW_DESCView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get Format(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: i32
  get ViewDimension(): number {
    return this.view.getInt32(4, true);
  }

  // 0x08: pointer
  get Anonymous(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(8, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: u32
  set Format(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: i32
  set ViewDimension(value: number) {
    this.view.setInt32(4, value, true);
  }

  // 0x08: pointer
  set Anonymous(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(8, util.toBigInt(util.toPointer(value)), true);
  }
}

/**
 * Windows.Win32.Graphics.Direct3D11.D3D11_TEX1D_DSV (size: 8)
 */
export interface D3D11_TEX1D_DSV {
  /** u32 */
  MipSlice: number;
}

export const sizeofD3D11_TEX1D_DSV = 8;

export function allocD3D11_TEX1D_DSV(data?: Partial<D3D11_TEX1D_DSV>): Uint8Array {
  const buf = new Uint8Array(sizeofD3D11_TEX1D_DSV);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.MipSlice !== undefined) view.setUint32(0, Number(data.MipSlice), true);
  // 0x04: pad4
  return buf;
}

export class D3D11_TEX1D_DSVView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get MipSlice(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: pad4

  // 0x00: u32
  set MipSlice(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: pad4
}

/**
 * Windows.Win32.Graphics.Direct3D11.D3D11_TEX1D_ARRAY_DSV (size: 16)
 */
export interface D3D11_TEX1D_ARRAY_DSV {
  /** u32 */
  MipSlice: number;
  /** u32 */
  FirstArraySlice: number;
  /** u32 */
  ArraySize: number;
}

export const sizeofD3D11_TEX1D_ARRAY_DSV = 16;

export function allocD3D11_TEX1D_ARRAY_DSV(data?: Partial<D3D11_TEX1D_ARRAY_DSV>): Uint8Array {
  const buf = new Uint8Array(sizeofD3D11_TEX1D_ARRAY_DSV);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.MipSlice !== undefined) view.setUint32(0, Number(data.MipSlice), true);
  // 0x04: u32
  if (data?.FirstArraySlice !== undefined) view.setUint32(4, Number(data.FirstArraySlice), true);
  // 0x08: u32
  if (data?.ArraySize !== undefined) view.setUint32(8, Number(data.ArraySize), true);
  // 0x0c: pad4
  return buf;
}

export class D3D11_TEX1D_ARRAY_DSVView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get MipSlice(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: u32
  get FirstArraySlice(): number {
    return this.view.getUint32(4, true);
  }

  // 0x08: u32
  get ArraySize(): number {
    return this.view.getUint32(8, true);
  }

  // 0x0c: pad4

  // 0x00: u32
  set MipSlice(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: u32
  set FirstArraySlice(value: number) {
    this.view.setUint32(4, value, true);
  }

  // 0x08: u32
  set ArraySize(value: number) {
    this.view.setUint32(8, value, true);
  }

  // 0x0c: pad4
}

/**
 * Windows.Win32.Graphics.Direct3D11.D3D11_TEX2D_DSV (size: 8)
 */
export interface D3D11_TEX2D_DSV {
  /** u32 */
  MipSlice: number;
}

export const sizeofD3D11_TEX2D_DSV = 8;

export function allocD3D11_TEX2D_DSV(data?: Partial<D3D11_TEX2D_DSV>): Uint8Array {
  const buf = new Uint8Array(sizeofD3D11_TEX2D_DSV);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.MipSlice !== undefined) view.setUint32(0, Number(data.MipSlice), true);
  // 0x04: pad4
  return buf;
}

export class D3D11_TEX2D_DSVView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get MipSlice(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: pad4

  // 0x00: u32
  set MipSlice(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: pad4
}

/**
 * Windows.Win32.Graphics.Direct3D11.D3D11_TEX2D_ARRAY_DSV (size: 16)
 */
export interface D3D11_TEX2D_ARRAY_DSV {
  /** u32 */
  MipSlice: number;
  /** u32 */
  FirstArraySlice: number;
  /** u32 */
  ArraySize: number;
}

export const sizeofD3D11_TEX2D_ARRAY_DSV = 16;

export function allocD3D11_TEX2D_ARRAY_DSV(data?: Partial<D3D11_TEX2D_ARRAY_DSV>): Uint8Array {
  const buf = new Uint8Array(sizeofD3D11_TEX2D_ARRAY_DSV);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.MipSlice !== undefined) view.setUint32(0, Number(data.MipSlice), true);
  // 0x04: u32
  if (data?.FirstArraySlice !== undefined) view.setUint32(4, Number(data.FirstArraySlice), true);
  // 0x08: u32
  if (data?.ArraySize !== undefined) view.setUint32(8, Number(data.ArraySize), true);
  // 0x0c: pad4
  return buf;
}

export class D3D11_TEX2D_ARRAY_DSVView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get MipSlice(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: u32
  get FirstArraySlice(): number {
    return this.view.getUint32(4, true);
  }

  // 0x08: u32
  get ArraySize(): number {
    return this.view.getUint32(8, true);
  }

  // 0x0c: pad4

  // 0x00: u32
  set MipSlice(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: u32
  set FirstArraySlice(value: number) {
    this.view.setUint32(4, value, true);
  }

  // 0x08: u32
  set ArraySize(value: number) {
    this.view.setUint32(8, value, true);
  }

  // 0x0c: pad4
}

/**
 * Windows.Win32.Graphics.Direct3D11.D3D11_TEX2DMS_DSV (size: 8)
 */
export interface D3D11_TEX2DMS_DSV {
  /** u32 */
  UnusedField_NothingToDefine: number;
}

export const sizeofD3D11_TEX2DMS_DSV = 8;

export function allocD3D11_TEX2DMS_DSV(data?: Partial<D3D11_TEX2DMS_DSV>): Uint8Array {
  const buf = new Uint8Array(sizeofD3D11_TEX2DMS_DSV);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.UnusedField_NothingToDefine !== undefined) view.setUint32(0, Number(data.UnusedField_NothingToDefine), true);
  // 0x04: pad4
  return buf;
}

export class D3D11_TEX2DMS_DSVView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get UnusedField_NothingToDefine(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: pad4

  // 0x00: u32
  set UnusedField_NothingToDefine(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: pad4
}

/**
 * Windows.Win32.Graphics.Direct3D11.D3D11_TEX2DMS_ARRAY_DSV (size: 8)
 */
export interface D3D11_TEX2DMS_ARRAY_DSV {
  /** u32 */
  FirstArraySlice: number;
  /** u32 */
  ArraySize: number;
}

export const sizeofD3D11_TEX2DMS_ARRAY_DSV = 8;

export function allocD3D11_TEX2DMS_ARRAY_DSV(data?: Partial<D3D11_TEX2DMS_ARRAY_DSV>): Uint8Array {
  const buf = new Uint8Array(sizeofD3D11_TEX2DMS_ARRAY_DSV);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.FirstArraySlice !== undefined) view.setUint32(0, Number(data.FirstArraySlice), true);
  // 0x04: u32
  if (data?.ArraySize !== undefined) view.setUint32(4, Number(data.ArraySize), true);
  return buf;
}

export class D3D11_TEX2DMS_ARRAY_DSVView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get FirstArraySlice(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: u32
  get ArraySize(): number {
    return this.view.getUint32(4, true);
  }

  // 0x00: u32
  set FirstArraySlice(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: u32
  set ArraySize(value: number) {
    this.view.setUint32(4, value, true);
  }
}

/**
 * Windows.Win32.Graphics.Direct3D11.D3D11_DEPTH_STENCIL_VIEW_DESC (size: 24)
 */
export interface D3D11_DEPTH_STENCIL_VIEW_DESC {
  /** Windows.Win32.Graphics.Dxgi.Common.DXGI_FORMAT */
  Format: DXGI_FORMAT;
  /** Windows.Win32.Graphics.Direct3D11.D3D11_DSV_DIMENSION */
  ViewDimension: D3D11_DSV_DIMENSION;
  /** u32 */
  Flags: number;
  /** _Anonymous_e__Union */
  Anonymous: Uint8Array | Deno.PointerValue | null;
}

export const sizeofD3D11_DEPTH_STENCIL_VIEW_DESC = 24;

export function allocD3D11_DEPTH_STENCIL_VIEW_DESC(data?: Partial<D3D11_DEPTH_STENCIL_VIEW_DESC>): Uint8Array {
  const buf = new Uint8Array(sizeofD3D11_DEPTH_STENCIL_VIEW_DESC);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.Format !== undefined) view.setUint32(0, Number(data.Format), true);
  // 0x04: i32
  if (data?.ViewDimension !== undefined) view.setInt32(4, Number(data.ViewDimension), true);
  // 0x08: u32
  if (data?.Flags !== undefined) view.setUint32(8, Number(data.Flags), true);
  // 0x0c: pad4
  // 0x10: pointer
  if (data?.Anonymous !== undefined) view.setBigUint64(16, data.Anonymous === null ? 0n : util.toBigInt(util.toPointer(data.Anonymous)), true);
  return buf;
}

export class D3D11_DEPTH_STENCIL_VIEW_DESCView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get Format(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: i32
  get ViewDimension(): number {
    return this.view.getInt32(4, true);
  }

  // 0x08: u32
  get Flags(): number {
    return this.view.getUint32(8, true);
  }

  // 0x0c: pad4

  // 0x10: pointer
  get Anonymous(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(16, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: u32
  set Format(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: i32
  set ViewDimension(value: number) {
    this.view.setInt32(4, value, true);
  }

  // 0x08: u32
  set Flags(value: number) {
    this.view.setUint32(8, value, true);
  }

  // 0x0c: pad4

  // 0x10: pointer
  set Anonymous(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(16, util.toBigInt(util.toPointer(value)), true);
  }
}

/**
 * Windows.Win32.Graphics.Direct3D11.D3D11_BUFFER_UAV (size: 16)
 */
export interface D3D11_BUFFER_UAV {
  /** u32 */
  FirstElement: number;
  /** u32 */
  NumElements: number;
  /** u32 */
  Flags: number;
}

export const sizeofD3D11_BUFFER_UAV = 16;

export function allocD3D11_BUFFER_UAV(data?: Partial<D3D11_BUFFER_UAV>): Uint8Array {
  const buf = new Uint8Array(sizeofD3D11_BUFFER_UAV);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.FirstElement !== undefined) view.setUint32(0, Number(data.FirstElement), true);
  // 0x04: u32
  if (data?.NumElements !== undefined) view.setUint32(4, Number(data.NumElements), true);
  // 0x08: u32
  if (data?.Flags !== undefined) view.setUint32(8, Number(data.Flags), true);
  // 0x0c: pad4
  return buf;
}

export class D3D11_BUFFER_UAVView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get FirstElement(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: u32
  get NumElements(): number {
    return this.view.getUint32(4, true);
  }

  // 0x08: u32
  get Flags(): number {
    return this.view.getUint32(8, true);
  }

  // 0x0c: pad4

  // 0x00: u32
  set FirstElement(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: u32
  set NumElements(value: number) {
    this.view.setUint32(4, value, true);
  }

  // 0x08: u32
  set Flags(value: number) {
    this.view.setUint32(8, value, true);
  }

  // 0x0c: pad4
}

/**
 * Windows.Win32.Graphics.Direct3D11.D3D11_TEX1D_UAV (size: 8)
 */
export interface D3D11_TEX1D_UAV {
  /** u32 */
  MipSlice: number;
}

export const sizeofD3D11_TEX1D_UAV = 8;

export function allocD3D11_TEX1D_UAV(data?: Partial<D3D11_TEX1D_UAV>): Uint8Array {
  const buf = new Uint8Array(sizeofD3D11_TEX1D_UAV);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.MipSlice !== undefined) view.setUint32(0, Number(data.MipSlice), true);
  // 0x04: pad4
  return buf;
}

export class D3D11_TEX1D_UAVView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get MipSlice(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: pad4

  // 0x00: u32
  set MipSlice(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: pad4
}

/**
 * Windows.Win32.Graphics.Direct3D11.D3D11_TEX1D_ARRAY_UAV (size: 16)
 */
export interface D3D11_TEX1D_ARRAY_UAV {
  /** u32 */
  MipSlice: number;
  /** u32 */
  FirstArraySlice: number;
  /** u32 */
  ArraySize: number;
}

export const sizeofD3D11_TEX1D_ARRAY_UAV = 16;

export function allocD3D11_TEX1D_ARRAY_UAV(data?: Partial<D3D11_TEX1D_ARRAY_UAV>): Uint8Array {
  const buf = new Uint8Array(sizeofD3D11_TEX1D_ARRAY_UAV);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.MipSlice !== undefined) view.setUint32(0, Number(data.MipSlice), true);
  // 0x04: u32
  if (data?.FirstArraySlice !== undefined) view.setUint32(4, Number(data.FirstArraySlice), true);
  // 0x08: u32
  if (data?.ArraySize !== undefined) view.setUint32(8, Number(data.ArraySize), true);
  // 0x0c: pad4
  return buf;
}

export class D3D11_TEX1D_ARRAY_UAVView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get MipSlice(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: u32
  get FirstArraySlice(): number {
    return this.view.getUint32(4, true);
  }

  // 0x08: u32
  get ArraySize(): number {
    return this.view.getUint32(8, true);
  }

  // 0x0c: pad4

  // 0x00: u32
  set MipSlice(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: u32
  set FirstArraySlice(value: number) {
    this.view.setUint32(4, value, true);
  }

  // 0x08: u32
  set ArraySize(value: number) {
    this.view.setUint32(8, value, true);
  }

  // 0x0c: pad4
}

/**
 * Windows.Win32.Graphics.Direct3D11.D3D11_TEX2D_UAV (size: 8)
 */
export interface D3D11_TEX2D_UAV {
  /** u32 */
  MipSlice: number;
}

export const sizeofD3D11_TEX2D_UAV = 8;

export function allocD3D11_TEX2D_UAV(data?: Partial<D3D11_TEX2D_UAV>): Uint8Array {
  const buf = new Uint8Array(sizeofD3D11_TEX2D_UAV);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.MipSlice !== undefined) view.setUint32(0, Number(data.MipSlice), true);
  // 0x04: pad4
  return buf;
}

export class D3D11_TEX2D_UAVView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get MipSlice(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: pad4

  // 0x00: u32
  set MipSlice(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: pad4
}

/**
 * Windows.Win32.Graphics.Direct3D11.D3D11_TEX2D_ARRAY_UAV (size: 16)
 */
export interface D3D11_TEX2D_ARRAY_UAV {
  /** u32 */
  MipSlice: number;
  /** u32 */
  FirstArraySlice: number;
  /** u32 */
  ArraySize: number;
}

export const sizeofD3D11_TEX2D_ARRAY_UAV = 16;

export function allocD3D11_TEX2D_ARRAY_UAV(data?: Partial<D3D11_TEX2D_ARRAY_UAV>): Uint8Array {
  const buf = new Uint8Array(sizeofD3D11_TEX2D_ARRAY_UAV);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.MipSlice !== undefined) view.setUint32(0, Number(data.MipSlice), true);
  // 0x04: u32
  if (data?.FirstArraySlice !== undefined) view.setUint32(4, Number(data.FirstArraySlice), true);
  // 0x08: u32
  if (data?.ArraySize !== undefined) view.setUint32(8, Number(data.ArraySize), true);
  // 0x0c: pad4
  return buf;
}

export class D3D11_TEX2D_ARRAY_UAVView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get MipSlice(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: u32
  get FirstArraySlice(): number {
    return this.view.getUint32(4, true);
  }

  // 0x08: u32
  get ArraySize(): number {
    return this.view.getUint32(8, true);
  }

  // 0x0c: pad4

  // 0x00: u32
  set MipSlice(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: u32
  set FirstArraySlice(value: number) {
    this.view.setUint32(4, value, true);
  }

  // 0x08: u32
  set ArraySize(value: number) {
    this.view.setUint32(8, value, true);
  }

  // 0x0c: pad4
}

/**
 * Windows.Win32.Graphics.Direct3D11.D3D11_TEX3D_UAV (size: 16)
 */
export interface D3D11_TEX3D_UAV {
  /** u32 */
  MipSlice: number;
  /** u32 */
  FirstWSlice: number;
  /** u32 */
  WSize: number;
}

export const sizeofD3D11_TEX3D_UAV = 16;

export function allocD3D11_TEX3D_UAV(data?: Partial<D3D11_TEX3D_UAV>): Uint8Array {
  const buf = new Uint8Array(sizeofD3D11_TEX3D_UAV);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.MipSlice !== undefined) view.setUint32(0, Number(data.MipSlice), true);
  // 0x04: u32
  if (data?.FirstWSlice !== undefined) view.setUint32(4, Number(data.FirstWSlice), true);
  // 0x08: u32
  if (data?.WSize !== undefined) view.setUint32(8, Number(data.WSize), true);
  // 0x0c: pad4
  return buf;
}

export class D3D11_TEX3D_UAVView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get MipSlice(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: u32
  get FirstWSlice(): number {
    return this.view.getUint32(4, true);
  }

  // 0x08: u32
  get WSize(): number {
    return this.view.getUint32(8, true);
  }

  // 0x0c: pad4

  // 0x00: u32
  set MipSlice(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: u32
  set FirstWSlice(value: number) {
    this.view.setUint32(4, value, true);
  }

  // 0x08: u32
  set WSize(value: number) {
    this.view.setUint32(8, value, true);
  }

  // 0x0c: pad4
}

/**
 * Windows.Win32.Graphics.Direct3D11.D3D11_UNORDERED_ACCESS_VIEW_DESC (size: 16)
 */
export interface D3D11_UNORDERED_ACCESS_VIEW_DESC {
  /** Windows.Win32.Graphics.Dxgi.Common.DXGI_FORMAT */
  Format: DXGI_FORMAT;
  /** Windows.Win32.Graphics.Direct3D11.D3D11_UAV_DIMENSION */
  ViewDimension: D3D11_UAV_DIMENSION;
  /** _Anonymous_e__Union */
  Anonymous: Uint8Array | Deno.PointerValue | null;
}

export const sizeofD3D11_UNORDERED_ACCESS_VIEW_DESC = 16;

export function allocD3D11_UNORDERED_ACCESS_VIEW_DESC(data?: Partial<D3D11_UNORDERED_ACCESS_VIEW_DESC>): Uint8Array {
  const buf = new Uint8Array(sizeofD3D11_UNORDERED_ACCESS_VIEW_DESC);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.Format !== undefined) view.setUint32(0, Number(data.Format), true);
  // 0x04: i32
  if (data?.ViewDimension !== undefined) view.setInt32(4, Number(data.ViewDimension), true);
  // 0x08: pointer
  if (data?.Anonymous !== undefined) view.setBigUint64(8, data.Anonymous === null ? 0n : util.toBigInt(util.toPointer(data.Anonymous)), true);
  return buf;
}

export class D3D11_UNORDERED_ACCESS_VIEW_DESCView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get Format(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: i32
  get ViewDimension(): number {
    return this.view.getInt32(4, true);
  }

  // 0x08: pointer
  get Anonymous(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(8, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: u32
  set Format(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: i32
  set ViewDimension(value: number) {
    this.view.setInt32(4, value, true);
  }

  // 0x08: pointer
  set Anonymous(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(8, util.toBigInt(util.toPointer(value)), true);
  }
}

/**
 * Windows.Win32.Graphics.Direct3D11.D3D11_SAMPLER_DESC (size: 48)
 */
export interface D3D11_SAMPLER_DESC {
  /** Windows.Win32.Graphics.Direct3D11.D3D11_FILTER */
  Filter: D3D11_FILTER;
  /** Windows.Win32.Graphics.Direct3D11.D3D11_TEXTURE_ADDRESS_MODE */
  AddressU: D3D11_TEXTURE_ADDRESS_MODE;
  /** Windows.Win32.Graphics.Direct3D11.D3D11_TEXTURE_ADDRESS_MODE */
  AddressV: D3D11_TEXTURE_ADDRESS_MODE;
  /** Windows.Win32.Graphics.Direct3D11.D3D11_TEXTURE_ADDRESS_MODE */
  AddressW: D3D11_TEXTURE_ADDRESS_MODE;
  /** f32 */
  MipLODBias: number;
  /** u32 */
  MaxAnisotropy: number;
  /** Windows.Win32.Graphics.Direct3D11.D3D11_COMPARISON_FUNC */
  ComparisonFunc: D3D11_COMPARISON_FUNC;
  /** array */
  BorderColor: Deno.PointerValue | null;
  /** f32 */
  MinLOD: number;
  /** f32 */
  MaxLOD: number;
}

export const sizeofD3D11_SAMPLER_DESC = 48;

export function allocD3D11_SAMPLER_DESC(data?: Partial<D3D11_SAMPLER_DESC>): Uint8Array {
  const buf = new Uint8Array(sizeofD3D11_SAMPLER_DESC);
  const view = new DataView(buf.buffer);
  // 0x00: i32
  if (data?.Filter !== undefined) view.setInt32(0, Number(data.Filter), true);
  // 0x04: i32
  if (data?.AddressU !== undefined) view.setInt32(4, Number(data.AddressU), true);
  // 0x08: i32
  if (data?.AddressV !== undefined) view.setInt32(8, Number(data.AddressV), true);
  // 0x0c: i32
  if (data?.AddressW !== undefined) view.setInt32(12, Number(data.AddressW), true);
  // 0x10: f32
  if (data?.MipLODBias !== undefined) view.setFloat32(16, Number(data.MipLODBias), true);
  // 0x14: u32
  if (data?.MaxAnisotropy !== undefined) view.setUint32(20, Number(data.MaxAnisotropy), true);
  // 0x18: i32
  if (data?.ComparisonFunc !== undefined) view.setInt32(24, Number(data.ComparisonFunc), true);
  // 0x1c: pad4
  // 0x20: pointer
  if (data?.BorderColor !== undefined) view.setBigUint64(32, data.BorderColor === null ? 0n : util.toBigInt(util.toPointer(data.BorderColor)), true);
  // 0x28: f32
  if (data?.MinLOD !== undefined) view.setFloat32(40, Number(data.MinLOD), true);
  // 0x2c: f32
  if (data?.MaxLOD !== undefined) view.setFloat32(44, Number(data.MaxLOD), true);
  return buf;
}

export class D3D11_SAMPLER_DESCView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: i32
  get Filter(): number {
    return this.view.getInt32(0, true);
  }

  // 0x04: i32
  get AddressU(): number {
    return this.view.getInt32(4, true);
  }

  // 0x08: i32
  get AddressV(): number {
    return this.view.getInt32(8, true);
  }

  // 0x0c: i32
  get AddressW(): number {
    return this.view.getInt32(12, true);
  }

  // 0x10: f32
  get MipLODBias(): number {
    return this.view.getFloat32(16, true);
  }

  // 0x14: u32
  get MaxAnisotropy(): number {
    return this.view.getUint32(20, true);
  }

  // 0x18: i32
  get ComparisonFunc(): number {
    return this.view.getInt32(24, true);
  }

  // 0x1c: pad4

  // 0x20: pointer
  get BorderColor(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(32, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x28: f32
  get MinLOD(): number {
    return this.view.getFloat32(40, true);
  }

  // 0x2c: f32
  get MaxLOD(): number {
    return this.view.getFloat32(44, true);
  }

  // 0x00: i32
  set Filter(value: number) {
    this.view.setInt32(0, value, true);
  }

  // 0x04: i32
  set AddressU(value: number) {
    this.view.setInt32(4, value, true);
  }

  // 0x08: i32
  set AddressV(value: number) {
    this.view.setInt32(8, value, true);
  }

  // 0x0c: i32
  set AddressW(value: number) {
    this.view.setInt32(12, value, true);
  }

  // 0x10: f32
  set MipLODBias(value: number) {
    this.view.setFloat32(16, value, true);
  }

  // 0x14: u32
  set MaxAnisotropy(value: number) {
    this.view.setUint32(20, value, true);
  }

  // 0x18: i32
  set ComparisonFunc(value: number) {
    this.view.setInt32(24, value, true);
  }

  // 0x1c: pad4

  // 0x20: pointer
  set BorderColor(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(32, util.toBigInt(util.toPointer(value)), true);
  }

  // 0x28: f32
  set MinLOD(value: number) {
    this.view.setFloat32(40, value, true);
  }

  // 0x2c: f32
  set MaxLOD(value: number) {
    this.view.setFloat32(44, value, true);
  }
}

/**
 * Windows.Win32.Graphics.Direct3D11.D3D11_QUERY_DESC (size: 8)
 */
export interface D3D11_QUERY_DESC {
  /** Windows.Win32.Graphics.Direct3D11.D3D11_QUERY */
  Query: D3D11_QUERY;
  /** u32 */
  MiscFlags: number;
}

export const sizeofD3D11_QUERY_DESC = 8;

export function allocD3D11_QUERY_DESC(data?: Partial<D3D11_QUERY_DESC>): Uint8Array {
  const buf = new Uint8Array(sizeofD3D11_QUERY_DESC);
  const view = new DataView(buf.buffer);
  // 0x00: i32
  if (data?.Query !== undefined) view.setInt32(0, Number(data.Query), true);
  // 0x04: u32
  if (data?.MiscFlags !== undefined) view.setUint32(4, Number(data.MiscFlags), true);
  return buf;
}

export class D3D11_QUERY_DESCView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: i32
  get Query(): number {
    return this.view.getInt32(0, true);
  }

  // 0x04: u32
  get MiscFlags(): number {
    return this.view.getUint32(4, true);
  }

  // 0x00: i32
  set Query(value: number) {
    this.view.setInt32(0, value, true);
  }

  // 0x04: u32
  set MiscFlags(value: number) {
    this.view.setUint32(4, value, true);
  }
}

/**
 * Windows.Win32.Graphics.Direct3D11.D3D11_QUERY_DATA_TIMESTAMP_DISJOINT (size: 16)
 */
export interface D3D11_QUERY_DATA_TIMESTAMP_DISJOINT {
  /** u64 */
  Frequency: number | bigint;
  /** Windows.Win32.Foundation.BOOL */
  Disjoint: boolean;
}

export const sizeofD3D11_QUERY_DATA_TIMESTAMP_DISJOINT = 16;

export function allocD3D11_QUERY_DATA_TIMESTAMP_DISJOINT(data?: Partial<D3D11_QUERY_DATA_TIMESTAMP_DISJOINT>): Uint8Array {
  const buf = new Uint8Array(sizeofD3D11_QUERY_DATA_TIMESTAMP_DISJOINT);
  const view = new DataView(buf.buffer);
  // 0x00: u64
  if (data?.Frequency !== undefined) view.setBigUint64(0, util.toBigInt(data.Frequency), true);
  // 0x08: i32
  if (data?.Disjoint !== undefined) view.setInt32(8, Number(data.Disjoint), true);
  // 0x0c: pad4
  return buf;
}

export class D3D11_QUERY_DATA_TIMESTAMP_DISJOINTView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u64
  get Frequency(): number | bigint {
    return this.view.getBigUint64(0, true);
  }

  // 0x08: i32
  get Disjoint(): number {
    return this.view.getInt32(8, true);
  }

  // 0x0c: pad4

  // 0x00: u64
  set Frequency(value: number | bigint) {
    this.view.setBigUint64(0, util.toBigInt(value), true);
  }

  // 0x08: i32
  set Disjoint(value: number) {
    this.view.setInt32(8, value, true);
  }

  // 0x0c: pad4
}

/**
 * Windows.Win32.Graphics.Direct3D11.D3D11_QUERY_DATA_PIPELINE_STATISTICS (size: 88)
 */
export interface D3D11_QUERY_DATA_PIPELINE_STATISTICS {
  /** u64 */
  IAVertices: number | bigint;
  /** u64 */
  IAPrimitives: number | bigint;
  /** u64 */
  VSInvocations: number | bigint;
  /** u64 */
  GSInvocations: number | bigint;
  /** u64 */
  GSPrimitives: number | bigint;
  /** u64 */
  CInvocations: number | bigint;
  /** u64 */
  CPrimitives: number | bigint;
  /** u64 */
  PSInvocations: number | bigint;
  /** u64 */
  HSInvocations: number | bigint;
  /** u64 */
  DSInvocations: number | bigint;
  /** u64 */
  CSInvocations: number | bigint;
}

export const sizeofD3D11_QUERY_DATA_PIPELINE_STATISTICS = 88;

export function allocD3D11_QUERY_DATA_PIPELINE_STATISTICS(data?: Partial<D3D11_QUERY_DATA_PIPELINE_STATISTICS>): Uint8Array {
  const buf = new Uint8Array(sizeofD3D11_QUERY_DATA_PIPELINE_STATISTICS);
  const view = new DataView(buf.buffer);
  // 0x00: u64
  if (data?.IAVertices !== undefined) view.setBigUint64(0, util.toBigInt(data.IAVertices), true);
  // 0x08: u64
  if (data?.IAPrimitives !== undefined) view.setBigUint64(8, util.toBigInt(data.IAPrimitives), true);
  // 0x10: u64
  if (data?.VSInvocations !== undefined) view.setBigUint64(16, util.toBigInt(data.VSInvocations), true);
  // 0x18: u64
  if (data?.GSInvocations !== undefined) view.setBigUint64(24, util.toBigInt(data.GSInvocations), true);
  // 0x20: u64
  if (data?.GSPrimitives !== undefined) view.setBigUint64(32, util.toBigInt(data.GSPrimitives), true);
  // 0x28: u64
  if (data?.CInvocations !== undefined) view.setBigUint64(40, util.toBigInt(data.CInvocations), true);
  // 0x30: u64
  if (data?.CPrimitives !== undefined) view.setBigUint64(48, util.toBigInt(data.CPrimitives), true);
  // 0x38: u64
  if (data?.PSInvocations !== undefined) view.setBigUint64(56, util.toBigInt(data.PSInvocations), true);
  // 0x40: u64
  if (data?.HSInvocations !== undefined) view.setBigUint64(64, util.toBigInt(data.HSInvocations), true);
  // 0x48: u64
  if (data?.DSInvocations !== undefined) view.setBigUint64(72, util.toBigInt(data.DSInvocations), true);
  // 0x50: u64
  if (data?.CSInvocations !== undefined) view.setBigUint64(80, util.toBigInt(data.CSInvocations), true);
  return buf;
}

export class D3D11_QUERY_DATA_PIPELINE_STATISTICSView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u64
  get IAVertices(): number | bigint {
    return this.view.getBigUint64(0, true);
  }

  // 0x08: u64
  get IAPrimitives(): number | bigint {
    return this.view.getBigUint64(8, true);
  }

  // 0x10: u64
  get VSInvocations(): number | bigint {
    return this.view.getBigUint64(16, true);
  }

  // 0x18: u64
  get GSInvocations(): number | bigint {
    return this.view.getBigUint64(24, true);
  }

  // 0x20: u64
  get GSPrimitives(): number | bigint {
    return this.view.getBigUint64(32, true);
  }

  // 0x28: u64
  get CInvocations(): number | bigint {
    return this.view.getBigUint64(40, true);
  }

  // 0x30: u64
  get CPrimitives(): number | bigint {
    return this.view.getBigUint64(48, true);
  }

  // 0x38: u64
  get PSInvocations(): number | bigint {
    return this.view.getBigUint64(56, true);
  }

  // 0x40: u64
  get HSInvocations(): number | bigint {
    return this.view.getBigUint64(64, true);
  }

  // 0x48: u64
  get DSInvocations(): number | bigint {
    return this.view.getBigUint64(72, true);
  }

  // 0x50: u64
  get CSInvocations(): number | bigint {
    return this.view.getBigUint64(80, true);
  }

  // 0x00: u64
  set IAVertices(value: number | bigint) {
    this.view.setBigUint64(0, util.toBigInt(value), true);
  }

  // 0x08: u64
  set IAPrimitives(value: number | bigint) {
    this.view.setBigUint64(8, util.toBigInt(value), true);
  }

  // 0x10: u64
  set VSInvocations(value: number | bigint) {
    this.view.setBigUint64(16, util.toBigInt(value), true);
  }

  // 0x18: u64
  set GSInvocations(value: number | bigint) {
    this.view.setBigUint64(24, util.toBigInt(value), true);
  }

  // 0x20: u64
  set GSPrimitives(value: number | bigint) {
    this.view.setBigUint64(32, util.toBigInt(value), true);
  }

  // 0x28: u64
  set CInvocations(value: number | bigint) {
    this.view.setBigUint64(40, util.toBigInt(value), true);
  }

  // 0x30: u64
  set CPrimitives(value: number | bigint) {
    this.view.setBigUint64(48, util.toBigInt(value), true);
  }

  // 0x38: u64
  set PSInvocations(value: number | bigint) {
    this.view.setBigUint64(56, util.toBigInt(value), true);
  }

  // 0x40: u64
  set HSInvocations(value: number | bigint) {
    this.view.setBigUint64(64, util.toBigInt(value), true);
  }

  // 0x48: u64
  set DSInvocations(value: number | bigint) {
    this.view.setBigUint64(72, util.toBigInt(value), true);
  }

  // 0x50: u64
  set CSInvocations(value: number | bigint) {
    this.view.setBigUint64(80, util.toBigInt(value), true);
  }
}

/**
 * Windows.Win32.Graphics.Direct3D11.D3D11_QUERY_DATA_SO_STATISTICS (size: 16)
 */
export interface D3D11_QUERY_DATA_SO_STATISTICS {
  /** u64 */
  NumPrimitivesWritten: number | bigint;
  /** u64 */
  PrimitivesStorageNeeded: number | bigint;
}

export const sizeofD3D11_QUERY_DATA_SO_STATISTICS = 16;

export function allocD3D11_QUERY_DATA_SO_STATISTICS(data?: Partial<D3D11_QUERY_DATA_SO_STATISTICS>): Uint8Array {
  const buf = new Uint8Array(sizeofD3D11_QUERY_DATA_SO_STATISTICS);
  const view = new DataView(buf.buffer);
  // 0x00: u64
  if (data?.NumPrimitivesWritten !== undefined) view.setBigUint64(0, util.toBigInt(data.NumPrimitivesWritten), true);
  // 0x08: u64
  if (data?.PrimitivesStorageNeeded !== undefined) view.setBigUint64(8, util.toBigInt(data.PrimitivesStorageNeeded), true);
  return buf;
}

export class D3D11_QUERY_DATA_SO_STATISTICSView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u64
  get NumPrimitivesWritten(): number | bigint {
    return this.view.getBigUint64(0, true);
  }

  // 0x08: u64
  get PrimitivesStorageNeeded(): number | bigint {
    return this.view.getBigUint64(8, true);
  }

  // 0x00: u64
  set NumPrimitivesWritten(value: number | bigint) {
    this.view.setBigUint64(0, util.toBigInt(value), true);
  }

  // 0x08: u64
  set PrimitivesStorageNeeded(value: number | bigint) {
    this.view.setBigUint64(8, util.toBigInt(value), true);
  }
}

/**
 * Windows.Win32.Graphics.Direct3D11.D3D11_COUNTER_DESC (size: 8)
 */
export interface D3D11_COUNTER_DESC {
  /** Windows.Win32.Graphics.Direct3D11.D3D11_COUNTER */
  Counter: D3D11_COUNTER;
  /** u32 */
  MiscFlags: number;
}

export const sizeofD3D11_COUNTER_DESC = 8;

export function allocD3D11_COUNTER_DESC(data?: Partial<D3D11_COUNTER_DESC>): Uint8Array {
  const buf = new Uint8Array(sizeofD3D11_COUNTER_DESC);
  const view = new DataView(buf.buffer);
  // 0x00: i32
  if (data?.Counter !== undefined) view.setInt32(0, Number(data.Counter), true);
  // 0x04: u32
  if (data?.MiscFlags !== undefined) view.setUint32(4, Number(data.MiscFlags), true);
  return buf;
}

export class D3D11_COUNTER_DESCView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: i32
  get Counter(): number {
    return this.view.getInt32(0, true);
  }

  // 0x04: u32
  get MiscFlags(): number {
    return this.view.getUint32(4, true);
  }

  // 0x00: i32
  set Counter(value: number) {
    this.view.setInt32(0, value, true);
  }

  // 0x04: u32
  set MiscFlags(value: number) {
    this.view.setUint32(4, value, true);
  }
}

/**
 * Windows.Win32.Graphics.Direct3D11.D3D11_COUNTER_INFO (size: 16)
 */
export interface D3D11_COUNTER_INFO {
  /** Windows.Win32.Graphics.Direct3D11.D3D11_COUNTER */
  LastDeviceDependentCounter: D3D11_COUNTER;
  /** u32 */
  NumSimultaneousCounters: number;
  /** u8 */
  NumDetectableParallelUnits: number;
}

export const sizeofD3D11_COUNTER_INFO = 16;

export function allocD3D11_COUNTER_INFO(data?: Partial<D3D11_COUNTER_INFO>): Uint8Array {
  const buf = new Uint8Array(sizeofD3D11_COUNTER_INFO);
  const view = new DataView(buf.buffer);
  // 0x00: i32
  if (data?.LastDeviceDependentCounter !== undefined) view.setInt32(0, Number(data.LastDeviceDependentCounter), true);
  // 0x04: u32
  if (data?.NumSimultaneousCounters !== undefined) view.setUint32(4, Number(data.NumSimultaneousCounters), true);
  // 0x08: u8
  if (data?.NumDetectableParallelUnits !== undefined) view.setUint8(8, Number(data.NumDetectableParallelUnits));
  // 0x09: pad7
  return buf;
}

export class D3D11_COUNTER_INFOView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: i32
  get LastDeviceDependentCounter(): number {
    return this.view.getInt32(0, true);
  }

  // 0x04: u32
  get NumSimultaneousCounters(): number {
    return this.view.getUint32(4, true);
  }

  // 0x08: u8
  get NumDetectableParallelUnits(): number {
    return this.view.getUint8(8);
  }

  // 0x09: pad7

  // 0x00: i32
  set LastDeviceDependentCounter(value: number) {
    this.view.setInt32(0, value, true);
  }

  // 0x04: u32
  set NumSimultaneousCounters(value: number) {
    this.view.setUint32(4, value, true);
  }

  // 0x08: u8
  set NumDetectableParallelUnits(value: number) {
    this.view.setUint8(8, value);
  }

  // 0x09: pad7
}

/**
 * Windows.Win32.Graphics.Direct3D11.D3D11_CLASS_INSTANCE_DESC (size: 32)
 */
export interface D3D11_CLASS_INSTANCE_DESC {
  /** u32 */
  InstanceId: number;
  /** u32 */
  InstanceIndex: number;
  /** u32 */
  TypeId: number;
  /** u32 */
  ConstantBuffer: number;
  /** u32 */
  BaseConstantBufferOffset: number;
  /** u32 */
  BaseTexture: number;
  /** u32 */
  BaseSampler: number;
  /** Windows.Win32.Foundation.BOOL */
  Created: boolean;
}

export const sizeofD3D11_CLASS_INSTANCE_DESC = 32;

export function allocD3D11_CLASS_INSTANCE_DESC(data?: Partial<D3D11_CLASS_INSTANCE_DESC>): Uint8Array {
  const buf = new Uint8Array(sizeofD3D11_CLASS_INSTANCE_DESC);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.InstanceId !== undefined) view.setUint32(0, Number(data.InstanceId), true);
  // 0x04: u32
  if (data?.InstanceIndex !== undefined) view.setUint32(4, Number(data.InstanceIndex), true);
  // 0x08: u32
  if (data?.TypeId !== undefined) view.setUint32(8, Number(data.TypeId), true);
  // 0x0c: u32
  if (data?.ConstantBuffer !== undefined) view.setUint32(12, Number(data.ConstantBuffer), true);
  // 0x10: u32
  if (data?.BaseConstantBufferOffset !== undefined) view.setUint32(16, Number(data.BaseConstantBufferOffset), true);
  // 0x14: u32
  if (data?.BaseTexture !== undefined) view.setUint32(20, Number(data.BaseTexture), true);
  // 0x18: u32
  if (data?.BaseSampler !== undefined) view.setUint32(24, Number(data.BaseSampler), true);
  // 0x1c: i32
  if (data?.Created !== undefined) view.setInt32(28, Number(data.Created), true);
  return buf;
}

export class D3D11_CLASS_INSTANCE_DESCView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get InstanceId(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: u32
  get InstanceIndex(): number {
    return this.view.getUint32(4, true);
  }

  // 0x08: u32
  get TypeId(): number {
    return this.view.getUint32(8, true);
  }

  // 0x0c: u32
  get ConstantBuffer(): number {
    return this.view.getUint32(12, true);
  }

  // 0x10: u32
  get BaseConstantBufferOffset(): number {
    return this.view.getUint32(16, true);
  }

  // 0x14: u32
  get BaseTexture(): number {
    return this.view.getUint32(20, true);
  }

  // 0x18: u32
  get BaseSampler(): number {
    return this.view.getUint32(24, true);
  }

  // 0x1c: i32
  get Created(): number {
    return this.view.getInt32(28, true);
  }

  // 0x00: u32
  set InstanceId(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: u32
  set InstanceIndex(value: number) {
    this.view.setUint32(4, value, true);
  }

  // 0x08: u32
  set TypeId(value: number) {
    this.view.setUint32(8, value, true);
  }

  // 0x0c: u32
  set ConstantBuffer(value: number) {
    this.view.setUint32(12, value, true);
  }

  // 0x10: u32
  set BaseConstantBufferOffset(value: number) {
    this.view.setUint32(16, value, true);
  }

  // 0x14: u32
  set BaseTexture(value: number) {
    this.view.setUint32(20, value, true);
  }

  // 0x18: u32
  set BaseSampler(value: number) {
    this.view.setUint32(24, value, true);
  }

  // 0x1c: i32
  set Created(value: number) {
    this.view.setInt32(28, value, true);
  }
}

/**
 * Windows.Win32.Graphics.Direct3D11.D3D11_FEATURE_DATA_THREADING (size: 8)
 */
export interface D3D11_FEATURE_DATA_THREADING {
  /** Windows.Win32.Foundation.BOOL */
  DriverConcurrentCreates: boolean;
  /** Windows.Win32.Foundation.BOOL */
  DriverCommandLists: boolean;
}

export const sizeofD3D11_FEATURE_DATA_THREADING = 8;

export function allocD3D11_FEATURE_DATA_THREADING(data?: Partial<D3D11_FEATURE_DATA_THREADING>): Uint8Array {
  const buf = new Uint8Array(sizeofD3D11_FEATURE_DATA_THREADING);
  const view = new DataView(buf.buffer);
  // 0x00: i32
  if (data?.DriverConcurrentCreates !== undefined) view.setInt32(0, Number(data.DriverConcurrentCreates), true);
  // 0x04: i32
  if (data?.DriverCommandLists !== undefined) view.setInt32(4, Number(data.DriverCommandLists), true);
  return buf;
}

export class D3D11_FEATURE_DATA_THREADINGView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: i32
  get DriverConcurrentCreates(): number {
    return this.view.getInt32(0, true);
  }

  // 0x04: i32
  get DriverCommandLists(): number {
    return this.view.getInt32(4, true);
  }

  // 0x00: i32
  set DriverConcurrentCreates(value: number) {
    this.view.setInt32(0, value, true);
  }

  // 0x04: i32
  set DriverCommandLists(value: number) {
    this.view.setInt32(4, value, true);
  }
}

/**
 * Windows.Win32.Graphics.Direct3D11.D3D11_FEATURE_DATA_DOUBLES (size: 8)
 */
export interface D3D11_FEATURE_DATA_DOUBLES {
  /** Windows.Win32.Foundation.BOOL */
  DoublePrecisionFloatShaderOps: boolean;
}

export const sizeofD3D11_FEATURE_DATA_DOUBLES = 8;

export function allocD3D11_FEATURE_DATA_DOUBLES(data?: Partial<D3D11_FEATURE_DATA_DOUBLES>): Uint8Array {
  const buf = new Uint8Array(sizeofD3D11_FEATURE_DATA_DOUBLES);
  const view = new DataView(buf.buffer);
  // 0x00: i32
  if (data?.DoublePrecisionFloatShaderOps !== undefined) view.setInt32(0, Number(data.DoublePrecisionFloatShaderOps), true);
  // 0x04: pad4
  return buf;
}

export class D3D11_FEATURE_DATA_DOUBLESView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: i32
  get DoublePrecisionFloatShaderOps(): number {
    return this.view.getInt32(0, true);
  }

  // 0x04: pad4

  // 0x00: i32
  set DoublePrecisionFloatShaderOps(value: number) {
    this.view.setInt32(0, value, true);
  }

  // 0x04: pad4
}

/**
 * Windows.Win32.Graphics.Direct3D11.D3D11_FEATURE_DATA_FORMAT_SUPPORT (size: 8)
 */
export interface D3D11_FEATURE_DATA_FORMAT_SUPPORT {
  /** Windows.Win32.Graphics.Dxgi.Common.DXGI_FORMAT */
  InFormat: DXGI_FORMAT;
  /** u32 */
  OutFormatSupport: number;
}

export const sizeofD3D11_FEATURE_DATA_FORMAT_SUPPORT = 8;

export function allocD3D11_FEATURE_DATA_FORMAT_SUPPORT(data?: Partial<D3D11_FEATURE_DATA_FORMAT_SUPPORT>): Uint8Array {
  const buf = new Uint8Array(sizeofD3D11_FEATURE_DATA_FORMAT_SUPPORT);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.InFormat !== undefined) view.setUint32(0, Number(data.InFormat), true);
  // 0x04: u32
  if (data?.OutFormatSupport !== undefined) view.setUint32(4, Number(data.OutFormatSupport), true);
  return buf;
}

export class D3D11_FEATURE_DATA_FORMAT_SUPPORTView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get InFormat(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: u32
  get OutFormatSupport(): number {
    return this.view.getUint32(4, true);
  }

  // 0x00: u32
  set InFormat(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: u32
  set OutFormatSupport(value: number) {
    this.view.setUint32(4, value, true);
  }
}

/**
 * Windows.Win32.Graphics.Direct3D11.D3D11_FEATURE_DATA_FORMAT_SUPPORT2 (size: 8)
 */
export interface D3D11_FEATURE_DATA_FORMAT_SUPPORT2 {
  /** Windows.Win32.Graphics.Dxgi.Common.DXGI_FORMAT */
  InFormat: DXGI_FORMAT;
  /** u32 */
  OutFormatSupport2: number;
}

export const sizeofD3D11_FEATURE_DATA_FORMAT_SUPPORT2 = 8;

export function allocD3D11_FEATURE_DATA_FORMAT_SUPPORT2(data?: Partial<D3D11_FEATURE_DATA_FORMAT_SUPPORT2>): Uint8Array {
  const buf = new Uint8Array(sizeofD3D11_FEATURE_DATA_FORMAT_SUPPORT2);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.InFormat !== undefined) view.setUint32(0, Number(data.InFormat), true);
  // 0x04: u32
  if (data?.OutFormatSupport2 !== undefined) view.setUint32(4, Number(data.OutFormatSupport2), true);
  return buf;
}

export class D3D11_FEATURE_DATA_FORMAT_SUPPORT2View {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get InFormat(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: u32
  get OutFormatSupport2(): number {
    return this.view.getUint32(4, true);
  }

  // 0x00: u32
  set InFormat(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: u32
  set OutFormatSupport2(value: number) {
    this.view.setUint32(4, value, true);
  }
}

/**
 * Windows.Win32.Graphics.Direct3D11.D3D11_FEATURE_DATA_D3D10_X_HARDWARE_OPTIONS (size: 8)
 */
export interface D3D11_FEATURE_DATA_D3D10_X_HARDWARE_OPTIONS {
  /** Windows.Win32.Foundation.BOOL */
  ComputeShaders_Plus_RawAndStructuredBuffers_Via_Shader_4_x: boolean;
}

export const sizeofD3D11_FEATURE_DATA_D3D10_X_HARDWARE_OPTIONS = 8;

export function allocD3D11_FEATURE_DATA_D3D10_X_HARDWARE_OPTIONS(data?: Partial<D3D11_FEATURE_DATA_D3D10_X_HARDWARE_OPTIONS>): Uint8Array {
  const buf = new Uint8Array(sizeofD3D11_FEATURE_DATA_D3D10_X_HARDWARE_OPTIONS);
  const view = new DataView(buf.buffer);
  // 0x00: i32
  if (data?.ComputeShaders_Plus_RawAndStructuredBuffers_Via_Shader_4_x !== undefined) view.setInt32(0, Number(data.ComputeShaders_Plus_RawAndStructuredBuffers_Via_Shader_4_x), true);
  // 0x04: pad4
  return buf;
}

export class D3D11_FEATURE_DATA_D3D10_X_HARDWARE_OPTIONSView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: i32
  get ComputeShaders_Plus_RawAndStructuredBuffers_Via_Shader_4_x(): number {
    return this.view.getInt32(0, true);
  }

  // 0x04: pad4

  // 0x00: i32
  set ComputeShaders_Plus_RawAndStructuredBuffers_Via_Shader_4_x(value: number) {
    this.view.setInt32(0, value, true);
  }

  // 0x04: pad4
}

/**
 * Windows.Win32.Graphics.Direct3D11.D3D11_FEATURE_DATA_D3D11_OPTIONS (size: 56)
 */
export interface D3D11_FEATURE_DATA_D3D11_OPTIONS {
  /** Windows.Win32.Foundation.BOOL */
  OutputMergerLogicOp: boolean;
  /** Windows.Win32.Foundation.BOOL */
  UAVOnlyRenderingForcedSampleCount: boolean;
  /** Windows.Win32.Foundation.BOOL */
  DiscardAPIsSeenByDriver: boolean;
  /** Windows.Win32.Foundation.BOOL */
  FlagsForUpdateAndCopySeenByDriver: boolean;
  /** Windows.Win32.Foundation.BOOL */
  ClearView: boolean;
  /** Windows.Win32.Foundation.BOOL */
  CopyWithOverlap: boolean;
  /** Windows.Win32.Foundation.BOOL */
  ConstantBufferPartialUpdate: boolean;
  /** Windows.Win32.Foundation.BOOL */
  ConstantBufferOffsetting: boolean;
  /** Windows.Win32.Foundation.BOOL */
  MapNoOverwriteOnDynamicConstantBuffer: boolean;
  /** Windows.Win32.Foundation.BOOL */
  MapNoOverwriteOnDynamicBufferSRV: boolean;
  /** Windows.Win32.Foundation.BOOL */
  MultisampleRTVWithForcedSampleCountOne: boolean;
  /** Windows.Win32.Foundation.BOOL */
  SAD4ShaderInstructions: boolean;
  /** Windows.Win32.Foundation.BOOL */
  ExtendedDoublesShaderInstructions: boolean;
  /** Windows.Win32.Foundation.BOOL */
  ExtendedResourceSharing: boolean;
}

export const sizeofD3D11_FEATURE_DATA_D3D11_OPTIONS = 56;

export function allocD3D11_FEATURE_DATA_D3D11_OPTIONS(data?: Partial<D3D11_FEATURE_DATA_D3D11_OPTIONS>): Uint8Array {
  const buf = new Uint8Array(sizeofD3D11_FEATURE_DATA_D3D11_OPTIONS);
  const view = new DataView(buf.buffer);
  // 0x00: i32
  if (data?.OutputMergerLogicOp !== undefined) view.setInt32(0, Number(data.OutputMergerLogicOp), true);
  // 0x04: i32
  if (data?.UAVOnlyRenderingForcedSampleCount !== undefined) view.setInt32(4, Number(data.UAVOnlyRenderingForcedSampleCount), true);
  // 0x08: i32
  if (data?.DiscardAPIsSeenByDriver !== undefined) view.setInt32(8, Number(data.DiscardAPIsSeenByDriver), true);
  // 0x0c: i32
  if (data?.FlagsForUpdateAndCopySeenByDriver !== undefined) view.setInt32(12, Number(data.FlagsForUpdateAndCopySeenByDriver), true);
  // 0x10: i32
  if (data?.ClearView !== undefined) view.setInt32(16, Number(data.ClearView), true);
  // 0x14: i32
  if (data?.CopyWithOverlap !== undefined) view.setInt32(20, Number(data.CopyWithOverlap), true);
  // 0x18: i32
  if (data?.ConstantBufferPartialUpdate !== undefined) view.setInt32(24, Number(data.ConstantBufferPartialUpdate), true);
  // 0x1c: i32
  if (data?.ConstantBufferOffsetting !== undefined) view.setInt32(28, Number(data.ConstantBufferOffsetting), true);
  // 0x20: i32
  if (data?.MapNoOverwriteOnDynamicConstantBuffer !== undefined) view.setInt32(32, Number(data.MapNoOverwriteOnDynamicConstantBuffer), true);
  // 0x24: i32
  if (data?.MapNoOverwriteOnDynamicBufferSRV !== undefined) view.setInt32(36, Number(data.MapNoOverwriteOnDynamicBufferSRV), true);
  // 0x28: i32
  if (data?.MultisampleRTVWithForcedSampleCountOne !== undefined) view.setInt32(40, Number(data.MultisampleRTVWithForcedSampleCountOne), true);
  // 0x2c: i32
  if (data?.SAD4ShaderInstructions !== undefined) view.setInt32(44, Number(data.SAD4ShaderInstructions), true);
  // 0x30: i32
  if (data?.ExtendedDoublesShaderInstructions !== undefined) view.setInt32(48, Number(data.ExtendedDoublesShaderInstructions), true);
  // 0x34: i32
  if (data?.ExtendedResourceSharing !== undefined) view.setInt32(52, Number(data.ExtendedResourceSharing), true);
  return buf;
}

export class D3D11_FEATURE_DATA_D3D11_OPTIONSView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: i32
  get OutputMergerLogicOp(): number {
    return this.view.getInt32(0, true);
  }

  // 0x04: i32
  get UAVOnlyRenderingForcedSampleCount(): number {
    return this.view.getInt32(4, true);
  }

  // 0x08: i32
  get DiscardAPIsSeenByDriver(): number {
    return this.view.getInt32(8, true);
  }

  // 0x0c: i32
  get FlagsForUpdateAndCopySeenByDriver(): number {
    return this.view.getInt32(12, true);
  }

  // 0x10: i32
  get ClearView(): number {
    return this.view.getInt32(16, true);
  }

  // 0x14: i32
  get CopyWithOverlap(): number {
    return this.view.getInt32(20, true);
  }

  // 0x18: i32
  get ConstantBufferPartialUpdate(): number {
    return this.view.getInt32(24, true);
  }

  // 0x1c: i32
  get ConstantBufferOffsetting(): number {
    return this.view.getInt32(28, true);
  }

  // 0x20: i32
  get MapNoOverwriteOnDynamicConstantBuffer(): number {
    return this.view.getInt32(32, true);
  }

  // 0x24: i32
  get MapNoOverwriteOnDynamicBufferSRV(): number {
    return this.view.getInt32(36, true);
  }

  // 0x28: i32
  get MultisampleRTVWithForcedSampleCountOne(): number {
    return this.view.getInt32(40, true);
  }

  // 0x2c: i32
  get SAD4ShaderInstructions(): number {
    return this.view.getInt32(44, true);
  }

  // 0x30: i32
  get ExtendedDoublesShaderInstructions(): number {
    return this.view.getInt32(48, true);
  }

  // 0x34: i32
  get ExtendedResourceSharing(): number {
    return this.view.getInt32(52, true);
  }

  // 0x00: i32
  set OutputMergerLogicOp(value: number) {
    this.view.setInt32(0, value, true);
  }

  // 0x04: i32
  set UAVOnlyRenderingForcedSampleCount(value: number) {
    this.view.setInt32(4, value, true);
  }

  // 0x08: i32
  set DiscardAPIsSeenByDriver(value: number) {
    this.view.setInt32(8, value, true);
  }

  // 0x0c: i32
  set FlagsForUpdateAndCopySeenByDriver(value: number) {
    this.view.setInt32(12, value, true);
  }

  // 0x10: i32
  set ClearView(value: number) {
    this.view.setInt32(16, value, true);
  }

  // 0x14: i32
  set CopyWithOverlap(value: number) {
    this.view.setInt32(20, value, true);
  }

  // 0x18: i32
  set ConstantBufferPartialUpdate(value: number) {
    this.view.setInt32(24, value, true);
  }

  // 0x1c: i32
  set ConstantBufferOffsetting(value: number) {
    this.view.setInt32(28, value, true);
  }

  // 0x20: i32
  set MapNoOverwriteOnDynamicConstantBuffer(value: number) {
    this.view.setInt32(32, value, true);
  }

  // 0x24: i32
  set MapNoOverwriteOnDynamicBufferSRV(value: number) {
    this.view.setInt32(36, value, true);
  }

  // 0x28: i32
  set MultisampleRTVWithForcedSampleCountOne(value: number) {
    this.view.setInt32(40, value, true);
  }

  // 0x2c: i32
  set SAD4ShaderInstructions(value: number) {
    this.view.setInt32(44, value, true);
  }

  // 0x30: i32
  set ExtendedDoublesShaderInstructions(value: number) {
    this.view.setInt32(48, value, true);
  }

  // 0x34: i32
  set ExtendedResourceSharing(value: number) {
    this.view.setInt32(52, value, true);
  }
}

/**
 * Windows.Win32.Graphics.Direct3D11.D3D11_FEATURE_DATA_ARCHITECTURE_INFO (size: 8)
 */
export interface D3D11_FEATURE_DATA_ARCHITECTURE_INFO {
  /** Windows.Win32.Foundation.BOOL */
  TileBasedDeferredRenderer: boolean;
}

export const sizeofD3D11_FEATURE_DATA_ARCHITECTURE_INFO = 8;

export function allocD3D11_FEATURE_DATA_ARCHITECTURE_INFO(data?: Partial<D3D11_FEATURE_DATA_ARCHITECTURE_INFO>): Uint8Array {
  const buf = new Uint8Array(sizeofD3D11_FEATURE_DATA_ARCHITECTURE_INFO);
  const view = new DataView(buf.buffer);
  // 0x00: i32
  if (data?.TileBasedDeferredRenderer !== undefined) view.setInt32(0, Number(data.TileBasedDeferredRenderer), true);
  // 0x04: pad4
  return buf;
}

export class D3D11_FEATURE_DATA_ARCHITECTURE_INFOView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: i32
  get TileBasedDeferredRenderer(): number {
    return this.view.getInt32(0, true);
  }

  // 0x04: pad4

  // 0x00: i32
  set TileBasedDeferredRenderer(value: number) {
    this.view.setInt32(0, value, true);
  }

  // 0x04: pad4
}

/**
 * Windows.Win32.Graphics.Direct3D11.D3D11_FEATURE_DATA_D3D9_OPTIONS (size: 8)
 */
export interface D3D11_FEATURE_DATA_D3D9_OPTIONS {
  /** Windows.Win32.Foundation.BOOL */
  FullNonPow2TextureSupport: boolean;
}

export const sizeofD3D11_FEATURE_DATA_D3D9_OPTIONS = 8;

export function allocD3D11_FEATURE_DATA_D3D9_OPTIONS(data?: Partial<D3D11_FEATURE_DATA_D3D9_OPTIONS>): Uint8Array {
  const buf = new Uint8Array(sizeofD3D11_FEATURE_DATA_D3D9_OPTIONS);
  const view = new DataView(buf.buffer);
  // 0x00: i32
  if (data?.FullNonPow2TextureSupport !== undefined) view.setInt32(0, Number(data.FullNonPow2TextureSupport), true);
  // 0x04: pad4
  return buf;
}

export class D3D11_FEATURE_DATA_D3D9_OPTIONSView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: i32
  get FullNonPow2TextureSupport(): number {
    return this.view.getInt32(0, true);
  }

  // 0x04: pad4

  // 0x00: i32
  set FullNonPow2TextureSupport(value: number) {
    this.view.setInt32(0, value, true);
  }

  // 0x04: pad4
}

/**
 * Windows.Win32.Graphics.Direct3D11.D3D11_FEATURE_DATA_D3D9_SHADOW_SUPPORT (size: 8)
 */
export interface D3D11_FEATURE_DATA_D3D9_SHADOW_SUPPORT {
  /** Windows.Win32.Foundation.BOOL */
  SupportsDepthAsTextureWithLessEqualComparisonFilter: boolean;
}

export const sizeofD3D11_FEATURE_DATA_D3D9_SHADOW_SUPPORT = 8;

export function allocD3D11_FEATURE_DATA_D3D9_SHADOW_SUPPORT(data?: Partial<D3D11_FEATURE_DATA_D3D9_SHADOW_SUPPORT>): Uint8Array {
  const buf = new Uint8Array(sizeofD3D11_FEATURE_DATA_D3D9_SHADOW_SUPPORT);
  const view = new DataView(buf.buffer);
  // 0x00: i32
  if (data?.SupportsDepthAsTextureWithLessEqualComparisonFilter !== undefined) view.setInt32(0, Number(data.SupportsDepthAsTextureWithLessEqualComparisonFilter), true);
  // 0x04: pad4
  return buf;
}

export class D3D11_FEATURE_DATA_D3D9_SHADOW_SUPPORTView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: i32
  get SupportsDepthAsTextureWithLessEqualComparisonFilter(): number {
    return this.view.getInt32(0, true);
  }

  // 0x04: pad4

  // 0x00: i32
  set SupportsDepthAsTextureWithLessEqualComparisonFilter(value: number) {
    this.view.setInt32(0, value, true);
  }

  // 0x04: pad4
}

/**
 * Windows.Win32.Graphics.Direct3D11.D3D11_FEATURE_DATA_SHADER_MIN_PRECISION_SUPPORT (size: 8)
 */
export interface D3D11_FEATURE_DATA_SHADER_MIN_PRECISION_SUPPORT {
  /** u32 */
  PixelShaderMinPrecision: number;
  /** u32 */
  AllOtherShaderStagesMinPrecision: number;
}

export const sizeofD3D11_FEATURE_DATA_SHADER_MIN_PRECISION_SUPPORT = 8;

export function allocD3D11_FEATURE_DATA_SHADER_MIN_PRECISION_SUPPORT(data?: Partial<D3D11_FEATURE_DATA_SHADER_MIN_PRECISION_SUPPORT>): Uint8Array {
  const buf = new Uint8Array(sizeofD3D11_FEATURE_DATA_SHADER_MIN_PRECISION_SUPPORT);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.PixelShaderMinPrecision !== undefined) view.setUint32(0, Number(data.PixelShaderMinPrecision), true);
  // 0x04: u32
  if (data?.AllOtherShaderStagesMinPrecision !== undefined) view.setUint32(4, Number(data.AllOtherShaderStagesMinPrecision), true);
  return buf;
}

export class D3D11_FEATURE_DATA_SHADER_MIN_PRECISION_SUPPORTView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get PixelShaderMinPrecision(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: u32
  get AllOtherShaderStagesMinPrecision(): number {
    return this.view.getUint32(4, true);
  }

  // 0x00: u32
  set PixelShaderMinPrecision(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: u32
  set AllOtherShaderStagesMinPrecision(value: number) {
    this.view.setUint32(4, value, true);
  }
}

/**
 * Windows.Win32.Graphics.Direct3D11.D3D11_FEATURE_DATA_D3D11_OPTIONS1 (size: 16)
 */
export interface D3D11_FEATURE_DATA_D3D11_OPTIONS1 {
  /** Windows.Win32.Graphics.Direct3D11.D3D11_TILED_RESOURCES_TIER */
  TiledResourcesTier: D3D11_TILED_RESOURCES_TIER;
  /** Windows.Win32.Foundation.BOOL */
  MinMaxFiltering: boolean;
  /** Windows.Win32.Foundation.BOOL */
  ClearViewAlsoSupportsDepthOnlyFormats: boolean;
  /** Windows.Win32.Foundation.BOOL */
  MapOnDefaultBuffers: boolean;
}

export const sizeofD3D11_FEATURE_DATA_D3D11_OPTIONS1 = 16;

export function allocD3D11_FEATURE_DATA_D3D11_OPTIONS1(data?: Partial<D3D11_FEATURE_DATA_D3D11_OPTIONS1>): Uint8Array {
  const buf = new Uint8Array(sizeofD3D11_FEATURE_DATA_D3D11_OPTIONS1);
  const view = new DataView(buf.buffer);
  // 0x00: i32
  if (data?.TiledResourcesTier !== undefined) view.setInt32(0, Number(data.TiledResourcesTier), true);
  // 0x04: i32
  if (data?.MinMaxFiltering !== undefined) view.setInt32(4, Number(data.MinMaxFiltering), true);
  // 0x08: i32
  if (data?.ClearViewAlsoSupportsDepthOnlyFormats !== undefined) view.setInt32(8, Number(data.ClearViewAlsoSupportsDepthOnlyFormats), true);
  // 0x0c: i32
  if (data?.MapOnDefaultBuffers !== undefined) view.setInt32(12, Number(data.MapOnDefaultBuffers), true);
  return buf;
}

export class D3D11_FEATURE_DATA_D3D11_OPTIONS1View {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: i32
  get TiledResourcesTier(): number {
    return this.view.getInt32(0, true);
  }

  // 0x04: i32
  get MinMaxFiltering(): number {
    return this.view.getInt32(4, true);
  }

  // 0x08: i32
  get ClearViewAlsoSupportsDepthOnlyFormats(): number {
    return this.view.getInt32(8, true);
  }

  // 0x0c: i32
  get MapOnDefaultBuffers(): number {
    return this.view.getInt32(12, true);
  }

  // 0x00: i32
  set TiledResourcesTier(value: number) {
    this.view.setInt32(0, value, true);
  }

  // 0x04: i32
  set MinMaxFiltering(value: number) {
    this.view.setInt32(4, value, true);
  }

  // 0x08: i32
  set ClearViewAlsoSupportsDepthOnlyFormats(value: number) {
    this.view.setInt32(8, value, true);
  }

  // 0x0c: i32
  set MapOnDefaultBuffers(value: number) {
    this.view.setInt32(12, value, true);
  }
}

/**
 * Windows.Win32.Graphics.Direct3D11.D3D11_FEATURE_DATA_D3D9_SIMPLE_INSTANCING_SUPPORT (size: 8)
 */
export interface D3D11_FEATURE_DATA_D3D9_SIMPLE_INSTANCING_SUPPORT {
  /** Windows.Win32.Foundation.BOOL */
  SimpleInstancingSupported: boolean;
}

export const sizeofD3D11_FEATURE_DATA_D3D9_SIMPLE_INSTANCING_SUPPORT = 8;

export function allocD3D11_FEATURE_DATA_D3D9_SIMPLE_INSTANCING_SUPPORT(data?: Partial<D3D11_FEATURE_DATA_D3D9_SIMPLE_INSTANCING_SUPPORT>): Uint8Array {
  const buf = new Uint8Array(sizeofD3D11_FEATURE_DATA_D3D9_SIMPLE_INSTANCING_SUPPORT);
  const view = new DataView(buf.buffer);
  // 0x00: i32
  if (data?.SimpleInstancingSupported !== undefined) view.setInt32(0, Number(data.SimpleInstancingSupported), true);
  // 0x04: pad4
  return buf;
}

export class D3D11_FEATURE_DATA_D3D9_SIMPLE_INSTANCING_SUPPORTView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: i32
  get SimpleInstancingSupported(): number {
    return this.view.getInt32(0, true);
  }

  // 0x04: pad4

  // 0x00: i32
  set SimpleInstancingSupported(value: number) {
    this.view.setInt32(0, value, true);
  }

  // 0x04: pad4
}

/**
 * Windows.Win32.Graphics.Direct3D11.D3D11_FEATURE_DATA_MARKER_SUPPORT (size: 8)
 */
export interface D3D11_FEATURE_DATA_MARKER_SUPPORT {
  /** Windows.Win32.Foundation.BOOL */
  Profile: boolean;
}

export const sizeofD3D11_FEATURE_DATA_MARKER_SUPPORT = 8;

export function allocD3D11_FEATURE_DATA_MARKER_SUPPORT(data?: Partial<D3D11_FEATURE_DATA_MARKER_SUPPORT>): Uint8Array {
  const buf = new Uint8Array(sizeofD3D11_FEATURE_DATA_MARKER_SUPPORT);
  const view = new DataView(buf.buffer);
  // 0x00: i32
  if (data?.Profile !== undefined) view.setInt32(0, Number(data.Profile), true);
  // 0x04: pad4
  return buf;
}

export class D3D11_FEATURE_DATA_MARKER_SUPPORTView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: i32
  get Profile(): number {
    return this.view.getInt32(0, true);
  }

  // 0x04: pad4

  // 0x00: i32
  set Profile(value: number) {
    this.view.setInt32(0, value, true);
  }

  // 0x04: pad4
}

/**
 * Windows.Win32.Graphics.Direct3D11.D3D11_FEATURE_DATA_D3D9_OPTIONS1 (size: 16)
 */
export interface D3D11_FEATURE_DATA_D3D9_OPTIONS1 {
  /** Windows.Win32.Foundation.BOOL */
  FullNonPow2TextureSupported: boolean;
  /** Windows.Win32.Foundation.BOOL */
  DepthAsTextureWithLessEqualComparisonFilterSupported: boolean;
  /** Windows.Win32.Foundation.BOOL */
  SimpleInstancingSupported: boolean;
  /** Windows.Win32.Foundation.BOOL */
  TextureCubeFaceRenderTargetWithNonCubeDepthStencilSupported: boolean;
}

export const sizeofD3D11_FEATURE_DATA_D3D9_OPTIONS1 = 16;

export function allocD3D11_FEATURE_DATA_D3D9_OPTIONS1(data?: Partial<D3D11_FEATURE_DATA_D3D9_OPTIONS1>): Uint8Array {
  const buf = new Uint8Array(sizeofD3D11_FEATURE_DATA_D3D9_OPTIONS1);
  const view = new DataView(buf.buffer);
  // 0x00: i32
  if (data?.FullNonPow2TextureSupported !== undefined) view.setInt32(0, Number(data.FullNonPow2TextureSupported), true);
  // 0x04: i32
  if (data?.DepthAsTextureWithLessEqualComparisonFilterSupported !== undefined) view.setInt32(4, Number(data.DepthAsTextureWithLessEqualComparisonFilterSupported), true);
  // 0x08: i32
  if (data?.SimpleInstancingSupported !== undefined) view.setInt32(8, Number(data.SimpleInstancingSupported), true);
  // 0x0c: i32
  if (data?.TextureCubeFaceRenderTargetWithNonCubeDepthStencilSupported !== undefined) view.setInt32(12, Number(data.TextureCubeFaceRenderTargetWithNonCubeDepthStencilSupported), true);
  return buf;
}

export class D3D11_FEATURE_DATA_D3D9_OPTIONS1View {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: i32
  get FullNonPow2TextureSupported(): number {
    return this.view.getInt32(0, true);
  }

  // 0x04: i32
  get DepthAsTextureWithLessEqualComparisonFilterSupported(): number {
    return this.view.getInt32(4, true);
  }

  // 0x08: i32
  get SimpleInstancingSupported(): number {
    return this.view.getInt32(8, true);
  }

  // 0x0c: i32
  get TextureCubeFaceRenderTargetWithNonCubeDepthStencilSupported(): number {
    return this.view.getInt32(12, true);
  }

  // 0x00: i32
  set FullNonPow2TextureSupported(value: number) {
    this.view.setInt32(0, value, true);
  }

  // 0x04: i32
  set DepthAsTextureWithLessEqualComparisonFilterSupported(value: number) {
    this.view.setInt32(4, value, true);
  }

  // 0x08: i32
  set SimpleInstancingSupported(value: number) {
    this.view.setInt32(8, value, true);
  }

  // 0x0c: i32
  set TextureCubeFaceRenderTargetWithNonCubeDepthStencilSupported(value: number) {
    this.view.setInt32(12, value, true);
  }
}

/**
 * Windows.Win32.Graphics.Direct3D11.D3D11_FEATURE_DATA_D3D11_OPTIONS2 (size: 32)
 */
export interface D3D11_FEATURE_DATA_D3D11_OPTIONS2 {
  /** Windows.Win32.Foundation.BOOL */
  PSSpecifiedStencilRefSupported: boolean;
  /** Windows.Win32.Foundation.BOOL */
  TypedUAVLoadAdditionalFormats: boolean;
  /** Windows.Win32.Foundation.BOOL */
  ROVsSupported: boolean;
  /** Windows.Win32.Graphics.Direct3D11.D3D11_CONSERVATIVE_RASTERIZATION_TIER */
  ConservativeRasterizationTier: D3D11_CONSERVATIVE_RASTERIZATION_TIER;
  /** Windows.Win32.Graphics.Direct3D11.D3D11_TILED_RESOURCES_TIER */
  TiledResourcesTier: D3D11_TILED_RESOURCES_TIER;
  /** Windows.Win32.Foundation.BOOL */
  MapOnDefaultTextures: boolean;
  /** Windows.Win32.Foundation.BOOL */
  StandardSwizzle: boolean;
  /** Windows.Win32.Foundation.BOOL */
  UnifiedMemoryArchitecture: boolean;
}

export const sizeofD3D11_FEATURE_DATA_D3D11_OPTIONS2 = 32;

export function allocD3D11_FEATURE_DATA_D3D11_OPTIONS2(data?: Partial<D3D11_FEATURE_DATA_D3D11_OPTIONS2>): Uint8Array {
  const buf = new Uint8Array(sizeofD3D11_FEATURE_DATA_D3D11_OPTIONS2);
  const view = new DataView(buf.buffer);
  // 0x00: i32
  if (data?.PSSpecifiedStencilRefSupported !== undefined) view.setInt32(0, Number(data.PSSpecifiedStencilRefSupported), true);
  // 0x04: i32
  if (data?.TypedUAVLoadAdditionalFormats !== undefined) view.setInt32(4, Number(data.TypedUAVLoadAdditionalFormats), true);
  // 0x08: i32
  if (data?.ROVsSupported !== undefined) view.setInt32(8, Number(data.ROVsSupported), true);
  // 0x0c: i32
  if (data?.ConservativeRasterizationTier !== undefined) view.setInt32(12, Number(data.ConservativeRasterizationTier), true);
  // 0x10: i32
  if (data?.TiledResourcesTier !== undefined) view.setInt32(16, Number(data.TiledResourcesTier), true);
  // 0x14: i32
  if (data?.MapOnDefaultTextures !== undefined) view.setInt32(20, Number(data.MapOnDefaultTextures), true);
  // 0x18: i32
  if (data?.StandardSwizzle !== undefined) view.setInt32(24, Number(data.StandardSwizzle), true);
  // 0x1c: i32
  if (data?.UnifiedMemoryArchitecture !== undefined) view.setInt32(28, Number(data.UnifiedMemoryArchitecture), true);
  return buf;
}

export class D3D11_FEATURE_DATA_D3D11_OPTIONS2View {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: i32
  get PSSpecifiedStencilRefSupported(): number {
    return this.view.getInt32(0, true);
  }

  // 0x04: i32
  get TypedUAVLoadAdditionalFormats(): number {
    return this.view.getInt32(4, true);
  }

  // 0x08: i32
  get ROVsSupported(): number {
    return this.view.getInt32(8, true);
  }

  // 0x0c: i32
  get ConservativeRasterizationTier(): number {
    return this.view.getInt32(12, true);
  }

  // 0x10: i32
  get TiledResourcesTier(): number {
    return this.view.getInt32(16, true);
  }

  // 0x14: i32
  get MapOnDefaultTextures(): number {
    return this.view.getInt32(20, true);
  }

  // 0x18: i32
  get StandardSwizzle(): number {
    return this.view.getInt32(24, true);
  }

  // 0x1c: i32
  get UnifiedMemoryArchitecture(): number {
    return this.view.getInt32(28, true);
  }

  // 0x00: i32
  set PSSpecifiedStencilRefSupported(value: number) {
    this.view.setInt32(0, value, true);
  }

  // 0x04: i32
  set TypedUAVLoadAdditionalFormats(value: number) {
    this.view.setInt32(4, value, true);
  }

  // 0x08: i32
  set ROVsSupported(value: number) {
    this.view.setInt32(8, value, true);
  }

  // 0x0c: i32
  set ConservativeRasterizationTier(value: number) {
    this.view.setInt32(12, value, true);
  }

  // 0x10: i32
  set TiledResourcesTier(value: number) {
    this.view.setInt32(16, value, true);
  }

  // 0x14: i32
  set MapOnDefaultTextures(value: number) {
    this.view.setInt32(20, value, true);
  }

  // 0x18: i32
  set StandardSwizzle(value: number) {
    this.view.setInt32(24, value, true);
  }

  // 0x1c: i32
  set UnifiedMemoryArchitecture(value: number) {
    this.view.setInt32(28, value, true);
  }
}

/**
 * Windows.Win32.Graphics.Direct3D11.D3D11_FEATURE_DATA_D3D11_OPTIONS3 (size: 8)
 */
export interface D3D11_FEATURE_DATA_D3D11_OPTIONS3 {
  /** Windows.Win32.Foundation.BOOL */
  VPAndRTArrayIndexFromAnyShaderFeedingRasterizer: boolean;
}

export const sizeofD3D11_FEATURE_DATA_D3D11_OPTIONS3 = 8;

export function allocD3D11_FEATURE_DATA_D3D11_OPTIONS3(data?: Partial<D3D11_FEATURE_DATA_D3D11_OPTIONS3>): Uint8Array {
  const buf = new Uint8Array(sizeofD3D11_FEATURE_DATA_D3D11_OPTIONS3);
  const view = new DataView(buf.buffer);
  // 0x00: i32
  if (data?.VPAndRTArrayIndexFromAnyShaderFeedingRasterizer !== undefined) view.setInt32(0, Number(data.VPAndRTArrayIndexFromAnyShaderFeedingRasterizer), true);
  // 0x04: pad4
  return buf;
}

export class D3D11_FEATURE_DATA_D3D11_OPTIONS3View {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: i32
  get VPAndRTArrayIndexFromAnyShaderFeedingRasterizer(): number {
    return this.view.getInt32(0, true);
  }

  // 0x04: pad4

  // 0x00: i32
  set VPAndRTArrayIndexFromAnyShaderFeedingRasterizer(value: number) {
    this.view.setInt32(0, value, true);
  }

  // 0x04: pad4
}

/**
 * Windows.Win32.Graphics.Direct3D11.D3D11_FEATURE_DATA_GPU_VIRTUAL_ADDRESS_SUPPORT (size: 8)
 */
export interface D3D11_FEATURE_DATA_GPU_VIRTUAL_ADDRESS_SUPPORT {
  /** u32 */
  MaxGPUVirtualAddressBitsPerResource: number;
  /** u32 */
  MaxGPUVirtualAddressBitsPerProcess: number;
}

export const sizeofD3D11_FEATURE_DATA_GPU_VIRTUAL_ADDRESS_SUPPORT = 8;

export function allocD3D11_FEATURE_DATA_GPU_VIRTUAL_ADDRESS_SUPPORT(data?: Partial<D3D11_FEATURE_DATA_GPU_VIRTUAL_ADDRESS_SUPPORT>): Uint8Array {
  const buf = new Uint8Array(sizeofD3D11_FEATURE_DATA_GPU_VIRTUAL_ADDRESS_SUPPORT);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.MaxGPUVirtualAddressBitsPerResource !== undefined) view.setUint32(0, Number(data.MaxGPUVirtualAddressBitsPerResource), true);
  // 0x04: u32
  if (data?.MaxGPUVirtualAddressBitsPerProcess !== undefined) view.setUint32(4, Number(data.MaxGPUVirtualAddressBitsPerProcess), true);
  return buf;
}

export class D3D11_FEATURE_DATA_GPU_VIRTUAL_ADDRESS_SUPPORTView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get MaxGPUVirtualAddressBitsPerResource(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: u32
  get MaxGPUVirtualAddressBitsPerProcess(): number {
    return this.view.getUint32(4, true);
  }

  // 0x00: u32
  set MaxGPUVirtualAddressBitsPerResource(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: u32
  set MaxGPUVirtualAddressBitsPerProcess(value: number) {
    this.view.setUint32(4, value, true);
  }
}

/**
 * Windows.Win32.Graphics.Direct3D11.D3D11_FEATURE_DATA_SHADER_CACHE (size: 8)
 */
export interface D3D11_FEATURE_DATA_SHADER_CACHE {
  /** u32 */
  SupportFlags: number;
}

export const sizeofD3D11_FEATURE_DATA_SHADER_CACHE = 8;

export function allocD3D11_FEATURE_DATA_SHADER_CACHE(data?: Partial<D3D11_FEATURE_DATA_SHADER_CACHE>): Uint8Array {
  const buf = new Uint8Array(sizeofD3D11_FEATURE_DATA_SHADER_CACHE);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.SupportFlags !== undefined) view.setUint32(0, Number(data.SupportFlags), true);
  // 0x04: pad4
  return buf;
}

export class D3D11_FEATURE_DATA_SHADER_CACHEView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get SupportFlags(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: pad4

  // 0x00: u32
  set SupportFlags(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: pad4
}

/**
 * Windows.Win32.Graphics.Direct3D11.D3D11_FEATURE_DATA_DISPLAYABLE (size: 8)
 */
export interface D3D11_FEATURE_DATA_DISPLAYABLE {
  /** Windows.Win32.Foundation.BOOL */
  DisplayableTexture: boolean;
  /** Windows.Win32.Graphics.Direct3D11.D3D11_SHARED_RESOURCE_TIER */
  SharedResourceTier: D3D11_SHARED_RESOURCE_TIER;
}

export const sizeofD3D11_FEATURE_DATA_DISPLAYABLE = 8;

export function allocD3D11_FEATURE_DATA_DISPLAYABLE(data?: Partial<D3D11_FEATURE_DATA_DISPLAYABLE>): Uint8Array {
  const buf = new Uint8Array(sizeofD3D11_FEATURE_DATA_DISPLAYABLE);
  const view = new DataView(buf.buffer);
  // 0x00: i32
  if (data?.DisplayableTexture !== undefined) view.setInt32(0, Number(data.DisplayableTexture), true);
  // 0x04: i32
  if (data?.SharedResourceTier !== undefined) view.setInt32(4, Number(data.SharedResourceTier), true);
  return buf;
}

export class D3D11_FEATURE_DATA_DISPLAYABLEView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: i32
  get DisplayableTexture(): number {
    return this.view.getInt32(0, true);
  }

  // 0x04: i32
  get SharedResourceTier(): number {
    return this.view.getInt32(4, true);
  }

  // 0x00: i32
  set DisplayableTexture(value: number) {
    this.view.setInt32(0, value, true);
  }

  // 0x04: i32
  set SharedResourceTier(value: number) {
    this.view.setInt32(4, value, true);
  }
}

/**
 * Windows.Win32.Graphics.Direct3D11.D3D11_FEATURE_DATA_D3D11_OPTIONS5 (size: 8)
 */
export interface D3D11_FEATURE_DATA_D3D11_OPTIONS5 {
  /** Windows.Win32.Graphics.Direct3D11.D3D11_SHARED_RESOURCE_TIER */
  SharedResourceTier: D3D11_SHARED_RESOURCE_TIER;
}

export const sizeofD3D11_FEATURE_DATA_D3D11_OPTIONS5 = 8;

export function allocD3D11_FEATURE_DATA_D3D11_OPTIONS5(data?: Partial<D3D11_FEATURE_DATA_D3D11_OPTIONS5>): Uint8Array {
  const buf = new Uint8Array(sizeofD3D11_FEATURE_DATA_D3D11_OPTIONS5);
  const view = new DataView(buf.buffer);
  // 0x00: i32
  if (data?.SharedResourceTier !== undefined) view.setInt32(0, Number(data.SharedResourceTier), true);
  // 0x04: pad4
  return buf;
}

export class D3D11_FEATURE_DATA_D3D11_OPTIONS5View {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: i32
  get SharedResourceTier(): number {
    return this.view.getInt32(0, true);
  }

  // 0x04: pad4

  // 0x00: i32
  set SharedResourceTier(value: number) {
    this.view.setInt32(0, value, true);
  }

  // 0x04: pad4
}

/**
 * Windows.Win32.Graphics.Direct3D11.D3D11_VIDEO_DECODER_DESC (size: 24)
 */
export interface D3D11_VIDEO_DECODER_DESC {
  /** System.Guid */
  Guid: Uint8Array | Deno.PointerValue | null;
  /** u32 */
  SampleWidth: number;
  /** u32 */
  SampleHeight: number;
  /** Windows.Win32.Graphics.Dxgi.Common.DXGI_FORMAT */
  OutputFormat: DXGI_FORMAT;
}

export const sizeofD3D11_VIDEO_DECODER_DESC = 24;

export function allocD3D11_VIDEO_DECODER_DESC(data?: Partial<D3D11_VIDEO_DECODER_DESC>): Uint8Array {
  const buf = new Uint8Array(sizeofD3D11_VIDEO_DECODER_DESC);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.Guid !== undefined) view.setBigUint64(0, data.Guid === null ? 0n : util.toBigInt(util.toPointer(data.Guid)), true);
  // 0x08: u32
  if (data?.SampleWidth !== undefined) view.setUint32(8, Number(data.SampleWidth), true);
  // 0x0c: u32
  if (data?.SampleHeight !== undefined) view.setUint32(12, Number(data.SampleHeight), true);
  // 0x10: u32
  if (data?.OutputFormat !== undefined) view.setUint32(16, Number(data.OutputFormat), true);
  // 0x14: pad4
  return buf;
}

export class D3D11_VIDEO_DECODER_DESCView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get Guid(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(0, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x08: u32
  get SampleWidth(): number {
    return this.view.getUint32(8, true);
  }

  // 0x0c: u32
  get SampleHeight(): number {
    return this.view.getUint32(12, true);
  }

  // 0x10: u32
  get OutputFormat(): number {
    return this.view.getUint32(16, true);
  }

  // 0x14: pad4

  // 0x00: pointer
  set Guid(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(0, util.toBigInt(util.toPointer(value)), true);
  }

  // 0x08: u32
  set SampleWidth(value: number) {
    this.view.setUint32(8, value, true);
  }

  // 0x0c: u32
  set SampleHeight(value: number) {
    this.view.setUint32(12, value, true);
  }

  // 0x10: u32
  set OutputFormat(value: number) {
    this.view.setUint32(16, value, true);
  }

  // 0x14: pad4
}

/**
 * Windows.Win32.Graphics.Direct3D11.D3D11_VIDEO_DECODER_CONFIG (size: 80)
 */
export interface D3D11_VIDEO_DECODER_CONFIG {
  /** System.Guid */
  guidConfigBitstreamEncryption: Uint8Array | Deno.PointerValue | null;
  /** System.Guid */
  guidConfigMBcontrolEncryption: Uint8Array | Deno.PointerValue | null;
  /** System.Guid */
  guidConfigResidDiffEncryption: Uint8Array | Deno.PointerValue | null;
  /** u32 */
  ConfigBitstreamRaw: number;
  /** u32 */
  ConfigMBcontrolRasterOrder: number;
  /** u32 */
  ConfigResidDiffHost: number;
  /** u32 */
  ConfigSpatialResid8: number;
  /** u32 */
  ConfigResid8Subtraction: number;
  /** u32 */
  ConfigSpatialHost8or9Clipping: number;
  /** u32 */
  ConfigSpatialResidInterleaved: number;
  /** u32 */
  ConfigIntraResidUnsigned: number;
  /** u32 */
  ConfigResidDiffAccelerator: number;
  /** u32 */
  ConfigHostInverseScan: number;
  /** u32 */
  ConfigSpecificIDCT: number;
  /** u32 */
  Config4GroupedCoefs: number;
  /** u16 */
  ConfigMinRenderTargetBuffCount: number;
  /** u16 */
  ConfigDecoderSpecific: number;
}

export const sizeofD3D11_VIDEO_DECODER_CONFIG = 80;

export function allocD3D11_VIDEO_DECODER_CONFIG(data?: Partial<D3D11_VIDEO_DECODER_CONFIG>): Uint8Array {
  const buf = new Uint8Array(sizeofD3D11_VIDEO_DECODER_CONFIG);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.guidConfigBitstreamEncryption !== undefined) view.setBigUint64(0, data.guidConfigBitstreamEncryption === null ? 0n : util.toBigInt(util.toPointer(data.guidConfigBitstreamEncryption)), true);
  // 0x08: pointer
  if (data?.guidConfigMBcontrolEncryption !== undefined) view.setBigUint64(8, data.guidConfigMBcontrolEncryption === null ? 0n : util.toBigInt(util.toPointer(data.guidConfigMBcontrolEncryption)), true);
  // 0x10: pointer
  if (data?.guidConfigResidDiffEncryption !== undefined) view.setBigUint64(16, data.guidConfigResidDiffEncryption === null ? 0n : util.toBigInt(util.toPointer(data.guidConfigResidDiffEncryption)), true);
  // 0x18: u32
  if (data?.ConfigBitstreamRaw !== undefined) view.setUint32(24, Number(data.ConfigBitstreamRaw), true);
  // 0x1c: u32
  if (data?.ConfigMBcontrolRasterOrder !== undefined) view.setUint32(28, Number(data.ConfigMBcontrolRasterOrder), true);
  // 0x20: u32
  if (data?.ConfigResidDiffHost !== undefined) view.setUint32(32, Number(data.ConfigResidDiffHost), true);
  // 0x24: u32
  if (data?.ConfigSpatialResid8 !== undefined) view.setUint32(36, Number(data.ConfigSpatialResid8), true);
  // 0x28: u32
  if (data?.ConfigResid8Subtraction !== undefined) view.setUint32(40, Number(data.ConfigResid8Subtraction), true);
  // 0x2c: u32
  if (data?.ConfigSpatialHost8or9Clipping !== undefined) view.setUint32(44, Number(data.ConfigSpatialHost8or9Clipping), true);
  // 0x30: u32
  if (data?.ConfigSpatialResidInterleaved !== undefined) view.setUint32(48, Number(data.ConfigSpatialResidInterleaved), true);
  // 0x34: u32
  if (data?.ConfigIntraResidUnsigned !== undefined) view.setUint32(52, Number(data.ConfigIntraResidUnsigned), true);
  // 0x38: u32
  if (data?.ConfigResidDiffAccelerator !== undefined) view.setUint32(56, Number(data.ConfigResidDiffAccelerator), true);
  // 0x3c: u32
  if (data?.ConfigHostInverseScan !== undefined) view.setUint32(60, Number(data.ConfigHostInverseScan), true);
  // 0x40: u32
  if (data?.ConfigSpecificIDCT !== undefined) view.setUint32(64, Number(data.ConfigSpecificIDCT), true);
  // 0x44: u32
  if (data?.Config4GroupedCoefs !== undefined) view.setUint32(68, Number(data.Config4GroupedCoefs), true);
  // 0x48: u16
  if (data?.ConfigMinRenderTargetBuffCount !== undefined) view.setUint16(72, Number(data.ConfigMinRenderTargetBuffCount), true);
  // 0x4a: u16
  if (data?.ConfigDecoderSpecific !== undefined) view.setUint16(74, Number(data.ConfigDecoderSpecific), true);
  // 0x4c: pad4
  return buf;
}

export class D3D11_VIDEO_DECODER_CONFIGView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get guidConfigBitstreamEncryption(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(0, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x08: pointer
  get guidConfigMBcontrolEncryption(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(8, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x10: pointer
  get guidConfigResidDiffEncryption(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(16, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x18: u32
  get ConfigBitstreamRaw(): number {
    return this.view.getUint32(24, true);
  }

  // 0x1c: u32
  get ConfigMBcontrolRasterOrder(): number {
    return this.view.getUint32(28, true);
  }

  // 0x20: u32
  get ConfigResidDiffHost(): number {
    return this.view.getUint32(32, true);
  }

  // 0x24: u32
  get ConfigSpatialResid8(): number {
    return this.view.getUint32(36, true);
  }

  // 0x28: u32
  get ConfigResid8Subtraction(): number {
    return this.view.getUint32(40, true);
  }

  // 0x2c: u32
  get ConfigSpatialHost8or9Clipping(): number {
    return this.view.getUint32(44, true);
  }

  // 0x30: u32
  get ConfigSpatialResidInterleaved(): number {
    return this.view.getUint32(48, true);
  }

  // 0x34: u32
  get ConfigIntraResidUnsigned(): number {
    return this.view.getUint32(52, true);
  }

  // 0x38: u32
  get ConfigResidDiffAccelerator(): number {
    return this.view.getUint32(56, true);
  }

  // 0x3c: u32
  get ConfigHostInverseScan(): number {
    return this.view.getUint32(60, true);
  }

  // 0x40: u32
  get ConfigSpecificIDCT(): number {
    return this.view.getUint32(64, true);
  }

  // 0x44: u32
  get Config4GroupedCoefs(): number {
    return this.view.getUint32(68, true);
  }

  // 0x48: u16
  get ConfigMinRenderTargetBuffCount(): number {
    return this.view.getUint16(72, true);
  }

  // 0x4a: u16
  get ConfigDecoderSpecific(): number {
    return this.view.getUint16(74, true);
  }

  // 0x4c: pad4

  // 0x00: pointer
  set guidConfigBitstreamEncryption(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(0, util.toBigInt(util.toPointer(value)), true);
  }

  // 0x08: pointer
  set guidConfigMBcontrolEncryption(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(8, util.toBigInt(util.toPointer(value)), true);
  }

  // 0x10: pointer
  set guidConfigResidDiffEncryption(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(16, util.toBigInt(util.toPointer(value)), true);
  }

  // 0x18: u32
  set ConfigBitstreamRaw(value: number) {
    this.view.setUint32(24, value, true);
  }

  // 0x1c: u32
  set ConfigMBcontrolRasterOrder(value: number) {
    this.view.setUint32(28, value, true);
  }

  // 0x20: u32
  set ConfigResidDiffHost(value: number) {
    this.view.setUint32(32, value, true);
  }

  // 0x24: u32
  set ConfigSpatialResid8(value: number) {
    this.view.setUint32(36, value, true);
  }

  // 0x28: u32
  set ConfigResid8Subtraction(value: number) {
    this.view.setUint32(40, value, true);
  }

  // 0x2c: u32
  set ConfigSpatialHost8or9Clipping(value: number) {
    this.view.setUint32(44, value, true);
  }

  // 0x30: u32
  set ConfigSpatialResidInterleaved(value: number) {
    this.view.setUint32(48, value, true);
  }

  // 0x34: u32
  set ConfigIntraResidUnsigned(value: number) {
    this.view.setUint32(52, value, true);
  }

  // 0x38: u32
  set ConfigResidDiffAccelerator(value: number) {
    this.view.setUint32(56, value, true);
  }

  // 0x3c: u32
  set ConfigHostInverseScan(value: number) {
    this.view.setUint32(60, value, true);
  }

  // 0x40: u32
  set ConfigSpecificIDCT(value: number) {
    this.view.setUint32(64, value, true);
  }

  // 0x44: u32
  set Config4GroupedCoefs(value: number) {
    this.view.setUint32(68, value, true);
  }

  // 0x48: u16
  set ConfigMinRenderTargetBuffCount(value: number) {
    this.view.setUint16(72, value, true);
  }

  // 0x4a: u16
  set ConfigDecoderSpecific(value: number) {
    this.view.setUint16(74, value, true);
  }

  // 0x4c: pad4
}

/**
 * Windows.Win32.Graphics.Direct3D11.D3D11_AES_CTR_IV (size: 16)
 */
export interface D3D11_AES_CTR_IV {
  /** u64 */
  IV: number | bigint;
  /** u64 */
  Count: number | bigint;
}

export const sizeofD3D11_AES_CTR_IV = 16;

export function allocD3D11_AES_CTR_IV(data?: Partial<D3D11_AES_CTR_IV>): Uint8Array {
  const buf = new Uint8Array(sizeofD3D11_AES_CTR_IV);
  const view = new DataView(buf.buffer);
  // 0x00: u64
  if (data?.IV !== undefined) view.setBigUint64(0, util.toBigInt(data.IV), true);
  // 0x08: u64
  if (data?.Count !== undefined) view.setBigUint64(8, util.toBigInt(data.Count), true);
  return buf;
}

export class D3D11_AES_CTR_IVView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u64
  get IV(): number | bigint {
    return this.view.getBigUint64(0, true);
  }

  // 0x08: u64
  get Count(): number | bigint {
    return this.view.getBigUint64(8, true);
  }

  // 0x00: u64
  set IV(value: number | bigint) {
    this.view.setBigUint64(0, util.toBigInt(value), true);
  }

  // 0x08: u64
  set Count(value: number | bigint) {
    this.view.setBigUint64(8, util.toBigInt(value), true);
  }
}

/**
 * Windows.Win32.Graphics.Direct3D11.D3D11_ENCRYPTED_BLOCK_INFO (size: 16)
 */
export interface D3D11_ENCRYPTED_BLOCK_INFO {
  /** u32 */
  NumEncryptedBytesAtBeginning: number;
  /** u32 */
  NumBytesInSkipPattern: number;
  /** u32 */
  NumBytesInEncryptPattern: number;
}

export const sizeofD3D11_ENCRYPTED_BLOCK_INFO = 16;

export function allocD3D11_ENCRYPTED_BLOCK_INFO(data?: Partial<D3D11_ENCRYPTED_BLOCK_INFO>): Uint8Array {
  const buf = new Uint8Array(sizeofD3D11_ENCRYPTED_BLOCK_INFO);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.NumEncryptedBytesAtBeginning !== undefined) view.setUint32(0, Number(data.NumEncryptedBytesAtBeginning), true);
  // 0x04: u32
  if (data?.NumBytesInSkipPattern !== undefined) view.setUint32(4, Number(data.NumBytesInSkipPattern), true);
  // 0x08: u32
  if (data?.NumBytesInEncryptPattern !== undefined) view.setUint32(8, Number(data.NumBytesInEncryptPattern), true);
  // 0x0c: pad4
  return buf;
}

export class D3D11_ENCRYPTED_BLOCK_INFOView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get NumEncryptedBytesAtBeginning(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: u32
  get NumBytesInSkipPattern(): number {
    return this.view.getUint32(4, true);
  }

  // 0x08: u32
  get NumBytesInEncryptPattern(): number {
    return this.view.getUint32(8, true);
  }

  // 0x0c: pad4

  // 0x00: u32
  set NumEncryptedBytesAtBeginning(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: u32
  set NumBytesInSkipPattern(value: number) {
    this.view.setUint32(4, value, true);
  }

  // 0x08: u32
  set NumBytesInEncryptPattern(value: number) {
    this.view.setUint32(8, value, true);
  }

  // 0x0c: pad4
}

/**
 * Windows.Win32.Graphics.Direct3D11.D3D11_VIDEO_DECODER_BUFFER_DESC (size: 64)
 */
export interface D3D11_VIDEO_DECODER_BUFFER_DESC {
  /** Windows.Win32.Graphics.Direct3D11.D3D11_VIDEO_DECODER_BUFFER_TYPE */
  BufferType: D3D11_VIDEO_DECODER_BUFFER_TYPE;
  /** u32 */
  BufferIndex: number;
  /** u32 */
  DataOffset: number;
  /** u32 */
  DataSize: number;
  /** u32 */
  FirstMBaddress: number;
  /** u32 */
  NumMBsInBuffer: number;
  /** u32 */
  Width: number;
  /** u32 */
  Height: number;
  /** u32 */
  Stride: number;
  /** u32 */
  ReservedBits: number;
  /** ptr */
  pIV: Deno.PointerValue | Uint8Array | null;
  /** u32 */
  IVSize: number;
  /** Windows.Win32.Foundation.BOOL */
  PartialEncryption: boolean;
  /** Windows.Win32.Graphics.Direct3D11.D3D11_ENCRYPTED_BLOCK_INFO */
  EncryptedBlockInfo: Uint8Array | Deno.PointerValue | null;
}

export const sizeofD3D11_VIDEO_DECODER_BUFFER_DESC = 64;

export function allocD3D11_VIDEO_DECODER_BUFFER_DESC(data?: Partial<D3D11_VIDEO_DECODER_BUFFER_DESC>): Uint8Array {
  const buf = new Uint8Array(sizeofD3D11_VIDEO_DECODER_BUFFER_DESC);
  const view = new DataView(buf.buffer);
  // 0x00: i32
  if (data?.BufferType !== undefined) view.setInt32(0, Number(data.BufferType), true);
  // 0x04: u32
  if (data?.BufferIndex !== undefined) view.setUint32(4, Number(data.BufferIndex), true);
  // 0x08: u32
  if (data?.DataOffset !== undefined) view.setUint32(8, Number(data.DataOffset), true);
  // 0x0c: u32
  if (data?.DataSize !== undefined) view.setUint32(12, Number(data.DataSize), true);
  // 0x10: u32
  if (data?.FirstMBaddress !== undefined) view.setUint32(16, Number(data.FirstMBaddress), true);
  // 0x14: u32
  if (data?.NumMBsInBuffer !== undefined) view.setUint32(20, Number(data.NumMBsInBuffer), true);
  // 0x18: u32
  if (data?.Width !== undefined) view.setUint32(24, Number(data.Width), true);
  // 0x1c: u32
  if (data?.Height !== undefined) view.setUint32(28, Number(data.Height), true);
  // 0x20: u32
  if (data?.Stride !== undefined) view.setUint32(32, Number(data.Stride), true);
  // 0x24: u32
  if (data?.ReservedBits !== undefined) view.setUint32(36, Number(data.ReservedBits), true);
  // 0x28: pointer
  if (data?.pIV !== undefined) view.setBigUint64(40, data.pIV === null ? 0n : util.toBigInt(util.toPointer(data.pIV)), true);
  // 0x30: u32
  if (data?.IVSize !== undefined) view.setUint32(48, Number(data.IVSize), true);
  // 0x34: i32
  if (data?.PartialEncryption !== undefined) view.setInt32(52, Number(data.PartialEncryption), true);
  // 0x38: pointer
  if (data?.EncryptedBlockInfo !== undefined) view.setBigUint64(56, data.EncryptedBlockInfo === null ? 0n : util.toBigInt(util.toPointer(data.EncryptedBlockInfo)), true);
  return buf;
}

export class D3D11_VIDEO_DECODER_BUFFER_DESCView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: i32
  get BufferType(): number {
    return this.view.getInt32(0, true);
  }

  // 0x04: u32
  get BufferIndex(): number {
    return this.view.getUint32(4, true);
  }

  // 0x08: u32
  get DataOffset(): number {
    return this.view.getUint32(8, true);
  }

  // 0x0c: u32
  get DataSize(): number {
    return this.view.getUint32(12, true);
  }

  // 0x10: u32
  get FirstMBaddress(): number {
    return this.view.getUint32(16, true);
  }

  // 0x14: u32
  get NumMBsInBuffer(): number {
    return this.view.getUint32(20, true);
  }

  // 0x18: u32
  get Width(): number {
    return this.view.getUint32(24, true);
  }

  // 0x1c: u32
  get Height(): number {
    return this.view.getUint32(28, true);
  }

  // 0x20: u32
  get Stride(): number {
    return this.view.getUint32(32, true);
  }

  // 0x24: u32
  get ReservedBits(): number {
    return this.view.getUint32(36, true);
  }

  // 0x28: pointer
  get pIV(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(40, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x30: u32
  get IVSize(): number {
    return this.view.getUint32(48, true);
  }

  // 0x34: i32
  get PartialEncryption(): number {
    return this.view.getInt32(52, true);
  }

  // 0x38: pointer
  get EncryptedBlockInfo(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(56, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: i32
  set BufferType(value: number) {
    this.view.setInt32(0, value, true);
  }

  // 0x04: u32
  set BufferIndex(value: number) {
    this.view.setUint32(4, value, true);
  }

  // 0x08: u32
  set DataOffset(value: number) {
    this.view.setUint32(8, value, true);
  }

  // 0x0c: u32
  set DataSize(value: number) {
    this.view.setUint32(12, value, true);
  }

  // 0x10: u32
  set FirstMBaddress(value: number) {
    this.view.setUint32(16, value, true);
  }

  // 0x14: u32
  set NumMBsInBuffer(value: number) {
    this.view.setUint32(20, value, true);
  }

  // 0x18: u32
  set Width(value: number) {
    this.view.setUint32(24, value, true);
  }

  // 0x1c: u32
  set Height(value: number) {
    this.view.setUint32(28, value, true);
  }

  // 0x20: u32
  set Stride(value: number) {
    this.view.setUint32(32, value, true);
  }

  // 0x24: u32
  set ReservedBits(value: number) {
    this.view.setUint32(36, value, true);
  }

  // 0x28: pointer
  set pIV(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(40, util.toBigInt(util.toPointer(value)), true);
  }

  // 0x30: u32
  set IVSize(value: number) {
    this.view.setUint32(48, value, true);
  }

  // 0x34: i32
  set PartialEncryption(value: number) {
    this.view.setInt32(52, value, true);
  }

  // 0x38: pointer
  set EncryptedBlockInfo(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(56, util.toBigInt(util.toPointer(value)), true);
  }
}

/**
 * Windows.Win32.Graphics.Direct3D11.D3D11_VIDEO_DECODER_EXTENSION (size: 48)
 */
export interface D3D11_VIDEO_DECODER_EXTENSION {
  /** u32 */
  Function: number;
  /** ptr */
  pPrivateInputData: Deno.PointerValue | Uint8Array | null;
  /** u32 */
  PrivateInputDataSize: number;
  /** ptr */
  pPrivateOutputData: Deno.PointerValue | Uint8Array | null;
  /** u32 */
  PrivateOutputDataSize: number;
  /** u32 */
  ResourceCount: number;
  /** ptr */
  ppResourceList: Deno.PointerValue | Uint8Array | null;
}

export const sizeofD3D11_VIDEO_DECODER_EXTENSION = 48;

export function allocD3D11_VIDEO_DECODER_EXTENSION(data?: Partial<D3D11_VIDEO_DECODER_EXTENSION>): Uint8Array {
  const buf = new Uint8Array(sizeofD3D11_VIDEO_DECODER_EXTENSION);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.Function !== undefined) view.setUint32(0, Number(data.Function), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.pPrivateInputData !== undefined) view.setBigUint64(8, data.pPrivateInputData === null ? 0n : util.toBigInt(util.toPointer(data.pPrivateInputData)), true);
  // 0x10: u32
  if (data?.PrivateInputDataSize !== undefined) view.setUint32(16, Number(data.PrivateInputDataSize), true);
  // 0x14: pad4
  // 0x18: pointer
  if (data?.pPrivateOutputData !== undefined) view.setBigUint64(24, data.pPrivateOutputData === null ? 0n : util.toBigInt(util.toPointer(data.pPrivateOutputData)), true);
  // 0x20: u32
  if (data?.PrivateOutputDataSize !== undefined) view.setUint32(32, Number(data.PrivateOutputDataSize), true);
  // 0x24: u32
  if (data?.ResourceCount !== undefined) view.setUint32(36, Number(data.ResourceCount), true);
  // 0x28: pointer
  if (data?.ppResourceList !== undefined) view.setBigUint64(40, data.ppResourceList === null ? 0n : util.toBigInt(util.toPointer(data.ppResourceList)), true);
  return buf;
}

export class D3D11_VIDEO_DECODER_EXTENSIONView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get Function(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  get pPrivateInputData(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(8, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x10: u32
  get PrivateInputDataSize(): number {
    return this.view.getUint32(16, true);
  }

  // 0x14: pad4

  // 0x18: pointer
  get pPrivateOutputData(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(24, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x20: u32
  get PrivateOutputDataSize(): number {
    return this.view.getUint32(32, true);
  }

  // 0x24: u32
  get ResourceCount(): number {
    return this.view.getUint32(36, true);
  }

  // 0x28: pointer
  get ppResourceList(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(40, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: u32
  set Function(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  set pPrivateInputData(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(8, util.toBigInt(util.toPointer(value)), true);
  }

  // 0x10: u32
  set PrivateInputDataSize(value: number) {
    this.view.setUint32(16, value, true);
  }

  // 0x14: pad4

  // 0x18: pointer
  set pPrivateOutputData(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(24, util.toBigInt(util.toPointer(value)), true);
  }

  // 0x20: u32
  set PrivateOutputDataSize(value: number) {
    this.view.setUint32(32, value, true);
  }

  // 0x24: u32
  set ResourceCount(value: number) {
    this.view.setUint32(36, value, true);
  }

  // 0x28: pointer
  set ppResourceList(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(40, util.toBigInt(util.toPointer(value)), true);
  }
}

/**
 * Windows.Win32.Graphics.Direct3D11.D3D11_VIDEO_PROCESSOR_CAPS (size: 40)
 */
export interface D3D11_VIDEO_PROCESSOR_CAPS {
  /** u32 */
  DeviceCaps: number;
  /** u32 */
  FeatureCaps: number;
  /** u32 */
  FilterCaps: number;
  /** u32 */
  InputFormatCaps: number;
  /** u32 */
  AutoStreamCaps: number;
  /** u32 */
  StereoCaps: number;
  /** u32 */
  RateConversionCapsCount: number;
  /** u32 */
  MaxInputStreams: number;
  /** u32 */
  MaxStreamStates: number;
}

export const sizeofD3D11_VIDEO_PROCESSOR_CAPS = 40;

export function allocD3D11_VIDEO_PROCESSOR_CAPS(data?: Partial<D3D11_VIDEO_PROCESSOR_CAPS>): Uint8Array {
  const buf = new Uint8Array(sizeofD3D11_VIDEO_PROCESSOR_CAPS);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.DeviceCaps !== undefined) view.setUint32(0, Number(data.DeviceCaps), true);
  // 0x04: u32
  if (data?.FeatureCaps !== undefined) view.setUint32(4, Number(data.FeatureCaps), true);
  // 0x08: u32
  if (data?.FilterCaps !== undefined) view.setUint32(8, Number(data.FilterCaps), true);
  // 0x0c: u32
  if (data?.InputFormatCaps !== undefined) view.setUint32(12, Number(data.InputFormatCaps), true);
  // 0x10: u32
  if (data?.AutoStreamCaps !== undefined) view.setUint32(16, Number(data.AutoStreamCaps), true);
  // 0x14: u32
  if (data?.StereoCaps !== undefined) view.setUint32(20, Number(data.StereoCaps), true);
  // 0x18: u32
  if (data?.RateConversionCapsCount !== undefined) view.setUint32(24, Number(data.RateConversionCapsCount), true);
  // 0x1c: u32
  if (data?.MaxInputStreams !== undefined) view.setUint32(28, Number(data.MaxInputStreams), true);
  // 0x20: u32
  if (data?.MaxStreamStates !== undefined) view.setUint32(32, Number(data.MaxStreamStates), true);
  // 0x24: pad4
  return buf;
}

export class D3D11_VIDEO_PROCESSOR_CAPSView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get DeviceCaps(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: u32
  get FeatureCaps(): number {
    return this.view.getUint32(4, true);
  }

  // 0x08: u32
  get FilterCaps(): number {
    return this.view.getUint32(8, true);
  }

  // 0x0c: u32
  get InputFormatCaps(): number {
    return this.view.getUint32(12, true);
  }

  // 0x10: u32
  get AutoStreamCaps(): number {
    return this.view.getUint32(16, true);
  }

  // 0x14: u32
  get StereoCaps(): number {
    return this.view.getUint32(20, true);
  }

  // 0x18: u32
  get RateConversionCapsCount(): number {
    return this.view.getUint32(24, true);
  }

  // 0x1c: u32
  get MaxInputStreams(): number {
    return this.view.getUint32(28, true);
  }

  // 0x20: u32
  get MaxStreamStates(): number {
    return this.view.getUint32(32, true);
  }

  // 0x24: pad4

  // 0x00: u32
  set DeviceCaps(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: u32
  set FeatureCaps(value: number) {
    this.view.setUint32(4, value, true);
  }

  // 0x08: u32
  set FilterCaps(value: number) {
    this.view.setUint32(8, value, true);
  }

  // 0x0c: u32
  set InputFormatCaps(value: number) {
    this.view.setUint32(12, value, true);
  }

  // 0x10: u32
  set AutoStreamCaps(value: number) {
    this.view.setUint32(16, value, true);
  }

  // 0x14: u32
  set StereoCaps(value: number) {
    this.view.setUint32(20, value, true);
  }

  // 0x18: u32
  set RateConversionCapsCount(value: number) {
    this.view.setUint32(24, value, true);
  }

  // 0x1c: u32
  set MaxInputStreams(value: number) {
    this.view.setUint32(28, value, true);
  }

  // 0x20: u32
  set MaxStreamStates(value: number) {
    this.view.setUint32(32, value, true);
  }

  // 0x24: pad4
}

/**
 * Windows.Win32.Graphics.Direct3D11.D3D11_VIDEO_PROCESSOR_RATE_CONVERSION_CAPS (size: 24)
 */
export interface D3D11_VIDEO_PROCESSOR_RATE_CONVERSION_CAPS {
  /** u32 */
  PastFrames: number;
  /** u32 */
  FutureFrames: number;
  /** u32 */
  ProcessorCaps: number;
  /** u32 */
  ITelecineCaps: number;
  /** u32 */
  CustomRateCount: number;
}

export const sizeofD3D11_VIDEO_PROCESSOR_RATE_CONVERSION_CAPS = 24;

export function allocD3D11_VIDEO_PROCESSOR_RATE_CONVERSION_CAPS(data?: Partial<D3D11_VIDEO_PROCESSOR_RATE_CONVERSION_CAPS>): Uint8Array {
  const buf = new Uint8Array(sizeofD3D11_VIDEO_PROCESSOR_RATE_CONVERSION_CAPS);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.PastFrames !== undefined) view.setUint32(0, Number(data.PastFrames), true);
  // 0x04: u32
  if (data?.FutureFrames !== undefined) view.setUint32(4, Number(data.FutureFrames), true);
  // 0x08: u32
  if (data?.ProcessorCaps !== undefined) view.setUint32(8, Number(data.ProcessorCaps), true);
  // 0x0c: u32
  if (data?.ITelecineCaps !== undefined) view.setUint32(12, Number(data.ITelecineCaps), true);
  // 0x10: u32
  if (data?.CustomRateCount !== undefined) view.setUint32(16, Number(data.CustomRateCount), true);
  // 0x14: pad4
  return buf;
}

export class D3D11_VIDEO_PROCESSOR_RATE_CONVERSION_CAPSView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get PastFrames(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: u32
  get FutureFrames(): number {
    return this.view.getUint32(4, true);
  }

  // 0x08: u32
  get ProcessorCaps(): number {
    return this.view.getUint32(8, true);
  }

  // 0x0c: u32
  get ITelecineCaps(): number {
    return this.view.getUint32(12, true);
  }

  // 0x10: u32
  get CustomRateCount(): number {
    return this.view.getUint32(16, true);
  }

  // 0x14: pad4

  // 0x00: u32
  set PastFrames(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: u32
  set FutureFrames(value: number) {
    this.view.setUint32(4, value, true);
  }

  // 0x08: u32
  set ProcessorCaps(value: number) {
    this.view.setUint32(8, value, true);
  }

  // 0x0c: u32
  set ITelecineCaps(value: number) {
    this.view.setUint32(12, value, true);
  }

  // 0x10: u32
  set CustomRateCount(value: number) {
    this.view.setUint32(16, value, true);
  }

  // 0x14: pad4
}

/**
 * Windows.Win32.Graphics.Direct3D11.D3D11_VIDEO_CONTENT_PROTECTION_CAPS (size: 24)
 */
export interface D3D11_VIDEO_CONTENT_PROTECTION_CAPS {
  /** u32 */
  Caps: number;
  /** u32 */
  KeyExchangeTypeCount: number;
  /** u32 */
  BlockAlignmentSize: number;
  /** u64 */
  ProtectedMemorySize: number | bigint;
}

export const sizeofD3D11_VIDEO_CONTENT_PROTECTION_CAPS = 24;

export function allocD3D11_VIDEO_CONTENT_PROTECTION_CAPS(data?: Partial<D3D11_VIDEO_CONTENT_PROTECTION_CAPS>): Uint8Array {
  const buf = new Uint8Array(sizeofD3D11_VIDEO_CONTENT_PROTECTION_CAPS);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.Caps !== undefined) view.setUint32(0, Number(data.Caps), true);
  // 0x04: u32
  if (data?.KeyExchangeTypeCount !== undefined) view.setUint32(4, Number(data.KeyExchangeTypeCount), true);
  // 0x08: u32
  if (data?.BlockAlignmentSize !== undefined) view.setUint32(8, Number(data.BlockAlignmentSize), true);
  // 0x0c: pad4
  // 0x10: u64
  if (data?.ProtectedMemorySize !== undefined) view.setBigUint64(16, util.toBigInt(data.ProtectedMemorySize), true);
  return buf;
}

export class D3D11_VIDEO_CONTENT_PROTECTION_CAPSView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get Caps(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: u32
  get KeyExchangeTypeCount(): number {
    return this.view.getUint32(4, true);
  }

  // 0x08: u32
  get BlockAlignmentSize(): number {
    return this.view.getUint32(8, true);
  }

  // 0x0c: pad4

  // 0x10: u64
  get ProtectedMemorySize(): number | bigint {
    return this.view.getBigUint64(16, true);
  }

  // 0x00: u32
  set Caps(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: u32
  set KeyExchangeTypeCount(value: number) {
    this.view.setUint32(4, value, true);
  }

  // 0x08: u32
  set BlockAlignmentSize(value: number) {
    this.view.setUint32(8, value, true);
  }

  // 0x0c: pad4

  // 0x10: u64
  set ProtectedMemorySize(value: number | bigint) {
    this.view.setBigUint64(16, util.toBigInt(value), true);
  }
}

/**
 * Windows.Win32.Graphics.Dxgi.Common.DXGI_RATIONAL (size: 8)
 */
export interface DXGI_RATIONAL {
  /** u32 */
  Numerator: number;
  /** u32 */
  Denominator: number;
}

export const sizeofDXGI_RATIONAL = 8;

export function allocDXGI_RATIONAL(data?: Partial<DXGI_RATIONAL>): Uint8Array {
  const buf = new Uint8Array(sizeofDXGI_RATIONAL);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.Numerator !== undefined) view.setUint32(0, Number(data.Numerator), true);
  // 0x04: u32
  if (data?.Denominator !== undefined) view.setUint32(4, Number(data.Denominator), true);
  return buf;
}

export class DXGI_RATIONALView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get Numerator(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: u32
  get Denominator(): number {
    return this.view.getUint32(4, true);
  }

  // 0x00: u32
  set Numerator(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: u32
  set Denominator(value: number) {
    this.view.setUint32(4, value, true);
  }
}

/**
 * Windows.Win32.Graphics.Direct3D11.D3D11_VIDEO_PROCESSOR_CUSTOM_RATE (size: 24)
 */
export interface D3D11_VIDEO_PROCESSOR_CUSTOM_RATE {
  /** Windows.Win32.Graphics.Dxgi.Common.DXGI_RATIONAL */
  CustomRate: Uint8Array | Deno.PointerValue | null;
  /** u32 */
  OutputFrames: number;
  /** Windows.Win32.Foundation.BOOL */
  InputInterlaced: boolean;
  /** u32 */
  InputFramesOrFields: number;
}

export const sizeofD3D11_VIDEO_PROCESSOR_CUSTOM_RATE = 24;

export function allocD3D11_VIDEO_PROCESSOR_CUSTOM_RATE(data?: Partial<D3D11_VIDEO_PROCESSOR_CUSTOM_RATE>): Uint8Array {
  const buf = new Uint8Array(sizeofD3D11_VIDEO_PROCESSOR_CUSTOM_RATE);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.CustomRate !== undefined) view.setBigUint64(0, data.CustomRate === null ? 0n : util.toBigInt(util.toPointer(data.CustomRate)), true);
  // 0x08: u32
  if (data?.OutputFrames !== undefined) view.setUint32(8, Number(data.OutputFrames), true);
  // 0x0c: i32
  if (data?.InputInterlaced !== undefined) view.setInt32(12, Number(data.InputInterlaced), true);
  // 0x10: u32
  if (data?.InputFramesOrFields !== undefined) view.setUint32(16, Number(data.InputFramesOrFields), true);
  // 0x14: pad4
  return buf;
}

export class D3D11_VIDEO_PROCESSOR_CUSTOM_RATEView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get CustomRate(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(0, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x08: u32
  get OutputFrames(): number {
    return this.view.getUint32(8, true);
  }

  // 0x0c: i32
  get InputInterlaced(): number {
    return this.view.getInt32(12, true);
  }

  // 0x10: u32
  get InputFramesOrFields(): number {
    return this.view.getUint32(16, true);
  }

  // 0x14: pad4

  // 0x00: pointer
  set CustomRate(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(0, util.toBigInt(util.toPointer(value)), true);
  }

  // 0x08: u32
  set OutputFrames(value: number) {
    this.view.setUint32(8, value, true);
  }

  // 0x0c: i32
  set InputInterlaced(value: number) {
    this.view.setInt32(12, value, true);
  }

  // 0x10: u32
  set InputFramesOrFields(value: number) {
    this.view.setUint32(16, value, true);
  }

  // 0x14: pad4
}

/**
 * Windows.Win32.Graphics.Direct3D11.D3D11_VIDEO_PROCESSOR_FILTER_RANGE (size: 16)
 */
export interface D3D11_VIDEO_PROCESSOR_FILTER_RANGE {
  /** i32 */
  Minimum: number;
  /** i32 */
  Maximum: number;
  /** i32 */
  Default: number;
  /** f32 */
  Multiplier: number;
}

export const sizeofD3D11_VIDEO_PROCESSOR_FILTER_RANGE = 16;

export function allocD3D11_VIDEO_PROCESSOR_FILTER_RANGE(data?: Partial<D3D11_VIDEO_PROCESSOR_FILTER_RANGE>): Uint8Array {
  const buf = new Uint8Array(sizeofD3D11_VIDEO_PROCESSOR_FILTER_RANGE);
  const view = new DataView(buf.buffer);
  // 0x00: i32
  if (data?.Minimum !== undefined) view.setInt32(0, Number(data.Minimum), true);
  // 0x04: i32
  if (data?.Maximum !== undefined) view.setInt32(4, Number(data.Maximum), true);
  // 0x08: i32
  if (data?.Default !== undefined) view.setInt32(8, Number(data.Default), true);
  // 0x0c: f32
  if (data?.Multiplier !== undefined) view.setFloat32(12, Number(data.Multiplier), true);
  return buf;
}

export class D3D11_VIDEO_PROCESSOR_FILTER_RANGEView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: i32
  get Minimum(): number {
    return this.view.getInt32(0, true);
  }

  // 0x04: i32
  get Maximum(): number {
    return this.view.getInt32(4, true);
  }

  // 0x08: i32
  get Default(): number {
    return this.view.getInt32(8, true);
  }

  // 0x0c: f32
  get Multiplier(): number {
    return this.view.getFloat32(12, true);
  }

  // 0x00: i32
  set Minimum(value: number) {
    this.view.setInt32(0, value, true);
  }

  // 0x04: i32
  set Maximum(value: number) {
    this.view.setInt32(4, value, true);
  }

  // 0x08: i32
  set Default(value: number) {
    this.view.setInt32(8, value, true);
  }

  // 0x0c: f32
  set Multiplier(value: number) {
    this.view.setFloat32(12, value, true);
  }
}

/**
 * Windows.Win32.Graphics.Direct3D11.D3D11_VIDEO_PROCESSOR_CONTENT_DESC (size: 48)
 */
export interface D3D11_VIDEO_PROCESSOR_CONTENT_DESC {
  /** Windows.Win32.Graphics.Direct3D11.D3D11_VIDEO_FRAME_FORMAT */
  InputFrameFormat: D3D11_VIDEO_FRAME_FORMAT;
  /** Windows.Win32.Graphics.Dxgi.Common.DXGI_RATIONAL */
  InputFrameRate: Uint8Array | Deno.PointerValue | null;
  /** u32 */
  InputWidth: number;
  /** u32 */
  InputHeight: number;
  /** Windows.Win32.Graphics.Dxgi.Common.DXGI_RATIONAL */
  OutputFrameRate: Uint8Array | Deno.PointerValue | null;
  /** u32 */
  OutputWidth: number;
  /** u32 */
  OutputHeight: number;
  /** Windows.Win32.Graphics.Direct3D11.D3D11_VIDEO_USAGE */
  Usage: D3D11_VIDEO_USAGE;
}

export const sizeofD3D11_VIDEO_PROCESSOR_CONTENT_DESC = 48;

export function allocD3D11_VIDEO_PROCESSOR_CONTENT_DESC(data?: Partial<D3D11_VIDEO_PROCESSOR_CONTENT_DESC>): Uint8Array {
  const buf = new Uint8Array(sizeofD3D11_VIDEO_PROCESSOR_CONTENT_DESC);
  const view = new DataView(buf.buffer);
  // 0x00: i32
  if (data?.InputFrameFormat !== undefined) view.setInt32(0, Number(data.InputFrameFormat), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.InputFrameRate !== undefined) view.setBigUint64(8, data.InputFrameRate === null ? 0n : util.toBigInt(util.toPointer(data.InputFrameRate)), true);
  // 0x10: u32
  if (data?.InputWidth !== undefined) view.setUint32(16, Number(data.InputWidth), true);
  // 0x14: u32
  if (data?.InputHeight !== undefined) view.setUint32(20, Number(data.InputHeight), true);
  // 0x18: pointer
  if (data?.OutputFrameRate !== undefined) view.setBigUint64(24, data.OutputFrameRate === null ? 0n : util.toBigInt(util.toPointer(data.OutputFrameRate)), true);
  // 0x20: u32
  if (data?.OutputWidth !== undefined) view.setUint32(32, Number(data.OutputWidth), true);
  // 0x24: u32
  if (data?.OutputHeight !== undefined) view.setUint32(36, Number(data.OutputHeight), true);
  // 0x28: i32
  if (data?.Usage !== undefined) view.setInt32(40, Number(data.Usage), true);
  // 0x2c: pad4
  return buf;
}

export class D3D11_VIDEO_PROCESSOR_CONTENT_DESCView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: i32
  get InputFrameFormat(): number {
    return this.view.getInt32(0, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  get InputFrameRate(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(8, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x10: u32
  get InputWidth(): number {
    return this.view.getUint32(16, true);
  }

  // 0x14: u32
  get InputHeight(): number {
    return this.view.getUint32(20, true);
  }

  // 0x18: pointer
  get OutputFrameRate(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(24, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x20: u32
  get OutputWidth(): number {
    return this.view.getUint32(32, true);
  }

  // 0x24: u32
  get OutputHeight(): number {
    return this.view.getUint32(36, true);
  }

  // 0x28: i32
  get Usage(): number {
    return this.view.getInt32(40, true);
  }

  // 0x2c: pad4

  // 0x00: i32
  set InputFrameFormat(value: number) {
    this.view.setInt32(0, value, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  set InputFrameRate(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(8, util.toBigInt(util.toPointer(value)), true);
  }

  // 0x10: u32
  set InputWidth(value: number) {
    this.view.setUint32(16, value, true);
  }

  // 0x14: u32
  set InputHeight(value: number) {
    this.view.setUint32(20, value, true);
  }

  // 0x18: pointer
  set OutputFrameRate(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(24, util.toBigInt(util.toPointer(value)), true);
  }

  // 0x20: u32
  set OutputWidth(value: number) {
    this.view.setUint32(32, value, true);
  }

  // 0x24: u32
  set OutputHeight(value: number) {
    this.view.setUint32(36, value, true);
  }

  // 0x28: i32
  set Usage(value: number) {
    this.view.setInt32(40, value, true);
  }

  // 0x2c: pad4
}

/**
 * Windows.Win32.Graphics.Direct3D11.D3D11_VIDEO_COLOR_RGBA (size: 16)
 */
export interface D3D11_VIDEO_COLOR_RGBA {
  /** f32 */
  R: number;
  /** f32 */
  G: number;
  /** f32 */
  B: number;
  /** f32 */
  A: number;
}

export const sizeofD3D11_VIDEO_COLOR_RGBA = 16;

export function allocD3D11_VIDEO_COLOR_RGBA(data?: Partial<D3D11_VIDEO_COLOR_RGBA>): Uint8Array {
  const buf = new Uint8Array(sizeofD3D11_VIDEO_COLOR_RGBA);
  const view = new DataView(buf.buffer);
  // 0x00: f32
  if (data?.R !== undefined) view.setFloat32(0, Number(data.R), true);
  // 0x04: f32
  if (data?.G !== undefined) view.setFloat32(4, Number(data.G), true);
  // 0x08: f32
  if (data?.B !== undefined) view.setFloat32(8, Number(data.B), true);
  // 0x0c: f32
  if (data?.A !== undefined) view.setFloat32(12, Number(data.A), true);
  return buf;
}

export class D3D11_VIDEO_COLOR_RGBAView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: f32
  get R(): number {
    return this.view.getFloat32(0, true);
  }

  // 0x04: f32
  get G(): number {
    return this.view.getFloat32(4, true);
  }

  // 0x08: f32
  get B(): number {
    return this.view.getFloat32(8, true);
  }

  // 0x0c: f32
  get A(): number {
    return this.view.getFloat32(12, true);
  }

  // 0x00: f32
  set R(value: number) {
    this.view.setFloat32(0, value, true);
  }

  // 0x04: f32
  set G(value: number) {
    this.view.setFloat32(4, value, true);
  }

  // 0x08: f32
  set B(value: number) {
    this.view.setFloat32(8, value, true);
  }

  // 0x0c: f32
  set A(value: number) {
    this.view.setFloat32(12, value, true);
  }
}

/**
 * Windows.Win32.Graphics.Direct3D11.D3D11_VIDEO_COLOR_YCbCrA (size: 16)
 */
export interface D3D11_VIDEO_COLOR_YCbCrA {
  /** f32 */
  Y: number;
  /** f32 */
  Cb: number;
  /** f32 */
  Cr: number;
  /** f32 */
  A: number;
}

export const sizeofD3D11_VIDEO_COLOR_YCbCrA = 16;

export function allocD3D11_VIDEO_COLOR_YCbCrA(data?: Partial<D3D11_VIDEO_COLOR_YCbCrA>): Uint8Array {
  const buf = new Uint8Array(sizeofD3D11_VIDEO_COLOR_YCbCrA);
  const view = new DataView(buf.buffer);
  // 0x00: f32
  if (data?.Y !== undefined) view.setFloat32(0, Number(data.Y), true);
  // 0x04: f32
  if (data?.Cb !== undefined) view.setFloat32(4, Number(data.Cb), true);
  // 0x08: f32
  if (data?.Cr !== undefined) view.setFloat32(8, Number(data.Cr), true);
  // 0x0c: f32
  if (data?.A !== undefined) view.setFloat32(12, Number(data.A), true);
  return buf;
}

export class D3D11_VIDEO_COLOR_YCbCrAView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: f32
  get Y(): number {
    return this.view.getFloat32(0, true);
  }

  // 0x04: f32
  get Cb(): number {
    return this.view.getFloat32(4, true);
  }

  // 0x08: f32
  get Cr(): number {
    return this.view.getFloat32(8, true);
  }

  // 0x0c: f32
  get A(): number {
    return this.view.getFloat32(12, true);
  }

  // 0x00: f32
  set Y(value: number) {
    this.view.setFloat32(0, value, true);
  }

  // 0x04: f32
  set Cb(value: number) {
    this.view.setFloat32(4, value, true);
  }

  // 0x08: f32
  set Cr(value: number) {
    this.view.setFloat32(8, value, true);
  }

  // 0x0c: f32
  set A(value: number) {
    this.view.setFloat32(12, value, true);
  }
}

/**
 * Windows.Win32.Graphics.Direct3D11.D3D11_VIDEO_COLOR (size: 8)
 */
export interface D3D11_VIDEO_COLOR {
  /** _Anonymous_e__Union */
  Anonymous: Uint8Array | Deno.PointerValue | null;
}

export const sizeofD3D11_VIDEO_COLOR = 8;

export function allocD3D11_VIDEO_COLOR(data?: Partial<D3D11_VIDEO_COLOR>): Uint8Array {
  const buf = new Uint8Array(sizeofD3D11_VIDEO_COLOR);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.Anonymous !== undefined) view.setBigUint64(0, data.Anonymous === null ? 0n : util.toBigInt(util.toPointer(data.Anonymous)), true);
  return buf;
}

export class D3D11_VIDEO_COLORView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get Anonymous(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(0, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: pointer
  set Anonymous(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(0, util.toBigInt(util.toPointer(value)), true);
  }
}

/**
 * Windows.Win32.Graphics.Direct3D11.D3D11_VIDEO_PROCESSOR_COLOR_SPACE (size: 8)
 */
export interface D3D11_VIDEO_PROCESSOR_COLOR_SPACE {
  /** u32 */
  _bitfield: number;
}

export const sizeofD3D11_VIDEO_PROCESSOR_COLOR_SPACE = 8;

export function allocD3D11_VIDEO_PROCESSOR_COLOR_SPACE(data?: Partial<D3D11_VIDEO_PROCESSOR_COLOR_SPACE>): Uint8Array {
  const buf = new Uint8Array(sizeofD3D11_VIDEO_PROCESSOR_COLOR_SPACE);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?._bitfield !== undefined) view.setUint32(0, Number(data._bitfield), true);
  // 0x04: pad4
  return buf;
}

export class D3D11_VIDEO_PROCESSOR_COLOR_SPACEView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get _bitfield(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: pad4

  // 0x00: u32
  set _bitfield(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: pad4
}

/**
 * Windows.Win32.Graphics.Direct3D11.D3D11_VIDEO_PROCESSOR_STREAM (size: 72)
 */
export interface D3D11_VIDEO_PROCESSOR_STREAM {
  /** Windows.Win32.Foundation.BOOL */
  Enable: boolean;
  /** u32 */
  OutputIndex: number;
  /** u32 */
  InputFrameOrField: number;
  /** u32 */
  PastFrames: number;
  /** u32 */
  FutureFrames: number;
  /** ptr */
  ppPastSurfaces: Deno.PointerValue | Uint8Array | null;
  /** Windows.Win32.Graphics.Direct3D11.ID3D11VideoProcessorInputView */
  pInputSurface: Uint8Array | Deno.PointerValue | null;
  /** ptr */
  ppFutureSurfaces: Deno.PointerValue | Uint8Array | null;
  /** ptr */
  ppPastSurfacesRight: Deno.PointerValue | Uint8Array | null;
  /** Windows.Win32.Graphics.Direct3D11.ID3D11VideoProcessorInputView */
  pInputSurfaceRight: Uint8Array | Deno.PointerValue | null;
  /** ptr */
  ppFutureSurfacesRight: Deno.PointerValue | Uint8Array | null;
}

export const sizeofD3D11_VIDEO_PROCESSOR_STREAM = 72;

export function allocD3D11_VIDEO_PROCESSOR_STREAM(data?: Partial<D3D11_VIDEO_PROCESSOR_STREAM>): Uint8Array {
  const buf = new Uint8Array(sizeofD3D11_VIDEO_PROCESSOR_STREAM);
  const view = new DataView(buf.buffer);
  // 0x00: i32
  if (data?.Enable !== undefined) view.setInt32(0, Number(data.Enable), true);
  // 0x04: u32
  if (data?.OutputIndex !== undefined) view.setUint32(4, Number(data.OutputIndex), true);
  // 0x08: u32
  if (data?.InputFrameOrField !== undefined) view.setUint32(8, Number(data.InputFrameOrField), true);
  // 0x0c: u32
  if (data?.PastFrames !== undefined) view.setUint32(12, Number(data.PastFrames), true);
  // 0x10: u32
  if (data?.FutureFrames !== undefined) view.setUint32(16, Number(data.FutureFrames), true);
  // 0x14: pad4
  // 0x18: pointer
  if (data?.ppPastSurfaces !== undefined) view.setBigUint64(24, data.ppPastSurfaces === null ? 0n : util.toBigInt(util.toPointer(data.ppPastSurfaces)), true);
  // 0x20: pointer
  if (data?.pInputSurface !== undefined) view.setBigUint64(32, data.pInputSurface === null ? 0n : util.toBigInt(util.toPointer(data.pInputSurface)), true);
  // 0x28: pointer
  if (data?.ppFutureSurfaces !== undefined) view.setBigUint64(40, data.ppFutureSurfaces === null ? 0n : util.toBigInt(util.toPointer(data.ppFutureSurfaces)), true);
  // 0x30: pointer
  if (data?.ppPastSurfacesRight !== undefined) view.setBigUint64(48, data.ppPastSurfacesRight === null ? 0n : util.toBigInt(util.toPointer(data.ppPastSurfacesRight)), true);
  // 0x38: pointer
  if (data?.pInputSurfaceRight !== undefined) view.setBigUint64(56, data.pInputSurfaceRight === null ? 0n : util.toBigInt(util.toPointer(data.pInputSurfaceRight)), true);
  // 0x40: pointer
  if (data?.ppFutureSurfacesRight !== undefined) view.setBigUint64(64, data.ppFutureSurfacesRight === null ? 0n : util.toBigInt(util.toPointer(data.ppFutureSurfacesRight)), true);
  return buf;
}

export class D3D11_VIDEO_PROCESSOR_STREAMView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: i32
  get Enable(): number {
    return this.view.getInt32(0, true);
  }

  // 0x04: u32
  get OutputIndex(): number {
    return this.view.getUint32(4, true);
  }

  // 0x08: u32
  get InputFrameOrField(): number {
    return this.view.getUint32(8, true);
  }

  // 0x0c: u32
  get PastFrames(): number {
    return this.view.getUint32(12, true);
  }

  // 0x10: u32
  get FutureFrames(): number {
    return this.view.getUint32(16, true);
  }

  // 0x14: pad4

  // 0x18: pointer
  get ppPastSurfaces(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(24, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x20: pointer
  get pInputSurface(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(32, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x28: pointer
  get ppFutureSurfaces(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(40, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x30: pointer
  get ppPastSurfacesRight(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(48, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x38: pointer
  get pInputSurfaceRight(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(56, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x40: pointer
  get ppFutureSurfacesRight(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(64, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: i32
  set Enable(value: number) {
    this.view.setInt32(0, value, true);
  }

  // 0x04: u32
  set OutputIndex(value: number) {
    this.view.setUint32(4, value, true);
  }

  // 0x08: u32
  set InputFrameOrField(value: number) {
    this.view.setUint32(8, value, true);
  }

  // 0x0c: u32
  set PastFrames(value: number) {
    this.view.setUint32(12, value, true);
  }

  // 0x10: u32
  set FutureFrames(value: number) {
    this.view.setUint32(16, value, true);
  }

  // 0x14: pad4

  // 0x18: pointer
  set ppPastSurfaces(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(24, util.toBigInt(util.toPointer(value)), true);
  }

  // 0x20: pointer
  set pInputSurface(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(32, util.toBigInt(util.toPointer(value)), true);
  }

  // 0x28: pointer
  set ppFutureSurfaces(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(40, util.toBigInt(util.toPointer(value)), true);
  }

  // 0x30: pointer
  set ppPastSurfacesRight(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(48, util.toBigInt(util.toPointer(value)), true);
  }

  // 0x38: pointer
  set pInputSurfaceRight(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(56, util.toBigInt(util.toPointer(value)), true);
  }

  // 0x40: pointer
  set ppFutureSurfacesRight(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(64, util.toBigInt(util.toPointer(value)), true);
  }
}

/**
 * Windows.Win32.Graphics.Direct3D11.D3D11_OMAC (size: 8)
 */
export interface D3D11_OMAC {
  /** array */
  Omac: Deno.PointerValue | null;
}

export const sizeofD3D11_OMAC = 8;

export function allocD3D11_OMAC(data?: Partial<D3D11_OMAC>): Uint8Array {
  const buf = new Uint8Array(sizeofD3D11_OMAC);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.Omac !== undefined) view.setBigUint64(0, data.Omac === null ? 0n : util.toBigInt(util.toPointer(data.Omac)), true);
  return buf;
}

export class D3D11_OMACView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get Omac(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(0, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: pointer
  set Omac(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(0, util.toBigInt(util.toPointer(value)), true);
  }
}

export type HANDLE = number | bigint;

/**
 * Windows.Win32.Graphics.Direct3D11.D3D11_AUTHENTICATED_QUERY_INPUT (size: 24)
 */
export interface D3D11_AUTHENTICATED_QUERY_INPUT {
  /** System.Guid */
  QueryType: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Foundation.HANDLE */
  hChannel: Uint8Array | Deno.PointerValue | null;
  /** u32 */
  SequenceNumber: number;
}

export const sizeofD3D11_AUTHENTICATED_QUERY_INPUT = 24;

export function allocD3D11_AUTHENTICATED_QUERY_INPUT(data?: Partial<D3D11_AUTHENTICATED_QUERY_INPUT>): Uint8Array {
  const buf = new Uint8Array(sizeofD3D11_AUTHENTICATED_QUERY_INPUT);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.QueryType !== undefined) view.setBigUint64(0, data.QueryType === null ? 0n : util.toBigInt(util.toPointer(data.QueryType)), true);
  // 0x08: pointer
  if (data?.hChannel !== undefined) view.setBigUint64(8, data.hChannel === null ? 0n : util.toBigInt(util.toPointer(data.hChannel)), true);
  // 0x10: u32
  if (data?.SequenceNumber !== undefined) view.setUint32(16, Number(data.SequenceNumber), true);
  // 0x14: pad4
  return buf;
}

export class D3D11_AUTHENTICATED_QUERY_INPUTView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get QueryType(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(0, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x08: pointer
  get hChannel(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(8, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x10: u32
  get SequenceNumber(): number {
    return this.view.getUint32(16, true);
  }

  // 0x14: pad4

  // 0x00: pointer
  set QueryType(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(0, util.toBigInt(util.toPointer(value)), true);
  }

  // 0x08: pointer
  set hChannel(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(8, util.toBigInt(util.toPointer(value)), true);
  }

  // 0x10: u32
  set SequenceNumber(value: number) {
    this.view.setUint32(16, value, true);
  }

  // 0x14: pad4
}

export type HRESULT = number;

/**
 * Windows.Win32.Graphics.Direct3D11.D3D11_AUTHENTICATED_QUERY_OUTPUT (size: 40)
 */
export interface D3D11_AUTHENTICATED_QUERY_OUTPUT {
  /** Windows.Win32.Graphics.Direct3D11.D3D11_OMAC */
  omac: Uint8Array | Deno.PointerValue | null;
  /** System.Guid */
  QueryType: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Foundation.HANDLE */
  hChannel: Uint8Array | Deno.PointerValue | null;
  /** u32 */
  SequenceNumber: number;
  /** Windows.Win32.Foundation.HRESULT */
  ReturnCode: Uint8Array | Deno.PointerValue | null;
}

export const sizeofD3D11_AUTHENTICATED_QUERY_OUTPUT = 40;

export function allocD3D11_AUTHENTICATED_QUERY_OUTPUT(data?: Partial<D3D11_AUTHENTICATED_QUERY_OUTPUT>): Uint8Array {
  const buf = new Uint8Array(sizeofD3D11_AUTHENTICATED_QUERY_OUTPUT);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.omac !== undefined) view.setBigUint64(0, data.omac === null ? 0n : util.toBigInt(util.toPointer(data.omac)), true);
  // 0x08: pointer
  if (data?.QueryType !== undefined) view.setBigUint64(8, data.QueryType === null ? 0n : util.toBigInt(util.toPointer(data.QueryType)), true);
  // 0x10: pointer
  if (data?.hChannel !== undefined) view.setBigUint64(16, data.hChannel === null ? 0n : util.toBigInt(util.toPointer(data.hChannel)), true);
  // 0x18: u32
  if (data?.SequenceNumber !== undefined) view.setUint32(24, Number(data.SequenceNumber), true);
  // 0x1c: pad4
  // 0x20: pointer
  if (data?.ReturnCode !== undefined) view.setBigUint64(32, data.ReturnCode === null ? 0n : util.toBigInt(util.toPointer(data.ReturnCode)), true);
  return buf;
}

export class D3D11_AUTHENTICATED_QUERY_OUTPUTView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get omac(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(0, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x08: pointer
  get QueryType(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(8, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x10: pointer
  get hChannel(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(16, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x18: u32
  get SequenceNumber(): number {
    return this.view.getUint32(24, true);
  }

  // 0x1c: pad4

  // 0x20: pointer
  get ReturnCode(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(32, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: pointer
  set omac(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(0, util.toBigInt(util.toPointer(value)), true);
  }

  // 0x08: pointer
  set QueryType(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(8, util.toBigInt(util.toPointer(value)), true);
  }

  // 0x10: pointer
  set hChannel(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(16, util.toBigInt(util.toPointer(value)), true);
  }

  // 0x18: u32
  set SequenceNumber(value: number) {
    this.view.setUint32(24, value, true);
  }

  // 0x1c: pad4

  // 0x20: pointer
  set ReturnCode(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(32, util.toBigInt(util.toPointer(value)), true);
  }
}

/**
 * _Flags_e__Struct (size: 8)
 */
export interface _Flags_e__Struct {
  /** u32 */
  _bitfield: number;
}

export const sizeof_Flags_e__Struct = 8;

export function alloc_Flags_e__Struct(data?: Partial<_Flags_e__Struct>): Uint8Array {
  const buf = new Uint8Array(sizeof_Flags_e__Struct);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?._bitfield !== undefined) view.setUint32(0, Number(data._bitfield), true);
  // 0x04: pad4
  return buf;
}

export class _Flags_e__StructView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get _bitfield(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: pad4

  // 0x00: u32
  set _bitfield(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: pad4
}

/**
 * Windows.Win32.Graphics.Direct3D11.D3D11_AUTHENTICATED_PROTECTION_FLAGS (size: 16)
 */
export interface D3D11_AUTHENTICATED_PROTECTION_FLAGS {
  /** _Flags_e__Struct */
  Flags: Uint8Array | Deno.PointerValue | null;
  /** u32 */
  Value: number;
}

export const sizeofD3D11_AUTHENTICATED_PROTECTION_FLAGS = 16;

export function allocD3D11_AUTHENTICATED_PROTECTION_FLAGS(data?: Partial<D3D11_AUTHENTICATED_PROTECTION_FLAGS>): Uint8Array {
  const buf = new Uint8Array(sizeofD3D11_AUTHENTICATED_PROTECTION_FLAGS);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.Flags !== undefined) view.setBigUint64(0, data.Flags === null ? 0n : util.toBigInt(util.toPointer(data.Flags)), true);
  // 0x08: u32
  if (data?.Value !== undefined) view.setUint32(8, Number(data.Value), true);
  // 0x0c: pad4
  return buf;
}

export class D3D11_AUTHENTICATED_PROTECTION_FLAGSView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get Flags(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(0, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x08: u32
  get Value(): number {
    return this.view.getUint32(8, true);
  }

  // 0x0c: pad4

  // 0x00: pointer
  set Flags(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(0, util.toBigInt(util.toPointer(value)), true);
  }

  // 0x08: u32
  set Value(value: number) {
    this.view.setUint32(8, value, true);
  }

  // 0x0c: pad4
}

/**
 * Windows.Win32.Graphics.Direct3D11.D3D11_AUTHENTICATED_QUERY_PROTECTION_OUTPUT (size: 16)
 */
export interface D3D11_AUTHENTICATED_QUERY_PROTECTION_OUTPUT {
  /** Windows.Win32.Graphics.Direct3D11.D3D11_AUTHENTICATED_QUERY_OUTPUT */
  Output: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Graphics.Direct3D11.D3D11_AUTHENTICATED_PROTECTION_FLAGS */
  ProtectionFlags: Uint8Array | Deno.PointerValue | null;
}

export const sizeofD3D11_AUTHENTICATED_QUERY_PROTECTION_OUTPUT = 16;

export function allocD3D11_AUTHENTICATED_QUERY_PROTECTION_OUTPUT(data?: Partial<D3D11_AUTHENTICATED_QUERY_PROTECTION_OUTPUT>): Uint8Array {
  const buf = new Uint8Array(sizeofD3D11_AUTHENTICATED_QUERY_PROTECTION_OUTPUT);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.Output !== undefined) view.setBigUint64(0, data.Output === null ? 0n : util.toBigInt(util.toPointer(data.Output)), true);
  // 0x08: pointer
  if (data?.ProtectionFlags !== undefined) view.setBigUint64(8, data.ProtectionFlags === null ? 0n : util.toBigInt(util.toPointer(data.ProtectionFlags)), true);
  return buf;
}

export class D3D11_AUTHENTICATED_QUERY_PROTECTION_OUTPUTView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get Output(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(0, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x08: pointer
  get ProtectionFlags(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(8, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: pointer
  set Output(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(0, util.toBigInt(util.toPointer(value)), true);
  }

  // 0x08: pointer
  set ProtectionFlags(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(8, util.toBigInt(util.toPointer(value)), true);
  }
}

/**
 * Windows.Win32.Graphics.Direct3D11.D3D11_AUTHENTICATED_QUERY_CHANNEL_TYPE_OUTPUT (size: 16)
 */
export interface D3D11_AUTHENTICATED_QUERY_CHANNEL_TYPE_OUTPUT {
  /** Windows.Win32.Graphics.Direct3D11.D3D11_AUTHENTICATED_QUERY_OUTPUT */
  Output: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Graphics.Direct3D11.D3D11_AUTHENTICATED_CHANNEL_TYPE */
  ChannelType: D3D11_AUTHENTICATED_CHANNEL_TYPE;
}

export const sizeofD3D11_AUTHENTICATED_QUERY_CHANNEL_TYPE_OUTPUT = 16;

export function allocD3D11_AUTHENTICATED_QUERY_CHANNEL_TYPE_OUTPUT(data?: Partial<D3D11_AUTHENTICATED_QUERY_CHANNEL_TYPE_OUTPUT>): Uint8Array {
  const buf = new Uint8Array(sizeofD3D11_AUTHENTICATED_QUERY_CHANNEL_TYPE_OUTPUT);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.Output !== undefined) view.setBigUint64(0, data.Output === null ? 0n : util.toBigInt(util.toPointer(data.Output)), true);
  // 0x08: i32
  if (data?.ChannelType !== undefined) view.setInt32(8, Number(data.ChannelType), true);
  // 0x0c: pad4
  return buf;
}

export class D3D11_AUTHENTICATED_QUERY_CHANNEL_TYPE_OUTPUTView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get Output(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(0, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x08: i32
  get ChannelType(): number {
    return this.view.getInt32(8, true);
  }

  // 0x0c: pad4

  // 0x00: pointer
  set Output(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(0, util.toBigInt(util.toPointer(value)), true);
  }

  // 0x08: i32
  set ChannelType(value: number) {
    this.view.setInt32(8, value, true);
  }

  // 0x0c: pad4
}

/**
 * Windows.Win32.Graphics.Direct3D11.D3D11_AUTHENTICATED_QUERY_DEVICE_HANDLE_OUTPUT (size: 16)
 */
export interface D3D11_AUTHENTICATED_QUERY_DEVICE_HANDLE_OUTPUT {
  /** Windows.Win32.Graphics.Direct3D11.D3D11_AUTHENTICATED_QUERY_OUTPUT */
  Output: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Foundation.HANDLE */
  DeviceHandle: Uint8Array | Deno.PointerValue | null;
}

export const sizeofD3D11_AUTHENTICATED_QUERY_DEVICE_HANDLE_OUTPUT = 16;

export function allocD3D11_AUTHENTICATED_QUERY_DEVICE_HANDLE_OUTPUT(data?: Partial<D3D11_AUTHENTICATED_QUERY_DEVICE_HANDLE_OUTPUT>): Uint8Array {
  const buf = new Uint8Array(sizeofD3D11_AUTHENTICATED_QUERY_DEVICE_HANDLE_OUTPUT);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.Output !== undefined) view.setBigUint64(0, data.Output === null ? 0n : util.toBigInt(util.toPointer(data.Output)), true);
  // 0x08: pointer
  if (data?.DeviceHandle !== undefined) view.setBigUint64(8, data.DeviceHandle === null ? 0n : util.toBigInt(util.toPointer(data.DeviceHandle)), true);
  return buf;
}

export class D3D11_AUTHENTICATED_QUERY_DEVICE_HANDLE_OUTPUTView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get Output(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(0, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x08: pointer
  get DeviceHandle(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(8, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: pointer
  set Output(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(0, util.toBigInt(util.toPointer(value)), true);
  }

  // 0x08: pointer
  set DeviceHandle(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(8, util.toBigInt(util.toPointer(value)), true);
  }
}

/**
 * Windows.Win32.Graphics.Direct3D11.D3D11_AUTHENTICATED_QUERY_CRYPTO_SESSION_INPUT (size: 16)
 */
export interface D3D11_AUTHENTICATED_QUERY_CRYPTO_SESSION_INPUT {
  /** Windows.Win32.Graphics.Direct3D11.D3D11_AUTHENTICATED_QUERY_INPUT */
  Input: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Foundation.HANDLE */
  DecoderHandle: Uint8Array | Deno.PointerValue | null;
}

export const sizeofD3D11_AUTHENTICATED_QUERY_CRYPTO_SESSION_INPUT = 16;

export function allocD3D11_AUTHENTICATED_QUERY_CRYPTO_SESSION_INPUT(data?: Partial<D3D11_AUTHENTICATED_QUERY_CRYPTO_SESSION_INPUT>): Uint8Array {
  const buf = new Uint8Array(sizeofD3D11_AUTHENTICATED_QUERY_CRYPTO_SESSION_INPUT);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.Input !== undefined) view.setBigUint64(0, data.Input === null ? 0n : util.toBigInt(util.toPointer(data.Input)), true);
  // 0x08: pointer
  if (data?.DecoderHandle !== undefined) view.setBigUint64(8, data.DecoderHandle === null ? 0n : util.toBigInt(util.toPointer(data.DecoderHandle)), true);
  return buf;
}

export class D3D11_AUTHENTICATED_QUERY_CRYPTO_SESSION_INPUTView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get Input(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(0, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x08: pointer
  get DecoderHandle(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(8, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: pointer
  set Input(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(0, util.toBigInt(util.toPointer(value)), true);
  }

  // 0x08: pointer
  set DecoderHandle(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(8, util.toBigInt(util.toPointer(value)), true);
  }
}

/**
 * Windows.Win32.Graphics.Direct3D11.D3D11_AUTHENTICATED_QUERY_CRYPTO_SESSION_OUTPUT (size: 32)
 */
export interface D3D11_AUTHENTICATED_QUERY_CRYPTO_SESSION_OUTPUT {
  /** Windows.Win32.Graphics.Direct3D11.D3D11_AUTHENTICATED_QUERY_OUTPUT */
  Output: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Foundation.HANDLE */
  DecoderHandle: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Foundation.HANDLE */
  CryptoSessionHandle: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Foundation.HANDLE */
  DeviceHandle: Uint8Array | Deno.PointerValue | null;
}

export const sizeofD3D11_AUTHENTICATED_QUERY_CRYPTO_SESSION_OUTPUT = 32;

export function allocD3D11_AUTHENTICATED_QUERY_CRYPTO_SESSION_OUTPUT(data?: Partial<D3D11_AUTHENTICATED_QUERY_CRYPTO_SESSION_OUTPUT>): Uint8Array {
  const buf = new Uint8Array(sizeofD3D11_AUTHENTICATED_QUERY_CRYPTO_SESSION_OUTPUT);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.Output !== undefined) view.setBigUint64(0, data.Output === null ? 0n : util.toBigInt(util.toPointer(data.Output)), true);
  // 0x08: pointer
  if (data?.DecoderHandle !== undefined) view.setBigUint64(8, data.DecoderHandle === null ? 0n : util.toBigInt(util.toPointer(data.DecoderHandle)), true);
  // 0x10: pointer
  if (data?.CryptoSessionHandle !== undefined) view.setBigUint64(16, data.CryptoSessionHandle === null ? 0n : util.toBigInt(util.toPointer(data.CryptoSessionHandle)), true);
  // 0x18: pointer
  if (data?.DeviceHandle !== undefined) view.setBigUint64(24, data.DeviceHandle === null ? 0n : util.toBigInt(util.toPointer(data.DeviceHandle)), true);
  return buf;
}

export class D3D11_AUTHENTICATED_QUERY_CRYPTO_SESSION_OUTPUTView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get Output(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(0, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x08: pointer
  get DecoderHandle(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(8, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x10: pointer
  get CryptoSessionHandle(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(16, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x18: pointer
  get DeviceHandle(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(24, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: pointer
  set Output(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(0, util.toBigInt(util.toPointer(value)), true);
  }

  // 0x08: pointer
  set DecoderHandle(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(8, util.toBigInt(util.toPointer(value)), true);
  }

  // 0x10: pointer
  set CryptoSessionHandle(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(16, util.toBigInt(util.toPointer(value)), true);
  }

  // 0x18: pointer
  set DeviceHandle(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(24, util.toBigInt(util.toPointer(value)), true);
  }
}

/**
 * Windows.Win32.Graphics.Direct3D11.D3D11_AUTHENTICATED_QUERY_RESTRICTED_SHARED_RESOURCE_PROCESS_COUNT_OUTPUT (size: 16)
 */
export interface D3D11_AUTHENTICATED_QUERY_RESTRICTED_SHARED_RESOURCE_PROCESS_COUNT_OUTPUT {
  /** Windows.Win32.Graphics.Direct3D11.D3D11_AUTHENTICATED_QUERY_OUTPUT */
  Output: Uint8Array | Deno.PointerValue | null;
  /** u32 */
  RestrictedSharedResourceProcessCount: number;
}

export const sizeofD3D11_AUTHENTICATED_QUERY_RESTRICTED_SHARED_RESOURCE_PROCESS_COUNT_OUTPUT = 16;

export function allocD3D11_AUTHENTICATED_QUERY_RESTRICTED_SHARED_RESOURCE_PROCESS_COUNT_OUTPUT(data?: Partial<D3D11_AUTHENTICATED_QUERY_RESTRICTED_SHARED_RESOURCE_PROCESS_COUNT_OUTPUT>): Uint8Array {
  const buf = new Uint8Array(sizeofD3D11_AUTHENTICATED_QUERY_RESTRICTED_SHARED_RESOURCE_PROCESS_COUNT_OUTPUT);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.Output !== undefined) view.setBigUint64(0, data.Output === null ? 0n : util.toBigInt(util.toPointer(data.Output)), true);
  // 0x08: u32
  if (data?.RestrictedSharedResourceProcessCount !== undefined) view.setUint32(8, Number(data.RestrictedSharedResourceProcessCount), true);
  // 0x0c: pad4
  return buf;
}

export class D3D11_AUTHENTICATED_QUERY_RESTRICTED_SHARED_RESOURCE_PROCESS_COUNT_OUTPUTView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get Output(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(0, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x08: u32
  get RestrictedSharedResourceProcessCount(): number {
    return this.view.getUint32(8, true);
  }

  // 0x0c: pad4

  // 0x00: pointer
  set Output(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(0, util.toBigInt(util.toPointer(value)), true);
  }

  // 0x08: u32
  set RestrictedSharedResourceProcessCount(value: number) {
    this.view.setUint32(8, value, true);
  }

  // 0x0c: pad4
}

/**
 * Windows.Win32.Graphics.Direct3D11.D3D11_AUTHENTICATED_QUERY_RESTRICTED_SHARED_RESOURCE_PROCESS_INPUT (size: 16)
 */
export interface D3D11_AUTHENTICATED_QUERY_RESTRICTED_SHARED_RESOURCE_PROCESS_INPUT {
  /** Windows.Win32.Graphics.Direct3D11.D3D11_AUTHENTICATED_QUERY_INPUT */
  Input: Uint8Array | Deno.PointerValue | null;
  /** u32 */
  ProcessIndex: number;
}

export const sizeofD3D11_AUTHENTICATED_QUERY_RESTRICTED_SHARED_RESOURCE_PROCESS_INPUT = 16;

export function allocD3D11_AUTHENTICATED_QUERY_RESTRICTED_SHARED_RESOURCE_PROCESS_INPUT(data?: Partial<D3D11_AUTHENTICATED_QUERY_RESTRICTED_SHARED_RESOURCE_PROCESS_INPUT>): Uint8Array {
  const buf = new Uint8Array(sizeofD3D11_AUTHENTICATED_QUERY_RESTRICTED_SHARED_RESOURCE_PROCESS_INPUT);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.Input !== undefined) view.setBigUint64(0, data.Input === null ? 0n : util.toBigInt(util.toPointer(data.Input)), true);
  // 0x08: u32
  if (data?.ProcessIndex !== undefined) view.setUint32(8, Number(data.ProcessIndex), true);
  // 0x0c: pad4
  return buf;
}

export class D3D11_AUTHENTICATED_QUERY_RESTRICTED_SHARED_RESOURCE_PROCESS_INPUTView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get Input(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(0, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x08: u32
  get ProcessIndex(): number {
    return this.view.getUint32(8, true);
  }

  // 0x0c: pad4

  // 0x00: pointer
  set Input(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(0, util.toBigInt(util.toPointer(value)), true);
  }

  // 0x08: u32
  set ProcessIndex(value: number) {
    this.view.setUint32(8, value, true);
  }

  // 0x0c: pad4
}

/**
 * Windows.Win32.Graphics.Direct3D11.D3D11_AUTHENTICATED_QUERY_RESTRICTED_SHARED_RESOURCE_PROCESS_OUTPUT (size: 24)
 */
export interface D3D11_AUTHENTICATED_QUERY_RESTRICTED_SHARED_RESOURCE_PROCESS_OUTPUT {
  /** Windows.Win32.Graphics.Direct3D11.D3D11_AUTHENTICATED_QUERY_OUTPUT */
  Output: Uint8Array | Deno.PointerValue | null;
  /** u32 */
  ProcessIndex: number;
  /** Windows.Win32.Graphics.Direct3D11.D3D11_AUTHENTICATED_PROCESS_IDENTIFIER_TYPE */
  ProcessIdentifier: D3D11_AUTHENTICATED_PROCESS_IDENTIFIER_TYPE;
  /** Windows.Win32.Foundation.HANDLE */
  ProcessHandle: Uint8Array | Deno.PointerValue | null;
}

export const sizeofD3D11_AUTHENTICATED_QUERY_RESTRICTED_SHARED_RESOURCE_PROCESS_OUTPUT = 24;

export function allocD3D11_AUTHENTICATED_QUERY_RESTRICTED_SHARED_RESOURCE_PROCESS_OUTPUT(data?: Partial<D3D11_AUTHENTICATED_QUERY_RESTRICTED_SHARED_RESOURCE_PROCESS_OUTPUT>): Uint8Array {
  const buf = new Uint8Array(sizeofD3D11_AUTHENTICATED_QUERY_RESTRICTED_SHARED_RESOURCE_PROCESS_OUTPUT);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.Output !== undefined) view.setBigUint64(0, data.Output === null ? 0n : util.toBigInt(util.toPointer(data.Output)), true);
  // 0x08: u32
  if (data?.ProcessIndex !== undefined) view.setUint32(8, Number(data.ProcessIndex), true);
  // 0x0c: i32
  if (data?.ProcessIdentifier !== undefined) view.setInt32(12, Number(data.ProcessIdentifier), true);
  // 0x10: pointer
  if (data?.ProcessHandle !== undefined) view.setBigUint64(16, data.ProcessHandle === null ? 0n : util.toBigInt(util.toPointer(data.ProcessHandle)), true);
  return buf;
}

export class D3D11_AUTHENTICATED_QUERY_RESTRICTED_SHARED_RESOURCE_PROCESS_OUTPUTView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get Output(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(0, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x08: u32
  get ProcessIndex(): number {
    return this.view.getUint32(8, true);
  }

  // 0x0c: i32
  get ProcessIdentifier(): number {
    return this.view.getInt32(12, true);
  }

  // 0x10: pointer
  get ProcessHandle(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(16, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: pointer
  set Output(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(0, util.toBigInt(util.toPointer(value)), true);
  }

  // 0x08: u32
  set ProcessIndex(value: number) {
    this.view.setUint32(8, value, true);
  }

  // 0x0c: i32
  set ProcessIdentifier(value: number) {
    this.view.setInt32(12, value, true);
  }

  // 0x10: pointer
  set ProcessHandle(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(16, util.toBigInt(util.toPointer(value)), true);
  }
}

/**
 * Windows.Win32.Graphics.Direct3D11.D3D11_AUTHENTICATED_QUERY_UNRESTRICTED_PROTECTED_SHARED_RESOURCE_COUNT_OUTPUT (size: 16)
 */
export interface D3D11_AUTHENTICATED_QUERY_UNRESTRICTED_PROTECTED_SHARED_RESOURCE_COUNT_OUTPUT {
  /** Windows.Win32.Graphics.Direct3D11.D3D11_AUTHENTICATED_QUERY_OUTPUT */
  Output: Uint8Array | Deno.PointerValue | null;
  /** u32 */
  UnrestrictedProtectedSharedResourceCount: number;
}

export const sizeofD3D11_AUTHENTICATED_QUERY_UNRESTRICTED_PROTECTED_SHARED_RESOURCE_COUNT_OUTPUT = 16;

export function allocD3D11_AUTHENTICATED_QUERY_UNRESTRICTED_PROTECTED_SHARED_RESOURCE_COUNT_OUTPUT(data?: Partial<D3D11_AUTHENTICATED_QUERY_UNRESTRICTED_PROTECTED_SHARED_RESOURCE_COUNT_OUTPUT>): Uint8Array {
  const buf = new Uint8Array(sizeofD3D11_AUTHENTICATED_QUERY_UNRESTRICTED_PROTECTED_SHARED_RESOURCE_COUNT_OUTPUT);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.Output !== undefined) view.setBigUint64(0, data.Output === null ? 0n : util.toBigInt(util.toPointer(data.Output)), true);
  // 0x08: u32
  if (data?.UnrestrictedProtectedSharedResourceCount !== undefined) view.setUint32(8, Number(data.UnrestrictedProtectedSharedResourceCount), true);
  // 0x0c: pad4
  return buf;
}

export class D3D11_AUTHENTICATED_QUERY_UNRESTRICTED_PROTECTED_SHARED_RESOURCE_COUNT_OUTPUTView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get Output(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(0, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x08: u32
  get UnrestrictedProtectedSharedResourceCount(): number {
    return this.view.getUint32(8, true);
  }

  // 0x0c: pad4

  // 0x00: pointer
  set Output(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(0, util.toBigInt(util.toPointer(value)), true);
  }

  // 0x08: u32
  set UnrestrictedProtectedSharedResourceCount(value: number) {
    this.view.setUint32(8, value, true);
  }

  // 0x0c: pad4
}

/**
 * Windows.Win32.Graphics.Direct3D11.D3D11_AUTHENTICATED_QUERY_OUTPUT_ID_COUNT_INPUT (size: 24)
 */
export interface D3D11_AUTHENTICATED_QUERY_OUTPUT_ID_COUNT_INPUT {
  /** Windows.Win32.Graphics.Direct3D11.D3D11_AUTHENTICATED_QUERY_INPUT */
  Input: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Foundation.HANDLE */
  DeviceHandle: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Foundation.HANDLE */
  CryptoSessionHandle: Uint8Array | Deno.PointerValue | null;
}

export const sizeofD3D11_AUTHENTICATED_QUERY_OUTPUT_ID_COUNT_INPUT = 24;

export function allocD3D11_AUTHENTICATED_QUERY_OUTPUT_ID_COUNT_INPUT(data?: Partial<D3D11_AUTHENTICATED_QUERY_OUTPUT_ID_COUNT_INPUT>): Uint8Array {
  const buf = new Uint8Array(sizeofD3D11_AUTHENTICATED_QUERY_OUTPUT_ID_COUNT_INPUT);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.Input !== undefined) view.setBigUint64(0, data.Input === null ? 0n : util.toBigInt(util.toPointer(data.Input)), true);
  // 0x08: pointer
  if (data?.DeviceHandle !== undefined) view.setBigUint64(8, data.DeviceHandle === null ? 0n : util.toBigInt(util.toPointer(data.DeviceHandle)), true);
  // 0x10: pointer
  if (data?.CryptoSessionHandle !== undefined) view.setBigUint64(16, data.CryptoSessionHandle === null ? 0n : util.toBigInt(util.toPointer(data.CryptoSessionHandle)), true);
  return buf;
}

export class D3D11_AUTHENTICATED_QUERY_OUTPUT_ID_COUNT_INPUTView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get Input(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(0, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x08: pointer
  get DeviceHandle(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(8, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x10: pointer
  get CryptoSessionHandle(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(16, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: pointer
  set Input(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(0, util.toBigInt(util.toPointer(value)), true);
  }

  // 0x08: pointer
  set DeviceHandle(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(8, util.toBigInt(util.toPointer(value)), true);
  }

  // 0x10: pointer
  set CryptoSessionHandle(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(16, util.toBigInt(util.toPointer(value)), true);
  }
}

/**
 * Windows.Win32.Graphics.Direct3D11.D3D11_AUTHENTICATED_QUERY_OUTPUT_ID_COUNT_OUTPUT (size: 32)
 */
export interface D3D11_AUTHENTICATED_QUERY_OUTPUT_ID_COUNT_OUTPUT {
  /** Windows.Win32.Graphics.Direct3D11.D3D11_AUTHENTICATED_QUERY_OUTPUT */
  Output: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Foundation.HANDLE */
  DeviceHandle: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Foundation.HANDLE */
  CryptoSessionHandle: Uint8Array | Deno.PointerValue | null;
  /** u32 */
  OutputIDCount: number;
}

export const sizeofD3D11_AUTHENTICATED_QUERY_OUTPUT_ID_COUNT_OUTPUT = 32;

export function allocD3D11_AUTHENTICATED_QUERY_OUTPUT_ID_COUNT_OUTPUT(data?: Partial<D3D11_AUTHENTICATED_QUERY_OUTPUT_ID_COUNT_OUTPUT>): Uint8Array {
  const buf = new Uint8Array(sizeofD3D11_AUTHENTICATED_QUERY_OUTPUT_ID_COUNT_OUTPUT);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.Output !== undefined) view.setBigUint64(0, data.Output === null ? 0n : util.toBigInt(util.toPointer(data.Output)), true);
  // 0x08: pointer
  if (data?.DeviceHandle !== undefined) view.setBigUint64(8, data.DeviceHandle === null ? 0n : util.toBigInt(util.toPointer(data.DeviceHandle)), true);
  // 0x10: pointer
  if (data?.CryptoSessionHandle !== undefined) view.setBigUint64(16, data.CryptoSessionHandle === null ? 0n : util.toBigInt(util.toPointer(data.CryptoSessionHandle)), true);
  // 0x18: u32
  if (data?.OutputIDCount !== undefined) view.setUint32(24, Number(data.OutputIDCount), true);
  // 0x1c: pad4
  return buf;
}

export class D3D11_AUTHENTICATED_QUERY_OUTPUT_ID_COUNT_OUTPUTView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get Output(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(0, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x08: pointer
  get DeviceHandle(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(8, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x10: pointer
  get CryptoSessionHandle(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(16, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x18: u32
  get OutputIDCount(): number {
    return this.view.getUint32(24, true);
  }

  // 0x1c: pad4

  // 0x00: pointer
  set Output(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(0, util.toBigInt(util.toPointer(value)), true);
  }

  // 0x08: pointer
  set DeviceHandle(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(8, util.toBigInt(util.toPointer(value)), true);
  }

  // 0x10: pointer
  set CryptoSessionHandle(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(16, util.toBigInt(util.toPointer(value)), true);
  }

  // 0x18: u32
  set OutputIDCount(value: number) {
    this.view.setUint32(24, value, true);
  }

  // 0x1c: pad4
}

/**
 * Windows.Win32.Graphics.Direct3D11.D3D11_AUTHENTICATED_QUERY_OUTPUT_ID_INPUT (size: 32)
 */
export interface D3D11_AUTHENTICATED_QUERY_OUTPUT_ID_INPUT {
  /** Windows.Win32.Graphics.Direct3D11.D3D11_AUTHENTICATED_QUERY_INPUT */
  Input: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Foundation.HANDLE */
  DeviceHandle: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Foundation.HANDLE */
  CryptoSessionHandle: Uint8Array | Deno.PointerValue | null;
  /** u32 */
  OutputIDIndex: number;
}

export const sizeofD3D11_AUTHENTICATED_QUERY_OUTPUT_ID_INPUT = 32;

export function allocD3D11_AUTHENTICATED_QUERY_OUTPUT_ID_INPUT(data?: Partial<D3D11_AUTHENTICATED_QUERY_OUTPUT_ID_INPUT>): Uint8Array {
  const buf = new Uint8Array(sizeofD3D11_AUTHENTICATED_QUERY_OUTPUT_ID_INPUT);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.Input !== undefined) view.setBigUint64(0, data.Input === null ? 0n : util.toBigInt(util.toPointer(data.Input)), true);
  // 0x08: pointer
  if (data?.DeviceHandle !== undefined) view.setBigUint64(8, data.DeviceHandle === null ? 0n : util.toBigInt(util.toPointer(data.DeviceHandle)), true);
  // 0x10: pointer
  if (data?.CryptoSessionHandle !== undefined) view.setBigUint64(16, data.CryptoSessionHandle === null ? 0n : util.toBigInt(util.toPointer(data.CryptoSessionHandle)), true);
  // 0x18: u32
  if (data?.OutputIDIndex !== undefined) view.setUint32(24, Number(data.OutputIDIndex), true);
  // 0x1c: pad4
  return buf;
}

export class D3D11_AUTHENTICATED_QUERY_OUTPUT_ID_INPUTView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get Input(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(0, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x08: pointer
  get DeviceHandle(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(8, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x10: pointer
  get CryptoSessionHandle(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(16, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x18: u32
  get OutputIDIndex(): number {
    return this.view.getUint32(24, true);
  }

  // 0x1c: pad4

  // 0x00: pointer
  set Input(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(0, util.toBigInt(util.toPointer(value)), true);
  }

  // 0x08: pointer
  set DeviceHandle(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(8, util.toBigInt(util.toPointer(value)), true);
  }

  // 0x10: pointer
  set CryptoSessionHandle(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(16, util.toBigInt(util.toPointer(value)), true);
  }

  // 0x18: u32
  set OutputIDIndex(value: number) {
    this.view.setUint32(24, value, true);
  }

  // 0x1c: pad4
}

/**
 * Windows.Win32.Graphics.Direct3D11.D3D11_AUTHENTICATED_QUERY_OUTPUT_ID_OUTPUT (size: 40)
 */
export interface D3D11_AUTHENTICATED_QUERY_OUTPUT_ID_OUTPUT {
  /** Windows.Win32.Graphics.Direct3D11.D3D11_AUTHENTICATED_QUERY_OUTPUT */
  Output: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Foundation.HANDLE */
  DeviceHandle: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Foundation.HANDLE */
  CryptoSessionHandle: Uint8Array | Deno.PointerValue | null;
  /** u32 */
  OutputIDIndex: number;
  /** u64 */
  OutputID: number | bigint;
}

export const sizeofD3D11_AUTHENTICATED_QUERY_OUTPUT_ID_OUTPUT = 40;

export function allocD3D11_AUTHENTICATED_QUERY_OUTPUT_ID_OUTPUT(data?: Partial<D3D11_AUTHENTICATED_QUERY_OUTPUT_ID_OUTPUT>): Uint8Array {
  const buf = new Uint8Array(sizeofD3D11_AUTHENTICATED_QUERY_OUTPUT_ID_OUTPUT);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.Output !== undefined) view.setBigUint64(0, data.Output === null ? 0n : util.toBigInt(util.toPointer(data.Output)), true);
  // 0x08: pointer
  if (data?.DeviceHandle !== undefined) view.setBigUint64(8, data.DeviceHandle === null ? 0n : util.toBigInt(util.toPointer(data.DeviceHandle)), true);
  // 0x10: pointer
  if (data?.CryptoSessionHandle !== undefined) view.setBigUint64(16, data.CryptoSessionHandle === null ? 0n : util.toBigInt(util.toPointer(data.CryptoSessionHandle)), true);
  // 0x18: u32
  if (data?.OutputIDIndex !== undefined) view.setUint32(24, Number(data.OutputIDIndex), true);
  // 0x1c: pad4
  // 0x20: u64
  if (data?.OutputID !== undefined) view.setBigUint64(32, util.toBigInt(data.OutputID), true);
  return buf;
}

export class D3D11_AUTHENTICATED_QUERY_OUTPUT_ID_OUTPUTView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get Output(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(0, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x08: pointer
  get DeviceHandle(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(8, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x10: pointer
  get CryptoSessionHandle(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(16, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x18: u32
  get OutputIDIndex(): number {
    return this.view.getUint32(24, true);
  }

  // 0x1c: pad4

  // 0x20: u64
  get OutputID(): number | bigint {
    return this.view.getBigUint64(32, true);
  }

  // 0x00: pointer
  set Output(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(0, util.toBigInt(util.toPointer(value)), true);
  }

  // 0x08: pointer
  set DeviceHandle(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(8, util.toBigInt(util.toPointer(value)), true);
  }

  // 0x10: pointer
  set CryptoSessionHandle(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(16, util.toBigInt(util.toPointer(value)), true);
  }

  // 0x18: u32
  set OutputIDIndex(value: number) {
    this.view.setUint32(24, value, true);
  }

  // 0x1c: pad4

  // 0x20: u64
  set OutputID(value: number | bigint) {
    this.view.setBigUint64(32, util.toBigInt(value), true);
  }
}

/**
 * Windows.Win32.Graphics.Direct3D11.D3D11_AUTHENTICATED_QUERY_ACCESSIBILITY_OUTPUT (size: 24)
 */
export interface D3D11_AUTHENTICATED_QUERY_ACCESSIBILITY_OUTPUT {
  /** Windows.Win32.Graphics.Direct3D11.D3D11_AUTHENTICATED_QUERY_OUTPUT */
  Output: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Graphics.Direct3D11.D3D11_BUS_TYPE */
  BusType: D3D11_BUS_TYPE;
  /** Windows.Win32.Foundation.BOOL */
  AccessibleInContiguousBlocks: boolean;
  /** Windows.Win32.Foundation.BOOL */
  AccessibleInNonContiguousBlocks: boolean;
}

export const sizeofD3D11_AUTHENTICATED_QUERY_ACCESSIBILITY_OUTPUT = 24;

export function allocD3D11_AUTHENTICATED_QUERY_ACCESSIBILITY_OUTPUT(data?: Partial<D3D11_AUTHENTICATED_QUERY_ACCESSIBILITY_OUTPUT>): Uint8Array {
  const buf = new Uint8Array(sizeofD3D11_AUTHENTICATED_QUERY_ACCESSIBILITY_OUTPUT);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.Output !== undefined) view.setBigUint64(0, data.Output === null ? 0n : util.toBigInt(util.toPointer(data.Output)), true);
  // 0x08: i32
  if (data?.BusType !== undefined) view.setInt32(8, Number(data.BusType), true);
  // 0x0c: i32
  if (data?.AccessibleInContiguousBlocks !== undefined) view.setInt32(12, Number(data.AccessibleInContiguousBlocks), true);
  // 0x10: i32
  if (data?.AccessibleInNonContiguousBlocks !== undefined) view.setInt32(16, Number(data.AccessibleInNonContiguousBlocks), true);
  // 0x14: pad4
  return buf;
}

export class D3D11_AUTHENTICATED_QUERY_ACCESSIBILITY_OUTPUTView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get Output(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(0, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x08: i32
  get BusType(): number {
    return this.view.getInt32(8, true);
  }

  // 0x0c: i32
  get AccessibleInContiguousBlocks(): number {
    return this.view.getInt32(12, true);
  }

  // 0x10: i32
  get AccessibleInNonContiguousBlocks(): number {
    return this.view.getInt32(16, true);
  }

  // 0x14: pad4

  // 0x00: pointer
  set Output(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(0, util.toBigInt(util.toPointer(value)), true);
  }

  // 0x08: i32
  set BusType(value: number) {
    this.view.setInt32(8, value, true);
  }

  // 0x0c: i32
  set AccessibleInContiguousBlocks(value: number) {
    this.view.setInt32(12, value, true);
  }

  // 0x10: i32
  set AccessibleInNonContiguousBlocks(value: number) {
    this.view.setInt32(16, value, true);
  }

  // 0x14: pad4
}

/**
 * Windows.Win32.Graphics.Direct3D11.D3D11_AUTHENTICATED_QUERY_ACCESSIBILITY_ENCRYPTION_GUID_COUNT_OUTPUT (size: 16)
 */
export interface D3D11_AUTHENTICATED_QUERY_ACCESSIBILITY_ENCRYPTION_GUID_COUNT_OUTPUT {
  /** Windows.Win32.Graphics.Direct3D11.D3D11_AUTHENTICATED_QUERY_OUTPUT */
  Output: Uint8Array | Deno.PointerValue | null;
  /** u32 */
  EncryptionGuidCount: number;
}

export const sizeofD3D11_AUTHENTICATED_QUERY_ACCESSIBILITY_ENCRYPTION_GUID_COUNT_OUTPUT = 16;

export function allocD3D11_AUTHENTICATED_QUERY_ACCESSIBILITY_ENCRYPTION_GUID_COUNT_OUTPUT(data?: Partial<D3D11_AUTHENTICATED_QUERY_ACCESSIBILITY_ENCRYPTION_GUID_COUNT_OUTPUT>): Uint8Array {
  const buf = new Uint8Array(sizeofD3D11_AUTHENTICATED_QUERY_ACCESSIBILITY_ENCRYPTION_GUID_COUNT_OUTPUT);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.Output !== undefined) view.setBigUint64(0, data.Output === null ? 0n : util.toBigInt(util.toPointer(data.Output)), true);
  // 0x08: u32
  if (data?.EncryptionGuidCount !== undefined) view.setUint32(8, Number(data.EncryptionGuidCount), true);
  // 0x0c: pad4
  return buf;
}

export class D3D11_AUTHENTICATED_QUERY_ACCESSIBILITY_ENCRYPTION_GUID_COUNT_OUTPUTView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get Output(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(0, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x08: u32
  get EncryptionGuidCount(): number {
    return this.view.getUint32(8, true);
  }

  // 0x0c: pad4

  // 0x00: pointer
  set Output(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(0, util.toBigInt(util.toPointer(value)), true);
  }

  // 0x08: u32
  set EncryptionGuidCount(value: number) {
    this.view.setUint32(8, value, true);
  }

  // 0x0c: pad4
}

/**
 * Windows.Win32.Graphics.Direct3D11.D3D11_AUTHENTICATED_QUERY_ACCESSIBILITY_ENCRYPTION_GUID_INPUT (size: 16)
 */
export interface D3D11_AUTHENTICATED_QUERY_ACCESSIBILITY_ENCRYPTION_GUID_INPUT {
  /** Windows.Win32.Graphics.Direct3D11.D3D11_AUTHENTICATED_QUERY_INPUT */
  Input: Uint8Array | Deno.PointerValue | null;
  /** u32 */
  EncryptionGuidIndex: number;
}

export const sizeofD3D11_AUTHENTICATED_QUERY_ACCESSIBILITY_ENCRYPTION_GUID_INPUT = 16;

export function allocD3D11_AUTHENTICATED_QUERY_ACCESSIBILITY_ENCRYPTION_GUID_INPUT(data?: Partial<D3D11_AUTHENTICATED_QUERY_ACCESSIBILITY_ENCRYPTION_GUID_INPUT>): Uint8Array {
  const buf = new Uint8Array(sizeofD3D11_AUTHENTICATED_QUERY_ACCESSIBILITY_ENCRYPTION_GUID_INPUT);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.Input !== undefined) view.setBigUint64(0, data.Input === null ? 0n : util.toBigInt(util.toPointer(data.Input)), true);
  // 0x08: u32
  if (data?.EncryptionGuidIndex !== undefined) view.setUint32(8, Number(data.EncryptionGuidIndex), true);
  // 0x0c: pad4
  return buf;
}

export class D3D11_AUTHENTICATED_QUERY_ACCESSIBILITY_ENCRYPTION_GUID_INPUTView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get Input(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(0, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x08: u32
  get EncryptionGuidIndex(): number {
    return this.view.getUint32(8, true);
  }

  // 0x0c: pad4

  // 0x00: pointer
  set Input(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(0, util.toBigInt(util.toPointer(value)), true);
  }

  // 0x08: u32
  set EncryptionGuidIndex(value: number) {
    this.view.setUint32(8, value, true);
  }

  // 0x0c: pad4
}

/**
 * Windows.Win32.Graphics.Direct3D11.D3D11_AUTHENTICATED_QUERY_ACCESSIBILITY_ENCRYPTION_GUID_OUTPUT (size: 24)
 */
export interface D3D11_AUTHENTICATED_QUERY_ACCESSIBILITY_ENCRYPTION_GUID_OUTPUT {
  /** Windows.Win32.Graphics.Direct3D11.D3D11_AUTHENTICATED_QUERY_OUTPUT */
  Output: Uint8Array | Deno.PointerValue | null;
  /** u32 */
  EncryptionGuidIndex: number;
  /** System.Guid */
  EncryptionGuid: Uint8Array | Deno.PointerValue | null;
}

export const sizeofD3D11_AUTHENTICATED_QUERY_ACCESSIBILITY_ENCRYPTION_GUID_OUTPUT = 24;

export function allocD3D11_AUTHENTICATED_QUERY_ACCESSIBILITY_ENCRYPTION_GUID_OUTPUT(data?: Partial<D3D11_AUTHENTICATED_QUERY_ACCESSIBILITY_ENCRYPTION_GUID_OUTPUT>): Uint8Array {
  const buf = new Uint8Array(sizeofD3D11_AUTHENTICATED_QUERY_ACCESSIBILITY_ENCRYPTION_GUID_OUTPUT);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.Output !== undefined) view.setBigUint64(0, data.Output === null ? 0n : util.toBigInt(util.toPointer(data.Output)), true);
  // 0x08: u32
  if (data?.EncryptionGuidIndex !== undefined) view.setUint32(8, Number(data.EncryptionGuidIndex), true);
  // 0x0c: pad4
  // 0x10: pointer
  if (data?.EncryptionGuid !== undefined) view.setBigUint64(16, data.EncryptionGuid === null ? 0n : util.toBigInt(util.toPointer(data.EncryptionGuid)), true);
  return buf;
}

export class D3D11_AUTHENTICATED_QUERY_ACCESSIBILITY_ENCRYPTION_GUID_OUTPUTView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get Output(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(0, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x08: u32
  get EncryptionGuidIndex(): number {
    return this.view.getUint32(8, true);
  }

  // 0x0c: pad4

  // 0x10: pointer
  get EncryptionGuid(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(16, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: pointer
  set Output(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(0, util.toBigInt(util.toPointer(value)), true);
  }

  // 0x08: u32
  set EncryptionGuidIndex(value: number) {
    this.view.setUint32(8, value, true);
  }

  // 0x0c: pad4

  // 0x10: pointer
  set EncryptionGuid(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(16, util.toBigInt(util.toPointer(value)), true);
  }
}

/**
 * Windows.Win32.Graphics.Direct3D11.D3D11_AUTHENTICATED_QUERY_CURRENT_ACCESSIBILITY_ENCRYPTION_OUTPUT (size: 16)
 */
export interface D3D11_AUTHENTICATED_QUERY_CURRENT_ACCESSIBILITY_ENCRYPTION_OUTPUT {
  /** Windows.Win32.Graphics.Direct3D11.D3D11_AUTHENTICATED_QUERY_OUTPUT */
  Output: Uint8Array | Deno.PointerValue | null;
  /** System.Guid */
  EncryptionGuid: Uint8Array | Deno.PointerValue | null;
}

export const sizeofD3D11_AUTHENTICATED_QUERY_CURRENT_ACCESSIBILITY_ENCRYPTION_OUTPUT = 16;

export function allocD3D11_AUTHENTICATED_QUERY_CURRENT_ACCESSIBILITY_ENCRYPTION_OUTPUT(data?: Partial<D3D11_AUTHENTICATED_QUERY_CURRENT_ACCESSIBILITY_ENCRYPTION_OUTPUT>): Uint8Array {
  const buf = new Uint8Array(sizeofD3D11_AUTHENTICATED_QUERY_CURRENT_ACCESSIBILITY_ENCRYPTION_OUTPUT);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.Output !== undefined) view.setBigUint64(0, data.Output === null ? 0n : util.toBigInt(util.toPointer(data.Output)), true);
  // 0x08: pointer
  if (data?.EncryptionGuid !== undefined) view.setBigUint64(8, data.EncryptionGuid === null ? 0n : util.toBigInt(util.toPointer(data.EncryptionGuid)), true);
  return buf;
}

export class D3D11_AUTHENTICATED_QUERY_CURRENT_ACCESSIBILITY_ENCRYPTION_OUTPUTView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get Output(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(0, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x08: pointer
  get EncryptionGuid(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(8, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: pointer
  set Output(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(0, util.toBigInt(util.toPointer(value)), true);
  }

  // 0x08: pointer
  set EncryptionGuid(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(8, util.toBigInt(util.toPointer(value)), true);
  }
}

/**
 * Windows.Win32.Graphics.Direct3D11.D3D11_AUTHENTICATED_CONFIGURE_INPUT (size: 32)
 */
export interface D3D11_AUTHENTICATED_CONFIGURE_INPUT {
  /** Windows.Win32.Graphics.Direct3D11.D3D11_OMAC */
  omac: Uint8Array | Deno.PointerValue | null;
  /** System.Guid */
  ConfigureType: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Foundation.HANDLE */
  hChannel: Uint8Array | Deno.PointerValue | null;
  /** u32 */
  SequenceNumber: number;
}

export const sizeofD3D11_AUTHENTICATED_CONFIGURE_INPUT = 32;

export function allocD3D11_AUTHENTICATED_CONFIGURE_INPUT(data?: Partial<D3D11_AUTHENTICATED_CONFIGURE_INPUT>): Uint8Array {
  const buf = new Uint8Array(sizeofD3D11_AUTHENTICATED_CONFIGURE_INPUT);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.omac !== undefined) view.setBigUint64(0, data.omac === null ? 0n : util.toBigInt(util.toPointer(data.omac)), true);
  // 0x08: pointer
  if (data?.ConfigureType !== undefined) view.setBigUint64(8, data.ConfigureType === null ? 0n : util.toBigInt(util.toPointer(data.ConfigureType)), true);
  // 0x10: pointer
  if (data?.hChannel !== undefined) view.setBigUint64(16, data.hChannel === null ? 0n : util.toBigInt(util.toPointer(data.hChannel)), true);
  // 0x18: u32
  if (data?.SequenceNumber !== undefined) view.setUint32(24, Number(data.SequenceNumber), true);
  // 0x1c: pad4
  return buf;
}

export class D3D11_AUTHENTICATED_CONFIGURE_INPUTView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get omac(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(0, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x08: pointer
  get ConfigureType(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(8, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x10: pointer
  get hChannel(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(16, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x18: u32
  get SequenceNumber(): number {
    return this.view.getUint32(24, true);
  }

  // 0x1c: pad4

  // 0x00: pointer
  set omac(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(0, util.toBigInt(util.toPointer(value)), true);
  }

  // 0x08: pointer
  set ConfigureType(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(8, util.toBigInt(util.toPointer(value)), true);
  }

  // 0x10: pointer
  set hChannel(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(16, util.toBigInt(util.toPointer(value)), true);
  }

  // 0x18: u32
  set SequenceNumber(value: number) {
    this.view.setUint32(24, value, true);
  }

  // 0x1c: pad4
}

/**
 * Windows.Win32.Graphics.Direct3D11.D3D11_AUTHENTICATED_CONFIGURE_OUTPUT (size: 40)
 */
export interface D3D11_AUTHENTICATED_CONFIGURE_OUTPUT {
  /** Windows.Win32.Graphics.Direct3D11.D3D11_OMAC */
  omac: Uint8Array | Deno.PointerValue | null;
  /** System.Guid */
  ConfigureType: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Foundation.HANDLE */
  hChannel: Uint8Array | Deno.PointerValue | null;
  /** u32 */
  SequenceNumber: number;
  /** Windows.Win32.Foundation.HRESULT */
  ReturnCode: Uint8Array | Deno.PointerValue | null;
}

export const sizeofD3D11_AUTHENTICATED_CONFIGURE_OUTPUT = 40;

export function allocD3D11_AUTHENTICATED_CONFIGURE_OUTPUT(data?: Partial<D3D11_AUTHENTICATED_CONFIGURE_OUTPUT>): Uint8Array {
  const buf = new Uint8Array(sizeofD3D11_AUTHENTICATED_CONFIGURE_OUTPUT);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.omac !== undefined) view.setBigUint64(0, data.omac === null ? 0n : util.toBigInt(util.toPointer(data.omac)), true);
  // 0x08: pointer
  if (data?.ConfigureType !== undefined) view.setBigUint64(8, data.ConfigureType === null ? 0n : util.toBigInt(util.toPointer(data.ConfigureType)), true);
  // 0x10: pointer
  if (data?.hChannel !== undefined) view.setBigUint64(16, data.hChannel === null ? 0n : util.toBigInt(util.toPointer(data.hChannel)), true);
  // 0x18: u32
  if (data?.SequenceNumber !== undefined) view.setUint32(24, Number(data.SequenceNumber), true);
  // 0x1c: pad4
  // 0x20: pointer
  if (data?.ReturnCode !== undefined) view.setBigUint64(32, data.ReturnCode === null ? 0n : util.toBigInt(util.toPointer(data.ReturnCode)), true);
  return buf;
}

export class D3D11_AUTHENTICATED_CONFIGURE_OUTPUTView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get omac(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(0, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x08: pointer
  get ConfigureType(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(8, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x10: pointer
  get hChannel(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(16, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x18: u32
  get SequenceNumber(): number {
    return this.view.getUint32(24, true);
  }

  // 0x1c: pad4

  // 0x20: pointer
  get ReturnCode(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(32, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: pointer
  set omac(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(0, util.toBigInt(util.toPointer(value)), true);
  }

  // 0x08: pointer
  set ConfigureType(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(8, util.toBigInt(util.toPointer(value)), true);
  }

  // 0x10: pointer
  set hChannel(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(16, util.toBigInt(util.toPointer(value)), true);
  }

  // 0x18: u32
  set SequenceNumber(value: number) {
    this.view.setUint32(24, value, true);
  }

  // 0x1c: pad4

  // 0x20: pointer
  set ReturnCode(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(32, util.toBigInt(util.toPointer(value)), true);
  }
}

/**
 * Windows.Win32.Graphics.Direct3D11.D3D11_AUTHENTICATED_CONFIGURE_INITIALIZE_INPUT (size: 16)
 */
export interface D3D11_AUTHENTICATED_CONFIGURE_INITIALIZE_INPUT {
  /** Windows.Win32.Graphics.Direct3D11.D3D11_AUTHENTICATED_CONFIGURE_INPUT */
  Parameters: Uint8Array | Deno.PointerValue | null;
  /** u32 */
  StartSequenceQuery: number;
  /** u32 */
  StartSequenceConfigure: number;
}

export const sizeofD3D11_AUTHENTICATED_CONFIGURE_INITIALIZE_INPUT = 16;

export function allocD3D11_AUTHENTICATED_CONFIGURE_INITIALIZE_INPUT(data?: Partial<D3D11_AUTHENTICATED_CONFIGURE_INITIALIZE_INPUT>): Uint8Array {
  const buf = new Uint8Array(sizeofD3D11_AUTHENTICATED_CONFIGURE_INITIALIZE_INPUT);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.Parameters !== undefined) view.setBigUint64(0, data.Parameters === null ? 0n : util.toBigInt(util.toPointer(data.Parameters)), true);
  // 0x08: u32
  if (data?.StartSequenceQuery !== undefined) view.setUint32(8, Number(data.StartSequenceQuery), true);
  // 0x0c: u32
  if (data?.StartSequenceConfigure !== undefined) view.setUint32(12, Number(data.StartSequenceConfigure), true);
  return buf;
}

export class D3D11_AUTHENTICATED_CONFIGURE_INITIALIZE_INPUTView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get Parameters(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(0, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x08: u32
  get StartSequenceQuery(): number {
    return this.view.getUint32(8, true);
  }

  // 0x0c: u32
  get StartSequenceConfigure(): number {
    return this.view.getUint32(12, true);
  }

  // 0x00: pointer
  set Parameters(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(0, util.toBigInt(util.toPointer(value)), true);
  }

  // 0x08: u32
  set StartSequenceQuery(value: number) {
    this.view.setUint32(8, value, true);
  }

  // 0x0c: u32
  set StartSequenceConfigure(value: number) {
    this.view.setUint32(12, value, true);
  }
}

/**
 * Windows.Win32.Graphics.Direct3D11.D3D11_AUTHENTICATED_CONFIGURE_PROTECTION_INPUT (size: 16)
 */
export interface D3D11_AUTHENTICATED_CONFIGURE_PROTECTION_INPUT {
  /** Windows.Win32.Graphics.Direct3D11.D3D11_AUTHENTICATED_CONFIGURE_INPUT */
  Parameters: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Graphics.Direct3D11.D3D11_AUTHENTICATED_PROTECTION_FLAGS */
  Protections: Uint8Array | Deno.PointerValue | null;
}

export const sizeofD3D11_AUTHENTICATED_CONFIGURE_PROTECTION_INPUT = 16;

export function allocD3D11_AUTHENTICATED_CONFIGURE_PROTECTION_INPUT(data?: Partial<D3D11_AUTHENTICATED_CONFIGURE_PROTECTION_INPUT>): Uint8Array {
  const buf = new Uint8Array(sizeofD3D11_AUTHENTICATED_CONFIGURE_PROTECTION_INPUT);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.Parameters !== undefined) view.setBigUint64(0, data.Parameters === null ? 0n : util.toBigInt(util.toPointer(data.Parameters)), true);
  // 0x08: pointer
  if (data?.Protections !== undefined) view.setBigUint64(8, data.Protections === null ? 0n : util.toBigInt(util.toPointer(data.Protections)), true);
  return buf;
}

export class D3D11_AUTHENTICATED_CONFIGURE_PROTECTION_INPUTView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get Parameters(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(0, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x08: pointer
  get Protections(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(8, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: pointer
  set Parameters(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(0, util.toBigInt(util.toPointer(value)), true);
  }

  // 0x08: pointer
  set Protections(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(8, util.toBigInt(util.toPointer(value)), true);
  }
}

/**
 * Windows.Win32.Graphics.Direct3D11.D3D11_AUTHENTICATED_CONFIGURE_CRYPTO_SESSION_INPUT (size: 32)
 */
export interface D3D11_AUTHENTICATED_CONFIGURE_CRYPTO_SESSION_INPUT {
  /** Windows.Win32.Graphics.Direct3D11.D3D11_AUTHENTICATED_CONFIGURE_INPUT */
  Parameters: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Foundation.HANDLE */
  DecoderHandle: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Foundation.HANDLE */
  CryptoSessionHandle: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Foundation.HANDLE */
  DeviceHandle: Uint8Array | Deno.PointerValue | null;
}

export const sizeofD3D11_AUTHENTICATED_CONFIGURE_CRYPTO_SESSION_INPUT = 32;

export function allocD3D11_AUTHENTICATED_CONFIGURE_CRYPTO_SESSION_INPUT(data?: Partial<D3D11_AUTHENTICATED_CONFIGURE_CRYPTO_SESSION_INPUT>): Uint8Array {
  const buf = new Uint8Array(sizeofD3D11_AUTHENTICATED_CONFIGURE_CRYPTO_SESSION_INPUT);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.Parameters !== undefined) view.setBigUint64(0, data.Parameters === null ? 0n : util.toBigInt(util.toPointer(data.Parameters)), true);
  // 0x08: pointer
  if (data?.DecoderHandle !== undefined) view.setBigUint64(8, data.DecoderHandle === null ? 0n : util.toBigInt(util.toPointer(data.DecoderHandle)), true);
  // 0x10: pointer
  if (data?.CryptoSessionHandle !== undefined) view.setBigUint64(16, data.CryptoSessionHandle === null ? 0n : util.toBigInt(util.toPointer(data.CryptoSessionHandle)), true);
  // 0x18: pointer
  if (data?.DeviceHandle !== undefined) view.setBigUint64(24, data.DeviceHandle === null ? 0n : util.toBigInt(util.toPointer(data.DeviceHandle)), true);
  return buf;
}

export class D3D11_AUTHENTICATED_CONFIGURE_CRYPTO_SESSION_INPUTView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get Parameters(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(0, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x08: pointer
  get DecoderHandle(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(8, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x10: pointer
  get CryptoSessionHandle(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(16, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x18: pointer
  get DeviceHandle(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(24, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: pointer
  set Parameters(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(0, util.toBigInt(util.toPointer(value)), true);
  }

  // 0x08: pointer
  set DecoderHandle(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(8, util.toBigInt(util.toPointer(value)), true);
  }

  // 0x10: pointer
  set CryptoSessionHandle(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(16, util.toBigInt(util.toPointer(value)), true);
  }

  // 0x18: pointer
  set DeviceHandle(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(24, util.toBigInt(util.toPointer(value)), true);
  }
}

/**
 * Windows.Win32.Graphics.Direct3D11.D3D11_AUTHENTICATED_CONFIGURE_SHARED_RESOURCE_INPUT (size: 32)
 */
export interface D3D11_AUTHENTICATED_CONFIGURE_SHARED_RESOURCE_INPUT {
  /** Windows.Win32.Graphics.Direct3D11.D3D11_AUTHENTICATED_CONFIGURE_INPUT */
  Parameters: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Graphics.Direct3D11.D3D11_AUTHENTICATED_PROCESS_IDENTIFIER_TYPE */
  ProcessType: D3D11_AUTHENTICATED_PROCESS_IDENTIFIER_TYPE;
  /** Windows.Win32.Foundation.HANDLE */
  ProcessHandle: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Foundation.BOOL */
  AllowAccess: boolean;
}

export const sizeofD3D11_AUTHENTICATED_CONFIGURE_SHARED_RESOURCE_INPUT = 32;

export function allocD3D11_AUTHENTICATED_CONFIGURE_SHARED_RESOURCE_INPUT(data?: Partial<D3D11_AUTHENTICATED_CONFIGURE_SHARED_RESOURCE_INPUT>): Uint8Array {
  const buf = new Uint8Array(sizeofD3D11_AUTHENTICATED_CONFIGURE_SHARED_RESOURCE_INPUT);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.Parameters !== undefined) view.setBigUint64(0, data.Parameters === null ? 0n : util.toBigInt(util.toPointer(data.Parameters)), true);
  // 0x08: i32
  if (data?.ProcessType !== undefined) view.setInt32(8, Number(data.ProcessType), true);
  // 0x0c: pad4
  // 0x10: pointer
  if (data?.ProcessHandle !== undefined) view.setBigUint64(16, data.ProcessHandle === null ? 0n : util.toBigInt(util.toPointer(data.ProcessHandle)), true);
  // 0x18: i32
  if (data?.AllowAccess !== undefined) view.setInt32(24, Number(data.AllowAccess), true);
  // 0x1c: pad4
  return buf;
}

export class D3D11_AUTHENTICATED_CONFIGURE_SHARED_RESOURCE_INPUTView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get Parameters(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(0, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x08: i32
  get ProcessType(): number {
    return this.view.getInt32(8, true);
  }

  // 0x0c: pad4

  // 0x10: pointer
  get ProcessHandle(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(16, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x18: i32
  get AllowAccess(): number {
    return this.view.getInt32(24, true);
  }

  // 0x1c: pad4

  // 0x00: pointer
  set Parameters(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(0, util.toBigInt(util.toPointer(value)), true);
  }

  // 0x08: i32
  set ProcessType(value: number) {
    this.view.setInt32(8, value, true);
  }

  // 0x0c: pad4

  // 0x10: pointer
  set ProcessHandle(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(16, util.toBigInt(util.toPointer(value)), true);
  }

  // 0x18: i32
  set AllowAccess(value: number) {
    this.view.setInt32(24, value, true);
  }

  // 0x1c: pad4
}

/**
 * Windows.Win32.Graphics.Direct3D11.D3D11_AUTHENTICATED_CONFIGURE_ACCESSIBLE_ENCRYPTION_INPUT (size: 16)
 */
export interface D3D11_AUTHENTICATED_CONFIGURE_ACCESSIBLE_ENCRYPTION_INPUT {
  /** Windows.Win32.Graphics.Direct3D11.D3D11_AUTHENTICATED_CONFIGURE_INPUT */
  Parameters: Uint8Array | Deno.PointerValue | null;
  /** System.Guid */
  EncryptionGuid: Uint8Array | Deno.PointerValue | null;
}

export const sizeofD3D11_AUTHENTICATED_CONFIGURE_ACCESSIBLE_ENCRYPTION_INPUT = 16;

export function allocD3D11_AUTHENTICATED_CONFIGURE_ACCESSIBLE_ENCRYPTION_INPUT(data?: Partial<D3D11_AUTHENTICATED_CONFIGURE_ACCESSIBLE_ENCRYPTION_INPUT>): Uint8Array {
  const buf = new Uint8Array(sizeofD3D11_AUTHENTICATED_CONFIGURE_ACCESSIBLE_ENCRYPTION_INPUT);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.Parameters !== undefined) view.setBigUint64(0, data.Parameters === null ? 0n : util.toBigInt(util.toPointer(data.Parameters)), true);
  // 0x08: pointer
  if (data?.EncryptionGuid !== undefined) view.setBigUint64(8, data.EncryptionGuid === null ? 0n : util.toBigInt(util.toPointer(data.EncryptionGuid)), true);
  return buf;
}

export class D3D11_AUTHENTICATED_CONFIGURE_ACCESSIBLE_ENCRYPTION_INPUTView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get Parameters(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(0, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x08: pointer
  get EncryptionGuid(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(8, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: pointer
  set Parameters(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(0, util.toBigInt(util.toPointer(value)), true);
  }

  // 0x08: pointer
  set EncryptionGuid(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(8, util.toBigInt(util.toPointer(value)), true);
  }
}

/**
 * Windows.Win32.Graphics.Direct3D11.D3D11_TEX2D_VDOV (size: 8)
 */
export interface D3D11_TEX2D_VDOV {
  /** u32 */
  ArraySlice: number;
}

export const sizeofD3D11_TEX2D_VDOV = 8;

export function allocD3D11_TEX2D_VDOV(data?: Partial<D3D11_TEX2D_VDOV>): Uint8Array {
  const buf = new Uint8Array(sizeofD3D11_TEX2D_VDOV);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.ArraySlice !== undefined) view.setUint32(0, Number(data.ArraySlice), true);
  // 0x04: pad4
  return buf;
}

export class D3D11_TEX2D_VDOVView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get ArraySlice(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: pad4

  // 0x00: u32
  set ArraySlice(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: pad4
}

/**
 * Windows.Win32.Graphics.Direct3D11.D3D11_VIDEO_DECODER_OUTPUT_VIEW_DESC (size: 24)
 */
export interface D3D11_VIDEO_DECODER_OUTPUT_VIEW_DESC {
  /** System.Guid */
  DecodeProfile: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Graphics.Direct3D11.D3D11_VDOV_DIMENSION */
  ViewDimension: D3D11_VDOV_DIMENSION;
  /** _Anonymous_e__Union */
  Anonymous: Uint8Array | Deno.PointerValue | null;
}

export const sizeofD3D11_VIDEO_DECODER_OUTPUT_VIEW_DESC = 24;

export function allocD3D11_VIDEO_DECODER_OUTPUT_VIEW_DESC(data?: Partial<D3D11_VIDEO_DECODER_OUTPUT_VIEW_DESC>): Uint8Array {
  const buf = new Uint8Array(sizeofD3D11_VIDEO_DECODER_OUTPUT_VIEW_DESC);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.DecodeProfile !== undefined) view.setBigUint64(0, data.DecodeProfile === null ? 0n : util.toBigInt(util.toPointer(data.DecodeProfile)), true);
  // 0x08: i32
  if (data?.ViewDimension !== undefined) view.setInt32(8, Number(data.ViewDimension), true);
  // 0x0c: pad4
  // 0x10: pointer
  if (data?.Anonymous !== undefined) view.setBigUint64(16, data.Anonymous === null ? 0n : util.toBigInt(util.toPointer(data.Anonymous)), true);
  return buf;
}

export class D3D11_VIDEO_DECODER_OUTPUT_VIEW_DESCView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get DecodeProfile(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(0, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x08: i32
  get ViewDimension(): number {
    return this.view.getInt32(8, true);
  }

  // 0x0c: pad4

  // 0x10: pointer
  get Anonymous(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(16, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: pointer
  set DecodeProfile(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(0, util.toBigInt(util.toPointer(value)), true);
  }

  // 0x08: i32
  set ViewDimension(value: number) {
    this.view.setInt32(8, value, true);
  }

  // 0x0c: pad4

  // 0x10: pointer
  set Anonymous(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(16, util.toBigInt(util.toPointer(value)), true);
  }
}

/**
 * Windows.Win32.Graphics.Direct3D11.D3D11_TEX2D_VPIV (size: 8)
 */
export interface D3D11_TEX2D_VPIV {
  /** u32 */
  MipSlice: number;
  /** u32 */
  ArraySlice: number;
}

export const sizeofD3D11_TEX2D_VPIV = 8;

export function allocD3D11_TEX2D_VPIV(data?: Partial<D3D11_TEX2D_VPIV>): Uint8Array {
  const buf = new Uint8Array(sizeofD3D11_TEX2D_VPIV);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.MipSlice !== undefined) view.setUint32(0, Number(data.MipSlice), true);
  // 0x04: u32
  if (data?.ArraySlice !== undefined) view.setUint32(4, Number(data.ArraySlice), true);
  return buf;
}

export class D3D11_TEX2D_VPIVView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get MipSlice(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: u32
  get ArraySlice(): number {
    return this.view.getUint32(4, true);
  }

  // 0x00: u32
  set MipSlice(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: u32
  set ArraySlice(value: number) {
    this.view.setUint32(4, value, true);
  }
}

/**
 * Windows.Win32.Graphics.Direct3D11.D3D11_VIDEO_PROCESSOR_INPUT_VIEW_DESC (size: 16)
 */
export interface D3D11_VIDEO_PROCESSOR_INPUT_VIEW_DESC {
  /** u32 */
  FourCC: number;
  /** Windows.Win32.Graphics.Direct3D11.D3D11_VPIV_DIMENSION */
  ViewDimension: D3D11_VPIV_DIMENSION;
  /** _Anonymous_e__Union */
  Anonymous: Uint8Array | Deno.PointerValue | null;
}

export const sizeofD3D11_VIDEO_PROCESSOR_INPUT_VIEW_DESC = 16;

export function allocD3D11_VIDEO_PROCESSOR_INPUT_VIEW_DESC(data?: Partial<D3D11_VIDEO_PROCESSOR_INPUT_VIEW_DESC>): Uint8Array {
  const buf = new Uint8Array(sizeofD3D11_VIDEO_PROCESSOR_INPUT_VIEW_DESC);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.FourCC !== undefined) view.setUint32(0, Number(data.FourCC), true);
  // 0x04: i32
  if (data?.ViewDimension !== undefined) view.setInt32(4, Number(data.ViewDimension), true);
  // 0x08: pointer
  if (data?.Anonymous !== undefined) view.setBigUint64(8, data.Anonymous === null ? 0n : util.toBigInt(util.toPointer(data.Anonymous)), true);
  return buf;
}

export class D3D11_VIDEO_PROCESSOR_INPUT_VIEW_DESCView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get FourCC(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: i32
  get ViewDimension(): number {
    return this.view.getInt32(4, true);
  }

  // 0x08: pointer
  get Anonymous(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(8, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: u32
  set FourCC(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: i32
  set ViewDimension(value: number) {
    this.view.setInt32(4, value, true);
  }

  // 0x08: pointer
  set Anonymous(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(8, util.toBigInt(util.toPointer(value)), true);
  }
}

/**
 * Windows.Win32.Graphics.Direct3D11.D3D11_TEX2D_VPOV (size: 8)
 */
export interface D3D11_TEX2D_VPOV {
  /** u32 */
  MipSlice: number;
}

export const sizeofD3D11_TEX2D_VPOV = 8;

export function allocD3D11_TEX2D_VPOV(data?: Partial<D3D11_TEX2D_VPOV>): Uint8Array {
  const buf = new Uint8Array(sizeofD3D11_TEX2D_VPOV);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.MipSlice !== undefined) view.setUint32(0, Number(data.MipSlice), true);
  // 0x04: pad4
  return buf;
}

export class D3D11_TEX2D_VPOVView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get MipSlice(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: pad4

  // 0x00: u32
  set MipSlice(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: pad4
}

/**
 * Windows.Win32.Graphics.Direct3D11.D3D11_TEX2D_ARRAY_VPOV (size: 16)
 */
export interface D3D11_TEX2D_ARRAY_VPOV {
  /** u32 */
  MipSlice: number;
  /** u32 */
  FirstArraySlice: number;
  /** u32 */
  ArraySize: number;
}

export const sizeofD3D11_TEX2D_ARRAY_VPOV = 16;

export function allocD3D11_TEX2D_ARRAY_VPOV(data?: Partial<D3D11_TEX2D_ARRAY_VPOV>): Uint8Array {
  const buf = new Uint8Array(sizeofD3D11_TEX2D_ARRAY_VPOV);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.MipSlice !== undefined) view.setUint32(0, Number(data.MipSlice), true);
  // 0x04: u32
  if (data?.FirstArraySlice !== undefined) view.setUint32(4, Number(data.FirstArraySlice), true);
  // 0x08: u32
  if (data?.ArraySize !== undefined) view.setUint32(8, Number(data.ArraySize), true);
  // 0x0c: pad4
  return buf;
}

export class D3D11_TEX2D_ARRAY_VPOVView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get MipSlice(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: u32
  get FirstArraySlice(): number {
    return this.view.getUint32(4, true);
  }

  // 0x08: u32
  get ArraySize(): number {
    return this.view.getUint32(8, true);
  }

  // 0x0c: pad4

  // 0x00: u32
  set MipSlice(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: u32
  set FirstArraySlice(value: number) {
    this.view.setUint32(4, value, true);
  }

  // 0x08: u32
  set ArraySize(value: number) {
    this.view.setUint32(8, value, true);
  }

  // 0x0c: pad4
}

/**
 * Windows.Win32.Graphics.Direct3D11.D3D11_VIDEO_PROCESSOR_OUTPUT_VIEW_DESC (size: 16)
 */
export interface D3D11_VIDEO_PROCESSOR_OUTPUT_VIEW_DESC {
  /** Windows.Win32.Graphics.Direct3D11.D3D11_VPOV_DIMENSION */
  ViewDimension: D3D11_VPOV_DIMENSION;
  /** _Anonymous_e__Union */
  Anonymous: Uint8Array | Deno.PointerValue | null;
}

export const sizeofD3D11_VIDEO_PROCESSOR_OUTPUT_VIEW_DESC = 16;

export function allocD3D11_VIDEO_PROCESSOR_OUTPUT_VIEW_DESC(data?: Partial<D3D11_VIDEO_PROCESSOR_OUTPUT_VIEW_DESC>): Uint8Array {
  const buf = new Uint8Array(sizeofD3D11_VIDEO_PROCESSOR_OUTPUT_VIEW_DESC);
  const view = new DataView(buf.buffer);
  // 0x00: i32
  if (data?.ViewDimension !== undefined) view.setInt32(0, Number(data.ViewDimension), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.Anonymous !== undefined) view.setBigUint64(8, data.Anonymous === null ? 0n : util.toBigInt(util.toPointer(data.Anonymous)), true);
  return buf;
}

export class D3D11_VIDEO_PROCESSOR_OUTPUT_VIEW_DESCView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: i32
  get ViewDimension(): number {
    return this.view.getInt32(0, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  get Anonymous(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(8, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: i32
  set ViewDimension(value: number) {
    this.view.setInt32(0, value, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  set Anonymous(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(8, util.toBigInt(util.toPointer(value)), true);
  }
}

/**
 * Windows.Win32.Graphics.Direct3D11.D3D11_MESSAGE (size: 32)
 */
export interface D3D11_MESSAGE {
  /** Windows.Win32.Graphics.Direct3D11.D3D11_MESSAGE_CATEGORY */
  Category: D3D11_MESSAGE_CATEGORY;
  /** Windows.Win32.Graphics.Direct3D11.D3D11_MESSAGE_SEVERITY */
  Severity: D3D11_MESSAGE_SEVERITY;
  /** Windows.Win32.Graphics.Direct3D11.D3D11_MESSAGE_ID */
  ID: D3D11_MESSAGE_ID;
  /** ptr */
  pDescription: Deno.PointerValue | Uint8Array | null;
  /** usize */
  DescriptionByteLength: number | bigint;
}

export const sizeofD3D11_MESSAGE = 32;

export function allocD3D11_MESSAGE(data?: Partial<D3D11_MESSAGE>): Uint8Array {
  const buf = new Uint8Array(sizeofD3D11_MESSAGE);
  const view = new DataView(buf.buffer);
  // 0x00: i32
  if (data?.Category !== undefined) view.setInt32(0, Number(data.Category), true);
  // 0x04: i32
  if (data?.Severity !== undefined) view.setInt32(4, Number(data.Severity), true);
  // 0x08: i32
  if (data?.ID !== undefined) view.setInt32(8, Number(data.ID), true);
  // 0x0c: pad4
  // 0x10: pointer
  if (data?.pDescription !== undefined) view.setBigUint64(16, data.pDescription === null ? 0n : util.toBigInt(util.toPointer(data.pDescription)), true);
  // 0x18: usize
  if (data?.DescriptionByteLength !== undefined) view.setBigUint64(24, util.toBigInt(data.DescriptionByteLength), true);
  return buf;
}

export class D3D11_MESSAGEView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: i32
  get Category(): number {
    return this.view.getInt32(0, true);
  }

  // 0x04: i32
  get Severity(): number {
    return this.view.getInt32(4, true);
  }

  // 0x08: i32
  get ID(): number {
    return this.view.getInt32(8, true);
  }

  // 0x0c: pad4

  // 0x10: pointer
  get pDescription(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(16, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x18: usize
  get DescriptionByteLength(): number | bigint {
    return this.view.getBigUint64(24, true);
  }

  // 0x00: i32
  set Category(value: number) {
    this.view.setInt32(0, value, true);
  }

  // 0x04: i32
  set Severity(value: number) {
    this.view.setInt32(4, value, true);
  }

  // 0x08: i32
  set ID(value: number) {
    this.view.setInt32(8, value, true);
  }

  // 0x0c: pad4

  // 0x10: pointer
  set pDescription(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(16, util.toBigInt(util.toPointer(value)), true);
  }

  // 0x18: usize
  set DescriptionByteLength(value: number | bigint) {
    this.view.setBigUint64(24, util.toBigInt(value), true);
  }
}

/**
 * Windows.Win32.Graphics.Direct3D11.D3D11_INFO_QUEUE_FILTER_DESC (size: 48)
 */
export interface D3D11_INFO_QUEUE_FILTER_DESC {
  /** u32 */
  NumCategories: number;
  /** ptr */
  pCategoryList: Deno.PointerValue | Uint8Array | null;
  /** u32 */
  NumSeverities: number;
  /** ptr */
  pSeverityList: Deno.PointerValue | Uint8Array | null;
  /** u32 */
  NumIDs: number;
  /** ptr */
  pIDList: Deno.PointerValue | Uint8Array | null;
}

export const sizeofD3D11_INFO_QUEUE_FILTER_DESC = 48;

export function allocD3D11_INFO_QUEUE_FILTER_DESC(data?: Partial<D3D11_INFO_QUEUE_FILTER_DESC>): Uint8Array {
  const buf = new Uint8Array(sizeofD3D11_INFO_QUEUE_FILTER_DESC);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.NumCategories !== undefined) view.setUint32(0, Number(data.NumCategories), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.pCategoryList !== undefined) view.setBigUint64(8, data.pCategoryList === null ? 0n : util.toBigInt(util.toPointer(data.pCategoryList)), true);
  // 0x10: u32
  if (data?.NumSeverities !== undefined) view.setUint32(16, Number(data.NumSeverities), true);
  // 0x14: pad4
  // 0x18: pointer
  if (data?.pSeverityList !== undefined) view.setBigUint64(24, data.pSeverityList === null ? 0n : util.toBigInt(util.toPointer(data.pSeverityList)), true);
  // 0x20: u32
  if (data?.NumIDs !== undefined) view.setUint32(32, Number(data.NumIDs), true);
  // 0x24: pad4
  // 0x28: pointer
  if (data?.pIDList !== undefined) view.setBigUint64(40, data.pIDList === null ? 0n : util.toBigInt(util.toPointer(data.pIDList)), true);
  return buf;
}

export class D3D11_INFO_QUEUE_FILTER_DESCView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get NumCategories(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  get pCategoryList(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(8, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x10: u32
  get NumSeverities(): number {
    return this.view.getUint32(16, true);
  }

  // 0x14: pad4

  // 0x18: pointer
  get pSeverityList(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(24, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x20: u32
  get NumIDs(): number {
    return this.view.getUint32(32, true);
  }

  // 0x24: pad4

  // 0x28: pointer
  get pIDList(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(40, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: u32
  set NumCategories(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  set pCategoryList(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(8, util.toBigInt(util.toPointer(value)), true);
  }

  // 0x10: u32
  set NumSeverities(value: number) {
    this.view.setUint32(16, value, true);
  }

  // 0x14: pad4

  // 0x18: pointer
  set pSeverityList(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(24, util.toBigInt(util.toPointer(value)), true);
  }

  // 0x20: u32
  set NumIDs(value: number) {
    this.view.setUint32(32, value, true);
  }

  // 0x24: pad4

  // 0x28: pointer
  set pIDList(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(40, util.toBigInt(util.toPointer(value)), true);
  }
}

/**
 * Windows.Win32.Graphics.Direct3D11.D3D11_INFO_QUEUE_FILTER (size: 16)
 */
export interface D3D11_INFO_QUEUE_FILTER {
  /** Windows.Win32.Graphics.Direct3D11.D3D11_INFO_QUEUE_FILTER_DESC */
  AllowList: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Graphics.Direct3D11.D3D11_INFO_QUEUE_FILTER_DESC */
  DenyList: Uint8Array | Deno.PointerValue | null;
}

export const sizeofD3D11_INFO_QUEUE_FILTER = 16;

export function allocD3D11_INFO_QUEUE_FILTER(data?: Partial<D3D11_INFO_QUEUE_FILTER>): Uint8Array {
  const buf = new Uint8Array(sizeofD3D11_INFO_QUEUE_FILTER);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.AllowList !== undefined) view.setBigUint64(0, data.AllowList === null ? 0n : util.toBigInt(util.toPointer(data.AllowList)), true);
  // 0x08: pointer
  if (data?.DenyList !== undefined) view.setBigUint64(8, data.DenyList === null ? 0n : util.toBigInt(util.toPointer(data.DenyList)), true);
  return buf;
}

export class D3D11_INFO_QUEUE_FILTERView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get AllowList(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(0, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x08: pointer
  get DenyList(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(8, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: pointer
  set AllowList(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(0, util.toBigInt(util.toPointer(value)), true);
  }

  // 0x08: pointer
  set DenyList(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(8, util.toBigInt(util.toPointer(value)), true);
  }
}

/**
 * Windows.Win32.Graphics.Direct3D11.D3D11_RENDER_TARGET_BLEND_DESC1 (size: 40)
 */
export interface D3D11_RENDER_TARGET_BLEND_DESC1 {
  /** Windows.Win32.Foundation.BOOL */
  BlendEnable: boolean;
  /** Windows.Win32.Foundation.BOOL */
  LogicOpEnable: boolean;
  /** Windows.Win32.Graphics.Direct3D11.D3D11_BLEND */
  SrcBlend: D3D11_BLEND;
  /** Windows.Win32.Graphics.Direct3D11.D3D11_BLEND */
  DestBlend: D3D11_BLEND;
  /** Windows.Win32.Graphics.Direct3D11.D3D11_BLEND_OP */
  BlendOp: D3D11_BLEND_OP;
  /** Windows.Win32.Graphics.Direct3D11.D3D11_BLEND */
  SrcBlendAlpha: D3D11_BLEND;
  /** Windows.Win32.Graphics.Direct3D11.D3D11_BLEND */
  DestBlendAlpha: D3D11_BLEND;
  /** Windows.Win32.Graphics.Direct3D11.D3D11_BLEND_OP */
  BlendOpAlpha: D3D11_BLEND_OP;
  /** Windows.Win32.Graphics.Direct3D11.D3D11_LOGIC_OP */
  LogicOp: D3D11_LOGIC_OP;
  /** u8 */
  RenderTargetWriteMask: number;
}

export const sizeofD3D11_RENDER_TARGET_BLEND_DESC1 = 40;

export function allocD3D11_RENDER_TARGET_BLEND_DESC1(data?: Partial<D3D11_RENDER_TARGET_BLEND_DESC1>): Uint8Array {
  const buf = new Uint8Array(sizeofD3D11_RENDER_TARGET_BLEND_DESC1);
  const view = new DataView(buf.buffer);
  // 0x00: i32
  if (data?.BlendEnable !== undefined) view.setInt32(0, Number(data.BlendEnable), true);
  // 0x04: i32
  if (data?.LogicOpEnable !== undefined) view.setInt32(4, Number(data.LogicOpEnable), true);
  // 0x08: i32
  if (data?.SrcBlend !== undefined) view.setInt32(8, Number(data.SrcBlend), true);
  // 0x0c: i32
  if (data?.DestBlend !== undefined) view.setInt32(12, Number(data.DestBlend), true);
  // 0x10: i32
  if (data?.BlendOp !== undefined) view.setInt32(16, Number(data.BlendOp), true);
  // 0x14: i32
  if (data?.SrcBlendAlpha !== undefined) view.setInt32(20, Number(data.SrcBlendAlpha), true);
  // 0x18: i32
  if (data?.DestBlendAlpha !== undefined) view.setInt32(24, Number(data.DestBlendAlpha), true);
  // 0x1c: i32
  if (data?.BlendOpAlpha !== undefined) view.setInt32(28, Number(data.BlendOpAlpha), true);
  // 0x20: i32
  if (data?.LogicOp !== undefined) view.setInt32(32, Number(data.LogicOp), true);
  // 0x24: u8
  if (data?.RenderTargetWriteMask !== undefined) view.setUint8(36, Number(data.RenderTargetWriteMask));
  // 0x25: pad3
  return buf;
}

export class D3D11_RENDER_TARGET_BLEND_DESC1View {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: i32
  get BlendEnable(): number {
    return this.view.getInt32(0, true);
  }

  // 0x04: i32
  get LogicOpEnable(): number {
    return this.view.getInt32(4, true);
  }

  // 0x08: i32
  get SrcBlend(): number {
    return this.view.getInt32(8, true);
  }

  // 0x0c: i32
  get DestBlend(): number {
    return this.view.getInt32(12, true);
  }

  // 0x10: i32
  get BlendOp(): number {
    return this.view.getInt32(16, true);
  }

  // 0x14: i32
  get SrcBlendAlpha(): number {
    return this.view.getInt32(20, true);
  }

  // 0x18: i32
  get DestBlendAlpha(): number {
    return this.view.getInt32(24, true);
  }

  // 0x1c: i32
  get BlendOpAlpha(): number {
    return this.view.getInt32(28, true);
  }

  // 0x20: i32
  get LogicOp(): number {
    return this.view.getInt32(32, true);
  }

  // 0x24: u8
  get RenderTargetWriteMask(): number {
    return this.view.getUint8(36);
  }

  // 0x25: pad3

  // 0x00: i32
  set BlendEnable(value: number) {
    this.view.setInt32(0, value, true);
  }

  // 0x04: i32
  set LogicOpEnable(value: number) {
    this.view.setInt32(4, value, true);
  }

  // 0x08: i32
  set SrcBlend(value: number) {
    this.view.setInt32(8, value, true);
  }

  // 0x0c: i32
  set DestBlend(value: number) {
    this.view.setInt32(12, value, true);
  }

  // 0x10: i32
  set BlendOp(value: number) {
    this.view.setInt32(16, value, true);
  }

  // 0x14: i32
  set SrcBlendAlpha(value: number) {
    this.view.setInt32(20, value, true);
  }

  // 0x18: i32
  set DestBlendAlpha(value: number) {
    this.view.setInt32(24, value, true);
  }

  // 0x1c: i32
  set BlendOpAlpha(value: number) {
    this.view.setInt32(28, value, true);
  }

  // 0x20: i32
  set LogicOp(value: number) {
    this.view.setInt32(32, value, true);
  }

  // 0x24: u8
  set RenderTargetWriteMask(value: number) {
    this.view.setUint8(36, value);
  }

  // 0x25: pad3
}

/**
 * Windows.Win32.Graphics.Direct3D11.D3D11_BLEND_DESC1 (size: 16)
 */
export interface D3D11_BLEND_DESC1 {
  /** Windows.Win32.Foundation.BOOL */
  AlphaToCoverageEnable: boolean;
  /** Windows.Win32.Foundation.BOOL */
  IndependentBlendEnable: boolean;
  /** array */
  RenderTarget: Deno.PointerValue | null;
}

export const sizeofD3D11_BLEND_DESC1 = 16;

export function allocD3D11_BLEND_DESC1(data?: Partial<D3D11_BLEND_DESC1>): Uint8Array {
  const buf = new Uint8Array(sizeofD3D11_BLEND_DESC1);
  const view = new DataView(buf.buffer);
  // 0x00: i32
  if (data?.AlphaToCoverageEnable !== undefined) view.setInt32(0, Number(data.AlphaToCoverageEnable), true);
  // 0x04: i32
  if (data?.IndependentBlendEnable !== undefined) view.setInt32(4, Number(data.IndependentBlendEnable), true);
  // 0x08: pointer
  if (data?.RenderTarget !== undefined) view.setBigUint64(8, data.RenderTarget === null ? 0n : util.toBigInt(util.toPointer(data.RenderTarget)), true);
  return buf;
}

export class D3D11_BLEND_DESC1View {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: i32
  get AlphaToCoverageEnable(): number {
    return this.view.getInt32(0, true);
  }

  // 0x04: i32
  get IndependentBlendEnable(): number {
    return this.view.getInt32(4, true);
  }

  // 0x08: pointer
  get RenderTarget(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(8, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: i32
  set AlphaToCoverageEnable(value: number) {
    this.view.setInt32(0, value, true);
  }

  // 0x04: i32
  set IndependentBlendEnable(value: number) {
    this.view.setInt32(4, value, true);
  }

  // 0x08: pointer
  set RenderTarget(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(8, util.toBigInt(util.toPointer(value)), true);
  }
}

/**
 * Windows.Win32.Graphics.Direct3D11.D3D11_RASTERIZER_DESC1 (size: 48)
 */
export interface D3D11_RASTERIZER_DESC1 {
  /** Windows.Win32.Graphics.Direct3D11.D3D11_FILL_MODE */
  FillMode: D3D11_FILL_MODE;
  /** Windows.Win32.Graphics.Direct3D11.D3D11_CULL_MODE */
  CullMode: D3D11_CULL_MODE;
  /** Windows.Win32.Foundation.BOOL */
  FrontCounterClockwise: boolean;
  /** i32 */
  DepthBias: number;
  /** f32 */
  DepthBiasClamp: number;
  /** f32 */
  SlopeScaledDepthBias: number;
  /** Windows.Win32.Foundation.BOOL */
  DepthClipEnable: boolean;
  /** Windows.Win32.Foundation.BOOL */
  ScissorEnable: boolean;
  /** Windows.Win32.Foundation.BOOL */
  MultisampleEnable: boolean;
  /** Windows.Win32.Foundation.BOOL */
  AntialiasedLineEnable: boolean;
  /** u32 */
  ForcedSampleCount: number;
}

export const sizeofD3D11_RASTERIZER_DESC1 = 48;

export function allocD3D11_RASTERIZER_DESC1(data?: Partial<D3D11_RASTERIZER_DESC1>): Uint8Array {
  const buf = new Uint8Array(sizeofD3D11_RASTERIZER_DESC1);
  const view = new DataView(buf.buffer);
  // 0x00: i32
  if (data?.FillMode !== undefined) view.setInt32(0, Number(data.FillMode), true);
  // 0x04: i32
  if (data?.CullMode !== undefined) view.setInt32(4, Number(data.CullMode), true);
  // 0x08: i32
  if (data?.FrontCounterClockwise !== undefined) view.setInt32(8, Number(data.FrontCounterClockwise), true);
  // 0x0c: i32
  if (data?.DepthBias !== undefined) view.setInt32(12, Number(data.DepthBias), true);
  // 0x10: f32
  if (data?.DepthBiasClamp !== undefined) view.setFloat32(16, Number(data.DepthBiasClamp), true);
  // 0x14: f32
  if (data?.SlopeScaledDepthBias !== undefined) view.setFloat32(20, Number(data.SlopeScaledDepthBias), true);
  // 0x18: i32
  if (data?.DepthClipEnable !== undefined) view.setInt32(24, Number(data.DepthClipEnable), true);
  // 0x1c: i32
  if (data?.ScissorEnable !== undefined) view.setInt32(28, Number(data.ScissorEnable), true);
  // 0x20: i32
  if (data?.MultisampleEnable !== undefined) view.setInt32(32, Number(data.MultisampleEnable), true);
  // 0x24: i32
  if (data?.AntialiasedLineEnable !== undefined) view.setInt32(36, Number(data.AntialiasedLineEnable), true);
  // 0x28: u32
  if (data?.ForcedSampleCount !== undefined) view.setUint32(40, Number(data.ForcedSampleCount), true);
  // 0x2c: pad4
  return buf;
}

export class D3D11_RASTERIZER_DESC1View {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: i32
  get FillMode(): number {
    return this.view.getInt32(0, true);
  }

  // 0x04: i32
  get CullMode(): number {
    return this.view.getInt32(4, true);
  }

  // 0x08: i32
  get FrontCounterClockwise(): number {
    return this.view.getInt32(8, true);
  }

  // 0x0c: i32
  get DepthBias(): number {
    return this.view.getInt32(12, true);
  }

  // 0x10: f32
  get DepthBiasClamp(): number {
    return this.view.getFloat32(16, true);
  }

  // 0x14: f32
  get SlopeScaledDepthBias(): number {
    return this.view.getFloat32(20, true);
  }

  // 0x18: i32
  get DepthClipEnable(): number {
    return this.view.getInt32(24, true);
  }

  // 0x1c: i32
  get ScissorEnable(): number {
    return this.view.getInt32(28, true);
  }

  // 0x20: i32
  get MultisampleEnable(): number {
    return this.view.getInt32(32, true);
  }

  // 0x24: i32
  get AntialiasedLineEnable(): number {
    return this.view.getInt32(36, true);
  }

  // 0x28: u32
  get ForcedSampleCount(): number {
    return this.view.getUint32(40, true);
  }

  // 0x2c: pad4

  // 0x00: i32
  set FillMode(value: number) {
    this.view.setInt32(0, value, true);
  }

  // 0x04: i32
  set CullMode(value: number) {
    this.view.setInt32(4, value, true);
  }

  // 0x08: i32
  set FrontCounterClockwise(value: number) {
    this.view.setInt32(8, value, true);
  }

  // 0x0c: i32
  set DepthBias(value: number) {
    this.view.setInt32(12, value, true);
  }

  // 0x10: f32
  set DepthBiasClamp(value: number) {
    this.view.setFloat32(16, value, true);
  }

  // 0x14: f32
  set SlopeScaledDepthBias(value: number) {
    this.view.setFloat32(20, value, true);
  }

  // 0x18: i32
  set DepthClipEnable(value: number) {
    this.view.setInt32(24, value, true);
  }

  // 0x1c: i32
  set ScissorEnable(value: number) {
    this.view.setInt32(28, value, true);
  }

  // 0x20: i32
  set MultisampleEnable(value: number) {
    this.view.setInt32(32, value, true);
  }

  // 0x24: i32
  set AntialiasedLineEnable(value: number) {
    this.view.setInt32(36, value, true);
  }

  // 0x28: u32
  set ForcedSampleCount(value: number) {
    this.view.setUint32(40, value, true);
  }

  // 0x2c: pad4
}

/**
 * Windows.Win32.Graphics.Direct3D11.D3D11_VIDEO_DECODER_SUB_SAMPLE_MAPPING_BLOCK (size: 8)
 */
export interface D3D11_VIDEO_DECODER_SUB_SAMPLE_MAPPING_BLOCK {
  /** u32 */
  ClearSize: number;
  /** u32 */
  EncryptedSize: number;
}

export const sizeofD3D11_VIDEO_DECODER_SUB_SAMPLE_MAPPING_BLOCK = 8;

export function allocD3D11_VIDEO_DECODER_SUB_SAMPLE_MAPPING_BLOCK(data?: Partial<D3D11_VIDEO_DECODER_SUB_SAMPLE_MAPPING_BLOCK>): Uint8Array {
  const buf = new Uint8Array(sizeofD3D11_VIDEO_DECODER_SUB_SAMPLE_MAPPING_BLOCK);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.ClearSize !== undefined) view.setUint32(0, Number(data.ClearSize), true);
  // 0x04: u32
  if (data?.EncryptedSize !== undefined) view.setUint32(4, Number(data.EncryptedSize), true);
  return buf;
}

export class D3D11_VIDEO_DECODER_SUB_SAMPLE_MAPPING_BLOCKView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get ClearSize(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: u32
  get EncryptedSize(): number {
    return this.view.getUint32(4, true);
  }

  // 0x00: u32
  set ClearSize(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: u32
  set EncryptedSize(value: number) {
    this.view.setUint32(4, value, true);
  }
}

/**
 * Windows.Win32.Graphics.Direct3D11.D3D11_VIDEO_DECODER_BUFFER_DESC1 (size: 48)
 */
export interface D3D11_VIDEO_DECODER_BUFFER_DESC1 {
  /** Windows.Win32.Graphics.Direct3D11.D3D11_VIDEO_DECODER_BUFFER_TYPE */
  BufferType: D3D11_VIDEO_DECODER_BUFFER_TYPE;
  /** u32 */
  DataOffset: number;
  /** u32 */
  DataSize: number;
  /** ptr */
  pIV: Deno.PointerValue | Uint8Array | null;
  /** u32 */
  IVSize: number;
  /** ptr */
  pSubSampleMappingBlock: Deno.PointerValue | Uint8Array | null;
  /** u32 */
  SubSampleMappingCount: number;
}

export const sizeofD3D11_VIDEO_DECODER_BUFFER_DESC1 = 48;

export function allocD3D11_VIDEO_DECODER_BUFFER_DESC1(data?: Partial<D3D11_VIDEO_DECODER_BUFFER_DESC1>): Uint8Array {
  const buf = new Uint8Array(sizeofD3D11_VIDEO_DECODER_BUFFER_DESC1);
  const view = new DataView(buf.buffer);
  // 0x00: i32
  if (data?.BufferType !== undefined) view.setInt32(0, Number(data.BufferType), true);
  // 0x04: u32
  if (data?.DataOffset !== undefined) view.setUint32(4, Number(data.DataOffset), true);
  // 0x08: u32
  if (data?.DataSize !== undefined) view.setUint32(8, Number(data.DataSize), true);
  // 0x0c: pad4
  // 0x10: pointer
  if (data?.pIV !== undefined) view.setBigUint64(16, data.pIV === null ? 0n : util.toBigInt(util.toPointer(data.pIV)), true);
  // 0x18: u32
  if (data?.IVSize !== undefined) view.setUint32(24, Number(data.IVSize), true);
  // 0x1c: pad4
  // 0x20: pointer
  if (data?.pSubSampleMappingBlock !== undefined) view.setBigUint64(32, data.pSubSampleMappingBlock === null ? 0n : util.toBigInt(util.toPointer(data.pSubSampleMappingBlock)), true);
  // 0x28: u32
  if (data?.SubSampleMappingCount !== undefined) view.setUint32(40, Number(data.SubSampleMappingCount), true);
  // 0x2c: pad4
  return buf;
}

export class D3D11_VIDEO_DECODER_BUFFER_DESC1View {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: i32
  get BufferType(): number {
    return this.view.getInt32(0, true);
  }

  // 0x04: u32
  get DataOffset(): number {
    return this.view.getUint32(4, true);
  }

  // 0x08: u32
  get DataSize(): number {
    return this.view.getUint32(8, true);
  }

  // 0x0c: pad4

  // 0x10: pointer
  get pIV(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(16, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x18: u32
  get IVSize(): number {
    return this.view.getUint32(24, true);
  }

  // 0x1c: pad4

  // 0x20: pointer
  get pSubSampleMappingBlock(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(32, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x28: u32
  get SubSampleMappingCount(): number {
    return this.view.getUint32(40, true);
  }

  // 0x2c: pad4

  // 0x00: i32
  set BufferType(value: number) {
    this.view.setInt32(0, value, true);
  }

  // 0x04: u32
  set DataOffset(value: number) {
    this.view.setUint32(4, value, true);
  }

  // 0x08: u32
  set DataSize(value: number) {
    this.view.setUint32(8, value, true);
  }

  // 0x0c: pad4

  // 0x10: pointer
  set pIV(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(16, util.toBigInt(util.toPointer(value)), true);
  }

  // 0x18: u32
  set IVSize(value: number) {
    this.view.setUint32(24, value, true);
  }

  // 0x1c: pad4

  // 0x20: pointer
  set pSubSampleMappingBlock(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(32, util.toBigInt(util.toPointer(value)), true);
  }

  // 0x28: u32
  set SubSampleMappingCount(value: number) {
    this.view.setUint32(40, value, true);
  }

  // 0x2c: pad4
}

/**
 * Windows.Win32.Graphics.Direct3D11.D3D11_VIDEO_DECODER_BEGIN_FRAME_CRYPTO_SESSION (size: 48)
 */
export interface D3D11_VIDEO_DECODER_BEGIN_FRAME_CRYPTO_SESSION {
  /** Windows.Win32.Graphics.Direct3D11.ID3D11CryptoSession */
  pCryptoSession: Uint8Array | Deno.PointerValue | null;
  /** u32 */
  BlobSize: number;
  /** ptr */
  pBlob: Deno.PointerValue | Uint8Array | null;
  /** ptr */
  pKeyInfoId: Deno.PointerValue | Uint8Array | null;
  /** u32 */
  PrivateDataSize: number;
  /** ptr */
  pPrivateData: Deno.PointerValue | Uint8Array | null;
}

export const sizeofD3D11_VIDEO_DECODER_BEGIN_FRAME_CRYPTO_SESSION = 48;

export function allocD3D11_VIDEO_DECODER_BEGIN_FRAME_CRYPTO_SESSION(data?: Partial<D3D11_VIDEO_DECODER_BEGIN_FRAME_CRYPTO_SESSION>): Uint8Array {
  const buf = new Uint8Array(sizeofD3D11_VIDEO_DECODER_BEGIN_FRAME_CRYPTO_SESSION);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.pCryptoSession !== undefined) view.setBigUint64(0, data.pCryptoSession === null ? 0n : util.toBigInt(util.toPointer(data.pCryptoSession)), true);
  // 0x08: u32
  if (data?.BlobSize !== undefined) view.setUint32(8, Number(data.BlobSize), true);
  // 0x0c: pad4
  // 0x10: pointer
  if (data?.pBlob !== undefined) view.setBigUint64(16, data.pBlob === null ? 0n : util.toBigInt(util.toPointer(data.pBlob)), true);
  // 0x18: pointer
  if (data?.pKeyInfoId !== undefined) view.setBigUint64(24, data.pKeyInfoId === null ? 0n : util.toBigInt(util.toPointer(data.pKeyInfoId)), true);
  // 0x20: u32
  if (data?.PrivateDataSize !== undefined) view.setUint32(32, Number(data.PrivateDataSize), true);
  // 0x24: pad4
  // 0x28: pointer
  if (data?.pPrivateData !== undefined) view.setBigUint64(40, data.pPrivateData === null ? 0n : util.toBigInt(util.toPointer(data.pPrivateData)), true);
  return buf;
}

export class D3D11_VIDEO_DECODER_BEGIN_FRAME_CRYPTO_SESSIONView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get pCryptoSession(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(0, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x08: u32
  get BlobSize(): number {
    return this.view.getUint32(8, true);
  }

  // 0x0c: pad4

  // 0x10: pointer
  get pBlob(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(16, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x18: pointer
  get pKeyInfoId(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(24, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x20: u32
  get PrivateDataSize(): number {
    return this.view.getUint32(32, true);
  }

  // 0x24: pad4

  // 0x28: pointer
  get pPrivateData(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(40, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: pointer
  set pCryptoSession(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(0, util.toBigInt(util.toPointer(value)), true);
  }

  // 0x08: u32
  set BlobSize(value: number) {
    this.view.setUint32(8, value, true);
  }

  // 0x0c: pad4

  // 0x10: pointer
  set pBlob(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(16, util.toBigInt(util.toPointer(value)), true);
  }

  // 0x18: pointer
  set pKeyInfoId(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(24, util.toBigInt(util.toPointer(value)), true);
  }

  // 0x20: u32
  set PrivateDataSize(value: number) {
    this.view.setUint32(32, value, true);
  }

  // 0x24: pad4

  // 0x28: pointer
  set pPrivateData(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(40, util.toBigInt(util.toPointer(value)), true);
  }
}

/**
 * Windows.Win32.Graphics.Direct3D11.D3D11_VIDEO_PROCESSOR_STREAM_BEHAVIOR_HINT (size: 16)
 */
export interface D3D11_VIDEO_PROCESSOR_STREAM_BEHAVIOR_HINT {
  /** Windows.Win32.Foundation.BOOL */
  Enable: boolean;
  /** u32 */
  Width: number;
  /** u32 */
  Height: number;
  /** Windows.Win32.Graphics.Dxgi.Common.DXGI_FORMAT */
  Format: DXGI_FORMAT;
}

export const sizeofD3D11_VIDEO_PROCESSOR_STREAM_BEHAVIOR_HINT = 16;

export function allocD3D11_VIDEO_PROCESSOR_STREAM_BEHAVIOR_HINT(data?: Partial<D3D11_VIDEO_PROCESSOR_STREAM_BEHAVIOR_HINT>): Uint8Array {
  const buf = new Uint8Array(sizeofD3D11_VIDEO_PROCESSOR_STREAM_BEHAVIOR_HINT);
  const view = new DataView(buf.buffer);
  // 0x00: i32
  if (data?.Enable !== undefined) view.setInt32(0, Number(data.Enable), true);
  // 0x04: u32
  if (data?.Width !== undefined) view.setUint32(4, Number(data.Width), true);
  // 0x08: u32
  if (data?.Height !== undefined) view.setUint32(8, Number(data.Height), true);
  // 0x0c: u32
  if (data?.Format !== undefined) view.setUint32(12, Number(data.Format), true);
  return buf;
}

export class D3D11_VIDEO_PROCESSOR_STREAM_BEHAVIOR_HINTView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: i32
  get Enable(): number {
    return this.view.getInt32(0, true);
  }

  // 0x04: u32
  get Width(): number {
    return this.view.getUint32(4, true);
  }

  // 0x08: u32
  get Height(): number {
    return this.view.getUint32(8, true);
  }

  // 0x0c: u32
  get Format(): number {
    return this.view.getUint32(12, true);
  }

  // 0x00: i32
  set Enable(value: number) {
    this.view.setInt32(0, value, true);
  }

  // 0x04: u32
  set Width(value: number) {
    this.view.setUint32(4, value, true);
  }

  // 0x08: u32
  set Height(value: number) {
    this.view.setUint32(8, value, true);
  }

  // 0x0c: u32
  set Format(value: number) {
    this.view.setUint32(12, value, true);
  }
}

/**
 * Windows.Win32.Graphics.Direct3D11.D3D11_KEY_EXCHANGE_HW_PROTECTION_INPUT_DATA (size: 16)
 */
export interface D3D11_KEY_EXCHANGE_HW_PROTECTION_INPUT_DATA {
  /** u32 */
  PrivateDataSize: number;
  /** u32 */
  HWProtectionDataSize: number;
  /** array */
  pbInput: Deno.PointerValue | null;
}

export const sizeofD3D11_KEY_EXCHANGE_HW_PROTECTION_INPUT_DATA = 16;

export function allocD3D11_KEY_EXCHANGE_HW_PROTECTION_INPUT_DATA(data?: Partial<D3D11_KEY_EXCHANGE_HW_PROTECTION_INPUT_DATA>): Uint8Array {
  const buf = new Uint8Array(sizeofD3D11_KEY_EXCHANGE_HW_PROTECTION_INPUT_DATA);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.PrivateDataSize !== undefined) view.setUint32(0, Number(data.PrivateDataSize), true);
  // 0x04: u32
  if (data?.HWProtectionDataSize !== undefined) view.setUint32(4, Number(data.HWProtectionDataSize), true);
  // 0x08: pointer
  if (data?.pbInput !== undefined) view.setBigUint64(8, data.pbInput === null ? 0n : util.toBigInt(util.toPointer(data.pbInput)), true);
  return buf;
}

export class D3D11_KEY_EXCHANGE_HW_PROTECTION_INPUT_DATAView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get PrivateDataSize(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: u32
  get HWProtectionDataSize(): number {
    return this.view.getUint32(4, true);
  }

  // 0x08: pointer
  get pbInput(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(8, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: u32
  set PrivateDataSize(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: u32
  set HWProtectionDataSize(value: number) {
    this.view.setUint32(4, value, true);
  }

  // 0x08: pointer
  set pbInput(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(8, util.toBigInt(util.toPointer(value)), true);
  }
}

/**
 * Windows.Win32.Graphics.Direct3D11.D3D11_KEY_EXCHANGE_HW_PROTECTION_OUTPUT_DATA (size: 40)
 */
export interface D3D11_KEY_EXCHANGE_HW_PROTECTION_OUTPUT_DATA {
  /** u32 */
  PrivateDataSize: number;
  /** u32 */
  MaxHWProtectionDataSize: number;
  /** u32 */
  HWProtectionDataSize: number;
  /** u64 */
  TransportTime: number | bigint;
  /** u64 */
  ExecutionTime: number | bigint;
  /** array */
  pbOutput: Deno.PointerValue | null;
}

export const sizeofD3D11_KEY_EXCHANGE_HW_PROTECTION_OUTPUT_DATA = 40;

export function allocD3D11_KEY_EXCHANGE_HW_PROTECTION_OUTPUT_DATA(data?: Partial<D3D11_KEY_EXCHANGE_HW_PROTECTION_OUTPUT_DATA>): Uint8Array {
  const buf = new Uint8Array(sizeofD3D11_KEY_EXCHANGE_HW_PROTECTION_OUTPUT_DATA);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.PrivateDataSize !== undefined) view.setUint32(0, Number(data.PrivateDataSize), true);
  // 0x04: u32
  if (data?.MaxHWProtectionDataSize !== undefined) view.setUint32(4, Number(data.MaxHWProtectionDataSize), true);
  // 0x08: u32
  if (data?.HWProtectionDataSize !== undefined) view.setUint32(8, Number(data.HWProtectionDataSize), true);
  // 0x0c: pad4
  // 0x10: u64
  if (data?.TransportTime !== undefined) view.setBigUint64(16, util.toBigInt(data.TransportTime), true);
  // 0x18: u64
  if (data?.ExecutionTime !== undefined) view.setBigUint64(24, util.toBigInt(data.ExecutionTime), true);
  // 0x20: pointer
  if (data?.pbOutput !== undefined) view.setBigUint64(32, data.pbOutput === null ? 0n : util.toBigInt(util.toPointer(data.pbOutput)), true);
  return buf;
}

export class D3D11_KEY_EXCHANGE_HW_PROTECTION_OUTPUT_DATAView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get PrivateDataSize(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: u32
  get MaxHWProtectionDataSize(): number {
    return this.view.getUint32(4, true);
  }

  // 0x08: u32
  get HWProtectionDataSize(): number {
    return this.view.getUint32(8, true);
  }

  // 0x0c: pad4

  // 0x10: u64
  get TransportTime(): number | bigint {
    return this.view.getBigUint64(16, true);
  }

  // 0x18: u64
  get ExecutionTime(): number | bigint {
    return this.view.getBigUint64(24, true);
  }

  // 0x20: pointer
  get pbOutput(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(32, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: u32
  set PrivateDataSize(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: u32
  set MaxHWProtectionDataSize(value: number) {
    this.view.setUint32(4, value, true);
  }

  // 0x08: u32
  set HWProtectionDataSize(value: number) {
    this.view.setUint32(8, value, true);
  }

  // 0x0c: pad4

  // 0x10: u64
  set TransportTime(value: number | bigint) {
    this.view.setBigUint64(16, util.toBigInt(value), true);
  }

  // 0x18: u64
  set ExecutionTime(value: number | bigint) {
    this.view.setBigUint64(24, util.toBigInt(value), true);
  }

  // 0x20: pointer
  set pbOutput(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(32, util.toBigInt(util.toPointer(value)), true);
  }
}

/**
 * Windows.Win32.Graphics.Direct3D11.D3D11_KEY_EXCHANGE_HW_PROTECTION_DATA (size: 32)
 */
export interface D3D11_KEY_EXCHANGE_HW_PROTECTION_DATA {
  /** u32 */
  HWProtectionFunctionID: number;
  /** ptr */
  pInputData: Deno.PointerValue | Uint8Array | null;
  /** ptr */
  pOutputData: Deno.PointerValue | Uint8Array | null;
  /** Windows.Win32.Foundation.HRESULT */
  Status: Uint8Array | Deno.PointerValue | null;
}

export const sizeofD3D11_KEY_EXCHANGE_HW_PROTECTION_DATA = 32;

export function allocD3D11_KEY_EXCHANGE_HW_PROTECTION_DATA(data?: Partial<D3D11_KEY_EXCHANGE_HW_PROTECTION_DATA>): Uint8Array {
  const buf = new Uint8Array(sizeofD3D11_KEY_EXCHANGE_HW_PROTECTION_DATA);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.HWProtectionFunctionID !== undefined) view.setUint32(0, Number(data.HWProtectionFunctionID), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.pInputData !== undefined) view.setBigUint64(8, data.pInputData === null ? 0n : util.toBigInt(util.toPointer(data.pInputData)), true);
  // 0x10: pointer
  if (data?.pOutputData !== undefined) view.setBigUint64(16, data.pOutputData === null ? 0n : util.toBigInt(util.toPointer(data.pOutputData)), true);
  // 0x18: pointer
  if (data?.Status !== undefined) view.setBigUint64(24, data.Status === null ? 0n : util.toBigInt(util.toPointer(data.Status)), true);
  return buf;
}

export class D3D11_KEY_EXCHANGE_HW_PROTECTION_DATAView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get HWProtectionFunctionID(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  get pInputData(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(8, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x10: pointer
  get pOutputData(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(16, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x18: pointer
  get Status(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(24, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: u32
  set HWProtectionFunctionID(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  set pInputData(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(8, util.toBigInt(util.toPointer(value)), true);
  }

  // 0x10: pointer
  set pOutputData(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(16, util.toBigInt(util.toPointer(value)), true);
  }

  // 0x18: pointer
  set Status(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(24, util.toBigInt(util.toPointer(value)), true);
  }
}

/**
 * Windows.Win32.Graphics.Direct3D11.D3D11_VIDEO_SAMPLE_DESC (size: 16)
 */
export interface D3D11_VIDEO_SAMPLE_DESC {
  /** u32 */
  Width: number;
  /** u32 */
  Height: number;
  /** Windows.Win32.Graphics.Dxgi.Common.DXGI_FORMAT */
  Format: DXGI_FORMAT;
  /** Windows.Win32.Graphics.Dxgi.Common.DXGI_COLOR_SPACE_TYPE */
  ColorSpace: DXGI_COLOR_SPACE_TYPE;
}

export const sizeofD3D11_VIDEO_SAMPLE_DESC = 16;

export function allocD3D11_VIDEO_SAMPLE_DESC(data?: Partial<D3D11_VIDEO_SAMPLE_DESC>): Uint8Array {
  const buf = new Uint8Array(sizeofD3D11_VIDEO_SAMPLE_DESC);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.Width !== undefined) view.setUint32(0, Number(data.Width), true);
  // 0x04: u32
  if (data?.Height !== undefined) view.setUint32(4, Number(data.Height), true);
  // 0x08: u32
  if (data?.Format !== undefined) view.setUint32(8, Number(data.Format), true);
  // 0x0c: i32
  if (data?.ColorSpace !== undefined) view.setInt32(12, Number(data.ColorSpace), true);
  return buf;
}

export class D3D11_VIDEO_SAMPLE_DESCView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get Width(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: u32
  get Height(): number {
    return this.view.getUint32(4, true);
  }

  // 0x08: u32
  get Format(): number {
    return this.view.getUint32(8, true);
  }

  // 0x0c: i32
  get ColorSpace(): number {
    return this.view.getInt32(12, true);
  }

  // 0x00: u32
  set Width(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: u32
  set Height(value: number) {
    this.view.setUint32(4, value, true);
  }

  // 0x08: u32
  set Format(value: number) {
    this.view.setUint32(8, value, true);
  }

  // 0x0c: i32
  set ColorSpace(value: number) {
    this.view.setInt32(12, value, true);
  }
}

/**
 * Windows.Win32.Graphics.Direct3D11.D3D11_TILED_RESOURCE_COORDINATE (size: 16)
 */
export interface D3D11_TILED_RESOURCE_COORDINATE {
  /** u32 */
  X: number;
  /** u32 */
  Y: number;
  /** u32 */
  Z: number;
  /** u32 */
  Subresource: number;
}

export const sizeofD3D11_TILED_RESOURCE_COORDINATE = 16;

export function allocD3D11_TILED_RESOURCE_COORDINATE(data?: Partial<D3D11_TILED_RESOURCE_COORDINATE>): Uint8Array {
  const buf = new Uint8Array(sizeofD3D11_TILED_RESOURCE_COORDINATE);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.X !== undefined) view.setUint32(0, Number(data.X), true);
  // 0x04: u32
  if (data?.Y !== undefined) view.setUint32(4, Number(data.Y), true);
  // 0x08: u32
  if (data?.Z !== undefined) view.setUint32(8, Number(data.Z), true);
  // 0x0c: u32
  if (data?.Subresource !== undefined) view.setUint32(12, Number(data.Subresource), true);
  return buf;
}

export class D3D11_TILED_RESOURCE_COORDINATEView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get X(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: u32
  get Y(): number {
    return this.view.getUint32(4, true);
  }

  // 0x08: u32
  get Z(): number {
    return this.view.getUint32(8, true);
  }

  // 0x0c: u32
  get Subresource(): number {
    return this.view.getUint32(12, true);
  }

  // 0x00: u32
  set X(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: u32
  set Y(value: number) {
    this.view.setUint32(4, value, true);
  }

  // 0x08: u32
  set Z(value: number) {
    this.view.setUint32(8, value, true);
  }

  // 0x0c: u32
  set Subresource(value: number) {
    this.view.setUint32(12, value, true);
  }
}

/**
 * Windows.Win32.Graphics.Direct3D11.D3D11_TILE_REGION_SIZE (size: 16)
 */
export interface D3D11_TILE_REGION_SIZE {
  /** u32 */
  NumTiles: number;
  /** Windows.Win32.Foundation.BOOL */
  bUseBox: boolean;
  /** u32 */
  Width: number;
  /** u16 */
  Height: number;
  /** u16 */
  Depth: number;
}

export const sizeofD3D11_TILE_REGION_SIZE = 16;

export function allocD3D11_TILE_REGION_SIZE(data?: Partial<D3D11_TILE_REGION_SIZE>): Uint8Array {
  const buf = new Uint8Array(sizeofD3D11_TILE_REGION_SIZE);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.NumTiles !== undefined) view.setUint32(0, Number(data.NumTiles), true);
  // 0x04: i32
  if (data?.bUseBox !== undefined) view.setInt32(4, Number(data.bUseBox), true);
  // 0x08: u32
  if (data?.Width !== undefined) view.setUint32(8, Number(data.Width), true);
  // 0x0c: u16
  if (data?.Height !== undefined) view.setUint16(12, Number(data.Height), true);
  // 0x0e: u16
  if (data?.Depth !== undefined) view.setUint16(14, Number(data.Depth), true);
  return buf;
}

export class D3D11_TILE_REGION_SIZEView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get NumTiles(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: i32
  get bUseBox(): number {
    return this.view.getInt32(4, true);
  }

  // 0x08: u32
  get Width(): number {
    return this.view.getUint32(8, true);
  }

  // 0x0c: u16
  get Height(): number {
    return this.view.getUint16(12, true);
  }

  // 0x0e: u16
  get Depth(): number {
    return this.view.getUint16(14, true);
  }

  // 0x00: u32
  set NumTiles(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: i32
  set bUseBox(value: number) {
    this.view.setInt32(4, value, true);
  }

  // 0x08: u32
  set Width(value: number) {
    this.view.setUint32(8, value, true);
  }

  // 0x0c: u16
  set Height(value: number) {
    this.view.setUint16(12, value, true);
  }

  // 0x0e: u16
  set Depth(value: number) {
    this.view.setUint16(14, value, true);
  }
}

/**
 * Windows.Win32.Graphics.Direct3D11.D3D11_SUBRESOURCE_TILING (size: 16)
 */
export interface D3D11_SUBRESOURCE_TILING {
  /** u32 */
  WidthInTiles: number;
  /** u16 */
  HeightInTiles: number;
  /** u16 */
  DepthInTiles: number;
  /** u32 */
  StartTileIndexInOverallResource: number;
}

export const sizeofD3D11_SUBRESOURCE_TILING = 16;

export function allocD3D11_SUBRESOURCE_TILING(data?: Partial<D3D11_SUBRESOURCE_TILING>): Uint8Array {
  const buf = new Uint8Array(sizeofD3D11_SUBRESOURCE_TILING);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.WidthInTiles !== undefined) view.setUint32(0, Number(data.WidthInTiles), true);
  // 0x04: u16
  if (data?.HeightInTiles !== undefined) view.setUint16(4, Number(data.HeightInTiles), true);
  // 0x06: u16
  if (data?.DepthInTiles !== undefined) view.setUint16(6, Number(data.DepthInTiles), true);
  // 0x08: u32
  if (data?.StartTileIndexInOverallResource !== undefined) view.setUint32(8, Number(data.StartTileIndexInOverallResource), true);
  // 0x0c: pad4
  return buf;
}

export class D3D11_SUBRESOURCE_TILINGView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get WidthInTiles(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: u16
  get HeightInTiles(): number {
    return this.view.getUint16(4, true);
  }

  // 0x06: u16
  get DepthInTiles(): number {
    return this.view.getUint16(6, true);
  }

  // 0x08: u32
  get StartTileIndexInOverallResource(): number {
    return this.view.getUint32(8, true);
  }

  // 0x0c: pad4

  // 0x00: u32
  set WidthInTiles(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: u16
  set HeightInTiles(value: number) {
    this.view.setUint16(4, value, true);
  }

  // 0x06: u16
  set DepthInTiles(value: number) {
    this.view.setUint16(6, value, true);
  }

  // 0x08: u32
  set StartTileIndexInOverallResource(value: number) {
    this.view.setUint32(8, value, true);
  }

  // 0x0c: pad4
}

/**
 * Windows.Win32.Graphics.Direct3D11.D3D11_TILE_SHAPE (size: 16)
 */
export interface D3D11_TILE_SHAPE {
  /** u32 */
  WidthInTexels: number;
  /** u32 */
  HeightInTexels: number;
  /** u32 */
  DepthInTexels: number;
}

export const sizeofD3D11_TILE_SHAPE = 16;

export function allocD3D11_TILE_SHAPE(data?: Partial<D3D11_TILE_SHAPE>): Uint8Array {
  const buf = new Uint8Array(sizeofD3D11_TILE_SHAPE);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.WidthInTexels !== undefined) view.setUint32(0, Number(data.WidthInTexels), true);
  // 0x04: u32
  if (data?.HeightInTexels !== undefined) view.setUint32(4, Number(data.HeightInTexels), true);
  // 0x08: u32
  if (data?.DepthInTexels !== undefined) view.setUint32(8, Number(data.DepthInTexels), true);
  // 0x0c: pad4
  return buf;
}

export class D3D11_TILE_SHAPEView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get WidthInTexels(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: u32
  get HeightInTexels(): number {
    return this.view.getUint32(4, true);
  }

  // 0x08: u32
  get DepthInTexels(): number {
    return this.view.getUint32(8, true);
  }

  // 0x0c: pad4

  // 0x00: u32
  set WidthInTexels(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: u32
  set HeightInTexels(value: number) {
    this.view.setUint32(4, value, true);
  }

  // 0x08: u32
  set DepthInTexels(value: number) {
    this.view.setUint32(8, value, true);
  }

  // 0x0c: pad4
}

/**
 * Windows.Win32.Graphics.Direct3D11.D3D11_PACKED_MIP_DESC (size: 16)
 */
export interface D3D11_PACKED_MIP_DESC {
  /** u8 */
  NumStandardMips: number;
  /** u8 */
  NumPackedMips: number;
  /** u32 */
  NumTilesForPackedMips: number;
  /** u32 */
  StartTileIndexInOverallResource: number;
}

export const sizeofD3D11_PACKED_MIP_DESC = 16;

export function allocD3D11_PACKED_MIP_DESC(data?: Partial<D3D11_PACKED_MIP_DESC>): Uint8Array {
  const buf = new Uint8Array(sizeofD3D11_PACKED_MIP_DESC);
  const view = new DataView(buf.buffer);
  // 0x00: u8
  if (data?.NumStandardMips !== undefined) view.setUint8(0, Number(data.NumStandardMips));
  // 0x01: u8
  if (data?.NumPackedMips !== undefined) view.setUint8(1, Number(data.NumPackedMips));
  // 0x02: u32
  if (data?.NumTilesForPackedMips !== undefined) view.setUint32(2, Number(data.NumTilesForPackedMips), true);
  // 0x06: u32
  if (data?.StartTileIndexInOverallResource !== undefined) view.setUint32(6, Number(data.StartTileIndexInOverallResource), true);
  // 0x0a: pad6
  return buf;
}

export class D3D11_PACKED_MIP_DESCView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u8
  get NumStandardMips(): number {
    return this.view.getUint8(0);
  }

  // 0x01: u8
  get NumPackedMips(): number {
    return this.view.getUint8(1);
  }

  // 0x02: u32
  get NumTilesForPackedMips(): number {
    return this.view.getUint32(2, true);
  }

  // 0x06: u32
  get StartTileIndexInOverallResource(): number {
    return this.view.getUint32(6, true);
  }

  // 0x0a: pad6

  // 0x00: u8
  set NumStandardMips(value: number) {
    this.view.setUint8(0, value);
  }

  // 0x01: u8
  set NumPackedMips(value: number) {
    this.view.setUint8(1, value);
  }

  // 0x02: u32
  set NumTilesForPackedMips(value: number) {
    this.view.setUint32(2, value, true);
  }

  // 0x06: u32
  set StartTileIndexInOverallResource(value: number) {
    this.view.setUint32(6, value, true);
  }

  // 0x0a: pad6
}

/**
 * Windows.Win32.Graphics.Direct3D11.D3D11_TEXTURE2D_DESC1 (size: 56)
 */
export interface D3D11_TEXTURE2D_DESC1 {
  /** u32 */
  Width: number;
  /** u32 */
  Height: number;
  /** u32 */
  MipLevels: number;
  /** u32 */
  ArraySize: number;
  /** Windows.Win32.Graphics.Dxgi.Common.DXGI_FORMAT */
  Format: DXGI_FORMAT;
  /** Windows.Win32.Graphics.Dxgi.Common.DXGI_SAMPLE_DESC */
  SampleDesc: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Graphics.Direct3D11.D3D11_USAGE */
  Usage: D3D11_USAGE;
  /** Windows.Win32.Graphics.Direct3D11.D3D11_BIND_FLAG */
  BindFlags: D3D11_BIND_FLAG;
  /** Windows.Win32.Graphics.Direct3D11.D3D11_CPU_ACCESS_FLAG */
  CPUAccessFlags: D3D11_CPU_ACCESS_FLAG;
  /** Windows.Win32.Graphics.Direct3D11.D3D11_RESOURCE_MISC_FLAG */
  MiscFlags: D3D11_RESOURCE_MISC_FLAG;
  /** Windows.Win32.Graphics.Direct3D11.D3D11_TEXTURE_LAYOUT */
  TextureLayout: D3D11_TEXTURE_LAYOUT;
}

export const sizeofD3D11_TEXTURE2D_DESC1 = 56;

export function allocD3D11_TEXTURE2D_DESC1(data?: Partial<D3D11_TEXTURE2D_DESC1>): Uint8Array {
  const buf = new Uint8Array(sizeofD3D11_TEXTURE2D_DESC1);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.Width !== undefined) view.setUint32(0, Number(data.Width), true);
  // 0x04: u32
  if (data?.Height !== undefined) view.setUint32(4, Number(data.Height), true);
  // 0x08: u32
  if (data?.MipLevels !== undefined) view.setUint32(8, Number(data.MipLevels), true);
  // 0x0c: u32
  if (data?.ArraySize !== undefined) view.setUint32(12, Number(data.ArraySize), true);
  // 0x10: u32
  if (data?.Format !== undefined) view.setUint32(16, Number(data.Format), true);
  // 0x14: pad4
  // 0x18: pointer
  if (data?.SampleDesc !== undefined) view.setBigUint64(24, data.SampleDesc === null ? 0n : util.toBigInt(util.toPointer(data.SampleDesc)), true);
  // 0x20: i32
  if (data?.Usage !== undefined) view.setInt32(32, Number(data.Usage), true);
  // 0x24: u32
  if (data?.BindFlags !== undefined) view.setUint32(36, Number(data.BindFlags), true);
  // 0x28: u32
  if (data?.CPUAccessFlags !== undefined) view.setUint32(40, Number(data.CPUAccessFlags), true);
  // 0x2c: u32
  if (data?.MiscFlags !== undefined) view.setUint32(44, Number(data.MiscFlags), true);
  // 0x30: i32
  if (data?.TextureLayout !== undefined) view.setInt32(48, Number(data.TextureLayout), true);
  // 0x34: pad4
  return buf;
}

export class D3D11_TEXTURE2D_DESC1View {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get Width(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: u32
  get Height(): number {
    return this.view.getUint32(4, true);
  }

  // 0x08: u32
  get MipLevels(): number {
    return this.view.getUint32(8, true);
  }

  // 0x0c: u32
  get ArraySize(): number {
    return this.view.getUint32(12, true);
  }

  // 0x10: u32
  get Format(): number {
    return this.view.getUint32(16, true);
  }

  // 0x14: pad4

  // 0x18: pointer
  get SampleDesc(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(24, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x20: i32
  get Usage(): number {
    return this.view.getInt32(32, true);
  }

  // 0x24: u32
  get BindFlags(): number {
    return this.view.getUint32(36, true);
  }

  // 0x28: u32
  get CPUAccessFlags(): number {
    return this.view.getUint32(40, true);
  }

  // 0x2c: u32
  get MiscFlags(): number {
    return this.view.getUint32(44, true);
  }

  // 0x30: i32
  get TextureLayout(): number {
    return this.view.getInt32(48, true);
  }

  // 0x34: pad4

  // 0x00: u32
  set Width(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: u32
  set Height(value: number) {
    this.view.setUint32(4, value, true);
  }

  // 0x08: u32
  set MipLevels(value: number) {
    this.view.setUint32(8, value, true);
  }

  // 0x0c: u32
  set ArraySize(value: number) {
    this.view.setUint32(12, value, true);
  }

  // 0x10: u32
  set Format(value: number) {
    this.view.setUint32(16, value, true);
  }

  // 0x14: pad4

  // 0x18: pointer
  set SampleDesc(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(24, util.toBigInt(util.toPointer(value)), true);
  }

  // 0x20: i32
  set Usage(value: number) {
    this.view.setInt32(32, value, true);
  }

  // 0x24: u32
  set BindFlags(value: number) {
    this.view.setUint32(36, value, true);
  }

  // 0x28: u32
  set CPUAccessFlags(value: number) {
    this.view.setUint32(40, value, true);
  }

  // 0x2c: u32
  set MiscFlags(value: number) {
    this.view.setUint32(44, value, true);
  }

  // 0x30: i32
  set TextureLayout(value: number) {
    this.view.setInt32(48, value, true);
  }

  // 0x34: pad4
}

/**
 * Windows.Win32.Graphics.Direct3D11.D3D11_TEXTURE3D_DESC1 (size: 40)
 */
export interface D3D11_TEXTURE3D_DESC1 {
  /** u32 */
  Width: number;
  /** u32 */
  Height: number;
  /** u32 */
  Depth: number;
  /** u32 */
  MipLevels: number;
  /** Windows.Win32.Graphics.Dxgi.Common.DXGI_FORMAT */
  Format: DXGI_FORMAT;
  /** Windows.Win32.Graphics.Direct3D11.D3D11_USAGE */
  Usage: D3D11_USAGE;
  /** Windows.Win32.Graphics.Direct3D11.D3D11_BIND_FLAG */
  BindFlags: D3D11_BIND_FLAG;
  /** Windows.Win32.Graphics.Direct3D11.D3D11_CPU_ACCESS_FLAG */
  CPUAccessFlags: D3D11_CPU_ACCESS_FLAG;
  /** Windows.Win32.Graphics.Direct3D11.D3D11_RESOURCE_MISC_FLAG */
  MiscFlags: D3D11_RESOURCE_MISC_FLAG;
  /** Windows.Win32.Graphics.Direct3D11.D3D11_TEXTURE_LAYOUT */
  TextureLayout: D3D11_TEXTURE_LAYOUT;
}

export const sizeofD3D11_TEXTURE3D_DESC1 = 40;

export function allocD3D11_TEXTURE3D_DESC1(data?: Partial<D3D11_TEXTURE3D_DESC1>): Uint8Array {
  const buf = new Uint8Array(sizeofD3D11_TEXTURE3D_DESC1);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.Width !== undefined) view.setUint32(0, Number(data.Width), true);
  // 0x04: u32
  if (data?.Height !== undefined) view.setUint32(4, Number(data.Height), true);
  // 0x08: u32
  if (data?.Depth !== undefined) view.setUint32(8, Number(data.Depth), true);
  // 0x0c: u32
  if (data?.MipLevels !== undefined) view.setUint32(12, Number(data.MipLevels), true);
  // 0x10: u32
  if (data?.Format !== undefined) view.setUint32(16, Number(data.Format), true);
  // 0x14: i32
  if (data?.Usage !== undefined) view.setInt32(20, Number(data.Usage), true);
  // 0x18: u32
  if (data?.BindFlags !== undefined) view.setUint32(24, Number(data.BindFlags), true);
  // 0x1c: u32
  if (data?.CPUAccessFlags !== undefined) view.setUint32(28, Number(data.CPUAccessFlags), true);
  // 0x20: u32
  if (data?.MiscFlags !== undefined) view.setUint32(32, Number(data.MiscFlags), true);
  // 0x24: i32
  if (data?.TextureLayout !== undefined) view.setInt32(36, Number(data.TextureLayout), true);
  return buf;
}

export class D3D11_TEXTURE3D_DESC1View {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get Width(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: u32
  get Height(): number {
    return this.view.getUint32(4, true);
  }

  // 0x08: u32
  get Depth(): number {
    return this.view.getUint32(8, true);
  }

  // 0x0c: u32
  get MipLevels(): number {
    return this.view.getUint32(12, true);
  }

  // 0x10: u32
  get Format(): number {
    return this.view.getUint32(16, true);
  }

  // 0x14: i32
  get Usage(): number {
    return this.view.getInt32(20, true);
  }

  // 0x18: u32
  get BindFlags(): number {
    return this.view.getUint32(24, true);
  }

  // 0x1c: u32
  get CPUAccessFlags(): number {
    return this.view.getUint32(28, true);
  }

  // 0x20: u32
  get MiscFlags(): number {
    return this.view.getUint32(32, true);
  }

  // 0x24: i32
  get TextureLayout(): number {
    return this.view.getInt32(36, true);
  }

  // 0x00: u32
  set Width(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: u32
  set Height(value: number) {
    this.view.setUint32(4, value, true);
  }

  // 0x08: u32
  set Depth(value: number) {
    this.view.setUint32(8, value, true);
  }

  // 0x0c: u32
  set MipLevels(value: number) {
    this.view.setUint32(12, value, true);
  }

  // 0x10: u32
  set Format(value: number) {
    this.view.setUint32(16, value, true);
  }

  // 0x14: i32
  set Usage(value: number) {
    this.view.setInt32(20, value, true);
  }

  // 0x18: u32
  set BindFlags(value: number) {
    this.view.setUint32(24, value, true);
  }

  // 0x1c: u32
  set CPUAccessFlags(value: number) {
    this.view.setUint32(28, value, true);
  }

  // 0x20: u32
  set MiscFlags(value: number) {
    this.view.setUint32(32, value, true);
  }

  // 0x24: i32
  set TextureLayout(value: number) {
    this.view.setInt32(36, value, true);
  }
}

/**
 * Windows.Win32.Graphics.Direct3D11.D3D11_RASTERIZER_DESC2 (size: 48)
 */
export interface D3D11_RASTERIZER_DESC2 {
  /** Windows.Win32.Graphics.Direct3D11.D3D11_FILL_MODE */
  FillMode: D3D11_FILL_MODE;
  /** Windows.Win32.Graphics.Direct3D11.D3D11_CULL_MODE */
  CullMode: D3D11_CULL_MODE;
  /** Windows.Win32.Foundation.BOOL */
  FrontCounterClockwise: boolean;
  /** i32 */
  DepthBias: number;
  /** f32 */
  DepthBiasClamp: number;
  /** f32 */
  SlopeScaledDepthBias: number;
  /** Windows.Win32.Foundation.BOOL */
  DepthClipEnable: boolean;
  /** Windows.Win32.Foundation.BOOL */
  ScissorEnable: boolean;
  /** Windows.Win32.Foundation.BOOL */
  MultisampleEnable: boolean;
  /** Windows.Win32.Foundation.BOOL */
  AntialiasedLineEnable: boolean;
  /** u32 */
  ForcedSampleCount: number;
  /** Windows.Win32.Graphics.Direct3D11.D3D11_CONSERVATIVE_RASTERIZATION_MODE */
  ConservativeRaster: D3D11_CONSERVATIVE_RASTERIZATION_MODE;
}

export const sizeofD3D11_RASTERIZER_DESC2 = 48;

export function allocD3D11_RASTERIZER_DESC2(data?: Partial<D3D11_RASTERIZER_DESC2>): Uint8Array {
  const buf = new Uint8Array(sizeofD3D11_RASTERIZER_DESC2);
  const view = new DataView(buf.buffer);
  // 0x00: i32
  if (data?.FillMode !== undefined) view.setInt32(0, Number(data.FillMode), true);
  // 0x04: i32
  if (data?.CullMode !== undefined) view.setInt32(4, Number(data.CullMode), true);
  // 0x08: i32
  if (data?.FrontCounterClockwise !== undefined) view.setInt32(8, Number(data.FrontCounterClockwise), true);
  // 0x0c: i32
  if (data?.DepthBias !== undefined) view.setInt32(12, Number(data.DepthBias), true);
  // 0x10: f32
  if (data?.DepthBiasClamp !== undefined) view.setFloat32(16, Number(data.DepthBiasClamp), true);
  // 0x14: f32
  if (data?.SlopeScaledDepthBias !== undefined) view.setFloat32(20, Number(data.SlopeScaledDepthBias), true);
  // 0x18: i32
  if (data?.DepthClipEnable !== undefined) view.setInt32(24, Number(data.DepthClipEnable), true);
  // 0x1c: i32
  if (data?.ScissorEnable !== undefined) view.setInt32(28, Number(data.ScissorEnable), true);
  // 0x20: i32
  if (data?.MultisampleEnable !== undefined) view.setInt32(32, Number(data.MultisampleEnable), true);
  // 0x24: i32
  if (data?.AntialiasedLineEnable !== undefined) view.setInt32(36, Number(data.AntialiasedLineEnable), true);
  // 0x28: u32
  if (data?.ForcedSampleCount !== undefined) view.setUint32(40, Number(data.ForcedSampleCount), true);
  // 0x2c: i32
  if (data?.ConservativeRaster !== undefined) view.setInt32(44, Number(data.ConservativeRaster), true);
  return buf;
}

export class D3D11_RASTERIZER_DESC2View {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: i32
  get FillMode(): number {
    return this.view.getInt32(0, true);
  }

  // 0x04: i32
  get CullMode(): number {
    return this.view.getInt32(4, true);
  }

  // 0x08: i32
  get FrontCounterClockwise(): number {
    return this.view.getInt32(8, true);
  }

  // 0x0c: i32
  get DepthBias(): number {
    return this.view.getInt32(12, true);
  }

  // 0x10: f32
  get DepthBiasClamp(): number {
    return this.view.getFloat32(16, true);
  }

  // 0x14: f32
  get SlopeScaledDepthBias(): number {
    return this.view.getFloat32(20, true);
  }

  // 0x18: i32
  get DepthClipEnable(): number {
    return this.view.getInt32(24, true);
  }

  // 0x1c: i32
  get ScissorEnable(): number {
    return this.view.getInt32(28, true);
  }

  // 0x20: i32
  get MultisampleEnable(): number {
    return this.view.getInt32(32, true);
  }

  // 0x24: i32
  get AntialiasedLineEnable(): number {
    return this.view.getInt32(36, true);
  }

  // 0x28: u32
  get ForcedSampleCount(): number {
    return this.view.getUint32(40, true);
  }

  // 0x2c: i32
  get ConservativeRaster(): number {
    return this.view.getInt32(44, true);
  }

  // 0x00: i32
  set FillMode(value: number) {
    this.view.setInt32(0, value, true);
  }

  // 0x04: i32
  set CullMode(value: number) {
    this.view.setInt32(4, value, true);
  }

  // 0x08: i32
  set FrontCounterClockwise(value: number) {
    this.view.setInt32(8, value, true);
  }

  // 0x0c: i32
  set DepthBias(value: number) {
    this.view.setInt32(12, value, true);
  }

  // 0x10: f32
  set DepthBiasClamp(value: number) {
    this.view.setFloat32(16, value, true);
  }

  // 0x14: f32
  set SlopeScaledDepthBias(value: number) {
    this.view.setFloat32(20, value, true);
  }

  // 0x18: i32
  set DepthClipEnable(value: number) {
    this.view.setInt32(24, value, true);
  }

  // 0x1c: i32
  set ScissorEnable(value: number) {
    this.view.setInt32(28, value, true);
  }

  // 0x20: i32
  set MultisampleEnable(value: number) {
    this.view.setInt32(32, value, true);
  }

  // 0x24: i32
  set AntialiasedLineEnable(value: number) {
    this.view.setInt32(36, value, true);
  }

  // 0x28: u32
  set ForcedSampleCount(value: number) {
    this.view.setUint32(40, value, true);
  }

  // 0x2c: i32
  set ConservativeRaster(value: number) {
    this.view.setInt32(44, value, true);
  }
}

/**
 * Windows.Win32.Graphics.Direct3D11.D3D11_TEX2D_SRV1 (size: 16)
 */
export interface D3D11_TEX2D_SRV1 {
  /** u32 */
  MostDetailedMip: number;
  /** u32 */
  MipLevels: number;
  /** u32 */
  PlaneSlice: number;
}

export const sizeofD3D11_TEX2D_SRV1 = 16;

export function allocD3D11_TEX2D_SRV1(data?: Partial<D3D11_TEX2D_SRV1>): Uint8Array {
  const buf = new Uint8Array(sizeofD3D11_TEX2D_SRV1);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.MostDetailedMip !== undefined) view.setUint32(0, Number(data.MostDetailedMip), true);
  // 0x04: u32
  if (data?.MipLevels !== undefined) view.setUint32(4, Number(data.MipLevels), true);
  // 0x08: u32
  if (data?.PlaneSlice !== undefined) view.setUint32(8, Number(data.PlaneSlice), true);
  // 0x0c: pad4
  return buf;
}

export class D3D11_TEX2D_SRV1View {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get MostDetailedMip(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: u32
  get MipLevels(): number {
    return this.view.getUint32(4, true);
  }

  // 0x08: u32
  get PlaneSlice(): number {
    return this.view.getUint32(8, true);
  }

  // 0x0c: pad4

  // 0x00: u32
  set MostDetailedMip(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: u32
  set MipLevels(value: number) {
    this.view.setUint32(4, value, true);
  }

  // 0x08: u32
  set PlaneSlice(value: number) {
    this.view.setUint32(8, value, true);
  }

  // 0x0c: pad4
}

/**
 * Windows.Win32.Graphics.Direct3D11.D3D11_TEX2D_ARRAY_SRV1 (size: 24)
 */
export interface D3D11_TEX2D_ARRAY_SRV1 {
  /** u32 */
  MostDetailedMip: number;
  /** u32 */
  MipLevels: number;
  /** u32 */
  FirstArraySlice: number;
  /** u32 */
  ArraySize: number;
  /** u32 */
  PlaneSlice: number;
}

export const sizeofD3D11_TEX2D_ARRAY_SRV1 = 24;

export function allocD3D11_TEX2D_ARRAY_SRV1(data?: Partial<D3D11_TEX2D_ARRAY_SRV1>): Uint8Array {
  const buf = new Uint8Array(sizeofD3D11_TEX2D_ARRAY_SRV1);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.MostDetailedMip !== undefined) view.setUint32(0, Number(data.MostDetailedMip), true);
  // 0x04: u32
  if (data?.MipLevels !== undefined) view.setUint32(4, Number(data.MipLevels), true);
  // 0x08: u32
  if (data?.FirstArraySlice !== undefined) view.setUint32(8, Number(data.FirstArraySlice), true);
  // 0x0c: u32
  if (data?.ArraySize !== undefined) view.setUint32(12, Number(data.ArraySize), true);
  // 0x10: u32
  if (data?.PlaneSlice !== undefined) view.setUint32(16, Number(data.PlaneSlice), true);
  // 0x14: pad4
  return buf;
}

export class D3D11_TEX2D_ARRAY_SRV1View {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get MostDetailedMip(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: u32
  get MipLevels(): number {
    return this.view.getUint32(4, true);
  }

  // 0x08: u32
  get FirstArraySlice(): number {
    return this.view.getUint32(8, true);
  }

  // 0x0c: u32
  get ArraySize(): number {
    return this.view.getUint32(12, true);
  }

  // 0x10: u32
  get PlaneSlice(): number {
    return this.view.getUint32(16, true);
  }

  // 0x14: pad4

  // 0x00: u32
  set MostDetailedMip(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: u32
  set MipLevels(value: number) {
    this.view.setUint32(4, value, true);
  }

  // 0x08: u32
  set FirstArraySlice(value: number) {
    this.view.setUint32(8, value, true);
  }

  // 0x0c: u32
  set ArraySize(value: number) {
    this.view.setUint32(12, value, true);
  }

  // 0x10: u32
  set PlaneSlice(value: number) {
    this.view.setUint32(16, value, true);
  }

  // 0x14: pad4
}

/**
 * Windows.Win32.Graphics.Direct3D11.D3D11_SHADER_RESOURCE_VIEW_DESC1 (size: 16)
 */
export interface D3D11_SHADER_RESOURCE_VIEW_DESC1 {
  /** Windows.Win32.Graphics.Dxgi.Common.DXGI_FORMAT */
  Format: DXGI_FORMAT;
  /** Windows.Win32.Graphics.Direct3D.D3D_SRV_DIMENSION */
  ViewDimension: D3D_SRV_DIMENSION;
  /** _Anonymous_e__Union */
  Anonymous: Uint8Array | Deno.PointerValue | null;
}

export const sizeofD3D11_SHADER_RESOURCE_VIEW_DESC1 = 16;

export function allocD3D11_SHADER_RESOURCE_VIEW_DESC1(data?: Partial<D3D11_SHADER_RESOURCE_VIEW_DESC1>): Uint8Array {
  const buf = new Uint8Array(sizeofD3D11_SHADER_RESOURCE_VIEW_DESC1);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.Format !== undefined) view.setUint32(0, Number(data.Format), true);
  // 0x04: i32
  if (data?.ViewDimension !== undefined) view.setInt32(4, Number(data.ViewDimension), true);
  // 0x08: pointer
  if (data?.Anonymous !== undefined) view.setBigUint64(8, data.Anonymous === null ? 0n : util.toBigInt(util.toPointer(data.Anonymous)), true);
  return buf;
}

export class D3D11_SHADER_RESOURCE_VIEW_DESC1View {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get Format(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: i32
  get ViewDimension(): number {
    return this.view.getInt32(4, true);
  }

  // 0x08: pointer
  get Anonymous(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(8, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: u32
  set Format(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: i32
  set ViewDimension(value: number) {
    this.view.setInt32(4, value, true);
  }

  // 0x08: pointer
  set Anonymous(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(8, util.toBigInt(util.toPointer(value)), true);
  }
}

/**
 * Windows.Win32.Graphics.Direct3D11.D3D11_TEX2D_RTV1 (size: 8)
 */
export interface D3D11_TEX2D_RTV1 {
  /** u32 */
  MipSlice: number;
  /** u32 */
  PlaneSlice: number;
}

export const sizeofD3D11_TEX2D_RTV1 = 8;

export function allocD3D11_TEX2D_RTV1(data?: Partial<D3D11_TEX2D_RTV1>): Uint8Array {
  const buf = new Uint8Array(sizeofD3D11_TEX2D_RTV1);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.MipSlice !== undefined) view.setUint32(0, Number(data.MipSlice), true);
  // 0x04: u32
  if (data?.PlaneSlice !== undefined) view.setUint32(4, Number(data.PlaneSlice), true);
  return buf;
}

export class D3D11_TEX2D_RTV1View {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get MipSlice(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: u32
  get PlaneSlice(): number {
    return this.view.getUint32(4, true);
  }

  // 0x00: u32
  set MipSlice(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: u32
  set PlaneSlice(value: number) {
    this.view.setUint32(4, value, true);
  }
}

/**
 * Windows.Win32.Graphics.Direct3D11.D3D11_TEX2D_ARRAY_RTV1 (size: 16)
 */
export interface D3D11_TEX2D_ARRAY_RTV1 {
  /** u32 */
  MipSlice: number;
  /** u32 */
  FirstArraySlice: number;
  /** u32 */
  ArraySize: number;
  /** u32 */
  PlaneSlice: number;
}

export const sizeofD3D11_TEX2D_ARRAY_RTV1 = 16;

export function allocD3D11_TEX2D_ARRAY_RTV1(data?: Partial<D3D11_TEX2D_ARRAY_RTV1>): Uint8Array {
  const buf = new Uint8Array(sizeofD3D11_TEX2D_ARRAY_RTV1);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.MipSlice !== undefined) view.setUint32(0, Number(data.MipSlice), true);
  // 0x04: u32
  if (data?.FirstArraySlice !== undefined) view.setUint32(4, Number(data.FirstArraySlice), true);
  // 0x08: u32
  if (data?.ArraySize !== undefined) view.setUint32(8, Number(data.ArraySize), true);
  // 0x0c: u32
  if (data?.PlaneSlice !== undefined) view.setUint32(12, Number(data.PlaneSlice), true);
  return buf;
}

export class D3D11_TEX2D_ARRAY_RTV1View {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get MipSlice(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: u32
  get FirstArraySlice(): number {
    return this.view.getUint32(4, true);
  }

  // 0x08: u32
  get ArraySize(): number {
    return this.view.getUint32(8, true);
  }

  // 0x0c: u32
  get PlaneSlice(): number {
    return this.view.getUint32(12, true);
  }

  // 0x00: u32
  set MipSlice(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: u32
  set FirstArraySlice(value: number) {
    this.view.setUint32(4, value, true);
  }

  // 0x08: u32
  set ArraySize(value: number) {
    this.view.setUint32(8, value, true);
  }

  // 0x0c: u32
  set PlaneSlice(value: number) {
    this.view.setUint32(12, value, true);
  }
}

/**
 * Windows.Win32.Graphics.Direct3D11.D3D11_RENDER_TARGET_VIEW_DESC1 (size: 16)
 */
export interface D3D11_RENDER_TARGET_VIEW_DESC1 {
  /** Windows.Win32.Graphics.Dxgi.Common.DXGI_FORMAT */
  Format: DXGI_FORMAT;
  /** Windows.Win32.Graphics.Direct3D11.D3D11_RTV_DIMENSION */
  ViewDimension: D3D11_RTV_DIMENSION;
  /** _Anonymous_e__Union */
  Anonymous: Uint8Array | Deno.PointerValue | null;
}

export const sizeofD3D11_RENDER_TARGET_VIEW_DESC1 = 16;

export function allocD3D11_RENDER_TARGET_VIEW_DESC1(data?: Partial<D3D11_RENDER_TARGET_VIEW_DESC1>): Uint8Array {
  const buf = new Uint8Array(sizeofD3D11_RENDER_TARGET_VIEW_DESC1);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.Format !== undefined) view.setUint32(0, Number(data.Format), true);
  // 0x04: i32
  if (data?.ViewDimension !== undefined) view.setInt32(4, Number(data.ViewDimension), true);
  // 0x08: pointer
  if (data?.Anonymous !== undefined) view.setBigUint64(8, data.Anonymous === null ? 0n : util.toBigInt(util.toPointer(data.Anonymous)), true);
  return buf;
}

export class D3D11_RENDER_TARGET_VIEW_DESC1View {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get Format(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: i32
  get ViewDimension(): number {
    return this.view.getInt32(4, true);
  }

  // 0x08: pointer
  get Anonymous(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(8, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: u32
  set Format(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: i32
  set ViewDimension(value: number) {
    this.view.setInt32(4, value, true);
  }

  // 0x08: pointer
  set Anonymous(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(8, util.toBigInt(util.toPointer(value)), true);
  }
}

/**
 * Windows.Win32.Graphics.Direct3D11.D3D11_TEX2D_UAV1 (size: 8)
 */
export interface D3D11_TEX2D_UAV1 {
  /** u32 */
  MipSlice: number;
  /** u32 */
  PlaneSlice: number;
}

export const sizeofD3D11_TEX2D_UAV1 = 8;

export function allocD3D11_TEX2D_UAV1(data?: Partial<D3D11_TEX2D_UAV1>): Uint8Array {
  const buf = new Uint8Array(sizeofD3D11_TEX2D_UAV1);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.MipSlice !== undefined) view.setUint32(0, Number(data.MipSlice), true);
  // 0x04: u32
  if (data?.PlaneSlice !== undefined) view.setUint32(4, Number(data.PlaneSlice), true);
  return buf;
}

export class D3D11_TEX2D_UAV1View {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get MipSlice(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: u32
  get PlaneSlice(): number {
    return this.view.getUint32(4, true);
  }

  // 0x00: u32
  set MipSlice(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: u32
  set PlaneSlice(value: number) {
    this.view.setUint32(4, value, true);
  }
}

/**
 * Windows.Win32.Graphics.Direct3D11.D3D11_TEX2D_ARRAY_UAV1 (size: 16)
 */
export interface D3D11_TEX2D_ARRAY_UAV1 {
  /** u32 */
  MipSlice: number;
  /** u32 */
  FirstArraySlice: number;
  /** u32 */
  ArraySize: number;
  /** u32 */
  PlaneSlice: number;
}

export const sizeofD3D11_TEX2D_ARRAY_UAV1 = 16;

export function allocD3D11_TEX2D_ARRAY_UAV1(data?: Partial<D3D11_TEX2D_ARRAY_UAV1>): Uint8Array {
  const buf = new Uint8Array(sizeofD3D11_TEX2D_ARRAY_UAV1);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.MipSlice !== undefined) view.setUint32(0, Number(data.MipSlice), true);
  // 0x04: u32
  if (data?.FirstArraySlice !== undefined) view.setUint32(4, Number(data.FirstArraySlice), true);
  // 0x08: u32
  if (data?.ArraySize !== undefined) view.setUint32(8, Number(data.ArraySize), true);
  // 0x0c: u32
  if (data?.PlaneSlice !== undefined) view.setUint32(12, Number(data.PlaneSlice), true);
  return buf;
}

export class D3D11_TEX2D_ARRAY_UAV1View {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get MipSlice(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: u32
  get FirstArraySlice(): number {
    return this.view.getUint32(4, true);
  }

  // 0x08: u32
  get ArraySize(): number {
    return this.view.getUint32(8, true);
  }

  // 0x0c: u32
  get PlaneSlice(): number {
    return this.view.getUint32(12, true);
  }

  // 0x00: u32
  set MipSlice(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: u32
  set FirstArraySlice(value: number) {
    this.view.setUint32(4, value, true);
  }

  // 0x08: u32
  set ArraySize(value: number) {
    this.view.setUint32(8, value, true);
  }

  // 0x0c: u32
  set PlaneSlice(value: number) {
    this.view.setUint32(12, value, true);
  }
}

/**
 * Windows.Win32.Graphics.Direct3D11.D3D11_UNORDERED_ACCESS_VIEW_DESC1 (size: 16)
 */
export interface D3D11_UNORDERED_ACCESS_VIEW_DESC1 {
  /** Windows.Win32.Graphics.Dxgi.Common.DXGI_FORMAT */
  Format: DXGI_FORMAT;
  /** Windows.Win32.Graphics.Direct3D11.D3D11_UAV_DIMENSION */
  ViewDimension: D3D11_UAV_DIMENSION;
  /** _Anonymous_e__Union */
  Anonymous: Uint8Array | Deno.PointerValue | null;
}

export const sizeofD3D11_UNORDERED_ACCESS_VIEW_DESC1 = 16;

export function allocD3D11_UNORDERED_ACCESS_VIEW_DESC1(data?: Partial<D3D11_UNORDERED_ACCESS_VIEW_DESC1>): Uint8Array {
  const buf = new Uint8Array(sizeofD3D11_UNORDERED_ACCESS_VIEW_DESC1);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.Format !== undefined) view.setUint32(0, Number(data.Format), true);
  // 0x04: i32
  if (data?.ViewDimension !== undefined) view.setInt32(4, Number(data.ViewDimension), true);
  // 0x08: pointer
  if (data?.Anonymous !== undefined) view.setBigUint64(8, data.Anonymous === null ? 0n : util.toBigInt(util.toPointer(data.Anonymous)), true);
  return buf;
}

export class D3D11_UNORDERED_ACCESS_VIEW_DESC1View {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get Format(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: i32
  get ViewDimension(): number {
    return this.view.getInt32(4, true);
  }

  // 0x08: pointer
  get Anonymous(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(8, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: u32
  set Format(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: i32
  set ViewDimension(value: number) {
    this.view.setInt32(4, value, true);
  }

  // 0x08: pointer
  set Anonymous(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(8, util.toBigInt(util.toPointer(value)), true);
  }
}

/**
 * Windows.Win32.Graphics.Direct3D11.D3D11_QUERY_DESC1 (size: 16)
 */
export interface D3D11_QUERY_DESC1 {
  /** Windows.Win32.Graphics.Direct3D11.D3D11_QUERY */
  Query: D3D11_QUERY;
  /** u32 */
  MiscFlags: number;
  /** Windows.Win32.Graphics.Direct3D11.D3D11_CONTEXT_TYPE */
  ContextType: D3D11_CONTEXT_TYPE;
}

export const sizeofD3D11_QUERY_DESC1 = 16;

export function allocD3D11_QUERY_DESC1(data?: Partial<D3D11_QUERY_DESC1>): Uint8Array {
  const buf = new Uint8Array(sizeofD3D11_QUERY_DESC1);
  const view = new DataView(buf.buffer);
  // 0x00: i32
  if (data?.Query !== undefined) view.setInt32(0, Number(data.Query), true);
  // 0x04: u32
  if (data?.MiscFlags !== undefined) view.setUint32(4, Number(data.MiscFlags), true);
  // 0x08: i32
  if (data?.ContextType !== undefined) view.setInt32(8, Number(data.ContextType), true);
  // 0x0c: pad4
  return buf;
}

export class D3D11_QUERY_DESC1View {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: i32
  get Query(): number {
    return this.view.getInt32(0, true);
  }

  // 0x04: u32
  get MiscFlags(): number {
    return this.view.getUint32(4, true);
  }

  // 0x08: i32
  get ContextType(): number {
    return this.view.getInt32(8, true);
  }

  // 0x0c: pad4

  // 0x00: i32
  set Query(value: number) {
    this.view.setInt32(0, value, true);
  }

  // 0x04: u32
  set MiscFlags(value: number) {
    this.view.setUint32(4, value, true);
  }

  // 0x08: i32
  set ContextType(value: number) {
    this.view.setInt32(8, value, true);
  }

  // 0x0c: pad4
}

/**
 * Windows.Win32.Graphics.Direct3D11.D3D11_FEATURE_DATA_VIDEO_DECODER_HISTOGRAM (size: 24)
 */
export interface D3D11_FEATURE_DATA_VIDEO_DECODER_HISTOGRAM {
  /** Windows.Win32.Graphics.Direct3D11.D3D11_VIDEO_DECODER_DESC */
  DecoderDesc: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Graphics.Direct3D11.D3D11_VIDEO_DECODER_HISTOGRAM_COMPONENT_FLAGS */
  Components: D3D11_VIDEO_DECODER_HISTOGRAM_COMPONENT_FLAGS;
  /** u32 */
  BinCount: number;
  /** u32 */
  CounterBitDepth: number;
}

export const sizeofD3D11_FEATURE_DATA_VIDEO_DECODER_HISTOGRAM = 24;

export function allocD3D11_FEATURE_DATA_VIDEO_DECODER_HISTOGRAM(data?: Partial<D3D11_FEATURE_DATA_VIDEO_DECODER_HISTOGRAM>): Uint8Array {
  const buf = new Uint8Array(sizeofD3D11_FEATURE_DATA_VIDEO_DECODER_HISTOGRAM);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.DecoderDesc !== undefined) view.setBigUint64(0, data.DecoderDesc === null ? 0n : util.toBigInt(util.toPointer(data.DecoderDesc)), true);
  // 0x08: u32
  if (data?.Components !== undefined) view.setUint32(8, Number(data.Components), true);
  // 0x0c: u32
  if (data?.BinCount !== undefined) view.setUint32(12, Number(data.BinCount), true);
  // 0x10: u32
  if (data?.CounterBitDepth !== undefined) view.setUint32(16, Number(data.CounterBitDepth), true);
  // 0x14: pad4
  return buf;
}

export class D3D11_FEATURE_DATA_VIDEO_DECODER_HISTOGRAMView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get DecoderDesc(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(0, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x08: u32
  get Components(): number {
    return this.view.getUint32(8, true);
  }

  // 0x0c: u32
  get BinCount(): number {
    return this.view.getUint32(12, true);
  }

  // 0x10: u32
  get CounterBitDepth(): number {
    return this.view.getUint32(16, true);
  }

  // 0x14: pad4

  // 0x00: pointer
  set DecoderDesc(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(0, util.toBigInt(util.toPointer(value)), true);
  }

  // 0x08: u32
  set Components(value: number) {
    this.view.setUint32(8, value, true);
  }

  // 0x0c: u32
  set BinCount(value: number) {
    this.view.setUint32(12, value, true);
  }

  // 0x10: u32
  set CounterBitDepth(value: number) {
    this.view.setUint32(16, value, true);
  }

  // 0x14: pad4
}

/**
 * Windows.Win32.Graphics.Direct3D11.D3D11_VIDEO_DECODER_BUFFER_DESC2 (size: 56)
 */
export interface D3D11_VIDEO_DECODER_BUFFER_DESC2 {
  /** Windows.Win32.Graphics.Direct3D11.D3D11_VIDEO_DECODER_BUFFER_TYPE */
  BufferType: D3D11_VIDEO_DECODER_BUFFER_TYPE;
  /** u32 */
  DataOffset: number;
  /** u32 */
  DataSize: number;
  /** ptr */
  pIV: Deno.PointerValue | Uint8Array | null;
  /** u32 */
  IVSize: number;
  /** ptr */
  pSubSampleMappingBlock: Deno.PointerValue | Uint8Array | null;
  /** u32 */
  SubSampleMappingCount: number;
  /** u32 */
  cBlocksStripeEncrypted: number;
  /** u32 */
  cBlocksStripeClear: number;
}

export const sizeofD3D11_VIDEO_DECODER_BUFFER_DESC2 = 56;

export function allocD3D11_VIDEO_DECODER_BUFFER_DESC2(data?: Partial<D3D11_VIDEO_DECODER_BUFFER_DESC2>): Uint8Array {
  const buf = new Uint8Array(sizeofD3D11_VIDEO_DECODER_BUFFER_DESC2);
  const view = new DataView(buf.buffer);
  // 0x00: i32
  if (data?.BufferType !== undefined) view.setInt32(0, Number(data.BufferType), true);
  // 0x04: u32
  if (data?.DataOffset !== undefined) view.setUint32(4, Number(data.DataOffset), true);
  // 0x08: u32
  if (data?.DataSize !== undefined) view.setUint32(8, Number(data.DataSize), true);
  // 0x0c: pad4
  // 0x10: pointer
  if (data?.pIV !== undefined) view.setBigUint64(16, data.pIV === null ? 0n : util.toBigInt(util.toPointer(data.pIV)), true);
  // 0x18: u32
  if (data?.IVSize !== undefined) view.setUint32(24, Number(data.IVSize), true);
  // 0x1c: pad4
  // 0x20: pointer
  if (data?.pSubSampleMappingBlock !== undefined) view.setBigUint64(32, data.pSubSampleMappingBlock === null ? 0n : util.toBigInt(util.toPointer(data.pSubSampleMappingBlock)), true);
  // 0x28: u32
  if (data?.SubSampleMappingCount !== undefined) view.setUint32(40, Number(data.SubSampleMappingCount), true);
  // 0x2c: u32
  if (data?.cBlocksStripeEncrypted !== undefined) view.setUint32(44, Number(data.cBlocksStripeEncrypted), true);
  // 0x30: u32
  if (data?.cBlocksStripeClear !== undefined) view.setUint32(48, Number(data.cBlocksStripeClear), true);
  // 0x34: pad4
  return buf;
}

export class D3D11_VIDEO_DECODER_BUFFER_DESC2View {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: i32
  get BufferType(): number {
    return this.view.getInt32(0, true);
  }

  // 0x04: u32
  get DataOffset(): number {
    return this.view.getUint32(4, true);
  }

  // 0x08: u32
  get DataSize(): number {
    return this.view.getUint32(8, true);
  }

  // 0x0c: pad4

  // 0x10: pointer
  get pIV(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(16, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x18: u32
  get IVSize(): number {
    return this.view.getUint32(24, true);
  }

  // 0x1c: pad4

  // 0x20: pointer
  get pSubSampleMappingBlock(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(32, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x28: u32
  get SubSampleMappingCount(): number {
    return this.view.getUint32(40, true);
  }

  // 0x2c: u32
  get cBlocksStripeEncrypted(): number {
    return this.view.getUint32(44, true);
  }

  // 0x30: u32
  get cBlocksStripeClear(): number {
    return this.view.getUint32(48, true);
  }

  // 0x34: pad4

  // 0x00: i32
  set BufferType(value: number) {
    this.view.setInt32(0, value, true);
  }

  // 0x04: u32
  set DataOffset(value: number) {
    this.view.setUint32(4, value, true);
  }

  // 0x08: u32
  set DataSize(value: number) {
    this.view.setUint32(8, value, true);
  }

  // 0x0c: pad4

  // 0x10: pointer
  set pIV(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(16, util.toBigInt(util.toPointer(value)), true);
  }

  // 0x18: u32
  set IVSize(value: number) {
    this.view.setUint32(24, value, true);
  }

  // 0x1c: pad4

  // 0x20: pointer
  set pSubSampleMappingBlock(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(32, util.toBigInt(util.toPointer(value)), true);
  }

  // 0x28: u32
  set SubSampleMappingCount(value: number) {
    this.view.setUint32(40, value, true);
  }

  // 0x2c: u32
  set cBlocksStripeEncrypted(value: number) {
    this.view.setUint32(44, value, true);
  }

  // 0x30: u32
  set cBlocksStripeClear(value: number) {
    this.view.setUint32(48, value, true);
  }

  // 0x34: pad4
}

/**
 * Windows.Win32.Graphics.Direct3D11.D3D11_FEATURE_DATA_D3D11_OPTIONS4 (size: 8)
 */
export interface D3D11_FEATURE_DATA_D3D11_OPTIONS4 {
  /** Windows.Win32.Foundation.BOOL */
  ExtendedNV12SharedTextureSupported: boolean;
}

export const sizeofD3D11_FEATURE_DATA_D3D11_OPTIONS4 = 8;

export function allocD3D11_FEATURE_DATA_D3D11_OPTIONS4(data?: Partial<D3D11_FEATURE_DATA_D3D11_OPTIONS4>): Uint8Array {
  const buf = new Uint8Array(sizeofD3D11_FEATURE_DATA_D3D11_OPTIONS4);
  const view = new DataView(buf.buffer);
  // 0x00: i32
  if (data?.ExtendedNV12SharedTextureSupported !== undefined) view.setInt32(0, Number(data.ExtendedNV12SharedTextureSupported), true);
  // 0x04: pad4
  return buf;
}

export class D3D11_FEATURE_DATA_D3D11_OPTIONS4View {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: i32
  get ExtendedNV12SharedTextureSupported(): number {
    return this.view.getInt32(0, true);
  }

  // 0x04: pad4

  // 0x00: i32
  set ExtendedNV12SharedTextureSupported(value: number) {
    this.view.setInt32(0, value, true);
  }

  // 0x04: pad4
}

/**
 * Windows.Win32.Graphics.Direct3D11.D3D11_SIGNATURE_PARAMETER_DESC (size: 40)
 */
export interface D3D11_SIGNATURE_PARAMETER_DESC {
  /** Windows.Win32.Foundation.PSTR */
  SemanticName: string | null | Uint8Array;
  /** u32 */
  SemanticIndex: number;
  /** u32 */
  Register: number;
  /** Windows.Win32.Graphics.Direct3D.D3D_NAME */
  SystemValueType: D3D_NAME;
  /** Windows.Win32.Graphics.Direct3D.D3D_REGISTER_COMPONENT_TYPE */
  ComponentType: D3D_REGISTER_COMPONENT_TYPE;
  /** u8 */
  Mask: number;
  /** u8 */
  ReadWriteMask: number;
  /** u32 */
  Stream: number;
  /** Windows.Win32.Graphics.Direct3D.D3D_MIN_PRECISION */
  MinPrecision: D3D_MIN_PRECISION;
}

export const sizeofD3D11_SIGNATURE_PARAMETER_DESC = 40;

export function allocD3D11_SIGNATURE_PARAMETER_DESC(data?: Partial<D3D11_SIGNATURE_PARAMETER_DESC>): Uint8Array {
  const buf = new Uint8Array(sizeofD3D11_SIGNATURE_PARAMETER_DESC);
  const view = new DataView(buf.buffer);
  // 0x00: buffer
  if (data?.SemanticName !== undefined) {
    (buf as any)._f0 = util.pstrToFfi(data.SemanticName);
    view.setBigUint64(0, (buf as any)._f0 === null ? 0n : util.toBigInt(Deno.UnsafePointer.of((buf as any)._f0)), true);
  }
  // 0x08: u32
  if (data?.SemanticIndex !== undefined) view.setUint32(8, Number(data.SemanticIndex), true);
  // 0x0c: u32
  if (data?.Register !== undefined) view.setUint32(12, Number(data.Register), true);
  // 0x10: i32
  if (data?.SystemValueType !== undefined) view.setInt32(16, Number(data.SystemValueType), true);
  // 0x14: i32
  if (data?.ComponentType !== undefined) view.setInt32(20, Number(data.ComponentType), true);
  // 0x18: u8
  if (data?.Mask !== undefined) view.setUint8(24, Number(data.Mask));
  // 0x19: u8
  if (data?.ReadWriteMask !== undefined) view.setUint8(25, Number(data.ReadWriteMask));
  // 0x1a: u32
  if (data?.Stream !== undefined) view.setUint32(26, Number(data.Stream), true);
  // 0x1e: i32
  if (data?.MinPrecision !== undefined) view.setInt32(30, Number(data.MinPrecision), true);
  // 0x22: pad6
  return buf;
}

export class D3D11_SIGNATURE_PARAMETER_DESCView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: buffer
  get SemanticName(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(0, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x08: u32
  get SemanticIndex(): number {
    return this.view.getUint32(8, true);
  }

  // 0x0c: u32
  get Register(): number {
    return this.view.getUint32(12, true);
  }

  // 0x10: i32
  get SystemValueType(): number {
    return this.view.getInt32(16, true);
  }

  // 0x14: i32
  get ComponentType(): number {
    return this.view.getInt32(20, true);
  }

  // 0x18: u8
  get Mask(): number {
    return this.view.getUint8(24);
  }

  // 0x19: u8
  get ReadWriteMask(): number {
    return this.view.getUint8(25);
  }

  // 0x1a: u32
  get Stream(): number {
    return this.view.getUint32(26, true);
  }

  // 0x1e: i32
  get MinPrecision(): number {
    return this.view.getInt32(30, true);
  }

  // 0x22: pad6

  // 0x00: buffer
  set SemanticName(value: Uint8Array | Deno.PointerValue | null) {
    (this.buf as any)._f0 = value;
    this.view.setBigUint64(0, util.toBigInt(util.toPointer((this.buf as any)._f0)), true);
  }

  // 0x08: u32
  set SemanticIndex(value: number) {
    this.view.setUint32(8, value, true);
  }

  // 0x0c: u32
  set Register(value: number) {
    this.view.setUint32(12, value, true);
  }

  // 0x10: i32
  set SystemValueType(value: number) {
    this.view.setInt32(16, value, true);
  }

  // 0x14: i32
  set ComponentType(value: number) {
    this.view.setInt32(20, value, true);
  }

  // 0x18: u8
  set Mask(value: number) {
    this.view.setUint8(24, value);
  }

  // 0x19: u8
  set ReadWriteMask(value: number) {
    this.view.setUint8(25, value);
  }

  // 0x1a: u32
  set Stream(value: number) {
    this.view.setUint32(26, value, true);
  }

  // 0x1e: i32
  set MinPrecision(value: number) {
    this.view.setInt32(30, value, true);
  }

  // 0x22: pad6
}

/**
 * Windows.Win32.Graphics.Direct3D11.D3D11_SHADER_BUFFER_DESC (size: 24)
 */
export interface D3D11_SHADER_BUFFER_DESC {
  /** Windows.Win32.Foundation.PSTR */
  Name: string | null | Uint8Array;
  /** Windows.Win32.Graphics.Direct3D.D3D_CBUFFER_TYPE */
  Type: D3D_CBUFFER_TYPE;
  /** u32 */
  Variables: number;
  /** u32 */
  Size: number;
  /** u32 */
  uFlags: number;
}

export const sizeofD3D11_SHADER_BUFFER_DESC = 24;

export function allocD3D11_SHADER_BUFFER_DESC(data?: Partial<D3D11_SHADER_BUFFER_DESC>): Uint8Array {
  const buf = new Uint8Array(sizeofD3D11_SHADER_BUFFER_DESC);
  const view = new DataView(buf.buffer);
  // 0x00: buffer
  if (data?.Name !== undefined) {
    (buf as any)._f0 = util.pstrToFfi(data.Name);
    view.setBigUint64(0, (buf as any)._f0 === null ? 0n : util.toBigInt(Deno.UnsafePointer.of((buf as any)._f0)), true);
  }
  // 0x08: i32
  if (data?.Type !== undefined) view.setInt32(8, Number(data.Type), true);
  // 0x0c: u32
  if (data?.Variables !== undefined) view.setUint32(12, Number(data.Variables), true);
  // 0x10: u32
  if (data?.Size !== undefined) view.setUint32(16, Number(data.Size), true);
  // 0x14: u32
  if (data?.uFlags !== undefined) view.setUint32(20, Number(data.uFlags), true);
  return buf;
}

export class D3D11_SHADER_BUFFER_DESCView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: buffer
  get Name(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(0, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x08: i32
  get Type(): number {
    return this.view.getInt32(8, true);
  }

  // 0x0c: u32
  get Variables(): number {
    return this.view.getUint32(12, true);
  }

  // 0x10: u32
  get Size(): number {
    return this.view.getUint32(16, true);
  }

  // 0x14: u32
  get uFlags(): number {
    return this.view.getUint32(20, true);
  }

  // 0x00: buffer
  set Name(value: Uint8Array | Deno.PointerValue | null) {
    (this.buf as any)._f0 = value;
    this.view.setBigUint64(0, util.toBigInt(util.toPointer((this.buf as any)._f0)), true);
  }

  // 0x08: i32
  set Type(value: number) {
    this.view.setInt32(8, value, true);
  }

  // 0x0c: u32
  set Variables(value: number) {
    this.view.setUint32(12, value, true);
  }

  // 0x10: u32
  set Size(value: number) {
    this.view.setUint32(16, value, true);
  }

  // 0x14: u32
  set uFlags(value: number) {
    this.view.setUint32(20, value, true);
  }
}

/**
 * Windows.Win32.Graphics.Direct3D11.D3D11_SHADER_VARIABLE_DESC (size: 48)
 */
export interface D3D11_SHADER_VARIABLE_DESC {
  /** Windows.Win32.Foundation.PSTR */
  Name: string | null | Uint8Array;
  /** u32 */
  StartOffset: number;
  /** u32 */
  Size: number;
  /** u32 */
  uFlags: number;
  /** ptr */
  DefaultValue: Deno.PointerValue | Uint8Array | null;
  /** u32 */
  StartTexture: number;
  /** u32 */
  TextureSize: number;
  /** u32 */
  StartSampler: number;
  /** u32 */
  SamplerSize: number;
}

export const sizeofD3D11_SHADER_VARIABLE_DESC = 48;

export function allocD3D11_SHADER_VARIABLE_DESC(data?: Partial<D3D11_SHADER_VARIABLE_DESC>): Uint8Array {
  const buf = new Uint8Array(sizeofD3D11_SHADER_VARIABLE_DESC);
  const view = new DataView(buf.buffer);
  // 0x00: buffer
  if (data?.Name !== undefined) {
    (buf as any)._f0 = util.pstrToFfi(data.Name);
    view.setBigUint64(0, (buf as any)._f0 === null ? 0n : util.toBigInt(Deno.UnsafePointer.of((buf as any)._f0)), true);
  }
  // 0x08: u32
  if (data?.StartOffset !== undefined) view.setUint32(8, Number(data.StartOffset), true);
  // 0x0c: u32
  if (data?.Size !== undefined) view.setUint32(12, Number(data.Size), true);
  // 0x10: u32
  if (data?.uFlags !== undefined) view.setUint32(16, Number(data.uFlags), true);
  // 0x14: pad4
  // 0x18: pointer
  if (data?.DefaultValue !== undefined) view.setBigUint64(24, data.DefaultValue === null ? 0n : util.toBigInt(util.toPointer(data.DefaultValue)), true);
  // 0x20: u32
  if (data?.StartTexture !== undefined) view.setUint32(32, Number(data.StartTexture), true);
  // 0x24: u32
  if (data?.TextureSize !== undefined) view.setUint32(36, Number(data.TextureSize), true);
  // 0x28: u32
  if (data?.StartSampler !== undefined) view.setUint32(40, Number(data.StartSampler), true);
  // 0x2c: u32
  if (data?.SamplerSize !== undefined) view.setUint32(44, Number(data.SamplerSize), true);
  return buf;
}

export class D3D11_SHADER_VARIABLE_DESCView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: buffer
  get Name(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(0, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x08: u32
  get StartOffset(): number {
    return this.view.getUint32(8, true);
  }

  // 0x0c: u32
  get Size(): number {
    return this.view.getUint32(12, true);
  }

  // 0x10: u32
  get uFlags(): number {
    return this.view.getUint32(16, true);
  }

  // 0x14: pad4

  // 0x18: pointer
  get DefaultValue(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(24, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x20: u32
  get StartTexture(): number {
    return this.view.getUint32(32, true);
  }

  // 0x24: u32
  get TextureSize(): number {
    return this.view.getUint32(36, true);
  }

  // 0x28: u32
  get StartSampler(): number {
    return this.view.getUint32(40, true);
  }

  // 0x2c: u32
  get SamplerSize(): number {
    return this.view.getUint32(44, true);
  }

  // 0x00: buffer
  set Name(value: Uint8Array | Deno.PointerValue | null) {
    (this.buf as any)._f0 = value;
    this.view.setBigUint64(0, util.toBigInt(util.toPointer((this.buf as any)._f0)), true);
  }

  // 0x08: u32
  set StartOffset(value: number) {
    this.view.setUint32(8, value, true);
  }

  // 0x0c: u32
  set Size(value: number) {
    this.view.setUint32(12, value, true);
  }

  // 0x10: u32
  set uFlags(value: number) {
    this.view.setUint32(16, value, true);
  }

  // 0x14: pad4

  // 0x18: pointer
  set DefaultValue(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(24, util.toBigInt(util.toPointer(value)), true);
  }

  // 0x20: u32
  set StartTexture(value: number) {
    this.view.setUint32(32, value, true);
  }

  // 0x24: u32
  set TextureSize(value: number) {
    this.view.setUint32(36, value, true);
  }

  // 0x28: u32
  set StartSampler(value: number) {
    this.view.setUint32(40, value, true);
  }

  // 0x2c: u32
  set SamplerSize(value: number) {
    this.view.setUint32(44, value, true);
  }
}

/**
 * Windows.Win32.Graphics.Direct3D11.D3D11_SHADER_TYPE_DESC (size: 40)
 */
export interface D3D11_SHADER_TYPE_DESC {
  /** Windows.Win32.Graphics.Direct3D.D3D_SHADER_VARIABLE_CLASS */
  Class: D3D_SHADER_VARIABLE_CLASS;
  /** Windows.Win32.Graphics.Direct3D.D3D_SHADER_VARIABLE_TYPE */
  Type: D3D_SHADER_VARIABLE_TYPE;
  /** u32 */
  Rows: number;
  /** u32 */
  Columns: number;
  /** u32 */
  Elements: number;
  /** u32 */
  Members: number;
  /** u32 */
  Offset: number;
  /** Windows.Win32.Foundation.PSTR */
  Name: string | null | Uint8Array;
}

export const sizeofD3D11_SHADER_TYPE_DESC = 40;

export function allocD3D11_SHADER_TYPE_DESC(data?: Partial<D3D11_SHADER_TYPE_DESC>): Uint8Array {
  const buf = new Uint8Array(sizeofD3D11_SHADER_TYPE_DESC);
  const view = new DataView(buf.buffer);
  // 0x00: i32
  if (data?.Class !== undefined) view.setInt32(0, Number(data.Class), true);
  // 0x04: i32
  if (data?.Type !== undefined) view.setInt32(4, Number(data.Type), true);
  // 0x08: u32
  if (data?.Rows !== undefined) view.setUint32(8, Number(data.Rows), true);
  // 0x0c: u32
  if (data?.Columns !== undefined) view.setUint32(12, Number(data.Columns), true);
  // 0x10: u32
  if (data?.Elements !== undefined) view.setUint32(16, Number(data.Elements), true);
  // 0x14: u32
  if (data?.Members !== undefined) view.setUint32(20, Number(data.Members), true);
  // 0x18: u32
  if (data?.Offset !== undefined) view.setUint32(24, Number(data.Offset), true);
  // 0x1c: pad4
  // 0x20: buffer
  if (data?.Name !== undefined) {
    (buf as any)._f32 = util.pstrToFfi(data.Name);
    view.setBigUint64(32, (buf as any)._f32 === null ? 0n : util.toBigInt(Deno.UnsafePointer.of((buf as any)._f32)), true);
  }
  return buf;
}

export class D3D11_SHADER_TYPE_DESCView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: i32
  get Class(): number {
    return this.view.getInt32(0, true);
  }

  // 0x04: i32
  get Type(): number {
    return this.view.getInt32(4, true);
  }

  // 0x08: u32
  get Rows(): number {
    return this.view.getUint32(8, true);
  }

  // 0x0c: u32
  get Columns(): number {
    return this.view.getUint32(12, true);
  }

  // 0x10: u32
  get Elements(): number {
    return this.view.getUint32(16, true);
  }

  // 0x14: u32
  get Members(): number {
    return this.view.getUint32(20, true);
  }

  // 0x18: u32
  get Offset(): number {
    return this.view.getUint32(24, true);
  }

  // 0x1c: pad4

  // 0x20: buffer
  get Name(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(32, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: i32
  set Class(value: number) {
    this.view.setInt32(0, value, true);
  }

  // 0x04: i32
  set Type(value: number) {
    this.view.setInt32(4, value, true);
  }

  // 0x08: u32
  set Rows(value: number) {
    this.view.setUint32(8, value, true);
  }

  // 0x0c: u32
  set Columns(value: number) {
    this.view.setUint32(12, value, true);
  }

  // 0x10: u32
  set Elements(value: number) {
    this.view.setUint32(16, value, true);
  }

  // 0x14: u32
  set Members(value: number) {
    this.view.setUint32(20, value, true);
  }

  // 0x18: u32
  set Offset(value: number) {
    this.view.setUint32(24, value, true);
  }

  // 0x1c: pad4

  // 0x20: buffer
  set Name(value: Uint8Array | Deno.PointerValue | null) {
    (this.buf as any)._f32 = value;
    this.view.setBigUint64(32, util.toBigInt(util.toPointer((this.buf as any)._f32)), true);
  }
}

/**
 * Windows.Win32.Graphics.Direct3D11.D3D11_SHADER_DESC (size: 160)
 */
export interface D3D11_SHADER_DESC {
  /** u32 */
  Version: number;
  /** Windows.Win32.Foundation.PSTR */
  Creator: string | null | Uint8Array;
  /** u32 */
  Flags: number;
  /** u32 */
  ConstantBuffers: number;
  /** u32 */
  BoundResources: number;
  /** u32 */
  InputParameters: number;
  /** u32 */
  OutputParameters: number;
  /** u32 */
  InstructionCount: number;
  /** u32 */
  TempRegisterCount: number;
  /** u32 */
  TempArrayCount: number;
  /** u32 */
  DefCount: number;
  /** u32 */
  DclCount: number;
  /** u32 */
  TextureNormalInstructions: number;
  /** u32 */
  TextureLoadInstructions: number;
  /** u32 */
  TextureCompInstructions: number;
  /** u32 */
  TextureBiasInstructions: number;
  /** u32 */
  TextureGradientInstructions: number;
  /** u32 */
  FloatInstructionCount: number;
  /** u32 */
  IntInstructionCount: number;
  /** u32 */
  UintInstructionCount: number;
  /** u32 */
  StaticFlowControlCount: number;
  /** u32 */
  DynamicFlowControlCount: number;
  /** u32 */
  MacroInstructionCount: number;
  /** u32 */
  ArrayInstructionCount: number;
  /** u32 */
  CutInstructionCount: number;
  /** u32 */
  EmitInstructionCount: number;
  /** Windows.Win32.Graphics.Direct3D.D3D_PRIMITIVE_TOPOLOGY */
  GSOutputTopology: D3D_PRIMITIVE_TOPOLOGY;
  /** u32 */
  GSMaxOutputVertexCount: number;
  /** Windows.Win32.Graphics.Direct3D.D3D_PRIMITIVE */
  InputPrimitive: D3D_PRIMITIVE;
  /** u32 */
  PatchConstantParameters: number;
  /** u32 */
  cGSInstanceCount: number;
  /** u32 */
  cControlPoints: number;
  /** Windows.Win32.Graphics.Direct3D.D3D_TESSELLATOR_OUTPUT_PRIMITIVE */
  HSOutputPrimitive: D3D_TESSELLATOR_OUTPUT_PRIMITIVE;
  /** Windows.Win32.Graphics.Direct3D.D3D_TESSELLATOR_PARTITIONING */
  HSPartitioning: D3D_TESSELLATOR_PARTITIONING;
  /** Windows.Win32.Graphics.Direct3D.D3D_TESSELLATOR_DOMAIN */
  TessellatorDomain: D3D_TESSELLATOR_DOMAIN;
  /** u32 */
  cBarrierInstructions: number;
  /** u32 */
  cInterlockedInstructions: number;
  /** u32 */
  cTextureStoreInstructions: number;
}

export const sizeofD3D11_SHADER_DESC = 160;

export function allocD3D11_SHADER_DESC(data?: Partial<D3D11_SHADER_DESC>): Uint8Array {
  const buf = new Uint8Array(sizeofD3D11_SHADER_DESC);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.Version !== undefined) view.setUint32(0, Number(data.Version), true);
  // 0x04: pad4
  // 0x08: buffer
  if (data?.Creator !== undefined) {
    (buf as any)._f8 = util.pstrToFfi(data.Creator);
    view.setBigUint64(8, (buf as any)._f8 === null ? 0n : util.toBigInt(Deno.UnsafePointer.of((buf as any)._f8)), true);
  }
  // 0x10: u32
  if (data?.Flags !== undefined) view.setUint32(16, Number(data.Flags), true);
  // 0x14: u32
  if (data?.ConstantBuffers !== undefined) view.setUint32(20, Number(data.ConstantBuffers), true);
  // 0x18: u32
  if (data?.BoundResources !== undefined) view.setUint32(24, Number(data.BoundResources), true);
  // 0x1c: u32
  if (data?.InputParameters !== undefined) view.setUint32(28, Number(data.InputParameters), true);
  // 0x20: u32
  if (data?.OutputParameters !== undefined) view.setUint32(32, Number(data.OutputParameters), true);
  // 0x24: u32
  if (data?.InstructionCount !== undefined) view.setUint32(36, Number(data.InstructionCount), true);
  // 0x28: u32
  if (data?.TempRegisterCount !== undefined) view.setUint32(40, Number(data.TempRegisterCount), true);
  // 0x2c: u32
  if (data?.TempArrayCount !== undefined) view.setUint32(44, Number(data.TempArrayCount), true);
  // 0x30: u32
  if (data?.DefCount !== undefined) view.setUint32(48, Number(data.DefCount), true);
  // 0x34: u32
  if (data?.DclCount !== undefined) view.setUint32(52, Number(data.DclCount), true);
  // 0x38: u32
  if (data?.TextureNormalInstructions !== undefined) view.setUint32(56, Number(data.TextureNormalInstructions), true);
  // 0x3c: u32
  if (data?.TextureLoadInstructions !== undefined) view.setUint32(60, Number(data.TextureLoadInstructions), true);
  // 0x40: u32
  if (data?.TextureCompInstructions !== undefined) view.setUint32(64, Number(data.TextureCompInstructions), true);
  // 0x44: u32
  if (data?.TextureBiasInstructions !== undefined) view.setUint32(68, Number(data.TextureBiasInstructions), true);
  // 0x48: u32
  if (data?.TextureGradientInstructions !== undefined) view.setUint32(72, Number(data.TextureGradientInstructions), true);
  // 0x4c: u32
  if (data?.FloatInstructionCount !== undefined) view.setUint32(76, Number(data.FloatInstructionCount), true);
  // 0x50: u32
  if (data?.IntInstructionCount !== undefined) view.setUint32(80, Number(data.IntInstructionCount), true);
  // 0x54: u32
  if (data?.UintInstructionCount !== undefined) view.setUint32(84, Number(data.UintInstructionCount), true);
  // 0x58: u32
  if (data?.StaticFlowControlCount !== undefined) view.setUint32(88, Number(data.StaticFlowControlCount), true);
  // 0x5c: u32
  if (data?.DynamicFlowControlCount !== undefined) view.setUint32(92, Number(data.DynamicFlowControlCount), true);
  // 0x60: u32
  if (data?.MacroInstructionCount !== undefined) view.setUint32(96, Number(data.MacroInstructionCount), true);
  // 0x64: u32
  if (data?.ArrayInstructionCount !== undefined) view.setUint32(100, Number(data.ArrayInstructionCount), true);
  // 0x68: u32
  if (data?.CutInstructionCount !== undefined) view.setUint32(104, Number(data.CutInstructionCount), true);
  // 0x6c: u32
  if (data?.EmitInstructionCount !== undefined) view.setUint32(108, Number(data.EmitInstructionCount), true);
  // 0x70: i32
  if (data?.GSOutputTopology !== undefined) view.setInt32(112, Number(data.GSOutputTopology), true);
  // 0x74: u32
  if (data?.GSMaxOutputVertexCount !== undefined) view.setUint32(116, Number(data.GSMaxOutputVertexCount), true);
  // 0x78: i32
  if (data?.InputPrimitive !== undefined) view.setInt32(120, Number(data.InputPrimitive), true);
  // 0x7c: u32
  if (data?.PatchConstantParameters !== undefined) view.setUint32(124, Number(data.PatchConstantParameters), true);
  // 0x80: u32
  if (data?.cGSInstanceCount !== undefined) view.setUint32(128, Number(data.cGSInstanceCount), true);
  // 0x84: u32
  if (data?.cControlPoints !== undefined) view.setUint32(132, Number(data.cControlPoints), true);
  // 0x88: i32
  if (data?.HSOutputPrimitive !== undefined) view.setInt32(136, Number(data.HSOutputPrimitive), true);
  // 0x8c: i32
  if (data?.HSPartitioning !== undefined) view.setInt32(140, Number(data.HSPartitioning), true);
  // 0x90: i32
  if (data?.TessellatorDomain !== undefined) view.setInt32(144, Number(data.TessellatorDomain), true);
  // 0x94: u32
  if (data?.cBarrierInstructions !== undefined) view.setUint32(148, Number(data.cBarrierInstructions), true);
  // 0x98: u32
  if (data?.cInterlockedInstructions !== undefined) view.setUint32(152, Number(data.cInterlockedInstructions), true);
  // 0x9c: u32
  if (data?.cTextureStoreInstructions !== undefined) view.setUint32(156, Number(data.cTextureStoreInstructions), true);
  return buf;
}

export class D3D11_SHADER_DESCView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get Version(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: pad4

  // 0x08: buffer
  get Creator(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(8, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x10: u32
  get Flags(): number {
    return this.view.getUint32(16, true);
  }

  // 0x14: u32
  get ConstantBuffers(): number {
    return this.view.getUint32(20, true);
  }

  // 0x18: u32
  get BoundResources(): number {
    return this.view.getUint32(24, true);
  }

  // 0x1c: u32
  get InputParameters(): number {
    return this.view.getUint32(28, true);
  }

  // 0x20: u32
  get OutputParameters(): number {
    return this.view.getUint32(32, true);
  }

  // 0x24: u32
  get InstructionCount(): number {
    return this.view.getUint32(36, true);
  }

  // 0x28: u32
  get TempRegisterCount(): number {
    return this.view.getUint32(40, true);
  }

  // 0x2c: u32
  get TempArrayCount(): number {
    return this.view.getUint32(44, true);
  }

  // 0x30: u32
  get DefCount(): number {
    return this.view.getUint32(48, true);
  }

  // 0x34: u32
  get DclCount(): number {
    return this.view.getUint32(52, true);
  }

  // 0x38: u32
  get TextureNormalInstructions(): number {
    return this.view.getUint32(56, true);
  }

  // 0x3c: u32
  get TextureLoadInstructions(): number {
    return this.view.getUint32(60, true);
  }

  // 0x40: u32
  get TextureCompInstructions(): number {
    return this.view.getUint32(64, true);
  }

  // 0x44: u32
  get TextureBiasInstructions(): number {
    return this.view.getUint32(68, true);
  }

  // 0x48: u32
  get TextureGradientInstructions(): number {
    return this.view.getUint32(72, true);
  }

  // 0x4c: u32
  get FloatInstructionCount(): number {
    return this.view.getUint32(76, true);
  }

  // 0x50: u32
  get IntInstructionCount(): number {
    return this.view.getUint32(80, true);
  }

  // 0x54: u32
  get UintInstructionCount(): number {
    return this.view.getUint32(84, true);
  }

  // 0x58: u32
  get StaticFlowControlCount(): number {
    return this.view.getUint32(88, true);
  }

  // 0x5c: u32
  get DynamicFlowControlCount(): number {
    return this.view.getUint32(92, true);
  }

  // 0x60: u32
  get MacroInstructionCount(): number {
    return this.view.getUint32(96, true);
  }

  // 0x64: u32
  get ArrayInstructionCount(): number {
    return this.view.getUint32(100, true);
  }

  // 0x68: u32
  get CutInstructionCount(): number {
    return this.view.getUint32(104, true);
  }

  // 0x6c: u32
  get EmitInstructionCount(): number {
    return this.view.getUint32(108, true);
  }

  // 0x70: i32
  get GSOutputTopology(): number {
    return this.view.getInt32(112, true);
  }

  // 0x74: u32
  get GSMaxOutputVertexCount(): number {
    return this.view.getUint32(116, true);
  }

  // 0x78: i32
  get InputPrimitive(): number {
    return this.view.getInt32(120, true);
  }

  // 0x7c: u32
  get PatchConstantParameters(): number {
    return this.view.getUint32(124, true);
  }

  // 0x80: u32
  get cGSInstanceCount(): number {
    return this.view.getUint32(128, true);
  }

  // 0x84: u32
  get cControlPoints(): number {
    return this.view.getUint32(132, true);
  }

  // 0x88: i32
  get HSOutputPrimitive(): number {
    return this.view.getInt32(136, true);
  }

  // 0x8c: i32
  get HSPartitioning(): number {
    return this.view.getInt32(140, true);
  }

  // 0x90: i32
  get TessellatorDomain(): number {
    return this.view.getInt32(144, true);
  }

  // 0x94: u32
  get cBarrierInstructions(): number {
    return this.view.getUint32(148, true);
  }

  // 0x98: u32
  get cInterlockedInstructions(): number {
    return this.view.getUint32(152, true);
  }

  // 0x9c: u32
  get cTextureStoreInstructions(): number {
    return this.view.getUint32(156, true);
  }

  // 0x00: u32
  set Version(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: pad4

  // 0x08: buffer
  set Creator(value: Uint8Array | Deno.PointerValue | null) {
    (this.buf as any)._f8 = value;
    this.view.setBigUint64(8, util.toBigInt(util.toPointer((this.buf as any)._f8)), true);
  }

  // 0x10: u32
  set Flags(value: number) {
    this.view.setUint32(16, value, true);
  }

  // 0x14: u32
  set ConstantBuffers(value: number) {
    this.view.setUint32(20, value, true);
  }

  // 0x18: u32
  set BoundResources(value: number) {
    this.view.setUint32(24, value, true);
  }

  // 0x1c: u32
  set InputParameters(value: number) {
    this.view.setUint32(28, value, true);
  }

  // 0x20: u32
  set OutputParameters(value: number) {
    this.view.setUint32(32, value, true);
  }

  // 0x24: u32
  set InstructionCount(value: number) {
    this.view.setUint32(36, value, true);
  }

  // 0x28: u32
  set TempRegisterCount(value: number) {
    this.view.setUint32(40, value, true);
  }

  // 0x2c: u32
  set TempArrayCount(value: number) {
    this.view.setUint32(44, value, true);
  }

  // 0x30: u32
  set DefCount(value: number) {
    this.view.setUint32(48, value, true);
  }

  // 0x34: u32
  set DclCount(value: number) {
    this.view.setUint32(52, value, true);
  }

  // 0x38: u32
  set TextureNormalInstructions(value: number) {
    this.view.setUint32(56, value, true);
  }

  // 0x3c: u32
  set TextureLoadInstructions(value: number) {
    this.view.setUint32(60, value, true);
  }

  // 0x40: u32
  set TextureCompInstructions(value: number) {
    this.view.setUint32(64, value, true);
  }

  // 0x44: u32
  set TextureBiasInstructions(value: number) {
    this.view.setUint32(68, value, true);
  }

  // 0x48: u32
  set TextureGradientInstructions(value: number) {
    this.view.setUint32(72, value, true);
  }

  // 0x4c: u32
  set FloatInstructionCount(value: number) {
    this.view.setUint32(76, value, true);
  }

  // 0x50: u32
  set IntInstructionCount(value: number) {
    this.view.setUint32(80, value, true);
  }

  // 0x54: u32
  set UintInstructionCount(value: number) {
    this.view.setUint32(84, value, true);
  }

  // 0x58: u32
  set StaticFlowControlCount(value: number) {
    this.view.setUint32(88, value, true);
  }

  // 0x5c: u32
  set DynamicFlowControlCount(value: number) {
    this.view.setUint32(92, value, true);
  }

  // 0x60: u32
  set MacroInstructionCount(value: number) {
    this.view.setUint32(96, value, true);
  }

  // 0x64: u32
  set ArrayInstructionCount(value: number) {
    this.view.setUint32(100, value, true);
  }

  // 0x68: u32
  set CutInstructionCount(value: number) {
    this.view.setUint32(104, value, true);
  }

  // 0x6c: u32
  set EmitInstructionCount(value: number) {
    this.view.setUint32(108, value, true);
  }

  // 0x70: i32
  set GSOutputTopology(value: number) {
    this.view.setInt32(112, value, true);
  }

  // 0x74: u32
  set GSMaxOutputVertexCount(value: number) {
    this.view.setUint32(116, value, true);
  }

  // 0x78: i32
  set InputPrimitive(value: number) {
    this.view.setInt32(120, value, true);
  }

  // 0x7c: u32
  set PatchConstantParameters(value: number) {
    this.view.setUint32(124, value, true);
  }

  // 0x80: u32
  set cGSInstanceCount(value: number) {
    this.view.setUint32(128, value, true);
  }

  // 0x84: u32
  set cControlPoints(value: number) {
    this.view.setUint32(132, value, true);
  }

  // 0x88: i32
  set HSOutputPrimitive(value: number) {
    this.view.setInt32(136, value, true);
  }

  // 0x8c: i32
  set HSPartitioning(value: number) {
    this.view.setInt32(140, value, true);
  }

  // 0x90: i32
  set TessellatorDomain(value: number) {
    this.view.setInt32(144, value, true);
  }

  // 0x94: u32
  set cBarrierInstructions(value: number) {
    this.view.setUint32(148, value, true);
  }

  // 0x98: u32
  set cInterlockedInstructions(value: number) {
    this.view.setUint32(152, value, true);
  }

  // 0x9c: u32
  set cTextureStoreInstructions(value: number) {
    this.view.setUint32(156, value, true);
  }
}

/**
 * Windows.Win32.Graphics.Direct3D11.D3D11_SHADER_INPUT_BIND_DESC (size: 40)
 */
export interface D3D11_SHADER_INPUT_BIND_DESC {
  /** Windows.Win32.Foundation.PSTR */
  Name: string | null | Uint8Array;
  /** Windows.Win32.Graphics.Direct3D.D3D_SHADER_INPUT_TYPE */
  Type: D3D_SHADER_INPUT_TYPE;
  /** u32 */
  BindPoint: number;
  /** u32 */
  BindCount: number;
  /** u32 */
  uFlags: number;
  /** Windows.Win32.Graphics.Direct3D.D3D_RESOURCE_RETURN_TYPE */
  ReturnType: D3D_RESOURCE_RETURN_TYPE;
  /** Windows.Win32.Graphics.Direct3D.D3D_SRV_DIMENSION */
  Dimension: D3D_SRV_DIMENSION;
  /** u32 */
  NumSamples: number;
}

export const sizeofD3D11_SHADER_INPUT_BIND_DESC = 40;

export function allocD3D11_SHADER_INPUT_BIND_DESC(data?: Partial<D3D11_SHADER_INPUT_BIND_DESC>): Uint8Array {
  const buf = new Uint8Array(sizeofD3D11_SHADER_INPUT_BIND_DESC);
  const view = new DataView(buf.buffer);
  // 0x00: buffer
  if (data?.Name !== undefined) {
    (buf as any)._f0 = util.pstrToFfi(data.Name);
    view.setBigUint64(0, (buf as any)._f0 === null ? 0n : util.toBigInt(Deno.UnsafePointer.of((buf as any)._f0)), true);
  }
  // 0x08: i32
  if (data?.Type !== undefined) view.setInt32(8, Number(data.Type), true);
  // 0x0c: u32
  if (data?.BindPoint !== undefined) view.setUint32(12, Number(data.BindPoint), true);
  // 0x10: u32
  if (data?.BindCount !== undefined) view.setUint32(16, Number(data.BindCount), true);
  // 0x14: u32
  if (data?.uFlags !== undefined) view.setUint32(20, Number(data.uFlags), true);
  // 0x18: i32
  if (data?.ReturnType !== undefined) view.setInt32(24, Number(data.ReturnType), true);
  // 0x1c: i32
  if (data?.Dimension !== undefined) view.setInt32(28, Number(data.Dimension), true);
  // 0x20: u32
  if (data?.NumSamples !== undefined) view.setUint32(32, Number(data.NumSamples), true);
  // 0x24: pad4
  return buf;
}

export class D3D11_SHADER_INPUT_BIND_DESCView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: buffer
  get Name(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(0, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x08: i32
  get Type(): number {
    return this.view.getInt32(8, true);
  }

  // 0x0c: u32
  get BindPoint(): number {
    return this.view.getUint32(12, true);
  }

  // 0x10: u32
  get BindCount(): number {
    return this.view.getUint32(16, true);
  }

  // 0x14: u32
  get uFlags(): number {
    return this.view.getUint32(20, true);
  }

  // 0x18: i32
  get ReturnType(): number {
    return this.view.getInt32(24, true);
  }

  // 0x1c: i32
  get Dimension(): number {
    return this.view.getInt32(28, true);
  }

  // 0x20: u32
  get NumSamples(): number {
    return this.view.getUint32(32, true);
  }

  // 0x24: pad4

  // 0x00: buffer
  set Name(value: Uint8Array | Deno.PointerValue | null) {
    (this.buf as any)._f0 = value;
    this.view.setBigUint64(0, util.toBigInt(util.toPointer((this.buf as any)._f0)), true);
  }

  // 0x08: i32
  set Type(value: number) {
    this.view.setInt32(8, value, true);
  }

  // 0x0c: u32
  set BindPoint(value: number) {
    this.view.setUint32(12, value, true);
  }

  // 0x10: u32
  set BindCount(value: number) {
    this.view.setUint32(16, value, true);
  }

  // 0x14: u32
  set uFlags(value: number) {
    this.view.setUint32(20, value, true);
  }

  // 0x18: i32
  set ReturnType(value: number) {
    this.view.setInt32(24, value, true);
  }

  // 0x1c: i32
  set Dimension(value: number) {
    this.view.setInt32(28, value, true);
  }

  // 0x20: u32
  set NumSamples(value: number) {
    this.view.setUint32(32, value, true);
  }

  // 0x24: pad4
}

/**
 * Windows.Win32.Graphics.Direct3D11.D3D11_LIBRARY_DESC (size: 16)
 */
export interface D3D11_LIBRARY_DESC {
  /** Windows.Win32.Foundation.PSTR */
  Creator: string | null | Uint8Array;
  /** u32 */
  Flags: number;
  /** u32 */
  FunctionCount: number;
}

export const sizeofD3D11_LIBRARY_DESC = 16;

export function allocD3D11_LIBRARY_DESC(data?: Partial<D3D11_LIBRARY_DESC>): Uint8Array {
  const buf = new Uint8Array(sizeofD3D11_LIBRARY_DESC);
  const view = new DataView(buf.buffer);
  // 0x00: buffer
  if (data?.Creator !== undefined) {
    (buf as any)._f0 = util.pstrToFfi(data.Creator);
    view.setBigUint64(0, (buf as any)._f0 === null ? 0n : util.toBigInt(Deno.UnsafePointer.of((buf as any)._f0)), true);
  }
  // 0x08: u32
  if (data?.Flags !== undefined) view.setUint32(8, Number(data.Flags), true);
  // 0x0c: u32
  if (data?.FunctionCount !== undefined) view.setUint32(12, Number(data.FunctionCount), true);
  return buf;
}

export class D3D11_LIBRARY_DESCView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: buffer
  get Creator(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(0, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x08: u32
  get Flags(): number {
    return this.view.getUint32(8, true);
  }

  // 0x0c: u32
  get FunctionCount(): number {
    return this.view.getUint32(12, true);
  }

  // 0x00: buffer
  set Creator(value: Uint8Array | Deno.PointerValue | null) {
    (this.buf as any)._f0 = value;
    this.view.setBigUint64(0, util.toBigInt(util.toPointer((this.buf as any)._f0)), true);
  }

  // 0x08: u32
  set Flags(value: number) {
    this.view.setUint32(8, value, true);
  }

  // 0x0c: u32
  set FunctionCount(value: number) {
    this.view.setUint32(12, value, true);
  }
}

/**
 * Windows.Win32.Graphics.Direct3D11.D3D11_FUNCTION_DESC (size: 152)
 */
export interface D3D11_FUNCTION_DESC {
  /** u32 */
  Version: number;
  /** Windows.Win32.Foundation.PSTR */
  Creator: string | null | Uint8Array;
  /** u32 */
  Flags: number;
  /** u32 */
  ConstantBuffers: number;
  /** u32 */
  BoundResources: number;
  /** u32 */
  InstructionCount: number;
  /** u32 */
  TempRegisterCount: number;
  /** u32 */
  TempArrayCount: number;
  /** u32 */
  DefCount: number;
  /** u32 */
  DclCount: number;
  /** u32 */
  TextureNormalInstructions: number;
  /** u32 */
  TextureLoadInstructions: number;
  /** u32 */
  TextureCompInstructions: number;
  /** u32 */
  TextureBiasInstructions: number;
  /** u32 */
  TextureGradientInstructions: number;
  /** u32 */
  FloatInstructionCount: number;
  /** u32 */
  IntInstructionCount: number;
  /** u32 */
  UintInstructionCount: number;
  /** u32 */
  StaticFlowControlCount: number;
  /** u32 */
  DynamicFlowControlCount: number;
  /** u32 */
  MacroInstructionCount: number;
  /** u32 */
  ArrayInstructionCount: number;
  /** u32 */
  MovInstructionCount: number;
  /** u32 */
  MovcInstructionCount: number;
  /** u32 */
  ConversionInstructionCount: number;
  /** u32 */
  BitwiseInstructionCount: number;
  /** Windows.Win32.Graphics.Direct3D.D3D_FEATURE_LEVEL */
  MinFeatureLevel: D3D_FEATURE_LEVEL;
  /** u64 */
  RequiredFeatureFlags: number | bigint;
  /** Windows.Win32.Foundation.PSTR */
  Name: string | null | Uint8Array;
  /** i32 */
  FunctionParameterCount: number;
  /** Windows.Win32.Foundation.BOOL */
  HasReturn: boolean;
  /** Windows.Win32.Foundation.BOOL */
  Has10Level9VertexShader: boolean;
  /** Windows.Win32.Foundation.BOOL */
  Has10Level9PixelShader: boolean;
}

export const sizeofD3D11_FUNCTION_DESC = 152;

export function allocD3D11_FUNCTION_DESC(data?: Partial<D3D11_FUNCTION_DESC>): Uint8Array {
  const buf = new Uint8Array(sizeofD3D11_FUNCTION_DESC);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.Version !== undefined) view.setUint32(0, Number(data.Version), true);
  // 0x04: pad4
  // 0x08: buffer
  if (data?.Creator !== undefined) {
    (buf as any)._f8 = util.pstrToFfi(data.Creator);
    view.setBigUint64(8, (buf as any)._f8 === null ? 0n : util.toBigInt(Deno.UnsafePointer.of((buf as any)._f8)), true);
  }
  // 0x10: u32
  if (data?.Flags !== undefined) view.setUint32(16, Number(data.Flags), true);
  // 0x14: u32
  if (data?.ConstantBuffers !== undefined) view.setUint32(20, Number(data.ConstantBuffers), true);
  // 0x18: u32
  if (data?.BoundResources !== undefined) view.setUint32(24, Number(data.BoundResources), true);
  // 0x1c: u32
  if (data?.InstructionCount !== undefined) view.setUint32(28, Number(data.InstructionCount), true);
  // 0x20: u32
  if (data?.TempRegisterCount !== undefined) view.setUint32(32, Number(data.TempRegisterCount), true);
  // 0x24: u32
  if (data?.TempArrayCount !== undefined) view.setUint32(36, Number(data.TempArrayCount), true);
  // 0x28: u32
  if (data?.DefCount !== undefined) view.setUint32(40, Number(data.DefCount), true);
  // 0x2c: u32
  if (data?.DclCount !== undefined) view.setUint32(44, Number(data.DclCount), true);
  // 0x30: u32
  if (data?.TextureNormalInstructions !== undefined) view.setUint32(48, Number(data.TextureNormalInstructions), true);
  // 0x34: u32
  if (data?.TextureLoadInstructions !== undefined) view.setUint32(52, Number(data.TextureLoadInstructions), true);
  // 0x38: u32
  if (data?.TextureCompInstructions !== undefined) view.setUint32(56, Number(data.TextureCompInstructions), true);
  // 0x3c: u32
  if (data?.TextureBiasInstructions !== undefined) view.setUint32(60, Number(data.TextureBiasInstructions), true);
  // 0x40: u32
  if (data?.TextureGradientInstructions !== undefined) view.setUint32(64, Number(data.TextureGradientInstructions), true);
  // 0x44: u32
  if (data?.FloatInstructionCount !== undefined) view.setUint32(68, Number(data.FloatInstructionCount), true);
  // 0x48: u32
  if (data?.IntInstructionCount !== undefined) view.setUint32(72, Number(data.IntInstructionCount), true);
  // 0x4c: u32
  if (data?.UintInstructionCount !== undefined) view.setUint32(76, Number(data.UintInstructionCount), true);
  // 0x50: u32
  if (data?.StaticFlowControlCount !== undefined) view.setUint32(80, Number(data.StaticFlowControlCount), true);
  // 0x54: u32
  if (data?.DynamicFlowControlCount !== undefined) view.setUint32(84, Number(data.DynamicFlowControlCount), true);
  // 0x58: u32
  if (data?.MacroInstructionCount !== undefined) view.setUint32(88, Number(data.MacroInstructionCount), true);
  // 0x5c: u32
  if (data?.ArrayInstructionCount !== undefined) view.setUint32(92, Number(data.ArrayInstructionCount), true);
  // 0x60: u32
  if (data?.MovInstructionCount !== undefined) view.setUint32(96, Number(data.MovInstructionCount), true);
  // 0x64: u32
  if (data?.MovcInstructionCount !== undefined) view.setUint32(100, Number(data.MovcInstructionCount), true);
  // 0x68: u32
  if (data?.ConversionInstructionCount !== undefined) view.setUint32(104, Number(data.ConversionInstructionCount), true);
  // 0x6c: u32
  if (data?.BitwiseInstructionCount !== undefined) view.setUint32(108, Number(data.BitwiseInstructionCount), true);
  // 0x70: i32
  if (data?.MinFeatureLevel !== undefined) view.setInt32(112, Number(data.MinFeatureLevel), true);
  // 0x74: pad4
  // 0x78: u64
  if (data?.RequiredFeatureFlags !== undefined) view.setBigUint64(120, util.toBigInt(data.RequiredFeatureFlags), true);
  // 0x80: buffer
  if (data?.Name !== undefined) {
    (buf as any)._f128 = util.pstrToFfi(data.Name);
    view.setBigUint64(128, (buf as any)._f128 === null ? 0n : util.toBigInt(Deno.UnsafePointer.of((buf as any)._f128)), true);
  }
  // 0x88: i32
  if (data?.FunctionParameterCount !== undefined) view.setInt32(136, Number(data.FunctionParameterCount), true);
  // 0x8c: i32
  if (data?.HasReturn !== undefined) view.setInt32(140, Number(data.HasReturn), true);
  // 0x90: i32
  if (data?.Has10Level9VertexShader !== undefined) view.setInt32(144, Number(data.Has10Level9VertexShader), true);
  // 0x94: i32
  if (data?.Has10Level9PixelShader !== undefined) view.setInt32(148, Number(data.Has10Level9PixelShader), true);
  return buf;
}

export class D3D11_FUNCTION_DESCView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get Version(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: pad4

  // 0x08: buffer
  get Creator(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(8, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x10: u32
  get Flags(): number {
    return this.view.getUint32(16, true);
  }

  // 0x14: u32
  get ConstantBuffers(): number {
    return this.view.getUint32(20, true);
  }

  // 0x18: u32
  get BoundResources(): number {
    return this.view.getUint32(24, true);
  }

  // 0x1c: u32
  get InstructionCount(): number {
    return this.view.getUint32(28, true);
  }

  // 0x20: u32
  get TempRegisterCount(): number {
    return this.view.getUint32(32, true);
  }

  // 0x24: u32
  get TempArrayCount(): number {
    return this.view.getUint32(36, true);
  }

  // 0x28: u32
  get DefCount(): number {
    return this.view.getUint32(40, true);
  }

  // 0x2c: u32
  get DclCount(): number {
    return this.view.getUint32(44, true);
  }

  // 0x30: u32
  get TextureNormalInstructions(): number {
    return this.view.getUint32(48, true);
  }

  // 0x34: u32
  get TextureLoadInstructions(): number {
    return this.view.getUint32(52, true);
  }

  // 0x38: u32
  get TextureCompInstructions(): number {
    return this.view.getUint32(56, true);
  }

  // 0x3c: u32
  get TextureBiasInstructions(): number {
    return this.view.getUint32(60, true);
  }

  // 0x40: u32
  get TextureGradientInstructions(): number {
    return this.view.getUint32(64, true);
  }

  // 0x44: u32
  get FloatInstructionCount(): number {
    return this.view.getUint32(68, true);
  }

  // 0x48: u32
  get IntInstructionCount(): number {
    return this.view.getUint32(72, true);
  }

  // 0x4c: u32
  get UintInstructionCount(): number {
    return this.view.getUint32(76, true);
  }

  // 0x50: u32
  get StaticFlowControlCount(): number {
    return this.view.getUint32(80, true);
  }

  // 0x54: u32
  get DynamicFlowControlCount(): number {
    return this.view.getUint32(84, true);
  }

  // 0x58: u32
  get MacroInstructionCount(): number {
    return this.view.getUint32(88, true);
  }

  // 0x5c: u32
  get ArrayInstructionCount(): number {
    return this.view.getUint32(92, true);
  }

  // 0x60: u32
  get MovInstructionCount(): number {
    return this.view.getUint32(96, true);
  }

  // 0x64: u32
  get MovcInstructionCount(): number {
    return this.view.getUint32(100, true);
  }

  // 0x68: u32
  get ConversionInstructionCount(): number {
    return this.view.getUint32(104, true);
  }

  // 0x6c: u32
  get BitwiseInstructionCount(): number {
    return this.view.getUint32(108, true);
  }

  // 0x70: i32
  get MinFeatureLevel(): number {
    return this.view.getInt32(112, true);
  }

  // 0x74: pad4

  // 0x78: u64
  get RequiredFeatureFlags(): number | bigint {
    return this.view.getBigUint64(120, true);
  }

  // 0x80: buffer
  get Name(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(128, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x88: i32
  get FunctionParameterCount(): number {
    return this.view.getInt32(136, true);
  }

  // 0x8c: i32
  get HasReturn(): number {
    return this.view.getInt32(140, true);
  }

  // 0x90: i32
  get Has10Level9VertexShader(): number {
    return this.view.getInt32(144, true);
  }

  // 0x94: i32
  get Has10Level9PixelShader(): number {
    return this.view.getInt32(148, true);
  }

  // 0x00: u32
  set Version(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: pad4

  // 0x08: buffer
  set Creator(value: Uint8Array | Deno.PointerValue | null) {
    (this.buf as any)._f8 = value;
    this.view.setBigUint64(8, util.toBigInt(util.toPointer((this.buf as any)._f8)), true);
  }

  // 0x10: u32
  set Flags(value: number) {
    this.view.setUint32(16, value, true);
  }

  // 0x14: u32
  set ConstantBuffers(value: number) {
    this.view.setUint32(20, value, true);
  }

  // 0x18: u32
  set BoundResources(value: number) {
    this.view.setUint32(24, value, true);
  }

  // 0x1c: u32
  set InstructionCount(value: number) {
    this.view.setUint32(28, value, true);
  }

  // 0x20: u32
  set TempRegisterCount(value: number) {
    this.view.setUint32(32, value, true);
  }

  // 0x24: u32
  set TempArrayCount(value: number) {
    this.view.setUint32(36, value, true);
  }

  // 0x28: u32
  set DefCount(value: number) {
    this.view.setUint32(40, value, true);
  }

  // 0x2c: u32
  set DclCount(value: number) {
    this.view.setUint32(44, value, true);
  }

  // 0x30: u32
  set TextureNormalInstructions(value: number) {
    this.view.setUint32(48, value, true);
  }

  // 0x34: u32
  set TextureLoadInstructions(value: number) {
    this.view.setUint32(52, value, true);
  }

  // 0x38: u32
  set TextureCompInstructions(value: number) {
    this.view.setUint32(56, value, true);
  }

  // 0x3c: u32
  set TextureBiasInstructions(value: number) {
    this.view.setUint32(60, value, true);
  }

  // 0x40: u32
  set TextureGradientInstructions(value: number) {
    this.view.setUint32(64, value, true);
  }

  // 0x44: u32
  set FloatInstructionCount(value: number) {
    this.view.setUint32(68, value, true);
  }

  // 0x48: u32
  set IntInstructionCount(value: number) {
    this.view.setUint32(72, value, true);
  }

  // 0x4c: u32
  set UintInstructionCount(value: number) {
    this.view.setUint32(76, value, true);
  }

  // 0x50: u32
  set StaticFlowControlCount(value: number) {
    this.view.setUint32(80, value, true);
  }

  // 0x54: u32
  set DynamicFlowControlCount(value: number) {
    this.view.setUint32(84, value, true);
  }

  // 0x58: u32
  set MacroInstructionCount(value: number) {
    this.view.setUint32(88, value, true);
  }

  // 0x5c: u32
  set ArrayInstructionCount(value: number) {
    this.view.setUint32(92, value, true);
  }

  // 0x60: u32
  set MovInstructionCount(value: number) {
    this.view.setUint32(96, value, true);
  }

  // 0x64: u32
  set MovcInstructionCount(value: number) {
    this.view.setUint32(100, value, true);
  }

  // 0x68: u32
  set ConversionInstructionCount(value: number) {
    this.view.setUint32(104, value, true);
  }

  // 0x6c: u32
  set BitwiseInstructionCount(value: number) {
    this.view.setUint32(108, value, true);
  }

  // 0x70: i32
  set MinFeatureLevel(value: number) {
    this.view.setInt32(112, value, true);
  }

  // 0x74: pad4

  // 0x78: u64
  set RequiredFeatureFlags(value: number | bigint) {
    this.view.setBigUint64(120, util.toBigInt(value), true);
  }

  // 0x80: buffer
  set Name(value: Uint8Array | Deno.PointerValue | null) {
    (this.buf as any)._f128 = value;
    this.view.setBigUint64(128, util.toBigInt(util.toPointer((this.buf as any)._f128)), true);
  }

  // 0x88: i32
  set FunctionParameterCount(value: number) {
    this.view.setInt32(136, value, true);
  }

  // 0x8c: i32
  set HasReturn(value: number) {
    this.view.setInt32(140, value, true);
  }

  // 0x90: i32
  set Has10Level9VertexShader(value: number) {
    this.view.setInt32(144, value, true);
  }

  // 0x94: i32
  set Has10Level9PixelShader(value: number) {
    this.view.setInt32(148, value, true);
  }
}

/**
 * Windows.Win32.Graphics.Direct3D11.D3D11_PARAMETER_DESC (size: 56)
 */
export interface D3D11_PARAMETER_DESC {
  /** Windows.Win32.Foundation.PSTR */
  Name: string | null | Uint8Array;
  /** Windows.Win32.Foundation.PSTR */
  SemanticName: string | null | Uint8Array;
  /** Windows.Win32.Graphics.Direct3D.D3D_SHADER_VARIABLE_TYPE */
  Type: D3D_SHADER_VARIABLE_TYPE;
  /** Windows.Win32.Graphics.Direct3D.D3D_SHADER_VARIABLE_CLASS */
  Class: D3D_SHADER_VARIABLE_CLASS;
  /** u32 */
  Rows: number;
  /** u32 */
  Columns: number;
  /** Windows.Win32.Graphics.Direct3D.D3D_INTERPOLATION_MODE */
  InterpolationMode: D3D_INTERPOLATION_MODE;
  /** Windows.Win32.Graphics.Direct3D.D3D_PARAMETER_FLAGS */
  Flags: D3D_PARAMETER_FLAGS;
  /** u32 */
  FirstInRegister: number;
  /** u32 */
  FirstInComponent: number;
  /** u32 */
  FirstOutRegister: number;
  /** u32 */
  FirstOutComponent: number;
}

export const sizeofD3D11_PARAMETER_DESC = 56;

export function allocD3D11_PARAMETER_DESC(data?: Partial<D3D11_PARAMETER_DESC>): Uint8Array {
  const buf = new Uint8Array(sizeofD3D11_PARAMETER_DESC);
  const view = new DataView(buf.buffer);
  // 0x00: buffer
  if (data?.Name !== undefined) {
    (buf as any)._f0 = util.pstrToFfi(data.Name);
    view.setBigUint64(0, (buf as any)._f0 === null ? 0n : util.toBigInt(Deno.UnsafePointer.of((buf as any)._f0)), true);
  }
  // 0x08: buffer
  if (data?.SemanticName !== undefined) {
    (buf as any)._f8 = util.pstrToFfi(data.SemanticName);
    view.setBigUint64(8, (buf as any)._f8 === null ? 0n : util.toBigInt(Deno.UnsafePointer.of((buf as any)._f8)), true);
  }
  // 0x10: i32
  if (data?.Type !== undefined) view.setInt32(16, Number(data.Type), true);
  // 0x14: i32
  if (data?.Class !== undefined) view.setInt32(20, Number(data.Class), true);
  // 0x18: u32
  if (data?.Rows !== undefined) view.setUint32(24, Number(data.Rows), true);
  // 0x1c: u32
  if (data?.Columns !== undefined) view.setUint32(28, Number(data.Columns), true);
  // 0x20: i32
  if (data?.InterpolationMode !== undefined) view.setInt32(32, Number(data.InterpolationMode), true);
  // 0x24: i32
  if (data?.Flags !== undefined) view.setInt32(36, Number(data.Flags), true);
  // 0x28: u32
  if (data?.FirstInRegister !== undefined) view.setUint32(40, Number(data.FirstInRegister), true);
  // 0x2c: u32
  if (data?.FirstInComponent !== undefined) view.setUint32(44, Number(data.FirstInComponent), true);
  // 0x30: u32
  if (data?.FirstOutRegister !== undefined) view.setUint32(48, Number(data.FirstOutRegister), true);
  // 0x34: u32
  if (data?.FirstOutComponent !== undefined) view.setUint32(52, Number(data.FirstOutComponent), true);
  return buf;
}

export class D3D11_PARAMETER_DESCView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: buffer
  get Name(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(0, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x08: buffer
  get SemanticName(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(8, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x10: i32
  get Type(): number {
    return this.view.getInt32(16, true);
  }

  // 0x14: i32
  get Class(): number {
    return this.view.getInt32(20, true);
  }

  // 0x18: u32
  get Rows(): number {
    return this.view.getUint32(24, true);
  }

  // 0x1c: u32
  get Columns(): number {
    return this.view.getUint32(28, true);
  }

  // 0x20: i32
  get InterpolationMode(): number {
    return this.view.getInt32(32, true);
  }

  // 0x24: i32
  get Flags(): number {
    return this.view.getInt32(36, true);
  }

  // 0x28: u32
  get FirstInRegister(): number {
    return this.view.getUint32(40, true);
  }

  // 0x2c: u32
  get FirstInComponent(): number {
    return this.view.getUint32(44, true);
  }

  // 0x30: u32
  get FirstOutRegister(): number {
    return this.view.getUint32(48, true);
  }

  // 0x34: u32
  get FirstOutComponent(): number {
    return this.view.getUint32(52, true);
  }

  // 0x00: buffer
  set Name(value: Uint8Array | Deno.PointerValue | null) {
    (this.buf as any)._f0 = value;
    this.view.setBigUint64(0, util.toBigInt(util.toPointer((this.buf as any)._f0)), true);
  }

  // 0x08: buffer
  set SemanticName(value: Uint8Array | Deno.PointerValue | null) {
    (this.buf as any)._f8 = value;
    this.view.setBigUint64(8, util.toBigInt(util.toPointer((this.buf as any)._f8)), true);
  }

  // 0x10: i32
  set Type(value: number) {
    this.view.setInt32(16, value, true);
  }

  // 0x14: i32
  set Class(value: number) {
    this.view.setInt32(20, value, true);
  }

  // 0x18: u32
  set Rows(value: number) {
    this.view.setUint32(24, value, true);
  }

  // 0x1c: u32
  set Columns(value: number) {
    this.view.setUint32(28, value, true);
  }

  // 0x20: i32
  set InterpolationMode(value: number) {
    this.view.setInt32(32, value, true);
  }

  // 0x24: i32
  set Flags(value: number) {
    this.view.setInt32(36, value, true);
  }

  // 0x28: u32
  set FirstInRegister(value: number) {
    this.view.setUint32(40, value, true);
  }

  // 0x2c: u32
  set FirstInComponent(value: number) {
    this.view.setUint32(44, value, true);
  }

  // 0x30: u32
  set FirstOutRegister(value: number) {
    this.view.setUint32(48, value, true);
  }

  // 0x34: u32
  set FirstOutComponent(value: number) {
    this.view.setUint32(52, value, true);
  }
}

/**
 * Windows.Win32.Graphics.Direct3D11.D3D11_VERTEX_SHADER_TRACE_DESC (size: 8)
 */
export interface D3D11_VERTEX_SHADER_TRACE_DESC {
  /** u64 */
  Invocation: number | bigint;
}

export const sizeofD3D11_VERTEX_SHADER_TRACE_DESC = 8;

export function allocD3D11_VERTEX_SHADER_TRACE_DESC(data?: Partial<D3D11_VERTEX_SHADER_TRACE_DESC>): Uint8Array {
  const buf = new Uint8Array(sizeofD3D11_VERTEX_SHADER_TRACE_DESC);
  const view = new DataView(buf.buffer);
  // 0x00: u64
  if (data?.Invocation !== undefined) view.setBigUint64(0, util.toBigInt(data.Invocation), true);
  return buf;
}

export class D3D11_VERTEX_SHADER_TRACE_DESCView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u64
  get Invocation(): number | bigint {
    return this.view.getBigUint64(0, true);
  }

  // 0x00: u64
  set Invocation(value: number | bigint) {
    this.view.setBigUint64(0, util.toBigInt(value), true);
  }
}

/**
 * Windows.Win32.Graphics.Direct3D11.D3D11_HULL_SHADER_TRACE_DESC (size: 8)
 */
export interface D3D11_HULL_SHADER_TRACE_DESC {
  /** u64 */
  Invocation: number | bigint;
}

export const sizeofD3D11_HULL_SHADER_TRACE_DESC = 8;

export function allocD3D11_HULL_SHADER_TRACE_DESC(data?: Partial<D3D11_HULL_SHADER_TRACE_DESC>): Uint8Array {
  const buf = new Uint8Array(sizeofD3D11_HULL_SHADER_TRACE_DESC);
  const view = new DataView(buf.buffer);
  // 0x00: u64
  if (data?.Invocation !== undefined) view.setBigUint64(0, util.toBigInt(data.Invocation), true);
  return buf;
}

export class D3D11_HULL_SHADER_TRACE_DESCView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u64
  get Invocation(): number | bigint {
    return this.view.getBigUint64(0, true);
  }

  // 0x00: u64
  set Invocation(value: number | bigint) {
    this.view.setBigUint64(0, util.toBigInt(value), true);
  }
}

/**
 * Windows.Win32.Graphics.Direct3D11.D3D11_DOMAIN_SHADER_TRACE_DESC (size: 8)
 */
export interface D3D11_DOMAIN_SHADER_TRACE_DESC {
  /** u64 */
  Invocation: number | bigint;
}

export const sizeofD3D11_DOMAIN_SHADER_TRACE_DESC = 8;

export function allocD3D11_DOMAIN_SHADER_TRACE_DESC(data?: Partial<D3D11_DOMAIN_SHADER_TRACE_DESC>): Uint8Array {
  const buf = new Uint8Array(sizeofD3D11_DOMAIN_SHADER_TRACE_DESC);
  const view = new DataView(buf.buffer);
  // 0x00: u64
  if (data?.Invocation !== undefined) view.setBigUint64(0, util.toBigInt(data.Invocation), true);
  return buf;
}

export class D3D11_DOMAIN_SHADER_TRACE_DESCView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u64
  get Invocation(): number | bigint {
    return this.view.getBigUint64(0, true);
  }

  // 0x00: u64
  set Invocation(value: number | bigint) {
    this.view.setBigUint64(0, util.toBigInt(value), true);
  }
}

/**
 * Windows.Win32.Graphics.Direct3D11.D3D11_GEOMETRY_SHADER_TRACE_DESC (size: 8)
 */
export interface D3D11_GEOMETRY_SHADER_TRACE_DESC {
  /** u64 */
  Invocation: number | bigint;
}

export const sizeofD3D11_GEOMETRY_SHADER_TRACE_DESC = 8;

export function allocD3D11_GEOMETRY_SHADER_TRACE_DESC(data?: Partial<D3D11_GEOMETRY_SHADER_TRACE_DESC>): Uint8Array {
  const buf = new Uint8Array(sizeofD3D11_GEOMETRY_SHADER_TRACE_DESC);
  const view = new DataView(buf.buffer);
  // 0x00: u64
  if (data?.Invocation !== undefined) view.setBigUint64(0, util.toBigInt(data.Invocation), true);
  return buf;
}

export class D3D11_GEOMETRY_SHADER_TRACE_DESCView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u64
  get Invocation(): number | bigint {
    return this.view.getBigUint64(0, true);
  }

  // 0x00: u64
  set Invocation(value: number | bigint) {
    this.view.setBigUint64(0, util.toBigInt(value), true);
  }
}

/**
 * Windows.Win32.Graphics.Direct3D11.D3D11_PIXEL_SHADER_TRACE_DESC (size: 24)
 */
export interface D3D11_PIXEL_SHADER_TRACE_DESC {
  /** u64 */
  Invocation: number | bigint;
  /** i32 */
  X: number;
  /** i32 */
  Y: number;
  /** u64 */
  SampleMask: number | bigint;
}

export const sizeofD3D11_PIXEL_SHADER_TRACE_DESC = 24;

export function allocD3D11_PIXEL_SHADER_TRACE_DESC(data?: Partial<D3D11_PIXEL_SHADER_TRACE_DESC>): Uint8Array {
  const buf = new Uint8Array(sizeofD3D11_PIXEL_SHADER_TRACE_DESC);
  const view = new DataView(buf.buffer);
  // 0x00: u64
  if (data?.Invocation !== undefined) view.setBigUint64(0, util.toBigInt(data.Invocation), true);
  // 0x08: i32
  if (data?.X !== undefined) view.setInt32(8, Number(data.X), true);
  // 0x0c: i32
  if (data?.Y !== undefined) view.setInt32(12, Number(data.Y), true);
  // 0x10: u64
  if (data?.SampleMask !== undefined) view.setBigUint64(16, util.toBigInt(data.SampleMask), true);
  return buf;
}

export class D3D11_PIXEL_SHADER_TRACE_DESCView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u64
  get Invocation(): number | bigint {
    return this.view.getBigUint64(0, true);
  }

  // 0x08: i32
  get X(): number {
    return this.view.getInt32(8, true);
  }

  // 0x0c: i32
  get Y(): number {
    return this.view.getInt32(12, true);
  }

  // 0x10: u64
  get SampleMask(): number | bigint {
    return this.view.getBigUint64(16, true);
  }

  // 0x00: u64
  set Invocation(value: number | bigint) {
    this.view.setBigUint64(0, util.toBigInt(value), true);
  }

  // 0x08: i32
  set X(value: number) {
    this.view.setInt32(8, value, true);
  }

  // 0x0c: i32
  set Y(value: number) {
    this.view.setInt32(12, value, true);
  }

  // 0x10: u64
  set SampleMask(value: number | bigint) {
    this.view.setBigUint64(16, util.toBigInt(value), true);
  }
}

/**
 * Windows.Win32.Graphics.Direct3D11.D3D11_COMPUTE_SHADER_TRACE_DESC (size: 24)
 */
export interface D3D11_COMPUTE_SHADER_TRACE_DESC {
  /** u64 */
  Invocation: number | bigint;
  /** array */
  ThreadIDInGroup: Deno.PointerValue | null;
  /** array */
  ThreadGroupID: Deno.PointerValue | null;
}

export const sizeofD3D11_COMPUTE_SHADER_TRACE_DESC = 24;

export function allocD3D11_COMPUTE_SHADER_TRACE_DESC(data?: Partial<D3D11_COMPUTE_SHADER_TRACE_DESC>): Uint8Array {
  const buf = new Uint8Array(sizeofD3D11_COMPUTE_SHADER_TRACE_DESC);
  const view = new DataView(buf.buffer);
  // 0x00: u64
  if (data?.Invocation !== undefined) view.setBigUint64(0, util.toBigInt(data.Invocation), true);
  // 0x08: pointer
  if (data?.ThreadIDInGroup !== undefined) view.setBigUint64(8, data.ThreadIDInGroup === null ? 0n : util.toBigInt(util.toPointer(data.ThreadIDInGroup)), true);
  // 0x10: pointer
  if (data?.ThreadGroupID !== undefined) view.setBigUint64(16, data.ThreadGroupID === null ? 0n : util.toBigInt(util.toPointer(data.ThreadGroupID)), true);
  return buf;
}

export class D3D11_COMPUTE_SHADER_TRACE_DESCView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u64
  get Invocation(): number | bigint {
    return this.view.getBigUint64(0, true);
  }

  // 0x08: pointer
  get ThreadIDInGroup(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(8, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x10: pointer
  get ThreadGroupID(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(16, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: u64
  set Invocation(value: number | bigint) {
    this.view.setBigUint64(0, util.toBigInt(value), true);
  }

  // 0x08: pointer
  set ThreadIDInGroup(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(8, util.toBigInt(util.toPointer(value)), true);
  }

  // 0x10: pointer
  set ThreadGroupID(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(16, util.toBigInt(util.toPointer(value)), true);
  }
}

/**
 * Windows.Win32.Graphics.Direct3D11.D3D11_SHADER_TRACE_DESC (size: 16)
 */
export interface D3D11_SHADER_TRACE_DESC {
  /** Windows.Win32.Graphics.Direct3D11.D3D11_SHADER_TYPE */
  Type: D3D11_SHADER_TYPE;
  /** u32 */
  Flags: number;
  /** _Anonymous_e__Union */
  Anonymous: Uint8Array | Deno.PointerValue | null;
}

export const sizeofD3D11_SHADER_TRACE_DESC = 16;

export function allocD3D11_SHADER_TRACE_DESC(data?: Partial<D3D11_SHADER_TRACE_DESC>): Uint8Array {
  const buf = new Uint8Array(sizeofD3D11_SHADER_TRACE_DESC);
  const view = new DataView(buf.buffer);
  // 0x00: i32
  if (data?.Type !== undefined) view.setInt32(0, Number(data.Type), true);
  // 0x04: u32
  if (data?.Flags !== undefined) view.setUint32(4, Number(data.Flags), true);
  // 0x08: pointer
  if (data?.Anonymous !== undefined) view.setBigUint64(8, data.Anonymous === null ? 0n : util.toBigInt(util.toPointer(data.Anonymous)), true);
  return buf;
}

export class D3D11_SHADER_TRACE_DESCView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: i32
  get Type(): number {
    return this.view.getInt32(0, true);
  }

  // 0x04: u32
  get Flags(): number {
    return this.view.getUint32(4, true);
  }

  // 0x08: pointer
  get Anonymous(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(8, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: i32
  set Type(value: number) {
    this.view.setInt32(0, value, true);
  }

  // 0x04: u32
  set Flags(value: number) {
    this.view.setUint32(4, value, true);
  }

  // 0x08: pointer
  set Anonymous(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(8, util.toBigInt(util.toPointer(value)), true);
  }
}

/**
 * Windows.Win32.Graphics.Direct3D11.D3D11_TRACE_STATS (size: 144)
 */
export interface D3D11_TRACE_STATS {
  /** Windows.Win32.Graphics.Direct3D11.D3D11_SHADER_TRACE_DESC */
  TraceDesc: Uint8Array | Deno.PointerValue | null;
  /** u8 */
  NumInvocationsInStamp: number;
  /** u8 */
  TargetStampIndex: number;
  /** u32 */
  NumTraceSteps: number;
  /** array */
  InputMask: Deno.PointerValue | null;
  /** array */
  OutputMask: Deno.PointerValue | null;
  /** u16 */
  NumTemps: number;
  /** u16 */
  MaxIndexableTempIndex: number;
  /** array */
  IndexableTempSize: Deno.PointerValue | null;
  /** u16 */
  ImmediateConstantBufferSize: number;
  /** array */
  PixelPosition: Deno.PointerValue | null;
  /** array */
  PixelCoverageMask: Deno.PointerValue | null;
  /** array */
  PixelDiscardedMask: Deno.PointerValue | null;
  /** array */
  PixelCoverageMaskAfterShader: Deno.PointerValue | null;
  /** array */
  PixelCoverageMaskAfterA2CSampleMask: Deno.PointerValue | null;
  /** array */
  PixelCoverageMaskAfterA2CSampleMaskDepth: Deno.PointerValue | null;
  /** array */
  PixelCoverageMaskAfterA2CSampleMaskDepthStencil: Deno.PointerValue | null;
  /** Windows.Win32.Foundation.BOOL */
  PSOutputsDepth: boolean;
  /** Windows.Win32.Foundation.BOOL */
  PSOutputsMask: boolean;
  /** Windows.Win32.Graphics.Direct3D11.D3D11_TRACE_GS_INPUT_PRIMITIVE */
  GSInputPrimitive: D3D11_TRACE_GS_INPUT_PRIMITIVE;
  /** Windows.Win32.Foundation.BOOL */
  GSInputsPrimitiveID: boolean;
  /** array */
  HSOutputPatchConstantMask: Deno.PointerValue | null;
  /** array */
  DSInputPatchConstantMask: Deno.PointerValue | null;
}

export const sizeofD3D11_TRACE_STATS = 144;

export function allocD3D11_TRACE_STATS(data?: Partial<D3D11_TRACE_STATS>): Uint8Array {
  const buf = new Uint8Array(sizeofD3D11_TRACE_STATS);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.TraceDesc !== undefined) view.setBigUint64(0, data.TraceDesc === null ? 0n : util.toBigInt(util.toPointer(data.TraceDesc)), true);
  // 0x08: u8
  if (data?.NumInvocationsInStamp !== undefined) view.setUint8(8, Number(data.NumInvocationsInStamp));
  // 0x09: u8
  if (data?.TargetStampIndex !== undefined) view.setUint8(9, Number(data.TargetStampIndex));
  // 0x0a: u32
  if (data?.NumTraceSteps !== undefined) view.setUint32(10, Number(data.NumTraceSteps), true);
  // 0x0e: pad2
  // 0x10: pointer
  if (data?.InputMask !== undefined) view.setBigUint64(16, data.InputMask === null ? 0n : util.toBigInt(util.toPointer(data.InputMask)), true);
  // 0x18: pointer
  if (data?.OutputMask !== undefined) view.setBigUint64(24, data.OutputMask === null ? 0n : util.toBigInt(util.toPointer(data.OutputMask)), true);
  // 0x20: u16
  if (data?.NumTemps !== undefined) view.setUint16(32, Number(data.NumTemps), true);
  // 0x22: u16
  if (data?.MaxIndexableTempIndex !== undefined) view.setUint16(34, Number(data.MaxIndexableTempIndex), true);
  // 0x24: pad4
  // 0x28: pointer
  if (data?.IndexableTempSize !== undefined) view.setBigUint64(40, data.IndexableTempSize === null ? 0n : util.toBigInt(util.toPointer(data.IndexableTempSize)), true);
  // 0x30: u16
  if (data?.ImmediateConstantBufferSize !== undefined) view.setUint16(48, Number(data.ImmediateConstantBufferSize), true);
  // 0x32: pad6
  // 0x38: pointer
  if (data?.PixelPosition !== undefined) view.setBigUint64(56, data.PixelPosition === null ? 0n : util.toBigInt(util.toPointer(data.PixelPosition)), true);
  // 0x40: pointer
  if (data?.PixelCoverageMask !== undefined) view.setBigUint64(64, data.PixelCoverageMask === null ? 0n : util.toBigInt(util.toPointer(data.PixelCoverageMask)), true);
  // 0x48: pointer
  if (data?.PixelDiscardedMask !== undefined) view.setBigUint64(72, data.PixelDiscardedMask === null ? 0n : util.toBigInt(util.toPointer(data.PixelDiscardedMask)), true);
  // 0x50: pointer
  if (data?.PixelCoverageMaskAfterShader !== undefined) view.setBigUint64(80, data.PixelCoverageMaskAfterShader === null ? 0n : util.toBigInt(util.toPointer(data.PixelCoverageMaskAfterShader)), true);
  // 0x58: pointer
  if (data?.PixelCoverageMaskAfterA2CSampleMask !== undefined) view.setBigUint64(88, data.PixelCoverageMaskAfterA2CSampleMask === null ? 0n : util.toBigInt(util.toPointer(data.PixelCoverageMaskAfterA2CSampleMask)), true);
  // 0x60: pointer
  if (data?.PixelCoverageMaskAfterA2CSampleMaskDepth !== undefined) view.setBigUint64(96, data.PixelCoverageMaskAfterA2CSampleMaskDepth === null ? 0n : util.toBigInt(util.toPointer(data.PixelCoverageMaskAfterA2CSampleMaskDepth)), true);
  // 0x68: pointer
  if (data?.PixelCoverageMaskAfterA2CSampleMaskDepthStencil !== undefined) view.setBigUint64(104, data.PixelCoverageMaskAfterA2CSampleMaskDepthStencil === null ? 0n : util.toBigInt(util.toPointer(data.PixelCoverageMaskAfterA2CSampleMaskDepthStencil)), true);
  // 0x70: i32
  if (data?.PSOutputsDepth !== undefined) view.setInt32(112, Number(data.PSOutputsDepth), true);
  // 0x74: i32
  if (data?.PSOutputsMask !== undefined) view.setInt32(116, Number(data.PSOutputsMask), true);
  // 0x78: i32
  if (data?.GSInputPrimitive !== undefined) view.setInt32(120, Number(data.GSInputPrimitive), true);
  // 0x7c: i32
  if (data?.GSInputsPrimitiveID !== undefined) view.setInt32(124, Number(data.GSInputsPrimitiveID), true);
  // 0x80: pointer
  if (data?.HSOutputPatchConstantMask !== undefined) view.setBigUint64(128, data.HSOutputPatchConstantMask === null ? 0n : util.toBigInt(util.toPointer(data.HSOutputPatchConstantMask)), true);
  // 0x88: pointer
  if (data?.DSInputPatchConstantMask !== undefined) view.setBigUint64(136, data.DSInputPatchConstantMask === null ? 0n : util.toBigInt(util.toPointer(data.DSInputPatchConstantMask)), true);
  return buf;
}

export class D3D11_TRACE_STATSView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get TraceDesc(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(0, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x08: u8
  get NumInvocationsInStamp(): number {
    return this.view.getUint8(8);
  }

  // 0x09: u8
  get TargetStampIndex(): number {
    return this.view.getUint8(9);
  }

  // 0x0a: u32
  get NumTraceSteps(): number {
    return this.view.getUint32(10, true);
  }

  // 0x0e: pad2

  // 0x10: pointer
  get InputMask(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(16, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x18: pointer
  get OutputMask(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(24, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x20: u16
  get NumTemps(): number {
    return this.view.getUint16(32, true);
  }

  // 0x22: u16
  get MaxIndexableTempIndex(): number {
    return this.view.getUint16(34, true);
  }

  // 0x24: pad4

  // 0x28: pointer
  get IndexableTempSize(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(40, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x30: u16
  get ImmediateConstantBufferSize(): number {
    return this.view.getUint16(48, true);
  }

  // 0x32: pad6

  // 0x38: pointer
  get PixelPosition(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(56, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x40: pointer
  get PixelCoverageMask(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(64, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x48: pointer
  get PixelDiscardedMask(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(72, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x50: pointer
  get PixelCoverageMaskAfterShader(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(80, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x58: pointer
  get PixelCoverageMaskAfterA2CSampleMask(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(88, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x60: pointer
  get PixelCoverageMaskAfterA2CSampleMaskDepth(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(96, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x68: pointer
  get PixelCoverageMaskAfterA2CSampleMaskDepthStencil(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(104, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x70: i32
  get PSOutputsDepth(): number {
    return this.view.getInt32(112, true);
  }

  // 0x74: i32
  get PSOutputsMask(): number {
    return this.view.getInt32(116, true);
  }

  // 0x78: i32
  get GSInputPrimitive(): number {
    return this.view.getInt32(120, true);
  }

  // 0x7c: i32
  get GSInputsPrimitiveID(): number {
    return this.view.getInt32(124, true);
  }

  // 0x80: pointer
  get HSOutputPatchConstantMask(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(128, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x88: pointer
  get DSInputPatchConstantMask(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(136, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: pointer
  set TraceDesc(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(0, util.toBigInt(util.toPointer(value)), true);
  }

  // 0x08: u8
  set NumInvocationsInStamp(value: number) {
    this.view.setUint8(8, value);
  }

  // 0x09: u8
  set TargetStampIndex(value: number) {
    this.view.setUint8(9, value);
  }

  // 0x0a: u32
  set NumTraceSteps(value: number) {
    this.view.setUint32(10, value, true);
  }

  // 0x0e: pad2

  // 0x10: pointer
  set InputMask(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(16, util.toBigInt(util.toPointer(value)), true);
  }

  // 0x18: pointer
  set OutputMask(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(24, util.toBigInt(util.toPointer(value)), true);
  }

  // 0x20: u16
  set NumTemps(value: number) {
    this.view.setUint16(32, value, true);
  }

  // 0x22: u16
  set MaxIndexableTempIndex(value: number) {
    this.view.setUint16(34, value, true);
  }

  // 0x24: pad4

  // 0x28: pointer
  set IndexableTempSize(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(40, util.toBigInt(util.toPointer(value)), true);
  }

  // 0x30: u16
  set ImmediateConstantBufferSize(value: number) {
    this.view.setUint16(48, value, true);
  }

  // 0x32: pad6

  // 0x38: pointer
  set PixelPosition(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(56, util.toBigInt(util.toPointer(value)), true);
  }

  // 0x40: pointer
  set PixelCoverageMask(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(64, util.toBigInt(util.toPointer(value)), true);
  }

  // 0x48: pointer
  set PixelDiscardedMask(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(72, util.toBigInt(util.toPointer(value)), true);
  }

  // 0x50: pointer
  set PixelCoverageMaskAfterShader(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(80, util.toBigInt(util.toPointer(value)), true);
  }

  // 0x58: pointer
  set PixelCoverageMaskAfterA2CSampleMask(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(88, util.toBigInt(util.toPointer(value)), true);
  }

  // 0x60: pointer
  set PixelCoverageMaskAfterA2CSampleMaskDepth(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(96, util.toBigInt(util.toPointer(value)), true);
  }

  // 0x68: pointer
  set PixelCoverageMaskAfterA2CSampleMaskDepthStencil(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(104, util.toBigInt(util.toPointer(value)), true);
  }

  // 0x70: i32
  set PSOutputsDepth(value: number) {
    this.view.setInt32(112, value, true);
  }

  // 0x74: i32
  set PSOutputsMask(value: number) {
    this.view.setInt32(116, value, true);
  }

  // 0x78: i32
  set GSInputPrimitive(value: number) {
    this.view.setInt32(120, value, true);
  }

  // 0x7c: i32
  set GSInputsPrimitiveID(value: number) {
    this.view.setInt32(124, value, true);
  }

  // 0x80: pointer
  set HSOutputPatchConstantMask(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(128, util.toBigInt(util.toPointer(value)), true);
  }

  // 0x88: pointer
  set DSInputPatchConstantMask(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(136, util.toBigInt(util.toPointer(value)), true);
  }
}

/**
 * Windows.Win32.Graphics.Direct3D11.D3D11_TRACE_VALUE (size: 16)
 */
export interface D3D11_TRACE_VALUE {
  /** array */
  Bits: Deno.PointerValue | null;
  /** u8 */
  ValidMask: number;
}

export const sizeofD3D11_TRACE_VALUE = 16;

export function allocD3D11_TRACE_VALUE(data?: Partial<D3D11_TRACE_VALUE>): Uint8Array {
  const buf = new Uint8Array(sizeofD3D11_TRACE_VALUE);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.Bits !== undefined) view.setBigUint64(0, data.Bits === null ? 0n : util.toBigInt(util.toPointer(data.Bits)), true);
  // 0x08: u8
  if (data?.ValidMask !== undefined) view.setUint8(8, Number(data.ValidMask));
  // 0x09: pad7
  return buf;
}

export class D3D11_TRACE_VALUEView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get Bits(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(0, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x08: u8
  get ValidMask(): number {
    return this.view.getUint8(8);
  }

  // 0x09: pad7

  // 0x00: pointer
  set Bits(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(0, util.toBigInt(util.toPointer(value)), true);
  }

  // 0x08: u8
  set ValidMask(value: number) {
    this.view.setUint8(8, value);
  }

  // 0x09: pad7
}

/**
 * Windows.Win32.Graphics.Direct3D11.D3D11_TRACE_REGISTER (size: 24)
 */
export interface D3D11_TRACE_REGISTER {
  /** Windows.Win32.Graphics.Direct3D11.D3D11_TRACE_REGISTER_TYPE */
  RegType: D3D11_TRACE_REGISTER_TYPE;
  /** _Anonymous_e__Union */
  Anonymous: Uint8Array | Deno.PointerValue | null;
  /** u8 */
  OperandIndex: number;
  /** u8 */
  Flags: number;
}

export const sizeofD3D11_TRACE_REGISTER = 24;

export function allocD3D11_TRACE_REGISTER(data?: Partial<D3D11_TRACE_REGISTER>): Uint8Array {
  const buf = new Uint8Array(sizeofD3D11_TRACE_REGISTER);
  const view = new DataView(buf.buffer);
  // 0x00: i32
  if (data?.RegType !== undefined) view.setInt32(0, Number(data.RegType), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.Anonymous !== undefined) view.setBigUint64(8, data.Anonymous === null ? 0n : util.toBigInt(util.toPointer(data.Anonymous)), true);
  // 0x10: u8
  if (data?.OperandIndex !== undefined) view.setUint8(16, Number(data.OperandIndex));
  // 0x11: u8
  if (data?.Flags !== undefined) view.setUint8(17, Number(data.Flags));
  // 0x12: pad6
  return buf;
}

export class D3D11_TRACE_REGISTERView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: i32
  get RegType(): number {
    return this.view.getInt32(0, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  get Anonymous(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(8, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x10: u8
  get OperandIndex(): number {
    return this.view.getUint8(16);
  }

  // 0x11: u8
  get Flags(): number {
    return this.view.getUint8(17);
  }

  // 0x12: pad6

  // 0x00: i32
  set RegType(value: number) {
    this.view.setInt32(0, value, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  set Anonymous(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(8, util.toBigInt(util.toPointer(value)), true);
  }

  // 0x10: u8
  set OperandIndex(value: number) {
    this.view.setUint8(16, value);
  }

  // 0x11: u8
  set Flags(value: number) {
    this.view.setUint8(17, value);
  }

  // 0x12: pad6
}

/**
 * Windows.Win32.Graphics.Direct3D11.D3D11_TRACE_STEP (size: 24)
 */
export interface D3D11_TRACE_STEP {
  /** u32 */
  ID: number;
  /** Windows.Win32.Foundation.BOOL */
  InstructionActive: boolean;
  /** u8 */
  NumRegistersWritten: number;
  /** u8 */
  NumRegistersRead: number;
  /** u16 */
  MiscOperations: number;
  /** u32 */
  OpcodeType: number;
  /** u64 */
  CurrentGlobalCycle: number | bigint;
}

export const sizeofD3D11_TRACE_STEP = 24;

export function allocD3D11_TRACE_STEP(data?: Partial<D3D11_TRACE_STEP>): Uint8Array {
  const buf = new Uint8Array(sizeofD3D11_TRACE_STEP);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.ID !== undefined) view.setUint32(0, Number(data.ID), true);
  // 0x04: i32
  if (data?.InstructionActive !== undefined) view.setInt32(4, Number(data.InstructionActive), true);
  // 0x08: u8
  if (data?.NumRegistersWritten !== undefined) view.setUint8(8, Number(data.NumRegistersWritten));
  // 0x09: u8
  if (data?.NumRegistersRead !== undefined) view.setUint8(9, Number(data.NumRegistersRead));
  // 0x0a: u16
  if (data?.MiscOperations !== undefined) view.setUint16(10, Number(data.MiscOperations), true);
  // 0x0c: u32
  if (data?.OpcodeType !== undefined) view.setUint32(12, Number(data.OpcodeType), true);
  // 0x10: u64
  if (data?.CurrentGlobalCycle !== undefined) view.setBigUint64(16, util.toBigInt(data.CurrentGlobalCycle), true);
  return buf;
}

export class D3D11_TRACE_STEPView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get ID(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: i32
  get InstructionActive(): number {
    return this.view.getInt32(4, true);
  }

  // 0x08: u8
  get NumRegistersWritten(): number {
    return this.view.getUint8(8);
  }

  // 0x09: u8
  get NumRegistersRead(): number {
    return this.view.getUint8(9);
  }

  // 0x0a: u16
  get MiscOperations(): number {
    return this.view.getUint16(10, true);
  }

  // 0x0c: u32
  get OpcodeType(): number {
    return this.view.getUint32(12, true);
  }

  // 0x10: u64
  get CurrentGlobalCycle(): number | bigint {
    return this.view.getBigUint64(16, true);
  }

  // 0x00: u32
  set ID(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: i32
  set InstructionActive(value: number) {
    this.view.setInt32(4, value, true);
  }

  // 0x08: u8
  set NumRegistersWritten(value: number) {
    this.view.setUint8(8, value);
  }

  // 0x09: u8
  set NumRegistersRead(value: number) {
    this.view.setUint8(9, value);
  }

  // 0x0a: u16
  set MiscOperations(value: number) {
    this.view.setUint16(10, value, true);
  }

  // 0x0c: u32
  set OpcodeType(value: number) {
    this.view.setUint32(12, value, true);
  }

  // 0x10: u64
  set CurrentGlobalCycle(value: number | bigint) {
    this.view.setBigUint64(16, util.toBigInt(value), true);
  }
}

/**
 * Windows.Win32.Graphics.Direct3D11.D3DX11_FFT_DESC (size: 24)
 */
export interface D3DX11_FFT_DESC {
  /** u32 */
  NumDimensions: number;
  /** array */
  ElementLengths: Deno.PointerValue | null;
  /** u32 */
  DimensionMask: number;
  /** Windows.Win32.Graphics.Direct3D11.D3DX11_FFT_DATA_TYPE */
  Type: D3DX11_FFT_DATA_TYPE;
}

export const sizeofD3DX11_FFT_DESC = 24;

export function allocD3DX11_FFT_DESC(data?: Partial<D3DX11_FFT_DESC>): Uint8Array {
  const buf = new Uint8Array(sizeofD3DX11_FFT_DESC);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.NumDimensions !== undefined) view.setUint32(0, Number(data.NumDimensions), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.ElementLengths !== undefined) view.setBigUint64(8, data.ElementLengths === null ? 0n : util.toBigInt(util.toPointer(data.ElementLengths)), true);
  // 0x10: u32
  if (data?.DimensionMask !== undefined) view.setUint32(16, Number(data.DimensionMask), true);
  // 0x14: i32
  if (data?.Type !== undefined) view.setInt32(20, Number(data.Type), true);
  return buf;
}

export class D3DX11_FFT_DESCView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get NumDimensions(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  get ElementLengths(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(8, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x10: u32
  get DimensionMask(): number {
    return this.view.getUint32(16, true);
  }

  // 0x14: i32
  get Type(): number {
    return this.view.getInt32(20, true);
  }

  // 0x00: u32
  set NumDimensions(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  set ElementLengths(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(8, util.toBigInt(util.toPointer(value)), true);
  }

  // 0x10: u32
  set DimensionMask(value: number) {
    this.view.setUint32(16, value, true);
  }

  // 0x14: i32
  set Type(value: number) {
    this.view.setInt32(20, value, true);
  }
}

/**
 * Windows.Win32.Graphics.Direct3D11.D3DX11_FFT_BUFFER_INFO (size: 32)
 */
export interface D3DX11_FFT_BUFFER_INFO {
  /** u32 */
  NumTempBufferSizes: number;
  /** array */
  TempBufferFloatSizes: Deno.PointerValue | null;
  /** u32 */
  NumPrecomputeBufferSizes: number;
  /** array */
  PrecomputeBufferFloatSizes: Deno.PointerValue | null;
}

export const sizeofD3DX11_FFT_BUFFER_INFO = 32;

export function allocD3DX11_FFT_BUFFER_INFO(data?: Partial<D3DX11_FFT_BUFFER_INFO>): Uint8Array {
  const buf = new Uint8Array(sizeofD3DX11_FFT_BUFFER_INFO);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.NumTempBufferSizes !== undefined) view.setUint32(0, Number(data.NumTempBufferSizes), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.TempBufferFloatSizes !== undefined) view.setBigUint64(8, data.TempBufferFloatSizes === null ? 0n : util.toBigInt(util.toPointer(data.TempBufferFloatSizes)), true);
  // 0x10: u32
  if (data?.NumPrecomputeBufferSizes !== undefined) view.setUint32(16, Number(data.NumPrecomputeBufferSizes), true);
  // 0x14: pad4
  // 0x18: pointer
  if (data?.PrecomputeBufferFloatSizes !== undefined) view.setBigUint64(24, data.PrecomputeBufferFloatSizes === null ? 0n : util.toBigInt(util.toPointer(data.PrecomputeBufferFloatSizes)), true);
  return buf;
}

export class D3DX11_FFT_BUFFER_INFOView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get NumTempBufferSizes(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  get TempBufferFloatSizes(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(8, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x10: u32
  get NumPrecomputeBufferSizes(): number {
    return this.view.getUint32(16, true);
  }

  // 0x14: pad4

  // 0x18: pointer
  get PrecomputeBufferFloatSizes(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(24, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: u32
  set NumTempBufferSizes(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  set TempBufferFloatSizes(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(8, util.toBigInt(util.toPointer(value)), true);
  }

  // 0x10: u32
  set NumPrecomputeBufferSizes(value: number) {
    this.view.setUint32(16, value, true);
  }

  // 0x14: pad4

  // 0x18: pointer
  set PrecomputeBufferFloatSizes(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(24, util.toBigInt(util.toPointer(value)), true);
  }
}

/**
 * Windows.Win32.Graphics.Direct3D11on12.D3D11_RESOURCE_FLAGS (size: 16)
 */
export interface D3D11_RESOURCE_FLAGS {
  /** u32 */
  BindFlags: number;
  /** u32 */
  MiscFlags: number;
  /** u32 */
  CPUAccessFlags: number;
  /** u32 */
  StructureByteStride: number;
}

export const sizeofD3D11_RESOURCE_FLAGS = 16;

export function allocD3D11_RESOURCE_FLAGS(data?: Partial<D3D11_RESOURCE_FLAGS>): Uint8Array {
  const buf = new Uint8Array(sizeofD3D11_RESOURCE_FLAGS);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.BindFlags !== undefined) view.setUint32(0, Number(data.BindFlags), true);
  // 0x04: u32
  if (data?.MiscFlags !== undefined) view.setUint32(4, Number(data.MiscFlags), true);
  // 0x08: u32
  if (data?.CPUAccessFlags !== undefined) view.setUint32(8, Number(data.CPUAccessFlags), true);
  // 0x0c: u32
  if (data?.StructureByteStride !== undefined) view.setUint32(12, Number(data.StructureByteStride), true);
  return buf;
}

export class D3D11_RESOURCE_FLAGSView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get BindFlags(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: u32
  get MiscFlags(): number {
    return this.view.getUint32(4, true);
  }

  // 0x08: u32
  get CPUAccessFlags(): number {
    return this.view.getUint32(8, true);
  }

  // 0x0c: u32
  get StructureByteStride(): number {
    return this.view.getUint32(12, true);
  }

  // 0x00: u32
  set BindFlags(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: u32
  set MiscFlags(value: number) {
    this.view.setUint32(4, value, true);
  }

  // 0x08: u32
  set CPUAccessFlags(value: number) {
    this.view.setUint32(8, value, true);
  }

  // 0x0c: u32
  set StructureByteStride(value: number) {
    this.view.setUint32(12, value, true);
  }
}

/**
 * Windows.Win32.Graphics.Direct3D12.D3D12_COMMAND_QUEUE_DESC (size: 16)
 */
export interface D3D12_COMMAND_QUEUE_DESC {
  /** Windows.Win32.Graphics.Direct3D12.D3D12_COMMAND_LIST_TYPE */
  Type: D3D12_COMMAND_LIST_TYPE;
  /** i32 */
  Priority: number;
  /** Windows.Win32.Graphics.Direct3D12.D3D12_COMMAND_QUEUE_FLAGS */
  Flags: D3D12_COMMAND_QUEUE_FLAGS;
  /** u32 */
  NodeMask: number;
}

export const sizeofD3D12_COMMAND_QUEUE_DESC = 16;

export function allocD3D12_COMMAND_QUEUE_DESC(data?: Partial<D3D12_COMMAND_QUEUE_DESC>): Uint8Array {
  const buf = new Uint8Array(sizeofD3D12_COMMAND_QUEUE_DESC);
  const view = new DataView(buf.buffer);
  // 0x00: i32
  if (data?.Type !== undefined) view.setInt32(0, Number(data.Type), true);
  // 0x04: i32
  if (data?.Priority !== undefined) view.setInt32(4, Number(data.Priority), true);
  // 0x08: u32
  if (data?.Flags !== undefined) view.setUint32(8, Number(data.Flags), true);
  // 0x0c: u32
  if (data?.NodeMask !== undefined) view.setUint32(12, Number(data.NodeMask), true);
  return buf;
}

export class D3D12_COMMAND_QUEUE_DESCView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: i32
  get Type(): number {
    return this.view.getInt32(0, true);
  }

  // 0x04: i32
  get Priority(): number {
    return this.view.getInt32(4, true);
  }

  // 0x08: u32
  get Flags(): number {
    return this.view.getUint32(8, true);
  }

  // 0x0c: u32
  get NodeMask(): number {
    return this.view.getUint32(12, true);
  }

  // 0x00: i32
  set Type(value: number) {
    this.view.setInt32(0, value, true);
  }

  // 0x04: i32
  set Priority(value: number) {
    this.view.setInt32(4, value, true);
  }

  // 0x08: u32
  set Flags(value: number) {
    this.view.setUint32(8, value, true);
  }

  // 0x0c: u32
  set NodeMask(value: number) {
    this.view.setUint32(12, value, true);
  }
}

/**
 * Windows.Win32.Graphics.Direct3D12.D3D12_INPUT_ELEMENT_DESC (size: 32)
 */
export interface D3D12_INPUT_ELEMENT_DESC {
  /** Windows.Win32.Foundation.PSTR */
  SemanticName: string | null | Uint8Array;
  /** u32 */
  SemanticIndex: number;
  /** Windows.Win32.Graphics.Dxgi.Common.DXGI_FORMAT */
  Format: DXGI_FORMAT;
  /** u32 */
  InputSlot: number;
  /** u32 */
  AlignedByteOffset: number;
  /** Windows.Win32.Graphics.Direct3D12.D3D12_INPUT_CLASSIFICATION */
  InputSlotClass: D3D12_INPUT_CLASSIFICATION;
  /** u32 */
  InstanceDataStepRate: number;
}

export const sizeofD3D12_INPUT_ELEMENT_DESC = 32;

export function allocD3D12_INPUT_ELEMENT_DESC(data?: Partial<D3D12_INPUT_ELEMENT_DESC>): Uint8Array {
  const buf = new Uint8Array(sizeofD3D12_INPUT_ELEMENT_DESC);
  const view = new DataView(buf.buffer);
  // 0x00: buffer
  if (data?.SemanticName !== undefined) {
    (buf as any)._f0 = util.pstrToFfi(data.SemanticName);
    view.setBigUint64(0, (buf as any)._f0 === null ? 0n : util.toBigInt(Deno.UnsafePointer.of((buf as any)._f0)), true);
  }
  // 0x08: u32
  if (data?.SemanticIndex !== undefined) view.setUint32(8, Number(data.SemanticIndex), true);
  // 0x0c: u32
  if (data?.Format !== undefined) view.setUint32(12, Number(data.Format), true);
  // 0x10: u32
  if (data?.InputSlot !== undefined) view.setUint32(16, Number(data.InputSlot), true);
  // 0x14: u32
  if (data?.AlignedByteOffset !== undefined) view.setUint32(20, Number(data.AlignedByteOffset), true);
  // 0x18: i32
  if (data?.InputSlotClass !== undefined) view.setInt32(24, Number(data.InputSlotClass), true);
  // 0x1c: u32
  if (data?.InstanceDataStepRate !== undefined) view.setUint32(28, Number(data.InstanceDataStepRate), true);
  return buf;
}

export class D3D12_INPUT_ELEMENT_DESCView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: buffer
  get SemanticName(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(0, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x08: u32
  get SemanticIndex(): number {
    return this.view.getUint32(8, true);
  }

  // 0x0c: u32
  get Format(): number {
    return this.view.getUint32(12, true);
  }

  // 0x10: u32
  get InputSlot(): number {
    return this.view.getUint32(16, true);
  }

  // 0x14: u32
  get AlignedByteOffset(): number {
    return this.view.getUint32(20, true);
  }

  // 0x18: i32
  get InputSlotClass(): number {
    return this.view.getInt32(24, true);
  }

  // 0x1c: u32
  get InstanceDataStepRate(): number {
    return this.view.getUint32(28, true);
  }

  // 0x00: buffer
  set SemanticName(value: Uint8Array | Deno.PointerValue | null) {
    (this.buf as any)._f0 = value;
    this.view.setBigUint64(0, util.toBigInt(util.toPointer((this.buf as any)._f0)), true);
  }

  // 0x08: u32
  set SemanticIndex(value: number) {
    this.view.setUint32(8, value, true);
  }

  // 0x0c: u32
  set Format(value: number) {
    this.view.setUint32(12, value, true);
  }

  // 0x10: u32
  set InputSlot(value: number) {
    this.view.setUint32(16, value, true);
  }

  // 0x14: u32
  set AlignedByteOffset(value: number) {
    this.view.setUint32(20, value, true);
  }

  // 0x18: i32
  set InputSlotClass(value: number) {
    this.view.setInt32(24, value, true);
  }

  // 0x1c: u32
  set InstanceDataStepRate(value: number) {
    this.view.setUint32(28, value, true);
  }
}

/**
 * Windows.Win32.Graphics.Direct3D12.D3D12_SO_DECLARATION_ENTRY (size: 24)
 */
export interface D3D12_SO_DECLARATION_ENTRY {
  /** u32 */
  Stream: number;
  /** Windows.Win32.Foundation.PSTR */
  SemanticName: string | null | Uint8Array;
  /** u32 */
  SemanticIndex: number;
  /** u8 */
  StartComponent: number;
  /** u8 */
  ComponentCount: number;
  /** u8 */
  OutputSlot: number;
}

export const sizeofD3D12_SO_DECLARATION_ENTRY = 24;

export function allocD3D12_SO_DECLARATION_ENTRY(data?: Partial<D3D12_SO_DECLARATION_ENTRY>): Uint8Array {
  const buf = new Uint8Array(sizeofD3D12_SO_DECLARATION_ENTRY);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.Stream !== undefined) view.setUint32(0, Number(data.Stream), true);
  // 0x04: pad4
  // 0x08: buffer
  if (data?.SemanticName !== undefined) {
    (buf as any)._f8 = util.pstrToFfi(data.SemanticName);
    view.setBigUint64(8, (buf as any)._f8 === null ? 0n : util.toBigInt(Deno.UnsafePointer.of((buf as any)._f8)), true);
  }
  // 0x10: u32
  if (data?.SemanticIndex !== undefined) view.setUint32(16, Number(data.SemanticIndex), true);
  // 0x14: u8
  if (data?.StartComponent !== undefined) view.setUint8(20, Number(data.StartComponent));
  // 0x15: u8
  if (data?.ComponentCount !== undefined) view.setUint8(21, Number(data.ComponentCount));
  // 0x16: u8
  if (data?.OutputSlot !== undefined) view.setUint8(22, Number(data.OutputSlot));
  // 0x17: pad1
  return buf;
}

export class D3D12_SO_DECLARATION_ENTRYView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get Stream(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: pad4

  // 0x08: buffer
  get SemanticName(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(8, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x10: u32
  get SemanticIndex(): number {
    return this.view.getUint32(16, true);
  }

  // 0x14: u8
  get StartComponent(): number {
    return this.view.getUint8(20);
  }

  // 0x15: u8
  get ComponentCount(): number {
    return this.view.getUint8(21);
  }

  // 0x16: u8
  get OutputSlot(): number {
    return this.view.getUint8(22);
  }

  // 0x17: pad1

  // 0x00: u32
  set Stream(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: pad4

  // 0x08: buffer
  set SemanticName(value: Uint8Array | Deno.PointerValue | null) {
    (this.buf as any)._f8 = value;
    this.view.setBigUint64(8, util.toBigInt(util.toPointer((this.buf as any)._f8)), true);
  }

  // 0x10: u32
  set SemanticIndex(value: number) {
    this.view.setUint32(16, value, true);
  }

  // 0x14: u8
  set StartComponent(value: number) {
    this.view.setUint8(20, value);
  }

  // 0x15: u8
  set ComponentCount(value: number) {
    this.view.setUint8(21, value);
  }

  // 0x16: u8
  set OutputSlot(value: number) {
    this.view.setUint8(22, value);
  }

  // 0x17: pad1
}

/**
 * Windows.Win32.Graphics.Direct3D12.D3D12_VIEWPORT (size: 24)
 */
export interface D3D12_VIEWPORT {
  /** f32 */
  TopLeftX: number;
  /** f32 */
  TopLeftY: number;
  /** f32 */
  Width: number;
  /** f32 */
  Height: number;
  /** f32 */
  MinDepth: number;
  /** f32 */
  MaxDepth: number;
}

export const sizeofD3D12_VIEWPORT = 24;

export function allocD3D12_VIEWPORT(data?: Partial<D3D12_VIEWPORT>): Uint8Array {
  const buf = new Uint8Array(sizeofD3D12_VIEWPORT);
  const view = new DataView(buf.buffer);
  // 0x00: f32
  if (data?.TopLeftX !== undefined) view.setFloat32(0, Number(data.TopLeftX), true);
  // 0x04: f32
  if (data?.TopLeftY !== undefined) view.setFloat32(4, Number(data.TopLeftY), true);
  // 0x08: f32
  if (data?.Width !== undefined) view.setFloat32(8, Number(data.Width), true);
  // 0x0c: f32
  if (data?.Height !== undefined) view.setFloat32(12, Number(data.Height), true);
  // 0x10: f32
  if (data?.MinDepth !== undefined) view.setFloat32(16, Number(data.MinDepth), true);
  // 0x14: f32
  if (data?.MaxDepth !== undefined) view.setFloat32(20, Number(data.MaxDepth), true);
  return buf;
}

export class D3D12_VIEWPORTView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: f32
  get TopLeftX(): number {
    return this.view.getFloat32(0, true);
  }

  // 0x04: f32
  get TopLeftY(): number {
    return this.view.getFloat32(4, true);
  }

  // 0x08: f32
  get Width(): number {
    return this.view.getFloat32(8, true);
  }

  // 0x0c: f32
  get Height(): number {
    return this.view.getFloat32(12, true);
  }

  // 0x10: f32
  get MinDepth(): number {
    return this.view.getFloat32(16, true);
  }

  // 0x14: f32
  get MaxDepth(): number {
    return this.view.getFloat32(20, true);
  }

  // 0x00: f32
  set TopLeftX(value: number) {
    this.view.setFloat32(0, value, true);
  }

  // 0x04: f32
  set TopLeftY(value: number) {
    this.view.setFloat32(4, value, true);
  }

  // 0x08: f32
  set Width(value: number) {
    this.view.setFloat32(8, value, true);
  }

  // 0x0c: f32
  set Height(value: number) {
    this.view.setFloat32(12, value, true);
  }

  // 0x10: f32
  set MinDepth(value: number) {
    this.view.setFloat32(16, value, true);
  }

  // 0x14: f32
  set MaxDepth(value: number) {
    this.view.setFloat32(20, value, true);
  }
}

/**
 * Windows.Win32.Graphics.Direct3D12.D3D12_BOX (size: 24)
 */
export interface D3D12_BOX {
  /** u32 */
  left: number;
  /** u32 */
  top: number;
  /** u32 */
  front: number;
  /** u32 */
  right: number;
  /** u32 */
  bottom: number;
  /** u32 */
  back: number;
}

export const sizeofD3D12_BOX = 24;

export function allocD3D12_BOX(data?: Partial<D3D12_BOX>): Uint8Array {
  const buf = new Uint8Array(sizeofD3D12_BOX);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.left !== undefined) view.setUint32(0, Number(data.left), true);
  // 0x04: u32
  if (data?.top !== undefined) view.setUint32(4, Number(data.top), true);
  // 0x08: u32
  if (data?.front !== undefined) view.setUint32(8, Number(data.front), true);
  // 0x0c: u32
  if (data?.right !== undefined) view.setUint32(12, Number(data.right), true);
  // 0x10: u32
  if (data?.bottom !== undefined) view.setUint32(16, Number(data.bottom), true);
  // 0x14: u32
  if (data?.back !== undefined) view.setUint32(20, Number(data.back), true);
  return buf;
}

export class D3D12_BOXView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get left(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: u32
  get top(): number {
    return this.view.getUint32(4, true);
  }

  // 0x08: u32
  get front(): number {
    return this.view.getUint32(8, true);
  }

  // 0x0c: u32
  get right(): number {
    return this.view.getUint32(12, true);
  }

  // 0x10: u32
  get bottom(): number {
    return this.view.getUint32(16, true);
  }

  // 0x14: u32
  get back(): number {
    return this.view.getUint32(20, true);
  }

  // 0x00: u32
  set left(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: u32
  set top(value: number) {
    this.view.setUint32(4, value, true);
  }

  // 0x08: u32
  set front(value: number) {
    this.view.setUint32(8, value, true);
  }

  // 0x0c: u32
  set right(value: number) {
    this.view.setUint32(12, value, true);
  }

  // 0x10: u32
  set bottom(value: number) {
    this.view.setUint32(16, value, true);
  }

  // 0x14: u32
  set back(value: number) {
    this.view.setUint32(20, value, true);
  }
}

/**
 * Windows.Win32.Graphics.Direct3D12.D3D12_DEPTH_STENCILOP_DESC (size: 16)
 */
export interface D3D12_DEPTH_STENCILOP_DESC {
  /** Windows.Win32.Graphics.Direct3D12.D3D12_STENCIL_OP */
  StencilFailOp: D3D12_STENCIL_OP;
  /** Windows.Win32.Graphics.Direct3D12.D3D12_STENCIL_OP */
  StencilDepthFailOp: D3D12_STENCIL_OP;
  /** Windows.Win32.Graphics.Direct3D12.D3D12_STENCIL_OP */
  StencilPassOp: D3D12_STENCIL_OP;
  /** Windows.Win32.Graphics.Direct3D12.D3D12_COMPARISON_FUNC */
  StencilFunc: D3D12_COMPARISON_FUNC;
}

export const sizeofD3D12_DEPTH_STENCILOP_DESC = 16;

export function allocD3D12_DEPTH_STENCILOP_DESC(data?: Partial<D3D12_DEPTH_STENCILOP_DESC>): Uint8Array {
  const buf = new Uint8Array(sizeofD3D12_DEPTH_STENCILOP_DESC);
  const view = new DataView(buf.buffer);
  // 0x00: i32
  if (data?.StencilFailOp !== undefined) view.setInt32(0, Number(data.StencilFailOp), true);
  // 0x04: i32
  if (data?.StencilDepthFailOp !== undefined) view.setInt32(4, Number(data.StencilDepthFailOp), true);
  // 0x08: i32
  if (data?.StencilPassOp !== undefined) view.setInt32(8, Number(data.StencilPassOp), true);
  // 0x0c: i32
  if (data?.StencilFunc !== undefined) view.setInt32(12, Number(data.StencilFunc), true);
  return buf;
}

export class D3D12_DEPTH_STENCILOP_DESCView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: i32
  get StencilFailOp(): number {
    return this.view.getInt32(0, true);
  }

  // 0x04: i32
  get StencilDepthFailOp(): number {
    return this.view.getInt32(4, true);
  }

  // 0x08: i32
  get StencilPassOp(): number {
    return this.view.getInt32(8, true);
  }

  // 0x0c: i32
  get StencilFunc(): number {
    return this.view.getInt32(12, true);
  }

  // 0x00: i32
  set StencilFailOp(value: number) {
    this.view.setInt32(0, value, true);
  }

  // 0x04: i32
  set StencilDepthFailOp(value: number) {
    this.view.setInt32(4, value, true);
  }

  // 0x08: i32
  set StencilPassOp(value: number) {
    this.view.setInt32(8, value, true);
  }

  // 0x0c: i32
  set StencilFunc(value: number) {
    this.view.setInt32(12, value, true);
  }
}

/**
 * Windows.Win32.Graphics.Direct3D12.D3D12_DEPTH_STENCIL_DESC (size: 40)
 */
export interface D3D12_DEPTH_STENCIL_DESC {
  /** Windows.Win32.Foundation.BOOL */
  DepthEnable: boolean;
  /** Windows.Win32.Graphics.Direct3D12.D3D12_DEPTH_WRITE_MASK */
  DepthWriteMask: D3D12_DEPTH_WRITE_MASK;
  /** Windows.Win32.Graphics.Direct3D12.D3D12_COMPARISON_FUNC */
  DepthFunc: D3D12_COMPARISON_FUNC;
  /** Windows.Win32.Foundation.BOOL */
  StencilEnable: boolean;
  /** u8 */
  StencilReadMask: number;
  /** u8 */
  StencilWriteMask: number;
  /** Windows.Win32.Graphics.Direct3D12.D3D12_DEPTH_STENCILOP_DESC */
  FrontFace: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Graphics.Direct3D12.D3D12_DEPTH_STENCILOP_DESC */
  BackFace: Uint8Array | Deno.PointerValue | null;
}

export const sizeofD3D12_DEPTH_STENCIL_DESC = 40;

export function allocD3D12_DEPTH_STENCIL_DESC(data?: Partial<D3D12_DEPTH_STENCIL_DESC>): Uint8Array {
  const buf = new Uint8Array(sizeofD3D12_DEPTH_STENCIL_DESC);
  const view = new DataView(buf.buffer);
  // 0x00: i32
  if (data?.DepthEnable !== undefined) view.setInt32(0, Number(data.DepthEnable), true);
  // 0x04: i32
  if (data?.DepthWriteMask !== undefined) view.setInt32(4, Number(data.DepthWriteMask), true);
  // 0x08: i32
  if (data?.DepthFunc !== undefined) view.setInt32(8, Number(data.DepthFunc), true);
  // 0x0c: i32
  if (data?.StencilEnable !== undefined) view.setInt32(12, Number(data.StencilEnable), true);
  // 0x10: u8
  if (data?.StencilReadMask !== undefined) view.setUint8(16, Number(data.StencilReadMask));
  // 0x11: u8
  if (data?.StencilWriteMask !== undefined) view.setUint8(17, Number(data.StencilWriteMask));
  // 0x12: pad6
  // 0x18: pointer
  if (data?.FrontFace !== undefined) view.setBigUint64(24, data.FrontFace === null ? 0n : util.toBigInt(util.toPointer(data.FrontFace)), true);
  // 0x20: pointer
  if (data?.BackFace !== undefined) view.setBigUint64(32, data.BackFace === null ? 0n : util.toBigInt(util.toPointer(data.BackFace)), true);
  return buf;
}

export class D3D12_DEPTH_STENCIL_DESCView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: i32
  get DepthEnable(): number {
    return this.view.getInt32(0, true);
  }

  // 0x04: i32
  get DepthWriteMask(): number {
    return this.view.getInt32(4, true);
  }

  // 0x08: i32
  get DepthFunc(): number {
    return this.view.getInt32(8, true);
  }

  // 0x0c: i32
  get StencilEnable(): number {
    return this.view.getInt32(12, true);
  }

  // 0x10: u8
  get StencilReadMask(): number {
    return this.view.getUint8(16);
  }

  // 0x11: u8
  get StencilWriteMask(): number {
    return this.view.getUint8(17);
  }

  // 0x12: pad6

  // 0x18: pointer
  get FrontFace(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(24, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x20: pointer
  get BackFace(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(32, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: i32
  set DepthEnable(value: number) {
    this.view.setInt32(0, value, true);
  }

  // 0x04: i32
  set DepthWriteMask(value: number) {
    this.view.setInt32(4, value, true);
  }

  // 0x08: i32
  set DepthFunc(value: number) {
    this.view.setInt32(8, value, true);
  }

  // 0x0c: i32
  set StencilEnable(value: number) {
    this.view.setInt32(12, value, true);
  }

  // 0x10: u8
  set StencilReadMask(value: number) {
    this.view.setUint8(16, value);
  }

  // 0x11: u8
  set StencilWriteMask(value: number) {
    this.view.setUint8(17, value);
  }

  // 0x12: pad6

  // 0x18: pointer
  set FrontFace(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(24, util.toBigInt(util.toPointer(value)), true);
  }

  // 0x20: pointer
  set BackFace(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(32, util.toBigInt(util.toPointer(value)), true);
  }
}

/**
 * Windows.Win32.Graphics.Direct3D12.D3D12_DEPTH_STENCIL_DESC1 (size: 48)
 */
export interface D3D12_DEPTH_STENCIL_DESC1 {
  /** Windows.Win32.Foundation.BOOL */
  DepthEnable: boolean;
  /** Windows.Win32.Graphics.Direct3D12.D3D12_DEPTH_WRITE_MASK */
  DepthWriteMask: D3D12_DEPTH_WRITE_MASK;
  /** Windows.Win32.Graphics.Direct3D12.D3D12_COMPARISON_FUNC */
  DepthFunc: D3D12_COMPARISON_FUNC;
  /** Windows.Win32.Foundation.BOOL */
  StencilEnable: boolean;
  /** u8 */
  StencilReadMask: number;
  /** u8 */
  StencilWriteMask: number;
  /** Windows.Win32.Graphics.Direct3D12.D3D12_DEPTH_STENCILOP_DESC */
  FrontFace: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Graphics.Direct3D12.D3D12_DEPTH_STENCILOP_DESC */
  BackFace: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Foundation.BOOL */
  DepthBoundsTestEnable: boolean;
}

export const sizeofD3D12_DEPTH_STENCIL_DESC1 = 48;

export function allocD3D12_DEPTH_STENCIL_DESC1(data?: Partial<D3D12_DEPTH_STENCIL_DESC1>): Uint8Array {
  const buf = new Uint8Array(sizeofD3D12_DEPTH_STENCIL_DESC1);
  const view = new DataView(buf.buffer);
  // 0x00: i32
  if (data?.DepthEnable !== undefined) view.setInt32(0, Number(data.DepthEnable), true);
  // 0x04: i32
  if (data?.DepthWriteMask !== undefined) view.setInt32(4, Number(data.DepthWriteMask), true);
  // 0x08: i32
  if (data?.DepthFunc !== undefined) view.setInt32(8, Number(data.DepthFunc), true);
  // 0x0c: i32
  if (data?.StencilEnable !== undefined) view.setInt32(12, Number(data.StencilEnable), true);
  // 0x10: u8
  if (data?.StencilReadMask !== undefined) view.setUint8(16, Number(data.StencilReadMask));
  // 0x11: u8
  if (data?.StencilWriteMask !== undefined) view.setUint8(17, Number(data.StencilWriteMask));
  // 0x12: pad6
  // 0x18: pointer
  if (data?.FrontFace !== undefined) view.setBigUint64(24, data.FrontFace === null ? 0n : util.toBigInt(util.toPointer(data.FrontFace)), true);
  // 0x20: pointer
  if (data?.BackFace !== undefined) view.setBigUint64(32, data.BackFace === null ? 0n : util.toBigInt(util.toPointer(data.BackFace)), true);
  // 0x28: i32
  if (data?.DepthBoundsTestEnable !== undefined) view.setInt32(40, Number(data.DepthBoundsTestEnable), true);
  // 0x2c: pad4
  return buf;
}

export class D3D12_DEPTH_STENCIL_DESC1View {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: i32
  get DepthEnable(): number {
    return this.view.getInt32(0, true);
  }

  // 0x04: i32
  get DepthWriteMask(): number {
    return this.view.getInt32(4, true);
  }

  // 0x08: i32
  get DepthFunc(): number {
    return this.view.getInt32(8, true);
  }

  // 0x0c: i32
  get StencilEnable(): number {
    return this.view.getInt32(12, true);
  }

  // 0x10: u8
  get StencilReadMask(): number {
    return this.view.getUint8(16);
  }

  // 0x11: u8
  get StencilWriteMask(): number {
    return this.view.getUint8(17);
  }

  // 0x12: pad6

  // 0x18: pointer
  get FrontFace(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(24, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x20: pointer
  get BackFace(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(32, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x28: i32
  get DepthBoundsTestEnable(): number {
    return this.view.getInt32(40, true);
  }

  // 0x2c: pad4

  // 0x00: i32
  set DepthEnable(value: number) {
    this.view.setInt32(0, value, true);
  }

  // 0x04: i32
  set DepthWriteMask(value: number) {
    this.view.setInt32(4, value, true);
  }

  // 0x08: i32
  set DepthFunc(value: number) {
    this.view.setInt32(8, value, true);
  }

  // 0x0c: i32
  set StencilEnable(value: number) {
    this.view.setInt32(12, value, true);
  }

  // 0x10: u8
  set StencilReadMask(value: number) {
    this.view.setUint8(16, value);
  }

  // 0x11: u8
  set StencilWriteMask(value: number) {
    this.view.setUint8(17, value);
  }

  // 0x12: pad6

  // 0x18: pointer
  set FrontFace(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(24, util.toBigInt(util.toPointer(value)), true);
  }

  // 0x20: pointer
  set BackFace(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(32, util.toBigInt(util.toPointer(value)), true);
  }

  // 0x28: i32
  set DepthBoundsTestEnable(value: number) {
    this.view.setInt32(40, value, true);
  }

  // 0x2c: pad4
}

/**
 * Windows.Win32.Graphics.Direct3D12.D3D12_RENDER_TARGET_BLEND_DESC (size: 40)
 */
export interface D3D12_RENDER_TARGET_BLEND_DESC {
  /** Windows.Win32.Foundation.BOOL */
  BlendEnable: boolean;
  /** Windows.Win32.Foundation.BOOL */
  LogicOpEnable: boolean;
  /** Windows.Win32.Graphics.Direct3D12.D3D12_BLEND */
  SrcBlend: D3D12_BLEND;
  /** Windows.Win32.Graphics.Direct3D12.D3D12_BLEND */
  DestBlend: D3D12_BLEND;
  /** Windows.Win32.Graphics.Direct3D12.D3D12_BLEND_OP */
  BlendOp: D3D12_BLEND_OP;
  /** Windows.Win32.Graphics.Direct3D12.D3D12_BLEND */
  SrcBlendAlpha: D3D12_BLEND;
  /** Windows.Win32.Graphics.Direct3D12.D3D12_BLEND */
  DestBlendAlpha: D3D12_BLEND;
  /** Windows.Win32.Graphics.Direct3D12.D3D12_BLEND_OP */
  BlendOpAlpha: D3D12_BLEND_OP;
  /** Windows.Win32.Graphics.Direct3D12.D3D12_LOGIC_OP */
  LogicOp: D3D12_LOGIC_OP;
  /** u8 */
  RenderTargetWriteMask: number;
}

export const sizeofD3D12_RENDER_TARGET_BLEND_DESC = 40;

export function allocD3D12_RENDER_TARGET_BLEND_DESC(data?: Partial<D3D12_RENDER_TARGET_BLEND_DESC>): Uint8Array {
  const buf = new Uint8Array(sizeofD3D12_RENDER_TARGET_BLEND_DESC);
  const view = new DataView(buf.buffer);
  // 0x00: i32
  if (data?.BlendEnable !== undefined) view.setInt32(0, Number(data.BlendEnable), true);
  // 0x04: i32
  if (data?.LogicOpEnable !== undefined) view.setInt32(4, Number(data.LogicOpEnable), true);
  // 0x08: i32
  if (data?.SrcBlend !== undefined) view.setInt32(8, Number(data.SrcBlend), true);
  // 0x0c: i32
  if (data?.DestBlend !== undefined) view.setInt32(12, Number(data.DestBlend), true);
  // 0x10: i32
  if (data?.BlendOp !== undefined) view.setInt32(16, Number(data.BlendOp), true);
  // 0x14: i32
  if (data?.SrcBlendAlpha !== undefined) view.setInt32(20, Number(data.SrcBlendAlpha), true);
  // 0x18: i32
  if (data?.DestBlendAlpha !== undefined) view.setInt32(24, Number(data.DestBlendAlpha), true);
  // 0x1c: i32
  if (data?.BlendOpAlpha !== undefined) view.setInt32(28, Number(data.BlendOpAlpha), true);
  // 0x20: i32
  if (data?.LogicOp !== undefined) view.setInt32(32, Number(data.LogicOp), true);
  // 0x24: u8
  if (data?.RenderTargetWriteMask !== undefined) view.setUint8(36, Number(data.RenderTargetWriteMask));
  // 0x25: pad3
  return buf;
}

export class D3D12_RENDER_TARGET_BLEND_DESCView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: i32
  get BlendEnable(): number {
    return this.view.getInt32(0, true);
  }

  // 0x04: i32
  get LogicOpEnable(): number {
    return this.view.getInt32(4, true);
  }

  // 0x08: i32
  get SrcBlend(): number {
    return this.view.getInt32(8, true);
  }

  // 0x0c: i32
  get DestBlend(): number {
    return this.view.getInt32(12, true);
  }

  // 0x10: i32
  get BlendOp(): number {
    return this.view.getInt32(16, true);
  }

  // 0x14: i32
  get SrcBlendAlpha(): number {
    return this.view.getInt32(20, true);
  }

  // 0x18: i32
  get DestBlendAlpha(): number {
    return this.view.getInt32(24, true);
  }

  // 0x1c: i32
  get BlendOpAlpha(): number {
    return this.view.getInt32(28, true);
  }

  // 0x20: i32
  get LogicOp(): number {
    return this.view.getInt32(32, true);
  }

  // 0x24: u8
  get RenderTargetWriteMask(): number {
    return this.view.getUint8(36);
  }

  // 0x25: pad3

  // 0x00: i32
  set BlendEnable(value: number) {
    this.view.setInt32(0, value, true);
  }

  // 0x04: i32
  set LogicOpEnable(value: number) {
    this.view.setInt32(4, value, true);
  }

  // 0x08: i32
  set SrcBlend(value: number) {
    this.view.setInt32(8, value, true);
  }

  // 0x0c: i32
  set DestBlend(value: number) {
    this.view.setInt32(12, value, true);
  }

  // 0x10: i32
  set BlendOp(value: number) {
    this.view.setInt32(16, value, true);
  }

  // 0x14: i32
  set SrcBlendAlpha(value: number) {
    this.view.setInt32(20, value, true);
  }

  // 0x18: i32
  set DestBlendAlpha(value: number) {
    this.view.setInt32(24, value, true);
  }

  // 0x1c: i32
  set BlendOpAlpha(value: number) {
    this.view.setInt32(28, value, true);
  }

  // 0x20: i32
  set LogicOp(value: number) {
    this.view.setInt32(32, value, true);
  }

  // 0x24: u8
  set RenderTargetWriteMask(value: number) {
    this.view.setUint8(36, value);
  }

  // 0x25: pad3
}

/**
 * Windows.Win32.Graphics.Direct3D12.D3D12_BLEND_DESC (size: 16)
 */
export interface D3D12_BLEND_DESC {
  /** Windows.Win32.Foundation.BOOL */
  AlphaToCoverageEnable: boolean;
  /** Windows.Win32.Foundation.BOOL */
  IndependentBlendEnable: boolean;
  /** array */
  RenderTarget: Deno.PointerValue | null;
}

export const sizeofD3D12_BLEND_DESC = 16;

export function allocD3D12_BLEND_DESC(data?: Partial<D3D12_BLEND_DESC>): Uint8Array {
  const buf = new Uint8Array(sizeofD3D12_BLEND_DESC);
  const view = new DataView(buf.buffer);
  // 0x00: i32
  if (data?.AlphaToCoverageEnable !== undefined) view.setInt32(0, Number(data.AlphaToCoverageEnable), true);
  // 0x04: i32
  if (data?.IndependentBlendEnable !== undefined) view.setInt32(4, Number(data.IndependentBlendEnable), true);
  // 0x08: pointer
  if (data?.RenderTarget !== undefined) view.setBigUint64(8, data.RenderTarget === null ? 0n : util.toBigInt(util.toPointer(data.RenderTarget)), true);
  return buf;
}

export class D3D12_BLEND_DESCView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: i32
  get AlphaToCoverageEnable(): number {
    return this.view.getInt32(0, true);
  }

  // 0x04: i32
  get IndependentBlendEnable(): number {
    return this.view.getInt32(4, true);
  }

  // 0x08: pointer
  get RenderTarget(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(8, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: i32
  set AlphaToCoverageEnable(value: number) {
    this.view.setInt32(0, value, true);
  }

  // 0x04: i32
  set IndependentBlendEnable(value: number) {
    this.view.setInt32(4, value, true);
  }

  // 0x08: pointer
  set RenderTarget(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(8, util.toBigInt(util.toPointer(value)), true);
  }
}

/**
 * Windows.Win32.Graphics.Direct3D12.D3D12_RASTERIZER_DESC (size: 48)
 */
export interface D3D12_RASTERIZER_DESC {
  /** Windows.Win32.Graphics.Direct3D12.D3D12_FILL_MODE */
  FillMode: D3D12_FILL_MODE;
  /** Windows.Win32.Graphics.Direct3D12.D3D12_CULL_MODE */
  CullMode: D3D12_CULL_MODE;
  /** Windows.Win32.Foundation.BOOL */
  FrontCounterClockwise: boolean;
  /** i32 */
  DepthBias: number;
  /** f32 */
  DepthBiasClamp: number;
  /** f32 */
  SlopeScaledDepthBias: number;
  /** Windows.Win32.Foundation.BOOL */
  DepthClipEnable: boolean;
  /** Windows.Win32.Foundation.BOOL */
  MultisampleEnable: boolean;
  /** Windows.Win32.Foundation.BOOL */
  AntialiasedLineEnable: boolean;
  /** u32 */
  ForcedSampleCount: number;
  /** Windows.Win32.Graphics.Direct3D12.D3D12_CONSERVATIVE_RASTERIZATION_MODE */
  ConservativeRaster: D3D12_CONSERVATIVE_RASTERIZATION_MODE;
}

export const sizeofD3D12_RASTERIZER_DESC = 48;

export function allocD3D12_RASTERIZER_DESC(data?: Partial<D3D12_RASTERIZER_DESC>): Uint8Array {
  const buf = new Uint8Array(sizeofD3D12_RASTERIZER_DESC);
  const view = new DataView(buf.buffer);
  // 0x00: i32
  if (data?.FillMode !== undefined) view.setInt32(0, Number(data.FillMode), true);
  // 0x04: i32
  if (data?.CullMode !== undefined) view.setInt32(4, Number(data.CullMode), true);
  // 0x08: i32
  if (data?.FrontCounterClockwise !== undefined) view.setInt32(8, Number(data.FrontCounterClockwise), true);
  // 0x0c: i32
  if (data?.DepthBias !== undefined) view.setInt32(12, Number(data.DepthBias), true);
  // 0x10: f32
  if (data?.DepthBiasClamp !== undefined) view.setFloat32(16, Number(data.DepthBiasClamp), true);
  // 0x14: f32
  if (data?.SlopeScaledDepthBias !== undefined) view.setFloat32(20, Number(data.SlopeScaledDepthBias), true);
  // 0x18: i32
  if (data?.DepthClipEnable !== undefined) view.setInt32(24, Number(data.DepthClipEnable), true);
  // 0x1c: i32
  if (data?.MultisampleEnable !== undefined) view.setInt32(28, Number(data.MultisampleEnable), true);
  // 0x20: i32
  if (data?.AntialiasedLineEnable !== undefined) view.setInt32(32, Number(data.AntialiasedLineEnable), true);
  // 0x24: u32
  if (data?.ForcedSampleCount !== undefined) view.setUint32(36, Number(data.ForcedSampleCount), true);
  // 0x28: i32
  if (data?.ConservativeRaster !== undefined) view.setInt32(40, Number(data.ConservativeRaster), true);
  // 0x2c: pad4
  return buf;
}

export class D3D12_RASTERIZER_DESCView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: i32
  get FillMode(): number {
    return this.view.getInt32(0, true);
  }

  // 0x04: i32
  get CullMode(): number {
    return this.view.getInt32(4, true);
  }

  // 0x08: i32
  get FrontCounterClockwise(): number {
    return this.view.getInt32(8, true);
  }

  // 0x0c: i32
  get DepthBias(): number {
    return this.view.getInt32(12, true);
  }

  // 0x10: f32
  get DepthBiasClamp(): number {
    return this.view.getFloat32(16, true);
  }

  // 0x14: f32
  get SlopeScaledDepthBias(): number {
    return this.view.getFloat32(20, true);
  }

  // 0x18: i32
  get DepthClipEnable(): number {
    return this.view.getInt32(24, true);
  }

  // 0x1c: i32
  get MultisampleEnable(): number {
    return this.view.getInt32(28, true);
  }

  // 0x20: i32
  get AntialiasedLineEnable(): number {
    return this.view.getInt32(32, true);
  }

  // 0x24: u32
  get ForcedSampleCount(): number {
    return this.view.getUint32(36, true);
  }

  // 0x28: i32
  get ConservativeRaster(): number {
    return this.view.getInt32(40, true);
  }

  // 0x2c: pad4

  // 0x00: i32
  set FillMode(value: number) {
    this.view.setInt32(0, value, true);
  }

  // 0x04: i32
  set CullMode(value: number) {
    this.view.setInt32(4, value, true);
  }

  // 0x08: i32
  set FrontCounterClockwise(value: number) {
    this.view.setInt32(8, value, true);
  }

  // 0x0c: i32
  set DepthBias(value: number) {
    this.view.setInt32(12, value, true);
  }

  // 0x10: f32
  set DepthBiasClamp(value: number) {
    this.view.setFloat32(16, value, true);
  }

  // 0x14: f32
  set SlopeScaledDepthBias(value: number) {
    this.view.setFloat32(20, value, true);
  }

  // 0x18: i32
  set DepthClipEnable(value: number) {
    this.view.setInt32(24, value, true);
  }

  // 0x1c: i32
  set MultisampleEnable(value: number) {
    this.view.setInt32(28, value, true);
  }

  // 0x20: i32
  set AntialiasedLineEnable(value: number) {
    this.view.setInt32(32, value, true);
  }

  // 0x24: u32
  set ForcedSampleCount(value: number) {
    this.view.setUint32(36, value, true);
  }

  // 0x28: i32
  set ConservativeRaster(value: number) {
    this.view.setInt32(40, value, true);
  }

  // 0x2c: pad4
}

/**
 * Windows.Win32.Graphics.Direct3D12.D3D12_SHADER_BYTECODE (size: 16)
 */
export interface D3D12_SHADER_BYTECODE {
  /** ptr */
  pShaderBytecode: Deno.PointerValue | Uint8Array | null;
  /** usize */
  BytecodeLength: number | bigint;
}

export const sizeofD3D12_SHADER_BYTECODE = 16;

export function allocD3D12_SHADER_BYTECODE(data?: Partial<D3D12_SHADER_BYTECODE>): Uint8Array {
  const buf = new Uint8Array(sizeofD3D12_SHADER_BYTECODE);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.pShaderBytecode !== undefined) view.setBigUint64(0, data.pShaderBytecode === null ? 0n : util.toBigInt(util.toPointer(data.pShaderBytecode)), true);
  // 0x08: usize
  if (data?.BytecodeLength !== undefined) view.setBigUint64(8, util.toBigInt(data.BytecodeLength), true);
  return buf;
}

export class D3D12_SHADER_BYTECODEView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get pShaderBytecode(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(0, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x08: usize
  get BytecodeLength(): number | bigint {
    return this.view.getBigUint64(8, true);
  }

  // 0x00: pointer
  set pShaderBytecode(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(0, util.toBigInt(util.toPointer(value)), true);
  }

  // 0x08: usize
  set BytecodeLength(value: number | bigint) {
    this.view.setBigUint64(8, util.toBigInt(value), true);
  }
}

/**
 * Windows.Win32.Graphics.Direct3D12.D3D12_STREAM_OUTPUT_DESC (size: 32)
 */
export interface D3D12_STREAM_OUTPUT_DESC {
  /** ptr */
  pSODeclaration: Deno.PointerValue | Uint8Array | null;
  /** u32 */
  NumEntries: number;
  /** ptr */
  pBufferStrides: Deno.PointerValue | Uint8Array | null;
  /** u32 */
  NumStrides: number;
  /** u32 */
  RasterizedStream: number;
}

export const sizeofD3D12_STREAM_OUTPUT_DESC = 32;

export function allocD3D12_STREAM_OUTPUT_DESC(data?: Partial<D3D12_STREAM_OUTPUT_DESC>): Uint8Array {
  const buf = new Uint8Array(sizeofD3D12_STREAM_OUTPUT_DESC);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.pSODeclaration !== undefined) view.setBigUint64(0, data.pSODeclaration === null ? 0n : util.toBigInt(util.toPointer(data.pSODeclaration)), true);
  // 0x08: u32
  if (data?.NumEntries !== undefined) view.setUint32(8, Number(data.NumEntries), true);
  // 0x0c: pad4
  // 0x10: pointer
  if (data?.pBufferStrides !== undefined) view.setBigUint64(16, data.pBufferStrides === null ? 0n : util.toBigInt(util.toPointer(data.pBufferStrides)), true);
  // 0x18: u32
  if (data?.NumStrides !== undefined) view.setUint32(24, Number(data.NumStrides), true);
  // 0x1c: u32
  if (data?.RasterizedStream !== undefined) view.setUint32(28, Number(data.RasterizedStream), true);
  return buf;
}

export class D3D12_STREAM_OUTPUT_DESCView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get pSODeclaration(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(0, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x08: u32
  get NumEntries(): number {
    return this.view.getUint32(8, true);
  }

  // 0x0c: pad4

  // 0x10: pointer
  get pBufferStrides(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(16, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x18: u32
  get NumStrides(): number {
    return this.view.getUint32(24, true);
  }

  // 0x1c: u32
  get RasterizedStream(): number {
    return this.view.getUint32(28, true);
  }

  // 0x00: pointer
  set pSODeclaration(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(0, util.toBigInt(util.toPointer(value)), true);
  }

  // 0x08: u32
  set NumEntries(value: number) {
    this.view.setUint32(8, value, true);
  }

  // 0x0c: pad4

  // 0x10: pointer
  set pBufferStrides(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(16, util.toBigInt(util.toPointer(value)), true);
  }

  // 0x18: u32
  set NumStrides(value: number) {
    this.view.setUint32(24, value, true);
  }

  // 0x1c: u32
  set RasterizedStream(value: number) {
    this.view.setUint32(28, value, true);
  }
}

/**
 * Windows.Win32.Graphics.Direct3D12.D3D12_INPUT_LAYOUT_DESC (size: 16)
 */
export interface D3D12_INPUT_LAYOUT_DESC {
  /** ptr */
  pInputElementDescs: Deno.PointerValue | Uint8Array | null;
  /** u32 */
  NumElements: number;
}

export const sizeofD3D12_INPUT_LAYOUT_DESC = 16;

export function allocD3D12_INPUT_LAYOUT_DESC(data?: Partial<D3D12_INPUT_LAYOUT_DESC>): Uint8Array {
  const buf = new Uint8Array(sizeofD3D12_INPUT_LAYOUT_DESC);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.pInputElementDescs !== undefined) view.setBigUint64(0, data.pInputElementDescs === null ? 0n : util.toBigInt(util.toPointer(data.pInputElementDescs)), true);
  // 0x08: u32
  if (data?.NumElements !== undefined) view.setUint32(8, Number(data.NumElements), true);
  // 0x0c: pad4
  return buf;
}

export class D3D12_INPUT_LAYOUT_DESCView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get pInputElementDescs(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(0, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x08: u32
  get NumElements(): number {
    return this.view.getUint32(8, true);
  }

  // 0x0c: pad4

  // 0x00: pointer
  set pInputElementDescs(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(0, util.toBigInt(util.toPointer(value)), true);
  }

  // 0x08: u32
  set NumElements(value: number) {
    this.view.setUint32(8, value, true);
  }

  // 0x0c: pad4
}

/**
 * Windows.Win32.Graphics.Direct3D12.D3D12_CACHED_PIPELINE_STATE (size: 16)
 */
export interface D3D12_CACHED_PIPELINE_STATE {
  /** ptr */
  pCachedBlob: Deno.PointerValue | Uint8Array | null;
  /** usize */
  CachedBlobSizeInBytes: number | bigint;
}

export const sizeofD3D12_CACHED_PIPELINE_STATE = 16;

export function allocD3D12_CACHED_PIPELINE_STATE(data?: Partial<D3D12_CACHED_PIPELINE_STATE>): Uint8Array {
  const buf = new Uint8Array(sizeofD3D12_CACHED_PIPELINE_STATE);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.pCachedBlob !== undefined) view.setBigUint64(0, data.pCachedBlob === null ? 0n : util.toBigInt(util.toPointer(data.pCachedBlob)), true);
  // 0x08: usize
  if (data?.CachedBlobSizeInBytes !== undefined) view.setBigUint64(8, util.toBigInt(data.CachedBlobSizeInBytes), true);
  return buf;
}

export class D3D12_CACHED_PIPELINE_STATEView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get pCachedBlob(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(0, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x08: usize
  get CachedBlobSizeInBytes(): number | bigint {
    return this.view.getBigUint64(8, true);
  }

  // 0x00: pointer
  set pCachedBlob(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(0, util.toBigInt(util.toPointer(value)), true);
  }

  // 0x08: usize
  set CachedBlobSizeInBytes(value: number | bigint) {
    this.view.setBigUint64(8, util.toBigInt(value), true);
  }
}

/**
 * Windows.Win32.Graphics.Direct3D12.D3D12_GRAPHICS_PIPELINE_STATE_DESC (size: 160)
 */
export interface D3D12_GRAPHICS_PIPELINE_STATE_DESC {
  /** Windows.Win32.Graphics.Direct3D12.ID3D12RootSignature */
  pRootSignature: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Graphics.Direct3D12.D3D12_SHADER_BYTECODE */
  VS: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Graphics.Direct3D12.D3D12_SHADER_BYTECODE */
  PS: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Graphics.Direct3D12.D3D12_SHADER_BYTECODE */
  DS: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Graphics.Direct3D12.D3D12_SHADER_BYTECODE */
  HS: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Graphics.Direct3D12.D3D12_SHADER_BYTECODE */
  GS: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Graphics.Direct3D12.D3D12_STREAM_OUTPUT_DESC */
  StreamOutput: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Graphics.Direct3D12.D3D12_BLEND_DESC */
  BlendState: Uint8Array | Deno.PointerValue | null;
  /** u32 */
  SampleMask: number;
  /** Windows.Win32.Graphics.Direct3D12.D3D12_RASTERIZER_DESC */
  RasterizerState: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Graphics.Direct3D12.D3D12_DEPTH_STENCIL_DESC */
  DepthStencilState: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Graphics.Direct3D12.D3D12_INPUT_LAYOUT_DESC */
  InputLayout: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Graphics.Direct3D12.D3D12_INDEX_BUFFER_STRIP_CUT_VALUE */
  IBStripCutValue: D3D12_INDEX_BUFFER_STRIP_CUT_VALUE;
  /** Windows.Win32.Graphics.Direct3D12.D3D12_PRIMITIVE_TOPOLOGY_TYPE */
  PrimitiveTopologyType: D3D12_PRIMITIVE_TOPOLOGY_TYPE;
  /** u32 */
  NumRenderTargets: number;
  /** array */
  RTVFormats: Deno.PointerValue | null;
  /** Windows.Win32.Graphics.Dxgi.Common.DXGI_FORMAT */
  DSVFormat: DXGI_FORMAT;
  /** Windows.Win32.Graphics.Dxgi.Common.DXGI_SAMPLE_DESC */
  SampleDesc: Uint8Array | Deno.PointerValue | null;
  /** u32 */
  NodeMask: number;
  /** Windows.Win32.Graphics.Direct3D12.D3D12_CACHED_PIPELINE_STATE */
  CachedPSO: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Graphics.Direct3D12.D3D12_PIPELINE_STATE_FLAGS */
  Flags: D3D12_PIPELINE_STATE_FLAGS;
}

export const sizeofD3D12_GRAPHICS_PIPELINE_STATE_DESC = 160;

export function allocD3D12_GRAPHICS_PIPELINE_STATE_DESC(data?: Partial<D3D12_GRAPHICS_PIPELINE_STATE_DESC>): Uint8Array {
  const buf = new Uint8Array(sizeofD3D12_GRAPHICS_PIPELINE_STATE_DESC);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.pRootSignature !== undefined) view.setBigUint64(0, data.pRootSignature === null ? 0n : util.toBigInt(util.toPointer(data.pRootSignature)), true);
  // 0x08: pointer
  if (data?.VS !== undefined) view.setBigUint64(8, data.VS === null ? 0n : util.toBigInt(util.toPointer(data.VS)), true);
  // 0x10: pointer
  if (data?.PS !== undefined) view.setBigUint64(16, data.PS === null ? 0n : util.toBigInt(util.toPointer(data.PS)), true);
  // 0x18: pointer
  if (data?.DS !== undefined) view.setBigUint64(24, data.DS === null ? 0n : util.toBigInt(util.toPointer(data.DS)), true);
  // 0x20: pointer
  if (data?.HS !== undefined) view.setBigUint64(32, data.HS === null ? 0n : util.toBigInt(util.toPointer(data.HS)), true);
  // 0x28: pointer
  if (data?.GS !== undefined) view.setBigUint64(40, data.GS === null ? 0n : util.toBigInt(util.toPointer(data.GS)), true);
  // 0x30: pointer
  if (data?.StreamOutput !== undefined) view.setBigUint64(48, data.StreamOutput === null ? 0n : util.toBigInt(util.toPointer(data.StreamOutput)), true);
  // 0x38: pointer
  if (data?.BlendState !== undefined) view.setBigUint64(56, data.BlendState === null ? 0n : util.toBigInt(util.toPointer(data.BlendState)), true);
  // 0x40: u32
  if (data?.SampleMask !== undefined) view.setUint32(64, Number(data.SampleMask), true);
  // 0x44: pad4
  // 0x48: pointer
  if (data?.RasterizerState !== undefined) view.setBigUint64(72, data.RasterizerState === null ? 0n : util.toBigInt(util.toPointer(data.RasterizerState)), true);
  // 0x50: pointer
  if (data?.DepthStencilState !== undefined) view.setBigUint64(80, data.DepthStencilState === null ? 0n : util.toBigInt(util.toPointer(data.DepthStencilState)), true);
  // 0x58: pointer
  if (data?.InputLayout !== undefined) view.setBigUint64(88, data.InputLayout === null ? 0n : util.toBigInt(util.toPointer(data.InputLayout)), true);
  // 0x60: i32
  if (data?.IBStripCutValue !== undefined) view.setInt32(96, Number(data.IBStripCutValue), true);
  // 0x64: i32
  if (data?.PrimitiveTopologyType !== undefined) view.setInt32(100, Number(data.PrimitiveTopologyType), true);
  // 0x68: u32
  if (data?.NumRenderTargets !== undefined) view.setUint32(104, Number(data.NumRenderTargets), true);
  // 0x6c: pad4
  // 0x70: pointer
  if (data?.RTVFormats !== undefined) view.setBigUint64(112, data.RTVFormats === null ? 0n : util.toBigInt(util.toPointer(data.RTVFormats)), true);
  // 0x78: u32
  if (data?.DSVFormat !== undefined) view.setUint32(120, Number(data.DSVFormat), true);
  // 0x7c: pad4
  // 0x80: pointer
  if (data?.SampleDesc !== undefined) view.setBigUint64(128, data.SampleDesc === null ? 0n : util.toBigInt(util.toPointer(data.SampleDesc)), true);
  // 0x88: u32
  if (data?.NodeMask !== undefined) view.setUint32(136, Number(data.NodeMask), true);
  // 0x8c: pad4
  // 0x90: pointer
  if (data?.CachedPSO !== undefined) view.setBigUint64(144, data.CachedPSO === null ? 0n : util.toBigInt(util.toPointer(data.CachedPSO)), true);
  // 0x98: u32
  if (data?.Flags !== undefined) view.setUint32(152, Number(data.Flags), true);
  // 0x9c: pad4
  return buf;
}

export class D3D12_GRAPHICS_PIPELINE_STATE_DESCView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get pRootSignature(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(0, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x08: pointer
  get VS(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(8, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x10: pointer
  get PS(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(16, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x18: pointer
  get DS(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(24, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x20: pointer
  get HS(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(32, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x28: pointer
  get GS(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(40, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x30: pointer
  get StreamOutput(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(48, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x38: pointer
  get BlendState(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(56, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x40: u32
  get SampleMask(): number {
    return this.view.getUint32(64, true);
  }

  // 0x44: pad4

  // 0x48: pointer
  get RasterizerState(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(72, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x50: pointer
  get DepthStencilState(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(80, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x58: pointer
  get InputLayout(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(88, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x60: i32
  get IBStripCutValue(): number {
    return this.view.getInt32(96, true);
  }

  // 0x64: i32
  get PrimitiveTopologyType(): number {
    return this.view.getInt32(100, true);
  }

  // 0x68: u32
  get NumRenderTargets(): number {
    return this.view.getUint32(104, true);
  }

  // 0x6c: pad4

  // 0x70: pointer
  get RTVFormats(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(112, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x78: u32
  get DSVFormat(): number {
    return this.view.getUint32(120, true);
  }

  // 0x7c: pad4

  // 0x80: pointer
  get SampleDesc(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(128, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x88: u32
  get NodeMask(): number {
    return this.view.getUint32(136, true);
  }

  // 0x8c: pad4

  // 0x90: pointer
  get CachedPSO(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(144, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x98: u32
  get Flags(): number {
    return this.view.getUint32(152, true);
  }

  // 0x9c: pad4

  // 0x00: pointer
  set pRootSignature(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(0, util.toBigInt(util.toPointer(value)), true);
  }

  // 0x08: pointer
  set VS(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(8, util.toBigInt(util.toPointer(value)), true);
  }

  // 0x10: pointer
  set PS(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(16, util.toBigInt(util.toPointer(value)), true);
  }

  // 0x18: pointer
  set DS(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(24, util.toBigInt(util.toPointer(value)), true);
  }

  // 0x20: pointer
  set HS(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(32, util.toBigInt(util.toPointer(value)), true);
  }

  // 0x28: pointer
  set GS(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(40, util.toBigInt(util.toPointer(value)), true);
  }

  // 0x30: pointer
  set StreamOutput(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(48, util.toBigInt(util.toPointer(value)), true);
  }

  // 0x38: pointer
  set BlendState(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(56, util.toBigInt(util.toPointer(value)), true);
  }

  // 0x40: u32
  set SampleMask(value: number) {
    this.view.setUint32(64, value, true);
  }

  // 0x44: pad4

  // 0x48: pointer
  set RasterizerState(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(72, util.toBigInt(util.toPointer(value)), true);
  }

  // 0x50: pointer
  set DepthStencilState(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(80, util.toBigInt(util.toPointer(value)), true);
  }

  // 0x58: pointer
  set InputLayout(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(88, util.toBigInt(util.toPointer(value)), true);
  }

  // 0x60: i32
  set IBStripCutValue(value: number) {
    this.view.setInt32(96, value, true);
  }

  // 0x64: i32
  set PrimitiveTopologyType(value: number) {
    this.view.setInt32(100, value, true);
  }

  // 0x68: u32
  set NumRenderTargets(value: number) {
    this.view.setUint32(104, value, true);
  }

  // 0x6c: pad4

  // 0x70: pointer
  set RTVFormats(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(112, util.toBigInt(util.toPointer(value)), true);
  }

  // 0x78: u32
  set DSVFormat(value: number) {
    this.view.setUint32(120, value, true);
  }

  // 0x7c: pad4

  // 0x80: pointer
  set SampleDesc(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(128, util.toBigInt(util.toPointer(value)), true);
  }

  // 0x88: u32
  set NodeMask(value: number) {
    this.view.setUint32(136, value, true);
  }

  // 0x8c: pad4

  // 0x90: pointer
  set CachedPSO(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(144, util.toBigInt(util.toPointer(value)), true);
  }

  // 0x98: u32
  set Flags(value: number) {
    this.view.setUint32(152, value, true);
  }

  // 0x9c: pad4
}

/**
 * Windows.Win32.Graphics.Direct3D12.D3D12_COMPUTE_PIPELINE_STATE_DESC (size: 40)
 */
export interface D3D12_COMPUTE_PIPELINE_STATE_DESC {
  /** Windows.Win32.Graphics.Direct3D12.ID3D12RootSignature */
  pRootSignature: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Graphics.Direct3D12.D3D12_SHADER_BYTECODE */
  CS: Uint8Array | Deno.PointerValue | null;
  /** u32 */
  NodeMask: number;
  /** Windows.Win32.Graphics.Direct3D12.D3D12_CACHED_PIPELINE_STATE */
  CachedPSO: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Graphics.Direct3D12.D3D12_PIPELINE_STATE_FLAGS */
  Flags: D3D12_PIPELINE_STATE_FLAGS;
}

export const sizeofD3D12_COMPUTE_PIPELINE_STATE_DESC = 40;

export function allocD3D12_COMPUTE_PIPELINE_STATE_DESC(data?: Partial<D3D12_COMPUTE_PIPELINE_STATE_DESC>): Uint8Array {
  const buf = new Uint8Array(sizeofD3D12_COMPUTE_PIPELINE_STATE_DESC);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.pRootSignature !== undefined) view.setBigUint64(0, data.pRootSignature === null ? 0n : util.toBigInt(util.toPointer(data.pRootSignature)), true);
  // 0x08: pointer
  if (data?.CS !== undefined) view.setBigUint64(8, data.CS === null ? 0n : util.toBigInt(util.toPointer(data.CS)), true);
  // 0x10: u32
  if (data?.NodeMask !== undefined) view.setUint32(16, Number(data.NodeMask), true);
  // 0x14: pad4
  // 0x18: pointer
  if (data?.CachedPSO !== undefined) view.setBigUint64(24, data.CachedPSO === null ? 0n : util.toBigInt(util.toPointer(data.CachedPSO)), true);
  // 0x20: u32
  if (data?.Flags !== undefined) view.setUint32(32, Number(data.Flags), true);
  // 0x24: pad4
  return buf;
}

export class D3D12_COMPUTE_PIPELINE_STATE_DESCView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get pRootSignature(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(0, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x08: pointer
  get CS(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(8, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x10: u32
  get NodeMask(): number {
    return this.view.getUint32(16, true);
  }

  // 0x14: pad4

  // 0x18: pointer
  get CachedPSO(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(24, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x20: u32
  get Flags(): number {
    return this.view.getUint32(32, true);
  }

  // 0x24: pad4

  // 0x00: pointer
  set pRootSignature(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(0, util.toBigInt(util.toPointer(value)), true);
  }

  // 0x08: pointer
  set CS(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(8, util.toBigInt(util.toPointer(value)), true);
  }

  // 0x10: u32
  set NodeMask(value: number) {
    this.view.setUint32(16, value, true);
  }

  // 0x14: pad4

  // 0x18: pointer
  set CachedPSO(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(24, util.toBigInt(util.toPointer(value)), true);
  }

  // 0x20: u32
  set Flags(value: number) {
    this.view.setUint32(32, value, true);
  }

  // 0x24: pad4
}

/**
 * Windows.Win32.Graphics.Direct3D12.D3D12_RT_FORMAT_ARRAY (size: 16)
 */
export interface D3D12_RT_FORMAT_ARRAY {
  /** array */
  RTFormats: Deno.PointerValue | null;
  /** u32 */
  NumRenderTargets: number;
}

export const sizeofD3D12_RT_FORMAT_ARRAY = 16;

export function allocD3D12_RT_FORMAT_ARRAY(data?: Partial<D3D12_RT_FORMAT_ARRAY>): Uint8Array {
  const buf = new Uint8Array(sizeofD3D12_RT_FORMAT_ARRAY);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.RTFormats !== undefined) view.setBigUint64(0, data.RTFormats === null ? 0n : util.toBigInt(util.toPointer(data.RTFormats)), true);
  // 0x08: u32
  if (data?.NumRenderTargets !== undefined) view.setUint32(8, Number(data.NumRenderTargets), true);
  // 0x0c: pad4
  return buf;
}

export class D3D12_RT_FORMAT_ARRAYView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get RTFormats(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(0, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x08: u32
  get NumRenderTargets(): number {
    return this.view.getUint32(8, true);
  }

  // 0x0c: pad4

  // 0x00: pointer
  set RTFormats(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(0, util.toBigInt(util.toPointer(value)), true);
  }

  // 0x08: u32
  set NumRenderTargets(value: number) {
    this.view.setUint32(8, value, true);
  }

  // 0x0c: pad4
}

/**
 * Windows.Win32.Graphics.Direct3D12.D3D12_PIPELINE_STATE_STREAM_DESC (size: 16)
 */
export interface D3D12_PIPELINE_STATE_STREAM_DESC {
  /** usize */
  SizeInBytes: number | bigint;
  /** ptr */
  pPipelineStateSubobjectStream: Deno.PointerValue | Uint8Array | null;
}

export const sizeofD3D12_PIPELINE_STATE_STREAM_DESC = 16;

export function allocD3D12_PIPELINE_STATE_STREAM_DESC(data?: Partial<D3D12_PIPELINE_STATE_STREAM_DESC>): Uint8Array {
  const buf = new Uint8Array(sizeofD3D12_PIPELINE_STATE_STREAM_DESC);
  const view = new DataView(buf.buffer);
  // 0x00: usize
  if (data?.SizeInBytes !== undefined) view.setBigUint64(0, util.toBigInt(data.SizeInBytes), true);
  // 0x08: pointer
  if (data?.pPipelineStateSubobjectStream !== undefined) view.setBigUint64(8, data.pPipelineStateSubobjectStream === null ? 0n : util.toBigInt(util.toPointer(data.pPipelineStateSubobjectStream)), true);
  return buf;
}

export class D3D12_PIPELINE_STATE_STREAM_DESCView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: usize
  get SizeInBytes(): number | bigint {
    return this.view.getBigUint64(0, true);
  }

  // 0x08: pointer
  get pPipelineStateSubobjectStream(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(8, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: usize
  set SizeInBytes(value: number | bigint) {
    this.view.setBigUint64(0, util.toBigInt(value), true);
  }

  // 0x08: pointer
  set pPipelineStateSubobjectStream(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(8, util.toBigInt(util.toPointer(value)), true);
  }
}

/**
 * Windows.Win32.Graphics.Direct3D12.D3D12_FEATURE_DATA_D3D12_OPTIONS (size: 64)
 */
export interface D3D12_FEATURE_DATA_D3D12_OPTIONS {
  /** Windows.Win32.Foundation.BOOL */
  DoublePrecisionFloatShaderOps: boolean;
  /** Windows.Win32.Foundation.BOOL */
  OutputMergerLogicOp: boolean;
  /** Windows.Win32.Graphics.Direct3D12.D3D12_SHADER_MIN_PRECISION_SUPPORT */
  MinPrecisionSupport: D3D12_SHADER_MIN_PRECISION_SUPPORT;
  /** Windows.Win32.Graphics.Direct3D12.D3D12_TILED_RESOURCES_TIER */
  TiledResourcesTier: D3D12_TILED_RESOURCES_TIER;
  /** Windows.Win32.Graphics.Direct3D12.D3D12_RESOURCE_BINDING_TIER */
  ResourceBindingTier: D3D12_RESOURCE_BINDING_TIER;
  /** Windows.Win32.Foundation.BOOL */
  PSSpecifiedStencilRefSupported: boolean;
  /** Windows.Win32.Foundation.BOOL */
  TypedUAVLoadAdditionalFormats: boolean;
  /** Windows.Win32.Foundation.BOOL */
  ROVsSupported: boolean;
  /** Windows.Win32.Graphics.Direct3D12.D3D12_CONSERVATIVE_RASTERIZATION_TIER */
  ConservativeRasterizationTier: D3D12_CONSERVATIVE_RASTERIZATION_TIER;
  /** u32 */
  MaxGPUVirtualAddressBitsPerResource: number;
  /** Windows.Win32.Foundation.BOOL */
  StandardSwizzle64KBSupported: boolean;
  /** Windows.Win32.Graphics.Direct3D12.D3D12_CROSS_NODE_SHARING_TIER */
  CrossNodeSharingTier: D3D12_CROSS_NODE_SHARING_TIER;
  /** Windows.Win32.Foundation.BOOL */
  CrossAdapterRowMajorTextureSupported: boolean;
  /** Windows.Win32.Foundation.BOOL */
  VPAndRTArrayIndexFromAnyShaderFeedingRasterizerSupportedWithoutGSEmulation: boolean;
  /** Windows.Win32.Graphics.Direct3D12.D3D12_RESOURCE_HEAP_TIER */
  ResourceHeapTier: D3D12_RESOURCE_HEAP_TIER;
}

export const sizeofD3D12_FEATURE_DATA_D3D12_OPTIONS = 64;

export function allocD3D12_FEATURE_DATA_D3D12_OPTIONS(data?: Partial<D3D12_FEATURE_DATA_D3D12_OPTIONS>): Uint8Array {
  const buf = new Uint8Array(sizeofD3D12_FEATURE_DATA_D3D12_OPTIONS);
  const view = new DataView(buf.buffer);
  // 0x00: i32
  if (data?.DoublePrecisionFloatShaderOps !== undefined) view.setInt32(0, Number(data.DoublePrecisionFloatShaderOps), true);
  // 0x04: i32
  if (data?.OutputMergerLogicOp !== undefined) view.setInt32(4, Number(data.OutputMergerLogicOp), true);
  // 0x08: u32
  if (data?.MinPrecisionSupport !== undefined) view.setUint32(8, Number(data.MinPrecisionSupport), true);
  // 0x0c: i32
  if (data?.TiledResourcesTier !== undefined) view.setInt32(12, Number(data.TiledResourcesTier), true);
  // 0x10: i32
  if (data?.ResourceBindingTier !== undefined) view.setInt32(16, Number(data.ResourceBindingTier), true);
  // 0x14: i32
  if (data?.PSSpecifiedStencilRefSupported !== undefined) view.setInt32(20, Number(data.PSSpecifiedStencilRefSupported), true);
  // 0x18: i32
  if (data?.TypedUAVLoadAdditionalFormats !== undefined) view.setInt32(24, Number(data.TypedUAVLoadAdditionalFormats), true);
  // 0x1c: i32
  if (data?.ROVsSupported !== undefined) view.setInt32(28, Number(data.ROVsSupported), true);
  // 0x20: i32
  if (data?.ConservativeRasterizationTier !== undefined) view.setInt32(32, Number(data.ConservativeRasterizationTier), true);
  // 0x24: u32
  if (data?.MaxGPUVirtualAddressBitsPerResource !== undefined) view.setUint32(36, Number(data.MaxGPUVirtualAddressBitsPerResource), true);
  // 0x28: i32
  if (data?.StandardSwizzle64KBSupported !== undefined) view.setInt32(40, Number(data.StandardSwizzle64KBSupported), true);
  // 0x2c: i32
  if (data?.CrossNodeSharingTier !== undefined) view.setInt32(44, Number(data.CrossNodeSharingTier), true);
  // 0x30: i32
  if (data?.CrossAdapterRowMajorTextureSupported !== undefined) view.setInt32(48, Number(data.CrossAdapterRowMajorTextureSupported), true);
  // 0x34: i32
  if (data?.VPAndRTArrayIndexFromAnyShaderFeedingRasterizerSupportedWithoutGSEmulation !== undefined) view.setInt32(52, Number(data.VPAndRTArrayIndexFromAnyShaderFeedingRasterizerSupportedWithoutGSEmulation), true);
  // 0x38: i32
  if (data?.ResourceHeapTier !== undefined) view.setInt32(56, Number(data.ResourceHeapTier), true);
  // 0x3c: pad4
  return buf;
}

export class D3D12_FEATURE_DATA_D3D12_OPTIONSView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: i32
  get DoublePrecisionFloatShaderOps(): number {
    return this.view.getInt32(0, true);
  }

  // 0x04: i32
  get OutputMergerLogicOp(): number {
    return this.view.getInt32(4, true);
  }

  // 0x08: u32
  get MinPrecisionSupport(): number {
    return this.view.getUint32(8, true);
  }

  // 0x0c: i32
  get TiledResourcesTier(): number {
    return this.view.getInt32(12, true);
  }

  // 0x10: i32
  get ResourceBindingTier(): number {
    return this.view.getInt32(16, true);
  }

  // 0x14: i32
  get PSSpecifiedStencilRefSupported(): number {
    return this.view.getInt32(20, true);
  }

  // 0x18: i32
  get TypedUAVLoadAdditionalFormats(): number {
    return this.view.getInt32(24, true);
  }

  // 0x1c: i32
  get ROVsSupported(): number {
    return this.view.getInt32(28, true);
  }

  // 0x20: i32
  get ConservativeRasterizationTier(): number {
    return this.view.getInt32(32, true);
  }

  // 0x24: u32
  get MaxGPUVirtualAddressBitsPerResource(): number {
    return this.view.getUint32(36, true);
  }

  // 0x28: i32
  get StandardSwizzle64KBSupported(): number {
    return this.view.getInt32(40, true);
  }

  // 0x2c: i32
  get CrossNodeSharingTier(): number {
    return this.view.getInt32(44, true);
  }

  // 0x30: i32
  get CrossAdapterRowMajorTextureSupported(): number {
    return this.view.getInt32(48, true);
  }

  // 0x34: i32
  get VPAndRTArrayIndexFromAnyShaderFeedingRasterizerSupportedWithoutGSEmulation(): number {
    return this.view.getInt32(52, true);
  }

  // 0x38: i32
  get ResourceHeapTier(): number {
    return this.view.getInt32(56, true);
  }

  // 0x3c: pad4

  // 0x00: i32
  set DoublePrecisionFloatShaderOps(value: number) {
    this.view.setInt32(0, value, true);
  }

  // 0x04: i32
  set OutputMergerLogicOp(value: number) {
    this.view.setInt32(4, value, true);
  }

  // 0x08: u32
  set MinPrecisionSupport(value: number) {
    this.view.setUint32(8, value, true);
  }

  // 0x0c: i32
  set TiledResourcesTier(value: number) {
    this.view.setInt32(12, value, true);
  }

  // 0x10: i32
  set ResourceBindingTier(value: number) {
    this.view.setInt32(16, value, true);
  }

  // 0x14: i32
  set PSSpecifiedStencilRefSupported(value: number) {
    this.view.setInt32(20, value, true);
  }

  // 0x18: i32
  set TypedUAVLoadAdditionalFormats(value: number) {
    this.view.setInt32(24, value, true);
  }

  // 0x1c: i32
  set ROVsSupported(value: number) {
    this.view.setInt32(28, value, true);
  }

  // 0x20: i32
  set ConservativeRasterizationTier(value: number) {
    this.view.setInt32(32, value, true);
  }

  // 0x24: u32
  set MaxGPUVirtualAddressBitsPerResource(value: number) {
    this.view.setUint32(36, value, true);
  }

  // 0x28: i32
  set StandardSwizzle64KBSupported(value: number) {
    this.view.setInt32(40, value, true);
  }

  // 0x2c: i32
  set CrossNodeSharingTier(value: number) {
    this.view.setInt32(44, value, true);
  }

  // 0x30: i32
  set CrossAdapterRowMajorTextureSupported(value: number) {
    this.view.setInt32(48, value, true);
  }

  // 0x34: i32
  set VPAndRTArrayIndexFromAnyShaderFeedingRasterizerSupportedWithoutGSEmulation(value: number) {
    this.view.setInt32(52, value, true);
  }

  // 0x38: i32
  set ResourceHeapTier(value: number) {
    this.view.setInt32(56, value, true);
  }

  // 0x3c: pad4
}

/**
 * Windows.Win32.Graphics.Direct3D12.D3D12_FEATURE_DATA_D3D12_OPTIONS1 (size: 24)
 */
export interface D3D12_FEATURE_DATA_D3D12_OPTIONS1 {
  /** Windows.Win32.Foundation.BOOL */
  WaveOps: boolean;
  /** u32 */
  WaveLaneCountMin: number;
  /** u32 */
  WaveLaneCountMax: number;
  /** u32 */
  TotalLaneCount: number;
  /** Windows.Win32.Foundation.BOOL */
  ExpandedComputeResourceStates: boolean;
  /** Windows.Win32.Foundation.BOOL */
  Int64ShaderOps: boolean;
}

export const sizeofD3D12_FEATURE_DATA_D3D12_OPTIONS1 = 24;

export function allocD3D12_FEATURE_DATA_D3D12_OPTIONS1(data?: Partial<D3D12_FEATURE_DATA_D3D12_OPTIONS1>): Uint8Array {
  const buf = new Uint8Array(sizeofD3D12_FEATURE_DATA_D3D12_OPTIONS1);
  const view = new DataView(buf.buffer);
  // 0x00: i32
  if (data?.WaveOps !== undefined) view.setInt32(0, Number(data.WaveOps), true);
  // 0x04: u32
  if (data?.WaveLaneCountMin !== undefined) view.setUint32(4, Number(data.WaveLaneCountMin), true);
  // 0x08: u32
  if (data?.WaveLaneCountMax !== undefined) view.setUint32(8, Number(data.WaveLaneCountMax), true);
  // 0x0c: u32
  if (data?.TotalLaneCount !== undefined) view.setUint32(12, Number(data.TotalLaneCount), true);
  // 0x10: i32
  if (data?.ExpandedComputeResourceStates !== undefined) view.setInt32(16, Number(data.ExpandedComputeResourceStates), true);
  // 0x14: i32
  if (data?.Int64ShaderOps !== undefined) view.setInt32(20, Number(data.Int64ShaderOps), true);
  return buf;
}

export class D3D12_FEATURE_DATA_D3D12_OPTIONS1View {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: i32
  get WaveOps(): number {
    return this.view.getInt32(0, true);
  }

  // 0x04: u32
  get WaveLaneCountMin(): number {
    return this.view.getUint32(4, true);
  }

  // 0x08: u32
  get WaveLaneCountMax(): number {
    return this.view.getUint32(8, true);
  }

  // 0x0c: u32
  get TotalLaneCount(): number {
    return this.view.getUint32(12, true);
  }

  // 0x10: i32
  get ExpandedComputeResourceStates(): number {
    return this.view.getInt32(16, true);
  }

  // 0x14: i32
  get Int64ShaderOps(): number {
    return this.view.getInt32(20, true);
  }

  // 0x00: i32
  set WaveOps(value: number) {
    this.view.setInt32(0, value, true);
  }

  // 0x04: u32
  set WaveLaneCountMin(value: number) {
    this.view.setUint32(4, value, true);
  }

  // 0x08: u32
  set WaveLaneCountMax(value: number) {
    this.view.setUint32(8, value, true);
  }

  // 0x0c: u32
  set TotalLaneCount(value: number) {
    this.view.setUint32(12, value, true);
  }

  // 0x10: i32
  set ExpandedComputeResourceStates(value: number) {
    this.view.setInt32(16, value, true);
  }

  // 0x14: i32
  set Int64ShaderOps(value: number) {
    this.view.setInt32(20, value, true);
  }
}

/**
 * Windows.Win32.Graphics.Direct3D12.D3D12_FEATURE_DATA_D3D12_OPTIONS2 (size: 8)
 */
export interface D3D12_FEATURE_DATA_D3D12_OPTIONS2 {
  /** Windows.Win32.Foundation.BOOL */
  DepthBoundsTestSupported: boolean;
  /** Windows.Win32.Graphics.Direct3D12.D3D12_PROGRAMMABLE_SAMPLE_POSITIONS_TIER */
  ProgrammableSamplePositionsTier: D3D12_PROGRAMMABLE_SAMPLE_POSITIONS_TIER;
}

export const sizeofD3D12_FEATURE_DATA_D3D12_OPTIONS2 = 8;

export function allocD3D12_FEATURE_DATA_D3D12_OPTIONS2(data?: Partial<D3D12_FEATURE_DATA_D3D12_OPTIONS2>): Uint8Array {
  const buf = new Uint8Array(sizeofD3D12_FEATURE_DATA_D3D12_OPTIONS2);
  const view = new DataView(buf.buffer);
  // 0x00: i32
  if (data?.DepthBoundsTestSupported !== undefined) view.setInt32(0, Number(data.DepthBoundsTestSupported), true);
  // 0x04: i32
  if (data?.ProgrammableSamplePositionsTier !== undefined) view.setInt32(4, Number(data.ProgrammableSamplePositionsTier), true);
  return buf;
}

export class D3D12_FEATURE_DATA_D3D12_OPTIONS2View {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: i32
  get DepthBoundsTestSupported(): number {
    return this.view.getInt32(0, true);
  }

  // 0x04: i32
  get ProgrammableSamplePositionsTier(): number {
    return this.view.getInt32(4, true);
  }

  // 0x00: i32
  set DepthBoundsTestSupported(value: number) {
    this.view.setInt32(0, value, true);
  }

  // 0x04: i32
  set ProgrammableSamplePositionsTier(value: number) {
    this.view.setInt32(4, value, true);
  }
}

/**
 * Windows.Win32.Graphics.Direct3D12.D3D12_FEATURE_DATA_ROOT_SIGNATURE (size: 8)
 */
export interface D3D12_FEATURE_DATA_ROOT_SIGNATURE {
  /** Windows.Win32.Graphics.Direct3D12.D3D_ROOT_SIGNATURE_VERSION */
  HighestVersion: D3D_ROOT_SIGNATURE_VERSION;
}

export const sizeofD3D12_FEATURE_DATA_ROOT_SIGNATURE = 8;

export function allocD3D12_FEATURE_DATA_ROOT_SIGNATURE(data?: Partial<D3D12_FEATURE_DATA_ROOT_SIGNATURE>): Uint8Array {
  const buf = new Uint8Array(sizeofD3D12_FEATURE_DATA_ROOT_SIGNATURE);
  const view = new DataView(buf.buffer);
  // 0x00: i32
  if (data?.HighestVersion !== undefined) view.setInt32(0, Number(data.HighestVersion), true);
  // 0x04: pad4
  return buf;
}

export class D3D12_FEATURE_DATA_ROOT_SIGNATUREView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: i32
  get HighestVersion(): number {
    return this.view.getInt32(0, true);
  }

  // 0x04: pad4

  // 0x00: i32
  set HighestVersion(value: number) {
    this.view.setInt32(0, value, true);
  }

  // 0x04: pad4
}

/**
 * Windows.Win32.Graphics.Direct3D12.D3D12_FEATURE_DATA_ARCHITECTURE (size: 16)
 */
export interface D3D12_FEATURE_DATA_ARCHITECTURE {
  /** u32 */
  NodeIndex: number;
  /** Windows.Win32.Foundation.BOOL */
  TileBasedRenderer: boolean;
  /** Windows.Win32.Foundation.BOOL */
  UMA: boolean;
  /** Windows.Win32.Foundation.BOOL */
  CacheCoherentUMA: boolean;
}

export const sizeofD3D12_FEATURE_DATA_ARCHITECTURE = 16;

export function allocD3D12_FEATURE_DATA_ARCHITECTURE(data?: Partial<D3D12_FEATURE_DATA_ARCHITECTURE>): Uint8Array {
  const buf = new Uint8Array(sizeofD3D12_FEATURE_DATA_ARCHITECTURE);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.NodeIndex !== undefined) view.setUint32(0, Number(data.NodeIndex), true);
  // 0x04: i32
  if (data?.TileBasedRenderer !== undefined) view.setInt32(4, Number(data.TileBasedRenderer), true);
  // 0x08: i32
  if (data?.UMA !== undefined) view.setInt32(8, Number(data.UMA), true);
  // 0x0c: i32
  if (data?.CacheCoherentUMA !== undefined) view.setInt32(12, Number(data.CacheCoherentUMA), true);
  return buf;
}

export class D3D12_FEATURE_DATA_ARCHITECTUREView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get NodeIndex(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: i32
  get TileBasedRenderer(): number {
    return this.view.getInt32(4, true);
  }

  // 0x08: i32
  get UMA(): number {
    return this.view.getInt32(8, true);
  }

  // 0x0c: i32
  get CacheCoherentUMA(): number {
    return this.view.getInt32(12, true);
  }

  // 0x00: u32
  set NodeIndex(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: i32
  set TileBasedRenderer(value: number) {
    this.view.setInt32(4, value, true);
  }

  // 0x08: i32
  set UMA(value: number) {
    this.view.setInt32(8, value, true);
  }

  // 0x0c: i32
  set CacheCoherentUMA(value: number) {
    this.view.setInt32(12, value, true);
  }
}

/**
 * Windows.Win32.Graphics.Direct3D12.D3D12_FEATURE_DATA_ARCHITECTURE1 (size: 24)
 */
export interface D3D12_FEATURE_DATA_ARCHITECTURE1 {
  /** u32 */
  NodeIndex: number;
  /** Windows.Win32.Foundation.BOOL */
  TileBasedRenderer: boolean;
  /** Windows.Win32.Foundation.BOOL */
  UMA: boolean;
  /** Windows.Win32.Foundation.BOOL */
  CacheCoherentUMA: boolean;
  /** Windows.Win32.Foundation.BOOL */
  IsolatedMMU: boolean;
}

export const sizeofD3D12_FEATURE_DATA_ARCHITECTURE1 = 24;

export function allocD3D12_FEATURE_DATA_ARCHITECTURE1(data?: Partial<D3D12_FEATURE_DATA_ARCHITECTURE1>): Uint8Array {
  const buf = new Uint8Array(sizeofD3D12_FEATURE_DATA_ARCHITECTURE1);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.NodeIndex !== undefined) view.setUint32(0, Number(data.NodeIndex), true);
  // 0x04: i32
  if (data?.TileBasedRenderer !== undefined) view.setInt32(4, Number(data.TileBasedRenderer), true);
  // 0x08: i32
  if (data?.UMA !== undefined) view.setInt32(8, Number(data.UMA), true);
  // 0x0c: i32
  if (data?.CacheCoherentUMA !== undefined) view.setInt32(12, Number(data.CacheCoherentUMA), true);
  // 0x10: i32
  if (data?.IsolatedMMU !== undefined) view.setInt32(16, Number(data.IsolatedMMU), true);
  // 0x14: pad4
  return buf;
}

export class D3D12_FEATURE_DATA_ARCHITECTURE1View {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get NodeIndex(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: i32
  get TileBasedRenderer(): number {
    return this.view.getInt32(4, true);
  }

  // 0x08: i32
  get UMA(): number {
    return this.view.getInt32(8, true);
  }

  // 0x0c: i32
  get CacheCoherentUMA(): number {
    return this.view.getInt32(12, true);
  }

  // 0x10: i32
  get IsolatedMMU(): number {
    return this.view.getInt32(16, true);
  }

  // 0x14: pad4

  // 0x00: u32
  set NodeIndex(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: i32
  set TileBasedRenderer(value: number) {
    this.view.setInt32(4, value, true);
  }

  // 0x08: i32
  set UMA(value: number) {
    this.view.setInt32(8, value, true);
  }

  // 0x0c: i32
  set CacheCoherentUMA(value: number) {
    this.view.setInt32(12, value, true);
  }

  // 0x10: i32
  set IsolatedMMU(value: number) {
    this.view.setInt32(16, value, true);
  }

  // 0x14: pad4
}

/**
 * Windows.Win32.Graphics.Direct3D12.D3D12_FEATURE_DATA_FEATURE_LEVELS (size: 24)
 */
export interface D3D12_FEATURE_DATA_FEATURE_LEVELS {
  /** u32 */
  NumFeatureLevels: number;
  /** ptr */
  pFeatureLevelsRequested: Deno.PointerValue | Uint8Array | null;
  /** Windows.Win32.Graphics.Direct3D.D3D_FEATURE_LEVEL */
  MaxSupportedFeatureLevel: D3D_FEATURE_LEVEL;
}

export const sizeofD3D12_FEATURE_DATA_FEATURE_LEVELS = 24;

export function allocD3D12_FEATURE_DATA_FEATURE_LEVELS(data?: Partial<D3D12_FEATURE_DATA_FEATURE_LEVELS>): Uint8Array {
  const buf = new Uint8Array(sizeofD3D12_FEATURE_DATA_FEATURE_LEVELS);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.NumFeatureLevels !== undefined) view.setUint32(0, Number(data.NumFeatureLevels), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.pFeatureLevelsRequested !== undefined) view.setBigUint64(8, data.pFeatureLevelsRequested === null ? 0n : util.toBigInt(util.toPointer(data.pFeatureLevelsRequested)), true);
  // 0x10: i32
  if (data?.MaxSupportedFeatureLevel !== undefined) view.setInt32(16, Number(data.MaxSupportedFeatureLevel), true);
  // 0x14: pad4
  return buf;
}

export class D3D12_FEATURE_DATA_FEATURE_LEVELSView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get NumFeatureLevels(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  get pFeatureLevelsRequested(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(8, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x10: i32
  get MaxSupportedFeatureLevel(): number {
    return this.view.getInt32(16, true);
  }

  // 0x14: pad4

  // 0x00: u32
  set NumFeatureLevels(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  set pFeatureLevelsRequested(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(8, util.toBigInt(util.toPointer(value)), true);
  }

  // 0x10: i32
  set MaxSupportedFeatureLevel(value: number) {
    this.view.setInt32(16, value, true);
  }

  // 0x14: pad4
}

/**
 * Windows.Win32.Graphics.Direct3D12.D3D12_FEATURE_DATA_SHADER_MODEL (size: 8)
 */
export interface D3D12_FEATURE_DATA_SHADER_MODEL {
  /** Windows.Win32.Graphics.Direct3D12.D3D_SHADER_MODEL */
  HighestShaderModel: D3D_SHADER_MODEL;
}

export const sizeofD3D12_FEATURE_DATA_SHADER_MODEL = 8;

export function allocD3D12_FEATURE_DATA_SHADER_MODEL(data?: Partial<D3D12_FEATURE_DATA_SHADER_MODEL>): Uint8Array {
  const buf = new Uint8Array(sizeofD3D12_FEATURE_DATA_SHADER_MODEL);
  const view = new DataView(buf.buffer);
  // 0x00: i32
  if (data?.HighestShaderModel !== undefined) view.setInt32(0, Number(data.HighestShaderModel), true);
  // 0x04: pad4
  return buf;
}

export class D3D12_FEATURE_DATA_SHADER_MODELView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: i32
  get HighestShaderModel(): number {
    return this.view.getInt32(0, true);
  }

  // 0x04: pad4

  // 0x00: i32
  set HighestShaderModel(value: number) {
    this.view.setInt32(0, value, true);
  }

  // 0x04: pad4
}

/**
 * Windows.Win32.Graphics.Direct3D12.D3D12_FEATURE_DATA_FORMAT_SUPPORT (size: 16)
 */
export interface D3D12_FEATURE_DATA_FORMAT_SUPPORT {
  /** Windows.Win32.Graphics.Dxgi.Common.DXGI_FORMAT */
  Format: DXGI_FORMAT;
  /** Windows.Win32.Graphics.Direct3D12.D3D12_FORMAT_SUPPORT1 */
  Support1: D3D12_FORMAT_SUPPORT1;
  /** Windows.Win32.Graphics.Direct3D12.D3D12_FORMAT_SUPPORT2 */
  Support2: D3D12_FORMAT_SUPPORT2;
}

export const sizeofD3D12_FEATURE_DATA_FORMAT_SUPPORT = 16;

export function allocD3D12_FEATURE_DATA_FORMAT_SUPPORT(data?: Partial<D3D12_FEATURE_DATA_FORMAT_SUPPORT>): Uint8Array {
  const buf = new Uint8Array(sizeofD3D12_FEATURE_DATA_FORMAT_SUPPORT);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.Format !== undefined) view.setUint32(0, Number(data.Format), true);
  // 0x04: u32
  if (data?.Support1 !== undefined) view.setUint32(4, Number(data.Support1), true);
  // 0x08: u32
  if (data?.Support2 !== undefined) view.setUint32(8, Number(data.Support2), true);
  // 0x0c: pad4
  return buf;
}

export class D3D12_FEATURE_DATA_FORMAT_SUPPORTView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get Format(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: u32
  get Support1(): number {
    return this.view.getUint32(4, true);
  }

  // 0x08: u32
  get Support2(): number {
    return this.view.getUint32(8, true);
  }

  // 0x0c: pad4

  // 0x00: u32
  set Format(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: u32
  set Support1(value: number) {
    this.view.setUint32(4, value, true);
  }

  // 0x08: u32
  set Support2(value: number) {
    this.view.setUint32(8, value, true);
  }

  // 0x0c: pad4
}

/**
 * Windows.Win32.Graphics.Direct3D12.D3D12_FEATURE_DATA_MULTISAMPLE_QUALITY_LEVELS (size: 16)
 */
export interface D3D12_FEATURE_DATA_MULTISAMPLE_QUALITY_LEVELS {
  /** Windows.Win32.Graphics.Dxgi.Common.DXGI_FORMAT */
  Format: DXGI_FORMAT;
  /** u32 */
  SampleCount: number;
  /** Windows.Win32.Graphics.Direct3D12.D3D12_MULTISAMPLE_QUALITY_LEVEL_FLAGS */
  Flags: D3D12_MULTISAMPLE_QUALITY_LEVEL_FLAGS;
  /** u32 */
  NumQualityLevels: number;
}

export const sizeofD3D12_FEATURE_DATA_MULTISAMPLE_QUALITY_LEVELS = 16;

export function allocD3D12_FEATURE_DATA_MULTISAMPLE_QUALITY_LEVELS(data?: Partial<D3D12_FEATURE_DATA_MULTISAMPLE_QUALITY_LEVELS>): Uint8Array {
  const buf = new Uint8Array(sizeofD3D12_FEATURE_DATA_MULTISAMPLE_QUALITY_LEVELS);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.Format !== undefined) view.setUint32(0, Number(data.Format), true);
  // 0x04: u32
  if (data?.SampleCount !== undefined) view.setUint32(4, Number(data.SampleCount), true);
  // 0x08: u32
  if (data?.Flags !== undefined) view.setUint32(8, Number(data.Flags), true);
  // 0x0c: u32
  if (data?.NumQualityLevels !== undefined) view.setUint32(12, Number(data.NumQualityLevels), true);
  return buf;
}

export class D3D12_FEATURE_DATA_MULTISAMPLE_QUALITY_LEVELSView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get Format(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: u32
  get SampleCount(): number {
    return this.view.getUint32(4, true);
  }

  // 0x08: u32
  get Flags(): number {
    return this.view.getUint32(8, true);
  }

  // 0x0c: u32
  get NumQualityLevels(): number {
    return this.view.getUint32(12, true);
  }

  // 0x00: u32
  set Format(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: u32
  set SampleCount(value: number) {
    this.view.setUint32(4, value, true);
  }

  // 0x08: u32
  set Flags(value: number) {
    this.view.setUint32(8, value, true);
  }

  // 0x0c: u32
  set NumQualityLevels(value: number) {
    this.view.setUint32(12, value, true);
  }
}

/**
 * Windows.Win32.Graphics.Direct3D12.D3D12_FEATURE_DATA_FORMAT_INFO (size: 8)
 */
export interface D3D12_FEATURE_DATA_FORMAT_INFO {
  /** Windows.Win32.Graphics.Dxgi.Common.DXGI_FORMAT */
  Format: DXGI_FORMAT;
  /** u8 */
  PlaneCount: number;
}

export const sizeofD3D12_FEATURE_DATA_FORMAT_INFO = 8;

export function allocD3D12_FEATURE_DATA_FORMAT_INFO(data?: Partial<D3D12_FEATURE_DATA_FORMAT_INFO>): Uint8Array {
  const buf = new Uint8Array(sizeofD3D12_FEATURE_DATA_FORMAT_INFO);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.Format !== undefined) view.setUint32(0, Number(data.Format), true);
  // 0x04: u8
  if (data?.PlaneCount !== undefined) view.setUint8(4, Number(data.PlaneCount));
  // 0x05: pad3
  return buf;
}

export class D3D12_FEATURE_DATA_FORMAT_INFOView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get Format(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: u8
  get PlaneCount(): number {
    return this.view.getUint8(4);
  }

  // 0x05: pad3

  // 0x00: u32
  set Format(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: u8
  set PlaneCount(value: number) {
    this.view.setUint8(4, value);
  }

  // 0x05: pad3
}

/**
 * Windows.Win32.Graphics.Direct3D12.D3D12_FEATURE_DATA_GPU_VIRTUAL_ADDRESS_SUPPORT (size: 8)
 */
export interface D3D12_FEATURE_DATA_GPU_VIRTUAL_ADDRESS_SUPPORT {
  /** u32 */
  MaxGPUVirtualAddressBitsPerResource: number;
  /** u32 */
  MaxGPUVirtualAddressBitsPerProcess: number;
}

export const sizeofD3D12_FEATURE_DATA_GPU_VIRTUAL_ADDRESS_SUPPORT = 8;

export function allocD3D12_FEATURE_DATA_GPU_VIRTUAL_ADDRESS_SUPPORT(data?: Partial<D3D12_FEATURE_DATA_GPU_VIRTUAL_ADDRESS_SUPPORT>): Uint8Array {
  const buf = new Uint8Array(sizeofD3D12_FEATURE_DATA_GPU_VIRTUAL_ADDRESS_SUPPORT);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.MaxGPUVirtualAddressBitsPerResource !== undefined) view.setUint32(0, Number(data.MaxGPUVirtualAddressBitsPerResource), true);
  // 0x04: u32
  if (data?.MaxGPUVirtualAddressBitsPerProcess !== undefined) view.setUint32(4, Number(data.MaxGPUVirtualAddressBitsPerProcess), true);
  return buf;
}

export class D3D12_FEATURE_DATA_GPU_VIRTUAL_ADDRESS_SUPPORTView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get MaxGPUVirtualAddressBitsPerResource(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: u32
  get MaxGPUVirtualAddressBitsPerProcess(): number {
    return this.view.getUint32(4, true);
  }

  // 0x00: u32
  set MaxGPUVirtualAddressBitsPerResource(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: u32
  set MaxGPUVirtualAddressBitsPerProcess(value: number) {
    this.view.setUint32(4, value, true);
  }
}

/**
 * Windows.Win32.Graphics.Direct3D12.D3D12_FEATURE_DATA_SHADER_CACHE (size: 8)
 */
export interface D3D12_FEATURE_DATA_SHADER_CACHE {
  /** Windows.Win32.Graphics.Direct3D12.D3D12_SHADER_CACHE_SUPPORT_FLAGS */
  SupportFlags: D3D12_SHADER_CACHE_SUPPORT_FLAGS;
}

export const sizeofD3D12_FEATURE_DATA_SHADER_CACHE = 8;

export function allocD3D12_FEATURE_DATA_SHADER_CACHE(data?: Partial<D3D12_FEATURE_DATA_SHADER_CACHE>): Uint8Array {
  const buf = new Uint8Array(sizeofD3D12_FEATURE_DATA_SHADER_CACHE);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.SupportFlags !== undefined) view.setUint32(0, Number(data.SupportFlags), true);
  // 0x04: pad4
  return buf;
}

export class D3D12_FEATURE_DATA_SHADER_CACHEView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get SupportFlags(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: pad4

  // 0x00: u32
  set SupportFlags(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: pad4
}

/**
 * Windows.Win32.Graphics.Direct3D12.D3D12_FEATURE_DATA_COMMAND_QUEUE_PRIORITY (size: 16)
 */
export interface D3D12_FEATURE_DATA_COMMAND_QUEUE_PRIORITY {
  /** Windows.Win32.Graphics.Direct3D12.D3D12_COMMAND_LIST_TYPE */
  CommandListType: D3D12_COMMAND_LIST_TYPE;
  /** u32 */
  Priority: number;
  /** Windows.Win32.Foundation.BOOL */
  PriorityForTypeIsSupported: boolean;
}

export const sizeofD3D12_FEATURE_DATA_COMMAND_QUEUE_PRIORITY = 16;

export function allocD3D12_FEATURE_DATA_COMMAND_QUEUE_PRIORITY(data?: Partial<D3D12_FEATURE_DATA_COMMAND_QUEUE_PRIORITY>): Uint8Array {
  const buf = new Uint8Array(sizeofD3D12_FEATURE_DATA_COMMAND_QUEUE_PRIORITY);
  const view = new DataView(buf.buffer);
  // 0x00: i32
  if (data?.CommandListType !== undefined) view.setInt32(0, Number(data.CommandListType), true);
  // 0x04: u32
  if (data?.Priority !== undefined) view.setUint32(4, Number(data.Priority), true);
  // 0x08: i32
  if (data?.PriorityForTypeIsSupported !== undefined) view.setInt32(8, Number(data.PriorityForTypeIsSupported), true);
  // 0x0c: pad4
  return buf;
}

export class D3D12_FEATURE_DATA_COMMAND_QUEUE_PRIORITYView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: i32
  get CommandListType(): number {
    return this.view.getInt32(0, true);
  }

  // 0x04: u32
  get Priority(): number {
    return this.view.getUint32(4, true);
  }

  // 0x08: i32
  get PriorityForTypeIsSupported(): number {
    return this.view.getInt32(8, true);
  }

  // 0x0c: pad4

  // 0x00: i32
  set CommandListType(value: number) {
    this.view.setInt32(0, value, true);
  }

  // 0x04: u32
  set Priority(value: number) {
    this.view.setUint32(4, value, true);
  }

  // 0x08: i32
  set PriorityForTypeIsSupported(value: number) {
    this.view.setInt32(8, value, true);
  }

  // 0x0c: pad4
}

/**
 * Windows.Win32.Graphics.Direct3D12.D3D12_FEATURE_DATA_D3D12_OPTIONS3 (size: 24)
 */
export interface D3D12_FEATURE_DATA_D3D12_OPTIONS3 {
  /** Windows.Win32.Foundation.BOOL */
  CopyQueueTimestampQueriesSupported: boolean;
  /** Windows.Win32.Foundation.BOOL */
  CastingFullyTypedFormatSupported: boolean;
  /** Windows.Win32.Graphics.Direct3D12.D3D12_COMMAND_LIST_SUPPORT_FLAGS */
  WriteBufferImmediateSupportFlags: D3D12_COMMAND_LIST_SUPPORT_FLAGS;
  /** Windows.Win32.Graphics.Direct3D12.D3D12_VIEW_INSTANCING_TIER */
  ViewInstancingTier: D3D12_VIEW_INSTANCING_TIER;
  /** Windows.Win32.Foundation.BOOL */
  BarycentricsSupported: boolean;
}

export const sizeofD3D12_FEATURE_DATA_D3D12_OPTIONS3 = 24;

export function allocD3D12_FEATURE_DATA_D3D12_OPTIONS3(data?: Partial<D3D12_FEATURE_DATA_D3D12_OPTIONS3>): Uint8Array {
  const buf = new Uint8Array(sizeofD3D12_FEATURE_DATA_D3D12_OPTIONS3);
  const view = new DataView(buf.buffer);
  // 0x00: i32
  if (data?.CopyQueueTimestampQueriesSupported !== undefined) view.setInt32(0, Number(data.CopyQueueTimestampQueriesSupported), true);
  // 0x04: i32
  if (data?.CastingFullyTypedFormatSupported !== undefined) view.setInt32(4, Number(data.CastingFullyTypedFormatSupported), true);
  // 0x08: u32
  if (data?.WriteBufferImmediateSupportFlags !== undefined) view.setUint32(8, Number(data.WriteBufferImmediateSupportFlags), true);
  // 0x0c: i32
  if (data?.ViewInstancingTier !== undefined) view.setInt32(12, Number(data.ViewInstancingTier), true);
  // 0x10: i32
  if (data?.BarycentricsSupported !== undefined) view.setInt32(16, Number(data.BarycentricsSupported), true);
  // 0x14: pad4
  return buf;
}

export class D3D12_FEATURE_DATA_D3D12_OPTIONS3View {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: i32
  get CopyQueueTimestampQueriesSupported(): number {
    return this.view.getInt32(0, true);
  }

  // 0x04: i32
  get CastingFullyTypedFormatSupported(): number {
    return this.view.getInt32(4, true);
  }

  // 0x08: u32
  get WriteBufferImmediateSupportFlags(): number {
    return this.view.getUint32(8, true);
  }

  // 0x0c: i32
  get ViewInstancingTier(): number {
    return this.view.getInt32(12, true);
  }

  // 0x10: i32
  get BarycentricsSupported(): number {
    return this.view.getInt32(16, true);
  }

  // 0x14: pad4

  // 0x00: i32
  set CopyQueueTimestampQueriesSupported(value: number) {
    this.view.setInt32(0, value, true);
  }

  // 0x04: i32
  set CastingFullyTypedFormatSupported(value: number) {
    this.view.setInt32(4, value, true);
  }

  // 0x08: u32
  set WriteBufferImmediateSupportFlags(value: number) {
    this.view.setUint32(8, value, true);
  }

  // 0x0c: i32
  set ViewInstancingTier(value: number) {
    this.view.setInt32(12, value, true);
  }

  // 0x10: i32
  set BarycentricsSupported(value: number) {
    this.view.setInt32(16, value, true);
  }

  // 0x14: pad4
}

/**
 * Windows.Win32.Graphics.Direct3D12.D3D12_FEATURE_DATA_EXISTING_HEAPS (size: 8)
 */
export interface D3D12_FEATURE_DATA_EXISTING_HEAPS {
  /** Windows.Win32.Foundation.BOOL */
  Supported: boolean;
}

export const sizeofD3D12_FEATURE_DATA_EXISTING_HEAPS = 8;

export function allocD3D12_FEATURE_DATA_EXISTING_HEAPS(data?: Partial<D3D12_FEATURE_DATA_EXISTING_HEAPS>): Uint8Array {
  const buf = new Uint8Array(sizeofD3D12_FEATURE_DATA_EXISTING_HEAPS);
  const view = new DataView(buf.buffer);
  // 0x00: i32
  if (data?.Supported !== undefined) view.setInt32(0, Number(data.Supported), true);
  // 0x04: pad4
  return buf;
}

export class D3D12_FEATURE_DATA_EXISTING_HEAPSView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: i32
  get Supported(): number {
    return this.view.getInt32(0, true);
  }

  // 0x04: pad4

  // 0x00: i32
  set Supported(value: number) {
    this.view.setInt32(0, value, true);
  }

  // 0x04: pad4
}

/**
 * Windows.Win32.Graphics.Direct3D12.D3D12_FEATURE_DATA_DISPLAYABLE (size: 8)
 */
export interface D3D12_FEATURE_DATA_DISPLAYABLE {
  /** Windows.Win32.Foundation.BOOL */
  DisplayableTexture: boolean;
  /** Windows.Win32.Graphics.Direct3D12.D3D12_SHARED_RESOURCE_COMPATIBILITY_TIER */
  SharedResourceCompatibilityTier: D3D12_SHARED_RESOURCE_COMPATIBILITY_TIER;
}

export const sizeofD3D12_FEATURE_DATA_DISPLAYABLE = 8;

export function allocD3D12_FEATURE_DATA_DISPLAYABLE(data?: Partial<D3D12_FEATURE_DATA_DISPLAYABLE>): Uint8Array {
  const buf = new Uint8Array(sizeofD3D12_FEATURE_DATA_DISPLAYABLE);
  const view = new DataView(buf.buffer);
  // 0x00: i32
  if (data?.DisplayableTexture !== undefined) view.setInt32(0, Number(data.DisplayableTexture), true);
  // 0x04: i32
  if (data?.SharedResourceCompatibilityTier !== undefined) view.setInt32(4, Number(data.SharedResourceCompatibilityTier), true);
  return buf;
}

export class D3D12_FEATURE_DATA_DISPLAYABLEView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: i32
  get DisplayableTexture(): number {
    return this.view.getInt32(0, true);
  }

  // 0x04: i32
  get SharedResourceCompatibilityTier(): number {
    return this.view.getInt32(4, true);
  }

  // 0x00: i32
  set DisplayableTexture(value: number) {
    this.view.setInt32(0, value, true);
  }

  // 0x04: i32
  set SharedResourceCompatibilityTier(value: number) {
    this.view.setInt32(4, value, true);
  }
}

/**
 * Windows.Win32.Graphics.Direct3D12.D3D12_FEATURE_DATA_D3D12_OPTIONS4 (size: 16)
 */
export interface D3D12_FEATURE_DATA_D3D12_OPTIONS4 {
  /** Windows.Win32.Foundation.BOOL */
  MSAA64KBAlignedTextureSupported: boolean;
  /** Windows.Win32.Graphics.Direct3D12.D3D12_SHARED_RESOURCE_COMPATIBILITY_TIER */
  SharedResourceCompatibilityTier: D3D12_SHARED_RESOURCE_COMPATIBILITY_TIER;
  /** Windows.Win32.Foundation.BOOL */
  Native16BitShaderOpsSupported: boolean;
}

export const sizeofD3D12_FEATURE_DATA_D3D12_OPTIONS4 = 16;

export function allocD3D12_FEATURE_DATA_D3D12_OPTIONS4(data?: Partial<D3D12_FEATURE_DATA_D3D12_OPTIONS4>): Uint8Array {
  const buf = new Uint8Array(sizeofD3D12_FEATURE_DATA_D3D12_OPTIONS4);
  const view = new DataView(buf.buffer);
  // 0x00: i32
  if (data?.MSAA64KBAlignedTextureSupported !== undefined) view.setInt32(0, Number(data.MSAA64KBAlignedTextureSupported), true);
  // 0x04: i32
  if (data?.SharedResourceCompatibilityTier !== undefined) view.setInt32(4, Number(data.SharedResourceCompatibilityTier), true);
  // 0x08: i32
  if (data?.Native16BitShaderOpsSupported !== undefined) view.setInt32(8, Number(data.Native16BitShaderOpsSupported), true);
  // 0x0c: pad4
  return buf;
}

export class D3D12_FEATURE_DATA_D3D12_OPTIONS4View {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: i32
  get MSAA64KBAlignedTextureSupported(): number {
    return this.view.getInt32(0, true);
  }

  // 0x04: i32
  get SharedResourceCompatibilityTier(): number {
    return this.view.getInt32(4, true);
  }

  // 0x08: i32
  get Native16BitShaderOpsSupported(): number {
    return this.view.getInt32(8, true);
  }

  // 0x0c: pad4

  // 0x00: i32
  set MSAA64KBAlignedTextureSupported(value: number) {
    this.view.setInt32(0, value, true);
  }

  // 0x04: i32
  set SharedResourceCompatibilityTier(value: number) {
    this.view.setInt32(4, value, true);
  }

  // 0x08: i32
  set Native16BitShaderOpsSupported(value: number) {
    this.view.setInt32(8, value, true);
  }

  // 0x0c: pad4
}

/**
 * Windows.Win32.Graphics.Direct3D12.D3D12_FEATURE_DATA_SERIALIZATION (size: 8)
 */
export interface D3D12_FEATURE_DATA_SERIALIZATION {
  /** u32 */
  NodeIndex: number;
  /** Windows.Win32.Graphics.Direct3D12.D3D12_HEAP_SERIALIZATION_TIER */
  HeapSerializationTier: D3D12_HEAP_SERIALIZATION_TIER;
}

export const sizeofD3D12_FEATURE_DATA_SERIALIZATION = 8;

export function allocD3D12_FEATURE_DATA_SERIALIZATION(data?: Partial<D3D12_FEATURE_DATA_SERIALIZATION>): Uint8Array {
  const buf = new Uint8Array(sizeofD3D12_FEATURE_DATA_SERIALIZATION);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.NodeIndex !== undefined) view.setUint32(0, Number(data.NodeIndex), true);
  // 0x04: i32
  if (data?.HeapSerializationTier !== undefined) view.setInt32(4, Number(data.HeapSerializationTier), true);
  return buf;
}

export class D3D12_FEATURE_DATA_SERIALIZATIONView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get NodeIndex(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: i32
  get HeapSerializationTier(): number {
    return this.view.getInt32(4, true);
  }

  // 0x00: u32
  set NodeIndex(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: i32
  set HeapSerializationTier(value: number) {
    this.view.setInt32(4, value, true);
  }
}

/**
 * Windows.Win32.Graphics.Direct3D12.D3D12_FEATURE_DATA_CROSS_NODE (size: 8)
 */
export interface D3D12_FEATURE_DATA_CROSS_NODE {
  /** Windows.Win32.Graphics.Direct3D12.D3D12_CROSS_NODE_SHARING_TIER */
  SharingTier: D3D12_CROSS_NODE_SHARING_TIER;
  /** Windows.Win32.Foundation.BOOL */
  AtomicShaderInstructions: boolean;
}

export const sizeofD3D12_FEATURE_DATA_CROSS_NODE = 8;

export function allocD3D12_FEATURE_DATA_CROSS_NODE(data?: Partial<D3D12_FEATURE_DATA_CROSS_NODE>): Uint8Array {
  const buf = new Uint8Array(sizeofD3D12_FEATURE_DATA_CROSS_NODE);
  const view = new DataView(buf.buffer);
  // 0x00: i32
  if (data?.SharingTier !== undefined) view.setInt32(0, Number(data.SharingTier), true);
  // 0x04: i32
  if (data?.AtomicShaderInstructions !== undefined) view.setInt32(4, Number(data.AtomicShaderInstructions), true);
  return buf;
}

export class D3D12_FEATURE_DATA_CROSS_NODEView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: i32
  get SharingTier(): number {
    return this.view.getInt32(0, true);
  }

  // 0x04: i32
  get AtomicShaderInstructions(): number {
    return this.view.getInt32(4, true);
  }

  // 0x00: i32
  set SharingTier(value: number) {
    this.view.setInt32(0, value, true);
  }

  // 0x04: i32
  set AtomicShaderInstructions(value: number) {
    this.view.setInt32(4, value, true);
  }
}

/**
 * Windows.Win32.Graphics.Direct3D12.D3D12_FEATURE_DATA_D3D12_OPTIONS5 (size: 16)
 */
export interface D3D12_FEATURE_DATA_D3D12_OPTIONS5 {
  /** Windows.Win32.Foundation.BOOL */
  SRVOnlyTiledResourceTier3: boolean;
  /** Windows.Win32.Graphics.Direct3D12.D3D12_RENDER_PASS_TIER */
  RenderPassesTier: D3D12_RENDER_PASS_TIER;
  /** Windows.Win32.Graphics.Direct3D12.D3D12_RAYTRACING_TIER */
  RaytracingTier: D3D12_RAYTRACING_TIER;
}

export const sizeofD3D12_FEATURE_DATA_D3D12_OPTIONS5 = 16;

export function allocD3D12_FEATURE_DATA_D3D12_OPTIONS5(data?: Partial<D3D12_FEATURE_DATA_D3D12_OPTIONS5>): Uint8Array {
  const buf = new Uint8Array(sizeofD3D12_FEATURE_DATA_D3D12_OPTIONS5);
  const view = new DataView(buf.buffer);
  // 0x00: i32
  if (data?.SRVOnlyTiledResourceTier3 !== undefined) view.setInt32(0, Number(data.SRVOnlyTiledResourceTier3), true);
  // 0x04: i32
  if (data?.RenderPassesTier !== undefined) view.setInt32(4, Number(data.RenderPassesTier), true);
  // 0x08: i32
  if (data?.RaytracingTier !== undefined) view.setInt32(8, Number(data.RaytracingTier), true);
  // 0x0c: pad4
  return buf;
}

export class D3D12_FEATURE_DATA_D3D12_OPTIONS5View {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: i32
  get SRVOnlyTiledResourceTier3(): number {
    return this.view.getInt32(0, true);
  }

  // 0x04: i32
  get RenderPassesTier(): number {
    return this.view.getInt32(4, true);
  }

  // 0x08: i32
  get RaytracingTier(): number {
    return this.view.getInt32(8, true);
  }

  // 0x0c: pad4

  // 0x00: i32
  set SRVOnlyTiledResourceTier3(value: number) {
    this.view.setInt32(0, value, true);
  }

  // 0x04: i32
  set RenderPassesTier(value: number) {
    this.view.setInt32(4, value, true);
  }

  // 0x08: i32
  set RaytracingTier(value: number) {
    this.view.setInt32(8, value, true);
  }

  // 0x0c: pad4
}

/**
 * Windows.Win32.Graphics.Direct3D12.D3D12_FEATURE_DATA_D3D12_OPTIONS6 (size: 24)
 */
export interface D3D12_FEATURE_DATA_D3D12_OPTIONS6 {
  /** Windows.Win32.Foundation.BOOL */
  AdditionalShadingRatesSupported: boolean;
  /** Windows.Win32.Foundation.BOOL */
  PerPrimitiveShadingRateSupportedWithViewportIndexing: boolean;
  /** Windows.Win32.Graphics.Direct3D12.D3D12_VARIABLE_SHADING_RATE_TIER */
  VariableShadingRateTier: D3D12_VARIABLE_SHADING_RATE_TIER;
  /** u32 */
  ShadingRateImageTileSize: number;
  /** Windows.Win32.Foundation.BOOL */
  BackgroundProcessingSupported: boolean;
}

export const sizeofD3D12_FEATURE_DATA_D3D12_OPTIONS6 = 24;

export function allocD3D12_FEATURE_DATA_D3D12_OPTIONS6(data?: Partial<D3D12_FEATURE_DATA_D3D12_OPTIONS6>): Uint8Array {
  const buf = new Uint8Array(sizeofD3D12_FEATURE_DATA_D3D12_OPTIONS6);
  const view = new DataView(buf.buffer);
  // 0x00: i32
  if (data?.AdditionalShadingRatesSupported !== undefined) view.setInt32(0, Number(data.AdditionalShadingRatesSupported), true);
  // 0x04: i32
  if (data?.PerPrimitiveShadingRateSupportedWithViewportIndexing !== undefined) view.setInt32(4, Number(data.PerPrimitiveShadingRateSupportedWithViewportIndexing), true);
  // 0x08: i32
  if (data?.VariableShadingRateTier !== undefined) view.setInt32(8, Number(data.VariableShadingRateTier), true);
  // 0x0c: u32
  if (data?.ShadingRateImageTileSize !== undefined) view.setUint32(12, Number(data.ShadingRateImageTileSize), true);
  // 0x10: i32
  if (data?.BackgroundProcessingSupported !== undefined) view.setInt32(16, Number(data.BackgroundProcessingSupported), true);
  // 0x14: pad4
  return buf;
}

export class D3D12_FEATURE_DATA_D3D12_OPTIONS6View {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: i32
  get AdditionalShadingRatesSupported(): number {
    return this.view.getInt32(0, true);
  }

  // 0x04: i32
  get PerPrimitiveShadingRateSupportedWithViewportIndexing(): number {
    return this.view.getInt32(4, true);
  }

  // 0x08: i32
  get VariableShadingRateTier(): number {
    return this.view.getInt32(8, true);
  }

  // 0x0c: u32
  get ShadingRateImageTileSize(): number {
    return this.view.getUint32(12, true);
  }

  // 0x10: i32
  get BackgroundProcessingSupported(): number {
    return this.view.getInt32(16, true);
  }

  // 0x14: pad4

  // 0x00: i32
  set AdditionalShadingRatesSupported(value: number) {
    this.view.setInt32(0, value, true);
  }

  // 0x04: i32
  set PerPrimitiveShadingRateSupportedWithViewportIndexing(value: number) {
    this.view.setInt32(4, value, true);
  }

  // 0x08: i32
  set VariableShadingRateTier(value: number) {
    this.view.setInt32(8, value, true);
  }

  // 0x0c: u32
  set ShadingRateImageTileSize(value: number) {
    this.view.setUint32(12, value, true);
  }

  // 0x10: i32
  set BackgroundProcessingSupported(value: number) {
    this.view.setInt32(16, value, true);
  }

  // 0x14: pad4
}

/**
 * Windows.Win32.Graphics.Direct3D12.D3D12_FEATURE_DATA_D3D12_OPTIONS7 (size: 8)
 */
export interface D3D12_FEATURE_DATA_D3D12_OPTIONS7 {
  /** Windows.Win32.Graphics.Direct3D12.D3D12_MESH_SHADER_TIER */
  MeshShaderTier: D3D12_MESH_SHADER_TIER;
  /** Windows.Win32.Graphics.Direct3D12.D3D12_SAMPLER_FEEDBACK_TIER */
  SamplerFeedbackTier: D3D12_SAMPLER_FEEDBACK_TIER;
}

export const sizeofD3D12_FEATURE_DATA_D3D12_OPTIONS7 = 8;

export function allocD3D12_FEATURE_DATA_D3D12_OPTIONS7(data?: Partial<D3D12_FEATURE_DATA_D3D12_OPTIONS7>): Uint8Array {
  const buf = new Uint8Array(sizeofD3D12_FEATURE_DATA_D3D12_OPTIONS7);
  const view = new DataView(buf.buffer);
  // 0x00: i32
  if (data?.MeshShaderTier !== undefined) view.setInt32(0, Number(data.MeshShaderTier), true);
  // 0x04: i32
  if (data?.SamplerFeedbackTier !== undefined) view.setInt32(4, Number(data.SamplerFeedbackTier), true);
  return buf;
}

export class D3D12_FEATURE_DATA_D3D12_OPTIONS7View {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: i32
  get MeshShaderTier(): number {
    return this.view.getInt32(0, true);
  }

  // 0x04: i32
  get SamplerFeedbackTier(): number {
    return this.view.getInt32(4, true);
  }

  // 0x00: i32
  set MeshShaderTier(value: number) {
    this.view.setInt32(0, value, true);
  }

  // 0x04: i32
  set SamplerFeedbackTier(value: number) {
    this.view.setInt32(4, value, true);
  }
}

/**
 * Windows.Win32.Graphics.Direct3D12.D3D12_FEATURE_DATA_QUERY_META_COMMAND (size: 48)
 */
export interface D3D12_FEATURE_DATA_QUERY_META_COMMAND {
  /** System.Guid */
  CommandId: Uint8Array | Deno.PointerValue | null;
  /** u32 */
  NodeMask: number;
  /** ptr */
  pQueryInputData: Deno.PointerValue | Uint8Array | null;
  /** usize */
  QueryInputDataSizeInBytes: number | bigint;
  /** ptr */
  pQueryOutputData: Deno.PointerValue | Uint8Array | null;
  /** usize */
  QueryOutputDataSizeInBytes: number | bigint;
}

export const sizeofD3D12_FEATURE_DATA_QUERY_META_COMMAND = 48;

export function allocD3D12_FEATURE_DATA_QUERY_META_COMMAND(data?: Partial<D3D12_FEATURE_DATA_QUERY_META_COMMAND>): Uint8Array {
  const buf = new Uint8Array(sizeofD3D12_FEATURE_DATA_QUERY_META_COMMAND);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.CommandId !== undefined) view.setBigUint64(0, data.CommandId === null ? 0n : util.toBigInt(util.toPointer(data.CommandId)), true);
  // 0x08: u32
  if (data?.NodeMask !== undefined) view.setUint32(8, Number(data.NodeMask), true);
  // 0x0c: pad4
  // 0x10: pointer
  if (data?.pQueryInputData !== undefined) view.setBigUint64(16, data.pQueryInputData === null ? 0n : util.toBigInt(util.toPointer(data.pQueryInputData)), true);
  // 0x18: usize
  if (data?.QueryInputDataSizeInBytes !== undefined) view.setBigUint64(24, util.toBigInt(data.QueryInputDataSizeInBytes), true);
  // 0x20: pointer
  if (data?.pQueryOutputData !== undefined) view.setBigUint64(32, data.pQueryOutputData === null ? 0n : util.toBigInt(util.toPointer(data.pQueryOutputData)), true);
  // 0x28: usize
  if (data?.QueryOutputDataSizeInBytes !== undefined) view.setBigUint64(40, util.toBigInt(data.QueryOutputDataSizeInBytes), true);
  return buf;
}

export class D3D12_FEATURE_DATA_QUERY_META_COMMANDView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get CommandId(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(0, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x08: u32
  get NodeMask(): number {
    return this.view.getUint32(8, true);
  }

  // 0x0c: pad4

  // 0x10: pointer
  get pQueryInputData(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(16, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x18: usize
  get QueryInputDataSizeInBytes(): number | bigint {
    return this.view.getBigUint64(24, true);
  }

  // 0x20: pointer
  get pQueryOutputData(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(32, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x28: usize
  get QueryOutputDataSizeInBytes(): number | bigint {
    return this.view.getBigUint64(40, true);
  }

  // 0x00: pointer
  set CommandId(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(0, util.toBigInt(util.toPointer(value)), true);
  }

  // 0x08: u32
  set NodeMask(value: number) {
    this.view.setUint32(8, value, true);
  }

  // 0x0c: pad4

  // 0x10: pointer
  set pQueryInputData(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(16, util.toBigInt(util.toPointer(value)), true);
  }

  // 0x18: usize
  set QueryInputDataSizeInBytes(value: number | bigint) {
    this.view.setBigUint64(24, util.toBigInt(value), true);
  }

  // 0x20: pointer
  set pQueryOutputData(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(32, util.toBigInt(util.toPointer(value)), true);
  }

  // 0x28: usize
  set QueryOutputDataSizeInBytes(value: number | bigint) {
    this.view.setBigUint64(40, util.toBigInt(value), true);
  }
}

/**
 * Windows.Win32.Graphics.Direct3D12.D3D12_FEATURE_DATA_D3D12_OPTIONS8 (size: 8)
 */
export interface D3D12_FEATURE_DATA_D3D12_OPTIONS8 {
  /** Windows.Win32.Foundation.BOOL */
  UnalignedBlockTexturesSupported: boolean;
}

export const sizeofD3D12_FEATURE_DATA_D3D12_OPTIONS8 = 8;

export function allocD3D12_FEATURE_DATA_D3D12_OPTIONS8(data?: Partial<D3D12_FEATURE_DATA_D3D12_OPTIONS8>): Uint8Array {
  const buf = new Uint8Array(sizeofD3D12_FEATURE_DATA_D3D12_OPTIONS8);
  const view = new DataView(buf.buffer);
  // 0x00: i32
  if (data?.UnalignedBlockTexturesSupported !== undefined) view.setInt32(0, Number(data.UnalignedBlockTexturesSupported), true);
  // 0x04: pad4
  return buf;
}

export class D3D12_FEATURE_DATA_D3D12_OPTIONS8View {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: i32
  get UnalignedBlockTexturesSupported(): number {
    return this.view.getInt32(0, true);
  }

  // 0x04: pad4

  // 0x00: i32
  set UnalignedBlockTexturesSupported(value: number) {
    this.view.setInt32(0, value, true);
  }

  // 0x04: pad4
}

/**
 * Windows.Win32.Graphics.Direct3D12.D3D12_FEATURE_DATA_D3D12_OPTIONS9 (size: 24)
 */
export interface D3D12_FEATURE_DATA_D3D12_OPTIONS9 {
  /** Windows.Win32.Foundation.BOOL */
  MeshShaderPipelineStatsSupported: boolean;
  /** Windows.Win32.Foundation.BOOL */
  MeshShaderSupportsFullRangeRenderTargetArrayIndex: boolean;
  /** Windows.Win32.Foundation.BOOL */
  AtomicInt64OnTypedResourceSupported: boolean;
  /** Windows.Win32.Foundation.BOOL */
  AtomicInt64OnGroupSharedSupported: boolean;
  /** Windows.Win32.Foundation.BOOL */
  DerivativesInMeshAndAmplificationShadersSupported: boolean;
  /** Windows.Win32.Graphics.Direct3D12.D3D12_WAVE_MMA_TIER */
  WaveMMATier: D3D12_WAVE_MMA_TIER;
}

export const sizeofD3D12_FEATURE_DATA_D3D12_OPTIONS9 = 24;

export function allocD3D12_FEATURE_DATA_D3D12_OPTIONS9(data?: Partial<D3D12_FEATURE_DATA_D3D12_OPTIONS9>): Uint8Array {
  const buf = new Uint8Array(sizeofD3D12_FEATURE_DATA_D3D12_OPTIONS9);
  const view = new DataView(buf.buffer);
  // 0x00: i32
  if (data?.MeshShaderPipelineStatsSupported !== undefined) view.setInt32(0, Number(data.MeshShaderPipelineStatsSupported), true);
  // 0x04: i32
  if (data?.MeshShaderSupportsFullRangeRenderTargetArrayIndex !== undefined) view.setInt32(4, Number(data.MeshShaderSupportsFullRangeRenderTargetArrayIndex), true);
  // 0x08: i32
  if (data?.AtomicInt64OnTypedResourceSupported !== undefined) view.setInt32(8, Number(data.AtomicInt64OnTypedResourceSupported), true);
  // 0x0c: i32
  if (data?.AtomicInt64OnGroupSharedSupported !== undefined) view.setInt32(12, Number(data.AtomicInt64OnGroupSharedSupported), true);
  // 0x10: i32
  if (data?.DerivativesInMeshAndAmplificationShadersSupported !== undefined) view.setInt32(16, Number(data.DerivativesInMeshAndAmplificationShadersSupported), true);
  // 0x14: i32
  if (data?.WaveMMATier !== undefined) view.setInt32(20, Number(data.WaveMMATier), true);
  return buf;
}

export class D3D12_FEATURE_DATA_D3D12_OPTIONS9View {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: i32
  get MeshShaderPipelineStatsSupported(): number {
    return this.view.getInt32(0, true);
  }

  // 0x04: i32
  get MeshShaderSupportsFullRangeRenderTargetArrayIndex(): number {
    return this.view.getInt32(4, true);
  }

  // 0x08: i32
  get AtomicInt64OnTypedResourceSupported(): number {
    return this.view.getInt32(8, true);
  }

  // 0x0c: i32
  get AtomicInt64OnGroupSharedSupported(): number {
    return this.view.getInt32(12, true);
  }

  // 0x10: i32
  get DerivativesInMeshAndAmplificationShadersSupported(): number {
    return this.view.getInt32(16, true);
  }

  // 0x14: i32
  get WaveMMATier(): number {
    return this.view.getInt32(20, true);
  }

  // 0x00: i32
  set MeshShaderPipelineStatsSupported(value: number) {
    this.view.setInt32(0, value, true);
  }

  // 0x04: i32
  set MeshShaderSupportsFullRangeRenderTargetArrayIndex(value: number) {
    this.view.setInt32(4, value, true);
  }

  // 0x08: i32
  set AtomicInt64OnTypedResourceSupported(value: number) {
    this.view.setInt32(8, value, true);
  }

  // 0x0c: i32
  set AtomicInt64OnGroupSharedSupported(value: number) {
    this.view.setInt32(12, value, true);
  }

  // 0x10: i32
  set DerivativesInMeshAndAmplificationShadersSupported(value: number) {
    this.view.setInt32(16, value, true);
  }

  // 0x14: i32
  set WaveMMATier(value: number) {
    this.view.setInt32(20, value, true);
  }
}

/**
 * Windows.Win32.Graphics.Direct3D12.D3D12_FEATURE_DATA_D3D12_OPTIONS10 (size: 8)
 */
export interface D3D12_FEATURE_DATA_D3D12_OPTIONS10 {
  /** Windows.Win32.Foundation.BOOL */
  VariableRateShadingSumCombinerSupported: boolean;
  /** Windows.Win32.Foundation.BOOL */
  MeshShaderPerPrimitiveShadingRateSupported: boolean;
}

export const sizeofD3D12_FEATURE_DATA_D3D12_OPTIONS10 = 8;

export function allocD3D12_FEATURE_DATA_D3D12_OPTIONS10(data?: Partial<D3D12_FEATURE_DATA_D3D12_OPTIONS10>): Uint8Array {
  const buf = new Uint8Array(sizeofD3D12_FEATURE_DATA_D3D12_OPTIONS10);
  const view = new DataView(buf.buffer);
  // 0x00: i32
  if (data?.VariableRateShadingSumCombinerSupported !== undefined) view.setInt32(0, Number(data.VariableRateShadingSumCombinerSupported), true);
  // 0x04: i32
  if (data?.MeshShaderPerPrimitiveShadingRateSupported !== undefined) view.setInt32(4, Number(data.MeshShaderPerPrimitiveShadingRateSupported), true);
  return buf;
}

export class D3D12_FEATURE_DATA_D3D12_OPTIONS10View {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: i32
  get VariableRateShadingSumCombinerSupported(): number {
    return this.view.getInt32(0, true);
  }

  // 0x04: i32
  get MeshShaderPerPrimitiveShadingRateSupported(): number {
    return this.view.getInt32(4, true);
  }

  // 0x00: i32
  set VariableRateShadingSumCombinerSupported(value: number) {
    this.view.setInt32(0, value, true);
  }

  // 0x04: i32
  set MeshShaderPerPrimitiveShadingRateSupported(value: number) {
    this.view.setInt32(4, value, true);
  }
}

/**
 * Windows.Win32.Graphics.Direct3D12.D3D12_FEATURE_DATA_D3D12_OPTIONS11 (size: 8)
 */
export interface D3D12_FEATURE_DATA_D3D12_OPTIONS11 {
  /** Windows.Win32.Foundation.BOOL */
  AtomicInt64OnDescriptorHeapResourceSupported: boolean;
}

export const sizeofD3D12_FEATURE_DATA_D3D12_OPTIONS11 = 8;

export function allocD3D12_FEATURE_DATA_D3D12_OPTIONS11(data?: Partial<D3D12_FEATURE_DATA_D3D12_OPTIONS11>): Uint8Array {
  const buf = new Uint8Array(sizeofD3D12_FEATURE_DATA_D3D12_OPTIONS11);
  const view = new DataView(buf.buffer);
  // 0x00: i32
  if (data?.AtomicInt64OnDescriptorHeapResourceSupported !== undefined) view.setInt32(0, Number(data.AtomicInt64OnDescriptorHeapResourceSupported), true);
  // 0x04: pad4
  return buf;
}

export class D3D12_FEATURE_DATA_D3D12_OPTIONS11View {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: i32
  get AtomicInt64OnDescriptorHeapResourceSupported(): number {
    return this.view.getInt32(0, true);
  }

  // 0x04: pad4

  // 0x00: i32
  set AtomicInt64OnDescriptorHeapResourceSupported(value: number) {
    this.view.setInt32(0, value, true);
  }

  // 0x04: pad4
}

/**
 * Windows.Win32.Graphics.Direct3D12.D3D12_RESOURCE_ALLOCATION_INFO (size: 16)
 */
export interface D3D12_RESOURCE_ALLOCATION_INFO {
  /** u64 */
  SizeInBytes: number | bigint;
  /** u64 */
  Alignment: number | bigint;
}

export const sizeofD3D12_RESOURCE_ALLOCATION_INFO = 16;

export function allocD3D12_RESOURCE_ALLOCATION_INFO(data?: Partial<D3D12_RESOURCE_ALLOCATION_INFO>): Uint8Array {
  const buf = new Uint8Array(sizeofD3D12_RESOURCE_ALLOCATION_INFO);
  const view = new DataView(buf.buffer);
  // 0x00: u64
  if (data?.SizeInBytes !== undefined) view.setBigUint64(0, util.toBigInt(data.SizeInBytes), true);
  // 0x08: u64
  if (data?.Alignment !== undefined) view.setBigUint64(8, util.toBigInt(data.Alignment), true);
  return buf;
}

export class D3D12_RESOURCE_ALLOCATION_INFOView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u64
  get SizeInBytes(): number | bigint {
    return this.view.getBigUint64(0, true);
  }

  // 0x08: u64
  get Alignment(): number | bigint {
    return this.view.getBigUint64(8, true);
  }

  // 0x00: u64
  set SizeInBytes(value: number | bigint) {
    this.view.setBigUint64(0, util.toBigInt(value), true);
  }

  // 0x08: u64
  set Alignment(value: number | bigint) {
    this.view.setBigUint64(8, util.toBigInt(value), true);
  }
}

/**
 * Windows.Win32.Graphics.Direct3D12.D3D12_RESOURCE_ALLOCATION_INFO1 (size: 24)
 */
export interface D3D12_RESOURCE_ALLOCATION_INFO1 {
  /** u64 */
  Offset: number | bigint;
  /** u64 */
  Alignment: number | bigint;
  /** u64 */
  SizeInBytes: number | bigint;
}

export const sizeofD3D12_RESOURCE_ALLOCATION_INFO1 = 24;

export function allocD3D12_RESOURCE_ALLOCATION_INFO1(data?: Partial<D3D12_RESOURCE_ALLOCATION_INFO1>): Uint8Array {
  const buf = new Uint8Array(sizeofD3D12_RESOURCE_ALLOCATION_INFO1);
  const view = new DataView(buf.buffer);
  // 0x00: u64
  if (data?.Offset !== undefined) view.setBigUint64(0, util.toBigInt(data.Offset), true);
  // 0x08: u64
  if (data?.Alignment !== undefined) view.setBigUint64(8, util.toBigInt(data.Alignment), true);
  // 0x10: u64
  if (data?.SizeInBytes !== undefined) view.setBigUint64(16, util.toBigInt(data.SizeInBytes), true);
  return buf;
}

export class D3D12_RESOURCE_ALLOCATION_INFO1View {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u64
  get Offset(): number | bigint {
    return this.view.getBigUint64(0, true);
  }

  // 0x08: u64
  get Alignment(): number | bigint {
    return this.view.getBigUint64(8, true);
  }

  // 0x10: u64
  get SizeInBytes(): number | bigint {
    return this.view.getBigUint64(16, true);
  }

  // 0x00: u64
  set Offset(value: number | bigint) {
    this.view.setBigUint64(0, util.toBigInt(value), true);
  }

  // 0x08: u64
  set Alignment(value: number | bigint) {
    this.view.setBigUint64(8, util.toBigInt(value), true);
  }

  // 0x10: u64
  set SizeInBytes(value: number | bigint) {
    this.view.setBigUint64(16, util.toBigInt(value), true);
  }
}

/**
 * Windows.Win32.Graphics.Direct3D12.D3D12_HEAP_PROPERTIES (size: 24)
 */
export interface D3D12_HEAP_PROPERTIES {
  /** Windows.Win32.Graphics.Direct3D12.D3D12_HEAP_TYPE */
  Type: D3D12_HEAP_TYPE;
  /** Windows.Win32.Graphics.Direct3D12.D3D12_CPU_PAGE_PROPERTY */
  CPUPageProperty: D3D12_CPU_PAGE_PROPERTY;
  /** Windows.Win32.Graphics.Direct3D12.D3D12_MEMORY_POOL */
  MemoryPoolPreference: D3D12_MEMORY_POOL;
  /** u32 */
  CreationNodeMask: number;
  /** u32 */
  VisibleNodeMask: number;
}

export const sizeofD3D12_HEAP_PROPERTIES = 24;

export function allocD3D12_HEAP_PROPERTIES(data?: Partial<D3D12_HEAP_PROPERTIES>): Uint8Array {
  const buf = new Uint8Array(sizeofD3D12_HEAP_PROPERTIES);
  const view = new DataView(buf.buffer);
  // 0x00: i32
  if (data?.Type !== undefined) view.setInt32(0, Number(data.Type), true);
  // 0x04: i32
  if (data?.CPUPageProperty !== undefined) view.setInt32(4, Number(data.CPUPageProperty), true);
  // 0x08: i32
  if (data?.MemoryPoolPreference !== undefined) view.setInt32(8, Number(data.MemoryPoolPreference), true);
  // 0x0c: u32
  if (data?.CreationNodeMask !== undefined) view.setUint32(12, Number(data.CreationNodeMask), true);
  // 0x10: u32
  if (data?.VisibleNodeMask !== undefined) view.setUint32(16, Number(data.VisibleNodeMask), true);
  // 0x14: pad4
  return buf;
}

export class D3D12_HEAP_PROPERTIESView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: i32
  get Type(): number {
    return this.view.getInt32(0, true);
  }

  // 0x04: i32
  get CPUPageProperty(): number {
    return this.view.getInt32(4, true);
  }

  // 0x08: i32
  get MemoryPoolPreference(): number {
    return this.view.getInt32(8, true);
  }

  // 0x0c: u32
  get CreationNodeMask(): number {
    return this.view.getUint32(12, true);
  }

  // 0x10: u32
  get VisibleNodeMask(): number {
    return this.view.getUint32(16, true);
  }

  // 0x14: pad4

  // 0x00: i32
  set Type(value: number) {
    this.view.setInt32(0, value, true);
  }

  // 0x04: i32
  set CPUPageProperty(value: number) {
    this.view.setInt32(4, value, true);
  }

  // 0x08: i32
  set MemoryPoolPreference(value: number) {
    this.view.setInt32(8, value, true);
  }

  // 0x0c: u32
  set CreationNodeMask(value: number) {
    this.view.setUint32(12, value, true);
  }

  // 0x10: u32
  set VisibleNodeMask(value: number) {
    this.view.setUint32(16, value, true);
  }

  // 0x14: pad4
}

/**
 * Windows.Win32.Graphics.Direct3D12.D3D12_HEAP_DESC (size: 32)
 */
export interface D3D12_HEAP_DESC {
  /** u64 */
  SizeInBytes: number | bigint;
  /** Windows.Win32.Graphics.Direct3D12.D3D12_HEAP_PROPERTIES */
  Properties: Uint8Array | Deno.PointerValue | null;
  /** u64 */
  Alignment: number | bigint;
  /** Windows.Win32.Graphics.Direct3D12.D3D12_HEAP_FLAGS */
  Flags: D3D12_HEAP_FLAGS;
}

export const sizeofD3D12_HEAP_DESC = 32;

export function allocD3D12_HEAP_DESC(data?: Partial<D3D12_HEAP_DESC>): Uint8Array {
  const buf = new Uint8Array(sizeofD3D12_HEAP_DESC);
  const view = new DataView(buf.buffer);
  // 0x00: u64
  if (data?.SizeInBytes !== undefined) view.setBigUint64(0, util.toBigInt(data.SizeInBytes), true);
  // 0x08: pointer
  if (data?.Properties !== undefined) view.setBigUint64(8, data.Properties === null ? 0n : util.toBigInt(util.toPointer(data.Properties)), true);
  // 0x10: u64
  if (data?.Alignment !== undefined) view.setBigUint64(16, util.toBigInt(data.Alignment), true);
  // 0x18: u32
  if (data?.Flags !== undefined) view.setUint32(24, Number(data.Flags), true);
  // 0x1c: pad4
  return buf;
}

export class D3D12_HEAP_DESCView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u64
  get SizeInBytes(): number | bigint {
    return this.view.getBigUint64(0, true);
  }

  // 0x08: pointer
  get Properties(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(8, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x10: u64
  get Alignment(): number | bigint {
    return this.view.getBigUint64(16, true);
  }

  // 0x18: u32
  get Flags(): number {
    return this.view.getUint32(24, true);
  }

  // 0x1c: pad4

  // 0x00: u64
  set SizeInBytes(value: number | bigint) {
    this.view.setBigUint64(0, util.toBigInt(value), true);
  }

  // 0x08: pointer
  set Properties(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(8, util.toBigInt(util.toPointer(value)), true);
  }

  // 0x10: u64
  set Alignment(value: number | bigint) {
    this.view.setBigUint64(16, util.toBigInt(value), true);
  }

  // 0x18: u32
  set Flags(value: number) {
    this.view.setUint32(24, value, true);
  }

  // 0x1c: pad4
}

/**
 * Windows.Win32.Graphics.Direct3D12.D3D12_MIP_REGION (size: 16)
 */
export interface D3D12_MIP_REGION {
  /** u32 */
  Width: number;
  /** u32 */
  Height: number;
  /** u32 */
  Depth: number;
}

export const sizeofD3D12_MIP_REGION = 16;

export function allocD3D12_MIP_REGION(data?: Partial<D3D12_MIP_REGION>): Uint8Array {
  const buf = new Uint8Array(sizeofD3D12_MIP_REGION);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.Width !== undefined) view.setUint32(0, Number(data.Width), true);
  // 0x04: u32
  if (data?.Height !== undefined) view.setUint32(4, Number(data.Height), true);
  // 0x08: u32
  if (data?.Depth !== undefined) view.setUint32(8, Number(data.Depth), true);
  // 0x0c: pad4
  return buf;
}

export class D3D12_MIP_REGIONView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get Width(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: u32
  get Height(): number {
    return this.view.getUint32(4, true);
  }

  // 0x08: u32
  get Depth(): number {
    return this.view.getUint32(8, true);
  }

  // 0x0c: pad4

  // 0x00: u32
  set Width(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: u32
  set Height(value: number) {
    this.view.setUint32(4, value, true);
  }

  // 0x08: u32
  set Depth(value: number) {
    this.view.setUint32(8, value, true);
  }

  // 0x0c: pad4
}

/**
 * Windows.Win32.Graphics.Direct3D12.D3D12_RESOURCE_DESC (size: 56)
 */
export interface D3D12_RESOURCE_DESC {
  /** Windows.Win32.Graphics.Direct3D12.D3D12_RESOURCE_DIMENSION */
  Dimension: D3D12_RESOURCE_DIMENSION;
  /** u64 */
  Alignment: number | bigint;
  /** u64 */
  Width: number | bigint;
  /** u32 */
  Height: number;
  /** u16 */
  DepthOrArraySize: number;
  /** u16 */
  MipLevels: number;
  /** Windows.Win32.Graphics.Dxgi.Common.DXGI_FORMAT */
  Format: DXGI_FORMAT;
  /** Windows.Win32.Graphics.Dxgi.Common.DXGI_SAMPLE_DESC */
  SampleDesc: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Graphics.Direct3D12.D3D12_TEXTURE_LAYOUT */
  Layout: D3D12_TEXTURE_LAYOUT;
  /** Windows.Win32.Graphics.Direct3D12.D3D12_RESOURCE_FLAGS */
  Flags: D3D12_RESOURCE_FLAGS;
}

export const sizeofD3D12_RESOURCE_DESC = 56;

export function allocD3D12_RESOURCE_DESC(data?: Partial<D3D12_RESOURCE_DESC>): Uint8Array {
  const buf = new Uint8Array(sizeofD3D12_RESOURCE_DESC);
  const view = new DataView(buf.buffer);
  // 0x00: i32
  if (data?.Dimension !== undefined) view.setInt32(0, Number(data.Dimension), true);
  // 0x04: pad4
  // 0x08: u64
  if (data?.Alignment !== undefined) view.setBigUint64(8, util.toBigInt(data.Alignment), true);
  // 0x10: u64
  if (data?.Width !== undefined) view.setBigUint64(16, util.toBigInt(data.Width), true);
  // 0x18: u32
  if (data?.Height !== undefined) view.setUint32(24, Number(data.Height), true);
  // 0x1c: u16
  if (data?.DepthOrArraySize !== undefined) view.setUint16(28, Number(data.DepthOrArraySize), true);
  // 0x1e: u16
  if (data?.MipLevels !== undefined) view.setUint16(30, Number(data.MipLevels), true);
  // 0x20: u32
  if (data?.Format !== undefined) view.setUint32(32, Number(data.Format), true);
  // 0x24: pad4
  // 0x28: pointer
  if (data?.SampleDesc !== undefined) view.setBigUint64(40, data.SampleDesc === null ? 0n : util.toBigInt(util.toPointer(data.SampleDesc)), true);
  // 0x30: i32
  if (data?.Layout !== undefined) view.setInt32(48, Number(data.Layout), true);
  // 0x34: u32
  if (data?.Flags !== undefined) view.setUint32(52, Number(data.Flags), true);
  return buf;
}

export class D3D12_RESOURCE_DESCView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: i32
  get Dimension(): number {
    return this.view.getInt32(0, true);
  }

  // 0x04: pad4

  // 0x08: u64
  get Alignment(): number | bigint {
    return this.view.getBigUint64(8, true);
  }

  // 0x10: u64
  get Width(): number | bigint {
    return this.view.getBigUint64(16, true);
  }

  // 0x18: u32
  get Height(): number {
    return this.view.getUint32(24, true);
  }

  // 0x1c: u16
  get DepthOrArraySize(): number {
    return this.view.getUint16(28, true);
  }

  // 0x1e: u16
  get MipLevels(): number {
    return this.view.getUint16(30, true);
  }

  // 0x20: u32
  get Format(): number {
    return this.view.getUint32(32, true);
  }

  // 0x24: pad4

  // 0x28: pointer
  get SampleDesc(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(40, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x30: i32
  get Layout(): number {
    return this.view.getInt32(48, true);
  }

  // 0x34: u32
  get Flags(): number {
    return this.view.getUint32(52, true);
  }

  // 0x00: i32
  set Dimension(value: number) {
    this.view.setInt32(0, value, true);
  }

  // 0x04: pad4

  // 0x08: u64
  set Alignment(value: number | bigint) {
    this.view.setBigUint64(8, util.toBigInt(value), true);
  }

  // 0x10: u64
  set Width(value: number | bigint) {
    this.view.setBigUint64(16, util.toBigInt(value), true);
  }

  // 0x18: u32
  set Height(value: number) {
    this.view.setUint32(24, value, true);
  }

  // 0x1c: u16
  set DepthOrArraySize(value: number) {
    this.view.setUint16(28, value, true);
  }

  // 0x1e: u16
  set MipLevels(value: number) {
    this.view.setUint16(30, value, true);
  }

  // 0x20: u32
  set Format(value: number) {
    this.view.setUint32(32, value, true);
  }

  // 0x24: pad4

  // 0x28: pointer
  set SampleDesc(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(40, util.toBigInt(util.toPointer(value)), true);
  }

  // 0x30: i32
  set Layout(value: number) {
    this.view.setInt32(48, value, true);
  }

  // 0x34: u32
  set Flags(value: number) {
    this.view.setUint32(52, value, true);
  }
}

/**
 * Windows.Win32.Graphics.Direct3D12.D3D12_RESOURCE_DESC1 (size: 64)
 */
export interface D3D12_RESOURCE_DESC1 {
  /** Windows.Win32.Graphics.Direct3D12.D3D12_RESOURCE_DIMENSION */
  Dimension: D3D12_RESOURCE_DIMENSION;
  /** u64 */
  Alignment: number | bigint;
  /** u64 */
  Width: number | bigint;
  /** u32 */
  Height: number;
  /** u16 */
  DepthOrArraySize: number;
  /** u16 */
  MipLevels: number;
  /** Windows.Win32.Graphics.Dxgi.Common.DXGI_FORMAT */
  Format: DXGI_FORMAT;
  /** Windows.Win32.Graphics.Dxgi.Common.DXGI_SAMPLE_DESC */
  SampleDesc: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Graphics.Direct3D12.D3D12_TEXTURE_LAYOUT */
  Layout: D3D12_TEXTURE_LAYOUT;
  /** Windows.Win32.Graphics.Direct3D12.D3D12_RESOURCE_FLAGS */
  Flags: D3D12_RESOURCE_FLAGS;
  /** Windows.Win32.Graphics.Direct3D12.D3D12_MIP_REGION */
  SamplerFeedbackMipRegion: Uint8Array | Deno.PointerValue | null;
}

export const sizeofD3D12_RESOURCE_DESC1 = 64;

export function allocD3D12_RESOURCE_DESC1(data?: Partial<D3D12_RESOURCE_DESC1>): Uint8Array {
  const buf = new Uint8Array(sizeofD3D12_RESOURCE_DESC1);
  const view = new DataView(buf.buffer);
  // 0x00: i32
  if (data?.Dimension !== undefined) view.setInt32(0, Number(data.Dimension), true);
  // 0x04: pad4
  // 0x08: u64
  if (data?.Alignment !== undefined) view.setBigUint64(8, util.toBigInt(data.Alignment), true);
  // 0x10: u64
  if (data?.Width !== undefined) view.setBigUint64(16, util.toBigInt(data.Width), true);
  // 0x18: u32
  if (data?.Height !== undefined) view.setUint32(24, Number(data.Height), true);
  // 0x1c: u16
  if (data?.DepthOrArraySize !== undefined) view.setUint16(28, Number(data.DepthOrArraySize), true);
  // 0x1e: u16
  if (data?.MipLevels !== undefined) view.setUint16(30, Number(data.MipLevels), true);
  // 0x20: u32
  if (data?.Format !== undefined) view.setUint32(32, Number(data.Format), true);
  // 0x24: pad4
  // 0x28: pointer
  if (data?.SampleDesc !== undefined) view.setBigUint64(40, data.SampleDesc === null ? 0n : util.toBigInt(util.toPointer(data.SampleDesc)), true);
  // 0x30: i32
  if (data?.Layout !== undefined) view.setInt32(48, Number(data.Layout), true);
  // 0x34: u32
  if (data?.Flags !== undefined) view.setUint32(52, Number(data.Flags), true);
  // 0x38: pointer
  if (data?.SamplerFeedbackMipRegion !== undefined) view.setBigUint64(56, data.SamplerFeedbackMipRegion === null ? 0n : util.toBigInt(util.toPointer(data.SamplerFeedbackMipRegion)), true);
  return buf;
}

export class D3D12_RESOURCE_DESC1View {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: i32
  get Dimension(): number {
    return this.view.getInt32(0, true);
  }

  // 0x04: pad4

  // 0x08: u64
  get Alignment(): number | bigint {
    return this.view.getBigUint64(8, true);
  }

  // 0x10: u64
  get Width(): number | bigint {
    return this.view.getBigUint64(16, true);
  }

  // 0x18: u32
  get Height(): number {
    return this.view.getUint32(24, true);
  }

  // 0x1c: u16
  get DepthOrArraySize(): number {
    return this.view.getUint16(28, true);
  }

  // 0x1e: u16
  get MipLevels(): number {
    return this.view.getUint16(30, true);
  }

  // 0x20: u32
  get Format(): number {
    return this.view.getUint32(32, true);
  }

  // 0x24: pad4

  // 0x28: pointer
  get SampleDesc(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(40, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x30: i32
  get Layout(): number {
    return this.view.getInt32(48, true);
  }

  // 0x34: u32
  get Flags(): number {
    return this.view.getUint32(52, true);
  }

  // 0x38: pointer
  get SamplerFeedbackMipRegion(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(56, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: i32
  set Dimension(value: number) {
    this.view.setInt32(0, value, true);
  }

  // 0x04: pad4

  // 0x08: u64
  set Alignment(value: number | bigint) {
    this.view.setBigUint64(8, util.toBigInt(value), true);
  }

  // 0x10: u64
  set Width(value: number | bigint) {
    this.view.setBigUint64(16, util.toBigInt(value), true);
  }

  // 0x18: u32
  set Height(value: number) {
    this.view.setUint32(24, value, true);
  }

  // 0x1c: u16
  set DepthOrArraySize(value: number) {
    this.view.setUint16(28, value, true);
  }

  // 0x1e: u16
  set MipLevels(value: number) {
    this.view.setUint16(30, value, true);
  }

  // 0x20: u32
  set Format(value: number) {
    this.view.setUint32(32, value, true);
  }

  // 0x24: pad4

  // 0x28: pointer
  set SampleDesc(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(40, util.toBigInt(util.toPointer(value)), true);
  }

  // 0x30: i32
  set Layout(value: number) {
    this.view.setInt32(48, value, true);
  }

  // 0x34: u32
  set Flags(value: number) {
    this.view.setUint32(52, value, true);
  }

  // 0x38: pointer
  set SamplerFeedbackMipRegion(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(56, util.toBigInt(util.toPointer(value)), true);
  }
}

/**
 * Windows.Win32.Graphics.Direct3D12.D3D12_DEPTH_STENCIL_VALUE (size: 8)
 */
export interface D3D12_DEPTH_STENCIL_VALUE {
  /** f32 */
  Depth: number;
  /** u8 */
  Stencil: number;
}

export const sizeofD3D12_DEPTH_STENCIL_VALUE = 8;

export function allocD3D12_DEPTH_STENCIL_VALUE(data?: Partial<D3D12_DEPTH_STENCIL_VALUE>): Uint8Array {
  const buf = new Uint8Array(sizeofD3D12_DEPTH_STENCIL_VALUE);
  const view = new DataView(buf.buffer);
  // 0x00: f32
  if (data?.Depth !== undefined) view.setFloat32(0, Number(data.Depth), true);
  // 0x04: u8
  if (data?.Stencil !== undefined) view.setUint8(4, Number(data.Stencil));
  // 0x05: pad3
  return buf;
}

export class D3D12_DEPTH_STENCIL_VALUEView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: f32
  get Depth(): number {
    return this.view.getFloat32(0, true);
  }

  // 0x04: u8
  get Stencil(): number {
    return this.view.getUint8(4);
  }

  // 0x05: pad3

  // 0x00: f32
  set Depth(value: number) {
    this.view.setFloat32(0, value, true);
  }

  // 0x04: u8
  set Stencil(value: number) {
    this.view.setUint8(4, value);
  }

  // 0x05: pad3
}

/**
 * Windows.Win32.Graphics.Direct3D12.D3D12_CLEAR_VALUE (size: 16)
 */
export interface D3D12_CLEAR_VALUE {
  /** Windows.Win32.Graphics.Dxgi.Common.DXGI_FORMAT */
  Format: DXGI_FORMAT;
  /** _Anonymous_e__Union */
  Anonymous: Uint8Array | Deno.PointerValue | null;
}

export const sizeofD3D12_CLEAR_VALUE = 16;

export function allocD3D12_CLEAR_VALUE(data?: Partial<D3D12_CLEAR_VALUE>): Uint8Array {
  const buf = new Uint8Array(sizeofD3D12_CLEAR_VALUE);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.Format !== undefined) view.setUint32(0, Number(data.Format), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.Anonymous !== undefined) view.setBigUint64(8, data.Anonymous === null ? 0n : util.toBigInt(util.toPointer(data.Anonymous)), true);
  return buf;
}

export class D3D12_CLEAR_VALUEView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get Format(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  get Anonymous(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(8, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: u32
  set Format(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  set Anonymous(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(8, util.toBigInt(util.toPointer(value)), true);
  }
}

/**
 * Windows.Win32.Graphics.Direct3D12.D3D12_RANGE (size: 16)
 */
export interface D3D12_RANGE {
  /** usize */
  Begin: number | bigint;
  /** usize */
  End: number | bigint;
}

export const sizeofD3D12_RANGE = 16;

export function allocD3D12_RANGE(data?: Partial<D3D12_RANGE>): Uint8Array {
  const buf = new Uint8Array(sizeofD3D12_RANGE);
  const view = new DataView(buf.buffer);
  // 0x00: usize
  if (data?.Begin !== undefined) view.setBigUint64(0, util.toBigInt(data.Begin), true);
  // 0x08: usize
  if (data?.End !== undefined) view.setBigUint64(8, util.toBigInt(data.End), true);
  return buf;
}

export class D3D12_RANGEView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: usize
  get Begin(): number | bigint {
    return this.view.getBigUint64(0, true);
  }

  // 0x08: usize
  get End(): number | bigint {
    return this.view.getBigUint64(8, true);
  }

  // 0x00: usize
  set Begin(value: number | bigint) {
    this.view.setBigUint64(0, util.toBigInt(value), true);
  }

  // 0x08: usize
  set End(value: number | bigint) {
    this.view.setBigUint64(8, util.toBigInt(value), true);
  }
}

/**
 * Windows.Win32.Graphics.Direct3D12.D3D12_RANGE_UINT64 (size: 16)
 */
export interface D3D12_RANGE_UINT64 {
  /** u64 */
  Begin: number | bigint;
  /** u64 */
  End: number | bigint;
}

export const sizeofD3D12_RANGE_UINT64 = 16;

export function allocD3D12_RANGE_UINT64(data?: Partial<D3D12_RANGE_UINT64>): Uint8Array {
  const buf = new Uint8Array(sizeofD3D12_RANGE_UINT64);
  const view = new DataView(buf.buffer);
  // 0x00: u64
  if (data?.Begin !== undefined) view.setBigUint64(0, util.toBigInt(data.Begin), true);
  // 0x08: u64
  if (data?.End !== undefined) view.setBigUint64(8, util.toBigInt(data.End), true);
  return buf;
}

export class D3D12_RANGE_UINT64View {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u64
  get Begin(): number | bigint {
    return this.view.getBigUint64(0, true);
  }

  // 0x08: u64
  get End(): number | bigint {
    return this.view.getBigUint64(8, true);
  }

  // 0x00: u64
  set Begin(value: number | bigint) {
    this.view.setBigUint64(0, util.toBigInt(value), true);
  }

  // 0x08: u64
  set End(value: number | bigint) {
    this.view.setBigUint64(8, util.toBigInt(value), true);
  }
}

/**
 * Windows.Win32.Graphics.Direct3D12.D3D12_SUBRESOURCE_RANGE_UINT64 (size: 16)
 */
export interface D3D12_SUBRESOURCE_RANGE_UINT64 {
  /** u32 */
  Subresource: number;
  /** Windows.Win32.Graphics.Direct3D12.D3D12_RANGE_UINT64 */
  Range: Uint8Array | Deno.PointerValue | null;
}

export const sizeofD3D12_SUBRESOURCE_RANGE_UINT64 = 16;

export function allocD3D12_SUBRESOURCE_RANGE_UINT64(data?: Partial<D3D12_SUBRESOURCE_RANGE_UINT64>): Uint8Array {
  const buf = new Uint8Array(sizeofD3D12_SUBRESOURCE_RANGE_UINT64);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.Subresource !== undefined) view.setUint32(0, Number(data.Subresource), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.Range !== undefined) view.setBigUint64(8, data.Range === null ? 0n : util.toBigInt(util.toPointer(data.Range)), true);
  return buf;
}

export class D3D12_SUBRESOURCE_RANGE_UINT64View {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get Subresource(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  get Range(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(8, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: u32
  set Subresource(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  set Range(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(8, util.toBigInt(util.toPointer(value)), true);
  }
}

/**
 * Windows.Win32.Graphics.Direct3D12.D3D12_SUBRESOURCE_INFO (size: 16)
 */
export interface D3D12_SUBRESOURCE_INFO {
  /** u64 */
  Offset: number | bigint;
  /** u32 */
  RowPitch: number;
  /** u32 */
  DepthPitch: number;
}

export const sizeofD3D12_SUBRESOURCE_INFO = 16;

export function allocD3D12_SUBRESOURCE_INFO(data?: Partial<D3D12_SUBRESOURCE_INFO>): Uint8Array {
  const buf = new Uint8Array(sizeofD3D12_SUBRESOURCE_INFO);
  const view = new DataView(buf.buffer);
  // 0x00: u64
  if (data?.Offset !== undefined) view.setBigUint64(0, util.toBigInt(data.Offset), true);
  // 0x08: u32
  if (data?.RowPitch !== undefined) view.setUint32(8, Number(data.RowPitch), true);
  // 0x0c: u32
  if (data?.DepthPitch !== undefined) view.setUint32(12, Number(data.DepthPitch), true);
  return buf;
}

export class D3D12_SUBRESOURCE_INFOView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u64
  get Offset(): number | bigint {
    return this.view.getBigUint64(0, true);
  }

  // 0x08: u32
  get RowPitch(): number {
    return this.view.getUint32(8, true);
  }

  // 0x0c: u32
  get DepthPitch(): number {
    return this.view.getUint32(12, true);
  }

  // 0x00: u64
  set Offset(value: number | bigint) {
    this.view.setBigUint64(0, util.toBigInt(value), true);
  }

  // 0x08: u32
  set RowPitch(value: number) {
    this.view.setUint32(8, value, true);
  }

  // 0x0c: u32
  set DepthPitch(value: number) {
    this.view.setUint32(12, value, true);
  }
}

/**
 * Windows.Win32.Graphics.Direct3D12.D3D12_TILED_RESOURCE_COORDINATE (size: 16)
 */
export interface D3D12_TILED_RESOURCE_COORDINATE {
  /** u32 */
  X: number;
  /** u32 */
  Y: number;
  /** u32 */
  Z: number;
  /** u32 */
  Subresource: number;
}

export const sizeofD3D12_TILED_RESOURCE_COORDINATE = 16;

export function allocD3D12_TILED_RESOURCE_COORDINATE(data?: Partial<D3D12_TILED_RESOURCE_COORDINATE>): Uint8Array {
  const buf = new Uint8Array(sizeofD3D12_TILED_RESOURCE_COORDINATE);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.X !== undefined) view.setUint32(0, Number(data.X), true);
  // 0x04: u32
  if (data?.Y !== undefined) view.setUint32(4, Number(data.Y), true);
  // 0x08: u32
  if (data?.Z !== undefined) view.setUint32(8, Number(data.Z), true);
  // 0x0c: u32
  if (data?.Subresource !== undefined) view.setUint32(12, Number(data.Subresource), true);
  return buf;
}

export class D3D12_TILED_RESOURCE_COORDINATEView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get X(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: u32
  get Y(): number {
    return this.view.getUint32(4, true);
  }

  // 0x08: u32
  get Z(): number {
    return this.view.getUint32(8, true);
  }

  // 0x0c: u32
  get Subresource(): number {
    return this.view.getUint32(12, true);
  }

  // 0x00: u32
  set X(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: u32
  set Y(value: number) {
    this.view.setUint32(4, value, true);
  }

  // 0x08: u32
  set Z(value: number) {
    this.view.setUint32(8, value, true);
  }

  // 0x0c: u32
  set Subresource(value: number) {
    this.view.setUint32(12, value, true);
  }
}

/**
 * Windows.Win32.Graphics.Direct3D12.D3D12_TILE_REGION_SIZE (size: 16)
 */
export interface D3D12_TILE_REGION_SIZE {
  /** u32 */
  NumTiles: number;
  /** Windows.Win32.Foundation.BOOL */
  UseBox: boolean;
  /** u32 */
  Width: number;
  /** u16 */
  Height: number;
  /** u16 */
  Depth: number;
}

export const sizeofD3D12_TILE_REGION_SIZE = 16;

export function allocD3D12_TILE_REGION_SIZE(data?: Partial<D3D12_TILE_REGION_SIZE>): Uint8Array {
  const buf = new Uint8Array(sizeofD3D12_TILE_REGION_SIZE);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.NumTiles !== undefined) view.setUint32(0, Number(data.NumTiles), true);
  // 0x04: i32
  if (data?.UseBox !== undefined) view.setInt32(4, Number(data.UseBox), true);
  // 0x08: u32
  if (data?.Width !== undefined) view.setUint32(8, Number(data.Width), true);
  // 0x0c: u16
  if (data?.Height !== undefined) view.setUint16(12, Number(data.Height), true);
  // 0x0e: u16
  if (data?.Depth !== undefined) view.setUint16(14, Number(data.Depth), true);
  return buf;
}

export class D3D12_TILE_REGION_SIZEView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get NumTiles(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: i32
  get UseBox(): number {
    return this.view.getInt32(4, true);
  }

  // 0x08: u32
  get Width(): number {
    return this.view.getUint32(8, true);
  }

  // 0x0c: u16
  get Height(): number {
    return this.view.getUint16(12, true);
  }

  // 0x0e: u16
  get Depth(): number {
    return this.view.getUint16(14, true);
  }

  // 0x00: u32
  set NumTiles(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: i32
  set UseBox(value: number) {
    this.view.setInt32(4, value, true);
  }

  // 0x08: u32
  set Width(value: number) {
    this.view.setUint32(8, value, true);
  }

  // 0x0c: u16
  set Height(value: number) {
    this.view.setUint16(12, value, true);
  }

  // 0x0e: u16
  set Depth(value: number) {
    this.view.setUint16(14, value, true);
  }
}

/**
 * Windows.Win32.Graphics.Direct3D12.D3D12_SUBRESOURCE_TILING (size: 16)
 */
export interface D3D12_SUBRESOURCE_TILING {
  /** u32 */
  WidthInTiles: number;
  /** u16 */
  HeightInTiles: number;
  /** u16 */
  DepthInTiles: number;
  /** u32 */
  StartTileIndexInOverallResource: number;
}

export const sizeofD3D12_SUBRESOURCE_TILING = 16;

export function allocD3D12_SUBRESOURCE_TILING(data?: Partial<D3D12_SUBRESOURCE_TILING>): Uint8Array {
  const buf = new Uint8Array(sizeofD3D12_SUBRESOURCE_TILING);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.WidthInTiles !== undefined) view.setUint32(0, Number(data.WidthInTiles), true);
  // 0x04: u16
  if (data?.HeightInTiles !== undefined) view.setUint16(4, Number(data.HeightInTiles), true);
  // 0x06: u16
  if (data?.DepthInTiles !== undefined) view.setUint16(6, Number(data.DepthInTiles), true);
  // 0x08: u32
  if (data?.StartTileIndexInOverallResource !== undefined) view.setUint32(8, Number(data.StartTileIndexInOverallResource), true);
  // 0x0c: pad4
  return buf;
}

export class D3D12_SUBRESOURCE_TILINGView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get WidthInTiles(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: u16
  get HeightInTiles(): number {
    return this.view.getUint16(4, true);
  }

  // 0x06: u16
  get DepthInTiles(): number {
    return this.view.getUint16(6, true);
  }

  // 0x08: u32
  get StartTileIndexInOverallResource(): number {
    return this.view.getUint32(8, true);
  }

  // 0x0c: pad4

  // 0x00: u32
  set WidthInTiles(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: u16
  set HeightInTiles(value: number) {
    this.view.setUint16(4, value, true);
  }

  // 0x06: u16
  set DepthInTiles(value: number) {
    this.view.setUint16(6, value, true);
  }

  // 0x08: u32
  set StartTileIndexInOverallResource(value: number) {
    this.view.setUint32(8, value, true);
  }

  // 0x0c: pad4
}

/**
 * Windows.Win32.Graphics.Direct3D12.D3D12_TILE_SHAPE (size: 16)
 */
export interface D3D12_TILE_SHAPE {
  /** u32 */
  WidthInTexels: number;
  /** u32 */
  HeightInTexels: number;
  /** u32 */
  DepthInTexels: number;
}

export const sizeofD3D12_TILE_SHAPE = 16;

export function allocD3D12_TILE_SHAPE(data?: Partial<D3D12_TILE_SHAPE>): Uint8Array {
  const buf = new Uint8Array(sizeofD3D12_TILE_SHAPE);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.WidthInTexels !== undefined) view.setUint32(0, Number(data.WidthInTexels), true);
  // 0x04: u32
  if (data?.HeightInTexels !== undefined) view.setUint32(4, Number(data.HeightInTexels), true);
  // 0x08: u32
  if (data?.DepthInTexels !== undefined) view.setUint32(8, Number(data.DepthInTexels), true);
  // 0x0c: pad4
  return buf;
}

export class D3D12_TILE_SHAPEView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get WidthInTexels(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: u32
  get HeightInTexels(): number {
    return this.view.getUint32(4, true);
  }

  // 0x08: u32
  get DepthInTexels(): number {
    return this.view.getUint32(8, true);
  }

  // 0x0c: pad4

  // 0x00: u32
  set WidthInTexels(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: u32
  set HeightInTexels(value: number) {
    this.view.setUint32(4, value, true);
  }

  // 0x08: u32
  set DepthInTexels(value: number) {
    this.view.setUint32(8, value, true);
  }

  // 0x0c: pad4
}

/**
 * Windows.Win32.Graphics.Direct3D12.D3D12_PACKED_MIP_INFO (size: 16)
 */
export interface D3D12_PACKED_MIP_INFO {
  /** u8 */
  NumStandardMips: number;
  /** u8 */
  NumPackedMips: number;
  /** u32 */
  NumTilesForPackedMips: number;
  /** u32 */
  StartTileIndexInOverallResource: number;
}

export const sizeofD3D12_PACKED_MIP_INFO = 16;

export function allocD3D12_PACKED_MIP_INFO(data?: Partial<D3D12_PACKED_MIP_INFO>): Uint8Array {
  const buf = new Uint8Array(sizeofD3D12_PACKED_MIP_INFO);
  const view = new DataView(buf.buffer);
  // 0x00: u8
  if (data?.NumStandardMips !== undefined) view.setUint8(0, Number(data.NumStandardMips));
  // 0x01: u8
  if (data?.NumPackedMips !== undefined) view.setUint8(1, Number(data.NumPackedMips));
  // 0x02: u32
  if (data?.NumTilesForPackedMips !== undefined) view.setUint32(2, Number(data.NumTilesForPackedMips), true);
  // 0x06: u32
  if (data?.StartTileIndexInOverallResource !== undefined) view.setUint32(6, Number(data.StartTileIndexInOverallResource), true);
  // 0x0a: pad6
  return buf;
}

export class D3D12_PACKED_MIP_INFOView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u8
  get NumStandardMips(): number {
    return this.view.getUint8(0);
  }

  // 0x01: u8
  get NumPackedMips(): number {
    return this.view.getUint8(1);
  }

  // 0x02: u32
  get NumTilesForPackedMips(): number {
    return this.view.getUint32(2, true);
  }

  // 0x06: u32
  get StartTileIndexInOverallResource(): number {
    return this.view.getUint32(6, true);
  }

  // 0x0a: pad6

  // 0x00: u8
  set NumStandardMips(value: number) {
    this.view.setUint8(0, value);
  }

  // 0x01: u8
  set NumPackedMips(value: number) {
    this.view.setUint8(1, value);
  }

  // 0x02: u32
  set NumTilesForPackedMips(value: number) {
    this.view.setUint32(2, value, true);
  }

  // 0x06: u32
  set StartTileIndexInOverallResource(value: number) {
    this.view.setUint32(6, value, true);
  }

  // 0x0a: pad6
}

/**
 * Windows.Win32.Graphics.Direct3D12.D3D12_RESOURCE_TRANSITION_BARRIER (size: 24)
 */
export interface D3D12_RESOURCE_TRANSITION_BARRIER {
  /** Windows.Win32.Graphics.Direct3D12.ID3D12Resource */
  pResource: Uint8Array | Deno.PointerValue | null;
  /** u32 */
  Subresource: number;
  /** Windows.Win32.Graphics.Direct3D12.D3D12_RESOURCE_STATES */
  StateBefore: D3D12_RESOURCE_STATES;
  /** Windows.Win32.Graphics.Direct3D12.D3D12_RESOURCE_STATES */
  StateAfter: D3D12_RESOURCE_STATES;
}

export const sizeofD3D12_RESOURCE_TRANSITION_BARRIER = 24;

export function allocD3D12_RESOURCE_TRANSITION_BARRIER(data?: Partial<D3D12_RESOURCE_TRANSITION_BARRIER>): Uint8Array {
  const buf = new Uint8Array(sizeofD3D12_RESOURCE_TRANSITION_BARRIER);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.pResource !== undefined) view.setBigUint64(0, data.pResource === null ? 0n : util.toBigInt(util.toPointer(data.pResource)), true);
  // 0x08: u32
  if (data?.Subresource !== undefined) view.setUint32(8, Number(data.Subresource), true);
  // 0x0c: u32
  if (data?.StateBefore !== undefined) view.setUint32(12, Number(data.StateBefore), true);
  // 0x10: u32
  if (data?.StateAfter !== undefined) view.setUint32(16, Number(data.StateAfter), true);
  // 0x14: pad4
  return buf;
}

export class D3D12_RESOURCE_TRANSITION_BARRIERView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get pResource(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(0, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x08: u32
  get Subresource(): number {
    return this.view.getUint32(8, true);
  }

  // 0x0c: u32
  get StateBefore(): number {
    return this.view.getUint32(12, true);
  }

  // 0x10: u32
  get StateAfter(): number {
    return this.view.getUint32(16, true);
  }

  // 0x14: pad4

  // 0x00: pointer
  set pResource(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(0, util.toBigInt(util.toPointer(value)), true);
  }

  // 0x08: u32
  set Subresource(value: number) {
    this.view.setUint32(8, value, true);
  }

  // 0x0c: u32
  set StateBefore(value: number) {
    this.view.setUint32(12, value, true);
  }

  // 0x10: u32
  set StateAfter(value: number) {
    this.view.setUint32(16, value, true);
  }

  // 0x14: pad4
}

/**
 * Windows.Win32.Graphics.Direct3D12.D3D12_RESOURCE_ALIASING_BARRIER (size: 16)
 */
export interface D3D12_RESOURCE_ALIASING_BARRIER {
  /** Windows.Win32.Graphics.Direct3D12.ID3D12Resource */
  pResourceBefore: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Graphics.Direct3D12.ID3D12Resource */
  pResourceAfter: Uint8Array | Deno.PointerValue | null;
}

export const sizeofD3D12_RESOURCE_ALIASING_BARRIER = 16;

export function allocD3D12_RESOURCE_ALIASING_BARRIER(data?: Partial<D3D12_RESOURCE_ALIASING_BARRIER>): Uint8Array {
  const buf = new Uint8Array(sizeofD3D12_RESOURCE_ALIASING_BARRIER);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.pResourceBefore !== undefined) view.setBigUint64(0, data.pResourceBefore === null ? 0n : util.toBigInt(util.toPointer(data.pResourceBefore)), true);
  // 0x08: pointer
  if (data?.pResourceAfter !== undefined) view.setBigUint64(8, data.pResourceAfter === null ? 0n : util.toBigInt(util.toPointer(data.pResourceAfter)), true);
  return buf;
}

export class D3D12_RESOURCE_ALIASING_BARRIERView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get pResourceBefore(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(0, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x08: pointer
  get pResourceAfter(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(8, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: pointer
  set pResourceBefore(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(0, util.toBigInt(util.toPointer(value)), true);
  }

  // 0x08: pointer
  set pResourceAfter(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(8, util.toBigInt(util.toPointer(value)), true);
  }
}

/**
 * Windows.Win32.Graphics.Direct3D12.D3D12_RESOURCE_UAV_BARRIER (size: 8)
 */
export interface D3D12_RESOURCE_UAV_BARRIER {
  /** Windows.Win32.Graphics.Direct3D12.ID3D12Resource */
  pResource: Uint8Array | Deno.PointerValue | null;
}

export const sizeofD3D12_RESOURCE_UAV_BARRIER = 8;

export function allocD3D12_RESOURCE_UAV_BARRIER(data?: Partial<D3D12_RESOURCE_UAV_BARRIER>): Uint8Array {
  const buf = new Uint8Array(sizeofD3D12_RESOURCE_UAV_BARRIER);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.pResource !== undefined) view.setBigUint64(0, data.pResource === null ? 0n : util.toBigInt(util.toPointer(data.pResource)), true);
  return buf;
}

export class D3D12_RESOURCE_UAV_BARRIERView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get pResource(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(0, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: pointer
  set pResource(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(0, util.toBigInt(util.toPointer(value)), true);
  }
}

/**
 * Windows.Win32.Graphics.Direct3D12.D3D12_RESOURCE_BARRIER (size: 16)
 */
export interface D3D12_RESOURCE_BARRIER {
  /** Windows.Win32.Graphics.Direct3D12.D3D12_RESOURCE_BARRIER_TYPE */
  Type: D3D12_RESOURCE_BARRIER_TYPE;
  /** Windows.Win32.Graphics.Direct3D12.D3D12_RESOURCE_BARRIER_FLAGS */
  Flags: D3D12_RESOURCE_BARRIER_FLAGS;
  /** _Anonymous_e__Union */
  Anonymous: Uint8Array | Deno.PointerValue | null;
}

export const sizeofD3D12_RESOURCE_BARRIER = 16;

export function allocD3D12_RESOURCE_BARRIER(data?: Partial<D3D12_RESOURCE_BARRIER>): Uint8Array {
  const buf = new Uint8Array(sizeofD3D12_RESOURCE_BARRIER);
  const view = new DataView(buf.buffer);
  // 0x00: i32
  if (data?.Type !== undefined) view.setInt32(0, Number(data.Type), true);
  // 0x04: u32
  if (data?.Flags !== undefined) view.setUint32(4, Number(data.Flags), true);
  // 0x08: pointer
  if (data?.Anonymous !== undefined) view.setBigUint64(8, data.Anonymous === null ? 0n : util.toBigInt(util.toPointer(data.Anonymous)), true);
  return buf;
}

export class D3D12_RESOURCE_BARRIERView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: i32
  get Type(): number {
    return this.view.getInt32(0, true);
  }

  // 0x04: u32
  get Flags(): number {
    return this.view.getUint32(4, true);
  }

  // 0x08: pointer
  get Anonymous(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(8, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: i32
  set Type(value: number) {
    this.view.setInt32(0, value, true);
  }

  // 0x04: u32
  set Flags(value: number) {
    this.view.setUint32(4, value, true);
  }

  // 0x08: pointer
  set Anonymous(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(8, util.toBigInt(util.toPointer(value)), true);
  }
}

/**
 * Windows.Win32.Graphics.Direct3D12.D3D12_SUBRESOURCE_FOOTPRINT (size: 24)
 */
export interface D3D12_SUBRESOURCE_FOOTPRINT {
  /** Windows.Win32.Graphics.Dxgi.Common.DXGI_FORMAT */
  Format: DXGI_FORMAT;
  /** u32 */
  Width: number;
  /** u32 */
  Height: number;
  /** u32 */
  Depth: number;
  /** u32 */
  RowPitch: number;
}

export const sizeofD3D12_SUBRESOURCE_FOOTPRINT = 24;

export function allocD3D12_SUBRESOURCE_FOOTPRINT(data?: Partial<D3D12_SUBRESOURCE_FOOTPRINT>): Uint8Array {
  const buf = new Uint8Array(sizeofD3D12_SUBRESOURCE_FOOTPRINT);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.Format !== undefined) view.setUint32(0, Number(data.Format), true);
  // 0x04: u32
  if (data?.Width !== undefined) view.setUint32(4, Number(data.Width), true);
  // 0x08: u32
  if (data?.Height !== undefined) view.setUint32(8, Number(data.Height), true);
  // 0x0c: u32
  if (data?.Depth !== undefined) view.setUint32(12, Number(data.Depth), true);
  // 0x10: u32
  if (data?.RowPitch !== undefined) view.setUint32(16, Number(data.RowPitch), true);
  // 0x14: pad4
  return buf;
}

export class D3D12_SUBRESOURCE_FOOTPRINTView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get Format(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: u32
  get Width(): number {
    return this.view.getUint32(4, true);
  }

  // 0x08: u32
  get Height(): number {
    return this.view.getUint32(8, true);
  }

  // 0x0c: u32
  get Depth(): number {
    return this.view.getUint32(12, true);
  }

  // 0x10: u32
  get RowPitch(): number {
    return this.view.getUint32(16, true);
  }

  // 0x14: pad4

  // 0x00: u32
  set Format(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: u32
  set Width(value: number) {
    this.view.setUint32(4, value, true);
  }

  // 0x08: u32
  set Height(value: number) {
    this.view.setUint32(8, value, true);
  }

  // 0x0c: u32
  set Depth(value: number) {
    this.view.setUint32(12, value, true);
  }

  // 0x10: u32
  set RowPitch(value: number) {
    this.view.setUint32(16, value, true);
  }

  // 0x14: pad4
}

/**
 * Windows.Win32.Graphics.Direct3D12.D3D12_PLACED_SUBRESOURCE_FOOTPRINT (size: 16)
 */
export interface D3D12_PLACED_SUBRESOURCE_FOOTPRINT {
  /** u64 */
  Offset: number | bigint;
  /** Windows.Win32.Graphics.Direct3D12.D3D12_SUBRESOURCE_FOOTPRINT */
  Footprint: Uint8Array | Deno.PointerValue | null;
}

export const sizeofD3D12_PLACED_SUBRESOURCE_FOOTPRINT = 16;

export function allocD3D12_PLACED_SUBRESOURCE_FOOTPRINT(data?: Partial<D3D12_PLACED_SUBRESOURCE_FOOTPRINT>): Uint8Array {
  const buf = new Uint8Array(sizeofD3D12_PLACED_SUBRESOURCE_FOOTPRINT);
  const view = new DataView(buf.buffer);
  // 0x00: u64
  if (data?.Offset !== undefined) view.setBigUint64(0, util.toBigInt(data.Offset), true);
  // 0x08: pointer
  if (data?.Footprint !== undefined) view.setBigUint64(8, data.Footprint === null ? 0n : util.toBigInt(util.toPointer(data.Footprint)), true);
  return buf;
}

export class D3D12_PLACED_SUBRESOURCE_FOOTPRINTView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u64
  get Offset(): number | bigint {
    return this.view.getBigUint64(0, true);
  }

  // 0x08: pointer
  get Footprint(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(8, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: u64
  set Offset(value: number | bigint) {
    this.view.setBigUint64(0, util.toBigInt(value), true);
  }

  // 0x08: pointer
  set Footprint(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(8, util.toBigInt(util.toPointer(value)), true);
  }
}

/**
 * Windows.Win32.Graphics.Direct3D12.D3D12_TEXTURE_COPY_LOCATION (size: 24)
 */
export interface D3D12_TEXTURE_COPY_LOCATION {
  /** Windows.Win32.Graphics.Direct3D12.ID3D12Resource */
  pResource: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Graphics.Direct3D12.D3D12_TEXTURE_COPY_TYPE */
  Type: D3D12_TEXTURE_COPY_TYPE;
  /** _Anonymous_e__Union */
  Anonymous: Uint8Array | Deno.PointerValue | null;
}

export const sizeofD3D12_TEXTURE_COPY_LOCATION = 24;

export function allocD3D12_TEXTURE_COPY_LOCATION(data?: Partial<D3D12_TEXTURE_COPY_LOCATION>): Uint8Array {
  const buf = new Uint8Array(sizeofD3D12_TEXTURE_COPY_LOCATION);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.pResource !== undefined) view.setBigUint64(0, data.pResource === null ? 0n : util.toBigInt(util.toPointer(data.pResource)), true);
  // 0x08: i32
  if (data?.Type !== undefined) view.setInt32(8, Number(data.Type), true);
  // 0x0c: pad4
  // 0x10: pointer
  if (data?.Anonymous !== undefined) view.setBigUint64(16, data.Anonymous === null ? 0n : util.toBigInt(util.toPointer(data.Anonymous)), true);
  return buf;
}

export class D3D12_TEXTURE_COPY_LOCATIONView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get pResource(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(0, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x08: i32
  get Type(): number {
    return this.view.getInt32(8, true);
  }

  // 0x0c: pad4

  // 0x10: pointer
  get Anonymous(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(16, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: pointer
  set pResource(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(0, util.toBigInt(util.toPointer(value)), true);
  }

  // 0x08: i32
  set Type(value: number) {
    this.view.setInt32(8, value, true);
  }

  // 0x0c: pad4

  // 0x10: pointer
  set Anonymous(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(16, util.toBigInt(util.toPointer(value)), true);
  }
}

/**
 * Windows.Win32.Graphics.Direct3D12.D3D12_SAMPLE_POSITION (size: 8)
 */
export interface D3D12_SAMPLE_POSITION {
  /** i8 */
  X: number;
  /** i8 */
  Y: number;
}

export const sizeofD3D12_SAMPLE_POSITION = 8;

export function allocD3D12_SAMPLE_POSITION(data?: Partial<D3D12_SAMPLE_POSITION>): Uint8Array {
  const buf = new Uint8Array(sizeofD3D12_SAMPLE_POSITION);
  const view = new DataView(buf.buffer);
  // 0x00: i8
  if (data?.X !== undefined) view.setInt8(0, Number(data.X));
  // 0x01: i8
  if (data?.Y !== undefined) view.setInt8(1, Number(data.Y));
  // 0x02: pad6
  return buf;
}

export class D3D12_SAMPLE_POSITIONView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: i8
  get X(): number {
    return this.view.getInt8(0);
  }

  // 0x01: i8
  get Y(): number {
    return this.view.getInt8(1);
  }

  // 0x02: pad6

  // 0x00: i8
  set X(value: number) {
    this.view.setInt8(0, value);
  }

  // 0x01: i8
  set Y(value: number) {
    this.view.setInt8(1, value);
  }

  // 0x02: pad6
}

/**
 * Windows.Win32.Graphics.Direct3D12.D3D12_VIEW_INSTANCE_LOCATION (size: 8)
 */
export interface D3D12_VIEW_INSTANCE_LOCATION {
  /** u32 */
  ViewportArrayIndex: number;
  /** u32 */
  RenderTargetArrayIndex: number;
}

export const sizeofD3D12_VIEW_INSTANCE_LOCATION = 8;

export function allocD3D12_VIEW_INSTANCE_LOCATION(data?: Partial<D3D12_VIEW_INSTANCE_LOCATION>): Uint8Array {
  const buf = new Uint8Array(sizeofD3D12_VIEW_INSTANCE_LOCATION);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.ViewportArrayIndex !== undefined) view.setUint32(0, Number(data.ViewportArrayIndex), true);
  // 0x04: u32
  if (data?.RenderTargetArrayIndex !== undefined) view.setUint32(4, Number(data.RenderTargetArrayIndex), true);
  return buf;
}

export class D3D12_VIEW_INSTANCE_LOCATIONView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get ViewportArrayIndex(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: u32
  get RenderTargetArrayIndex(): number {
    return this.view.getUint32(4, true);
  }

  // 0x00: u32
  set ViewportArrayIndex(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: u32
  set RenderTargetArrayIndex(value: number) {
    this.view.setUint32(4, value, true);
  }
}

/**
 * Windows.Win32.Graphics.Direct3D12.D3D12_VIEW_INSTANCING_DESC (size: 24)
 */
export interface D3D12_VIEW_INSTANCING_DESC {
  /** u32 */
  ViewInstanceCount: number;
  /** ptr */
  pViewInstanceLocations: Deno.PointerValue | Uint8Array | null;
  /** Windows.Win32.Graphics.Direct3D12.D3D12_VIEW_INSTANCING_FLAGS */
  Flags: D3D12_VIEW_INSTANCING_FLAGS;
}

export const sizeofD3D12_VIEW_INSTANCING_DESC = 24;

export function allocD3D12_VIEW_INSTANCING_DESC(data?: Partial<D3D12_VIEW_INSTANCING_DESC>): Uint8Array {
  const buf = new Uint8Array(sizeofD3D12_VIEW_INSTANCING_DESC);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.ViewInstanceCount !== undefined) view.setUint32(0, Number(data.ViewInstanceCount), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.pViewInstanceLocations !== undefined) view.setBigUint64(8, data.pViewInstanceLocations === null ? 0n : util.toBigInt(util.toPointer(data.pViewInstanceLocations)), true);
  // 0x10: u32
  if (data?.Flags !== undefined) view.setUint32(16, Number(data.Flags), true);
  // 0x14: pad4
  return buf;
}

export class D3D12_VIEW_INSTANCING_DESCView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get ViewInstanceCount(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  get pViewInstanceLocations(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(8, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x10: u32
  get Flags(): number {
    return this.view.getUint32(16, true);
  }

  // 0x14: pad4

  // 0x00: u32
  set ViewInstanceCount(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  set pViewInstanceLocations(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(8, util.toBigInt(util.toPointer(value)), true);
  }

  // 0x10: u32
  set Flags(value: number) {
    this.view.setUint32(16, value, true);
  }

  // 0x14: pad4
}

/**
 * Windows.Win32.Graphics.Direct3D12.D3D12_BUFFER_SRV (size: 24)
 */
export interface D3D12_BUFFER_SRV {
  /** u64 */
  FirstElement: number | bigint;
  /** u32 */
  NumElements: number;
  /** u32 */
  StructureByteStride: number;
  /** Windows.Win32.Graphics.Direct3D12.D3D12_BUFFER_SRV_FLAGS */
  Flags: D3D12_BUFFER_SRV_FLAGS;
}

export const sizeofD3D12_BUFFER_SRV = 24;

export function allocD3D12_BUFFER_SRV(data?: Partial<D3D12_BUFFER_SRV>): Uint8Array {
  const buf = new Uint8Array(sizeofD3D12_BUFFER_SRV);
  const view = new DataView(buf.buffer);
  // 0x00: u64
  if (data?.FirstElement !== undefined) view.setBigUint64(0, util.toBigInt(data.FirstElement), true);
  // 0x08: u32
  if (data?.NumElements !== undefined) view.setUint32(8, Number(data.NumElements), true);
  // 0x0c: u32
  if (data?.StructureByteStride !== undefined) view.setUint32(12, Number(data.StructureByteStride), true);
  // 0x10: u32
  if (data?.Flags !== undefined) view.setUint32(16, Number(data.Flags), true);
  // 0x14: pad4
  return buf;
}

export class D3D12_BUFFER_SRVView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u64
  get FirstElement(): number | bigint {
    return this.view.getBigUint64(0, true);
  }

  // 0x08: u32
  get NumElements(): number {
    return this.view.getUint32(8, true);
  }

  // 0x0c: u32
  get StructureByteStride(): number {
    return this.view.getUint32(12, true);
  }

  // 0x10: u32
  get Flags(): number {
    return this.view.getUint32(16, true);
  }

  // 0x14: pad4

  // 0x00: u64
  set FirstElement(value: number | bigint) {
    this.view.setBigUint64(0, util.toBigInt(value), true);
  }

  // 0x08: u32
  set NumElements(value: number) {
    this.view.setUint32(8, value, true);
  }

  // 0x0c: u32
  set StructureByteStride(value: number) {
    this.view.setUint32(12, value, true);
  }

  // 0x10: u32
  set Flags(value: number) {
    this.view.setUint32(16, value, true);
  }

  // 0x14: pad4
}

/**
 * Windows.Win32.Graphics.Direct3D12.D3D12_TEX1D_SRV (size: 16)
 */
export interface D3D12_TEX1D_SRV {
  /** u32 */
  MostDetailedMip: number;
  /** u32 */
  MipLevels: number;
  /** f32 */
  ResourceMinLODClamp: number;
}

export const sizeofD3D12_TEX1D_SRV = 16;

export function allocD3D12_TEX1D_SRV(data?: Partial<D3D12_TEX1D_SRV>): Uint8Array {
  const buf = new Uint8Array(sizeofD3D12_TEX1D_SRV);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.MostDetailedMip !== undefined) view.setUint32(0, Number(data.MostDetailedMip), true);
  // 0x04: u32
  if (data?.MipLevels !== undefined) view.setUint32(4, Number(data.MipLevels), true);
  // 0x08: f32
  if (data?.ResourceMinLODClamp !== undefined) view.setFloat32(8, Number(data.ResourceMinLODClamp), true);
  // 0x0c: pad4
  return buf;
}

export class D3D12_TEX1D_SRVView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get MostDetailedMip(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: u32
  get MipLevels(): number {
    return this.view.getUint32(4, true);
  }

  // 0x08: f32
  get ResourceMinLODClamp(): number {
    return this.view.getFloat32(8, true);
  }

  // 0x0c: pad4

  // 0x00: u32
  set MostDetailedMip(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: u32
  set MipLevels(value: number) {
    this.view.setUint32(4, value, true);
  }

  // 0x08: f32
  set ResourceMinLODClamp(value: number) {
    this.view.setFloat32(8, value, true);
  }

  // 0x0c: pad4
}

/**
 * Windows.Win32.Graphics.Direct3D12.D3D12_TEX1D_ARRAY_SRV (size: 24)
 */
export interface D3D12_TEX1D_ARRAY_SRV {
  /** u32 */
  MostDetailedMip: number;
  /** u32 */
  MipLevels: number;
  /** u32 */
  FirstArraySlice: number;
  /** u32 */
  ArraySize: number;
  /** f32 */
  ResourceMinLODClamp: number;
}

export const sizeofD3D12_TEX1D_ARRAY_SRV = 24;

export function allocD3D12_TEX1D_ARRAY_SRV(data?: Partial<D3D12_TEX1D_ARRAY_SRV>): Uint8Array {
  const buf = new Uint8Array(sizeofD3D12_TEX1D_ARRAY_SRV);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.MostDetailedMip !== undefined) view.setUint32(0, Number(data.MostDetailedMip), true);
  // 0x04: u32
  if (data?.MipLevels !== undefined) view.setUint32(4, Number(data.MipLevels), true);
  // 0x08: u32
  if (data?.FirstArraySlice !== undefined) view.setUint32(8, Number(data.FirstArraySlice), true);
  // 0x0c: u32
  if (data?.ArraySize !== undefined) view.setUint32(12, Number(data.ArraySize), true);
  // 0x10: f32
  if (data?.ResourceMinLODClamp !== undefined) view.setFloat32(16, Number(data.ResourceMinLODClamp), true);
  // 0x14: pad4
  return buf;
}

export class D3D12_TEX1D_ARRAY_SRVView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get MostDetailedMip(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: u32
  get MipLevels(): number {
    return this.view.getUint32(4, true);
  }

  // 0x08: u32
  get FirstArraySlice(): number {
    return this.view.getUint32(8, true);
  }

  // 0x0c: u32
  get ArraySize(): number {
    return this.view.getUint32(12, true);
  }

  // 0x10: f32
  get ResourceMinLODClamp(): number {
    return this.view.getFloat32(16, true);
  }

  // 0x14: pad4

  // 0x00: u32
  set MostDetailedMip(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: u32
  set MipLevels(value: number) {
    this.view.setUint32(4, value, true);
  }

  // 0x08: u32
  set FirstArraySlice(value: number) {
    this.view.setUint32(8, value, true);
  }

  // 0x0c: u32
  set ArraySize(value: number) {
    this.view.setUint32(12, value, true);
  }

  // 0x10: f32
  set ResourceMinLODClamp(value: number) {
    this.view.setFloat32(16, value, true);
  }

  // 0x14: pad4
}

/**
 * Windows.Win32.Graphics.Direct3D12.D3D12_TEX2D_SRV (size: 16)
 */
export interface D3D12_TEX2D_SRV {
  /** u32 */
  MostDetailedMip: number;
  /** u32 */
  MipLevels: number;
  /** u32 */
  PlaneSlice: number;
  /** f32 */
  ResourceMinLODClamp: number;
}

export const sizeofD3D12_TEX2D_SRV = 16;

export function allocD3D12_TEX2D_SRV(data?: Partial<D3D12_TEX2D_SRV>): Uint8Array {
  const buf = new Uint8Array(sizeofD3D12_TEX2D_SRV);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.MostDetailedMip !== undefined) view.setUint32(0, Number(data.MostDetailedMip), true);
  // 0x04: u32
  if (data?.MipLevels !== undefined) view.setUint32(4, Number(data.MipLevels), true);
  // 0x08: u32
  if (data?.PlaneSlice !== undefined) view.setUint32(8, Number(data.PlaneSlice), true);
  // 0x0c: f32
  if (data?.ResourceMinLODClamp !== undefined) view.setFloat32(12, Number(data.ResourceMinLODClamp), true);
  return buf;
}

export class D3D12_TEX2D_SRVView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get MostDetailedMip(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: u32
  get MipLevels(): number {
    return this.view.getUint32(4, true);
  }

  // 0x08: u32
  get PlaneSlice(): number {
    return this.view.getUint32(8, true);
  }

  // 0x0c: f32
  get ResourceMinLODClamp(): number {
    return this.view.getFloat32(12, true);
  }

  // 0x00: u32
  set MostDetailedMip(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: u32
  set MipLevels(value: number) {
    this.view.setUint32(4, value, true);
  }

  // 0x08: u32
  set PlaneSlice(value: number) {
    this.view.setUint32(8, value, true);
  }

  // 0x0c: f32
  set ResourceMinLODClamp(value: number) {
    this.view.setFloat32(12, value, true);
  }
}

/**
 * Windows.Win32.Graphics.Direct3D12.D3D12_TEX2D_ARRAY_SRV (size: 24)
 */
export interface D3D12_TEX2D_ARRAY_SRV {
  /** u32 */
  MostDetailedMip: number;
  /** u32 */
  MipLevels: number;
  /** u32 */
  FirstArraySlice: number;
  /** u32 */
  ArraySize: number;
  /** u32 */
  PlaneSlice: number;
  /** f32 */
  ResourceMinLODClamp: number;
}

export const sizeofD3D12_TEX2D_ARRAY_SRV = 24;

export function allocD3D12_TEX2D_ARRAY_SRV(data?: Partial<D3D12_TEX2D_ARRAY_SRV>): Uint8Array {
  const buf = new Uint8Array(sizeofD3D12_TEX2D_ARRAY_SRV);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.MostDetailedMip !== undefined) view.setUint32(0, Number(data.MostDetailedMip), true);
  // 0x04: u32
  if (data?.MipLevels !== undefined) view.setUint32(4, Number(data.MipLevels), true);
  // 0x08: u32
  if (data?.FirstArraySlice !== undefined) view.setUint32(8, Number(data.FirstArraySlice), true);
  // 0x0c: u32
  if (data?.ArraySize !== undefined) view.setUint32(12, Number(data.ArraySize), true);
  // 0x10: u32
  if (data?.PlaneSlice !== undefined) view.setUint32(16, Number(data.PlaneSlice), true);
  // 0x14: f32
  if (data?.ResourceMinLODClamp !== undefined) view.setFloat32(20, Number(data.ResourceMinLODClamp), true);
  return buf;
}

export class D3D12_TEX2D_ARRAY_SRVView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get MostDetailedMip(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: u32
  get MipLevels(): number {
    return this.view.getUint32(4, true);
  }

  // 0x08: u32
  get FirstArraySlice(): number {
    return this.view.getUint32(8, true);
  }

  // 0x0c: u32
  get ArraySize(): number {
    return this.view.getUint32(12, true);
  }

  // 0x10: u32
  get PlaneSlice(): number {
    return this.view.getUint32(16, true);
  }

  // 0x14: f32
  get ResourceMinLODClamp(): number {
    return this.view.getFloat32(20, true);
  }

  // 0x00: u32
  set MostDetailedMip(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: u32
  set MipLevels(value: number) {
    this.view.setUint32(4, value, true);
  }

  // 0x08: u32
  set FirstArraySlice(value: number) {
    this.view.setUint32(8, value, true);
  }

  // 0x0c: u32
  set ArraySize(value: number) {
    this.view.setUint32(12, value, true);
  }

  // 0x10: u32
  set PlaneSlice(value: number) {
    this.view.setUint32(16, value, true);
  }

  // 0x14: f32
  set ResourceMinLODClamp(value: number) {
    this.view.setFloat32(20, value, true);
  }
}

/**
 * Windows.Win32.Graphics.Direct3D12.D3D12_TEX3D_SRV (size: 16)
 */
export interface D3D12_TEX3D_SRV {
  /** u32 */
  MostDetailedMip: number;
  /** u32 */
  MipLevels: number;
  /** f32 */
  ResourceMinLODClamp: number;
}

export const sizeofD3D12_TEX3D_SRV = 16;

export function allocD3D12_TEX3D_SRV(data?: Partial<D3D12_TEX3D_SRV>): Uint8Array {
  const buf = new Uint8Array(sizeofD3D12_TEX3D_SRV);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.MostDetailedMip !== undefined) view.setUint32(0, Number(data.MostDetailedMip), true);
  // 0x04: u32
  if (data?.MipLevels !== undefined) view.setUint32(4, Number(data.MipLevels), true);
  // 0x08: f32
  if (data?.ResourceMinLODClamp !== undefined) view.setFloat32(8, Number(data.ResourceMinLODClamp), true);
  // 0x0c: pad4
  return buf;
}

export class D3D12_TEX3D_SRVView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get MostDetailedMip(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: u32
  get MipLevels(): number {
    return this.view.getUint32(4, true);
  }

  // 0x08: f32
  get ResourceMinLODClamp(): number {
    return this.view.getFloat32(8, true);
  }

  // 0x0c: pad4

  // 0x00: u32
  set MostDetailedMip(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: u32
  set MipLevels(value: number) {
    this.view.setUint32(4, value, true);
  }

  // 0x08: f32
  set ResourceMinLODClamp(value: number) {
    this.view.setFloat32(8, value, true);
  }

  // 0x0c: pad4
}

/**
 * Windows.Win32.Graphics.Direct3D12.D3D12_TEXCUBE_SRV (size: 16)
 */
export interface D3D12_TEXCUBE_SRV {
  /** u32 */
  MostDetailedMip: number;
  /** u32 */
  MipLevels: number;
  /** f32 */
  ResourceMinLODClamp: number;
}

export const sizeofD3D12_TEXCUBE_SRV = 16;

export function allocD3D12_TEXCUBE_SRV(data?: Partial<D3D12_TEXCUBE_SRV>): Uint8Array {
  const buf = new Uint8Array(sizeofD3D12_TEXCUBE_SRV);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.MostDetailedMip !== undefined) view.setUint32(0, Number(data.MostDetailedMip), true);
  // 0x04: u32
  if (data?.MipLevels !== undefined) view.setUint32(4, Number(data.MipLevels), true);
  // 0x08: f32
  if (data?.ResourceMinLODClamp !== undefined) view.setFloat32(8, Number(data.ResourceMinLODClamp), true);
  // 0x0c: pad4
  return buf;
}

export class D3D12_TEXCUBE_SRVView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get MostDetailedMip(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: u32
  get MipLevels(): number {
    return this.view.getUint32(4, true);
  }

  // 0x08: f32
  get ResourceMinLODClamp(): number {
    return this.view.getFloat32(8, true);
  }

  // 0x0c: pad4

  // 0x00: u32
  set MostDetailedMip(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: u32
  set MipLevels(value: number) {
    this.view.setUint32(4, value, true);
  }

  // 0x08: f32
  set ResourceMinLODClamp(value: number) {
    this.view.setFloat32(8, value, true);
  }

  // 0x0c: pad4
}

/**
 * Windows.Win32.Graphics.Direct3D12.D3D12_TEXCUBE_ARRAY_SRV (size: 24)
 */
export interface D3D12_TEXCUBE_ARRAY_SRV {
  /** u32 */
  MostDetailedMip: number;
  /** u32 */
  MipLevels: number;
  /** u32 */
  First2DArrayFace: number;
  /** u32 */
  NumCubes: number;
  /** f32 */
  ResourceMinLODClamp: number;
}

export const sizeofD3D12_TEXCUBE_ARRAY_SRV = 24;

export function allocD3D12_TEXCUBE_ARRAY_SRV(data?: Partial<D3D12_TEXCUBE_ARRAY_SRV>): Uint8Array {
  const buf = new Uint8Array(sizeofD3D12_TEXCUBE_ARRAY_SRV);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.MostDetailedMip !== undefined) view.setUint32(0, Number(data.MostDetailedMip), true);
  // 0x04: u32
  if (data?.MipLevels !== undefined) view.setUint32(4, Number(data.MipLevels), true);
  // 0x08: u32
  if (data?.First2DArrayFace !== undefined) view.setUint32(8, Number(data.First2DArrayFace), true);
  // 0x0c: u32
  if (data?.NumCubes !== undefined) view.setUint32(12, Number(data.NumCubes), true);
  // 0x10: f32
  if (data?.ResourceMinLODClamp !== undefined) view.setFloat32(16, Number(data.ResourceMinLODClamp), true);
  // 0x14: pad4
  return buf;
}

export class D3D12_TEXCUBE_ARRAY_SRVView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get MostDetailedMip(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: u32
  get MipLevels(): number {
    return this.view.getUint32(4, true);
  }

  // 0x08: u32
  get First2DArrayFace(): number {
    return this.view.getUint32(8, true);
  }

  // 0x0c: u32
  get NumCubes(): number {
    return this.view.getUint32(12, true);
  }

  // 0x10: f32
  get ResourceMinLODClamp(): number {
    return this.view.getFloat32(16, true);
  }

  // 0x14: pad4

  // 0x00: u32
  set MostDetailedMip(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: u32
  set MipLevels(value: number) {
    this.view.setUint32(4, value, true);
  }

  // 0x08: u32
  set First2DArrayFace(value: number) {
    this.view.setUint32(8, value, true);
  }

  // 0x0c: u32
  set NumCubes(value: number) {
    this.view.setUint32(12, value, true);
  }

  // 0x10: f32
  set ResourceMinLODClamp(value: number) {
    this.view.setFloat32(16, value, true);
  }

  // 0x14: pad4
}

/**
 * Windows.Win32.Graphics.Direct3D12.D3D12_TEX2DMS_SRV (size: 8)
 */
export interface D3D12_TEX2DMS_SRV {
  /** u32 */
  UnusedField_NothingToDefine: number;
}

export const sizeofD3D12_TEX2DMS_SRV = 8;

export function allocD3D12_TEX2DMS_SRV(data?: Partial<D3D12_TEX2DMS_SRV>): Uint8Array {
  const buf = new Uint8Array(sizeofD3D12_TEX2DMS_SRV);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.UnusedField_NothingToDefine !== undefined) view.setUint32(0, Number(data.UnusedField_NothingToDefine), true);
  // 0x04: pad4
  return buf;
}

export class D3D12_TEX2DMS_SRVView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get UnusedField_NothingToDefine(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: pad4

  // 0x00: u32
  set UnusedField_NothingToDefine(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: pad4
}

/**
 * Windows.Win32.Graphics.Direct3D12.D3D12_TEX2DMS_ARRAY_SRV (size: 8)
 */
export interface D3D12_TEX2DMS_ARRAY_SRV {
  /** u32 */
  FirstArraySlice: number;
  /** u32 */
  ArraySize: number;
}

export const sizeofD3D12_TEX2DMS_ARRAY_SRV = 8;

export function allocD3D12_TEX2DMS_ARRAY_SRV(data?: Partial<D3D12_TEX2DMS_ARRAY_SRV>): Uint8Array {
  const buf = new Uint8Array(sizeofD3D12_TEX2DMS_ARRAY_SRV);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.FirstArraySlice !== undefined) view.setUint32(0, Number(data.FirstArraySlice), true);
  // 0x04: u32
  if (data?.ArraySize !== undefined) view.setUint32(4, Number(data.ArraySize), true);
  return buf;
}

export class D3D12_TEX2DMS_ARRAY_SRVView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get FirstArraySlice(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: u32
  get ArraySize(): number {
    return this.view.getUint32(4, true);
  }

  // 0x00: u32
  set FirstArraySlice(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: u32
  set ArraySize(value: number) {
    this.view.setUint32(4, value, true);
  }
}

/**
 * Windows.Win32.Graphics.Direct3D12.D3D12_RAYTRACING_ACCELERATION_STRUCTURE_SRV (size: 8)
 */
export interface D3D12_RAYTRACING_ACCELERATION_STRUCTURE_SRV {
  /** u64 */
  Location: number | bigint;
}

export const sizeofD3D12_RAYTRACING_ACCELERATION_STRUCTURE_SRV = 8;

export function allocD3D12_RAYTRACING_ACCELERATION_STRUCTURE_SRV(data?: Partial<D3D12_RAYTRACING_ACCELERATION_STRUCTURE_SRV>): Uint8Array {
  const buf = new Uint8Array(sizeofD3D12_RAYTRACING_ACCELERATION_STRUCTURE_SRV);
  const view = new DataView(buf.buffer);
  // 0x00: u64
  if (data?.Location !== undefined) view.setBigUint64(0, util.toBigInt(data.Location), true);
  return buf;
}

export class D3D12_RAYTRACING_ACCELERATION_STRUCTURE_SRVView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u64
  get Location(): number | bigint {
    return this.view.getBigUint64(0, true);
  }

  // 0x00: u64
  set Location(value: number | bigint) {
    this.view.setBigUint64(0, util.toBigInt(value), true);
  }
}

/**
 * Windows.Win32.Graphics.Direct3D12.D3D12_SHADER_RESOURCE_VIEW_DESC (size: 24)
 */
export interface D3D12_SHADER_RESOURCE_VIEW_DESC {
  /** Windows.Win32.Graphics.Dxgi.Common.DXGI_FORMAT */
  Format: DXGI_FORMAT;
  /** Windows.Win32.Graphics.Direct3D12.D3D12_SRV_DIMENSION */
  ViewDimension: D3D12_SRV_DIMENSION;
  /** u32 */
  Shader4ComponentMapping: number;
  /** _Anonymous_e__Union */
  Anonymous: Uint8Array | Deno.PointerValue | null;
}

export const sizeofD3D12_SHADER_RESOURCE_VIEW_DESC = 24;

export function allocD3D12_SHADER_RESOURCE_VIEW_DESC(data?: Partial<D3D12_SHADER_RESOURCE_VIEW_DESC>): Uint8Array {
  const buf = new Uint8Array(sizeofD3D12_SHADER_RESOURCE_VIEW_DESC);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.Format !== undefined) view.setUint32(0, Number(data.Format), true);
  // 0x04: i32
  if (data?.ViewDimension !== undefined) view.setInt32(4, Number(data.ViewDimension), true);
  // 0x08: u32
  if (data?.Shader4ComponentMapping !== undefined) view.setUint32(8, Number(data.Shader4ComponentMapping), true);
  // 0x0c: pad4
  // 0x10: pointer
  if (data?.Anonymous !== undefined) view.setBigUint64(16, data.Anonymous === null ? 0n : util.toBigInt(util.toPointer(data.Anonymous)), true);
  return buf;
}

export class D3D12_SHADER_RESOURCE_VIEW_DESCView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get Format(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: i32
  get ViewDimension(): number {
    return this.view.getInt32(4, true);
  }

  // 0x08: u32
  get Shader4ComponentMapping(): number {
    return this.view.getUint32(8, true);
  }

  // 0x0c: pad4

  // 0x10: pointer
  get Anonymous(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(16, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: u32
  set Format(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: i32
  set ViewDimension(value: number) {
    this.view.setInt32(4, value, true);
  }

  // 0x08: u32
  set Shader4ComponentMapping(value: number) {
    this.view.setUint32(8, value, true);
  }

  // 0x0c: pad4

  // 0x10: pointer
  set Anonymous(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(16, util.toBigInt(util.toPointer(value)), true);
  }
}

/**
 * Windows.Win32.Graphics.Direct3D12.D3D12_CONSTANT_BUFFER_VIEW_DESC (size: 16)
 */
export interface D3D12_CONSTANT_BUFFER_VIEW_DESC {
  /** u64 */
  BufferLocation: number | bigint;
  /** u32 */
  SizeInBytes: number;
}

export const sizeofD3D12_CONSTANT_BUFFER_VIEW_DESC = 16;

export function allocD3D12_CONSTANT_BUFFER_VIEW_DESC(data?: Partial<D3D12_CONSTANT_BUFFER_VIEW_DESC>): Uint8Array {
  const buf = new Uint8Array(sizeofD3D12_CONSTANT_BUFFER_VIEW_DESC);
  const view = new DataView(buf.buffer);
  // 0x00: u64
  if (data?.BufferLocation !== undefined) view.setBigUint64(0, util.toBigInt(data.BufferLocation), true);
  // 0x08: u32
  if (data?.SizeInBytes !== undefined) view.setUint32(8, Number(data.SizeInBytes), true);
  // 0x0c: pad4
  return buf;
}

export class D3D12_CONSTANT_BUFFER_VIEW_DESCView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u64
  get BufferLocation(): number | bigint {
    return this.view.getBigUint64(0, true);
  }

  // 0x08: u32
  get SizeInBytes(): number {
    return this.view.getUint32(8, true);
  }

  // 0x0c: pad4

  // 0x00: u64
  set BufferLocation(value: number | bigint) {
    this.view.setBigUint64(0, util.toBigInt(value), true);
  }

  // 0x08: u32
  set SizeInBytes(value: number) {
    this.view.setUint32(8, value, true);
  }

  // 0x0c: pad4
}

/**
 * Windows.Win32.Graphics.Direct3D12.D3D12_SAMPLER_DESC (size: 48)
 */
export interface D3D12_SAMPLER_DESC {
  /** Windows.Win32.Graphics.Direct3D12.D3D12_FILTER */
  Filter: D3D12_FILTER;
  /** Windows.Win32.Graphics.Direct3D12.D3D12_TEXTURE_ADDRESS_MODE */
  AddressU: D3D12_TEXTURE_ADDRESS_MODE;
  /** Windows.Win32.Graphics.Direct3D12.D3D12_TEXTURE_ADDRESS_MODE */
  AddressV: D3D12_TEXTURE_ADDRESS_MODE;
  /** Windows.Win32.Graphics.Direct3D12.D3D12_TEXTURE_ADDRESS_MODE */
  AddressW: D3D12_TEXTURE_ADDRESS_MODE;
  /** f32 */
  MipLODBias: number;
  /** u32 */
  MaxAnisotropy: number;
  /** Windows.Win32.Graphics.Direct3D12.D3D12_COMPARISON_FUNC */
  ComparisonFunc: D3D12_COMPARISON_FUNC;
  /** array */
  BorderColor: Deno.PointerValue | null;
  /** f32 */
  MinLOD: number;
  /** f32 */
  MaxLOD: number;
}

export const sizeofD3D12_SAMPLER_DESC = 48;

export function allocD3D12_SAMPLER_DESC(data?: Partial<D3D12_SAMPLER_DESC>): Uint8Array {
  const buf = new Uint8Array(sizeofD3D12_SAMPLER_DESC);
  const view = new DataView(buf.buffer);
  // 0x00: i32
  if (data?.Filter !== undefined) view.setInt32(0, Number(data.Filter), true);
  // 0x04: i32
  if (data?.AddressU !== undefined) view.setInt32(4, Number(data.AddressU), true);
  // 0x08: i32
  if (data?.AddressV !== undefined) view.setInt32(8, Number(data.AddressV), true);
  // 0x0c: i32
  if (data?.AddressW !== undefined) view.setInt32(12, Number(data.AddressW), true);
  // 0x10: f32
  if (data?.MipLODBias !== undefined) view.setFloat32(16, Number(data.MipLODBias), true);
  // 0x14: u32
  if (data?.MaxAnisotropy !== undefined) view.setUint32(20, Number(data.MaxAnisotropy), true);
  // 0x18: i32
  if (data?.ComparisonFunc !== undefined) view.setInt32(24, Number(data.ComparisonFunc), true);
  // 0x1c: pad4
  // 0x20: pointer
  if (data?.BorderColor !== undefined) view.setBigUint64(32, data.BorderColor === null ? 0n : util.toBigInt(util.toPointer(data.BorderColor)), true);
  // 0x28: f32
  if (data?.MinLOD !== undefined) view.setFloat32(40, Number(data.MinLOD), true);
  // 0x2c: f32
  if (data?.MaxLOD !== undefined) view.setFloat32(44, Number(data.MaxLOD), true);
  return buf;
}

export class D3D12_SAMPLER_DESCView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: i32
  get Filter(): number {
    return this.view.getInt32(0, true);
  }

  // 0x04: i32
  get AddressU(): number {
    return this.view.getInt32(4, true);
  }

  // 0x08: i32
  get AddressV(): number {
    return this.view.getInt32(8, true);
  }

  // 0x0c: i32
  get AddressW(): number {
    return this.view.getInt32(12, true);
  }

  // 0x10: f32
  get MipLODBias(): number {
    return this.view.getFloat32(16, true);
  }

  // 0x14: u32
  get MaxAnisotropy(): number {
    return this.view.getUint32(20, true);
  }

  // 0x18: i32
  get ComparisonFunc(): number {
    return this.view.getInt32(24, true);
  }

  // 0x1c: pad4

  // 0x20: pointer
  get BorderColor(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(32, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x28: f32
  get MinLOD(): number {
    return this.view.getFloat32(40, true);
  }

  // 0x2c: f32
  get MaxLOD(): number {
    return this.view.getFloat32(44, true);
  }

  // 0x00: i32
  set Filter(value: number) {
    this.view.setInt32(0, value, true);
  }

  // 0x04: i32
  set AddressU(value: number) {
    this.view.setInt32(4, value, true);
  }

  // 0x08: i32
  set AddressV(value: number) {
    this.view.setInt32(8, value, true);
  }

  // 0x0c: i32
  set AddressW(value: number) {
    this.view.setInt32(12, value, true);
  }

  // 0x10: f32
  set MipLODBias(value: number) {
    this.view.setFloat32(16, value, true);
  }

  // 0x14: u32
  set MaxAnisotropy(value: number) {
    this.view.setUint32(20, value, true);
  }

  // 0x18: i32
  set ComparisonFunc(value: number) {
    this.view.setInt32(24, value, true);
  }

  // 0x1c: pad4

  // 0x20: pointer
  set BorderColor(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(32, util.toBigInt(util.toPointer(value)), true);
  }

  // 0x28: f32
  set MinLOD(value: number) {
    this.view.setFloat32(40, value, true);
  }

  // 0x2c: f32
  set MaxLOD(value: number) {
    this.view.setFloat32(44, value, true);
  }
}

/**
 * Windows.Win32.Graphics.Direct3D12.D3D12_BUFFER_UAV (size: 32)
 */
export interface D3D12_BUFFER_UAV {
  /** u64 */
  FirstElement: number | bigint;
  /** u32 */
  NumElements: number;
  /** u32 */
  StructureByteStride: number;
  /** u64 */
  CounterOffsetInBytes: number | bigint;
  /** Windows.Win32.Graphics.Direct3D12.D3D12_BUFFER_UAV_FLAGS */
  Flags: D3D12_BUFFER_UAV_FLAGS;
}

export const sizeofD3D12_BUFFER_UAV = 32;

export function allocD3D12_BUFFER_UAV(data?: Partial<D3D12_BUFFER_UAV>): Uint8Array {
  const buf = new Uint8Array(sizeofD3D12_BUFFER_UAV);
  const view = new DataView(buf.buffer);
  // 0x00: u64
  if (data?.FirstElement !== undefined) view.setBigUint64(0, util.toBigInt(data.FirstElement), true);
  // 0x08: u32
  if (data?.NumElements !== undefined) view.setUint32(8, Number(data.NumElements), true);
  // 0x0c: u32
  if (data?.StructureByteStride !== undefined) view.setUint32(12, Number(data.StructureByteStride), true);
  // 0x10: u64
  if (data?.CounterOffsetInBytes !== undefined) view.setBigUint64(16, util.toBigInt(data.CounterOffsetInBytes), true);
  // 0x18: u32
  if (data?.Flags !== undefined) view.setUint32(24, Number(data.Flags), true);
  // 0x1c: pad4
  return buf;
}

export class D3D12_BUFFER_UAVView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u64
  get FirstElement(): number | bigint {
    return this.view.getBigUint64(0, true);
  }

  // 0x08: u32
  get NumElements(): number {
    return this.view.getUint32(8, true);
  }

  // 0x0c: u32
  get StructureByteStride(): number {
    return this.view.getUint32(12, true);
  }

  // 0x10: u64
  get CounterOffsetInBytes(): number | bigint {
    return this.view.getBigUint64(16, true);
  }

  // 0x18: u32
  get Flags(): number {
    return this.view.getUint32(24, true);
  }

  // 0x1c: pad4

  // 0x00: u64
  set FirstElement(value: number | bigint) {
    this.view.setBigUint64(0, util.toBigInt(value), true);
  }

  // 0x08: u32
  set NumElements(value: number) {
    this.view.setUint32(8, value, true);
  }

  // 0x0c: u32
  set StructureByteStride(value: number) {
    this.view.setUint32(12, value, true);
  }

  // 0x10: u64
  set CounterOffsetInBytes(value: number | bigint) {
    this.view.setBigUint64(16, util.toBigInt(value), true);
  }

  // 0x18: u32
  set Flags(value: number) {
    this.view.setUint32(24, value, true);
  }

  // 0x1c: pad4
}

/**
 * Windows.Win32.Graphics.Direct3D12.D3D12_TEX1D_UAV (size: 8)
 */
export interface D3D12_TEX1D_UAV {
  /** u32 */
  MipSlice: number;
}

export const sizeofD3D12_TEX1D_UAV = 8;

export function allocD3D12_TEX1D_UAV(data?: Partial<D3D12_TEX1D_UAV>): Uint8Array {
  const buf = new Uint8Array(sizeofD3D12_TEX1D_UAV);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.MipSlice !== undefined) view.setUint32(0, Number(data.MipSlice), true);
  // 0x04: pad4
  return buf;
}

export class D3D12_TEX1D_UAVView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get MipSlice(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: pad4

  // 0x00: u32
  set MipSlice(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: pad4
}

/**
 * Windows.Win32.Graphics.Direct3D12.D3D12_TEX1D_ARRAY_UAV (size: 16)
 */
export interface D3D12_TEX1D_ARRAY_UAV {
  /** u32 */
  MipSlice: number;
  /** u32 */
  FirstArraySlice: number;
  /** u32 */
  ArraySize: number;
}

export const sizeofD3D12_TEX1D_ARRAY_UAV = 16;

export function allocD3D12_TEX1D_ARRAY_UAV(data?: Partial<D3D12_TEX1D_ARRAY_UAV>): Uint8Array {
  const buf = new Uint8Array(sizeofD3D12_TEX1D_ARRAY_UAV);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.MipSlice !== undefined) view.setUint32(0, Number(data.MipSlice), true);
  // 0x04: u32
  if (data?.FirstArraySlice !== undefined) view.setUint32(4, Number(data.FirstArraySlice), true);
  // 0x08: u32
  if (data?.ArraySize !== undefined) view.setUint32(8, Number(data.ArraySize), true);
  // 0x0c: pad4
  return buf;
}

export class D3D12_TEX1D_ARRAY_UAVView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get MipSlice(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: u32
  get FirstArraySlice(): number {
    return this.view.getUint32(4, true);
  }

  // 0x08: u32
  get ArraySize(): number {
    return this.view.getUint32(8, true);
  }

  // 0x0c: pad4

  // 0x00: u32
  set MipSlice(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: u32
  set FirstArraySlice(value: number) {
    this.view.setUint32(4, value, true);
  }

  // 0x08: u32
  set ArraySize(value: number) {
    this.view.setUint32(8, value, true);
  }

  // 0x0c: pad4
}

/**
 * Windows.Win32.Graphics.Direct3D12.D3D12_TEX2D_UAV (size: 8)
 */
export interface D3D12_TEX2D_UAV {
  /** u32 */
  MipSlice: number;
  /** u32 */
  PlaneSlice: number;
}

export const sizeofD3D12_TEX2D_UAV = 8;

export function allocD3D12_TEX2D_UAV(data?: Partial<D3D12_TEX2D_UAV>): Uint8Array {
  const buf = new Uint8Array(sizeofD3D12_TEX2D_UAV);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.MipSlice !== undefined) view.setUint32(0, Number(data.MipSlice), true);
  // 0x04: u32
  if (data?.PlaneSlice !== undefined) view.setUint32(4, Number(data.PlaneSlice), true);
  return buf;
}

export class D3D12_TEX2D_UAVView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get MipSlice(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: u32
  get PlaneSlice(): number {
    return this.view.getUint32(4, true);
  }

  // 0x00: u32
  set MipSlice(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: u32
  set PlaneSlice(value: number) {
    this.view.setUint32(4, value, true);
  }
}

/**
 * Windows.Win32.Graphics.Direct3D12.D3D12_TEX2D_ARRAY_UAV (size: 16)
 */
export interface D3D12_TEX2D_ARRAY_UAV {
  /** u32 */
  MipSlice: number;
  /** u32 */
  FirstArraySlice: number;
  /** u32 */
  ArraySize: number;
  /** u32 */
  PlaneSlice: number;
}

export const sizeofD3D12_TEX2D_ARRAY_UAV = 16;

export function allocD3D12_TEX2D_ARRAY_UAV(data?: Partial<D3D12_TEX2D_ARRAY_UAV>): Uint8Array {
  const buf = new Uint8Array(sizeofD3D12_TEX2D_ARRAY_UAV);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.MipSlice !== undefined) view.setUint32(0, Number(data.MipSlice), true);
  // 0x04: u32
  if (data?.FirstArraySlice !== undefined) view.setUint32(4, Number(data.FirstArraySlice), true);
  // 0x08: u32
  if (data?.ArraySize !== undefined) view.setUint32(8, Number(data.ArraySize), true);
  // 0x0c: u32
  if (data?.PlaneSlice !== undefined) view.setUint32(12, Number(data.PlaneSlice), true);
  return buf;
}

export class D3D12_TEX2D_ARRAY_UAVView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get MipSlice(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: u32
  get FirstArraySlice(): number {
    return this.view.getUint32(4, true);
  }

  // 0x08: u32
  get ArraySize(): number {
    return this.view.getUint32(8, true);
  }

  // 0x0c: u32
  get PlaneSlice(): number {
    return this.view.getUint32(12, true);
  }

  // 0x00: u32
  set MipSlice(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: u32
  set FirstArraySlice(value: number) {
    this.view.setUint32(4, value, true);
  }

  // 0x08: u32
  set ArraySize(value: number) {
    this.view.setUint32(8, value, true);
  }

  // 0x0c: u32
  set PlaneSlice(value: number) {
    this.view.setUint32(12, value, true);
  }
}

/**
 * Windows.Win32.Graphics.Direct3D12.D3D12_TEX3D_UAV (size: 16)
 */
export interface D3D12_TEX3D_UAV {
  /** u32 */
  MipSlice: number;
  /** u32 */
  FirstWSlice: number;
  /** u32 */
  WSize: number;
}

export const sizeofD3D12_TEX3D_UAV = 16;

export function allocD3D12_TEX3D_UAV(data?: Partial<D3D12_TEX3D_UAV>): Uint8Array {
  const buf = new Uint8Array(sizeofD3D12_TEX3D_UAV);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.MipSlice !== undefined) view.setUint32(0, Number(data.MipSlice), true);
  // 0x04: u32
  if (data?.FirstWSlice !== undefined) view.setUint32(4, Number(data.FirstWSlice), true);
  // 0x08: u32
  if (data?.WSize !== undefined) view.setUint32(8, Number(data.WSize), true);
  // 0x0c: pad4
  return buf;
}

export class D3D12_TEX3D_UAVView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get MipSlice(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: u32
  get FirstWSlice(): number {
    return this.view.getUint32(4, true);
  }

  // 0x08: u32
  get WSize(): number {
    return this.view.getUint32(8, true);
  }

  // 0x0c: pad4

  // 0x00: u32
  set MipSlice(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: u32
  set FirstWSlice(value: number) {
    this.view.setUint32(4, value, true);
  }

  // 0x08: u32
  set WSize(value: number) {
    this.view.setUint32(8, value, true);
  }

  // 0x0c: pad4
}

/**
 * Windows.Win32.Graphics.Direct3D12.D3D12_UNORDERED_ACCESS_VIEW_DESC (size: 16)
 */
export interface D3D12_UNORDERED_ACCESS_VIEW_DESC {
  /** Windows.Win32.Graphics.Dxgi.Common.DXGI_FORMAT */
  Format: DXGI_FORMAT;
  /** Windows.Win32.Graphics.Direct3D12.D3D12_UAV_DIMENSION */
  ViewDimension: D3D12_UAV_DIMENSION;
  /** _Anonymous_e__Union */
  Anonymous: Uint8Array | Deno.PointerValue | null;
}

export const sizeofD3D12_UNORDERED_ACCESS_VIEW_DESC = 16;

export function allocD3D12_UNORDERED_ACCESS_VIEW_DESC(data?: Partial<D3D12_UNORDERED_ACCESS_VIEW_DESC>): Uint8Array {
  const buf = new Uint8Array(sizeofD3D12_UNORDERED_ACCESS_VIEW_DESC);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.Format !== undefined) view.setUint32(0, Number(data.Format), true);
  // 0x04: i32
  if (data?.ViewDimension !== undefined) view.setInt32(4, Number(data.ViewDimension), true);
  // 0x08: pointer
  if (data?.Anonymous !== undefined) view.setBigUint64(8, data.Anonymous === null ? 0n : util.toBigInt(util.toPointer(data.Anonymous)), true);
  return buf;
}

export class D3D12_UNORDERED_ACCESS_VIEW_DESCView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get Format(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: i32
  get ViewDimension(): number {
    return this.view.getInt32(4, true);
  }

  // 0x08: pointer
  get Anonymous(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(8, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: u32
  set Format(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: i32
  set ViewDimension(value: number) {
    this.view.setInt32(4, value, true);
  }

  // 0x08: pointer
  set Anonymous(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(8, util.toBigInt(util.toPointer(value)), true);
  }
}

/**
 * Windows.Win32.Graphics.Direct3D12.D3D12_BUFFER_RTV (size: 16)
 */
export interface D3D12_BUFFER_RTV {
  /** u64 */
  FirstElement: number | bigint;
  /** u32 */
  NumElements: number;
}

export const sizeofD3D12_BUFFER_RTV = 16;

export function allocD3D12_BUFFER_RTV(data?: Partial<D3D12_BUFFER_RTV>): Uint8Array {
  const buf = new Uint8Array(sizeofD3D12_BUFFER_RTV);
  const view = new DataView(buf.buffer);
  // 0x00: u64
  if (data?.FirstElement !== undefined) view.setBigUint64(0, util.toBigInt(data.FirstElement), true);
  // 0x08: u32
  if (data?.NumElements !== undefined) view.setUint32(8, Number(data.NumElements), true);
  // 0x0c: pad4
  return buf;
}

export class D3D12_BUFFER_RTVView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u64
  get FirstElement(): number | bigint {
    return this.view.getBigUint64(0, true);
  }

  // 0x08: u32
  get NumElements(): number {
    return this.view.getUint32(8, true);
  }

  // 0x0c: pad4

  // 0x00: u64
  set FirstElement(value: number | bigint) {
    this.view.setBigUint64(0, util.toBigInt(value), true);
  }

  // 0x08: u32
  set NumElements(value: number) {
    this.view.setUint32(8, value, true);
  }

  // 0x0c: pad4
}

/**
 * Windows.Win32.Graphics.Direct3D12.D3D12_TEX1D_RTV (size: 8)
 */
export interface D3D12_TEX1D_RTV {
  /** u32 */
  MipSlice: number;
}

export const sizeofD3D12_TEX1D_RTV = 8;

export function allocD3D12_TEX1D_RTV(data?: Partial<D3D12_TEX1D_RTV>): Uint8Array {
  const buf = new Uint8Array(sizeofD3D12_TEX1D_RTV);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.MipSlice !== undefined) view.setUint32(0, Number(data.MipSlice), true);
  // 0x04: pad4
  return buf;
}

export class D3D12_TEX1D_RTVView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get MipSlice(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: pad4

  // 0x00: u32
  set MipSlice(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: pad4
}

/**
 * Windows.Win32.Graphics.Direct3D12.D3D12_TEX1D_ARRAY_RTV (size: 16)
 */
export interface D3D12_TEX1D_ARRAY_RTV {
  /** u32 */
  MipSlice: number;
  /** u32 */
  FirstArraySlice: number;
  /** u32 */
  ArraySize: number;
}

export const sizeofD3D12_TEX1D_ARRAY_RTV = 16;

export function allocD3D12_TEX1D_ARRAY_RTV(data?: Partial<D3D12_TEX1D_ARRAY_RTV>): Uint8Array {
  const buf = new Uint8Array(sizeofD3D12_TEX1D_ARRAY_RTV);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.MipSlice !== undefined) view.setUint32(0, Number(data.MipSlice), true);
  // 0x04: u32
  if (data?.FirstArraySlice !== undefined) view.setUint32(4, Number(data.FirstArraySlice), true);
  // 0x08: u32
  if (data?.ArraySize !== undefined) view.setUint32(8, Number(data.ArraySize), true);
  // 0x0c: pad4
  return buf;
}

export class D3D12_TEX1D_ARRAY_RTVView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get MipSlice(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: u32
  get FirstArraySlice(): number {
    return this.view.getUint32(4, true);
  }

  // 0x08: u32
  get ArraySize(): number {
    return this.view.getUint32(8, true);
  }

  // 0x0c: pad4

  // 0x00: u32
  set MipSlice(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: u32
  set FirstArraySlice(value: number) {
    this.view.setUint32(4, value, true);
  }

  // 0x08: u32
  set ArraySize(value: number) {
    this.view.setUint32(8, value, true);
  }

  // 0x0c: pad4
}

/**
 * Windows.Win32.Graphics.Direct3D12.D3D12_TEX2D_RTV (size: 8)
 */
export interface D3D12_TEX2D_RTV {
  /** u32 */
  MipSlice: number;
  /** u32 */
  PlaneSlice: number;
}

export const sizeofD3D12_TEX2D_RTV = 8;

export function allocD3D12_TEX2D_RTV(data?: Partial<D3D12_TEX2D_RTV>): Uint8Array {
  const buf = new Uint8Array(sizeofD3D12_TEX2D_RTV);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.MipSlice !== undefined) view.setUint32(0, Number(data.MipSlice), true);
  // 0x04: u32
  if (data?.PlaneSlice !== undefined) view.setUint32(4, Number(data.PlaneSlice), true);
  return buf;
}

export class D3D12_TEX2D_RTVView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get MipSlice(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: u32
  get PlaneSlice(): number {
    return this.view.getUint32(4, true);
  }

  // 0x00: u32
  set MipSlice(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: u32
  set PlaneSlice(value: number) {
    this.view.setUint32(4, value, true);
  }
}

/**
 * Windows.Win32.Graphics.Direct3D12.D3D12_TEX2DMS_RTV (size: 8)
 */
export interface D3D12_TEX2DMS_RTV {
  /** u32 */
  UnusedField_NothingToDefine: number;
}

export const sizeofD3D12_TEX2DMS_RTV = 8;

export function allocD3D12_TEX2DMS_RTV(data?: Partial<D3D12_TEX2DMS_RTV>): Uint8Array {
  const buf = new Uint8Array(sizeofD3D12_TEX2DMS_RTV);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.UnusedField_NothingToDefine !== undefined) view.setUint32(0, Number(data.UnusedField_NothingToDefine), true);
  // 0x04: pad4
  return buf;
}

export class D3D12_TEX2DMS_RTVView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get UnusedField_NothingToDefine(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: pad4

  // 0x00: u32
  set UnusedField_NothingToDefine(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: pad4
}

/**
 * Windows.Win32.Graphics.Direct3D12.D3D12_TEX2D_ARRAY_RTV (size: 16)
 */
export interface D3D12_TEX2D_ARRAY_RTV {
  /** u32 */
  MipSlice: number;
  /** u32 */
  FirstArraySlice: number;
  /** u32 */
  ArraySize: number;
  /** u32 */
  PlaneSlice: number;
}

export const sizeofD3D12_TEX2D_ARRAY_RTV = 16;

export function allocD3D12_TEX2D_ARRAY_RTV(data?: Partial<D3D12_TEX2D_ARRAY_RTV>): Uint8Array {
  const buf = new Uint8Array(sizeofD3D12_TEX2D_ARRAY_RTV);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.MipSlice !== undefined) view.setUint32(0, Number(data.MipSlice), true);
  // 0x04: u32
  if (data?.FirstArraySlice !== undefined) view.setUint32(4, Number(data.FirstArraySlice), true);
  // 0x08: u32
  if (data?.ArraySize !== undefined) view.setUint32(8, Number(data.ArraySize), true);
  // 0x0c: u32
  if (data?.PlaneSlice !== undefined) view.setUint32(12, Number(data.PlaneSlice), true);
  return buf;
}

export class D3D12_TEX2D_ARRAY_RTVView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get MipSlice(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: u32
  get FirstArraySlice(): number {
    return this.view.getUint32(4, true);
  }

  // 0x08: u32
  get ArraySize(): number {
    return this.view.getUint32(8, true);
  }

  // 0x0c: u32
  get PlaneSlice(): number {
    return this.view.getUint32(12, true);
  }

  // 0x00: u32
  set MipSlice(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: u32
  set FirstArraySlice(value: number) {
    this.view.setUint32(4, value, true);
  }

  // 0x08: u32
  set ArraySize(value: number) {
    this.view.setUint32(8, value, true);
  }

  // 0x0c: u32
  set PlaneSlice(value: number) {
    this.view.setUint32(12, value, true);
  }
}

/**
 * Windows.Win32.Graphics.Direct3D12.D3D12_TEX2DMS_ARRAY_RTV (size: 8)
 */
export interface D3D12_TEX2DMS_ARRAY_RTV {
  /** u32 */
  FirstArraySlice: number;
  /** u32 */
  ArraySize: number;
}

export const sizeofD3D12_TEX2DMS_ARRAY_RTV = 8;

export function allocD3D12_TEX2DMS_ARRAY_RTV(data?: Partial<D3D12_TEX2DMS_ARRAY_RTV>): Uint8Array {
  const buf = new Uint8Array(sizeofD3D12_TEX2DMS_ARRAY_RTV);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.FirstArraySlice !== undefined) view.setUint32(0, Number(data.FirstArraySlice), true);
  // 0x04: u32
  if (data?.ArraySize !== undefined) view.setUint32(4, Number(data.ArraySize), true);
  return buf;
}

export class D3D12_TEX2DMS_ARRAY_RTVView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get FirstArraySlice(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: u32
  get ArraySize(): number {
    return this.view.getUint32(4, true);
  }

  // 0x00: u32
  set FirstArraySlice(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: u32
  set ArraySize(value: number) {
    this.view.setUint32(4, value, true);
  }
}

/**
 * Windows.Win32.Graphics.Direct3D12.D3D12_TEX3D_RTV (size: 16)
 */
export interface D3D12_TEX3D_RTV {
  /** u32 */
  MipSlice: number;
  /** u32 */
  FirstWSlice: number;
  /** u32 */
  WSize: number;
}

export const sizeofD3D12_TEX3D_RTV = 16;

export function allocD3D12_TEX3D_RTV(data?: Partial<D3D12_TEX3D_RTV>): Uint8Array {
  const buf = new Uint8Array(sizeofD3D12_TEX3D_RTV);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.MipSlice !== undefined) view.setUint32(0, Number(data.MipSlice), true);
  // 0x04: u32
  if (data?.FirstWSlice !== undefined) view.setUint32(4, Number(data.FirstWSlice), true);
  // 0x08: u32
  if (data?.WSize !== undefined) view.setUint32(8, Number(data.WSize), true);
  // 0x0c: pad4
  return buf;
}

export class D3D12_TEX3D_RTVView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get MipSlice(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: u32
  get FirstWSlice(): number {
    return this.view.getUint32(4, true);
  }

  // 0x08: u32
  get WSize(): number {
    return this.view.getUint32(8, true);
  }

  // 0x0c: pad4

  // 0x00: u32
  set MipSlice(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: u32
  set FirstWSlice(value: number) {
    this.view.setUint32(4, value, true);
  }

  // 0x08: u32
  set WSize(value: number) {
    this.view.setUint32(8, value, true);
  }

  // 0x0c: pad4
}

/**
 * Windows.Win32.Graphics.Direct3D12.D3D12_RENDER_TARGET_VIEW_DESC (size: 16)
 */
export interface D3D12_RENDER_TARGET_VIEW_DESC {
  /** Windows.Win32.Graphics.Dxgi.Common.DXGI_FORMAT */
  Format: DXGI_FORMAT;
  /** Windows.Win32.Graphics.Direct3D12.D3D12_RTV_DIMENSION */
  ViewDimension: D3D12_RTV_DIMENSION;
  /** _Anonymous_e__Union */
  Anonymous: Uint8Array | Deno.PointerValue | null;
}

export const sizeofD3D12_RENDER_TARGET_VIEW_DESC = 16;

export function allocD3D12_RENDER_TARGET_VIEW_DESC(data?: Partial<D3D12_RENDER_TARGET_VIEW_DESC>): Uint8Array {
  const buf = new Uint8Array(sizeofD3D12_RENDER_TARGET_VIEW_DESC);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.Format !== undefined) view.setUint32(0, Number(data.Format), true);
  // 0x04: i32
  if (data?.ViewDimension !== undefined) view.setInt32(4, Number(data.ViewDimension), true);
  // 0x08: pointer
  if (data?.Anonymous !== undefined) view.setBigUint64(8, data.Anonymous === null ? 0n : util.toBigInt(util.toPointer(data.Anonymous)), true);
  return buf;
}

export class D3D12_RENDER_TARGET_VIEW_DESCView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get Format(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: i32
  get ViewDimension(): number {
    return this.view.getInt32(4, true);
  }

  // 0x08: pointer
  get Anonymous(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(8, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: u32
  set Format(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: i32
  set ViewDimension(value: number) {
    this.view.setInt32(4, value, true);
  }

  // 0x08: pointer
  set Anonymous(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(8, util.toBigInt(util.toPointer(value)), true);
  }
}

/**
 * Windows.Win32.Graphics.Direct3D12.D3D12_TEX1D_DSV (size: 8)
 */
export interface D3D12_TEX1D_DSV {
  /** u32 */
  MipSlice: number;
}

export const sizeofD3D12_TEX1D_DSV = 8;

export function allocD3D12_TEX1D_DSV(data?: Partial<D3D12_TEX1D_DSV>): Uint8Array {
  const buf = new Uint8Array(sizeofD3D12_TEX1D_DSV);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.MipSlice !== undefined) view.setUint32(0, Number(data.MipSlice), true);
  // 0x04: pad4
  return buf;
}

export class D3D12_TEX1D_DSVView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get MipSlice(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: pad4

  // 0x00: u32
  set MipSlice(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: pad4
}

/**
 * Windows.Win32.Graphics.Direct3D12.D3D12_TEX1D_ARRAY_DSV (size: 16)
 */
export interface D3D12_TEX1D_ARRAY_DSV {
  /** u32 */
  MipSlice: number;
  /** u32 */
  FirstArraySlice: number;
  /** u32 */
  ArraySize: number;
}

export const sizeofD3D12_TEX1D_ARRAY_DSV = 16;

export function allocD3D12_TEX1D_ARRAY_DSV(data?: Partial<D3D12_TEX1D_ARRAY_DSV>): Uint8Array {
  const buf = new Uint8Array(sizeofD3D12_TEX1D_ARRAY_DSV);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.MipSlice !== undefined) view.setUint32(0, Number(data.MipSlice), true);
  // 0x04: u32
  if (data?.FirstArraySlice !== undefined) view.setUint32(4, Number(data.FirstArraySlice), true);
  // 0x08: u32
  if (data?.ArraySize !== undefined) view.setUint32(8, Number(data.ArraySize), true);
  // 0x0c: pad4
  return buf;
}

export class D3D12_TEX1D_ARRAY_DSVView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get MipSlice(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: u32
  get FirstArraySlice(): number {
    return this.view.getUint32(4, true);
  }

  // 0x08: u32
  get ArraySize(): number {
    return this.view.getUint32(8, true);
  }

  // 0x0c: pad4

  // 0x00: u32
  set MipSlice(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: u32
  set FirstArraySlice(value: number) {
    this.view.setUint32(4, value, true);
  }

  // 0x08: u32
  set ArraySize(value: number) {
    this.view.setUint32(8, value, true);
  }

  // 0x0c: pad4
}

/**
 * Windows.Win32.Graphics.Direct3D12.D3D12_TEX2D_DSV (size: 8)
 */
export interface D3D12_TEX2D_DSV {
  /** u32 */
  MipSlice: number;
}

export const sizeofD3D12_TEX2D_DSV = 8;

export function allocD3D12_TEX2D_DSV(data?: Partial<D3D12_TEX2D_DSV>): Uint8Array {
  const buf = new Uint8Array(sizeofD3D12_TEX2D_DSV);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.MipSlice !== undefined) view.setUint32(0, Number(data.MipSlice), true);
  // 0x04: pad4
  return buf;
}

export class D3D12_TEX2D_DSVView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get MipSlice(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: pad4

  // 0x00: u32
  set MipSlice(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: pad4
}

/**
 * Windows.Win32.Graphics.Direct3D12.D3D12_TEX2D_ARRAY_DSV (size: 16)
 */
export interface D3D12_TEX2D_ARRAY_DSV {
  /** u32 */
  MipSlice: number;
  /** u32 */
  FirstArraySlice: number;
  /** u32 */
  ArraySize: number;
}

export const sizeofD3D12_TEX2D_ARRAY_DSV = 16;

export function allocD3D12_TEX2D_ARRAY_DSV(data?: Partial<D3D12_TEX2D_ARRAY_DSV>): Uint8Array {
  const buf = new Uint8Array(sizeofD3D12_TEX2D_ARRAY_DSV);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.MipSlice !== undefined) view.setUint32(0, Number(data.MipSlice), true);
  // 0x04: u32
  if (data?.FirstArraySlice !== undefined) view.setUint32(4, Number(data.FirstArraySlice), true);
  // 0x08: u32
  if (data?.ArraySize !== undefined) view.setUint32(8, Number(data.ArraySize), true);
  // 0x0c: pad4
  return buf;
}

export class D3D12_TEX2D_ARRAY_DSVView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get MipSlice(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: u32
  get FirstArraySlice(): number {
    return this.view.getUint32(4, true);
  }

  // 0x08: u32
  get ArraySize(): number {
    return this.view.getUint32(8, true);
  }

  // 0x0c: pad4

  // 0x00: u32
  set MipSlice(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: u32
  set FirstArraySlice(value: number) {
    this.view.setUint32(4, value, true);
  }

  // 0x08: u32
  set ArraySize(value: number) {
    this.view.setUint32(8, value, true);
  }

  // 0x0c: pad4
}

/**
 * Windows.Win32.Graphics.Direct3D12.D3D12_TEX2DMS_DSV (size: 8)
 */
export interface D3D12_TEX2DMS_DSV {
  /** u32 */
  UnusedField_NothingToDefine: number;
}

export const sizeofD3D12_TEX2DMS_DSV = 8;

export function allocD3D12_TEX2DMS_DSV(data?: Partial<D3D12_TEX2DMS_DSV>): Uint8Array {
  const buf = new Uint8Array(sizeofD3D12_TEX2DMS_DSV);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.UnusedField_NothingToDefine !== undefined) view.setUint32(0, Number(data.UnusedField_NothingToDefine), true);
  // 0x04: pad4
  return buf;
}

export class D3D12_TEX2DMS_DSVView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get UnusedField_NothingToDefine(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: pad4

  // 0x00: u32
  set UnusedField_NothingToDefine(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: pad4
}

/**
 * Windows.Win32.Graphics.Direct3D12.D3D12_TEX2DMS_ARRAY_DSV (size: 8)
 */
export interface D3D12_TEX2DMS_ARRAY_DSV {
  /** u32 */
  FirstArraySlice: number;
  /** u32 */
  ArraySize: number;
}

export const sizeofD3D12_TEX2DMS_ARRAY_DSV = 8;

export function allocD3D12_TEX2DMS_ARRAY_DSV(data?: Partial<D3D12_TEX2DMS_ARRAY_DSV>): Uint8Array {
  const buf = new Uint8Array(sizeofD3D12_TEX2DMS_ARRAY_DSV);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.FirstArraySlice !== undefined) view.setUint32(0, Number(data.FirstArraySlice), true);
  // 0x04: u32
  if (data?.ArraySize !== undefined) view.setUint32(4, Number(data.ArraySize), true);
  return buf;
}

export class D3D12_TEX2DMS_ARRAY_DSVView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get FirstArraySlice(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: u32
  get ArraySize(): number {
    return this.view.getUint32(4, true);
  }

  // 0x00: u32
  set FirstArraySlice(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: u32
  set ArraySize(value: number) {
    this.view.setUint32(4, value, true);
  }
}

/**
 * Windows.Win32.Graphics.Direct3D12.D3D12_DEPTH_STENCIL_VIEW_DESC (size: 24)
 */
export interface D3D12_DEPTH_STENCIL_VIEW_DESC {
  /** Windows.Win32.Graphics.Dxgi.Common.DXGI_FORMAT */
  Format: DXGI_FORMAT;
  /** Windows.Win32.Graphics.Direct3D12.D3D12_DSV_DIMENSION */
  ViewDimension: D3D12_DSV_DIMENSION;
  /** Windows.Win32.Graphics.Direct3D12.D3D12_DSV_FLAGS */
  Flags: D3D12_DSV_FLAGS;
  /** _Anonymous_e__Union */
  Anonymous: Uint8Array | Deno.PointerValue | null;
}

export const sizeofD3D12_DEPTH_STENCIL_VIEW_DESC = 24;

export function allocD3D12_DEPTH_STENCIL_VIEW_DESC(data?: Partial<D3D12_DEPTH_STENCIL_VIEW_DESC>): Uint8Array {
  const buf = new Uint8Array(sizeofD3D12_DEPTH_STENCIL_VIEW_DESC);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.Format !== undefined) view.setUint32(0, Number(data.Format), true);
  // 0x04: i32
  if (data?.ViewDimension !== undefined) view.setInt32(4, Number(data.ViewDimension), true);
  // 0x08: u32
  if (data?.Flags !== undefined) view.setUint32(8, Number(data.Flags), true);
  // 0x0c: pad4
  // 0x10: pointer
  if (data?.Anonymous !== undefined) view.setBigUint64(16, data.Anonymous === null ? 0n : util.toBigInt(util.toPointer(data.Anonymous)), true);
  return buf;
}

export class D3D12_DEPTH_STENCIL_VIEW_DESCView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get Format(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: i32
  get ViewDimension(): number {
    return this.view.getInt32(4, true);
  }

  // 0x08: u32
  get Flags(): number {
    return this.view.getUint32(8, true);
  }

  // 0x0c: pad4

  // 0x10: pointer
  get Anonymous(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(16, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: u32
  set Format(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: i32
  set ViewDimension(value: number) {
    this.view.setInt32(4, value, true);
  }

  // 0x08: u32
  set Flags(value: number) {
    this.view.setUint32(8, value, true);
  }

  // 0x0c: pad4

  // 0x10: pointer
  set Anonymous(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(16, util.toBigInt(util.toPointer(value)), true);
  }
}

/**
 * Windows.Win32.Graphics.Direct3D12.D3D12_DESCRIPTOR_HEAP_DESC (size: 16)
 */
export interface D3D12_DESCRIPTOR_HEAP_DESC {
  /** Windows.Win32.Graphics.Direct3D12.D3D12_DESCRIPTOR_HEAP_TYPE */
  Type: D3D12_DESCRIPTOR_HEAP_TYPE;
  /** u32 */
  NumDescriptors: number;
  /** Windows.Win32.Graphics.Direct3D12.D3D12_DESCRIPTOR_HEAP_FLAGS */
  Flags: D3D12_DESCRIPTOR_HEAP_FLAGS;
  /** u32 */
  NodeMask: number;
}

export const sizeofD3D12_DESCRIPTOR_HEAP_DESC = 16;

export function allocD3D12_DESCRIPTOR_HEAP_DESC(data?: Partial<D3D12_DESCRIPTOR_HEAP_DESC>): Uint8Array {
  const buf = new Uint8Array(sizeofD3D12_DESCRIPTOR_HEAP_DESC);
  const view = new DataView(buf.buffer);
  // 0x00: i32
  if (data?.Type !== undefined) view.setInt32(0, Number(data.Type), true);
  // 0x04: u32
  if (data?.NumDescriptors !== undefined) view.setUint32(4, Number(data.NumDescriptors), true);
  // 0x08: u32
  if (data?.Flags !== undefined) view.setUint32(8, Number(data.Flags), true);
  // 0x0c: u32
  if (data?.NodeMask !== undefined) view.setUint32(12, Number(data.NodeMask), true);
  return buf;
}

export class D3D12_DESCRIPTOR_HEAP_DESCView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: i32
  get Type(): number {
    return this.view.getInt32(0, true);
  }

  // 0x04: u32
  get NumDescriptors(): number {
    return this.view.getUint32(4, true);
  }

  // 0x08: u32
  get Flags(): number {
    return this.view.getUint32(8, true);
  }

  // 0x0c: u32
  get NodeMask(): number {
    return this.view.getUint32(12, true);
  }

  // 0x00: i32
  set Type(value: number) {
    this.view.setInt32(0, value, true);
  }

  // 0x04: u32
  set NumDescriptors(value: number) {
    this.view.setUint32(4, value, true);
  }

  // 0x08: u32
  set Flags(value: number) {
    this.view.setUint32(8, value, true);
  }

  // 0x0c: u32
  set NodeMask(value: number) {
    this.view.setUint32(12, value, true);
  }
}

/**
 * Windows.Win32.Graphics.Direct3D12.D3D12_DESCRIPTOR_RANGE (size: 24)
 */
export interface D3D12_DESCRIPTOR_RANGE {
  /** Windows.Win32.Graphics.Direct3D12.D3D12_DESCRIPTOR_RANGE_TYPE */
  RangeType: D3D12_DESCRIPTOR_RANGE_TYPE;
  /** u32 */
  NumDescriptors: number;
  /** u32 */
  BaseShaderRegister: number;
  /** u32 */
  RegisterSpace: number;
  /** u32 */
  OffsetInDescriptorsFromTableStart: number;
}

export const sizeofD3D12_DESCRIPTOR_RANGE = 24;

export function allocD3D12_DESCRIPTOR_RANGE(data?: Partial<D3D12_DESCRIPTOR_RANGE>): Uint8Array {
  const buf = new Uint8Array(sizeofD3D12_DESCRIPTOR_RANGE);
  const view = new DataView(buf.buffer);
  // 0x00: i32
  if (data?.RangeType !== undefined) view.setInt32(0, Number(data.RangeType), true);
  // 0x04: u32
  if (data?.NumDescriptors !== undefined) view.setUint32(4, Number(data.NumDescriptors), true);
  // 0x08: u32
  if (data?.BaseShaderRegister !== undefined) view.setUint32(8, Number(data.BaseShaderRegister), true);
  // 0x0c: u32
  if (data?.RegisterSpace !== undefined) view.setUint32(12, Number(data.RegisterSpace), true);
  // 0x10: u32
  if (data?.OffsetInDescriptorsFromTableStart !== undefined) view.setUint32(16, Number(data.OffsetInDescriptorsFromTableStart), true);
  // 0x14: pad4
  return buf;
}

export class D3D12_DESCRIPTOR_RANGEView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: i32
  get RangeType(): number {
    return this.view.getInt32(0, true);
  }

  // 0x04: u32
  get NumDescriptors(): number {
    return this.view.getUint32(4, true);
  }

  // 0x08: u32
  get BaseShaderRegister(): number {
    return this.view.getUint32(8, true);
  }

  // 0x0c: u32
  get RegisterSpace(): number {
    return this.view.getUint32(12, true);
  }

  // 0x10: u32
  get OffsetInDescriptorsFromTableStart(): number {
    return this.view.getUint32(16, true);
  }

  // 0x14: pad4

  // 0x00: i32
  set RangeType(value: number) {
    this.view.setInt32(0, value, true);
  }

  // 0x04: u32
  set NumDescriptors(value: number) {
    this.view.setUint32(4, value, true);
  }

  // 0x08: u32
  set BaseShaderRegister(value: number) {
    this.view.setUint32(8, value, true);
  }

  // 0x0c: u32
  set RegisterSpace(value: number) {
    this.view.setUint32(12, value, true);
  }

  // 0x10: u32
  set OffsetInDescriptorsFromTableStart(value: number) {
    this.view.setUint32(16, value, true);
  }

  // 0x14: pad4
}

/**
 * Windows.Win32.Graphics.Direct3D12.D3D12_ROOT_DESCRIPTOR_TABLE (size: 16)
 */
export interface D3D12_ROOT_DESCRIPTOR_TABLE {
  /** u32 */
  NumDescriptorRanges: number;
  /** ptr */
  pDescriptorRanges: Deno.PointerValue | Uint8Array | null;
}

export const sizeofD3D12_ROOT_DESCRIPTOR_TABLE = 16;

export function allocD3D12_ROOT_DESCRIPTOR_TABLE(data?: Partial<D3D12_ROOT_DESCRIPTOR_TABLE>): Uint8Array {
  const buf = new Uint8Array(sizeofD3D12_ROOT_DESCRIPTOR_TABLE);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.NumDescriptorRanges !== undefined) view.setUint32(0, Number(data.NumDescriptorRanges), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.pDescriptorRanges !== undefined) view.setBigUint64(8, data.pDescriptorRanges === null ? 0n : util.toBigInt(util.toPointer(data.pDescriptorRanges)), true);
  return buf;
}

export class D3D12_ROOT_DESCRIPTOR_TABLEView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get NumDescriptorRanges(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  get pDescriptorRanges(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(8, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: u32
  set NumDescriptorRanges(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  set pDescriptorRanges(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(8, util.toBigInt(util.toPointer(value)), true);
  }
}

/**
 * Windows.Win32.Graphics.Direct3D12.D3D12_ROOT_CONSTANTS (size: 16)
 */
export interface D3D12_ROOT_CONSTANTS {
  /** u32 */
  ShaderRegister: number;
  /** u32 */
  RegisterSpace: number;
  /** u32 */
  Num32BitValues: number;
}

export const sizeofD3D12_ROOT_CONSTANTS = 16;

export function allocD3D12_ROOT_CONSTANTS(data?: Partial<D3D12_ROOT_CONSTANTS>): Uint8Array {
  const buf = new Uint8Array(sizeofD3D12_ROOT_CONSTANTS);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.ShaderRegister !== undefined) view.setUint32(0, Number(data.ShaderRegister), true);
  // 0x04: u32
  if (data?.RegisterSpace !== undefined) view.setUint32(4, Number(data.RegisterSpace), true);
  // 0x08: u32
  if (data?.Num32BitValues !== undefined) view.setUint32(8, Number(data.Num32BitValues), true);
  // 0x0c: pad4
  return buf;
}

export class D3D12_ROOT_CONSTANTSView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get ShaderRegister(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: u32
  get RegisterSpace(): number {
    return this.view.getUint32(4, true);
  }

  // 0x08: u32
  get Num32BitValues(): number {
    return this.view.getUint32(8, true);
  }

  // 0x0c: pad4

  // 0x00: u32
  set ShaderRegister(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: u32
  set RegisterSpace(value: number) {
    this.view.setUint32(4, value, true);
  }

  // 0x08: u32
  set Num32BitValues(value: number) {
    this.view.setUint32(8, value, true);
  }

  // 0x0c: pad4
}

/**
 * Windows.Win32.Graphics.Direct3D12.D3D12_ROOT_DESCRIPTOR (size: 8)
 */
export interface D3D12_ROOT_DESCRIPTOR {
  /** u32 */
  ShaderRegister: number;
  /** u32 */
  RegisterSpace: number;
}

export const sizeofD3D12_ROOT_DESCRIPTOR = 8;

export function allocD3D12_ROOT_DESCRIPTOR(data?: Partial<D3D12_ROOT_DESCRIPTOR>): Uint8Array {
  const buf = new Uint8Array(sizeofD3D12_ROOT_DESCRIPTOR);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.ShaderRegister !== undefined) view.setUint32(0, Number(data.ShaderRegister), true);
  // 0x04: u32
  if (data?.RegisterSpace !== undefined) view.setUint32(4, Number(data.RegisterSpace), true);
  return buf;
}

export class D3D12_ROOT_DESCRIPTORView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get ShaderRegister(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: u32
  get RegisterSpace(): number {
    return this.view.getUint32(4, true);
  }

  // 0x00: u32
  set ShaderRegister(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: u32
  set RegisterSpace(value: number) {
    this.view.setUint32(4, value, true);
  }
}

/**
 * Windows.Win32.Graphics.Direct3D12.D3D12_ROOT_PARAMETER (size: 24)
 */
export interface D3D12_ROOT_PARAMETER {
  /** Windows.Win32.Graphics.Direct3D12.D3D12_ROOT_PARAMETER_TYPE */
  ParameterType: D3D12_ROOT_PARAMETER_TYPE;
  /** _Anonymous_e__Union */
  Anonymous: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Graphics.Direct3D12.D3D12_SHADER_VISIBILITY */
  ShaderVisibility: D3D12_SHADER_VISIBILITY;
}

export const sizeofD3D12_ROOT_PARAMETER = 24;

export function allocD3D12_ROOT_PARAMETER(data?: Partial<D3D12_ROOT_PARAMETER>): Uint8Array {
  const buf = new Uint8Array(sizeofD3D12_ROOT_PARAMETER);
  const view = new DataView(buf.buffer);
  // 0x00: i32
  if (data?.ParameterType !== undefined) view.setInt32(0, Number(data.ParameterType), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.Anonymous !== undefined) view.setBigUint64(8, data.Anonymous === null ? 0n : util.toBigInt(util.toPointer(data.Anonymous)), true);
  // 0x10: i32
  if (data?.ShaderVisibility !== undefined) view.setInt32(16, Number(data.ShaderVisibility), true);
  // 0x14: pad4
  return buf;
}

export class D3D12_ROOT_PARAMETERView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: i32
  get ParameterType(): number {
    return this.view.getInt32(0, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  get Anonymous(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(8, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x10: i32
  get ShaderVisibility(): number {
    return this.view.getInt32(16, true);
  }

  // 0x14: pad4

  // 0x00: i32
  set ParameterType(value: number) {
    this.view.setInt32(0, value, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  set Anonymous(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(8, util.toBigInt(util.toPointer(value)), true);
  }

  // 0x10: i32
  set ShaderVisibility(value: number) {
    this.view.setInt32(16, value, true);
  }

  // 0x14: pad4
}

/**
 * Windows.Win32.Graphics.Direct3D12.D3D12_STATIC_SAMPLER_DESC (size: 56)
 */
export interface D3D12_STATIC_SAMPLER_DESC {
  /** Windows.Win32.Graphics.Direct3D12.D3D12_FILTER */
  Filter: D3D12_FILTER;
  /** Windows.Win32.Graphics.Direct3D12.D3D12_TEXTURE_ADDRESS_MODE */
  AddressU: D3D12_TEXTURE_ADDRESS_MODE;
  /** Windows.Win32.Graphics.Direct3D12.D3D12_TEXTURE_ADDRESS_MODE */
  AddressV: D3D12_TEXTURE_ADDRESS_MODE;
  /** Windows.Win32.Graphics.Direct3D12.D3D12_TEXTURE_ADDRESS_MODE */
  AddressW: D3D12_TEXTURE_ADDRESS_MODE;
  /** f32 */
  MipLODBias: number;
  /** u32 */
  MaxAnisotropy: number;
  /** Windows.Win32.Graphics.Direct3D12.D3D12_COMPARISON_FUNC */
  ComparisonFunc: D3D12_COMPARISON_FUNC;
  /** Windows.Win32.Graphics.Direct3D12.D3D12_STATIC_BORDER_COLOR */
  BorderColor: D3D12_STATIC_BORDER_COLOR;
  /** f32 */
  MinLOD: number;
  /** f32 */
  MaxLOD: number;
  /** u32 */
  ShaderRegister: number;
  /** u32 */
  RegisterSpace: number;
  /** Windows.Win32.Graphics.Direct3D12.D3D12_SHADER_VISIBILITY */
  ShaderVisibility: D3D12_SHADER_VISIBILITY;
}

export const sizeofD3D12_STATIC_SAMPLER_DESC = 56;

export function allocD3D12_STATIC_SAMPLER_DESC(data?: Partial<D3D12_STATIC_SAMPLER_DESC>): Uint8Array {
  const buf = new Uint8Array(sizeofD3D12_STATIC_SAMPLER_DESC);
  const view = new DataView(buf.buffer);
  // 0x00: i32
  if (data?.Filter !== undefined) view.setInt32(0, Number(data.Filter), true);
  // 0x04: i32
  if (data?.AddressU !== undefined) view.setInt32(4, Number(data.AddressU), true);
  // 0x08: i32
  if (data?.AddressV !== undefined) view.setInt32(8, Number(data.AddressV), true);
  // 0x0c: i32
  if (data?.AddressW !== undefined) view.setInt32(12, Number(data.AddressW), true);
  // 0x10: f32
  if (data?.MipLODBias !== undefined) view.setFloat32(16, Number(data.MipLODBias), true);
  // 0x14: u32
  if (data?.MaxAnisotropy !== undefined) view.setUint32(20, Number(data.MaxAnisotropy), true);
  // 0x18: i32
  if (data?.ComparisonFunc !== undefined) view.setInt32(24, Number(data.ComparisonFunc), true);
  // 0x1c: i32
  if (data?.BorderColor !== undefined) view.setInt32(28, Number(data.BorderColor), true);
  // 0x20: f32
  if (data?.MinLOD !== undefined) view.setFloat32(32, Number(data.MinLOD), true);
  // 0x24: f32
  if (data?.MaxLOD !== undefined) view.setFloat32(36, Number(data.MaxLOD), true);
  // 0x28: u32
  if (data?.ShaderRegister !== undefined) view.setUint32(40, Number(data.ShaderRegister), true);
  // 0x2c: u32
  if (data?.RegisterSpace !== undefined) view.setUint32(44, Number(data.RegisterSpace), true);
  // 0x30: i32
  if (data?.ShaderVisibility !== undefined) view.setInt32(48, Number(data.ShaderVisibility), true);
  // 0x34: pad4
  return buf;
}

export class D3D12_STATIC_SAMPLER_DESCView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: i32
  get Filter(): number {
    return this.view.getInt32(0, true);
  }

  // 0x04: i32
  get AddressU(): number {
    return this.view.getInt32(4, true);
  }

  // 0x08: i32
  get AddressV(): number {
    return this.view.getInt32(8, true);
  }

  // 0x0c: i32
  get AddressW(): number {
    return this.view.getInt32(12, true);
  }

  // 0x10: f32
  get MipLODBias(): number {
    return this.view.getFloat32(16, true);
  }

  // 0x14: u32
  get MaxAnisotropy(): number {
    return this.view.getUint32(20, true);
  }

  // 0x18: i32
  get ComparisonFunc(): number {
    return this.view.getInt32(24, true);
  }

  // 0x1c: i32
  get BorderColor(): number {
    return this.view.getInt32(28, true);
  }

  // 0x20: f32
  get MinLOD(): number {
    return this.view.getFloat32(32, true);
  }

  // 0x24: f32
  get MaxLOD(): number {
    return this.view.getFloat32(36, true);
  }

  // 0x28: u32
  get ShaderRegister(): number {
    return this.view.getUint32(40, true);
  }

  // 0x2c: u32
  get RegisterSpace(): number {
    return this.view.getUint32(44, true);
  }

  // 0x30: i32
  get ShaderVisibility(): number {
    return this.view.getInt32(48, true);
  }

  // 0x34: pad4

  // 0x00: i32
  set Filter(value: number) {
    this.view.setInt32(0, value, true);
  }

  // 0x04: i32
  set AddressU(value: number) {
    this.view.setInt32(4, value, true);
  }

  // 0x08: i32
  set AddressV(value: number) {
    this.view.setInt32(8, value, true);
  }

  // 0x0c: i32
  set AddressW(value: number) {
    this.view.setInt32(12, value, true);
  }

  // 0x10: f32
  set MipLODBias(value: number) {
    this.view.setFloat32(16, value, true);
  }

  // 0x14: u32
  set MaxAnisotropy(value: number) {
    this.view.setUint32(20, value, true);
  }

  // 0x18: i32
  set ComparisonFunc(value: number) {
    this.view.setInt32(24, value, true);
  }

  // 0x1c: i32
  set BorderColor(value: number) {
    this.view.setInt32(28, value, true);
  }

  // 0x20: f32
  set MinLOD(value: number) {
    this.view.setFloat32(32, value, true);
  }

  // 0x24: f32
  set MaxLOD(value: number) {
    this.view.setFloat32(36, value, true);
  }

  // 0x28: u32
  set ShaderRegister(value: number) {
    this.view.setUint32(40, value, true);
  }

  // 0x2c: u32
  set RegisterSpace(value: number) {
    this.view.setUint32(44, value, true);
  }

  // 0x30: i32
  set ShaderVisibility(value: number) {
    this.view.setInt32(48, value, true);
  }

  // 0x34: pad4
}

/**
 * Windows.Win32.Graphics.Direct3D12.D3D12_ROOT_SIGNATURE_DESC (size: 40)
 */
export interface D3D12_ROOT_SIGNATURE_DESC {
  /** u32 */
  NumParameters: number;
  /** ptr */
  pParameters: Deno.PointerValue | Uint8Array | null;
  /** u32 */
  NumStaticSamplers: number;
  /** ptr */
  pStaticSamplers: Deno.PointerValue | Uint8Array | null;
  /** Windows.Win32.Graphics.Direct3D12.D3D12_ROOT_SIGNATURE_FLAGS */
  Flags: D3D12_ROOT_SIGNATURE_FLAGS;
}

export const sizeofD3D12_ROOT_SIGNATURE_DESC = 40;

export function allocD3D12_ROOT_SIGNATURE_DESC(data?: Partial<D3D12_ROOT_SIGNATURE_DESC>): Uint8Array {
  const buf = new Uint8Array(sizeofD3D12_ROOT_SIGNATURE_DESC);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.NumParameters !== undefined) view.setUint32(0, Number(data.NumParameters), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.pParameters !== undefined) view.setBigUint64(8, data.pParameters === null ? 0n : util.toBigInt(util.toPointer(data.pParameters)), true);
  // 0x10: u32
  if (data?.NumStaticSamplers !== undefined) view.setUint32(16, Number(data.NumStaticSamplers), true);
  // 0x14: pad4
  // 0x18: pointer
  if (data?.pStaticSamplers !== undefined) view.setBigUint64(24, data.pStaticSamplers === null ? 0n : util.toBigInt(util.toPointer(data.pStaticSamplers)), true);
  // 0x20: u32
  if (data?.Flags !== undefined) view.setUint32(32, Number(data.Flags), true);
  // 0x24: pad4
  return buf;
}

export class D3D12_ROOT_SIGNATURE_DESCView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get NumParameters(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  get pParameters(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(8, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x10: u32
  get NumStaticSamplers(): number {
    return this.view.getUint32(16, true);
  }

  // 0x14: pad4

  // 0x18: pointer
  get pStaticSamplers(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(24, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x20: u32
  get Flags(): number {
    return this.view.getUint32(32, true);
  }

  // 0x24: pad4

  // 0x00: u32
  set NumParameters(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  set pParameters(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(8, util.toBigInt(util.toPointer(value)), true);
  }

  // 0x10: u32
  set NumStaticSamplers(value: number) {
    this.view.setUint32(16, value, true);
  }

  // 0x14: pad4

  // 0x18: pointer
  set pStaticSamplers(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(24, util.toBigInt(util.toPointer(value)), true);
  }

  // 0x20: u32
  set Flags(value: number) {
    this.view.setUint32(32, value, true);
  }

  // 0x24: pad4
}

/**
 * Windows.Win32.Graphics.Direct3D12.D3D12_DESCRIPTOR_RANGE1 (size: 24)
 */
export interface D3D12_DESCRIPTOR_RANGE1 {
  /** Windows.Win32.Graphics.Direct3D12.D3D12_DESCRIPTOR_RANGE_TYPE */
  RangeType: D3D12_DESCRIPTOR_RANGE_TYPE;
  /** u32 */
  NumDescriptors: number;
  /** u32 */
  BaseShaderRegister: number;
  /** u32 */
  RegisterSpace: number;
  /** Windows.Win32.Graphics.Direct3D12.D3D12_DESCRIPTOR_RANGE_FLAGS */
  Flags: D3D12_DESCRIPTOR_RANGE_FLAGS;
  /** u32 */
  OffsetInDescriptorsFromTableStart: number;
}

export const sizeofD3D12_DESCRIPTOR_RANGE1 = 24;

export function allocD3D12_DESCRIPTOR_RANGE1(data?: Partial<D3D12_DESCRIPTOR_RANGE1>): Uint8Array {
  const buf = new Uint8Array(sizeofD3D12_DESCRIPTOR_RANGE1);
  const view = new DataView(buf.buffer);
  // 0x00: i32
  if (data?.RangeType !== undefined) view.setInt32(0, Number(data.RangeType), true);
  // 0x04: u32
  if (data?.NumDescriptors !== undefined) view.setUint32(4, Number(data.NumDescriptors), true);
  // 0x08: u32
  if (data?.BaseShaderRegister !== undefined) view.setUint32(8, Number(data.BaseShaderRegister), true);
  // 0x0c: u32
  if (data?.RegisterSpace !== undefined) view.setUint32(12, Number(data.RegisterSpace), true);
  // 0x10: u32
  if (data?.Flags !== undefined) view.setUint32(16, Number(data.Flags), true);
  // 0x14: u32
  if (data?.OffsetInDescriptorsFromTableStart !== undefined) view.setUint32(20, Number(data.OffsetInDescriptorsFromTableStart), true);
  return buf;
}

export class D3D12_DESCRIPTOR_RANGE1View {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: i32
  get RangeType(): number {
    return this.view.getInt32(0, true);
  }

  // 0x04: u32
  get NumDescriptors(): number {
    return this.view.getUint32(4, true);
  }

  // 0x08: u32
  get BaseShaderRegister(): number {
    return this.view.getUint32(8, true);
  }

  // 0x0c: u32
  get RegisterSpace(): number {
    return this.view.getUint32(12, true);
  }

  // 0x10: u32
  get Flags(): number {
    return this.view.getUint32(16, true);
  }

  // 0x14: u32
  get OffsetInDescriptorsFromTableStart(): number {
    return this.view.getUint32(20, true);
  }

  // 0x00: i32
  set RangeType(value: number) {
    this.view.setInt32(0, value, true);
  }

  // 0x04: u32
  set NumDescriptors(value: number) {
    this.view.setUint32(4, value, true);
  }

  // 0x08: u32
  set BaseShaderRegister(value: number) {
    this.view.setUint32(8, value, true);
  }

  // 0x0c: u32
  set RegisterSpace(value: number) {
    this.view.setUint32(12, value, true);
  }

  // 0x10: u32
  set Flags(value: number) {
    this.view.setUint32(16, value, true);
  }

  // 0x14: u32
  set OffsetInDescriptorsFromTableStart(value: number) {
    this.view.setUint32(20, value, true);
  }
}

/**
 * Windows.Win32.Graphics.Direct3D12.D3D12_ROOT_DESCRIPTOR_TABLE1 (size: 16)
 */
export interface D3D12_ROOT_DESCRIPTOR_TABLE1 {
  /** u32 */
  NumDescriptorRanges: number;
  /** ptr */
  pDescriptorRanges: Deno.PointerValue | Uint8Array | null;
}

export const sizeofD3D12_ROOT_DESCRIPTOR_TABLE1 = 16;

export function allocD3D12_ROOT_DESCRIPTOR_TABLE1(data?: Partial<D3D12_ROOT_DESCRIPTOR_TABLE1>): Uint8Array {
  const buf = new Uint8Array(sizeofD3D12_ROOT_DESCRIPTOR_TABLE1);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.NumDescriptorRanges !== undefined) view.setUint32(0, Number(data.NumDescriptorRanges), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.pDescriptorRanges !== undefined) view.setBigUint64(8, data.pDescriptorRanges === null ? 0n : util.toBigInt(util.toPointer(data.pDescriptorRanges)), true);
  return buf;
}

export class D3D12_ROOT_DESCRIPTOR_TABLE1View {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get NumDescriptorRanges(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  get pDescriptorRanges(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(8, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: u32
  set NumDescriptorRanges(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  set pDescriptorRanges(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(8, util.toBigInt(util.toPointer(value)), true);
  }
}

/**
 * Windows.Win32.Graphics.Direct3D12.D3D12_ROOT_DESCRIPTOR1 (size: 16)
 */
export interface D3D12_ROOT_DESCRIPTOR1 {
  /** u32 */
  ShaderRegister: number;
  /** u32 */
  RegisterSpace: number;
  /** Windows.Win32.Graphics.Direct3D12.D3D12_ROOT_DESCRIPTOR_FLAGS */
  Flags: D3D12_ROOT_DESCRIPTOR_FLAGS;
}

export const sizeofD3D12_ROOT_DESCRIPTOR1 = 16;

export function allocD3D12_ROOT_DESCRIPTOR1(data?: Partial<D3D12_ROOT_DESCRIPTOR1>): Uint8Array {
  const buf = new Uint8Array(sizeofD3D12_ROOT_DESCRIPTOR1);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.ShaderRegister !== undefined) view.setUint32(0, Number(data.ShaderRegister), true);
  // 0x04: u32
  if (data?.RegisterSpace !== undefined) view.setUint32(4, Number(data.RegisterSpace), true);
  // 0x08: u32
  if (data?.Flags !== undefined) view.setUint32(8, Number(data.Flags), true);
  // 0x0c: pad4
  return buf;
}

export class D3D12_ROOT_DESCRIPTOR1View {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get ShaderRegister(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: u32
  get RegisterSpace(): number {
    return this.view.getUint32(4, true);
  }

  // 0x08: u32
  get Flags(): number {
    return this.view.getUint32(8, true);
  }

  // 0x0c: pad4

  // 0x00: u32
  set ShaderRegister(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: u32
  set RegisterSpace(value: number) {
    this.view.setUint32(4, value, true);
  }

  // 0x08: u32
  set Flags(value: number) {
    this.view.setUint32(8, value, true);
  }

  // 0x0c: pad4
}

/**
 * Windows.Win32.Graphics.Direct3D12.D3D12_ROOT_PARAMETER1 (size: 24)
 */
export interface D3D12_ROOT_PARAMETER1 {
  /** Windows.Win32.Graphics.Direct3D12.D3D12_ROOT_PARAMETER_TYPE */
  ParameterType: D3D12_ROOT_PARAMETER_TYPE;
  /** _Anonymous_e__Union */
  Anonymous: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Graphics.Direct3D12.D3D12_SHADER_VISIBILITY */
  ShaderVisibility: D3D12_SHADER_VISIBILITY;
}

export const sizeofD3D12_ROOT_PARAMETER1 = 24;

export function allocD3D12_ROOT_PARAMETER1(data?: Partial<D3D12_ROOT_PARAMETER1>): Uint8Array {
  const buf = new Uint8Array(sizeofD3D12_ROOT_PARAMETER1);
  const view = new DataView(buf.buffer);
  // 0x00: i32
  if (data?.ParameterType !== undefined) view.setInt32(0, Number(data.ParameterType), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.Anonymous !== undefined) view.setBigUint64(8, data.Anonymous === null ? 0n : util.toBigInt(util.toPointer(data.Anonymous)), true);
  // 0x10: i32
  if (data?.ShaderVisibility !== undefined) view.setInt32(16, Number(data.ShaderVisibility), true);
  // 0x14: pad4
  return buf;
}

export class D3D12_ROOT_PARAMETER1View {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: i32
  get ParameterType(): number {
    return this.view.getInt32(0, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  get Anonymous(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(8, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x10: i32
  get ShaderVisibility(): number {
    return this.view.getInt32(16, true);
  }

  // 0x14: pad4

  // 0x00: i32
  set ParameterType(value: number) {
    this.view.setInt32(0, value, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  set Anonymous(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(8, util.toBigInt(util.toPointer(value)), true);
  }

  // 0x10: i32
  set ShaderVisibility(value: number) {
    this.view.setInt32(16, value, true);
  }

  // 0x14: pad4
}

/**
 * Windows.Win32.Graphics.Direct3D12.D3D12_ROOT_SIGNATURE_DESC1 (size: 40)
 */
export interface D3D12_ROOT_SIGNATURE_DESC1 {
  /** u32 */
  NumParameters: number;
  /** ptr */
  pParameters: Deno.PointerValue | Uint8Array | null;
  /** u32 */
  NumStaticSamplers: number;
  /** ptr */
  pStaticSamplers: Deno.PointerValue | Uint8Array | null;
  /** Windows.Win32.Graphics.Direct3D12.D3D12_ROOT_SIGNATURE_FLAGS */
  Flags: D3D12_ROOT_SIGNATURE_FLAGS;
}

export const sizeofD3D12_ROOT_SIGNATURE_DESC1 = 40;

export function allocD3D12_ROOT_SIGNATURE_DESC1(data?: Partial<D3D12_ROOT_SIGNATURE_DESC1>): Uint8Array {
  const buf = new Uint8Array(sizeofD3D12_ROOT_SIGNATURE_DESC1);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.NumParameters !== undefined) view.setUint32(0, Number(data.NumParameters), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.pParameters !== undefined) view.setBigUint64(8, data.pParameters === null ? 0n : util.toBigInt(util.toPointer(data.pParameters)), true);
  // 0x10: u32
  if (data?.NumStaticSamplers !== undefined) view.setUint32(16, Number(data.NumStaticSamplers), true);
  // 0x14: pad4
  // 0x18: pointer
  if (data?.pStaticSamplers !== undefined) view.setBigUint64(24, data.pStaticSamplers === null ? 0n : util.toBigInt(util.toPointer(data.pStaticSamplers)), true);
  // 0x20: u32
  if (data?.Flags !== undefined) view.setUint32(32, Number(data.Flags), true);
  // 0x24: pad4
  return buf;
}

export class D3D12_ROOT_SIGNATURE_DESC1View {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get NumParameters(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  get pParameters(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(8, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x10: u32
  get NumStaticSamplers(): number {
    return this.view.getUint32(16, true);
  }

  // 0x14: pad4

  // 0x18: pointer
  get pStaticSamplers(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(24, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x20: u32
  get Flags(): number {
    return this.view.getUint32(32, true);
  }

  // 0x24: pad4

  // 0x00: u32
  set NumParameters(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  set pParameters(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(8, util.toBigInt(util.toPointer(value)), true);
  }

  // 0x10: u32
  set NumStaticSamplers(value: number) {
    this.view.setUint32(16, value, true);
  }

  // 0x14: pad4

  // 0x18: pointer
  set pStaticSamplers(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(24, util.toBigInt(util.toPointer(value)), true);
  }

  // 0x20: u32
  set Flags(value: number) {
    this.view.setUint32(32, value, true);
  }

  // 0x24: pad4
}

/**
 * Windows.Win32.Graphics.Direct3D12.D3D12_VERSIONED_ROOT_SIGNATURE_DESC (size: 16)
 */
export interface D3D12_VERSIONED_ROOT_SIGNATURE_DESC {
  /** Windows.Win32.Graphics.Direct3D12.D3D_ROOT_SIGNATURE_VERSION */
  Version: D3D_ROOT_SIGNATURE_VERSION;
  /** _Anonymous_e__Union */
  Anonymous: Uint8Array | Deno.PointerValue | null;
}

export const sizeofD3D12_VERSIONED_ROOT_SIGNATURE_DESC = 16;

export function allocD3D12_VERSIONED_ROOT_SIGNATURE_DESC(data?: Partial<D3D12_VERSIONED_ROOT_SIGNATURE_DESC>): Uint8Array {
  const buf = new Uint8Array(sizeofD3D12_VERSIONED_ROOT_SIGNATURE_DESC);
  const view = new DataView(buf.buffer);
  // 0x00: i32
  if (data?.Version !== undefined) view.setInt32(0, Number(data.Version), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.Anonymous !== undefined) view.setBigUint64(8, data.Anonymous === null ? 0n : util.toBigInt(util.toPointer(data.Anonymous)), true);
  return buf;
}

export class D3D12_VERSIONED_ROOT_SIGNATURE_DESCView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: i32
  get Version(): number {
    return this.view.getInt32(0, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  get Anonymous(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(8, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: i32
  set Version(value: number) {
    this.view.setInt32(0, value, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  set Anonymous(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(8, util.toBigInt(util.toPointer(value)), true);
  }
}

/**
 * Windows.Win32.Graphics.Direct3D12.D3D12_CPU_DESCRIPTOR_HANDLE (size: 8)
 */
export interface D3D12_CPU_DESCRIPTOR_HANDLE {
  /** usize */
  ptr: number | bigint;
}

export const sizeofD3D12_CPU_DESCRIPTOR_HANDLE = 8;

export function allocD3D12_CPU_DESCRIPTOR_HANDLE(data?: Partial<D3D12_CPU_DESCRIPTOR_HANDLE>): Uint8Array {
  const buf = new Uint8Array(sizeofD3D12_CPU_DESCRIPTOR_HANDLE);
  const view = new DataView(buf.buffer);
  // 0x00: usize
  if (data?.ptr !== undefined) view.setBigUint64(0, util.toBigInt(data.ptr), true);
  return buf;
}

export class D3D12_CPU_DESCRIPTOR_HANDLEView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: usize
  get ptr(): number | bigint {
    return this.view.getBigUint64(0, true);
  }

  // 0x00: usize
  set ptr(value: number | bigint) {
    this.view.setBigUint64(0, util.toBigInt(value), true);
  }
}

/**
 * Windows.Win32.Graphics.Direct3D12.D3D12_GPU_DESCRIPTOR_HANDLE (size: 8)
 */
export interface D3D12_GPU_DESCRIPTOR_HANDLE {
  /** u64 */
  ptr: number | bigint;
}

export const sizeofD3D12_GPU_DESCRIPTOR_HANDLE = 8;

export function allocD3D12_GPU_DESCRIPTOR_HANDLE(data?: Partial<D3D12_GPU_DESCRIPTOR_HANDLE>): Uint8Array {
  const buf = new Uint8Array(sizeofD3D12_GPU_DESCRIPTOR_HANDLE);
  const view = new DataView(buf.buffer);
  // 0x00: u64
  if (data?.ptr !== undefined) view.setBigUint64(0, util.toBigInt(data.ptr), true);
  return buf;
}

export class D3D12_GPU_DESCRIPTOR_HANDLEView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u64
  get ptr(): number | bigint {
    return this.view.getBigUint64(0, true);
  }

  // 0x00: u64
  set ptr(value: number | bigint) {
    this.view.setBigUint64(0, util.toBigInt(value), true);
  }
}

/**
 * Windows.Win32.Graphics.Direct3D12.D3D12_DISCARD_REGION (size: 24)
 */
export interface D3D12_DISCARD_REGION {
  /** u32 */
  NumRects: number;
  /** ptr */
  pRects: Deno.PointerValue | Uint8Array | null;
  /** u32 */
  FirstSubresource: number;
  /** u32 */
  NumSubresources: number;
}

export const sizeofD3D12_DISCARD_REGION = 24;

export function allocD3D12_DISCARD_REGION(data?: Partial<D3D12_DISCARD_REGION>): Uint8Array {
  const buf = new Uint8Array(sizeofD3D12_DISCARD_REGION);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.NumRects !== undefined) view.setUint32(0, Number(data.NumRects), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.pRects !== undefined) view.setBigUint64(8, data.pRects === null ? 0n : util.toBigInt(util.toPointer(data.pRects)), true);
  // 0x10: u32
  if (data?.FirstSubresource !== undefined) view.setUint32(16, Number(data.FirstSubresource), true);
  // 0x14: u32
  if (data?.NumSubresources !== undefined) view.setUint32(20, Number(data.NumSubresources), true);
  return buf;
}

export class D3D12_DISCARD_REGIONView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get NumRects(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  get pRects(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(8, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x10: u32
  get FirstSubresource(): number {
    return this.view.getUint32(16, true);
  }

  // 0x14: u32
  get NumSubresources(): number {
    return this.view.getUint32(20, true);
  }

  // 0x00: u32
  set NumRects(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  set pRects(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(8, util.toBigInt(util.toPointer(value)), true);
  }

  // 0x10: u32
  set FirstSubresource(value: number) {
    this.view.setUint32(16, value, true);
  }

  // 0x14: u32
  set NumSubresources(value: number) {
    this.view.setUint32(20, value, true);
  }
}

/**
 * Windows.Win32.Graphics.Direct3D12.D3D12_QUERY_HEAP_DESC (size: 16)
 */
export interface D3D12_QUERY_HEAP_DESC {
  /** Windows.Win32.Graphics.Direct3D12.D3D12_QUERY_HEAP_TYPE */
  Type: D3D12_QUERY_HEAP_TYPE;
  /** u32 */
  Count: number;
  /** u32 */
  NodeMask: number;
}

export const sizeofD3D12_QUERY_HEAP_DESC = 16;

export function allocD3D12_QUERY_HEAP_DESC(data?: Partial<D3D12_QUERY_HEAP_DESC>): Uint8Array {
  const buf = new Uint8Array(sizeofD3D12_QUERY_HEAP_DESC);
  const view = new DataView(buf.buffer);
  // 0x00: i32
  if (data?.Type !== undefined) view.setInt32(0, Number(data.Type), true);
  // 0x04: u32
  if (data?.Count !== undefined) view.setUint32(4, Number(data.Count), true);
  // 0x08: u32
  if (data?.NodeMask !== undefined) view.setUint32(8, Number(data.NodeMask), true);
  // 0x0c: pad4
  return buf;
}

export class D3D12_QUERY_HEAP_DESCView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: i32
  get Type(): number {
    return this.view.getInt32(0, true);
  }

  // 0x04: u32
  get Count(): number {
    return this.view.getUint32(4, true);
  }

  // 0x08: u32
  get NodeMask(): number {
    return this.view.getUint32(8, true);
  }

  // 0x0c: pad4

  // 0x00: i32
  set Type(value: number) {
    this.view.setInt32(0, value, true);
  }

  // 0x04: u32
  set Count(value: number) {
    this.view.setUint32(4, value, true);
  }

  // 0x08: u32
  set NodeMask(value: number) {
    this.view.setUint32(8, value, true);
  }

  // 0x0c: pad4
}

/**
 * Windows.Win32.Graphics.Direct3D12.D3D12_QUERY_DATA_PIPELINE_STATISTICS (size: 88)
 */
export interface D3D12_QUERY_DATA_PIPELINE_STATISTICS {
  /** u64 */
  IAVertices: number | bigint;
  /** u64 */
  IAPrimitives: number | bigint;
  /** u64 */
  VSInvocations: number | bigint;
  /** u64 */
  GSInvocations: number | bigint;
  /** u64 */
  GSPrimitives: number | bigint;
  /** u64 */
  CInvocations: number | bigint;
  /** u64 */
  CPrimitives: number | bigint;
  /** u64 */
  PSInvocations: number | bigint;
  /** u64 */
  HSInvocations: number | bigint;
  /** u64 */
  DSInvocations: number | bigint;
  /** u64 */
  CSInvocations: number | bigint;
}

export const sizeofD3D12_QUERY_DATA_PIPELINE_STATISTICS = 88;

export function allocD3D12_QUERY_DATA_PIPELINE_STATISTICS(data?: Partial<D3D12_QUERY_DATA_PIPELINE_STATISTICS>): Uint8Array {
  const buf = new Uint8Array(sizeofD3D12_QUERY_DATA_PIPELINE_STATISTICS);
  const view = new DataView(buf.buffer);
  // 0x00: u64
  if (data?.IAVertices !== undefined) view.setBigUint64(0, util.toBigInt(data.IAVertices), true);
  // 0x08: u64
  if (data?.IAPrimitives !== undefined) view.setBigUint64(8, util.toBigInt(data.IAPrimitives), true);
  // 0x10: u64
  if (data?.VSInvocations !== undefined) view.setBigUint64(16, util.toBigInt(data.VSInvocations), true);
  // 0x18: u64
  if (data?.GSInvocations !== undefined) view.setBigUint64(24, util.toBigInt(data.GSInvocations), true);
  // 0x20: u64
  if (data?.GSPrimitives !== undefined) view.setBigUint64(32, util.toBigInt(data.GSPrimitives), true);
  // 0x28: u64
  if (data?.CInvocations !== undefined) view.setBigUint64(40, util.toBigInt(data.CInvocations), true);
  // 0x30: u64
  if (data?.CPrimitives !== undefined) view.setBigUint64(48, util.toBigInt(data.CPrimitives), true);
  // 0x38: u64
  if (data?.PSInvocations !== undefined) view.setBigUint64(56, util.toBigInt(data.PSInvocations), true);
  // 0x40: u64
  if (data?.HSInvocations !== undefined) view.setBigUint64(64, util.toBigInt(data.HSInvocations), true);
  // 0x48: u64
  if (data?.DSInvocations !== undefined) view.setBigUint64(72, util.toBigInt(data.DSInvocations), true);
  // 0x50: u64
  if (data?.CSInvocations !== undefined) view.setBigUint64(80, util.toBigInt(data.CSInvocations), true);
  return buf;
}

export class D3D12_QUERY_DATA_PIPELINE_STATISTICSView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u64
  get IAVertices(): number | bigint {
    return this.view.getBigUint64(0, true);
  }

  // 0x08: u64
  get IAPrimitives(): number | bigint {
    return this.view.getBigUint64(8, true);
  }

  // 0x10: u64
  get VSInvocations(): number | bigint {
    return this.view.getBigUint64(16, true);
  }

  // 0x18: u64
  get GSInvocations(): number | bigint {
    return this.view.getBigUint64(24, true);
  }

  // 0x20: u64
  get GSPrimitives(): number | bigint {
    return this.view.getBigUint64(32, true);
  }

  // 0x28: u64
  get CInvocations(): number | bigint {
    return this.view.getBigUint64(40, true);
  }

  // 0x30: u64
  get CPrimitives(): number | bigint {
    return this.view.getBigUint64(48, true);
  }

  // 0x38: u64
  get PSInvocations(): number | bigint {
    return this.view.getBigUint64(56, true);
  }

  // 0x40: u64
  get HSInvocations(): number | bigint {
    return this.view.getBigUint64(64, true);
  }

  // 0x48: u64
  get DSInvocations(): number | bigint {
    return this.view.getBigUint64(72, true);
  }

  // 0x50: u64
  get CSInvocations(): number | bigint {
    return this.view.getBigUint64(80, true);
  }

  // 0x00: u64
  set IAVertices(value: number | bigint) {
    this.view.setBigUint64(0, util.toBigInt(value), true);
  }

  // 0x08: u64
  set IAPrimitives(value: number | bigint) {
    this.view.setBigUint64(8, util.toBigInt(value), true);
  }

  // 0x10: u64
  set VSInvocations(value: number | bigint) {
    this.view.setBigUint64(16, util.toBigInt(value), true);
  }

  // 0x18: u64
  set GSInvocations(value: number | bigint) {
    this.view.setBigUint64(24, util.toBigInt(value), true);
  }

  // 0x20: u64
  set GSPrimitives(value: number | bigint) {
    this.view.setBigUint64(32, util.toBigInt(value), true);
  }

  // 0x28: u64
  set CInvocations(value: number | bigint) {
    this.view.setBigUint64(40, util.toBigInt(value), true);
  }

  // 0x30: u64
  set CPrimitives(value: number | bigint) {
    this.view.setBigUint64(48, util.toBigInt(value), true);
  }

  // 0x38: u64
  set PSInvocations(value: number | bigint) {
    this.view.setBigUint64(56, util.toBigInt(value), true);
  }

  // 0x40: u64
  set HSInvocations(value: number | bigint) {
    this.view.setBigUint64(64, util.toBigInt(value), true);
  }

  // 0x48: u64
  set DSInvocations(value: number | bigint) {
    this.view.setBigUint64(72, util.toBigInt(value), true);
  }

  // 0x50: u64
  set CSInvocations(value: number | bigint) {
    this.view.setBigUint64(80, util.toBigInt(value), true);
  }
}

/**
 * Windows.Win32.Graphics.Direct3D12.D3D12_QUERY_DATA_PIPELINE_STATISTICS1 (size: 112)
 */
export interface D3D12_QUERY_DATA_PIPELINE_STATISTICS1 {
  /** u64 */
  IAVertices: number | bigint;
  /** u64 */
  IAPrimitives: number | bigint;
  /** u64 */
  VSInvocations: number | bigint;
  /** u64 */
  GSInvocations: number | bigint;
  /** u64 */
  GSPrimitives: number | bigint;
  /** u64 */
  CInvocations: number | bigint;
  /** u64 */
  CPrimitives: number | bigint;
  /** u64 */
  PSInvocations: number | bigint;
  /** u64 */
  HSInvocations: number | bigint;
  /** u64 */
  DSInvocations: number | bigint;
  /** u64 */
  CSInvocations: number | bigint;
  /** u64 */
  ASInvocations: number | bigint;
  /** u64 */
  MSInvocations: number | bigint;
  /** u64 */
  MSPrimitives: number | bigint;
}

export const sizeofD3D12_QUERY_DATA_PIPELINE_STATISTICS1 = 112;

export function allocD3D12_QUERY_DATA_PIPELINE_STATISTICS1(data?: Partial<D3D12_QUERY_DATA_PIPELINE_STATISTICS1>): Uint8Array {
  const buf = new Uint8Array(sizeofD3D12_QUERY_DATA_PIPELINE_STATISTICS1);
  const view = new DataView(buf.buffer);
  // 0x00: u64
  if (data?.IAVertices !== undefined) view.setBigUint64(0, util.toBigInt(data.IAVertices), true);
  // 0x08: u64
  if (data?.IAPrimitives !== undefined) view.setBigUint64(8, util.toBigInt(data.IAPrimitives), true);
  // 0x10: u64
  if (data?.VSInvocations !== undefined) view.setBigUint64(16, util.toBigInt(data.VSInvocations), true);
  // 0x18: u64
  if (data?.GSInvocations !== undefined) view.setBigUint64(24, util.toBigInt(data.GSInvocations), true);
  // 0x20: u64
  if (data?.GSPrimitives !== undefined) view.setBigUint64(32, util.toBigInt(data.GSPrimitives), true);
  // 0x28: u64
  if (data?.CInvocations !== undefined) view.setBigUint64(40, util.toBigInt(data.CInvocations), true);
  // 0x30: u64
  if (data?.CPrimitives !== undefined) view.setBigUint64(48, util.toBigInt(data.CPrimitives), true);
  // 0x38: u64
  if (data?.PSInvocations !== undefined) view.setBigUint64(56, util.toBigInt(data.PSInvocations), true);
  // 0x40: u64
  if (data?.HSInvocations !== undefined) view.setBigUint64(64, util.toBigInt(data.HSInvocations), true);
  // 0x48: u64
  if (data?.DSInvocations !== undefined) view.setBigUint64(72, util.toBigInt(data.DSInvocations), true);
  // 0x50: u64
  if (data?.CSInvocations !== undefined) view.setBigUint64(80, util.toBigInt(data.CSInvocations), true);
  // 0x58: u64
  if (data?.ASInvocations !== undefined) view.setBigUint64(88, util.toBigInt(data.ASInvocations), true);
  // 0x60: u64
  if (data?.MSInvocations !== undefined) view.setBigUint64(96, util.toBigInt(data.MSInvocations), true);
  // 0x68: u64
  if (data?.MSPrimitives !== undefined) view.setBigUint64(104, util.toBigInt(data.MSPrimitives), true);
  return buf;
}

export class D3D12_QUERY_DATA_PIPELINE_STATISTICS1View {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u64
  get IAVertices(): number | bigint {
    return this.view.getBigUint64(0, true);
  }

  // 0x08: u64
  get IAPrimitives(): number | bigint {
    return this.view.getBigUint64(8, true);
  }

  // 0x10: u64
  get VSInvocations(): number | bigint {
    return this.view.getBigUint64(16, true);
  }

  // 0x18: u64
  get GSInvocations(): number | bigint {
    return this.view.getBigUint64(24, true);
  }

  // 0x20: u64
  get GSPrimitives(): number | bigint {
    return this.view.getBigUint64(32, true);
  }

  // 0x28: u64
  get CInvocations(): number | bigint {
    return this.view.getBigUint64(40, true);
  }

  // 0x30: u64
  get CPrimitives(): number | bigint {
    return this.view.getBigUint64(48, true);
  }

  // 0x38: u64
  get PSInvocations(): number | bigint {
    return this.view.getBigUint64(56, true);
  }

  // 0x40: u64
  get HSInvocations(): number | bigint {
    return this.view.getBigUint64(64, true);
  }

  // 0x48: u64
  get DSInvocations(): number | bigint {
    return this.view.getBigUint64(72, true);
  }

  // 0x50: u64
  get CSInvocations(): number | bigint {
    return this.view.getBigUint64(80, true);
  }

  // 0x58: u64
  get ASInvocations(): number | bigint {
    return this.view.getBigUint64(88, true);
  }

  // 0x60: u64
  get MSInvocations(): number | bigint {
    return this.view.getBigUint64(96, true);
  }

  // 0x68: u64
  get MSPrimitives(): number | bigint {
    return this.view.getBigUint64(104, true);
  }

  // 0x00: u64
  set IAVertices(value: number | bigint) {
    this.view.setBigUint64(0, util.toBigInt(value), true);
  }

  // 0x08: u64
  set IAPrimitives(value: number | bigint) {
    this.view.setBigUint64(8, util.toBigInt(value), true);
  }

  // 0x10: u64
  set VSInvocations(value: number | bigint) {
    this.view.setBigUint64(16, util.toBigInt(value), true);
  }

  // 0x18: u64
  set GSInvocations(value: number | bigint) {
    this.view.setBigUint64(24, util.toBigInt(value), true);
  }

  // 0x20: u64
  set GSPrimitives(value: number | bigint) {
    this.view.setBigUint64(32, util.toBigInt(value), true);
  }

  // 0x28: u64
  set CInvocations(value: number | bigint) {
    this.view.setBigUint64(40, util.toBigInt(value), true);
  }

  // 0x30: u64
  set CPrimitives(value: number | bigint) {
    this.view.setBigUint64(48, util.toBigInt(value), true);
  }

  // 0x38: u64
  set PSInvocations(value: number | bigint) {
    this.view.setBigUint64(56, util.toBigInt(value), true);
  }

  // 0x40: u64
  set HSInvocations(value: number | bigint) {
    this.view.setBigUint64(64, util.toBigInt(value), true);
  }

  // 0x48: u64
  set DSInvocations(value: number | bigint) {
    this.view.setBigUint64(72, util.toBigInt(value), true);
  }

  // 0x50: u64
  set CSInvocations(value: number | bigint) {
    this.view.setBigUint64(80, util.toBigInt(value), true);
  }

  // 0x58: u64
  set ASInvocations(value: number | bigint) {
    this.view.setBigUint64(88, util.toBigInt(value), true);
  }

  // 0x60: u64
  set MSInvocations(value: number | bigint) {
    this.view.setBigUint64(96, util.toBigInt(value), true);
  }

  // 0x68: u64
  set MSPrimitives(value: number | bigint) {
    this.view.setBigUint64(104, util.toBigInt(value), true);
  }
}

/**
 * Windows.Win32.Graphics.Direct3D12.D3D12_QUERY_DATA_SO_STATISTICS (size: 16)
 */
export interface D3D12_QUERY_DATA_SO_STATISTICS {
  /** u64 */
  NumPrimitivesWritten: number | bigint;
  /** u64 */
  PrimitivesStorageNeeded: number | bigint;
}

export const sizeofD3D12_QUERY_DATA_SO_STATISTICS = 16;

export function allocD3D12_QUERY_DATA_SO_STATISTICS(data?: Partial<D3D12_QUERY_DATA_SO_STATISTICS>): Uint8Array {
  const buf = new Uint8Array(sizeofD3D12_QUERY_DATA_SO_STATISTICS);
  const view = new DataView(buf.buffer);
  // 0x00: u64
  if (data?.NumPrimitivesWritten !== undefined) view.setBigUint64(0, util.toBigInt(data.NumPrimitivesWritten), true);
  // 0x08: u64
  if (data?.PrimitivesStorageNeeded !== undefined) view.setBigUint64(8, util.toBigInt(data.PrimitivesStorageNeeded), true);
  return buf;
}

export class D3D12_QUERY_DATA_SO_STATISTICSView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u64
  get NumPrimitivesWritten(): number | bigint {
    return this.view.getBigUint64(0, true);
  }

  // 0x08: u64
  get PrimitivesStorageNeeded(): number | bigint {
    return this.view.getBigUint64(8, true);
  }

  // 0x00: u64
  set NumPrimitivesWritten(value: number | bigint) {
    this.view.setBigUint64(0, util.toBigInt(value), true);
  }

  // 0x08: u64
  set PrimitivesStorageNeeded(value: number | bigint) {
    this.view.setBigUint64(8, util.toBigInt(value), true);
  }
}

/**
 * Windows.Win32.Graphics.Direct3D12.D3D12_STREAM_OUTPUT_BUFFER_VIEW (size: 24)
 */
export interface D3D12_STREAM_OUTPUT_BUFFER_VIEW {
  /** u64 */
  BufferLocation: number | bigint;
  /** u64 */
  SizeInBytes: number | bigint;
  /** u64 */
  BufferFilledSizeLocation: number | bigint;
}

export const sizeofD3D12_STREAM_OUTPUT_BUFFER_VIEW = 24;

export function allocD3D12_STREAM_OUTPUT_BUFFER_VIEW(data?: Partial<D3D12_STREAM_OUTPUT_BUFFER_VIEW>): Uint8Array {
  const buf = new Uint8Array(sizeofD3D12_STREAM_OUTPUT_BUFFER_VIEW);
  const view = new DataView(buf.buffer);
  // 0x00: u64
  if (data?.BufferLocation !== undefined) view.setBigUint64(0, util.toBigInt(data.BufferLocation), true);
  // 0x08: u64
  if (data?.SizeInBytes !== undefined) view.setBigUint64(8, util.toBigInt(data.SizeInBytes), true);
  // 0x10: u64
  if (data?.BufferFilledSizeLocation !== undefined) view.setBigUint64(16, util.toBigInt(data.BufferFilledSizeLocation), true);
  return buf;
}

export class D3D12_STREAM_OUTPUT_BUFFER_VIEWView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u64
  get BufferLocation(): number | bigint {
    return this.view.getBigUint64(0, true);
  }

  // 0x08: u64
  get SizeInBytes(): number | bigint {
    return this.view.getBigUint64(8, true);
  }

  // 0x10: u64
  get BufferFilledSizeLocation(): number | bigint {
    return this.view.getBigUint64(16, true);
  }

  // 0x00: u64
  set BufferLocation(value: number | bigint) {
    this.view.setBigUint64(0, util.toBigInt(value), true);
  }

  // 0x08: u64
  set SizeInBytes(value: number | bigint) {
    this.view.setBigUint64(8, util.toBigInt(value), true);
  }

  // 0x10: u64
  set BufferFilledSizeLocation(value: number | bigint) {
    this.view.setBigUint64(16, util.toBigInt(value), true);
  }
}

/**
 * Windows.Win32.Graphics.Direct3D12.D3D12_DRAW_ARGUMENTS (size: 16)
 */
export interface D3D12_DRAW_ARGUMENTS {
  /** u32 */
  VertexCountPerInstance: number;
  /** u32 */
  InstanceCount: number;
  /** u32 */
  StartVertexLocation: number;
  /** u32 */
  StartInstanceLocation: number;
}

export const sizeofD3D12_DRAW_ARGUMENTS = 16;

export function allocD3D12_DRAW_ARGUMENTS(data?: Partial<D3D12_DRAW_ARGUMENTS>): Uint8Array {
  const buf = new Uint8Array(sizeofD3D12_DRAW_ARGUMENTS);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.VertexCountPerInstance !== undefined) view.setUint32(0, Number(data.VertexCountPerInstance), true);
  // 0x04: u32
  if (data?.InstanceCount !== undefined) view.setUint32(4, Number(data.InstanceCount), true);
  // 0x08: u32
  if (data?.StartVertexLocation !== undefined) view.setUint32(8, Number(data.StartVertexLocation), true);
  // 0x0c: u32
  if (data?.StartInstanceLocation !== undefined) view.setUint32(12, Number(data.StartInstanceLocation), true);
  return buf;
}

export class D3D12_DRAW_ARGUMENTSView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get VertexCountPerInstance(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: u32
  get InstanceCount(): number {
    return this.view.getUint32(4, true);
  }

  // 0x08: u32
  get StartVertexLocation(): number {
    return this.view.getUint32(8, true);
  }

  // 0x0c: u32
  get StartInstanceLocation(): number {
    return this.view.getUint32(12, true);
  }

  // 0x00: u32
  set VertexCountPerInstance(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: u32
  set InstanceCount(value: number) {
    this.view.setUint32(4, value, true);
  }

  // 0x08: u32
  set StartVertexLocation(value: number) {
    this.view.setUint32(8, value, true);
  }

  // 0x0c: u32
  set StartInstanceLocation(value: number) {
    this.view.setUint32(12, value, true);
  }
}

/**
 * Windows.Win32.Graphics.Direct3D12.D3D12_DRAW_INDEXED_ARGUMENTS (size: 24)
 */
export interface D3D12_DRAW_INDEXED_ARGUMENTS {
  /** u32 */
  IndexCountPerInstance: number;
  /** u32 */
  InstanceCount: number;
  /** u32 */
  StartIndexLocation: number;
  /** i32 */
  BaseVertexLocation: number;
  /** u32 */
  StartInstanceLocation: number;
}

export const sizeofD3D12_DRAW_INDEXED_ARGUMENTS = 24;

export function allocD3D12_DRAW_INDEXED_ARGUMENTS(data?: Partial<D3D12_DRAW_INDEXED_ARGUMENTS>): Uint8Array {
  const buf = new Uint8Array(sizeofD3D12_DRAW_INDEXED_ARGUMENTS);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.IndexCountPerInstance !== undefined) view.setUint32(0, Number(data.IndexCountPerInstance), true);
  // 0x04: u32
  if (data?.InstanceCount !== undefined) view.setUint32(4, Number(data.InstanceCount), true);
  // 0x08: u32
  if (data?.StartIndexLocation !== undefined) view.setUint32(8, Number(data.StartIndexLocation), true);
  // 0x0c: i32
  if (data?.BaseVertexLocation !== undefined) view.setInt32(12, Number(data.BaseVertexLocation), true);
  // 0x10: u32
  if (data?.StartInstanceLocation !== undefined) view.setUint32(16, Number(data.StartInstanceLocation), true);
  // 0x14: pad4
  return buf;
}

export class D3D12_DRAW_INDEXED_ARGUMENTSView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get IndexCountPerInstance(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: u32
  get InstanceCount(): number {
    return this.view.getUint32(4, true);
  }

  // 0x08: u32
  get StartIndexLocation(): number {
    return this.view.getUint32(8, true);
  }

  // 0x0c: i32
  get BaseVertexLocation(): number {
    return this.view.getInt32(12, true);
  }

  // 0x10: u32
  get StartInstanceLocation(): number {
    return this.view.getUint32(16, true);
  }

  // 0x14: pad4

  // 0x00: u32
  set IndexCountPerInstance(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: u32
  set InstanceCount(value: number) {
    this.view.setUint32(4, value, true);
  }

  // 0x08: u32
  set StartIndexLocation(value: number) {
    this.view.setUint32(8, value, true);
  }

  // 0x0c: i32
  set BaseVertexLocation(value: number) {
    this.view.setInt32(12, value, true);
  }

  // 0x10: u32
  set StartInstanceLocation(value: number) {
    this.view.setUint32(16, value, true);
  }

  // 0x14: pad4
}

/**
 * Windows.Win32.Graphics.Direct3D12.D3D12_DISPATCH_ARGUMENTS (size: 16)
 */
export interface D3D12_DISPATCH_ARGUMENTS {
  /** u32 */
  ThreadGroupCountX: number;
  /** u32 */
  ThreadGroupCountY: number;
  /** u32 */
  ThreadGroupCountZ: number;
}

export const sizeofD3D12_DISPATCH_ARGUMENTS = 16;

export function allocD3D12_DISPATCH_ARGUMENTS(data?: Partial<D3D12_DISPATCH_ARGUMENTS>): Uint8Array {
  const buf = new Uint8Array(sizeofD3D12_DISPATCH_ARGUMENTS);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.ThreadGroupCountX !== undefined) view.setUint32(0, Number(data.ThreadGroupCountX), true);
  // 0x04: u32
  if (data?.ThreadGroupCountY !== undefined) view.setUint32(4, Number(data.ThreadGroupCountY), true);
  // 0x08: u32
  if (data?.ThreadGroupCountZ !== undefined) view.setUint32(8, Number(data.ThreadGroupCountZ), true);
  // 0x0c: pad4
  return buf;
}

export class D3D12_DISPATCH_ARGUMENTSView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get ThreadGroupCountX(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: u32
  get ThreadGroupCountY(): number {
    return this.view.getUint32(4, true);
  }

  // 0x08: u32
  get ThreadGroupCountZ(): number {
    return this.view.getUint32(8, true);
  }

  // 0x0c: pad4

  // 0x00: u32
  set ThreadGroupCountX(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: u32
  set ThreadGroupCountY(value: number) {
    this.view.setUint32(4, value, true);
  }

  // 0x08: u32
  set ThreadGroupCountZ(value: number) {
    this.view.setUint32(8, value, true);
  }

  // 0x0c: pad4
}

/**
 * Windows.Win32.Graphics.Direct3D12.D3D12_VERTEX_BUFFER_VIEW (size: 16)
 */
export interface D3D12_VERTEX_BUFFER_VIEW {
  /** u64 */
  BufferLocation: number | bigint;
  /** u32 */
  SizeInBytes: number;
  /** u32 */
  StrideInBytes: number;
}

export const sizeofD3D12_VERTEX_BUFFER_VIEW = 16;

export function allocD3D12_VERTEX_BUFFER_VIEW(data?: Partial<D3D12_VERTEX_BUFFER_VIEW>): Uint8Array {
  const buf = new Uint8Array(sizeofD3D12_VERTEX_BUFFER_VIEW);
  const view = new DataView(buf.buffer);
  // 0x00: u64
  if (data?.BufferLocation !== undefined) view.setBigUint64(0, util.toBigInt(data.BufferLocation), true);
  // 0x08: u32
  if (data?.SizeInBytes !== undefined) view.setUint32(8, Number(data.SizeInBytes), true);
  // 0x0c: u32
  if (data?.StrideInBytes !== undefined) view.setUint32(12, Number(data.StrideInBytes), true);
  return buf;
}

export class D3D12_VERTEX_BUFFER_VIEWView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u64
  get BufferLocation(): number | bigint {
    return this.view.getBigUint64(0, true);
  }

  // 0x08: u32
  get SizeInBytes(): number {
    return this.view.getUint32(8, true);
  }

  // 0x0c: u32
  get StrideInBytes(): number {
    return this.view.getUint32(12, true);
  }

  // 0x00: u64
  set BufferLocation(value: number | bigint) {
    this.view.setBigUint64(0, util.toBigInt(value), true);
  }

  // 0x08: u32
  set SizeInBytes(value: number) {
    this.view.setUint32(8, value, true);
  }

  // 0x0c: u32
  set StrideInBytes(value: number) {
    this.view.setUint32(12, value, true);
  }
}

/**
 * Windows.Win32.Graphics.Direct3D12.D3D12_INDEX_BUFFER_VIEW (size: 16)
 */
export interface D3D12_INDEX_BUFFER_VIEW {
  /** u64 */
  BufferLocation: number | bigint;
  /** u32 */
  SizeInBytes: number;
  /** Windows.Win32.Graphics.Dxgi.Common.DXGI_FORMAT */
  Format: DXGI_FORMAT;
}

export const sizeofD3D12_INDEX_BUFFER_VIEW = 16;

export function allocD3D12_INDEX_BUFFER_VIEW(data?: Partial<D3D12_INDEX_BUFFER_VIEW>): Uint8Array {
  const buf = new Uint8Array(sizeofD3D12_INDEX_BUFFER_VIEW);
  const view = new DataView(buf.buffer);
  // 0x00: u64
  if (data?.BufferLocation !== undefined) view.setBigUint64(0, util.toBigInt(data.BufferLocation), true);
  // 0x08: u32
  if (data?.SizeInBytes !== undefined) view.setUint32(8, Number(data.SizeInBytes), true);
  // 0x0c: u32
  if (data?.Format !== undefined) view.setUint32(12, Number(data.Format), true);
  return buf;
}

export class D3D12_INDEX_BUFFER_VIEWView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u64
  get BufferLocation(): number | bigint {
    return this.view.getBigUint64(0, true);
  }

  // 0x08: u32
  get SizeInBytes(): number {
    return this.view.getUint32(8, true);
  }

  // 0x0c: u32
  get Format(): number {
    return this.view.getUint32(12, true);
  }

  // 0x00: u64
  set BufferLocation(value: number | bigint) {
    this.view.setBigUint64(0, util.toBigInt(value), true);
  }

  // 0x08: u32
  set SizeInBytes(value: number) {
    this.view.setUint32(8, value, true);
  }

  // 0x0c: u32
  set Format(value: number) {
    this.view.setUint32(12, value, true);
  }
}

/**
 * Windows.Win32.Graphics.Direct3D12.D3D12_INDIRECT_ARGUMENT_DESC (size: 16)
 */
export interface D3D12_INDIRECT_ARGUMENT_DESC {
  /** Windows.Win32.Graphics.Direct3D12.D3D12_INDIRECT_ARGUMENT_TYPE */
  Type: D3D12_INDIRECT_ARGUMENT_TYPE;
  /** _Anonymous_e__Union */
  Anonymous: Uint8Array | Deno.PointerValue | null;
}

export const sizeofD3D12_INDIRECT_ARGUMENT_DESC = 16;

export function allocD3D12_INDIRECT_ARGUMENT_DESC(data?: Partial<D3D12_INDIRECT_ARGUMENT_DESC>): Uint8Array {
  const buf = new Uint8Array(sizeofD3D12_INDIRECT_ARGUMENT_DESC);
  const view = new DataView(buf.buffer);
  // 0x00: i32
  if (data?.Type !== undefined) view.setInt32(0, Number(data.Type), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.Anonymous !== undefined) view.setBigUint64(8, data.Anonymous === null ? 0n : util.toBigInt(util.toPointer(data.Anonymous)), true);
  return buf;
}

export class D3D12_INDIRECT_ARGUMENT_DESCView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: i32
  get Type(): number {
    return this.view.getInt32(0, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  get Anonymous(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(8, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: i32
  set Type(value: number) {
    this.view.setInt32(0, value, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  set Anonymous(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(8, util.toBigInt(util.toPointer(value)), true);
  }
}

/**
 * Windows.Win32.Graphics.Direct3D12.D3D12_COMMAND_SIGNATURE_DESC (size: 24)
 */
export interface D3D12_COMMAND_SIGNATURE_DESC {
  /** u32 */
  ByteStride: number;
  /** u32 */
  NumArgumentDescs: number;
  /** ptr */
  pArgumentDescs: Deno.PointerValue | Uint8Array | null;
  /** u32 */
  NodeMask: number;
}

export const sizeofD3D12_COMMAND_SIGNATURE_DESC = 24;

export function allocD3D12_COMMAND_SIGNATURE_DESC(data?: Partial<D3D12_COMMAND_SIGNATURE_DESC>): Uint8Array {
  const buf = new Uint8Array(sizeofD3D12_COMMAND_SIGNATURE_DESC);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.ByteStride !== undefined) view.setUint32(0, Number(data.ByteStride), true);
  // 0x04: u32
  if (data?.NumArgumentDescs !== undefined) view.setUint32(4, Number(data.NumArgumentDescs), true);
  // 0x08: pointer
  if (data?.pArgumentDescs !== undefined) view.setBigUint64(8, data.pArgumentDescs === null ? 0n : util.toBigInt(util.toPointer(data.pArgumentDescs)), true);
  // 0x10: u32
  if (data?.NodeMask !== undefined) view.setUint32(16, Number(data.NodeMask), true);
  // 0x14: pad4
  return buf;
}

export class D3D12_COMMAND_SIGNATURE_DESCView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get ByteStride(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: u32
  get NumArgumentDescs(): number {
    return this.view.getUint32(4, true);
  }

  // 0x08: pointer
  get pArgumentDescs(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(8, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x10: u32
  get NodeMask(): number {
    return this.view.getUint32(16, true);
  }

  // 0x14: pad4

  // 0x00: u32
  set ByteStride(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: u32
  set NumArgumentDescs(value: number) {
    this.view.setUint32(4, value, true);
  }

  // 0x08: pointer
  set pArgumentDescs(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(8, util.toBigInt(util.toPointer(value)), true);
  }

  // 0x10: u32
  set NodeMask(value: number) {
    this.view.setUint32(16, value, true);
  }

  // 0x14: pad4
}

/**
 * Windows.Win32.Graphics.Direct3D12.D3D12_WRITEBUFFERIMMEDIATE_PARAMETER (size: 16)
 */
export interface D3D12_WRITEBUFFERIMMEDIATE_PARAMETER {
  /** u64 */
  Dest: number | bigint;
  /** u32 */
  Value: number;
}

export const sizeofD3D12_WRITEBUFFERIMMEDIATE_PARAMETER = 16;

export function allocD3D12_WRITEBUFFERIMMEDIATE_PARAMETER(data?: Partial<D3D12_WRITEBUFFERIMMEDIATE_PARAMETER>): Uint8Array {
  const buf = new Uint8Array(sizeofD3D12_WRITEBUFFERIMMEDIATE_PARAMETER);
  const view = new DataView(buf.buffer);
  // 0x00: u64
  if (data?.Dest !== undefined) view.setBigUint64(0, util.toBigInt(data.Dest), true);
  // 0x08: u32
  if (data?.Value !== undefined) view.setUint32(8, Number(data.Value), true);
  // 0x0c: pad4
  return buf;
}

export class D3D12_WRITEBUFFERIMMEDIATE_PARAMETERView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u64
  get Dest(): number | bigint {
    return this.view.getBigUint64(0, true);
  }

  // 0x08: u32
  get Value(): number {
    return this.view.getUint32(8, true);
  }

  // 0x0c: pad4

  // 0x00: u64
  set Dest(value: number | bigint) {
    this.view.setBigUint64(0, util.toBigInt(value), true);
  }

  // 0x08: u32
  set Value(value: number) {
    this.view.setUint32(8, value, true);
  }

  // 0x0c: pad4
}

/**
 * Windows.Win32.Graphics.Direct3D12.D3D12_FEATURE_DATA_PROTECTED_RESOURCE_SESSION_SUPPORT (size: 8)
 */
export interface D3D12_FEATURE_DATA_PROTECTED_RESOURCE_SESSION_SUPPORT {
  /** u32 */
  NodeIndex: number;
  /** Windows.Win32.Graphics.Direct3D12.D3D12_PROTECTED_RESOURCE_SESSION_SUPPORT_FLAGS */
  Support: D3D12_PROTECTED_RESOURCE_SESSION_SUPPORT_FLAGS;
}

export const sizeofD3D12_FEATURE_DATA_PROTECTED_RESOURCE_SESSION_SUPPORT = 8;

export function allocD3D12_FEATURE_DATA_PROTECTED_RESOURCE_SESSION_SUPPORT(data?: Partial<D3D12_FEATURE_DATA_PROTECTED_RESOURCE_SESSION_SUPPORT>): Uint8Array {
  const buf = new Uint8Array(sizeofD3D12_FEATURE_DATA_PROTECTED_RESOURCE_SESSION_SUPPORT);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.NodeIndex !== undefined) view.setUint32(0, Number(data.NodeIndex), true);
  // 0x04: u32
  if (data?.Support !== undefined) view.setUint32(4, Number(data.Support), true);
  return buf;
}

export class D3D12_FEATURE_DATA_PROTECTED_RESOURCE_SESSION_SUPPORTView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get NodeIndex(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: u32
  get Support(): number {
    return this.view.getUint32(4, true);
  }

  // 0x00: u32
  set NodeIndex(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: u32
  set Support(value: number) {
    this.view.setUint32(4, value, true);
  }
}

/**
 * Windows.Win32.Graphics.Direct3D12.D3D12_PROTECTED_RESOURCE_SESSION_DESC (size: 8)
 */
export interface D3D12_PROTECTED_RESOURCE_SESSION_DESC {
  /** u32 */
  NodeMask: number;
  /** Windows.Win32.Graphics.Direct3D12.D3D12_PROTECTED_RESOURCE_SESSION_FLAGS */
  Flags: D3D12_PROTECTED_RESOURCE_SESSION_FLAGS;
}

export const sizeofD3D12_PROTECTED_RESOURCE_SESSION_DESC = 8;

export function allocD3D12_PROTECTED_RESOURCE_SESSION_DESC(data?: Partial<D3D12_PROTECTED_RESOURCE_SESSION_DESC>): Uint8Array {
  const buf = new Uint8Array(sizeofD3D12_PROTECTED_RESOURCE_SESSION_DESC);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.NodeMask !== undefined) view.setUint32(0, Number(data.NodeMask), true);
  // 0x04: u32
  if (data?.Flags !== undefined) view.setUint32(4, Number(data.Flags), true);
  return buf;
}

export class D3D12_PROTECTED_RESOURCE_SESSION_DESCView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get NodeMask(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: u32
  get Flags(): number {
    return this.view.getUint32(4, true);
  }

  // 0x00: u32
  set NodeMask(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: u32
  set Flags(value: number) {
    this.view.setUint32(4, value, true);
  }
}

/**
 * Windows.Win32.Graphics.Direct3D12.D3D12_META_COMMAND_PARAMETER_DESC (size: 24)
 */
export interface D3D12_META_COMMAND_PARAMETER_DESC {
  /** Windows.Win32.Foundation.PWSTR */
  Name: string | null | Uint8Array | Uint16Array;
  /** Windows.Win32.Graphics.Direct3D12.D3D12_META_COMMAND_PARAMETER_TYPE */
  Type: D3D12_META_COMMAND_PARAMETER_TYPE;
  /** Windows.Win32.Graphics.Direct3D12.D3D12_META_COMMAND_PARAMETER_FLAGS */
  Flags: D3D12_META_COMMAND_PARAMETER_FLAGS;
  /** Windows.Win32.Graphics.Direct3D12.D3D12_RESOURCE_STATES */
  RequiredResourceState: D3D12_RESOURCE_STATES;
  /** u32 */
  StructureOffset: number;
}

export const sizeofD3D12_META_COMMAND_PARAMETER_DESC = 24;

export function allocD3D12_META_COMMAND_PARAMETER_DESC(data?: Partial<D3D12_META_COMMAND_PARAMETER_DESC>): Uint8Array {
  const buf = new Uint8Array(sizeofD3D12_META_COMMAND_PARAMETER_DESC);
  const view = new DataView(buf.buffer);
  // 0x00: buffer
  if (data?.Name !== undefined) {
    (buf as any)._f0 = util.pwstrToFfi(data.Name);
    view.setBigUint64(0, (buf as any)._f0 === null ? 0n : util.toBigInt(Deno.UnsafePointer.of((buf as any)._f0)), true);
  }
  // 0x08: i32
  if (data?.Type !== undefined) view.setInt32(8, Number(data.Type), true);
  // 0x0c: u32
  if (data?.Flags !== undefined) view.setUint32(12, Number(data.Flags), true);
  // 0x10: u32
  if (data?.RequiredResourceState !== undefined) view.setUint32(16, Number(data.RequiredResourceState), true);
  // 0x14: u32
  if (data?.StructureOffset !== undefined) view.setUint32(20, Number(data.StructureOffset), true);
  return buf;
}

export class D3D12_META_COMMAND_PARAMETER_DESCView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: buffer
  get Name(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(0, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x08: i32
  get Type(): number {
    return this.view.getInt32(8, true);
  }

  // 0x0c: u32
  get Flags(): number {
    return this.view.getUint32(12, true);
  }

  // 0x10: u32
  get RequiredResourceState(): number {
    return this.view.getUint32(16, true);
  }

  // 0x14: u32
  get StructureOffset(): number {
    return this.view.getUint32(20, true);
  }

  // 0x00: buffer
  set Name(value: Uint8Array | Deno.PointerValue | null) {
    (this.buf as any)._f0 = value;
    this.view.setBigUint64(0, util.toBigInt(util.toPointer((this.buf as any)._f0)), true);
  }

  // 0x08: i32
  set Type(value: number) {
    this.view.setInt32(8, value, true);
  }

  // 0x0c: u32
  set Flags(value: number) {
    this.view.setUint32(12, value, true);
  }

  // 0x10: u32
  set RequiredResourceState(value: number) {
    this.view.setUint32(16, value, true);
  }

  // 0x14: u32
  set StructureOffset(value: number) {
    this.view.setUint32(20, value, true);
  }
}

/**
 * Windows.Win32.Graphics.Direct3D12.D3D12_META_COMMAND_DESC (size: 24)
 */
export interface D3D12_META_COMMAND_DESC {
  /** System.Guid */
  Id: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Foundation.PWSTR */
  Name: string | null | Uint8Array | Uint16Array;
  /** Windows.Win32.Graphics.Direct3D12.D3D12_GRAPHICS_STATES */
  InitializationDirtyState: D3D12_GRAPHICS_STATES;
  /** Windows.Win32.Graphics.Direct3D12.D3D12_GRAPHICS_STATES */
  ExecutionDirtyState: D3D12_GRAPHICS_STATES;
}

export const sizeofD3D12_META_COMMAND_DESC = 24;

export function allocD3D12_META_COMMAND_DESC(data?: Partial<D3D12_META_COMMAND_DESC>): Uint8Array {
  const buf = new Uint8Array(sizeofD3D12_META_COMMAND_DESC);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.Id !== undefined) view.setBigUint64(0, data.Id === null ? 0n : util.toBigInt(util.toPointer(data.Id)), true);
  // 0x08: buffer
  if (data?.Name !== undefined) {
    (buf as any)._f8 = util.pwstrToFfi(data.Name);
    view.setBigUint64(8, (buf as any)._f8 === null ? 0n : util.toBigInt(Deno.UnsafePointer.of((buf as any)._f8)), true);
  }
  // 0x10: u32
  if (data?.InitializationDirtyState !== undefined) view.setUint32(16, Number(data.InitializationDirtyState), true);
  // 0x14: u32
  if (data?.ExecutionDirtyState !== undefined) view.setUint32(20, Number(data.ExecutionDirtyState), true);
  return buf;
}

export class D3D12_META_COMMAND_DESCView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get Id(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(0, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x08: buffer
  get Name(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(8, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x10: u32
  get InitializationDirtyState(): number {
    return this.view.getUint32(16, true);
  }

  // 0x14: u32
  get ExecutionDirtyState(): number {
    return this.view.getUint32(20, true);
  }

  // 0x00: pointer
  set Id(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(0, util.toBigInt(util.toPointer(value)), true);
  }

  // 0x08: buffer
  set Name(value: Uint8Array | Deno.PointerValue | null) {
    (this.buf as any)._f8 = value;
    this.view.setBigUint64(8, util.toBigInt(util.toPointer((this.buf as any)._f8)), true);
  }

  // 0x10: u32
  set InitializationDirtyState(value: number) {
    this.view.setUint32(16, value, true);
  }

  // 0x14: u32
  set ExecutionDirtyState(value: number) {
    this.view.setUint32(20, value, true);
  }
}

/**
 * Windows.Win32.Graphics.Direct3D12.D3D12_STATE_SUBOBJECT (size: 16)
 */
export interface D3D12_STATE_SUBOBJECT {
  /** Windows.Win32.Graphics.Direct3D12.D3D12_STATE_SUBOBJECT_TYPE */
  Type: D3D12_STATE_SUBOBJECT_TYPE;
  /** ptr */
  pDesc: Deno.PointerValue | Uint8Array | null;
}

export const sizeofD3D12_STATE_SUBOBJECT = 16;

export function allocD3D12_STATE_SUBOBJECT(data?: Partial<D3D12_STATE_SUBOBJECT>): Uint8Array {
  const buf = new Uint8Array(sizeofD3D12_STATE_SUBOBJECT);
  const view = new DataView(buf.buffer);
  // 0x00: i32
  if (data?.Type !== undefined) view.setInt32(0, Number(data.Type), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.pDesc !== undefined) view.setBigUint64(8, data.pDesc === null ? 0n : util.toBigInt(util.toPointer(data.pDesc)), true);
  return buf;
}

export class D3D12_STATE_SUBOBJECTView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: i32
  get Type(): number {
    return this.view.getInt32(0, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  get pDesc(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(8, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: i32
  set Type(value: number) {
    this.view.setInt32(0, value, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  set pDesc(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(8, util.toBigInt(util.toPointer(value)), true);
  }
}

/**
 * Windows.Win32.Graphics.Direct3D12.D3D12_STATE_OBJECT_CONFIG (size: 8)
 */
export interface D3D12_STATE_OBJECT_CONFIG {
  /** Windows.Win32.Graphics.Direct3D12.D3D12_STATE_OBJECT_FLAGS */
  Flags: D3D12_STATE_OBJECT_FLAGS;
}

export const sizeofD3D12_STATE_OBJECT_CONFIG = 8;

export function allocD3D12_STATE_OBJECT_CONFIG(data?: Partial<D3D12_STATE_OBJECT_CONFIG>): Uint8Array {
  const buf = new Uint8Array(sizeofD3D12_STATE_OBJECT_CONFIG);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.Flags !== undefined) view.setUint32(0, Number(data.Flags), true);
  // 0x04: pad4
  return buf;
}

export class D3D12_STATE_OBJECT_CONFIGView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get Flags(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: pad4

  // 0x00: u32
  set Flags(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: pad4
}

/**
 * Windows.Win32.Graphics.Direct3D12.D3D12_GLOBAL_ROOT_SIGNATURE (size: 8)
 */
export interface D3D12_GLOBAL_ROOT_SIGNATURE {
  /** Windows.Win32.Graphics.Direct3D12.ID3D12RootSignature */
  pGlobalRootSignature: Uint8Array | Deno.PointerValue | null;
}

export const sizeofD3D12_GLOBAL_ROOT_SIGNATURE = 8;

export function allocD3D12_GLOBAL_ROOT_SIGNATURE(data?: Partial<D3D12_GLOBAL_ROOT_SIGNATURE>): Uint8Array {
  const buf = new Uint8Array(sizeofD3D12_GLOBAL_ROOT_SIGNATURE);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.pGlobalRootSignature !== undefined) view.setBigUint64(0, data.pGlobalRootSignature === null ? 0n : util.toBigInt(util.toPointer(data.pGlobalRootSignature)), true);
  return buf;
}

export class D3D12_GLOBAL_ROOT_SIGNATUREView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get pGlobalRootSignature(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(0, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: pointer
  set pGlobalRootSignature(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(0, util.toBigInt(util.toPointer(value)), true);
  }
}

/**
 * Windows.Win32.Graphics.Direct3D12.D3D12_LOCAL_ROOT_SIGNATURE (size: 8)
 */
export interface D3D12_LOCAL_ROOT_SIGNATURE {
  /** Windows.Win32.Graphics.Direct3D12.ID3D12RootSignature */
  pLocalRootSignature: Uint8Array | Deno.PointerValue | null;
}

export const sizeofD3D12_LOCAL_ROOT_SIGNATURE = 8;

export function allocD3D12_LOCAL_ROOT_SIGNATURE(data?: Partial<D3D12_LOCAL_ROOT_SIGNATURE>): Uint8Array {
  const buf = new Uint8Array(sizeofD3D12_LOCAL_ROOT_SIGNATURE);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.pLocalRootSignature !== undefined) view.setBigUint64(0, data.pLocalRootSignature === null ? 0n : util.toBigInt(util.toPointer(data.pLocalRootSignature)), true);
  return buf;
}

export class D3D12_LOCAL_ROOT_SIGNATUREView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get pLocalRootSignature(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(0, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: pointer
  set pLocalRootSignature(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(0, util.toBigInt(util.toPointer(value)), true);
  }
}

/**
 * Windows.Win32.Graphics.Direct3D12.D3D12_NODE_MASK (size: 8)
 */
export interface D3D12_NODE_MASK {
  /** u32 */
  NodeMask: number;
}

export const sizeofD3D12_NODE_MASK = 8;

export function allocD3D12_NODE_MASK(data?: Partial<D3D12_NODE_MASK>): Uint8Array {
  const buf = new Uint8Array(sizeofD3D12_NODE_MASK);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.NodeMask !== undefined) view.setUint32(0, Number(data.NodeMask), true);
  // 0x04: pad4
  return buf;
}

export class D3D12_NODE_MASKView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get NodeMask(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: pad4

  // 0x00: u32
  set NodeMask(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: pad4
}

/**
 * Windows.Win32.Graphics.Direct3D12.D3D12_EXPORT_DESC (size: 24)
 */
export interface D3D12_EXPORT_DESC {
  /** Windows.Win32.Foundation.PWSTR */
  Name: string | null | Uint8Array | Uint16Array;
  /** Windows.Win32.Foundation.PWSTR */
  ExportToRename: string | null | Uint8Array | Uint16Array;
  /** Windows.Win32.Graphics.Direct3D12.D3D12_EXPORT_FLAGS */
  Flags: D3D12_EXPORT_FLAGS;
}

export const sizeofD3D12_EXPORT_DESC = 24;

export function allocD3D12_EXPORT_DESC(data?: Partial<D3D12_EXPORT_DESC>): Uint8Array {
  const buf = new Uint8Array(sizeofD3D12_EXPORT_DESC);
  const view = new DataView(buf.buffer);
  // 0x00: buffer
  if (data?.Name !== undefined) {
    (buf as any)._f0 = util.pwstrToFfi(data.Name);
    view.setBigUint64(0, (buf as any)._f0 === null ? 0n : util.toBigInt(Deno.UnsafePointer.of((buf as any)._f0)), true);
  }
  // 0x08: buffer
  if (data?.ExportToRename !== undefined) {
    (buf as any)._f8 = util.pwstrToFfi(data.ExportToRename);
    view.setBigUint64(8, (buf as any)._f8 === null ? 0n : util.toBigInt(Deno.UnsafePointer.of((buf as any)._f8)), true);
  }
  // 0x10: u32
  if (data?.Flags !== undefined) view.setUint32(16, Number(data.Flags), true);
  // 0x14: pad4
  return buf;
}

export class D3D12_EXPORT_DESCView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: buffer
  get Name(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(0, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x08: buffer
  get ExportToRename(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(8, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x10: u32
  get Flags(): number {
    return this.view.getUint32(16, true);
  }

  // 0x14: pad4

  // 0x00: buffer
  set Name(value: Uint8Array | Deno.PointerValue | null) {
    (this.buf as any)._f0 = value;
    this.view.setBigUint64(0, util.toBigInt(util.toPointer((this.buf as any)._f0)), true);
  }

  // 0x08: buffer
  set ExportToRename(value: Uint8Array | Deno.PointerValue | null) {
    (this.buf as any)._f8 = value;
    this.view.setBigUint64(8, util.toBigInt(util.toPointer((this.buf as any)._f8)), true);
  }

  // 0x10: u32
  set Flags(value: number) {
    this.view.setUint32(16, value, true);
  }

  // 0x14: pad4
}

/**
 * Windows.Win32.Graphics.Direct3D12.D3D12_DXIL_LIBRARY_DESC (size: 24)
 */
export interface D3D12_DXIL_LIBRARY_DESC {
  /** Windows.Win32.Graphics.Direct3D12.D3D12_SHADER_BYTECODE */
  DXILLibrary: Uint8Array | Deno.PointerValue | null;
  /** u32 */
  NumExports: number;
  /** ptr */
  pExports: Deno.PointerValue | Uint8Array | null;
}

export const sizeofD3D12_DXIL_LIBRARY_DESC = 24;

export function allocD3D12_DXIL_LIBRARY_DESC(data?: Partial<D3D12_DXIL_LIBRARY_DESC>): Uint8Array {
  const buf = new Uint8Array(sizeofD3D12_DXIL_LIBRARY_DESC);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.DXILLibrary !== undefined) view.setBigUint64(0, data.DXILLibrary === null ? 0n : util.toBigInt(util.toPointer(data.DXILLibrary)), true);
  // 0x08: u32
  if (data?.NumExports !== undefined) view.setUint32(8, Number(data.NumExports), true);
  // 0x0c: pad4
  // 0x10: pointer
  if (data?.pExports !== undefined) view.setBigUint64(16, data.pExports === null ? 0n : util.toBigInt(util.toPointer(data.pExports)), true);
  return buf;
}

export class D3D12_DXIL_LIBRARY_DESCView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get DXILLibrary(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(0, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x08: u32
  get NumExports(): number {
    return this.view.getUint32(8, true);
  }

  // 0x0c: pad4

  // 0x10: pointer
  get pExports(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(16, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: pointer
  set DXILLibrary(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(0, util.toBigInt(util.toPointer(value)), true);
  }

  // 0x08: u32
  set NumExports(value: number) {
    this.view.setUint32(8, value, true);
  }

  // 0x0c: pad4

  // 0x10: pointer
  set pExports(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(16, util.toBigInt(util.toPointer(value)), true);
  }
}

/**
 * Windows.Win32.Graphics.Direct3D12.D3D12_EXISTING_COLLECTION_DESC (size: 24)
 */
export interface D3D12_EXISTING_COLLECTION_DESC {
  /** Windows.Win32.Graphics.Direct3D12.ID3D12StateObject */
  pExistingCollection: Uint8Array | Deno.PointerValue | null;
  /** u32 */
  NumExports: number;
  /** ptr */
  pExports: Deno.PointerValue | Uint8Array | null;
}

export const sizeofD3D12_EXISTING_COLLECTION_DESC = 24;

export function allocD3D12_EXISTING_COLLECTION_DESC(data?: Partial<D3D12_EXISTING_COLLECTION_DESC>): Uint8Array {
  const buf = new Uint8Array(sizeofD3D12_EXISTING_COLLECTION_DESC);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.pExistingCollection !== undefined) view.setBigUint64(0, data.pExistingCollection === null ? 0n : util.toBigInt(util.toPointer(data.pExistingCollection)), true);
  // 0x08: u32
  if (data?.NumExports !== undefined) view.setUint32(8, Number(data.NumExports), true);
  // 0x0c: pad4
  // 0x10: pointer
  if (data?.pExports !== undefined) view.setBigUint64(16, data.pExports === null ? 0n : util.toBigInt(util.toPointer(data.pExports)), true);
  return buf;
}

export class D3D12_EXISTING_COLLECTION_DESCView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get pExistingCollection(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(0, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x08: u32
  get NumExports(): number {
    return this.view.getUint32(8, true);
  }

  // 0x0c: pad4

  // 0x10: pointer
  get pExports(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(16, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: pointer
  set pExistingCollection(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(0, util.toBigInt(util.toPointer(value)), true);
  }

  // 0x08: u32
  set NumExports(value: number) {
    this.view.setUint32(8, value, true);
  }

  // 0x0c: pad4

  // 0x10: pointer
  set pExports(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(16, util.toBigInt(util.toPointer(value)), true);
  }
}

/**
 * Windows.Win32.Graphics.Direct3D12.D3D12_SUBOBJECT_TO_EXPORTS_ASSOCIATION (size: 24)
 */
export interface D3D12_SUBOBJECT_TO_EXPORTS_ASSOCIATION {
  /** ptr */
  pSubobjectToAssociate: Deno.PointerValue | Uint8Array | null;
  /** u32 */
  NumExports: number;
  /** ptr */
  pExports: Deno.PointerValue | Uint8Array | null;
}

export const sizeofD3D12_SUBOBJECT_TO_EXPORTS_ASSOCIATION = 24;

export function allocD3D12_SUBOBJECT_TO_EXPORTS_ASSOCIATION(data?: Partial<D3D12_SUBOBJECT_TO_EXPORTS_ASSOCIATION>): Uint8Array {
  const buf = new Uint8Array(sizeofD3D12_SUBOBJECT_TO_EXPORTS_ASSOCIATION);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.pSubobjectToAssociate !== undefined) view.setBigUint64(0, data.pSubobjectToAssociate === null ? 0n : util.toBigInt(util.toPointer(data.pSubobjectToAssociate)), true);
  // 0x08: u32
  if (data?.NumExports !== undefined) view.setUint32(8, Number(data.NumExports), true);
  // 0x0c: pad4
  // 0x10: pointer
  if (data?.pExports !== undefined) view.setBigUint64(16, data.pExports === null ? 0n : util.toBigInt(util.toPointer(data.pExports)), true);
  return buf;
}

export class D3D12_SUBOBJECT_TO_EXPORTS_ASSOCIATIONView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get pSubobjectToAssociate(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(0, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x08: u32
  get NumExports(): number {
    return this.view.getUint32(8, true);
  }

  // 0x0c: pad4

  // 0x10: pointer
  get pExports(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(16, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: pointer
  set pSubobjectToAssociate(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(0, util.toBigInt(util.toPointer(value)), true);
  }

  // 0x08: u32
  set NumExports(value: number) {
    this.view.setUint32(8, value, true);
  }

  // 0x0c: pad4

  // 0x10: pointer
  set pExports(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(16, util.toBigInt(util.toPointer(value)), true);
  }
}

/**
 * Windows.Win32.Graphics.Direct3D12.D3D12_DXIL_SUBOBJECT_TO_EXPORTS_ASSOCIATION (size: 24)
 */
export interface D3D12_DXIL_SUBOBJECT_TO_EXPORTS_ASSOCIATION {
  /** Windows.Win32.Foundation.PWSTR */
  SubobjectToAssociate: string | null | Uint8Array | Uint16Array;
  /** u32 */
  NumExports: number;
  /** ptr */
  pExports: Deno.PointerValue | Uint8Array | null;
}

export const sizeofD3D12_DXIL_SUBOBJECT_TO_EXPORTS_ASSOCIATION = 24;

export function allocD3D12_DXIL_SUBOBJECT_TO_EXPORTS_ASSOCIATION(data?: Partial<D3D12_DXIL_SUBOBJECT_TO_EXPORTS_ASSOCIATION>): Uint8Array {
  const buf = new Uint8Array(sizeofD3D12_DXIL_SUBOBJECT_TO_EXPORTS_ASSOCIATION);
  const view = new DataView(buf.buffer);
  // 0x00: buffer
  if (data?.SubobjectToAssociate !== undefined) {
    (buf as any)._f0 = util.pwstrToFfi(data.SubobjectToAssociate);
    view.setBigUint64(0, (buf as any)._f0 === null ? 0n : util.toBigInt(Deno.UnsafePointer.of((buf as any)._f0)), true);
  }
  // 0x08: u32
  if (data?.NumExports !== undefined) view.setUint32(8, Number(data.NumExports), true);
  // 0x0c: pad4
  // 0x10: pointer
  if (data?.pExports !== undefined) view.setBigUint64(16, data.pExports === null ? 0n : util.toBigInt(util.toPointer(data.pExports)), true);
  return buf;
}

export class D3D12_DXIL_SUBOBJECT_TO_EXPORTS_ASSOCIATIONView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: buffer
  get SubobjectToAssociate(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(0, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x08: u32
  get NumExports(): number {
    return this.view.getUint32(8, true);
  }

  // 0x0c: pad4

  // 0x10: pointer
  get pExports(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(16, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: buffer
  set SubobjectToAssociate(value: Uint8Array | Deno.PointerValue | null) {
    (this.buf as any)._f0 = value;
    this.view.setBigUint64(0, util.toBigInt(util.toPointer((this.buf as any)._f0)), true);
  }

  // 0x08: u32
  set NumExports(value: number) {
    this.view.setUint32(8, value, true);
  }

  // 0x0c: pad4

  // 0x10: pointer
  set pExports(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(16, util.toBigInt(util.toPointer(value)), true);
  }
}

/**
 * Windows.Win32.Graphics.Direct3D12.D3D12_HIT_GROUP_DESC (size: 40)
 */
export interface D3D12_HIT_GROUP_DESC {
  /** Windows.Win32.Foundation.PWSTR */
  HitGroupExport: string | null | Uint8Array | Uint16Array;
  /** Windows.Win32.Graphics.Direct3D12.D3D12_HIT_GROUP_TYPE */
  Type: D3D12_HIT_GROUP_TYPE;
  /** Windows.Win32.Foundation.PWSTR */
  AnyHitShaderImport: string | null | Uint8Array | Uint16Array;
  /** Windows.Win32.Foundation.PWSTR */
  ClosestHitShaderImport: string | null | Uint8Array | Uint16Array;
  /** Windows.Win32.Foundation.PWSTR */
  IntersectionShaderImport: string | null | Uint8Array | Uint16Array;
}

export const sizeofD3D12_HIT_GROUP_DESC = 40;

export function allocD3D12_HIT_GROUP_DESC(data?: Partial<D3D12_HIT_GROUP_DESC>): Uint8Array {
  const buf = new Uint8Array(sizeofD3D12_HIT_GROUP_DESC);
  const view = new DataView(buf.buffer);
  // 0x00: buffer
  if (data?.HitGroupExport !== undefined) {
    (buf as any)._f0 = util.pwstrToFfi(data.HitGroupExport);
    view.setBigUint64(0, (buf as any)._f0 === null ? 0n : util.toBigInt(Deno.UnsafePointer.of((buf as any)._f0)), true);
  }
  // 0x08: i32
  if (data?.Type !== undefined) view.setInt32(8, Number(data.Type), true);
  // 0x0c: pad4
  // 0x10: buffer
  if (data?.AnyHitShaderImport !== undefined) {
    (buf as any)._f16 = util.pwstrToFfi(data.AnyHitShaderImport);
    view.setBigUint64(16, (buf as any)._f16 === null ? 0n : util.toBigInt(Deno.UnsafePointer.of((buf as any)._f16)), true);
  }
  // 0x18: buffer
  if (data?.ClosestHitShaderImport !== undefined) {
    (buf as any)._f24 = util.pwstrToFfi(data.ClosestHitShaderImport);
    view.setBigUint64(24, (buf as any)._f24 === null ? 0n : util.toBigInt(Deno.UnsafePointer.of((buf as any)._f24)), true);
  }
  // 0x20: buffer
  if (data?.IntersectionShaderImport !== undefined) {
    (buf as any)._f32 = util.pwstrToFfi(data.IntersectionShaderImport);
    view.setBigUint64(32, (buf as any)._f32 === null ? 0n : util.toBigInt(Deno.UnsafePointer.of((buf as any)._f32)), true);
  }
  return buf;
}

export class D3D12_HIT_GROUP_DESCView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: buffer
  get HitGroupExport(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(0, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x08: i32
  get Type(): number {
    return this.view.getInt32(8, true);
  }

  // 0x0c: pad4

  // 0x10: buffer
  get AnyHitShaderImport(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(16, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x18: buffer
  get ClosestHitShaderImport(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(24, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x20: buffer
  get IntersectionShaderImport(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(32, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: buffer
  set HitGroupExport(value: Uint8Array | Deno.PointerValue | null) {
    (this.buf as any)._f0 = value;
    this.view.setBigUint64(0, util.toBigInt(util.toPointer((this.buf as any)._f0)), true);
  }

  // 0x08: i32
  set Type(value: number) {
    this.view.setInt32(8, value, true);
  }

  // 0x0c: pad4

  // 0x10: buffer
  set AnyHitShaderImport(value: Uint8Array | Deno.PointerValue | null) {
    (this.buf as any)._f16 = value;
    this.view.setBigUint64(16, util.toBigInt(util.toPointer((this.buf as any)._f16)), true);
  }

  // 0x18: buffer
  set ClosestHitShaderImport(value: Uint8Array | Deno.PointerValue | null) {
    (this.buf as any)._f24 = value;
    this.view.setBigUint64(24, util.toBigInt(util.toPointer((this.buf as any)._f24)), true);
  }

  // 0x20: buffer
  set IntersectionShaderImport(value: Uint8Array | Deno.PointerValue | null) {
    (this.buf as any)._f32 = value;
    this.view.setBigUint64(32, util.toBigInt(util.toPointer((this.buf as any)._f32)), true);
  }
}

/**
 * Windows.Win32.Graphics.Direct3D12.D3D12_RAYTRACING_SHADER_CONFIG (size: 8)
 */
export interface D3D12_RAYTRACING_SHADER_CONFIG {
  /** u32 */
  MaxPayloadSizeInBytes: number;
  /** u32 */
  MaxAttributeSizeInBytes: number;
}

export const sizeofD3D12_RAYTRACING_SHADER_CONFIG = 8;

export function allocD3D12_RAYTRACING_SHADER_CONFIG(data?: Partial<D3D12_RAYTRACING_SHADER_CONFIG>): Uint8Array {
  const buf = new Uint8Array(sizeofD3D12_RAYTRACING_SHADER_CONFIG);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.MaxPayloadSizeInBytes !== undefined) view.setUint32(0, Number(data.MaxPayloadSizeInBytes), true);
  // 0x04: u32
  if (data?.MaxAttributeSizeInBytes !== undefined) view.setUint32(4, Number(data.MaxAttributeSizeInBytes), true);
  return buf;
}

export class D3D12_RAYTRACING_SHADER_CONFIGView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get MaxPayloadSizeInBytes(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: u32
  get MaxAttributeSizeInBytes(): number {
    return this.view.getUint32(4, true);
  }

  // 0x00: u32
  set MaxPayloadSizeInBytes(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: u32
  set MaxAttributeSizeInBytes(value: number) {
    this.view.setUint32(4, value, true);
  }
}

/**
 * Windows.Win32.Graphics.Direct3D12.D3D12_RAYTRACING_PIPELINE_CONFIG (size: 8)
 */
export interface D3D12_RAYTRACING_PIPELINE_CONFIG {
  /** u32 */
  MaxTraceRecursionDepth: number;
}

export const sizeofD3D12_RAYTRACING_PIPELINE_CONFIG = 8;

export function allocD3D12_RAYTRACING_PIPELINE_CONFIG(data?: Partial<D3D12_RAYTRACING_PIPELINE_CONFIG>): Uint8Array {
  const buf = new Uint8Array(sizeofD3D12_RAYTRACING_PIPELINE_CONFIG);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.MaxTraceRecursionDepth !== undefined) view.setUint32(0, Number(data.MaxTraceRecursionDepth), true);
  // 0x04: pad4
  return buf;
}

export class D3D12_RAYTRACING_PIPELINE_CONFIGView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get MaxTraceRecursionDepth(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: pad4

  // 0x00: u32
  set MaxTraceRecursionDepth(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: pad4
}

/**
 * Windows.Win32.Graphics.Direct3D12.D3D12_RAYTRACING_PIPELINE_CONFIG1 (size: 8)
 */
export interface D3D12_RAYTRACING_PIPELINE_CONFIG1 {
  /** u32 */
  MaxTraceRecursionDepth: number;
  /** Windows.Win32.Graphics.Direct3D12.D3D12_RAYTRACING_PIPELINE_FLAGS */
  Flags: D3D12_RAYTRACING_PIPELINE_FLAGS;
}

export const sizeofD3D12_RAYTRACING_PIPELINE_CONFIG1 = 8;

export function allocD3D12_RAYTRACING_PIPELINE_CONFIG1(data?: Partial<D3D12_RAYTRACING_PIPELINE_CONFIG1>): Uint8Array {
  const buf = new Uint8Array(sizeofD3D12_RAYTRACING_PIPELINE_CONFIG1);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.MaxTraceRecursionDepth !== undefined) view.setUint32(0, Number(data.MaxTraceRecursionDepth), true);
  // 0x04: u32
  if (data?.Flags !== undefined) view.setUint32(4, Number(data.Flags), true);
  return buf;
}

export class D3D12_RAYTRACING_PIPELINE_CONFIG1View {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get MaxTraceRecursionDepth(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: u32
  get Flags(): number {
    return this.view.getUint32(4, true);
  }

  // 0x00: u32
  set MaxTraceRecursionDepth(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: u32
  set Flags(value: number) {
    this.view.setUint32(4, value, true);
  }
}

/**
 * Windows.Win32.Graphics.Direct3D12.D3D12_STATE_OBJECT_DESC (size: 16)
 */
export interface D3D12_STATE_OBJECT_DESC {
  /** Windows.Win32.Graphics.Direct3D12.D3D12_STATE_OBJECT_TYPE */
  Type: D3D12_STATE_OBJECT_TYPE;
  /** u32 */
  NumSubobjects: number;
  /** ptr */
  pSubobjects: Deno.PointerValue | Uint8Array | null;
}

export const sizeofD3D12_STATE_OBJECT_DESC = 16;

export function allocD3D12_STATE_OBJECT_DESC(data?: Partial<D3D12_STATE_OBJECT_DESC>): Uint8Array {
  const buf = new Uint8Array(sizeofD3D12_STATE_OBJECT_DESC);
  const view = new DataView(buf.buffer);
  // 0x00: i32
  if (data?.Type !== undefined) view.setInt32(0, Number(data.Type), true);
  // 0x04: u32
  if (data?.NumSubobjects !== undefined) view.setUint32(4, Number(data.NumSubobjects), true);
  // 0x08: pointer
  if (data?.pSubobjects !== undefined) view.setBigUint64(8, data.pSubobjects === null ? 0n : util.toBigInt(util.toPointer(data.pSubobjects)), true);
  return buf;
}

export class D3D12_STATE_OBJECT_DESCView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: i32
  get Type(): number {
    return this.view.getInt32(0, true);
  }

  // 0x04: u32
  get NumSubobjects(): number {
    return this.view.getUint32(4, true);
  }

  // 0x08: pointer
  get pSubobjects(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(8, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: i32
  set Type(value: number) {
    this.view.setInt32(0, value, true);
  }

  // 0x04: u32
  set NumSubobjects(value: number) {
    this.view.setUint32(4, value, true);
  }

  // 0x08: pointer
  set pSubobjects(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(8, util.toBigInt(util.toPointer(value)), true);
  }
}

/**
 * Windows.Win32.Graphics.Direct3D12.D3D12_GPU_VIRTUAL_ADDRESS_AND_STRIDE (size: 16)
 */
export interface D3D12_GPU_VIRTUAL_ADDRESS_AND_STRIDE {
  /** u64 */
  StartAddress: number | bigint;
  /** u64 */
  StrideInBytes: number | bigint;
}

export const sizeofD3D12_GPU_VIRTUAL_ADDRESS_AND_STRIDE = 16;

export function allocD3D12_GPU_VIRTUAL_ADDRESS_AND_STRIDE(data?: Partial<D3D12_GPU_VIRTUAL_ADDRESS_AND_STRIDE>): Uint8Array {
  const buf = new Uint8Array(sizeofD3D12_GPU_VIRTUAL_ADDRESS_AND_STRIDE);
  const view = new DataView(buf.buffer);
  // 0x00: u64
  if (data?.StartAddress !== undefined) view.setBigUint64(0, util.toBigInt(data.StartAddress), true);
  // 0x08: u64
  if (data?.StrideInBytes !== undefined) view.setBigUint64(8, util.toBigInt(data.StrideInBytes), true);
  return buf;
}

export class D3D12_GPU_VIRTUAL_ADDRESS_AND_STRIDEView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u64
  get StartAddress(): number | bigint {
    return this.view.getBigUint64(0, true);
  }

  // 0x08: u64
  get StrideInBytes(): number | bigint {
    return this.view.getBigUint64(8, true);
  }

  // 0x00: u64
  set StartAddress(value: number | bigint) {
    this.view.setBigUint64(0, util.toBigInt(value), true);
  }

  // 0x08: u64
  set StrideInBytes(value: number | bigint) {
    this.view.setBigUint64(8, util.toBigInt(value), true);
  }
}

/**
 * Windows.Win32.Graphics.Direct3D12.D3D12_GPU_VIRTUAL_ADDRESS_RANGE (size: 16)
 */
export interface D3D12_GPU_VIRTUAL_ADDRESS_RANGE {
  /** u64 */
  StartAddress: number | bigint;
  /** u64 */
  SizeInBytes: number | bigint;
}

export const sizeofD3D12_GPU_VIRTUAL_ADDRESS_RANGE = 16;

export function allocD3D12_GPU_VIRTUAL_ADDRESS_RANGE(data?: Partial<D3D12_GPU_VIRTUAL_ADDRESS_RANGE>): Uint8Array {
  const buf = new Uint8Array(sizeofD3D12_GPU_VIRTUAL_ADDRESS_RANGE);
  const view = new DataView(buf.buffer);
  // 0x00: u64
  if (data?.StartAddress !== undefined) view.setBigUint64(0, util.toBigInt(data.StartAddress), true);
  // 0x08: u64
  if (data?.SizeInBytes !== undefined) view.setBigUint64(8, util.toBigInt(data.SizeInBytes), true);
  return buf;
}

export class D3D12_GPU_VIRTUAL_ADDRESS_RANGEView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u64
  get StartAddress(): number | bigint {
    return this.view.getBigUint64(0, true);
  }

  // 0x08: u64
  get SizeInBytes(): number | bigint {
    return this.view.getBigUint64(8, true);
  }

  // 0x00: u64
  set StartAddress(value: number | bigint) {
    this.view.setBigUint64(0, util.toBigInt(value), true);
  }

  // 0x08: u64
  set SizeInBytes(value: number | bigint) {
    this.view.setBigUint64(8, util.toBigInt(value), true);
  }
}

/**
 * Windows.Win32.Graphics.Direct3D12.D3D12_GPU_VIRTUAL_ADDRESS_RANGE_AND_STRIDE (size: 24)
 */
export interface D3D12_GPU_VIRTUAL_ADDRESS_RANGE_AND_STRIDE {
  /** u64 */
  StartAddress: number | bigint;
  /** u64 */
  SizeInBytes: number | bigint;
  /** u64 */
  StrideInBytes: number | bigint;
}

export const sizeofD3D12_GPU_VIRTUAL_ADDRESS_RANGE_AND_STRIDE = 24;

export function allocD3D12_GPU_VIRTUAL_ADDRESS_RANGE_AND_STRIDE(data?: Partial<D3D12_GPU_VIRTUAL_ADDRESS_RANGE_AND_STRIDE>): Uint8Array {
  const buf = new Uint8Array(sizeofD3D12_GPU_VIRTUAL_ADDRESS_RANGE_AND_STRIDE);
  const view = new DataView(buf.buffer);
  // 0x00: u64
  if (data?.StartAddress !== undefined) view.setBigUint64(0, util.toBigInt(data.StartAddress), true);
  // 0x08: u64
  if (data?.SizeInBytes !== undefined) view.setBigUint64(8, util.toBigInt(data.SizeInBytes), true);
  // 0x10: u64
  if (data?.StrideInBytes !== undefined) view.setBigUint64(16, util.toBigInt(data.StrideInBytes), true);
  return buf;
}

export class D3D12_GPU_VIRTUAL_ADDRESS_RANGE_AND_STRIDEView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u64
  get StartAddress(): number | bigint {
    return this.view.getBigUint64(0, true);
  }

  // 0x08: u64
  get SizeInBytes(): number | bigint {
    return this.view.getBigUint64(8, true);
  }

  // 0x10: u64
  get StrideInBytes(): number | bigint {
    return this.view.getBigUint64(16, true);
  }

  // 0x00: u64
  set StartAddress(value: number | bigint) {
    this.view.setBigUint64(0, util.toBigInt(value), true);
  }

  // 0x08: u64
  set SizeInBytes(value: number | bigint) {
    this.view.setBigUint64(8, util.toBigInt(value), true);
  }

  // 0x10: u64
  set StrideInBytes(value: number | bigint) {
    this.view.setBigUint64(16, util.toBigInt(value), true);
  }
}

/**
 * Windows.Win32.Graphics.Direct3D12.D3D12_RAYTRACING_GEOMETRY_TRIANGLES_DESC (size: 40)
 */
export interface D3D12_RAYTRACING_GEOMETRY_TRIANGLES_DESC {
  /** u64 */
  Transform3x4: number | bigint;
  /** Windows.Win32.Graphics.Dxgi.Common.DXGI_FORMAT */
  IndexFormat: DXGI_FORMAT;
  /** Windows.Win32.Graphics.Dxgi.Common.DXGI_FORMAT */
  VertexFormat: DXGI_FORMAT;
  /** u32 */
  IndexCount: number;
  /** u32 */
  VertexCount: number;
  /** u64 */
  IndexBuffer: number | bigint;
  /** Windows.Win32.Graphics.Direct3D12.D3D12_GPU_VIRTUAL_ADDRESS_AND_STRIDE */
  VertexBuffer: Uint8Array | Deno.PointerValue | null;
}

export const sizeofD3D12_RAYTRACING_GEOMETRY_TRIANGLES_DESC = 40;

export function allocD3D12_RAYTRACING_GEOMETRY_TRIANGLES_DESC(data?: Partial<D3D12_RAYTRACING_GEOMETRY_TRIANGLES_DESC>): Uint8Array {
  const buf = new Uint8Array(sizeofD3D12_RAYTRACING_GEOMETRY_TRIANGLES_DESC);
  const view = new DataView(buf.buffer);
  // 0x00: u64
  if (data?.Transform3x4 !== undefined) view.setBigUint64(0, util.toBigInt(data.Transform3x4), true);
  // 0x08: u32
  if (data?.IndexFormat !== undefined) view.setUint32(8, Number(data.IndexFormat), true);
  // 0x0c: u32
  if (data?.VertexFormat !== undefined) view.setUint32(12, Number(data.VertexFormat), true);
  // 0x10: u32
  if (data?.IndexCount !== undefined) view.setUint32(16, Number(data.IndexCount), true);
  // 0x14: u32
  if (data?.VertexCount !== undefined) view.setUint32(20, Number(data.VertexCount), true);
  // 0x18: u64
  if (data?.IndexBuffer !== undefined) view.setBigUint64(24, util.toBigInt(data.IndexBuffer), true);
  // 0x20: pointer
  if (data?.VertexBuffer !== undefined) view.setBigUint64(32, data.VertexBuffer === null ? 0n : util.toBigInt(util.toPointer(data.VertexBuffer)), true);
  return buf;
}

export class D3D12_RAYTRACING_GEOMETRY_TRIANGLES_DESCView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u64
  get Transform3x4(): number | bigint {
    return this.view.getBigUint64(0, true);
  }

  // 0x08: u32
  get IndexFormat(): number {
    return this.view.getUint32(8, true);
  }

  // 0x0c: u32
  get VertexFormat(): number {
    return this.view.getUint32(12, true);
  }

  // 0x10: u32
  get IndexCount(): number {
    return this.view.getUint32(16, true);
  }

  // 0x14: u32
  get VertexCount(): number {
    return this.view.getUint32(20, true);
  }

  // 0x18: u64
  get IndexBuffer(): number | bigint {
    return this.view.getBigUint64(24, true);
  }

  // 0x20: pointer
  get VertexBuffer(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(32, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: u64
  set Transform3x4(value: number | bigint) {
    this.view.setBigUint64(0, util.toBigInt(value), true);
  }

  // 0x08: u32
  set IndexFormat(value: number) {
    this.view.setUint32(8, value, true);
  }

  // 0x0c: u32
  set VertexFormat(value: number) {
    this.view.setUint32(12, value, true);
  }

  // 0x10: u32
  set IndexCount(value: number) {
    this.view.setUint32(16, value, true);
  }

  // 0x14: u32
  set VertexCount(value: number) {
    this.view.setUint32(20, value, true);
  }

  // 0x18: u64
  set IndexBuffer(value: number | bigint) {
    this.view.setBigUint64(24, util.toBigInt(value), true);
  }

  // 0x20: pointer
  set VertexBuffer(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(32, util.toBigInt(util.toPointer(value)), true);
  }
}

/**
 * Windows.Win32.Graphics.Direct3D12.D3D12_RAYTRACING_AABB (size: 24)
 */
export interface D3D12_RAYTRACING_AABB {
  /** f32 */
  MinX: number;
  /** f32 */
  MinY: number;
  /** f32 */
  MinZ: number;
  /** f32 */
  MaxX: number;
  /** f32 */
  MaxY: number;
  /** f32 */
  MaxZ: number;
}

export const sizeofD3D12_RAYTRACING_AABB = 24;

export function allocD3D12_RAYTRACING_AABB(data?: Partial<D3D12_RAYTRACING_AABB>): Uint8Array {
  const buf = new Uint8Array(sizeofD3D12_RAYTRACING_AABB);
  const view = new DataView(buf.buffer);
  // 0x00: f32
  if (data?.MinX !== undefined) view.setFloat32(0, Number(data.MinX), true);
  // 0x04: f32
  if (data?.MinY !== undefined) view.setFloat32(4, Number(data.MinY), true);
  // 0x08: f32
  if (data?.MinZ !== undefined) view.setFloat32(8, Number(data.MinZ), true);
  // 0x0c: f32
  if (data?.MaxX !== undefined) view.setFloat32(12, Number(data.MaxX), true);
  // 0x10: f32
  if (data?.MaxY !== undefined) view.setFloat32(16, Number(data.MaxY), true);
  // 0x14: f32
  if (data?.MaxZ !== undefined) view.setFloat32(20, Number(data.MaxZ), true);
  return buf;
}

export class D3D12_RAYTRACING_AABBView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: f32
  get MinX(): number {
    return this.view.getFloat32(0, true);
  }

  // 0x04: f32
  get MinY(): number {
    return this.view.getFloat32(4, true);
  }

  // 0x08: f32
  get MinZ(): number {
    return this.view.getFloat32(8, true);
  }

  // 0x0c: f32
  get MaxX(): number {
    return this.view.getFloat32(12, true);
  }

  // 0x10: f32
  get MaxY(): number {
    return this.view.getFloat32(16, true);
  }

  // 0x14: f32
  get MaxZ(): number {
    return this.view.getFloat32(20, true);
  }

  // 0x00: f32
  set MinX(value: number) {
    this.view.setFloat32(0, value, true);
  }

  // 0x04: f32
  set MinY(value: number) {
    this.view.setFloat32(4, value, true);
  }

  // 0x08: f32
  set MinZ(value: number) {
    this.view.setFloat32(8, value, true);
  }

  // 0x0c: f32
  set MaxX(value: number) {
    this.view.setFloat32(12, value, true);
  }

  // 0x10: f32
  set MaxY(value: number) {
    this.view.setFloat32(16, value, true);
  }

  // 0x14: f32
  set MaxZ(value: number) {
    this.view.setFloat32(20, value, true);
  }
}

/**
 * Windows.Win32.Graphics.Direct3D12.D3D12_RAYTRACING_GEOMETRY_AABBS_DESC (size: 16)
 */
export interface D3D12_RAYTRACING_GEOMETRY_AABBS_DESC {
  /** u64 */
  AABBCount: number | bigint;
  /** Windows.Win32.Graphics.Direct3D12.D3D12_GPU_VIRTUAL_ADDRESS_AND_STRIDE */
  AABBs: Uint8Array | Deno.PointerValue | null;
}

export const sizeofD3D12_RAYTRACING_GEOMETRY_AABBS_DESC = 16;

export function allocD3D12_RAYTRACING_GEOMETRY_AABBS_DESC(data?: Partial<D3D12_RAYTRACING_GEOMETRY_AABBS_DESC>): Uint8Array {
  const buf = new Uint8Array(sizeofD3D12_RAYTRACING_GEOMETRY_AABBS_DESC);
  const view = new DataView(buf.buffer);
  // 0x00: u64
  if (data?.AABBCount !== undefined) view.setBigUint64(0, util.toBigInt(data.AABBCount), true);
  // 0x08: pointer
  if (data?.AABBs !== undefined) view.setBigUint64(8, data.AABBs === null ? 0n : util.toBigInt(util.toPointer(data.AABBs)), true);
  return buf;
}

export class D3D12_RAYTRACING_GEOMETRY_AABBS_DESCView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u64
  get AABBCount(): number | bigint {
    return this.view.getBigUint64(0, true);
  }

  // 0x08: pointer
  get AABBs(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(8, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: u64
  set AABBCount(value: number | bigint) {
    this.view.setBigUint64(0, util.toBigInt(value), true);
  }

  // 0x08: pointer
  set AABBs(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(8, util.toBigInt(util.toPointer(value)), true);
  }
}

/**
 * Windows.Win32.Graphics.Direct3D12.D3D12_RAYTRACING_ACCELERATION_STRUCTURE_POSTBUILD_INFO_DESC (size: 16)
 */
export interface D3D12_RAYTRACING_ACCELERATION_STRUCTURE_POSTBUILD_INFO_DESC {
  /** u64 */
  DestBuffer: number | bigint;
  /** Windows.Win32.Graphics.Direct3D12.D3D12_RAYTRACING_ACCELERATION_STRUCTURE_POSTBUILD_INFO_TYPE */
  InfoType: D3D12_RAYTRACING_ACCELERATION_STRUCTURE_POSTBUILD_INFO_TYPE;
}

export const sizeofD3D12_RAYTRACING_ACCELERATION_STRUCTURE_POSTBUILD_INFO_DESC = 16;

export function allocD3D12_RAYTRACING_ACCELERATION_STRUCTURE_POSTBUILD_INFO_DESC(data?: Partial<D3D12_RAYTRACING_ACCELERATION_STRUCTURE_POSTBUILD_INFO_DESC>): Uint8Array {
  const buf = new Uint8Array(sizeofD3D12_RAYTRACING_ACCELERATION_STRUCTURE_POSTBUILD_INFO_DESC);
  const view = new DataView(buf.buffer);
  // 0x00: u64
  if (data?.DestBuffer !== undefined) view.setBigUint64(0, util.toBigInt(data.DestBuffer), true);
  // 0x08: i32
  if (data?.InfoType !== undefined) view.setInt32(8, Number(data.InfoType), true);
  // 0x0c: pad4
  return buf;
}

export class D3D12_RAYTRACING_ACCELERATION_STRUCTURE_POSTBUILD_INFO_DESCView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u64
  get DestBuffer(): number | bigint {
    return this.view.getBigUint64(0, true);
  }

  // 0x08: i32
  get InfoType(): number {
    return this.view.getInt32(8, true);
  }

  // 0x0c: pad4

  // 0x00: u64
  set DestBuffer(value: number | bigint) {
    this.view.setBigUint64(0, util.toBigInt(value), true);
  }

  // 0x08: i32
  set InfoType(value: number) {
    this.view.setInt32(8, value, true);
  }

  // 0x0c: pad4
}

/**
 * Windows.Win32.Graphics.Direct3D12.D3D12_RAYTRACING_ACCELERATION_STRUCTURE_POSTBUILD_INFO_COMPACTED_SIZE_DESC (size: 8)
 */
export interface D3D12_RAYTRACING_ACCELERATION_STRUCTURE_POSTBUILD_INFO_COMPACTED_SIZE_DESC {
  /** u64 */
  CompactedSizeInBytes: number | bigint;
}

export const sizeofD3D12_RAYTRACING_ACCELERATION_STRUCTURE_POSTBUILD_INFO_COMPACTED_SIZE_DESC = 8;

export function allocD3D12_RAYTRACING_ACCELERATION_STRUCTURE_POSTBUILD_INFO_COMPACTED_SIZE_DESC(data?: Partial<D3D12_RAYTRACING_ACCELERATION_STRUCTURE_POSTBUILD_INFO_COMPACTED_SIZE_DESC>): Uint8Array {
  const buf = new Uint8Array(sizeofD3D12_RAYTRACING_ACCELERATION_STRUCTURE_POSTBUILD_INFO_COMPACTED_SIZE_DESC);
  const view = new DataView(buf.buffer);
  // 0x00: u64
  if (data?.CompactedSizeInBytes !== undefined) view.setBigUint64(0, util.toBigInt(data.CompactedSizeInBytes), true);
  return buf;
}

export class D3D12_RAYTRACING_ACCELERATION_STRUCTURE_POSTBUILD_INFO_COMPACTED_SIZE_DESCView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u64
  get CompactedSizeInBytes(): number | bigint {
    return this.view.getBigUint64(0, true);
  }

  // 0x00: u64
  set CompactedSizeInBytes(value: number | bigint) {
    this.view.setBigUint64(0, util.toBigInt(value), true);
  }
}

/**
 * Windows.Win32.Graphics.Direct3D12.D3D12_RAYTRACING_ACCELERATION_STRUCTURE_POSTBUILD_INFO_TOOLS_VISUALIZATION_DESC (size: 8)
 */
export interface D3D12_RAYTRACING_ACCELERATION_STRUCTURE_POSTBUILD_INFO_TOOLS_VISUALIZATION_DESC {
  /** u64 */
  DecodedSizeInBytes: number | bigint;
}

export const sizeofD3D12_RAYTRACING_ACCELERATION_STRUCTURE_POSTBUILD_INFO_TOOLS_VISUALIZATION_DESC = 8;

export function allocD3D12_RAYTRACING_ACCELERATION_STRUCTURE_POSTBUILD_INFO_TOOLS_VISUALIZATION_DESC(data?: Partial<D3D12_RAYTRACING_ACCELERATION_STRUCTURE_POSTBUILD_INFO_TOOLS_VISUALIZATION_DESC>): Uint8Array {
  const buf = new Uint8Array(sizeofD3D12_RAYTRACING_ACCELERATION_STRUCTURE_POSTBUILD_INFO_TOOLS_VISUALIZATION_DESC);
  const view = new DataView(buf.buffer);
  // 0x00: u64
  if (data?.DecodedSizeInBytes !== undefined) view.setBigUint64(0, util.toBigInt(data.DecodedSizeInBytes), true);
  return buf;
}

export class D3D12_RAYTRACING_ACCELERATION_STRUCTURE_POSTBUILD_INFO_TOOLS_VISUALIZATION_DESCView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u64
  get DecodedSizeInBytes(): number | bigint {
    return this.view.getBigUint64(0, true);
  }

  // 0x00: u64
  set DecodedSizeInBytes(value: number | bigint) {
    this.view.setBigUint64(0, util.toBigInt(value), true);
  }
}

/**
 * Windows.Win32.Graphics.Direct3D12.D3D12_BUILD_RAYTRACING_ACCELERATION_STRUCTURE_TOOLS_VISUALIZATION_HEADER (size: 8)
 */
export interface D3D12_BUILD_RAYTRACING_ACCELERATION_STRUCTURE_TOOLS_VISUALIZATION_HEADER {
  /** Windows.Win32.Graphics.Direct3D12.D3D12_RAYTRACING_ACCELERATION_STRUCTURE_TYPE */
  Type: D3D12_RAYTRACING_ACCELERATION_STRUCTURE_TYPE;
  /** u32 */
  NumDescs: number;
}

export const sizeofD3D12_BUILD_RAYTRACING_ACCELERATION_STRUCTURE_TOOLS_VISUALIZATION_HEADER = 8;

export function allocD3D12_BUILD_RAYTRACING_ACCELERATION_STRUCTURE_TOOLS_VISUALIZATION_HEADER(data?: Partial<D3D12_BUILD_RAYTRACING_ACCELERATION_STRUCTURE_TOOLS_VISUALIZATION_HEADER>): Uint8Array {
  const buf = new Uint8Array(sizeofD3D12_BUILD_RAYTRACING_ACCELERATION_STRUCTURE_TOOLS_VISUALIZATION_HEADER);
  const view = new DataView(buf.buffer);
  // 0x00: i32
  if (data?.Type !== undefined) view.setInt32(0, Number(data.Type), true);
  // 0x04: u32
  if (data?.NumDescs !== undefined) view.setUint32(4, Number(data.NumDescs), true);
  return buf;
}

export class D3D12_BUILD_RAYTRACING_ACCELERATION_STRUCTURE_TOOLS_VISUALIZATION_HEADERView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: i32
  get Type(): number {
    return this.view.getInt32(0, true);
  }

  // 0x04: u32
  get NumDescs(): number {
    return this.view.getUint32(4, true);
  }

  // 0x00: i32
  set Type(value: number) {
    this.view.setInt32(0, value, true);
  }

  // 0x04: u32
  set NumDescs(value: number) {
    this.view.setUint32(4, value, true);
  }
}

/**
 * Windows.Win32.Graphics.Direct3D12.D3D12_RAYTRACING_ACCELERATION_STRUCTURE_POSTBUILD_INFO_SERIALIZATION_DESC (size: 16)
 */
export interface D3D12_RAYTRACING_ACCELERATION_STRUCTURE_POSTBUILD_INFO_SERIALIZATION_DESC {
  /** u64 */
  SerializedSizeInBytes: number | bigint;
  /** u64 */
  NumBottomLevelAccelerationStructurePointers: number | bigint;
}

export const sizeofD3D12_RAYTRACING_ACCELERATION_STRUCTURE_POSTBUILD_INFO_SERIALIZATION_DESC = 16;

export function allocD3D12_RAYTRACING_ACCELERATION_STRUCTURE_POSTBUILD_INFO_SERIALIZATION_DESC(data?: Partial<D3D12_RAYTRACING_ACCELERATION_STRUCTURE_POSTBUILD_INFO_SERIALIZATION_DESC>): Uint8Array {
  const buf = new Uint8Array(sizeofD3D12_RAYTRACING_ACCELERATION_STRUCTURE_POSTBUILD_INFO_SERIALIZATION_DESC);
  const view = new DataView(buf.buffer);
  // 0x00: u64
  if (data?.SerializedSizeInBytes !== undefined) view.setBigUint64(0, util.toBigInt(data.SerializedSizeInBytes), true);
  // 0x08: u64
  if (data?.NumBottomLevelAccelerationStructurePointers !== undefined) view.setBigUint64(8, util.toBigInt(data.NumBottomLevelAccelerationStructurePointers), true);
  return buf;
}

export class D3D12_RAYTRACING_ACCELERATION_STRUCTURE_POSTBUILD_INFO_SERIALIZATION_DESCView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u64
  get SerializedSizeInBytes(): number | bigint {
    return this.view.getBigUint64(0, true);
  }

  // 0x08: u64
  get NumBottomLevelAccelerationStructurePointers(): number | bigint {
    return this.view.getBigUint64(8, true);
  }

  // 0x00: u64
  set SerializedSizeInBytes(value: number | bigint) {
    this.view.setBigUint64(0, util.toBigInt(value), true);
  }

  // 0x08: u64
  set NumBottomLevelAccelerationStructurePointers(value: number | bigint) {
    this.view.setBigUint64(8, util.toBigInt(value), true);
  }
}

/**
 * Windows.Win32.Graphics.Direct3D12.D3D12_SERIALIZED_DATA_DRIVER_MATCHING_IDENTIFIER (size: 16)
 */
export interface D3D12_SERIALIZED_DATA_DRIVER_MATCHING_IDENTIFIER {
  /** System.Guid */
  DriverOpaqueGUID: Uint8Array | Deno.PointerValue | null;
  /** array */
  DriverOpaqueVersioningData: Deno.PointerValue | null;
}

export const sizeofD3D12_SERIALIZED_DATA_DRIVER_MATCHING_IDENTIFIER = 16;

export function allocD3D12_SERIALIZED_DATA_DRIVER_MATCHING_IDENTIFIER(data?: Partial<D3D12_SERIALIZED_DATA_DRIVER_MATCHING_IDENTIFIER>): Uint8Array {
  const buf = new Uint8Array(sizeofD3D12_SERIALIZED_DATA_DRIVER_MATCHING_IDENTIFIER);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.DriverOpaqueGUID !== undefined) view.setBigUint64(0, data.DriverOpaqueGUID === null ? 0n : util.toBigInt(util.toPointer(data.DriverOpaqueGUID)), true);
  // 0x08: pointer
  if (data?.DriverOpaqueVersioningData !== undefined) view.setBigUint64(8, data.DriverOpaqueVersioningData === null ? 0n : util.toBigInt(util.toPointer(data.DriverOpaqueVersioningData)), true);
  return buf;
}

export class D3D12_SERIALIZED_DATA_DRIVER_MATCHING_IDENTIFIERView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get DriverOpaqueGUID(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(0, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x08: pointer
  get DriverOpaqueVersioningData(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(8, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: pointer
  set DriverOpaqueGUID(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(0, util.toBigInt(util.toPointer(value)), true);
  }

  // 0x08: pointer
  set DriverOpaqueVersioningData(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(8, util.toBigInt(util.toPointer(value)), true);
  }
}

/**
 * Windows.Win32.Graphics.Direct3D12.D3D12_SERIALIZED_RAYTRACING_ACCELERATION_STRUCTURE_HEADER (size: 32)
 */
export interface D3D12_SERIALIZED_RAYTRACING_ACCELERATION_STRUCTURE_HEADER {
  /** Windows.Win32.Graphics.Direct3D12.D3D12_SERIALIZED_DATA_DRIVER_MATCHING_IDENTIFIER */
  DriverMatchingIdentifier: Uint8Array | Deno.PointerValue | null;
  /** u64 */
  SerializedSizeInBytesIncludingHeader: number | bigint;
  /** u64 */
  DeserializedSizeInBytes: number | bigint;
  /** u64 */
  NumBottomLevelAccelerationStructurePointersAfterHeader: number | bigint;
}

export const sizeofD3D12_SERIALIZED_RAYTRACING_ACCELERATION_STRUCTURE_HEADER = 32;

export function allocD3D12_SERIALIZED_RAYTRACING_ACCELERATION_STRUCTURE_HEADER(data?: Partial<D3D12_SERIALIZED_RAYTRACING_ACCELERATION_STRUCTURE_HEADER>): Uint8Array {
  const buf = new Uint8Array(sizeofD3D12_SERIALIZED_RAYTRACING_ACCELERATION_STRUCTURE_HEADER);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.DriverMatchingIdentifier !== undefined) view.setBigUint64(0, data.DriverMatchingIdentifier === null ? 0n : util.toBigInt(util.toPointer(data.DriverMatchingIdentifier)), true);
  // 0x08: u64
  if (data?.SerializedSizeInBytesIncludingHeader !== undefined) view.setBigUint64(8, util.toBigInt(data.SerializedSizeInBytesIncludingHeader), true);
  // 0x10: u64
  if (data?.DeserializedSizeInBytes !== undefined) view.setBigUint64(16, util.toBigInt(data.DeserializedSizeInBytes), true);
  // 0x18: u64
  if (data?.NumBottomLevelAccelerationStructurePointersAfterHeader !== undefined) view.setBigUint64(24, util.toBigInt(data.NumBottomLevelAccelerationStructurePointersAfterHeader), true);
  return buf;
}

export class D3D12_SERIALIZED_RAYTRACING_ACCELERATION_STRUCTURE_HEADERView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get DriverMatchingIdentifier(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(0, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x08: u64
  get SerializedSizeInBytesIncludingHeader(): number | bigint {
    return this.view.getBigUint64(8, true);
  }

  // 0x10: u64
  get DeserializedSizeInBytes(): number | bigint {
    return this.view.getBigUint64(16, true);
  }

  // 0x18: u64
  get NumBottomLevelAccelerationStructurePointersAfterHeader(): number | bigint {
    return this.view.getBigUint64(24, true);
  }

  // 0x00: pointer
  set DriverMatchingIdentifier(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(0, util.toBigInt(util.toPointer(value)), true);
  }

  // 0x08: u64
  set SerializedSizeInBytesIncludingHeader(value: number | bigint) {
    this.view.setBigUint64(8, util.toBigInt(value), true);
  }

  // 0x10: u64
  set DeserializedSizeInBytes(value: number | bigint) {
    this.view.setBigUint64(16, util.toBigInt(value), true);
  }

  // 0x18: u64
  set NumBottomLevelAccelerationStructurePointersAfterHeader(value: number | bigint) {
    this.view.setBigUint64(24, util.toBigInt(value), true);
  }
}

/**
 * Windows.Win32.Graphics.Direct3D12.D3D12_RAYTRACING_ACCELERATION_STRUCTURE_POSTBUILD_INFO_CURRENT_SIZE_DESC (size: 8)
 */
export interface D3D12_RAYTRACING_ACCELERATION_STRUCTURE_POSTBUILD_INFO_CURRENT_SIZE_DESC {
  /** u64 */
  CurrentSizeInBytes: number | bigint;
}

export const sizeofD3D12_RAYTRACING_ACCELERATION_STRUCTURE_POSTBUILD_INFO_CURRENT_SIZE_DESC = 8;

export function allocD3D12_RAYTRACING_ACCELERATION_STRUCTURE_POSTBUILD_INFO_CURRENT_SIZE_DESC(data?: Partial<D3D12_RAYTRACING_ACCELERATION_STRUCTURE_POSTBUILD_INFO_CURRENT_SIZE_DESC>): Uint8Array {
  const buf = new Uint8Array(sizeofD3D12_RAYTRACING_ACCELERATION_STRUCTURE_POSTBUILD_INFO_CURRENT_SIZE_DESC);
  const view = new DataView(buf.buffer);
  // 0x00: u64
  if (data?.CurrentSizeInBytes !== undefined) view.setBigUint64(0, util.toBigInt(data.CurrentSizeInBytes), true);
  return buf;
}

export class D3D12_RAYTRACING_ACCELERATION_STRUCTURE_POSTBUILD_INFO_CURRENT_SIZE_DESCView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u64
  get CurrentSizeInBytes(): number | bigint {
    return this.view.getBigUint64(0, true);
  }

  // 0x00: u64
  set CurrentSizeInBytes(value: number | bigint) {
    this.view.setBigUint64(0, util.toBigInt(value), true);
  }
}

/**
 * Windows.Win32.Graphics.Direct3D12.D3D12_RAYTRACING_INSTANCE_DESC (size: 24)
 */
export interface D3D12_RAYTRACING_INSTANCE_DESC {
  /** array */
  Transform: Deno.PointerValue | null;
  /** u32 */
  _bitfield1: number;
  /** u32 */
  _bitfield2: number;
  /** u64 */
  AccelerationStructure: number | bigint;
}

export const sizeofD3D12_RAYTRACING_INSTANCE_DESC = 24;

export function allocD3D12_RAYTRACING_INSTANCE_DESC(data?: Partial<D3D12_RAYTRACING_INSTANCE_DESC>): Uint8Array {
  const buf = new Uint8Array(sizeofD3D12_RAYTRACING_INSTANCE_DESC);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.Transform !== undefined) view.setBigUint64(0, data.Transform === null ? 0n : util.toBigInt(util.toPointer(data.Transform)), true);
  // 0x08: u32
  if (data?._bitfield1 !== undefined) view.setUint32(8, Number(data._bitfield1), true);
  // 0x0c: u32
  if (data?._bitfield2 !== undefined) view.setUint32(12, Number(data._bitfield2), true);
  // 0x10: u64
  if (data?.AccelerationStructure !== undefined) view.setBigUint64(16, util.toBigInt(data.AccelerationStructure), true);
  return buf;
}

export class D3D12_RAYTRACING_INSTANCE_DESCView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get Transform(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(0, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x08: u32
  get _bitfield1(): number {
    return this.view.getUint32(8, true);
  }

  // 0x0c: u32
  get _bitfield2(): number {
    return this.view.getUint32(12, true);
  }

  // 0x10: u64
  get AccelerationStructure(): number | bigint {
    return this.view.getBigUint64(16, true);
  }

  // 0x00: pointer
  set Transform(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(0, util.toBigInt(util.toPointer(value)), true);
  }

  // 0x08: u32
  set _bitfield1(value: number) {
    this.view.setUint32(8, value, true);
  }

  // 0x0c: u32
  set _bitfield2(value: number) {
    this.view.setUint32(12, value, true);
  }

  // 0x10: u64
  set AccelerationStructure(value: number | bigint) {
    this.view.setBigUint64(16, util.toBigInt(value), true);
  }
}

/**
 * Windows.Win32.Graphics.Direct3D12.D3D12_RAYTRACING_GEOMETRY_DESC (size: 16)
 */
export interface D3D12_RAYTRACING_GEOMETRY_DESC {
  /** Windows.Win32.Graphics.Direct3D12.D3D12_RAYTRACING_GEOMETRY_TYPE */
  Type: D3D12_RAYTRACING_GEOMETRY_TYPE;
  /** Windows.Win32.Graphics.Direct3D12.D3D12_RAYTRACING_GEOMETRY_FLAGS */
  Flags: D3D12_RAYTRACING_GEOMETRY_FLAGS;
  /** _Anonymous_e__Union */
  Anonymous: Uint8Array | Deno.PointerValue | null;
}

export const sizeofD3D12_RAYTRACING_GEOMETRY_DESC = 16;

export function allocD3D12_RAYTRACING_GEOMETRY_DESC(data?: Partial<D3D12_RAYTRACING_GEOMETRY_DESC>): Uint8Array {
  const buf = new Uint8Array(sizeofD3D12_RAYTRACING_GEOMETRY_DESC);
  const view = new DataView(buf.buffer);
  // 0x00: i32
  if (data?.Type !== undefined) view.setInt32(0, Number(data.Type), true);
  // 0x04: u32
  if (data?.Flags !== undefined) view.setUint32(4, Number(data.Flags), true);
  // 0x08: pointer
  if (data?.Anonymous !== undefined) view.setBigUint64(8, data.Anonymous === null ? 0n : util.toBigInt(util.toPointer(data.Anonymous)), true);
  return buf;
}

export class D3D12_RAYTRACING_GEOMETRY_DESCView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: i32
  get Type(): number {
    return this.view.getInt32(0, true);
  }

  // 0x04: u32
  get Flags(): number {
    return this.view.getUint32(4, true);
  }

  // 0x08: pointer
  get Anonymous(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(8, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: i32
  set Type(value: number) {
    this.view.setInt32(0, value, true);
  }

  // 0x04: u32
  set Flags(value: number) {
    this.view.setUint32(4, value, true);
  }

  // 0x08: pointer
  set Anonymous(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(8, util.toBigInt(util.toPointer(value)), true);
  }
}

/**
 * Windows.Win32.Graphics.Direct3D12.D3D12_BUILD_RAYTRACING_ACCELERATION_STRUCTURE_INPUTS (size: 24)
 */
export interface D3D12_BUILD_RAYTRACING_ACCELERATION_STRUCTURE_INPUTS {
  /** Windows.Win32.Graphics.Direct3D12.D3D12_RAYTRACING_ACCELERATION_STRUCTURE_TYPE */
  Type: D3D12_RAYTRACING_ACCELERATION_STRUCTURE_TYPE;
  /** Windows.Win32.Graphics.Direct3D12.D3D12_RAYTRACING_ACCELERATION_STRUCTURE_BUILD_FLAGS */
  Flags: D3D12_RAYTRACING_ACCELERATION_STRUCTURE_BUILD_FLAGS;
  /** u32 */
  NumDescs: number;
  /** Windows.Win32.Graphics.Direct3D12.D3D12_ELEMENTS_LAYOUT */
  DescsLayout: D3D12_ELEMENTS_LAYOUT;
  /** _Anonymous_e__Union */
  Anonymous: Uint8Array | Deno.PointerValue | null;
}

export const sizeofD3D12_BUILD_RAYTRACING_ACCELERATION_STRUCTURE_INPUTS = 24;

export function allocD3D12_BUILD_RAYTRACING_ACCELERATION_STRUCTURE_INPUTS(data?: Partial<D3D12_BUILD_RAYTRACING_ACCELERATION_STRUCTURE_INPUTS>): Uint8Array {
  const buf = new Uint8Array(sizeofD3D12_BUILD_RAYTRACING_ACCELERATION_STRUCTURE_INPUTS);
  const view = new DataView(buf.buffer);
  // 0x00: i32
  if (data?.Type !== undefined) view.setInt32(0, Number(data.Type), true);
  // 0x04: u32
  if (data?.Flags !== undefined) view.setUint32(4, Number(data.Flags), true);
  // 0x08: u32
  if (data?.NumDescs !== undefined) view.setUint32(8, Number(data.NumDescs), true);
  // 0x0c: i32
  if (data?.DescsLayout !== undefined) view.setInt32(12, Number(data.DescsLayout), true);
  // 0x10: pointer
  if (data?.Anonymous !== undefined) view.setBigUint64(16, data.Anonymous === null ? 0n : util.toBigInt(util.toPointer(data.Anonymous)), true);
  return buf;
}

export class D3D12_BUILD_RAYTRACING_ACCELERATION_STRUCTURE_INPUTSView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: i32
  get Type(): number {
    return this.view.getInt32(0, true);
  }

  // 0x04: u32
  get Flags(): number {
    return this.view.getUint32(4, true);
  }

  // 0x08: u32
  get NumDescs(): number {
    return this.view.getUint32(8, true);
  }

  // 0x0c: i32
  get DescsLayout(): number {
    return this.view.getInt32(12, true);
  }

  // 0x10: pointer
  get Anonymous(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(16, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: i32
  set Type(value: number) {
    this.view.setInt32(0, value, true);
  }

  // 0x04: u32
  set Flags(value: number) {
    this.view.setUint32(4, value, true);
  }

  // 0x08: u32
  set NumDescs(value: number) {
    this.view.setUint32(8, value, true);
  }

  // 0x0c: i32
  set DescsLayout(value: number) {
    this.view.setInt32(12, value, true);
  }

  // 0x10: pointer
  set Anonymous(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(16, util.toBigInt(util.toPointer(value)), true);
  }
}

/**
 * Windows.Win32.Graphics.Direct3D12.D3D12_BUILD_RAYTRACING_ACCELERATION_STRUCTURE_DESC (size: 32)
 */
export interface D3D12_BUILD_RAYTRACING_ACCELERATION_STRUCTURE_DESC {
  /** u64 */
  DestAccelerationStructureData: number | bigint;
  /** Windows.Win32.Graphics.Direct3D12.D3D12_BUILD_RAYTRACING_ACCELERATION_STRUCTURE_INPUTS */
  Inputs: Uint8Array | Deno.PointerValue | null;
  /** u64 */
  SourceAccelerationStructureData: number | bigint;
  /** u64 */
  ScratchAccelerationStructureData: number | bigint;
}

export const sizeofD3D12_BUILD_RAYTRACING_ACCELERATION_STRUCTURE_DESC = 32;

export function allocD3D12_BUILD_RAYTRACING_ACCELERATION_STRUCTURE_DESC(data?: Partial<D3D12_BUILD_RAYTRACING_ACCELERATION_STRUCTURE_DESC>): Uint8Array {
  const buf = new Uint8Array(sizeofD3D12_BUILD_RAYTRACING_ACCELERATION_STRUCTURE_DESC);
  const view = new DataView(buf.buffer);
  // 0x00: u64
  if (data?.DestAccelerationStructureData !== undefined) view.setBigUint64(0, util.toBigInt(data.DestAccelerationStructureData), true);
  // 0x08: pointer
  if (data?.Inputs !== undefined) view.setBigUint64(8, data.Inputs === null ? 0n : util.toBigInt(util.toPointer(data.Inputs)), true);
  // 0x10: u64
  if (data?.SourceAccelerationStructureData !== undefined) view.setBigUint64(16, util.toBigInt(data.SourceAccelerationStructureData), true);
  // 0x18: u64
  if (data?.ScratchAccelerationStructureData !== undefined) view.setBigUint64(24, util.toBigInt(data.ScratchAccelerationStructureData), true);
  return buf;
}

export class D3D12_BUILD_RAYTRACING_ACCELERATION_STRUCTURE_DESCView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u64
  get DestAccelerationStructureData(): number | bigint {
    return this.view.getBigUint64(0, true);
  }

  // 0x08: pointer
  get Inputs(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(8, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x10: u64
  get SourceAccelerationStructureData(): number | bigint {
    return this.view.getBigUint64(16, true);
  }

  // 0x18: u64
  get ScratchAccelerationStructureData(): number | bigint {
    return this.view.getBigUint64(24, true);
  }

  // 0x00: u64
  set DestAccelerationStructureData(value: number | bigint) {
    this.view.setBigUint64(0, util.toBigInt(value), true);
  }

  // 0x08: pointer
  set Inputs(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(8, util.toBigInt(util.toPointer(value)), true);
  }

  // 0x10: u64
  set SourceAccelerationStructureData(value: number | bigint) {
    this.view.setBigUint64(16, util.toBigInt(value), true);
  }

  // 0x18: u64
  set ScratchAccelerationStructureData(value: number | bigint) {
    this.view.setBigUint64(24, util.toBigInt(value), true);
  }
}

/**
 * Windows.Win32.Graphics.Direct3D12.D3D12_RAYTRACING_ACCELERATION_STRUCTURE_PREBUILD_INFO (size: 24)
 */
export interface D3D12_RAYTRACING_ACCELERATION_STRUCTURE_PREBUILD_INFO {
  /** u64 */
  ResultDataMaxSizeInBytes: number | bigint;
  /** u64 */
  ScratchDataSizeInBytes: number | bigint;
  /** u64 */
  UpdateScratchDataSizeInBytes: number | bigint;
}

export const sizeofD3D12_RAYTRACING_ACCELERATION_STRUCTURE_PREBUILD_INFO = 24;

export function allocD3D12_RAYTRACING_ACCELERATION_STRUCTURE_PREBUILD_INFO(data?: Partial<D3D12_RAYTRACING_ACCELERATION_STRUCTURE_PREBUILD_INFO>): Uint8Array {
  const buf = new Uint8Array(sizeofD3D12_RAYTRACING_ACCELERATION_STRUCTURE_PREBUILD_INFO);
  const view = new DataView(buf.buffer);
  // 0x00: u64
  if (data?.ResultDataMaxSizeInBytes !== undefined) view.setBigUint64(0, util.toBigInt(data.ResultDataMaxSizeInBytes), true);
  // 0x08: u64
  if (data?.ScratchDataSizeInBytes !== undefined) view.setBigUint64(8, util.toBigInt(data.ScratchDataSizeInBytes), true);
  // 0x10: u64
  if (data?.UpdateScratchDataSizeInBytes !== undefined) view.setBigUint64(16, util.toBigInt(data.UpdateScratchDataSizeInBytes), true);
  return buf;
}

export class D3D12_RAYTRACING_ACCELERATION_STRUCTURE_PREBUILD_INFOView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u64
  get ResultDataMaxSizeInBytes(): number | bigint {
    return this.view.getBigUint64(0, true);
  }

  // 0x08: u64
  get ScratchDataSizeInBytes(): number | bigint {
    return this.view.getBigUint64(8, true);
  }

  // 0x10: u64
  get UpdateScratchDataSizeInBytes(): number | bigint {
    return this.view.getBigUint64(16, true);
  }

  // 0x00: u64
  set ResultDataMaxSizeInBytes(value: number | bigint) {
    this.view.setBigUint64(0, util.toBigInt(value), true);
  }

  // 0x08: u64
  set ScratchDataSizeInBytes(value: number | bigint) {
    this.view.setBigUint64(8, util.toBigInt(value), true);
  }

  // 0x10: u64
  set UpdateScratchDataSizeInBytes(value: number | bigint) {
    this.view.setBigUint64(16, util.toBigInt(value), true);
  }
}

/**
 * Windows.Win32.Graphics.Direct3D12.D3D12_AUTO_BREADCRUMB_NODE (size: 80)
 */
export interface D3D12_AUTO_BREADCRUMB_NODE {
  /** ptr */
  pCommandListDebugNameA: Deno.PointerValue | Uint8Array | null;
  /** Windows.Win32.Foundation.PWSTR */
  pCommandListDebugNameW: string | null | Uint8Array | Uint16Array;
  /** ptr */
  pCommandQueueDebugNameA: Deno.PointerValue | Uint8Array | null;
  /** Windows.Win32.Foundation.PWSTR */
  pCommandQueueDebugNameW: string | null | Uint8Array | Uint16Array;
  /** Windows.Win32.Graphics.Direct3D12.ID3D12GraphicsCommandList */
  pCommandList: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Graphics.Direct3D12.ID3D12CommandQueue */
  pCommandQueue: Uint8Array | Deno.PointerValue | null;
  /** u32 */
  BreadcrumbCount: number;
  /** ptr */
  pLastBreadcrumbValue: Deno.PointerValue | Uint8Array | null;
  /** ptr */
  pCommandHistory: Deno.PointerValue | Uint8Array | null;
  /** ptr */
  pNext: Deno.PointerValue | Uint8Array | null;
}

export const sizeofD3D12_AUTO_BREADCRUMB_NODE = 80;

export function allocD3D12_AUTO_BREADCRUMB_NODE(data?: Partial<D3D12_AUTO_BREADCRUMB_NODE>): Uint8Array {
  const buf = new Uint8Array(sizeofD3D12_AUTO_BREADCRUMB_NODE);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.pCommandListDebugNameA !== undefined) view.setBigUint64(0, data.pCommandListDebugNameA === null ? 0n : util.toBigInt(util.toPointer(data.pCommandListDebugNameA)), true);
  // 0x08: buffer
  if (data?.pCommandListDebugNameW !== undefined) {
    (buf as any)._f8 = util.pwstrToFfi(data.pCommandListDebugNameW);
    view.setBigUint64(8, (buf as any)._f8 === null ? 0n : util.toBigInt(Deno.UnsafePointer.of((buf as any)._f8)), true);
  }
  // 0x10: pointer
  if (data?.pCommandQueueDebugNameA !== undefined) view.setBigUint64(16, data.pCommandQueueDebugNameA === null ? 0n : util.toBigInt(util.toPointer(data.pCommandQueueDebugNameA)), true);
  // 0x18: buffer
  if (data?.pCommandQueueDebugNameW !== undefined) {
    (buf as any)._f24 = util.pwstrToFfi(data.pCommandQueueDebugNameW);
    view.setBigUint64(24, (buf as any)._f24 === null ? 0n : util.toBigInt(Deno.UnsafePointer.of((buf as any)._f24)), true);
  }
  // 0x20: pointer
  if (data?.pCommandList !== undefined) view.setBigUint64(32, data.pCommandList === null ? 0n : util.toBigInt(util.toPointer(data.pCommandList)), true);
  // 0x28: pointer
  if (data?.pCommandQueue !== undefined) view.setBigUint64(40, data.pCommandQueue === null ? 0n : util.toBigInt(util.toPointer(data.pCommandQueue)), true);
  // 0x30: u32
  if (data?.BreadcrumbCount !== undefined) view.setUint32(48, Number(data.BreadcrumbCount), true);
  // 0x34: pad4
  // 0x38: pointer
  if (data?.pLastBreadcrumbValue !== undefined) view.setBigUint64(56, data.pLastBreadcrumbValue === null ? 0n : util.toBigInt(util.toPointer(data.pLastBreadcrumbValue)), true);
  // 0x40: pointer
  if (data?.pCommandHistory !== undefined) view.setBigUint64(64, data.pCommandHistory === null ? 0n : util.toBigInt(util.toPointer(data.pCommandHistory)), true);
  // 0x48: pointer
  if (data?.pNext !== undefined) view.setBigUint64(72, data.pNext === null ? 0n : util.toBigInt(util.toPointer(data.pNext)), true);
  return buf;
}

export class D3D12_AUTO_BREADCRUMB_NODEView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get pCommandListDebugNameA(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(0, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x08: buffer
  get pCommandListDebugNameW(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(8, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x10: pointer
  get pCommandQueueDebugNameA(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(16, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x18: buffer
  get pCommandQueueDebugNameW(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(24, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x20: pointer
  get pCommandList(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(32, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x28: pointer
  get pCommandQueue(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(40, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x30: u32
  get BreadcrumbCount(): number {
    return this.view.getUint32(48, true);
  }

  // 0x34: pad4

  // 0x38: pointer
  get pLastBreadcrumbValue(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(56, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x40: pointer
  get pCommandHistory(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(64, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x48: pointer
  get pNext(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(72, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: pointer
  set pCommandListDebugNameA(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(0, util.toBigInt(util.toPointer(value)), true);
  }

  // 0x08: buffer
  set pCommandListDebugNameW(value: Uint8Array | Deno.PointerValue | null) {
    (this.buf as any)._f8 = value;
    this.view.setBigUint64(8, util.toBigInt(util.toPointer((this.buf as any)._f8)), true);
  }

  // 0x10: pointer
  set pCommandQueueDebugNameA(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(16, util.toBigInt(util.toPointer(value)), true);
  }

  // 0x18: buffer
  set pCommandQueueDebugNameW(value: Uint8Array | Deno.PointerValue | null) {
    (this.buf as any)._f24 = value;
    this.view.setBigUint64(24, util.toBigInt(util.toPointer((this.buf as any)._f24)), true);
  }

  // 0x20: pointer
  set pCommandList(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(32, util.toBigInt(util.toPointer(value)), true);
  }

  // 0x28: pointer
  set pCommandQueue(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(40, util.toBigInt(util.toPointer(value)), true);
  }

  // 0x30: u32
  set BreadcrumbCount(value: number) {
    this.view.setUint32(48, value, true);
  }

  // 0x34: pad4

  // 0x38: pointer
  set pLastBreadcrumbValue(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(56, util.toBigInt(util.toPointer(value)), true);
  }

  // 0x40: pointer
  set pCommandHistory(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(64, util.toBigInt(util.toPointer(value)), true);
  }

  // 0x48: pointer
  set pNext(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(72, util.toBigInt(util.toPointer(value)), true);
  }
}

/**
 * Windows.Win32.Graphics.Direct3D12.D3D12_DRED_BREADCRUMB_CONTEXT (size: 16)
 */
export interface D3D12_DRED_BREADCRUMB_CONTEXT {
  /** u32 */
  BreadcrumbIndex: number;
  /** Windows.Win32.Foundation.PWSTR */
  pContextString: string | null | Uint8Array | Uint16Array;
}

export const sizeofD3D12_DRED_BREADCRUMB_CONTEXT = 16;

export function allocD3D12_DRED_BREADCRUMB_CONTEXT(data?: Partial<D3D12_DRED_BREADCRUMB_CONTEXT>): Uint8Array {
  const buf = new Uint8Array(sizeofD3D12_DRED_BREADCRUMB_CONTEXT);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.BreadcrumbIndex !== undefined) view.setUint32(0, Number(data.BreadcrumbIndex), true);
  // 0x04: pad4
  // 0x08: buffer
  if (data?.pContextString !== undefined) {
    (buf as any)._f8 = util.pwstrToFfi(data.pContextString);
    view.setBigUint64(8, (buf as any)._f8 === null ? 0n : util.toBigInt(Deno.UnsafePointer.of((buf as any)._f8)), true);
  }
  return buf;
}

export class D3D12_DRED_BREADCRUMB_CONTEXTView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get BreadcrumbIndex(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: pad4

  // 0x08: buffer
  get pContextString(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(8, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: u32
  set BreadcrumbIndex(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: pad4

  // 0x08: buffer
  set pContextString(value: Uint8Array | Deno.PointerValue | null) {
    (this.buf as any)._f8 = value;
    this.view.setBigUint64(8, util.toBigInt(util.toPointer((this.buf as any)._f8)), true);
  }
}

/**
 * Windows.Win32.Graphics.Direct3D12.D3D12_AUTO_BREADCRUMB_NODE1 (size: 96)
 */
export interface D3D12_AUTO_BREADCRUMB_NODE1 {
  /** ptr */
  pCommandListDebugNameA: Deno.PointerValue | Uint8Array | null;
  /** Windows.Win32.Foundation.PWSTR */
  pCommandListDebugNameW: string | null | Uint8Array | Uint16Array;
  /** ptr */
  pCommandQueueDebugNameA: Deno.PointerValue | Uint8Array | null;
  /** Windows.Win32.Foundation.PWSTR */
  pCommandQueueDebugNameW: string | null | Uint8Array | Uint16Array;
  /** Windows.Win32.Graphics.Direct3D12.ID3D12GraphicsCommandList */
  pCommandList: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Graphics.Direct3D12.ID3D12CommandQueue */
  pCommandQueue: Uint8Array | Deno.PointerValue | null;
  /** u32 */
  BreadcrumbCount: number;
  /** ptr */
  pLastBreadcrumbValue: Deno.PointerValue | Uint8Array | null;
  /** ptr */
  pCommandHistory: Deno.PointerValue | Uint8Array | null;
  /** ptr */
  pNext: Deno.PointerValue | Uint8Array | null;
  /** u32 */
  BreadcrumbContextsCount: number;
  /** ptr */
  pBreadcrumbContexts: Deno.PointerValue | Uint8Array | null;
}

export const sizeofD3D12_AUTO_BREADCRUMB_NODE1 = 96;

export function allocD3D12_AUTO_BREADCRUMB_NODE1(data?: Partial<D3D12_AUTO_BREADCRUMB_NODE1>): Uint8Array {
  const buf = new Uint8Array(sizeofD3D12_AUTO_BREADCRUMB_NODE1);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.pCommandListDebugNameA !== undefined) view.setBigUint64(0, data.pCommandListDebugNameA === null ? 0n : util.toBigInt(util.toPointer(data.pCommandListDebugNameA)), true);
  // 0x08: buffer
  if (data?.pCommandListDebugNameW !== undefined) {
    (buf as any)._f8 = util.pwstrToFfi(data.pCommandListDebugNameW);
    view.setBigUint64(8, (buf as any)._f8 === null ? 0n : util.toBigInt(Deno.UnsafePointer.of((buf as any)._f8)), true);
  }
  // 0x10: pointer
  if (data?.pCommandQueueDebugNameA !== undefined) view.setBigUint64(16, data.pCommandQueueDebugNameA === null ? 0n : util.toBigInt(util.toPointer(data.pCommandQueueDebugNameA)), true);
  // 0x18: buffer
  if (data?.pCommandQueueDebugNameW !== undefined) {
    (buf as any)._f24 = util.pwstrToFfi(data.pCommandQueueDebugNameW);
    view.setBigUint64(24, (buf as any)._f24 === null ? 0n : util.toBigInt(Deno.UnsafePointer.of((buf as any)._f24)), true);
  }
  // 0x20: pointer
  if (data?.pCommandList !== undefined) view.setBigUint64(32, data.pCommandList === null ? 0n : util.toBigInt(util.toPointer(data.pCommandList)), true);
  // 0x28: pointer
  if (data?.pCommandQueue !== undefined) view.setBigUint64(40, data.pCommandQueue === null ? 0n : util.toBigInt(util.toPointer(data.pCommandQueue)), true);
  // 0x30: u32
  if (data?.BreadcrumbCount !== undefined) view.setUint32(48, Number(data.BreadcrumbCount), true);
  // 0x34: pad4
  // 0x38: pointer
  if (data?.pLastBreadcrumbValue !== undefined) view.setBigUint64(56, data.pLastBreadcrumbValue === null ? 0n : util.toBigInt(util.toPointer(data.pLastBreadcrumbValue)), true);
  // 0x40: pointer
  if (data?.pCommandHistory !== undefined) view.setBigUint64(64, data.pCommandHistory === null ? 0n : util.toBigInt(util.toPointer(data.pCommandHistory)), true);
  // 0x48: pointer
  if (data?.pNext !== undefined) view.setBigUint64(72, data.pNext === null ? 0n : util.toBigInt(util.toPointer(data.pNext)), true);
  // 0x50: u32
  if (data?.BreadcrumbContextsCount !== undefined) view.setUint32(80, Number(data.BreadcrumbContextsCount), true);
  // 0x54: pad4
  // 0x58: pointer
  if (data?.pBreadcrumbContexts !== undefined) view.setBigUint64(88, data.pBreadcrumbContexts === null ? 0n : util.toBigInt(util.toPointer(data.pBreadcrumbContexts)), true);
  return buf;
}

export class D3D12_AUTO_BREADCRUMB_NODE1View {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get pCommandListDebugNameA(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(0, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x08: buffer
  get pCommandListDebugNameW(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(8, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x10: pointer
  get pCommandQueueDebugNameA(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(16, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x18: buffer
  get pCommandQueueDebugNameW(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(24, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x20: pointer
  get pCommandList(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(32, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x28: pointer
  get pCommandQueue(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(40, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x30: u32
  get BreadcrumbCount(): number {
    return this.view.getUint32(48, true);
  }

  // 0x34: pad4

  // 0x38: pointer
  get pLastBreadcrumbValue(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(56, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x40: pointer
  get pCommandHistory(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(64, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x48: pointer
  get pNext(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(72, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x50: u32
  get BreadcrumbContextsCount(): number {
    return this.view.getUint32(80, true);
  }

  // 0x54: pad4

  // 0x58: pointer
  get pBreadcrumbContexts(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(88, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: pointer
  set pCommandListDebugNameA(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(0, util.toBigInt(util.toPointer(value)), true);
  }

  // 0x08: buffer
  set pCommandListDebugNameW(value: Uint8Array | Deno.PointerValue | null) {
    (this.buf as any)._f8 = value;
    this.view.setBigUint64(8, util.toBigInt(util.toPointer((this.buf as any)._f8)), true);
  }

  // 0x10: pointer
  set pCommandQueueDebugNameA(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(16, util.toBigInt(util.toPointer(value)), true);
  }

  // 0x18: buffer
  set pCommandQueueDebugNameW(value: Uint8Array | Deno.PointerValue | null) {
    (this.buf as any)._f24 = value;
    this.view.setBigUint64(24, util.toBigInt(util.toPointer((this.buf as any)._f24)), true);
  }

  // 0x20: pointer
  set pCommandList(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(32, util.toBigInt(util.toPointer(value)), true);
  }

  // 0x28: pointer
  set pCommandQueue(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(40, util.toBigInt(util.toPointer(value)), true);
  }

  // 0x30: u32
  set BreadcrumbCount(value: number) {
    this.view.setUint32(48, value, true);
  }

  // 0x34: pad4

  // 0x38: pointer
  set pLastBreadcrumbValue(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(56, util.toBigInt(util.toPointer(value)), true);
  }

  // 0x40: pointer
  set pCommandHistory(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(64, util.toBigInt(util.toPointer(value)), true);
  }

  // 0x48: pointer
  set pNext(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(72, util.toBigInt(util.toPointer(value)), true);
  }

  // 0x50: u32
  set BreadcrumbContextsCount(value: number) {
    this.view.setUint32(80, value, true);
  }

  // 0x54: pad4

  // 0x58: pointer
  set pBreadcrumbContexts(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(88, util.toBigInt(util.toPointer(value)), true);
  }
}

/**
 * Windows.Win32.Graphics.Direct3D12.D3D12_DEVICE_REMOVED_EXTENDED_DATA (size: 16)
 */
export interface D3D12_DEVICE_REMOVED_EXTENDED_DATA {
  /** Windows.Win32.Graphics.Direct3D12.D3D12_DRED_FLAGS */
  Flags: D3D12_DRED_FLAGS;
  /** ptr */
  pHeadAutoBreadcrumbNode: Deno.PointerValue | Uint8Array | null;
}

export const sizeofD3D12_DEVICE_REMOVED_EXTENDED_DATA = 16;

export function allocD3D12_DEVICE_REMOVED_EXTENDED_DATA(data?: Partial<D3D12_DEVICE_REMOVED_EXTENDED_DATA>): Uint8Array {
  const buf = new Uint8Array(sizeofD3D12_DEVICE_REMOVED_EXTENDED_DATA);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.Flags !== undefined) view.setUint32(0, Number(data.Flags), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.pHeadAutoBreadcrumbNode !== undefined) view.setBigUint64(8, data.pHeadAutoBreadcrumbNode === null ? 0n : util.toBigInt(util.toPointer(data.pHeadAutoBreadcrumbNode)), true);
  return buf;
}

export class D3D12_DEVICE_REMOVED_EXTENDED_DATAView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get Flags(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  get pHeadAutoBreadcrumbNode(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(8, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: u32
  set Flags(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  set pHeadAutoBreadcrumbNode(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(8, util.toBigInt(util.toPointer(value)), true);
  }
}

/**
 * Windows.Win32.Graphics.Direct3D12.D3D12_DRED_ALLOCATION_NODE (size: 32)
 */
export interface D3D12_DRED_ALLOCATION_NODE {
  /** ptr */
  ObjectNameA: Deno.PointerValue | Uint8Array | null;
  /** Windows.Win32.Foundation.PWSTR */
  ObjectNameW: string | null | Uint8Array | Uint16Array;
  /** Windows.Win32.Graphics.Direct3D12.D3D12_DRED_ALLOCATION_TYPE */
  AllocationType: D3D12_DRED_ALLOCATION_TYPE;
  /** ptr */
  pNext: Deno.PointerValue | Uint8Array | null;
}

export const sizeofD3D12_DRED_ALLOCATION_NODE = 32;

export function allocD3D12_DRED_ALLOCATION_NODE(data?: Partial<D3D12_DRED_ALLOCATION_NODE>): Uint8Array {
  const buf = new Uint8Array(sizeofD3D12_DRED_ALLOCATION_NODE);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.ObjectNameA !== undefined) view.setBigUint64(0, data.ObjectNameA === null ? 0n : util.toBigInt(util.toPointer(data.ObjectNameA)), true);
  // 0x08: buffer
  if (data?.ObjectNameW !== undefined) {
    (buf as any)._f8 = util.pwstrToFfi(data.ObjectNameW);
    view.setBigUint64(8, (buf as any)._f8 === null ? 0n : util.toBigInt(Deno.UnsafePointer.of((buf as any)._f8)), true);
  }
  // 0x10: i32
  if (data?.AllocationType !== undefined) view.setInt32(16, Number(data.AllocationType), true);
  // 0x14: pad4
  // 0x18: pointer
  if (data?.pNext !== undefined) view.setBigUint64(24, data.pNext === null ? 0n : util.toBigInt(util.toPointer(data.pNext)), true);
  return buf;
}

export class D3D12_DRED_ALLOCATION_NODEView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get ObjectNameA(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(0, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x08: buffer
  get ObjectNameW(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(8, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x10: i32
  get AllocationType(): number {
    return this.view.getInt32(16, true);
  }

  // 0x14: pad4

  // 0x18: pointer
  get pNext(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(24, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: pointer
  set ObjectNameA(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(0, util.toBigInt(util.toPointer(value)), true);
  }

  // 0x08: buffer
  set ObjectNameW(value: Uint8Array | Deno.PointerValue | null) {
    (this.buf as any)._f8 = value;
    this.view.setBigUint64(8, util.toBigInt(util.toPointer((this.buf as any)._f8)), true);
  }

  // 0x10: i32
  set AllocationType(value: number) {
    this.view.setInt32(16, value, true);
  }

  // 0x14: pad4

  // 0x18: pointer
  set pNext(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(24, util.toBigInt(util.toPointer(value)), true);
  }
}

/**
 * Windows.Win32.Graphics.Direct3D12.D3D12_DRED_ALLOCATION_NODE1 (size: 40)
 */
export interface D3D12_DRED_ALLOCATION_NODE1 {
  /** ptr */
  ObjectNameA: Deno.PointerValue | Uint8Array | null;
  /** Windows.Win32.Foundation.PWSTR */
  ObjectNameW: string | null | Uint8Array | Uint16Array;
  /** Windows.Win32.Graphics.Direct3D12.D3D12_DRED_ALLOCATION_TYPE */
  AllocationType: D3D12_DRED_ALLOCATION_TYPE;
  /** ptr */
  pNext: Deno.PointerValue | Uint8Array | null;
  /** Windows.Win32.System.Com.IUnknown */
  pObject: Uint8Array | Deno.PointerValue | null;
}

export const sizeofD3D12_DRED_ALLOCATION_NODE1 = 40;

export function allocD3D12_DRED_ALLOCATION_NODE1(data?: Partial<D3D12_DRED_ALLOCATION_NODE1>): Uint8Array {
  const buf = new Uint8Array(sizeofD3D12_DRED_ALLOCATION_NODE1);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.ObjectNameA !== undefined) view.setBigUint64(0, data.ObjectNameA === null ? 0n : util.toBigInt(util.toPointer(data.ObjectNameA)), true);
  // 0x08: buffer
  if (data?.ObjectNameW !== undefined) {
    (buf as any)._f8 = util.pwstrToFfi(data.ObjectNameW);
    view.setBigUint64(8, (buf as any)._f8 === null ? 0n : util.toBigInt(Deno.UnsafePointer.of((buf as any)._f8)), true);
  }
  // 0x10: i32
  if (data?.AllocationType !== undefined) view.setInt32(16, Number(data.AllocationType), true);
  // 0x14: pad4
  // 0x18: pointer
  if (data?.pNext !== undefined) view.setBigUint64(24, data.pNext === null ? 0n : util.toBigInt(util.toPointer(data.pNext)), true);
  // 0x20: pointer
  if (data?.pObject !== undefined) view.setBigUint64(32, data.pObject === null ? 0n : util.toBigInt(util.toPointer(data.pObject)), true);
  return buf;
}

export class D3D12_DRED_ALLOCATION_NODE1View {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get ObjectNameA(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(0, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x08: buffer
  get ObjectNameW(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(8, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x10: i32
  get AllocationType(): number {
    return this.view.getInt32(16, true);
  }

  // 0x14: pad4

  // 0x18: pointer
  get pNext(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(24, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x20: pointer
  get pObject(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(32, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: pointer
  set ObjectNameA(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(0, util.toBigInt(util.toPointer(value)), true);
  }

  // 0x08: buffer
  set ObjectNameW(value: Uint8Array | Deno.PointerValue | null) {
    (this.buf as any)._f8 = value;
    this.view.setBigUint64(8, util.toBigInt(util.toPointer((this.buf as any)._f8)), true);
  }

  // 0x10: i32
  set AllocationType(value: number) {
    this.view.setInt32(16, value, true);
  }

  // 0x14: pad4

  // 0x18: pointer
  set pNext(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(24, util.toBigInt(util.toPointer(value)), true);
  }

  // 0x20: pointer
  set pObject(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(32, util.toBigInt(util.toPointer(value)), true);
  }
}

/**
 * Windows.Win32.Graphics.Direct3D12.D3D12_DRED_AUTO_BREADCRUMBS_OUTPUT (size: 8)
 */
export interface D3D12_DRED_AUTO_BREADCRUMBS_OUTPUT {
  /** ptr */
  pHeadAutoBreadcrumbNode: Deno.PointerValue | Uint8Array | null;
}

export const sizeofD3D12_DRED_AUTO_BREADCRUMBS_OUTPUT = 8;

export function allocD3D12_DRED_AUTO_BREADCRUMBS_OUTPUT(data?: Partial<D3D12_DRED_AUTO_BREADCRUMBS_OUTPUT>): Uint8Array {
  const buf = new Uint8Array(sizeofD3D12_DRED_AUTO_BREADCRUMBS_OUTPUT);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.pHeadAutoBreadcrumbNode !== undefined) view.setBigUint64(0, data.pHeadAutoBreadcrumbNode === null ? 0n : util.toBigInt(util.toPointer(data.pHeadAutoBreadcrumbNode)), true);
  return buf;
}

export class D3D12_DRED_AUTO_BREADCRUMBS_OUTPUTView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get pHeadAutoBreadcrumbNode(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(0, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: pointer
  set pHeadAutoBreadcrumbNode(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(0, util.toBigInt(util.toPointer(value)), true);
  }
}

/**
 * Windows.Win32.Graphics.Direct3D12.D3D12_DRED_AUTO_BREADCRUMBS_OUTPUT1 (size: 8)
 */
export interface D3D12_DRED_AUTO_BREADCRUMBS_OUTPUT1 {
  /** ptr */
  pHeadAutoBreadcrumbNode: Deno.PointerValue | Uint8Array | null;
}

export const sizeofD3D12_DRED_AUTO_BREADCRUMBS_OUTPUT1 = 8;

export function allocD3D12_DRED_AUTO_BREADCRUMBS_OUTPUT1(data?: Partial<D3D12_DRED_AUTO_BREADCRUMBS_OUTPUT1>): Uint8Array {
  const buf = new Uint8Array(sizeofD3D12_DRED_AUTO_BREADCRUMBS_OUTPUT1);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.pHeadAutoBreadcrumbNode !== undefined) view.setBigUint64(0, data.pHeadAutoBreadcrumbNode === null ? 0n : util.toBigInt(util.toPointer(data.pHeadAutoBreadcrumbNode)), true);
  return buf;
}

export class D3D12_DRED_AUTO_BREADCRUMBS_OUTPUT1View {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get pHeadAutoBreadcrumbNode(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(0, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: pointer
  set pHeadAutoBreadcrumbNode(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(0, util.toBigInt(util.toPointer(value)), true);
  }
}

/**
 * Windows.Win32.Graphics.Direct3D12.D3D12_DRED_PAGE_FAULT_OUTPUT (size: 24)
 */
export interface D3D12_DRED_PAGE_FAULT_OUTPUT {
  /** u64 */
  PageFaultVA: number | bigint;
  /** ptr */
  pHeadExistingAllocationNode: Deno.PointerValue | Uint8Array | null;
  /** ptr */
  pHeadRecentFreedAllocationNode: Deno.PointerValue | Uint8Array | null;
}

export const sizeofD3D12_DRED_PAGE_FAULT_OUTPUT = 24;

export function allocD3D12_DRED_PAGE_FAULT_OUTPUT(data?: Partial<D3D12_DRED_PAGE_FAULT_OUTPUT>): Uint8Array {
  const buf = new Uint8Array(sizeofD3D12_DRED_PAGE_FAULT_OUTPUT);
  const view = new DataView(buf.buffer);
  // 0x00: u64
  if (data?.PageFaultVA !== undefined) view.setBigUint64(0, util.toBigInt(data.PageFaultVA), true);
  // 0x08: pointer
  if (data?.pHeadExistingAllocationNode !== undefined) view.setBigUint64(8, data.pHeadExistingAllocationNode === null ? 0n : util.toBigInt(util.toPointer(data.pHeadExistingAllocationNode)), true);
  // 0x10: pointer
  if (data?.pHeadRecentFreedAllocationNode !== undefined) view.setBigUint64(16, data.pHeadRecentFreedAllocationNode === null ? 0n : util.toBigInt(util.toPointer(data.pHeadRecentFreedAllocationNode)), true);
  return buf;
}

export class D3D12_DRED_PAGE_FAULT_OUTPUTView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u64
  get PageFaultVA(): number | bigint {
    return this.view.getBigUint64(0, true);
  }

  // 0x08: pointer
  get pHeadExistingAllocationNode(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(8, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x10: pointer
  get pHeadRecentFreedAllocationNode(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(16, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: u64
  set PageFaultVA(value: number | bigint) {
    this.view.setBigUint64(0, util.toBigInt(value), true);
  }

  // 0x08: pointer
  set pHeadExistingAllocationNode(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(8, util.toBigInt(util.toPointer(value)), true);
  }

  // 0x10: pointer
  set pHeadRecentFreedAllocationNode(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(16, util.toBigInt(util.toPointer(value)), true);
  }
}

/**
 * Windows.Win32.Graphics.Direct3D12.D3D12_DRED_PAGE_FAULT_OUTPUT1 (size: 24)
 */
export interface D3D12_DRED_PAGE_FAULT_OUTPUT1 {
  /** u64 */
  PageFaultVA: number | bigint;
  /** ptr */
  pHeadExistingAllocationNode: Deno.PointerValue | Uint8Array | null;
  /** ptr */
  pHeadRecentFreedAllocationNode: Deno.PointerValue | Uint8Array | null;
}

export const sizeofD3D12_DRED_PAGE_FAULT_OUTPUT1 = 24;

export function allocD3D12_DRED_PAGE_FAULT_OUTPUT1(data?: Partial<D3D12_DRED_PAGE_FAULT_OUTPUT1>): Uint8Array {
  const buf = new Uint8Array(sizeofD3D12_DRED_PAGE_FAULT_OUTPUT1);
  const view = new DataView(buf.buffer);
  // 0x00: u64
  if (data?.PageFaultVA !== undefined) view.setBigUint64(0, util.toBigInt(data.PageFaultVA), true);
  // 0x08: pointer
  if (data?.pHeadExistingAllocationNode !== undefined) view.setBigUint64(8, data.pHeadExistingAllocationNode === null ? 0n : util.toBigInt(util.toPointer(data.pHeadExistingAllocationNode)), true);
  // 0x10: pointer
  if (data?.pHeadRecentFreedAllocationNode !== undefined) view.setBigUint64(16, data.pHeadRecentFreedAllocationNode === null ? 0n : util.toBigInt(util.toPointer(data.pHeadRecentFreedAllocationNode)), true);
  return buf;
}

export class D3D12_DRED_PAGE_FAULT_OUTPUT1View {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u64
  get PageFaultVA(): number | bigint {
    return this.view.getBigUint64(0, true);
  }

  // 0x08: pointer
  get pHeadExistingAllocationNode(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(8, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x10: pointer
  get pHeadRecentFreedAllocationNode(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(16, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: u64
  set PageFaultVA(value: number | bigint) {
    this.view.setBigUint64(0, util.toBigInt(value), true);
  }

  // 0x08: pointer
  set pHeadExistingAllocationNode(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(8, util.toBigInt(util.toPointer(value)), true);
  }

  // 0x10: pointer
  set pHeadRecentFreedAllocationNode(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(16, util.toBigInt(util.toPointer(value)), true);
  }
}

/**
 * Windows.Win32.Graphics.Direct3D12.D3D12_DRED_PAGE_FAULT_OUTPUT2 (size: 32)
 */
export interface D3D12_DRED_PAGE_FAULT_OUTPUT2 {
  /** u64 */
  PageFaultVA: number | bigint;
  /** ptr */
  pHeadExistingAllocationNode: Deno.PointerValue | Uint8Array | null;
  /** ptr */
  pHeadRecentFreedAllocationNode: Deno.PointerValue | Uint8Array | null;
  /** Windows.Win32.Graphics.Direct3D12.D3D12_DRED_PAGE_FAULT_FLAGS */
  PageFaultFlags: D3D12_DRED_PAGE_FAULT_FLAGS;
}

export const sizeofD3D12_DRED_PAGE_FAULT_OUTPUT2 = 32;

export function allocD3D12_DRED_PAGE_FAULT_OUTPUT2(data?: Partial<D3D12_DRED_PAGE_FAULT_OUTPUT2>): Uint8Array {
  const buf = new Uint8Array(sizeofD3D12_DRED_PAGE_FAULT_OUTPUT2);
  const view = new DataView(buf.buffer);
  // 0x00: u64
  if (data?.PageFaultVA !== undefined) view.setBigUint64(0, util.toBigInt(data.PageFaultVA), true);
  // 0x08: pointer
  if (data?.pHeadExistingAllocationNode !== undefined) view.setBigUint64(8, data.pHeadExistingAllocationNode === null ? 0n : util.toBigInt(util.toPointer(data.pHeadExistingAllocationNode)), true);
  // 0x10: pointer
  if (data?.pHeadRecentFreedAllocationNode !== undefined) view.setBigUint64(16, data.pHeadRecentFreedAllocationNode === null ? 0n : util.toBigInt(util.toPointer(data.pHeadRecentFreedAllocationNode)), true);
  // 0x18: u32
  if (data?.PageFaultFlags !== undefined) view.setUint32(24, Number(data.PageFaultFlags), true);
  // 0x1c: pad4
  return buf;
}

export class D3D12_DRED_PAGE_FAULT_OUTPUT2View {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u64
  get PageFaultVA(): number | bigint {
    return this.view.getBigUint64(0, true);
  }

  // 0x08: pointer
  get pHeadExistingAllocationNode(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(8, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x10: pointer
  get pHeadRecentFreedAllocationNode(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(16, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x18: u32
  get PageFaultFlags(): number {
    return this.view.getUint32(24, true);
  }

  // 0x1c: pad4

  // 0x00: u64
  set PageFaultVA(value: number | bigint) {
    this.view.setBigUint64(0, util.toBigInt(value), true);
  }

  // 0x08: pointer
  set pHeadExistingAllocationNode(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(8, util.toBigInt(util.toPointer(value)), true);
  }

  // 0x10: pointer
  set pHeadRecentFreedAllocationNode(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(16, util.toBigInt(util.toPointer(value)), true);
  }

  // 0x18: u32
  set PageFaultFlags(value: number) {
    this.view.setUint32(24, value, true);
  }

  // 0x1c: pad4
}

/**
 * Windows.Win32.Graphics.Direct3D12.D3D12_DEVICE_REMOVED_EXTENDED_DATA1 (size: 24)
 */
export interface D3D12_DEVICE_REMOVED_EXTENDED_DATA1 {
  /** Windows.Win32.Foundation.HRESULT */
  DeviceRemovedReason: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Graphics.Direct3D12.D3D12_DRED_AUTO_BREADCRUMBS_OUTPUT */
  AutoBreadcrumbsOutput: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Graphics.Direct3D12.D3D12_DRED_PAGE_FAULT_OUTPUT */
  PageFaultOutput: Uint8Array | Deno.PointerValue | null;
}

export const sizeofD3D12_DEVICE_REMOVED_EXTENDED_DATA1 = 24;

export function allocD3D12_DEVICE_REMOVED_EXTENDED_DATA1(data?: Partial<D3D12_DEVICE_REMOVED_EXTENDED_DATA1>): Uint8Array {
  const buf = new Uint8Array(sizeofD3D12_DEVICE_REMOVED_EXTENDED_DATA1);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.DeviceRemovedReason !== undefined) view.setBigUint64(0, data.DeviceRemovedReason === null ? 0n : util.toBigInt(util.toPointer(data.DeviceRemovedReason)), true);
  // 0x08: pointer
  if (data?.AutoBreadcrumbsOutput !== undefined) view.setBigUint64(8, data.AutoBreadcrumbsOutput === null ? 0n : util.toBigInt(util.toPointer(data.AutoBreadcrumbsOutput)), true);
  // 0x10: pointer
  if (data?.PageFaultOutput !== undefined) view.setBigUint64(16, data.PageFaultOutput === null ? 0n : util.toBigInt(util.toPointer(data.PageFaultOutput)), true);
  return buf;
}

export class D3D12_DEVICE_REMOVED_EXTENDED_DATA1View {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get DeviceRemovedReason(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(0, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x08: pointer
  get AutoBreadcrumbsOutput(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(8, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x10: pointer
  get PageFaultOutput(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(16, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: pointer
  set DeviceRemovedReason(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(0, util.toBigInt(util.toPointer(value)), true);
  }

  // 0x08: pointer
  set AutoBreadcrumbsOutput(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(8, util.toBigInt(util.toPointer(value)), true);
  }

  // 0x10: pointer
  set PageFaultOutput(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(16, util.toBigInt(util.toPointer(value)), true);
  }
}

/**
 * Windows.Win32.Graphics.Direct3D12.D3D12_DEVICE_REMOVED_EXTENDED_DATA2 (size: 24)
 */
export interface D3D12_DEVICE_REMOVED_EXTENDED_DATA2 {
  /** Windows.Win32.Foundation.HRESULT */
  DeviceRemovedReason: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Graphics.Direct3D12.D3D12_DRED_AUTO_BREADCRUMBS_OUTPUT1 */
  AutoBreadcrumbsOutput: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Graphics.Direct3D12.D3D12_DRED_PAGE_FAULT_OUTPUT1 */
  PageFaultOutput: Uint8Array | Deno.PointerValue | null;
}

export const sizeofD3D12_DEVICE_REMOVED_EXTENDED_DATA2 = 24;

export function allocD3D12_DEVICE_REMOVED_EXTENDED_DATA2(data?: Partial<D3D12_DEVICE_REMOVED_EXTENDED_DATA2>): Uint8Array {
  const buf = new Uint8Array(sizeofD3D12_DEVICE_REMOVED_EXTENDED_DATA2);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.DeviceRemovedReason !== undefined) view.setBigUint64(0, data.DeviceRemovedReason === null ? 0n : util.toBigInt(util.toPointer(data.DeviceRemovedReason)), true);
  // 0x08: pointer
  if (data?.AutoBreadcrumbsOutput !== undefined) view.setBigUint64(8, data.AutoBreadcrumbsOutput === null ? 0n : util.toBigInt(util.toPointer(data.AutoBreadcrumbsOutput)), true);
  // 0x10: pointer
  if (data?.PageFaultOutput !== undefined) view.setBigUint64(16, data.PageFaultOutput === null ? 0n : util.toBigInt(util.toPointer(data.PageFaultOutput)), true);
  return buf;
}

export class D3D12_DEVICE_REMOVED_EXTENDED_DATA2View {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get DeviceRemovedReason(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(0, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x08: pointer
  get AutoBreadcrumbsOutput(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(8, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x10: pointer
  get PageFaultOutput(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(16, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: pointer
  set DeviceRemovedReason(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(0, util.toBigInt(util.toPointer(value)), true);
  }

  // 0x08: pointer
  set AutoBreadcrumbsOutput(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(8, util.toBigInt(util.toPointer(value)), true);
  }

  // 0x10: pointer
  set PageFaultOutput(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(16, util.toBigInt(util.toPointer(value)), true);
  }
}

/**
 * Windows.Win32.Graphics.Direct3D12.D3D12_DEVICE_REMOVED_EXTENDED_DATA3 (size: 32)
 */
export interface D3D12_DEVICE_REMOVED_EXTENDED_DATA3 {
  /** Windows.Win32.Foundation.HRESULT */
  DeviceRemovedReason: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Graphics.Direct3D12.D3D12_DRED_AUTO_BREADCRUMBS_OUTPUT1 */
  AutoBreadcrumbsOutput: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Graphics.Direct3D12.D3D12_DRED_PAGE_FAULT_OUTPUT2 */
  PageFaultOutput: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Graphics.Direct3D12.D3D12_DRED_DEVICE_STATE */
  DeviceState: D3D12_DRED_DEVICE_STATE;
}

export const sizeofD3D12_DEVICE_REMOVED_EXTENDED_DATA3 = 32;

export function allocD3D12_DEVICE_REMOVED_EXTENDED_DATA3(data?: Partial<D3D12_DEVICE_REMOVED_EXTENDED_DATA3>): Uint8Array {
  const buf = new Uint8Array(sizeofD3D12_DEVICE_REMOVED_EXTENDED_DATA3);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.DeviceRemovedReason !== undefined) view.setBigUint64(0, data.DeviceRemovedReason === null ? 0n : util.toBigInt(util.toPointer(data.DeviceRemovedReason)), true);
  // 0x08: pointer
  if (data?.AutoBreadcrumbsOutput !== undefined) view.setBigUint64(8, data.AutoBreadcrumbsOutput === null ? 0n : util.toBigInt(util.toPointer(data.AutoBreadcrumbsOutput)), true);
  // 0x10: pointer
  if (data?.PageFaultOutput !== undefined) view.setBigUint64(16, data.PageFaultOutput === null ? 0n : util.toBigInt(util.toPointer(data.PageFaultOutput)), true);
  // 0x18: i32
  if (data?.DeviceState !== undefined) view.setInt32(24, Number(data.DeviceState), true);
  // 0x1c: pad4
  return buf;
}

export class D3D12_DEVICE_REMOVED_EXTENDED_DATA3View {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get DeviceRemovedReason(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(0, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x08: pointer
  get AutoBreadcrumbsOutput(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(8, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x10: pointer
  get PageFaultOutput(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(16, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x18: i32
  get DeviceState(): number {
    return this.view.getInt32(24, true);
  }

  // 0x1c: pad4

  // 0x00: pointer
  set DeviceRemovedReason(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(0, util.toBigInt(util.toPointer(value)), true);
  }

  // 0x08: pointer
  set AutoBreadcrumbsOutput(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(8, util.toBigInt(util.toPointer(value)), true);
  }

  // 0x10: pointer
  set PageFaultOutput(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(16, util.toBigInt(util.toPointer(value)), true);
  }

  // 0x18: i32
  set DeviceState(value: number) {
    this.view.setInt32(24, value, true);
  }

  // 0x1c: pad4
}

/**
 * Windows.Win32.Graphics.Direct3D12.D3D12_VERSIONED_DEVICE_REMOVED_EXTENDED_DATA (size: 16)
 */
export interface D3D12_VERSIONED_DEVICE_REMOVED_EXTENDED_DATA {
  /** Windows.Win32.Graphics.Direct3D12.D3D12_DRED_VERSION */
  Version: D3D12_DRED_VERSION;
  /** _Anonymous_e__Union */
  Anonymous: Uint8Array | Deno.PointerValue | null;
}

export const sizeofD3D12_VERSIONED_DEVICE_REMOVED_EXTENDED_DATA = 16;

export function allocD3D12_VERSIONED_DEVICE_REMOVED_EXTENDED_DATA(data?: Partial<D3D12_VERSIONED_DEVICE_REMOVED_EXTENDED_DATA>): Uint8Array {
  const buf = new Uint8Array(sizeofD3D12_VERSIONED_DEVICE_REMOVED_EXTENDED_DATA);
  const view = new DataView(buf.buffer);
  // 0x00: i32
  if (data?.Version !== undefined) view.setInt32(0, Number(data.Version), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.Anonymous !== undefined) view.setBigUint64(8, data.Anonymous === null ? 0n : util.toBigInt(util.toPointer(data.Anonymous)), true);
  return buf;
}

export class D3D12_VERSIONED_DEVICE_REMOVED_EXTENDED_DATAView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: i32
  get Version(): number {
    return this.view.getInt32(0, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  get Anonymous(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(8, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: i32
  set Version(value: number) {
    this.view.setInt32(0, value, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  set Anonymous(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(8, util.toBigInt(util.toPointer(value)), true);
  }
}

/**
 * Windows.Win32.Graphics.Direct3D12.D3D12_FEATURE_DATA_PROTECTED_RESOURCE_SESSION_TYPE_COUNT (size: 8)
 */
export interface D3D12_FEATURE_DATA_PROTECTED_RESOURCE_SESSION_TYPE_COUNT {
  /** u32 */
  NodeIndex: number;
  /** u32 */
  Count: number;
}

export const sizeofD3D12_FEATURE_DATA_PROTECTED_RESOURCE_SESSION_TYPE_COUNT = 8;

export function allocD3D12_FEATURE_DATA_PROTECTED_RESOURCE_SESSION_TYPE_COUNT(data?: Partial<D3D12_FEATURE_DATA_PROTECTED_RESOURCE_SESSION_TYPE_COUNT>): Uint8Array {
  const buf = new Uint8Array(sizeofD3D12_FEATURE_DATA_PROTECTED_RESOURCE_SESSION_TYPE_COUNT);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.NodeIndex !== undefined) view.setUint32(0, Number(data.NodeIndex), true);
  // 0x04: u32
  if (data?.Count !== undefined) view.setUint32(4, Number(data.Count), true);
  return buf;
}

export class D3D12_FEATURE_DATA_PROTECTED_RESOURCE_SESSION_TYPE_COUNTView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get NodeIndex(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: u32
  get Count(): number {
    return this.view.getUint32(4, true);
  }

  // 0x00: u32
  set NodeIndex(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: u32
  set Count(value: number) {
    this.view.setUint32(4, value, true);
  }
}

/**
 * Windows.Win32.Graphics.Direct3D12.D3D12_FEATURE_DATA_PROTECTED_RESOURCE_SESSION_TYPES (size: 16)
 */
export interface D3D12_FEATURE_DATA_PROTECTED_RESOURCE_SESSION_TYPES {
  /** u32 */
  NodeIndex: number;
  /** u32 */
  Count: number;
  /** ptr */
  pTypes: Deno.PointerValue | Uint8Array | null;
}

export const sizeofD3D12_FEATURE_DATA_PROTECTED_RESOURCE_SESSION_TYPES = 16;

export function allocD3D12_FEATURE_DATA_PROTECTED_RESOURCE_SESSION_TYPES(data?: Partial<D3D12_FEATURE_DATA_PROTECTED_RESOURCE_SESSION_TYPES>): Uint8Array {
  const buf = new Uint8Array(sizeofD3D12_FEATURE_DATA_PROTECTED_RESOURCE_SESSION_TYPES);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.NodeIndex !== undefined) view.setUint32(0, Number(data.NodeIndex), true);
  // 0x04: u32
  if (data?.Count !== undefined) view.setUint32(4, Number(data.Count), true);
  // 0x08: pointer
  if (data?.pTypes !== undefined) view.setBigUint64(8, data.pTypes === null ? 0n : util.toBigInt(util.toPointer(data.pTypes)), true);
  return buf;
}

export class D3D12_FEATURE_DATA_PROTECTED_RESOURCE_SESSION_TYPESView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get NodeIndex(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: u32
  get Count(): number {
    return this.view.getUint32(4, true);
  }

  // 0x08: pointer
  get pTypes(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(8, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: u32
  set NodeIndex(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: u32
  set Count(value: number) {
    this.view.setUint32(4, value, true);
  }

  // 0x08: pointer
  set pTypes(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(8, util.toBigInt(util.toPointer(value)), true);
  }
}

/**
 * Windows.Win32.Graphics.Direct3D12.D3D12_PROTECTED_RESOURCE_SESSION_DESC1 (size: 16)
 */
export interface D3D12_PROTECTED_RESOURCE_SESSION_DESC1 {
  /** u32 */
  NodeMask: number;
  /** Windows.Win32.Graphics.Direct3D12.D3D12_PROTECTED_RESOURCE_SESSION_FLAGS */
  Flags: D3D12_PROTECTED_RESOURCE_SESSION_FLAGS;
  /** System.Guid */
  ProtectionType: Uint8Array | Deno.PointerValue | null;
}

export const sizeofD3D12_PROTECTED_RESOURCE_SESSION_DESC1 = 16;

export function allocD3D12_PROTECTED_RESOURCE_SESSION_DESC1(data?: Partial<D3D12_PROTECTED_RESOURCE_SESSION_DESC1>): Uint8Array {
  const buf = new Uint8Array(sizeofD3D12_PROTECTED_RESOURCE_SESSION_DESC1);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.NodeMask !== undefined) view.setUint32(0, Number(data.NodeMask), true);
  // 0x04: u32
  if (data?.Flags !== undefined) view.setUint32(4, Number(data.Flags), true);
  // 0x08: pointer
  if (data?.ProtectionType !== undefined) view.setBigUint64(8, data.ProtectionType === null ? 0n : util.toBigInt(util.toPointer(data.ProtectionType)), true);
  return buf;
}

export class D3D12_PROTECTED_RESOURCE_SESSION_DESC1View {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get NodeMask(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: u32
  get Flags(): number {
    return this.view.getUint32(4, true);
  }

  // 0x08: pointer
  get ProtectionType(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(8, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: u32
  set NodeMask(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: u32
  set Flags(value: number) {
    this.view.setUint32(4, value, true);
  }

  // 0x08: pointer
  set ProtectionType(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(8, util.toBigInt(util.toPointer(value)), true);
  }
}

/**
 * Windows.Win32.Graphics.Direct3D12.D3D12_RENDER_PASS_BEGINNING_ACCESS_CLEAR_PARAMETERS (size: 8)
 */
export interface D3D12_RENDER_PASS_BEGINNING_ACCESS_CLEAR_PARAMETERS {
  /** Windows.Win32.Graphics.Direct3D12.D3D12_CLEAR_VALUE */
  ClearValue: Uint8Array | Deno.PointerValue | null;
}

export const sizeofD3D12_RENDER_PASS_BEGINNING_ACCESS_CLEAR_PARAMETERS = 8;

export function allocD3D12_RENDER_PASS_BEGINNING_ACCESS_CLEAR_PARAMETERS(data?: Partial<D3D12_RENDER_PASS_BEGINNING_ACCESS_CLEAR_PARAMETERS>): Uint8Array {
  const buf = new Uint8Array(sizeofD3D12_RENDER_PASS_BEGINNING_ACCESS_CLEAR_PARAMETERS);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.ClearValue !== undefined) view.setBigUint64(0, data.ClearValue === null ? 0n : util.toBigInt(util.toPointer(data.ClearValue)), true);
  return buf;
}

export class D3D12_RENDER_PASS_BEGINNING_ACCESS_CLEAR_PARAMETERSView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get ClearValue(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(0, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: pointer
  set ClearValue(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(0, util.toBigInt(util.toPointer(value)), true);
  }
}

/**
 * Windows.Win32.Graphics.Direct3D12.D3D12_RENDER_PASS_BEGINNING_ACCESS (size: 16)
 */
export interface D3D12_RENDER_PASS_BEGINNING_ACCESS {
  /** Windows.Win32.Graphics.Direct3D12.D3D12_RENDER_PASS_BEGINNING_ACCESS_TYPE */
  Type: D3D12_RENDER_PASS_BEGINNING_ACCESS_TYPE;
  /** _Anonymous_e__Union */
  Anonymous: Uint8Array | Deno.PointerValue | null;
}

export const sizeofD3D12_RENDER_PASS_BEGINNING_ACCESS = 16;

export function allocD3D12_RENDER_PASS_BEGINNING_ACCESS(data?: Partial<D3D12_RENDER_PASS_BEGINNING_ACCESS>): Uint8Array {
  const buf = new Uint8Array(sizeofD3D12_RENDER_PASS_BEGINNING_ACCESS);
  const view = new DataView(buf.buffer);
  // 0x00: i32
  if (data?.Type !== undefined) view.setInt32(0, Number(data.Type), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.Anonymous !== undefined) view.setBigUint64(8, data.Anonymous === null ? 0n : util.toBigInt(util.toPointer(data.Anonymous)), true);
  return buf;
}

export class D3D12_RENDER_PASS_BEGINNING_ACCESSView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: i32
  get Type(): number {
    return this.view.getInt32(0, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  get Anonymous(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(8, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: i32
  set Type(value: number) {
    this.view.setInt32(0, value, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  set Anonymous(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(8, util.toBigInt(util.toPointer(value)), true);
  }
}

/**
 * Windows.Win32.Foundation.RECT (size: 16)
 */
export interface RECT {
  /** i32 */
  left: number;
  /** i32 */
  top: number;
  /** i32 */
  right: number;
  /** i32 */
  bottom: number;
}

export const sizeofRECT = 16;

export function allocRECT(data?: Partial<RECT>): Uint8Array {
  const buf = new Uint8Array(sizeofRECT);
  const view = new DataView(buf.buffer);
  // 0x00: i32
  if (data?.left !== undefined) view.setInt32(0, Number(data.left), true);
  // 0x04: i32
  if (data?.top !== undefined) view.setInt32(4, Number(data.top), true);
  // 0x08: i32
  if (data?.right !== undefined) view.setInt32(8, Number(data.right), true);
  // 0x0c: i32
  if (data?.bottom !== undefined) view.setInt32(12, Number(data.bottom), true);
  return buf;
}

export class RECTView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: i32
  get left(): number {
    return this.view.getInt32(0, true);
  }

  // 0x04: i32
  get top(): number {
    return this.view.getInt32(4, true);
  }

  // 0x08: i32
  get right(): number {
    return this.view.getInt32(8, true);
  }

  // 0x0c: i32
  get bottom(): number {
    return this.view.getInt32(12, true);
  }

  // 0x00: i32
  set left(value: number) {
    this.view.setInt32(0, value, true);
  }

  // 0x04: i32
  set top(value: number) {
    this.view.setInt32(4, value, true);
  }

  // 0x08: i32
  set right(value: number) {
    this.view.setInt32(8, value, true);
  }

  // 0x0c: i32
  set bottom(value: number) {
    this.view.setInt32(12, value, true);
  }
}

/**
 * Windows.Win32.Graphics.Direct3D12.D3D12_RENDER_PASS_ENDING_ACCESS_RESOLVE_SUBRESOURCE_PARAMETERS (size: 24)
 */
export interface D3D12_RENDER_PASS_ENDING_ACCESS_RESOLVE_SUBRESOURCE_PARAMETERS {
  /** u32 */
  SrcSubresource: number;
  /** u32 */
  DstSubresource: number;
  /** u32 */
  DstX: number;
  /** u32 */
  DstY: number;
  /** Windows.Win32.Foundation.RECT */
  SrcRect: Uint8Array | Deno.PointerValue | null;
}

export const sizeofD3D12_RENDER_PASS_ENDING_ACCESS_RESOLVE_SUBRESOURCE_PARAMETERS = 24;

export function allocD3D12_RENDER_PASS_ENDING_ACCESS_RESOLVE_SUBRESOURCE_PARAMETERS(data?: Partial<D3D12_RENDER_PASS_ENDING_ACCESS_RESOLVE_SUBRESOURCE_PARAMETERS>): Uint8Array {
  const buf = new Uint8Array(sizeofD3D12_RENDER_PASS_ENDING_ACCESS_RESOLVE_SUBRESOURCE_PARAMETERS);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.SrcSubresource !== undefined) view.setUint32(0, Number(data.SrcSubresource), true);
  // 0x04: u32
  if (data?.DstSubresource !== undefined) view.setUint32(4, Number(data.DstSubresource), true);
  // 0x08: u32
  if (data?.DstX !== undefined) view.setUint32(8, Number(data.DstX), true);
  // 0x0c: u32
  if (data?.DstY !== undefined) view.setUint32(12, Number(data.DstY), true);
  // 0x10: pointer
  if (data?.SrcRect !== undefined) view.setBigUint64(16, data.SrcRect === null ? 0n : util.toBigInt(util.toPointer(data.SrcRect)), true);
  return buf;
}

export class D3D12_RENDER_PASS_ENDING_ACCESS_RESOLVE_SUBRESOURCE_PARAMETERSView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get SrcSubresource(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: u32
  get DstSubresource(): number {
    return this.view.getUint32(4, true);
  }

  // 0x08: u32
  get DstX(): number {
    return this.view.getUint32(8, true);
  }

  // 0x0c: u32
  get DstY(): number {
    return this.view.getUint32(12, true);
  }

  // 0x10: pointer
  get SrcRect(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(16, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: u32
  set SrcSubresource(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: u32
  set DstSubresource(value: number) {
    this.view.setUint32(4, value, true);
  }

  // 0x08: u32
  set DstX(value: number) {
    this.view.setUint32(8, value, true);
  }

  // 0x0c: u32
  set DstY(value: number) {
    this.view.setUint32(12, value, true);
  }

  // 0x10: pointer
  set SrcRect(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(16, util.toBigInt(util.toPointer(value)), true);
  }
}

/**
 * Windows.Win32.Graphics.Direct3D12.D3D12_RENDER_PASS_ENDING_ACCESS_RESOLVE_PARAMETERS (size: 48)
 */
export interface D3D12_RENDER_PASS_ENDING_ACCESS_RESOLVE_PARAMETERS {
  /** Windows.Win32.Graphics.Direct3D12.ID3D12Resource */
  pSrcResource: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Graphics.Direct3D12.ID3D12Resource */
  pDstResource: Uint8Array | Deno.PointerValue | null;
  /** u32 */
  SubresourceCount: number;
  /** ptr */
  pSubresourceParameters: Deno.PointerValue | Uint8Array | null;
  /** Windows.Win32.Graphics.Dxgi.Common.DXGI_FORMAT */
  Format: DXGI_FORMAT;
  /** Windows.Win32.Graphics.Direct3D12.D3D12_RESOLVE_MODE */
  ResolveMode: D3D12_RESOLVE_MODE;
  /** Windows.Win32.Foundation.BOOL */
  PreserveResolveSource: boolean;
}

export const sizeofD3D12_RENDER_PASS_ENDING_ACCESS_RESOLVE_PARAMETERS = 48;

export function allocD3D12_RENDER_PASS_ENDING_ACCESS_RESOLVE_PARAMETERS(data?: Partial<D3D12_RENDER_PASS_ENDING_ACCESS_RESOLVE_PARAMETERS>): Uint8Array {
  const buf = new Uint8Array(sizeofD3D12_RENDER_PASS_ENDING_ACCESS_RESOLVE_PARAMETERS);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.pSrcResource !== undefined) view.setBigUint64(0, data.pSrcResource === null ? 0n : util.toBigInt(util.toPointer(data.pSrcResource)), true);
  // 0x08: pointer
  if (data?.pDstResource !== undefined) view.setBigUint64(8, data.pDstResource === null ? 0n : util.toBigInt(util.toPointer(data.pDstResource)), true);
  // 0x10: u32
  if (data?.SubresourceCount !== undefined) view.setUint32(16, Number(data.SubresourceCount), true);
  // 0x14: pad4
  // 0x18: pointer
  if (data?.pSubresourceParameters !== undefined) view.setBigUint64(24, data.pSubresourceParameters === null ? 0n : util.toBigInt(util.toPointer(data.pSubresourceParameters)), true);
  // 0x20: u32
  if (data?.Format !== undefined) view.setUint32(32, Number(data.Format), true);
  // 0x24: i32
  if (data?.ResolveMode !== undefined) view.setInt32(36, Number(data.ResolveMode), true);
  // 0x28: i32
  if (data?.PreserveResolveSource !== undefined) view.setInt32(40, Number(data.PreserveResolveSource), true);
  // 0x2c: pad4
  return buf;
}

export class D3D12_RENDER_PASS_ENDING_ACCESS_RESOLVE_PARAMETERSView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get pSrcResource(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(0, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x08: pointer
  get pDstResource(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(8, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x10: u32
  get SubresourceCount(): number {
    return this.view.getUint32(16, true);
  }

  // 0x14: pad4

  // 0x18: pointer
  get pSubresourceParameters(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(24, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x20: u32
  get Format(): number {
    return this.view.getUint32(32, true);
  }

  // 0x24: i32
  get ResolveMode(): number {
    return this.view.getInt32(36, true);
  }

  // 0x28: i32
  get PreserveResolveSource(): number {
    return this.view.getInt32(40, true);
  }

  // 0x2c: pad4

  // 0x00: pointer
  set pSrcResource(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(0, util.toBigInt(util.toPointer(value)), true);
  }

  // 0x08: pointer
  set pDstResource(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(8, util.toBigInt(util.toPointer(value)), true);
  }

  // 0x10: u32
  set SubresourceCount(value: number) {
    this.view.setUint32(16, value, true);
  }

  // 0x14: pad4

  // 0x18: pointer
  set pSubresourceParameters(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(24, util.toBigInt(util.toPointer(value)), true);
  }

  // 0x20: u32
  set Format(value: number) {
    this.view.setUint32(32, value, true);
  }

  // 0x24: i32
  set ResolveMode(value: number) {
    this.view.setInt32(36, value, true);
  }

  // 0x28: i32
  set PreserveResolveSource(value: number) {
    this.view.setInt32(40, value, true);
  }

  // 0x2c: pad4
}

/**
 * Windows.Win32.Graphics.Direct3D12.D3D12_RENDER_PASS_ENDING_ACCESS (size: 16)
 */
export interface D3D12_RENDER_PASS_ENDING_ACCESS {
  /** Windows.Win32.Graphics.Direct3D12.D3D12_RENDER_PASS_ENDING_ACCESS_TYPE */
  Type: D3D12_RENDER_PASS_ENDING_ACCESS_TYPE;
  /** _Anonymous_e__Union */
  Anonymous: Uint8Array | Deno.PointerValue | null;
}

export const sizeofD3D12_RENDER_PASS_ENDING_ACCESS = 16;

export function allocD3D12_RENDER_PASS_ENDING_ACCESS(data?: Partial<D3D12_RENDER_PASS_ENDING_ACCESS>): Uint8Array {
  const buf = new Uint8Array(sizeofD3D12_RENDER_PASS_ENDING_ACCESS);
  const view = new DataView(buf.buffer);
  // 0x00: i32
  if (data?.Type !== undefined) view.setInt32(0, Number(data.Type), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.Anonymous !== undefined) view.setBigUint64(8, data.Anonymous === null ? 0n : util.toBigInt(util.toPointer(data.Anonymous)), true);
  return buf;
}

export class D3D12_RENDER_PASS_ENDING_ACCESSView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: i32
  get Type(): number {
    return this.view.getInt32(0, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  get Anonymous(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(8, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: i32
  set Type(value: number) {
    this.view.setInt32(0, value, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  set Anonymous(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(8, util.toBigInt(util.toPointer(value)), true);
  }
}

/**
 * Windows.Win32.Graphics.Direct3D12.D3D12_RENDER_PASS_RENDER_TARGET_DESC (size: 24)
 */
export interface D3D12_RENDER_PASS_RENDER_TARGET_DESC {
  /** Windows.Win32.Graphics.Direct3D12.D3D12_CPU_DESCRIPTOR_HANDLE */
  cpuDescriptor: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Graphics.Direct3D12.D3D12_RENDER_PASS_BEGINNING_ACCESS */
  BeginningAccess: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Graphics.Direct3D12.D3D12_RENDER_PASS_ENDING_ACCESS */
  EndingAccess: Uint8Array | Deno.PointerValue | null;
}

export const sizeofD3D12_RENDER_PASS_RENDER_TARGET_DESC = 24;

export function allocD3D12_RENDER_PASS_RENDER_TARGET_DESC(data?: Partial<D3D12_RENDER_PASS_RENDER_TARGET_DESC>): Uint8Array {
  const buf = new Uint8Array(sizeofD3D12_RENDER_PASS_RENDER_TARGET_DESC);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.cpuDescriptor !== undefined) view.setBigUint64(0, data.cpuDescriptor === null ? 0n : util.toBigInt(util.toPointer(data.cpuDescriptor)), true);
  // 0x08: pointer
  if (data?.BeginningAccess !== undefined) view.setBigUint64(8, data.BeginningAccess === null ? 0n : util.toBigInt(util.toPointer(data.BeginningAccess)), true);
  // 0x10: pointer
  if (data?.EndingAccess !== undefined) view.setBigUint64(16, data.EndingAccess === null ? 0n : util.toBigInt(util.toPointer(data.EndingAccess)), true);
  return buf;
}

export class D3D12_RENDER_PASS_RENDER_TARGET_DESCView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get cpuDescriptor(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(0, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x08: pointer
  get BeginningAccess(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(8, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x10: pointer
  get EndingAccess(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(16, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: pointer
  set cpuDescriptor(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(0, util.toBigInt(util.toPointer(value)), true);
  }

  // 0x08: pointer
  set BeginningAccess(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(8, util.toBigInt(util.toPointer(value)), true);
  }

  // 0x10: pointer
  set EndingAccess(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(16, util.toBigInt(util.toPointer(value)), true);
  }
}

/**
 * Windows.Win32.Graphics.Direct3D12.D3D12_RENDER_PASS_DEPTH_STENCIL_DESC (size: 40)
 */
export interface D3D12_RENDER_PASS_DEPTH_STENCIL_DESC {
  /** Windows.Win32.Graphics.Direct3D12.D3D12_CPU_DESCRIPTOR_HANDLE */
  cpuDescriptor: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Graphics.Direct3D12.D3D12_RENDER_PASS_BEGINNING_ACCESS */
  DepthBeginningAccess: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Graphics.Direct3D12.D3D12_RENDER_PASS_BEGINNING_ACCESS */
  StencilBeginningAccess: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Graphics.Direct3D12.D3D12_RENDER_PASS_ENDING_ACCESS */
  DepthEndingAccess: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Graphics.Direct3D12.D3D12_RENDER_PASS_ENDING_ACCESS */
  StencilEndingAccess: Uint8Array | Deno.PointerValue | null;
}

export const sizeofD3D12_RENDER_PASS_DEPTH_STENCIL_DESC = 40;

export function allocD3D12_RENDER_PASS_DEPTH_STENCIL_DESC(data?: Partial<D3D12_RENDER_PASS_DEPTH_STENCIL_DESC>): Uint8Array {
  const buf = new Uint8Array(sizeofD3D12_RENDER_PASS_DEPTH_STENCIL_DESC);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.cpuDescriptor !== undefined) view.setBigUint64(0, data.cpuDescriptor === null ? 0n : util.toBigInt(util.toPointer(data.cpuDescriptor)), true);
  // 0x08: pointer
  if (data?.DepthBeginningAccess !== undefined) view.setBigUint64(8, data.DepthBeginningAccess === null ? 0n : util.toBigInt(util.toPointer(data.DepthBeginningAccess)), true);
  // 0x10: pointer
  if (data?.StencilBeginningAccess !== undefined) view.setBigUint64(16, data.StencilBeginningAccess === null ? 0n : util.toBigInt(util.toPointer(data.StencilBeginningAccess)), true);
  // 0x18: pointer
  if (data?.DepthEndingAccess !== undefined) view.setBigUint64(24, data.DepthEndingAccess === null ? 0n : util.toBigInt(util.toPointer(data.DepthEndingAccess)), true);
  // 0x20: pointer
  if (data?.StencilEndingAccess !== undefined) view.setBigUint64(32, data.StencilEndingAccess === null ? 0n : util.toBigInt(util.toPointer(data.StencilEndingAccess)), true);
  return buf;
}

export class D3D12_RENDER_PASS_DEPTH_STENCIL_DESCView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get cpuDescriptor(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(0, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x08: pointer
  get DepthBeginningAccess(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(8, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x10: pointer
  get StencilBeginningAccess(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(16, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x18: pointer
  get DepthEndingAccess(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(24, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x20: pointer
  get StencilEndingAccess(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(32, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: pointer
  set cpuDescriptor(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(0, util.toBigInt(util.toPointer(value)), true);
  }

  // 0x08: pointer
  set DepthBeginningAccess(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(8, util.toBigInt(util.toPointer(value)), true);
  }

  // 0x10: pointer
  set StencilBeginningAccess(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(16, util.toBigInt(util.toPointer(value)), true);
  }

  // 0x18: pointer
  set DepthEndingAccess(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(24, util.toBigInt(util.toPointer(value)), true);
  }

  // 0x20: pointer
  set StencilEndingAccess(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(32, util.toBigInt(util.toPointer(value)), true);
  }
}

/**
 * Windows.Win32.Graphics.Direct3D12.D3D12_DISPATCH_RAYS_DESC (size: 48)
 */
export interface D3D12_DISPATCH_RAYS_DESC {
  /** Windows.Win32.Graphics.Direct3D12.D3D12_GPU_VIRTUAL_ADDRESS_RANGE */
  RayGenerationShaderRecord: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Graphics.Direct3D12.D3D12_GPU_VIRTUAL_ADDRESS_RANGE_AND_STRIDE */
  MissShaderTable: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Graphics.Direct3D12.D3D12_GPU_VIRTUAL_ADDRESS_RANGE_AND_STRIDE */
  HitGroupTable: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Graphics.Direct3D12.D3D12_GPU_VIRTUAL_ADDRESS_RANGE_AND_STRIDE */
  CallableShaderTable: Uint8Array | Deno.PointerValue | null;
  /** u32 */
  Width: number;
  /** u32 */
  Height: number;
  /** u32 */
  Depth: number;
}

export const sizeofD3D12_DISPATCH_RAYS_DESC = 48;

export function allocD3D12_DISPATCH_RAYS_DESC(data?: Partial<D3D12_DISPATCH_RAYS_DESC>): Uint8Array {
  const buf = new Uint8Array(sizeofD3D12_DISPATCH_RAYS_DESC);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.RayGenerationShaderRecord !== undefined) view.setBigUint64(0, data.RayGenerationShaderRecord === null ? 0n : util.toBigInt(util.toPointer(data.RayGenerationShaderRecord)), true);
  // 0x08: pointer
  if (data?.MissShaderTable !== undefined) view.setBigUint64(8, data.MissShaderTable === null ? 0n : util.toBigInt(util.toPointer(data.MissShaderTable)), true);
  // 0x10: pointer
  if (data?.HitGroupTable !== undefined) view.setBigUint64(16, data.HitGroupTable === null ? 0n : util.toBigInt(util.toPointer(data.HitGroupTable)), true);
  // 0x18: pointer
  if (data?.CallableShaderTable !== undefined) view.setBigUint64(24, data.CallableShaderTable === null ? 0n : util.toBigInt(util.toPointer(data.CallableShaderTable)), true);
  // 0x20: u32
  if (data?.Width !== undefined) view.setUint32(32, Number(data.Width), true);
  // 0x24: u32
  if (data?.Height !== undefined) view.setUint32(36, Number(data.Height), true);
  // 0x28: u32
  if (data?.Depth !== undefined) view.setUint32(40, Number(data.Depth), true);
  // 0x2c: pad4
  return buf;
}

export class D3D12_DISPATCH_RAYS_DESCView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get RayGenerationShaderRecord(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(0, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x08: pointer
  get MissShaderTable(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(8, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x10: pointer
  get HitGroupTable(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(16, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x18: pointer
  get CallableShaderTable(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(24, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x20: u32
  get Width(): number {
    return this.view.getUint32(32, true);
  }

  // 0x24: u32
  get Height(): number {
    return this.view.getUint32(36, true);
  }

  // 0x28: u32
  get Depth(): number {
    return this.view.getUint32(40, true);
  }

  // 0x2c: pad4

  // 0x00: pointer
  set RayGenerationShaderRecord(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(0, util.toBigInt(util.toPointer(value)), true);
  }

  // 0x08: pointer
  set MissShaderTable(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(8, util.toBigInt(util.toPointer(value)), true);
  }

  // 0x10: pointer
  set HitGroupTable(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(16, util.toBigInt(util.toPointer(value)), true);
  }

  // 0x18: pointer
  set CallableShaderTable(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(24, util.toBigInt(util.toPointer(value)), true);
  }

  // 0x20: u32
  set Width(value: number) {
    this.view.setUint32(32, value, true);
  }

  // 0x24: u32
  set Height(value: number) {
    this.view.setUint32(36, value, true);
  }

  // 0x28: u32
  set Depth(value: number) {
    this.view.setUint32(40, value, true);
  }

  // 0x2c: pad4
}

/**
 * Windows.Win32.Graphics.Direct3D12.D3D12_SHADER_CACHE_SESSION_DESC (size: 40)
 */
export interface D3D12_SHADER_CACHE_SESSION_DESC {
  /** System.Guid */
  Identifier: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Graphics.Direct3D12.D3D12_SHADER_CACHE_MODE */
  Mode: D3D12_SHADER_CACHE_MODE;
  /** Windows.Win32.Graphics.Direct3D12.D3D12_SHADER_CACHE_FLAGS */
  Flags: D3D12_SHADER_CACHE_FLAGS;
  /** u32 */
  MaximumInMemoryCacheSizeBytes: number;
  /** u32 */
  MaximumInMemoryCacheEntries: number;
  /** u32 */
  MaximumValueFileSizeBytes: number;
  /** u64 */
  Version: number | bigint;
}

export const sizeofD3D12_SHADER_CACHE_SESSION_DESC = 40;

export function allocD3D12_SHADER_CACHE_SESSION_DESC(data?: Partial<D3D12_SHADER_CACHE_SESSION_DESC>): Uint8Array {
  const buf = new Uint8Array(sizeofD3D12_SHADER_CACHE_SESSION_DESC);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.Identifier !== undefined) view.setBigUint64(0, data.Identifier === null ? 0n : util.toBigInt(util.toPointer(data.Identifier)), true);
  // 0x08: i32
  if (data?.Mode !== undefined) view.setInt32(8, Number(data.Mode), true);
  // 0x0c: u32
  if (data?.Flags !== undefined) view.setUint32(12, Number(data.Flags), true);
  // 0x10: u32
  if (data?.MaximumInMemoryCacheSizeBytes !== undefined) view.setUint32(16, Number(data.MaximumInMemoryCacheSizeBytes), true);
  // 0x14: u32
  if (data?.MaximumInMemoryCacheEntries !== undefined) view.setUint32(20, Number(data.MaximumInMemoryCacheEntries), true);
  // 0x18: u32
  if (data?.MaximumValueFileSizeBytes !== undefined) view.setUint32(24, Number(data.MaximumValueFileSizeBytes), true);
  // 0x1c: pad4
  // 0x20: u64
  if (data?.Version !== undefined) view.setBigUint64(32, util.toBigInt(data.Version), true);
  return buf;
}

export class D3D12_SHADER_CACHE_SESSION_DESCView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get Identifier(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(0, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x08: i32
  get Mode(): number {
    return this.view.getInt32(8, true);
  }

  // 0x0c: u32
  get Flags(): number {
    return this.view.getUint32(12, true);
  }

  // 0x10: u32
  get MaximumInMemoryCacheSizeBytes(): number {
    return this.view.getUint32(16, true);
  }

  // 0x14: u32
  get MaximumInMemoryCacheEntries(): number {
    return this.view.getUint32(20, true);
  }

  // 0x18: u32
  get MaximumValueFileSizeBytes(): number {
    return this.view.getUint32(24, true);
  }

  // 0x1c: pad4

  // 0x20: u64
  get Version(): number | bigint {
    return this.view.getBigUint64(32, true);
  }

  // 0x00: pointer
  set Identifier(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(0, util.toBigInt(util.toPointer(value)), true);
  }

  // 0x08: i32
  set Mode(value: number) {
    this.view.setInt32(8, value, true);
  }

  // 0x0c: u32
  set Flags(value: number) {
    this.view.setUint32(12, value, true);
  }

  // 0x10: u32
  set MaximumInMemoryCacheSizeBytes(value: number) {
    this.view.setUint32(16, value, true);
  }

  // 0x14: u32
  set MaximumInMemoryCacheEntries(value: number) {
    this.view.setUint32(20, value, true);
  }

  // 0x18: u32
  set MaximumValueFileSizeBytes(value: number) {
    this.view.setUint32(24, value, true);
  }

  // 0x1c: pad4

  // 0x20: u64
  set Version(value: number | bigint) {
    this.view.setBigUint64(32, util.toBigInt(value), true);
  }
}

/**
 * Windows.Win32.Graphics.Direct3D12.D3D12_SUBRESOURCE_DATA (size: 24)
 */
export interface D3D12_SUBRESOURCE_DATA {
  /** ptr */
  pData: Deno.PointerValue | Uint8Array | null;
  /** isize */
  RowPitch: number | bigint;
  /** isize */
  SlicePitch: number | bigint;
}

export const sizeofD3D12_SUBRESOURCE_DATA = 24;

export function allocD3D12_SUBRESOURCE_DATA(data?: Partial<D3D12_SUBRESOURCE_DATA>): Uint8Array {
  const buf = new Uint8Array(sizeofD3D12_SUBRESOURCE_DATA);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.pData !== undefined) view.setBigUint64(0, data.pData === null ? 0n : util.toBigInt(util.toPointer(data.pData)), true);
  // 0x08: isize
  if (data?.RowPitch !== undefined) view.setBigInt64(8, util.toBigInt(data.RowPitch), true);
  // 0x10: isize
  if (data?.SlicePitch !== undefined) view.setBigInt64(16, util.toBigInt(data.SlicePitch), true);
  return buf;
}

export class D3D12_SUBRESOURCE_DATAView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get pData(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(0, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x08: isize
  get RowPitch(): number | bigint {
    return this.view.getBigInt64(8, true);
  }

  // 0x10: isize
  get SlicePitch(): number | bigint {
    return this.view.getBigInt64(16, true);
  }

  // 0x00: pointer
  set pData(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(0, util.toBigInt(util.toPointer(value)), true);
  }

  // 0x08: isize
  set RowPitch(value: number | bigint) {
    this.view.setBigInt64(8, util.toBigInt(value), true);
  }

  // 0x10: isize
  set SlicePitch(value: number | bigint) {
    this.view.setBigInt64(16, util.toBigInt(value), true);
  }
}

/**
 * Windows.Win32.Graphics.Direct3D12.D3D12_MEMCPY_DEST (size: 24)
 */
export interface D3D12_MEMCPY_DEST {
  /** ptr */
  pData: Deno.PointerValue | Uint8Array | null;
  /** usize */
  RowPitch: number | bigint;
  /** usize */
  SlicePitch: number | bigint;
}

export const sizeofD3D12_MEMCPY_DEST = 24;

export function allocD3D12_MEMCPY_DEST(data?: Partial<D3D12_MEMCPY_DEST>): Uint8Array {
  const buf = new Uint8Array(sizeofD3D12_MEMCPY_DEST);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.pData !== undefined) view.setBigUint64(0, data.pData === null ? 0n : util.toBigInt(util.toPointer(data.pData)), true);
  // 0x08: usize
  if (data?.RowPitch !== undefined) view.setBigUint64(8, util.toBigInt(data.RowPitch), true);
  // 0x10: usize
  if (data?.SlicePitch !== undefined) view.setBigUint64(16, util.toBigInt(data.SlicePitch), true);
  return buf;
}

export class D3D12_MEMCPY_DESTView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get pData(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(0, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x08: usize
  get RowPitch(): number | bigint {
    return this.view.getBigUint64(8, true);
  }

  // 0x10: usize
  get SlicePitch(): number | bigint {
    return this.view.getBigUint64(16, true);
  }

  // 0x00: pointer
  set pData(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(0, util.toBigInt(util.toPointer(value)), true);
  }

  // 0x08: usize
  set RowPitch(value: number | bigint) {
    this.view.setBigUint64(8, util.toBigInt(value), true);
  }

  // 0x10: usize
  set SlicePitch(value: number | bigint) {
    this.view.setBigUint64(16, util.toBigInt(value), true);
  }
}

/**
 * Windows.Win32.Graphics.Direct3D12.D3D12_DEBUG_DEVICE_GPU_BASED_VALIDATION_SETTINGS (size: 16)
 */
export interface D3D12_DEBUG_DEVICE_GPU_BASED_VALIDATION_SETTINGS {
  /** u32 */
  MaxMessagesPerCommandList: number;
  /** Windows.Win32.Graphics.Direct3D12.D3D12_GPU_BASED_VALIDATION_SHADER_PATCH_MODE */
  DefaultShaderPatchMode: D3D12_GPU_BASED_VALIDATION_SHADER_PATCH_MODE;
  /** Windows.Win32.Graphics.Direct3D12.D3D12_GPU_BASED_VALIDATION_PIPELINE_STATE_CREATE_FLAGS */
  PipelineStateCreateFlags: D3D12_GPU_BASED_VALIDATION_PIPELINE_STATE_CREATE_FLAGS;
}

export const sizeofD3D12_DEBUG_DEVICE_GPU_BASED_VALIDATION_SETTINGS = 16;

export function allocD3D12_DEBUG_DEVICE_GPU_BASED_VALIDATION_SETTINGS(data?: Partial<D3D12_DEBUG_DEVICE_GPU_BASED_VALIDATION_SETTINGS>): Uint8Array {
  const buf = new Uint8Array(sizeofD3D12_DEBUG_DEVICE_GPU_BASED_VALIDATION_SETTINGS);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.MaxMessagesPerCommandList !== undefined) view.setUint32(0, Number(data.MaxMessagesPerCommandList), true);
  // 0x04: i32
  if (data?.DefaultShaderPatchMode !== undefined) view.setInt32(4, Number(data.DefaultShaderPatchMode), true);
  // 0x08: i32
  if (data?.PipelineStateCreateFlags !== undefined) view.setInt32(8, Number(data.PipelineStateCreateFlags), true);
  // 0x0c: pad4
  return buf;
}

export class D3D12_DEBUG_DEVICE_GPU_BASED_VALIDATION_SETTINGSView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get MaxMessagesPerCommandList(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: i32
  get DefaultShaderPatchMode(): number {
    return this.view.getInt32(4, true);
  }

  // 0x08: i32
  get PipelineStateCreateFlags(): number {
    return this.view.getInt32(8, true);
  }

  // 0x0c: pad4

  // 0x00: u32
  set MaxMessagesPerCommandList(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: i32
  set DefaultShaderPatchMode(value: number) {
    this.view.setInt32(4, value, true);
  }

  // 0x08: i32
  set PipelineStateCreateFlags(value: number) {
    this.view.setInt32(8, value, true);
  }

  // 0x0c: pad4
}

/**
 * Windows.Win32.Graphics.Direct3D12.D3D12_DEBUG_DEVICE_GPU_SLOWDOWN_PERFORMANCE_FACTOR (size: 8)
 */
export interface D3D12_DEBUG_DEVICE_GPU_SLOWDOWN_PERFORMANCE_FACTOR {
  /** f32 */
  SlowdownFactor: number;
}

export const sizeofD3D12_DEBUG_DEVICE_GPU_SLOWDOWN_PERFORMANCE_FACTOR = 8;

export function allocD3D12_DEBUG_DEVICE_GPU_SLOWDOWN_PERFORMANCE_FACTOR(data?: Partial<D3D12_DEBUG_DEVICE_GPU_SLOWDOWN_PERFORMANCE_FACTOR>): Uint8Array {
  const buf = new Uint8Array(sizeofD3D12_DEBUG_DEVICE_GPU_SLOWDOWN_PERFORMANCE_FACTOR);
  const view = new DataView(buf.buffer);
  // 0x00: f32
  if (data?.SlowdownFactor !== undefined) view.setFloat32(0, Number(data.SlowdownFactor), true);
  // 0x04: pad4
  return buf;
}

export class D3D12_DEBUG_DEVICE_GPU_SLOWDOWN_PERFORMANCE_FACTORView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: f32
  get SlowdownFactor(): number {
    return this.view.getFloat32(0, true);
  }

  // 0x04: pad4

  // 0x00: f32
  set SlowdownFactor(value: number) {
    this.view.setFloat32(0, value, true);
  }

  // 0x04: pad4
}

/**
 * Windows.Win32.Graphics.Direct3D12.D3D12_DEBUG_COMMAND_LIST_GPU_BASED_VALIDATION_SETTINGS (size: 8)
 */
export interface D3D12_DEBUG_COMMAND_LIST_GPU_BASED_VALIDATION_SETTINGS {
  /** Windows.Win32.Graphics.Direct3D12.D3D12_GPU_BASED_VALIDATION_SHADER_PATCH_MODE */
  ShaderPatchMode: D3D12_GPU_BASED_VALIDATION_SHADER_PATCH_MODE;
}

export const sizeofD3D12_DEBUG_COMMAND_LIST_GPU_BASED_VALIDATION_SETTINGS = 8;

export function allocD3D12_DEBUG_COMMAND_LIST_GPU_BASED_VALIDATION_SETTINGS(data?: Partial<D3D12_DEBUG_COMMAND_LIST_GPU_BASED_VALIDATION_SETTINGS>): Uint8Array {
  const buf = new Uint8Array(sizeofD3D12_DEBUG_COMMAND_LIST_GPU_BASED_VALIDATION_SETTINGS);
  const view = new DataView(buf.buffer);
  // 0x00: i32
  if (data?.ShaderPatchMode !== undefined) view.setInt32(0, Number(data.ShaderPatchMode), true);
  // 0x04: pad4
  return buf;
}

export class D3D12_DEBUG_COMMAND_LIST_GPU_BASED_VALIDATION_SETTINGSView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: i32
  get ShaderPatchMode(): number {
    return this.view.getInt32(0, true);
  }

  // 0x04: pad4

  // 0x00: i32
  set ShaderPatchMode(value: number) {
    this.view.setInt32(0, value, true);
  }

  // 0x04: pad4
}

/**
 * Windows.Win32.Graphics.Direct3D12.D3D12_MESSAGE (size: 32)
 */
export interface D3D12_MESSAGE {
  /** Windows.Win32.Graphics.Direct3D12.D3D12_MESSAGE_CATEGORY */
  Category: D3D12_MESSAGE_CATEGORY;
  /** Windows.Win32.Graphics.Direct3D12.D3D12_MESSAGE_SEVERITY */
  Severity: D3D12_MESSAGE_SEVERITY;
  /** Windows.Win32.Graphics.Direct3D12.D3D12_MESSAGE_ID */
  ID: D3D12_MESSAGE_ID;
  /** ptr */
  pDescription: Deno.PointerValue | Uint8Array | null;
  /** usize */
  DescriptionByteLength: number | bigint;
}

export const sizeofD3D12_MESSAGE = 32;

export function allocD3D12_MESSAGE(data?: Partial<D3D12_MESSAGE>): Uint8Array {
  const buf = new Uint8Array(sizeofD3D12_MESSAGE);
  const view = new DataView(buf.buffer);
  // 0x00: i32
  if (data?.Category !== undefined) view.setInt32(0, Number(data.Category), true);
  // 0x04: i32
  if (data?.Severity !== undefined) view.setInt32(4, Number(data.Severity), true);
  // 0x08: i32
  if (data?.ID !== undefined) view.setInt32(8, Number(data.ID), true);
  // 0x0c: pad4
  // 0x10: pointer
  if (data?.pDescription !== undefined) view.setBigUint64(16, data.pDescription === null ? 0n : util.toBigInt(util.toPointer(data.pDescription)), true);
  // 0x18: usize
  if (data?.DescriptionByteLength !== undefined) view.setBigUint64(24, util.toBigInt(data.DescriptionByteLength), true);
  return buf;
}

export class D3D12_MESSAGEView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: i32
  get Category(): number {
    return this.view.getInt32(0, true);
  }

  // 0x04: i32
  get Severity(): number {
    return this.view.getInt32(4, true);
  }

  // 0x08: i32
  get ID(): number {
    return this.view.getInt32(8, true);
  }

  // 0x0c: pad4

  // 0x10: pointer
  get pDescription(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(16, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x18: usize
  get DescriptionByteLength(): number | bigint {
    return this.view.getBigUint64(24, true);
  }

  // 0x00: i32
  set Category(value: number) {
    this.view.setInt32(0, value, true);
  }

  // 0x04: i32
  set Severity(value: number) {
    this.view.setInt32(4, value, true);
  }

  // 0x08: i32
  set ID(value: number) {
    this.view.setInt32(8, value, true);
  }

  // 0x0c: pad4

  // 0x10: pointer
  set pDescription(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(16, util.toBigInt(util.toPointer(value)), true);
  }

  // 0x18: usize
  set DescriptionByteLength(value: number | bigint) {
    this.view.setBigUint64(24, util.toBigInt(value), true);
  }
}

/**
 * Windows.Win32.Graphics.Direct3D12.D3D12_INFO_QUEUE_FILTER_DESC (size: 48)
 */
export interface D3D12_INFO_QUEUE_FILTER_DESC {
  /** u32 */
  NumCategories: number;
  /** ptr */
  pCategoryList: Deno.PointerValue | Uint8Array | null;
  /** u32 */
  NumSeverities: number;
  /** ptr */
  pSeverityList: Deno.PointerValue | Uint8Array | null;
  /** u32 */
  NumIDs: number;
  /** ptr */
  pIDList: Deno.PointerValue | Uint8Array | null;
}

export const sizeofD3D12_INFO_QUEUE_FILTER_DESC = 48;

export function allocD3D12_INFO_QUEUE_FILTER_DESC(data?: Partial<D3D12_INFO_QUEUE_FILTER_DESC>): Uint8Array {
  const buf = new Uint8Array(sizeofD3D12_INFO_QUEUE_FILTER_DESC);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.NumCategories !== undefined) view.setUint32(0, Number(data.NumCategories), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.pCategoryList !== undefined) view.setBigUint64(8, data.pCategoryList === null ? 0n : util.toBigInt(util.toPointer(data.pCategoryList)), true);
  // 0x10: u32
  if (data?.NumSeverities !== undefined) view.setUint32(16, Number(data.NumSeverities), true);
  // 0x14: pad4
  // 0x18: pointer
  if (data?.pSeverityList !== undefined) view.setBigUint64(24, data.pSeverityList === null ? 0n : util.toBigInt(util.toPointer(data.pSeverityList)), true);
  // 0x20: u32
  if (data?.NumIDs !== undefined) view.setUint32(32, Number(data.NumIDs), true);
  // 0x24: pad4
  // 0x28: pointer
  if (data?.pIDList !== undefined) view.setBigUint64(40, data.pIDList === null ? 0n : util.toBigInt(util.toPointer(data.pIDList)), true);
  return buf;
}

export class D3D12_INFO_QUEUE_FILTER_DESCView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get NumCategories(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  get pCategoryList(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(8, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x10: u32
  get NumSeverities(): number {
    return this.view.getUint32(16, true);
  }

  // 0x14: pad4

  // 0x18: pointer
  get pSeverityList(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(24, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x20: u32
  get NumIDs(): number {
    return this.view.getUint32(32, true);
  }

  // 0x24: pad4

  // 0x28: pointer
  get pIDList(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(40, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: u32
  set NumCategories(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  set pCategoryList(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(8, util.toBigInt(util.toPointer(value)), true);
  }

  // 0x10: u32
  set NumSeverities(value: number) {
    this.view.setUint32(16, value, true);
  }

  // 0x14: pad4

  // 0x18: pointer
  set pSeverityList(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(24, util.toBigInt(util.toPointer(value)), true);
  }

  // 0x20: u32
  set NumIDs(value: number) {
    this.view.setUint32(32, value, true);
  }

  // 0x24: pad4

  // 0x28: pointer
  set pIDList(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(40, util.toBigInt(util.toPointer(value)), true);
  }
}

/**
 * Windows.Win32.Graphics.Direct3D12.D3D12_INFO_QUEUE_FILTER (size: 16)
 */
export interface D3D12_INFO_QUEUE_FILTER {
  /** Windows.Win32.Graphics.Direct3D12.D3D12_INFO_QUEUE_FILTER_DESC */
  AllowList: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Graphics.Direct3D12.D3D12_INFO_QUEUE_FILTER_DESC */
  DenyList: Uint8Array | Deno.PointerValue | null;
}

export const sizeofD3D12_INFO_QUEUE_FILTER = 16;

export function allocD3D12_INFO_QUEUE_FILTER(data?: Partial<D3D12_INFO_QUEUE_FILTER>): Uint8Array {
  const buf = new Uint8Array(sizeofD3D12_INFO_QUEUE_FILTER);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.AllowList !== undefined) view.setBigUint64(0, data.AllowList === null ? 0n : util.toBigInt(util.toPointer(data.AllowList)), true);
  // 0x08: pointer
  if (data?.DenyList !== undefined) view.setBigUint64(8, data.DenyList === null ? 0n : util.toBigInt(util.toPointer(data.DenyList)), true);
  return buf;
}

export class D3D12_INFO_QUEUE_FILTERView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get AllowList(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(0, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x08: pointer
  get DenyList(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(8, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: pointer
  set AllowList(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(0, util.toBigInt(util.toPointer(value)), true);
  }

  // 0x08: pointer
  set DenyList(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(8, util.toBigInt(util.toPointer(value)), true);
  }
}

/**
 * Windows.Win32.Graphics.Direct3D12.D3D12_DISPATCH_MESH_ARGUMENTS (size: 16)
 */
export interface D3D12_DISPATCH_MESH_ARGUMENTS {
  /** u32 */
  ThreadGroupCountX: number;
  /** u32 */
  ThreadGroupCountY: number;
  /** u32 */
  ThreadGroupCountZ: number;
}

export const sizeofD3D12_DISPATCH_MESH_ARGUMENTS = 16;

export function allocD3D12_DISPATCH_MESH_ARGUMENTS(data?: Partial<D3D12_DISPATCH_MESH_ARGUMENTS>): Uint8Array {
  const buf = new Uint8Array(sizeofD3D12_DISPATCH_MESH_ARGUMENTS);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.ThreadGroupCountX !== undefined) view.setUint32(0, Number(data.ThreadGroupCountX), true);
  // 0x04: u32
  if (data?.ThreadGroupCountY !== undefined) view.setUint32(4, Number(data.ThreadGroupCountY), true);
  // 0x08: u32
  if (data?.ThreadGroupCountZ !== undefined) view.setUint32(8, Number(data.ThreadGroupCountZ), true);
  // 0x0c: pad4
  return buf;
}

export class D3D12_DISPATCH_MESH_ARGUMENTSView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get ThreadGroupCountX(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: u32
  get ThreadGroupCountY(): number {
    return this.view.getUint32(4, true);
  }

  // 0x08: u32
  get ThreadGroupCountZ(): number {
    return this.view.getUint32(8, true);
  }

  // 0x0c: pad4

  // 0x00: u32
  set ThreadGroupCountX(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: u32
  set ThreadGroupCountY(value: number) {
    this.view.setUint32(4, value, true);
  }

  // 0x08: u32
  set ThreadGroupCountZ(value: number) {
    this.view.setUint32(8, value, true);
  }

  // 0x0c: pad4
}

/**
 * Windows.Win32.Graphics.Direct3D12.D3D12_SIGNATURE_PARAMETER_DESC (size: 40)
 */
export interface D3D12_SIGNATURE_PARAMETER_DESC {
  /** Windows.Win32.Foundation.PSTR */
  SemanticName: string | null | Uint8Array;
  /** u32 */
  SemanticIndex: number;
  /** u32 */
  Register: number;
  /** Windows.Win32.Graphics.Direct3D.D3D_NAME */
  SystemValueType: D3D_NAME;
  /** Windows.Win32.Graphics.Direct3D.D3D_REGISTER_COMPONENT_TYPE */
  ComponentType: D3D_REGISTER_COMPONENT_TYPE;
  /** u8 */
  Mask: number;
  /** u8 */
  ReadWriteMask: number;
  /** u32 */
  Stream: number;
  /** Windows.Win32.Graphics.Direct3D.D3D_MIN_PRECISION */
  MinPrecision: D3D_MIN_PRECISION;
}

export const sizeofD3D12_SIGNATURE_PARAMETER_DESC = 40;

export function allocD3D12_SIGNATURE_PARAMETER_DESC(data?: Partial<D3D12_SIGNATURE_PARAMETER_DESC>): Uint8Array {
  const buf = new Uint8Array(sizeofD3D12_SIGNATURE_PARAMETER_DESC);
  const view = new DataView(buf.buffer);
  // 0x00: buffer
  if (data?.SemanticName !== undefined) {
    (buf as any)._f0 = util.pstrToFfi(data.SemanticName);
    view.setBigUint64(0, (buf as any)._f0 === null ? 0n : util.toBigInt(Deno.UnsafePointer.of((buf as any)._f0)), true);
  }
  // 0x08: u32
  if (data?.SemanticIndex !== undefined) view.setUint32(8, Number(data.SemanticIndex), true);
  // 0x0c: u32
  if (data?.Register !== undefined) view.setUint32(12, Number(data.Register), true);
  // 0x10: i32
  if (data?.SystemValueType !== undefined) view.setInt32(16, Number(data.SystemValueType), true);
  // 0x14: i32
  if (data?.ComponentType !== undefined) view.setInt32(20, Number(data.ComponentType), true);
  // 0x18: u8
  if (data?.Mask !== undefined) view.setUint8(24, Number(data.Mask));
  // 0x19: u8
  if (data?.ReadWriteMask !== undefined) view.setUint8(25, Number(data.ReadWriteMask));
  // 0x1a: u32
  if (data?.Stream !== undefined) view.setUint32(26, Number(data.Stream), true);
  // 0x1e: i32
  if (data?.MinPrecision !== undefined) view.setInt32(30, Number(data.MinPrecision), true);
  // 0x22: pad6
  return buf;
}

export class D3D12_SIGNATURE_PARAMETER_DESCView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: buffer
  get SemanticName(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(0, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x08: u32
  get SemanticIndex(): number {
    return this.view.getUint32(8, true);
  }

  // 0x0c: u32
  get Register(): number {
    return this.view.getUint32(12, true);
  }

  // 0x10: i32
  get SystemValueType(): number {
    return this.view.getInt32(16, true);
  }

  // 0x14: i32
  get ComponentType(): number {
    return this.view.getInt32(20, true);
  }

  // 0x18: u8
  get Mask(): number {
    return this.view.getUint8(24);
  }

  // 0x19: u8
  get ReadWriteMask(): number {
    return this.view.getUint8(25);
  }

  // 0x1a: u32
  get Stream(): number {
    return this.view.getUint32(26, true);
  }

  // 0x1e: i32
  get MinPrecision(): number {
    return this.view.getInt32(30, true);
  }

  // 0x22: pad6

  // 0x00: buffer
  set SemanticName(value: Uint8Array | Deno.PointerValue | null) {
    (this.buf as any)._f0 = value;
    this.view.setBigUint64(0, util.toBigInt(util.toPointer((this.buf as any)._f0)), true);
  }

  // 0x08: u32
  set SemanticIndex(value: number) {
    this.view.setUint32(8, value, true);
  }

  // 0x0c: u32
  set Register(value: number) {
    this.view.setUint32(12, value, true);
  }

  // 0x10: i32
  set SystemValueType(value: number) {
    this.view.setInt32(16, value, true);
  }

  // 0x14: i32
  set ComponentType(value: number) {
    this.view.setInt32(20, value, true);
  }

  // 0x18: u8
  set Mask(value: number) {
    this.view.setUint8(24, value);
  }

  // 0x19: u8
  set ReadWriteMask(value: number) {
    this.view.setUint8(25, value);
  }

  // 0x1a: u32
  set Stream(value: number) {
    this.view.setUint32(26, value, true);
  }

  // 0x1e: i32
  set MinPrecision(value: number) {
    this.view.setInt32(30, value, true);
  }

  // 0x22: pad6
}

/**
 * Windows.Win32.Graphics.Direct3D12.D3D12_SHADER_BUFFER_DESC (size: 24)
 */
export interface D3D12_SHADER_BUFFER_DESC {
  /** Windows.Win32.Foundation.PSTR */
  Name: string | null | Uint8Array;
  /** Windows.Win32.Graphics.Direct3D.D3D_CBUFFER_TYPE */
  Type: D3D_CBUFFER_TYPE;
  /** u32 */
  Variables: number;
  /** u32 */
  Size: number;
  /** u32 */
  uFlags: number;
}

export const sizeofD3D12_SHADER_BUFFER_DESC = 24;

export function allocD3D12_SHADER_BUFFER_DESC(data?: Partial<D3D12_SHADER_BUFFER_DESC>): Uint8Array {
  const buf = new Uint8Array(sizeofD3D12_SHADER_BUFFER_DESC);
  const view = new DataView(buf.buffer);
  // 0x00: buffer
  if (data?.Name !== undefined) {
    (buf as any)._f0 = util.pstrToFfi(data.Name);
    view.setBigUint64(0, (buf as any)._f0 === null ? 0n : util.toBigInt(Deno.UnsafePointer.of((buf as any)._f0)), true);
  }
  // 0x08: i32
  if (data?.Type !== undefined) view.setInt32(8, Number(data.Type), true);
  // 0x0c: u32
  if (data?.Variables !== undefined) view.setUint32(12, Number(data.Variables), true);
  // 0x10: u32
  if (data?.Size !== undefined) view.setUint32(16, Number(data.Size), true);
  // 0x14: u32
  if (data?.uFlags !== undefined) view.setUint32(20, Number(data.uFlags), true);
  return buf;
}

export class D3D12_SHADER_BUFFER_DESCView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: buffer
  get Name(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(0, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x08: i32
  get Type(): number {
    return this.view.getInt32(8, true);
  }

  // 0x0c: u32
  get Variables(): number {
    return this.view.getUint32(12, true);
  }

  // 0x10: u32
  get Size(): number {
    return this.view.getUint32(16, true);
  }

  // 0x14: u32
  get uFlags(): number {
    return this.view.getUint32(20, true);
  }

  // 0x00: buffer
  set Name(value: Uint8Array | Deno.PointerValue | null) {
    (this.buf as any)._f0 = value;
    this.view.setBigUint64(0, util.toBigInt(util.toPointer((this.buf as any)._f0)), true);
  }

  // 0x08: i32
  set Type(value: number) {
    this.view.setInt32(8, value, true);
  }

  // 0x0c: u32
  set Variables(value: number) {
    this.view.setUint32(12, value, true);
  }

  // 0x10: u32
  set Size(value: number) {
    this.view.setUint32(16, value, true);
  }

  // 0x14: u32
  set uFlags(value: number) {
    this.view.setUint32(20, value, true);
  }
}

/**
 * Windows.Win32.Graphics.Direct3D12.D3D12_SHADER_VARIABLE_DESC (size: 48)
 */
export interface D3D12_SHADER_VARIABLE_DESC {
  /** Windows.Win32.Foundation.PSTR */
  Name: string | null | Uint8Array;
  /** u32 */
  StartOffset: number;
  /** u32 */
  Size: number;
  /** u32 */
  uFlags: number;
  /** ptr */
  DefaultValue: Deno.PointerValue | Uint8Array | null;
  /** u32 */
  StartTexture: number;
  /** u32 */
  TextureSize: number;
  /** u32 */
  StartSampler: number;
  /** u32 */
  SamplerSize: number;
}

export const sizeofD3D12_SHADER_VARIABLE_DESC = 48;

export function allocD3D12_SHADER_VARIABLE_DESC(data?: Partial<D3D12_SHADER_VARIABLE_DESC>): Uint8Array {
  const buf = new Uint8Array(sizeofD3D12_SHADER_VARIABLE_DESC);
  const view = new DataView(buf.buffer);
  // 0x00: buffer
  if (data?.Name !== undefined) {
    (buf as any)._f0 = util.pstrToFfi(data.Name);
    view.setBigUint64(0, (buf as any)._f0 === null ? 0n : util.toBigInt(Deno.UnsafePointer.of((buf as any)._f0)), true);
  }
  // 0x08: u32
  if (data?.StartOffset !== undefined) view.setUint32(8, Number(data.StartOffset), true);
  // 0x0c: u32
  if (data?.Size !== undefined) view.setUint32(12, Number(data.Size), true);
  // 0x10: u32
  if (data?.uFlags !== undefined) view.setUint32(16, Number(data.uFlags), true);
  // 0x14: pad4
  // 0x18: pointer
  if (data?.DefaultValue !== undefined) view.setBigUint64(24, data.DefaultValue === null ? 0n : util.toBigInt(util.toPointer(data.DefaultValue)), true);
  // 0x20: u32
  if (data?.StartTexture !== undefined) view.setUint32(32, Number(data.StartTexture), true);
  // 0x24: u32
  if (data?.TextureSize !== undefined) view.setUint32(36, Number(data.TextureSize), true);
  // 0x28: u32
  if (data?.StartSampler !== undefined) view.setUint32(40, Number(data.StartSampler), true);
  // 0x2c: u32
  if (data?.SamplerSize !== undefined) view.setUint32(44, Number(data.SamplerSize), true);
  return buf;
}

export class D3D12_SHADER_VARIABLE_DESCView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: buffer
  get Name(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(0, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x08: u32
  get StartOffset(): number {
    return this.view.getUint32(8, true);
  }

  // 0x0c: u32
  get Size(): number {
    return this.view.getUint32(12, true);
  }

  // 0x10: u32
  get uFlags(): number {
    return this.view.getUint32(16, true);
  }

  // 0x14: pad4

  // 0x18: pointer
  get DefaultValue(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(24, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x20: u32
  get StartTexture(): number {
    return this.view.getUint32(32, true);
  }

  // 0x24: u32
  get TextureSize(): number {
    return this.view.getUint32(36, true);
  }

  // 0x28: u32
  get StartSampler(): number {
    return this.view.getUint32(40, true);
  }

  // 0x2c: u32
  get SamplerSize(): number {
    return this.view.getUint32(44, true);
  }

  // 0x00: buffer
  set Name(value: Uint8Array | Deno.PointerValue | null) {
    (this.buf as any)._f0 = value;
    this.view.setBigUint64(0, util.toBigInt(util.toPointer((this.buf as any)._f0)), true);
  }

  // 0x08: u32
  set StartOffset(value: number) {
    this.view.setUint32(8, value, true);
  }

  // 0x0c: u32
  set Size(value: number) {
    this.view.setUint32(12, value, true);
  }

  // 0x10: u32
  set uFlags(value: number) {
    this.view.setUint32(16, value, true);
  }

  // 0x14: pad4

  // 0x18: pointer
  set DefaultValue(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(24, util.toBigInt(util.toPointer(value)), true);
  }

  // 0x20: u32
  set StartTexture(value: number) {
    this.view.setUint32(32, value, true);
  }

  // 0x24: u32
  set TextureSize(value: number) {
    this.view.setUint32(36, value, true);
  }

  // 0x28: u32
  set StartSampler(value: number) {
    this.view.setUint32(40, value, true);
  }

  // 0x2c: u32
  set SamplerSize(value: number) {
    this.view.setUint32(44, value, true);
  }
}

/**
 * Windows.Win32.Graphics.Direct3D12.D3D12_SHADER_TYPE_DESC (size: 40)
 */
export interface D3D12_SHADER_TYPE_DESC {
  /** Windows.Win32.Graphics.Direct3D.D3D_SHADER_VARIABLE_CLASS */
  Class: D3D_SHADER_VARIABLE_CLASS;
  /** Windows.Win32.Graphics.Direct3D.D3D_SHADER_VARIABLE_TYPE */
  Type: D3D_SHADER_VARIABLE_TYPE;
  /** u32 */
  Rows: number;
  /** u32 */
  Columns: number;
  /** u32 */
  Elements: number;
  /** u32 */
  Members: number;
  /** u32 */
  Offset: number;
  /** Windows.Win32.Foundation.PSTR */
  Name: string | null | Uint8Array;
}

export const sizeofD3D12_SHADER_TYPE_DESC = 40;

export function allocD3D12_SHADER_TYPE_DESC(data?: Partial<D3D12_SHADER_TYPE_DESC>): Uint8Array {
  const buf = new Uint8Array(sizeofD3D12_SHADER_TYPE_DESC);
  const view = new DataView(buf.buffer);
  // 0x00: i32
  if (data?.Class !== undefined) view.setInt32(0, Number(data.Class), true);
  // 0x04: i32
  if (data?.Type !== undefined) view.setInt32(4, Number(data.Type), true);
  // 0x08: u32
  if (data?.Rows !== undefined) view.setUint32(8, Number(data.Rows), true);
  // 0x0c: u32
  if (data?.Columns !== undefined) view.setUint32(12, Number(data.Columns), true);
  // 0x10: u32
  if (data?.Elements !== undefined) view.setUint32(16, Number(data.Elements), true);
  // 0x14: u32
  if (data?.Members !== undefined) view.setUint32(20, Number(data.Members), true);
  // 0x18: u32
  if (data?.Offset !== undefined) view.setUint32(24, Number(data.Offset), true);
  // 0x1c: pad4
  // 0x20: buffer
  if (data?.Name !== undefined) {
    (buf as any)._f32 = util.pstrToFfi(data.Name);
    view.setBigUint64(32, (buf as any)._f32 === null ? 0n : util.toBigInt(Deno.UnsafePointer.of((buf as any)._f32)), true);
  }
  return buf;
}

export class D3D12_SHADER_TYPE_DESCView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: i32
  get Class(): number {
    return this.view.getInt32(0, true);
  }

  // 0x04: i32
  get Type(): number {
    return this.view.getInt32(4, true);
  }

  // 0x08: u32
  get Rows(): number {
    return this.view.getUint32(8, true);
  }

  // 0x0c: u32
  get Columns(): number {
    return this.view.getUint32(12, true);
  }

  // 0x10: u32
  get Elements(): number {
    return this.view.getUint32(16, true);
  }

  // 0x14: u32
  get Members(): number {
    return this.view.getUint32(20, true);
  }

  // 0x18: u32
  get Offset(): number {
    return this.view.getUint32(24, true);
  }

  // 0x1c: pad4

  // 0x20: buffer
  get Name(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(32, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: i32
  set Class(value: number) {
    this.view.setInt32(0, value, true);
  }

  // 0x04: i32
  set Type(value: number) {
    this.view.setInt32(4, value, true);
  }

  // 0x08: u32
  set Rows(value: number) {
    this.view.setUint32(8, value, true);
  }

  // 0x0c: u32
  set Columns(value: number) {
    this.view.setUint32(12, value, true);
  }

  // 0x10: u32
  set Elements(value: number) {
    this.view.setUint32(16, value, true);
  }

  // 0x14: u32
  set Members(value: number) {
    this.view.setUint32(20, value, true);
  }

  // 0x18: u32
  set Offset(value: number) {
    this.view.setUint32(24, value, true);
  }

  // 0x1c: pad4

  // 0x20: buffer
  set Name(value: Uint8Array | Deno.PointerValue | null) {
    (this.buf as any)._f32 = value;
    this.view.setBigUint64(32, util.toBigInt(util.toPointer((this.buf as any)._f32)), true);
  }
}

/**
 * Windows.Win32.Graphics.Direct3D12.D3D12_SHADER_DESC (size: 160)
 */
export interface D3D12_SHADER_DESC {
  /** u32 */
  Version: number;
  /** Windows.Win32.Foundation.PSTR */
  Creator: string | null | Uint8Array;
  /** u32 */
  Flags: number;
  /** u32 */
  ConstantBuffers: number;
  /** u32 */
  BoundResources: number;
  /** u32 */
  InputParameters: number;
  /** u32 */
  OutputParameters: number;
  /** u32 */
  InstructionCount: number;
  /** u32 */
  TempRegisterCount: number;
  /** u32 */
  TempArrayCount: number;
  /** u32 */
  DefCount: number;
  /** u32 */
  DclCount: number;
  /** u32 */
  TextureNormalInstructions: number;
  /** u32 */
  TextureLoadInstructions: number;
  /** u32 */
  TextureCompInstructions: number;
  /** u32 */
  TextureBiasInstructions: number;
  /** u32 */
  TextureGradientInstructions: number;
  /** u32 */
  FloatInstructionCount: number;
  /** u32 */
  IntInstructionCount: number;
  /** u32 */
  UintInstructionCount: number;
  /** u32 */
  StaticFlowControlCount: number;
  /** u32 */
  DynamicFlowControlCount: number;
  /** u32 */
  MacroInstructionCount: number;
  /** u32 */
  ArrayInstructionCount: number;
  /** u32 */
  CutInstructionCount: number;
  /** u32 */
  EmitInstructionCount: number;
  /** Windows.Win32.Graphics.Direct3D.D3D_PRIMITIVE_TOPOLOGY */
  GSOutputTopology: D3D_PRIMITIVE_TOPOLOGY;
  /** u32 */
  GSMaxOutputVertexCount: number;
  /** Windows.Win32.Graphics.Direct3D.D3D_PRIMITIVE */
  InputPrimitive: D3D_PRIMITIVE;
  /** u32 */
  PatchConstantParameters: number;
  /** u32 */
  cGSInstanceCount: number;
  /** u32 */
  cControlPoints: number;
  /** Windows.Win32.Graphics.Direct3D.D3D_TESSELLATOR_OUTPUT_PRIMITIVE */
  HSOutputPrimitive: D3D_TESSELLATOR_OUTPUT_PRIMITIVE;
  /** Windows.Win32.Graphics.Direct3D.D3D_TESSELLATOR_PARTITIONING */
  HSPartitioning: D3D_TESSELLATOR_PARTITIONING;
  /** Windows.Win32.Graphics.Direct3D.D3D_TESSELLATOR_DOMAIN */
  TessellatorDomain: D3D_TESSELLATOR_DOMAIN;
  /** u32 */
  cBarrierInstructions: number;
  /** u32 */
  cInterlockedInstructions: number;
  /** u32 */
  cTextureStoreInstructions: number;
}

export const sizeofD3D12_SHADER_DESC = 160;

export function allocD3D12_SHADER_DESC(data?: Partial<D3D12_SHADER_DESC>): Uint8Array {
  const buf = new Uint8Array(sizeofD3D12_SHADER_DESC);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.Version !== undefined) view.setUint32(0, Number(data.Version), true);
  // 0x04: pad4
  // 0x08: buffer
  if (data?.Creator !== undefined) {
    (buf as any)._f8 = util.pstrToFfi(data.Creator);
    view.setBigUint64(8, (buf as any)._f8 === null ? 0n : util.toBigInt(Deno.UnsafePointer.of((buf as any)._f8)), true);
  }
  // 0x10: u32
  if (data?.Flags !== undefined) view.setUint32(16, Number(data.Flags), true);
  // 0x14: u32
  if (data?.ConstantBuffers !== undefined) view.setUint32(20, Number(data.ConstantBuffers), true);
  // 0x18: u32
  if (data?.BoundResources !== undefined) view.setUint32(24, Number(data.BoundResources), true);
  // 0x1c: u32
  if (data?.InputParameters !== undefined) view.setUint32(28, Number(data.InputParameters), true);
  // 0x20: u32
  if (data?.OutputParameters !== undefined) view.setUint32(32, Number(data.OutputParameters), true);
  // 0x24: u32
  if (data?.InstructionCount !== undefined) view.setUint32(36, Number(data.InstructionCount), true);
  // 0x28: u32
  if (data?.TempRegisterCount !== undefined) view.setUint32(40, Number(data.TempRegisterCount), true);
  // 0x2c: u32
  if (data?.TempArrayCount !== undefined) view.setUint32(44, Number(data.TempArrayCount), true);
  // 0x30: u32
  if (data?.DefCount !== undefined) view.setUint32(48, Number(data.DefCount), true);
  // 0x34: u32
  if (data?.DclCount !== undefined) view.setUint32(52, Number(data.DclCount), true);
  // 0x38: u32
  if (data?.TextureNormalInstructions !== undefined) view.setUint32(56, Number(data.TextureNormalInstructions), true);
  // 0x3c: u32
  if (data?.TextureLoadInstructions !== undefined) view.setUint32(60, Number(data.TextureLoadInstructions), true);
  // 0x40: u32
  if (data?.TextureCompInstructions !== undefined) view.setUint32(64, Number(data.TextureCompInstructions), true);
  // 0x44: u32
  if (data?.TextureBiasInstructions !== undefined) view.setUint32(68, Number(data.TextureBiasInstructions), true);
  // 0x48: u32
  if (data?.TextureGradientInstructions !== undefined) view.setUint32(72, Number(data.TextureGradientInstructions), true);
  // 0x4c: u32
  if (data?.FloatInstructionCount !== undefined) view.setUint32(76, Number(data.FloatInstructionCount), true);
  // 0x50: u32
  if (data?.IntInstructionCount !== undefined) view.setUint32(80, Number(data.IntInstructionCount), true);
  // 0x54: u32
  if (data?.UintInstructionCount !== undefined) view.setUint32(84, Number(data.UintInstructionCount), true);
  // 0x58: u32
  if (data?.StaticFlowControlCount !== undefined) view.setUint32(88, Number(data.StaticFlowControlCount), true);
  // 0x5c: u32
  if (data?.DynamicFlowControlCount !== undefined) view.setUint32(92, Number(data.DynamicFlowControlCount), true);
  // 0x60: u32
  if (data?.MacroInstructionCount !== undefined) view.setUint32(96, Number(data.MacroInstructionCount), true);
  // 0x64: u32
  if (data?.ArrayInstructionCount !== undefined) view.setUint32(100, Number(data.ArrayInstructionCount), true);
  // 0x68: u32
  if (data?.CutInstructionCount !== undefined) view.setUint32(104, Number(data.CutInstructionCount), true);
  // 0x6c: u32
  if (data?.EmitInstructionCount !== undefined) view.setUint32(108, Number(data.EmitInstructionCount), true);
  // 0x70: i32
  if (data?.GSOutputTopology !== undefined) view.setInt32(112, Number(data.GSOutputTopology), true);
  // 0x74: u32
  if (data?.GSMaxOutputVertexCount !== undefined) view.setUint32(116, Number(data.GSMaxOutputVertexCount), true);
  // 0x78: i32
  if (data?.InputPrimitive !== undefined) view.setInt32(120, Number(data.InputPrimitive), true);
  // 0x7c: u32
  if (data?.PatchConstantParameters !== undefined) view.setUint32(124, Number(data.PatchConstantParameters), true);
  // 0x80: u32
  if (data?.cGSInstanceCount !== undefined) view.setUint32(128, Number(data.cGSInstanceCount), true);
  // 0x84: u32
  if (data?.cControlPoints !== undefined) view.setUint32(132, Number(data.cControlPoints), true);
  // 0x88: i32
  if (data?.HSOutputPrimitive !== undefined) view.setInt32(136, Number(data.HSOutputPrimitive), true);
  // 0x8c: i32
  if (data?.HSPartitioning !== undefined) view.setInt32(140, Number(data.HSPartitioning), true);
  // 0x90: i32
  if (data?.TessellatorDomain !== undefined) view.setInt32(144, Number(data.TessellatorDomain), true);
  // 0x94: u32
  if (data?.cBarrierInstructions !== undefined) view.setUint32(148, Number(data.cBarrierInstructions), true);
  // 0x98: u32
  if (data?.cInterlockedInstructions !== undefined) view.setUint32(152, Number(data.cInterlockedInstructions), true);
  // 0x9c: u32
  if (data?.cTextureStoreInstructions !== undefined) view.setUint32(156, Number(data.cTextureStoreInstructions), true);
  return buf;
}

export class D3D12_SHADER_DESCView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get Version(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: pad4

  // 0x08: buffer
  get Creator(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(8, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x10: u32
  get Flags(): number {
    return this.view.getUint32(16, true);
  }

  // 0x14: u32
  get ConstantBuffers(): number {
    return this.view.getUint32(20, true);
  }

  // 0x18: u32
  get BoundResources(): number {
    return this.view.getUint32(24, true);
  }

  // 0x1c: u32
  get InputParameters(): number {
    return this.view.getUint32(28, true);
  }

  // 0x20: u32
  get OutputParameters(): number {
    return this.view.getUint32(32, true);
  }

  // 0x24: u32
  get InstructionCount(): number {
    return this.view.getUint32(36, true);
  }

  // 0x28: u32
  get TempRegisterCount(): number {
    return this.view.getUint32(40, true);
  }

  // 0x2c: u32
  get TempArrayCount(): number {
    return this.view.getUint32(44, true);
  }

  // 0x30: u32
  get DefCount(): number {
    return this.view.getUint32(48, true);
  }

  // 0x34: u32
  get DclCount(): number {
    return this.view.getUint32(52, true);
  }

  // 0x38: u32
  get TextureNormalInstructions(): number {
    return this.view.getUint32(56, true);
  }

  // 0x3c: u32
  get TextureLoadInstructions(): number {
    return this.view.getUint32(60, true);
  }

  // 0x40: u32
  get TextureCompInstructions(): number {
    return this.view.getUint32(64, true);
  }

  // 0x44: u32
  get TextureBiasInstructions(): number {
    return this.view.getUint32(68, true);
  }

  // 0x48: u32
  get TextureGradientInstructions(): number {
    return this.view.getUint32(72, true);
  }

  // 0x4c: u32
  get FloatInstructionCount(): number {
    return this.view.getUint32(76, true);
  }

  // 0x50: u32
  get IntInstructionCount(): number {
    return this.view.getUint32(80, true);
  }

  // 0x54: u32
  get UintInstructionCount(): number {
    return this.view.getUint32(84, true);
  }

  // 0x58: u32
  get StaticFlowControlCount(): number {
    return this.view.getUint32(88, true);
  }

  // 0x5c: u32
  get DynamicFlowControlCount(): number {
    return this.view.getUint32(92, true);
  }

  // 0x60: u32
  get MacroInstructionCount(): number {
    return this.view.getUint32(96, true);
  }

  // 0x64: u32
  get ArrayInstructionCount(): number {
    return this.view.getUint32(100, true);
  }

  // 0x68: u32
  get CutInstructionCount(): number {
    return this.view.getUint32(104, true);
  }

  // 0x6c: u32
  get EmitInstructionCount(): number {
    return this.view.getUint32(108, true);
  }

  // 0x70: i32
  get GSOutputTopology(): number {
    return this.view.getInt32(112, true);
  }

  // 0x74: u32
  get GSMaxOutputVertexCount(): number {
    return this.view.getUint32(116, true);
  }

  // 0x78: i32
  get InputPrimitive(): number {
    return this.view.getInt32(120, true);
  }

  // 0x7c: u32
  get PatchConstantParameters(): number {
    return this.view.getUint32(124, true);
  }

  // 0x80: u32
  get cGSInstanceCount(): number {
    return this.view.getUint32(128, true);
  }

  // 0x84: u32
  get cControlPoints(): number {
    return this.view.getUint32(132, true);
  }

  // 0x88: i32
  get HSOutputPrimitive(): number {
    return this.view.getInt32(136, true);
  }

  // 0x8c: i32
  get HSPartitioning(): number {
    return this.view.getInt32(140, true);
  }

  // 0x90: i32
  get TessellatorDomain(): number {
    return this.view.getInt32(144, true);
  }

  // 0x94: u32
  get cBarrierInstructions(): number {
    return this.view.getUint32(148, true);
  }

  // 0x98: u32
  get cInterlockedInstructions(): number {
    return this.view.getUint32(152, true);
  }

  // 0x9c: u32
  get cTextureStoreInstructions(): number {
    return this.view.getUint32(156, true);
  }

  // 0x00: u32
  set Version(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: pad4

  // 0x08: buffer
  set Creator(value: Uint8Array | Deno.PointerValue | null) {
    (this.buf as any)._f8 = value;
    this.view.setBigUint64(8, util.toBigInt(util.toPointer((this.buf as any)._f8)), true);
  }

  // 0x10: u32
  set Flags(value: number) {
    this.view.setUint32(16, value, true);
  }

  // 0x14: u32
  set ConstantBuffers(value: number) {
    this.view.setUint32(20, value, true);
  }

  // 0x18: u32
  set BoundResources(value: number) {
    this.view.setUint32(24, value, true);
  }

  // 0x1c: u32
  set InputParameters(value: number) {
    this.view.setUint32(28, value, true);
  }

  // 0x20: u32
  set OutputParameters(value: number) {
    this.view.setUint32(32, value, true);
  }

  // 0x24: u32
  set InstructionCount(value: number) {
    this.view.setUint32(36, value, true);
  }

  // 0x28: u32
  set TempRegisterCount(value: number) {
    this.view.setUint32(40, value, true);
  }

  // 0x2c: u32
  set TempArrayCount(value: number) {
    this.view.setUint32(44, value, true);
  }

  // 0x30: u32
  set DefCount(value: number) {
    this.view.setUint32(48, value, true);
  }

  // 0x34: u32
  set DclCount(value: number) {
    this.view.setUint32(52, value, true);
  }

  // 0x38: u32
  set TextureNormalInstructions(value: number) {
    this.view.setUint32(56, value, true);
  }

  // 0x3c: u32
  set TextureLoadInstructions(value: number) {
    this.view.setUint32(60, value, true);
  }

  // 0x40: u32
  set TextureCompInstructions(value: number) {
    this.view.setUint32(64, value, true);
  }

  // 0x44: u32
  set TextureBiasInstructions(value: number) {
    this.view.setUint32(68, value, true);
  }

  // 0x48: u32
  set TextureGradientInstructions(value: number) {
    this.view.setUint32(72, value, true);
  }

  // 0x4c: u32
  set FloatInstructionCount(value: number) {
    this.view.setUint32(76, value, true);
  }

  // 0x50: u32
  set IntInstructionCount(value: number) {
    this.view.setUint32(80, value, true);
  }

  // 0x54: u32
  set UintInstructionCount(value: number) {
    this.view.setUint32(84, value, true);
  }

  // 0x58: u32
  set StaticFlowControlCount(value: number) {
    this.view.setUint32(88, value, true);
  }

  // 0x5c: u32
  set DynamicFlowControlCount(value: number) {
    this.view.setUint32(92, value, true);
  }

  // 0x60: u32
  set MacroInstructionCount(value: number) {
    this.view.setUint32(96, value, true);
  }

  // 0x64: u32
  set ArrayInstructionCount(value: number) {
    this.view.setUint32(100, value, true);
  }

  // 0x68: u32
  set CutInstructionCount(value: number) {
    this.view.setUint32(104, value, true);
  }

  // 0x6c: u32
  set EmitInstructionCount(value: number) {
    this.view.setUint32(108, value, true);
  }

  // 0x70: i32
  set GSOutputTopology(value: number) {
    this.view.setInt32(112, value, true);
  }

  // 0x74: u32
  set GSMaxOutputVertexCount(value: number) {
    this.view.setUint32(116, value, true);
  }

  // 0x78: i32
  set InputPrimitive(value: number) {
    this.view.setInt32(120, value, true);
  }

  // 0x7c: u32
  set PatchConstantParameters(value: number) {
    this.view.setUint32(124, value, true);
  }

  // 0x80: u32
  set cGSInstanceCount(value: number) {
    this.view.setUint32(128, value, true);
  }

  // 0x84: u32
  set cControlPoints(value: number) {
    this.view.setUint32(132, value, true);
  }

  // 0x88: i32
  set HSOutputPrimitive(value: number) {
    this.view.setInt32(136, value, true);
  }

  // 0x8c: i32
  set HSPartitioning(value: number) {
    this.view.setInt32(140, value, true);
  }

  // 0x90: i32
  set TessellatorDomain(value: number) {
    this.view.setInt32(144, value, true);
  }

  // 0x94: u32
  set cBarrierInstructions(value: number) {
    this.view.setUint32(148, value, true);
  }

  // 0x98: u32
  set cInterlockedInstructions(value: number) {
    this.view.setUint32(152, value, true);
  }

  // 0x9c: u32
  set cTextureStoreInstructions(value: number) {
    this.view.setUint32(156, value, true);
  }
}

/**
 * Windows.Win32.Graphics.Direct3D12.D3D12_SHADER_INPUT_BIND_DESC (size: 48)
 */
export interface D3D12_SHADER_INPUT_BIND_DESC {
  /** Windows.Win32.Foundation.PSTR */
  Name: string | null | Uint8Array;
  /** Windows.Win32.Graphics.Direct3D.D3D_SHADER_INPUT_TYPE */
  Type: D3D_SHADER_INPUT_TYPE;
  /** u32 */
  BindPoint: number;
  /** u32 */
  BindCount: number;
  /** u32 */
  uFlags: number;
  /** Windows.Win32.Graphics.Direct3D.D3D_RESOURCE_RETURN_TYPE */
  ReturnType: D3D_RESOURCE_RETURN_TYPE;
  /** Windows.Win32.Graphics.Direct3D.D3D_SRV_DIMENSION */
  Dimension: D3D_SRV_DIMENSION;
  /** u32 */
  NumSamples: number;
  /** u32 */
  Space: number;
  /** u32 */
  uID: number;
}

export const sizeofD3D12_SHADER_INPUT_BIND_DESC = 48;

export function allocD3D12_SHADER_INPUT_BIND_DESC(data?: Partial<D3D12_SHADER_INPUT_BIND_DESC>): Uint8Array {
  const buf = new Uint8Array(sizeofD3D12_SHADER_INPUT_BIND_DESC);
  const view = new DataView(buf.buffer);
  // 0x00: buffer
  if (data?.Name !== undefined) {
    (buf as any)._f0 = util.pstrToFfi(data.Name);
    view.setBigUint64(0, (buf as any)._f0 === null ? 0n : util.toBigInt(Deno.UnsafePointer.of((buf as any)._f0)), true);
  }
  // 0x08: i32
  if (data?.Type !== undefined) view.setInt32(8, Number(data.Type), true);
  // 0x0c: u32
  if (data?.BindPoint !== undefined) view.setUint32(12, Number(data.BindPoint), true);
  // 0x10: u32
  if (data?.BindCount !== undefined) view.setUint32(16, Number(data.BindCount), true);
  // 0x14: u32
  if (data?.uFlags !== undefined) view.setUint32(20, Number(data.uFlags), true);
  // 0x18: i32
  if (data?.ReturnType !== undefined) view.setInt32(24, Number(data.ReturnType), true);
  // 0x1c: i32
  if (data?.Dimension !== undefined) view.setInt32(28, Number(data.Dimension), true);
  // 0x20: u32
  if (data?.NumSamples !== undefined) view.setUint32(32, Number(data.NumSamples), true);
  // 0x24: u32
  if (data?.Space !== undefined) view.setUint32(36, Number(data.Space), true);
  // 0x28: u32
  if (data?.uID !== undefined) view.setUint32(40, Number(data.uID), true);
  // 0x2c: pad4
  return buf;
}

export class D3D12_SHADER_INPUT_BIND_DESCView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: buffer
  get Name(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(0, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x08: i32
  get Type(): number {
    return this.view.getInt32(8, true);
  }

  // 0x0c: u32
  get BindPoint(): number {
    return this.view.getUint32(12, true);
  }

  // 0x10: u32
  get BindCount(): number {
    return this.view.getUint32(16, true);
  }

  // 0x14: u32
  get uFlags(): number {
    return this.view.getUint32(20, true);
  }

  // 0x18: i32
  get ReturnType(): number {
    return this.view.getInt32(24, true);
  }

  // 0x1c: i32
  get Dimension(): number {
    return this.view.getInt32(28, true);
  }

  // 0x20: u32
  get NumSamples(): number {
    return this.view.getUint32(32, true);
  }

  // 0x24: u32
  get Space(): number {
    return this.view.getUint32(36, true);
  }

  // 0x28: u32
  get uID(): number {
    return this.view.getUint32(40, true);
  }

  // 0x2c: pad4

  // 0x00: buffer
  set Name(value: Uint8Array | Deno.PointerValue | null) {
    (this.buf as any)._f0 = value;
    this.view.setBigUint64(0, util.toBigInt(util.toPointer((this.buf as any)._f0)), true);
  }

  // 0x08: i32
  set Type(value: number) {
    this.view.setInt32(8, value, true);
  }

  // 0x0c: u32
  set BindPoint(value: number) {
    this.view.setUint32(12, value, true);
  }

  // 0x10: u32
  set BindCount(value: number) {
    this.view.setUint32(16, value, true);
  }

  // 0x14: u32
  set uFlags(value: number) {
    this.view.setUint32(20, value, true);
  }

  // 0x18: i32
  set ReturnType(value: number) {
    this.view.setInt32(24, value, true);
  }

  // 0x1c: i32
  set Dimension(value: number) {
    this.view.setInt32(28, value, true);
  }

  // 0x20: u32
  set NumSamples(value: number) {
    this.view.setUint32(32, value, true);
  }

  // 0x24: u32
  set Space(value: number) {
    this.view.setUint32(36, value, true);
  }

  // 0x28: u32
  set uID(value: number) {
    this.view.setUint32(40, value, true);
  }

  // 0x2c: pad4
}

/**
 * Windows.Win32.Graphics.Direct3D12.D3D12_LIBRARY_DESC (size: 16)
 */
export interface D3D12_LIBRARY_DESC {
  /** Windows.Win32.Foundation.PSTR */
  Creator: string | null | Uint8Array;
  /** u32 */
  Flags: number;
  /** u32 */
  FunctionCount: number;
}

export const sizeofD3D12_LIBRARY_DESC = 16;

export function allocD3D12_LIBRARY_DESC(data?: Partial<D3D12_LIBRARY_DESC>): Uint8Array {
  const buf = new Uint8Array(sizeofD3D12_LIBRARY_DESC);
  const view = new DataView(buf.buffer);
  // 0x00: buffer
  if (data?.Creator !== undefined) {
    (buf as any)._f0 = util.pstrToFfi(data.Creator);
    view.setBigUint64(0, (buf as any)._f0 === null ? 0n : util.toBigInt(Deno.UnsafePointer.of((buf as any)._f0)), true);
  }
  // 0x08: u32
  if (data?.Flags !== undefined) view.setUint32(8, Number(data.Flags), true);
  // 0x0c: u32
  if (data?.FunctionCount !== undefined) view.setUint32(12, Number(data.FunctionCount), true);
  return buf;
}

export class D3D12_LIBRARY_DESCView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: buffer
  get Creator(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(0, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x08: u32
  get Flags(): number {
    return this.view.getUint32(8, true);
  }

  // 0x0c: u32
  get FunctionCount(): number {
    return this.view.getUint32(12, true);
  }

  // 0x00: buffer
  set Creator(value: Uint8Array | Deno.PointerValue | null) {
    (this.buf as any)._f0 = value;
    this.view.setBigUint64(0, util.toBigInt(util.toPointer((this.buf as any)._f0)), true);
  }

  // 0x08: u32
  set Flags(value: number) {
    this.view.setUint32(8, value, true);
  }

  // 0x0c: u32
  set FunctionCount(value: number) {
    this.view.setUint32(12, value, true);
  }
}

/**
 * Windows.Win32.Graphics.Direct3D12.D3D12_FUNCTION_DESC (size: 152)
 */
export interface D3D12_FUNCTION_DESC {
  /** u32 */
  Version: number;
  /** Windows.Win32.Foundation.PSTR */
  Creator: string | null | Uint8Array;
  /** u32 */
  Flags: number;
  /** u32 */
  ConstantBuffers: number;
  /** u32 */
  BoundResources: number;
  /** u32 */
  InstructionCount: number;
  /** u32 */
  TempRegisterCount: number;
  /** u32 */
  TempArrayCount: number;
  /** u32 */
  DefCount: number;
  /** u32 */
  DclCount: number;
  /** u32 */
  TextureNormalInstructions: number;
  /** u32 */
  TextureLoadInstructions: number;
  /** u32 */
  TextureCompInstructions: number;
  /** u32 */
  TextureBiasInstructions: number;
  /** u32 */
  TextureGradientInstructions: number;
  /** u32 */
  FloatInstructionCount: number;
  /** u32 */
  IntInstructionCount: number;
  /** u32 */
  UintInstructionCount: number;
  /** u32 */
  StaticFlowControlCount: number;
  /** u32 */
  DynamicFlowControlCount: number;
  /** u32 */
  MacroInstructionCount: number;
  /** u32 */
  ArrayInstructionCount: number;
  /** u32 */
  MovInstructionCount: number;
  /** u32 */
  MovcInstructionCount: number;
  /** u32 */
  ConversionInstructionCount: number;
  /** u32 */
  BitwiseInstructionCount: number;
  /** Windows.Win32.Graphics.Direct3D.D3D_FEATURE_LEVEL */
  MinFeatureLevel: D3D_FEATURE_LEVEL;
  /** u64 */
  RequiredFeatureFlags: number | bigint;
  /** Windows.Win32.Foundation.PSTR */
  Name: string | null | Uint8Array;
  /** i32 */
  FunctionParameterCount: number;
  /** Windows.Win32.Foundation.BOOL */
  HasReturn: boolean;
  /** Windows.Win32.Foundation.BOOL */
  Has10Level9VertexShader: boolean;
  /** Windows.Win32.Foundation.BOOL */
  Has10Level9PixelShader: boolean;
}

export const sizeofD3D12_FUNCTION_DESC = 152;

export function allocD3D12_FUNCTION_DESC(data?: Partial<D3D12_FUNCTION_DESC>): Uint8Array {
  const buf = new Uint8Array(sizeofD3D12_FUNCTION_DESC);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.Version !== undefined) view.setUint32(0, Number(data.Version), true);
  // 0x04: pad4
  // 0x08: buffer
  if (data?.Creator !== undefined) {
    (buf as any)._f8 = util.pstrToFfi(data.Creator);
    view.setBigUint64(8, (buf as any)._f8 === null ? 0n : util.toBigInt(Deno.UnsafePointer.of((buf as any)._f8)), true);
  }
  // 0x10: u32
  if (data?.Flags !== undefined) view.setUint32(16, Number(data.Flags), true);
  // 0x14: u32
  if (data?.ConstantBuffers !== undefined) view.setUint32(20, Number(data.ConstantBuffers), true);
  // 0x18: u32
  if (data?.BoundResources !== undefined) view.setUint32(24, Number(data.BoundResources), true);
  // 0x1c: u32
  if (data?.InstructionCount !== undefined) view.setUint32(28, Number(data.InstructionCount), true);
  // 0x20: u32
  if (data?.TempRegisterCount !== undefined) view.setUint32(32, Number(data.TempRegisterCount), true);
  // 0x24: u32
  if (data?.TempArrayCount !== undefined) view.setUint32(36, Number(data.TempArrayCount), true);
  // 0x28: u32
  if (data?.DefCount !== undefined) view.setUint32(40, Number(data.DefCount), true);
  // 0x2c: u32
  if (data?.DclCount !== undefined) view.setUint32(44, Number(data.DclCount), true);
  // 0x30: u32
  if (data?.TextureNormalInstructions !== undefined) view.setUint32(48, Number(data.TextureNormalInstructions), true);
  // 0x34: u32
  if (data?.TextureLoadInstructions !== undefined) view.setUint32(52, Number(data.TextureLoadInstructions), true);
  // 0x38: u32
  if (data?.TextureCompInstructions !== undefined) view.setUint32(56, Number(data.TextureCompInstructions), true);
  // 0x3c: u32
  if (data?.TextureBiasInstructions !== undefined) view.setUint32(60, Number(data.TextureBiasInstructions), true);
  // 0x40: u32
  if (data?.TextureGradientInstructions !== undefined) view.setUint32(64, Number(data.TextureGradientInstructions), true);
  // 0x44: u32
  if (data?.FloatInstructionCount !== undefined) view.setUint32(68, Number(data.FloatInstructionCount), true);
  // 0x48: u32
  if (data?.IntInstructionCount !== undefined) view.setUint32(72, Number(data.IntInstructionCount), true);
  // 0x4c: u32
  if (data?.UintInstructionCount !== undefined) view.setUint32(76, Number(data.UintInstructionCount), true);
  // 0x50: u32
  if (data?.StaticFlowControlCount !== undefined) view.setUint32(80, Number(data.StaticFlowControlCount), true);
  // 0x54: u32
  if (data?.DynamicFlowControlCount !== undefined) view.setUint32(84, Number(data.DynamicFlowControlCount), true);
  // 0x58: u32
  if (data?.MacroInstructionCount !== undefined) view.setUint32(88, Number(data.MacroInstructionCount), true);
  // 0x5c: u32
  if (data?.ArrayInstructionCount !== undefined) view.setUint32(92, Number(data.ArrayInstructionCount), true);
  // 0x60: u32
  if (data?.MovInstructionCount !== undefined) view.setUint32(96, Number(data.MovInstructionCount), true);
  // 0x64: u32
  if (data?.MovcInstructionCount !== undefined) view.setUint32(100, Number(data.MovcInstructionCount), true);
  // 0x68: u32
  if (data?.ConversionInstructionCount !== undefined) view.setUint32(104, Number(data.ConversionInstructionCount), true);
  // 0x6c: u32
  if (data?.BitwiseInstructionCount !== undefined) view.setUint32(108, Number(data.BitwiseInstructionCount), true);
  // 0x70: i32
  if (data?.MinFeatureLevel !== undefined) view.setInt32(112, Number(data.MinFeatureLevel), true);
  // 0x74: pad4
  // 0x78: u64
  if (data?.RequiredFeatureFlags !== undefined) view.setBigUint64(120, util.toBigInt(data.RequiredFeatureFlags), true);
  // 0x80: buffer
  if (data?.Name !== undefined) {
    (buf as any)._f128 = util.pstrToFfi(data.Name);
    view.setBigUint64(128, (buf as any)._f128 === null ? 0n : util.toBigInt(Deno.UnsafePointer.of((buf as any)._f128)), true);
  }
  // 0x88: i32
  if (data?.FunctionParameterCount !== undefined) view.setInt32(136, Number(data.FunctionParameterCount), true);
  // 0x8c: i32
  if (data?.HasReturn !== undefined) view.setInt32(140, Number(data.HasReturn), true);
  // 0x90: i32
  if (data?.Has10Level9VertexShader !== undefined) view.setInt32(144, Number(data.Has10Level9VertexShader), true);
  // 0x94: i32
  if (data?.Has10Level9PixelShader !== undefined) view.setInt32(148, Number(data.Has10Level9PixelShader), true);
  return buf;
}

export class D3D12_FUNCTION_DESCView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get Version(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: pad4

  // 0x08: buffer
  get Creator(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(8, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x10: u32
  get Flags(): number {
    return this.view.getUint32(16, true);
  }

  // 0x14: u32
  get ConstantBuffers(): number {
    return this.view.getUint32(20, true);
  }

  // 0x18: u32
  get BoundResources(): number {
    return this.view.getUint32(24, true);
  }

  // 0x1c: u32
  get InstructionCount(): number {
    return this.view.getUint32(28, true);
  }

  // 0x20: u32
  get TempRegisterCount(): number {
    return this.view.getUint32(32, true);
  }

  // 0x24: u32
  get TempArrayCount(): number {
    return this.view.getUint32(36, true);
  }

  // 0x28: u32
  get DefCount(): number {
    return this.view.getUint32(40, true);
  }

  // 0x2c: u32
  get DclCount(): number {
    return this.view.getUint32(44, true);
  }

  // 0x30: u32
  get TextureNormalInstructions(): number {
    return this.view.getUint32(48, true);
  }

  // 0x34: u32
  get TextureLoadInstructions(): number {
    return this.view.getUint32(52, true);
  }

  // 0x38: u32
  get TextureCompInstructions(): number {
    return this.view.getUint32(56, true);
  }

  // 0x3c: u32
  get TextureBiasInstructions(): number {
    return this.view.getUint32(60, true);
  }

  // 0x40: u32
  get TextureGradientInstructions(): number {
    return this.view.getUint32(64, true);
  }

  // 0x44: u32
  get FloatInstructionCount(): number {
    return this.view.getUint32(68, true);
  }

  // 0x48: u32
  get IntInstructionCount(): number {
    return this.view.getUint32(72, true);
  }

  // 0x4c: u32
  get UintInstructionCount(): number {
    return this.view.getUint32(76, true);
  }

  // 0x50: u32
  get StaticFlowControlCount(): number {
    return this.view.getUint32(80, true);
  }

  // 0x54: u32
  get DynamicFlowControlCount(): number {
    return this.view.getUint32(84, true);
  }

  // 0x58: u32
  get MacroInstructionCount(): number {
    return this.view.getUint32(88, true);
  }

  // 0x5c: u32
  get ArrayInstructionCount(): number {
    return this.view.getUint32(92, true);
  }

  // 0x60: u32
  get MovInstructionCount(): number {
    return this.view.getUint32(96, true);
  }

  // 0x64: u32
  get MovcInstructionCount(): number {
    return this.view.getUint32(100, true);
  }

  // 0x68: u32
  get ConversionInstructionCount(): number {
    return this.view.getUint32(104, true);
  }

  // 0x6c: u32
  get BitwiseInstructionCount(): number {
    return this.view.getUint32(108, true);
  }

  // 0x70: i32
  get MinFeatureLevel(): number {
    return this.view.getInt32(112, true);
  }

  // 0x74: pad4

  // 0x78: u64
  get RequiredFeatureFlags(): number | bigint {
    return this.view.getBigUint64(120, true);
  }

  // 0x80: buffer
  get Name(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(128, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x88: i32
  get FunctionParameterCount(): number {
    return this.view.getInt32(136, true);
  }

  // 0x8c: i32
  get HasReturn(): number {
    return this.view.getInt32(140, true);
  }

  // 0x90: i32
  get Has10Level9VertexShader(): number {
    return this.view.getInt32(144, true);
  }

  // 0x94: i32
  get Has10Level9PixelShader(): number {
    return this.view.getInt32(148, true);
  }

  // 0x00: u32
  set Version(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: pad4

  // 0x08: buffer
  set Creator(value: Uint8Array | Deno.PointerValue | null) {
    (this.buf as any)._f8 = value;
    this.view.setBigUint64(8, util.toBigInt(util.toPointer((this.buf as any)._f8)), true);
  }

  // 0x10: u32
  set Flags(value: number) {
    this.view.setUint32(16, value, true);
  }

  // 0x14: u32
  set ConstantBuffers(value: number) {
    this.view.setUint32(20, value, true);
  }

  // 0x18: u32
  set BoundResources(value: number) {
    this.view.setUint32(24, value, true);
  }

  // 0x1c: u32
  set InstructionCount(value: number) {
    this.view.setUint32(28, value, true);
  }

  // 0x20: u32
  set TempRegisterCount(value: number) {
    this.view.setUint32(32, value, true);
  }

  // 0x24: u32
  set TempArrayCount(value: number) {
    this.view.setUint32(36, value, true);
  }

  // 0x28: u32
  set DefCount(value: number) {
    this.view.setUint32(40, value, true);
  }

  // 0x2c: u32
  set DclCount(value: number) {
    this.view.setUint32(44, value, true);
  }

  // 0x30: u32
  set TextureNormalInstructions(value: number) {
    this.view.setUint32(48, value, true);
  }

  // 0x34: u32
  set TextureLoadInstructions(value: number) {
    this.view.setUint32(52, value, true);
  }

  // 0x38: u32
  set TextureCompInstructions(value: number) {
    this.view.setUint32(56, value, true);
  }

  // 0x3c: u32
  set TextureBiasInstructions(value: number) {
    this.view.setUint32(60, value, true);
  }

  // 0x40: u32
  set TextureGradientInstructions(value: number) {
    this.view.setUint32(64, value, true);
  }

  // 0x44: u32
  set FloatInstructionCount(value: number) {
    this.view.setUint32(68, value, true);
  }

  // 0x48: u32
  set IntInstructionCount(value: number) {
    this.view.setUint32(72, value, true);
  }

  // 0x4c: u32
  set UintInstructionCount(value: number) {
    this.view.setUint32(76, value, true);
  }

  // 0x50: u32
  set StaticFlowControlCount(value: number) {
    this.view.setUint32(80, value, true);
  }

  // 0x54: u32
  set DynamicFlowControlCount(value: number) {
    this.view.setUint32(84, value, true);
  }

  // 0x58: u32
  set MacroInstructionCount(value: number) {
    this.view.setUint32(88, value, true);
  }

  // 0x5c: u32
  set ArrayInstructionCount(value: number) {
    this.view.setUint32(92, value, true);
  }

  // 0x60: u32
  set MovInstructionCount(value: number) {
    this.view.setUint32(96, value, true);
  }

  // 0x64: u32
  set MovcInstructionCount(value: number) {
    this.view.setUint32(100, value, true);
  }

  // 0x68: u32
  set ConversionInstructionCount(value: number) {
    this.view.setUint32(104, value, true);
  }

  // 0x6c: u32
  set BitwiseInstructionCount(value: number) {
    this.view.setUint32(108, value, true);
  }

  // 0x70: i32
  set MinFeatureLevel(value: number) {
    this.view.setInt32(112, value, true);
  }

  // 0x74: pad4

  // 0x78: u64
  set RequiredFeatureFlags(value: number | bigint) {
    this.view.setBigUint64(120, util.toBigInt(value), true);
  }

  // 0x80: buffer
  set Name(value: Uint8Array | Deno.PointerValue | null) {
    (this.buf as any)._f128 = value;
    this.view.setBigUint64(128, util.toBigInt(util.toPointer((this.buf as any)._f128)), true);
  }

  // 0x88: i32
  set FunctionParameterCount(value: number) {
    this.view.setInt32(136, value, true);
  }

  // 0x8c: i32
  set HasReturn(value: number) {
    this.view.setInt32(140, value, true);
  }

  // 0x90: i32
  set Has10Level9VertexShader(value: number) {
    this.view.setInt32(144, value, true);
  }

  // 0x94: i32
  set Has10Level9PixelShader(value: number) {
    this.view.setInt32(148, value, true);
  }
}

/**
 * Windows.Win32.Graphics.Direct3D12.D3D12_PARAMETER_DESC (size: 56)
 */
export interface D3D12_PARAMETER_DESC {
  /** Windows.Win32.Foundation.PSTR */
  Name: string | null | Uint8Array;
  /** Windows.Win32.Foundation.PSTR */
  SemanticName: string | null | Uint8Array;
  /** Windows.Win32.Graphics.Direct3D.D3D_SHADER_VARIABLE_TYPE */
  Type: D3D_SHADER_VARIABLE_TYPE;
  /** Windows.Win32.Graphics.Direct3D.D3D_SHADER_VARIABLE_CLASS */
  Class: D3D_SHADER_VARIABLE_CLASS;
  /** u32 */
  Rows: number;
  /** u32 */
  Columns: number;
  /** Windows.Win32.Graphics.Direct3D.D3D_INTERPOLATION_MODE */
  InterpolationMode: D3D_INTERPOLATION_MODE;
  /** Windows.Win32.Graphics.Direct3D.D3D_PARAMETER_FLAGS */
  Flags: D3D_PARAMETER_FLAGS;
  /** u32 */
  FirstInRegister: number;
  /** u32 */
  FirstInComponent: number;
  /** u32 */
  FirstOutRegister: number;
  /** u32 */
  FirstOutComponent: number;
}

export const sizeofD3D12_PARAMETER_DESC = 56;

export function allocD3D12_PARAMETER_DESC(data?: Partial<D3D12_PARAMETER_DESC>): Uint8Array {
  const buf = new Uint8Array(sizeofD3D12_PARAMETER_DESC);
  const view = new DataView(buf.buffer);
  // 0x00: buffer
  if (data?.Name !== undefined) {
    (buf as any)._f0 = util.pstrToFfi(data.Name);
    view.setBigUint64(0, (buf as any)._f0 === null ? 0n : util.toBigInt(Deno.UnsafePointer.of((buf as any)._f0)), true);
  }
  // 0x08: buffer
  if (data?.SemanticName !== undefined) {
    (buf as any)._f8 = util.pstrToFfi(data.SemanticName);
    view.setBigUint64(8, (buf as any)._f8 === null ? 0n : util.toBigInt(Deno.UnsafePointer.of((buf as any)._f8)), true);
  }
  // 0x10: i32
  if (data?.Type !== undefined) view.setInt32(16, Number(data.Type), true);
  // 0x14: i32
  if (data?.Class !== undefined) view.setInt32(20, Number(data.Class), true);
  // 0x18: u32
  if (data?.Rows !== undefined) view.setUint32(24, Number(data.Rows), true);
  // 0x1c: u32
  if (data?.Columns !== undefined) view.setUint32(28, Number(data.Columns), true);
  // 0x20: i32
  if (data?.InterpolationMode !== undefined) view.setInt32(32, Number(data.InterpolationMode), true);
  // 0x24: i32
  if (data?.Flags !== undefined) view.setInt32(36, Number(data.Flags), true);
  // 0x28: u32
  if (data?.FirstInRegister !== undefined) view.setUint32(40, Number(data.FirstInRegister), true);
  // 0x2c: u32
  if (data?.FirstInComponent !== undefined) view.setUint32(44, Number(data.FirstInComponent), true);
  // 0x30: u32
  if (data?.FirstOutRegister !== undefined) view.setUint32(48, Number(data.FirstOutRegister), true);
  // 0x34: u32
  if (data?.FirstOutComponent !== undefined) view.setUint32(52, Number(data.FirstOutComponent), true);
  return buf;
}

export class D3D12_PARAMETER_DESCView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: buffer
  get Name(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(0, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x08: buffer
  get SemanticName(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(8, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x10: i32
  get Type(): number {
    return this.view.getInt32(16, true);
  }

  // 0x14: i32
  get Class(): number {
    return this.view.getInt32(20, true);
  }

  // 0x18: u32
  get Rows(): number {
    return this.view.getUint32(24, true);
  }

  // 0x1c: u32
  get Columns(): number {
    return this.view.getUint32(28, true);
  }

  // 0x20: i32
  get InterpolationMode(): number {
    return this.view.getInt32(32, true);
  }

  // 0x24: i32
  get Flags(): number {
    return this.view.getInt32(36, true);
  }

  // 0x28: u32
  get FirstInRegister(): number {
    return this.view.getUint32(40, true);
  }

  // 0x2c: u32
  get FirstInComponent(): number {
    return this.view.getUint32(44, true);
  }

  // 0x30: u32
  get FirstOutRegister(): number {
    return this.view.getUint32(48, true);
  }

  // 0x34: u32
  get FirstOutComponent(): number {
    return this.view.getUint32(52, true);
  }

  // 0x00: buffer
  set Name(value: Uint8Array | Deno.PointerValue | null) {
    (this.buf as any)._f0 = value;
    this.view.setBigUint64(0, util.toBigInt(util.toPointer((this.buf as any)._f0)), true);
  }

  // 0x08: buffer
  set SemanticName(value: Uint8Array | Deno.PointerValue | null) {
    (this.buf as any)._f8 = value;
    this.view.setBigUint64(8, util.toBigInt(util.toPointer((this.buf as any)._f8)), true);
  }

  // 0x10: i32
  set Type(value: number) {
    this.view.setInt32(16, value, true);
  }

  // 0x14: i32
  set Class(value: number) {
    this.view.setInt32(20, value, true);
  }

  // 0x18: u32
  set Rows(value: number) {
    this.view.setUint32(24, value, true);
  }

  // 0x1c: u32
  set Columns(value: number) {
    this.view.setUint32(28, value, true);
  }

  // 0x20: i32
  set InterpolationMode(value: number) {
    this.view.setInt32(32, value, true);
  }

  // 0x24: i32
  set Flags(value: number) {
    this.view.setInt32(36, value, true);
  }

  // 0x28: u32
  set FirstInRegister(value: number) {
    this.view.setUint32(40, value, true);
  }

  // 0x2c: u32
  set FirstInComponent(value: number) {
    this.view.setUint32(44, value, true);
  }

  // 0x30: u32
  set FirstOutRegister(value: number) {
    this.view.setUint32(48, value, true);
  }

  // 0x34: u32
  set FirstOutComponent(value: number) {
    this.view.setUint32(52, value, true);
  }
}

/**
 * Windows.Win32.Graphics.Direct3D9on12.D3D9ON12_ARGS (size: 32)
 */
export interface D3D9ON12_ARGS {
  /** Windows.Win32.Foundation.BOOL */
  Enable9On12: boolean;
  /** Windows.Win32.System.Com.IUnknown */
  pD3D12Device: Uint8Array | Deno.PointerValue | null;
  /** array */
  ppD3D12Queues: Deno.PointerValue | null;
  /** u32 */
  NumQueues: number;
  /** u32 */
  NodeMask: number;
}

export const sizeofD3D9ON12_ARGS = 32;

export function allocD3D9ON12_ARGS(data?: Partial<D3D9ON12_ARGS>): Uint8Array {
  const buf = new Uint8Array(sizeofD3D9ON12_ARGS);
  const view = new DataView(buf.buffer);
  // 0x00: i32
  if (data?.Enable9On12 !== undefined) view.setInt32(0, Number(data.Enable9On12), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.pD3D12Device !== undefined) view.setBigUint64(8, data.pD3D12Device === null ? 0n : util.toBigInt(util.toPointer(data.pD3D12Device)), true);
  // 0x10: pointer
  if (data?.ppD3D12Queues !== undefined) view.setBigUint64(16, data.ppD3D12Queues === null ? 0n : util.toBigInt(util.toPointer(data.ppD3D12Queues)), true);
  // 0x18: u32
  if (data?.NumQueues !== undefined) view.setUint32(24, Number(data.NumQueues), true);
  // 0x1c: u32
  if (data?.NodeMask !== undefined) view.setUint32(28, Number(data.NodeMask), true);
  return buf;
}

export class D3D9ON12_ARGSView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: i32
  get Enable9On12(): number {
    return this.view.getInt32(0, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  get pD3D12Device(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(8, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x10: pointer
  get ppD3D12Queues(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(16, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x18: u32
  get NumQueues(): number {
    return this.view.getUint32(24, true);
  }

  // 0x1c: u32
  get NodeMask(): number {
    return this.view.getUint32(28, true);
  }

  // 0x00: i32
  set Enable9On12(value: number) {
    this.view.setInt32(0, value, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  set pD3D12Device(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(8, util.toBigInt(util.toPointer(value)), true);
  }

  // 0x10: pointer
  set ppD3D12Queues(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(16, util.toBigInt(util.toPointer(value)), true);
  }

  // 0x18: u32
  set NumQueues(value: number) {
    this.view.setUint32(24, value, true);
  }

  // 0x1c: u32
  set NodeMask(value: number) {
    this.view.setUint32(28, value, true);
  }
}

/**
 * Windows.Win32.Graphics.Direct3D.Dxc.DxcShaderHash (size: 16)
 */
export interface DxcShaderHash {
  /** u32 */
  Flags: number;
  /** array */
  HashDigest: Deno.PointerValue | null;
}

export const sizeofDxcShaderHash = 16;

export function allocDxcShaderHash(data?: Partial<DxcShaderHash>): Uint8Array {
  const buf = new Uint8Array(sizeofDxcShaderHash);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.Flags !== undefined) view.setUint32(0, Number(data.Flags), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.HashDigest !== undefined) view.setBigUint64(8, data.HashDigest === null ? 0n : util.toBigInt(util.toPointer(data.HashDigest)), true);
  return buf;
}

export class DxcShaderHashView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get Flags(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  get HashDigest(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(8, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: u32
  set Flags(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  set HashDigest(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(8, util.toBigInt(util.toPointer(value)), true);
  }
}

/**
 * Windows.Win32.Graphics.Direct3D.Dxc.DxcBuffer (size: 24)
 */
export interface DxcBuffer {
  /** ptr */
  Ptr: Deno.PointerValue | Uint8Array | null;
  /** usize */
  Size: number | bigint;
  /** u32 */
  Encoding: number;
}

export const sizeofDxcBuffer = 24;

export function allocDxcBuffer(data?: Partial<DxcBuffer>): Uint8Array {
  const buf = new Uint8Array(sizeofDxcBuffer);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.Ptr !== undefined) view.setBigUint64(0, data.Ptr === null ? 0n : util.toBigInt(util.toPointer(data.Ptr)), true);
  // 0x08: usize
  if (data?.Size !== undefined) view.setBigUint64(8, util.toBigInt(data.Size), true);
  // 0x10: u32
  if (data?.Encoding !== undefined) view.setUint32(16, Number(data.Encoding), true);
  // 0x14: pad4
  return buf;
}

export class DxcBufferView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get Ptr(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(0, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x08: usize
  get Size(): number | bigint {
    return this.view.getBigUint64(8, true);
  }

  // 0x10: u32
  get Encoding(): number {
    return this.view.getUint32(16, true);
  }

  // 0x14: pad4

  // 0x00: pointer
  set Ptr(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(0, util.toBigInt(util.toPointer(value)), true);
  }

  // 0x08: usize
  set Size(value: number | bigint) {
    this.view.setBigUint64(8, util.toBigInt(value), true);
  }

  // 0x10: u32
  set Encoding(value: number) {
    this.view.setUint32(16, value, true);
  }

  // 0x14: pad4
}

/**
 * Windows.Win32.Graphics.Direct3D.Dxc.DxcDefine (size: 16)
 */
export interface DxcDefine {
  /** Windows.Win32.Foundation.PWSTR */
  Name: string | null | Uint8Array | Uint16Array;
  /** Windows.Win32.Foundation.PWSTR */
  Value: string | null | Uint8Array | Uint16Array;
}

export const sizeofDxcDefine = 16;

export function allocDxcDefine(data?: Partial<DxcDefine>): Uint8Array {
  const buf = new Uint8Array(sizeofDxcDefine);
  const view = new DataView(buf.buffer);
  // 0x00: buffer
  if (data?.Name !== undefined) {
    (buf as any)._f0 = util.pwstrToFfi(data.Name);
    view.setBigUint64(0, (buf as any)._f0 === null ? 0n : util.toBigInt(Deno.UnsafePointer.of((buf as any)._f0)), true);
  }
  // 0x08: buffer
  if (data?.Value !== undefined) {
    (buf as any)._f8 = util.pwstrToFfi(data.Value);
    view.setBigUint64(8, (buf as any)._f8 === null ? 0n : util.toBigInt(Deno.UnsafePointer.of((buf as any)._f8)), true);
  }
  return buf;
}

export class DxcDefineView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: buffer
  get Name(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(0, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x08: buffer
  get Value(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(8, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: buffer
  set Name(value: Uint8Array | Deno.PointerValue | null) {
    (this.buf as any)._f0 = value;
    this.view.setBigUint64(0, util.toBigInt(util.toPointer((this.buf as any)._f0)), true);
  }

  // 0x08: buffer
  set Value(value: Uint8Array | Deno.PointerValue | null) {
    (this.buf as any)._f8 = value;
    this.view.setBigUint64(8, util.toBigInt(util.toPointer((this.buf as any)._f8)), true);
  }
}

/**
 * Windows.Win32.Graphics.Direct3D.Dxc.DxcArgPair (size: 16)
 */
export interface DxcArgPair {
  /** Windows.Win32.Foundation.PWSTR */
  pName: string | null | Uint8Array | Uint16Array;
  /** Windows.Win32.Foundation.PWSTR */
  pValue: string | null | Uint8Array | Uint16Array;
}

export const sizeofDxcArgPair = 16;

export function allocDxcArgPair(data?: Partial<DxcArgPair>): Uint8Array {
  const buf = new Uint8Array(sizeofDxcArgPair);
  const view = new DataView(buf.buffer);
  // 0x00: buffer
  if (data?.pName !== undefined) {
    (buf as any)._f0 = util.pwstrToFfi(data.pName);
    view.setBigUint64(0, (buf as any)._f0 === null ? 0n : util.toBigInt(Deno.UnsafePointer.of((buf as any)._f0)), true);
  }
  // 0x08: buffer
  if (data?.pValue !== undefined) {
    (buf as any)._f8 = util.pwstrToFfi(data.pValue);
    view.setBigUint64(8, (buf as any)._f8 === null ? 0n : util.toBigInt(Deno.UnsafePointer.of((buf as any)._f8)), true);
  }
  return buf;
}

export class DxcArgPairView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: buffer
  get pName(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(0, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x08: buffer
  get pValue(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(8, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: buffer
  set pName(value: Uint8Array | Deno.PointerValue | null) {
    (this.buf as any)._f0 = value;
    this.view.setBigUint64(0, util.toBigInt(util.toPointer((this.buf as any)._f0)), true);
  }

  // 0x08: buffer
  set pValue(value: Uint8Array | Deno.PointerValue | null) {
    (this.buf as any)._f8 = value;
    this.view.setBigUint64(8, util.toBigInt(util.toPointer((this.buf as any)._f8)), true);
  }
}

/**
 * Windows.Win32.Graphics.Direct3D.Fxc.D3D_SHADER_DATA (size: 16)
 */
export interface D3D_SHADER_DATA {
  /** ptr */
  pBytecode: Deno.PointerValue | Uint8Array | null;
  /** usize */
  BytecodeLength: number | bigint;
}

export const sizeofD3D_SHADER_DATA = 16;

export function allocD3D_SHADER_DATA(data?: Partial<D3D_SHADER_DATA>): Uint8Array {
  const buf = new Uint8Array(sizeofD3D_SHADER_DATA);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.pBytecode !== undefined) view.setBigUint64(0, data.pBytecode === null ? 0n : util.toBigInt(util.toPointer(data.pBytecode)), true);
  // 0x08: usize
  if (data?.BytecodeLength !== undefined) view.setBigUint64(8, util.toBigInt(data.BytecodeLength), true);
  return buf;
}

export class D3D_SHADER_DATAView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get pBytecode(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(0, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x08: usize
  get BytecodeLength(): number | bigint {
    return this.view.getBigUint64(8, true);
  }

  // 0x00: pointer
  set pBytecode(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(0, util.toBigInt(util.toPointer(value)), true);
  }

  // 0x08: usize
  set BytecodeLength(value: number | bigint) {
    this.view.setBigUint64(8, util.toBigInt(value), true);
  }
}

/**
 * _u_e__Struct (size: 16)
 */
export interface _u_e__Struct {
  /** u32 */
  dwValue: number;
  /** Windows.Win32.Foundation.PWSTR */
  pwszName: string | null | Uint8Array | Uint16Array;
}

export const sizeof_u_e__Struct = 16;

export function alloc_u_e__Struct(data?: Partial<_u_e__Struct>): Uint8Array {
  const buf = new Uint8Array(sizeof_u_e__Struct);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.dwValue !== undefined) view.setUint32(0, Number(data.dwValue), true);
  // 0x04: pad4
  // 0x08: buffer
  if (data?.pwszName !== undefined) {
    (buf as any)._f8 = util.pwstrToFfi(data.pwszName);
    view.setBigUint64(8, (buf as any)._f8 === null ? 0n : util.toBigInt(Deno.UnsafePointer.of((buf as any)._f8)), true);
  }
  return buf;
}

export class _u_e__StructView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get dwValue(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: pad4

  // 0x08: buffer
  get pwszName(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(8, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: u32
  set dwValue(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: pad4

  // 0x08: buffer
  set pwszName(value: Uint8Array | Deno.PointerValue | null) {
    (this.buf as any)._f8 = value;
    this.view.setBigUint64(8, util.toBigInt(util.toPointer((this.buf as any)._f8)), true);
  }
}

/**
 * Windows.Win32.Foundation.LARGE_INTEGER (size: 24)
 */
export interface LARGE_INTEGER {
  /** _Anonymous_e__Struct */
  Anonymous: Uint8Array | Deno.PointerValue | null;
  /** _u_e__Struct */
  u: Uint8Array | Deno.PointerValue | null;
  /** i64 */
  QuadPart: number | bigint;
}

export const sizeofLARGE_INTEGER = 24;

export function allocLARGE_INTEGER(data?: Partial<LARGE_INTEGER>): Uint8Array {
  const buf = new Uint8Array(sizeofLARGE_INTEGER);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.Anonymous !== undefined) view.setBigUint64(0, data.Anonymous === null ? 0n : util.toBigInt(util.toPointer(data.Anonymous)), true);
  // 0x08: pointer
  if (data?.u !== undefined) view.setBigUint64(8, data.u === null ? 0n : util.toBigInt(util.toPointer(data.u)), true);
  // 0x10: i64
  if (data?.QuadPart !== undefined) view.setBigInt64(16, util.toBigInt(data.QuadPart), true);
  return buf;
}

export class LARGE_INTEGERView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get Anonymous(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(0, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x08: pointer
  get u(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(8, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x10: i64
  get QuadPart(): number | bigint {
    return this.view.getBigInt64(16, true);
  }

  // 0x00: pointer
  set Anonymous(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(0, util.toBigInt(util.toPointer(value)), true);
  }

  // 0x08: pointer
  set u(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(8, util.toBigInt(util.toPointer(value)), true);
  }

  // 0x10: i64
  set QuadPart(value: number | bigint) {
    this.view.setBigInt64(16, util.toBigInt(value), true);
  }
}

/**
 * Windows.Win32.Graphics.Direct3D9.D3DADAPTER_IDENTIFIER9 (size: 64)
 */
export interface D3DADAPTER_IDENTIFIER9 {
  /** array */
  Driver: Deno.PointerValue | null;
  /** array */
  Description: Deno.PointerValue | null;
  /** array */
  DeviceName: Deno.PointerValue | null;
  /** Windows.Win32.Foundation.LARGE_INTEGER */
  DriverVersion: Uint8Array | Deno.PointerValue | null;
  /** u32 */
  VendorId: number;
  /** u32 */
  DeviceId: number;
  /** u32 */
  SubSysId: number;
  /** u32 */
  Revision: number;
  /** System.Guid */
  DeviceIdentifier: Uint8Array | Deno.PointerValue | null;
  /** u32 */
  WHQLLevel: number;
}

export const sizeofD3DADAPTER_IDENTIFIER9 = 64;

export function allocD3DADAPTER_IDENTIFIER9(data?: Partial<D3DADAPTER_IDENTIFIER9>): Uint8Array {
  const buf = new Uint8Array(sizeofD3DADAPTER_IDENTIFIER9);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.Driver !== undefined) view.setBigUint64(0, data.Driver === null ? 0n : util.toBigInt(util.toPointer(data.Driver)), true);
  // 0x08: pointer
  if (data?.Description !== undefined) view.setBigUint64(8, data.Description === null ? 0n : util.toBigInt(util.toPointer(data.Description)), true);
  // 0x10: pointer
  if (data?.DeviceName !== undefined) view.setBigUint64(16, data.DeviceName === null ? 0n : util.toBigInt(util.toPointer(data.DeviceName)), true);
  // 0x18: pointer
  if (data?.DriverVersion !== undefined) view.setBigUint64(24, data.DriverVersion === null ? 0n : util.toBigInt(util.toPointer(data.DriverVersion)), true);
  // 0x20: u32
  if (data?.VendorId !== undefined) view.setUint32(32, Number(data.VendorId), true);
  // 0x24: u32
  if (data?.DeviceId !== undefined) view.setUint32(36, Number(data.DeviceId), true);
  // 0x28: u32
  if (data?.SubSysId !== undefined) view.setUint32(40, Number(data.SubSysId), true);
  // 0x2c: u32
  if (data?.Revision !== undefined) view.setUint32(44, Number(data.Revision), true);
  // 0x30: pointer
  if (data?.DeviceIdentifier !== undefined) view.setBigUint64(48, data.DeviceIdentifier === null ? 0n : util.toBigInt(util.toPointer(data.DeviceIdentifier)), true);
  // 0x38: u32
  if (data?.WHQLLevel !== undefined) view.setUint32(56, Number(data.WHQLLevel), true);
  // 0x3c: pad4
  return buf;
}

export class D3DADAPTER_IDENTIFIER9View {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get Driver(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(0, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x08: pointer
  get Description(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(8, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x10: pointer
  get DeviceName(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(16, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x18: pointer
  get DriverVersion(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(24, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x20: u32
  get VendorId(): number {
    return this.view.getUint32(32, true);
  }

  // 0x24: u32
  get DeviceId(): number {
    return this.view.getUint32(36, true);
  }

  // 0x28: u32
  get SubSysId(): number {
    return this.view.getUint32(40, true);
  }

  // 0x2c: u32
  get Revision(): number {
    return this.view.getUint32(44, true);
  }

  // 0x30: pointer
  get DeviceIdentifier(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(48, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x38: u32
  get WHQLLevel(): number {
    return this.view.getUint32(56, true);
  }

  // 0x3c: pad4

  // 0x00: pointer
  set Driver(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(0, util.toBigInt(util.toPointer(value)), true);
  }

  // 0x08: pointer
  set Description(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(8, util.toBigInt(util.toPointer(value)), true);
  }

  // 0x10: pointer
  set DeviceName(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(16, util.toBigInt(util.toPointer(value)), true);
  }

  // 0x18: pointer
  set DriverVersion(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(24, util.toBigInt(util.toPointer(value)), true);
  }

  // 0x20: u32
  set VendorId(value: number) {
    this.view.setUint32(32, value, true);
  }

  // 0x24: u32
  set DeviceId(value: number) {
    this.view.setUint32(36, value, true);
  }

  // 0x28: u32
  set SubSysId(value: number) {
    this.view.setUint32(40, value, true);
  }

  // 0x2c: u32
  set Revision(value: number) {
    this.view.setUint32(44, value, true);
  }

  // 0x30: pointer
  set DeviceIdentifier(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(48, util.toBigInt(util.toPointer(value)), true);
  }

  // 0x38: u32
  set WHQLLevel(value: number) {
    this.view.setUint32(56, value, true);
  }

  // 0x3c: pad4
}

/**
 * Windows.Win32.Graphics.Direct3D9.D3DMEMORYPRESSURE (size: 24)
 */
export interface D3DMEMORYPRESSURE {
  /** u64 */
  BytesEvictedFromProcess: number | bigint;
  /** u64 */
  SizeOfInefficientAllocation: number | bigint;
  /** u32 */
  LevelOfEfficiency: number;
}

export const sizeofD3DMEMORYPRESSURE = 24;

export function allocD3DMEMORYPRESSURE(data?: Partial<D3DMEMORYPRESSURE>): Uint8Array {
  const buf = new Uint8Array(sizeofD3DMEMORYPRESSURE);
  const view = new DataView(buf.buffer);
  // 0x00: u64
  if (data?.BytesEvictedFromProcess !== undefined) view.setBigUint64(0, util.toBigInt(data.BytesEvictedFromProcess), true);
  // 0x08: u64
  if (data?.SizeOfInefficientAllocation !== undefined) view.setBigUint64(8, util.toBigInt(data.SizeOfInefficientAllocation), true);
  // 0x10: u32
  if (data?.LevelOfEfficiency !== undefined) view.setUint32(16, Number(data.LevelOfEfficiency), true);
  // 0x14: pad4
  return buf;
}

export class D3DMEMORYPRESSUREView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u64
  get BytesEvictedFromProcess(): number | bigint {
    return this.view.getBigUint64(0, true);
  }

  // 0x08: u64
  get SizeOfInefficientAllocation(): number | bigint {
    return this.view.getBigUint64(8, true);
  }

  // 0x10: u32
  get LevelOfEfficiency(): number {
    return this.view.getUint32(16, true);
  }

  // 0x14: pad4

  // 0x00: u64
  set BytesEvictedFromProcess(value: number | bigint) {
    this.view.setBigUint64(0, util.toBigInt(value), true);
  }

  // 0x08: u64
  set SizeOfInefficientAllocation(value: number | bigint) {
    this.view.setBigUint64(8, util.toBigInt(value), true);
  }

  // 0x10: u32
  set LevelOfEfficiency(value: number) {
    this.view.setUint32(16, value, true);
  }

  // 0x14: pad4
}

/**
 * Windows.Win32.Graphics.Direct3D9.D3DPRESENTSTATS (size: 32)
 */
export interface D3DPRESENTSTATS {
  /** u32 */
  PresentCount: number;
  /** u32 */
  PresentRefreshCount: number;
  /** u32 */
  SyncRefreshCount: number;
  /** Windows.Win32.Foundation.LARGE_INTEGER */
  SyncQPCTime: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Foundation.LARGE_INTEGER */
  SyncGPUTime: Uint8Array | Deno.PointerValue | null;
}

export const sizeofD3DPRESENTSTATS = 32;

export function allocD3DPRESENTSTATS(data?: Partial<D3DPRESENTSTATS>): Uint8Array {
  const buf = new Uint8Array(sizeofD3DPRESENTSTATS);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.PresentCount !== undefined) view.setUint32(0, Number(data.PresentCount), true);
  // 0x04: u32
  if (data?.PresentRefreshCount !== undefined) view.setUint32(4, Number(data.PresentRefreshCount), true);
  // 0x08: u32
  if (data?.SyncRefreshCount !== undefined) view.setUint32(8, Number(data.SyncRefreshCount), true);
  // 0x0c: pad4
  // 0x10: pointer
  if (data?.SyncQPCTime !== undefined) view.setBigUint64(16, data.SyncQPCTime === null ? 0n : util.toBigInt(util.toPointer(data.SyncQPCTime)), true);
  // 0x18: pointer
  if (data?.SyncGPUTime !== undefined) view.setBigUint64(24, data.SyncGPUTime === null ? 0n : util.toBigInt(util.toPointer(data.SyncGPUTime)), true);
  return buf;
}

export class D3DPRESENTSTATSView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get PresentCount(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: u32
  get PresentRefreshCount(): number {
    return this.view.getUint32(4, true);
  }

  // 0x08: u32
  get SyncRefreshCount(): number {
    return this.view.getUint32(8, true);
  }

  // 0x0c: pad4

  // 0x10: pointer
  get SyncQPCTime(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(16, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x18: pointer
  get SyncGPUTime(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(24, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: u32
  set PresentCount(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: u32
  set PresentRefreshCount(value: number) {
    this.view.setUint32(4, value, true);
  }

  // 0x08: u32
  set SyncRefreshCount(value: number) {
    this.view.setUint32(8, value, true);
  }

  // 0x0c: pad4

  // 0x10: pointer
  set SyncQPCTime(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(16, util.toBigInt(util.toPointer(value)), true);
  }

  // 0x18: pointer
  set SyncGPUTime(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(24, util.toBigInt(util.toPointer(value)), true);
  }
}

/**
 * Windows.Win32.Graphics.Direct3D9.D3D_OMAC (size: 8)
 */
export interface D3D_OMAC {
  /** array */
  Omac: Deno.PointerValue | null;
}

export const sizeofD3D_OMAC = 8;

export function allocD3D_OMAC(data?: Partial<D3D_OMAC>): Uint8Array {
  const buf = new Uint8Array(sizeofD3D_OMAC);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.Omac !== undefined) view.setBigUint64(0, data.Omac === null ? 0n : util.toBigInt(util.toPointer(data.Omac)), true);
  return buf;
}

export class D3D_OMACView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get Omac(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(0, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: pointer
  set Omac(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(0, util.toBigInt(util.toPointer(value)), true);
  }
}

/**
 * Windows.Win32.Graphics.Direct3D9.D3DAUTHENTICATEDCHANNEL_QUERY_OUTPUT (size: 40)
 */
export interface D3DAUTHENTICATEDCHANNEL_QUERY_OUTPUT {
  /** Windows.Win32.Graphics.Direct3D9.D3D_OMAC */
  omac: Uint8Array | Deno.PointerValue | null;
  /** System.Guid */
  QueryType: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Foundation.HANDLE */
  hChannel: Uint8Array | Deno.PointerValue | null;
  /** u32 */
  SequenceNumber: number;
  /** Windows.Win32.Foundation.HRESULT */
  ReturnCode: Uint8Array | Deno.PointerValue | null;
}

export const sizeofD3DAUTHENTICATEDCHANNEL_QUERY_OUTPUT = 40;

export function allocD3DAUTHENTICATEDCHANNEL_QUERY_OUTPUT(data?: Partial<D3DAUTHENTICATEDCHANNEL_QUERY_OUTPUT>): Uint8Array {
  const buf = new Uint8Array(sizeofD3DAUTHENTICATEDCHANNEL_QUERY_OUTPUT);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.omac !== undefined) view.setBigUint64(0, data.omac === null ? 0n : util.toBigInt(util.toPointer(data.omac)), true);
  // 0x08: pointer
  if (data?.QueryType !== undefined) view.setBigUint64(8, data.QueryType === null ? 0n : util.toBigInt(util.toPointer(data.QueryType)), true);
  // 0x10: pointer
  if (data?.hChannel !== undefined) view.setBigUint64(16, data.hChannel === null ? 0n : util.toBigInt(util.toPointer(data.hChannel)), true);
  // 0x18: u32
  if (data?.SequenceNumber !== undefined) view.setUint32(24, Number(data.SequenceNumber), true);
  // 0x1c: pad4
  // 0x20: pointer
  if (data?.ReturnCode !== undefined) view.setBigUint64(32, data.ReturnCode === null ? 0n : util.toBigInt(util.toPointer(data.ReturnCode)), true);
  return buf;
}

export class D3DAUTHENTICATEDCHANNEL_QUERY_OUTPUTView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get omac(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(0, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x08: pointer
  get QueryType(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(8, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x10: pointer
  get hChannel(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(16, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x18: u32
  get SequenceNumber(): number {
    return this.view.getUint32(24, true);
  }

  // 0x1c: pad4

  // 0x20: pointer
  get ReturnCode(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(32, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: pointer
  set omac(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(0, util.toBigInt(util.toPointer(value)), true);
  }

  // 0x08: pointer
  set QueryType(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(8, util.toBigInt(util.toPointer(value)), true);
  }

  // 0x10: pointer
  set hChannel(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(16, util.toBigInt(util.toPointer(value)), true);
  }

  // 0x18: u32
  set SequenceNumber(value: number) {
    this.view.setUint32(24, value, true);
  }

  // 0x1c: pad4

  // 0x20: pointer
  set ReturnCode(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(32, util.toBigInt(util.toPointer(value)), true);
  }
}

/**
 * Windows.Win32.Graphics.Direct3D9.D3DAUTHENTICATEDCHANNEL_QUERYOUTPUTID_OUTPUT (size: 40)
 */
export interface D3DAUTHENTICATEDCHANNEL_QUERYOUTPUTID_OUTPUT {
  /** Windows.Win32.Graphics.Direct3D9.D3DAUTHENTICATEDCHANNEL_QUERY_OUTPUT */
  Output: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Foundation.HANDLE */
  DeviceHandle: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Foundation.HANDLE */
  CryptoSessionHandle: Uint8Array | Deno.PointerValue | null;
  /** u32 */
  OutputIDIndex: number;
  /** u64 */
  OutputID: number | bigint;
}

export const sizeofD3DAUTHENTICATEDCHANNEL_QUERYOUTPUTID_OUTPUT = 40;

export function allocD3DAUTHENTICATEDCHANNEL_QUERYOUTPUTID_OUTPUT(data?: Partial<D3DAUTHENTICATEDCHANNEL_QUERYOUTPUTID_OUTPUT>): Uint8Array {
  const buf = new Uint8Array(sizeofD3DAUTHENTICATEDCHANNEL_QUERYOUTPUTID_OUTPUT);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.Output !== undefined) view.setBigUint64(0, data.Output === null ? 0n : util.toBigInt(util.toPointer(data.Output)), true);
  // 0x08: pointer
  if (data?.DeviceHandle !== undefined) view.setBigUint64(8, data.DeviceHandle === null ? 0n : util.toBigInt(util.toPointer(data.DeviceHandle)), true);
  // 0x10: pointer
  if (data?.CryptoSessionHandle !== undefined) view.setBigUint64(16, data.CryptoSessionHandle === null ? 0n : util.toBigInt(util.toPointer(data.CryptoSessionHandle)), true);
  // 0x18: u32
  if (data?.OutputIDIndex !== undefined) view.setUint32(24, Number(data.OutputIDIndex), true);
  // 0x1c: pad4
  // 0x20: u64
  if (data?.OutputID !== undefined) view.setBigUint64(32, util.toBigInt(data.OutputID), true);
  return buf;
}

export class D3DAUTHENTICATEDCHANNEL_QUERYOUTPUTID_OUTPUTView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get Output(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(0, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x08: pointer
  get DeviceHandle(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(8, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x10: pointer
  get CryptoSessionHandle(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(16, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x18: u32
  get OutputIDIndex(): number {
    return this.view.getUint32(24, true);
  }

  // 0x1c: pad4

  // 0x20: u64
  get OutputID(): number | bigint {
    return this.view.getBigUint64(32, true);
  }

  // 0x00: pointer
  set Output(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(0, util.toBigInt(util.toPointer(value)), true);
  }

  // 0x08: pointer
  set DeviceHandle(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(8, util.toBigInt(util.toPointer(value)), true);
  }

  // 0x10: pointer
  set CryptoSessionHandle(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(16, util.toBigInt(util.toPointer(value)), true);
  }

  // 0x18: u32
  set OutputIDIndex(value: number) {
    this.view.setUint32(24, value, true);
  }

  // 0x1c: pad4

  // 0x20: u64
  set OutputID(value: number | bigint) {
    this.view.setBigUint64(32, util.toBigInt(value), true);
  }
}

/**
 * Windows.Win32.Graphics.Direct3D9.D3DAES_CTR_IV (size: 16)
 */
export interface D3DAES_CTR_IV {
  /** u64 */
  IV: number | bigint;
  /** u64 */
  Count: number | bigint;
}

export const sizeofD3DAES_CTR_IV = 16;

export function allocD3DAES_CTR_IV(data?: Partial<D3DAES_CTR_IV>): Uint8Array {
  const buf = new Uint8Array(sizeofD3DAES_CTR_IV);
  const view = new DataView(buf.buffer);
  // 0x00: u64
  if (data?.IV !== undefined) view.setBigUint64(0, util.toBigInt(data.IV), true);
  // 0x08: u64
  if (data?.Count !== undefined) view.setBigUint64(8, util.toBigInt(data.Count), true);
  return buf;
}

export class D3DAES_CTR_IVView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u64
  get IV(): number | bigint {
    return this.view.getBigUint64(0, true);
  }

  // 0x08: u64
  get Count(): number | bigint {
    return this.view.getBigUint64(8, true);
  }

  // 0x00: u64
  set IV(value: number | bigint) {
    this.view.setBigUint64(0, util.toBigInt(value), true);
  }

  // 0x08: u64
  set Count(value: number | bigint) {
    this.view.setBigUint64(8, util.toBigInt(value), true);
  }
}

/**
 * Windows.Win32.Graphics.Direct3D9.D3DCOLORVALUE (size: 16)
 */
export interface D3DCOLORVALUE {
  /** f32 */
  r: number;
  /** f32 */
  g: number;
  /** f32 */
  b: number;
  /** f32 */
  a: number;
}

export const sizeofD3DCOLORVALUE = 16;

export function allocD3DCOLORVALUE(data?: Partial<D3DCOLORVALUE>): Uint8Array {
  const buf = new Uint8Array(sizeofD3DCOLORVALUE);
  const view = new DataView(buf.buffer);
  // 0x00: f32
  if (data?.r !== undefined) view.setFloat32(0, Number(data.r), true);
  // 0x04: f32
  if (data?.g !== undefined) view.setFloat32(4, Number(data.g), true);
  // 0x08: f32
  if (data?.b !== undefined) view.setFloat32(8, Number(data.b), true);
  // 0x0c: f32
  if (data?.a !== undefined) view.setFloat32(12, Number(data.a), true);
  return buf;
}

export class D3DCOLORVALUEView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: f32
  get r(): number {
    return this.view.getFloat32(0, true);
  }

  // 0x04: f32
  get g(): number {
    return this.view.getFloat32(4, true);
  }

  // 0x08: f32
  get b(): number {
    return this.view.getFloat32(8, true);
  }

  // 0x0c: f32
  get a(): number {
    return this.view.getFloat32(12, true);
  }

  // 0x00: f32
  set r(value: number) {
    this.view.setFloat32(0, value, true);
  }

  // 0x04: f32
  set g(value: number) {
    this.view.setFloat32(4, value, true);
  }

  // 0x08: f32
  set b(value: number) {
    this.view.setFloat32(8, value, true);
  }

  // 0x0c: f32
  set a(value: number) {
    this.view.setFloat32(12, value, true);
  }
}

/**
 * Windows.Win32.Graphics.Direct3D9.D3DRECT (size: 16)
 */
export interface D3DRECT {
  /** i32 */
  x1: number;
  /** i32 */
  y1: number;
  /** i32 */
  x2: number;
  /** i32 */
  y2: number;
}

export const sizeofD3DRECT = 16;

export function allocD3DRECT(data?: Partial<D3DRECT>): Uint8Array {
  const buf = new Uint8Array(sizeofD3DRECT);
  const view = new DataView(buf.buffer);
  // 0x00: i32
  if (data?.x1 !== undefined) view.setInt32(0, Number(data.x1), true);
  // 0x04: i32
  if (data?.y1 !== undefined) view.setInt32(4, Number(data.y1), true);
  // 0x08: i32
  if (data?.x2 !== undefined) view.setInt32(8, Number(data.x2), true);
  // 0x0c: i32
  if (data?.y2 !== undefined) view.setInt32(12, Number(data.y2), true);
  return buf;
}

export class D3DRECTView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: i32
  get x1(): number {
    return this.view.getInt32(0, true);
  }

  // 0x04: i32
  get y1(): number {
    return this.view.getInt32(4, true);
  }

  // 0x08: i32
  get x2(): number {
    return this.view.getInt32(8, true);
  }

  // 0x0c: i32
  get y2(): number {
    return this.view.getInt32(12, true);
  }

  // 0x00: i32
  set x1(value: number) {
    this.view.setInt32(0, value, true);
  }

  // 0x04: i32
  set y1(value: number) {
    this.view.setInt32(4, value, true);
  }

  // 0x08: i32
  set x2(value: number) {
    this.view.setInt32(8, value, true);
  }

  // 0x0c: i32
  set y2(value: number) {
    this.view.setInt32(12, value, true);
  }
}

/**
 * Windows.Win32.Graphics.Direct3D9.D3DVIEWPORT9 (size: 24)
 */
export interface D3DVIEWPORT9 {
  /** u32 */
  X: number;
  /** u32 */
  Y: number;
  /** u32 */
  Width: number;
  /** u32 */
  Height: number;
  /** f32 */
  MinZ: number;
  /** f32 */
  MaxZ: number;
}

export const sizeofD3DVIEWPORT9 = 24;

export function allocD3DVIEWPORT9(data?: Partial<D3DVIEWPORT9>): Uint8Array {
  const buf = new Uint8Array(sizeofD3DVIEWPORT9);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.X !== undefined) view.setUint32(0, Number(data.X), true);
  // 0x04: u32
  if (data?.Y !== undefined) view.setUint32(4, Number(data.Y), true);
  // 0x08: u32
  if (data?.Width !== undefined) view.setUint32(8, Number(data.Width), true);
  // 0x0c: u32
  if (data?.Height !== undefined) view.setUint32(12, Number(data.Height), true);
  // 0x10: f32
  if (data?.MinZ !== undefined) view.setFloat32(16, Number(data.MinZ), true);
  // 0x14: f32
  if (data?.MaxZ !== undefined) view.setFloat32(20, Number(data.MaxZ), true);
  return buf;
}

export class D3DVIEWPORT9View {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get X(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: u32
  get Y(): number {
    return this.view.getUint32(4, true);
  }

  // 0x08: u32
  get Width(): number {
    return this.view.getUint32(8, true);
  }

  // 0x0c: u32
  get Height(): number {
    return this.view.getUint32(12, true);
  }

  // 0x10: f32
  get MinZ(): number {
    return this.view.getFloat32(16, true);
  }

  // 0x14: f32
  get MaxZ(): number {
    return this.view.getFloat32(20, true);
  }

  // 0x00: u32
  set X(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: u32
  set Y(value: number) {
    this.view.setUint32(4, value, true);
  }

  // 0x08: u32
  set Width(value: number) {
    this.view.setUint32(8, value, true);
  }

  // 0x0c: u32
  set Height(value: number) {
    this.view.setUint32(12, value, true);
  }

  // 0x10: f32
  set MinZ(value: number) {
    this.view.setFloat32(16, value, true);
  }

  // 0x14: f32
  set MaxZ(value: number) {
    this.view.setFloat32(20, value, true);
  }
}

/**
 * Windows.Win32.Graphics.Direct3D9.D3DCLIPSTATUS9 (size: 8)
 */
export interface D3DCLIPSTATUS9 {
  /** u32 */
  ClipUnion: number;
  /** u32 */
  ClipIntersection: number;
}

export const sizeofD3DCLIPSTATUS9 = 8;

export function allocD3DCLIPSTATUS9(data?: Partial<D3DCLIPSTATUS9>): Uint8Array {
  const buf = new Uint8Array(sizeofD3DCLIPSTATUS9);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.ClipUnion !== undefined) view.setUint32(0, Number(data.ClipUnion), true);
  // 0x04: u32
  if (data?.ClipIntersection !== undefined) view.setUint32(4, Number(data.ClipIntersection), true);
  return buf;
}

export class D3DCLIPSTATUS9View {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get ClipUnion(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: u32
  get ClipIntersection(): number {
    return this.view.getUint32(4, true);
  }

  // 0x00: u32
  set ClipUnion(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: u32
  set ClipIntersection(value: number) {
    this.view.setUint32(4, value, true);
  }
}

/**
 * Windows.Win32.Graphics.Direct3D9.D3DMATERIAL9 (size: 40)
 */
export interface D3DMATERIAL9 {
  /** Windows.Win32.Graphics.Direct3D9.D3DCOLORVALUE */
  Diffuse: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Graphics.Direct3D9.D3DCOLORVALUE */
  Ambient: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Graphics.Direct3D9.D3DCOLORVALUE */
  Specular: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Graphics.Direct3D9.D3DCOLORVALUE */
  Emissive: Uint8Array | Deno.PointerValue | null;
  /** f32 */
  Power: number;
}

export const sizeofD3DMATERIAL9 = 40;

export function allocD3DMATERIAL9(data?: Partial<D3DMATERIAL9>): Uint8Array {
  const buf = new Uint8Array(sizeofD3DMATERIAL9);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.Diffuse !== undefined) view.setBigUint64(0, data.Diffuse === null ? 0n : util.toBigInt(util.toPointer(data.Diffuse)), true);
  // 0x08: pointer
  if (data?.Ambient !== undefined) view.setBigUint64(8, data.Ambient === null ? 0n : util.toBigInt(util.toPointer(data.Ambient)), true);
  // 0x10: pointer
  if (data?.Specular !== undefined) view.setBigUint64(16, data.Specular === null ? 0n : util.toBigInt(util.toPointer(data.Specular)), true);
  // 0x18: pointer
  if (data?.Emissive !== undefined) view.setBigUint64(24, data.Emissive === null ? 0n : util.toBigInt(util.toPointer(data.Emissive)), true);
  // 0x20: f32
  if (data?.Power !== undefined) view.setFloat32(32, Number(data.Power), true);
  // 0x24: pad4
  return buf;
}

export class D3DMATERIAL9View {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get Diffuse(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(0, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x08: pointer
  get Ambient(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(8, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x10: pointer
  get Specular(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(16, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x18: pointer
  get Emissive(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(24, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x20: f32
  get Power(): number {
    return this.view.getFloat32(32, true);
  }

  // 0x24: pad4

  // 0x00: pointer
  set Diffuse(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(0, util.toBigInt(util.toPointer(value)), true);
  }

  // 0x08: pointer
  set Ambient(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(8, util.toBigInt(util.toPointer(value)), true);
  }

  // 0x10: pointer
  set Specular(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(16, util.toBigInt(util.toPointer(value)), true);
  }

  // 0x18: pointer
  set Emissive(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(24, util.toBigInt(util.toPointer(value)), true);
  }

  // 0x20: f32
  set Power(value: number) {
    this.view.setFloat32(32, value, true);
  }

  // 0x24: pad4
}

/**
 * Windows.Win32.Graphics.Direct3D.D3DVECTOR (size: 16)
 */
export interface D3DVECTOR {
  /** f32 */
  x: number;
  /** f32 */
  y: number;
  /** f32 */
  z: number;
}

export const sizeofD3DVECTOR = 16;

export function allocD3DVECTOR(data?: Partial<D3DVECTOR>): Uint8Array {
  const buf = new Uint8Array(sizeofD3DVECTOR);
  const view = new DataView(buf.buffer);
  // 0x00: f32
  if (data?.x !== undefined) view.setFloat32(0, Number(data.x), true);
  // 0x04: f32
  if (data?.y !== undefined) view.setFloat32(4, Number(data.y), true);
  // 0x08: f32
  if (data?.z !== undefined) view.setFloat32(8, Number(data.z), true);
  // 0x0c: pad4
  return buf;
}

export class D3DVECTORView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: f32
  get x(): number {
    return this.view.getFloat32(0, true);
  }

  // 0x04: f32
  get y(): number {
    return this.view.getFloat32(4, true);
  }

  // 0x08: f32
  get z(): number {
    return this.view.getFloat32(8, true);
  }

  // 0x0c: pad4

  // 0x00: f32
  set x(value: number) {
    this.view.setFloat32(0, value, true);
  }

  // 0x04: f32
  set y(value: number) {
    this.view.setFloat32(4, value, true);
  }

  // 0x08: f32
  set z(value: number) {
    this.view.setFloat32(8, value, true);
  }

  // 0x0c: pad4
}

/**
 * Windows.Win32.Graphics.Direct3D9.D3DLIGHT9 (size: 80)
 */
export interface D3DLIGHT9 {
  /** Windows.Win32.Graphics.Direct3D9.D3DLIGHTTYPE */
  Type: D3DLIGHTTYPE;
  /** Windows.Win32.Graphics.Direct3D9.D3DCOLORVALUE */
  Diffuse: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Graphics.Direct3D9.D3DCOLORVALUE */
  Specular: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Graphics.Direct3D9.D3DCOLORVALUE */
  Ambient: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Graphics.Direct3D.D3DVECTOR */
  Position: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Graphics.Direct3D.D3DVECTOR */
  Direction: Uint8Array | Deno.PointerValue | null;
  /** f32 */
  Range: number;
  /** f32 */
  Falloff: number;
  /** f32 */
  Attenuation0: number;
  /** f32 */
  Attenuation1: number;
  /** f32 */
  Attenuation2: number;
  /** f32 */
  Theta: number;
  /** f32 */
  Phi: number;
}

export const sizeofD3DLIGHT9 = 80;

export function allocD3DLIGHT9(data?: Partial<D3DLIGHT9>): Uint8Array {
  const buf = new Uint8Array(sizeofD3DLIGHT9);
  const view = new DataView(buf.buffer);
  // 0x00: i32
  if (data?.Type !== undefined) view.setInt32(0, Number(data.Type), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.Diffuse !== undefined) view.setBigUint64(8, data.Diffuse === null ? 0n : util.toBigInt(util.toPointer(data.Diffuse)), true);
  // 0x10: pointer
  if (data?.Specular !== undefined) view.setBigUint64(16, data.Specular === null ? 0n : util.toBigInt(util.toPointer(data.Specular)), true);
  // 0x18: pointer
  if (data?.Ambient !== undefined) view.setBigUint64(24, data.Ambient === null ? 0n : util.toBigInt(util.toPointer(data.Ambient)), true);
  // 0x20: pointer
  if (data?.Position !== undefined) view.setBigUint64(32, data.Position === null ? 0n : util.toBigInt(util.toPointer(data.Position)), true);
  // 0x28: pointer
  if (data?.Direction !== undefined) view.setBigUint64(40, data.Direction === null ? 0n : util.toBigInt(util.toPointer(data.Direction)), true);
  // 0x30: f32
  if (data?.Range !== undefined) view.setFloat32(48, Number(data.Range), true);
  // 0x34: f32
  if (data?.Falloff !== undefined) view.setFloat32(52, Number(data.Falloff), true);
  // 0x38: f32
  if (data?.Attenuation0 !== undefined) view.setFloat32(56, Number(data.Attenuation0), true);
  // 0x3c: f32
  if (data?.Attenuation1 !== undefined) view.setFloat32(60, Number(data.Attenuation1), true);
  // 0x40: f32
  if (data?.Attenuation2 !== undefined) view.setFloat32(64, Number(data.Attenuation2), true);
  // 0x44: f32
  if (data?.Theta !== undefined) view.setFloat32(68, Number(data.Theta), true);
  // 0x48: f32
  if (data?.Phi !== undefined) view.setFloat32(72, Number(data.Phi), true);
  // 0x4c: pad4
  return buf;
}

export class D3DLIGHT9View {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: i32
  get Type(): number {
    return this.view.getInt32(0, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  get Diffuse(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(8, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x10: pointer
  get Specular(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(16, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x18: pointer
  get Ambient(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(24, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x20: pointer
  get Position(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(32, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x28: pointer
  get Direction(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(40, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x30: f32
  get Range(): number {
    return this.view.getFloat32(48, true);
  }

  // 0x34: f32
  get Falloff(): number {
    return this.view.getFloat32(52, true);
  }

  // 0x38: f32
  get Attenuation0(): number {
    return this.view.getFloat32(56, true);
  }

  // 0x3c: f32
  get Attenuation1(): number {
    return this.view.getFloat32(60, true);
  }

  // 0x40: f32
  get Attenuation2(): number {
    return this.view.getFloat32(64, true);
  }

  // 0x44: f32
  get Theta(): number {
    return this.view.getFloat32(68, true);
  }

  // 0x48: f32
  get Phi(): number {
    return this.view.getFloat32(72, true);
  }

  // 0x4c: pad4

  // 0x00: i32
  set Type(value: number) {
    this.view.setInt32(0, value, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  set Diffuse(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(8, util.toBigInt(util.toPointer(value)), true);
  }

  // 0x10: pointer
  set Specular(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(16, util.toBigInt(util.toPointer(value)), true);
  }

  // 0x18: pointer
  set Ambient(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(24, util.toBigInt(util.toPointer(value)), true);
  }

  // 0x20: pointer
  set Position(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(32, util.toBigInt(util.toPointer(value)), true);
  }

  // 0x28: pointer
  set Direction(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(40, util.toBigInt(util.toPointer(value)), true);
  }

  // 0x30: f32
  set Range(value: number) {
    this.view.setFloat32(48, value, true);
  }

  // 0x34: f32
  set Falloff(value: number) {
    this.view.setFloat32(52, value, true);
  }

  // 0x38: f32
  set Attenuation0(value: number) {
    this.view.setFloat32(56, value, true);
  }

  // 0x3c: f32
  set Attenuation1(value: number) {
    this.view.setFloat32(60, value, true);
  }

  // 0x40: f32
  set Attenuation2(value: number) {
    this.view.setFloat32(64, value, true);
  }

  // 0x44: f32
  set Theta(value: number) {
    this.view.setFloat32(68, value, true);
  }

  // 0x48: f32
  set Phi(value: number) {
    this.view.setFloat32(72, value, true);
  }

  // 0x4c: pad4
}

/**
 * Windows.Win32.Graphics.Direct3D9.D3DVERTEXELEMENT9 (size: 8)
 */
export interface D3DVERTEXELEMENT9 {
  /** u16 */
  Stream: number;
  /** u16 */
  Offset: number;
  /** u8 */
  Type: number;
  /** u8 */
  Method: number;
  /** u8 */
  Usage: number;
  /** u8 */
  UsageIndex: number;
}

export const sizeofD3DVERTEXELEMENT9 = 8;

export function allocD3DVERTEXELEMENT9(data?: Partial<D3DVERTEXELEMENT9>): Uint8Array {
  const buf = new Uint8Array(sizeofD3DVERTEXELEMENT9);
  const view = new DataView(buf.buffer);
  // 0x00: u16
  if (data?.Stream !== undefined) view.setUint16(0, Number(data.Stream), true);
  // 0x02: u16
  if (data?.Offset !== undefined) view.setUint16(2, Number(data.Offset), true);
  // 0x04: u8
  if (data?.Type !== undefined) view.setUint8(4, Number(data.Type));
  // 0x05: u8
  if (data?.Method !== undefined) view.setUint8(5, Number(data.Method));
  // 0x06: u8
  if (data?.Usage !== undefined) view.setUint8(6, Number(data.Usage));
  // 0x07: u8
  if (data?.UsageIndex !== undefined) view.setUint8(7, Number(data.UsageIndex));
  return buf;
}

export class D3DVERTEXELEMENT9View {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u16
  get Stream(): number {
    return this.view.getUint16(0, true);
  }

  // 0x02: u16
  get Offset(): number {
    return this.view.getUint16(2, true);
  }

  // 0x04: u8
  get Type(): number {
    return this.view.getUint8(4);
  }

  // 0x05: u8
  get Method(): number {
    return this.view.getUint8(5);
  }

  // 0x06: u8
  get Usage(): number {
    return this.view.getUint8(6);
  }

  // 0x07: u8
  get UsageIndex(): number {
    return this.view.getUint8(7);
  }

  // 0x00: u16
  set Stream(value: number) {
    this.view.setUint16(0, value, true);
  }

  // 0x02: u16
  set Offset(value: number) {
    this.view.setUint16(2, value, true);
  }

  // 0x04: u8
  set Type(value: number) {
    this.view.setUint8(4, value);
  }

  // 0x05: u8
  set Method(value: number) {
    this.view.setUint8(5, value);
  }

  // 0x06: u8
  set Usage(value: number) {
    this.view.setUint8(6, value);
  }

  // 0x07: u8
  set UsageIndex(value: number) {
    this.view.setUint8(7, value);
  }
}

/**
 * Windows.Win32.Graphics.Direct3D9.D3DDISPLAYMODE (size: 16)
 */
export interface D3DDISPLAYMODE {
  /** u32 */
  Width: number;
  /** u32 */
  Height: number;
  /** u32 */
  RefreshRate: number;
  /** Windows.Win32.Graphics.Direct3D9.D3DFORMAT */
  Format: D3DFORMAT;
}

export const sizeofD3DDISPLAYMODE = 16;

export function allocD3DDISPLAYMODE(data?: Partial<D3DDISPLAYMODE>): Uint8Array {
  const buf = new Uint8Array(sizeofD3DDISPLAYMODE);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.Width !== undefined) view.setUint32(0, Number(data.Width), true);
  // 0x04: u32
  if (data?.Height !== undefined) view.setUint32(4, Number(data.Height), true);
  // 0x08: u32
  if (data?.RefreshRate !== undefined) view.setUint32(8, Number(data.RefreshRate), true);
  // 0x0c: u32
  if (data?.Format !== undefined) view.setUint32(12, Number(data.Format), true);
  return buf;
}

export class D3DDISPLAYMODEView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get Width(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: u32
  get Height(): number {
    return this.view.getUint32(4, true);
  }

  // 0x08: u32
  get RefreshRate(): number {
    return this.view.getUint32(8, true);
  }

  // 0x0c: u32
  get Format(): number {
    return this.view.getUint32(12, true);
  }

  // 0x00: u32
  set Width(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: u32
  set Height(value: number) {
    this.view.setUint32(4, value, true);
  }

  // 0x08: u32
  set RefreshRate(value: number) {
    this.view.setUint32(8, value, true);
  }

  // 0x0c: u32
  set Format(value: number) {
    this.view.setUint32(12, value, true);
  }
}

export type HWND = number | bigint;

/**
 * Windows.Win32.Graphics.Direct3D9.D3DDEVICE_CREATION_PARAMETERS (size: 24)
 */
export interface D3DDEVICE_CREATION_PARAMETERS {
  /** u32 */
  AdapterOrdinal: number;
  /** Windows.Win32.Graphics.Direct3D9.D3DDEVTYPE */
  DeviceType: D3DDEVTYPE;
  /** Windows.Win32.Foundation.HWND */
  hFocusWindow: Deno.PointerValue | null;
  /** u32 */
  BehaviorFlags: number;
}

export const sizeofD3DDEVICE_CREATION_PARAMETERS = 24;

export function allocD3DDEVICE_CREATION_PARAMETERS(data?: Partial<D3DDEVICE_CREATION_PARAMETERS>): Uint8Array {
  const buf = new Uint8Array(sizeofD3DDEVICE_CREATION_PARAMETERS);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.AdapterOrdinal !== undefined) view.setUint32(0, Number(data.AdapterOrdinal), true);
  // 0x04: u32
  if (data?.DeviceType !== undefined) view.setUint32(4, Number(data.DeviceType), true);
  // 0x08: pointer
  if (data?.hFocusWindow !== undefined) view.setBigUint64(8, data.hFocusWindow === null ? 0n : util.toBigInt(util.toPointer(data.hFocusWindow)), true);
  // 0x10: u32
  if (data?.BehaviorFlags !== undefined) view.setUint32(16, Number(data.BehaviorFlags), true);
  // 0x14: pad4
  return buf;
}

export class D3DDEVICE_CREATION_PARAMETERSView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get AdapterOrdinal(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: u32
  get DeviceType(): number {
    return this.view.getUint32(4, true);
  }

  // 0x08: pointer
  get hFocusWindow(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(8, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x10: u32
  get BehaviorFlags(): number {
    return this.view.getUint32(16, true);
  }

  // 0x14: pad4

  // 0x00: u32
  set AdapterOrdinal(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: u32
  set DeviceType(value: number) {
    this.view.setUint32(4, value, true);
  }

  // 0x08: pointer
  set hFocusWindow(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(8, util.toBigInt(util.toPointer(value)), true);
  }

  // 0x10: u32
  set BehaviorFlags(value: number) {
    this.view.setUint32(16, value, true);
  }

  // 0x14: pad4
}

/**
 * Windows.Win32.Graphics.Direct3D9.D3DPRESENT_PARAMETERS (size: 64)
 */
export interface D3DPRESENT_PARAMETERS {
  /** u32 */
  BackBufferWidth: number;
  /** u32 */
  BackBufferHeight: number;
  /** Windows.Win32.Graphics.Direct3D9.D3DFORMAT */
  BackBufferFormat: D3DFORMAT;
  /** u32 */
  BackBufferCount: number;
  /** Windows.Win32.Graphics.Direct3D9.D3DMULTISAMPLE_TYPE */
  MultiSampleType: D3DMULTISAMPLE_TYPE;
  /** u32 */
  MultiSampleQuality: number;
  /** Windows.Win32.Graphics.Direct3D9.D3DSWAPEFFECT */
  SwapEffect: D3DSWAPEFFECT;
  /** Windows.Win32.Foundation.HWND */
  hDeviceWindow: Deno.PointerValue | null;
  /** Windows.Win32.Foundation.BOOL */
  Windowed: boolean;
  /** Windows.Win32.Foundation.BOOL */
  EnableAutoDepthStencil: boolean;
  /** Windows.Win32.Graphics.Direct3D9.D3DFORMAT */
  AutoDepthStencilFormat: D3DFORMAT;
  /** u32 */
  Flags: number;
  /** u32 */
  FullScreen_RefreshRateInHz: number;
  /** u32 */
  PresentationInterval: number;
}

export const sizeofD3DPRESENT_PARAMETERS = 64;

export function allocD3DPRESENT_PARAMETERS(data?: Partial<D3DPRESENT_PARAMETERS>): Uint8Array {
  const buf = new Uint8Array(sizeofD3DPRESENT_PARAMETERS);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.BackBufferWidth !== undefined) view.setUint32(0, Number(data.BackBufferWidth), true);
  // 0x04: u32
  if (data?.BackBufferHeight !== undefined) view.setUint32(4, Number(data.BackBufferHeight), true);
  // 0x08: u32
  if (data?.BackBufferFormat !== undefined) view.setUint32(8, Number(data.BackBufferFormat), true);
  // 0x0c: u32
  if (data?.BackBufferCount !== undefined) view.setUint32(12, Number(data.BackBufferCount), true);
  // 0x10: i32
  if (data?.MultiSampleType !== undefined) view.setInt32(16, Number(data.MultiSampleType), true);
  // 0x14: u32
  if (data?.MultiSampleQuality !== undefined) view.setUint32(20, Number(data.MultiSampleQuality), true);
  // 0x18: u32
  if (data?.SwapEffect !== undefined) view.setUint32(24, Number(data.SwapEffect), true);
  // 0x1c: pad4
  // 0x20: pointer
  if (data?.hDeviceWindow !== undefined) view.setBigUint64(32, data.hDeviceWindow === null ? 0n : util.toBigInt(util.toPointer(data.hDeviceWindow)), true);
  // 0x28: i32
  if (data?.Windowed !== undefined) view.setInt32(40, Number(data.Windowed), true);
  // 0x2c: i32
  if (data?.EnableAutoDepthStencil !== undefined) view.setInt32(44, Number(data.EnableAutoDepthStencil), true);
  // 0x30: u32
  if (data?.AutoDepthStencilFormat !== undefined) view.setUint32(48, Number(data.AutoDepthStencilFormat), true);
  // 0x34: u32
  if (data?.Flags !== undefined) view.setUint32(52, Number(data.Flags), true);
  // 0x38: u32
  if (data?.FullScreen_RefreshRateInHz !== undefined) view.setUint32(56, Number(data.FullScreen_RefreshRateInHz), true);
  // 0x3c: u32
  if (data?.PresentationInterval !== undefined) view.setUint32(60, Number(data.PresentationInterval), true);
  return buf;
}

export class D3DPRESENT_PARAMETERSView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get BackBufferWidth(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: u32
  get BackBufferHeight(): number {
    return this.view.getUint32(4, true);
  }

  // 0x08: u32
  get BackBufferFormat(): number {
    return this.view.getUint32(8, true);
  }

  // 0x0c: u32
  get BackBufferCount(): number {
    return this.view.getUint32(12, true);
  }

  // 0x10: i32
  get MultiSampleType(): number {
    return this.view.getInt32(16, true);
  }

  // 0x14: u32
  get MultiSampleQuality(): number {
    return this.view.getUint32(20, true);
  }

  // 0x18: u32
  get SwapEffect(): number {
    return this.view.getUint32(24, true);
  }

  // 0x1c: pad4

  // 0x20: pointer
  get hDeviceWindow(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(32, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x28: i32
  get Windowed(): number {
    return this.view.getInt32(40, true);
  }

  // 0x2c: i32
  get EnableAutoDepthStencil(): number {
    return this.view.getInt32(44, true);
  }

  // 0x30: u32
  get AutoDepthStencilFormat(): number {
    return this.view.getUint32(48, true);
  }

  // 0x34: u32
  get Flags(): number {
    return this.view.getUint32(52, true);
  }

  // 0x38: u32
  get FullScreen_RefreshRateInHz(): number {
    return this.view.getUint32(56, true);
  }

  // 0x3c: u32
  get PresentationInterval(): number {
    return this.view.getUint32(60, true);
  }

  // 0x00: u32
  set BackBufferWidth(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: u32
  set BackBufferHeight(value: number) {
    this.view.setUint32(4, value, true);
  }

  // 0x08: u32
  set BackBufferFormat(value: number) {
    this.view.setUint32(8, value, true);
  }

  // 0x0c: u32
  set BackBufferCount(value: number) {
    this.view.setUint32(12, value, true);
  }

  // 0x10: i32
  set MultiSampleType(value: number) {
    this.view.setInt32(16, value, true);
  }

  // 0x14: u32
  set MultiSampleQuality(value: number) {
    this.view.setUint32(20, value, true);
  }

  // 0x18: u32
  set SwapEffect(value: number) {
    this.view.setUint32(24, value, true);
  }

  // 0x1c: pad4

  // 0x20: pointer
  set hDeviceWindow(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(32, util.toBigInt(util.toPointer(value)), true);
  }

  // 0x28: i32
  set Windowed(value: number) {
    this.view.setInt32(40, value, true);
  }

  // 0x2c: i32
  set EnableAutoDepthStencil(value: number) {
    this.view.setInt32(44, value, true);
  }

  // 0x30: u32
  set AutoDepthStencilFormat(value: number) {
    this.view.setUint32(48, value, true);
  }

  // 0x34: u32
  set Flags(value: number) {
    this.view.setUint32(52, value, true);
  }

  // 0x38: u32
  set FullScreen_RefreshRateInHz(value: number) {
    this.view.setUint32(56, value, true);
  }

  // 0x3c: u32
  set PresentationInterval(value: number) {
    this.view.setUint32(60, value, true);
  }
}

/**
 * Windows.Win32.Graphics.Direct3D9.D3DGAMMARAMP (size: 24)
 */
export interface D3DGAMMARAMP {
  /** array */
  red: Deno.PointerValue | null;
  /** array */
  green: Deno.PointerValue | null;
  /** array */
  blue: Deno.PointerValue | null;
}

export const sizeofD3DGAMMARAMP = 24;

export function allocD3DGAMMARAMP(data?: Partial<D3DGAMMARAMP>): Uint8Array {
  const buf = new Uint8Array(sizeofD3DGAMMARAMP);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.red !== undefined) view.setBigUint64(0, data.red === null ? 0n : util.toBigInt(util.toPointer(data.red)), true);
  // 0x08: pointer
  if (data?.green !== undefined) view.setBigUint64(8, data.green === null ? 0n : util.toBigInt(util.toPointer(data.green)), true);
  // 0x10: pointer
  if (data?.blue !== undefined) view.setBigUint64(16, data.blue === null ? 0n : util.toBigInt(util.toPointer(data.blue)), true);
  return buf;
}

export class D3DGAMMARAMPView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get red(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(0, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x08: pointer
  get green(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(8, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x10: pointer
  get blue(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(16, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: pointer
  set red(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(0, util.toBigInt(util.toPointer(value)), true);
  }

  // 0x08: pointer
  set green(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(8, util.toBigInt(util.toPointer(value)), true);
  }

  // 0x10: pointer
  set blue(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(16, util.toBigInt(util.toPointer(value)), true);
  }
}

/**
 * Windows.Win32.Graphics.Direct3D9.D3DVERTEXBUFFER_DESC (size: 24)
 */
export interface D3DVERTEXBUFFER_DESC {
  /** Windows.Win32.Graphics.Direct3D9.D3DFORMAT */
  Format: D3DFORMAT;
  /** Windows.Win32.Graphics.Direct3D9.D3DRESOURCETYPE */
  Type: D3DRESOURCETYPE;
  /** u32 */
  Usage: number;
  /** Windows.Win32.Graphics.Direct3D9.D3DPOOL */
  Pool: D3DPOOL;
  /** u32 */
  Size: number;
  /** u32 */
  FVF: number;
}

export const sizeofD3DVERTEXBUFFER_DESC = 24;

export function allocD3DVERTEXBUFFER_DESC(data?: Partial<D3DVERTEXBUFFER_DESC>): Uint8Array {
  const buf = new Uint8Array(sizeofD3DVERTEXBUFFER_DESC);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.Format !== undefined) view.setUint32(0, Number(data.Format), true);
  // 0x04: i32
  if (data?.Type !== undefined) view.setInt32(4, Number(data.Type), true);
  // 0x08: u32
  if (data?.Usage !== undefined) view.setUint32(8, Number(data.Usage), true);
  // 0x0c: u32
  if (data?.Pool !== undefined) view.setUint32(12, Number(data.Pool), true);
  // 0x10: u32
  if (data?.Size !== undefined) view.setUint32(16, Number(data.Size), true);
  // 0x14: u32
  if (data?.FVF !== undefined) view.setUint32(20, Number(data.FVF), true);
  return buf;
}

export class D3DVERTEXBUFFER_DESCView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get Format(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: i32
  get Type(): number {
    return this.view.getInt32(4, true);
  }

  // 0x08: u32
  get Usage(): number {
    return this.view.getUint32(8, true);
  }

  // 0x0c: u32
  get Pool(): number {
    return this.view.getUint32(12, true);
  }

  // 0x10: u32
  get Size(): number {
    return this.view.getUint32(16, true);
  }

  // 0x14: u32
  get FVF(): number {
    return this.view.getUint32(20, true);
  }

  // 0x00: u32
  set Format(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: i32
  set Type(value: number) {
    this.view.setInt32(4, value, true);
  }

  // 0x08: u32
  set Usage(value: number) {
    this.view.setUint32(8, value, true);
  }

  // 0x0c: u32
  set Pool(value: number) {
    this.view.setUint32(12, value, true);
  }

  // 0x10: u32
  set Size(value: number) {
    this.view.setUint32(16, value, true);
  }

  // 0x14: u32
  set FVF(value: number) {
    this.view.setUint32(20, value, true);
  }
}

/**
 * Windows.Win32.Graphics.Direct3D9.D3DINDEXBUFFER_DESC (size: 24)
 */
export interface D3DINDEXBUFFER_DESC {
  /** Windows.Win32.Graphics.Direct3D9.D3DFORMAT */
  Format: D3DFORMAT;
  /** Windows.Win32.Graphics.Direct3D9.D3DRESOURCETYPE */
  Type: D3DRESOURCETYPE;
  /** u32 */
  Usage: number;
  /** Windows.Win32.Graphics.Direct3D9.D3DPOOL */
  Pool: D3DPOOL;
  /** u32 */
  Size: number;
}

export const sizeofD3DINDEXBUFFER_DESC = 24;

export function allocD3DINDEXBUFFER_DESC(data?: Partial<D3DINDEXBUFFER_DESC>): Uint8Array {
  const buf = new Uint8Array(sizeofD3DINDEXBUFFER_DESC);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.Format !== undefined) view.setUint32(0, Number(data.Format), true);
  // 0x04: i32
  if (data?.Type !== undefined) view.setInt32(4, Number(data.Type), true);
  // 0x08: u32
  if (data?.Usage !== undefined) view.setUint32(8, Number(data.Usage), true);
  // 0x0c: u32
  if (data?.Pool !== undefined) view.setUint32(12, Number(data.Pool), true);
  // 0x10: u32
  if (data?.Size !== undefined) view.setUint32(16, Number(data.Size), true);
  // 0x14: pad4
  return buf;
}

export class D3DINDEXBUFFER_DESCView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get Format(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: i32
  get Type(): number {
    return this.view.getInt32(4, true);
  }

  // 0x08: u32
  get Usage(): number {
    return this.view.getUint32(8, true);
  }

  // 0x0c: u32
  get Pool(): number {
    return this.view.getUint32(12, true);
  }

  // 0x10: u32
  get Size(): number {
    return this.view.getUint32(16, true);
  }

  // 0x14: pad4

  // 0x00: u32
  set Format(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: i32
  set Type(value: number) {
    this.view.setInt32(4, value, true);
  }

  // 0x08: u32
  set Usage(value: number) {
    this.view.setUint32(8, value, true);
  }

  // 0x0c: u32
  set Pool(value: number) {
    this.view.setUint32(12, value, true);
  }

  // 0x10: u32
  set Size(value: number) {
    this.view.setUint32(16, value, true);
  }

  // 0x14: pad4
}

/**
 * Windows.Win32.Graphics.Direct3D9.D3DSURFACE_DESC (size: 32)
 */
export interface D3DSURFACE_DESC {
  /** Windows.Win32.Graphics.Direct3D9.D3DFORMAT */
  Format: D3DFORMAT;
  /** Windows.Win32.Graphics.Direct3D9.D3DRESOURCETYPE */
  Type: D3DRESOURCETYPE;
  /** u32 */
  Usage: number;
  /** Windows.Win32.Graphics.Direct3D9.D3DPOOL */
  Pool: D3DPOOL;
  /** Windows.Win32.Graphics.Direct3D9.D3DMULTISAMPLE_TYPE */
  MultiSampleType: D3DMULTISAMPLE_TYPE;
  /** u32 */
  MultiSampleQuality: number;
  /** u32 */
  Width: number;
  /** u32 */
  Height: number;
}

export const sizeofD3DSURFACE_DESC = 32;

export function allocD3DSURFACE_DESC(data?: Partial<D3DSURFACE_DESC>): Uint8Array {
  const buf = new Uint8Array(sizeofD3DSURFACE_DESC);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.Format !== undefined) view.setUint32(0, Number(data.Format), true);
  // 0x04: i32
  if (data?.Type !== undefined) view.setInt32(4, Number(data.Type), true);
  // 0x08: u32
  if (data?.Usage !== undefined) view.setUint32(8, Number(data.Usage), true);
  // 0x0c: u32
  if (data?.Pool !== undefined) view.setUint32(12, Number(data.Pool), true);
  // 0x10: i32
  if (data?.MultiSampleType !== undefined) view.setInt32(16, Number(data.MultiSampleType), true);
  // 0x14: u32
  if (data?.MultiSampleQuality !== undefined) view.setUint32(20, Number(data.MultiSampleQuality), true);
  // 0x18: u32
  if (data?.Width !== undefined) view.setUint32(24, Number(data.Width), true);
  // 0x1c: u32
  if (data?.Height !== undefined) view.setUint32(28, Number(data.Height), true);
  return buf;
}

export class D3DSURFACE_DESCView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get Format(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: i32
  get Type(): number {
    return this.view.getInt32(4, true);
  }

  // 0x08: u32
  get Usage(): number {
    return this.view.getUint32(8, true);
  }

  // 0x0c: u32
  get Pool(): number {
    return this.view.getUint32(12, true);
  }

  // 0x10: i32
  get MultiSampleType(): number {
    return this.view.getInt32(16, true);
  }

  // 0x14: u32
  get MultiSampleQuality(): number {
    return this.view.getUint32(20, true);
  }

  // 0x18: u32
  get Width(): number {
    return this.view.getUint32(24, true);
  }

  // 0x1c: u32
  get Height(): number {
    return this.view.getUint32(28, true);
  }

  // 0x00: u32
  set Format(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: i32
  set Type(value: number) {
    this.view.setInt32(4, value, true);
  }

  // 0x08: u32
  set Usage(value: number) {
    this.view.setUint32(8, value, true);
  }

  // 0x0c: u32
  set Pool(value: number) {
    this.view.setUint32(12, value, true);
  }

  // 0x10: i32
  set MultiSampleType(value: number) {
    this.view.setInt32(16, value, true);
  }

  // 0x14: u32
  set MultiSampleQuality(value: number) {
    this.view.setUint32(20, value, true);
  }

  // 0x18: u32
  set Width(value: number) {
    this.view.setUint32(24, value, true);
  }

  // 0x1c: u32
  set Height(value: number) {
    this.view.setUint32(28, value, true);
  }
}

/**
 * Windows.Win32.Graphics.Direct3D9.D3DVOLUME_DESC (size: 32)
 */
export interface D3DVOLUME_DESC {
  /** Windows.Win32.Graphics.Direct3D9.D3DFORMAT */
  Format: D3DFORMAT;
  /** Windows.Win32.Graphics.Direct3D9.D3DRESOURCETYPE */
  Type: D3DRESOURCETYPE;
  /** u32 */
  Usage: number;
  /** Windows.Win32.Graphics.Direct3D9.D3DPOOL */
  Pool: D3DPOOL;
  /** u32 */
  Width: number;
  /** u32 */
  Height: number;
  /** u32 */
  Depth: number;
}

export const sizeofD3DVOLUME_DESC = 32;

export function allocD3DVOLUME_DESC(data?: Partial<D3DVOLUME_DESC>): Uint8Array {
  const buf = new Uint8Array(sizeofD3DVOLUME_DESC);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.Format !== undefined) view.setUint32(0, Number(data.Format), true);
  // 0x04: i32
  if (data?.Type !== undefined) view.setInt32(4, Number(data.Type), true);
  // 0x08: u32
  if (data?.Usage !== undefined) view.setUint32(8, Number(data.Usage), true);
  // 0x0c: u32
  if (data?.Pool !== undefined) view.setUint32(12, Number(data.Pool), true);
  // 0x10: u32
  if (data?.Width !== undefined) view.setUint32(16, Number(data.Width), true);
  // 0x14: u32
  if (data?.Height !== undefined) view.setUint32(20, Number(data.Height), true);
  // 0x18: u32
  if (data?.Depth !== undefined) view.setUint32(24, Number(data.Depth), true);
  // 0x1c: pad4
  return buf;
}

export class D3DVOLUME_DESCView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get Format(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: i32
  get Type(): number {
    return this.view.getInt32(4, true);
  }

  // 0x08: u32
  get Usage(): number {
    return this.view.getUint32(8, true);
  }

  // 0x0c: u32
  get Pool(): number {
    return this.view.getUint32(12, true);
  }

  // 0x10: u32
  get Width(): number {
    return this.view.getUint32(16, true);
  }

  // 0x14: u32
  get Height(): number {
    return this.view.getUint32(20, true);
  }

  // 0x18: u32
  get Depth(): number {
    return this.view.getUint32(24, true);
  }

  // 0x1c: pad4

  // 0x00: u32
  set Format(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: i32
  set Type(value: number) {
    this.view.setInt32(4, value, true);
  }

  // 0x08: u32
  set Usage(value: number) {
    this.view.setUint32(8, value, true);
  }

  // 0x0c: u32
  set Pool(value: number) {
    this.view.setUint32(12, value, true);
  }

  // 0x10: u32
  set Width(value: number) {
    this.view.setUint32(16, value, true);
  }

  // 0x14: u32
  set Height(value: number) {
    this.view.setUint32(20, value, true);
  }

  // 0x18: u32
  set Depth(value: number) {
    this.view.setUint32(24, value, true);
  }

  // 0x1c: pad4
}

/**
 * Windows.Win32.Graphics.Direct3D9.D3DLOCKED_RECT (size: 16)
 */
export interface D3DLOCKED_RECT {
  /** i32 */
  Pitch: number;
  /** ptr */
  pBits: Deno.PointerValue | Uint8Array | null;
}

export const sizeofD3DLOCKED_RECT = 16;

export function allocD3DLOCKED_RECT(data?: Partial<D3DLOCKED_RECT>): Uint8Array {
  const buf = new Uint8Array(sizeofD3DLOCKED_RECT);
  const view = new DataView(buf.buffer);
  // 0x00: i32
  if (data?.Pitch !== undefined) view.setInt32(0, Number(data.Pitch), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.pBits !== undefined) view.setBigUint64(8, data.pBits === null ? 0n : util.toBigInt(util.toPointer(data.pBits)), true);
  return buf;
}

export class D3DLOCKED_RECTView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: i32
  get Pitch(): number {
    return this.view.getInt32(0, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  get pBits(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(8, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: i32
  set Pitch(value: number) {
    this.view.setInt32(0, value, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  set pBits(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(8, util.toBigInt(util.toPointer(value)), true);
  }
}

/**
 * Windows.Win32.Graphics.Direct3D9.D3DBOX (size: 24)
 */
export interface D3DBOX {
  /** u32 */
  Left: number;
  /** u32 */
  Top: number;
  /** u32 */
  Right: number;
  /** u32 */
  Bottom: number;
  /** u32 */
  Front: number;
  /** u32 */
  Back: number;
}

export const sizeofD3DBOX = 24;

export function allocD3DBOX(data?: Partial<D3DBOX>): Uint8Array {
  const buf = new Uint8Array(sizeofD3DBOX);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.Left !== undefined) view.setUint32(0, Number(data.Left), true);
  // 0x04: u32
  if (data?.Top !== undefined) view.setUint32(4, Number(data.Top), true);
  // 0x08: u32
  if (data?.Right !== undefined) view.setUint32(8, Number(data.Right), true);
  // 0x0c: u32
  if (data?.Bottom !== undefined) view.setUint32(12, Number(data.Bottom), true);
  // 0x10: u32
  if (data?.Front !== undefined) view.setUint32(16, Number(data.Front), true);
  // 0x14: u32
  if (data?.Back !== undefined) view.setUint32(20, Number(data.Back), true);
  return buf;
}

export class D3DBOXView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get Left(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: u32
  get Top(): number {
    return this.view.getUint32(4, true);
  }

  // 0x08: u32
  get Right(): number {
    return this.view.getUint32(8, true);
  }

  // 0x0c: u32
  get Bottom(): number {
    return this.view.getUint32(12, true);
  }

  // 0x10: u32
  get Front(): number {
    return this.view.getUint32(16, true);
  }

  // 0x14: u32
  get Back(): number {
    return this.view.getUint32(20, true);
  }

  // 0x00: u32
  set Left(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: u32
  set Top(value: number) {
    this.view.setUint32(4, value, true);
  }

  // 0x08: u32
  set Right(value: number) {
    this.view.setUint32(8, value, true);
  }

  // 0x0c: u32
  set Bottom(value: number) {
    this.view.setUint32(12, value, true);
  }

  // 0x10: u32
  set Front(value: number) {
    this.view.setUint32(16, value, true);
  }

  // 0x14: u32
  set Back(value: number) {
    this.view.setUint32(20, value, true);
  }
}

/**
 * Windows.Win32.Graphics.Direct3D9.D3DLOCKED_BOX (size: 16)
 */
export interface D3DLOCKED_BOX {
  /** i32 */
  RowPitch: number;
  /** i32 */
  SlicePitch: number;
  /** ptr */
  pBits: Deno.PointerValue | Uint8Array | null;
}

export const sizeofD3DLOCKED_BOX = 16;

export function allocD3DLOCKED_BOX(data?: Partial<D3DLOCKED_BOX>): Uint8Array {
  const buf = new Uint8Array(sizeofD3DLOCKED_BOX);
  const view = new DataView(buf.buffer);
  // 0x00: i32
  if (data?.RowPitch !== undefined) view.setInt32(0, Number(data.RowPitch), true);
  // 0x04: i32
  if (data?.SlicePitch !== undefined) view.setInt32(4, Number(data.SlicePitch), true);
  // 0x08: pointer
  if (data?.pBits !== undefined) view.setBigUint64(8, data.pBits === null ? 0n : util.toBigInt(util.toPointer(data.pBits)), true);
  return buf;
}

export class D3DLOCKED_BOXView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: i32
  get RowPitch(): number {
    return this.view.getInt32(0, true);
  }

  // 0x04: i32
  get SlicePitch(): number {
    return this.view.getInt32(4, true);
  }

  // 0x08: pointer
  get pBits(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(8, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: i32
  set RowPitch(value: number) {
    this.view.setInt32(0, value, true);
  }

  // 0x04: i32
  set SlicePitch(value: number) {
    this.view.setInt32(4, value, true);
  }

  // 0x08: pointer
  set pBits(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(8, util.toBigInt(util.toPointer(value)), true);
  }
}

/**
 * Windows.Win32.Graphics.Direct3D9.D3DRANGE (size: 8)
 */
export interface D3DRANGE {
  /** u32 */
  Offset: number;
  /** u32 */
  Size: number;
}

export const sizeofD3DRANGE = 8;

export function allocD3DRANGE(data?: Partial<D3DRANGE>): Uint8Array {
  const buf = new Uint8Array(sizeofD3DRANGE);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.Offset !== undefined) view.setUint32(0, Number(data.Offset), true);
  // 0x04: u32
  if (data?.Size !== undefined) view.setUint32(4, Number(data.Size), true);
  return buf;
}

export class D3DRANGEView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get Offset(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: u32
  get Size(): number {
    return this.view.getUint32(4, true);
  }

  // 0x00: u32
  set Offset(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: u32
  set Size(value: number) {
    this.view.setUint32(4, value, true);
  }
}

/**
 * Windows.Win32.Graphics.Direct3D9.D3DRECTPATCH_INFO (size: 32)
 */
export interface D3DRECTPATCH_INFO {
  /** u32 */
  StartVertexOffsetWidth: number;
  /** u32 */
  StartVertexOffsetHeight: number;
  /** u32 */
  Width: number;
  /** u32 */
  Height: number;
  /** u32 */
  Stride: number;
  /** Windows.Win32.Graphics.Direct3D9.D3DBASISTYPE */
  Basis: D3DBASISTYPE;
  /** Windows.Win32.Graphics.Direct3D9.D3DDEGREETYPE */
  Degree: D3DDEGREETYPE;
}

export const sizeofD3DRECTPATCH_INFO = 32;

export function allocD3DRECTPATCH_INFO(data?: Partial<D3DRECTPATCH_INFO>): Uint8Array {
  const buf = new Uint8Array(sizeofD3DRECTPATCH_INFO);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.StartVertexOffsetWidth !== undefined) view.setUint32(0, Number(data.StartVertexOffsetWidth), true);
  // 0x04: u32
  if (data?.StartVertexOffsetHeight !== undefined) view.setUint32(4, Number(data.StartVertexOffsetHeight), true);
  // 0x08: u32
  if (data?.Width !== undefined) view.setUint32(8, Number(data.Width), true);
  // 0x0c: u32
  if (data?.Height !== undefined) view.setUint32(12, Number(data.Height), true);
  // 0x10: u32
  if (data?.Stride !== undefined) view.setUint32(16, Number(data.Stride), true);
  // 0x14: i32
  if (data?.Basis !== undefined) view.setInt32(20, Number(data.Basis), true);
  // 0x18: i32
  if (data?.Degree !== undefined) view.setInt32(24, Number(data.Degree), true);
  // 0x1c: pad4
  return buf;
}

export class D3DRECTPATCH_INFOView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get StartVertexOffsetWidth(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: u32
  get StartVertexOffsetHeight(): number {
    return this.view.getUint32(4, true);
  }

  // 0x08: u32
  get Width(): number {
    return this.view.getUint32(8, true);
  }

  // 0x0c: u32
  get Height(): number {
    return this.view.getUint32(12, true);
  }

  // 0x10: u32
  get Stride(): number {
    return this.view.getUint32(16, true);
  }

  // 0x14: i32
  get Basis(): number {
    return this.view.getInt32(20, true);
  }

  // 0x18: i32
  get Degree(): number {
    return this.view.getInt32(24, true);
  }

  // 0x1c: pad4

  // 0x00: u32
  set StartVertexOffsetWidth(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: u32
  set StartVertexOffsetHeight(value: number) {
    this.view.setUint32(4, value, true);
  }

  // 0x08: u32
  set Width(value: number) {
    this.view.setUint32(8, value, true);
  }

  // 0x0c: u32
  set Height(value: number) {
    this.view.setUint32(12, value, true);
  }

  // 0x10: u32
  set Stride(value: number) {
    this.view.setUint32(16, value, true);
  }

  // 0x14: i32
  set Basis(value: number) {
    this.view.setInt32(20, value, true);
  }

  // 0x18: i32
  set Degree(value: number) {
    this.view.setInt32(24, value, true);
  }

  // 0x1c: pad4
}

/**
 * Windows.Win32.Graphics.Direct3D9.D3DTRIPATCH_INFO (size: 16)
 */
export interface D3DTRIPATCH_INFO {
  /** u32 */
  StartVertexOffset: number;
  /** u32 */
  NumVertices: number;
  /** Windows.Win32.Graphics.Direct3D9.D3DBASISTYPE */
  Basis: D3DBASISTYPE;
  /** Windows.Win32.Graphics.Direct3D9.D3DDEGREETYPE */
  Degree: D3DDEGREETYPE;
}

export const sizeofD3DTRIPATCH_INFO = 16;

export function allocD3DTRIPATCH_INFO(data?: Partial<D3DTRIPATCH_INFO>): Uint8Array {
  const buf = new Uint8Array(sizeofD3DTRIPATCH_INFO);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.StartVertexOffset !== undefined) view.setUint32(0, Number(data.StartVertexOffset), true);
  // 0x04: u32
  if (data?.NumVertices !== undefined) view.setUint32(4, Number(data.NumVertices), true);
  // 0x08: i32
  if (data?.Basis !== undefined) view.setInt32(8, Number(data.Basis), true);
  // 0x0c: i32
  if (data?.Degree !== undefined) view.setInt32(12, Number(data.Degree), true);
  return buf;
}

export class D3DTRIPATCH_INFOView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get StartVertexOffset(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: u32
  get NumVertices(): number {
    return this.view.getUint32(4, true);
  }

  // 0x08: i32
  get Basis(): number {
    return this.view.getInt32(8, true);
  }

  // 0x0c: i32
  get Degree(): number {
    return this.view.getInt32(12, true);
  }

  // 0x00: u32
  set StartVertexOffset(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: u32
  set NumVertices(value: number) {
    this.view.setUint32(4, value, true);
  }

  // 0x08: i32
  set Basis(value: number) {
    this.view.setInt32(8, value, true);
  }

  // 0x0c: i32
  set Degree(value: number) {
    this.view.setInt32(12, value, true);
  }
}

/**
 * Windows.Win32.Graphics.Direct3D9.D3DRASTER_STATUS (size: 8)
 */
export interface D3DRASTER_STATUS {
  /** Windows.Win32.Foundation.BOOL */
  InVBlank: boolean;
  /** u32 */
  ScanLine: number;
}

export const sizeofD3DRASTER_STATUS = 8;

export function allocD3DRASTER_STATUS(data?: Partial<D3DRASTER_STATUS>): Uint8Array {
  const buf = new Uint8Array(sizeofD3DRASTER_STATUS);
  const view = new DataView(buf.buffer);
  // 0x00: i32
  if (data?.InVBlank !== undefined) view.setInt32(0, Number(data.InVBlank), true);
  // 0x04: u32
  if (data?.ScanLine !== undefined) view.setUint32(4, Number(data.ScanLine), true);
  return buf;
}

export class D3DRASTER_STATUSView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: i32
  get InVBlank(): number {
    return this.view.getInt32(0, true);
  }

  // 0x04: u32
  get ScanLine(): number {
    return this.view.getUint32(4, true);
  }

  // 0x00: i32
  set InVBlank(value: number) {
    this.view.setInt32(0, value, true);
  }

  // 0x04: u32
  set ScanLine(value: number) {
    this.view.setUint32(4, value, true);
  }
}

/**
 * Windows.Win32.Graphics.Direct3D9.D3DRESOURCESTATS (size: 48)
 */
export interface D3DRESOURCESTATS {
  /** Windows.Win32.Foundation.BOOL */
  bThrashing: boolean;
  /** u32 */
  ApproxBytesDownloaded: number;
  /** u32 */
  NumEvicts: number;
  /** u32 */
  NumVidCreates: number;
  /** u32 */
  LastPri: number;
  /** u32 */
  NumUsed: number;
  /** u32 */
  NumUsedInVidMem: number;
  /** u32 */
  WorkingSet: number;
  /** u32 */
  WorkingSetBytes: number;
  /** u32 */
  TotalManaged: number;
  /** u32 */
  TotalBytes: number;
}

export const sizeofD3DRESOURCESTATS = 48;

export function allocD3DRESOURCESTATS(data?: Partial<D3DRESOURCESTATS>): Uint8Array {
  const buf = new Uint8Array(sizeofD3DRESOURCESTATS);
  const view = new DataView(buf.buffer);
  // 0x00: i32
  if (data?.bThrashing !== undefined) view.setInt32(0, Number(data.bThrashing), true);
  // 0x04: u32
  if (data?.ApproxBytesDownloaded !== undefined) view.setUint32(4, Number(data.ApproxBytesDownloaded), true);
  // 0x08: u32
  if (data?.NumEvicts !== undefined) view.setUint32(8, Number(data.NumEvicts), true);
  // 0x0c: u32
  if (data?.NumVidCreates !== undefined) view.setUint32(12, Number(data.NumVidCreates), true);
  // 0x10: u32
  if (data?.LastPri !== undefined) view.setUint32(16, Number(data.LastPri), true);
  // 0x14: u32
  if (data?.NumUsed !== undefined) view.setUint32(20, Number(data.NumUsed), true);
  // 0x18: u32
  if (data?.NumUsedInVidMem !== undefined) view.setUint32(24, Number(data.NumUsedInVidMem), true);
  // 0x1c: u32
  if (data?.WorkingSet !== undefined) view.setUint32(28, Number(data.WorkingSet), true);
  // 0x20: u32
  if (data?.WorkingSetBytes !== undefined) view.setUint32(32, Number(data.WorkingSetBytes), true);
  // 0x24: u32
  if (data?.TotalManaged !== undefined) view.setUint32(36, Number(data.TotalManaged), true);
  // 0x28: u32
  if (data?.TotalBytes !== undefined) view.setUint32(40, Number(data.TotalBytes), true);
  // 0x2c: pad4
  return buf;
}

export class D3DRESOURCESTATSView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: i32
  get bThrashing(): number {
    return this.view.getInt32(0, true);
  }

  // 0x04: u32
  get ApproxBytesDownloaded(): number {
    return this.view.getUint32(4, true);
  }

  // 0x08: u32
  get NumEvicts(): number {
    return this.view.getUint32(8, true);
  }

  // 0x0c: u32
  get NumVidCreates(): number {
    return this.view.getUint32(12, true);
  }

  // 0x10: u32
  get LastPri(): number {
    return this.view.getUint32(16, true);
  }

  // 0x14: u32
  get NumUsed(): number {
    return this.view.getUint32(20, true);
  }

  // 0x18: u32
  get NumUsedInVidMem(): number {
    return this.view.getUint32(24, true);
  }

  // 0x1c: u32
  get WorkingSet(): number {
    return this.view.getUint32(28, true);
  }

  // 0x20: u32
  get WorkingSetBytes(): number {
    return this.view.getUint32(32, true);
  }

  // 0x24: u32
  get TotalManaged(): number {
    return this.view.getUint32(36, true);
  }

  // 0x28: u32
  get TotalBytes(): number {
    return this.view.getUint32(40, true);
  }

  // 0x2c: pad4

  // 0x00: i32
  set bThrashing(value: number) {
    this.view.setInt32(0, value, true);
  }

  // 0x04: u32
  set ApproxBytesDownloaded(value: number) {
    this.view.setUint32(4, value, true);
  }

  // 0x08: u32
  set NumEvicts(value: number) {
    this.view.setUint32(8, value, true);
  }

  // 0x0c: u32
  set NumVidCreates(value: number) {
    this.view.setUint32(12, value, true);
  }

  // 0x10: u32
  set LastPri(value: number) {
    this.view.setUint32(16, value, true);
  }

  // 0x14: u32
  set NumUsed(value: number) {
    this.view.setUint32(20, value, true);
  }

  // 0x18: u32
  set NumUsedInVidMem(value: number) {
    this.view.setUint32(24, value, true);
  }

  // 0x1c: u32
  set WorkingSet(value: number) {
    this.view.setUint32(28, value, true);
  }

  // 0x20: u32
  set WorkingSetBytes(value: number) {
    this.view.setUint32(32, value, true);
  }

  // 0x24: u32
  set TotalManaged(value: number) {
    this.view.setUint32(36, value, true);
  }

  // 0x28: u32
  set TotalBytes(value: number) {
    this.view.setUint32(40, value, true);
  }

  // 0x2c: pad4
}

/**
 * Windows.Win32.Graphics.Direct3D9.D3DDEVINFO_RESOURCEMANAGER (size: 8)
 */
export interface D3DDEVINFO_RESOURCEMANAGER {
  /** array */
  stats: Deno.PointerValue | null;
}

export const sizeofD3DDEVINFO_RESOURCEMANAGER = 8;

export function allocD3DDEVINFO_RESOURCEMANAGER(data?: Partial<D3DDEVINFO_RESOURCEMANAGER>): Uint8Array {
  const buf = new Uint8Array(sizeofD3DDEVINFO_RESOURCEMANAGER);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.stats !== undefined) view.setBigUint64(0, data.stats === null ? 0n : util.toBigInt(util.toPointer(data.stats)), true);
  return buf;
}

export class D3DDEVINFO_RESOURCEMANAGERView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get stats(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(0, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: pointer
  set stats(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(0, util.toBigInt(util.toPointer(value)), true);
  }
}

/**
 * Windows.Win32.Graphics.Direct3D9.D3DDEVINFO_D3DVERTEXSTATS (size: 8)
 */
export interface D3DDEVINFO_D3DVERTEXSTATS {
  /** u32 */
  NumRenderedTriangles: number;
  /** u32 */
  NumExtraClippingTriangles: number;
}

export const sizeofD3DDEVINFO_D3DVERTEXSTATS = 8;

export function allocD3DDEVINFO_D3DVERTEXSTATS(data?: Partial<D3DDEVINFO_D3DVERTEXSTATS>): Uint8Array {
  const buf = new Uint8Array(sizeofD3DDEVINFO_D3DVERTEXSTATS);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.NumRenderedTriangles !== undefined) view.setUint32(0, Number(data.NumRenderedTriangles), true);
  // 0x04: u32
  if (data?.NumExtraClippingTriangles !== undefined) view.setUint32(4, Number(data.NumExtraClippingTriangles), true);
  return buf;
}

export class D3DDEVINFO_D3DVERTEXSTATSView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get NumRenderedTriangles(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: u32
  get NumExtraClippingTriangles(): number {
    return this.view.getUint32(4, true);
  }

  // 0x00: u32
  set NumRenderedTriangles(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: u32
  set NumExtraClippingTriangles(value: number) {
    this.view.setUint32(4, value, true);
  }
}

/**
 * Windows.Win32.Graphics.Direct3D9.D3DDEVINFO_VCACHE (size: 16)
 */
export interface D3DDEVINFO_VCACHE {
  /** u32 */
  Pattern: number;
  /** u32 */
  OptMethod: number;
  /** u32 */
  CacheSize: number;
  /** u32 */
  MagicNumber: number;
}

export const sizeofD3DDEVINFO_VCACHE = 16;

export function allocD3DDEVINFO_VCACHE(data?: Partial<D3DDEVINFO_VCACHE>): Uint8Array {
  const buf = new Uint8Array(sizeofD3DDEVINFO_VCACHE);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.Pattern !== undefined) view.setUint32(0, Number(data.Pattern), true);
  // 0x04: u32
  if (data?.OptMethod !== undefined) view.setUint32(4, Number(data.OptMethod), true);
  // 0x08: u32
  if (data?.CacheSize !== undefined) view.setUint32(8, Number(data.CacheSize), true);
  // 0x0c: u32
  if (data?.MagicNumber !== undefined) view.setUint32(12, Number(data.MagicNumber), true);
  return buf;
}

export class D3DDEVINFO_VCACHEView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get Pattern(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: u32
  get OptMethod(): number {
    return this.view.getUint32(4, true);
  }

  // 0x08: u32
  get CacheSize(): number {
    return this.view.getUint32(8, true);
  }

  // 0x0c: u32
  get MagicNumber(): number {
    return this.view.getUint32(12, true);
  }

  // 0x00: u32
  set Pattern(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: u32
  set OptMethod(value: number) {
    this.view.setUint32(4, value, true);
  }

  // 0x08: u32
  set CacheSize(value: number) {
    this.view.setUint32(8, value, true);
  }

  // 0x0c: u32
  set MagicNumber(value: number) {
    this.view.setUint32(12, value, true);
  }
}

/**
 * Windows.Win32.Graphics.Direct3D9.D3DDEVINFO_D3D9PIPELINETIMINGS (size: 16)
 */
export interface D3DDEVINFO_D3D9PIPELINETIMINGS {
  /** f32 */
  VertexProcessingTimePercent: number;
  /** f32 */
  PixelProcessingTimePercent: number;
  /** f32 */
  OtherGPUProcessingTimePercent: number;
  /** f32 */
  GPUIdleTimePercent: number;
}

export const sizeofD3DDEVINFO_D3D9PIPELINETIMINGS = 16;

export function allocD3DDEVINFO_D3D9PIPELINETIMINGS(data?: Partial<D3DDEVINFO_D3D9PIPELINETIMINGS>): Uint8Array {
  const buf = new Uint8Array(sizeofD3DDEVINFO_D3D9PIPELINETIMINGS);
  const view = new DataView(buf.buffer);
  // 0x00: f32
  if (data?.VertexProcessingTimePercent !== undefined) view.setFloat32(0, Number(data.VertexProcessingTimePercent), true);
  // 0x04: f32
  if (data?.PixelProcessingTimePercent !== undefined) view.setFloat32(4, Number(data.PixelProcessingTimePercent), true);
  // 0x08: f32
  if (data?.OtherGPUProcessingTimePercent !== undefined) view.setFloat32(8, Number(data.OtherGPUProcessingTimePercent), true);
  // 0x0c: f32
  if (data?.GPUIdleTimePercent !== undefined) view.setFloat32(12, Number(data.GPUIdleTimePercent), true);
  return buf;
}

export class D3DDEVINFO_D3D9PIPELINETIMINGSView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: f32
  get VertexProcessingTimePercent(): number {
    return this.view.getFloat32(0, true);
  }

  // 0x04: f32
  get PixelProcessingTimePercent(): number {
    return this.view.getFloat32(4, true);
  }

  // 0x08: f32
  get OtherGPUProcessingTimePercent(): number {
    return this.view.getFloat32(8, true);
  }

  // 0x0c: f32
  get GPUIdleTimePercent(): number {
    return this.view.getFloat32(12, true);
  }

  // 0x00: f32
  set VertexProcessingTimePercent(value: number) {
    this.view.setFloat32(0, value, true);
  }

  // 0x04: f32
  set PixelProcessingTimePercent(value: number) {
    this.view.setFloat32(4, value, true);
  }

  // 0x08: f32
  set OtherGPUProcessingTimePercent(value: number) {
    this.view.setFloat32(8, value, true);
  }

  // 0x0c: f32
  set GPUIdleTimePercent(value: number) {
    this.view.setFloat32(12, value, true);
  }
}

/**
 * Windows.Win32.Graphics.Direct3D9.D3DDEVINFO_D3D9INTERFACETIMINGS (size: 24)
 */
export interface D3DDEVINFO_D3D9INTERFACETIMINGS {
  /** f32 */
  WaitingForGPUToUseApplicationResourceTimePercent: number;
  /** f32 */
  WaitingForGPUToAcceptMoreCommandsTimePercent: number;
  /** f32 */
  WaitingForGPUToStayWithinLatencyTimePercent: number;
  /** f32 */
  WaitingForGPUExclusiveResourceTimePercent: number;
  /** f32 */
  WaitingForGPUOtherTimePercent: number;
}

export const sizeofD3DDEVINFO_D3D9INTERFACETIMINGS = 24;

export function allocD3DDEVINFO_D3D9INTERFACETIMINGS(data?: Partial<D3DDEVINFO_D3D9INTERFACETIMINGS>): Uint8Array {
  const buf = new Uint8Array(sizeofD3DDEVINFO_D3D9INTERFACETIMINGS);
  const view = new DataView(buf.buffer);
  // 0x00: f32
  if (data?.WaitingForGPUToUseApplicationResourceTimePercent !== undefined) view.setFloat32(0, Number(data.WaitingForGPUToUseApplicationResourceTimePercent), true);
  // 0x04: f32
  if (data?.WaitingForGPUToAcceptMoreCommandsTimePercent !== undefined) view.setFloat32(4, Number(data.WaitingForGPUToAcceptMoreCommandsTimePercent), true);
  // 0x08: f32
  if (data?.WaitingForGPUToStayWithinLatencyTimePercent !== undefined) view.setFloat32(8, Number(data.WaitingForGPUToStayWithinLatencyTimePercent), true);
  // 0x0c: f32
  if (data?.WaitingForGPUExclusiveResourceTimePercent !== undefined) view.setFloat32(12, Number(data.WaitingForGPUExclusiveResourceTimePercent), true);
  // 0x10: f32
  if (data?.WaitingForGPUOtherTimePercent !== undefined) view.setFloat32(16, Number(data.WaitingForGPUOtherTimePercent), true);
  // 0x14: pad4
  return buf;
}

export class D3DDEVINFO_D3D9INTERFACETIMINGSView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: f32
  get WaitingForGPUToUseApplicationResourceTimePercent(): number {
    return this.view.getFloat32(0, true);
  }

  // 0x04: f32
  get WaitingForGPUToAcceptMoreCommandsTimePercent(): number {
    return this.view.getFloat32(4, true);
  }

  // 0x08: f32
  get WaitingForGPUToStayWithinLatencyTimePercent(): number {
    return this.view.getFloat32(8, true);
  }

  // 0x0c: f32
  get WaitingForGPUExclusiveResourceTimePercent(): number {
    return this.view.getFloat32(12, true);
  }

  // 0x10: f32
  get WaitingForGPUOtherTimePercent(): number {
    return this.view.getFloat32(16, true);
  }

  // 0x14: pad4

  // 0x00: f32
  set WaitingForGPUToUseApplicationResourceTimePercent(value: number) {
    this.view.setFloat32(0, value, true);
  }

  // 0x04: f32
  set WaitingForGPUToAcceptMoreCommandsTimePercent(value: number) {
    this.view.setFloat32(4, value, true);
  }

  // 0x08: f32
  set WaitingForGPUToStayWithinLatencyTimePercent(value: number) {
    this.view.setFloat32(8, value, true);
  }

  // 0x0c: f32
  set WaitingForGPUExclusiveResourceTimePercent(value: number) {
    this.view.setFloat32(12, value, true);
  }

  // 0x10: f32
  set WaitingForGPUOtherTimePercent(value: number) {
    this.view.setFloat32(16, value, true);
  }

  // 0x14: pad4
}

/**
 * Windows.Win32.Graphics.Direct3D9.D3DDEVINFO_D3D9STAGETIMINGS (size: 8)
 */
export interface D3DDEVINFO_D3D9STAGETIMINGS {
  /** f32 */
  MemoryProcessingPercent: number;
  /** f32 */
  ComputationProcessingPercent: number;
}

export const sizeofD3DDEVINFO_D3D9STAGETIMINGS = 8;

export function allocD3DDEVINFO_D3D9STAGETIMINGS(data?: Partial<D3DDEVINFO_D3D9STAGETIMINGS>): Uint8Array {
  const buf = new Uint8Array(sizeofD3DDEVINFO_D3D9STAGETIMINGS);
  const view = new DataView(buf.buffer);
  // 0x00: f32
  if (data?.MemoryProcessingPercent !== undefined) view.setFloat32(0, Number(data.MemoryProcessingPercent), true);
  // 0x04: f32
  if (data?.ComputationProcessingPercent !== undefined) view.setFloat32(4, Number(data.ComputationProcessingPercent), true);
  return buf;
}

export class D3DDEVINFO_D3D9STAGETIMINGSView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: f32
  get MemoryProcessingPercent(): number {
    return this.view.getFloat32(0, true);
  }

  // 0x04: f32
  get ComputationProcessingPercent(): number {
    return this.view.getFloat32(4, true);
  }

  // 0x00: f32
  set MemoryProcessingPercent(value: number) {
    this.view.setFloat32(0, value, true);
  }

  // 0x04: f32
  set ComputationProcessingPercent(value: number) {
    this.view.setFloat32(4, value, true);
  }
}

/**
 * Windows.Win32.Graphics.Direct3D9.D3DDEVINFO_D3D9BANDWIDTHTIMINGS (size: 24)
 */
export interface D3DDEVINFO_D3D9BANDWIDTHTIMINGS {
  /** f32 */
  MaxBandwidthUtilized: number;
  /** f32 */
  FrontEndUploadMemoryUtilizedPercent: number;
  /** f32 */
  VertexRateUtilizedPercent: number;
  /** f32 */
  TriangleSetupRateUtilizedPercent: number;
  /** f32 */
  FillRateUtilizedPercent: number;
}

export const sizeofD3DDEVINFO_D3D9BANDWIDTHTIMINGS = 24;

export function allocD3DDEVINFO_D3D9BANDWIDTHTIMINGS(data?: Partial<D3DDEVINFO_D3D9BANDWIDTHTIMINGS>): Uint8Array {
  const buf = new Uint8Array(sizeofD3DDEVINFO_D3D9BANDWIDTHTIMINGS);
  const view = new DataView(buf.buffer);
  // 0x00: f32
  if (data?.MaxBandwidthUtilized !== undefined) view.setFloat32(0, Number(data.MaxBandwidthUtilized), true);
  // 0x04: f32
  if (data?.FrontEndUploadMemoryUtilizedPercent !== undefined) view.setFloat32(4, Number(data.FrontEndUploadMemoryUtilizedPercent), true);
  // 0x08: f32
  if (data?.VertexRateUtilizedPercent !== undefined) view.setFloat32(8, Number(data.VertexRateUtilizedPercent), true);
  // 0x0c: f32
  if (data?.TriangleSetupRateUtilizedPercent !== undefined) view.setFloat32(12, Number(data.TriangleSetupRateUtilizedPercent), true);
  // 0x10: f32
  if (data?.FillRateUtilizedPercent !== undefined) view.setFloat32(16, Number(data.FillRateUtilizedPercent), true);
  // 0x14: pad4
  return buf;
}

export class D3DDEVINFO_D3D9BANDWIDTHTIMINGSView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: f32
  get MaxBandwidthUtilized(): number {
    return this.view.getFloat32(0, true);
  }

  // 0x04: f32
  get FrontEndUploadMemoryUtilizedPercent(): number {
    return this.view.getFloat32(4, true);
  }

  // 0x08: f32
  get VertexRateUtilizedPercent(): number {
    return this.view.getFloat32(8, true);
  }

  // 0x0c: f32
  get TriangleSetupRateUtilizedPercent(): number {
    return this.view.getFloat32(12, true);
  }

  // 0x10: f32
  get FillRateUtilizedPercent(): number {
    return this.view.getFloat32(16, true);
  }

  // 0x14: pad4

  // 0x00: f32
  set MaxBandwidthUtilized(value: number) {
    this.view.setFloat32(0, value, true);
  }

  // 0x04: f32
  set FrontEndUploadMemoryUtilizedPercent(value: number) {
    this.view.setFloat32(4, value, true);
  }

  // 0x08: f32
  set VertexRateUtilizedPercent(value: number) {
    this.view.setFloat32(8, value, true);
  }

  // 0x0c: f32
  set TriangleSetupRateUtilizedPercent(value: number) {
    this.view.setFloat32(12, value, true);
  }

  // 0x10: f32
  set FillRateUtilizedPercent(value: number) {
    this.view.setFloat32(16, value, true);
  }

  // 0x14: pad4
}

/**
 * Windows.Win32.Graphics.Direct3D9.D3DDEVINFO_D3D9CACHEUTILIZATION (size: 8)
 */
export interface D3DDEVINFO_D3D9CACHEUTILIZATION {
  /** f32 */
  TextureCacheHitRate: number;
  /** f32 */
  PostTransformVertexCacheHitRate: number;
}

export const sizeofD3DDEVINFO_D3D9CACHEUTILIZATION = 8;

export function allocD3DDEVINFO_D3D9CACHEUTILIZATION(data?: Partial<D3DDEVINFO_D3D9CACHEUTILIZATION>): Uint8Array {
  const buf = new Uint8Array(sizeofD3DDEVINFO_D3D9CACHEUTILIZATION);
  const view = new DataView(buf.buffer);
  // 0x00: f32
  if (data?.TextureCacheHitRate !== undefined) view.setFloat32(0, Number(data.TextureCacheHitRate), true);
  // 0x04: f32
  if (data?.PostTransformVertexCacheHitRate !== undefined) view.setFloat32(4, Number(data.PostTransformVertexCacheHitRate), true);
  return buf;
}

export class D3DDEVINFO_D3D9CACHEUTILIZATIONView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: f32
  get TextureCacheHitRate(): number {
    return this.view.getFloat32(0, true);
  }

  // 0x04: f32
  get PostTransformVertexCacheHitRate(): number {
    return this.view.getFloat32(4, true);
  }

  // 0x00: f32
  set TextureCacheHitRate(value: number) {
    this.view.setFloat32(0, value, true);
  }

  // 0x04: f32
  set PostTransformVertexCacheHitRate(value: number) {
    this.view.setFloat32(4, value, true);
  }
}

/**
 * Windows.Win32.Graphics.Direct3D9.D3DCOMPOSERECTDESC (size: 8)
 */
export interface D3DCOMPOSERECTDESC {
  /** u16 */
  X: number;
  /** u16 */
  Y: number;
  /** u16 */
  Width: number;
  /** u16 */
  Height: number;
}

export const sizeofD3DCOMPOSERECTDESC = 8;

export function allocD3DCOMPOSERECTDESC(data?: Partial<D3DCOMPOSERECTDESC>): Uint8Array {
  const buf = new Uint8Array(sizeofD3DCOMPOSERECTDESC);
  const view = new DataView(buf.buffer);
  // 0x00: u16
  if (data?.X !== undefined) view.setUint16(0, Number(data.X), true);
  // 0x02: u16
  if (data?.Y !== undefined) view.setUint16(2, Number(data.Y), true);
  // 0x04: u16
  if (data?.Width !== undefined) view.setUint16(4, Number(data.Width), true);
  // 0x06: u16
  if (data?.Height !== undefined) view.setUint16(6, Number(data.Height), true);
  return buf;
}

export class D3DCOMPOSERECTDESCView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u16
  get X(): number {
    return this.view.getUint16(0, true);
  }

  // 0x02: u16
  get Y(): number {
    return this.view.getUint16(2, true);
  }

  // 0x04: u16
  get Width(): number {
    return this.view.getUint16(4, true);
  }

  // 0x06: u16
  get Height(): number {
    return this.view.getUint16(6, true);
  }

  // 0x00: u16
  set X(value: number) {
    this.view.setUint16(0, value, true);
  }

  // 0x02: u16
  set Y(value: number) {
    this.view.setUint16(2, value, true);
  }

  // 0x04: u16
  set Width(value: number) {
    this.view.setUint16(4, value, true);
  }

  // 0x06: u16
  set Height(value: number) {
    this.view.setUint16(6, value, true);
  }
}

/**
 * Windows.Win32.Graphics.Direct3D9.D3DCOMPOSERECTDESTINATION (size: 8)
 */
export interface D3DCOMPOSERECTDESTINATION {
  /** u16 */
  SrcRectIndex: number;
  /** u16 */
  Reserved: number;
  /** i16 */
  X: number;
  /** i16 */
  Y: number;
}

export const sizeofD3DCOMPOSERECTDESTINATION = 8;

export function allocD3DCOMPOSERECTDESTINATION(data?: Partial<D3DCOMPOSERECTDESTINATION>): Uint8Array {
  const buf = new Uint8Array(sizeofD3DCOMPOSERECTDESTINATION);
  const view = new DataView(buf.buffer);
  // 0x00: u16
  if (data?.SrcRectIndex !== undefined) view.setUint16(0, Number(data.SrcRectIndex), true);
  // 0x02: u16
  if (data?.Reserved !== undefined) view.setUint16(2, Number(data.Reserved), true);
  // 0x04: i16
  if (data?.X !== undefined) view.setInt16(4, Number(data.X), true);
  // 0x06: i16
  if (data?.Y !== undefined) view.setInt16(6, Number(data.Y), true);
  return buf;
}

export class D3DCOMPOSERECTDESTINATIONView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u16
  get SrcRectIndex(): number {
    return this.view.getUint16(0, true);
  }

  // 0x02: u16
  get Reserved(): number {
    return this.view.getUint16(2, true);
  }

  // 0x04: i16
  get X(): number {
    return this.view.getInt16(4, true);
  }

  // 0x06: i16
  get Y(): number {
    return this.view.getInt16(6, true);
  }

  // 0x00: u16
  set SrcRectIndex(value: number) {
    this.view.setUint16(0, value, true);
  }

  // 0x02: u16
  set Reserved(value: number) {
    this.view.setUint16(2, value, true);
  }

  // 0x04: i16
  set X(value: number) {
    this.view.setInt16(4, value, true);
  }

  // 0x06: i16
  set Y(value: number) {
    this.view.setInt16(6, value, true);
  }
}

/**
 * Windows.Win32.Graphics.Direct3D9.D3DDISPLAYMODEEX (size: 24)
 */
export interface D3DDISPLAYMODEEX {
  /** u32 */
  Size: number;
  /** u32 */
  Width: number;
  /** u32 */
  Height: number;
  /** u32 */
  RefreshRate: number;
  /** Windows.Win32.Graphics.Direct3D9.D3DFORMAT */
  Format: D3DFORMAT;
  /** Windows.Win32.Graphics.Direct3D9.D3DSCANLINEORDERING */
  ScanLineOrdering: D3DSCANLINEORDERING;
}

export const sizeofD3DDISPLAYMODEEX = 24;

export function allocD3DDISPLAYMODEEX(data?: Partial<D3DDISPLAYMODEEX>): Uint8Array {
  const buf = new Uint8Array(sizeofD3DDISPLAYMODEEX);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.Size !== undefined) view.setUint32(0, Number(data.Size), true);
  // 0x04: u32
  if (data?.Width !== undefined) view.setUint32(4, Number(data.Width), true);
  // 0x08: u32
  if (data?.Height !== undefined) view.setUint32(8, Number(data.Height), true);
  // 0x0c: u32
  if (data?.RefreshRate !== undefined) view.setUint32(12, Number(data.RefreshRate), true);
  // 0x10: u32
  if (data?.Format !== undefined) view.setUint32(16, Number(data.Format), true);
  // 0x14: i32
  if (data?.ScanLineOrdering !== undefined) view.setInt32(20, Number(data.ScanLineOrdering), true);
  return buf;
}

export class D3DDISPLAYMODEEXView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get Size(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: u32
  get Width(): number {
    return this.view.getUint32(4, true);
  }

  // 0x08: u32
  get Height(): number {
    return this.view.getUint32(8, true);
  }

  // 0x0c: u32
  get RefreshRate(): number {
    return this.view.getUint32(12, true);
  }

  // 0x10: u32
  get Format(): number {
    return this.view.getUint32(16, true);
  }

  // 0x14: i32
  get ScanLineOrdering(): number {
    return this.view.getInt32(20, true);
  }

  // 0x00: u32
  set Size(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: u32
  set Width(value: number) {
    this.view.setUint32(4, value, true);
  }

  // 0x08: u32
  set Height(value: number) {
    this.view.setUint32(8, value, true);
  }

  // 0x0c: u32
  set RefreshRate(value: number) {
    this.view.setUint32(12, value, true);
  }

  // 0x10: u32
  set Format(value: number) {
    this.view.setUint32(16, value, true);
  }

  // 0x14: i32
  set ScanLineOrdering(value: number) {
    this.view.setInt32(20, value, true);
  }
}

/**
 * Windows.Win32.Graphics.Direct3D9.D3DDISPLAYMODEFILTER (size: 16)
 */
export interface D3DDISPLAYMODEFILTER {
  /** u32 */
  Size: number;
  /** Windows.Win32.Graphics.Direct3D9.D3DFORMAT */
  Format: D3DFORMAT;
  /** Windows.Win32.Graphics.Direct3D9.D3DSCANLINEORDERING */
  ScanLineOrdering: D3DSCANLINEORDERING;
}

export const sizeofD3DDISPLAYMODEFILTER = 16;

export function allocD3DDISPLAYMODEFILTER(data?: Partial<D3DDISPLAYMODEFILTER>): Uint8Array {
  const buf = new Uint8Array(sizeofD3DDISPLAYMODEFILTER);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.Size !== undefined) view.setUint32(0, Number(data.Size), true);
  // 0x04: u32
  if (data?.Format !== undefined) view.setUint32(4, Number(data.Format), true);
  // 0x08: i32
  if (data?.ScanLineOrdering !== undefined) view.setInt32(8, Number(data.ScanLineOrdering), true);
  // 0x0c: pad4
  return buf;
}

export class D3DDISPLAYMODEFILTERView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get Size(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: u32
  get Format(): number {
    return this.view.getUint32(4, true);
  }

  // 0x08: i32
  get ScanLineOrdering(): number {
    return this.view.getInt32(8, true);
  }

  // 0x0c: pad4

  // 0x00: u32
  set Size(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: u32
  set Format(value: number) {
    this.view.setUint32(4, value, true);
  }

  // 0x08: i32
  set ScanLineOrdering(value: number) {
    this.view.setInt32(8, value, true);
  }

  // 0x0c: pad4
}

/**
 * Windows.Win32.Graphics.Direct3D9.D3DAUTHENTICATEDCHANNEL_QUERY_INPUT (size: 24)
 */
export interface D3DAUTHENTICATEDCHANNEL_QUERY_INPUT {
  /** System.Guid */
  QueryType: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Foundation.HANDLE */
  hChannel: Uint8Array | Deno.PointerValue | null;
  /** u32 */
  SequenceNumber: number;
}

export const sizeofD3DAUTHENTICATEDCHANNEL_QUERY_INPUT = 24;

export function allocD3DAUTHENTICATEDCHANNEL_QUERY_INPUT(data?: Partial<D3DAUTHENTICATEDCHANNEL_QUERY_INPUT>): Uint8Array {
  const buf = new Uint8Array(sizeofD3DAUTHENTICATEDCHANNEL_QUERY_INPUT);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.QueryType !== undefined) view.setBigUint64(0, data.QueryType === null ? 0n : util.toBigInt(util.toPointer(data.QueryType)), true);
  // 0x08: pointer
  if (data?.hChannel !== undefined) view.setBigUint64(8, data.hChannel === null ? 0n : util.toBigInt(util.toPointer(data.hChannel)), true);
  // 0x10: u32
  if (data?.SequenceNumber !== undefined) view.setUint32(16, Number(data.SequenceNumber), true);
  // 0x14: pad4
  return buf;
}

export class D3DAUTHENTICATEDCHANNEL_QUERY_INPUTView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get QueryType(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(0, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x08: pointer
  get hChannel(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(8, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x10: u32
  get SequenceNumber(): number {
    return this.view.getUint32(16, true);
  }

  // 0x14: pad4

  // 0x00: pointer
  set QueryType(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(0, util.toBigInt(util.toPointer(value)), true);
  }

  // 0x08: pointer
  set hChannel(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(8, util.toBigInt(util.toPointer(value)), true);
  }

  // 0x10: u32
  set SequenceNumber(value: number) {
    this.view.setUint32(16, value, true);
  }

  // 0x14: pad4
}

/**
 * Windows.Win32.Graphics.Direct3D9.D3DAUTHENTICATEDCHANNEL_PROTECTION_FLAGS (size: 8)
 */
export interface D3DAUTHENTICATEDCHANNEL_PROTECTION_FLAGS {
  /** _Anonymous_e__Union */
  Anonymous: Uint8Array | Deno.PointerValue | null;
}

export const sizeofD3DAUTHENTICATEDCHANNEL_PROTECTION_FLAGS = 8;

export function allocD3DAUTHENTICATEDCHANNEL_PROTECTION_FLAGS(data?: Partial<D3DAUTHENTICATEDCHANNEL_PROTECTION_FLAGS>): Uint8Array {
  const buf = new Uint8Array(sizeofD3DAUTHENTICATEDCHANNEL_PROTECTION_FLAGS);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.Anonymous !== undefined) view.setBigUint64(0, data.Anonymous === null ? 0n : util.toBigInt(util.toPointer(data.Anonymous)), true);
  return buf;
}

export class D3DAUTHENTICATEDCHANNEL_PROTECTION_FLAGSView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get Anonymous(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(0, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: pointer
  set Anonymous(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(0, util.toBigInt(util.toPointer(value)), true);
  }
}

/**
 * Windows.Win32.Graphics.Direct3D9.D3DAUTHENTICATEDCHANNEL_QUERYPROTECTION_OUTPUT (size: 16)
 */
export interface D3DAUTHENTICATEDCHANNEL_QUERYPROTECTION_OUTPUT {
  /** Windows.Win32.Graphics.Direct3D9.D3DAUTHENTICATEDCHANNEL_QUERY_OUTPUT */
  Output: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Graphics.Direct3D9.D3DAUTHENTICATEDCHANNEL_PROTECTION_FLAGS */
  ProtectionFlags: Uint8Array | Deno.PointerValue | null;
}

export const sizeofD3DAUTHENTICATEDCHANNEL_QUERYPROTECTION_OUTPUT = 16;

export function allocD3DAUTHENTICATEDCHANNEL_QUERYPROTECTION_OUTPUT(data?: Partial<D3DAUTHENTICATEDCHANNEL_QUERYPROTECTION_OUTPUT>): Uint8Array {
  const buf = new Uint8Array(sizeofD3DAUTHENTICATEDCHANNEL_QUERYPROTECTION_OUTPUT);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.Output !== undefined) view.setBigUint64(0, data.Output === null ? 0n : util.toBigInt(util.toPointer(data.Output)), true);
  // 0x08: pointer
  if (data?.ProtectionFlags !== undefined) view.setBigUint64(8, data.ProtectionFlags === null ? 0n : util.toBigInt(util.toPointer(data.ProtectionFlags)), true);
  return buf;
}

export class D3DAUTHENTICATEDCHANNEL_QUERYPROTECTION_OUTPUTView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get Output(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(0, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x08: pointer
  get ProtectionFlags(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(8, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: pointer
  set Output(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(0, util.toBigInt(util.toPointer(value)), true);
  }

  // 0x08: pointer
  set ProtectionFlags(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(8, util.toBigInt(util.toPointer(value)), true);
  }
}

/**
 * Windows.Win32.Graphics.Direct3D9.D3DAUTHENTICATEDCHANNEL_QUERYCHANNELTYPE_OUTPUT (size: 16)
 */
export interface D3DAUTHENTICATEDCHANNEL_QUERYCHANNELTYPE_OUTPUT {
  /** Windows.Win32.Graphics.Direct3D9.D3DAUTHENTICATEDCHANNEL_QUERY_OUTPUT */
  Output: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Graphics.Direct3D9.D3DAUTHENTICATEDCHANNELTYPE */
  ChannelType: D3DAUTHENTICATEDCHANNELTYPE;
}

export const sizeofD3DAUTHENTICATEDCHANNEL_QUERYCHANNELTYPE_OUTPUT = 16;

export function allocD3DAUTHENTICATEDCHANNEL_QUERYCHANNELTYPE_OUTPUT(data?: Partial<D3DAUTHENTICATEDCHANNEL_QUERYCHANNELTYPE_OUTPUT>): Uint8Array {
  const buf = new Uint8Array(sizeofD3DAUTHENTICATEDCHANNEL_QUERYCHANNELTYPE_OUTPUT);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.Output !== undefined) view.setBigUint64(0, data.Output === null ? 0n : util.toBigInt(util.toPointer(data.Output)), true);
  // 0x08: i32
  if (data?.ChannelType !== undefined) view.setInt32(8, Number(data.ChannelType), true);
  // 0x0c: pad4
  return buf;
}

export class D3DAUTHENTICATEDCHANNEL_QUERYCHANNELTYPE_OUTPUTView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get Output(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(0, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x08: i32
  get ChannelType(): number {
    return this.view.getInt32(8, true);
  }

  // 0x0c: pad4

  // 0x00: pointer
  set Output(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(0, util.toBigInt(util.toPointer(value)), true);
  }

  // 0x08: i32
  set ChannelType(value: number) {
    this.view.setInt32(8, value, true);
  }

  // 0x0c: pad4
}

/**
 * Windows.Win32.Graphics.Direct3D9.D3DAUTHENTICATEDCHANNEL_QUERYDEVICEHANDLE_OUTPUT (size: 16)
 */
export interface D3DAUTHENTICATEDCHANNEL_QUERYDEVICEHANDLE_OUTPUT {
  /** Windows.Win32.Graphics.Direct3D9.D3DAUTHENTICATEDCHANNEL_QUERY_OUTPUT */
  Output: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Foundation.HANDLE */
  DeviceHandle: Uint8Array | Deno.PointerValue | null;
}

export const sizeofD3DAUTHENTICATEDCHANNEL_QUERYDEVICEHANDLE_OUTPUT = 16;

export function allocD3DAUTHENTICATEDCHANNEL_QUERYDEVICEHANDLE_OUTPUT(data?: Partial<D3DAUTHENTICATEDCHANNEL_QUERYDEVICEHANDLE_OUTPUT>): Uint8Array {
  const buf = new Uint8Array(sizeofD3DAUTHENTICATEDCHANNEL_QUERYDEVICEHANDLE_OUTPUT);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.Output !== undefined) view.setBigUint64(0, data.Output === null ? 0n : util.toBigInt(util.toPointer(data.Output)), true);
  // 0x08: pointer
  if (data?.DeviceHandle !== undefined) view.setBigUint64(8, data.DeviceHandle === null ? 0n : util.toBigInt(util.toPointer(data.DeviceHandle)), true);
  return buf;
}

export class D3DAUTHENTICATEDCHANNEL_QUERYDEVICEHANDLE_OUTPUTView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get Output(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(0, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x08: pointer
  get DeviceHandle(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(8, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: pointer
  set Output(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(0, util.toBigInt(util.toPointer(value)), true);
  }

  // 0x08: pointer
  set DeviceHandle(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(8, util.toBigInt(util.toPointer(value)), true);
  }
}

/**
 * Windows.Win32.Graphics.Direct3D9.D3DAUTHENTICATEDCHANNEL_QUERYCRYPTOSESSION_INPUT (size: 16)
 */
export interface D3DAUTHENTICATEDCHANNEL_QUERYCRYPTOSESSION_INPUT {
  /** Windows.Win32.Graphics.Direct3D9.D3DAUTHENTICATEDCHANNEL_QUERY_INPUT */
  Input: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Foundation.HANDLE */
  DXVA2DecodeHandle: Uint8Array | Deno.PointerValue | null;
}

export const sizeofD3DAUTHENTICATEDCHANNEL_QUERYCRYPTOSESSION_INPUT = 16;

export function allocD3DAUTHENTICATEDCHANNEL_QUERYCRYPTOSESSION_INPUT(data?: Partial<D3DAUTHENTICATEDCHANNEL_QUERYCRYPTOSESSION_INPUT>): Uint8Array {
  const buf = new Uint8Array(sizeofD3DAUTHENTICATEDCHANNEL_QUERYCRYPTOSESSION_INPUT);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.Input !== undefined) view.setBigUint64(0, data.Input === null ? 0n : util.toBigInt(util.toPointer(data.Input)), true);
  // 0x08: pointer
  if (data?.DXVA2DecodeHandle !== undefined) view.setBigUint64(8, data.DXVA2DecodeHandle === null ? 0n : util.toBigInt(util.toPointer(data.DXVA2DecodeHandle)), true);
  return buf;
}

export class D3DAUTHENTICATEDCHANNEL_QUERYCRYPTOSESSION_INPUTView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get Input(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(0, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x08: pointer
  get DXVA2DecodeHandle(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(8, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: pointer
  set Input(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(0, util.toBigInt(util.toPointer(value)), true);
  }

  // 0x08: pointer
  set DXVA2DecodeHandle(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(8, util.toBigInt(util.toPointer(value)), true);
  }
}

/**
 * Windows.Win32.Graphics.Direct3D9.D3DAUTHENTICATEDCHANNEL_QUERYCRYPTOSESSION_OUTPUT (size: 32)
 */
export interface D3DAUTHENTICATEDCHANNEL_QUERYCRYPTOSESSION_OUTPUT {
  /** Windows.Win32.Graphics.Direct3D9.D3DAUTHENTICATEDCHANNEL_QUERY_OUTPUT */
  Output: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Foundation.HANDLE */
  DXVA2DecodeHandle: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Foundation.HANDLE */
  CryptoSessionHandle: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Foundation.HANDLE */
  DeviceHandle: Uint8Array | Deno.PointerValue | null;
}

export const sizeofD3DAUTHENTICATEDCHANNEL_QUERYCRYPTOSESSION_OUTPUT = 32;

export function allocD3DAUTHENTICATEDCHANNEL_QUERYCRYPTOSESSION_OUTPUT(data?: Partial<D3DAUTHENTICATEDCHANNEL_QUERYCRYPTOSESSION_OUTPUT>): Uint8Array {
  const buf = new Uint8Array(sizeofD3DAUTHENTICATEDCHANNEL_QUERYCRYPTOSESSION_OUTPUT);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.Output !== undefined) view.setBigUint64(0, data.Output === null ? 0n : util.toBigInt(util.toPointer(data.Output)), true);
  // 0x08: pointer
  if (data?.DXVA2DecodeHandle !== undefined) view.setBigUint64(8, data.DXVA2DecodeHandle === null ? 0n : util.toBigInt(util.toPointer(data.DXVA2DecodeHandle)), true);
  // 0x10: pointer
  if (data?.CryptoSessionHandle !== undefined) view.setBigUint64(16, data.CryptoSessionHandle === null ? 0n : util.toBigInt(util.toPointer(data.CryptoSessionHandle)), true);
  // 0x18: pointer
  if (data?.DeviceHandle !== undefined) view.setBigUint64(24, data.DeviceHandle === null ? 0n : util.toBigInt(util.toPointer(data.DeviceHandle)), true);
  return buf;
}

export class D3DAUTHENTICATEDCHANNEL_QUERYCRYPTOSESSION_OUTPUTView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get Output(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(0, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x08: pointer
  get DXVA2DecodeHandle(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(8, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x10: pointer
  get CryptoSessionHandle(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(16, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x18: pointer
  get DeviceHandle(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(24, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: pointer
  set Output(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(0, util.toBigInt(util.toPointer(value)), true);
  }

  // 0x08: pointer
  set DXVA2DecodeHandle(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(8, util.toBigInt(util.toPointer(value)), true);
  }

  // 0x10: pointer
  set CryptoSessionHandle(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(16, util.toBigInt(util.toPointer(value)), true);
  }

  // 0x18: pointer
  set DeviceHandle(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(24, util.toBigInt(util.toPointer(value)), true);
  }
}

/**
 * Windows.Win32.Graphics.Direct3D9.D3DAUTHENTICATEDCHANNEL_QUERYRESTRICTEDSHAREDRESOURCEPROCESSCOUNT_OUTPUT (size: 16)
 */
export interface D3DAUTHENTICATEDCHANNEL_QUERYRESTRICTEDSHAREDRESOURCEPROCESSCOUNT_OUTPUT {
  /** Windows.Win32.Graphics.Direct3D9.D3DAUTHENTICATEDCHANNEL_QUERY_OUTPUT */
  Output: Uint8Array | Deno.PointerValue | null;
  /** u32 */
  NumRestrictedSharedResourceProcesses: number;
}

export const sizeofD3DAUTHENTICATEDCHANNEL_QUERYRESTRICTEDSHAREDRESOURCEPROCESSCOUNT_OUTPUT = 16;

export function allocD3DAUTHENTICATEDCHANNEL_QUERYRESTRICTEDSHAREDRESOURCEPROCESSCOUNT_OUTPUT(data?: Partial<D3DAUTHENTICATEDCHANNEL_QUERYRESTRICTEDSHAREDRESOURCEPROCESSCOUNT_OUTPUT>): Uint8Array {
  const buf = new Uint8Array(sizeofD3DAUTHENTICATEDCHANNEL_QUERYRESTRICTEDSHAREDRESOURCEPROCESSCOUNT_OUTPUT);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.Output !== undefined) view.setBigUint64(0, data.Output === null ? 0n : util.toBigInt(util.toPointer(data.Output)), true);
  // 0x08: u32
  if (data?.NumRestrictedSharedResourceProcesses !== undefined) view.setUint32(8, Number(data.NumRestrictedSharedResourceProcesses), true);
  // 0x0c: pad4
  return buf;
}

export class D3DAUTHENTICATEDCHANNEL_QUERYRESTRICTEDSHAREDRESOURCEPROCESSCOUNT_OUTPUTView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get Output(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(0, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x08: u32
  get NumRestrictedSharedResourceProcesses(): number {
    return this.view.getUint32(8, true);
  }

  // 0x0c: pad4

  // 0x00: pointer
  set Output(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(0, util.toBigInt(util.toPointer(value)), true);
  }

  // 0x08: u32
  set NumRestrictedSharedResourceProcesses(value: number) {
    this.view.setUint32(8, value, true);
  }

  // 0x0c: pad4
}

/**
 * Windows.Win32.Graphics.Direct3D9.D3DAUTHENTICATEDCHANNEL_QUERYRESTRICTEDSHAREDRESOURCEPROCESS_INPUT (size: 16)
 */
export interface D3DAUTHENTICATEDCHANNEL_QUERYRESTRICTEDSHAREDRESOURCEPROCESS_INPUT {
  /** Windows.Win32.Graphics.Direct3D9.D3DAUTHENTICATEDCHANNEL_QUERY_INPUT */
  Input: Uint8Array | Deno.PointerValue | null;
  /** u32 */
  ProcessIndex: number;
}

export const sizeofD3DAUTHENTICATEDCHANNEL_QUERYRESTRICTEDSHAREDRESOURCEPROCESS_INPUT = 16;

export function allocD3DAUTHENTICATEDCHANNEL_QUERYRESTRICTEDSHAREDRESOURCEPROCESS_INPUT(data?: Partial<D3DAUTHENTICATEDCHANNEL_QUERYRESTRICTEDSHAREDRESOURCEPROCESS_INPUT>): Uint8Array {
  const buf = new Uint8Array(sizeofD3DAUTHENTICATEDCHANNEL_QUERYRESTRICTEDSHAREDRESOURCEPROCESS_INPUT);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.Input !== undefined) view.setBigUint64(0, data.Input === null ? 0n : util.toBigInt(util.toPointer(data.Input)), true);
  // 0x08: u32
  if (data?.ProcessIndex !== undefined) view.setUint32(8, Number(data.ProcessIndex), true);
  // 0x0c: pad4
  return buf;
}

export class D3DAUTHENTICATEDCHANNEL_QUERYRESTRICTEDSHAREDRESOURCEPROCESS_INPUTView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get Input(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(0, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x08: u32
  get ProcessIndex(): number {
    return this.view.getUint32(8, true);
  }

  // 0x0c: pad4

  // 0x00: pointer
  set Input(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(0, util.toBigInt(util.toPointer(value)), true);
  }

  // 0x08: u32
  set ProcessIndex(value: number) {
    this.view.setUint32(8, value, true);
  }

  // 0x0c: pad4
}

/**
 * Windows.Win32.Graphics.Direct3D9.D3DAUTHENTICATEDCHANNEL_QUERYRESTRICTEDSHAREDRESOURCEPROCESS_OUTPUT (size: 24)
 */
export interface D3DAUTHENTICATEDCHANNEL_QUERYRESTRICTEDSHAREDRESOURCEPROCESS_OUTPUT {
  /** Windows.Win32.Graphics.Direct3D9.D3DAUTHENTICATEDCHANNEL_QUERY_OUTPUT */
  Output: Uint8Array | Deno.PointerValue | null;
  /** u32 */
  ProcessIndex: number;
  /** Windows.Win32.Graphics.Direct3D9.D3DAUTHENTICATEDCHANNEL_PROCESSIDENTIFIERTYPE */
  ProcessIdentifer: D3DAUTHENTICATEDCHANNEL_PROCESSIDENTIFIERTYPE;
  /** Windows.Win32.Foundation.HANDLE */
  ProcessHandle: Uint8Array | Deno.PointerValue | null;
}

export const sizeofD3DAUTHENTICATEDCHANNEL_QUERYRESTRICTEDSHAREDRESOURCEPROCESS_OUTPUT = 24;

export function allocD3DAUTHENTICATEDCHANNEL_QUERYRESTRICTEDSHAREDRESOURCEPROCESS_OUTPUT(data?: Partial<D3DAUTHENTICATEDCHANNEL_QUERYRESTRICTEDSHAREDRESOURCEPROCESS_OUTPUT>): Uint8Array {
  const buf = new Uint8Array(sizeofD3DAUTHENTICATEDCHANNEL_QUERYRESTRICTEDSHAREDRESOURCEPROCESS_OUTPUT);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.Output !== undefined) view.setBigUint64(0, data.Output === null ? 0n : util.toBigInt(util.toPointer(data.Output)), true);
  // 0x08: u32
  if (data?.ProcessIndex !== undefined) view.setUint32(8, Number(data.ProcessIndex), true);
  // 0x0c: i32
  if (data?.ProcessIdentifer !== undefined) view.setInt32(12, Number(data.ProcessIdentifer), true);
  // 0x10: pointer
  if (data?.ProcessHandle !== undefined) view.setBigUint64(16, data.ProcessHandle === null ? 0n : util.toBigInt(util.toPointer(data.ProcessHandle)), true);
  return buf;
}

export class D3DAUTHENTICATEDCHANNEL_QUERYRESTRICTEDSHAREDRESOURCEPROCESS_OUTPUTView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get Output(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(0, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x08: u32
  get ProcessIndex(): number {
    return this.view.getUint32(8, true);
  }

  // 0x0c: i32
  get ProcessIdentifer(): number {
    return this.view.getInt32(12, true);
  }

  // 0x10: pointer
  get ProcessHandle(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(16, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: pointer
  set Output(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(0, util.toBigInt(util.toPointer(value)), true);
  }

  // 0x08: u32
  set ProcessIndex(value: number) {
    this.view.setUint32(8, value, true);
  }

  // 0x0c: i32
  set ProcessIdentifer(value: number) {
    this.view.setInt32(12, value, true);
  }

  // 0x10: pointer
  set ProcessHandle(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(16, util.toBigInt(util.toPointer(value)), true);
  }
}

/**
 * Windows.Win32.Graphics.Direct3D9.D3DAUTHENTICATEDCHANNEL_QUERYUNRESTRICTEDPROTECTEDSHAREDRESOURCECOUNT_OUTPUT (size: 16)
 */
export interface D3DAUTHENTICATEDCHANNEL_QUERYUNRESTRICTEDPROTECTEDSHAREDRESOURCECOUNT_OUTPUT {
  /** Windows.Win32.Graphics.Direct3D9.D3DAUTHENTICATEDCHANNEL_QUERY_OUTPUT */
  Output: Uint8Array | Deno.PointerValue | null;
  /** u32 */
  NumUnrestrictedProtectedSharedResources: number;
}

export const sizeofD3DAUTHENTICATEDCHANNEL_QUERYUNRESTRICTEDPROTECTEDSHAREDRESOURCECOUNT_OUTPUT = 16;

export function allocD3DAUTHENTICATEDCHANNEL_QUERYUNRESTRICTEDPROTECTEDSHAREDRESOURCECOUNT_OUTPUT(data?: Partial<D3DAUTHENTICATEDCHANNEL_QUERYUNRESTRICTEDPROTECTEDSHAREDRESOURCECOUNT_OUTPUT>): Uint8Array {
  const buf = new Uint8Array(sizeofD3DAUTHENTICATEDCHANNEL_QUERYUNRESTRICTEDPROTECTEDSHAREDRESOURCECOUNT_OUTPUT);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.Output !== undefined) view.setBigUint64(0, data.Output === null ? 0n : util.toBigInt(util.toPointer(data.Output)), true);
  // 0x08: u32
  if (data?.NumUnrestrictedProtectedSharedResources !== undefined) view.setUint32(8, Number(data.NumUnrestrictedProtectedSharedResources), true);
  // 0x0c: pad4
  return buf;
}

export class D3DAUTHENTICATEDCHANNEL_QUERYUNRESTRICTEDPROTECTEDSHAREDRESOURCECOUNT_OUTPUTView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get Output(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(0, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x08: u32
  get NumUnrestrictedProtectedSharedResources(): number {
    return this.view.getUint32(8, true);
  }

  // 0x0c: pad4

  // 0x00: pointer
  set Output(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(0, util.toBigInt(util.toPointer(value)), true);
  }

  // 0x08: u32
  set NumUnrestrictedProtectedSharedResources(value: number) {
    this.view.setUint32(8, value, true);
  }

  // 0x0c: pad4
}

/**
 * Windows.Win32.Graphics.Direct3D9.D3DAUTHENTICATEDCHANNEL_QUERYOUTPUTIDCOUNT_INPUT (size: 24)
 */
export interface D3DAUTHENTICATEDCHANNEL_QUERYOUTPUTIDCOUNT_INPUT {
  /** Windows.Win32.Graphics.Direct3D9.D3DAUTHENTICATEDCHANNEL_QUERY_INPUT */
  Input: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Foundation.HANDLE */
  DeviceHandle: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Foundation.HANDLE */
  CryptoSessionHandle: Uint8Array | Deno.PointerValue | null;
}

export const sizeofD3DAUTHENTICATEDCHANNEL_QUERYOUTPUTIDCOUNT_INPUT = 24;

export function allocD3DAUTHENTICATEDCHANNEL_QUERYOUTPUTIDCOUNT_INPUT(data?: Partial<D3DAUTHENTICATEDCHANNEL_QUERYOUTPUTIDCOUNT_INPUT>): Uint8Array {
  const buf = new Uint8Array(sizeofD3DAUTHENTICATEDCHANNEL_QUERYOUTPUTIDCOUNT_INPUT);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.Input !== undefined) view.setBigUint64(0, data.Input === null ? 0n : util.toBigInt(util.toPointer(data.Input)), true);
  // 0x08: pointer
  if (data?.DeviceHandle !== undefined) view.setBigUint64(8, data.DeviceHandle === null ? 0n : util.toBigInt(util.toPointer(data.DeviceHandle)), true);
  // 0x10: pointer
  if (data?.CryptoSessionHandle !== undefined) view.setBigUint64(16, data.CryptoSessionHandle === null ? 0n : util.toBigInt(util.toPointer(data.CryptoSessionHandle)), true);
  return buf;
}

export class D3DAUTHENTICATEDCHANNEL_QUERYOUTPUTIDCOUNT_INPUTView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get Input(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(0, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x08: pointer
  get DeviceHandle(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(8, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x10: pointer
  get CryptoSessionHandle(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(16, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: pointer
  set Input(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(0, util.toBigInt(util.toPointer(value)), true);
  }

  // 0x08: pointer
  set DeviceHandle(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(8, util.toBigInt(util.toPointer(value)), true);
  }

  // 0x10: pointer
  set CryptoSessionHandle(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(16, util.toBigInt(util.toPointer(value)), true);
  }
}

/**
 * Windows.Win32.Graphics.Direct3D9.D3DAUTHENTICATEDCHANNEL_QUERYOUTPUTIDCOUNT_OUTPUT (size: 32)
 */
export interface D3DAUTHENTICATEDCHANNEL_QUERYOUTPUTIDCOUNT_OUTPUT {
  /** Windows.Win32.Graphics.Direct3D9.D3DAUTHENTICATEDCHANNEL_QUERY_OUTPUT */
  Output: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Foundation.HANDLE */
  DeviceHandle: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Foundation.HANDLE */
  CryptoSessionHandle: Uint8Array | Deno.PointerValue | null;
  /** u32 */
  NumOutputIDs: number;
}

export const sizeofD3DAUTHENTICATEDCHANNEL_QUERYOUTPUTIDCOUNT_OUTPUT = 32;

export function allocD3DAUTHENTICATEDCHANNEL_QUERYOUTPUTIDCOUNT_OUTPUT(data?: Partial<D3DAUTHENTICATEDCHANNEL_QUERYOUTPUTIDCOUNT_OUTPUT>): Uint8Array {
  const buf = new Uint8Array(sizeofD3DAUTHENTICATEDCHANNEL_QUERYOUTPUTIDCOUNT_OUTPUT);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.Output !== undefined) view.setBigUint64(0, data.Output === null ? 0n : util.toBigInt(util.toPointer(data.Output)), true);
  // 0x08: pointer
  if (data?.DeviceHandle !== undefined) view.setBigUint64(8, data.DeviceHandle === null ? 0n : util.toBigInt(util.toPointer(data.DeviceHandle)), true);
  // 0x10: pointer
  if (data?.CryptoSessionHandle !== undefined) view.setBigUint64(16, data.CryptoSessionHandle === null ? 0n : util.toBigInt(util.toPointer(data.CryptoSessionHandle)), true);
  // 0x18: u32
  if (data?.NumOutputIDs !== undefined) view.setUint32(24, Number(data.NumOutputIDs), true);
  // 0x1c: pad4
  return buf;
}

export class D3DAUTHENTICATEDCHANNEL_QUERYOUTPUTIDCOUNT_OUTPUTView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get Output(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(0, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x08: pointer
  get DeviceHandle(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(8, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x10: pointer
  get CryptoSessionHandle(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(16, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x18: u32
  get NumOutputIDs(): number {
    return this.view.getUint32(24, true);
  }

  // 0x1c: pad4

  // 0x00: pointer
  set Output(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(0, util.toBigInt(util.toPointer(value)), true);
  }

  // 0x08: pointer
  set DeviceHandle(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(8, util.toBigInt(util.toPointer(value)), true);
  }

  // 0x10: pointer
  set CryptoSessionHandle(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(16, util.toBigInt(util.toPointer(value)), true);
  }

  // 0x18: u32
  set NumOutputIDs(value: number) {
    this.view.setUint32(24, value, true);
  }

  // 0x1c: pad4
}

/**
 * Windows.Win32.Graphics.Direct3D9.D3DAUTHENTICATEDCHANNEL_QUERYOUTPUTID_INPUT (size: 32)
 */
export interface D3DAUTHENTICATEDCHANNEL_QUERYOUTPUTID_INPUT {
  /** Windows.Win32.Graphics.Direct3D9.D3DAUTHENTICATEDCHANNEL_QUERY_INPUT */
  Input: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Foundation.HANDLE */
  DeviceHandle: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Foundation.HANDLE */
  CryptoSessionHandle: Uint8Array | Deno.PointerValue | null;
  /** u32 */
  OutputIDIndex: number;
}

export const sizeofD3DAUTHENTICATEDCHANNEL_QUERYOUTPUTID_INPUT = 32;

export function allocD3DAUTHENTICATEDCHANNEL_QUERYOUTPUTID_INPUT(data?: Partial<D3DAUTHENTICATEDCHANNEL_QUERYOUTPUTID_INPUT>): Uint8Array {
  const buf = new Uint8Array(sizeofD3DAUTHENTICATEDCHANNEL_QUERYOUTPUTID_INPUT);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.Input !== undefined) view.setBigUint64(0, data.Input === null ? 0n : util.toBigInt(util.toPointer(data.Input)), true);
  // 0x08: pointer
  if (data?.DeviceHandle !== undefined) view.setBigUint64(8, data.DeviceHandle === null ? 0n : util.toBigInt(util.toPointer(data.DeviceHandle)), true);
  // 0x10: pointer
  if (data?.CryptoSessionHandle !== undefined) view.setBigUint64(16, data.CryptoSessionHandle === null ? 0n : util.toBigInt(util.toPointer(data.CryptoSessionHandle)), true);
  // 0x18: u32
  if (data?.OutputIDIndex !== undefined) view.setUint32(24, Number(data.OutputIDIndex), true);
  // 0x1c: pad4
  return buf;
}

export class D3DAUTHENTICATEDCHANNEL_QUERYOUTPUTID_INPUTView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get Input(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(0, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x08: pointer
  get DeviceHandle(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(8, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x10: pointer
  get CryptoSessionHandle(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(16, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x18: u32
  get OutputIDIndex(): number {
    return this.view.getUint32(24, true);
  }

  // 0x1c: pad4

  // 0x00: pointer
  set Input(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(0, util.toBigInt(util.toPointer(value)), true);
  }

  // 0x08: pointer
  set DeviceHandle(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(8, util.toBigInt(util.toPointer(value)), true);
  }

  // 0x10: pointer
  set CryptoSessionHandle(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(16, util.toBigInt(util.toPointer(value)), true);
  }

  // 0x18: u32
  set OutputIDIndex(value: number) {
    this.view.setUint32(24, value, true);
  }

  // 0x1c: pad4
}

/**
 * Windows.Win32.Graphics.Direct3D9.D3DAUTHENTICATEDCHANNEL_QUERYINFOBUSTYPE_OUTPUT (size: 24)
 */
export interface D3DAUTHENTICATEDCHANNEL_QUERYINFOBUSTYPE_OUTPUT {
  /** Windows.Win32.Graphics.Direct3D9.D3DAUTHENTICATEDCHANNEL_QUERY_OUTPUT */
  Output: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Graphics.Direct3D9.D3DBUSTYPE */
  BusType: D3DBUSTYPE;
  /** Windows.Win32.Foundation.BOOL */
  bAccessibleInContiguousBlocks: boolean;
  /** Windows.Win32.Foundation.BOOL */
  bAccessibleInNonContiguousBlocks: boolean;
}

export const sizeofD3DAUTHENTICATEDCHANNEL_QUERYINFOBUSTYPE_OUTPUT = 24;

export function allocD3DAUTHENTICATEDCHANNEL_QUERYINFOBUSTYPE_OUTPUT(data?: Partial<D3DAUTHENTICATEDCHANNEL_QUERYINFOBUSTYPE_OUTPUT>): Uint8Array {
  const buf = new Uint8Array(sizeofD3DAUTHENTICATEDCHANNEL_QUERYINFOBUSTYPE_OUTPUT);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.Output !== undefined) view.setBigUint64(0, data.Output === null ? 0n : util.toBigInt(util.toPointer(data.Output)), true);
  // 0x08: i32
  if (data?.BusType !== undefined) view.setInt32(8, Number(data.BusType), true);
  // 0x0c: i32
  if (data?.bAccessibleInContiguousBlocks !== undefined) view.setInt32(12, Number(data.bAccessibleInContiguousBlocks), true);
  // 0x10: i32
  if (data?.bAccessibleInNonContiguousBlocks !== undefined) view.setInt32(16, Number(data.bAccessibleInNonContiguousBlocks), true);
  // 0x14: pad4
  return buf;
}

export class D3DAUTHENTICATEDCHANNEL_QUERYINFOBUSTYPE_OUTPUTView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get Output(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(0, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x08: i32
  get BusType(): number {
    return this.view.getInt32(8, true);
  }

  // 0x0c: i32
  get bAccessibleInContiguousBlocks(): number {
    return this.view.getInt32(12, true);
  }

  // 0x10: i32
  get bAccessibleInNonContiguousBlocks(): number {
    return this.view.getInt32(16, true);
  }

  // 0x14: pad4

  // 0x00: pointer
  set Output(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(0, util.toBigInt(util.toPointer(value)), true);
  }

  // 0x08: i32
  set BusType(value: number) {
    this.view.setInt32(8, value, true);
  }

  // 0x0c: i32
  set bAccessibleInContiguousBlocks(value: number) {
    this.view.setInt32(12, value, true);
  }

  // 0x10: i32
  set bAccessibleInNonContiguousBlocks(value: number) {
    this.view.setInt32(16, value, true);
  }

  // 0x14: pad4
}

/**
 * Windows.Win32.Graphics.Direct3D9.D3DAUTHENTICATEDCHANNEL_QUERYEVICTIONENCRYPTIONGUIDCOUNT_OUTPUT (size: 16)
 */
export interface D3DAUTHENTICATEDCHANNEL_QUERYEVICTIONENCRYPTIONGUIDCOUNT_OUTPUT {
  /** Windows.Win32.Graphics.Direct3D9.D3DAUTHENTICATEDCHANNEL_QUERY_OUTPUT */
  Output: Uint8Array | Deno.PointerValue | null;
  /** u32 */
  NumEncryptionGuids: number;
}

export const sizeofD3DAUTHENTICATEDCHANNEL_QUERYEVICTIONENCRYPTIONGUIDCOUNT_OUTPUT = 16;

export function allocD3DAUTHENTICATEDCHANNEL_QUERYEVICTIONENCRYPTIONGUIDCOUNT_OUTPUT(data?: Partial<D3DAUTHENTICATEDCHANNEL_QUERYEVICTIONENCRYPTIONGUIDCOUNT_OUTPUT>): Uint8Array {
  const buf = new Uint8Array(sizeofD3DAUTHENTICATEDCHANNEL_QUERYEVICTIONENCRYPTIONGUIDCOUNT_OUTPUT);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.Output !== undefined) view.setBigUint64(0, data.Output === null ? 0n : util.toBigInt(util.toPointer(data.Output)), true);
  // 0x08: u32
  if (data?.NumEncryptionGuids !== undefined) view.setUint32(8, Number(data.NumEncryptionGuids), true);
  // 0x0c: pad4
  return buf;
}

export class D3DAUTHENTICATEDCHANNEL_QUERYEVICTIONENCRYPTIONGUIDCOUNT_OUTPUTView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get Output(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(0, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x08: u32
  get NumEncryptionGuids(): number {
    return this.view.getUint32(8, true);
  }

  // 0x0c: pad4

  // 0x00: pointer
  set Output(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(0, util.toBigInt(util.toPointer(value)), true);
  }

  // 0x08: u32
  set NumEncryptionGuids(value: number) {
    this.view.setUint32(8, value, true);
  }

  // 0x0c: pad4
}

/**
 * Windows.Win32.Graphics.Direct3D9.D3DAUTHENTICATEDCHANNEL_QUERYEVICTIONENCRYPTIONGUID_INPUT (size: 16)
 */
export interface D3DAUTHENTICATEDCHANNEL_QUERYEVICTIONENCRYPTIONGUID_INPUT {
  /** Windows.Win32.Graphics.Direct3D9.D3DAUTHENTICATEDCHANNEL_QUERY_INPUT */
  Input: Uint8Array | Deno.PointerValue | null;
  /** u32 */
  EncryptionGuidIndex: number;
}

export const sizeofD3DAUTHENTICATEDCHANNEL_QUERYEVICTIONENCRYPTIONGUID_INPUT = 16;

export function allocD3DAUTHENTICATEDCHANNEL_QUERYEVICTIONENCRYPTIONGUID_INPUT(data?: Partial<D3DAUTHENTICATEDCHANNEL_QUERYEVICTIONENCRYPTIONGUID_INPUT>): Uint8Array {
  const buf = new Uint8Array(sizeofD3DAUTHENTICATEDCHANNEL_QUERYEVICTIONENCRYPTIONGUID_INPUT);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.Input !== undefined) view.setBigUint64(0, data.Input === null ? 0n : util.toBigInt(util.toPointer(data.Input)), true);
  // 0x08: u32
  if (data?.EncryptionGuidIndex !== undefined) view.setUint32(8, Number(data.EncryptionGuidIndex), true);
  // 0x0c: pad4
  return buf;
}

export class D3DAUTHENTICATEDCHANNEL_QUERYEVICTIONENCRYPTIONGUID_INPUTView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get Input(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(0, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x08: u32
  get EncryptionGuidIndex(): number {
    return this.view.getUint32(8, true);
  }

  // 0x0c: pad4

  // 0x00: pointer
  set Input(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(0, util.toBigInt(util.toPointer(value)), true);
  }

  // 0x08: u32
  set EncryptionGuidIndex(value: number) {
    this.view.setUint32(8, value, true);
  }

  // 0x0c: pad4
}

/**
 * Windows.Win32.Graphics.Direct3D9.D3DAUTHENTICATEDCHANNEL_QUERYEVICTIONENCRYPTIONGUID_OUTPUT (size: 24)
 */
export interface D3DAUTHENTICATEDCHANNEL_QUERYEVICTIONENCRYPTIONGUID_OUTPUT {
  /** Windows.Win32.Graphics.Direct3D9.D3DAUTHENTICATEDCHANNEL_QUERY_OUTPUT */
  Output: Uint8Array | Deno.PointerValue | null;
  /** u32 */
  EncryptionGuidIndex: number;
  /** System.Guid */
  EncryptionGuid: Uint8Array | Deno.PointerValue | null;
}

export const sizeofD3DAUTHENTICATEDCHANNEL_QUERYEVICTIONENCRYPTIONGUID_OUTPUT = 24;

export function allocD3DAUTHENTICATEDCHANNEL_QUERYEVICTIONENCRYPTIONGUID_OUTPUT(data?: Partial<D3DAUTHENTICATEDCHANNEL_QUERYEVICTIONENCRYPTIONGUID_OUTPUT>): Uint8Array {
  const buf = new Uint8Array(sizeofD3DAUTHENTICATEDCHANNEL_QUERYEVICTIONENCRYPTIONGUID_OUTPUT);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.Output !== undefined) view.setBigUint64(0, data.Output === null ? 0n : util.toBigInt(util.toPointer(data.Output)), true);
  // 0x08: u32
  if (data?.EncryptionGuidIndex !== undefined) view.setUint32(8, Number(data.EncryptionGuidIndex), true);
  // 0x0c: pad4
  // 0x10: pointer
  if (data?.EncryptionGuid !== undefined) view.setBigUint64(16, data.EncryptionGuid === null ? 0n : util.toBigInt(util.toPointer(data.EncryptionGuid)), true);
  return buf;
}

export class D3DAUTHENTICATEDCHANNEL_QUERYEVICTIONENCRYPTIONGUID_OUTPUTView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get Output(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(0, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x08: u32
  get EncryptionGuidIndex(): number {
    return this.view.getUint32(8, true);
  }

  // 0x0c: pad4

  // 0x10: pointer
  get EncryptionGuid(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(16, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: pointer
  set Output(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(0, util.toBigInt(util.toPointer(value)), true);
  }

  // 0x08: u32
  set EncryptionGuidIndex(value: number) {
    this.view.setUint32(8, value, true);
  }

  // 0x0c: pad4

  // 0x10: pointer
  set EncryptionGuid(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(16, util.toBigInt(util.toPointer(value)), true);
  }
}

/**
 * Windows.Win32.Graphics.Direct3D9.D3DAUTHENTICATEDCHANNEL_QUERYUNCOMPRESSEDENCRYPTIONLEVEL_OUTPUT (size: 16)
 */
export interface D3DAUTHENTICATEDCHANNEL_QUERYUNCOMPRESSEDENCRYPTIONLEVEL_OUTPUT {
  /** Windows.Win32.Graphics.Direct3D9.D3DAUTHENTICATEDCHANNEL_QUERY_OUTPUT */
  Output: Uint8Array | Deno.PointerValue | null;
  /** System.Guid */
  EncryptionGuid: Uint8Array | Deno.PointerValue | null;
}

export const sizeofD3DAUTHENTICATEDCHANNEL_QUERYUNCOMPRESSEDENCRYPTIONLEVEL_OUTPUT = 16;

export function allocD3DAUTHENTICATEDCHANNEL_QUERYUNCOMPRESSEDENCRYPTIONLEVEL_OUTPUT(data?: Partial<D3DAUTHENTICATEDCHANNEL_QUERYUNCOMPRESSEDENCRYPTIONLEVEL_OUTPUT>): Uint8Array {
  const buf = new Uint8Array(sizeofD3DAUTHENTICATEDCHANNEL_QUERYUNCOMPRESSEDENCRYPTIONLEVEL_OUTPUT);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.Output !== undefined) view.setBigUint64(0, data.Output === null ? 0n : util.toBigInt(util.toPointer(data.Output)), true);
  // 0x08: pointer
  if (data?.EncryptionGuid !== undefined) view.setBigUint64(8, data.EncryptionGuid === null ? 0n : util.toBigInt(util.toPointer(data.EncryptionGuid)), true);
  return buf;
}

export class D3DAUTHENTICATEDCHANNEL_QUERYUNCOMPRESSEDENCRYPTIONLEVEL_OUTPUTView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get Output(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(0, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x08: pointer
  get EncryptionGuid(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(8, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: pointer
  set Output(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(0, util.toBigInt(util.toPointer(value)), true);
  }

  // 0x08: pointer
  set EncryptionGuid(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(8, util.toBigInt(util.toPointer(value)), true);
  }
}

/**
 * Windows.Win32.Graphics.Direct3D9.D3DAUTHENTICATEDCHANNEL_CONFIGURE_INPUT (size: 32)
 */
export interface D3DAUTHENTICATEDCHANNEL_CONFIGURE_INPUT {
  /** Windows.Win32.Graphics.Direct3D9.D3D_OMAC */
  omac: Uint8Array | Deno.PointerValue | null;
  /** System.Guid */
  ConfigureType: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Foundation.HANDLE */
  hChannel: Uint8Array | Deno.PointerValue | null;
  /** u32 */
  SequenceNumber: number;
}

export const sizeofD3DAUTHENTICATEDCHANNEL_CONFIGURE_INPUT = 32;

export function allocD3DAUTHENTICATEDCHANNEL_CONFIGURE_INPUT(data?: Partial<D3DAUTHENTICATEDCHANNEL_CONFIGURE_INPUT>): Uint8Array {
  const buf = new Uint8Array(sizeofD3DAUTHENTICATEDCHANNEL_CONFIGURE_INPUT);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.omac !== undefined) view.setBigUint64(0, data.omac === null ? 0n : util.toBigInt(util.toPointer(data.omac)), true);
  // 0x08: pointer
  if (data?.ConfigureType !== undefined) view.setBigUint64(8, data.ConfigureType === null ? 0n : util.toBigInt(util.toPointer(data.ConfigureType)), true);
  // 0x10: pointer
  if (data?.hChannel !== undefined) view.setBigUint64(16, data.hChannel === null ? 0n : util.toBigInt(util.toPointer(data.hChannel)), true);
  // 0x18: u32
  if (data?.SequenceNumber !== undefined) view.setUint32(24, Number(data.SequenceNumber), true);
  // 0x1c: pad4
  return buf;
}

export class D3DAUTHENTICATEDCHANNEL_CONFIGURE_INPUTView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get omac(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(0, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x08: pointer
  get ConfigureType(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(8, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x10: pointer
  get hChannel(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(16, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x18: u32
  get SequenceNumber(): number {
    return this.view.getUint32(24, true);
  }

  // 0x1c: pad4

  // 0x00: pointer
  set omac(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(0, util.toBigInt(util.toPointer(value)), true);
  }

  // 0x08: pointer
  set ConfigureType(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(8, util.toBigInt(util.toPointer(value)), true);
  }

  // 0x10: pointer
  set hChannel(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(16, util.toBigInt(util.toPointer(value)), true);
  }

  // 0x18: u32
  set SequenceNumber(value: number) {
    this.view.setUint32(24, value, true);
  }

  // 0x1c: pad4
}

/**
 * Windows.Win32.Graphics.Direct3D9.D3DAUTHENTICATEDCHANNEL_CONFIGURE_OUTPUT (size: 40)
 */
export interface D3DAUTHENTICATEDCHANNEL_CONFIGURE_OUTPUT {
  /** Windows.Win32.Graphics.Direct3D9.D3D_OMAC */
  omac: Uint8Array | Deno.PointerValue | null;
  /** System.Guid */
  ConfigureType: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Foundation.HANDLE */
  hChannel: Uint8Array | Deno.PointerValue | null;
  /** u32 */
  SequenceNumber: number;
  /** Windows.Win32.Foundation.HRESULT */
  ReturnCode: Uint8Array | Deno.PointerValue | null;
}

export const sizeofD3DAUTHENTICATEDCHANNEL_CONFIGURE_OUTPUT = 40;

export function allocD3DAUTHENTICATEDCHANNEL_CONFIGURE_OUTPUT(data?: Partial<D3DAUTHENTICATEDCHANNEL_CONFIGURE_OUTPUT>): Uint8Array {
  const buf = new Uint8Array(sizeofD3DAUTHENTICATEDCHANNEL_CONFIGURE_OUTPUT);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.omac !== undefined) view.setBigUint64(0, data.omac === null ? 0n : util.toBigInt(util.toPointer(data.omac)), true);
  // 0x08: pointer
  if (data?.ConfigureType !== undefined) view.setBigUint64(8, data.ConfigureType === null ? 0n : util.toBigInt(util.toPointer(data.ConfigureType)), true);
  // 0x10: pointer
  if (data?.hChannel !== undefined) view.setBigUint64(16, data.hChannel === null ? 0n : util.toBigInt(util.toPointer(data.hChannel)), true);
  // 0x18: u32
  if (data?.SequenceNumber !== undefined) view.setUint32(24, Number(data.SequenceNumber), true);
  // 0x1c: pad4
  // 0x20: pointer
  if (data?.ReturnCode !== undefined) view.setBigUint64(32, data.ReturnCode === null ? 0n : util.toBigInt(util.toPointer(data.ReturnCode)), true);
  return buf;
}

export class D3DAUTHENTICATEDCHANNEL_CONFIGURE_OUTPUTView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get omac(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(0, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x08: pointer
  get ConfigureType(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(8, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x10: pointer
  get hChannel(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(16, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x18: u32
  get SequenceNumber(): number {
    return this.view.getUint32(24, true);
  }

  // 0x1c: pad4

  // 0x20: pointer
  get ReturnCode(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(32, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: pointer
  set omac(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(0, util.toBigInt(util.toPointer(value)), true);
  }

  // 0x08: pointer
  set ConfigureType(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(8, util.toBigInt(util.toPointer(value)), true);
  }

  // 0x10: pointer
  set hChannel(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(16, util.toBigInt(util.toPointer(value)), true);
  }

  // 0x18: u32
  set SequenceNumber(value: number) {
    this.view.setUint32(24, value, true);
  }

  // 0x1c: pad4

  // 0x20: pointer
  set ReturnCode(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(32, util.toBigInt(util.toPointer(value)), true);
  }
}

/**
 * Windows.Win32.Graphics.Direct3D9.D3DAUTHENTICATEDCHANNEL_CONFIGUREINITIALIZE (size: 16)
 */
export interface D3DAUTHENTICATEDCHANNEL_CONFIGUREINITIALIZE {
  /** Windows.Win32.Graphics.Direct3D9.D3DAUTHENTICATEDCHANNEL_CONFIGURE_INPUT */
  Parameters: Uint8Array | Deno.PointerValue | null;
  /** u32 */
  StartSequenceQuery: number;
  /** u32 */
  StartSequenceConfigure: number;
}

export const sizeofD3DAUTHENTICATEDCHANNEL_CONFIGUREINITIALIZE = 16;

export function allocD3DAUTHENTICATEDCHANNEL_CONFIGUREINITIALIZE(data?: Partial<D3DAUTHENTICATEDCHANNEL_CONFIGUREINITIALIZE>): Uint8Array {
  const buf = new Uint8Array(sizeofD3DAUTHENTICATEDCHANNEL_CONFIGUREINITIALIZE);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.Parameters !== undefined) view.setBigUint64(0, data.Parameters === null ? 0n : util.toBigInt(util.toPointer(data.Parameters)), true);
  // 0x08: u32
  if (data?.StartSequenceQuery !== undefined) view.setUint32(8, Number(data.StartSequenceQuery), true);
  // 0x0c: u32
  if (data?.StartSequenceConfigure !== undefined) view.setUint32(12, Number(data.StartSequenceConfigure), true);
  return buf;
}

export class D3DAUTHENTICATEDCHANNEL_CONFIGUREINITIALIZEView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get Parameters(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(0, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x08: u32
  get StartSequenceQuery(): number {
    return this.view.getUint32(8, true);
  }

  // 0x0c: u32
  get StartSequenceConfigure(): number {
    return this.view.getUint32(12, true);
  }

  // 0x00: pointer
  set Parameters(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(0, util.toBigInt(util.toPointer(value)), true);
  }

  // 0x08: u32
  set StartSequenceQuery(value: number) {
    this.view.setUint32(8, value, true);
  }

  // 0x0c: u32
  set StartSequenceConfigure(value: number) {
    this.view.setUint32(12, value, true);
  }
}

/**
 * Windows.Win32.Graphics.Direct3D9.D3DAUTHENTICATEDCHANNEL_CONFIGUREPROTECTION (size: 16)
 */
export interface D3DAUTHENTICATEDCHANNEL_CONFIGUREPROTECTION {
  /** Windows.Win32.Graphics.Direct3D9.D3DAUTHENTICATEDCHANNEL_CONFIGURE_INPUT */
  Parameters: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Graphics.Direct3D9.D3DAUTHENTICATEDCHANNEL_PROTECTION_FLAGS */
  Protections: Uint8Array | Deno.PointerValue | null;
}

export const sizeofD3DAUTHENTICATEDCHANNEL_CONFIGUREPROTECTION = 16;

export function allocD3DAUTHENTICATEDCHANNEL_CONFIGUREPROTECTION(data?: Partial<D3DAUTHENTICATEDCHANNEL_CONFIGUREPROTECTION>): Uint8Array {
  const buf = new Uint8Array(sizeofD3DAUTHENTICATEDCHANNEL_CONFIGUREPROTECTION);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.Parameters !== undefined) view.setBigUint64(0, data.Parameters === null ? 0n : util.toBigInt(util.toPointer(data.Parameters)), true);
  // 0x08: pointer
  if (data?.Protections !== undefined) view.setBigUint64(8, data.Protections === null ? 0n : util.toBigInt(util.toPointer(data.Protections)), true);
  return buf;
}

export class D3DAUTHENTICATEDCHANNEL_CONFIGUREPROTECTIONView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get Parameters(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(0, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x08: pointer
  get Protections(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(8, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: pointer
  set Parameters(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(0, util.toBigInt(util.toPointer(value)), true);
  }

  // 0x08: pointer
  set Protections(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(8, util.toBigInt(util.toPointer(value)), true);
  }
}

/**
 * Windows.Win32.Graphics.Direct3D9.D3DAUTHENTICATEDCHANNEL_CONFIGURECRYPTOSESSION (size: 32)
 */
export interface D3DAUTHENTICATEDCHANNEL_CONFIGURECRYPTOSESSION {
  /** Windows.Win32.Graphics.Direct3D9.D3DAUTHENTICATEDCHANNEL_CONFIGURE_INPUT */
  Parameters: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Foundation.HANDLE */
  DXVA2DecodeHandle: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Foundation.HANDLE */
  CryptoSessionHandle: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Foundation.HANDLE */
  DeviceHandle: Uint8Array | Deno.PointerValue | null;
}

export const sizeofD3DAUTHENTICATEDCHANNEL_CONFIGURECRYPTOSESSION = 32;

export function allocD3DAUTHENTICATEDCHANNEL_CONFIGURECRYPTOSESSION(data?: Partial<D3DAUTHENTICATEDCHANNEL_CONFIGURECRYPTOSESSION>): Uint8Array {
  const buf = new Uint8Array(sizeofD3DAUTHENTICATEDCHANNEL_CONFIGURECRYPTOSESSION);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.Parameters !== undefined) view.setBigUint64(0, data.Parameters === null ? 0n : util.toBigInt(util.toPointer(data.Parameters)), true);
  // 0x08: pointer
  if (data?.DXVA2DecodeHandle !== undefined) view.setBigUint64(8, data.DXVA2DecodeHandle === null ? 0n : util.toBigInt(util.toPointer(data.DXVA2DecodeHandle)), true);
  // 0x10: pointer
  if (data?.CryptoSessionHandle !== undefined) view.setBigUint64(16, data.CryptoSessionHandle === null ? 0n : util.toBigInt(util.toPointer(data.CryptoSessionHandle)), true);
  // 0x18: pointer
  if (data?.DeviceHandle !== undefined) view.setBigUint64(24, data.DeviceHandle === null ? 0n : util.toBigInt(util.toPointer(data.DeviceHandle)), true);
  return buf;
}

export class D3DAUTHENTICATEDCHANNEL_CONFIGURECRYPTOSESSIONView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get Parameters(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(0, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x08: pointer
  get DXVA2DecodeHandle(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(8, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x10: pointer
  get CryptoSessionHandle(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(16, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x18: pointer
  get DeviceHandle(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(24, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: pointer
  set Parameters(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(0, util.toBigInt(util.toPointer(value)), true);
  }

  // 0x08: pointer
  set DXVA2DecodeHandle(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(8, util.toBigInt(util.toPointer(value)), true);
  }

  // 0x10: pointer
  set CryptoSessionHandle(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(16, util.toBigInt(util.toPointer(value)), true);
  }

  // 0x18: pointer
  set DeviceHandle(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(24, util.toBigInt(util.toPointer(value)), true);
  }
}

/**
 * Windows.Win32.Graphics.Direct3D9.D3DAUTHENTICATEDCHANNEL_CONFIGURESHAREDRESOURCE (size: 32)
 */
export interface D3DAUTHENTICATEDCHANNEL_CONFIGURESHAREDRESOURCE {
  /** Windows.Win32.Graphics.Direct3D9.D3DAUTHENTICATEDCHANNEL_CONFIGURE_INPUT */
  Parameters: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Graphics.Direct3D9.D3DAUTHENTICATEDCHANNEL_PROCESSIDENTIFIERTYPE */
  ProcessIdentiferType: D3DAUTHENTICATEDCHANNEL_PROCESSIDENTIFIERTYPE;
  /** Windows.Win32.Foundation.HANDLE */
  ProcessHandle: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Foundation.BOOL */
  AllowAccess: boolean;
}

export const sizeofD3DAUTHENTICATEDCHANNEL_CONFIGURESHAREDRESOURCE = 32;

export function allocD3DAUTHENTICATEDCHANNEL_CONFIGURESHAREDRESOURCE(data?: Partial<D3DAUTHENTICATEDCHANNEL_CONFIGURESHAREDRESOURCE>): Uint8Array {
  const buf = new Uint8Array(sizeofD3DAUTHENTICATEDCHANNEL_CONFIGURESHAREDRESOURCE);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.Parameters !== undefined) view.setBigUint64(0, data.Parameters === null ? 0n : util.toBigInt(util.toPointer(data.Parameters)), true);
  // 0x08: i32
  if (data?.ProcessIdentiferType !== undefined) view.setInt32(8, Number(data.ProcessIdentiferType), true);
  // 0x0c: pad4
  // 0x10: pointer
  if (data?.ProcessHandle !== undefined) view.setBigUint64(16, data.ProcessHandle === null ? 0n : util.toBigInt(util.toPointer(data.ProcessHandle)), true);
  // 0x18: i32
  if (data?.AllowAccess !== undefined) view.setInt32(24, Number(data.AllowAccess), true);
  // 0x1c: pad4
  return buf;
}

export class D3DAUTHENTICATEDCHANNEL_CONFIGURESHAREDRESOURCEView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get Parameters(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(0, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x08: i32
  get ProcessIdentiferType(): number {
    return this.view.getInt32(8, true);
  }

  // 0x0c: pad4

  // 0x10: pointer
  get ProcessHandle(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(16, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x18: i32
  get AllowAccess(): number {
    return this.view.getInt32(24, true);
  }

  // 0x1c: pad4

  // 0x00: pointer
  set Parameters(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(0, util.toBigInt(util.toPointer(value)), true);
  }

  // 0x08: i32
  set ProcessIdentiferType(value: number) {
    this.view.setInt32(8, value, true);
  }

  // 0x0c: pad4

  // 0x10: pointer
  set ProcessHandle(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(16, util.toBigInt(util.toPointer(value)), true);
  }

  // 0x18: i32
  set AllowAccess(value: number) {
    this.view.setInt32(24, value, true);
  }

  // 0x1c: pad4
}

/**
 * Windows.Win32.Graphics.Direct3D9.D3DAUTHENTICATEDCHANNEL_CONFIGUREUNCOMPRESSEDENCRYPTION (size: 16)
 */
export interface D3DAUTHENTICATEDCHANNEL_CONFIGUREUNCOMPRESSEDENCRYPTION {
  /** Windows.Win32.Graphics.Direct3D9.D3DAUTHENTICATEDCHANNEL_CONFIGURE_INPUT */
  Parameters: Uint8Array | Deno.PointerValue | null;
  /** System.Guid */
  EncryptionGuid: Uint8Array | Deno.PointerValue | null;
}

export const sizeofD3DAUTHENTICATEDCHANNEL_CONFIGUREUNCOMPRESSEDENCRYPTION = 16;

export function allocD3DAUTHENTICATEDCHANNEL_CONFIGUREUNCOMPRESSEDENCRYPTION(data?: Partial<D3DAUTHENTICATEDCHANNEL_CONFIGUREUNCOMPRESSEDENCRYPTION>): Uint8Array {
  const buf = new Uint8Array(sizeofD3DAUTHENTICATEDCHANNEL_CONFIGUREUNCOMPRESSEDENCRYPTION);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.Parameters !== undefined) view.setBigUint64(0, data.Parameters === null ? 0n : util.toBigInt(util.toPointer(data.Parameters)), true);
  // 0x08: pointer
  if (data?.EncryptionGuid !== undefined) view.setBigUint64(8, data.EncryptionGuid === null ? 0n : util.toBigInt(util.toPointer(data.EncryptionGuid)), true);
  return buf;
}

export class D3DAUTHENTICATEDCHANNEL_CONFIGUREUNCOMPRESSEDENCRYPTIONView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get Parameters(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(0, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x08: pointer
  get EncryptionGuid(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(8, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: pointer
  set Parameters(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(0, util.toBigInt(util.toPointer(value)), true);
  }

  // 0x08: pointer
  set EncryptionGuid(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(8, util.toBigInt(util.toPointer(value)), true);
  }
}

/**
 * Windows.Win32.Graphics.Direct3D9.D3DENCRYPTED_BLOCK_INFO (size: 16)
 */
export interface D3DENCRYPTED_BLOCK_INFO {
  /** u32 */
  NumEncryptedBytesAtBeginning: number;
  /** u32 */
  NumBytesInSkipPattern: number;
  /** u32 */
  NumBytesInEncryptPattern: number;
}

export const sizeofD3DENCRYPTED_BLOCK_INFO = 16;

export function allocD3DENCRYPTED_BLOCK_INFO(data?: Partial<D3DENCRYPTED_BLOCK_INFO>): Uint8Array {
  const buf = new Uint8Array(sizeofD3DENCRYPTED_BLOCK_INFO);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.NumEncryptedBytesAtBeginning !== undefined) view.setUint32(0, Number(data.NumEncryptedBytesAtBeginning), true);
  // 0x04: u32
  if (data?.NumBytesInSkipPattern !== undefined) view.setUint32(4, Number(data.NumBytesInSkipPattern), true);
  // 0x08: u32
  if (data?.NumBytesInEncryptPattern !== undefined) view.setUint32(8, Number(data.NumBytesInEncryptPattern), true);
  // 0x0c: pad4
  return buf;
}

export class D3DENCRYPTED_BLOCK_INFOView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get NumEncryptedBytesAtBeginning(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: u32
  get NumBytesInSkipPattern(): number {
    return this.view.getUint32(4, true);
  }

  // 0x08: u32
  get NumBytesInEncryptPattern(): number {
    return this.view.getUint32(8, true);
  }

  // 0x0c: pad4

  // 0x00: u32
  set NumEncryptedBytesAtBeginning(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: u32
  set NumBytesInSkipPattern(value: number) {
    this.view.setUint32(4, value, true);
  }

  // 0x08: u32
  set NumBytesInEncryptPattern(value: number) {
    this.view.setUint32(8, value, true);
  }

  // 0x0c: pad4
}

/**
 * Windows.Win32.Graphics.Direct3D9.D3DVSHADERCAPS2_0 (size: 16)
 */
export interface D3DVSHADERCAPS2_0 {
  /** u32 */
  Caps: number;
  /** i32 */
  DynamicFlowControlDepth: number;
  /** i32 */
  NumTemps: number;
  /** i32 */
  StaticFlowControlDepth: number;
}

export const sizeofD3DVSHADERCAPS2_0 = 16;

export function allocD3DVSHADERCAPS2_0(data?: Partial<D3DVSHADERCAPS2_0>): Uint8Array {
  const buf = new Uint8Array(sizeofD3DVSHADERCAPS2_0);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.Caps !== undefined) view.setUint32(0, Number(data.Caps), true);
  // 0x04: i32
  if (data?.DynamicFlowControlDepth !== undefined) view.setInt32(4, Number(data.DynamicFlowControlDepth), true);
  // 0x08: i32
  if (data?.NumTemps !== undefined) view.setInt32(8, Number(data.NumTemps), true);
  // 0x0c: i32
  if (data?.StaticFlowControlDepth !== undefined) view.setInt32(12, Number(data.StaticFlowControlDepth), true);
  return buf;
}

export class D3DVSHADERCAPS2_0View {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get Caps(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: i32
  get DynamicFlowControlDepth(): number {
    return this.view.getInt32(4, true);
  }

  // 0x08: i32
  get NumTemps(): number {
    return this.view.getInt32(8, true);
  }

  // 0x0c: i32
  get StaticFlowControlDepth(): number {
    return this.view.getInt32(12, true);
  }

  // 0x00: u32
  set Caps(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: i32
  set DynamicFlowControlDepth(value: number) {
    this.view.setInt32(4, value, true);
  }

  // 0x08: i32
  set NumTemps(value: number) {
    this.view.setInt32(8, value, true);
  }

  // 0x0c: i32
  set StaticFlowControlDepth(value: number) {
    this.view.setInt32(12, value, true);
  }
}

/**
 * Windows.Win32.Graphics.Direct3D9.D3DPSHADERCAPS2_0 (size: 24)
 */
export interface D3DPSHADERCAPS2_0 {
  /** u32 */
  Caps: number;
  /** i32 */
  DynamicFlowControlDepth: number;
  /** i32 */
  NumTemps: number;
  /** i32 */
  StaticFlowControlDepth: number;
  /** i32 */
  NumInstructionSlots: number;
}

export const sizeofD3DPSHADERCAPS2_0 = 24;

export function allocD3DPSHADERCAPS2_0(data?: Partial<D3DPSHADERCAPS2_0>): Uint8Array {
  const buf = new Uint8Array(sizeofD3DPSHADERCAPS2_0);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.Caps !== undefined) view.setUint32(0, Number(data.Caps), true);
  // 0x04: i32
  if (data?.DynamicFlowControlDepth !== undefined) view.setInt32(4, Number(data.DynamicFlowControlDepth), true);
  // 0x08: i32
  if (data?.NumTemps !== undefined) view.setInt32(8, Number(data.NumTemps), true);
  // 0x0c: i32
  if (data?.StaticFlowControlDepth !== undefined) view.setInt32(12, Number(data.StaticFlowControlDepth), true);
  // 0x10: i32
  if (data?.NumInstructionSlots !== undefined) view.setInt32(16, Number(data.NumInstructionSlots), true);
  // 0x14: pad4
  return buf;
}

export class D3DPSHADERCAPS2_0View {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get Caps(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: i32
  get DynamicFlowControlDepth(): number {
    return this.view.getInt32(4, true);
  }

  // 0x08: i32
  get NumTemps(): number {
    return this.view.getInt32(8, true);
  }

  // 0x0c: i32
  get StaticFlowControlDepth(): number {
    return this.view.getInt32(12, true);
  }

  // 0x10: i32
  get NumInstructionSlots(): number {
    return this.view.getInt32(16, true);
  }

  // 0x14: pad4

  // 0x00: u32
  set Caps(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: i32
  set DynamicFlowControlDepth(value: number) {
    this.view.setInt32(4, value, true);
  }

  // 0x08: i32
  set NumTemps(value: number) {
    this.view.setInt32(8, value, true);
  }

  // 0x0c: i32
  set StaticFlowControlDepth(value: number) {
    this.view.setInt32(12, value, true);
  }

  // 0x10: i32
  set NumInstructionSlots(value: number) {
    this.view.setInt32(16, value, true);
  }

  // 0x14: pad4
}

/**
 * Windows.Win32.Graphics.Direct3D9.D3DCAPS9 (size: 288)
 */
export interface D3DCAPS9 {
  /** Windows.Win32.Graphics.Direct3D9.D3DDEVTYPE */
  DeviceType: D3DDEVTYPE;
  /** u32 */
  AdapterOrdinal: number;
  /** u32 */
  Caps: number;
  /** u32 */
  Caps2: number;
  /** u32 */
  Caps3: number;
  /** u32 */
  PresentationIntervals: number;
  /** u32 */
  CursorCaps: number;
  /** u32 */
  DevCaps: number;
  /** u32 */
  PrimitiveMiscCaps: number;
  /** u32 */
  RasterCaps: number;
  /** u32 */
  ZCmpCaps: number;
  /** u32 */
  SrcBlendCaps: number;
  /** u32 */
  DestBlendCaps: number;
  /** u32 */
  AlphaCmpCaps: number;
  /** u32 */
  ShadeCaps: number;
  /** u32 */
  TextureCaps: number;
  /** u32 */
  TextureFilterCaps: number;
  /** u32 */
  CubeTextureFilterCaps: number;
  /** u32 */
  VolumeTextureFilterCaps: number;
  /** u32 */
  TextureAddressCaps: number;
  /** u32 */
  VolumeTextureAddressCaps: number;
  /** u32 */
  LineCaps: number;
  /** u32 */
  MaxTextureWidth: number;
  /** u32 */
  MaxTextureHeight: number;
  /** u32 */
  MaxVolumeExtent: number;
  /** u32 */
  MaxTextureRepeat: number;
  /** u32 */
  MaxTextureAspectRatio: number;
  /** u32 */
  MaxAnisotropy: number;
  /** f32 */
  MaxVertexW: number;
  /** f32 */
  GuardBandLeft: number;
  /** f32 */
  GuardBandTop: number;
  /** f32 */
  GuardBandRight: number;
  /** f32 */
  GuardBandBottom: number;
  /** f32 */
  ExtentsAdjust: number;
  /** u32 */
  StencilCaps: number;
  /** u32 */
  FVFCaps: number;
  /** u32 */
  TextureOpCaps: number;
  /** u32 */
  MaxTextureBlendStages: number;
  /** u32 */
  MaxSimultaneousTextures: number;
  /** u32 */
  VertexProcessingCaps: number;
  /** u32 */
  MaxActiveLights: number;
  /** u32 */
  MaxUserClipPlanes: number;
  /** u32 */
  MaxVertexBlendMatrices: number;
  /** u32 */
  MaxVertexBlendMatrixIndex: number;
  /** f32 */
  MaxPointSize: number;
  /** u32 */
  MaxPrimitiveCount: number;
  /** u32 */
  MaxVertexIndex: number;
  /** u32 */
  MaxStreams: number;
  /** u32 */
  MaxStreamStride: number;
  /** u32 */
  VertexShaderVersion: number;
  /** u32 */
  MaxVertexShaderConst: number;
  /** u32 */
  PixelShaderVersion: number;
  /** f32 */
  PixelShader1xMaxValue: number;
  /** u32 */
  DevCaps2: number;
  /** f32 */
  MaxNpatchTessellationLevel: number;
  /** u32 */
  Reserved5: number;
  /** u32 */
  MasterAdapterOrdinal: number;
  /** u32 */
  AdapterOrdinalInGroup: number;
  /** u32 */
  NumberOfAdaptersInGroup: number;
  /** u32 */
  DeclTypes: number;
  /** u32 */
  NumSimultaneousRTs: number;
  /** u32 */
  StretchRectFilterCaps: number;
  /** Windows.Win32.Graphics.Direct3D9.D3DVSHADERCAPS2_0 */
  VS20Caps: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Graphics.Direct3D9.D3DPSHADERCAPS2_0 */
  PS20Caps: Uint8Array | Deno.PointerValue | null;
  /** u32 */
  VertexTextureFilterCaps: number;
  /** u32 */
  MaxVShaderInstructionsExecuted: number;
  /** u32 */
  MaxPShaderInstructionsExecuted: number;
  /** u32 */
  MaxVertexShader30InstructionSlots: number;
  /** u32 */
  MaxPixelShader30InstructionSlots: number;
}

export const sizeofD3DCAPS9 = 288;

export function allocD3DCAPS9(data?: Partial<D3DCAPS9>): Uint8Array {
  const buf = new Uint8Array(sizeofD3DCAPS9);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.DeviceType !== undefined) view.setUint32(0, Number(data.DeviceType), true);
  // 0x04: u32
  if (data?.AdapterOrdinal !== undefined) view.setUint32(4, Number(data.AdapterOrdinal), true);
  // 0x08: u32
  if (data?.Caps !== undefined) view.setUint32(8, Number(data.Caps), true);
  // 0x0c: u32
  if (data?.Caps2 !== undefined) view.setUint32(12, Number(data.Caps2), true);
  // 0x10: u32
  if (data?.Caps3 !== undefined) view.setUint32(16, Number(data.Caps3), true);
  // 0x14: u32
  if (data?.PresentationIntervals !== undefined) view.setUint32(20, Number(data.PresentationIntervals), true);
  // 0x18: u32
  if (data?.CursorCaps !== undefined) view.setUint32(24, Number(data.CursorCaps), true);
  // 0x1c: u32
  if (data?.DevCaps !== undefined) view.setUint32(28, Number(data.DevCaps), true);
  // 0x20: u32
  if (data?.PrimitiveMiscCaps !== undefined) view.setUint32(32, Number(data.PrimitiveMiscCaps), true);
  // 0x24: u32
  if (data?.RasterCaps !== undefined) view.setUint32(36, Number(data.RasterCaps), true);
  // 0x28: u32
  if (data?.ZCmpCaps !== undefined) view.setUint32(40, Number(data.ZCmpCaps), true);
  // 0x2c: u32
  if (data?.SrcBlendCaps !== undefined) view.setUint32(44, Number(data.SrcBlendCaps), true);
  // 0x30: u32
  if (data?.DestBlendCaps !== undefined) view.setUint32(48, Number(data.DestBlendCaps), true);
  // 0x34: u32
  if (data?.AlphaCmpCaps !== undefined) view.setUint32(52, Number(data.AlphaCmpCaps), true);
  // 0x38: u32
  if (data?.ShadeCaps !== undefined) view.setUint32(56, Number(data.ShadeCaps), true);
  // 0x3c: u32
  if (data?.TextureCaps !== undefined) view.setUint32(60, Number(data.TextureCaps), true);
  // 0x40: u32
  if (data?.TextureFilterCaps !== undefined) view.setUint32(64, Number(data.TextureFilterCaps), true);
  // 0x44: u32
  if (data?.CubeTextureFilterCaps !== undefined) view.setUint32(68, Number(data.CubeTextureFilterCaps), true);
  // 0x48: u32
  if (data?.VolumeTextureFilterCaps !== undefined) view.setUint32(72, Number(data.VolumeTextureFilterCaps), true);
  // 0x4c: u32
  if (data?.TextureAddressCaps !== undefined) view.setUint32(76, Number(data.TextureAddressCaps), true);
  // 0x50: u32
  if (data?.VolumeTextureAddressCaps !== undefined) view.setUint32(80, Number(data.VolumeTextureAddressCaps), true);
  // 0x54: u32
  if (data?.LineCaps !== undefined) view.setUint32(84, Number(data.LineCaps), true);
  // 0x58: u32
  if (data?.MaxTextureWidth !== undefined) view.setUint32(88, Number(data.MaxTextureWidth), true);
  // 0x5c: u32
  if (data?.MaxTextureHeight !== undefined) view.setUint32(92, Number(data.MaxTextureHeight), true);
  // 0x60: u32
  if (data?.MaxVolumeExtent !== undefined) view.setUint32(96, Number(data.MaxVolumeExtent), true);
  // 0x64: u32
  if (data?.MaxTextureRepeat !== undefined) view.setUint32(100, Number(data.MaxTextureRepeat), true);
  // 0x68: u32
  if (data?.MaxTextureAspectRatio !== undefined) view.setUint32(104, Number(data.MaxTextureAspectRatio), true);
  // 0x6c: u32
  if (data?.MaxAnisotropy !== undefined) view.setUint32(108, Number(data.MaxAnisotropy), true);
  // 0x70: f32
  if (data?.MaxVertexW !== undefined) view.setFloat32(112, Number(data.MaxVertexW), true);
  // 0x74: f32
  if (data?.GuardBandLeft !== undefined) view.setFloat32(116, Number(data.GuardBandLeft), true);
  // 0x78: f32
  if (data?.GuardBandTop !== undefined) view.setFloat32(120, Number(data.GuardBandTop), true);
  // 0x7c: f32
  if (data?.GuardBandRight !== undefined) view.setFloat32(124, Number(data.GuardBandRight), true);
  // 0x80: f32
  if (data?.GuardBandBottom !== undefined) view.setFloat32(128, Number(data.GuardBandBottom), true);
  // 0x84: f32
  if (data?.ExtentsAdjust !== undefined) view.setFloat32(132, Number(data.ExtentsAdjust), true);
  // 0x88: u32
  if (data?.StencilCaps !== undefined) view.setUint32(136, Number(data.StencilCaps), true);
  // 0x8c: u32
  if (data?.FVFCaps !== undefined) view.setUint32(140, Number(data.FVFCaps), true);
  // 0x90: u32
  if (data?.TextureOpCaps !== undefined) view.setUint32(144, Number(data.TextureOpCaps), true);
  // 0x94: u32
  if (data?.MaxTextureBlendStages !== undefined) view.setUint32(148, Number(data.MaxTextureBlendStages), true);
  // 0x98: u32
  if (data?.MaxSimultaneousTextures !== undefined) view.setUint32(152, Number(data.MaxSimultaneousTextures), true);
  // 0x9c: u32
  if (data?.VertexProcessingCaps !== undefined) view.setUint32(156, Number(data.VertexProcessingCaps), true);
  // 0xa0: u32
  if (data?.MaxActiveLights !== undefined) view.setUint32(160, Number(data.MaxActiveLights), true);
  // 0xa4: u32
  if (data?.MaxUserClipPlanes !== undefined) view.setUint32(164, Number(data.MaxUserClipPlanes), true);
  // 0xa8: u32
  if (data?.MaxVertexBlendMatrices !== undefined) view.setUint32(168, Number(data.MaxVertexBlendMatrices), true);
  // 0xac: u32
  if (data?.MaxVertexBlendMatrixIndex !== undefined) view.setUint32(172, Number(data.MaxVertexBlendMatrixIndex), true);
  // 0xb0: f32
  if (data?.MaxPointSize !== undefined) view.setFloat32(176, Number(data.MaxPointSize), true);
  // 0xb4: u32
  if (data?.MaxPrimitiveCount !== undefined) view.setUint32(180, Number(data.MaxPrimitiveCount), true);
  // 0xb8: u32
  if (data?.MaxVertexIndex !== undefined) view.setUint32(184, Number(data.MaxVertexIndex), true);
  // 0xbc: u32
  if (data?.MaxStreams !== undefined) view.setUint32(188, Number(data.MaxStreams), true);
  // 0xc0: u32
  if (data?.MaxStreamStride !== undefined) view.setUint32(192, Number(data.MaxStreamStride), true);
  // 0xc4: u32
  if (data?.VertexShaderVersion !== undefined) view.setUint32(196, Number(data.VertexShaderVersion), true);
  // 0xc8: u32
  if (data?.MaxVertexShaderConst !== undefined) view.setUint32(200, Number(data.MaxVertexShaderConst), true);
  // 0xcc: u32
  if (data?.PixelShaderVersion !== undefined) view.setUint32(204, Number(data.PixelShaderVersion), true);
  // 0xd0: f32
  if (data?.PixelShader1xMaxValue !== undefined) view.setFloat32(208, Number(data.PixelShader1xMaxValue), true);
  // 0xd4: u32
  if (data?.DevCaps2 !== undefined) view.setUint32(212, Number(data.DevCaps2), true);
  // 0xd8: f32
  if (data?.MaxNpatchTessellationLevel !== undefined) view.setFloat32(216, Number(data.MaxNpatchTessellationLevel), true);
  // 0xdc: u32
  if (data?.Reserved5 !== undefined) view.setUint32(220, Number(data.Reserved5), true);
  // 0xe0: u32
  if (data?.MasterAdapterOrdinal !== undefined) view.setUint32(224, Number(data.MasterAdapterOrdinal), true);
  // 0xe4: u32
  if (data?.AdapterOrdinalInGroup !== undefined) view.setUint32(228, Number(data.AdapterOrdinalInGroup), true);
  // 0xe8: u32
  if (data?.NumberOfAdaptersInGroup !== undefined) view.setUint32(232, Number(data.NumberOfAdaptersInGroup), true);
  // 0xec: u32
  if (data?.DeclTypes !== undefined) view.setUint32(236, Number(data.DeclTypes), true);
  // 0xf0: u32
  if (data?.NumSimultaneousRTs !== undefined) view.setUint32(240, Number(data.NumSimultaneousRTs), true);
  // 0xf4: u32
  if (data?.StretchRectFilterCaps !== undefined) view.setUint32(244, Number(data.StretchRectFilterCaps), true);
  // 0xf8: pointer
  if (data?.VS20Caps !== undefined) view.setBigUint64(248, data.VS20Caps === null ? 0n : util.toBigInt(util.toPointer(data.VS20Caps)), true);
  // 0x100: pointer
  if (data?.PS20Caps !== undefined) view.setBigUint64(256, data.PS20Caps === null ? 0n : util.toBigInt(util.toPointer(data.PS20Caps)), true);
  // 0x108: u32
  if (data?.VertexTextureFilterCaps !== undefined) view.setUint32(264, Number(data.VertexTextureFilterCaps), true);
  // 0x10c: u32
  if (data?.MaxVShaderInstructionsExecuted !== undefined) view.setUint32(268, Number(data.MaxVShaderInstructionsExecuted), true);
  // 0x110: u32
  if (data?.MaxPShaderInstructionsExecuted !== undefined) view.setUint32(272, Number(data.MaxPShaderInstructionsExecuted), true);
  // 0x114: u32
  if (data?.MaxVertexShader30InstructionSlots !== undefined) view.setUint32(276, Number(data.MaxVertexShader30InstructionSlots), true);
  // 0x118: u32
  if (data?.MaxPixelShader30InstructionSlots !== undefined) view.setUint32(280, Number(data.MaxPixelShader30InstructionSlots), true);
  // 0x11c: pad4
  return buf;
}

export class D3DCAPS9View {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get DeviceType(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: u32
  get AdapterOrdinal(): number {
    return this.view.getUint32(4, true);
  }

  // 0x08: u32
  get Caps(): number {
    return this.view.getUint32(8, true);
  }

  // 0x0c: u32
  get Caps2(): number {
    return this.view.getUint32(12, true);
  }

  // 0x10: u32
  get Caps3(): number {
    return this.view.getUint32(16, true);
  }

  // 0x14: u32
  get PresentationIntervals(): number {
    return this.view.getUint32(20, true);
  }

  // 0x18: u32
  get CursorCaps(): number {
    return this.view.getUint32(24, true);
  }

  // 0x1c: u32
  get DevCaps(): number {
    return this.view.getUint32(28, true);
  }

  // 0x20: u32
  get PrimitiveMiscCaps(): number {
    return this.view.getUint32(32, true);
  }

  // 0x24: u32
  get RasterCaps(): number {
    return this.view.getUint32(36, true);
  }

  // 0x28: u32
  get ZCmpCaps(): number {
    return this.view.getUint32(40, true);
  }

  // 0x2c: u32
  get SrcBlendCaps(): number {
    return this.view.getUint32(44, true);
  }

  // 0x30: u32
  get DestBlendCaps(): number {
    return this.view.getUint32(48, true);
  }

  // 0x34: u32
  get AlphaCmpCaps(): number {
    return this.view.getUint32(52, true);
  }

  // 0x38: u32
  get ShadeCaps(): number {
    return this.view.getUint32(56, true);
  }

  // 0x3c: u32
  get TextureCaps(): number {
    return this.view.getUint32(60, true);
  }

  // 0x40: u32
  get TextureFilterCaps(): number {
    return this.view.getUint32(64, true);
  }

  // 0x44: u32
  get CubeTextureFilterCaps(): number {
    return this.view.getUint32(68, true);
  }

  // 0x48: u32
  get VolumeTextureFilterCaps(): number {
    return this.view.getUint32(72, true);
  }

  // 0x4c: u32
  get TextureAddressCaps(): number {
    return this.view.getUint32(76, true);
  }

  // 0x50: u32
  get VolumeTextureAddressCaps(): number {
    return this.view.getUint32(80, true);
  }

  // 0x54: u32
  get LineCaps(): number {
    return this.view.getUint32(84, true);
  }

  // 0x58: u32
  get MaxTextureWidth(): number {
    return this.view.getUint32(88, true);
  }

  // 0x5c: u32
  get MaxTextureHeight(): number {
    return this.view.getUint32(92, true);
  }

  // 0x60: u32
  get MaxVolumeExtent(): number {
    return this.view.getUint32(96, true);
  }

  // 0x64: u32
  get MaxTextureRepeat(): number {
    return this.view.getUint32(100, true);
  }

  // 0x68: u32
  get MaxTextureAspectRatio(): number {
    return this.view.getUint32(104, true);
  }

  // 0x6c: u32
  get MaxAnisotropy(): number {
    return this.view.getUint32(108, true);
  }

  // 0x70: f32
  get MaxVertexW(): number {
    return this.view.getFloat32(112, true);
  }

  // 0x74: f32
  get GuardBandLeft(): number {
    return this.view.getFloat32(116, true);
  }

  // 0x78: f32
  get GuardBandTop(): number {
    return this.view.getFloat32(120, true);
  }

  // 0x7c: f32
  get GuardBandRight(): number {
    return this.view.getFloat32(124, true);
  }

  // 0x80: f32
  get GuardBandBottom(): number {
    return this.view.getFloat32(128, true);
  }

  // 0x84: f32
  get ExtentsAdjust(): number {
    return this.view.getFloat32(132, true);
  }

  // 0x88: u32
  get StencilCaps(): number {
    return this.view.getUint32(136, true);
  }

  // 0x8c: u32
  get FVFCaps(): number {
    return this.view.getUint32(140, true);
  }

  // 0x90: u32
  get TextureOpCaps(): number {
    return this.view.getUint32(144, true);
  }

  // 0x94: u32
  get MaxTextureBlendStages(): number {
    return this.view.getUint32(148, true);
  }

  // 0x98: u32
  get MaxSimultaneousTextures(): number {
    return this.view.getUint32(152, true);
  }

  // 0x9c: u32
  get VertexProcessingCaps(): number {
    return this.view.getUint32(156, true);
  }

  // 0xa0: u32
  get MaxActiveLights(): number {
    return this.view.getUint32(160, true);
  }

  // 0xa4: u32
  get MaxUserClipPlanes(): number {
    return this.view.getUint32(164, true);
  }

  // 0xa8: u32
  get MaxVertexBlendMatrices(): number {
    return this.view.getUint32(168, true);
  }

  // 0xac: u32
  get MaxVertexBlendMatrixIndex(): number {
    return this.view.getUint32(172, true);
  }

  // 0xb0: f32
  get MaxPointSize(): number {
    return this.view.getFloat32(176, true);
  }

  // 0xb4: u32
  get MaxPrimitiveCount(): number {
    return this.view.getUint32(180, true);
  }

  // 0xb8: u32
  get MaxVertexIndex(): number {
    return this.view.getUint32(184, true);
  }

  // 0xbc: u32
  get MaxStreams(): number {
    return this.view.getUint32(188, true);
  }

  // 0xc0: u32
  get MaxStreamStride(): number {
    return this.view.getUint32(192, true);
  }

  // 0xc4: u32
  get VertexShaderVersion(): number {
    return this.view.getUint32(196, true);
  }

  // 0xc8: u32
  get MaxVertexShaderConst(): number {
    return this.view.getUint32(200, true);
  }

  // 0xcc: u32
  get PixelShaderVersion(): number {
    return this.view.getUint32(204, true);
  }

  // 0xd0: f32
  get PixelShader1xMaxValue(): number {
    return this.view.getFloat32(208, true);
  }

  // 0xd4: u32
  get DevCaps2(): number {
    return this.view.getUint32(212, true);
  }

  // 0xd8: f32
  get MaxNpatchTessellationLevel(): number {
    return this.view.getFloat32(216, true);
  }

  // 0xdc: u32
  get Reserved5(): number {
    return this.view.getUint32(220, true);
  }

  // 0xe0: u32
  get MasterAdapterOrdinal(): number {
    return this.view.getUint32(224, true);
  }

  // 0xe4: u32
  get AdapterOrdinalInGroup(): number {
    return this.view.getUint32(228, true);
  }

  // 0xe8: u32
  get NumberOfAdaptersInGroup(): number {
    return this.view.getUint32(232, true);
  }

  // 0xec: u32
  get DeclTypes(): number {
    return this.view.getUint32(236, true);
  }

  // 0xf0: u32
  get NumSimultaneousRTs(): number {
    return this.view.getUint32(240, true);
  }

  // 0xf4: u32
  get StretchRectFilterCaps(): number {
    return this.view.getUint32(244, true);
  }

  // 0xf8: pointer
  get VS20Caps(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(248, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x100: pointer
  get PS20Caps(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(256, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x108: u32
  get VertexTextureFilterCaps(): number {
    return this.view.getUint32(264, true);
  }

  // 0x10c: u32
  get MaxVShaderInstructionsExecuted(): number {
    return this.view.getUint32(268, true);
  }

  // 0x110: u32
  get MaxPShaderInstructionsExecuted(): number {
    return this.view.getUint32(272, true);
  }

  // 0x114: u32
  get MaxVertexShader30InstructionSlots(): number {
    return this.view.getUint32(276, true);
  }

  // 0x118: u32
  get MaxPixelShader30InstructionSlots(): number {
    return this.view.getUint32(280, true);
  }

  // 0x11c: pad4

  // 0x00: u32
  set DeviceType(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: u32
  set AdapterOrdinal(value: number) {
    this.view.setUint32(4, value, true);
  }

  // 0x08: u32
  set Caps(value: number) {
    this.view.setUint32(8, value, true);
  }

  // 0x0c: u32
  set Caps2(value: number) {
    this.view.setUint32(12, value, true);
  }

  // 0x10: u32
  set Caps3(value: number) {
    this.view.setUint32(16, value, true);
  }

  // 0x14: u32
  set PresentationIntervals(value: number) {
    this.view.setUint32(20, value, true);
  }

  // 0x18: u32
  set CursorCaps(value: number) {
    this.view.setUint32(24, value, true);
  }

  // 0x1c: u32
  set DevCaps(value: number) {
    this.view.setUint32(28, value, true);
  }

  // 0x20: u32
  set PrimitiveMiscCaps(value: number) {
    this.view.setUint32(32, value, true);
  }

  // 0x24: u32
  set RasterCaps(value: number) {
    this.view.setUint32(36, value, true);
  }

  // 0x28: u32
  set ZCmpCaps(value: number) {
    this.view.setUint32(40, value, true);
  }

  // 0x2c: u32
  set SrcBlendCaps(value: number) {
    this.view.setUint32(44, value, true);
  }

  // 0x30: u32
  set DestBlendCaps(value: number) {
    this.view.setUint32(48, value, true);
  }

  // 0x34: u32
  set AlphaCmpCaps(value: number) {
    this.view.setUint32(52, value, true);
  }

  // 0x38: u32
  set ShadeCaps(value: number) {
    this.view.setUint32(56, value, true);
  }

  // 0x3c: u32
  set TextureCaps(value: number) {
    this.view.setUint32(60, value, true);
  }

  // 0x40: u32
  set TextureFilterCaps(value: number) {
    this.view.setUint32(64, value, true);
  }

  // 0x44: u32
  set CubeTextureFilterCaps(value: number) {
    this.view.setUint32(68, value, true);
  }

  // 0x48: u32
  set VolumeTextureFilterCaps(value: number) {
    this.view.setUint32(72, value, true);
  }

  // 0x4c: u32
  set TextureAddressCaps(value: number) {
    this.view.setUint32(76, value, true);
  }

  // 0x50: u32
  set VolumeTextureAddressCaps(value: number) {
    this.view.setUint32(80, value, true);
  }

  // 0x54: u32
  set LineCaps(value: number) {
    this.view.setUint32(84, value, true);
  }

  // 0x58: u32
  set MaxTextureWidth(value: number) {
    this.view.setUint32(88, value, true);
  }

  // 0x5c: u32
  set MaxTextureHeight(value: number) {
    this.view.setUint32(92, value, true);
  }

  // 0x60: u32
  set MaxVolumeExtent(value: number) {
    this.view.setUint32(96, value, true);
  }

  // 0x64: u32
  set MaxTextureRepeat(value: number) {
    this.view.setUint32(100, value, true);
  }

  // 0x68: u32
  set MaxTextureAspectRatio(value: number) {
    this.view.setUint32(104, value, true);
  }

  // 0x6c: u32
  set MaxAnisotropy(value: number) {
    this.view.setUint32(108, value, true);
  }

  // 0x70: f32
  set MaxVertexW(value: number) {
    this.view.setFloat32(112, value, true);
  }

  // 0x74: f32
  set GuardBandLeft(value: number) {
    this.view.setFloat32(116, value, true);
  }

  // 0x78: f32
  set GuardBandTop(value: number) {
    this.view.setFloat32(120, value, true);
  }

  // 0x7c: f32
  set GuardBandRight(value: number) {
    this.view.setFloat32(124, value, true);
  }

  // 0x80: f32
  set GuardBandBottom(value: number) {
    this.view.setFloat32(128, value, true);
  }

  // 0x84: f32
  set ExtentsAdjust(value: number) {
    this.view.setFloat32(132, value, true);
  }

  // 0x88: u32
  set StencilCaps(value: number) {
    this.view.setUint32(136, value, true);
  }

  // 0x8c: u32
  set FVFCaps(value: number) {
    this.view.setUint32(140, value, true);
  }

  // 0x90: u32
  set TextureOpCaps(value: number) {
    this.view.setUint32(144, value, true);
  }

  // 0x94: u32
  set MaxTextureBlendStages(value: number) {
    this.view.setUint32(148, value, true);
  }

  // 0x98: u32
  set MaxSimultaneousTextures(value: number) {
    this.view.setUint32(152, value, true);
  }

  // 0x9c: u32
  set VertexProcessingCaps(value: number) {
    this.view.setUint32(156, value, true);
  }

  // 0xa0: u32
  set MaxActiveLights(value: number) {
    this.view.setUint32(160, value, true);
  }

  // 0xa4: u32
  set MaxUserClipPlanes(value: number) {
    this.view.setUint32(164, value, true);
  }

  // 0xa8: u32
  set MaxVertexBlendMatrices(value: number) {
    this.view.setUint32(168, value, true);
  }

  // 0xac: u32
  set MaxVertexBlendMatrixIndex(value: number) {
    this.view.setUint32(172, value, true);
  }

  // 0xb0: f32
  set MaxPointSize(value: number) {
    this.view.setFloat32(176, value, true);
  }

  // 0xb4: u32
  set MaxPrimitiveCount(value: number) {
    this.view.setUint32(180, value, true);
  }

  // 0xb8: u32
  set MaxVertexIndex(value: number) {
    this.view.setUint32(184, value, true);
  }

  // 0xbc: u32
  set MaxStreams(value: number) {
    this.view.setUint32(188, value, true);
  }

  // 0xc0: u32
  set MaxStreamStride(value: number) {
    this.view.setUint32(192, value, true);
  }

  // 0xc4: u32
  set VertexShaderVersion(value: number) {
    this.view.setUint32(196, value, true);
  }

  // 0xc8: u32
  set MaxVertexShaderConst(value: number) {
    this.view.setUint32(200, value, true);
  }

  // 0xcc: u32
  set PixelShaderVersion(value: number) {
    this.view.setUint32(204, value, true);
  }

  // 0xd0: f32
  set PixelShader1xMaxValue(value: number) {
    this.view.setFloat32(208, value, true);
  }

  // 0xd4: u32
  set DevCaps2(value: number) {
    this.view.setUint32(212, value, true);
  }

  // 0xd8: f32
  set MaxNpatchTessellationLevel(value: number) {
    this.view.setFloat32(216, value, true);
  }

  // 0xdc: u32
  set Reserved5(value: number) {
    this.view.setUint32(220, value, true);
  }

  // 0xe0: u32
  set MasterAdapterOrdinal(value: number) {
    this.view.setUint32(224, value, true);
  }

  // 0xe4: u32
  set AdapterOrdinalInGroup(value: number) {
    this.view.setUint32(228, value, true);
  }

  // 0xe8: u32
  set NumberOfAdaptersInGroup(value: number) {
    this.view.setUint32(232, value, true);
  }

  // 0xec: u32
  set DeclTypes(value: number) {
    this.view.setUint32(236, value, true);
  }

  // 0xf0: u32
  set NumSimultaneousRTs(value: number) {
    this.view.setUint32(240, value, true);
  }

  // 0xf4: u32
  set StretchRectFilterCaps(value: number) {
    this.view.setUint32(244, value, true);
  }

  // 0xf8: pointer
  set VS20Caps(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(248, util.toBigInt(util.toPointer(value)), true);
  }

  // 0x100: pointer
  set PS20Caps(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(256, util.toBigInt(util.toPointer(value)), true);
  }

  // 0x108: u32
  set VertexTextureFilterCaps(value: number) {
    this.view.setUint32(264, value, true);
  }

  // 0x10c: u32
  set MaxVShaderInstructionsExecuted(value: number) {
    this.view.setUint32(268, value, true);
  }

  // 0x110: u32
  set MaxPShaderInstructionsExecuted(value: number) {
    this.view.setUint32(272, value, true);
  }

  // 0x114: u32
  set MaxVertexShader30InstructionSlots(value: number) {
    this.view.setUint32(276, value, true);
  }

  // 0x118: u32
  set MaxPixelShader30InstructionSlots(value: number) {
    this.view.setUint32(280, value, true);
  }

  // 0x11c: pad4
}

/**
 * Windows.Win32.Graphics.Direct3D.D3DMATRIX (size: 8)
 */
export interface D3DMATRIX {
  /** _Anonymous_e__Union */
  Anonymous: Uint8Array | Deno.PointerValue | null;
}

export const sizeofD3DMATRIX = 8;

export function allocD3DMATRIX(data?: Partial<D3DMATRIX>): Uint8Array {
  const buf = new Uint8Array(sizeofD3DMATRIX);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.Anonymous !== undefined) view.setBigUint64(0, data.Anonymous === null ? 0n : util.toBigInt(util.toPointer(data.Anonymous)), true);
  return buf;
}

export class D3DMATRIXView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get Anonymous(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(0, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: pointer
  set Anonymous(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(0, util.toBigInt(util.toPointer(value)), true);
  }
}

// Native Libraries

// Symbols

