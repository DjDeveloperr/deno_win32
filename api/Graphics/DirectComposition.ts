/// Auto-generated by Deno Win32: Windows.Win32.Graphics.DirectComposition.Apis

import * as util from "../../util.ts";

// Enums
export type DCOMPOSITION_BITMAP_INTERPOLATION_MODE = number;
export type DCOMPOSITION_BORDER_MODE = number;
export type DCOMPOSITION_COMPOSITE_MODE = number;
export type DCOMPOSITION_BACKFACE_VISIBILITY = number;
export type DCOMPOSITION_OPACITY_MODE = number;
export type DCOMPOSITION_DEPTH_MODE = number;
export type COMPOSITION_FRAME_ID_TYPE = number;

// Constants
export const COMPOSITIONOBJECT_READ = 1;
export const COMPOSITIONOBJECT_WRITE = 2;
export const DCOMPOSITION_MAX_WAITFORCOMPOSITORCLOCK_OBJECTS = 32;
export const COMPOSITION_STATS_MAX_TARGETS = 256;
export const DCOMPOSITION_BITMAP_INTERPOLATION_MODE_NEAREST_NEIGHBOR = 0;
export const DCOMPOSITION_BITMAP_INTERPOLATION_MODE_LINEAR = 1;
export const DCOMPOSITION_BITMAP_INTERPOLATION_MODE_INHERIT = "-1";
export const DCOMPOSITION_BORDER_MODE_SOFT = 0;
export const DCOMPOSITION_BORDER_MODE_HARD = 1;
export const DCOMPOSITION_BORDER_MODE_INHERIT = "-1";
export const DCOMPOSITION_COMPOSITE_MODE_SOURCE_OVER = 0;
export const DCOMPOSITION_COMPOSITE_MODE_DESTINATION_INVERT = 1;
export const DCOMPOSITION_COMPOSITE_MODE_MIN_BLEND = 2;
export const DCOMPOSITION_COMPOSITE_MODE_INHERIT = "-1";
export const DCOMPOSITION_BACKFACE_VISIBILITY_VISIBLE = 0;
export const DCOMPOSITION_BACKFACE_VISIBILITY_HIDDEN = 1;
export const DCOMPOSITION_BACKFACE_VISIBILITY_INHERIT = "-1";
export const DCOMPOSITION_OPACITY_MODE_LAYER = 0;
export const DCOMPOSITION_OPACITY_MODE_MULTIPLY = 1;
export const DCOMPOSITION_OPACITY_MODE_INHERIT = "-1";
export const DCOMPOSITION_DEPTH_MODE_TREE = 0;
export const DCOMPOSITION_DEPTH_MODE_SPATIAL = 1;
export const DCOMPOSITION_DEPTH_MODE_SORTED = 3;
export const DCOMPOSITION_DEPTH_MODE_INHERIT = "-1";
export const COMPOSITION_FRAME_ID_CREATED = 0;
export const COMPOSITION_FRAME_ID_CONFIRMED = 1;
export const COMPOSITION_FRAME_ID_COMPLETED = 2;

// Structs

/**
 * _Anonymous_e__Struct (size: 16)
 */
export interface _Anonymous_e__Struct {
  /** u64 */
  Alignment: Deno.PointerValue;
  /** u64 */
  Region: Deno.PointerValue;
}

export const sizeof_Anonymous_e__Struct = 16;

export function alloc_Anonymous_e__Struct(data?: Partial<_Anonymous_e__Struct>): Uint8Array {
  const buf = new Uint8Array(sizeof_Anonymous_e__Struct);
  const view = new DataView(buf.buffer);
  // 0x00: u64
  if (data?.Alignment !== undefined) view.setBigUint64(0, BigInt(data.Alignment), true);
  // 0x08: u64
  if (data?.Region !== undefined) view.setBigUint64(8, BigInt(data.Region), true);
  return buf;
}

export type PWSTR = Deno.PointerValue | Uint8Array | null;

/**
 * _u_e__Struct (size: 16)
 */
export interface _u_e__Struct {
  /** u32 */
  dwValue: number;
  /** Windows.Win32.Foundation.PWSTR */
  pwszName: string | null;
}

export const sizeof_u_e__Struct = 16;

export function alloc_u_e__Struct(data?: Partial<_u_e__Struct>): Uint8Array {
  const buf = new Uint8Array(sizeof_u_e__Struct);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.dwValue !== undefined) view.setUint32(0, Number(data.dwValue), true);
  // 0x04: pad4
  // 0x08: buffer
  if (data?.pwszName !== undefined) {
    (buf as any)._f8 = util.pwstrToFfi(data.pwszName);
    view.setBigUint64(8, (buf as any)._f8 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f8)), true);
  }
  return buf;
}

/**
 * Windows.Win32.Foundation.LARGE_INTEGER (size: 24)
 */
export interface LARGE_INTEGER {
  /** _Anonymous_e__Struct */
  Anonymous: Uint8Array | Deno.PointerValue | null;
  /** _u_e__Struct */
  u: Uint8Array | Deno.PointerValue | null;
  /** i64 */
  QuadPart: Deno.PointerValue;
}

export const sizeofLARGE_INTEGER = 24;

export function allocLARGE_INTEGER(data?: Partial<LARGE_INTEGER>): Uint8Array {
  const buf = new Uint8Array(sizeofLARGE_INTEGER);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.Anonymous !== undefined) view.setBigUint64(0, data.Anonymous === null ? 0n : BigInt(util.toPointer(data.Anonymous)), true);
  // 0x08: pointer
  if (data?.u !== undefined) view.setBigUint64(8, data.u === null ? 0n : BigInt(util.toPointer(data.u)), true);
  // 0x10: i64
  if (data?.QuadPart !== undefined) view.setBigInt64(16, BigInt(data.QuadPart), true);
  return buf;
}

/**
 * Windows.Win32.Graphics.Dxgi.Common.DXGI_RATIONAL (size: 8)
 */
export interface DXGI_RATIONAL {
  /** u32 */
  Numerator: number;
  /** u32 */
  Denominator: number;
}

export const sizeofDXGI_RATIONAL = 8;

export function allocDXGI_RATIONAL(data?: Partial<DXGI_RATIONAL>): Uint8Array {
  const buf = new Uint8Array(sizeofDXGI_RATIONAL);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.Numerator !== undefined) view.setUint32(0, Number(data.Numerator), true);
  // 0x04: u32
  if (data?.Denominator !== undefined) view.setUint32(4, Number(data.Denominator), true);
  return buf;
}

/**
 * Windows.Win32.Graphics.DirectComposition.DCOMPOSITION_FRAME_STATISTICS (size: 40)
 */
export interface DCOMPOSITION_FRAME_STATISTICS {
  /** Windows.Win32.Foundation.LARGE_INTEGER */
  lastFrameTime: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Graphics.Dxgi.Common.DXGI_RATIONAL */
  currentCompositionRate: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Foundation.LARGE_INTEGER */
  currentTime: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Foundation.LARGE_INTEGER */
  timeFrequency: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Foundation.LARGE_INTEGER */
  nextEstimatedFrameTime: Uint8Array | Deno.PointerValue | null;
}

export const sizeofDCOMPOSITION_FRAME_STATISTICS = 40;

export function allocDCOMPOSITION_FRAME_STATISTICS(data?: Partial<DCOMPOSITION_FRAME_STATISTICS>): Uint8Array {
  const buf = new Uint8Array(sizeofDCOMPOSITION_FRAME_STATISTICS);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.lastFrameTime !== undefined) view.setBigUint64(0, data.lastFrameTime === null ? 0n : BigInt(util.toPointer(data.lastFrameTime)), true);
  // 0x08: pointer
  if (data?.currentCompositionRate !== undefined) view.setBigUint64(8, data.currentCompositionRate === null ? 0n : BigInt(util.toPointer(data.currentCompositionRate)), true);
  // 0x10: pointer
  if (data?.currentTime !== undefined) view.setBigUint64(16, data.currentTime === null ? 0n : BigInt(util.toPointer(data.currentTime)), true);
  // 0x18: pointer
  if (data?.timeFrequency !== undefined) view.setBigUint64(24, data.timeFrequency === null ? 0n : BigInt(util.toPointer(data.timeFrequency)), true);
  // 0x20: pointer
  if (data?.nextEstimatedFrameTime !== undefined) view.setBigUint64(32, data.nextEstimatedFrameTime === null ? 0n : BigInt(util.toPointer(data.nextEstimatedFrameTime)), true);
  return buf;
}

/**
 * Windows.Win32.Graphics.DirectComposition.COMPOSITION_FRAME_STATS (size: 24)
 */
export interface COMPOSITION_FRAME_STATS {
  /** u64 */
  startTime: Deno.PointerValue;
  /** u64 */
  targetTime: Deno.PointerValue;
  /** u64 */
  framePeriod: Deno.PointerValue;
}

export const sizeofCOMPOSITION_FRAME_STATS = 24;

export function allocCOMPOSITION_FRAME_STATS(data?: Partial<COMPOSITION_FRAME_STATS>): Uint8Array {
  const buf = new Uint8Array(sizeofCOMPOSITION_FRAME_STATS);
  const view = new DataView(buf.buffer);
  // 0x00: u64
  if (data?.startTime !== undefined) view.setBigUint64(0, BigInt(data.startTime), true);
  // 0x08: u64
  if (data?.targetTime !== undefined) view.setBigUint64(8, BigInt(data.targetTime), true);
  // 0x10: u64
  if (data?.framePeriod !== undefined) view.setBigUint64(16, BigInt(data.framePeriod), true);
  return buf;
}

/**
 * Windows.Win32.Foundation.LUID (size: 8)
 */
export interface LUID {
  /** u32 */
  LowPart: number;
  /** i32 */
  HighPart: number;
}

export const sizeofLUID = 8;

export function allocLUID(data?: Partial<LUID>): Uint8Array {
  const buf = new Uint8Array(sizeofLUID);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.LowPart !== undefined) view.setUint32(0, Number(data.LowPart), true);
  // 0x04: i32
  if (data?.HighPart !== undefined) view.setInt32(4, Number(data.HighPart), true);
  return buf;
}

/**
 * Windows.Win32.Graphics.DirectComposition.COMPOSITION_TARGET_ID (size: 32)
 */
export interface COMPOSITION_TARGET_ID {
  /** Windows.Win32.Foundation.LUID */
  displayAdapterLuid: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Foundation.LUID */
  renderAdapterLuid: Uint8Array | Deno.PointerValue | null;
  /** u32 */
  vidPnSourceId: number;
  /** u32 */
  vidPnTargetId: number;
  /** u32 */
  uniqueId: number;
}

export const sizeofCOMPOSITION_TARGET_ID = 32;

export function allocCOMPOSITION_TARGET_ID(data?: Partial<COMPOSITION_TARGET_ID>): Uint8Array {
  const buf = new Uint8Array(sizeofCOMPOSITION_TARGET_ID);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.displayAdapterLuid !== undefined) view.setBigUint64(0, data.displayAdapterLuid === null ? 0n : BigInt(util.toPointer(data.displayAdapterLuid)), true);
  // 0x08: pointer
  if (data?.renderAdapterLuid !== undefined) view.setBigUint64(8, data.renderAdapterLuid === null ? 0n : BigInt(util.toPointer(data.renderAdapterLuid)), true);
  // 0x10: u32
  if (data?.vidPnSourceId !== undefined) view.setUint32(16, Number(data.vidPnSourceId), true);
  // 0x14: u32
  if (data?.vidPnTargetId !== undefined) view.setUint32(20, Number(data.vidPnTargetId), true);
  // 0x18: u32
  if (data?.uniqueId !== undefined) view.setUint32(24, Number(data.uniqueId), true);
  // 0x1c: pad4
  return buf;
}

/**
 * Windows.Win32.Graphics.DirectComposition.COMPOSITION_STATS (size: 24)
 */
export interface COMPOSITION_STATS {
  /** u32 */
  presentCount: number;
  /** u32 */
  refreshCount: number;
  /** u32 */
  virtualRefreshCount: number;
  /** u64 */
  time: Deno.PointerValue;
}

export const sizeofCOMPOSITION_STATS = 24;

export function allocCOMPOSITION_STATS(data?: Partial<COMPOSITION_STATS>): Uint8Array {
  const buf = new Uint8Array(sizeofCOMPOSITION_STATS);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.presentCount !== undefined) view.setUint32(0, Number(data.presentCount), true);
  // 0x04: u32
  if (data?.refreshCount !== undefined) view.setUint32(4, Number(data.refreshCount), true);
  // 0x08: u32
  if (data?.virtualRefreshCount !== undefined) view.setUint32(8, Number(data.virtualRefreshCount), true);
  // 0x0c: pad4
  // 0x10: u64
  if (data?.time !== undefined) view.setBigUint64(16, BigInt(data.time), true);
  return buf;
}

/**
 * Windows.Win32.Graphics.DirectComposition.COMPOSITION_TARGET_STATS (size: 40)
 */
export interface COMPOSITION_TARGET_STATS {
  /** u32 */
  outstandingPresents: number;
  /** u64 */
  presentTime: Deno.PointerValue;
  /** u64 */
  vblankDuration: Deno.PointerValue;
  /** Windows.Win32.Graphics.DirectComposition.COMPOSITION_STATS */
  presentedStats: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Graphics.DirectComposition.COMPOSITION_STATS */
  completedStats: Uint8Array | Deno.PointerValue | null;
}

export const sizeofCOMPOSITION_TARGET_STATS = 40;

export function allocCOMPOSITION_TARGET_STATS(data?: Partial<COMPOSITION_TARGET_STATS>): Uint8Array {
  const buf = new Uint8Array(sizeofCOMPOSITION_TARGET_STATS);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.outstandingPresents !== undefined) view.setUint32(0, Number(data.outstandingPresents), true);
  // 0x04: pad4
  // 0x08: u64
  if (data?.presentTime !== undefined) view.setBigUint64(8, BigInt(data.presentTime), true);
  // 0x10: u64
  if (data?.vblankDuration !== undefined) view.setBigUint64(16, BigInt(data.vblankDuration), true);
  // 0x18: pointer
  if (data?.presentedStats !== undefined) view.setBigUint64(24, data.presentedStats === null ? 0n : BigInt(util.toPointer(data.presentedStats)), true);
  // 0x20: pointer
  if (data?.completedStats !== undefined) view.setBigUint64(32, data.completedStats === null ? 0n : BigInt(util.toPointer(data.completedStats)), true);
  return buf;
}

/**
 * Windows.Win32.Graphics.DirectComposition.DCompositionInkTrailPoint (size: 16)
 */
export interface DCompositionInkTrailPoint {
  /** f32 */
  x: number;
  /** f32 */
  y: number;
  /** f32 */
  radius: number;
}

export const sizeofDCompositionInkTrailPoint = 16;

export function allocDCompositionInkTrailPoint(data?: Partial<DCompositionInkTrailPoint>): Uint8Array {
  const buf = new Uint8Array(sizeofDCompositionInkTrailPoint);
  const view = new DataView(buf.buffer);
  // 0x00: f32
  if (data?.x !== undefined) view.setFloat32(0, Number(data.x), true);
  // 0x04: f32
  if (data?.y !== undefined) view.setFloat32(4, Number(data.y), true);
  // 0x08: f32
  if (data?.radius !== undefined) view.setFloat32(8, Number(data.radius), true);
  // 0x0c: pad4
  return buf;
}

export type HRESULT = number;

export type HWND = Deno.PointerValue;

export type BOOL = number;

// Native Libraries

try {
  var libdcomp = Deno.dlopen("dcomp", {
    DCompositionCreateDevice: {
      parameters: ["pointer", "pointer", "pointer"],
      result: "pointer",
    },
    DCompositionCreateDevice2: {
      parameters: ["pointer", "pointer", "pointer"],
      result: "pointer",
    },
    DCompositionCreateDevice3: {
      parameters: ["pointer", "pointer", "pointer"],
      result: "pointer",
    },
    DCompositionCreateSurfaceHandle: {
      parameters: ["u32", "pointer", "pointer"],
      result: "pointer",
    },
    DCompositionAttachMouseWheelToHwnd: {
      parameters: ["pointer", "pointer", "i32"],
      result: "pointer",
    },
    DCompositionAttachMouseDragToHwnd: {
      parameters: ["pointer", "pointer", "i32"],
      result: "pointer",
    },
    DCompositionGetFrameId: {
      parameters: ["i32", "pointer"],
      result: "pointer",
    },
    DCompositionGetStatistics: {
      parameters: ["u64", "pointer", "u32", "pointer", "pointer"],
      result: "pointer",
    },
    DCompositionGetTargetStatistics: {
      parameters: ["u64", "pointer", "pointer"],
      result: "pointer",
    },
    DCompositionBoostCompositorClock: {
      parameters: ["i32"],
      result: "pointer",
    },
    DCompositionWaitForCompositorClock: {
      parameters: ["u32", "pointer", "u32"],
      result: "u32",
    },
  }).symbols;
} catch(e) { /* ignore */ }

// Symbols

export function DCompositionCreateDevice(
  dxgiDevice: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Graphics.Dxgi.IDXGIDevice */,
  iid: Deno.PointerValue | Uint8Array | null /* ptr */,
  dcompositionDevice: Deno.PointerValue | Uint8Array | null /* ptr */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libdcomp.DCompositionCreateDevice(util.toPointer(dxgiDevice), util.toPointer(iid), util.toPointer(dcompositionDevice)));
}

export function DCompositionCreateDevice2(
  renderingDevice: Uint8Array | Deno.PointerValue | null /* Windows.Win32.System.Com.IUnknown */,
  iid: Deno.PointerValue | Uint8Array | null /* ptr */,
  dcompositionDevice: Deno.PointerValue | Uint8Array | null /* ptr */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libdcomp.DCompositionCreateDevice2(util.toPointer(renderingDevice), util.toPointer(iid), util.toPointer(dcompositionDevice)));
}

export function DCompositionCreateDevice3(
  renderingDevice: Uint8Array | Deno.PointerValue | null /* Windows.Win32.System.Com.IUnknown */,
  iid: Deno.PointerValue | Uint8Array | null /* ptr */,
  dcompositionDevice: Deno.PointerValue | Uint8Array | null /* ptr */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libdcomp.DCompositionCreateDevice3(util.toPointer(renderingDevice), util.toPointer(iid), util.toPointer(dcompositionDevice)));
}

export function DCompositionCreateSurfaceHandle(
  desiredAccess: number /* u32 */,
  securityAttributes: Deno.PointerValue | Uint8Array | null /* ptr */,
  surfaceHandle: Deno.PointerValue | Uint8Array | null /* ptr */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libdcomp.DCompositionCreateSurfaceHandle(desiredAccess, util.toPointer(securityAttributes), util.toPointer(surfaceHandle)));
}

export function DCompositionAttachMouseWheelToHwnd(
  visual: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Graphics.DirectComposition.IDCompositionVisual */,
  hwnd: Deno.PointerValue | null /* Windows.Win32.Foundation.HWND */,
  enable: boolean /* Windows.Win32.Foundation.BOOL */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libdcomp.DCompositionAttachMouseWheelToHwnd(util.toPointer(visual), util.hwndToFfi(hwnd), util.boolToFfi(enable)));
}

export function DCompositionAttachMouseDragToHwnd(
  visual: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Graphics.DirectComposition.IDCompositionVisual */,
  hwnd: Deno.PointerValue | null /* Windows.Win32.Foundation.HWND */,
  enable: boolean /* Windows.Win32.Foundation.BOOL */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libdcomp.DCompositionAttachMouseDragToHwnd(util.toPointer(visual), util.hwndToFfi(hwnd), util.boolToFfi(enable)));
}

export function DCompositionGetFrameId(
  frameIdType: COMPOSITION_FRAME_ID_TYPE /* Windows.Win32.Graphics.DirectComposition.COMPOSITION_FRAME_ID_TYPE */,
  frameId: Deno.PointerValue | Uint8Array | null /* ptr */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libdcomp.DCompositionGetFrameId(frameIdType, util.toPointer(frameId)));
}

export function DCompositionGetStatistics(
  frameId: Deno.PointerValue /* u64 */,
  frameStats: Deno.PointerValue | Uint8Array | null /* ptr */,
  targetIdCount: number /* u32 */,
  targetIds: Deno.PointerValue | Uint8Array | null /* ptr */,
  actualTargetIdCount: Deno.PointerValue | Uint8Array | null /* ptr */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libdcomp.DCompositionGetStatistics(frameId, util.toPointer(frameStats), targetIdCount, util.toPointer(targetIds), util.toPointer(actualTargetIdCount)));
}

export function DCompositionGetTargetStatistics(
  frameId: Deno.PointerValue /* u64 */,
  targetId: Deno.PointerValue | Uint8Array | null /* ptr */,
  targetStats: Deno.PointerValue | Uint8Array | null /* ptr */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libdcomp.DCompositionGetTargetStatistics(frameId, util.toPointer(targetId), util.toPointer(targetStats)));
}

export function DCompositionBoostCompositorClock(
  enable: boolean /* Windows.Win32.Foundation.BOOL */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libdcomp.DCompositionBoostCompositorClock(util.boolToFfi(enable)));
}

export function DCompositionWaitForCompositorClock(
  count: number /* u32 */,
  handles: Deno.PointerValue | Uint8Array | null /* ptr */,
  timeoutInMs: number /* u32 */,
): number /* u32 */ {
  return libdcomp.DCompositionWaitForCompositorClock(count, util.toPointer(handles), timeoutInMs);
}

