/// Auto-generated by Deno Win32: Windows.Win32.Graphics.OpenGL.Apis

import * as util from "../../util.ts";

// Enums
export type PFD_PIXEL_TYPE = number;
export type PFD_LAYER_TYPE = number;
export type PFD_FLAGS = number;
export type ENHANCED_METAFILE_RECORD_TYPE = number;

// Constants
export const PFD_TYPE_RGBA = 0;
export const PFD_TYPE_COLORINDEX = 1;
export const PFD_UNDERLAY_PLANE = `-1`;
export const PFD_MAIN_PLANE = 0;
export const PFD_OVERLAY_PLANE = 1;
export const PFD_DOUBLEBUFFER = 1;
export const PFD_STEREO = 2;
export const PFD_DRAW_TO_WINDOW = 4;
export const PFD_DRAW_TO_BITMAP = 8;
export const PFD_SUPPORT_GDI = 16;
export const PFD_SUPPORT_OPENGL = 32;
export const PFD_GENERIC_FORMAT = 64;
export const PFD_NEED_PALETTE = 128;
export const PFD_NEED_SYSTEM_PALETTE = 256;
export const PFD_SWAP_EXCHANGE = 512;
export const PFD_SWAP_COPY = 1024;
export const PFD_SWAP_LAYER_BUFFERS = 2048;
export const PFD_GENERIC_ACCELERATED = 4096;
export const PFD_SUPPORT_DIRECTDRAW = 8192;
export const PFD_DIRECT3D_ACCELERATED = 16384;
export const PFD_SUPPORT_COMPOSITION = 32768;
export const PFD_DEPTH_DONTCARE = 536870912;
export const PFD_DOUBLEBUFFER_DONTCARE = 1073741824;
export const PFD_STEREO_DONTCARE = 2147483648;
export const GL_VERSION_1_1 = 1;
export const GL_ACCUM = 256;
export const GL_LOAD = 257;
export const GL_RETURN = 258;
export const GL_MULT = 259;
export const GL_ADD = 260;
export const GL_NEVER = 512;
export const GL_LESS = 513;
export const GL_EQUAL = 514;
export const GL_LEQUAL = 515;
export const GL_GREATER = 516;
export const GL_NOTEQUAL = 517;
export const GL_GEQUAL = 518;
export const GL_ALWAYS = 519;
export const GL_CURRENT_BIT = 1;
export const GL_POINT_BIT = 2;
export const GL_LINE_BIT = 4;
export const GL_POLYGON_BIT = 8;
export const GL_POLYGON_STIPPLE_BIT = 16;
export const GL_PIXEL_MODE_BIT = 32;
export const GL_LIGHTING_BIT = 64;
export const GL_FOG_BIT = 128;
export const GL_DEPTH_BUFFER_BIT = 256;
export const GL_ACCUM_BUFFER_BIT = 512;
export const GL_STENCIL_BUFFER_BIT = 1024;
export const GL_VIEWPORT_BIT = 2048;
export const GL_TRANSFORM_BIT = 4096;
export const GL_ENABLE_BIT = 8192;
export const GL_COLOR_BUFFER_BIT = 16384;
export const GL_HINT_BIT = 32768;
export const GL_EVAL_BIT = 65536;
export const GL_LIST_BIT = 131072;
export const GL_TEXTURE_BIT = 262144;
export const GL_SCISSOR_BIT = 524288;
export const GL_ALL_ATTRIB_BITS = 1048575;
export const GL_POINTS = 0;
export const GL_LINES = 1;
export const GL_LINE_LOOP = 2;
export const GL_LINE_STRIP = 3;
export const GL_TRIANGLES = 4;
export const GL_TRIANGLE_STRIP = 5;
export const GL_TRIANGLE_FAN = 6;
export const GL_QUADS = 7;
export const GL_QUAD_STRIP = 8;
export const GL_POLYGON = 9;
export const GL_ZERO = 0;
export const GL_ONE = 1;
export const GL_SRC_COLOR = 768;
export const GL_ONE_MINUS_SRC_COLOR = 769;
export const GL_SRC_ALPHA = 770;
export const GL_ONE_MINUS_SRC_ALPHA = 771;
export const GL_DST_ALPHA = 772;
export const GL_ONE_MINUS_DST_ALPHA = 773;
export const GL_DST_COLOR = 774;
export const GL_ONE_MINUS_DST_COLOR = 775;
export const GL_SRC_ALPHA_SATURATE = 776;
export const GL_TRUE = 1;
export const GL_FALSE = 0;
export const GL_CLIP_PLANE0 = 12288;
export const GL_CLIP_PLANE1 = 12289;
export const GL_CLIP_PLANE2 = 12290;
export const GL_CLIP_PLANE3 = 12291;
export const GL_CLIP_PLANE4 = 12292;
export const GL_CLIP_PLANE5 = 12293;
export const GL_BYTE = 5120;
export const GL_UNSIGNED_BYTE = 5121;
export const GL_SHORT = 5122;
export const GL_UNSIGNED_SHORT = 5123;
export const GL_INT = 5124;
export const GL_UNSIGNED_INT = 5125;
export const GL_FLOAT = 5126;
export const GL_2_BYTES = 5127;
export const GL_3_BYTES = 5128;
export const GL_4_BYTES = 5129;
export const GL_DOUBLE = 5130;
export const GL_NONE = 0;
export const GL_FRONT_LEFT = 1024;
export const GL_FRONT_RIGHT = 1025;
export const GL_BACK_LEFT = 1026;
export const GL_BACK_RIGHT = 1027;
export const GL_FRONT = 1028;
export const GL_BACK = 1029;
export const GL_LEFT = 1030;
export const GL_RIGHT = 1031;
export const GL_FRONT_AND_BACK = 1032;
export const GL_AUX0 = 1033;
export const GL_AUX1 = 1034;
export const GL_AUX2 = 1035;
export const GL_AUX3 = 1036;
export const GL_NO_ERROR = 0;
export const GL_INVALID_ENUM = 1280;
export const GL_INVALID_VALUE = 1281;
export const GL_INVALID_OPERATION = 1282;
export const GL_STACK_OVERFLOW = 1283;
export const GL_STACK_UNDERFLOW = 1284;
export const GL_OUT_OF_MEMORY = 1285;
export const GL_2D = 1536;
export const GL_3D = 1537;
export const GL_3D_COLOR = 1538;
export const GL_3D_COLOR_TEXTURE = 1539;
export const GL_4D_COLOR_TEXTURE = 1540;
export const GL_PASS_THROUGH_TOKEN = 1792;
export const GL_POINT_TOKEN = 1793;
export const GL_LINE_TOKEN = 1794;
export const GL_POLYGON_TOKEN = 1795;
export const GL_BITMAP_TOKEN = 1796;
export const GL_DRAW_PIXEL_TOKEN = 1797;
export const GL_COPY_PIXEL_TOKEN = 1798;
export const GL_LINE_RESET_TOKEN = 1799;
export const GL_EXP = 2048;
export const GL_EXP2 = 2049;
export const GL_CW = 2304;
export const GL_CCW = 2305;
export const GL_COEFF = 2560;
export const GL_ORDER = 2561;
export const GL_DOMAIN = 2562;
export const GL_CURRENT_COLOR = 2816;
export const GL_CURRENT_INDEX = 2817;
export const GL_CURRENT_NORMAL = 2818;
export const GL_CURRENT_TEXTURE_COORDS = 2819;
export const GL_CURRENT_RASTER_COLOR = 2820;
export const GL_CURRENT_RASTER_INDEX = 2821;
export const GL_CURRENT_RASTER_TEXTURE_COORDS = 2822;
export const GL_CURRENT_RASTER_POSITION = 2823;
export const GL_CURRENT_RASTER_POSITION_VALID = 2824;
export const GL_CURRENT_RASTER_DISTANCE = 2825;
export const GL_POINT_SMOOTH = 2832;
export const GL_POINT_SIZE = 2833;
export const GL_POINT_SIZE_RANGE = 2834;
export const GL_POINT_SIZE_GRANULARITY = 2835;
export const GL_LINE_SMOOTH = 2848;
export const GL_LINE_WIDTH = 2849;
export const GL_LINE_WIDTH_RANGE = 2850;
export const GL_LINE_WIDTH_GRANULARITY = 2851;
export const GL_LINE_STIPPLE = 2852;
export const GL_LINE_STIPPLE_PATTERN = 2853;
export const GL_LINE_STIPPLE_REPEAT = 2854;
export const GL_LIST_MODE = 2864;
export const GL_MAX_LIST_NESTING = 2865;
export const GL_LIST_BASE = 2866;
export const GL_LIST_INDEX = 2867;
export const GL_POLYGON_MODE = 2880;
export const GL_POLYGON_SMOOTH = 2881;
export const GL_POLYGON_STIPPLE = 2882;
export const GL_EDGE_FLAG = 2883;
export const GL_CULL_FACE = 2884;
export const GL_CULL_FACE_MODE = 2885;
export const GL_FRONT_FACE = 2886;
export const GL_LIGHTING = 2896;
export const GL_LIGHT_MODEL_LOCAL_VIEWER = 2897;
export const GL_LIGHT_MODEL_TWO_SIDE = 2898;
export const GL_LIGHT_MODEL_AMBIENT = 2899;
export const GL_SHADE_MODEL = 2900;
export const GL_COLOR_MATERIAL_FACE = 2901;
export const GL_COLOR_MATERIAL_PARAMETER = 2902;
export const GL_COLOR_MATERIAL = 2903;
export const GL_FOG = 2912;
export const GL_FOG_INDEX = 2913;
export const GL_FOG_DENSITY = 2914;
export const GL_FOG_START = 2915;
export const GL_FOG_END = 2916;
export const GL_FOG_MODE = 2917;
export const GL_FOG_COLOR = 2918;
export const GL_DEPTH_RANGE = 2928;
export const GL_DEPTH_TEST = 2929;
export const GL_DEPTH_WRITEMASK = 2930;
export const GL_DEPTH_CLEAR_VALUE = 2931;
export const GL_DEPTH_FUNC = 2932;
export const GL_ACCUM_CLEAR_VALUE = 2944;
export const GL_STENCIL_TEST = 2960;
export const GL_STENCIL_CLEAR_VALUE = 2961;
export const GL_STENCIL_FUNC = 2962;
export const GL_STENCIL_VALUE_MASK = 2963;
export const GL_STENCIL_FAIL = 2964;
export const GL_STENCIL_PASS_DEPTH_FAIL = 2965;
export const GL_STENCIL_PASS_DEPTH_PASS = 2966;
export const GL_STENCIL_REF = 2967;
export const GL_STENCIL_WRITEMASK = 2968;
export const GL_MATRIX_MODE = 2976;
export const GL_NORMALIZE = 2977;
export const GL_VIEWPORT = 2978;
export const GL_MODELVIEW_STACK_DEPTH = 2979;
export const GL_PROJECTION_STACK_DEPTH = 2980;
export const GL_TEXTURE_STACK_DEPTH = 2981;
export const GL_MODELVIEW_MATRIX = 2982;
export const GL_PROJECTION_MATRIX = 2983;
export const GL_TEXTURE_MATRIX = 2984;
export const GL_ATTRIB_STACK_DEPTH = 2992;
export const GL_CLIENT_ATTRIB_STACK_DEPTH = 2993;
export const GL_ALPHA_TEST = 3008;
export const GL_ALPHA_TEST_FUNC = 3009;
export const GL_ALPHA_TEST_REF = 3010;
export const GL_DITHER = 3024;
export const GL_BLEND_DST = 3040;
export const GL_BLEND_SRC = 3041;
export const GL_BLEND = 3042;
export const GL_LOGIC_OP_MODE = 3056;
export const GL_INDEX_LOGIC_OP = 3057;
export const GL_COLOR_LOGIC_OP = 3058;
export const GL_AUX_BUFFERS = 3072;
export const GL_DRAW_BUFFER = 3073;
export const GL_READ_BUFFER = 3074;
export const GL_SCISSOR_BOX = 3088;
export const GL_SCISSOR_TEST = 3089;
export const GL_INDEX_CLEAR_VALUE = 3104;
export const GL_INDEX_WRITEMASK = 3105;
export const GL_COLOR_CLEAR_VALUE = 3106;
export const GL_COLOR_WRITEMASK = 3107;
export const GL_INDEX_MODE = 3120;
export const GL_RGBA_MODE = 3121;
export const GL_DOUBLEBUFFER = 3122;
export const GL_STEREO = 3123;
export const GL_RENDER_MODE = 3136;
export const GL_PERSPECTIVE_CORRECTION_HINT = 3152;
export const GL_POINT_SMOOTH_HINT = 3153;
export const GL_LINE_SMOOTH_HINT = 3154;
export const GL_POLYGON_SMOOTH_HINT = 3155;
export const GL_FOG_HINT = 3156;
export const GL_TEXTURE_GEN_S = 3168;
export const GL_TEXTURE_GEN_T = 3169;
export const GL_TEXTURE_GEN_R = 3170;
export const GL_TEXTURE_GEN_Q = 3171;
export const GL_PIXEL_MAP_I_TO_I = 3184;
export const GL_PIXEL_MAP_S_TO_S = 3185;
export const GL_PIXEL_MAP_I_TO_R = 3186;
export const GL_PIXEL_MAP_I_TO_G = 3187;
export const GL_PIXEL_MAP_I_TO_B = 3188;
export const GL_PIXEL_MAP_I_TO_A = 3189;
export const GL_PIXEL_MAP_R_TO_R = 3190;
export const GL_PIXEL_MAP_G_TO_G = 3191;
export const GL_PIXEL_MAP_B_TO_B = 3192;
export const GL_PIXEL_MAP_A_TO_A = 3193;
export const GL_PIXEL_MAP_I_TO_I_SIZE = 3248;
export const GL_PIXEL_MAP_S_TO_S_SIZE = 3249;
export const GL_PIXEL_MAP_I_TO_R_SIZE = 3250;
export const GL_PIXEL_MAP_I_TO_G_SIZE = 3251;
export const GL_PIXEL_MAP_I_TO_B_SIZE = 3252;
export const GL_PIXEL_MAP_I_TO_A_SIZE = 3253;
export const GL_PIXEL_MAP_R_TO_R_SIZE = 3254;
export const GL_PIXEL_MAP_G_TO_G_SIZE = 3255;
export const GL_PIXEL_MAP_B_TO_B_SIZE = 3256;
export const GL_PIXEL_MAP_A_TO_A_SIZE = 3257;
export const GL_UNPACK_SWAP_BYTES = 3312;
export const GL_UNPACK_LSB_FIRST = 3313;
export const GL_UNPACK_ROW_LENGTH = 3314;
export const GL_UNPACK_SKIP_ROWS = 3315;
export const GL_UNPACK_SKIP_PIXELS = 3316;
export const GL_UNPACK_ALIGNMENT = 3317;
export const GL_PACK_SWAP_BYTES = 3328;
export const GL_PACK_LSB_FIRST = 3329;
export const GL_PACK_ROW_LENGTH = 3330;
export const GL_PACK_SKIP_ROWS = 3331;
export const GL_PACK_SKIP_PIXELS = 3332;
export const GL_PACK_ALIGNMENT = 3333;
export const GL_MAP_COLOR = 3344;
export const GL_MAP_STENCIL = 3345;
export const GL_INDEX_SHIFT = 3346;
export const GL_INDEX_OFFSET = 3347;
export const GL_RED_SCALE = 3348;
export const GL_RED_BIAS = 3349;
export const GL_ZOOM_X = 3350;
export const GL_ZOOM_Y = 3351;
export const GL_GREEN_SCALE = 3352;
export const GL_GREEN_BIAS = 3353;
export const GL_BLUE_SCALE = 3354;
export const GL_BLUE_BIAS = 3355;
export const GL_ALPHA_SCALE = 3356;
export const GL_ALPHA_BIAS = 3357;
export const GL_DEPTH_SCALE = 3358;
export const GL_DEPTH_BIAS = 3359;
export const GL_MAX_EVAL_ORDER = 3376;
export const GL_MAX_LIGHTS = 3377;
export const GL_MAX_CLIP_PLANES = 3378;
export const GL_MAX_TEXTURE_SIZE = 3379;
export const GL_MAX_PIXEL_MAP_TABLE = 3380;
export const GL_MAX_ATTRIB_STACK_DEPTH = 3381;
export const GL_MAX_MODELVIEW_STACK_DEPTH = 3382;
export const GL_MAX_NAME_STACK_DEPTH = 3383;
export const GL_MAX_PROJECTION_STACK_DEPTH = 3384;
export const GL_MAX_TEXTURE_STACK_DEPTH = 3385;
export const GL_MAX_VIEWPORT_DIMS = 3386;
export const GL_MAX_CLIENT_ATTRIB_STACK_DEPTH = 3387;
export const GL_SUBPIXEL_BITS = 3408;
export const GL_INDEX_BITS = 3409;
export const GL_RED_BITS = 3410;
export const GL_GREEN_BITS = 3411;
export const GL_BLUE_BITS = 3412;
export const GL_ALPHA_BITS = 3413;
export const GL_DEPTH_BITS = 3414;
export const GL_STENCIL_BITS = 3415;
export const GL_ACCUM_RED_BITS = 3416;
export const GL_ACCUM_GREEN_BITS = 3417;
export const GL_ACCUM_BLUE_BITS = 3418;
export const GL_ACCUM_ALPHA_BITS = 3419;
export const GL_NAME_STACK_DEPTH = 3440;
export const GL_AUTO_NORMAL = 3456;
export const GL_MAP1_COLOR_4 = 3472;
export const GL_MAP1_INDEX = 3473;
export const GL_MAP1_NORMAL = 3474;
export const GL_MAP1_TEXTURE_COORD_1 = 3475;
export const GL_MAP1_TEXTURE_COORD_2 = 3476;
export const GL_MAP1_TEXTURE_COORD_3 = 3477;
export const GL_MAP1_TEXTURE_COORD_4 = 3478;
export const GL_MAP1_VERTEX_3 = 3479;
export const GL_MAP1_VERTEX_4 = 3480;
export const GL_MAP2_COLOR_4 = 3504;
export const GL_MAP2_INDEX = 3505;
export const GL_MAP2_NORMAL = 3506;
export const GL_MAP2_TEXTURE_COORD_1 = 3507;
export const GL_MAP2_TEXTURE_COORD_2 = 3508;
export const GL_MAP2_TEXTURE_COORD_3 = 3509;
export const GL_MAP2_TEXTURE_COORD_4 = 3510;
export const GL_MAP2_VERTEX_3 = 3511;
export const GL_MAP2_VERTEX_4 = 3512;
export const GL_MAP1_GRID_DOMAIN = 3536;
export const GL_MAP1_GRID_SEGMENTS = 3537;
export const GL_MAP2_GRID_DOMAIN = 3538;
export const GL_MAP2_GRID_SEGMENTS = 3539;
export const GL_TEXTURE_1D = 3552;
export const GL_TEXTURE_2D = 3553;
export const GL_FEEDBACK_BUFFER_POINTER = 3568;
export const GL_FEEDBACK_BUFFER_SIZE = 3569;
export const GL_FEEDBACK_BUFFER_TYPE = 3570;
export const GL_SELECTION_BUFFER_POINTER = 3571;
export const GL_SELECTION_BUFFER_SIZE = 3572;
export const GL_TEXTURE_WIDTH = 4096;
export const GL_TEXTURE_HEIGHT = 4097;
export const GL_TEXTURE_INTERNAL_FORMAT = 4099;
export const GL_TEXTURE_BORDER_COLOR = 4100;
export const GL_TEXTURE_BORDER = 4101;
export const GL_DONT_CARE = 4352;
export const GL_FASTEST = 4353;
export const GL_NICEST = 4354;
export const GL_LIGHT0 = 16384;
export const GL_LIGHT1 = 16385;
export const GL_LIGHT2 = 16386;
export const GL_LIGHT3 = 16387;
export const GL_LIGHT4 = 16388;
export const GL_LIGHT5 = 16389;
export const GL_LIGHT6 = 16390;
export const GL_LIGHT7 = 16391;
export const GL_AMBIENT = 4608;
export const GL_DIFFUSE = 4609;
export const GL_SPECULAR = 4610;
export const GL_POSITION = 4611;
export const GL_SPOT_DIRECTION = 4612;
export const GL_SPOT_EXPONENT = 4613;
export const GL_SPOT_CUTOFF = 4614;
export const GL_CONSTANT_ATTENUATION = 4615;
export const GL_LINEAR_ATTENUATION = 4616;
export const GL_QUADRATIC_ATTENUATION = 4617;
export const GL_COMPILE = 4864;
export const GL_COMPILE_AND_EXECUTE = 4865;
export const GL_CLEAR = 5376;
export const GL_AND = 5377;
export const GL_AND_REVERSE = 5378;
export const GL_COPY = 5379;
export const GL_AND_INVERTED = 5380;
export const GL_NOOP = 5381;
export const GL_XOR = 5382;
export const GL_OR = 5383;
export const GL_NOR = 5384;
export const GL_EQUIV = 5385;
export const GL_INVERT = 5386;
export const GL_OR_REVERSE = 5387;
export const GL_COPY_INVERTED = 5388;
export const GL_OR_INVERTED = 5389;
export const GL_NAND = 5390;
export const GL_SET = 5391;
export const GL_EMISSION = 5632;
export const GL_SHININESS = 5633;
export const GL_AMBIENT_AND_DIFFUSE = 5634;
export const GL_COLOR_INDEXES = 5635;
export const GL_MODELVIEW = 5888;
export const GL_PROJECTION = 5889;
export const GL_TEXTURE = 5890;
export const GL_COLOR = 6144;
export const GL_DEPTH = 6145;
export const GL_STENCIL = 6146;
export const GL_COLOR_INDEX = 6400;
export const GL_STENCIL_INDEX = 6401;
export const GL_DEPTH_COMPONENT = 6402;
export const GL_RED = 6403;
export const GL_GREEN = 6404;
export const GL_BLUE = 6405;
export const GL_ALPHA = 6406;
export const GL_RGB = 6407;
export const GL_RGBA = 6408;
export const GL_LUMINANCE = 6409;
export const GL_LUMINANCE_ALPHA = 6410;
export const GL_BITMAP = 6656;
export const GL_POINT = 6912;
export const GL_LINE = 6913;
export const GL_FILL = 6914;
export const GL_RENDER = 7168;
export const GL_FEEDBACK = 7169;
export const GL_SELECT = 7170;
export const GL_FLAT = 7424;
export const GL_SMOOTH = 7425;
export const GL_KEEP = 7680;
export const GL_REPLACE = 7681;
export const GL_INCR = 7682;
export const GL_DECR = 7683;
export const GL_VENDOR = 7936;
export const GL_RENDERER = 7937;
export const GL_VERSION = 7938;
export const GL_EXTENSIONS = 7939;
export const GL_S = 8192;
export const GL_T = 8193;
export const GL_R = 8194;
export const GL_Q = 8195;
export const GL_MODULATE = 8448;
export const GL_DECAL = 8449;
export const GL_TEXTURE_ENV_MODE = 8704;
export const GL_TEXTURE_ENV_COLOR = 8705;
export const GL_TEXTURE_ENV = 8960;
export const GL_EYE_LINEAR = 9216;
export const GL_OBJECT_LINEAR = 9217;
export const GL_SPHERE_MAP = 9218;
export const GL_TEXTURE_GEN_MODE = 9472;
export const GL_OBJECT_PLANE = 9473;
export const GL_EYE_PLANE = 9474;
export const GL_NEAREST = 9728;
export const GL_LINEAR = 9729;
export const GL_NEAREST_MIPMAP_NEAREST = 9984;
export const GL_LINEAR_MIPMAP_NEAREST = 9985;
export const GL_NEAREST_MIPMAP_LINEAR = 9986;
export const GL_LINEAR_MIPMAP_LINEAR = 9987;
export const GL_TEXTURE_MAG_FILTER = 10240;
export const GL_TEXTURE_MIN_FILTER = 10241;
export const GL_TEXTURE_WRAP_S = 10242;
export const GL_TEXTURE_WRAP_T = 10243;
export const GL_CLAMP = 10496;
export const GL_REPEAT = 10497;
export const GL_CLIENT_PIXEL_STORE_BIT = 1;
export const GL_CLIENT_VERTEX_ARRAY_BIT = 2;
export const GL_CLIENT_ALL_ATTRIB_BITS = 4294967295;
export const GL_POLYGON_OFFSET_FACTOR = 32824;
export const GL_POLYGON_OFFSET_UNITS = 10752;
export const GL_POLYGON_OFFSET_POINT = 10753;
export const GL_POLYGON_OFFSET_LINE = 10754;
export const GL_POLYGON_OFFSET_FILL = 32823;
export const GL_ALPHA4 = 32827;
export const GL_ALPHA8 = 32828;
export const GL_ALPHA12 = 32829;
export const GL_ALPHA16 = 32830;
export const GL_LUMINANCE4 = 32831;
export const GL_LUMINANCE8 = 32832;
export const GL_LUMINANCE12 = 32833;
export const GL_LUMINANCE16 = 32834;
export const GL_LUMINANCE4_ALPHA4 = 32835;
export const GL_LUMINANCE6_ALPHA2 = 32836;
export const GL_LUMINANCE8_ALPHA8 = 32837;
export const GL_LUMINANCE12_ALPHA4 = 32838;
export const GL_LUMINANCE12_ALPHA12 = 32839;
export const GL_LUMINANCE16_ALPHA16 = 32840;
export const GL_INTENSITY = 32841;
export const GL_INTENSITY4 = 32842;
export const GL_INTENSITY8 = 32843;
export const GL_INTENSITY12 = 32844;
export const GL_INTENSITY16 = 32845;
export const GL_R3_G3_B2 = 10768;
export const GL_RGB4 = 32847;
export const GL_RGB5 = 32848;
export const GL_RGB8 = 32849;
export const GL_RGB10 = 32850;
export const GL_RGB12 = 32851;
export const GL_RGB16 = 32852;
export const GL_RGBA2 = 32853;
export const GL_RGBA4 = 32854;
export const GL_RGB5_A1 = 32855;
export const GL_RGBA8 = 32856;
export const GL_RGB10_A2 = 32857;
export const GL_RGBA12 = 32858;
export const GL_RGBA16 = 32859;
export const GL_TEXTURE_RED_SIZE = 32860;
export const GL_TEXTURE_GREEN_SIZE = 32861;
export const GL_TEXTURE_BLUE_SIZE = 32862;
export const GL_TEXTURE_ALPHA_SIZE = 32863;
export const GL_TEXTURE_LUMINANCE_SIZE = 32864;
export const GL_TEXTURE_INTENSITY_SIZE = 32865;
export const GL_PROXY_TEXTURE_1D = 32867;
export const GL_PROXY_TEXTURE_2D = 32868;
export const GL_TEXTURE_PRIORITY = 32870;
export const GL_TEXTURE_RESIDENT = 32871;
export const GL_TEXTURE_BINDING_1D = 32872;
export const GL_TEXTURE_BINDING_2D = 32873;
export const GL_VERTEX_ARRAY = 32884;
export const GL_NORMAL_ARRAY = 32885;
export const GL_COLOR_ARRAY = 32886;
export const GL_INDEX_ARRAY = 32887;
export const GL_TEXTURE_COORD_ARRAY = 32888;
export const GL_EDGE_FLAG_ARRAY = 32889;
export const GL_VERTEX_ARRAY_SIZE = 32890;
export const GL_VERTEX_ARRAY_TYPE = 32891;
export const GL_VERTEX_ARRAY_STRIDE = 32892;
export const GL_NORMAL_ARRAY_TYPE = 32894;
export const GL_NORMAL_ARRAY_STRIDE = 32895;
export const GL_COLOR_ARRAY_SIZE = 32897;
export const GL_COLOR_ARRAY_TYPE = 32898;
export const GL_COLOR_ARRAY_STRIDE = 32899;
export const GL_INDEX_ARRAY_TYPE = 32901;
export const GL_INDEX_ARRAY_STRIDE = 32902;
export const GL_TEXTURE_COORD_ARRAY_SIZE = 32904;
export const GL_TEXTURE_COORD_ARRAY_TYPE = 32905;
export const GL_TEXTURE_COORD_ARRAY_STRIDE = 32906;
export const GL_EDGE_FLAG_ARRAY_STRIDE = 32908;
export const GL_VERTEX_ARRAY_POINTER = 32910;
export const GL_NORMAL_ARRAY_POINTER = 32911;
export const GL_COLOR_ARRAY_POINTER = 32912;
export const GL_INDEX_ARRAY_POINTER = 32913;
export const GL_TEXTURE_COORD_ARRAY_POINTER = 32914;
export const GL_EDGE_FLAG_ARRAY_POINTER = 32915;
export const GL_V2F = 10784;
export const GL_V3F = 10785;
export const GL_C4UB_V2F = 10786;
export const GL_C4UB_V3F = 10787;
export const GL_C3F_V3F = 10788;
export const GL_N3F_V3F = 10789;
export const GL_C4F_N3F_V3F = 10790;
export const GL_T2F_V3F = 10791;
export const GL_T4F_V4F = 10792;
export const GL_T2F_C4UB_V3F = 10793;
export const GL_T2F_C3F_V3F = 10794;
export const GL_T2F_N3F_V3F = 10795;
export const GL_T2F_C4F_N3F_V3F = 10796;
export const GL_T4F_C4F_N3F_V4F = 10797;
export const GL_EXT_vertex_array = 1;
export const GL_EXT_bgra = 1;
export const GL_EXT_paletted_texture = 1;
export const GL_WIN_swap_hint = 1;
export const GL_WIN_draw_range_elements = 1;
export const GL_VERTEX_ARRAY_EXT = 32884;
export const GL_NORMAL_ARRAY_EXT = 32885;
export const GL_COLOR_ARRAY_EXT = 32886;
export const GL_INDEX_ARRAY_EXT = 32887;
export const GL_TEXTURE_COORD_ARRAY_EXT = 32888;
export const GL_EDGE_FLAG_ARRAY_EXT = 32889;
export const GL_VERTEX_ARRAY_SIZE_EXT = 32890;
export const GL_VERTEX_ARRAY_TYPE_EXT = 32891;
export const GL_VERTEX_ARRAY_STRIDE_EXT = 32892;
export const GL_VERTEX_ARRAY_COUNT_EXT = 32893;
export const GL_NORMAL_ARRAY_TYPE_EXT = 32894;
export const GL_NORMAL_ARRAY_STRIDE_EXT = 32895;
export const GL_NORMAL_ARRAY_COUNT_EXT = 32896;
export const GL_COLOR_ARRAY_SIZE_EXT = 32897;
export const GL_COLOR_ARRAY_TYPE_EXT = 32898;
export const GL_COLOR_ARRAY_STRIDE_EXT = 32899;
export const GL_COLOR_ARRAY_COUNT_EXT = 32900;
export const GL_INDEX_ARRAY_TYPE_EXT = 32901;
export const GL_INDEX_ARRAY_STRIDE_EXT = 32902;
export const GL_INDEX_ARRAY_COUNT_EXT = 32903;
export const GL_TEXTURE_COORD_ARRAY_SIZE_EXT = 32904;
export const GL_TEXTURE_COORD_ARRAY_TYPE_EXT = 32905;
export const GL_TEXTURE_COORD_ARRAY_STRIDE_EXT = 32906;
export const GL_TEXTURE_COORD_ARRAY_COUNT_EXT = 32907;
export const GL_EDGE_FLAG_ARRAY_STRIDE_EXT = 32908;
export const GL_EDGE_FLAG_ARRAY_COUNT_EXT = 32909;
export const GL_VERTEX_ARRAY_POINTER_EXT = 32910;
export const GL_NORMAL_ARRAY_POINTER_EXT = 32911;
export const GL_COLOR_ARRAY_POINTER_EXT = 32912;
export const GL_INDEX_ARRAY_POINTER_EXT = 32913;
export const GL_TEXTURE_COORD_ARRAY_POINTER_EXT = 32914;
export const GL_EDGE_FLAG_ARRAY_POINTER_EXT = 32915;
export const GL_DOUBLE_EXT = 5130;
export const GL_BGR_EXT = 32992;
export const GL_BGRA_EXT = 32993;
export const GL_COLOR_TABLE_FORMAT_EXT = 32984;
export const GL_COLOR_TABLE_WIDTH_EXT = 32985;
export const GL_COLOR_TABLE_RED_SIZE_EXT = 32986;
export const GL_COLOR_TABLE_GREEN_SIZE_EXT = 32987;
export const GL_COLOR_TABLE_BLUE_SIZE_EXT = 32988;
export const GL_COLOR_TABLE_ALPHA_SIZE_EXT = 32989;
export const GL_COLOR_TABLE_LUMINANCE_SIZE_EXT = 32990;
export const GL_COLOR_TABLE_INTENSITY_SIZE_EXT = 32991;
export const GL_COLOR_INDEX1_EXT = 32994;
export const GL_COLOR_INDEX2_EXT = 32995;
export const GL_COLOR_INDEX4_EXT = 32996;
export const GL_COLOR_INDEX8_EXT = 32997;
export const GL_COLOR_INDEX12_EXT = 32998;
export const GL_COLOR_INDEX16_EXT = 32999;
export const GL_MAX_ELEMENTS_VERTICES_WIN = 33000;
export const GL_MAX_ELEMENTS_INDICES_WIN = 33001;
export const GL_PHONG_WIN = 33002;
export const GL_PHONG_HINT_WIN = 33003;
export const GL_FOG_SPECULAR_TEXTURE_WIN = 33004;
export const GL_LOGIC_OP = 3057;
export const GL_TEXTURE_COMPONENTS = 4099;
export const GLU_VERSION_1_1 = 1;
export const GLU_VERSION_1_2 = 1;
export const GLU_INVALID_ENUM = 100900;
export const GLU_INVALID_VALUE = 100901;
export const GLU_OUT_OF_MEMORY = 100902;
export const GLU_INCOMPATIBLE_GL_VERSION = 100903;
export const GLU_VERSION = 100800;
export const GLU_EXTENSIONS = 100801;
export const GLU_TRUE = 1;
export const GLU_FALSE = 0;
export const GLU_SMOOTH = 100000;
export const GLU_FLAT = 100001;
export const GLU_NONE = 100002;
export const GLU_POINT = 100010;
export const GLU_LINE = 100011;
export const GLU_FILL = 100012;
export const GLU_SILHOUETTE = 100013;
export const GLU_OUTSIDE = 100020;
export const GLU_INSIDE = 100021;
export const GLU_TESS_WINDING_RULE = 100140;
export const GLU_TESS_BOUNDARY_ONLY = 100141;
export const GLU_TESS_TOLERANCE = 100142;
export const GLU_TESS_WINDING_ODD = 100130;
export const GLU_TESS_WINDING_NONZERO = 100131;
export const GLU_TESS_WINDING_POSITIVE = 100132;
export const GLU_TESS_WINDING_NEGATIVE = 100133;
export const GLU_TESS_WINDING_ABS_GEQ_TWO = 100134;
export const GLU_TESS_BEGIN = 100100;
export const GLU_TESS_VERTEX = 100101;
export const GLU_TESS_END = 100102;
export const GLU_TESS_ERROR = 100103;
export const GLU_TESS_EDGE_FLAG = 100104;
export const GLU_TESS_COMBINE = 100105;
export const GLU_TESS_BEGIN_DATA = 100106;
export const GLU_TESS_VERTEX_DATA = 100107;
export const GLU_TESS_END_DATA = 100108;
export const GLU_TESS_ERROR_DATA = 100109;
export const GLU_TESS_EDGE_FLAG_DATA = 100110;
export const GLU_TESS_COMBINE_DATA = 100111;
export const GLU_TESS_ERROR1 = 100151;
export const GLU_TESS_ERROR2 = 100152;
export const GLU_TESS_ERROR3 = 100153;
export const GLU_TESS_ERROR4 = 100154;
export const GLU_TESS_ERROR5 = 100155;
export const GLU_TESS_ERROR6 = 100156;
export const GLU_TESS_ERROR7 = 100157;
export const GLU_TESS_ERROR8 = 100158;
export const GLU_TESS_MISSING_BEGIN_POLYGON = 100151;
export const GLU_TESS_MISSING_BEGIN_CONTOUR = 100152;
export const GLU_TESS_MISSING_END_POLYGON = 100153;
export const GLU_TESS_MISSING_END_CONTOUR = 100154;
export const GLU_TESS_COORD_TOO_LARGE = 100155;
export const GLU_TESS_NEED_COMBINE_CALLBACK = 100156;
export const GLU_AUTO_LOAD_MATRIX = 100200;
export const GLU_CULLING = 100201;
export const GLU_SAMPLING_TOLERANCE = 100203;
export const GLU_DISPLAY_MODE = 100204;
export const GLU_PARAMETRIC_TOLERANCE = 100202;
export const GLU_SAMPLING_METHOD = 100205;
export const GLU_U_STEP = 100206;
export const GLU_V_STEP = 100207;
export const GLU_PATH_LENGTH = 100215;
export const GLU_PARAMETRIC_ERROR = 100216;
export const GLU_DOMAIN_DISTANCE = 100217;
export const GLU_MAP1_TRIM_2 = 100210;
export const GLU_MAP1_TRIM_3 = 100211;
export const GLU_OUTLINE_POLYGON = 100240;
export const GLU_OUTLINE_PATCH = 100241;
export const GLU_NURBS_ERROR1 = 100251;
export const GLU_NURBS_ERROR2 = 100252;
export const GLU_NURBS_ERROR3 = 100253;
export const GLU_NURBS_ERROR4 = 100254;
export const GLU_NURBS_ERROR5 = 100255;
export const GLU_NURBS_ERROR6 = 100256;
export const GLU_NURBS_ERROR7 = 100257;
export const GLU_NURBS_ERROR8 = 100258;
export const GLU_NURBS_ERROR9 = 100259;
export const GLU_NURBS_ERROR10 = 100260;
export const GLU_NURBS_ERROR11 = 100261;
export const GLU_NURBS_ERROR12 = 100262;
export const GLU_NURBS_ERROR13 = 100263;
export const GLU_NURBS_ERROR14 = 100264;
export const GLU_NURBS_ERROR15 = 100265;
export const GLU_NURBS_ERROR16 = 100266;
export const GLU_NURBS_ERROR17 = 100267;
export const GLU_NURBS_ERROR18 = 100268;
export const GLU_NURBS_ERROR19 = 100269;
export const GLU_NURBS_ERROR20 = 100270;
export const GLU_NURBS_ERROR21 = 100271;
export const GLU_NURBS_ERROR22 = 100272;
export const GLU_NURBS_ERROR23 = 100273;
export const GLU_NURBS_ERROR24 = 100274;
export const GLU_NURBS_ERROR25 = 100275;
export const GLU_NURBS_ERROR26 = 100276;
export const GLU_NURBS_ERROR27 = 100277;
export const GLU_NURBS_ERROR28 = 100278;
export const GLU_NURBS_ERROR29 = 100279;
export const GLU_NURBS_ERROR30 = 100280;
export const GLU_NURBS_ERROR31 = 100281;
export const GLU_NURBS_ERROR32 = 100282;
export const GLU_NURBS_ERROR33 = 100283;
export const GLU_NURBS_ERROR34 = 100284;
export const GLU_NURBS_ERROR35 = 100285;
export const GLU_NURBS_ERROR36 = 100286;
export const GLU_NURBS_ERROR37 = 100287;
export const GLU_CW = 100120;
export const GLU_CCW = 100121;
export const GLU_INTERIOR = 100122;
export const GLU_EXTERIOR = 100123;
export const GLU_UNKNOWN = 100124;
export const GLU_BEGIN = 100100;
export const GLU_VERTEX = 100101;
export const GLU_END = 100102;
export const GLU_ERROR = 100103;
export const GLU_EDGE_FLAG = 100104;
export const EMR_HEADER = 1;
export const EMR_POLYBEZIER = 2;
export const EMR_POLYGON = 3;
export const EMR_POLYLINE = 4;
export const EMR_POLYBEZIERTO = 5;
export const EMR_POLYLINETO = 6;
export const EMR_POLYPOLYLINE = 7;
export const EMR_POLYPOLYGON = 8;
export const EMR_SETWINDOWEXTEX = 9;
export const EMR_SETWINDOWORGEX = 10;
export const EMR_SETVIEWPORTEXTEX = 11;
export const EMR_SETVIEWPORTORGEX = 12;
export const EMR_SETBRUSHORGEX = 13;
export const EMR_EOF = 14;
export const EMR_SETPIXELV = 15;
export const EMR_SETMAPPERFLAGS = 16;
export const EMR_SETMAPMODE = 17;
export const EMR_SETBKMODE = 18;
export const EMR_SETPOLYFILLMODE = 19;
export const EMR_SETROP2 = 20;
export const EMR_SETSTRETCHBLTMODE = 21;
export const EMR_SETTEXTALIGN = 22;
export const EMR_SETCOLORADJUSTMENT = 23;
export const EMR_SETTEXTCOLOR = 24;
export const EMR_SETBKCOLOR = 25;
export const EMR_OFFSETCLIPRGN = 26;
export const EMR_MOVETOEX = 27;
export const EMR_SETMETARGN = 28;
export const EMR_EXCLUDECLIPRECT = 29;
export const EMR_INTERSECTCLIPRECT = 30;
export const EMR_SCALEVIEWPORTEXTEX = 31;
export const EMR_SCALEWINDOWEXTEX = 32;
export const EMR_SAVEDC = 33;
export const EMR_RESTOREDC = 34;
export const EMR_SETWORLDTRANSFORM = 35;
export const EMR_MODIFYWORLDTRANSFORM = 36;
export const EMR_SELECTOBJECT = 37;
export const EMR_CREATEPEN = 38;
export const EMR_CREATEBRUSHINDIRECT = 39;
export const EMR_DELETEOBJECT = 40;
export const EMR_ANGLEARC = 41;
export const EMR_ELLIPSE = 42;
export const EMR_RECTANGLE = 43;
export const EMR_ROUNDRECT = 44;
export const EMR_ARC = 45;
export const EMR_CHORD = 46;
export const EMR_PIE = 47;
export const EMR_SELECTPALETTE = 48;
export const EMR_CREATEPALETTE = 49;
export const EMR_SETPALETTEENTRIES = 50;
export const EMR_RESIZEPALETTE = 51;
export const EMR_REALIZEPALETTE = 52;
export const EMR_EXTFLOODFILL = 53;
export const EMR_LINETO = 54;
export const EMR_ARCTO = 55;
export const EMR_POLYDRAW = 56;
export const EMR_SETARCDIRECTION = 57;
export const EMR_SETMITERLIMIT = 58;
export const EMR_BEGINPATH = 59;
export const EMR_ENDPATH = 60;
export const EMR_CLOSEFIGURE = 61;
export const EMR_FILLPATH = 62;
export const EMR_STROKEANDFILLPATH = 63;
export const EMR_STROKEPATH = 64;
export const EMR_FLATTENPATH = 65;
export const EMR_WIDENPATH = 66;
export const EMR_SELECTCLIPPATH = 67;
export const EMR_ABORTPATH = 68;
export const EMR_GDICOMMENT = 70;
export const EMR_FILLRGN = 71;
export const EMR_FRAMERGN = 72;
export const EMR_INVERTRGN = 73;
export const EMR_PAINTRGN = 74;
export const EMR_EXTSELECTCLIPRGN = 75;
export const EMR_BITBLT = 76;
export const EMR_STRETCHBLT = 77;
export const EMR_MASKBLT = 78;
export const EMR_PLGBLT = 79;
export const EMR_SETDIBITSTODEVICE = 80;
export const EMR_STRETCHDIBITS = 81;
export const EMR_EXTCREATEFONTINDIRECTW = 82;
export const EMR_EXTTEXTOUTA = 83;
export const EMR_EXTTEXTOUTW = 84;
export const EMR_POLYBEZIER16 = 85;
export const EMR_POLYGON16 = 86;
export const EMR_POLYLINE16 = 87;
export const EMR_POLYBEZIERTO16 = 88;
export const EMR_POLYLINETO16 = 89;
export const EMR_POLYPOLYLINE16 = 90;
export const EMR_POLYPOLYGON16 = 91;
export const EMR_POLYDRAW16 = 92;
export const EMR_CREATEMONOBRUSH = 93;
export const EMR_CREATEDIBPATTERNBRUSHPT = 94;
export const EMR_EXTCREATEPEN = 95;
export const EMR_POLYTEXTOUTA = 96;
export const EMR_POLYTEXTOUTW = 97;
export const EMR_SETICMMODE = 98;
export const EMR_CREATECOLORSPACE = 99;
export const EMR_SETCOLORSPACE = 100;
export const EMR_DELETECOLORSPACE = 101;
export const EMR_GLSRECORD = 102;
export const EMR_GLSBOUNDEDRECORD = 103;
export const EMR_PIXELFORMAT = 104;
export const EMR_RESERVED_105 = 105;
export const EMR_RESERVED_106 = 106;
export const EMR_RESERVED_107 = 107;
export const EMR_RESERVED_108 = 108;
export const EMR_RESERVED_109 = 109;
export const EMR_RESERVED_110 = 110;
export const EMR_COLORCORRECTPALETTE = 111;
export const EMR_SETICMPROFILEA = 112;
export const EMR_SETICMPROFILEW = 113;
export const EMR_ALPHABLEND = 114;
export const EMR_SETLAYOUT = 115;
export const EMR_TRANSPARENTBLT = 116;
export const EMR_RESERVED_117 = 117;
export const EMR_GRADIENTFILL = 118;
export const EMR_RESERVED_119 = 119;
export const EMR_RESERVED_120 = 120;
export const EMR_COLORMATCHTOTARGETW = 121;
export const EMR_CREATECOLORSPACEW = 122;
export const EMR_MIN = 1;
export const EMR_MAX = 122;

// Structs

export type HGLRC = Deno.PointerValue;

/**
 * Windows.Win32.Graphics.OpenGL.PIXELFORMATDESCRIPTOR (size: 40)
 */
export interface PIXELFORMATDESCRIPTOR {
  /** u16 */
  nSize: number;
  /** u16 */
  nVersion: number;
  /** Windows.Win32.Graphics.OpenGL.PFD_FLAGS */
  dwFlags: PFD_FLAGS;
  /** Windows.Win32.Graphics.OpenGL.PFD_PIXEL_TYPE */
  iPixelType: PFD_PIXEL_TYPE;
  /** u8 */
  cColorBits: number;
  /** u8 */
  cRedBits: number;
  /** u8 */
  cRedShift: number;
  /** u8 */
  cGreenBits: number;
  /** u8 */
  cGreenShift: number;
  /** u8 */
  cBlueBits: number;
  /** u8 */
  cBlueShift: number;
  /** u8 */
  cAlphaBits: number;
  /** u8 */
  cAlphaShift: number;
  /** u8 */
  cAccumBits: number;
  /** u8 */
  cAccumRedBits: number;
  /** u8 */
  cAccumGreenBits: number;
  /** u8 */
  cAccumBlueBits: number;
  /** u8 */
  cAccumAlphaBits: number;
  /** u8 */
  cDepthBits: number;
  /** u8 */
  cStencilBits: number;
  /** u8 */
  cAuxBuffers: number;
  /** Windows.Win32.Graphics.OpenGL.PFD_LAYER_TYPE */
  iLayerType: PFD_LAYER_TYPE;
  /** u8 */
  bReserved: number;
  /** u32 */
  dwLayerMask: number;
  /** u32 */
  dwVisibleMask: number;
  /** u32 */
  dwDamageMask: number;
}

export const sizeofPIXELFORMATDESCRIPTOR = 40;

export function allocPIXELFORMATDESCRIPTOR(data?: Partial<PIXELFORMATDESCRIPTOR>): Uint8Array {
  const buf = new Uint8Array(sizeofPIXELFORMATDESCRIPTOR);
  const view = new DataView(buf.buffer);
  // 0x00: u16
  if (data?.nSize !== undefined) view.setUint16(0, Number(data.nSize), true);
  // 0x02: u16
  if (data?.nVersion !== undefined) view.setUint16(2, Number(data.nVersion), true);
  // 0x04: u32
  if (data?.dwFlags !== undefined) view.setUint32(4, Number(data.dwFlags), true);
  // 0x08: i8
  if (data?.iPixelType !== undefined) view.setInt8(8, Number(data.iPixelType));
  // 0x09: u8
  if (data?.cColorBits !== undefined) view.setUint8(9, Number(data.cColorBits));
  // 0x0a: u8
  if (data?.cRedBits !== undefined) view.setUint8(10, Number(data.cRedBits));
  // 0x0b: u8
  if (data?.cRedShift !== undefined) view.setUint8(11, Number(data.cRedShift));
  // 0x0c: u8
  if (data?.cGreenBits !== undefined) view.setUint8(12, Number(data.cGreenBits));
  // 0x0d: u8
  if (data?.cGreenShift !== undefined) view.setUint8(13, Number(data.cGreenShift));
  // 0x0e: u8
  if (data?.cBlueBits !== undefined) view.setUint8(14, Number(data.cBlueBits));
  // 0x0f: u8
  if (data?.cBlueShift !== undefined) view.setUint8(15, Number(data.cBlueShift));
  // 0x10: u8
  if (data?.cAlphaBits !== undefined) view.setUint8(16, Number(data.cAlphaBits));
  // 0x11: u8
  if (data?.cAlphaShift !== undefined) view.setUint8(17, Number(data.cAlphaShift));
  // 0x12: u8
  if (data?.cAccumBits !== undefined) view.setUint8(18, Number(data.cAccumBits));
  // 0x13: u8
  if (data?.cAccumRedBits !== undefined) view.setUint8(19, Number(data.cAccumRedBits));
  // 0x14: u8
  if (data?.cAccumGreenBits !== undefined) view.setUint8(20, Number(data.cAccumGreenBits));
  // 0x15: u8
  if (data?.cAccumBlueBits !== undefined) view.setUint8(21, Number(data.cAccumBlueBits));
  // 0x16: u8
  if (data?.cAccumAlphaBits !== undefined) view.setUint8(22, Number(data.cAccumAlphaBits));
  // 0x17: u8
  if (data?.cDepthBits !== undefined) view.setUint8(23, Number(data.cDepthBits));
  // 0x18: u8
  if (data?.cStencilBits !== undefined) view.setUint8(24, Number(data.cStencilBits));
  // 0x19: u8
  if (data?.cAuxBuffers !== undefined) view.setUint8(25, Number(data.cAuxBuffers));
  // 0x1a: i8
  if (data?.iLayerType !== undefined) view.setInt8(26, Number(data.iLayerType));
  // 0x1b: u8
  if (data?.bReserved !== undefined) view.setUint8(27, Number(data.bReserved));
  // 0x1c: u32
  if (data?.dwLayerMask !== undefined) view.setUint32(28, Number(data.dwLayerMask), true);
  // 0x20: u32
  if (data?.dwVisibleMask !== undefined) view.setUint32(32, Number(data.dwVisibleMask), true);
  // 0x24: u32
  if (data?.dwDamageMask !== undefined) view.setUint32(36, Number(data.dwDamageMask), true);
  return buf;
}

export class PIXELFORMATDESCRIPTORView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u16
  get nSize(): number {
    return this.view.getUint16(0, true);
  }

  // 0x02: u16
  get nVersion(): number {
    return this.view.getUint16(2, true);
  }

  // 0x04: u32
  get dwFlags(): number {
    return this.view.getUint32(4, true);
  }

  // 0x08: i8
  get iPixelType(): number {
    return this.view.getInt8(8);
  }

  // 0x09: u8
  get cColorBits(): number {
    return this.view.getUint8(9);
  }

  // 0x0a: u8
  get cRedBits(): number {
    return this.view.getUint8(10);
  }

  // 0x0b: u8
  get cRedShift(): number {
    return this.view.getUint8(11);
  }

  // 0x0c: u8
  get cGreenBits(): number {
    return this.view.getUint8(12);
  }

  // 0x0d: u8
  get cGreenShift(): number {
    return this.view.getUint8(13);
  }

  // 0x0e: u8
  get cBlueBits(): number {
    return this.view.getUint8(14);
  }

  // 0x0f: u8
  get cBlueShift(): number {
    return this.view.getUint8(15);
  }

  // 0x10: u8
  get cAlphaBits(): number {
    return this.view.getUint8(16);
  }

  // 0x11: u8
  get cAlphaShift(): number {
    return this.view.getUint8(17);
  }

  // 0x12: u8
  get cAccumBits(): number {
    return this.view.getUint8(18);
  }

  // 0x13: u8
  get cAccumRedBits(): number {
    return this.view.getUint8(19);
  }

  // 0x14: u8
  get cAccumGreenBits(): number {
    return this.view.getUint8(20);
  }

  // 0x15: u8
  get cAccumBlueBits(): number {
    return this.view.getUint8(21);
  }

  // 0x16: u8
  get cAccumAlphaBits(): number {
    return this.view.getUint8(22);
  }

  // 0x17: u8
  get cDepthBits(): number {
    return this.view.getUint8(23);
  }

  // 0x18: u8
  get cStencilBits(): number {
    return this.view.getUint8(24);
  }

  // 0x19: u8
  get cAuxBuffers(): number {
    return this.view.getUint8(25);
  }

  // 0x1a: i8
  get iLayerType(): number {
    return this.view.getInt8(26);
  }

  // 0x1b: u8
  get bReserved(): number {
    return this.view.getUint8(27);
  }

  // 0x1c: u32
  get dwLayerMask(): number {
    return this.view.getUint32(28, true);
  }

  // 0x20: u32
  get dwVisibleMask(): number {
    return this.view.getUint32(32, true);
  }

  // 0x24: u32
  get dwDamageMask(): number {
    return this.view.getUint32(36, true);
  }

  // 0x00: u16
  set nSize(value: number) {
    this.view.setUint16(0, value, true);
  }

  // 0x02: u16
  set nVersion(value: number) {
    this.view.setUint16(2, value, true);
  }

  // 0x04: u32
  set dwFlags(value: number) {
    this.view.setUint32(4, value, true);
  }

  // 0x08: i8
  set iPixelType(value: number) {
    this.view.setInt8(8, value);
  }

  // 0x09: u8
  set cColorBits(value: number) {
    this.view.setUint8(9, value);
  }

  // 0x0a: u8
  set cRedBits(value: number) {
    this.view.setUint8(10, value);
  }

  // 0x0b: u8
  set cRedShift(value: number) {
    this.view.setUint8(11, value);
  }

  // 0x0c: u8
  set cGreenBits(value: number) {
    this.view.setUint8(12, value);
  }

  // 0x0d: u8
  set cGreenShift(value: number) {
    this.view.setUint8(13, value);
  }

  // 0x0e: u8
  set cBlueBits(value: number) {
    this.view.setUint8(14, value);
  }

  // 0x0f: u8
  set cBlueShift(value: number) {
    this.view.setUint8(15, value);
  }

  // 0x10: u8
  set cAlphaBits(value: number) {
    this.view.setUint8(16, value);
  }

  // 0x11: u8
  set cAlphaShift(value: number) {
    this.view.setUint8(17, value);
  }

  // 0x12: u8
  set cAccumBits(value: number) {
    this.view.setUint8(18, value);
  }

  // 0x13: u8
  set cAccumRedBits(value: number) {
    this.view.setUint8(19, value);
  }

  // 0x14: u8
  set cAccumGreenBits(value: number) {
    this.view.setUint8(20, value);
  }

  // 0x15: u8
  set cAccumBlueBits(value: number) {
    this.view.setUint8(21, value);
  }

  // 0x16: u8
  set cAccumAlphaBits(value: number) {
    this.view.setUint8(22, value);
  }

  // 0x17: u8
  set cDepthBits(value: number) {
    this.view.setUint8(23, value);
  }

  // 0x18: u8
  set cStencilBits(value: number) {
    this.view.setUint8(24, value);
  }

  // 0x19: u8
  set cAuxBuffers(value: number) {
    this.view.setUint8(25, value);
  }

  // 0x1a: i8
  set iLayerType(value: number) {
    this.view.setInt8(26, value);
  }

  // 0x1b: u8
  set bReserved(value: number) {
    this.view.setUint8(27, value);
  }

  // 0x1c: u32
  set dwLayerMask(value: number) {
    this.view.setUint32(28, value, true);
  }

  // 0x20: u32
  set dwVisibleMask(value: number) {
    this.view.setUint32(32, value, true);
  }

  // 0x24: u32
  set dwDamageMask(value: number) {
    this.view.setUint32(36, value, true);
  }
}

/**
 * Windows.Win32.Graphics.Gdi.EMR (size: 8)
 */
export interface EMR {
  /** Windows.Win32.Graphics.Gdi.ENHANCED_METAFILE_RECORD_TYPE */
  iType: ENHANCED_METAFILE_RECORD_TYPE;
  /** u32 */
  nSize: number;
}

export const sizeofEMR = 8;

export function allocEMR(data?: Partial<EMR>): Uint8Array {
  const buf = new Uint8Array(sizeofEMR);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.iType !== undefined) view.setUint32(0, Number(data.iType), true);
  // 0x04: u32
  if (data?.nSize !== undefined) view.setUint32(4, Number(data.nSize), true);
  return buf;
}

export class EMRView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get iType(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: u32
  get nSize(): number {
    return this.view.getUint32(4, true);
  }

  // 0x00: u32
  set iType(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: u32
  set nSize(value: number) {
    this.view.setUint32(4, value, true);
  }
}

/**
 * Windows.Win32.Graphics.OpenGL.EMRPIXELFORMAT (size: 16)
 */
export interface EMRPIXELFORMAT {
  /** Windows.Win32.Graphics.Gdi.EMR */
  emr: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Graphics.OpenGL.PIXELFORMATDESCRIPTOR */
  pfd: Uint8Array | Deno.PointerValue | null;
}

export const sizeofEMRPIXELFORMAT = 16;

export function allocEMRPIXELFORMAT(data?: Partial<EMRPIXELFORMAT>): Uint8Array {
  const buf = new Uint8Array(sizeofEMRPIXELFORMAT);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.emr !== undefined) view.setBigUint64(0, data.emr === null ? 0n : BigInt(util.toPointer(data.emr)), true);
  // 0x08: pointer
  if (data?.pfd !== undefined) view.setBigUint64(8, data.pfd === null ? 0n : BigInt(util.toPointer(data.pfd)), true);
  return buf;
}

export class EMRPIXELFORMATView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get emr(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(0, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x08: pointer
  get pfd(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(8, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: pointer
  set emr(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(0, BigInt(util.toPointer(value)), true);
  }

  // 0x08: pointer
  set pfd(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(8, BigInt(util.toPointer(value)), true);
  }
}

/**
 * Windows.Win32.Graphics.OpenGL.POINTFLOAT (size: 8)
 */
export interface POINTFLOAT {
  /** f32 */
  x: number;
  /** f32 */
  y: number;
}

export const sizeofPOINTFLOAT = 8;

export function allocPOINTFLOAT(data?: Partial<POINTFLOAT>): Uint8Array {
  const buf = new Uint8Array(sizeofPOINTFLOAT);
  const view = new DataView(buf.buffer);
  // 0x00: f32
  if (data?.x !== undefined) view.setFloat32(0, Number(data.x), true);
  // 0x04: f32
  if (data?.y !== undefined) view.setFloat32(4, Number(data.y), true);
  return buf;
}

export class POINTFLOATView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: f32
  get x(): number {
    return this.view.getFloat32(0, true);
  }

  // 0x04: f32
  get y(): number {
    return this.view.getFloat32(4, true);
  }

  // 0x00: f32
  set x(value: number) {
    this.view.setFloat32(0, value, true);
  }

  // 0x04: f32
  set y(value: number) {
    this.view.setFloat32(4, value, true);
  }
}

/**
 * Windows.Win32.Graphics.OpenGL.GLYPHMETRICSFLOAT (size: 24)
 */
export interface GLYPHMETRICSFLOAT {
  /** f32 */
  gmfBlackBoxX: number;
  /** f32 */
  gmfBlackBoxY: number;
  /** Windows.Win32.Graphics.OpenGL.POINTFLOAT */
  gmfptGlyphOrigin: Uint8Array | Deno.PointerValue | null;
  /** f32 */
  gmfCellIncX: number;
  /** f32 */
  gmfCellIncY: number;
}

export const sizeofGLYPHMETRICSFLOAT = 24;

export function allocGLYPHMETRICSFLOAT(data?: Partial<GLYPHMETRICSFLOAT>): Uint8Array {
  const buf = new Uint8Array(sizeofGLYPHMETRICSFLOAT);
  const view = new DataView(buf.buffer);
  // 0x00: f32
  if (data?.gmfBlackBoxX !== undefined) view.setFloat32(0, Number(data.gmfBlackBoxX), true);
  // 0x04: f32
  if (data?.gmfBlackBoxY !== undefined) view.setFloat32(4, Number(data.gmfBlackBoxY), true);
  // 0x08: pointer
  if (data?.gmfptGlyphOrigin !== undefined) view.setBigUint64(8, data.gmfptGlyphOrigin === null ? 0n : BigInt(util.toPointer(data.gmfptGlyphOrigin)), true);
  // 0x10: f32
  if (data?.gmfCellIncX !== undefined) view.setFloat32(16, Number(data.gmfCellIncX), true);
  // 0x14: f32
  if (data?.gmfCellIncY !== undefined) view.setFloat32(20, Number(data.gmfCellIncY), true);
  return buf;
}

export class GLYPHMETRICSFLOATView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: f32
  get gmfBlackBoxX(): number {
    return this.view.getFloat32(0, true);
  }

  // 0x04: f32
  get gmfBlackBoxY(): number {
    return this.view.getFloat32(4, true);
  }

  // 0x08: pointer
  get gmfptGlyphOrigin(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(8, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x10: f32
  get gmfCellIncX(): number {
    return this.view.getFloat32(16, true);
  }

  // 0x14: f32
  get gmfCellIncY(): number {
    return this.view.getFloat32(20, true);
  }

  // 0x00: f32
  set gmfBlackBoxX(value: number) {
    this.view.setFloat32(0, value, true);
  }

  // 0x04: f32
  set gmfBlackBoxY(value: number) {
    this.view.setFloat32(4, value, true);
  }

  // 0x08: pointer
  set gmfptGlyphOrigin(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(8, BigInt(util.toPointer(value)), true);
  }

  // 0x10: f32
  set gmfCellIncX(value: number) {
    this.view.setFloat32(16, value, true);
  }

  // 0x14: f32
  set gmfCellIncY(value: number) {
    this.view.setFloat32(20, value, true);
  }
}

export type COLORREF = number;

/**
 * Windows.Win32.Graphics.OpenGL.LAYERPLANEDESCRIPTOR (size: 40)
 */
export interface LAYERPLANEDESCRIPTOR {
  /** u16 */
  nSize: number;
  /** u16 */
  nVersion: number;
  /** u32 */
  dwFlags: number;
  /** u8 */
  iPixelType: number;
  /** u8 */
  cColorBits: number;
  /** u8 */
  cRedBits: number;
  /** u8 */
  cRedShift: number;
  /** u8 */
  cGreenBits: number;
  /** u8 */
  cGreenShift: number;
  /** u8 */
  cBlueBits: number;
  /** u8 */
  cBlueShift: number;
  /** u8 */
  cAlphaBits: number;
  /** u8 */
  cAlphaShift: number;
  /** u8 */
  cAccumBits: number;
  /** u8 */
  cAccumRedBits: number;
  /** u8 */
  cAccumGreenBits: number;
  /** u8 */
  cAccumBlueBits: number;
  /** u8 */
  cAccumAlphaBits: number;
  /** u8 */
  cDepthBits: number;
  /** u8 */
  cStencilBits: number;
  /** u8 */
  cAuxBuffers: number;
  /** u8 */
  iLayerPlane: number;
  /** u8 */
  bReserved: number;
  /** Windows.Win32.Foundation.COLORREF */
  crTransparent: Uint8Array | Deno.PointerValue | null;
}

export const sizeofLAYERPLANEDESCRIPTOR = 40;

export function allocLAYERPLANEDESCRIPTOR(data?: Partial<LAYERPLANEDESCRIPTOR>): Uint8Array {
  const buf = new Uint8Array(sizeofLAYERPLANEDESCRIPTOR);
  const view = new DataView(buf.buffer);
  // 0x00: u16
  if (data?.nSize !== undefined) view.setUint16(0, Number(data.nSize), true);
  // 0x02: u16
  if (data?.nVersion !== undefined) view.setUint16(2, Number(data.nVersion), true);
  // 0x04: u32
  if (data?.dwFlags !== undefined) view.setUint32(4, Number(data.dwFlags), true);
  // 0x08: u8
  if (data?.iPixelType !== undefined) view.setUint8(8, Number(data.iPixelType));
  // 0x09: u8
  if (data?.cColorBits !== undefined) view.setUint8(9, Number(data.cColorBits));
  // 0x0a: u8
  if (data?.cRedBits !== undefined) view.setUint8(10, Number(data.cRedBits));
  // 0x0b: u8
  if (data?.cRedShift !== undefined) view.setUint8(11, Number(data.cRedShift));
  // 0x0c: u8
  if (data?.cGreenBits !== undefined) view.setUint8(12, Number(data.cGreenBits));
  // 0x0d: u8
  if (data?.cGreenShift !== undefined) view.setUint8(13, Number(data.cGreenShift));
  // 0x0e: u8
  if (data?.cBlueBits !== undefined) view.setUint8(14, Number(data.cBlueBits));
  // 0x0f: u8
  if (data?.cBlueShift !== undefined) view.setUint8(15, Number(data.cBlueShift));
  // 0x10: u8
  if (data?.cAlphaBits !== undefined) view.setUint8(16, Number(data.cAlphaBits));
  // 0x11: u8
  if (data?.cAlphaShift !== undefined) view.setUint8(17, Number(data.cAlphaShift));
  // 0x12: u8
  if (data?.cAccumBits !== undefined) view.setUint8(18, Number(data.cAccumBits));
  // 0x13: u8
  if (data?.cAccumRedBits !== undefined) view.setUint8(19, Number(data.cAccumRedBits));
  // 0x14: u8
  if (data?.cAccumGreenBits !== undefined) view.setUint8(20, Number(data.cAccumGreenBits));
  // 0x15: u8
  if (data?.cAccumBlueBits !== undefined) view.setUint8(21, Number(data.cAccumBlueBits));
  // 0x16: u8
  if (data?.cAccumAlphaBits !== undefined) view.setUint8(22, Number(data.cAccumAlphaBits));
  // 0x17: u8
  if (data?.cDepthBits !== undefined) view.setUint8(23, Number(data.cDepthBits));
  // 0x18: u8
  if (data?.cStencilBits !== undefined) view.setUint8(24, Number(data.cStencilBits));
  // 0x19: u8
  if (data?.cAuxBuffers !== undefined) view.setUint8(25, Number(data.cAuxBuffers));
  // 0x1a: u8
  if (data?.iLayerPlane !== undefined) view.setUint8(26, Number(data.iLayerPlane));
  // 0x1b: u8
  if (data?.bReserved !== undefined) view.setUint8(27, Number(data.bReserved));
  // 0x1c: pad4
  // 0x20: pointer
  if (data?.crTransparent !== undefined) view.setBigUint64(32, data.crTransparent === null ? 0n : BigInt(util.toPointer(data.crTransparent)), true);
  return buf;
}

export class LAYERPLANEDESCRIPTORView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u16
  get nSize(): number {
    return this.view.getUint16(0, true);
  }

  // 0x02: u16
  get nVersion(): number {
    return this.view.getUint16(2, true);
  }

  // 0x04: u32
  get dwFlags(): number {
    return this.view.getUint32(4, true);
  }

  // 0x08: u8
  get iPixelType(): number {
    return this.view.getUint8(8);
  }

  // 0x09: u8
  get cColorBits(): number {
    return this.view.getUint8(9);
  }

  // 0x0a: u8
  get cRedBits(): number {
    return this.view.getUint8(10);
  }

  // 0x0b: u8
  get cRedShift(): number {
    return this.view.getUint8(11);
  }

  // 0x0c: u8
  get cGreenBits(): number {
    return this.view.getUint8(12);
  }

  // 0x0d: u8
  get cGreenShift(): number {
    return this.view.getUint8(13);
  }

  // 0x0e: u8
  get cBlueBits(): number {
    return this.view.getUint8(14);
  }

  // 0x0f: u8
  get cBlueShift(): number {
    return this.view.getUint8(15);
  }

  // 0x10: u8
  get cAlphaBits(): number {
    return this.view.getUint8(16);
  }

  // 0x11: u8
  get cAlphaShift(): number {
    return this.view.getUint8(17);
  }

  // 0x12: u8
  get cAccumBits(): number {
    return this.view.getUint8(18);
  }

  // 0x13: u8
  get cAccumRedBits(): number {
    return this.view.getUint8(19);
  }

  // 0x14: u8
  get cAccumGreenBits(): number {
    return this.view.getUint8(20);
  }

  // 0x15: u8
  get cAccumBlueBits(): number {
    return this.view.getUint8(21);
  }

  // 0x16: u8
  get cAccumAlphaBits(): number {
    return this.view.getUint8(22);
  }

  // 0x17: u8
  get cDepthBits(): number {
    return this.view.getUint8(23);
  }

  // 0x18: u8
  get cStencilBits(): number {
    return this.view.getUint8(24);
  }

  // 0x19: u8
  get cAuxBuffers(): number {
    return this.view.getUint8(25);
  }

  // 0x1a: u8
  get iLayerPlane(): number {
    return this.view.getUint8(26);
  }

  // 0x1b: u8
  get bReserved(): number {
    return this.view.getUint8(27);
  }

  // 0x1c: pad4

  // 0x20: pointer
  get crTransparent(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(32, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: u16
  set nSize(value: number) {
    this.view.setUint16(0, value, true);
  }

  // 0x02: u16
  set nVersion(value: number) {
    this.view.setUint16(2, value, true);
  }

  // 0x04: u32
  set dwFlags(value: number) {
    this.view.setUint32(4, value, true);
  }

  // 0x08: u8
  set iPixelType(value: number) {
    this.view.setUint8(8, value);
  }

  // 0x09: u8
  set cColorBits(value: number) {
    this.view.setUint8(9, value);
  }

  // 0x0a: u8
  set cRedBits(value: number) {
    this.view.setUint8(10, value);
  }

  // 0x0b: u8
  set cRedShift(value: number) {
    this.view.setUint8(11, value);
  }

  // 0x0c: u8
  set cGreenBits(value: number) {
    this.view.setUint8(12, value);
  }

  // 0x0d: u8
  set cGreenShift(value: number) {
    this.view.setUint8(13, value);
  }

  // 0x0e: u8
  set cBlueBits(value: number) {
    this.view.setUint8(14, value);
  }

  // 0x0f: u8
  set cBlueShift(value: number) {
    this.view.setUint8(15, value);
  }

  // 0x10: u8
  set cAlphaBits(value: number) {
    this.view.setUint8(16, value);
  }

  // 0x11: u8
  set cAlphaShift(value: number) {
    this.view.setUint8(17, value);
  }

  // 0x12: u8
  set cAccumBits(value: number) {
    this.view.setUint8(18, value);
  }

  // 0x13: u8
  set cAccumRedBits(value: number) {
    this.view.setUint8(19, value);
  }

  // 0x14: u8
  set cAccumGreenBits(value: number) {
    this.view.setUint8(20, value);
  }

  // 0x15: u8
  set cAccumBlueBits(value: number) {
    this.view.setUint8(21, value);
  }

  // 0x16: u8
  set cAccumAlphaBits(value: number) {
    this.view.setUint8(22, value);
  }

  // 0x17: u8
  set cDepthBits(value: number) {
    this.view.setUint8(23, value);
  }

  // 0x18: u8
  set cStencilBits(value: number) {
    this.view.setUint8(24, value);
  }

  // 0x19: u8
  set cAuxBuffers(value: number) {
    this.view.setUint8(25, value);
  }

  // 0x1a: u8
  set iLayerPlane(value: number) {
    this.view.setUint8(26, value);
  }

  // 0x1b: u8
  set bReserved(value: number) {
    this.view.setUint8(27, value);
  }

  // 0x1c: pad4

  // 0x20: pointer
  set crTransparent(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(32, BigInt(util.toPointer(value)), true);
  }
}

export type HDC = Deno.PointerValue;

export type BOOL = number;

export type HENHMETAFILE = Deno.PointerValue;

export type PSTR = Deno.PointerValue | Uint8Array | null;

export type PWSTR = Deno.PointerValue | Uint8Array | null;

// Native Libraries

try {
  var libGDI32_dll = Deno.dlopen("GDI32.dll", {
    ChoosePixelFormat: {
      parameters: ["pointer", "pointer"],
      result: "i32",
    },
    DescribePixelFormat: {
      parameters: ["pointer", "i8", "u32", "pointer"],
      result: "i32",
    },
    GetPixelFormat: {
      parameters: ["pointer"],
      result: "i32",
    },
    SetPixelFormat: {
      parameters: ["pointer", "i32", "pointer"],
      result: "i32",
    },
    GetEnhMetaFilePixelFormat: {
      parameters: ["pointer", "u32", "pointer"],
      result: "u32",
    },
    SwapBuffers: {
      parameters: ["pointer"],
      result: "i32",
    },
  }).symbols;
} catch(e) { /* ignore */ }

try {
  var libOPENGL32_dll = Deno.dlopen("OPENGL32.dll", {
    wglCopyContext: {
      parameters: ["pointer", "pointer", "u32"],
      result: "i32",
    },
    wglCreateContext: {
      parameters: ["pointer"],
      result: "pointer",
    },
    wglCreateLayerContext: {
      parameters: ["pointer", "i32"],
      result: "pointer",
    },
    wglDeleteContext: {
      parameters: ["pointer"],
      result: "i32",
    },
    wglGetCurrentContext: {
      parameters: [],
      result: "pointer",
    },
    wglGetCurrentDC: {
      parameters: [],
      result: "pointer",
    },
    wglGetProcAddress: {
      parameters: ["buffer"],
      result: "pointer",
    },
    wglMakeCurrent: {
      parameters: ["pointer", "pointer"],
      result: "i32",
    },
    wglShareLists: {
      parameters: ["pointer", "pointer"],
      result: "i32",
    },
    wglUseFontBitmapsA: {
      parameters: ["pointer", "u32", "u32", "u32"],
      result: "i32",
    },
    wglUseFontBitmapsW: {
      parameters: ["pointer", "u32", "u32", "u32"],
      result: "i32",
    },
    wglUseFontOutlinesA: {
      parameters: ["pointer", "u32", "u32", "u32", "f32", "f32", "i32", "pointer"],
      result: "i32",
    },
    wglUseFontOutlinesW: {
      parameters: ["pointer", "u32", "u32", "u32", "f32", "f32", "i32", "pointer"],
      result: "i32",
    },
    wglDescribeLayerPlane: {
      parameters: ["pointer", "i32", "i32", "u32", "pointer"],
      result: "i32",
    },
    wglSetLayerPaletteEntries: {
      parameters: ["pointer", "i32", "i32", "i32", "pointer"],
      result: "i32",
    },
    wglGetLayerPaletteEntries: {
      parameters: ["pointer", "i32", "i32", "i32", "pointer"],
      result: "i32",
    },
    wglRealizeLayerPalette: {
      parameters: ["pointer", "i32", "i32"],
      result: "i32",
    },
    wglSwapLayerBuffers: {
      parameters: ["pointer", "u32"],
      result: "i32",
    },
    glAccum: {
      parameters: ["u32", "f32"],
      result: "void",
    },
    glAlphaFunc: {
      parameters: ["u32", "f32"],
      result: "void",
    },
    glAreTexturesResident: {
      parameters: ["i32", "pointer", "pointer"],
      result: "u8",
    },
    glArrayElement: {
      parameters: ["i32"],
      result: "void",
    },
    glBegin: {
      parameters: ["u32"],
      result: "void",
    },
    glBindTexture: {
      parameters: ["u32", "u32"],
      result: "void",
    },
    glBitmap: {
      parameters: ["i32", "i32", "f32", "f32", "f32", "f32", "pointer"],
      result: "void",
    },
    glBlendFunc: {
      parameters: ["u32", "u32"],
      result: "void",
    },
    glCallList: {
      parameters: ["u32"],
      result: "void",
    },
    glCallLists: {
      parameters: ["i32", "u32", "pointer"],
      result: "void",
    },
    glClear: {
      parameters: ["u32"],
      result: "void",
    },
    glClearAccum: {
      parameters: ["f32", "f32", "f32", "f32"],
      result: "void",
    },
    glClearColor: {
      parameters: ["f32", "f32", "f32", "f32"],
      result: "void",
    },
    glClearDepth: {
      parameters: ["f64"],
      result: "void",
    },
    glClearIndex: {
      parameters: ["f32"],
      result: "void",
    },
    glClearStencil: {
      parameters: ["i32"],
      result: "void",
    },
    glClipPlane: {
      parameters: ["u32", "pointer"],
      result: "void",
    },
    glColor3b: {
      parameters: ["i8", "i8", "i8"],
      result: "void",
    },
    glColor3bv: {
      parameters: ["pointer"],
      result: "void",
    },
    glColor3d: {
      parameters: ["f64", "f64", "f64"],
      result: "void",
    },
    glColor3dv: {
      parameters: ["pointer"],
      result: "void",
    },
    glColor3f: {
      parameters: ["f32", "f32", "f32"],
      result: "void",
    },
    glColor3fv: {
      parameters: ["pointer"],
      result: "void",
    },
    glColor3i: {
      parameters: ["i32", "i32", "i32"],
      result: "void",
    },
    glColor3iv: {
      parameters: ["pointer"],
      result: "void",
    },
    glColor3s: {
      parameters: ["i16", "i16", "i16"],
      result: "void",
    },
    glColor3sv: {
      parameters: ["pointer"],
      result: "void",
    },
    glColor3ub: {
      parameters: ["u8", "u8", "u8"],
      result: "void",
    },
    glColor3ubv: {
      parameters: ["pointer"],
      result: "void",
    },
    glColor3ui: {
      parameters: ["u32", "u32", "u32"],
      result: "void",
    },
    glColor3uiv: {
      parameters: ["pointer"],
      result: "void",
    },
    glColor3us: {
      parameters: ["u16", "u16", "u16"],
      result: "void",
    },
    glColor3usv: {
      parameters: ["pointer"],
      result: "void",
    },
    glColor4b: {
      parameters: ["i8", "i8", "i8", "i8"],
      result: "void",
    },
    glColor4bv: {
      parameters: ["pointer"],
      result: "void",
    },
    glColor4d: {
      parameters: ["f64", "f64", "f64", "f64"],
      result: "void",
    },
    glColor4dv: {
      parameters: ["pointer"],
      result: "void",
    },
    glColor4f: {
      parameters: ["f32", "f32", "f32", "f32"],
      result: "void",
    },
    glColor4fv: {
      parameters: ["pointer"],
      result: "void",
    },
    glColor4i: {
      parameters: ["i32", "i32", "i32", "i32"],
      result: "void",
    },
    glColor4iv: {
      parameters: ["pointer"],
      result: "void",
    },
    glColor4s: {
      parameters: ["i16", "i16", "i16", "i16"],
      result: "void",
    },
    glColor4sv: {
      parameters: ["pointer"],
      result: "void",
    },
    glColor4ub: {
      parameters: ["u8", "u8", "u8", "u8"],
      result: "void",
    },
    glColor4ubv: {
      parameters: ["pointer"],
      result: "void",
    },
    glColor4ui: {
      parameters: ["u32", "u32", "u32", "u32"],
      result: "void",
    },
    glColor4uiv: {
      parameters: ["pointer"],
      result: "void",
    },
    glColor4us: {
      parameters: ["u16", "u16", "u16", "u16"],
      result: "void",
    },
    glColor4usv: {
      parameters: ["pointer"],
      result: "void",
    },
    glColorMask: {
      parameters: ["u8", "u8", "u8", "u8"],
      result: "void",
    },
    glColorMaterial: {
      parameters: ["u32", "u32"],
      result: "void",
    },
    glColorPointer: {
      parameters: ["i32", "u32", "i32", "pointer"],
      result: "void",
    },
    glCopyPixels: {
      parameters: ["i32", "i32", "i32", "i32", "u32"],
      result: "void",
    },
    glCopyTexImage1D: {
      parameters: ["u32", "i32", "u32", "i32", "i32", "i32", "i32"],
      result: "void",
    },
    glCopyTexImage2D: {
      parameters: ["u32", "i32", "u32", "i32", "i32", "i32", "i32", "i32"],
      result: "void",
    },
    glCopyTexSubImage1D: {
      parameters: ["u32", "i32", "i32", "i32", "i32", "i32"],
      result: "void",
    },
    glCopyTexSubImage2D: {
      parameters: ["u32", "i32", "i32", "i32", "i32", "i32", "i32", "i32"],
      result: "void",
    },
    glCullFace: {
      parameters: ["u32"],
      result: "void",
    },
    glDeleteLists: {
      parameters: ["u32", "i32"],
      result: "void",
    },
    glDeleteTextures: {
      parameters: ["i32", "pointer"],
      result: "void",
    },
    glDepthFunc: {
      parameters: ["u32"],
      result: "void",
    },
    glDepthMask: {
      parameters: ["u8"],
      result: "void",
    },
    glDepthRange: {
      parameters: ["f64", "f64"],
      result: "void",
    },
    glDisable: {
      parameters: ["u32"],
      result: "void",
    },
    glDisableClientState: {
      parameters: ["u32"],
      result: "void",
    },
    glDrawArrays: {
      parameters: ["u32", "i32", "i32"],
      result: "void",
    },
    glDrawBuffer: {
      parameters: ["u32"],
      result: "void",
    },
    glDrawElements: {
      parameters: ["u32", "i32", "u32", "pointer"],
      result: "void",
    },
    glDrawPixels: {
      parameters: ["i32", "i32", "u32", "u32", "pointer"],
      result: "void",
    },
    glEdgeFlag: {
      parameters: ["u8"],
      result: "void",
    },
    glEdgeFlagPointer: {
      parameters: ["i32", "pointer"],
      result: "void",
    },
    glEdgeFlagv: {
      parameters: ["pointer"],
      result: "void",
    },
    glEnable: {
      parameters: ["u32"],
      result: "void",
    },
    glEnableClientState: {
      parameters: ["u32"],
      result: "void",
    },
    glEnd: {
      parameters: [],
      result: "void",
    },
    glEndList: {
      parameters: [],
      result: "void",
    },
    glEvalCoord1d: {
      parameters: ["f64"],
      result: "void",
    },
    glEvalCoord1dv: {
      parameters: ["pointer"],
      result: "void",
    },
    glEvalCoord1f: {
      parameters: ["f32"],
      result: "void",
    },
    glEvalCoord1fv: {
      parameters: ["pointer"],
      result: "void",
    },
    glEvalCoord2d: {
      parameters: ["f64", "f64"],
      result: "void",
    },
    glEvalCoord2dv: {
      parameters: ["pointer"],
      result: "void",
    },
    glEvalCoord2f: {
      parameters: ["f32", "f32"],
      result: "void",
    },
    glEvalCoord2fv: {
      parameters: ["pointer"],
      result: "void",
    },
    glEvalMesh1: {
      parameters: ["u32", "i32", "i32"],
      result: "void",
    },
    glEvalMesh2: {
      parameters: ["u32", "i32", "i32", "i32", "i32"],
      result: "void",
    },
    glEvalPoint1: {
      parameters: ["i32"],
      result: "void",
    },
    glEvalPoint2: {
      parameters: ["i32", "i32"],
      result: "void",
    },
    glFeedbackBuffer: {
      parameters: ["i32", "u32", "pointer"],
      result: "void",
    },
    glFinish: {
      parameters: [],
      result: "void",
    },
    glFlush: {
      parameters: [],
      result: "void",
    },
    glFogf: {
      parameters: ["u32", "f32"],
      result: "void",
    },
    glFogfv: {
      parameters: ["u32", "pointer"],
      result: "void",
    },
    glFogi: {
      parameters: ["u32", "i32"],
      result: "void",
    },
    glFogiv: {
      parameters: ["u32", "pointer"],
      result: "void",
    },
    glFrontFace: {
      parameters: ["u32"],
      result: "void",
    },
    glFrustum: {
      parameters: ["f64", "f64", "f64", "f64", "f64", "f64"],
      result: "void",
    },
    glGenLists: {
      parameters: ["i32"],
      result: "u32",
    },
    glGenTextures: {
      parameters: ["i32", "pointer"],
      result: "void",
    },
    glGetBooleanv: {
      parameters: ["u32", "pointer"],
      result: "void",
    },
    glGetClipPlane: {
      parameters: ["u32", "pointer"],
      result: "void",
    },
    glGetDoublev: {
      parameters: ["u32", "pointer"],
      result: "void",
    },
    glGetError: {
      parameters: [],
      result: "u32",
    },
    glGetFloatv: {
      parameters: ["u32", "pointer"],
      result: "void",
    },
    glGetIntegerv: {
      parameters: ["u32", "pointer"],
      result: "void",
    },
    glGetLightfv: {
      parameters: ["u32", "u32", "pointer"],
      result: "void",
    },
    glGetLightiv: {
      parameters: ["u32", "u32", "pointer"],
      result: "void",
    },
    glGetMapdv: {
      parameters: ["u32", "u32", "pointer"],
      result: "void",
    },
    glGetMapfv: {
      parameters: ["u32", "u32", "pointer"],
      result: "void",
    },
    glGetMapiv: {
      parameters: ["u32", "u32", "pointer"],
      result: "void",
    },
    glGetMaterialfv: {
      parameters: ["u32", "u32", "pointer"],
      result: "void",
    },
    glGetMaterialiv: {
      parameters: ["u32", "u32", "pointer"],
      result: "void",
    },
    glGetPixelMapfv: {
      parameters: ["u32", "pointer"],
      result: "void",
    },
    glGetPixelMapuiv: {
      parameters: ["u32", "pointer"],
      result: "void",
    },
    glGetPixelMapusv: {
      parameters: ["u32", "pointer"],
      result: "void",
    },
    glGetPointerv: {
      parameters: ["u32", "pointer"],
      result: "void",
    },
    glGetPolygonStipple: {
      parameters: ["pointer"],
      result: "void",
    },
    glGetString: {
      parameters: ["u32"],
      result: "pointer",
    },
    glGetTexEnvfv: {
      parameters: ["u32", "u32", "pointer"],
      result: "void",
    },
    glGetTexEnviv: {
      parameters: ["u32", "u32", "pointer"],
      result: "void",
    },
    glGetTexGendv: {
      parameters: ["u32", "u32", "pointer"],
      result: "void",
    },
    glGetTexGenfv: {
      parameters: ["u32", "u32", "pointer"],
      result: "void",
    },
    glGetTexGeniv: {
      parameters: ["u32", "u32", "pointer"],
      result: "void",
    },
    glGetTexImage: {
      parameters: ["u32", "i32", "u32", "u32", "pointer"],
      result: "void",
    },
    glGetTexLevelParameterfv: {
      parameters: ["u32", "i32", "u32", "pointer"],
      result: "void",
    },
    glGetTexLevelParameteriv: {
      parameters: ["u32", "i32", "u32", "pointer"],
      result: "void",
    },
    glGetTexParameterfv: {
      parameters: ["u32", "u32", "pointer"],
      result: "void",
    },
    glGetTexParameteriv: {
      parameters: ["u32", "u32", "pointer"],
      result: "void",
    },
    glHint: {
      parameters: ["u32", "u32"],
      result: "void",
    },
    glIndexMask: {
      parameters: ["u32"],
      result: "void",
    },
    glIndexPointer: {
      parameters: ["u32", "i32", "pointer"],
      result: "void",
    },
    glIndexd: {
      parameters: ["f64"],
      result: "void",
    },
    glIndexdv: {
      parameters: ["pointer"],
      result: "void",
    },
    glIndexf: {
      parameters: ["f32"],
      result: "void",
    },
    glIndexfv: {
      parameters: ["pointer"],
      result: "void",
    },
    glIndexi: {
      parameters: ["i32"],
      result: "void",
    },
    glIndexiv: {
      parameters: ["pointer"],
      result: "void",
    },
    glIndexs: {
      parameters: ["i16"],
      result: "void",
    },
    glIndexsv: {
      parameters: ["pointer"],
      result: "void",
    },
    glIndexub: {
      parameters: ["u8"],
      result: "void",
    },
    glIndexubv: {
      parameters: ["pointer"],
      result: "void",
    },
    glInitNames: {
      parameters: [],
      result: "void",
    },
    glInterleavedArrays: {
      parameters: ["u32", "i32", "pointer"],
      result: "void",
    },
    glIsEnabled: {
      parameters: ["u32"],
      result: "u8",
    },
    glIsList: {
      parameters: ["u32"],
      result: "u8",
    },
    glIsTexture: {
      parameters: ["u32"],
      result: "u8",
    },
    glLightModelf: {
      parameters: ["u32", "f32"],
      result: "void",
    },
    glLightModelfv: {
      parameters: ["u32", "pointer"],
      result: "void",
    },
    glLightModeli: {
      parameters: ["u32", "i32"],
      result: "void",
    },
    glLightModeliv: {
      parameters: ["u32", "pointer"],
      result: "void",
    },
    glLightf: {
      parameters: ["u32", "u32", "f32"],
      result: "void",
    },
    glLightfv: {
      parameters: ["u32", "u32", "pointer"],
      result: "void",
    },
    glLighti: {
      parameters: ["u32", "u32", "i32"],
      result: "void",
    },
    glLightiv: {
      parameters: ["u32", "u32", "pointer"],
      result: "void",
    },
    glLineStipple: {
      parameters: ["i32", "u16"],
      result: "void",
    },
    glLineWidth: {
      parameters: ["f32"],
      result: "void",
    },
    glListBase: {
      parameters: ["u32"],
      result: "void",
    },
    glLoadIdentity: {
      parameters: [],
      result: "void",
    },
    glLoadMatrixd: {
      parameters: ["pointer"],
      result: "void",
    },
    glLoadMatrixf: {
      parameters: ["pointer"],
      result: "void",
    },
    glLoadName: {
      parameters: ["u32"],
      result: "void",
    },
    glLogicOp: {
      parameters: ["u32"],
      result: "void",
    },
    glMap1d: {
      parameters: ["u32", "f64", "f64", "i32", "i32", "pointer"],
      result: "void",
    },
    glMap1f: {
      parameters: ["u32", "f32", "f32", "i32", "i32", "pointer"],
      result: "void",
    },
    glMap2d: {
      parameters: ["u32", "f64", "f64", "i32", "i32", "f64", "f64", "i32", "i32", "pointer"],
      result: "void",
    },
    glMap2f: {
      parameters: ["u32", "f32", "f32", "i32", "i32", "f32", "f32", "i32", "i32", "pointer"],
      result: "void",
    },
    glMapGrid1d: {
      parameters: ["i32", "f64", "f64"],
      result: "void",
    },
    glMapGrid1f: {
      parameters: ["i32", "f32", "f32"],
      result: "void",
    },
    glMapGrid2d: {
      parameters: ["i32", "f64", "f64", "i32", "f64", "f64"],
      result: "void",
    },
    glMapGrid2f: {
      parameters: ["i32", "f32", "f32", "i32", "f32", "f32"],
      result: "void",
    },
    glMaterialf: {
      parameters: ["u32", "u32", "f32"],
      result: "void",
    },
    glMaterialfv: {
      parameters: ["u32", "u32", "pointer"],
      result: "void",
    },
    glMateriali: {
      parameters: ["u32", "u32", "i32"],
      result: "void",
    },
    glMaterialiv: {
      parameters: ["u32", "u32", "pointer"],
      result: "void",
    },
    glMatrixMode: {
      parameters: ["u32"],
      result: "void",
    },
    glMultMatrixd: {
      parameters: ["pointer"],
      result: "void",
    },
    glMultMatrixf: {
      parameters: ["pointer"],
      result: "void",
    },
    glNewList: {
      parameters: ["u32", "u32"],
      result: "void",
    },
    glNormal3b: {
      parameters: ["i8", "i8", "i8"],
      result: "void",
    },
    glNormal3bv: {
      parameters: ["pointer"],
      result: "void",
    },
    glNormal3d: {
      parameters: ["f64", "f64", "f64"],
      result: "void",
    },
    glNormal3dv: {
      parameters: ["pointer"],
      result: "void",
    },
    glNormal3f: {
      parameters: ["f32", "f32", "f32"],
      result: "void",
    },
    glNormal3fv: {
      parameters: ["pointer"],
      result: "void",
    },
    glNormal3i: {
      parameters: ["i32", "i32", "i32"],
      result: "void",
    },
    glNormal3iv: {
      parameters: ["pointer"],
      result: "void",
    },
    glNormal3s: {
      parameters: ["i16", "i16", "i16"],
      result: "void",
    },
    glNormal3sv: {
      parameters: ["pointer"],
      result: "void",
    },
    glNormalPointer: {
      parameters: ["u32", "i32", "pointer"],
      result: "void",
    },
    glOrtho: {
      parameters: ["f64", "f64", "f64", "f64", "f64", "f64"],
      result: "void",
    },
    glPassThrough: {
      parameters: ["f32"],
      result: "void",
    },
    glPixelMapfv: {
      parameters: ["u32", "i32", "pointer"],
      result: "void",
    },
    glPixelMapuiv: {
      parameters: ["u32", "i32", "pointer"],
      result: "void",
    },
    glPixelMapusv: {
      parameters: ["u32", "i32", "pointer"],
      result: "void",
    },
    glPixelStoref: {
      parameters: ["u32", "f32"],
      result: "void",
    },
    glPixelStorei: {
      parameters: ["u32", "i32"],
      result: "void",
    },
    glPixelTransferf: {
      parameters: ["u32", "f32"],
      result: "void",
    },
    glPixelTransferi: {
      parameters: ["u32", "i32"],
      result: "void",
    },
    glPixelZoom: {
      parameters: ["f32", "f32"],
      result: "void",
    },
    glPointSize: {
      parameters: ["f32"],
      result: "void",
    },
    glPolygonMode: {
      parameters: ["u32", "u32"],
      result: "void",
    },
    glPolygonOffset: {
      parameters: ["f32", "f32"],
      result: "void",
    },
    glPolygonStipple: {
      parameters: ["pointer"],
      result: "void",
    },
    glPopAttrib: {
      parameters: [],
      result: "void",
    },
    glPopClientAttrib: {
      parameters: [],
      result: "void",
    },
    glPopMatrix: {
      parameters: [],
      result: "void",
    },
    glPopName: {
      parameters: [],
      result: "void",
    },
    glPrioritizeTextures: {
      parameters: ["i32", "pointer", "pointer"],
      result: "void",
    },
    glPushAttrib: {
      parameters: ["u32"],
      result: "void",
    },
    glPushClientAttrib: {
      parameters: ["u32"],
      result: "void",
    },
    glPushMatrix: {
      parameters: [],
      result: "void",
    },
    glPushName: {
      parameters: ["u32"],
      result: "void",
    },
    glRasterPos2d: {
      parameters: ["f64", "f64"],
      result: "void",
    },
    glRasterPos2dv: {
      parameters: ["pointer"],
      result: "void",
    },
    glRasterPos2f: {
      parameters: ["f32", "f32"],
      result: "void",
    },
    glRasterPos2fv: {
      parameters: ["pointer"],
      result: "void",
    },
    glRasterPos2i: {
      parameters: ["i32", "i32"],
      result: "void",
    },
    glRasterPos2iv: {
      parameters: ["pointer"],
      result: "void",
    },
    glRasterPos2s: {
      parameters: ["i16", "i16"],
      result: "void",
    },
    glRasterPos2sv: {
      parameters: ["pointer"],
      result: "void",
    },
    glRasterPos3d: {
      parameters: ["f64", "f64", "f64"],
      result: "void",
    },
    glRasterPos3dv: {
      parameters: ["pointer"],
      result: "void",
    },
    glRasterPos3f: {
      parameters: ["f32", "f32", "f32"],
      result: "void",
    },
    glRasterPos3fv: {
      parameters: ["pointer"],
      result: "void",
    },
    glRasterPos3i: {
      parameters: ["i32", "i32", "i32"],
      result: "void",
    },
    glRasterPos3iv: {
      parameters: ["pointer"],
      result: "void",
    },
    glRasterPos3s: {
      parameters: ["i16", "i16", "i16"],
      result: "void",
    },
    glRasterPos3sv: {
      parameters: ["pointer"],
      result: "void",
    },
    glRasterPos4d: {
      parameters: ["f64", "f64", "f64", "f64"],
      result: "void",
    },
    glRasterPos4dv: {
      parameters: ["pointer"],
      result: "void",
    },
    glRasterPos4f: {
      parameters: ["f32", "f32", "f32", "f32"],
      result: "void",
    },
    glRasterPos4fv: {
      parameters: ["pointer"],
      result: "void",
    },
    glRasterPos4i: {
      parameters: ["i32", "i32", "i32", "i32"],
      result: "void",
    },
    glRasterPos4iv: {
      parameters: ["pointer"],
      result: "void",
    },
    glRasterPos4s: {
      parameters: ["i16", "i16", "i16", "i16"],
      result: "void",
    },
    glRasterPos4sv: {
      parameters: ["pointer"],
      result: "void",
    },
    glReadBuffer: {
      parameters: ["u32"],
      result: "void",
    },
    glReadPixels: {
      parameters: ["i32", "i32", "i32", "i32", "u32", "u32", "pointer"],
      result: "void",
    },
    glRectd: {
      parameters: ["f64", "f64", "f64", "f64"],
      result: "void",
    },
    glRectdv: {
      parameters: ["pointer", "pointer"],
      result: "void",
    },
    glRectf: {
      parameters: ["f32", "f32", "f32", "f32"],
      result: "void",
    },
    glRectfv: {
      parameters: ["pointer", "pointer"],
      result: "void",
    },
    glRecti: {
      parameters: ["i32", "i32", "i32", "i32"],
      result: "void",
    },
    glRectiv: {
      parameters: ["pointer", "pointer"],
      result: "void",
    },
    glRects: {
      parameters: ["i16", "i16", "i16", "i16"],
      result: "void",
    },
    glRectsv: {
      parameters: ["pointer", "pointer"],
      result: "void",
    },
    glRenderMode: {
      parameters: ["u32"],
      result: "i32",
    },
    glRotated: {
      parameters: ["f64", "f64", "f64", "f64"],
      result: "void",
    },
    glRotatef: {
      parameters: ["f32", "f32", "f32", "f32"],
      result: "void",
    },
    glScaled: {
      parameters: ["f64", "f64", "f64"],
      result: "void",
    },
    glScalef: {
      parameters: ["f32", "f32", "f32"],
      result: "void",
    },
    glScissor: {
      parameters: ["i32", "i32", "i32", "i32"],
      result: "void",
    },
    glSelectBuffer: {
      parameters: ["i32", "pointer"],
      result: "void",
    },
    glShadeModel: {
      parameters: ["u32"],
      result: "void",
    },
    glStencilFunc: {
      parameters: ["u32", "i32", "u32"],
      result: "void",
    },
    glStencilMask: {
      parameters: ["u32"],
      result: "void",
    },
    glStencilOp: {
      parameters: ["u32", "u32", "u32"],
      result: "void",
    },
    glTexCoord1d: {
      parameters: ["f64"],
      result: "void",
    },
    glTexCoord1dv: {
      parameters: ["pointer"],
      result: "void",
    },
    glTexCoord1f: {
      parameters: ["f32"],
      result: "void",
    },
    glTexCoord1fv: {
      parameters: ["pointer"],
      result: "void",
    },
    glTexCoord1i: {
      parameters: ["i32"],
      result: "void",
    },
    glTexCoord1iv: {
      parameters: ["pointer"],
      result: "void",
    },
    glTexCoord1s: {
      parameters: ["i16"],
      result: "void",
    },
    glTexCoord1sv: {
      parameters: ["pointer"],
      result: "void",
    },
    glTexCoord2d: {
      parameters: ["f64", "f64"],
      result: "void",
    },
    glTexCoord2dv: {
      parameters: ["pointer"],
      result: "void",
    },
    glTexCoord2f: {
      parameters: ["f32", "f32"],
      result: "void",
    },
    glTexCoord2fv: {
      parameters: ["pointer"],
      result: "void",
    },
    glTexCoord2i: {
      parameters: ["i32", "i32"],
      result: "void",
    },
    glTexCoord2iv: {
      parameters: ["pointer"],
      result: "void",
    },
    glTexCoord2s: {
      parameters: ["i16", "i16"],
      result: "void",
    },
    glTexCoord2sv: {
      parameters: ["pointer"],
      result: "void",
    },
    glTexCoord3d: {
      parameters: ["f64", "f64", "f64"],
      result: "void",
    },
    glTexCoord3dv: {
      parameters: ["pointer"],
      result: "void",
    },
    glTexCoord3f: {
      parameters: ["f32", "f32", "f32"],
      result: "void",
    },
    glTexCoord3fv: {
      parameters: ["pointer"],
      result: "void",
    },
    glTexCoord3i: {
      parameters: ["i32", "i32", "i32"],
      result: "void",
    },
    glTexCoord3iv: {
      parameters: ["pointer"],
      result: "void",
    },
    glTexCoord3s: {
      parameters: ["i16", "i16", "i16"],
      result: "void",
    },
    glTexCoord3sv: {
      parameters: ["pointer"],
      result: "void",
    },
    glTexCoord4d: {
      parameters: ["f64", "f64", "f64", "f64"],
      result: "void",
    },
    glTexCoord4dv: {
      parameters: ["pointer"],
      result: "void",
    },
    glTexCoord4f: {
      parameters: ["f32", "f32", "f32", "f32"],
      result: "void",
    },
    glTexCoord4fv: {
      parameters: ["pointer"],
      result: "void",
    },
    glTexCoord4i: {
      parameters: ["i32", "i32", "i32", "i32"],
      result: "void",
    },
    glTexCoord4iv: {
      parameters: ["pointer"],
      result: "void",
    },
    glTexCoord4s: {
      parameters: ["i16", "i16", "i16", "i16"],
      result: "void",
    },
    glTexCoord4sv: {
      parameters: ["pointer"],
      result: "void",
    },
    glTexCoordPointer: {
      parameters: ["i32", "u32", "i32", "pointer"],
      result: "void",
    },
    glTexEnvf: {
      parameters: ["u32", "u32", "f32"],
      result: "void",
    },
    glTexEnvfv: {
      parameters: ["u32", "u32", "pointer"],
      result: "void",
    },
    glTexEnvi: {
      parameters: ["u32", "u32", "i32"],
      result: "void",
    },
    glTexEnviv: {
      parameters: ["u32", "u32", "pointer"],
      result: "void",
    },
    glTexGend: {
      parameters: ["u32", "u32", "f64"],
      result: "void",
    },
    glTexGendv: {
      parameters: ["u32", "u32", "pointer"],
      result: "void",
    },
    glTexGenf: {
      parameters: ["u32", "u32", "f32"],
      result: "void",
    },
    glTexGenfv: {
      parameters: ["u32", "u32", "pointer"],
      result: "void",
    },
    glTexGeni: {
      parameters: ["u32", "u32", "i32"],
      result: "void",
    },
    glTexGeniv: {
      parameters: ["u32", "u32", "pointer"],
      result: "void",
    },
    glTexImage1D: {
      parameters: ["u32", "i32", "i32", "i32", "i32", "u32", "u32", "pointer"],
      result: "void",
    },
    glTexImage2D: {
      parameters: ["u32", "i32", "i32", "i32", "i32", "i32", "u32", "u32", "pointer"],
      result: "void",
    },
    glTexParameterf: {
      parameters: ["u32", "u32", "f32"],
      result: "void",
    },
    glTexParameterfv: {
      parameters: ["u32", "u32", "pointer"],
      result: "void",
    },
    glTexParameteri: {
      parameters: ["u32", "u32", "i32"],
      result: "void",
    },
    glTexParameteriv: {
      parameters: ["u32", "u32", "pointer"],
      result: "void",
    },
    glTexSubImage1D: {
      parameters: ["u32", "i32", "i32", "i32", "u32", "u32", "pointer"],
      result: "void",
    },
    glTexSubImage2D: {
      parameters: ["u32", "i32", "i32", "i32", "i32", "i32", "u32", "u32", "pointer"],
      result: "void",
    },
    glTranslated: {
      parameters: ["f64", "f64", "f64"],
      result: "void",
    },
    glTranslatef: {
      parameters: ["f32", "f32", "f32"],
      result: "void",
    },
    glVertex2d: {
      parameters: ["f64", "f64"],
      result: "void",
    },
    glVertex2dv: {
      parameters: ["pointer"],
      result: "void",
    },
    glVertex2f: {
      parameters: ["f32", "f32"],
      result: "void",
    },
    glVertex2fv: {
      parameters: ["pointer"],
      result: "void",
    },
    glVertex2i: {
      parameters: ["i32", "i32"],
      result: "void",
    },
    glVertex2iv: {
      parameters: ["pointer"],
      result: "void",
    },
    glVertex2s: {
      parameters: ["i16", "i16"],
      result: "void",
    },
    glVertex2sv: {
      parameters: ["pointer"],
      result: "void",
    },
    glVertex3d: {
      parameters: ["f64", "f64", "f64"],
      result: "void",
    },
    glVertex3dv: {
      parameters: ["pointer"],
      result: "void",
    },
    glVertex3f: {
      parameters: ["f32", "f32", "f32"],
      result: "void",
    },
    glVertex3fv: {
      parameters: ["pointer"],
      result: "void",
    },
    glVertex3i: {
      parameters: ["i32", "i32", "i32"],
      result: "void",
    },
    glVertex3iv: {
      parameters: ["pointer"],
      result: "void",
    },
    glVertex3s: {
      parameters: ["i16", "i16", "i16"],
      result: "void",
    },
    glVertex3sv: {
      parameters: ["pointer"],
      result: "void",
    },
    glVertex4d: {
      parameters: ["f64", "f64", "f64", "f64"],
      result: "void",
    },
    glVertex4dv: {
      parameters: ["pointer"],
      result: "void",
    },
    glVertex4f: {
      parameters: ["f32", "f32", "f32", "f32"],
      result: "void",
    },
    glVertex4fv: {
      parameters: ["pointer"],
      result: "void",
    },
    glVertex4i: {
      parameters: ["i32", "i32", "i32", "i32"],
      result: "void",
    },
    glVertex4iv: {
      parameters: ["pointer"],
      result: "void",
    },
    glVertex4s: {
      parameters: ["i16", "i16", "i16", "i16"],
      result: "void",
    },
    glVertex4sv: {
      parameters: ["pointer"],
      result: "void",
    },
    glVertexPointer: {
      parameters: ["i32", "u32", "i32", "pointer"],
      result: "void",
    },
    glViewport: {
      parameters: ["i32", "i32", "i32", "i32"],
      result: "void",
    },
  }).symbols;
} catch(e) { /* ignore */ }

try {
  var libGLU32_dll = Deno.dlopen("GLU32.dll", {
    gluErrorString: {
      parameters: ["u32"],
      result: "pointer",
    },
    gluErrorUnicodeStringEXT: {
      parameters: ["u32"],
      result: "buffer",
    },
    gluGetString: {
      parameters: ["u32"],
      result: "pointer",
    },
    gluOrtho2D: {
      parameters: ["f64", "f64", "f64", "f64"],
      result: "void",
    },
    gluPerspective: {
      parameters: ["f64", "f64", "f64", "f64"],
      result: "void",
    },
    gluPickMatrix: {
      parameters: ["f64", "f64", "f64", "f64", "pointer"],
      result: "void",
    },
    gluLookAt: {
      parameters: ["f64", "f64", "f64", "f64", "f64", "f64", "f64", "f64", "f64"],
      result: "void",
    },
    gluProject: {
      parameters: ["f64", "f64", "f64", "pointer", "pointer", "pointer", "pointer", "pointer", "pointer"],
      result: "i32",
    },
    gluUnProject: {
      parameters: ["f64", "f64", "f64", "pointer", "pointer", "pointer", "pointer", "pointer", "pointer"],
      result: "i32",
    },
    gluScaleImage: {
      parameters: ["u32", "i32", "i32", "u32", "pointer", "i32", "i32", "u32", "pointer"],
      result: "i32",
    },
    gluBuild1DMipmaps: {
      parameters: ["u32", "i32", "i32", "u32", "u32", "pointer"],
      result: "i32",
    },
    gluBuild2DMipmaps: {
      parameters: ["u32", "i32", "i32", "i32", "u32", "u32", "pointer"],
      result: "i32",
    },
    gluNewQuadric: {
      parameters: [],
      result: "pointer",
    },
    gluDeleteQuadric: {
      parameters: ["pointer"],
      result: "void",
    },
    gluQuadricNormals: {
      parameters: ["pointer", "u32"],
      result: "void",
    },
    gluQuadricTexture: {
      parameters: ["pointer", "u8"],
      result: "void",
    },
    gluQuadricOrientation: {
      parameters: ["pointer", "u32"],
      result: "void",
    },
    gluQuadricDrawStyle: {
      parameters: ["pointer", "u32"],
      result: "void",
    },
    gluCylinder: {
      parameters: ["pointer", "f64", "f64", "f64", "i32", "i32"],
      result: "void",
    },
    gluDisk: {
      parameters: ["pointer", "f64", "f64", "i32", "i32"],
      result: "void",
    },
    gluPartialDisk: {
      parameters: ["pointer", "f64", "f64", "i32", "i32", "f64", "f64"],
      result: "void",
    },
    gluSphere: {
      parameters: ["pointer", "f64", "i32", "i32"],
      result: "void",
    },
    gluQuadricCallback: {
      parameters: ["pointer", "u32", "isize"],
      result: "void",
    },
    gluNewTess: {
      parameters: [],
      result: "pointer",
    },
    gluDeleteTess: {
      parameters: ["pointer"],
      result: "void",
    },
    gluTessBeginPolygon: {
      parameters: ["pointer", "pointer"],
      result: "void",
    },
    gluTessBeginContour: {
      parameters: ["pointer"],
      result: "void",
    },
    gluTessVertex: {
      parameters: ["pointer", "pointer", "pointer"],
      result: "void",
    },
    gluTessEndContour: {
      parameters: ["pointer"],
      result: "void",
    },
    gluTessEndPolygon: {
      parameters: ["pointer"],
      result: "void",
    },
    gluTessProperty: {
      parameters: ["pointer", "u32", "f64"],
      result: "void",
    },
    gluTessNormal: {
      parameters: ["pointer", "f64", "f64", "f64"],
      result: "void",
    },
    gluTessCallback: {
      parameters: ["pointer", "u32", "isize"],
      result: "void",
    },
    gluGetTessProperty: {
      parameters: ["pointer", "u32", "pointer"],
      result: "void",
    },
    gluNewNurbsRenderer: {
      parameters: [],
      result: "pointer",
    },
    gluDeleteNurbsRenderer: {
      parameters: ["pointer"],
      result: "void",
    },
    gluBeginSurface: {
      parameters: ["pointer"],
      result: "void",
    },
    gluBeginCurve: {
      parameters: ["pointer"],
      result: "void",
    },
    gluEndCurve: {
      parameters: ["pointer"],
      result: "void",
    },
    gluEndSurface: {
      parameters: ["pointer"],
      result: "void",
    },
    gluBeginTrim: {
      parameters: ["pointer"],
      result: "void",
    },
    gluEndTrim: {
      parameters: ["pointer"],
      result: "void",
    },
    gluPwlCurve: {
      parameters: ["pointer", "i32", "pointer", "i32", "u32"],
      result: "void",
    },
    gluNurbsCurve: {
      parameters: ["pointer", "i32", "pointer", "i32", "pointer", "i32", "u32"],
      result: "void",
    },
    gluNurbsSurface: {
      parameters: ["pointer", "i32", "pointer", "i32", "pointer", "i32", "i32", "pointer", "i32", "i32", "u32"],
      result: "void",
    },
    gluLoadSamplingMatrices: {
      parameters: ["pointer", "pointer", "pointer", "pointer"],
      result: "void",
    },
    gluNurbsProperty: {
      parameters: ["pointer", "u32", "f32"],
      result: "void",
    },
    gluGetNurbsProperty: {
      parameters: ["pointer", "u32", "pointer"],
      result: "void",
    },
    gluNurbsCallback: {
      parameters: ["pointer", "u32", "isize"],
      result: "void",
    },
    gluBeginPolygon: {
      parameters: ["pointer"],
      result: "void",
    },
    gluNextContour: {
      parameters: ["pointer", "u32"],
      result: "void",
    },
    gluEndPolygon: {
      parameters: ["pointer"],
      result: "void",
    },
  }).symbols;
} catch(e) { /* ignore */ }

// Symbols

export function ChoosePixelFormat(
  hdc: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Graphics.Gdi.HDC */,
  ppfd: Deno.PointerValue | Uint8Array | null /* ptr */,
): number /* i32 */ {
  return libGDI32_dll.ChoosePixelFormat(util.toPointer(hdc), util.toPointer(ppfd));
}

export function DescribePixelFormat(
  hdc: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Graphics.Gdi.HDC */,
  iPixelFormat: PFD_PIXEL_TYPE /* Windows.Win32.Graphics.OpenGL.PFD_PIXEL_TYPE */,
  nBytes: number /* u32 */,
  ppfd: Deno.PointerValue | Uint8Array | null /* ptr */,
): number /* i32 */ {
  return libGDI32_dll.DescribePixelFormat(util.toPointer(hdc), iPixelFormat, nBytes, util.toPointer(ppfd));
}

export function GetPixelFormat(
  hdc: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Graphics.Gdi.HDC */,
): number /* i32 */ {
  return libGDI32_dll.GetPixelFormat(util.toPointer(hdc));
}

export function SetPixelFormat(
  hdc: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Graphics.Gdi.HDC */,
  format: number /* i32 */,
  ppfd: Deno.PointerValue | Uint8Array | null /* ptr */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libGDI32_dll.SetPixelFormat(util.toPointer(hdc), format, util.toPointer(ppfd)));
}

export function GetEnhMetaFilePixelFormat(
  hemf: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Graphics.Gdi.HENHMETAFILE */,
  cbBuffer: number /* u32 */,
  ppfd: Deno.PointerValue | Uint8Array | null /* ptr */,
): number /* u32 */ {
  return libGDI32_dll.GetEnhMetaFilePixelFormat(util.toPointer(hemf), cbBuffer, util.toPointer(ppfd));
}

export function wglCopyContext(
  param0: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Graphics.OpenGL.HGLRC */,
  param1: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Graphics.OpenGL.HGLRC */,
  param2: number /* u32 */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libOPENGL32_dll.wglCopyContext(util.toPointer(param0), util.toPointer(param1), param2));
}

export function wglCreateContext(
  param0: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Graphics.Gdi.HDC */,
): Deno.PointerValue | null /* Windows.Win32.Graphics.OpenGL.HGLRC */ {
  return util.pointerFromFfi(libOPENGL32_dll.wglCreateContext(util.toPointer(param0)));
}

export function wglCreateLayerContext(
  param0: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Graphics.Gdi.HDC */,
  param1: number /* i32 */,
): Deno.PointerValue | null /* Windows.Win32.Graphics.OpenGL.HGLRC */ {
  return util.pointerFromFfi(libOPENGL32_dll.wglCreateLayerContext(util.toPointer(param0), param1));
}

export function wglDeleteContext(
  param0: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Graphics.OpenGL.HGLRC */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libOPENGL32_dll.wglDeleteContext(util.toPointer(param0)));
}

export function wglGetCurrentContext(): Deno.PointerValue | null /* Windows.Win32.Graphics.OpenGL.HGLRC */ {
  return util.pointerFromFfi(libOPENGL32_dll.wglGetCurrentContext());
}

export function wglGetCurrentDC(): Deno.PointerValue | null /* Windows.Win32.Graphics.Gdi.HDC */ {
  return util.pointerFromFfi(libOPENGL32_dll.wglGetCurrentDC());
}

export function wglGetProcAddress(
  param0: string | null | Uint8Array /* Windows.Win32.Foundation.PSTR */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.PROC */ {
  return util.pointerFromFfi(libOPENGL32_dll.wglGetProcAddress(util.pstrToFfi(param0)));
}

export function wglMakeCurrent(
  param0: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Graphics.Gdi.HDC */,
  param1: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Graphics.OpenGL.HGLRC */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libOPENGL32_dll.wglMakeCurrent(util.toPointer(param0), util.toPointer(param1)));
}

export function wglShareLists(
  param0: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Graphics.OpenGL.HGLRC */,
  param1: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Graphics.OpenGL.HGLRC */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libOPENGL32_dll.wglShareLists(util.toPointer(param0), util.toPointer(param1)));
}

export function wglUseFontBitmapsA(
  param0: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Graphics.Gdi.HDC */,
  param1: number /* u32 */,
  param2: number /* u32 */,
  param3: number /* u32 */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libOPENGL32_dll.wglUseFontBitmapsA(util.toPointer(param0), param1, param2, param3));
}

export function wglUseFontBitmapsW(
  param0: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Graphics.Gdi.HDC */,
  param1: number /* u32 */,
  param2: number /* u32 */,
  param3: number /* u32 */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libOPENGL32_dll.wglUseFontBitmapsW(util.toPointer(param0), param1, param2, param3));
}

export function SwapBuffers(
  param0: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Graphics.Gdi.HDC */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libGDI32_dll.SwapBuffers(util.toPointer(param0)));
}

export function wglUseFontOutlinesA(
  param0: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Graphics.Gdi.HDC */,
  param1: number /* u32 */,
  param2: number /* u32 */,
  param3: number /* u32 */,
  param4: number /* f32 */,
  param5: number /* f32 */,
  param6: number /* i32 */,
  param7: Deno.PointerValue | Uint8Array | null /* ptr */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libOPENGL32_dll.wglUseFontOutlinesA(util.toPointer(param0), param1, param2, param3, param4, param5, param6, util.toPointer(param7)));
}

export function wglUseFontOutlinesW(
  param0: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Graphics.Gdi.HDC */,
  param1: number /* u32 */,
  param2: number /* u32 */,
  param3: number /* u32 */,
  param4: number /* f32 */,
  param5: number /* f32 */,
  param6: number /* i32 */,
  param7: Deno.PointerValue | Uint8Array | null /* ptr */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libOPENGL32_dll.wglUseFontOutlinesW(util.toPointer(param0), param1, param2, param3, param4, param5, param6, util.toPointer(param7)));
}

export function wglDescribeLayerPlane(
  param0: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Graphics.Gdi.HDC */,
  param1: number /* i32 */,
  param2: number /* i32 */,
  param3: number /* u32 */,
  param4: Deno.PointerValue | Uint8Array | null /* ptr */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libOPENGL32_dll.wglDescribeLayerPlane(util.toPointer(param0), param1, param2, param3, util.toPointer(param4)));
}

export function wglSetLayerPaletteEntries(
  param0: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Graphics.Gdi.HDC */,
  param1: number /* i32 */,
  param2: number /* i32 */,
  param3: number /* i32 */,
  param4: Deno.PointerValue | Uint8Array | null /* ptr */,
): number /* i32 */ {
  return libOPENGL32_dll.wglSetLayerPaletteEntries(util.toPointer(param0), param1, param2, param3, util.toPointer(param4));
}

export function wglGetLayerPaletteEntries(
  param0: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Graphics.Gdi.HDC */,
  param1: number /* i32 */,
  param2: number /* i32 */,
  param3: number /* i32 */,
  param4: Deno.PointerValue | Uint8Array | null /* ptr */,
): number /* i32 */ {
  return libOPENGL32_dll.wglGetLayerPaletteEntries(util.toPointer(param0), param1, param2, param3, util.toPointer(param4));
}

export function wglRealizeLayerPalette(
  param0: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Graphics.Gdi.HDC */,
  param1: number /* i32 */,
  param2: boolean /* Windows.Win32.Foundation.BOOL */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libOPENGL32_dll.wglRealizeLayerPalette(util.toPointer(param0), param1, util.boolToFfi(param2)));
}

export function wglSwapLayerBuffers(
  param0: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Graphics.Gdi.HDC */,
  param1: number /* u32 */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libOPENGL32_dll.wglSwapLayerBuffers(util.toPointer(param0), param1));
}

export function glAccum(
  op: number /* u32 */,
  value: number /* f32 */,
): void /* void */ {
  return libOPENGL32_dll.glAccum(op, value);
}

export function glAlphaFunc(
  func: number /* u32 */,
  ref: number /* f32 */,
): void /* void */ {
  return libOPENGL32_dll.glAlphaFunc(func, ref);
}

export function glAreTexturesResident(
  n: number /* i32 */,
  textures: Deno.PointerValue | Uint8Array | null /* ptr */,
  residences: Deno.PointerValue | Uint8Array | null /* ptr */,
): number /* u8 */ {
  return libOPENGL32_dll.glAreTexturesResident(n, util.toPointer(textures), util.toPointer(residences));
}

export function glArrayElement(
  i: number /* i32 */,
): void /* void */ {
  return libOPENGL32_dll.glArrayElement(i);
}

export function glBegin(
  mode: number /* u32 */,
): void /* void */ {
  return libOPENGL32_dll.glBegin(mode);
}

export function glBindTexture(
  target: number /* u32 */,
  texture: number /* u32 */,
): void /* void */ {
  return libOPENGL32_dll.glBindTexture(target, texture);
}

export function glBitmap(
  width: number /* i32 */,
  height: number /* i32 */,
  xorig: number /* f32 */,
  yorig: number /* f32 */,
  xmove: number /* f32 */,
  ymove: number /* f32 */,
  bitmap: Deno.PointerValue | Uint8Array | null /* ptr */,
): void /* void */ {
  return libOPENGL32_dll.glBitmap(width, height, xorig, yorig, xmove, ymove, util.toPointer(bitmap));
}

export function glBlendFunc(
  sfactor: number /* u32 */,
  dfactor: number /* u32 */,
): void /* void */ {
  return libOPENGL32_dll.glBlendFunc(sfactor, dfactor);
}

export function glCallList(
  list: number /* u32 */,
): void /* void */ {
  return libOPENGL32_dll.glCallList(list);
}

export function glCallLists(
  n: number /* i32 */,
  type: number /* u32 */,
  lists: Deno.PointerValue | Uint8Array | null /* ptr */,
): void /* void */ {
  return libOPENGL32_dll.glCallLists(n, type, util.toPointer(lists));
}

export function glClear(
  mask: number /* u32 */,
): void /* void */ {
  return libOPENGL32_dll.glClear(mask);
}

export function glClearAccum(
  red: number /* f32 */,
  green: number /* f32 */,
  blue: number /* f32 */,
  alpha: number /* f32 */,
): void /* void */ {
  return libOPENGL32_dll.glClearAccum(red, green, blue, alpha);
}

export function glClearColor(
  red: number /* f32 */,
  green: number /* f32 */,
  blue: number /* f32 */,
  alpha: number /* f32 */,
): void /* void */ {
  return libOPENGL32_dll.glClearColor(red, green, blue, alpha);
}

export function glClearDepth(
  depth: number /* f64 */,
): void /* void */ {
  return libOPENGL32_dll.glClearDepth(depth);
}

export function glClearIndex(
  c: number /* f32 */,
): void /* void */ {
  return libOPENGL32_dll.glClearIndex(c);
}

export function glClearStencil(
  s: number /* i32 */,
): void /* void */ {
  return libOPENGL32_dll.glClearStencil(s);
}

export function glClipPlane(
  plane: number /* u32 */,
  equation: Deno.PointerValue | Uint8Array | null /* ptr */,
): void /* void */ {
  return libOPENGL32_dll.glClipPlane(plane, util.toPointer(equation));
}

export function glColor3b(
  red: number /* i8 */,
  green: number /* i8 */,
  blue: number /* i8 */,
): void /* void */ {
  return libOPENGL32_dll.glColor3b(red, green, blue);
}

export function glColor3bv(
  v: Deno.PointerValue | Uint8Array | null /* ptr */,
): void /* void */ {
  return libOPENGL32_dll.glColor3bv(util.toPointer(v));
}

export function glColor3d(
  red: number /* f64 */,
  green: number /* f64 */,
  blue: number /* f64 */,
): void /* void */ {
  return libOPENGL32_dll.glColor3d(red, green, blue);
}

export function glColor3dv(
  v: Deno.PointerValue | Uint8Array | null /* ptr */,
): void /* void */ {
  return libOPENGL32_dll.glColor3dv(util.toPointer(v));
}

export function glColor3f(
  red: number /* f32 */,
  green: number /* f32 */,
  blue: number /* f32 */,
): void /* void */ {
  return libOPENGL32_dll.glColor3f(red, green, blue);
}

export function glColor3fv(
  v: Deno.PointerValue | Uint8Array | null /* ptr */,
): void /* void */ {
  return libOPENGL32_dll.glColor3fv(util.toPointer(v));
}

export function glColor3i(
  red: number /* i32 */,
  green: number /* i32 */,
  blue: number /* i32 */,
): void /* void */ {
  return libOPENGL32_dll.glColor3i(red, green, blue);
}

export function glColor3iv(
  v: Deno.PointerValue | Uint8Array | null /* ptr */,
): void /* void */ {
  return libOPENGL32_dll.glColor3iv(util.toPointer(v));
}

export function glColor3s(
  red: number /* i16 */,
  green: number /* i16 */,
  blue: number /* i16 */,
): void /* void */ {
  return libOPENGL32_dll.glColor3s(red, green, blue);
}

export function glColor3sv(
  v: Deno.PointerValue | Uint8Array | null /* ptr */,
): void /* void */ {
  return libOPENGL32_dll.glColor3sv(util.toPointer(v));
}

export function glColor3ub(
  red: number /* u8 */,
  green: number /* u8 */,
  blue: number /* u8 */,
): void /* void */ {
  return libOPENGL32_dll.glColor3ub(red, green, blue);
}

export function glColor3ubv(
  v: Deno.PointerValue | Uint8Array | null /* ptr */,
): void /* void */ {
  return libOPENGL32_dll.glColor3ubv(util.toPointer(v));
}

export function glColor3ui(
  red: number /* u32 */,
  green: number /* u32 */,
  blue: number /* u32 */,
): void /* void */ {
  return libOPENGL32_dll.glColor3ui(red, green, blue);
}

export function glColor3uiv(
  v: Deno.PointerValue | Uint8Array | null /* ptr */,
): void /* void */ {
  return libOPENGL32_dll.glColor3uiv(util.toPointer(v));
}

export function glColor3us(
  red: number /* u16 */,
  green: number /* u16 */,
  blue: number /* u16 */,
): void /* void */ {
  return libOPENGL32_dll.glColor3us(red, green, blue);
}

export function glColor3usv(
  v: Deno.PointerValue | Uint8Array | null /* ptr */,
): void /* void */ {
  return libOPENGL32_dll.glColor3usv(util.toPointer(v));
}

export function glColor4b(
  red: number /* i8 */,
  green: number /* i8 */,
  blue: number /* i8 */,
  alpha: number /* i8 */,
): void /* void */ {
  return libOPENGL32_dll.glColor4b(red, green, blue, alpha);
}

export function glColor4bv(
  v: Deno.PointerValue | Uint8Array | null /* ptr */,
): void /* void */ {
  return libOPENGL32_dll.glColor4bv(util.toPointer(v));
}

export function glColor4d(
  red: number /* f64 */,
  green: number /* f64 */,
  blue: number /* f64 */,
  alpha: number /* f64 */,
): void /* void */ {
  return libOPENGL32_dll.glColor4d(red, green, blue, alpha);
}

export function glColor4dv(
  v: Deno.PointerValue | Uint8Array | null /* ptr */,
): void /* void */ {
  return libOPENGL32_dll.glColor4dv(util.toPointer(v));
}

export function glColor4f(
  red: number /* f32 */,
  green: number /* f32 */,
  blue: number /* f32 */,
  alpha: number /* f32 */,
): void /* void */ {
  return libOPENGL32_dll.glColor4f(red, green, blue, alpha);
}

export function glColor4fv(
  v: Deno.PointerValue | Uint8Array | null /* ptr */,
): void /* void */ {
  return libOPENGL32_dll.glColor4fv(util.toPointer(v));
}

export function glColor4i(
  red: number /* i32 */,
  green: number /* i32 */,
  blue: number /* i32 */,
  alpha: number /* i32 */,
): void /* void */ {
  return libOPENGL32_dll.glColor4i(red, green, blue, alpha);
}

export function glColor4iv(
  v: Deno.PointerValue | Uint8Array | null /* ptr */,
): void /* void */ {
  return libOPENGL32_dll.glColor4iv(util.toPointer(v));
}

export function glColor4s(
  red: number /* i16 */,
  green: number /* i16 */,
  blue: number /* i16 */,
  alpha: number /* i16 */,
): void /* void */ {
  return libOPENGL32_dll.glColor4s(red, green, blue, alpha);
}

export function glColor4sv(
  v: Deno.PointerValue | Uint8Array | null /* ptr */,
): void /* void */ {
  return libOPENGL32_dll.glColor4sv(util.toPointer(v));
}

export function glColor4ub(
  red: number /* u8 */,
  green: number /* u8 */,
  blue: number /* u8 */,
  alpha: number /* u8 */,
): void /* void */ {
  return libOPENGL32_dll.glColor4ub(red, green, blue, alpha);
}

export function glColor4ubv(
  v: Deno.PointerValue | Uint8Array | null /* ptr */,
): void /* void */ {
  return libOPENGL32_dll.glColor4ubv(util.toPointer(v));
}

export function glColor4ui(
  red: number /* u32 */,
  green: number /* u32 */,
  blue: number /* u32 */,
  alpha: number /* u32 */,
): void /* void */ {
  return libOPENGL32_dll.glColor4ui(red, green, blue, alpha);
}

export function glColor4uiv(
  v: Deno.PointerValue | Uint8Array | null /* ptr */,
): void /* void */ {
  return libOPENGL32_dll.glColor4uiv(util.toPointer(v));
}

export function glColor4us(
  red: number /* u16 */,
  green: number /* u16 */,
  blue: number /* u16 */,
  alpha: number /* u16 */,
): void /* void */ {
  return libOPENGL32_dll.glColor4us(red, green, blue, alpha);
}

export function glColor4usv(
  v: Deno.PointerValue | Uint8Array | null /* ptr */,
): void /* void */ {
  return libOPENGL32_dll.glColor4usv(util.toPointer(v));
}

export function glColorMask(
  red: number /* u8 */,
  green: number /* u8 */,
  blue: number /* u8 */,
  alpha: number /* u8 */,
): void /* void */ {
  return libOPENGL32_dll.glColorMask(red, green, blue, alpha);
}

export function glColorMaterial(
  face: number /* u32 */,
  mode: number /* u32 */,
): void /* void */ {
  return libOPENGL32_dll.glColorMaterial(face, mode);
}

export function glColorPointer(
  size: number /* i32 */,
  type: number /* u32 */,
  stride: number /* i32 */,
  pointer: Deno.PointerValue | Uint8Array | null /* ptr */,
): void /* void */ {
  return libOPENGL32_dll.glColorPointer(size, type, stride, util.toPointer(pointer));
}

export function glCopyPixels(
  x: number /* i32 */,
  y: number /* i32 */,
  width: number /* i32 */,
  height: number /* i32 */,
  type: number /* u32 */,
): void /* void */ {
  return libOPENGL32_dll.glCopyPixels(x, y, width, height, type);
}

export function glCopyTexImage1D(
  target: number /* u32 */,
  level: number /* i32 */,
  internalFormat: number /* u32 */,
  x: number /* i32 */,
  y: number /* i32 */,
  width: number /* i32 */,
  border: number /* i32 */,
): void /* void */ {
  return libOPENGL32_dll.glCopyTexImage1D(target, level, internalFormat, x, y, width, border);
}

export function glCopyTexImage2D(
  target: number /* u32 */,
  level: number /* i32 */,
  internalFormat: number /* u32 */,
  x: number /* i32 */,
  y: number /* i32 */,
  width: number /* i32 */,
  height: number /* i32 */,
  border: number /* i32 */,
): void /* void */ {
  return libOPENGL32_dll.glCopyTexImage2D(target, level, internalFormat, x, y, width, height, border);
}

export function glCopyTexSubImage1D(
  target: number /* u32 */,
  level: number /* i32 */,
  xoffset: number /* i32 */,
  x: number /* i32 */,
  y: number /* i32 */,
  width: number /* i32 */,
): void /* void */ {
  return libOPENGL32_dll.glCopyTexSubImage1D(target, level, xoffset, x, y, width);
}

export function glCopyTexSubImage2D(
  target: number /* u32 */,
  level: number /* i32 */,
  xoffset: number /* i32 */,
  yoffset: number /* i32 */,
  x: number /* i32 */,
  y: number /* i32 */,
  width: number /* i32 */,
  height: number /* i32 */,
): void /* void */ {
  return libOPENGL32_dll.glCopyTexSubImage2D(target, level, xoffset, yoffset, x, y, width, height);
}

export function glCullFace(
  mode: number /* u32 */,
): void /* void */ {
  return libOPENGL32_dll.glCullFace(mode);
}

export function glDeleteLists(
  list: number /* u32 */,
  range: number /* i32 */,
): void /* void */ {
  return libOPENGL32_dll.glDeleteLists(list, range);
}

export function glDeleteTextures(
  n: number /* i32 */,
  textures: Deno.PointerValue | Uint8Array | null /* ptr */,
): void /* void */ {
  return libOPENGL32_dll.glDeleteTextures(n, util.toPointer(textures));
}

export function glDepthFunc(
  func: number /* u32 */,
): void /* void */ {
  return libOPENGL32_dll.glDepthFunc(func);
}

export function glDepthMask(
  flag: number /* u8 */,
): void /* void */ {
  return libOPENGL32_dll.glDepthMask(flag);
}

export function glDepthRange(
  zNear: number /* f64 */,
  zFar: number /* f64 */,
): void /* void */ {
  return libOPENGL32_dll.glDepthRange(zNear, zFar);
}

export function glDisable(
  cap: number /* u32 */,
): void /* void */ {
  return libOPENGL32_dll.glDisable(cap);
}

export function glDisableClientState(
  array: number /* u32 */,
): void /* void */ {
  return libOPENGL32_dll.glDisableClientState(array);
}

export function glDrawArrays(
  mode: number /* u32 */,
  first: number /* i32 */,
  count: number /* i32 */,
): void /* void */ {
  return libOPENGL32_dll.glDrawArrays(mode, first, count);
}

export function glDrawBuffer(
  mode: number /* u32 */,
): void /* void */ {
  return libOPENGL32_dll.glDrawBuffer(mode);
}

export function glDrawElements(
  mode: number /* u32 */,
  count: number /* i32 */,
  type: number /* u32 */,
  indices: Deno.PointerValue | Uint8Array | null /* ptr */,
): void /* void */ {
  return libOPENGL32_dll.glDrawElements(mode, count, type, util.toPointer(indices));
}

export function glDrawPixels(
  width: number /* i32 */,
  height: number /* i32 */,
  format: number /* u32 */,
  type: number /* u32 */,
  pixels: Deno.PointerValue | Uint8Array | null /* ptr */,
): void /* void */ {
  return libOPENGL32_dll.glDrawPixels(width, height, format, type, util.toPointer(pixels));
}

export function glEdgeFlag(
  flag: number /* u8 */,
): void /* void */ {
  return libOPENGL32_dll.glEdgeFlag(flag);
}

export function glEdgeFlagPointer(
  stride: number /* i32 */,
  pointer: Deno.PointerValue | Uint8Array | null /* ptr */,
): void /* void */ {
  return libOPENGL32_dll.glEdgeFlagPointer(stride, util.toPointer(pointer));
}

export function glEdgeFlagv(
  flag: Deno.PointerValue | Uint8Array | null /* ptr */,
): void /* void */ {
  return libOPENGL32_dll.glEdgeFlagv(util.toPointer(flag));
}

export function glEnable(
  cap: number /* u32 */,
): void /* void */ {
  return libOPENGL32_dll.glEnable(cap);
}

export function glEnableClientState(
  array: number /* u32 */,
): void /* void */ {
  return libOPENGL32_dll.glEnableClientState(array);
}

export function glEnd(): void /* void */ {
  return libOPENGL32_dll.glEnd();
}

export function glEndList(): void /* void */ {
  return libOPENGL32_dll.glEndList();
}

export function glEvalCoord1d(
  u: number /* f64 */,
): void /* void */ {
  return libOPENGL32_dll.glEvalCoord1d(u);
}

export function glEvalCoord1dv(
  u: Deno.PointerValue | Uint8Array | null /* ptr */,
): void /* void */ {
  return libOPENGL32_dll.glEvalCoord1dv(util.toPointer(u));
}

export function glEvalCoord1f(
  u: number /* f32 */,
): void /* void */ {
  return libOPENGL32_dll.glEvalCoord1f(u);
}

export function glEvalCoord1fv(
  u: Deno.PointerValue | Uint8Array | null /* ptr */,
): void /* void */ {
  return libOPENGL32_dll.glEvalCoord1fv(util.toPointer(u));
}

export function glEvalCoord2d(
  u: number /* f64 */,
  v: number /* f64 */,
): void /* void */ {
  return libOPENGL32_dll.glEvalCoord2d(u, v);
}

export function glEvalCoord2dv(
  u: Deno.PointerValue | Uint8Array | null /* ptr */,
): void /* void */ {
  return libOPENGL32_dll.glEvalCoord2dv(util.toPointer(u));
}

export function glEvalCoord2f(
  u: number /* f32 */,
  v: number /* f32 */,
): void /* void */ {
  return libOPENGL32_dll.glEvalCoord2f(u, v);
}

export function glEvalCoord2fv(
  u: Deno.PointerValue | Uint8Array | null /* ptr */,
): void /* void */ {
  return libOPENGL32_dll.glEvalCoord2fv(util.toPointer(u));
}

export function glEvalMesh1(
  mode: number /* u32 */,
  i1: number /* i32 */,
  i2: number /* i32 */,
): void /* void */ {
  return libOPENGL32_dll.glEvalMesh1(mode, i1, i2);
}

export function glEvalMesh2(
  mode: number /* u32 */,
  i1: number /* i32 */,
  i2: number /* i32 */,
  j1: number /* i32 */,
  j2: number /* i32 */,
): void /* void */ {
  return libOPENGL32_dll.glEvalMesh2(mode, i1, i2, j1, j2);
}

export function glEvalPoint1(
  i: number /* i32 */,
): void /* void */ {
  return libOPENGL32_dll.glEvalPoint1(i);
}

export function glEvalPoint2(
  i: number /* i32 */,
  j: number /* i32 */,
): void /* void */ {
  return libOPENGL32_dll.glEvalPoint2(i, j);
}

export function glFeedbackBuffer(
  size: number /* i32 */,
  type: number /* u32 */,
  buffer: Deno.PointerValue | Uint8Array | null /* ptr */,
): void /* void */ {
  return libOPENGL32_dll.glFeedbackBuffer(size, type, util.toPointer(buffer));
}

export function glFinish(): void /* void */ {
  return libOPENGL32_dll.glFinish();
}

export function glFlush(): void /* void */ {
  return libOPENGL32_dll.glFlush();
}

export function glFogf(
  pname: number /* u32 */,
  param1: number /* f32 */,
): void /* void */ {
  return libOPENGL32_dll.glFogf(pname, param1);
}

export function glFogfv(
  pname: number /* u32 */,
  params: Deno.PointerValue | Uint8Array | null /* ptr */,
): void /* void */ {
  return libOPENGL32_dll.glFogfv(pname, util.toPointer(params));
}

export function glFogi(
  pname: number /* u32 */,
  param1: number /* i32 */,
): void /* void */ {
  return libOPENGL32_dll.glFogi(pname, param1);
}

export function glFogiv(
  pname: number /* u32 */,
  params: Deno.PointerValue | Uint8Array | null /* ptr */,
): void /* void */ {
  return libOPENGL32_dll.glFogiv(pname, util.toPointer(params));
}

export function glFrontFace(
  mode: number /* u32 */,
): void /* void */ {
  return libOPENGL32_dll.glFrontFace(mode);
}

export function glFrustum(
  left: number /* f64 */,
  right: number /* f64 */,
  bottom: number /* f64 */,
  top: number /* f64 */,
  zNear: number /* f64 */,
  zFar: number /* f64 */,
): void /* void */ {
  return libOPENGL32_dll.glFrustum(left, right, bottom, top, zNear, zFar);
}

export function glGenLists(
  range: number /* i32 */,
): number /* u32 */ {
  return libOPENGL32_dll.glGenLists(range);
}

export function glGenTextures(
  n: number /* i32 */,
  textures: Deno.PointerValue | Uint8Array | null /* ptr */,
): void /* void */ {
  return libOPENGL32_dll.glGenTextures(n, util.toPointer(textures));
}

export function glGetBooleanv(
  pname: number /* u32 */,
  params: Deno.PointerValue | Uint8Array | null /* ptr */,
): void /* void */ {
  return libOPENGL32_dll.glGetBooleanv(pname, util.toPointer(params));
}

export function glGetClipPlane(
  plane: number /* u32 */,
  equation: Deno.PointerValue | Uint8Array | null /* ptr */,
): void /* void */ {
  return libOPENGL32_dll.glGetClipPlane(plane, util.toPointer(equation));
}

export function glGetDoublev(
  pname: number /* u32 */,
  params: Deno.PointerValue | Uint8Array | null /* ptr */,
): void /* void */ {
  return libOPENGL32_dll.glGetDoublev(pname, util.toPointer(params));
}

export function glGetError(): number /* u32 */ {
  return libOPENGL32_dll.glGetError();
}

export function glGetFloatv(
  pname: number /* u32 */,
  params: Deno.PointerValue | Uint8Array | null /* ptr */,
): void /* void */ {
  return libOPENGL32_dll.glGetFloatv(pname, util.toPointer(params));
}

export function glGetIntegerv(
  pname: number /* u32 */,
  params: Deno.PointerValue | Uint8Array | null /* ptr */,
): void /* void */ {
  return libOPENGL32_dll.glGetIntegerv(pname, util.toPointer(params));
}

export function glGetLightfv(
  light: number /* u32 */,
  pname: number /* u32 */,
  params: Deno.PointerValue | Uint8Array | null /* ptr */,
): void /* void */ {
  return libOPENGL32_dll.glGetLightfv(light, pname, util.toPointer(params));
}

export function glGetLightiv(
  light: number /* u32 */,
  pname: number /* u32 */,
  params: Deno.PointerValue | Uint8Array | null /* ptr */,
): void /* void */ {
  return libOPENGL32_dll.glGetLightiv(light, pname, util.toPointer(params));
}

export function glGetMapdv(
  target: number /* u32 */,
  query: number /* u32 */,
  v: Deno.PointerValue | Uint8Array | null /* ptr */,
): void /* void */ {
  return libOPENGL32_dll.glGetMapdv(target, query, util.toPointer(v));
}

export function glGetMapfv(
  target: number /* u32 */,
  query: number /* u32 */,
  v: Deno.PointerValue | Uint8Array | null /* ptr */,
): void /* void */ {
  return libOPENGL32_dll.glGetMapfv(target, query, util.toPointer(v));
}

export function glGetMapiv(
  target: number /* u32 */,
  query: number /* u32 */,
  v: Deno.PointerValue | Uint8Array | null /* ptr */,
): void /* void */ {
  return libOPENGL32_dll.glGetMapiv(target, query, util.toPointer(v));
}

export function glGetMaterialfv(
  face: number /* u32 */,
  pname: number /* u32 */,
  params: Deno.PointerValue | Uint8Array | null /* ptr */,
): void /* void */ {
  return libOPENGL32_dll.glGetMaterialfv(face, pname, util.toPointer(params));
}

export function glGetMaterialiv(
  face: number /* u32 */,
  pname: number /* u32 */,
  params: Deno.PointerValue | Uint8Array | null /* ptr */,
): void /* void */ {
  return libOPENGL32_dll.glGetMaterialiv(face, pname, util.toPointer(params));
}

export function glGetPixelMapfv(
  map: number /* u32 */,
  values: Deno.PointerValue | Uint8Array | null /* ptr */,
): void /* void */ {
  return libOPENGL32_dll.glGetPixelMapfv(map, util.toPointer(values));
}

export function glGetPixelMapuiv(
  map: number /* u32 */,
  values: Deno.PointerValue | Uint8Array | null /* ptr */,
): void /* void */ {
  return libOPENGL32_dll.glGetPixelMapuiv(map, util.toPointer(values));
}

export function glGetPixelMapusv(
  map: number /* u32 */,
  values: Deno.PointerValue | Uint8Array | null /* ptr */,
): void /* void */ {
  return libOPENGL32_dll.glGetPixelMapusv(map, util.toPointer(values));
}

export function glGetPointerv(
  pname: number /* u32 */,
  params: Deno.PointerValue | Uint8Array | null /* ptr */,
): void /* void */ {
  return libOPENGL32_dll.glGetPointerv(pname, util.toPointer(params));
}

export function glGetPolygonStipple(
  mask: Deno.PointerValue | Uint8Array | null /* ptr */,
): void /* void */ {
  return libOPENGL32_dll.glGetPolygonStipple(util.toPointer(mask));
}

export function glGetString(
  name: number /* u32 */,
): Deno.PointerValue | null /* ptr */ {
  return util.pointerFromFfi(libOPENGL32_dll.glGetString(name));
}

export function glGetTexEnvfv(
  target: number /* u32 */,
  pname: number /* u32 */,
  params: Deno.PointerValue | Uint8Array | null /* ptr */,
): void /* void */ {
  return libOPENGL32_dll.glGetTexEnvfv(target, pname, util.toPointer(params));
}

export function glGetTexEnviv(
  target: number /* u32 */,
  pname: number /* u32 */,
  params: Deno.PointerValue | Uint8Array | null /* ptr */,
): void /* void */ {
  return libOPENGL32_dll.glGetTexEnviv(target, pname, util.toPointer(params));
}

export function glGetTexGendv(
  coord: number /* u32 */,
  pname: number /* u32 */,
  params: Deno.PointerValue | Uint8Array | null /* ptr */,
): void /* void */ {
  return libOPENGL32_dll.glGetTexGendv(coord, pname, util.toPointer(params));
}

export function glGetTexGenfv(
  coord: number /* u32 */,
  pname: number /* u32 */,
  params: Deno.PointerValue | Uint8Array | null /* ptr */,
): void /* void */ {
  return libOPENGL32_dll.glGetTexGenfv(coord, pname, util.toPointer(params));
}

export function glGetTexGeniv(
  coord: number /* u32 */,
  pname: number /* u32 */,
  params: Deno.PointerValue | Uint8Array | null /* ptr */,
): void /* void */ {
  return libOPENGL32_dll.glGetTexGeniv(coord, pname, util.toPointer(params));
}

export function glGetTexImage(
  target: number /* u32 */,
  level: number /* i32 */,
  format: number /* u32 */,
  type: number /* u32 */,
  pixels: Deno.PointerValue | Uint8Array | null /* ptr */,
): void /* void */ {
  return libOPENGL32_dll.glGetTexImage(target, level, format, type, util.toPointer(pixels));
}

export function glGetTexLevelParameterfv(
  target: number /* u32 */,
  level: number /* i32 */,
  pname: number /* u32 */,
  params: Deno.PointerValue | Uint8Array | null /* ptr */,
): void /* void */ {
  return libOPENGL32_dll.glGetTexLevelParameterfv(target, level, pname, util.toPointer(params));
}

export function glGetTexLevelParameteriv(
  target: number /* u32 */,
  level: number /* i32 */,
  pname: number /* u32 */,
  params: Deno.PointerValue | Uint8Array | null /* ptr */,
): void /* void */ {
  return libOPENGL32_dll.glGetTexLevelParameteriv(target, level, pname, util.toPointer(params));
}

export function glGetTexParameterfv(
  target: number /* u32 */,
  pname: number /* u32 */,
  params: Deno.PointerValue | Uint8Array | null /* ptr */,
): void /* void */ {
  return libOPENGL32_dll.glGetTexParameterfv(target, pname, util.toPointer(params));
}

export function glGetTexParameteriv(
  target: number /* u32 */,
  pname: number /* u32 */,
  params: Deno.PointerValue | Uint8Array | null /* ptr */,
): void /* void */ {
  return libOPENGL32_dll.glGetTexParameteriv(target, pname, util.toPointer(params));
}

export function glHint(
  target: number /* u32 */,
  mode: number /* u32 */,
): void /* void */ {
  return libOPENGL32_dll.glHint(target, mode);
}

export function glIndexMask(
  mask: number /* u32 */,
): void /* void */ {
  return libOPENGL32_dll.glIndexMask(mask);
}

export function glIndexPointer(
  type: number /* u32 */,
  stride: number /* i32 */,
  pointer: Deno.PointerValue | Uint8Array | null /* ptr */,
): void /* void */ {
  return libOPENGL32_dll.glIndexPointer(type, stride, util.toPointer(pointer));
}

export function glIndexd(
  c: number /* f64 */,
): void /* void */ {
  return libOPENGL32_dll.glIndexd(c);
}

export function glIndexdv(
  c: Deno.PointerValue | Uint8Array | null /* ptr */,
): void /* void */ {
  return libOPENGL32_dll.glIndexdv(util.toPointer(c));
}

export function glIndexf(
  c: number /* f32 */,
): void /* void */ {
  return libOPENGL32_dll.glIndexf(c);
}

export function glIndexfv(
  c: Deno.PointerValue | Uint8Array | null /* ptr */,
): void /* void */ {
  return libOPENGL32_dll.glIndexfv(util.toPointer(c));
}

export function glIndexi(
  c: number /* i32 */,
): void /* void */ {
  return libOPENGL32_dll.glIndexi(c);
}

export function glIndexiv(
  c: Deno.PointerValue | Uint8Array | null /* ptr */,
): void /* void */ {
  return libOPENGL32_dll.glIndexiv(util.toPointer(c));
}

export function glIndexs(
  c: number /* i16 */,
): void /* void */ {
  return libOPENGL32_dll.glIndexs(c);
}

export function glIndexsv(
  c: Deno.PointerValue | Uint8Array | null /* ptr */,
): void /* void */ {
  return libOPENGL32_dll.glIndexsv(util.toPointer(c));
}

export function glIndexub(
  c: number /* u8 */,
): void /* void */ {
  return libOPENGL32_dll.glIndexub(c);
}

export function glIndexubv(
  c: Deno.PointerValue | Uint8Array | null /* ptr */,
): void /* void */ {
  return libOPENGL32_dll.glIndexubv(util.toPointer(c));
}

export function glInitNames(): void /* void */ {
  return libOPENGL32_dll.glInitNames();
}

export function glInterleavedArrays(
  format: number /* u32 */,
  stride: number /* i32 */,
  pointer: Deno.PointerValue | Uint8Array | null /* ptr */,
): void /* void */ {
  return libOPENGL32_dll.glInterleavedArrays(format, stride, util.toPointer(pointer));
}

export function glIsEnabled(
  cap: number /* u32 */,
): number /* u8 */ {
  return libOPENGL32_dll.glIsEnabled(cap);
}

export function glIsList(
  list: number /* u32 */,
): number /* u8 */ {
  return libOPENGL32_dll.glIsList(list);
}

export function glIsTexture(
  texture: number /* u32 */,
): number /* u8 */ {
  return libOPENGL32_dll.glIsTexture(texture);
}

export function glLightModelf(
  pname: number /* u32 */,
  param1: number /* f32 */,
): void /* void */ {
  return libOPENGL32_dll.glLightModelf(pname, param1);
}

export function glLightModelfv(
  pname: number /* u32 */,
  params: Deno.PointerValue | Uint8Array | null /* ptr */,
): void /* void */ {
  return libOPENGL32_dll.glLightModelfv(pname, util.toPointer(params));
}

export function glLightModeli(
  pname: number /* u32 */,
  param1: number /* i32 */,
): void /* void */ {
  return libOPENGL32_dll.glLightModeli(pname, param1);
}

export function glLightModeliv(
  pname: number /* u32 */,
  params: Deno.PointerValue | Uint8Array | null /* ptr */,
): void /* void */ {
  return libOPENGL32_dll.glLightModeliv(pname, util.toPointer(params));
}

export function glLightf(
  light: number /* u32 */,
  pname: number /* u32 */,
  param2: number /* f32 */,
): void /* void */ {
  return libOPENGL32_dll.glLightf(light, pname, param2);
}

export function glLightfv(
  light: number /* u32 */,
  pname: number /* u32 */,
  params: Deno.PointerValue | Uint8Array | null /* ptr */,
): void /* void */ {
  return libOPENGL32_dll.glLightfv(light, pname, util.toPointer(params));
}

export function glLighti(
  light: number /* u32 */,
  pname: number /* u32 */,
  param2: number /* i32 */,
): void /* void */ {
  return libOPENGL32_dll.glLighti(light, pname, param2);
}

export function glLightiv(
  light: number /* u32 */,
  pname: number /* u32 */,
  params: Deno.PointerValue | Uint8Array | null /* ptr */,
): void /* void */ {
  return libOPENGL32_dll.glLightiv(light, pname, util.toPointer(params));
}

export function glLineStipple(
  factor: number /* i32 */,
  pattern: number /* u16 */,
): void /* void */ {
  return libOPENGL32_dll.glLineStipple(factor, pattern);
}

export function glLineWidth(
  width: number /* f32 */,
): void /* void */ {
  return libOPENGL32_dll.glLineWidth(width);
}

export function glListBase(
  base: number /* u32 */,
): void /* void */ {
  return libOPENGL32_dll.glListBase(base);
}

export function glLoadIdentity(): void /* void */ {
  return libOPENGL32_dll.glLoadIdentity();
}

export function glLoadMatrixd(
  m: Deno.PointerValue | Uint8Array | null /* ptr */,
): void /* void */ {
  return libOPENGL32_dll.glLoadMatrixd(util.toPointer(m));
}

export function glLoadMatrixf(
  m: Deno.PointerValue | Uint8Array | null /* ptr */,
): void /* void */ {
  return libOPENGL32_dll.glLoadMatrixf(util.toPointer(m));
}

export function glLoadName(
  name: number /* u32 */,
): void /* void */ {
  return libOPENGL32_dll.glLoadName(name);
}

export function glLogicOp(
  opcode: number /* u32 */,
): void /* void */ {
  return libOPENGL32_dll.glLogicOp(opcode);
}

export function glMap1d(
  target: number /* u32 */,
  u1: number /* f64 */,
  u2: number /* f64 */,
  stride: number /* i32 */,
  order: number /* i32 */,
  points: Deno.PointerValue | Uint8Array | null /* ptr */,
): void /* void */ {
  return libOPENGL32_dll.glMap1d(target, u1, u2, stride, order, util.toPointer(points));
}

export function glMap1f(
  target: number /* u32 */,
  u1: number /* f32 */,
  u2: number /* f32 */,
  stride: number /* i32 */,
  order: number /* i32 */,
  points: Deno.PointerValue | Uint8Array | null /* ptr */,
): void /* void */ {
  return libOPENGL32_dll.glMap1f(target, u1, u2, stride, order, util.toPointer(points));
}

export function glMap2d(
  target: number /* u32 */,
  u1: number /* f64 */,
  u2: number /* f64 */,
  ustride: number /* i32 */,
  uorder: number /* i32 */,
  v1: number /* f64 */,
  v2: number /* f64 */,
  vstride: number /* i32 */,
  vorder: number /* i32 */,
  points: Deno.PointerValue | Uint8Array | null /* ptr */,
): void /* void */ {
  return libOPENGL32_dll.glMap2d(target, u1, u2, ustride, uorder, v1, v2, vstride, vorder, util.toPointer(points));
}

export function glMap2f(
  target: number /* u32 */,
  u1: number /* f32 */,
  u2: number /* f32 */,
  ustride: number /* i32 */,
  uorder: number /* i32 */,
  v1: number /* f32 */,
  v2: number /* f32 */,
  vstride: number /* i32 */,
  vorder: number /* i32 */,
  points: Deno.PointerValue | Uint8Array | null /* ptr */,
): void /* void */ {
  return libOPENGL32_dll.glMap2f(target, u1, u2, ustride, uorder, v1, v2, vstride, vorder, util.toPointer(points));
}

export function glMapGrid1d(
  un: number /* i32 */,
  u1: number /* f64 */,
  u2: number /* f64 */,
): void /* void */ {
  return libOPENGL32_dll.glMapGrid1d(un, u1, u2);
}

export function glMapGrid1f(
  un: number /* i32 */,
  u1: number /* f32 */,
  u2: number /* f32 */,
): void /* void */ {
  return libOPENGL32_dll.glMapGrid1f(un, u1, u2);
}

export function glMapGrid2d(
  un: number /* i32 */,
  u1: number /* f64 */,
  u2: number /* f64 */,
  vn: number /* i32 */,
  v1: number /* f64 */,
  v2: number /* f64 */,
): void /* void */ {
  return libOPENGL32_dll.glMapGrid2d(un, u1, u2, vn, v1, v2);
}

export function glMapGrid2f(
  un: number /* i32 */,
  u1: number /* f32 */,
  u2: number /* f32 */,
  vn: number /* i32 */,
  v1: number /* f32 */,
  v2: number /* f32 */,
): void /* void */ {
  return libOPENGL32_dll.glMapGrid2f(un, u1, u2, vn, v1, v2);
}

export function glMaterialf(
  face: number /* u32 */,
  pname: number /* u32 */,
  param2: number /* f32 */,
): void /* void */ {
  return libOPENGL32_dll.glMaterialf(face, pname, param2);
}

export function glMaterialfv(
  face: number /* u32 */,
  pname: number /* u32 */,
  params: Deno.PointerValue | Uint8Array | null /* ptr */,
): void /* void */ {
  return libOPENGL32_dll.glMaterialfv(face, pname, util.toPointer(params));
}

export function glMateriali(
  face: number /* u32 */,
  pname: number /* u32 */,
  param2: number /* i32 */,
): void /* void */ {
  return libOPENGL32_dll.glMateriali(face, pname, param2);
}

export function glMaterialiv(
  face: number /* u32 */,
  pname: number /* u32 */,
  params: Deno.PointerValue | Uint8Array | null /* ptr */,
): void /* void */ {
  return libOPENGL32_dll.glMaterialiv(face, pname, util.toPointer(params));
}

export function glMatrixMode(
  mode: number /* u32 */,
): void /* void */ {
  return libOPENGL32_dll.glMatrixMode(mode);
}

export function glMultMatrixd(
  m: Deno.PointerValue | Uint8Array | null /* ptr */,
): void /* void */ {
  return libOPENGL32_dll.glMultMatrixd(util.toPointer(m));
}

export function glMultMatrixf(
  m: Deno.PointerValue | Uint8Array | null /* ptr */,
): void /* void */ {
  return libOPENGL32_dll.glMultMatrixf(util.toPointer(m));
}

export function glNewList(
  list: number /* u32 */,
  mode: number /* u32 */,
): void /* void */ {
  return libOPENGL32_dll.glNewList(list, mode);
}

export function glNormal3b(
  nx: number /* i8 */,
  ny: number /* i8 */,
  nz: number /* i8 */,
): void /* void */ {
  return libOPENGL32_dll.glNormal3b(nx, ny, nz);
}

export function glNormal3bv(
  v: Deno.PointerValue | Uint8Array | null /* ptr */,
): void /* void */ {
  return libOPENGL32_dll.glNormal3bv(util.toPointer(v));
}

export function glNormal3d(
  nx: number /* f64 */,
  ny: number /* f64 */,
  nz: number /* f64 */,
): void /* void */ {
  return libOPENGL32_dll.glNormal3d(nx, ny, nz);
}

export function glNormal3dv(
  v: Deno.PointerValue | Uint8Array | null /* ptr */,
): void /* void */ {
  return libOPENGL32_dll.glNormal3dv(util.toPointer(v));
}

export function glNormal3f(
  nx: number /* f32 */,
  ny: number /* f32 */,
  nz: number /* f32 */,
): void /* void */ {
  return libOPENGL32_dll.glNormal3f(nx, ny, nz);
}

export function glNormal3fv(
  v: Deno.PointerValue | Uint8Array | null /* ptr */,
): void /* void */ {
  return libOPENGL32_dll.glNormal3fv(util.toPointer(v));
}

export function glNormal3i(
  nx: number /* i32 */,
  ny: number /* i32 */,
  nz: number /* i32 */,
): void /* void */ {
  return libOPENGL32_dll.glNormal3i(nx, ny, nz);
}

export function glNormal3iv(
  v: Deno.PointerValue | Uint8Array | null /* ptr */,
): void /* void */ {
  return libOPENGL32_dll.glNormal3iv(util.toPointer(v));
}

export function glNormal3s(
  nx: number /* i16 */,
  ny: number /* i16 */,
  nz: number /* i16 */,
): void /* void */ {
  return libOPENGL32_dll.glNormal3s(nx, ny, nz);
}

export function glNormal3sv(
  v: Deno.PointerValue | Uint8Array | null /* ptr */,
): void /* void */ {
  return libOPENGL32_dll.glNormal3sv(util.toPointer(v));
}

export function glNormalPointer(
  type: number /* u32 */,
  stride: number /* i32 */,
  pointer: Deno.PointerValue | Uint8Array | null /* ptr */,
): void /* void */ {
  return libOPENGL32_dll.glNormalPointer(type, stride, util.toPointer(pointer));
}

export function glOrtho(
  left: number /* f64 */,
  right: number /* f64 */,
  bottom: number /* f64 */,
  top: number /* f64 */,
  zNear: number /* f64 */,
  zFar: number /* f64 */,
): void /* void */ {
  return libOPENGL32_dll.glOrtho(left, right, bottom, top, zNear, zFar);
}

export function glPassThrough(
  token: number /* f32 */,
): void /* void */ {
  return libOPENGL32_dll.glPassThrough(token);
}

export function glPixelMapfv(
  map: number /* u32 */,
  mapsize: number /* i32 */,
  values: Deno.PointerValue | Uint8Array | null /* ptr */,
): void /* void */ {
  return libOPENGL32_dll.glPixelMapfv(map, mapsize, util.toPointer(values));
}

export function glPixelMapuiv(
  map: number /* u32 */,
  mapsize: number /* i32 */,
  values: Deno.PointerValue | Uint8Array | null /* ptr */,
): void /* void */ {
  return libOPENGL32_dll.glPixelMapuiv(map, mapsize, util.toPointer(values));
}

export function glPixelMapusv(
  map: number /* u32 */,
  mapsize: number /* i32 */,
  values: Deno.PointerValue | Uint8Array | null /* ptr */,
): void /* void */ {
  return libOPENGL32_dll.glPixelMapusv(map, mapsize, util.toPointer(values));
}

export function glPixelStoref(
  pname: number /* u32 */,
  param1: number /* f32 */,
): void /* void */ {
  return libOPENGL32_dll.glPixelStoref(pname, param1);
}

export function glPixelStorei(
  pname: number /* u32 */,
  param1: number /* i32 */,
): void /* void */ {
  return libOPENGL32_dll.glPixelStorei(pname, param1);
}

export function glPixelTransferf(
  pname: number /* u32 */,
  param1: number /* f32 */,
): void /* void */ {
  return libOPENGL32_dll.glPixelTransferf(pname, param1);
}

export function glPixelTransferi(
  pname: number /* u32 */,
  param1: number /* i32 */,
): void /* void */ {
  return libOPENGL32_dll.glPixelTransferi(pname, param1);
}

export function glPixelZoom(
  xfactor: number /* f32 */,
  yfactor: number /* f32 */,
): void /* void */ {
  return libOPENGL32_dll.glPixelZoom(xfactor, yfactor);
}

export function glPointSize(
  size: number /* f32 */,
): void /* void */ {
  return libOPENGL32_dll.glPointSize(size);
}

export function glPolygonMode(
  face: number /* u32 */,
  mode: number /* u32 */,
): void /* void */ {
  return libOPENGL32_dll.glPolygonMode(face, mode);
}

export function glPolygonOffset(
  factor: number /* f32 */,
  units: number /* f32 */,
): void /* void */ {
  return libOPENGL32_dll.glPolygonOffset(factor, units);
}

export function glPolygonStipple(
  mask: Deno.PointerValue | Uint8Array | null /* ptr */,
): void /* void */ {
  return libOPENGL32_dll.glPolygonStipple(util.toPointer(mask));
}

export function glPopAttrib(): void /* void */ {
  return libOPENGL32_dll.glPopAttrib();
}

export function glPopClientAttrib(): void /* void */ {
  return libOPENGL32_dll.glPopClientAttrib();
}

export function glPopMatrix(): void /* void */ {
  return libOPENGL32_dll.glPopMatrix();
}

export function glPopName(): void /* void */ {
  return libOPENGL32_dll.glPopName();
}

export function glPrioritizeTextures(
  n: number /* i32 */,
  textures: Deno.PointerValue | Uint8Array | null /* ptr */,
  priorities: Deno.PointerValue | Uint8Array | null /* ptr */,
): void /* void */ {
  return libOPENGL32_dll.glPrioritizeTextures(n, util.toPointer(textures), util.toPointer(priorities));
}

export function glPushAttrib(
  mask: number /* u32 */,
): void /* void */ {
  return libOPENGL32_dll.glPushAttrib(mask);
}

export function glPushClientAttrib(
  mask: number /* u32 */,
): void /* void */ {
  return libOPENGL32_dll.glPushClientAttrib(mask);
}

export function glPushMatrix(): void /* void */ {
  return libOPENGL32_dll.glPushMatrix();
}

export function glPushName(
  name: number /* u32 */,
): void /* void */ {
  return libOPENGL32_dll.glPushName(name);
}

export function glRasterPos2d(
  x: number /* f64 */,
  y: number /* f64 */,
): void /* void */ {
  return libOPENGL32_dll.glRasterPos2d(x, y);
}

export function glRasterPos2dv(
  v: Deno.PointerValue | Uint8Array | null /* ptr */,
): void /* void */ {
  return libOPENGL32_dll.glRasterPos2dv(util.toPointer(v));
}

export function glRasterPos2f(
  x: number /* f32 */,
  y: number /* f32 */,
): void /* void */ {
  return libOPENGL32_dll.glRasterPos2f(x, y);
}

export function glRasterPos2fv(
  v: Deno.PointerValue | Uint8Array | null /* ptr */,
): void /* void */ {
  return libOPENGL32_dll.glRasterPos2fv(util.toPointer(v));
}

export function glRasterPos2i(
  x: number /* i32 */,
  y: number /* i32 */,
): void /* void */ {
  return libOPENGL32_dll.glRasterPos2i(x, y);
}

export function glRasterPos2iv(
  v: Deno.PointerValue | Uint8Array | null /* ptr */,
): void /* void */ {
  return libOPENGL32_dll.glRasterPos2iv(util.toPointer(v));
}

export function glRasterPos2s(
  x: number /* i16 */,
  y: number /* i16 */,
): void /* void */ {
  return libOPENGL32_dll.glRasterPos2s(x, y);
}

export function glRasterPos2sv(
  v: Deno.PointerValue | Uint8Array | null /* ptr */,
): void /* void */ {
  return libOPENGL32_dll.glRasterPos2sv(util.toPointer(v));
}

export function glRasterPos3d(
  x: number /* f64 */,
  y: number /* f64 */,
  z: number /* f64 */,
): void /* void */ {
  return libOPENGL32_dll.glRasterPos3d(x, y, z);
}

export function glRasterPos3dv(
  v: Deno.PointerValue | Uint8Array | null /* ptr */,
): void /* void */ {
  return libOPENGL32_dll.glRasterPos3dv(util.toPointer(v));
}

export function glRasterPos3f(
  x: number /* f32 */,
  y: number /* f32 */,
  z: number /* f32 */,
): void /* void */ {
  return libOPENGL32_dll.glRasterPos3f(x, y, z);
}

export function glRasterPos3fv(
  v: Deno.PointerValue | Uint8Array | null /* ptr */,
): void /* void */ {
  return libOPENGL32_dll.glRasterPos3fv(util.toPointer(v));
}

export function glRasterPos3i(
  x: number /* i32 */,
  y: number /* i32 */,
  z: number /* i32 */,
): void /* void */ {
  return libOPENGL32_dll.glRasterPos3i(x, y, z);
}

export function glRasterPos3iv(
  v: Deno.PointerValue | Uint8Array | null /* ptr */,
): void /* void */ {
  return libOPENGL32_dll.glRasterPos3iv(util.toPointer(v));
}

export function glRasterPos3s(
  x: number /* i16 */,
  y: number /* i16 */,
  z: number /* i16 */,
): void /* void */ {
  return libOPENGL32_dll.glRasterPos3s(x, y, z);
}

export function glRasterPos3sv(
  v: Deno.PointerValue | Uint8Array | null /* ptr */,
): void /* void */ {
  return libOPENGL32_dll.glRasterPos3sv(util.toPointer(v));
}

export function glRasterPos4d(
  x: number /* f64 */,
  y: number /* f64 */,
  z: number /* f64 */,
  w: number /* f64 */,
): void /* void */ {
  return libOPENGL32_dll.glRasterPos4d(x, y, z, w);
}

export function glRasterPos4dv(
  v: Deno.PointerValue | Uint8Array | null /* ptr */,
): void /* void */ {
  return libOPENGL32_dll.glRasterPos4dv(util.toPointer(v));
}

export function glRasterPos4f(
  x: number /* f32 */,
  y: number /* f32 */,
  z: number /* f32 */,
  w: number /* f32 */,
): void /* void */ {
  return libOPENGL32_dll.glRasterPos4f(x, y, z, w);
}

export function glRasterPos4fv(
  v: Deno.PointerValue | Uint8Array | null /* ptr */,
): void /* void */ {
  return libOPENGL32_dll.glRasterPos4fv(util.toPointer(v));
}

export function glRasterPos4i(
  x: number /* i32 */,
  y: number /* i32 */,
  z: number /* i32 */,
  w: number /* i32 */,
): void /* void */ {
  return libOPENGL32_dll.glRasterPos4i(x, y, z, w);
}

export function glRasterPos4iv(
  v: Deno.PointerValue | Uint8Array | null /* ptr */,
): void /* void */ {
  return libOPENGL32_dll.glRasterPos4iv(util.toPointer(v));
}

export function glRasterPos4s(
  x: number /* i16 */,
  y: number /* i16 */,
  z: number /* i16 */,
  w: number /* i16 */,
): void /* void */ {
  return libOPENGL32_dll.glRasterPos4s(x, y, z, w);
}

export function glRasterPos4sv(
  v: Deno.PointerValue | Uint8Array | null /* ptr */,
): void /* void */ {
  return libOPENGL32_dll.glRasterPos4sv(util.toPointer(v));
}

export function glReadBuffer(
  mode: number /* u32 */,
): void /* void */ {
  return libOPENGL32_dll.glReadBuffer(mode);
}

export function glReadPixels(
  x: number /* i32 */,
  y: number /* i32 */,
  width: number /* i32 */,
  height: number /* i32 */,
  format: number /* u32 */,
  type: number /* u32 */,
  pixels: Deno.PointerValue | Uint8Array | null /* ptr */,
): void /* void */ {
  return libOPENGL32_dll.glReadPixels(x, y, width, height, format, type, util.toPointer(pixels));
}

export function glRectd(
  x1: number /* f64 */,
  y1: number /* f64 */,
  x2: number /* f64 */,
  y2: number /* f64 */,
): void /* void */ {
  return libOPENGL32_dll.glRectd(x1, y1, x2, y2);
}

export function glRectdv(
  v1: Deno.PointerValue | Uint8Array | null /* ptr */,
  v2: Deno.PointerValue | Uint8Array | null /* ptr */,
): void /* void */ {
  return libOPENGL32_dll.glRectdv(util.toPointer(v1), util.toPointer(v2));
}

export function glRectf(
  x1: number /* f32 */,
  y1: number /* f32 */,
  x2: number /* f32 */,
  y2: number /* f32 */,
): void /* void */ {
  return libOPENGL32_dll.glRectf(x1, y1, x2, y2);
}

export function glRectfv(
  v1: Deno.PointerValue | Uint8Array | null /* ptr */,
  v2: Deno.PointerValue | Uint8Array | null /* ptr */,
): void /* void */ {
  return libOPENGL32_dll.glRectfv(util.toPointer(v1), util.toPointer(v2));
}

export function glRecti(
  x1: number /* i32 */,
  y1: number /* i32 */,
  x2: number /* i32 */,
  y2: number /* i32 */,
): void /* void */ {
  return libOPENGL32_dll.glRecti(x1, y1, x2, y2);
}

export function glRectiv(
  v1: Deno.PointerValue | Uint8Array | null /* ptr */,
  v2: Deno.PointerValue | Uint8Array | null /* ptr */,
): void /* void */ {
  return libOPENGL32_dll.glRectiv(util.toPointer(v1), util.toPointer(v2));
}

export function glRects(
  x1: number /* i16 */,
  y1: number /* i16 */,
  x2: number /* i16 */,
  y2: number /* i16 */,
): void /* void */ {
  return libOPENGL32_dll.glRects(x1, y1, x2, y2);
}

export function glRectsv(
  v1: Deno.PointerValue | Uint8Array | null /* ptr */,
  v2: Deno.PointerValue | Uint8Array | null /* ptr */,
): void /* void */ {
  return libOPENGL32_dll.glRectsv(util.toPointer(v1), util.toPointer(v2));
}

export function glRenderMode(
  mode: number /* u32 */,
): number /* i32 */ {
  return libOPENGL32_dll.glRenderMode(mode);
}

export function glRotated(
  angle: number /* f64 */,
  x: number /* f64 */,
  y: number /* f64 */,
  z: number /* f64 */,
): void /* void */ {
  return libOPENGL32_dll.glRotated(angle, x, y, z);
}

export function glRotatef(
  angle: number /* f32 */,
  x: number /* f32 */,
  y: number /* f32 */,
  z: number /* f32 */,
): void /* void */ {
  return libOPENGL32_dll.glRotatef(angle, x, y, z);
}

export function glScaled(
  x: number /* f64 */,
  y: number /* f64 */,
  z: number /* f64 */,
): void /* void */ {
  return libOPENGL32_dll.glScaled(x, y, z);
}

export function glScalef(
  x: number /* f32 */,
  y: number /* f32 */,
  z: number /* f32 */,
): void /* void */ {
  return libOPENGL32_dll.glScalef(x, y, z);
}

export function glScissor(
  x: number /* i32 */,
  y: number /* i32 */,
  width: number /* i32 */,
  height: number /* i32 */,
): void /* void */ {
  return libOPENGL32_dll.glScissor(x, y, width, height);
}

export function glSelectBuffer(
  size: number /* i32 */,
  buffer: Deno.PointerValue | Uint8Array | null /* ptr */,
): void /* void */ {
  return libOPENGL32_dll.glSelectBuffer(size, util.toPointer(buffer));
}

export function glShadeModel(
  mode: number /* u32 */,
): void /* void */ {
  return libOPENGL32_dll.glShadeModel(mode);
}

export function glStencilFunc(
  func: number /* u32 */,
  ref: number /* i32 */,
  mask: number /* u32 */,
): void /* void */ {
  return libOPENGL32_dll.glStencilFunc(func, ref, mask);
}

export function glStencilMask(
  mask: number /* u32 */,
): void /* void */ {
  return libOPENGL32_dll.glStencilMask(mask);
}

export function glStencilOp(
  fail: number /* u32 */,
  zfail: number /* u32 */,
  zpass: number /* u32 */,
): void /* void */ {
  return libOPENGL32_dll.glStencilOp(fail, zfail, zpass);
}

export function glTexCoord1d(
  s: number /* f64 */,
): void /* void */ {
  return libOPENGL32_dll.glTexCoord1d(s);
}

export function glTexCoord1dv(
  v: Deno.PointerValue | Uint8Array | null /* ptr */,
): void /* void */ {
  return libOPENGL32_dll.glTexCoord1dv(util.toPointer(v));
}

export function glTexCoord1f(
  s: number /* f32 */,
): void /* void */ {
  return libOPENGL32_dll.glTexCoord1f(s);
}

export function glTexCoord1fv(
  v: Deno.PointerValue | Uint8Array | null /* ptr */,
): void /* void */ {
  return libOPENGL32_dll.glTexCoord1fv(util.toPointer(v));
}

export function glTexCoord1i(
  s: number /* i32 */,
): void /* void */ {
  return libOPENGL32_dll.glTexCoord1i(s);
}

export function glTexCoord1iv(
  v: Deno.PointerValue | Uint8Array | null /* ptr */,
): void /* void */ {
  return libOPENGL32_dll.glTexCoord1iv(util.toPointer(v));
}

export function glTexCoord1s(
  s: number /* i16 */,
): void /* void */ {
  return libOPENGL32_dll.glTexCoord1s(s);
}

export function glTexCoord1sv(
  v: Deno.PointerValue | Uint8Array | null /* ptr */,
): void /* void */ {
  return libOPENGL32_dll.glTexCoord1sv(util.toPointer(v));
}

export function glTexCoord2d(
  s: number /* f64 */,
  t: number /* f64 */,
): void /* void */ {
  return libOPENGL32_dll.glTexCoord2d(s, t);
}

export function glTexCoord2dv(
  v: Deno.PointerValue | Uint8Array | null /* ptr */,
): void /* void */ {
  return libOPENGL32_dll.glTexCoord2dv(util.toPointer(v));
}

export function glTexCoord2f(
  s: number /* f32 */,
  t: number /* f32 */,
): void /* void */ {
  return libOPENGL32_dll.glTexCoord2f(s, t);
}

export function glTexCoord2fv(
  v: Deno.PointerValue | Uint8Array | null /* ptr */,
): void /* void */ {
  return libOPENGL32_dll.glTexCoord2fv(util.toPointer(v));
}

export function glTexCoord2i(
  s: number /* i32 */,
  t: number /* i32 */,
): void /* void */ {
  return libOPENGL32_dll.glTexCoord2i(s, t);
}

export function glTexCoord2iv(
  v: Deno.PointerValue | Uint8Array | null /* ptr */,
): void /* void */ {
  return libOPENGL32_dll.glTexCoord2iv(util.toPointer(v));
}

export function glTexCoord2s(
  s: number /* i16 */,
  t: number /* i16 */,
): void /* void */ {
  return libOPENGL32_dll.glTexCoord2s(s, t);
}

export function glTexCoord2sv(
  v: Deno.PointerValue | Uint8Array | null /* ptr */,
): void /* void */ {
  return libOPENGL32_dll.glTexCoord2sv(util.toPointer(v));
}

export function glTexCoord3d(
  s: number /* f64 */,
  t: number /* f64 */,
  r: number /* f64 */,
): void /* void */ {
  return libOPENGL32_dll.glTexCoord3d(s, t, r);
}

export function glTexCoord3dv(
  v: Deno.PointerValue | Uint8Array | null /* ptr */,
): void /* void */ {
  return libOPENGL32_dll.glTexCoord3dv(util.toPointer(v));
}

export function glTexCoord3f(
  s: number /* f32 */,
  t: number /* f32 */,
  r: number /* f32 */,
): void /* void */ {
  return libOPENGL32_dll.glTexCoord3f(s, t, r);
}

export function glTexCoord3fv(
  v: Deno.PointerValue | Uint8Array | null /* ptr */,
): void /* void */ {
  return libOPENGL32_dll.glTexCoord3fv(util.toPointer(v));
}

export function glTexCoord3i(
  s: number /* i32 */,
  t: number /* i32 */,
  r: number /* i32 */,
): void /* void */ {
  return libOPENGL32_dll.glTexCoord3i(s, t, r);
}

export function glTexCoord3iv(
  v: Deno.PointerValue | Uint8Array | null /* ptr */,
): void /* void */ {
  return libOPENGL32_dll.glTexCoord3iv(util.toPointer(v));
}

export function glTexCoord3s(
  s: number /* i16 */,
  t: number /* i16 */,
  r: number /* i16 */,
): void /* void */ {
  return libOPENGL32_dll.glTexCoord3s(s, t, r);
}

export function glTexCoord3sv(
  v: Deno.PointerValue | Uint8Array | null /* ptr */,
): void /* void */ {
  return libOPENGL32_dll.glTexCoord3sv(util.toPointer(v));
}

export function glTexCoord4d(
  s: number /* f64 */,
  t: number /* f64 */,
  r: number /* f64 */,
  q: number /* f64 */,
): void /* void */ {
  return libOPENGL32_dll.glTexCoord4d(s, t, r, q);
}

export function glTexCoord4dv(
  v: Deno.PointerValue | Uint8Array | null /* ptr */,
): void /* void */ {
  return libOPENGL32_dll.glTexCoord4dv(util.toPointer(v));
}

export function glTexCoord4f(
  s: number /* f32 */,
  t: number /* f32 */,
  r: number /* f32 */,
  q: number /* f32 */,
): void /* void */ {
  return libOPENGL32_dll.glTexCoord4f(s, t, r, q);
}

export function glTexCoord4fv(
  v: Deno.PointerValue | Uint8Array | null /* ptr */,
): void /* void */ {
  return libOPENGL32_dll.glTexCoord4fv(util.toPointer(v));
}

export function glTexCoord4i(
  s: number /* i32 */,
  t: number /* i32 */,
  r: number /* i32 */,
  q: number /* i32 */,
): void /* void */ {
  return libOPENGL32_dll.glTexCoord4i(s, t, r, q);
}

export function glTexCoord4iv(
  v: Deno.PointerValue | Uint8Array | null /* ptr */,
): void /* void */ {
  return libOPENGL32_dll.glTexCoord4iv(util.toPointer(v));
}

export function glTexCoord4s(
  s: number /* i16 */,
  t: number /* i16 */,
  r: number /* i16 */,
  q: number /* i16 */,
): void /* void */ {
  return libOPENGL32_dll.glTexCoord4s(s, t, r, q);
}

export function glTexCoord4sv(
  v: Deno.PointerValue | Uint8Array | null /* ptr */,
): void /* void */ {
  return libOPENGL32_dll.glTexCoord4sv(util.toPointer(v));
}

export function glTexCoordPointer(
  size: number /* i32 */,
  type: number /* u32 */,
  stride: number /* i32 */,
  pointer: Deno.PointerValue | Uint8Array | null /* ptr */,
): void /* void */ {
  return libOPENGL32_dll.glTexCoordPointer(size, type, stride, util.toPointer(pointer));
}

export function glTexEnvf(
  target: number /* u32 */,
  pname: number /* u32 */,
  param2: number /* f32 */,
): void /* void */ {
  return libOPENGL32_dll.glTexEnvf(target, pname, param2);
}

export function glTexEnvfv(
  target: number /* u32 */,
  pname: number /* u32 */,
  params: Deno.PointerValue | Uint8Array | null /* ptr */,
): void /* void */ {
  return libOPENGL32_dll.glTexEnvfv(target, pname, util.toPointer(params));
}

export function glTexEnvi(
  target: number /* u32 */,
  pname: number /* u32 */,
  param2: number /* i32 */,
): void /* void */ {
  return libOPENGL32_dll.glTexEnvi(target, pname, param2);
}

export function glTexEnviv(
  target: number /* u32 */,
  pname: number /* u32 */,
  params: Deno.PointerValue | Uint8Array | null /* ptr */,
): void /* void */ {
  return libOPENGL32_dll.glTexEnviv(target, pname, util.toPointer(params));
}

export function glTexGend(
  coord: number /* u32 */,
  pname: number /* u32 */,
  param2: number /* f64 */,
): void /* void */ {
  return libOPENGL32_dll.glTexGend(coord, pname, param2);
}

export function glTexGendv(
  coord: number /* u32 */,
  pname: number /* u32 */,
  params: Deno.PointerValue | Uint8Array | null /* ptr */,
): void /* void */ {
  return libOPENGL32_dll.glTexGendv(coord, pname, util.toPointer(params));
}

export function glTexGenf(
  coord: number /* u32 */,
  pname: number /* u32 */,
  param2: number /* f32 */,
): void /* void */ {
  return libOPENGL32_dll.glTexGenf(coord, pname, param2);
}

export function glTexGenfv(
  coord: number /* u32 */,
  pname: number /* u32 */,
  params: Deno.PointerValue | Uint8Array | null /* ptr */,
): void /* void */ {
  return libOPENGL32_dll.glTexGenfv(coord, pname, util.toPointer(params));
}

export function glTexGeni(
  coord: number /* u32 */,
  pname: number /* u32 */,
  param2: number /* i32 */,
): void /* void */ {
  return libOPENGL32_dll.glTexGeni(coord, pname, param2);
}

export function glTexGeniv(
  coord: number /* u32 */,
  pname: number /* u32 */,
  params: Deno.PointerValue | Uint8Array | null /* ptr */,
): void /* void */ {
  return libOPENGL32_dll.glTexGeniv(coord, pname, util.toPointer(params));
}

export function glTexImage1D(
  target: number /* u32 */,
  level: number /* i32 */,
  internalformat: number /* i32 */,
  width: number /* i32 */,
  border: number /* i32 */,
  format: number /* u32 */,
  type: number /* u32 */,
  pixels: Deno.PointerValue | Uint8Array | null /* ptr */,
): void /* void */ {
  return libOPENGL32_dll.glTexImage1D(target, level, internalformat, width, border, format, type, util.toPointer(pixels));
}

export function glTexImage2D(
  target: number /* u32 */,
  level: number /* i32 */,
  internalformat: number /* i32 */,
  width: number /* i32 */,
  height: number /* i32 */,
  border: number /* i32 */,
  format: number /* u32 */,
  type: number /* u32 */,
  pixels: Deno.PointerValue | Uint8Array | null /* ptr */,
): void /* void */ {
  return libOPENGL32_dll.glTexImage2D(target, level, internalformat, width, height, border, format, type, util.toPointer(pixels));
}

export function glTexParameterf(
  target: number /* u32 */,
  pname: number /* u32 */,
  param2: number /* f32 */,
): void /* void */ {
  return libOPENGL32_dll.glTexParameterf(target, pname, param2);
}

export function glTexParameterfv(
  target: number /* u32 */,
  pname: number /* u32 */,
  params: Deno.PointerValue | Uint8Array | null /* ptr */,
): void /* void */ {
  return libOPENGL32_dll.glTexParameterfv(target, pname, util.toPointer(params));
}

export function glTexParameteri(
  target: number /* u32 */,
  pname: number /* u32 */,
  param2: number /* i32 */,
): void /* void */ {
  return libOPENGL32_dll.glTexParameteri(target, pname, param2);
}

export function glTexParameteriv(
  target: number /* u32 */,
  pname: number /* u32 */,
  params: Deno.PointerValue | Uint8Array | null /* ptr */,
): void /* void */ {
  return libOPENGL32_dll.glTexParameteriv(target, pname, util.toPointer(params));
}

export function glTexSubImage1D(
  target: number /* u32 */,
  level: number /* i32 */,
  xoffset: number /* i32 */,
  width: number /* i32 */,
  format: number /* u32 */,
  type: number /* u32 */,
  pixels: Deno.PointerValue | Uint8Array | null /* ptr */,
): void /* void */ {
  return libOPENGL32_dll.glTexSubImage1D(target, level, xoffset, width, format, type, util.toPointer(pixels));
}

export function glTexSubImage2D(
  target: number /* u32 */,
  level: number /* i32 */,
  xoffset: number /* i32 */,
  yoffset: number /* i32 */,
  width: number /* i32 */,
  height: number /* i32 */,
  format: number /* u32 */,
  type: number /* u32 */,
  pixels: Deno.PointerValue | Uint8Array | null /* ptr */,
): void /* void */ {
  return libOPENGL32_dll.glTexSubImage2D(target, level, xoffset, yoffset, width, height, format, type, util.toPointer(pixels));
}

export function glTranslated(
  x: number /* f64 */,
  y: number /* f64 */,
  z: number /* f64 */,
): void /* void */ {
  return libOPENGL32_dll.glTranslated(x, y, z);
}

export function glTranslatef(
  x: number /* f32 */,
  y: number /* f32 */,
  z: number /* f32 */,
): void /* void */ {
  return libOPENGL32_dll.glTranslatef(x, y, z);
}

export function glVertex2d(
  x: number /* f64 */,
  y: number /* f64 */,
): void /* void */ {
  return libOPENGL32_dll.glVertex2d(x, y);
}

export function glVertex2dv(
  v: Deno.PointerValue | Uint8Array | null /* ptr */,
): void /* void */ {
  return libOPENGL32_dll.glVertex2dv(util.toPointer(v));
}

export function glVertex2f(
  x: number /* f32 */,
  y: number /* f32 */,
): void /* void */ {
  return libOPENGL32_dll.glVertex2f(x, y);
}

export function glVertex2fv(
  v: Deno.PointerValue | Uint8Array | null /* ptr */,
): void /* void */ {
  return libOPENGL32_dll.glVertex2fv(util.toPointer(v));
}

export function glVertex2i(
  x: number /* i32 */,
  y: number /* i32 */,
): void /* void */ {
  return libOPENGL32_dll.glVertex2i(x, y);
}

export function glVertex2iv(
  v: Deno.PointerValue | Uint8Array | null /* ptr */,
): void /* void */ {
  return libOPENGL32_dll.glVertex2iv(util.toPointer(v));
}

export function glVertex2s(
  x: number /* i16 */,
  y: number /* i16 */,
): void /* void */ {
  return libOPENGL32_dll.glVertex2s(x, y);
}

export function glVertex2sv(
  v: Deno.PointerValue | Uint8Array | null /* ptr */,
): void /* void */ {
  return libOPENGL32_dll.glVertex2sv(util.toPointer(v));
}

export function glVertex3d(
  x: number /* f64 */,
  y: number /* f64 */,
  z: number /* f64 */,
): void /* void */ {
  return libOPENGL32_dll.glVertex3d(x, y, z);
}

export function glVertex3dv(
  v: Deno.PointerValue | Uint8Array | null /* ptr */,
): void /* void */ {
  return libOPENGL32_dll.glVertex3dv(util.toPointer(v));
}

export function glVertex3f(
  x: number /* f32 */,
  y: number /* f32 */,
  z: number /* f32 */,
): void /* void */ {
  return libOPENGL32_dll.glVertex3f(x, y, z);
}

export function glVertex3fv(
  v: Deno.PointerValue | Uint8Array | null /* ptr */,
): void /* void */ {
  return libOPENGL32_dll.glVertex3fv(util.toPointer(v));
}

export function glVertex3i(
  x: number /* i32 */,
  y: number /* i32 */,
  z: number /* i32 */,
): void /* void */ {
  return libOPENGL32_dll.glVertex3i(x, y, z);
}

export function glVertex3iv(
  v: Deno.PointerValue | Uint8Array | null /* ptr */,
): void /* void */ {
  return libOPENGL32_dll.glVertex3iv(util.toPointer(v));
}

export function glVertex3s(
  x: number /* i16 */,
  y: number /* i16 */,
  z: number /* i16 */,
): void /* void */ {
  return libOPENGL32_dll.glVertex3s(x, y, z);
}

export function glVertex3sv(
  v: Deno.PointerValue | Uint8Array | null /* ptr */,
): void /* void */ {
  return libOPENGL32_dll.glVertex3sv(util.toPointer(v));
}

export function glVertex4d(
  x: number /* f64 */,
  y: number /* f64 */,
  z: number /* f64 */,
  w: number /* f64 */,
): void /* void */ {
  return libOPENGL32_dll.glVertex4d(x, y, z, w);
}

export function glVertex4dv(
  v: Deno.PointerValue | Uint8Array | null /* ptr */,
): void /* void */ {
  return libOPENGL32_dll.glVertex4dv(util.toPointer(v));
}

export function glVertex4f(
  x: number /* f32 */,
  y: number /* f32 */,
  z: number /* f32 */,
  w: number /* f32 */,
): void /* void */ {
  return libOPENGL32_dll.glVertex4f(x, y, z, w);
}

export function glVertex4fv(
  v: Deno.PointerValue | Uint8Array | null /* ptr */,
): void /* void */ {
  return libOPENGL32_dll.glVertex4fv(util.toPointer(v));
}

export function glVertex4i(
  x: number /* i32 */,
  y: number /* i32 */,
  z: number /* i32 */,
  w: number /* i32 */,
): void /* void */ {
  return libOPENGL32_dll.glVertex4i(x, y, z, w);
}

export function glVertex4iv(
  v: Deno.PointerValue | Uint8Array | null /* ptr */,
): void /* void */ {
  return libOPENGL32_dll.glVertex4iv(util.toPointer(v));
}

export function glVertex4s(
  x: number /* i16 */,
  y: number /* i16 */,
  z: number /* i16 */,
  w: number /* i16 */,
): void /* void */ {
  return libOPENGL32_dll.glVertex4s(x, y, z, w);
}

export function glVertex4sv(
  v: Deno.PointerValue | Uint8Array | null /* ptr */,
): void /* void */ {
  return libOPENGL32_dll.glVertex4sv(util.toPointer(v));
}

export function glVertexPointer(
  size: number /* i32 */,
  type: number /* u32 */,
  stride: number /* i32 */,
  pointer: Deno.PointerValue | Uint8Array | null /* ptr */,
): void /* void */ {
  return libOPENGL32_dll.glVertexPointer(size, type, stride, util.toPointer(pointer));
}

export function glViewport(
  x: number /* i32 */,
  y: number /* i32 */,
  width: number /* i32 */,
  height: number /* i32 */,
): void /* void */ {
  return libOPENGL32_dll.glViewport(x, y, width, height);
}

export function gluErrorString(
  errCode: number /* u32 */,
): Deno.PointerValue | null /* ptr */ {
  return util.pointerFromFfi(libGLU32_dll.gluErrorString(errCode));
}

export function gluErrorUnicodeStringEXT(
  errCode: number /* u32 */,
): string | null /* Windows.Win32.Foundation.PWSTR */ {
  return util.pwstrFromFfi(libGLU32_dll.gluErrorUnicodeStringEXT(errCode));
}

export function gluGetString(
  name: number /* u32 */,
): Deno.PointerValue | null /* ptr */ {
  return util.pointerFromFfi(libGLU32_dll.gluGetString(name));
}

export function gluOrtho2D(
  left: number /* f64 */,
  right: number /* f64 */,
  bottom: number /* f64 */,
  top: number /* f64 */,
): void /* void */ {
  return libGLU32_dll.gluOrtho2D(left, right, bottom, top);
}

export function gluPerspective(
  fovy: number /* f64 */,
  aspect: number /* f64 */,
  zNear: number /* f64 */,
  zFar: number /* f64 */,
): void /* void */ {
  return libGLU32_dll.gluPerspective(fovy, aspect, zNear, zFar);
}

export function gluPickMatrix(
  x: number /* f64 */,
  y: number /* f64 */,
  width: number /* f64 */,
  height: number /* f64 */,
  viewport: Deno.PointerValue | Uint8Array | null /* ptr */,
): void /* void */ {
  return libGLU32_dll.gluPickMatrix(x, y, width, height, util.toPointer(viewport));
}

export function gluLookAt(
  eyex: number /* f64 */,
  eyey: number /* f64 */,
  eyez: number /* f64 */,
  centerx: number /* f64 */,
  centery: number /* f64 */,
  centerz: number /* f64 */,
  upx: number /* f64 */,
  upy: number /* f64 */,
  upz: number /* f64 */,
): void /* void */ {
  return libGLU32_dll.gluLookAt(eyex, eyey, eyez, centerx, centery, centerz, upx, upy, upz);
}

export function gluProject(
  objx: number /* f64 */,
  objy: number /* f64 */,
  objz: number /* f64 */,
  modelMatrix: Deno.PointerValue | Uint8Array | null /* ptr */,
  projMatrix: Deno.PointerValue | Uint8Array | null /* ptr */,
  viewport: Deno.PointerValue | Uint8Array | null /* ptr */,
  winx: Deno.PointerValue | Uint8Array | null /* ptr */,
  winy: Deno.PointerValue | Uint8Array | null /* ptr */,
  winz: Deno.PointerValue | Uint8Array | null /* ptr */,
): number /* i32 */ {
  return libGLU32_dll.gluProject(objx, objy, objz, util.toPointer(modelMatrix), util.toPointer(projMatrix), util.toPointer(viewport), util.toPointer(winx), util.toPointer(winy), util.toPointer(winz));
}

export function gluUnProject(
  winx: number /* f64 */,
  winy: number /* f64 */,
  winz: number /* f64 */,
  modelMatrix: Deno.PointerValue | Uint8Array | null /* ptr */,
  projMatrix: Deno.PointerValue | Uint8Array | null /* ptr */,
  viewport: Deno.PointerValue | Uint8Array | null /* ptr */,
  objx: Deno.PointerValue | Uint8Array | null /* ptr */,
  objy: Deno.PointerValue | Uint8Array | null /* ptr */,
  objz: Deno.PointerValue | Uint8Array | null /* ptr */,
): number /* i32 */ {
  return libGLU32_dll.gluUnProject(winx, winy, winz, util.toPointer(modelMatrix), util.toPointer(projMatrix), util.toPointer(viewport), util.toPointer(objx), util.toPointer(objy), util.toPointer(objz));
}

export function gluScaleImage(
  format: number /* u32 */,
  widthin: number /* i32 */,
  heightin: number /* i32 */,
  typein: number /* u32 */,
  datain: Deno.PointerValue | Uint8Array | null /* ptr */,
  widthout: number /* i32 */,
  heightout: number /* i32 */,
  typeout: number /* u32 */,
  dataout: Deno.PointerValue | Uint8Array | null /* ptr */,
): number /* i32 */ {
  return libGLU32_dll.gluScaleImage(format, widthin, heightin, typein, util.toPointer(datain), widthout, heightout, typeout, util.toPointer(dataout));
}

export function gluBuild1DMipmaps(
  target: number /* u32 */,
  components: number /* i32 */,
  width: number /* i32 */,
  format: number /* u32 */,
  type: number /* u32 */,
  data: Deno.PointerValue | Uint8Array | null /* ptr */,
): number /* i32 */ {
  return libGLU32_dll.gluBuild1DMipmaps(target, components, width, format, type, util.toPointer(data));
}

export function gluBuild2DMipmaps(
  target: number /* u32 */,
  components: number /* i32 */,
  width: number /* i32 */,
  height: number /* i32 */,
  format: number /* u32 */,
  type: number /* u32 */,
  data: Deno.PointerValue | Uint8Array | null /* ptr */,
): number /* i32 */ {
  return libGLU32_dll.gluBuild2DMipmaps(target, components, width, height, format, type, util.toPointer(data));
}

export function gluNewQuadric(): Deno.PointerValue | null /* ptr */ {
  return util.pointerFromFfi(libGLU32_dll.gluNewQuadric());
}

export function gluDeleteQuadric(
  state: Deno.PointerValue | Uint8Array | null /* ptr */,
): void /* void */ {
  return libGLU32_dll.gluDeleteQuadric(util.toPointer(state));
}

export function gluQuadricNormals(
  quadObject: Deno.PointerValue | Uint8Array | null /* ptr */,
  normals: number /* u32 */,
): void /* void */ {
  return libGLU32_dll.gluQuadricNormals(util.toPointer(quadObject), normals);
}

export function gluQuadricTexture(
  quadObject: Deno.PointerValue | Uint8Array | null /* ptr */,
  textureCoords: number /* u8 */,
): void /* void */ {
  return libGLU32_dll.gluQuadricTexture(util.toPointer(quadObject), textureCoords);
}

export function gluQuadricOrientation(
  quadObject: Deno.PointerValue | Uint8Array | null /* ptr */,
  orientation: number /* u32 */,
): void /* void */ {
  return libGLU32_dll.gluQuadricOrientation(util.toPointer(quadObject), orientation);
}

export function gluQuadricDrawStyle(
  quadObject: Deno.PointerValue | Uint8Array | null /* ptr */,
  drawStyle: number /* u32 */,
): void /* void */ {
  return libGLU32_dll.gluQuadricDrawStyle(util.toPointer(quadObject), drawStyle);
}

export function gluCylinder(
  qobj: Deno.PointerValue | Uint8Array | null /* ptr */,
  baseRadius: number /* f64 */,
  topRadius: number /* f64 */,
  height: number /* f64 */,
  slices: number /* i32 */,
  stacks: number /* i32 */,
): void /* void */ {
  return libGLU32_dll.gluCylinder(util.toPointer(qobj), baseRadius, topRadius, height, slices, stacks);
}

export function gluDisk(
  qobj: Deno.PointerValue | Uint8Array | null /* ptr */,
  innerRadius: number /* f64 */,
  outerRadius: number /* f64 */,
  slices: number /* i32 */,
  loops: number /* i32 */,
): void /* void */ {
  return libGLU32_dll.gluDisk(util.toPointer(qobj), innerRadius, outerRadius, slices, loops);
}

export function gluPartialDisk(
  qobj: Deno.PointerValue | Uint8Array | null /* ptr */,
  innerRadius: number /* f64 */,
  outerRadius: number /* f64 */,
  slices: number /* i32 */,
  loops: number /* i32 */,
  startAngle: number /* f64 */,
  sweepAngle: number /* f64 */,
): void /* void */ {
  return libGLU32_dll.gluPartialDisk(util.toPointer(qobj), innerRadius, outerRadius, slices, loops, startAngle, sweepAngle);
}

export function gluSphere(
  qobj: Deno.PointerValue | Uint8Array | null /* ptr */,
  radius: number /* f64 */,
  slices: number /* i32 */,
  stacks: number /* i32 */,
): void /* void */ {
  return libGLU32_dll.gluSphere(util.toPointer(qobj), radius, slices, stacks);
}

export function gluQuadricCallback(
  qobj: Deno.PointerValue | Uint8Array | null /* ptr */,
  which: number /* u32 */,
  fn: Deno.PointerValue /* isize */,
): void /* void */ {
  return libGLU32_dll.gluQuadricCallback(util.toPointer(qobj), which, fn);
}

export function gluNewTess(): Deno.PointerValue | null /* ptr */ {
  return util.pointerFromFfi(libGLU32_dll.gluNewTess());
}

export function gluDeleteTess(
  tess: Deno.PointerValue | Uint8Array | null /* ptr */,
): void /* void */ {
  return libGLU32_dll.gluDeleteTess(util.toPointer(tess));
}

export function gluTessBeginPolygon(
  tess: Deno.PointerValue | Uint8Array | null /* ptr */,
  polygon_data: Deno.PointerValue | Uint8Array | null /* ptr */,
): void /* void */ {
  return libGLU32_dll.gluTessBeginPolygon(util.toPointer(tess), util.toPointer(polygon_data));
}

export function gluTessBeginContour(
  tess: Deno.PointerValue | Uint8Array | null /* ptr */,
): void /* void */ {
  return libGLU32_dll.gluTessBeginContour(util.toPointer(tess));
}

export function gluTessVertex(
  tess: Deno.PointerValue | Uint8Array | null /* ptr */,
  coords: Deno.PointerValue | Uint8Array | null /* ptr */,
  data: Deno.PointerValue | Uint8Array | null /* ptr */,
): void /* void */ {
  return libGLU32_dll.gluTessVertex(util.toPointer(tess), util.toPointer(coords), util.toPointer(data));
}

export function gluTessEndContour(
  tess: Deno.PointerValue | Uint8Array | null /* ptr */,
): void /* void */ {
  return libGLU32_dll.gluTessEndContour(util.toPointer(tess));
}

export function gluTessEndPolygon(
  tess: Deno.PointerValue | Uint8Array | null /* ptr */,
): void /* void */ {
  return libGLU32_dll.gluTessEndPolygon(util.toPointer(tess));
}

export function gluTessProperty(
  tess: Deno.PointerValue | Uint8Array | null /* ptr */,
  which: number /* u32 */,
  value: number /* f64 */,
): void /* void */ {
  return libGLU32_dll.gluTessProperty(util.toPointer(tess), which, value);
}

export function gluTessNormal(
  tess: Deno.PointerValue | Uint8Array | null /* ptr */,
  x: number /* f64 */,
  y: number /* f64 */,
  z: number /* f64 */,
): void /* void */ {
  return libGLU32_dll.gluTessNormal(util.toPointer(tess), x, y, z);
}

export function gluTessCallback(
  tess: Deno.PointerValue | Uint8Array | null /* ptr */,
  which: number /* u32 */,
  fn: Deno.PointerValue /* isize */,
): void /* void */ {
  return libGLU32_dll.gluTessCallback(util.toPointer(tess), which, fn);
}

export function gluGetTessProperty(
  tess: Deno.PointerValue | Uint8Array | null /* ptr */,
  which: number /* u32 */,
  value: Deno.PointerValue | Uint8Array | null /* ptr */,
): void /* void */ {
  return libGLU32_dll.gluGetTessProperty(util.toPointer(tess), which, util.toPointer(value));
}

export function gluNewNurbsRenderer(): Deno.PointerValue | null /* ptr */ {
  return util.pointerFromFfi(libGLU32_dll.gluNewNurbsRenderer());
}

export function gluDeleteNurbsRenderer(
  nobj: Deno.PointerValue | Uint8Array | null /* ptr */,
): void /* void */ {
  return libGLU32_dll.gluDeleteNurbsRenderer(util.toPointer(nobj));
}

export function gluBeginSurface(
  nobj: Deno.PointerValue | Uint8Array | null /* ptr */,
): void /* void */ {
  return libGLU32_dll.gluBeginSurface(util.toPointer(nobj));
}

export function gluBeginCurve(
  nobj: Deno.PointerValue | Uint8Array | null /* ptr */,
): void /* void */ {
  return libGLU32_dll.gluBeginCurve(util.toPointer(nobj));
}

export function gluEndCurve(
  nobj: Deno.PointerValue | Uint8Array | null /* ptr */,
): void /* void */ {
  return libGLU32_dll.gluEndCurve(util.toPointer(nobj));
}

export function gluEndSurface(
  nobj: Deno.PointerValue | Uint8Array | null /* ptr */,
): void /* void */ {
  return libGLU32_dll.gluEndSurface(util.toPointer(nobj));
}

export function gluBeginTrim(
  nobj: Deno.PointerValue | Uint8Array | null /* ptr */,
): void /* void */ {
  return libGLU32_dll.gluBeginTrim(util.toPointer(nobj));
}

export function gluEndTrim(
  nobj: Deno.PointerValue | Uint8Array | null /* ptr */,
): void /* void */ {
  return libGLU32_dll.gluEndTrim(util.toPointer(nobj));
}

export function gluPwlCurve(
  nobj: Deno.PointerValue | Uint8Array | null /* ptr */,
  count: number /* i32 */,
  array: Deno.PointerValue | Uint8Array | null /* ptr */,
  stride: number /* i32 */,
  type: number /* u32 */,
): void /* void */ {
  return libGLU32_dll.gluPwlCurve(util.toPointer(nobj), count, util.toPointer(array), stride, type);
}

export function gluNurbsCurve(
  nobj: Deno.PointerValue | Uint8Array | null /* ptr */,
  nknots: number /* i32 */,
  knot: Deno.PointerValue | Uint8Array | null /* ptr */,
  stride: number /* i32 */,
  ctlarray: Deno.PointerValue | Uint8Array | null /* ptr */,
  order: number /* i32 */,
  type: number /* u32 */,
): void /* void */ {
  return libGLU32_dll.gluNurbsCurve(util.toPointer(nobj), nknots, util.toPointer(knot), stride, util.toPointer(ctlarray), order, type);
}

export function gluNurbsSurface(
  nobj: Deno.PointerValue | Uint8Array | null /* ptr */,
  sknot_count: number /* i32 */,
  sknot: Deno.PointerValue | Uint8Array | null /* ptr */,
  tknot_count: number /* i32 */,
  tknot: Deno.PointerValue | Uint8Array | null /* ptr */,
  s_stride: number /* i32 */,
  t_stride: number /* i32 */,
  ctlarray: Deno.PointerValue | Uint8Array | null /* ptr */,
  sorder: number /* i32 */,
  torder: number /* i32 */,
  type: number /* u32 */,
): void /* void */ {
  return libGLU32_dll.gluNurbsSurface(util.toPointer(nobj), sknot_count, util.toPointer(sknot), tknot_count, util.toPointer(tknot), s_stride, t_stride, util.toPointer(ctlarray), sorder, torder, type);
}

export function gluLoadSamplingMatrices(
  nobj: Deno.PointerValue | Uint8Array | null /* ptr */,
  modelMatrix: Deno.PointerValue | Uint8Array | null /* ptr */,
  projMatrix: Deno.PointerValue | Uint8Array | null /* ptr */,
  viewport: Deno.PointerValue | Uint8Array | null /* ptr */,
): void /* void */ {
  return libGLU32_dll.gluLoadSamplingMatrices(util.toPointer(nobj), util.toPointer(modelMatrix), util.toPointer(projMatrix), util.toPointer(viewport));
}

export function gluNurbsProperty(
  nobj: Deno.PointerValue | Uint8Array | null /* ptr */,
  property: number /* u32 */,
  value: number /* f32 */,
): void /* void */ {
  return libGLU32_dll.gluNurbsProperty(util.toPointer(nobj), property, value);
}

export function gluGetNurbsProperty(
  nobj: Deno.PointerValue | Uint8Array | null /* ptr */,
  property: number /* u32 */,
  value: Deno.PointerValue | Uint8Array | null /* ptr */,
): void /* void */ {
  return libGLU32_dll.gluGetNurbsProperty(util.toPointer(nobj), property, util.toPointer(value));
}

export function gluNurbsCallback(
  nobj: Deno.PointerValue | Uint8Array | null /* ptr */,
  which: number /* u32 */,
  fn: Deno.PointerValue /* isize */,
): void /* void */ {
  return libGLU32_dll.gluNurbsCallback(util.toPointer(nobj), which, fn);
}

export function gluBeginPolygon(
  tess: Deno.PointerValue | Uint8Array | null /* ptr */,
): void /* void */ {
  return libGLU32_dll.gluBeginPolygon(util.toPointer(tess));
}

export function gluNextContour(
  tess: Deno.PointerValue | Uint8Array | null /* ptr */,
  type: number /* u32 */,
): void /* void */ {
  return libGLU32_dll.gluNextContour(util.toPointer(tess), type);
}

export function gluEndPolygon(
  tess: Deno.PointerValue | Uint8Array | null /* ptr */,
): void /* void */ {
  return libGLU32_dll.gluEndPolygon(util.toPointer(tess));
}

