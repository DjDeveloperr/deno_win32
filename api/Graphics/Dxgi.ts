/// Auto-generated by Deno Win32: Windows.Win32.Graphics.Dxgi.Apis

import * as util from "../../util.ts";

// Enums
export type DXGI_RESOURCE_PRIORITY = number;
export type DXGI_COLOR_SPACE_TYPE = number;
export type DXGI_FORMAT = number;
export type DXGI_MODE_SCANLINE_ORDER = number;
export type DXGI_MODE_SCALING = number;
export type DXGI_MODE_ROTATION = number;
export type DXGI_RESIDENCY = number;
export type DXGI_SWAP_EFFECT = number;
export type DXGI_SWAP_CHAIN_FLAG = number;
export type DXGI_ADAPTER_FLAG = number;
export type DXGI_OUTDUPL_POINTER_SHAPE_TYPE = number;
export type DXGI_OFFER_RESOURCE_PRIORITY = number;
export type DXGI_SCALING = number;
export type DXGI_ALPHA_MODE = number;
export type DXGI_GRAPHICS_PREEMPTION_GRANULARITY = number;
export type DXGI_COMPUTE_PREEMPTION_GRANULARITY = number;
export type DXGI_MULTIPLANE_OVERLAY_YCbCr_FLAGS = number;
export type DXGI_FRAME_PRESENTATION_MODE = number;
export type DXGI_OVERLAY_SUPPORT_FLAG = number;
export type DXGI_SWAP_CHAIN_COLOR_SPACE_SUPPORT_FLAG = number;
export type DXGI_OVERLAY_COLOR_SPACE_SUPPORT_FLAG = number;
export type DXGI_MEMORY_SEGMENT_GROUP = number;
export type DXGI_OUTDUPL_FLAG = number;
export type DXGI_HDR_METADATA_TYPE = number;
export type DXGI_OFFER_RESOURCE_FLAGS = number;
export type DXGI_RECLAIM_RESOURCE_RESULTS = number;
export type DXGI_FEATURE = number;
export type DXGI_ADAPTER_FLAG3 = number;
export type DXGI_HARDWARE_COMPOSITION_SUPPORT_FLAGS = number;
export type DXGI_GPU_PREFERENCE = number;
export type DXGI_DEBUG_RLO_FLAGS = number;
export type DXGI_INFO_QUEUE_MESSAGE_CATEGORY = number;
export type DXGI_INFO_QUEUE_MESSAGE_SEVERITY = number;
export type DXGI_Message_Id = number;

// Constants
export const DXGI_RESOURCE_PRIORITY_MINIMUM = 671088640;
export const DXGI_RESOURCE_PRIORITY_LOW = 1342177280;
export const DXGI_RESOURCE_PRIORITY_NORMAL = 2013265920;
export const DXGI_RESOURCE_PRIORITY_HIGH = 2684354560;
export const DXGI_RESOURCE_PRIORITY_MAXIMUM = 3355443200;
export const _FACDXGI = 2170;
export const DXGI_CPU_ACCESS_NONE = 0;
export const DXGI_CPU_ACCESS_DYNAMIC = 1;
export const DXGI_CPU_ACCESS_READ_WRITE = 2;
export const DXGI_CPU_ACCESS_SCRATCH = 3;
export const DXGI_CPU_ACCESS_FIELD = 15;
export const DXGI_FORMAT_DEFINED = 1;
export const DXGI_STANDARD_MULTISAMPLE_QUALITY_PATTERN = 4294967295;
export const DXGI_CENTER_MULTISAMPLE_QUALITY_PATTERN = 4294967294;
export const DXGI_USAGE_SHADER_INPUT = 16;
export const DXGI_USAGE_RENDER_TARGET_OUTPUT = 32;
export const DXGI_USAGE_BACK_BUFFER = 64;
export const DXGI_USAGE_SHARED = 128;
export const DXGI_USAGE_READ_ONLY = 256;
export const DXGI_USAGE_DISCARD_ON_PRESENT = 512;
export const DXGI_USAGE_UNORDERED_ACCESS = 1024;
export const DXGI_MAP_READ = 1;
export const DXGI_MAP_WRITE = 2;
export const DXGI_MAP_DISCARD = 4;
export const DXGI_ENUM_MODES_INTERLACED = 1;
export const DXGI_ENUM_MODES_SCALING = 2;
export const DXGI_MAX_SWAP_CHAIN_BUFFERS = 16;
export const DXGI_PRESENT_TEST = 1;
export const DXGI_PRESENT_DO_NOT_SEQUENCE = 2;
export const DXGI_PRESENT_RESTART = 4;
export const DXGI_PRESENT_DO_NOT_WAIT = 8;
export const DXGI_PRESENT_STEREO_PREFER_RIGHT = 16;
export const DXGI_PRESENT_STEREO_TEMPORARY_MONO = 32;
export const DXGI_PRESENT_RESTRICT_TO_OUTPUT = 64;
export const DXGI_PRESENT_USE_DURATION = 256;
export const DXGI_PRESENT_ALLOW_TEARING = 512;
export const DXGI_MWA_NO_WINDOW_CHANGES = 1;
export const DXGI_MWA_NO_ALT_ENTER = 2;
export const DXGI_MWA_NO_PRINT_SCREEN = 4;
export const DXGI_MWA_VALID = 7;
export const DXGI_ENUM_MODES_STEREO = 4;
export const DXGI_ENUM_MODES_DISABLED_STEREO = 8;
export const DXGI_SHARED_RESOURCE_READ = 2147483648;
export const DXGI_SHARED_RESOURCE_WRITE = 1;
export const DXGI_DEBUG_BINARY_VERSION = 1;
export const DXGI_INFO_QUEUE_MESSAGE_ID_STRING_FROM_APPLICATION = 0;
export const DXGI_INFO_QUEUE_DEFAULT_MESSAGE_COUNT_LIMIT = 1024;
export const DXGI_CREATE_FACTORY_DEBUG = 1;
export const DXGI_ERROR_INVALID_CALL = 8791028691120029697n;
export const DXGI_ERROR_NOT_FOUND = 8791029790631657474n;
export const DXGI_ERROR_MORE_DATA = 8791030890143285251n;
export const DXGI_ERROR_UNSUPPORTED = 8791031989654913028n;
export const DXGI_ERROR_DEVICE_REMOVED = 8791033089166540805n;
export const DXGI_ERROR_DEVICE_HUNG = 8791034188678168582n;
export const DXGI_ERROR_DEVICE_RESET = 8791037487213051911n;
export const DXGI_ERROR_WAS_STILL_DRAWING = 8791038586724679690n;
export const DXGI_ERROR_FRAME_STATISTICS_DISJOINT = 8791039686236307467n;
export const DXGI_ERROR_GRAPHICS_VIDPN_SOURCE_IN_USE = 8791061676468862988n;
export const DXGI_ERROR_DRIVER_INTERNAL_ERROR = 8791062775980490784n;
export const DXGI_ERROR_NONEXCLUSIVE = 8791063875492118561n;
export const DXGI_ERROR_NOT_CURRENTLY_AVAILABLE = 8791064975003746338n;
export const DXGI_ERROR_REMOTE_CLIENT_DISCONNECTED = 8791066074515374115n;
export const DXGI_ERROR_REMOTE_OUTOFMEMORY = 8791068273538629668n;
export const DXGI_ERROR_ACCESS_LOST = 8791069373050257446n;
export const DXGI_ERROR_WAIT_TIMEOUT = 8791070472561885223n;
export const DXGI_ERROR_SESSION_DISCONNECTED = 8791071572073513000n;
export const DXGI_ERROR_RESTRICT_TO_OUTPUT_STALE = 8791072671585140777n;
export const DXGI_ERROR_CANNOT_PROTECT_CONTENT = 8791073771096768554n;
export const DXGI_ERROR_ACCESS_DENIED = 8791074870608396331n;
export const DXGI_ERROR_NAME_ALREADY_EXISTS = 8791075970120024108n;
export const DXGI_ERROR_SDK_COMPONENT_MISSING = 8791077069631651885n;
export const DXGI_ERROR_NOT_CURRENT = 8791079268654907438n;
export const DXGI_ERROR_HW_PROTECTION_OUTOFMEMORY = 8791080368166535216n;
export const DXGI_ERROR_DYNAMIC_CODE_POLICY_VIOLATION = 8791081467678162993n;
export const DXGI_ERROR_NON_COMPOSITED_UI = 8791067174027001906n;
export const DXGI_ERROR_MODE_CHANGE_IN_PROGRESS = 8791082567189790757n;
export const DXGI_ERROR_CACHE_CORRUPT = 8791083666701418547n;
export const DXGI_ERROR_CACHE_FULL = 8791084766213046324n;
export const DXGI_ERROR_CACHE_HASH_COLLISION = 8791085865724674101n;
export const DXGI_ERROR_ALREADY_EXISTS = 1225823573109243958n;
export const DXGI_COLOR_SPACE_RGB_FULL_G22_NONE_P709 = 0;
export const DXGI_COLOR_SPACE_RGB_FULL_G10_NONE_P709 = 1;
export const DXGI_COLOR_SPACE_RGB_STUDIO_G22_NONE_P709 = 2;
export const DXGI_COLOR_SPACE_RGB_STUDIO_G22_NONE_P2020 = 3;
export const DXGI_COLOR_SPACE_RESERVED = 4;
export const DXGI_COLOR_SPACE_YCBCR_FULL_G22_NONE_P709_X601 = 5;
export const DXGI_COLOR_SPACE_YCBCR_STUDIO_G22_LEFT_P601 = 6;
export const DXGI_COLOR_SPACE_YCBCR_FULL_G22_LEFT_P601 = 7;
export const DXGI_COLOR_SPACE_YCBCR_STUDIO_G22_LEFT_P709 = 8;
export const DXGI_COLOR_SPACE_YCBCR_FULL_G22_LEFT_P709 = 9;
export const DXGI_COLOR_SPACE_YCBCR_STUDIO_G22_LEFT_P2020 = 10;
export const DXGI_COLOR_SPACE_YCBCR_FULL_G22_LEFT_P2020 = 11;
export const DXGI_COLOR_SPACE_RGB_FULL_G2084_NONE_P2020 = 12;
export const DXGI_COLOR_SPACE_YCBCR_STUDIO_G2084_LEFT_P2020 = 13;
export const DXGI_COLOR_SPACE_RGB_STUDIO_G2084_NONE_P2020 = 14;
export const DXGI_COLOR_SPACE_YCBCR_STUDIO_G22_TOPLEFT_P2020 = 15;
export const DXGI_COLOR_SPACE_YCBCR_STUDIO_G2084_TOPLEFT_P2020 = 16;
export const DXGI_COLOR_SPACE_RGB_FULL_G22_NONE_P2020 = 17;
export const DXGI_COLOR_SPACE_YCBCR_STUDIO_GHLG_TOPLEFT_P2020 = 18;
export const DXGI_COLOR_SPACE_YCBCR_FULL_GHLG_TOPLEFT_P2020 = 19;
export const DXGI_COLOR_SPACE_RGB_STUDIO_G24_NONE_P709 = 20;
export const DXGI_COLOR_SPACE_RGB_STUDIO_G24_NONE_P2020 = 21;
export const DXGI_COLOR_SPACE_YCBCR_STUDIO_G24_LEFT_P709 = 22;
export const DXGI_COLOR_SPACE_YCBCR_STUDIO_G24_LEFT_P2020 = 23;
export const DXGI_COLOR_SPACE_YCBCR_STUDIO_G24_TOPLEFT_P2020 = 24;
export const DXGI_COLOR_SPACE_CUSTOM = "-1";
export const DXGI_FORMAT_UNKNOWN = 0;
export const DXGI_FORMAT_R32G32B32A32_TYPELESS = 1;
export const DXGI_FORMAT_R32G32B32A32_FLOAT = 2;
export const DXGI_FORMAT_R32G32B32A32_UINT = 3;
export const DXGI_FORMAT_R32G32B32A32_SINT = 4;
export const DXGI_FORMAT_R32G32B32_TYPELESS = 5;
export const DXGI_FORMAT_R32G32B32_FLOAT = 6;
export const DXGI_FORMAT_R32G32B32_UINT = 7;
export const DXGI_FORMAT_R32G32B32_SINT = 8;
export const DXGI_FORMAT_R16G16B16A16_TYPELESS = 9;
export const DXGI_FORMAT_R16G16B16A16_FLOAT = 10;
export const DXGI_FORMAT_R16G16B16A16_UNORM = 11;
export const DXGI_FORMAT_R16G16B16A16_UINT = 12;
export const DXGI_FORMAT_R16G16B16A16_SNORM = 13;
export const DXGI_FORMAT_R16G16B16A16_SINT = 14;
export const DXGI_FORMAT_R32G32_TYPELESS = 15;
export const DXGI_FORMAT_R32G32_FLOAT = 16;
export const DXGI_FORMAT_R32G32_UINT = 17;
export const DXGI_FORMAT_R32G32_SINT = 18;
export const DXGI_FORMAT_R32G8X24_TYPELESS = 19;
export const DXGI_FORMAT_D32_FLOAT_S8X24_UINT = 20;
export const DXGI_FORMAT_R32_FLOAT_X8X24_TYPELESS = 21;
export const DXGI_FORMAT_X32_TYPELESS_G8X24_UINT = 22;
export const DXGI_FORMAT_R10G10B10A2_TYPELESS = 23;
export const DXGI_FORMAT_R10G10B10A2_UNORM = 24;
export const DXGI_FORMAT_R10G10B10A2_UINT = 25;
export const DXGI_FORMAT_R11G11B10_FLOAT = 26;
export const DXGI_FORMAT_R8G8B8A8_TYPELESS = 27;
export const DXGI_FORMAT_R8G8B8A8_UNORM = 28;
export const DXGI_FORMAT_R8G8B8A8_UNORM_SRGB = 29;
export const DXGI_FORMAT_R8G8B8A8_UINT = 30;
export const DXGI_FORMAT_R8G8B8A8_SNORM = 31;
export const DXGI_FORMAT_R8G8B8A8_SINT = 32;
export const DXGI_FORMAT_R16G16_TYPELESS = 33;
export const DXGI_FORMAT_R16G16_FLOAT = 34;
export const DXGI_FORMAT_R16G16_UNORM = 35;
export const DXGI_FORMAT_R16G16_UINT = 36;
export const DXGI_FORMAT_R16G16_SNORM = 37;
export const DXGI_FORMAT_R16G16_SINT = 38;
export const DXGI_FORMAT_R32_TYPELESS = 39;
export const DXGI_FORMAT_D32_FLOAT = 40;
export const DXGI_FORMAT_R32_FLOAT = 41;
export const DXGI_FORMAT_R32_UINT = 42;
export const DXGI_FORMAT_R32_SINT = 43;
export const DXGI_FORMAT_R24G8_TYPELESS = 44;
export const DXGI_FORMAT_D24_UNORM_S8_UINT = 45;
export const DXGI_FORMAT_R24_UNORM_X8_TYPELESS = 46;
export const DXGI_FORMAT_X24_TYPELESS_G8_UINT = 47;
export const DXGI_FORMAT_R8G8_TYPELESS = 48;
export const DXGI_FORMAT_R8G8_UNORM = 49;
export const DXGI_FORMAT_R8G8_UINT = 50;
export const DXGI_FORMAT_R8G8_SNORM = 51;
export const DXGI_FORMAT_R8G8_SINT = 52;
export const DXGI_FORMAT_R16_TYPELESS = 53;
export const DXGI_FORMAT_R16_FLOAT = 54;
export const DXGI_FORMAT_D16_UNORM = 55;
export const DXGI_FORMAT_R16_UNORM = 56;
export const DXGI_FORMAT_R16_UINT = 57;
export const DXGI_FORMAT_R16_SNORM = 58;
export const DXGI_FORMAT_R16_SINT = 59;
export const DXGI_FORMAT_R8_TYPELESS = 60;
export const DXGI_FORMAT_R8_UNORM = 61;
export const DXGI_FORMAT_R8_UINT = 62;
export const DXGI_FORMAT_R8_SNORM = 63;
export const DXGI_FORMAT_R8_SINT = 64;
export const DXGI_FORMAT_A8_UNORM = 65;
export const DXGI_FORMAT_R1_UNORM = 66;
export const DXGI_FORMAT_R9G9B9E5_SHAREDEXP = 67;
export const DXGI_FORMAT_R8G8_B8G8_UNORM = 68;
export const DXGI_FORMAT_G8R8_G8B8_UNORM = 69;
export const DXGI_FORMAT_BC1_TYPELESS = 70;
export const DXGI_FORMAT_BC1_UNORM = 71;
export const DXGI_FORMAT_BC1_UNORM_SRGB = 72;
export const DXGI_FORMAT_BC2_TYPELESS = 73;
export const DXGI_FORMAT_BC2_UNORM = 74;
export const DXGI_FORMAT_BC2_UNORM_SRGB = 75;
export const DXGI_FORMAT_BC3_TYPELESS = 76;
export const DXGI_FORMAT_BC3_UNORM = 77;
export const DXGI_FORMAT_BC3_UNORM_SRGB = 78;
export const DXGI_FORMAT_BC4_TYPELESS = 79;
export const DXGI_FORMAT_BC4_UNORM = 80;
export const DXGI_FORMAT_BC4_SNORM = 81;
export const DXGI_FORMAT_BC5_TYPELESS = 82;
export const DXGI_FORMAT_BC5_UNORM = 83;
export const DXGI_FORMAT_BC5_SNORM = 84;
export const DXGI_FORMAT_B5G6R5_UNORM = 85;
export const DXGI_FORMAT_B5G5R5A1_UNORM = 86;
export const DXGI_FORMAT_B8G8R8A8_UNORM = 87;
export const DXGI_FORMAT_B8G8R8X8_UNORM = 88;
export const DXGI_FORMAT_R10G10B10_XR_BIAS_A2_UNORM = 89;
export const DXGI_FORMAT_B8G8R8A8_TYPELESS = 90;
export const DXGI_FORMAT_B8G8R8A8_UNORM_SRGB = 91;
export const DXGI_FORMAT_B8G8R8X8_TYPELESS = 92;
export const DXGI_FORMAT_B8G8R8X8_UNORM_SRGB = 93;
export const DXGI_FORMAT_BC6H_TYPELESS = 94;
export const DXGI_FORMAT_BC6H_UF16 = 95;
export const DXGI_FORMAT_BC6H_SF16 = 96;
export const DXGI_FORMAT_BC7_TYPELESS = 97;
export const DXGI_FORMAT_BC7_UNORM = 98;
export const DXGI_FORMAT_BC7_UNORM_SRGB = 99;
export const DXGI_FORMAT_AYUV = 100;
export const DXGI_FORMAT_Y410 = 101;
export const DXGI_FORMAT_Y416 = 102;
export const DXGI_FORMAT_NV12 = 103;
export const DXGI_FORMAT_P010 = 104;
export const DXGI_FORMAT_P016 = 105;
export const DXGI_FORMAT_420_OPAQUE = 106;
export const DXGI_FORMAT_YUY2 = 107;
export const DXGI_FORMAT_Y210 = 108;
export const DXGI_FORMAT_Y216 = 109;
export const DXGI_FORMAT_NV11 = 110;
export const DXGI_FORMAT_AI44 = 111;
export const DXGI_FORMAT_IA44 = 112;
export const DXGI_FORMAT_P8 = 113;
export const DXGI_FORMAT_A8P8 = 114;
export const DXGI_FORMAT_B4G4R4A4_UNORM = 115;
export const DXGI_FORMAT_P208 = 130;
export const DXGI_FORMAT_V208 = 131;
export const DXGI_FORMAT_V408 = 132;
export const DXGI_FORMAT_SAMPLER_FEEDBACK_MIN_MIP_OPAQUE = 189;
export const DXGI_FORMAT_SAMPLER_FEEDBACK_MIP_REGION_USED_OPAQUE = 190;
export const DXGI_FORMAT_FORCE_UINT = 4294967295;
export const DXGI_MODE_SCANLINE_ORDER_UNSPECIFIED = 0;
export const DXGI_MODE_SCANLINE_ORDER_PROGRESSIVE = 1;
export const DXGI_MODE_SCANLINE_ORDER_UPPER_FIELD_FIRST = 2;
export const DXGI_MODE_SCANLINE_ORDER_LOWER_FIELD_FIRST = 3;
export const DXGI_MODE_SCALING_UNSPECIFIED = 0;
export const DXGI_MODE_SCALING_CENTERED = 1;
export const DXGI_MODE_SCALING_STRETCHED = 2;
export const DXGI_MODE_ROTATION_UNSPECIFIED = 0;
export const DXGI_MODE_ROTATION_IDENTITY = 1;
export const DXGI_MODE_ROTATION_ROTATE90 = 2;
export const DXGI_MODE_ROTATION_ROTATE180 = 3;
export const DXGI_MODE_ROTATION_ROTATE270 = 4;
export const DXGI_RESIDENCY_FULLY_RESIDENT = 1;
export const DXGI_RESIDENCY_RESIDENT_IN_SHARED_MEMORY = 2;
export const DXGI_RESIDENCY_EVICTED_TO_DISK = 3;
export const DXGI_SWAP_EFFECT_DISCARD = 0;
export const DXGI_SWAP_EFFECT_SEQUENTIAL = 1;
export const DXGI_SWAP_EFFECT_FLIP_SEQUENTIAL = 3;
export const DXGI_SWAP_EFFECT_FLIP_DISCARD = 4;
export const DXGI_SWAP_CHAIN_FLAG_NONPREROTATED = 1;
export const DXGI_SWAP_CHAIN_FLAG_ALLOW_MODE_SWITCH = 2;
export const DXGI_SWAP_CHAIN_FLAG_GDI_COMPATIBLE = 4;
export const DXGI_SWAP_CHAIN_FLAG_RESTRICTED_CONTENT = 8;
export const DXGI_SWAP_CHAIN_FLAG_RESTRICT_SHARED_RESOURCE_DRIVER = 16;
export const DXGI_SWAP_CHAIN_FLAG_DISPLAY_ONLY = 32;
export const DXGI_SWAP_CHAIN_FLAG_FRAME_LATENCY_WAITABLE_OBJECT = 64;
export const DXGI_SWAP_CHAIN_FLAG_FOREGROUND_LAYER = 128;
export const DXGI_SWAP_CHAIN_FLAG_FULLSCREEN_VIDEO = 256;
export const DXGI_SWAP_CHAIN_FLAG_YUV_VIDEO = 512;
export const DXGI_SWAP_CHAIN_FLAG_HW_PROTECTED = 1024;
export const DXGI_SWAP_CHAIN_FLAG_ALLOW_TEARING = 2048;
export const DXGI_SWAP_CHAIN_FLAG_RESTRICTED_TO_ALL_HOLOGRAPHIC_DISPLAYS = 4096;
export const DXGI_ADAPTER_FLAG_NONE = 0;
export const DXGI_ADAPTER_FLAG_REMOTE = 1;
export const DXGI_ADAPTER_FLAG_SOFTWARE = 2;
export const DXGI_OUTDUPL_POINTER_SHAPE_TYPE_MONOCHROME = 1;
export const DXGI_OUTDUPL_POINTER_SHAPE_TYPE_COLOR = 2;
export const DXGI_OUTDUPL_POINTER_SHAPE_TYPE_MASKED_COLOR = 4;
export const DXGI_OFFER_RESOURCE_PRIORITY_LOW = 1;
export const DXGI_OFFER_RESOURCE_PRIORITY_NORMAL = 2;
export const DXGI_OFFER_RESOURCE_PRIORITY_HIGH = 3;
export const DXGI_SCALING_STRETCH = 0;
export const DXGI_SCALING_NONE = 1;
export const DXGI_SCALING_ASPECT_RATIO_STRETCH = 2;
export const DXGI_ALPHA_MODE_UNSPECIFIED = 0;
export const DXGI_ALPHA_MODE_PREMULTIPLIED = 1;
export const DXGI_ALPHA_MODE_STRAIGHT = 2;
export const DXGI_ALPHA_MODE_IGNORE = 3;
export const DXGI_ALPHA_MODE_FORCE_DWORD = 4294967295;
export const DXGI_GRAPHICS_PREEMPTION_DMA_BUFFER_BOUNDARY = 0;
export const DXGI_GRAPHICS_PREEMPTION_PRIMITIVE_BOUNDARY = 1;
export const DXGI_GRAPHICS_PREEMPTION_TRIANGLE_BOUNDARY = 2;
export const DXGI_GRAPHICS_PREEMPTION_PIXEL_BOUNDARY = 3;
export const DXGI_GRAPHICS_PREEMPTION_INSTRUCTION_BOUNDARY = 4;
export const DXGI_COMPUTE_PREEMPTION_DMA_BUFFER_BOUNDARY = 0;
export const DXGI_COMPUTE_PREEMPTION_DISPATCH_BOUNDARY = 1;
export const DXGI_COMPUTE_PREEMPTION_THREAD_GROUP_BOUNDARY = 2;
export const DXGI_COMPUTE_PREEMPTION_THREAD_BOUNDARY = 3;
export const DXGI_COMPUTE_PREEMPTION_INSTRUCTION_BOUNDARY = 4;
export const DXGI_MULTIPLANE_OVERLAY_YCbCr_FLAG_NOMINAL_RANGE = 1;
export const DXGI_MULTIPLANE_OVERLAY_YCbCr_FLAG_BT709 = 2;
export const DXGI_MULTIPLANE_OVERLAY_YCbCr_FLAG_xvYCC = 4;
export const DXGI_FRAME_PRESENTATION_MODE_COMPOSED = 0;
export const DXGI_FRAME_PRESENTATION_MODE_OVERLAY = 1;
export const DXGI_FRAME_PRESENTATION_MODE_NONE = 2;
export const DXGI_FRAME_PRESENTATION_MODE_COMPOSITION_FAILURE = 3;
export const DXGI_OVERLAY_SUPPORT_FLAG_DIRECT = 1;
export const DXGI_OVERLAY_SUPPORT_FLAG_SCALING = 2;
export const DXGI_SWAP_CHAIN_COLOR_SPACE_SUPPORT_FLAG_PRESENT = 1;
export const DXGI_SWAP_CHAIN_COLOR_SPACE_SUPPORT_FLAG_OVERLAY_PRESENT = 2;
export const DXGI_OVERLAY_COLOR_SPACE_SUPPORT_FLAG_PRESENT = 1;
export const DXGI_MEMORY_SEGMENT_GROUP_LOCAL = 0;
export const DXGI_MEMORY_SEGMENT_GROUP_NON_LOCAL = 1;
export const DXGI_OUTDUPL_COMPOSITED_UI_CAPTURE_ONLY = 1;
export const DXGI_HDR_METADATA_TYPE_NONE = 0;
export const DXGI_HDR_METADATA_TYPE_HDR10 = 1;
export const DXGI_HDR_METADATA_TYPE_HDR10PLUS = 2;
export const DXGI_OFFER_RESOURCE_FLAG_ALLOW_DECOMMIT = 1;
export const DXGI_RECLAIM_RESOURCE_RESULT_OK = 0;
export const DXGI_RECLAIM_RESOURCE_RESULT_DISCARDED = 1;
export const DXGI_RECLAIM_RESOURCE_RESULT_NOT_COMMITTED = 2;
export const DXGI_FEATURE_PRESENT_ALLOW_TEARING = 0;
export const DXGI_ADAPTER_FLAG3_NONE = 0;
export const DXGI_ADAPTER_FLAG3_REMOTE = 1;
export const DXGI_ADAPTER_FLAG3_SOFTWARE = 2;
export const DXGI_ADAPTER_FLAG3_ACG_COMPATIBLE = 4;
export const DXGI_ADAPTER_FLAG3_SUPPORT_MONITORED_FENCES = 8;
export const DXGI_ADAPTER_FLAG3_SUPPORT_NON_MONITORED_FENCES = 16;
export const DXGI_ADAPTER_FLAG3_KEYED_MUTEX_CONFORMANCE = 32;
export const DXGI_ADAPTER_FLAG3_FORCE_DWORD = 4294967295;
export const DXGI_HARDWARE_COMPOSITION_SUPPORT_FLAG_FULLSCREEN = 1;
export const DXGI_HARDWARE_COMPOSITION_SUPPORT_FLAG_WINDOWED = 2;
export const DXGI_HARDWARE_COMPOSITION_SUPPORT_FLAG_CURSOR_STRETCHED = 4;
export const DXGI_GPU_PREFERENCE_UNSPECIFIED = 0;
export const DXGI_GPU_PREFERENCE_MINIMUM_POWER = 1;
export const DXGI_GPU_PREFERENCE_HIGH_PERFORMANCE = 2;
export const DXGI_DEBUG_RLO_SUMMARY = 1;
export const DXGI_DEBUG_RLO_DETAIL = 2;
export const DXGI_DEBUG_RLO_IGNORE_INTERNAL = 4;
export const DXGI_DEBUG_RLO_ALL = 7;
export const DXGI_INFO_QUEUE_MESSAGE_CATEGORY_UNKNOWN = 0;
export const DXGI_INFO_QUEUE_MESSAGE_CATEGORY_MISCELLANEOUS = 1;
export const DXGI_INFO_QUEUE_MESSAGE_CATEGORY_INITIALIZATION = 2;
export const DXGI_INFO_QUEUE_MESSAGE_CATEGORY_CLEANUP = 3;
export const DXGI_INFO_QUEUE_MESSAGE_CATEGORY_COMPILATION = 4;
export const DXGI_INFO_QUEUE_MESSAGE_CATEGORY_STATE_CREATION = 5;
export const DXGI_INFO_QUEUE_MESSAGE_CATEGORY_STATE_SETTING = 6;
export const DXGI_INFO_QUEUE_MESSAGE_CATEGORY_STATE_GETTING = 7;
export const DXGI_INFO_QUEUE_MESSAGE_CATEGORY_RESOURCE_MANIPULATION = 8;
export const DXGI_INFO_QUEUE_MESSAGE_CATEGORY_EXECUTION = 9;
export const DXGI_INFO_QUEUE_MESSAGE_CATEGORY_SHADER = 10;
export const DXGI_INFO_QUEUE_MESSAGE_SEVERITY_CORRUPTION = 0;
export const DXGI_INFO_QUEUE_MESSAGE_SEVERITY_ERROR = 1;
export const DXGI_INFO_QUEUE_MESSAGE_SEVERITY_WARNING = 2;
export const DXGI_INFO_QUEUE_MESSAGE_SEVERITY_INFO = 3;
export const DXGI_INFO_QUEUE_MESSAGE_SEVERITY_MESSAGE = 4;
export const DXGI_MSG_IDXGISwapChain_CreationOrResizeBuffers_InvalidOutputWindow = 0;
export const DXGI_MSG_IDXGISwapChain_CreationOrResizeBuffers_BufferWidthInferred = 1;
export const DXGI_MSG_IDXGISwapChain_CreationOrResizeBuffers_BufferHeightInferred = 2;
export const DXGI_MSG_IDXGISwapChain_CreationOrResizeBuffers_NoScanoutFlagChanged = 3;
export const DXGI_MSG_IDXGISwapChain_Creation_MaxBufferCountExceeded = 4;
export const DXGI_MSG_IDXGISwapChain_Creation_TooFewBuffers = 5;
export const DXGI_MSG_IDXGISwapChain_Creation_NoOutputWindow = 6;
export const DXGI_MSG_IDXGISwapChain_Destruction_OtherMethodsCalled = 7;
export const DXGI_MSG_IDXGISwapChain_GetDesc_pDescIsNULL = 8;
export const DXGI_MSG_IDXGISwapChain_GetBuffer_ppSurfaceIsNULL = 9;
export const DXGI_MSG_IDXGISwapChain_GetBuffer_NoAllocatedBuffers = 10;
export const DXGI_MSG_IDXGISwapChain_GetBuffer_iBufferMustBeZero = 11;
export const DXGI_MSG_IDXGISwapChain_GetBuffer_iBufferOOB = 12;
export const DXGI_MSG_IDXGISwapChain_GetContainingOutput_ppOutputIsNULL = 13;
export const DXGI_MSG_IDXGISwapChain_Present_SyncIntervalOOB = 14;
export const DXGI_MSG_IDXGISwapChain_Present_InvalidNonPreRotatedFlag = 15;
export const DXGI_MSG_IDXGISwapChain_Present_NoAllocatedBuffers = 16;
export const DXGI_MSG_IDXGISwapChain_Present_GetDXGIAdapterFailed = 17;
export const DXGI_MSG_IDXGISwapChain_ResizeBuffers_BufferCountOOB = 18;
export const DXGI_MSG_IDXGISwapChain_ResizeBuffers_UnreleasedReferences = 19;
export const DXGI_MSG_IDXGISwapChain_ResizeBuffers_InvalidSwapChainFlag = 20;
export const DXGI_MSG_IDXGISwapChain_ResizeBuffers_InvalidNonPreRotatedFlag = 21;
export const DXGI_MSG_IDXGISwapChain_ResizeTarget_RefreshRateDivideByZero = 22;
export const DXGI_MSG_IDXGISwapChain_SetFullscreenState_InvalidTarget = 23;
export const DXGI_MSG_IDXGISwapChain_GetFrameStatistics_pStatsIsNULL = 24;
export const DXGI_MSG_IDXGISwapChain_GetLastPresentCount_pLastPresentCountIsNULL = 25;
export const DXGI_MSG_IDXGISwapChain_SetFullscreenState_RemoteNotSupported = 26;
export const DXGI_MSG_IDXGIOutput_TakeOwnership_FailedToAcquireFullscreenMutex = 27;
export const DXGI_MSG_IDXGIFactory_CreateSoftwareAdapter_ppAdapterInterfaceIsNULL = 28;
export const DXGI_MSG_IDXGIFactory_EnumAdapters_ppAdapterInterfaceIsNULL = 29;
export const DXGI_MSG_IDXGIFactory_CreateSwapChain_ppSwapChainIsNULL = 30;
export const DXGI_MSG_IDXGIFactory_CreateSwapChain_pDescIsNULL = 31;
export const DXGI_MSG_IDXGIFactory_CreateSwapChain_UnknownSwapEffect = 32;
export const DXGI_MSG_IDXGIFactory_CreateSwapChain_InvalidFlags = 33;
export const DXGI_MSG_IDXGIFactory_CreateSwapChain_NonPreRotatedFlagAndWindowed = 34;
export const DXGI_MSG_IDXGIFactory_CreateSwapChain_NullDeviceInterface = 35;
export const DXGI_MSG_IDXGIFactory_GetWindowAssociation_phWndIsNULL = 36;
export const DXGI_MSG_IDXGIFactory_MakeWindowAssociation_InvalidFlags = 37;
export const DXGI_MSG_IDXGISurface_Map_InvalidSurface = 38;
export const DXGI_MSG_IDXGISurface_Map_FlagsSetToZero = 39;
export const DXGI_MSG_IDXGISurface_Map_DiscardAndReadFlagSet = 40;
export const DXGI_MSG_IDXGISurface_Map_DiscardButNotWriteFlagSet = 41;
export const DXGI_MSG_IDXGISurface_Map_NoCPUAccess = 42;
export const DXGI_MSG_IDXGISurface_Map_ReadFlagSetButCPUAccessIsDynamic = 43;
export const DXGI_MSG_IDXGISurface_Map_DiscardFlagSetButCPUAccessIsNotDynamic = 44;
export const DXGI_MSG_IDXGIOutput_GetDisplayModeList_pNumModesIsNULL = 45;
export const DXGI_MSG_IDXGIOutput_FindClosestMatchingMode_ModeHasInvalidWidthOrHeight = 46;
export const DXGI_MSG_IDXGIOutput_GetCammaControlCapabilities_NoOwnerDevice = 47;
export const DXGI_MSG_IDXGIOutput_TakeOwnership_pDeviceIsNULL = 48;
export const DXGI_MSG_IDXGIOutput_GetDisplaySurfaceData_NoOwnerDevice = 49;
export const DXGI_MSG_IDXGIOutput_GetDisplaySurfaceData_pDestinationIsNULL = 50;
export const DXGI_MSG_IDXGIOutput_GetDisplaySurfaceData_MapOfDestinationFailed = 51;
export const DXGI_MSG_IDXGIOutput_GetFrameStatistics_NoOwnerDevice = 52;
export const DXGI_MSG_IDXGIOutput_GetFrameStatistics_pStatsIsNULL = 53;
export const DXGI_MSG_IDXGIOutput_SetGammaControl_NoOwnerDevice = 54;
export const DXGI_MSG_IDXGIOutput_GetGammaControl_NoOwnerDevice = 55;
export const DXGI_MSG_IDXGIOutput_GetGammaControl_NoGammaControls = 56;
export const DXGI_MSG_IDXGIOutput_SetDisplaySurface_IDXGIResourceNotSupportedBypPrimary = 57;
export const DXGI_MSG_IDXGIOutput_SetDisplaySurface_pPrimaryIsInvalid = 58;
export const DXGI_MSG_IDXGIOutput_SetDisplaySurface_NoOwnerDevice = 59;
export const DXGI_MSG_IDXGIOutput_TakeOwnership_RemoteDeviceNotSupported = 60;
export const DXGI_MSG_IDXGIOutput_GetDisplayModeList_RemoteDeviceNotSupported = 61;
export const DXGI_MSG_IDXGIOutput_FindClosestMatchingMode_RemoteDeviceNotSupported = 62;
export const DXGI_MSG_IDXGIDevice_CreateSurface_InvalidParametersWithpSharedResource = 63;
export const DXGI_MSG_IDXGIObject_GetPrivateData_puiDataSizeIsNULL = 64;
export const DXGI_MSG_IDXGISwapChain_Creation_InvalidOutputWindow = 65;
export const DXGI_MSG_IDXGISwapChain_Release_SwapChainIsFullscreen = 66;
export const DXGI_MSG_IDXGIOutput_GetDisplaySurfaceData_InvalidTargetSurfaceFormat = 67;
export const DXGI_MSG_IDXGIFactory_CreateSoftwareAdapter_ModuleIsNULL = 68;
export const DXGI_MSG_IDXGIOutput_FindClosestMatchingMode_IDXGIDeviceNotSupportedBypConcernedDevice = 69;
export const DXGI_MSG_IDXGIOutput_FindClosestMatchingMode_pModeToMatchOrpClosestMatchIsNULL = 70;
export const DXGI_MSG_IDXGIOutput_FindClosestMatchingMode_ModeHasRefreshRateDenominatorZero = 71;
export const DXGI_MSG_IDXGIOutput_FindClosestMatchingMode_UnknownFormatIsInvalidForConfiguration = 72;
export const DXGI_MSG_IDXGIOutput_FindClosestMatchingMode_InvalidDisplayModeScanlineOrdering = 73;
export const DXGI_MSG_IDXGIOutput_FindClosestMatchingMode_InvalidDisplayModeScaling = 74;
export const DXGI_MSG_IDXGIOutput_FindClosestMatchingMode_InvalidDisplayModeFormatAndDeviceCombination = 75;
export const DXGI_MSG_IDXGIFactory_Creation_CalledFromDllMain = 76;
export const DXGI_MSG_IDXGISwapChain_SetFullscreenState_OutputNotOwnedBySwapChainDevice = 77;
export const DXGI_MSG_IDXGISwapChain_Creation_InvalidWindowStyle = 78;
export const DXGI_MSG_IDXGISwapChain_GetFrameStatistics_UnsupportedStatistics = 79;
export const DXGI_MSG_IDXGISwapChain_GetContainingOutput_SwapchainAdapterDoesNotControlOutput = 80;
export const DXGI_MSG_IDXGIOutput_SetOrGetGammaControl_pArrayIsNULL = 81;
export const DXGI_MSG_IDXGISwapChain_SetFullscreenState_FullscreenInvalidForChildWindows = 82;
export const DXGI_MSG_IDXGIFactory_Release_CalledFromDllMain = 83;
export const DXGI_MSG_IDXGISwapChain_Present_UnreleasedHDC = 84;
export const DXGI_MSG_IDXGISwapChain_ResizeBuffers_NonPreRotatedAndGDICompatibleFlags = 85;
export const DXGI_MSG_IDXGIFactory_CreateSwapChain_NonPreRotatedAndGDICompatibleFlags = 86;
export const DXGI_MSG_IDXGISurface1_GetDC_pHdcIsNULL = 87;
export const DXGI_MSG_IDXGISurface1_GetDC_SurfaceNotTexture2D = 88;
export const DXGI_MSG_IDXGISurface1_GetDC_GDICompatibleFlagNotSet = 89;
export const DXGI_MSG_IDXGISurface1_GetDC_UnreleasedHDC = 90;
export const DXGI_MSG_IDXGISurface_Map_NoCPUAccess2 = 91;
export const DXGI_MSG_IDXGISurface1_ReleaseDC_GetDCNotCalled = 92;
export const DXGI_MSG_IDXGISurface1_ReleaseDC_InvalidRectangleDimensions = 93;
export const DXGI_MSG_IDXGIOutput_TakeOwnership_RemoteOutputNotSupported = 94;
export const DXGI_MSG_IDXGIOutput_FindClosestMatchingMode_RemoteOutputNotSupported = 95;
export const DXGI_MSG_IDXGIOutput_GetDisplayModeList_RemoteOutputNotSupported = 96;
export const DXGI_MSG_IDXGIFactory_CreateSwapChain_pDeviceHasMismatchedDXGIFactory = 97;
export const DXGI_MSG_IDXGISwapChain_Present_NonOptimalFSConfiguration = 98;
export const DXGI_MSG_IDXGIFactory_CreateSwapChain_FlipSequentialNotSupportedOnD3D10 = 99;
export const DXGI_MSG_IDXGIFactory_CreateSwapChain_BufferCountOOBForFlipSequential = 100;
export const DXGI_MSG_IDXGIFactory_CreateSwapChain_InvalidFormatForFlipSequential = 101;
export const DXGI_MSG_IDXGIFactory_CreateSwapChain_MultiSamplingNotSupportedForFlipSequential = 102;
export const DXGI_MSG_IDXGISwapChain_ResizeBuffers_BufferCountOOBForFlipSequential = 103;
export const DXGI_MSG_IDXGISwapChain_ResizeBuffers_InvalidFormatForFlipSequential = 104;
export const DXGI_MSG_IDXGISwapChain_Present_PartialPresentationBeforeStandardPresentation = 105;
export const DXGI_MSG_IDXGISwapChain_Present_FullscreenPartialPresentIsInvalid = 106;
export const DXGI_MSG_IDXGISwapChain_Present_InvalidPresentTestOrDoNotSequenceFlag = 107;
export const DXGI_MSG_IDXGISwapChain_Present_ScrollInfoWithNoDirtyRectsSpecified = 108;
export const DXGI_MSG_IDXGISwapChain_Present_EmptyScrollRect = 109;
export const DXGI_MSG_IDXGISwapChain_Present_ScrollRectOutOfBackbufferBounds = 110;
export const DXGI_MSG_IDXGISwapChain_Present_ScrollRectOutOfBackbufferBoundsWithOffset = 111;
export const DXGI_MSG_IDXGISwapChain_Present_EmptyDirtyRect = 112;
export const DXGI_MSG_IDXGISwapChain_Present_DirtyRectOutOfBackbufferBounds = 113;
export const DXGI_MSG_IDXGIFactory_CreateSwapChain_UnsupportedBufferUsageFlags = 114;
export const DXGI_MSG_IDXGISwapChain_Present_DoNotSequenceFlagSetButPreviousBufferIsUndefined = 115;
export const DXGI_MSG_IDXGISwapChain_Present_UnsupportedFlags = 116;
export const DXGI_MSG_IDXGISwapChain_Present_FlipModelChainMustResizeOrCreateOnFSTransition = 117;
export const DXGI_MSG_IDXGIFactory_CreateSwapChain_pRestrictToOutputFromOtherIDXGIFactory = 118;
export const DXGI_MSG_IDXGIFactory_CreateSwapChain_RestrictOutputNotSupportedOnAdapter = 119;
export const DXGI_MSG_IDXGISwapChain_Present_RestrictToOutputFlagSetButInvalidpRestrictToOutput = 120;
export const DXGI_MSG_IDXGISwapChain_Present_RestrictToOutputFlagdWithFullscreen = 121;
export const DXGI_MSG_IDXGISwapChain_Present_RestrictOutputFlagWithStaleSwapChain = 122;
export const DXGI_MSG_IDXGISwapChain_Present_OtherFlagsCausingInvalidPresentTestFlag = 123;
export const DXGI_MSG_IDXGIFactory_CreateSwapChain_UnavailableInSession0 = 124;
export const DXGI_MSG_IDXGIFactory_MakeWindowAssociation_UnavailableInSession0 = 125;
export const DXGI_MSG_IDXGIFactory_GetWindowAssociation_UnavailableInSession0 = 126;
export const DXGI_MSG_IDXGIAdapter_EnumOutputs_UnavailableInSession0 = 127;
export const DXGI_MSG_IDXGISwapChain_CreationOrSetFullscreenState_StereoDisabled = 128;
export const DXGI_MSG_IDXGIFactory2_UnregisterStatus_CookieNotFound = 129;
export const DXGI_MSG_IDXGISwapChain_Present_ProtectedContentInWindowedModeWithoutFSOrOverlay = 130;
export const DXGI_MSG_IDXGISwapChain_Present_ProtectedContentInWindowedModeWithoutFlipSequential = 131;
export const DXGI_MSG_IDXGISwapChain_Present_ProtectedContentWithRDPDriver = 132;
export const DXGI_MSG_IDXGISwapChain_Present_ProtectedContentInWindowedModeWithDWMOffOrInvalidDisplayAffinity = 133;
export const DXGI_MSG_IDXGIFactory_CreateSwapChainForComposition_WidthOrHeightIsZero = 134;
export const DXGI_MSG_IDXGIFactory_CreateSwapChainForComposition_OnlyFlipSequentialSupported = 135;
export const DXGI_MSG_IDXGIFactory_CreateSwapChainForComposition_UnsupportedOnAdapter = 136;
export const DXGI_MSG_IDXGIFactory_CreateSwapChainForComposition_UnsupportedOnWindows7 = 137;
export const DXGI_MSG_IDXGISwapChain_SetFullscreenState_FSTransitionWithCompositionSwapChain = 138;
export const DXGI_MSG_IDXGISwapChain_ResizeTarget_InvalidWithCompositionSwapChain = 139;
export const DXGI_MSG_IDXGISwapChain_ResizeBuffers_WidthOrHeightIsZero = 140;
export const DXGI_MSG_IDXGIFactory_CreateSwapChain_ScalingNoneIsFlipModelOnly = 141;
export const DXGI_MSG_IDXGIFactory_CreateSwapChain_ScalingUnrecognized = 142;
export const DXGI_MSG_IDXGIFactory_CreateSwapChain_DisplayOnlyFullscreenUnsupported = 143;
export const DXGI_MSG_IDXGIFactory_CreateSwapChain_DisplayOnlyUnsupported = 144;
export const DXGI_MSG_IDXGISwapChain_Present_RestartIsFullscreenOnly = 145;
export const DXGI_MSG_IDXGISwapChain_Present_ProtectedWindowlessPresentationRequiresDisplayOnly = 146;
export const DXGI_MSG_IDXGISwapChain_SetFullscreenState_DisplayOnlyUnsupported = 147;
export const DXGI_MSG_IDXGISwapChain1_SetBackgroundColor_OutOfRange = 148;
export const DXGI_MSG_IDXGISwapChain_ResizeBuffers_DisplayOnlyFullscreenUnsupported = 149;
export const DXGI_MSG_IDXGISwapChain_ResizeBuffers_DisplayOnlyUnsupported = 150;
export const DXGI_MSG_IDXGISwapchain_Present_ScrollUnsupported = 151;
export const DXGI_MSG_IDXGISwapChain1_SetRotation_UnsupportedOS = 152;
export const DXGI_MSG_IDXGISwapChain1_GetRotation_UnsupportedOS = 153;
export const DXGI_MSG_IDXGISwapchain_Present_FullscreenRotation = 154;
export const DXGI_MSG_IDXGISwapChain_Present_PartialPresentationWithMSAABuffers = 155;
export const DXGI_MSG_IDXGISwapChain1_SetRotation_FlipSequentialRequired = 156;
export const DXGI_MSG_IDXGISwapChain1_SetRotation_InvalidRotation = 157;
export const DXGI_MSG_IDXGISwapChain1_GetRotation_FlipSequentialRequired = 158;
export const DXGI_MSG_IDXGISwapChain_GetHwnd_WrongType = 159;
export const DXGI_MSG_IDXGISwapChain_GetCompositionSurface_WrongType = 160;
export const DXGI_MSG_IDXGISwapChain_GetCoreWindow_WrongType = 161;
export const DXGI_MSG_IDXGISwapChain_GetFullscreenDesc_NonHwnd = 162;
export const DXGI_MSG_IDXGISwapChain_SetFullscreenState_CoreWindow = 163;
export const DXGI_MSG_IDXGIFactory2_CreateSwapChainForCoreWindow_UnsupportedOnWindows7 = 164;
export const DXGI_MSG_IDXGIFactory2_CreateSwapChainForCoreWindow_pWindowIsNULL = 165;
export const DXGI_MSG_IDXGIFactory_CreateSwapChain_FSUnsupportedForModernApps = 166;
export const DXGI_MSG_IDXGIFactory_MakeWindowAssociation_ModernApp = 167;
export const DXGI_MSG_IDXGISwapChain_ResizeTarget_ModernApp = 168;
export const DXGI_MSG_IDXGISwapChain_ResizeTarget_pNewTargetParametersIsNULL = 169;
export const DXGI_MSG_IDXGIOutput_SetDisplaySurface_ModernApp = 170;
export const DXGI_MSG_IDXGIOutput_TakeOwnership_ModernApp = 171;
export const DXGI_MSG_IDXGIFactory2_CreateSwapChainForCoreWindow_pWindowIsInvalid = 172;
export const DXGI_MSG_IDXGIFactory2_CreateSwapChainForCompositionSurface_InvalidHandle = 173;
export const DXGI_MSG_IDXGISurface1_GetDC_ModernApp = 174;
export const DXGI_MSG_IDXGIFactory_CreateSwapChain_ScalingNoneRequiresWindows8OrNewer = 175;
export const DXGI_MSG_IDXGISwapChain_Present_TemporaryMonoAndPreferRight = 176;
export const DXGI_MSG_IDXGISwapChain_Present_TemporaryMonoOrPreferRightWithDoNotSequence = 177;
export const DXGI_MSG_IDXGISwapChain_Present_TemporaryMonoOrPreferRightWithoutStereo = 178;
export const DXGI_MSG_IDXGISwapChain_Present_TemporaryMonoUnsupported = 179;
export const DXGI_MSG_IDXGIOutput_GetDisplaySurfaceData_ArraySizeMismatch = 180;
export const DXGI_MSG_IDXGISwapChain_Present_PartialPresentationWithSwapEffectDiscard = 181;
export const DXGI_MSG_IDXGIFactory_CreateSwapChain_AlphaUnrecognized = 182;
export const DXGI_MSG_IDXGIFactory_CreateSwapChain_AlphaIsWindowlessOnly = 183;
export const DXGI_MSG_IDXGIFactory_CreateSwapChain_AlphaIsFlipModelOnly = 184;
export const DXGI_MSG_IDXGIFactory_CreateSwapChain_RestrictToOutputAdapterMismatch = 185;
export const DXGI_MSG_IDXGIFactory_CreateSwapChain_DisplayOnlyOnLegacy = 186;
export const DXGI_MSG_IDXGISwapChain_ResizeBuffers_DisplayOnlyOnLegacy = 187;
export const DXGI_MSG_IDXGIResource1_CreateSubresourceSurface_InvalidIndex = 188;
export const DXGI_MSG_IDXGIFactory_CreateSwapChainForComposition_InvalidScaling = 189;
export const DXGI_MSG_IDXGIFactory_CreateSwapChainForCoreWindow_InvalidSwapEffect = 190;
export const DXGI_MSG_IDXGIResource1_CreateSharedHandle_UnsupportedOS = 191;
export const DXGI_MSG_IDXGIFactory2_RegisterOcclusionStatusWindow_UnsupportedOS = 192;
export const DXGI_MSG_IDXGIFactory2_RegisterOcclusionStatusEvent_UnsupportedOS = 193;
export const DXGI_MSG_IDXGIOutput1_DuplicateOutput_UnsupportedOS = 194;
export const DXGI_MSG_IDXGIDisplayControl_IsStereoEnabled_UnsupportedOS = 195;
export const DXGI_MSG_IDXGIFactory_CreateSwapChainForComposition_InvalidAlphaMode = 196;
export const DXGI_MSG_IDXGIFactory_GetSharedResourceAdapterLuid_InvalidResource = 197;
export const DXGI_MSG_IDXGIFactory_GetSharedResourceAdapterLuid_InvalidLUID = 198;
export const DXGI_MSG_IDXGIFactory_GetSharedResourceAdapterLuid_UnsupportedOS = 199;
export const DXGI_MSG_IDXGIOutput1_GetDisplaySurfaceData1_2DOnly = 200;
export const DXGI_MSG_IDXGIOutput1_GetDisplaySurfaceData1_StagingOnly = 201;
export const DXGI_MSG_IDXGIOutput1_GetDisplaySurfaceData1_NeedCPUAccessWrite = 202;
export const DXGI_MSG_IDXGIOutput1_GetDisplaySurfaceData1_NoShared = 203;
export const DXGI_MSG_IDXGIOutput1_GetDisplaySurfaceData1_OnlyMipLevels1 = 204;
export const DXGI_MSG_IDXGIOutput1_GetDisplaySurfaceData1_MappedOrOfferedResource = 205;
export const DXGI_MSG_IDXGISwapChain_SetFullscreenState_FSUnsupportedForModernApps = 206;
export const DXGI_MSG_IDXGIFactory_CreateSwapChain_FailedToGoFSButNonPreRotated = 207;
export const DXGI_MSG_IDXGIFactory_CreateSwapChainOrRegisterOcclusionStatus_BlitModelUsedWhileRegisteredForOcclusionStatusEvents = 208;
export const DXGI_MSG_IDXGISwapChain_Present_BlitModelUsedWhileRegisteredForOcclusionStatusEvents = 209;
export const DXGI_MSG_IDXGIFactory_CreateSwapChain_WaitableSwapChainsAreFlipModelOnly = 210;
export const DXGI_MSG_IDXGIFactory_CreateSwapChain_WaitableSwapChainsAreNotFullscreen = 211;
export const DXGI_MSG_IDXGISwapChain_SetFullscreenState_Waitable = 212;
export const DXGI_MSG_IDXGISwapChain_ResizeBuffers_CannotAddOrRemoveWaitableFlag = 213;
export const DXGI_MSG_IDXGISwapChain_GetFrameLatencyWaitableObject_OnlyWaitable = 214;
export const DXGI_MSG_IDXGISwapChain_GetMaximumFrameLatency_OnlyWaitable = 215;
export const DXGI_MSG_IDXGISwapChain_GetMaximumFrameLatency_pMaxLatencyIsNULL = 216;
export const DXGI_MSG_IDXGISwapChain_SetMaximumFrameLatency_OnlyWaitable = 217;
export const DXGI_MSG_IDXGISwapChain_SetMaximumFrameLatency_MaxLatencyIsOutOfBounds = 218;
export const DXGI_MSG_IDXGIFactory_CreateSwapChain_ForegroundIsCoreWindowOnly = 219;
export const DXGI_MSG_IDXGIFactory2_CreateSwapChainForCoreWindow_ForegroundUnsupportedOnAdapter = 220;
export const DXGI_MSG_IDXGIFactory2_CreateSwapChainForCoreWindow_InvalidScaling = 221;
export const DXGI_MSG_IDXGIFactory2_CreateSwapChainForCoreWindow_InvalidAlphaMode = 222;
export const DXGI_MSG_IDXGISwapChain_ResizeBuffers_CannotAddOrRemoveForegroundFlag = 223;
export const DXGI_MSG_IDXGISwapChain_SetMatrixTransform_MatrixPointerCannotBeNull = 224;
export const DXGI_MSG_IDXGISwapChain_SetMatrixTransform_RequiresCompositionSwapChain = 225;
export const DXGI_MSG_IDXGISwapChain_SetMatrixTransform_MatrixMustBeFinite = 226;
export const DXGI_MSG_IDXGISwapChain_SetMatrixTransform_MatrixMustBeTranslateAndOrScale = 227;
export const DXGI_MSG_IDXGISwapChain_GetMatrixTransform_MatrixPointerCannotBeNull = 228;
export const DXGI_MSG_IDXGISwapChain_GetMatrixTransform_RequiresCompositionSwapChain = 229;
export const DXGI_MSG_DXGIGetDebugInterface1_NULL_ppDebug = 230;
export const DXGI_MSG_DXGIGetDebugInterface1_InvalidFlags = 231;
export const DXGI_MSG_IDXGISwapChain_Present_Decode = 232;
export const DXGI_MSG_IDXGISwapChain_ResizeBuffers_Decode = 233;
export const DXGI_MSG_IDXGISwapChain_SetSourceSize_FlipModel = 234;
export const DXGI_MSG_IDXGISwapChain_SetSourceSize_Decode = 235;
export const DXGI_MSG_IDXGISwapChain_SetSourceSize_WidthHeight = 236;
export const DXGI_MSG_IDXGISwapChain_GetSourceSize_NullPointers = 237;
export const DXGI_MSG_IDXGISwapChain_GetSourceSize_Decode = 238;
export const DXGI_MSG_IDXGIDecodeSwapChain_SetColorSpace_InvalidFlags = 239;
export const DXGI_MSG_IDXGIDecodeSwapChain_SetSourceRect_InvalidRect = 240;
export const DXGI_MSG_IDXGIDecodeSwapChain_SetTargetRect_InvalidRect = 241;
export const DXGI_MSG_IDXGIDecodeSwapChain_SetDestSize_InvalidSize = 242;
export const DXGI_MSG_IDXGIDecodeSwapChain_GetSourceRect_InvalidPointer = 243;
export const DXGI_MSG_IDXGIDecodeSwapChain_GetTargetRect_InvalidPointer = 244;
export const DXGI_MSG_IDXGIDecodeSwapChain_GetDestSize_InvalidPointer = 245;
export const DXGI_MSG_IDXGISwapChain_PresentBuffer_YUV = 246;
export const DXGI_MSG_IDXGISwapChain_SetSourceSize_YUV = 247;
export const DXGI_MSG_IDXGISwapChain_GetSourceSize_YUV = 248;
export const DXGI_MSG_IDXGISwapChain_SetMatrixTransform_YUV = 249;
export const DXGI_MSG_IDXGISwapChain_GetMatrixTransform_YUV = 250;
export const DXGI_MSG_IDXGISwapChain_Present_PartialPresentation_YUV = 251;
export const DXGI_MSG_IDXGISwapChain_ResizeBuffers_CannotAddOrRemoveFlag_YUV = 252;
export const DXGI_MSG_IDXGISwapChain_ResizeBuffers_Alignment_YUV = 253;
export const DXGI_MSG_IDXGIFactory_CreateSwapChain_ShaderInputUnsupported_YUV = 254;
export const DXGI_MSG_IDXGIOutput3_CheckOverlaySupport_NullPointers = 255;
export const DXGI_MSG_IDXGIOutput3_CheckOverlaySupport_IDXGIDeviceNotSupportedBypConcernedDevice = 256;
export const DXGI_MSG_IDXGIAdapter_EnumOutputs2_InvalidEnumOutputs2Flag = 257;
export const DXGI_MSG_IDXGISwapChain_CreationOrSetFullscreenState_FSUnsupportedForFlipDiscard = 258;
export const DXGI_MSG_IDXGIOutput4_CheckOverlayColorSpaceSupport_NullPointers = 259;
export const DXGI_MSG_IDXGIOutput4_CheckOverlayColorSpaceSupport_IDXGIDeviceNotSupportedBypConcernedDevice = 260;
export const DXGI_MSG_IDXGISwapChain3_CheckColorSpaceSupport_NullPointers = 261;
export const DXGI_MSG_IDXGISwapChain3_SetColorSpace1_InvalidColorSpace = 262;
export const DXGI_MSG_IDXGIFactory_CreateSwapChain_InvalidHwProtect = 263;
export const DXGI_MSG_IDXGIFactory_CreateSwapChain_HwProtectUnsupported = 264;
export const DXGI_MSG_IDXGISwapChain_ResizeBuffers_InvalidHwProtect = 265;
export const DXGI_MSG_IDXGISwapChain_ResizeBuffers_HwProtectUnsupported = 266;
export const DXGI_MSG_IDXGISwapChain_ResizeBuffers1_D3D12Only = 267;
export const DXGI_MSG_IDXGISwapChain_ResizeBuffers1_FlipModel = 268;
export const DXGI_MSG_IDXGISwapChain_ResizeBuffers1_NodeMaskAndQueueRequired = 269;
export const DXGI_MSG_IDXGISwapChain_CreateSwapChain_InvalidHwProtectGdiFlag = 270;
export const DXGI_MSG_IDXGISwapChain_ResizeBuffers_InvalidHwProtectGdiFlag = 271;
export const DXGI_MSG_IDXGIFactory_CreateSwapChain_10BitFormatNotSupported = 272;
export const DXGI_MSG_IDXGIFactory_CreateSwapChain_FlipSwapEffectRequired = 273;
export const DXGI_MSG_IDXGIFactory_CreateSwapChain_InvalidDevice = 274;
export const DXGI_MSG_IDXGIOutput_TakeOwnership_Unsupported = 275;
export const DXGI_MSG_IDXGIFactory_CreateSwapChain_InvalidQueue = 276;
export const DXGI_MSG_IDXGISwapChain3_ResizeBuffers1_InvalidQueue = 277;
export const DXGI_MSG_IDXGIFactory_CreateSwapChainForHwnd_InvalidScaling = 278;
export const DXGI_MSG_IDXGISwapChain3_SetHDRMetaData_InvalidSize = 279;
export const DXGI_MSG_IDXGISwapChain3_SetHDRMetaData_InvalidPointer = 280;
export const DXGI_MSG_IDXGISwapChain3_SetHDRMetaData_InvalidType = 281;
export const DXGI_MSG_IDXGISwapChain_Present_FullscreenAllowTearingIsInvalid = 282;
export const DXGI_MSG_IDXGISwapChain_Present_AllowTearingRequiresPresentIntervalZero = 283;
export const DXGI_MSG_IDXGISwapChain_Present_AllowTearingRequiresCreationFlag = 284;
export const DXGI_MSG_IDXGISwapChain_ResizeBuffers_CannotAddOrRemoveAllowTearingFlag = 285;
export const DXGI_MSG_IDXGIFactory_CreateSwapChain_AllowTearingFlagIsFlipModelOnly = 286;
export const DXGI_MSG_IDXGIFactory_CheckFeatureSupport_InvalidFeature = 287;
export const DXGI_MSG_IDXGIFactory_CheckFeatureSupport_InvalidSize = 288;
export const DXGI_MSG_IDXGIOutput6_CheckHardwareCompositionSupport_NullPointer = 289;
export const DXGI_MSG_IDXGISwapChain_SetFullscreenState_PerMonitorDpiShimApplied = 290;
export const DXGI_MSG_IDXGIOutput_DuplicateOutput_PerMonitorDpiShimApplied = 291;
export const DXGI_MSG_IDXGIOutput_DuplicateOutput1_PerMonitorDpiRequired = 292;
export const DXGI_MSG_IDXGIFactory7_UnregisterAdaptersChangedEvent_CookieNotFound = 293;
export const DXGI_MSG_IDXGIFactory_CreateSwapChain_LegacyBltModelSwapEffect = 294;
export const DXGI_MSG_IDXGISwapChain4_SetHDRMetaData_MetadataUnchanged = 295;
export const DXGI_MSG_IDXGISwapChain_Present_11On12_Released_Resource = 296;
export const DXGI_MSG_IDXGIFactory_CreateSwapChain_MultipleSwapchainRefToSurface_DeferredDtr = 297;
export const DXGI_MSG_IDXGIFactory_MakeWindowAssociation_NoOpBehavior = 298;
export const DXGI_MSG_Phone_IDXGIFactory_CreateSwapChain_NotForegroundWindow = 1000;
export const DXGI_MSG_Phone_IDXGIFactory_CreateSwapChain_DISCARD_BufferCount = 1001;
export const DXGI_MSG_Phone_IDXGISwapChain_SetFullscreenState_NotAvailable = 1002;
export const DXGI_MSG_Phone_IDXGISwapChain_ResizeBuffers_NotAvailable = 1003;
export const DXGI_MSG_Phone_IDXGISwapChain_ResizeTarget_NotAvailable = 1004;
export const DXGI_MSG_Phone_IDXGISwapChain_Present_InvalidLayerIndex = 1005;
export const DXGI_MSG_Phone_IDXGISwapChain_Present_MultipleLayerIndex = 1006;
export const DXGI_MSG_Phone_IDXGISwapChain_Present_InvalidLayerFlag = 1007;
export const DXGI_MSG_Phone_IDXGISwapChain_Present_InvalidRotation = 1008;
export const DXGI_MSG_Phone_IDXGISwapChain_Present_InvalidBlend = 1009;
export const DXGI_MSG_Phone_IDXGISwapChain_Present_InvalidResource = 1010;
export const DXGI_MSG_Phone_IDXGISwapChain_Present_InvalidMultiPlaneOverlayResource = 1011;
export const DXGI_MSG_Phone_IDXGISwapChain_Present_InvalidIndexForPrimary = 1012;
export const DXGI_MSG_Phone_IDXGISwapChain_Present_InvalidIndexForOverlay = 1013;
export const DXGI_MSG_Phone_IDXGISwapChain_Present_InvalidSubResourceIndex = 1014;
export const DXGI_MSG_Phone_IDXGISwapChain_Present_InvalidSourceRect = 1015;
export const DXGI_MSG_Phone_IDXGISwapChain_Present_InvalidDestinationRect = 1016;
export const DXGI_MSG_Phone_IDXGISwapChain_Present_MultipleResource = 1017;
export const DXGI_MSG_Phone_IDXGISwapChain_Present_NotSharedResource = 1018;
export const DXGI_MSG_Phone_IDXGISwapChain_Present_InvalidFlag = 1019;
export const DXGI_MSG_Phone_IDXGISwapChain_Present_InvalidInterval = 1020;
export const DXGI_MSG_Phone_IDXGIFactory_CreateSwapChain_MSAA_NotSupported = 1021;
export const DXGI_MSG_Phone_IDXGIFactory_CreateSwapChain_ScalingAspectRatioStretch_Supported_ModernApp = 1022;
export const DXGI_MSG_Phone_IDXGISwapChain_GetFrameStatistics_NotAvailable_ModernApp = 1023;
export const DXGI_MSG_Phone_IDXGISwapChain_Present_ReplaceInterval0With1 = 1024;
export const DXGI_MSG_Phone_IDXGIFactory_CreateSwapChain_FailedRegisterWithCompositor = 1025;
export const DXGI_MSG_Phone_IDXGIFactory_CreateSwapChain_NotForegroundWindow_AtRendering = 1026;
export const DXGI_MSG_Phone_IDXGIFactory_CreateSwapChain_FLIP_SEQUENTIAL_BufferCount = 1027;
export const DXGI_MSG_Phone_IDXGIFactory_CreateSwapChain_FLIP_Modern_CoreWindow_Only = 1028;
export const DXGI_MSG_Phone_IDXGISwapChain_Present1_RequiresOverlays = 1029;
export const DXGI_MSG_Phone_IDXGISwapChain_SetBackgroundColor_FlipSequentialRequired = 1030;
export const DXGI_MSG_Phone_IDXGISwapChain_GetBackgroundColor_FlipSequentialRequired = 1031;

// Structs

/**
 * Windows.Win32.Graphics.Dxgi.DXGI_RGBA (size: 16)
 */
export interface DXGI_RGBA {
  /** f32 */
  r: number;
  /** f32 */
  g: number;
  /** f32 */
  b: number;
  /** f32 */
  a: number;
}

export const sizeofDXGI_RGBA = 16;

export function allocDXGI_RGBA(data?: Partial<DXGI_RGBA>): Uint8Array {
  const buf = new Uint8Array(sizeofDXGI_RGBA);
  const view = new DataView(buf.buffer);
  // 0x00: f32
  if (data?.r !== undefined) view.setFloat32(0, Number(data.r), true);
  // 0x04: f32
  if (data?.g !== undefined) view.setFloat32(4, Number(data.g), true);
  // 0x08: f32
  if (data?.b !== undefined) view.setFloat32(8, Number(data.b), true);
  // 0x0c: f32
  if (data?.a !== undefined) view.setFloat32(12, Number(data.a), true);
  return buf;
}

/**
 * Windows.Win32.Graphics.Dxgi.Apis (size: 32)
 */
export interface Apis {
  /** System.Guid */
  DXGI_DEBUG_ALL: Uint8Array | Deno.PointerValue | null;
  /** System.Guid */
  DXGI_DEBUG_DX: Uint8Array | Deno.PointerValue | null;
  /** System.Guid */
  DXGI_DEBUG_DXGI: Uint8Array | Deno.PointerValue | null;
  /** System.Guid */
  DXGI_DEBUG_APP: Uint8Array | Deno.PointerValue | null;
}

export const sizeofApis = 32;

export function allocApis(data?: Partial<Apis>): Uint8Array {
  const buf = new Uint8Array(sizeofApis);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.DXGI_DEBUG_ALL !== undefined) view.setBigUint64(0, data.DXGI_DEBUG_ALL === null ? 0n : BigInt(util.toPointer(data.DXGI_DEBUG_ALL)), true);
  // 0x08: pointer
  if (data?.DXGI_DEBUG_DX !== undefined) view.setBigUint64(8, data.DXGI_DEBUG_DX === null ? 0n : BigInt(util.toPointer(data.DXGI_DEBUG_DX)), true);
  // 0x10: pointer
  if (data?.DXGI_DEBUG_DXGI !== undefined) view.setBigUint64(16, data.DXGI_DEBUG_DXGI === null ? 0n : BigInt(util.toPointer(data.DXGI_DEBUG_DXGI)), true);
  // 0x18: pointer
  if (data?.DXGI_DEBUG_APP !== undefined) view.setBigUint64(24, data.DXGI_DEBUG_APP === null ? 0n : BigInt(util.toPointer(data.DXGI_DEBUG_APP)), true);
  return buf;
}

/**
 * Windows.Win32.Graphics.Dxgi.Common.DXGI_RATIONAL (size: 8)
 */
export interface DXGI_RATIONAL {
  /** u32 */
  Numerator: number;
  /** u32 */
  Denominator: number;
}

export const sizeofDXGI_RATIONAL = 8;

export function allocDXGI_RATIONAL(data?: Partial<DXGI_RATIONAL>): Uint8Array {
  const buf = new Uint8Array(sizeofDXGI_RATIONAL);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.Numerator !== undefined) view.setUint32(0, Number(data.Numerator), true);
  // 0x04: u32
  if (data?.Denominator !== undefined) view.setUint32(4, Number(data.Denominator), true);
  return buf;
}

/**
 * Windows.Win32.Graphics.Dxgi.Common.DXGI_SAMPLE_DESC (size: 8)
 */
export interface DXGI_SAMPLE_DESC {
  /** u32 */
  Count: number;
  /** u32 */
  Quality: number;
}

export const sizeofDXGI_SAMPLE_DESC = 8;

export function allocDXGI_SAMPLE_DESC(data?: Partial<DXGI_SAMPLE_DESC>): Uint8Array {
  const buf = new Uint8Array(sizeofDXGI_SAMPLE_DESC);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.Count !== undefined) view.setUint32(0, Number(data.Count), true);
  // 0x04: u32
  if (data?.Quality !== undefined) view.setUint32(4, Number(data.Quality), true);
  return buf;
}

/**
 * Windows.Win32.Graphics.Dxgi.Common.DXGI_RGB (size: 16)
 */
export interface DXGI_RGB {
  /** f32 */
  Red: number;
  /** f32 */
  Green: number;
  /** f32 */
  Blue: number;
}

export const sizeofDXGI_RGB = 16;

export function allocDXGI_RGB(data?: Partial<DXGI_RGB>): Uint8Array {
  const buf = new Uint8Array(sizeofDXGI_RGB);
  const view = new DataView(buf.buffer);
  // 0x00: f32
  if (data?.Red !== undefined) view.setFloat32(0, Number(data.Red), true);
  // 0x04: f32
  if (data?.Green !== undefined) view.setFloat32(4, Number(data.Green), true);
  // 0x08: f32
  if (data?.Blue !== undefined) view.setFloat32(8, Number(data.Blue), true);
  // 0x0c: pad4
  return buf;
}

/**
 * Windows.Win32.Graphics.Dxgi.Common.DXGI_GAMMA_CONTROL (size: 24)
 */
export interface DXGI_GAMMA_CONTROL {
  /** Windows.Win32.Graphics.Dxgi.Common.DXGI_RGB */
  Scale: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Graphics.Dxgi.Common.DXGI_RGB */
  Offset: Uint8Array | Deno.PointerValue | null;
  /** array */
  GammaCurve: Deno.PointerValue | null;
}

export const sizeofDXGI_GAMMA_CONTROL = 24;

export function allocDXGI_GAMMA_CONTROL(data?: Partial<DXGI_GAMMA_CONTROL>): Uint8Array {
  const buf = new Uint8Array(sizeofDXGI_GAMMA_CONTROL);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.Scale !== undefined) view.setBigUint64(0, data.Scale === null ? 0n : BigInt(util.toPointer(data.Scale)), true);
  // 0x08: pointer
  if (data?.Offset !== undefined) view.setBigUint64(8, data.Offset === null ? 0n : BigInt(util.toPointer(data.Offset)), true);
  // 0x10: pointer
  if (data?.GammaCurve !== undefined) view.setBigUint64(16, data.GammaCurve === null ? 0n : BigInt(util.toPointer(data.GammaCurve)), true);
  return buf;
}

export type BOOL = number;

/**
 * Windows.Win32.Graphics.Dxgi.Common.DXGI_GAMMA_CONTROL_CAPABILITIES (size: 24)
 */
export interface DXGI_GAMMA_CONTROL_CAPABILITIES {
  /** Windows.Win32.Foundation.BOOL */
  ScaleAndOffsetSupported: boolean;
  /** f32 */
  MaxConvertedValue: number;
  /** f32 */
  MinConvertedValue: number;
  /** u32 */
  NumGammaControlPoints: number;
  /** array */
  ControlPointPositions: Deno.PointerValue | null;
}

export const sizeofDXGI_GAMMA_CONTROL_CAPABILITIES = 24;

export function allocDXGI_GAMMA_CONTROL_CAPABILITIES(data?: Partial<DXGI_GAMMA_CONTROL_CAPABILITIES>): Uint8Array {
  const buf = new Uint8Array(sizeofDXGI_GAMMA_CONTROL_CAPABILITIES);
  const view = new DataView(buf.buffer);
  // 0x00: i32
  if (data?.ScaleAndOffsetSupported !== undefined) view.setInt32(0, Number(data.ScaleAndOffsetSupported), true);
  // 0x04: f32
  if (data?.MaxConvertedValue !== undefined) view.setFloat32(4, Number(data.MaxConvertedValue), true);
  // 0x08: f32
  if (data?.MinConvertedValue !== undefined) view.setFloat32(8, Number(data.MinConvertedValue), true);
  // 0x0c: u32
  if (data?.NumGammaControlPoints !== undefined) view.setUint32(12, Number(data.NumGammaControlPoints), true);
  // 0x10: pointer
  if (data?.ControlPointPositions !== undefined) view.setBigUint64(16, data.ControlPointPositions === null ? 0n : BigInt(util.toPointer(data.ControlPointPositions)), true);
  return buf;
}

/**
 * Windows.Win32.Graphics.Dxgi.Common.DXGI_MODE_DESC (size: 32)
 */
export interface DXGI_MODE_DESC {
  /** u32 */
  Width: number;
  /** u32 */
  Height: number;
  /** Windows.Win32.Graphics.Dxgi.Common.DXGI_RATIONAL */
  RefreshRate: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Graphics.Dxgi.Common.DXGI_FORMAT */
  Format: DXGI_FORMAT;
  /** Windows.Win32.Graphics.Dxgi.Common.DXGI_MODE_SCANLINE_ORDER */
  ScanlineOrdering: DXGI_MODE_SCANLINE_ORDER;
  /** Windows.Win32.Graphics.Dxgi.Common.DXGI_MODE_SCALING */
  Scaling: DXGI_MODE_SCALING;
}

export const sizeofDXGI_MODE_DESC = 32;

export function allocDXGI_MODE_DESC(data?: Partial<DXGI_MODE_DESC>): Uint8Array {
  const buf = new Uint8Array(sizeofDXGI_MODE_DESC);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.Width !== undefined) view.setUint32(0, Number(data.Width), true);
  // 0x04: u32
  if (data?.Height !== undefined) view.setUint32(4, Number(data.Height), true);
  // 0x08: pointer
  if (data?.RefreshRate !== undefined) view.setBigUint64(8, data.RefreshRate === null ? 0n : BigInt(util.toPointer(data.RefreshRate)), true);
  // 0x10: u32
  if (data?.Format !== undefined) view.setUint32(16, Number(data.Format), true);
  // 0x14: i32
  if (data?.ScanlineOrdering !== undefined) view.setInt32(20, Number(data.ScanlineOrdering), true);
  // 0x18: i32
  if (data?.Scaling !== undefined) view.setInt32(24, Number(data.Scaling), true);
  // 0x1c: pad4
  return buf;
}

/**
 * Windows.Win32.Graphics.Dxgi.Common.DXGI_JPEG_DC_HUFFMAN_TABLE (size: 16)
 */
export interface DXGI_JPEG_DC_HUFFMAN_TABLE {
  /** array */
  CodeCounts: Deno.PointerValue | null;
  /** array */
  CodeValues: Deno.PointerValue | null;
}

export const sizeofDXGI_JPEG_DC_HUFFMAN_TABLE = 16;

export function allocDXGI_JPEG_DC_HUFFMAN_TABLE(data?: Partial<DXGI_JPEG_DC_HUFFMAN_TABLE>): Uint8Array {
  const buf = new Uint8Array(sizeofDXGI_JPEG_DC_HUFFMAN_TABLE);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.CodeCounts !== undefined) view.setBigUint64(0, data.CodeCounts === null ? 0n : BigInt(util.toPointer(data.CodeCounts)), true);
  // 0x08: pointer
  if (data?.CodeValues !== undefined) view.setBigUint64(8, data.CodeValues === null ? 0n : BigInt(util.toPointer(data.CodeValues)), true);
  return buf;
}

/**
 * Windows.Win32.Graphics.Dxgi.Common.DXGI_JPEG_AC_HUFFMAN_TABLE (size: 16)
 */
export interface DXGI_JPEG_AC_HUFFMAN_TABLE {
  /** array */
  CodeCounts: Deno.PointerValue | null;
  /** array */
  CodeValues: Deno.PointerValue | null;
}

export const sizeofDXGI_JPEG_AC_HUFFMAN_TABLE = 16;

export function allocDXGI_JPEG_AC_HUFFMAN_TABLE(data?: Partial<DXGI_JPEG_AC_HUFFMAN_TABLE>): Uint8Array {
  const buf = new Uint8Array(sizeofDXGI_JPEG_AC_HUFFMAN_TABLE);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.CodeCounts !== undefined) view.setBigUint64(0, data.CodeCounts === null ? 0n : BigInt(util.toPointer(data.CodeCounts)), true);
  // 0x08: pointer
  if (data?.CodeValues !== undefined) view.setBigUint64(8, data.CodeValues === null ? 0n : BigInt(util.toPointer(data.CodeValues)), true);
  return buf;
}

/**
 * Windows.Win32.Graphics.Dxgi.Common.DXGI_JPEG_QUANTIZATION_TABLE (size: 8)
 */
export interface DXGI_JPEG_QUANTIZATION_TABLE {
  /** array */
  Elements: Deno.PointerValue | null;
}

export const sizeofDXGI_JPEG_QUANTIZATION_TABLE = 8;

export function allocDXGI_JPEG_QUANTIZATION_TABLE(data?: Partial<DXGI_JPEG_QUANTIZATION_TABLE>): Uint8Array {
  const buf = new Uint8Array(sizeofDXGI_JPEG_QUANTIZATION_TABLE);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.Elements !== undefined) view.setBigUint64(0, data.Elements === null ? 0n : BigInt(util.toPointer(data.Elements)), true);
  return buf;
}

/**
 * _Anonymous_e__Struct (size: 16)
 */
export interface _Anonymous_e__Struct {
  /** u64 */
  Alignment: Deno.PointerValue;
  /** u64 */
  Region: Deno.PointerValue;
}

export const sizeof_Anonymous_e__Struct = 16;

export function alloc_Anonymous_e__Struct(data?: Partial<_Anonymous_e__Struct>): Uint8Array {
  const buf = new Uint8Array(sizeof_Anonymous_e__Struct);
  const view = new DataView(buf.buffer);
  // 0x00: u64
  if (data?.Alignment !== undefined) view.setBigUint64(0, BigInt(data.Alignment), true);
  // 0x08: u64
  if (data?.Region !== undefined) view.setBigUint64(8, BigInt(data.Region), true);
  return buf;
}

export type PWSTR = Deno.PointerValue | Uint8Array | null;

/**
 * _u_e__Struct (size: 16)
 */
export interface _u_e__Struct {
  /** u32 */
  dwValue: number;
  /** Windows.Win32.Foundation.PWSTR */
  pwszName: string | null;
}

export const sizeof_u_e__Struct = 16;

export function alloc_u_e__Struct(data?: Partial<_u_e__Struct>): Uint8Array {
  const buf = new Uint8Array(sizeof_u_e__Struct);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.dwValue !== undefined) view.setUint32(0, Number(data.dwValue), true);
  // 0x04: pad4
  // 0x08: buffer
  if (data?.pwszName !== undefined) {
    (buf as any)._f8 = util.pwstrToFfi(data.pwszName);
    view.setBigUint64(8, (buf as any)._f8 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f8)), true);
  }
  return buf;
}

/**
 * Windows.Win32.Foundation.LARGE_INTEGER (size: 24)
 */
export interface LARGE_INTEGER {
  /** _Anonymous_e__Struct */
  Anonymous: Uint8Array | Deno.PointerValue | null;
  /** _u_e__Struct */
  u: Uint8Array | Deno.PointerValue | null;
  /** i64 */
  QuadPart: Deno.PointerValue;
}

export const sizeofLARGE_INTEGER = 24;

export function allocLARGE_INTEGER(data?: Partial<LARGE_INTEGER>): Uint8Array {
  const buf = new Uint8Array(sizeofLARGE_INTEGER);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.Anonymous !== undefined) view.setBigUint64(0, data.Anonymous === null ? 0n : BigInt(util.toPointer(data.Anonymous)), true);
  // 0x08: pointer
  if (data?.u !== undefined) view.setBigUint64(8, data.u === null ? 0n : BigInt(util.toPointer(data.u)), true);
  // 0x10: i64
  if (data?.QuadPart !== undefined) view.setBigInt64(16, BigInt(data.QuadPart), true);
  return buf;
}

/**
 * Windows.Win32.Graphics.Dxgi.DXGI_FRAME_STATISTICS (size: 32)
 */
export interface DXGI_FRAME_STATISTICS {
  /** u32 */
  PresentCount: number;
  /** u32 */
  PresentRefreshCount: number;
  /** u32 */
  SyncRefreshCount: number;
  /** Windows.Win32.Foundation.LARGE_INTEGER */
  SyncQPCTime: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Foundation.LARGE_INTEGER */
  SyncGPUTime: Uint8Array | Deno.PointerValue | null;
}

export const sizeofDXGI_FRAME_STATISTICS = 32;

export function allocDXGI_FRAME_STATISTICS(data?: Partial<DXGI_FRAME_STATISTICS>): Uint8Array {
  const buf = new Uint8Array(sizeofDXGI_FRAME_STATISTICS);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.PresentCount !== undefined) view.setUint32(0, Number(data.PresentCount), true);
  // 0x04: u32
  if (data?.PresentRefreshCount !== undefined) view.setUint32(4, Number(data.PresentRefreshCount), true);
  // 0x08: u32
  if (data?.SyncRefreshCount !== undefined) view.setUint32(8, Number(data.SyncRefreshCount), true);
  // 0x0c: pad4
  // 0x10: pointer
  if (data?.SyncQPCTime !== undefined) view.setBigUint64(16, data.SyncQPCTime === null ? 0n : BigInt(util.toPointer(data.SyncQPCTime)), true);
  // 0x18: pointer
  if (data?.SyncGPUTime !== undefined) view.setBigUint64(24, data.SyncGPUTime === null ? 0n : BigInt(util.toPointer(data.SyncGPUTime)), true);
  return buf;
}

/**
 * Windows.Win32.Graphics.Dxgi.DXGI_MAPPED_RECT (size: 16)
 */
export interface DXGI_MAPPED_RECT {
  /** i32 */
  Pitch: number;
  /** ptr */
  pBits: Deno.PointerValue | Uint8Array | null;
}

export const sizeofDXGI_MAPPED_RECT = 16;

export function allocDXGI_MAPPED_RECT(data?: Partial<DXGI_MAPPED_RECT>): Uint8Array {
  const buf = new Uint8Array(sizeofDXGI_MAPPED_RECT);
  const view = new DataView(buf.buffer);
  // 0x00: i32
  if (data?.Pitch !== undefined) view.setInt32(0, Number(data.Pitch), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.pBits !== undefined) view.setBigUint64(8, data.pBits === null ? 0n : BigInt(util.toPointer(data.pBits)), true);
  return buf;
}

/**
 * Windows.Win32.Foundation.LUID (size: 8)
 */
export interface LUID {
  /** u32 */
  LowPart: number;
  /** i32 */
  HighPart: number;
}

export const sizeofLUID = 8;

export function allocLUID(data?: Partial<LUID>): Uint8Array {
  const buf = new Uint8Array(sizeofLUID);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.LowPart !== undefined) view.setUint32(0, Number(data.LowPart), true);
  // 0x04: i32
  if (data?.HighPart !== undefined) view.setInt32(4, Number(data.HighPart), true);
  return buf;
}

/**
 * Windows.Win32.Graphics.Dxgi.DXGI_ADAPTER_DESC (size: 56)
 */
export interface DXGI_ADAPTER_DESC {
  /** array */
  Description: Deno.PointerValue | null;
  /** u32 */
  VendorId: number;
  /** u32 */
  DeviceId: number;
  /** u32 */
  SubSysId: number;
  /** u32 */
  Revision: number;
  /** usize */
  DedicatedVideoMemory: Deno.PointerValue;
  /** usize */
  DedicatedSystemMemory: Deno.PointerValue;
  /** usize */
  SharedSystemMemory: Deno.PointerValue;
  /** Windows.Win32.Foundation.LUID */
  AdapterLuid: Uint8Array | Deno.PointerValue | null;
}

export const sizeofDXGI_ADAPTER_DESC = 56;

export function allocDXGI_ADAPTER_DESC(data?: Partial<DXGI_ADAPTER_DESC>): Uint8Array {
  const buf = new Uint8Array(sizeofDXGI_ADAPTER_DESC);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.Description !== undefined) view.setBigUint64(0, data.Description === null ? 0n : BigInt(util.toPointer(data.Description)), true);
  // 0x08: u32
  if (data?.VendorId !== undefined) view.setUint32(8, Number(data.VendorId), true);
  // 0x0c: u32
  if (data?.DeviceId !== undefined) view.setUint32(12, Number(data.DeviceId), true);
  // 0x10: u32
  if (data?.SubSysId !== undefined) view.setUint32(16, Number(data.SubSysId), true);
  // 0x14: u32
  if (data?.Revision !== undefined) view.setUint32(20, Number(data.Revision), true);
  // 0x18: usize
  if (data?.DedicatedVideoMemory !== undefined) view.setBigUint64(24, BigInt(data.DedicatedVideoMemory), true);
  // 0x20: usize
  if (data?.DedicatedSystemMemory !== undefined) view.setBigUint64(32, BigInt(data.DedicatedSystemMemory), true);
  // 0x28: usize
  if (data?.SharedSystemMemory !== undefined) view.setBigUint64(40, BigInt(data.SharedSystemMemory), true);
  // 0x30: pointer
  if (data?.AdapterLuid !== undefined) view.setBigUint64(48, data.AdapterLuid === null ? 0n : BigInt(util.toPointer(data.AdapterLuid)), true);
  return buf;
}

/**
 * Windows.Win32.Foundation.RECT (size: 16)
 */
export interface RECT {
  /** i32 */
  left: number;
  /** i32 */
  top: number;
  /** i32 */
  right: number;
  /** i32 */
  bottom: number;
}

export const sizeofRECT = 16;

export function allocRECT(data?: Partial<RECT>): Uint8Array {
  const buf = new Uint8Array(sizeofRECT);
  const view = new DataView(buf.buffer);
  // 0x00: i32
  if (data?.left !== undefined) view.setInt32(0, Number(data.left), true);
  // 0x04: i32
  if (data?.top !== undefined) view.setInt32(4, Number(data.top), true);
  // 0x08: i32
  if (data?.right !== undefined) view.setInt32(8, Number(data.right), true);
  // 0x0c: i32
  if (data?.bottom !== undefined) view.setInt32(12, Number(data.bottom), true);
  return buf;
}

export type HMONITOR = Deno.PointerValue;

/**
 * Windows.Win32.Graphics.Dxgi.DXGI_OUTPUT_DESC (size: 32)
 */
export interface DXGI_OUTPUT_DESC {
  /** array */
  DeviceName: Deno.PointerValue | null;
  /** Windows.Win32.Foundation.RECT */
  DesktopCoordinates: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Foundation.BOOL */
  AttachedToDesktop: boolean;
  /** Windows.Win32.Graphics.Dxgi.Common.DXGI_MODE_ROTATION */
  Rotation: DXGI_MODE_ROTATION;
  /** Windows.Win32.Graphics.Gdi.HMONITOR */
  Monitor: Uint8Array | Deno.PointerValue | null;
}

export const sizeofDXGI_OUTPUT_DESC = 32;

export function allocDXGI_OUTPUT_DESC(data?: Partial<DXGI_OUTPUT_DESC>): Uint8Array {
  const buf = new Uint8Array(sizeofDXGI_OUTPUT_DESC);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.DeviceName !== undefined) view.setBigUint64(0, data.DeviceName === null ? 0n : BigInt(util.toPointer(data.DeviceName)), true);
  // 0x08: pointer
  if (data?.DesktopCoordinates !== undefined) view.setBigUint64(8, data.DesktopCoordinates === null ? 0n : BigInt(util.toPointer(data.DesktopCoordinates)), true);
  // 0x10: i32
  if (data?.AttachedToDesktop !== undefined) view.setInt32(16, Number(data.AttachedToDesktop), true);
  // 0x14: i32
  if (data?.Rotation !== undefined) view.setInt32(20, Number(data.Rotation), true);
  // 0x18: pointer
  if (data?.Monitor !== undefined) view.setBigUint64(24, data.Monitor === null ? 0n : BigInt(util.toPointer(data.Monitor)), true);
  return buf;
}

export type HANDLE = Deno.PointerValue;

/**
 * Windows.Win32.Graphics.Dxgi.DXGI_SHARED_RESOURCE (size: 8)
 */
export interface DXGI_SHARED_RESOURCE {
  /** Windows.Win32.Foundation.HANDLE */
  Handle: Uint8Array | Deno.PointerValue | null;
}

export const sizeofDXGI_SHARED_RESOURCE = 8;

export function allocDXGI_SHARED_RESOURCE(data?: Partial<DXGI_SHARED_RESOURCE>): Uint8Array {
  const buf = new Uint8Array(sizeofDXGI_SHARED_RESOURCE);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.Handle !== undefined) view.setBigUint64(0, data.Handle === null ? 0n : BigInt(util.toPointer(data.Handle)), true);
  return buf;
}

/**
 * Windows.Win32.Graphics.Dxgi.DXGI_SURFACE_DESC (size: 24)
 */
export interface DXGI_SURFACE_DESC {
  /** u32 */
  Width: number;
  /** u32 */
  Height: number;
  /** Windows.Win32.Graphics.Dxgi.Common.DXGI_FORMAT */
  Format: DXGI_FORMAT;
  /** Windows.Win32.Graphics.Dxgi.Common.DXGI_SAMPLE_DESC */
  SampleDesc: Uint8Array | Deno.PointerValue | null;
}

export const sizeofDXGI_SURFACE_DESC = 24;

export function allocDXGI_SURFACE_DESC(data?: Partial<DXGI_SURFACE_DESC>): Uint8Array {
  const buf = new Uint8Array(sizeofDXGI_SURFACE_DESC);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.Width !== undefined) view.setUint32(0, Number(data.Width), true);
  // 0x04: u32
  if (data?.Height !== undefined) view.setUint32(4, Number(data.Height), true);
  // 0x08: u32
  if (data?.Format !== undefined) view.setUint32(8, Number(data.Format), true);
  // 0x0c: pad4
  // 0x10: pointer
  if (data?.SampleDesc !== undefined) view.setBigUint64(16, data.SampleDesc === null ? 0n : BigInt(util.toPointer(data.SampleDesc)), true);
  return buf;
}

export type HWND = Deno.PointerValue;

/**
 * Windows.Win32.Graphics.Dxgi.DXGI_SWAP_CHAIN_DESC (size: 48)
 */
export interface DXGI_SWAP_CHAIN_DESC {
  /** Windows.Win32.Graphics.Dxgi.Common.DXGI_MODE_DESC */
  BufferDesc: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Graphics.Dxgi.Common.DXGI_SAMPLE_DESC */
  SampleDesc: Uint8Array | Deno.PointerValue | null;
  /** u32 */
  BufferUsage: number;
  /** u32 */
  BufferCount: number;
  /** Windows.Win32.Foundation.HWND */
  OutputWindow: Deno.PointerValue | null;
  /** Windows.Win32.Foundation.BOOL */
  Windowed: boolean;
  /** Windows.Win32.Graphics.Dxgi.DXGI_SWAP_EFFECT */
  SwapEffect: DXGI_SWAP_EFFECT;
  /** u32 */
  Flags: number;
}

export const sizeofDXGI_SWAP_CHAIN_DESC = 48;

export function allocDXGI_SWAP_CHAIN_DESC(data?: Partial<DXGI_SWAP_CHAIN_DESC>): Uint8Array {
  const buf = new Uint8Array(sizeofDXGI_SWAP_CHAIN_DESC);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.BufferDesc !== undefined) view.setBigUint64(0, data.BufferDesc === null ? 0n : BigInt(util.toPointer(data.BufferDesc)), true);
  // 0x08: pointer
  if (data?.SampleDesc !== undefined) view.setBigUint64(8, data.SampleDesc === null ? 0n : BigInt(util.toPointer(data.SampleDesc)), true);
  // 0x10: u32
  if (data?.BufferUsage !== undefined) view.setUint32(16, Number(data.BufferUsage), true);
  // 0x14: u32
  if (data?.BufferCount !== undefined) view.setUint32(20, Number(data.BufferCount), true);
  // 0x18: pointer
  if (data?.OutputWindow !== undefined) view.setBigUint64(24, data.OutputWindow === null ? 0n : BigInt(util.toPointer(data.OutputWindow)), true);
  // 0x20: i32
  if (data?.Windowed !== undefined) view.setInt32(32, Number(data.Windowed), true);
  // 0x24: i32
  if (data?.SwapEffect !== undefined) view.setInt32(36, Number(data.SwapEffect), true);
  // 0x28: u32
  if (data?.Flags !== undefined) view.setUint32(40, Number(data.Flags), true);
  // 0x2c: pad4
  return buf;
}

/**
 * Windows.Win32.Graphics.Dxgi.DXGI_ADAPTER_DESC1 (size: 64)
 */
export interface DXGI_ADAPTER_DESC1 {
  /** array */
  Description: Deno.PointerValue | null;
  /** u32 */
  VendorId: number;
  /** u32 */
  DeviceId: number;
  /** u32 */
  SubSysId: number;
  /** u32 */
  Revision: number;
  /** usize */
  DedicatedVideoMemory: Deno.PointerValue;
  /** usize */
  DedicatedSystemMemory: Deno.PointerValue;
  /** usize */
  SharedSystemMemory: Deno.PointerValue;
  /** Windows.Win32.Foundation.LUID */
  AdapterLuid: Uint8Array | Deno.PointerValue | null;
  /** u32 */
  Flags: number;
}

export const sizeofDXGI_ADAPTER_DESC1 = 64;

export function allocDXGI_ADAPTER_DESC1(data?: Partial<DXGI_ADAPTER_DESC1>): Uint8Array {
  const buf = new Uint8Array(sizeofDXGI_ADAPTER_DESC1);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.Description !== undefined) view.setBigUint64(0, data.Description === null ? 0n : BigInt(util.toPointer(data.Description)), true);
  // 0x08: u32
  if (data?.VendorId !== undefined) view.setUint32(8, Number(data.VendorId), true);
  // 0x0c: u32
  if (data?.DeviceId !== undefined) view.setUint32(12, Number(data.DeviceId), true);
  // 0x10: u32
  if (data?.SubSysId !== undefined) view.setUint32(16, Number(data.SubSysId), true);
  // 0x14: u32
  if (data?.Revision !== undefined) view.setUint32(20, Number(data.Revision), true);
  // 0x18: usize
  if (data?.DedicatedVideoMemory !== undefined) view.setBigUint64(24, BigInt(data.DedicatedVideoMemory), true);
  // 0x20: usize
  if (data?.DedicatedSystemMemory !== undefined) view.setBigUint64(32, BigInt(data.DedicatedSystemMemory), true);
  // 0x28: usize
  if (data?.SharedSystemMemory !== undefined) view.setBigUint64(40, BigInt(data.SharedSystemMemory), true);
  // 0x30: pointer
  if (data?.AdapterLuid !== undefined) view.setBigUint64(48, data.AdapterLuid === null ? 0n : BigInt(util.toPointer(data.AdapterLuid)), true);
  // 0x38: u32
  if (data?.Flags !== undefined) view.setUint32(56, Number(data.Flags), true);
  // 0x3c: pad4
  return buf;
}

/**
 * Windows.Win32.Graphics.Dxgi.DXGI_DISPLAY_COLOR_SPACE (size: 16)
 */
export interface DXGI_DISPLAY_COLOR_SPACE {
  /** array */
  PrimaryCoordinates: Deno.PointerValue | null;
  /** array */
  WhitePoints: Deno.PointerValue | null;
}

export const sizeofDXGI_DISPLAY_COLOR_SPACE = 16;

export function allocDXGI_DISPLAY_COLOR_SPACE(data?: Partial<DXGI_DISPLAY_COLOR_SPACE>): Uint8Array {
  const buf = new Uint8Array(sizeofDXGI_DISPLAY_COLOR_SPACE);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.PrimaryCoordinates !== undefined) view.setBigUint64(0, data.PrimaryCoordinates === null ? 0n : BigInt(util.toPointer(data.PrimaryCoordinates)), true);
  // 0x08: pointer
  if (data?.WhitePoints !== undefined) view.setBigUint64(8, data.WhitePoints === null ? 0n : BigInt(util.toPointer(data.WhitePoints)), true);
  return buf;
}

/**
 * Windows.Win32.Foundation.POINT (size: 8)
 */
export interface POINT {
  /** i32 */
  x: number;
  /** i32 */
  y: number;
}

export const sizeofPOINT = 8;

export function allocPOINT(data?: Partial<POINT>): Uint8Array {
  const buf = new Uint8Array(sizeofPOINT);
  const view = new DataView(buf.buffer);
  // 0x00: i32
  if (data?.x !== undefined) view.setInt32(0, Number(data.x), true);
  // 0x04: i32
  if (data?.y !== undefined) view.setInt32(4, Number(data.y), true);
  return buf;
}

/**
 * Windows.Win32.Graphics.Dxgi.DXGI_OUTDUPL_MOVE_RECT (size: 16)
 */
export interface DXGI_OUTDUPL_MOVE_RECT {
  /** Windows.Win32.Foundation.POINT */
  SourcePoint: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Foundation.RECT */
  DestinationRect: Uint8Array | Deno.PointerValue | null;
}

export const sizeofDXGI_OUTDUPL_MOVE_RECT = 16;

export function allocDXGI_OUTDUPL_MOVE_RECT(data?: Partial<DXGI_OUTDUPL_MOVE_RECT>): Uint8Array {
  const buf = new Uint8Array(sizeofDXGI_OUTDUPL_MOVE_RECT);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.SourcePoint !== undefined) view.setBigUint64(0, data.SourcePoint === null ? 0n : BigInt(util.toPointer(data.SourcePoint)), true);
  // 0x08: pointer
  if (data?.DestinationRect !== undefined) view.setBigUint64(8, data.DestinationRect === null ? 0n : BigInt(util.toPointer(data.DestinationRect)), true);
  return buf;
}

/**
 * Windows.Win32.Graphics.Dxgi.DXGI_OUTDUPL_DESC (size: 16)
 */
export interface DXGI_OUTDUPL_DESC {
  /** Windows.Win32.Graphics.Dxgi.Common.DXGI_MODE_DESC */
  ModeDesc: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Graphics.Dxgi.Common.DXGI_MODE_ROTATION */
  Rotation: DXGI_MODE_ROTATION;
  /** Windows.Win32.Foundation.BOOL */
  DesktopImageInSystemMemory: boolean;
}

export const sizeofDXGI_OUTDUPL_DESC = 16;

export function allocDXGI_OUTDUPL_DESC(data?: Partial<DXGI_OUTDUPL_DESC>): Uint8Array {
  const buf = new Uint8Array(sizeofDXGI_OUTDUPL_DESC);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.ModeDesc !== undefined) view.setBigUint64(0, data.ModeDesc === null ? 0n : BigInt(util.toPointer(data.ModeDesc)), true);
  // 0x08: i32
  if (data?.Rotation !== undefined) view.setInt32(8, Number(data.Rotation), true);
  // 0x0c: i32
  if (data?.DesktopImageInSystemMemory !== undefined) view.setInt32(12, Number(data.DesktopImageInSystemMemory), true);
  return buf;
}

/**
 * Windows.Win32.Graphics.Dxgi.DXGI_OUTDUPL_POINTER_POSITION (size: 16)
 */
export interface DXGI_OUTDUPL_POINTER_POSITION {
  /** Windows.Win32.Foundation.POINT */
  Position: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Foundation.BOOL */
  Visible: boolean;
}

export const sizeofDXGI_OUTDUPL_POINTER_POSITION = 16;

export function allocDXGI_OUTDUPL_POINTER_POSITION(data?: Partial<DXGI_OUTDUPL_POINTER_POSITION>): Uint8Array {
  const buf = new Uint8Array(sizeofDXGI_OUTDUPL_POINTER_POSITION);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.Position !== undefined) view.setBigUint64(0, data.Position === null ? 0n : BigInt(util.toPointer(data.Position)), true);
  // 0x08: i32
  if (data?.Visible !== undefined) view.setInt32(8, Number(data.Visible), true);
  // 0x0c: pad4
  return buf;
}

/**
 * Windows.Win32.Graphics.Dxgi.DXGI_OUTDUPL_POINTER_SHAPE_INFO (size: 24)
 */
export interface DXGI_OUTDUPL_POINTER_SHAPE_INFO {
  /** u32 */
  Type: number;
  /** u32 */
  Width: number;
  /** u32 */
  Height: number;
  /** u32 */
  Pitch: number;
  /** Windows.Win32.Foundation.POINT */
  HotSpot: Uint8Array | Deno.PointerValue | null;
}

export const sizeofDXGI_OUTDUPL_POINTER_SHAPE_INFO = 24;

export function allocDXGI_OUTDUPL_POINTER_SHAPE_INFO(data?: Partial<DXGI_OUTDUPL_POINTER_SHAPE_INFO>): Uint8Array {
  const buf = new Uint8Array(sizeofDXGI_OUTDUPL_POINTER_SHAPE_INFO);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.Type !== undefined) view.setUint32(0, Number(data.Type), true);
  // 0x04: u32
  if (data?.Width !== undefined) view.setUint32(4, Number(data.Width), true);
  // 0x08: u32
  if (data?.Height !== undefined) view.setUint32(8, Number(data.Height), true);
  // 0x0c: u32
  if (data?.Pitch !== undefined) view.setUint32(12, Number(data.Pitch), true);
  // 0x10: pointer
  if (data?.HotSpot !== undefined) view.setBigUint64(16, data.HotSpot === null ? 0n : BigInt(util.toPointer(data.HotSpot)), true);
  return buf;
}

/**
 * Windows.Win32.Graphics.Dxgi.DXGI_OUTDUPL_FRAME_INFO (size: 48)
 */
export interface DXGI_OUTDUPL_FRAME_INFO {
  /** Windows.Win32.Foundation.LARGE_INTEGER */
  LastPresentTime: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Foundation.LARGE_INTEGER */
  LastMouseUpdateTime: Uint8Array | Deno.PointerValue | null;
  /** u32 */
  AccumulatedFrames: number;
  /** Windows.Win32.Foundation.BOOL */
  RectsCoalesced: boolean;
  /** Windows.Win32.Foundation.BOOL */
  ProtectedContentMaskedOut: boolean;
  /** Windows.Win32.Graphics.Dxgi.DXGI_OUTDUPL_POINTER_POSITION */
  PointerPosition: Uint8Array | Deno.PointerValue | null;
  /** u32 */
  TotalMetadataBufferSize: number;
  /** u32 */
  PointerShapeBufferSize: number;
}

export const sizeofDXGI_OUTDUPL_FRAME_INFO = 48;

export function allocDXGI_OUTDUPL_FRAME_INFO(data?: Partial<DXGI_OUTDUPL_FRAME_INFO>): Uint8Array {
  const buf = new Uint8Array(sizeofDXGI_OUTDUPL_FRAME_INFO);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.LastPresentTime !== undefined) view.setBigUint64(0, data.LastPresentTime === null ? 0n : BigInt(util.toPointer(data.LastPresentTime)), true);
  // 0x08: pointer
  if (data?.LastMouseUpdateTime !== undefined) view.setBigUint64(8, data.LastMouseUpdateTime === null ? 0n : BigInt(util.toPointer(data.LastMouseUpdateTime)), true);
  // 0x10: u32
  if (data?.AccumulatedFrames !== undefined) view.setUint32(16, Number(data.AccumulatedFrames), true);
  // 0x14: i32
  if (data?.RectsCoalesced !== undefined) view.setInt32(20, Number(data.RectsCoalesced), true);
  // 0x18: i32
  if (data?.ProtectedContentMaskedOut !== undefined) view.setInt32(24, Number(data.ProtectedContentMaskedOut), true);
  // 0x1c: pad4
  // 0x20: pointer
  if (data?.PointerPosition !== undefined) view.setBigUint64(32, data.PointerPosition === null ? 0n : BigInt(util.toPointer(data.PointerPosition)), true);
  // 0x28: u32
  if (data?.TotalMetadataBufferSize !== undefined) view.setUint32(40, Number(data.TotalMetadataBufferSize), true);
  // 0x2c: u32
  if (data?.PointerShapeBufferSize !== undefined) view.setUint32(44, Number(data.PointerShapeBufferSize), true);
  return buf;
}

/**
 * Windows.Win32.Graphics.Dxgi.DXGI_MODE_DESC1 (size: 32)
 */
export interface DXGI_MODE_DESC1 {
  /** u32 */
  Width: number;
  /** u32 */
  Height: number;
  /** Windows.Win32.Graphics.Dxgi.Common.DXGI_RATIONAL */
  RefreshRate: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Graphics.Dxgi.Common.DXGI_FORMAT */
  Format: DXGI_FORMAT;
  /** Windows.Win32.Graphics.Dxgi.Common.DXGI_MODE_SCANLINE_ORDER */
  ScanlineOrdering: DXGI_MODE_SCANLINE_ORDER;
  /** Windows.Win32.Graphics.Dxgi.Common.DXGI_MODE_SCALING */
  Scaling: DXGI_MODE_SCALING;
  /** Windows.Win32.Foundation.BOOL */
  Stereo: boolean;
}

export const sizeofDXGI_MODE_DESC1 = 32;

export function allocDXGI_MODE_DESC1(data?: Partial<DXGI_MODE_DESC1>): Uint8Array {
  const buf = new Uint8Array(sizeofDXGI_MODE_DESC1);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.Width !== undefined) view.setUint32(0, Number(data.Width), true);
  // 0x04: u32
  if (data?.Height !== undefined) view.setUint32(4, Number(data.Height), true);
  // 0x08: pointer
  if (data?.RefreshRate !== undefined) view.setBigUint64(8, data.RefreshRate === null ? 0n : BigInt(util.toPointer(data.RefreshRate)), true);
  // 0x10: u32
  if (data?.Format !== undefined) view.setUint32(16, Number(data.Format), true);
  // 0x14: i32
  if (data?.ScanlineOrdering !== undefined) view.setInt32(20, Number(data.ScanlineOrdering), true);
  // 0x18: i32
  if (data?.Scaling !== undefined) view.setInt32(24, Number(data.Scaling), true);
  // 0x1c: i32
  if (data?.Stereo !== undefined) view.setInt32(28, Number(data.Stereo), true);
  return buf;
}

/**
 * Windows.Win32.Graphics.Dxgi.DXGI_SWAP_CHAIN_DESC1 (size: 48)
 */
export interface DXGI_SWAP_CHAIN_DESC1 {
  /** u32 */
  Width: number;
  /** u32 */
  Height: number;
  /** Windows.Win32.Graphics.Dxgi.Common.DXGI_FORMAT */
  Format: DXGI_FORMAT;
  /** Windows.Win32.Foundation.BOOL */
  Stereo: boolean;
  /** Windows.Win32.Graphics.Dxgi.Common.DXGI_SAMPLE_DESC */
  SampleDesc: Uint8Array | Deno.PointerValue | null;
  /** u32 */
  BufferUsage: number;
  /** u32 */
  BufferCount: number;
  /** Windows.Win32.Graphics.Dxgi.DXGI_SCALING */
  Scaling: DXGI_SCALING;
  /** Windows.Win32.Graphics.Dxgi.DXGI_SWAP_EFFECT */
  SwapEffect: DXGI_SWAP_EFFECT;
  /** Windows.Win32.Graphics.Dxgi.Common.DXGI_ALPHA_MODE */
  AlphaMode: DXGI_ALPHA_MODE;
  /** u32 */
  Flags: number;
}

export const sizeofDXGI_SWAP_CHAIN_DESC1 = 48;

export function allocDXGI_SWAP_CHAIN_DESC1(data?: Partial<DXGI_SWAP_CHAIN_DESC1>): Uint8Array {
  const buf = new Uint8Array(sizeofDXGI_SWAP_CHAIN_DESC1);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.Width !== undefined) view.setUint32(0, Number(data.Width), true);
  // 0x04: u32
  if (data?.Height !== undefined) view.setUint32(4, Number(data.Height), true);
  // 0x08: u32
  if (data?.Format !== undefined) view.setUint32(8, Number(data.Format), true);
  // 0x0c: i32
  if (data?.Stereo !== undefined) view.setInt32(12, Number(data.Stereo), true);
  // 0x10: pointer
  if (data?.SampleDesc !== undefined) view.setBigUint64(16, data.SampleDesc === null ? 0n : BigInt(util.toPointer(data.SampleDesc)), true);
  // 0x18: u32
  if (data?.BufferUsage !== undefined) view.setUint32(24, Number(data.BufferUsage), true);
  // 0x1c: u32
  if (data?.BufferCount !== undefined) view.setUint32(28, Number(data.BufferCount), true);
  // 0x20: i32
  if (data?.Scaling !== undefined) view.setInt32(32, Number(data.Scaling), true);
  // 0x24: i32
  if (data?.SwapEffect !== undefined) view.setInt32(36, Number(data.SwapEffect), true);
  // 0x28: u32
  if (data?.AlphaMode !== undefined) view.setUint32(40, Number(data.AlphaMode), true);
  // 0x2c: u32
  if (data?.Flags !== undefined) view.setUint32(44, Number(data.Flags), true);
  return buf;
}

/**
 * Windows.Win32.Graphics.Dxgi.DXGI_SWAP_CHAIN_FULLSCREEN_DESC (size: 24)
 */
export interface DXGI_SWAP_CHAIN_FULLSCREEN_DESC {
  /** Windows.Win32.Graphics.Dxgi.Common.DXGI_RATIONAL */
  RefreshRate: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Graphics.Dxgi.Common.DXGI_MODE_SCANLINE_ORDER */
  ScanlineOrdering: DXGI_MODE_SCANLINE_ORDER;
  /** Windows.Win32.Graphics.Dxgi.Common.DXGI_MODE_SCALING */
  Scaling: DXGI_MODE_SCALING;
  /** Windows.Win32.Foundation.BOOL */
  Windowed: boolean;
}

export const sizeofDXGI_SWAP_CHAIN_FULLSCREEN_DESC = 24;

export function allocDXGI_SWAP_CHAIN_FULLSCREEN_DESC(data?: Partial<DXGI_SWAP_CHAIN_FULLSCREEN_DESC>): Uint8Array {
  const buf = new Uint8Array(sizeofDXGI_SWAP_CHAIN_FULLSCREEN_DESC);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.RefreshRate !== undefined) view.setBigUint64(0, data.RefreshRate === null ? 0n : BigInt(util.toPointer(data.RefreshRate)), true);
  // 0x08: i32
  if (data?.ScanlineOrdering !== undefined) view.setInt32(8, Number(data.ScanlineOrdering), true);
  // 0x0c: i32
  if (data?.Scaling !== undefined) view.setInt32(12, Number(data.Scaling), true);
  // 0x10: i32
  if (data?.Windowed !== undefined) view.setInt32(16, Number(data.Windowed), true);
  // 0x14: pad4
  return buf;
}

/**
 * Windows.Win32.Graphics.Dxgi.DXGI_PRESENT_PARAMETERS (size: 32)
 */
export interface DXGI_PRESENT_PARAMETERS {
  /** u32 */
  DirtyRectsCount: number;
  /** ptr */
  pDirtyRects: Deno.PointerValue | Uint8Array | null;
  /** ptr */
  pScrollRect: Deno.PointerValue | Uint8Array | null;
  /** ptr */
  pScrollOffset: Deno.PointerValue | Uint8Array | null;
}

export const sizeofDXGI_PRESENT_PARAMETERS = 32;

export function allocDXGI_PRESENT_PARAMETERS(data?: Partial<DXGI_PRESENT_PARAMETERS>): Uint8Array {
  const buf = new Uint8Array(sizeofDXGI_PRESENT_PARAMETERS);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.DirtyRectsCount !== undefined) view.setUint32(0, Number(data.DirtyRectsCount), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.pDirtyRects !== undefined) view.setBigUint64(8, data.pDirtyRects === null ? 0n : BigInt(util.toPointer(data.pDirtyRects)), true);
  // 0x10: pointer
  if (data?.pScrollRect !== undefined) view.setBigUint64(16, data.pScrollRect === null ? 0n : BigInt(util.toPointer(data.pScrollRect)), true);
  // 0x18: pointer
  if (data?.pScrollOffset !== undefined) view.setBigUint64(24, data.pScrollOffset === null ? 0n : BigInt(util.toPointer(data.pScrollOffset)), true);
  return buf;
}

/**
 * Windows.Win32.Graphics.Dxgi.DXGI_ADAPTER_DESC2 (size: 72)
 */
export interface DXGI_ADAPTER_DESC2 {
  /** array */
  Description: Deno.PointerValue | null;
  /** u32 */
  VendorId: number;
  /** u32 */
  DeviceId: number;
  /** u32 */
  SubSysId: number;
  /** u32 */
  Revision: number;
  /** usize */
  DedicatedVideoMemory: Deno.PointerValue;
  /** usize */
  DedicatedSystemMemory: Deno.PointerValue;
  /** usize */
  SharedSystemMemory: Deno.PointerValue;
  /** Windows.Win32.Foundation.LUID */
  AdapterLuid: Uint8Array | Deno.PointerValue | null;
  /** u32 */
  Flags: number;
  /** Windows.Win32.Graphics.Dxgi.DXGI_GRAPHICS_PREEMPTION_GRANULARITY */
  GraphicsPreemptionGranularity: DXGI_GRAPHICS_PREEMPTION_GRANULARITY;
  /** Windows.Win32.Graphics.Dxgi.DXGI_COMPUTE_PREEMPTION_GRANULARITY */
  ComputePreemptionGranularity: DXGI_COMPUTE_PREEMPTION_GRANULARITY;
}

export const sizeofDXGI_ADAPTER_DESC2 = 72;

export function allocDXGI_ADAPTER_DESC2(data?: Partial<DXGI_ADAPTER_DESC2>): Uint8Array {
  const buf = new Uint8Array(sizeofDXGI_ADAPTER_DESC2);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.Description !== undefined) view.setBigUint64(0, data.Description === null ? 0n : BigInt(util.toPointer(data.Description)), true);
  // 0x08: u32
  if (data?.VendorId !== undefined) view.setUint32(8, Number(data.VendorId), true);
  // 0x0c: u32
  if (data?.DeviceId !== undefined) view.setUint32(12, Number(data.DeviceId), true);
  // 0x10: u32
  if (data?.SubSysId !== undefined) view.setUint32(16, Number(data.SubSysId), true);
  // 0x14: u32
  if (data?.Revision !== undefined) view.setUint32(20, Number(data.Revision), true);
  // 0x18: usize
  if (data?.DedicatedVideoMemory !== undefined) view.setBigUint64(24, BigInt(data.DedicatedVideoMemory), true);
  // 0x20: usize
  if (data?.DedicatedSystemMemory !== undefined) view.setBigUint64(32, BigInt(data.DedicatedSystemMemory), true);
  // 0x28: usize
  if (data?.SharedSystemMemory !== undefined) view.setBigUint64(40, BigInt(data.SharedSystemMemory), true);
  // 0x30: pointer
  if (data?.AdapterLuid !== undefined) view.setBigUint64(48, data.AdapterLuid === null ? 0n : BigInt(util.toPointer(data.AdapterLuid)), true);
  // 0x38: u32
  if (data?.Flags !== undefined) view.setUint32(56, Number(data.Flags), true);
  // 0x3c: i32
  if (data?.GraphicsPreemptionGranularity !== undefined) view.setInt32(60, Number(data.GraphicsPreemptionGranularity), true);
  // 0x40: i32
  if (data?.ComputePreemptionGranularity !== undefined) view.setInt32(64, Number(data.ComputePreemptionGranularity), true);
  // 0x44: pad4
  return buf;
}

/**
 * Windows.Win32.Graphics.Dxgi.DXGI_MATRIX_3X2_F (size: 24)
 */
export interface DXGI_MATRIX_3X2_F {
  /** f32 */
  _11: number;
  /** f32 */
  _12: number;
  /** f32 */
  _21: number;
  /** f32 */
  _22: number;
  /** f32 */
  _31: number;
  /** f32 */
  _32: number;
}

export const sizeofDXGI_MATRIX_3X2_F = 24;

export function allocDXGI_MATRIX_3X2_F(data?: Partial<DXGI_MATRIX_3X2_F>): Uint8Array {
  const buf = new Uint8Array(sizeofDXGI_MATRIX_3X2_F);
  const view = new DataView(buf.buffer);
  // 0x00: f32
  if (data?._11 !== undefined) view.setFloat32(0, Number(data._11), true);
  // 0x04: f32
  if (data?._12 !== undefined) view.setFloat32(4, Number(data._12), true);
  // 0x08: f32
  if (data?._21 !== undefined) view.setFloat32(8, Number(data._21), true);
  // 0x0c: f32
  if (data?._22 !== undefined) view.setFloat32(12, Number(data._22), true);
  // 0x10: f32
  if (data?._31 !== undefined) view.setFloat32(16, Number(data._31), true);
  // 0x14: f32
  if (data?._32 !== undefined) view.setFloat32(20, Number(data._32), true);
  return buf;
}

/**
 * Windows.Win32.Graphics.Dxgi.DXGI_DECODE_SWAP_CHAIN_DESC (size: 8)
 */
export interface DXGI_DECODE_SWAP_CHAIN_DESC {
  /** u32 */
  Flags: number;
}

export const sizeofDXGI_DECODE_SWAP_CHAIN_DESC = 8;

export function allocDXGI_DECODE_SWAP_CHAIN_DESC(data?: Partial<DXGI_DECODE_SWAP_CHAIN_DESC>): Uint8Array {
  const buf = new Uint8Array(sizeofDXGI_DECODE_SWAP_CHAIN_DESC);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.Flags !== undefined) view.setUint32(0, Number(data.Flags), true);
  // 0x04: pad4
  return buf;
}

/**
 * Windows.Win32.Graphics.Dxgi.DXGI_FRAME_STATISTICS_MEDIA (size: 40)
 */
export interface DXGI_FRAME_STATISTICS_MEDIA {
  /** u32 */
  PresentCount: number;
  /** u32 */
  PresentRefreshCount: number;
  /** u32 */
  SyncRefreshCount: number;
  /** Windows.Win32.Foundation.LARGE_INTEGER */
  SyncQPCTime: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Foundation.LARGE_INTEGER */
  SyncGPUTime: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Graphics.Dxgi.DXGI_FRAME_PRESENTATION_MODE */
  CompositionMode: DXGI_FRAME_PRESENTATION_MODE;
  /** u32 */
  ApprovedPresentDuration: number;
}

export const sizeofDXGI_FRAME_STATISTICS_MEDIA = 40;

export function allocDXGI_FRAME_STATISTICS_MEDIA(data?: Partial<DXGI_FRAME_STATISTICS_MEDIA>): Uint8Array {
  const buf = new Uint8Array(sizeofDXGI_FRAME_STATISTICS_MEDIA);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.PresentCount !== undefined) view.setUint32(0, Number(data.PresentCount), true);
  // 0x04: u32
  if (data?.PresentRefreshCount !== undefined) view.setUint32(4, Number(data.PresentRefreshCount), true);
  // 0x08: u32
  if (data?.SyncRefreshCount !== undefined) view.setUint32(8, Number(data.SyncRefreshCount), true);
  // 0x0c: pad4
  // 0x10: pointer
  if (data?.SyncQPCTime !== undefined) view.setBigUint64(16, data.SyncQPCTime === null ? 0n : BigInt(util.toPointer(data.SyncQPCTime)), true);
  // 0x18: pointer
  if (data?.SyncGPUTime !== undefined) view.setBigUint64(24, data.SyncGPUTime === null ? 0n : BigInt(util.toPointer(data.SyncGPUTime)), true);
  // 0x20: i32
  if (data?.CompositionMode !== undefined) view.setInt32(32, Number(data.CompositionMode), true);
  // 0x24: u32
  if (data?.ApprovedPresentDuration !== undefined) view.setUint32(36, Number(data.ApprovedPresentDuration), true);
  return buf;
}

/**
 * Windows.Win32.Graphics.Dxgi.DXGI_QUERY_VIDEO_MEMORY_INFO (size: 32)
 */
export interface DXGI_QUERY_VIDEO_MEMORY_INFO {
  /** u64 */
  Budget: Deno.PointerValue;
  /** u64 */
  CurrentUsage: Deno.PointerValue;
  /** u64 */
  AvailableForReservation: Deno.PointerValue;
  /** u64 */
  CurrentReservation: Deno.PointerValue;
}

export const sizeofDXGI_QUERY_VIDEO_MEMORY_INFO = 32;

export function allocDXGI_QUERY_VIDEO_MEMORY_INFO(data?: Partial<DXGI_QUERY_VIDEO_MEMORY_INFO>): Uint8Array {
  const buf = new Uint8Array(sizeofDXGI_QUERY_VIDEO_MEMORY_INFO);
  const view = new DataView(buf.buffer);
  // 0x00: u64
  if (data?.Budget !== undefined) view.setBigUint64(0, BigInt(data.Budget), true);
  // 0x08: u64
  if (data?.CurrentUsage !== undefined) view.setBigUint64(8, BigInt(data.CurrentUsage), true);
  // 0x10: u64
  if (data?.AvailableForReservation !== undefined) view.setBigUint64(16, BigInt(data.AvailableForReservation), true);
  // 0x18: u64
  if (data?.CurrentReservation !== undefined) view.setBigUint64(24, BigInt(data.CurrentReservation), true);
  return buf;
}

/**
 * Windows.Win32.Graphics.Dxgi.DXGI_HDR_METADATA_HDR10 (size: 48)
 */
export interface DXGI_HDR_METADATA_HDR10 {
  /** array */
  RedPrimary: Deno.PointerValue | null;
  /** array */
  GreenPrimary: Deno.PointerValue | null;
  /** array */
  BluePrimary: Deno.PointerValue | null;
  /** array */
  WhitePoint: Deno.PointerValue | null;
  /** u32 */
  MaxMasteringLuminance: number;
  /** u32 */
  MinMasteringLuminance: number;
  /** u16 */
  MaxContentLightLevel: number;
  /** u16 */
  MaxFrameAverageLightLevel: number;
}

export const sizeofDXGI_HDR_METADATA_HDR10 = 48;

export function allocDXGI_HDR_METADATA_HDR10(data?: Partial<DXGI_HDR_METADATA_HDR10>): Uint8Array {
  const buf = new Uint8Array(sizeofDXGI_HDR_METADATA_HDR10);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.RedPrimary !== undefined) view.setBigUint64(0, data.RedPrimary === null ? 0n : BigInt(util.toPointer(data.RedPrimary)), true);
  // 0x08: pointer
  if (data?.GreenPrimary !== undefined) view.setBigUint64(8, data.GreenPrimary === null ? 0n : BigInt(util.toPointer(data.GreenPrimary)), true);
  // 0x10: pointer
  if (data?.BluePrimary !== undefined) view.setBigUint64(16, data.BluePrimary === null ? 0n : BigInt(util.toPointer(data.BluePrimary)), true);
  // 0x18: pointer
  if (data?.WhitePoint !== undefined) view.setBigUint64(24, data.WhitePoint === null ? 0n : BigInt(util.toPointer(data.WhitePoint)), true);
  // 0x20: u32
  if (data?.MaxMasteringLuminance !== undefined) view.setUint32(32, Number(data.MaxMasteringLuminance), true);
  // 0x24: u32
  if (data?.MinMasteringLuminance !== undefined) view.setUint32(36, Number(data.MinMasteringLuminance), true);
  // 0x28: u16
  if (data?.MaxContentLightLevel !== undefined) view.setUint16(40, Number(data.MaxContentLightLevel), true);
  // 0x2a: u16
  if (data?.MaxFrameAverageLightLevel !== undefined) view.setUint16(42, Number(data.MaxFrameAverageLightLevel), true);
  // 0x2c: pad4
  return buf;
}

/**
 * Windows.Win32.Graphics.Dxgi.DXGI_HDR_METADATA_HDR10PLUS (size: 8)
 */
export interface DXGI_HDR_METADATA_HDR10PLUS {
  /** array */
  Data: Deno.PointerValue | null;
}

export const sizeofDXGI_HDR_METADATA_HDR10PLUS = 8;

export function allocDXGI_HDR_METADATA_HDR10PLUS(data?: Partial<DXGI_HDR_METADATA_HDR10PLUS>): Uint8Array {
  const buf = new Uint8Array(sizeofDXGI_HDR_METADATA_HDR10PLUS);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.Data !== undefined) view.setBigUint64(0, data.Data === null ? 0n : BigInt(util.toPointer(data.Data)), true);
  return buf;
}

/**
 * Windows.Win32.Graphics.Dxgi.DXGI_ADAPTER_DESC3 (size: 72)
 */
export interface DXGI_ADAPTER_DESC3 {
  /** array */
  Description: Deno.PointerValue | null;
  /** u32 */
  VendorId: number;
  /** u32 */
  DeviceId: number;
  /** u32 */
  SubSysId: number;
  /** u32 */
  Revision: number;
  /** usize */
  DedicatedVideoMemory: Deno.PointerValue;
  /** usize */
  DedicatedSystemMemory: Deno.PointerValue;
  /** usize */
  SharedSystemMemory: Deno.PointerValue;
  /** Windows.Win32.Foundation.LUID */
  AdapterLuid: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Graphics.Dxgi.DXGI_ADAPTER_FLAG3 */
  Flags: DXGI_ADAPTER_FLAG3;
  /** Windows.Win32.Graphics.Dxgi.DXGI_GRAPHICS_PREEMPTION_GRANULARITY */
  GraphicsPreemptionGranularity: DXGI_GRAPHICS_PREEMPTION_GRANULARITY;
  /** Windows.Win32.Graphics.Dxgi.DXGI_COMPUTE_PREEMPTION_GRANULARITY */
  ComputePreemptionGranularity: DXGI_COMPUTE_PREEMPTION_GRANULARITY;
}

export const sizeofDXGI_ADAPTER_DESC3 = 72;

export function allocDXGI_ADAPTER_DESC3(data?: Partial<DXGI_ADAPTER_DESC3>): Uint8Array {
  const buf = new Uint8Array(sizeofDXGI_ADAPTER_DESC3);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.Description !== undefined) view.setBigUint64(0, data.Description === null ? 0n : BigInt(util.toPointer(data.Description)), true);
  // 0x08: u32
  if (data?.VendorId !== undefined) view.setUint32(8, Number(data.VendorId), true);
  // 0x0c: u32
  if (data?.DeviceId !== undefined) view.setUint32(12, Number(data.DeviceId), true);
  // 0x10: u32
  if (data?.SubSysId !== undefined) view.setUint32(16, Number(data.SubSysId), true);
  // 0x14: u32
  if (data?.Revision !== undefined) view.setUint32(20, Number(data.Revision), true);
  // 0x18: usize
  if (data?.DedicatedVideoMemory !== undefined) view.setBigUint64(24, BigInt(data.DedicatedVideoMemory), true);
  // 0x20: usize
  if (data?.DedicatedSystemMemory !== undefined) view.setBigUint64(32, BigInt(data.DedicatedSystemMemory), true);
  // 0x28: usize
  if (data?.SharedSystemMemory !== undefined) view.setBigUint64(40, BigInt(data.SharedSystemMemory), true);
  // 0x30: pointer
  if (data?.AdapterLuid !== undefined) view.setBigUint64(48, data.AdapterLuid === null ? 0n : BigInt(util.toPointer(data.AdapterLuid)), true);
  // 0x38: u32
  if (data?.Flags !== undefined) view.setUint32(56, Number(data.Flags), true);
  // 0x3c: i32
  if (data?.GraphicsPreemptionGranularity !== undefined) view.setInt32(60, Number(data.GraphicsPreemptionGranularity), true);
  // 0x40: i32
  if (data?.ComputePreemptionGranularity !== undefined) view.setInt32(64, Number(data.ComputePreemptionGranularity), true);
  // 0x44: pad4
  return buf;
}

/**
 * Windows.Win32.Graphics.Dxgi.DXGI_OUTPUT_DESC1 (size: 88)
 */
export interface DXGI_OUTPUT_DESC1 {
  /** array */
  DeviceName: Deno.PointerValue | null;
  /** Windows.Win32.Foundation.RECT */
  DesktopCoordinates: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Foundation.BOOL */
  AttachedToDesktop: boolean;
  /** Windows.Win32.Graphics.Dxgi.Common.DXGI_MODE_ROTATION */
  Rotation: DXGI_MODE_ROTATION;
  /** Windows.Win32.Graphics.Gdi.HMONITOR */
  Monitor: Uint8Array | Deno.PointerValue | null;
  /** u32 */
  BitsPerColor: number;
  /** Windows.Win32.Graphics.Dxgi.Common.DXGI_COLOR_SPACE_TYPE */
  ColorSpace: DXGI_COLOR_SPACE_TYPE;
  /** array */
  RedPrimary: Deno.PointerValue | null;
  /** array */
  GreenPrimary: Deno.PointerValue | null;
  /** array */
  BluePrimary: Deno.PointerValue | null;
  /** array */
  WhitePoint: Deno.PointerValue | null;
  /** f32 */
  MinLuminance: number;
  /** f32 */
  MaxLuminance: number;
  /** f32 */
  MaxFullFrameLuminance: number;
}

export const sizeofDXGI_OUTPUT_DESC1 = 88;

export function allocDXGI_OUTPUT_DESC1(data?: Partial<DXGI_OUTPUT_DESC1>): Uint8Array {
  const buf = new Uint8Array(sizeofDXGI_OUTPUT_DESC1);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.DeviceName !== undefined) view.setBigUint64(0, data.DeviceName === null ? 0n : BigInt(util.toPointer(data.DeviceName)), true);
  // 0x08: pointer
  if (data?.DesktopCoordinates !== undefined) view.setBigUint64(8, data.DesktopCoordinates === null ? 0n : BigInt(util.toPointer(data.DesktopCoordinates)), true);
  // 0x10: i32
  if (data?.AttachedToDesktop !== undefined) view.setInt32(16, Number(data.AttachedToDesktop), true);
  // 0x14: i32
  if (data?.Rotation !== undefined) view.setInt32(20, Number(data.Rotation), true);
  // 0x18: pointer
  if (data?.Monitor !== undefined) view.setBigUint64(24, data.Monitor === null ? 0n : BigInt(util.toPointer(data.Monitor)), true);
  // 0x20: u32
  if (data?.BitsPerColor !== undefined) view.setUint32(32, Number(data.BitsPerColor), true);
  // 0x24: i32
  if (data?.ColorSpace !== undefined) view.setInt32(36, Number(data.ColorSpace), true);
  // 0x28: pointer
  if (data?.RedPrimary !== undefined) view.setBigUint64(40, data.RedPrimary === null ? 0n : BigInt(util.toPointer(data.RedPrimary)), true);
  // 0x30: pointer
  if (data?.GreenPrimary !== undefined) view.setBigUint64(48, data.GreenPrimary === null ? 0n : BigInt(util.toPointer(data.GreenPrimary)), true);
  // 0x38: pointer
  if (data?.BluePrimary !== undefined) view.setBigUint64(56, data.BluePrimary === null ? 0n : BigInt(util.toPointer(data.BluePrimary)), true);
  // 0x40: pointer
  if (data?.WhitePoint !== undefined) view.setBigUint64(64, data.WhitePoint === null ? 0n : BigInt(util.toPointer(data.WhitePoint)), true);
  // 0x48: f32
  if (data?.MinLuminance !== undefined) view.setFloat32(72, Number(data.MinLuminance), true);
  // 0x4c: f32
  if (data?.MaxLuminance !== undefined) view.setFloat32(76, Number(data.MaxLuminance), true);
  // 0x50: f32
  if (data?.MaxFullFrameLuminance !== undefined) view.setFloat32(80, Number(data.MaxFullFrameLuminance), true);
  // 0x54: pad4
  return buf;
}

/**
 * Windows.Win32.Graphics.Dxgi.DXGI_INFO_QUEUE_MESSAGE (size: 40)
 */
export interface DXGI_INFO_QUEUE_MESSAGE {
  /** System.Guid */
  Producer: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Graphics.Dxgi.DXGI_INFO_QUEUE_MESSAGE_CATEGORY */
  Category: DXGI_INFO_QUEUE_MESSAGE_CATEGORY;
  /** Windows.Win32.Graphics.Dxgi.DXGI_INFO_QUEUE_MESSAGE_SEVERITY */
  Severity: DXGI_INFO_QUEUE_MESSAGE_SEVERITY;
  /** i32 */
  ID: number;
  /** ptr */
  pDescription: Deno.PointerValue | Uint8Array | null;
  /** usize */
  DescriptionByteLength: Deno.PointerValue;
}

export const sizeofDXGI_INFO_QUEUE_MESSAGE = 40;

export function allocDXGI_INFO_QUEUE_MESSAGE(data?: Partial<DXGI_INFO_QUEUE_MESSAGE>): Uint8Array {
  const buf = new Uint8Array(sizeofDXGI_INFO_QUEUE_MESSAGE);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.Producer !== undefined) view.setBigUint64(0, data.Producer === null ? 0n : BigInt(util.toPointer(data.Producer)), true);
  // 0x08: i32
  if (data?.Category !== undefined) view.setInt32(8, Number(data.Category), true);
  // 0x0c: i32
  if (data?.Severity !== undefined) view.setInt32(12, Number(data.Severity), true);
  // 0x10: i32
  if (data?.ID !== undefined) view.setInt32(16, Number(data.ID), true);
  // 0x14: pad4
  // 0x18: pointer
  if (data?.pDescription !== undefined) view.setBigUint64(24, data.pDescription === null ? 0n : BigInt(util.toPointer(data.pDescription)), true);
  // 0x20: usize
  if (data?.DescriptionByteLength !== undefined) view.setBigUint64(32, BigInt(data.DescriptionByteLength), true);
  return buf;
}

/**
 * Windows.Win32.Graphics.Dxgi.DXGI_INFO_QUEUE_FILTER_DESC (size: 48)
 */
export interface DXGI_INFO_QUEUE_FILTER_DESC {
  /** u32 */
  NumCategories: number;
  /** ptr */
  pCategoryList: Deno.PointerValue | Uint8Array | null;
  /** u32 */
  NumSeverities: number;
  /** ptr */
  pSeverityList: Deno.PointerValue | Uint8Array | null;
  /** u32 */
  NumIDs: number;
  /** ptr */
  pIDList: Deno.PointerValue | Uint8Array | null;
}

export const sizeofDXGI_INFO_QUEUE_FILTER_DESC = 48;

export function allocDXGI_INFO_QUEUE_FILTER_DESC(data?: Partial<DXGI_INFO_QUEUE_FILTER_DESC>): Uint8Array {
  const buf = new Uint8Array(sizeofDXGI_INFO_QUEUE_FILTER_DESC);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.NumCategories !== undefined) view.setUint32(0, Number(data.NumCategories), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.pCategoryList !== undefined) view.setBigUint64(8, data.pCategoryList === null ? 0n : BigInt(util.toPointer(data.pCategoryList)), true);
  // 0x10: u32
  if (data?.NumSeverities !== undefined) view.setUint32(16, Number(data.NumSeverities), true);
  // 0x14: pad4
  // 0x18: pointer
  if (data?.pSeverityList !== undefined) view.setBigUint64(24, data.pSeverityList === null ? 0n : BigInt(util.toPointer(data.pSeverityList)), true);
  // 0x20: u32
  if (data?.NumIDs !== undefined) view.setUint32(32, Number(data.NumIDs), true);
  // 0x24: pad4
  // 0x28: pointer
  if (data?.pIDList !== undefined) view.setBigUint64(40, data.pIDList === null ? 0n : BigInt(util.toPointer(data.pIDList)), true);
  return buf;
}

/**
 * Windows.Win32.Graphics.Dxgi.DXGI_INFO_QUEUE_FILTER (size: 16)
 */
export interface DXGI_INFO_QUEUE_FILTER {
  /** Windows.Win32.Graphics.Dxgi.DXGI_INFO_QUEUE_FILTER_DESC */
  AllowList: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Graphics.Dxgi.DXGI_INFO_QUEUE_FILTER_DESC */
  DenyList: Uint8Array | Deno.PointerValue | null;
}

export const sizeofDXGI_INFO_QUEUE_FILTER = 16;

export function allocDXGI_INFO_QUEUE_FILTER(data?: Partial<DXGI_INFO_QUEUE_FILTER>): Uint8Array {
  const buf = new Uint8Array(sizeofDXGI_INFO_QUEUE_FILTER);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.AllowList !== undefined) view.setBigUint64(0, data.AllowList === null ? 0n : BigInt(util.toPointer(data.AllowList)), true);
  // 0x08: pointer
  if (data?.DenyList !== undefined) view.setBigUint64(8, data.DenyList === null ? 0n : BigInt(util.toPointer(data.DenyList)), true);
  return buf;
}

export type HRESULT = number;

// Native Libraries

try {
  var libdxgi = Deno.dlopen("dxgi", {
    CreateDXGIFactory: {
      parameters: ["pointer", "pointer"],
      result: "pointer",
    },
    CreateDXGIFactory1: {
      parameters: ["pointer", "pointer"],
      result: "pointer",
    },
    CreateDXGIFactory2: {
      parameters: ["u32", "pointer", "pointer"],
      result: "pointer",
    },
    DXGIGetDebugInterface1: {
      parameters: ["u32", "pointer", "pointer"],
      result: "pointer",
    },
    DXGIDeclareAdapterRemovalSupport: {
      parameters: [],
      result: "pointer",
    },
  }).symbols;
} catch(e) { /* ignore */ }

// Symbols

export function CreateDXGIFactory(
  riid: Deno.PointerValue | Uint8Array | null /* ptr */,
  ppFactory: Deno.PointerValue | Uint8Array | null /* ptr */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libdxgi.CreateDXGIFactory(util.toPointer(riid), util.toPointer(ppFactory)));
}

export function CreateDXGIFactory1(
  riid: Deno.PointerValue | Uint8Array | null /* ptr */,
  ppFactory: Deno.PointerValue | Uint8Array | null /* ptr */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libdxgi.CreateDXGIFactory1(util.toPointer(riid), util.toPointer(ppFactory)));
}

export function CreateDXGIFactory2(
  Flags: number /* u32 */,
  riid: Deno.PointerValue | Uint8Array | null /* ptr */,
  ppFactory: Deno.PointerValue | Uint8Array | null /* ptr */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libdxgi.CreateDXGIFactory2(Flags, util.toPointer(riid), util.toPointer(ppFactory)));
}

export function DXGIGetDebugInterface1(
  Flags: number /* u32 */,
  riid: Deno.PointerValue | Uint8Array | null /* ptr */,
  pDebug: Deno.PointerValue | Uint8Array | null /* ptr */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libdxgi.DXGIGetDebugInterface1(Flags, util.toPointer(riid), util.toPointer(pDebug)));
}

export function DXGIDeclareAdapterRemovalSupport(): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libdxgi.DXGIDeclareAdapterRemovalSupport());
}

