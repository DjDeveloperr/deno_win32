/// Auto-generated by Deno Win32: Windows.Win32.Graphics.Dwm.Apis

import * as util from "../../util.ts";

// Enums
export type DWMWINDOWATTRIBUTE = number;
export type DWM_WINDOW_CORNER_PREFERENCE = number;
export type DWMNCRENDERINGPOLICY = number;
export type DWMFLIP3DWINDOWPOLICY = number;
export type DWM_SOURCE_FRAME_SAMPLING = number;
export type DWMTRANSITION_OWNEDWINDOW_TARGET = number;
export type GESTURE_TYPE = number;
export type DWM_SHOWCONTACT = number;
export type DWM_TAB_WINDOW_REQUIREMENTS = number;

// Constants
export const DWM_BB_ENABLE = 1;
export const DWM_BB_BLURREGION = 2;
export const DWM_BB_TRANSITIONONMAXIMIZED = 4;
export const DWMWA_COLOR_DEFAULT = 4294967295;
export const DWMWA_COLOR_NONE = 4294967294;
export const DWM_CLOAKED_APP = 1;
export const DWM_CLOAKED_SHELL = 2;
export const DWM_CLOAKED_INHERITED = 4;
export const DWM_TNP_RECTDESTINATION = 1;
export const DWM_TNP_RECTSOURCE = 2;
export const DWM_TNP_OPACITY = 4;
export const DWM_TNP_VISIBLE = 8;
export const DWM_TNP_SOURCECLIENTAREAONLY = 16;
export const DWM_FRAME_DURATION_DEFAULT = `-1`;
export const DWM_EC_DISABLECOMPOSITION = 0;
export const DWM_EC_ENABLECOMPOSITION = 1;
export const DWM_SIT_DISPLAYFRAME = 1;
export const c_DwmMaxQueuedBuffers = 8;
export const c_DwmMaxMonitors = 16;
export const c_DwmMaxAdapters = 16;
export const DWMWA_NCRENDERING_ENABLED = 1;
export const DWMWA_NCRENDERING_POLICY = 2;
export const DWMWA_TRANSITIONS_FORCEDISABLED = 3;
export const DWMWA_ALLOW_NCPAINT = 4;
export const DWMWA_CAPTION_BUTTON_BOUNDS = 5;
export const DWMWA_NONCLIENT_RTL_LAYOUT = 6;
export const DWMWA_FORCE_ICONIC_REPRESENTATION = 7;
export const DWMWA_FLIP3D_POLICY = 8;
export const DWMWA_EXTENDED_FRAME_BOUNDS = 9;
export const DWMWA_HAS_ICONIC_BITMAP = 10;
export const DWMWA_DISALLOW_PEEK = 11;
export const DWMWA_EXCLUDED_FROM_PEEK = 12;
export const DWMWA_CLOAK = 13;
export const DWMWA_CLOAKED = 14;
export const DWMWA_FREEZE_REPRESENTATION = 15;
export const DWMWA_PASSIVE_UPDATE_MODE = 16;
export const DWMWA_USE_HOSTBACKDROPBRUSH = 17;
export const DWMWA_USE_IMMERSIVE_DARK_MODE = 20;
export const DWMWA_WINDOW_CORNER_PREFERENCE = 33;
export const DWMWA_BORDER_COLOR = 34;
export const DWMWA_CAPTION_COLOR = 35;
export const DWMWA_TEXT_COLOR = 36;
export const DWMWA_VISIBLE_FRAME_BORDER_THICKNESS = 37;
export const DWMWA_LAST = 38;
export const DWMWCP_DEFAULT = 0;
export const DWMWCP_DONOTROUND = 1;
export const DWMWCP_ROUND = 2;
export const DWMWCP_ROUNDSMALL = 3;
export const DWMNCRP_USEWINDOWSTYLE = 0;
export const DWMNCRP_DISABLED = 1;
export const DWMNCRP_ENABLED = 2;
export const DWMNCRP_LAST = 3;
export const DWMFLIP3D_DEFAULT = 0;
export const DWMFLIP3D_EXCLUDEBELOW = 1;
export const DWMFLIP3D_EXCLUDEABOVE = 2;
export const DWMFLIP3D_LAST = 3;
export const DWM_SOURCE_FRAME_SAMPLING_POINT = 0;
export const DWM_SOURCE_FRAME_SAMPLING_COVERAGE = 1;
export const DWM_SOURCE_FRAME_SAMPLING_LAST = 2;
export const DWMTRANSITION_OWNEDWINDOW_NULL = `-1`;
export const DWMTRANSITION_OWNEDWINDOW_REPOSITION = 0;
export const GT_PEN_TAP = 0;
export const GT_PEN_DOUBLETAP = 1;
export const GT_PEN_RIGHTTAP = 2;
export const GT_PEN_PRESSANDHOLD = 3;
export const GT_PEN_PRESSANDHOLDABORT = 4;
export const GT_TOUCH_TAP = 5;
export const GT_TOUCH_DOUBLETAP = 6;
export const GT_TOUCH_RIGHTTAP = 7;
export const GT_TOUCH_PRESSANDHOLD = 8;
export const GT_TOUCH_PRESSANDHOLDABORT = 9;
export const GT_TOUCH_PRESSANDTAP = 10;
export const DWMSC_DOWN = 1;
export const DWMSC_UP = 2;
export const DWMSC_DRAG = 4;
export const DWMSC_HOLD = 8;
export const DWMSC_PENBARREL = 16;
export const DWMSC_NONE = 0;
export const DWMSC_ALL = 4294967295;
export const DWMTWR_NONE = 0;
export const DWMTWR_IMPLEMENTED_BY_SYSTEM = 1;
export const DWMTWR_WINDOW_RELATIONSHIP = 2;
export const DWMTWR_WINDOW_STYLES = 4;
export const DWMTWR_WINDOW_REGION = 8;
export const DWMTWR_WINDOW_DWM_ATTRIBUTES = 16;
export const DWMTWR_WINDOW_MARGINS = 32;
export const DWMTWR_TABBING_ENABLED = 64;
export const DWMTWR_USER_POLICY = 128;
export const DWMTWR_GROUP_POLICY = 256;
export const DWMTWR_APP_COMPAT = 512;

// Structs

export type BOOL = number;

export type HRGN = bigint | number;

/**
 * Windows.Win32.Graphics.Dwm.DWM_BLURBEHIND (size: 24)
 */
export interface DWM_BLURBEHIND {
  /** u32 */
  dwFlags: number;
  /** Windows.Win32.Foundation.BOOL */
  fEnable: boolean;
  /** Windows.Win32.Graphics.Gdi.HRGN */
  hRgnBlur: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.Foundation.BOOL */
  fTransitionOnMaximized: boolean;
}

export const sizeofDWM_BLURBEHIND = 24;

export function allocDWM_BLURBEHIND(data?: Partial<DWM_BLURBEHIND>): Uint8Array {
  const buf = new Uint8Array(sizeofDWM_BLURBEHIND);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.dwFlags !== undefined) view.setUint32(0, Number(data.dwFlags), true);
  // 0x04: i32
  if (data?.fEnable !== undefined) view.setInt32(4, Number(data.fEnable), true);
  // 0x08: pointer
  if (data?.hRgnBlur !== undefined) view.setBigUint64(8, data.hRgnBlur === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.hRgnBlur))), true);
  // 0x10: i32
  if (data?.fTransitionOnMaximized !== undefined) view.setInt32(16, Number(data.fTransitionOnMaximized), true);
  // 0x14: pad4
  return buf;
}

export class DWM_BLURBEHINDView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get dwFlags(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: i32
  get fEnable(): number {
    return this.view.getInt32(4, true);
  }

  // 0x08: pointer
  get hRgnBlur(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x10: i32
  get fTransitionOnMaximized(): number {
    return this.view.getInt32(16, true);
  }

  // 0x14: pad4

  // 0x00: u32
  set dwFlags(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: i32
  set fEnable(value: number) {
    this.view.setInt32(4, value, true);
  }

  // 0x08: pointer
  set hRgnBlur(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x10: i32
  set fTransitionOnMaximized(value: number) {
    this.view.setInt32(16, value, true);
  }

  // 0x14: pad4
}

/**
 * Windows.Win32.Foundation.RECT (size: 16)
 */
export interface RECT {
  /** i32 */
  left: number;
  /** i32 */
  top: number;
  /** i32 */
  right: number;
  /** i32 */
  bottom: number;
}

export const sizeofRECT = 16;

export function allocRECT(data?: Partial<RECT>): Uint8Array {
  const buf = new Uint8Array(sizeofRECT);
  const view = new DataView(buf.buffer);
  // 0x00: i32
  if (data?.left !== undefined) view.setInt32(0, Number(data.left), true);
  // 0x04: i32
  if (data?.top !== undefined) view.setInt32(4, Number(data.top), true);
  // 0x08: i32
  if (data?.right !== undefined) view.setInt32(8, Number(data.right), true);
  // 0x0c: i32
  if (data?.bottom !== undefined) view.setInt32(12, Number(data.bottom), true);
  return buf;
}

export class RECTView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: i32
  get left(): number {
    return this.view.getInt32(0, true);
  }

  // 0x04: i32
  get top(): number {
    return this.view.getInt32(4, true);
  }

  // 0x08: i32
  get right(): number {
    return this.view.getInt32(8, true);
  }

  // 0x0c: i32
  get bottom(): number {
    return this.view.getInt32(12, true);
  }

  // 0x00: i32
  set left(value: number) {
    this.view.setInt32(0, value, true);
  }

  // 0x04: i32
  set top(value: number) {
    this.view.setInt32(4, value, true);
  }

  // 0x08: i32
  set right(value: number) {
    this.view.setInt32(8, value, true);
  }

  // 0x0c: i32
  set bottom(value: number) {
    this.view.setInt32(12, value, true);
  }
}

/**
 * Windows.Win32.Graphics.Dwm.DWM_THUMBNAIL_PROPERTIES (size: 40)
 */
export interface DWM_THUMBNAIL_PROPERTIES {
  /** u32 */
  dwFlags: number;
  /** Windows.Win32.Foundation.RECT */
  rcDestination: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.Foundation.RECT */
  rcSource: Uint8Array | Deno.PointerValue;
  /** u8 */
  opacity: number;
  /** Windows.Win32.Foundation.BOOL */
  fVisible: boolean;
  /** Windows.Win32.Foundation.BOOL */
  fSourceClientAreaOnly: boolean;
}

export const sizeofDWM_THUMBNAIL_PROPERTIES = 40;

export function allocDWM_THUMBNAIL_PROPERTIES(data?: Partial<DWM_THUMBNAIL_PROPERTIES>): Uint8Array {
  const buf = new Uint8Array(sizeofDWM_THUMBNAIL_PROPERTIES);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.dwFlags !== undefined) view.setUint32(0, Number(data.dwFlags), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.rcDestination !== undefined) view.setBigUint64(8, data.rcDestination === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.rcDestination))), true);
  // 0x10: pointer
  if (data?.rcSource !== undefined) view.setBigUint64(16, data.rcSource === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.rcSource))), true);
  // 0x18: u8
  if (data?.opacity !== undefined) view.setUint8(24, Number(data.opacity));
  // 0x19: i32
  if (data?.fVisible !== undefined) view.setInt32(25, Number(data.fVisible), true);
  // 0x1d: i32
  if (data?.fSourceClientAreaOnly !== undefined) view.setInt32(29, Number(data.fSourceClientAreaOnly), true);
  // 0x21: pad7
  return buf;
}

export class DWM_THUMBNAIL_PROPERTIESView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get dwFlags(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  get rcDestination(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x10: pointer
  get rcSource(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(16, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x18: u8
  get opacity(): number {
    return this.view.getUint8(24);
  }

  // 0x19: i32
  get fVisible(): number {
    return this.view.getInt32(25, true);
  }

  // 0x1d: i32
  get fSourceClientAreaOnly(): number {
    return this.view.getInt32(29, true);
  }

  // 0x21: pad7

  // 0x00: u32
  set dwFlags(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  set rcDestination(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x10: pointer
  set rcSource(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(16, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x18: u8
  set opacity(value: number) {
    this.view.setUint8(24, value);
  }

  // 0x19: i32
  set fVisible(value: number) {
    this.view.setInt32(25, value, true);
  }

  // 0x1d: i32
  set fSourceClientAreaOnly(value: number) {
    this.view.setInt32(29, value, true);
  }

  // 0x21: pad7
}

/**
 * Windows.Win32.Graphics.Dwm.UNSIGNED_RATIO (size: 8)
 */
export interface UNSIGNED_RATIO {
  /** u32 */
  uiNumerator: number;
  /** u32 */
  uiDenominator: number;
}

export const sizeofUNSIGNED_RATIO = 8;

export function allocUNSIGNED_RATIO(data?: Partial<UNSIGNED_RATIO>): Uint8Array {
  const buf = new Uint8Array(sizeofUNSIGNED_RATIO);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.uiNumerator !== undefined) view.setUint32(0, Number(data.uiNumerator), true);
  // 0x04: u32
  if (data?.uiDenominator !== undefined) view.setUint32(4, Number(data.uiDenominator), true);
  return buf;
}

export class UNSIGNED_RATIOView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get uiNumerator(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: u32
  get uiDenominator(): number {
    return this.view.getUint32(4, true);
  }

  // 0x00: u32
  set uiNumerator(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: u32
  set uiDenominator(value: number) {
    this.view.setUint32(4, value, true);
  }
}

/**
 * Windows.Win32.Graphics.Dwm.DWM_TIMING_INFO (size: 320)
 */
export interface DWM_TIMING_INFO {
  /** u32 */
  cbSize: number;
  /** Windows.Win32.Graphics.Dwm.UNSIGNED_RATIO */
  rateRefresh: Uint8Array | Deno.PointerValue;
  /** u64 */
  qpcRefreshPeriod: bigint | number;
  /** Windows.Win32.Graphics.Dwm.UNSIGNED_RATIO */
  rateCompose: Uint8Array | Deno.PointerValue;
  /** u64 */
  qpcVBlank: bigint | number;
  /** u64 */
  cRefresh: bigint | number;
  /** u32 */
  cDXRefresh: number;
  /** u64 */
  qpcCompose: bigint | number;
  /** u64 */
  cFrame: bigint | number;
  /** u32 */
  cDXPresent: number;
  /** u64 */
  cRefreshFrame: bigint | number;
  /** u64 */
  cFrameSubmitted: bigint | number;
  /** u32 */
  cDXPresentSubmitted: number;
  /** u64 */
  cFrameConfirmed: bigint | number;
  /** u32 */
  cDXPresentConfirmed: number;
  /** u64 */
  cRefreshConfirmed: bigint | number;
  /** u32 */
  cDXRefreshConfirmed: number;
  /** u64 */
  cFramesLate: bigint | number;
  /** u32 */
  cFramesOutstanding: number;
  /** u64 */
  cFrameDisplayed: bigint | number;
  /** u64 */
  qpcFrameDisplayed: bigint | number;
  /** u64 */
  cRefreshFrameDisplayed: bigint | number;
  /** u64 */
  cFrameComplete: bigint | number;
  /** u64 */
  qpcFrameComplete: bigint | number;
  /** u64 */
  cFramePending: bigint | number;
  /** u64 */
  qpcFramePending: bigint | number;
  /** u64 */
  cFramesDisplayed: bigint | number;
  /** u64 */
  cFramesComplete: bigint | number;
  /** u64 */
  cFramesPending: bigint | number;
  /** u64 */
  cFramesAvailable: bigint | number;
  /** u64 */
  cFramesDropped: bigint | number;
  /** u64 */
  cFramesMissed: bigint | number;
  /** u64 */
  cRefreshNextDisplayed: bigint | number;
  /** u64 */
  cRefreshNextPresented: bigint | number;
  /** u64 */
  cRefreshesDisplayed: bigint | number;
  /** u64 */
  cRefreshesPresented: bigint | number;
  /** u64 */
  cRefreshStarted: bigint | number;
  /** u64 */
  cPixelsReceived: bigint | number;
  /** u64 */
  cPixelsDrawn: bigint | number;
  /** u64 */
  cBuffersEmpty: bigint | number;
}

export const sizeofDWM_TIMING_INFO = 320;

export function allocDWM_TIMING_INFO(data?: Partial<DWM_TIMING_INFO>): Uint8Array {
  const buf = new Uint8Array(sizeofDWM_TIMING_INFO);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.cbSize !== undefined) view.setUint32(0, Number(data.cbSize), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.rateRefresh !== undefined) view.setBigUint64(8, data.rateRefresh === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.rateRefresh))), true);
  // 0x10: u64
  if (data?.qpcRefreshPeriod !== undefined) view.setBigUint64(16, BigInt(data.qpcRefreshPeriod), true);
  // 0x18: pointer
  if (data?.rateCompose !== undefined) view.setBigUint64(24, data.rateCompose === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.rateCompose))), true);
  // 0x20: u64
  if (data?.qpcVBlank !== undefined) view.setBigUint64(32, BigInt(data.qpcVBlank), true);
  // 0x28: u64
  if (data?.cRefresh !== undefined) view.setBigUint64(40, BigInt(data.cRefresh), true);
  // 0x30: u32
  if (data?.cDXRefresh !== undefined) view.setUint32(48, Number(data.cDXRefresh), true);
  // 0x34: pad4
  // 0x38: u64
  if (data?.qpcCompose !== undefined) view.setBigUint64(56, BigInt(data.qpcCompose), true);
  // 0x40: u64
  if (data?.cFrame !== undefined) view.setBigUint64(64, BigInt(data.cFrame), true);
  // 0x48: u32
  if (data?.cDXPresent !== undefined) view.setUint32(72, Number(data.cDXPresent), true);
  // 0x4c: pad4
  // 0x50: u64
  if (data?.cRefreshFrame !== undefined) view.setBigUint64(80, BigInt(data.cRefreshFrame), true);
  // 0x58: u64
  if (data?.cFrameSubmitted !== undefined) view.setBigUint64(88, BigInt(data.cFrameSubmitted), true);
  // 0x60: u32
  if (data?.cDXPresentSubmitted !== undefined) view.setUint32(96, Number(data.cDXPresentSubmitted), true);
  // 0x64: pad4
  // 0x68: u64
  if (data?.cFrameConfirmed !== undefined) view.setBigUint64(104, BigInt(data.cFrameConfirmed), true);
  // 0x70: u32
  if (data?.cDXPresentConfirmed !== undefined) view.setUint32(112, Number(data.cDXPresentConfirmed), true);
  // 0x74: pad4
  // 0x78: u64
  if (data?.cRefreshConfirmed !== undefined) view.setBigUint64(120, BigInt(data.cRefreshConfirmed), true);
  // 0x80: u32
  if (data?.cDXRefreshConfirmed !== undefined) view.setUint32(128, Number(data.cDXRefreshConfirmed), true);
  // 0x84: pad4
  // 0x88: u64
  if (data?.cFramesLate !== undefined) view.setBigUint64(136, BigInt(data.cFramesLate), true);
  // 0x90: u32
  if (data?.cFramesOutstanding !== undefined) view.setUint32(144, Number(data.cFramesOutstanding), true);
  // 0x94: pad4
  // 0x98: u64
  if (data?.cFrameDisplayed !== undefined) view.setBigUint64(152, BigInt(data.cFrameDisplayed), true);
  // 0xa0: u64
  if (data?.qpcFrameDisplayed !== undefined) view.setBigUint64(160, BigInt(data.qpcFrameDisplayed), true);
  // 0xa8: u64
  if (data?.cRefreshFrameDisplayed !== undefined) view.setBigUint64(168, BigInt(data.cRefreshFrameDisplayed), true);
  // 0xb0: u64
  if (data?.cFrameComplete !== undefined) view.setBigUint64(176, BigInt(data.cFrameComplete), true);
  // 0xb8: u64
  if (data?.qpcFrameComplete !== undefined) view.setBigUint64(184, BigInt(data.qpcFrameComplete), true);
  // 0xc0: u64
  if (data?.cFramePending !== undefined) view.setBigUint64(192, BigInt(data.cFramePending), true);
  // 0xc8: u64
  if (data?.qpcFramePending !== undefined) view.setBigUint64(200, BigInt(data.qpcFramePending), true);
  // 0xd0: u64
  if (data?.cFramesDisplayed !== undefined) view.setBigUint64(208, BigInt(data.cFramesDisplayed), true);
  // 0xd8: u64
  if (data?.cFramesComplete !== undefined) view.setBigUint64(216, BigInt(data.cFramesComplete), true);
  // 0xe0: u64
  if (data?.cFramesPending !== undefined) view.setBigUint64(224, BigInt(data.cFramesPending), true);
  // 0xe8: u64
  if (data?.cFramesAvailable !== undefined) view.setBigUint64(232, BigInt(data.cFramesAvailable), true);
  // 0xf0: u64
  if (data?.cFramesDropped !== undefined) view.setBigUint64(240, BigInt(data.cFramesDropped), true);
  // 0xf8: u64
  if (data?.cFramesMissed !== undefined) view.setBigUint64(248, BigInt(data.cFramesMissed), true);
  // 0x100: u64
  if (data?.cRefreshNextDisplayed !== undefined) view.setBigUint64(256, BigInt(data.cRefreshNextDisplayed), true);
  // 0x108: u64
  if (data?.cRefreshNextPresented !== undefined) view.setBigUint64(264, BigInt(data.cRefreshNextPresented), true);
  // 0x110: u64
  if (data?.cRefreshesDisplayed !== undefined) view.setBigUint64(272, BigInt(data.cRefreshesDisplayed), true);
  // 0x118: u64
  if (data?.cRefreshesPresented !== undefined) view.setBigUint64(280, BigInt(data.cRefreshesPresented), true);
  // 0x120: u64
  if (data?.cRefreshStarted !== undefined) view.setBigUint64(288, BigInt(data.cRefreshStarted), true);
  // 0x128: u64
  if (data?.cPixelsReceived !== undefined) view.setBigUint64(296, BigInt(data.cPixelsReceived), true);
  // 0x130: u64
  if (data?.cPixelsDrawn !== undefined) view.setBigUint64(304, BigInt(data.cPixelsDrawn), true);
  // 0x138: u64
  if (data?.cBuffersEmpty !== undefined) view.setBigUint64(312, BigInt(data.cBuffersEmpty), true);
  return buf;
}

export class DWM_TIMING_INFOView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get cbSize(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  get rateRefresh(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x10: u64
  get qpcRefreshPeriod(): bigint | number {
    return Number(this.view.getBigUint64(16, true));
  }

  // 0x18: pointer
  get rateCompose(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(24, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x20: u64
  get qpcVBlank(): bigint | number {
    return Number(this.view.getBigUint64(32, true));
  }

  // 0x28: u64
  get cRefresh(): bigint | number {
    return Number(this.view.getBigUint64(40, true));
  }

  // 0x30: u32
  get cDXRefresh(): number {
    return this.view.getUint32(48, true);
  }

  // 0x34: pad4

  // 0x38: u64
  get qpcCompose(): bigint | number {
    return Number(this.view.getBigUint64(56, true));
  }

  // 0x40: u64
  get cFrame(): bigint | number {
    return Number(this.view.getBigUint64(64, true));
  }

  // 0x48: u32
  get cDXPresent(): number {
    return this.view.getUint32(72, true);
  }

  // 0x4c: pad4

  // 0x50: u64
  get cRefreshFrame(): bigint | number {
    return Number(this.view.getBigUint64(80, true));
  }

  // 0x58: u64
  get cFrameSubmitted(): bigint | number {
    return Number(this.view.getBigUint64(88, true));
  }

  // 0x60: u32
  get cDXPresentSubmitted(): number {
    return this.view.getUint32(96, true);
  }

  // 0x64: pad4

  // 0x68: u64
  get cFrameConfirmed(): bigint | number {
    return Number(this.view.getBigUint64(104, true));
  }

  // 0x70: u32
  get cDXPresentConfirmed(): number {
    return this.view.getUint32(112, true);
  }

  // 0x74: pad4

  // 0x78: u64
  get cRefreshConfirmed(): bigint | number {
    return Number(this.view.getBigUint64(120, true));
  }

  // 0x80: u32
  get cDXRefreshConfirmed(): number {
    return this.view.getUint32(128, true);
  }

  // 0x84: pad4

  // 0x88: u64
  get cFramesLate(): bigint | number {
    return Number(this.view.getBigUint64(136, true));
  }

  // 0x90: u32
  get cFramesOutstanding(): number {
    return this.view.getUint32(144, true);
  }

  // 0x94: pad4

  // 0x98: u64
  get cFrameDisplayed(): bigint | number {
    return Number(this.view.getBigUint64(152, true));
  }

  // 0xa0: u64
  get qpcFrameDisplayed(): bigint | number {
    return Number(this.view.getBigUint64(160, true));
  }

  // 0xa8: u64
  get cRefreshFrameDisplayed(): bigint | number {
    return Number(this.view.getBigUint64(168, true));
  }

  // 0xb0: u64
  get cFrameComplete(): bigint | number {
    return Number(this.view.getBigUint64(176, true));
  }

  // 0xb8: u64
  get qpcFrameComplete(): bigint | number {
    return Number(this.view.getBigUint64(184, true));
  }

  // 0xc0: u64
  get cFramePending(): bigint | number {
    return Number(this.view.getBigUint64(192, true));
  }

  // 0xc8: u64
  get qpcFramePending(): bigint | number {
    return Number(this.view.getBigUint64(200, true));
  }

  // 0xd0: u64
  get cFramesDisplayed(): bigint | number {
    return Number(this.view.getBigUint64(208, true));
  }

  // 0xd8: u64
  get cFramesComplete(): bigint | number {
    return Number(this.view.getBigUint64(216, true));
  }

  // 0xe0: u64
  get cFramesPending(): bigint | number {
    return Number(this.view.getBigUint64(224, true));
  }

  // 0xe8: u64
  get cFramesAvailable(): bigint | number {
    return Number(this.view.getBigUint64(232, true));
  }

  // 0xf0: u64
  get cFramesDropped(): bigint | number {
    return Number(this.view.getBigUint64(240, true));
  }

  // 0xf8: u64
  get cFramesMissed(): bigint | number {
    return Number(this.view.getBigUint64(248, true));
  }

  // 0x100: u64
  get cRefreshNextDisplayed(): bigint | number {
    return Number(this.view.getBigUint64(256, true));
  }

  // 0x108: u64
  get cRefreshNextPresented(): bigint | number {
    return Number(this.view.getBigUint64(264, true));
  }

  // 0x110: u64
  get cRefreshesDisplayed(): bigint | number {
    return Number(this.view.getBigUint64(272, true));
  }

  // 0x118: u64
  get cRefreshesPresented(): bigint | number {
    return Number(this.view.getBigUint64(280, true));
  }

  // 0x120: u64
  get cRefreshStarted(): bigint | number {
    return Number(this.view.getBigUint64(288, true));
  }

  // 0x128: u64
  get cPixelsReceived(): bigint | number {
    return Number(this.view.getBigUint64(296, true));
  }

  // 0x130: u64
  get cPixelsDrawn(): bigint | number {
    return Number(this.view.getBigUint64(304, true));
  }

  // 0x138: u64
  get cBuffersEmpty(): bigint | number {
    return Number(this.view.getBigUint64(312, true));
  }

  // 0x00: u32
  set cbSize(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  set rateRefresh(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x10: u64
  set qpcRefreshPeriod(value: bigint | number) {
    this.view.setBigUint64(16, BigInt(value), true);
  }

  // 0x18: pointer
  set rateCompose(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(24, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x20: u64
  set qpcVBlank(value: bigint | number) {
    this.view.setBigUint64(32, BigInt(value), true);
  }

  // 0x28: u64
  set cRefresh(value: bigint | number) {
    this.view.setBigUint64(40, BigInt(value), true);
  }

  // 0x30: u32
  set cDXRefresh(value: number) {
    this.view.setUint32(48, value, true);
  }

  // 0x34: pad4

  // 0x38: u64
  set qpcCompose(value: bigint | number) {
    this.view.setBigUint64(56, BigInt(value), true);
  }

  // 0x40: u64
  set cFrame(value: bigint | number) {
    this.view.setBigUint64(64, BigInt(value), true);
  }

  // 0x48: u32
  set cDXPresent(value: number) {
    this.view.setUint32(72, value, true);
  }

  // 0x4c: pad4

  // 0x50: u64
  set cRefreshFrame(value: bigint | number) {
    this.view.setBigUint64(80, BigInt(value), true);
  }

  // 0x58: u64
  set cFrameSubmitted(value: bigint | number) {
    this.view.setBigUint64(88, BigInt(value), true);
  }

  // 0x60: u32
  set cDXPresentSubmitted(value: number) {
    this.view.setUint32(96, value, true);
  }

  // 0x64: pad4

  // 0x68: u64
  set cFrameConfirmed(value: bigint | number) {
    this.view.setBigUint64(104, BigInt(value), true);
  }

  // 0x70: u32
  set cDXPresentConfirmed(value: number) {
    this.view.setUint32(112, value, true);
  }

  // 0x74: pad4

  // 0x78: u64
  set cRefreshConfirmed(value: bigint | number) {
    this.view.setBigUint64(120, BigInt(value), true);
  }

  // 0x80: u32
  set cDXRefreshConfirmed(value: number) {
    this.view.setUint32(128, value, true);
  }

  // 0x84: pad4

  // 0x88: u64
  set cFramesLate(value: bigint | number) {
    this.view.setBigUint64(136, BigInt(value), true);
  }

  // 0x90: u32
  set cFramesOutstanding(value: number) {
    this.view.setUint32(144, value, true);
  }

  // 0x94: pad4

  // 0x98: u64
  set cFrameDisplayed(value: bigint | number) {
    this.view.setBigUint64(152, BigInt(value), true);
  }

  // 0xa0: u64
  set qpcFrameDisplayed(value: bigint | number) {
    this.view.setBigUint64(160, BigInt(value), true);
  }

  // 0xa8: u64
  set cRefreshFrameDisplayed(value: bigint | number) {
    this.view.setBigUint64(168, BigInt(value), true);
  }

  // 0xb0: u64
  set cFrameComplete(value: bigint | number) {
    this.view.setBigUint64(176, BigInt(value), true);
  }

  // 0xb8: u64
  set qpcFrameComplete(value: bigint | number) {
    this.view.setBigUint64(184, BigInt(value), true);
  }

  // 0xc0: u64
  set cFramePending(value: bigint | number) {
    this.view.setBigUint64(192, BigInt(value), true);
  }

  // 0xc8: u64
  set qpcFramePending(value: bigint | number) {
    this.view.setBigUint64(200, BigInt(value), true);
  }

  // 0xd0: u64
  set cFramesDisplayed(value: bigint | number) {
    this.view.setBigUint64(208, BigInt(value), true);
  }

  // 0xd8: u64
  set cFramesComplete(value: bigint | number) {
    this.view.setBigUint64(216, BigInt(value), true);
  }

  // 0xe0: u64
  set cFramesPending(value: bigint | number) {
    this.view.setBigUint64(224, BigInt(value), true);
  }

  // 0xe8: u64
  set cFramesAvailable(value: bigint | number) {
    this.view.setBigUint64(232, BigInt(value), true);
  }

  // 0xf0: u64
  set cFramesDropped(value: bigint | number) {
    this.view.setBigUint64(240, BigInt(value), true);
  }

  // 0xf8: u64
  set cFramesMissed(value: bigint | number) {
    this.view.setBigUint64(248, BigInt(value), true);
  }

  // 0x100: u64
  set cRefreshNextDisplayed(value: bigint | number) {
    this.view.setBigUint64(256, BigInt(value), true);
  }

  // 0x108: u64
  set cRefreshNextPresented(value: bigint | number) {
    this.view.setBigUint64(264, BigInt(value), true);
  }

  // 0x110: u64
  set cRefreshesDisplayed(value: bigint | number) {
    this.view.setBigUint64(272, BigInt(value), true);
  }

  // 0x118: u64
  set cRefreshesPresented(value: bigint | number) {
    this.view.setBigUint64(280, BigInt(value), true);
  }

  // 0x120: u64
  set cRefreshStarted(value: bigint | number) {
    this.view.setBigUint64(288, BigInt(value), true);
  }

  // 0x128: u64
  set cPixelsReceived(value: bigint | number) {
    this.view.setBigUint64(296, BigInt(value), true);
  }

  // 0x130: u64
  set cPixelsDrawn(value: bigint | number) {
    this.view.setBigUint64(304, BigInt(value), true);
  }

  // 0x138: u64
  set cBuffersEmpty(value: bigint | number) {
    this.view.setBigUint64(312, BigInt(value), true);
  }
}

/**
 * Windows.Win32.Graphics.Dwm.DWM_PRESENT_PARAMETERS (size: 40)
 */
export interface DWM_PRESENT_PARAMETERS {
  /** u32 */
  cbSize: number;
  /** Windows.Win32.Foundation.BOOL */
  fQueue: boolean;
  /** u64 */
  cRefreshStart: bigint | number;
  /** u32 */
  cBuffer: number;
  /** Windows.Win32.Foundation.BOOL */
  fUseSourceRate: boolean;
  /** Windows.Win32.Graphics.Dwm.UNSIGNED_RATIO */
  rateSource: Uint8Array | Deno.PointerValue;
  /** u32 */
  cRefreshesPerFrame: number;
  /** Windows.Win32.Graphics.Dwm.DWM_SOURCE_FRAME_SAMPLING */
  eSampling: DWM_SOURCE_FRAME_SAMPLING;
}

export const sizeofDWM_PRESENT_PARAMETERS = 40;

export function allocDWM_PRESENT_PARAMETERS(data?: Partial<DWM_PRESENT_PARAMETERS>): Uint8Array {
  const buf = new Uint8Array(sizeofDWM_PRESENT_PARAMETERS);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.cbSize !== undefined) view.setUint32(0, Number(data.cbSize), true);
  // 0x04: i32
  if (data?.fQueue !== undefined) view.setInt32(4, Number(data.fQueue), true);
  // 0x08: u64
  if (data?.cRefreshStart !== undefined) view.setBigUint64(8, BigInt(data.cRefreshStart), true);
  // 0x10: u32
  if (data?.cBuffer !== undefined) view.setUint32(16, Number(data.cBuffer), true);
  // 0x14: i32
  if (data?.fUseSourceRate !== undefined) view.setInt32(20, Number(data.fUseSourceRate), true);
  // 0x18: pointer
  if (data?.rateSource !== undefined) view.setBigUint64(24, data.rateSource === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.rateSource))), true);
  // 0x20: u32
  if (data?.cRefreshesPerFrame !== undefined) view.setUint32(32, Number(data.cRefreshesPerFrame), true);
  // 0x24: i32
  if (data?.eSampling !== undefined) view.setInt32(36, Number(data.eSampling), true);
  return buf;
}

export class DWM_PRESENT_PARAMETERSView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get cbSize(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: i32
  get fQueue(): number {
    return this.view.getInt32(4, true);
  }

  // 0x08: u64
  get cRefreshStart(): bigint | number {
    return Number(this.view.getBigUint64(8, true));
  }

  // 0x10: u32
  get cBuffer(): number {
    return this.view.getUint32(16, true);
  }

  // 0x14: i32
  get fUseSourceRate(): number {
    return this.view.getInt32(20, true);
  }

  // 0x18: pointer
  get rateSource(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(24, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x20: u32
  get cRefreshesPerFrame(): number {
    return this.view.getUint32(32, true);
  }

  // 0x24: i32
  get eSampling(): number {
    return this.view.getInt32(36, true);
  }

  // 0x00: u32
  set cbSize(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: i32
  set fQueue(value: number) {
    this.view.setInt32(4, value, true);
  }

  // 0x08: u64
  set cRefreshStart(value: bigint | number) {
    this.view.setBigUint64(8, BigInt(value), true);
  }

  // 0x10: u32
  set cBuffer(value: number) {
    this.view.setUint32(16, value, true);
  }

  // 0x14: i32
  set fUseSourceRate(value: number) {
    this.view.setInt32(20, value, true);
  }

  // 0x18: pointer
  set rateSource(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(24, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x20: u32
  set cRefreshesPerFrame(value: number) {
    this.view.setUint32(32, value, true);
  }

  // 0x24: i32
  set eSampling(value: number) {
    this.view.setInt32(36, value, true);
  }
}

/**
 * Windows.Win32.Graphics.Dwm.MilMatrix3x2D (size: 48)
 */
export interface MilMatrix3x2D {
  /** f64 */
  S_11: number;
  /** f64 */
  S_12: number;
  /** f64 */
  S_21: number;
  /** f64 */
  S_22: number;
  /** f64 */
  DX: number;
  /** f64 */
  DY: number;
}

export const sizeofMilMatrix3x2D = 48;

export function allocMilMatrix3x2D(data?: Partial<MilMatrix3x2D>): Uint8Array {
  const buf = new Uint8Array(sizeofMilMatrix3x2D);
  const view = new DataView(buf.buffer);
  // 0x00: f64
  if (data?.S_11 !== undefined) view.setFloat64(0, Number(data.S_11), true);
  // 0x08: f64
  if (data?.S_12 !== undefined) view.setFloat64(8, Number(data.S_12), true);
  // 0x10: f64
  if (data?.S_21 !== undefined) view.setFloat64(16, Number(data.S_21), true);
  // 0x18: f64
  if (data?.S_22 !== undefined) view.setFloat64(24, Number(data.S_22), true);
  // 0x20: f64
  if (data?.DX !== undefined) view.setFloat64(32, Number(data.DX), true);
  // 0x28: f64
  if (data?.DY !== undefined) view.setFloat64(40, Number(data.DY), true);
  return buf;
}

export class MilMatrix3x2DView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: f64
  get S_11(): number {
    return this.view.getFloat64(0, true);
  }

  // 0x08: f64
  get S_12(): number {
    return this.view.getFloat64(8, true);
  }

  // 0x10: f64
  get S_21(): number {
    return this.view.getFloat64(16, true);
  }

  // 0x18: f64
  get S_22(): number {
    return this.view.getFloat64(24, true);
  }

  // 0x20: f64
  get DX(): number {
    return this.view.getFloat64(32, true);
  }

  // 0x28: f64
  get DY(): number {
    return this.view.getFloat64(40, true);
  }

  // 0x00: f64
  set S_11(value: number) {
    this.view.setFloat64(0, value, true);
  }

  // 0x08: f64
  set S_12(value: number) {
    this.view.setFloat64(8, value, true);
  }

  // 0x10: f64
  set S_21(value: number) {
    this.view.setFloat64(16, value, true);
  }

  // 0x18: f64
  set S_22(value: number) {
    this.view.setFloat64(24, value, true);
  }

  // 0x20: f64
  set DX(value: number) {
    this.view.setFloat64(32, value, true);
  }

  // 0x28: f64
  set DY(value: number) {
    this.view.setFloat64(40, value, true);
  }
}

export type HWND = bigint | number;

export type WPARAM = bigint | number;

export type LPARAM = bigint | number;

export type HRESULT = number;

export type HBITMAP = bigint | number;

/**
 * Windows.Win32.Foundation.POINT (size: 8)
 */
export interface POINT {
  /** i32 */
  x: number;
  /** i32 */
  y: number;
}

export const sizeofPOINT = 8;

export function allocPOINT(data?: Partial<POINT>): Uint8Array {
  const buf = new Uint8Array(sizeofPOINT);
  const view = new DataView(buf.buffer);
  // 0x00: i32
  if (data?.x !== undefined) view.setInt32(0, Number(data.x), true);
  // 0x04: i32
  if (data?.y !== undefined) view.setInt32(4, Number(data.y), true);
  return buf;
}

export class POINTView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: i32
  get x(): number {
    return this.view.getInt32(0, true);
  }

  // 0x04: i32
  get y(): number {
    return this.view.getInt32(4, true);
  }

  // 0x00: i32
  set x(value: number) {
    this.view.setInt32(0, value, true);
  }

  // 0x04: i32
  set y(value: number) {
    this.view.setInt32(4, value, true);
  }
}

// Native Libraries

try {
  var libdwmapi_dll = Deno.dlopen("dwmapi.dll", {
    DwmDefWindowProc: {
      parameters: ["pointer", "u32", "pointer", "pointer", "pointer"],
      result: "i32",
      optional: true,
    },
    DwmEnableBlurBehindWindow: {
      parameters: ["pointer", "pointer"],
      result: "pointer",
      optional: true,
    },
    DwmEnableComposition: {
      parameters: ["u32"],
      result: "pointer",
      optional: true,
    },
    DwmEnableMMCSS: {
      parameters: ["i32"],
      result: "pointer",
      optional: true,
    },
    DwmExtendFrameIntoClientArea: {
      parameters: ["pointer", "pointer"],
      result: "pointer",
      optional: true,
    },
    DwmGetColorizationColor: {
      parameters: ["pointer", "pointer"],
      result: "pointer",
      optional: true,
    },
    DwmGetCompositionTimingInfo: {
      parameters: ["pointer", "pointer"],
      result: "pointer",
      optional: true,
    },
    DwmGetWindowAttribute: {
      parameters: ["pointer", "i32", "pointer", "u32"],
      result: "pointer",
      optional: true,
    },
    DwmIsCompositionEnabled: {
      parameters: ["pointer"],
      result: "pointer",
      optional: true,
    },
    DwmModifyPreviousDxFrameDuration: {
      parameters: ["pointer", "i32", "i32"],
      result: "pointer",
      optional: true,
    },
    DwmQueryThumbnailSourceSize: {
      parameters: ["isize", "pointer"],
      result: "pointer",
      optional: true,
    },
    DwmRegisterThumbnail: {
      parameters: ["pointer", "pointer", "pointer"],
      result: "pointer",
      optional: true,
    },
    DwmSetDxFrameDuration: {
      parameters: ["pointer", "i32"],
      result: "pointer",
      optional: true,
    },
    DwmSetPresentParameters: {
      parameters: ["pointer", "pointer"],
      result: "pointer",
      optional: true,
    },
    DwmSetWindowAttribute: {
      parameters: ["pointer", "i32", "pointer", "u32"],
      result: "pointer",
      optional: true,
    },
    DwmUnregisterThumbnail: {
      parameters: ["isize"],
      result: "pointer",
      optional: true,
    },
    DwmUpdateThumbnailProperties: {
      parameters: ["isize", "pointer"],
      result: "pointer",
      optional: true,
    },
    DwmSetIconicThumbnail: {
      parameters: ["pointer", "pointer", "u32"],
      result: "pointer",
      optional: true,
    },
    DwmSetIconicLivePreviewBitmap: {
      parameters: ["pointer", "pointer", "pointer", "u32"],
      result: "pointer",
      optional: true,
    },
    DwmInvalidateIconicBitmaps: {
      parameters: ["pointer"],
      result: "pointer",
      optional: true,
    },
    DwmAttachMilContent: {
      parameters: ["pointer"],
      result: "pointer",
      optional: true,
    },
    DwmDetachMilContent: {
      parameters: ["pointer"],
      result: "pointer",
      optional: true,
    },
    DwmFlush: {
      parameters: [],
      result: "pointer",
      optional: true,
    },
    DwmGetGraphicsStreamTransformHint: {
      parameters: ["u32", "pointer"],
      result: "pointer",
      optional: true,
    },
    DwmGetGraphicsStreamClient: {
      parameters: ["u32", "pointer"],
      result: "pointer",
      optional: true,
    },
    DwmGetTransportAttributes: {
      parameters: ["pointer", "pointer", "pointer"],
      result: "pointer",
      optional: true,
    },
    DwmTransitionOwnedWindow: {
      parameters: ["pointer", "i32"],
      result: "pointer",
      optional: true,
    },
    DwmRenderGesture: {
      parameters: ["i32", "u32", "pointer", "pointer"],
      result: "pointer",
      optional: true,
    },
    DwmTetherContact: {
      parameters: ["u32", "i32", "pointer"],
      result: "pointer",
      optional: true,
    },
    DwmShowContact: {
      parameters: ["u32", "u32"],
      result: "pointer",
      optional: true,
    },
    DwmGetUnmetTabRequirements: {
      parameters: ["pointer", "pointer"],
      result: "pointer",
      optional: true,
    },
  }).symbols;
} catch(e) { /* ignore */ }

// Symbols

export function DwmDefWindowProc(
  hWnd: Deno.PointerValue /* Windows.Win32.Foundation.HWND */,
  msg: number /* u32 */,
  wParam: Uint8Array | Deno.PointerValue /* Windows.Win32.Foundation.WPARAM */,
  lParam: Uint8Array | Deno.PointerValue /* Windows.Win32.Foundation.LPARAM */,
  plResult: Deno.PointerValue | Uint8Array /* ptr */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libdwmapi_dll.DwmDefWindowProc!((hWnd), msg, util.toPointer(wParam), util.toPointer(lParam), util.toPointer(plResult)));
}

export function DwmEnableBlurBehindWindow(
  hWnd: Deno.PointerValue /* Windows.Win32.Foundation.HWND */,
  pBlurBehind: Deno.PointerValue | Uint8Array /* ptr */,
): Deno.PointerValue /* Windows.Win32.Foundation.HRESULT */ {
  return libdwmapi_dll.DwmEnableBlurBehindWindow!((hWnd), util.toPointer(pBlurBehind));
}

export function DwmEnableComposition(
  uCompositionAction: number /* u32 */,
): Deno.PointerValue /* Windows.Win32.Foundation.HRESULT */ {
  return libdwmapi_dll.DwmEnableComposition!(uCompositionAction);
}

export function DwmEnableMMCSS(
  fEnableMMCSS: boolean /* Windows.Win32.Foundation.BOOL */,
): Deno.PointerValue /* Windows.Win32.Foundation.HRESULT */ {
  return libdwmapi_dll.DwmEnableMMCSS!(util.boolToFfi(fEnableMMCSS));
}

export function DwmExtendFrameIntoClientArea(
  hWnd: Deno.PointerValue /* Windows.Win32.Foundation.HWND */,
  pMarInset: Deno.PointerValue | Uint8Array /* ptr */,
): Deno.PointerValue /* Windows.Win32.Foundation.HRESULT */ {
  return libdwmapi_dll.DwmExtendFrameIntoClientArea!((hWnd), util.toPointer(pMarInset));
}

export function DwmGetColorizationColor(
  pcrColorization: Deno.PointerValue | Uint8Array /* ptr */,
  pfOpaqueBlend: Deno.PointerValue | Uint8Array /* ptr */,
): Deno.PointerValue /* Windows.Win32.Foundation.HRESULT */ {
  return libdwmapi_dll.DwmGetColorizationColor!(util.toPointer(pcrColorization), util.toPointer(pfOpaqueBlend));
}

export function DwmGetCompositionTimingInfo(
  hwnd: Deno.PointerValue /* Windows.Win32.Foundation.HWND */,
  pTimingInfo: Deno.PointerValue | Uint8Array /* ptr */,
): Deno.PointerValue /* Windows.Win32.Foundation.HRESULT */ {
  return libdwmapi_dll.DwmGetCompositionTimingInfo!((hwnd), util.toPointer(pTimingInfo));
}

export function DwmGetWindowAttribute(
  hwnd: Deno.PointerValue /* Windows.Win32.Foundation.HWND */,
  dwAttribute: DWMWINDOWATTRIBUTE /* Windows.Win32.Graphics.Dwm.DWMWINDOWATTRIBUTE */,
  pvAttribute: Deno.PointerValue | Uint8Array /* ptr */,
  cbAttribute: number /* u32 */,
): Deno.PointerValue /* Windows.Win32.Foundation.HRESULT */ {
  return libdwmapi_dll.DwmGetWindowAttribute!((hwnd), dwAttribute, util.toPointer(pvAttribute), cbAttribute);
}

export function DwmIsCompositionEnabled(
  pfEnabled: Deno.PointerValue | Uint8Array /* ptr */,
): Deno.PointerValue /* Windows.Win32.Foundation.HRESULT */ {
  return libdwmapi_dll.DwmIsCompositionEnabled!(util.toPointer(pfEnabled));
}

export function DwmModifyPreviousDxFrameDuration(
  hwnd: Deno.PointerValue /* Windows.Win32.Foundation.HWND */,
  cRefreshes: number /* i32 */,
  fRelative: boolean /* Windows.Win32.Foundation.BOOL */,
): Deno.PointerValue /* Windows.Win32.Foundation.HRESULT */ {
  return libdwmapi_dll.DwmModifyPreviousDxFrameDuration!((hwnd), cRefreshes, util.boolToFfi(fRelative));
}

export function DwmQueryThumbnailSourceSize(
  hThumbnail: bigint | number /* isize */,
  pSize: Deno.PointerValue | Uint8Array /* ptr */,
): Deno.PointerValue /* Windows.Win32.Foundation.HRESULT */ {
  return libdwmapi_dll.DwmQueryThumbnailSourceSize!(hThumbnail, util.toPointer(pSize));
}

export function DwmRegisterThumbnail(
  hwndDestination: Deno.PointerValue /* Windows.Win32.Foundation.HWND */,
  hwndSource: Deno.PointerValue /* Windows.Win32.Foundation.HWND */,
  phThumbnailId: Deno.PointerValue | Uint8Array /* ptr */,
): Deno.PointerValue /* Windows.Win32.Foundation.HRESULT */ {
  return libdwmapi_dll.DwmRegisterThumbnail!((hwndDestination), (hwndSource), util.toPointer(phThumbnailId));
}

export function DwmSetDxFrameDuration(
  hwnd: Deno.PointerValue /* Windows.Win32.Foundation.HWND */,
  cRefreshes: number /* i32 */,
): Deno.PointerValue /* Windows.Win32.Foundation.HRESULT */ {
  return libdwmapi_dll.DwmSetDxFrameDuration!((hwnd), cRefreshes);
}

export function DwmSetPresentParameters(
  hwnd: Deno.PointerValue /* Windows.Win32.Foundation.HWND */,
  pPresentParams: Deno.PointerValue | Uint8Array /* ptr */,
): Deno.PointerValue /* Windows.Win32.Foundation.HRESULT */ {
  return libdwmapi_dll.DwmSetPresentParameters!((hwnd), util.toPointer(pPresentParams));
}

export function DwmSetWindowAttribute(
  hwnd: Deno.PointerValue /* Windows.Win32.Foundation.HWND */,
  dwAttribute: DWMWINDOWATTRIBUTE /* Windows.Win32.Graphics.Dwm.DWMWINDOWATTRIBUTE */,
  pvAttribute: Deno.PointerValue | Uint8Array /* ptr */,
  cbAttribute: number /* u32 */,
): Deno.PointerValue /* Windows.Win32.Foundation.HRESULT */ {
  return libdwmapi_dll.DwmSetWindowAttribute!((hwnd), dwAttribute, util.toPointer(pvAttribute), cbAttribute);
}

export function DwmUnregisterThumbnail(
  hThumbnailId: bigint | number /* isize */,
): Deno.PointerValue /* Windows.Win32.Foundation.HRESULT */ {
  return libdwmapi_dll.DwmUnregisterThumbnail!(hThumbnailId);
}

export function DwmUpdateThumbnailProperties(
  hThumbnailId: bigint | number /* isize */,
  ptnProperties: Deno.PointerValue | Uint8Array /* ptr */,
): Deno.PointerValue /* Windows.Win32.Foundation.HRESULT */ {
  return libdwmapi_dll.DwmUpdateThumbnailProperties!(hThumbnailId, util.toPointer(ptnProperties));
}

export function DwmSetIconicThumbnail(
  hwnd: Deno.PointerValue /* Windows.Win32.Foundation.HWND */,
  hbmp: Uint8Array | Deno.PointerValue /* Windows.Win32.Graphics.Gdi.HBITMAP */,
  dwSITFlags: number /* u32 */,
): Deno.PointerValue /* Windows.Win32.Foundation.HRESULT */ {
  return libdwmapi_dll.DwmSetIconicThumbnail!((hwnd), util.toPointer(hbmp), dwSITFlags);
}

export function DwmSetIconicLivePreviewBitmap(
  hwnd: Deno.PointerValue /* Windows.Win32.Foundation.HWND */,
  hbmp: Uint8Array | Deno.PointerValue /* Windows.Win32.Graphics.Gdi.HBITMAP */,
  pptClient: Deno.PointerValue | Uint8Array /* ptr */,
  dwSITFlags: number /* u32 */,
): Deno.PointerValue /* Windows.Win32.Foundation.HRESULT */ {
  return libdwmapi_dll.DwmSetIconicLivePreviewBitmap!((hwnd), util.toPointer(hbmp), util.toPointer(pptClient), dwSITFlags);
}

export function DwmInvalidateIconicBitmaps(
  hwnd: Deno.PointerValue /* Windows.Win32.Foundation.HWND */,
): Deno.PointerValue /* Windows.Win32.Foundation.HRESULT */ {
  return libdwmapi_dll.DwmInvalidateIconicBitmaps!((hwnd));
}

export function DwmAttachMilContent(
  hwnd: Deno.PointerValue /* Windows.Win32.Foundation.HWND */,
): Deno.PointerValue /* Windows.Win32.Foundation.HRESULT */ {
  return libdwmapi_dll.DwmAttachMilContent!((hwnd));
}

export function DwmDetachMilContent(
  hwnd: Deno.PointerValue /* Windows.Win32.Foundation.HWND */,
): Deno.PointerValue /* Windows.Win32.Foundation.HRESULT */ {
  return libdwmapi_dll.DwmDetachMilContent!((hwnd));
}

export function DwmFlush(): Deno.PointerValue /* Windows.Win32.Foundation.HRESULT */ {
  return libdwmapi_dll.DwmFlush!();
}

export function DwmGetGraphicsStreamTransformHint(
  uIndex: number /* u32 */,
  pTransform: Deno.PointerValue | Uint8Array /* ptr */,
): Deno.PointerValue /* Windows.Win32.Foundation.HRESULT */ {
  return libdwmapi_dll.DwmGetGraphicsStreamTransformHint!(uIndex, util.toPointer(pTransform));
}

export function DwmGetGraphicsStreamClient(
  uIndex: number /* u32 */,
  pClientUuid: Deno.PointerValue | Uint8Array /* ptr */,
): Deno.PointerValue /* Windows.Win32.Foundation.HRESULT */ {
  return libdwmapi_dll.DwmGetGraphicsStreamClient!(uIndex, util.toPointer(pClientUuid));
}

export function DwmGetTransportAttributes(
  pfIsRemoting: Deno.PointerValue | Uint8Array /* ptr */,
  pfIsConnected: Deno.PointerValue | Uint8Array /* ptr */,
  pDwGeneration: Deno.PointerValue | Uint8Array /* ptr */,
): Deno.PointerValue /* Windows.Win32.Foundation.HRESULT */ {
  return libdwmapi_dll.DwmGetTransportAttributes!(util.toPointer(pfIsRemoting), util.toPointer(pfIsConnected), util.toPointer(pDwGeneration));
}

export function DwmTransitionOwnedWindow(
  hwnd: Deno.PointerValue /* Windows.Win32.Foundation.HWND */,
  target: DWMTRANSITION_OWNEDWINDOW_TARGET /* Windows.Win32.Graphics.Dwm.DWMTRANSITION_OWNEDWINDOW_TARGET */,
): Deno.PointerValue /* Windows.Win32.Foundation.HRESULT */ {
  return libdwmapi_dll.DwmTransitionOwnedWindow!((hwnd), target);
}

export function DwmRenderGesture(
  gt: GESTURE_TYPE /* Windows.Win32.Graphics.Dwm.GESTURE_TYPE */,
  cContacts: number /* u32 */,
  pdwPointerID: Deno.PointerValue | Uint8Array /* ptr */,
  pPoints: Deno.PointerValue | Uint8Array /* ptr */,
): Deno.PointerValue /* Windows.Win32.Foundation.HRESULT */ {
  return libdwmapi_dll.DwmRenderGesture!(gt, cContacts, util.toPointer(pdwPointerID), util.toPointer(pPoints));
}

export function DwmTetherContact(
  dwPointerID: number /* u32 */,
  fEnable: boolean /* Windows.Win32.Foundation.BOOL */,
  ptTether: Uint8Array | Deno.PointerValue /* Windows.Win32.Foundation.POINT */,
): Deno.PointerValue /* Windows.Win32.Foundation.HRESULT */ {
  return libdwmapi_dll.DwmTetherContact!(dwPointerID, util.boolToFfi(fEnable), util.toPointer(ptTether));
}

export function DwmShowContact(
  dwPointerID: number /* u32 */,
  eShowContact: DWM_SHOWCONTACT /* Windows.Win32.Graphics.Dwm.DWM_SHOWCONTACT */,
): Deno.PointerValue /* Windows.Win32.Foundation.HRESULT */ {
  return libdwmapi_dll.DwmShowContact!(dwPointerID, eShowContact);
}

export function DwmGetUnmetTabRequirements(
  appWindow: Deno.PointerValue /* Windows.Win32.Foundation.HWND */,
  value: Deno.PointerValue | Uint8Array /* ptr */,
): Deno.PointerValue /* Windows.Win32.Foundation.HRESULT */ {
  return libdwmapi_dll.DwmGetUnmetTabRequirements!((appWindow), util.toPointer(value));
}

