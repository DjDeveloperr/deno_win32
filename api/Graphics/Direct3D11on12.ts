/// Auto-generated by Deno Win32: Windows.Win32.Graphics.Direct3D11on12.Apis

import * as util from "../../util.ts";

// Structs

/**
 * Windows.Win32.Graphics.Direct3D11on12.D3D11_RESOURCE_FLAGS (size: 16)
 */
export interface D3D11_RESOURCE_FLAGS {
  /** u32 */
  BindFlags: number;
  /** u32 */
  MiscFlags: number;
  /** u32 */
  CPUAccessFlags: number;
  /** u32 */
  StructureByteStride: number;
}

export const sizeofD3D11_RESOURCE_FLAGS = 16;

export function allocD3D11_RESOURCE_FLAGS(data?: Partial<D3D11_RESOURCE_FLAGS>): Uint8Array {
  const buf = new Uint8Array(sizeofD3D11_RESOURCE_FLAGS);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.BindFlags !== undefined) view.setUint32(0, Number(data.BindFlags), true);
  // 0x04: u32
  if (data?.MiscFlags !== undefined) view.setUint32(4, Number(data.MiscFlags), true);
  // 0x08: u32
  if (data?.CPUAccessFlags !== undefined) view.setUint32(8, Number(data.CPUAccessFlags), true);
  // 0x0c: u32
  if (data?.StructureByteStride !== undefined) view.setUint32(12, Number(data.StructureByteStride), true);
  return buf;
}

export class D3D11_RESOURCE_FLAGSView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get BindFlags(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: u32
  get MiscFlags(): number {
    return this.view.getUint32(4, true);
  }

  // 0x08: u32
  get CPUAccessFlags(): number {
    return this.view.getUint32(8, true);
  }

  // 0x0c: u32
  get StructureByteStride(): number {
    return this.view.getUint32(12, true);
  }

  // 0x00: u32
  set BindFlags(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: u32
  set MiscFlags(value: number) {
    this.view.setUint32(4, value, true);
  }

  // 0x08: u32
  set CPUAccessFlags(value: number) {
    this.view.setUint32(8, value, true);
  }

  // 0x0c: u32
  set StructureByteStride(value: number) {
    this.view.setUint32(12, value, true);
  }
}

export type HRESULT = number;

// Native Libraries

try {
  var libd3d11_dll = Deno.dlopen("d3d11.dll", {
    D3D11On12CreateDevice: {
      parameters: ["pointer", "u32", "pointer", "u32", "pointer", "u32", "u32", "pointer", "pointer", "pointer"],
      result: "pointer",
    },
  }).symbols;
} catch(e) { /* ignore */ }

// Symbols

export function D3D11On12CreateDevice(
  pDevice: Uint8Array | Deno.PointerValue /* Windows.Win32.System.Com.IUnknown */,
  Flags: number /* u32 */,
  pFeatureLevels: Deno.PointerValue | Uint8Array /* ptr */,
  FeatureLevels: number /* u32 */,
  ppCommandQueues: Deno.PointerValue | Uint8Array /* ptr */,
  NumQueues: number /* u32 */,
  NodeMask: number /* u32 */,
  ppDevice: Deno.PointerValue | Uint8Array /* ptr */,
  ppImmediateContext: Deno.PointerValue | Uint8Array /* ptr */,
  pChosenFeatureLevel: Deno.PointerValue | Uint8Array /* ptr */,
): Deno.PointerValue /* Windows.Win32.Foundation.HRESULT */ {
  return libd3d11_dll.D3D11On12CreateDevice(util.toPointer(pDevice), Flags, util.toPointer(pFeatureLevels), FeatureLevels, util.toPointer(ppCommandQueues), NumQueues, NodeMask, util.toPointer(ppDevice), util.toPointer(ppImmediateContext), util.toPointer(pChosenFeatureLevel));
}

