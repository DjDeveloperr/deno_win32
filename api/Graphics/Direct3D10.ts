/// Auto-generated by Deno Win32: Windows.Win32.Graphics.Direct3D10.Apis

import * as util from "../../util.ts";

// Enums
export type D3D10_INPUT_CLASSIFICATION = number;
export type DXGI_FORMAT = number;
export type D3D10_FILL_MODE = number;
export type D3D10_CULL_MODE = number;
export type D3D10_RESOURCE_DIMENSION = number;
export type D3D10_DSV_DIMENSION = number;
export type D3D10_RTV_DIMENSION = number;
export type D3D10_USAGE = number;
export type D3D10_BIND_FLAG = number;
export type D3D10_CPU_ACCESS_FLAG = number;
export type D3D10_RESOURCE_MISC_FLAG = number;
export type D3D10_MAP = number;
export type D3D10_MAP_FLAG = number;
export type D3D10_RAISE_FLAG = number;
export type D3D10_CLEAR_FLAG = number;
export type D3D10_COMPARISON_FUNC = number;
export type D3D10_DEPTH_WRITE_MASK = number;
export type D3D10_STENCIL_OP = number;
export type D3D10_BLEND = number;
export type D3D10_BLEND_OP = number;
export type D3D10_COLOR_WRITE_ENABLE = number;
export type D3D10_TEXTURECUBE_FACE = number;
export type D3D_SRV_DIMENSION = number;
export type D3D10_FILTER = number;
export type D3D10_FILTER_TYPE = number;
export type D3D10_TEXTURE_ADDRESS_MODE = number;
export type D3D10_FORMAT_SUPPORT = number;
export type D3D10_ASYNC_GETDATA_FLAG = number;
export type D3D10_QUERY = number;
export type D3D10_QUERY_MISC_FLAG = number;
export type D3D10_COUNTER = number;
export type D3D10_COUNTER_TYPE = number;
export type D3D10_CREATE_DEVICE_FLAG = number;
export type D3D10_MESSAGE_CATEGORY = number;
export type D3D10_MESSAGE_SEVERITY = number;
export type D3D10_MESSAGE_ID = number;
export type D3D10_DRIVER_TYPE = number;
export type D3D_PRIMITIVE_TOPOLOGY = number;
export type D3D_CBUFFER_TYPE = number;
export type D3D_SHADER_VARIABLE_CLASS = number;
export type D3D_SHADER_VARIABLE_TYPE = number;
export type D3D_SHADER_INPUT_TYPE = number;
export type D3D_RESOURCE_RETURN_TYPE = number;
export type D3D_NAME = number;
export type D3D_REGISTER_COMPONENT_TYPE = number;
export type D3D10_DEVICE_STATE_TYPES = number;
export type D3D10_FEATURE_LEVEL1 = number;
export type D3D10_STANDARD_MULTISAMPLE_QUALITY_LEVELS = number;
export type D3D10_SHADER_DEBUG_REGTYPE = number;
export type D3D10_SHADER_DEBUG_SCOPETYPE = number;
export type D3D10_SHADER_DEBUG_VARTYPE = number;

// Constants
export const D3D10_16BIT_INDEX_STRIP_CUT_VALUE = 65535;
export const D3D10_32BIT_INDEX_STRIP_CUT_VALUE = 4294967295;
export const D3D10_8BIT_INDEX_STRIP_CUT_VALUE = 255;
export const D3D10_ARRAY_AXIS_ADDRESS_RANGE_BIT_COUNT = 9;
export const D3D10_CLIP_OR_CULL_DISTANCE_COUNT = 8;
export const D3D10_CLIP_OR_CULL_DISTANCE_ELEMENT_COUNT = 2;
export const D3D10_COMMONSHADER_CONSTANT_BUFFER_API_SLOT_COUNT = 14;
export const D3D10_COMMONSHADER_CONSTANT_BUFFER_COMPONENTS = 4;
export const D3D10_COMMONSHADER_CONSTANT_BUFFER_COMPONENT_BIT_COUNT = 32;
export const D3D10_COMMONSHADER_CONSTANT_BUFFER_HW_SLOT_COUNT = 15;
export const D3D10_COMMONSHADER_CONSTANT_BUFFER_REGISTER_COMPONENTS = 4;
export const D3D10_COMMONSHADER_CONSTANT_BUFFER_REGISTER_COUNT = 15;
export const D3D10_COMMONSHADER_CONSTANT_BUFFER_REGISTER_READS_PER_INST = 1;
export const D3D10_COMMONSHADER_CONSTANT_BUFFER_REGISTER_READ_PORTS = 1;
export const D3D10_COMMONSHADER_FLOWCONTROL_NESTING_LIMIT = 64;
export const D3D10_COMMONSHADER_IMMEDIATE_CONSTANT_BUFFER_REGISTER_COMPONENTS = 4;
export const D3D10_COMMONSHADER_IMMEDIATE_CONSTANT_BUFFER_REGISTER_COUNT = 1;
export const D3D10_COMMONSHADER_IMMEDIATE_CONSTANT_BUFFER_REGISTER_READS_PER_INST = 1;
export const D3D10_COMMONSHADER_IMMEDIATE_CONSTANT_BUFFER_REGISTER_READ_PORTS = 1;
export const D3D10_COMMONSHADER_IMMEDIATE_VALUE_COMPONENT_BIT_COUNT = 32;
export const D3D10_COMMONSHADER_INPUT_RESOURCE_REGISTER_COMPONENTS = 1;
export const D3D10_COMMONSHADER_INPUT_RESOURCE_REGISTER_COUNT = 128;
export const D3D10_COMMONSHADER_INPUT_RESOURCE_REGISTER_READS_PER_INST = 1;
export const D3D10_COMMONSHADER_INPUT_RESOURCE_REGISTER_READ_PORTS = 1;
export const D3D10_COMMONSHADER_INPUT_RESOURCE_SLOT_COUNT = 128;
export const D3D10_COMMONSHADER_SAMPLER_REGISTER_COMPONENTS = 1;
export const D3D10_COMMONSHADER_SAMPLER_REGISTER_COUNT = 16;
export const D3D10_COMMONSHADER_SAMPLER_REGISTER_READS_PER_INST = 1;
export const D3D10_COMMONSHADER_SAMPLER_REGISTER_READ_PORTS = 1;
export const D3D10_COMMONSHADER_SAMPLER_SLOT_COUNT = 16;
export const D3D10_COMMONSHADER_SUBROUTINE_NESTING_LIMIT = 32;
export const D3D10_COMMONSHADER_TEMP_REGISTER_COMPONENTS = 4;
export const D3D10_COMMONSHADER_TEMP_REGISTER_COMPONENT_BIT_COUNT = 32;
export const D3D10_COMMONSHADER_TEMP_REGISTER_COUNT = 4096;
export const D3D10_COMMONSHADER_TEMP_REGISTER_READS_PER_INST = 3;
export const D3D10_COMMONSHADER_TEMP_REGISTER_READ_PORTS = 3;
export const D3D10_COMMONSHADER_TEXCOORD_RANGE_REDUCTION_MAX = 10;
export const D3D10_COMMONSHADER_TEXCOORD_RANGE_REDUCTION_MIN = "-10";
export const D3D10_COMMONSHADER_TEXEL_OFFSET_MAX_NEGATIVE = "-8";
export const D3D10_COMMONSHADER_TEXEL_OFFSET_MAX_POSITIVE = 7;
export const D3D10_DEFAULT_BLEND_FACTOR_ALPHA = 1;
export const D3D10_DEFAULT_BLEND_FACTOR_BLUE = 1;
export const D3D10_DEFAULT_BLEND_FACTOR_GREEN = 1;
export const D3D10_DEFAULT_BLEND_FACTOR_RED = 1;
export const D3D10_DEFAULT_BORDER_COLOR_COMPONENT = 0;
export const D3D10_DEFAULT_DEPTH_BIAS = 0;
export const D3D10_DEFAULT_DEPTH_BIAS_CLAMP = 0;
export const D3D10_DEFAULT_MAX_ANISOTROPY = 16;
export const D3D10_DEFAULT_MIP_LOD_BIAS = 0;
export const D3D10_DEFAULT_RENDER_TARGET_ARRAY_INDEX = 0;
export const D3D10_DEFAULT_SAMPLE_MASK = 4294967295;
export const D3D10_DEFAULT_SCISSOR_ENDX = 0;
export const D3D10_DEFAULT_SCISSOR_ENDY = 0;
export const D3D10_DEFAULT_SCISSOR_STARTX = 0;
export const D3D10_DEFAULT_SCISSOR_STARTY = 0;
export const D3D10_DEFAULT_SLOPE_SCALED_DEPTH_BIAS = 0;
export const D3D10_DEFAULT_STENCIL_READ_MASK = 255;
export const D3D10_DEFAULT_STENCIL_REFERENCE = 0;
export const D3D10_DEFAULT_STENCIL_WRITE_MASK = 255;
export const D3D10_DEFAULT_VIEWPORT_AND_SCISSORRECT_INDEX = 0;
export const D3D10_DEFAULT_VIEWPORT_HEIGHT = 0;
export const D3D10_DEFAULT_VIEWPORT_MAX_DEPTH = 0;
export const D3D10_DEFAULT_VIEWPORT_MIN_DEPTH = 0;
export const D3D10_DEFAULT_VIEWPORT_TOPLEFTX = 0;
export const D3D10_DEFAULT_VIEWPORT_TOPLEFTY = 0;
export const D3D10_DEFAULT_VIEWPORT_WIDTH = 0;
export const D3D10_FLOAT16_FUSED_TOLERANCE_IN_ULP = "0.6";
export const D3D10_FLOAT32_MAX = "3.4028234663852886e+38";
export const D3D10_FLOAT32_TO_INTEGER_TOLERANCE_IN_ULP = "0.6000000238418579";
export const D3D10_FLOAT_TO_SRGB_EXPONENT_DENOMINATOR = "2.4000000953674316";
export const D3D10_FLOAT_TO_SRGB_EXPONENT_NUMERATOR = 1;
export const D3D10_FLOAT_TO_SRGB_OFFSET = "0.054999999701976776";
export const D3D10_FLOAT_TO_SRGB_SCALE_1 = "12.920000076293945";
export const D3D10_FLOAT_TO_SRGB_SCALE_2 = "1.0549999475479126";
export const D3D10_FLOAT_TO_SRGB_THRESHOLD = "0.0031308000907301903";
export const D3D10_FTOI_INSTRUCTION_MAX_INPUT = 2147483648;
export const D3D10_FTOI_INSTRUCTION_MIN_INPUT = "-2147483648";
export const D3D10_FTOU_INSTRUCTION_MAX_INPUT = 4294967296;
export const D3D10_FTOU_INSTRUCTION_MIN_INPUT = 0;
export const D3D10_GS_INPUT_PRIM_CONST_REGISTER_COMPONENTS = 1;
export const D3D10_GS_INPUT_PRIM_CONST_REGISTER_COMPONENT_BIT_COUNT = 32;
export const D3D10_GS_INPUT_PRIM_CONST_REGISTER_COUNT = 1;
export const D3D10_GS_INPUT_PRIM_CONST_REGISTER_READS_PER_INST = 2;
export const D3D10_GS_INPUT_PRIM_CONST_REGISTER_READ_PORTS = 1;
export const D3D10_GS_INPUT_REGISTER_COMPONENTS = 4;
export const D3D10_GS_INPUT_REGISTER_COMPONENT_BIT_COUNT = 32;
export const D3D10_GS_INPUT_REGISTER_COUNT = 16;
export const D3D10_GS_INPUT_REGISTER_READS_PER_INST = 2;
export const D3D10_GS_INPUT_REGISTER_READ_PORTS = 1;
export const D3D10_GS_INPUT_REGISTER_VERTICES = 6;
export const D3D10_GS_OUTPUT_ELEMENTS = 32;
export const D3D10_GS_OUTPUT_REGISTER_COMPONENTS = 4;
export const D3D10_GS_OUTPUT_REGISTER_COMPONENT_BIT_COUNT = 32;
export const D3D10_GS_OUTPUT_REGISTER_COUNT = 32;
export const D3D10_IA_DEFAULT_INDEX_BUFFER_OFFSET_IN_BYTES = 0;
export const D3D10_IA_DEFAULT_PRIMITIVE_TOPOLOGY = 0;
export const D3D10_IA_DEFAULT_VERTEX_BUFFER_OFFSET_IN_BYTES = 0;
export const D3D10_IA_INDEX_INPUT_RESOURCE_SLOT_COUNT = 1;
export const D3D10_IA_INSTANCE_ID_BIT_COUNT = 32;
export const D3D10_IA_INTEGER_ARITHMETIC_BIT_COUNT = 32;
export const D3D10_IA_PRIMITIVE_ID_BIT_COUNT = 32;
export const D3D10_IA_VERTEX_ID_BIT_COUNT = 32;
export const D3D10_IA_VERTEX_INPUT_RESOURCE_SLOT_COUNT = 16;
export const D3D10_IA_VERTEX_INPUT_STRUCTURE_ELEMENTS_COMPONENTS = 64;
export const D3D10_IA_VERTEX_INPUT_STRUCTURE_ELEMENT_COUNT = 16;
export const D3D10_INTEGER_DIVIDE_BY_ZERO_QUOTIENT = 4294967295;
export const D3D10_INTEGER_DIVIDE_BY_ZERO_REMAINDER = 4294967295;
export const D3D10_LINEAR_GAMMA = 1;
export const D3D10_MAX_BORDER_COLOR_COMPONENT = 1;
export const D3D10_MAX_DEPTH = 1;
export const D3D10_MAX_MAXANISOTROPY = 16;
export const D3D10_MAX_MULTISAMPLE_SAMPLE_COUNT = 32;
export const D3D10_MAX_POSITION_VALUE = "3.4028235832468283e+34";
export const D3D10_MAX_TEXTURE_DIMENSION_2_TO_EXP = 17;
export const D3D10_MIN_BORDER_COLOR_COMPONENT = 0;
export const D3D10_MIN_DEPTH = 0;
export const D3D10_MIN_MAXANISOTROPY = 0;
export const D3D10_MIP_LOD_BIAS_MAX = "15.989999771118164";
export const D3D10_MIP_LOD_BIAS_MIN = "-16";
export const D3D10_MIP_LOD_FRACTIONAL_BIT_COUNT = 6;
export const D3D10_MIP_LOD_RANGE_BIT_COUNT = 8;
export const D3D10_MULTISAMPLE_ANTIALIAS_LINE_WIDTH = "1.399999976158142";
export const D3D10_NONSAMPLE_FETCH_OUT_OF_RANGE_ACCESS_RESULT = 0;
export const D3D10_PIXEL_ADDRESS_RANGE_BIT_COUNT = 13;
export const D3D10_PRE_SCISSOR_PIXEL_ADDRESS_RANGE_BIT_COUNT = 15;
export const D3D10_PS_FRONTFACING_DEFAULT_VALUE = 4294967295;
export const D3D10_PS_FRONTFACING_FALSE_VALUE = 0;
export const D3D10_PS_FRONTFACING_TRUE_VALUE = 4294967295;
export const D3D10_PS_INPUT_REGISTER_COMPONENTS = 4;
export const D3D10_PS_INPUT_REGISTER_COMPONENT_BIT_COUNT = 32;
export const D3D10_PS_INPUT_REGISTER_COUNT = 32;
export const D3D10_PS_INPUT_REGISTER_READS_PER_INST = 2;
export const D3D10_PS_INPUT_REGISTER_READ_PORTS = 1;
export const D3D10_PS_LEGACY_PIXEL_CENTER_FRACTIONAL_COMPONENT = 0;
export const D3D10_PS_OUTPUT_DEPTH_REGISTER_COMPONENTS = 1;
export const D3D10_PS_OUTPUT_DEPTH_REGISTER_COMPONENT_BIT_COUNT = 32;
export const D3D10_PS_OUTPUT_DEPTH_REGISTER_COUNT = 1;
export const D3D10_PS_OUTPUT_REGISTER_COMPONENTS = 4;
export const D3D10_PS_OUTPUT_REGISTER_COMPONENT_BIT_COUNT = 32;
export const D3D10_PS_OUTPUT_REGISTER_COUNT = 8;
export const D3D10_PS_PIXEL_CENTER_FRACTIONAL_COMPONENT = "0.5";
export const D3D10_REQ_BLEND_OBJECT_COUNT_PER_CONTEXT = 4096;
export const D3D10_REQ_BUFFER_RESOURCE_TEXEL_COUNT_2_TO_EXP = 27;
export const D3D10_REQ_CONSTANT_BUFFER_ELEMENT_COUNT = 4096;
export const D3D10_REQ_DEPTH_STENCIL_OBJECT_COUNT_PER_CONTEXT = 4096;
export const D3D10_REQ_DRAWINDEXED_INDEX_COUNT_2_TO_EXP = 32;
export const D3D10_REQ_DRAW_VERTEX_COUNT_2_TO_EXP = 32;
export const D3D10_REQ_FILTERING_HW_ADDRESSABLE_RESOURCE_DIMENSION = 8192;
export const D3D10_REQ_GS_INVOCATION_32BIT_OUTPUT_COMPONENT_LIMIT = 1024;
export const D3D10_REQ_IMMEDIATE_CONSTANT_BUFFER_ELEMENT_COUNT = 4096;
export const D3D10_REQ_MAXANISOTROPY = 16;
export const D3D10_REQ_MIP_LEVELS = 14;
export const D3D10_REQ_MULTI_ELEMENT_STRUCTURE_SIZE_IN_BYTES = 2048;
export const D3D10_REQ_RASTERIZER_OBJECT_COUNT_PER_CONTEXT = 4096;
export const D3D10_REQ_RENDER_TO_BUFFER_WINDOW_WIDTH = 8192;
export const D3D10_REQ_RESOURCE_SIZE_IN_MEGABYTES = 128;
export const D3D10_REQ_RESOURCE_VIEW_COUNT_PER_CONTEXT_2_TO_EXP = 20;
export const D3D10_REQ_SAMPLER_OBJECT_COUNT_PER_CONTEXT = 4096;
export const D3D10_REQ_TEXTURE1D_ARRAY_AXIS_DIMENSION = 512;
export const D3D10_REQ_TEXTURE1D_U_DIMENSION = 8192;
export const D3D10_REQ_TEXTURE2D_ARRAY_AXIS_DIMENSION = 512;
export const D3D10_REQ_TEXTURE2D_U_OR_V_DIMENSION = 8192;
export const D3D10_REQ_TEXTURE3D_U_V_OR_W_DIMENSION = 2048;
export const D3D10_REQ_TEXTURECUBE_DIMENSION = 8192;
export const D3D10_RESINFO_INSTRUCTION_MISSING_COMPONENT_RETVAL = 0;
export const D3D10_SHADER_MAJOR_VERSION = 4;
export const D3D10_SHADER_MINOR_VERSION = 0;
export const D3D10_SHIFT_INSTRUCTION_PAD_VALUE = 0;
export const D3D10_SHIFT_INSTRUCTION_SHIFT_VALUE_BIT_COUNT = 5;
export const D3D10_SIMULTANEOUS_RENDER_TARGET_COUNT = 8;
export const D3D10_SO_BUFFER_MAX_STRIDE_IN_BYTES = 2048;
export const D3D10_SO_BUFFER_MAX_WRITE_WINDOW_IN_BYTES = 256;
export const D3D10_SO_BUFFER_SLOT_COUNT = 4;
export const D3D10_SO_DDI_REGISTER_INDEX_DENOTING_GAP = 4294967295;
export const D3D10_SO_MULTIPLE_BUFFER_ELEMENTS_PER_BUFFER = 1;
export const D3D10_SO_SINGLE_BUFFER_COMPONENT_LIMIT = 64;
export const D3D10_SRGB_GAMMA = "2.200000047683716";
export const D3D10_SRGB_TO_FLOAT_DENOMINATOR_1 = "12.920000076293945";
export const D3D10_SRGB_TO_FLOAT_DENOMINATOR_2 = "1.0549999475479126";
export const D3D10_SRGB_TO_FLOAT_EXPONENT = "2.4000000953674316";
export const D3D10_SRGB_TO_FLOAT_OFFSET = "0.054999999701976776";
export const D3D10_SRGB_TO_FLOAT_THRESHOLD = "0.040449999272823334";
export const D3D10_SRGB_TO_FLOAT_TOLERANCE_IN_ULP = "0.5";
export const D3D10_STANDARD_COMPONENT_BIT_COUNT = 32;
export const D3D10_STANDARD_COMPONENT_BIT_COUNT_DOUBLED = 64;
export const D3D10_STANDARD_MAXIMUM_ELEMENT_ALIGNMENT_BYTE_MULTIPLE = 4;
export const D3D10_STANDARD_PIXEL_COMPONENT_COUNT = 128;
export const D3D10_STANDARD_PIXEL_ELEMENT_COUNT = 32;
export const D3D10_STANDARD_VECTOR_SIZE = 4;
export const D3D10_STANDARD_VERTEX_ELEMENT_COUNT = 16;
export const D3D10_STANDARD_VERTEX_TOTAL_COMPONENT_COUNT = 64;
export const D3D10_SUBPIXEL_FRACTIONAL_BIT_COUNT = 8;
export const D3D10_SUBTEXEL_FRACTIONAL_BIT_COUNT = 6;
export const D3D10_TEXEL_ADDRESS_RANGE_BIT_COUNT = 18;
export const D3D10_UNBOUND_MEMORY_ACCESS_RESULT = 0;
export const D3D10_VIEWPORT_AND_SCISSORRECT_MAX_INDEX = 15;
export const D3D10_VIEWPORT_AND_SCISSORRECT_OBJECT_COUNT_PER_PIPELINE = 16;
export const D3D10_VIEWPORT_BOUNDS_MAX = 16383;
export const D3D10_VIEWPORT_BOUNDS_MIN = "-16384";
export const D3D10_VS_INPUT_REGISTER_COMPONENTS = 4;
export const D3D10_VS_INPUT_REGISTER_COMPONENT_BIT_COUNT = 32;
export const D3D10_VS_INPUT_REGISTER_COUNT = 16;
export const D3D10_VS_INPUT_REGISTER_READS_PER_INST = 2;
export const D3D10_VS_INPUT_REGISTER_READ_PORTS = 1;
export const D3D10_VS_OUTPUT_REGISTER_COMPONENTS = 4;
export const D3D10_VS_OUTPUT_REGISTER_COMPONENT_BIT_COUNT = 32;
export const D3D10_VS_OUTPUT_REGISTER_COUNT = 16;
export const D3D10_WHQL_CONTEXT_COUNT_FOR_RESOURCE_LIMIT = 10;
export const D3D10_WHQL_DRAWINDEXED_INDEX_COUNT_2_TO_EXP = 25;
export const D3D10_WHQL_DRAW_VERTEX_COUNT_2_TO_EXP = 25;
export const D3D_MAJOR_VERSION = 10;
export const D3D_MINOR_VERSION = 0;
export const D3D_SPEC_DATE_DAY = 8;
export const D3D_SPEC_DATE_MONTH = 8;
export const D3D_SPEC_DATE_YEAR = 2006;
export const D3D_SPEC_VERSION = "1.050005";
export const D3D10_1_IA_VERTEX_INPUT_STRUCTURE_ELEMENT_COUNT = 16;
export const D3D10_1_IA_VERTEX_INPUT_RESOURCE_SLOT_COUNT = 16;
export const _FACD3D10 = 2169;
export const D3D10_APPEND_ALIGNED_ELEMENT = 4294967295;
export const D3D10_FILTER_TYPE_MASK = 3;
export const D3D10_MIN_FILTER_SHIFT = 4;
export const D3D10_MAG_FILTER_SHIFT = 2;
export const D3D10_MIP_FILTER_SHIFT = 0;
export const D3D10_COMPARISON_FILTERING_BIT = 128;
export const D3D10_ANISOTROPIC_FILTERING_BIT = 64;
export const D3D10_TEXT_1BIT_BIT = 2147483648;
export const D3D10_SDK_VERSION = 29;
export const D3D10_1_DEFAULT_SAMPLE_MASK = 4294967295;
export const D3D10_1_FLOAT16_FUSED_TOLERANCE_IN_ULP = "0.6";
export const D3D10_1_FLOAT32_TO_INTEGER_TOLERANCE_IN_ULP = "0.6000000238418579";
export const D3D10_1_GS_INPUT_REGISTER_COUNT = 32;
export const D3D10_1_IA_VERTEX_INPUT_STRUCTURE_ELEMENTS_COMPONENTS = 128;
export const D3D10_1_PS_OUTPUT_MASK_REGISTER_COMPONENTS = 1;
export const D3D10_1_PS_OUTPUT_MASK_REGISTER_COMPONENT_BIT_COUNT = 32;
export const D3D10_1_PS_OUTPUT_MASK_REGISTER_COUNT = 1;
export const D3D10_1_SHADER_MAJOR_VERSION = 4;
export const D3D10_1_SHADER_MINOR_VERSION = 1;
export const D3D10_1_SO_BUFFER_MAX_STRIDE_IN_BYTES = 2048;
export const D3D10_1_SO_BUFFER_MAX_WRITE_WINDOW_IN_BYTES = 256;
export const D3D10_1_SO_BUFFER_SLOT_COUNT = 4;
export const D3D10_1_SO_MULTIPLE_BUFFER_ELEMENTS_PER_BUFFER = 1;
export const D3D10_1_SO_SINGLE_BUFFER_COMPONENT_LIMIT = 64;
export const D3D10_1_STANDARD_VERTEX_ELEMENT_COUNT = 32;
export const D3D10_1_SUBPIXEL_FRACTIONAL_BIT_COUNT = 8;
export const D3D10_1_VS_INPUT_REGISTER_COUNT = 32;
export const D3D10_1_VS_OUTPUT_REGISTER_COUNT = 32;
export const D3D10_SDK_LAYERS_VERSION = 11;
export const D3D10_DEBUG_FEATURE_FLUSH_PER_RENDER_OP = 1;
export const D3D10_DEBUG_FEATURE_FINISH_PER_RENDER_OP = 2;
export const D3D10_DEBUG_FEATURE_PRESENT_PER_RENDER_OP = 4;
export const D3D10_REGKEY_PATH = "Software\Microsoft\Direct3D";
export const D3D10_MUTE_DEBUG_OUTPUT = "MuteDebugOutput";
export const D3D10_ENABLE_BREAK_ON_MESSAGE = "EnableBreakOnMessage";
export const D3D10_INFOQUEUE_STORAGE_FILTER_OVERRIDE = "InfoQueueStorageFilterOverride";
export const D3D10_MUTE_CATEGORY = "Mute_CATEGORY_%s";
export const D3D10_MUTE_SEVERITY = "Mute_SEVERITY_%s";
export const D3D10_MUTE_ID_STRING = "Mute_ID_%s";
export const D3D10_MUTE_ID_DECIMAL = "Mute_ID_%d";
export const D3D10_UNMUTE_SEVERITY_INFO = "Unmute_SEVERITY_INFO";
export const D3D10_BREAKON_CATEGORY = "BreakOn_CATEGORY_%s";
export const D3D10_BREAKON_SEVERITY = "BreakOn_SEVERITY_%s";
export const D3D10_BREAKON_ID_STRING = "BreakOn_ID_%s";
export const D3D10_BREAKON_ID_DECIMAL = "BreakOn_ID_%d";
export const D3D10_APPSIZE_STRING = "Size";
export const D3D10_APPNAME_STRING = "Name";
export const D3D10_INFO_QUEUE_DEFAULT_MESSAGE_COUNT_LIMIT = 1024;
export const D3D10_SHADER_DEBUG = 1;
export const D3D10_SHADER_SKIP_VALIDATION = 2;
export const D3D10_SHADER_SKIP_OPTIMIZATION = 4;
export const D3D10_SHADER_PACK_MATRIX_ROW_MAJOR = 8;
export const D3D10_SHADER_PACK_MATRIX_COLUMN_MAJOR = 16;
export const D3D10_SHADER_PARTIAL_PRECISION = 32;
export const D3D10_SHADER_FORCE_VS_SOFTWARE_NO_OPT = 64;
export const D3D10_SHADER_FORCE_PS_SOFTWARE_NO_OPT = 128;
export const D3D10_SHADER_NO_PRESHADER = 256;
export const D3D10_SHADER_AVOID_FLOW_CONTROL = 512;
export const D3D10_SHADER_PREFER_FLOW_CONTROL = 1024;
export const D3D10_SHADER_ENABLE_STRICTNESS = 2048;
export const D3D10_SHADER_ENABLE_BACKWARDS_COMPATIBILITY = 4096;
export const D3D10_SHADER_IEEE_STRICTNESS = 8192;
export const D3D10_SHADER_WARNINGS_ARE_ERRORS = 262144;
export const D3D10_SHADER_RESOURCES_MAY_ALIAS = 524288;
export const D3D10_ENABLE_UNBOUNDED_DESCRIPTOR_TABLES = 1048576;
export const D3D10_ALL_RESOURCES_BOUND = 2097152;
export const D3D10_SHADER_DEBUG_NAME_FOR_SOURCE = 4194304;
export const D3D10_SHADER_DEBUG_NAME_FOR_BINARY = 8388608;
export const D3D10_SHADER_OPTIMIZATION_LEVEL0 = 16384;
export const D3D10_SHADER_OPTIMIZATION_LEVEL1 = 0;
export const D3D10_SHADER_OPTIMIZATION_LEVEL3 = 32768;
export const D3D10_SHADER_FLAGS2_FORCE_ROOT_SIGNATURE_LATEST = 0;
export const D3D10_SHADER_FLAGS2_FORCE_ROOT_SIGNATURE_1_0 = 16;
export const D3D10_SHADER_FLAGS2_FORCE_ROOT_SIGNATURE_1_1 = 32;
export const D3D10_EFFECT_COMPILE_CHILD_EFFECT = 1;
export const D3D10_EFFECT_COMPILE_ALLOW_SLOW_OPS = 2;
export const D3D10_EFFECT_SINGLE_THREADED = 8;
export const D3D10_EFFECT_VARIABLE_POOLED = 1;
export const D3D10_EFFECT_VARIABLE_ANNOTATION = 2;
export const D3D10_EFFECT_VARIABLE_EXPLICIT_BIND_POINT = 4;
export const D3D10_INPUT_PER_VERTEX_DATA = 0;
export const D3D10_INPUT_PER_INSTANCE_DATA = 1;
export const DXGI_FORMAT_UNKNOWN = 0;
export const DXGI_FORMAT_R32G32B32A32_TYPELESS = 1;
export const DXGI_FORMAT_R32G32B32A32_FLOAT = 2;
export const DXGI_FORMAT_R32G32B32A32_UINT = 3;
export const DXGI_FORMAT_R32G32B32A32_SINT = 4;
export const DXGI_FORMAT_R32G32B32_TYPELESS = 5;
export const DXGI_FORMAT_R32G32B32_FLOAT = 6;
export const DXGI_FORMAT_R32G32B32_UINT = 7;
export const DXGI_FORMAT_R32G32B32_SINT = 8;
export const DXGI_FORMAT_R16G16B16A16_TYPELESS = 9;
export const DXGI_FORMAT_R16G16B16A16_FLOAT = 10;
export const DXGI_FORMAT_R16G16B16A16_UNORM = 11;
export const DXGI_FORMAT_R16G16B16A16_UINT = 12;
export const DXGI_FORMAT_R16G16B16A16_SNORM = 13;
export const DXGI_FORMAT_R16G16B16A16_SINT = 14;
export const DXGI_FORMAT_R32G32_TYPELESS = 15;
export const DXGI_FORMAT_R32G32_FLOAT = 16;
export const DXGI_FORMAT_R32G32_UINT = 17;
export const DXGI_FORMAT_R32G32_SINT = 18;
export const DXGI_FORMAT_R32G8X24_TYPELESS = 19;
export const DXGI_FORMAT_D32_FLOAT_S8X24_UINT = 20;
export const DXGI_FORMAT_R32_FLOAT_X8X24_TYPELESS = 21;
export const DXGI_FORMAT_X32_TYPELESS_G8X24_UINT = 22;
export const DXGI_FORMAT_R10G10B10A2_TYPELESS = 23;
export const DXGI_FORMAT_R10G10B10A2_UNORM = 24;
export const DXGI_FORMAT_R10G10B10A2_UINT = 25;
export const DXGI_FORMAT_R11G11B10_FLOAT = 26;
export const DXGI_FORMAT_R8G8B8A8_TYPELESS = 27;
export const DXGI_FORMAT_R8G8B8A8_UNORM = 28;
export const DXGI_FORMAT_R8G8B8A8_UNORM_SRGB = 29;
export const DXGI_FORMAT_R8G8B8A8_UINT = 30;
export const DXGI_FORMAT_R8G8B8A8_SNORM = 31;
export const DXGI_FORMAT_R8G8B8A8_SINT = 32;
export const DXGI_FORMAT_R16G16_TYPELESS = 33;
export const DXGI_FORMAT_R16G16_FLOAT = 34;
export const DXGI_FORMAT_R16G16_UNORM = 35;
export const DXGI_FORMAT_R16G16_UINT = 36;
export const DXGI_FORMAT_R16G16_SNORM = 37;
export const DXGI_FORMAT_R16G16_SINT = 38;
export const DXGI_FORMAT_R32_TYPELESS = 39;
export const DXGI_FORMAT_D32_FLOAT = 40;
export const DXGI_FORMAT_R32_FLOAT = 41;
export const DXGI_FORMAT_R32_UINT = 42;
export const DXGI_FORMAT_R32_SINT = 43;
export const DXGI_FORMAT_R24G8_TYPELESS = 44;
export const DXGI_FORMAT_D24_UNORM_S8_UINT = 45;
export const DXGI_FORMAT_R24_UNORM_X8_TYPELESS = 46;
export const DXGI_FORMAT_X24_TYPELESS_G8_UINT = 47;
export const DXGI_FORMAT_R8G8_TYPELESS = 48;
export const DXGI_FORMAT_R8G8_UNORM = 49;
export const DXGI_FORMAT_R8G8_UINT = 50;
export const DXGI_FORMAT_R8G8_SNORM = 51;
export const DXGI_FORMAT_R8G8_SINT = 52;
export const DXGI_FORMAT_R16_TYPELESS = 53;
export const DXGI_FORMAT_R16_FLOAT = 54;
export const DXGI_FORMAT_D16_UNORM = 55;
export const DXGI_FORMAT_R16_UNORM = 56;
export const DXGI_FORMAT_R16_UINT = 57;
export const DXGI_FORMAT_R16_SNORM = 58;
export const DXGI_FORMAT_R16_SINT = 59;
export const DXGI_FORMAT_R8_TYPELESS = 60;
export const DXGI_FORMAT_R8_UNORM = 61;
export const DXGI_FORMAT_R8_UINT = 62;
export const DXGI_FORMAT_R8_SNORM = 63;
export const DXGI_FORMAT_R8_SINT = 64;
export const DXGI_FORMAT_A8_UNORM = 65;
export const DXGI_FORMAT_R1_UNORM = 66;
export const DXGI_FORMAT_R9G9B9E5_SHAREDEXP = 67;
export const DXGI_FORMAT_R8G8_B8G8_UNORM = 68;
export const DXGI_FORMAT_G8R8_G8B8_UNORM = 69;
export const DXGI_FORMAT_BC1_TYPELESS = 70;
export const DXGI_FORMAT_BC1_UNORM = 71;
export const DXGI_FORMAT_BC1_UNORM_SRGB = 72;
export const DXGI_FORMAT_BC2_TYPELESS = 73;
export const DXGI_FORMAT_BC2_UNORM = 74;
export const DXGI_FORMAT_BC2_UNORM_SRGB = 75;
export const DXGI_FORMAT_BC3_TYPELESS = 76;
export const DXGI_FORMAT_BC3_UNORM = 77;
export const DXGI_FORMAT_BC3_UNORM_SRGB = 78;
export const DXGI_FORMAT_BC4_TYPELESS = 79;
export const DXGI_FORMAT_BC4_UNORM = 80;
export const DXGI_FORMAT_BC4_SNORM = 81;
export const DXGI_FORMAT_BC5_TYPELESS = 82;
export const DXGI_FORMAT_BC5_UNORM = 83;
export const DXGI_FORMAT_BC5_SNORM = 84;
export const DXGI_FORMAT_B5G6R5_UNORM = 85;
export const DXGI_FORMAT_B5G5R5A1_UNORM = 86;
export const DXGI_FORMAT_B8G8R8A8_UNORM = 87;
export const DXGI_FORMAT_B8G8R8X8_UNORM = 88;
export const DXGI_FORMAT_R10G10B10_XR_BIAS_A2_UNORM = 89;
export const DXGI_FORMAT_B8G8R8A8_TYPELESS = 90;
export const DXGI_FORMAT_B8G8R8A8_UNORM_SRGB = 91;
export const DXGI_FORMAT_B8G8R8X8_TYPELESS = 92;
export const DXGI_FORMAT_B8G8R8X8_UNORM_SRGB = 93;
export const DXGI_FORMAT_BC6H_TYPELESS = 94;
export const DXGI_FORMAT_BC6H_UF16 = 95;
export const DXGI_FORMAT_BC6H_SF16 = 96;
export const DXGI_FORMAT_BC7_TYPELESS = 97;
export const DXGI_FORMAT_BC7_UNORM = 98;
export const DXGI_FORMAT_BC7_UNORM_SRGB = 99;
export const DXGI_FORMAT_AYUV = 100;
export const DXGI_FORMAT_Y410 = 101;
export const DXGI_FORMAT_Y416 = 102;
export const DXGI_FORMAT_NV12 = 103;
export const DXGI_FORMAT_P010 = 104;
export const DXGI_FORMAT_P016 = 105;
export const DXGI_FORMAT_420_OPAQUE = 106;
export const DXGI_FORMAT_YUY2 = 107;
export const DXGI_FORMAT_Y210 = 108;
export const DXGI_FORMAT_Y216 = 109;
export const DXGI_FORMAT_NV11 = 110;
export const DXGI_FORMAT_AI44 = 111;
export const DXGI_FORMAT_IA44 = 112;
export const DXGI_FORMAT_P8 = 113;
export const DXGI_FORMAT_A8P8 = 114;
export const DXGI_FORMAT_B4G4R4A4_UNORM = 115;
export const DXGI_FORMAT_P208 = 130;
export const DXGI_FORMAT_V208 = 131;
export const DXGI_FORMAT_V408 = 132;
export const DXGI_FORMAT_SAMPLER_FEEDBACK_MIN_MIP_OPAQUE = 189;
export const DXGI_FORMAT_SAMPLER_FEEDBACK_MIP_REGION_USED_OPAQUE = 190;
export const DXGI_FORMAT_FORCE_UINT = 4294967295;
export const D3D10_FILL_WIREFRAME = 2;
export const D3D10_FILL_SOLID = 3;
export const D3D10_CULL_NONE = 1;
export const D3D10_CULL_FRONT = 2;
export const D3D10_CULL_BACK = 3;
export const D3D10_RESOURCE_DIMENSION_UNKNOWN = 0;
export const D3D10_RESOURCE_DIMENSION_BUFFER = 1;
export const D3D10_RESOURCE_DIMENSION_TEXTURE1D = 2;
export const D3D10_RESOURCE_DIMENSION_TEXTURE2D = 3;
export const D3D10_RESOURCE_DIMENSION_TEXTURE3D = 4;
export const D3D10_DSV_DIMENSION_UNKNOWN = 0;
export const D3D10_DSV_DIMENSION_TEXTURE1D = 1;
export const D3D10_DSV_DIMENSION_TEXTURE1DARRAY = 2;
export const D3D10_DSV_DIMENSION_TEXTURE2D = 3;
export const D3D10_DSV_DIMENSION_TEXTURE2DARRAY = 4;
export const D3D10_DSV_DIMENSION_TEXTURE2DMS = 5;
export const D3D10_DSV_DIMENSION_TEXTURE2DMSARRAY = 6;
export const D3D10_RTV_DIMENSION_UNKNOWN = 0;
export const D3D10_RTV_DIMENSION_BUFFER = 1;
export const D3D10_RTV_DIMENSION_TEXTURE1D = 2;
export const D3D10_RTV_DIMENSION_TEXTURE1DARRAY = 3;
export const D3D10_RTV_DIMENSION_TEXTURE2D = 4;
export const D3D10_RTV_DIMENSION_TEXTURE2DARRAY = 5;
export const D3D10_RTV_DIMENSION_TEXTURE2DMS = 6;
export const D3D10_RTV_DIMENSION_TEXTURE2DMSARRAY = 7;
export const D3D10_RTV_DIMENSION_TEXTURE3D = 8;
export const D3D10_USAGE_DEFAULT = 0;
export const D3D10_USAGE_IMMUTABLE = 1;
export const D3D10_USAGE_DYNAMIC = 2;
export const D3D10_USAGE_STAGING = 3;
export const D3D10_BIND_VERTEX_BUFFER = 1;
export const D3D10_BIND_INDEX_BUFFER = 2;
export const D3D10_BIND_CONSTANT_BUFFER = 4;
export const D3D10_BIND_SHADER_RESOURCE = 8;
export const D3D10_BIND_STREAM_OUTPUT = 16;
export const D3D10_BIND_RENDER_TARGET = 32;
export const D3D10_BIND_DEPTH_STENCIL = 64;
export const D3D10_CPU_ACCESS_WRITE = 65536;
export const D3D10_CPU_ACCESS_READ = 131072;
export const D3D10_RESOURCE_MISC_GENERATE_MIPS = 1;
export const D3D10_RESOURCE_MISC_SHARED = 2;
export const D3D10_RESOURCE_MISC_TEXTURECUBE = 4;
export const D3D10_RESOURCE_MISC_SHARED_KEYEDMUTEX = 16;
export const D3D10_RESOURCE_MISC_GDI_COMPATIBLE = 32;
export const D3D10_MAP_READ = 1;
export const D3D10_MAP_WRITE = 2;
export const D3D10_MAP_READ_WRITE = 3;
export const D3D10_MAP_WRITE_DISCARD = 4;
export const D3D10_MAP_WRITE_NO_OVERWRITE = 5;
export const D3D10_MAP_FLAG_DO_NOT_WAIT = 1048576;
export const D3D10_RAISE_FLAG_DRIVER_INTERNAL_ERROR = 1;
export const D3D10_CLEAR_DEPTH = 1;
export const D3D10_CLEAR_STENCIL = 2;
export const D3D10_COMPARISON_NEVER = 1;
export const D3D10_COMPARISON_LESS = 2;
export const D3D10_COMPARISON_EQUAL = 3;
export const D3D10_COMPARISON_LESS_EQUAL = 4;
export const D3D10_COMPARISON_GREATER = 5;
export const D3D10_COMPARISON_NOT_EQUAL = 6;
export const D3D10_COMPARISON_GREATER_EQUAL = 7;
export const D3D10_COMPARISON_ALWAYS = 8;
export const D3D10_DEPTH_WRITE_MASK_ZERO = 0;
export const D3D10_DEPTH_WRITE_MASK_ALL = 1;
export const D3D10_STENCIL_OP_KEEP = 1;
export const D3D10_STENCIL_OP_ZERO = 2;
export const D3D10_STENCIL_OP_REPLACE = 3;
export const D3D10_STENCIL_OP_INCR_SAT = 4;
export const D3D10_STENCIL_OP_DECR_SAT = 5;
export const D3D10_STENCIL_OP_INVERT = 6;
export const D3D10_STENCIL_OP_INCR = 7;
export const D3D10_STENCIL_OP_DECR = 8;
export const D3D10_BLEND_ZERO = 1;
export const D3D10_BLEND_ONE = 2;
export const D3D10_BLEND_SRC_COLOR = 3;
export const D3D10_BLEND_INV_SRC_COLOR = 4;
export const D3D10_BLEND_SRC_ALPHA = 5;
export const D3D10_BLEND_INV_SRC_ALPHA = 6;
export const D3D10_BLEND_DEST_ALPHA = 7;
export const D3D10_BLEND_INV_DEST_ALPHA = 8;
export const D3D10_BLEND_DEST_COLOR = 9;
export const D3D10_BLEND_INV_DEST_COLOR = 10;
export const D3D10_BLEND_SRC_ALPHA_SAT = 11;
export const D3D10_BLEND_BLEND_FACTOR = 14;
export const D3D10_BLEND_INV_BLEND_FACTOR = 15;
export const D3D10_BLEND_SRC1_COLOR = 16;
export const D3D10_BLEND_INV_SRC1_COLOR = 17;
export const D3D10_BLEND_SRC1_ALPHA = 18;
export const D3D10_BLEND_INV_SRC1_ALPHA = 19;
export const D3D10_BLEND_OP_ADD = 1;
export const D3D10_BLEND_OP_SUBTRACT = 2;
export const D3D10_BLEND_OP_REV_SUBTRACT = 3;
export const D3D10_BLEND_OP_MIN = 4;
export const D3D10_BLEND_OP_MAX = 5;
export const D3D10_COLOR_WRITE_ENABLE_RED = 1;
export const D3D10_COLOR_WRITE_ENABLE_GREEN = 2;
export const D3D10_COLOR_WRITE_ENABLE_BLUE = 4;
export const D3D10_COLOR_WRITE_ENABLE_ALPHA = 8;
export const D3D10_COLOR_WRITE_ENABLE_ALL = 15;
export const D3D10_TEXTURECUBE_FACE_POSITIVE_X = 0;
export const D3D10_TEXTURECUBE_FACE_NEGATIVE_X = 1;
export const D3D10_TEXTURECUBE_FACE_POSITIVE_Y = 2;
export const D3D10_TEXTURECUBE_FACE_NEGATIVE_Y = 3;
export const D3D10_TEXTURECUBE_FACE_POSITIVE_Z = 4;
export const D3D10_TEXTURECUBE_FACE_NEGATIVE_Z = 5;
export const D3D_SRV_DIMENSION_UNKNOWN = 0;
export const D3D_SRV_DIMENSION_BUFFER = 1;
export const D3D_SRV_DIMENSION_TEXTURE1D = 2;
export const D3D_SRV_DIMENSION_TEXTURE1DARRAY = 3;
export const D3D_SRV_DIMENSION_TEXTURE2D = 4;
export const D3D_SRV_DIMENSION_TEXTURE2DARRAY = 5;
export const D3D_SRV_DIMENSION_TEXTURE2DMS = 6;
export const D3D_SRV_DIMENSION_TEXTURE2DMSARRAY = 7;
export const D3D_SRV_DIMENSION_TEXTURE3D = 8;
export const D3D_SRV_DIMENSION_TEXTURECUBE = 9;
export const D3D_SRV_DIMENSION_TEXTURECUBEARRAY = 10;
export const D3D_SRV_DIMENSION_BUFFEREX = 11;
export const D3D10_SRV_DIMENSION_UNKNOWN = 0;
export const D3D10_SRV_DIMENSION_BUFFER = 1;
export const D3D10_SRV_DIMENSION_TEXTURE1D = 2;
export const D3D10_SRV_DIMENSION_TEXTURE1DARRAY = 3;
export const D3D10_SRV_DIMENSION_TEXTURE2D = 4;
export const D3D10_SRV_DIMENSION_TEXTURE2DARRAY = 5;
export const D3D10_SRV_DIMENSION_TEXTURE2DMS = 6;
export const D3D10_SRV_DIMENSION_TEXTURE2DMSARRAY = 7;
export const D3D10_SRV_DIMENSION_TEXTURE3D = 8;
export const D3D10_SRV_DIMENSION_TEXTURECUBE = 9;
export const D3D10_1_SRV_DIMENSION_UNKNOWN = 0;
export const D3D10_1_SRV_DIMENSION_BUFFER = 1;
export const D3D10_1_SRV_DIMENSION_TEXTURE1D = 2;
export const D3D10_1_SRV_DIMENSION_TEXTURE1DARRAY = 3;
export const D3D10_1_SRV_DIMENSION_TEXTURE2D = 4;
export const D3D10_1_SRV_DIMENSION_TEXTURE2DARRAY = 5;
export const D3D10_1_SRV_DIMENSION_TEXTURE2DMS = 6;
export const D3D10_1_SRV_DIMENSION_TEXTURE2DMSARRAY = 7;
export const D3D10_1_SRV_DIMENSION_TEXTURE3D = 8;
export const D3D10_1_SRV_DIMENSION_TEXTURECUBE = 9;
export const D3D10_1_SRV_DIMENSION_TEXTURECUBEARRAY = 10;
export const D3D11_SRV_DIMENSION_UNKNOWN = 0;
export const D3D11_SRV_DIMENSION_BUFFER = 1;
export const D3D11_SRV_DIMENSION_TEXTURE1D = 2;
export const D3D11_SRV_DIMENSION_TEXTURE1DARRAY = 3;
export const D3D11_SRV_DIMENSION_TEXTURE2D = 4;
export const D3D11_SRV_DIMENSION_TEXTURE2DARRAY = 5;
export const D3D11_SRV_DIMENSION_TEXTURE2DMS = 6;
export const D3D11_SRV_DIMENSION_TEXTURE2DMSARRAY = 7;
export const D3D11_SRV_DIMENSION_TEXTURE3D = 8;
export const D3D11_SRV_DIMENSION_TEXTURECUBE = 9;
export const D3D11_SRV_DIMENSION_TEXTURECUBEARRAY = 10;
export const D3D11_SRV_DIMENSION_BUFFEREX = 11;
export const D3D10_FILTER_MIN_MAG_MIP_POINT = 0;
export const D3D10_FILTER_MIN_MAG_POINT_MIP_LINEAR = 1;
export const D3D10_FILTER_MIN_POINT_MAG_LINEAR_MIP_POINT = 4;
export const D3D10_FILTER_MIN_POINT_MAG_MIP_LINEAR = 5;
export const D3D10_FILTER_MIN_LINEAR_MAG_MIP_POINT = 16;
export const D3D10_FILTER_MIN_LINEAR_MAG_POINT_MIP_LINEAR = 17;
export const D3D10_FILTER_MIN_MAG_LINEAR_MIP_POINT = 20;
export const D3D10_FILTER_MIN_MAG_MIP_LINEAR = 21;
export const D3D10_FILTER_ANISOTROPIC = 85;
export const D3D10_FILTER_COMPARISON_MIN_MAG_MIP_POINT = 128;
export const D3D10_FILTER_COMPARISON_MIN_MAG_POINT_MIP_LINEAR = 129;
export const D3D10_FILTER_COMPARISON_MIN_POINT_MAG_LINEAR_MIP_POINT = 132;
export const D3D10_FILTER_COMPARISON_MIN_POINT_MAG_MIP_LINEAR = 133;
export const D3D10_FILTER_COMPARISON_MIN_LINEAR_MAG_MIP_POINT = 144;
export const D3D10_FILTER_COMPARISON_MIN_LINEAR_MAG_POINT_MIP_LINEAR = 145;
export const D3D10_FILTER_COMPARISON_MIN_MAG_LINEAR_MIP_POINT = 148;
export const D3D10_FILTER_COMPARISON_MIN_MAG_MIP_LINEAR = 149;
export const D3D10_FILTER_COMPARISON_ANISOTROPIC = 213;
export const D3D10_FILTER_TEXT_1BIT = "-2147483648";
export const D3D10_FILTER_TYPE_POINT = 0;
export const D3D10_FILTER_TYPE_LINEAR = 1;
export const D3D10_TEXTURE_ADDRESS_WRAP = 1;
export const D3D10_TEXTURE_ADDRESS_MIRROR = 2;
export const D3D10_TEXTURE_ADDRESS_CLAMP = 3;
export const D3D10_TEXTURE_ADDRESS_BORDER = 4;
export const D3D10_TEXTURE_ADDRESS_MIRROR_ONCE = 5;
export const D3D10_FORMAT_SUPPORT_BUFFER = 1;
export const D3D10_FORMAT_SUPPORT_IA_VERTEX_BUFFER = 2;
export const D3D10_FORMAT_SUPPORT_IA_INDEX_BUFFER = 4;
export const D3D10_FORMAT_SUPPORT_SO_BUFFER = 8;
export const D3D10_FORMAT_SUPPORT_TEXTURE1D = 16;
export const D3D10_FORMAT_SUPPORT_TEXTURE2D = 32;
export const D3D10_FORMAT_SUPPORT_TEXTURE3D = 64;
export const D3D10_FORMAT_SUPPORT_TEXTURECUBE = 128;
export const D3D10_FORMAT_SUPPORT_SHADER_LOAD = 256;
export const D3D10_FORMAT_SUPPORT_SHADER_SAMPLE = 512;
export const D3D10_FORMAT_SUPPORT_SHADER_SAMPLE_COMPARISON = 1024;
export const D3D10_FORMAT_SUPPORT_SHADER_SAMPLE_MONO_TEXT = 2048;
export const D3D10_FORMAT_SUPPORT_MIP = 4096;
export const D3D10_FORMAT_SUPPORT_MIP_AUTOGEN = 8192;
export const D3D10_FORMAT_SUPPORT_RENDER_TARGET = 16384;
export const D3D10_FORMAT_SUPPORT_BLENDABLE = 32768;
export const D3D10_FORMAT_SUPPORT_DEPTH_STENCIL = 65536;
export const D3D10_FORMAT_SUPPORT_CPU_LOCKABLE = 131072;
export const D3D10_FORMAT_SUPPORT_MULTISAMPLE_RESOLVE = 262144;
export const D3D10_FORMAT_SUPPORT_DISPLAY = 524288;
export const D3D10_FORMAT_SUPPORT_CAST_WITHIN_BIT_LAYOUT = 1048576;
export const D3D10_FORMAT_SUPPORT_MULTISAMPLE_RENDERTARGET = 2097152;
export const D3D10_FORMAT_SUPPORT_MULTISAMPLE_LOAD = 4194304;
export const D3D10_FORMAT_SUPPORT_SHADER_GATHER = 8388608;
export const D3D10_FORMAT_SUPPORT_BACK_BUFFER_CAST = 16777216;
export const D3D10_ASYNC_GETDATA_DONOTFLUSH = 1;
export const D3D10_QUERY_EVENT = 0;
export const D3D10_QUERY_OCCLUSION = 1;
export const D3D10_QUERY_TIMESTAMP = 2;
export const D3D10_QUERY_TIMESTAMP_DISJOINT = 3;
export const D3D10_QUERY_PIPELINE_STATISTICS = 4;
export const D3D10_QUERY_OCCLUSION_PREDICATE = 5;
export const D3D10_QUERY_SO_STATISTICS = 6;
export const D3D10_QUERY_SO_OVERFLOW_PREDICATE = 7;
export const D3D10_QUERY_MISC_PREDICATEHINT = 1;
export const D3D10_COUNTER_GPU_IDLE = 0;
export const D3D10_COUNTER_VERTEX_PROCESSING = 1;
export const D3D10_COUNTER_GEOMETRY_PROCESSING = 2;
export const D3D10_COUNTER_PIXEL_PROCESSING = 3;
export const D3D10_COUNTER_OTHER_GPU_PROCESSING = 4;
export const D3D10_COUNTER_HOST_ADAPTER_BANDWIDTH_UTILIZATION = 5;
export const D3D10_COUNTER_LOCAL_VIDMEM_BANDWIDTH_UTILIZATION = 6;
export const D3D10_COUNTER_VERTEX_THROUGHPUT_UTILIZATION = 7;
export const D3D10_COUNTER_TRIANGLE_SETUP_THROUGHPUT_UTILIZATION = 8;
export const D3D10_COUNTER_FILLRATE_THROUGHPUT_UTILIZATION = 9;
export const D3D10_COUNTER_VS_MEMORY_LIMITED = 10;
export const D3D10_COUNTER_VS_COMPUTATION_LIMITED = 11;
export const D3D10_COUNTER_GS_MEMORY_LIMITED = 12;
export const D3D10_COUNTER_GS_COMPUTATION_LIMITED = 13;
export const D3D10_COUNTER_PS_MEMORY_LIMITED = 14;
export const D3D10_COUNTER_PS_COMPUTATION_LIMITED = 15;
export const D3D10_COUNTER_POST_TRANSFORM_CACHE_HIT_RATE = 16;
export const D3D10_COUNTER_TEXTURE_CACHE_HIT_RATE = 17;
export const D3D10_COUNTER_DEVICE_DEPENDENT_0 = 1073741824;
export const D3D10_COUNTER_TYPE_FLOAT32 = 0;
export const D3D10_COUNTER_TYPE_UINT16 = 1;
export const D3D10_COUNTER_TYPE_UINT32 = 2;
export const D3D10_COUNTER_TYPE_UINT64 = 3;
export const D3D10_CREATE_DEVICE_SINGLETHREADED = 1;
export const D3D10_CREATE_DEVICE_DEBUG = 2;
export const D3D10_CREATE_DEVICE_SWITCH_TO_REF = 4;
export const D3D10_CREATE_DEVICE_PREVENT_INTERNAL_THREADING_OPTIMIZATIONS = 8;
export const D3D10_CREATE_DEVICE_ALLOW_NULL_FROM_MAP = 16;
export const D3D10_CREATE_DEVICE_BGRA_SUPPORT = 32;
export const D3D10_CREATE_DEVICE_PREVENT_ALTERING_LAYER_SETTINGS_FROM_REGISTRY = 128;
export const D3D10_CREATE_DEVICE_STRICT_VALIDATION = 512;
export const D3D10_CREATE_DEVICE_DEBUGGABLE = 1024;
export const D3D10_MESSAGE_CATEGORY_APPLICATION_DEFINED = 0;
export const D3D10_MESSAGE_CATEGORY_MISCELLANEOUS = 1;
export const D3D10_MESSAGE_CATEGORY_INITIALIZATION = 2;
export const D3D10_MESSAGE_CATEGORY_CLEANUP = 3;
export const D3D10_MESSAGE_CATEGORY_COMPILATION = 4;
export const D3D10_MESSAGE_CATEGORY_STATE_CREATION = 5;
export const D3D10_MESSAGE_CATEGORY_STATE_SETTING = 6;
export const D3D10_MESSAGE_CATEGORY_STATE_GETTING = 7;
export const D3D10_MESSAGE_CATEGORY_RESOURCE_MANIPULATION = 8;
export const D3D10_MESSAGE_CATEGORY_EXECUTION = 9;
export const D3D10_MESSAGE_CATEGORY_SHADER = 10;
export const D3D10_MESSAGE_SEVERITY_CORRUPTION = 0;
export const D3D10_MESSAGE_SEVERITY_ERROR = 1;
export const D3D10_MESSAGE_SEVERITY_WARNING = 2;
export const D3D10_MESSAGE_SEVERITY_INFO = 3;
export const D3D10_MESSAGE_SEVERITY_MESSAGE = 4;
export const D3D10_MESSAGE_ID_UNKNOWN = 0;
export const D3D10_MESSAGE_ID_DEVICE_IASETVERTEXBUFFERS_HAZARD = 1;
export const D3D10_MESSAGE_ID_DEVICE_IASETINDEXBUFFER_HAZARD = 2;
export const D3D10_MESSAGE_ID_DEVICE_VSSETSHADERRESOURCES_HAZARD = 3;
export const D3D10_MESSAGE_ID_DEVICE_VSSETCONSTANTBUFFERS_HAZARD = 4;
export const D3D10_MESSAGE_ID_DEVICE_GSSETSHADERRESOURCES_HAZARD = 5;
export const D3D10_MESSAGE_ID_DEVICE_GSSETCONSTANTBUFFERS_HAZARD = 6;
export const D3D10_MESSAGE_ID_DEVICE_PSSETSHADERRESOURCES_HAZARD = 7;
export const D3D10_MESSAGE_ID_DEVICE_PSSETCONSTANTBUFFERS_HAZARD = 8;
export const D3D10_MESSAGE_ID_DEVICE_OMSETRENDERTARGETS_HAZARD = 9;
export const D3D10_MESSAGE_ID_DEVICE_SOSETTARGETS_HAZARD = 10;
export const D3D10_MESSAGE_ID_STRING_FROM_APPLICATION = 11;
export const D3D10_MESSAGE_ID_CORRUPTED_THIS = 12;
export const D3D10_MESSAGE_ID_CORRUPTED_PARAMETER1 = 13;
export const D3D10_MESSAGE_ID_CORRUPTED_PARAMETER2 = 14;
export const D3D10_MESSAGE_ID_CORRUPTED_PARAMETER3 = 15;
export const D3D10_MESSAGE_ID_CORRUPTED_PARAMETER4 = 16;
export const D3D10_MESSAGE_ID_CORRUPTED_PARAMETER5 = 17;
export const D3D10_MESSAGE_ID_CORRUPTED_PARAMETER6 = 18;
export const D3D10_MESSAGE_ID_CORRUPTED_PARAMETER7 = 19;
export const D3D10_MESSAGE_ID_CORRUPTED_PARAMETER8 = 20;
export const D3D10_MESSAGE_ID_CORRUPTED_PARAMETER9 = 21;
export const D3D10_MESSAGE_ID_CORRUPTED_PARAMETER10 = 22;
export const D3D10_MESSAGE_ID_CORRUPTED_PARAMETER11 = 23;
export const D3D10_MESSAGE_ID_CORRUPTED_PARAMETER12 = 24;
export const D3D10_MESSAGE_ID_CORRUPTED_PARAMETER13 = 25;
export const D3D10_MESSAGE_ID_CORRUPTED_PARAMETER14 = 26;
export const D3D10_MESSAGE_ID_CORRUPTED_PARAMETER15 = 27;
export const D3D10_MESSAGE_ID_CORRUPTED_MULTITHREADING = 28;
export const D3D10_MESSAGE_ID_MESSAGE_REPORTING_OUTOFMEMORY = 29;
export const D3D10_MESSAGE_ID_IASETINPUTLAYOUT_UNBINDDELETINGOBJECT = 30;
export const D3D10_MESSAGE_ID_IASETVERTEXBUFFERS_UNBINDDELETINGOBJECT = 31;
export const D3D10_MESSAGE_ID_IASETINDEXBUFFER_UNBINDDELETINGOBJECT = 32;
export const D3D10_MESSAGE_ID_VSSETSHADER_UNBINDDELETINGOBJECT = 33;
export const D3D10_MESSAGE_ID_VSSETSHADERRESOURCES_UNBINDDELETINGOBJECT = 34;
export const D3D10_MESSAGE_ID_VSSETCONSTANTBUFFERS_UNBINDDELETINGOBJECT = 35;
export const D3D10_MESSAGE_ID_VSSETSAMPLERS_UNBINDDELETINGOBJECT = 36;
export const D3D10_MESSAGE_ID_GSSETSHADER_UNBINDDELETINGOBJECT = 37;
export const D3D10_MESSAGE_ID_GSSETSHADERRESOURCES_UNBINDDELETINGOBJECT = 38;
export const D3D10_MESSAGE_ID_GSSETCONSTANTBUFFERS_UNBINDDELETINGOBJECT = 39;
export const D3D10_MESSAGE_ID_GSSETSAMPLERS_UNBINDDELETINGOBJECT = 40;
export const D3D10_MESSAGE_ID_SOSETTARGETS_UNBINDDELETINGOBJECT = 41;
export const D3D10_MESSAGE_ID_PSSETSHADER_UNBINDDELETINGOBJECT = 42;
export const D3D10_MESSAGE_ID_PSSETSHADERRESOURCES_UNBINDDELETINGOBJECT = 43;
export const D3D10_MESSAGE_ID_PSSETCONSTANTBUFFERS_UNBINDDELETINGOBJECT = 44;
export const D3D10_MESSAGE_ID_PSSETSAMPLERS_UNBINDDELETINGOBJECT = 45;
export const D3D10_MESSAGE_ID_RSSETSTATE_UNBINDDELETINGOBJECT = 46;
export const D3D10_MESSAGE_ID_OMSETBLENDSTATE_UNBINDDELETINGOBJECT = 47;
export const D3D10_MESSAGE_ID_OMSETDEPTHSTENCILSTATE_UNBINDDELETINGOBJECT = 48;
export const D3D10_MESSAGE_ID_OMSETRENDERTARGETS_UNBINDDELETINGOBJECT = 49;
export const D3D10_MESSAGE_ID_SETPREDICATION_UNBINDDELETINGOBJECT = 50;
export const D3D10_MESSAGE_ID_GETPRIVATEDATA_MOREDATA = 51;
export const D3D10_MESSAGE_ID_SETPRIVATEDATA_INVALIDFREEDATA = 52;
export const D3D10_MESSAGE_ID_SETPRIVATEDATA_INVALIDIUNKNOWN = 53;
export const D3D10_MESSAGE_ID_SETPRIVATEDATA_INVALIDFLAGS = 54;
export const D3D10_MESSAGE_ID_SETPRIVATEDATA_CHANGINGPARAMS = 55;
export const D3D10_MESSAGE_ID_SETPRIVATEDATA_OUTOFMEMORY = 56;
export const D3D10_MESSAGE_ID_CREATEBUFFER_UNRECOGNIZEDFORMAT = 57;
export const D3D10_MESSAGE_ID_CREATEBUFFER_INVALIDSAMPLES = 58;
export const D3D10_MESSAGE_ID_CREATEBUFFER_UNRECOGNIZEDUSAGE = 59;
export const D3D10_MESSAGE_ID_CREATEBUFFER_UNRECOGNIZEDBINDFLAGS = 60;
export const D3D10_MESSAGE_ID_CREATEBUFFER_UNRECOGNIZEDCPUACCESSFLAGS = 61;
export const D3D10_MESSAGE_ID_CREATEBUFFER_UNRECOGNIZEDMISCFLAGS = 62;
export const D3D10_MESSAGE_ID_CREATEBUFFER_INVALIDCPUACCESSFLAGS = 63;
export const D3D10_MESSAGE_ID_CREATEBUFFER_INVALIDBINDFLAGS = 64;
export const D3D10_MESSAGE_ID_CREATEBUFFER_INVALIDINITIALDATA = 65;
export const D3D10_MESSAGE_ID_CREATEBUFFER_INVALIDDIMENSIONS = 66;
export const D3D10_MESSAGE_ID_CREATEBUFFER_INVALIDMIPLEVELS = 67;
export const D3D10_MESSAGE_ID_CREATEBUFFER_INVALIDMISCFLAGS = 68;
export const D3D10_MESSAGE_ID_CREATEBUFFER_INVALIDARG_RETURN = 69;
export const D3D10_MESSAGE_ID_CREATEBUFFER_OUTOFMEMORY_RETURN = 70;
export const D3D10_MESSAGE_ID_CREATEBUFFER_NULLDESC = 71;
export const D3D10_MESSAGE_ID_CREATEBUFFER_INVALIDCONSTANTBUFFERBINDINGS = 72;
export const D3D10_MESSAGE_ID_CREATEBUFFER_LARGEALLOCATION = 73;
export const D3D10_MESSAGE_ID_CREATETEXTURE1D_UNRECOGNIZEDFORMAT = 74;
export const D3D10_MESSAGE_ID_CREATETEXTURE1D_UNSUPPORTEDFORMAT = 75;
export const D3D10_MESSAGE_ID_CREATETEXTURE1D_INVALIDSAMPLES = 76;
export const D3D10_MESSAGE_ID_CREATETEXTURE1D_UNRECOGNIZEDUSAGE = 77;
export const D3D10_MESSAGE_ID_CREATETEXTURE1D_UNRECOGNIZEDBINDFLAGS = 78;
export const D3D10_MESSAGE_ID_CREATETEXTURE1D_UNRECOGNIZEDCPUACCESSFLAGS = 79;
export const D3D10_MESSAGE_ID_CREATETEXTURE1D_UNRECOGNIZEDMISCFLAGS = 80;
export const D3D10_MESSAGE_ID_CREATETEXTURE1D_INVALIDCPUACCESSFLAGS = 81;
export const D3D10_MESSAGE_ID_CREATETEXTURE1D_INVALIDBINDFLAGS = 82;
export const D3D10_MESSAGE_ID_CREATETEXTURE1D_INVALIDINITIALDATA = 83;
export const D3D10_MESSAGE_ID_CREATETEXTURE1D_INVALIDDIMENSIONS = 84;
export const D3D10_MESSAGE_ID_CREATETEXTURE1D_INVALIDMIPLEVELS = 85;
export const D3D10_MESSAGE_ID_CREATETEXTURE1D_INVALIDMISCFLAGS = 86;
export const D3D10_MESSAGE_ID_CREATETEXTURE1D_INVALIDARG_RETURN = 87;
export const D3D10_MESSAGE_ID_CREATETEXTURE1D_OUTOFMEMORY_RETURN = 88;
export const D3D10_MESSAGE_ID_CREATETEXTURE1D_NULLDESC = 89;
export const D3D10_MESSAGE_ID_CREATETEXTURE1D_LARGEALLOCATION = 90;
export const D3D10_MESSAGE_ID_CREATETEXTURE2D_UNRECOGNIZEDFORMAT = 91;
export const D3D10_MESSAGE_ID_CREATETEXTURE2D_UNSUPPORTEDFORMAT = 92;
export const D3D10_MESSAGE_ID_CREATETEXTURE2D_INVALIDSAMPLES = 93;
export const D3D10_MESSAGE_ID_CREATETEXTURE2D_UNRECOGNIZEDUSAGE = 94;
export const D3D10_MESSAGE_ID_CREATETEXTURE2D_UNRECOGNIZEDBINDFLAGS = 95;
export const D3D10_MESSAGE_ID_CREATETEXTURE2D_UNRECOGNIZEDCPUACCESSFLAGS = 96;
export const D3D10_MESSAGE_ID_CREATETEXTURE2D_UNRECOGNIZEDMISCFLAGS = 97;
export const D3D10_MESSAGE_ID_CREATETEXTURE2D_INVALIDCPUACCESSFLAGS = 98;
export const D3D10_MESSAGE_ID_CREATETEXTURE2D_INVALIDBINDFLAGS = 99;
export const D3D10_MESSAGE_ID_CREATETEXTURE2D_INVALIDINITIALDATA = 100;
export const D3D10_MESSAGE_ID_CREATETEXTURE2D_INVALIDDIMENSIONS = 101;
export const D3D10_MESSAGE_ID_CREATETEXTURE2D_INVALIDMIPLEVELS = 102;
export const D3D10_MESSAGE_ID_CREATETEXTURE2D_INVALIDMISCFLAGS = 103;
export const D3D10_MESSAGE_ID_CREATETEXTURE2D_INVALIDARG_RETURN = 104;
export const D3D10_MESSAGE_ID_CREATETEXTURE2D_OUTOFMEMORY_RETURN = 105;
export const D3D10_MESSAGE_ID_CREATETEXTURE2D_NULLDESC = 106;
export const D3D10_MESSAGE_ID_CREATETEXTURE2D_LARGEALLOCATION = 107;
export const D3D10_MESSAGE_ID_CREATETEXTURE3D_UNRECOGNIZEDFORMAT = 108;
export const D3D10_MESSAGE_ID_CREATETEXTURE3D_UNSUPPORTEDFORMAT = 109;
export const D3D10_MESSAGE_ID_CREATETEXTURE3D_INVALIDSAMPLES = 110;
export const D3D10_MESSAGE_ID_CREATETEXTURE3D_UNRECOGNIZEDUSAGE = 111;
export const D3D10_MESSAGE_ID_CREATETEXTURE3D_UNRECOGNIZEDBINDFLAGS = 112;
export const D3D10_MESSAGE_ID_CREATETEXTURE3D_UNRECOGNIZEDCPUACCESSFLAGS = 113;
export const D3D10_MESSAGE_ID_CREATETEXTURE3D_UNRECOGNIZEDMISCFLAGS = 114;
export const D3D10_MESSAGE_ID_CREATETEXTURE3D_INVALIDCPUACCESSFLAGS = 115;
export const D3D10_MESSAGE_ID_CREATETEXTURE3D_INVALIDBINDFLAGS = 116;
export const D3D10_MESSAGE_ID_CREATETEXTURE3D_INVALIDINITIALDATA = 117;
export const D3D10_MESSAGE_ID_CREATETEXTURE3D_INVALIDDIMENSIONS = 118;
export const D3D10_MESSAGE_ID_CREATETEXTURE3D_INVALIDMIPLEVELS = 119;
export const D3D10_MESSAGE_ID_CREATETEXTURE3D_INVALIDMISCFLAGS = 120;
export const D3D10_MESSAGE_ID_CREATETEXTURE3D_INVALIDARG_RETURN = 121;
export const D3D10_MESSAGE_ID_CREATETEXTURE3D_OUTOFMEMORY_RETURN = 122;
export const D3D10_MESSAGE_ID_CREATETEXTURE3D_NULLDESC = 123;
export const D3D10_MESSAGE_ID_CREATETEXTURE3D_LARGEALLOCATION = 124;
export const D3D10_MESSAGE_ID_CREATESHADERRESOURCEVIEW_UNRECOGNIZEDFORMAT = 125;
export const D3D10_MESSAGE_ID_CREATESHADERRESOURCEVIEW_INVALIDDESC = 126;
export const D3D10_MESSAGE_ID_CREATESHADERRESOURCEVIEW_INVALIDFORMAT = 127;
export const D3D10_MESSAGE_ID_CREATESHADERRESOURCEVIEW_INVALIDDIMENSIONS = 128;
export const D3D10_MESSAGE_ID_CREATESHADERRESOURCEVIEW_INVALIDRESOURCE = 129;
export const D3D10_MESSAGE_ID_CREATESHADERRESOURCEVIEW_TOOMANYOBJECTS = 130;
export const D3D10_MESSAGE_ID_CREATESHADERRESOURCEVIEW_INVALIDARG_RETURN = 131;
export const D3D10_MESSAGE_ID_CREATESHADERRESOURCEVIEW_OUTOFMEMORY_RETURN = 132;
export const D3D10_MESSAGE_ID_CREATERENDERTARGETVIEW_UNRECOGNIZEDFORMAT = 133;
export const D3D10_MESSAGE_ID_CREATERENDERTARGETVIEW_UNSUPPORTEDFORMAT = 134;
export const D3D10_MESSAGE_ID_CREATERENDERTARGETVIEW_INVALIDDESC = 135;
export const D3D10_MESSAGE_ID_CREATERENDERTARGETVIEW_INVALIDFORMAT = 136;
export const D3D10_MESSAGE_ID_CREATERENDERTARGETVIEW_INVALIDDIMENSIONS = 137;
export const D3D10_MESSAGE_ID_CREATERENDERTARGETVIEW_INVALIDRESOURCE = 138;
export const D3D10_MESSAGE_ID_CREATERENDERTARGETVIEW_TOOMANYOBJECTS = 139;
export const D3D10_MESSAGE_ID_CREATERENDERTARGETVIEW_INVALIDARG_RETURN = 140;
export const D3D10_MESSAGE_ID_CREATERENDERTARGETVIEW_OUTOFMEMORY_RETURN = 141;
export const D3D10_MESSAGE_ID_CREATEDEPTHSTENCILVIEW_UNRECOGNIZEDFORMAT = 142;
export const D3D10_MESSAGE_ID_CREATEDEPTHSTENCILVIEW_INVALIDDESC = 143;
export const D3D10_MESSAGE_ID_CREATEDEPTHSTENCILVIEW_INVALIDFORMAT = 144;
export const D3D10_MESSAGE_ID_CREATEDEPTHSTENCILVIEW_INVALIDDIMENSIONS = 145;
export const D3D10_MESSAGE_ID_CREATEDEPTHSTENCILVIEW_INVALIDRESOURCE = 146;
export const D3D10_MESSAGE_ID_CREATEDEPTHSTENCILVIEW_TOOMANYOBJECTS = 147;
export const D3D10_MESSAGE_ID_CREATEDEPTHSTENCILVIEW_INVALIDARG_RETURN = 148;
export const D3D10_MESSAGE_ID_CREATEDEPTHSTENCILVIEW_OUTOFMEMORY_RETURN = 149;
export const D3D10_MESSAGE_ID_CREATEINPUTLAYOUT_OUTOFMEMORY = 150;
export const D3D10_MESSAGE_ID_CREATEINPUTLAYOUT_TOOMANYELEMENTS = 151;
export const D3D10_MESSAGE_ID_CREATEINPUTLAYOUT_INVALIDFORMAT = 152;
export const D3D10_MESSAGE_ID_CREATEINPUTLAYOUT_INCOMPATIBLEFORMAT = 153;
export const D3D10_MESSAGE_ID_CREATEINPUTLAYOUT_INVALIDSLOT = 154;
export const D3D10_MESSAGE_ID_CREATEINPUTLAYOUT_INVALIDINPUTSLOTCLASS = 155;
export const D3D10_MESSAGE_ID_CREATEINPUTLAYOUT_STEPRATESLOTCLASSMISMATCH = 156;
export const D3D10_MESSAGE_ID_CREATEINPUTLAYOUT_INVALIDSLOTCLASSCHANGE = 157;
export const D3D10_MESSAGE_ID_CREATEINPUTLAYOUT_INVALIDSTEPRATECHANGE = 158;
export const D3D10_MESSAGE_ID_CREATEINPUTLAYOUT_INVALIDALIGNMENT = 159;
export const D3D10_MESSAGE_ID_CREATEINPUTLAYOUT_DUPLICATESEMANTIC = 160;
export const D3D10_MESSAGE_ID_CREATEINPUTLAYOUT_UNPARSEABLEINPUTSIGNATURE = 161;
export const D3D10_MESSAGE_ID_CREATEINPUTLAYOUT_NULLSEMANTIC = 162;
export const D3D10_MESSAGE_ID_CREATEINPUTLAYOUT_MISSINGELEMENT = 163;
export const D3D10_MESSAGE_ID_CREATEINPUTLAYOUT_NULLDESC = 164;
export const D3D10_MESSAGE_ID_CREATEVERTEXSHADER_OUTOFMEMORY = 165;
export const D3D10_MESSAGE_ID_CREATEVERTEXSHADER_INVALIDSHADERBYTECODE = 166;
export const D3D10_MESSAGE_ID_CREATEVERTEXSHADER_INVALIDSHADERTYPE = 167;
export const D3D10_MESSAGE_ID_CREATEGEOMETRYSHADER_OUTOFMEMORY = 168;
export const D3D10_MESSAGE_ID_CREATEGEOMETRYSHADER_INVALIDSHADERBYTECODE = 169;
export const D3D10_MESSAGE_ID_CREATEGEOMETRYSHADER_INVALIDSHADERTYPE = 170;
export const D3D10_MESSAGE_ID_CREATEGEOMETRYSHADERWITHSTREAMOUTPUT_OUTOFMEMORY = 171;
export const D3D10_MESSAGE_ID_CREATEGEOMETRYSHADERWITHSTREAMOUTPUT_INVALIDSHADERBYTECODE = 172;
export const D3D10_MESSAGE_ID_CREATEGEOMETRYSHADERWITHSTREAMOUTPUT_INVALIDSHADERTYPE = 173;
export const D3D10_MESSAGE_ID_CREATEGEOMETRYSHADERWITHSTREAMOUTPUT_INVALIDNUMENTRIES = 174;
export const D3D10_MESSAGE_ID_CREATEGEOMETRYSHADERWITHSTREAMOUTPUT_OUTPUTSTREAMSTRIDEUNUSED = 175;
export const D3D10_MESSAGE_ID_CREATEGEOMETRYSHADERWITHSTREAMOUTPUT_UNEXPECTEDDECL = 176;
export const D3D10_MESSAGE_ID_CREATEGEOMETRYSHADERWITHSTREAMOUTPUT_EXPECTEDDECL = 177;
export const D3D10_MESSAGE_ID_CREATEGEOMETRYSHADERWITHSTREAMOUTPUT_OUTPUTSLOT0EXPECTED = 178;
export const D3D10_MESSAGE_ID_CREATEGEOMETRYSHADERWITHSTREAMOUTPUT_INVALIDOUTPUTSLOT = 179;
export const D3D10_MESSAGE_ID_CREATEGEOMETRYSHADERWITHSTREAMOUTPUT_ONLYONEELEMENTPERSLOT = 180;
export const D3D10_MESSAGE_ID_CREATEGEOMETRYSHADERWITHSTREAMOUTPUT_INVALIDCOMPONENTCOUNT = 181;
export const D3D10_MESSAGE_ID_CREATEGEOMETRYSHADERWITHSTREAMOUTPUT_INVALIDSTARTCOMPONENTANDCOMPONENTCOUNT = 182;
export const D3D10_MESSAGE_ID_CREATEGEOMETRYSHADERWITHSTREAMOUTPUT_INVALIDGAPDEFINITION = 183;
export const D3D10_MESSAGE_ID_CREATEGEOMETRYSHADERWITHSTREAMOUTPUT_REPEATEDOUTPUT = 184;
export const D3D10_MESSAGE_ID_CREATEGEOMETRYSHADERWITHSTREAMOUTPUT_INVALIDOUTPUTSTREAMSTRIDE = 185;
export const D3D10_MESSAGE_ID_CREATEGEOMETRYSHADERWITHSTREAMOUTPUT_MISSINGSEMANTIC = 186;
export const D3D10_MESSAGE_ID_CREATEGEOMETRYSHADERWITHSTREAMOUTPUT_MASKMISMATCH = 187;
export const D3D10_MESSAGE_ID_CREATEGEOMETRYSHADERWITHSTREAMOUTPUT_CANTHAVEONLYGAPS = 188;
export const D3D10_MESSAGE_ID_CREATEGEOMETRYSHADERWITHSTREAMOUTPUT_DECLTOOCOMPLEX = 189;
export const D3D10_MESSAGE_ID_CREATEGEOMETRYSHADERWITHSTREAMOUTPUT_MISSINGOUTPUTSIGNATURE = 190;
export const D3D10_MESSAGE_ID_CREATEPIXELSHADER_OUTOFMEMORY = 191;
export const D3D10_MESSAGE_ID_CREATEPIXELSHADER_INVALIDSHADERBYTECODE = 192;
export const D3D10_MESSAGE_ID_CREATEPIXELSHADER_INVALIDSHADERTYPE = 193;
export const D3D10_MESSAGE_ID_CREATERASTERIZERSTATE_INVALIDFILLMODE = 194;
export const D3D10_MESSAGE_ID_CREATERASTERIZERSTATE_INVALIDCULLMODE = 195;
export const D3D10_MESSAGE_ID_CREATERASTERIZERSTATE_INVALIDDEPTHBIASCLAMP = 196;
export const D3D10_MESSAGE_ID_CREATERASTERIZERSTATE_INVALIDSLOPESCALEDDEPTHBIAS = 197;
export const D3D10_MESSAGE_ID_CREATERASTERIZERSTATE_TOOMANYOBJECTS = 198;
export const D3D10_MESSAGE_ID_CREATERASTERIZERSTATE_NULLDESC = 199;
export const D3D10_MESSAGE_ID_CREATEDEPTHSTENCILSTATE_INVALIDDEPTHWRITEMASK = 200;
export const D3D10_MESSAGE_ID_CREATEDEPTHSTENCILSTATE_INVALIDDEPTHFUNC = 201;
export const D3D10_MESSAGE_ID_CREATEDEPTHSTENCILSTATE_INVALIDFRONTFACESTENCILFAILOP = 202;
export const D3D10_MESSAGE_ID_CREATEDEPTHSTENCILSTATE_INVALIDFRONTFACESTENCILZFAILOP = 203;
export const D3D10_MESSAGE_ID_CREATEDEPTHSTENCILSTATE_INVALIDFRONTFACESTENCILPASSOP = 204;
export const D3D10_MESSAGE_ID_CREATEDEPTHSTENCILSTATE_INVALIDFRONTFACESTENCILFUNC = 205;
export const D3D10_MESSAGE_ID_CREATEDEPTHSTENCILSTATE_INVALIDBACKFACESTENCILFAILOP = 206;
export const D3D10_MESSAGE_ID_CREATEDEPTHSTENCILSTATE_INVALIDBACKFACESTENCILZFAILOP = 207;
export const D3D10_MESSAGE_ID_CREATEDEPTHSTENCILSTATE_INVALIDBACKFACESTENCILPASSOP = 208;
export const D3D10_MESSAGE_ID_CREATEDEPTHSTENCILSTATE_INVALIDBACKFACESTENCILFUNC = 209;
export const D3D10_MESSAGE_ID_CREATEDEPTHSTENCILSTATE_TOOMANYOBJECTS = 210;
export const D3D10_MESSAGE_ID_CREATEDEPTHSTENCILSTATE_NULLDESC = 211;
export const D3D10_MESSAGE_ID_CREATEBLENDSTATE_INVALIDSRCBLEND = 212;
export const D3D10_MESSAGE_ID_CREATEBLENDSTATE_INVALIDDESTBLEND = 213;
export const D3D10_MESSAGE_ID_CREATEBLENDSTATE_INVALIDBLENDOP = 214;
export const D3D10_MESSAGE_ID_CREATEBLENDSTATE_INVALIDSRCBLENDALPHA = 215;
export const D3D10_MESSAGE_ID_CREATEBLENDSTATE_INVALIDDESTBLENDALPHA = 216;
export const D3D10_MESSAGE_ID_CREATEBLENDSTATE_INVALIDBLENDOPALPHA = 217;
export const D3D10_MESSAGE_ID_CREATEBLENDSTATE_INVALIDRENDERTARGETWRITEMASK = 218;
export const D3D10_MESSAGE_ID_CREATEBLENDSTATE_TOOMANYOBJECTS = 219;
export const D3D10_MESSAGE_ID_CREATEBLENDSTATE_NULLDESC = 220;
export const D3D10_MESSAGE_ID_CREATESAMPLERSTATE_INVALIDFILTER = 221;
export const D3D10_MESSAGE_ID_CREATESAMPLERSTATE_INVALIDADDRESSU = 222;
export const D3D10_MESSAGE_ID_CREATESAMPLERSTATE_INVALIDADDRESSV = 223;
export const D3D10_MESSAGE_ID_CREATESAMPLERSTATE_INVALIDADDRESSW = 224;
export const D3D10_MESSAGE_ID_CREATESAMPLERSTATE_INVALIDMIPLODBIAS = 225;
export const D3D10_MESSAGE_ID_CREATESAMPLERSTATE_INVALIDMAXANISOTROPY = 226;
export const D3D10_MESSAGE_ID_CREATESAMPLERSTATE_INVALIDCOMPARISONFUNC = 227;
export const D3D10_MESSAGE_ID_CREATESAMPLERSTATE_INVALIDMINLOD = 228;
export const D3D10_MESSAGE_ID_CREATESAMPLERSTATE_INVALIDMAXLOD = 229;
export const D3D10_MESSAGE_ID_CREATESAMPLERSTATE_TOOMANYOBJECTS = 230;
export const D3D10_MESSAGE_ID_CREATESAMPLERSTATE_NULLDESC = 231;
export const D3D10_MESSAGE_ID_CREATEQUERYORPREDICATE_INVALIDQUERY = 232;
export const D3D10_MESSAGE_ID_CREATEQUERYORPREDICATE_INVALIDMISCFLAGS = 233;
export const D3D10_MESSAGE_ID_CREATEQUERYORPREDICATE_UNEXPECTEDMISCFLAG = 234;
export const D3D10_MESSAGE_ID_CREATEQUERYORPREDICATE_NULLDESC = 235;
export const D3D10_MESSAGE_ID_DEVICE_IASETPRIMITIVETOPOLOGY_TOPOLOGY_UNRECOGNIZED = 236;
export const D3D10_MESSAGE_ID_DEVICE_IASETPRIMITIVETOPOLOGY_TOPOLOGY_UNDEFINED = 237;
export const D3D10_MESSAGE_ID_IASETVERTEXBUFFERS_INVALIDBUFFER = 238;
export const D3D10_MESSAGE_ID_DEVICE_IASETVERTEXBUFFERS_OFFSET_TOO_LARGE = 239;
export const D3D10_MESSAGE_ID_DEVICE_IASETVERTEXBUFFERS_BUFFERS_EMPTY = 240;
export const D3D10_MESSAGE_ID_IASETINDEXBUFFER_INVALIDBUFFER = 241;
export const D3D10_MESSAGE_ID_DEVICE_IASETINDEXBUFFER_FORMAT_INVALID = 242;
export const D3D10_MESSAGE_ID_DEVICE_IASETINDEXBUFFER_OFFSET_TOO_LARGE = 243;
export const D3D10_MESSAGE_ID_DEVICE_IASETINDEXBUFFER_OFFSET_UNALIGNED = 244;
export const D3D10_MESSAGE_ID_DEVICE_VSSETSHADERRESOURCES_VIEWS_EMPTY = 245;
export const D3D10_MESSAGE_ID_VSSETCONSTANTBUFFERS_INVALIDBUFFER = 246;
export const D3D10_MESSAGE_ID_DEVICE_VSSETCONSTANTBUFFERS_BUFFERS_EMPTY = 247;
export const D3D10_MESSAGE_ID_DEVICE_VSSETSAMPLERS_SAMPLERS_EMPTY = 248;
export const D3D10_MESSAGE_ID_DEVICE_GSSETSHADERRESOURCES_VIEWS_EMPTY = 249;
export const D3D10_MESSAGE_ID_GSSETCONSTANTBUFFERS_INVALIDBUFFER = 250;
export const D3D10_MESSAGE_ID_DEVICE_GSSETCONSTANTBUFFERS_BUFFERS_EMPTY = 251;
export const D3D10_MESSAGE_ID_DEVICE_GSSETSAMPLERS_SAMPLERS_EMPTY = 252;
export const D3D10_MESSAGE_ID_SOSETTARGETS_INVALIDBUFFER = 253;
export const D3D10_MESSAGE_ID_DEVICE_SOSETTARGETS_OFFSET_UNALIGNED = 254;
export const D3D10_MESSAGE_ID_DEVICE_PSSETSHADERRESOURCES_VIEWS_EMPTY = 255;
export const D3D10_MESSAGE_ID_PSSETCONSTANTBUFFERS_INVALIDBUFFER = 256;
export const D3D10_MESSAGE_ID_DEVICE_PSSETCONSTANTBUFFERS_BUFFERS_EMPTY = 257;
export const D3D10_MESSAGE_ID_DEVICE_PSSETSAMPLERS_SAMPLERS_EMPTY = 258;
export const D3D10_MESSAGE_ID_DEVICE_RSSETVIEWPORTS_INVALIDVIEWPORT = 259;
export const D3D10_MESSAGE_ID_DEVICE_RSSETSCISSORRECTS_INVALIDSCISSOR = 260;
export const D3D10_MESSAGE_ID_CLEARRENDERTARGETVIEW_DENORMFLUSH = 261;
export const D3D10_MESSAGE_ID_CLEARDEPTHSTENCILVIEW_DENORMFLUSH = 262;
export const D3D10_MESSAGE_ID_CLEARDEPTHSTENCILVIEW_INVALID = 263;
export const D3D10_MESSAGE_ID_DEVICE_IAGETVERTEXBUFFERS_BUFFERS_EMPTY = 264;
export const D3D10_MESSAGE_ID_DEVICE_VSGETSHADERRESOURCES_VIEWS_EMPTY = 265;
export const D3D10_MESSAGE_ID_DEVICE_VSGETCONSTANTBUFFERS_BUFFERS_EMPTY = 266;
export const D3D10_MESSAGE_ID_DEVICE_VSGETSAMPLERS_SAMPLERS_EMPTY = 267;
export const D3D10_MESSAGE_ID_DEVICE_GSGETSHADERRESOURCES_VIEWS_EMPTY = 268;
export const D3D10_MESSAGE_ID_DEVICE_GSGETCONSTANTBUFFERS_BUFFERS_EMPTY = 269;
export const D3D10_MESSAGE_ID_DEVICE_GSGETSAMPLERS_SAMPLERS_EMPTY = 270;
export const D3D10_MESSAGE_ID_DEVICE_SOGETTARGETS_BUFFERS_EMPTY = 271;
export const D3D10_MESSAGE_ID_DEVICE_PSGETSHADERRESOURCES_VIEWS_EMPTY = 272;
export const D3D10_MESSAGE_ID_DEVICE_PSGETCONSTANTBUFFERS_BUFFERS_EMPTY = 273;
export const D3D10_MESSAGE_ID_DEVICE_PSGETSAMPLERS_SAMPLERS_EMPTY = 274;
export const D3D10_MESSAGE_ID_DEVICE_RSGETVIEWPORTS_VIEWPORTS_EMPTY = 275;
export const D3D10_MESSAGE_ID_DEVICE_RSGETSCISSORRECTS_RECTS_EMPTY = 276;
export const D3D10_MESSAGE_ID_DEVICE_GENERATEMIPS_RESOURCE_INVALID = 277;
export const D3D10_MESSAGE_ID_COPYSUBRESOURCEREGION_INVALIDDESTINATIONSUBRESOURCE = 278;
export const D3D10_MESSAGE_ID_COPYSUBRESOURCEREGION_INVALIDSOURCESUBRESOURCE = 279;
export const D3D10_MESSAGE_ID_COPYSUBRESOURCEREGION_INVALIDSOURCEBOX = 280;
export const D3D10_MESSAGE_ID_COPYSUBRESOURCEREGION_INVALIDSOURCE = 281;
export const D3D10_MESSAGE_ID_COPYSUBRESOURCEREGION_INVALIDDESTINATIONSTATE = 282;
export const D3D10_MESSAGE_ID_COPYSUBRESOURCEREGION_INVALIDSOURCESTATE = 283;
export const D3D10_MESSAGE_ID_COPYRESOURCE_INVALIDSOURCE = 284;
export const D3D10_MESSAGE_ID_COPYRESOURCE_INVALIDDESTINATIONSTATE = 285;
export const D3D10_MESSAGE_ID_COPYRESOURCE_INVALIDSOURCESTATE = 286;
export const D3D10_MESSAGE_ID_UPDATESUBRESOURCE_INVALIDDESTINATIONSUBRESOURCE = 287;
export const D3D10_MESSAGE_ID_UPDATESUBRESOURCE_INVALIDDESTINATIONBOX = 288;
export const D3D10_MESSAGE_ID_UPDATESUBRESOURCE_INVALIDDESTINATIONSTATE = 289;
export const D3D10_MESSAGE_ID_DEVICE_RESOLVESUBRESOURCE_DESTINATION_INVALID = 290;
export const D3D10_MESSAGE_ID_DEVICE_RESOLVESUBRESOURCE_DESTINATION_SUBRESOURCE_INVALID = 291;
export const D3D10_MESSAGE_ID_DEVICE_RESOLVESUBRESOURCE_SOURCE_INVALID = 292;
export const D3D10_MESSAGE_ID_DEVICE_RESOLVESUBRESOURCE_SOURCE_SUBRESOURCE_INVALID = 293;
export const D3D10_MESSAGE_ID_DEVICE_RESOLVESUBRESOURCE_FORMAT_INVALID = 294;
export const D3D10_MESSAGE_ID_BUFFER_MAP_INVALIDMAPTYPE = 295;
export const D3D10_MESSAGE_ID_BUFFER_MAP_INVALIDFLAGS = 296;
export const D3D10_MESSAGE_ID_BUFFER_MAP_ALREADYMAPPED = 297;
export const D3D10_MESSAGE_ID_BUFFER_MAP_DEVICEREMOVED_RETURN = 298;
export const D3D10_MESSAGE_ID_BUFFER_UNMAP_NOTMAPPED = 299;
export const D3D10_MESSAGE_ID_TEXTURE1D_MAP_INVALIDMAPTYPE = 300;
export const D3D10_MESSAGE_ID_TEXTURE1D_MAP_INVALIDSUBRESOURCE = 301;
export const D3D10_MESSAGE_ID_TEXTURE1D_MAP_INVALIDFLAGS = 302;
export const D3D10_MESSAGE_ID_TEXTURE1D_MAP_ALREADYMAPPED = 303;
export const D3D10_MESSAGE_ID_TEXTURE1D_MAP_DEVICEREMOVED_RETURN = 304;
export const D3D10_MESSAGE_ID_TEXTURE1D_UNMAP_INVALIDSUBRESOURCE = 305;
export const D3D10_MESSAGE_ID_TEXTURE1D_UNMAP_NOTMAPPED = 306;
export const D3D10_MESSAGE_ID_TEXTURE2D_MAP_INVALIDMAPTYPE = 307;
export const D3D10_MESSAGE_ID_TEXTURE2D_MAP_INVALIDSUBRESOURCE = 308;
export const D3D10_MESSAGE_ID_TEXTURE2D_MAP_INVALIDFLAGS = 309;
export const D3D10_MESSAGE_ID_TEXTURE2D_MAP_ALREADYMAPPED = 310;
export const D3D10_MESSAGE_ID_TEXTURE2D_MAP_DEVICEREMOVED_RETURN = 311;
export const D3D10_MESSAGE_ID_TEXTURE2D_UNMAP_INVALIDSUBRESOURCE = 312;
export const D3D10_MESSAGE_ID_TEXTURE2D_UNMAP_NOTMAPPED = 313;
export const D3D10_MESSAGE_ID_TEXTURE3D_MAP_INVALIDMAPTYPE = 314;
export const D3D10_MESSAGE_ID_TEXTURE3D_MAP_INVALIDSUBRESOURCE = 315;
export const D3D10_MESSAGE_ID_TEXTURE3D_MAP_INVALIDFLAGS = 316;
export const D3D10_MESSAGE_ID_TEXTURE3D_MAP_ALREADYMAPPED = 317;
export const D3D10_MESSAGE_ID_TEXTURE3D_MAP_DEVICEREMOVED_RETURN = 318;
export const D3D10_MESSAGE_ID_TEXTURE3D_UNMAP_INVALIDSUBRESOURCE = 319;
export const D3D10_MESSAGE_ID_TEXTURE3D_UNMAP_NOTMAPPED = 320;
export const D3D10_MESSAGE_ID_CHECKFORMATSUPPORT_FORMAT_DEPRECATED = 321;
export const D3D10_MESSAGE_ID_CHECKMULTISAMPLEQUALITYLEVELS_FORMAT_DEPRECATED = 322;
export const D3D10_MESSAGE_ID_SETEXCEPTIONMODE_UNRECOGNIZEDFLAGS = 323;
export const D3D10_MESSAGE_ID_SETEXCEPTIONMODE_INVALIDARG_RETURN = 324;
export const D3D10_MESSAGE_ID_SETEXCEPTIONMODE_DEVICEREMOVED_RETURN = 325;
export const D3D10_MESSAGE_ID_REF_SIMULATING_INFINITELY_FAST_HARDWARE = 326;
export const D3D10_MESSAGE_ID_REF_THREADING_MODE = 327;
export const D3D10_MESSAGE_ID_REF_UMDRIVER_EXCEPTION = 328;
export const D3D10_MESSAGE_ID_REF_KMDRIVER_EXCEPTION = 329;
export const D3D10_MESSAGE_ID_REF_HARDWARE_EXCEPTION = 330;
export const D3D10_MESSAGE_ID_REF_ACCESSING_INDEXABLE_TEMP_OUT_OF_RANGE = 331;
export const D3D10_MESSAGE_ID_REF_PROBLEM_PARSING_SHADER = 332;
export const D3D10_MESSAGE_ID_REF_OUT_OF_MEMORY = 333;
export const D3D10_MESSAGE_ID_REF_INFO = 334;
export const D3D10_MESSAGE_ID_DEVICE_DRAW_VERTEXPOS_OVERFLOW = 335;
export const D3D10_MESSAGE_ID_DEVICE_DRAWINDEXED_INDEXPOS_OVERFLOW = 336;
export const D3D10_MESSAGE_ID_DEVICE_DRAWINSTANCED_VERTEXPOS_OVERFLOW = 337;
export const D3D10_MESSAGE_ID_DEVICE_DRAWINSTANCED_INSTANCEPOS_OVERFLOW = 338;
export const D3D10_MESSAGE_ID_DEVICE_DRAWINDEXEDINSTANCED_INSTANCEPOS_OVERFLOW = 339;
export const D3D10_MESSAGE_ID_DEVICE_DRAWINDEXEDINSTANCED_INDEXPOS_OVERFLOW = 340;
export const D3D10_MESSAGE_ID_DEVICE_DRAW_VERTEX_SHADER_NOT_SET = 341;
export const D3D10_MESSAGE_ID_DEVICE_SHADER_LINKAGE_SEMANTICNAME_NOT_FOUND = 342;
export const D3D10_MESSAGE_ID_DEVICE_SHADER_LINKAGE_REGISTERINDEX = 343;
export const D3D10_MESSAGE_ID_DEVICE_SHADER_LINKAGE_COMPONENTTYPE = 344;
export const D3D10_MESSAGE_ID_DEVICE_SHADER_LINKAGE_REGISTERMASK = 345;
export const D3D10_MESSAGE_ID_DEVICE_SHADER_LINKAGE_SYSTEMVALUE = 346;
export const D3D10_MESSAGE_ID_DEVICE_SHADER_LINKAGE_NEVERWRITTEN_ALWAYSREADS = 347;
export const D3D10_MESSAGE_ID_DEVICE_DRAW_VERTEX_BUFFER_NOT_SET = 348;
export const D3D10_MESSAGE_ID_DEVICE_DRAW_INPUTLAYOUT_NOT_SET = 349;
export const D3D10_MESSAGE_ID_DEVICE_DRAW_CONSTANT_BUFFER_NOT_SET = 350;
export const D3D10_MESSAGE_ID_DEVICE_DRAW_CONSTANT_BUFFER_TOO_SMALL = 351;
export const D3D10_MESSAGE_ID_DEVICE_DRAW_SAMPLER_NOT_SET = 352;
export const D3D10_MESSAGE_ID_DEVICE_DRAW_SHADERRESOURCEVIEW_NOT_SET = 353;
export const D3D10_MESSAGE_ID_DEVICE_DRAW_VIEW_DIMENSION_MISMATCH = 354;
export const D3D10_MESSAGE_ID_DEVICE_DRAW_VERTEX_BUFFER_STRIDE_TOO_SMALL = 355;
export const D3D10_MESSAGE_ID_DEVICE_DRAW_VERTEX_BUFFER_TOO_SMALL = 356;
export const D3D10_MESSAGE_ID_DEVICE_DRAW_INDEX_BUFFER_NOT_SET = 357;
export const D3D10_MESSAGE_ID_DEVICE_DRAW_INDEX_BUFFER_FORMAT_INVALID = 358;
export const D3D10_MESSAGE_ID_DEVICE_DRAW_INDEX_BUFFER_TOO_SMALL = 359;
export const D3D10_MESSAGE_ID_DEVICE_DRAW_GS_INPUT_PRIMITIVE_MISMATCH = 360;
export const D3D10_MESSAGE_ID_DEVICE_DRAW_RESOURCE_RETURN_TYPE_MISMATCH = 361;
export const D3D10_MESSAGE_ID_DEVICE_DRAW_POSITION_NOT_PRESENT = 362;
export const D3D10_MESSAGE_ID_DEVICE_DRAW_OUTPUT_STREAM_NOT_SET = 363;
export const D3D10_MESSAGE_ID_DEVICE_DRAW_BOUND_RESOURCE_MAPPED = 364;
export const D3D10_MESSAGE_ID_DEVICE_DRAW_INVALID_PRIMITIVETOPOLOGY = 365;
export const D3D10_MESSAGE_ID_DEVICE_DRAW_VERTEX_OFFSET_UNALIGNED = 366;
export const D3D10_MESSAGE_ID_DEVICE_DRAW_VERTEX_STRIDE_UNALIGNED = 367;
export const D3D10_MESSAGE_ID_DEVICE_DRAW_INDEX_OFFSET_UNALIGNED = 368;
export const D3D10_MESSAGE_ID_DEVICE_DRAW_OUTPUT_STREAM_OFFSET_UNALIGNED = 369;
export const D3D10_MESSAGE_ID_DEVICE_DRAW_RESOURCE_FORMAT_LD_UNSUPPORTED = 370;
export const D3D10_MESSAGE_ID_DEVICE_DRAW_RESOURCE_FORMAT_SAMPLE_UNSUPPORTED = 371;
export const D3D10_MESSAGE_ID_DEVICE_DRAW_RESOURCE_FORMAT_SAMPLE_C_UNSUPPORTED = 372;
export const D3D10_MESSAGE_ID_DEVICE_DRAW_RESOURCE_MULTISAMPLE_UNSUPPORTED = 373;
export const D3D10_MESSAGE_ID_DEVICE_DRAW_SO_TARGETS_BOUND_WITHOUT_SOURCE = 374;
export const D3D10_MESSAGE_ID_DEVICE_DRAW_SO_STRIDE_LARGER_THAN_BUFFER = 375;
export const D3D10_MESSAGE_ID_DEVICE_DRAW_OM_RENDER_TARGET_DOES_NOT_SUPPORT_BLENDING = 376;
export const D3D10_MESSAGE_ID_DEVICE_DRAW_OM_DUAL_SOURCE_BLENDING_CAN_ONLY_HAVE_RENDER_TARGET_0 = 377;
export const D3D10_MESSAGE_ID_DEVICE_REMOVAL_PROCESS_AT_FAULT = 378;
export const D3D10_MESSAGE_ID_DEVICE_REMOVAL_PROCESS_POSSIBLY_AT_FAULT = 379;
export const D3D10_MESSAGE_ID_DEVICE_REMOVAL_PROCESS_NOT_AT_FAULT = 380;
export const D3D10_MESSAGE_ID_DEVICE_OPEN_SHARED_RESOURCE_INVALIDARG_RETURN = 381;
export const D3D10_MESSAGE_ID_DEVICE_OPEN_SHARED_RESOURCE_OUTOFMEMORY_RETURN = 382;
export const D3D10_MESSAGE_ID_DEVICE_OPEN_SHARED_RESOURCE_BADINTERFACE_RETURN = 383;
export const D3D10_MESSAGE_ID_DEVICE_DRAW_VIEWPORT_NOT_SET = 384;
export const D3D10_MESSAGE_ID_CREATEINPUTLAYOUT_TRAILING_DIGIT_IN_SEMANTIC = 385;
export const D3D10_MESSAGE_ID_CREATEGEOMETRYSHADERWITHSTREAMOUTPUT_TRAILING_DIGIT_IN_SEMANTIC = 386;
export const D3D10_MESSAGE_ID_DEVICE_RSSETVIEWPORTS_DENORMFLUSH = 387;
export const D3D10_MESSAGE_ID_OMSETRENDERTARGETS_INVALIDVIEW = 388;
export const D3D10_MESSAGE_ID_DEVICE_SETTEXTFILTERSIZE_INVALIDDIMENSIONS = 389;
export const D3D10_MESSAGE_ID_DEVICE_DRAW_SAMPLER_MISMATCH = 390;
export const D3D10_MESSAGE_ID_CREATEINPUTLAYOUT_TYPE_MISMATCH = 391;
export const D3D10_MESSAGE_ID_BLENDSTATE_GETDESC_LEGACY = 392;
export const D3D10_MESSAGE_ID_SHADERRESOURCEVIEW_GETDESC_LEGACY = 393;
export const D3D10_MESSAGE_ID_CREATEQUERY_OUTOFMEMORY_RETURN = 394;
export const D3D10_MESSAGE_ID_CREATEPREDICATE_OUTOFMEMORY_RETURN = 395;
export const D3D10_MESSAGE_ID_CREATECOUNTER_OUTOFRANGE_COUNTER = 396;
export const D3D10_MESSAGE_ID_CREATECOUNTER_SIMULTANEOUS_ACTIVE_COUNTERS_EXHAUSTED = 397;
export const D3D10_MESSAGE_ID_CREATECOUNTER_UNSUPPORTED_WELLKNOWN_COUNTER = 398;
export const D3D10_MESSAGE_ID_CREATECOUNTER_OUTOFMEMORY_RETURN = 399;
export const D3D10_MESSAGE_ID_CREATECOUNTER_NONEXCLUSIVE_RETURN = 400;
export const D3D10_MESSAGE_ID_CREATECOUNTER_NULLDESC = 401;
export const D3D10_MESSAGE_ID_CHECKCOUNTER_OUTOFRANGE_COUNTER = 402;
export const D3D10_MESSAGE_ID_CHECKCOUNTER_UNSUPPORTED_WELLKNOWN_COUNTER = 403;
export const D3D10_MESSAGE_ID_SETPREDICATION_INVALID_PREDICATE_STATE = 404;
export const D3D10_MESSAGE_ID_QUERY_BEGIN_UNSUPPORTED = 405;
export const D3D10_MESSAGE_ID_PREDICATE_BEGIN_DURING_PREDICATION = 406;
export const D3D10_MESSAGE_ID_QUERY_BEGIN_DUPLICATE = 407;
export const D3D10_MESSAGE_ID_QUERY_BEGIN_ABANDONING_PREVIOUS_RESULTS = 408;
export const D3D10_MESSAGE_ID_PREDICATE_END_DURING_PREDICATION = 409;
export const D3D10_MESSAGE_ID_QUERY_END_ABANDONING_PREVIOUS_RESULTS = 410;
export const D3D10_MESSAGE_ID_QUERY_END_WITHOUT_BEGIN = 411;
export const D3D10_MESSAGE_ID_QUERY_GETDATA_INVALID_DATASIZE = 412;
export const D3D10_MESSAGE_ID_QUERY_GETDATA_INVALID_FLAGS = 413;
export const D3D10_MESSAGE_ID_QUERY_GETDATA_INVALID_CALL = 414;
export const D3D10_MESSAGE_ID_DEVICE_DRAW_PS_OUTPUT_TYPE_MISMATCH = 415;
export const D3D10_MESSAGE_ID_DEVICE_DRAW_RESOURCE_FORMAT_GATHER_UNSUPPORTED = 416;
export const D3D10_MESSAGE_ID_DEVICE_DRAW_INVALID_USE_OF_CENTER_MULTISAMPLE_PATTERN = 417;
export const D3D10_MESSAGE_ID_DEVICE_IASETVERTEXBUFFERS_STRIDE_TOO_LARGE = 418;
export const D3D10_MESSAGE_ID_DEVICE_IASETVERTEXBUFFERS_INVALIDRANGE = 419;
export const D3D10_MESSAGE_ID_CREATEINPUTLAYOUT_EMPTY_LAYOUT = 420;
export const D3D10_MESSAGE_ID_DEVICE_DRAW_RESOURCE_SAMPLE_COUNT_MISMATCH = 421;
export const D3D10_MESSAGE_ID_LIVE_OBJECT_SUMMARY = 422;
export const D3D10_MESSAGE_ID_LIVE_BUFFER = 423;
export const D3D10_MESSAGE_ID_LIVE_TEXTURE1D = 424;
export const D3D10_MESSAGE_ID_LIVE_TEXTURE2D = 425;
export const D3D10_MESSAGE_ID_LIVE_TEXTURE3D = 426;
export const D3D10_MESSAGE_ID_LIVE_SHADERRESOURCEVIEW = 427;
export const D3D10_MESSAGE_ID_LIVE_RENDERTARGETVIEW = 428;
export const D3D10_MESSAGE_ID_LIVE_DEPTHSTENCILVIEW = 429;
export const D3D10_MESSAGE_ID_LIVE_VERTEXSHADER = 430;
export const D3D10_MESSAGE_ID_LIVE_GEOMETRYSHADER = 431;
export const D3D10_MESSAGE_ID_LIVE_PIXELSHADER = 432;
export const D3D10_MESSAGE_ID_LIVE_INPUTLAYOUT = 433;
export const D3D10_MESSAGE_ID_LIVE_SAMPLER = 434;
export const D3D10_MESSAGE_ID_LIVE_BLENDSTATE = 435;
export const D3D10_MESSAGE_ID_LIVE_DEPTHSTENCILSTATE = 436;
export const D3D10_MESSAGE_ID_LIVE_RASTERIZERSTATE = 437;
export const D3D10_MESSAGE_ID_LIVE_QUERY = 438;
export const D3D10_MESSAGE_ID_LIVE_PREDICATE = 439;
export const D3D10_MESSAGE_ID_LIVE_COUNTER = 440;
export const D3D10_MESSAGE_ID_LIVE_DEVICE = 441;
export const D3D10_MESSAGE_ID_LIVE_SWAPCHAIN = 442;
export const D3D10_MESSAGE_ID_D3D10_MESSAGES_END = 443;
export const D3D10_MESSAGE_ID_D3D10L9_MESSAGES_START = 1048576;
export const D3D10_MESSAGE_ID_CREATEDEPTHSTENCILSTATE_STENCIL_NO_TWO_SIDED = 1048577;
export const D3D10_MESSAGE_ID_CREATERASTERIZERSTATE_DepthBiasClamp_NOT_SUPPORTED = 1048578;
export const D3D10_MESSAGE_ID_CREATESAMPLERSTATE_NO_COMPARISON_SUPPORT = 1048579;
export const D3D10_MESSAGE_ID_CREATESAMPLERSTATE_EXCESSIVE_ANISOTROPY = 1048580;
export const D3D10_MESSAGE_ID_CREATESAMPLERSTATE_BORDER_OUT_OF_RANGE = 1048581;
export const D3D10_MESSAGE_ID_VSSETSAMPLERS_NOT_SUPPORTED = 1048582;
export const D3D10_MESSAGE_ID_VSSETSAMPLERS_TOO_MANY_SAMPLERS = 1048583;
export const D3D10_MESSAGE_ID_PSSETSAMPLERS_TOO_MANY_SAMPLERS = 1048584;
export const D3D10_MESSAGE_ID_CREATERESOURCE_NO_ARRAYS = 1048585;
export const D3D10_MESSAGE_ID_CREATERESOURCE_NO_VB_AND_IB_BIND = 1048586;
export const D3D10_MESSAGE_ID_CREATERESOURCE_NO_TEXTURE_1D = 1048587;
export const D3D10_MESSAGE_ID_CREATERESOURCE_DIMENSION_OUT_OF_RANGE = 1048588;
export const D3D10_MESSAGE_ID_CREATERESOURCE_NOT_BINDABLE_AS_SHADER_RESOURCE = 1048589;
export const D3D10_MESSAGE_ID_OMSETRENDERTARGETS_TOO_MANY_RENDER_TARGETS = 1048590;
export const D3D10_MESSAGE_ID_OMSETRENDERTARGETS_NO_DIFFERING_BIT_DEPTHS = 1048591;
export const D3D10_MESSAGE_ID_IASETVERTEXBUFFERS_BAD_BUFFER_INDEX = 1048592;
export const D3D10_MESSAGE_ID_DEVICE_RSSETVIEWPORTS_TOO_MANY_VIEWPORTS = 1048593;
export const D3D10_MESSAGE_ID_DEVICE_IASETPRIMITIVETOPOLOGY_ADJACENCY_UNSUPPORTED = 1048594;
export const D3D10_MESSAGE_ID_DEVICE_RSSETSCISSORRECTS_TOO_MANY_SCISSORS = 1048595;
export const D3D10_MESSAGE_ID_COPYRESOURCE_ONLY_TEXTURE_2D_WITHIN_GPU_MEMORY = 1048596;
export const D3D10_MESSAGE_ID_COPYRESOURCE_NO_TEXTURE_3D_READBACK = 1048597;
export const D3D10_MESSAGE_ID_COPYRESOURCE_NO_TEXTURE_ONLY_READBACK = 1048598;
export const D3D10_MESSAGE_ID_CREATEINPUTLAYOUT_UNSUPPORTED_FORMAT = 1048599;
export const D3D10_MESSAGE_ID_CREATEBLENDSTATE_NO_ALPHA_TO_COVERAGE = 1048600;
export const D3D10_MESSAGE_ID_CREATERASTERIZERSTATE_DepthClipEnable_MUST_BE_TRUE = 1048601;
export const D3D10_MESSAGE_ID_DRAWINDEXED_STARTINDEXLOCATION_MUST_BE_POSITIVE = 1048602;
export const D3D10_MESSAGE_ID_CREATESHADERRESOURCEVIEW_MUST_USE_LOWEST_LOD = 1048603;
export const D3D10_MESSAGE_ID_CREATESAMPLERSTATE_MINLOD_MUST_NOT_BE_FRACTIONAL = 1048604;
export const D3D10_MESSAGE_ID_CREATESAMPLERSTATE_MAXLOD_MUST_BE_FLT_MAX = 1048605;
export const D3D10_MESSAGE_ID_CREATESHADERRESOURCEVIEW_FIRSTARRAYSLICE_MUST_BE_ZERO = 1048606;
export const D3D10_MESSAGE_ID_CREATESHADERRESOURCEVIEW_CUBES_MUST_HAVE_6_SIDES = 1048607;
export const D3D10_MESSAGE_ID_CREATERESOURCE_NOT_BINDABLE_AS_RENDER_TARGET = 1048608;
export const D3D10_MESSAGE_ID_CREATERESOURCE_NO_DWORD_INDEX_BUFFER = 1048609;
export const D3D10_MESSAGE_ID_CREATERESOURCE_MSAA_PRECLUDES_SHADER_RESOURCE = 1048610;
export const D3D10_MESSAGE_ID_CREATERESOURCE_PRESENTATION_PRECLUDES_SHADER_RESOURCE = 1048611;
export const D3D10_MESSAGE_ID_CREATEBLENDSTATE_NO_INDEPENDENT_BLEND_ENABLE = 1048612;
export const D3D10_MESSAGE_ID_CREATEBLENDSTATE_NO_INDEPENDENT_WRITE_MASKS = 1048613;
export const D3D10_MESSAGE_ID_CREATERESOURCE_NO_STREAM_OUT = 1048614;
export const D3D10_MESSAGE_ID_CREATERESOURCE_ONLY_VB_IB_FOR_BUFFERS = 1048615;
export const D3D10_MESSAGE_ID_CREATERESOURCE_NO_AUTOGEN_FOR_VOLUMES = 1048616;
export const D3D10_MESSAGE_ID_CREATERESOURCE_DXGI_FORMAT_R8G8B8A8_CANNOT_BE_SHARED = 1048617;
export const D3D10_MESSAGE_ID_VSSHADERRESOURCES_NOT_SUPPORTED = 1048618;
export const D3D10_MESSAGE_ID_GEOMETRY_SHADER_NOT_SUPPORTED = 1048619;
export const D3D10_MESSAGE_ID_STREAM_OUT_NOT_SUPPORTED = 1048620;
export const D3D10_MESSAGE_ID_TEXT_FILTER_NOT_SUPPORTED = 1048621;
export const D3D10_MESSAGE_ID_CREATEBLENDSTATE_NO_SEPARATE_ALPHA_BLEND = 1048622;
export const D3D10_MESSAGE_ID_CREATEBLENDSTATE_NO_MRT_BLEND = 1048623;
export const D3D10_MESSAGE_ID_CREATEBLENDSTATE_OPERATION_NOT_SUPPORTED = 1048624;
export const D3D10_MESSAGE_ID_CREATESAMPLERSTATE_NO_MIRRORONCE = 1048625;
export const D3D10_MESSAGE_ID_DRAWINSTANCED_NOT_SUPPORTED = 1048626;
export const D3D10_MESSAGE_ID_DRAWINDEXEDINSTANCED_NOT_SUPPORTED_BELOW_9_3 = 1048627;
export const D3D10_MESSAGE_ID_DRAWINDEXED_POINTLIST_UNSUPPORTED = 1048628;
export const D3D10_MESSAGE_ID_SETBLENDSTATE_SAMPLE_MASK_CANNOT_BE_ZERO = 1048629;
export const D3D10_MESSAGE_ID_CREATERESOURCE_DIMENSION_EXCEEDS_FEATURE_LEVEL_DEFINITION = 1048630;
export const D3D10_MESSAGE_ID_CREATERESOURCE_ONLY_SINGLE_MIP_LEVEL_DEPTH_STENCIL_SUPPORTED = 1048631;
export const D3D10_MESSAGE_ID_DEVICE_RSSETSCISSORRECTS_NEGATIVESCISSOR = 1048632;
export const D3D10_MESSAGE_ID_SLOT_ZERO_MUST_BE_D3D10_INPUT_PER_VERTEX_DATA = 1048633;
export const D3D10_MESSAGE_ID_CREATERESOURCE_NON_POW_2_MIPMAP = 1048634;
export const D3D10_MESSAGE_ID_CREATESAMPLERSTATE_BORDER_NOT_SUPPORTED = 1048635;
export const D3D10_MESSAGE_ID_OMSETRENDERTARGETS_NO_SRGB_MRT = 1048636;
export const D3D10_MESSAGE_ID_COPYRESOURCE_NO_3D_MISMATCHED_UPDATES = 1048637;
export const D3D10_MESSAGE_ID_D3D10L9_MESSAGES_END = 1048638;
export const D3D10_DRIVER_TYPE_HARDWARE = 0;
export const D3D10_DRIVER_TYPE_REFERENCE = 1;
export const D3D10_DRIVER_TYPE_NULL = 2;
export const D3D10_DRIVER_TYPE_SOFTWARE = 3;
export const D3D10_DRIVER_TYPE_WARP = 5;
export const D3D_PRIMITIVE_TOPOLOGY_UNDEFINED = 0;
export const D3D_PRIMITIVE_TOPOLOGY_POINTLIST = 1;
export const D3D_PRIMITIVE_TOPOLOGY_LINELIST = 2;
export const D3D_PRIMITIVE_TOPOLOGY_LINESTRIP = 3;
export const D3D_PRIMITIVE_TOPOLOGY_TRIANGLELIST = 4;
export const D3D_PRIMITIVE_TOPOLOGY_TRIANGLESTRIP = 5;
export const D3D_PRIMITIVE_TOPOLOGY_LINELIST_ADJ = 10;
export const D3D_PRIMITIVE_TOPOLOGY_LINESTRIP_ADJ = 11;
export const D3D_PRIMITIVE_TOPOLOGY_TRIANGLELIST_ADJ = 12;
export const D3D_PRIMITIVE_TOPOLOGY_TRIANGLESTRIP_ADJ = 13;
export const D3D_PRIMITIVE_TOPOLOGY_1_CONTROL_POINT_PATCHLIST = 33;
export const D3D_PRIMITIVE_TOPOLOGY_2_CONTROL_POINT_PATCHLIST = 34;
export const D3D_PRIMITIVE_TOPOLOGY_3_CONTROL_POINT_PATCHLIST = 35;
export const D3D_PRIMITIVE_TOPOLOGY_4_CONTROL_POINT_PATCHLIST = 36;
export const D3D_PRIMITIVE_TOPOLOGY_5_CONTROL_POINT_PATCHLIST = 37;
export const D3D_PRIMITIVE_TOPOLOGY_6_CONTROL_POINT_PATCHLIST = 38;
export const D3D_PRIMITIVE_TOPOLOGY_7_CONTROL_POINT_PATCHLIST = 39;
export const D3D_PRIMITIVE_TOPOLOGY_8_CONTROL_POINT_PATCHLIST = 40;
export const D3D_PRIMITIVE_TOPOLOGY_9_CONTROL_POINT_PATCHLIST = 41;
export const D3D_PRIMITIVE_TOPOLOGY_10_CONTROL_POINT_PATCHLIST = 42;
export const D3D_PRIMITIVE_TOPOLOGY_11_CONTROL_POINT_PATCHLIST = 43;
export const D3D_PRIMITIVE_TOPOLOGY_12_CONTROL_POINT_PATCHLIST = 44;
export const D3D_PRIMITIVE_TOPOLOGY_13_CONTROL_POINT_PATCHLIST = 45;
export const D3D_PRIMITIVE_TOPOLOGY_14_CONTROL_POINT_PATCHLIST = 46;
export const D3D_PRIMITIVE_TOPOLOGY_15_CONTROL_POINT_PATCHLIST = 47;
export const D3D_PRIMITIVE_TOPOLOGY_16_CONTROL_POINT_PATCHLIST = 48;
export const D3D_PRIMITIVE_TOPOLOGY_17_CONTROL_POINT_PATCHLIST = 49;
export const D3D_PRIMITIVE_TOPOLOGY_18_CONTROL_POINT_PATCHLIST = 50;
export const D3D_PRIMITIVE_TOPOLOGY_19_CONTROL_POINT_PATCHLIST = 51;
export const D3D_PRIMITIVE_TOPOLOGY_20_CONTROL_POINT_PATCHLIST = 52;
export const D3D_PRIMITIVE_TOPOLOGY_21_CONTROL_POINT_PATCHLIST = 53;
export const D3D_PRIMITIVE_TOPOLOGY_22_CONTROL_POINT_PATCHLIST = 54;
export const D3D_PRIMITIVE_TOPOLOGY_23_CONTROL_POINT_PATCHLIST = 55;
export const D3D_PRIMITIVE_TOPOLOGY_24_CONTROL_POINT_PATCHLIST = 56;
export const D3D_PRIMITIVE_TOPOLOGY_25_CONTROL_POINT_PATCHLIST = 57;
export const D3D_PRIMITIVE_TOPOLOGY_26_CONTROL_POINT_PATCHLIST = 58;
export const D3D_PRIMITIVE_TOPOLOGY_27_CONTROL_POINT_PATCHLIST = 59;
export const D3D_PRIMITIVE_TOPOLOGY_28_CONTROL_POINT_PATCHLIST = 60;
export const D3D_PRIMITIVE_TOPOLOGY_29_CONTROL_POINT_PATCHLIST = 61;
export const D3D_PRIMITIVE_TOPOLOGY_30_CONTROL_POINT_PATCHLIST = 62;
export const D3D_PRIMITIVE_TOPOLOGY_31_CONTROL_POINT_PATCHLIST = 63;
export const D3D_PRIMITIVE_TOPOLOGY_32_CONTROL_POINT_PATCHLIST = 64;
export const D3D10_PRIMITIVE_TOPOLOGY_UNDEFINED = 0;
export const D3D10_PRIMITIVE_TOPOLOGY_POINTLIST = 1;
export const D3D10_PRIMITIVE_TOPOLOGY_LINELIST = 2;
export const D3D10_PRIMITIVE_TOPOLOGY_LINESTRIP = 3;
export const D3D10_PRIMITIVE_TOPOLOGY_TRIANGLELIST = 4;
export const D3D10_PRIMITIVE_TOPOLOGY_TRIANGLESTRIP = 5;
export const D3D10_PRIMITIVE_TOPOLOGY_LINELIST_ADJ = 10;
export const D3D10_PRIMITIVE_TOPOLOGY_LINESTRIP_ADJ = 11;
export const D3D10_PRIMITIVE_TOPOLOGY_TRIANGLELIST_ADJ = 12;
export const D3D10_PRIMITIVE_TOPOLOGY_TRIANGLESTRIP_ADJ = 13;
export const D3D11_PRIMITIVE_TOPOLOGY_UNDEFINED = 0;
export const D3D11_PRIMITIVE_TOPOLOGY_POINTLIST = 1;
export const D3D11_PRIMITIVE_TOPOLOGY_LINELIST = 2;
export const D3D11_PRIMITIVE_TOPOLOGY_LINESTRIP = 3;
export const D3D11_PRIMITIVE_TOPOLOGY_TRIANGLELIST = 4;
export const D3D11_PRIMITIVE_TOPOLOGY_TRIANGLESTRIP = 5;
export const D3D11_PRIMITIVE_TOPOLOGY_LINELIST_ADJ = 10;
export const D3D11_PRIMITIVE_TOPOLOGY_LINESTRIP_ADJ = 11;
export const D3D11_PRIMITIVE_TOPOLOGY_TRIANGLELIST_ADJ = 12;
export const D3D11_PRIMITIVE_TOPOLOGY_TRIANGLESTRIP_ADJ = 13;
export const D3D11_PRIMITIVE_TOPOLOGY_1_CONTROL_POINT_PATCHLIST = 33;
export const D3D11_PRIMITIVE_TOPOLOGY_2_CONTROL_POINT_PATCHLIST = 34;
export const D3D11_PRIMITIVE_TOPOLOGY_3_CONTROL_POINT_PATCHLIST = 35;
export const D3D11_PRIMITIVE_TOPOLOGY_4_CONTROL_POINT_PATCHLIST = 36;
export const D3D11_PRIMITIVE_TOPOLOGY_5_CONTROL_POINT_PATCHLIST = 37;
export const D3D11_PRIMITIVE_TOPOLOGY_6_CONTROL_POINT_PATCHLIST = 38;
export const D3D11_PRIMITIVE_TOPOLOGY_7_CONTROL_POINT_PATCHLIST = 39;
export const D3D11_PRIMITIVE_TOPOLOGY_8_CONTROL_POINT_PATCHLIST = 40;
export const D3D11_PRIMITIVE_TOPOLOGY_9_CONTROL_POINT_PATCHLIST = 41;
export const D3D11_PRIMITIVE_TOPOLOGY_10_CONTROL_POINT_PATCHLIST = 42;
export const D3D11_PRIMITIVE_TOPOLOGY_11_CONTROL_POINT_PATCHLIST = 43;
export const D3D11_PRIMITIVE_TOPOLOGY_12_CONTROL_POINT_PATCHLIST = 44;
export const D3D11_PRIMITIVE_TOPOLOGY_13_CONTROL_POINT_PATCHLIST = 45;
export const D3D11_PRIMITIVE_TOPOLOGY_14_CONTROL_POINT_PATCHLIST = 46;
export const D3D11_PRIMITIVE_TOPOLOGY_15_CONTROL_POINT_PATCHLIST = 47;
export const D3D11_PRIMITIVE_TOPOLOGY_16_CONTROL_POINT_PATCHLIST = 48;
export const D3D11_PRIMITIVE_TOPOLOGY_17_CONTROL_POINT_PATCHLIST = 49;
export const D3D11_PRIMITIVE_TOPOLOGY_18_CONTROL_POINT_PATCHLIST = 50;
export const D3D11_PRIMITIVE_TOPOLOGY_19_CONTROL_POINT_PATCHLIST = 51;
export const D3D11_PRIMITIVE_TOPOLOGY_20_CONTROL_POINT_PATCHLIST = 52;
export const D3D11_PRIMITIVE_TOPOLOGY_21_CONTROL_POINT_PATCHLIST = 53;
export const D3D11_PRIMITIVE_TOPOLOGY_22_CONTROL_POINT_PATCHLIST = 54;
export const D3D11_PRIMITIVE_TOPOLOGY_23_CONTROL_POINT_PATCHLIST = 55;
export const D3D11_PRIMITIVE_TOPOLOGY_24_CONTROL_POINT_PATCHLIST = 56;
export const D3D11_PRIMITIVE_TOPOLOGY_25_CONTROL_POINT_PATCHLIST = 57;
export const D3D11_PRIMITIVE_TOPOLOGY_26_CONTROL_POINT_PATCHLIST = 58;
export const D3D11_PRIMITIVE_TOPOLOGY_27_CONTROL_POINT_PATCHLIST = 59;
export const D3D11_PRIMITIVE_TOPOLOGY_28_CONTROL_POINT_PATCHLIST = 60;
export const D3D11_PRIMITIVE_TOPOLOGY_29_CONTROL_POINT_PATCHLIST = 61;
export const D3D11_PRIMITIVE_TOPOLOGY_30_CONTROL_POINT_PATCHLIST = 62;
export const D3D11_PRIMITIVE_TOPOLOGY_31_CONTROL_POINT_PATCHLIST = 63;
export const D3D11_PRIMITIVE_TOPOLOGY_32_CONTROL_POINT_PATCHLIST = 64;
export const D3D_CT_CBUFFER = 0;
export const D3D_CT_TBUFFER = 1;
export const D3D_CT_INTERFACE_POINTERS = 2;
export const D3D_CT_RESOURCE_BIND_INFO = 3;
export const D3D10_CT_CBUFFER = 0;
export const D3D10_CT_TBUFFER = 1;
export const D3D11_CT_CBUFFER = 0;
export const D3D11_CT_TBUFFER = 1;
export const D3D11_CT_INTERFACE_POINTERS = 2;
export const D3D11_CT_RESOURCE_BIND_INFO = 3;
export const D3D_SVC_SCALAR = 0;
export const D3D_SVC_VECTOR = 1;
export const D3D_SVC_MATRIX_ROWS = 2;
export const D3D_SVC_MATRIX_COLUMNS = 3;
export const D3D_SVC_OBJECT = 4;
export const D3D_SVC_STRUCT = 5;
export const D3D_SVC_INTERFACE_CLASS = 6;
export const D3D_SVC_INTERFACE_POINTER = 7;
export const D3D10_SVC_SCALAR = 0;
export const D3D10_SVC_VECTOR = 1;
export const D3D10_SVC_MATRIX_ROWS = 2;
export const D3D10_SVC_MATRIX_COLUMNS = 3;
export const D3D10_SVC_OBJECT = 4;
export const D3D10_SVC_STRUCT = 5;
export const D3D11_SVC_INTERFACE_CLASS = 6;
export const D3D11_SVC_INTERFACE_POINTER = 7;
export const D3D_SVC_FORCE_DWORD = 2147483647;
export const D3D_SVT_VOID = 0;
export const D3D_SVT_BOOL = 1;
export const D3D_SVT_INT = 2;
export const D3D_SVT_FLOAT = 3;
export const D3D_SVT_STRING = 4;
export const D3D_SVT_TEXTURE = 5;
export const D3D_SVT_TEXTURE1D = 6;
export const D3D_SVT_TEXTURE2D = 7;
export const D3D_SVT_TEXTURE3D = 8;
export const D3D_SVT_TEXTURECUBE = 9;
export const D3D_SVT_SAMPLER = 10;
export const D3D_SVT_SAMPLER1D = 11;
export const D3D_SVT_SAMPLER2D = 12;
export const D3D_SVT_SAMPLER3D = 13;
export const D3D_SVT_SAMPLERCUBE = 14;
export const D3D_SVT_PIXELSHADER = 15;
export const D3D_SVT_VERTEXSHADER = 16;
export const D3D_SVT_PIXELFRAGMENT = 17;
export const D3D_SVT_VERTEXFRAGMENT = 18;
export const D3D_SVT_UINT = 19;
export const D3D_SVT_UINT8 = 20;
export const D3D_SVT_GEOMETRYSHADER = 21;
export const D3D_SVT_RASTERIZER = 22;
export const D3D_SVT_DEPTHSTENCIL = 23;
export const D3D_SVT_BLEND = 24;
export const D3D_SVT_BUFFER = 25;
export const D3D_SVT_CBUFFER = 26;
export const D3D_SVT_TBUFFER = 27;
export const D3D_SVT_TEXTURE1DARRAY = 28;
export const D3D_SVT_TEXTURE2DARRAY = 29;
export const D3D_SVT_RENDERTARGETVIEW = 30;
export const D3D_SVT_DEPTHSTENCILVIEW = 31;
export const D3D_SVT_TEXTURE2DMS = 32;
export const D3D_SVT_TEXTURE2DMSARRAY = 33;
export const D3D_SVT_TEXTURECUBEARRAY = 34;
export const D3D_SVT_HULLSHADER = 35;
export const D3D_SVT_DOMAINSHADER = 36;
export const D3D_SVT_INTERFACE_POINTER = 37;
export const D3D_SVT_COMPUTESHADER = 38;
export const D3D_SVT_DOUBLE = 39;
export const D3D_SVT_RWTEXTURE1D = 40;
export const D3D_SVT_RWTEXTURE1DARRAY = 41;
export const D3D_SVT_RWTEXTURE2D = 42;
export const D3D_SVT_RWTEXTURE2DARRAY = 43;
export const D3D_SVT_RWTEXTURE3D = 44;
export const D3D_SVT_RWBUFFER = 45;
export const D3D_SVT_BYTEADDRESS_BUFFER = 46;
export const D3D_SVT_RWBYTEADDRESS_BUFFER = 47;
export const D3D_SVT_STRUCTURED_BUFFER = 48;
export const D3D_SVT_RWSTRUCTURED_BUFFER = 49;
export const D3D_SVT_APPEND_STRUCTURED_BUFFER = 50;
export const D3D_SVT_CONSUME_STRUCTURED_BUFFER = 51;
export const D3D_SVT_MIN8FLOAT = 52;
export const D3D_SVT_MIN10FLOAT = 53;
export const D3D_SVT_MIN16FLOAT = 54;
export const D3D_SVT_MIN12INT = 55;
export const D3D_SVT_MIN16INT = 56;
export const D3D_SVT_MIN16UINT = 57;
export const D3D_SVT_INT16 = 58;
export const D3D_SVT_UINT16 = 59;
export const D3D_SVT_FLOAT16 = 60;
export const D3D_SVT_INT64 = 61;
export const D3D_SVT_UINT64 = 62;
export const D3D10_SVT_VOID = 0;
export const D3D10_SVT_BOOL = 1;
export const D3D10_SVT_INT = 2;
export const D3D10_SVT_FLOAT = 3;
export const D3D10_SVT_STRING = 4;
export const D3D10_SVT_TEXTURE = 5;
export const D3D10_SVT_TEXTURE1D = 6;
export const D3D10_SVT_TEXTURE2D = 7;
export const D3D10_SVT_TEXTURE3D = 8;
export const D3D10_SVT_TEXTURECUBE = 9;
export const D3D10_SVT_SAMPLER = 10;
export const D3D10_SVT_SAMPLER1D = 11;
export const D3D10_SVT_SAMPLER2D = 12;
export const D3D10_SVT_SAMPLER3D = 13;
export const D3D10_SVT_SAMPLERCUBE = 14;
export const D3D10_SVT_PIXELSHADER = 15;
export const D3D10_SVT_VERTEXSHADER = 16;
export const D3D10_SVT_PIXELFRAGMENT = 17;
export const D3D10_SVT_VERTEXFRAGMENT = 18;
export const D3D10_SVT_UINT = 19;
export const D3D10_SVT_UINT8 = 20;
export const D3D10_SVT_GEOMETRYSHADER = 21;
export const D3D10_SVT_RASTERIZER = 22;
export const D3D10_SVT_DEPTHSTENCIL = 23;
export const D3D10_SVT_BLEND = 24;
export const D3D10_SVT_BUFFER = 25;
export const D3D10_SVT_CBUFFER = 26;
export const D3D10_SVT_TBUFFER = 27;
export const D3D10_SVT_TEXTURE1DARRAY = 28;
export const D3D10_SVT_TEXTURE2DARRAY = 29;
export const D3D10_SVT_RENDERTARGETVIEW = 30;
export const D3D10_SVT_DEPTHSTENCILVIEW = 31;
export const D3D10_SVT_TEXTURE2DMS = 32;
export const D3D10_SVT_TEXTURE2DMSARRAY = 33;
export const D3D10_SVT_TEXTURECUBEARRAY = 34;
export const D3D11_SVT_HULLSHADER = 35;
export const D3D11_SVT_DOMAINSHADER = 36;
export const D3D11_SVT_INTERFACE_POINTER = 37;
export const D3D11_SVT_COMPUTESHADER = 38;
export const D3D11_SVT_DOUBLE = 39;
export const D3D11_SVT_RWTEXTURE1D = 40;
export const D3D11_SVT_RWTEXTURE1DARRAY = 41;
export const D3D11_SVT_RWTEXTURE2D = 42;
export const D3D11_SVT_RWTEXTURE2DARRAY = 43;
export const D3D11_SVT_RWTEXTURE3D = 44;
export const D3D11_SVT_RWBUFFER = 45;
export const D3D11_SVT_BYTEADDRESS_BUFFER = 46;
export const D3D11_SVT_RWBYTEADDRESS_BUFFER = 47;
export const D3D11_SVT_STRUCTURED_BUFFER = 48;
export const D3D11_SVT_RWSTRUCTURED_BUFFER = 49;
export const D3D11_SVT_APPEND_STRUCTURED_BUFFER = 50;
export const D3D11_SVT_CONSUME_STRUCTURED_BUFFER = 51;
export const D3D_SVT_FORCE_DWORD = 2147483647;
export const D3D_SIT_CBUFFER = 0;
export const D3D_SIT_TBUFFER = 1;
export const D3D_SIT_TEXTURE = 2;
export const D3D_SIT_SAMPLER = 3;
export const D3D_SIT_UAV_RWTYPED = 4;
export const D3D_SIT_STRUCTURED = 5;
export const D3D_SIT_UAV_RWSTRUCTURED = 6;
export const D3D_SIT_BYTEADDRESS = 7;
export const D3D_SIT_UAV_RWBYTEADDRESS = 8;
export const D3D_SIT_UAV_APPEND_STRUCTURED = 9;
export const D3D_SIT_UAV_CONSUME_STRUCTURED = 10;
export const D3D_SIT_UAV_RWSTRUCTURED_WITH_COUNTER = 11;
export const D3D_SIT_RTACCELERATIONSTRUCTURE = 12;
export const D3D_SIT_UAV_FEEDBACKTEXTURE = 13;
export const D3D10_SIT_CBUFFER = 0;
export const D3D10_SIT_TBUFFER = 1;
export const D3D10_SIT_TEXTURE = 2;
export const D3D10_SIT_SAMPLER = 3;
export const D3D11_SIT_UAV_RWTYPED = 4;
export const D3D11_SIT_STRUCTURED = 5;
export const D3D11_SIT_UAV_RWSTRUCTURED = 6;
export const D3D11_SIT_BYTEADDRESS = 7;
export const D3D11_SIT_UAV_RWBYTEADDRESS = 8;
export const D3D11_SIT_UAV_APPEND_STRUCTURED = 9;
export const D3D11_SIT_UAV_CONSUME_STRUCTURED = 10;
export const D3D11_SIT_UAV_RWSTRUCTURED_WITH_COUNTER = 11;
export const D3D_RETURN_TYPE_UNORM = 1;
export const D3D_RETURN_TYPE_SNORM = 2;
export const D3D_RETURN_TYPE_SINT = 3;
export const D3D_RETURN_TYPE_UINT = 4;
export const D3D_RETURN_TYPE_FLOAT = 5;
export const D3D_RETURN_TYPE_MIXED = 6;
export const D3D_RETURN_TYPE_DOUBLE = 7;
export const D3D_RETURN_TYPE_CONTINUED = 8;
export const D3D10_RETURN_TYPE_UNORM = 1;
export const D3D10_RETURN_TYPE_SNORM = 2;
export const D3D10_RETURN_TYPE_SINT = 3;
export const D3D10_RETURN_TYPE_UINT = 4;
export const D3D10_RETURN_TYPE_FLOAT = 5;
export const D3D10_RETURN_TYPE_MIXED = 6;
export const D3D11_RETURN_TYPE_UNORM = 1;
export const D3D11_RETURN_TYPE_SNORM = 2;
export const D3D11_RETURN_TYPE_SINT = 3;
export const D3D11_RETURN_TYPE_UINT = 4;
export const D3D11_RETURN_TYPE_FLOAT = 5;
export const D3D11_RETURN_TYPE_MIXED = 6;
export const D3D11_RETURN_TYPE_DOUBLE = 7;
export const D3D11_RETURN_TYPE_CONTINUED = 8;
export const D3D_NAME_UNDEFINED = 0;
export const D3D_NAME_POSITION = 1;
export const D3D_NAME_CLIP_DISTANCE = 2;
export const D3D_NAME_CULL_DISTANCE = 3;
export const D3D_NAME_RENDER_TARGET_ARRAY_INDEX = 4;
export const D3D_NAME_VIEWPORT_ARRAY_INDEX = 5;
export const D3D_NAME_VERTEX_ID = 6;
export const D3D_NAME_PRIMITIVE_ID = 7;
export const D3D_NAME_INSTANCE_ID = 8;
export const D3D_NAME_IS_FRONT_FACE = 9;
export const D3D_NAME_SAMPLE_INDEX = 10;
export const D3D_NAME_FINAL_QUAD_EDGE_TESSFACTOR = 11;
export const D3D_NAME_FINAL_QUAD_INSIDE_TESSFACTOR = 12;
export const D3D_NAME_FINAL_TRI_EDGE_TESSFACTOR = 13;
export const D3D_NAME_FINAL_TRI_INSIDE_TESSFACTOR = 14;
export const D3D_NAME_FINAL_LINE_DETAIL_TESSFACTOR = 15;
export const D3D_NAME_FINAL_LINE_DENSITY_TESSFACTOR = 16;
export const D3D_NAME_BARYCENTRICS = 23;
export const D3D_NAME_SHADINGRATE = 24;
export const D3D_NAME_CULLPRIMITIVE = 25;
export const D3D_NAME_TARGET = 64;
export const D3D_NAME_DEPTH = 65;
export const D3D_NAME_COVERAGE = 66;
export const D3D_NAME_DEPTH_GREATER_EQUAL = 67;
export const D3D_NAME_DEPTH_LESS_EQUAL = 68;
export const D3D_NAME_STENCIL_REF = 69;
export const D3D_NAME_INNER_COVERAGE = 70;
export const D3D10_NAME_UNDEFINED = 0;
export const D3D10_NAME_POSITION = 1;
export const D3D10_NAME_CLIP_DISTANCE = 2;
export const D3D10_NAME_CULL_DISTANCE = 3;
export const D3D10_NAME_RENDER_TARGET_ARRAY_INDEX = 4;
export const D3D10_NAME_VIEWPORT_ARRAY_INDEX = 5;
export const D3D10_NAME_VERTEX_ID = 6;
export const D3D10_NAME_PRIMITIVE_ID = 7;
export const D3D10_NAME_INSTANCE_ID = 8;
export const D3D10_NAME_IS_FRONT_FACE = 9;
export const D3D10_NAME_SAMPLE_INDEX = 10;
export const D3D10_NAME_TARGET = 64;
export const D3D10_NAME_DEPTH = 65;
export const D3D10_NAME_COVERAGE = 66;
export const D3D11_NAME_FINAL_QUAD_EDGE_TESSFACTOR = 11;
export const D3D11_NAME_FINAL_QUAD_INSIDE_TESSFACTOR = 12;
export const D3D11_NAME_FINAL_TRI_EDGE_TESSFACTOR = 13;
export const D3D11_NAME_FINAL_TRI_INSIDE_TESSFACTOR = 14;
export const D3D11_NAME_FINAL_LINE_DETAIL_TESSFACTOR = 15;
export const D3D11_NAME_FINAL_LINE_DENSITY_TESSFACTOR = 16;
export const D3D11_NAME_DEPTH_GREATER_EQUAL = 67;
export const D3D11_NAME_DEPTH_LESS_EQUAL = 68;
export const D3D11_NAME_STENCIL_REF = 69;
export const D3D11_NAME_INNER_COVERAGE = 70;
export const D3D12_NAME_BARYCENTRICS = 23;
export const D3D12_NAME_SHADINGRATE = 24;
export const D3D12_NAME_CULLPRIMITIVE = 25;
export const D3D_REGISTER_COMPONENT_UNKNOWN = 0;
export const D3D_REGISTER_COMPONENT_UINT32 = 1;
export const D3D_REGISTER_COMPONENT_SINT32 = 2;
export const D3D_REGISTER_COMPONENT_FLOAT32 = 3;
export const D3D10_REGISTER_COMPONENT_UNKNOWN = 0;
export const D3D10_REGISTER_COMPONENT_UINT32 = 1;
export const D3D10_REGISTER_COMPONENT_SINT32 = 2;
export const D3D10_REGISTER_COMPONENT_FLOAT32 = 3;
export const D3D10_DST_SO_BUFFERS = 1;
export const D3D10_DST_OM_RENDER_TARGETS = 2;
export const D3D10_DST_OM_DEPTH_STENCIL_STATE = 3;
export const D3D10_DST_OM_BLEND_STATE = 4;
export const D3D10_DST_VS = 5;
export const D3D10_DST_VS_SAMPLERS = 6;
export const D3D10_DST_VS_SHADER_RESOURCES = 7;
export const D3D10_DST_VS_CONSTANT_BUFFERS = 8;
export const D3D10_DST_GS = 9;
export const D3D10_DST_GS_SAMPLERS = 10;
export const D3D10_DST_GS_SHADER_RESOURCES = 11;
export const D3D10_DST_GS_CONSTANT_BUFFERS = 12;
export const D3D10_DST_PS = 13;
export const D3D10_DST_PS_SAMPLERS = 14;
export const D3D10_DST_PS_SHADER_RESOURCES = 15;
export const D3D10_DST_PS_CONSTANT_BUFFERS = 16;
export const D3D10_DST_IA_VERTEX_BUFFERS = 17;
export const D3D10_DST_IA_INDEX_BUFFER = 18;
export const D3D10_DST_IA_INPUT_LAYOUT = 19;
export const D3D10_DST_IA_PRIMITIVE_TOPOLOGY = 20;
export const D3D10_DST_RS_VIEWPORTS = 21;
export const D3D10_DST_RS_SCISSOR_RECTS = 22;
export const D3D10_DST_RS_RASTERIZER_STATE = 23;
export const D3D10_DST_PREDICATION = 24;
export const D3D10_FEATURE_LEVEL_10_0 = 40960;
export const D3D10_FEATURE_LEVEL_10_1 = 41216;
export const D3D10_FEATURE_LEVEL_9_1 = 37120;
export const D3D10_FEATURE_LEVEL_9_2 = 37376;
export const D3D10_FEATURE_LEVEL_9_3 = 37632;
export const D3D10_STANDARD_MULTISAMPLE_PATTERN = "-1";
export const D3D10_CENTER_MULTISAMPLE_PATTERN = "-2";
export const D3D10_SHADER_DEBUG_REG_INPUT = 0;
export const D3D10_SHADER_DEBUG_REG_OUTPUT = 1;
export const D3D10_SHADER_DEBUG_REG_CBUFFER = 2;
export const D3D10_SHADER_DEBUG_REG_TBUFFER = 3;
export const D3D10_SHADER_DEBUG_REG_TEMP = 4;
export const D3D10_SHADER_DEBUG_REG_TEMPARRAY = 5;
export const D3D10_SHADER_DEBUG_REG_TEXTURE = 6;
export const D3D10_SHADER_DEBUG_REG_SAMPLER = 7;
export const D3D10_SHADER_DEBUG_REG_IMMEDIATECBUFFER = 8;
export const D3D10_SHADER_DEBUG_REG_LITERAL = 9;
export const D3D10_SHADER_DEBUG_REG_UNUSED = 10;
export const D3D11_SHADER_DEBUG_REG_INTERFACE_POINTERS = 11;
export const D3D11_SHADER_DEBUG_REG_UAV = 12;
export const D3D10_SHADER_DEBUG_REG_FORCE_DWORD = 2147483647;
export const D3D10_SHADER_DEBUG_SCOPE_GLOBAL = 0;
export const D3D10_SHADER_DEBUG_SCOPE_BLOCK = 1;
export const D3D10_SHADER_DEBUG_SCOPE_FORLOOP = 2;
export const D3D10_SHADER_DEBUG_SCOPE_STRUCT = 3;
export const D3D10_SHADER_DEBUG_SCOPE_FUNC_PARAMS = 4;
export const D3D10_SHADER_DEBUG_SCOPE_STATEBLOCK = 5;
export const D3D10_SHADER_DEBUG_SCOPE_NAMESPACE = 6;
export const D3D10_SHADER_DEBUG_SCOPE_ANNOTATION = 7;
export const D3D10_SHADER_DEBUG_SCOPE_FORCE_DWORD = 2147483647;
export const D3D10_SHADER_DEBUG_VAR_VARIABLE = 0;
export const D3D10_SHADER_DEBUG_VAR_FUNCTION = 1;
export const D3D10_SHADER_DEBUG_VAR_FORCE_DWORD = 2147483647;

// Structs

export type PSTR = Deno.PointerValue | Uint8Array | null;

/**
 * Windows.Win32.Graphics.Direct3D10.D3D10_INPUT_ELEMENT_DESC (size: 32)
 */
export interface D3D10_INPUT_ELEMENT_DESC {
  /** Windows.Win32.Foundation.PSTR */
  SemanticName: string | null;
  /** u32 */
  SemanticIndex: number;
  /** Windows.Win32.Graphics.Dxgi.Common.DXGI_FORMAT */
  Format: DXGI_FORMAT;
  /** u32 */
  InputSlot: number;
  /** u32 */
  AlignedByteOffset: number;
  /** Windows.Win32.Graphics.Direct3D10.D3D10_INPUT_CLASSIFICATION */
  InputSlotClass: D3D10_INPUT_CLASSIFICATION;
  /** u32 */
  InstanceDataStepRate: number;
}

export const sizeofD3D10_INPUT_ELEMENT_DESC = 32;

export function allocD3D10_INPUT_ELEMENT_DESC(data?: Partial<D3D10_INPUT_ELEMENT_DESC>): Uint8Array {
  const buf = new Uint8Array(sizeofD3D10_INPUT_ELEMENT_DESC);
  const view = new DataView(buf.buffer);
  // 0x00: buffer
  if (data?.SemanticName !== undefined) {
    (buf as any)._f0 = util.pstrToFfi(data.SemanticName);
    view.setBigUint64(0, (buf as any)._f0 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f0)), true);
  }
  // 0x08: u32
  if (data?.SemanticIndex !== undefined) view.setUint32(8, Number(data.SemanticIndex), true);
  // 0x0c: u32
  if (data?.Format !== undefined) view.setUint32(12, Number(data.Format), true);
  // 0x10: u32
  if (data?.InputSlot !== undefined) view.setUint32(16, Number(data.InputSlot), true);
  // 0x14: u32
  if (data?.AlignedByteOffset !== undefined) view.setUint32(20, Number(data.AlignedByteOffset), true);
  // 0x18: i32
  if (data?.InputSlotClass !== undefined) view.setInt32(24, Number(data.InputSlotClass), true);
  // 0x1c: u32
  if (data?.InstanceDataStepRate !== undefined) view.setUint32(28, Number(data.InstanceDataStepRate), true);
  return buf;
}

/**
 * Windows.Win32.Graphics.Direct3D10.D3D10_SO_DECLARATION_ENTRY (size: 16)
 */
export interface D3D10_SO_DECLARATION_ENTRY {
  /** Windows.Win32.Foundation.PSTR */
  SemanticName: string | null;
  /** u32 */
  SemanticIndex: number;
  /** u8 */
  StartComponent: number;
  /** u8 */
  ComponentCount: number;
  /** u8 */
  OutputSlot: number;
}

export const sizeofD3D10_SO_DECLARATION_ENTRY = 16;

export function allocD3D10_SO_DECLARATION_ENTRY(data?: Partial<D3D10_SO_DECLARATION_ENTRY>): Uint8Array {
  const buf = new Uint8Array(sizeofD3D10_SO_DECLARATION_ENTRY);
  const view = new DataView(buf.buffer);
  // 0x00: buffer
  if (data?.SemanticName !== undefined) {
    (buf as any)._f0 = util.pstrToFfi(data.SemanticName);
    view.setBigUint64(0, (buf as any)._f0 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f0)), true);
  }
  // 0x08: u32
  if (data?.SemanticIndex !== undefined) view.setUint32(8, Number(data.SemanticIndex), true);
  // 0x0c: u8
  if (data?.StartComponent !== undefined) view.setUint8(12, Number(data.StartComponent));
  // 0x0d: u8
  if (data?.ComponentCount !== undefined) view.setUint8(13, Number(data.ComponentCount));
  // 0x0e: u8
  if (data?.OutputSlot !== undefined) view.setUint8(14, Number(data.OutputSlot));
  // 0x0f: pad1
  return buf;
}

/**
 * Windows.Win32.Graphics.Direct3D10.D3D10_VIEWPORT (size: 24)
 */
export interface D3D10_VIEWPORT {
  /** i32 */
  TopLeftX: number;
  /** i32 */
  TopLeftY: number;
  /** u32 */
  Width: number;
  /** u32 */
  Height: number;
  /** f32 */
  MinDepth: number;
  /** f32 */
  MaxDepth: number;
}

export const sizeofD3D10_VIEWPORT = 24;

export function allocD3D10_VIEWPORT(data?: Partial<D3D10_VIEWPORT>): Uint8Array {
  const buf = new Uint8Array(sizeofD3D10_VIEWPORT);
  const view = new DataView(buf.buffer);
  // 0x00: i32
  if (data?.TopLeftX !== undefined) view.setInt32(0, Number(data.TopLeftX), true);
  // 0x04: i32
  if (data?.TopLeftY !== undefined) view.setInt32(4, Number(data.TopLeftY), true);
  // 0x08: u32
  if (data?.Width !== undefined) view.setUint32(8, Number(data.Width), true);
  // 0x0c: u32
  if (data?.Height !== undefined) view.setUint32(12, Number(data.Height), true);
  // 0x10: f32
  if (data?.MinDepth !== undefined) view.setFloat32(16, Number(data.MinDepth), true);
  // 0x14: f32
  if (data?.MaxDepth !== undefined) view.setFloat32(20, Number(data.MaxDepth), true);
  return buf;
}

/**
 * Windows.Win32.Graphics.Direct3D10.D3D10_BOX (size: 24)
 */
export interface D3D10_BOX {
  /** u32 */
  left: number;
  /** u32 */
  top: number;
  /** u32 */
  front: number;
  /** u32 */
  right: number;
  /** u32 */
  bottom: number;
  /** u32 */
  back: number;
}

export const sizeofD3D10_BOX = 24;

export function allocD3D10_BOX(data?: Partial<D3D10_BOX>): Uint8Array {
  const buf = new Uint8Array(sizeofD3D10_BOX);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.left !== undefined) view.setUint32(0, Number(data.left), true);
  // 0x04: u32
  if (data?.top !== undefined) view.setUint32(4, Number(data.top), true);
  // 0x08: u32
  if (data?.front !== undefined) view.setUint32(8, Number(data.front), true);
  // 0x0c: u32
  if (data?.right !== undefined) view.setUint32(12, Number(data.right), true);
  // 0x10: u32
  if (data?.bottom !== undefined) view.setUint32(16, Number(data.bottom), true);
  // 0x14: u32
  if (data?.back !== undefined) view.setUint32(20, Number(data.back), true);
  return buf;
}

/**
 * Windows.Win32.Graphics.Direct3D10.D3D10_DEPTH_STENCILOP_DESC (size: 16)
 */
export interface D3D10_DEPTH_STENCILOP_DESC {
  /** Windows.Win32.Graphics.Direct3D10.D3D10_STENCIL_OP */
  StencilFailOp: D3D10_STENCIL_OP;
  /** Windows.Win32.Graphics.Direct3D10.D3D10_STENCIL_OP */
  StencilDepthFailOp: D3D10_STENCIL_OP;
  /** Windows.Win32.Graphics.Direct3D10.D3D10_STENCIL_OP */
  StencilPassOp: D3D10_STENCIL_OP;
  /** Windows.Win32.Graphics.Direct3D10.D3D10_COMPARISON_FUNC */
  StencilFunc: D3D10_COMPARISON_FUNC;
}

export const sizeofD3D10_DEPTH_STENCILOP_DESC = 16;

export function allocD3D10_DEPTH_STENCILOP_DESC(data?: Partial<D3D10_DEPTH_STENCILOP_DESC>): Uint8Array {
  const buf = new Uint8Array(sizeofD3D10_DEPTH_STENCILOP_DESC);
  const view = new DataView(buf.buffer);
  // 0x00: i32
  if (data?.StencilFailOp !== undefined) view.setInt32(0, Number(data.StencilFailOp), true);
  // 0x04: i32
  if (data?.StencilDepthFailOp !== undefined) view.setInt32(4, Number(data.StencilDepthFailOp), true);
  // 0x08: i32
  if (data?.StencilPassOp !== undefined) view.setInt32(8, Number(data.StencilPassOp), true);
  // 0x0c: i32
  if (data?.StencilFunc !== undefined) view.setInt32(12, Number(data.StencilFunc), true);
  return buf;
}

export type BOOL = number;

/**
 * Windows.Win32.Graphics.Direct3D10.D3D10_DEPTH_STENCIL_DESC (size: 40)
 */
export interface D3D10_DEPTH_STENCIL_DESC {
  /** Windows.Win32.Foundation.BOOL */
  DepthEnable: boolean;
  /** Windows.Win32.Graphics.Direct3D10.D3D10_DEPTH_WRITE_MASK */
  DepthWriteMask: D3D10_DEPTH_WRITE_MASK;
  /** Windows.Win32.Graphics.Direct3D10.D3D10_COMPARISON_FUNC */
  DepthFunc: D3D10_COMPARISON_FUNC;
  /** Windows.Win32.Foundation.BOOL */
  StencilEnable: boolean;
  /** u8 */
  StencilReadMask: number;
  /** u8 */
  StencilWriteMask: number;
  /** Windows.Win32.Graphics.Direct3D10.D3D10_DEPTH_STENCILOP_DESC */
  FrontFace: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Graphics.Direct3D10.D3D10_DEPTH_STENCILOP_DESC */
  BackFace: Uint8Array | Deno.PointerValue | null;
}

export const sizeofD3D10_DEPTH_STENCIL_DESC = 40;

export function allocD3D10_DEPTH_STENCIL_DESC(data?: Partial<D3D10_DEPTH_STENCIL_DESC>): Uint8Array {
  const buf = new Uint8Array(sizeofD3D10_DEPTH_STENCIL_DESC);
  const view = new DataView(buf.buffer);
  // 0x00: i32
  if (data?.DepthEnable !== undefined) view.setInt32(0, Number(data.DepthEnable), true);
  // 0x04: i32
  if (data?.DepthWriteMask !== undefined) view.setInt32(4, Number(data.DepthWriteMask), true);
  // 0x08: i32
  if (data?.DepthFunc !== undefined) view.setInt32(8, Number(data.DepthFunc), true);
  // 0x0c: i32
  if (data?.StencilEnable !== undefined) view.setInt32(12, Number(data.StencilEnable), true);
  // 0x10: u8
  if (data?.StencilReadMask !== undefined) view.setUint8(16, Number(data.StencilReadMask));
  // 0x11: u8
  if (data?.StencilWriteMask !== undefined) view.setUint8(17, Number(data.StencilWriteMask));
  // 0x12: pad6
  // 0x18: pointer
  if (data?.FrontFace !== undefined) view.setBigUint64(24, data.FrontFace === null ? 0n : BigInt(util.toPointer(data.FrontFace)), true);
  // 0x20: pointer
  if (data?.BackFace !== undefined) view.setBigUint64(32, data.BackFace === null ? 0n : BigInt(util.toPointer(data.BackFace)), true);
  return buf;
}

/**
 * Windows.Win32.Graphics.Direct3D10.D3D10_BLEND_DESC (size: 48)
 */
export interface D3D10_BLEND_DESC {
  /** Windows.Win32.Foundation.BOOL */
  AlphaToCoverageEnable: boolean;
  /** array */
  BlendEnable: Deno.PointerValue | null;
  /** Windows.Win32.Graphics.Direct3D10.D3D10_BLEND */
  SrcBlend: D3D10_BLEND;
  /** Windows.Win32.Graphics.Direct3D10.D3D10_BLEND */
  DestBlend: D3D10_BLEND;
  /** Windows.Win32.Graphics.Direct3D10.D3D10_BLEND_OP */
  BlendOp: D3D10_BLEND_OP;
  /** Windows.Win32.Graphics.Direct3D10.D3D10_BLEND */
  SrcBlendAlpha: D3D10_BLEND;
  /** Windows.Win32.Graphics.Direct3D10.D3D10_BLEND */
  DestBlendAlpha: D3D10_BLEND;
  /** Windows.Win32.Graphics.Direct3D10.D3D10_BLEND_OP */
  BlendOpAlpha: D3D10_BLEND_OP;
  /** array */
  RenderTargetWriteMask: Deno.PointerValue | null;
}

export const sizeofD3D10_BLEND_DESC = 48;

export function allocD3D10_BLEND_DESC(data?: Partial<D3D10_BLEND_DESC>): Uint8Array {
  const buf = new Uint8Array(sizeofD3D10_BLEND_DESC);
  const view = new DataView(buf.buffer);
  // 0x00: i32
  if (data?.AlphaToCoverageEnable !== undefined) view.setInt32(0, Number(data.AlphaToCoverageEnable), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.BlendEnable !== undefined) view.setBigUint64(8, data.BlendEnable === null ? 0n : BigInt(util.toPointer(data.BlendEnable)), true);
  // 0x10: i32
  if (data?.SrcBlend !== undefined) view.setInt32(16, Number(data.SrcBlend), true);
  // 0x14: i32
  if (data?.DestBlend !== undefined) view.setInt32(20, Number(data.DestBlend), true);
  // 0x18: i32
  if (data?.BlendOp !== undefined) view.setInt32(24, Number(data.BlendOp), true);
  // 0x1c: i32
  if (data?.SrcBlendAlpha !== undefined) view.setInt32(28, Number(data.SrcBlendAlpha), true);
  // 0x20: i32
  if (data?.DestBlendAlpha !== undefined) view.setInt32(32, Number(data.DestBlendAlpha), true);
  // 0x24: i32
  if (data?.BlendOpAlpha !== undefined) view.setInt32(36, Number(data.BlendOpAlpha), true);
  // 0x28: pointer
  if (data?.RenderTargetWriteMask !== undefined) view.setBigUint64(40, data.RenderTargetWriteMask === null ? 0n : BigInt(util.toPointer(data.RenderTargetWriteMask)), true);
  return buf;
}

/**
 * Windows.Win32.Graphics.Direct3D10.D3D10_RASTERIZER_DESC (size: 40)
 */
export interface D3D10_RASTERIZER_DESC {
  /** Windows.Win32.Graphics.Direct3D10.D3D10_FILL_MODE */
  FillMode: D3D10_FILL_MODE;
  /** Windows.Win32.Graphics.Direct3D10.D3D10_CULL_MODE */
  CullMode: D3D10_CULL_MODE;
  /** Windows.Win32.Foundation.BOOL */
  FrontCounterClockwise: boolean;
  /** i32 */
  DepthBias: number;
  /** f32 */
  DepthBiasClamp: number;
  /** f32 */
  SlopeScaledDepthBias: number;
  /** Windows.Win32.Foundation.BOOL */
  DepthClipEnable: boolean;
  /** Windows.Win32.Foundation.BOOL */
  ScissorEnable: boolean;
  /** Windows.Win32.Foundation.BOOL */
  MultisampleEnable: boolean;
  /** Windows.Win32.Foundation.BOOL */
  AntialiasedLineEnable: boolean;
}

export const sizeofD3D10_RASTERIZER_DESC = 40;

export function allocD3D10_RASTERIZER_DESC(data?: Partial<D3D10_RASTERIZER_DESC>): Uint8Array {
  const buf = new Uint8Array(sizeofD3D10_RASTERIZER_DESC);
  const view = new DataView(buf.buffer);
  // 0x00: i32
  if (data?.FillMode !== undefined) view.setInt32(0, Number(data.FillMode), true);
  // 0x04: i32
  if (data?.CullMode !== undefined) view.setInt32(4, Number(data.CullMode), true);
  // 0x08: i32
  if (data?.FrontCounterClockwise !== undefined) view.setInt32(8, Number(data.FrontCounterClockwise), true);
  // 0x0c: i32
  if (data?.DepthBias !== undefined) view.setInt32(12, Number(data.DepthBias), true);
  // 0x10: f32
  if (data?.DepthBiasClamp !== undefined) view.setFloat32(16, Number(data.DepthBiasClamp), true);
  // 0x14: f32
  if (data?.SlopeScaledDepthBias !== undefined) view.setFloat32(20, Number(data.SlopeScaledDepthBias), true);
  // 0x18: i32
  if (data?.DepthClipEnable !== undefined) view.setInt32(24, Number(data.DepthClipEnable), true);
  // 0x1c: i32
  if (data?.ScissorEnable !== undefined) view.setInt32(28, Number(data.ScissorEnable), true);
  // 0x20: i32
  if (data?.MultisampleEnable !== undefined) view.setInt32(32, Number(data.MultisampleEnable), true);
  // 0x24: i32
  if (data?.AntialiasedLineEnable !== undefined) view.setInt32(36, Number(data.AntialiasedLineEnable), true);
  return buf;
}

/**
 * Windows.Win32.Graphics.Direct3D10.D3D10_SUBRESOURCE_DATA (size: 16)
 */
export interface D3D10_SUBRESOURCE_DATA {
  /** ptr */
  pSysMem: Deno.PointerValue | Uint8Array | null;
  /** u32 */
  SysMemPitch: number;
  /** u32 */
  SysMemSlicePitch: number;
}

export const sizeofD3D10_SUBRESOURCE_DATA = 16;

export function allocD3D10_SUBRESOURCE_DATA(data?: Partial<D3D10_SUBRESOURCE_DATA>): Uint8Array {
  const buf = new Uint8Array(sizeofD3D10_SUBRESOURCE_DATA);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.pSysMem !== undefined) view.setBigUint64(0, data.pSysMem === null ? 0n : BigInt(util.toPointer(data.pSysMem)), true);
  // 0x08: u32
  if (data?.SysMemPitch !== undefined) view.setUint32(8, Number(data.SysMemPitch), true);
  // 0x0c: u32
  if (data?.SysMemSlicePitch !== undefined) view.setUint32(12, Number(data.SysMemSlicePitch), true);
  return buf;
}

/**
 * Windows.Win32.Graphics.Direct3D10.D3D10_BUFFER_DESC (size: 24)
 */
export interface D3D10_BUFFER_DESC {
  /** u32 */
  ByteWidth: number;
  /** Windows.Win32.Graphics.Direct3D10.D3D10_USAGE */
  Usage: D3D10_USAGE;
  /** u32 */
  BindFlags: number;
  /** u32 */
  CPUAccessFlags: number;
  /** u32 */
  MiscFlags: number;
}

export const sizeofD3D10_BUFFER_DESC = 24;

export function allocD3D10_BUFFER_DESC(data?: Partial<D3D10_BUFFER_DESC>): Uint8Array {
  const buf = new Uint8Array(sizeofD3D10_BUFFER_DESC);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.ByteWidth !== undefined) view.setUint32(0, Number(data.ByteWidth), true);
  // 0x04: i32
  if (data?.Usage !== undefined) view.setInt32(4, Number(data.Usage), true);
  // 0x08: u32
  if (data?.BindFlags !== undefined) view.setUint32(8, Number(data.BindFlags), true);
  // 0x0c: u32
  if (data?.CPUAccessFlags !== undefined) view.setUint32(12, Number(data.CPUAccessFlags), true);
  // 0x10: u32
  if (data?.MiscFlags !== undefined) view.setUint32(16, Number(data.MiscFlags), true);
  // 0x14: pad4
  return buf;
}

/**
 * Windows.Win32.Graphics.Direct3D10.D3D10_TEXTURE1D_DESC (size: 32)
 */
export interface D3D10_TEXTURE1D_DESC {
  /** u32 */
  Width: number;
  /** u32 */
  MipLevels: number;
  /** u32 */
  ArraySize: number;
  /** Windows.Win32.Graphics.Dxgi.Common.DXGI_FORMAT */
  Format: DXGI_FORMAT;
  /** Windows.Win32.Graphics.Direct3D10.D3D10_USAGE */
  Usage: D3D10_USAGE;
  /** u32 */
  BindFlags: number;
  /** u32 */
  CPUAccessFlags: number;
  /** u32 */
  MiscFlags: number;
}

export const sizeofD3D10_TEXTURE1D_DESC = 32;

export function allocD3D10_TEXTURE1D_DESC(data?: Partial<D3D10_TEXTURE1D_DESC>): Uint8Array {
  const buf = new Uint8Array(sizeofD3D10_TEXTURE1D_DESC);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.Width !== undefined) view.setUint32(0, Number(data.Width), true);
  // 0x04: u32
  if (data?.MipLevels !== undefined) view.setUint32(4, Number(data.MipLevels), true);
  // 0x08: u32
  if (data?.ArraySize !== undefined) view.setUint32(8, Number(data.ArraySize), true);
  // 0x0c: u32
  if (data?.Format !== undefined) view.setUint32(12, Number(data.Format), true);
  // 0x10: i32
  if (data?.Usage !== undefined) view.setInt32(16, Number(data.Usage), true);
  // 0x14: u32
  if (data?.BindFlags !== undefined) view.setUint32(20, Number(data.BindFlags), true);
  // 0x18: u32
  if (data?.CPUAccessFlags !== undefined) view.setUint32(24, Number(data.CPUAccessFlags), true);
  // 0x1c: u32
  if (data?.MiscFlags !== undefined) view.setUint32(28, Number(data.MiscFlags), true);
  return buf;
}

/**
 * Windows.Win32.Graphics.Dxgi.Common.DXGI_SAMPLE_DESC (size: 8)
 */
export interface DXGI_SAMPLE_DESC {
  /** u32 */
  Count: number;
  /** u32 */
  Quality: number;
}

export const sizeofDXGI_SAMPLE_DESC = 8;

export function allocDXGI_SAMPLE_DESC(data?: Partial<DXGI_SAMPLE_DESC>): Uint8Array {
  const buf = new Uint8Array(sizeofDXGI_SAMPLE_DESC);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.Count !== undefined) view.setUint32(0, Number(data.Count), true);
  // 0x04: u32
  if (data?.Quality !== undefined) view.setUint32(4, Number(data.Quality), true);
  return buf;
}

/**
 * Windows.Win32.Graphics.Direct3D10.D3D10_TEXTURE2D_DESC (size: 48)
 */
export interface D3D10_TEXTURE2D_DESC {
  /** u32 */
  Width: number;
  /** u32 */
  Height: number;
  /** u32 */
  MipLevels: number;
  /** u32 */
  ArraySize: number;
  /** Windows.Win32.Graphics.Dxgi.Common.DXGI_FORMAT */
  Format: DXGI_FORMAT;
  /** Windows.Win32.Graphics.Dxgi.Common.DXGI_SAMPLE_DESC */
  SampleDesc: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Graphics.Direct3D10.D3D10_USAGE */
  Usage: D3D10_USAGE;
  /** u32 */
  BindFlags: number;
  /** u32 */
  CPUAccessFlags: number;
  /** u32 */
  MiscFlags: number;
}

export const sizeofD3D10_TEXTURE2D_DESC = 48;

export function allocD3D10_TEXTURE2D_DESC(data?: Partial<D3D10_TEXTURE2D_DESC>): Uint8Array {
  const buf = new Uint8Array(sizeofD3D10_TEXTURE2D_DESC);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.Width !== undefined) view.setUint32(0, Number(data.Width), true);
  // 0x04: u32
  if (data?.Height !== undefined) view.setUint32(4, Number(data.Height), true);
  // 0x08: u32
  if (data?.MipLevels !== undefined) view.setUint32(8, Number(data.MipLevels), true);
  // 0x0c: u32
  if (data?.ArraySize !== undefined) view.setUint32(12, Number(data.ArraySize), true);
  // 0x10: u32
  if (data?.Format !== undefined) view.setUint32(16, Number(data.Format), true);
  // 0x14: pad4
  // 0x18: pointer
  if (data?.SampleDesc !== undefined) view.setBigUint64(24, data.SampleDesc === null ? 0n : BigInt(util.toPointer(data.SampleDesc)), true);
  // 0x20: i32
  if (data?.Usage !== undefined) view.setInt32(32, Number(data.Usage), true);
  // 0x24: u32
  if (data?.BindFlags !== undefined) view.setUint32(36, Number(data.BindFlags), true);
  // 0x28: u32
  if (data?.CPUAccessFlags !== undefined) view.setUint32(40, Number(data.CPUAccessFlags), true);
  // 0x2c: u32
  if (data?.MiscFlags !== undefined) view.setUint32(44, Number(data.MiscFlags), true);
  return buf;
}

/**
 * Windows.Win32.Graphics.Direct3D10.D3D10_MAPPED_TEXTURE2D (size: 16)
 */
export interface D3D10_MAPPED_TEXTURE2D {
  /** ptr */
  pData: Deno.PointerValue | Uint8Array | null;
  /** u32 */
  RowPitch: number;
}

export const sizeofD3D10_MAPPED_TEXTURE2D = 16;

export function allocD3D10_MAPPED_TEXTURE2D(data?: Partial<D3D10_MAPPED_TEXTURE2D>): Uint8Array {
  const buf = new Uint8Array(sizeofD3D10_MAPPED_TEXTURE2D);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.pData !== undefined) view.setBigUint64(0, data.pData === null ? 0n : BigInt(util.toPointer(data.pData)), true);
  // 0x08: u32
  if (data?.RowPitch !== undefined) view.setUint32(8, Number(data.RowPitch), true);
  // 0x0c: pad4
  return buf;
}

/**
 * Windows.Win32.Graphics.Direct3D10.D3D10_TEXTURE3D_DESC (size: 40)
 */
export interface D3D10_TEXTURE3D_DESC {
  /** u32 */
  Width: number;
  /** u32 */
  Height: number;
  /** u32 */
  Depth: number;
  /** u32 */
  MipLevels: number;
  /** Windows.Win32.Graphics.Dxgi.Common.DXGI_FORMAT */
  Format: DXGI_FORMAT;
  /** Windows.Win32.Graphics.Direct3D10.D3D10_USAGE */
  Usage: D3D10_USAGE;
  /** u32 */
  BindFlags: number;
  /** u32 */
  CPUAccessFlags: number;
  /** u32 */
  MiscFlags: number;
}

export const sizeofD3D10_TEXTURE3D_DESC = 40;

export function allocD3D10_TEXTURE3D_DESC(data?: Partial<D3D10_TEXTURE3D_DESC>): Uint8Array {
  const buf = new Uint8Array(sizeofD3D10_TEXTURE3D_DESC);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.Width !== undefined) view.setUint32(0, Number(data.Width), true);
  // 0x04: u32
  if (data?.Height !== undefined) view.setUint32(4, Number(data.Height), true);
  // 0x08: u32
  if (data?.Depth !== undefined) view.setUint32(8, Number(data.Depth), true);
  // 0x0c: u32
  if (data?.MipLevels !== undefined) view.setUint32(12, Number(data.MipLevels), true);
  // 0x10: u32
  if (data?.Format !== undefined) view.setUint32(16, Number(data.Format), true);
  // 0x14: i32
  if (data?.Usage !== undefined) view.setInt32(20, Number(data.Usage), true);
  // 0x18: u32
  if (data?.BindFlags !== undefined) view.setUint32(24, Number(data.BindFlags), true);
  // 0x1c: u32
  if (data?.CPUAccessFlags !== undefined) view.setUint32(28, Number(data.CPUAccessFlags), true);
  // 0x20: u32
  if (data?.MiscFlags !== undefined) view.setUint32(32, Number(data.MiscFlags), true);
  // 0x24: pad4
  return buf;
}

/**
 * Windows.Win32.Graphics.Direct3D10.D3D10_MAPPED_TEXTURE3D (size: 16)
 */
export interface D3D10_MAPPED_TEXTURE3D {
  /** ptr */
  pData: Deno.PointerValue | Uint8Array | null;
  /** u32 */
  RowPitch: number;
  /** u32 */
  DepthPitch: number;
}

export const sizeofD3D10_MAPPED_TEXTURE3D = 16;

export function allocD3D10_MAPPED_TEXTURE3D(data?: Partial<D3D10_MAPPED_TEXTURE3D>): Uint8Array {
  const buf = new Uint8Array(sizeofD3D10_MAPPED_TEXTURE3D);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.pData !== undefined) view.setBigUint64(0, data.pData === null ? 0n : BigInt(util.toPointer(data.pData)), true);
  // 0x08: u32
  if (data?.RowPitch !== undefined) view.setUint32(8, Number(data.RowPitch), true);
  // 0x0c: u32
  if (data?.DepthPitch !== undefined) view.setUint32(12, Number(data.DepthPitch), true);
  return buf;
}

export type PWSTR = Deno.PointerValue | Uint8Array | null;

/**
 * _Anonymous1_e__Union (size: 64)
 */
export interface _Anonymous1_e__Union {
  /** usize */
  Data0: Deno.PointerValue;
  /** Windows.Win32.Foundation.PWSTR */
  String: string | null;
  /** usize */
  u: Deno.PointerValue;
  /** ptr */
  psid: Deno.PointerValue | Uint8Array | null;
  /** ptr */
  pguid: Deno.PointerValue | Uint8Array | null;
  /** u32 */
  LogonId_LowPart: number;
  /** ptr */
  pObjectTypes: Deno.PointerValue | Uint8Array | null;
  /** ptr */
  pIpAddress: Deno.PointerValue | Uint8Array | null;
}

export const sizeof_Anonymous1_e__Union = 64;

export function alloc_Anonymous1_e__Union(data?: Partial<_Anonymous1_e__Union>): Uint8Array {
  const buf = new Uint8Array(sizeof_Anonymous1_e__Union);
  const view = new DataView(buf.buffer);
  // 0x00: usize
  if (data?.Data0 !== undefined) view.setBigUint64(0, BigInt(data.Data0), true);
  // 0x08: buffer
  if (data?.String !== undefined) {
    (buf as any)._f8 = util.pwstrToFfi(data.String);
    view.setBigUint64(8, (buf as any)._f8 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f8)), true);
  }
  // 0x10: usize
  if (data?.u !== undefined) view.setBigUint64(16, BigInt(data.u), true);
  // 0x18: pointer
  if (data?.psid !== undefined) view.setBigUint64(24, data.psid === null ? 0n : BigInt(util.toPointer(data.psid)), true);
  // 0x20: pointer
  if (data?.pguid !== undefined) view.setBigUint64(32, data.pguid === null ? 0n : BigInt(util.toPointer(data.pguid)), true);
  // 0x28: u32
  if (data?.LogonId_LowPart !== undefined) view.setUint32(40, Number(data.LogonId_LowPart), true);
  // 0x2c: pad4
  // 0x30: pointer
  if (data?.pObjectTypes !== undefined) view.setBigUint64(48, data.pObjectTypes === null ? 0n : BigInt(util.toPointer(data.pObjectTypes)), true);
  // 0x38: pointer
  if (data?.pIpAddress !== undefined) view.setBigUint64(56, data.pIpAddress === null ? 0n : BigInt(util.toPointer(data.pIpAddress)), true);
  return buf;
}

/**
 * _Anonymous2_e__Union (size: 16)
 */
export interface _Anonymous2_e__Union {
  /** usize */
  Data1: Deno.PointerValue;
  /** i32 */
  LogonId_HighPart: number;
}

export const sizeof_Anonymous2_e__Union = 16;

export function alloc_Anonymous2_e__Union(data?: Partial<_Anonymous2_e__Union>): Uint8Array {
  const buf = new Uint8Array(sizeof_Anonymous2_e__Union);
  const view = new DataView(buf.buffer);
  // 0x00: usize
  if (data?.Data1 !== undefined) view.setBigUint64(0, BigInt(data.Data1), true);
  // 0x08: i32
  if (data?.LogonId_HighPart !== undefined) view.setInt32(8, Number(data.LogonId_HighPart), true);
  // 0x0c: pad4
  return buf;
}

/**
 * Windows.Win32.Graphics.Direct3D10.D3D10_BUFFER_SRV (size: 16)
 */
export interface D3D10_BUFFER_SRV {
  /** _Anonymous1_e__Union */
  Anonymous1: Uint8Array | Deno.PointerValue | null;
  /** _Anonymous2_e__Union */
  Anonymous2: Uint8Array | Deno.PointerValue | null;
}

export const sizeofD3D10_BUFFER_SRV = 16;

export function allocD3D10_BUFFER_SRV(data?: Partial<D3D10_BUFFER_SRV>): Uint8Array {
  const buf = new Uint8Array(sizeofD3D10_BUFFER_SRV);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.Anonymous1 !== undefined) view.setBigUint64(0, data.Anonymous1 === null ? 0n : BigInt(util.toPointer(data.Anonymous1)), true);
  // 0x08: pointer
  if (data?.Anonymous2 !== undefined) view.setBigUint64(8, data.Anonymous2 === null ? 0n : BigInt(util.toPointer(data.Anonymous2)), true);
  return buf;
}

/**
 * Windows.Win32.Graphics.Direct3D10.D3D10_TEX1D_SRV (size: 8)
 */
export interface D3D10_TEX1D_SRV {
  /** u32 */
  MostDetailedMip: number;
  /** u32 */
  MipLevels: number;
}

export const sizeofD3D10_TEX1D_SRV = 8;

export function allocD3D10_TEX1D_SRV(data?: Partial<D3D10_TEX1D_SRV>): Uint8Array {
  const buf = new Uint8Array(sizeofD3D10_TEX1D_SRV);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.MostDetailedMip !== undefined) view.setUint32(0, Number(data.MostDetailedMip), true);
  // 0x04: u32
  if (data?.MipLevels !== undefined) view.setUint32(4, Number(data.MipLevels), true);
  return buf;
}

/**
 * Windows.Win32.Graphics.Direct3D10.D3D10_TEX1D_ARRAY_SRV (size: 16)
 */
export interface D3D10_TEX1D_ARRAY_SRV {
  /** u32 */
  MostDetailedMip: number;
  /** u32 */
  MipLevels: number;
  /** u32 */
  FirstArraySlice: number;
  /** u32 */
  ArraySize: number;
}

export const sizeofD3D10_TEX1D_ARRAY_SRV = 16;

export function allocD3D10_TEX1D_ARRAY_SRV(data?: Partial<D3D10_TEX1D_ARRAY_SRV>): Uint8Array {
  const buf = new Uint8Array(sizeofD3D10_TEX1D_ARRAY_SRV);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.MostDetailedMip !== undefined) view.setUint32(0, Number(data.MostDetailedMip), true);
  // 0x04: u32
  if (data?.MipLevels !== undefined) view.setUint32(4, Number(data.MipLevels), true);
  // 0x08: u32
  if (data?.FirstArraySlice !== undefined) view.setUint32(8, Number(data.FirstArraySlice), true);
  // 0x0c: u32
  if (data?.ArraySize !== undefined) view.setUint32(12, Number(data.ArraySize), true);
  return buf;
}

/**
 * Windows.Win32.Graphics.Direct3D10.D3D10_TEX2D_SRV (size: 8)
 */
export interface D3D10_TEX2D_SRV {
  /** u32 */
  MostDetailedMip: number;
  /** u32 */
  MipLevels: number;
}

export const sizeofD3D10_TEX2D_SRV = 8;

export function allocD3D10_TEX2D_SRV(data?: Partial<D3D10_TEX2D_SRV>): Uint8Array {
  const buf = new Uint8Array(sizeofD3D10_TEX2D_SRV);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.MostDetailedMip !== undefined) view.setUint32(0, Number(data.MostDetailedMip), true);
  // 0x04: u32
  if (data?.MipLevels !== undefined) view.setUint32(4, Number(data.MipLevels), true);
  return buf;
}

/**
 * Windows.Win32.Graphics.Direct3D10.D3D10_TEX2D_ARRAY_SRV (size: 16)
 */
export interface D3D10_TEX2D_ARRAY_SRV {
  /** u32 */
  MostDetailedMip: number;
  /** u32 */
  MipLevels: number;
  /** u32 */
  FirstArraySlice: number;
  /** u32 */
  ArraySize: number;
}

export const sizeofD3D10_TEX2D_ARRAY_SRV = 16;

export function allocD3D10_TEX2D_ARRAY_SRV(data?: Partial<D3D10_TEX2D_ARRAY_SRV>): Uint8Array {
  const buf = new Uint8Array(sizeofD3D10_TEX2D_ARRAY_SRV);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.MostDetailedMip !== undefined) view.setUint32(0, Number(data.MostDetailedMip), true);
  // 0x04: u32
  if (data?.MipLevels !== undefined) view.setUint32(4, Number(data.MipLevels), true);
  // 0x08: u32
  if (data?.FirstArraySlice !== undefined) view.setUint32(8, Number(data.FirstArraySlice), true);
  // 0x0c: u32
  if (data?.ArraySize !== undefined) view.setUint32(12, Number(data.ArraySize), true);
  return buf;
}

/**
 * Windows.Win32.Graphics.Direct3D10.D3D10_TEX3D_SRV (size: 8)
 */
export interface D3D10_TEX3D_SRV {
  /** u32 */
  MostDetailedMip: number;
  /** u32 */
  MipLevels: number;
}

export const sizeofD3D10_TEX3D_SRV = 8;

export function allocD3D10_TEX3D_SRV(data?: Partial<D3D10_TEX3D_SRV>): Uint8Array {
  const buf = new Uint8Array(sizeofD3D10_TEX3D_SRV);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.MostDetailedMip !== undefined) view.setUint32(0, Number(data.MostDetailedMip), true);
  // 0x04: u32
  if (data?.MipLevels !== undefined) view.setUint32(4, Number(data.MipLevels), true);
  return buf;
}

/**
 * Windows.Win32.Graphics.Direct3D10.D3D10_TEXCUBE_SRV (size: 8)
 */
export interface D3D10_TEXCUBE_SRV {
  /** u32 */
  MostDetailedMip: number;
  /** u32 */
  MipLevels: number;
}

export const sizeofD3D10_TEXCUBE_SRV = 8;

export function allocD3D10_TEXCUBE_SRV(data?: Partial<D3D10_TEXCUBE_SRV>): Uint8Array {
  const buf = new Uint8Array(sizeofD3D10_TEXCUBE_SRV);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.MostDetailedMip !== undefined) view.setUint32(0, Number(data.MostDetailedMip), true);
  // 0x04: u32
  if (data?.MipLevels !== undefined) view.setUint32(4, Number(data.MipLevels), true);
  return buf;
}

/**
 * Windows.Win32.Graphics.Direct3D10.D3D10_TEX2DMS_SRV (size: 8)
 */
export interface D3D10_TEX2DMS_SRV {
  /** u32 */
  UnusedField_NothingToDefine: number;
}

export const sizeofD3D10_TEX2DMS_SRV = 8;

export function allocD3D10_TEX2DMS_SRV(data?: Partial<D3D10_TEX2DMS_SRV>): Uint8Array {
  const buf = new Uint8Array(sizeofD3D10_TEX2DMS_SRV);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.UnusedField_NothingToDefine !== undefined) view.setUint32(0, Number(data.UnusedField_NothingToDefine), true);
  // 0x04: pad4
  return buf;
}

/**
 * Windows.Win32.Graphics.Direct3D10.D3D10_TEX2DMS_ARRAY_SRV (size: 8)
 */
export interface D3D10_TEX2DMS_ARRAY_SRV {
  /** u32 */
  FirstArraySlice: number;
  /** u32 */
  ArraySize: number;
}

export const sizeofD3D10_TEX2DMS_ARRAY_SRV = 8;

export function allocD3D10_TEX2DMS_ARRAY_SRV(data?: Partial<D3D10_TEX2DMS_ARRAY_SRV>): Uint8Array {
  const buf = new Uint8Array(sizeofD3D10_TEX2DMS_ARRAY_SRV);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.FirstArraySlice !== undefined) view.setUint32(0, Number(data.FirstArraySlice), true);
  // 0x04: u32
  if (data?.ArraySize !== undefined) view.setUint32(4, Number(data.ArraySize), true);
  return buf;
}

/**
 * _Anonymous_e__Struct (size: 16)
 */
export interface _Anonymous_e__Struct {
  /** u64 */
  Alignment: Deno.PointerValue;
  /** u64 */
  Region: Deno.PointerValue;
}

export const sizeof_Anonymous_e__Struct = 16;

export function alloc_Anonymous_e__Struct(data?: Partial<_Anonymous_e__Struct>): Uint8Array {
  const buf = new Uint8Array(sizeof_Anonymous_e__Struct);
  const view = new DataView(buf.buffer);
  // 0x00: u64
  if (data?.Alignment !== undefined) view.setBigUint64(0, BigInt(data.Alignment), true);
  // 0x08: u64
  if (data?.Region !== undefined) view.setBigUint64(8, BigInt(data.Region), true);
  return buf;
}

/**
 * _Anonymous_e__Union (size: 16)
 */
export interface _Anonymous_e__Union {
  /** _Anonymous_e__Struct */
  Anonymous: Uint8Array | Deno.PointerValue | null;
  /** array */
  X: Deno.PointerValue | null;
}

export const sizeof_Anonymous_e__Union = 16;

export function alloc_Anonymous_e__Union(data?: Partial<_Anonymous_e__Union>): Uint8Array {
  const buf = new Uint8Array(sizeof_Anonymous_e__Union);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.Anonymous !== undefined) view.setBigUint64(0, data.Anonymous === null ? 0n : BigInt(util.toPointer(data.Anonymous)), true);
  // 0x08: pointer
  if (data?.X !== undefined) view.setBigUint64(8, data.X === null ? 0n : BigInt(util.toPointer(data.X)), true);
  return buf;
}

/**
 * Windows.Win32.Graphics.Direct3D10.D3D10_SHADER_RESOURCE_VIEW_DESC (size: 16)
 */
export interface D3D10_SHADER_RESOURCE_VIEW_DESC {
  /** Windows.Win32.Graphics.Dxgi.Common.DXGI_FORMAT */
  Format: DXGI_FORMAT;
  /** Windows.Win32.Graphics.Direct3D.D3D_SRV_DIMENSION */
  ViewDimension: D3D_SRV_DIMENSION;
  /** _Anonymous_e__Union */
  Anonymous: Uint8Array | Deno.PointerValue | null;
}

export const sizeofD3D10_SHADER_RESOURCE_VIEW_DESC = 16;

export function allocD3D10_SHADER_RESOURCE_VIEW_DESC(data?: Partial<D3D10_SHADER_RESOURCE_VIEW_DESC>): Uint8Array {
  const buf = new Uint8Array(sizeofD3D10_SHADER_RESOURCE_VIEW_DESC);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.Format !== undefined) view.setUint32(0, Number(data.Format), true);
  // 0x04: i32
  if (data?.ViewDimension !== undefined) view.setInt32(4, Number(data.ViewDimension), true);
  // 0x08: pointer
  if (data?.Anonymous !== undefined) view.setBigUint64(8, data.Anonymous === null ? 0n : BigInt(util.toPointer(data.Anonymous)), true);
  return buf;
}

/**
 * Windows.Win32.Graphics.Direct3D10.D3D10_BUFFER_RTV (size: 16)
 */
export interface D3D10_BUFFER_RTV {
  /** _Anonymous1_e__Union */
  Anonymous1: Uint8Array | Deno.PointerValue | null;
  /** _Anonymous2_e__Union */
  Anonymous2: Uint8Array | Deno.PointerValue | null;
}

export const sizeofD3D10_BUFFER_RTV = 16;

export function allocD3D10_BUFFER_RTV(data?: Partial<D3D10_BUFFER_RTV>): Uint8Array {
  const buf = new Uint8Array(sizeofD3D10_BUFFER_RTV);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.Anonymous1 !== undefined) view.setBigUint64(0, data.Anonymous1 === null ? 0n : BigInt(util.toPointer(data.Anonymous1)), true);
  // 0x08: pointer
  if (data?.Anonymous2 !== undefined) view.setBigUint64(8, data.Anonymous2 === null ? 0n : BigInt(util.toPointer(data.Anonymous2)), true);
  return buf;
}

/**
 * Windows.Win32.Graphics.Direct3D10.D3D10_TEX1D_RTV (size: 8)
 */
export interface D3D10_TEX1D_RTV {
  /** u32 */
  MipSlice: number;
}

export const sizeofD3D10_TEX1D_RTV = 8;

export function allocD3D10_TEX1D_RTV(data?: Partial<D3D10_TEX1D_RTV>): Uint8Array {
  const buf = new Uint8Array(sizeofD3D10_TEX1D_RTV);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.MipSlice !== undefined) view.setUint32(0, Number(data.MipSlice), true);
  // 0x04: pad4
  return buf;
}

/**
 * Windows.Win32.Graphics.Direct3D10.D3D10_TEX1D_ARRAY_RTV (size: 16)
 */
export interface D3D10_TEX1D_ARRAY_RTV {
  /** u32 */
  MipSlice: number;
  /** u32 */
  FirstArraySlice: number;
  /** u32 */
  ArraySize: number;
}

export const sizeofD3D10_TEX1D_ARRAY_RTV = 16;

export function allocD3D10_TEX1D_ARRAY_RTV(data?: Partial<D3D10_TEX1D_ARRAY_RTV>): Uint8Array {
  const buf = new Uint8Array(sizeofD3D10_TEX1D_ARRAY_RTV);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.MipSlice !== undefined) view.setUint32(0, Number(data.MipSlice), true);
  // 0x04: u32
  if (data?.FirstArraySlice !== undefined) view.setUint32(4, Number(data.FirstArraySlice), true);
  // 0x08: u32
  if (data?.ArraySize !== undefined) view.setUint32(8, Number(data.ArraySize), true);
  // 0x0c: pad4
  return buf;
}

/**
 * Windows.Win32.Graphics.Direct3D10.D3D10_TEX2D_RTV (size: 8)
 */
export interface D3D10_TEX2D_RTV {
  /** u32 */
  MipSlice: number;
}

export const sizeofD3D10_TEX2D_RTV = 8;

export function allocD3D10_TEX2D_RTV(data?: Partial<D3D10_TEX2D_RTV>): Uint8Array {
  const buf = new Uint8Array(sizeofD3D10_TEX2D_RTV);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.MipSlice !== undefined) view.setUint32(0, Number(data.MipSlice), true);
  // 0x04: pad4
  return buf;
}

/**
 * Windows.Win32.Graphics.Direct3D10.D3D10_TEX2DMS_RTV (size: 8)
 */
export interface D3D10_TEX2DMS_RTV {
  /** u32 */
  UnusedField_NothingToDefine: number;
}

export const sizeofD3D10_TEX2DMS_RTV = 8;

export function allocD3D10_TEX2DMS_RTV(data?: Partial<D3D10_TEX2DMS_RTV>): Uint8Array {
  const buf = new Uint8Array(sizeofD3D10_TEX2DMS_RTV);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.UnusedField_NothingToDefine !== undefined) view.setUint32(0, Number(data.UnusedField_NothingToDefine), true);
  // 0x04: pad4
  return buf;
}

/**
 * Windows.Win32.Graphics.Direct3D10.D3D10_TEX2D_ARRAY_RTV (size: 16)
 */
export interface D3D10_TEX2D_ARRAY_RTV {
  /** u32 */
  MipSlice: number;
  /** u32 */
  FirstArraySlice: number;
  /** u32 */
  ArraySize: number;
}

export const sizeofD3D10_TEX2D_ARRAY_RTV = 16;

export function allocD3D10_TEX2D_ARRAY_RTV(data?: Partial<D3D10_TEX2D_ARRAY_RTV>): Uint8Array {
  const buf = new Uint8Array(sizeofD3D10_TEX2D_ARRAY_RTV);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.MipSlice !== undefined) view.setUint32(0, Number(data.MipSlice), true);
  // 0x04: u32
  if (data?.FirstArraySlice !== undefined) view.setUint32(4, Number(data.FirstArraySlice), true);
  // 0x08: u32
  if (data?.ArraySize !== undefined) view.setUint32(8, Number(data.ArraySize), true);
  // 0x0c: pad4
  return buf;
}

/**
 * Windows.Win32.Graphics.Direct3D10.D3D10_TEX2DMS_ARRAY_RTV (size: 8)
 */
export interface D3D10_TEX2DMS_ARRAY_RTV {
  /** u32 */
  FirstArraySlice: number;
  /** u32 */
  ArraySize: number;
}

export const sizeofD3D10_TEX2DMS_ARRAY_RTV = 8;

export function allocD3D10_TEX2DMS_ARRAY_RTV(data?: Partial<D3D10_TEX2DMS_ARRAY_RTV>): Uint8Array {
  const buf = new Uint8Array(sizeofD3D10_TEX2DMS_ARRAY_RTV);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.FirstArraySlice !== undefined) view.setUint32(0, Number(data.FirstArraySlice), true);
  // 0x04: u32
  if (data?.ArraySize !== undefined) view.setUint32(4, Number(data.ArraySize), true);
  return buf;
}

/**
 * Windows.Win32.Graphics.Direct3D10.D3D10_TEX3D_RTV (size: 16)
 */
export interface D3D10_TEX3D_RTV {
  /** u32 */
  MipSlice: number;
  /** u32 */
  FirstWSlice: number;
  /** u32 */
  WSize: number;
}

export const sizeofD3D10_TEX3D_RTV = 16;

export function allocD3D10_TEX3D_RTV(data?: Partial<D3D10_TEX3D_RTV>): Uint8Array {
  const buf = new Uint8Array(sizeofD3D10_TEX3D_RTV);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.MipSlice !== undefined) view.setUint32(0, Number(data.MipSlice), true);
  // 0x04: u32
  if (data?.FirstWSlice !== undefined) view.setUint32(4, Number(data.FirstWSlice), true);
  // 0x08: u32
  if (data?.WSize !== undefined) view.setUint32(8, Number(data.WSize), true);
  // 0x0c: pad4
  return buf;
}

/**
 * Windows.Win32.Graphics.Direct3D10.D3D10_RENDER_TARGET_VIEW_DESC (size: 16)
 */
export interface D3D10_RENDER_TARGET_VIEW_DESC {
  /** Windows.Win32.Graphics.Dxgi.Common.DXGI_FORMAT */
  Format: DXGI_FORMAT;
  /** Windows.Win32.Graphics.Direct3D10.D3D10_RTV_DIMENSION */
  ViewDimension: D3D10_RTV_DIMENSION;
  /** _Anonymous_e__Union */
  Anonymous: Uint8Array | Deno.PointerValue | null;
}

export const sizeofD3D10_RENDER_TARGET_VIEW_DESC = 16;

export function allocD3D10_RENDER_TARGET_VIEW_DESC(data?: Partial<D3D10_RENDER_TARGET_VIEW_DESC>): Uint8Array {
  const buf = new Uint8Array(sizeofD3D10_RENDER_TARGET_VIEW_DESC);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.Format !== undefined) view.setUint32(0, Number(data.Format), true);
  // 0x04: i32
  if (data?.ViewDimension !== undefined) view.setInt32(4, Number(data.ViewDimension), true);
  // 0x08: pointer
  if (data?.Anonymous !== undefined) view.setBigUint64(8, data.Anonymous === null ? 0n : BigInt(util.toPointer(data.Anonymous)), true);
  return buf;
}

/**
 * Windows.Win32.Graphics.Direct3D10.D3D10_TEX1D_DSV (size: 8)
 */
export interface D3D10_TEX1D_DSV {
  /** u32 */
  MipSlice: number;
}

export const sizeofD3D10_TEX1D_DSV = 8;

export function allocD3D10_TEX1D_DSV(data?: Partial<D3D10_TEX1D_DSV>): Uint8Array {
  const buf = new Uint8Array(sizeofD3D10_TEX1D_DSV);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.MipSlice !== undefined) view.setUint32(0, Number(data.MipSlice), true);
  // 0x04: pad4
  return buf;
}

/**
 * Windows.Win32.Graphics.Direct3D10.D3D10_TEX1D_ARRAY_DSV (size: 16)
 */
export interface D3D10_TEX1D_ARRAY_DSV {
  /** u32 */
  MipSlice: number;
  /** u32 */
  FirstArraySlice: number;
  /** u32 */
  ArraySize: number;
}

export const sizeofD3D10_TEX1D_ARRAY_DSV = 16;

export function allocD3D10_TEX1D_ARRAY_DSV(data?: Partial<D3D10_TEX1D_ARRAY_DSV>): Uint8Array {
  const buf = new Uint8Array(sizeofD3D10_TEX1D_ARRAY_DSV);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.MipSlice !== undefined) view.setUint32(0, Number(data.MipSlice), true);
  // 0x04: u32
  if (data?.FirstArraySlice !== undefined) view.setUint32(4, Number(data.FirstArraySlice), true);
  // 0x08: u32
  if (data?.ArraySize !== undefined) view.setUint32(8, Number(data.ArraySize), true);
  // 0x0c: pad4
  return buf;
}

/**
 * Windows.Win32.Graphics.Direct3D10.D3D10_TEX2D_DSV (size: 8)
 */
export interface D3D10_TEX2D_DSV {
  /** u32 */
  MipSlice: number;
}

export const sizeofD3D10_TEX2D_DSV = 8;

export function allocD3D10_TEX2D_DSV(data?: Partial<D3D10_TEX2D_DSV>): Uint8Array {
  const buf = new Uint8Array(sizeofD3D10_TEX2D_DSV);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.MipSlice !== undefined) view.setUint32(0, Number(data.MipSlice), true);
  // 0x04: pad4
  return buf;
}

/**
 * Windows.Win32.Graphics.Direct3D10.D3D10_TEX2D_ARRAY_DSV (size: 16)
 */
export interface D3D10_TEX2D_ARRAY_DSV {
  /** u32 */
  MipSlice: number;
  /** u32 */
  FirstArraySlice: number;
  /** u32 */
  ArraySize: number;
}

export const sizeofD3D10_TEX2D_ARRAY_DSV = 16;

export function allocD3D10_TEX2D_ARRAY_DSV(data?: Partial<D3D10_TEX2D_ARRAY_DSV>): Uint8Array {
  const buf = new Uint8Array(sizeofD3D10_TEX2D_ARRAY_DSV);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.MipSlice !== undefined) view.setUint32(0, Number(data.MipSlice), true);
  // 0x04: u32
  if (data?.FirstArraySlice !== undefined) view.setUint32(4, Number(data.FirstArraySlice), true);
  // 0x08: u32
  if (data?.ArraySize !== undefined) view.setUint32(8, Number(data.ArraySize), true);
  // 0x0c: pad4
  return buf;
}

/**
 * Windows.Win32.Graphics.Direct3D10.D3D10_TEX2DMS_DSV (size: 8)
 */
export interface D3D10_TEX2DMS_DSV {
  /** u32 */
  UnusedField_NothingToDefine: number;
}

export const sizeofD3D10_TEX2DMS_DSV = 8;

export function allocD3D10_TEX2DMS_DSV(data?: Partial<D3D10_TEX2DMS_DSV>): Uint8Array {
  const buf = new Uint8Array(sizeofD3D10_TEX2DMS_DSV);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.UnusedField_NothingToDefine !== undefined) view.setUint32(0, Number(data.UnusedField_NothingToDefine), true);
  // 0x04: pad4
  return buf;
}

/**
 * Windows.Win32.Graphics.Direct3D10.D3D10_TEX2DMS_ARRAY_DSV (size: 8)
 */
export interface D3D10_TEX2DMS_ARRAY_DSV {
  /** u32 */
  FirstArraySlice: number;
  /** u32 */
  ArraySize: number;
}

export const sizeofD3D10_TEX2DMS_ARRAY_DSV = 8;

export function allocD3D10_TEX2DMS_ARRAY_DSV(data?: Partial<D3D10_TEX2DMS_ARRAY_DSV>): Uint8Array {
  const buf = new Uint8Array(sizeofD3D10_TEX2DMS_ARRAY_DSV);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.FirstArraySlice !== undefined) view.setUint32(0, Number(data.FirstArraySlice), true);
  // 0x04: u32
  if (data?.ArraySize !== undefined) view.setUint32(4, Number(data.ArraySize), true);
  return buf;
}

/**
 * Windows.Win32.Graphics.Direct3D10.D3D10_DEPTH_STENCIL_VIEW_DESC (size: 16)
 */
export interface D3D10_DEPTH_STENCIL_VIEW_DESC {
  /** Windows.Win32.Graphics.Dxgi.Common.DXGI_FORMAT */
  Format: DXGI_FORMAT;
  /** Windows.Win32.Graphics.Direct3D10.D3D10_DSV_DIMENSION */
  ViewDimension: D3D10_DSV_DIMENSION;
  /** _Anonymous_e__Union */
  Anonymous: Uint8Array | Deno.PointerValue | null;
}

export const sizeofD3D10_DEPTH_STENCIL_VIEW_DESC = 16;

export function allocD3D10_DEPTH_STENCIL_VIEW_DESC(data?: Partial<D3D10_DEPTH_STENCIL_VIEW_DESC>): Uint8Array {
  const buf = new Uint8Array(sizeofD3D10_DEPTH_STENCIL_VIEW_DESC);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.Format !== undefined) view.setUint32(0, Number(data.Format), true);
  // 0x04: i32
  if (data?.ViewDimension !== undefined) view.setInt32(4, Number(data.ViewDimension), true);
  // 0x08: pointer
  if (data?.Anonymous !== undefined) view.setBigUint64(8, data.Anonymous === null ? 0n : BigInt(util.toPointer(data.Anonymous)), true);
  return buf;
}

/**
 * Windows.Win32.Graphics.Direct3D10.D3D10_SAMPLER_DESC (size: 48)
 */
export interface D3D10_SAMPLER_DESC {
  /** Windows.Win32.Graphics.Direct3D10.D3D10_FILTER */
  Filter: D3D10_FILTER;
  /** Windows.Win32.Graphics.Direct3D10.D3D10_TEXTURE_ADDRESS_MODE */
  AddressU: D3D10_TEXTURE_ADDRESS_MODE;
  /** Windows.Win32.Graphics.Direct3D10.D3D10_TEXTURE_ADDRESS_MODE */
  AddressV: D3D10_TEXTURE_ADDRESS_MODE;
  /** Windows.Win32.Graphics.Direct3D10.D3D10_TEXTURE_ADDRESS_MODE */
  AddressW: D3D10_TEXTURE_ADDRESS_MODE;
  /** f32 */
  MipLODBias: number;
  /** u32 */
  MaxAnisotropy: number;
  /** Windows.Win32.Graphics.Direct3D10.D3D10_COMPARISON_FUNC */
  ComparisonFunc: D3D10_COMPARISON_FUNC;
  /** array */
  BorderColor: Deno.PointerValue | null;
  /** f32 */
  MinLOD: number;
  /** f32 */
  MaxLOD: number;
}

export const sizeofD3D10_SAMPLER_DESC = 48;

export function allocD3D10_SAMPLER_DESC(data?: Partial<D3D10_SAMPLER_DESC>): Uint8Array {
  const buf = new Uint8Array(sizeofD3D10_SAMPLER_DESC);
  const view = new DataView(buf.buffer);
  // 0x00: i32
  if (data?.Filter !== undefined) view.setInt32(0, Number(data.Filter), true);
  // 0x04: i32
  if (data?.AddressU !== undefined) view.setInt32(4, Number(data.AddressU), true);
  // 0x08: i32
  if (data?.AddressV !== undefined) view.setInt32(8, Number(data.AddressV), true);
  // 0x0c: i32
  if (data?.AddressW !== undefined) view.setInt32(12, Number(data.AddressW), true);
  // 0x10: f32
  if (data?.MipLODBias !== undefined) view.setFloat32(16, Number(data.MipLODBias), true);
  // 0x14: u32
  if (data?.MaxAnisotropy !== undefined) view.setUint32(20, Number(data.MaxAnisotropy), true);
  // 0x18: i32
  if (data?.ComparisonFunc !== undefined) view.setInt32(24, Number(data.ComparisonFunc), true);
  // 0x1c: pad4
  // 0x20: pointer
  if (data?.BorderColor !== undefined) view.setBigUint64(32, data.BorderColor === null ? 0n : BigInt(util.toPointer(data.BorderColor)), true);
  // 0x28: f32
  if (data?.MinLOD !== undefined) view.setFloat32(40, Number(data.MinLOD), true);
  // 0x2c: f32
  if (data?.MaxLOD !== undefined) view.setFloat32(44, Number(data.MaxLOD), true);
  return buf;
}

/**
 * Windows.Win32.Graphics.Direct3D10.D3D10_QUERY_DESC (size: 8)
 */
export interface D3D10_QUERY_DESC {
  /** Windows.Win32.Graphics.Direct3D10.D3D10_QUERY */
  Query: D3D10_QUERY;
  /** u32 */
  MiscFlags: number;
}

export const sizeofD3D10_QUERY_DESC = 8;

export function allocD3D10_QUERY_DESC(data?: Partial<D3D10_QUERY_DESC>): Uint8Array {
  const buf = new Uint8Array(sizeofD3D10_QUERY_DESC);
  const view = new DataView(buf.buffer);
  // 0x00: i32
  if (data?.Query !== undefined) view.setInt32(0, Number(data.Query), true);
  // 0x04: u32
  if (data?.MiscFlags !== undefined) view.setUint32(4, Number(data.MiscFlags), true);
  return buf;
}

/**
 * Windows.Win32.Graphics.Direct3D10.D3D10_QUERY_DATA_TIMESTAMP_DISJOINT (size: 16)
 */
export interface D3D10_QUERY_DATA_TIMESTAMP_DISJOINT {
  /** u64 */
  Frequency: Deno.PointerValue;
  /** Windows.Win32.Foundation.BOOL */
  Disjoint: boolean;
}

export const sizeofD3D10_QUERY_DATA_TIMESTAMP_DISJOINT = 16;

export function allocD3D10_QUERY_DATA_TIMESTAMP_DISJOINT(data?: Partial<D3D10_QUERY_DATA_TIMESTAMP_DISJOINT>): Uint8Array {
  const buf = new Uint8Array(sizeofD3D10_QUERY_DATA_TIMESTAMP_DISJOINT);
  const view = new DataView(buf.buffer);
  // 0x00: u64
  if (data?.Frequency !== undefined) view.setBigUint64(0, BigInt(data.Frequency), true);
  // 0x08: i32
  if (data?.Disjoint !== undefined) view.setInt32(8, Number(data.Disjoint), true);
  // 0x0c: pad4
  return buf;
}

/**
 * Windows.Win32.Graphics.Direct3D10.D3D10_QUERY_DATA_PIPELINE_STATISTICS (size: 64)
 */
export interface D3D10_QUERY_DATA_PIPELINE_STATISTICS {
  /** u64 */
  IAVertices: Deno.PointerValue;
  /** u64 */
  IAPrimitives: Deno.PointerValue;
  /** u64 */
  VSInvocations: Deno.PointerValue;
  /** u64 */
  GSInvocations: Deno.PointerValue;
  /** u64 */
  GSPrimitives: Deno.PointerValue;
  /** u64 */
  CInvocations: Deno.PointerValue;
  /** u64 */
  CPrimitives: Deno.PointerValue;
  /** u64 */
  PSInvocations: Deno.PointerValue;
}

export const sizeofD3D10_QUERY_DATA_PIPELINE_STATISTICS = 64;

export function allocD3D10_QUERY_DATA_PIPELINE_STATISTICS(data?: Partial<D3D10_QUERY_DATA_PIPELINE_STATISTICS>): Uint8Array {
  const buf = new Uint8Array(sizeofD3D10_QUERY_DATA_PIPELINE_STATISTICS);
  const view = new DataView(buf.buffer);
  // 0x00: u64
  if (data?.IAVertices !== undefined) view.setBigUint64(0, BigInt(data.IAVertices), true);
  // 0x08: u64
  if (data?.IAPrimitives !== undefined) view.setBigUint64(8, BigInt(data.IAPrimitives), true);
  // 0x10: u64
  if (data?.VSInvocations !== undefined) view.setBigUint64(16, BigInt(data.VSInvocations), true);
  // 0x18: u64
  if (data?.GSInvocations !== undefined) view.setBigUint64(24, BigInt(data.GSInvocations), true);
  // 0x20: u64
  if (data?.GSPrimitives !== undefined) view.setBigUint64(32, BigInt(data.GSPrimitives), true);
  // 0x28: u64
  if (data?.CInvocations !== undefined) view.setBigUint64(40, BigInt(data.CInvocations), true);
  // 0x30: u64
  if (data?.CPrimitives !== undefined) view.setBigUint64(48, BigInt(data.CPrimitives), true);
  // 0x38: u64
  if (data?.PSInvocations !== undefined) view.setBigUint64(56, BigInt(data.PSInvocations), true);
  return buf;
}

/**
 * Windows.Win32.Graphics.Direct3D10.D3D10_QUERY_DATA_SO_STATISTICS (size: 16)
 */
export interface D3D10_QUERY_DATA_SO_STATISTICS {
  /** u64 */
  NumPrimitivesWritten: Deno.PointerValue;
  /** u64 */
  PrimitivesStorageNeeded: Deno.PointerValue;
}

export const sizeofD3D10_QUERY_DATA_SO_STATISTICS = 16;

export function allocD3D10_QUERY_DATA_SO_STATISTICS(data?: Partial<D3D10_QUERY_DATA_SO_STATISTICS>): Uint8Array {
  const buf = new Uint8Array(sizeofD3D10_QUERY_DATA_SO_STATISTICS);
  const view = new DataView(buf.buffer);
  // 0x00: u64
  if (data?.NumPrimitivesWritten !== undefined) view.setBigUint64(0, BigInt(data.NumPrimitivesWritten), true);
  // 0x08: u64
  if (data?.PrimitivesStorageNeeded !== undefined) view.setBigUint64(8, BigInt(data.PrimitivesStorageNeeded), true);
  return buf;
}

/**
 * Windows.Win32.Graphics.Direct3D10.D3D10_COUNTER_DESC (size: 8)
 */
export interface D3D10_COUNTER_DESC {
  /** Windows.Win32.Graphics.Direct3D10.D3D10_COUNTER */
  Counter: D3D10_COUNTER;
  /** u32 */
  MiscFlags: number;
}

export const sizeofD3D10_COUNTER_DESC = 8;

export function allocD3D10_COUNTER_DESC(data?: Partial<D3D10_COUNTER_DESC>): Uint8Array {
  const buf = new Uint8Array(sizeofD3D10_COUNTER_DESC);
  const view = new DataView(buf.buffer);
  // 0x00: i32
  if (data?.Counter !== undefined) view.setInt32(0, Number(data.Counter), true);
  // 0x04: u32
  if (data?.MiscFlags !== undefined) view.setUint32(4, Number(data.MiscFlags), true);
  return buf;
}

/**
 * Windows.Win32.Graphics.Direct3D10.D3D10_COUNTER_INFO (size: 16)
 */
export interface D3D10_COUNTER_INFO {
  /** Windows.Win32.Graphics.Direct3D10.D3D10_COUNTER */
  LastDeviceDependentCounter: D3D10_COUNTER;
  /** u32 */
  NumSimultaneousCounters: number;
  /** u8 */
  NumDetectableParallelUnits: number;
}

export const sizeofD3D10_COUNTER_INFO = 16;

export function allocD3D10_COUNTER_INFO(data?: Partial<D3D10_COUNTER_INFO>): Uint8Array {
  const buf = new Uint8Array(sizeofD3D10_COUNTER_INFO);
  const view = new DataView(buf.buffer);
  // 0x00: i32
  if (data?.LastDeviceDependentCounter !== undefined) view.setInt32(0, Number(data.LastDeviceDependentCounter), true);
  // 0x04: u32
  if (data?.NumSimultaneousCounters !== undefined) view.setUint32(4, Number(data.NumSimultaneousCounters), true);
  // 0x08: u8
  if (data?.NumDetectableParallelUnits !== undefined) view.setUint8(8, Number(data.NumDetectableParallelUnits));
  // 0x09: pad7
  return buf;
}

/**
 * Windows.Win32.Graphics.Direct3D10.D3D10_MESSAGE (size: 32)
 */
export interface D3D10_MESSAGE {
  /** Windows.Win32.Graphics.Direct3D10.D3D10_MESSAGE_CATEGORY */
  Category: D3D10_MESSAGE_CATEGORY;
  /** Windows.Win32.Graphics.Direct3D10.D3D10_MESSAGE_SEVERITY */
  Severity: D3D10_MESSAGE_SEVERITY;
  /** Windows.Win32.Graphics.Direct3D10.D3D10_MESSAGE_ID */
  ID: D3D10_MESSAGE_ID;
  /** ptr */
  pDescription: Deno.PointerValue | Uint8Array | null;
  /** usize */
  DescriptionByteLength: Deno.PointerValue;
}

export const sizeofD3D10_MESSAGE = 32;

export function allocD3D10_MESSAGE(data?: Partial<D3D10_MESSAGE>): Uint8Array {
  const buf = new Uint8Array(sizeofD3D10_MESSAGE);
  const view = new DataView(buf.buffer);
  // 0x00: i32
  if (data?.Category !== undefined) view.setInt32(0, Number(data.Category), true);
  // 0x04: i32
  if (data?.Severity !== undefined) view.setInt32(4, Number(data.Severity), true);
  // 0x08: i32
  if (data?.ID !== undefined) view.setInt32(8, Number(data.ID), true);
  // 0x0c: pad4
  // 0x10: pointer
  if (data?.pDescription !== undefined) view.setBigUint64(16, data.pDescription === null ? 0n : BigInt(util.toPointer(data.pDescription)), true);
  // 0x18: usize
  if (data?.DescriptionByteLength !== undefined) view.setBigUint64(24, BigInt(data.DescriptionByteLength), true);
  return buf;
}

/**
 * Windows.Win32.Graphics.Direct3D10.D3D10_INFO_QUEUE_FILTER_DESC (size: 48)
 */
export interface D3D10_INFO_QUEUE_FILTER_DESC {
  /** u32 */
  NumCategories: number;
  /** ptr */
  pCategoryList: Deno.PointerValue | Uint8Array | null;
  /** u32 */
  NumSeverities: number;
  /** ptr */
  pSeverityList: Deno.PointerValue | Uint8Array | null;
  /** u32 */
  NumIDs: number;
  /** ptr */
  pIDList: Deno.PointerValue | Uint8Array | null;
}

export const sizeofD3D10_INFO_QUEUE_FILTER_DESC = 48;

export function allocD3D10_INFO_QUEUE_FILTER_DESC(data?: Partial<D3D10_INFO_QUEUE_FILTER_DESC>): Uint8Array {
  const buf = new Uint8Array(sizeofD3D10_INFO_QUEUE_FILTER_DESC);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.NumCategories !== undefined) view.setUint32(0, Number(data.NumCategories), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.pCategoryList !== undefined) view.setBigUint64(8, data.pCategoryList === null ? 0n : BigInt(util.toPointer(data.pCategoryList)), true);
  // 0x10: u32
  if (data?.NumSeverities !== undefined) view.setUint32(16, Number(data.NumSeverities), true);
  // 0x14: pad4
  // 0x18: pointer
  if (data?.pSeverityList !== undefined) view.setBigUint64(24, data.pSeverityList === null ? 0n : BigInt(util.toPointer(data.pSeverityList)), true);
  // 0x20: u32
  if (data?.NumIDs !== undefined) view.setUint32(32, Number(data.NumIDs), true);
  // 0x24: pad4
  // 0x28: pointer
  if (data?.pIDList !== undefined) view.setBigUint64(40, data.pIDList === null ? 0n : BigInt(util.toPointer(data.pIDList)), true);
  return buf;
}

/**
 * Windows.Win32.Graphics.Direct3D10.D3D10_INFO_QUEUE_FILTER (size: 16)
 */
export interface D3D10_INFO_QUEUE_FILTER {
  /** Windows.Win32.Graphics.Direct3D10.D3D10_INFO_QUEUE_FILTER_DESC */
  AllowList: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Graphics.Direct3D10.D3D10_INFO_QUEUE_FILTER_DESC */
  DenyList: Uint8Array | Deno.PointerValue | null;
}

export const sizeofD3D10_INFO_QUEUE_FILTER = 16;

export function allocD3D10_INFO_QUEUE_FILTER(data?: Partial<D3D10_INFO_QUEUE_FILTER>): Uint8Array {
  const buf = new Uint8Array(sizeofD3D10_INFO_QUEUE_FILTER);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.AllowList !== undefined) view.setBigUint64(0, data.AllowList === null ? 0n : BigInt(util.toPointer(data.AllowList)), true);
  // 0x08: pointer
  if (data?.DenyList !== undefined) view.setBigUint64(8, data.DenyList === null ? 0n : BigInt(util.toPointer(data.DenyList)), true);
  return buf;
}

/**
 * Windows.Win32.Graphics.Direct3D10.D3D10_SHADER_DESC (size: 120)
 */
export interface D3D10_SHADER_DESC {
  /** u32 */
  Version: number;
  /** Windows.Win32.Foundation.PSTR */
  Creator: string | null;
  /** u32 */
  Flags: number;
  /** u32 */
  ConstantBuffers: number;
  /** u32 */
  BoundResources: number;
  /** u32 */
  InputParameters: number;
  /** u32 */
  OutputParameters: number;
  /** u32 */
  InstructionCount: number;
  /** u32 */
  TempRegisterCount: number;
  /** u32 */
  TempArrayCount: number;
  /** u32 */
  DefCount: number;
  /** u32 */
  DclCount: number;
  /** u32 */
  TextureNormalInstructions: number;
  /** u32 */
  TextureLoadInstructions: number;
  /** u32 */
  TextureCompInstructions: number;
  /** u32 */
  TextureBiasInstructions: number;
  /** u32 */
  TextureGradientInstructions: number;
  /** u32 */
  FloatInstructionCount: number;
  /** u32 */
  IntInstructionCount: number;
  /** u32 */
  UintInstructionCount: number;
  /** u32 */
  StaticFlowControlCount: number;
  /** u32 */
  DynamicFlowControlCount: number;
  /** u32 */
  MacroInstructionCount: number;
  /** u32 */
  ArrayInstructionCount: number;
  /** u32 */
  CutInstructionCount: number;
  /** u32 */
  EmitInstructionCount: number;
  /** Windows.Win32.Graphics.Direct3D.D3D_PRIMITIVE_TOPOLOGY */
  GSOutputTopology: D3D_PRIMITIVE_TOPOLOGY;
  /** u32 */
  GSMaxOutputVertexCount: number;
}

export const sizeofD3D10_SHADER_DESC = 120;

export function allocD3D10_SHADER_DESC(data?: Partial<D3D10_SHADER_DESC>): Uint8Array {
  const buf = new Uint8Array(sizeofD3D10_SHADER_DESC);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.Version !== undefined) view.setUint32(0, Number(data.Version), true);
  // 0x04: pad4
  // 0x08: buffer
  if (data?.Creator !== undefined) {
    (buf as any)._f8 = util.pstrToFfi(data.Creator);
    view.setBigUint64(8, (buf as any)._f8 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f8)), true);
  }
  // 0x10: u32
  if (data?.Flags !== undefined) view.setUint32(16, Number(data.Flags), true);
  // 0x14: u32
  if (data?.ConstantBuffers !== undefined) view.setUint32(20, Number(data.ConstantBuffers), true);
  // 0x18: u32
  if (data?.BoundResources !== undefined) view.setUint32(24, Number(data.BoundResources), true);
  // 0x1c: u32
  if (data?.InputParameters !== undefined) view.setUint32(28, Number(data.InputParameters), true);
  // 0x20: u32
  if (data?.OutputParameters !== undefined) view.setUint32(32, Number(data.OutputParameters), true);
  // 0x24: u32
  if (data?.InstructionCount !== undefined) view.setUint32(36, Number(data.InstructionCount), true);
  // 0x28: u32
  if (data?.TempRegisterCount !== undefined) view.setUint32(40, Number(data.TempRegisterCount), true);
  // 0x2c: u32
  if (data?.TempArrayCount !== undefined) view.setUint32(44, Number(data.TempArrayCount), true);
  // 0x30: u32
  if (data?.DefCount !== undefined) view.setUint32(48, Number(data.DefCount), true);
  // 0x34: u32
  if (data?.DclCount !== undefined) view.setUint32(52, Number(data.DclCount), true);
  // 0x38: u32
  if (data?.TextureNormalInstructions !== undefined) view.setUint32(56, Number(data.TextureNormalInstructions), true);
  // 0x3c: u32
  if (data?.TextureLoadInstructions !== undefined) view.setUint32(60, Number(data.TextureLoadInstructions), true);
  // 0x40: u32
  if (data?.TextureCompInstructions !== undefined) view.setUint32(64, Number(data.TextureCompInstructions), true);
  // 0x44: u32
  if (data?.TextureBiasInstructions !== undefined) view.setUint32(68, Number(data.TextureBiasInstructions), true);
  // 0x48: u32
  if (data?.TextureGradientInstructions !== undefined) view.setUint32(72, Number(data.TextureGradientInstructions), true);
  // 0x4c: u32
  if (data?.FloatInstructionCount !== undefined) view.setUint32(76, Number(data.FloatInstructionCount), true);
  // 0x50: u32
  if (data?.IntInstructionCount !== undefined) view.setUint32(80, Number(data.IntInstructionCount), true);
  // 0x54: u32
  if (data?.UintInstructionCount !== undefined) view.setUint32(84, Number(data.UintInstructionCount), true);
  // 0x58: u32
  if (data?.StaticFlowControlCount !== undefined) view.setUint32(88, Number(data.StaticFlowControlCount), true);
  // 0x5c: u32
  if (data?.DynamicFlowControlCount !== undefined) view.setUint32(92, Number(data.DynamicFlowControlCount), true);
  // 0x60: u32
  if (data?.MacroInstructionCount !== undefined) view.setUint32(96, Number(data.MacroInstructionCount), true);
  // 0x64: u32
  if (data?.ArrayInstructionCount !== undefined) view.setUint32(100, Number(data.ArrayInstructionCount), true);
  // 0x68: u32
  if (data?.CutInstructionCount !== undefined) view.setUint32(104, Number(data.CutInstructionCount), true);
  // 0x6c: u32
  if (data?.EmitInstructionCount !== undefined) view.setUint32(108, Number(data.EmitInstructionCount), true);
  // 0x70: i32
  if (data?.GSOutputTopology !== undefined) view.setInt32(112, Number(data.GSOutputTopology), true);
  // 0x74: u32
  if (data?.GSMaxOutputVertexCount !== undefined) view.setUint32(116, Number(data.GSMaxOutputVertexCount), true);
  return buf;
}

/**
 * Windows.Win32.Graphics.Direct3D10.D3D10_SHADER_BUFFER_DESC (size: 24)
 */
export interface D3D10_SHADER_BUFFER_DESC {
  /** Windows.Win32.Foundation.PSTR */
  Name: string | null;
  /** Windows.Win32.Graphics.Direct3D.D3D_CBUFFER_TYPE */
  Type: D3D_CBUFFER_TYPE;
  /** u32 */
  Variables: number;
  /** u32 */
  Size: number;
  /** u32 */
  uFlags: number;
}

export const sizeofD3D10_SHADER_BUFFER_DESC = 24;

export function allocD3D10_SHADER_BUFFER_DESC(data?: Partial<D3D10_SHADER_BUFFER_DESC>): Uint8Array {
  const buf = new Uint8Array(sizeofD3D10_SHADER_BUFFER_DESC);
  const view = new DataView(buf.buffer);
  // 0x00: buffer
  if (data?.Name !== undefined) {
    (buf as any)._f0 = util.pstrToFfi(data.Name);
    view.setBigUint64(0, (buf as any)._f0 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f0)), true);
  }
  // 0x08: i32
  if (data?.Type !== undefined) view.setInt32(8, Number(data.Type), true);
  // 0x0c: u32
  if (data?.Variables !== undefined) view.setUint32(12, Number(data.Variables), true);
  // 0x10: u32
  if (data?.Size !== undefined) view.setUint32(16, Number(data.Size), true);
  // 0x14: u32
  if (data?.uFlags !== undefined) view.setUint32(20, Number(data.uFlags), true);
  return buf;
}

/**
 * Windows.Win32.Graphics.Direct3D10.D3D10_SHADER_VARIABLE_DESC (size: 32)
 */
export interface D3D10_SHADER_VARIABLE_DESC {
  /** Windows.Win32.Foundation.PSTR */
  Name: string | null;
  /** u32 */
  StartOffset: number;
  /** u32 */
  Size: number;
  /** u32 */
  uFlags: number;
  /** ptr */
  DefaultValue: Deno.PointerValue | Uint8Array | null;
}

export const sizeofD3D10_SHADER_VARIABLE_DESC = 32;

export function allocD3D10_SHADER_VARIABLE_DESC(data?: Partial<D3D10_SHADER_VARIABLE_DESC>): Uint8Array {
  const buf = new Uint8Array(sizeofD3D10_SHADER_VARIABLE_DESC);
  const view = new DataView(buf.buffer);
  // 0x00: buffer
  if (data?.Name !== undefined) {
    (buf as any)._f0 = util.pstrToFfi(data.Name);
    view.setBigUint64(0, (buf as any)._f0 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f0)), true);
  }
  // 0x08: u32
  if (data?.StartOffset !== undefined) view.setUint32(8, Number(data.StartOffset), true);
  // 0x0c: u32
  if (data?.Size !== undefined) view.setUint32(12, Number(data.Size), true);
  // 0x10: u32
  if (data?.uFlags !== undefined) view.setUint32(16, Number(data.uFlags), true);
  // 0x14: pad4
  // 0x18: pointer
  if (data?.DefaultValue !== undefined) view.setBigUint64(24, data.DefaultValue === null ? 0n : BigInt(util.toPointer(data.DefaultValue)), true);
  return buf;
}

/**
 * Windows.Win32.Graphics.Direct3D10.D3D10_SHADER_TYPE_DESC (size: 32)
 */
export interface D3D10_SHADER_TYPE_DESC {
  /** Windows.Win32.Graphics.Direct3D.D3D_SHADER_VARIABLE_CLASS */
  Class: D3D_SHADER_VARIABLE_CLASS;
  /** Windows.Win32.Graphics.Direct3D.D3D_SHADER_VARIABLE_TYPE */
  Type: D3D_SHADER_VARIABLE_TYPE;
  /** u32 */
  Rows: number;
  /** u32 */
  Columns: number;
  /** u32 */
  Elements: number;
  /** u32 */
  Members: number;
  /** u32 */
  Offset: number;
}

export const sizeofD3D10_SHADER_TYPE_DESC = 32;

export function allocD3D10_SHADER_TYPE_DESC(data?: Partial<D3D10_SHADER_TYPE_DESC>): Uint8Array {
  const buf = new Uint8Array(sizeofD3D10_SHADER_TYPE_DESC);
  const view = new DataView(buf.buffer);
  // 0x00: i32
  if (data?.Class !== undefined) view.setInt32(0, Number(data.Class), true);
  // 0x04: i32
  if (data?.Type !== undefined) view.setInt32(4, Number(data.Type), true);
  // 0x08: u32
  if (data?.Rows !== undefined) view.setUint32(8, Number(data.Rows), true);
  // 0x0c: u32
  if (data?.Columns !== undefined) view.setUint32(12, Number(data.Columns), true);
  // 0x10: u32
  if (data?.Elements !== undefined) view.setUint32(16, Number(data.Elements), true);
  // 0x14: u32
  if (data?.Members !== undefined) view.setUint32(20, Number(data.Members), true);
  // 0x18: u32
  if (data?.Offset !== undefined) view.setUint32(24, Number(data.Offset), true);
  // 0x1c: pad4
  return buf;
}

/**
 * Windows.Win32.Graphics.Direct3D10.D3D10_SHADER_INPUT_BIND_DESC (size: 40)
 */
export interface D3D10_SHADER_INPUT_BIND_DESC {
  /** Windows.Win32.Foundation.PSTR */
  Name: string | null;
  /** Windows.Win32.Graphics.Direct3D.D3D_SHADER_INPUT_TYPE */
  Type: D3D_SHADER_INPUT_TYPE;
  /** u32 */
  BindPoint: number;
  /** u32 */
  BindCount: number;
  /** u32 */
  uFlags: number;
  /** Windows.Win32.Graphics.Direct3D.D3D_RESOURCE_RETURN_TYPE */
  ReturnType: D3D_RESOURCE_RETURN_TYPE;
  /** Windows.Win32.Graphics.Direct3D.D3D_SRV_DIMENSION */
  Dimension: D3D_SRV_DIMENSION;
  /** u32 */
  NumSamples: number;
}

export const sizeofD3D10_SHADER_INPUT_BIND_DESC = 40;

export function allocD3D10_SHADER_INPUT_BIND_DESC(data?: Partial<D3D10_SHADER_INPUT_BIND_DESC>): Uint8Array {
  const buf = new Uint8Array(sizeofD3D10_SHADER_INPUT_BIND_DESC);
  const view = new DataView(buf.buffer);
  // 0x00: buffer
  if (data?.Name !== undefined) {
    (buf as any)._f0 = util.pstrToFfi(data.Name);
    view.setBigUint64(0, (buf as any)._f0 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f0)), true);
  }
  // 0x08: i32
  if (data?.Type !== undefined) view.setInt32(8, Number(data.Type), true);
  // 0x0c: u32
  if (data?.BindPoint !== undefined) view.setUint32(12, Number(data.BindPoint), true);
  // 0x10: u32
  if (data?.BindCount !== undefined) view.setUint32(16, Number(data.BindCount), true);
  // 0x14: u32
  if (data?.uFlags !== undefined) view.setUint32(20, Number(data.uFlags), true);
  // 0x18: i32
  if (data?.ReturnType !== undefined) view.setInt32(24, Number(data.ReturnType), true);
  // 0x1c: i32
  if (data?.Dimension !== undefined) view.setInt32(28, Number(data.Dimension), true);
  // 0x20: u32
  if (data?.NumSamples !== undefined) view.setUint32(32, Number(data.NumSamples), true);
  // 0x24: pad4
  return buf;
}

/**
 * Windows.Win32.Graphics.Direct3D10.D3D10_SIGNATURE_PARAMETER_DESC (size: 32)
 */
export interface D3D10_SIGNATURE_PARAMETER_DESC {
  /** Windows.Win32.Foundation.PSTR */
  SemanticName: string | null;
  /** u32 */
  SemanticIndex: number;
  /** u32 */
  Register: number;
  /** Windows.Win32.Graphics.Direct3D.D3D_NAME */
  SystemValueType: D3D_NAME;
  /** Windows.Win32.Graphics.Direct3D.D3D_REGISTER_COMPONENT_TYPE */
  ComponentType: D3D_REGISTER_COMPONENT_TYPE;
  /** u8 */
  Mask: number;
  /** u8 */
  ReadWriteMask: number;
}

export const sizeofD3D10_SIGNATURE_PARAMETER_DESC = 32;

export function allocD3D10_SIGNATURE_PARAMETER_DESC(data?: Partial<D3D10_SIGNATURE_PARAMETER_DESC>): Uint8Array {
  const buf = new Uint8Array(sizeofD3D10_SIGNATURE_PARAMETER_DESC);
  const view = new DataView(buf.buffer);
  // 0x00: buffer
  if (data?.SemanticName !== undefined) {
    (buf as any)._f0 = util.pstrToFfi(data.SemanticName);
    view.setBigUint64(0, (buf as any)._f0 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f0)), true);
  }
  // 0x08: u32
  if (data?.SemanticIndex !== undefined) view.setUint32(8, Number(data.SemanticIndex), true);
  // 0x0c: u32
  if (data?.Register !== undefined) view.setUint32(12, Number(data.Register), true);
  // 0x10: i32
  if (data?.SystemValueType !== undefined) view.setInt32(16, Number(data.SystemValueType), true);
  // 0x14: i32
  if (data?.ComponentType !== undefined) view.setInt32(20, Number(data.ComponentType), true);
  // 0x18: u8
  if (data?.Mask !== undefined) view.setUint8(24, Number(data.Mask));
  // 0x19: u8
  if (data?.ReadWriteMask !== undefined) view.setUint8(25, Number(data.ReadWriteMask));
  // 0x1a: pad6
  return buf;
}

/**
 * Windows.Win32.Graphics.Direct3D10.D3D10_STATE_BLOCK_MASK (size: 120)
 */
export interface D3D10_STATE_BLOCK_MASK {
  /** u8 */
  VS: number;
  /** array */
  VSSamplers: Deno.PointerValue | null;
  /** array */
  VSShaderResources: Deno.PointerValue | null;
  /** array */
  VSConstantBuffers: Deno.PointerValue | null;
  /** u8 */
  GS: number;
  /** array */
  GSSamplers: Deno.PointerValue | null;
  /** array */
  GSShaderResources: Deno.PointerValue | null;
  /** array */
  GSConstantBuffers: Deno.PointerValue | null;
  /** u8 */
  PS: number;
  /** array */
  PSSamplers: Deno.PointerValue | null;
  /** array */
  PSShaderResources: Deno.PointerValue | null;
  /** array */
  PSConstantBuffers: Deno.PointerValue | null;
  /** array */
  IAVertexBuffers: Deno.PointerValue | null;
  /** u8 */
  IAIndexBuffer: number;
  /** u8 */
  IAInputLayout: number;
  /** u8 */
  IAPrimitiveTopology: number;
  /** u8 */
  OMRenderTargets: number;
  /** u8 */
  OMDepthStencilState: number;
  /** u8 */
  OMBlendState: number;
  /** u8 */
  RSViewports: number;
  /** u8 */
  RSScissorRects: number;
  /** u8 */
  RSRasterizerState: number;
  /** u8 */
  SOBuffers: number;
  /** u8 */
  Predication: number;
}

export const sizeofD3D10_STATE_BLOCK_MASK = 120;

export function allocD3D10_STATE_BLOCK_MASK(data?: Partial<D3D10_STATE_BLOCK_MASK>): Uint8Array {
  const buf = new Uint8Array(sizeofD3D10_STATE_BLOCK_MASK);
  const view = new DataView(buf.buffer);
  // 0x00: u8
  if (data?.VS !== undefined) view.setUint8(0, Number(data.VS));
  // 0x01: pad7
  // 0x08: pointer
  if (data?.VSSamplers !== undefined) view.setBigUint64(8, data.VSSamplers === null ? 0n : BigInt(util.toPointer(data.VSSamplers)), true);
  // 0x10: pointer
  if (data?.VSShaderResources !== undefined) view.setBigUint64(16, data.VSShaderResources === null ? 0n : BigInt(util.toPointer(data.VSShaderResources)), true);
  // 0x18: pointer
  if (data?.VSConstantBuffers !== undefined) view.setBigUint64(24, data.VSConstantBuffers === null ? 0n : BigInt(util.toPointer(data.VSConstantBuffers)), true);
  // 0x20: u8
  if (data?.GS !== undefined) view.setUint8(32, Number(data.GS));
  // 0x21: pad7
  // 0x28: pointer
  if (data?.GSSamplers !== undefined) view.setBigUint64(40, data.GSSamplers === null ? 0n : BigInt(util.toPointer(data.GSSamplers)), true);
  // 0x30: pointer
  if (data?.GSShaderResources !== undefined) view.setBigUint64(48, data.GSShaderResources === null ? 0n : BigInt(util.toPointer(data.GSShaderResources)), true);
  // 0x38: pointer
  if (data?.GSConstantBuffers !== undefined) view.setBigUint64(56, data.GSConstantBuffers === null ? 0n : BigInt(util.toPointer(data.GSConstantBuffers)), true);
  // 0x40: u8
  if (data?.PS !== undefined) view.setUint8(64, Number(data.PS));
  // 0x41: pad7
  // 0x48: pointer
  if (data?.PSSamplers !== undefined) view.setBigUint64(72, data.PSSamplers === null ? 0n : BigInt(util.toPointer(data.PSSamplers)), true);
  // 0x50: pointer
  if (data?.PSShaderResources !== undefined) view.setBigUint64(80, data.PSShaderResources === null ? 0n : BigInt(util.toPointer(data.PSShaderResources)), true);
  // 0x58: pointer
  if (data?.PSConstantBuffers !== undefined) view.setBigUint64(88, data.PSConstantBuffers === null ? 0n : BigInt(util.toPointer(data.PSConstantBuffers)), true);
  // 0x60: pointer
  if (data?.IAVertexBuffers !== undefined) view.setBigUint64(96, data.IAVertexBuffers === null ? 0n : BigInt(util.toPointer(data.IAVertexBuffers)), true);
  // 0x68: u8
  if (data?.IAIndexBuffer !== undefined) view.setUint8(104, Number(data.IAIndexBuffer));
  // 0x69: u8
  if (data?.IAInputLayout !== undefined) view.setUint8(105, Number(data.IAInputLayout));
  // 0x6a: u8
  if (data?.IAPrimitiveTopology !== undefined) view.setUint8(106, Number(data.IAPrimitiveTopology));
  // 0x6b: u8
  if (data?.OMRenderTargets !== undefined) view.setUint8(107, Number(data.OMRenderTargets));
  // 0x6c: u8
  if (data?.OMDepthStencilState !== undefined) view.setUint8(108, Number(data.OMDepthStencilState));
  // 0x6d: u8
  if (data?.OMBlendState !== undefined) view.setUint8(109, Number(data.OMBlendState));
  // 0x6e: u8
  if (data?.RSViewports !== undefined) view.setUint8(110, Number(data.RSViewports));
  // 0x6f: u8
  if (data?.RSScissorRects !== undefined) view.setUint8(111, Number(data.RSScissorRects));
  // 0x70: u8
  if (data?.RSRasterizerState !== undefined) view.setUint8(112, Number(data.RSRasterizerState));
  // 0x71: u8
  if (data?.SOBuffers !== undefined) view.setUint8(113, Number(data.SOBuffers));
  // 0x72: u8
  if (data?.Predication !== undefined) view.setUint8(114, Number(data.Predication));
  // 0x73: pad5
  return buf;
}

/**
 * Windows.Win32.Graphics.Direct3D10.D3D10_EFFECT_TYPE_DESC (size: 48)
 */
export interface D3D10_EFFECT_TYPE_DESC {
  /** Windows.Win32.Foundation.PSTR */
  TypeName: string | null;
  /** Windows.Win32.Graphics.Direct3D.D3D_SHADER_VARIABLE_CLASS */
  Class: D3D_SHADER_VARIABLE_CLASS;
  /** Windows.Win32.Graphics.Direct3D.D3D_SHADER_VARIABLE_TYPE */
  Type: D3D_SHADER_VARIABLE_TYPE;
  /** u32 */
  Elements: number;
  /** u32 */
  Members: number;
  /** u32 */
  Rows: number;
  /** u32 */
  Columns: number;
  /** u32 */
  PackedSize: number;
  /** u32 */
  UnpackedSize: number;
  /** u32 */
  Stride: number;
}

export const sizeofD3D10_EFFECT_TYPE_DESC = 48;

export function allocD3D10_EFFECT_TYPE_DESC(data?: Partial<D3D10_EFFECT_TYPE_DESC>): Uint8Array {
  const buf = new Uint8Array(sizeofD3D10_EFFECT_TYPE_DESC);
  const view = new DataView(buf.buffer);
  // 0x00: buffer
  if (data?.TypeName !== undefined) {
    (buf as any)._f0 = util.pstrToFfi(data.TypeName);
    view.setBigUint64(0, (buf as any)._f0 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f0)), true);
  }
  // 0x08: i32
  if (data?.Class !== undefined) view.setInt32(8, Number(data.Class), true);
  // 0x0c: i32
  if (data?.Type !== undefined) view.setInt32(12, Number(data.Type), true);
  // 0x10: u32
  if (data?.Elements !== undefined) view.setUint32(16, Number(data.Elements), true);
  // 0x14: u32
  if (data?.Members !== undefined) view.setUint32(20, Number(data.Members), true);
  // 0x18: u32
  if (data?.Rows !== undefined) view.setUint32(24, Number(data.Rows), true);
  // 0x1c: u32
  if (data?.Columns !== undefined) view.setUint32(28, Number(data.Columns), true);
  // 0x20: u32
  if (data?.PackedSize !== undefined) view.setUint32(32, Number(data.PackedSize), true);
  // 0x24: u32
  if (data?.UnpackedSize !== undefined) view.setUint32(36, Number(data.UnpackedSize), true);
  // 0x28: u32
  if (data?.Stride !== undefined) view.setUint32(40, Number(data.Stride), true);
  // 0x2c: pad4
  return buf;
}

/**
 * Windows.Win32.Graphics.Direct3D10.D3D10_EFFECT_VARIABLE_DESC (size: 32)
 */
export interface D3D10_EFFECT_VARIABLE_DESC {
  /** Windows.Win32.Foundation.PSTR */
  Name: string | null;
  /** Windows.Win32.Foundation.PSTR */
  Semantic: string | null;
  /** u32 */
  Flags: number;
  /** u32 */
  Annotations: number;
  /** u32 */
  BufferOffset: number;
  /** u32 */
  ExplicitBindPoint: number;
}

export const sizeofD3D10_EFFECT_VARIABLE_DESC = 32;

export function allocD3D10_EFFECT_VARIABLE_DESC(data?: Partial<D3D10_EFFECT_VARIABLE_DESC>): Uint8Array {
  const buf = new Uint8Array(sizeofD3D10_EFFECT_VARIABLE_DESC);
  const view = new DataView(buf.buffer);
  // 0x00: buffer
  if (data?.Name !== undefined) {
    (buf as any)._f0 = util.pstrToFfi(data.Name);
    view.setBigUint64(0, (buf as any)._f0 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f0)), true);
  }
  // 0x08: buffer
  if (data?.Semantic !== undefined) {
    (buf as any)._f8 = util.pstrToFfi(data.Semantic);
    view.setBigUint64(8, (buf as any)._f8 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f8)), true);
  }
  // 0x10: u32
  if (data?.Flags !== undefined) view.setUint32(16, Number(data.Flags), true);
  // 0x14: u32
  if (data?.Annotations !== undefined) view.setUint32(20, Number(data.Annotations), true);
  // 0x18: u32
  if (data?.BufferOffset !== undefined) view.setUint32(24, Number(data.BufferOffset), true);
  // 0x1c: u32
  if (data?.ExplicitBindPoint !== undefined) view.setUint32(28, Number(data.ExplicitBindPoint), true);
  return buf;
}

/**
 * Windows.Win32.Graphics.Direct3D10.D3D10_EFFECT_SHADER_DESC (size: 48)
 */
export interface D3D10_EFFECT_SHADER_DESC {
  /** ptr */
  pInputSignature: Deno.PointerValue | Uint8Array | null;
  /** Windows.Win32.Foundation.BOOL */
  IsInline: boolean;
  /** ptr */
  pBytecode: Deno.PointerValue | Uint8Array | null;
  /** u32 */
  BytecodeLength: number;
  /** Windows.Win32.Foundation.PSTR */
  SODecl: string | null;
  /** u32 */
  NumInputSignatureEntries: number;
  /** u32 */
  NumOutputSignatureEntries: number;
}

export const sizeofD3D10_EFFECT_SHADER_DESC = 48;

export function allocD3D10_EFFECT_SHADER_DESC(data?: Partial<D3D10_EFFECT_SHADER_DESC>): Uint8Array {
  const buf = new Uint8Array(sizeofD3D10_EFFECT_SHADER_DESC);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.pInputSignature !== undefined) view.setBigUint64(0, data.pInputSignature === null ? 0n : BigInt(util.toPointer(data.pInputSignature)), true);
  // 0x08: i32
  if (data?.IsInline !== undefined) view.setInt32(8, Number(data.IsInline), true);
  // 0x0c: pad4
  // 0x10: pointer
  if (data?.pBytecode !== undefined) view.setBigUint64(16, data.pBytecode === null ? 0n : BigInt(util.toPointer(data.pBytecode)), true);
  // 0x18: u32
  if (data?.BytecodeLength !== undefined) view.setUint32(24, Number(data.BytecodeLength), true);
  // 0x1c: pad4
  // 0x20: buffer
  if (data?.SODecl !== undefined) {
    (buf as any)._f32 = util.pstrToFfi(data.SODecl);
    view.setBigUint64(32, (buf as any)._f32 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f32)), true);
  }
  // 0x28: u32
  if (data?.NumInputSignatureEntries !== undefined) view.setUint32(40, Number(data.NumInputSignatureEntries), true);
  // 0x2c: u32
  if (data?.NumOutputSignatureEntries !== undefined) view.setUint32(44, Number(data.NumOutputSignatureEntries), true);
  return buf;
}

/**
 * Windows.Win32.Graphics.Direct3D10.D3D10_PASS_DESC (size: 48)
 */
export interface D3D10_PASS_DESC {
  /** Windows.Win32.Foundation.PSTR */
  Name: string | null;
  /** u32 */
  Annotations: number;
  /** ptr */
  pIAInputSignature: Deno.PointerValue | Uint8Array | null;
  /** usize */
  IAInputSignatureSize: Deno.PointerValue;
  /** u32 */
  StencilRef: number;
  /** u32 */
  SampleMask: number;
  /** array */
  BlendFactor: Deno.PointerValue | null;
}

export const sizeofD3D10_PASS_DESC = 48;

export function allocD3D10_PASS_DESC(data?: Partial<D3D10_PASS_DESC>): Uint8Array {
  const buf = new Uint8Array(sizeofD3D10_PASS_DESC);
  const view = new DataView(buf.buffer);
  // 0x00: buffer
  if (data?.Name !== undefined) {
    (buf as any)._f0 = util.pstrToFfi(data.Name);
    view.setBigUint64(0, (buf as any)._f0 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f0)), true);
  }
  // 0x08: u32
  if (data?.Annotations !== undefined) view.setUint32(8, Number(data.Annotations), true);
  // 0x0c: pad4
  // 0x10: pointer
  if (data?.pIAInputSignature !== undefined) view.setBigUint64(16, data.pIAInputSignature === null ? 0n : BigInt(util.toPointer(data.pIAInputSignature)), true);
  // 0x18: usize
  if (data?.IAInputSignatureSize !== undefined) view.setBigUint64(24, BigInt(data.IAInputSignatureSize), true);
  // 0x20: u32
  if (data?.StencilRef !== undefined) view.setUint32(32, Number(data.StencilRef), true);
  // 0x24: u32
  if (data?.SampleMask !== undefined) view.setUint32(36, Number(data.SampleMask), true);
  // 0x28: pointer
  if (data?.BlendFactor !== undefined) view.setBigUint64(40, data.BlendFactor === null ? 0n : BigInt(util.toPointer(data.BlendFactor)), true);
  return buf;
}

/**
 * Windows.Win32.Graphics.Direct3D10.D3D10_PASS_SHADER_DESC (size: 16)
 */
export interface D3D10_PASS_SHADER_DESC {
  /** Windows.Win32.Graphics.Direct3D10.ID3D10EffectShaderVariable */
  pShaderVariable: Uint8Array | Deno.PointerValue | null;
  /** u32 */
  ShaderIndex: number;
}

export const sizeofD3D10_PASS_SHADER_DESC = 16;

export function allocD3D10_PASS_SHADER_DESC(data?: Partial<D3D10_PASS_SHADER_DESC>): Uint8Array {
  const buf = new Uint8Array(sizeofD3D10_PASS_SHADER_DESC);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.pShaderVariable !== undefined) view.setBigUint64(0, data.pShaderVariable === null ? 0n : BigInt(util.toPointer(data.pShaderVariable)), true);
  // 0x08: u32
  if (data?.ShaderIndex !== undefined) view.setUint32(8, Number(data.ShaderIndex), true);
  // 0x0c: pad4
  return buf;
}

/**
 * Windows.Win32.Graphics.Direct3D10.D3D10_TECHNIQUE_DESC (size: 16)
 */
export interface D3D10_TECHNIQUE_DESC {
  /** Windows.Win32.Foundation.PSTR */
  Name: string | null;
  /** u32 */
  Passes: number;
  /** u32 */
  Annotations: number;
}

export const sizeofD3D10_TECHNIQUE_DESC = 16;

export function allocD3D10_TECHNIQUE_DESC(data?: Partial<D3D10_TECHNIQUE_DESC>): Uint8Array {
  const buf = new Uint8Array(sizeofD3D10_TECHNIQUE_DESC);
  const view = new DataView(buf.buffer);
  // 0x00: buffer
  if (data?.Name !== undefined) {
    (buf as any)._f0 = util.pstrToFfi(data.Name);
    view.setBigUint64(0, (buf as any)._f0 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f0)), true);
  }
  // 0x08: u32
  if (data?.Passes !== undefined) view.setUint32(8, Number(data.Passes), true);
  // 0x0c: u32
  if (data?.Annotations !== undefined) view.setUint32(12, Number(data.Annotations), true);
  return buf;
}

/**
 * Windows.Win32.Graphics.Direct3D10.D3D10_EFFECT_DESC (size: 24)
 */
export interface D3D10_EFFECT_DESC {
  /** Windows.Win32.Foundation.BOOL */
  IsChildEffect: boolean;
  /** u32 */
  ConstantBuffers: number;
  /** u32 */
  SharedConstantBuffers: number;
  /** u32 */
  GlobalVariables: number;
  /** u32 */
  SharedGlobalVariables: number;
  /** u32 */
  Techniques: number;
}

export const sizeofD3D10_EFFECT_DESC = 24;

export function allocD3D10_EFFECT_DESC(data?: Partial<D3D10_EFFECT_DESC>): Uint8Array {
  const buf = new Uint8Array(sizeofD3D10_EFFECT_DESC);
  const view = new DataView(buf.buffer);
  // 0x00: i32
  if (data?.IsChildEffect !== undefined) view.setInt32(0, Number(data.IsChildEffect), true);
  // 0x04: u32
  if (data?.ConstantBuffers !== undefined) view.setUint32(4, Number(data.ConstantBuffers), true);
  // 0x08: u32
  if (data?.SharedConstantBuffers !== undefined) view.setUint32(8, Number(data.SharedConstantBuffers), true);
  // 0x0c: u32
  if (data?.GlobalVariables !== undefined) view.setUint32(12, Number(data.GlobalVariables), true);
  // 0x10: u32
  if (data?.SharedGlobalVariables !== undefined) view.setUint32(16, Number(data.SharedGlobalVariables), true);
  // 0x14: u32
  if (data?.Techniques !== undefined) view.setUint32(20, Number(data.Techniques), true);
  return buf;
}

/**
 * Windows.Win32.Graphics.Direct3D10.D3D10_RENDER_TARGET_BLEND_DESC1 (size: 32)
 */
export interface D3D10_RENDER_TARGET_BLEND_DESC1 {
  /** Windows.Win32.Foundation.BOOL */
  BlendEnable: boolean;
  /** Windows.Win32.Graphics.Direct3D10.D3D10_BLEND */
  SrcBlend: D3D10_BLEND;
  /** Windows.Win32.Graphics.Direct3D10.D3D10_BLEND */
  DestBlend: D3D10_BLEND;
  /** Windows.Win32.Graphics.Direct3D10.D3D10_BLEND_OP */
  BlendOp: D3D10_BLEND_OP;
  /** Windows.Win32.Graphics.Direct3D10.D3D10_BLEND */
  SrcBlendAlpha: D3D10_BLEND;
  /** Windows.Win32.Graphics.Direct3D10.D3D10_BLEND */
  DestBlendAlpha: D3D10_BLEND;
  /** Windows.Win32.Graphics.Direct3D10.D3D10_BLEND_OP */
  BlendOpAlpha: D3D10_BLEND_OP;
  /** u8 */
  RenderTargetWriteMask: number;
}

export const sizeofD3D10_RENDER_TARGET_BLEND_DESC1 = 32;

export function allocD3D10_RENDER_TARGET_BLEND_DESC1(data?: Partial<D3D10_RENDER_TARGET_BLEND_DESC1>): Uint8Array {
  const buf = new Uint8Array(sizeofD3D10_RENDER_TARGET_BLEND_DESC1);
  const view = new DataView(buf.buffer);
  // 0x00: i32
  if (data?.BlendEnable !== undefined) view.setInt32(0, Number(data.BlendEnable), true);
  // 0x04: i32
  if (data?.SrcBlend !== undefined) view.setInt32(4, Number(data.SrcBlend), true);
  // 0x08: i32
  if (data?.DestBlend !== undefined) view.setInt32(8, Number(data.DestBlend), true);
  // 0x0c: i32
  if (data?.BlendOp !== undefined) view.setInt32(12, Number(data.BlendOp), true);
  // 0x10: i32
  if (data?.SrcBlendAlpha !== undefined) view.setInt32(16, Number(data.SrcBlendAlpha), true);
  // 0x14: i32
  if (data?.DestBlendAlpha !== undefined) view.setInt32(20, Number(data.DestBlendAlpha), true);
  // 0x18: i32
  if (data?.BlendOpAlpha !== undefined) view.setInt32(24, Number(data.BlendOpAlpha), true);
  // 0x1c: u8
  if (data?.RenderTargetWriteMask !== undefined) view.setUint8(28, Number(data.RenderTargetWriteMask));
  // 0x1d: pad3
  return buf;
}

/**
 * Windows.Win32.Graphics.Direct3D10.D3D10_BLEND_DESC1 (size: 16)
 */
export interface D3D10_BLEND_DESC1 {
  /** Windows.Win32.Foundation.BOOL */
  AlphaToCoverageEnable: boolean;
  /** Windows.Win32.Foundation.BOOL */
  IndependentBlendEnable: boolean;
  /** array */
  RenderTarget: Deno.PointerValue | null;
}

export const sizeofD3D10_BLEND_DESC1 = 16;

export function allocD3D10_BLEND_DESC1(data?: Partial<D3D10_BLEND_DESC1>): Uint8Array {
  const buf = new Uint8Array(sizeofD3D10_BLEND_DESC1);
  const view = new DataView(buf.buffer);
  // 0x00: i32
  if (data?.AlphaToCoverageEnable !== undefined) view.setInt32(0, Number(data.AlphaToCoverageEnable), true);
  // 0x04: i32
  if (data?.IndependentBlendEnable !== undefined) view.setInt32(4, Number(data.IndependentBlendEnable), true);
  // 0x08: pointer
  if (data?.RenderTarget !== undefined) view.setBigUint64(8, data.RenderTarget === null ? 0n : BigInt(util.toPointer(data.RenderTarget)), true);
  return buf;
}

/**
 * Windows.Win32.Graphics.Direct3D10.D3D10_TEXCUBE_ARRAY_SRV1 (size: 16)
 */
export interface D3D10_TEXCUBE_ARRAY_SRV1 {
  /** u32 */
  MostDetailedMip: number;
  /** u32 */
  MipLevels: number;
  /** u32 */
  First2DArrayFace: number;
  /** u32 */
  NumCubes: number;
}

export const sizeofD3D10_TEXCUBE_ARRAY_SRV1 = 16;

export function allocD3D10_TEXCUBE_ARRAY_SRV1(data?: Partial<D3D10_TEXCUBE_ARRAY_SRV1>): Uint8Array {
  const buf = new Uint8Array(sizeofD3D10_TEXCUBE_ARRAY_SRV1);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.MostDetailedMip !== undefined) view.setUint32(0, Number(data.MostDetailedMip), true);
  // 0x04: u32
  if (data?.MipLevels !== undefined) view.setUint32(4, Number(data.MipLevels), true);
  // 0x08: u32
  if (data?.First2DArrayFace !== undefined) view.setUint32(8, Number(data.First2DArrayFace), true);
  // 0x0c: u32
  if (data?.NumCubes !== undefined) view.setUint32(12, Number(data.NumCubes), true);
  return buf;
}

/**
 * Windows.Win32.Graphics.Direct3D10.D3D10_SHADER_RESOURCE_VIEW_DESC1 (size: 16)
 */
export interface D3D10_SHADER_RESOURCE_VIEW_DESC1 {
  /** Windows.Win32.Graphics.Dxgi.Common.DXGI_FORMAT */
  Format: DXGI_FORMAT;
  /** Windows.Win32.Graphics.Direct3D.D3D_SRV_DIMENSION */
  ViewDimension: D3D_SRV_DIMENSION;
  /** _Anonymous_e__Union */
  Anonymous: Uint8Array | Deno.PointerValue | null;
}

export const sizeofD3D10_SHADER_RESOURCE_VIEW_DESC1 = 16;

export function allocD3D10_SHADER_RESOURCE_VIEW_DESC1(data?: Partial<D3D10_SHADER_RESOURCE_VIEW_DESC1>): Uint8Array {
  const buf = new Uint8Array(sizeofD3D10_SHADER_RESOURCE_VIEW_DESC1);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.Format !== undefined) view.setUint32(0, Number(data.Format), true);
  // 0x04: i32
  if (data?.ViewDimension !== undefined) view.setInt32(4, Number(data.ViewDimension), true);
  // 0x08: pointer
  if (data?.Anonymous !== undefined) view.setBigUint64(8, data.Anonymous === null ? 0n : BigInt(util.toPointer(data.Anonymous)), true);
  return buf;
}

/**
 * Windows.Win32.Graphics.Direct3D10.D3D10_SHADER_DEBUG_TOKEN_INFO (size: 24)
 */
export interface D3D10_SHADER_DEBUG_TOKEN_INFO {
  /** u32 */
  File: number;
  /** u32 */
  Line: number;
  /** u32 */
  Column: number;
  /** u32 */
  TokenLength: number;
  /** u32 */
  TokenId: number;
}

export const sizeofD3D10_SHADER_DEBUG_TOKEN_INFO = 24;

export function allocD3D10_SHADER_DEBUG_TOKEN_INFO(data?: Partial<D3D10_SHADER_DEBUG_TOKEN_INFO>): Uint8Array {
  const buf = new Uint8Array(sizeofD3D10_SHADER_DEBUG_TOKEN_INFO);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.File !== undefined) view.setUint32(0, Number(data.File), true);
  // 0x04: u32
  if (data?.Line !== undefined) view.setUint32(4, Number(data.Line), true);
  // 0x08: u32
  if (data?.Column !== undefined) view.setUint32(8, Number(data.Column), true);
  // 0x0c: u32
  if (data?.TokenLength !== undefined) view.setUint32(12, Number(data.TokenLength), true);
  // 0x10: u32
  if (data?.TokenId !== undefined) view.setUint32(16, Number(data.TokenId), true);
  // 0x14: pad4
  return buf;
}

/**
 * Windows.Win32.Graphics.Direct3D10.D3D10_SHADER_DEBUG_VAR_INFO (size: 24)
 */
export interface D3D10_SHADER_DEBUG_VAR_INFO {
  /** u32 */
  TokenId: number;
  /** Windows.Win32.Graphics.Direct3D.D3D_SHADER_VARIABLE_TYPE */
  Type: D3D_SHADER_VARIABLE_TYPE;
  /** u32 */
  Register: number;
  /** u32 */
  Component: number;
  /** u32 */
  ScopeVar: number;
  /** u32 */
  ScopeVarOffset: number;
}

export const sizeofD3D10_SHADER_DEBUG_VAR_INFO = 24;

export function allocD3D10_SHADER_DEBUG_VAR_INFO(data?: Partial<D3D10_SHADER_DEBUG_VAR_INFO>): Uint8Array {
  const buf = new Uint8Array(sizeofD3D10_SHADER_DEBUG_VAR_INFO);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.TokenId !== undefined) view.setUint32(0, Number(data.TokenId), true);
  // 0x04: i32
  if (data?.Type !== undefined) view.setInt32(4, Number(data.Type), true);
  // 0x08: u32
  if (data?.Register !== undefined) view.setUint32(8, Number(data.Register), true);
  // 0x0c: u32
  if (data?.Component !== undefined) view.setUint32(12, Number(data.Component), true);
  // 0x10: u32
  if (data?.ScopeVar !== undefined) view.setUint32(16, Number(data.ScopeVar), true);
  // 0x14: u32
  if (data?.ScopeVarOffset !== undefined) view.setUint32(20, Number(data.ScopeVarOffset), true);
  return buf;
}

/**
 * Windows.Win32.Graphics.Direct3D10.D3D10_SHADER_DEBUG_INPUT_INFO (size: 24)
 */
export interface D3D10_SHADER_DEBUG_INPUT_INFO {
  /** u32 */
  Var: number;
  /** Windows.Win32.Graphics.Direct3D10.D3D10_SHADER_DEBUG_REGTYPE */
  InitialRegisterSet: D3D10_SHADER_DEBUG_REGTYPE;
  /** u32 */
  InitialBank: number;
  /** u32 */
  InitialRegister: number;
  /** u32 */
  InitialComponent: number;
  /** u32 */
  InitialValue: number;
}

export const sizeofD3D10_SHADER_DEBUG_INPUT_INFO = 24;

export function allocD3D10_SHADER_DEBUG_INPUT_INFO(data?: Partial<D3D10_SHADER_DEBUG_INPUT_INFO>): Uint8Array {
  const buf = new Uint8Array(sizeofD3D10_SHADER_DEBUG_INPUT_INFO);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.Var !== undefined) view.setUint32(0, Number(data.Var), true);
  // 0x04: i32
  if (data?.InitialRegisterSet !== undefined) view.setInt32(4, Number(data.InitialRegisterSet), true);
  // 0x08: u32
  if (data?.InitialBank !== undefined) view.setUint32(8, Number(data.InitialBank), true);
  // 0x0c: u32
  if (data?.InitialRegister !== undefined) view.setUint32(12, Number(data.InitialRegister), true);
  // 0x10: u32
  if (data?.InitialComponent !== undefined) view.setUint32(16, Number(data.InitialComponent), true);
  // 0x14: u32
  if (data?.InitialValue !== undefined) view.setUint32(20, Number(data.InitialValue), true);
  return buf;
}

/**
 * Windows.Win32.Graphics.Direct3D10.D3D10_SHADER_DEBUG_SCOPEVAR_INFO (size: 48)
 */
export interface D3D10_SHADER_DEBUG_SCOPEVAR_INFO {
  /** u32 */
  TokenId: number;
  /** Windows.Win32.Graphics.Direct3D10.D3D10_SHADER_DEBUG_VARTYPE */
  VarType: D3D10_SHADER_DEBUG_VARTYPE;
  /** Windows.Win32.Graphics.Direct3D.D3D_SHADER_VARIABLE_CLASS */
  Class: D3D_SHADER_VARIABLE_CLASS;
  /** u32 */
  Rows: number;
  /** u32 */
  Columns: number;
  /** u32 */
  StructMemberScope: number;
  /** u32 */
  uArrayIndices: number;
  /** u32 */
  ArrayElements: number;
  /** u32 */
  ArrayStrides: number;
  /** u32 */
  uVariables: number;
  /** u32 */
  uFirstVariable: number;
}

export const sizeofD3D10_SHADER_DEBUG_SCOPEVAR_INFO = 48;

export function allocD3D10_SHADER_DEBUG_SCOPEVAR_INFO(data?: Partial<D3D10_SHADER_DEBUG_SCOPEVAR_INFO>): Uint8Array {
  const buf = new Uint8Array(sizeofD3D10_SHADER_DEBUG_SCOPEVAR_INFO);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.TokenId !== undefined) view.setUint32(0, Number(data.TokenId), true);
  // 0x04: i32
  if (data?.VarType !== undefined) view.setInt32(4, Number(data.VarType), true);
  // 0x08: i32
  if (data?.Class !== undefined) view.setInt32(8, Number(data.Class), true);
  // 0x0c: u32
  if (data?.Rows !== undefined) view.setUint32(12, Number(data.Rows), true);
  // 0x10: u32
  if (data?.Columns !== undefined) view.setUint32(16, Number(data.Columns), true);
  // 0x14: u32
  if (data?.StructMemberScope !== undefined) view.setUint32(20, Number(data.StructMemberScope), true);
  // 0x18: u32
  if (data?.uArrayIndices !== undefined) view.setUint32(24, Number(data.uArrayIndices), true);
  // 0x1c: u32
  if (data?.ArrayElements !== undefined) view.setUint32(28, Number(data.ArrayElements), true);
  // 0x20: u32
  if (data?.ArrayStrides !== undefined) view.setUint32(32, Number(data.ArrayStrides), true);
  // 0x24: u32
  if (data?.uVariables !== undefined) view.setUint32(36, Number(data.uVariables), true);
  // 0x28: u32
  if (data?.uFirstVariable !== undefined) view.setUint32(40, Number(data.uFirstVariable), true);
  // 0x2c: pad4
  return buf;
}

/**
 * Windows.Win32.Graphics.Direct3D10.D3D10_SHADER_DEBUG_SCOPE_INFO (size: 24)
 */
export interface D3D10_SHADER_DEBUG_SCOPE_INFO {
  /** Windows.Win32.Graphics.Direct3D10.D3D10_SHADER_DEBUG_SCOPETYPE */
  ScopeType: D3D10_SHADER_DEBUG_SCOPETYPE;
  /** u32 */
  Name: number;
  /** u32 */
  uNameLen: number;
  /** u32 */
  uVariables: number;
  /** u32 */
  VariableData: number;
}

export const sizeofD3D10_SHADER_DEBUG_SCOPE_INFO = 24;

export function allocD3D10_SHADER_DEBUG_SCOPE_INFO(data?: Partial<D3D10_SHADER_DEBUG_SCOPE_INFO>): Uint8Array {
  const buf = new Uint8Array(sizeofD3D10_SHADER_DEBUG_SCOPE_INFO);
  const view = new DataView(buf.buffer);
  // 0x00: i32
  if (data?.ScopeType !== undefined) view.setInt32(0, Number(data.ScopeType), true);
  // 0x04: u32
  if (data?.Name !== undefined) view.setUint32(4, Number(data.Name), true);
  // 0x08: u32
  if (data?.uNameLen !== undefined) view.setUint32(8, Number(data.uNameLen), true);
  // 0x0c: u32
  if (data?.uVariables !== undefined) view.setUint32(12, Number(data.uVariables), true);
  // 0x10: u32
  if (data?.VariableData !== undefined) view.setUint32(16, Number(data.VariableData), true);
  // 0x14: pad4
  return buf;
}

/**
 * Windows.Win32.Graphics.Direct3D10.D3D10_SHADER_DEBUG_OUTPUTVAR (size: 40)
 */
export interface D3D10_SHADER_DEBUG_OUTPUTVAR {
  /** u32 */
  Var: number;
  /** u32 */
  uValueMin: number;
  /** u32 */
  uValueMax: number;
  /** i32 */
  iValueMin: number;
  /** i32 */
  iValueMax: number;
  /** f32 */
  fValueMin: number;
  /** f32 */
  fValueMax: number;
  /** Windows.Win32.Foundation.BOOL */
  bNaNPossible: boolean;
  /** Windows.Win32.Foundation.BOOL */
  bInfPossible: boolean;
}

export const sizeofD3D10_SHADER_DEBUG_OUTPUTVAR = 40;

export function allocD3D10_SHADER_DEBUG_OUTPUTVAR(data?: Partial<D3D10_SHADER_DEBUG_OUTPUTVAR>): Uint8Array {
  const buf = new Uint8Array(sizeofD3D10_SHADER_DEBUG_OUTPUTVAR);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.Var !== undefined) view.setUint32(0, Number(data.Var), true);
  // 0x04: u32
  if (data?.uValueMin !== undefined) view.setUint32(4, Number(data.uValueMin), true);
  // 0x08: u32
  if (data?.uValueMax !== undefined) view.setUint32(8, Number(data.uValueMax), true);
  // 0x0c: i32
  if (data?.iValueMin !== undefined) view.setInt32(12, Number(data.iValueMin), true);
  // 0x10: i32
  if (data?.iValueMax !== undefined) view.setInt32(16, Number(data.iValueMax), true);
  // 0x14: f32
  if (data?.fValueMin !== undefined) view.setFloat32(20, Number(data.fValueMin), true);
  // 0x18: f32
  if (data?.fValueMax !== undefined) view.setFloat32(24, Number(data.fValueMax), true);
  // 0x1c: i32
  if (data?.bNaNPossible !== undefined) view.setInt32(28, Number(data.bNaNPossible), true);
  // 0x20: i32
  if (data?.bInfPossible !== undefined) view.setInt32(32, Number(data.bInfPossible), true);
  // 0x24: pad4
  return buf;
}

/**
 * Windows.Win32.Graphics.Direct3D10.D3D10_SHADER_DEBUG_OUTPUTREG_INFO (size: 40)
 */
export interface D3D10_SHADER_DEBUG_OUTPUTREG_INFO {
  /** Windows.Win32.Graphics.Direct3D10.D3D10_SHADER_DEBUG_REGTYPE */
  OutputRegisterSet: D3D10_SHADER_DEBUG_REGTYPE;
  /** u32 */
  OutputReg: number;
  /** u32 */
  TempArrayReg: number;
  /** array */
  OutputComponents: Deno.PointerValue | null;
  /** array */
  OutputVars: Deno.PointerValue | null;
  /** u32 */
  IndexReg: number;
  /** u32 */
  IndexComp: number;
}

export const sizeofD3D10_SHADER_DEBUG_OUTPUTREG_INFO = 40;

export function allocD3D10_SHADER_DEBUG_OUTPUTREG_INFO(data?: Partial<D3D10_SHADER_DEBUG_OUTPUTREG_INFO>): Uint8Array {
  const buf = new Uint8Array(sizeofD3D10_SHADER_DEBUG_OUTPUTREG_INFO);
  const view = new DataView(buf.buffer);
  // 0x00: i32
  if (data?.OutputRegisterSet !== undefined) view.setInt32(0, Number(data.OutputRegisterSet), true);
  // 0x04: u32
  if (data?.OutputReg !== undefined) view.setUint32(4, Number(data.OutputReg), true);
  // 0x08: u32
  if (data?.TempArrayReg !== undefined) view.setUint32(8, Number(data.TempArrayReg), true);
  // 0x0c: pad4
  // 0x10: pointer
  if (data?.OutputComponents !== undefined) view.setBigUint64(16, data.OutputComponents === null ? 0n : BigInt(util.toPointer(data.OutputComponents)), true);
  // 0x18: pointer
  if (data?.OutputVars !== undefined) view.setBigUint64(24, data.OutputVars === null ? 0n : BigInt(util.toPointer(data.OutputVars)), true);
  // 0x20: u32
  if (data?.IndexReg !== undefined) view.setUint32(32, Number(data.IndexReg), true);
  // 0x24: u32
  if (data?.IndexComp !== undefined) view.setUint32(36, Number(data.IndexComp), true);
  return buf;
}

/**
 * Windows.Win32.Graphics.Direct3D10.D3D10_SHADER_DEBUG_INST_INFO (size: 48)
 */
export interface D3D10_SHADER_DEBUG_INST_INFO {
  /** u32 */
  Id: number;
  /** u32 */
  Opcode: number;
  /** u32 */
  uOutputs: number;
  /** array */
  pOutputs: Deno.PointerValue | null;
  /** u32 */
  TokenId: number;
  /** u32 */
  NestingLevel: number;
  /** u32 */
  Scopes: number;
  /** u32 */
  ScopeInfo: number;
  /** u32 */
  AccessedVars: number;
  /** u32 */
  AccessedVarsInfo: number;
}

export const sizeofD3D10_SHADER_DEBUG_INST_INFO = 48;

export function allocD3D10_SHADER_DEBUG_INST_INFO(data?: Partial<D3D10_SHADER_DEBUG_INST_INFO>): Uint8Array {
  const buf = new Uint8Array(sizeofD3D10_SHADER_DEBUG_INST_INFO);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.Id !== undefined) view.setUint32(0, Number(data.Id), true);
  // 0x04: u32
  if (data?.Opcode !== undefined) view.setUint32(4, Number(data.Opcode), true);
  // 0x08: u32
  if (data?.uOutputs !== undefined) view.setUint32(8, Number(data.uOutputs), true);
  // 0x0c: pad4
  // 0x10: pointer
  if (data?.pOutputs !== undefined) view.setBigUint64(16, data.pOutputs === null ? 0n : BigInt(util.toPointer(data.pOutputs)), true);
  // 0x18: u32
  if (data?.TokenId !== undefined) view.setUint32(24, Number(data.TokenId), true);
  // 0x1c: u32
  if (data?.NestingLevel !== undefined) view.setUint32(28, Number(data.NestingLevel), true);
  // 0x20: u32
  if (data?.Scopes !== undefined) view.setUint32(32, Number(data.Scopes), true);
  // 0x24: u32
  if (data?.ScopeInfo !== undefined) view.setUint32(36, Number(data.ScopeInfo), true);
  // 0x28: u32
  if (data?.AccessedVars !== undefined) view.setUint32(40, Number(data.AccessedVars), true);
  // 0x2c: u32
  if (data?.AccessedVarsInfo !== undefined) view.setUint32(44, Number(data.AccessedVarsInfo), true);
  return buf;
}

/**
 * Windows.Win32.Graphics.Direct3D10.D3D10_SHADER_DEBUG_FILE_INFO (size: 16)
 */
export interface D3D10_SHADER_DEBUG_FILE_INFO {
  /** u32 */
  FileName: number;
  /** u32 */
  FileNameLen: number;
  /** u32 */
  FileData: number;
  /** u32 */
  FileLen: number;
}

export const sizeofD3D10_SHADER_DEBUG_FILE_INFO = 16;

export function allocD3D10_SHADER_DEBUG_FILE_INFO(data?: Partial<D3D10_SHADER_DEBUG_FILE_INFO>): Uint8Array {
  const buf = new Uint8Array(sizeofD3D10_SHADER_DEBUG_FILE_INFO);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.FileName !== undefined) view.setUint32(0, Number(data.FileName), true);
  // 0x04: u32
  if (data?.FileNameLen !== undefined) view.setUint32(4, Number(data.FileNameLen), true);
  // 0x08: u32
  if (data?.FileData !== undefined) view.setUint32(8, Number(data.FileData), true);
  // 0x0c: u32
  if (data?.FileLen !== undefined) view.setUint32(12, Number(data.FileLen), true);
  return buf;
}

/**
 * Windows.Win32.Graphics.Direct3D10.D3D10_SHADER_DEBUG_INFO (size: 88)
 */
export interface D3D10_SHADER_DEBUG_INFO {
  /** u32 */
  Size: number;
  /** u32 */
  Creator: number;
  /** u32 */
  EntrypointName: number;
  /** u32 */
  ShaderTarget: number;
  /** u32 */
  CompileFlags: number;
  /** u32 */
  Files: number;
  /** u32 */
  FileInfo: number;
  /** u32 */
  Instructions: number;
  /** u32 */
  InstructionInfo: number;
  /** u32 */
  Variables: number;
  /** u32 */
  VariableInfo: number;
  /** u32 */
  InputVariables: number;
  /** u32 */
  InputVariableInfo: number;
  /** u32 */
  Tokens: number;
  /** u32 */
  TokenInfo: number;
  /** u32 */
  Scopes: number;
  /** u32 */
  ScopeInfo: number;
  /** u32 */
  ScopeVariables: number;
  /** u32 */
  ScopeVariableInfo: number;
  /** u32 */
  UintOffset: number;
  /** u32 */
  StringOffset: number;
}

export const sizeofD3D10_SHADER_DEBUG_INFO = 88;

export function allocD3D10_SHADER_DEBUG_INFO(data?: Partial<D3D10_SHADER_DEBUG_INFO>): Uint8Array {
  const buf = new Uint8Array(sizeofD3D10_SHADER_DEBUG_INFO);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.Size !== undefined) view.setUint32(0, Number(data.Size), true);
  // 0x04: u32
  if (data?.Creator !== undefined) view.setUint32(4, Number(data.Creator), true);
  // 0x08: u32
  if (data?.EntrypointName !== undefined) view.setUint32(8, Number(data.EntrypointName), true);
  // 0x0c: u32
  if (data?.ShaderTarget !== undefined) view.setUint32(12, Number(data.ShaderTarget), true);
  // 0x10: u32
  if (data?.CompileFlags !== undefined) view.setUint32(16, Number(data.CompileFlags), true);
  // 0x14: u32
  if (data?.Files !== undefined) view.setUint32(20, Number(data.Files), true);
  // 0x18: u32
  if (data?.FileInfo !== undefined) view.setUint32(24, Number(data.FileInfo), true);
  // 0x1c: u32
  if (data?.Instructions !== undefined) view.setUint32(28, Number(data.Instructions), true);
  // 0x20: u32
  if (data?.InstructionInfo !== undefined) view.setUint32(32, Number(data.InstructionInfo), true);
  // 0x24: u32
  if (data?.Variables !== undefined) view.setUint32(36, Number(data.Variables), true);
  // 0x28: u32
  if (data?.VariableInfo !== undefined) view.setUint32(40, Number(data.VariableInfo), true);
  // 0x2c: u32
  if (data?.InputVariables !== undefined) view.setUint32(44, Number(data.InputVariables), true);
  // 0x30: u32
  if (data?.InputVariableInfo !== undefined) view.setUint32(48, Number(data.InputVariableInfo), true);
  // 0x34: u32
  if (data?.Tokens !== undefined) view.setUint32(52, Number(data.Tokens), true);
  // 0x38: u32
  if (data?.TokenInfo !== undefined) view.setUint32(56, Number(data.TokenInfo), true);
  // 0x3c: u32
  if (data?.Scopes !== undefined) view.setUint32(60, Number(data.Scopes), true);
  // 0x40: u32
  if (data?.ScopeInfo !== undefined) view.setUint32(64, Number(data.ScopeInfo), true);
  // 0x44: u32
  if (data?.ScopeVariables !== undefined) view.setUint32(68, Number(data.ScopeVariables), true);
  // 0x48: u32
  if (data?.ScopeVariableInfo !== undefined) view.setUint32(72, Number(data.ScopeVariableInfo), true);
  // 0x4c: u32
  if (data?.UintOffset !== undefined) view.setUint32(76, Number(data.UintOffset), true);
  // 0x50: u32
  if (data?.StringOffset !== undefined) view.setUint32(80, Number(data.StringOffset), true);
  // 0x54: pad4
  return buf;
}

export type HINSTANCE = Deno.PointerValue;

export type HRESULT = number;

// Native Libraries

try {
  var libd3d10_dll = Deno.dlopen("d3d10.dll", {
    D3D10CreateDevice: {
      parameters: ["pointer", "i32", "pointer", "u32", "u32", "pointer"],
      result: "pointer",
    },
    D3D10CreateDeviceAndSwapChain: {
      parameters: ["pointer", "i32", "pointer", "u32", "u32", "pointer", "pointer", "pointer"],
      result: "pointer",
    },
    D3D10CreateBlob: {
      parameters: ["usize", "pointer"],
      result: "pointer",
    },
    D3D10CompileShader: {
      parameters: ["buffer", "usize", "buffer", "pointer", "pointer", "buffer", "buffer", "u32", "pointer", "pointer"],
      result: "pointer",
    },
    D3D10DisassembleShader: {
      parameters: ["pointer", "usize", "i32", "buffer", "pointer"],
      result: "pointer",
    },
    D3D10GetPixelShaderProfile: {
      parameters: ["pointer"],
      result: "buffer",
    },
    D3D10GetVertexShaderProfile: {
      parameters: ["pointer"],
      result: "buffer",
    },
    D3D10GetGeometryShaderProfile: {
      parameters: ["pointer"],
      result: "buffer",
    },
    D3D10ReflectShader: {
      parameters: ["pointer", "usize", "pointer"],
      result: "pointer",
    },
    D3D10PreprocessShader: {
      parameters: ["buffer", "usize", "buffer", "pointer", "pointer", "pointer", "pointer"],
      result: "pointer",
    },
    D3D10GetInputSignatureBlob: {
      parameters: ["pointer", "usize", "pointer"],
      result: "pointer",
    },
    D3D10GetOutputSignatureBlob: {
      parameters: ["pointer", "usize", "pointer"],
      result: "pointer",
    },
    D3D10GetInputAndOutputSignatureBlob: {
      parameters: ["pointer", "usize", "pointer"],
      result: "pointer",
    },
    D3D10GetShaderDebugInfo: {
      parameters: ["pointer", "usize", "pointer"],
      result: "pointer",
    },
    D3D10StateBlockMaskUnion: {
      parameters: ["pointer", "pointer", "pointer"],
      result: "pointer",
    },
    D3D10StateBlockMaskIntersect: {
      parameters: ["pointer", "pointer", "pointer"],
      result: "pointer",
    },
    D3D10StateBlockMaskDifference: {
      parameters: ["pointer", "pointer", "pointer"],
      result: "pointer",
    },
    D3D10StateBlockMaskEnableCapture: {
      parameters: ["pointer", "i32", "u32", "u32"],
      result: "pointer",
    },
    D3D10StateBlockMaskDisableCapture: {
      parameters: ["pointer", "i32", "u32", "u32"],
      result: "pointer",
    },
    D3D10StateBlockMaskEnableAll: {
      parameters: ["pointer"],
      result: "pointer",
    },
    D3D10StateBlockMaskDisableAll: {
      parameters: ["pointer"],
      result: "pointer",
    },
    D3D10StateBlockMaskGetSetting: {
      parameters: ["pointer", "i32", "u32"],
      result: "i32",
    },
    D3D10CreateStateBlock: {
      parameters: ["pointer", "pointer", "pointer"],
      result: "pointer",
    },
    D3D10CompileEffectFromMemory: {
      parameters: ["pointer", "usize", "buffer", "pointer", "pointer", "u32", "u32", "pointer", "pointer"],
      result: "pointer",
    },
    D3D10CreateEffectFromMemory: {
      parameters: ["pointer", "usize", "u32", "pointer", "pointer", "pointer"],
      result: "pointer",
    },
    D3D10CreateEffectPoolFromMemory: {
      parameters: ["pointer", "usize", "u32", "pointer", "pointer"],
      result: "pointer",
    },
    D3D10DisassembleEffect: {
      parameters: ["pointer", "i32", "pointer"],
      result: "pointer",
    },
  }).symbols;
} catch(e) { /* ignore */ }

try {
  var libd3d10_1_dll = Deno.dlopen("d3d10_1.dll", {
    D3D10CreateDevice1: {
      parameters: ["pointer", "i32", "pointer", "u32", "i32", "u32", "pointer"],
      result: "pointer",
    },
    D3D10CreateDeviceAndSwapChain1: {
      parameters: ["pointer", "i32", "pointer", "u32", "i32", "u32", "pointer", "pointer", "pointer"],
      result: "pointer",
    },
  }).symbols;
} catch(e) { /* ignore */ }

// Symbols

export function D3D10CreateDevice(
  pAdapter: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Graphics.Dxgi.IDXGIAdapter */,
  DriverType: D3D10_DRIVER_TYPE /* Windows.Win32.Graphics.Direct3D10.D3D10_DRIVER_TYPE */,
  Software: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Foundation.HINSTANCE */,
  Flags: number /* u32 */,
  SDKVersion: number /* u32 */,
  ppDevice: Deno.PointerValue | Uint8Array | null /* ptr */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libd3d10_dll.D3D10CreateDevice(util.toPointer(pAdapter), DriverType, util.toPointer(Software), Flags, SDKVersion, util.toPointer(ppDevice)));
}

export function D3D10CreateDeviceAndSwapChain(
  pAdapter: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Graphics.Dxgi.IDXGIAdapter */,
  DriverType: D3D10_DRIVER_TYPE /* Windows.Win32.Graphics.Direct3D10.D3D10_DRIVER_TYPE */,
  Software: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Foundation.HINSTANCE */,
  Flags: number /* u32 */,
  SDKVersion: number /* u32 */,
  pSwapChainDesc: Deno.PointerValue | Uint8Array | null /* ptr */,
  ppSwapChain: Deno.PointerValue | Uint8Array | null /* ptr */,
  ppDevice: Deno.PointerValue | Uint8Array | null /* ptr */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libd3d10_dll.D3D10CreateDeviceAndSwapChain(util.toPointer(pAdapter), DriverType, util.toPointer(Software), Flags, SDKVersion, util.toPointer(pSwapChainDesc), util.toPointer(ppSwapChain), util.toPointer(ppDevice)));
}

export function D3D10CreateBlob(
  NumBytes: Deno.PointerValue /* usize */,
  ppBuffer: Deno.PointerValue | Uint8Array | null /* ptr */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libd3d10_dll.D3D10CreateBlob(NumBytes, util.toPointer(ppBuffer)));
}

export function D3D10CompileShader(
  pSrcData: string | null /* Windows.Win32.Foundation.PSTR */,
  SrcDataSize: Deno.PointerValue /* usize */,
  pFileName: string | null /* Windows.Win32.Foundation.PSTR */,
  pDefines: Deno.PointerValue | Uint8Array | null /* ptr */,
  pInclude: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Graphics.Direct3D.ID3DInclude */,
  pFunctionName: string | null /* Windows.Win32.Foundation.PSTR */,
  pProfile: string | null /* Windows.Win32.Foundation.PSTR */,
  Flags: number /* u32 */,
  ppShader: Deno.PointerValue | Uint8Array | null /* ptr */,
  ppErrorMsgs: Deno.PointerValue | Uint8Array | null /* ptr */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libd3d10_dll.D3D10CompileShader(util.pstrToFfi(pSrcData), SrcDataSize, util.pstrToFfi(pFileName), util.toPointer(pDefines), util.toPointer(pInclude), util.pstrToFfi(pFunctionName), util.pstrToFfi(pProfile), Flags, util.toPointer(ppShader), util.toPointer(ppErrorMsgs)));
}

export function D3D10DisassembleShader(
  pShader: Deno.PointerValue | Uint8Array | null /* ptr */,
  BytecodeLength: Deno.PointerValue /* usize */,
  EnableColorCode: boolean /* Windows.Win32.Foundation.BOOL */,
  pComments: string | null /* Windows.Win32.Foundation.PSTR */,
  ppDisassembly: Deno.PointerValue | Uint8Array | null /* ptr */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libd3d10_dll.D3D10DisassembleShader(util.toPointer(pShader), BytecodeLength, util.boolToFfi(EnableColorCode), util.pstrToFfi(pComments), util.toPointer(ppDisassembly)));
}

export function D3D10GetPixelShaderProfile(
  pDevice: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Graphics.Direct3D10.ID3D10Device */,
): string | null /* Windows.Win32.Foundation.PSTR */ {
  return util.pstrFromFfi(libd3d10_dll.D3D10GetPixelShaderProfile(util.toPointer(pDevice)));
}

export function D3D10GetVertexShaderProfile(
  pDevice: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Graphics.Direct3D10.ID3D10Device */,
): string | null /* Windows.Win32.Foundation.PSTR */ {
  return util.pstrFromFfi(libd3d10_dll.D3D10GetVertexShaderProfile(util.toPointer(pDevice)));
}

export function D3D10GetGeometryShaderProfile(
  pDevice: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Graphics.Direct3D10.ID3D10Device */,
): string | null /* Windows.Win32.Foundation.PSTR */ {
  return util.pstrFromFfi(libd3d10_dll.D3D10GetGeometryShaderProfile(util.toPointer(pDevice)));
}

export function D3D10ReflectShader(
  pShaderBytecode: Deno.PointerValue | Uint8Array | null /* ptr */,
  BytecodeLength: Deno.PointerValue /* usize */,
  ppReflector: Deno.PointerValue | Uint8Array | null /* ptr */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libd3d10_dll.D3D10ReflectShader(util.toPointer(pShaderBytecode), BytecodeLength, util.toPointer(ppReflector)));
}

export function D3D10PreprocessShader(
  pSrcData: string | null /* Windows.Win32.Foundation.PSTR */,
  SrcDataSize: Deno.PointerValue /* usize */,
  pFileName: string | null /* Windows.Win32.Foundation.PSTR */,
  pDefines: Deno.PointerValue | Uint8Array | null /* ptr */,
  pInclude: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Graphics.Direct3D.ID3DInclude */,
  ppShaderText: Deno.PointerValue | Uint8Array | null /* ptr */,
  ppErrorMsgs: Deno.PointerValue | Uint8Array | null /* ptr */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libd3d10_dll.D3D10PreprocessShader(util.pstrToFfi(pSrcData), SrcDataSize, util.pstrToFfi(pFileName), util.toPointer(pDefines), util.toPointer(pInclude), util.toPointer(ppShaderText), util.toPointer(ppErrorMsgs)));
}

export function D3D10GetInputSignatureBlob(
  pShaderBytecode: Deno.PointerValue | Uint8Array | null /* ptr */,
  BytecodeLength: Deno.PointerValue /* usize */,
  ppSignatureBlob: Deno.PointerValue | Uint8Array | null /* ptr */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libd3d10_dll.D3D10GetInputSignatureBlob(util.toPointer(pShaderBytecode), BytecodeLength, util.toPointer(ppSignatureBlob)));
}

export function D3D10GetOutputSignatureBlob(
  pShaderBytecode: Deno.PointerValue | Uint8Array | null /* ptr */,
  BytecodeLength: Deno.PointerValue /* usize */,
  ppSignatureBlob: Deno.PointerValue | Uint8Array | null /* ptr */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libd3d10_dll.D3D10GetOutputSignatureBlob(util.toPointer(pShaderBytecode), BytecodeLength, util.toPointer(ppSignatureBlob)));
}

export function D3D10GetInputAndOutputSignatureBlob(
  pShaderBytecode: Deno.PointerValue | Uint8Array | null /* ptr */,
  BytecodeLength: Deno.PointerValue /* usize */,
  ppSignatureBlob: Deno.PointerValue | Uint8Array | null /* ptr */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libd3d10_dll.D3D10GetInputAndOutputSignatureBlob(util.toPointer(pShaderBytecode), BytecodeLength, util.toPointer(ppSignatureBlob)));
}

export function D3D10GetShaderDebugInfo(
  pShaderBytecode: Deno.PointerValue | Uint8Array | null /* ptr */,
  BytecodeLength: Deno.PointerValue /* usize */,
  ppDebugInfo: Deno.PointerValue | Uint8Array | null /* ptr */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libd3d10_dll.D3D10GetShaderDebugInfo(util.toPointer(pShaderBytecode), BytecodeLength, util.toPointer(ppDebugInfo)));
}

export function D3D10StateBlockMaskUnion(
  pA: Deno.PointerValue | Uint8Array | null /* ptr */,
  pB: Deno.PointerValue | Uint8Array | null /* ptr */,
  pResult: Deno.PointerValue | Uint8Array | null /* ptr */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libd3d10_dll.D3D10StateBlockMaskUnion(util.toPointer(pA), util.toPointer(pB), util.toPointer(pResult)));
}

export function D3D10StateBlockMaskIntersect(
  pA: Deno.PointerValue | Uint8Array | null /* ptr */,
  pB: Deno.PointerValue | Uint8Array | null /* ptr */,
  pResult: Deno.PointerValue | Uint8Array | null /* ptr */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libd3d10_dll.D3D10StateBlockMaskIntersect(util.toPointer(pA), util.toPointer(pB), util.toPointer(pResult)));
}

export function D3D10StateBlockMaskDifference(
  pA: Deno.PointerValue | Uint8Array | null /* ptr */,
  pB: Deno.PointerValue | Uint8Array | null /* ptr */,
  pResult: Deno.PointerValue | Uint8Array | null /* ptr */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libd3d10_dll.D3D10StateBlockMaskDifference(util.toPointer(pA), util.toPointer(pB), util.toPointer(pResult)));
}

export function D3D10StateBlockMaskEnableCapture(
  pMask: Deno.PointerValue | Uint8Array | null /* ptr */,
  StateType: D3D10_DEVICE_STATE_TYPES /* Windows.Win32.Graphics.Direct3D10.D3D10_DEVICE_STATE_TYPES */,
  RangeStart: number /* u32 */,
  RangeLength: number /* u32 */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libd3d10_dll.D3D10StateBlockMaskEnableCapture(util.toPointer(pMask), StateType, RangeStart, RangeLength));
}

export function D3D10StateBlockMaskDisableCapture(
  pMask: Deno.PointerValue | Uint8Array | null /* ptr */,
  StateType: D3D10_DEVICE_STATE_TYPES /* Windows.Win32.Graphics.Direct3D10.D3D10_DEVICE_STATE_TYPES */,
  RangeStart: number /* u32 */,
  RangeLength: number /* u32 */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libd3d10_dll.D3D10StateBlockMaskDisableCapture(util.toPointer(pMask), StateType, RangeStart, RangeLength));
}

export function D3D10StateBlockMaskEnableAll(
  pMask: Deno.PointerValue | Uint8Array | null /* ptr */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libd3d10_dll.D3D10StateBlockMaskEnableAll(util.toPointer(pMask)));
}

export function D3D10StateBlockMaskDisableAll(
  pMask: Deno.PointerValue | Uint8Array | null /* ptr */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libd3d10_dll.D3D10StateBlockMaskDisableAll(util.toPointer(pMask)));
}

export function D3D10StateBlockMaskGetSetting(
  pMask: Deno.PointerValue | Uint8Array | null /* ptr */,
  StateType: D3D10_DEVICE_STATE_TYPES /* Windows.Win32.Graphics.Direct3D10.D3D10_DEVICE_STATE_TYPES */,
  Entry: number /* u32 */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libd3d10_dll.D3D10StateBlockMaskGetSetting(util.toPointer(pMask), StateType, Entry));
}

export function D3D10CreateStateBlock(
  pDevice: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Graphics.Direct3D10.ID3D10Device */,
  pStateBlockMask: Deno.PointerValue | Uint8Array | null /* ptr */,
  ppStateBlock: Deno.PointerValue | Uint8Array | null /* ptr */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libd3d10_dll.D3D10CreateStateBlock(util.toPointer(pDevice), util.toPointer(pStateBlockMask), util.toPointer(ppStateBlock)));
}

export function D3D10CompileEffectFromMemory(
  pData: Deno.PointerValue | Uint8Array | null /* ptr */,
  DataLength: Deno.PointerValue /* usize */,
  pSrcFileName: string | null /* Windows.Win32.Foundation.PSTR */,
  pDefines: Deno.PointerValue | Uint8Array | null /* ptr */,
  pInclude: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Graphics.Direct3D.ID3DInclude */,
  HLSLFlags: number /* u32 */,
  FXFlags: number /* u32 */,
  ppCompiledEffect: Deno.PointerValue | Uint8Array | null /* ptr */,
  ppErrors: Deno.PointerValue | Uint8Array | null /* ptr */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libd3d10_dll.D3D10CompileEffectFromMemory(util.toPointer(pData), DataLength, util.pstrToFfi(pSrcFileName), util.toPointer(pDefines), util.toPointer(pInclude), HLSLFlags, FXFlags, util.toPointer(ppCompiledEffect), util.toPointer(ppErrors)));
}

export function D3D10CreateEffectFromMemory(
  pData: Deno.PointerValue | Uint8Array | null /* ptr */,
  DataLength: Deno.PointerValue /* usize */,
  FXFlags: number /* u32 */,
  pDevice: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Graphics.Direct3D10.ID3D10Device */,
  pEffectPool: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Graphics.Direct3D10.ID3D10EffectPool */,
  ppEffect: Deno.PointerValue | Uint8Array | null /* ptr */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libd3d10_dll.D3D10CreateEffectFromMemory(util.toPointer(pData), DataLength, FXFlags, util.toPointer(pDevice), util.toPointer(pEffectPool), util.toPointer(ppEffect)));
}

export function D3D10CreateEffectPoolFromMemory(
  pData: Deno.PointerValue | Uint8Array | null /* ptr */,
  DataLength: Deno.PointerValue /* usize */,
  FXFlags: number /* u32 */,
  pDevice: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Graphics.Direct3D10.ID3D10Device */,
  ppEffectPool: Deno.PointerValue | Uint8Array | null /* ptr */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libd3d10_dll.D3D10CreateEffectPoolFromMemory(util.toPointer(pData), DataLength, FXFlags, util.toPointer(pDevice), util.toPointer(ppEffectPool)));
}

export function D3D10DisassembleEffect(
  pEffect: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Graphics.Direct3D10.ID3D10Effect */,
  EnableColorCode: boolean /* Windows.Win32.Foundation.BOOL */,
  ppDisassembly: Deno.PointerValue | Uint8Array | null /* ptr */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libd3d10_dll.D3D10DisassembleEffect(util.toPointer(pEffect), util.boolToFfi(EnableColorCode), util.toPointer(ppDisassembly)));
}

export function D3D10CreateDevice1(
  pAdapter: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Graphics.Dxgi.IDXGIAdapter */,
  DriverType: D3D10_DRIVER_TYPE /* Windows.Win32.Graphics.Direct3D10.D3D10_DRIVER_TYPE */,
  Software: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Foundation.HINSTANCE */,
  Flags: number /* u32 */,
  HardwareLevel: D3D10_FEATURE_LEVEL1 /* Windows.Win32.Graphics.Direct3D10.D3D10_FEATURE_LEVEL1 */,
  SDKVersion: number /* u32 */,
  ppDevice: Deno.PointerValue | Uint8Array | null /* ptr */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libd3d10_1_dll.D3D10CreateDevice1(util.toPointer(pAdapter), DriverType, util.toPointer(Software), Flags, HardwareLevel, SDKVersion, util.toPointer(ppDevice)));
}

export function D3D10CreateDeviceAndSwapChain1(
  pAdapter: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Graphics.Dxgi.IDXGIAdapter */,
  DriverType: D3D10_DRIVER_TYPE /* Windows.Win32.Graphics.Direct3D10.D3D10_DRIVER_TYPE */,
  Software: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Foundation.HINSTANCE */,
  Flags: number /* u32 */,
  HardwareLevel: D3D10_FEATURE_LEVEL1 /* Windows.Win32.Graphics.Direct3D10.D3D10_FEATURE_LEVEL1 */,
  SDKVersion: number /* u32 */,
  pSwapChainDesc: Deno.PointerValue | Uint8Array | null /* ptr */,
  ppSwapChain: Deno.PointerValue | Uint8Array | null /* ptr */,
  ppDevice: Deno.PointerValue | Uint8Array | null /* ptr */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libd3d10_1_dll.D3D10CreateDeviceAndSwapChain1(util.toPointer(pAdapter), DriverType, util.toPointer(Software), Flags, HardwareLevel, SDKVersion, util.toPointer(pSwapChainDesc), util.toPointer(ppSwapChain), util.toPointer(ppDevice)));
}

