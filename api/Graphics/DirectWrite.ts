/// Auto-generated by Deno Win32: Windows.Win32.Graphics.DirectWrite.Apis

import * as util from "../../util.ts";

// Enums
export type DWRITE_FONT_AXIS_TAG = number;
export type DWRITE_MEASURING_MODE = number;
export type DWRITE_GLYPH_IMAGE_FORMATS = number;
export type DWRITE_FONT_FILE_TYPE = number;
export type DWRITE_FONT_FACE_TYPE = number;
export type DWRITE_FONT_SIMULATIONS = number;
export type DWRITE_FONT_WEIGHT = number;
export type DWRITE_FONT_STRETCH = number;
export type DWRITE_FONT_STYLE = number;
export type DWRITE_INFORMATIONAL_STRING_ID = number;
export type DWRITE_FACTORY_TYPE = number;
export type DWRITE_PIXEL_GEOMETRY = number;
export type DWRITE_RENDERING_MODE = number;
export type DWRITE_READING_DIRECTION = number;
export type DWRITE_FLOW_DIRECTION = number;
export type DWRITE_TEXT_ALIGNMENT = number;
export type DWRITE_PARAGRAPH_ALIGNMENT = number;
export type DWRITE_WORD_WRAPPING = number;
export type DWRITE_LINE_SPACING_METHOD = number;
export type DWRITE_TRIMMING_GRANULARITY = number;
export type DWRITE_FONT_FEATURE_TAG = number;
export type DWRITE_SCRIPT_SHAPES = number;
export type DWRITE_BREAK_CONDITION = number;
export type DWRITE_NUMBER_SUBSTITUTION_METHOD = number;
export type DWRITE_TEXTURE_TYPE = number;
export type DWRITE_PANOSE_FAMILY = number;
export type DWRITE_PANOSE_SERIF_STYLE = number;
export type DWRITE_PANOSE_WEIGHT = number;
export type DWRITE_PANOSE_PROPORTION = number;
export type DWRITE_PANOSE_CONTRAST = number;
export type DWRITE_PANOSE_STROKE_VARIATION = number;
export type DWRITE_PANOSE_ARM_STYLE = number;
export type DWRITE_PANOSE_LETTERFORM = number;
export type DWRITE_PANOSE_MIDLINE = number;
export type DWRITE_PANOSE_XHEIGHT = number;
export type DWRITE_PANOSE_TOOL_KIND = number;
export type DWRITE_PANOSE_SPACING = number;
export type DWRITE_PANOSE_ASPECT_RATIO = number;
export type DWRITE_PANOSE_SCRIPT_TOPOLOGY = number;
export type DWRITE_PANOSE_SCRIPT_FORM = number;
export type DWRITE_PANOSE_FINIALS = number;
export type DWRITE_PANOSE_XASCENT = number;
export type DWRITE_PANOSE_DECORATIVE_CLASS = number;
export type DWRITE_PANOSE_ASPECT = number;
export type DWRITE_PANOSE_FILL = number;
export type DWRITE_PANOSE_LINING = number;
export type DWRITE_PANOSE_DECORATIVE_TOPOLOGY = number;
export type DWRITE_PANOSE_CHARACTER_RANGES = number;
export type DWRITE_PANOSE_SYMBOL_KIND = number;
export type DWRITE_PANOSE_SYMBOL_ASPECT_RATIO = number;
export type DWRITE_OUTLINE_THRESHOLD = number;
export type DWRITE_BASELINE = number;
export type DWRITE_VERTICAL_GLYPH_ORIENTATION = number;
export type DWRITE_GLYPH_ORIENTATION_ANGLE = number;
export type DWRITE_TEXT_ANTIALIAS_MODE = number;
export type DWRITE_OPTICAL_ALIGNMENT = number;
export type DWRITE_GRID_FIT_MODE = number;
export type DWRITE_FONT_PROPERTY_ID = number;
export type DWRITE_LOCALITY = number;
export type DWRITE_RENDERING_MODE1 = number;
export type DWRITE_FONT_LINE_GAP_USAGE = number;
export type DWRITE_CONTAINER_TYPE = number;
export type DWRITE_FONT_FAMILY_MODEL = number;
export type DWRITE_AUTOMATIC_FONT_AXES = number;
export type DWRITE_FONT_AXIS_ATTRIBUTES = number;
export type DWRITE_FONT_SOURCE_TYPE = number;

// Constants
export const DWRITE_ALPHA_MAX = 255;
export const FACILITY_DWRITE = 2200;
export const DWRITE_ERR_BASE = 20480;
export const DWRITE_E_REMOTEFONT = 10975287704536240141n;
export const DWRITE_E_DOWNLOADCANCELLED = 10975288804047867918n;
export const DWRITE_E_DOWNLOADFAILED = 10975289903559495695n;
export const DWRITE_E_TOOMANYDOWNLOADS = 1225823581701165072n;
export const DWRITE_FONT_AXIS_TAG_WEIGHT = 1952999287;
export const DWRITE_FONT_AXIS_TAG_WIDTH = 1752458359;
export const DWRITE_FONT_AXIS_TAG_SLANT = 1953393779;
export const DWRITE_FONT_AXIS_TAG_OPTICAL_SIZE = 2054385775;
export const DWRITE_FONT_AXIS_TAG_ITALIC = 1818326121;
export const DWRITE_MEASURING_MODE_NATURAL = 0;
export const DWRITE_MEASURING_MODE_GDI_CLASSIC = 1;
export const DWRITE_MEASURING_MODE_GDI_NATURAL = 2;
export const DWRITE_GLYPH_IMAGE_FORMATS_NONE = 0;
export const DWRITE_GLYPH_IMAGE_FORMATS_TRUETYPE = 1;
export const DWRITE_GLYPH_IMAGE_FORMATS_CFF = 2;
export const DWRITE_GLYPH_IMAGE_FORMATS_COLR = 4;
export const DWRITE_GLYPH_IMAGE_FORMATS_SVG = 8;
export const DWRITE_GLYPH_IMAGE_FORMATS_PNG = 16;
export const DWRITE_GLYPH_IMAGE_FORMATS_JPEG = 32;
export const DWRITE_GLYPH_IMAGE_FORMATS_TIFF = 64;
export const DWRITE_GLYPH_IMAGE_FORMATS_PREMULTIPLIED_B8G8R8A8 = 128;
export const DWRITE_FONT_FILE_TYPE_UNKNOWN = 0;
export const DWRITE_FONT_FILE_TYPE_CFF = 1;
export const DWRITE_FONT_FILE_TYPE_TRUETYPE = 2;
export const DWRITE_FONT_FILE_TYPE_OPENTYPE_COLLECTION = 3;
export const DWRITE_FONT_FILE_TYPE_TYPE1_PFM = 4;
export const DWRITE_FONT_FILE_TYPE_TYPE1_PFB = 5;
export const DWRITE_FONT_FILE_TYPE_VECTOR = 6;
export const DWRITE_FONT_FILE_TYPE_BITMAP = 7;
export const DWRITE_FONT_FILE_TYPE_TRUETYPE_COLLECTION = 3;
export const DWRITE_FONT_FACE_TYPE_CFF = 0;
export const DWRITE_FONT_FACE_TYPE_TRUETYPE = 1;
export const DWRITE_FONT_FACE_TYPE_OPENTYPE_COLLECTION = 2;
export const DWRITE_FONT_FACE_TYPE_TYPE1 = 3;
export const DWRITE_FONT_FACE_TYPE_VECTOR = 4;
export const DWRITE_FONT_FACE_TYPE_BITMAP = 5;
export const DWRITE_FONT_FACE_TYPE_UNKNOWN = 6;
export const DWRITE_FONT_FACE_TYPE_RAW_CFF = 7;
export const DWRITE_FONT_FACE_TYPE_TRUETYPE_COLLECTION = 2;
export const DWRITE_FONT_SIMULATIONS_NONE = 0;
export const DWRITE_FONT_SIMULATIONS_BOLD = 1;
export const DWRITE_FONT_SIMULATIONS_OBLIQUE = 2;
export const DWRITE_FONT_WEIGHT_THIN = 100;
export const DWRITE_FONT_WEIGHT_EXTRA_LIGHT = 200;
export const DWRITE_FONT_WEIGHT_ULTRA_LIGHT = 200;
export const DWRITE_FONT_WEIGHT_LIGHT = 300;
export const DWRITE_FONT_WEIGHT_SEMI_LIGHT = 350;
export const DWRITE_FONT_WEIGHT_NORMAL = 400;
export const DWRITE_FONT_WEIGHT_REGULAR = 400;
export const DWRITE_FONT_WEIGHT_MEDIUM = 500;
export const DWRITE_FONT_WEIGHT_DEMI_BOLD = 600;
export const DWRITE_FONT_WEIGHT_SEMI_BOLD = 600;
export const DWRITE_FONT_WEIGHT_BOLD = 700;
export const DWRITE_FONT_WEIGHT_EXTRA_BOLD = 800;
export const DWRITE_FONT_WEIGHT_ULTRA_BOLD = 800;
export const DWRITE_FONT_WEIGHT_BLACK = 900;
export const DWRITE_FONT_WEIGHT_HEAVY = 900;
export const DWRITE_FONT_WEIGHT_EXTRA_BLACK = 950;
export const DWRITE_FONT_WEIGHT_ULTRA_BLACK = 950;
export const DWRITE_FONT_STRETCH_UNDEFINED = 0;
export const DWRITE_FONT_STRETCH_ULTRA_CONDENSED = 1;
export const DWRITE_FONT_STRETCH_EXTRA_CONDENSED = 2;
export const DWRITE_FONT_STRETCH_CONDENSED = 3;
export const DWRITE_FONT_STRETCH_SEMI_CONDENSED = 4;
export const DWRITE_FONT_STRETCH_NORMAL = 5;
export const DWRITE_FONT_STRETCH_MEDIUM = 5;
export const DWRITE_FONT_STRETCH_SEMI_EXPANDED = 6;
export const DWRITE_FONT_STRETCH_EXPANDED = 7;
export const DWRITE_FONT_STRETCH_EXTRA_EXPANDED = 8;
export const DWRITE_FONT_STRETCH_ULTRA_EXPANDED = 9;
export const DWRITE_FONT_STYLE_NORMAL = 0;
export const DWRITE_FONT_STYLE_OBLIQUE = 1;
export const DWRITE_FONT_STYLE_ITALIC = 2;
export const DWRITE_INFORMATIONAL_STRING_NONE = 0;
export const DWRITE_INFORMATIONAL_STRING_COPYRIGHT_NOTICE = 1;
export const DWRITE_INFORMATIONAL_STRING_VERSION_STRINGS = 2;
export const DWRITE_INFORMATIONAL_STRING_TRADEMARK = 3;
export const DWRITE_INFORMATIONAL_STRING_MANUFACTURER = 4;
export const DWRITE_INFORMATIONAL_STRING_DESIGNER = 5;
export const DWRITE_INFORMATIONAL_STRING_DESIGNER_URL = 6;
export const DWRITE_INFORMATIONAL_STRING_DESCRIPTION = 7;
export const DWRITE_INFORMATIONAL_STRING_FONT_VENDOR_URL = 8;
export const DWRITE_INFORMATIONAL_STRING_LICENSE_DESCRIPTION = 9;
export const DWRITE_INFORMATIONAL_STRING_LICENSE_INFO_URL = 10;
export const DWRITE_INFORMATIONAL_STRING_WIN32_FAMILY_NAMES = 11;
export const DWRITE_INFORMATIONAL_STRING_WIN32_SUBFAMILY_NAMES = 12;
export const DWRITE_INFORMATIONAL_STRING_TYPOGRAPHIC_FAMILY_NAMES = 13;
export const DWRITE_INFORMATIONAL_STRING_TYPOGRAPHIC_SUBFAMILY_NAMES = 14;
export const DWRITE_INFORMATIONAL_STRING_SAMPLE_TEXT = 15;
export const DWRITE_INFORMATIONAL_STRING_FULL_NAME = 16;
export const DWRITE_INFORMATIONAL_STRING_POSTSCRIPT_NAME = 17;
export const DWRITE_INFORMATIONAL_STRING_POSTSCRIPT_CID_NAME = 18;
export const DWRITE_INFORMATIONAL_STRING_WEIGHT_STRETCH_STYLE_FAMILY_NAME = 19;
export const DWRITE_INFORMATIONAL_STRING_DESIGN_SCRIPT_LANGUAGE_TAG = 20;
export const DWRITE_INFORMATIONAL_STRING_SUPPORTED_SCRIPT_LANGUAGE_TAG = 21;
export const DWRITE_INFORMATIONAL_STRING_PREFERRED_FAMILY_NAMES = 13;
export const DWRITE_INFORMATIONAL_STRING_PREFERRED_SUBFAMILY_NAMES = 14;
export const DWRITE_INFORMATIONAL_STRING_WWS_FAMILY_NAME = 19;
export const DWRITE_FACTORY_TYPE_SHARED = 0;
export const DWRITE_FACTORY_TYPE_ISOLATED = 1;
export const DWRITE_PIXEL_GEOMETRY_FLAT = 0;
export const DWRITE_PIXEL_GEOMETRY_RGB = 1;
export const DWRITE_PIXEL_GEOMETRY_BGR = 2;
export const DWRITE_RENDERING_MODE_DEFAULT = 0;
export const DWRITE_RENDERING_MODE_ALIASED = 1;
export const DWRITE_RENDERING_MODE_GDI_CLASSIC = 2;
export const DWRITE_RENDERING_MODE_GDI_NATURAL = 3;
export const DWRITE_RENDERING_MODE_NATURAL = 4;
export const DWRITE_RENDERING_MODE_NATURAL_SYMMETRIC = 5;
export const DWRITE_RENDERING_MODE_OUTLINE = 6;
export const DWRITE_RENDERING_MODE_CLEARTYPE_GDI_CLASSIC = 2;
export const DWRITE_RENDERING_MODE_CLEARTYPE_GDI_NATURAL = 3;
export const DWRITE_RENDERING_MODE_CLEARTYPE_NATURAL = 4;
export const DWRITE_RENDERING_MODE_CLEARTYPE_NATURAL_SYMMETRIC = 5;
export const DWRITE_READING_DIRECTION_LEFT_TO_RIGHT = 0;
export const DWRITE_READING_DIRECTION_RIGHT_TO_LEFT = 1;
export const DWRITE_READING_DIRECTION_TOP_TO_BOTTOM = 2;
export const DWRITE_READING_DIRECTION_BOTTOM_TO_TOP = 3;
export const DWRITE_FLOW_DIRECTION_TOP_TO_BOTTOM = 0;
export const DWRITE_FLOW_DIRECTION_BOTTOM_TO_TOP = 1;
export const DWRITE_FLOW_DIRECTION_LEFT_TO_RIGHT = 2;
export const DWRITE_FLOW_DIRECTION_RIGHT_TO_LEFT = 3;
export const DWRITE_TEXT_ALIGNMENT_LEADING = 0;
export const DWRITE_TEXT_ALIGNMENT_TRAILING = 1;
export const DWRITE_TEXT_ALIGNMENT_CENTER = 2;
export const DWRITE_TEXT_ALIGNMENT_JUSTIFIED = 3;
export const DWRITE_PARAGRAPH_ALIGNMENT_NEAR = 0;
export const DWRITE_PARAGRAPH_ALIGNMENT_FAR = 1;
export const DWRITE_PARAGRAPH_ALIGNMENT_CENTER = 2;
export const DWRITE_WORD_WRAPPING_WRAP = 0;
export const DWRITE_WORD_WRAPPING_NO_WRAP = 1;
export const DWRITE_WORD_WRAPPING_EMERGENCY_BREAK = 2;
export const DWRITE_WORD_WRAPPING_WHOLE_WORD = 3;
export const DWRITE_WORD_WRAPPING_CHARACTER = 4;
export const DWRITE_LINE_SPACING_METHOD_DEFAULT = 0;
export const DWRITE_LINE_SPACING_METHOD_UNIFORM = 1;
export const DWRITE_LINE_SPACING_METHOD_PROPORTIONAL = 2;
export const DWRITE_TRIMMING_GRANULARITY_NONE = 0;
export const DWRITE_TRIMMING_GRANULARITY_CHARACTER = 1;
export const DWRITE_TRIMMING_GRANULARITY_WORD = 2;
export const DWRITE_FONT_FEATURE_TAG_ALTERNATIVE_FRACTIONS = 1668441697;
export const DWRITE_FONT_FEATURE_TAG_PETITE_CAPITALS_FROM_CAPITALS = 1668297315;
export const DWRITE_FONT_FEATURE_TAG_SMALL_CAPITALS_FROM_CAPITALS = 1668493923;
export const DWRITE_FONT_FEATURE_TAG_CONTEXTUAL_ALTERNATES = 1953259875;
export const DWRITE_FONT_FEATURE_TAG_CASE_SENSITIVE_FORMS = 1702060387;
export const DWRITE_FONT_FEATURE_TAG_GLYPH_COMPOSITION_DECOMPOSITION = 1886217059;
export const DWRITE_FONT_FEATURE_TAG_CONTEXTUAL_LIGATURES = 1734962275;
export const DWRITE_FONT_FEATURE_TAG_CAPITAL_SPACING = 1886613603;
export const DWRITE_FONT_FEATURE_TAG_CONTEXTUAL_SWASH = 1752658787;
export const DWRITE_FONT_FEATURE_TAG_CURSIVE_POSITIONING = 1936880995;
export const DWRITE_FONT_FEATURE_TAG_DEFAULT = 1953261156;
export const DWRITE_FONT_FEATURE_TAG_DISCRETIONARY_LIGATURES = 1734962276;
export const DWRITE_FONT_FEATURE_TAG_EXPERT_FORMS = 1953527909;
export const DWRITE_FONT_FEATURE_TAG_FRACTIONS = 1667330662;
export const DWRITE_FONT_FEATURE_TAG_FULL_WIDTH = 1684633446;
export const DWRITE_FONT_FEATURE_TAG_HALF_FORMS = 1718378856;
export const DWRITE_FONT_FEATURE_TAG_HALANT_FORMS = 1852596584;
export const DWRITE_FONT_FEATURE_TAG_ALTERNATE_HALF_WIDTH = 1953259880;
export const DWRITE_FONT_FEATURE_TAG_HISTORICAL_FORMS = 1953720680;
export const DWRITE_FONT_FEATURE_TAG_HORIZONTAL_KANA_ALTERNATES = 1634626408;
export const DWRITE_FONT_FEATURE_TAG_HISTORICAL_LIGATURES = 1734962280;
export const DWRITE_FONT_FEATURE_TAG_HALF_WIDTH = 1684633448;
export const DWRITE_FONT_FEATURE_TAG_HOJO_KANJI_FORMS = 1869246312;
export const DWRITE_FONT_FEATURE_TAG_JIS04_FORMS = 875589738;
export const DWRITE_FONT_FEATURE_TAG_JIS78_FORMS = 943157354;
export const DWRITE_FONT_FEATURE_TAG_JIS83_FORMS = 859336810;
export const DWRITE_FONT_FEATURE_TAG_JIS90_FORMS = 809070698;
export const DWRITE_FONT_FEATURE_TAG_KERNING = 1852990827;
export const DWRITE_FONT_FEATURE_TAG_STANDARD_LIGATURES = 1634167148;
export const DWRITE_FONT_FEATURE_TAG_LINING_FIGURES = 1836412524;
export const DWRITE_FONT_FEATURE_TAG_LOCALIZED_FORMS = 1818455916;
export const DWRITE_FONT_FEATURE_TAG_MARK_POSITIONING = 1802658157;
export const DWRITE_FONT_FEATURE_TAG_MATHEMATICAL_GREEK = 1802659693;
export const DWRITE_FONT_FEATURE_TAG_MARK_TO_MARK_POSITIONING = 1802333037;
export const DWRITE_FONT_FEATURE_TAG_ALTERNATE_ANNOTATION_FORMS = 1953259886;
export const DWRITE_FONT_FEATURE_TAG_NLC_KANJI_FORMS = 1801677934;
export const DWRITE_FONT_FEATURE_TAG_OLD_STYLE_FIGURES = 1836412527;
export const DWRITE_FONT_FEATURE_TAG_ORDINALS = 1852076655;
export const DWRITE_FONT_FEATURE_TAG_PROPORTIONAL_ALTERNATE_WIDTH = 1953259888;
export const DWRITE_FONT_FEATURE_TAG_PETITE_CAPITALS = 1885430640;
export const DWRITE_FONT_FEATURE_TAG_PROPORTIONAL_FIGURES = 1836412528;
export const DWRITE_FONT_FEATURE_TAG_PROPORTIONAL_WIDTHS = 1684633456;
export const DWRITE_FONT_FEATURE_TAG_QUARTER_WIDTHS = 1684633457;
export const DWRITE_FONT_FEATURE_TAG_REQUIRED_LIGATURES = 1734962290;
export const DWRITE_FONT_FEATURE_TAG_RUBY_NOTATION_FORMS = 2036495730;
export const DWRITE_FONT_FEATURE_TAG_STYLISTIC_ALTERNATES = 1953259891;
export const DWRITE_FONT_FEATURE_TAG_SCIENTIFIC_INFERIORS = 1718511987;
export const DWRITE_FONT_FEATURE_TAG_SMALL_CAPITALS = 1885564275;
export const DWRITE_FONT_FEATURE_TAG_SIMPLIFIED_FORMS = 1819307379;
export const DWRITE_FONT_FEATURE_TAG_STYLISTIC_SET_1 = 825258867;
export const DWRITE_FONT_FEATURE_TAG_STYLISTIC_SET_2 = 842036083;
export const DWRITE_FONT_FEATURE_TAG_STYLISTIC_SET_3 = 858813299;
export const DWRITE_FONT_FEATURE_TAG_STYLISTIC_SET_4 = 875590515;
export const DWRITE_FONT_FEATURE_TAG_STYLISTIC_SET_5 = 892367731;
export const DWRITE_FONT_FEATURE_TAG_STYLISTIC_SET_6 = 909144947;
export const DWRITE_FONT_FEATURE_TAG_STYLISTIC_SET_7 = 925922163;
export const DWRITE_FONT_FEATURE_TAG_STYLISTIC_SET_8 = 942699379;
export const DWRITE_FONT_FEATURE_TAG_STYLISTIC_SET_9 = 959476595;
export const DWRITE_FONT_FEATURE_TAG_STYLISTIC_SET_10 = 808547187;
export const DWRITE_FONT_FEATURE_TAG_STYLISTIC_SET_11 = 825324403;
export const DWRITE_FONT_FEATURE_TAG_STYLISTIC_SET_12 = 842101619;
export const DWRITE_FONT_FEATURE_TAG_STYLISTIC_SET_13 = 858878835;
export const DWRITE_FONT_FEATURE_TAG_STYLISTIC_SET_14 = 875656051;
export const DWRITE_FONT_FEATURE_TAG_STYLISTIC_SET_15 = 892433267;
export const DWRITE_FONT_FEATURE_TAG_STYLISTIC_SET_16 = 909210483;
export const DWRITE_FONT_FEATURE_TAG_STYLISTIC_SET_17 = 925987699;
export const DWRITE_FONT_FEATURE_TAG_STYLISTIC_SET_18 = 942764915;
export const DWRITE_FONT_FEATURE_TAG_STYLISTIC_SET_19 = 959542131;
export const DWRITE_FONT_FEATURE_TAG_STYLISTIC_SET_20 = 808612723;
export const DWRITE_FONT_FEATURE_TAG_SUBSCRIPT = 1935832435;
export const DWRITE_FONT_FEATURE_TAG_SUPERSCRIPT = 1936749939;
export const DWRITE_FONT_FEATURE_TAG_SWASH = 1752397683;
export const DWRITE_FONT_FEATURE_TAG_TITLING = 1819568500;
export const DWRITE_FONT_FEATURE_TAG_TRADITIONAL_NAME_FORMS = 1835101812;
export const DWRITE_FONT_FEATURE_TAG_TABULAR_FIGURES = 1836412532;
export const DWRITE_FONT_FEATURE_TAG_TRADITIONAL_FORMS = 1684107892;
export const DWRITE_FONT_FEATURE_TAG_THIRD_WIDTHS = 1684633460;
export const DWRITE_FONT_FEATURE_TAG_UNICASE = 1667853941;
export const DWRITE_FONT_FEATURE_TAG_VERTICAL_WRITING = 1953654134;
export const DWRITE_FONT_FEATURE_TAG_VERTICAL_ALTERNATES_AND_ROTATION = 846492278;
export const DWRITE_FONT_FEATURE_TAG_SLASHED_ZERO = 1869768058;
export const DWRITE_SCRIPT_SHAPES_DEFAULT = 0;
export const DWRITE_SCRIPT_SHAPES_NO_VISUAL = 1;
export const DWRITE_BREAK_CONDITION_NEUTRAL = 0;
export const DWRITE_BREAK_CONDITION_CAN_BREAK = 1;
export const DWRITE_BREAK_CONDITION_MAY_NOT_BREAK = 2;
export const DWRITE_BREAK_CONDITION_MUST_BREAK = 3;
export const DWRITE_NUMBER_SUBSTITUTION_METHOD_FROM_CULTURE = 0;
export const DWRITE_NUMBER_SUBSTITUTION_METHOD_CONTEXTUAL = 1;
export const DWRITE_NUMBER_SUBSTITUTION_METHOD_NONE = 2;
export const DWRITE_NUMBER_SUBSTITUTION_METHOD_NATIONAL = 3;
export const DWRITE_NUMBER_SUBSTITUTION_METHOD_TRADITIONAL = 4;
export const DWRITE_TEXTURE_ALIASED_1x1 = 0;
export const DWRITE_TEXTURE_CLEARTYPE_3x1 = 1;
export const DWRITE_PANOSE_FAMILY_ANY = 0;
export const DWRITE_PANOSE_FAMILY_NO_FIT = 1;
export const DWRITE_PANOSE_FAMILY_TEXT_DISPLAY = 2;
export const DWRITE_PANOSE_FAMILY_SCRIPT = 3;
export const DWRITE_PANOSE_FAMILY_DECORATIVE = 4;
export const DWRITE_PANOSE_FAMILY_SYMBOL = 5;
export const DWRITE_PANOSE_FAMILY_PICTORIAL = 5;
export const DWRITE_PANOSE_SERIF_STYLE_ANY = 0;
export const DWRITE_PANOSE_SERIF_STYLE_NO_FIT = 1;
export const DWRITE_PANOSE_SERIF_STYLE_COVE = 2;
export const DWRITE_PANOSE_SERIF_STYLE_OBTUSE_COVE = 3;
export const DWRITE_PANOSE_SERIF_STYLE_SQUARE_COVE = 4;
export const DWRITE_PANOSE_SERIF_STYLE_OBTUSE_SQUARE_COVE = 5;
export const DWRITE_PANOSE_SERIF_STYLE_SQUARE = 6;
export const DWRITE_PANOSE_SERIF_STYLE_THIN = 7;
export const DWRITE_PANOSE_SERIF_STYLE_OVAL = 8;
export const DWRITE_PANOSE_SERIF_STYLE_EXAGGERATED = 9;
export const DWRITE_PANOSE_SERIF_STYLE_TRIANGLE = 10;
export const DWRITE_PANOSE_SERIF_STYLE_NORMAL_SANS = 11;
export const DWRITE_PANOSE_SERIF_STYLE_OBTUSE_SANS = 12;
export const DWRITE_PANOSE_SERIF_STYLE_PERPENDICULAR_SANS = 13;
export const DWRITE_PANOSE_SERIF_STYLE_FLARED = 14;
export const DWRITE_PANOSE_SERIF_STYLE_ROUNDED = 15;
export const DWRITE_PANOSE_SERIF_STYLE_SCRIPT = 16;
export const DWRITE_PANOSE_SERIF_STYLE_PERP_SANS = 13;
export const DWRITE_PANOSE_SERIF_STYLE_BONE = 8;
export const DWRITE_PANOSE_WEIGHT_ANY = 0;
export const DWRITE_PANOSE_WEIGHT_NO_FIT = 1;
export const DWRITE_PANOSE_WEIGHT_VERY_LIGHT = 2;
export const DWRITE_PANOSE_WEIGHT_LIGHT = 3;
export const DWRITE_PANOSE_WEIGHT_THIN = 4;
export const DWRITE_PANOSE_WEIGHT_BOOK = 5;
export const DWRITE_PANOSE_WEIGHT_MEDIUM = 6;
export const DWRITE_PANOSE_WEIGHT_DEMI = 7;
export const DWRITE_PANOSE_WEIGHT_BOLD = 8;
export const DWRITE_PANOSE_WEIGHT_HEAVY = 9;
export const DWRITE_PANOSE_WEIGHT_BLACK = 10;
export const DWRITE_PANOSE_WEIGHT_EXTRA_BLACK = 11;
export const DWRITE_PANOSE_WEIGHT_NORD = 11;
export const DWRITE_PANOSE_PROPORTION_ANY = 0;
export const DWRITE_PANOSE_PROPORTION_NO_FIT = 1;
export const DWRITE_PANOSE_PROPORTION_OLD_STYLE = 2;
export const DWRITE_PANOSE_PROPORTION_MODERN = 3;
export const DWRITE_PANOSE_PROPORTION_EVEN_WIDTH = 4;
export const DWRITE_PANOSE_PROPORTION_EXPANDED = 5;
export const DWRITE_PANOSE_PROPORTION_CONDENSED = 6;
export const DWRITE_PANOSE_PROPORTION_VERY_EXPANDED = 7;
export const DWRITE_PANOSE_PROPORTION_VERY_CONDENSED = 8;
export const DWRITE_PANOSE_PROPORTION_MONOSPACED = 9;
export const DWRITE_PANOSE_CONTRAST_ANY = 0;
export const DWRITE_PANOSE_CONTRAST_NO_FIT = 1;
export const DWRITE_PANOSE_CONTRAST_NONE = 2;
export const DWRITE_PANOSE_CONTRAST_VERY_LOW = 3;
export const DWRITE_PANOSE_CONTRAST_LOW = 4;
export const DWRITE_PANOSE_CONTRAST_MEDIUM_LOW = 5;
export const DWRITE_PANOSE_CONTRAST_MEDIUM = 6;
export const DWRITE_PANOSE_CONTRAST_MEDIUM_HIGH = 7;
export const DWRITE_PANOSE_CONTRAST_HIGH = 8;
export const DWRITE_PANOSE_CONTRAST_VERY_HIGH = 9;
export const DWRITE_PANOSE_CONTRAST_HORIZONTAL_LOW = 10;
export const DWRITE_PANOSE_CONTRAST_HORIZONTAL_MEDIUM = 11;
export const DWRITE_PANOSE_CONTRAST_HORIZONTAL_HIGH = 12;
export const DWRITE_PANOSE_CONTRAST_BROKEN = 13;
export const DWRITE_PANOSE_STROKE_VARIATION_ANY = 0;
export const DWRITE_PANOSE_STROKE_VARIATION_NO_FIT = 1;
export const DWRITE_PANOSE_STROKE_VARIATION_NO_VARIATION = 2;
export const DWRITE_PANOSE_STROKE_VARIATION_GRADUAL_DIAGONAL = 3;
export const DWRITE_PANOSE_STROKE_VARIATION_GRADUAL_TRANSITIONAL = 4;
export const DWRITE_PANOSE_STROKE_VARIATION_GRADUAL_VERTICAL = 5;
export const DWRITE_PANOSE_STROKE_VARIATION_GRADUAL_HORIZONTAL = 6;
export const DWRITE_PANOSE_STROKE_VARIATION_RAPID_VERTICAL = 7;
export const DWRITE_PANOSE_STROKE_VARIATION_RAPID_HORIZONTAL = 8;
export const DWRITE_PANOSE_STROKE_VARIATION_INSTANT_VERTICAL = 9;
export const DWRITE_PANOSE_STROKE_VARIATION_INSTANT_HORIZONTAL = 10;
export const DWRITE_PANOSE_ARM_STYLE_ANY = 0;
export const DWRITE_PANOSE_ARM_STYLE_NO_FIT = 1;
export const DWRITE_PANOSE_ARM_STYLE_STRAIGHT_ARMS_HORIZONTAL = 2;
export const DWRITE_PANOSE_ARM_STYLE_STRAIGHT_ARMS_WEDGE = 3;
export const DWRITE_PANOSE_ARM_STYLE_STRAIGHT_ARMS_VERTICAL = 4;
export const DWRITE_PANOSE_ARM_STYLE_STRAIGHT_ARMS_SINGLE_SERIF = 5;
export const DWRITE_PANOSE_ARM_STYLE_STRAIGHT_ARMS_DOUBLE_SERIF = 6;
export const DWRITE_PANOSE_ARM_STYLE_NONSTRAIGHT_ARMS_HORIZONTAL = 7;
export const DWRITE_PANOSE_ARM_STYLE_NONSTRAIGHT_ARMS_WEDGE = 8;
export const DWRITE_PANOSE_ARM_STYLE_NONSTRAIGHT_ARMS_VERTICAL = 9;
export const DWRITE_PANOSE_ARM_STYLE_NONSTRAIGHT_ARMS_SINGLE_SERIF = 10;
export const DWRITE_PANOSE_ARM_STYLE_NONSTRAIGHT_ARMS_DOUBLE_SERIF = 11;
export const DWRITE_PANOSE_ARM_STYLE_STRAIGHT_ARMS_HORZ = 2;
export const DWRITE_PANOSE_ARM_STYLE_STRAIGHT_ARMS_VERT = 4;
export const DWRITE_PANOSE_ARM_STYLE_BENT_ARMS_HORZ = 7;
export const DWRITE_PANOSE_ARM_STYLE_BENT_ARMS_WEDGE = 8;
export const DWRITE_PANOSE_ARM_STYLE_BENT_ARMS_VERT = 9;
export const DWRITE_PANOSE_ARM_STYLE_BENT_ARMS_SINGLE_SERIF = 10;
export const DWRITE_PANOSE_ARM_STYLE_BENT_ARMS_DOUBLE_SERIF = 11;
export const DWRITE_PANOSE_LETTERFORM_ANY = 0;
export const DWRITE_PANOSE_LETTERFORM_NO_FIT = 1;
export const DWRITE_PANOSE_LETTERFORM_NORMAL_CONTACT = 2;
export const DWRITE_PANOSE_LETTERFORM_NORMAL_WEIGHTED = 3;
export const DWRITE_PANOSE_LETTERFORM_NORMAL_BOXED = 4;
export const DWRITE_PANOSE_LETTERFORM_NORMAL_FLATTENED = 5;
export const DWRITE_PANOSE_LETTERFORM_NORMAL_ROUNDED = 6;
export const DWRITE_PANOSE_LETTERFORM_NORMAL_OFF_CENTER = 7;
export const DWRITE_PANOSE_LETTERFORM_NORMAL_SQUARE = 8;
export const DWRITE_PANOSE_LETTERFORM_OBLIQUE_CONTACT = 9;
export const DWRITE_PANOSE_LETTERFORM_OBLIQUE_WEIGHTED = 10;
export const DWRITE_PANOSE_LETTERFORM_OBLIQUE_BOXED = 11;
export const DWRITE_PANOSE_LETTERFORM_OBLIQUE_FLATTENED = 12;
export const DWRITE_PANOSE_LETTERFORM_OBLIQUE_ROUNDED = 13;
export const DWRITE_PANOSE_LETTERFORM_OBLIQUE_OFF_CENTER = 14;
export const DWRITE_PANOSE_LETTERFORM_OBLIQUE_SQUARE = 15;
export const DWRITE_PANOSE_MIDLINE_ANY = 0;
export const DWRITE_PANOSE_MIDLINE_NO_FIT = 1;
export const DWRITE_PANOSE_MIDLINE_STANDARD_TRIMMED = 2;
export const DWRITE_PANOSE_MIDLINE_STANDARD_POINTED = 3;
export const DWRITE_PANOSE_MIDLINE_STANDARD_SERIFED = 4;
export const DWRITE_PANOSE_MIDLINE_HIGH_TRIMMED = 5;
export const DWRITE_PANOSE_MIDLINE_HIGH_POINTED = 6;
export const DWRITE_PANOSE_MIDLINE_HIGH_SERIFED = 7;
export const DWRITE_PANOSE_MIDLINE_CONSTANT_TRIMMED = 8;
export const DWRITE_PANOSE_MIDLINE_CONSTANT_POINTED = 9;
export const DWRITE_PANOSE_MIDLINE_CONSTANT_SERIFED = 10;
export const DWRITE_PANOSE_MIDLINE_LOW_TRIMMED = 11;
export const DWRITE_PANOSE_MIDLINE_LOW_POINTED = 12;
export const DWRITE_PANOSE_MIDLINE_LOW_SERIFED = 13;
export const DWRITE_PANOSE_XHEIGHT_ANY = 0;
export const DWRITE_PANOSE_XHEIGHT_NO_FIT = 1;
export const DWRITE_PANOSE_XHEIGHT_CONSTANT_SMALL = 2;
export const DWRITE_PANOSE_XHEIGHT_CONSTANT_STANDARD = 3;
export const DWRITE_PANOSE_XHEIGHT_CONSTANT_LARGE = 4;
export const DWRITE_PANOSE_XHEIGHT_DUCKING_SMALL = 5;
export const DWRITE_PANOSE_XHEIGHT_DUCKING_STANDARD = 6;
export const DWRITE_PANOSE_XHEIGHT_DUCKING_LARGE = 7;
export const DWRITE_PANOSE_XHEIGHT_CONSTANT_STD = 3;
export const DWRITE_PANOSE_XHEIGHT_DUCKING_STD = 6;
export const DWRITE_PANOSE_TOOL_KIND_ANY = 0;
export const DWRITE_PANOSE_TOOL_KIND_NO_FIT = 1;
export const DWRITE_PANOSE_TOOL_KIND_FLAT_NIB = 2;
export const DWRITE_PANOSE_TOOL_KIND_PRESSURE_POINT = 3;
export const DWRITE_PANOSE_TOOL_KIND_ENGRAVED = 4;
export const DWRITE_PANOSE_TOOL_KIND_BALL = 5;
export const DWRITE_PANOSE_TOOL_KIND_BRUSH = 6;
export const DWRITE_PANOSE_TOOL_KIND_ROUGH = 7;
export const DWRITE_PANOSE_TOOL_KIND_FELT_PEN_BRUSH_TIP = 8;
export const DWRITE_PANOSE_TOOL_KIND_WILD_BRUSH = 9;
export const DWRITE_PANOSE_SPACING_ANY = 0;
export const DWRITE_PANOSE_SPACING_NO_FIT = 1;
export const DWRITE_PANOSE_SPACING_PROPORTIONAL_SPACED = 2;
export const DWRITE_PANOSE_SPACING_MONOSPACED = 3;
export const DWRITE_PANOSE_ASPECT_RATIO_ANY = 0;
export const DWRITE_PANOSE_ASPECT_RATIO_NO_FIT = 1;
export const DWRITE_PANOSE_ASPECT_RATIO_VERY_CONDENSED = 2;
export const DWRITE_PANOSE_ASPECT_RATIO_CONDENSED = 3;
export const DWRITE_PANOSE_ASPECT_RATIO_NORMAL = 4;
export const DWRITE_PANOSE_ASPECT_RATIO_EXPANDED = 5;
export const DWRITE_PANOSE_ASPECT_RATIO_VERY_EXPANDED = 6;
export const DWRITE_PANOSE_SCRIPT_TOPOLOGY_ANY = 0;
export const DWRITE_PANOSE_SCRIPT_TOPOLOGY_NO_FIT = 1;
export const DWRITE_PANOSE_SCRIPT_TOPOLOGY_ROMAN_DISCONNECTED = 2;
export const DWRITE_PANOSE_SCRIPT_TOPOLOGY_ROMAN_TRAILING = 3;
export const DWRITE_PANOSE_SCRIPT_TOPOLOGY_ROMAN_CONNECTED = 4;
export const DWRITE_PANOSE_SCRIPT_TOPOLOGY_CURSIVE_DISCONNECTED = 5;
export const DWRITE_PANOSE_SCRIPT_TOPOLOGY_CURSIVE_TRAILING = 6;
export const DWRITE_PANOSE_SCRIPT_TOPOLOGY_CURSIVE_CONNECTED = 7;
export const DWRITE_PANOSE_SCRIPT_TOPOLOGY_BLACKLETTER_DISCONNECTED = 8;
export const DWRITE_PANOSE_SCRIPT_TOPOLOGY_BLACKLETTER_TRAILING = 9;
export const DWRITE_PANOSE_SCRIPT_TOPOLOGY_BLACKLETTER_CONNECTED = 10;
export const DWRITE_PANOSE_SCRIPT_FORM_ANY = 0;
export const DWRITE_PANOSE_SCRIPT_FORM_NO_FIT = 1;
export const DWRITE_PANOSE_SCRIPT_FORM_UPRIGHT_NO_WRAPPING = 2;
export const DWRITE_PANOSE_SCRIPT_FORM_UPRIGHT_SOME_WRAPPING = 3;
export const DWRITE_PANOSE_SCRIPT_FORM_UPRIGHT_MORE_WRAPPING = 4;
export const DWRITE_PANOSE_SCRIPT_FORM_UPRIGHT_EXTREME_WRAPPING = 5;
export const DWRITE_PANOSE_SCRIPT_FORM_OBLIQUE_NO_WRAPPING = 6;
export const DWRITE_PANOSE_SCRIPT_FORM_OBLIQUE_SOME_WRAPPING = 7;
export const DWRITE_PANOSE_SCRIPT_FORM_OBLIQUE_MORE_WRAPPING = 8;
export const DWRITE_PANOSE_SCRIPT_FORM_OBLIQUE_EXTREME_WRAPPING = 9;
export const DWRITE_PANOSE_SCRIPT_FORM_EXAGGERATED_NO_WRAPPING = 10;
export const DWRITE_PANOSE_SCRIPT_FORM_EXAGGERATED_SOME_WRAPPING = 11;
export const DWRITE_PANOSE_SCRIPT_FORM_EXAGGERATED_MORE_WRAPPING = 12;
export const DWRITE_PANOSE_SCRIPT_FORM_EXAGGERATED_EXTREME_WRAPPING = 13;
export const DWRITE_PANOSE_FINIALS_ANY = 0;
export const DWRITE_PANOSE_FINIALS_NO_FIT = 1;
export const DWRITE_PANOSE_FINIALS_NONE_NO_LOOPS = 2;
export const DWRITE_PANOSE_FINIALS_NONE_CLOSED_LOOPS = 3;
export const DWRITE_PANOSE_FINIALS_NONE_OPEN_LOOPS = 4;
export const DWRITE_PANOSE_FINIALS_SHARP_NO_LOOPS = 5;
export const DWRITE_PANOSE_FINIALS_SHARP_CLOSED_LOOPS = 6;
export const DWRITE_PANOSE_FINIALS_SHARP_OPEN_LOOPS = 7;
export const DWRITE_PANOSE_FINIALS_TAPERED_NO_LOOPS = 8;
export const DWRITE_PANOSE_FINIALS_TAPERED_CLOSED_LOOPS = 9;
export const DWRITE_PANOSE_FINIALS_TAPERED_OPEN_LOOPS = 10;
export const DWRITE_PANOSE_FINIALS_ROUND_NO_LOOPS = 11;
export const DWRITE_PANOSE_FINIALS_ROUND_CLOSED_LOOPS = 12;
export const DWRITE_PANOSE_FINIALS_ROUND_OPEN_LOOPS = 13;
export const DWRITE_PANOSE_XASCENT_ANY = 0;
export const DWRITE_PANOSE_XASCENT_NO_FIT = 1;
export const DWRITE_PANOSE_XASCENT_VERY_LOW = 2;
export const DWRITE_PANOSE_XASCENT_LOW = 3;
export const DWRITE_PANOSE_XASCENT_MEDIUM = 4;
export const DWRITE_PANOSE_XASCENT_HIGH = 5;
export const DWRITE_PANOSE_XASCENT_VERY_HIGH = 6;
export const DWRITE_PANOSE_DECORATIVE_CLASS_ANY = 0;
export const DWRITE_PANOSE_DECORATIVE_CLASS_NO_FIT = 1;
export const DWRITE_PANOSE_DECORATIVE_CLASS_DERIVATIVE = 2;
export const DWRITE_PANOSE_DECORATIVE_CLASS_NONSTANDARD_TOPOLOGY = 3;
export const DWRITE_PANOSE_DECORATIVE_CLASS_NONSTANDARD_ELEMENTS = 4;
export const DWRITE_PANOSE_DECORATIVE_CLASS_NONSTANDARD_ASPECT = 5;
export const DWRITE_PANOSE_DECORATIVE_CLASS_INITIALS = 6;
export const DWRITE_PANOSE_DECORATIVE_CLASS_CARTOON = 7;
export const DWRITE_PANOSE_DECORATIVE_CLASS_PICTURE_STEMS = 8;
export const DWRITE_PANOSE_DECORATIVE_CLASS_ORNAMENTED = 9;
export const DWRITE_PANOSE_DECORATIVE_CLASS_TEXT_AND_BACKGROUND = 10;
export const DWRITE_PANOSE_DECORATIVE_CLASS_COLLAGE = 11;
export const DWRITE_PANOSE_DECORATIVE_CLASS_MONTAGE = 12;
export const DWRITE_PANOSE_ASPECT_ANY = 0;
export const DWRITE_PANOSE_ASPECT_NO_FIT = 1;
export const DWRITE_PANOSE_ASPECT_SUPER_CONDENSED = 2;
export const DWRITE_PANOSE_ASPECT_VERY_CONDENSED = 3;
export const DWRITE_PANOSE_ASPECT_CONDENSED = 4;
export const DWRITE_PANOSE_ASPECT_NORMAL = 5;
export const DWRITE_PANOSE_ASPECT_EXTENDED = 6;
export const DWRITE_PANOSE_ASPECT_VERY_EXTENDED = 7;
export const DWRITE_PANOSE_ASPECT_SUPER_EXTENDED = 8;
export const DWRITE_PANOSE_ASPECT_MONOSPACED = 9;
export const DWRITE_PANOSE_FILL_ANY = 0;
export const DWRITE_PANOSE_FILL_NO_FIT = 1;
export const DWRITE_PANOSE_FILL_STANDARD_SOLID_FILL = 2;
export const DWRITE_PANOSE_FILL_NO_FILL = 3;
export const DWRITE_PANOSE_FILL_PATTERNED_FILL = 4;
export const DWRITE_PANOSE_FILL_COMPLEX_FILL = 5;
export const DWRITE_PANOSE_FILL_SHAPED_FILL = 6;
export const DWRITE_PANOSE_FILL_DRAWN_DISTRESSED = 7;
export const DWRITE_PANOSE_LINING_ANY = 0;
export const DWRITE_PANOSE_LINING_NO_FIT = 1;
export const DWRITE_PANOSE_LINING_NONE = 2;
export const DWRITE_PANOSE_LINING_INLINE = 3;
export const DWRITE_PANOSE_LINING_OUTLINE = 4;
export const DWRITE_PANOSE_LINING_ENGRAVED = 5;
export const DWRITE_PANOSE_LINING_SHADOW = 6;
export const DWRITE_PANOSE_LINING_RELIEF = 7;
export const DWRITE_PANOSE_LINING_BACKDROP = 8;
export const DWRITE_PANOSE_DECORATIVE_TOPOLOGY_ANY = 0;
export const DWRITE_PANOSE_DECORATIVE_TOPOLOGY_NO_FIT = 1;
export const DWRITE_PANOSE_DECORATIVE_TOPOLOGY_STANDARD = 2;
export const DWRITE_PANOSE_DECORATIVE_TOPOLOGY_SQUARE = 3;
export const DWRITE_PANOSE_DECORATIVE_TOPOLOGY_MULTIPLE_SEGMENT = 4;
export const DWRITE_PANOSE_DECORATIVE_TOPOLOGY_ART_DECO = 5;
export const DWRITE_PANOSE_DECORATIVE_TOPOLOGY_UNEVEN_WEIGHTING = 6;
export const DWRITE_PANOSE_DECORATIVE_TOPOLOGY_DIVERSE_ARMS = 7;
export const DWRITE_PANOSE_DECORATIVE_TOPOLOGY_DIVERSE_FORMS = 8;
export const DWRITE_PANOSE_DECORATIVE_TOPOLOGY_LOMBARDIC_FORMS = 9;
export const DWRITE_PANOSE_DECORATIVE_TOPOLOGY_UPPER_CASE_IN_LOWER_CASE = 10;
export const DWRITE_PANOSE_DECORATIVE_TOPOLOGY_IMPLIED_TOPOLOGY = 11;
export const DWRITE_PANOSE_DECORATIVE_TOPOLOGY_HORSESHOE_E_AND_A = 12;
export const DWRITE_PANOSE_DECORATIVE_TOPOLOGY_CURSIVE = 13;
export const DWRITE_PANOSE_DECORATIVE_TOPOLOGY_BLACKLETTER = 14;
export const DWRITE_PANOSE_DECORATIVE_TOPOLOGY_SWASH_VARIANCE = 15;
export const DWRITE_PANOSE_CHARACTER_RANGES_ANY = 0;
export const DWRITE_PANOSE_CHARACTER_RANGES_NO_FIT = 1;
export const DWRITE_PANOSE_CHARACTER_RANGES_EXTENDED_COLLECTION = 2;
export const DWRITE_PANOSE_CHARACTER_RANGES_LITERALS = 3;
export const DWRITE_PANOSE_CHARACTER_RANGES_NO_LOWER_CASE = 4;
export const DWRITE_PANOSE_CHARACTER_RANGES_SMALL_CAPS = 5;
export const DWRITE_PANOSE_SYMBOL_KIND_ANY = 0;
export const DWRITE_PANOSE_SYMBOL_KIND_NO_FIT = 1;
export const DWRITE_PANOSE_SYMBOL_KIND_MONTAGES = 2;
export const DWRITE_PANOSE_SYMBOL_KIND_PICTURES = 3;
export const DWRITE_PANOSE_SYMBOL_KIND_SHAPES = 4;
export const DWRITE_PANOSE_SYMBOL_KIND_SCIENTIFIC = 5;
export const DWRITE_PANOSE_SYMBOL_KIND_MUSIC = 6;
export const DWRITE_PANOSE_SYMBOL_KIND_EXPERT = 7;
export const DWRITE_PANOSE_SYMBOL_KIND_PATTERNS = 8;
export const DWRITE_PANOSE_SYMBOL_KIND_BOARDERS = 9;
export const DWRITE_PANOSE_SYMBOL_KIND_ICONS = 10;
export const DWRITE_PANOSE_SYMBOL_KIND_LOGOS = 11;
export const DWRITE_PANOSE_SYMBOL_KIND_INDUSTRY_SPECIFIC = 12;
export const DWRITE_PANOSE_SYMBOL_ASPECT_RATIO_ANY = 0;
export const DWRITE_PANOSE_SYMBOL_ASPECT_RATIO_NO_FIT = 1;
export const DWRITE_PANOSE_SYMBOL_ASPECT_RATIO_NO_WIDTH = 2;
export const DWRITE_PANOSE_SYMBOL_ASPECT_RATIO_EXCEPTIONALLY_WIDE = 3;
export const DWRITE_PANOSE_SYMBOL_ASPECT_RATIO_SUPER_WIDE = 4;
export const DWRITE_PANOSE_SYMBOL_ASPECT_RATIO_VERY_WIDE = 5;
export const DWRITE_PANOSE_SYMBOL_ASPECT_RATIO_WIDE = 6;
export const DWRITE_PANOSE_SYMBOL_ASPECT_RATIO_NORMAL = 7;
export const DWRITE_PANOSE_SYMBOL_ASPECT_RATIO_NARROW = 8;
export const DWRITE_PANOSE_SYMBOL_ASPECT_RATIO_VERY_NARROW = 9;
export const DWRITE_OUTLINE_THRESHOLD_ANTIALIASED = 0;
export const DWRITE_OUTLINE_THRESHOLD_ALIASED = 1;
export const DWRITE_BASELINE_DEFAULT = 0;
export const DWRITE_BASELINE_ROMAN = 1;
export const DWRITE_BASELINE_CENTRAL = 2;
export const DWRITE_BASELINE_MATH = 3;
export const DWRITE_BASELINE_HANGING = 4;
export const DWRITE_BASELINE_IDEOGRAPHIC_BOTTOM = 5;
export const DWRITE_BASELINE_IDEOGRAPHIC_TOP = 6;
export const DWRITE_BASELINE_MINIMUM = 7;
export const DWRITE_BASELINE_MAXIMUM = 8;
export const DWRITE_VERTICAL_GLYPH_ORIENTATION_DEFAULT = 0;
export const DWRITE_VERTICAL_GLYPH_ORIENTATION_STACKED = 1;
export const DWRITE_GLYPH_ORIENTATION_ANGLE_0_DEGREES = 0;
export const DWRITE_GLYPH_ORIENTATION_ANGLE_90_DEGREES = 1;
export const DWRITE_GLYPH_ORIENTATION_ANGLE_180_DEGREES = 2;
export const DWRITE_GLYPH_ORIENTATION_ANGLE_270_DEGREES = 3;
export const DWRITE_TEXT_ANTIALIAS_MODE_CLEARTYPE = 0;
export const DWRITE_TEXT_ANTIALIAS_MODE_GRAYSCALE = 1;
export const DWRITE_OPTICAL_ALIGNMENT_NONE = 0;
export const DWRITE_OPTICAL_ALIGNMENT_NO_SIDE_BEARINGS = 1;
export const DWRITE_GRID_FIT_MODE_DEFAULT = 0;
export const DWRITE_GRID_FIT_MODE_DISABLED = 1;
export const DWRITE_GRID_FIT_MODE_ENABLED = 2;
export const DWRITE_FONT_PROPERTY_ID_NONE = 0;
export const DWRITE_FONT_PROPERTY_ID_WEIGHT_STRETCH_STYLE_FAMILY_NAME = 1;
export const DWRITE_FONT_PROPERTY_ID_TYPOGRAPHIC_FAMILY_NAME = 2;
export const DWRITE_FONT_PROPERTY_ID_WEIGHT_STRETCH_STYLE_FACE_NAME = 3;
export const DWRITE_FONT_PROPERTY_ID_FULL_NAME = 4;
export const DWRITE_FONT_PROPERTY_ID_WIN32_FAMILY_NAME = 5;
export const DWRITE_FONT_PROPERTY_ID_POSTSCRIPT_NAME = 6;
export const DWRITE_FONT_PROPERTY_ID_DESIGN_SCRIPT_LANGUAGE_TAG = 7;
export const DWRITE_FONT_PROPERTY_ID_SUPPORTED_SCRIPT_LANGUAGE_TAG = 8;
export const DWRITE_FONT_PROPERTY_ID_SEMANTIC_TAG = 9;
export const DWRITE_FONT_PROPERTY_ID_WEIGHT = 10;
export const DWRITE_FONT_PROPERTY_ID_STRETCH = 11;
export const DWRITE_FONT_PROPERTY_ID_STYLE = 12;
export const DWRITE_FONT_PROPERTY_ID_TYPOGRAPHIC_FACE_NAME = 13;
export const DWRITE_FONT_PROPERTY_ID_TOTAL = 13;
export const DWRITE_FONT_PROPERTY_ID_TOTAL_RS3 = 14;
export const DWRITE_FONT_PROPERTY_ID_PREFERRED_FAMILY_NAME = 2;
export const DWRITE_FONT_PROPERTY_ID_FAMILY_NAME = 1;
export const DWRITE_FONT_PROPERTY_ID_FACE_NAME = 3;
export const DWRITE_LOCALITY_REMOTE = 0;
export const DWRITE_LOCALITY_PARTIAL = 1;
export const DWRITE_LOCALITY_LOCAL = 2;
export const DWRITE_RENDERING_MODE1_DEFAULT = 0;
export const DWRITE_RENDERING_MODE1_ALIASED = 1;
export const DWRITE_RENDERING_MODE1_GDI_CLASSIC = 2;
export const DWRITE_RENDERING_MODE1_GDI_NATURAL = 3;
export const DWRITE_RENDERING_MODE1_NATURAL = 4;
export const DWRITE_RENDERING_MODE1_NATURAL_SYMMETRIC = 5;
export const DWRITE_RENDERING_MODE1_OUTLINE = 6;
export const DWRITE_RENDERING_MODE1_NATURAL_SYMMETRIC_DOWNSAMPLED = 7;
export const DWRITE_FONT_LINE_GAP_USAGE_DEFAULT = 0;
export const DWRITE_FONT_LINE_GAP_USAGE_DISABLED = 1;
export const DWRITE_FONT_LINE_GAP_USAGE_ENABLED = 2;
export const DWRITE_CONTAINER_TYPE_UNKNOWN = 0;
export const DWRITE_CONTAINER_TYPE_WOFF = 1;
export const DWRITE_CONTAINER_TYPE_WOFF2 = 2;
export const DWRITE_FONT_FAMILY_MODEL_TYPOGRAPHIC = 0;
export const DWRITE_FONT_FAMILY_MODEL_WEIGHT_STRETCH_STYLE = 1;
export const DWRITE_AUTOMATIC_FONT_AXES_NONE = 0;
export const DWRITE_AUTOMATIC_FONT_AXES_OPTICAL_SIZE = 1;
export const DWRITE_FONT_AXIS_ATTRIBUTES_NONE = 0;
export const DWRITE_FONT_AXIS_ATTRIBUTES_VARIABLE = 1;
export const DWRITE_FONT_AXIS_ATTRIBUTES_HIDDEN = 2;
export const DWRITE_FONT_SOURCE_TYPE_UNKNOWN = 0;
export const DWRITE_FONT_SOURCE_TYPE_PER_MACHINE = 1;
export const DWRITE_FONT_SOURCE_TYPE_PER_USER = 2;
export const DWRITE_FONT_SOURCE_TYPE_APPX_PACKAGE = 3;
export const DWRITE_FONT_SOURCE_TYPE_REMOTE_FONT_PROVIDER = 4;

// Structs

/**
 * Windows.Win32.Graphics.DirectWrite.DWRITE_COLOR_F (size: 16)
 */
export interface DWRITE_COLOR_F {
  /** f32 */
  r: number;
  /** f32 */
  g: number;
  /** f32 */
  b: number;
  /** f32 */
  a: number;
}

export const sizeofDWRITE_COLOR_F = 16;

export function allocDWRITE_COLOR_F(data?: Partial<DWRITE_COLOR_F>): Uint8Array {
  const buf = new Uint8Array(sizeofDWRITE_COLOR_F);
  const view = new DataView(buf.buffer);
  // 0x00: f32
  if (data?.r !== undefined) view.setFloat32(0, Number(data.r), true);
  // 0x04: f32
  if (data?.g !== undefined) view.setFloat32(4, Number(data.g), true);
  // 0x08: f32
  if (data?.b !== undefined) view.setFloat32(8, Number(data.b), true);
  // 0x0c: f32
  if (data?.a !== undefined) view.setFloat32(12, Number(data.a), true);
  return buf;
}

export class DWRITE_COLOR_FView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: f32
  get r(): number {
    return this.view.getFloat32(0, true);
  }

  // 0x04: f32
  get g(): number {
    return this.view.getFloat32(4, true);
  }

  // 0x08: f32
  get b(): number {
    return this.view.getFloat32(8, true);
  }

  // 0x0c: f32
  get a(): number {
    return this.view.getFloat32(12, true);
  }

  // 0x00: f32
  set r(value: number) {
    this.view.setFloat32(0, value, true);
  }

  // 0x04: f32
  set g(value: number) {
    this.view.setFloat32(4, value, true);
  }

  // 0x08: f32
  set b(value: number) {
    this.view.setFloat32(8, value, true);
  }

  // 0x0c: f32
  set a(value: number) {
    this.view.setFloat32(12, value, true);
  }
}

/**
 * Windows.Win32.Graphics.DirectWrite.DWRITE_FONT_METRICS (size: 24)
 */
export interface DWRITE_FONT_METRICS {
  /** u16 */
  designUnitsPerEm: number;
  /** u16 */
  ascent: number;
  /** u16 */
  descent: number;
  /** i16 */
  lineGap: number;
  /** u16 */
  capHeight: number;
  /** u16 */
  xHeight: number;
  /** i16 */
  underlinePosition: number;
  /** u16 */
  underlineThickness: number;
  /** i16 */
  strikethroughPosition: number;
  /** u16 */
  strikethroughThickness: number;
}

export const sizeofDWRITE_FONT_METRICS = 24;

export function allocDWRITE_FONT_METRICS(data?: Partial<DWRITE_FONT_METRICS>): Uint8Array {
  const buf = new Uint8Array(sizeofDWRITE_FONT_METRICS);
  const view = new DataView(buf.buffer);
  // 0x00: u16
  if (data?.designUnitsPerEm !== undefined) view.setUint16(0, Number(data.designUnitsPerEm), true);
  // 0x02: u16
  if (data?.ascent !== undefined) view.setUint16(2, Number(data.ascent), true);
  // 0x04: u16
  if (data?.descent !== undefined) view.setUint16(4, Number(data.descent), true);
  // 0x06: i16
  if (data?.lineGap !== undefined) view.setInt16(6, Number(data.lineGap), true);
  // 0x08: u16
  if (data?.capHeight !== undefined) view.setUint16(8, Number(data.capHeight), true);
  // 0x0a: u16
  if (data?.xHeight !== undefined) view.setUint16(10, Number(data.xHeight), true);
  // 0x0c: i16
  if (data?.underlinePosition !== undefined) view.setInt16(12, Number(data.underlinePosition), true);
  // 0x0e: u16
  if (data?.underlineThickness !== undefined) view.setUint16(14, Number(data.underlineThickness), true);
  // 0x10: i16
  if (data?.strikethroughPosition !== undefined) view.setInt16(16, Number(data.strikethroughPosition), true);
  // 0x12: u16
  if (data?.strikethroughThickness !== undefined) view.setUint16(18, Number(data.strikethroughThickness), true);
  // 0x14: pad4
  return buf;
}

export class DWRITE_FONT_METRICSView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u16
  get designUnitsPerEm(): number {
    return this.view.getUint16(0, true);
  }

  // 0x02: u16
  get ascent(): number {
    return this.view.getUint16(2, true);
  }

  // 0x04: u16
  get descent(): number {
    return this.view.getUint16(4, true);
  }

  // 0x06: i16
  get lineGap(): number {
    return this.view.getInt16(6, true);
  }

  // 0x08: u16
  get capHeight(): number {
    return this.view.getUint16(8, true);
  }

  // 0x0a: u16
  get xHeight(): number {
    return this.view.getUint16(10, true);
  }

  // 0x0c: i16
  get underlinePosition(): number {
    return this.view.getInt16(12, true);
  }

  // 0x0e: u16
  get underlineThickness(): number {
    return this.view.getUint16(14, true);
  }

  // 0x10: i16
  get strikethroughPosition(): number {
    return this.view.getInt16(16, true);
  }

  // 0x12: u16
  get strikethroughThickness(): number {
    return this.view.getUint16(18, true);
  }

  // 0x14: pad4

  // 0x00: u16
  set designUnitsPerEm(value: number) {
    this.view.setUint16(0, value, true);
  }

  // 0x02: u16
  set ascent(value: number) {
    this.view.setUint16(2, value, true);
  }

  // 0x04: u16
  set descent(value: number) {
    this.view.setUint16(4, value, true);
  }

  // 0x06: i16
  set lineGap(value: number) {
    this.view.setInt16(6, value, true);
  }

  // 0x08: u16
  set capHeight(value: number) {
    this.view.setUint16(8, value, true);
  }

  // 0x0a: u16
  set xHeight(value: number) {
    this.view.setUint16(10, value, true);
  }

  // 0x0c: i16
  set underlinePosition(value: number) {
    this.view.setInt16(12, value, true);
  }

  // 0x0e: u16
  set underlineThickness(value: number) {
    this.view.setUint16(14, value, true);
  }

  // 0x10: i16
  set strikethroughPosition(value: number) {
    this.view.setInt16(16, value, true);
  }

  // 0x12: u16
  set strikethroughThickness(value: number) {
    this.view.setUint16(18, value, true);
  }

  // 0x14: pad4
}

/**
 * Windows.Win32.Graphics.DirectWrite.DWRITE_GLYPH_METRICS (size: 32)
 */
export interface DWRITE_GLYPH_METRICS {
  /** i32 */
  leftSideBearing: number;
  /** u32 */
  advanceWidth: number;
  /** i32 */
  rightSideBearing: number;
  /** i32 */
  topSideBearing: number;
  /** u32 */
  advanceHeight: number;
  /** i32 */
  bottomSideBearing: number;
  /** i32 */
  verticalOriginY: number;
}

export const sizeofDWRITE_GLYPH_METRICS = 32;

export function allocDWRITE_GLYPH_METRICS(data?: Partial<DWRITE_GLYPH_METRICS>): Uint8Array {
  const buf = new Uint8Array(sizeofDWRITE_GLYPH_METRICS);
  const view = new DataView(buf.buffer);
  // 0x00: i32
  if (data?.leftSideBearing !== undefined) view.setInt32(0, Number(data.leftSideBearing), true);
  // 0x04: u32
  if (data?.advanceWidth !== undefined) view.setUint32(4, Number(data.advanceWidth), true);
  // 0x08: i32
  if (data?.rightSideBearing !== undefined) view.setInt32(8, Number(data.rightSideBearing), true);
  // 0x0c: i32
  if (data?.topSideBearing !== undefined) view.setInt32(12, Number(data.topSideBearing), true);
  // 0x10: u32
  if (data?.advanceHeight !== undefined) view.setUint32(16, Number(data.advanceHeight), true);
  // 0x14: i32
  if (data?.bottomSideBearing !== undefined) view.setInt32(20, Number(data.bottomSideBearing), true);
  // 0x18: i32
  if (data?.verticalOriginY !== undefined) view.setInt32(24, Number(data.verticalOriginY), true);
  // 0x1c: pad4
  return buf;
}

export class DWRITE_GLYPH_METRICSView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: i32
  get leftSideBearing(): number {
    return this.view.getInt32(0, true);
  }

  // 0x04: u32
  get advanceWidth(): number {
    return this.view.getUint32(4, true);
  }

  // 0x08: i32
  get rightSideBearing(): number {
    return this.view.getInt32(8, true);
  }

  // 0x0c: i32
  get topSideBearing(): number {
    return this.view.getInt32(12, true);
  }

  // 0x10: u32
  get advanceHeight(): number {
    return this.view.getUint32(16, true);
  }

  // 0x14: i32
  get bottomSideBearing(): number {
    return this.view.getInt32(20, true);
  }

  // 0x18: i32
  get verticalOriginY(): number {
    return this.view.getInt32(24, true);
  }

  // 0x1c: pad4

  // 0x00: i32
  set leftSideBearing(value: number) {
    this.view.setInt32(0, value, true);
  }

  // 0x04: u32
  set advanceWidth(value: number) {
    this.view.setUint32(4, value, true);
  }

  // 0x08: i32
  set rightSideBearing(value: number) {
    this.view.setInt32(8, value, true);
  }

  // 0x0c: i32
  set topSideBearing(value: number) {
    this.view.setInt32(12, value, true);
  }

  // 0x10: u32
  set advanceHeight(value: number) {
    this.view.setUint32(16, value, true);
  }

  // 0x14: i32
  set bottomSideBearing(value: number) {
    this.view.setInt32(20, value, true);
  }

  // 0x18: i32
  set verticalOriginY(value: number) {
    this.view.setInt32(24, value, true);
  }

  // 0x1c: pad4
}

/**
 * Windows.Win32.Graphics.DirectWrite.DWRITE_GLYPH_OFFSET (size: 8)
 */
export interface DWRITE_GLYPH_OFFSET {
  /** f32 */
  advanceOffset: number;
  /** f32 */
  ascenderOffset: number;
}

export const sizeofDWRITE_GLYPH_OFFSET = 8;

export function allocDWRITE_GLYPH_OFFSET(data?: Partial<DWRITE_GLYPH_OFFSET>): Uint8Array {
  const buf = new Uint8Array(sizeofDWRITE_GLYPH_OFFSET);
  const view = new DataView(buf.buffer);
  // 0x00: f32
  if (data?.advanceOffset !== undefined) view.setFloat32(0, Number(data.advanceOffset), true);
  // 0x04: f32
  if (data?.ascenderOffset !== undefined) view.setFloat32(4, Number(data.ascenderOffset), true);
  return buf;
}

export class DWRITE_GLYPH_OFFSETView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: f32
  get advanceOffset(): number {
    return this.view.getFloat32(0, true);
  }

  // 0x04: f32
  get ascenderOffset(): number {
    return this.view.getFloat32(4, true);
  }

  // 0x00: f32
  set advanceOffset(value: number) {
    this.view.setFloat32(0, value, true);
  }

  // 0x04: f32
  set ascenderOffset(value: number) {
    this.view.setFloat32(4, value, true);
  }
}

/**
 * Windows.Win32.Graphics.DirectWrite.DWRITE_MATRIX (size: 24)
 */
export interface DWRITE_MATRIX {
  /** f32 */
  m11: number;
  /** f32 */
  m12: number;
  /** f32 */
  m21: number;
  /** f32 */
  m22: number;
  /** f32 */
  dx: number;
  /** f32 */
  dy: number;
}

export const sizeofDWRITE_MATRIX = 24;

export function allocDWRITE_MATRIX(data?: Partial<DWRITE_MATRIX>): Uint8Array {
  const buf = new Uint8Array(sizeofDWRITE_MATRIX);
  const view = new DataView(buf.buffer);
  // 0x00: f32
  if (data?.m11 !== undefined) view.setFloat32(0, Number(data.m11), true);
  // 0x04: f32
  if (data?.m12 !== undefined) view.setFloat32(4, Number(data.m12), true);
  // 0x08: f32
  if (data?.m21 !== undefined) view.setFloat32(8, Number(data.m21), true);
  // 0x0c: f32
  if (data?.m22 !== undefined) view.setFloat32(12, Number(data.m22), true);
  // 0x10: f32
  if (data?.dx !== undefined) view.setFloat32(16, Number(data.dx), true);
  // 0x14: f32
  if (data?.dy !== undefined) view.setFloat32(20, Number(data.dy), true);
  return buf;
}

export class DWRITE_MATRIXView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: f32
  get m11(): number {
    return this.view.getFloat32(0, true);
  }

  // 0x04: f32
  get m12(): number {
    return this.view.getFloat32(4, true);
  }

  // 0x08: f32
  get m21(): number {
    return this.view.getFloat32(8, true);
  }

  // 0x0c: f32
  get m22(): number {
    return this.view.getFloat32(12, true);
  }

  // 0x10: f32
  get dx(): number {
    return this.view.getFloat32(16, true);
  }

  // 0x14: f32
  get dy(): number {
    return this.view.getFloat32(20, true);
  }

  // 0x00: f32
  set m11(value: number) {
    this.view.setFloat32(0, value, true);
  }

  // 0x04: f32
  set m12(value: number) {
    this.view.setFloat32(4, value, true);
  }

  // 0x08: f32
  set m21(value: number) {
    this.view.setFloat32(8, value, true);
  }

  // 0x0c: f32
  set m22(value: number) {
    this.view.setFloat32(12, value, true);
  }

  // 0x10: f32
  set dx(value: number) {
    this.view.setFloat32(16, value, true);
  }

  // 0x14: f32
  set dy(value: number) {
    this.view.setFloat32(20, value, true);
  }
}

/**
 * Windows.Win32.Graphics.DirectWrite.DWRITE_TEXT_RANGE (size: 8)
 */
export interface DWRITE_TEXT_RANGE {
  /** u32 */
  startPosition: number;
  /** u32 */
  length: number;
}

export const sizeofDWRITE_TEXT_RANGE = 8;

export function allocDWRITE_TEXT_RANGE(data?: Partial<DWRITE_TEXT_RANGE>): Uint8Array {
  const buf = new Uint8Array(sizeofDWRITE_TEXT_RANGE);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.startPosition !== undefined) view.setUint32(0, Number(data.startPosition), true);
  // 0x04: u32
  if (data?.length !== undefined) view.setUint32(4, Number(data.length), true);
  return buf;
}

export class DWRITE_TEXT_RANGEView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get startPosition(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: u32
  get length(): number {
    return this.view.getUint32(4, true);
  }

  // 0x00: u32
  set startPosition(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: u32
  set length(value: number) {
    this.view.setUint32(4, value, true);
  }
}

/**
 * Windows.Win32.Graphics.DirectWrite.DWRITE_FONT_FEATURE (size: 8)
 */
export interface DWRITE_FONT_FEATURE {
  /** Windows.Win32.Graphics.DirectWrite.DWRITE_FONT_FEATURE_TAG */
  nameTag: DWRITE_FONT_FEATURE_TAG;
  /** u32 */
  parameter: number;
}

export const sizeofDWRITE_FONT_FEATURE = 8;

export function allocDWRITE_FONT_FEATURE(data?: Partial<DWRITE_FONT_FEATURE>): Uint8Array {
  const buf = new Uint8Array(sizeofDWRITE_FONT_FEATURE);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.nameTag !== undefined) view.setUint32(0, Number(data.nameTag), true);
  // 0x04: u32
  if (data?.parameter !== undefined) view.setUint32(4, Number(data.parameter), true);
  return buf;
}

export class DWRITE_FONT_FEATUREView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get nameTag(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: u32
  get parameter(): number {
    return this.view.getUint32(4, true);
  }

  // 0x00: u32
  set nameTag(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: u32
  set parameter(value: number) {
    this.view.setUint32(4, value, true);
  }
}

/**
 * Windows.Win32.Graphics.DirectWrite.DWRITE_TYPOGRAPHIC_FEATURES (size: 16)
 */
export interface DWRITE_TYPOGRAPHIC_FEATURES {
  /** ptr */
  features: Deno.PointerValue | Uint8Array;
  /** u32 */
  featureCount: number;
}

export const sizeofDWRITE_TYPOGRAPHIC_FEATURES = 16;

export function allocDWRITE_TYPOGRAPHIC_FEATURES(data?: Partial<DWRITE_TYPOGRAPHIC_FEATURES>): Uint8Array {
  const buf = new Uint8Array(sizeofDWRITE_TYPOGRAPHIC_FEATURES);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.features !== undefined) view.setBigUint64(0, data.features === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.features))), true);
  // 0x08: u32
  if (data?.featureCount !== undefined) view.setUint32(8, Number(data.featureCount), true);
  // 0x0c: pad4
  return buf;
}

export class DWRITE_TYPOGRAPHIC_FEATURESView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get features(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(0, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x08: u32
  get featureCount(): number {
    return this.view.getUint32(8, true);
  }

  // 0x0c: pad4

  // 0x00: pointer
  set features(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(0, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x08: u32
  set featureCount(value: number) {
    this.view.setUint32(8, value, true);
  }

  // 0x0c: pad4
}

/**
 * Windows.Win32.Graphics.DirectWrite.DWRITE_TRIMMING (size: 16)
 */
export interface DWRITE_TRIMMING {
  /** Windows.Win32.Graphics.DirectWrite.DWRITE_TRIMMING_GRANULARITY */
  granularity: DWRITE_TRIMMING_GRANULARITY;
  /** u32 */
  delimiter: number;
  /** u32 */
  delimiterCount: number;
}

export const sizeofDWRITE_TRIMMING = 16;

export function allocDWRITE_TRIMMING(data?: Partial<DWRITE_TRIMMING>): Uint8Array {
  const buf = new Uint8Array(sizeofDWRITE_TRIMMING);
  const view = new DataView(buf.buffer);
  // 0x00: i32
  if (data?.granularity !== undefined) view.setInt32(0, Number(data.granularity), true);
  // 0x04: u32
  if (data?.delimiter !== undefined) view.setUint32(4, Number(data.delimiter), true);
  // 0x08: u32
  if (data?.delimiterCount !== undefined) view.setUint32(8, Number(data.delimiterCount), true);
  // 0x0c: pad4
  return buf;
}

export class DWRITE_TRIMMINGView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: i32
  get granularity(): number {
    return this.view.getInt32(0, true);
  }

  // 0x04: u32
  get delimiter(): number {
    return this.view.getUint32(4, true);
  }

  // 0x08: u32
  get delimiterCount(): number {
    return this.view.getUint32(8, true);
  }

  // 0x0c: pad4

  // 0x00: i32
  set granularity(value: number) {
    this.view.setInt32(0, value, true);
  }

  // 0x04: u32
  set delimiter(value: number) {
    this.view.setUint32(4, value, true);
  }

  // 0x08: u32
  set delimiterCount(value: number) {
    this.view.setUint32(8, value, true);
  }

  // 0x0c: pad4
}

/**
 * Windows.Win32.Graphics.DirectWrite.DWRITE_SCRIPT_ANALYSIS (size: 8)
 */
export interface DWRITE_SCRIPT_ANALYSIS {
  /** u16 */
  script: number;
  /** Windows.Win32.Graphics.DirectWrite.DWRITE_SCRIPT_SHAPES */
  shapes: DWRITE_SCRIPT_SHAPES;
}

export const sizeofDWRITE_SCRIPT_ANALYSIS = 8;

export function allocDWRITE_SCRIPT_ANALYSIS(data?: Partial<DWRITE_SCRIPT_ANALYSIS>): Uint8Array {
  const buf = new Uint8Array(sizeofDWRITE_SCRIPT_ANALYSIS);
  const view = new DataView(buf.buffer);
  // 0x00: u16
  if (data?.script !== undefined) view.setUint16(0, Number(data.script), true);
  // 0x02: u32
  if (data?.shapes !== undefined) view.setUint32(2, Number(data.shapes), true);
  // 0x06: pad2
  return buf;
}

export class DWRITE_SCRIPT_ANALYSISView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u16
  get script(): number {
    return this.view.getUint16(0, true);
  }

  // 0x02: u32
  get shapes(): number {
    return this.view.getUint32(2, true);
  }

  // 0x06: pad2

  // 0x00: u16
  set script(value: number) {
    this.view.setUint16(0, value, true);
  }

  // 0x02: u32
  set shapes(value: number) {
    this.view.setUint32(2, value, true);
  }

  // 0x06: pad2
}

/**
 * Windows.Win32.Graphics.DirectWrite.DWRITE_LINE_BREAKPOINT (size: 8)
 */
export interface DWRITE_LINE_BREAKPOINT {
  /** u8 */
  _bitfield: number;
}

export const sizeofDWRITE_LINE_BREAKPOINT = 8;

export function allocDWRITE_LINE_BREAKPOINT(data?: Partial<DWRITE_LINE_BREAKPOINT>): Uint8Array {
  const buf = new Uint8Array(sizeofDWRITE_LINE_BREAKPOINT);
  const view = new DataView(buf.buffer);
  // 0x00: u8
  if (data?._bitfield !== undefined) view.setUint8(0, Number(data._bitfield));
  // 0x01: pad7
  return buf;
}

export class DWRITE_LINE_BREAKPOINTView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u8
  get _bitfield(): number {
    return this.view.getUint8(0);
  }

  // 0x01: pad7

  // 0x00: u8
  set _bitfield(value: number) {
    this.view.setUint8(0, value);
  }

  // 0x01: pad7
}

/**
 * Windows.Win32.Graphics.DirectWrite.DWRITE_SHAPING_TEXT_PROPERTIES (size: 8)
 */
export interface DWRITE_SHAPING_TEXT_PROPERTIES {
  /** u16 */
  _bitfield: number;
}

export const sizeofDWRITE_SHAPING_TEXT_PROPERTIES = 8;

export function allocDWRITE_SHAPING_TEXT_PROPERTIES(data?: Partial<DWRITE_SHAPING_TEXT_PROPERTIES>): Uint8Array {
  const buf = new Uint8Array(sizeofDWRITE_SHAPING_TEXT_PROPERTIES);
  const view = new DataView(buf.buffer);
  // 0x00: u16
  if (data?._bitfield !== undefined) view.setUint16(0, Number(data._bitfield), true);
  // 0x02: pad6
  return buf;
}

export class DWRITE_SHAPING_TEXT_PROPERTIESView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u16
  get _bitfield(): number {
    return this.view.getUint16(0, true);
  }

  // 0x02: pad6

  // 0x00: u16
  set _bitfield(value: number) {
    this.view.setUint16(0, value, true);
  }

  // 0x02: pad6
}

/**
 * Windows.Win32.Graphics.DirectWrite.DWRITE_SHAPING_GLYPH_PROPERTIES (size: 8)
 */
export interface DWRITE_SHAPING_GLYPH_PROPERTIES {
  /** u16 */
  _bitfield: number;
}

export const sizeofDWRITE_SHAPING_GLYPH_PROPERTIES = 8;

export function allocDWRITE_SHAPING_GLYPH_PROPERTIES(data?: Partial<DWRITE_SHAPING_GLYPH_PROPERTIES>): Uint8Array {
  const buf = new Uint8Array(sizeofDWRITE_SHAPING_GLYPH_PROPERTIES);
  const view = new DataView(buf.buffer);
  // 0x00: u16
  if (data?._bitfield !== undefined) view.setUint16(0, Number(data._bitfield), true);
  // 0x02: pad6
  return buf;
}

export class DWRITE_SHAPING_GLYPH_PROPERTIESView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u16
  get _bitfield(): number {
    return this.view.getUint16(0, true);
  }

  // 0x02: pad6

  // 0x00: u16
  set _bitfield(value: number) {
    this.view.setUint16(0, value, true);
  }

  // 0x02: pad6
}

export type BOOL = number;

/**
 * Windows.Win32.Graphics.DirectWrite.DWRITE_GLYPH_RUN (size: 48)
 */
export interface DWRITE_GLYPH_RUN {
  /** Windows.Win32.Graphics.DirectWrite.IDWriteFontFace */
  fontFace: Uint8Array | Deno.PointerValue;
  /** f32 */
  fontEmSize: number;
  /** u32 */
  glyphCount: number;
  /** ptr */
  glyphIndices: Deno.PointerValue | Uint8Array;
  /** ptr */
  glyphAdvances: Deno.PointerValue | Uint8Array;
  /** ptr */
  glyphOffsets: Deno.PointerValue | Uint8Array;
  /** Windows.Win32.Foundation.BOOL */
  isSideways: boolean;
  /** u32 */
  bidiLevel: number;
}

export const sizeofDWRITE_GLYPH_RUN = 48;

export function allocDWRITE_GLYPH_RUN(data?: Partial<DWRITE_GLYPH_RUN>): Uint8Array {
  const buf = new Uint8Array(sizeofDWRITE_GLYPH_RUN);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.fontFace !== undefined) view.setBigUint64(0, data.fontFace === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.fontFace))), true);
  // 0x08: f32
  if (data?.fontEmSize !== undefined) view.setFloat32(8, Number(data.fontEmSize), true);
  // 0x0c: u32
  if (data?.glyphCount !== undefined) view.setUint32(12, Number(data.glyphCount), true);
  // 0x10: pointer
  if (data?.glyphIndices !== undefined) view.setBigUint64(16, data.glyphIndices === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.glyphIndices))), true);
  // 0x18: pointer
  if (data?.glyphAdvances !== undefined) view.setBigUint64(24, data.glyphAdvances === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.glyphAdvances))), true);
  // 0x20: pointer
  if (data?.glyphOffsets !== undefined) view.setBigUint64(32, data.glyphOffsets === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.glyphOffsets))), true);
  // 0x28: i32
  if (data?.isSideways !== undefined) view.setInt32(40, Number(data.isSideways), true);
  // 0x2c: u32
  if (data?.bidiLevel !== undefined) view.setUint32(44, Number(data.bidiLevel), true);
  return buf;
}

export class DWRITE_GLYPH_RUNView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get fontFace(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(0, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x08: f32
  get fontEmSize(): number {
    return this.view.getFloat32(8, true);
  }

  // 0x0c: u32
  get glyphCount(): number {
    return this.view.getUint32(12, true);
  }

  // 0x10: pointer
  get glyphIndices(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(16, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x18: pointer
  get glyphAdvances(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(24, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x20: pointer
  get glyphOffsets(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(32, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x28: i32
  get isSideways(): number {
    return this.view.getInt32(40, true);
  }

  // 0x2c: u32
  get bidiLevel(): number {
    return this.view.getUint32(44, true);
  }

  // 0x00: pointer
  set fontFace(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(0, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x08: f32
  set fontEmSize(value: number) {
    this.view.setFloat32(8, value, true);
  }

  // 0x0c: u32
  set glyphCount(value: number) {
    this.view.setUint32(12, value, true);
  }

  // 0x10: pointer
  set glyphIndices(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(16, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x18: pointer
  set glyphAdvances(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(24, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x20: pointer
  set glyphOffsets(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(32, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x28: i32
  set isSideways(value: number) {
    this.view.setInt32(40, value, true);
  }

  // 0x2c: u32
  set bidiLevel(value: number) {
    this.view.setUint32(44, value, true);
  }
}

export type PWSTR = Deno.PointerValue | Uint8Array;

/**
 * Windows.Win32.Graphics.DirectWrite.DWRITE_GLYPH_RUN_DESCRIPTION (size: 40)
 */
export interface DWRITE_GLYPH_RUN_DESCRIPTION {
  /** Windows.Win32.Foundation.PWSTR */
  localeName: string | null | Uint8Array | Uint16Array;
  /** Windows.Win32.Foundation.PWSTR */
  string: string | null | Uint8Array | Uint16Array;
  /** u32 */
  stringLength: number;
  /** ptr */
  clusterMap: Deno.PointerValue | Uint8Array;
  /** u32 */
  textPosition: number;
}

export const sizeofDWRITE_GLYPH_RUN_DESCRIPTION = 40;

export function allocDWRITE_GLYPH_RUN_DESCRIPTION(data?: Partial<DWRITE_GLYPH_RUN_DESCRIPTION>): Uint8Array {
  const buf = new Uint8Array(sizeofDWRITE_GLYPH_RUN_DESCRIPTION);
  const view = new DataView(buf.buffer);
  // 0x00: buffer
  if (data?.localeName !== undefined) {
    (buf as any)._f0 = util.pwstrToFfi(data.localeName);
    view.setBigUint64(0, (buf as any)._f0 === null ? 0n : BigInt(Deno.UnsafePointer.value(Deno.UnsafePointer.of((buf as any)._f0))), true);
  }
  // 0x08: buffer
  if (data?.string !== undefined) {
    (buf as any)._f8 = util.pwstrToFfi(data.string);
    view.setBigUint64(8, (buf as any)._f8 === null ? 0n : BigInt(Deno.UnsafePointer.value(Deno.UnsafePointer.of((buf as any)._f8))), true);
  }
  // 0x10: u32
  if (data?.stringLength !== undefined) view.setUint32(16, Number(data.stringLength), true);
  // 0x14: pad4
  // 0x18: pointer
  if (data?.clusterMap !== undefined) view.setBigUint64(24, data.clusterMap === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.clusterMap))), true);
  // 0x20: u32
  if (data?.textPosition !== undefined) view.setUint32(32, Number(data.textPosition), true);
  // 0x24: pad4
  return buf;
}

export class DWRITE_GLYPH_RUN_DESCRIPTIONView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: buffer
  get localeName(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(0, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x08: buffer
  get string(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x10: u32
  get stringLength(): number {
    return this.view.getUint32(16, true);
  }

  // 0x14: pad4

  // 0x18: pointer
  get clusterMap(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(24, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x20: u32
  get textPosition(): number {
    return this.view.getUint32(32, true);
  }

  // 0x24: pad4

  // 0x00: buffer
  set localeName(value: Uint8Array | Deno.PointerValue) {
    (this.buf as any)._f0 = value;
    this.view.setBigUint64(0, BigInt(Deno.UnsafePointer.value(util.toPointer((this.buf as any)._f0))), true);
  }

  // 0x08: buffer
  set string(value: Uint8Array | Deno.PointerValue) {
    (this.buf as any)._f8 = value;
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer((this.buf as any)._f8))), true);
  }

  // 0x10: u32
  set stringLength(value: number) {
    this.view.setUint32(16, value, true);
  }

  // 0x14: pad4

  // 0x18: pointer
  set clusterMap(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(24, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x20: u32
  set textPosition(value: number) {
    this.view.setUint32(32, value, true);
  }

  // 0x24: pad4
}

/**
 * Windows.Win32.Graphics.DirectWrite.DWRITE_UNDERLINE (size: 40)
 */
export interface DWRITE_UNDERLINE {
  /** f32 */
  width: number;
  /** f32 */
  thickness: number;
  /** f32 */
  offset: number;
  /** f32 */
  runHeight: number;
  /** Windows.Win32.Graphics.DirectWrite.DWRITE_READING_DIRECTION */
  readingDirection: DWRITE_READING_DIRECTION;
  /** Windows.Win32.Graphics.DirectWrite.DWRITE_FLOW_DIRECTION */
  flowDirection: DWRITE_FLOW_DIRECTION;
  /** Windows.Win32.Foundation.PWSTR */
  localeName: string | null | Uint8Array | Uint16Array;
  /** Windows.Win32.Graphics.DirectWrite.DWRITE_MEASURING_MODE */
  measuringMode: DWRITE_MEASURING_MODE;
}

export const sizeofDWRITE_UNDERLINE = 40;

export function allocDWRITE_UNDERLINE(data?: Partial<DWRITE_UNDERLINE>): Uint8Array {
  const buf = new Uint8Array(sizeofDWRITE_UNDERLINE);
  const view = new DataView(buf.buffer);
  // 0x00: f32
  if (data?.width !== undefined) view.setFloat32(0, Number(data.width), true);
  // 0x04: f32
  if (data?.thickness !== undefined) view.setFloat32(4, Number(data.thickness), true);
  // 0x08: f32
  if (data?.offset !== undefined) view.setFloat32(8, Number(data.offset), true);
  // 0x0c: f32
  if (data?.runHeight !== undefined) view.setFloat32(12, Number(data.runHeight), true);
  // 0x10: i32
  if (data?.readingDirection !== undefined) view.setInt32(16, Number(data.readingDirection), true);
  // 0x14: i32
  if (data?.flowDirection !== undefined) view.setInt32(20, Number(data.flowDirection), true);
  // 0x18: buffer
  if (data?.localeName !== undefined) {
    (buf as any)._f24 = util.pwstrToFfi(data.localeName);
    view.setBigUint64(24, (buf as any)._f24 === null ? 0n : BigInt(Deno.UnsafePointer.value(Deno.UnsafePointer.of((buf as any)._f24))), true);
  }
  // 0x20: i32
  if (data?.measuringMode !== undefined) view.setInt32(32, Number(data.measuringMode), true);
  // 0x24: pad4
  return buf;
}

export class DWRITE_UNDERLINEView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: f32
  get width(): number {
    return this.view.getFloat32(0, true);
  }

  // 0x04: f32
  get thickness(): number {
    return this.view.getFloat32(4, true);
  }

  // 0x08: f32
  get offset(): number {
    return this.view.getFloat32(8, true);
  }

  // 0x0c: f32
  get runHeight(): number {
    return this.view.getFloat32(12, true);
  }

  // 0x10: i32
  get readingDirection(): number {
    return this.view.getInt32(16, true);
  }

  // 0x14: i32
  get flowDirection(): number {
    return this.view.getInt32(20, true);
  }

  // 0x18: buffer
  get localeName(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(24, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x20: i32
  get measuringMode(): number {
    return this.view.getInt32(32, true);
  }

  // 0x24: pad4

  // 0x00: f32
  set width(value: number) {
    this.view.setFloat32(0, value, true);
  }

  // 0x04: f32
  set thickness(value: number) {
    this.view.setFloat32(4, value, true);
  }

  // 0x08: f32
  set offset(value: number) {
    this.view.setFloat32(8, value, true);
  }

  // 0x0c: f32
  set runHeight(value: number) {
    this.view.setFloat32(12, value, true);
  }

  // 0x10: i32
  set readingDirection(value: number) {
    this.view.setInt32(16, value, true);
  }

  // 0x14: i32
  set flowDirection(value: number) {
    this.view.setInt32(20, value, true);
  }

  // 0x18: buffer
  set localeName(value: Uint8Array | Deno.PointerValue) {
    (this.buf as any)._f24 = value;
    this.view.setBigUint64(24, BigInt(Deno.UnsafePointer.value(util.toPointer((this.buf as any)._f24))), true);
  }

  // 0x20: i32
  set measuringMode(value: number) {
    this.view.setInt32(32, value, true);
  }

  // 0x24: pad4
}

/**
 * Windows.Win32.Graphics.DirectWrite.DWRITE_STRIKETHROUGH (size: 40)
 */
export interface DWRITE_STRIKETHROUGH {
  /** f32 */
  width: number;
  /** f32 */
  thickness: number;
  /** f32 */
  offset: number;
  /** Windows.Win32.Graphics.DirectWrite.DWRITE_READING_DIRECTION */
  readingDirection: DWRITE_READING_DIRECTION;
  /** Windows.Win32.Graphics.DirectWrite.DWRITE_FLOW_DIRECTION */
  flowDirection: DWRITE_FLOW_DIRECTION;
  /** Windows.Win32.Foundation.PWSTR */
  localeName: string | null | Uint8Array | Uint16Array;
  /** Windows.Win32.Graphics.DirectWrite.DWRITE_MEASURING_MODE */
  measuringMode: DWRITE_MEASURING_MODE;
}

export const sizeofDWRITE_STRIKETHROUGH = 40;

export function allocDWRITE_STRIKETHROUGH(data?: Partial<DWRITE_STRIKETHROUGH>): Uint8Array {
  const buf = new Uint8Array(sizeofDWRITE_STRIKETHROUGH);
  const view = new DataView(buf.buffer);
  // 0x00: f32
  if (data?.width !== undefined) view.setFloat32(0, Number(data.width), true);
  // 0x04: f32
  if (data?.thickness !== undefined) view.setFloat32(4, Number(data.thickness), true);
  // 0x08: f32
  if (data?.offset !== undefined) view.setFloat32(8, Number(data.offset), true);
  // 0x0c: i32
  if (data?.readingDirection !== undefined) view.setInt32(12, Number(data.readingDirection), true);
  // 0x10: i32
  if (data?.flowDirection !== undefined) view.setInt32(16, Number(data.flowDirection), true);
  // 0x14: pad4
  // 0x18: buffer
  if (data?.localeName !== undefined) {
    (buf as any)._f24 = util.pwstrToFfi(data.localeName);
    view.setBigUint64(24, (buf as any)._f24 === null ? 0n : BigInt(Deno.UnsafePointer.value(Deno.UnsafePointer.of((buf as any)._f24))), true);
  }
  // 0x20: i32
  if (data?.measuringMode !== undefined) view.setInt32(32, Number(data.measuringMode), true);
  // 0x24: pad4
  return buf;
}

export class DWRITE_STRIKETHROUGHView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: f32
  get width(): number {
    return this.view.getFloat32(0, true);
  }

  // 0x04: f32
  get thickness(): number {
    return this.view.getFloat32(4, true);
  }

  // 0x08: f32
  get offset(): number {
    return this.view.getFloat32(8, true);
  }

  // 0x0c: i32
  get readingDirection(): number {
    return this.view.getInt32(12, true);
  }

  // 0x10: i32
  get flowDirection(): number {
    return this.view.getInt32(16, true);
  }

  // 0x14: pad4

  // 0x18: buffer
  get localeName(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(24, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x20: i32
  get measuringMode(): number {
    return this.view.getInt32(32, true);
  }

  // 0x24: pad4

  // 0x00: f32
  set width(value: number) {
    this.view.setFloat32(0, value, true);
  }

  // 0x04: f32
  set thickness(value: number) {
    this.view.setFloat32(4, value, true);
  }

  // 0x08: f32
  set offset(value: number) {
    this.view.setFloat32(8, value, true);
  }

  // 0x0c: i32
  set readingDirection(value: number) {
    this.view.setInt32(12, value, true);
  }

  // 0x10: i32
  set flowDirection(value: number) {
    this.view.setInt32(16, value, true);
  }

  // 0x14: pad4

  // 0x18: buffer
  set localeName(value: Uint8Array | Deno.PointerValue) {
    (this.buf as any)._f24 = value;
    this.view.setBigUint64(24, BigInt(Deno.UnsafePointer.value(util.toPointer((this.buf as any)._f24))), true);
  }

  // 0x20: i32
  set measuringMode(value: number) {
    this.view.setInt32(32, value, true);
  }

  // 0x24: pad4
}

/**
 * Windows.Win32.Graphics.DirectWrite.DWRITE_LINE_METRICS (size: 24)
 */
export interface DWRITE_LINE_METRICS {
  /** u32 */
  length: number;
  /** u32 */
  trailingWhitespaceLength: number;
  /** u32 */
  newlineLength: number;
  /** f32 */
  height: number;
  /** f32 */
  baseline: number;
  /** Windows.Win32.Foundation.BOOL */
  isTrimmed: boolean;
}

export const sizeofDWRITE_LINE_METRICS = 24;

export function allocDWRITE_LINE_METRICS(data?: Partial<DWRITE_LINE_METRICS>): Uint8Array {
  const buf = new Uint8Array(sizeofDWRITE_LINE_METRICS);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.length !== undefined) view.setUint32(0, Number(data.length), true);
  // 0x04: u32
  if (data?.trailingWhitespaceLength !== undefined) view.setUint32(4, Number(data.trailingWhitespaceLength), true);
  // 0x08: u32
  if (data?.newlineLength !== undefined) view.setUint32(8, Number(data.newlineLength), true);
  // 0x0c: f32
  if (data?.height !== undefined) view.setFloat32(12, Number(data.height), true);
  // 0x10: f32
  if (data?.baseline !== undefined) view.setFloat32(16, Number(data.baseline), true);
  // 0x14: i32
  if (data?.isTrimmed !== undefined) view.setInt32(20, Number(data.isTrimmed), true);
  return buf;
}

export class DWRITE_LINE_METRICSView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get length(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: u32
  get trailingWhitespaceLength(): number {
    return this.view.getUint32(4, true);
  }

  // 0x08: u32
  get newlineLength(): number {
    return this.view.getUint32(8, true);
  }

  // 0x0c: f32
  get height(): number {
    return this.view.getFloat32(12, true);
  }

  // 0x10: f32
  get baseline(): number {
    return this.view.getFloat32(16, true);
  }

  // 0x14: i32
  get isTrimmed(): number {
    return this.view.getInt32(20, true);
  }

  // 0x00: u32
  set length(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: u32
  set trailingWhitespaceLength(value: number) {
    this.view.setUint32(4, value, true);
  }

  // 0x08: u32
  set newlineLength(value: number) {
    this.view.setUint32(8, value, true);
  }

  // 0x0c: f32
  set height(value: number) {
    this.view.setFloat32(12, value, true);
  }

  // 0x10: f32
  set baseline(value: number) {
    this.view.setFloat32(16, value, true);
  }

  // 0x14: i32
  set isTrimmed(value: number) {
    this.view.setInt32(20, value, true);
  }
}

/**
 * Windows.Win32.Graphics.DirectWrite.DWRITE_CLUSTER_METRICS (size: 8)
 */
export interface DWRITE_CLUSTER_METRICS {
  /** f32 */
  width: number;
  /** u16 */
  length: number;
  /** u16 */
  _bitfield: number;
}

export const sizeofDWRITE_CLUSTER_METRICS = 8;

export function allocDWRITE_CLUSTER_METRICS(data?: Partial<DWRITE_CLUSTER_METRICS>): Uint8Array {
  const buf = new Uint8Array(sizeofDWRITE_CLUSTER_METRICS);
  const view = new DataView(buf.buffer);
  // 0x00: f32
  if (data?.width !== undefined) view.setFloat32(0, Number(data.width), true);
  // 0x04: u16
  if (data?.length !== undefined) view.setUint16(4, Number(data.length), true);
  // 0x06: u16
  if (data?._bitfield !== undefined) view.setUint16(6, Number(data._bitfield), true);
  return buf;
}

export class DWRITE_CLUSTER_METRICSView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: f32
  get width(): number {
    return this.view.getFloat32(0, true);
  }

  // 0x04: u16
  get length(): number {
    return this.view.getUint16(4, true);
  }

  // 0x06: u16
  get _bitfield(): number {
    return this.view.getUint16(6, true);
  }

  // 0x00: f32
  set width(value: number) {
    this.view.setFloat32(0, value, true);
  }

  // 0x04: u16
  set length(value: number) {
    this.view.setUint16(4, value, true);
  }

  // 0x06: u16
  set _bitfield(value: number) {
    this.view.setUint16(6, value, true);
  }
}

/**
 * Windows.Win32.Graphics.DirectWrite.DWRITE_TEXT_METRICS (size: 40)
 */
export interface DWRITE_TEXT_METRICS {
  /** f32 */
  left: number;
  /** f32 */
  top: number;
  /** f32 */
  width: number;
  /** f32 */
  widthIncludingTrailingWhitespace: number;
  /** f32 */
  height: number;
  /** f32 */
  layoutWidth: number;
  /** f32 */
  layoutHeight: number;
  /** u32 */
  maxBidiReorderingDepth: number;
  /** u32 */
  lineCount: number;
}

export const sizeofDWRITE_TEXT_METRICS = 40;

export function allocDWRITE_TEXT_METRICS(data?: Partial<DWRITE_TEXT_METRICS>): Uint8Array {
  const buf = new Uint8Array(sizeofDWRITE_TEXT_METRICS);
  const view = new DataView(buf.buffer);
  // 0x00: f32
  if (data?.left !== undefined) view.setFloat32(0, Number(data.left), true);
  // 0x04: f32
  if (data?.top !== undefined) view.setFloat32(4, Number(data.top), true);
  // 0x08: f32
  if (data?.width !== undefined) view.setFloat32(8, Number(data.width), true);
  // 0x0c: f32
  if (data?.widthIncludingTrailingWhitespace !== undefined) view.setFloat32(12, Number(data.widthIncludingTrailingWhitespace), true);
  // 0x10: f32
  if (data?.height !== undefined) view.setFloat32(16, Number(data.height), true);
  // 0x14: f32
  if (data?.layoutWidth !== undefined) view.setFloat32(20, Number(data.layoutWidth), true);
  // 0x18: f32
  if (data?.layoutHeight !== undefined) view.setFloat32(24, Number(data.layoutHeight), true);
  // 0x1c: u32
  if (data?.maxBidiReorderingDepth !== undefined) view.setUint32(28, Number(data.maxBidiReorderingDepth), true);
  // 0x20: u32
  if (data?.lineCount !== undefined) view.setUint32(32, Number(data.lineCount), true);
  // 0x24: pad4
  return buf;
}

export class DWRITE_TEXT_METRICSView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: f32
  get left(): number {
    return this.view.getFloat32(0, true);
  }

  // 0x04: f32
  get top(): number {
    return this.view.getFloat32(4, true);
  }

  // 0x08: f32
  get width(): number {
    return this.view.getFloat32(8, true);
  }

  // 0x0c: f32
  get widthIncludingTrailingWhitespace(): number {
    return this.view.getFloat32(12, true);
  }

  // 0x10: f32
  get height(): number {
    return this.view.getFloat32(16, true);
  }

  // 0x14: f32
  get layoutWidth(): number {
    return this.view.getFloat32(20, true);
  }

  // 0x18: f32
  get layoutHeight(): number {
    return this.view.getFloat32(24, true);
  }

  // 0x1c: u32
  get maxBidiReorderingDepth(): number {
    return this.view.getUint32(28, true);
  }

  // 0x20: u32
  get lineCount(): number {
    return this.view.getUint32(32, true);
  }

  // 0x24: pad4

  // 0x00: f32
  set left(value: number) {
    this.view.setFloat32(0, value, true);
  }

  // 0x04: f32
  set top(value: number) {
    this.view.setFloat32(4, value, true);
  }

  // 0x08: f32
  set width(value: number) {
    this.view.setFloat32(8, value, true);
  }

  // 0x0c: f32
  set widthIncludingTrailingWhitespace(value: number) {
    this.view.setFloat32(12, value, true);
  }

  // 0x10: f32
  set height(value: number) {
    this.view.setFloat32(16, value, true);
  }

  // 0x14: f32
  set layoutWidth(value: number) {
    this.view.setFloat32(20, value, true);
  }

  // 0x18: f32
  set layoutHeight(value: number) {
    this.view.setFloat32(24, value, true);
  }

  // 0x1c: u32
  set maxBidiReorderingDepth(value: number) {
    this.view.setUint32(28, value, true);
  }

  // 0x20: u32
  set lineCount(value: number) {
    this.view.setUint32(32, value, true);
  }

  // 0x24: pad4
}

/**
 * Windows.Win32.Graphics.DirectWrite.DWRITE_INLINE_OBJECT_METRICS (size: 16)
 */
export interface DWRITE_INLINE_OBJECT_METRICS {
  /** f32 */
  width: number;
  /** f32 */
  height: number;
  /** f32 */
  baseline: number;
  /** Windows.Win32.Foundation.BOOL */
  supportsSideways: boolean;
}

export const sizeofDWRITE_INLINE_OBJECT_METRICS = 16;

export function allocDWRITE_INLINE_OBJECT_METRICS(data?: Partial<DWRITE_INLINE_OBJECT_METRICS>): Uint8Array {
  const buf = new Uint8Array(sizeofDWRITE_INLINE_OBJECT_METRICS);
  const view = new DataView(buf.buffer);
  // 0x00: f32
  if (data?.width !== undefined) view.setFloat32(0, Number(data.width), true);
  // 0x04: f32
  if (data?.height !== undefined) view.setFloat32(4, Number(data.height), true);
  // 0x08: f32
  if (data?.baseline !== undefined) view.setFloat32(8, Number(data.baseline), true);
  // 0x0c: i32
  if (data?.supportsSideways !== undefined) view.setInt32(12, Number(data.supportsSideways), true);
  return buf;
}

export class DWRITE_INLINE_OBJECT_METRICSView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: f32
  get width(): number {
    return this.view.getFloat32(0, true);
  }

  // 0x04: f32
  get height(): number {
    return this.view.getFloat32(4, true);
  }

  // 0x08: f32
  get baseline(): number {
    return this.view.getFloat32(8, true);
  }

  // 0x0c: i32
  get supportsSideways(): number {
    return this.view.getInt32(12, true);
  }

  // 0x00: f32
  set width(value: number) {
    this.view.setFloat32(0, value, true);
  }

  // 0x04: f32
  set height(value: number) {
    this.view.setFloat32(4, value, true);
  }

  // 0x08: f32
  set baseline(value: number) {
    this.view.setFloat32(8, value, true);
  }

  // 0x0c: i32
  set supportsSideways(value: number) {
    this.view.setInt32(12, value, true);
  }
}

/**
 * Windows.Win32.Graphics.DirectWrite.DWRITE_OVERHANG_METRICS (size: 16)
 */
export interface DWRITE_OVERHANG_METRICS {
  /** f32 */
  left: number;
  /** f32 */
  top: number;
  /** f32 */
  right: number;
  /** f32 */
  bottom: number;
}

export const sizeofDWRITE_OVERHANG_METRICS = 16;

export function allocDWRITE_OVERHANG_METRICS(data?: Partial<DWRITE_OVERHANG_METRICS>): Uint8Array {
  const buf = new Uint8Array(sizeofDWRITE_OVERHANG_METRICS);
  const view = new DataView(buf.buffer);
  // 0x00: f32
  if (data?.left !== undefined) view.setFloat32(0, Number(data.left), true);
  // 0x04: f32
  if (data?.top !== undefined) view.setFloat32(4, Number(data.top), true);
  // 0x08: f32
  if (data?.right !== undefined) view.setFloat32(8, Number(data.right), true);
  // 0x0c: f32
  if (data?.bottom !== undefined) view.setFloat32(12, Number(data.bottom), true);
  return buf;
}

export class DWRITE_OVERHANG_METRICSView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: f32
  get left(): number {
    return this.view.getFloat32(0, true);
  }

  // 0x04: f32
  get top(): number {
    return this.view.getFloat32(4, true);
  }

  // 0x08: f32
  get right(): number {
    return this.view.getFloat32(8, true);
  }

  // 0x0c: f32
  get bottom(): number {
    return this.view.getFloat32(12, true);
  }

  // 0x00: f32
  set left(value: number) {
    this.view.setFloat32(0, value, true);
  }

  // 0x04: f32
  set top(value: number) {
    this.view.setFloat32(4, value, true);
  }

  // 0x08: f32
  set right(value: number) {
    this.view.setFloat32(8, value, true);
  }

  // 0x0c: f32
  set bottom(value: number) {
    this.view.setFloat32(12, value, true);
  }
}

/**
 * Windows.Win32.Graphics.DirectWrite.DWRITE_HIT_TEST_METRICS (size: 40)
 */
export interface DWRITE_HIT_TEST_METRICS {
  /** u32 */
  textPosition: number;
  /** u32 */
  length: number;
  /** f32 */
  left: number;
  /** f32 */
  top: number;
  /** f32 */
  width: number;
  /** f32 */
  height: number;
  /** u32 */
  bidiLevel: number;
  /** Windows.Win32.Foundation.BOOL */
  isText: boolean;
  /** Windows.Win32.Foundation.BOOL */
  isTrimmed: boolean;
}

export const sizeofDWRITE_HIT_TEST_METRICS = 40;

export function allocDWRITE_HIT_TEST_METRICS(data?: Partial<DWRITE_HIT_TEST_METRICS>): Uint8Array {
  const buf = new Uint8Array(sizeofDWRITE_HIT_TEST_METRICS);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.textPosition !== undefined) view.setUint32(0, Number(data.textPosition), true);
  // 0x04: u32
  if (data?.length !== undefined) view.setUint32(4, Number(data.length), true);
  // 0x08: f32
  if (data?.left !== undefined) view.setFloat32(8, Number(data.left), true);
  // 0x0c: f32
  if (data?.top !== undefined) view.setFloat32(12, Number(data.top), true);
  // 0x10: f32
  if (data?.width !== undefined) view.setFloat32(16, Number(data.width), true);
  // 0x14: f32
  if (data?.height !== undefined) view.setFloat32(20, Number(data.height), true);
  // 0x18: u32
  if (data?.bidiLevel !== undefined) view.setUint32(24, Number(data.bidiLevel), true);
  // 0x1c: i32
  if (data?.isText !== undefined) view.setInt32(28, Number(data.isText), true);
  // 0x20: i32
  if (data?.isTrimmed !== undefined) view.setInt32(32, Number(data.isTrimmed), true);
  // 0x24: pad4
  return buf;
}

export class DWRITE_HIT_TEST_METRICSView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get textPosition(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: u32
  get length(): number {
    return this.view.getUint32(4, true);
  }

  // 0x08: f32
  get left(): number {
    return this.view.getFloat32(8, true);
  }

  // 0x0c: f32
  get top(): number {
    return this.view.getFloat32(12, true);
  }

  // 0x10: f32
  get width(): number {
    return this.view.getFloat32(16, true);
  }

  // 0x14: f32
  get height(): number {
    return this.view.getFloat32(20, true);
  }

  // 0x18: u32
  get bidiLevel(): number {
    return this.view.getUint32(24, true);
  }

  // 0x1c: i32
  get isText(): number {
    return this.view.getInt32(28, true);
  }

  // 0x20: i32
  get isTrimmed(): number {
    return this.view.getInt32(32, true);
  }

  // 0x24: pad4

  // 0x00: u32
  set textPosition(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: u32
  set length(value: number) {
    this.view.setUint32(4, value, true);
  }

  // 0x08: f32
  set left(value: number) {
    this.view.setFloat32(8, value, true);
  }

  // 0x0c: f32
  set top(value: number) {
    this.view.setFloat32(12, value, true);
  }

  // 0x10: f32
  set width(value: number) {
    this.view.setFloat32(16, value, true);
  }

  // 0x14: f32
  set height(value: number) {
    this.view.setFloat32(20, value, true);
  }

  // 0x18: u32
  set bidiLevel(value: number) {
    this.view.setUint32(24, value, true);
  }

  // 0x1c: i32
  set isText(value: number) {
    this.view.setInt32(28, value, true);
  }

  // 0x20: i32
  set isTrimmed(value: number) {
    this.view.setInt32(32, value, true);
  }

  // 0x24: pad4
}

/**
 * Windows.Win32.Graphics.DirectWrite.DWRITE_FONT_METRICS1 (size: 40)
 */
export interface DWRITE_FONT_METRICS1 {
  /** Windows.Win32.Graphics.DirectWrite.DWRITE_FONT_METRICS */
  Base: Uint8Array | Deno.PointerValue;
  /** i16 */
  glyphBoxLeft: number;
  /** i16 */
  glyphBoxTop: number;
  /** i16 */
  glyphBoxRight: number;
  /** i16 */
  glyphBoxBottom: number;
  /** i16 */
  subscriptPositionX: number;
  /** i16 */
  subscriptPositionY: number;
  /** i16 */
  subscriptSizeX: number;
  /** i16 */
  subscriptSizeY: number;
  /** i16 */
  superscriptPositionX: number;
  /** i16 */
  superscriptPositionY: number;
  /** i16 */
  superscriptSizeX: number;
  /** i16 */
  superscriptSizeY: number;
  /** Windows.Win32.Foundation.BOOL */
  hasTypographicMetrics: boolean;
}

export const sizeofDWRITE_FONT_METRICS1 = 40;

export function allocDWRITE_FONT_METRICS1(data?: Partial<DWRITE_FONT_METRICS1>): Uint8Array {
  const buf = new Uint8Array(sizeofDWRITE_FONT_METRICS1);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.Base !== undefined) view.setBigUint64(0, data.Base === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.Base))), true);
  // 0x08: i16
  if (data?.glyphBoxLeft !== undefined) view.setInt16(8, Number(data.glyphBoxLeft), true);
  // 0x0a: i16
  if (data?.glyphBoxTop !== undefined) view.setInt16(10, Number(data.glyphBoxTop), true);
  // 0x0c: i16
  if (data?.glyphBoxRight !== undefined) view.setInt16(12, Number(data.glyphBoxRight), true);
  // 0x0e: i16
  if (data?.glyphBoxBottom !== undefined) view.setInt16(14, Number(data.glyphBoxBottom), true);
  // 0x10: i16
  if (data?.subscriptPositionX !== undefined) view.setInt16(16, Number(data.subscriptPositionX), true);
  // 0x12: i16
  if (data?.subscriptPositionY !== undefined) view.setInt16(18, Number(data.subscriptPositionY), true);
  // 0x14: i16
  if (data?.subscriptSizeX !== undefined) view.setInt16(20, Number(data.subscriptSizeX), true);
  // 0x16: i16
  if (data?.subscriptSizeY !== undefined) view.setInt16(22, Number(data.subscriptSizeY), true);
  // 0x18: i16
  if (data?.superscriptPositionX !== undefined) view.setInt16(24, Number(data.superscriptPositionX), true);
  // 0x1a: i16
  if (data?.superscriptPositionY !== undefined) view.setInt16(26, Number(data.superscriptPositionY), true);
  // 0x1c: i16
  if (data?.superscriptSizeX !== undefined) view.setInt16(28, Number(data.superscriptSizeX), true);
  // 0x1e: i16
  if (data?.superscriptSizeY !== undefined) view.setInt16(30, Number(data.superscriptSizeY), true);
  // 0x20: i32
  if (data?.hasTypographicMetrics !== undefined) view.setInt32(32, Number(data.hasTypographicMetrics), true);
  // 0x24: pad4
  return buf;
}

export class DWRITE_FONT_METRICS1View {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get Base(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(0, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x08: i16
  get glyphBoxLeft(): number {
    return this.view.getInt16(8, true);
  }

  // 0x0a: i16
  get glyphBoxTop(): number {
    return this.view.getInt16(10, true);
  }

  // 0x0c: i16
  get glyphBoxRight(): number {
    return this.view.getInt16(12, true);
  }

  // 0x0e: i16
  get glyphBoxBottom(): number {
    return this.view.getInt16(14, true);
  }

  // 0x10: i16
  get subscriptPositionX(): number {
    return this.view.getInt16(16, true);
  }

  // 0x12: i16
  get subscriptPositionY(): number {
    return this.view.getInt16(18, true);
  }

  // 0x14: i16
  get subscriptSizeX(): number {
    return this.view.getInt16(20, true);
  }

  // 0x16: i16
  get subscriptSizeY(): number {
    return this.view.getInt16(22, true);
  }

  // 0x18: i16
  get superscriptPositionX(): number {
    return this.view.getInt16(24, true);
  }

  // 0x1a: i16
  get superscriptPositionY(): number {
    return this.view.getInt16(26, true);
  }

  // 0x1c: i16
  get superscriptSizeX(): number {
    return this.view.getInt16(28, true);
  }

  // 0x1e: i16
  get superscriptSizeY(): number {
    return this.view.getInt16(30, true);
  }

  // 0x20: i32
  get hasTypographicMetrics(): number {
    return this.view.getInt32(32, true);
  }

  // 0x24: pad4

  // 0x00: pointer
  set Base(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(0, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x08: i16
  set glyphBoxLeft(value: number) {
    this.view.setInt16(8, value, true);
  }

  // 0x0a: i16
  set glyphBoxTop(value: number) {
    this.view.setInt16(10, value, true);
  }

  // 0x0c: i16
  set glyphBoxRight(value: number) {
    this.view.setInt16(12, value, true);
  }

  // 0x0e: i16
  set glyphBoxBottom(value: number) {
    this.view.setInt16(14, value, true);
  }

  // 0x10: i16
  set subscriptPositionX(value: number) {
    this.view.setInt16(16, value, true);
  }

  // 0x12: i16
  set subscriptPositionY(value: number) {
    this.view.setInt16(18, value, true);
  }

  // 0x14: i16
  set subscriptSizeX(value: number) {
    this.view.setInt16(20, value, true);
  }

  // 0x16: i16
  set subscriptSizeY(value: number) {
    this.view.setInt16(22, value, true);
  }

  // 0x18: i16
  set superscriptPositionX(value: number) {
    this.view.setInt16(24, value, true);
  }

  // 0x1a: i16
  set superscriptPositionY(value: number) {
    this.view.setInt16(26, value, true);
  }

  // 0x1c: i16
  set superscriptSizeX(value: number) {
    this.view.setInt16(28, value, true);
  }

  // 0x1e: i16
  set superscriptSizeY(value: number) {
    this.view.setInt16(30, value, true);
  }

  // 0x20: i32
  set hasTypographicMetrics(value: number) {
    this.view.setInt32(32, value, true);
  }

  // 0x24: pad4
}

/**
 * Windows.Win32.Graphics.DirectWrite.DWRITE_CARET_METRICS (size: 8)
 */
export interface DWRITE_CARET_METRICS {
  /** i16 */
  slopeRise: number;
  /** i16 */
  slopeRun: number;
  /** i16 */
  offset: number;
}

export const sizeofDWRITE_CARET_METRICS = 8;

export function allocDWRITE_CARET_METRICS(data?: Partial<DWRITE_CARET_METRICS>): Uint8Array {
  const buf = new Uint8Array(sizeofDWRITE_CARET_METRICS);
  const view = new DataView(buf.buffer);
  // 0x00: i16
  if (data?.slopeRise !== undefined) view.setInt16(0, Number(data.slopeRise), true);
  // 0x02: i16
  if (data?.slopeRun !== undefined) view.setInt16(2, Number(data.slopeRun), true);
  // 0x04: i16
  if (data?.offset !== undefined) view.setInt16(4, Number(data.offset), true);
  // 0x06: pad2
  return buf;
}

export class DWRITE_CARET_METRICSView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: i16
  get slopeRise(): number {
    return this.view.getInt16(0, true);
  }

  // 0x02: i16
  get slopeRun(): number {
    return this.view.getInt16(2, true);
  }

  // 0x04: i16
  get offset(): number {
    return this.view.getInt16(4, true);
  }

  // 0x06: pad2

  // 0x00: i16
  set slopeRise(value: number) {
    this.view.setInt16(0, value, true);
  }

  // 0x02: i16
  set slopeRun(value: number) {
    this.view.setInt16(2, value, true);
  }

  // 0x04: i16
  set offset(value: number) {
    this.view.setInt16(4, value, true);
  }

  // 0x06: pad2
}

/**
 * _text_e__Struct (size: 16)
 */
export interface _text_e__Struct {
  /** u8 */
  familyKind: number;
  /** u8 */
  serifStyle: number;
  /** u8 */
  weight: number;
  /** u8 */
  proportion: number;
  /** u8 */
  contrast: number;
  /** u8 */
  strokeVariation: number;
  /** u8 */
  armStyle: number;
  /** u8 */
  letterform: number;
  /** u8 */
  midline: number;
  /** u8 */
  xHeight: number;
}

export const sizeof_text_e__Struct = 16;

export function alloc_text_e__Struct(data?: Partial<_text_e__Struct>): Uint8Array {
  const buf = new Uint8Array(sizeof_text_e__Struct);
  const view = new DataView(buf.buffer);
  // 0x00: u8
  if (data?.familyKind !== undefined) view.setUint8(0, Number(data.familyKind));
  // 0x01: u8
  if (data?.serifStyle !== undefined) view.setUint8(1, Number(data.serifStyle));
  // 0x02: u8
  if (data?.weight !== undefined) view.setUint8(2, Number(data.weight));
  // 0x03: u8
  if (data?.proportion !== undefined) view.setUint8(3, Number(data.proportion));
  // 0x04: u8
  if (data?.contrast !== undefined) view.setUint8(4, Number(data.contrast));
  // 0x05: u8
  if (data?.strokeVariation !== undefined) view.setUint8(5, Number(data.strokeVariation));
  // 0x06: u8
  if (data?.armStyle !== undefined) view.setUint8(6, Number(data.armStyle));
  // 0x07: u8
  if (data?.letterform !== undefined) view.setUint8(7, Number(data.letterform));
  // 0x08: u8
  if (data?.midline !== undefined) view.setUint8(8, Number(data.midline));
  // 0x09: u8
  if (data?.xHeight !== undefined) view.setUint8(9, Number(data.xHeight));
  // 0x0a: pad6
  return buf;
}

export class _text_e__StructView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u8
  get familyKind(): number {
    return this.view.getUint8(0);
  }

  // 0x01: u8
  get serifStyle(): number {
    return this.view.getUint8(1);
  }

  // 0x02: u8
  get weight(): number {
    return this.view.getUint8(2);
  }

  // 0x03: u8
  get proportion(): number {
    return this.view.getUint8(3);
  }

  // 0x04: u8
  get contrast(): number {
    return this.view.getUint8(4);
  }

  // 0x05: u8
  get strokeVariation(): number {
    return this.view.getUint8(5);
  }

  // 0x06: u8
  get armStyle(): number {
    return this.view.getUint8(6);
  }

  // 0x07: u8
  get letterform(): number {
    return this.view.getUint8(7);
  }

  // 0x08: u8
  get midline(): number {
    return this.view.getUint8(8);
  }

  // 0x09: u8
  get xHeight(): number {
    return this.view.getUint8(9);
  }

  // 0x0a: pad6

  // 0x00: u8
  set familyKind(value: number) {
    this.view.setUint8(0, value);
  }

  // 0x01: u8
  set serifStyle(value: number) {
    this.view.setUint8(1, value);
  }

  // 0x02: u8
  set weight(value: number) {
    this.view.setUint8(2, value);
  }

  // 0x03: u8
  set proportion(value: number) {
    this.view.setUint8(3, value);
  }

  // 0x04: u8
  set contrast(value: number) {
    this.view.setUint8(4, value);
  }

  // 0x05: u8
  set strokeVariation(value: number) {
    this.view.setUint8(5, value);
  }

  // 0x06: u8
  set armStyle(value: number) {
    this.view.setUint8(6, value);
  }

  // 0x07: u8
  set letterform(value: number) {
    this.view.setUint8(7, value);
  }

  // 0x08: u8
  set midline(value: number) {
    this.view.setUint8(8, value);
  }

  // 0x09: u8
  set xHeight(value: number) {
    this.view.setUint8(9, value);
  }

  // 0x0a: pad6
}

/**
 * _script_e__Struct (size: 16)
 */
export interface _script_e__Struct {
  /** u8 */
  familyKind: number;
  /** u8 */
  toolKind: number;
  /** u8 */
  weight: number;
  /** u8 */
  spacing: number;
  /** u8 */
  aspectRatio: number;
  /** u8 */
  contrast: number;
  /** u8 */
  scriptTopology: number;
  /** u8 */
  scriptForm: number;
  /** u8 */
  finials: number;
  /** u8 */
  xAscent: number;
}

export const sizeof_script_e__Struct = 16;

export function alloc_script_e__Struct(data?: Partial<_script_e__Struct>): Uint8Array {
  const buf = new Uint8Array(sizeof_script_e__Struct);
  const view = new DataView(buf.buffer);
  // 0x00: u8
  if (data?.familyKind !== undefined) view.setUint8(0, Number(data.familyKind));
  // 0x01: u8
  if (data?.toolKind !== undefined) view.setUint8(1, Number(data.toolKind));
  // 0x02: u8
  if (data?.weight !== undefined) view.setUint8(2, Number(data.weight));
  // 0x03: u8
  if (data?.spacing !== undefined) view.setUint8(3, Number(data.spacing));
  // 0x04: u8
  if (data?.aspectRatio !== undefined) view.setUint8(4, Number(data.aspectRatio));
  // 0x05: u8
  if (data?.contrast !== undefined) view.setUint8(5, Number(data.contrast));
  // 0x06: u8
  if (data?.scriptTopology !== undefined) view.setUint8(6, Number(data.scriptTopology));
  // 0x07: u8
  if (data?.scriptForm !== undefined) view.setUint8(7, Number(data.scriptForm));
  // 0x08: u8
  if (data?.finials !== undefined) view.setUint8(8, Number(data.finials));
  // 0x09: u8
  if (data?.xAscent !== undefined) view.setUint8(9, Number(data.xAscent));
  // 0x0a: pad6
  return buf;
}

export class _script_e__StructView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u8
  get familyKind(): number {
    return this.view.getUint8(0);
  }

  // 0x01: u8
  get toolKind(): number {
    return this.view.getUint8(1);
  }

  // 0x02: u8
  get weight(): number {
    return this.view.getUint8(2);
  }

  // 0x03: u8
  get spacing(): number {
    return this.view.getUint8(3);
  }

  // 0x04: u8
  get aspectRatio(): number {
    return this.view.getUint8(4);
  }

  // 0x05: u8
  get contrast(): number {
    return this.view.getUint8(5);
  }

  // 0x06: u8
  get scriptTopology(): number {
    return this.view.getUint8(6);
  }

  // 0x07: u8
  get scriptForm(): number {
    return this.view.getUint8(7);
  }

  // 0x08: u8
  get finials(): number {
    return this.view.getUint8(8);
  }

  // 0x09: u8
  get xAscent(): number {
    return this.view.getUint8(9);
  }

  // 0x0a: pad6

  // 0x00: u8
  set familyKind(value: number) {
    this.view.setUint8(0, value);
  }

  // 0x01: u8
  set toolKind(value: number) {
    this.view.setUint8(1, value);
  }

  // 0x02: u8
  set weight(value: number) {
    this.view.setUint8(2, value);
  }

  // 0x03: u8
  set spacing(value: number) {
    this.view.setUint8(3, value);
  }

  // 0x04: u8
  set aspectRatio(value: number) {
    this.view.setUint8(4, value);
  }

  // 0x05: u8
  set contrast(value: number) {
    this.view.setUint8(5, value);
  }

  // 0x06: u8
  set scriptTopology(value: number) {
    this.view.setUint8(6, value);
  }

  // 0x07: u8
  set scriptForm(value: number) {
    this.view.setUint8(7, value);
  }

  // 0x08: u8
  set finials(value: number) {
    this.view.setUint8(8, value);
  }

  // 0x09: u8
  set xAscent(value: number) {
    this.view.setUint8(9, value);
  }

  // 0x0a: pad6
}

/**
 * _decorative_e__Struct (size: 16)
 */
export interface _decorative_e__Struct {
  /** u8 */
  familyKind: number;
  /** u8 */
  decorativeClass: number;
  /** u8 */
  weight: number;
  /** u8 */
  aspect: number;
  /** u8 */
  contrast: number;
  /** u8 */
  serifVariant: number;
  /** u8 */
  fill: number;
  /** u8 */
  lining: number;
  /** u8 */
  decorativeTopology: number;
  /** u8 */
  characterRange: number;
}

export const sizeof_decorative_e__Struct = 16;

export function alloc_decorative_e__Struct(data?: Partial<_decorative_e__Struct>): Uint8Array {
  const buf = new Uint8Array(sizeof_decorative_e__Struct);
  const view = new DataView(buf.buffer);
  // 0x00: u8
  if (data?.familyKind !== undefined) view.setUint8(0, Number(data.familyKind));
  // 0x01: u8
  if (data?.decorativeClass !== undefined) view.setUint8(1, Number(data.decorativeClass));
  // 0x02: u8
  if (data?.weight !== undefined) view.setUint8(2, Number(data.weight));
  // 0x03: u8
  if (data?.aspect !== undefined) view.setUint8(3, Number(data.aspect));
  // 0x04: u8
  if (data?.contrast !== undefined) view.setUint8(4, Number(data.contrast));
  // 0x05: u8
  if (data?.serifVariant !== undefined) view.setUint8(5, Number(data.serifVariant));
  // 0x06: u8
  if (data?.fill !== undefined) view.setUint8(6, Number(data.fill));
  // 0x07: u8
  if (data?.lining !== undefined) view.setUint8(7, Number(data.lining));
  // 0x08: u8
  if (data?.decorativeTopology !== undefined) view.setUint8(8, Number(data.decorativeTopology));
  // 0x09: u8
  if (data?.characterRange !== undefined) view.setUint8(9, Number(data.characterRange));
  // 0x0a: pad6
  return buf;
}

export class _decorative_e__StructView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u8
  get familyKind(): number {
    return this.view.getUint8(0);
  }

  // 0x01: u8
  get decorativeClass(): number {
    return this.view.getUint8(1);
  }

  // 0x02: u8
  get weight(): number {
    return this.view.getUint8(2);
  }

  // 0x03: u8
  get aspect(): number {
    return this.view.getUint8(3);
  }

  // 0x04: u8
  get contrast(): number {
    return this.view.getUint8(4);
  }

  // 0x05: u8
  get serifVariant(): number {
    return this.view.getUint8(5);
  }

  // 0x06: u8
  get fill(): number {
    return this.view.getUint8(6);
  }

  // 0x07: u8
  get lining(): number {
    return this.view.getUint8(7);
  }

  // 0x08: u8
  get decorativeTopology(): number {
    return this.view.getUint8(8);
  }

  // 0x09: u8
  get characterRange(): number {
    return this.view.getUint8(9);
  }

  // 0x0a: pad6

  // 0x00: u8
  set familyKind(value: number) {
    this.view.setUint8(0, value);
  }

  // 0x01: u8
  set decorativeClass(value: number) {
    this.view.setUint8(1, value);
  }

  // 0x02: u8
  set weight(value: number) {
    this.view.setUint8(2, value);
  }

  // 0x03: u8
  set aspect(value: number) {
    this.view.setUint8(3, value);
  }

  // 0x04: u8
  set contrast(value: number) {
    this.view.setUint8(4, value);
  }

  // 0x05: u8
  set serifVariant(value: number) {
    this.view.setUint8(5, value);
  }

  // 0x06: u8
  set fill(value: number) {
    this.view.setUint8(6, value);
  }

  // 0x07: u8
  set lining(value: number) {
    this.view.setUint8(7, value);
  }

  // 0x08: u8
  set decorativeTopology(value: number) {
    this.view.setUint8(8, value);
  }

  // 0x09: u8
  set characterRange(value: number) {
    this.view.setUint8(9, value);
  }

  // 0x0a: pad6
}

/**
 * _symbol_e__Struct (size: 16)
 */
export interface _symbol_e__Struct {
  /** u8 */
  familyKind: number;
  /** u8 */
  symbolKind: number;
  /** u8 */
  weight: number;
  /** u8 */
  spacing: number;
  /** u8 */
  aspectRatioAndContrast: number;
  /** u8 */
  aspectRatio94: number;
  /** u8 */
  aspectRatio119: number;
  /** u8 */
  aspectRatio157: number;
  /** u8 */
  aspectRatio163: number;
  /** u8 */
  aspectRatio211: number;
}

export const sizeof_symbol_e__Struct = 16;

export function alloc_symbol_e__Struct(data?: Partial<_symbol_e__Struct>): Uint8Array {
  const buf = new Uint8Array(sizeof_symbol_e__Struct);
  const view = new DataView(buf.buffer);
  // 0x00: u8
  if (data?.familyKind !== undefined) view.setUint8(0, Number(data.familyKind));
  // 0x01: u8
  if (data?.symbolKind !== undefined) view.setUint8(1, Number(data.symbolKind));
  // 0x02: u8
  if (data?.weight !== undefined) view.setUint8(2, Number(data.weight));
  // 0x03: u8
  if (data?.spacing !== undefined) view.setUint8(3, Number(data.spacing));
  // 0x04: u8
  if (data?.aspectRatioAndContrast !== undefined) view.setUint8(4, Number(data.aspectRatioAndContrast));
  // 0x05: u8
  if (data?.aspectRatio94 !== undefined) view.setUint8(5, Number(data.aspectRatio94));
  // 0x06: u8
  if (data?.aspectRatio119 !== undefined) view.setUint8(6, Number(data.aspectRatio119));
  // 0x07: u8
  if (data?.aspectRatio157 !== undefined) view.setUint8(7, Number(data.aspectRatio157));
  // 0x08: u8
  if (data?.aspectRatio163 !== undefined) view.setUint8(8, Number(data.aspectRatio163));
  // 0x09: u8
  if (data?.aspectRatio211 !== undefined) view.setUint8(9, Number(data.aspectRatio211));
  // 0x0a: pad6
  return buf;
}

export class _symbol_e__StructView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u8
  get familyKind(): number {
    return this.view.getUint8(0);
  }

  // 0x01: u8
  get symbolKind(): number {
    return this.view.getUint8(1);
  }

  // 0x02: u8
  get weight(): number {
    return this.view.getUint8(2);
  }

  // 0x03: u8
  get spacing(): number {
    return this.view.getUint8(3);
  }

  // 0x04: u8
  get aspectRatioAndContrast(): number {
    return this.view.getUint8(4);
  }

  // 0x05: u8
  get aspectRatio94(): number {
    return this.view.getUint8(5);
  }

  // 0x06: u8
  get aspectRatio119(): number {
    return this.view.getUint8(6);
  }

  // 0x07: u8
  get aspectRatio157(): number {
    return this.view.getUint8(7);
  }

  // 0x08: u8
  get aspectRatio163(): number {
    return this.view.getUint8(8);
  }

  // 0x09: u8
  get aspectRatio211(): number {
    return this.view.getUint8(9);
  }

  // 0x0a: pad6

  // 0x00: u8
  set familyKind(value: number) {
    this.view.setUint8(0, value);
  }

  // 0x01: u8
  set symbolKind(value: number) {
    this.view.setUint8(1, value);
  }

  // 0x02: u8
  set weight(value: number) {
    this.view.setUint8(2, value);
  }

  // 0x03: u8
  set spacing(value: number) {
    this.view.setUint8(3, value);
  }

  // 0x04: u8
  set aspectRatioAndContrast(value: number) {
    this.view.setUint8(4, value);
  }

  // 0x05: u8
  set aspectRatio94(value: number) {
    this.view.setUint8(5, value);
  }

  // 0x06: u8
  set aspectRatio119(value: number) {
    this.view.setUint8(6, value);
  }

  // 0x07: u8
  set aspectRatio157(value: number) {
    this.view.setUint8(7, value);
  }

  // 0x08: u8
  set aspectRatio163(value: number) {
    this.view.setUint8(8, value);
  }

  // 0x09: u8
  set aspectRatio211(value: number) {
    this.view.setUint8(9, value);
  }

  // 0x0a: pad6
}

/**
 * Windows.Win32.Graphics.DirectWrite.DWRITE_PANOSE (size: 48)
 */
export interface DWRITE_PANOSE {
  /** array */
  values: Deno.PointerValue;
  /** u8 */
  familyKind: number;
  /** _text_e__Struct */
  text: Uint8Array | Deno.PointerValue;
  /** _script_e__Struct */
  script: Uint8Array | Deno.PointerValue;
  /** _decorative_e__Struct */
  decorative: Uint8Array | Deno.PointerValue;
  /** _symbol_e__Struct */
  symbol: Uint8Array | Deno.PointerValue;
}

export const sizeofDWRITE_PANOSE = 48;

export function allocDWRITE_PANOSE(data?: Partial<DWRITE_PANOSE>): Uint8Array {
  const buf = new Uint8Array(sizeofDWRITE_PANOSE);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.values !== undefined) view.setBigUint64(0, data.values === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.values))), true);
  // 0x08: u8
  if (data?.familyKind !== undefined) view.setUint8(8, Number(data.familyKind));
  // 0x09: pad7
  // 0x10: pointer
  if (data?.text !== undefined) view.setBigUint64(16, data.text === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.text))), true);
  // 0x18: pointer
  if (data?.script !== undefined) view.setBigUint64(24, data.script === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.script))), true);
  // 0x20: pointer
  if (data?.decorative !== undefined) view.setBigUint64(32, data.decorative === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.decorative))), true);
  // 0x28: pointer
  if (data?.symbol !== undefined) view.setBigUint64(40, data.symbol === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.symbol))), true);
  return buf;
}

export class DWRITE_PANOSEView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get values(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(0, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x08: u8
  get familyKind(): number {
    return this.view.getUint8(8);
  }

  // 0x09: pad7

  // 0x10: pointer
  get text(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(16, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x18: pointer
  get script(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(24, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x20: pointer
  get decorative(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(32, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x28: pointer
  get symbol(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(40, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: pointer
  set values(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(0, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x08: u8
  set familyKind(value: number) {
    this.view.setUint8(8, value);
  }

  // 0x09: pad7

  // 0x10: pointer
  set text(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(16, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x18: pointer
  set script(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(24, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x20: pointer
  set decorative(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(32, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x28: pointer
  set symbol(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(40, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.Graphics.DirectWrite.DWRITE_UNICODE_RANGE (size: 8)
 */
export interface DWRITE_UNICODE_RANGE {
  /** u32 */
  first: number;
  /** u32 */
  last: number;
}

export const sizeofDWRITE_UNICODE_RANGE = 8;

export function allocDWRITE_UNICODE_RANGE(data?: Partial<DWRITE_UNICODE_RANGE>): Uint8Array {
  const buf = new Uint8Array(sizeofDWRITE_UNICODE_RANGE);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.first !== undefined) view.setUint32(0, Number(data.first), true);
  // 0x04: u32
  if (data?.last !== undefined) view.setUint32(4, Number(data.last), true);
  return buf;
}

export class DWRITE_UNICODE_RANGEView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get first(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: u32
  get last(): number {
    return this.view.getUint32(4, true);
  }

  // 0x00: u32
  set first(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: u32
  set last(value: number) {
    this.view.setUint32(4, value, true);
  }
}

/**
 * Windows.Win32.Graphics.DirectWrite.DWRITE_SCRIPT_PROPERTIES (size: 24)
 */
export interface DWRITE_SCRIPT_PROPERTIES {
  /** u32 */
  isoScriptCode: number;
  /** u32 */
  isoScriptNumber: number;
  /** u32 */
  clusterLookahead: number;
  /** u32 */
  justificationCharacter: number;
  /** u32 */
  _bitfield: number;
}

export const sizeofDWRITE_SCRIPT_PROPERTIES = 24;

export function allocDWRITE_SCRIPT_PROPERTIES(data?: Partial<DWRITE_SCRIPT_PROPERTIES>): Uint8Array {
  const buf = new Uint8Array(sizeofDWRITE_SCRIPT_PROPERTIES);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.isoScriptCode !== undefined) view.setUint32(0, Number(data.isoScriptCode), true);
  // 0x04: u32
  if (data?.isoScriptNumber !== undefined) view.setUint32(4, Number(data.isoScriptNumber), true);
  // 0x08: u32
  if (data?.clusterLookahead !== undefined) view.setUint32(8, Number(data.clusterLookahead), true);
  // 0x0c: u32
  if (data?.justificationCharacter !== undefined) view.setUint32(12, Number(data.justificationCharacter), true);
  // 0x10: u32
  if (data?._bitfield !== undefined) view.setUint32(16, Number(data._bitfield), true);
  // 0x14: pad4
  return buf;
}

export class DWRITE_SCRIPT_PROPERTIESView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get isoScriptCode(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: u32
  get isoScriptNumber(): number {
    return this.view.getUint32(4, true);
  }

  // 0x08: u32
  get clusterLookahead(): number {
    return this.view.getUint32(8, true);
  }

  // 0x0c: u32
  get justificationCharacter(): number {
    return this.view.getUint32(12, true);
  }

  // 0x10: u32
  get _bitfield(): number {
    return this.view.getUint32(16, true);
  }

  // 0x14: pad4

  // 0x00: u32
  set isoScriptCode(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: u32
  set isoScriptNumber(value: number) {
    this.view.setUint32(4, value, true);
  }

  // 0x08: u32
  set clusterLookahead(value: number) {
    this.view.setUint32(8, value, true);
  }

  // 0x0c: u32
  set justificationCharacter(value: number) {
    this.view.setUint32(12, value, true);
  }

  // 0x10: u32
  set _bitfield(value: number) {
    this.view.setUint32(16, value, true);
  }

  // 0x14: pad4
}

/**
 * Windows.Win32.Graphics.DirectWrite.DWRITE_JUSTIFICATION_OPPORTUNITY (size: 16)
 */
export interface DWRITE_JUSTIFICATION_OPPORTUNITY {
  /** f32 */
  expansionMinimum: number;
  /** f32 */
  expansionMaximum: number;
  /** f32 */
  compressionMaximum: number;
  /** u32 */
  _bitfield: number;
}

export const sizeofDWRITE_JUSTIFICATION_OPPORTUNITY = 16;

export function allocDWRITE_JUSTIFICATION_OPPORTUNITY(data?: Partial<DWRITE_JUSTIFICATION_OPPORTUNITY>): Uint8Array {
  const buf = new Uint8Array(sizeofDWRITE_JUSTIFICATION_OPPORTUNITY);
  const view = new DataView(buf.buffer);
  // 0x00: f32
  if (data?.expansionMinimum !== undefined) view.setFloat32(0, Number(data.expansionMinimum), true);
  // 0x04: f32
  if (data?.expansionMaximum !== undefined) view.setFloat32(4, Number(data.expansionMaximum), true);
  // 0x08: f32
  if (data?.compressionMaximum !== undefined) view.setFloat32(8, Number(data.compressionMaximum), true);
  // 0x0c: u32
  if (data?._bitfield !== undefined) view.setUint32(12, Number(data._bitfield), true);
  return buf;
}

export class DWRITE_JUSTIFICATION_OPPORTUNITYView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: f32
  get expansionMinimum(): number {
    return this.view.getFloat32(0, true);
  }

  // 0x04: f32
  get expansionMaximum(): number {
    return this.view.getFloat32(4, true);
  }

  // 0x08: f32
  get compressionMaximum(): number {
    return this.view.getFloat32(8, true);
  }

  // 0x0c: u32
  get _bitfield(): number {
    return this.view.getUint32(12, true);
  }

  // 0x00: f32
  set expansionMinimum(value: number) {
    this.view.setFloat32(0, value, true);
  }

  // 0x04: f32
  set expansionMaximum(value: number) {
    this.view.setFloat32(4, value, true);
  }

  // 0x08: f32
  set compressionMaximum(value: number) {
    this.view.setFloat32(8, value, true);
  }

  // 0x0c: u32
  set _bitfield(value: number) {
    this.view.setUint32(12, value, true);
  }
}

/**
 * Windows.Win32.Graphics.DirectWrite.DWRITE_TEXT_METRICS1 (size: 16)
 */
export interface DWRITE_TEXT_METRICS1 {
  /** Windows.Win32.Graphics.DirectWrite.DWRITE_TEXT_METRICS */
  Base: Uint8Array | Deno.PointerValue;
  /** f32 */
  heightIncludingTrailingWhitespace: number;
}

export const sizeofDWRITE_TEXT_METRICS1 = 16;

export function allocDWRITE_TEXT_METRICS1(data?: Partial<DWRITE_TEXT_METRICS1>): Uint8Array {
  const buf = new Uint8Array(sizeofDWRITE_TEXT_METRICS1);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.Base !== undefined) view.setBigUint64(0, data.Base === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.Base))), true);
  // 0x08: f32
  if (data?.heightIncludingTrailingWhitespace !== undefined) view.setFloat32(8, Number(data.heightIncludingTrailingWhitespace), true);
  // 0x0c: pad4
  return buf;
}

export class DWRITE_TEXT_METRICS1View {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get Base(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(0, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x08: f32
  get heightIncludingTrailingWhitespace(): number {
    return this.view.getFloat32(8, true);
  }

  // 0x0c: pad4

  // 0x00: pointer
  set Base(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(0, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x08: f32
  set heightIncludingTrailingWhitespace(value: number) {
    this.view.setFloat32(8, value, true);
  }

  // 0x0c: pad4
}

/**
 * Windows.Win32.Graphics.DirectWrite.DWRITE_COLOR_GLYPH_RUN (size: 40)
 */
export interface DWRITE_COLOR_GLYPH_RUN {
  /** Windows.Win32.Graphics.DirectWrite.DWRITE_GLYPH_RUN */
  glyphRun: Uint8Array | Deno.PointerValue;
  /** ptr */
  glyphRunDescription: Deno.PointerValue | Uint8Array;
  /** f32 */
  baselineOriginX: number;
  /** f32 */
  baselineOriginY: number;
  /** Windows.Win32.Graphics.DirectWrite.DWRITE_COLOR_F */
  runColor: Uint8Array | Deno.PointerValue;
  /** u16 */
  paletteIndex: number;
}

export const sizeofDWRITE_COLOR_GLYPH_RUN = 40;

export function allocDWRITE_COLOR_GLYPH_RUN(data?: Partial<DWRITE_COLOR_GLYPH_RUN>): Uint8Array {
  const buf = new Uint8Array(sizeofDWRITE_COLOR_GLYPH_RUN);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.glyphRun !== undefined) view.setBigUint64(0, data.glyphRun === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.glyphRun))), true);
  // 0x08: pointer
  if (data?.glyphRunDescription !== undefined) view.setBigUint64(8, data.glyphRunDescription === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.glyphRunDescription))), true);
  // 0x10: f32
  if (data?.baselineOriginX !== undefined) view.setFloat32(16, Number(data.baselineOriginX), true);
  // 0x14: f32
  if (data?.baselineOriginY !== undefined) view.setFloat32(20, Number(data.baselineOriginY), true);
  // 0x18: pointer
  if (data?.runColor !== undefined) view.setBigUint64(24, data.runColor === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.runColor))), true);
  // 0x20: u16
  if (data?.paletteIndex !== undefined) view.setUint16(32, Number(data.paletteIndex), true);
  // 0x22: pad6
  return buf;
}

export class DWRITE_COLOR_GLYPH_RUNView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get glyphRun(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(0, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x08: pointer
  get glyphRunDescription(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x10: f32
  get baselineOriginX(): number {
    return this.view.getFloat32(16, true);
  }

  // 0x14: f32
  get baselineOriginY(): number {
    return this.view.getFloat32(20, true);
  }

  // 0x18: pointer
  get runColor(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(24, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x20: u16
  get paletteIndex(): number {
    return this.view.getUint16(32, true);
  }

  // 0x22: pad6

  // 0x00: pointer
  set glyphRun(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(0, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x08: pointer
  set glyphRunDescription(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x10: f32
  set baselineOriginX(value: number) {
    this.view.setFloat32(16, value, true);
  }

  // 0x14: f32
  set baselineOriginY(value: number) {
    this.view.setFloat32(20, value, true);
  }

  // 0x18: pointer
  set runColor(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(24, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x20: u16
  set paletteIndex(value: number) {
    this.view.setUint16(32, value, true);
  }

  // 0x22: pad6
}

/**
 * Windows.Win32.Graphics.DirectWrite.DWRITE_FONT_PROPERTY (size: 24)
 */
export interface DWRITE_FONT_PROPERTY {
  /** Windows.Win32.Graphics.DirectWrite.DWRITE_FONT_PROPERTY_ID */
  propertyId: DWRITE_FONT_PROPERTY_ID;
  /** Windows.Win32.Foundation.PWSTR */
  propertyValue: string | null | Uint8Array | Uint16Array;
  /** Windows.Win32.Foundation.PWSTR */
  localeName: string | null | Uint8Array | Uint16Array;
}

export const sizeofDWRITE_FONT_PROPERTY = 24;

export function allocDWRITE_FONT_PROPERTY(data?: Partial<DWRITE_FONT_PROPERTY>): Uint8Array {
  const buf = new Uint8Array(sizeofDWRITE_FONT_PROPERTY);
  const view = new DataView(buf.buffer);
  // 0x00: i32
  if (data?.propertyId !== undefined) view.setInt32(0, Number(data.propertyId), true);
  // 0x04: pad4
  // 0x08: buffer
  if (data?.propertyValue !== undefined) {
    (buf as any)._f8 = util.pwstrToFfi(data.propertyValue);
    view.setBigUint64(8, (buf as any)._f8 === null ? 0n : BigInt(Deno.UnsafePointer.value(Deno.UnsafePointer.of((buf as any)._f8))), true);
  }
  // 0x10: buffer
  if (data?.localeName !== undefined) {
    (buf as any)._f16 = util.pwstrToFfi(data.localeName);
    view.setBigUint64(16, (buf as any)._f16 === null ? 0n : BigInt(Deno.UnsafePointer.value(Deno.UnsafePointer.of((buf as any)._f16))), true);
  }
  return buf;
}

export class DWRITE_FONT_PROPERTYView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: i32
  get propertyId(): number {
    return this.view.getInt32(0, true);
  }

  // 0x04: pad4

  // 0x08: buffer
  get propertyValue(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x10: buffer
  get localeName(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(16, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: i32
  set propertyId(value: number) {
    this.view.setInt32(0, value, true);
  }

  // 0x04: pad4

  // 0x08: buffer
  set propertyValue(value: Uint8Array | Deno.PointerValue) {
    (this.buf as any)._f8 = value;
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer((this.buf as any)._f8))), true);
  }

  // 0x10: buffer
  set localeName(value: Uint8Array | Deno.PointerValue) {
    (this.buf as any)._f16 = value;
    this.view.setBigUint64(16, BigInt(Deno.UnsafePointer.value(util.toPointer((this.buf as any)._f16))), true);
  }
}

/**
 * Windows.Win32.Graphics.DirectWrite.DWRITE_LINE_METRICS1 (size: 16)
 */
export interface DWRITE_LINE_METRICS1 {
  /** Windows.Win32.Graphics.DirectWrite.DWRITE_LINE_METRICS */
  Base: Uint8Array | Deno.PointerValue;
  /** f32 */
  leadingBefore: number;
  /** f32 */
  leadingAfter: number;
}

export const sizeofDWRITE_LINE_METRICS1 = 16;

export function allocDWRITE_LINE_METRICS1(data?: Partial<DWRITE_LINE_METRICS1>): Uint8Array {
  const buf = new Uint8Array(sizeofDWRITE_LINE_METRICS1);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.Base !== undefined) view.setBigUint64(0, data.Base === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.Base))), true);
  // 0x08: f32
  if (data?.leadingBefore !== undefined) view.setFloat32(8, Number(data.leadingBefore), true);
  // 0x0c: f32
  if (data?.leadingAfter !== undefined) view.setFloat32(12, Number(data.leadingAfter), true);
  return buf;
}

export class DWRITE_LINE_METRICS1View {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get Base(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(0, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x08: f32
  get leadingBefore(): number {
    return this.view.getFloat32(8, true);
  }

  // 0x0c: f32
  get leadingAfter(): number {
    return this.view.getFloat32(12, true);
  }

  // 0x00: pointer
  set Base(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(0, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x08: f32
  set leadingBefore(value: number) {
    this.view.setFloat32(8, value, true);
  }

  // 0x0c: f32
  set leadingAfter(value: number) {
    this.view.setFloat32(12, value, true);
  }
}

/**
 * Windows.Win32.Graphics.DirectWrite.DWRITE_LINE_SPACING (size: 24)
 */
export interface DWRITE_LINE_SPACING {
  /** Windows.Win32.Graphics.DirectWrite.DWRITE_LINE_SPACING_METHOD */
  method: DWRITE_LINE_SPACING_METHOD;
  /** f32 */
  height: number;
  /** f32 */
  baseline: number;
  /** f32 */
  leadingBefore: number;
  /** Windows.Win32.Graphics.DirectWrite.DWRITE_FONT_LINE_GAP_USAGE */
  fontLineGapUsage: DWRITE_FONT_LINE_GAP_USAGE;
}

export const sizeofDWRITE_LINE_SPACING = 24;

export function allocDWRITE_LINE_SPACING(data?: Partial<DWRITE_LINE_SPACING>): Uint8Array {
  const buf = new Uint8Array(sizeofDWRITE_LINE_SPACING);
  const view = new DataView(buf.buffer);
  // 0x00: i32
  if (data?.method !== undefined) view.setInt32(0, Number(data.method), true);
  // 0x04: f32
  if (data?.height !== undefined) view.setFloat32(4, Number(data.height), true);
  // 0x08: f32
  if (data?.baseline !== undefined) view.setFloat32(8, Number(data.baseline), true);
  // 0x0c: f32
  if (data?.leadingBefore !== undefined) view.setFloat32(12, Number(data.leadingBefore), true);
  // 0x10: i32
  if (data?.fontLineGapUsage !== undefined) view.setInt32(16, Number(data.fontLineGapUsage), true);
  // 0x14: pad4
  return buf;
}

export class DWRITE_LINE_SPACINGView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: i32
  get method(): number {
    return this.view.getInt32(0, true);
  }

  // 0x04: f32
  get height(): number {
    return this.view.getFloat32(4, true);
  }

  // 0x08: f32
  get baseline(): number {
    return this.view.getFloat32(8, true);
  }

  // 0x0c: f32
  get leadingBefore(): number {
    return this.view.getFloat32(12, true);
  }

  // 0x10: i32
  get fontLineGapUsage(): number {
    return this.view.getInt32(16, true);
  }

  // 0x14: pad4

  // 0x00: i32
  set method(value: number) {
    this.view.setInt32(0, value, true);
  }

  // 0x04: f32
  set height(value: number) {
    this.view.setFloat32(4, value, true);
  }

  // 0x08: f32
  set baseline(value: number) {
    this.view.setFloat32(8, value, true);
  }

  // 0x0c: f32
  set leadingBefore(value: number) {
    this.view.setFloat32(12, value, true);
  }

  // 0x10: i32
  set fontLineGapUsage(value: number) {
    this.view.setInt32(16, value, true);
  }

  // 0x14: pad4
}

/**
 * Windows.Win32.Graphics.DirectWrite.DWRITE_COLOR_GLYPH_RUN1 (size: 16)
 */
export interface DWRITE_COLOR_GLYPH_RUN1 {
  /** Windows.Win32.Graphics.DirectWrite.DWRITE_COLOR_GLYPH_RUN */
  Base: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.Graphics.DirectWrite.DWRITE_GLYPH_IMAGE_FORMATS */
  glyphImageFormat: DWRITE_GLYPH_IMAGE_FORMATS;
  /** Windows.Win32.Graphics.DirectWrite.DWRITE_MEASURING_MODE */
  measuringMode: DWRITE_MEASURING_MODE;
}

export const sizeofDWRITE_COLOR_GLYPH_RUN1 = 16;

export function allocDWRITE_COLOR_GLYPH_RUN1(data?: Partial<DWRITE_COLOR_GLYPH_RUN1>): Uint8Array {
  const buf = new Uint8Array(sizeofDWRITE_COLOR_GLYPH_RUN1);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.Base !== undefined) view.setBigUint64(0, data.Base === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.Base))), true);
  // 0x08: u32
  if (data?.glyphImageFormat !== undefined) view.setUint32(8, Number(data.glyphImageFormat), true);
  // 0x0c: i32
  if (data?.measuringMode !== undefined) view.setInt32(12, Number(data.measuringMode), true);
  return buf;
}

export class DWRITE_COLOR_GLYPH_RUN1View {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get Base(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(0, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x08: u32
  get glyphImageFormat(): number {
    return this.view.getUint32(8, true);
  }

  // 0x0c: i32
  get measuringMode(): number {
    return this.view.getInt32(12, true);
  }

  // 0x00: pointer
  set Base(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(0, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x08: u32
  set glyphImageFormat(value: number) {
    this.view.setUint32(8, value, true);
  }

  // 0x0c: i32
  set measuringMode(value: number) {
    this.view.setInt32(12, value, true);
  }
}

/**
 * Windows.Win32.Graphics.Direct2D.Common.D2D_SIZE_U (size: 8)
 */
export interface D2D_SIZE_U {
  /** u32 */
  width: number;
  /** u32 */
  height: number;
}

export const sizeofD2D_SIZE_U = 8;

export function allocD2D_SIZE_U(data?: Partial<D2D_SIZE_U>): Uint8Array {
  const buf = new Uint8Array(sizeofD2D_SIZE_U);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.width !== undefined) view.setUint32(0, Number(data.width), true);
  // 0x04: u32
  if (data?.height !== undefined) view.setUint32(4, Number(data.height), true);
  return buf;
}

export class D2D_SIZE_UView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get width(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: u32
  get height(): number {
    return this.view.getUint32(4, true);
  }

  // 0x00: u32
  set width(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: u32
  set height(value: number) {
    this.view.setUint32(4, value, true);
  }
}

/**
 * Windows.Win32.Foundation.POINT (size: 8)
 */
export interface POINT {
  /** i32 */
  x: number;
  /** i32 */
  y: number;
}

export const sizeofPOINT = 8;

export function allocPOINT(data?: Partial<POINT>): Uint8Array {
  const buf = new Uint8Array(sizeofPOINT);
  const view = new DataView(buf.buffer);
  // 0x00: i32
  if (data?.x !== undefined) view.setInt32(0, Number(data.x), true);
  // 0x04: i32
  if (data?.y !== undefined) view.setInt32(4, Number(data.y), true);
  return buf;
}

export class POINTView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: i32
  get x(): number {
    return this.view.getInt32(0, true);
  }

  // 0x04: i32
  get y(): number {
    return this.view.getInt32(4, true);
  }

  // 0x00: i32
  set x(value: number) {
    this.view.setInt32(0, value, true);
  }

  // 0x04: i32
  set y(value: number) {
    this.view.setInt32(4, value, true);
  }
}

/**
 * Windows.Win32.Graphics.DirectWrite.DWRITE_GLYPH_IMAGE_DATA (size: 64)
 */
export interface DWRITE_GLYPH_IMAGE_DATA {
  /** ptr */
  imageData: Deno.PointerValue | Uint8Array;
  /** u32 */
  imageDataSize: number;
  /** u32 */
  uniqueDataId: number;
  /** u32 */
  pixelsPerEm: number;
  /** Windows.Win32.Graphics.Direct2D.Common.D2D_SIZE_U */
  pixelSize: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.Foundation.POINT */
  horizontalLeftOrigin: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.Foundation.POINT */
  horizontalRightOrigin: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.Foundation.POINT */
  verticalTopOrigin: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.Foundation.POINT */
  verticalBottomOrigin: Uint8Array | Deno.PointerValue;
}

export const sizeofDWRITE_GLYPH_IMAGE_DATA = 64;

export function allocDWRITE_GLYPH_IMAGE_DATA(data?: Partial<DWRITE_GLYPH_IMAGE_DATA>): Uint8Array {
  const buf = new Uint8Array(sizeofDWRITE_GLYPH_IMAGE_DATA);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.imageData !== undefined) view.setBigUint64(0, data.imageData === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.imageData))), true);
  // 0x08: u32
  if (data?.imageDataSize !== undefined) view.setUint32(8, Number(data.imageDataSize), true);
  // 0x0c: u32
  if (data?.uniqueDataId !== undefined) view.setUint32(12, Number(data.uniqueDataId), true);
  // 0x10: u32
  if (data?.pixelsPerEm !== undefined) view.setUint32(16, Number(data.pixelsPerEm), true);
  // 0x14: pad4
  // 0x18: pointer
  if (data?.pixelSize !== undefined) view.setBigUint64(24, data.pixelSize === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.pixelSize))), true);
  // 0x20: pointer
  if (data?.horizontalLeftOrigin !== undefined) view.setBigUint64(32, data.horizontalLeftOrigin === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.horizontalLeftOrigin))), true);
  // 0x28: pointer
  if (data?.horizontalRightOrigin !== undefined) view.setBigUint64(40, data.horizontalRightOrigin === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.horizontalRightOrigin))), true);
  // 0x30: pointer
  if (data?.verticalTopOrigin !== undefined) view.setBigUint64(48, data.verticalTopOrigin === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.verticalTopOrigin))), true);
  // 0x38: pointer
  if (data?.verticalBottomOrigin !== undefined) view.setBigUint64(56, data.verticalBottomOrigin === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.verticalBottomOrigin))), true);
  return buf;
}

export class DWRITE_GLYPH_IMAGE_DATAView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get imageData(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(0, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x08: u32
  get imageDataSize(): number {
    return this.view.getUint32(8, true);
  }

  // 0x0c: u32
  get uniqueDataId(): number {
    return this.view.getUint32(12, true);
  }

  // 0x10: u32
  get pixelsPerEm(): number {
    return this.view.getUint32(16, true);
  }

  // 0x14: pad4

  // 0x18: pointer
  get pixelSize(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(24, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x20: pointer
  get horizontalLeftOrigin(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(32, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x28: pointer
  get horizontalRightOrigin(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(40, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x30: pointer
  get verticalTopOrigin(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(48, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x38: pointer
  get verticalBottomOrigin(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(56, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: pointer
  set imageData(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(0, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x08: u32
  set imageDataSize(value: number) {
    this.view.setUint32(8, value, true);
  }

  // 0x0c: u32
  set uniqueDataId(value: number) {
    this.view.setUint32(12, value, true);
  }

  // 0x10: u32
  set pixelsPerEm(value: number) {
    this.view.setUint32(16, value, true);
  }

  // 0x14: pad4

  // 0x18: pointer
  set pixelSize(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(24, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x20: pointer
  set horizontalLeftOrigin(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(32, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x28: pointer
  set horizontalRightOrigin(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(40, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x30: pointer
  set verticalTopOrigin(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(48, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x38: pointer
  set verticalBottomOrigin(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(56, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.Graphics.DirectWrite.DWRITE_FILE_FRAGMENT (size: 16)
 */
export interface DWRITE_FILE_FRAGMENT {
  /** u64 */
  fileOffset: Deno.PointerValue;
  /** u64 */
  fragmentSize: Deno.PointerValue;
}

export const sizeofDWRITE_FILE_FRAGMENT = 16;

export function allocDWRITE_FILE_FRAGMENT(data?: Partial<DWRITE_FILE_FRAGMENT>): Uint8Array {
  const buf = new Uint8Array(sizeofDWRITE_FILE_FRAGMENT);
  const view = new DataView(buf.buffer);
  // 0x00: u64
  if (data?.fileOffset !== undefined) view.setBigUint64(0, BigInt(data.fileOffset), true);
  // 0x08: u64
  if (data?.fragmentSize !== undefined) view.setBigUint64(8, BigInt(data.fragmentSize), true);
  return buf;
}

export class DWRITE_FILE_FRAGMENTView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u64
  get fileOffset(): Deno.PointerValue {
    return Number(this.view.getBigUint64(0, true));
  }

  // 0x08: u64
  get fragmentSize(): Deno.PointerValue {
    return Number(this.view.getBigUint64(8, true));
  }

  // 0x00: u64
  set fileOffset(value: Deno.PointerValue) {
    this.view.setBigUint64(0, BigInt(value), true);
  }

  // 0x08: u64
  set fragmentSize(value: Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(value), true);
  }
}

/**
 * Windows.Win32.Graphics.DirectWrite.DWRITE_FONT_AXIS_VALUE (size: 8)
 */
export interface DWRITE_FONT_AXIS_VALUE {
  /** Windows.Win32.Graphics.DirectWrite.DWRITE_FONT_AXIS_TAG */
  axisTag: DWRITE_FONT_AXIS_TAG;
  /** f32 */
  value: number;
}

export const sizeofDWRITE_FONT_AXIS_VALUE = 8;

export function allocDWRITE_FONT_AXIS_VALUE(data?: Partial<DWRITE_FONT_AXIS_VALUE>): Uint8Array {
  const buf = new Uint8Array(sizeofDWRITE_FONT_AXIS_VALUE);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.axisTag !== undefined) view.setUint32(0, Number(data.axisTag), true);
  // 0x04: f32
  if (data?.value !== undefined) view.setFloat32(4, Number(data.value), true);
  return buf;
}

export class DWRITE_FONT_AXIS_VALUEView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get axisTag(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: f32
  get value(): number {
    return this.view.getFloat32(4, true);
  }

  // 0x00: u32
  set axisTag(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: f32
  set value(value: number) {
    this.view.setFloat32(4, value, true);
  }
}

/**
 * Windows.Win32.Graphics.DirectWrite.DWRITE_FONT_AXIS_RANGE (size: 16)
 */
export interface DWRITE_FONT_AXIS_RANGE {
  /** Windows.Win32.Graphics.DirectWrite.DWRITE_FONT_AXIS_TAG */
  axisTag: DWRITE_FONT_AXIS_TAG;
  /** f32 */
  minValue: number;
  /** f32 */
  maxValue: number;
}

export const sizeofDWRITE_FONT_AXIS_RANGE = 16;

export function allocDWRITE_FONT_AXIS_RANGE(data?: Partial<DWRITE_FONT_AXIS_RANGE>): Uint8Array {
  const buf = new Uint8Array(sizeofDWRITE_FONT_AXIS_RANGE);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.axisTag !== undefined) view.setUint32(0, Number(data.axisTag), true);
  // 0x04: f32
  if (data?.minValue !== undefined) view.setFloat32(4, Number(data.minValue), true);
  // 0x08: f32
  if (data?.maxValue !== undefined) view.setFloat32(8, Number(data.maxValue), true);
  // 0x0c: pad4
  return buf;
}

export class DWRITE_FONT_AXIS_RANGEView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get axisTag(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: f32
  get minValue(): number {
    return this.view.getFloat32(4, true);
  }

  // 0x08: f32
  get maxValue(): number {
    return this.view.getFloat32(8, true);
  }

  // 0x0c: pad4

  // 0x00: u32
  set axisTag(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: f32
  set minValue(value: number) {
    this.view.setFloat32(4, value, true);
  }

  // 0x08: f32
  set maxValue(value: number) {
    this.view.setFloat32(8, value, true);
  }

  // 0x0c: pad4
}

export type HRESULT = number;

// Native Libraries

try {
  var libDWrite_dll = Deno.dlopen("DWrite.dll", {
    DWriteCreateFactory: {
      parameters: ["i32", "pointer", "pointer"],
      result: "pointer",
    },
  }).symbols;
} catch(e) { /* ignore */ }

// Symbols

export function DWriteCreateFactory(
  factoryType: DWRITE_FACTORY_TYPE /* Windows.Win32.Graphics.DirectWrite.DWRITE_FACTORY_TYPE */,
  iid: Deno.PointerValue | Uint8Array /* ptr */,
  factory: Deno.PointerValue | Uint8Array /* ptr */,
): Deno.PointerValue /* Windows.Win32.Foundation.HRESULT */ {
  return libDWrite_dll.DWriteCreateFactory(factoryType, util.toPointer(iid), util.toPointer(factory));
}

