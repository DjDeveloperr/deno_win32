/// Auto-generated by Deno Win32: Windows.Win32.Media.Speech.Apis

import * as util from "../../util.ts";

// Enums
export type SPDATAKEYLOCATION = number;
export type SPSTREAMFORMAT = number;
export type SPEVENTLPARAMTYPE = number;
export type SPEVENTENUM = number;
export type SPINTERFERENCE = number;
export type SPENDSRSTREAMFLAGS = number;
export type SPVFEATURE = number;
export type SPVISEMES = number;
export type SPFILEMODE = number;
export type SPAUDIOSTATE = number;
export type SPDISPLAYATTRIBUTES = number;
export type SPPHRASEPROPERTYUNIONTYPE = number;
export type SPSEMANTICFORMAT = number;
export type SPVALUETYPE = number;
export type SPPHRASERNG = number;
export type SPRECOEVENTFLAGS = number;
export type SPPARTOFSPEECH = number;
export type SPLEXICONTYPE = number;
export type SPWORDTYPE = number;
export type SPPRONUNCIATIONFLAGS = number;
export type SPSHORTCUTTYPE = number;
export type SPVACTIONS = number;
export type SPRUNSTATE = number;
export type SPVLIMITS = number;
export type SPVPRIORITY = number;
export type SPEAKFLAGS = number;
export type SPXMLRESULTOPTIONS = number;
export type SPCOMMITFLAGS = number;
export type SPWORDPRONOUNCEABLE = number;
export type SPGRAMMARSTATE = number;
export type SPCONTEXTSTATE = number;
export type SPRULESTATE = number;
export type SPGRAMMARWORDTYPE = number;
export type SPCFGRULEATTRIBUTES = number;
export type SPLOADOPTIONS = number;
export type SPMATCHINGMODE = number;
export type PHONETICALPHABET = number;
export type SPBOOKMARKOPTIONS = number;
export type SPAUDIOOPTIONS = number;
export type SPGRAMMAROPTIONS = number;
export type SPADAPTATIONSETTINGS = number;
export type SPADAPTATIONRELEVANCE = number;
export type SPSTREAMFORMATTYPE = number;
export type SPRECOSTATE = number;
export type DISPID_SpeechDataKey = number;
export type DISPID_SpeechObjectToken = number;
export type SpeechDataKeyLocation = number;
export type SpeechTokenContext = number;
export type SpeechTokenShellFolder = number;
export type DISPID_SpeechObjectTokens = number;
export type DISPID_SpeechObjectTokenCategory = number;
export type SpeechAudioFormatType = number;
export type DISPID_SpeechAudioFormat = number;
export type DISPID_SpeechBaseStream = number;
export type SpeechStreamSeekPositionType = number;
export type DISPID_SpeechAudio = number;
export type SpeechAudioState = number;
export type DISPID_SpeechMMSysAudio = number;
export type DISPID_SpeechFileStream = number;
export type SpeechStreamFileMode = number;
export type DISPID_SpeechCustomStream = number;
export type DISPID_SpeechMemoryStream = number;
export type DISPID_SpeechAudioStatus = number;
export type DISPID_SpeechAudioBufferInfo = number;
export type DISPID_SpeechWaveFormatEx = number;
export type DISPID_SpeechVoice = number;
export type SpeechVoicePriority = number;
export type SpeechVoiceSpeakFlags = number;
export type SpeechVoiceEvents = number;
export type DISPID_SpeechVoiceStatus = number;
export type SpeechRunState = number;
export type SpeechVisemeType = number;
export type SpeechVisemeFeature = number;
export type DISPID_SpeechVoiceEvent = number;
export type DISPID_SpeechRecognizer = number;
export type SpeechRecognizerState = number;
export type SpeechDisplayAttributes = number;
export type SpeechFormatType = number;
export type SpeechEmulationCompareFlags = number;
export type DISPID_SpeechRecognizerStatus = number;
export type DISPID_SpeechRecoContext = number;
export type SpeechRetainedAudioOptions = number;
export type SpeechBookmarkOptions = number;
export type SpeechInterference = number;
export type SpeechRecoEvents = number;
export type SpeechRecoContextState = number;
export type DISPIDSPRG = number;
export type SpeechLoadOption = number;
export type SpeechWordPronounceable = number;
export type SpeechGrammarState = number;
export type SpeechRuleState = number;
export type SpeechRuleAttributes = number;
export type SpeechGrammarWordType = number;
export type DISPID_SpeechRecoContextEvents = number;
export type SpeechRecognitionType = number;
export type DISPID_SpeechGrammarRule = number;
export type DISPID_SpeechGrammarRules = number;
export type DISPID_SpeechGrammarRuleState = number;
export type SpeechSpecialTransitionType = number;
export type DISPID_SpeechGrammarRuleStateTransitions = number;
export type DISPID_SpeechGrammarRuleStateTransition = number;
export type SpeechGrammarRuleStateTransitionType = number;
export type DISPIDSPTSI = number;
export type DISPID_SpeechRecoResult = number;
export type SpeechDiscardType = number;
export type DISPID_SpeechXMLRecoResult = number;
export type DISPID_SpeechRecoResult2 = number;
export type DISPID_SpeechPhraseBuilder = number;
export type DISPID_SpeechRecoResultTimes = number;
export type DISPID_SpeechPhraseAlternate = number;
export type DISPID_SpeechPhraseAlternates = number;
export type DISPID_SpeechPhraseInfo = number;
export type DISPID_SpeechPhraseElement = number;
export type SpeechEngineConfidence = number;
export type DISPID_SpeechPhraseElements = number;
export type DISPID_SpeechPhraseReplacement = number;
export type DISPID_SpeechPhraseReplacements = number;
export type DISPID_SpeechPhraseProperty = number;
export type DISPID_SpeechPhraseProperties = number;
export type DISPID_SpeechPhraseRule = number;
export type DISPID_SpeechPhraseRules = number;
export type DISPID_SpeechLexicon = number;
export type SpeechLexiconType = number;
export type SpeechPartOfSpeech = number;
export type DISPID_SpeechLexiconWords = number;
export type SpeechWordType = number;
export type DISPID_SpeechLexiconWord = number;
export type DISPID_SpeechLexiconProns = number;
export type DISPID_SpeechLexiconPronunciation = number;
export type DISPID_SpeechPhoneConverter = number;

// Constants
export const SPDUI_EngineProperties = `EngineProperties`;
export const SPDUI_AddRemoveWord = `AddRemoveWord`;
export const SPDUI_UserTraining = `UserTraining`;
export const SPDUI_MicTraining = `MicTraining`;
export const SPDUI_RecoProfileProperties = `RecoProfileProperties`;
export const SPDUI_AudioProperties = `AudioProperties`;
export const SPDUI_AudioVolume = `AudioVolume`;
export const SPDUI_UserEnrollment = `UserEnrollment`;
export const SPDUI_ShareData = `ShareData`;
export const SPDUI_Tutorial = `Tutorial`;
export const SPREG_USER_ROOT = `HKEY_CURRENT_USER\SOFTWARE\Microsoft\Speech`;
export const SPREG_LOCAL_MACHINE_ROOT = `HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\Speech`;
export const SPCAT_AUDIOOUT = `HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\Speech\AudioOutput`;
export const SPCAT_AUDIOIN = `HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\Speech\AudioInput`;
export const SPCAT_VOICES = `HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\Speech\Voices`;
export const SPCAT_RECOGNIZERS = `HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\Speech\Recognizers`;
export const SPCAT_APPLEXICONS = `HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\Speech\AppLexicons`;
export const SPCAT_PHONECONVERTERS = `HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\Speech\PhoneConverters`;
export const SPCAT_TEXTNORMALIZERS = `HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\Speech\TextNormalizers`;
export const SPCAT_RECOPROFILES = `HKEY_CURRENT_USER\SOFTWARE\Microsoft\Speech\RecoProfiles`;
export const SPMMSYS_AUDIO_IN_TOKEN_ID = `HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\Speech\AudioInput\TokenEnums\MMAudioIn\`;
export const SPMMSYS_AUDIO_OUT_TOKEN_ID = `HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\Speech\AudioOutput\TokenEnums\MMAudioOut\`;
export const SPCURRENT_USER_LEXICON_TOKEN_ID = `HKEY_CURRENT_USER\SOFTWARE\Microsoft\Speech\CurrentUserLexicon`;
export const SPCURRENT_USER_SHORTCUT_TOKEN_ID = `HKEY_CURRENT_USER\SOFTWARE\Microsoft\Speech\CurrentUserShortcut`;
export const SPTOKENVALUE_CLSID = `CLSID`;
export const SPTOKENKEY_FILES = `Files`;
export const SPTOKENKEY_UI = `UI`;
export const SPTOKENKEY_ATTRIBUTES = `Attributes`;
export const SPTOKENKEY_RETAINEDAUDIO = `SecondsPerRetainedAudioEvent`;
export const SPTOKENKEY_AUDIO_LATENCY_WARNING = `LatencyWarningThreshold`;
export const SPTOKENKEY_AUDIO_LATENCY_TRUNCATE = `LatencyTruncateThreshold`;
export const SPTOKENKEY_AUDIO_LATENCY_UPDATE_INTERVAL = `LatencyUpdateInterval`;
export const SPVOICECATEGORY_TTSRATE = `DefaultTTSRate`;
export const SPPROP_RESOURCE_USAGE = `ResourceUsage`;
export const SPPROP_HIGH_CONFIDENCE_THRESHOLD = `HighConfidenceThreshold`;
export const SPPROP_NORMAL_CONFIDENCE_THRESHOLD = `NormalConfidenceThreshold`;
export const SPPROP_LOW_CONFIDENCE_THRESHOLD = `LowConfidenceThreshold`;
export const SPPROP_RESPONSE_SPEED = `ResponseSpeed`;
export const SPPROP_COMPLEX_RESPONSE_SPEED = `ComplexResponseSpeed`;
export const SPPROP_ADAPTATION_ON = `AdaptationOn`;
export const SPPROP_PERSISTED_BACKGROUND_ADAPTATION = `PersistedBackgroundAdaptation`;
export const SPPROP_PERSISTED_LANGUAGE_MODEL_ADAPTATION = `PersistedLanguageModelAdaptation`;
export const SPPROP_UX_IS_LISTENING = `UXIsListening`;
export const SPTOPIC_SPELLING = `Spelling`;
export const SPWILDCARD = `...`;
export const SPDICTATION = `*`;
export const SPINFDICTATION = `*+`;
export const SPREG_SAFE_USER_TOKENS = `HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\Speech\UserTokens`;
export const SP_LOW_CONFIDENCE = `-1`;
export const SP_NORMAL_CONFIDENCE = 0;
export const DEFAULT_WEIGHT = 1;
export const SP_MAX_WORD_LENGTH = 128;
export const SP_MAX_PRON_LENGTH = 384;
export const SP_EMULATE_RESULT = 1073741824;
export const SP_STREAMPOS_ASAP = 0;
export const SP_STREAMPOS_REALTIME = `-1`;
export const SPRP_NORMAL = 0;
export const SP_MAX_LANGIDS = 20;
export const SPRECOEXTENSION = `RecoExtension`;
export const SPALTERNATESCLSID = `AlternatesCLSID`;
export const SR_LOCALIZED_DESCRIPTION = `Description`;
export const SAPI_ERROR_BASE = 20480;
export const Speech_Default_Weight = 1;
export const Speech_Max_Word_Length = 128;
export const Speech_Max_Pron_Length = 384;
export const Speech_StreamPos_Asap = 0;
export const Speech_StreamPos_RealTime = `-1`;
export const SpeechAllElements = `-1`;
export const SPDKL_DefaultLocation = 0;
export const SPDKL_CurrentUser = 1;
export const SPDKL_LocalMachine = 2;
export const SPDKL_CurrentConfig = 5;
export const SPSF_Default = `-1`;
export const SPSF_NoAssignedFormat = 0;
export const SPSF_Text = 1;
export const SPSF_NonStandardFormat = 2;
export const SPSF_ExtendedAudioFormat = 3;
export const SPSF_8kHz8BitMono = 4;
export const SPSF_8kHz8BitStereo = 5;
export const SPSF_8kHz16BitMono = 6;
export const SPSF_8kHz16BitStereo = 7;
export const SPSF_11kHz8BitMono = 8;
export const SPSF_11kHz8BitStereo = 9;
export const SPSF_11kHz16BitMono = 10;
export const SPSF_11kHz16BitStereo = 11;
export const SPSF_12kHz8BitMono = 12;
export const SPSF_12kHz8BitStereo = 13;
export const SPSF_12kHz16BitMono = 14;
export const SPSF_12kHz16BitStereo = 15;
export const SPSF_16kHz8BitMono = 16;
export const SPSF_16kHz8BitStereo = 17;
export const SPSF_16kHz16BitMono = 18;
export const SPSF_16kHz16BitStereo = 19;
export const SPSF_22kHz8BitMono = 20;
export const SPSF_22kHz8BitStereo = 21;
export const SPSF_22kHz16BitMono = 22;
export const SPSF_22kHz16BitStereo = 23;
export const SPSF_24kHz8BitMono = 24;
export const SPSF_24kHz8BitStereo = 25;
export const SPSF_24kHz16BitMono = 26;
export const SPSF_24kHz16BitStereo = 27;
export const SPSF_32kHz8BitMono = 28;
export const SPSF_32kHz8BitStereo = 29;
export const SPSF_32kHz16BitMono = 30;
export const SPSF_32kHz16BitStereo = 31;
export const SPSF_44kHz8BitMono = 32;
export const SPSF_44kHz8BitStereo = 33;
export const SPSF_44kHz16BitMono = 34;
export const SPSF_44kHz16BitStereo = 35;
export const SPSF_48kHz8BitMono = 36;
export const SPSF_48kHz8BitStereo = 37;
export const SPSF_48kHz16BitMono = 38;
export const SPSF_48kHz16BitStereo = 39;
export const SPSF_TrueSpeech_8kHz1BitMono = 40;
export const SPSF_CCITT_ALaw_8kHzMono = 41;
export const SPSF_CCITT_ALaw_8kHzStereo = 42;
export const SPSF_CCITT_ALaw_11kHzMono = 43;
export const SPSF_CCITT_ALaw_11kHzStereo = 44;
export const SPSF_CCITT_ALaw_22kHzMono = 45;
export const SPSF_CCITT_ALaw_22kHzStereo = 46;
export const SPSF_CCITT_ALaw_44kHzMono = 47;
export const SPSF_CCITT_ALaw_44kHzStereo = 48;
export const SPSF_CCITT_uLaw_8kHzMono = 49;
export const SPSF_CCITT_uLaw_8kHzStereo = 50;
export const SPSF_CCITT_uLaw_11kHzMono = 51;
export const SPSF_CCITT_uLaw_11kHzStereo = 52;
export const SPSF_CCITT_uLaw_22kHzMono = 53;
export const SPSF_CCITT_uLaw_22kHzStereo = 54;
export const SPSF_CCITT_uLaw_44kHzMono = 55;
export const SPSF_CCITT_uLaw_44kHzStereo = 56;
export const SPSF_ADPCM_8kHzMono = 57;
export const SPSF_ADPCM_8kHzStereo = 58;
export const SPSF_ADPCM_11kHzMono = 59;
export const SPSF_ADPCM_11kHzStereo = 60;
export const SPSF_ADPCM_22kHzMono = 61;
export const SPSF_ADPCM_22kHzStereo = 62;
export const SPSF_ADPCM_44kHzMono = 63;
export const SPSF_ADPCM_44kHzStereo = 64;
export const SPSF_GSM610_8kHzMono = 65;
export const SPSF_GSM610_11kHzMono = 66;
export const SPSF_GSM610_22kHzMono = 67;
export const SPSF_GSM610_44kHzMono = 68;
export const SPSF_NUM_FORMATS = 69;
export const SPET_LPARAM_IS_UNDEFINED = 0;
export const SPET_LPARAM_IS_TOKEN = 1;
export const SPET_LPARAM_IS_OBJECT = 2;
export const SPET_LPARAM_IS_POINTER = 3;
export const SPET_LPARAM_IS_STRING = 4;
export const SPEI_UNDEFINED = 0;
export const SPEI_START_INPUT_STREAM = 1;
export const SPEI_END_INPUT_STREAM = 2;
export const SPEI_VOICE_CHANGE = 3;
export const SPEI_TTS_BOOKMARK = 4;
export const SPEI_WORD_BOUNDARY = 5;
export const SPEI_PHONEME = 6;
export const SPEI_SENTENCE_BOUNDARY = 7;
export const SPEI_VISEME = 8;
export const SPEI_TTS_AUDIO_LEVEL = 9;
export const SPEI_TTS_PRIVATE = 15;
export const SPEI_MIN_TTS = 1;
export const SPEI_MAX_TTS = 15;
export const SPEI_END_SR_STREAM = 34;
export const SPEI_SOUND_START = 35;
export const SPEI_SOUND_END = 36;
export const SPEI_PHRASE_START = 37;
export const SPEI_RECOGNITION = 38;
export const SPEI_HYPOTHESIS = 39;
export const SPEI_SR_BOOKMARK = 40;
export const SPEI_PROPERTY_NUM_CHANGE = 41;
export const SPEI_PROPERTY_STRING_CHANGE = 42;
export const SPEI_FALSE_RECOGNITION = 43;
export const SPEI_INTERFERENCE = 44;
export const SPEI_REQUEST_UI = 45;
export const SPEI_RECO_STATE_CHANGE = 46;
export const SPEI_ADAPTATION = 47;
export const SPEI_START_SR_STREAM = 48;
export const SPEI_RECO_OTHER_CONTEXT = 49;
export const SPEI_SR_AUDIO_LEVEL = 50;
export const SPEI_SR_RETAINEDAUDIO = 51;
export const SPEI_SR_PRIVATE = 52;
export const SPEI_RESERVED4 = 53;
export const SPEI_RESERVED5 = 54;
export const SPEI_RESERVED6 = 55;
export const SPEI_MIN_SR = 34;
export const SPEI_MAX_SR = 55;
export const SPEI_RESERVED1 = 30;
export const SPEI_RESERVED2 = 33;
export const SPEI_RESERVED3 = 63;
export const SPINTERFERENCE_NONE = 0;
export const SPINTERFERENCE_NOISE = 1;
export const SPINTERFERENCE_NOSIGNAL = 2;
export const SPINTERFERENCE_TOOLOUD = 3;
export const SPINTERFERENCE_TOOQUIET = 4;
export const SPINTERFERENCE_TOOFAST = 5;
export const SPINTERFERENCE_TOOSLOW = 6;
export const SPINTERFERENCE_LATENCY_WARNING = 7;
export const SPINTERFERENCE_LATENCY_TRUNCATE_BEGIN = 8;
export const SPINTERFERENCE_LATENCY_TRUNCATE_END = 9;
export const SPESF_NONE = 0;
export const SPESF_STREAM_RELEASED = 1;
export const SPESF_EMULATED = 2;
export const SPVFEATURE_STRESSED = 1;
export const SPVFEATURE_EMPHASIS = 2;
export const SP_VISEME_0 = 0;
export const SP_VISEME_1 = 1;
export const SP_VISEME_2 = 2;
export const SP_VISEME_3 = 3;
export const SP_VISEME_4 = 4;
export const SP_VISEME_5 = 5;
export const SP_VISEME_6 = 6;
export const SP_VISEME_7 = 7;
export const SP_VISEME_8 = 8;
export const SP_VISEME_9 = 9;
export const SP_VISEME_10 = 10;
export const SP_VISEME_11 = 11;
export const SP_VISEME_12 = 12;
export const SP_VISEME_13 = 13;
export const SP_VISEME_14 = 14;
export const SP_VISEME_15 = 15;
export const SP_VISEME_16 = 16;
export const SP_VISEME_17 = 17;
export const SP_VISEME_18 = 18;
export const SP_VISEME_19 = 19;
export const SP_VISEME_20 = 20;
export const SP_VISEME_21 = 21;
export const SPFM_OPEN_READONLY = 0;
export const SPFM_OPEN_READWRITE = 1;
export const SPFM_CREATE = 2;
export const SPFM_CREATE_ALWAYS = 3;
export const SPFM_NUM_MODES = 4;
export const SPAS_CLOSED = 0;
export const SPAS_STOP = 1;
export const SPAS_PAUSE = 2;
export const SPAS_RUN = 3;
export const SPAF_ONE_TRAILING_SPACE = 2;
export const SPAF_TWO_TRAILING_SPACES = 4;
export const SPAF_CONSUME_LEADING_SPACES = 8;
export const SPAF_BUFFER_POSITION = 16;
export const SPAF_ALL = 31;
export const SPAF_USER_SPECIFIED = 128;
export const SPPPUT_UNUSED = 0;
export const SPPPUT_ARRAY_INDEX = 1;
export const SPSMF_SAPI_PROPERTIES = 0;
export const SPSMF_SRGS_SEMANTICINTERPRETATION_MS = 1;
export const SPSMF_SRGS_SAPIPROPERTIES = 2;
export const SPSMF_UPS = 4;
export const SPSMF_SRGS_SEMANTICINTERPRETATION_W3C = 8;
export const SPDF_PROPERTY = 1;
export const SPDF_REPLACEMENT = 2;
export const SPDF_RULE = 4;
export const SPDF_DISPLAYTEXT = 8;
export const SPDF_LEXICALFORM = 16;
export const SPDF_PRONUNCIATION = 32;
export const SPDF_AUDIO = 64;
export const SPDF_ALTERNATES = 128;
export const SPDF_ALL = 255;
export const SPPR_ALL_ELEMENTS = `-1`;
export const SPREF_AutoPause = 1;
export const SPREF_Emulated = 2;
export const SPREF_SMLTimeout = 4;
export const SPREF_ExtendableParse = 8;
export const SPREF_ReSent = 16;
export const SPREF_Hypothesis = 32;
export const SPREF_FalseRecognition = 64;
export const SPPS_NotOverriden = `-1`;
export const SPPS_Unknown = 0;
export const SPPS_Noun = 4096;
export const SPPS_Verb = 8192;
export const SPPS_Modifier = 12288;
export const SPPS_Function = 16384;
export const SPPS_Interjection = 20480;
export const SPPS_Noncontent = 24576;
export const SPPS_LMA = 28672;
export const SPPS_SuppressWord = 61440;
export const eLEXTYPE_USER = 1;
export const eLEXTYPE_APP = 2;
export const eLEXTYPE_VENDORLEXICON = 4;
export const eLEXTYPE_LETTERTOSOUND = 8;
export const eLEXTYPE_MORPHOLOGY = 16;
export const eLEXTYPE_RESERVED4 = 32;
export const eLEXTYPE_USER_SHORTCUT = 64;
export const eLEXTYPE_RESERVED6 = 128;
export const eLEXTYPE_RESERVED7 = 256;
export const eLEXTYPE_RESERVED8 = 512;
export const eLEXTYPE_RESERVED9 = 1024;
export const eLEXTYPE_RESERVED10 = 2048;
export const eLEXTYPE_PRIVATE1 = 4096;
export const eLEXTYPE_PRIVATE2 = 8192;
export const eLEXTYPE_PRIVATE3 = 16384;
export const eLEXTYPE_PRIVATE4 = 32768;
export const eLEXTYPE_PRIVATE5 = 65536;
export const eLEXTYPE_PRIVATE6 = 131072;
export const eLEXTYPE_PRIVATE7 = 262144;
export const eLEXTYPE_PRIVATE8 = 524288;
export const eLEXTYPE_PRIVATE9 = 1048576;
export const eLEXTYPE_PRIVATE10 = 2097152;
export const eLEXTYPE_PRIVATE11 = 4194304;
export const eLEXTYPE_PRIVATE12 = 8388608;
export const eLEXTYPE_PRIVATE13 = 16777216;
export const eLEXTYPE_PRIVATE14 = 33554432;
export const eLEXTYPE_PRIVATE15 = 67108864;
export const eLEXTYPE_PRIVATE16 = 134217728;
export const eLEXTYPE_PRIVATE17 = 268435456;
export const eLEXTYPE_PRIVATE18 = 536870912;
export const eLEXTYPE_PRIVATE19 = 1073741824;
export const eLEXTYPE_PRIVATE20 = `-2147483648`;
export const eWORDTYPE_ADDED = 1;
export const eWORDTYPE_DELETED = 2;
export const ePRONFLAG_USED = 1;
export const SPSHT_NotOverriden = `-1`;
export const SPSHT_Unknown = 0;
export const SPSHT_EMAIL = 4096;
export const SPSHT_OTHER = 8192;
export const SPPS_RESERVED1 = 12288;
export const SPPS_RESERVED2 = 16384;
export const SPPS_RESERVED3 = 20480;
export const SPPS_RESERVED4 = 61440;
export const SPVA_Speak = 0;
export const SPVA_Silence = 1;
export const SPVA_Pronounce = 2;
export const SPVA_Bookmark = 3;
export const SPVA_SpellOut = 4;
export const SPVA_Section = 5;
export const SPVA_ParseUnknownTag = 6;
export const SPRS_DONE = 1;
export const SPRS_IS_SPEAKING = 2;
export const SPMIN_VOLUME = 0;
export const SPMAX_VOLUME = 100;
export const SPMIN_RATE = `-10`;
export const SPMAX_RATE = 10;
export const SPVPRI_NORMAL = 0;
export const SPVPRI_ALERT = 1;
export const SPVPRI_OVER = 2;
export const SPF_DEFAULT = 0;
export const SPF_ASYNC = 1;
export const SPF_PURGEBEFORESPEAK = 2;
export const SPF_IS_FILENAME = 4;
export const SPF_IS_XML = 8;
export const SPF_IS_NOT_XML = 16;
export const SPF_PERSIST_XML = 32;
export const SPF_NLP_SPEAK_PUNC = 64;
export const SPF_PARSE_SAPI = 128;
export const SPF_PARSE_SSML = 256;
export const SPF_PARSE_AUTODETECT = 0;
export const SPF_NLP_MASK = 64;
export const SPF_PARSE_MASK = 384;
export const SPF_VOICE_MASK = 511;
export const SPF_UNUSED_FLAGS = `-512`;
export const SPXRO_SML = 0;
export const SPXRO_Alternates_SML = 1;
export const SPCF_NONE = 0;
export const SPCF_ADD_TO_USER_LEXICON = 1;
export const SPCF_DEFINITE_CORRECTION = 2;
export const SPWP_UNKNOWN_WORD_UNPRONOUNCEABLE = 0;
export const SPWP_UNKNOWN_WORD_PRONOUNCEABLE = 1;
export const SPWP_KNOWN_WORD_PRONOUNCEABLE = 2;
export const SPGS_DISABLED = 0;
export const SPGS_ENABLED = 1;
export const SPGS_EXCLUSIVE = 3;
export const SPCS_DISABLED = 0;
export const SPCS_ENABLED = 1;
export const SPRS_INACTIVE = 0;
export const SPRS_ACTIVE = 1;
export const SPRS_ACTIVE_WITH_AUTO_PAUSE = 3;
export const SPRS_ACTIVE_USER_DELIMITED = 4;
export const SPWT_DISPLAY = 0;
export const SPWT_LEXICAL = 1;
export const SPWT_PRONUNCIATION = 2;
export const SPWT_LEXICAL_NO_SPECIAL_CHARS = 3;
export const SPRAF_TopLevel = 1;
export const SPRAF_Active = 2;
export const SPRAF_Export = 4;
export const SPRAF_Import = 8;
export const SPRAF_Interpreter = 16;
export const SPRAF_Dynamic = 32;
export const SPRAF_Root = 64;
export const SPRAF_AutoPause = 65536;
export const SPRAF_UserDelimited = 131072;
export const SPLO_STATIC = 0;
export const SPLO_DYNAMIC = 1;
export const AllWords = 0;
export const Subsequence = 1;
export const OrderedSubset = 3;
export const SubsequenceContentRequired = 5;
export const OrderedSubsetContentRequired = 7;
export const PA_Ipa = 0;
export const PA_Ups = 1;
export const PA_Sapi = 2;
export const SPBO_NONE = 0;
export const SPBO_PAUSE = 1;
export const SPBO_AHEAD = 2;
export const SPBO_TIME_UNITS = 4;
export const SPAO_NONE = 0;
export const SPAO_RETAIN_AUDIO = 1;
export const SPGO_SAPI = 1;
export const SPGO_SRGS = 2;
export const SPGO_UPS = 4;
export const SPGO_SRGS_MS_SCRIPT = 8;
export const SPGO_SRGS_W3C_SCRIPT = 256;
export const SPGO_SRGS_STG_SCRIPT = 512;
export const SPGO_SRGS_SCRIPT = 778;
export const SPGO_FILE = 16;
export const SPGO_HTTP = 32;
export const SPGO_RES = 64;
export const SPGO_OBJECT = 128;
export const SPGO_DEFAULT = 1019;
export const SPGO_ALL = 1023;
export const SPADS_Default = 0;
export const SPADS_CurrentRecognizer = 1;
export const SPADS_RecoProfile = 2;
export const SPADS_Immediate = 4;
export const SPADS_Reset = 8;
export const SPADS_HighVolumeDataSource = 16;
export const SPAR_Unknown = 0;
export const SPAR_Low = 1;
export const SPAR_Medium = 2;
export const SPAR_High = 3;
export const SPWF_INPUT = 0;
export const SPWF_SRENGINE = 1;
export const SPRST_INACTIVE = 0;
export const SPRST_ACTIVE = 1;
export const SPRST_ACTIVE_ALWAYS = 2;
export const SPRST_INACTIVE_WITH_PURGE = 3;
export const SPRST_NUM_STATES = 4;
export const DISPID_SDKSetBinaryValue = 1;
export const DISPID_SDKGetBinaryValue = 2;
export const DISPID_SDKSetStringValue = 3;
export const DISPID_SDKGetStringValue = 4;
export const DISPID_SDKSetLongValue = 5;
export const DISPID_SDKGetlongValue = 6;
export const DISPID_SDKOpenKey = 7;
export const DISPID_SDKCreateKey = 8;
export const DISPID_SDKDeleteKey = 9;
export const DISPID_SDKDeleteValue = 10;
export const DISPID_SDKEnumKeys = 11;
export const DISPID_SDKEnumValues = 12;
export const DISPID_SOTId = 1;
export const DISPID_SOTDataKey = 2;
export const DISPID_SOTCategory = 3;
export const DISPID_SOTGetDescription = 4;
export const DISPID_SOTSetId = 5;
export const DISPID_SOTGetAttribute = 6;
export const DISPID_SOTCreateInstance = 7;
export const DISPID_SOTRemove = 8;
export const DISPID_SOTGetStorageFileName = 9;
export const DISPID_SOTRemoveStorageFileName = 10;
export const DISPID_SOTIsUISupported = 11;
export const DISPID_SOTDisplayUI = 12;
export const DISPID_SOTMatchesAttributes = 13;
export const SDKLDefaultLocation = 0;
export const SDKLCurrentUser = 1;
export const SDKLLocalMachine = 2;
export const SDKLCurrentConfig = 5;
export const STCInprocServer = 1;
export const STCInprocHandler = 2;
export const STCLocalServer = 4;
export const STCRemoteServer = 16;
export const STCAll = 23;
export const STSF_AppData = 26;
export const STSF_LocalAppData = 28;
export const STSF_CommonAppData = 35;
export const STSF_FlagCreate = 32768;
export const DISPID_SOTsCount = 1;
export const DISPID_SOTsItem = 0;
export const DISPID_SOTs_NewEnum = `-4`;
export const DISPID_SOTCId = 1;
export const DISPID_SOTCDefault = 2;
export const DISPID_SOTCSetId = 3;
export const DISPID_SOTCGetDataKey = 4;
export const DISPID_SOTCEnumerateTokens = 5;
export const SAFTDefault = `-1`;
export const SAFTNoAssignedFormat = 0;
export const SAFTText = 1;
export const SAFTNonStandardFormat = 2;
export const SAFTExtendedAudioFormat = 3;
export const SAFT8kHz8BitMono = 4;
export const SAFT8kHz8BitStereo = 5;
export const SAFT8kHz16BitMono = 6;
export const SAFT8kHz16BitStereo = 7;
export const SAFT11kHz8BitMono = 8;
export const SAFT11kHz8BitStereo = 9;
export const SAFT11kHz16BitMono = 10;
export const SAFT11kHz16BitStereo = 11;
export const SAFT12kHz8BitMono = 12;
export const SAFT12kHz8BitStereo = 13;
export const SAFT12kHz16BitMono = 14;
export const SAFT12kHz16BitStereo = 15;
export const SAFT16kHz8BitMono = 16;
export const SAFT16kHz8BitStereo = 17;
export const SAFT16kHz16BitMono = 18;
export const SAFT16kHz16BitStereo = 19;
export const SAFT22kHz8BitMono = 20;
export const SAFT22kHz8BitStereo = 21;
export const SAFT22kHz16BitMono = 22;
export const SAFT22kHz16BitStereo = 23;
export const SAFT24kHz8BitMono = 24;
export const SAFT24kHz8BitStereo = 25;
export const SAFT24kHz16BitMono = 26;
export const SAFT24kHz16BitStereo = 27;
export const SAFT32kHz8BitMono = 28;
export const SAFT32kHz8BitStereo = 29;
export const SAFT32kHz16BitMono = 30;
export const SAFT32kHz16BitStereo = 31;
export const SAFT44kHz8BitMono = 32;
export const SAFT44kHz8BitStereo = 33;
export const SAFT44kHz16BitMono = 34;
export const SAFT44kHz16BitStereo = 35;
export const SAFT48kHz8BitMono = 36;
export const SAFT48kHz8BitStereo = 37;
export const SAFT48kHz16BitMono = 38;
export const SAFT48kHz16BitStereo = 39;
export const SAFTTrueSpeech_8kHz1BitMono = 40;
export const SAFTCCITT_ALaw_8kHzMono = 41;
export const SAFTCCITT_ALaw_8kHzStereo = 42;
export const SAFTCCITT_ALaw_11kHzMono = 43;
export const SAFTCCITT_ALaw_11kHzStereo = 44;
export const SAFTCCITT_ALaw_22kHzMono = 45;
export const SAFTCCITT_ALaw_22kHzStereo = 46;
export const SAFTCCITT_ALaw_44kHzMono = 47;
export const SAFTCCITT_ALaw_44kHzStereo = 48;
export const SAFTCCITT_uLaw_8kHzMono = 49;
export const SAFTCCITT_uLaw_8kHzStereo = 50;
export const SAFTCCITT_uLaw_11kHzMono = 51;
export const SAFTCCITT_uLaw_11kHzStereo = 52;
export const SAFTCCITT_uLaw_22kHzMono = 53;
export const SAFTCCITT_uLaw_22kHzStereo = 54;
export const SAFTCCITT_uLaw_44kHzMono = 55;
export const SAFTCCITT_uLaw_44kHzStereo = 56;
export const SAFTADPCM_8kHzMono = 57;
export const SAFTADPCM_8kHzStereo = 58;
export const SAFTADPCM_11kHzMono = 59;
export const SAFTADPCM_11kHzStereo = 60;
export const SAFTADPCM_22kHzMono = 61;
export const SAFTADPCM_22kHzStereo = 62;
export const SAFTADPCM_44kHzMono = 63;
export const SAFTADPCM_44kHzStereo = 64;
export const SAFTGSM610_8kHzMono = 65;
export const SAFTGSM610_11kHzMono = 66;
export const SAFTGSM610_22kHzMono = 67;
export const SAFTGSM610_44kHzMono = 68;
export const DISPID_SAFType = 1;
export const DISPID_SAFGuid = 2;
export const DISPID_SAFGetWaveFormatEx = 3;
export const DISPID_SAFSetWaveFormatEx = 4;
export const DISPID_SBSFormat = 1;
export const DISPID_SBSRead = 2;
export const DISPID_SBSWrite = 3;
export const DISPID_SBSSeek = 4;
export const SSSPTRelativeToStart = 0;
export const SSSPTRelativeToCurrentPosition = 1;
export const SSSPTRelativeToEnd = 2;
export const DISPID_SAStatus = 200;
export const DISPID_SABufferInfo = 201;
export const DISPID_SADefaultFormat = 202;
export const DISPID_SAVolume = 203;
export const DISPID_SABufferNotifySize = 204;
export const DISPID_SAEventHandle = 205;
export const DISPID_SASetState = 206;
export const SASClosed = 0;
export const SASStop = 1;
export const SASPause = 2;
export const SASRun = 3;
export const DISPID_SMSADeviceId = 300;
export const DISPID_SMSALineId = 301;
export const DISPID_SMSAMMHandle = 302;
export const DISPID_SFSOpen = 100;
export const DISPID_SFSClose = 101;
export const SSFMOpenForRead = 0;
export const SSFMOpenReadWrite = 1;
export const SSFMCreate = 2;
export const SSFMCreateForWrite = 3;
export const DISPID_SCSBaseStream = 100;
export const DISPID_SMSSetData = 100;
export const DISPID_SMSGetData = 101;
export const DISPID_SASFreeBufferSpace = 1;
export const DISPID_SASNonBlockingIO = 2;
export const DISPID_SASState = 3;
export const DISPID_SASCurrentSeekPosition = 4;
export const DISPID_SASCurrentDevicePosition = 5;
export const DISPID_SABIMinNotification = 1;
export const DISPID_SABIBufferSize = 2;
export const DISPID_SABIEventBias = 3;
export const DISPID_SWFEFormatTag = 1;
export const DISPID_SWFEChannels = 2;
export const DISPID_SWFESamplesPerSec = 3;
export const DISPID_SWFEAvgBytesPerSec = 4;
export const DISPID_SWFEBlockAlign = 5;
export const DISPID_SWFEBitsPerSample = 6;
export const DISPID_SWFEExtraData = 7;
export const DISPID_SVStatus = 1;
export const DISPID_SVVoice = 2;
export const DISPID_SVAudioOutput = 3;
export const DISPID_SVAudioOutputStream = 4;
export const DISPID_SVRate = 5;
export const DISPID_SVVolume = 6;
export const DISPID_SVAllowAudioOuputFormatChangesOnNextSet = 7;
export const DISPID_SVEventInterests = 8;
export const DISPID_SVPriority = 9;
export const DISPID_SVAlertBoundary = 10;
export const DISPID_SVSyncronousSpeakTimeout = 11;
export const DISPID_SVSpeak = 12;
export const DISPID_SVSpeakStream = 13;
export const DISPID_SVPause = 14;
export const DISPID_SVResume = 15;
export const DISPID_SVSkip = 16;
export const DISPID_SVGetVoices = 17;
export const DISPID_SVGetAudioOutputs = 18;
export const DISPID_SVWaitUntilDone = 19;
export const DISPID_SVSpeakCompleteEvent = 20;
export const DISPID_SVIsUISupported = 21;
export const DISPID_SVDisplayUI = 22;
export const SVPNormal = 0;
export const SVPAlert = 1;
export const SVPOver = 2;
export const SVSFDefault = 0;
export const SVSFlagsAsync = 1;
export const SVSFPurgeBeforeSpeak = 2;
export const SVSFIsFilename = 4;
export const SVSFIsXML = 8;
export const SVSFIsNotXML = 16;
export const SVSFPersistXML = 32;
export const SVSFNLPSpeakPunc = 64;
export const SVSFParseSapi = 128;
export const SVSFParseSsml = 256;
export const SVSFParseAutodetect = 0;
export const SVSFNLPMask = 64;
export const SVSFParseMask = 384;
export const SVSFVoiceMask = 511;
export const SVSFUnusedFlags = `-512`;
export const SVEStartInputStream = 2;
export const SVEEndInputStream = 4;
export const SVEVoiceChange = 8;
export const SVEBookmark = 16;
export const SVEWordBoundary = 32;
export const SVEPhoneme = 64;
export const SVESentenceBoundary = 128;
export const SVEViseme = 256;
export const SVEAudioLevel = 512;
export const SVEPrivate = 32768;
export const SVEAllEvents = 33790;
export const DISPID_SVSCurrentStreamNumber = 1;
export const DISPID_SVSLastStreamNumberQueued = 2;
export const DISPID_SVSLastResult = 3;
export const DISPID_SVSRunningState = 4;
export const DISPID_SVSInputWordPosition = 5;
export const DISPID_SVSInputWordLength = 6;
export const DISPID_SVSInputSentencePosition = 7;
export const DISPID_SVSInputSentenceLength = 8;
export const DISPID_SVSLastBookmark = 9;
export const DISPID_SVSLastBookmarkId = 10;
export const DISPID_SVSPhonemeId = 11;
export const DISPID_SVSVisemeId = 12;
export const SRSEDone = 1;
export const SRSEIsSpeaking = 2;
export const SVP_0 = 0;
export const SVP_1 = 1;
export const SVP_2 = 2;
export const SVP_3 = 3;
export const SVP_4 = 4;
export const SVP_5 = 5;
export const SVP_6 = 6;
export const SVP_7 = 7;
export const SVP_8 = 8;
export const SVP_9 = 9;
export const SVP_10 = 10;
export const SVP_11 = 11;
export const SVP_12 = 12;
export const SVP_13 = 13;
export const SVP_14 = 14;
export const SVP_15 = 15;
export const SVP_16 = 16;
export const SVP_17 = 17;
export const SVP_18 = 18;
export const SVP_19 = 19;
export const SVP_20 = 20;
export const SVP_21 = 21;
export const SVF_None = 0;
export const SVF_Stressed = 1;
export const SVF_Emphasis = 2;
export const DISPID_SVEStreamStart = 1;
export const DISPID_SVEStreamEnd = 2;
export const DISPID_SVEVoiceChange = 3;
export const DISPID_SVEBookmark = 4;
export const DISPID_SVEWord = 5;
export const DISPID_SVEPhoneme = 6;
export const DISPID_SVESentenceBoundary = 7;
export const DISPID_SVEViseme = 8;
export const DISPID_SVEAudioLevel = 9;
export const DISPID_SVEEnginePrivate = 10;
export const DISPID_SRRecognizer = 1;
export const DISPID_SRAllowAudioInputFormatChangesOnNextSet = 2;
export const DISPID_SRAudioInput = 3;
export const DISPID_SRAudioInputStream = 4;
export const DISPID_SRIsShared = 5;
export const DISPID_SRState = 6;
export const DISPID_SRStatus = 7;
export const DISPID_SRProfile = 8;
export const DISPID_SREmulateRecognition = 9;
export const DISPID_SRCreateRecoContext = 10;
export const DISPID_SRGetFormat = 11;
export const DISPID_SRSetPropertyNumber = 12;
export const DISPID_SRGetPropertyNumber = 13;
export const DISPID_SRSetPropertyString = 14;
export const DISPID_SRGetPropertyString = 15;
export const DISPID_SRIsUISupported = 16;
export const DISPID_SRDisplayUI = 17;
export const DISPID_SRGetRecognizers = 18;
export const DISPID_SVGetAudioInputs = 19;
export const DISPID_SVGetProfiles = 20;
export const SRSInactive = 0;
export const SRSActive = 1;
export const SRSActiveAlways = 2;
export const SRSInactiveWithPurge = 3;
export const SDA_No_Trailing_Space = 0;
export const SDA_One_Trailing_Space = 2;
export const SDA_Two_Trailing_Spaces = 4;
export const SDA_Consume_Leading_Spaces = 8;
export const SFTInput = 0;
export const SFTSREngine = 1;
export const SECFIgnoreCase = 1;
export const SECFIgnoreKanaType = 65536;
export const SECFIgnoreWidth = 131072;
export const SECFNoSpecialChars = 536870912;
export const SECFEmulateResult = 1073741824;
export const SECFDefault = 196609;
export const DISPID_SRSAudioStatus = 1;
export const DISPID_SRSCurrentStreamPosition = 2;
export const DISPID_SRSCurrentStreamNumber = 3;
export const DISPID_SRSNumberOfActiveRules = 4;
export const DISPID_SRSClsidEngine = 5;
export const DISPID_SRSSupportedLanguages = 6;
export const DISPID_SRCRecognizer = 1;
export const DISPID_SRCAudioInInterferenceStatus = 2;
export const DISPID_SRCRequestedUIType = 3;
export const DISPID_SRCVoice = 4;
export const DISPID_SRAllowVoiceFormatMatchingOnNextSet = 5;
export const DISPID_SRCVoicePurgeEvent = 6;
export const DISPID_SRCEventInterests = 7;
export const DISPID_SRCCmdMaxAlternates = 8;
export const DISPID_SRCState = 9;
export const DISPID_SRCRetainedAudio = 10;
export const DISPID_SRCRetainedAudioFormat = 11;
export const DISPID_SRCPause = 12;
export const DISPID_SRCResume = 13;
export const DISPID_SRCCreateGrammar = 14;
export const DISPID_SRCCreateResultFromMemory = 15;
export const DISPID_SRCBookmark = 16;
export const DISPID_SRCSetAdaptationData = 17;
export const SRAONone = 0;
export const SRAORetainAudio = 1;
export const SBONone = 0;
export const SBOPause = 1;
export const SINone = 0;
export const SINoise = 1;
export const SINoSignal = 2;
export const SITooLoud = 3;
export const SITooQuiet = 4;
export const SITooFast = 5;
export const SITooSlow = 6;
export const SREStreamEnd = 1;
export const SRESoundStart = 2;
export const SRESoundEnd = 4;
export const SREPhraseStart = 8;
export const SRERecognition = 16;
export const SREHypothesis = 32;
export const SREBookmark = 64;
export const SREPropertyNumChange = 128;
export const SREPropertyStringChange = 256;
export const SREFalseRecognition = 512;
export const SREInterference = 1024;
export const SRERequestUI = 2048;
export const SREStateChange = 4096;
export const SREAdaptation = 8192;
export const SREStreamStart = 16384;
export const SRERecoOtherContext = 32768;
export const SREAudioLevel = 65536;
export const SREPrivate = 262144;
export const SREAllEvents = 393215;
export const SRCS_Disabled = 0;
export const SRCS_Enabled = 1;
export const DISPID_SRGId = 1;
export const DISPID_SRGRecoContext = 2;
export const DISPID_SRGState = 3;
export const DISPID_SRGRules = 4;
export const DISPID_SRGReset = 5;
export const DISPID_SRGCommit = 6;
export const DISPID_SRGCmdLoadFromFile = 7;
export const DISPID_SRGCmdLoadFromObject = 8;
export const DISPID_SRGCmdLoadFromResource = 9;
export const DISPID_SRGCmdLoadFromMemory = 10;
export const DISPID_SRGCmdLoadFromProprietaryGrammar = 11;
export const DISPID_SRGCmdSetRuleState = 12;
export const DISPID_SRGCmdSetRuleIdState = 13;
export const DISPID_SRGDictationLoad = 14;
export const DISPID_SRGDictationUnload = 15;
export const DISPID_SRGDictationSetState = 16;
export const DISPID_SRGSetWordSequenceData = 17;
export const DISPID_SRGSetTextSelection = 18;
export const DISPID_SRGIsPronounceable = 19;
export const SLOStatic = 0;
export const SLODynamic = 1;
export const SWPUnknownWordUnpronounceable = 0;
export const SWPUnknownWordPronounceable = 1;
export const SWPKnownWordPronounceable = 2;
export const SGSEnabled = 1;
export const SGSDisabled = 0;
export const SGSExclusive = 3;
export const SGDSInactive = 0;
export const SGDSActive = 1;
export const SGDSActiveWithAutoPause = 3;
export const SGDSActiveUserDelimited = 4;
export const SRATopLevel = 1;
export const SRADefaultToActive = 2;
export const SRAExport = 4;
export const SRAImport = 8;
export const SRAInterpreter = 16;
export const SRADynamic = 32;
export const SRARoot = 64;
export const SGDisplay = 0;
export const SGLexical = 1;
export const SGPronounciation = 2;
export const SGLexicalNoSpecialChars = 3;
export const DISPID_SRCEStartStream = 1;
export const DISPID_SRCEEndStream = 2;
export const DISPID_SRCEBookmark = 3;
export const DISPID_SRCESoundStart = 4;
export const DISPID_SRCESoundEnd = 5;
export const DISPID_SRCEPhraseStart = 6;
export const DISPID_SRCERecognition = 7;
export const DISPID_SRCEHypothesis = 8;
export const DISPID_SRCEPropertyNumberChange = 9;
export const DISPID_SRCEPropertyStringChange = 10;
export const DISPID_SRCEFalseRecognition = 11;
export const DISPID_SRCEInterference = 12;
export const DISPID_SRCERequestUI = 13;
export const DISPID_SRCERecognizerStateChange = 14;
export const DISPID_SRCEAdaptation = 15;
export const DISPID_SRCERecognitionForOtherContext = 16;
export const DISPID_SRCEAudioLevel = 17;
export const DISPID_SRCEEnginePrivate = 18;
export const SRTStandard = 0;
export const SRTAutopause = 1;
export const SRTEmulated = 2;
export const SRTSMLTimeout = 4;
export const SRTExtendableParse = 8;
export const SRTReSent = 16;
export const DISPID_SGRAttributes = 1;
export const DISPID_SGRInitialState = 2;
export const DISPID_SGRName = 3;
export const DISPID_SGRId = 4;
export const DISPID_SGRClear = 5;
export const DISPID_SGRAddResource = 6;
export const DISPID_SGRAddState = 7;
export const DISPID_SGRsCount = 1;
export const DISPID_SGRsDynamic = 2;
export const DISPID_SGRsAdd = 3;
export const DISPID_SGRsCommit = 4;
export const DISPID_SGRsCommitAndSave = 5;
export const DISPID_SGRsFindRule = 6;
export const DISPID_SGRsItem = 0;
export const DISPID_SGRs_NewEnum = `-4`;
export const DISPID_SGRSRule = 1;
export const DISPID_SGRSTransitions = 2;
export const DISPID_SGRSAddWordTransition = 3;
export const DISPID_SGRSAddRuleTransition = 4;
export const DISPID_SGRSAddSpecialTransition = 5;
export const SSTTWildcard = 1;
export const SSTTDictation = 2;
export const SSTTTextBuffer = 3;
export const DISPID_SGRSTsCount = 1;
export const DISPID_SGRSTsItem = 0;
export const DISPID_SGRSTs_NewEnum = `-4`;
export const DISPID_SGRSTType = 1;
export const DISPID_SGRSTText = 2;
export const DISPID_SGRSTRule = 3;
export const DISPID_SGRSTWeight = 4;
export const DISPID_SGRSTPropertyName = 5;
export const DISPID_SGRSTPropertyId = 6;
export const DISPID_SGRSTPropertyValue = 7;
export const DISPID_SGRSTNextState = 8;
export const SGRSTTEpsilon = 0;
export const SGRSTTWord = 1;
export const SGRSTTRule = 2;
export const SGRSTTDictation = 3;
export const SGRSTTWildcard = 4;
export const SGRSTTTextBuffer = 5;
export const DISPIDSPTSI_ActiveOffset = 1;
export const DISPIDSPTSI_ActiveLength = 2;
export const DISPIDSPTSI_SelectionOffset = 3;
export const DISPIDSPTSI_SelectionLength = 4;
export const DISPID_SRRRecoContext = 1;
export const DISPID_SRRTimes = 2;
export const DISPID_SRRAudioFormat = 3;
export const DISPID_SRRPhraseInfo = 4;
export const DISPID_SRRAlternates = 5;
export const DISPID_SRRAudio = 6;
export const DISPID_SRRSpeakAudio = 7;
export const DISPID_SRRSaveToMemory = 8;
export const DISPID_SRRDiscardResultInfo = 9;
export const SDTProperty = 1;
export const SDTReplacement = 2;
export const SDTRule = 4;
export const SDTDisplayText = 8;
export const SDTLexicalForm = 16;
export const SDTPronunciation = 32;
export const SDTAudio = 64;
export const SDTAlternates = 128;
export const SDTAll = 255;
export const DISPID_SRRGetXMLResult = 10;
export const DISPID_SRRGetXMLErrorInfo = 11;
export const DISPID_SRRSetTextFeedback = 12;
export const DISPID_SPPBRestorePhraseFromMemory = 1;
export const DISPID_SRRTStreamTime = 1;
export const DISPID_SRRTLength = 2;
export const DISPID_SRRTTickCount = 3;
export const DISPID_SRRTOffsetFromStart = 4;
export const DISPID_SPARecoResult = 1;
export const DISPID_SPAStartElementInResult = 2;
export const DISPID_SPANumberOfElementsInResult = 3;
export const DISPID_SPAPhraseInfo = 4;
export const DISPID_SPACommit = 5;
export const DISPID_SPAsCount = 1;
export const DISPID_SPAsItem = 0;
export const DISPID_SPAs_NewEnum = `-4`;
export const DISPID_SPILanguageId = 1;
export const DISPID_SPIGrammarId = 2;
export const DISPID_SPIStartTime = 3;
export const DISPID_SPIAudioStreamPosition = 4;
export const DISPID_SPIAudioSizeBytes = 5;
export const DISPID_SPIRetainedSizeBytes = 6;
export const DISPID_SPIAudioSizeTime = 7;
export const DISPID_SPIRule = 8;
export const DISPID_SPIProperties = 9;
export const DISPID_SPIElements = 10;
export const DISPID_SPIReplacements = 11;
export const DISPID_SPIEngineId = 12;
export const DISPID_SPIEnginePrivateData = 13;
export const DISPID_SPISaveToMemory = 14;
export const DISPID_SPIGetText = 15;
export const DISPID_SPIGetDisplayAttributes = 16;
export const DISPID_SPEAudioTimeOffset = 1;
export const DISPID_SPEAudioSizeTime = 2;
export const DISPID_SPEAudioStreamOffset = 3;
export const DISPID_SPEAudioSizeBytes = 4;
export const DISPID_SPERetainedStreamOffset = 5;
export const DISPID_SPERetainedSizeBytes = 6;
export const DISPID_SPEDisplayText = 7;
export const DISPID_SPELexicalForm = 8;
export const DISPID_SPEPronunciation = 9;
export const DISPID_SPEDisplayAttributes = 10;
export const DISPID_SPERequiredConfidence = 11;
export const DISPID_SPEActualConfidence = 12;
export const DISPID_SPEEngineConfidence = 13;
export const SECLowConfidence = `-1`;
export const SECNormalConfidence = 0;
export const SECHighConfidence = 1;
export const DISPID_SPEsCount = 1;
export const DISPID_SPEsItem = 0;
export const DISPID_SPEs_NewEnum = `-4`;
export const DISPID_SPRDisplayAttributes = 1;
export const DISPID_SPRText = 2;
export const DISPID_SPRFirstElement = 3;
export const DISPID_SPRNumberOfElements = 4;
export const DISPID_SPRsCount = 1;
export const DISPID_SPRsItem = 0;
export const DISPID_SPRs_NewEnum = `-4`;
export const DISPID_SPPName = 1;
export const DISPID_SPPId = 2;
export const DISPID_SPPValue = 3;
export const DISPID_SPPFirstElement = 4;
export const DISPID_SPPNumberOfElements = 5;
export const DISPID_SPPEngineConfidence = 6;
export const DISPID_SPPConfidence = 7;
export const DISPID_SPPParent = 8;
export const DISPID_SPPChildren = 9;
export const DISPID_SPPsCount = 1;
export const DISPID_SPPsItem = 0;
export const DISPID_SPPs_NewEnum = `-4`;
export const DISPID_SPRuleName = 1;
export const DISPID_SPRuleId = 2;
export const DISPID_SPRuleFirstElement = 3;
export const DISPID_SPRuleNumberOfElements = 4;
export const DISPID_SPRuleParent = 5;
export const DISPID_SPRuleChildren = 6;
export const DISPID_SPRuleConfidence = 7;
export const DISPID_SPRuleEngineConfidence = 8;
export const DISPID_SPRulesCount = 1;
export const DISPID_SPRulesItem = 0;
export const DISPID_SPRules_NewEnum = `-4`;
export const DISPID_SLGenerationId = 1;
export const DISPID_SLGetWords = 2;
export const DISPID_SLAddPronunciation = 3;
export const DISPID_SLAddPronunciationByPhoneIds = 4;
export const DISPID_SLRemovePronunciation = 5;
export const DISPID_SLRemovePronunciationByPhoneIds = 6;
export const DISPID_SLGetPronunciations = 7;
export const DISPID_SLGetGenerationChange = 8;
export const SLTUser = 1;
export const SLTApp = 2;
export const SPSNotOverriden = `-1`;
export const SPSUnknown = 0;
export const SPSNoun = 4096;
export const SPSVerb = 8192;
export const SPSModifier = 12288;
export const SPSFunction = 16384;
export const SPSInterjection = 20480;
export const SPSLMA = 28672;
export const SPSSuppressWord = 61440;
export const DISPID_SLWsCount = 1;
export const DISPID_SLWsItem = 0;
export const DISPID_SLWs_NewEnum = `-4`;
export const SWTAdded = 1;
export const SWTDeleted = 2;
export const DISPID_SLWLangId = 1;
export const DISPID_SLWType = 2;
export const DISPID_SLWWord = 3;
export const DISPID_SLWPronunciations = 4;
export const DISPID_SLPsCount = 1;
export const DISPID_SLPsItem = 0;
export const DISPID_SLPs_NewEnum = `-4`;
export const DISPID_SLPType = 1;
export const DISPID_SLPLangId = 2;
export const DISPID_SLPPartOfSpeech = 3;
export const DISPID_SLPPhoneIds = 4;
export const DISPID_SLPSymbolic = 5;
export const DISPID_SPCLangId = 1;
export const DISPID_SPCPhoneToId = 2;
export const DISPID_SPCIdToPhone = 3;

// Structs

export type WPARAM = Deno.PointerValue;

export type LPARAM = Deno.PointerValue;

/**
 * Windows.Win32.Media.Speech.SPEVENT (size: 32)
 */
export interface SPEVENT {
  /** i32 */
  _bitfield: number;
  /** u32 */
  ulStreamNum: number;
  /** u64 */
  ullAudioStreamOffset: Deno.PointerValue;
  /** Windows.Win32.Foundation.WPARAM */
  wParam: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Foundation.LPARAM */
  lParam: Uint8Array | Deno.PointerValue | null;
}

export const sizeofSPEVENT = 32;

export function allocSPEVENT(data?: Partial<SPEVENT>): Uint8Array {
  const buf = new Uint8Array(sizeofSPEVENT);
  const view = new DataView(buf.buffer);
  // 0x00: i32
  if (data?._bitfield !== undefined) view.setInt32(0, Number(data._bitfield), true);
  // 0x04: u32
  if (data?.ulStreamNum !== undefined) view.setUint32(4, Number(data.ulStreamNum), true);
  // 0x08: u64
  if (data?.ullAudioStreamOffset !== undefined) view.setBigUint64(8, BigInt(data.ullAudioStreamOffset), true);
  // 0x10: pointer
  if (data?.wParam !== undefined) view.setBigUint64(16, data.wParam === null ? 0n : BigInt(util.toPointer(data.wParam)), true);
  // 0x18: pointer
  if (data?.lParam !== undefined) view.setBigUint64(24, data.lParam === null ? 0n : BigInt(util.toPointer(data.lParam)), true);
  return buf;
}

/**
 * Windows.Win32.Media.Speech.SPSERIALIZEDEVENT (size: 24)
 */
export interface SPSERIALIZEDEVENT {
  /** i32 */
  _bitfield: number;
  /** u32 */
  ulStreamNum: number;
  /** u64 */
  ullAudioStreamOffset: Deno.PointerValue;
  /** u32 */
  SerializedwParam: number;
  /** i32 */
  SerializedlParam: number;
}

export const sizeofSPSERIALIZEDEVENT = 24;

export function allocSPSERIALIZEDEVENT(data?: Partial<SPSERIALIZEDEVENT>): Uint8Array {
  const buf = new Uint8Array(sizeofSPSERIALIZEDEVENT);
  const view = new DataView(buf.buffer);
  // 0x00: i32
  if (data?._bitfield !== undefined) view.setInt32(0, Number(data._bitfield), true);
  // 0x04: u32
  if (data?.ulStreamNum !== undefined) view.setUint32(4, Number(data.ulStreamNum), true);
  // 0x08: u64
  if (data?.ullAudioStreamOffset !== undefined) view.setBigUint64(8, BigInt(data.ullAudioStreamOffset), true);
  // 0x10: u32
  if (data?.SerializedwParam !== undefined) view.setUint32(16, Number(data.SerializedwParam), true);
  // 0x14: i32
  if (data?.SerializedlParam !== undefined) view.setInt32(20, Number(data.SerializedlParam), true);
  return buf;
}

/**
 * Windows.Win32.Media.Speech.SPSERIALIZEDEVENT64 (size: 32)
 */
export interface SPSERIALIZEDEVENT64 {
  /** i32 */
  _bitfield: number;
  /** u32 */
  ulStreamNum: number;
  /** u64 */
  ullAudioStreamOffset: Deno.PointerValue;
  /** u64 */
  SerializedwParam: Deno.PointerValue;
  /** i64 */
  SerializedlParam: Deno.PointerValue;
}

export const sizeofSPSERIALIZEDEVENT64 = 32;

export function allocSPSERIALIZEDEVENT64(data?: Partial<SPSERIALIZEDEVENT64>): Uint8Array {
  const buf = new Uint8Array(sizeofSPSERIALIZEDEVENT64);
  const view = new DataView(buf.buffer);
  // 0x00: i32
  if (data?._bitfield !== undefined) view.setInt32(0, Number(data._bitfield), true);
  // 0x04: u32
  if (data?.ulStreamNum !== undefined) view.setUint32(4, Number(data.ulStreamNum), true);
  // 0x08: u64
  if (data?.ullAudioStreamOffset !== undefined) view.setBigUint64(8, BigInt(data.ullAudioStreamOffset), true);
  // 0x10: u64
  if (data?.SerializedwParam !== undefined) view.setBigUint64(16, BigInt(data.SerializedwParam), true);
  // 0x18: i64
  if (data?.SerializedlParam !== undefined) view.setBigInt64(24, BigInt(data.SerializedlParam), true);
  return buf;
}

/**
 * Windows.Win32.Media.Speech.SPEVENTEX (size: 40)
 */
export interface SPEVENTEX {
  /** i32 */
  _bitfield: number;
  /** u32 */
  ulStreamNum: number;
  /** u64 */
  ullAudioStreamOffset: Deno.PointerValue;
  /** Windows.Win32.Foundation.WPARAM */
  wParam: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Foundation.LPARAM */
  lParam: Uint8Array | Deno.PointerValue | null;
  /** u64 */
  ullAudioTimeOffset: Deno.PointerValue;
}

export const sizeofSPEVENTEX = 40;

export function allocSPEVENTEX(data?: Partial<SPEVENTEX>): Uint8Array {
  const buf = new Uint8Array(sizeofSPEVENTEX);
  const view = new DataView(buf.buffer);
  // 0x00: i32
  if (data?._bitfield !== undefined) view.setInt32(0, Number(data._bitfield), true);
  // 0x04: u32
  if (data?.ulStreamNum !== undefined) view.setUint32(4, Number(data.ulStreamNum), true);
  // 0x08: u64
  if (data?.ullAudioStreamOffset !== undefined) view.setBigUint64(8, BigInt(data.ullAudioStreamOffset), true);
  // 0x10: pointer
  if (data?.wParam !== undefined) view.setBigUint64(16, data.wParam === null ? 0n : BigInt(util.toPointer(data.wParam)), true);
  // 0x18: pointer
  if (data?.lParam !== undefined) view.setBigUint64(24, data.lParam === null ? 0n : BigInt(util.toPointer(data.lParam)), true);
  // 0x20: u64
  if (data?.ullAudioTimeOffset !== undefined) view.setBigUint64(32, BigInt(data.ullAudioTimeOffset), true);
  return buf;
}

/**
 * Windows.Win32.Media.Speech.SPEVENTSOURCEINFO (size: 24)
 */
export interface SPEVENTSOURCEINFO {
  /** u64 */
  ullEventInterest: Deno.PointerValue;
  /** u64 */
  ullQueuedInterest: Deno.PointerValue;
  /** u32 */
  ulCount: number;
}

export const sizeofSPEVENTSOURCEINFO = 24;

export function allocSPEVENTSOURCEINFO(data?: Partial<SPEVENTSOURCEINFO>): Uint8Array {
  const buf = new Uint8Array(sizeofSPEVENTSOURCEINFO);
  const view = new DataView(buf.buffer);
  // 0x00: u64
  if (data?.ullEventInterest !== undefined) view.setBigUint64(0, BigInt(data.ullEventInterest), true);
  // 0x08: u64
  if (data?.ullQueuedInterest !== undefined) view.setBigUint64(8, BigInt(data.ullQueuedInterest), true);
  // 0x10: u32
  if (data?.ulCount !== undefined) view.setUint32(16, Number(data.ulCount), true);
  // 0x14: pad4
  return buf;
}

/**
 * Windows.Win32.Media.Speech.SPAUDIOSTATUS (size: 40)
 */
export interface SPAUDIOSTATUS {
  /** i32 */
  cbFreeBuffSpace: number;
  /** u32 */
  cbNonBlockingIO: number;
  /** Windows.Win32.Media.Speech.SPAUDIOSTATE */
  State: SPAUDIOSTATE;
  /** u64 */
  CurSeekPos: Deno.PointerValue;
  /** u64 */
  CurDevicePos: Deno.PointerValue;
  /** u32 */
  dwAudioLevel: number;
  /** u32 */
  dwReserved2: number;
}

export const sizeofSPAUDIOSTATUS = 40;

export function allocSPAUDIOSTATUS(data?: Partial<SPAUDIOSTATUS>): Uint8Array {
  const buf = new Uint8Array(sizeofSPAUDIOSTATUS);
  const view = new DataView(buf.buffer);
  // 0x00: i32
  if (data?.cbFreeBuffSpace !== undefined) view.setInt32(0, Number(data.cbFreeBuffSpace), true);
  // 0x04: u32
  if (data?.cbNonBlockingIO !== undefined) view.setUint32(4, Number(data.cbNonBlockingIO), true);
  // 0x08: i32
  if (data?.State !== undefined) view.setInt32(8, Number(data.State), true);
  // 0x0c: pad4
  // 0x10: u64
  if (data?.CurSeekPos !== undefined) view.setBigUint64(16, BigInt(data.CurSeekPos), true);
  // 0x18: u64
  if (data?.CurDevicePos !== undefined) view.setBigUint64(24, BigInt(data.CurDevicePos), true);
  // 0x20: u32
  if (data?.dwAudioLevel !== undefined) view.setUint32(32, Number(data.dwAudioLevel), true);
  // 0x24: u32
  if (data?.dwReserved2 !== undefined) view.setUint32(36, Number(data.dwReserved2), true);
  return buf;
}

/**
 * Windows.Win32.Media.Speech.SPAUDIOBUFFERINFO (size: 16)
 */
export interface SPAUDIOBUFFERINFO {
  /** u32 */
  ulMsMinNotification: number;
  /** u32 */
  ulMsBufferSize: number;
  /** u32 */
  ulMsEventBias: number;
}

export const sizeofSPAUDIOBUFFERINFO = 16;

export function allocSPAUDIOBUFFERINFO(data?: Partial<SPAUDIOBUFFERINFO>): Uint8Array {
  const buf = new Uint8Array(sizeofSPAUDIOBUFFERINFO);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.ulMsMinNotification !== undefined) view.setUint32(0, Number(data.ulMsMinNotification), true);
  // 0x04: u32
  if (data?.ulMsBufferSize !== undefined) view.setUint32(4, Number(data.ulMsBufferSize), true);
  // 0x08: u32
  if (data?.ulMsEventBias !== undefined) view.setUint32(8, Number(data.ulMsEventBias), true);
  // 0x0c: pad4
  return buf;
}

export type PWSTR = Deno.PointerValue | Uint8Array | null;

/**
 * Windows.Win32.Media.Speech.SPPHRASEELEMENT (size: 56)
 */
export interface SPPHRASEELEMENT {
  /** u32 */
  ulAudioTimeOffset: number;
  /** u32 */
  ulAudioSizeTime: number;
  /** u32 */
  ulAudioStreamOffset: number;
  /** u32 */
  ulAudioSizeBytes: number;
  /** u32 */
  ulRetainedStreamOffset: number;
  /** u32 */
  ulRetainedSizeBytes: number;
  /** Windows.Win32.Foundation.PWSTR */
  pszDisplayText: string | null;
  /** Windows.Win32.Foundation.PWSTR */
  pszLexicalForm: string | null;
  /** ptr */
  pszPronunciation: Deno.PointerValue | Uint8Array | null;
  /** u8 */
  bDisplayAttributes: number;
  /** i8 */
  RequiredConfidence: number;
  /** i8 */
  ActualConfidence: number;
  /** u8 */
  Reserved: number;
  /** f32 */
  SREngineConfidence: number;
}

export const sizeofSPPHRASEELEMENT = 56;

export function allocSPPHRASEELEMENT(data?: Partial<SPPHRASEELEMENT>): Uint8Array {
  const buf = new Uint8Array(sizeofSPPHRASEELEMENT);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.ulAudioTimeOffset !== undefined) view.setUint32(0, Number(data.ulAudioTimeOffset), true);
  // 0x04: u32
  if (data?.ulAudioSizeTime !== undefined) view.setUint32(4, Number(data.ulAudioSizeTime), true);
  // 0x08: u32
  if (data?.ulAudioStreamOffset !== undefined) view.setUint32(8, Number(data.ulAudioStreamOffset), true);
  // 0x0c: u32
  if (data?.ulAudioSizeBytes !== undefined) view.setUint32(12, Number(data.ulAudioSizeBytes), true);
  // 0x10: u32
  if (data?.ulRetainedStreamOffset !== undefined) view.setUint32(16, Number(data.ulRetainedStreamOffset), true);
  // 0x14: u32
  if (data?.ulRetainedSizeBytes !== undefined) view.setUint32(20, Number(data.ulRetainedSizeBytes), true);
  // 0x18: buffer
  if (data?.pszDisplayText !== undefined) {
    (buf as any)._f24 = util.pwstrToFfi(data.pszDisplayText);
    view.setBigUint64(24, (buf as any)._f24 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f24)), true);
  }
  // 0x20: buffer
  if (data?.pszLexicalForm !== undefined) {
    (buf as any)._f32 = util.pwstrToFfi(data.pszLexicalForm);
    view.setBigUint64(32, (buf as any)._f32 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f32)), true);
  }
  // 0x28: pointer
  if (data?.pszPronunciation !== undefined) view.setBigUint64(40, data.pszPronunciation === null ? 0n : BigInt(util.toPointer(data.pszPronunciation)), true);
  // 0x30: u8
  if (data?.bDisplayAttributes !== undefined) view.setUint8(48, Number(data.bDisplayAttributes));
  // 0x31: i8
  if (data?.RequiredConfidence !== undefined) view.setInt8(49, Number(data.RequiredConfidence));
  // 0x32: i8
  if (data?.ActualConfidence !== undefined) view.setInt8(50, Number(data.ActualConfidence));
  // 0x33: u8
  if (data?.Reserved !== undefined) view.setUint8(51, Number(data.Reserved));
  // 0x34: f32
  if (data?.SREngineConfidence !== undefined) view.setFloat32(52, Number(data.SREngineConfidence), true);
  return buf;
}

/**
 * Windows.Win32.Media.Speech.SPPHRASERULE (size: 48)
 */
export interface SPPHRASERULE {
  /** Windows.Win32.Foundation.PWSTR */
  pszName: string | null;
  /** u32 */
  ulId: number;
  /** u32 */
  ulFirstElement: number;
  /** u32 */
  ulCountOfElements: number;
  /** ptr */
  pNextSibling: Deno.PointerValue | Uint8Array | null;
  /** ptr */
  pFirstChild: Deno.PointerValue | Uint8Array | null;
  /** f32 */
  SREngineConfidence: number;
  /** i8 */
  Confidence: number;
}

export const sizeofSPPHRASERULE = 48;

export function allocSPPHRASERULE(data?: Partial<SPPHRASERULE>): Uint8Array {
  const buf = new Uint8Array(sizeofSPPHRASERULE);
  const view = new DataView(buf.buffer);
  // 0x00: buffer
  if (data?.pszName !== undefined) {
    (buf as any)._f0 = util.pwstrToFfi(data.pszName);
    view.setBigUint64(0, (buf as any)._f0 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f0)), true);
  }
  // 0x08: u32
  if (data?.ulId !== undefined) view.setUint32(8, Number(data.ulId), true);
  // 0x0c: u32
  if (data?.ulFirstElement !== undefined) view.setUint32(12, Number(data.ulFirstElement), true);
  // 0x10: u32
  if (data?.ulCountOfElements !== undefined) view.setUint32(16, Number(data.ulCountOfElements), true);
  // 0x14: pad4
  // 0x18: pointer
  if (data?.pNextSibling !== undefined) view.setBigUint64(24, data.pNextSibling === null ? 0n : BigInt(util.toPointer(data.pNextSibling)), true);
  // 0x20: pointer
  if (data?.pFirstChild !== undefined) view.setBigUint64(32, data.pFirstChild === null ? 0n : BigInt(util.toPointer(data.pFirstChild)), true);
  // 0x28: f32
  if (data?.SREngineConfidence !== undefined) view.setFloat32(40, Number(data.SREngineConfidence), true);
  // 0x2c: i8
  if (data?.Confidence !== undefined) view.setInt8(44, Number(data.Confidence));
  // 0x2d: pad3
  return buf;
}

/**
 * _Anonymous_e__Struct (size: 16)
 */
export interface _Anonymous_e__Struct {
  /** u64 */
  Alignment: Deno.PointerValue;
  /** u64 */
  Region: Deno.PointerValue;
}

export const sizeof_Anonymous_e__Struct = 16;

export function alloc_Anonymous_e__Struct(data?: Partial<_Anonymous_e__Struct>): Uint8Array {
  const buf = new Uint8Array(sizeof_Anonymous_e__Struct);
  const view = new DataView(buf.buffer);
  // 0x00: u64
  if (data?.Alignment !== undefined) view.setBigUint64(0, BigInt(data.Alignment), true);
  // 0x08: u64
  if (data?.Region !== undefined) view.setBigUint64(8, BigInt(data.Region), true);
  return buf;
}

/**
 * _Anonymous_e__Union (size: 16)
 */
export interface _Anonymous_e__Union {
  /** _Anonymous_e__Struct */
  Anonymous: Uint8Array | Deno.PointerValue | null;
  /** array */
  X: Deno.PointerValue | null;
}

export const sizeof_Anonymous_e__Union = 16;

export function alloc_Anonymous_e__Union(data?: Partial<_Anonymous_e__Union>): Uint8Array {
  const buf = new Uint8Array(sizeof_Anonymous_e__Union);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.Anonymous !== undefined) view.setBigUint64(0, data.Anonymous === null ? 0n : BigInt(util.toPointer(data.Anonymous)), true);
  // 0x08: pointer
  if (data?.X !== undefined) view.setBigUint64(8, data.X === null ? 0n : BigInt(util.toPointer(data.X)), true);
  return buf;
}

/**
 * Windows.Win32.System.Com.VARIANT (size: 8)
 */
export interface VARIANT {
  /** _Anonymous_e__Union */
  Anonymous: Uint8Array | Deno.PointerValue | null;
}

export const sizeofVARIANT = 8;

export function allocVARIANT(data?: Partial<VARIANT>): Uint8Array {
  const buf = new Uint8Array(sizeofVARIANT);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.Anonymous !== undefined) view.setBigUint64(0, data.Anonymous === null ? 0n : BigInt(util.toPointer(data.Anonymous)), true);
  return buf;
}

/**
 * Windows.Win32.Media.Speech.SPPHRASEPROPERTY (size: 64)
 */
export interface SPPHRASEPROPERTY {
  /** Windows.Win32.Foundation.PWSTR */
  pszName: string | null;
  /** _Anonymous_e__Union */
  Anonymous: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Foundation.PWSTR */
  pszValue: string | null;
  /** Windows.Win32.System.Com.VARIANT */
  vValue: Uint8Array | Deno.PointerValue | null;
  /** u32 */
  ulFirstElement: number;
  /** u32 */
  ulCountOfElements: number;
  /** ptr */
  pNextSibling: Deno.PointerValue | Uint8Array | null;
  /** ptr */
  pFirstChild: Deno.PointerValue | Uint8Array | null;
  /** f32 */
  SREngineConfidence: number;
  /** i8 */
  Confidence: number;
}

export const sizeofSPPHRASEPROPERTY = 64;

export function allocSPPHRASEPROPERTY(data?: Partial<SPPHRASEPROPERTY>): Uint8Array {
  const buf = new Uint8Array(sizeofSPPHRASEPROPERTY);
  const view = new DataView(buf.buffer);
  // 0x00: buffer
  if (data?.pszName !== undefined) {
    (buf as any)._f0 = util.pwstrToFfi(data.pszName);
    view.setBigUint64(0, (buf as any)._f0 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f0)), true);
  }
  // 0x08: pointer
  if (data?.Anonymous !== undefined) view.setBigUint64(8, data.Anonymous === null ? 0n : BigInt(util.toPointer(data.Anonymous)), true);
  // 0x10: buffer
  if (data?.pszValue !== undefined) {
    (buf as any)._f16 = util.pwstrToFfi(data.pszValue);
    view.setBigUint64(16, (buf as any)._f16 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f16)), true);
  }
  // 0x18: pointer
  if (data?.vValue !== undefined) view.setBigUint64(24, data.vValue === null ? 0n : BigInt(util.toPointer(data.vValue)), true);
  // 0x20: u32
  if (data?.ulFirstElement !== undefined) view.setUint32(32, Number(data.ulFirstElement), true);
  // 0x24: u32
  if (data?.ulCountOfElements !== undefined) view.setUint32(36, Number(data.ulCountOfElements), true);
  // 0x28: pointer
  if (data?.pNextSibling !== undefined) view.setBigUint64(40, data.pNextSibling === null ? 0n : BigInt(util.toPointer(data.pNextSibling)), true);
  // 0x30: pointer
  if (data?.pFirstChild !== undefined) view.setBigUint64(48, data.pFirstChild === null ? 0n : BigInt(util.toPointer(data.pFirstChild)), true);
  // 0x38: f32
  if (data?.SREngineConfidence !== undefined) view.setFloat32(56, Number(data.SREngineConfidence), true);
  // 0x3c: i8
  if (data?.Confidence !== undefined) view.setInt8(60, Number(data.Confidence));
  // 0x3d: pad3
  return buf;
}

/**
 * Windows.Win32.Media.Speech.SPPHRASEREPLACEMENT (size: 24)
 */
export interface SPPHRASEREPLACEMENT {
  /** u8 */
  bDisplayAttributes: number;
  /** Windows.Win32.Foundation.PWSTR */
  pszReplacementText: string | null;
  /** u32 */
  ulFirstElement: number;
  /** u32 */
  ulCountOfElements: number;
}

export const sizeofSPPHRASEREPLACEMENT = 24;

export function allocSPPHRASEREPLACEMENT(data?: Partial<SPPHRASEREPLACEMENT>): Uint8Array {
  const buf = new Uint8Array(sizeofSPPHRASEREPLACEMENT);
  const view = new DataView(buf.buffer);
  // 0x00: u8
  if (data?.bDisplayAttributes !== undefined) view.setUint8(0, Number(data.bDisplayAttributes));
  // 0x01: pad7
  // 0x08: buffer
  if (data?.pszReplacementText !== undefined) {
    (buf as any)._f8 = util.pwstrToFfi(data.pszReplacementText);
    view.setBigUint64(8, (buf as any)._f8 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f8)), true);
  }
  // 0x10: u32
  if (data?.ulFirstElement !== undefined) view.setUint32(16, Number(data.ulFirstElement), true);
  // 0x14: u32
  if (data?.ulCountOfElements !== undefined) view.setUint32(20, Number(data.ulCountOfElements), true);
  return buf;
}

export type HRESULT = number;

/**
 * Windows.Win32.Media.Speech.SPSEMANTICERRORINFO (size: 40)
 */
export interface SPSEMANTICERRORINFO {
  /** u32 */
  ulLineNumber: number;
  /** Windows.Win32.Foundation.PWSTR */
  pszScriptLine: string | null;
  /** Windows.Win32.Foundation.PWSTR */
  pszSource: string | null;
  /** Windows.Win32.Foundation.PWSTR */
  pszDescription: string | null;
  /** Windows.Win32.Foundation.HRESULT */
  hrResultCode: Uint8Array | Deno.PointerValue | null;
}

export const sizeofSPSEMANTICERRORINFO = 40;

export function allocSPSEMANTICERRORINFO(data?: Partial<SPSEMANTICERRORINFO>): Uint8Array {
  const buf = new Uint8Array(sizeofSPSEMANTICERRORINFO);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.ulLineNumber !== undefined) view.setUint32(0, Number(data.ulLineNumber), true);
  // 0x04: pad4
  // 0x08: buffer
  if (data?.pszScriptLine !== undefined) {
    (buf as any)._f8 = util.pwstrToFfi(data.pszScriptLine);
    view.setBigUint64(8, (buf as any)._f8 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f8)), true);
  }
  // 0x10: buffer
  if (data?.pszSource !== undefined) {
    (buf as any)._f16 = util.pwstrToFfi(data.pszSource);
    view.setBigUint64(16, (buf as any)._f16 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f16)), true);
  }
  // 0x18: buffer
  if (data?.pszDescription !== undefined) {
    (buf as any)._f24 = util.pwstrToFfi(data.pszDescription);
    view.setBigUint64(24, (buf as any)._f24 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f24)), true);
  }
  // 0x20: pointer
  if (data?.hrResultCode !== undefined) view.setBigUint64(32, data.hrResultCode === null ? 0n : BigInt(util.toPointer(data.hrResultCode)), true);
  return buf;
}

/**
 * Windows.Win32.Media.Speech.SPPHRASE_50 (size: 112)
 */
export interface SPPHRASE_50 {
  /** u32 */
  cbSize: number;
  /** u16 */
  LangID: number;
  /** u16 */
  wHomophoneGroupId: number;
  /** u64 */
  ullGrammarID: Deno.PointerValue;
  /** u64 */
  ftStartTime: Deno.PointerValue;
  /** u64 */
  ullAudioStreamPosition: Deno.PointerValue;
  /** u32 */
  ulAudioSizeBytes: number;
  /** u32 */
  ulRetainedSizeBytes: number;
  /** u32 */
  ulAudioSizeTime: number;
  /** Windows.Win32.Media.Speech.SPPHRASERULE */
  Rule: Uint8Array | Deno.PointerValue | null;
  /** ptr */
  pProperties: Deno.PointerValue | Uint8Array | null;
  /** ptr */
  pElements: Deno.PointerValue | Uint8Array | null;
  /** u32 */
  cReplacements: number;
  /** ptr */
  pReplacements: Deno.PointerValue | Uint8Array | null;
  /** System.Guid */
  SREngineID: Uint8Array | Deno.PointerValue | null;
  /** u32 */
  ulSREnginePrivateDataSize: number;
  /** ptr */
  pSREnginePrivateData: Deno.PointerValue | Uint8Array | null;
}

export const sizeofSPPHRASE_50 = 112;

export function allocSPPHRASE_50(data?: Partial<SPPHRASE_50>): Uint8Array {
  const buf = new Uint8Array(sizeofSPPHRASE_50);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.cbSize !== undefined) view.setUint32(0, Number(data.cbSize), true);
  // 0x04: u16
  if (data?.LangID !== undefined) view.setUint16(4, Number(data.LangID), true);
  // 0x06: u16
  if (data?.wHomophoneGroupId !== undefined) view.setUint16(6, Number(data.wHomophoneGroupId), true);
  // 0x08: u64
  if (data?.ullGrammarID !== undefined) view.setBigUint64(8, BigInt(data.ullGrammarID), true);
  // 0x10: u64
  if (data?.ftStartTime !== undefined) view.setBigUint64(16, BigInt(data.ftStartTime), true);
  // 0x18: u64
  if (data?.ullAudioStreamPosition !== undefined) view.setBigUint64(24, BigInt(data.ullAudioStreamPosition), true);
  // 0x20: u32
  if (data?.ulAudioSizeBytes !== undefined) view.setUint32(32, Number(data.ulAudioSizeBytes), true);
  // 0x24: u32
  if (data?.ulRetainedSizeBytes !== undefined) view.setUint32(36, Number(data.ulRetainedSizeBytes), true);
  // 0x28: u32
  if (data?.ulAudioSizeTime !== undefined) view.setUint32(40, Number(data.ulAudioSizeTime), true);
  // 0x2c: pad4
  // 0x30: pointer
  if (data?.Rule !== undefined) view.setBigUint64(48, data.Rule === null ? 0n : BigInt(util.toPointer(data.Rule)), true);
  // 0x38: pointer
  if (data?.pProperties !== undefined) view.setBigUint64(56, data.pProperties === null ? 0n : BigInt(util.toPointer(data.pProperties)), true);
  // 0x40: pointer
  if (data?.pElements !== undefined) view.setBigUint64(64, data.pElements === null ? 0n : BigInt(util.toPointer(data.pElements)), true);
  // 0x48: u32
  if (data?.cReplacements !== undefined) view.setUint32(72, Number(data.cReplacements), true);
  // 0x4c: pad4
  // 0x50: pointer
  if (data?.pReplacements !== undefined) view.setBigUint64(80, data.pReplacements === null ? 0n : BigInt(util.toPointer(data.pReplacements)), true);
  // 0x58: pointer
  if (data?.SREngineID !== undefined) view.setBigUint64(88, data.SREngineID === null ? 0n : BigInt(util.toPointer(data.SREngineID)), true);
  // 0x60: u32
  if (data?.ulSREnginePrivateDataSize !== undefined) view.setUint32(96, Number(data.ulSREnginePrivateDataSize), true);
  // 0x64: pad4
  // 0x68: pointer
  if (data?.pSREnginePrivateData !== undefined) view.setBigUint64(104, data.pSREnginePrivateData === null ? 0n : BigInt(util.toPointer(data.pSREnginePrivateData)), true);
  return buf;
}

/**
 * Windows.Win32.Media.Speech.SPPHRASE (size: 24)
 */
export interface SPPHRASE {
  /** Windows.Win32.Media.Speech.SPPHRASE_50 */
  Base: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Foundation.PWSTR */
  pSML: string | null;
  /** ptr */
  pSemanticErrorInfo: Deno.PointerValue | Uint8Array | null;
}

export const sizeofSPPHRASE = 24;

export function allocSPPHRASE(data?: Partial<SPPHRASE>): Uint8Array {
  const buf = new Uint8Array(sizeofSPPHRASE);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.Base !== undefined) view.setBigUint64(0, data.Base === null ? 0n : BigInt(util.toPointer(data.Base)), true);
  // 0x08: buffer
  if (data?.pSML !== undefined) {
    (buf as any)._f8 = util.pwstrToFfi(data.pSML);
    view.setBigUint64(8, (buf as any)._f8 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f8)), true);
  }
  // 0x10: pointer
  if (data?.pSemanticErrorInfo !== undefined) view.setBigUint64(16, data.pSemanticErrorInfo === null ? 0n : BigInt(util.toPointer(data.pSemanticErrorInfo)), true);
  return buf;
}

/**
 * Windows.Win32.Media.Speech.SPSERIALIZEDPHRASE (size: 8)
 */
export interface SPSERIALIZEDPHRASE {
  /** u32 */
  ulSerializedSize: number;
}

export const sizeofSPSERIALIZEDPHRASE = 8;

export function allocSPSERIALIZEDPHRASE(data?: Partial<SPSERIALIZEDPHRASE>): Uint8Array {
  const buf = new Uint8Array(sizeofSPSERIALIZEDPHRASE);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.ulSerializedSize !== undefined) view.setUint32(0, Number(data.ulSerializedSize), true);
  // 0x04: pad4
  return buf;
}

/**
 * Windows.Win32.Media.Speech.SPRULE (size: 16)
 */
export interface SPRULE {
  /** Windows.Win32.Foundation.PWSTR */
  pszRuleName: string | null;
  /** u32 */
  ulRuleId: number;
  /** u32 */
  dwAttributes: number;
}

export const sizeofSPRULE = 16;

export function allocSPRULE(data?: Partial<SPRULE>): Uint8Array {
  const buf = new Uint8Array(sizeofSPRULE);
  const view = new DataView(buf.buffer);
  // 0x00: buffer
  if (data?.pszRuleName !== undefined) {
    (buf as any)._f0 = util.pwstrToFfi(data.pszRuleName);
    view.setBigUint64(0, (buf as any)._f0 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f0)), true);
  }
  // 0x08: u32
  if (data?.ulRuleId !== undefined) view.setUint32(8, Number(data.ulRuleId), true);
  // 0x0c: u32
  if (data?.dwAttributes !== undefined) view.setUint32(12, Number(data.dwAttributes), true);
  return buf;
}

/**
 * Windows.Win32.Media.Speech.SPBINARYGRAMMAR (size: 8)
 */
export interface SPBINARYGRAMMAR {
  /** u32 */
  ulTotalSerializedSize: number;
}

export const sizeofSPBINARYGRAMMAR = 8;

export function allocSPBINARYGRAMMAR(data?: Partial<SPBINARYGRAMMAR>): Uint8Array {
  const buf = new Uint8Array(sizeofSPBINARYGRAMMAR);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.ulTotalSerializedSize !== undefined) view.setUint32(0, Number(data.ulTotalSerializedSize), true);
  // 0x04: pad4
  return buf;
}

/**
 * Windows.Win32.Media.Speech.SPSTATEHANDLE__ (size: 8)
 */
export interface SPSTATEHANDLE__ {
  /** i32 */
  unused: number;
}

export const sizeofSPSTATEHANDLE__ = 8;

export function allocSPSTATEHANDLE__(data?: Partial<SPSTATEHANDLE__>): Uint8Array {
  const buf = new Uint8Array(sizeofSPSTATEHANDLE__);
  const view = new DataView(buf.buffer);
  // 0x00: i32
  if (data?.unused !== undefined) view.setInt32(0, Number(data.unused), true);
  // 0x04: pad4
  return buf;
}

/**
 * Windows.Win32.Media.Speech.SPWORDPRONUNCIATION (size: 32)
 */
export interface SPWORDPRONUNCIATION {
  /** ptr */
  pNextWordPronunciation: Deno.PointerValue | Uint8Array | null;
  /** Windows.Win32.Media.Speech.SPLEXICONTYPE */
  eLexiconType: SPLEXICONTYPE;
  /** u16 */
  LangID: number;
  /** u16 */
  wPronunciationFlags: number;
  /** Windows.Win32.Media.Speech.SPPARTOFSPEECH */
  ePartOfSpeech: SPPARTOFSPEECH;
  /** array */
  szPronunciation: Deno.PointerValue | null;
}

export const sizeofSPWORDPRONUNCIATION = 32;

export function allocSPWORDPRONUNCIATION(data?: Partial<SPWORDPRONUNCIATION>): Uint8Array {
  const buf = new Uint8Array(sizeofSPWORDPRONUNCIATION);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.pNextWordPronunciation !== undefined) view.setBigUint64(0, data.pNextWordPronunciation === null ? 0n : BigInt(util.toPointer(data.pNextWordPronunciation)), true);
  // 0x08: i32
  if (data?.eLexiconType !== undefined) view.setInt32(8, Number(data.eLexiconType), true);
  // 0x0c: u16
  if (data?.LangID !== undefined) view.setUint16(12, Number(data.LangID), true);
  // 0x0e: u16
  if (data?.wPronunciationFlags !== undefined) view.setUint16(14, Number(data.wPronunciationFlags), true);
  // 0x10: i32
  if (data?.ePartOfSpeech !== undefined) view.setInt32(16, Number(data.ePartOfSpeech), true);
  // 0x14: pad4
  // 0x18: pointer
  if (data?.szPronunciation !== undefined) view.setBigUint64(24, data.szPronunciation === null ? 0n : BigInt(util.toPointer(data.szPronunciation)), true);
  return buf;
}

/**
 * Windows.Win32.Media.Speech.SPWORDPRONUNCIATIONLIST (size: 24)
 */
export interface SPWORDPRONUNCIATIONLIST {
  /** u32 */
  ulSize: number;
  /** ptr */
  pvBuffer: Deno.PointerValue | Uint8Array | null;
  /** ptr */
  pFirstWordPronunciation: Deno.PointerValue | Uint8Array | null;
}

export const sizeofSPWORDPRONUNCIATIONLIST = 24;

export function allocSPWORDPRONUNCIATIONLIST(data?: Partial<SPWORDPRONUNCIATIONLIST>): Uint8Array {
  const buf = new Uint8Array(sizeofSPWORDPRONUNCIATIONLIST);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.ulSize !== undefined) view.setUint32(0, Number(data.ulSize), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.pvBuffer !== undefined) view.setBigUint64(8, data.pvBuffer === null ? 0n : BigInt(util.toPointer(data.pvBuffer)), true);
  // 0x10: pointer
  if (data?.pFirstWordPronunciation !== undefined) view.setBigUint64(16, data.pFirstWordPronunciation === null ? 0n : BigInt(util.toPointer(data.pFirstWordPronunciation)), true);
  return buf;
}

/**
 * Windows.Win32.Media.Speech.SPWORD (size: 32)
 */
export interface SPWORD {
  /** ptr */
  pNextWord: Deno.PointerValue | Uint8Array | null;
  /** u16 */
  LangID: number;
  /** u16 */
  wReserved: number;
  /** Windows.Win32.Media.Speech.SPWORDTYPE */
  eWordType: SPWORDTYPE;
  /** Windows.Win32.Foundation.PWSTR */
  pszWord: string | null;
  /** ptr */
  pFirstWordPronunciation: Deno.PointerValue | Uint8Array | null;
}

export const sizeofSPWORD = 32;

export function allocSPWORD(data?: Partial<SPWORD>): Uint8Array {
  const buf = new Uint8Array(sizeofSPWORD);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.pNextWord !== undefined) view.setBigUint64(0, data.pNextWord === null ? 0n : BigInt(util.toPointer(data.pNextWord)), true);
  // 0x08: u16
  if (data?.LangID !== undefined) view.setUint16(8, Number(data.LangID), true);
  // 0x0a: u16
  if (data?.wReserved !== undefined) view.setUint16(10, Number(data.wReserved), true);
  // 0x0c: i32
  if (data?.eWordType !== undefined) view.setInt32(12, Number(data.eWordType), true);
  // 0x10: buffer
  if (data?.pszWord !== undefined) {
    (buf as any)._f16 = util.pwstrToFfi(data.pszWord);
    view.setBigUint64(16, (buf as any)._f16 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f16)), true);
  }
  // 0x18: pointer
  if (data?.pFirstWordPronunciation !== undefined) view.setBigUint64(24, data.pFirstWordPronunciation === null ? 0n : BigInt(util.toPointer(data.pFirstWordPronunciation)), true);
  return buf;
}

/**
 * Windows.Win32.Media.Speech.SPWORDLIST (size: 24)
 */
export interface SPWORDLIST {
  /** u32 */
  ulSize: number;
  /** ptr */
  pvBuffer: Deno.PointerValue | Uint8Array | null;
  /** ptr */
  pFirstWord: Deno.PointerValue | Uint8Array | null;
}

export const sizeofSPWORDLIST = 24;

export function allocSPWORDLIST(data?: Partial<SPWORDLIST>): Uint8Array {
  const buf = new Uint8Array(sizeofSPWORDLIST);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.ulSize !== undefined) view.setUint32(0, Number(data.ulSize), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.pvBuffer !== undefined) view.setBigUint64(8, data.pvBuffer === null ? 0n : BigInt(util.toPointer(data.pvBuffer)), true);
  // 0x10: pointer
  if (data?.pFirstWord !== undefined) view.setBigUint64(16, data.pFirstWord === null ? 0n : BigInt(util.toPointer(data.pFirstWord)), true);
  return buf;
}

/**
 * Windows.Win32.Media.Speech.SPSHORTCUTPAIR (size: 32)
 */
export interface SPSHORTCUTPAIR {
  /** ptr */
  pNextSHORTCUTPAIR: Deno.PointerValue | Uint8Array | null;
  /** u16 */
  LangID: number;
  /** Windows.Win32.Media.Speech.SPSHORTCUTTYPE */
  shType: SPSHORTCUTTYPE;
  /** Windows.Win32.Foundation.PWSTR */
  pszDisplay: string | null;
  /** Windows.Win32.Foundation.PWSTR */
  pszSpoken: string | null;
}

export const sizeofSPSHORTCUTPAIR = 32;

export function allocSPSHORTCUTPAIR(data?: Partial<SPSHORTCUTPAIR>): Uint8Array {
  const buf = new Uint8Array(sizeofSPSHORTCUTPAIR);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.pNextSHORTCUTPAIR !== undefined) view.setBigUint64(0, data.pNextSHORTCUTPAIR === null ? 0n : BigInt(util.toPointer(data.pNextSHORTCUTPAIR)), true);
  // 0x08: u16
  if (data?.LangID !== undefined) view.setUint16(8, Number(data.LangID), true);
  // 0x0a: i32
  if (data?.shType !== undefined) view.setInt32(10, Number(data.shType), true);
  // 0x0e: pad2
  // 0x10: buffer
  if (data?.pszDisplay !== undefined) {
    (buf as any)._f16 = util.pwstrToFfi(data.pszDisplay);
    view.setBigUint64(16, (buf as any)._f16 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f16)), true);
  }
  // 0x18: buffer
  if (data?.pszSpoken !== undefined) {
    (buf as any)._f24 = util.pwstrToFfi(data.pszSpoken);
    view.setBigUint64(24, (buf as any)._f24 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f24)), true);
  }
  return buf;
}

/**
 * Windows.Win32.Media.Speech.SPSHORTCUTPAIRLIST (size: 24)
 */
export interface SPSHORTCUTPAIRLIST {
  /** u32 */
  ulSize: number;
  /** ptr */
  pvBuffer: Deno.PointerValue | Uint8Array | null;
  /** ptr */
  pFirstShortcutPair: Deno.PointerValue | Uint8Array | null;
}

export const sizeofSPSHORTCUTPAIRLIST = 24;

export function allocSPSHORTCUTPAIRLIST(data?: Partial<SPSHORTCUTPAIRLIST>): Uint8Array {
  const buf = new Uint8Array(sizeofSPSHORTCUTPAIRLIST);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.ulSize !== undefined) view.setUint32(0, Number(data.ulSize), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.pvBuffer !== undefined) view.setBigUint64(8, data.pvBuffer === null ? 0n : BigInt(util.toPointer(data.pvBuffer)), true);
  // 0x10: pointer
  if (data?.pFirstShortcutPair !== undefined) view.setBigUint64(16, data.pFirstShortcutPair === null ? 0n : BigInt(util.toPointer(data.pFirstShortcutPair)), true);
  return buf;
}

/**
 * Windows.Win32.Media.Speech.SPVPITCH (size: 8)
 */
export interface SPVPITCH {
  /** i32 */
  MiddleAdj: number;
  /** i32 */
  RangeAdj: number;
}

export const sizeofSPVPITCH = 8;

export function allocSPVPITCH(data?: Partial<SPVPITCH>): Uint8Array {
  const buf = new Uint8Array(sizeofSPVPITCH);
  const view = new DataView(buf.buffer);
  // 0x00: i32
  if (data?.MiddleAdj !== undefined) view.setInt32(0, Number(data.MiddleAdj), true);
  // 0x04: i32
  if (data?.RangeAdj !== undefined) view.setInt32(4, Number(data.RangeAdj), true);
  return buf;
}

/**
 * Windows.Win32.Media.Speech.SPVCONTEXT (size: 24)
 */
export interface SPVCONTEXT {
  /** Windows.Win32.Foundation.PWSTR */
  pCategory: string | null;
  /** Windows.Win32.Foundation.PWSTR */
  pBefore: string | null;
  /** Windows.Win32.Foundation.PWSTR */
  pAfter: string | null;
}

export const sizeofSPVCONTEXT = 24;

export function allocSPVCONTEXT(data?: Partial<SPVCONTEXT>): Uint8Array {
  const buf = new Uint8Array(sizeofSPVCONTEXT);
  const view = new DataView(buf.buffer);
  // 0x00: buffer
  if (data?.pCategory !== undefined) {
    (buf as any)._f0 = util.pwstrToFfi(data.pCategory);
    view.setBigUint64(0, (buf as any)._f0 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f0)), true);
  }
  // 0x08: buffer
  if (data?.pBefore !== undefined) {
    (buf as any)._f8 = util.pwstrToFfi(data.pBefore);
    view.setBigUint64(8, (buf as any)._f8 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f8)), true);
  }
  // 0x10: buffer
  if (data?.pAfter !== undefined) {
    (buf as any)._f16 = util.pwstrToFfi(data.pAfter);
    view.setBigUint64(16, (buf as any)._f16 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f16)), true);
  }
  return buf;
}

/**
 * Windows.Win32.Media.Speech.SPVSTATE (size: 64)
 */
export interface SPVSTATE {
  /** Windows.Win32.Media.Speech.SPVACTIONS */
  eAction: SPVACTIONS;
  /** u16 */
  LangID: number;
  /** u16 */
  wReserved: number;
  /** i32 */
  EmphAdj: number;
  /** i32 */
  RateAdj: number;
  /** u32 */
  Volume: number;
  /** Windows.Win32.Media.Speech.SPVPITCH */
  PitchAdj: Uint8Array | Deno.PointerValue | null;
  /** u32 */
  SilenceMSecs: number;
  /** ptr */
  pPhoneIds: Deno.PointerValue | Uint8Array | null;
  /** Windows.Win32.Media.Speech.SPPARTOFSPEECH */
  ePartOfSpeech: SPPARTOFSPEECH;
  /** Windows.Win32.Media.Speech.SPVCONTEXT */
  Context: Uint8Array | Deno.PointerValue | null;
}

export const sizeofSPVSTATE = 64;

export function allocSPVSTATE(data?: Partial<SPVSTATE>): Uint8Array {
  const buf = new Uint8Array(sizeofSPVSTATE);
  const view = new DataView(buf.buffer);
  // 0x00: i32
  if (data?.eAction !== undefined) view.setInt32(0, Number(data.eAction), true);
  // 0x04: u16
  if (data?.LangID !== undefined) view.setUint16(4, Number(data.LangID), true);
  // 0x06: u16
  if (data?.wReserved !== undefined) view.setUint16(6, Number(data.wReserved), true);
  // 0x08: i32
  if (data?.EmphAdj !== undefined) view.setInt32(8, Number(data.EmphAdj), true);
  // 0x0c: i32
  if (data?.RateAdj !== undefined) view.setInt32(12, Number(data.RateAdj), true);
  // 0x10: u32
  if (data?.Volume !== undefined) view.setUint32(16, Number(data.Volume), true);
  // 0x14: pad4
  // 0x18: pointer
  if (data?.PitchAdj !== undefined) view.setBigUint64(24, data.PitchAdj === null ? 0n : BigInt(util.toPointer(data.PitchAdj)), true);
  // 0x20: u32
  if (data?.SilenceMSecs !== undefined) view.setUint32(32, Number(data.SilenceMSecs), true);
  // 0x24: pad4
  // 0x28: pointer
  if (data?.pPhoneIds !== undefined) view.setBigUint64(40, data.pPhoneIds === null ? 0n : BigInt(util.toPointer(data.pPhoneIds)), true);
  // 0x30: i32
  if (data?.ePartOfSpeech !== undefined) view.setInt32(48, Number(data.ePartOfSpeech), true);
  // 0x34: pad4
  // 0x38: pointer
  if (data?.Context !== undefined) view.setBigUint64(56, data.Context === null ? 0n : BigInt(util.toPointer(data.Context)), true);
  return buf;
}

/**
 * Windows.Win32.Media.Speech.SPVOICESTATUS (size: 56)
 */
export interface SPVOICESTATUS {
  /** u32 */
  ulCurrentStream: number;
  /** u32 */
  ulLastStreamQueued: number;
  /** Windows.Win32.Foundation.HRESULT */
  hrLastResult: Uint8Array | Deno.PointerValue | null;
  /** u32 */
  dwRunningState: number;
  /** u32 */
  ulInputWordPos: number;
  /** u32 */
  ulInputWordLen: number;
  /** u32 */
  ulInputSentPos: number;
  /** u32 */
  ulInputSentLen: number;
  /** i32 */
  lBookmarkId: number;
  /** u16 */
  PhonemeId: number;
  /** Windows.Win32.Media.Speech.SPVISEMES */
  VisemeId: SPVISEMES;
  /** u32 */
  dwReserved1: number;
  /** u32 */
  dwReserved2: number;
}

export const sizeofSPVOICESTATUS = 56;

export function allocSPVOICESTATUS(data?: Partial<SPVOICESTATUS>): Uint8Array {
  const buf = new Uint8Array(sizeofSPVOICESTATUS);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.ulCurrentStream !== undefined) view.setUint32(0, Number(data.ulCurrentStream), true);
  // 0x04: u32
  if (data?.ulLastStreamQueued !== undefined) view.setUint32(4, Number(data.ulLastStreamQueued), true);
  // 0x08: pointer
  if (data?.hrLastResult !== undefined) view.setBigUint64(8, data.hrLastResult === null ? 0n : BigInt(util.toPointer(data.hrLastResult)), true);
  // 0x10: u32
  if (data?.dwRunningState !== undefined) view.setUint32(16, Number(data.dwRunningState), true);
  // 0x14: u32
  if (data?.ulInputWordPos !== undefined) view.setUint32(20, Number(data.ulInputWordPos), true);
  // 0x18: u32
  if (data?.ulInputWordLen !== undefined) view.setUint32(24, Number(data.ulInputWordLen), true);
  // 0x1c: u32
  if (data?.ulInputSentPos !== undefined) view.setUint32(28, Number(data.ulInputSentPos), true);
  // 0x20: u32
  if (data?.ulInputSentLen !== undefined) view.setUint32(32, Number(data.ulInputSentLen), true);
  // 0x24: i32
  if (data?.lBookmarkId !== undefined) view.setInt32(36, Number(data.lBookmarkId), true);
  // 0x28: u16
  if (data?.PhonemeId !== undefined) view.setUint16(40, Number(data.PhonemeId), true);
  // 0x2a: i32
  if (data?.VisemeId !== undefined) view.setInt32(42, Number(data.VisemeId), true);
  // 0x2e: u32
  if (data?.dwReserved1 !== undefined) view.setUint32(46, Number(data.dwReserved1), true);
  // 0x32: u32
  if (data?.dwReserved2 !== undefined) view.setUint32(50, Number(data.dwReserved2), true);
  // 0x36: pad2
  return buf;
}

/**
 * Windows.Win32.Foundation.FILETIME (size: 8)
 */
export interface FILETIME {
  /** u32 */
  dwLowDateTime: number;
  /** u32 */
  dwHighDateTime: number;
}

export const sizeofFILETIME = 8;

export function allocFILETIME(data?: Partial<FILETIME>): Uint8Array {
  const buf = new Uint8Array(sizeofFILETIME);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.dwLowDateTime !== undefined) view.setUint32(0, Number(data.dwLowDateTime), true);
  // 0x04: u32
  if (data?.dwHighDateTime !== undefined) view.setUint32(4, Number(data.dwHighDateTime), true);
  return buf;
}

/**
 * Windows.Win32.Media.Speech.SPRECORESULTTIMES (size: 32)
 */
export interface SPRECORESULTTIMES {
  /** Windows.Win32.Foundation.FILETIME */
  ftStreamTime: Uint8Array | Deno.PointerValue | null;
  /** u64 */
  ullLength: Deno.PointerValue;
  /** u32 */
  dwTickCount: number;
  /** u64 */
  ullStart: Deno.PointerValue;
}

export const sizeofSPRECORESULTTIMES = 32;

export function allocSPRECORESULTTIMES(data?: Partial<SPRECORESULTTIMES>): Uint8Array {
  const buf = new Uint8Array(sizeofSPRECORESULTTIMES);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.ftStreamTime !== undefined) view.setBigUint64(0, data.ftStreamTime === null ? 0n : BigInt(util.toPointer(data.ftStreamTime)), true);
  // 0x08: u64
  if (data?.ullLength !== undefined) view.setBigUint64(8, BigInt(data.ullLength), true);
  // 0x10: u32
  if (data?.dwTickCount !== undefined) view.setUint32(16, Number(data.dwTickCount), true);
  // 0x14: pad4
  // 0x18: u64
  if (data?.ullStart !== undefined) view.setBigUint64(24, BigInt(data.ullStart), true);
  return buf;
}

/**
 * Windows.Win32.Media.Speech.SPSERIALIZEDRESULT (size: 8)
 */
export interface SPSERIALIZEDRESULT {
  /** u32 */
  ulSerializedSize: number;
}

export const sizeofSPSERIALIZEDRESULT = 8;

export function allocSPSERIALIZEDRESULT(data?: Partial<SPSERIALIZEDRESULT>): Uint8Array {
  const buf = new Uint8Array(sizeofSPSERIALIZEDRESULT);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.ulSerializedSize !== undefined) view.setUint32(0, Number(data.ulSerializedSize), true);
  // 0x04: pad4
  return buf;
}

/**
 * Windows.Win32.Media.Speech.SPTEXTSELECTIONINFO (size: 16)
 */
export interface SPTEXTSELECTIONINFO {
  /** u32 */
  ulStartActiveOffset: number;
  /** u32 */
  cchActiveChars: number;
  /** u32 */
  ulStartSelection: number;
  /** u32 */
  cchSelection: number;
}

export const sizeofSPTEXTSELECTIONINFO = 16;

export function allocSPTEXTSELECTIONINFO(data?: Partial<SPTEXTSELECTIONINFO>): Uint8Array {
  const buf = new Uint8Array(sizeofSPTEXTSELECTIONINFO);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.ulStartActiveOffset !== undefined) view.setUint32(0, Number(data.ulStartActiveOffset), true);
  // 0x04: u32
  if (data?.cchActiveChars !== undefined) view.setUint32(4, Number(data.cchActiveChars), true);
  // 0x08: u32
  if (data?.ulStartSelection !== undefined) view.setUint32(8, Number(data.ulStartSelection), true);
  // 0x0c: u32
  if (data?.cchSelection !== undefined) view.setUint32(12, Number(data.cchSelection), true);
  return buf;
}

/**
 * Windows.Win32.Media.Speech.SPPROPERTYINFO (size: 32)
 */
export interface SPPROPERTYINFO {
  /** Windows.Win32.Foundation.PWSTR */
  pszName: string | null;
  /** u32 */
  ulId: number;
  /** Windows.Win32.Foundation.PWSTR */
  pszValue: string | null;
  /** Windows.Win32.System.Com.VARIANT */
  vValue: Uint8Array | Deno.PointerValue | null;
}

export const sizeofSPPROPERTYINFO = 32;

export function allocSPPROPERTYINFO(data?: Partial<SPPROPERTYINFO>): Uint8Array {
  const buf = new Uint8Array(sizeofSPPROPERTYINFO);
  const view = new DataView(buf.buffer);
  // 0x00: buffer
  if (data?.pszName !== undefined) {
    (buf as any)._f0 = util.pwstrToFfi(data.pszName);
    view.setBigUint64(0, (buf as any)._f0 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f0)), true);
  }
  // 0x08: u32
  if (data?.ulId !== undefined) view.setUint32(8, Number(data.ulId), true);
  // 0x0c: pad4
  // 0x10: buffer
  if (data?.pszValue !== undefined) {
    (buf as any)._f16 = util.pwstrToFfi(data.pszValue);
    view.setBigUint64(16, (buf as any)._f16 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f16)), true);
  }
  // 0x18: pointer
  if (data?.vValue !== undefined) view.setBigUint64(24, data.vValue === null ? 0n : BigInt(util.toPointer(data.vValue)), true);
  return buf;
}

/**
 * Windows.Win32.Media.Speech.SPRECOCONTEXTSTATUS (size: 24)
 */
export interface SPRECOCONTEXTSTATUS {
  /** Windows.Win32.Media.Speech.SPINTERFERENCE */
  eInterference: SPINTERFERENCE;
  /** array */
  szRequestTypeOfUI: Deno.PointerValue | null;
  /** u32 */
  dwReserved1: number;
  /** u32 */
  dwReserved2: number;
}

export const sizeofSPRECOCONTEXTSTATUS = 24;

export function allocSPRECOCONTEXTSTATUS(data?: Partial<SPRECOCONTEXTSTATUS>): Uint8Array {
  const buf = new Uint8Array(sizeofSPRECOCONTEXTSTATUS);
  const view = new DataView(buf.buffer);
  // 0x00: i32
  if (data?.eInterference !== undefined) view.setInt32(0, Number(data.eInterference), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.szRequestTypeOfUI !== undefined) view.setBigUint64(8, data.szRequestTypeOfUI === null ? 0n : BigInt(util.toPointer(data.szRequestTypeOfUI)), true);
  // 0x10: u32
  if (data?.dwReserved1 !== undefined) view.setUint32(16, Number(data.dwReserved1), true);
  // 0x14: u32
  if (data?.dwReserved2 !== undefined) view.setUint32(20, Number(data.dwReserved2), true);
  return buf;
}

/**
 * Windows.Win32.Media.Speech.SPRECOGNIZERSTATUS (size: 56)
 */
export interface SPRECOGNIZERSTATUS {
  /** Windows.Win32.Media.Speech.SPAUDIOSTATUS */
  AudioStatus: Uint8Array | Deno.PointerValue | null;
  /** u64 */
  ullRecognitionStreamPos: Deno.PointerValue;
  /** u32 */
  ulStreamNumber: number;
  /** u32 */
  ulNumActive: number;
  /** System.Guid */
  clsidEngine: Uint8Array | Deno.PointerValue | null;
  /** u32 */
  cLangIDs: number;
  /** array */
  aLangID: Deno.PointerValue | null;
  /** u64 */
  ullRecognitionStreamTime: Deno.PointerValue;
}

export const sizeofSPRECOGNIZERSTATUS = 56;

export function allocSPRECOGNIZERSTATUS(data?: Partial<SPRECOGNIZERSTATUS>): Uint8Array {
  const buf = new Uint8Array(sizeofSPRECOGNIZERSTATUS);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.AudioStatus !== undefined) view.setBigUint64(0, data.AudioStatus === null ? 0n : BigInt(util.toPointer(data.AudioStatus)), true);
  // 0x08: u64
  if (data?.ullRecognitionStreamPos !== undefined) view.setBigUint64(8, BigInt(data.ullRecognitionStreamPos), true);
  // 0x10: u32
  if (data?.ulStreamNumber !== undefined) view.setUint32(16, Number(data.ulStreamNumber), true);
  // 0x14: u32
  if (data?.ulNumActive !== undefined) view.setUint32(20, Number(data.ulNumActive), true);
  // 0x18: pointer
  if (data?.clsidEngine !== undefined) view.setBigUint64(24, data.clsidEngine === null ? 0n : BigInt(util.toPointer(data.clsidEngine)), true);
  // 0x20: u32
  if (data?.cLangIDs !== undefined) view.setUint32(32, Number(data.cLangIDs), true);
  // 0x24: pad4
  // 0x28: pointer
  if (data?.aLangID !== undefined) view.setBigUint64(40, data.aLangID === null ? 0n : BigInt(util.toPointer(data.aLangID)), true);
  // 0x30: u64
  if (data?.ullRecognitionStreamTime !== undefined) view.setBigUint64(48, BigInt(data.ullRecognitionStreamTime), true);
  return buf;
}

/**
 * Windows.Win32.Media.Speech.SPNORMALIZATIONLIST (size: 16)
 */
export interface SPNORMALIZATIONLIST {
  /** u32 */
  ulSize: number;
  /** ptr */
  ppszzNormalizedList: Deno.PointerValue | Uint8Array | null;
}

export const sizeofSPNORMALIZATIONLIST = 16;

export function allocSPNORMALIZATIONLIST(data?: Partial<SPNORMALIZATIONLIST>): Uint8Array {
  const buf = new Uint8Array(sizeofSPNORMALIZATIONLIST);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.ulSize !== undefined) view.setUint32(0, Number(data.ulSize), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.ppszzNormalizedList !== undefined) view.setBigUint64(8, data.ppszzNormalizedList === null ? 0n : BigInt(util.toPointer(data.ppszzNormalizedList)), true);
  return buf;
}

/**
 * Windows.Win32.Media.Speech.SPDISPLAYTOKEN (size: 24)
 */
export interface SPDISPLAYTOKEN {
  /** Windows.Win32.Foundation.PWSTR */
  pszLexical: string | null;
  /** Windows.Win32.Foundation.PWSTR */
  pszDisplay: string | null;
  /** u8 */
  bDisplayAttributes: number;
}

export const sizeofSPDISPLAYTOKEN = 24;

export function allocSPDISPLAYTOKEN(data?: Partial<SPDISPLAYTOKEN>): Uint8Array {
  const buf = new Uint8Array(sizeofSPDISPLAYTOKEN);
  const view = new DataView(buf.buffer);
  // 0x00: buffer
  if (data?.pszLexical !== undefined) {
    (buf as any)._f0 = util.pwstrToFfi(data.pszLexical);
    view.setBigUint64(0, (buf as any)._f0 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f0)), true);
  }
  // 0x08: buffer
  if (data?.pszDisplay !== undefined) {
    (buf as any)._f8 = util.pwstrToFfi(data.pszDisplay);
    view.setBigUint64(8, (buf as any)._f8 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f8)), true);
  }
  // 0x10: u8
  if (data?.bDisplayAttributes !== undefined) view.setUint8(16, Number(data.bDisplayAttributes));
  // 0x11: pad7
  return buf;
}

/**
 * Windows.Win32.Media.Speech.SPDISPLAYPHRASE (size: 16)
 */
export interface SPDISPLAYPHRASE {
  /** u32 */
  ulNumTokens: number;
  /** ptr */
  pTokens: Deno.PointerValue | Uint8Array | null;
}

export const sizeofSPDISPLAYPHRASE = 16;

export function allocSPDISPLAYPHRASE(data?: Partial<SPDISPLAYPHRASE>): Uint8Array {
  const buf = new Uint8Array(sizeofSPDISPLAYPHRASE);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.ulNumTokens !== undefined) view.setUint32(0, Number(data.ulNumTokens), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.pTokens !== undefined) view.setBigUint64(8, data.pTokens === null ? 0n : BigInt(util.toPointer(data.pTokens)), true);
  return buf;
}

// Native Libraries

// Symbols

