/// Auto-generated by Deno Win32: Windows.Win32.Media.DirectShow.Apis

import * as util from "../../util.ts";

// Enums
export type OA_BOOL = number;
export type MPEGLAYER3WAVEFORMAT_FLAGS = number;
export type AMVP_SELECT_FORMAT_BY = number;
export type AMVP_MODE = number;
export type PIN_DIRECTION = number;
export type FILTER_STATE = number;
export type AM_SAMPLE_PROPERTY_FLAGS = number;
export type AM_SEEKING_SEEKING_FLAGS = number;
export type AM_SEEKING_SEEKING_CAPABILITIES = number;
export type AM_MEDIAEVENT_FLAGS = number;
export type IFILTERMAPPER_MERIT = number;
export type REG_PINFLAG = number;
export type QualityMessageType = number;
export type COLORKEY_TYPE = number;
export type ADVISE_TYPE = number;
export type AM_FILESINK_FLAGS = number;
export type _AM_RENSDEREXFLAGS = number;
export type AM_STREAM_INFO_FLAGS = number;
export type InterleavingMode = number;
export type CompressionCaps = number;
export type VfwCaptureDialogs = number;
export type VfwCompressDialogs = number;
export type AnalogVideoStandard = number;
export type TunerInputType = number;
export type VideoCopyProtectionType = number;
export type PhysicalConnectorType = number;
export type VideoProcAmpProperty = number;
export type VideoProcAmpFlags = number;
export type CameraControlProperty = number;
export type CameraControlFlags = number;
export type VideoControlFlags = number;
export type AMTunerSubChannel = number;
export type AMTunerSignalStrength = number;
export type AMTunerModeType = number;
export type AMTunerEventType = number;
export type TVAudioMode = number;
export type AMTVAudioEventType = number;
export type AMPROPERTY_PIN = number;
export type _AMSTREAMSELECTINFOFLAGS = number;
export type _AMSTREAMSELECTENABLEFLAGS = number;
export type _AMRESCTL_RESERVEFLAGS = number;
export type _AM_FILTER_MISC_FLAGS = number;
export type DECIMATION_USAGE = number;
export type _AM_PUSHSOURCE_FLAGS = number;
export type _DVENCODERRESOLUTION = number;
export type _DVENCODERVIDEOFORMAT = number;
export type _DVENCODERFORMAT = number;
export type _DVDECODERRESOLUTION = number;
export type _DVRESOLUTION = number;
export type _AM_AUDIO_RENDERER_STAT_PARAM = number;
export type _AM_INTF_SEARCH_FLAGS = number;
export type AMOVERLAYFX = number;
export type _AM_PIN_FLOW_CONTROL_BLOCK_FLAGS = number;
export type AM_GRAPH_CONFIG_RECONNECT_FLAGS = number;
export type _REM_FILTER_FLAGS = number;
export type AM_FILTER_FLAGS = number;
export type VMRPresentationFlags = number;
export type VMRSurfaceAllocationFlags = number;
export type VMR_ASPECT_RATIO_MODE = number;
export type VMRMixerPrefs = number;
export type VMRRenderPrefs = number;
export type VMRMode = number;
export type STREAMIF_CONSTANTS = number;
export type VMRDeinterlacePrefs = number;
export type VMRDeinterlaceTech = number;
export type DVD_DOMAIN = number;
export type DVD_MENU_ID = number;
export type DVD_DISC_SIDE = number;
export type DVD_PREFERRED_DISPLAY_MODE = number;
export type DVD_FRAMERATE = number;
export type DVD_NavCmdType = number;
export type DVD_TIMECODE_FLAGS = number;
export type VALID_UOP_FLAG = number;
export type DVD_CMD_FLAGS = number;
export type DVD_OPTION_FLAG = number;
export type DVD_RELATIVE_BUTTON = number;
export type DVD_PARENTAL_LEVEL = number;
export type DVD_AUDIO_LANG_EXT = number;
export type DVD_SUBPICTURE_LANG_EXT = number;
export type DVD_AUDIO_APPMODE = number;
export type DVD_AUDIO_FORMAT = number;
export type DVD_KARAOKE_DOWNMIX = number;
export type DVD_KARAOKE_CONTENTS = number;
export type DVD_KARAOKE_ASSIGNMENT = number;
export type DVD_VIDEO_COMPRESSION = number;
export type DVD_SUBPICTURE_TYPE = number;
export type DVD_SUBPICTURE_CODING = number;
export type DVD_TITLE_APPMODE = number;
export type DVD_TextStringType = number;
export type DVD_TextCharSet = number;
export type AM_DVD_GRAPH_FLAGS = number;
export type AM_DVD_STREAM_FLAGS = number;
export type _AM_OVERLAY_NOTIFY_FLAGS = number;
export type BDA_EVENT_ID = number;
export type BDA_MULTICAST_MODE = number;
export type BDA_SIGNAL_STATE = number;
export type BDA_CHANGE_STATE = number;
export type MEDIA_SAMPLE_CONTENT = number;
export type ISDBCAS_REQUEST_ID = number;
export type MUX_PID_TYPE = number;
export type DVBSystemType = number;
export type BDA_Channel = number;
export type ComponentCategory = number;
export type ComponentStatus = number;
export type MPEG2StreamType = number;
export type ATSCComponentTypeFlags = number;
export type BinaryConvolutionCodeRate = number;
export type FECMethod = number;
export type ModulationType = number;
export type ScanModulationTypes = number;
export type SpectralInversion = number;
export type Polarisation = number;
export type LNB_Source = number;
export type GuardInterval = number;
export type HierarchyAlpha = number;
export type TransmissionMode = number;
export type RollOff = number;
export type Pilot = number;
export type BDA_Frequency = number;
export type BDA_Range = number;
export type BDA_Channel_Bandwidth = number;
export type BDA_Frequency_Multiplier = number;
export type BDA_Comp_Flags = number;
export type ApplicationTypeType = number;
export type BDA_CONDITIONALACCESS_REQUESTTYPE = number;
export type BDA_CONDITIONALACCESS_MMICLOSEREASON = number;
export type BDA_CONDITIONALACCESS_SESSION_RESULT = number;
export type BDA_DISCOVERY_STATE = number;
export type SmartCardStatusType = number;
export type SmartCardAssociationType = number;
export type LocationCodeSchemeType = number;
export type EntitlementType = number;
export type UICloseReasonType = number;
export type BDA_DrmPairingError = number;
export type KSPROPERTY_IPSINK = number;
export type AMExtendedSeekingCapabilities = number;
export type AM_LINE21_CCLEVEL = number;
export type AM_LINE21_CCSERVICE = number;
export type AM_LINE21_CCSTATE = number;
export type AM_LINE21_CCSTYLE = number;
export type AM_LINE21_DRAWBGMODE = number;
export type AM_WST_LEVEL = number;
export type AM_WST_SERVICE = number;
export type AM_WST_STATE = number;
export type AM_WST_STYLE = number;
export type AM_WST_DRAWBGMODE = number;
export type STREAM_TYPE = number;
export type STREAM_STATE = number;
export type COMPLETION_STATUS_FLAGS = number;
export type MMSSF_GET_INFORMATION_FLAGS = number;
export type SSUPDATE_TYPE = number;
export type DDSFF_FLAGS = number;
export type AMMSF_MMS_INIT_FLAGS = number;
export type AMMSF_MS_FLAGS = number;
export type AMMSF_RENDER_FLAGS = number;
export type OUTPUT_STATE = number;
export type BI_COMPRESSION = number;
export type AM_PROPERTY_FRAMESTEP = number;
export type AM_ASPECT_RATIO_MODE = number;
export type VMR9PresentationFlags = number;
export type VMR9SurfaceAllocationFlags = number;
export type D3DFORMAT = number;
export type D3DPOOL = number;
export type VMR9AspectRatioMode = number;
export type VMR9MixerPrefs = number;
export type VMR9ProcAmpControlFlags = number;
export type VMR9AlphaBitmapFlags = number;
export type VMR9RenderPrefs = number;
export type VMR9Mode = number;
export type VMR9DeinterlacePrefs = number;
export type VMR9DeinterlaceTech = number;
export type VMR9_SampleFormat = number;
export type AM_PROPERTY_AC3 = number;
export type AM_PROPERTY_DVDSUBPIC = number;
export type AM_PROPERTY_DVDCOPYPROT = number;
export type AM_DIGITAL_CP = number;
export type AM_DVDCOPYSTATE = number;
export type AM_COPY_MACROVISION_LEVEL = number;
export type AM_MPEG2Level = number;
export type AM_MPEG2Profile = number;
export type AM_PROPERTY_DVDKARAOKE = number;
export type AM_PROPERTY_TS_RATE_CHANGE = number;
export type AM_PROPERTY_DVD_RATE_CHANGE = number;
export type DVD_PLAY_DIRECTION = number;
export type DVD_ERROR = number;
export type DVD_WARNING = number;
export type DVD_PB_STOPPED = number;
export type SNDDEV_ERR = number;
export type MP_TYPE = number;
export type MP_CURVE_TYPE = number;
export type DXVA2_SampleFlags = number;
export type DXVA2_DestinationFlags = number;
export type AMPlayListItemFlags = number;
export type AMPlayListFlags = number;
export type AMPlayListEventFlags = number;
export type DISPID_TUNER = number;
export type EnTvRat_System = number;
export type EnTvRat_GenericLevel = number;
export type EnTvRat_MPAA = number;
export type EnTvRat_US_TV = number;
export type EnTvRat_CAE_TV = number;
export type EnTvRat_CAF_TV = number;
export type BfEnTvRat_GenericAttributes = number;
export type BfEnTvRat_Attributes_US_TV = number;
export type BfEnTvRat_Attributes_MPAA = number;
export type BfEnTvRat_Attributes_CAE_TV = number;
export type BfEnTvRat_Attributes_CAF_TV = number;
export type FormatNotSupportedEvents = number;
export type ProtType = number;
export type EncDecEvents = number;
export type CPRecordingStatus = number;
export type CPEventBitShift = number;
export type CPEvents = number;
export type RevokedComponent = number;
export type EnTag_Mode = number;
export type COPPEventBlockReason = number;
export type LicenseEventBlockReason = number;
export type DownResEventParam = number;
export type SegDispidList = number;
export type SegEventidList = number;
export type PositionModeList = number;
export type RecordingType = number;
export type MSVidCCService = number;
export type MSVidSinkStreams = number;
export type MSVidSegmentType = number;
export type MSVidCtlButtonstate = number;
export type DVDMenuIDConstants = number;
export type DVDFilterState = number;
export type DVDTextStringType = number;
export type DVDSPExt = number;
export type SourceSizeList = number;
export type MSViddispidList = number;
export type DisplaySizeList = number;
export type MSVidCtlStateList = number;
export type RECORDING_TYPE = number;
export type STREAMBUFFER_ATTR_DATATYPE = number;
export type CROSSBAR_DEFAULT_FLAGS = number;
export type MPEG_CURRENT_NEXT_BIT = number;
export type MPEG_CONTEXT_TYPE = number;
export type MPEG_REQUEST_TYPE = number;
export type VA_VIDEO_FORMAT = number;
export type VA_COLOR_PRIMARIES = number;
export type VA_TRANSFER_CHARACTERISTICS = number;
export type VA_MATRIX_COEFFICIENTS = number;
export type DVB_STRCONV_MODE = number;
export type CRID_LOCATION = number;
export type DESC_LINKAGE_TYPE = number;
export type ChannelChangeSpanningEvent_State = number;
export type ChannelType = number;
export type SignalAndServiceStatusSpanningEvent_State = number;
export type KSPROPERTY_BDA_ETHERNET_FILTER = number;
export type KSPROPERTY_BDA_IPv4_FILTER = number;
export type KSPROPERTY_BDA_IPv6_FILTER = number;
export type KSPROPERTY_BDA_SIGNAL_STATS = number;
export type BDA_LockType = number;
export type KSMETHOD_BDA_CHANGE_SYNC = number;
export type KSMETHOD_BDA_DEVICE_CONFIGURATION = number;
export type KSPROPERTY_BDA_TOPOLOGY = number;
export type KSPROPERTY_BDA_PIN_CONTROL = number;
export type KSPROPERTY_BDA_PIN_EVENT = number;
export type KSPROPERTY_BDA_VOID_TRANSFORM = number;
export type KSPROPERTY_BDA_NULL_TRANSFORM = number;
export type KSPROPERTY_BDA_FREQUENCY_FILTER = number;
export type BDA_SignalType = number;
export type BDA_DigitalSignalStandard = number;
export type KSEVENT_BDA_TUNER = number;
export type KSPROPERTY_BDA_LNB_INFO = number;
export type KSPROPERTY_BDA_DISEQC_COMMAND = number;
export type KSPROPERTY_BDA_DISEQC_EVENT = number;
export type KSPROPERTY_BDA_DIGITAL_DEMODULATOR = number;
export type KSPROPERTY_BDA_AUTODEMODULATE = number;
export type KSPROPERTY_IDS_BDA_TABLE = number;
export type KSPROPERTY_BDA_PIDFILTER = number;
export type KSPROPERTY_BDA_CA = number;
export type KSPROPERTY_BDA_CA_EVENT = number;
export type KSMETHOD_BDA_DRM = number;
export type KSMETHOD_BDA_WMDRM = number;
export type KSMETHOD_BDA_WMDRM_TUNER = number;
export type KSMETHOD_BDA_EVENTING_SERVICE = number;
export type KSEVENT_BDA_EVENT_TYPE = number;
export type KSMETHOD_BDA_DEBUG_SERVICE = number;
export type KSMETHOD_BDA_TUNER_SERVICE = number;
export type KSMETHOD_BDA_GPNV_SERVICE = number;
export type KSMETHOD_BDA_MUX_SERVICE = number;
export type KSMETHOD_BDA_SCAN_SERVICE = number;
export type KSMETHOD_BDA_GDDS_SERVICE = number;
export type KSMETHOD_BDA_CAS_SERVICE = number;
export type KSMETHOD_BDA_ISDB_CAS = number;
export type KSMETHOD_BDA_TS_SELECTOR = number;
export type KSMETHOD_BDA_USERACTIVITY_SERVICE = number;
export type VIDEOENCODER_BITRATE_MODE = number;
export type COPP_HDCP_Protection_Level = number;
export type COPP_CGMSA_Protection_Level = number;
export type COPP_ACP_Protection_Level = number;
export type COPP_TVProtectionStandard = number;
export type COPP_ImageAspectRatio_EN300294 = number;
export type COPP_StatusFlags = number;
export type COPP_StatusHDCPFlags = number;
export type COPP_ConnectorType = number;
export type COPP_BusType = number;

// Constants
export const OATRUE = `-1`;
export const OAFALSE = 0;
export const MPEGLAYER3_FLAG_PADDING_ISO = 0;
export const MPEGLAYER3_FLAG_PADDING_ON = 1;
export const MPEGLAYER3_FLAG_PADDING_OFF = 2;
export const EC_SND_DEVICE_ERROR_BASE = 512;
export const EC_SNDDEV_IN_ERROR = 512;
export const EC_SNDDEV_OUT_ERROR = 513;
export const EC_SYSTEMBASE = 0;
export const EC_USER = 32768;
export const EC_COMPLETE = 1;
export const EC_USERABORT = 2;
export const EC_ERRORABORT = 3;
export const EC_TIME = 4;
export const EC_REPAINT = 5;
export const EC_STREAM_ERROR_STOPPED = 6;
export const EC_STREAM_ERROR_STILLPLAYING = 7;
export const EC_ERROR_STILLPLAYING = 8;
export const EC_PALETTE_CHANGED = 9;
export const EC_VIDEO_SIZE_CHANGED = 10;
export const EC_QUALITY_CHANGE = 11;
export const EC_SHUTTING_DOWN = 12;
export const EC_CLOCK_CHANGED = 13;
export const EC_PAUSED = 14;
export const EC_OPENING_FILE = 16;
export const EC_BUFFERING_DATA = 17;
export const EC_FULLSCREEN_LOST = 18;
export const EC_ACTIVATE = 19;
export const EC_NEED_RESTART = 20;
export const EC_WINDOW_DESTROYED = 21;
export const EC_DISPLAY_CHANGED = 22;
export const EC_STARVATION = 23;
export const EC_OLE_EVENT = 24;
export const EC_NOTIFY_WINDOW = 25;
export const EC_STREAM_CONTROL_STOPPED = 26;
export const EC_STREAM_CONTROL_STARTED = 27;
export const EC_END_OF_SEGMENT = 28;
export const EC_SEGMENT_STARTED = 29;
export const EC_LENGTH_CHANGED = 30;
export const EC_DEVICE_LOST = 31;
export const EC_SAMPLE_NEEDED = 32;
export const EC_PROCESSING_LATENCY = 33;
export const EC_SAMPLE_LATENCY = 34;
export const EC_SCRUB_TIME = 35;
export const EC_STEP_COMPLETE = 36;
export const EC_TIMECODE_AVAILABLE = 48;
export const EC_EXTDEVICE_MODE_CHANGE = 49;
export const EC_STATE_CHANGE = 50;
export const EC_GRAPH_CHANGED = 80;
export const EC_CLOCK_UNSET = 81;
export const EC_VMR_RENDERDEVICE_SET = 83;
export const VMR_RENDER_DEVICE_OVERLAY = 1;
export const VMR_RENDER_DEVICE_VIDMEM = 2;
export const VMR_RENDER_DEVICE_SYSMEM = 4;
export const EC_VMR_SURFACE_FLIPPED = 84;
export const EC_VMR_RECONNECTION_FAILED = 85;
export const EC_PREPROCESS_COMPLETE = 86;
export const EC_CODECAPI_EVENT = 87;
export const EC_WMT_EVENT_BASE = 593;
export const EC_WMT_INDEX_EVENT = 593;
export const EC_WMT_EVENT = 594;
export const EC_BUILT = 768;
export const EC_UNBUILT = 769;
export const EC_SKIP_FRAMES = 37;
export const EC_PLEASE_REOPEN = 64;
export const EC_STATUS = 65;
export const EC_MARKER_HIT = 66;
export const EC_LOADSTATUS = 67;
export const EC_FILE_CLOSED = 68;
export const EC_ERRORABORTEX = 69;
export const AM_LOADSTATUS_CLOSED = 0;
export const AM_LOADSTATUS_LOADINGDESCR = 1;
export const AM_LOADSTATUS_LOADINGMCAST = 2;
export const AM_LOADSTATUS_LOCATING = 3;
export const AM_LOADSTATUS_CONNECTING = 4;
export const AM_LOADSTATUS_OPENING = 5;
export const AM_LOADSTATUS_OPEN = 6;
export const EC_NEW_PIN = 32;
export const EC_RENDER_FINISHED = 33;
export const EC_EOS_SOON = 70;
export const EC_CONTENTPROPERTY_CHANGED = 71;
export const AM_CONTENTPROPERTY_TITLE = 1;
export const AM_CONTENTPROPERTY_AUTHOR = 2;
export const AM_CONTENTPROPERTY_COPYRIGHT = 4;
export const AM_CONTENTPROPERTY_DESCRIPTION = 8;
export const EC_BANDWIDTHCHANGE = 72;
export const EC_VIDEOFRAMEREADY = 73;
export const EC_DVDBASE = 256;
export const EC_DVD_DOMAIN_CHANGE = 257;
export const EC_DVD_TITLE_CHANGE = 258;
export const EC_DVD_CHAPTER_START = 259;
export const EC_DVD_AUDIO_STREAM_CHANGE = 260;
export const EC_DVD_SUBPICTURE_STREAM_CHANGE = 261;
export const EC_DVD_ANGLE_CHANGE = 262;
export const EC_DVD_BUTTON_CHANGE = 263;
export const EC_DVD_VALID_UOPS_CHANGE = 264;
export const EC_DVD_STILL_ON = 265;
export const EC_DVD_STILL_OFF = 266;
export const EC_DVD_CURRENT_TIME = 267;
export const EC_DVD_ERROR = 268;
export const EC_DVD_WARNING = 269;
export const EC_DVD_CHAPTER_AUTOSTOP = 270;
export const EC_DVD_NO_FP_PGC = 271;
export const EC_DVD_PLAYBACK_RATE_CHANGE = 272;
export const EC_DVD_PARENTAL_LEVEL_CHANGE = 273;
export const EC_DVD_PLAYBACK_STOPPED = 274;
export const EC_DVD_ANGLES_AVAILABLE = 275;
export const EC_DVD_PLAYPERIOD_AUTOSTOP = 276;
export const EC_DVD_BUTTON_AUTO_ACTIVATED = 277;
export const EC_DVD_CMD_START = 278;
export const EC_DVD_CMD_END = 279;
export const EC_DVD_DISC_EJECTED = 280;
export const EC_DVD_DISC_INSERTED = 281;
export const EC_DVD_CURRENT_HMSF_TIME = 282;
export const EC_DVD_KARAOKE_MODE = 283;
export const EC_DVD_PROGRAM_CELL_CHANGE = 284;
export const EC_DVD_TITLE_SET_CHANGE = 285;
export const EC_DVD_PROGRAM_CHAIN_CHANGE = 286;
export const EC_DVD_VOBU_Offset = 287;
export const EC_DVD_VOBU_Timestamp = 288;
export const EC_DVD_GPRM_Change = 289;
export const EC_DVD_SPRM_Change = 290;
export const EC_DVD_BeginNavigationCommands = 291;
export const EC_DVD_NavigationCommand = 292;
export const AM_AC3_ALTERNATE_AUDIO_1 = 1;
export const AM_AC3_ALTERNATE_AUDIO_2 = 2;
export const AM_AC3_ALTERNATE_AUDIO_BOTH = 3;
export const AM_AC3_SERVICE_MAIN_AUDIO = 0;
export const AM_AC3_SERVICE_NO_DIALOG = 1;
export const AM_AC3_SERVICE_VISUALLY_IMPAIRED = 2;
export const AM_AC3_SERVICE_HEARING_IMPAIRED = 3;
export const AM_AC3_SERVICE_DIALOG_ONLY = 4;
export const AM_AC3_SERVICE_COMMENTARY = 5;
export const AM_AC3_SERVICE_EMERGENCY_FLASH = 6;
export const AM_AC3_SERVICE_VOICE_OVER = 7;
export const AM_UseNewCSSKey = 1;
export const AM_ReverseBlockStart = 2;
export const AM_ReverseBlockEnd = 4;
export const AM_DVD_CGMS_RESERVED_MASK = 120;
export const AM_DVD_CGMS_COPY_PROTECT_MASK = 24;
export const AM_DVD_CGMS_COPY_PERMITTED = 0;
export const AM_DVD_CGMS_COPY_ONCE = 16;
export const AM_DVD_CGMS_NO_COPY = 24;
export const AM_DVD_COPYRIGHT_MASK = 64;
export const AM_DVD_NOT_COPYRIGHTED = 0;
export const AM_DVD_COPYRIGHTED = 64;
export const AM_DVD_SECTOR_PROTECT_MASK = 32;
export const AM_DVD_SECTOR_NOT_PROTECTED = 0;
export const AM_DVD_SECTOR_PROTECTED = 32;
export const AMINTERLACE_IsInterlaced = 1;
export const AMINTERLACE_1FieldPerSample = 2;
export const AMINTERLACE_Field1First = 4;
export const AMINTERLACE_UNUSED = 8;
export const AMINTERLACE_FieldPatternMask = 48;
export const AMINTERLACE_FieldPatField1Only = 0;
export const AMINTERLACE_FieldPatField2Only = 16;
export const AMINTERLACE_FieldPatBothRegular = 32;
export const AMINTERLACE_FieldPatBothIrregular = 48;
export const AMINTERLACE_DisplayModeMask = 192;
export const AMINTERLACE_DisplayModeBobOnly = 0;
export const AMINTERLACE_DisplayModeWeaveOnly = 64;
export const AMINTERLACE_DisplayModeBobOrWeave = 128;
export const AMCOPYPROTECT_RestrictDuplication = 1;
export const AMCONTROL_USED = 1;
export const AMCONTROL_PAD_TO_4x3 = 2;
export const AMCONTROL_PAD_TO_16x9 = 4;
export const AMCONTROL_COLORINFO_PRESENT = 128;
export const AM_VIDEO_FLAG_FIELD_MASK = 3;
export const AM_VIDEO_FLAG_INTERLEAVED_FRAME = 0;
export const AM_VIDEO_FLAG_FIELD1 = 1;
export const AM_VIDEO_FLAG_FIELD2 = 2;
export const AM_VIDEO_FLAG_FIELD1FIRST = 4;
export const AM_VIDEO_FLAG_WEAVE = 8;
export const AM_VIDEO_FLAG_IPB_MASK = 48;
export const AM_VIDEO_FLAG_I_SAMPLE = 0;
export const AM_VIDEO_FLAG_P_SAMPLE = 16;
export const AM_VIDEO_FLAG_B_SAMPLE = 32;
export const AM_VIDEO_FLAG_REPEAT_FIELD = 64;
export const AVIF_HASINDEX = 16;
export const AVIF_MUSTUSEINDEX = 32;
export const AVIF_ISINTERLEAVED = 256;
export const AVIF_TRUSTCKTYPE = 2048;
export const AVIF_WASCAPTUREFILE = 65536;
export const AVIF_COPYRIGHTED = 131072;
export const AVI_HEADERSIZE = 2048;
export const AVISF_DISABLED = 1;
export const AVISF_VIDEO_PALCHANGES = 65536;
export const AVIIF_LIST = 1;
export const AVIIF_KEYFRAME = 16;
export const AVIIF_FIRSTPART = 32;
export const AVIIF_LASTPART = 64;
export const AVIIF_NOTIME = 256;
export const AVIIF_COMPUSE = 268369920;
export const AVIIF_NO_TIME = 256;
export const AVIIF_COMPRESSOR = 268369920;
export const TIMECODE_RATE_30DROP = 0;
export const TIMECODE_SMPTE_BINARY_GROUP = 7;
export const TIMECODE_SMPTE_COLOR_FRAME = 8;
export const AVI_INDEX_OF_INDEXES = 0;
export const AVI_INDEX_OF_CHUNKS = 1;
export const AVI_INDEX_OF_TIMED_CHUNKS = 2;
export const AVI_INDEX_OF_SUB_2FIELD = 3;
export const AVI_INDEX_IS_DATA = 128;
export const AVI_INDEX_SUB_DEFAULT = 0;
export const AVI_INDEX_SUB_2FIELD = 1;
export const STDINDEXSIZE = 16384;
export const AVISTDINDEX_DELTAFRAME = 2147483648;
export const AMVA_TYPEINDEX_OUTPUTFRAME = 4294967295;
export const AMVA_QUERYRENDERSTATUSF_READ = 1;
export const MIN_DIMENSION = 1;
export const BDA_PLP_ID_NOT_SET = `-1`;
export const CDEF_CLASS_DEFAULT = 1;
export const CDEF_BYPASS_CLASS_MANAGER = 2;
export const CDEF_MERIT_ABOVE_DO_NOT_USE = 8;
export const CDEF_DEVMON_CMGR_DEVICE = 16;
export const CDEF_DEVMON_DMO = 32;
export const CDEF_DEVMON_PNP_DEVICE = 64;
export const CDEF_DEVMON_FILTER = 128;
export const CDEF_DEVMON_SELECTIVE_MASK = 240;
export const CHARS_IN_GUID = 39;
export const MAX_PIN_NAME = 128;
export const MAX_FILTER_NAME = 128;
export const AM_GBF_PREVFRAMESKIPPED = 1;
export const AM_GBF_NOTASYNCPOINT = 2;
export const AM_GBF_NOWAIT = 4;
export const AM_GBF_NODDSURFACELOCK = 8;
export const AMF_AUTOMATICGAIN = `-1`;
export const AnalogVideo_NTSC_Mask = 7;
export const AnalogVideo_PAL_Mask = 1052656;
export const AnalogVideo_SECAM_Mask = 1044480;
export const MPEG2_PROGRAM_STREAM_MAP = 0;
export const MPEG2_PROGRAM_ELEMENTARY_STREAM = 1;
export const MPEG2_PROGRAM_DIRECTORY_PES_PACKET = 2;
export const MPEG2_PROGRAM_PACK_HEADER = 3;
export const MPEG2_PROGRAM_PES_STREAM = 4;
export const MPEG2_PROGRAM_SYSTEM_HEADER = 5;
export const SUBSTREAM_FILTER_VAL_NONE = 268435456;
export const AM_GETDECODERCAP_QUERY_VMR_SUPPORT = 1;
export const VMR_NOTSUPPORTED = 0;
export const VMR_SUPPORTED = 1;
export const AM_QUERY_DECODER_VMR_SUPPORT = 1;
export const AM_QUERY_DECODER_DXVA_1_SUPPORT = 2;
export const AM_QUERY_DECODER_DVD_SUPPORT = 3;
export const AM_QUERY_DECODER_ATSC_SD_SUPPORT = 4;
export const AM_QUERY_DECODER_ATSC_HD_SUPPORT = 5;
export const AM_GETDECODERCAP_QUERY_VMR9_SUPPORT = 6;
export const AM_GETDECODERCAP_QUERY_EVR_SUPPORT = 7;
export const DECODER_CAP_NOTSUPPORTED = 0;
export const DECODER_CAP_SUPPORTED = 1;
export const VMRBITMAP_DISABLE = 1;
export const VMRBITMAP_HDC = 2;
export const VMRBITMAP_ENTIREDDS = 4;
export const VMRBITMAP_SRCCOLORKEY = 8;
export const VMRBITMAP_SRCRECT = 16;
export const DVD_TITLE_MENU = 0;
export const DVD_STREAM_DATA_CURRENT = 2048;
export const DVD_STREAM_DATA_VMGM = 1024;
export const DVD_STREAM_DATA_VTSM = 1025;
export const DVD_DEFAULT_AUDIO_STREAM = 15;
export const DVD_AUDIO_CAPS_AC3 = 1;
export const DVD_AUDIO_CAPS_MPEG2 = 2;
export const DVD_AUDIO_CAPS_LPCM = 4;
export const DVD_AUDIO_CAPS_DTS = 8;
export const DVD_AUDIO_CAPS_SDDS = 16;
export const PBDA_Encoder_Audio_AlgorithmType_MPEG1LayerII = 0;
export const PBDA_Encoder_Audio_AlgorithmType_AC3 = 1;
export const PBDA_Encoder_Video_MPEG2PartII = 0;
export const PBDA_Encoder_Video_MPEG4Part10 = 1;
export const PBDA_Encoder_Video_AVC = 1;
export const PBDA_Encoder_Video_H264 = 1;
export const PBDA_Encoder_BitrateMode_Constant = 1;
export const PBDA_Encoder_BitrateMode_Variable = 2;
export const PBDA_Encoder_BitrateMode_Average = 3;
export const AMDDS_NONE = 0;
export const AMDDS_DCIPS = 1;
export const AMDDS_PS = 2;
export const AMDDS_RGBOVR = 4;
export const AMDDS_YUVOVR = 8;
export const AMDDS_RGBOFF = 16;
export const AMDDS_YUVOFF = 32;
export const AMDDS_RGBFLP = 64;
export const AMDDS_YUVFLP = 128;
export const AMDDS_ALL = 255;
export const AMDDS_DEFAULT = 255;
export const iPALETTE_COLORS = 256;
export const iEGA_COLORS = 16;
export const iMASK_COLORS = 3;
export const iTRUECOLOR = 16;
export const iRED = 0;
export const iGREEN = 1;
export const iBLUE = 2;
export const iPALETTE = 8;
export const iMAXBITS = 8;
export const MAX_SIZE_MPEG1_SEQUENCE_INFO = 140;
export const AM_MPEG_AUDIO_DUAL_MERGE = 0;
export const AM_MPEG_AUDIO_DUAL_LEFT = 1;
export const AM_MPEG_AUDIO_DUAL_RIGHT = 2;
export const VFW_FIRST_CODE = 512;
export const MAX_ERROR_TEXT_LEN = 160;
export const MPBOOL_TRUE = 1;
export const MPBOOL_FALSE = 0;
export const DWORD_ALLPARAMS = `-1`;
export const MPF_ENVLP_STANDARD = 0;
export const MPF_ENVLP_BEGIN_CURRENTVAL = 1;
export const MPF_ENVLP_BEGIN_NEUTRALVAL = 2;
export const MPF_PUNCHIN_REFTIME = 0;
export const MPF_PUNCHIN_NOW = 1;
export const MPF_PUNCHIN_STOPPED = 2;
export const VFW_E_INVALIDMEDIATYPE = 288827430293209600n;
export const VFW_E_INVALIDSUBTYPE = 288795544456004097n;
export const VFW_E_NEED_OWNER = 1187558720002;
export const VFW_E_ENUM_OUT_OF_SYNC = 288797743479259651n;
export const VFW_E_ALREADY_CONNECTED = 288798842990887428n;
export const VFW_E_FILTER_ACTIVE = 288799942502515205n;
export const VFW_E_NO_TYPES = 288801042014142982n;
export const VFW_E_NO_ACCEPTABLE_TYPES = 288802141525770759n;
export const VFW_E_INVALID_DIRECTION = 288803241037398536n;
export const VFW_E_NOT_CONNECTED = 288804340549026313n;
export const VFW_E_NO_ALLOCATOR = 288805440060654090n;
export const VFW_E_RUNTIME_ERROR = 288806539572281867n;
export const VFW_E_BUFFER_NOTSET = 288807639083909644n;
export const VFW_E_BUFFER_OVERFLOW = 288808738595537421n;
export const VFW_E_BADALIGN = 288809838107165198n;
export const VFW_E_ALREADY_COMMITTED = 288810937618792975n;
export const VFW_E_BUFFERS_OUTSTANDING = 288864813688554000n;
export const VFW_E_NOT_COMMITTED = 288814236153676305n;
export const VFW_E_SIZENOTSET = 288823032246698514n;
export const VFW_E_NO_CLOCK = 288815335665304083n;
export const VFW_E_NO_SINK = 288816435176931860n;
export const VFW_E_NO_INTERFACE = 288817534688559637n;
export const VFW_E_NOT_FOUND = 288818634200187414n;
export const VFW_E_CANNOT_CONNECT = 988480280986135;
export const VFW_E_CANNOT_RENDER = 288821932735070744n;
export const VFW_E_CHANGING_FORMAT = 288830728828092953n;
export const VFW_E_NO_COLOR_KEY_SET = 288824131758326298n;
export const VFW_E_NOT_OVERLAY_CONNECTION = 288820833223442971n;
export const VFW_E_NOT_SAMPLE_CONNECTION = 288825231269954076n;
export const VFW_E_PALETTE_SET = 288826330781581853n;
export const VFW_E_COLOR_KEY_SET = 288828529804837406n;
export const VFW_E_NO_COLOR_KEY_FOUND = 288793345432748575n;
export const VFW_E_NO_PALETTE_AVAILABLE = 288829629316465184n;
export const VFW_E_NO_DISPLAY_PALETTE = 288832927851348513n;
export const VFW_E_TOO_MANY_COLORS = 288831828339720738n;
export const VFW_E_STATE_CHANGED = 288848321014137379n;
export const VFW_E_NOT_STOPPED = 288834027362976292n;
export const VFW_E_NOT_PAUSED = 288835126874604069n;
export const VFW_E_NOT_RUNNING = 288836226386231846n;
export const VFW_E_WRONG_STATE = 288837325897859623n;
export const VFW_E_START_TIME_AFTER_END = 288838425409487400n;
export const VFW_E_INVALID_RECT = 288839524921115177n;
export const VFW_E_TYPE_NOT_ACCEPTED = 288840624432742954n;
export const VFW_E_SAMPLE_REJECTED = 288841723944370731n;
export const VFW_E_SAMPLE_REJECTED_EOS = 288842823455998508n;
export const VFW_E_DUPLICATE_NAME = 288842823455998509n;
export const VFW_S_DUPLICATE_NAME = 288843920820142637n;
export const VFW_E_TIMEOUT = 288845022479254062n;
export const VFW_E_INVALID_FILE_FORMAT = 288846121990881839n;
export const VFW_E_ENUM_OUT_OF_RANGE = 288847221502509616n;
export const VFW_E_CIRCULAR_GRAPH = 288850520037392945n;
export const VFW_E_NOT_ALLOWED_TO_SAVE = 288849420525765170n;
export const VFW_E_TIME_ALREADY_PASSED = 288851619549020723n;
export const VFW_E_ALREADY_CANCELLED = 288853818572276276n;
export const VFW_E_CORRUPT_GRAPH_FILE = 288852719060648501n;
export const VFW_E_ADVISE_ALREADY_SET = 288853818572276278n;
export const VFW_S_STATE_INTERMEDIATE = 288858214471303735n;
export const VFW_E_NO_MODEX_AVAILABLE = 288856017595531832n;
export const VFW_E_NO_ADVISE_SET = 288857117107159609n;
export const VFW_E_NO_FULLSCREEN = 288883505386226234n;
export const VFW_E_IN_FULLSCREEN_MODE = 288863714176926267n;
export const VFW_E_UNKNOWN_FILE_TYPE = 288865913200181824n;
export const VFW_E_CANNOT_LOAD_SOURCE_FILTER = 288813136642048577n;
export const VFW_S_PARTIAL_RENDER = 288867010564325954n;
export const VFW_E_FILE_TOO_SHORT = 288868112223437379n;
export const VFW_E_INVALID_FILE_VERSION = 288869211735065156n;
export const VFW_S_SOME_DATA_IGNORED = 288870309099209285n;
export const VFW_S_CONNECTIONS_DEFERRED = 288871408610837062n;
export const VFW_E_INVALID_CLSID = 288872510269948487n;
export const VFW_E_INVALID_MEDIA_TYPE = 289340902223381064n;
export const VFW_E_BAD_KEY = 288515168990921714n;
export const VFW_S_NO_MORE_ITEMS = 288873607634092291n;
export const VFW_E_SAMPLE_TIME_NOT_SET = 288881306362970697n;
export const VFW_S_RESOURCE_NOT_NEEDED = 288882403727114832n;
export const VFW_E_MEDIA_TIME_NOT_SET = 288883505386226257n;
export const VFW_E_NO_TIME_FORMAT_SET = 288884604897854034n;
export const VFW_E_MONO_AUDIO_HW = 288886803921109587n;
export const VFW_S_MEDIA_TYPE_IGNORED = 346777188487660116n;
export const VFW_E_NO_DECOMPRESSOR = 288887903432737365n;
export const VFW_E_NO_AUDIO_HARDWARE = 288889002944365142n;
export const VFW_S_VIDEO_NOT_RENDERED = 288890100308509271n;
export const VFW_S_AUDIO_NOT_RENDERED = 288891199820137048n;
export const VFW_E_RPZA = 288892301479248473n;
export const VFW_S_RPZA = 288893398843392602n;
export const VFW_E_PROCESSOR_NOT_SUITABLE = 288894500502504027n;
export const VFW_E_UNSUPPORTED_AUDIO = 288895600014131804n;
export const VFW_E_UNSUPPORTED_VIDEO = 288896699525759581n;
export const VFW_E_MPEG_NOT_CONSTRAINED = 288897799037387358n;
export const VFW_E_NOT_IN_GRAPH = 288898898549015135n;
export const VFW_S_ESTIMATED = 288899995913159264n;
export const VFW_E_NO_TIME_FORMAT = 288901097572270689n;
export const VFW_E_READ_ONLY = 288902197083898466n;
export const VFW_S_RESERVED = 288903294448042595n;
export const VFW_E_BUFFER_UNDERFLOW = 288904396107154020n;
export const VFW_E_UNSUPPORTED_STREAM = 288905495618781797n;
export const VFW_E_NO_TRANSPORT = 288906595130409574n;
export const VFW_S_STREAM_OFF = 288907692494553703n;
export const VFW_S_CANT_CUE = 288908792006181480n;
export const VFW_E_BAD_VIDEOCD = 288916490735059561n;
export const VFW_S_NO_STOP_TIME = 288917588099203696n;
export const VFW_E_OUT_OF_VIDEO_MEMORY = 288918689758315121n;
export const VFW_E_VP_NEGOTIATION_FAILED = 288919789269942898n;
export const VFW_E_DDRAW_CAPS_NOT_SUITABLE = 288920888781570675n;
export const VFW_E_NO_VP_HARDWARE = 288921988293198452n;
export const VFW_E_NO_CAPTURE_HARDWARE = 288923087804826229n;
export const VFW_E_DVD_OPERATION_INHIBITED = 288924187316454006n;
export const VFW_E_DVD_INVALIDDOMAIN = 288925286828081783n;
export const VFW_E_DVD_NO_BUTTON = 288926386339709560n;
export const VFW_E_DVD_GRAPHNOTREADY = 288927485851337337n;
export const VFW_E_DVD_RENDERFAIL = 288928585362965114n;
export const VFW_E_DVD_DECNOTENOUGH = 288929684874592891n;
export const VFW_E_DDRAW_VERSION_NOT_SUITABLE = 288930784386220668n;
export const VFW_E_COPYPROT_FAILED = 288931883897848445n;
export const VFW_S_NOPREVIEWPIN = 288932981261992574n;
export const VFW_E_TIME_EXPIRED = 288934082921103999n;
export const VFW_S_DVD_NON_ONE_SEQUENTIAL = 288935180285248128n;
export const VFW_E_DVD_WRONG_SPEED = 288936281944359553n;
export const VFW_E_DVD_MENU_DOES_NOT_EXIST = 288937381455987330n;
export const VFW_E_DVD_CMD_CANCELLED = 288938480967615107n;
export const VFW_E_DVD_STATE_WRONG_VERSION = 288939580479242884n;
export const VFW_E_DVD_STATE_CORRUPT = 288940679990870661n;
export const VFW_E_DVD_STATE_WRONG_DISC = 288941779502498438n;
export const VFW_E_DVD_INCOMPATIBLE_REGION = 288942879014126215n;
export const VFW_E_DVD_NO_ATTRIBUTES = 288943978525753992n;
export const VFW_E_DVD_NO_GOUP_PGC = 288945078037381769n;
export const VFW_E_DVD_LOW_PARENTAL_LEVEL = 288946177549009546n;
export const VFW_E_DVD_NOT_IN_KARAOKE_MODE = 288947277060637323n;
export const VFW_S_DVD_CHANNEL_CONTENTS_NOT_AVAILABLE = 288948374424781452n;
export const VFW_S_DVD_NOT_ACCURATE = 288949473936409229n;
export const VFW_E_FRAME_STEP_UNSUPPORTED = 288950575595520654n;
export const VFW_E_DVD_STREAM_DISABLED = 288951675107148431n;
export const VFW_E_DVD_TITLE_UNKNOWN = 288952774618776208n;
export const VFW_E_DVD_INVALID_DISC = 288953874130403985n;
export const VFW_E_DVD_NO_RESUME_INFORMATION = 288954973642031762n;
export const VFW_E_PIN_ALREADY_BLOCKED_ON_THIS_THREAD = 288956073153659539n;
export const VFW_E_PIN_ALREADY_BLOCKED = 288957172665287316n;
export const VFW_E_CERTIFICATION_FAILURE = 288958272176915093n;
export const VFW_E_VMR_NOT_IN_MIXER_MODE = 288959371688542870n;
export const VFW_E_VMR_NO_AP_SUPPLIED = 288960471200170647n;
export const VFW_E_VMR_NO_DEINTERLACE_HW = 288961570711798424n;
export const VFW_E_VMR_NO_PROCAMP_HW = 288962670223426201n;
export const VFW_E_DVD_VMR9_INCOMPATIBLEDEC = 288963769735053978n;
export const VFW_E_NO_COPP_HW = 288964869246681755n;
export const VFW_E_DVD_NONBLOCKING = 288965968758309532n;
export const VFW_E_DVD_TOO_MANY_RENDERERS_IN_FILTER_GRAPH = 288967068269937309n;
export const VFW_E_DVD_NON_EVR_RENDERER_IN_FILTER_GRAPH = 288968167781565086n;
export const VFW_E_DVD_RESOLUTION_ERROR = 505689606197609119n;
export const E_PROP_SET_UNSUPPORTED = 505687407174550674n;
export const E_PROP_ID_UNSUPPORTED = 289092412595700880n;
export const VFW_E_CODECAPI_LINEAR_RANGE = 289093512107131664n;
export const VFW_E_CODECAPI_ENUMERATED = 289095711130387217n;
export const VFW_E_CODECAPI_NO_DEFAULT = 289096810642014995n;
export const VFW_E_CODECAPI_NO_CURRENT_VALUE = 289097910153642772n;
export const VFW_E_DVD_CHAPTER_DOES_NOT_EXIST = 289110004781548309n;
export const VFW_S_DVD_RENDER_STATUS = 7566142163910918944n;
export const CFSTR_VFW_FILTERLIST = `Video for Windows 4 Filters`;
export const DXVA_RESTRICTED_MODE_UNRESTRICTED = 65535;
export const DXVA_RESTRICTED_MODE_H261_A = 1;
export const DXVA_RESTRICTED_MODE_H261_B = 2;
export const DXVA_RESTRICTED_MODE_H263_A = 3;
export const DXVA_RESTRICTED_MODE_H263_B = 4;
export const DXVA_RESTRICTED_MODE_H263_C = 5;
export const DXVA_RESTRICTED_MODE_H263_D = 6;
export const DXVA_RESTRICTED_MODE_H263_E = 7;
export const DXVA_RESTRICTED_MODE_H263_F = 8;
export const DXVA_RESTRICTED_MODE_MPEG1_A = 9;
export const DXVA_RESTRICTED_MODE_MPEG2_A = 10;
export const DXVA_RESTRICTED_MODE_MPEG2_B = 11;
export const DXVA_RESTRICTED_MODE_MPEG2_C = 12;
export const DXVA_RESTRICTED_MODE_MPEG2_D = 13;
export const DXVA_RESTRICTED_MODE_MPEG1_VLD = 16;
export const DXVA_RESTRICTED_MODE_MPEG2and1_VLD = 17;
export const DXVA_RESTRICTED_MODE_H264_A = 100;
export const DXVA_RESTRICTED_MODE_H264_B = 101;
export const DXVA_RESTRICTED_MODE_H264_C = 102;
export const DXVA_RESTRICTED_MODE_H264_D = 103;
export const DXVA_RESTRICTED_MODE_H264_E = 104;
export const DXVA_RESTRICTED_MODE_H264_F = 105;
export const DXVA_RESTRICTED_MODE_H264_VLD_WITHFMOASO_NOFGT = 112;
export const DXVA_RESTRICTED_MODE_H264_VLD_STEREO_PROGRESSIVE_NOFGT = 113;
export const DXVA_RESTRICTED_MODE_H264_VLD_STEREO_NOFGT = 114;
export const DXVA_RESTRICTED_MODE_H264_VLD_MULTIVIEW_NOFGT = 115;
export const DXVA_RESTRICTED_MODE_WMV8_A = 128;
export const DXVA_RESTRICTED_MODE_WMV8_B = 129;
export const DXVA_RESTRICTED_MODE_WMV9_A = 144;
export const DXVA_RESTRICTED_MODE_WMV9_B = 145;
export const DXVA_RESTRICTED_MODE_WMV9_C = 148;
export const DXVA_RESTRICTED_MODE_VC1_A = 160;
export const DXVA_RESTRICTED_MODE_VC1_B = 161;
export const DXVA_RESTRICTED_MODE_VC1_C = 162;
export const DXVA_RESTRICTED_MODE_VC1_D = 163;
export const DXVA_RESTRICTED_MODE_VC1_D2010 = 164;
export const DXVA_RESTRICTED_MODE_MPEG4PT2_VLD_SIMPLE = 176;
export const DXVA_RESTRICTED_MODE_MPEG4PT2_VLD_ADV_SIMPLE_NOGMC = 177;
export const DXVA_RESTRICTED_MODE_MPEG4PT2_VLD_ADV_SIMPLE_GMC = 178;
export const DXVA_RESTRICTED_MODE_WMV8_POSTPROC = 128;
export const DXVA_RESTRICTED_MODE_WMV8_MOCOMP = 129;
export const DXVA_RESTRICTED_MODE_WMV9_POSTPROC = 144;
export const DXVA_RESTRICTED_MODE_WMV9_MOCOMP = 145;
export const DXVA_RESTRICTED_MODE_WMV9_IDCT = 148;
export const DXVA_RESTRICTED_MODE_VC1_POSTPROC = 160;
export const DXVA_RESTRICTED_MODE_VC1_MOCOMP = 161;
export const DXVA_RESTRICTED_MODE_VC1_IDCT = 162;
export const DXVA_RESTRICTED_MODE_VC1_VLD = 163;
export const DXVA_RESTRICTED_MODE_H264_MOCOMP_NOFGT = 100;
export const DXVA_RESTRICTED_MODE_H264_MOCOMP_FGT = 101;
export const DXVA_RESTRICTED_MODE_H264_IDCT_NOFGT = 102;
export const DXVA_RESTRICTED_MODE_H264_IDCT_FGT = 103;
export const DXVA_RESTRICTED_MODE_H264_VLD_NOFGT = 104;
export const DXVA_RESTRICTED_MODE_H264_VLD_FGT = 105;
export const DXVA_COMPBUFFER_TYPE_THAT_IS_NOT_USED = 0;
export const DXVA_PICTURE_DECODE_BUFFER = 1;
export const DXVA_MACROBLOCK_CONTROL_BUFFER = 2;
export const DXVA_RESIDUAL_DIFFERENCE_BUFFER = 3;
export const DXVA_DEBLOCKING_CONTROL_BUFFER = 4;
export const DXVA_INVERSE_QUANTIZATION_MATRIX_BUFFER = 5;
export const DXVA_SLICE_CONTROL_BUFFER = 6;
export const DXVA_BITSTREAM_DATA_BUFFER = 7;
export const DXVA_AYUV_BUFFER = 8;
export const DXVA_IA44_SURFACE_BUFFER = 9;
export const DXVA_DPXD_SURFACE_BUFFER = 10;
export const DXVA_HIGHLIGHT_BUFFER = 11;
export const DXVA_DCCMD_SURFACE_BUFFER = 12;
export const DXVA_ALPHA_BLEND_COMBINATION_BUFFER = 13;
export const DXVA_PICTURE_RESAMPLE_BUFFER = 14;
export const DXVA_READ_BACK_BUFFER = 15;
export const DXVA_MOTION_VECTOR_BUFFER = 16;
export const DXVA_FILM_GRAIN_BUFFER = 17;
export const DXVA_NUM_TYPES_COMP_BUFFERS = 18;
export const DXVA_PICTURE_DECODING_FUNCTION = 1;
export const DXVA_ALPHA_BLEND_DATA_LOAD_FUNCTION = 2;
export const DXVA_ALPHA_BLEND_COMBINATION_FUNCTION = 3;
export const DXVA_PICTURE_RESAMPLE_FUNCTION = 4;
export const DXVA_DEBLOCKING_FILTER_FUNCTION = 5;
export const DXVA_FILM_GRAIN_SYNTHESIS_FUNCTION = 6;
export const DXVA_STATUS_REPORTING_FUNCTION = 7;
export const DXVA_EXECUTE_RETURN_OK = 0;
export const DXVA_EXECUTE_RETURN_DATA_ERROR_MINOR = 1;
export const DXVA_EXECUTE_RETURN_DATA_ERROR_SIGNIF = 2;
export const DXVA_EXECUTE_RETURN_DATA_ERROR_SEVERE = 3;
export const DXVA_EXECUTE_RETURN_OTHER_ERROR_SEVERE = 4;
export const DXVA_QUERYORREPLYFUNCFLAG_DECODER_PROBE_QUERY = 16777201;
export const DXVA_QUERYORREPLYFUNCFLAG_DECODER_LOCK_QUERY = 16777205;
export const DXVA_QUERYORREPLYFUNCFLAG_ACCEL_PROBE_OK_COPY = 16777208;
export const DXVA_QUERYORREPLYFUNCFLAG_ACCEL_PROBE_OK_PLUS = 16777209;
export const DXVA_QUERYORREPLYFUNCFLAG_ACCEL_LOCK_OK_COPY = 16777212;
export const DXVA_QUERYORREPLYFUNCFLAG_ACCEL_PROBE_FALSE_PLUS = 16777211;
export const DXVA_QUERYORREPLYFUNCFLAG_ACCEL_LOCK_FALSE_PLUS = 16777215;
export const DXVA_ENCRYPTPROTOCOLFUNCFLAG_HOST = 16776960;
export const DXVA_ENCRYPTPROTOCOLFUNCFLAG_ACCEL = 16776968;
export const DXVA_CHROMA_FORMAT_420 = 1;
export const DXVA_CHROMA_FORMAT_422 = 2;
export const DXVA_CHROMA_FORMAT_444 = 3;
export const DXVA_PICTURE_STRUCTURE_TOP_FIELD = 1;
export const DXVA_PICTURE_STRUCTURE_BOTTOM_FIELD = 2;
export const DXVA_PICTURE_STRUCTURE_FRAME = 3;
export const DXVA_BIDIRECTIONAL_AVERAGING_MPEG2_ROUND = 0;
export const DXVA_BIDIRECTIONAL_AVERAGING_H263_TRUNC = 1;
export const DXVA_MV_PRECISION_AND_CHROMA_RELATION_MPEG2 = 0;
export const DXVA_MV_PRECISION_AND_CHROMA_RELATION_H263 = 1;
export const DXVA_MV_PRECISION_AND_CHROMA_RELATION_H261 = 2;
export const DXVA_SCAN_METHOD_ZIG_ZAG = 0;
export const DXVA_SCAN_METHOD_ALTERNATE_VERTICAL = 1;
export const DXVA_SCAN_METHOD_ALTERNATE_HORIZONTAL = 2;
export const DXVA_SCAN_METHOD_ARBITRARY = 3;
export const DXVA_BITSTREAM_CONCEALMENT_NEED_UNLIKELY = 0;
export const DXVA_BITSTREAM_CONCEALMENT_NEED_MILD = 1;
export const DXVA_BITSTREAM_CONCEALMENT_NEED_LIKELY = 2;
export const DXVA_BITSTREAM_CONCEALMENT_NEED_SEVERE = 3;
export const DXVA_BITSTREAM_CONCEALMENT_METHOD_UNSPECIFIED = 0;
export const DXVA_BITSTREAM_CONCEALMENT_METHOD_INTRA = 1;
export const DXVA_BITSTREAM_CONCEALMENT_METHOD_FORWARD = 2;
export const DXVA_BITSTREAM_CONCEALMENT_METHOD_BACKWARD = 3;
export const DXVA_USUAL_BLOCK_WIDTH = 8;
export const DXVA_USUAL_BLOCK_HEIGHT = 8;
export const DXVA_NumMV_OBMC_off_BinPBwith4MV_off = 4;
export const DXVA_NumMV_OBMC_off_BinPBwith4MV_on = 5;
export const DXVA_NumMV_OBMC_on__BinPB_off = 10;
export const DXVA_NumMV_OBMC_on__BinPB_on = 11;
export const DXVA_CONFIG_DATA_TYPE_IA44 = 0;
export const DXVA_CONFIG_DATA_TYPE_AI44 = 1;
export const DXVA_CONFIG_DATA_TYPE_DPXD = 2;
export const DXVA_CONFIG_DATA_TYPE_AYUV = 3;
export const DXVA_CONFIG_BLEND_TYPE_FRONT_BUFFER = 0;
export const DXVA_CONFIG_BLEND_TYPE_BACK_HARDWARE = 1;
export const DXVA_ExtColorData_ShiftBase = 8;
export const MAX_DEINTERLACE_SURFACES = 32;
export const DXVA_DeinterlaceBltFnCode = 1;
export const DXVA_DeinterlaceBltExFnCode = 2;
export const MAX_DEINTERLACE_DEVICE_GUIDS = 32;
export const DXVA_DeinterlaceQueryAvailableModesFnCode = 1;
export const DXVA_DeinterlaceQueryModeCapsFnCode = 2;
export const DXVA_ProcAmpControlQueryCapsFnCode = 3;
export const DXVA_ProcAmpControlQueryRangeFnCode = 4;
export const DXVA_ProcAmpControlBltFnCode = 1;
export const DXVA_COPPGetCertificateLengthFnCode = 1;
export const DXVA_COPPKeyExchangeFnCode = 2;
export const DXVA_COPPSequenceStartFnCode = 3;
export const DXVA_COPPCommandFnCode = 4;
export const COPP_NoProtectionLevelAvailable = `-1`;
export const COPP_DefaultProtectionLevel = 0;
export const COPP_ImageAspectRatio_EN300294_Mask = 7;
export const DXVA_COPPQueryStatusFnCode = 5;
export const DTV_CardStatus_Inserted = 0;
export const DTV_CardStatus_Removed = 1;
export const DTV_CardStatus_Error = 2;
export const DTV_CardStatus_FirmwareDownload = 3;
export const OCUR_PAIRING_PROTOCOL_VERSION = 2;
export const PBDA_PAIRING_PROTOCOL_VERSION = 3;
export const DTV_MMIMessage_Open = 0;
export const DTV_MMIMessage_Close = 1;
export const DTV_Entitlement_CanDecrypt = 0;
export const DTV_Entitlement_NotEntitled = 1;
export const DTV_Entitlement_TechnicalFailure = 2;
export const AudioType_Standard = 0;
export const AudioType_Music_And_Effects = 1;
export const AudioType_Visually_Impaired = 2;
export const AudioType_Hearing_Impaired = 3;
export const AudioType_Dialogue = 4;
export const AudioType_Commentary = 5;
export const AudioType_Emergency = 6;
export const AudioType_Voiceover = 7;
export const AudioType_Reserved = `-1`;
export const MAX_COUNTRY_CODE_STRING = 3;
export const PARENTAL_CONTROL_TIME_RANGE = 1;
export const REQUIRED_PARENTAL_CONTROL_TIME_RANGE = 2;
export const PARENTAL_CONTROL_CONTENT_RATING = 256;
export const PARENTAL_CONTROL_ATTRIB_VIOLENCE = 512;
export const PARENTAL_CONTROL_ATTRIB_LANGUAGE = 513;
export const PARENTAL_CONTROL_ATTRIB_SEXUAL = 514;
export const PARENTAL_CONTROL_ATTRIB_DIALOGUE = 515;
export const PARENTAL_CONTROL_ATTRIB_FANTASY = 516;
export const PARENTAL_CONTROL_VALUE_UNDEFINED = 0;
export const MPEG2_FILTER_VERSION_1_SIZE = 124;
export const MPEG2_FILTER_VERSION_2_SIZE = 133;
export const STREAMBUFFER_EC_BASE = 806;
export const SBE2_STREAM_DESC_VERSION = 1;
export const MPEG_PAT_PID = 0;
export const MPEG_PAT_TID = 0;
export const MPEG_CAT_PID = 1;
export const MPEG_CAT_TID = 1;
export const MPEG_PMT_TID = 2;
export const MPEG_TSDT_PID = 2;
export const MPEG_TSDT_TID = 3;
export const ATSC_MGT_PID = 8187;
export const ATSC_MGT_TID = 199;
export const ATSC_VCT_PID = 8187;
export const ATSC_VCT_TERR_TID = 200;
export const ATSC_VCT_CABL_TID = 201;
export const ATSC_EIT_TID = 203;
export const ATSC_ETT_TID = 204;
export const ATSC_RRT_TID = 202;
export const ATSC_RRT_PID = 8187;
export const ATSC_STT_PID = 8187;
export const ATSC_STT_TID = 205;
export const ATSC_PIT_TID = 208;
export const DVB_NIT_PID = 16;
export const DVB_NIT_ACTUAL_TID = 64;
export const DVB_NIT_OTHER_TID = 65;
export const DVB_SDT_PID = 17;
export const DVB_SDT_ACTUAL_TID = 66;
export const DVB_SDT_OTHER_TID = 70;
export const DVB_BAT_PID = 17;
export const DVB_BAT_TID = 74;
export const DVB_EIT_PID = 18;
export const DVB_EIT_ACTUAL_TID = 78;
export const DVB_EIT_OTHER_TID = 79;
export const DVB_RST_PID = 19;
export const DVB_RST_TID = 113;
export const DVB_TDT_PID = 20;
export const DVB_TDT_TID = 112;
export const DVB_ST_PID_16 = 16;
export const DVB_ST_PID_17 = 17;
export const DVB_ST_PID_18 = 18;
export const DVB_ST_PID_19 = 19;
export const DVB_ST_PID_20 = 20;
export const DVB_ST_TID = 114;
export const ISDB_ST_TID = 114;
export const DVB_TOT_PID = 20;
export const DVB_TOT_TID = 115;
export const DVB_DIT_PID = 30;
export const DVB_DIT_TID = 126;
export const DVB_SIT_PID = 31;
export const DVB_SIT_TID = 127;
export const ISDB_EMM_TID = 133;
export const ISDB_BIT_PID = 36;
export const ISDB_BIT_TID = 196;
export const ISDB_NBIT_PID = 37;
export const ISDB_NBIT_MSG_TID = 197;
export const ISDB_NBIT_REF_TID = 198;
export const ISDB_LDT_PID = 37;
export const ISDB_LDT_TID = 199;
export const ISDB_SDTT_PID = 35;
export const ISDB_SDTT_ALT_PID = 40;
export const ISDB_SDTT_TID = 195;
export const ISDB_CDT_PID = 41;
export const ISDB_CDT_TID = 200;
export const SCTE_EAS_TID = 216;
export const SCTE_EAS_IB_PID = 8187;
export const SCTE_EAS_OOB_PID = 8188;
export const ATSC_ETM_LOCATION_NOT_PRESENT = 0;
export const ATSC_ETM_LOCATION_IN_PTC_FOR_PSIP = 1;
export const ATSC_ETM_LOCATION_IN_PTC_FOR_EVENT = 2;
export const ATSC_ETM_LOCATION_RESERVED = 3;
export const SAMPLE_SEQ_SEQUENCE_HEADER = 1;
export const SAMPLE_SEQ_GOP_HEADER = 2;
export const SAMPLE_SEQ_PICTURE_HEADER = 3;
export const SAMPLE_SEQ_SEQUENCE_START = 1;
export const SAMPLE_SEQ_SEEK_POINT = 2;
export const SAMPLE_SEQ_FRAME_START = 3;
export const SAMPLE_SEQ_CONTENT_UNKNOWN = 0;
export const SAMPLE_SEQ_CONTENT_I_FRAME = 1;
export const SAMPLE_SEQ_CONTENT_P_FRAME = 2;
export const SAMPLE_SEQ_CONTENT_B_FRAME = 3;
export const SAMPLE_SEQ_CONTENT_STANDALONE_FRAME = 1;
export const SAMPLE_SEQ_CONTENT_REF_FRAME = 2;
export const SAMPLE_SEQ_CONTENT_NONREF_FRAME = 3;
export const COMPONENT_TAG_CAPTION_MIN = 48;
export const COMPONENT_TAG_CAPTION_MAX = 55;
export const COMPONENT_TAG_SUPERIMPOSE_MIN = 56;
export const COMPONENT_TAG_SUPERIMPOSE_MAX = 63;
export const DVBS_SCAN_TABLE_MAX_SIZE = 400;
export const g_wszExcludeScriptStreamDeliverySynchronization = `ExcludeScriptStreamDeliverySynchronization`;
export const MPEG2_BASE = 512;
export const MPEG2_S_MORE_DATA_AVAILABLE = 288827428145725952n;
export const MPEG2_S_NO_MORE_DATA_AVAILABLE = 288796641820148225n;
export const MPEG2_S_SG_INFO_FOUND = 288796641820148226n;
export const MPEG2_S_SG_INFO_NOT_FOUND = 288797741331776003n;
export const MPEG2_S_MPE_INFO_FOUND = 288810935471309316n;
export const MPEG2_S_MPE_INFO_NOT_FOUND = 288799940355031557n;
export const MPEG2_S_NEW_MODULE_VERSION = 288231492843471366n;
export const MPEG2_E_UNINITIALIZED = 288827430293209600n;
export const MPEG2_E_ALREADY_INITIALIZED = 288795544456004097n;
export const MPEG2_E_OUT_OF_BOUNDS = 1187558720002;
export const MPEG2_E_MALFORMED_TABLE = 288797743479259651n;
export const MPEG2_E_UNDEFINED = 288798842990887428n;
export const MPEG2_E_NOT_PRESENT = 288799942502515205n;
export const MPEG2_E_SECTION_NOT_FOUND = 288801042014142982n;
export const MPEG2_E_TX_STREAM_UNAVAILABLE = 288802141525770759n;
export const MPEG2_E_SERVICE_ID_NOT_FOUND = 288803241037398536n;
export const MPEG2_E_SERVICE_PMT_NOT_FOUND = 288804340549026313n;
export const MPEG2_E_DSI_NOT_FOUND = 288805440060654090n;
export const MPEG2_E_SERVER_UNAVAILABLE = 288806539572281867n;
export const MPEG2_E_INVALID_CAROUSEL_ID = 288807639083909644n;
export const MPEG2_E_MALFORMED_DSMCC_MESSAGE = 288808738595537421n;
export const MPEG2_E_INVALID_SG_OBJECT_KIND = 288809838107165198n;
export const MPEG2_E_OBJECT_NOT_FOUND = 288810937618792975n;
export const MPEG2_E_OBJECT_KIND_NOT_A_DIRECTORY = 288864813688554000n;
export const MPEG2_E_OBJECT_KIND_NOT_A_FILE = 288814236153676305n;
export const MPEG2_E_FILE_OFFSET_TOO_BIG = 288823032246698514n;
export const MPEG2_E_STREAM_STOPPED = 288815335665304083n;
export const MPEG2_E_REGISTRY_ACCESS_FAILED = 288816435176931860n;
export const MPEG2_E_INVALID_UDP_PORT = 288817534688559637n;
export const MPEG2_E_DATA_SOURCE_FAILED = 288818634200187414n;
export const MPEG2_E_DII_NOT_FOUND = 988480280986135;
export const MPEG2_E_DSHOW_PIN_NOT_FOUND = 288821932735070744n;
export const MPEG2_E_BUFFER_TOO_SMALL = 288830728828092953n;
export const MPEG2_E_MISSING_SECTIONS = 288824131758326298n;
export const MPEG2_E_TOO_MANY_SECTIONS = 288820833223442971n;
export const MPEG2_E_NEXT_TABLE_OPS_NOT_AVAILABLE = 288825231269954076n;
export const MPEG2_E_INCORRECT_DESCRIPTOR_TAG = 288826330781581853n;
export const MSDRI_S_MMI_PENDING = 4415226380290;
export const MSDRI_S_PENDING = 2216203124737;
export const BDA_E_FAILURE = 292735095692066817n;
export const BDA_E_NOT_IMPLEMENTED = 288234794599579650n;
export const BDA_E_NO_SUCH_COMMAND = 288235894111207427n;
export const BDA_E_OUT_OF_BOUNDS = 288236993622835204n;
export const BDA_E_INVALID_SCHEMA = 288239192646090757n;
export const BDA_E_INVALID_HANDLE = 288238093134462982n;
export const BDA_E_INVALID_TYPE = 288240292157718535n;
export const BDA_E_READ_ONLY = 288241391669346312n;
export const BDA_E_ACCESS_DENIED = 288242491180974089n;
export const BDA_E_NOT_FOUND = 288243590692601866n;
export const BDA_E_BUFFER_TOO_SMALL = 288246889227485195n;
export const BDA_E_OUT_OF_RESOURCES = 288244690204229644n;
export const BDA_E_OUT_OF_MEMORY = 288245789715857421n;
export const BDA_E_DISABLED = 288249088250740750n;
export const BDA_E_NO_HANDLER = 288247988739112975n;
export const BDA_E_INVALID_LANGUAGE = 288251287273996304n;
export const BDA_E_TIMEOUT_ELAPSED = 288250187762368529n;
export const BDA_E_NO_MORE_EVENTS = 292736195203698689n;
export const BDA_E_NO_MORE_DATA = 301742294946811906n;
export const BDA_E_TUNER_INITIALIZING = 301743394458447873n;
export const BDA_E_TUNER_REQUIRED = 301744493970075650n;
export const BDA_E_TUNER_CONFLICT = 301745593481703427n;
export const BDA_E_INVALID_TUNE_REQUEST = 306245894574190596n;
export const BDA_E_INVALID_ENTITLEMENT_TOKEN = 306246994085822465n;
export const BDA_E_INVALID_CAPTURE_TOKEN = 306248093597450242n;
export const BDA_E_WOULD_DISRUPT_STREAMING = 306249193109078019n;
export const BDA_E_INVALID_PURCHASE_TOKEN = 310749494201565188n;
export const BDA_E_IPNETWORK_ERROR = 310750593713197057n;
export const BDA_E_IPNETWORK_ADDRESS_NOT_FOUND = 310751693224824834n;
export const BDA_E_IPNETWORK_TIMEOUT = 310752792736452611n;
export const BDA_E_IPNETWORK_UNAVAILABLE = 315253093828939780n;
export const BDA_E_TUNE_FAILED_SDV01 = 315254193340571649n;
export const BDA_E_TUNE_FAILED_SDV02 = 315255292852199426n;
export const BDA_E_TUNE_FAILED_SDV03 = 315256392363827203n;
export const BDA_E_TUNE_FAILED_SDV04 = 315257491875454980n;
export const BDA_E_TUNE_FAILED_SDV05 = 315258591387082757n;
export const BDA_E_TUNE_FAILED_SDV06 = 315259690898710534n;
export const BDA_E_TUNE_FAILED_SDV07 = 315260790410338311n;
export const BDA_E_TUNE_FAILED_SDV08 = 315532369782398984n;
export const BDA_E_TUNE_FAILED_SDVFF = 355785490475278591n;
export const BDA_E_WMDRM_INVALID_SIGNATURE = 355786589986942977n;
export const BDA_E_WMDRM_INVALID_CERTIFICATE = 355788789010198530n;
export const BDA_E_WMDRM_INVALID_VERSION = 355789888521826308n;
export const BDA_E_WMDRM_INVALID_DATE = 355790988033454085n;
export const BDA_E_WMDRM_INVALID_PROXIMITY = 355793187056709638n;
export const BDA_E_WMDRM_KEY_ID_NOT_FOUND = 10520409918170001416n;
export const g_wszStreamBufferRecordingDuration = `Duration`;
export const g_wszStreamBufferRecordingBitrate = `Bitrate`;
export const g_wszStreamBufferRecordingSeekable = `Seekable`;
export const g_wszStreamBufferRecordingStridable = `Stridable`;
export const g_wszStreamBufferRecordingBroadcast = `Broadcast`;
export const g_wszStreamBufferRecordingProtected = `Is_Protected`;
export const g_wszStreamBufferRecordingTrusted = `Is_Trusted`;
export const g_wszStreamBufferRecordingSignature_Name = `Signature_Name`;
export const g_wszStreamBufferRecordingHasAudio = `HasAudio`;
export const g_wszStreamBufferRecordingHasImage = `HasImage`;
export const g_wszStreamBufferRecordingHasScript = `HasScript`;
export const g_wszStreamBufferRecordingHasVideo = `HasVideo`;
export const g_wszStreamBufferRecordingCurrentBitrate = `CurrentBitrate`;
export const g_wszStreamBufferRecordingOptimalBitrate = `OptimalBitrate`;
export const g_wszStreamBufferRecordingHasAttachedImages = `HasAttachedImages`;
export const g_wszStreamBufferRecordingSkipBackward = `Can_Skip_Backward`;
export const g_wszStreamBufferRecordingSkipForward = `Can_Skip_Forward`;
export const g_wszStreamBufferRecordingNumberOfFrames = `NumberOfFrames`;
export const g_wszStreamBufferRecordingFileSize = `FileSize`;
export const g_wszStreamBufferRecordingHasArbitraryDataStream = `HasArbitraryDataStream`;
export const g_wszStreamBufferRecordingHasFileTransferStream = `HasFileTransferStream`;
export const g_wszStreamBufferRecordingTitle = `Title`;
export const g_wszStreamBufferRecordingAuthor = `Author`;
export const g_wszStreamBufferRecordingDescription = `Description`;
export const g_wszStreamBufferRecordingRating = `Rating`;
export const g_wszStreamBufferRecordingCopyright = `Copyright`;
export const g_wszStreamBufferRecordingUse_DRM = `Use_DRM`;
export const g_wszStreamBufferRecordingDRM_Flags = `DRM_Flags`;
export const g_wszStreamBufferRecordingDRM_Level = `DRM_Level`;
export const g_wszStreamBufferRecordingAlbumTitle = `WM/AlbumTitle`;
export const g_wszStreamBufferRecordingTrack = `WM/Track`;
export const g_wszStreamBufferRecordingPromotionURL = `WM/PromotionURL`;
export const g_wszStreamBufferRecordingAlbumCoverURL = `WM/AlbumCoverURL`;
export const g_wszStreamBufferRecordingGenre = `WM/Genre`;
export const g_wszStreamBufferRecordingYear = `WM/Year`;
export const g_wszStreamBufferRecordingGenreID = `WM/GenreID`;
export const g_wszStreamBufferRecordingMCDI = `WM/MCDI`;
export const g_wszStreamBufferRecordingComposer = `WM/Composer`;
export const g_wszStreamBufferRecordingLyrics = `WM/Lyrics`;
export const g_wszStreamBufferRecordingTrackNumber = `WM/TrackNumber`;
export const g_wszStreamBufferRecordingToolName = `WM/ToolName`;
export const g_wszStreamBufferRecordingToolVersion = `WM/ToolVersion`;
export const g_wszStreamBufferRecordingIsVBR = `IsVBR`;
export const g_wszStreamBufferRecordingAlbumArtist = `WM/AlbumArtist`;
export const g_wszStreamBufferRecordingBannerImageType = `BannerImageType`;
export const g_wszStreamBufferRecordingBannerImageData = `BannerImageData`;
export const g_wszStreamBufferRecordingBannerImageURL = `BannerImageURL`;
export const g_wszStreamBufferRecordingCopyrightURL = `CopyrightURL`;
export const g_wszStreamBufferRecordingAspectRatioX = `AspectRatioX`;
export const g_wszStreamBufferRecordingAspectRatioY = `AspectRatioY`;
export const g_wszStreamBufferRecordingNSCName = `NSC_Name`;
export const g_wszStreamBufferRecordingNSCAddress = `NSC_Address`;
export const g_wszStreamBufferRecordingNSCPhone = `NSC_Phone`;
export const g_wszStreamBufferRecordingNSCEmail = `NSC_Email`;
export const g_wszStreamBufferRecordingNSCDescription = `NSC_Description`;
export const STREAMBUFFER_EC_TIMEHOLE = 806;
export const STREAMBUFFER_EC_STALE_DATA_READ = 807;
export const STREAMBUFFER_EC_STALE_FILE_DELETED = 808;
export const STREAMBUFFER_EC_CONTENT_BECOMING_STALE = 809;
export const STREAMBUFFER_EC_WRITE_FAILURE = 810;
export const STREAMBUFFER_EC_WRITE_FAILURE_CLEAR = 811;
export const STREAMBUFFER_EC_READ_FAILURE = 812;
export const STREAMBUFFER_EC_RATE_CHANGED = 813;
export const STREAMBUFFER_EC_PRIMARY_AUDIO = 814;
export const STREAMBUFFER_EC_RATE_CHANGING_FOR_SETPOSITIONS = 815;
export const STREAMBUFFER_EC_SETPOSITIONS_EVENTS_DONE = 816;
export const AMVP_DO_NOT_CARE = 0;
export const AMVP_BEST_BANDWIDTH = 1;
export const AMVP_INPUT_SAME_AS_OUTPUT = 2;
export const AMVP_MODE_WEAVE = 0;
export const AMVP_MODE_BOBINTERLEAVED = 1;
export const AMVP_MODE_BOBNONINTERLEAVED = 2;
export const AMVP_MODE_SKIPEVEN = 3;
export const AMVP_MODE_SKIPODD = 4;
export const PINDIR_INPUT = 0;
export const PINDIR_OUTPUT = 1;
export const State_Stopped = 0;
export const State_Paused = 1;
export const State_Running = 2;
export const AM_SAMPLE_SPLICEPOINT = 1;
export const AM_SAMPLE_PREROLL = 2;
export const AM_SAMPLE_DATADISCONTINUITY = 4;
export const AM_SAMPLE_TYPECHANGED = 8;
export const AM_SAMPLE_TIMEVALID = 16;
export const AM_SAMPLE_TIMEDISCONTINUITY = 64;
export const AM_SAMPLE_FLUSH_ON_PAUSE = 128;
export const AM_SAMPLE_STOPVALID = 256;
export const AM_SAMPLE_ENDOFSTREAM = 512;
export const AM_STREAM_MEDIA = 0;
export const AM_STREAM_CONTROL = 1;
export const AM_SEEKING_NoPositioning = 0;
export const AM_SEEKING_AbsolutePositioning = 1;
export const AM_SEEKING_RelativePositioning = 2;
export const AM_SEEKING_IncrementalPositioning = 3;
export const AM_SEEKING_PositioningBitsMask = 3;
export const AM_SEEKING_SeekToKeyFrame = 4;
export const AM_SEEKING_ReturnTime = 8;
export const AM_SEEKING_Segment = 16;
export const AM_SEEKING_NoFlush = 32;
export const AM_SEEKING_CanSeekAbsolute = 1;
export const AM_SEEKING_CanSeekForwards = 2;
export const AM_SEEKING_CanSeekBackwards = 4;
export const AM_SEEKING_CanGetCurrentPos = 8;
export const AM_SEEKING_CanGetStopPos = 16;
export const AM_SEEKING_CanGetDuration = 32;
export const AM_SEEKING_CanPlayBackwards = 64;
export const AM_SEEKING_CanDoSegments = 128;
export const AM_SEEKING_Source = 256;
export const AM_MEDIAEVENT_NONOTIFY = 1;
export const MERIT_PREFERRED = 8388608;
export const MERIT_NORMAL = 6291456;
export const MERIT_UNLIKELY = 4194304;
export const MERIT_DO_NOT_USE = 2097152;
export const MERIT_SW_COMPRESSOR = 1048576;
export const MERIT_HW_COMPRESSOR = 1048656;
export const REG_PINFLAG_B_ZERO = 1;
export const REG_PINFLAG_B_RENDERER = 2;
export const REG_PINFLAG_B_MANY = 4;
export const REG_PINFLAG_B_OUTPUT = 8;
export const Famine = 0;
export const Flood = 1;
export const CK_NOCOLORKEY = 0;
export const CK_INDEX = 1;
export const CK_RGB = 2;
export const ADVISE_NONE = 0;
export const ADVISE_CLIPPING = 1;
export const ADVISE_PALETTE = 2;
export const ADVISE_COLORKEY = 4;
export const ADVISE_POSITION = 8;
export const ADVISE_DISPLAY_CHANGE = 16;
export const AM_FILE_OVERWRITE = 1;
export const AM_RENDEREX_RENDERTOEXISTINGRENDERERS = 1;
export const AM_STREAM_INFO_START_DEFINED = 1;
export const AM_STREAM_INFO_STOP_DEFINED = 2;
export const AM_STREAM_INFO_DISCARDING = 4;
export const AM_STREAM_INFO_STOP_SEND_EXTRA = 16;
export const INTERLEAVE_NONE = 0;
export const INTERLEAVE_CAPTURE = 1;
export const INTERLEAVE_FULL = 2;
export const INTERLEAVE_NONE_BUFFERED = 3;
export const CompressionCaps_CanQuality = 1;
export const CompressionCaps_CanCrunch = 2;
export const CompressionCaps_CanKeyFrame = 4;
export const CompressionCaps_CanBFrame = 8;
export const CompressionCaps_CanWindow = 16;
export const VfwCaptureDialog_Source = 1;
export const VfwCaptureDialog_Format = 2;
export const VfwCaptureDialog_Display = 4;
export const VfwCompressDialog_Config = 1;
export const VfwCompressDialog_About = 2;
export const VfwCompressDialog_QueryConfig = 4;
export const VfwCompressDialog_QueryAbout = 8;
export const AnalogVideo_None = 0;
export const AnalogVideo_NTSC_M = 1;
export const AnalogVideo_NTSC_M_J = 2;
export const AnalogVideo_NTSC_433 = 4;
export const AnalogVideo_PAL_B = 16;
export const AnalogVideo_PAL_D = 32;
export const AnalogVideo_PAL_G = 64;
export const AnalogVideo_PAL_H = 128;
export const AnalogVideo_PAL_I = 256;
export const AnalogVideo_PAL_M = 512;
export const AnalogVideo_PAL_N = 1024;
export const AnalogVideo_PAL_60 = 2048;
export const AnalogVideo_SECAM_B = 4096;
export const AnalogVideo_SECAM_D = 8192;
export const AnalogVideo_SECAM_G = 16384;
export const AnalogVideo_SECAM_H = 32768;
export const AnalogVideo_SECAM_K = 65536;
export const AnalogVideo_SECAM_K1 = 131072;
export const AnalogVideo_SECAM_L = 262144;
export const AnalogVideo_SECAM_L1 = 524288;
export const AnalogVideo_PAL_N_COMBO = 1048576;
export const AnalogVideoMask_MCE_NTSC = 1052167;
export const AnalogVideoMask_MCE_PAL = 496;
export const AnalogVideoMask_MCE_SECAM = 1044480;
export const TunerInputCable = 0;
export const TunerInputAntenna = 1;
export const VideoCopyProtectionMacrovisionBasic = 0;
export const VideoCopyProtectionMacrovisionCBI = 1;
export const PhysConn_Video_Tuner = 1;
export const PhysConn_Video_Composite = 2;
export const PhysConn_Video_SVideo = 3;
export const PhysConn_Video_RGB = 4;
export const PhysConn_Video_YRYBY = 5;
export const PhysConn_Video_SerialDigital = 6;
export const PhysConn_Video_ParallelDigital = 7;
export const PhysConn_Video_SCSI = 8;
export const PhysConn_Video_AUX = 9;
export const PhysConn_Video_1394 = 10;
export const PhysConn_Video_USB = 11;
export const PhysConn_Video_VideoDecoder = 12;
export const PhysConn_Video_VideoEncoder = 13;
export const PhysConn_Video_SCART = 14;
export const PhysConn_Video_Black = 15;
export const PhysConn_Audio_Tuner = 4096;
export const PhysConn_Audio_Line = 4097;
export const PhysConn_Audio_Mic = 4098;
export const PhysConn_Audio_AESDigital = 4099;
export const PhysConn_Audio_SPDIFDigital = 4100;
export const PhysConn_Audio_SCSI = 4101;
export const PhysConn_Audio_AUX = 4102;
export const PhysConn_Audio_1394 = 4103;
export const PhysConn_Audio_USB = 4104;
export const PhysConn_Audio_AudioDecoder = 4105;
export const VideoProcAmp_Brightness = 0;
export const VideoProcAmp_Contrast = 1;
export const VideoProcAmp_Hue = 2;
export const VideoProcAmp_Saturation = 3;
export const VideoProcAmp_Sharpness = 4;
export const VideoProcAmp_Gamma = 5;
export const VideoProcAmp_ColorEnable = 6;
export const VideoProcAmp_WhiteBalance = 7;
export const VideoProcAmp_BacklightCompensation = 8;
export const VideoProcAmp_Gain = 9;
export const VideoProcAmp_Flags_Auto = 1;
export const VideoProcAmp_Flags_Manual = 2;
export const CameraControl_Pan = 0;
export const CameraControl_Tilt = 1;
export const CameraControl_Roll = 2;
export const CameraControl_Zoom = 3;
export const CameraControl_Exposure = 4;
export const CameraControl_Iris = 5;
export const CameraControl_Focus = 6;
export const CameraControl_Flags_Auto = 1;
export const CameraControl_Flags_Manual = 2;
export const VideoControlFlag_FlipHorizontal = 1;
export const VideoControlFlag_FlipVertical = 2;
export const VideoControlFlag_ExternalTriggerEnable = 4;
export const VideoControlFlag_Trigger = 8;
export const AMTUNER_SUBCHAN_NO_TUNE = `-2`;
export const AMTUNER_SUBCHAN_DEFAULT = `-1`;
export const AMTUNER_HASNOSIGNALSTRENGTH = `-1`;
export const AMTUNER_NOSIGNAL = 0;
export const AMTUNER_SIGNALPRESENT = 1;
export const AMTUNER_MODE_DEFAULT = 0;
export const AMTUNER_MODE_TV = 1;
export const AMTUNER_MODE_FM_RADIO = 2;
export const AMTUNER_MODE_AM_RADIO = 4;
export const AMTUNER_MODE_DSS = 8;
export const AMTUNER_EVENT_CHANGED = 1;
export const AMTVAUDIO_MODE_MONO = 1;
export const AMTVAUDIO_MODE_STEREO = 2;
export const AMTVAUDIO_MODE_LANG_A = 16;
export const AMTVAUDIO_MODE_LANG_B = 32;
export const AMTVAUDIO_MODE_LANG_C = 64;
export const AMTVAUDIO_PRESET_STEREO = 512;
export const AMTVAUDIO_PRESET_LANG_A = 4096;
export const AMTVAUDIO_PRESET_LANG_B = 8192;
export const AMTVAUDIO_PRESET_LANG_C = 16384;
export const AMTVAUDIO_EVENT_CHANGED = 1;
export const AMPROPERTY_PIN_CATEGORY = 0;
export const AMPROPERTY_PIN_MEDIUM = 1;
export const AMSTREAMSELECTINFO_ENABLED = 1;
export const AMSTREAMSELECTINFO_EXCLUSIVE = 2;
export const AMSTREAMSELECTENABLE_ENABLE = 1;
export const AMSTREAMSELECTENABLE_ENABLEALL = 2;
export const AMRESCTL_RESERVEFLAGS_RESERVE = 0;
export const AMRESCTL_RESERVEFLAGS_UNRESERVE = 1;
export const AM_FILTER_MISC_FLAGS_IS_RENDERER = 1;
export const AM_FILTER_MISC_FLAGS_IS_SOURCE = 2;
export const DECIMATION_LEGACY = 0;
export const DECIMATION_USE_DECODER_ONLY = 1;
export const DECIMATION_USE_VIDEOPORT_ONLY = 2;
export const DECIMATION_USE_OVERLAY_ONLY = 3;
export const DECIMATION_DEFAULT = 4;
export const AM_PUSHSOURCECAPS_INTERNAL_RM = 1;
export const AM_PUSHSOURCECAPS_NOT_LIVE = 2;
export const AM_PUSHSOURCECAPS_PRIVATE_CLOCK = 4;
export const AM_PUSHSOURCEREQS_USE_STREAM_CLOCK = 65536;
export const AM_PUSHSOURCEREQS_USE_CLOCK_CHAIN = 131072;
export const DVENCODERRESOLUTION_720x480 = 2012;
export const DVENCODERRESOLUTION_360x240 = 2013;
export const DVENCODERRESOLUTION_180x120 = 2014;
export const DVENCODERRESOLUTION_88x60 = 2015;
export const DVENCODERVIDEOFORMAT_NTSC = 2000;
export const DVENCODERVIDEOFORMAT_PAL = 2001;
export const DVENCODERFORMAT_DVSD = 2007;
export const DVENCODERFORMAT_DVHD = 2008;
export const DVENCODERFORMAT_DVSL = 2009;
export const DVDECODERRESOLUTION_720x480 = 1000;
export const DVDECODERRESOLUTION_360x240 = 1001;
export const DVDECODERRESOLUTION_180x120 = 1002;
export const DVDECODERRESOLUTION_88x60 = 1003;
export const DVRESOLUTION_FULL = 1000;
export const DVRESOLUTION_HALF = 1001;
export const DVRESOLUTION_QUARTER = 1002;
export const DVRESOLUTION_DC = 1003;
export const AM_AUDREND_STAT_PARAM_BREAK_COUNT = 1;
export const AM_AUDREND_STAT_PARAM_SLAVE_MODE = 2;
export const AM_AUDREND_STAT_PARAM_SILENCE_DUR = 3;
export const AM_AUDREND_STAT_PARAM_LAST_BUFFER_DUR = 4;
export const AM_AUDREND_STAT_PARAM_DISCONTINUITIES = 5;
export const AM_AUDREND_STAT_PARAM_SLAVE_RATE = 6;
export const AM_AUDREND_STAT_PARAM_SLAVE_DROPWRITE_DUR = 7;
export const AM_AUDREND_STAT_PARAM_SLAVE_HIGHLOWERROR = 8;
export const AM_AUDREND_STAT_PARAM_SLAVE_LASTHIGHLOWERROR = 9;
export const AM_AUDREND_STAT_PARAM_SLAVE_ACCUMERROR = 10;
export const AM_AUDREND_STAT_PARAM_BUFFERFULLNESS = 11;
export const AM_AUDREND_STAT_PARAM_JITTER = 12;
export const AM_INTF_SEARCH_INPUT_PIN = 1;
export const AM_INTF_SEARCH_OUTPUT_PIN = 2;
export const AM_INTF_SEARCH_FILTER = 4;
export const AMOVERFX_NOFX = 0;
export const AMOVERFX_MIRRORLEFTRIGHT = 2;
export const AMOVERFX_MIRRORUPDOWN = 4;
export const AMOVERFX_DEINTERLACE = 8;
export const AM_PIN_FLOW_CONTROL_BLOCK = 1;
export const AM_GRAPH_CONFIG_RECONNECT_DIRECTCONNECT = 1;
export const AM_GRAPH_CONFIG_RECONNECT_CACHE_REMOVED_FILTERS = 2;
export const AM_GRAPH_CONFIG_RECONNECT_USE_ONLY_CACHED_FILTERS = 4;
export const REMFILTERF_LEAVECONNECTED = 1;
export const AM_FILTER_FLAGS_REMOVABLE = 1;
export const VMRSample_SyncPoint = 1;
export const VMRSample_Preroll = 2;
export const VMRSample_Discontinuity = 4;
export const VMRSample_TimeValid = 8;
export const VMRSample_SrcDstRectsValid = 16;
export const AMAP_PIXELFORMAT_VALID = 1;
export const AMAP_3D_TARGET = 2;
export const AMAP_ALLOW_SYSMEM = 4;
export const AMAP_FORCE_SYSMEM = 8;
export const AMAP_DIRECTED_FLIP = 16;
export const AMAP_DXVA_TARGET = 32;
export const VMR_ARMODE_NONE = 0;
export const VMR_ARMODE_LETTER_BOX = 1;
export const MixerPref_NoDecimation = 1;
export const MixerPref_DecimateOutput = 2;
export const MixerPref_ARAdjustXorY = 4;
export const MixerPref_DecimationReserved = 8;
export const MixerPref_DecimateMask = 15;
export const MixerPref_BiLinearFiltering = 16;
export const MixerPref_PointFiltering = 32;
export const MixerPref_FilteringMask = 240;
export const MixerPref_RenderTargetRGB = 256;
export const MixerPref_RenderTargetYUV = 4096;
export const MixerPref_RenderTargetYUV420 = 512;
export const MixerPref_RenderTargetYUV422 = 1024;
export const MixerPref_RenderTargetYUV444 = 2048;
export const MixerPref_RenderTargetReserved = 57344;
export const MixerPref_RenderTargetMask = 65280;
export const MixerPref_DynamicSwitchToBOB = 65536;
export const MixerPref_DynamicDecimateBy2 = 131072;
export const MixerPref_DynamicReserved = 786432;
export const MixerPref_DynamicMask = 983040;
export const RenderPrefs_RestrictToInitialMonitor = 0;
export const RenderPrefs_ForceOffscreen = 1;
export const RenderPrefs_ForceOverlays = 2;
export const RenderPrefs_AllowOverlays = 0;
export const RenderPrefs_AllowOffscreen = 0;
export const RenderPrefs_DoNotRenderColorKeyAndBorder = 8;
export const RenderPrefs_Reserved = 16;
export const RenderPrefs_PreferAGPMemWhenMixing = 32;
export const RenderPrefs_Mask = 63;
export const VMRMode_Windowed = 1;
export const VMRMode_Windowless = 2;
export const VMRMode_Renderless = 4;
export const VMRMode_Mask = 7;
export const MAX_NUMBER_OF_STREAMS = 16;
export const DeinterlacePref_NextBest = 1;
export const DeinterlacePref_BOB = 2;
export const DeinterlacePref_Weave = 4;
export const DeinterlacePref_Mask = 7;
export const DeinterlaceTech_Unknown = 0;
export const DeinterlaceTech_BOBLineReplicate = 1;
export const DeinterlaceTech_BOBVerticalStretch = 2;
export const DeinterlaceTech_MedianFiltering = 4;
export const DeinterlaceTech_EdgeFiltering = 16;
export const DeinterlaceTech_FieldAdaptive = 32;
export const DeinterlaceTech_PixelAdaptive = 64;
export const DeinterlaceTech_MotionVectorSteered = 128;
export const DVD_DOMAIN_FirstPlay = 1;
export const DVD_DOMAIN_VideoManagerMenu = 2;
export const DVD_DOMAIN_VideoTitleSetMenu = 3;
export const DVD_DOMAIN_Title = 4;
export const DVD_DOMAIN_Stop = 5;
export const DVD_MENU_Title = 2;
export const DVD_MENU_Root = 3;
export const DVD_MENU_Subpicture = 4;
export const DVD_MENU_Audio = 5;
export const DVD_MENU_Angle = 6;
export const DVD_MENU_Chapter = 7;
export const DVD_SIDE_A = 1;
export const DVD_SIDE_B = 2;
export const DISPLAY_CONTENT_DEFAULT = 0;
export const DISPLAY_16x9 = 1;
export const DISPLAY_4x3_PANSCAN_PREFERRED = 2;
export const DISPLAY_4x3_LETTERBOX_PREFERRED = 3;
export const DVD_FPS_25 = 1;
export const DVD_FPS_30NonDrop = 3;
export const DVD_NavCmdType_Pre = 1;
export const DVD_NavCmdType_Post = 2;
export const DVD_NavCmdType_Cell = 3;
export const DVD_NavCmdType_Button = 4;
export const DVD_TC_FLAG_25fps = 1;
export const DVD_TC_FLAG_30fps = 2;
export const DVD_TC_FLAG_DropFrame = 4;
export const DVD_TC_FLAG_Interpolated = 8;
export const UOP_FLAG_Play_Title_Or_AtTime = 1;
export const UOP_FLAG_Play_Chapter = 2;
export const UOP_FLAG_Play_Title = 4;
export const UOP_FLAG_Stop = 8;
export const UOP_FLAG_ReturnFromSubMenu = 16;
export const UOP_FLAG_Play_Chapter_Or_AtTime = 32;
export const UOP_FLAG_PlayPrev_Or_Replay_Chapter = 64;
export const UOP_FLAG_PlayNext_Chapter = 128;
export const UOP_FLAG_Play_Forwards = 256;
export const UOP_FLAG_Play_Backwards = 512;
export const UOP_FLAG_ShowMenu_Title = 1024;
export const UOP_FLAG_ShowMenu_Root = 2048;
export const UOP_FLAG_ShowMenu_SubPic = 4096;
export const UOP_FLAG_ShowMenu_Audio = 8192;
export const UOP_FLAG_ShowMenu_Angle = 16384;
export const UOP_FLAG_ShowMenu_Chapter = 32768;
export const UOP_FLAG_Resume = 65536;
export const UOP_FLAG_Select_Or_Activate_Button = 131072;
export const UOP_FLAG_Still_Off = 262144;
export const UOP_FLAG_Pause_On = 524288;
export const UOP_FLAG_Select_Audio_Stream = 1048576;
export const UOP_FLAG_Select_SubPic_Stream = 2097152;
export const UOP_FLAG_Select_Angle = 4194304;
export const UOP_FLAG_Select_Karaoke_Audio_Presentation_Mode = 8388608;
export const UOP_FLAG_Select_Video_Mode_Preference = 16777216;
export const DVD_CMD_FLAG_None = 0;
export const DVD_CMD_FLAG_Flush = 1;
export const DVD_CMD_FLAG_SendEvents = 2;
export const DVD_CMD_FLAG_Block = 4;
export const DVD_CMD_FLAG_StartWhenRendered = 8;
export const DVD_CMD_FLAG_EndAfterRendered = 16;
export const DVD_ResetOnStop = 1;
export const DVD_NotifyParentalLevelChange = 2;
export const DVD_HMSF_TimeCodeEvents = 3;
export const DVD_AudioDuringFFwdRew = 4;
export const DVD_EnableNonblockingAPIs = 5;
export const DVD_CacheSizeInMB = 6;
export const DVD_EnablePortableBookmarks = 7;
export const DVD_EnableExtendedCopyProtectErrors = 8;
export const DVD_NotifyPositionChange = 9;
export const DVD_IncreaseOutputControl = 10;
export const DVD_EnableStreaming = 11;
export const DVD_EnableESOutput = 12;
export const DVD_EnableTitleLength = 13;
export const DVD_DisableStillThrottle = 14;
export const DVD_EnableLoggingEvents = 15;
export const DVD_MaxReadBurstInKB = 16;
export const DVD_ReadBurstPeriodInMS = 17;
export const DVD_RestartDisc = 18;
export const DVD_EnableCC = 19;
export const DVD_Relative_Upper = 1;
export const DVD_Relative_Lower = 2;
export const DVD_Relative_Left = 3;
export const DVD_Relative_Right = 4;
export const DVD_PARENTAL_LEVEL_8 = 32768;
export const DVD_PARENTAL_LEVEL_7 = 16384;
export const DVD_PARENTAL_LEVEL_6 = 8192;
export const DVD_PARENTAL_LEVEL_5 = 4096;
export const DVD_PARENTAL_LEVEL_4 = 2048;
export const DVD_PARENTAL_LEVEL_3 = 1024;
export const DVD_PARENTAL_LEVEL_2 = 512;
export const DVD_PARENTAL_LEVEL_1 = 256;
export const DVD_AUD_EXT_NotSpecified = 0;
export const DVD_AUD_EXT_Captions = 1;
export const DVD_AUD_EXT_VisuallyImpaired = 2;
export const DVD_AUD_EXT_DirectorComments1 = 3;
export const DVD_AUD_EXT_DirectorComments2 = 4;
export const DVD_SP_EXT_NotSpecified = 0;
export const DVD_SP_EXT_Caption_Normal = 1;
export const DVD_SP_EXT_Caption_Big = 2;
export const DVD_SP_EXT_Caption_Children = 3;
export const DVD_SP_EXT_CC_Normal = 5;
export const DVD_SP_EXT_CC_Big = 6;
export const DVD_SP_EXT_CC_Children = 7;
export const DVD_SP_EXT_Forced = 9;
export const DVD_SP_EXT_DirectorComments_Normal = 13;
export const DVD_SP_EXT_DirectorComments_Big = 14;
export const DVD_SP_EXT_DirectorComments_Children = 15;
export const DVD_AudioMode_None = 0;
export const DVD_AudioMode_Karaoke = 1;
export const DVD_AudioMode_Surround = 2;
export const DVD_AudioMode_Other = 3;
export const DVD_AudioFormat_AC3 = 0;
export const DVD_AudioFormat_MPEG1 = 1;
export const DVD_AudioFormat_MPEG1_DRC = 2;
export const DVD_AudioFormat_MPEG2 = 3;
export const DVD_AudioFormat_MPEG2_DRC = 4;
export const DVD_AudioFormat_LPCM = 5;
export const DVD_AudioFormat_DTS = 6;
export const DVD_AudioFormat_SDDS = 7;
export const DVD_AudioFormat_Other = 8;
export const DVD_Mix_0to0 = 1;
export const DVD_Mix_1to0 = 2;
export const DVD_Mix_2to0 = 4;
export const DVD_Mix_3to0 = 8;
export const DVD_Mix_4to0 = 16;
export const DVD_Mix_Lto0 = 32;
export const DVD_Mix_Rto0 = 64;
export const DVD_Mix_0to1 = 256;
export const DVD_Mix_1to1 = 512;
export const DVD_Mix_2to1 = 1024;
export const DVD_Mix_3to1 = 2048;
export const DVD_Mix_4to1 = 4096;
export const DVD_Mix_Lto1 = 8192;
export const DVD_Mix_Rto1 = 16384;
export const DVD_Karaoke_GuideVocal1 = 1;
export const DVD_Karaoke_GuideVocal2 = 2;
export const DVD_Karaoke_GuideMelody1 = 4;
export const DVD_Karaoke_GuideMelody2 = 8;
export const DVD_Karaoke_GuideMelodyA = 16;
export const DVD_Karaoke_GuideMelodyB = 32;
export const DVD_Karaoke_SoundEffectA = 64;
export const DVD_Karaoke_SoundEffectB = 128;
export const DVD_Assignment_reserved0 = 0;
export const DVD_Assignment_reserved1 = 1;
export const DVD_Assignment_LR = 2;
export const DVD_Assignment_LRM = 3;
export const DVD_Assignment_LR1 = 4;
export const DVD_Assignment_LRM1 = 5;
export const DVD_Assignment_LR12 = 6;
export const DVD_Assignment_LRM12 = 7;
export const DVD_VideoCompression_Other = 0;
export const DVD_VideoCompression_MPEG1 = 1;
export const DVD_VideoCompression_MPEG2 = 2;
export const DVD_SPType_NotSpecified = 0;
export const DVD_SPType_Language = 1;
export const DVD_SPType_Other = 2;
export const DVD_SPCoding_RunLength = 0;
export const DVD_SPCoding_Extended = 1;
export const DVD_SPCoding_Other = 2;
export const DVD_AppMode_Not_Specified = 0;
export const DVD_AppMode_Karaoke = 1;
export const DVD_AppMode_Other = 3;
export const DVD_Struct_Volume = 1;
export const DVD_Struct_Title = 2;
export const DVD_Struct_ParentalID = 3;
export const DVD_Struct_PartOfTitle = 4;
export const DVD_Struct_Cell = 5;
export const DVD_Stream_Audio = 16;
export const DVD_Stream_Subpicture = 17;
export const DVD_Stream_Angle = 18;
export const DVD_Channel_Audio = 32;
export const DVD_General_Name = 48;
export const DVD_General_Comments = 49;
export const DVD_Title_Series = 56;
export const DVD_Title_Movie = 57;
export const DVD_Title_Video = 58;
export const DVD_Title_Album = 59;
export const DVD_Title_Song = 60;
export const DVD_Title_Other = 63;
export const DVD_Title_Sub_Series = 64;
export const DVD_Title_Sub_Movie = 65;
export const DVD_Title_Sub_Video = 66;
export const DVD_Title_Sub_Album = 67;
export const DVD_Title_Sub_Song = 68;
export const DVD_Title_Sub_Other = 71;
export const DVD_Title_Orig_Series = 72;
export const DVD_Title_Orig_Movie = 73;
export const DVD_Title_Orig_Video = 74;
export const DVD_Title_Orig_Album = 75;
export const DVD_Title_Orig_Song = 76;
export const DVD_Title_Orig_Other = 79;
export const DVD_Other_Scene = 80;
export const DVD_Other_Cut = 81;
export const DVD_Other_Take = 82;
export const DVD_CharSet_Unicode = 0;
export const DVD_CharSet_ISO646 = 1;
export const DVD_CharSet_JIS_Roman_Kanji = 2;
export const DVD_CharSet_ISO8859_1 = 3;
export const DVD_CharSet_ShiftJIS_Kanji_Roman_Katakana = 4;
export const AM_DVD_HWDEC_PREFER = 1;
export const AM_DVD_HWDEC_ONLY = 2;
export const AM_DVD_SWDEC_PREFER = 4;
export const AM_DVD_SWDEC_ONLY = 8;
export const AM_DVD_NOVPE = 256;
export const AM_DVD_DO_NOT_CLEAR = 512;
export const AM_DVD_VMR9_ONLY = 2048;
export const AM_DVD_EVR_ONLY = 4096;
export const AM_DVD_EVR_QOS = 8192;
export const AM_DVD_ADAPT_GRAPH = 16384;
export const AM_DVD_MASK = 65535;
export const AM_DVD_STREAM_VIDEO = 1;
export const AM_DVD_STREAM_AUDIO = 2;
export const AM_DVD_STREAM_SUBPIC = 4;
export const AM_OVERLAY_NOTIFY_VISIBLE_CHANGE = 1;
export const AM_OVERLAY_NOTIFY_SOURCE_CHANGE = 2;
export const AM_OVERLAY_NOTIFY_DEST_CHANGE = 4;
export const BDA_EVENT_SIGNAL_LOSS = 0;
export const BDA_EVENT_SIGNAL_LOCK = 1;
export const BDA_EVENT_DATA_START = 2;
export const BDA_EVENT_DATA_STOP = 3;
export const BDA_EVENT_CHANNEL_ACQUIRED = 4;
export const BDA_EVENT_CHANNEL_LOST = 5;
export const BDA_EVENT_CHANNEL_SOURCE_CHANGED = 6;
export const BDA_EVENT_CHANNEL_ACTIVATED = 7;
export const BDA_EVENT_CHANNEL_DEACTIVATED = 8;
export const BDA_EVENT_SUBCHANNEL_ACQUIRED = 9;
export const BDA_EVENT_SUBCHANNEL_LOST = 10;
export const BDA_EVENT_SUBCHANNEL_SOURCE_CHANGED = 11;
export const BDA_EVENT_SUBCHANNEL_ACTIVATED = 12;
export const BDA_EVENT_SUBCHANNEL_DEACTIVATED = 13;
export const BDA_EVENT_ACCESS_GRANTED = 14;
export const BDA_EVENT_ACCESS_DENIED = 15;
export const BDA_EVENT_OFFER_EXTENDED = 16;
export const BDA_EVENT_PURCHASE_COMPLETED = 17;
export const BDA_EVENT_SMART_CARD_INSERTED = 18;
export const BDA_EVENT_SMART_CARD_REMOVED = 19;
export const BDA_PROMISCUOUS_MULTICAST = 0;
export const BDA_FILTERED_MULTICAST = 1;
export const BDA_NO_MULTICAST = 2;
export const BDA_SIGNAL_UNAVAILABLE = 0;
export const BDA_SIGNAL_INACTIVE = 1;
export const BDA_SIGNAL_ACTIVE = 2;
export const BDA_CHANGES_COMPLETE = 0;
export const BDA_CHANGES_PENDING = 1;
export const MEDIA_TRANSPORT_PACKET = 0;
export const MEDIA_ELEMENTARY_STREAM = 1;
export const MEDIA_MPEG2_PSI = 2;
export const MEDIA_TRANSPORT_PAYLOAD = 3;
export const ISDBCAS_REQUEST_ID_EMG = 56;
export const ISDBCAS_REQUEST_ID_EMD = 58;
export const PID_OTHER = `-1`;
export const PID_ELEMENTARY_STREAM = 0;
export const PID_MPEG2_SECTION_PSI_SI = 1;
export const DVB_Cable = 0;
export const DVB_Terrestrial = 1;
export const DVB_Satellite = 2;
export const ISDB_Terrestrial = 3;
export const ISDB_Satellite = 4;
export const BDA_UNDEFINED_CHANNEL = `-1`;
export const CategoryNotSet = `-1`;
export const CategoryOther = 0;
export const CategoryVideo = 1;
export const CategoryAudio = 2;
export const CategoryText = 3;
export const CategorySubtitles = 4;
export const CategoryCaptions = 5;
export const CategorySuperimpose = 6;
export const CategoryData = 7;
export const CATEGORY_COUNT = 8;
export const StatusActive = 0;
export const StatusInactive = 1;
export const StatusUnavailable = 2;
export const BDA_UNITIALIZED_MPEG2STREAMTYPE = `-1`;
export const Reserved1 = 0;
export const ISO_IEC_11172_2_VIDEO = 1;
export const ISO_IEC_13818_2_VIDEO = 2;
export const ISO_IEC_11172_3_AUDIO = 3;
export const ISO_IEC_13818_3_AUDIO = 4;
export const ISO_IEC_13818_1_PRIVATE_SECTION = 5;
export const ISO_IEC_13818_1_PES = 6;
export const ISO_IEC_13522_MHEG = 7;
export const ANNEX_A_DSM_CC = 8;
export const ITU_T_REC_H_222_1 = 9;
export const ISO_IEC_13818_6_TYPE_A = 10;
export const ISO_IEC_13818_6_TYPE_B = 11;
export const ISO_IEC_13818_6_TYPE_C = 12;
export const ISO_IEC_13818_6_TYPE_D = 13;
export const ISO_IEC_13818_1_AUXILIARY = 14;
export const ISO_IEC_13818_7_AUDIO = 15;
export const ISO_IEC_14496_2_VISUAL = 16;
export const ISO_IEC_14496_3_AUDIO = 17;
export const ISO_IEC_14496_1_IN_PES = 18;
export const ISO_IEC_14496_1_IN_SECTION = 19;
export const ISO_IEC_13818_6_DOWNLOAD = 20;
export const METADATA_IN_PES = 21;
export const METADATA_IN_SECTION = 22;
export const METADATA_IN_DATA_CAROUSEL = 23;
export const METADATA_IN_OBJECT_CAROUSEL = 24;
export const METADATA_IN_DOWNLOAD_PROTOCOL = 25;
export const IRPM_STREAMM = 26;
export const ITU_T_H264 = 27;
export const ISO_IEC_13818_1_RESERVED = 28;
export const USER_PRIVATE = 16;
export const HEVC_VIDEO_OR_TEMPORAL_VIDEO = 36;
export const HEVC_TEMPORAL_VIDEO_SUBSET = 37;
export const ISO_IEC_USER_PRIVATE = 128;
export const DOLBY_AC3_AUDIO = 129;
export const DOLBY_DIGITAL_PLUS_AUDIO_ATSC = 135;
export const ATSCCT_AC3 = 1;
export const BDA_BCC_RATE_NOT_SET = `-1`;
export const BDA_BCC_RATE_NOT_DEFINED = 0;
export const BDA_BCC_RATE_1_2 = 1;
export const BDA_BCC_RATE_2_3 = 2;
export const BDA_BCC_RATE_3_4 = 3;
export const BDA_BCC_RATE_3_5 = 4;
export const BDA_BCC_RATE_4_5 = 5;
export const BDA_BCC_RATE_5_6 = 6;
export const BDA_BCC_RATE_5_11 = 7;
export const BDA_BCC_RATE_7_8 = 8;
export const BDA_BCC_RATE_1_4 = 9;
export const BDA_BCC_RATE_1_3 = 10;
export const BDA_BCC_RATE_2_5 = 11;
export const BDA_BCC_RATE_6_7 = 12;
export const BDA_BCC_RATE_8_9 = 13;
export const BDA_BCC_RATE_9_10 = 14;
export const BDA_BCC_RATE_MAX = 15;
export const BDA_FEC_METHOD_NOT_SET = `-1`;
export const BDA_FEC_METHOD_NOT_DEFINED = 0;
export const BDA_FEC_VITERBI = 1;
export const BDA_FEC_RS_204_188 = 2;
export const BDA_FEC_LDPC = 3;
export const BDA_FEC_BCH = 4;
export const BDA_FEC_RS_147_130 = 5;
export const BDA_FEC_MAX = 6;
export const BDA_MOD_NOT_SET = `-1`;
export const BDA_MOD_NOT_DEFINED = 0;
export const BDA_MOD_16QAM = 1;
export const BDA_MOD_32QAM = 2;
export const BDA_MOD_64QAM = 3;
export const BDA_MOD_80QAM = 4;
export const BDA_MOD_96QAM = 5;
export const BDA_MOD_112QAM = 6;
export const BDA_MOD_128QAM = 7;
export const BDA_MOD_160QAM = 8;
export const BDA_MOD_192QAM = 9;
export const BDA_MOD_224QAM = 10;
export const BDA_MOD_256QAM = 11;
export const BDA_MOD_320QAM = 12;
export const BDA_MOD_384QAM = 13;
export const BDA_MOD_448QAM = 14;
export const BDA_MOD_512QAM = 15;
export const BDA_MOD_640QAM = 16;
export const BDA_MOD_768QAM = 17;
export const BDA_MOD_896QAM = 18;
export const BDA_MOD_1024QAM = 19;
export const BDA_MOD_QPSK = 20;
export const BDA_MOD_BPSK = 21;
export const BDA_MOD_OQPSK = 22;
export const BDA_MOD_8VSB = 23;
export const BDA_MOD_16VSB = 24;
export const BDA_MOD_ANALOG_AMPLITUDE = 25;
export const BDA_MOD_ANALOG_FREQUENCY = 26;
export const BDA_MOD_8PSK = 27;
export const BDA_MOD_RF = 28;
export const BDA_MOD_16APSK = 29;
export const BDA_MOD_32APSK = 30;
export const BDA_MOD_NBC_QPSK = 31;
export const BDA_MOD_NBC_8PSK = 32;
export const BDA_MOD_DIRECTV = 33;
export const BDA_MOD_ISDB_T_TMCC = 34;
export const BDA_MOD_ISDB_S_TMCC = 35;
export const BDA_MOD_MAX = 36;
export const BDA_SCAN_MOD_16QAM = 1;
export const BDA_SCAN_MOD_32QAM = 2;
export const BDA_SCAN_MOD_64QAM = 4;
export const BDA_SCAN_MOD_80QAM = 8;
export const BDA_SCAN_MOD_96QAM = 16;
export const BDA_SCAN_MOD_112QAM = 32;
export const BDA_SCAN_MOD_128QAM = 64;
export const BDA_SCAN_MOD_160QAM = 128;
export const BDA_SCAN_MOD_192QAM = 256;
export const BDA_SCAN_MOD_224QAM = 512;
export const BDA_SCAN_MOD_256QAM = 1024;
export const BDA_SCAN_MOD_320QAM = 2048;
export const BDA_SCAN_MOD_384QAM = 4096;
export const BDA_SCAN_MOD_448QAM = 8192;
export const BDA_SCAN_MOD_512QAM = 16384;
export const BDA_SCAN_MOD_640QAM = 32768;
export const BDA_SCAN_MOD_768QAM = 65536;
export const BDA_SCAN_MOD_896QAM = 131072;
export const BDA_SCAN_MOD_1024QAM = 262144;
export const BDA_SCAN_MOD_QPSK = 524288;
export const BDA_SCAN_MOD_BPSK = 1048576;
export const BDA_SCAN_MOD_OQPSK = 2097152;
export const BDA_SCAN_MOD_8VSB = 4194304;
export const BDA_SCAN_MOD_16VSB = 8388608;
export const BDA_SCAN_MOD_AM_RADIO = 16777216;
export const BDA_SCAN_MOD_FM_RADIO = 33554432;
export const BDA_SCAN_MOD_8PSK = 67108864;
export const BDA_SCAN_MOD_RF = 134217728;
export const ScanModulationTypesMask_MCE_DigitalCable = 11;
export const ScanModulationTypesMask_MCE_TerrestrialATSC = 23;
export const ScanModulationTypesMask_MCE_AnalogTv = 28;
export const ScanModulationTypesMask_MCE_All_TV = `-1`;
export const ScanModulationTypesMask_DVBC = 75;
export const BDA_SCAN_MOD_16APSK = 268435456;
export const BDA_SCAN_MOD_32APSK = 536870912;
export const BDA_SPECTRAL_INVERSION_NOT_SET = `-1`;
export const BDA_SPECTRAL_INVERSION_NOT_DEFINED = 0;
export const BDA_SPECTRAL_INVERSION_AUTOMATIC = 1;
export const BDA_SPECTRAL_INVERSION_NORMAL = 2;
export const BDA_SPECTRAL_INVERSION_INVERTED = 3;
export const BDA_SPECTRAL_INVERSION_MAX = 4;
export const BDA_POLARISATION_NOT_SET = `-1`;
export const BDA_POLARISATION_NOT_DEFINED = 0;
export const BDA_POLARISATION_LINEAR_H = 1;
export const BDA_POLARISATION_LINEAR_V = 2;
export const BDA_POLARISATION_CIRCULAR_L = 3;
export const BDA_POLARISATION_CIRCULAR_R = 4;
export const BDA_POLARISATION_MAX = 5;
export const BDA_LNB_SOURCE_NOT_SET = `-1`;
export const BDA_LNB_SOURCE_NOT_DEFINED = 0;
export const BDA_LNB_SOURCE_A = 1;
export const BDA_LNB_SOURCE_B = 2;
export const BDA_LNB_SOURCE_C = 3;
export const BDA_LNB_SOURCE_D = 4;
export const BDA_LNB_SOURCE_MAX = 5;
export const BDA_GUARD_NOT_SET = `-1`;
export const BDA_GUARD_NOT_DEFINED = 0;
export const BDA_GUARD_1_32 = 1;
export const BDA_GUARD_1_16 = 2;
export const BDA_GUARD_1_8 = 3;
export const BDA_GUARD_1_4 = 4;
export const BDA_GUARD_1_128 = 5;
export const BDA_GUARD_19_128 = 6;
export const BDA_GUARD_19_256 = 7;
export const BDA_GUARD_MAX = 8;
export const BDA_HALPHA_NOT_SET = `-1`;
export const BDA_HALPHA_NOT_DEFINED = 0;
export const BDA_HALPHA_1 = 1;
export const BDA_HALPHA_2 = 2;
export const BDA_HALPHA_4 = 3;
export const BDA_HALPHA_MAX = 4;
export const BDA_XMIT_MODE_NOT_SET = `-1`;
export const BDA_XMIT_MODE_NOT_DEFINED = 0;
export const BDA_XMIT_MODE_2K = 1;
export const BDA_XMIT_MODE_8K = 2;
export const BDA_XMIT_MODE_4K = 3;
export const BDA_XMIT_MODE_2K_INTERLEAVED = 4;
export const BDA_XMIT_MODE_4K_INTERLEAVED = 5;
export const BDA_XMIT_MODE_1K = 6;
export const BDA_XMIT_MODE_16K = 7;
export const BDA_XMIT_MODE_32K = 8;
export const BDA_XMIT_MODE_MAX = 9;
export const BDA_ROLL_OFF_NOT_SET = `-1`;
export const BDA_ROLL_OFF_NOT_DEFINED = 0;
export const BDA_ROLL_OFF_20 = 1;
export const BDA_ROLL_OFF_25 = 2;
export const BDA_ROLL_OFF_35 = 3;
export const BDA_ROLL_OFF_MAX = 4;
export const BDA_PILOT_NOT_SET = `-1`;
export const BDA_PILOT_NOT_DEFINED = 0;
export const BDA_PILOT_OFF = 1;
export const BDA_PILOT_ON = 2;
export const BDA_PILOT_MAX = 3;
export const BDA_FREQUENCY_NOT_SET = `-1`;
export const BDA_FREQUENCY_NOT_DEFINED = 0;
export const BDA_RANGE_NOT_SET = `-1`;
export const BDA_RANGE_NOT_DEFINED = 0;
export const BDA_CHAN_BANDWITH_NOT_SET = `-1`;
export const BDA_CHAN_BANDWITH_NOT_DEFINED = 0;
export const BDA_FREQUENCY_MULTIPLIER_NOT_SET = `-1`;
export const BDA_FREQUENCY_MULTIPLIER_NOT_DEFINED = 0;
export const BDACOMP_NOT_DEFINED = 0;
export const BDACOMP_EXCLUDE_TS_FROM_TR = 1;
export const BDACOMP_INCLUDE_LOCATOR_IN_TR = 2;
export const BDACOMP_INCLUDE_COMPONENTS_IN_TR = 4;
export const SCTE28_ConditionalAccess = 0;
export const SCTE28_POD_Host_Binding_Information = 1;
export const SCTE28_IPService = 2;
export const SCTE28_NetworkInterface_SCTE55_2 = 3;
export const SCTE28_NetworkInterface_SCTE55_1 = 4;
export const SCTE28_CopyProtection = 5;
export const SCTE28_Diagnostic = 6;
export const SCTE28_Undesignated = 7;
export const SCTE28_Reserved = 8;
export const CONDITIONALACCESS_ACCESS_UNSPECIFIED = 0;
export const CONDITIONALACCESS_ACCESS_NOT_POSSIBLE = 1;
export const CONDITIONALACCESS_ACCESS_POSSIBLE = 2;
export const CONDITIONALACCESS_ACCESS_POSSIBLE_NO_STREAMING_DISRUPTION = 3;
export const CONDITIONALACCESS_UNSPECIFIED = 0;
export const CONDITIONALACCESS_CLOSED_ITSELF = 1;
export const CONDITIONALACCESS_TUNER_REQUESTED_CLOSE = 2;
export const CONDITIONALACCESS_DIALOG_TIMEOUT = 3;
export const CONDITIONALACCESS_DIALOG_FOCUS_CHANGE = 4;
export const CONDITIONALACCESS_DIALOG_USER_DISMISSED = 5;
export const CONDITIONALACCESS_DIALOG_USER_NOT_AVAILABLE = 6;
export const CONDITIONALACCESS_SUCCESSFULL = 0;
export const CONDITIONALACCESS_ENDED_NOCHANGE = 1;
export const CONDITIONALACCESS_ABORTED = 2;
export const BDA_DISCOVERY_UNSPECIFIED = 0;
export const BDA_DISCOVERY_REQUIRED = 1;
export const BDA_DISCOVERY_COMPLETE = 2;
export const CardInserted = 0;
export const CardRemoved = 1;
export const CardError = 2;
export const CardDataChanged = 3;
export const CardFirmwareUpgrade = 4;
export const NotAssociated = 0;
export const Associated = 1;
export const AssociationUnknown = 2;
export const SCTE_18 = 0;
export const Entitled = 0;
export const NotEntitled = 1;
export const TechnicalFailure = 2;
export const NotReady = 0;
export const UserClosed = 1;
export const SystemClosed = 2;
export const DeviceClosed = 3;
export const ErrorClosed = 4;
export const BDA_DrmPairing_Succeeded = 0;
export const BDA_DrmPairing_HardwareFailure = 1;
export const BDA_DrmPairing_NeedRevocationData = 2;
export const BDA_DrmPairing_NeedIndiv = 3;
export const BDA_DrmPairing_Other = 4;
export const BDA_DrmPairing_DrmInitFailed = 5;
export const BDA_DrmPairing_DrmNotPaired = 6;
export const BDA_DrmPairing_DrmRePairSoon = 7;
export const BDA_DrmPairing_Aborted = 8;
export const BDA_DrmPairing_NeedSDKUpdate = 9;
export const KSPROPERTY_IPSINK_MULTICASTLIST = 0;
export const KSPROPERTY_IPSINK_ADAPTER_DESCRIPTION = 1;
export const KSPROPERTY_IPSINK_ADAPTER_ADDRESS = 2;
export const AM_EXSEEK_CANSEEK = 1;
export const AM_EXSEEK_CANSCAN = 2;
export const AM_EXSEEK_MARKERSEEK = 4;
export const AM_EXSEEK_SCANWITHOUTCLOCK = 8;
export const AM_EXSEEK_NOSTANDARDREPAINT = 16;
export const AM_EXSEEK_BUFFERING = 32;
export const AM_EXSEEK_SENDS_VIDEOFRAMEREADY = 64;
export const AM_L21_CCLEVEL_TC2 = 0;
export const AM_L21_CCSERVICE_None = 0;
export const AM_L21_CCSERVICE_Caption1 = 1;
export const AM_L21_CCSERVICE_Caption2 = 2;
export const AM_L21_CCSERVICE_Text1 = 3;
export const AM_L21_CCSERVICE_Text2 = 4;
export const AM_L21_CCSERVICE_XDS = 5;
export const AM_L21_CCSERVICE_DefChannel = 10;
export const AM_L21_CCSERVICE_Invalid = 11;
export const AM_L21_CCSTATE_Off = 0;
export const AM_L21_CCSTATE_On = 1;
export const AM_L21_CCSTYLE_None = 0;
export const AM_L21_CCSTYLE_PopOn = 1;
export const AM_L21_CCSTYLE_PaintOn = 2;
export const AM_L21_CCSTYLE_RollUp = 3;
export const AM_L21_DRAWBGMODE_Opaque = 0;
export const AM_L21_DRAWBGMODE_Transparent = 1;
export const AM_WST_LEVEL_1_5 = 0;
export const AM_WST_SERVICE_None = 0;
export const AM_WST_SERVICE_Text = 1;
export const AM_WST_SERVICE_IDS = 2;
export const AM_WST_SERVICE_Invalid = 3;
export const AM_WST_STATE_Off = 0;
export const AM_WST_STATE_On = 1;
export const AM_WST_STYLE_None = 0;
export const AM_WST_STYLE_Invers = 1;
export const AM_WST_DRAWBGMODE_Opaque = 0;
export const AM_WST_DRAWBGMODE_Transparent = 1;
export const STREAMTYPE_READ = 0;
export const STREAMTYPE_WRITE = 1;
export const STREAMTYPE_TRANSFORM = 2;
export const STREAMSTATE_STOP = 0;
export const STREAMSTATE_RUN = 1;
export const COMPSTAT_NOUPDATEOK = 1;
export const COMPSTAT_WAIT = 2;
export const COMPSTAT_ABORT = 4;
export const MMSSF_HASCLOCK = 1;
export const MMSSF_SUPPORTSEEK = 2;
export const MMSSF_ASYNCHRONOUS = 4;
export const SSUPDATE_ASYNC = 1;
export const SSUPDATE_CONTINUOUS = 2;
export const DDSFF_PROGRESSIVERENDER = 1;
export const AMMSF_NOGRAPHTHREAD = 1;
export const AMMSF_ADDDEFAULTRENDERER = 1;
export const AMMSF_CREATEPEER = 2;
export const AMMSF_STOPIFNOSAMPLES = 4;
export const AMMSF_NOSTALL = 8;
export const AMMSF_RENDERTYPEMASK = 3;
export const AMMSF_RENDERTOEXISTING = 0;
export const AMMSF_RENDERALLSTREAMS = 1;
export const AMMSF_NORENDER = 2;
export const AMMSF_NOCLOCK = 4;
export const AMMSF_RUN = 8;
export const Disabled = 0;
export const ReadData = 1;
export const RenderData = 2;
export const BI_RGB = 0;
export const BI_RLE8 = 1;
export const BI_RLE4 = 2;
export const BI_BITFIELDS = 3;
export const BI_JPEG = 4;
export const BI_PNG = 5;
export const AM_PROPERTY_FRAMESTEP_STEP = 1;
export const AM_PROPERTY_FRAMESTEP_CANCEL = 2;
export const AM_PROPERTY_FRAMESTEP_CANSTEP = 3;
export const AM_PROPERTY_FRAMESTEP_CANSTEPMULTIPLE = 4;
export const AM_ARMODE_STRETCHED = 0;
export const AM_ARMODE_LETTER_BOX = 1;
export const AM_ARMODE_CROP = 2;
export const AM_ARMODE_STRETCHED_AS_PRIMARY = 3;
export const VMR9Sample_SyncPoint = 1;
export const VMR9Sample_Preroll = 2;
export const VMR9Sample_Discontinuity = 4;
export const VMR9Sample_TimeValid = 8;
export const VMR9Sample_SrcDstRectsValid = 16;
export const VMR9AllocFlag_3DRenderTarget = 1;
export const VMR9AllocFlag_DXVATarget = 2;
export const VMR9AllocFlag_TextureSurface = 4;
export const VMR9AllocFlag_OffscreenSurface = 8;
export const VMR9AllocFlag_RGBDynamicSwitch = 16;
export const VMR9AllocFlag_UsageReserved = 224;
export const VMR9AllocFlag_UsageMask = 255;
export const D3DFMT_UNKNOWN = 0;
export const D3DFMT_R8G8B8 = 20;
export const D3DFMT_A8R8G8B8 = 21;
export const D3DFMT_X8R8G8B8 = 22;
export const D3DFMT_R5G6B5 = 23;
export const D3DFMT_X1R5G5B5 = 24;
export const D3DFMT_A1R5G5B5 = 25;
export const D3DFMT_A4R4G4B4 = 26;
export const D3DFMT_R3G3B2 = 27;
export const D3DFMT_A8 = 28;
export const D3DFMT_A8R3G3B2 = 29;
export const D3DFMT_X4R4G4B4 = 30;
export const D3DFMT_A2B10G10R10 = 31;
export const D3DFMT_A8B8G8R8 = 32;
export const D3DFMT_X8B8G8R8 = 33;
export const D3DFMT_G16R16 = 34;
export const D3DFMT_A2R10G10B10 = 35;
export const D3DFMT_A16B16G16R16 = 36;
export const D3DFMT_A8P8 = 40;
export const D3DFMT_P8 = 41;
export const D3DFMT_L8 = 50;
export const D3DFMT_A8L8 = 51;
export const D3DFMT_A4L4 = 52;
export const D3DFMT_V8U8 = 60;
export const D3DFMT_L6V5U5 = 61;
export const D3DFMT_X8L8V8U8 = 62;
export const D3DFMT_Q8W8V8U8 = 63;
export const D3DFMT_V16U16 = 64;
export const D3DFMT_A2W10V10U10 = 67;
export const D3DFMT_UYVY = 1498831189;
export const D3DFMT_R8G8_B8G8 = 1195525970;
export const D3DFMT_YUY2 = 844715353;
export const D3DFMT_G8R8_G8B8 = 1111970375;
export const D3DFMT_DXT1 = 827611204;
export const D3DFMT_DXT2 = 844388420;
export const D3DFMT_DXT3 = 861165636;
export const D3DFMT_DXT4 = 877942852;
export const D3DFMT_DXT5 = 894720068;
export const D3DFMT_D16_LOCKABLE = 70;
export const D3DFMT_D32 = 71;
export const D3DFMT_D15S1 = 73;
export const D3DFMT_D24S8 = 75;
export const D3DFMT_D24X8 = 77;
export const D3DFMT_D24X4S4 = 79;
export const D3DFMT_D16 = 80;
export const D3DFMT_D32F_LOCKABLE = 82;
export const D3DFMT_D24FS8 = 83;
export const D3DFMT_D32_LOCKABLE = 84;
export const D3DFMT_S8_LOCKABLE = 85;
export const D3DFMT_L16 = 81;
export const D3DFMT_VERTEXDATA = 100;
export const D3DFMT_INDEX16 = 101;
export const D3DFMT_INDEX32 = 102;
export const D3DFMT_Q16W16V16U16 = 110;
export const D3DFMT_MULTI2_ARGB8 = 827606349;
export const D3DFMT_R16F = 111;
export const D3DFMT_G16R16F = 112;
export const D3DFMT_A16B16G16R16F = 113;
export const D3DFMT_R32F = 114;
export const D3DFMT_G32R32F = 115;
export const D3DFMT_A32B32G32R32F = 116;
export const D3DFMT_CxV8U8 = 117;
export const D3DFMT_A1 = 118;
export const D3DFMT_A2B10G10R10_XR_BIAS = 119;
export const D3DFMT_BINARYBUFFER = 199;
export const D3DFMT_FORCE_DWORD = 2147483647;
export const D3DPOOL_DEFAULT = 0;
export const D3DPOOL_MANAGED = 1;
export const D3DPOOL_SYSTEMMEM = 2;
export const D3DPOOL_SCRATCH = 3;
export const D3DPOOL_FORCE_DWORD = 2147483647;
export const VMR9ARMode_None = 0;
export const VMR9ARMode_LetterBox = 1;
export const MixerPref9_NoDecimation = 1;
export const MixerPref9_DecimateOutput = 2;
export const MixerPref9_ARAdjustXorY = 4;
export const MixerPref9_NonSquareMixing = 8;
export const MixerPref9_DecimateMask = 15;
export const MixerPref9_BiLinearFiltering = 16;
export const MixerPref9_PointFiltering = 32;
export const MixerPref9_AnisotropicFiltering = 64;
export const MixerPref9_PyramidalQuadFiltering = 128;
export const MixerPref9_GaussianQuadFiltering = 256;
export const MixerPref9_FilteringReserved = 3584;
export const MixerPref9_FilteringMask = 4080;
export const MixerPref9_RenderTargetRGB = 4096;
export const MixerPref9_RenderTargetYUV = 8192;
export const MixerPref9_RenderTargetReserved = 1032192;
export const MixerPref9_RenderTargetMask = 1044480;
export const MixerPref9_DynamicSwitchToBOB = 1048576;
export const MixerPref9_DynamicDecimateBy2 = 2097152;
export const MixerPref9_DynamicReserved = 12582912;
export const MixerPref9_DynamicMask = 15728640;
export const ProcAmpControl9_Brightness = 1;
export const ProcAmpControl9_Contrast = 2;
export const ProcAmpControl9_Hue = 4;
export const ProcAmpControl9_Saturation = 8;
export const ProcAmpControl9_Mask = 15;
export const VMR9AlphaBitmap_Disable = 1;
export const VMR9AlphaBitmap_hDC = 2;
export const VMR9AlphaBitmap_EntireDDS = 4;
export const VMR9AlphaBitmap_SrcColorKey = 8;
export const VMR9AlphaBitmap_SrcRect = 16;
export const VMR9AlphaBitmap_FilterMode = 32;
export const RenderPrefs9_DoNotRenderBorder = 1;
export const RenderPrefs9_Mask = 1;
export const VMR9Mode_Windowed = 1;
export const VMR9Mode_Windowless = 2;
export const VMR9Mode_Renderless = 4;
export const VMR9Mode_Mask = 7;
export const DeinterlacePref9_NextBest = 1;
export const DeinterlacePref9_BOB = 2;
export const DeinterlacePref9_Weave = 4;
export const DeinterlacePref9_Mask = 7;
export const DeinterlaceTech9_Unknown = 0;
export const DeinterlaceTech9_BOBLineReplicate = 1;
export const DeinterlaceTech9_BOBVerticalStretch = 2;
export const DeinterlaceTech9_MedianFiltering = 4;
export const DeinterlaceTech9_EdgeFiltering = 16;
export const DeinterlaceTech9_FieldAdaptive = 32;
export const DeinterlaceTech9_PixelAdaptive = 64;
export const DeinterlaceTech9_MotionVectorSteered = 128;
export const VMR9_SampleReserved = 1;
export const VMR9_SampleProgressiveFrame = 2;
export const VMR9_SampleFieldInterleavedEvenFirst = 3;
export const VMR9_SampleFieldInterleavedOddFirst = 4;
export const VMR9_SampleFieldSingleEven = 5;
export const VMR9_SampleFieldSingleOdd = 6;
export const AM_PROPERTY_AC3_ERROR_CONCEALMENT = 1;
export const AM_PROPERTY_AC3_ALTERNATE_AUDIO = 2;
export const AM_PROPERTY_AC3_DOWNMIX = 3;
export const AM_PROPERTY_AC3_BIT_STREAM_MODE = 4;
export const AM_PROPERTY_AC3_DIALOGUE_LEVEL = 5;
export const AM_PROPERTY_AC3_LANGUAGE_CODE = 6;
export const AM_PROPERTY_AC3_ROOM_TYPE = 7;
export const AM_PROPERTY_DVDSUBPIC_PALETTE = 0;
export const AM_PROPERTY_DVDSUBPIC_HLI = 1;
export const AM_PROPERTY_DVDSUBPIC_COMPOSIT_ON = 2;
export const AM_PROPERTY_DVDCOPY_CHLG_KEY = 1;
export const AM_PROPERTY_DVDCOPY_DVD_KEY1 = 2;
export const AM_PROPERTY_DVDCOPY_DEC_KEY2 = 3;
export const AM_PROPERTY_DVDCOPY_TITLE_KEY = 4;
export const AM_PROPERTY_COPY_MACROVISION = 5;
export const AM_PROPERTY_DVDCOPY_REGION = 6;
export const AM_PROPERTY_DVDCOPY_SET_COPY_STATE = 7;
export const AM_PROPERTY_COPY_ANALOG_COMPONENT = 8;
export const AM_PROPERTY_COPY_DIGITAL_CP = 9;
export const AM_PROPERTY_COPY_DVD_SRM = 10;
export const AM_PROPERTY_DVDCOPY_SUPPORTS_NEW_KEYCOUNT = 11;
export const AM_PROPERTY_DVDCOPY_DISC_KEY = 128;
export const AM_DIGITAL_CP_OFF = 0;
export const AM_DIGITAL_CP_ON = 1;
export const AM_DIGITAL_CP_DVD_COMPLIANT = 2;
export const AM_DVDCOPYSTATE_INITIALIZE = 0;
export const AM_DVDCOPYSTATE_INITIALIZE_TITLE = 1;
export const AM_DVDCOPYSTATE_AUTHENTICATION_NOT_REQUIRED = 2;
export const AM_DVDCOPYSTATE_AUTHENTICATION_REQUIRED = 3;
export const AM_DVDCOPYSTATE_DONE = 4;
export const AM_MACROVISION_DISABLED = 0;
export const AM_MACROVISION_LEVEL1 = 1;
export const AM_MACROVISION_LEVEL2 = 2;
export const AM_MACROVISION_LEVEL3 = 3;
export const AM_MPEG2Level_Low = 1;
export const AM_MPEG2Level_Main = 2;
export const AM_MPEG2Level_High1440 = 3;
export const AM_MPEG2Level_High = 4;
export const AM_MPEG2Profile_Simple = 1;
export const AM_MPEG2Profile_Main = 2;
export const AM_MPEG2Profile_SNRScalable = 3;
export const AM_MPEG2Profile_SpatiallyScalable = 4;
export const AM_MPEG2Profile_High = 5;
export const AM_PROPERTY_DVDKARAOKE_ENABLE = 0;
export const AM_PROPERTY_DVDKARAOKE_DATA = 1;
export const AM_RATE_SimpleRateChange = 1;
export const AM_RATE_ExactRateChange = 2;
export const AM_RATE_MaxFullDataRate = 3;
export const AM_RATE_Step = 4;
export const AM_RATE_UseRateVersion = 5;
export const AM_RATE_QueryFullFrameRate = 6;
export const AM_RATE_QueryLastRateSegPTS = 7;
export const AM_RATE_CorrectTS = 8;
export const AM_RATE_ReverseMaxFullDataRate = 9;
export const AM_RATE_ResetOnTimeDisc = 10;
export const AM_RATE_QueryMapping = 11;
export const AM_RATE_ChangeRate = 1;
export const AM_RATE_FullDataRateMax = 2;
export const AM_RATE_ReverseDecode = 3;
export const AM_RATE_DecoderPosition = 4;
export const AM_RATE_DecoderVersion = 5;
export const DVD_DIR_FORWARD = 0;
export const DVD_DIR_BACKWARD = 1;
export const DVD_ERROR_Unexpected = 1;
export const DVD_ERROR_CopyProtectFail = 2;
export const DVD_ERROR_InvalidDVD1_0Disc = 3;
export const DVD_ERROR_InvalidDiscRegion = 4;
export const DVD_ERROR_LowParentalLevel = 5;
export const DVD_ERROR_MacrovisionFail = 6;
export const DVD_ERROR_IncompatibleSystemAndDecoderRegions = 7;
export const DVD_ERROR_IncompatibleDiscAndDecoderRegions = 8;
export const DVD_ERROR_CopyProtectOutputFail = 9;
export const DVD_ERROR_CopyProtectOutputNotSupported = 10;
export const DVD_WARNING_InvalidDVD1_0Disc = 1;
export const DVD_WARNING_FormatNotSupported = 2;
export const DVD_WARNING_IllegalNavCommand = 3;
export const DVD_WARNING_Open = 4;
export const DVD_WARNING_Seek = 5;
export const DVD_WARNING_Read = 6;
export const DVD_PB_STOPPED_Other = 0;
export const DVD_PB_STOPPED_NoBranch = 1;
export const DVD_PB_STOPPED_NoFirstPlayDomain = 2;
export const DVD_PB_STOPPED_StopCommand = 3;
export const DVD_PB_STOPPED_Reset = 4;
export const DVD_PB_STOPPED_DiscEjected = 5;
export const DVD_PB_STOPPED_IllegalNavCommand = 6;
export const DVD_PB_STOPPED_PlayPeriodAutoStop = 7;
export const DVD_PB_STOPPED_PlayChapterAutoStop = 8;
export const DVD_PB_STOPPED_ParentalFailure = 9;
export const DVD_PB_STOPPED_RegionFailure = 10;
export const DVD_PB_STOPPED_MacrovisionFailure = 11;
export const DVD_PB_STOPPED_DiscReadError = 12;
export const DVD_PB_STOPPED_CopyProtectFailure = 13;
export const DVD_PB_STOPPED_CopyProtectOutputFailure = 14;
export const DVD_PB_STOPPED_CopyProtectOutputNotSupported = 15;
export const SNDDEV_ERROR_Open = 1;
export const SNDDEV_ERROR_Close = 2;
export const SNDDEV_ERROR_GetCaps = 3;
export const SNDDEV_ERROR_PrepareHeader = 4;
export const SNDDEV_ERROR_UnprepareHeader = 5;
export const SNDDEV_ERROR_Reset = 6;
export const SNDDEV_ERROR_Restart = 7;
export const SNDDEV_ERROR_GetPosition = 8;
export const SNDDEV_ERROR_Write = 9;
export const SNDDEV_ERROR_Pause = 10;
export const SNDDEV_ERROR_Stop = 11;
export const SNDDEV_ERROR_Start = 12;
export const SNDDEV_ERROR_AddBuffer = 13;
export const SNDDEV_ERROR_Query = 14;
export const MPT_INT = 0;
export const MPT_FLOAT = 1;
export const MPT_BOOL = 2;
export const MPT_ENUM = 3;
export const MPT_MAX = 4;
export const MP_CURVE_JUMP = 1;
export const MP_CURVE_LINEAR = 2;
export const MP_CURVE_SQUARE = 4;
export const MP_CURVE_INVSQUARE = 8;
export const MP_CURVE_SINE = 16;
export const DXVA2_SampleFlag_Palette_Changed = 1;
export const DXVA2_SampleFlag_SrcRect_Changed = 2;
export const DXVA2_SampleFlag_DstRect_Changed = 4;
export const DXVA2_SampleFlag_ColorData_Changed = 8;
export const DXVA2_SampleFlag_PlanarAlpha_Changed = 16;
export const DXVA2_SampleFlag_RFF = 65536;
export const DXVA2_SampleFlag_TFF = 131072;
export const DXVA2_SampleFlag_RFF_TFF_Present = 262144;
export const DXVA2_SampleFlagsMask = `-65505`;
export const DXVA2_DestinationFlag_Background_Changed = 1;
export const DXVA2_DestinationFlag_TargetRect_Changed = 2;
export const DXVA2_DestinationFlag_ColorData_Changed = 4;
export const DXVA2_DestinationFlag_Alpha_Changed = 8;
export const DXVA2_DestinationFlag_RFF = 65536;
export const DXVA2_DestinationFlag_TFF = 131072;
export const DXVA2_DestinationFlag_RFF_TFF_Present = 262144;
export const DXVA2_DestinationFlagMask = `-65521`;
export const AMPLAYLISTITEM_CANSKIP = 1;
export const AMPLAYLISTITEM_CANBIND = 2;
export const AMPLAYLIST_STARTINSCANMODE = 1;
export const AMPLAYLIST_FORCEBANNER = 2;
export const AMPLAYLISTEVENT_RESUME = 0;
export const AMPLAYLISTEVENT_BREAK = 1;
export const AMPLAYLISTEVENT_NEXT = 2;
export const AMPLAYLISTEVENT_MASK = 15;
export const AMPLAYLISTEVENT_REFRESH = 16;
export const DISPID_TUNER_TS_UNIQUENAME = 1;
export const DISPID_TUNER_TS_FRIENDLYNAME = 2;
export const DISPID_TUNER_TS_CLSID = 3;
export const DISPID_TUNER_TS_NETWORKTYPE = 4;
export const DISPID_TUNER_TS__NETWORKTYPE = 5;
export const DISPID_TUNER_TS_CREATETUNEREQUEST = 6;
export const DISPID_TUNER_TS_ENUMCATEGORYGUIDS = 7;
export const DISPID_TUNER_TS_ENUMDEVICEMONIKERS = 8;
export const DISPID_TUNER_TS_DEFAULTPREFERREDCOMPONENTTYPES = 9;
export const DISPID_TUNER_TS_FREQMAP = 10;
export const DISPID_TUNER_TS_DEFLOCATOR = 11;
export const DISPID_TUNER_TS_CLONE = 12;
export const DISPID_TUNER_TR_TUNINGSPACE = 1;
export const DISPID_TUNER_TR_COMPONENTS = 2;
export const DISPID_TUNER_TR_CLONE = 3;
export const DISPID_TUNER_TR_LOCATOR = 4;
export const DISPID_TUNER_CT_CATEGORY = 1;
export const DISPID_TUNER_CT_MEDIAMAJORTYPE = 2;
export const DISPID_TUNER_CT__MEDIAMAJORTYPE = 3;
export const DISPID_TUNER_CT_MEDIASUBTYPE = 4;
export const DISPID_TUNER_CT__MEDIASUBTYPE = 5;
export const DISPID_TUNER_CT_MEDIAFORMATTYPE = 6;
export const DISPID_TUNER_CT__MEDIAFORMATTYPE = 7;
export const DISPID_TUNER_CT_MEDIATYPE = 8;
export const DISPID_TUNER_CT_CLONE = 9;
export const DISPID_TUNER_LCT_LANGID = 100;
export const DISPID_TUNER_MP2CT_TYPE = 200;
export const DISPID_TUNER_ATSCCT_FLAGS = 300;
export const DISPID_TUNER_L_CARRFREQ = 1;
export const DISPID_TUNER_L_INNERFECMETHOD = 2;
export const DISPID_TUNER_L_INNERFECRATE = 3;
export const DISPID_TUNER_L_OUTERFECMETHOD = 4;
export const DISPID_TUNER_L_OUTERFECRATE = 5;
export const DISPID_TUNER_L_MOD = 6;
export const DISPID_TUNER_L_SYMRATE = 7;
export const DISPID_TUNER_L_CLONE = 8;
export const DISPID_TUNER_L_ATSC_PHYS_CHANNEL = 201;
export const DISPID_TUNER_L_ATSC_TSID = 202;
export const DISPID_TUNER_L_ATSC_MP2_PROGNO = 203;
export const DISPID_TUNER_L_DVBT_BANDWIDTH = 301;
export const DISPID_TUNER_L_DVBT_LPINNERFECMETHOD = 302;
export const DISPID_TUNER_L_DVBT_LPINNERFECRATE = 303;
export const DISPID_TUNER_L_DVBT_GUARDINTERVAL = 304;
export const DISPID_TUNER_L_DVBT_HALPHA = 305;
export const DISPID_TUNER_L_DVBT_TRANSMISSIONMODE = 306;
export const DISPID_TUNER_L_DVBT_INUSE = 307;
export const DISPID_TUNER_L_DVBT2_PHYSICALLAYERPIPEID = 351;
export const DISPID_TUNER_L_DVBS_POLARISATION = 401;
export const DISPID_TUNER_L_DVBS_WEST = 402;
export const DISPID_TUNER_L_DVBS_ORBITAL = 403;
export const DISPID_TUNER_L_DVBS_AZIMUTH = 404;
export const DISPID_TUNER_L_DVBS_ELEVATION = 405;
export const DISPID_TUNER_L_DVBS2_DISEQ_LNB_SOURCE = 406;
export const DISPID_TUNER_TS_DVBS2_LOW_OSC_FREQ_OVERRIDE = 407;
export const DISPID_TUNER_TS_DVBS2_HI_OSC_FREQ_OVERRIDE = 408;
export const DISPID_TUNER_TS_DVBS2_LNB_SWITCH_FREQ_OVERRIDE = 409;
export const DISPID_TUNER_TS_DVBS2_SPECTRAL_INVERSION_OVERRIDE = 410;
export const DISPID_TUNER_L_DVBS2_ROLLOFF = 411;
export const DISPID_TUNER_L_DVBS2_PILOT = 412;
export const DISPID_TUNER_L_ANALOG_STANDARD = 601;
export const DISPID_TUNER_L_DTV_O_MAJOR_CHANNEL = 701;
export const DISPID_TUNER_C_TYPE = 1;
export const DISPID_TUNER_C_STATUS = 2;
export const DISPID_TUNER_C_LANGID = 3;
export const DISPID_TUNER_C_DESCRIPTION = 4;
export const DISPID_TUNER_C_CLONE = 5;
export const DISPID_TUNER_C_MP2_PID = 101;
export const DISPID_TUNER_C_MP2_PCRPID = 102;
export const DISPID_TUNER_C_MP2_PROGNO = 103;
export const DISPID_TUNER_C_ANALOG_AUDIO = 201;
export const DISPID_TUNER_TS_DVB_SYSTEMTYPE = 101;
export const DISPID_TUNER_TS_DVB2_NETWORK_ID = 102;
export const DISPID_TUNER_TS_DVBS_LOW_OSC_FREQ = 1001;
export const DISPID_TUNER_TS_DVBS_HI_OSC_FREQ = 1002;
export const DISPID_TUNER_TS_DVBS_LNB_SWITCH_FREQ = 1003;
export const DISPID_TUNER_TS_DVBS_INPUT_RANGE = 1004;
export const DISPID_TUNER_TS_DVBS_SPECTRAL_INVERSION = 1005;
export const DISPID_TUNER_TS_AR_MINFREQUENCY = 101;
export const DISPID_TUNER_TS_AR_MAXFREQUENCY = 102;
export const DISPID_TUNER_TS_AR_STEP = 103;
export const DISPID_TUNER_TS_AR_COUNTRYCODE = 104;
export const DISPID_TUNER_TS_AUX_COUNTRYCODE = 101;
export const DISPID_TUNER_TS_ATV_MINCHANNEL = 101;
export const DISPID_TUNER_TS_ATV_MAXCHANNEL = 102;
export const DISPID_TUNER_TS_ATV_INPUTTYPE = 103;
export const DISPID_TUNER_TS_ATV_COUNTRYCODE = 104;
export const DISPID_TUNER_TS_ATSC_MINMINORCHANNEL = 201;
export const DISPID_TUNER_TS_ATSC_MAXMINORCHANNEL = 202;
export const DISPID_TUNER_TS_ATSC_MINPHYSCHANNEL = 203;
export const DISPID_TUNER_TS_ATSC_MAXPHYSCHANNEL = 204;
export const DISPID_TUNER_TS_DC_MINMAJORCHANNEL = 301;
export const DISPID_TUNER_TS_DC_MAXMAJORCHANNEL = 302;
export const DISPID_TUNER_TS_DC_MINSOURCEID = 303;
export const DISPID_TUNER_TS_DC_MAXSOURCEID = 304;
export const DISPID_CHTUNER_ATVAC_CHANNEL = 101;
export const DISPID_CHTUNER_ATVDC_SYSTEM = 101;
export const DISPID_CHTUNER_ATVDC_CONTENT = 102;
export const DISPID_CHTUNER_CIDTR_CHANNELID = 101;
export const DISPID_CHTUNER_CTR_CHANNEL = 101;
export const DISPID_CHTUNER_ACTR_MINOR_CHANNEL = 201;
export const DISPID_CHTUNER_DCTR_MAJOR_CHANNEL = 301;
export const DISPID_CHTUNER_DCTR_SRCID = 302;
export const DISPID_DVBTUNER_DVBC_ATTRIBUTESVALID = 101;
export const DISPID_DVBTUNER_DVBC_PID = 102;
export const DISPID_DVBTUNER_DVBC_TAG = 103;
export const DISPID_DVBTUNER_DVBC_COMPONENTTYPE = 104;
export const DISPID_DVBTUNER_ONID = 101;
export const DISPID_DVBTUNER_TSID = 102;
export const DISPID_DVBTUNER_SID = 103;
export const DISPID_MP2TUNER_TSID = 101;
export const DISPID_MP2TUNER_PROGNO = 102;
export const DISPID_MP2TUNERFACTORY_CREATETUNEREQUEST = 1;
export const MPAA = 0;
export const US_TV = 1;
export const Canadian_English = 2;
export const Canadian_French = 3;
export const Reserved4 = 4;
export const System5 = 5;
export const System6 = 6;
export const Reserved7 = 7;
export const PBDA = 8;
export const AgeBased = 9;
export const TvRat_kSystems = 10;
export const TvRat_SystemDontKnow = 255;
export const TvRat_0 = 0;
export const TvRat_1 = 1;
export const TvRat_2 = 2;
export const TvRat_3 = 3;
export const TvRat_4 = 4;
export const TvRat_5 = 5;
export const TvRat_6 = 6;
export const TvRat_7 = 7;
export const TvRat_8 = 8;
export const TvRat_9 = 9;
export const TvRat_10 = 10;
export const TvRat_11 = 11;
export const TvRat_12 = 12;
export const TvRat_13 = 13;
export const TvRat_14 = 14;
export const TvRat_15 = 15;
export const TvRat_16 = 16;
export const TvRat_17 = 17;
export const TvRat_18 = 18;
export const TvRat_19 = 19;
export const TvRat_20 = 20;
export const TvRat_21 = 21;
export const TvRat_kLevels = 22;
export const TvRat_Unblock = `-1`;
export const TvRat_LevelDontKnow = 255;
export const MPAA_NotApplicable = 0;
export const MPAA_G = 1;
export const MPAA_PG = 2;
export const MPAA_PG13 = 3;
export const MPAA_R = 4;
export const MPAA_NC17 = 5;
export const MPAA_X = 6;
export const MPAA_NotRated = 7;
export const US_TV_None = 0;
export const US_TV_Y = 1;
export const US_TV_Y7 = 2;
export const US_TV_G = 3;
export const US_TV_PG = 4;
export const US_TV_14 = 5;
export const US_TV_MA = 6;
export const US_TV_None7 = 7;
export const CAE_TV_Exempt = 0;
export const CAE_TV_C = 1;
export const CAE_TV_C8 = 2;
export const CAE_TV_G = 3;
export const CAE_TV_PG = 4;
export const CAE_TV_14 = 5;
export const CAE_TV_18 = 6;
export const CAE_TV_Reserved = 7;
export const CAF_TV_Exempt = 0;
export const CAF_TV_G = 1;
export const CAF_TV_8 = 2;
export const CAF_TV_13 = 3;
export const CAF_TV_16 = 4;
export const CAF_TV_18 = 5;
export const CAF_TV_Reserved6 = 6;
export const CAF_TV_Reserved = 7;
export const BfAttrNone = 0;
export const BfIsBlocked = 1;
export const BfIsAttr_1 = 2;
export const BfIsAttr_2 = 4;
export const BfIsAttr_3 = 8;
export const BfIsAttr_4 = 16;
export const BfIsAttr_5 = 32;
export const BfIsAttr_6 = 64;
export const BfIsAttr_7 = 128;
export const BfValidAttrSubmask = 255;
export const US_TV_IsBlocked = 1;
export const US_TV_IsViolent = 2;
export const US_TV_IsSexualSituation = 4;
export const US_TV_IsAdultLanguage = 8;
export const US_TV_IsSexuallySuggestiveDialog = 16;
export const US_TV_ValidAttrSubmask = 31;
export const MPAA_IsBlocked = 1;
export const MPAA_ValidAttrSubmask = 1;
export const CAE_IsBlocked = 1;
export const CAE_ValidAttrSubmask = 1;
export const CAF_IsBlocked = 1;
export const CAF_ValidAttrSubmask = 1;
export const FORMATNOTSUPPORTED_CLEAR = 0;
export const FORMATNOTSUPPORTED_NOTSUPPORTED = 1;
export const PROT_COPY_FREE = 1;
export const PROT_COPY_ONCE = 2;
export const PROT_COPY_NEVER = 3;
export const PROT_COPY_NEVER_REALLY = 4;
export const PROT_COPY_NO_MORE = 5;
export const PROT_COPY_FREE_CIT = 6;
export const PROT_COPY_BF = 7;
export const PROT_COPY_CN_RECORDING_STOP = 8;
export const PROT_COPY_FREE_SECURE = 9;
export const PROT_COPY_INVALID = 50;
export const ENCDEC_CPEVENT = 0;
export const ENCDEC_RECORDING_STATUS = 1;
export const RECORDING_STOPPED = 0;
export const RECORDING_STARTED = 1;
export const CPEVENT_BITSHIFT_RATINGS = 0;
export const CPEVENT_BITSHIFT_COPP = 1;
export const CPEVENT_BITSHIFT_LICENSE = 2;
export const CPEVENT_BITSHIFT_ROLLBACK = 3;
export const CPEVENT_BITSHIFT_SAC = 4;
export const CPEVENT_BITSHIFT_DOWNRES = 5;
export const CPEVENT_BITSHIFT_STUBLIB = 6;
export const CPEVENT_BITSHIFT_UNTRUSTEDGRAPH = 7;
export const CPEVENT_BITSHIFT_PENDING_CERTIFICATE = 8;
export const CPEVENT_BITSHIFT_NO_PLAYREADY = 9;
export const CPEVENT_NONE = 0;
export const CPEVENT_RATINGS = 1;
export const CPEVENT_COPP = 2;
export const CPEVENT_LICENSE = 3;
export const CPEVENT_ROLLBACK = 4;
export const CPEVENT_SAC = 5;
export const CPEVENT_DOWNRES = 6;
export const CPEVENT_STUBLIB = 7;
export const CPEVENT_UNTRUSTEDGRAPH = 8;
export const CPEVENT_PROTECTWINDOWED = 9;
export const REVOKED_COPP = 0;
export const REVOKED_SAC = 1;
export const REVOKED_APP_STUB = 2;
export const REVOKED_SECURE_PIPELINE = 3;
export const REVOKED_MAX_TYPES = 4;
export const EnTag_Remove = 0;
export const EnTag_Once = 1;
export const EnTag_Repeat = 2;
export const COPP_Unknown = `-1`;
export const COPP_BadDriver = 0;
export const COPP_NoCardHDCPSupport = 1;
export const COPP_NoMonitorHDCPSupport = 2;
export const COPP_BadCertificate = 3;
export const COPP_InvalidBusProtection = 4;
export const COPP_AeroGlassOff = 5;
export const COPP_RogueApp = 6;
export const COPP_ForbiddenVideo = 7;
export const COPP_Activate = 8;
export const COPP_DigitalAudioUnprotected = 9;
export const LIC_BadLicense = 0;
export const LIC_NeedIndiv = 1;
export const LIC_Expired = 2;
export const LIC_NeedActivation = 3;
export const LIC_ExtenderBlocked = 4;
export const DOWNRES_Always = 0;
export const DOWNRES_InWindowOnly = 1;
export const DOWNRES_Undefined = 2;
export const dispidName = 0;
export const dispidStatus = 1;
export const dispidDevImageSourceWidth = 2;
export const dispidDevImageSourceHeight = 3;
export const dispidDevCountryCode = 4;
export const dispidDevOverScan = 5;
export const dispidSegment = 6;
export const dispidDevVolume = 7;
export const dispidDevBalance = 8;
export const dispidDevPower = 9;
export const dispidTuneChan = 10;
export const dispidDevVideoSubchannel = 11;
export const dispidDevAudioSubchannel = 12;
export const dispidChannelAvailable = 13;
export const dispidDevVideoFrequency = 14;
export const dispidDevAudioFrequency = 15;
export const dispidCount = 16;
export const dispidDevFileName = 17;
export const dispidVisible = 18;
export const dispidOwner = 19;
export const dispidMessageDrain = 20;
export const dispidViewable = 21;
export const dispidDevView = 22;
export const dispidKSCat = 23;
export const dispidCLSID = 24;
export const dispid_KSCat = 25;
export const dispid_CLSID = 26;
export const dispidTune = 27;
export const dispidTS = 28;
export const dispidDevSAP = 29;
export const dispidClip = 30;
export const dispidRequestedClipRect = 31;
export const dispidClippedSourceRect = 32;
export const dispidAvailableSourceRect = 33;
export const dispidMediaPosition = 34;
export const dispidDevRun = 35;
export const dispidDevPause = 36;
export const dispidDevStop = 37;
export const dispidCCEnable = 38;
export const dispidDevStep = 39;
export const dispidDevCanStep = 40;
export const dispidSourceSize = 41;
export const dispid_playtitle = 42;
export const dispid_playchapterintitle = 43;
export const dispid_playchapter = 44;
export const dispid_playchaptersautostop = 45;
export const dispid_playattime = 46;
export const dispid_playattimeintitle = 47;
export const dispid_playperiodintitleautostop = 48;
export const dispid_replaychapter = 49;
export const dispid_playprevchapter = 50;
export const dispid_playnextchapter = 51;
export const dispid_playforwards = 52;
export const dispid_playbackwards = 53;
export const dispid_stilloff = 54;
export const dispid_audiolanguage = 55;
export const dispid_showmenu = 56;
export const dispid_resume = 57;
export const dispid_returnfromsubmenu = 58;
export const dispid_buttonsavailable = 59;
export const dispid_currentbutton = 60;
export const dispid_SelectAndActivateButton = 61;
export const dispid_ActivateButton = 62;
export const dispid_SelectRightButton = 63;
export const dispid_SelectLeftButton = 64;
export const dispid_SelectLowerButton = 65;
export const dispid_SelectUpperButton = 66;
export const dispid_ActivateAtPosition = 67;
export const dispid_SelectAtPosition = 68;
export const dispid_ButtonAtPosition = 69;
export const dispid_NumberOfChapters = 70;
export const dispid_TotalTitleTime = 71;
export const dispid_TitlesAvailable = 72;
export const dispid_VolumesAvailable = 73;
export const dispid_CurrentVolume = 74;
export const dispid_CurrentDiscSide = 75;
export const dispid_CurrentDomain = 76;
export const dispid_CurrentChapter = 77;
export const dispid_CurrentTitle = 78;
export const dispid_CurrentTime = 79;
export const dispid_FramesPerSecond = 80;
export const dispid_DVDTimeCode2bstr = 81;
export const dispid_DVDDirectory = 82;
export const dispid_IsSubpictureStreamEnabled = 83;
export const dispid_IsAudioStreamEnabled = 84;
export const dispid_CurrentSubpictureStream = 85;
export const dispid_SubpictureLanguage = 86;
export const dispid_CurrentAudioStream = 87;
export const dispid_AudioStreamsAvailable = 88;
export const dispid_AnglesAvailable = 89;
export const dispid_CurrentAngle = 90;
export const dispid_CCActive = 91;
export const dispid_CurrentCCService = 92;
export const dispid_SubpictureStreamsAvailable = 93;
export const dispid_SubpictureOn = 94;
export const dispid_DVDUniqueID = 95;
export const dispid_EnableResetOnStop = 96;
export const dispid_AcceptParentalLevelChange = 97;
export const dispid_NotifyParentalLevelChange = 98;
export const dispid_SelectParentalCountry = 99;
export const dispid_SelectParentalLevel = 100;
export const dispid_TitleParentalLevels = 101;
export const dispid_PlayerParentalCountry = 102;
export const dispid_PlayerParentalLevel = 103;
export const dispid_Eject = 104;
export const dispid_UOPValid = 105;
export const dispid_SPRM = 106;
export const dispid_GPRM = 107;
export const dispid_DVDTextStringType = 108;
export const dispid_DVDTextString = 109;
export const dispid_DVDTextNumberOfStrings = 110;
export const dispid_DVDTextNumberOfLanguages = 111;
export const dispid_DVDTextLanguageLCID = 112;
export const dispid_RegionChange = 113;
export const dispid_DVDAdm = 114;
export const dispid_DeleteBookmark = 115;
export const dispid_RestoreBookmark = 116;
export const dispid_SaveBookmark = 117;
export const dispid_SelectDefaultAudioLanguage = 118;
export const dispid_SelectDefaultSubpictureLanguage = 119;
export const dispid_PreferredSubpictureStream = 120;
export const dispid_DefaultMenuLanguage = 121;
export const dispid_DefaultSubpictureLanguage = 122;
export const dispid_DefaultAudioLanguage = 123;
export const dispid_DefaultSubpictureLanguageExt = 124;
export const dispid_DefaultAudioLanguageExt = 125;
export const dispid_LanguageFromLCID = 126;
export const dispid_KaraokeAudioPresentationMode = 127;
export const dispid_KaraokeChannelContent = 128;
export const dispid_KaraokeChannelAssignment = 129;
export const dispid_RestorePreferredSettings = 130;
export const dispid_ButtonRect = 131;
export const dispid_DVDScreenInMouseCoordinates = 132;
export const dispid_CustomCompositorClass = 133;
export const dispidCustomCompositorClass = 134;
export const dispid_CustomCompositor = 135;
export const dispidMixerBitmap = 136;
export const dispid_MixerBitmap = 137;
export const dispidMixerBitmapOpacity = 138;
export const dispidMixerBitmapRect = 139;
export const dispidSetupMixerBitmap = 140;
export const dispidUsingOverlay = 141;
export const dispidDisplayChange = 142;
export const dispidRePaint = 143;
export const dispid_IsEqualDevice = 144;
export const dispidrate = 145;
export const dispidposition = 146;
export const dispidpositionmode = 147;
export const dispidlength = 148;
export const dispidChangePassword = 149;
export const dispidSaveParentalLevel = 150;
export const dispidSaveParentalCountry = 151;
export const dispidConfirmPassword = 152;
export const dispidGetParentalLevel = 153;
export const dispidGetParentalCountry = 154;
export const dispidDefaultAudioLCID = 155;
export const dispidDefaultSubpictureLCID = 156;
export const dispidDefaultMenuLCID = 157;
export const dispidBookmarkOnStop = 158;
export const dispidMaxVidRect = 159;
export const dispidMinVidRect = 160;
export const dispidCapture = 161;
export const dispid_DecimateInput = 162;
export const dispidAlloctor = 163;
export const dispid_Allocator = 164;
export const dispidAllocPresentID = 165;
export const dispidSetAllocator = 166;
export const dispid_SetAllocator = 167;
export const dispidStreamBufferSinkName = 168;
export const dispidStreamBufferSourceName = 169;
export const dispidStreamBufferContentRecording = 170;
export const dispidStreamBufferReferenceRecording = 171;
export const dispidstarttime = 172;
export const dispidstoptime = 173;
export const dispidrecordingstopped = 174;
export const dispidrecordingstarted = 175;
export const dispidNameSetLock = 176;
export const dispidrecordingtype = 177;
export const dispidstart = 178;
export const dispidRecordingAttribute = 179;
export const dispid_RecordingAttribute = 180;
export const dispidSBEConfigure = 181;
export const dispid_CurrentRatings = 182;
export const dispid_MaxRatingsLevel = 183;
export const dispid_audioencoderint = 184;
export const dispid_videoencoderint = 185;
export const dispidService = 186;
export const dispid_BlockUnrated = 187;
export const dispid_UnratedDelay = 188;
export const dispid_SuppressEffects = 189;
export const dispidsbesource = 190;
export const dispidSetSinkFilter = 191;
export const dispid_SinkStreams = 192;
export const dispidTVFormats = 193;
export const dispidModes = 194;
export const dispidAuxInputs = 195;
export const dispidTeleTextFilter = 196;
export const dispid_channelchangeint = 197;
export const dispidUnlockProfile = 198;
export const dispid_AddFilter = 199;
export const dispidSetMinSeek = 200;
export const dispidRateEx = 201;
export const dispidaudiocounter = 202;
export const dispidvideocounter = 203;
export const dispidcccounter = 204;
export const dispidwstcounter = 205;
export const dispid_audiocounter = 206;
export const dispid_videocounter = 207;
export const dispid_cccounter = 208;
export const dispid_wstcounter = 209;
export const dispidaudioanalysis = 210;
export const dispidvideoanalysis = 211;
export const dispiddataanalysis = 212;
export const dispidaudio_analysis = 213;
export const dispidvideo_analysis = 214;
export const dispiddata_analysis = 215;
export const dispid_resetFilterList = 216;
export const dispidDevicePath = 217;
export const dispid_SourceFilter = 218;
export const dispid__SourceFilter = 219;
export const dispidUserEvent = 220;
export const dispid_Bookmark = 221;
export const LastReservedDeviceDispid = 16383;
export const eventidStateChange = 0;
export const eventidOnTuneChanged = 1;
export const eventidEndOfMedia = 2;
export const eventidDVDNotify = 3;
export const eventidPlayForwards = 4;
export const eventidPlayBackwards = 5;
export const eventidShowMenu = 6;
export const eventidResume = 7;
export const eventidSelectOrActivateButton = 8;
export const eventidStillOff = 9;
export const eventidPauseOn = 10;
export const eventidChangeCurrentAudioStream = 11;
export const eventidChangeCurrentSubpictureStream = 12;
export const eventidChangeCurrentAngle = 13;
export const eventidPlayAtTimeInTitle = 14;
export const eventidPlayAtTime = 15;
export const eventidPlayChapterInTitle = 16;
export const eventidPlayChapter = 17;
export const eventidReplayChapter = 18;
export const eventidPlayNextChapter = 19;
export const eventidStop = 20;
export const eventidReturnFromSubmenu = 21;
export const eventidPlayTitle = 22;
export const eventidPlayPrevChapter = 23;
export const eventidChangeKaraokePresMode = 24;
export const eventidChangeVideoPresMode = 25;
export const eventidOverlayUnavailable = 26;
export const eventidSinkCertificateFailure = 27;
export const eventidSinkCertificateSuccess = 28;
export const eventidSourceCertificateFailure = 29;
export const eventidSourceCertificateSuccess = 30;
export const eventidRatingsBlocked = 31;
export const eventidRatingsUnlocked = 32;
export const eventidRatingsChanged = 33;
export const eventidWriteFailure = 34;
export const eventidTimeHole = 35;
export const eventidStaleDataRead = 36;
export const eventidContentBecomingStale = 37;
export const eventidStaleFileDeleted = 38;
export const eventidEncryptionOn = 39;
export const eventidEncryptionOff = 40;
export const eventidRateChange = 41;
export const eventidLicenseChange = 42;
export const eventidCOPPBlocked = 43;
export const eventidCOPPUnblocked = 44;
export const dispidlicenseerrorcode = 45;
export const eventidBroadcastEvent = 46;
export const eventidBroadcastEventEx = 47;
export const eventidContentPrimarilyAudio = 48;
export const dispidAVDecAudioDualMonoEvent = 49;
export const dispidAVAudioSampleRateEvent = 50;
export const dispidAVAudioChannelConfigEvent = 51;
export const dispidAVAudioChannelCountEvent = 52;
export const dispidAVDecCommonMeanBitRateEvent = 53;
export const dispidAVDDSurroundModeEvent = 54;
export const dispidAVDecCommonInputFormatEvent = 55;
export const dispidAVDecCommonOutputFormatEvent = 56;
export const eventidWriteFailureClear = 57;
export const LastReservedDeviceEvent = 16383;
export const FrameMode = 0;
export const TenthsSecondsMode = 1;
export const CONTENT = 0;
export const REFERENCE = 1;
export const None = 0;
export const Caption1 = 1;
export const Caption2 = 2;
export const Text1 = 3;
export const Text2 = 4;
export const XDS = 5;
export const MSVidSink_Video = 1;
export const MSVidSink_Audio = 2;
export const MSVidSink_Other = 4;
export const MSVidSEG_SOURCE = 0;
export const MSVidSEG_XFORM = 1;
export const MSVidSEG_DEST = 2;
export const MSVIDCTL_LEFT_BUTTON = 1;
export const MSVIDCTL_RIGHT_BUTTON = 2;
export const MSVIDCTL_MIDDLE_BUTTON = 4;
export const MSVIDCTL_X_BUTTON1 = 8;
export const MSVIDCTL_X_BUTTON2 = 16;
export const MSVIDCTL_SHIFT = 1;
export const MSVIDCTL_CTRL = 2;
export const MSVIDCTL_ALT = 4;
export const dvdMenu_Title = 2;
export const dvdMenu_Root = 3;
export const dvdMenu_Subpicture = 4;
export const dvdMenu_Audio = 5;
export const dvdMenu_Angle = 6;
export const dvdMenu_Chapter = 7;
export const dvdState_Undefined = `-2`;
export const dvdState_Unitialized = `-1`;
export const dvdState_Stopped = 0;
export const dvdState_Paused = 1;
export const dvdState_Running = 2;
export const dvdStruct_Volume = 1;
export const dvdStruct_Title = 2;
export const dvdStruct_ParentalID = 3;
export const dvdStruct_PartOfTitle = 4;
export const dvdStruct_Cell = 5;
export const dvdStream_Audio = 16;
export const dvdStream_Subpicture = 17;
export const dvdStream_Angle = 18;
export const dvdChannel_Audio = 32;
export const dvdGeneral_Name = 48;
export const dvdGeneral_Comments = 49;
export const dvdTitle_Series = 56;
export const dvdTitle_Movie = 57;
export const dvdTitle_Video = 58;
export const dvdTitle_Album = 59;
export const dvdTitle_Song = 60;
export const dvdTitle_Other = 63;
export const dvdTitle_Sub_Series = 64;
export const dvdTitle_Sub_Movie = 65;
export const dvdTitle_Sub_Video = 66;
export const dvdTitle_Sub_Album = 67;
export const dvdTitle_Sub_Song = 68;
export const dvdTitle_Sub_Other = 71;
export const dvdTitle_Orig_Series = 72;
export const dvdTitle_Orig_Movie = 73;
export const dvdTitle_Orig_Video = 74;
export const dvdTitle_Orig_Album = 75;
export const dvdTitle_Orig_Song = 76;
export const dvdTitle_Orig_Other = 79;
export const dvdOther_Scene = 80;
export const dvdOther_Cut = 81;
export const dvdOther_Take = 82;
export const dvdSPExt_NotSpecified = 0;
export const dvdSPExt_Caption_Normal = 1;
export const dvdSPExt_Caption_Big = 2;
export const dvdSPExt_Caption_Children = 3;
export const dvdSPExt_CC_Normal = 5;
export const dvdSPExt_CC_Big = 6;
export const dvdSPExt_CC_Children = 7;
export const dvdSPExt_Forced = 9;
export const dvdSPExt_DirectorComments_Normal = 13;
export const dvdSPExt_DirectorComments_Big = 14;
export const dvdSPExt_DirectorComments_Children = 15;
export const sslFullSize = 0;
export const sslClipByOverScan = 1;
export const sslClipByClipRect = 2;
export const dispidInputs = 0;
export const dispidOutputs = 1;
export const dispid_Inputs = 2;
export const dispid_Outputs = 3;
export const dispidVideoRenderers = 4;
export const dispidAudioRenderers = 5;
export const dispidFeatures = 6;
export const dispidInput = 7;
export const dispidOutput = 8;
export const dispidVideoRenderer = 9;
export const dispidAudioRenderer = 10;
export const dispidSelectedFeatures = 11;
export const dispidView = 12;
export const dispidBuild = 13;
export const dispidPause = 14;
export const dispidRun = 15;
export const dispidStop = 16;
export const dispidDecompose = 17;
export const dispidDisplaySize = 18;
export const dispidMaintainAspectRatio = 19;
export const dispidColorKey = 20;
export const dispidStateChange = 21;
export const dispidgetState = 22;
export const dispidunbind = 23;
export const dispidbind = 24;
export const dispidDisableVideo = 25;
export const dispidDisableAudio = 26;
export const dispidViewNext = 27;
export const dispidServiceP = 28;
export const dslDefaultSize = 0;
export const dslSourceSize = 0;
export const dslHalfSourceSize = 1;
export const dslDoubleSourceSize = 2;
export const dslFullScreen = 3;
export const dslHalfScreen = 4;
export const dslQuarterScreen = 5;
export const dslSixteenthScreen = 6;
export const STATE_UNBUILT = `-1`;
export const STATE_STOP = 0;
export const STATE_PAUSE = 1;
export const STATE_PLAY = 2;
export const RECORDING_TYPE_CONTENT = 0;
export const RECORDING_TYPE_REFERENCE = 1;
export const STREAMBUFFER_TYPE_DWORD = 0;
export const STREAMBUFFER_TYPE_STRING = 1;
export const STREAMBUFFER_TYPE_BINARY = 2;
export const STREAMBUFFER_TYPE_BOOL = 3;
export const STREAMBUFFER_TYPE_QWORD = 4;
export const STREAMBUFFER_TYPE_WORD = 5;
export const STREAMBUFFER_TYPE_GUID = 6;
export const DEF_MODE_PROFILE = 1;
export const DEF_MODE_STREAMS = 2;
export const MPEG_SECTION_IS_NEXT = 0;
export const MPEG_SECTION_IS_CURRENT = 1;
export const MPEG_CONTEXT_BCS_DEMUX = 0;
export const MPEG_CONTEXT_WINSOCK = 1;
export const MPEG_RQST_UNKNOWN = 0;
export const MPEG_RQST_GET_SECTION = 1;
export const MPEG_RQST_GET_SECTION_ASYNC = 2;
export const MPEG_RQST_GET_TABLE = 3;
export const MPEG_RQST_GET_TABLE_ASYNC = 4;
export const MPEG_RQST_GET_SECTIONS_STREAM = 5;
export const MPEG_RQST_GET_PES_STREAM = 6;
export const MPEG_RQST_GET_TS_STREAM = 7;
export const MPEG_RQST_START_MPE_STREAM = 8;
export const VA_VIDEO_COMPONENT = 0;
export const VA_VIDEO_PAL = 1;
export const VA_VIDEO_NTSC = 2;
export const VA_VIDEO_SECAM = 3;
export const VA_VIDEO_MAC = 4;
export const VA_VIDEO_UNSPECIFIED = 5;
export const VA_PRIMARIES_ITU_R_BT_709 = 1;
export const VA_PRIMARIES_UNSPECIFIED = 2;
export const VA_PRIMARIES_ITU_R_BT_470_SYSTEM_M = 4;
export const VA_PRIMARIES_ITU_R_BT_470_SYSTEM_B_G = 5;
export const VA_PRIMARIES_SMPTE_170M = 6;
export const VA_PRIMARIES_SMPTE_240M = 7;
export const VA_PRIMARIES_H264_GENERIC_FILM = 8;
export const VA_TRANSFER_CHARACTERISTICS_ITU_R_BT_709 = 1;
export const VA_TRANSFER_CHARACTERISTICS_UNSPECIFIED = 2;
export const VA_TRANSFER_CHARACTERISTICS_ITU_R_BT_470_SYSTEM_M = 4;
export const VA_TRANSFER_CHARACTERISTICS_ITU_R_BT_470_SYSTEM_B_G = 5;
export const VA_TRANSFER_CHARACTERISTICS_SMPTE_170M = 6;
export const VA_TRANSFER_CHARACTERISTICS_SMPTE_240M = 7;
export const VA_TRANSFER_CHARACTERISTICS_LINEAR = 8;
export const VA_TRANSFER_CHARACTERISTICS_H264_LOG_100_TO_1 = 9;
export const VA_TRANSFER_CHARACTERISTICS_H264_LOG_316_TO_1 = 10;
export const VA_MATRIX_COEFF_H264_RGB = 0;
export const VA_MATRIX_COEFF_ITU_R_BT_709 = 1;
export const VA_MATRIX_COEFF_UNSPECIFIED = 2;
export const VA_MATRIX_COEFF_FCC = 4;
export const VA_MATRIX_COEFF_ITU_R_BT_470_SYSTEM_B_G = 5;
export const VA_MATRIX_COEFF_SMPTE_170M = 6;
export const VA_MATRIX_COEFF_SMPTE_240M = 7;
export const VA_MATRIX_COEFF_H264_YCgCo = 8;
export const STRCONV_MODE_DVB = 0;
export const STRCONV_MODE_DVB_EMPHASIS = 1;
export const STRCONV_MODE_DVB_WITHOUT_EMPHASIS = 2;
export const STRCONV_MODE_ISDB = 3;
export const CRID_LOCATION_IN_DESCRIPTOR = 0;
export const CRID_LOCATION_IN_CIT = 1;
export const CRID_LOCATION_DVB_RESERVED1 = 2;
export const CRID_LOCATION_DVB_RESERVED2 = 3;
export const DESC_LINKAGE_RESERVED0 = 0;
export const DESC_LINKAGE_INFORMATION = 1;
export const DESC_LINKAGE_EPG = 2;
export const DESC_LINKAGE_CA_REPLACEMENT = 3;
export const DESC_LINKAGE_COMPLETE_NET_BOUQUET_SI = 4;
export const DESC_LINKAGE_REPLACEMENT = 5;
export const DESC_LINKAGE_DATA = 6;
export const DESC_LINKAGE_RESERVED1 = 7;
export const DESC_LINKAGE_USER = 8;
export const DESC_LINKAGE_RESERVED2 = 255;
export const ChannelChangeSpanningEvent_Start = 0;
export const ChannelChangeSpanningEvent_End = 2;
export const ChannelTypeNone = 0;
export const ChannelTypeOther = 1;
export const ChannelTypeVideo = 2;
export const ChannelTypeAudio = 4;
export const ChannelTypeText = 8;
export const ChannelTypeSubtitles = 16;
export const ChannelTypeCaptions = 32;
export const ChannelTypeSuperimpose = 64;
export const ChannelTypeData = 128;
export const SignalAndServiceStatusSpanningEvent_None = `-1`;
export const SignalAndServiceStatusSpanningEvent_Clear = 0;
export const SignalAndServiceStatusSpanningEvent_NoTVSignal = 1;
export const SignalAndServiceStatusSpanningEvent_ServiceOffAir = 2;
export const SignalAndServiceStatusSpanningEvent_WeakTVSignal = 3;
export const SignalAndServiceStatusSpanningEvent_NoSubscription = 4;
export const SignalAndServiceStatusSpanningEvent_AllAVScrambled = 5;
export const KSPROPERTY_BDA_ETHERNET_FILTER_MULTICAST_LIST_SIZE = 0;
export const KSPROPERTY_BDA_ETHERNET_FILTER_MULTICAST_LIST = 1;
export const KSPROPERTY_BDA_ETHERNET_FILTER_MULTICAST_MODE = 2;
export const KSPROPERTY_BDA_IPv4_FILTER_MULTICAST_LIST_SIZE = 0;
export const KSPROPERTY_BDA_IPv4_FILTER_MULTICAST_LIST = 1;
export const KSPROPERTY_BDA_IPv4_FILTER_MULTICAST_MODE = 2;
export const KSPROPERTY_BDA_IPv6_FILTER_MULTICAST_LIST_SIZE = 0;
export const KSPROPERTY_BDA_IPv6_FILTER_MULTICAST_LIST = 1;
export const KSPROPERTY_BDA_IPv6_FILTER_MULTICAST_MODE = 2;
export const KSPROPERTY_BDA_SIGNAL_STRENGTH = 0;
export const KSPROPERTY_BDA_SIGNAL_QUALITY = 1;
export const KSPROPERTY_BDA_SIGNAL_PRESENT = 2;
export const KSPROPERTY_BDA_SIGNAL_LOCKED = 3;
export const KSPROPERTY_BDA_SAMPLE_TIME = 4;
export const KSPROPERTY_BDA_SIGNAL_LOCK_CAPS = 5;
export const KSPROPERTY_BDA_SIGNAL_LOCK_TYPE = 6;
export const Bda_LockType_None = 0;
export const Bda_LockType_PLL = 1;
export const Bda_LockType_DecoderDemod = 2;
export const Bda_LockType_Complete = 128;
export const KSMETHOD_BDA_START_CHANGES = 0;
export const KSMETHOD_BDA_CHECK_CHANGES = 1;
export const KSMETHOD_BDA_COMMIT_CHANGES = 2;
export const KSMETHOD_BDA_GET_CHANGE_STATE = 3;
export const KSMETHOD_BDA_CREATE_PIN_FACTORY = 0;
export const KSMETHOD_BDA_DELETE_PIN_FACTORY = 1;
export const KSMETHOD_BDA_CREATE_TOPOLOGY = 2;
export const KSPROPERTY_BDA_NODE_TYPES = 0;
export const KSPROPERTY_BDA_PIN_TYPES = 1;
export const KSPROPERTY_BDA_TEMPLATE_CONNECTIONS = 2;
export const KSPROPERTY_BDA_NODE_METHODS = 3;
export const KSPROPERTY_BDA_NODE_PROPERTIES = 4;
export const KSPROPERTY_BDA_NODE_EVENTS = 5;
export const KSPROPERTY_BDA_CONTROLLING_PIN_ID = 6;
export const KSPROPERTY_BDA_NODE_DESCRIPTORS = 7;
export const KSPROPERTY_BDA_PIN_ID = 0;
export const KSPROPERTY_BDA_PIN_TYPE = 1;
export const KSEVENT_BDA_PIN_CONNECTED = 0;
export const KSEVENT_BDA_PIN_DISCONNECTED = 1;
export const KSPROPERTY_BDA_VOID_TRANSFORM_START = 0;
export const KSPROPERTY_BDA_VOID_TRANSFORM_STOP = 1;
export const KSPROPERTY_BDA_NULL_TRANSFORM_START = 0;
export const KSPROPERTY_BDA_NULL_TRANSFORM_STOP = 1;
export const KSPROPERTY_BDA_RF_TUNER_FREQUENCY = 0;
export const KSPROPERTY_BDA_RF_TUNER_POLARITY = 1;
export const KSPROPERTY_BDA_RF_TUNER_RANGE = 2;
export const KSPROPERTY_BDA_RF_TUNER_TRANSPONDER = 3;
export const KSPROPERTY_BDA_RF_TUNER_BANDWIDTH = 4;
export const KSPROPERTY_BDA_RF_TUNER_FREQUENCY_MULTIPLIER = 5;
export const KSPROPERTY_BDA_RF_TUNER_CAPS = 6;
export const KSPROPERTY_BDA_RF_TUNER_SCAN_STATUS = 7;
export const KSPROPERTY_BDA_RF_TUNER_STANDARD = 8;
export const KSPROPERTY_BDA_RF_TUNER_STANDARD_MODE = 9;
export const Bda_SignalType_Unknown = 0;
export const Bda_SignalType_Analog = 1;
export const Bda_SignalType_Digital = 2;
export const Bda_DigitalStandard_None = 0;
export const Bda_DigitalStandard_DVB_T = 1;
export const Bda_DigitalStandard_DVB_S = 2;
export const Bda_DigitalStandard_DVB_C = 4;
export const Bda_DigitalStandard_ATSC = 8;
export const Bda_DigitalStandard_ISDB_T = 16;
export const Bda_DigitalStandard_ISDB_S = 32;
export const Bda_DigitalStandard_ISDB_C = 64;
export const KSEVENT_BDA_TUNER_SCAN = 0;
export const KSPROPERTY_BDA_LNB_LOF_LOW_BAND = 0;
export const KSPROPERTY_BDA_LNB_LOF_HIGH_BAND = 1;
export const KSPROPERTY_BDA_LNB_SWITCH_FREQUENCY = 2;
export const KSPROPERTY_BDA_DISEQC_ENABLE = 0;
export const KSPROPERTY_BDA_DISEQC_LNB_SOURCE = 1;
export const KSPROPERTY_BDA_DISEQC_USETONEBURST = 2;
export const KSPROPERTY_BDA_DISEQC_REPEATS = 3;
export const KSPROPERTY_BDA_DISEQC_SEND = 4;
export const KSPROPERTY_BDA_DISEQC_RESPONSE = 5;
export const KSEVENT_BDA_DISEQC_DATA_RECEIVED = 0;
export const KSPROPERTY_BDA_MODULATION_TYPE = 0;
export const KSPROPERTY_BDA_INNER_FEC_TYPE = 1;
export const KSPROPERTY_BDA_INNER_FEC_RATE = 2;
export const KSPROPERTY_BDA_OUTER_FEC_TYPE = 3;
export const KSPROPERTY_BDA_OUTER_FEC_RATE = 4;
export const KSPROPERTY_BDA_SYMBOL_RATE = 5;
export const KSPROPERTY_BDA_SPECTRAL_INVERSION = 6;
export const KSPROPERTY_BDA_GUARD_INTERVAL = 7;
export const KSPROPERTY_BDA_TRANSMISSION_MODE = 8;
export const KSPROPERTY_BDA_ROLL_OFF = 9;
export const KSPROPERTY_BDA_PILOT = 10;
export const KSPROPERTY_BDA_SIGNALTIMEOUTS = 11;
export const KSPROPERTY_BDA_PLP_NUMBER = 12;
export const KSPROPERTY_BDA_AUTODEMODULATE_START = 0;
export const KSPROPERTY_BDA_AUTODEMODULATE_STOP = 1;
export const KSPROPERTY_BDA_TABLE_SECTION = 0;
export const KSPROPERTY_BDA_PIDFILTER_MAP_PIDS = 0;
export const KSPROPERTY_BDA_PIDFILTER_UNMAP_PIDS = 1;
export const KSPROPERTY_BDA_PIDFILTER_LIST_PIDS = 2;
export const KSPROPERTY_BDA_ECM_MAP_STATUS = 0;
export const KSPROPERTY_BDA_CA_MODULE_STATUS = 1;
export const KSPROPERTY_BDA_CA_SMART_CARD_STATUS = 2;
export const KSPROPERTY_BDA_CA_MODULE_UI = 3;
export const KSPROPERTY_BDA_CA_SET_PROGRAM_PIDS = 4;
export const KSPROPERTY_BDA_CA_REMOVE_PROGRAM = 5;
export const KSEVENT_BDA_PROGRAM_FLOW_STATUS_CHANGED = 0;
export const KSEVENT_BDA_CA_MODULE_STATUS_CHANGED = 1;
export const KSEVENT_BDA_CA_SMART_CARD_STATUS_CHANGED = 2;
export const KSEVENT_BDA_CA_MODULE_UI_REQUESTED = 3;
export const KSMETHOD_BDA_DRM_CURRENT = 0;
export const KSMETHOD_BDA_DRM_DRMSTATUS = 1;
export const KSMETHOD_BDA_WMDRM_STATUS = 0;
export const KSMETHOD_BDA_WMDRM_REVINFO = 1;
export const KSMETHOD_BDA_WMDRM_CRL = 2;
export const KSMETHOD_BDA_WMDRM_MESSAGE = 3;
export const KSMETHOD_BDA_WMDRM_REISSUELICENSE = 4;
export const KSMETHOD_BDA_WMDRM_RENEWLICENSE = 5;
export const KSMETHOD_BDA_WMDRM_LICENSE = 6;
export const KSMETHOD_BDA_WMDRM_KEYINFO = 7;
export const KSMETHOD_BDA_WMDRMTUNER_CANCELCAPTURETOKEN = 0;
export const KSMETHOD_BDA_WMDRMTUNER_SETPIDPROTECTION = 1;
export const KSMETHOD_BDA_WMDRMTUNER_GETPIDPROTECTION = 2;
export const KSMETHOD_BDA_WMDRMTUNER_SETSYNCVALUE = 3;
export const KSMETHOD_BDA_WMDRMTUNER_STARTCODEPROFILE = 4;
export const KSMETHOD_BDA_WMDRMTUNER_PURCHASE_ENTITLEMENT = 5;
export const KSMETHOD_BDA_EVENT_DATA = 0;
export const KSMETHOD_BDA_EVENT_COMPLETE = 1;
export const KSEVENT_BDA_EVENT_PENDINGEVENT = 0;
export const KSMETHOD_BDA_DEBUG_LEVEL = 0;
export const KSMETHOD_BDA_DEBUG_DATA = 1;
export const KSMETHOD_BDA_TUNER_SETTUNER = 0;
export const KSMETHOD_BDA_TUNER_GETTUNERSTATE = 1;
export const KSMETHOD_BDA_TUNER_SIGNALNOISERATIO = 2;
export const KSMETHOD_BDA_GPNV_GETVALUE = 0;
export const KSMETHOD_BDA_GPNV_SETVALUE = 1;
export const KSMETHOD_BDA_GPNV_NAMEFROMINDEX = 2;
export const KSMETHOD_BDA_GPNV_GETVALUEUPDATENAME = 3;
export const KSMETHOD_BDA_MUX_GETPIDLIST = 0;
export const KSMETHOD_BDA_MUX_SETPIDLIST = 1;
export const KSMETHOD_BDA_SCAN_CAPABILTIES = 0;
export const KSMETHOD_BDA_SCANNING_STATE = 1;
export const KSMETHOD_BDA_SCAN_FILTER = 2;
export const KSMETHOD_BDA_SCAN_START = 3;
export const KSMETHOD_BDA_SCAN_RESUME = 4;
export const KSMETHOD_BDA_SCAN_STOP = 5;
export const KSMETHOD_BDA_GDDS_DATATYPE = 0;
export const KSMETHOD_BDA_GDDS_DATA = 1;
export const KSMETHOD_BDA_GDDS_TUNEXMLFROMIDX = 2;
export const KSMETHOD_BDA_GDDS_GETSERVICES = 3;
export const KSMETHOD_BDA_GDDS_SERVICEFROMTUNEXML = 4;
export const KSMETHOD_BDA_GDDS_DATAUPDATE = 5;
export const KSMETHOD_BDA_CAS_CHECKENTITLEMENTTOKEN = 0;
export const KSMETHOD_BDA_CAS_SETCAPTURETOKEN = 1;
export const KSMETHOD_BDA_CAS_OPENBROADCASTMMI = 2;
export const KSMETHOD_BDA_CAS_CLOSEMMIDIALOG = 3;
export const KSMETHOD_BDA_ISDBCAS_SETREQUEST = 0;
export const KSMETHOD_BDA_ISDBCAS_RESPONSEDATA = 1;
export const KSMETHOD_BDA_TS_SELECTOR_SETTSID = 0;
export const KSMETHOD_BDA_TS_SELECTOR_GETTSINFORMATION = 1;
export const KSMETHOD_BDA_USERACTIVITY_USEREASON = 0;
export const KSMETHOD_BDA_USERACTIVITY_INTERVAL = 1;
export const KSMETHOD_BDA_USERACTIVITY_DETECTED = 2;
export const ConstantBitRate = 0;
export const VariableBitRateAverage = 1;
export const VariableBitRatePeak = 2;
export const COPP_HDCP_Level0 = 0;
export const COPP_HDCP_LevelMin = 0;
export const COPP_HDCP_Level1 = 1;
export const COPP_HDCP_LevelMax = 1;
export const COPP_HDCP_ForceDWORD = 2147483647;
export const COPP_CGMSA_Disabled = 0;
export const COPP_CGMSA_LevelMin = 0;
export const COPP_CGMSA_CopyFreely = 1;
export const COPP_CGMSA_CopyNoMore = 2;
export const COPP_CGMSA_CopyOneGeneration = 3;
export const COPP_CGMSA_CopyNever = 4;
export const COPP_CGMSA_RedistributionControlRequired = 8;
export const COPP_CGMSA_LevelMax = 12;
export const COPP_CGMSA_ForceDWORD = 2147483647;
export const COPP_ACP_Level0 = 0;
export const COPP_ACP_LevelMin = 0;
export const COPP_ACP_Level1 = 1;
export const COPP_ACP_Level2 = 2;
export const COPP_ACP_Level3 = 3;
export const COPP_ACP_LevelMax = 3;
export const COPP_ACP_ForceDWORD = 2147483647;
export const COPP_ProtectionStandard_Unknown = `-2147483648`;
export const COPP_ProtectionStandard_None = 0;
export const COPP_ProtectionStandard_IEC61880_525i = 1;
export const COPP_ProtectionStandard_IEC61880_2_525i = 2;
export const COPP_ProtectionStandard_IEC62375_625p = 4;
export const COPP_ProtectionStandard_EIA608B_525 = 8;
export const COPP_ProtectionStandard_EN300294_625i = 16;
export const COPP_ProtectionStandard_CEA805A_TypeA_525p = 32;
export const COPP_ProtectionStandard_CEA805A_TypeA_750p = 64;
export const COPP_ProtectionStandard_CEA805A_TypeA_1125i = 128;
export const COPP_ProtectionStandard_CEA805A_TypeB_525p = 256;
export const COPP_ProtectionStandard_CEA805A_TypeB_750p = 512;
export const COPP_ProtectionStandard_CEA805A_TypeB_1125i = 1024;
export const COPP_ProtectionStandard_ARIBTRB15_525i = 2048;
export const COPP_ProtectionStandard_ARIBTRB15_525p = 4096;
export const COPP_ProtectionStandard_ARIBTRB15_750p = 8192;
export const COPP_ProtectionStandard_ARIBTRB15_1125i = 16384;
export const COPP_ProtectionStandard_Mask = `-2147450881`;
export const COPP_ProtectionStandard_Reserved = 2147450880;
export const COPP_AspectRatio_EN300294_FullFormat4by3 = 0;
export const COPP_AspectRatio_EN300294_Box14by9Center = 1;
export const COPP_AspectRatio_EN300294_Box14by9Top = 2;
export const COPP_AspectRatio_EN300294_Box16by9Center = 3;
export const COPP_AspectRatio_EN300294_Box16by9Top = 4;
export const COPP_AspectRatio_EN300294_BoxGT16by9Center = 5;
export const COPP_AspectRatio_EN300294_FullFormat4by3ProtectedCenter = 6;
export const COPP_AspectRatio_EN300294_FullFormat16by9Anamorphic = 7;
export const COPP_AspectRatio_ForceDWORD = 2147483647;
export const COPP_StatusNormal = 0;
export const COPP_LinkLost = 1;
export const COPP_RenegotiationRequired = 2;
export const COPP_StatusFlagsReserved = `-4`;
export const COPP_HDCPRepeater = 1;
export const COPP_HDCPFlagsReserved = `-2`;
export const COPP_ConnectorType_Unknown = `-1`;
export const COPP_ConnectorType_VGA = 0;
export const COPP_ConnectorType_SVideo = 1;
export const COPP_ConnectorType_CompositeVideo = 2;
export const COPP_ConnectorType_ComponentVideo = 3;
export const COPP_ConnectorType_DVI = 4;
export const COPP_ConnectorType_HDMI = 5;
export const COPP_ConnectorType_LVDS = 6;
export const COPP_ConnectorType_TMDS = 7;
export const COPP_ConnectorType_D_JPN = 8;
export const COPP_ConnectorType_Internal = `-2147483648`;
export const COPP_ConnectorType_ForceDWORD = 2147483647;
export const COPP_BusType_Unknown = 0;
export const COPP_BusType_PCI = 1;
export const COPP_BusType_PCIX = 2;
export const COPP_BusType_PCIExpress = 3;
export const COPP_BusType_AGP = 4;
export const COPP_BusType_Integrated = `-2147483648`;
export const COPP_BusType_ForceDWORD = 2147483647;

// Structs

/**
 * Windows.Win32.Media.DirectShow.AMVPSIZE (size: 8)
 */
export interface AMVPSIZE {
  /** u32 */
  dwWidth: number;
  /** u32 */
  dwHeight: number;
}

export const sizeofAMVPSIZE = 8;

export function allocAMVPSIZE(data?: Partial<AMVPSIZE>): Uint8Array {
  const buf = new Uint8Array(sizeofAMVPSIZE);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.dwWidth !== undefined) view.setUint32(0, Number(data.dwWidth), true);
  // 0x04: u32
  if (data?.dwHeight !== undefined) view.setUint32(4, Number(data.dwHeight), true);
  return buf;
}

export class AMVPSIZEView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get dwWidth(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: u32
  get dwHeight(): number {
    return this.view.getUint32(4, true);
  }

  // 0x00: u32
  set dwWidth(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: u32
  set dwHeight(value: number) {
    this.view.setUint32(4, value, true);
  }
}

/**
 * Windows.Win32.Foundation.RECT (size: 16)
 */
export interface RECT {
  /** i32 */
  left: number;
  /** i32 */
  top: number;
  /** i32 */
  right: number;
  /** i32 */
  bottom: number;
}

export const sizeofRECT = 16;

export function allocRECT(data?: Partial<RECT>): Uint8Array {
  const buf = new Uint8Array(sizeofRECT);
  const view = new DataView(buf.buffer);
  // 0x00: i32
  if (data?.left !== undefined) view.setInt32(0, Number(data.left), true);
  // 0x04: i32
  if (data?.top !== undefined) view.setInt32(4, Number(data.top), true);
  // 0x08: i32
  if (data?.right !== undefined) view.setInt32(8, Number(data.right), true);
  // 0x0c: i32
  if (data?.bottom !== undefined) view.setInt32(12, Number(data.bottom), true);
  return buf;
}

export class RECTView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: i32
  get left(): number {
    return this.view.getInt32(0, true);
  }

  // 0x04: i32
  get top(): number {
    return this.view.getInt32(4, true);
  }

  // 0x08: i32
  get right(): number {
    return this.view.getInt32(8, true);
  }

  // 0x0c: i32
  get bottom(): number {
    return this.view.getInt32(12, true);
  }

  // 0x00: i32
  set left(value: number) {
    this.view.setInt32(0, value, true);
  }

  // 0x04: i32
  set top(value: number) {
    this.view.setInt32(4, value, true);
  }

  // 0x08: i32
  set right(value: number) {
    this.view.setInt32(8, value, true);
  }

  // 0x0c: i32
  set bottom(value: number) {
    this.view.setInt32(12, value, true);
  }
}

/**
 * Windows.Win32.Media.DirectShow.AMVPDIMINFO (size: 24)
 */
export interface AMVPDIMINFO {
  /** u32 */
  dwFieldWidth: number;
  /** u32 */
  dwFieldHeight: number;
  /** u32 */
  dwVBIWidth: number;
  /** u32 */
  dwVBIHeight: number;
  /** Windows.Win32.Foundation.RECT */
  rcValidRegion: Uint8Array | Deno.PointerValue | null;
}

export const sizeofAMVPDIMINFO = 24;

export function allocAMVPDIMINFO(data?: Partial<AMVPDIMINFO>): Uint8Array {
  const buf = new Uint8Array(sizeofAMVPDIMINFO);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.dwFieldWidth !== undefined) view.setUint32(0, Number(data.dwFieldWidth), true);
  // 0x04: u32
  if (data?.dwFieldHeight !== undefined) view.setUint32(4, Number(data.dwFieldHeight), true);
  // 0x08: u32
  if (data?.dwVBIWidth !== undefined) view.setUint32(8, Number(data.dwVBIWidth), true);
  // 0x0c: u32
  if (data?.dwVBIHeight !== undefined) view.setUint32(12, Number(data.dwVBIHeight), true);
  // 0x10: pointer
  if (data?.rcValidRegion !== undefined) view.setBigUint64(16, data.rcValidRegion === null ? 0n : BigInt(util.toPointer(data.rcValidRegion)), true);
  return buf;
}

export class AMVPDIMINFOView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get dwFieldWidth(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: u32
  get dwFieldHeight(): number {
    return this.view.getUint32(4, true);
  }

  // 0x08: u32
  get dwVBIWidth(): number {
    return this.view.getUint32(8, true);
  }

  // 0x0c: u32
  get dwVBIHeight(): number {
    return this.view.getUint32(12, true);
  }

  // 0x10: pointer
  get rcValidRegion(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(16, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: u32
  set dwFieldWidth(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: u32
  set dwFieldHeight(value: number) {
    this.view.setUint32(4, value, true);
  }

  // 0x08: u32
  set dwVBIWidth(value: number) {
    this.view.setUint32(8, value, true);
  }

  // 0x0c: u32
  set dwVBIHeight(value: number) {
    this.view.setUint32(12, value, true);
  }

  // 0x10: pointer
  set rcValidRegion(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(16, BigInt(util.toPointer(value)), true);
  }
}

export type BOOL = number;

/**
 * Windows.Win32.Media.DirectShow.AMVPDATAINFO (size: 56)
 */
export interface AMVPDATAINFO {
  /** u32 */
  dwSize: number;
  /** u32 */
  dwMicrosecondsPerField: number;
  /** Windows.Win32.Media.DirectShow.AMVPDIMINFO */
  amvpDimInfo: Uint8Array | Deno.PointerValue | null;
  /** u32 */
  dwPictAspectRatioX: number;
  /** u32 */
  dwPictAspectRatioY: number;
  /** Windows.Win32.Foundation.BOOL */
  bEnableDoubleClock: boolean;
  /** Windows.Win32.Foundation.BOOL */
  bEnableVACT: boolean;
  /** Windows.Win32.Foundation.BOOL */
  bDataIsInterlaced: boolean;
  /** i32 */
  lHalfLinesOdd: number;
  /** Windows.Win32.Foundation.BOOL */
  bFieldPolarityInverted: boolean;
  /** u32 */
  dwNumLinesInVREF: number;
  /** i32 */
  lHalfLinesEven: number;
  /** u32 */
  dwReserved1: number;
}

export const sizeofAMVPDATAINFO = 56;

export function allocAMVPDATAINFO(data?: Partial<AMVPDATAINFO>): Uint8Array {
  const buf = new Uint8Array(sizeofAMVPDATAINFO);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.dwSize !== undefined) view.setUint32(0, Number(data.dwSize), true);
  // 0x04: u32
  if (data?.dwMicrosecondsPerField !== undefined) view.setUint32(4, Number(data.dwMicrosecondsPerField), true);
  // 0x08: pointer
  if (data?.amvpDimInfo !== undefined) view.setBigUint64(8, data.amvpDimInfo === null ? 0n : BigInt(util.toPointer(data.amvpDimInfo)), true);
  // 0x10: u32
  if (data?.dwPictAspectRatioX !== undefined) view.setUint32(16, Number(data.dwPictAspectRatioX), true);
  // 0x14: u32
  if (data?.dwPictAspectRatioY !== undefined) view.setUint32(20, Number(data.dwPictAspectRatioY), true);
  // 0x18: i32
  if (data?.bEnableDoubleClock !== undefined) view.setInt32(24, Number(data.bEnableDoubleClock), true);
  // 0x1c: i32
  if (data?.bEnableVACT !== undefined) view.setInt32(28, Number(data.bEnableVACT), true);
  // 0x20: i32
  if (data?.bDataIsInterlaced !== undefined) view.setInt32(32, Number(data.bDataIsInterlaced), true);
  // 0x24: i32
  if (data?.lHalfLinesOdd !== undefined) view.setInt32(36, Number(data.lHalfLinesOdd), true);
  // 0x28: i32
  if (data?.bFieldPolarityInverted !== undefined) view.setInt32(40, Number(data.bFieldPolarityInverted), true);
  // 0x2c: u32
  if (data?.dwNumLinesInVREF !== undefined) view.setUint32(44, Number(data.dwNumLinesInVREF), true);
  // 0x30: i32
  if (data?.lHalfLinesEven !== undefined) view.setInt32(48, Number(data.lHalfLinesEven), true);
  // 0x34: u32
  if (data?.dwReserved1 !== undefined) view.setUint32(52, Number(data.dwReserved1), true);
  return buf;
}

export class AMVPDATAINFOView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get dwSize(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: u32
  get dwMicrosecondsPerField(): number {
    return this.view.getUint32(4, true);
  }

  // 0x08: pointer
  get amvpDimInfo(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(8, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x10: u32
  get dwPictAspectRatioX(): number {
    return this.view.getUint32(16, true);
  }

  // 0x14: u32
  get dwPictAspectRatioY(): number {
    return this.view.getUint32(20, true);
  }

  // 0x18: i32
  get bEnableDoubleClock(): number {
    return this.view.getInt32(24, true);
  }

  // 0x1c: i32
  get bEnableVACT(): number {
    return this.view.getInt32(28, true);
  }

  // 0x20: i32
  get bDataIsInterlaced(): number {
    return this.view.getInt32(32, true);
  }

  // 0x24: i32
  get lHalfLinesOdd(): number {
    return this.view.getInt32(36, true);
  }

  // 0x28: i32
  get bFieldPolarityInverted(): number {
    return this.view.getInt32(40, true);
  }

  // 0x2c: u32
  get dwNumLinesInVREF(): number {
    return this.view.getUint32(44, true);
  }

  // 0x30: i32
  get lHalfLinesEven(): number {
    return this.view.getInt32(48, true);
  }

  // 0x34: u32
  get dwReserved1(): number {
    return this.view.getUint32(52, true);
  }

  // 0x00: u32
  set dwSize(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: u32
  set dwMicrosecondsPerField(value: number) {
    this.view.setUint32(4, value, true);
  }

  // 0x08: pointer
  set amvpDimInfo(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(8, BigInt(util.toPointer(value)), true);
  }

  // 0x10: u32
  set dwPictAspectRatioX(value: number) {
    this.view.setUint32(16, value, true);
  }

  // 0x14: u32
  set dwPictAspectRatioY(value: number) {
    this.view.setUint32(20, value, true);
  }

  // 0x18: i32
  set bEnableDoubleClock(value: number) {
    this.view.setInt32(24, value, true);
  }

  // 0x1c: i32
  set bEnableVACT(value: number) {
    this.view.setInt32(28, value, true);
  }

  // 0x20: i32
  set bDataIsInterlaced(value: number) {
    this.view.setInt32(32, value, true);
  }

  // 0x24: i32
  set lHalfLinesOdd(value: number) {
    this.view.setInt32(36, value, true);
  }

  // 0x28: i32
  set bFieldPolarityInverted(value: number) {
    this.view.setInt32(40, value, true);
  }

  // 0x2c: u32
  set dwNumLinesInVREF(value: number) {
    this.view.setUint32(44, value, true);
  }

  // 0x30: i32
  set lHalfLinesEven(value: number) {
    this.view.setInt32(48, value, true);
  }

  // 0x34: u32
  set dwReserved1(value: number) {
    this.view.setUint32(52, value, true);
  }
}

/**
 * Windows.Win32.Media.DirectShow.ALLOCATOR_PROPERTIES (size: 16)
 */
export interface ALLOCATOR_PROPERTIES {
  /** i32 */
  cBuffers: number;
  /** i32 */
  cbBuffer: number;
  /** i32 */
  cbAlign: number;
  /** i32 */
  cbPrefix: number;
}

export const sizeofALLOCATOR_PROPERTIES = 16;

export function allocALLOCATOR_PROPERTIES(data?: Partial<ALLOCATOR_PROPERTIES>): Uint8Array {
  const buf = new Uint8Array(sizeofALLOCATOR_PROPERTIES);
  const view = new DataView(buf.buffer);
  // 0x00: i32
  if (data?.cBuffers !== undefined) view.setInt32(0, Number(data.cBuffers), true);
  // 0x04: i32
  if (data?.cbBuffer !== undefined) view.setInt32(4, Number(data.cbBuffer), true);
  // 0x08: i32
  if (data?.cbAlign !== undefined) view.setInt32(8, Number(data.cbAlign), true);
  // 0x0c: i32
  if (data?.cbPrefix !== undefined) view.setInt32(12, Number(data.cbPrefix), true);
  return buf;
}

export class ALLOCATOR_PROPERTIESView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: i32
  get cBuffers(): number {
    return this.view.getInt32(0, true);
  }

  // 0x04: i32
  get cbBuffer(): number {
    return this.view.getInt32(4, true);
  }

  // 0x08: i32
  get cbAlign(): number {
    return this.view.getInt32(8, true);
  }

  // 0x0c: i32
  get cbPrefix(): number {
    return this.view.getInt32(12, true);
  }

  // 0x00: i32
  set cBuffers(value: number) {
    this.view.setInt32(0, value, true);
  }

  // 0x04: i32
  set cbBuffer(value: number) {
    this.view.setInt32(4, value, true);
  }

  // 0x08: i32
  set cbAlign(value: number) {
    this.view.setInt32(8, value, true);
  }

  // 0x0c: i32
  set cbPrefix(value: number) {
    this.view.setInt32(12, value, true);
  }
}

/**
 * Windows.Win32.Media.DirectShow.PIN_INFO (size: 24)
 */
export interface PIN_INFO {
  /** Windows.Win32.Media.DirectShow.IBaseFilter */
  pFilter: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Media.DirectShow.PIN_DIRECTION */
  dir: PIN_DIRECTION;
  /** array */
  achName: Deno.PointerValue | null;
}

export const sizeofPIN_INFO = 24;

export function allocPIN_INFO(data?: Partial<PIN_INFO>): Uint8Array {
  const buf = new Uint8Array(sizeofPIN_INFO);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.pFilter !== undefined) view.setBigUint64(0, data.pFilter === null ? 0n : BigInt(util.toPointer(data.pFilter)), true);
  // 0x08: i32
  if (data?.dir !== undefined) view.setInt32(8, Number(data.dir), true);
  // 0x0c: pad4
  // 0x10: pointer
  if (data?.achName !== undefined) view.setBigUint64(16, data.achName === null ? 0n : BigInt(util.toPointer(data.achName)), true);
  return buf;
}

export class PIN_INFOView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get pFilter(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(0, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x08: i32
  get dir(): number {
    return this.view.getInt32(8, true);
  }

  // 0x0c: pad4

  // 0x10: pointer
  get achName(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(16, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: pointer
  set pFilter(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(0, BigInt(util.toPointer(value)), true);
  }

  // 0x08: i32
  set dir(value: number) {
    this.view.setInt32(8, value, true);
  }

  // 0x0c: pad4

  // 0x10: pointer
  set achName(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(16, BigInt(util.toPointer(value)), true);
  }
}

/**
 * Windows.Win32.Media.DirectShow.FILTER_INFO (size: 16)
 */
export interface FILTER_INFO {
  /** array */
  achName: Deno.PointerValue | null;
  /** Windows.Win32.Media.DirectShow.IFilterGraph */
  pGraph: Uint8Array | Deno.PointerValue | null;
}

export const sizeofFILTER_INFO = 16;

export function allocFILTER_INFO(data?: Partial<FILTER_INFO>): Uint8Array {
  const buf = new Uint8Array(sizeofFILTER_INFO);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.achName !== undefined) view.setBigUint64(0, data.achName === null ? 0n : BigInt(util.toPointer(data.achName)), true);
  // 0x08: pointer
  if (data?.pGraph !== undefined) view.setBigUint64(8, data.pGraph === null ? 0n : BigInt(util.toPointer(data.pGraph)), true);
  return buf;
}

export class FILTER_INFOView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get achName(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(0, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x08: pointer
  get pGraph(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(8, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: pointer
  set achName(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(0, BigInt(util.toPointer(value)), true);
  }

  // 0x08: pointer
  set pGraph(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(8, BigInt(util.toPointer(value)), true);
  }
}

/**
 * Windows.Win32.Media.DirectShow.AM_SAMPLE2_PROPERTIES (size: 64)
 */
export interface AM_SAMPLE2_PROPERTIES {
  /** u32 */
  cbData: number;
  /** u32 */
  dwTypeSpecificFlags: number;
  /** u32 */
  dwSampleFlags: number;
  /** i32 */
  lActual: number;
  /** i64 */
  tStart: Deno.PointerValue;
  /** i64 */
  tStop: Deno.PointerValue;
  /** u32 */
  dwStreamId: number;
  /** ptr */
  pMediaType: Deno.PointerValue | Uint8Array | null;
  /** ptr */
  pbBuffer: Deno.PointerValue | Uint8Array | null;
  /** i32 */
  cbBuffer: number;
}

export const sizeofAM_SAMPLE2_PROPERTIES = 64;

export function allocAM_SAMPLE2_PROPERTIES(data?: Partial<AM_SAMPLE2_PROPERTIES>): Uint8Array {
  const buf = new Uint8Array(sizeofAM_SAMPLE2_PROPERTIES);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.cbData !== undefined) view.setUint32(0, Number(data.cbData), true);
  // 0x04: u32
  if (data?.dwTypeSpecificFlags !== undefined) view.setUint32(4, Number(data.dwTypeSpecificFlags), true);
  // 0x08: u32
  if (data?.dwSampleFlags !== undefined) view.setUint32(8, Number(data.dwSampleFlags), true);
  // 0x0c: i32
  if (data?.lActual !== undefined) view.setInt32(12, Number(data.lActual), true);
  // 0x10: i64
  if (data?.tStart !== undefined) view.setBigInt64(16, BigInt(data.tStart), true);
  // 0x18: i64
  if (data?.tStop !== undefined) view.setBigInt64(24, BigInt(data.tStop), true);
  // 0x20: u32
  if (data?.dwStreamId !== undefined) view.setUint32(32, Number(data.dwStreamId), true);
  // 0x24: pad4
  // 0x28: pointer
  if (data?.pMediaType !== undefined) view.setBigUint64(40, data.pMediaType === null ? 0n : BigInt(util.toPointer(data.pMediaType)), true);
  // 0x30: pointer
  if (data?.pbBuffer !== undefined) view.setBigUint64(48, data.pbBuffer === null ? 0n : BigInt(util.toPointer(data.pbBuffer)), true);
  // 0x38: i32
  if (data?.cbBuffer !== undefined) view.setInt32(56, Number(data.cbBuffer), true);
  // 0x3c: pad4
  return buf;
}

export class AM_SAMPLE2_PROPERTIESView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get cbData(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: u32
  get dwTypeSpecificFlags(): number {
    return this.view.getUint32(4, true);
  }

  // 0x08: u32
  get dwSampleFlags(): number {
    return this.view.getUint32(8, true);
  }

  // 0x0c: i32
  get lActual(): number {
    return this.view.getInt32(12, true);
  }

  // 0x10: i64
  get tStart(): Deno.PointerValue {
    return Number(this.view.getBigInt64(16, true));
  }

  // 0x18: i64
  get tStop(): Deno.PointerValue {
    return Number(this.view.getBigInt64(24, true));
  }

  // 0x20: u32
  get dwStreamId(): number {
    return this.view.getUint32(32, true);
  }

  // 0x24: pad4

  // 0x28: pointer
  get pMediaType(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(40, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x30: pointer
  get pbBuffer(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(48, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x38: i32
  get cbBuffer(): number {
    return this.view.getInt32(56, true);
  }

  // 0x3c: pad4

  // 0x00: u32
  set cbData(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: u32
  set dwTypeSpecificFlags(value: number) {
    this.view.setUint32(4, value, true);
  }

  // 0x08: u32
  set dwSampleFlags(value: number) {
    this.view.setUint32(8, value, true);
  }

  // 0x0c: i32
  set lActual(value: number) {
    this.view.setInt32(12, value, true);
  }

  // 0x10: i64
  set tStart(value: Deno.PointerValue) {
    this.view.setBigInt64(16, BigInt(value), true);
  }

  // 0x18: i64
  set tStop(value: Deno.PointerValue) {
    this.view.setBigInt64(24, BigInt(value), true);
  }

  // 0x20: u32
  set dwStreamId(value: number) {
    this.view.setUint32(32, value, true);
  }

  // 0x24: pad4

  // 0x28: pointer
  set pMediaType(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(40, BigInt(util.toPointer(value)), true);
  }

  // 0x30: pointer
  set pbBuffer(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(48, BigInt(util.toPointer(value)), true);
  }

  // 0x38: i32
  set cbBuffer(value: number) {
    this.view.setInt32(56, value, true);
  }

  // 0x3c: pad4
}

export type PWSTR = Deno.PointerValue | Uint8Array | null;

/**
 * Windows.Win32.Media.DirectShow.REGFILTER (size: 16)
 */
export interface REGFILTER {
  /** System.Guid */
  Clsid: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Foundation.PWSTR */
  Name: string | null | Uint8Array | Uint16Array;
}

export const sizeofREGFILTER = 16;

export function allocREGFILTER(data?: Partial<REGFILTER>): Uint8Array {
  const buf = new Uint8Array(sizeofREGFILTER);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.Clsid !== undefined) view.setBigUint64(0, data.Clsid === null ? 0n : BigInt(util.toPointer(data.Clsid)), true);
  // 0x08: buffer
  if (data?.Name !== undefined) {
    (buf as any)._f8 = util.pwstrToFfi(data.Name);
    view.setBigUint64(8, (buf as any)._f8 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f8)), true);
  }
  return buf;
}

export class REGFILTERView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get Clsid(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(0, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x08: buffer
  get Name(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(8, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: pointer
  set Clsid(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(0, BigInt(util.toPointer(value)), true);
  }

  // 0x08: buffer
  set Name(value: Uint8Array | Deno.PointerValue | null) {
    (this.buf as any)._f8 = value;
    this.view.setBigUint64(8, BigInt(util.toPointer((this.buf as any)._f8)), true);
  }
}

/**
 * Windows.Win32.Media.DirectShow.REGPINTYPES (size: 16)
 */
export interface REGPINTYPES {
  /** ptr */
  clsMajorType: Deno.PointerValue | Uint8Array | null;
  /** ptr */
  clsMinorType: Deno.PointerValue | Uint8Array | null;
}

export const sizeofREGPINTYPES = 16;

export function allocREGPINTYPES(data?: Partial<REGPINTYPES>): Uint8Array {
  const buf = new Uint8Array(sizeofREGPINTYPES);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.clsMajorType !== undefined) view.setBigUint64(0, data.clsMajorType === null ? 0n : BigInt(util.toPointer(data.clsMajorType)), true);
  // 0x08: pointer
  if (data?.clsMinorType !== undefined) view.setBigUint64(8, data.clsMinorType === null ? 0n : BigInt(util.toPointer(data.clsMinorType)), true);
  return buf;
}

export class REGPINTYPESView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get clsMajorType(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(0, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x08: pointer
  get clsMinorType(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(8, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: pointer
  set clsMajorType(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(0, BigInt(util.toPointer(value)), true);
  }

  // 0x08: pointer
  set clsMinorType(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(8, BigInt(util.toPointer(value)), true);
  }
}

/**
 * Windows.Win32.Media.DirectShow.REGFILTERPINS (size: 56)
 */
export interface REGFILTERPINS {
  /** Windows.Win32.Foundation.PWSTR */
  strName: string | null | Uint8Array | Uint16Array;
  /** Windows.Win32.Foundation.BOOL */
  bRendered: boolean;
  /** Windows.Win32.Foundation.BOOL */
  bOutput: boolean;
  /** Windows.Win32.Foundation.BOOL */
  bZero: boolean;
  /** Windows.Win32.Foundation.BOOL */
  bMany: boolean;
  /** ptr */
  clsConnectsToFilter: Deno.PointerValue | Uint8Array | null;
  /** Windows.Win32.Foundation.PWSTR */
  strConnectsToPin: string | null | Uint8Array | Uint16Array;
  /** u32 */
  nMediaTypes: number;
  /** ptr */
  lpMediaType: Deno.PointerValue | Uint8Array | null;
}

export const sizeofREGFILTERPINS = 56;

export function allocREGFILTERPINS(data?: Partial<REGFILTERPINS>): Uint8Array {
  const buf = new Uint8Array(sizeofREGFILTERPINS);
  const view = new DataView(buf.buffer);
  // 0x00: buffer
  if (data?.strName !== undefined) {
    (buf as any)._f0 = util.pwstrToFfi(data.strName);
    view.setBigUint64(0, (buf as any)._f0 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f0)), true);
  }
  // 0x08: i32
  if (data?.bRendered !== undefined) view.setInt32(8, Number(data.bRendered), true);
  // 0x0c: i32
  if (data?.bOutput !== undefined) view.setInt32(12, Number(data.bOutput), true);
  // 0x10: i32
  if (data?.bZero !== undefined) view.setInt32(16, Number(data.bZero), true);
  // 0x14: i32
  if (data?.bMany !== undefined) view.setInt32(20, Number(data.bMany), true);
  // 0x18: pointer
  if (data?.clsConnectsToFilter !== undefined) view.setBigUint64(24, data.clsConnectsToFilter === null ? 0n : BigInt(util.toPointer(data.clsConnectsToFilter)), true);
  // 0x20: buffer
  if (data?.strConnectsToPin !== undefined) {
    (buf as any)._f32 = util.pwstrToFfi(data.strConnectsToPin);
    view.setBigUint64(32, (buf as any)._f32 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f32)), true);
  }
  // 0x28: u32
  if (data?.nMediaTypes !== undefined) view.setUint32(40, Number(data.nMediaTypes), true);
  // 0x2c: pad4
  // 0x30: pointer
  if (data?.lpMediaType !== undefined) view.setBigUint64(48, data.lpMediaType === null ? 0n : BigInt(util.toPointer(data.lpMediaType)), true);
  return buf;
}

export class REGFILTERPINSView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: buffer
  get strName(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(0, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x08: i32
  get bRendered(): number {
    return this.view.getInt32(8, true);
  }

  // 0x0c: i32
  get bOutput(): number {
    return this.view.getInt32(12, true);
  }

  // 0x10: i32
  get bZero(): number {
    return this.view.getInt32(16, true);
  }

  // 0x14: i32
  get bMany(): number {
    return this.view.getInt32(20, true);
  }

  // 0x18: pointer
  get clsConnectsToFilter(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(24, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x20: buffer
  get strConnectsToPin(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(32, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x28: u32
  get nMediaTypes(): number {
    return this.view.getUint32(40, true);
  }

  // 0x2c: pad4

  // 0x30: pointer
  get lpMediaType(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(48, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: buffer
  set strName(value: Uint8Array | Deno.PointerValue | null) {
    (this.buf as any)._f0 = value;
    this.view.setBigUint64(0, BigInt(util.toPointer((this.buf as any)._f0)), true);
  }

  // 0x08: i32
  set bRendered(value: number) {
    this.view.setInt32(8, value, true);
  }

  // 0x0c: i32
  set bOutput(value: number) {
    this.view.setInt32(12, value, true);
  }

  // 0x10: i32
  set bZero(value: number) {
    this.view.setInt32(16, value, true);
  }

  // 0x14: i32
  set bMany(value: number) {
    this.view.setInt32(20, value, true);
  }

  // 0x18: pointer
  set clsConnectsToFilter(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(24, BigInt(util.toPointer(value)), true);
  }

  // 0x20: buffer
  set strConnectsToPin(value: Uint8Array | Deno.PointerValue | null) {
    (this.buf as any)._f32 = value;
    this.view.setBigUint64(32, BigInt(util.toPointer((this.buf as any)._f32)), true);
  }

  // 0x28: u32
  set nMediaTypes(value: number) {
    this.view.setUint32(40, value, true);
  }

  // 0x2c: pad4

  // 0x30: pointer
  set lpMediaType(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(48, BigInt(util.toPointer(value)), true);
  }
}

/**
 * Windows.Win32.Media.DirectShow.REGPINMEDIUM (size: 16)
 */
export interface REGPINMEDIUM {
  /** System.Guid */
  clsMedium: Uint8Array | Deno.PointerValue | null;
  /** u32 */
  dw1: number;
  /** u32 */
  dw2: number;
}

export const sizeofREGPINMEDIUM = 16;

export function allocREGPINMEDIUM(data?: Partial<REGPINMEDIUM>): Uint8Array {
  const buf = new Uint8Array(sizeofREGPINMEDIUM);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.clsMedium !== undefined) view.setBigUint64(0, data.clsMedium === null ? 0n : BigInt(util.toPointer(data.clsMedium)), true);
  // 0x08: u32
  if (data?.dw1 !== undefined) view.setUint32(8, Number(data.dw1), true);
  // 0x0c: u32
  if (data?.dw2 !== undefined) view.setUint32(12, Number(data.dw2), true);
  return buf;
}

export class REGPINMEDIUMView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get clsMedium(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(0, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x08: u32
  get dw1(): number {
    return this.view.getUint32(8, true);
  }

  // 0x0c: u32
  get dw2(): number {
    return this.view.getUint32(12, true);
  }

  // 0x00: pointer
  set clsMedium(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(0, BigInt(util.toPointer(value)), true);
  }

  // 0x08: u32
  set dw1(value: number) {
    this.view.setUint32(8, value, true);
  }

  // 0x0c: u32
  set dw2(value: number) {
    this.view.setUint32(12, value, true);
  }
}

/**
 * Windows.Win32.Media.DirectShow.REGFILTERPINS2 (size: 48)
 */
export interface REGFILTERPINS2 {
  /** u32 */
  dwFlags: number;
  /** u32 */
  cInstances: number;
  /** u32 */
  nMediaTypes: number;
  /** ptr */
  lpMediaType: Deno.PointerValue | Uint8Array | null;
  /** u32 */
  nMediums: number;
  /** ptr */
  lpMedium: Deno.PointerValue | Uint8Array | null;
  /** ptr */
  clsPinCategory: Deno.PointerValue | Uint8Array | null;
}

export const sizeofREGFILTERPINS2 = 48;

export function allocREGFILTERPINS2(data?: Partial<REGFILTERPINS2>): Uint8Array {
  const buf = new Uint8Array(sizeofREGFILTERPINS2);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.dwFlags !== undefined) view.setUint32(0, Number(data.dwFlags), true);
  // 0x04: u32
  if (data?.cInstances !== undefined) view.setUint32(4, Number(data.cInstances), true);
  // 0x08: u32
  if (data?.nMediaTypes !== undefined) view.setUint32(8, Number(data.nMediaTypes), true);
  // 0x0c: pad4
  // 0x10: pointer
  if (data?.lpMediaType !== undefined) view.setBigUint64(16, data.lpMediaType === null ? 0n : BigInt(util.toPointer(data.lpMediaType)), true);
  // 0x18: u32
  if (data?.nMediums !== undefined) view.setUint32(24, Number(data.nMediums), true);
  // 0x1c: pad4
  // 0x20: pointer
  if (data?.lpMedium !== undefined) view.setBigUint64(32, data.lpMedium === null ? 0n : BigInt(util.toPointer(data.lpMedium)), true);
  // 0x28: pointer
  if (data?.clsPinCategory !== undefined) view.setBigUint64(40, data.clsPinCategory === null ? 0n : BigInt(util.toPointer(data.clsPinCategory)), true);
  return buf;
}

export class REGFILTERPINS2View {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get dwFlags(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: u32
  get cInstances(): number {
    return this.view.getUint32(4, true);
  }

  // 0x08: u32
  get nMediaTypes(): number {
    return this.view.getUint32(8, true);
  }

  // 0x0c: pad4

  // 0x10: pointer
  get lpMediaType(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(16, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x18: u32
  get nMediums(): number {
    return this.view.getUint32(24, true);
  }

  // 0x1c: pad4

  // 0x20: pointer
  get lpMedium(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(32, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x28: pointer
  get clsPinCategory(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(40, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: u32
  set dwFlags(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: u32
  set cInstances(value: number) {
    this.view.setUint32(4, value, true);
  }

  // 0x08: u32
  set nMediaTypes(value: number) {
    this.view.setUint32(8, value, true);
  }

  // 0x0c: pad4

  // 0x10: pointer
  set lpMediaType(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(16, BigInt(util.toPointer(value)), true);
  }

  // 0x18: u32
  set nMediums(value: number) {
    this.view.setUint32(24, value, true);
  }

  // 0x1c: pad4

  // 0x20: pointer
  set lpMedium(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(32, BigInt(util.toPointer(value)), true);
  }

  // 0x28: pointer
  set clsPinCategory(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(40, BigInt(util.toPointer(value)), true);
  }
}

/**
 * _Anonymous_e__Struct (size: 16)
 */
export interface _Anonymous_e__Struct {
  /** u64 */
  Alignment: Deno.PointerValue;
  /** u64 */
  Region: Deno.PointerValue;
}

export const sizeof_Anonymous_e__Struct = 16;

export function alloc_Anonymous_e__Struct(data?: Partial<_Anonymous_e__Struct>): Uint8Array {
  const buf = new Uint8Array(sizeof_Anonymous_e__Struct);
  const view = new DataView(buf.buffer);
  // 0x00: u64
  if (data?.Alignment !== undefined) view.setBigUint64(0, BigInt(data.Alignment), true);
  // 0x08: u64
  if (data?.Region !== undefined) view.setBigUint64(8, BigInt(data.Region), true);
  return buf;
}

export class _Anonymous_e__StructView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u64
  get Alignment(): Deno.PointerValue {
    return Number(this.view.getBigUint64(0, true));
  }

  // 0x08: u64
  get Region(): Deno.PointerValue {
    return Number(this.view.getBigUint64(8, true));
  }

  // 0x00: u64
  set Alignment(value: Deno.PointerValue) {
    this.view.setBigUint64(0, BigInt(value), true);
  }

  // 0x08: u64
  set Region(value: Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(value), true);
  }
}

/**
 * _Anonymous_e__Union (size: 16)
 */
export interface _Anonymous_e__Union {
  /** _Anonymous_e__Struct */
  Anonymous: Uint8Array | Deno.PointerValue | null;
  /** array */
  X: Deno.PointerValue | null;
}

export const sizeof_Anonymous_e__Union = 16;

export function alloc_Anonymous_e__Union(data?: Partial<_Anonymous_e__Union>): Uint8Array {
  const buf = new Uint8Array(sizeof_Anonymous_e__Union);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.Anonymous !== undefined) view.setBigUint64(0, data.Anonymous === null ? 0n : BigInt(util.toPointer(data.Anonymous)), true);
  // 0x08: pointer
  if (data?.X !== undefined) view.setBigUint64(8, data.X === null ? 0n : BigInt(util.toPointer(data.X)), true);
  return buf;
}

export class _Anonymous_e__UnionView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get Anonymous(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(0, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x08: pointer
  get X(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(8, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: pointer
  set Anonymous(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(0, BigInt(util.toPointer(value)), true);
  }

  // 0x08: pointer
  set X(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(8, BigInt(util.toPointer(value)), true);
  }
}

/**
 * Windows.Win32.Media.DirectShow.REGFILTER2 (size: 16)
 */
export interface REGFILTER2 {
  /** u32 */
  dwVersion: number;
  /** u32 */
  dwMerit: number;
  /** _Anonymous_e__Union */
  Anonymous: Uint8Array | Deno.PointerValue | null;
}

export const sizeofREGFILTER2 = 16;

export function allocREGFILTER2(data?: Partial<REGFILTER2>): Uint8Array {
  const buf = new Uint8Array(sizeofREGFILTER2);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.dwVersion !== undefined) view.setUint32(0, Number(data.dwVersion), true);
  // 0x04: u32
  if (data?.dwMerit !== undefined) view.setUint32(4, Number(data.dwMerit), true);
  // 0x08: pointer
  if (data?.Anonymous !== undefined) view.setBigUint64(8, data.Anonymous === null ? 0n : BigInt(util.toPointer(data.Anonymous)), true);
  return buf;
}

export class REGFILTER2View {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get dwVersion(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: u32
  get dwMerit(): number {
    return this.view.getUint32(4, true);
  }

  // 0x08: pointer
  get Anonymous(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(8, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: u32
  set dwVersion(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: u32
  set dwMerit(value: number) {
    this.view.setUint32(4, value, true);
  }

  // 0x08: pointer
  set Anonymous(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(8, BigInt(util.toPointer(value)), true);
  }
}

/**
 * Windows.Win32.Media.DirectShow.Quality (size: 24)
 */
export interface Quality {
  /** Windows.Win32.Media.DirectShow.QualityMessageType */
  Type: QualityMessageType;
  /** i32 */
  Proportion: number;
  /** i64 */
  Late: Deno.PointerValue;
  /** i64 */
  TimeStamp: Deno.PointerValue;
}

export const sizeofQuality = 24;

export function allocQuality(data?: Partial<Quality>): Uint8Array {
  const buf = new Uint8Array(sizeofQuality);
  const view = new DataView(buf.buffer);
  // 0x00: i32
  if (data?.Type !== undefined) view.setInt32(0, Number(data.Type), true);
  // 0x04: i32
  if (data?.Proportion !== undefined) view.setInt32(4, Number(data.Proportion), true);
  // 0x08: i64
  if (data?.Late !== undefined) view.setBigInt64(8, BigInt(data.Late), true);
  // 0x10: i64
  if (data?.TimeStamp !== undefined) view.setBigInt64(16, BigInt(data.TimeStamp), true);
  return buf;
}

export class QualityView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: i32
  get Type(): number {
    return this.view.getInt32(0, true);
  }

  // 0x04: i32
  get Proportion(): number {
    return this.view.getInt32(4, true);
  }

  // 0x08: i64
  get Late(): Deno.PointerValue {
    return Number(this.view.getBigInt64(8, true));
  }

  // 0x10: i64
  get TimeStamp(): Deno.PointerValue {
    return Number(this.view.getBigInt64(16, true));
  }

  // 0x00: i32
  set Type(value: number) {
    this.view.setInt32(0, value, true);
  }

  // 0x04: i32
  set Proportion(value: number) {
    this.view.setInt32(4, value, true);
  }

  // 0x08: i64
  set Late(value: Deno.PointerValue) {
    this.view.setBigInt64(8, BigInt(value), true);
  }

  // 0x10: i64
  set TimeStamp(value: Deno.PointerValue) {
    this.view.setBigInt64(16, BigInt(value), true);
  }
}

export type COLORREF = number;

/**
 * Windows.Win32.Media.DirectShow.COLORKEY (size: 24)
 */
export interface COLORKEY {
  /** u32 */
  KeyType: number;
  /** u32 */
  PaletteIndex: number;
  /** Windows.Win32.Foundation.COLORREF */
  LowColorValue: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Foundation.COLORREF */
  HighColorValue: Uint8Array | Deno.PointerValue | null;
}

export const sizeofCOLORKEY = 24;

export function allocCOLORKEY(data?: Partial<COLORKEY>): Uint8Array {
  const buf = new Uint8Array(sizeofCOLORKEY);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.KeyType !== undefined) view.setUint32(0, Number(data.KeyType), true);
  // 0x04: u32
  if (data?.PaletteIndex !== undefined) view.setUint32(4, Number(data.PaletteIndex), true);
  // 0x08: pointer
  if (data?.LowColorValue !== undefined) view.setBigUint64(8, data.LowColorValue === null ? 0n : BigInt(util.toPointer(data.LowColorValue)), true);
  // 0x10: pointer
  if (data?.HighColorValue !== undefined) view.setBigUint64(16, data.HighColorValue === null ? 0n : BigInt(util.toPointer(data.HighColorValue)), true);
  return buf;
}

export class COLORKEYView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get KeyType(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: u32
  get PaletteIndex(): number {
    return this.view.getUint32(4, true);
  }

  // 0x08: pointer
  get LowColorValue(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(8, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x10: pointer
  get HighColorValue(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(16, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: u32
  set KeyType(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: u32
  set PaletteIndex(value: number) {
    this.view.setUint32(4, value, true);
  }

  // 0x08: pointer
  set LowColorValue(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(8, BigInt(util.toPointer(value)), true);
  }

  // 0x10: pointer
  set HighColorValue(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(16, BigInt(util.toPointer(value)), true);
  }
}

/**
 * Windows.Win32.Media.DirectShow.AM_STREAM_INFO (size: 32)
 */
export interface AM_STREAM_INFO {
  /** i64 */
  tStart: Deno.PointerValue;
  /** i64 */
  tStop: Deno.PointerValue;
  /** u32 */
  dwStartCookie: number;
  /** u32 */
  dwStopCookie: number;
  /** u32 */
  dwFlags: number;
}

export const sizeofAM_STREAM_INFO = 32;

export function allocAM_STREAM_INFO(data?: Partial<AM_STREAM_INFO>): Uint8Array {
  const buf = new Uint8Array(sizeofAM_STREAM_INFO);
  const view = new DataView(buf.buffer);
  // 0x00: i64
  if (data?.tStart !== undefined) view.setBigInt64(0, BigInt(data.tStart), true);
  // 0x08: i64
  if (data?.tStop !== undefined) view.setBigInt64(8, BigInt(data.tStop), true);
  // 0x10: u32
  if (data?.dwStartCookie !== undefined) view.setUint32(16, Number(data.dwStartCookie), true);
  // 0x14: u32
  if (data?.dwStopCookie !== undefined) view.setUint32(20, Number(data.dwStopCookie), true);
  // 0x18: u32
  if (data?.dwFlags !== undefined) view.setUint32(24, Number(data.dwFlags), true);
  // 0x1c: pad4
  return buf;
}

export class AM_STREAM_INFOView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: i64
  get tStart(): Deno.PointerValue {
    return Number(this.view.getBigInt64(0, true));
  }

  // 0x08: i64
  get tStop(): Deno.PointerValue {
    return Number(this.view.getBigInt64(8, true));
  }

  // 0x10: u32
  get dwStartCookie(): number {
    return this.view.getUint32(16, true);
  }

  // 0x14: u32
  get dwStopCookie(): number {
    return this.view.getUint32(20, true);
  }

  // 0x18: u32
  get dwFlags(): number {
    return this.view.getUint32(24, true);
  }

  // 0x1c: pad4

  // 0x00: i64
  set tStart(value: Deno.PointerValue) {
    this.view.setBigInt64(0, BigInt(value), true);
  }

  // 0x08: i64
  set tStop(value: Deno.PointerValue) {
    this.view.setBigInt64(8, BigInt(value), true);
  }

  // 0x10: u32
  set dwStartCookie(value: number) {
    this.view.setUint32(16, value, true);
  }

  // 0x14: u32
  set dwStopCookie(value: number) {
    this.view.setUint32(20, value, true);
  }

  // 0x18: u32
  set dwFlags(value: number) {
    this.view.setUint32(24, value, true);
  }

  // 0x1c: pad4
}

/**
 * Windows.Win32.Foundation.SIZE (size: 8)
 */
export interface SIZE {
  /** i32 */
  cx: number;
  /** i32 */
  cy: number;
}

export const sizeofSIZE = 8;

export function allocSIZE(data?: Partial<SIZE>): Uint8Array {
  const buf = new Uint8Array(sizeofSIZE);
  const view = new DataView(buf.buffer);
  // 0x00: i32
  if (data?.cx !== undefined) view.setInt32(0, Number(data.cx), true);
  // 0x04: i32
  if (data?.cy !== undefined) view.setInt32(4, Number(data.cy), true);
  return buf;
}

export class SIZEView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: i32
  get cx(): number {
    return this.view.getInt32(0, true);
  }

  // 0x04: i32
  get cy(): number {
    return this.view.getInt32(4, true);
  }

  // 0x00: i32
  set cx(value: number) {
    this.view.setInt32(0, value, true);
  }

  // 0x04: i32
  set cy(value: number) {
    this.view.setInt32(4, value, true);
  }
}

/**
 * Windows.Win32.Media.DirectShow.VIDEO_STREAM_CONFIG_CAPS (size: 120)
 */
export interface VIDEO_STREAM_CONFIG_CAPS {
  /** System.Guid */
  guid: Uint8Array | Deno.PointerValue | null;
  /** u32 */
  VideoStandard: number;
  /** Windows.Win32.Foundation.SIZE */
  InputSize: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Foundation.SIZE */
  MinCroppingSize: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Foundation.SIZE */
  MaxCroppingSize: Uint8Array | Deno.PointerValue | null;
  /** i32 */
  CropGranularityX: number;
  /** i32 */
  CropGranularityY: number;
  /** i32 */
  CropAlignX: number;
  /** i32 */
  CropAlignY: number;
  /** Windows.Win32.Foundation.SIZE */
  MinOutputSize: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Foundation.SIZE */
  MaxOutputSize: Uint8Array | Deno.PointerValue | null;
  /** i32 */
  OutputGranularityX: number;
  /** i32 */
  OutputGranularityY: number;
  /** i32 */
  StretchTapsX: number;
  /** i32 */
  StretchTapsY: number;
  /** i32 */
  ShrinkTapsX: number;
  /** i32 */
  ShrinkTapsY: number;
  /** i64 */
  MinFrameInterval: Deno.PointerValue;
  /** i64 */
  MaxFrameInterval: Deno.PointerValue;
  /** i32 */
  MinBitsPerSecond: number;
  /** i32 */
  MaxBitsPerSecond: number;
}

export const sizeofVIDEO_STREAM_CONFIG_CAPS = 120;

export function allocVIDEO_STREAM_CONFIG_CAPS(data?: Partial<VIDEO_STREAM_CONFIG_CAPS>): Uint8Array {
  const buf = new Uint8Array(sizeofVIDEO_STREAM_CONFIG_CAPS);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.guid !== undefined) view.setBigUint64(0, data.guid === null ? 0n : BigInt(util.toPointer(data.guid)), true);
  // 0x08: u32
  if (data?.VideoStandard !== undefined) view.setUint32(8, Number(data.VideoStandard), true);
  // 0x0c: pad4
  // 0x10: pointer
  if (data?.InputSize !== undefined) view.setBigUint64(16, data.InputSize === null ? 0n : BigInt(util.toPointer(data.InputSize)), true);
  // 0x18: pointer
  if (data?.MinCroppingSize !== undefined) view.setBigUint64(24, data.MinCroppingSize === null ? 0n : BigInt(util.toPointer(data.MinCroppingSize)), true);
  // 0x20: pointer
  if (data?.MaxCroppingSize !== undefined) view.setBigUint64(32, data.MaxCroppingSize === null ? 0n : BigInt(util.toPointer(data.MaxCroppingSize)), true);
  // 0x28: i32
  if (data?.CropGranularityX !== undefined) view.setInt32(40, Number(data.CropGranularityX), true);
  // 0x2c: i32
  if (data?.CropGranularityY !== undefined) view.setInt32(44, Number(data.CropGranularityY), true);
  // 0x30: i32
  if (data?.CropAlignX !== undefined) view.setInt32(48, Number(data.CropAlignX), true);
  // 0x34: i32
  if (data?.CropAlignY !== undefined) view.setInt32(52, Number(data.CropAlignY), true);
  // 0x38: pointer
  if (data?.MinOutputSize !== undefined) view.setBigUint64(56, data.MinOutputSize === null ? 0n : BigInt(util.toPointer(data.MinOutputSize)), true);
  // 0x40: pointer
  if (data?.MaxOutputSize !== undefined) view.setBigUint64(64, data.MaxOutputSize === null ? 0n : BigInt(util.toPointer(data.MaxOutputSize)), true);
  // 0x48: i32
  if (data?.OutputGranularityX !== undefined) view.setInt32(72, Number(data.OutputGranularityX), true);
  // 0x4c: i32
  if (data?.OutputGranularityY !== undefined) view.setInt32(76, Number(data.OutputGranularityY), true);
  // 0x50: i32
  if (data?.StretchTapsX !== undefined) view.setInt32(80, Number(data.StretchTapsX), true);
  // 0x54: i32
  if (data?.StretchTapsY !== undefined) view.setInt32(84, Number(data.StretchTapsY), true);
  // 0x58: i32
  if (data?.ShrinkTapsX !== undefined) view.setInt32(88, Number(data.ShrinkTapsX), true);
  // 0x5c: i32
  if (data?.ShrinkTapsY !== undefined) view.setInt32(92, Number(data.ShrinkTapsY), true);
  // 0x60: i64
  if (data?.MinFrameInterval !== undefined) view.setBigInt64(96, BigInt(data.MinFrameInterval), true);
  // 0x68: i64
  if (data?.MaxFrameInterval !== undefined) view.setBigInt64(104, BigInt(data.MaxFrameInterval), true);
  // 0x70: i32
  if (data?.MinBitsPerSecond !== undefined) view.setInt32(112, Number(data.MinBitsPerSecond), true);
  // 0x74: i32
  if (data?.MaxBitsPerSecond !== undefined) view.setInt32(116, Number(data.MaxBitsPerSecond), true);
  return buf;
}

export class VIDEO_STREAM_CONFIG_CAPSView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get guid(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(0, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x08: u32
  get VideoStandard(): number {
    return this.view.getUint32(8, true);
  }

  // 0x0c: pad4

  // 0x10: pointer
  get InputSize(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(16, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x18: pointer
  get MinCroppingSize(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(24, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x20: pointer
  get MaxCroppingSize(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(32, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x28: i32
  get CropGranularityX(): number {
    return this.view.getInt32(40, true);
  }

  // 0x2c: i32
  get CropGranularityY(): number {
    return this.view.getInt32(44, true);
  }

  // 0x30: i32
  get CropAlignX(): number {
    return this.view.getInt32(48, true);
  }

  // 0x34: i32
  get CropAlignY(): number {
    return this.view.getInt32(52, true);
  }

  // 0x38: pointer
  get MinOutputSize(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(56, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x40: pointer
  get MaxOutputSize(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(64, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x48: i32
  get OutputGranularityX(): number {
    return this.view.getInt32(72, true);
  }

  // 0x4c: i32
  get OutputGranularityY(): number {
    return this.view.getInt32(76, true);
  }

  // 0x50: i32
  get StretchTapsX(): number {
    return this.view.getInt32(80, true);
  }

  // 0x54: i32
  get StretchTapsY(): number {
    return this.view.getInt32(84, true);
  }

  // 0x58: i32
  get ShrinkTapsX(): number {
    return this.view.getInt32(88, true);
  }

  // 0x5c: i32
  get ShrinkTapsY(): number {
    return this.view.getInt32(92, true);
  }

  // 0x60: i64
  get MinFrameInterval(): Deno.PointerValue {
    return Number(this.view.getBigInt64(96, true));
  }

  // 0x68: i64
  get MaxFrameInterval(): Deno.PointerValue {
    return Number(this.view.getBigInt64(104, true));
  }

  // 0x70: i32
  get MinBitsPerSecond(): number {
    return this.view.getInt32(112, true);
  }

  // 0x74: i32
  get MaxBitsPerSecond(): number {
    return this.view.getInt32(116, true);
  }

  // 0x00: pointer
  set guid(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(0, BigInt(util.toPointer(value)), true);
  }

  // 0x08: u32
  set VideoStandard(value: number) {
    this.view.setUint32(8, value, true);
  }

  // 0x0c: pad4

  // 0x10: pointer
  set InputSize(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(16, BigInt(util.toPointer(value)), true);
  }

  // 0x18: pointer
  set MinCroppingSize(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(24, BigInt(util.toPointer(value)), true);
  }

  // 0x20: pointer
  set MaxCroppingSize(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(32, BigInt(util.toPointer(value)), true);
  }

  // 0x28: i32
  set CropGranularityX(value: number) {
    this.view.setInt32(40, value, true);
  }

  // 0x2c: i32
  set CropGranularityY(value: number) {
    this.view.setInt32(44, value, true);
  }

  // 0x30: i32
  set CropAlignX(value: number) {
    this.view.setInt32(48, value, true);
  }

  // 0x34: i32
  set CropAlignY(value: number) {
    this.view.setInt32(52, value, true);
  }

  // 0x38: pointer
  set MinOutputSize(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(56, BigInt(util.toPointer(value)), true);
  }

  // 0x40: pointer
  set MaxOutputSize(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(64, BigInt(util.toPointer(value)), true);
  }

  // 0x48: i32
  set OutputGranularityX(value: number) {
    this.view.setInt32(72, value, true);
  }

  // 0x4c: i32
  set OutputGranularityY(value: number) {
    this.view.setInt32(76, value, true);
  }

  // 0x50: i32
  set StretchTapsX(value: number) {
    this.view.setInt32(80, value, true);
  }

  // 0x54: i32
  set StretchTapsY(value: number) {
    this.view.setInt32(84, value, true);
  }

  // 0x58: i32
  set ShrinkTapsX(value: number) {
    this.view.setInt32(88, value, true);
  }

  // 0x5c: i32
  set ShrinkTapsY(value: number) {
    this.view.setInt32(92, value, true);
  }

  // 0x60: i64
  set MinFrameInterval(value: Deno.PointerValue) {
    this.view.setBigInt64(96, BigInt(value), true);
  }

  // 0x68: i64
  set MaxFrameInterval(value: Deno.PointerValue) {
    this.view.setBigInt64(104, BigInt(value), true);
  }

  // 0x70: i32
  set MinBitsPerSecond(value: number) {
    this.view.setInt32(112, value, true);
  }

  // 0x74: i32
  set MaxBitsPerSecond(value: number) {
    this.view.setInt32(116, value, true);
  }
}

/**
 * Windows.Win32.Media.DirectShow.AUDIO_STREAM_CONFIG_CAPS (size: 48)
 */
export interface AUDIO_STREAM_CONFIG_CAPS {
  /** System.Guid */
  guid: Uint8Array | Deno.PointerValue | null;
  /** u32 */
  MinimumChannels: number;
  /** u32 */
  MaximumChannels: number;
  /** u32 */
  ChannelsGranularity: number;
  /** u32 */
  MinimumBitsPerSample: number;
  /** u32 */
  MaximumBitsPerSample: number;
  /** u32 */
  BitsPerSampleGranularity: number;
  /** u32 */
  MinimumSampleFrequency: number;
  /** u32 */
  MaximumSampleFrequency: number;
  /** u32 */
  SampleFrequencyGranularity: number;
}

export const sizeofAUDIO_STREAM_CONFIG_CAPS = 48;

export function allocAUDIO_STREAM_CONFIG_CAPS(data?: Partial<AUDIO_STREAM_CONFIG_CAPS>): Uint8Array {
  const buf = new Uint8Array(sizeofAUDIO_STREAM_CONFIG_CAPS);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.guid !== undefined) view.setBigUint64(0, data.guid === null ? 0n : BigInt(util.toPointer(data.guid)), true);
  // 0x08: u32
  if (data?.MinimumChannels !== undefined) view.setUint32(8, Number(data.MinimumChannels), true);
  // 0x0c: u32
  if (data?.MaximumChannels !== undefined) view.setUint32(12, Number(data.MaximumChannels), true);
  // 0x10: u32
  if (data?.ChannelsGranularity !== undefined) view.setUint32(16, Number(data.ChannelsGranularity), true);
  // 0x14: u32
  if (data?.MinimumBitsPerSample !== undefined) view.setUint32(20, Number(data.MinimumBitsPerSample), true);
  // 0x18: u32
  if (data?.MaximumBitsPerSample !== undefined) view.setUint32(24, Number(data.MaximumBitsPerSample), true);
  // 0x1c: u32
  if (data?.BitsPerSampleGranularity !== undefined) view.setUint32(28, Number(data.BitsPerSampleGranularity), true);
  // 0x20: u32
  if (data?.MinimumSampleFrequency !== undefined) view.setUint32(32, Number(data.MinimumSampleFrequency), true);
  // 0x24: u32
  if (data?.MaximumSampleFrequency !== undefined) view.setUint32(36, Number(data.MaximumSampleFrequency), true);
  // 0x28: u32
  if (data?.SampleFrequencyGranularity !== undefined) view.setUint32(40, Number(data.SampleFrequencyGranularity), true);
  // 0x2c: pad4
  return buf;
}

export class AUDIO_STREAM_CONFIG_CAPSView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get guid(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(0, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x08: u32
  get MinimumChannels(): number {
    return this.view.getUint32(8, true);
  }

  // 0x0c: u32
  get MaximumChannels(): number {
    return this.view.getUint32(12, true);
  }

  // 0x10: u32
  get ChannelsGranularity(): number {
    return this.view.getUint32(16, true);
  }

  // 0x14: u32
  get MinimumBitsPerSample(): number {
    return this.view.getUint32(20, true);
  }

  // 0x18: u32
  get MaximumBitsPerSample(): number {
    return this.view.getUint32(24, true);
  }

  // 0x1c: u32
  get BitsPerSampleGranularity(): number {
    return this.view.getUint32(28, true);
  }

  // 0x20: u32
  get MinimumSampleFrequency(): number {
    return this.view.getUint32(32, true);
  }

  // 0x24: u32
  get MaximumSampleFrequency(): number {
    return this.view.getUint32(36, true);
  }

  // 0x28: u32
  get SampleFrequencyGranularity(): number {
    return this.view.getUint32(40, true);
  }

  // 0x2c: pad4

  // 0x00: pointer
  set guid(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(0, BigInt(util.toPointer(value)), true);
  }

  // 0x08: u32
  set MinimumChannels(value: number) {
    this.view.setUint32(8, value, true);
  }

  // 0x0c: u32
  set MaximumChannels(value: number) {
    this.view.setUint32(12, value, true);
  }

  // 0x10: u32
  set ChannelsGranularity(value: number) {
    this.view.setUint32(16, value, true);
  }

  // 0x14: u32
  set MinimumBitsPerSample(value: number) {
    this.view.setUint32(20, value, true);
  }

  // 0x18: u32
  set MaximumBitsPerSample(value: number) {
    this.view.setUint32(24, value, true);
  }

  // 0x1c: u32
  set BitsPerSampleGranularity(value: number) {
    this.view.setUint32(28, value, true);
  }

  // 0x20: u32
  set MinimumSampleFrequency(value: number) {
    this.view.setUint32(32, value, true);
  }

  // 0x24: u32
  set MaximumSampleFrequency(value: number) {
    this.view.setUint32(36, value, true);
  }

  // 0x28: u32
  set SampleFrequencyGranularity(value: number) {
    this.view.setUint32(40, value, true);
  }

  // 0x2c: pad4
}

/**
 * Windows.Win32.Media.DirectShow.DVINFO (size: 32)
 */
export interface DVINFO {
  /** u32 */
  dwDVAAuxSrc: number;
  /** u32 */
  dwDVAAuxCtl: number;
  /** u32 */
  dwDVAAuxSrc1: number;
  /** u32 */
  dwDVAAuxCtl1: number;
  /** u32 */
  dwDVVAuxSrc: number;
  /** u32 */
  dwDVVAuxCtl: number;
  /** array */
  dwDVReserved: Deno.PointerValue | null;
}

export const sizeofDVINFO = 32;

export function allocDVINFO(data?: Partial<DVINFO>): Uint8Array {
  const buf = new Uint8Array(sizeofDVINFO);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.dwDVAAuxSrc !== undefined) view.setUint32(0, Number(data.dwDVAAuxSrc), true);
  // 0x04: u32
  if (data?.dwDVAAuxCtl !== undefined) view.setUint32(4, Number(data.dwDVAAuxCtl), true);
  // 0x08: u32
  if (data?.dwDVAAuxSrc1 !== undefined) view.setUint32(8, Number(data.dwDVAAuxSrc1), true);
  // 0x0c: u32
  if (data?.dwDVAAuxCtl1 !== undefined) view.setUint32(12, Number(data.dwDVAAuxCtl1), true);
  // 0x10: u32
  if (data?.dwDVVAuxSrc !== undefined) view.setUint32(16, Number(data.dwDVVAuxSrc), true);
  // 0x14: u32
  if (data?.dwDVVAuxCtl !== undefined) view.setUint32(20, Number(data.dwDVVAuxCtl), true);
  // 0x18: pointer
  if (data?.dwDVReserved !== undefined) view.setBigUint64(24, data.dwDVReserved === null ? 0n : BigInt(util.toPointer(data.dwDVReserved)), true);
  return buf;
}

export class DVINFOView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get dwDVAAuxSrc(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: u32
  get dwDVAAuxCtl(): number {
    return this.view.getUint32(4, true);
  }

  // 0x08: u32
  get dwDVAAuxSrc1(): number {
    return this.view.getUint32(8, true);
  }

  // 0x0c: u32
  get dwDVAAuxCtl1(): number {
    return this.view.getUint32(12, true);
  }

  // 0x10: u32
  get dwDVVAuxSrc(): number {
    return this.view.getUint32(16, true);
  }

  // 0x14: u32
  get dwDVVAuxCtl(): number {
    return this.view.getUint32(20, true);
  }

  // 0x18: pointer
  get dwDVReserved(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(24, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: u32
  set dwDVAAuxSrc(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: u32
  set dwDVAAuxCtl(value: number) {
    this.view.setUint32(4, value, true);
  }

  // 0x08: u32
  set dwDVAAuxSrc1(value: number) {
    this.view.setUint32(8, value, true);
  }

  // 0x0c: u32
  set dwDVAAuxCtl1(value: number) {
    this.view.setUint32(12, value, true);
  }

  // 0x10: u32
  set dwDVVAuxSrc(value: number) {
    this.view.setUint32(16, value, true);
  }

  // 0x14: u32
  set dwDVVAuxCtl(value: number) {
    this.view.setUint32(20, value, true);
  }

  // 0x18: pointer
  set dwDVReserved(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(24, BigInt(util.toPointer(value)), true);
  }
}

/**
 * Windows.Win32.Media.DirectShow.STREAM_ID_MAP (size: 16)
 */
export interface STREAM_ID_MAP {
  /** u32 */
  stream_id: number;
  /** u32 */
  dwMediaSampleContent: number;
  /** u32 */
  ulSubstreamFilterValue: number;
  /** i32 */
  iDataOffset: number;
}

export const sizeofSTREAM_ID_MAP = 16;

export function allocSTREAM_ID_MAP(data?: Partial<STREAM_ID_MAP>): Uint8Array {
  const buf = new Uint8Array(sizeofSTREAM_ID_MAP);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.stream_id !== undefined) view.setUint32(0, Number(data.stream_id), true);
  // 0x04: u32
  if (data?.dwMediaSampleContent !== undefined) view.setUint32(4, Number(data.dwMediaSampleContent), true);
  // 0x08: u32
  if (data?.ulSubstreamFilterValue !== undefined) view.setUint32(8, Number(data.ulSubstreamFilterValue), true);
  // 0x0c: i32
  if (data?.iDataOffset !== undefined) view.setInt32(12, Number(data.iDataOffset), true);
  return buf;
}

export class STREAM_ID_MAPView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get stream_id(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: u32
  get dwMediaSampleContent(): number {
    return this.view.getUint32(4, true);
  }

  // 0x08: u32
  get ulSubstreamFilterValue(): number {
    return this.view.getUint32(8, true);
  }

  // 0x0c: i32
  get iDataOffset(): number {
    return this.view.getInt32(12, true);
  }

  // 0x00: u32
  set stream_id(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: u32
  set dwMediaSampleContent(value: number) {
    this.view.setUint32(4, value, true);
  }

  // 0x08: u32
  set ulSubstreamFilterValue(value: number) {
    this.view.setUint32(8, value, true);
  }

  // 0x0c: i32
  set iDataOffset(value: number) {
    this.view.setInt32(12, value, true);
  }
}

/**
 * Windows.Win32.Media.DirectShow.AMCOPPSignature (size: 8)
 */
export interface AMCOPPSignature {
  /** array */
  Signature: Deno.PointerValue | null;
}

export const sizeofAMCOPPSignature = 8;

export function allocAMCOPPSignature(data?: Partial<AMCOPPSignature>): Uint8Array {
  const buf = new Uint8Array(sizeofAMCOPPSignature);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.Signature !== undefined) view.setBigUint64(0, data.Signature === null ? 0n : BigInt(util.toPointer(data.Signature)), true);
  return buf;
}

export class AMCOPPSignatureView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get Signature(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(0, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: pointer
  set Signature(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(0, BigInt(util.toPointer(value)), true);
  }
}

/**
 * Windows.Win32.Media.DirectShow.AMCOPPCommand (size: 32)
 */
export interface AMCOPPCommand {
  /** System.Guid */
  macKDI: Uint8Array | Deno.PointerValue | null;
  /** System.Guid */
  guidCommandID: Uint8Array | Deno.PointerValue | null;
  /** u32 */
  dwSequence: number;
  /** u32 */
  cbSizeData: number;
  /** array */
  CommandData: Deno.PointerValue | null;
}

export const sizeofAMCOPPCommand = 32;

export function allocAMCOPPCommand(data?: Partial<AMCOPPCommand>): Uint8Array {
  const buf = new Uint8Array(sizeofAMCOPPCommand);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.macKDI !== undefined) view.setBigUint64(0, data.macKDI === null ? 0n : BigInt(util.toPointer(data.macKDI)), true);
  // 0x08: pointer
  if (data?.guidCommandID !== undefined) view.setBigUint64(8, data.guidCommandID === null ? 0n : BigInt(util.toPointer(data.guidCommandID)), true);
  // 0x10: u32
  if (data?.dwSequence !== undefined) view.setUint32(16, Number(data.dwSequence), true);
  // 0x14: u32
  if (data?.cbSizeData !== undefined) view.setUint32(20, Number(data.cbSizeData), true);
  // 0x18: pointer
  if (data?.CommandData !== undefined) view.setBigUint64(24, data.CommandData === null ? 0n : BigInt(util.toPointer(data.CommandData)), true);
  return buf;
}

export class AMCOPPCommandView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get macKDI(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(0, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x08: pointer
  get guidCommandID(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(8, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x10: u32
  get dwSequence(): number {
    return this.view.getUint32(16, true);
  }

  // 0x14: u32
  get cbSizeData(): number {
    return this.view.getUint32(20, true);
  }

  // 0x18: pointer
  get CommandData(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(24, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: pointer
  set macKDI(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(0, BigInt(util.toPointer(value)), true);
  }

  // 0x08: pointer
  set guidCommandID(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(8, BigInt(util.toPointer(value)), true);
  }

  // 0x10: u32
  set dwSequence(value: number) {
    this.view.setUint32(16, value, true);
  }

  // 0x14: u32
  set cbSizeData(value: number) {
    this.view.setUint32(20, value, true);
  }

  // 0x18: pointer
  set CommandData(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(24, BigInt(util.toPointer(value)), true);
  }
}

/**
 * Windows.Win32.Media.DirectShow.AMCOPPStatusInput (size: 32)
 */
export interface AMCOPPStatusInput {
  /** System.Guid */
  rApp: Uint8Array | Deno.PointerValue | null;
  /** System.Guid */
  guidStatusRequestID: Uint8Array | Deno.PointerValue | null;
  /** u32 */
  dwSequence: number;
  /** u32 */
  cbSizeData: number;
  /** array */
  StatusData: Deno.PointerValue | null;
}

export const sizeofAMCOPPStatusInput = 32;

export function allocAMCOPPStatusInput(data?: Partial<AMCOPPStatusInput>): Uint8Array {
  const buf = new Uint8Array(sizeofAMCOPPStatusInput);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.rApp !== undefined) view.setBigUint64(0, data.rApp === null ? 0n : BigInt(util.toPointer(data.rApp)), true);
  // 0x08: pointer
  if (data?.guidStatusRequestID !== undefined) view.setBigUint64(8, data.guidStatusRequestID === null ? 0n : BigInt(util.toPointer(data.guidStatusRequestID)), true);
  // 0x10: u32
  if (data?.dwSequence !== undefined) view.setUint32(16, Number(data.dwSequence), true);
  // 0x14: u32
  if (data?.cbSizeData !== undefined) view.setUint32(20, Number(data.cbSizeData), true);
  // 0x18: pointer
  if (data?.StatusData !== undefined) view.setBigUint64(24, data.StatusData === null ? 0n : BigInt(util.toPointer(data.StatusData)), true);
  return buf;
}

export class AMCOPPStatusInputView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get rApp(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(0, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x08: pointer
  get guidStatusRequestID(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(8, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x10: u32
  get dwSequence(): number {
    return this.view.getUint32(16, true);
  }

  // 0x14: u32
  get cbSizeData(): number {
    return this.view.getUint32(20, true);
  }

  // 0x18: pointer
  get StatusData(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(24, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: pointer
  set rApp(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(0, BigInt(util.toPointer(value)), true);
  }

  // 0x08: pointer
  set guidStatusRequestID(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(8, BigInt(util.toPointer(value)), true);
  }

  // 0x10: u32
  set dwSequence(value: number) {
    this.view.setUint32(16, value, true);
  }

  // 0x14: u32
  set cbSizeData(value: number) {
    this.view.setUint32(20, value, true);
  }

  // 0x18: pointer
  set StatusData(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(24, BigInt(util.toPointer(value)), true);
  }
}

/**
 * Windows.Win32.Media.DirectShow.AMCOPPStatusOutput (size: 24)
 */
export interface AMCOPPStatusOutput {
  /** System.Guid */
  macKDI: Uint8Array | Deno.PointerValue | null;
  /** u32 */
  cbSizeData: number;
  /** array */
  COPPStatus: Deno.PointerValue | null;
}

export const sizeofAMCOPPStatusOutput = 24;

export function allocAMCOPPStatusOutput(data?: Partial<AMCOPPStatusOutput>): Uint8Array {
  const buf = new Uint8Array(sizeofAMCOPPStatusOutput);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.macKDI !== undefined) view.setBigUint64(0, data.macKDI === null ? 0n : BigInt(util.toPointer(data.macKDI)), true);
  // 0x08: u32
  if (data?.cbSizeData !== undefined) view.setUint32(8, Number(data.cbSizeData), true);
  // 0x0c: pad4
  // 0x10: pointer
  if (data?.COPPStatus !== undefined) view.setBigUint64(16, data.COPPStatus === null ? 0n : BigInt(util.toPointer(data.COPPStatus)), true);
  return buf;
}

export class AMCOPPStatusOutputView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get macKDI(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(0, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x08: u32
  get cbSizeData(): number {
    return this.view.getUint32(8, true);
  }

  // 0x0c: pad4

  // 0x10: pointer
  get COPPStatus(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(16, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: pointer
  set macKDI(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(0, BigInt(util.toPointer(value)), true);
  }

  // 0x08: u32
  set cbSizeData(value: number) {
    this.view.setUint32(8, value, true);
  }

  // 0x0c: pad4

  // 0x10: pointer
  set COPPStatus(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(16, BigInt(util.toPointer(value)), true);
  }
}

/**
 * Windows.Win32.Media.DirectShow.VMRPRESENTATIONINFO (size: 64)
 */
export interface VMRPRESENTATIONINFO {
  /** u32 */
  dwFlags: number;
  /** Windows.Win32.Graphics.DirectDraw.IDirectDrawSurface7 */
  lpSurf: Uint8Array | Deno.PointerValue | null;
  /** i64 */
  rtStart: Deno.PointerValue;
  /** i64 */
  rtEnd: Deno.PointerValue;
  /** Windows.Win32.Foundation.SIZE */
  szAspectRatio: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Foundation.RECT */
  rcSrc: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Foundation.RECT */
  rcDst: Uint8Array | Deno.PointerValue | null;
  /** u32 */
  dwTypeSpecificFlags: number;
  /** u32 */
  dwInterlaceFlags: number;
}

export const sizeofVMRPRESENTATIONINFO = 64;

export function allocVMRPRESENTATIONINFO(data?: Partial<VMRPRESENTATIONINFO>): Uint8Array {
  const buf = new Uint8Array(sizeofVMRPRESENTATIONINFO);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.dwFlags !== undefined) view.setUint32(0, Number(data.dwFlags), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.lpSurf !== undefined) view.setBigUint64(8, data.lpSurf === null ? 0n : BigInt(util.toPointer(data.lpSurf)), true);
  // 0x10: i64
  if (data?.rtStart !== undefined) view.setBigInt64(16, BigInt(data.rtStart), true);
  // 0x18: i64
  if (data?.rtEnd !== undefined) view.setBigInt64(24, BigInt(data.rtEnd), true);
  // 0x20: pointer
  if (data?.szAspectRatio !== undefined) view.setBigUint64(32, data.szAspectRatio === null ? 0n : BigInt(util.toPointer(data.szAspectRatio)), true);
  // 0x28: pointer
  if (data?.rcSrc !== undefined) view.setBigUint64(40, data.rcSrc === null ? 0n : BigInt(util.toPointer(data.rcSrc)), true);
  // 0x30: pointer
  if (data?.rcDst !== undefined) view.setBigUint64(48, data.rcDst === null ? 0n : BigInt(util.toPointer(data.rcDst)), true);
  // 0x38: u32
  if (data?.dwTypeSpecificFlags !== undefined) view.setUint32(56, Number(data.dwTypeSpecificFlags), true);
  // 0x3c: u32
  if (data?.dwInterlaceFlags !== undefined) view.setUint32(60, Number(data.dwInterlaceFlags), true);
  return buf;
}

export class VMRPRESENTATIONINFOView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get dwFlags(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  get lpSurf(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(8, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x10: i64
  get rtStart(): Deno.PointerValue {
    return Number(this.view.getBigInt64(16, true));
  }

  // 0x18: i64
  get rtEnd(): Deno.PointerValue {
    return Number(this.view.getBigInt64(24, true));
  }

  // 0x20: pointer
  get szAspectRatio(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(32, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x28: pointer
  get rcSrc(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(40, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x30: pointer
  get rcDst(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(48, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x38: u32
  get dwTypeSpecificFlags(): number {
    return this.view.getUint32(56, true);
  }

  // 0x3c: u32
  get dwInterlaceFlags(): number {
    return this.view.getUint32(60, true);
  }

  // 0x00: u32
  set dwFlags(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  set lpSurf(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(8, BigInt(util.toPointer(value)), true);
  }

  // 0x10: i64
  set rtStart(value: Deno.PointerValue) {
    this.view.setBigInt64(16, BigInt(value), true);
  }

  // 0x18: i64
  set rtEnd(value: Deno.PointerValue) {
    this.view.setBigInt64(24, BigInt(value), true);
  }

  // 0x20: pointer
  set szAspectRatio(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(32, BigInt(util.toPointer(value)), true);
  }

  // 0x28: pointer
  set rcSrc(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(40, BigInt(util.toPointer(value)), true);
  }

  // 0x30: pointer
  set rcDst(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(48, BigInt(util.toPointer(value)), true);
  }

  // 0x38: u32
  set dwTypeSpecificFlags(value: number) {
    this.view.setUint32(56, value, true);
  }

  // 0x3c: u32
  set dwInterlaceFlags(value: number) {
    this.view.setUint32(60, value, true);
  }
}

/**
 * Windows.Win32.Media.DirectShow.VMRALLOCATIONINFO (size: 56)
 */
export interface VMRALLOCATIONINFO {
  /** u32 */
  dwFlags: number;
  /** ptr */
  lpHdr: Deno.PointerValue | Uint8Array | null;
  /** ptr */
  lpPixFmt: Deno.PointerValue | Uint8Array | null;
  /** Windows.Win32.Foundation.SIZE */
  szAspectRatio: Uint8Array | Deno.PointerValue | null;
  /** u32 */
  dwMinBuffers: number;
  /** u32 */
  dwMaxBuffers: number;
  /** u32 */
  dwInterlaceFlags: number;
  /** Windows.Win32.Foundation.SIZE */
  szNativeSize: Uint8Array | Deno.PointerValue | null;
}

export const sizeofVMRALLOCATIONINFO = 56;

export function allocVMRALLOCATIONINFO(data?: Partial<VMRALLOCATIONINFO>): Uint8Array {
  const buf = new Uint8Array(sizeofVMRALLOCATIONINFO);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.dwFlags !== undefined) view.setUint32(0, Number(data.dwFlags), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.lpHdr !== undefined) view.setBigUint64(8, data.lpHdr === null ? 0n : BigInt(util.toPointer(data.lpHdr)), true);
  // 0x10: pointer
  if (data?.lpPixFmt !== undefined) view.setBigUint64(16, data.lpPixFmt === null ? 0n : BigInt(util.toPointer(data.lpPixFmt)), true);
  // 0x18: pointer
  if (data?.szAspectRatio !== undefined) view.setBigUint64(24, data.szAspectRatio === null ? 0n : BigInt(util.toPointer(data.szAspectRatio)), true);
  // 0x20: u32
  if (data?.dwMinBuffers !== undefined) view.setUint32(32, Number(data.dwMinBuffers), true);
  // 0x24: u32
  if (data?.dwMaxBuffers !== undefined) view.setUint32(36, Number(data.dwMaxBuffers), true);
  // 0x28: u32
  if (data?.dwInterlaceFlags !== undefined) view.setUint32(40, Number(data.dwInterlaceFlags), true);
  // 0x2c: pad4
  // 0x30: pointer
  if (data?.szNativeSize !== undefined) view.setBigUint64(48, data.szNativeSize === null ? 0n : BigInt(util.toPointer(data.szNativeSize)), true);
  return buf;
}

export class VMRALLOCATIONINFOView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get dwFlags(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  get lpHdr(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(8, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x10: pointer
  get lpPixFmt(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(16, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x18: pointer
  get szAspectRatio(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(24, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x20: u32
  get dwMinBuffers(): number {
    return this.view.getUint32(32, true);
  }

  // 0x24: u32
  get dwMaxBuffers(): number {
    return this.view.getUint32(36, true);
  }

  // 0x28: u32
  get dwInterlaceFlags(): number {
    return this.view.getUint32(40, true);
  }

  // 0x2c: pad4

  // 0x30: pointer
  get szNativeSize(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(48, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: u32
  set dwFlags(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  set lpHdr(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(8, BigInt(util.toPointer(value)), true);
  }

  // 0x10: pointer
  set lpPixFmt(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(16, BigInt(util.toPointer(value)), true);
  }

  // 0x18: pointer
  set szAspectRatio(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(24, BigInt(util.toPointer(value)), true);
  }

  // 0x20: u32
  set dwMinBuffers(value: number) {
    this.view.setUint32(32, value, true);
  }

  // 0x24: u32
  set dwMaxBuffers(value: number) {
    this.view.setUint32(36, value, true);
  }

  // 0x28: u32
  set dwInterlaceFlags(value: number) {
    this.view.setUint32(40, value, true);
  }

  // 0x2c: pad4

  // 0x30: pointer
  set szNativeSize(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(48, BigInt(util.toPointer(value)), true);
  }
}

/**
 * Windows.Win32.Media.DirectShow.NORMALIZEDRECT (size: 16)
 */
export interface NORMALIZEDRECT {
  /** f32 */
  left: number;
  /** f32 */
  top: number;
  /** f32 */
  right: number;
  /** f32 */
  bottom: number;
}

export const sizeofNORMALIZEDRECT = 16;

export function allocNORMALIZEDRECT(data?: Partial<NORMALIZEDRECT>): Uint8Array {
  const buf = new Uint8Array(sizeofNORMALIZEDRECT);
  const view = new DataView(buf.buffer);
  // 0x00: f32
  if (data?.left !== undefined) view.setFloat32(0, Number(data.left), true);
  // 0x04: f32
  if (data?.top !== undefined) view.setFloat32(4, Number(data.top), true);
  // 0x08: f32
  if (data?.right !== undefined) view.setFloat32(8, Number(data.right), true);
  // 0x0c: f32
  if (data?.bottom !== undefined) view.setFloat32(12, Number(data.bottom), true);
  return buf;
}

export class NORMALIZEDRECTView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: f32
  get left(): number {
    return this.view.getFloat32(0, true);
  }

  // 0x04: f32
  get top(): number {
    return this.view.getFloat32(4, true);
  }

  // 0x08: f32
  get right(): number {
    return this.view.getFloat32(8, true);
  }

  // 0x0c: f32
  get bottom(): number {
    return this.view.getFloat32(12, true);
  }

  // 0x00: f32
  set left(value: number) {
    this.view.setFloat32(0, value, true);
  }

  // 0x04: f32
  set top(value: number) {
    this.view.setFloat32(4, value, true);
  }

  // 0x08: f32
  set right(value: number) {
    this.view.setFloat32(8, value, true);
  }

  // 0x0c: f32
  set bottom(value: number) {
    this.view.setFloat32(12, value, true);
  }
}

/**
 * Windows.Win32.Media.DirectShow.VMRGUID (size: 16)
 */
export interface VMRGUID {
  /** ptr */
  pGUID: Deno.PointerValue | Uint8Array | null;
  /** System.Guid */
  GUID: Uint8Array | Deno.PointerValue | null;
}

export const sizeofVMRGUID = 16;

export function allocVMRGUID(data?: Partial<VMRGUID>): Uint8Array {
  const buf = new Uint8Array(sizeofVMRGUID);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.pGUID !== undefined) view.setBigUint64(0, data.pGUID === null ? 0n : BigInt(util.toPointer(data.pGUID)), true);
  // 0x08: pointer
  if (data?.GUID !== undefined) view.setBigUint64(8, data.GUID === null ? 0n : BigInt(util.toPointer(data.GUID)), true);
  return buf;
}

export class VMRGUIDView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get pGUID(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(0, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x08: pointer
  get GUID(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(8, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: pointer
  set pGUID(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(0, BigInt(util.toPointer(value)), true);
  }

  // 0x08: pointer
  set GUID(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(8, BigInt(util.toPointer(value)), true);
  }
}

export type HMONITOR = Deno.PointerValue;

/**
 * _u_e__Struct (size: 16)
 */
export interface _u_e__Struct {
  /** u32 */
  dwValue: number;
  /** Windows.Win32.Foundation.PWSTR */
  pwszName: string | null | Uint8Array | Uint16Array;
}

export const sizeof_u_e__Struct = 16;

export function alloc_u_e__Struct(data?: Partial<_u_e__Struct>): Uint8Array {
  const buf = new Uint8Array(sizeof_u_e__Struct);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.dwValue !== undefined) view.setUint32(0, Number(data.dwValue), true);
  // 0x04: pad4
  // 0x08: buffer
  if (data?.pwszName !== undefined) {
    (buf as any)._f8 = util.pwstrToFfi(data.pwszName);
    view.setBigUint64(8, (buf as any)._f8 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f8)), true);
  }
  return buf;
}

export class _u_e__StructView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get dwValue(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: pad4

  // 0x08: buffer
  get pwszName(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(8, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: u32
  set dwValue(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: pad4

  // 0x08: buffer
  set pwszName(value: Uint8Array | Deno.PointerValue | null) {
    (this.buf as any)._f8 = value;
    this.view.setBigUint64(8, BigInt(util.toPointer((this.buf as any)._f8)), true);
  }
}

/**
 * Windows.Win32.Foundation.LARGE_INTEGER (size: 24)
 */
export interface LARGE_INTEGER {
  /** _Anonymous_e__Struct */
  Anonymous: Uint8Array | Deno.PointerValue | null;
  /** _u_e__Struct */
  u: Uint8Array | Deno.PointerValue | null;
  /** i64 */
  QuadPart: Deno.PointerValue;
}

export const sizeofLARGE_INTEGER = 24;

export function allocLARGE_INTEGER(data?: Partial<LARGE_INTEGER>): Uint8Array {
  const buf = new Uint8Array(sizeofLARGE_INTEGER);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.Anonymous !== undefined) view.setBigUint64(0, data.Anonymous === null ? 0n : BigInt(util.toPointer(data.Anonymous)), true);
  // 0x08: pointer
  if (data?.u !== undefined) view.setBigUint64(8, data.u === null ? 0n : BigInt(util.toPointer(data.u)), true);
  // 0x10: i64
  if (data?.QuadPart !== undefined) view.setBigInt64(16, BigInt(data.QuadPart), true);
  return buf;
}

export class LARGE_INTEGERView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get Anonymous(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(0, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x08: pointer
  get u(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(8, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x10: i64
  get QuadPart(): Deno.PointerValue {
    return Number(this.view.getBigInt64(16, true));
  }

  // 0x00: pointer
  set Anonymous(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(0, BigInt(util.toPointer(value)), true);
  }

  // 0x08: pointer
  set u(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(8, BigInt(util.toPointer(value)), true);
  }

  // 0x10: i64
  set QuadPart(value: Deno.PointerValue) {
    this.view.setBigInt64(16, BigInt(value), true);
  }
}

/**
 * Windows.Win32.Media.DirectShow.VMRMONITORINFO (size: 72)
 */
export interface VMRMONITORINFO {
  /** Windows.Win32.Media.DirectShow.VMRGUID */
  guid: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Foundation.RECT */
  rcMonitor: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Graphics.Gdi.HMONITOR */
  hMon: Uint8Array | Deno.PointerValue | null;
  /** u32 */
  dwFlags: number;
  /** array */
  szDevice: Deno.PointerValue | null;
  /** array */
  szDescription: Deno.PointerValue | null;
  /** Windows.Win32.Foundation.LARGE_INTEGER */
  liDriverVersion: Uint8Array | Deno.PointerValue | null;
  /** u32 */
  dwVendorId: number;
  /** u32 */
  dwDeviceId: number;
  /** u32 */
  dwSubSysId: number;
  /** u32 */
  dwRevision: number;
}

export const sizeofVMRMONITORINFO = 72;

export function allocVMRMONITORINFO(data?: Partial<VMRMONITORINFO>): Uint8Array {
  const buf = new Uint8Array(sizeofVMRMONITORINFO);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.guid !== undefined) view.setBigUint64(0, data.guid === null ? 0n : BigInt(util.toPointer(data.guid)), true);
  // 0x08: pointer
  if (data?.rcMonitor !== undefined) view.setBigUint64(8, data.rcMonitor === null ? 0n : BigInt(util.toPointer(data.rcMonitor)), true);
  // 0x10: pointer
  if (data?.hMon !== undefined) view.setBigUint64(16, data.hMon === null ? 0n : BigInt(util.toPointer(data.hMon)), true);
  // 0x18: u32
  if (data?.dwFlags !== undefined) view.setUint32(24, Number(data.dwFlags), true);
  // 0x1c: pad4
  // 0x20: pointer
  if (data?.szDevice !== undefined) view.setBigUint64(32, data.szDevice === null ? 0n : BigInt(util.toPointer(data.szDevice)), true);
  // 0x28: pointer
  if (data?.szDescription !== undefined) view.setBigUint64(40, data.szDescription === null ? 0n : BigInt(util.toPointer(data.szDescription)), true);
  // 0x30: pointer
  if (data?.liDriverVersion !== undefined) view.setBigUint64(48, data.liDriverVersion === null ? 0n : BigInt(util.toPointer(data.liDriverVersion)), true);
  // 0x38: u32
  if (data?.dwVendorId !== undefined) view.setUint32(56, Number(data.dwVendorId), true);
  // 0x3c: u32
  if (data?.dwDeviceId !== undefined) view.setUint32(60, Number(data.dwDeviceId), true);
  // 0x40: u32
  if (data?.dwSubSysId !== undefined) view.setUint32(64, Number(data.dwSubSysId), true);
  // 0x44: u32
  if (data?.dwRevision !== undefined) view.setUint32(68, Number(data.dwRevision), true);
  return buf;
}

export class VMRMONITORINFOView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get guid(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(0, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x08: pointer
  get rcMonitor(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(8, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x10: pointer
  get hMon(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(16, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x18: u32
  get dwFlags(): number {
    return this.view.getUint32(24, true);
  }

  // 0x1c: pad4

  // 0x20: pointer
  get szDevice(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(32, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x28: pointer
  get szDescription(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(40, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x30: pointer
  get liDriverVersion(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(48, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x38: u32
  get dwVendorId(): number {
    return this.view.getUint32(56, true);
  }

  // 0x3c: u32
  get dwDeviceId(): number {
    return this.view.getUint32(60, true);
  }

  // 0x40: u32
  get dwSubSysId(): number {
    return this.view.getUint32(64, true);
  }

  // 0x44: u32
  get dwRevision(): number {
    return this.view.getUint32(68, true);
  }

  // 0x00: pointer
  set guid(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(0, BigInt(util.toPointer(value)), true);
  }

  // 0x08: pointer
  set rcMonitor(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(8, BigInt(util.toPointer(value)), true);
  }

  // 0x10: pointer
  set hMon(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(16, BigInt(util.toPointer(value)), true);
  }

  // 0x18: u32
  set dwFlags(value: number) {
    this.view.setUint32(24, value, true);
  }

  // 0x1c: pad4

  // 0x20: pointer
  set szDevice(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(32, BigInt(util.toPointer(value)), true);
  }

  // 0x28: pointer
  set szDescription(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(40, BigInt(util.toPointer(value)), true);
  }

  // 0x30: pointer
  set liDriverVersion(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(48, BigInt(util.toPointer(value)), true);
  }

  // 0x38: u32
  set dwVendorId(value: number) {
    this.view.setUint32(56, value, true);
  }

  // 0x3c: u32
  set dwDeviceId(value: number) {
    this.view.setUint32(60, value, true);
  }

  // 0x40: u32
  set dwSubSysId(value: number) {
    this.view.setUint32(64, value, true);
  }

  // 0x44: u32
  set dwRevision(value: number) {
    this.view.setUint32(68, value, true);
  }
}

/**
 * Windows.Win32.Media.DirectShow.VMRFrequency (size: 8)
 */
export interface VMRFrequency {
  /** u32 */
  dwNumerator: number;
  /** u32 */
  dwDenominator: number;
}

export const sizeofVMRFrequency = 8;

export function allocVMRFrequency(data?: Partial<VMRFrequency>): Uint8Array {
  const buf = new Uint8Array(sizeofVMRFrequency);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.dwNumerator !== undefined) view.setUint32(0, Number(data.dwNumerator), true);
  // 0x04: u32
  if (data?.dwDenominator !== undefined) view.setUint32(4, Number(data.dwDenominator), true);
  return buf;
}

export class VMRFrequencyView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get dwNumerator(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: u32
  get dwDenominator(): number {
    return this.view.getUint32(4, true);
  }

  // 0x00: u32
  set dwNumerator(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: u32
  set dwDenominator(value: number) {
    this.view.setUint32(4, value, true);
  }
}

/**
 * Windows.Win32.Media.DirectShow.VMRVideoDesc (size: 40)
 */
export interface VMRVideoDesc {
  /** u32 */
  dwSize: number;
  /** u32 */
  dwSampleWidth: number;
  /** u32 */
  dwSampleHeight: number;
  /** Windows.Win32.Foundation.BOOL */
  SingleFieldPerSample: boolean;
  /** u32 */
  dwFourCC: number;
  /** Windows.Win32.Media.DirectShow.VMRFrequency */
  InputSampleFreq: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Media.DirectShow.VMRFrequency */
  OutputFrameFreq: Uint8Array | Deno.PointerValue | null;
}

export const sizeofVMRVideoDesc = 40;

export function allocVMRVideoDesc(data?: Partial<VMRVideoDesc>): Uint8Array {
  const buf = new Uint8Array(sizeofVMRVideoDesc);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.dwSize !== undefined) view.setUint32(0, Number(data.dwSize), true);
  // 0x04: u32
  if (data?.dwSampleWidth !== undefined) view.setUint32(4, Number(data.dwSampleWidth), true);
  // 0x08: u32
  if (data?.dwSampleHeight !== undefined) view.setUint32(8, Number(data.dwSampleHeight), true);
  // 0x0c: i32
  if (data?.SingleFieldPerSample !== undefined) view.setInt32(12, Number(data.SingleFieldPerSample), true);
  // 0x10: u32
  if (data?.dwFourCC !== undefined) view.setUint32(16, Number(data.dwFourCC), true);
  // 0x14: pad4
  // 0x18: pointer
  if (data?.InputSampleFreq !== undefined) view.setBigUint64(24, data.InputSampleFreq === null ? 0n : BigInt(util.toPointer(data.InputSampleFreq)), true);
  // 0x20: pointer
  if (data?.OutputFrameFreq !== undefined) view.setBigUint64(32, data.OutputFrameFreq === null ? 0n : BigInt(util.toPointer(data.OutputFrameFreq)), true);
  return buf;
}

export class VMRVideoDescView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get dwSize(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: u32
  get dwSampleWidth(): number {
    return this.view.getUint32(4, true);
  }

  // 0x08: u32
  get dwSampleHeight(): number {
    return this.view.getUint32(8, true);
  }

  // 0x0c: i32
  get SingleFieldPerSample(): number {
    return this.view.getInt32(12, true);
  }

  // 0x10: u32
  get dwFourCC(): number {
    return this.view.getUint32(16, true);
  }

  // 0x14: pad4

  // 0x18: pointer
  get InputSampleFreq(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(24, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x20: pointer
  get OutputFrameFreq(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(32, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: u32
  set dwSize(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: u32
  set dwSampleWidth(value: number) {
    this.view.setUint32(4, value, true);
  }

  // 0x08: u32
  set dwSampleHeight(value: number) {
    this.view.setUint32(8, value, true);
  }

  // 0x0c: i32
  set SingleFieldPerSample(value: number) {
    this.view.setInt32(12, value, true);
  }

  // 0x10: u32
  set dwFourCC(value: number) {
    this.view.setUint32(16, value, true);
  }

  // 0x14: pad4

  // 0x18: pointer
  set InputSampleFreq(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(24, BigInt(util.toPointer(value)), true);
  }

  // 0x20: pointer
  set OutputFrameFreq(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(32, BigInt(util.toPointer(value)), true);
  }
}

/**
 * Windows.Win32.Media.DirectShow.VMRDeinterlaceCaps (size: 24)
 */
export interface VMRDeinterlaceCaps {
  /** u32 */
  dwSize: number;
  /** u32 */
  dwNumPreviousOutputFrames: number;
  /** u32 */
  dwNumForwardRefSamples: number;
  /** u32 */
  dwNumBackwardRefSamples: number;
  /** Windows.Win32.Media.DirectShow.VMRDeinterlaceTech */
  DeinterlaceTechnology: VMRDeinterlaceTech;
}

export const sizeofVMRDeinterlaceCaps = 24;

export function allocVMRDeinterlaceCaps(data?: Partial<VMRDeinterlaceCaps>): Uint8Array {
  const buf = new Uint8Array(sizeofVMRDeinterlaceCaps);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.dwSize !== undefined) view.setUint32(0, Number(data.dwSize), true);
  // 0x04: u32
  if (data?.dwNumPreviousOutputFrames !== undefined) view.setUint32(4, Number(data.dwNumPreviousOutputFrames), true);
  // 0x08: u32
  if (data?.dwNumForwardRefSamples !== undefined) view.setUint32(8, Number(data.dwNumForwardRefSamples), true);
  // 0x0c: u32
  if (data?.dwNumBackwardRefSamples !== undefined) view.setUint32(12, Number(data.dwNumBackwardRefSamples), true);
  // 0x10: i32
  if (data?.DeinterlaceTechnology !== undefined) view.setInt32(16, Number(data.DeinterlaceTechnology), true);
  // 0x14: pad4
  return buf;
}

export class VMRDeinterlaceCapsView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get dwSize(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: u32
  get dwNumPreviousOutputFrames(): number {
    return this.view.getUint32(4, true);
  }

  // 0x08: u32
  get dwNumForwardRefSamples(): number {
    return this.view.getUint32(8, true);
  }

  // 0x0c: u32
  get dwNumBackwardRefSamples(): number {
    return this.view.getUint32(12, true);
  }

  // 0x10: i32
  get DeinterlaceTechnology(): number {
    return this.view.getInt32(16, true);
  }

  // 0x14: pad4

  // 0x00: u32
  set dwSize(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: u32
  set dwNumPreviousOutputFrames(value: number) {
    this.view.setUint32(4, value, true);
  }

  // 0x08: u32
  set dwNumForwardRefSamples(value: number) {
    this.view.setUint32(8, value, true);
  }

  // 0x0c: u32
  set dwNumBackwardRefSamples(value: number) {
    this.view.setUint32(12, value, true);
  }

  // 0x10: i32
  set DeinterlaceTechnology(value: number) {
    this.view.setInt32(16, value, true);
  }

  // 0x14: pad4
}

export type HDC = Deno.PointerValue;

/**
 * Windows.Win32.Media.DirectShow.VMRALPHABITMAP (size: 56)
 */
export interface VMRALPHABITMAP {
  /** u32 */
  dwFlags: number;
  /** Windows.Win32.Graphics.Gdi.HDC */
  hdc: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Graphics.DirectDraw.IDirectDrawSurface7 */
  pDDS: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Foundation.RECT */
  rSrc: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Media.DirectShow.NORMALIZEDRECT */
  rDest: Uint8Array | Deno.PointerValue | null;
  /** f32 */
  fAlpha: number;
  /** Windows.Win32.Foundation.COLORREF */
  clrSrcKey: Uint8Array | Deno.PointerValue | null;
}

export const sizeofVMRALPHABITMAP = 56;

export function allocVMRALPHABITMAP(data?: Partial<VMRALPHABITMAP>): Uint8Array {
  const buf = new Uint8Array(sizeofVMRALPHABITMAP);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.dwFlags !== undefined) view.setUint32(0, Number(data.dwFlags), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.hdc !== undefined) view.setBigUint64(8, data.hdc === null ? 0n : BigInt(util.toPointer(data.hdc)), true);
  // 0x10: pointer
  if (data?.pDDS !== undefined) view.setBigUint64(16, data.pDDS === null ? 0n : BigInt(util.toPointer(data.pDDS)), true);
  // 0x18: pointer
  if (data?.rSrc !== undefined) view.setBigUint64(24, data.rSrc === null ? 0n : BigInt(util.toPointer(data.rSrc)), true);
  // 0x20: pointer
  if (data?.rDest !== undefined) view.setBigUint64(32, data.rDest === null ? 0n : BigInt(util.toPointer(data.rDest)), true);
  // 0x28: f32
  if (data?.fAlpha !== undefined) view.setFloat32(40, Number(data.fAlpha), true);
  // 0x2c: pad4
  // 0x30: pointer
  if (data?.clrSrcKey !== undefined) view.setBigUint64(48, data.clrSrcKey === null ? 0n : BigInt(util.toPointer(data.clrSrcKey)), true);
  return buf;
}

export class VMRALPHABITMAPView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get dwFlags(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  get hdc(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(8, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x10: pointer
  get pDDS(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(16, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x18: pointer
  get rSrc(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(24, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x20: pointer
  get rDest(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(32, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x28: f32
  get fAlpha(): number {
    return this.view.getFloat32(40, true);
  }

  // 0x2c: pad4

  // 0x30: pointer
  get clrSrcKey(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(48, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: u32
  set dwFlags(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  set hdc(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(8, BigInt(util.toPointer(value)), true);
  }

  // 0x10: pointer
  set pDDS(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(16, BigInt(util.toPointer(value)), true);
  }

  // 0x18: pointer
  set rSrc(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(24, BigInt(util.toPointer(value)), true);
  }

  // 0x20: pointer
  set rDest(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(32, BigInt(util.toPointer(value)), true);
  }

  // 0x28: f32
  set fAlpha(value: number) {
    this.view.setFloat32(40, value, true);
  }

  // 0x2c: pad4

  // 0x30: pointer
  set clrSrcKey(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(48, BigInt(util.toPointer(value)), true);
  }
}

/**
 * Windows.Win32.Graphics.DirectDraw.DDCOLORKEY (size: 8)
 */
export interface DDCOLORKEY {
  /** u32 */
  dwColorSpaceLowValue: number;
  /** u32 */
  dwColorSpaceHighValue: number;
}

export const sizeofDDCOLORKEY = 8;

export function allocDDCOLORKEY(data?: Partial<DDCOLORKEY>): Uint8Array {
  const buf = new Uint8Array(sizeofDDCOLORKEY);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.dwColorSpaceLowValue !== undefined) view.setUint32(0, Number(data.dwColorSpaceLowValue), true);
  // 0x04: u32
  if (data?.dwColorSpaceHighValue !== undefined) view.setUint32(4, Number(data.dwColorSpaceHighValue), true);
  return buf;
}

export class DDCOLORKEYView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get dwColorSpaceLowValue(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: u32
  get dwColorSpaceHighValue(): number {
    return this.view.getUint32(4, true);
  }

  // 0x00: u32
  set dwColorSpaceLowValue(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: u32
  set dwColorSpaceHighValue(value: number) {
    this.view.setUint32(4, value, true);
  }
}

/**
 * Windows.Win32.Media.DirectShow.VMRVIDEOSTREAMINFO (size: 40)
 */
export interface VMRVIDEOSTREAMINFO {
  /** Windows.Win32.Graphics.DirectDraw.IDirectDrawSurface7 */
  pddsVideoSurface: Uint8Array | Deno.PointerValue | null;
  /** u32 */
  dwWidth: number;
  /** u32 */
  dwHeight: number;
  /** u32 */
  dwStrmID: number;
  /** f32 */
  fAlpha: number;
  /** Windows.Win32.Graphics.DirectDraw.DDCOLORKEY */
  ddClrKey: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Media.DirectShow.NORMALIZEDRECT */
  rNormal: Uint8Array | Deno.PointerValue | null;
}

export const sizeofVMRVIDEOSTREAMINFO = 40;

export function allocVMRVIDEOSTREAMINFO(data?: Partial<VMRVIDEOSTREAMINFO>): Uint8Array {
  const buf = new Uint8Array(sizeofVMRVIDEOSTREAMINFO);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.pddsVideoSurface !== undefined) view.setBigUint64(0, data.pddsVideoSurface === null ? 0n : BigInt(util.toPointer(data.pddsVideoSurface)), true);
  // 0x08: u32
  if (data?.dwWidth !== undefined) view.setUint32(8, Number(data.dwWidth), true);
  // 0x0c: u32
  if (data?.dwHeight !== undefined) view.setUint32(12, Number(data.dwHeight), true);
  // 0x10: u32
  if (data?.dwStrmID !== undefined) view.setUint32(16, Number(data.dwStrmID), true);
  // 0x14: f32
  if (data?.fAlpha !== undefined) view.setFloat32(20, Number(data.fAlpha), true);
  // 0x18: pointer
  if (data?.ddClrKey !== undefined) view.setBigUint64(24, data.ddClrKey === null ? 0n : BigInt(util.toPointer(data.ddClrKey)), true);
  // 0x20: pointer
  if (data?.rNormal !== undefined) view.setBigUint64(32, data.rNormal === null ? 0n : BigInt(util.toPointer(data.rNormal)), true);
  return buf;
}

export class VMRVIDEOSTREAMINFOView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get pddsVideoSurface(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(0, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x08: u32
  get dwWidth(): number {
    return this.view.getUint32(8, true);
  }

  // 0x0c: u32
  get dwHeight(): number {
    return this.view.getUint32(12, true);
  }

  // 0x10: u32
  get dwStrmID(): number {
    return this.view.getUint32(16, true);
  }

  // 0x14: f32
  get fAlpha(): number {
    return this.view.getFloat32(20, true);
  }

  // 0x18: pointer
  get ddClrKey(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(24, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x20: pointer
  get rNormal(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(32, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: pointer
  set pddsVideoSurface(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(0, BigInt(util.toPointer(value)), true);
  }

  // 0x08: u32
  set dwWidth(value: number) {
    this.view.setUint32(8, value, true);
  }

  // 0x0c: u32
  set dwHeight(value: number) {
    this.view.setUint32(12, value, true);
  }

  // 0x10: u32
  set dwStrmID(value: number) {
    this.view.setUint32(16, value, true);
  }

  // 0x14: f32
  set fAlpha(value: number) {
    this.view.setFloat32(20, value, true);
  }

  // 0x18: pointer
  set ddClrKey(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(24, BigInt(util.toPointer(value)), true);
  }

  // 0x20: pointer
  set rNormal(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(32, BigInt(util.toPointer(value)), true);
  }
}

/**
 * Windows.Win32.Media.DirectShow.DVD_ATR (size: 16)
 */
export interface DVD_ATR {
  /** u32 */
  ulCAT: number;
  /** array */
  pbATRI: Deno.PointerValue | null;
}

export const sizeofDVD_ATR = 16;

export function allocDVD_ATR(data?: Partial<DVD_ATR>): Uint8Array {
  const buf = new Uint8Array(sizeofDVD_ATR);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.ulCAT !== undefined) view.setUint32(0, Number(data.ulCAT), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.pbATRI !== undefined) view.setBigUint64(8, data.pbATRI === null ? 0n : BigInt(util.toPointer(data.pbATRI)), true);
  return buf;
}

export class DVD_ATRView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get ulCAT(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  get pbATRI(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(8, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: u32
  set ulCAT(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  set pbATRI(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(8, BigInt(util.toPointer(value)), true);
  }
}

/**
 * Windows.Win32.Media.DirectShow.DVD_TIMECODE (size: 8)
 */
export interface DVD_TIMECODE {
  /** u32 */
  _bitfield: number;
}

export const sizeofDVD_TIMECODE = 8;

export function allocDVD_TIMECODE(data?: Partial<DVD_TIMECODE>): Uint8Array {
  const buf = new Uint8Array(sizeofDVD_TIMECODE);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?._bitfield !== undefined) view.setUint32(0, Number(data._bitfield), true);
  // 0x04: pad4
  return buf;
}

export class DVD_TIMECODEView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get _bitfield(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: pad4

  // 0x00: u32
  set _bitfield(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: pad4
}

/**
 * Windows.Win32.Media.DirectShow.DVD_HMSF_TIMECODE (size: 8)
 */
export interface DVD_HMSF_TIMECODE {
  /** u8 */
  bHours: number;
  /** u8 */
  bMinutes: number;
  /** u8 */
  bSeconds: number;
  /** u8 */
  bFrames: number;
}

export const sizeofDVD_HMSF_TIMECODE = 8;

export function allocDVD_HMSF_TIMECODE(data?: Partial<DVD_HMSF_TIMECODE>): Uint8Array {
  const buf = new Uint8Array(sizeofDVD_HMSF_TIMECODE);
  const view = new DataView(buf.buffer);
  // 0x00: u8
  if (data?.bHours !== undefined) view.setUint8(0, Number(data.bHours));
  // 0x01: u8
  if (data?.bMinutes !== undefined) view.setUint8(1, Number(data.bMinutes));
  // 0x02: u8
  if (data?.bSeconds !== undefined) view.setUint8(2, Number(data.bSeconds));
  // 0x03: u8
  if (data?.bFrames !== undefined) view.setUint8(3, Number(data.bFrames));
  // 0x04: pad4
  return buf;
}

export class DVD_HMSF_TIMECODEView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u8
  get bHours(): number {
    return this.view.getUint8(0);
  }

  // 0x01: u8
  get bMinutes(): number {
    return this.view.getUint8(1);
  }

  // 0x02: u8
  get bSeconds(): number {
    return this.view.getUint8(2);
  }

  // 0x03: u8
  get bFrames(): number {
    return this.view.getUint8(3);
  }

  // 0x04: pad4

  // 0x00: u8
  set bHours(value: number) {
    this.view.setUint8(0, value);
  }

  // 0x01: u8
  set bMinutes(value: number) {
    this.view.setUint8(1, value);
  }

  // 0x02: u8
  set bSeconds(value: number) {
    this.view.setUint8(2, value);
  }

  // 0x03: u8
  set bFrames(value: number) {
    this.view.setUint8(3, value);
  }

  // 0x04: pad4
}

/**
 * Windows.Win32.Media.DirectShow.DVD_PLAYBACK_LOCATION2 (size: 24)
 */
export interface DVD_PLAYBACK_LOCATION2 {
  /** u32 */
  TitleNum: number;
  /** u32 */
  ChapterNum: number;
  /** Windows.Win32.Media.DirectShow.DVD_HMSF_TIMECODE */
  TimeCode: Uint8Array | Deno.PointerValue | null;
  /** u32 */
  TimeCodeFlags: number;
}

export const sizeofDVD_PLAYBACK_LOCATION2 = 24;

export function allocDVD_PLAYBACK_LOCATION2(data?: Partial<DVD_PLAYBACK_LOCATION2>): Uint8Array {
  const buf = new Uint8Array(sizeofDVD_PLAYBACK_LOCATION2);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.TitleNum !== undefined) view.setUint32(0, Number(data.TitleNum), true);
  // 0x04: u32
  if (data?.ChapterNum !== undefined) view.setUint32(4, Number(data.ChapterNum), true);
  // 0x08: pointer
  if (data?.TimeCode !== undefined) view.setBigUint64(8, data.TimeCode === null ? 0n : BigInt(util.toPointer(data.TimeCode)), true);
  // 0x10: u32
  if (data?.TimeCodeFlags !== undefined) view.setUint32(16, Number(data.TimeCodeFlags), true);
  // 0x14: pad4
  return buf;
}

export class DVD_PLAYBACK_LOCATION2View {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get TitleNum(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: u32
  get ChapterNum(): number {
    return this.view.getUint32(4, true);
  }

  // 0x08: pointer
  get TimeCode(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(8, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x10: u32
  get TimeCodeFlags(): number {
    return this.view.getUint32(16, true);
  }

  // 0x14: pad4

  // 0x00: u32
  set TitleNum(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: u32
  set ChapterNum(value: number) {
    this.view.setUint32(4, value, true);
  }

  // 0x08: pointer
  set TimeCode(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(8, BigInt(util.toPointer(value)), true);
  }

  // 0x10: u32
  set TimeCodeFlags(value: number) {
    this.view.setUint32(16, value, true);
  }

  // 0x14: pad4
}

/**
 * Windows.Win32.Media.DirectShow.DVD_PLAYBACK_LOCATION (size: 16)
 */
export interface DVD_PLAYBACK_LOCATION {
  /** u32 */
  TitleNum: number;
  /** u32 */
  ChapterNum: number;
  /** u32 */
  TimeCode: number;
}

export const sizeofDVD_PLAYBACK_LOCATION = 16;

export function allocDVD_PLAYBACK_LOCATION(data?: Partial<DVD_PLAYBACK_LOCATION>): Uint8Array {
  const buf = new Uint8Array(sizeofDVD_PLAYBACK_LOCATION);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.TitleNum !== undefined) view.setUint32(0, Number(data.TitleNum), true);
  // 0x04: u32
  if (data?.ChapterNum !== undefined) view.setUint32(4, Number(data.ChapterNum), true);
  // 0x08: u32
  if (data?.TimeCode !== undefined) view.setUint32(8, Number(data.TimeCode), true);
  // 0x0c: pad4
  return buf;
}

export class DVD_PLAYBACK_LOCATIONView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get TitleNum(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: u32
  get ChapterNum(): number {
    return this.view.getUint32(4, true);
  }

  // 0x08: u32
  get TimeCode(): number {
    return this.view.getUint32(8, true);
  }

  // 0x0c: pad4

  // 0x00: u32
  set TitleNum(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: u32
  set ChapterNum(value: number) {
    this.view.setUint32(4, value, true);
  }

  // 0x08: u32
  set TimeCode(value: number) {
    this.view.setUint32(8, value, true);
  }

  // 0x0c: pad4
}

/**
 * Windows.Win32.Media.DirectShow.DVD_AudioAttributes (size: 40)
 */
export interface DVD_AudioAttributes {
  /** Windows.Win32.Media.DirectShow.DVD_AUDIO_APPMODE */
  AppMode: DVD_AUDIO_APPMODE;
  /** u8 */
  AppModeData: number;
  /** Windows.Win32.Media.DirectShow.DVD_AUDIO_FORMAT */
  AudioFormat: DVD_AUDIO_FORMAT;
  /** u32 */
  Language: number;
  /** Windows.Win32.Media.DirectShow.DVD_AUDIO_LANG_EXT */
  LanguageExtension: DVD_AUDIO_LANG_EXT;
  /** Windows.Win32.Foundation.BOOL */
  fHasMultichannelInfo: boolean;
  /** u32 */
  dwFrequency: number;
  /** u8 */
  bQuantization: number;
  /** u8 */
  bNumberOfChannels: number;
  /** array */
  dwReserved: Deno.PointerValue | null;
}

export const sizeofDVD_AudioAttributes = 40;

export function allocDVD_AudioAttributes(data?: Partial<DVD_AudioAttributes>): Uint8Array {
  const buf = new Uint8Array(sizeofDVD_AudioAttributes);
  const view = new DataView(buf.buffer);
  // 0x00: i32
  if (data?.AppMode !== undefined) view.setInt32(0, Number(data.AppMode), true);
  // 0x04: u8
  if (data?.AppModeData !== undefined) view.setUint8(4, Number(data.AppModeData));
  // 0x05: i32
  if (data?.AudioFormat !== undefined) view.setInt32(5, Number(data.AudioFormat), true);
  // 0x09: u32
  if (data?.Language !== undefined) view.setUint32(9, Number(data.Language), true);
  // 0x0d: i32
  if (data?.LanguageExtension !== undefined) view.setInt32(13, Number(data.LanguageExtension), true);
  // 0x11: i32
  if (data?.fHasMultichannelInfo !== undefined) view.setInt32(17, Number(data.fHasMultichannelInfo), true);
  // 0x15: u32
  if (data?.dwFrequency !== undefined) view.setUint32(21, Number(data.dwFrequency), true);
  // 0x19: u8
  if (data?.bQuantization !== undefined) view.setUint8(25, Number(data.bQuantization));
  // 0x1a: u8
  if (data?.bNumberOfChannels !== undefined) view.setUint8(26, Number(data.bNumberOfChannels));
  // 0x1b: pad5
  // 0x20: pointer
  if (data?.dwReserved !== undefined) view.setBigUint64(32, data.dwReserved === null ? 0n : BigInt(util.toPointer(data.dwReserved)), true);
  return buf;
}

export class DVD_AudioAttributesView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: i32
  get AppMode(): number {
    return this.view.getInt32(0, true);
  }

  // 0x04: u8
  get AppModeData(): number {
    return this.view.getUint8(4);
  }

  // 0x05: i32
  get AudioFormat(): number {
    return this.view.getInt32(5, true);
  }

  // 0x09: u32
  get Language(): number {
    return this.view.getUint32(9, true);
  }

  // 0x0d: i32
  get LanguageExtension(): number {
    return this.view.getInt32(13, true);
  }

  // 0x11: i32
  get fHasMultichannelInfo(): number {
    return this.view.getInt32(17, true);
  }

  // 0x15: u32
  get dwFrequency(): number {
    return this.view.getUint32(21, true);
  }

  // 0x19: u8
  get bQuantization(): number {
    return this.view.getUint8(25);
  }

  // 0x1a: u8
  get bNumberOfChannels(): number {
    return this.view.getUint8(26);
  }

  // 0x1b: pad5

  // 0x20: pointer
  get dwReserved(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(32, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: i32
  set AppMode(value: number) {
    this.view.setInt32(0, value, true);
  }

  // 0x04: u8
  set AppModeData(value: number) {
    this.view.setUint8(4, value);
  }

  // 0x05: i32
  set AudioFormat(value: number) {
    this.view.setInt32(5, value, true);
  }

  // 0x09: u32
  set Language(value: number) {
    this.view.setUint32(9, value, true);
  }

  // 0x0d: i32
  set LanguageExtension(value: number) {
    this.view.setInt32(13, value, true);
  }

  // 0x11: i32
  set fHasMultichannelInfo(value: number) {
    this.view.setInt32(17, value, true);
  }

  // 0x15: u32
  set dwFrequency(value: number) {
    this.view.setUint32(21, value, true);
  }

  // 0x19: u8
  set bQuantization(value: number) {
    this.view.setUint8(25, value);
  }

  // 0x1a: u8
  set bNumberOfChannels(value: number) {
    this.view.setUint8(26, value);
  }

  // 0x1b: pad5

  // 0x20: pointer
  set dwReserved(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(32, BigInt(util.toPointer(value)), true);
  }
}

/**
 * Windows.Win32.Media.DirectShow.DVD_MUA_MixingInfo (size: 24)
 */
export interface DVD_MUA_MixingInfo {
  /** Windows.Win32.Foundation.BOOL */
  fMixTo0: boolean;
  /** Windows.Win32.Foundation.BOOL */
  fMixTo1: boolean;
  /** Windows.Win32.Foundation.BOOL */
  fMix0InPhase: boolean;
  /** Windows.Win32.Foundation.BOOL */
  fMix1InPhase: boolean;
  /** u32 */
  dwSpeakerPosition: number;
}

export const sizeofDVD_MUA_MixingInfo = 24;

export function allocDVD_MUA_MixingInfo(data?: Partial<DVD_MUA_MixingInfo>): Uint8Array {
  const buf = new Uint8Array(sizeofDVD_MUA_MixingInfo);
  const view = new DataView(buf.buffer);
  // 0x00: i32
  if (data?.fMixTo0 !== undefined) view.setInt32(0, Number(data.fMixTo0), true);
  // 0x04: i32
  if (data?.fMixTo1 !== undefined) view.setInt32(4, Number(data.fMixTo1), true);
  // 0x08: i32
  if (data?.fMix0InPhase !== undefined) view.setInt32(8, Number(data.fMix0InPhase), true);
  // 0x0c: i32
  if (data?.fMix1InPhase !== undefined) view.setInt32(12, Number(data.fMix1InPhase), true);
  // 0x10: u32
  if (data?.dwSpeakerPosition !== undefined) view.setUint32(16, Number(data.dwSpeakerPosition), true);
  // 0x14: pad4
  return buf;
}

export class DVD_MUA_MixingInfoView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: i32
  get fMixTo0(): number {
    return this.view.getInt32(0, true);
  }

  // 0x04: i32
  get fMixTo1(): number {
    return this.view.getInt32(4, true);
  }

  // 0x08: i32
  get fMix0InPhase(): number {
    return this.view.getInt32(8, true);
  }

  // 0x0c: i32
  get fMix1InPhase(): number {
    return this.view.getInt32(12, true);
  }

  // 0x10: u32
  get dwSpeakerPosition(): number {
    return this.view.getUint32(16, true);
  }

  // 0x14: pad4

  // 0x00: i32
  set fMixTo0(value: number) {
    this.view.setInt32(0, value, true);
  }

  // 0x04: i32
  set fMixTo1(value: number) {
    this.view.setInt32(4, value, true);
  }

  // 0x08: i32
  set fMix0InPhase(value: number) {
    this.view.setInt32(8, value, true);
  }

  // 0x0c: i32
  set fMix1InPhase(value: number) {
    this.view.setInt32(12, value, true);
  }

  // 0x10: u32
  set dwSpeakerPosition(value: number) {
    this.view.setUint32(16, value, true);
  }

  // 0x14: pad4
}

/**
 * Windows.Win32.Media.DirectShow.DVD_MUA_Coeff (size: 16)
 */
export interface DVD_MUA_Coeff {
  /** f64 */
  log2_alpha: number;
  /** f64 */
  log2_beta: number;
}

export const sizeofDVD_MUA_Coeff = 16;

export function allocDVD_MUA_Coeff(data?: Partial<DVD_MUA_Coeff>): Uint8Array {
  const buf = new Uint8Array(sizeofDVD_MUA_Coeff);
  const view = new DataView(buf.buffer);
  // 0x00: f64
  if (data?.log2_alpha !== undefined) view.setFloat64(0, Number(data.log2_alpha), true);
  // 0x08: f64
  if (data?.log2_beta !== undefined) view.setFloat64(8, Number(data.log2_beta), true);
  return buf;
}

export class DVD_MUA_CoeffView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: f64
  get log2_alpha(): number {
    return this.view.getFloat64(0, true);
  }

  // 0x08: f64
  get log2_beta(): number {
    return this.view.getFloat64(8, true);
  }

  // 0x00: f64
  set log2_alpha(value: number) {
    this.view.setFloat64(0, value, true);
  }

  // 0x08: f64
  set log2_beta(value: number) {
    this.view.setFloat64(8, value, true);
  }
}

/**
 * Windows.Win32.Media.DirectShow.DVD_MultichannelAudioAttributes (size: 16)
 */
export interface DVD_MultichannelAudioAttributes {
  /** array */
  Info: Deno.PointerValue | null;
  /** array */
  Coeff: Deno.PointerValue | null;
}

export const sizeofDVD_MultichannelAudioAttributes = 16;

export function allocDVD_MultichannelAudioAttributes(data?: Partial<DVD_MultichannelAudioAttributes>): Uint8Array {
  const buf = new Uint8Array(sizeofDVD_MultichannelAudioAttributes);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.Info !== undefined) view.setBigUint64(0, data.Info === null ? 0n : BigInt(util.toPointer(data.Info)), true);
  // 0x08: pointer
  if (data?.Coeff !== undefined) view.setBigUint64(8, data.Coeff === null ? 0n : BigInt(util.toPointer(data.Coeff)), true);
  return buf;
}

export class DVD_MultichannelAudioAttributesView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get Info(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(0, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x08: pointer
  get Coeff(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(8, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: pointer
  set Info(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(0, BigInt(util.toPointer(value)), true);
  }

  // 0x08: pointer
  set Coeff(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(8, BigInt(util.toPointer(value)), true);
  }
}

/**
 * Windows.Win32.Media.DirectShow.DVD_KaraokeAttributes (size: 24)
 */
export interface DVD_KaraokeAttributes {
  /** u8 */
  bVersion: number;
  /** Windows.Win32.Foundation.BOOL */
  fMasterOfCeremoniesInGuideVocal1: boolean;
  /** Windows.Win32.Foundation.BOOL */
  fDuet: boolean;
  /** Windows.Win32.Media.DirectShow.DVD_KARAOKE_ASSIGNMENT */
  ChannelAssignment: DVD_KARAOKE_ASSIGNMENT;
  /** array */
  wChannelContents: Deno.PointerValue | null;
}

export const sizeofDVD_KaraokeAttributes = 24;

export function allocDVD_KaraokeAttributes(data?: Partial<DVD_KaraokeAttributes>): Uint8Array {
  const buf = new Uint8Array(sizeofDVD_KaraokeAttributes);
  const view = new DataView(buf.buffer);
  // 0x00: u8
  if (data?.bVersion !== undefined) view.setUint8(0, Number(data.bVersion));
  // 0x01: i32
  if (data?.fMasterOfCeremoniesInGuideVocal1 !== undefined) view.setInt32(1, Number(data.fMasterOfCeremoniesInGuideVocal1), true);
  // 0x05: i32
  if (data?.fDuet !== undefined) view.setInt32(5, Number(data.fDuet), true);
  // 0x09: i32
  if (data?.ChannelAssignment !== undefined) view.setInt32(9, Number(data.ChannelAssignment), true);
  // 0x0d: pad3
  // 0x10: pointer
  if (data?.wChannelContents !== undefined) view.setBigUint64(16, data.wChannelContents === null ? 0n : BigInt(util.toPointer(data.wChannelContents)), true);
  return buf;
}

export class DVD_KaraokeAttributesView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u8
  get bVersion(): number {
    return this.view.getUint8(0);
  }

  // 0x01: i32
  get fMasterOfCeremoniesInGuideVocal1(): number {
    return this.view.getInt32(1, true);
  }

  // 0x05: i32
  get fDuet(): number {
    return this.view.getInt32(5, true);
  }

  // 0x09: i32
  get ChannelAssignment(): number {
    return this.view.getInt32(9, true);
  }

  // 0x0d: pad3

  // 0x10: pointer
  get wChannelContents(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(16, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: u8
  set bVersion(value: number) {
    this.view.setUint8(0, value);
  }

  // 0x01: i32
  set fMasterOfCeremoniesInGuideVocal1(value: number) {
    this.view.setInt32(1, value, true);
  }

  // 0x05: i32
  set fDuet(value: number) {
    this.view.setInt32(5, value, true);
  }

  // 0x09: i32
  set ChannelAssignment(value: number) {
    this.view.setInt32(9, value, true);
  }

  // 0x0d: pad3

  // 0x10: pointer
  set wChannelContents(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(16, BigInt(util.toPointer(value)), true);
  }
}

/**
 * Windows.Win32.Media.DirectShow.DVD_VideoAttributes (size: 56)
 */
export interface DVD_VideoAttributes {
  /** Windows.Win32.Foundation.BOOL */
  fPanscanPermitted: boolean;
  /** Windows.Win32.Foundation.BOOL */
  fLetterboxPermitted: boolean;
  /** u32 */
  ulAspectX: number;
  /** u32 */
  ulAspectY: number;
  /** u32 */
  ulFrameRate: number;
  /** u32 */
  ulFrameHeight: number;
  /** Windows.Win32.Media.DirectShow.DVD_VIDEO_COMPRESSION */
  Compression: DVD_VIDEO_COMPRESSION;
  /** Windows.Win32.Foundation.BOOL */
  fLine21Field1InGOP: boolean;
  /** Windows.Win32.Foundation.BOOL */
  fLine21Field2InGOP: boolean;
  /** u32 */
  ulSourceResolutionX: number;
  /** u32 */
  ulSourceResolutionY: number;
  /** Windows.Win32.Foundation.BOOL */
  fIsSourceLetterboxed: boolean;
  /** Windows.Win32.Foundation.BOOL */
  fIsFilmMode: boolean;
}

export const sizeofDVD_VideoAttributes = 56;

export function allocDVD_VideoAttributes(data?: Partial<DVD_VideoAttributes>): Uint8Array {
  const buf = new Uint8Array(sizeofDVD_VideoAttributes);
  const view = new DataView(buf.buffer);
  // 0x00: i32
  if (data?.fPanscanPermitted !== undefined) view.setInt32(0, Number(data.fPanscanPermitted), true);
  // 0x04: i32
  if (data?.fLetterboxPermitted !== undefined) view.setInt32(4, Number(data.fLetterboxPermitted), true);
  // 0x08: u32
  if (data?.ulAspectX !== undefined) view.setUint32(8, Number(data.ulAspectX), true);
  // 0x0c: u32
  if (data?.ulAspectY !== undefined) view.setUint32(12, Number(data.ulAspectY), true);
  // 0x10: u32
  if (data?.ulFrameRate !== undefined) view.setUint32(16, Number(data.ulFrameRate), true);
  // 0x14: u32
  if (data?.ulFrameHeight !== undefined) view.setUint32(20, Number(data.ulFrameHeight), true);
  // 0x18: i32
  if (data?.Compression !== undefined) view.setInt32(24, Number(data.Compression), true);
  // 0x1c: i32
  if (data?.fLine21Field1InGOP !== undefined) view.setInt32(28, Number(data.fLine21Field1InGOP), true);
  // 0x20: i32
  if (data?.fLine21Field2InGOP !== undefined) view.setInt32(32, Number(data.fLine21Field2InGOP), true);
  // 0x24: u32
  if (data?.ulSourceResolutionX !== undefined) view.setUint32(36, Number(data.ulSourceResolutionX), true);
  // 0x28: u32
  if (data?.ulSourceResolutionY !== undefined) view.setUint32(40, Number(data.ulSourceResolutionY), true);
  // 0x2c: i32
  if (data?.fIsSourceLetterboxed !== undefined) view.setInt32(44, Number(data.fIsSourceLetterboxed), true);
  // 0x30: i32
  if (data?.fIsFilmMode !== undefined) view.setInt32(48, Number(data.fIsFilmMode), true);
  // 0x34: pad4
  return buf;
}

export class DVD_VideoAttributesView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: i32
  get fPanscanPermitted(): number {
    return this.view.getInt32(0, true);
  }

  // 0x04: i32
  get fLetterboxPermitted(): number {
    return this.view.getInt32(4, true);
  }

  // 0x08: u32
  get ulAspectX(): number {
    return this.view.getUint32(8, true);
  }

  // 0x0c: u32
  get ulAspectY(): number {
    return this.view.getUint32(12, true);
  }

  // 0x10: u32
  get ulFrameRate(): number {
    return this.view.getUint32(16, true);
  }

  // 0x14: u32
  get ulFrameHeight(): number {
    return this.view.getUint32(20, true);
  }

  // 0x18: i32
  get Compression(): number {
    return this.view.getInt32(24, true);
  }

  // 0x1c: i32
  get fLine21Field1InGOP(): number {
    return this.view.getInt32(28, true);
  }

  // 0x20: i32
  get fLine21Field2InGOP(): number {
    return this.view.getInt32(32, true);
  }

  // 0x24: u32
  get ulSourceResolutionX(): number {
    return this.view.getUint32(36, true);
  }

  // 0x28: u32
  get ulSourceResolutionY(): number {
    return this.view.getUint32(40, true);
  }

  // 0x2c: i32
  get fIsSourceLetterboxed(): number {
    return this.view.getInt32(44, true);
  }

  // 0x30: i32
  get fIsFilmMode(): number {
    return this.view.getInt32(48, true);
  }

  // 0x34: pad4

  // 0x00: i32
  set fPanscanPermitted(value: number) {
    this.view.setInt32(0, value, true);
  }

  // 0x04: i32
  set fLetterboxPermitted(value: number) {
    this.view.setInt32(4, value, true);
  }

  // 0x08: u32
  set ulAspectX(value: number) {
    this.view.setUint32(8, value, true);
  }

  // 0x0c: u32
  set ulAspectY(value: number) {
    this.view.setUint32(12, value, true);
  }

  // 0x10: u32
  set ulFrameRate(value: number) {
    this.view.setUint32(16, value, true);
  }

  // 0x14: u32
  set ulFrameHeight(value: number) {
    this.view.setUint32(20, value, true);
  }

  // 0x18: i32
  set Compression(value: number) {
    this.view.setInt32(24, value, true);
  }

  // 0x1c: i32
  set fLine21Field1InGOP(value: number) {
    this.view.setInt32(28, value, true);
  }

  // 0x20: i32
  set fLine21Field2InGOP(value: number) {
    this.view.setInt32(32, value, true);
  }

  // 0x24: u32
  set ulSourceResolutionX(value: number) {
    this.view.setUint32(36, value, true);
  }

  // 0x28: u32
  set ulSourceResolutionY(value: number) {
    this.view.setUint32(40, value, true);
  }

  // 0x2c: i32
  set fIsSourceLetterboxed(value: number) {
    this.view.setInt32(44, value, true);
  }

  // 0x30: i32
  set fIsFilmMode(value: number) {
    this.view.setInt32(48, value, true);
  }

  // 0x34: pad4
}

/**
 * Windows.Win32.Media.DirectShow.DVD_SubpictureAttributes (size: 16)
 */
export interface DVD_SubpictureAttributes {
  /** Windows.Win32.Media.DirectShow.DVD_SUBPICTURE_TYPE */
  Type: DVD_SUBPICTURE_TYPE;
  /** Windows.Win32.Media.DirectShow.DVD_SUBPICTURE_CODING */
  CodingMode: DVD_SUBPICTURE_CODING;
  /** u32 */
  Language: number;
  /** Windows.Win32.Media.DirectShow.DVD_SUBPICTURE_LANG_EXT */
  LanguageExtension: DVD_SUBPICTURE_LANG_EXT;
}

export const sizeofDVD_SubpictureAttributes = 16;

export function allocDVD_SubpictureAttributes(data?: Partial<DVD_SubpictureAttributes>): Uint8Array {
  const buf = new Uint8Array(sizeofDVD_SubpictureAttributes);
  const view = new DataView(buf.buffer);
  // 0x00: i32
  if (data?.Type !== undefined) view.setInt32(0, Number(data.Type), true);
  // 0x04: i32
  if (data?.CodingMode !== undefined) view.setInt32(4, Number(data.CodingMode), true);
  // 0x08: u32
  if (data?.Language !== undefined) view.setUint32(8, Number(data.Language), true);
  // 0x0c: i32
  if (data?.LanguageExtension !== undefined) view.setInt32(12, Number(data.LanguageExtension), true);
  return buf;
}

export class DVD_SubpictureAttributesView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: i32
  get Type(): number {
    return this.view.getInt32(0, true);
  }

  // 0x04: i32
  get CodingMode(): number {
    return this.view.getInt32(4, true);
  }

  // 0x08: u32
  get Language(): number {
    return this.view.getUint32(8, true);
  }

  // 0x0c: i32
  get LanguageExtension(): number {
    return this.view.getInt32(12, true);
  }

  // 0x00: i32
  set Type(value: number) {
    this.view.setInt32(0, value, true);
  }

  // 0x04: i32
  set CodingMode(value: number) {
    this.view.setInt32(4, value, true);
  }

  // 0x08: u32
  set Language(value: number) {
    this.view.setUint32(8, value, true);
  }

  // 0x0c: i32
  set LanguageExtension(value: number) {
    this.view.setInt32(12, value, true);
  }
}

/**
 * Windows.Win32.Media.DirectShow.DVD_TitleAttributes (size: 56)
 */
export interface DVD_TitleAttributes {
  /** _Anonymous_e__Union */
  Anonymous: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Media.DirectShow.DVD_VideoAttributes */
  VideoAttributes: Uint8Array | Deno.PointerValue | null;
  /** u32 */
  ulNumberOfAudioStreams: number;
  /** array */
  AudioAttributes: Deno.PointerValue | null;
  /** array */
  MultichannelAudioAttributes: Deno.PointerValue | null;
  /** u32 */
  ulNumberOfSubpictureStreams: number;
  /** array */
  SubpictureAttributes: Deno.PointerValue | null;
}

export const sizeofDVD_TitleAttributes = 56;

export function allocDVD_TitleAttributes(data?: Partial<DVD_TitleAttributes>): Uint8Array {
  const buf = new Uint8Array(sizeofDVD_TitleAttributes);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.Anonymous !== undefined) view.setBigUint64(0, data.Anonymous === null ? 0n : BigInt(util.toPointer(data.Anonymous)), true);
  // 0x08: pointer
  if (data?.VideoAttributes !== undefined) view.setBigUint64(8, data.VideoAttributes === null ? 0n : BigInt(util.toPointer(data.VideoAttributes)), true);
  // 0x10: u32
  if (data?.ulNumberOfAudioStreams !== undefined) view.setUint32(16, Number(data.ulNumberOfAudioStreams), true);
  // 0x14: pad4
  // 0x18: pointer
  if (data?.AudioAttributes !== undefined) view.setBigUint64(24, data.AudioAttributes === null ? 0n : BigInt(util.toPointer(data.AudioAttributes)), true);
  // 0x20: pointer
  if (data?.MultichannelAudioAttributes !== undefined) view.setBigUint64(32, data.MultichannelAudioAttributes === null ? 0n : BigInt(util.toPointer(data.MultichannelAudioAttributes)), true);
  // 0x28: u32
  if (data?.ulNumberOfSubpictureStreams !== undefined) view.setUint32(40, Number(data.ulNumberOfSubpictureStreams), true);
  // 0x2c: pad4
  // 0x30: pointer
  if (data?.SubpictureAttributes !== undefined) view.setBigUint64(48, data.SubpictureAttributes === null ? 0n : BigInt(util.toPointer(data.SubpictureAttributes)), true);
  return buf;
}

export class DVD_TitleAttributesView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get Anonymous(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(0, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x08: pointer
  get VideoAttributes(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(8, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x10: u32
  get ulNumberOfAudioStreams(): number {
    return this.view.getUint32(16, true);
  }

  // 0x14: pad4

  // 0x18: pointer
  get AudioAttributes(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(24, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x20: pointer
  get MultichannelAudioAttributes(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(32, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x28: u32
  get ulNumberOfSubpictureStreams(): number {
    return this.view.getUint32(40, true);
  }

  // 0x2c: pad4

  // 0x30: pointer
  get SubpictureAttributes(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(48, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: pointer
  set Anonymous(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(0, BigInt(util.toPointer(value)), true);
  }

  // 0x08: pointer
  set VideoAttributes(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(8, BigInt(util.toPointer(value)), true);
  }

  // 0x10: u32
  set ulNumberOfAudioStreams(value: number) {
    this.view.setUint32(16, value, true);
  }

  // 0x14: pad4

  // 0x18: pointer
  set AudioAttributes(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(24, BigInt(util.toPointer(value)), true);
  }

  // 0x20: pointer
  set MultichannelAudioAttributes(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(32, BigInt(util.toPointer(value)), true);
  }

  // 0x28: u32
  set ulNumberOfSubpictureStreams(value: number) {
    this.view.setUint32(40, value, true);
  }

  // 0x2c: pad4

  // 0x30: pointer
  set SubpictureAttributes(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(48, BigInt(util.toPointer(value)), true);
  }
}

/**
 * Windows.Win32.Media.DirectShow.DVD_MenuAttributes (size: 48)
 */
export interface DVD_MenuAttributes {
  /** array */
  fCompatibleRegion: Deno.PointerValue | null;
  /** Windows.Win32.Media.DirectShow.DVD_VideoAttributes */
  VideoAttributes: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Foundation.BOOL */
  fAudioPresent: boolean;
  /** Windows.Win32.Media.DirectShow.DVD_AudioAttributes */
  AudioAttributes: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Foundation.BOOL */
  fSubpicturePresent: boolean;
  /** Windows.Win32.Media.DirectShow.DVD_SubpictureAttributes */
  SubpictureAttributes: Uint8Array | Deno.PointerValue | null;
}

export const sizeofDVD_MenuAttributes = 48;

export function allocDVD_MenuAttributes(data?: Partial<DVD_MenuAttributes>): Uint8Array {
  const buf = new Uint8Array(sizeofDVD_MenuAttributes);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.fCompatibleRegion !== undefined) view.setBigUint64(0, data.fCompatibleRegion === null ? 0n : BigInt(util.toPointer(data.fCompatibleRegion)), true);
  // 0x08: pointer
  if (data?.VideoAttributes !== undefined) view.setBigUint64(8, data.VideoAttributes === null ? 0n : BigInt(util.toPointer(data.VideoAttributes)), true);
  // 0x10: i32
  if (data?.fAudioPresent !== undefined) view.setInt32(16, Number(data.fAudioPresent), true);
  // 0x14: pad4
  // 0x18: pointer
  if (data?.AudioAttributes !== undefined) view.setBigUint64(24, data.AudioAttributes === null ? 0n : BigInt(util.toPointer(data.AudioAttributes)), true);
  // 0x20: i32
  if (data?.fSubpicturePresent !== undefined) view.setInt32(32, Number(data.fSubpicturePresent), true);
  // 0x24: pad4
  // 0x28: pointer
  if (data?.SubpictureAttributes !== undefined) view.setBigUint64(40, data.SubpictureAttributes === null ? 0n : BigInt(util.toPointer(data.SubpictureAttributes)), true);
  return buf;
}

export class DVD_MenuAttributesView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get fCompatibleRegion(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(0, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x08: pointer
  get VideoAttributes(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(8, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x10: i32
  get fAudioPresent(): number {
    return this.view.getInt32(16, true);
  }

  // 0x14: pad4

  // 0x18: pointer
  get AudioAttributes(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(24, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x20: i32
  get fSubpicturePresent(): number {
    return this.view.getInt32(32, true);
  }

  // 0x24: pad4

  // 0x28: pointer
  get SubpictureAttributes(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(40, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: pointer
  set fCompatibleRegion(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(0, BigInt(util.toPointer(value)), true);
  }

  // 0x08: pointer
  set VideoAttributes(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(8, BigInt(util.toPointer(value)), true);
  }

  // 0x10: i32
  set fAudioPresent(value: number) {
    this.view.setInt32(16, value, true);
  }

  // 0x14: pad4

  // 0x18: pointer
  set AudioAttributes(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(24, BigInt(util.toPointer(value)), true);
  }

  // 0x20: i32
  set fSubpicturePresent(value: number) {
    this.view.setInt32(32, value, true);
  }

  // 0x24: pad4

  // 0x28: pointer
  set SubpictureAttributes(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(40, BigInt(util.toPointer(value)), true);
  }
}

/**
 * Windows.Win32.Media.DirectShow.DVD_DECODER_CAPS (size: 72)
 */
export interface DVD_DECODER_CAPS {
  /** u32 */
  dwSize: number;
  /** u32 */
  dwAudioCaps: number;
  /** f64 */
  dFwdMaxRateVideo: number;
  /** f64 */
  dFwdMaxRateAudio: number;
  /** f64 */
  dFwdMaxRateSP: number;
  /** f64 */
  dBwdMaxRateVideo: number;
  /** f64 */
  dBwdMaxRateAudio: number;
  /** f64 */
  dBwdMaxRateSP: number;
  /** u32 */
  dwRes1: number;
  /** u32 */
  dwRes2: number;
  /** u32 */
  dwRes3: number;
  /** u32 */
  dwRes4: number;
}

export const sizeofDVD_DECODER_CAPS = 72;

export function allocDVD_DECODER_CAPS(data?: Partial<DVD_DECODER_CAPS>): Uint8Array {
  const buf = new Uint8Array(sizeofDVD_DECODER_CAPS);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.dwSize !== undefined) view.setUint32(0, Number(data.dwSize), true);
  // 0x04: u32
  if (data?.dwAudioCaps !== undefined) view.setUint32(4, Number(data.dwAudioCaps), true);
  // 0x08: f64
  if (data?.dFwdMaxRateVideo !== undefined) view.setFloat64(8, Number(data.dFwdMaxRateVideo), true);
  // 0x10: f64
  if (data?.dFwdMaxRateAudio !== undefined) view.setFloat64(16, Number(data.dFwdMaxRateAudio), true);
  // 0x18: f64
  if (data?.dFwdMaxRateSP !== undefined) view.setFloat64(24, Number(data.dFwdMaxRateSP), true);
  // 0x20: f64
  if (data?.dBwdMaxRateVideo !== undefined) view.setFloat64(32, Number(data.dBwdMaxRateVideo), true);
  // 0x28: f64
  if (data?.dBwdMaxRateAudio !== undefined) view.setFloat64(40, Number(data.dBwdMaxRateAudio), true);
  // 0x30: f64
  if (data?.dBwdMaxRateSP !== undefined) view.setFloat64(48, Number(data.dBwdMaxRateSP), true);
  // 0x38: u32
  if (data?.dwRes1 !== undefined) view.setUint32(56, Number(data.dwRes1), true);
  // 0x3c: u32
  if (data?.dwRes2 !== undefined) view.setUint32(60, Number(data.dwRes2), true);
  // 0x40: u32
  if (data?.dwRes3 !== undefined) view.setUint32(64, Number(data.dwRes3), true);
  // 0x44: u32
  if (data?.dwRes4 !== undefined) view.setUint32(68, Number(data.dwRes4), true);
  return buf;
}

export class DVD_DECODER_CAPSView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get dwSize(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: u32
  get dwAudioCaps(): number {
    return this.view.getUint32(4, true);
  }

  // 0x08: f64
  get dFwdMaxRateVideo(): number {
    return this.view.getFloat64(8, true);
  }

  // 0x10: f64
  get dFwdMaxRateAudio(): number {
    return this.view.getFloat64(16, true);
  }

  // 0x18: f64
  get dFwdMaxRateSP(): number {
    return this.view.getFloat64(24, true);
  }

  // 0x20: f64
  get dBwdMaxRateVideo(): number {
    return this.view.getFloat64(32, true);
  }

  // 0x28: f64
  get dBwdMaxRateAudio(): number {
    return this.view.getFloat64(40, true);
  }

  // 0x30: f64
  get dBwdMaxRateSP(): number {
    return this.view.getFloat64(48, true);
  }

  // 0x38: u32
  get dwRes1(): number {
    return this.view.getUint32(56, true);
  }

  // 0x3c: u32
  get dwRes2(): number {
    return this.view.getUint32(60, true);
  }

  // 0x40: u32
  get dwRes3(): number {
    return this.view.getUint32(64, true);
  }

  // 0x44: u32
  get dwRes4(): number {
    return this.view.getUint32(68, true);
  }

  // 0x00: u32
  set dwSize(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: u32
  set dwAudioCaps(value: number) {
    this.view.setUint32(4, value, true);
  }

  // 0x08: f64
  set dFwdMaxRateVideo(value: number) {
    this.view.setFloat64(8, value, true);
  }

  // 0x10: f64
  set dFwdMaxRateAudio(value: number) {
    this.view.setFloat64(16, value, true);
  }

  // 0x18: f64
  set dFwdMaxRateSP(value: number) {
    this.view.setFloat64(24, value, true);
  }

  // 0x20: f64
  set dBwdMaxRateVideo(value: number) {
    this.view.setFloat64(32, value, true);
  }

  // 0x28: f64
  set dBwdMaxRateAudio(value: number) {
    this.view.setFloat64(40, value, true);
  }

  // 0x30: f64
  set dBwdMaxRateSP(value: number) {
    this.view.setFloat64(48, value, true);
  }

  // 0x38: u32
  set dwRes1(value: number) {
    this.view.setUint32(56, value, true);
  }

  // 0x3c: u32
  set dwRes2(value: number) {
    this.view.setUint32(60, value, true);
  }

  // 0x40: u32
  set dwRes3(value: number) {
    this.view.setUint32(64, value, true);
  }

  // 0x44: u32
  set dwRes4(value: number) {
    this.view.setUint32(68, value, true);
  }
}

export type HRESULT = number;

/**
 * Windows.Win32.Media.DirectShow.AM_DVD_RENDERSTATUS (size: 40)
 */
export interface AM_DVD_RENDERSTATUS {
  /** Windows.Win32.Foundation.HRESULT */
  hrVPEStatus: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Foundation.BOOL */
  bDvdVolInvalid: boolean;
  /** Windows.Win32.Foundation.BOOL */
  bDvdVolUnknown: boolean;
  /** Windows.Win32.Foundation.BOOL */
  bNoLine21In: boolean;
  /** Windows.Win32.Foundation.BOOL */
  bNoLine21Out: boolean;
  /** i32 */
  iNumStreams: number;
  /** i32 */
  iNumStreamsFailed: number;
  /** u32 */
  dwFailedStreamsFlag: number;
}

export const sizeofAM_DVD_RENDERSTATUS = 40;

export function allocAM_DVD_RENDERSTATUS(data?: Partial<AM_DVD_RENDERSTATUS>): Uint8Array {
  const buf = new Uint8Array(sizeofAM_DVD_RENDERSTATUS);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.hrVPEStatus !== undefined) view.setBigUint64(0, data.hrVPEStatus === null ? 0n : BigInt(util.toPointer(data.hrVPEStatus)), true);
  // 0x08: i32
  if (data?.bDvdVolInvalid !== undefined) view.setInt32(8, Number(data.bDvdVolInvalid), true);
  // 0x0c: i32
  if (data?.bDvdVolUnknown !== undefined) view.setInt32(12, Number(data.bDvdVolUnknown), true);
  // 0x10: i32
  if (data?.bNoLine21In !== undefined) view.setInt32(16, Number(data.bNoLine21In), true);
  // 0x14: i32
  if (data?.bNoLine21Out !== undefined) view.setInt32(20, Number(data.bNoLine21Out), true);
  // 0x18: i32
  if (data?.iNumStreams !== undefined) view.setInt32(24, Number(data.iNumStreams), true);
  // 0x1c: i32
  if (data?.iNumStreamsFailed !== undefined) view.setInt32(28, Number(data.iNumStreamsFailed), true);
  // 0x20: u32
  if (data?.dwFailedStreamsFlag !== undefined) view.setUint32(32, Number(data.dwFailedStreamsFlag), true);
  // 0x24: pad4
  return buf;
}

export class AM_DVD_RENDERSTATUSView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get hrVPEStatus(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(0, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x08: i32
  get bDvdVolInvalid(): number {
    return this.view.getInt32(8, true);
  }

  // 0x0c: i32
  get bDvdVolUnknown(): number {
    return this.view.getInt32(12, true);
  }

  // 0x10: i32
  get bNoLine21In(): number {
    return this.view.getInt32(16, true);
  }

  // 0x14: i32
  get bNoLine21Out(): number {
    return this.view.getInt32(20, true);
  }

  // 0x18: i32
  get iNumStreams(): number {
    return this.view.getInt32(24, true);
  }

  // 0x1c: i32
  get iNumStreamsFailed(): number {
    return this.view.getInt32(28, true);
  }

  // 0x20: u32
  get dwFailedStreamsFlag(): number {
    return this.view.getUint32(32, true);
  }

  // 0x24: pad4

  // 0x00: pointer
  set hrVPEStatus(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(0, BigInt(util.toPointer(value)), true);
  }

  // 0x08: i32
  set bDvdVolInvalid(value: number) {
    this.view.setInt32(8, value, true);
  }

  // 0x0c: i32
  set bDvdVolUnknown(value: number) {
    this.view.setInt32(12, value, true);
  }

  // 0x10: i32
  set bNoLine21In(value: number) {
    this.view.setInt32(16, value, true);
  }

  // 0x14: i32
  set bNoLine21Out(value: number) {
    this.view.setInt32(20, value, true);
  }

  // 0x18: i32
  set iNumStreams(value: number) {
    this.view.setInt32(24, value, true);
  }

  // 0x1c: i32
  set iNumStreamsFailed(value: number) {
    this.view.setInt32(28, value, true);
  }

  // 0x20: u32
  set dwFailedStreamsFlag(value: number) {
    this.view.setUint32(32, value, true);
  }

  // 0x24: pad4
}

/**
 * Windows.Win32.Media.DirectShow.BDA_TEMPLATE_CONNECTION (size: 16)
 */
export interface BDA_TEMPLATE_CONNECTION {
  /** u32 */
  FromNodeType: number;
  /** u32 */
  FromNodePinType: number;
  /** u32 */
  ToNodeType: number;
  /** u32 */
  ToNodePinType: number;
}

export const sizeofBDA_TEMPLATE_CONNECTION = 16;

export function allocBDA_TEMPLATE_CONNECTION(data?: Partial<BDA_TEMPLATE_CONNECTION>): Uint8Array {
  const buf = new Uint8Array(sizeofBDA_TEMPLATE_CONNECTION);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.FromNodeType !== undefined) view.setUint32(0, Number(data.FromNodeType), true);
  // 0x04: u32
  if (data?.FromNodePinType !== undefined) view.setUint32(4, Number(data.FromNodePinType), true);
  // 0x08: u32
  if (data?.ToNodeType !== undefined) view.setUint32(8, Number(data.ToNodeType), true);
  // 0x0c: u32
  if (data?.ToNodePinType !== undefined) view.setUint32(12, Number(data.ToNodePinType), true);
  return buf;
}

export class BDA_TEMPLATE_CONNECTIONView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get FromNodeType(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: u32
  get FromNodePinType(): number {
    return this.view.getUint32(4, true);
  }

  // 0x08: u32
  get ToNodeType(): number {
    return this.view.getUint32(8, true);
  }

  // 0x0c: u32
  get ToNodePinType(): number {
    return this.view.getUint32(12, true);
  }

  // 0x00: u32
  set FromNodeType(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: u32
  set FromNodePinType(value: number) {
    this.view.setUint32(4, value, true);
  }

  // 0x08: u32
  set ToNodeType(value: number) {
    this.view.setUint32(8, value, true);
  }

  // 0x0c: u32
  set ToNodePinType(value: number) {
    this.view.setUint32(12, value, true);
  }
}

/**
 * Windows.Win32.Media.DirectShow.BDA_TEMPLATE_PIN_JOINT (size: 8)
 */
export interface BDA_TEMPLATE_PIN_JOINT {
  /** u32 */
  uliTemplateConnection: number;
  /** u32 */
  ulcInstancesMax: number;
}

export const sizeofBDA_TEMPLATE_PIN_JOINT = 8;

export function allocBDA_TEMPLATE_PIN_JOINT(data?: Partial<BDA_TEMPLATE_PIN_JOINT>): Uint8Array {
  const buf = new Uint8Array(sizeofBDA_TEMPLATE_PIN_JOINT);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.uliTemplateConnection !== undefined) view.setUint32(0, Number(data.uliTemplateConnection), true);
  // 0x04: u32
  if (data?.ulcInstancesMax !== undefined) view.setUint32(4, Number(data.ulcInstancesMax), true);
  return buf;
}

export class BDA_TEMPLATE_PIN_JOINTView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get uliTemplateConnection(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: u32
  get ulcInstancesMax(): number {
    return this.view.getUint32(4, true);
  }

  // 0x00: u32
  set uliTemplateConnection(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: u32
  set ulcInstancesMax(value: number) {
    this.view.setUint32(4, value, true);
  }
}

/**
 * Windows.Win32.Media.DirectShow.KS_BDA_FRAME_INFO (size: 24)
 */
export interface KS_BDA_FRAME_INFO {
  /** u32 */
  ExtendedHeaderSize: number;
  /** u32 */
  dwFrameFlags: number;
  /** u32 */
  ulEvent: number;
  /** u32 */
  ulChannelNumber: number;
  /** u32 */
  ulSubchannelNumber: number;
  /** u32 */
  ulReason: number;
}

export const sizeofKS_BDA_FRAME_INFO = 24;

export function allocKS_BDA_FRAME_INFO(data?: Partial<KS_BDA_FRAME_INFO>): Uint8Array {
  const buf = new Uint8Array(sizeofKS_BDA_FRAME_INFO);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.ExtendedHeaderSize !== undefined) view.setUint32(0, Number(data.ExtendedHeaderSize), true);
  // 0x04: u32
  if (data?.dwFrameFlags !== undefined) view.setUint32(4, Number(data.dwFrameFlags), true);
  // 0x08: u32
  if (data?.ulEvent !== undefined) view.setUint32(8, Number(data.ulEvent), true);
  // 0x0c: u32
  if (data?.ulChannelNumber !== undefined) view.setUint32(12, Number(data.ulChannelNumber), true);
  // 0x10: u32
  if (data?.ulSubchannelNumber !== undefined) view.setUint32(16, Number(data.ulSubchannelNumber), true);
  // 0x14: u32
  if (data?.ulReason !== undefined) view.setUint32(20, Number(data.ulReason), true);
  return buf;
}

export class KS_BDA_FRAME_INFOView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get ExtendedHeaderSize(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: u32
  get dwFrameFlags(): number {
    return this.view.getUint32(4, true);
  }

  // 0x08: u32
  get ulEvent(): number {
    return this.view.getUint32(8, true);
  }

  // 0x0c: u32
  get ulChannelNumber(): number {
    return this.view.getUint32(12, true);
  }

  // 0x10: u32
  get ulSubchannelNumber(): number {
    return this.view.getUint32(16, true);
  }

  // 0x14: u32
  get ulReason(): number {
    return this.view.getUint32(20, true);
  }

  // 0x00: u32
  set ExtendedHeaderSize(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: u32
  set dwFrameFlags(value: number) {
    this.view.setUint32(4, value, true);
  }

  // 0x08: u32
  set ulEvent(value: number) {
    this.view.setUint32(8, value, true);
  }

  // 0x0c: u32
  set ulChannelNumber(value: number) {
    this.view.setUint32(12, value, true);
  }

  // 0x10: u32
  set ulSubchannelNumber(value: number) {
    this.view.setUint32(16, value, true);
  }

  // 0x14: u32
  set ulReason(value: number) {
    this.view.setUint32(20, value, true);
  }
}

/**
 * Windows.Win32.Media.DirectShow.BDA_ETHERNET_ADDRESS (size: 8)
 */
export interface BDA_ETHERNET_ADDRESS {
  /** array */
  rgbAddress: Deno.PointerValue | null;
}

export const sizeofBDA_ETHERNET_ADDRESS = 8;

export function allocBDA_ETHERNET_ADDRESS(data?: Partial<BDA_ETHERNET_ADDRESS>): Uint8Array {
  const buf = new Uint8Array(sizeofBDA_ETHERNET_ADDRESS);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.rgbAddress !== undefined) view.setBigUint64(0, data.rgbAddress === null ? 0n : BigInt(util.toPointer(data.rgbAddress)), true);
  return buf;
}

export class BDA_ETHERNET_ADDRESSView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get rgbAddress(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(0, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: pointer
  set rgbAddress(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(0, BigInt(util.toPointer(value)), true);
  }
}

/**
 * Windows.Win32.Media.DirectShow.BDA_ETHERNET_ADDRESS_LIST (size: 16)
 */
export interface BDA_ETHERNET_ADDRESS_LIST {
  /** u32 */
  ulcAddresses: number;
  /** array */
  rgAddressl: Deno.PointerValue | null;
}

export const sizeofBDA_ETHERNET_ADDRESS_LIST = 16;

export function allocBDA_ETHERNET_ADDRESS_LIST(data?: Partial<BDA_ETHERNET_ADDRESS_LIST>): Uint8Array {
  const buf = new Uint8Array(sizeofBDA_ETHERNET_ADDRESS_LIST);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.ulcAddresses !== undefined) view.setUint32(0, Number(data.ulcAddresses), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.rgAddressl !== undefined) view.setBigUint64(8, data.rgAddressl === null ? 0n : BigInt(util.toPointer(data.rgAddressl)), true);
  return buf;
}

export class BDA_ETHERNET_ADDRESS_LISTView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get ulcAddresses(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  get rgAddressl(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(8, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: u32
  set ulcAddresses(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  set rgAddressl(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(8, BigInt(util.toPointer(value)), true);
  }
}

/**
 * Windows.Win32.Media.DirectShow.BDA_IPv4_ADDRESS (size: 8)
 */
export interface BDA_IPv4_ADDRESS {
  /** array */
  rgbAddress: Deno.PointerValue | null;
}

export const sizeofBDA_IPv4_ADDRESS = 8;

export function allocBDA_IPv4_ADDRESS(data?: Partial<BDA_IPv4_ADDRESS>): Uint8Array {
  const buf = new Uint8Array(sizeofBDA_IPv4_ADDRESS);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.rgbAddress !== undefined) view.setBigUint64(0, data.rgbAddress === null ? 0n : BigInt(util.toPointer(data.rgbAddress)), true);
  return buf;
}

export class BDA_IPv4_ADDRESSView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get rgbAddress(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(0, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: pointer
  set rgbAddress(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(0, BigInt(util.toPointer(value)), true);
  }
}

/**
 * Windows.Win32.Media.DirectShow.BDA_IPv4_ADDRESS_LIST (size: 16)
 */
export interface BDA_IPv4_ADDRESS_LIST {
  /** u32 */
  ulcAddresses: number;
  /** array */
  rgAddressl: Deno.PointerValue | null;
}

export const sizeofBDA_IPv4_ADDRESS_LIST = 16;

export function allocBDA_IPv4_ADDRESS_LIST(data?: Partial<BDA_IPv4_ADDRESS_LIST>): Uint8Array {
  const buf = new Uint8Array(sizeofBDA_IPv4_ADDRESS_LIST);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.ulcAddresses !== undefined) view.setUint32(0, Number(data.ulcAddresses), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.rgAddressl !== undefined) view.setBigUint64(8, data.rgAddressl === null ? 0n : BigInt(util.toPointer(data.rgAddressl)), true);
  return buf;
}

export class BDA_IPv4_ADDRESS_LISTView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get ulcAddresses(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  get rgAddressl(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(8, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: u32
  set ulcAddresses(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  set rgAddressl(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(8, BigInt(util.toPointer(value)), true);
  }
}

/**
 * Windows.Win32.Media.DirectShow.BDA_IPv6_ADDRESS (size: 8)
 */
export interface BDA_IPv6_ADDRESS {
  /** array */
  rgbAddress: Deno.PointerValue | null;
}

export const sizeofBDA_IPv6_ADDRESS = 8;

export function allocBDA_IPv6_ADDRESS(data?: Partial<BDA_IPv6_ADDRESS>): Uint8Array {
  const buf = new Uint8Array(sizeofBDA_IPv6_ADDRESS);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.rgbAddress !== undefined) view.setBigUint64(0, data.rgbAddress === null ? 0n : BigInt(util.toPointer(data.rgbAddress)), true);
  return buf;
}

export class BDA_IPv6_ADDRESSView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get rgbAddress(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(0, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: pointer
  set rgbAddress(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(0, BigInt(util.toPointer(value)), true);
  }
}

/**
 * Windows.Win32.Media.DirectShow.BDA_IPv6_ADDRESS_LIST (size: 16)
 */
export interface BDA_IPv6_ADDRESS_LIST {
  /** u32 */
  ulcAddresses: number;
  /** array */
  rgAddressl: Deno.PointerValue | null;
}

export const sizeofBDA_IPv6_ADDRESS_LIST = 16;

export function allocBDA_IPv6_ADDRESS_LIST(data?: Partial<BDA_IPv6_ADDRESS_LIST>): Uint8Array {
  const buf = new Uint8Array(sizeofBDA_IPv6_ADDRESS_LIST);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.ulcAddresses !== undefined) view.setUint32(0, Number(data.ulcAddresses), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.rgAddressl !== undefined) view.setBigUint64(8, data.rgAddressl === null ? 0n : BigInt(util.toPointer(data.rgAddressl)), true);
  return buf;
}

export class BDA_IPv6_ADDRESS_LISTView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get ulcAddresses(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  get rgAddressl(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(8, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: u32
  set ulcAddresses(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  set rgAddressl(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(8, BigInt(util.toPointer(value)), true);
  }
}

/**
 * Windows.Win32.Media.DirectShow.BDANODE_DESCRIPTOR (size: 24)
 */
export interface BDANODE_DESCRIPTOR {
  /** u32 */
  ulBdaNodeType: number;
  /** System.Guid */
  guidFunction: Uint8Array | Deno.PointerValue | null;
  /** System.Guid */
  guidName: Uint8Array | Deno.PointerValue | null;
}

export const sizeofBDANODE_DESCRIPTOR = 24;

export function allocBDANODE_DESCRIPTOR(data?: Partial<BDANODE_DESCRIPTOR>): Uint8Array {
  const buf = new Uint8Array(sizeofBDANODE_DESCRIPTOR);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.ulBdaNodeType !== undefined) view.setUint32(0, Number(data.ulBdaNodeType), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.guidFunction !== undefined) view.setBigUint64(8, data.guidFunction === null ? 0n : BigInt(util.toPointer(data.guidFunction)), true);
  // 0x10: pointer
  if (data?.guidName !== undefined) view.setBigUint64(16, data.guidName === null ? 0n : BigInt(util.toPointer(data.guidName)), true);
  return buf;
}

export class BDANODE_DESCRIPTORView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get ulBdaNodeType(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  get guidFunction(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(8, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x10: pointer
  get guidName(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(16, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: u32
  set ulBdaNodeType(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  set guidFunction(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(8, BigInt(util.toPointer(value)), true);
  }

  // 0x10: pointer
  set guidName(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(16, BigInt(util.toPointer(value)), true);
  }
}

/**
 * Windows.Win32.Media.DirectShow.BDA_TABLE_SECTION (size: 24)
 */
export interface BDA_TABLE_SECTION {
  /** u32 */
  ulPrimarySectionId: number;
  /** u32 */
  ulSecondarySectionId: number;
  /** u32 */
  ulcbSectionLength: number;
  /** array */
  argbSectionData: Deno.PointerValue | null;
}

export const sizeofBDA_TABLE_SECTION = 24;

export function allocBDA_TABLE_SECTION(data?: Partial<BDA_TABLE_SECTION>): Uint8Array {
  const buf = new Uint8Array(sizeofBDA_TABLE_SECTION);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.ulPrimarySectionId !== undefined) view.setUint32(0, Number(data.ulPrimarySectionId), true);
  // 0x04: u32
  if (data?.ulSecondarySectionId !== undefined) view.setUint32(4, Number(data.ulSecondarySectionId), true);
  // 0x08: u32
  if (data?.ulcbSectionLength !== undefined) view.setUint32(8, Number(data.ulcbSectionLength), true);
  // 0x0c: pad4
  // 0x10: pointer
  if (data?.argbSectionData !== undefined) view.setBigUint64(16, data.argbSectionData === null ? 0n : BigInt(util.toPointer(data.argbSectionData)), true);
  return buf;
}

export class BDA_TABLE_SECTIONView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get ulPrimarySectionId(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: u32
  get ulSecondarySectionId(): number {
    return this.view.getUint32(4, true);
  }

  // 0x08: u32
  get ulcbSectionLength(): number {
    return this.view.getUint32(8, true);
  }

  // 0x0c: pad4

  // 0x10: pointer
  get argbSectionData(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(16, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: u32
  set ulPrimarySectionId(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: u32
  set ulSecondarySectionId(value: number) {
    this.view.setUint32(4, value, true);
  }

  // 0x08: u32
  set ulcbSectionLength(value: number) {
    this.view.setUint32(8, value, true);
  }

  // 0x0c: pad4

  // 0x10: pointer
  set argbSectionData(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(16, BigInt(util.toPointer(value)), true);
  }
}

/**
 * Windows.Win32.Media.DirectShow.BDA_DISEQC_SEND (size: 16)
 */
export interface BDA_DISEQC_SEND {
  /** u32 */
  ulRequestId: number;
  /** u32 */
  ulPacketLength: number;
  /** array */
  argbPacketData: Deno.PointerValue | null;
}

export const sizeofBDA_DISEQC_SEND = 16;

export function allocBDA_DISEQC_SEND(data?: Partial<BDA_DISEQC_SEND>): Uint8Array {
  const buf = new Uint8Array(sizeofBDA_DISEQC_SEND);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.ulRequestId !== undefined) view.setUint32(0, Number(data.ulRequestId), true);
  // 0x04: u32
  if (data?.ulPacketLength !== undefined) view.setUint32(4, Number(data.ulPacketLength), true);
  // 0x08: pointer
  if (data?.argbPacketData !== undefined) view.setBigUint64(8, data.argbPacketData === null ? 0n : BigInt(util.toPointer(data.argbPacketData)), true);
  return buf;
}

export class BDA_DISEQC_SENDView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get ulRequestId(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: u32
  get ulPacketLength(): number {
    return this.view.getUint32(4, true);
  }

  // 0x08: pointer
  get argbPacketData(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(8, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: u32
  set ulRequestId(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: u32
  set ulPacketLength(value: number) {
    this.view.setUint32(4, value, true);
  }

  // 0x08: pointer
  set argbPacketData(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(8, BigInt(util.toPointer(value)), true);
  }
}

/**
 * Windows.Win32.Media.DirectShow.BDA_DISEQC_RESPONSE (size: 16)
 */
export interface BDA_DISEQC_RESPONSE {
  /** u32 */
  ulRequestId: number;
  /** u32 */
  ulPacketLength: number;
  /** array */
  argbPacketData: Deno.PointerValue | null;
}

export const sizeofBDA_DISEQC_RESPONSE = 16;

export function allocBDA_DISEQC_RESPONSE(data?: Partial<BDA_DISEQC_RESPONSE>): Uint8Array {
  const buf = new Uint8Array(sizeofBDA_DISEQC_RESPONSE);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.ulRequestId !== undefined) view.setUint32(0, Number(data.ulRequestId), true);
  // 0x04: u32
  if (data?.ulPacketLength !== undefined) view.setUint32(4, Number(data.ulPacketLength), true);
  // 0x08: pointer
  if (data?.argbPacketData !== undefined) view.setBigUint64(8, data.argbPacketData === null ? 0n : BigInt(util.toPointer(data.argbPacketData)), true);
  return buf;
}

export class BDA_DISEQC_RESPONSEView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get ulRequestId(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: u32
  get ulPacketLength(): number {
    return this.view.getUint32(4, true);
  }

  // 0x08: pointer
  get argbPacketData(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(8, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: u32
  set ulRequestId(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: u32
  set ulPacketLength(value: number) {
    this.view.setUint32(4, value, true);
  }

  // 0x08: pointer
  set argbPacketData(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(8, BigInt(util.toPointer(value)), true);
  }
}

/**
 * Windows.Win32.Media.DirectShow.PID_MAP (size: 8)
 */
export interface PID_MAP {
  /** u32 */
  ulPID: number;
  /** Windows.Win32.Media.DirectShow.MEDIA_SAMPLE_CONTENT */
  MediaSampleContent: MEDIA_SAMPLE_CONTENT;
}

export const sizeofPID_MAP = 8;

export function allocPID_MAP(data?: Partial<PID_MAP>): Uint8Array {
  const buf = new Uint8Array(sizeofPID_MAP);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.ulPID !== undefined) view.setUint32(0, Number(data.ulPID), true);
  // 0x04: i32
  if (data?.MediaSampleContent !== undefined) view.setInt32(4, Number(data.MediaSampleContent), true);
  return buf;
}

export class PID_MAPView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get ulPID(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: i32
  get MediaSampleContent(): number {
    return this.view.getInt32(4, true);
  }

  // 0x00: u32
  set ulPID(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: i32
  set MediaSampleContent(value: number) {
    this.view.setInt32(4, value, true);
  }
}

/**
 * Windows.Win32.Media.DirectShow.BDA_PID_MAP (size: 16)
 */
export interface BDA_PID_MAP {
  /** Windows.Win32.Media.DirectShow.MEDIA_SAMPLE_CONTENT */
  MediaSampleContent: MEDIA_SAMPLE_CONTENT;
  /** u32 */
  ulcPIDs: number;
  /** array */
  aulPIDs: Deno.PointerValue | null;
}

export const sizeofBDA_PID_MAP = 16;

export function allocBDA_PID_MAP(data?: Partial<BDA_PID_MAP>): Uint8Array {
  const buf = new Uint8Array(sizeofBDA_PID_MAP);
  const view = new DataView(buf.buffer);
  // 0x00: i32
  if (data?.MediaSampleContent !== undefined) view.setInt32(0, Number(data.MediaSampleContent), true);
  // 0x04: u32
  if (data?.ulcPIDs !== undefined) view.setUint32(4, Number(data.ulcPIDs), true);
  // 0x08: pointer
  if (data?.aulPIDs !== undefined) view.setBigUint64(8, data.aulPIDs === null ? 0n : BigInt(util.toPointer(data.aulPIDs)), true);
  return buf;
}

export class BDA_PID_MAPView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: i32
  get MediaSampleContent(): number {
    return this.view.getInt32(0, true);
  }

  // 0x04: u32
  get ulcPIDs(): number {
    return this.view.getUint32(4, true);
  }

  // 0x08: pointer
  get aulPIDs(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(8, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: i32
  set MediaSampleContent(value: number) {
    this.view.setInt32(0, value, true);
  }

  // 0x04: u32
  set ulcPIDs(value: number) {
    this.view.setUint32(4, value, true);
  }

  // 0x08: pointer
  set aulPIDs(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(8, BigInt(util.toPointer(value)), true);
  }
}

/**
 * Windows.Win32.Media.DirectShow.BDA_PID_UNMAP (size: 16)
 */
export interface BDA_PID_UNMAP {
  /** u32 */
  ulcPIDs: number;
  /** array */
  aulPIDs: Deno.PointerValue | null;
}

export const sizeofBDA_PID_UNMAP = 16;

export function allocBDA_PID_UNMAP(data?: Partial<BDA_PID_UNMAP>): Uint8Array {
  const buf = new Uint8Array(sizeofBDA_PID_UNMAP);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.ulcPIDs !== undefined) view.setUint32(0, Number(data.ulcPIDs), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.aulPIDs !== undefined) view.setBigUint64(8, data.aulPIDs === null ? 0n : BigInt(util.toPointer(data.aulPIDs)), true);
  return buf;
}

export class BDA_PID_UNMAPView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get ulcPIDs(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  get aulPIDs(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(8, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: u32
  set ulcPIDs(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  set aulPIDs(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(8, BigInt(util.toPointer(value)), true);
  }
}

/**
 * Windows.Win32.Media.DirectShow.BDA_CA_MODULE_UI (size: 16)
 */
export interface BDA_CA_MODULE_UI {
  /** u32 */
  ulFormat: number;
  /** u32 */
  ulbcDesc: number;
  /** array */
  ulDesc: Deno.PointerValue | null;
}

export const sizeofBDA_CA_MODULE_UI = 16;

export function allocBDA_CA_MODULE_UI(data?: Partial<BDA_CA_MODULE_UI>): Uint8Array {
  const buf = new Uint8Array(sizeofBDA_CA_MODULE_UI);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.ulFormat !== undefined) view.setUint32(0, Number(data.ulFormat), true);
  // 0x04: u32
  if (data?.ulbcDesc !== undefined) view.setUint32(4, Number(data.ulbcDesc), true);
  // 0x08: pointer
  if (data?.ulDesc !== undefined) view.setBigUint64(8, data.ulDesc === null ? 0n : BigInt(util.toPointer(data.ulDesc)), true);
  return buf;
}

export class BDA_CA_MODULE_UIView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get ulFormat(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: u32
  get ulbcDesc(): number {
    return this.view.getUint32(4, true);
  }

  // 0x08: pointer
  get ulDesc(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(8, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: u32
  set ulFormat(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: u32
  set ulbcDesc(value: number) {
    this.view.setUint32(4, value, true);
  }

  // 0x08: pointer
  set ulDesc(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(8, BigInt(util.toPointer(value)), true);
  }
}

/**
 * Windows.Win32.Media.DirectShow.BDA_PROGRAM_PID_LIST (size: 16)
 */
export interface BDA_PROGRAM_PID_LIST {
  /** u32 */
  ulProgramNumber: number;
  /** u32 */
  ulcPIDs: number;
  /** array */
  ulPID: Deno.PointerValue | null;
}

export const sizeofBDA_PROGRAM_PID_LIST = 16;

export function allocBDA_PROGRAM_PID_LIST(data?: Partial<BDA_PROGRAM_PID_LIST>): Uint8Array {
  const buf = new Uint8Array(sizeofBDA_PROGRAM_PID_LIST);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.ulProgramNumber !== undefined) view.setUint32(0, Number(data.ulProgramNumber), true);
  // 0x04: u32
  if (data?.ulcPIDs !== undefined) view.setUint32(4, Number(data.ulcPIDs), true);
  // 0x08: pointer
  if (data?.ulPID !== undefined) view.setBigUint64(8, data.ulPID === null ? 0n : BigInt(util.toPointer(data.ulPID)), true);
  return buf;
}

export class BDA_PROGRAM_PID_LISTView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get ulProgramNumber(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: u32
  get ulcPIDs(): number {
    return this.view.getUint32(4, true);
  }

  // 0x08: pointer
  get ulPID(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(8, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: u32
  set ulProgramNumber(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: u32
  set ulcPIDs(value: number) {
    this.view.setUint32(4, value, true);
  }

  // 0x08: pointer
  set ulPID(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(8, BigInt(util.toPointer(value)), true);
  }
}

/**
 * Windows.Win32.Media.DirectShow.BDA_DRM_DRMSTATUS (size: 32)
 */
export interface BDA_DRM_DRMSTATUS {
  /** i32 */
  lResult: number;
  /** System.Guid */
  DRMuuid: Uint8Array | Deno.PointerValue | null;
  /** u32 */
  ulDrmUuidListStringSize: number;
  /** array */
  argbDrmUuidListString: Deno.PointerValue | null;
}

export const sizeofBDA_DRM_DRMSTATUS = 32;

export function allocBDA_DRM_DRMSTATUS(data?: Partial<BDA_DRM_DRMSTATUS>): Uint8Array {
  const buf = new Uint8Array(sizeofBDA_DRM_DRMSTATUS);
  const view = new DataView(buf.buffer);
  // 0x00: i32
  if (data?.lResult !== undefined) view.setInt32(0, Number(data.lResult), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.DRMuuid !== undefined) view.setBigUint64(8, data.DRMuuid === null ? 0n : BigInt(util.toPointer(data.DRMuuid)), true);
  // 0x10: u32
  if (data?.ulDrmUuidListStringSize !== undefined) view.setUint32(16, Number(data.ulDrmUuidListStringSize), true);
  // 0x14: pad4
  // 0x18: pointer
  if (data?.argbDrmUuidListString !== undefined) view.setBigUint64(24, data.argbDrmUuidListString === null ? 0n : BigInt(util.toPointer(data.argbDrmUuidListString)), true);
  return buf;
}

export class BDA_DRM_DRMSTATUSView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: i32
  get lResult(): number {
    return this.view.getInt32(0, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  get DRMuuid(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(8, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x10: u32
  get ulDrmUuidListStringSize(): number {
    return this.view.getUint32(16, true);
  }

  // 0x14: pad4

  // 0x18: pointer
  get argbDrmUuidListString(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(24, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: i32
  set lResult(value: number) {
    this.view.setInt32(0, value, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  set DRMuuid(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(8, BigInt(util.toPointer(value)), true);
  }

  // 0x10: u32
  set ulDrmUuidListStringSize(value: number) {
    this.view.setUint32(16, value, true);
  }

  // 0x14: pad4

  // 0x18: pointer
  set argbDrmUuidListString(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(24, BigInt(util.toPointer(value)), true);
  }
}

/**
 * Windows.Win32.Media.DirectShow.BDA_WMDRM_STATUS (size: 48)
 */
export interface BDA_WMDRM_STATUS {
  /** i32 */
  lResult: number;
  /** u32 */
  ulMaxCaptureTokenSize: number;
  /** u32 */
  uMaxStreamingPid: number;
  /** u32 */
  ulMaxLicense: number;
  /** u32 */
  ulMinSecurityLevel: number;
  /** u32 */
  ulRevInfoSequenceNumber: number;
  /** u64 */
  ulRevInfoIssuedTime: Deno.PointerValue;
  /** u32 */
  ulRevListVersion: number;
  /** u32 */
  ulRevInfoTTL: number;
  /** u32 */
  ulState: number;
}

export const sizeofBDA_WMDRM_STATUS = 48;

export function allocBDA_WMDRM_STATUS(data?: Partial<BDA_WMDRM_STATUS>): Uint8Array {
  const buf = new Uint8Array(sizeofBDA_WMDRM_STATUS);
  const view = new DataView(buf.buffer);
  // 0x00: i32
  if (data?.lResult !== undefined) view.setInt32(0, Number(data.lResult), true);
  // 0x04: u32
  if (data?.ulMaxCaptureTokenSize !== undefined) view.setUint32(4, Number(data.ulMaxCaptureTokenSize), true);
  // 0x08: u32
  if (data?.uMaxStreamingPid !== undefined) view.setUint32(8, Number(data.uMaxStreamingPid), true);
  // 0x0c: u32
  if (data?.ulMaxLicense !== undefined) view.setUint32(12, Number(data.ulMaxLicense), true);
  // 0x10: u32
  if (data?.ulMinSecurityLevel !== undefined) view.setUint32(16, Number(data.ulMinSecurityLevel), true);
  // 0x14: u32
  if (data?.ulRevInfoSequenceNumber !== undefined) view.setUint32(20, Number(data.ulRevInfoSequenceNumber), true);
  // 0x18: u64
  if (data?.ulRevInfoIssuedTime !== undefined) view.setBigUint64(24, BigInt(data.ulRevInfoIssuedTime), true);
  // 0x20: u32
  if (data?.ulRevListVersion !== undefined) view.setUint32(32, Number(data.ulRevListVersion), true);
  // 0x24: u32
  if (data?.ulRevInfoTTL !== undefined) view.setUint32(36, Number(data.ulRevInfoTTL), true);
  // 0x28: u32
  if (data?.ulState !== undefined) view.setUint32(40, Number(data.ulState), true);
  // 0x2c: pad4
  return buf;
}

export class BDA_WMDRM_STATUSView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: i32
  get lResult(): number {
    return this.view.getInt32(0, true);
  }

  // 0x04: u32
  get ulMaxCaptureTokenSize(): number {
    return this.view.getUint32(4, true);
  }

  // 0x08: u32
  get uMaxStreamingPid(): number {
    return this.view.getUint32(8, true);
  }

  // 0x0c: u32
  get ulMaxLicense(): number {
    return this.view.getUint32(12, true);
  }

  // 0x10: u32
  get ulMinSecurityLevel(): number {
    return this.view.getUint32(16, true);
  }

  // 0x14: u32
  get ulRevInfoSequenceNumber(): number {
    return this.view.getUint32(20, true);
  }

  // 0x18: u64
  get ulRevInfoIssuedTime(): Deno.PointerValue {
    return Number(this.view.getBigUint64(24, true));
  }

  // 0x20: u32
  get ulRevListVersion(): number {
    return this.view.getUint32(32, true);
  }

  // 0x24: u32
  get ulRevInfoTTL(): number {
    return this.view.getUint32(36, true);
  }

  // 0x28: u32
  get ulState(): number {
    return this.view.getUint32(40, true);
  }

  // 0x2c: pad4

  // 0x00: i32
  set lResult(value: number) {
    this.view.setInt32(0, value, true);
  }

  // 0x04: u32
  set ulMaxCaptureTokenSize(value: number) {
    this.view.setUint32(4, value, true);
  }

  // 0x08: u32
  set uMaxStreamingPid(value: number) {
    this.view.setUint32(8, value, true);
  }

  // 0x0c: u32
  set ulMaxLicense(value: number) {
    this.view.setUint32(12, value, true);
  }

  // 0x10: u32
  set ulMinSecurityLevel(value: number) {
    this.view.setUint32(16, value, true);
  }

  // 0x14: u32
  set ulRevInfoSequenceNumber(value: number) {
    this.view.setUint32(20, value, true);
  }

  // 0x18: u64
  set ulRevInfoIssuedTime(value: Deno.PointerValue) {
    this.view.setBigUint64(24, BigInt(value), true);
  }

  // 0x20: u32
  set ulRevListVersion(value: number) {
    this.view.setUint32(32, value, true);
  }

  // 0x24: u32
  set ulRevInfoTTL(value: number) {
    this.view.setUint32(36, value, true);
  }

  // 0x28: u32
  set ulState(value: number) {
    this.view.setUint32(40, value, true);
  }

  // 0x2c: pad4
}

/**
 * Windows.Win32.Media.DirectShow.BDA_WMDRM_KEYINFOLIST (size: 16)
 */
export interface BDA_WMDRM_KEYINFOLIST {
  /** i32 */
  lResult: number;
  /** u32 */
  ulKeyuuidBufferLen: number;
  /** array */
  argKeyuuidBuffer: Deno.PointerValue | null;
}

export const sizeofBDA_WMDRM_KEYINFOLIST = 16;

export function allocBDA_WMDRM_KEYINFOLIST(data?: Partial<BDA_WMDRM_KEYINFOLIST>): Uint8Array {
  const buf = new Uint8Array(sizeofBDA_WMDRM_KEYINFOLIST);
  const view = new DataView(buf.buffer);
  // 0x00: i32
  if (data?.lResult !== undefined) view.setInt32(0, Number(data.lResult), true);
  // 0x04: u32
  if (data?.ulKeyuuidBufferLen !== undefined) view.setUint32(4, Number(data.ulKeyuuidBufferLen), true);
  // 0x08: pointer
  if (data?.argKeyuuidBuffer !== undefined) view.setBigUint64(8, data.argKeyuuidBuffer === null ? 0n : BigInt(util.toPointer(data.argKeyuuidBuffer)), true);
  return buf;
}

export class BDA_WMDRM_KEYINFOLISTView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: i32
  get lResult(): number {
    return this.view.getInt32(0, true);
  }

  // 0x04: u32
  get ulKeyuuidBufferLen(): number {
    return this.view.getUint32(4, true);
  }

  // 0x08: pointer
  get argKeyuuidBuffer(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(8, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: i32
  set lResult(value: number) {
    this.view.setInt32(0, value, true);
  }

  // 0x04: u32
  set ulKeyuuidBufferLen(value: number) {
    this.view.setUint32(4, value, true);
  }

  // 0x08: pointer
  set argKeyuuidBuffer(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(8, BigInt(util.toPointer(value)), true);
  }
}

/**
 * Windows.Win32.Media.DirectShow.BDA_BUFFER (size: 16)
 */
export interface BDA_BUFFER {
  /** i32 */
  lResult: number;
  /** u32 */
  ulBufferSize: number;
  /** array */
  argbBuffer: Deno.PointerValue | null;
}

export const sizeofBDA_BUFFER = 16;

export function allocBDA_BUFFER(data?: Partial<BDA_BUFFER>): Uint8Array {
  const buf = new Uint8Array(sizeofBDA_BUFFER);
  const view = new DataView(buf.buffer);
  // 0x00: i32
  if (data?.lResult !== undefined) view.setInt32(0, Number(data.lResult), true);
  // 0x04: u32
  if (data?.ulBufferSize !== undefined) view.setUint32(4, Number(data.ulBufferSize), true);
  // 0x08: pointer
  if (data?.argbBuffer !== undefined) view.setBigUint64(8, data.argbBuffer === null ? 0n : BigInt(util.toPointer(data.argbBuffer)), true);
  return buf;
}

export class BDA_BUFFERView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: i32
  get lResult(): number {
    return this.view.getInt32(0, true);
  }

  // 0x04: u32
  get ulBufferSize(): number {
    return this.view.getUint32(4, true);
  }

  // 0x08: pointer
  get argbBuffer(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(8, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: i32
  set lResult(value: number) {
    this.view.setInt32(0, value, true);
  }

  // 0x04: u32
  set ulBufferSize(value: number) {
    this.view.setUint32(4, value, true);
  }

  // 0x08: pointer
  set argbBuffer(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(8, BigInt(util.toPointer(value)), true);
  }
}

/**
 * Windows.Win32.Media.DirectShow.BDA_WMDRM_RENEWLICENSE (size: 24)
 */
export interface BDA_WMDRM_RENEWLICENSE {
  /** i32 */
  lResult: number;
  /** u32 */
  ulDescrambleStatus: number;
  /** u32 */
  ulXmrLicenseOutputLength: number;
  /** array */
  argbXmrLicenceOutputBuffer: Deno.PointerValue | null;
}

export const sizeofBDA_WMDRM_RENEWLICENSE = 24;

export function allocBDA_WMDRM_RENEWLICENSE(data?: Partial<BDA_WMDRM_RENEWLICENSE>): Uint8Array {
  const buf = new Uint8Array(sizeofBDA_WMDRM_RENEWLICENSE);
  const view = new DataView(buf.buffer);
  // 0x00: i32
  if (data?.lResult !== undefined) view.setInt32(0, Number(data.lResult), true);
  // 0x04: u32
  if (data?.ulDescrambleStatus !== undefined) view.setUint32(4, Number(data.ulDescrambleStatus), true);
  // 0x08: u32
  if (data?.ulXmrLicenseOutputLength !== undefined) view.setUint32(8, Number(data.ulXmrLicenseOutputLength), true);
  // 0x0c: pad4
  // 0x10: pointer
  if (data?.argbXmrLicenceOutputBuffer !== undefined) view.setBigUint64(16, data.argbXmrLicenceOutputBuffer === null ? 0n : BigInt(util.toPointer(data.argbXmrLicenceOutputBuffer)), true);
  return buf;
}

export class BDA_WMDRM_RENEWLICENSEView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: i32
  get lResult(): number {
    return this.view.getInt32(0, true);
  }

  // 0x04: u32
  get ulDescrambleStatus(): number {
    return this.view.getUint32(4, true);
  }

  // 0x08: u32
  get ulXmrLicenseOutputLength(): number {
    return this.view.getUint32(8, true);
  }

  // 0x0c: pad4

  // 0x10: pointer
  get argbXmrLicenceOutputBuffer(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(16, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: i32
  set lResult(value: number) {
    this.view.setInt32(0, value, true);
  }

  // 0x04: u32
  set ulDescrambleStatus(value: number) {
    this.view.setUint32(4, value, true);
  }

  // 0x08: u32
  set ulXmrLicenseOutputLength(value: number) {
    this.view.setUint32(8, value, true);
  }

  // 0x0c: pad4

  // 0x10: pointer
  set argbXmrLicenceOutputBuffer(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(16, BigInt(util.toPointer(value)), true);
  }
}

/**
 * Windows.Win32.Media.DirectShow.BDA_WMDRMTUNER_PIDPROTECTION (size: 16)
 */
export interface BDA_WMDRMTUNER_PIDPROTECTION {
  /** i32 */
  lResult: number;
  /** System.Guid */
  uuidKeyID: Uint8Array | Deno.PointerValue | null;
}

export const sizeofBDA_WMDRMTUNER_PIDPROTECTION = 16;

export function allocBDA_WMDRMTUNER_PIDPROTECTION(data?: Partial<BDA_WMDRMTUNER_PIDPROTECTION>): Uint8Array {
  const buf = new Uint8Array(sizeofBDA_WMDRMTUNER_PIDPROTECTION);
  const view = new DataView(buf.buffer);
  // 0x00: i32
  if (data?.lResult !== undefined) view.setInt32(0, Number(data.lResult), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.uuidKeyID !== undefined) view.setBigUint64(8, data.uuidKeyID === null ? 0n : BigInt(util.toPointer(data.uuidKeyID)), true);
  return buf;
}

export class BDA_WMDRMTUNER_PIDPROTECTIONView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: i32
  get lResult(): number {
    return this.view.getInt32(0, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  get uuidKeyID(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(8, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: i32
  set lResult(value: number) {
    this.view.setInt32(0, value, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  set uuidKeyID(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(8, BigInt(util.toPointer(value)), true);
  }
}

/**
 * Windows.Win32.Media.DirectShow.BDA_WMDRMTUNER_PURCHASEENTITLEMENT (size: 24)
 */
export interface BDA_WMDRMTUNER_PURCHASEENTITLEMENT {
  /** i32 */
  lResult: number;
  /** u32 */
  ulDescrambleStatus: number;
  /** u32 */
  ulCaptureTokenLength: number;
  /** array */
  argbCaptureTokenBuffer: Deno.PointerValue | null;
}

export const sizeofBDA_WMDRMTUNER_PURCHASEENTITLEMENT = 24;

export function allocBDA_WMDRMTUNER_PURCHASEENTITLEMENT(data?: Partial<BDA_WMDRMTUNER_PURCHASEENTITLEMENT>): Uint8Array {
  const buf = new Uint8Array(sizeofBDA_WMDRMTUNER_PURCHASEENTITLEMENT);
  const view = new DataView(buf.buffer);
  // 0x00: i32
  if (data?.lResult !== undefined) view.setInt32(0, Number(data.lResult), true);
  // 0x04: u32
  if (data?.ulDescrambleStatus !== undefined) view.setUint32(4, Number(data.ulDescrambleStatus), true);
  // 0x08: u32
  if (data?.ulCaptureTokenLength !== undefined) view.setUint32(8, Number(data.ulCaptureTokenLength), true);
  // 0x0c: pad4
  // 0x10: pointer
  if (data?.argbCaptureTokenBuffer !== undefined) view.setBigUint64(16, data.argbCaptureTokenBuffer === null ? 0n : BigInt(util.toPointer(data.argbCaptureTokenBuffer)), true);
  return buf;
}

export class BDA_WMDRMTUNER_PURCHASEENTITLEMENTView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: i32
  get lResult(): number {
    return this.view.getInt32(0, true);
  }

  // 0x04: u32
  get ulDescrambleStatus(): number {
    return this.view.getUint32(4, true);
  }

  // 0x08: u32
  get ulCaptureTokenLength(): number {
    return this.view.getUint32(8, true);
  }

  // 0x0c: pad4

  // 0x10: pointer
  get argbCaptureTokenBuffer(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(16, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: i32
  set lResult(value: number) {
    this.view.setInt32(0, value, true);
  }

  // 0x04: u32
  set ulDescrambleStatus(value: number) {
    this.view.setUint32(4, value, true);
  }

  // 0x08: u32
  set ulCaptureTokenLength(value: number) {
    this.view.setUint32(8, value, true);
  }

  // 0x0c: pad4

  // 0x10: pointer
  set argbCaptureTokenBuffer(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(16, BigInt(util.toPointer(value)), true);
  }
}

/**
 * Windows.Win32.Media.DirectShow.BDA_TUNER_TUNERSTATE (size: 16)
 */
export interface BDA_TUNER_TUNERSTATE {
  /** i32 */
  lResult: number;
  /** u32 */
  ulTuneLength: number;
  /** array */
  argbTuneData: Deno.PointerValue | null;
}

export const sizeofBDA_TUNER_TUNERSTATE = 16;

export function allocBDA_TUNER_TUNERSTATE(data?: Partial<BDA_TUNER_TUNERSTATE>): Uint8Array {
  const buf = new Uint8Array(sizeofBDA_TUNER_TUNERSTATE);
  const view = new DataView(buf.buffer);
  // 0x00: i32
  if (data?.lResult !== undefined) view.setInt32(0, Number(data.lResult), true);
  // 0x04: u32
  if (data?.ulTuneLength !== undefined) view.setUint32(4, Number(data.ulTuneLength), true);
  // 0x08: pointer
  if (data?.argbTuneData !== undefined) view.setBigUint64(8, data.argbTuneData === null ? 0n : BigInt(util.toPointer(data.argbTuneData)), true);
  return buf;
}

export class BDA_TUNER_TUNERSTATEView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: i32
  get lResult(): number {
    return this.view.getInt32(0, true);
  }

  // 0x04: u32
  get ulTuneLength(): number {
    return this.view.getUint32(4, true);
  }

  // 0x08: pointer
  get argbTuneData(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(8, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: i32
  set lResult(value: number) {
    this.view.setInt32(0, value, true);
  }

  // 0x04: u32
  set ulTuneLength(value: number) {
    this.view.setUint32(4, value, true);
  }

  // 0x08: pointer
  set argbTuneData(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(8, BigInt(util.toPointer(value)), true);
  }
}

/**
 * Windows.Win32.Media.DirectShow.BDA_TUNER_DIAGNOSTICS (size: 16)
 */
export interface BDA_TUNER_DIAGNOSTICS {
  /** i32 */
  lResult: number;
  /** u32 */
  ulSignalLevel: number;
  /** u32 */
  ulSignalLevelQuality: number;
  /** u32 */
  ulSignalNoiseRatio: number;
}

export const sizeofBDA_TUNER_DIAGNOSTICS = 16;

export function allocBDA_TUNER_DIAGNOSTICS(data?: Partial<BDA_TUNER_DIAGNOSTICS>): Uint8Array {
  const buf = new Uint8Array(sizeofBDA_TUNER_DIAGNOSTICS);
  const view = new DataView(buf.buffer);
  // 0x00: i32
  if (data?.lResult !== undefined) view.setInt32(0, Number(data.lResult), true);
  // 0x04: u32
  if (data?.ulSignalLevel !== undefined) view.setUint32(4, Number(data.ulSignalLevel), true);
  // 0x08: u32
  if (data?.ulSignalLevelQuality !== undefined) view.setUint32(8, Number(data.ulSignalLevelQuality), true);
  // 0x0c: u32
  if (data?.ulSignalNoiseRatio !== undefined) view.setUint32(12, Number(data.ulSignalNoiseRatio), true);
  return buf;
}

export class BDA_TUNER_DIAGNOSTICSView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: i32
  get lResult(): number {
    return this.view.getInt32(0, true);
  }

  // 0x04: u32
  get ulSignalLevel(): number {
    return this.view.getUint32(4, true);
  }

  // 0x08: u32
  get ulSignalLevelQuality(): number {
    return this.view.getUint32(8, true);
  }

  // 0x0c: u32
  get ulSignalNoiseRatio(): number {
    return this.view.getUint32(12, true);
  }

  // 0x00: i32
  set lResult(value: number) {
    this.view.setInt32(0, value, true);
  }

  // 0x04: u32
  set ulSignalLevel(value: number) {
    this.view.setUint32(4, value, true);
  }

  // 0x08: u32
  set ulSignalLevelQuality(value: number) {
    this.view.setUint32(8, value, true);
  }

  // 0x0c: u32
  set ulSignalNoiseRatio(value: number) {
    this.view.setUint32(12, value, true);
  }
}

/**
 * Windows.Win32.Media.DirectShow.BDA_STRING (size: 16)
 */
export interface BDA_STRING {
  /** i32 */
  lResult: number;
  /** u32 */
  ulStringSize: number;
  /** array */
  argbString: Deno.PointerValue | null;
}

export const sizeofBDA_STRING = 16;

export function allocBDA_STRING(data?: Partial<BDA_STRING>): Uint8Array {
  const buf = new Uint8Array(sizeofBDA_STRING);
  const view = new DataView(buf.buffer);
  // 0x00: i32
  if (data?.lResult !== undefined) view.setInt32(0, Number(data.lResult), true);
  // 0x04: u32
  if (data?.ulStringSize !== undefined) view.setUint32(4, Number(data.ulStringSize), true);
  // 0x08: pointer
  if (data?.argbString !== undefined) view.setBigUint64(8, data.argbString === null ? 0n : BigInt(util.toPointer(data.argbString)), true);
  return buf;
}

export class BDA_STRINGView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: i32
  get lResult(): number {
    return this.view.getInt32(0, true);
  }

  // 0x04: u32
  get ulStringSize(): number {
    return this.view.getUint32(4, true);
  }

  // 0x08: pointer
  get argbString(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(8, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: i32
  set lResult(value: number) {
    this.view.setInt32(0, value, true);
  }

  // 0x04: u32
  set ulStringSize(value: number) {
    this.view.setUint32(4, value, true);
  }

  // 0x08: pointer
  set argbString(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(8, BigInt(util.toPointer(value)), true);
  }
}

/**
 * Windows.Win32.Media.DirectShow.BDA_SCAN_CAPABILTIES (size: 16)
 */
export interface BDA_SCAN_CAPABILTIES {
  /** i32 */
  lResult: number;
  /** u64 */
  ul64AnalogStandardsSupported: Deno.PointerValue;
}

export const sizeofBDA_SCAN_CAPABILTIES = 16;

export function allocBDA_SCAN_CAPABILTIES(data?: Partial<BDA_SCAN_CAPABILTIES>): Uint8Array {
  const buf = new Uint8Array(sizeofBDA_SCAN_CAPABILTIES);
  const view = new DataView(buf.buffer);
  // 0x00: i32
  if (data?.lResult !== undefined) view.setInt32(0, Number(data.lResult), true);
  // 0x04: pad4
  // 0x08: u64
  if (data?.ul64AnalogStandardsSupported !== undefined) view.setBigUint64(8, BigInt(data.ul64AnalogStandardsSupported), true);
  return buf;
}

export class BDA_SCAN_CAPABILTIESView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: i32
  get lResult(): number {
    return this.view.getInt32(0, true);
  }

  // 0x04: pad4

  // 0x08: u64
  get ul64AnalogStandardsSupported(): Deno.PointerValue {
    return Number(this.view.getBigUint64(8, true));
  }

  // 0x00: i32
  set lResult(value: number) {
    this.view.setInt32(0, value, true);
  }

  // 0x04: pad4

  // 0x08: u64
  set ul64AnalogStandardsSupported(value: Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(value), true);
  }
}

/**
 * Windows.Win32.Media.DirectShow.BDA_SCAN_STATE (size: 16)
 */
export interface BDA_SCAN_STATE {
  /** i32 */
  lResult: number;
  /** u32 */
  ulSignalLock: number;
  /** u32 */
  ulSecondsLeft: number;
  /** u32 */
  ulCurrentFrequency: number;
}

export const sizeofBDA_SCAN_STATE = 16;

export function allocBDA_SCAN_STATE(data?: Partial<BDA_SCAN_STATE>): Uint8Array {
  const buf = new Uint8Array(sizeofBDA_SCAN_STATE);
  const view = new DataView(buf.buffer);
  // 0x00: i32
  if (data?.lResult !== undefined) view.setInt32(0, Number(data.lResult), true);
  // 0x04: u32
  if (data?.ulSignalLock !== undefined) view.setUint32(4, Number(data.ulSignalLock), true);
  // 0x08: u32
  if (data?.ulSecondsLeft !== undefined) view.setUint32(8, Number(data.ulSecondsLeft), true);
  // 0x0c: u32
  if (data?.ulCurrentFrequency !== undefined) view.setUint32(12, Number(data.ulCurrentFrequency), true);
  return buf;
}

export class BDA_SCAN_STATEView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: i32
  get lResult(): number {
    return this.view.getInt32(0, true);
  }

  // 0x04: u32
  get ulSignalLock(): number {
    return this.view.getUint32(4, true);
  }

  // 0x08: u32
  get ulSecondsLeft(): number {
    return this.view.getUint32(8, true);
  }

  // 0x0c: u32
  get ulCurrentFrequency(): number {
    return this.view.getUint32(12, true);
  }

  // 0x00: i32
  set lResult(value: number) {
    this.view.setInt32(0, value, true);
  }

  // 0x04: u32
  set ulSignalLock(value: number) {
    this.view.setUint32(4, value, true);
  }

  // 0x08: u32
  set ulSecondsLeft(value: number) {
    this.view.setUint32(8, value, true);
  }

  // 0x0c: u32
  set ulCurrentFrequency(value: number) {
    this.view.setUint32(12, value, true);
  }
}

/**
 * Windows.Win32.Media.DirectShow.BDA_SCAN_START (size: 16)
 */
export interface BDA_SCAN_START {
  /** i32 */
  lResult: number;
  /** u32 */
  LowerFrequency: number;
  /** u32 */
  HigerFrequency: number;
}

export const sizeofBDA_SCAN_START = 16;

export function allocBDA_SCAN_START(data?: Partial<BDA_SCAN_START>): Uint8Array {
  const buf = new Uint8Array(sizeofBDA_SCAN_START);
  const view = new DataView(buf.buffer);
  // 0x00: i32
  if (data?.lResult !== undefined) view.setInt32(0, Number(data.lResult), true);
  // 0x04: u32
  if (data?.LowerFrequency !== undefined) view.setUint32(4, Number(data.LowerFrequency), true);
  // 0x08: u32
  if (data?.HigerFrequency !== undefined) view.setUint32(8, Number(data.HigerFrequency), true);
  // 0x0c: pad4
  return buf;
}

export class BDA_SCAN_STARTView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: i32
  get lResult(): number {
    return this.view.getInt32(0, true);
  }

  // 0x04: u32
  get LowerFrequency(): number {
    return this.view.getUint32(4, true);
  }

  // 0x08: u32
  get HigerFrequency(): number {
    return this.view.getUint32(8, true);
  }

  // 0x0c: pad4

  // 0x00: i32
  set lResult(value: number) {
    this.view.setInt32(0, value, true);
  }

  // 0x04: u32
  set LowerFrequency(value: number) {
    this.view.setUint32(4, value, true);
  }

  // 0x08: u32
  set HigerFrequency(value: number) {
    this.view.setUint32(8, value, true);
  }

  // 0x0c: pad4
}

/**
 * Windows.Win32.Media.DirectShow.BDA_GDDS_DATATYPE (size: 16)
 */
export interface BDA_GDDS_DATATYPE {
  /** i32 */
  lResult: number;
  /** System.Guid */
  uuidDataType: Uint8Array | Deno.PointerValue | null;
}

export const sizeofBDA_GDDS_DATATYPE = 16;

export function allocBDA_GDDS_DATATYPE(data?: Partial<BDA_GDDS_DATATYPE>): Uint8Array {
  const buf = new Uint8Array(sizeofBDA_GDDS_DATATYPE);
  const view = new DataView(buf.buffer);
  // 0x00: i32
  if (data?.lResult !== undefined) view.setInt32(0, Number(data.lResult), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.uuidDataType !== undefined) view.setBigUint64(8, data.uuidDataType === null ? 0n : BigInt(util.toPointer(data.uuidDataType)), true);
  return buf;
}

export class BDA_GDDS_DATATYPEView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: i32
  get lResult(): number {
    return this.view.getInt32(0, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  get uuidDataType(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(8, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: i32
  set lResult(value: number) {
    this.view.setInt32(0, value, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  set uuidDataType(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(8, BigInt(util.toPointer(value)), true);
  }
}

/**
 * Windows.Win32.Media.DirectShow.BDA_GDDS_DATA (size: 24)
 */
export interface BDA_GDDS_DATA {
  /** i32 */
  lResult: number;
  /** u32 */
  ulDataLength: number;
  /** u32 */
  ulPercentageProgress: number;
  /** array */
  argbData: Deno.PointerValue | null;
}

export const sizeofBDA_GDDS_DATA = 24;

export function allocBDA_GDDS_DATA(data?: Partial<BDA_GDDS_DATA>): Uint8Array {
  const buf = new Uint8Array(sizeofBDA_GDDS_DATA);
  const view = new DataView(buf.buffer);
  // 0x00: i32
  if (data?.lResult !== undefined) view.setInt32(0, Number(data.lResult), true);
  // 0x04: u32
  if (data?.ulDataLength !== undefined) view.setUint32(4, Number(data.ulDataLength), true);
  // 0x08: u32
  if (data?.ulPercentageProgress !== undefined) view.setUint32(8, Number(data.ulPercentageProgress), true);
  // 0x0c: pad4
  // 0x10: pointer
  if (data?.argbData !== undefined) view.setBigUint64(16, data.argbData === null ? 0n : BigInt(util.toPointer(data.argbData)), true);
  return buf;
}

export class BDA_GDDS_DATAView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: i32
  get lResult(): number {
    return this.view.getInt32(0, true);
  }

  // 0x04: u32
  get ulDataLength(): number {
    return this.view.getUint32(4, true);
  }

  // 0x08: u32
  get ulPercentageProgress(): number {
    return this.view.getUint32(8, true);
  }

  // 0x0c: pad4

  // 0x10: pointer
  get argbData(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(16, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: i32
  set lResult(value: number) {
    this.view.setInt32(0, value, true);
  }

  // 0x04: u32
  set ulDataLength(value: number) {
    this.view.setUint32(4, value, true);
  }

  // 0x08: u32
  set ulPercentageProgress(value: number) {
    this.view.setUint32(8, value, true);
  }

  // 0x0c: pad4

  // 0x10: pointer
  set argbData(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(16, BigInt(util.toPointer(value)), true);
  }
}

/**
 * Windows.Win32.Media.DirectShow.BDA_USERACTIVITY_INTERVAL (size: 8)
 */
export interface BDA_USERACTIVITY_INTERVAL {
  /** i32 */
  lResult: number;
  /** u32 */
  ulActivityInterval: number;
}

export const sizeofBDA_USERACTIVITY_INTERVAL = 8;

export function allocBDA_USERACTIVITY_INTERVAL(data?: Partial<BDA_USERACTIVITY_INTERVAL>): Uint8Array {
  const buf = new Uint8Array(sizeofBDA_USERACTIVITY_INTERVAL);
  const view = new DataView(buf.buffer);
  // 0x00: i32
  if (data?.lResult !== undefined) view.setInt32(0, Number(data.lResult), true);
  // 0x04: u32
  if (data?.ulActivityInterval !== undefined) view.setUint32(4, Number(data.ulActivityInterval), true);
  return buf;
}

export class BDA_USERACTIVITY_INTERVALView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: i32
  get lResult(): number {
    return this.view.getInt32(0, true);
  }

  // 0x04: u32
  get ulActivityInterval(): number {
    return this.view.getUint32(4, true);
  }

  // 0x00: i32
  set lResult(value: number) {
    this.view.setInt32(0, value, true);
  }

  // 0x04: u32
  set ulActivityInterval(value: number) {
    this.view.setUint32(4, value, true);
  }
}

/**
 * Windows.Win32.Media.DirectShow.BDA_CAS_CHECK_ENTITLEMENTTOKEN (size: 8)
 */
export interface BDA_CAS_CHECK_ENTITLEMENTTOKEN {
  /** i32 */
  lResult: number;
  /** u32 */
  ulDescrambleStatus: number;
}

export const sizeofBDA_CAS_CHECK_ENTITLEMENTTOKEN = 8;

export function allocBDA_CAS_CHECK_ENTITLEMENTTOKEN(data?: Partial<BDA_CAS_CHECK_ENTITLEMENTTOKEN>): Uint8Array {
  const buf = new Uint8Array(sizeofBDA_CAS_CHECK_ENTITLEMENTTOKEN);
  const view = new DataView(buf.buffer);
  // 0x00: i32
  if (data?.lResult !== undefined) view.setInt32(0, Number(data.lResult), true);
  // 0x04: u32
  if (data?.ulDescrambleStatus !== undefined) view.setUint32(4, Number(data.ulDescrambleStatus), true);
  return buf;
}

export class BDA_CAS_CHECK_ENTITLEMENTTOKENView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: i32
  get lResult(): number {
    return this.view.getInt32(0, true);
  }

  // 0x04: u32
  get ulDescrambleStatus(): number {
    return this.view.getUint32(4, true);
  }

  // 0x00: i32
  set lResult(value: number) {
    this.view.setInt32(0, value, true);
  }

  // 0x04: u32
  set ulDescrambleStatus(value: number) {
    this.view.setUint32(4, value, true);
  }
}

/**
 * Windows.Win32.Media.DirectShow.BDA_CAS_CLOSE_MMIDIALOG (size: 8)
 */
export interface BDA_CAS_CLOSE_MMIDIALOG {
  /** i32 */
  lResult: number;
  /** u32 */
  SessionResult: number;
}

export const sizeofBDA_CAS_CLOSE_MMIDIALOG = 8;

export function allocBDA_CAS_CLOSE_MMIDIALOG(data?: Partial<BDA_CAS_CLOSE_MMIDIALOG>): Uint8Array {
  const buf = new Uint8Array(sizeofBDA_CAS_CLOSE_MMIDIALOG);
  const view = new DataView(buf.buffer);
  // 0x00: i32
  if (data?.lResult !== undefined) view.setInt32(0, Number(data.lResult), true);
  // 0x04: u32
  if (data?.SessionResult !== undefined) view.setUint32(4, Number(data.SessionResult), true);
  return buf;
}

export class BDA_CAS_CLOSE_MMIDIALOGView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: i32
  get lResult(): number {
    return this.view.getInt32(0, true);
  }

  // 0x04: u32
  get SessionResult(): number {
    return this.view.getUint32(4, true);
  }

  // 0x00: i32
  set lResult(value: number) {
    this.view.setInt32(0, value, true);
  }

  // 0x04: u32
  set SessionResult(value: number) {
    this.view.setUint32(4, value, true);
  }
}

/**
 * Windows.Win32.Media.DirectShow.BDA_CAS_REQUESTTUNERDATA (size: 8)
 */
export interface BDA_CAS_REQUESTTUNERDATA {
  /** u8 */
  ucRequestPriority: number;
  /** u8 */
  ucRequestReason: number;
  /** u8 */
  ucRequestConsequences: number;
  /** u32 */
  ulEstimatedTime: number;
}

export const sizeofBDA_CAS_REQUESTTUNERDATA = 8;

export function allocBDA_CAS_REQUESTTUNERDATA(data?: Partial<BDA_CAS_REQUESTTUNERDATA>): Uint8Array {
  const buf = new Uint8Array(sizeofBDA_CAS_REQUESTTUNERDATA);
  const view = new DataView(buf.buffer);
  // 0x00: u8
  if (data?.ucRequestPriority !== undefined) view.setUint8(0, Number(data.ucRequestPriority));
  // 0x01: u8
  if (data?.ucRequestReason !== undefined) view.setUint8(1, Number(data.ucRequestReason));
  // 0x02: u8
  if (data?.ucRequestConsequences !== undefined) view.setUint8(2, Number(data.ucRequestConsequences));
  // 0x03: u32
  if (data?.ulEstimatedTime !== undefined) view.setUint32(3, Number(data.ulEstimatedTime), true);
  // 0x07: pad1
  return buf;
}

export class BDA_CAS_REQUESTTUNERDATAView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u8
  get ucRequestPriority(): number {
    return this.view.getUint8(0);
  }

  // 0x01: u8
  get ucRequestReason(): number {
    return this.view.getUint8(1);
  }

  // 0x02: u8
  get ucRequestConsequences(): number {
    return this.view.getUint8(2);
  }

  // 0x03: u32
  get ulEstimatedTime(): number {
    return this.view.getUint32(3, true);
  }

  // 0x07: pad1

  // 0x00: u8
  set ucRequestPriority(value: number) {
    this.view.setUint8(0, value);
  }

  // 0x01: u8
  set ucRequestReason(value: number) {
    this.view.setUint8(1, value);
  }

  // 0x02: u8
  set ucRequestConsequences(value: number) {
    this.view.setUint8(2, value);
  }

  // 0x03: u32
  set ulEstimatedTime(value: number) {
    this.view.setUint32(3, value, true);
  }

  // 0x07: pad1
}

/**
 * Windows.Win32.Media.DirectShow.BDA_CAS_OPENMMIDATA (size: 32)
 */
export interface BDA_CAS_OPENMMIDATA {
  /** u32 */
  ulDialogNumber: number;
  /** u32 */
  ulDialogRequest: number;
  /** System.Guid */
  uuidDialogType: Uint8Array | Deno.PointerValue | null;
  /** u16 */
  usDialogDataLength: number;
  /** array */
  argbDialogData: Deno.PointerValue | null;
}

export const sizeofBDA_CAS_OPENMMIDATA = 32;

export function allocBDA_CAS_OPENMMIDATA(data?: Partial<BDA_CAS_OPENMMIDATA>): Uint8Array {
  const buf = new Uint8Array(sizeofBDA_CAS_OPENMMIDATA);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.ulDialogNumber !== undefined) view.setUint32(0, Number(data.ulDialogNumber), true);
  // 0x04: u32
  if (data?.ulDialogRequest !== undefined) view.setUint32(4, Number(data.ulDialogRequest), true);
  // 0x08: pointer
  if (data?.uuidDialogType !== undefined) view.setBigUint64(8, data.uuidDialogType === null ? 0n : BigInt(util.toPointer(data.uuidDialogType)), true);
  // 0x10: u16
  if (data?.usDialogDataLength !== undefined) view.setUint16(16, Number(data.usDialogDataLength), true);
  // 0x12: pad6
  // 0x18: pointer
  if (data?.argbDialogData !== undefined) view.setBigUint64(24, data.argbDialogData === null ? 0n : BigInt(util.toPointer(data.argbDialogData)), true);
  return buf;
}

export class BDA_CAS_OPENMMIDATAView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get ulDialogNumber(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: u32
  get ulDialogRequest(): number {
    return this.view.getUint32(4, true);
  }

  // 0x08: pointer
  get uuidDialogType(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(8, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x10: u16
  get usDialogDataLength(): number {
    return this.view.getUint16(16, true);
  }

  // 0x12: pad6

  // 0x18: pointer
  get argbDialogData(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(24, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: u32
  set ulDialogNumber(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: u32
  set ulDialogRequest(value: number) {
    this.view.setUint32(4, value, true);
  }

  // 0x08: pointer
  set uuidDialogType(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(8, BigInt(util.toPointer(value)), true);
  }

  // 0x10: u16
  set usDialogDataLength(value: number) {
    this.view.setUint16(16, value, true);
  }

  // 0x12: pad6

  // 0x18: pointer
  set argbDialogData(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(24, BigInt(util.toPointer(value)), true);
  }
}

/**
 * Windows.Win32.Media.DirectShow.BDA_CAS_CLOSEMMIDATA (size: 8)
 */
export interface BDA_CAS_CLOSEMMIDATA {
  /** u32 */
  ulDialogNumber: number;
}

export const sizeofBDA_CAS_CLOSEMMIDATA = 8;

export function allocBDA_CAS_CLOSEMMIDATA(data?: Partial<BDA_CAS_CLOSEMMIDATA>): Uint8Array {
  const buf = new Uint8Array(sizeofBDA_CAS_CLOSEMMIDATA);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.ulDialogNumber !== undefined) view.setUint32(0, Number(data.ulDialogNumber), true);
  // 0x04: pad4
  return buf;
}

export class BDA_CAS_CLOSEMMIDATAView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get ulDialogNumber(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: pad4

  // 0x00: u32
  set ulDialogNumber(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: pad4
}

/**
 * Windows.Win32.Media.DirectShow.BDA_ISDBCAS_REQUESTHEADER (size: 32)
 */
export interface BDA_ISDBCAS_REQUESTHEADER {
  /** u8 */
  bInstruction: number;
  /** array */
  bReserved: Deno.PointerValue | null;
  /** u32 */
  ulDataLength: number;
  /** array */
  argbIsdbCommand: Deno.PointerValue | null;
}

export const sizeofBDA_ISDBCAS_REQUESTHEADER = 32;

export function allocBDA_ISDBCAS_REQUESTHEADER(data?: Partial<BDA_ISDBCAS_REQUESTHEADER>): Uint8Array {
  const buf = new Uint8Array(sizeofBDA_ISDBCAS_REQUESTHEADER);
  const view = new DataView(buf.buffer);
  // 0x00: u8
  if (data?.bInstruction !== undefined) view.setUint8(0, Number(data.bInstruction));
  // 0x01: pad7
  // 0x08: pointer
  if (data?.bReserved !== undefined) view.setBigUint64(8, data.bReserved === null ? 0n : BigInt(util.toPointer(data.bReserved)), true);
  // 0x10: u32
  if (data?.ulDataLength !== undefined) view.setUint32(16, Number(data.ulDataLength), true);
  // 0x14: pad4
  // 0x18: pointer
  if (data?.argbIsdbCommand !== undefined) view.setBigUint64(24, data.argbIsdbCommand === null ? 0n : BigInt(util.toPointer(data.argbIsdbCommand)), true);
  return buf;
}

export class BDA_ISDBCAS_REQUESTHEADERView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u8
  get bInstruction(): number {
    return this.view.getUint8(0);
  }

  // 0x01: pad7

  // 0x08: pointer
  get bReserved(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(8, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x10: u32
  get ulDataLength(): number {
    return this.view.getUint32(16, true);
  }

  // 0x14: pad4

  // 0x18: pointer
  get argbIsdbCommand(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(24, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: u8
  set bInstruction(value: number) {
    this.view.setUint8(0, value);
  }

  // 0x01: pad7

  // 0x08: pointer
  set bReserved(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(8, BigInt(util.toPointer(value)), true);
  }

  // 0x10: u32
  set ulDataLength(value: number) {
    this.view.setUint32(16, value, true);
  }

  // 0x14: pad4

  // 0x18: pointer
  set argbIsdbCommand(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(24, BigInt(util.toPointer(value)), true);
  }
}

/**
 * Windows.Win32.Media.DirectShow.BDA_ISDBCAS_RESPONSEDATA (size: 24)
 */
export interface BDA_ISDBCAS_RESPONSEDATA {
  /** i32 */
  lResult: number;
  /** u32 */
  ulRequestID: number;
  /** u32 */
  ulIsdbStatus: number;
  /** u32 */
  ulIsdbDataSize: number;
  /** array */
  argbIsdbCommandData: Deno.PointerValue | null;
}

export const sizeofBDA_ISDBCAS_RESPONSEDATA = 24;

export function allocBDA_ISDBCAS_RESPONSEDATA(data?: Partial<BDA_ISDBCAS_RESPONSEDATA>): Uint8Array {
  const buf = new Uint8Array(sizeofBDA_ISDBCAS_RESPONSEDATA);
  const view = new DataView(buf.buffer);
  // 0x00: i32
  if (data?.lResult !== undefined) view.setInt32(0, Number(data.lResult), true);
  // 0x04: u32
  if (data?.ulRequestID !== undefined) view.setUint32(4, Number(data.ulRequestID), true);
  // 0x08: u32
  if (data?.ulIsdbStatus !== undefined) view.setUint32(8, Number(data.ulIsdbStatus), true);
  // 0x0c: u32
  if (data?.ulIsdbDataSize !== undefined) view.setUint32(12, Number(data.ulIsdbDataSize), true);
  // 0x10: pointer
  if (data?.argbIsdbCommandData !== undefined) view.setBigUint64(16, data.argbIsdbCommandData === null ? 0n : BigInt(util.toPointer(data.argbIsdbCommandData)), true);
  return buf;
}

export class BDA_ISDBCAS_RESPONSEDATAView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: i32
  get lResult(): number {
    return this.view.getInt32(0, true);
  }

  // 0x04: u32
  get ulRequestID(): number {
    return this.view.getUint32(4, true);
  }

  // 0x08: u32
  get ulIsdbStatus(): number {
    return this.view.getUint32(8, true);
  }

  // 0x0c: u32
  get ulIsdbDataSize(): number {
    return this.view.getUint32(12, true);
  }

  // 0x10: pointer
  get argbIsdbCommandData(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(16, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: i32
  set lResult(value: number) {
    this.view.setInt32(0, value, true);
  }

  // 0x04: u32
  set ulRequestID(value: number) {
    this.view.setUint32(4, value, true);
  }

  // 0x08: u32
  set ulIsdbStatus(value: number) {
    this.view.setUint32(8, value, true);
  }

  // 0x0c: u32
  set ulIsdbDataSize(value: number) {
    this.view.setUint32(12, value, true);
  }

  // 0x10: pointer
  set argbIsdbCommandData(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(16, BigInt(util.toPointer(value)), true);
  }
}

/**
 * Windows.Win32.Media.DirectShow.BDA_ISDBCAS_EMG_REQ (size: 32)
 */
export interface BDA_ISDBCAS_EMG_REQ {
  /** u8 */
  bCLA: number;
  /** u8 */
  bINS: number;
  /** u8 */
  bP1: number;
  /** u8 */
  bP2: number;
  /** u8 */
  bLC: number;
  /** array */
  bCardId: Deno.PointerValue | null;
  /** u8 */
  bProtocol: number;
  /** u8 */
  bCABroadcasterGroupId: number;
  /** u8 */
  bMessageControl: number;
  /** array */
  bMessageCode: Deno.PointerValue | null;
}

export const sizeofBDA_ISDBCAS_EMG_REQ = 32;

export function allocBDA_ISDBCAS_EMG_REQ(data?: Partial<BDA_ISDBCAS_EMG_REQ>): Uint8Array {
  const buf = new Uint8Array(sizeofBDA_ISDBCAS_EMG_REQ);
  const view = new DataView(buf.buffer);
  // 0x00: u8
  if (data?.bCLA !== undefined) view.setUint8(0, Number(data.bCLA));
  // 0x01: u8
  if (data?.bINS !== undefined) view.setUint8(1, Number(data.bINS));
  // 0x02: u8
  if (data?.bP1 !== undefined) view.setUint8(2, Number(data.bP1));
  // 0x03: u8
  if (data?.bP2 !== undefined) view.setUint8(3, Number(data.bP2));
  // 0x04: u8
  if (data?.bLC !== undefined) view.setUint8(4, Number(data.bLC));
  // 0x05: pad3
  // 0x08: pointer
  if (data?.bCardId !== undefined) view.setBigUint64(8, data.bCardId === null ? 0n : BigInt(util.toPointer(data.bCardId)), true);
  // 0x10: u8
  if (data?.bProtocol !== undefined) view.setUint8(16, Number(data.bProtocol));
  // 0x11: u8
  if (data?.bCABroadcasterGroupId !== undefined) view.setUint8(17, Number(data.bCABroadcasterGroupId));
  // 0x12: u8
  if (data?.bMessageControl !== undefined) view.setUint8(18, Number(data.bMessageControl));
  // 0x13: pad5
  // 0x18: pointer
  if (data?.bMessageCode !== undefined) view.setBigUint64(24, data.bMessageCode === null ? 0n : BigInt(util.toPointer(data.bMessageCode)), true);
  return buf;
}

export class BDA_ISDBCAS_EMG_REQView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u8
  get bCLA(): number {
    return this.view.getUint8(0);
  }

  // 0x01: u8
  get bINS(): number {
    return this.view.getUint8(1);
  }

  // 0x02: u8
  get bP1(): number {
    return this.view.getUint8(2);
  }

  // 0x03: u8
  get bP2(): number {
    return this.view.getUint8(3);
  }

  // 0x04: u8
  get bLC(): number {
    return this.view.getUint8(4);
  }

  // 0x05: pad3

  // 0x08: pointer
  get bCardId(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(8, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x10: u8
  get bProtocol(): number {
    return this.view.getUint8(16);
  }

  // 0x11: u8
  get bCABroadcasterGroupId(): number {
    return this.view.getUint8(17);
  }

  // 0x12: u8
  get bMessageControl(): number {
    return this.view.getUint8(18);
  }

  // 0x13: pad5

  // 0x18: pointer
  get bMessageCode(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(24, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: u8
  set bCLA(value: number) {
    this.view.setUint8(0, value);
  }

  // 0x01: u8
  set bINS(value: number) {
    this.view.setUint8(1, value);
  }

  // 0x02: u8
  set bP1(value: number) {
    this.view.setUint8(2, value);
  }

  // 0x03: u8
  set bP2(value: number) {
    this.view.setUint8(3, value);
  }

  // 0x04: u8
  set bLC(value: number) {
    this.view.setUint8(4, value);
  }

  // 0x05: pad3

  // 0x08: pointer
  set bCardId(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(8, BigInt(util.toPointer(value)), true);
  }

  // 0x10: u8
  set bProtocol(value: number) {
    this.view.setUint8(16, value);
  }

  // 0x11: u8
  set bCABroadcasterGroupId(value: number) {
    this.view.setUint8(17, value);
  }

  // 0x12: u8
  set bMessageControl(value: number) {
    this.view.setUint8(18, value);
  }

  // 0x13: pad5

  // 0x18: pointer
  set bMessageCode(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(24, BigInt(util.toPointer(value)), true);
  }
}

/**
 * Windows.Win32.Media.DirectShow.BDA_MUX_PIDLISTITEM (size: 8)
 */
export interface BDA_MUX_PIDLISTITEM {
  /** u16 */
  usPIDNumber: number;
  /** u16 */
  usProgramNumber: number;
  /** Windows.Win32.Media.DirectShow.MUX_PID_TYPE */
  ePIDType: MUX_PID_TYPE;
}

export const sizeofBDA_MUX_PIDLISTITEM = 8;

export function allocBDA_MUX_PIDLISTITEM(data?: Partial<BDA_MUX_PIDLISTITEM>): Uint8Array {
  const buf = new Uint8Array(sizeofBDA_MUX_PIDLISTITEM);
  const view = new DataView(buf.buffer);
  // 0x00: u16
  if (data?.usPIDNumber !== undefined) view.setUint16(0, Number(data.usPIDNumber), true);
  // 0x02: u16
  if (data?.usProgramNumber !== undefined) view.setUint16(2, Number(data.usProgramNumber), true);
  // 0x04: i32
  if (data?.ePIDType !== undefined) view.setInt32(4, Number(data.ePIDType), true);
  return buf;
}

export class BDA_MUX_PIDLISTITEMView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u16
  get usPIDNumber(): number {
    return this.view.getUint16(0, true);
  }

  // 0x02: u16
  get usProgramNumber(): number {
    return this.view.getUint16(2, true);
  }

  // 0x04: i32
  get ePIDType(): number {
    return this.view.getInt32(4, true);
  }

  // 0x00: u16
  set usPIDNumber(value: number) {
    this.view.setUint16(0, value, true);
  }

  // 0x02: u16
  set usProgramNumber(value: number) {
    this.view.setUint16(2, value, true);
  }

  // 0x04: i32
  set ePIDType(value: number) {
    this.view.setInt32(4, value, true);
  }
}

/**
 * Windows.Win32.Media.DirectShow.BDA_TS_SELECTORINFO (size: 40)
 */
export interface BDA_TS_SELECTORINFO {
  /** u8 */
  bTSInfolength: number;
  /** array */
  bReserved: Deno.PointerValue | null;
  /** System.Guid */
  guidNetworkType: Uint8Array | Deno.PointerValue | null;
  /** u8 */
  bTSIDCount: number;
  /** array */
  usTSID: Deno.PointerValue | null;
}

export const sizeofBDA_TS_SELECTORINFO = 40;

export function allocBDA_TS_SELECTORINFO(data?: Partial<BDA_TS_SELECTORINFO>): Uint8Array {
  const buf = new Uint8Array(sizeofBDA_TS_SELECTORINFO);
  const view = new DataView(buf.buffer);
  // 0x00: u8
  if (data?.bTSInfolength !== undefined) view.setUint8(0, Number(data.bTSInfolength));
  // 0x01: pad7
  // 0x08: pointer
  if (data?.bReserved !== undefined) view.setBigUint64(8, data.bReserved === null ? 0n : BigInt(util.toPointer(data.bReserved)), true);
  // 0x10: pointer
  if (data?.guidNetworkType !== undefined) view.setBigUint64(16, data.guidNetworkType === null ? 0n : BigInt(util.toPointer(data.guidNetworkType)), true);
  // 0x18: u8
  if (data?.bTSIDCount !== undefined) view.setUint8(24, Number(data.bTSIDCount));
  // 0x19: pad7
  // 0x20: pointer
  if (data?.usTSID !== undefined) view.setBigUint64(32, data.usTSID === null ? 0n : BigInt(util.toPointer(data.usTSID)), true);
  return buf;
}

export class BDA_TS_SELECTORINFOView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u8
  get bTSInfolength(): number {
    return this.view.getUint8(0);
  }

  // 0x01: pad7

  // 0x08: pointer
  get bReserved(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(8, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x10: pointer
  get guidNetworkType(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(16, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x18: u8
  get bTSIDCount(): number {
    return this.view.getUint8(24);
  }

  // 0x19: pad7

  // 0x20: pointer
  get usTSID(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(32, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: u8
  set bTSInfolength(value: number) {
    this.view.setUint8(0, value);
  }

  // 0x01: pad7

  // 0x08: pointer
  set bReserved(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(8, BigInt(util.toPointer(value)), true);
  }

  // 0x10: pointer
  set guidNetworkType(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(16, BigInt(util.toPointer(value)), true);
  }

  // 0x18: u8
  set bTSIDCount(value: number) {
    this.view.setUint8(24, value);
  }

  // 0x19: pad7

  // 0x20: pointer
  set usTSID(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(32, BigInt(util.toPointer(value)), true);
  }
}

/**
 * Windows.Win32.Media.DirectShow.BDA_TS_SELECTORINFO_ISDBS_EXT (size: 8)
 */
export interface BDA_TS_SELECTORINFO_ISDBS_EXT {
  /** array */
  bTMCC: Deno.PointerValue | null;
}

export const sizeofBDA_TS_SELECTORINFO_ISDBS_EXT = 8;

export function allocBDA_TS_SELECTORINFO_ISDBS_EXT(data?: Partial<BDA_TS_SELECTORINFO_ISDBS_EXT>): Uint8Array {
  const buf = new Uint8Array(sizeofBDA_TS_SELECTORINFO_ISDBS_EXT);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.bTMCC !== undefined) view.setBigUint64(0, data.bTMCC === null ? 0n : BigInt(util.toPointer(data.bTMCC)), true);
  return buf;
}

export class BDA_TS_SELECTORINFO_ISDBS_EXTView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get bTMCC(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(0, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: pointer
  set bTMCC(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(0, BigInt(util.toPointer(value)), true);
  }
}

/**
 * Windows.Win32.Media.DirectShow.BDA_DVBT2_L1_SIGNALLING_DATA (size: 88)
 */
export interface BDA_DVBT2_L1_SIGNALLING_DATA {
  /** u8 */
  L1Pre_TYPE: number;
  /** u8 */
  L1Pre_BWT_S1_S2: number;
  /** u8 */
  L1Pre_REPETITION_GUARD_PAPR: number;
  /** u8 */
  L1Pre_MOD_COD_FEC: number;
  /** array */
  L1Pre_POSTSIZE_INFO_PILOT: Deno.PointerValue | null;
  /** u8 */
  L1Pre_TX_ID_AVAIL: number;
  /** array */
  L1Pre_CELL_ID: Deno.PointerValue | null;
  /** array */
  L1Pre_NETWORK_ID: Deno.PointerValue | null;
  /** array */
  L1Pre_T2SYSTEM_ID: Deno.PointerValue | null;
  /** u8 */
  L1Pre_NUM_T2_FRAMES: number;
  /** array */
  L1Pre_NUM_DATA_REGENFLAG_L1POSTEXT: Deno.PointerValue | null;
  /** array */
  L1Pre_NUMRF_CURRENTRF_RESERVED: Deno.PointerValue | null;
  /** array */
  L1Pre_CRC32: Deno.PointerValue | null;
  /** array */
  L1PostData: Deno.PointerValue | null;
}

export const sizeofBDA_DVBT2_L1_SIGNALLING_DATA = 88;

export function allocBDA_DVBT2_L1_SIGNALLING_DATA(data?: Partial<BDA_DVBT2_L1_SIGNALLING_DATA>): Uint8Array {
  const buf = new Uint8Array(sizeofBDA_DVBT2_L1_SIGNALLING_DATA);
  const view = new DataView(buf.buffer);
  // 0x00: u8
  if (data?.L1Pre_TYPE !== undefined) view.setUint8(0, Number(data.L1Pre_TYPE));
  // 0x01: u8
  if (data?.L1Pre_BWT_S1_S2 !== undefined) view.setUint8(1, Number(data.L1Pre_BWT_S1_S2));
  // 0x02: u8
  if (data?.L1Pre_REPETITION_GUARD_PAPR !== undefined) view.setUint8(2, Number(data.L1Pre_REPETITION_GUARD_PAPR));
  // 0x03: u8
  if (data?.L1Pre_MOD_COD_FEC !== undefined) view.setUint8(3, Number(data.L1Pre_MOD_COD_FEC));
  // 0x04: pad4
  // 0x08: pointer
  if (data?.L1Pre_POSTSIZE_INFO_PILOT !== undefined) view.setBigUint64(8, data.L1Pre_POSTSIZE_INFO_PILOT === null ? 0n : BigInt(util.toPointer(data.L1Pre_POSTSIZE_INFO_PILOT)), true);
  // 0x10: u8
  if (data?.L1Pre_TX_ID_AVAIL !== undefined) view.setUint8(16, Number(data.L1Pre_TX_ID_AVAIL));
  // 0x11: pad7
  // 0x18: pointer
  if (data?.L1Pre_CELL_ID !== undefined) view.setBigUint64(24, data.L1Pre_CELL_ID === null ? 0n : BigInt(util.toPointer(data.L1Pre_CELL_ID)), true);
  // 0x20: pointer
  if (data?.L1Pre_NETWORK_ID !== undefined) view.setBigUint64(32, data.L1Pre_NETWORK_ID === null ? 0n : BigInt(util.toPointer(data.L1Pre_NETWORK_ID)), true);
  // 0x28: pointer
  if (data?.L1Pre_T2SYSTEM_ID !== undefined) view.setBigUint64(40, data.L1Pre_T2SYSTEM_ID === null ? 0n : BigInt(util.toPointer(data.L1Pre_T2SYSTEM_ID)), true);
  // 0x30: u8
  if (data?.L1Pre_NUM_T2_FRAMES !== undefined) view.setUint8(48, Number(data.L1Pre_NUM_T2_FRAMES));
  // 0x31: pad7
  // 0x38: pointer
  if (data?.L1Pre_NUM_DATA_REGENFLAG_L1POSTEXT !== undefined) view.setBigUint64(56, data.L1Pre_NUM_DATA_REGENFLAG_L1POSTEXT === null ? 0n : BigInt(util.toPointer(data.L1Pre_NUM_DATA_REGENFLAG_L1POSTEXT)), true);
  // 0x40: pointer
  if (data?.L1Pre_NUMRF_CURRENTRF_RESERVED !== undefined) view.setBigUint64(64, data.L1Pre_NUMRF_CURRENTRF_RESERVED === null ? 0n : BigInt(util.toPointer(data.L1Pre_NUMRF_CURRENTRF_RESERVED)), true);
  // 0x48: pointer
  if (data?.L1Pre_CRC32 !== undefined) view.setBigUint64(72, data.L1Pre_CRC32 === null ? 0n : BigInt(util.toPointer(data.L1Pre_CRC32)), true);
  // 0x50: pointer
  if (data?.L1PostData !== undefined) view.setBigUint64(80, data.L1PostData === null ? 0n : BigInt(util.toPointer(data.L1PostData)), true);
  return buf;
}

export class BDA_DVBT2_L1_SIGNALLING_DATAView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u8
  get L1Pre_TYPE(): number {
    return this.view.getUint8(0);
  }

  // 0x01: u8
  get L1Pre_BWT_S1_S2(): number {
    return this.view.getUint8(1);
  }

  // 0x02: u8
  get L1Pre_REPETITION_GUARD_PAPR(): number {
    return this.view.getUint8(2);
  }

  // 0x03: u8
  get L1Pre_MOD_COD_FEC(): number {
    return this.view.getUint8(3);
  }

  // 0x04: pad4

  // 0x08: pointer
  get L1Pre_POSTSIZE_INFO_PILOT(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(8, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x10: u8
  get L1Pre_TX_ID_AVAIL(): number {
    return this.view.getUint8(16);
  }

  // 0x11: pad7

  // 0x18: pointer
  get L1Pre_CELL_ID(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(24, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x20: pointer
  get L1Pre_NETWORK_ID(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(32, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x28: pointer
  get L1Pre_T2SYSTEM_ID(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(40, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x30: u8
  get L1Pre_NUM_T2_FRAMES(): number {
    return this.view.getUint8(48);
  }

  // 0x31: pad7

  // 0x38: pointer
  get L1Pre_NUM_DATA_REGENFLAG_L1POSTEXT(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(56, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x40: pointer
  get L1Pre_NUMRF_CURRENTRF_RESERVED(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(64, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x48: pointer
  get L1Pre_CRC32(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(72, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x50: pointer
  get L1PostData(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(80, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: u8
  set L1Pre_TYPE(value: number) {
    this.view.setUint8(0, value);
  }

  // 0x01: u8
  set L1Pre_BWT_S1_S2(value: number) {
    this.view.setUint8(1, value);
  }

  // 0x02: u8
  set L1Pre_REPETITION_GUARD_PAPR(value: number) {
    this.view.setUint8(2, value);
  }

  // 0x03: u8
  set L1Pre_MOD_COD_FEC(value: number) {
    this.view.setUint8(3, value);
  }

  // 0x04: pad4

  // 0x08: pointer
  set L1Pre_POSTSIZE_INFO_PILOT(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(8, BigInt(util.toPointer(value)), true);
  }

  // 0x10: u8
  set L1Pre_TX_ID_AVAIL(value: number) {
    this.view.setUint8(16, value);
  }

  // 0x11: pad7

  // 0x18: pointer
  set L1Pre_CELL_ID(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(24, BigInt(util.toPointer(value)), true);
  }

  // 0x20: pointer
  set L1Pre_NETWORK_ID(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(32, BigInt(util.toPointer(value)), true);
  }

  // 0x28: pointer
  set L1Pre_T2SYSTEM_ID(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(40, BigInt(util.toPointer(value)), true);
  }

  // 0x30: u8
  set L1Pre_NUM_T2_FRAMES(value: number) {
    this.view.setUint8(48, value);
  }

  // 0x31: pad7

  // 0x38: pointer
  set L1Pre_NUM_DATA_REGENFLAG_L1POSTEXT(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(56, BigInt(util.toPointer(value)), true);
  }

  // 0x40: pointer
  set L1Pre_NUMRF_CURRENTRF_RESERVED(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(64, BigInt(util.toPointer(value)), true);
  }

  // 0x48: pointer
  set L1Pre_CRC32(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(72, BigInt(util.toPointer(value)), true);
  }

  // 0x50: pointer
  set L1PostData(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(80, BigInt(util.toPointer(value)), true);
  }
}

/**
 * Windows.Win32.Media.DirectShow.BDA_RATING_PINRESET (size: 16)
 */
export interface BDA_RATING_PINRESET {
  /** u8 */
  bPinLength: number;
  /** array */
  argbNewPin: Deno.PointerValue | null;
}

export const sizeofBDA_RATING_PINRESET = 16;

export function allocBDA_RATING_PINRESET(data?: Partial<BDA_RATING_PINRESET>): Uint8Array {
  const buf = new Uint8Array(sizeofBDA_RATING_PINRESET);
  const view = new DataView(buf.buffer);
  // 0x00: u8
  if (data?.bPinLength !== undefined) view.setUint8(0, Number(data.bPinLength));
  // 0x01: pad7
  // 0x08: pointer
  if (data?.argbNewPin !== undefined) view.setBigUint64(8, data.argbNewPin === null ? 0n : BigInt(util.toPointer(data.argbNewPin)), true);
  return buf;
}

export class BDA_RATING_PINRESETView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u8
  get bPinLength(): number {
    return this.view.getUint8(0);
  }

  // 0x01: pad7

  // 0x08: pointer
  get argbNewPin(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(8, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: u8
  set bPinLength(value: number) {
    this.view.setUint8(0, value);
  }

  // 0x01: pad7

  // 0x08: pointer
  set argbNewPin(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(8, BigInt(util.toPointer(value)), true);
  }
}

/**
 * Windows.Win32.Media.DirectShow.MPEG2_TRANSPORT_STRIDE (size: 16)
 */
export interface MPEG2_TRANSPORT_STRIDE {
  /** u32 */
  dwOffset: number;
  /** u32 */
  dwPacketLength: number;
  /** u32 */
  dwStride: number;
}

export const sizeofMPEG2_TRANSPORT_STRIDE = 16;

export function allocMPEG2_TRANSPORT_STRIDE(data?: Partial<MPEG2_TRANSPORT_STRIDE>): Uint8Array {
  const buf = new Uint8Array(sizeofMPEG2_TRANSPORT_STRIDE);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.dwOffset !== undefined) view.setUint32(0, Number(data.dwOffset), true);
  // 0x04: u32
  if (data?.dwPacketLength !== undefined) view.setUint32(4, Number(data.dwPacketLength), true);
  // 0x08: u32
  if (data?.dwStride !== undefined) view.setUint32(8, Number(data.dwStride), true);
  // 0x0c: pad4
  return buf;
}

export class MPEG2_TRANSPORT_STRIDEView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get dwOffset(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: u32
  get dwPacketLength(): number {
    return this.view.getUint32(4, true);
  }

  // 0x08: u32
  get dwStride(): number {
    return this.view.getUint32(8, true);
  }

  // 0x0c: pad4

  // 0x00: u32
  set dwOffset(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: u32
  set dwPacketLength(value: number) {
    this.view.setUint32(4, value, true);
  }

  // 0x08: u32
  set dwStride(value: number) {
    this.view.setUint32(8, value, true);
  }

  // 0x0c: pad4
}

/**
 * Windows.Win32.Media.DirectShow.BDA_SIGNAL_TIMEOUTS (size: 16)
 */
export interface BDA_SIGNAL_TIMEOUTS {
  /** u32 */
  ulCarrierTimeoutMs: number;
  /** u32 */
  ulScanningTimeoutMs: number;
  /** u32 */
  ulTuningTimeoutMs: number;
}

export const sizeofBDA_SIGNAL_TIMEOUTS = 16;

export function allocBDA_SIGNAL_TIMEOUTS(data?: Partial<BDA_SIGNAL_TIMEOUTS>): Uint8Array {
  const buf = new Uint8Array(sizeofBDA_SIGNAL_TIMEOUTS);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.ulCarrierTimeoutMs !== undefined) view.setUint32(0, Number(data.ulCarrierTimeoutMs), true);
  // 0x04: u32
  if (data?.ulScanningTimeoutMs !== undefined) view.setUint32(4, Number(data.ulScanningTimeoutMs), true);
  // 0x08: u32
  if (data?.ulTuningTimeoutMs !== undefined) view.setUint32(8, Number(data.ulTuningTimeoutMs), true);
  // 0x0c: pad4
  return buf;
}

export class BDA_SIGNAL_TIMEOUTSView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get ulCarrierTimeoutMs(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: u32
  get ulScanningTimeoutMs(): number {
    return this.view.getUint32(4, true);
  }

  // 0x08: u32
  get ulTuningTimeoutMs(): number {
    return this.view.getUint32(8, true);
  }

  // 0x0c: pad4

  // 0x00: u32
  set ulCarrierTimeoutMs(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: u32
  set ulScanningTimeoutMs(value: number) {
    this.view.setUint32(4, value, true);
  }

  // 0x08: u32
  set ulTuningTimeoutMs(value: number) {
    this.view.setUint32(8, value, true);
  }

  // 0x0c: pad4
}

/**
 * Windows.Win32.Media.DirectShow.EALocationCodeType (size: 8)
 */
export interface EALocationCodeType {
  /** Windows.Win32.Media.DirectShow.LocationCodeSchemeType */
  LocationCodeScheme: LocationCodeSchemeType;
  /** u8 */
  state_code: number;
  /** u8 */
  county_subdivision: number;
  /** u16 */
  county_code: number;
}

export const sizeofEALocationCodeType = 8;

export function allocEALocationCodeType(data?: Partial<EALocationCodeType>): Uint8Array {
  const buf = new Uint8Array(sizeofEALocationCodeType);
  const view = new DataView(buf.buffer);
  // 0x00: i32
  if (data?.LocationCodeScheme !== undefined) view.setInt32(0, Number(data.LocationCodeScheme), true);
  // 0x04: u8
  if (data?.state_code !== undefined) view.setUint8(4, Number(data.state_code));
  // 0x05: u8
  if (data?.county_subdivision !== undefined) view.setUint8(5, Number(data.county_subdivision));
  // 0x06: u16
  if (data?.county_code !== undefined) view.setUint16(6, Number(data.county_code), true);
  return buf;
}

export class EALocationCodeTypeView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: i32
  get LocationCodeScheme(): number {
    return this.view.getInt32(0, true);
  }

  // 0x04: u8
  get state_code(): number {
    return this.view.getUint8(4);
  }

  // 0x05: u8
  get county_subdivision(): number {
    return this.view.getUint8(5);
  }

  // 0x06: u16
  get county_code(): number {
    return this.view.getUint16(6, true);
  }

  // 0x00: i32
  set LocationCodeScheme(value: number) {
    this.view.setInt32(0, value, true);
  }

  // 0x04: u8
  set state_code(value: number) {
    this.view.setUint8(4, value);
  }

  // 0x05: u8
  set county_subdivision(value: number) {
    this.view.setUint8(5, value);
  }

  // 0x06: u16
  set county_code(value: number) {
    this.view.setUint16(6, value, true);
  }
}

export type BSTR = Deno.PointerValue | Uint8Array | null;

/**
 * Windows.Win32.Media.DirectShow.SmartCardApplication (size: 24)
 */
export interface SmartCardApplication {
  /** Windows.Win32.Media.DirectShow.ApplicationTypeType */
  ApplicationType: ApplicationTypeType;
  /** u16 */
  ApplicationVersion: number;
  /** Windows.Win32.Foundation.BSTR */
  pbstrApplicationName: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Foundation.BSTR */
  pbstrApplicationURL: Uint8Array | Deno.PointerValue | null;
}

export const sizeofSmartCardApplication = 24;

export function allocSmartCardApplication(data?: Partial<SmartCardApplication>): Uint8Array {
  const buf = new Uint8Array(sizeofSmartCardApplication);
  const view = new DataView(buf.buffer);
  // 0x00: i32
  if (data?.ApplicationType !== undefined) view.setInt32(0, Number(data.ApplicationType), true);
  // 0x04: u16
  if (data?.ApplicationVersion !== undefined) view.setUint16(4, Number(data.ApplicationVersion), true);
  // 0x06: pad2
  // 0x08: pointer
  if (data?.pbstrApplicationName !== undefined) view.setBigUint64(8, data.pbstrApplicationName === null ? 0n : BigInt(util.toPointer(data.pbstrApplicationName)), true);
  // 0x10: pointer
  if (data?.pbstrApplicationURL !== undefined) view.setBigUint64(16, data.pbstrApplicationURL === null ? 0n : BigInt(util.toPointer(data.pbstrApplicationURL)), true);
  return buf;
}

export class SmartCardApplicationView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: i32
  get ApplicationType(): number {
    return this.view.getInt32(0, true);
  }

  // 0x04: u16
  get ApplicationVersion(): number {
    return this.view.getUint16(4, true);
  }

  // 0x06: pad2

  // 0x08: pointer
  get pbstrApplicationName(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(8, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x10: pointer
  get pbstrApplicationURL(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(16, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: i32
  set ApplicationType(value: number) {
    this.view.setInt32(0, value, true);
  }

  // 0x04: u16
  set ApplicationVersion(value: number) {
    this.view.setUint16(4, value, true);
  }

  // 0x06: pad2

  // 0x08: pointer
  set pbstrApplicationName(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(8, BigInt(util.toPointer(value)), true);
  }

  // 0x10: pointer
  set pbstrApplicationURL(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(16, BigInt(util.toPointer(value)), true);
  }
}

/**
 * _Anonymous1_e__Union (size: 64)
 */
export interface _Anonymous1_e__Union {
  /** usize */
  Data0: Deno.PointerValue;
  /** Windows.Win32.Foundation.PWSTR */
  String: string | null | Uint8Array | Uint16Array;
  /** usize */
  u: Deno.PointerValue;
  /** ptr */
  psid: Deno.PointerValue | Uint8Array | null;
  /** ptr */
  pguid: Deno.PointerValue | Uint8Array | null;
  /** u32 */
  LogonId_LowPart: number;
  /** ptr */
  pObjectTypes: Deno.PointerValue | Uint8Array | null;
  /** ptr */
  pIpAddress: Deno.PointerValue | Uint8Array | null;
}

export const sizeof_Anonymous1_e__Union = 64;

export function alloc_Anonymous1_e__Union(data?: Partial<_Anonymous1_e__Union>): Uint8Array {
  const buf = new Uint8Array(sizeof_Anonymous1_e__Union);
  const view = new DataView(buf.buffer);
  // 0x00: usize
  if (data?.Data0 !== undefined) view.setBigUint64(0, BigInt(data.Data0), true);
  // 0x08: buffer
  if (data?.String !== undefined) {
    (buf as any)._f8 = util.pwstrToFfi(data.String);
    view.setBigUint64(8, (buf as any)._f8 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f8)), true);
  }
  // 0x10: usize
  if (data?.u !== undefined) view.setBigUint64(16, BigInt(data.u), true);
  // 0x18: pointer
  if (data?.psid !== undefined) view.setBigUint64(24, data.psid === null ? 0n : BigInt(util.toPointer(data.psid)), true);
  // 0x20: pointer
  if (data?.pguid !== undefined) view.setBigUint64(32, data.pguid === null ? 0n : BigInt(util.toPointer(data.pguid)), true);
  // 0x28: u32
  if (data?.LogonId_LowPart !== undefined) view.setUint32(40, Number(data.LogonId_LowPart), true);
  // 0x2c: pad4
  // 0x30: pointer
  if (data?.pObjectTypes !== undefined) view.setBigUint64(48, data.pObjectTypes === null ? 0n : BigInt(util.toPointer(data.pObjectTypes)), true);
  // 0x38: pointer
  if (data?.pIpAddress !== undefined) view.setBigUint64(56, data.pIpAddress === null ? 0n : BigInt(util.toPointer(data.pIpAddress)), true);
  return buf;
}

export class _Anonymous1_e__UnionView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: usize
  get Data0(): Deno.PointerValue {
    return Number(this.view.getBigUint64(0, true));
  }

  // 0x08: buffer
  get String(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(8, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x10: usize
  get u(): Deno.PointerValue {
    return Number(this.view.getBigUint64(16, true));
  }

  // 0x18: pointer
  get psid(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(24, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x20: pointer
  get pguid(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(32, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x28: u32
  get LogonId_LowPart(): number {
    return this.view.getUint32(40, true);
  }

  // 0x2c: pad4

  // 0x30: pointer
  get pObjectTypes(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(48, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x38: pointer
  get pIpAddress(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(56, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: usize
  set Data0(value: Deno.PointerValue) {
    this.view.setBigUint64(0, BigInt(value), true);
  }

  // 0x08: buffer
  set String(value: Uint8Array | Deno.PointerValue | null) {
    (this.buf as any)._f8 = value;
    this.view.setBigUint64(8, BigInt(util.toPointer((this.buf as any)._f8)), true);
  }

  // 0x10: usize
  set u(value: Deno.PointerValue) {
    this.view.setBigUint64(16, BigInt(value), true);
  }

  // 0x18: pointer
  set psid(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(24, BigInt(util.toPointer(value)), true);
  }

  // 0x20: pointer
  set pguid(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(32, BigInt(util.toPointer(value)), true);
  }

  // 0x28: u32
  set LogonId_LowPart(value: number) {
    this.view.setUint32(40, value, true);
  }

  // 0x2c: pad4

  // 0x30: pointer
  set pObjectTypes(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(48, BigInt(util.toPointer(value)), true);
  }

  // 0x38: pointer
  set pIpAddress(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(56, BigInt(util.toPointer(value)), true);
  }
}

/**
 * _Anonymous2_e__Union (size: 16)
 */
export interface _Anonymous2_e__Union {
  /** usize */
  Data1: Deno.PointerValue;
  /** i32 */
  LogonId_HighPart: number;
}

export const sizeof_Anonymous2_e__Union = 16;

export function alloc_Anonymous2_e__Union(data?: Partial<_Anonymous2_e__Union>): Uint8Array {
  const buf = new Uint8Array(sizeof_Anonymous2_e__Union);
  const view = new DataView(buf.buffer);
  // 0x00: usize
  if (data?.Data1 !== undefined) view.setBigUint64(0, BigInt(data.Data1), true);
  // 0x08: i32
  if (data?.LogonId_HighPart !== undefined) view.setInt32(8, Number(data.LogonId_HighPart), true);
  // 0x0c: pad4
  return buf;
}

export class _Anonymous2_e__UnionView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: usize
  get Data1(): Deno.PointerValue {
    return Number(this.view.getBigUint64(0, true));
  }

  // 0x08: i32
  get LogonId_HighPart(): number {
    return this.view.getInt32(8, true);
  }

  // 0x0c: pad4

  // 0x00: usize
  set Data1(value: Deno.PointerValue) {
    this.view.setBigUint64(0, BigInt(value), true);
  }

  // 0x08: i32
  set LogonId_HighPart(value: number) {
    this.view.setInt32(8, value, true);
  }

  // 0x0c: pad4
}

/**
 * _Anonymous3_e__Union (size: 16)
 */
export interface _Anonymous3_e__Union {
  /** u32 */
  dwAlphaDestConst: number;
  /** Windows.Win32.Graphics.DirectDraw.IDirectDrawSurface */
  lpDDSAlphaDest: Uint8Array | Deno.PointerValue | null;
}

export const sizeof_Anonymous3_e__Union = 16;

export function alloc_Anonymous3_e__Union(data?: Partial<_Anonymous3_e__Union>): Uint8Array {
  const buf = new Uint8Array(sizeof_Anonymous3_e__Union);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.dwAlphaDestConst !== undefined) view.setUint32(0, Number(data.dwAlphaDestConst), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.lpDDSAlphaDest !== undefined) view.setBigUint64(8, data.lpDDSAlphaDest === null ? 0n : BigInt(util.toPointer(data.lpDDSAlphaDest)), true);
  return buf;
}

export class _Anonymous3_e__UnionView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get dwAlphaDestConst(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  get lpDDSAlphaDest(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(8, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: u32
  set dwAlphaDestConst(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  set lpDDSAlphaDest(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(8, BigInt(util.toPointer(value)), true);
  }
}

/**
 * _Anonymous4_e__Union (size: 16)
 */
export interface _Anonymous4_e__Union {
  /** u32 */
  dwAlphaSrcConst: number;
  /** Windows.Win32.Graphics.DirectDraw.IDirectDrawSurface */
  lpDDSAlphaSrc: Uint8Array | Deno.PointerValue | null;
}

export const sizeof_Anonymous4_e__Union = 16;

export function alloc_Anonymous4_e__Union(data?: Partial<_Anonymous4_e__Union>): Uint8Array {
  const buf = new Uint8Array(sizeof_Anonymous4_e__Union);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.dwAlphaSrcConst !== undefined) view.setUint32(0, Number(data.dwAlphaSrcConst), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.lpDDSAlphaSrc !== undefined) view.setBigUint64(8, data.lpDDSAlphaSrc === null ? 0n : BigInt(util.toPointer(data.lpDDSAlphaSrc)), true);
  return buf;
}

export class _Anonymous4_e__UnionView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get dwAlphaSrcConst(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  get lpDDSAlphaSrc(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(8, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: u32
  set dwAlphaSrcConst(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  set lpDDSAlphaSrc(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(8, BigInt(util.toPointer(value)), true);
  }
}

/**
 * _Anonymous5_e__Union (size: 24)
 */
export interface _Anonymous5_e__Union {
  /** u32 */
  dwFillColor: number;
  /** u32 */
  dwFillDepth: number;
  /** u32 */
  dwFillPixel: number;
  /** Windows.Win32.Graphics.DirectDraw.IDirectDrawSurface */
  lpDDSPattern: Uint8Array | Deno.PointerValue | null;
}

export const sizeof_Anonymous5_e__Union = 24;

export function alloc_Anonymous5_e__Union(data?: Partial<_Anonymous5_e__Union>): Uint8Array {
  const buf = new Uint8Array(sizeof_Anonymous5_e__Union);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.dwFillColor !== undefined) view.setUint32(0, Number(data.dwFillColor), true);
  // 0x04: u32
  if (data?.dwFillDepth !== undefined) view.setUint32(4, Number(data.dwFillDepth), true);
  // 0x08: u32
  if (data?.dwFillPixel !== undefined) view.setUint32(8, Number(data.dwFillPixel), true);
  // 0x0c: pad4
  // 0x10: pointer
  if (data?.lpDDSPattern !== undefined) view.setBigUint64(16, data.lpDDSPattern === null ? 0n : BigInt(util.toPointer(data.lpDDSPattern)), true);
  return buf;
}

export class _Anonymous5_e__UnionView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get dwFillColor(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: u32
  get dwFillDepth(): number {
    return this.view.getUint32(4, true);
  }

  // 0x08: u32
  get dwFillPixel(): number {
    return this.view.getUint32(8, true);
  }

  // 0x0c: pad4

  // 0x10: pointer
  get lpDDSPattern(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(16, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: u32
  set dwFillColor(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: u32
  set dwFillDepth(value: number) {
    this.view.setUint32(4, value, true);
  }

  // 0x08: u32
  set dwFillPixel(value: number) {
    this.view.setUint32(8, value, true);
  }

  // 0x0c: pad4

  // 0x10: pointer
  set lpDDSPattern(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(16, BigInt(util.toPointer(value)), true);
  }
}

/**
 * Windows.Win32.Graphics.DirectDraw.DDPIXELFORMAT (size: 56)
 */
export interface DDPIXELFORMAT {
  /** u32 */
  dwSize: number;
  /** u32 */
  dwFlags: number;
  /** u32 */
  dwFourCC: number;
  /** _Anonymous1_e__Union */
  Anonymous1: Uint8Array | Deno.PointerValue | null;
  /** _Anonymous2_e__Union */
  Anonymous2: Uint8Array | Deno.PointerValue | null;
  /** _Anonymous3_e__Union */
  Anonymous3: Uint8Array | Deno.PointerValue | null;
  /** _Anonymous4_e__Union */
  Anonymous4: Uint8Array | Deno.PointerValue | null;
  /** _Anonymous5_e__Union */
  Anonymous5: Uint8Array | Deno.PointerValue | null;
}

export const sizeofDDPIXELFORMAT = 56;

export function allocDDPIXELFORMAT(data?: Partial<DDPIXELFORMAT>): Uint8Array {
  const buf = new Uint8Array(sizeofDDPIXELFORMAT);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.dwSize !== undefined) view.setUint32(0, Number(data.dwSize), true);
  // 0x04: u32
  if (data?.dwFlags !== undefined) view.setUint32(4, Number(data.dwFlags), true);
  // 0x08: u32
  if (data?.dwFourCC !== undefined) view.setUint32(8, Number(data.dwFourCC), true);
  // 0x0c: pad4
  // 0x10: pointer
  if (data?.Anonymous1 !== undefined) view.setBigUint64(16, data.Anonymous1 === null ? 0n : BigInt(util.toPointer(data.Anonymous1)), true);
  // 0x18: pointer
  if (data?.Anonymous2 !== undefined) view.setBigUint64(24, data.Anonymous2 === null ? 0n : BigInt(util.toPointer(data.Anonymous2)), true);
  // 0x20: pointer
  if (data?.Anonymous3 !== undefined) view.setBigUint64(32, data.Anonymous3 === null ? 0n : BigInt(util.toPointer(data.Anonymous3)), true);
  // 0x28: pointer
  if (data?.Anonymous4 !== undefined) view.setBigUint64(40, data.Anonymous4 === null ? 0n : BigInt(util.toPointer(data.Anonymous4)), true);
  // 0x30: pointer
  if (data?.Anonymous5 !== undefined) view.setBigUint64(48, data.Anonymous5 === null ? 0n : BigInt(util.toPointer(data.Anonymous5)), true);
  return buf;
}

export class DDPIXELFORMATView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get dwSize(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: u32
  get dwFlags(): number {
    return this.view.getUint32(4, true);
  }

  // 0x08: u32
  get dwFourCC(): number {
    return this.view.getUint32(8, true);
  }

  // 0x0c: pad4

  // 0x10: pointer
  get Anonymous1(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(16, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x18: pointer
  get Anonymous2(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(24, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x20: pointer
  get Anonymous3(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(32, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x28: pointer
  get Anonymous4(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(40, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x30: pointer
  get Anonymous5(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(48, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: u32
  set dwSize(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: u32
  set dwFlags(value: number) {
    this.view.setUint32(4, value, true);
  }

  // 0x08: u32
  set dwFourCC(value: number) {
    this.view.setUint32(8, value, true);
  }

  // 0x0c: pad4

  // 0x10: pointer
  set Anonymous1(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(16, BigInt(util.toPointer(value)), true);
  }

  // 0x18: pointer
  set Anonymous2(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(24, BigInt(util.toPointer(value)), true);
  }

  // 0x20: pointer
  set Anonymous3(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(32, BigInt(util.toPointer(value)), true);
  }

  // 0x28: pointer
  set Anonymous4(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(40, BigInt(util.toPointer(value)), true);
  }

  // 0x30: pointer
  set Anonymous5(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(48, BigInt(util.toPointer(value)), true);
  }
}

/**
 * Windows.Win32.Media.DirectShow.AMVAUncompBufferInfo (size: 16)
 */
export interface AMVAUncompBufferInfo {
  /** u32 */
  dwMinNumSurfaces: number;
  /** u32 */
  dwMaxNumSurfaces: number;
  /** Windows.Win32.Graphics.DirectDraw.DDPIXELFORMAT */
  ddUncompPixelFormat: Uint8Array | Deno.PointerValue | null;
}

export const sizeofAMVAUncompBufferInfo = 16;

export function allocAMVAUncompBufferInfo(data?: Partial<AMVAUncompBufferInfo>): Uint8Array {
  const buf = new Uint8Array(sizeofAMVAUncompBufferInfo);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.dwMinNumSurfaces !== undefined) view.setUint32(0, Number(data.dwMinNumSurfaces), true);
  // 0x04: u32
  if (data?.dwMaxNumSurfaces !== undefined) view.setUint32(4, Number(data.dwMaxNumSurfaces), true);
  // 0x08: pointer
  if (data?.ddUncompPixelFormat !== undefined) view.setBigUint64(8, data.ddUncompPixelFormat === null ? 0n : BigInt(util.toPointer(data.ddUncompPixelFormat)), true);
  return buf;
}

export class AMVAUncompBufferInfoView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get dwMinNumSurfaces(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: u32
  get dwMaxNumSurfaces(): number {
    return this.view.getUint32(4, true);
  }

  // 0x08: pointer
  get ddUncompPixelFormat(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(8, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: u32
  set dwMinNumSurfaces(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: u32
  set dwMaxNumSurfaces(value: number) {
    this.view.setUint32(4, value, true);
  }

  // 0x08: pointer
  set ddUncompPixelFormat(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(8, BigInt(util.toPointer(value)), true);
  }
}

/**
 * Windows.Win32.Media.DirectShow.AMVAUncompDataInfo (size: 16)
 */
export interface AMVAUncompDataInfo {
  /** u32 */
  dwUncompWidth: number;
  /** u32 */
  dwUncompHeight: number;
  /** Windows.Win32.Graphics.DirectDraw.DDPIXELFORMAT */
  ddUncompPixelFormat: Uint8Array | Deno.PointerValue | null;
}

export const sizeofAMVAUncompDataInfo = 16;

export function allocAMVAUncompDataInfo(data?: Partial<AMVAUncompDataInfo>): Uint8Array {
  const buf = new Uint8Array(sizeofAMVAUncompDataInfo);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.dwUncompWidth !== undefined) view.setUint32(0, Number(data.dwUncompWidth), true);
  // 0x04: u32
  if (data?.dwUncompHeight !== undefined) view.setUint32(4, Number(data.dwUncompHeight), true);
  // 0x08: pointer
  if (data?.ddUncompPixelFormat !== undefined) view.setBigUint64(8, data.ddUncompPixelFormat === null ? 0n : BigInt(util.toPointer(data.ddUncompPixelFormat)), true);
  return buf;
}

export class AMVAUncompDataInfoView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get dwUncompWidth(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: u32
  get dwUncompHeight(): number {
    return this.view.getUint32(4, true);
  }

  // 0x08: pointer
  get ddUncompPixelFormat(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(8, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: u32
  set dwUncompWidth(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: u32
  set dwUncompHeight(value: number) {
    this.view.setUint32(4, value, true);
  }

  // 0x08: pointer
  set ddUncompPixelFormat(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(8, BigInt(util.toPointer(value)), true);
  }
}

/**
 * Windows.Win32.Media.DirectShow.AMVAInternalMemInfo (size: 8)
 */
export interface AMVAInternalMemInfo {
  /** u32 */
  dwScratchMemAlloc: number;
}

export const sizeofAMVAInternalMemInfo = 8;

export function allocAMVAInternalMemInfo(data?: Partial<AMVAInternalMemInfo>): Uint8Array {
  const buf = new Uint8Array(sizeofAMVAInternalMemInfo);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.dwScratchMemAlloc !== undefined) view.setUint32(0, Number(data.dwScratchMemAlloc), true);
  // 0x04: pad4
  return buf;
}

export class AMVAInternalMemInfoView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get dwScratchMemAlloc(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: pad4

  // 0x00: u32
  set dwScratchMemAlloc(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: pad4
}

/**
 * Windows.Win32.Graphics.DirectDraw.DDSCAPS2 (size: 24)
 */
export interface DDSCAPS2 {
  /** u32 */
  dwCaps: number;
  /** u32 */
  dwCaps2: number;
  /** u32 */
  dwCaps3: number;
  /** _Anonymous_e__Union */
  Anonymous: Uint8Array | Deno.PointerValue | null;
}

export const sizeofDDSCAPS2 = 24;

export function allocDDSCAPS2(data?: Partial<DDSCAPS2>): Uint8Array {
  const buf = new Uint8Array(sizeofDDSCAPS2);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.dwCaps !== undefined) view.setUint32(0, Number(data.dwCaps), true);
  // 0x04: u32
  if (data?.dwCaps2 !== undefined) view.setUint32(4, Number(data.dwCaps2), true);
  // 0x08: u32
  if (data?.dwCaps3 !== undefined) view.setUint32(8, Number(data.dwCaps3), true);
  // 0x0c: pad4
  // 0x10: pointer
  if (data?.Anonymous !== undefined) view.setBigUint64(16, data.Anonymous === null ? 0n : BigInt(util.toPointer(data.Anonymous)), true);
  return buf;
}

export class DDSCAPS2View {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get dwCaps(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: u32
  get dwCaps2(): number {
    return this.view.getUint32(4, true);
  }

  // 0x08: u32
  get dwCaps3(): number {
    return this.view.getUint32(8, true);
  }

  // 0x0c: pad4

  // 0x10: pointer
  get Anonymous(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(16, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: u32
  set dwCaps(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: u32
  set dwCaps2(value: number) {
    this.view.setUint32(4, value, true);
  }

  // 0x08: u32
  set dwCaps3(value: number) {
    this.view.setUint32(8, value, true);
  }

  // 0x0c: pad4

  // 0x10: pointer
  set Anonymous(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(16, BigInt(util.toPointer(value)), true);
  }
}

/**
 * Windows.Win32.Media.DirectShow.AMVACompBufferInfo (size: 32)
 */
export interface AMVACompBufferInfo {
  /** u32 */
  dwNumCompBuffers: number;
  /** u32 */
  dwWidthToCreate: number;
  /** u32 */
  dwHeightToCreate: number;
  /** u32 */
  dwBytesToAllocate: number;
  /** Windows.Win32.Graphics.DirectDraw.DDSCAPS2 */
  ddCompCaps: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Graphics.DirectDraw.DDPIXELFORMAT */
  ddPixelFormat: Uint8Array | Deno.PointerValue | null;
}

export const sizeofAMVACompBufferInfo = 32;

export function allocAMVACompBufferInfo(data?: Partial<AMVACompBufferInfo>): Uint8Array {
  const buf = new Uint8Array(sizeofAMVACompBufferInfo);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.dwNumCompBuffers !== undefined) view.setUint32(0, Number(data.dwNumCompBuffers), true);
  // 0x04: u32
  if (data?.dwWidthToCreate !== undefined) view.setUint32(4, Number(data.dwWidthToCreate), true);
  // 0x08: u32
  if (data?.dwHeightToCreate !== undefined) view.setUint32(8, Number(data.dwHeightToCreate), true);
  // 0x0c: u32
  if (data?.dwBytesToAllocate !== undefined) view.setUint32(12, Number(data.dwBytesToAllocate), true);
  // 0x10: pointer
  if (data?.ddCompCaps !== undefined) view.setBigUint64(16, data.ddCompCaps === null ? 0n : BigInt(util.toPointer(data.ddCompCaps)), true);
  // 0x18: pointer
  if (data?.ddPixelFormat !== undefined) view.setBigUint64(24, data.ddPixelFormat === null ? 0n : BigInt(util.toPointer(data.ddPixelFormat)), true);
  return buf;
}

export class AMVACompBufferInfoView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get dwNumCompBuffers(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: u32
  get dwWidthToCreate(): number {
    return this.view.getUint32(4, true);
  }

  // 0x08: u32
  get dwHeightToCreate(): number {
    return this.view.getUint32(8, true);
  }

  // 0x0c: u32
  get dwBytesToAllocate(): number {
    return this.view.getUint32(12, true);
  }

  // 0x10: pointer
  get ddCompCaps(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(16, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x18: pointer
  get ddPixelFormat(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(24, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: u32
  set dwNumCompBuffers(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: u32
  set dwWidthToCreate(value: number) {
    this.view.setUint32(4, value, true);
  }

  // 0x08: u32
  set dwHeightToCreate(value: number) {
    this.view.setUint32(8, value, true);
  }

  // 0x0c: u32
  set dwBytesToAllocate(value: number) {
    this.view.setUint32(12, value, true);
  }

  // 0x10: pointer
  set ddCompCaps(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(16, BigInt(util.toPointer(value)), true);
  }

  // 0x18: pointer
  set ddPixelFormat(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(24, BigInt(util.toPointer(value)), true);
  }
}

/**
 * Windows.Win32.Media.DirectShow.AMVABeginFrameInfo (size: 40)
 */
export interface AMVABeginFrameInfo {
  /** u32 */
  dwDestSurfaceIndex: number;
  /** ptr */
  pInputData: Deno.PointerValue | Uint8Array | null;
  /** u32 */
  dwSizeInputData: number;
  /** ptr */
  pOutputData: Deno.PointerValue | Uint8Array | null;
  /** u32 */
  dwSizeOutputData: number;
}

export const sizeofAMVABeginFrameInfo = 40;

export function allocAMVABeginFrameInfo(data?: Partial<AMVABeginFrameInfo>): Uint8Array {
  const buf = new Uint8Array(sizeofAMVABeginFrameInfo);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.dwDestSurfaceIndex !== undefined) view.setUint32(0, Number(data.dwDestSurfaceIndex), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.pInputData !== undefined) view.setBigUint64(8, data.pInputData === null ? 0n : BigInt(util.toPointer(data.pInputData)), true);
  // 0x10: u32
  if (data?.dwSizeInputData !== undefined) view.setUint32(16, Number(data.dwSizeInputData), true);
  // 0x14: pad4
  // 0x18: pointer
  if (data?.pOutputData !== undefined) view.setBigUint64(24, data.pOutputData === null ? 0n : BigInt(util.toPointer(data.pOutputData)), true);
  // 0x20: u32
  if (data?.dwSizeOutputData !== undefined) view.setUint32(32, Number(data.dwSizeOutputData), true);
  // 0x24: pad4
  return buf;
}

export class AMVABeginFrameInfoView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get dwDestSurfaceIndex(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  get pInputData(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(8, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x10: u32
  get dwSizeInputData(): number {
    return this.view.getUint32(16, true);
  }

  // 0x14: pad4

  // 0x18: pointer
  get pOutputData(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(24, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x20: u32
  get dwSizeOutputData(): number {
    return this.view.getUint32(32, true);
  }

  // 0x24: pad4

  // 0x00: u32
  set dwDestSurfaceIndex(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  set pInputData(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(8, BigInt(util.toPointer(value)), true);
  }

  // 0x10: u32
  set dwSizeInputData(value: number) {
    this.view.setUint32(16, value, true);
  }

  // 0x14: pad4

  // 0x18: pointer
  set pOutputData(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(24, BigInt(util.toPointer(value)), true);
  }

  // 0x20: u32
  set dwSizeOutputData(value: number) {
    this.view.setUint32(32, value, true);
  }

  // 0x24: pad4
}

/**
 * Windows.Win32.Media.DirectShow.AMVAEndFrameInfo (size: 16)
 */
export interface AMVAEndFrameInfo {
  /** u32 */
  dwSizeMiscData: number;
  /** ptr */
  pMiscData: Deno.PointerValue | Uint8Array | null;
}

export const sizeofAMVAEndFrameInfo = 16;

export function allocAMVAEndFrameInfo(data?: Partial<AMVAEndFrameInfo>): Uint8Array {
  const buf = new Uint8Array(sizeofAMVAEndFrameInfo);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.dwSizeMiscData !== undefined) view.setUint32(0, Number(data.dwSizeMiscData), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.pMiscData !== undefined) view.setBigUint64(8, data.pMiscData === null ? 0n : BigInt(util.toPointer(data.pMiscData)), true);
  return buf;
}

export class AMVAEndFrameInfoView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get dwSizeMiscData(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  get pMiscData(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(8, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: u32
  set dwSizeMiscData(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  set pMiscData(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(8, BigInt(util.toPointer(value)), true);
  }
}

/**
 * Windows.Win32.Media.DirectShow.AMVABUFFERINFO (size: 16)
 */
export interface AMVABUFFERINFO {
  /** u32 */
  dwTypeIndex: number;
  /** u32 */
  dwBufferIndex: number;
  /** u32 */
  dwDataOffset: number;
  /** u32 */
  dwDataSize: number;
}

export const sizeofAMVABUFFERINFO = 16;

export function allocAMVABUFFERINFO(data?: Partial<AMVABUFFERINFO>): Uint8Array {
  const buf = new Uint8Array(sizeofAMVABUFFERINFO);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.dwTypeIndex !== undefined) view.setUint32(0, Number(data.dwTypeIndex), true);
  // 0x04: u32
  if (data?.dwBufferIndex !== undefined) view.setUint32(4, Number(data.dwBufferIndex), true);
  // 0x08: u32
  if (data?.dwDataOffset !== undefined) view.setUint32(8, Number(data.dwDataOffset), true);
  // 0x0c: u32
  if (data?.dwDataSize !== undefined) view.setUint32(12, Number(data.dwDataSize), true);
  return buf;
}

export class AMVABUFFERINFOView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get dwTypeIndex(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: u32
  get dwBufferIndex(): number {
    return this.view.getUint32(4, true);
  }

  // 0x08: u32
  get dwDataOffset(): number {
    return this.view.getUint32(8, true);
  }

  // 0x0c: u32
  get dwDataSize(): number {
    return this.view.getUint32(12, true);
  }

  // 0x00: u32
  set dwTypeIndex(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: u32
  set dwBufferIndex(value: number) {
    this.view.setUint32(4, value, true);
  }

  // 0x08: u32
  set dwDataOffset(value: number) {
    this.view.setUint32(8, value, true);
  }

  // 0x0c: u32
  set dwDataSize(value: number) {
    this.view.setUint32(12, value, true);
  }
}

/**
 * Windows.Win32.Media.DirectShow.AM_WST_PAGE (size: 16)
 */
export interface AM_WST_PAGE {
  /** u32 */
  dwPageNr: number;
  /** u32 */
  dwSubPageNr: number;
  /** ptr */
  pucPageData: Deno.PointerValue | Uint8Array | null;
}

export const sizeofAM_WST_PAGE = 16;

export function allocAM_WST_PAGE(data?: Partial<AM_WST_PAGE>): Uint8Array {
  const buf = new Uint8Array(sizeofAM_WST_PAGE);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.dwPageNr !== undefined) view.setUint32(0, Number(data.dwPageNr), true);
  // 0x04: u32
  if (data?.dwSubPageNr !== undefined) view.setUint32(4, Number(data.dwSubPageNr), true);
  // 0x08: pointer
  if (data?.pucPageData !== undefined) view.setBigUint64(8, data.pucPageData === null ? 0n : BigInt(util.toPointer(data.pucPageData)), true);
  return buf;
}

export class AM_WST_PAGEView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get dwPageNr(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: u32
  get dwSubPageNr(): number {
    return this.view.getUint32(4, true);
  }

  // 0x08: pointer
  get pucPageData(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(8, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: u32
  set dwPageNr(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: u32
  set dwSubPageNr(value: number) {
    this.view.setUint32(4, value, true);
  }

  // 0x08: pointer
  set pucPageData(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(8, BigInt(util.toPointer(value)), true);
  }
}

/**
 * Windows.Win32.Media.DirectShow.TRUECOLORINFO (size: 16)
 */
export interface TRUECOLORINFO {
  /** array */
  dwBitMasks: Deno.PointerValue | null;
  /** array */
  bmiColors: Deno.PointerValue | null;
}

export const sizeofTRUECOLORINFO = 16;

export function allocTRUECOLORINFO(data?: Partial<TRUECOLORINFO>): Uint8Array {
  const buf = new Uint8Array(sizeofTRUECOLORINFO);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.dwBitMasks !== undefined) view.setBigUint64(0, data.dwBitMasks === null ? 0n : BigInt(util.toPointer(data.dwBitMasks)), true);
  // 0x08: pointer
  if (data?.bmiColors !== undefined) view.setBigUint64(8, data.bmiColors === null ? 0n : BigInt(util.toPointer(data.bmiColors)), true);
  return buf;
}

export class TRUECOLORINFOView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get dwBitMasks(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(0, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x08: pointer
  get bmiColors(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(8, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: pointer
  set dwBitMasks(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(0, BigInt(util.toPointer(value)), true);
  }

  // 0x08: pointer
  set bmiColors(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(8, BigInt(util.toPointer(value)), true);
  }
}

/**
 * Windows.Win32.Graphics.Gdi.BITMAPINFOHEADER (size: 40)
 */
export interface BITMAPINFOHEADER {
  /** u32 */
  biSize: number;
  /** i32 */
  biWidth: number;
  /** i32 */
  biHeight: number;
  /** u16 */
  biPlanes: number;
  /** u16 */
  biBitCount: number;
  /** Windows.Win32.Graphics.Gdi.BI_COMPRESSION */
  biCompression: BI_COMPRESSION;
  /** u32 */
  biSizeImage: number;
  /** i32 */
  biXPelsPerMeter: number;
  /** i32 */
  biYPelsPerMeter: number;
  /** u32 */
  biClrUsed: number;
  /** u32 */
  biClrImportant: number;
}

export const sizeofBITMAPINFOHEADER = 40;

export function allocBITMAPINFOHEADER(data?: Partial<BITMAPINFOHEADER>): Uint8Array {
  const buf = new Uint8Array(sizeofBITMAPINFOHEADER);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.biSize !== undefined) view.setUint32(0, Number(data.biSize), true);
  // 0x04: i32
  if (data?.biWidth !== undefined) view.setInt32(4, Number(data.biWidth), true);
  // 0x08: i32
  if (data?.biHeight !== undefined) view.setInt32(8, Number(data.biHeight), true);
  // 0x0c: u16
  if (data?.biPlanes !== undefined) view.setUint16(12, Number(data.biPlanes), true);
  // 0x0e: u16
  if (data?.biBitCount !== undefined) view.setUint16(14, Number(data.biBitCount), true);
  // 0x10: i32
  if (data?.biCompression !== undefined) view.setInt32(16, Number(data.biCompression), true);
  // 0x14: u32
  if (data?.biSizeImage !== undefined) view.setUint32(20, Number(data.biSizeImage), true);
  // 0x18: i32
  if (data?.biXPelsPerMeter !== undefined) view.setInt32(24, Number(data.biXPelsPerMeter), true);
  // 0x1c: i32
  if (data?.biYPelsPerMeter !== undefined) view.setInt32(28, Number(data.biYPelsPerMeter), true);
  // 0x20: u32
  if (data?.biClrUsed !== undefined) view.setUint32(32, Number(data.biClrUsed), true);
  // 0x24: u32
  if (data?.biClrImportant !== undefined) view.setUint32(36, Number(data.biClrImportant), true);
  return buf;
}

export class BITMAPINFOHEADERView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get biSize(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: i32
  get biWidth(): number {
    return this.view.getInt32(4, true);
  }

  // 0x08: i32
  get biHeight(): number {
    return this.view.getInt32(8, true);
  }

  // 0x0c: u16
  get biPlanes(): number {
    return this.view.getUint16(12, true);
  }

  // 0x0e: u16
  get biBitCount(): number {
    return this.view.getUint16(14, true);
  }

  // 0x10: i32
  get biCompression(): number {
    return this.view.getInt32(16, true);
  }

  // 0x14: u32
  get biSizeImage(): number {
    return this.view.getUint32(20, true);
  }

  // 0x18: i32
  get biXPelsPerMeter(): number {
    return this.view.getInt32(24, true);
  }

  // 0x1c: i32
  get biYPelsPerMeter(): number {
    return this.view.getInt32(28, true);
  }

  // 0x20: u32
  get biClrUsed(): number {
    return this.view.getUint32(32, true);
  }

  // 0x24: u32
  get biClrImportant(): number {
    return this.view.getUint32(36, true);
  }

  // 0x00: u32
  set biSize(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: i32
  set biWidth(value: number) {
    this.view.setInt32(4, value, true);
  }

  // 0x08: i32
  set biHeight(value: number) {
    this.view.setInt32(8, value, true);
  }

  // 0x0c: u16
  set biPlanes(value: number) {
    this.view.setUint16(12, value, true);
  }

  // 0x0e: u16
  set biBitCount(value: number) {
    this.view.setUint16(14, value, true);
  }

  // 0x10: i32
  set biCompression(value: number) {
    this.view.setInt32(16, value, true);
  }

  // 0x14: u32
  set biSizeImage(value: number) {
    this.view.setUint32(20, value, true);
  }

  // 0x18: i32
  set biXPelsPerMeter(value: number) {
    this.view.setInt32(24, value, true);
  }

  // 0x1c: i32
  set biYPelsPerMeter(value: number) {
    this.view.setInt32(28, value, true);
  }

  // 0x20: u32
  set biClrUsed(value: number) {
    this.view.setUint32(32, value, true);
  }

  // 0x24: u32
  set biClrImportant(value: number) {
    this.view.setUint32(36, value, true);
  }
}

/**
 * Windows.Win32.Media.DirectShow.VIDEOINFO (size: 48)
 */
export interface VIDEOINFO {
  /** Windows.Win32.Foundation.RECT */
  rcSource: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Foundation.RECT */
  rcTarget: Uint8Array | Deno.PointerValue | null;
  /** u32 */
  dwBitRate: number;
  /** u32 */
  dwBitErrorRate: number;
  /** i64 */
  AvgTimePerFrame: Deno.PointerValue;
  /** Windows.Win32.Graphics.Gdi.BITMAPINFOHEADER */
  bmiHeader: Uint8Array | Deno.PointerValue | null;
  /** _Anonymous_e__Union */
  Anonymous: Uint8Array | Deno.PointerValue | null;
}

export const sizeofVIDEOINFO = 48;

export function allocVIDEOINFO(data?: Partial<VIDEOINFO>): Uint8Array {
  const buf = new Uint8Array(sizeofVIDEOINFO);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.rcSource !== undefined) view.setBigUint64(0, data.rcSource === null ? 0n : BigInt(util.toPointer(data.rcSource)), true);
  // 0x08: pointer
  if (data?.rcTarget !== undefined) view.setBigUint64(8, data.rcTarget === null ? 0n : BigInt(util.toPointer(data.rcTarget)), true);
  // 0x10: u32
  if (data?.dwBitRate !== undefined) view.setUint32(16, Number(data.dwBitRate), true);
  // 0x14: u32
  if (data?.dwBitErrorRate !== undefined) view.setUint32(20, Number(data.dwBitErrorRate), true);
  // 0x18: i64
  if (data?.AvgTimePerFrame !== undefined) view.setBigInt64(24, BigInt(data.AvgTimePerFrame), true);
  // 0x20: pointer
  if (data?.bmiHeader !== undefined) view.setBigUint64(32, data.bmiHeader === null ? 0n : BigInt(util.toPointer(data.bmiHeader)), true);
  // 0x28: pointer
  if (data?.Anonymous !== undefined) view.setBigUint64(40, data.Anonymous === null ? 0n : BigInt(util.toPointer(data.Anonymous)), true);
  return buf;
}

export class VIDEOINFOView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get rcSource(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(0, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x08: pointer
  get rcTarget(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(8, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x10: u32
  get dwBitRate(): number {
    return this.view.getUint32(16, true);
  }

  // 0x14: u32
  get dwBitErrorRate(): number {
    return this.view.getUint32(20, true);
  }

  // 0x18: i64
  get AvgTimePerFrame(): Deno.PointerValue {
    return Number(this.view.getBigInt64(24, true));
  }

  // 0x20: pointer
  get bmiHeader(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(32, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x28: pointer
  get Anonymous(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(40, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: pointer
  set rcSource(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(0, BigInt(util.toPointer(value)), true);
  }

  // 0x08: pointer
  set rcTarget(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(8, BigInt(util.toPointer(value)), true);
  }

  // 0x10: u32
  set dwBitRate(value: number) {
    this.view.setUint32(16, value, true);
  }

  // 0x14: u32
  set dwBitErrorRate(value: number) {
    this.view.setUint32(20, value, true);
  }

  // 0x18: i64
  set AvgTimePerFrame(value: Deno.PointerValue) {
    this.view.setBigInt64(24, BigInt(value), true);
  }

  // 0x20: pointer
  set bmiHeader(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(32, BigInt(util.toPointer(value)), true);
  }

  // 0x28: pointer
  set Anonymous(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(40, BigInt(util.toPointer(value)), true);
  }
}

/**
 * Windows.Win32.Media.DirectShow.ANALOGVIDEOINFO (size: 32)
 */
export interface ANALOGVIDEOINFO {
  /** Windows.Win32.Foundation.RECT */
  rcSource: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Foundation.RECT */
  rcTarget: Uint8Array | Deno.PointerValue | null;
  /** u32 */
  dwActiveWidth: number;
  /** u32 */
  dwActiveHeight: number;
  /** i64 */
  AvgTimePerFrame: Deno.PointerValue;
}

export const sizeofANALOGVIDEOINFO = 32;

export function allocANALOGVIDEOINFO(data?: Partial<ANALOGVIDEOINFO>): Uint8Array {
  const buf = new Uint8Array(sizeofANALOGVIDEOINFO);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.rcSource !== undefined) view.setBigUint64(0, data.rcSource === null ? 0n : BigInt(util.toPointer(data.rcSource)), true);
  // 0x08: pointer
  if (data?.rcTarget !== undefined) view.setBigUint64(8, data.rcTarget === null ? 0n : BigInt(util.toPointer(data.rcTarget)), true);
  // 0x10: u32
  if (data?.dwActiveWidth !== undefined) view.setUint32(16, Number(data.dwActiveWidth), true);
  // 0x14: u32
  if (data?.dwActiveHeight !== undefined) view.setUint32(20, Number(data.dwActiveHeight), true);
  // 0x18: i64
  if (data?.AvgTimePerFrame !== undefined) view.setBigInt64(24, BigInt(data.AvgTimePerFrame), true);
  return buf;
}

export class ANALOGVIDEOINFOView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get rcSource(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(0, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x08: pointer
  get rcTarget(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(8, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x10: u32
  get dwActiveWidth(): number {
    return this.view.getUint32(16, true);
  }

  // 0x14: u32
  get dwActiveHeight(): number {
    return this.view.getUint32(20, true);
  }

  // 0x18: i64
  get AvgTimePerFrame(): Deno.PointerValue {
    return Number(this.view.getBigInt64(24, true));
  }

  // 0x00: pointer
  set rcSource(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(0, BigInt(util.toPointer(value)), true);
  }

  // 0x08: pointer
  set rcTarget(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(8, BigInt(util.toPointer(value)), true);
  }

  // 0x10: u32
  set dwActiveWidth(value: number) {
    this.view.setUint32(16, value, true);
  }

  // 0x14: u32
  set dwActiveHeight(value: number) {
    this.view.setUint32(20, value, true);
  }

  // 0x18: i64
  set AvgTimePerFrame(value: Deno.PointerValue) {
    this.view.setBigInt64(24, BigInt(value), true);
  }
}

/**
 * Windows.Win32.Media.DirectShow.AM_FRAMESTEP_STEP (size: 8)
 */
export interface AM_FRAMESTEP_STEP {
  /** u32 */
  dwFramesToStep: number;
}

export const sizeofAM_FRAMESTEP_STEP = 8;

export function allocAM_FRAMESTEP_STEP(data?: Partial<AM_FRAMESTEP_STEP>): Uint8Array {
  const buf = new Uint8Array(sizeofAM_FRAMESTEP_STEP);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.dwFramesToStep !== undefined) view.setUint32(0, Number(data.dwFramesToStep), true);
  // 0x04: pad4
  return buf;
}

export class AM_FRAMESTEP_STEPView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get dwFramesToStep(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: pad4

  // 0x00: u32
  set dwFramesToStep(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: pad4
}

/**
 * Windows.Win32.Media.MediaFoundation.AM_MEDIA_TYPE (size: 64)
 */
export interface AM_MEDIA_TYPE {
  /** System.Guid */
  majortype: Uint8Array | Deno.PointerValue | null;
  /** System.Guid */
  subtype: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Foundation.BOOL */
  bFixedSizeSamples: boolean;
  /** Windows.Win32.Foundation.BOOL */
  bTemporalCompression: boolean;
  /** u32 */
  lSampleSize: number;
  /** System.Guid */
  formattype: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.System.Com.IUnknown */
  pUnk: Uint8Array | Deno.PointerValue | null;
  /** u32 */
  cbFormat: number;
  /** ptr */
  pbFormat: Deno.PointerValue | Uint8Array | null;
}

export const sizeofAM_MEDIA_TYPE = 64;

export function allocAM_MEDIA_TYPE(data?: Partial<AM_MEDIA_TYPE>): Uint8Array {
  const buf = new Uint8Array(sizeofAM_MEDIA_TYPE);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.majortype !== undefined) view.setBigUint64(0, data.majortype === null ? 0n : BigInt(util.toPointer(data.majortype)), true);
  // 0x08: pointer
  if (data?.subtype !== undefined) view.setBigUint64(8, data.subtype === null ? 0n : BigInt(util.toPointer(data.subtype)), true);
  // 0x10: i32
  if (data?.bFixedSizeSamples !== undefined) view.setInt32(16, Number(data.bFixedSizeSamples), true);
  // 0x14: i32
  if (data?.bTemporalCompression !== undefined) view.setInt32(20, Number(data.bTemporalCompression), true);
  // 0x18: u32
  if (data?.lSampleSize !== undefined) view.setUint32(24, Number(data.lSampleSize), true);
  // 0x1c: pad4
  // 0x20: pointer
  if (data?.formattype !== undefined) view.setBigUint64(32, data.formattype === null ? 0n : BigInt(util.toPointer(data.formattype)), true);
  // 0x28: pointer
  if (data?.pUnk !== undefined) view.setBigUint64(40, data.pUnk === null ? 0n : BigInt(util.toPointer(data.pUnk)), true);
  // 0x30: u32
  if (data?.cbFormat !== undefined) view.setUint32(48, Number(data.cbFormat), true);
  // 0x34: pad4
  // 0x38: pointer
  if (data?.pbFormat !== undefined) view.setBigUint64(56, data.pbFormat === null ? 0n : BigInt(util.toPointer(data.pbFormat)), true);
  return buf;
}

export class AM_MEDIA_TYPEView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get majortype(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(0, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x08: pointer
  get subtype(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(8, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x10: i32
  get bFixedSizeSamples(): number {
    return this.view.getInt32(16, true);
  }

  // 0x14: i32
  get bTemporalCompression(): number {
    return this.view.getInt32(20, true);
  }

  // 0x18: u32
  get lSampleSize(): number {
    return this.view.getUint32(24, true);
  }

  // 0x1c: pad4

  // 0x20: pointer
  get formattype(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(32, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x28: pointer
  get pUnk(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(40, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x30: u32
  get cbFormat(): number {
    return this.view.getUint32(48, true);
  }

  // 0x34: pad4

  // 0x38: pointer
  get pbFormat(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(56, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: pointer
  set majortype(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(0, BigInt(util.toPointer(value)), true);
  }

  // 0x08: pointer
  set subtype(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(8, BigInt(util.toPointer(value)), true);
  }

  // 0x10: i32
  set bFixedSizeSamples(value: number) {
    this.view.setInt32(16, value, true);
  }

  // 0x14: i32
  set bTemporalCompression(value: number) {
    this.view.setInt32(20, value, true);
  }

  // 0x18: u32
  set lSampleSize(value: number) {
    this.view.setUint32(24, value, true);
  }

  // 0x1c: pad4

  // 0x20: pointer
  set formattype(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(32, BigInt(util.toPointer(value)), true);
  }

  // 0x28: pointer
  set pUnk(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(40, BigInt(util.toPointer(value)), true);
  }

  // 0x30: u32
  set cbFormat(value: number) {
    this.view.setUint32(48, value, true);
  }

  // 0x34: pad4

  // 0x38: pointer
  set pbFormat(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(56, BigInt(util.toPointer(value)), true);
  }
}

/**
 * Windows.Win32.Media.DirectShow.AM_MPEGSTREAMTYPE (size: 24)
 */
export interface AM_MPEGSTREAMTYPE {
  /** u32 */
  dwStreamId: number;
  /** u32 */
  dwReserved: number;
  /** Windows.Win32.Media.MediaFoundation.AM_MEDIA_TYPE */
  mt: Uint8Array | Deno.PointerValue | null;
  /** array */
  bFormat: Deno.PointerValue | null;
}

export const sizeofAM_MPEGSTREAMTYPE = 24;

export function allocAM_MPEGSTREAMTYPE(data?: Partial<AM_MPEGSTREAMTYPE>): Uint8Array {
  const buf = new Uint8Array(sizeofAM_MPEGSTREAMTYPE);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.dwStreamId !== undefined) view.setUint32(0, Number(data.dwStreamId), true);
  // 0x04: u32
  if (data?.dwReserved !== undefined) view.setUint32(4, Number(data.dwReserved), true);
  // 0x08: pointer
  if (data?.mt !== undefined) view.setBigUint64(8, data.mt === null ? 0n : BigInt(util.toPointer(data.mt)), true);
  // 0x10: pointer
  if (data?.bFormat !== undefined) view.setBigUint64(16, data.bFormat === null ? 0n : BigInt(util.toPointer(data.bFormat)), true);
  return buf;
}

export class AM_MPEGSTREAMTYPEView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get dwStreamId(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: u32
  get dwReserved(): number {
    return this.view.getUint32(4, true);
  }

  // 0x08: pointer
  get mt(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(8, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x10: pointer
  get bFormat(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(16, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: u32
  set dwStreamId(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: u32
  set dwReserved(value: number) {
    this.view.setUint32(4, value, true);
  }

  // 0x08: pointer
  set mt(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(8, BigInt(util.toPointer(value)), true);
  }

  // 0x10: pointer
  set bFormat(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(16, BigInt(util.toPointer(value)), true);
  }
}

/**
 * Windows.Win32.Media.DirectShow.AM_MPEGSYSTEMTYPE (size: 16)
 */
export interface AM_MPEGSYSTEMTYPE {
  /** u32 */
  dwBitRate: number;
  /** u32 */
  cStreams: number;
  /** array */
  Streams: Deno.PointerValue | null;
}

export const sizeofAM_MPEGSYSTEMTYPE = 16;

export function allocAM_MPEGSYSTEMTYPE(data?: Partial<AM_MPEGSYSTEMTYPE>): Uint8Array {
  const buf = new Uint8Array(sizeofAM_MPEGSYSTEMTYPE);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.dwBitRate !== undefined) view.setUint32(0, Number(data.dwBitRate), true);
  // 0x04: u32
  if (data?.cStreams !== undefined) view.setUint32(4, Number(data.cStreams), true);
  // 0x08: pointer
  if (data?.Streams !== undefined) view.setBigUint64(8, data.Streams === null ? 0n : BigInt(util.toPointer(data.Streams)), true);
  return buf;
}

export class AM_MPEGSYSTEMTYPEView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get dwBitRate(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: u32
  get cStreams(): number {
    return this.view.getUint32(4, true);
  }

  // 0x08: pointer
  get Streams(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(8, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: u32
  set dwBitRate(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: u32
  set cStreams(value: number) {
    this.view.setUint32(4, value, true);
  }

  // 0x08: pointer
  set Streams(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(8, BigInt(util.toPointer(value)), true);
  }
}

/**
 * Windows.Win32.Media.DirectShow.VMR9PresentationInfo (size: 64)
 */
export interface VMR9PresentationInfo {
  /** u32 */
  dwFlags: number;
  /** Windows.Win32.Graphics.Direct3D9.IDirect3DSurface9 */
  lpSurf: Uint8Array | Deno.PointerValue | null;
  /** i64 */
  rtStart: Deno.PointerValue;
  /** i64 */
  rtEnd: Deno.PointerValue;
  /** Windows.Win32.Foundation.SIZE */
  szAspectRatio: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Foundation.RECT */
  rcSrc: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Foundation.RECT */
  rcDst: Uint8Array | Deno.PointerValue | null;
  /** u32 */
  dwReserved1: number;
  /** u32 */
  dwReserved2: number;
}

export const sizeofVMR9PresentationInfo = 64;

export function allocVMR9PresentationInfo(data?: Partial<VMR9PresentationInfo>): Uint8Array {
  const buf = new Uint8Array(sizeofVMR9PresentationInfo);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.dwFlags !== undefined) view.setUint32(0, Number(data.dwFlags), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.lpSurf !== undefined) view.setBigUint64(8, data.lpSurf === null ? 0n : BigInt(util.toPointer(data.lpSurf)), true);
  // 0x10: i64
  if (data?.rtStart !== undefined) view.setBigInt64(16, BigInt(data.rtStart), true);
  // 0x18: i64
  if (data?.rtEnd !== undefined) view.setBigInt64(24, BigInt(data.rtEnd), true);
  // 0x20: pointer
  if (data?.szAspectRatio !== undefined) view.setBigUint64(32, data.szAspectRatio === null ? 0n : BigInt(util.toPointer(data.szAspectRatio)), true);
  // 0x28: pointer
  if (data?.rcSrc !== undefined) view.setBigUint64(40, data.rcSrc === null ? 0n : BigInt(util.toPointer(data.rcSrc)), true);
  // 0x30: pointer
  if (data?.rcDst !== undefined) view.setBigUint64(48, data.rcDst === null ? 0n : BigInt(util.toPointer(data.rcDst)), true);
  // 0x38: u32
  if (data?.dwReserved1 !== undefined) view.setUint32(56, Number(data.dwReserved1), true);
  // 0x3c: u32
  if (data?.dwReserved2 !== undefined) view.setUint32(60, Number(data.dwReserved2), true);
  return buf;
}

export class VMR9PresentationInfoView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get dwFlags(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  get lpSurf(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(8, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x10: i64
  get rtStart(): Deno.PointerValue {
    return Number(this.view.getBigInt64(16, true));
  }

  // 0x18: i64
  get rtEnd(): Deno.PointerValue {
    return Number(this.view.getBigInt64(24, true));
  }

  // 0x20: pointer
  get szAspectRatio(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(32, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x28: pointer
  get rcSrc(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(40, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x30: pointer
  get rcDst(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(48, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x38: u32
  get dwReserved1(): number {
    return this.view.getUint32(56, true);
  }

  // 0x3c: u32
  get dwReserved2(): number {
    return this.view.getUint32(60, true);
  }

  // 0x00: u32
  set dwFlags(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  set lpSurf(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(8, BigInt(util.toPointer(value)), true);
  }

  // 0x10: i64
  set rtStart(value: Deno.PointerValue) {
    this.view.setBigInt64(16, BigInt(value), true);
  }

  // 0x18: i64
  set rtEnd(value: Deno.PointerValue) {
    this.view.setBigInt64(24, BigInt(value), true);
  }

  // 0x20: pointer
  set szAspectRatio(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(32, BigInt(util.toPointer(value)), true);
  }

  // 0x28: pointer
  set rcSrc(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(40, BigInt(util.toPointer(value)), true);
  }

  // 0x30: pointer
  set rcDst(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(48, BigInt(util.toPointer(value)), true);
  }

  // 0x38: u32
  set dwReserved1(value: number) {
    this.view.setUint32(56, value, true);
  }

  // 0x3c: u32
  set dwReserved2(value: number) {
    this.view.setUint32(60, value, true);
  }
}

/**
 * Windows.Win32.Media.DirectShow.VMR9AllocationInfo (size: 40)
 */
export interface VMR9AllocationInfo {
  /** u32 */
  dwFlags: number;
  /** u32 */
  dwWidth: number;
  /** u32 */
  dwHeight: number;
  /** Windows.Win32.Graphics.Direct3D9.D3DFORMAT */
  Format: D3DFORMAT;
  /** Windows.Win32.Graphics.Direct3D9.D3DPOOL */
  Pool: D3DPOOL;
  /** u32 */
  MinBuffers: number;
  /** Windows.Win32.Foundation.SIZE */
  szAspectRatio: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Foundation.SIZE */
  szNativeSize: Uint8Array | Deno.PointerValue | null;
}

export const sizeofVMR9AllocationInfo = 40;

export function allocVMR9AllocationInfo(data?: Partial<VMR9AllocationInfo>): Uint8Array {
  const buf = new Uint8Array(sizeofVMR9AllocationInfo);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.dwFlags !== undefined) view.setUint32(0, Number(data.dwFlags), true);
  // 0x04: u32
  if (data?.dwWidth !== undefined) view.setUint32(4, Number(data.dwWidth), true);
  // 0x08: u32
  if (data?.dwHeight !== undefined) view.setUint32(8, Number(data.dwHeight), true);
  // 0x0c: u32
  if (data?.Format !== undefined) view.setUint32(12, Number(data.Format), true);
  // 0x10: u32
  if (data?.Pool !== undefined) view.setUint32(16, Number(data.Pool), true);
  // 0x14: u32
  if (data?.MinBuffers !== undefined) view.setUint32(20, Number(data.MinBuffers), true);
  // 0x18: pointer
  if (data?.szAspectRatio !== undefined) view.setBigUint64(24, data.szAspectRatio === null ? 0n : BigInt(util.toPointer(data.szAspectRatio)), true);
  // 0x20: pointer
  if (data?.szNativeSize !== undefined) view.setBigUint64(32, data.szNativeSize === null ? 0n : BigInt(util.toPointer(data.szNativeSize)), true);
  return buf;
}

export class VMR9AllocationInfoView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get dwFlags(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: u32
  get dwWidth(): number {
    return this.view.getUint32(4, true);
  }

  // 0x08: u32
  get dwHeight(): number {
    return this.view.getUint32(8, true);
  }

  // 0x0c: u32
  get Format(): number {
    return this.view.getUint32(12, true);
  }

  // 0x10: u32
  get Pool(): number {
    return this.view.getUint32(16, true);
  }

  // 0x14: u32
  get MinBuffers(): number {
    return this.view.getUint32(20, true);
  }

  // 0x18: pointer
  get szAspectRatio(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(24, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x20: pointer
  get szNativeSize(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(32, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: u32
  set dwFlags(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: u32
  set dwWidth(value: number) {
    this.view.setUint32(4, value, true);
  }

  // 0x08: u32
  set dwHeight(value: number) {
    this.view.setUint32(8, value, true);
  }

  // 0x0c: u32
  set Format(value: number) {
    this.view.setUint32(12, value, true);
  }

  // 0x10: u32
  set Pool(value: number) {
    this.view.setUint32(16, value, true);
  }

  // 0x14: u32
  set MinBuffers(value: number) {
    this.view.setUint32(20, value, true);
  }

  // 0x18: pointer
  set szAspectRatio(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(24, BigInt(util.toPointer(value)), true);
  }

  // 0x20: pointer
  set szNativeSize(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(32, BigInt(util.toPointer(value)), true);
  }
}

/**
 * Windows.Win32.Media.DirectShow.VMR9NormalizedRect (size: 16)
 */
export interface VMR9NormalizedRect {
  /** f32 */
  left: number;
  /** f32 */
  top: number;
  /** f32 */
  right: number;
  /** f32 */
  bottom: number;
}

export const sizeofVMR9NormalizedRect = 16;

export function allocVMR9NormalizedRect(data?: Partial<VMR9NormalizedRect>): Uint8Array {
  const buf = new Uint8Array(sizeofVMR9NormalizedRect);
  const view = new DataView(buf.buffer);
  // 0x00: f32
  if (data?.left !== undefined) view.setFloat32(0, Number(data.left), true);
  // 0x04: f32
  if (data?.top !== undefined) view.setFloat32(4, Number(data.top), true);
  // 0x08: f32
  if (data?.right !== undefined) view.setFloat32(8, Number(data.right), true);
  // 0x0c: f32
  if (data?.bottom !== undefined) view.setFloat32(12, Number(data.bottom), true);
  return buf;
}

export class VMR9NormalizedRectView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: f32
  get left(): number {
    return this.view.getFloat32(0, true);
  }

  // 0x04: f32
  get top(): number {
    return this.view.getFloat32(4, true);
  }

  // 0x08: f32
  get right(): number {
    return this.view.getFloat32(8, true);
  }

  // 0x0c: f32
  get bottom(): number {
    return this.view.getFloat32(12, true);
  }

  // 0x00: f32
  set left(value: number) {
    this.view.setFloat32(0, value, true);
  }

  // 0x04: f32
  set top(value: number) {
    this.view.setFloat32(4, value, true);
  }

  // 0x08: f32
  set right(value: number) {
    this.view.setFloat32(8, value, true);
  }

  // 0x0c: f32
  set bottom(value: number) {
    this.view.setFloat32(12, value, true);
  }
}

/**
 * Windows.Win32.Media.DirectShow.VMR9ProcAmpControl (size: 24)
 */
export interface VMR9ProcAmpControl {
  /** u32 */
  dwSize: number;
  /** u32 */
  dwFlags: number;
  /** f32 */
  Brightness: number;
  /** f32 */
  Contrast: number;
  /** f32 */
  Hue: number;
  /** f32 */
  Saturation: number;
}

export const sizeofVMR9ProcAmpControl = 24;

export function allocVMR9ProcAmpControl(data?: Partial<VMR9ProcAmpControl>): Uint8Array {
  const buf = new Uint8Array(sizeofVMR9ProcAmpControl);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.dwSize !== undefined) view.setUint32(0, Number(data.dwSize), true);
  // 0x04: u32
  if (data?.dwFlags !== undefined) view.setUint32(4, Number(data.dwFlags), true);
  // 0x08: f32
  if (data?.Brightness !== undefined) view.setFloat32(8, Number(data.Brightness), true);
  // 0x0c: f32
  if (data?.Contrast !== undefined) view.setFloat32(12, Number(data.Contrast), true);
  // 0x10: f32
  if (data?.Hue !== undefined) view.setFloat32(16, Number(data.Hue), true);
  // 0x14: f32
  if (data?.Saturation !== undefined) view.setFloat32(20, Number(data.Saturation), true);
  return buf;
}

export class VMR9ProcAmpControlView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get dwSize(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: u32
  get dwFlags(): number {
    return this.view.getUint32(4, true);
  }

  // 0x08: f32
  get Brightness(): number {
    return this.view.getFloat32(8, true);
  }

  // 0x0c: f32
  get Contrast(): number {
    return this.view.getFloat32(12, true);
  }

  // 0x10: f32
  get Hue(): number {
    return this.view.getFloat32(16, true);
  }

  // 0x14: f32
  get Saturation(): number {
    return this.view.getFloat32(20, true);
  }

  // 0x00: u32
  set dwSize(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: u32
  set dwFlags(value: number) {
    this.view.setUint32(4, value, true);
  }

  // 0x08: f32
  set Brightness(value: number) {
    this.view.setFloat32(8, value, true);
  }

  // 0x0c: f32
  set Contrast(value: number) {
    this.view.setFloat32(12, value, true);
  }

  // 0x10: f32
  set Hue(value: number) {
    this.view.setFloat32(16, value, true);
  }

  // 0x14: f32
  set Saturation(value: number) {
    this.view.setFloat32(20, value, true);
  }
}

/**
 * Windows.Win32.Media.DirectShow.VMR9ProcAmpControlRange (size: 24)
 */
export interface VMR9ProcAmpControlRange {
  /** u32 */
  dwSize: number;
  /** Windows.Win32.Media.DirectShow.VMR9ProcAmpControlFlags */
  dwProperty: VMR9ProcAmpControlFlags;
  /** f32 */
  MinValue: number;
  /** f32 */
  MaxValue: number;
  /** f32 */
  DefaultValue: number;
  /** f32 */
  StepSize: number;
}

export const sizeofVMR9ProcAmpControlRange = 24;

export function allocVMR9ProcAmpControlRange(data?: Partial<VMR9ProcAmpControlRange>): Uint8Array {
  const buf = new Uint8Array(sizeofVMR9ProcAmpControlRange);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.dwSize !== undefined) view.setUint32(0, Number(data.dwSize), true);
  // 0x04: i32
  if (data?.dwProperty !== undefined) view.setInt32(4, Number(data.dwProperty), true);
  // 0x08: f32
  if (data?.MinValue !== undefined) view.setFloat32(8, Number(data.MinValue), true);
  // 0x0c: f32
  if (data?.MaxValue !== undefined) view.setFloat32(12, Number(data.MaxValue), true);
  // 0x10: f32
  if (data?.DefaultValue !== undefined) view.setFloat32(16, Number(data.DefaultValue), true);
  // 0x14: f32
  if (data?.StepSize !== undefined) view.setFloat32(20, Number(data.StepSize), true);
  return buf;
}

export class VMR9ProcAmpControlRangeView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get dwSize(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: i32
  get dwProperty(): number {
    return this.view.getInt32(4, true);
  }

  // 0x08: f32
  get MinValue(): number {
    return this.view.getFloat32(8, true);
  }

  // 0x0c: f32
  get MaxValue(): number {
    return this.view.getFloat32(12, true);
  }

  // 0x10: f32
  get DefaultValue(): number {
    return this.view.getFloat32(16, true);
  }

  // 0x14: f32
  get StepSize(): number {
    return this.view.getFloat32(20, true);
  }

  // 0x00: u32
  set dwSize(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: i32
  set dwProperty(value: number) {
    this.view.setInt32(4, value, true);
  }

  // 0x08: f32
  set MinValue(value: number) {
    this.view.setFloat32(8, value, true);
  }

  // 0x0c: f32
  set MaxValue(value: number) {
    this.view.setFloat32(12, value, true);
  }

  // 0x10: f32
  set DefaultValue(value: number) {
    this.view.setFloat32(16, value, true);
  }

  // 0x14: f32
  set StepSize(value: number) {
    this.view.setFloat32(20, value, true);
  }
}

/**
 * Windows.Win32.Media.DirectShow.VMR9AlphaBitmap (size: 64)
 */
export interface VMR9AlphaBitmap {
  /** u32 */
  dwFlags: number;
  /** Windows.Win32.Graphics.Gdi.HDC */
  hdc: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Graphics.Direct3D9.IDirect3DSurface9 */
  pDDS: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Foundation.RECT */
  rSrc: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Media.DirectShow.VMR9NormalizedRect */
  rDest: Uint8Array | Deno.PointerValue | null;
  /** f32 */
  fAlpha: number;
  /** Windows.Win32.Foundation.COLORREF */
  clrSrcKey: Uint8Array | Deno.PointerValue | null;
  /** u32 */
  dwFilterMode: number;
}

export const sizeofVMR9AlphaBitmap = 64;

export function allocVMR9AlphaBitmap(data?: Partial<VMR9AlphaBitmap>): Uint8Array {
  const buf = new Uint8Array(sizeofVMR9AlphaBitmap);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.dwFlags !== undefined) view.setUint32(0, Number(data.dwFlags), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.hdc !== undefined) view.setBigUint64(8, data.hdc === null ? 0n : BigInt(util.toPointer(data.hdc)), true);
  // 0x10: pointer
  if (data?.pDDS !== undefined) view.setBigUint64(16, data.pDDS === null ? 0n : BigInt(util.toPointer(data.pDDS)), true);
  // 0x18: pointer
  if (data?.rSrc !== undefined) view.setBigUint64(24, data.rSrc === null ? 0n : BigInt(util.toPointer(data.rSrc)), true);
  // 0x20: pointer
  if (data?.rDest !== undefined) view.setBigUint64(32, data.rDest === null ? 0n : BigInt(util.toPointer(data.rDest)), true);
  // 0x28: f32
  if (data?.fAlpha !== undefined) view.setFloat32(40, Number(data.fAlpha), true);
  // 0x2c: pad4
  // 0x30: pointer
  if (data?.clrSrcKey !== undefined) view.setBigUint64(48, data.clrSrcKey === null ? 0n : BigInt(util.toPointer(data.clrSrcKey)), true);
  // 0x38: u32
  if (data?.dwFilterMode !== undefined) view.setUint32(56, Number(data.dwFilterMode), true);
  // 0x3c: pad4
  return buf;
}

export class VMR9AlphaBitmapView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get dwFlags(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  get hdc(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(8, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x10: pointer
  get pDDS(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(16, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x18: pointer
  get rSrc(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(24, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x20: pointer
  get rDest(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(32, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x28: f32
  get fAlpha(): number {
    return this.view.getFloat32(40, true);
  }

  // 0x2c: pad4

  // 0x30: pointer
  get clrSrcKey(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(48, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x38: u32
  get dwFilterMode(): number {
    return this.view.getUint32(56, true);
  }

  // 0x3c: pad4

  // 0x00: u32
  set dwFlags(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  set hdc(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(8, BigInt(util.toPointer(value)), true);
  }

  // 0x10: pointer
  set pDDS(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(16, BigInt(util.toPointer(value)), true);
  }

  // 0x18: pointer
  set rSrc(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(24, BigInt(util.toPointer(value)), true);
  }

  // 0x20: pointer
  set rDest(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(32, BigInt(util.toPointer(value)), true);
  }

  // 0x28: f32
  set fAlpha(value: number) {
    this.view.setFloat32(40, value, true);
  }

  // 0x2c: pad4

  // 0x30: pointer
  set clrSrcKey(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(48, BigInt(util.toPointer(value)), true);
  }

  // 0x38: u32
  set dwFilterMode(value: number) {
    this.view.setUint32(56, value, true);
  }

  // 0x3c: pad4
}

/**
 * Windows.Win32.Media.DirectShow.VMR9MonitorInfo (size: 72)
 */
export interface VMR9MonitorInfo {
  /** u32 */
  uDevID: number;
  /** Windows.Win32.Foundation.RECT */
  rcMonitor: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Graphics.Gdi.HMONITOR */
  hMon: Uint8Array | Deno.PointerValue | null;
  /** u32 */
  dwFlags: number;
  /** array */
  szDevice: Deno.PointerValue | null;
  /** array */
  szDescription: Deno.PointerValue | null;
  /** Windows.Win32.Foundation.LARGE_INTEGER */
  liDriverVersion: Uint8Array | Deno.PointerValue | null;
  /** u32 */
  dwVendorId: number;
  /** u32 */
  dwDeviceId: number;
  /** u32 */
  dwSubSysId: number;
  /** u32 */
  dwRevision: number;
}

export const sizeofVMR9MonitorInfo = 72;

export function allocVMR9MonitorInfo(data?: Partial<VMR9MonitorInfo>): Uint8Array {
  const buf = new Uint8Array(sizeofVMR9MonitorInfo);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.uDevID !== undefined) view.setUint32(0, Number(data.uDevID), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.rcMonitor !== undefined) view.setBigUint64(8, data.rcMonitor === null ? 0n : BigInt(util.toPointer(data.rcMonitor)), true);
  // 0x10: pointer
  if (data?.hMon !== undefined) view.setBigUint64(16, data.hMon === null ? 0n : BigInt(util.toPointer(data.hMon)), true);
  // 0x18: u32
  if (data?.dwFlags !== undefined) view.setUint32(24, Number(data.dwFlags), true);
  // 0x1c: pad4
  // 0x20: pointer
  if (data?.szDevice !== undefined) view.setBigUint64(32, data.szDevice === null ? 0n : BigInt(util.toPointer(data.szDevice)), true);
  // 0x28: pointer
  if (data?.szDescription !== undefined) view.setBigUint64(40, data.szDescription === null ? 0n : BigInt(util.toPointer(data.szDescription)), true);
  // 0x30: pointer
  if (data?.liDriverVersion !== undefined) view.setBigUint64(48, data.liDriverVersion === null ? 0n : BigInt(util.toPointer(data.liDriverVersion)), true);
  // 0x38: u32
  if (data?.dwVendorId !== undefined) view.setUint32(56, Number(data.dwVendorId), true);
  // 0x3c: u32
  if (data?.dwDeviceId !== undefined) view.setUint32(60, Number(data.dwDeviceId), true);
  // 0x40: u32
  if (data?.dwSubSysId !== undefined) view.setUint32(64, Number(data.dwSubSysId), true);
  // 0x44: u32
  if (data?.dwRevision !== undefined) view.setUint32(68, Number(data.dwRevision), true);
  return buf;
}

export class VMR9MonitorInfoView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get uDevID(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  get rcMonitor(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(8, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x10: pointer
  get hMon(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(16, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x18: u32
  get dwFlags(): number {
    return this.view.getUint32(24, true);
  }

  // 0x1c: pad4

  // 0x20: pointer
  get szDevice(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(32, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x28: pointer
  get szDescription(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(40, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x30: pointer
  get liDriverVersion(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(48, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x38: u32
  get dwVendorId(): number {
    return this.view.getUint32(56, true);
  }

  // 0x3c: u32
  get dwDeviceId(): number {
    return this.view.getUint32(60, true);
  }

  // 0x40: u32
  get dwSubSysId(): number {
    return this.view.getUint32(64, true);
  }

  // 0x44: u32
  get dwRevision(): number {
    return this.view.getUint32(68, true);
  }

  // 0x00: u32
  set uDevID(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  set rcMonitor(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(8, BigInt(util.toPointer(value)), true);
  }

  // 0x10: pointer
  set hMon(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(16, BigInt(util.toPointer(value)), true);
  }

  // 0x18: u32
  set dwFlags(value: number) {
    this.view.setUint32(24, value, true);
  }

  // 0x1c: pad4

  // 0x20: pointer
  set szDevice(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(32, BigInt(util.toPointer(value)), true);
  }

  // 0x28: pointer
  set szDescription(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(40, BigInt(util.toPointer(value)), true);
  }

  // 0x30: pointer
  set liDriverVersion(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(48, BigInt(util.toPointer(value)), true);
  }

  // 0x38: u32
  set dwVendorId(value: number) {
    this.view.setUint32(56, value, true);
  }

  // 0x3c: u32
  set dwDeviceId(value: number) {
    this.view.setUint32(60, value, true);
  }

  // 0x40: u32
  set dwSubSysId(value: number) {
    this.view.setUint32(64, value, true);
  }

  // 0x44: u32
  set dwRevision(value: number) {
    this.view.setUint32(68, value, true);
  }
}

/**
 * Windows.Win32.Media.DirectShow.VMR9Frequency (size: 8)
 */
export interface VMR9Frequency {
  /** u32 */
  dwNumerator: number;
  /** u32 */
  dwDenominator: number;
}

export const sizeofVMR9Frequency = 8;

export function allocVMR9Frequency(data?: Partial<VMR9Frequency>): Uint8Array {
  const buf = new Uint8Array(sizeofVMR9Frequency);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.dwNumerator !== undefined) view.setUint32(0, Number(data.dwNumerator), true);
  // 0x04: u32
  if (data?.dwDenominator !== undefined) view.setUint32(4, Number(data.dwDenominator), true);
  return buf;
}

export class VMR9FrequencyView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get dwNumerator(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: u32
  get dwDenominator(): number {
    return this.view.getUint32(4, true);
  }

  // 0x00: u32
  set dwNumerator(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: u32
  set dwDenominator(value: number) {
    this.view.setUint32(4, value, true);
  }
}

/**
 * Windows.Win32.Media.DirectShow.VMR9VideoDesc (size: 40)
 */
export interface VMR9VideoDesc {
  /** u32 */
  dwSize: number;
  /** u32 */
  dwSampleWidth: number;
  /** u32 */
  dwSampleHeight: number;
  /** Windows.Win32.Media.DirectShow.VMR9_SampleFormat */
  SampleFormat: VMR9_SampleFormat;
  /** u32 */
  dwFourCC: number;
  /** Windows.Win32.Media.DirectShow.VMR9Frequency */
  InputSampleFreq: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Media.DirectShow.VMR9Frequency */
  OutputFrameFreq: Uint8Array | Deno.PointerValue | null;
}

export const sizeofVMR9VideoDesc = 40;

export function allocVMR9VideoDesc(data?: Partial<VMR9VideoDesc>): Uint8Array {
  const buf = new Uint8Array(sizeofVMR9VideoDesc);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.dwSize !== undefined) view.setUint32(0, Number(data.dwSize), true);
  // 0x04: u32
  if (data?.dwSampleWidth !== undefined) view.setUint32(4, Number(data.dwSampleWidth), true);
  // 0x08: u32
  if (data?.dwSampleHeight !== undefined) view.setUint32(8, Number(data.dwSampleHeight), true);
  // 0x0c: i32
  if (data?.SampleFormat !== undefined) view.setInt32(12, Number(data.SampleFormat), true);
  // 0x10: u32
  if (data?.dwFourCC !== undefined) view.setUint32(16, Number(data.dwFourCC), true);
  // 0x14: pad4
  // 0x18: pointer
  if (data?.InputSampleFreq !== undefined) view.setBigUint64(24, data.InputSampleFreq === null ? 0n : BigInt(util.toPointer(data.InputSampleFreq)), true);
  // 0x20: pointer
  if (data?.OutputFrameFreq !== undefined) view.setBigUint64(32, data.OutputFrameFreq === null ? 0n : BigInt(util.toPointer(data.OutputFrameFreq)), true);
  return buf;
}

export class VMR9VideoDescView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get dwSize(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: u32
  get dwSampleWidth(): number {
    return this.view.getUint32(4, true);
  }

  // 0x08: u32
  get dwSampleHeight(): number {
    return this.view.getUint32(8, true);
  }

  // 0x0c: i32
  get SampleFormat(): number {
    return this.view.getInt32(12, true);
  }

  // 0x10: u32
  get dwFourCC(): number {
    return this.view.getUint32(16, true);
  }

  // 0x14: pad4

  // 0x18: pointer
  get InputSampleFreq(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(24, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x20: pointer
  get OutputFrameFreq(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(32, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: u32
  set dwSize(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: u32
  set dwSampleWidth(value: number) {
    this.view.setUint32(4, value, true);
  }

  // 0x08: u32
  set dwSampleHeight(value: number) {
    this.view.setUint32(8, value, true);
  }

  // 0x0c: i32
  set SampleFormat(value: number) {
    this.view.setInt32(12, value, true);
  }

  // 0x10: u32
  set dwFourCC(value: number) {
    this.view.setUint32(16, value, true);
  }

  // 0x14: pad4

  // 0x18: pointer
  set InputSampleFreq(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(24, BigInt(util.toPointer(value)), true);
  }

  // 0x20: pointer
  set OutputFrameFreq(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(32, BigInt(util.toPointer(value)), true);
  }
}

/**
 * Windows.Win32.Media.DirectShow.VMR9DeinterlaceCaps (size: 24)
 */
export interface VMR9DeinterlaceCaps {
  /** u32 */
  dwSize: number;
  /** u32 */
  dwNumPreviousOutputFrames: number;
  /** u32 */
  dwNumForwardRefSamples: number;
  /** u32 */
  dwNumBackwardRefSamples: number;
  /** Windows.Win32.Media.DirectShow.VMR9DeinterlaceTech */
  DeinterlaceTechnology: VMR9DeinterlaceTech;
}

export const sizeofVMR9DeinterlaceCaps = 24;

export function allocVMR9DeinterlaceCaps(data?: Partial<VMR9DeinterlaceCaps>): Uint8Array {
  const buf = new Uint8Array(sizeofVMR9DeinterlaceCaps);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.dwSize !== undefined) view.setUint32(0, Number(data.dwSize), true);
  // 0x04: u32
  if (data?.dwNumPreviousOutputFrames !== undefined) view.setUint32(4, Number(data.dwNumPreviousOutputFrames), true);
  // 0x08: u32
  if (data?.dwNumForwardRefSamples !== undefined) view.setUint32(8, Number(data.dwNumForwardRefSamples), true);
  // 0x0c: u32
  if (data?.dwNumBackwardRefSamples !== undefined) view.setUint32(12, Number(data.dwNumBackwardRefSamples), true);
  // 0x10: i32
  if (data?.DeinterlaceTechnology !== undefined) view.setInt32(16, Number(data.DeinterlaceTechnology), true);
  // 0x14: pad4
  return buf;
}

export class VMR9DeinterlaceCapsView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get dwSize(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: u32
  get dwNumPreviousOutputFrames(): number {
    return this.view.getUint32(4, true);
  }

  // 0x08: u32
  get dwNumForwardRefSamples(): number {
    return this.view.getUint32(8, true);
  }

  // 0x0c: u32
  get dwNumBackwardRefSamples(): number {
    return this.view.getUint32(12, true);
  }

  // 0x10: i32
  get DeinterlaceTechnology(): number {
    return this.view.getInt32(16, true);
  }

  // 0x14: pad4

  // 0x00: u32
  set dwSize(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: u32
  set dwNumPreviousOutputFrames(value: number) {
    this.view.setUint32(4, value, true);
  }

  // 0x08: u32
  set dwNumForwardRefSamples(value: number) {
    this.view.setUint32(8, value, true);
  }

  // 0x0c: u32
  set dwNumBackwardRefSamples(value: number) {
    this.view.setUint32(12, value, true);
  }

  // 0x10: i32
  set DeinterlaceTechnology(value: number) {
    this.view.setInt32(16, value, true);
  }

  // 0x14: pad4
}

/**
 * Windows.Win32.Media.DirectShow.VMR9VideoStreamInfo (size: 56)
 */
export interface VMR9VideoStreamInfo {
  /** Windows.Win32.Graphics.Direct3D9.IDirect3DSurface9 */
  pddsVideoSurface: Uint8Array | Deno.PointerValue | null;
  /** u32 */
  dwWidth: number;
  /** u32 */
  dwHeight: number;
  /** u32 */
  dwStrmID: number;
  /** f32 */
  fAlpha: number;
  /** Windows.Win32.Media.DirectShow.VMR9NormalizedRect */
  rNormal: Uint8Array | Deno.PointerValue | null;
  /** i64 */
  rtStart: Deno.PointerValue;
  /** i64 */
  rtEnd: Deno.PointerValue;
  /** Windows.Win32.Media.DirectShow.VMR9_SampleFormat */
  SampleFormat: VMR9_SampleFormat;
}

export const sizeofVMR9VideoStreamInfo = 56;

export function allocVMR9VideoStreamInfo(data?: Partial<VMR9VideoStreamInfo>): Uint8Array {
  const buf = new Uint8Array(sizeofVMR9VideoStreamInfo);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.pddsVideoSurface !== undefined) view.setBigUint64(0, data.pddsVideoSurface === null ? 0n : BigInt(util.toPointer(data.pddsVideoSurface)), true);
  // 0x08: u32
  if (data?.dwWidth !== undefined) view.setUint32(8, Number(data.dwWidth), true);
  // 0x0c: u32
  if (data?.dwHeight !== undefined) view.setUint32(12, Number(data.dwHeight), true);
  // 0x10: u32
  if (data?.dwStrmID !== undefined) view.setUint32(16, Number(data.dwStrmID), true);
  // 0x14: f32
  if (data?.fAlpha !== undefined) view.setFloat32(20, Number(data.fAlpha), true);
  // 0x18: pointer
  if (data?.rNormal !== undefined) view.setBigUint64(24, data.rNormal === null ? 0n : BigInt(util.toPointer(data.rNormal)), true);
  // 0x20: i64
  if (data?.rtStart !== undefined) view.setBigInt64(32, BigInt(data.rtStart), true);
  // 0x28: i64
  if (data?.rtEnd !== undefined) view.setBigInt64(40, BigInt(data.rtEnd), true);
  // 0x30: i32
  if (data?.SampleFormat !== undefined) view.setInt32(48, Number(data.SampleFormat), true);
  // 0x34: pad4
  return buf;
}

export class VMR9VideoStreamInfoView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get pddsVideoSurface(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(0, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x08: u32
  get dwWidth(): number {
    return this.view.getUint32(8, true);
  }

  // 0x0c: u32
  get dwHeight(): number {
    return this.view.getUint32(12, true);
  }

  // 0x10: u32
  get dwStrmID(): number {
    return this.view.getUint32(16, true);
  }

  // 0x14: f32
  get fAlpha(): number {
    return this.view.getFloat32(20, true);
  }

  // 0x18: pointer
  get rNormal(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(24, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x20: i64
  get rtStart(): Deno.PointerValue {
    return Number(this.view.getBigInt64(32, true));
  }

  // 0x28: i64
  get rtEnd(): Deno.PointerValue {
    return Number(this.view.getBigInt64(40, true));
  }

  // 0x30: i32
  get SampleFormat(): number {
    return this.view.getInt32(48, true);
  }

  // 0x34: pad4

  // 0x00: pointer
  set pddsVideoSurface(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(0, BigInt(util.toPointer(value)), true);
  }

  // 0x08: u32
  set dwWidth(value: number) {
    this.view.setUint32(8, value, true);
  }

  // 0x0c: u32
  set dwHeight(value: number) {
    this.view.setUint32(12, value, true);
  }

  // 0x10: u32
  set dwStrmID(value: number) {
    this.view.setUint32(16, value, true);
  }

  // 0x14: f32
  set fAlpha(value: number) {
    this.view.setFloat32(20, value, true);
  }

  // 0x18: pointer
  set rNormal(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(24, BigInt(util.toPointer(value)), true);
  }

  // 0x20: i64
  set rtStart(value: Deno.PointerValue) {
    this.view.setBigInt64(32, BigInt(value), true);
  }

  // 0x28: i64
  set rtEnd(value: Deno.PointerValue) {
    this.view.setBigInt64(40, BigInt(value), true);
  }

  // 0x30: i32
  set SampleFormat(value: number) {
    this.view.setInt32(48, value, true);
  }

  // 0x34: pad4
}

/**
 * Windows.Win32.Media.DirectShow.RIFFCHUNK (size: 8)
 */
export interface RIFFCHUNK {
  /** u32 */
  fcc: number;
  /** u32 */
  cb: number;
}

export const sizeofRIFFCHUNK = 8;

export function allocRIFFCHUNK(data?: Partial<RIFFCHUNK>): Uint8Array {
  const buf = new Uint8Array(sizeofRIFFCHUNK);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.fcc !== undefined) view.setUint32(0, Number(data.fcc), true);
  // 0x04: u32
  if (data?.cb !== undefined) view.setUint32(4, Number(data.cb), true);
  return buf;
}

export class RIFFCHUNKView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get fcc(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: u32
  get cb(): number {
    return this.view.getUint32(4, true);
  }

  // 0x00: u32
  set fcc(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: u32
  set cb(value: number) {
    this.view.setUint32(4, value, true);
  }
}

/**
 * Windows.Win32.Media.DirectShow.RIFFLIST (size: 16)
 */
export interface RIFFLIST {
  /** u32 */
  fcc: number;
  /** u32 */
  cb: number;
  /** u32 */
  fccListType: number;
}

export const sizeofRIFFLIST = 16;

export function allocRIFFLIST(data?: Partial<RIFFLIST>): Uint8Array {
  const buf = new Uint8Array(sizeofRIFFLIST);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.fcc !== undefined) view.setUint32(0, Number(data.fcc), true);
  // 0x04: u32
  if (data?.cb !== undefined) view.setUint32(4, Number(data.cb), true);
  // 0x08: u32
  if (data?.fccListType !== undefined) view.setUint32(8, Number(data.fccListType), true);
  // 0x0c: pad4
  return buf;
}

export class RIFFLISTView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get fcc(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: u32
  get cb(): number {
    return this.view.getUint32(4, true);
  }

  // 0x08: u32
  get fccListType(): number {
    return this.view.getUint32(8, true);
  }

  // 0x0c: pad4

  // 0x00: u32
  set fcc(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: u32
  set cb(value: number) {
    this.view.setUint32(4, value, true);
  }

  // 0x08: u32
  set fccListType(value: number) {
    this.view.setUint32(8, value, true);
  }

  // 0x0c: pad4
}

/**
 * Windows.Win32.Media.DirectShow.AVIMAINHEADER (size: 56)
 */
export interface AVIMAINHEADER {
  /** u32 */
  fcc: number;
  /** u32 */
  cb: number;
  /** u32 */
  dwMicroSecPerFrame: number;
  /** u32 */
  dwMaxBytesPerSec: number;
  /** u32 */
  dwPaddingGranularity: number;
  /** u32 */
  dwFlags: number;
  /** u32 */
  dwTotalFrames: number;
  /** u32 */
  dwInitialFrames: number;
  /** u32 */
  dwStreams: number;
  /** u32 */
  dwSuggestedBufferSize: number;
  /** u32 */
  dwWidth: number;
  /** u32 */
  dwHeight: number;
  /** array */
  dwReserved: Deno.PointerValue | null;
}

export const sizeofAVIMAINHEADER = 56;

export function allocAVIMAINHEADER(data?: Partial<AVIMAINHEADER>): Uint8Array {
  const buf = new Uint8Array(sizeofAVIMAINHEADER);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.fcc !== undefined) view.setUint32(0, Number(data.fcc), true);
  // 0x04: u32
  if (data?.cb !== undefined) view.setUint32(4, Number(data.cb), true);
  // 0x08: u32
  if (data?.dwMicroSecPerFrame !== undefined) view.setUint32(8, Number(data.dwMicroSecPerFrame), true);
  // 0x0c: u32
  if (data?.dwMaxBytesPerSec !== undefined) view.setUint32(12, Number(data.dwMaxBytesPerSec), true);
  // 0x10: u32
  if (data?.dwPaddingGranularity !== undefined) view.setUint32(16, Number(data.dwPaddingGranularity), true);
  // 0x14: u32
  if (data?.dwFlags !== undefined) view.setUint32(20, Number(data.dwFlags), true);
  // 0x18: u32
  if (data?.dwTotalFrames !== undefined) view.setUint32(24, Number(data.dwTotalFrames), true);
  // 0x1c: u32
  if (data?.dwInitialFrames !== undefined) view.setUint32(28, Number(data.dwInitialFrames), true);
  // 0x20: u32
  if (data?.dwStreams !== undefined) view.setUint32(32, Number(data.dwStreams), true);
  // 0x24: u32
  if (data?.dwSuggestedBufferSize !== undefined) view.setUint32(36, Number(data.dwSuggestedBufferSize), true);
  // 0x28: u32
  if (data?.dwWidth !== undefined) view.setUint32(40, Number(data.dwWidth), true);
  // 0x2c: u32
  if (data?.dwHeight !== undefined) view.setUint32(44, Number(data.dwHeight), true);
  // 0x30: pointer
  if (data?.dwReserved !== undefined) view.setBigUint64(48, data.dwReserved === null ? 0n : BigInt(util.toPointer(data.dwReserved)), true);
  return buf;
}

export class AVIMAINHEADERView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get fcc(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: u32
  get cb(): number {
    return this.view.getUint32(4, true);
  }

  // 0x08: u32
  get dwMicroSecPerFrame(): number {
    return this.view.getUint32(8, true);
  }

  // 0x0c: u32
  get dwMaxBytesPerSec(): number {
    return this.view.getUint32(12, true);
  }

  // 0x10: u32
  get dwPaddingGranularity(): number {
    return this.view.getUint32(16, true);
  }

  // 0x14: u32
  get dwFlags(): number {
    return this.view.getUint32(20, true);
  }

  // 0x18: u32
  get dwTotalFrames(): number {
    return this.view.getUint32(24, true);
  }

  // 0x1c: u32
  get dwInitialFrames(): number {
    return this.view.getUint32(28, true);
  }

  // 0x20: u32
  get dwStreams(): number {
    return this.view.getUint32(32, true);
  }

  // 0x24: u32
  get dwSuggestedBufferSize(): number {
    return this.view.getUint32(36, true);
  }

  // 0x28: u32
  get dwWidth(): number {
    return this.view.getUint32(40, true);
  }

  // 0x2c: u32
  get dwHeight(): number {
    return this.view.getUint32(44, true);
  }

  // 0x30: pointer
  get dwReserved(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(48, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: u32
  set fcc(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: u32
  set cb(value: number) {
    this.view.setUint32(4, value, true);
  }

  // 0x08: u32
  set dwMicroSecPerFrame(value: number) {
    this.view.setUint32(8, value, true);
  }

  // 0x0c: u32
  set dwMaxBytesPerSec(value: number) {
    this.view.setUint32(12, value, true);
  }

  // 0x10: u32
  set dwPaddingGranularity(value: number) {
    this.view.setUint32(16, value, true);
  }

  // 0x14: u32
  set dwFlags(value: number) {
    this.view.setUint32(20, value, true);
  }

  // 0x18: u32
  set dwTotalFrames(value: number) {
    this.view.setUint32(24, value, true);
  }

  // 0x1c: u32
  set dwInitialFrames(value: number) {
    this.view.setUint32(28, value, true);
  }

  // 0x20: u32
  set dwStreams(value: number) {
    this.view.setUint32(32, value, true);
  }

  // 0x24: u32
  set dwSuggestedBufferSize(value: number) {
    this.view.setUint32(36, value, true);
  }

  // 0x28: u32
  set dwWidth(value: number) {
    this.view.setUint32(40, value, true);
  }

  // 0x2c: u32
  set dwHeight(value: number) {
    this.view.setUint32(44, value, true);
  }

  // 0x30: pointer
  set dwReserved(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(48, BigInt(util.toPointer(value)), true);
  }
}

/**
 * Windows.Win32.Media.DirectShow.AVIEXTHEADER (size: 24)
 */
export interface AVIEXTHEADER {
  /** u32 */
  fcc: number;
  /** u32 */
  cb: number;
  /** u32 */
  dwGrandFrames: number;
  /** array */
  dwFuture: Deno.PointerValue | null;
}

export const sizeofAVIEXTHEADER = 24;

export function allocAVIEXTHEADER(data?: Partial<AVIEXTHEADER>): Uint8Array {
  const buf = new Uint8Array(sizeofAVIEXTHEADER);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.fcc !== undefined) view.setUint32(0, Number(data.fcc), true);
  // 0x04: u32
  if (data?.cb !== undefined) view.setUint32(4, Number(data.cb), true);
  // 0x08: u32
  if (data?.dwGrandFrames !== undefined) view.setUint32(8, Number(data.dwGrandFrames), true);
  // 0x0c: pad4
  // 0x10: pointer
  if (data?.dwFuture !== undefined) view.setBigUint64(16, data.dwFuture === null ? 0n : BigInt(util.toPointer(data.dwFuture)), true);
  return buf;
}

export class AVIEXTHEADERView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get fcc(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: u32
  get cb(): number {
    return this.view.getUint32(4, true);
  }

  // 0x08: u32
  get dwGrandFrames(): number {
    return this.view.getUint32(8, true);
  }

  // 0x0c: pad4

  // 0x10: pointer
  get dwFuture(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(16, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: u32
  set fcc(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: u32
  set cb(value: number) {
    this.view.setUint32(4, value, true);
  }

  // 0x08: u32
  set dwGrandFrames(value: number) {
    this.view.setUint32(8, value, true);
  }

  // 0x0c: pad4

  // 0x10: pointer
  set dwFuture(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(16, BigInt(util.toPointer(value)), true);
  }
}

/**
 * _rcFrame_e__Struct (size: 8)
 */
export interface _rcFrame_e__Struct {
  /** i16 */
  left: number;
  /** i16 */
  top: number;
  /** i16 */
  right: number;
  /** i16 */
  bottom: number;
}

export const sizeof_rcFrame_e__Struct = 8;

export function alloc_rcFrame_e__Struct(data?: Partial<_rcFrame_e__Struct>): Uint8Array {
  const buf = new Uint8Array(sizeof_rcFrame_e__Struct);
  const view = new DataView(buf.buffer);
  // 0x00: i16
  if (data?.left !== undefined) view.setInt16(0, Number(data.left), true);
  // 0x02: i16
  if (data?.top !== undefined) view.setInt16(2, Number(data.top), true);
  // 0x04: i16
  if (data?.right !== undefined) view.setInt16(4, Number(data.right), true);
  // 0x06: i16
  if (data?.bottom !== undefined) view.setInt16(6, Number(data.bottom), true);
  return buf;
}

export class _rcFrame_e__StructView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: i16
  get left(): number {
    return this.view.getInt16(0, true);
  }

  // 0x02: i16
  get top(): number {
    return this.view.getInt16(2, true);
  }

  // 0x04: i16
  get right(): number {
    return this.view.getInt16(4, true);
  }

  // 0x06: i16
  get bottom(): number {
    return this.view.getInt16(6, true);
  }

  // 0x00: i16
  set left(value: number) {
    this.view.setInt16(0, value, true);
  }

  // 0x02: i16
  set top(value: number) {
    this.view.setInt16(2, value, true);
  }

  // 0x04: i16
  set right(value: number) {
    this.view.setInt16(4, value, true);
  }

  // 0x06: i16
  set bottom(value: number) {
    this.view.setInt16(6, value, true);
  }
}

/**
 * Windows.Win32.Media.DirectShow.AVISTREAMHEADER (size: 64)
 */
export interface AVISTREAMHEADER {
  /** u32 */
  fcc: number;
  /** u32 */
  cb: number;
  /** u32 */
  fccType: number;
  /** u32 */
  fccHandler: number;
  /** u32 */
  dwFlags: number;
  /** u16 */
  wPriority: number;
  /** u16 */
  wLanguage: number;
  /** u32 */
  dwInitialFrames: number;
  /** u32 */
  dwScale: number;
  /** u32 */
  dwRate: number;
  /** u32 */
  dwStart: number;
  /** u32 */
  dwLength: number;
  /** u32 */
  dwSuggestedBufferSize: number;
  /** u32 */
  dwQuality: number;
  /** u32 */
  dwSampleSize: number;
  /** _rcFrame_e__Struct */
  rcFrame: Uint8Array | Deno.PointerValue | null;
}

export const sizeofAVISTREAMHEADER = 64;

export function allocAVISTREAMHEADER(data?: Partial<AVISTREAMHEADER>): Uint8Array {
  const buf = new Uint8Array(sizeofAVISTREAMHEADER);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.fcc !== undefined) view.setUint32(0, Number(data.fcc), true);
  // 0x04: u32
  if (data?.cb !== undefined) view.setUint32(4, Number(data.cb), true);
  // 0x08: u32
  if (data?.fccType !== undefined) view.setUint32(8, Number(data.fccType), true);
  // 0x0c: u32
  if (data?.fccHandler !== undefined) view.setUint32(12, Number(data.fccHandler), true);
  // 0x10: u32
  if (data?.dwFlags !== undefined) view.setUint32(16, Number(data.dwFlags), true);
  // 0x14: u16
  if (data?.wPriority !== undefined) view.setUint16(20, Number(data.wPriority), true);
  // 0x16: u16
  if (data?.wLanguage !== undefined) view.setUint16(22, Number(data.wLanguage), true);
  // 0x18: u32
  if (data?.dwInitialFrames !== undefined) view.setUint32(24, Number(data.dwInitialFrames), true);
  // 0x1c: u32
  if (data?.dwScale !== undefined) view.setUint32(28, Number(data.dwScale), true);
  // 0x20: u32
  if (data?.dwRate !== undefined) view.setUint32(32, Number(data.dwRate), true);
  // 0x24: u32
  if (data?.dwStart !== undefined) view.setUint32(36, Number(data.dwStart), true);
  // 0x28: u32
  if (data?.dwLength !== undefined) view.setUint32(40, Number(data.dwLength), true);
  // 0x2c: u32
  if (data?.dwSuggestedBufferSize !== undefined) view.setUint32(44, Number(data.dwSuggestedBufferSize), true);
  // 0x30: u32
  if (data?.dwQuality !== undefined) view.setUint32(48, Number(data.dwQuality), true);
  // 0x34: u32
  if (data?.dwSampleSize !== undefined) view.setUint32(52, Number(data.dwSampleSize), true);
  // 0x38: pointer
  if (data?.rcFrame !== undefined) view.setBigUint64(56, data.rcFrame === null ? 0n : BigInt(util.toPointer(data.rcFrame)), true);
  return buf;
}

export class AVISTREAMHEADERView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get fcc(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: u32
  get cb(): number {
    return this.view.getUint32(4, true);
  }

  // 0x08: u32
  get fccType(): number {
    return this.view.getUint32(8, true);
  }

  // 0x0c: u32
  get fccHandler(): number {
    return this.view.getUint32(12, true);
  }

  // 0x10: u32
  get dwFlags(): number {
    return this.view.getUint32(16, true);
  }

  // 0x14: u16
  get wPriority(): number {
    return this.view.getUint16(20, true);
  }

  // 0x16: u16
  get wLanguage(): number {
    return this.view.getUint16(22, true);
  }

  // 0x18: u32
  get dwInitialFrames(): number {
    return this.view.getUint32(24, true);
  }

  // 0x1c: u32
  get dwScale(): number {
    return this.view.getUint32(28, true);
  }

  // 0x20: u32
  get dwRate(): number {
    return this.view.getUint32(32, true);
  }

  // 0x24: u32
  get dwStart(): number {
    return this.view.getUint32(36, true);
  }

  // 0x28: u32
  get dwLength(): number {
    return this.view.getUint32(40, true);
  }

  // 0x2c: u32
  get dwSuggestedBufferSize(): number {
    return this.view.getUint32(44, true);
  }

  // 0x30: u32
  get dwQuality(): number {
    return this.view.getUint32(48, true);
  }

  // 0x34: u32
  get dwSampleSize(): number {
    return this.view.getUint32(52, true);
  }

  // 0x38: pointer
  get rcFrame(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(56, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: u32
  set fcc(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: u32
  set cb(value: number) {
    this.view.setUint32(4, value, true);
  }

  // 0x08: u32
  set fccType(value: number) {
    this.view.setUint32(8, value, true);
  }

  // 0x0c: u32
  set fccHandler(value: number) {
    this.view.setUint32(12, value, true);
  }

  // 0x10: u32
  set dwFlags(value: number) {
    this.view.setUint32(16, value, true);
  }

  // 0x14: u16
  set wPriority(value: number) {
    this.view.setUint16(20, value, true);
  }

  // 0x16: u16
  set wLanguage(value: number) {
    this.view.setUint16(22, value, true);
  }

  // 0x18: u32
  set dwInitialFrames(value: number) {
    this.view.setUint32(24, value, true);
  }

  // 0x1c: u32
  set dwScale(value: number) {
    this.view.setUint32(28, value, true);
  }

  // 0x20: u32
  set dwRate(value: number) {
    this.view.setUint32(32, value, true);
  }

  // 0x24: u32
  set dwStart(value: number) {
    this.view.setUint32(36, value, true);
  }

  // 0x28: u32
  set dwLength(value: number) {
    this.view.setUint32(40, value, true);
  }

  // 0x2c: u32
  set dwSuggestedBufferSize(value: number) {
    this.view.setUint32(44, value, true);
  }

  // 0x30: u32
  set dwQuality(value: number) {
    this.view.setUint32(48, value, true);
  }

  // 0x34: u32
  set dwSampleSize(value: number) {
    this.view.setUint32(52, value, true);
  }

  // 0x38: pointer
  set rcFrame(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(56, BigInt(util.toPointer(value)), true);
  }
}

/**
 * Windows.Win32.Media.DirectShow.AVIOLDINDEX (size: 16)
 */
export interface AVIOLDINDEX {
  /** u32 */
  fcc: number;
  /** u32 */
  cb: number;
  /** array */
  aIndex: Deno.PointerValue | null;
}

export const sizeofAVIOLDINDEX = 16;

export function allocAVIOLDINDEX(data?: Partial<AVIOLDINDEX>): Uint8Array {
  const buf = new Uint8Array(sizeofAVIOLDINDEX);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.fcc !== undefined) view.setUint32(0, Number(data.fcc), true);
  // 0x04: u32
  if (data?.cb !== undefined) view.setUint32(4, Number(data.cb), true);
  // 0x08: pointer
  if (data?.aIndex !== undefined) view.setBigUint64(8, data.aIndex === null ? 0n : BigInt(util.toPointer(data.aIndex)), true);
  return buf;
}

export class AVIOLDINDEXView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get fcc(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: u32
  get cb(): number {
    return this.view.getUint32(4, true);
  }

  // 0x08: pointer
  get aIndex(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(8, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: u32
  set fcc(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: u32
  set cb(value: number) {
    this.view.setUint32(4, value, true);
  }

  // 0x08: pointer
  set aIndex(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(8, BigInt(util.toPointer(value)), true);
  }
}

/**
 * Windows.Win32.Media.TIMECODE (size: 16)
 */
export interface TIMECODE {
  /** _Anonymous_e__Struct */
  Anonymous: Uint8Array | Deno.PointerValue | null;
  /** u64 */
  qw: Deno.PointerValue;
}

export const sizeofTIMECODE = 16;

export function allocTIMECODE(data?: Partial<TIMECODE>): Uint8Array {
  const buf = new Uint8Array(sizeofTIMECODE);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.Anonymous !== undefined) view.setBigUint64(0, data.Anonymous === null ? 0n : BigInt(util.toPointer(data.Anonymous)), true);
  // 0x08: u64
  if (data?.qw !== undefined) view.setBigUint64(8, BigInt(data.qw), true);
  return buf;
}

export class TIMECODEView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get Anonymous(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(0, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x08: u64
  get qw(): Deno.PointerValue {
    return Number(this.view.getBigUint64(8, true));
  }

  // 0x00: pointer
  set Anonymous(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(0, BigInt(util.toPointer(value)), true);
  }

  // 0x08: u64
  set qw(value: Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(value), true);
  }
}

/**
 * Windows.Win32.Media.DirectShow.TIMECODEDATA (size: 16)
 */
export interface TIMECODEDATA {
  /** Windows.Win32.Media.TIMECODE */
  time: Uint8Array | Deno.PointerValue | null;
  /** u32 */
  dwSMPTEflags: number;
  /** u32 */
  dwUser: number;
}

export const sizeofTIMECODEDATA = 16;

export function allocTIMECODEDATA(data?: Partial<TIMECODEDATA>): Uint8Array {
  const buf = new Uint8Array(sizeofTIMECODEDATA);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.time !== undefined) view.setBigUint64(0, data.time === null ? 0n : BigInt(util.toPointer(data.time)), true);
  // 0x08: u32
  if (data?.dwSMPTEflags !== undefined) view.setUint32(8, Number(data.dwSMPTEflags), true);
  // 0x0c: u32
  if (data?.dwUser !== undefined) view.setUint32(12, Number(data.dwUser), true);
  return buf;
}

export class TIMECODEDATAView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get time(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(0, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x08: u32
  get dwSMPTEflags(): number {
    return this.view.getUint32(8, true);
  }

  // 0x0c: u32
  get dwUser(): number {
    return this.view.getUint32(12, true);
  }

  // 0x00: pointer
  set time(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(0, BigInt(util.toPointer(value)), true);
  }

  // 0x08: u32
  set dwSMPTEflags(value: number) {
    this.view.setUint32(8, value, true);
  }

  // 0x0c: u32
  set dwUser(value: number) {
    this.view.setUint32(12, value, true);
  }
}

/**
 * Windows.Win32.Media.DirectShow.AVIMETAINDEX (size: 40)
 */
export interface AVIMETAINDEX {
  /** u32 */
  fcc: number;
  /** u32 */
  cb: number;
  /** u16 */
  wLongsPerEntry: number;
  /** u8 */
  bIndexSubType: number;
  /** u8 */
  bIndexType: number;
  /** u32 */
  nEntriesInUse: number;
  /** u32 */
  dwChunkId: number;
  /** array */
  dwReserved: Deno.PointerValue | null;
  /** array */
  adwIndex: Deno.PointerValue | null;
}

export const sizeofAVIMETAINDEX = 40;

export function allocAVIMETAINDEX(data?: Partial<AVIMETAINDEX>): Uint8Array {
  const buf = new Uint8Array(sizeofAVIMETAINDEX);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.fcc !== undefined) view.setUint32(0, Number(data.fcc), true);
  // 0x04: u32
  if (data?.cb !== undefined) view.setUint32(4, Number(data.cb), true);
  // 0x08: u16
  if (data?.wLongsPerEntry !== undefined) view.setUint16(8, Number(data.wLongsPerEntry), true);
  // 0x0a: u8
  if (data?.bIndexSubType !== undefined) view.setUint8(10, Number(data.bIndexSubType));
  // 0x0b: u8
  if (data?.bIndexType !== undefined) view.setUint8(11, Number(data.bIndexType));
  // 0x0c: u32
  if (data?.nEntriesInUse !== undefined) view.setUint32(12, Number(data.nEntriesInUse), true);
  // 0x10: u32
  if (data?.dwChunkId !== undefined) view.setUint32(16, Number(data.dwChunkId), true);
  // 0x14: pad4
  // 0x18: pointer
  if (data?.dwReserved !== undefined) view.setBigUint64(24, data.dwReserved === null ? 0n : BigInt(util.toPointer(data.dwReserved)), true);
  // 0x20: pointer
  if (data?.adwIndex !== undefined) view.setBigUint64(32, data.adwIndex === null ? 0n : BigInt(util.toPointer(data.adwIndex)), true);
  return buf;
}

export class AVIMETAINDEXView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get fcc(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: u32
  get cb(): number {
    return this.view.getUint32(4, true);
  }

  // 0x08: u16
  get wLongsPerEntry(): number {
    return this.view.getUint16(8, true);
  }

  // 0x0a: u8
  get bIndexSubType(): number {
    return this.view.getUint8(10);
  }

  // 0x0b: u8
  get bIndexType(): number {
    return this.view.getUint8(11);
  }

  // 0x0c: u32
  get nEntriesInUse(): number {
    return this.view.getUint32(12, true);
  }

  // 0x10: u32
  get dwChunkId(): number {
    return this.view.getUint32(16, true);
  }

  // 0x14: pad4

  // 0x18: pointer
  get dwReserved(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(24, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x20: pointer
  get adwIndex(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(32, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: u32
  set fcc(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: u32
  set cb(value: number) {
    this.view.setUint32(4, value, true);
  }

  // 0x08: u16
  set wLongsPerEntry(value: number) {
    this.view.setUint16(8, value, true);
  }

  // 0x0a: u8
  set bIndexSubType(value: number) {
    this.view.setUint8(10, value);
  }

  // 0x0b: u8
  set bIndexType(value: number) {
    this.view.setUint8(11, value);
  }

  // 0x0c: u32
  set nEntriesInUse(value: number) {
    this.view.setUint32(12, value, true);
  }

  // 0x10: u32
  set dwChunkId(value: number) {
    this.view.setUint32(16, value, true);
  }

  // 0x14: pad4

  // 0x18: pointer
  set dwReserved(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(24, BigInt(util.toPointer(value)), true);
  }

  // 0x20: pointer
  set adwIndex(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(32, BigInt(util.toPointer(value)), true);
  }
}

/**
 * Windows.Win32.Media.DirectShow.AVISUPERINDEX (size: 40)
 */
export interface AVISUPERINDEX {
  /** u32 */
  fcc: number;
  /** u32 */
  cb: number;
  /** u16 */
  wLongsPerEntry: number;
  /** u8 */
  bIndexSubType: number;
  /** u8 */
  bIndexType: number;
  /** u32 */
  nEntriesInUse: number;
  /** u32 */
  dwChunkId: number;
  /** array */
  dwReserved: Deno.PointerValue | null;
  /** array */
  aIndex: Deno.PointerValue | null;
}

export const sizeofAVISUPERINDEX = 40;

export function allocAVISUPERINDEX(data?: Partial<AVISUPERINDEX>): Uint8Array {
  const buf = new Uint8Array(sizeofAVISUPERINDEX);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.fcc !== undefined) view.setUint32(0, Number(data.fcc), true);
  // 0x04: u32
  if (data?.cb !== undefined) view.setUint32(4, Number(data.cb), true);
  // 0x08: u16
  if (data?.wLongsPerEntry !== undefined) view.setUint16(8, Number(data.wLongsPerEntry), true);
  // 0x0a: u8
  if (data?.bIndexSubType !== undefined) view.setUint8(10, Number(data.bIndexSubType));
  // 0x0b: u8
  if (data?.bIndexType !== undefined) view.setUint8(11, Number(data.bIndexType));
  // 0x0c: u32
  if (data?.nEntriesInUse !== undefined) view.setUint32(12, Number(data.nEntriesInUse), true);
  // 0x10: u32
  if (data?.dwChunkId !== undefined) view.setUint32(16, Number(data.dwChunkId), true);
  // 0x14: pad4
  // 0x18: pointer
  if (data?.dwReserved !== undefined) view.setBigUint64(24, data.dwReserved === null ? 0n : BigInt(util.toPointer(data.dwReserved)), true);
  // 0x20: pointer
  if (data?.aIndex !== undefined) view.setBigUint64(32, data.aIndex === null ? 0n : BigInt(util.toPointer(data.aIndex)), true);
  return buf;
}

export class AVISUPERINDEXView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get fcc(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: u32
  get cb(): number {
    return this.view.getUint32(4, true);
  }

  // 0x08: u16
  get wLongsPerEntry(): number {
    return this.view.getUint16(8, true);
  }

  // 0x0a: u8
  get bIndexSubType(): number {
    return this.view.getUint8(10);
  }

  // 0x0b: u8
  get bIndexType(): number {
    return this.view.getUint8(11);
  }

  // 0x0c: u32
  get nEntriesInUse(): number {
    return this.view.getUint32(12, true);
  }

  // 0x10: u32
  get dwChunkId(): number {
    return this.view.getUint32(16, true);
  }

  // 0x14: pad4

  // 0x18: pointer
  get dwReserved(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(24, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x20: pointer
  get aIndex(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(32, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: u32
  set fcc(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: u32
  set cb(value: number) {
    this.view.setUint32(4, value, true);
  }

  // 0x08: u16
  set wLongsPerEntry(value: number) {
    this.view.setUint16(8, value, true);
  }

  // 0x0a: u8
  set bIndexSubType(value: number) {
    this.view.setUint8(10, value);
  }

  // 0x0b: u8
  set bIndexType(value: number) {
    this.view.setUint8(11, value);
  }

  // 0x0c: u32
  set nEntriesInUse(value: number) {
    this.view.setUint32(12, value, true);
  }

  // 0x10: u32
  set dwChunkId(value: number) {
    this.view.setUint32(16, value, true);
  }

  // 0x14: pad4

  // 0x18: pointer
  set dwReserved(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(24, BigInt(util.toPointer(value)), true);
  }

  // 0x20: pointer
  set aIndex(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(32, BigInt(util.toPointer(value)), true);
  }
}

/**
 * Windows.Win32.Media.DirectShow.AVISTDINDEX_ENTRY (size: 8)
 */
export interface AVISTDINDEX_ENTRY {
  /** u32 */
  dwOffset: number;
  /** u32 */
  dwSize: number;
}

export const sizeofAVISTDINDEX_ENTRY = 8;

export function allocAVISTDINDEX_ENTRY(data?: Partial<AVISTDINDEX_ENTRY>): Uint8Array {
  const buf = new Uint8Array(sizeofAVISTDINDEX_ENTRY);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.dwOffset !== undefined) view.setUint32(0, Number(data.dwOffset), true);
  // 0x04: u32
  if (data?.dwSize !== undefined) view.setUint32(4, Number(data.dwSize), true);
  return buf;
}

export class AVISTDINDEX_ENTRYView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get dwOffset(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: u32
  get dwSize(): number {
    return this.view.getUint32(4, true);
  }

  // 0x00: u32
  set dwOffset(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: u32
  set dwSize(value: number) {
    this.view.setUint32(4, value, true);
  }
}

/**
 * Windows.Win32.Media.DirectShow.AVISTDINDEX (size: 48)
 */
export interface AVISTDINDEX {
  /** u32 */
  fcc: number;
  /** u32 */
  cb: number;
  /** u16 */
  wLongsPerEntry: number;
  /** u8 */
  bIndexSubType: number;
  /** u8 */
  bIndexType: number;
  /** u32 */
  nEntriesInUse: number;
  /** u32 */
  dwChunkId: number;
  /** u64 */
  qwBaseOffset: Deno.PointerValue;
  /** u32 */
  dwReserved_3: number;
  /** array */
  aIndex: Deno.PointerValue | null;
}

export const sizeofAVISTDINDEX = 48;

export function allocAVISTDINDEX(data?: Partial<AVISTDINDEX>): Uint8Array {
  const buf = new Uint8Array(sizeofAVISTDINDEX);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.fcc !== undefined) view.setUint32(0, Number(data.fcc), true);
  // 0x04: u32
  if (data?.cb !== undefined) view.setUint32(4, Number(data.cb), true);
  // 0x08: u16
  if (data?.wLongsPerEntry !== undefined) view.setUint16(8, Number(data.wLongsPerEntry), true);
  // 0x0a: u8
  if (data?.bIndexSubType !== undefined) view.setUint8(10, Number(data.bIndexSubType));
  // 0x0b: u8
  if (data?.bIndexType !== undefined) view.setUint8(11, Number(data.bIndexType));
  // 0x0c: u32
  if (data?.nEntriesInUse !== undefined) view.setUint32(12, Number(data.nEntriesInUse), true);
  // 0x10: u32
  if (data?.dwChunkId !== undefined) view.setUint32(16, Number(data.dwChunkId), true);
  // 0x14: pad4
  // 0x18: u64
  if (data?.qwBaseOffset !== undefined) view.setBigUint64(24, BigInt(data.qwBaseOffset), true);
  // 0x20: u32
  if (data?.dwReserved_3 !== undefined) view.setUint32(32, Number(data.dwReserved_3), true);
  // 0x24: pad4
  // 0x28: pointer
  if (data?.aIndex !== undefined) view.setBigUint64(40, data.aIndex === null ? 0n : BigInt(util.toPointer(data.aIndex)), true);
  return buf;
}

export class AVISTDINDEXView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get fcc(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: u32
  get cb(): number {
    return this.view.getUint32(4, true);
  }

  // 0x08: u16
  get wLongsPerEntry(): number {
    return this.view.getUint16(8, true);
  }

  // 0x0a: u8
  get bIndexSubType(): number {
    return this.view.getUint8(10);
  }

  // 0x0b: u8
  get bIndexType(): number {
    return this.view.getUint8(11);
  }

  // 0x0c: u32
  get nEntriesInUse(): number {
    return this.view.getUint32(12, true);
  }

  // 0x10: u32
  get dwChunkId(): number {
    return this.view.getUint32(16, true);
  }

  // 0x14: pad4

  // 0x18: u64
  get qwBaseOffset(): Deno.PointerValue {
    return Number(this.view.getBigUint64(24, true));
  }

  // 0x20: u32
  get dwReserved_3(): number {
    return this.view.getUint32(32, true);
  }

  // 0x24: pad4

  // 0x28: pointer
  get aIndex(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(40, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: u32
  set fcc(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: u32
  set cb(value: number) {
    this.view.setUint32(4, value, true);
  }

  // 0x08: u16
  set wLongsPerEntry(value: number) {
    this.view.setUint16(8, value, true);
  }

  // 0x0a: u8
  set bIndexSubType(value: number) {
    this.view.setUint8(10, value);
  }

  // 0x0b: u8
  set bIndexType(value: number) {
    this.view.setUint8(11, value);
  }

  // 0x0c: u32
  set nEntriesInUse(value: number) {
    this.view.setUint32(12, value, true);
  }

  // 0x10: u32
  set dwChunkId(value: number) {
    this.view.setUint32(16, value, true);
  }

  // 0x14: pad4

  // 0x18: u64
  set qwBaseOffset(value: Deno.PointerValue) {
    this.view.setBigUint64(24, BigInt(value), true);
  }

  // 0x20: u32
  set dwReserved_3(value: number) {
    this.view.setUint32(32, value, true);
  }

  // 0x24: pad4

  // 0x28: pointer
  set aIndex(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(40, BigInt(util.toPointer(value)), true);
  }
}

/**
 * Windows.Win32.Media.DirectShow.AVITIMEDINDEX_ENTRY (size: 16)
 */
export interface AVITIMEDINDEX_ENTRY {
  /** u32 */
  dwOffset: number;
  /** u32 */
  dwSize: number;
  /** u32 */
  dwDuration: number;
}

export const sizeofAVITIMEDINDEX_ENTRY = 16;

export function allocAVITIMEDINDEX_ENTRY(data?: Partial<AVITIMEDINDEX_ENTRY>): Uint8Array {
  const buf = new Uint8Array(sizeofAVITIMEDINDEX_ENTRY);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.dwOffset !== undefined) view.setUint32(0, Number(data.dwOffset), true);
  // 0x04: u32
  if (data?.dwSize !== undefined) view.setUint32(4, Number(data.dwSize), true);
  // 0x08: u32
  if (data?.dwDuration !== undefined) view.setUint32(8, Number(data.dwDuration), true);
  // 0x0c: pad4
  return buf;
}

export class AVITIMEDINDEX_ENTRYView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get dwOffset(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: u32
  get dwSize(): number {
    return this.view.getUint32(4, true);
  }

  // 0x08: u32
  get dwDuration(): number {
    return this.view.getUint32(8, true);
  }

  // 0x0c: pad4

  // 0x00: u32
  set dwOffset(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: u32
  set dwSize(value: number) {
    this.view.setUint32(4, value, true);
  }

  // 0x08: u32
  set dwDuration(value: number) {
    this.view.setUint32(8, value, true);
  }

  // 0x0c: pad4
}

/**
 * Windows.Win32.Media.DirectShow.AVITIMEDINDEX (size: 56)
 */
export interface AVITIMEDINDEX {
  /** u32 */
  fcc: number;
  /** u32 */
  cb: number;
  /** u16 */
  wLongsPerEntry: number;
  /** u8 */
  bIndexSubType: number;
  /** u8 */
  bIndexType: number;
  /** u32 */
  nEntriesInUse: number;
  /** u32 */
  dwChunkId: number;
  /** u64 */
  qwBaseOffset: Deno.PointerValue;
  /** u32 */
  dwReserved_3: number;
  /** array */
  aIndex: Deno.PointerValue | null;
  /** array */
  adwTrailingFill: Deno.PointerValue | null;
}

export const sizeofAVITIMEDINDEX = 56;

export function allocAVITIMEDINDEX(data?: Partial<AVITIMEDINDEX>): Uint8Array {
  const buf = new Uint8Array(sizeofAVITIMEDINDEX);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.fcc !== undefined) view.setUint32(0, Number(data.fcc), true);
  // 0x04: u32
  if (data?.cb !== undefined) view.setUint32(4, Number(data.cb), true);
  // 0x08: u16
  if (data?.wLongsPerEntry !== undefined) view.setUint16(8, Number(data.wLongsPerEntry), true);
  // 0x0a: u8
  if (data?.bIndexSubType !== undefined) view.setUint8(10, Number(data.bIndexSubType));
  // 0x0b: u8
  if (data?.bIndexType !== undefined) view.setUint8(11, Number(data.bIndexType));
  // 0x0c: u32
  if (data?.nEntriesInUse !== undefined) view.setUint32(12, Number(data.nEntriesInUse), true);
  // 0x10: u32
  if (data?.dwChunkId !== undefined) view.setUint32(16, Number(data.dwChunkId), true);
  // 0x14: pad4
  // 0x18: u64
  if (data?.qwBaseOffset !== undefined) view.setBigUint64(24, BigInt(data.qwBaseOffset), true);
  // 0x20: u32
  if (data?.dwReserved_3 !== undefined) view.setUint32(32, Number(data.dwReserved_3), true);
  // 0x24: pad4
  // 0x28: pointer
  if (data?.aIndex !== undefined) view.setBigUint64(40, data.aIndex === null ? 0n : BigInt(util.toPointer(data.aIndex)), true);
  // 0x30: pointer
  if (data?.adwTrailingFill !== undefined) view.setBigUint64(48, data.adwTrailingFill === null ? 0n : BigInt(util.toPointer(data.adwTrailingFill)), true);
  return buf;
}

export class AVITIMEDINDEXView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get fcc(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: u32
  get cb(): number {
    return this.view.getUint32(4, true);
  }

  // 0x08: u16
  get wLongsPerEntry(): number {
    return this.view.getUint16(8, true);
  }

  // 0x0a: u8
  get bIndexSubType(): number {
    return this.view.getUint8(10);
  }

  // 0x0b: u8
  get bIndexType(): number {
    return this.view.getUint8(11);
  }

  // 0x0c: u32
  get nEntriesInUse(): number {
    return this.view.getUint32(12, true);
  }

  // 0x10: u32
  get dwChunkId(): number {
    return this.view.getUint32(16, true);
  }

  // 0x14: pad4

  // 0x18: u64
  get qwBaseOffset(): Deno.PointerValue {
    return Number(this.view.getBigUint64(24, true));
  }

  // 0x20: u32
  get dwReserved_3(): number {
    return this.view.getUint32(32, true);
  }

  // 0x24: pad4

  // 0x28: pointer
  get aIndex(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(40, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x30: pointer
  get adwTrailingFill(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(48, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: u32
  set fcc(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: u32
  set cb(value: number) {
    this.view.setUint32(4, value, true);
  }

  // 0x08: u16
  set wLongsPerEntry(value: number) {
    this.view.setUint16(8, value, true);
  }

  // 0x0a: u8
  set bIndexSubType(value: number) {
    this.view.setUint8(10, value);
  }

  // 0x0b: u8
  set bIndexType(value: number) {
    this.view.setUint8(11, value);
  }

  // 0x0c: u32
  set nEntriesInUse(value: number) {
    this.view.setUint32(12, value, true);
  }

  // 0x10: u32
  set dwChunkId(value: number) {
    this.view.setUint32(16, value, true);
  }

  // 0x14: pad4

  // 0x18: u64
  set qwBaseOffset(value: Deno.PointerValue) {
    this.view.setBigUint64(24, BigInt(value), true);
  }

  // 0x20: u32
  set dwReserved_3(value: number) {
    this.view.setUint32(32, value, true);
  }

  // 0x24: pad4

  // 0x28: pointer
  set aIndex(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(40, BigInt(util.toPointer(value)), true);
  }

  // 0x30: pointer
  set adwTrailingFill(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(48, BigInt(util.toPointer(value)), true);
  }
}

/**
 * Windows.Win32.Media.DirectShow.AVITIMECODEINDEX (size: 40)
 */
export interface AVITIMECODEINDEX {
  /** u32 */
  fcc: number;
  /** u32 */
  cb: number;
  /** u16 */
  wLongsPerEntry: number;
  /** u8 */
  bIndexSubType: number;
  /** u8 */
  bIndexType: number;
  /** u32 */
  nEntriesInUse: number;
  /** u32 */
  dwChunkId: number;
  /** array */
  dwReserved: Deno.PointerValue | null;
  /** array */
  aIndex: Deno.PointerValue | null;
}

export const sizeofAVITIMECODEINDEX = 40;

export function allocAVITIMECODEINDEX(data?: Partial<AVITIMECODEINDEX>): Uint8Array {
  const buf = new Uint8Array(sizeofAVITIMECODEINDEX);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.fcc !== undefined) view.setUint32(0, Number(data.fcc), true);
  // 0x04: u32
  if (data?.cb !== undefined) view.setUint32(4, Number(data.cb), true);
  // 0x08: u16
  if (data?.wLongsPerEntry !== undefined) view.setUint16(8, Number(data.wLongsPerEntry), true);
  // 0x0a: u8
  if (data?.bIndexSubType !== undefined) view.setUint8(10, Number(data.bIndexSubType));
  // 0x0b: u8
  if (data?.bIndexType !== undefined) view.setUint8(11, Number(data.bIndexType));
  // 0x0c: u32
  if (data?.nEntriesInUse !== undefined) view.setUint32(12, Number(data.nEntriesInUse), true);
  // 0x10: u32
  if (data?.dwChunkId !== undefined) view.setUint32(16, Number(data.dwChunkId), true);
  // 0x14: pad4
  // 0x18: pointer
  if (data?.dwReserved !== undefined) view.setBigUint64(24, data.dwReserved === null ? 0n : BigInt(util.toPointer(data.dwReserved)), true);
  // 0x20: pointer
  if (data?.aIndex !== undefined) view.setBigUint64(32, data.aIndex === null ? 0n : BigInt(util.toPointer(data.aIndex)), true);
  return buf;
}

export class AVITIMECODEINDEXView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get fcc(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: u32
  get cb(): number {
    return this.view.getUint32(4, true);
  }

  // 0x08: u16
  get wLongsPerEntry(): number {
    return this.view.getUint16(8, true);
  }

  // 0x0a: u8
  get bIndexSubType(): number {
    return this.view.getUint8(10);
  }

  // 0x0b: u8
  get bIndexType(): number {
    return this.view.getUint8(11);
  }

  // 0x0c: u32
  get nEntriesInUse(): number {
    return this.view.getUint32(12, true);
  }

  // 0x10: u32
  get dwChunkId(): number {
    return this.view.getUint32(16, true);
  }

  // 0x14: pad4

  // 0x18: pointer
  get dwReserved(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(24, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x20: pointer
  get aIndex(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(32, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: u32
  set fcc(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: u32
  set cb(value: number) {
    this.view.setUint32(4, value, true);
  }

  // 0x08: u16
  set wLongsPerEntry(value: number) {
    this.view.setUint16(8, value, true);
  }

  // 0x0a: u8
  set bIndexSubType(value: number) {
    this.view.setUint8(10, value);
  }

  // 0x0b: u8
  set bIndexType(value: number) {
    this.view.setUint8(11, value);
  }

  // 0x0c: u32
  set nEntriesInUse(value: number) {
    this.view.setUint32(12, value, true);
  }

  // 0x10: u32
  set dwChunkId(value: number) {
    this.view.setUint32(16, value, true);
  }

  // 0x14: pad4

  // 0x18: pointer
  set dwReserved(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(24, BigInt(util.toPointer(value)), true);
  }

  // 0x20: pointer
  set aIndex(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(32, BigInt(util.toPointer(value)), true);
  }
}

/**
 * Windows.Win32.Media.DirectShow.AVITCDLINDEX_ENTRY (size: 32)
 */
export interface AVITCDLINDEX_ENTRY {
  /** u32 */
  dwTick: number;
  /** Windows.Win32.Media.TIMECODE */
  time: Uint8Array | Deno.PointerValue | null;
  /** u32 */
  dwSMPTEflags: number;
  /** u32 */
  dwUser: number;
  /** array */
  szReelId: Deno.PointerValue | null;
}

export const sizeofAVITCDLINDEX_ENTRY = 32;

export function allocAVITCDLINDEX_ENTRY(data?: Partial<AVITCDLINDEX_ENTRY>): Uint8Array {
  const buf = new Uint8Array(sizeofAVITCDLINDEX_ENTRY);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.dwTick !== undefined) view.setUint32(0, Number(data.dwTick), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.time !== undefined) view.setBigUint64(8, data.time === null ? 0n : BigInt(util.toPointer(data.time)), true);
  // 0x10: u32
  if (data?.dwSMPTEflags !== undefined) view.setUint32(16, Number(data.dwSMPTEflags), true);
  // 0x14: u32
  if (data?.dwUser !== undefined) view.setUint32(20, Number(data.dwUser), true);
  // 0x18: pointer
  if (data?.szReelId !== undefined) view.setBigUint64(24, data.szReelId === null ? 0n : BigInt(util.toPointer(data.szReelId)), true);
  return buf;
}

export class AVITCDLINDEX_ENTRYView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get dwTick(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  get time(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(8, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x10: u32
  get dwSMPTEflags(): number {
    return this.view.getUint32(16, true);
  }

  // 0x14: u32
  get dwUser(): number {
    return this.view.getUint32(20, true);
  }

  // 0x18: pointer
  get szReelId(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(24, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: u32
  set dwTick(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  set time(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(8, BigInt(util.toPointer(value)), true);
  }

  // 0x10: u32
  set dwSMPTEflags(value: number) {
    this.view.setUint32(16, value, true);
  }

  // 0x14: u32
  set dwUser(value: number) {
    this.view.setUint32(20, value, true);
  }

  // 0x18: pointer
  set szReelId(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(24, BigInt(util.toPointer(value)), true);
  }
}

/**
 * Windows.Win32.Media.DirectShow.AVITCDLINDEX (size: 48)
 */
export interface AVITCDLINDEX {
  /** u32 */
  fcc: number;
  /** u32 */
  cb: number;
  /** u16 */
  wLongsPerEntry: number;
  /** u8 */
  bIndexSubType: number;
  /** u8 */
  bIndexType: number;
  /** u32 */
  nEntriesInUse: number;
  /** u32 */
  dwChunkId: number;
  /** array */
  dwReserved: Deno.PointerValue | null;
  /** array */
  aIndex: Deno.PointerValue | null;
  /** array */
  adwTrailingFill: Deno.PointerValue | null;
}

export const sizeofAVITCDLINDEX = 48;

export function allocAVITCDLINDEX(data?: Partial<AVITCDLINDEX>): Uint8Array {
  const buf = new Uint8Array(sizeofAVITCDLINDEX);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.fcc !== undefined) view.setUint32(0, Number(data.fcc), true);
  // 0x04: u32
  if (data?.cb !== undefined) view.setUint32(4, Number(data.cb), true);
  // 0x08: u16
  if (data?.wLongsPerEntry !== undefined) view.setUint16(8, Number(data.wLongsPerEntry), true);
  // 0x0a: u8
  if (data?.bIndexSubType !== undefined) view.setUint8(10, Number(data.bIndexSubType));
  // 0x0b: u8
  if (data?.bIndexType !== undefined) view.setUint8(11, Number(data.bIndexType));
  // 0x0c: u32
  if (data?.nEntriesInUse !== undefined) view.setUint32(12, Number(data.nEntriesInUse), true);
  // 0x10: u32
  if (data?.dwChunkId !== undefined) view.setUint32(16, Number(data.dwChunkId), true);
  // 0x14: pad4
  // 0x18: pointer
  if (data?.dwReserved !== undefined) view.setBigUint64(24, data.dwReserved === null ? 0n : BigInt(util.toPointer(data.dwReserved)), true);
  // 0x20: pointer
  if (data?.aIndex !== undefined) view.setBigUint64(32, data.aIndex === null ? 0n : BigInt(util.toPointer(data.aIndex)), true);
  // 0x28: pointer
  if (data?.adwTrailingFill !== undefined) view.setBigUint64(40, data.adwTrailingFill === null ? 0n : BigInt(util.toPointer(data.adwTrailingFill)), true);
  return buf;
}

export class AVITCDLINDEXView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get fcc(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: u32
  get cb(): number {
    return this.view.getUint32(4, true);
  }

  // 0x08: u16
  get wLongsPerEntry(): number {
    return this.view.getUint16(8, true);
  }

  // 0x0a: u8
  get bIndexSubType(): number {
    return this.view.getUint8(10);
  }

  // 0x0b: u8
  get bIndexType(): number {
    return this.view.getUint8(11);
  }

  // 0x0c: u32
  get nEntriesInUse(): number {
    return this.view.getUint32(12, true);
  }

  // 0x10: u32
  get dwChunkId(): number {
    return this.view.getUint32(16, true);
  }

  // 0x14: pad4

  // 0x18: pointer
  get dwReserved(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(24, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x20: pointer
  get aIndex(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(32, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x28: pointer
  get adwTrailingFill(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(40, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: u32
  set fcc(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: u32
  set cb(value: number) {
    this.view.setUint32(4, value, true);
  }

  // 0x08: u16
  set wLongsPerEntry(value: number) {
    this.view.setUint16(8, value, true);
  }

  // 0x0a: u8
  set bIndexSubType(value: number) {
    this.view.setUint8(10, value);
  }

  // 0x0b: u8
  set bIndexType(value: number) {
    this.view.setUint8(11, value);
  }

  // 0x0c: u32
  set nEntriesInUse(value: number) {
    this.view.setUint32(12, value, true);
  }

  // 0x10: u32
  set dwChunkId(value: number) {
    this.view.setUint32(16, value, true);
  }

  // 0x14: pad4

  // 0x18: pointer
  set dwReserved(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(24, BigInt(util.toPointer(value)), true);
  }

  // 0x20: pointer
  set aIndex(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(32, BigInt(util.toPointer(value)), true);
  }

  // 0x28: pointer
  set adwTrailingFill(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(40, BigInt(util.toPointer(value)), true);
  }
}

/**
 * Windows.Win32.Media.DirectShow.AVIFIELDINDEX (size: 48)
 */
export interface AVIFIELDINDEX {
  /** u32 */
  fcc: number;
  /** u32 */
  cb: number;
  /** u16 */
  wLongsPerEntry: number;
  /** u8 */
  bIndexSubType: number;
  /** u8 */
  bIndexType: number;
  /** u32 */
  nEntriesInUse: number;
  /** u32 */
  dwChunkId: number;
  /** u64 */
  qwBaseOffset: Deno.PointerValue;
  /** u32 */
  dwReserved3: number;
  /** array */
  aIndex: Deno.PointerValue | null;
}

export const sizeofAVIFIELDINDEX = 48;

export function allocAVIFIELDINDEX(data?: Partial<AVIFIELDINDEX>): Uint8Array {
  const buf = new Uint8Array(sizeofAVIFIELDINDEX);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.fcc !== undefined) view.setUint32(0, Number(data.fcc), true);
  // 0x04: u32
  if (data?.cb !== undefined) view.setUint32(4, Number(data.cb), true);
  // 0x08: u16
  if (data?.wLongsPerEntry !== undefined) view.setUint16(8, Number(data.wLongsPerEntry), true);
  // 0x0a: u8
  if (data?.bIndexSubType !== undefined) view.setUint8(10, Number(data.bIndexSubType));
  // 0x0b: u8
  if (data?.bIndexType !== undefined) view.setUint8(11, Number(data.bIndexType));
  // 0x0c: u32
  if (data?.nEntriesInUse !== undefined) view.setUint32(12, Number(data.nEntriesInUse), true);
  // 0x10: u32
  if (data?.dwChunkId !== undefined) view.setUint32(16, Number(data.dwChunkId), true);
  // 0x14: pad4
  // 0x18: u64
  if (data?.qwBaseOffset !== undefined) view.setBigUint64(24, BigInt(data.qwBaseOffset), true);
  // 0x20: u32
  if (data?.dwReserved3 !== undefined) view.setUint32(32, Number(data.dwReserved3), true);
  // 0x24: pad4
  // 0x28: pointer
  if (data?.aIndex !== undefined) view.setBigUint64(40, data.aIndex === null ? 0n : BigInt(util.toPointer(data.aIndex)), true);
  return buf;
}

export class AVIFIELDINDEXView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get fcc(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: u32
  get cb(): number {
    return this.view.getUint32(4, true);
  }

  // 0x08: u16
  get wLongsPerEntry(): number {
    return this.view.getUint16(8, true);
  }

  // 0x0a: u8
  get bIndexSubType(): number {
    return this.view.getUint8(10);
  }

  // 0x0b: u8
  get bIndexType(): number {
    return this.view.getUint8(11);
  }

  // 0x0c: u32
  get nEntriesInUse(): number {
    return this.view.getUint32(12, true);
  }

  // 0x10: u32
  get dwChunkId(): number {
    return this.view.getUint32(16, true);
  }

  // 0x14: pad4

  // 0x18: u64
  get qwBaseOffset(): Deno.PointerValue {
    return Number(this.view.getBigUint64(24, true));
  }

  // 0x20: u32
  get dwReserved3(): number {
    return this.view.getUint32(32, true);
  }

  // 0x24: pad4

  // 0x28: pointer
  get aIndex(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(40, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: u32
  set fcc(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: u32
  set cb(value: number) {
    this.view.setUint32(4, value, true);
  }

  // 0x08: u16
  set wLongsPerEntry(value: number) {
    this.view.setUint16(8, value, true);
  }

  // 0x0a: u8
  set bIndexSubType(value: number) {
    this.view.setUint8(10, value);
  }

  // 0x0b: u8
  set bIndexType(value: number) {
    this.view.setUint8(11, value);
  }

  // 0x0c: u32
  set nEntriesInUse(value: number) {
    this.view.setUint32(12, value, true);
  }

  // 0x10: u32
  set dwChunkId(value: number) {
    this.view.setUint32(16, value, true);
  }

  // 0x14: pad4

  // 0x18: u64
  set qwBaseOffset(value: Deno.PointerValue) {
    this.view.setBigUint64(24, BigInt(value), true);
  }

  // 0x20: u32
  set dwReserved3(value: number) {
    this.view.setUint32(32, value, true);
  }

  // 0x24: pad4

  // 0x28: pointer
  set aIndex(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(40, BigInt(util.toPointer(value)), true);
  }
}

/**
 * Windows.Win32.Media.DirectShow.MainAVIHeader (size: 48)
 */
export interface MainAVIHeader {
  /** u32 */
  dwMicroSecPerFrame: number;
  /** u32 */
  dwMaxBytesPerSec: number;
  /** u32 */
  dwPaddingGranularity: number;
  /** u32 */
  dwFlags: number;
  /** u32 */
  dwTotalFrames: number;
  /** u32 */
  dwInitialFrames: number;
  /** u32 */
  dwStreams: number;
  /** u32 */
  dwSuggestedBufferSize: number;
  /** u32 */
  dwWidth: number;
  /** u32 */
  dwHeight: number;
  /** array */
  dwReserved: Deno.PointerValue | null;
}

export const sizeofMainAVIHeader = 48;

export function allocMainAVIHeader(data?: Partial<MainAVIHeader>): Uint8Array {
  const buf = new Uint8Array(sizeofMainAVIHeader);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.dwMicroSecPerFrame !== undefined) view.setUint32(0, Number(data.dwMicroSecPerFrame), true);
  // 0x04: u32
  if (data?.dwMaxBytesPerSec !== undefined) view.setUint32(4, Number(data.dwMaxBytesPerSec), true);
  // 0x08: u32
  if (data?.dwPaddingGranularity !== undefined) view.setUint32(8, Number(data.dwPaddingGranularity), true);
  // 0x0c: u32
  if (data?.dwFlags !== undefined) view.setUint32(12, Number(data.dwFlags), true);
  // 0x10: u32
  if (data?.dwTotalFrames !== undefined) view.setUint32(16, Number(data.dwTotalFrames), true);
  // 0x14: u32
  if (data?.dwInitialFrames !== undefined) view.setUint32(20, Number(data.dwInitialFrames), true);
  // 0x18: u32
  if (data?.dwStreams !== undefined) view.setUint32(24, Number(data.dwStreams), true);
  // 0x1c: u32
  if (data?.dwSuggestedBufferSize !== undefined) view.setUint32(28, Number(data.dwSuggestedBufferSize), true);
  // 0x20: u32
  if (data?.dwWidth !== undefined) view.setUint32(32, Number(data.dwWidth), true);
  // 0x24: u32
  if (data?.dwHeight !== undefined) view.setUint32(36, Number(data.dwHeight), true);
  // 0x28: pointer
  if (data?.dwReserved !== undefined) view.setBigUint64(40, data.dwReserved === null ? 0n : BigInt(util.toPointer(data.dwReserved)), true);
  return buf;
}

export class MainAVIHeaderView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get dwMicroSecPerFrame(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: u32
  get dwMaxBytesPerSec(): number {
    return this.view.getUint32(4, true);
  }

  // 0x08: u32
  get dwPaddingGranularity(): number {
    return this.view.getUint32(8, true);
  }

  // 0x0c: u32
  get dwFlags(): number {
    return this.view.getUint32(12, true);
  }

  // 0x10: u32
  get dwTotalFrames(): number {
    return this.view.getUint32(16, true);
  }

  // 0x14: u32
  get dwInitialFrames(): number {
    return this.view.getUint32(20, true);
  }

  // 0x18: u32
  get dwStreams(): number {
    return this.view.getUint32(24, true);
  }

  // 0x1c: u32
  get dwSuggestedBufferSize(): number {
    return this.view.getUint32(28, true);
  }

  // 0x20: u32
  get dwWidth(): number {
    return this.view.getUint32(32, true);
  }

  // 0x24: u32
  get dwHeight(): number {
    return this.view.getUint32(36, true);
  }

  // 0x28: pointer
  get dwReserved(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(40, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: u32
  set dwMicroSecPerFrame(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: u32
  set dwMaxBytesPerSec(value: number) {
    this.view.setUint32(4, value, true);
  }

  // 0x08: u32
  set dwPaddingGranularity(value: number) {
    this.view.setUint32(8, value, true);
  }

  // 0x0c: u32
  set dwFlags(value: number) {
    this.view.setUint32(12, value, true);
  }

  // 0x10: u32
  set dwTotalFrames(value: number) {
    this.view.setUint32(16, value, true);
  }

  // 0x14: u32
  set dwInitialFrames(value: number) {
    this.view.setUint32(20, value, true);
  }

  // 0x18: u32
  set dwStreams(value: number) {
    this.view.setUint32(24, value, true);
  }

  // 0x1c: u32
  set dwSuggestedBufferSize(value: number) {
    this.view.setUint32(28, value, true);
  }

  // 0x20: u32
  set dwWidth(value: number) {
    this.view.setUint32(32, value, true);
  }

  // 0x24: u32
  set dwHeight(value: number) {
    this.view.setUint32(36, value, true);
  }

  // 0x28: pointer
  set dwReserved(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(40, BigInt(util.toPointer(value)), true);
  }
}

/**
 * Windows.Win32.Media.DirectShow.AVIStreamHeader (size: 56)
 */
export interface AVIStreamHeader {
  /** u32 */
  fccType: number;
  /** u32 */
  fccHandler: number;
  /** u32 */
  dwFlags: number;
  /** u16 */
  wPriority: number;
  /** u16 */
  wLanguage: number;
  /** u32 */
  dwInitialFrames: number;
  /** u32 */
  dwScale: number;
  /** u32 */
  dwRate: number;
  /** u32 */
  dwStart: number;
  /** u32 */
  dwLength: number;
  /** u32 */
  dwSuggestedBufferSize: number;
  /** u32 */
  dwQuality: number;
  /** u32 */
  dwSampleSize: number;
  /** Windows.Win32.Foundation.RECT */
  rcFrame: Uint8Array | Deno.PointerValue | null;
}

export const sizeofAVIStreamHeader = 56;

export function allocAVIStreamHeader(data?: Partial<AVIStreamHeader>): Uint8Array {
  const buf = new Uint8Array(sizeofAVIStreamHeader);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.fccType !== undefined) view.setUint32(0, Number(data.fccType), true);
  // 0x04: u32
  if (data?.fccHandler !== undefined) view.setUint32(4, Number(data.fccHandler), true);
  // 0x08: u32
  if (data?.dwFlags !== undefined) view.setUint32(8, Number(data.dwFlags), true);
  // 0x0c: u16
  if (data?.wPriority !== undefined) view.setUint16(12, Number(data.wPriority), true);
  // 0x0e: u16
  if (data?.wLanguage !== undefined) view.setUint16(14, Number(data.wLanguage), true);
  // 0x10: u32
  if (data?.dwInitialFrames !== undefined) view.setUint32(16, Number(data.dwInitialFrames), true);
  // 0x14: u32
  if (data?.dwScale !== undefined) view.setUint32(20, Number(data.dwScale), true);
  // 0x18: u32
  if (data?.dwRate !== undefined) view.setUint32(24, Number(data.dwRate), true);
  // 0x1c: u32
  if (data?.dwStart !== undefined) view.setUint32(28, Number(data.dwStart), true);
  // 0x20: u32
  if (data?.dwLength !== undefined) view.setUint32(32, Number(data.dwLength), true);
  // 0x24: u32
  if (data?.dwSuggestedBufferSize !== undefined) view.setUint32(36, Number(data.dwSuggestedBufferSize), true);
  // 0x28: u32
  if (data?.dwQuality !== undefined) view.setUint32(40, Number(data.dwQuality), true);
  // 0x2c: u32
  if (data?.dwSampleSize !== undefined) view.setUint32(44, Number(data.dwSampleSize), true);
  // 0x30: pointer
  if (data?.rcFrame !== undefined) view.setBigUint64(48, data.rcFrame === null ? 0n : BigInt(util.toPointer(data.rcFrame)), true);
  return buf;
}

export class AVIStreamHeaderView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get fccType(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: u32
  get fccHandler(): number {
    return this.view.getUint32(4, true);
  }

  // 0x08: u32
  get dwFlags(): number {
    return this.view.getUint32(8, true);
  }

  // 0x0c: u16
  get wPriority(): number {
    return this.view.getUint16(12, true);
  }

  // 0x0e: u16
  get wLanguage(): number {
    return this.view.getUint16(14, true);
  }

  // 0x10: u32
  get dwInitialFrames(): number {
    return this.view.getUint32(16, true);
  }

  // 0x14: u32
  get dwScale(): number {
    return this.view.getUint32(20, true);
  }

  // 0x18: u32
  get dwRate(): number {
    return this.view.getUint32(24, true);
  }

  // 0x1c: u32
  get dwStart(): number {
    return this.view.getUint32(28, true);
  }

  // 0x20: u32
  get dwLength(): number {
    return this.view.getUint32(32, true);
  }

  // 0x24: u32
  get dwSuggestedBufferSize(): number {
    return this.view.getUint32(36, true);
  }

  // 0x28: u32
  get dwQuality(): number {
    return this.view.getUint32(40, true);
  }

  // 0x2c: u32
  get dwSampleSize(): number {
    return this.view.getUint32(44, true);
  }

  // 0x30: pointer
  get rcFrame(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(48, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: u32
  set fccType(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: u32
  set fccHandler(value: number) {
    this.view.setUint32(4, value, true);
  }

  // 0x08: u32
  set dwFlags(value: number) {
    this.view.setUint32(8, value, true);
  }

  // 0x0c: u16
  set wPriority(value: number) {
    this.view.setUint16(12, value, true);
  }

  // 0x0e: u16
  set wLanguage(value: number) {
    this.view.setUint16(14, value, true);
  }

  // 0x10: u32
  set dwInitialFrames(value: number) {
    this.view.setUint32(16, value, true);
  }

  // 0x14: u32
  set dwScale(value: number) {
    this.view.setUint32(20, value, true);
  }

  // 0x18: u32
  set dwRate(value: number) {
    this.view.setUint32(24, value, true);
  }

  // 0x1c: u32
  set dwStart(value: number) {
    this.view.setUint32(28, value, true);
  }

  // 0x20: u32
  set dwLength(value: number) {
    this.view.setUint32(32, value, true);
  }

  // 0x24: u32
  set dwSuggestedBufferSize(value: number) {
    this.view.setUint32(36, value, true);
  }

  // 0x28: u32
  set dwQuality(value: number) {
    this.view.setUint32(40, value, true);
  }

  // 0x2c: u32
  set dwSampleSize(value: number) {
    this.view.setUint32(44, value, true);
  }

  // 0x30: pointer
  set rcFrame(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(48, BigInt(util.toPointer(value)), true);
  }
}

/**
 * Windows.Win32.Media.DirectShow.AVIINDEXENTRY (size: 16)
 */
export interface AVIINDEXENTRY {
  /** u32 */
  ckid: number;
  /** u32 */
  dwFlags: number;
  /** u32 */
  dwChunkOffset: number;
  /** u32 */
  dwChunkLength: number;
}

export const sizeofAVIINDEXENTRY = 16;

export function allocAVIINDEXENTRY(data?: Partial<AVIINDEXENTRY>): Uint8Array {
  const buf = new Uint8Array(sizeofAVIINDEXENTRY);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.ckid !== undefined) view.setUint32(0, Number(data.ckid), true);
  // 0x04: u32
  if (data?.dwFlags !== undefined) view.setUint32(4, Number(data.dwFlags), true);
  // 0x08: u32
  if (data?.dwChunkOffset !== undefined) view.setUint32(8, Number(data.dwChunkOffset), true);
  // 0x0c: u32
  if (data?.dwChunkLength !== undefined) view.setUint32(12, Number(data.dwChunkLength), true);
  return buf;
}

export class AVIINDEXENTRYView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get ckid(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: u32
  get dwFlags(): number {
    return this.view.getUint32(4, true);
  }

  // 0x08: u32
  get dwChunkOffset(): number {
    return this.view.getUint32(8, true);
  }

  // 0x0c: u32
  get dwChunkLength(): number {
    return this.view.getUint32(12, true);
  }

  // 0x00: u32
  set ckid(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: u32
  set dwFlags(value: number) {
    this.view.setUint32(4, value, true);
  }

  // 0x08: u32
  set dwChunkOffset(value: number) {
    this.view.setUint32(8, value, true);
  }

  // 0x0c: u32
  set dwChunkLength(value: number) {
    this.view.setUint32(12, value, true);
  }
}

/**
 * Windows.Win32.Media.DirectShow.AVIPALCHANGE (size: 16)
 */
export interface AVIPALCHANGE {
  /** u8 */
  bFirstEntry: number;
  /** u8 */
  bNumEntries: number;
  /** u16 */
  wFlags: number;
  /** array */
  peNew: Deno.PointerValue | null;
}

export const sizeofAVIPALCHANGE = 16;

export function allocAVIPALCHANGE(data?: Partial<AVIPALCHANGE>): Uint8Array {
  const buf = new Uint8Array(sizeofAVIPALCHANGE);
  const view = new DataView(buf.buffer);
  // 0x00: u8
  if (data?.bFirstEntry !== undefined) view.setUint8(0, Number(data.bFirstEntry));
  // 0x01: u8
  if (data?.bNumEntries !== undefined) view.setUint8(1, Number(data.bNumEntries));
  // 0x02: u16
  if (data?.wFlags !== undefined) view.setUint16(2, Number(data.wFlags), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.peNew !== undefined) view.setBigUint64(8, data.peNew === null ? 0n : BigInt(util.toPointer(data.peNew)), true);
  return buf;
}

export class AVIPALCHANGEView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u8
  get bFirstEntry(): number {
    return this.view.getUint8(0);
  }

  // 0x01: u8
  get bNumEntries(): number {
    return this.view.getUint8(1);
  }

  // 0x02: u16
  get wFlags(): number {
    return this.view.getUint16(2, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  get peNew(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(8, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: u8
  set bFirstEntry(value: number) {
    this.view.setUint8(0, value);
  }

  // 0x01: u8
  set bNumEntries(value: number) {
    this.view.setUint8(1, value);
  }

  // 0x02: u16
  set wFlags(value: number) {
    this.view.setUint16(2, value, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  set peNew(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(8, BigInt(util.toPointer(value)), true);
  }
}

/**
 * Windows.Win32.Media.DirectShow.AM_AC3_ERROR_CONCEALMENT (size: 8)
 */
export interface AM_AC3_ERROR_CONCEALMENT {
  /** Windows.Win32.Foundation.BOOL */
  fRepeatPreviousBlock: boolean;
  /** Windows.Win32.Foundation.BOOL */
  fErrorInCurrentBlock: boolean;
}

export const sizeofAM_AC3_ERROR_CONCEALMENT = 8;

export function allocAM_AC3_ERROR_CONCEALMENT(data?: Partial<AM_AC3_ERROR_CONCEALMENT>): Uint8Array {
  const buf = new Uint8Array(sizeofAM_AC3_ERROR_CONCEALMENT);
  const view = new DataView(buf.buffer);
  // 0x00: i32
  if (data?.fRepeatPreviousBlock !== undefined) view.setInt32(0, Number(data.fRepeatPreviousBlock), true);
  // 0x04: i32
  if (data?.fErrorInCurrentBlock !== undefined) view.setInt32(4, Number(data.fErrorInCurrentBlock), true);
  return buf;
}

export class AM_AC3_ERROR_CONCEALMENTView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: i32
  get fRepeatPreviousBlock(): number {
    return this.view.getInt32(0, true);
  }

  // 0x04: i32
  get fErrorInCurrentBlock(): number {
    return this.view.getInt32(4, true);
  }

  // 0x00: i32
  set fRepeatPreviousBlock(value: number) {
    this.view.setInt32(0, value, true);
  }

  // 0x04: i32
  set fErrorInCurrentBlock(value: number) {
    this.view.setInt32(4, value, true);
  }
}

/**
 * Windows.Win32.Media.DirectShow.AM_AC3_ALTERNATE_AUDIO (size: 8)
 */
export interface AM_AC3_ALTERNATE_AUDIO {
  /** Windows.Win32.Foundation.BOOL */
  fStereo: boolean;
  /** u32 */
  DualMode: number;
}

export const sizeofAM_AC3_ALTERNATE_AUDIO = 8;

export function allocAM_AC3_ALTERNATE_AUDIO(data?: Partial<AM_AC3_ALTERNATE_AUDIO>): Uint8Array {
  const buf = new Uint8Array(sizeofAM_AC3_ALTERNATE_AUDIO);
  const view = new DataView(buf.buffer);
  // 0x00: i32
  if (data?.fStereo !== undefined) view.setInt32(0, Number(data.fStereo), true);
  // 0x04: u32
  if (data?.DualMode !== undefined) view.setUint32(4, Number(data.DualMode), true);
  return buf;
}

export class AM_AC3_ALTERNATE_AUDIOView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: i32
  get fStereo(): number {
    return this.view.getInt32(0, true);
  }

  // 0x04: u32
  get DualMode(): number {
    return this.view.getUint32(4, true);
  }

  // 0x00: i32
  set fStereo(value: number) {
    this.view.setInt32(0, value, true);
  }

  // 0x04: u32
  set DualMode(value: number) {
    this.view.setUint32(4, value, true);
  }
}

/**
 * Windows.Win32.Media.DirectShow.AM_AC3_DOWNMIX (size: 8)
 */
export interface AM_AC3_DOWNMIX {
  /** Windows.Win32.Foundation.BOOL */
  fDownMix: boolean;
  /** Windows.Win32.Foundation.BOOL */
  fDolbySurround: boolean;
}

export const sizeofAM_AC3_DOWNMIX = 8;

export function allocAM_AC3_DOWNMIX(data?: Partial<AM_AC3_DOWNMIX>): Uint8Array {
  const buf = new Uint8Array(sizeofAM_AC3_DOWNMIX);
  const view = new DataView(buf.buffer);
  // 0x00: i32
  if (data?.fDownMix !== undefined) view.setInt32(0, Number(data.fDownMix), true);
  // 0x04: i32
  if (data?.fDolbySurround !== undefined) view.setInt32(4, Number(data.fDolbySurround), true);
  return buf;
}

export class AM_AC3_DOWNMIXView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: i32
  get fDownMix(): number {
    return this.view.getInt32(0, true);
  }

  // 0x04: i32
  get fDolbySurround(): number {
    return this.view.getInt32(4, true);
  }

  // 0x00: i32
  set fDownMix(value: number) {
    this.view.setInt32(0, value, true);
  }

  // 0x04: i32
  set fDolbySurround(value: number) {
    this.view.setInt32(4, value, true);
  }
}

/**
 * Windows.Win32.Media.DirectShow.AM_AC3_BIT_STREAM_MODE (size: 8)
 */
export interface AM_AC3_BIT_STREAM_MODE {
  /** i32 */
  BitStreamMode: number;
}

export const sizeofAM_AC3_BIT_STREAM_MODE = 8;

export function allocAM_AC3_BIT_STREAM_MODE(data?: Partial<AM_AC3_BIT_STREAM_MODE>): Uint8Array {
  const buf = new Uint8Array(sizeofAM_AC3_BIT_STREAM_MODE);
  const view = new DataView(buf.buffer);
  // 0x00: i32
  if (data?.BitStreamMode !== undefined) view.setInt32(0, Number(data.BitStreamMode), true);
  // 0x04: pad4
  return buf;
}

export class AM_AC3_BIT_STREAM_MODEView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: i32
  get BitStreamMode(): number {
    return this.view.getInt32(0, true);
  }

  // 0x04: pad4

  // 0x00: i32
  set BitStreamMode(value: number) {
    this.view.setInt32(0, value, true);
  }

  // 0x04: pad4
}

/**
 * Windows.Win32.Media.DirectShow.AM_AC3_DIALOGUE_LEVEL (size: 8)
 */
export interface AM_AC3_DIALOGUE_LEVEL {
  /** u32 */
  DialogueLevel: number;
}

export const sizeofAM_AC3_DIALOGUE_LEVEL = 8;

export function allocAM_AC3_DIALOGUE_LEVEL(data?: Partial<AM_AC3_DIALOGUE_LEVEL>): Uint8Array {
  const buf = new Uint8Array(sizeofAM_AC3_DIALOGUE_LEVEL);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.DialogueLevel !== undefined) view.setUint32(0, Number(data.DialogueLevel), true);
  // 0x04: pad4
  return buf;
}

export class AM_AC3_DIALOGUE_LEVELView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get DialogueLevel(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: pad4

  // 0x00: u32
  set DialogueLevel(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: pad4
}

/**
 * Windows.Win32.Media.DirectShow.AM_AC3_ROOM_TYPE (size: 8)
 */
export interface AM_AC3_ROOM_TYPE {
  /** Windows.Win32.Foundation.BOOL */
  fLargeRoom: boolean;
}

export const sizeofAM_AC3_ROOM_TYPE = 8;

export function allocAM_AC3_ROOM_TYPE(data?: Partial<AM_AC3_ROOM_TYPE>): Uint8Array {
  const buf = new Uint8Array(sizeofAM_AC3_ROOM_TYPE);
  const view = new DataView(buf.buffer);
  // 0x00: i32
  if (data?.fLargeRoom !== undefined) view.setInt32(0, Number(data.fLargeRoom), true);
  // 0x04: pad4
  return buf;
}

export class AM_AC3_ROOM_TYPEView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: i32
  get fLargeRoom(): number {
    return this.view.getInt32(0, true);
  }

  // 0x04: pad4

  // 0x00: i32
  set fLargeRoom(value: number) {
    this.view.setInt32(0, value, true);
  }

  // 0x04: pad4
}

/**
 * Windows.Win32.Media.DirectShow.AM_DVD_YUV (size: 8)
 */
export interface AM_DVD_YUV {
  /** u8 */
  Reserved: number;
  /** u8 */
  Y: number;
  /** u8 */
  U: number;
  /** u8 */
  V: number;
}

export const sizeofAM_DVD_YUV = 8;

export function allocAM_DVD_YUV(data?: Partial<AM_DVD_YUV>): Uint8Array {
  const buf = new Uint8Array(sizeofAM_DVD_YUV);
  const view = new DataView(buf.buffer);
  // 0x00: u8
  if (data?.Reserved !== undefined) view.setUint8(0, Number(data.Reserved));
  // 0x01: u8
  if (data?.Y !== undefined) view.setUint8(1, Number(data.Y));
  // 0x02: u8
  if (data?.U !== undefined) view.setUint8(2, Number(data.U));
  // 0x03: u8
  if (data?.V !== undefined) view.setUint8(3, Number(data.V));
  // 0x04: pad4
  return buf;
}

export class AM_DVD_YUVView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u8
  get Reserved(): number {
    return this.view.getUint8(0);
  }

  // 0x01: u8
  get Y(): number {
    return this.view.getUint8(1);
  }

  // 0x02: u8
  get U(): number {
    return this.view.getUint8(2);
  }

  // 0x03: u8
  get V(): number {
    return this.view.getUint8(3);
  }

  // 0x04: pad4

  // 0x00: u8
  set Reserved(value: number) {
    this.view.setUint8(0, value);
  }

  // 0x01: u8
  set Y(value: number) {
    this.view.setUint8(1, value);
  }

  // 0x02: u8
  set U(value: number) {
    this.view.setUint8(2, value);
  }

  // 0x03: u8
  set V(value: number) {
    this.view.setUint8(3, value);
  }

  // 0x04: pad4
}

/**
 * Windows.Win32.Media.DirectShow.AM_PROPERTY_SPPAL (size: 8)
 */
export interface AM_PROPERTY_SPPAL {
  /** array */
  sppal: Deno.PointerValue | null;
}

export const sizeofAM_PROPERTY_SPPAL = 8;

export function allocAM_PROPERTY_SPPAL(data?: Partial<AM_PROPERTY_SPPAL>): Uint8Array {
  const buf = new Uint8Array(sizeofAM_PROPERTY_SPPAL);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.sppal !== undefined) view.setBigUint64(0, data.sppal === null ? 0n : BigInt(util.toPointer(data.sppal)), true);
  return buf;
}

export class AM_PROPERTY_SPPALView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get sppal(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(0, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: pointer
  set sppal(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(0, BigInt(util.toPointer(value)), true);
  }
}

/**
 * Windows.Win32.Media.DirectShow.AM_COLCON (size: 8)
 */
export interface AM_COLCON {
  /** u8 */
  _bitfield1: number;
  /** u8 */
  _bitfield2: number;
  /** u8 */
  _bitfield3: number;
  /** u8 */
  _bitfield4: number;
}

export const sizeofAM_COLCON = 8;

export function allocAM_COLCON(data?: Partial<AM_COLCON>): Uint8Array {
  const buf = new Uint8Array(sizeofAM_COLCON);
  const view = new DataView(buf.buffer);
  // 0x00: u8
  if (data?._bitfield1 !== undefined) view.setUint8(0, Number(data._bitfield1));
  // 0x01: u8
  if (data?._bitfield2 !== undefined) view.setUint8(1, Number(data._bitfield2));
  // 0x02: u8
  if (data?._bitfield3 !== undefined) view.setUint8(2, Number(data._bitfield3));
  // 0x03: u8
  if (data?._bitfield4 !== undefined) view.setUint8(3, Number(data._bitfield4));
  // 0x04: pad4
  return buf;
}

export class AM_COLCONView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u8
  get _bitfield1(): number {
    return this.view.getUint8(0);
  }

  // 0x01: u8
  get _bitfield2(): number {
    return this.view.getUint8(1);
  }

  // 0x02: u8
  get _bitfield3(): number {
    return this.view.getUint8(2);
  }

  // 0x03: u8
  get _bitfield4(): number {
    return this.view.getUint8(3);
  }

  // 0x04: pad4

  // 0x00: u8
  set _bitfield1(value: number) {
    this.view.setUint8(0, value);
  }

  // 0x01: u8
  set _bitfield2(value: number) {
    this.view.setUint8(1, value);
  }

  // 0x02: u8
  set _bitfield3(value: number) {
    this.view.setUint8(2, value);
  }

  // 0x03: u8
  set _bitfield4(value: number) {
    this.view.setUint8(3, value);
  }

  // 0x04: pad4
}

/**
 * Windows.Win32.Media.DirectShow.AM_PROPERTY_SPHLI (size: 32)
 */
export interface AM_PROPERTY_SPHLI {
  /** u16 */
  HLISS: number;
  /** u16 */
  Reserved: number;
  /** u32 */
  StartPTM: number;
  /** u32 */
  EndPTM: number;
  /** u16 */
  StartX: number;
  /** u16 */
  StartY: number;
  /** u16 */
  StopX: number;
  /** u16 */
  StopY: number;
  /** Windows.Win32.Media.DirectShow.AM_COLCON */
  ColCon: Uint8Array | Deno.PointerValue | null;
}

export const sizeofAM_PROPERTY_SPHLI = 32;

export function allocAM_PROPERTY_SPHLI(data?: Partial<AM_PROPERTY_SPHLI>): Uint8Array {
  const buf = new Uint8Array(sizeofAM_PROPERTY_SPHLI);
  const view = new DataView(buf.buffer);
  // 0x00: u16
  if (data?.HLISS !== undefined) view.setUint16(0, Number(data.HLISS), true);
  // 0x02: u16
  if (data?.Reserved !== undefined) view.setUint16(2, Number(data.Reserved), true);
  // 0x04: u32
  if (data?.StartPTM !== undefined) view.setUint32(4, Number(data.StartPTM), true);
  // 0x08: u32
  if (data?.EndPTM !== undefined) view.setUint32(8, Number(data.EndPTM), true);
  // 0x0c: u16
  if (data?.StartX !== undefined) view.setUint16(12, Number(data.StartX), true);
  // 0x0e: u16
  if (data?.StartY !== undefined) view.setUint16(14, Number(data.StartY), true);
  // 0x10: u16
  if (data?.StopX !== undefined) view.setUint16(16, Number(data.StopX), true);
  // 0x12: u16
  if (data?.StopY !== undefined) view.setUint16(18, Number(data.StopY), true);
  // 0x14: pad4
  // 0x18: pointer
  if (data?.ColCon !== undefined) view.setBigUint64(24, data.ColCon === null ? 0n : BigInt(util.toPointer(data.ColCon)), true);
  return buf;
}

export class AM_PROPERTY_SPHLIView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u16
  get HLISS(): number {
    return this.view.getUint16(0, true);
  }

  // 0x02: u16
  get Reserved(): number {
    return this.view.getUint16(2, true);
  }

  // 0x04: u32
  get StartPTM(): number {
    return this.view.getUint32(4, true);
  }

  // 0x08: u32
  get EndPTM(): number {
    return this.view.getUint32(8, true);
  }

  // 0x0c: u16
  get StartX(): number {
    return this.view.getUint16(12, true);
  }

  // 0x0e: u16
  get StartY(): number {
    return this.view.getUint16(14, true);
  }

  // 0x10: u16
  get StopX(): number {
    return this.view.getUint16(16, true);
  }

  // 0x12: u16
  get StopY(): number {
    return this.view.getUint16(18, true);
  }

  // 0x14: pad4

  // 0x18: pointer
  get ColCon(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(24, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: u16
  set HLISS(value: number) {
    this.view.setUint16(0, value, true);
  }

  // 0x02: u16
  set Reserved(value: number) {
    this.view.setUint16(2, value, true);
  }

  // 0x04: u32
  set StartPTM(value: number) {
    this.view.setUint32(4, value, true);
  }

  // 0x08: u32
  set EndPTM(value: number) {
    this.view.setUint32(8, value, true);
  }

  // 0x0c: u16
  set StartX(value: number) {
    this.view.setUint16(12, value, true);
  }

  // 0x0e: u16
  set StartY(value: number) {
    this.view.setUint16(14, value, true);
  }

  // 0x10: u16
  set StopX(value: number) {
    this.view.setUint16(16, value, true);
  }

  // 0x12: u16
  set StopY(value: number) {
    this.view.setUint16(18, value, true);
  }

  // 0x14: pad4

  // 0x18: pointer
  set ColCon(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(24, BigInt(util.toPointer(value)), true);
  }
}

/**
 * Windows.Win32.Media.DirectShow.AM_DVDCOPY_CHLGKEY (size: 16)
 */
export interface AM_DVDCOPY_CHLGKEY {
  /** array */
  ChlgKey: Deno.PointerValue | null;
  /** array */
  Reserved: Deno.PointerValue | null;
}

export const sizeofAM_DVDCOPY_CHLGKEY = 16;

export function allocAM_DVDCOPY_CHLGKEY(data?: Partial<AM_DVDCOPY_CHLGKEY>): Uint8Array {
  const buf = new Uint8Array(sizeofAM_DVDCOPY_CHLGKEY);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.ChlgKey !== undefined) view.setBigUint64(0, data.ChlgKey === null ? 0n : BigInt(util.toPointer(data.ChlgKey)), true);
  // 0x08: pointer
  if (data?.Reserved !== undefined) view.setBigUint64(8, data.Reserved === null ? 0n : BigInt(util.toPointer(data.Reserved)), true);
  return buf;
}

export class AM_DVDCOPY_CHLGKEYView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get ChlgKey(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(0, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x08: pointer
  get Reserved(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(8, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: pointer
  set ChlgKey(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(0, BigInt(util.toPointer(value)), true);
  }

  // 0x08: pointer
  set Reserved(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(8, BigInt(util.toPointer(value)), true);
  }
}

/**
 * Windows.Win32.Media.DirectShow.AM_DVDCOPY_BUSKEY (size: 16)
 */
export interface AM_DVDCOPY_BUSKEY {
  /** array */
  BusKey: Deno.PointerValue | null;
  /** array */
  Reserved: Deno.PointerValue | null;
}

export const sizeofAM_DVDCOPY_BUSKEY = 16;

export function allocAM_DVDCOPY_BUSKEY(data?: Partial<AM_DVDCOPY_BUSKEY>): Uint8Array {
  const buf = new Uint8Array(sizeofAM_DVDCOPY_BUSKEY);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.BusKey !== undefined) view.setBigUint64(0, data.BusKey === null ? 0n : BigInt(util.toPointer(data.BusKey)), true);
  // 0x08: pointer
  if (data?.Reserved !== undefined) view.setBigUint64(8, data.Reserved === null ? 0n : BigInt(util.toPointer(data.Reserved)), true);
  return buf;
}

export class AM_DVDCOPY_BUSKEYView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get BusKey(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(0, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x08: pointer
  get Reserved(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(8, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: pointer
  set BusKey(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(0, BigInt(util.toPointer(value)), true);
  }

  // 0x08: pointer
  set Reserved(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(8, BigInt(util.toPointer(value)), true);
  }
}

/**
 * Windows.Win32.Media.DirectShow.AM_DVDCOPY_DISCKEY (size: 8)
 */
export interface AM_DVDCOPY_DISCKEY {
  /** array */
  DiscKey: Deno.PointerValue | null;
}

export const sizeofAM_DVDCOPY_DISCKEY = 8;

export function allocAM_DVDCOPY_DISCKEY(data?: Partial<AM_DVDCOPY_DISCKEY>): Uint8Array {
  const buf = new Uint8Array(sizeofAM_DVDCOPY_DISCKEY);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.DiscKey !== undefined) view.setBigUint64(0, data.DiscKey === null ? 0n : BigInt(util.toPointer(data.DiscKey)), true);
  return buf;
}

export class AM_DVDCOPY_DISCKEYView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get DiscKey(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(0, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: pointer
  set DiscKey(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(0, BigInt(util.toPointer(value)), true);
  }
}

/**
 * Windows.Win32.Media.DirectShow.AM_DVDCOPY_TITLEKEY (size: 32)
 */
export interface AM_DVDCOPY_TITLEKEY {
  /** u32 */
  KeyFlags: number;
  /** array */
  Reserved1: Deno.PointerValue | null;
  /** array */
  TitleKey: Deno.PointerValue | null;
  /** array */
  Reserved2: Deno.PointerValue | null;
}

export const sizeofAM_DVDCOPY_TITLEKEY = 32;

export function allocAM_DVDCOPY_TITLEKEY(data?: Partial<AM_DVDCOPY_TITLEKEY>): Uint8Array {
  const buf = new Uint8Array(sizeofAM_DVDCOPY_TITLEKEY);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.KeyFlags !== undefined) view.setUint32(0, Number(data.KeyFlags), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.Reserved1 !== undefined) view.setBigUint64(8, data.Reserved1 === null ? 0n : BigInt(util.toPointer(data.Reserved1)), true);
  // 0x10: pointer
  if (data?.TitleKey !== undefined) view.setBigUint64(16, data.TitleKey === null ? 0n : BigInt(util.toPointer(data.TitleKey)), true);
  // 0x18: pointer
  if (data?.Reserved2 !== undefined) view.setBigUint64(24, data.Reserved2 === null ? 0n : BigInt(util.toPointer(data.Reserved2)), true);
  return buf;
}

export class AM_DVDCOPY_TITLEKEYView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get KeyFlags(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  get Reserved1(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(8, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x10: pointer
  get TitleKey(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(16, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x18: pointer
  get Reserved2(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(24, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: u32
  set KeyFlags(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  set Reserved1(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(8, BigInt(util.toPointer(value)), true);
  }

  // 0x10: pointer
  set TitleKey(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(16, BigInt(util.toPointer(value)), true);
  }

  // 0x18: pointer
  set Reserved2(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(24, BigInt(util.toPointer(value)), true);
  }
}

/**
 * Windows.Win32.Media.DirectShow.AM_COPY_MACROVISION (size: 8)
 */
export interface AM_COPY_MACROVISION {
  /** u32 */
  MACROVISIONLevel: number;
}

export const sizeofAM_COPY_MACROVISION = 8;

export function allocAM_COPY_MACROVISION(data?: Partial<AM_COPY_MACROVISION>): Uint8Array {
  const buf = new Uint8Array(sizeofAM_COPY_MACROVISION);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.MACROVISIONLevel !== undefined) view.setUint32(0, Number(data.MACROVISIONLevel), true);
  // 0x04: pad4
  return buf;
}

export class AM_COPY_MACROVISIONView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get MACROVISIONLevel(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: pad4

  // 0x00: u32
  set MACROVISIONLevel(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: pad4
}

/**
 * Windows.Win32.Media.DirectShow.AM_DVDCOPY_SET_COPY_STATE (size: 8)
 */
export interface AM_DVDCOPY_SET_COPY_STATE {
  /** u32 */
  DVDCopyState: number;
}

export const sizeofAM_DVDCOPY_SET_COPY_STATE = 8;

export function allocAM_DVDCOPY_SET_COPY_STATE(data?: Partial<AM_DVDCOPY_SET_COPY_STATE>): Uint8Array {
  const buf = new Uint8Array(sizeofAM_DVDCOPY_SET_COPY_STATE);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.DVDCopyState !== undefined) view.setUint32(0, Number(data.DVDCopyState), true);
  // 0x04: pad4
  return buf;
}

export class AM_DVDCOPY_SET_COPY_STATEView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get DVDCopyState(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: pad4

  // 0x00: u32
  set DVDCopyState(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: pad4
}

/**
 * Windows.Win32.Media.DirectShow.DVD_REGION (size: 8)
 */
export interface DVD_REGION {
  /** u8 */
  CopySystem: number;
  /** u8 */
  RegionData: number;
  /** u8 */
  SystemRegion: number;
  /** u8 */
  ResetCount: number;
}

export const sizeofDVD_REGION = 8;

export function allocDVD_REGION(data?: Partial<DVD_REGION>): Uint8Array {
  const buf = new Uint8Array(sizeofDVD_REGION);
  const view = new DataView(buf.buffer);
  // 0x00: u8
  if (data?.CopySystem !== undefined) view.setUint8(0, Number(data.CopySystem));
  // 0x01: u8
  if (data?.RegionData !== undefined) view.setUint8(1, Number(data.RegionData));
  // 0x02: u8
  if (data?.SystemRegion !== undefined) view.setUint8(2, Number(data.SystemRegion));
  // 0x03: u8
  if (data?.ResetCount !== undefined) view.setUint8(3, Number(data.ResetCount));
  // 0x04: pad4
  return buf;
}

export class DVD_REGIONView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u8
  get CopySystem(): number {
    return this.view.getUint8(0);
  }

  // 0x01: u8
  get RegionData(): number {
    return this.view.getUint8(1);
  }

  // 0x02: u8
  get SystemRegion(): number {
    return this.view.getUint8(2);
  }

  // 0x03: u8
  get ResetCount(): number {
    return this.view.getUint8(3);
  }

  // 0x04: pad4

  // 0x00: u8
  set CopySystem(value: number) {
    this.view.setUint8(0, value);
  }

  // 0x01: u8
  set RegionData(value: number) {
    this.view.setUint8(1, value);
  }

  // 0x02: u8
  set SystemRegion(value: number) {
    this.view.setUint8(2, value);
  }

  // 0x03: u8
  set ResetCount(value: number) {
    this.view.setUint8(3, value);
  }

  // 0x04: pad4
}

/**
 * Windows.Win32.Media.DirectShow.AM_DvdKaraokeData (size: 8)
 */
export interface AM_DvdKaraokeData {
  /** u32 */
  dwDownmix: number;
  /** u32 */
  dwSpeakerAssignment: number;
}

export const sizeofAM_DvdKaraokeData = 8;

export function allocAM_DvdKaraokeData(data?: Partial<AM_DvdKaraokeData>): Uint8Array {
  const buf = new Uint8Array(sizeofAM_DvdKaraokeData);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.dwDownmix !== undefined) view.setUint32(0, Number(data.dwDownmix), true);
  // 0x04: u32
  if (data?.dwSpeakerAssignment !== undefined) view.setUint32(4, Number(data.dwSpeakerAssignment), true);
  return buf;
}

export class AM_DvdKaraokeDataView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get dwDownmix(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: u32
  get dwSpeakerAssignment(): number {
    return this.view.getUint32(4, true);
  }

  // 0x00: u32
  set dwDownmix(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: u32
  set dwSpeakerAssignment(value: number) {
    this.view.setUint32(4, value, true);
  }
}

/**
 * Windows.Win32.Media.DirectShow.AM_SimpleRateChange (size: 16)
 */
export interface AM_SimpleRateChange {
  /** i64 */
  StartTime: Deno.PointerValue;
  /** i32 */
  Rate: number;
}

export const sizeofAM_SimpleRateChange = 16;

export function allocAM_SimpleRateChange(data?: Partial<AM_SimpleRateChange>): Uint8Array {
  const buf = new Uint8Array(sizeofAM_SimpleRateChange);
  const view = new DataView(buf.buffer);
  // 0x00: i64
  if (data?.StartTime !== undefined) view.setBigInt64(0, BigInt(data.StartTime), true);
  // 0x08: i32
  if (data?.Rate !== undefined) view.setInt32(8, Number(data.Rate), true);
  // 0x0c: pad4
  return buf;
}

export class AM_SimpleRateChangeView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: i64
  get StartTime(): Deno.PointerValue {
    return Number(this.view.getBigInt64(0, true));
  }

  // 0x08: i32
  get Rate(): number {
    return this.view.getInt32(8, true);
  }

  // 0x0c: pad4

  // 0x00: i64
  set StartTime(value: Deno.PointerValue) {
    this.view.setBigInt64(0, BigInt(value), true);
  }

  // 0x08: i32
  set Rate(value: number) {
    this.view.setInt32(8, value, true);
  }

  // 0x0c: pad4
}

/**
 * Windows.Win32.Media.DirectShow.AM_QueryRate (size: 8)
 */
export interface AM_QueryRate {
  /** i32 */
  lMaxForwardFullFrame: number;
  /** i32 */
  lMaxReverseFullFrame: number;
}

export const sizeofAM_QueryRate = 8;

export function allocAM_QueryRate(data?: Partial<AM_QueryRate>): Uint8Array {
  const buf = new Uint8Array(sizeofAM_QueryRate);
  const view = new DataView(buf.buffer);
  // 0x00: i32
  if (data?.lMaxForwardFullFrame !== undefined) view.setInt32(0, Number(data.lMaxForwardFullFrame), true);
  // 0x04: i32
  if (data?.lMaxReverseFullFrame !== undefined) view.setInt32(4, Number(data.lMaxReverseFullFrame), true);
  return buf;
}

export class AM_QueryRateView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: i32
  get lMaxForwardFullFrame(): number {
    return this.view.getInt32(0, true);
  }

  // 0x04: i32
  get lMaxReverseFullFrame(): number {
    return this.view.getInt32(4, true);
  }

  // 0x00: i32
  set lMaxForwardFullFrame(value: number) {
    this.view.setInt32(0, value, true);
  }

  // 0x04: i32
  set lMaxReverseFullFrame(value: number) {
    this.view.setInt32(4, value, true);
  }
}

/**
 * Windows.Win32.Media.DirectShow.AM_ExactRateChange (size: 16)
 */
export interface AM_ExactRateChange {
  /** i64 */
  OutputZeroTime: Deno.PointerValue;
  /** i32 */
  Rate: number;
}

export const sizeofAM_ExactRateChange = 16;

export function allocAM_ExactRateChange(data?: Partial<AM_ExactRateChange>): Uint8Array {
  const buf = new Uint8Array(sizeofAM_ExactRateChange);
  const view = new DataView(buf.buffer);
  // 0x00: i64
  if (data?.OutputZeroTime !== undefined) view.setBigInt64(0, BigInt(data.OutputZeroTime), true);
  // 0x08: i32
  if (data?.Rate !== undefined) view.setInt32(8, Number(data.Rate), true);
  // 0x0c: pad4
  return buf;
}

export class AM_ExactRateChangeView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: i64
  get OutputZeroTime(): Deno.PointerValue {
    return Number(this.view.getBigInt64(0, true));
  }

  // 0x08: i32
  get Rate(): number {
    return this.view.getInt32(8, true);
  }

  // 0x0c: pad4

  // 0x00: i64
  set OutputZeroTime(value: Deno.PointerValue) {
    this.view.setBigInt64(0, BigInt(value), true);
  }

  // 0x08: i32
  set Rate(value: number) {
    this.view.setInt32(8, value, true);
  }

  // 0x0c: pad4
}

/**
 * Windows.Win32.Media.DirectShow.AM_DVD_ChangeRate (size: 24)
 */
export interface AM_DVD_ChangeRate {
  /** i64 */
  StartInTime: Deno.PointerValue;
  /** i64 */
  StartOutTime: Deno.PointerValue;
  /** i32 */
  Rate: number;
}

export const sizeofAM_DVD_ChangeRate = 24;

export function allocAM_DVD_ChangeRate(data?: Partial<AM_DVD_ChangeRate>): Uint8Array {
  const buf = new Uint8Array(sizeofAM_DVD_ChangeRate);
  const view = new DataView(buf.buffer);
  // 0x00: i64
  if (data?.StartInTime !== undefined) view.setBigInt64(0, BigInt(data.StartInTime), true);
  // 0x08: i64
  if (data?.StartOutTime !== undefined) view.setBigInt64(8, BigInt(data.StartOutTime), true);
  // 0x10: i32
  if (data?.Rate !== undefined) view.setInt32(16, Number(data.Rate), true);
  // 0x14: pad4
  return buf;
}

export class AM_DVD_ChangeRateView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: i64
  get StartInTime(): Deno.PointerValue {
    return Number(this.view.getBigInt64(0, true));
  }

  // 0x08: i64
  get StartOutTime(): Deno.PointerValue {
    return Number(this.view.getBigInt64(8, true));
  }

  // 0x10: i32
  get Rate(): number {
    return this.view.getInt32(16, true);
  }

  // 0x14: pad4

  // 0x00: i64
  set StartInTime(value: Deno.PointerValue) {
    this.view.setBigInt64(0, BigInt(value), true);
  }

  // 0x08: i64
  set StartOutTime(value: Deno.PointerValue) {
    this.view.setBigInt64(8, BigInt(value), true);
  }

  // 0x10: i32
  set Rate(value: number) {
    this.view.setInt32(16, value, true);
  }

  // 0x14: pad4
}

/**
 * Windows.Win32.Media.DirectShow.MP_PARAMINFO (size: 40)
 */
export interface MP_PARAMINFO {
  /** Windows.Win32.Media.DirectShow.MP_TYPE */
  mpType: MP_TYPE;
  /** u32 */
  mopCaps: number;
  /** f32 */
  mpdMinValue: number;
  /** f32 */
  mpdMaxValue: number;
  /** f32 */
  mpdNeutralValue: number;
  /** array */
  szUnitText: Deno.PointerValue | null;
  /** array */
  szLabel: Deno.PointerValue | null;
}

export const sizeofMP_PARAMINFO = 40;

export function allocMP_PARAMINFO(data?: Partial<MP_PARAMINFO>): Uint8Array {
  const buf = new Uint8Array(sizeofMP_PARAMINFO);
  const view = new DataView(buf.buffer);
  // 0x00: i32
  if (data?.mpType !== undefined) view.setInt32(0, Number(data.mpType), true);
  // 0x04: u32
  if (data?.mopCaps !== undefined) view.setUint32(4, Number(data.mopCaps), true);
  // 0x08: f32
  if (data?.mpdMinValue !== undefined) view.setFloat32(8, Number(data.mpdMinValue), true);
  // 0x0c: f32
  if (data?.mpdMaxValue !== undefined) view.setFloat32(12, Number(data.mpdMaxValue), true);
  // 0x10: f32
  if (data?.mpdNeutralValue !== undefined) view.setFloat32(16, Number(data.mpdNeutralValue), true);
  // 0x14: pad4
  // 0x18: pointer
  if (data?.szUnitText !== undefined) view.setBigUint64(24, data.szUnitText === null ? 0n : BigInt(util.toPointer(data.szUnitText)), true);
  // 0x20: pointer
  if (data?.szLabel !== undefined) view.setBigUint64(32, data.szLabel === null ? 0n : BigInt(util.toPointer(data.szLabel)), true);
  return buf;
}

export class MP_PARAMINFOView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: i32
  get mpType(): number {
    return this.view.getInt32(0, true);
  }

  // 0x04: u32
  get mopCaps(): number {
    return this.view.getUint32(4, true);
  }

  // 0x08: f32
  get mpdMinValue(): number {
    return this.view.getFloat32(8, true);
  }

  // 0x0c: f32
  get mpdMaxValue(): number {
    return this.view.getFloat32(12, true);
  }

  // 0x10: f32
  get mpdNeutralValue(): number {
    return this.view.getFloat32(16, true);
  }

  // 0x14: pad4

  // 0x18: pointer
  get szUnitText(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(24, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x20: pointer
  get szLabel(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(32, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: i32
  set mpType(value: number) {
    this.view.setInt32(0, value, true);
  }

  // 0x04: u32
  set mopCaps(value: number) {
    this.view.setUint32(4, value, true);
  }

  // 0x08: f32
  set mpdMinValue(value: number) {
    this.view.setFloat32(8, value, true);
  }

  // 0x0c: f32
  set mpdMaxValue(value: number) {
    this.view.setFloat32(12, value, true);
  }

  // 0x10: f32
  set mpdNeutralValue(value: number) {
    this.view.setFloat32(16, value, true);
  }

  // 0x14: pad4

  // 0x18: pointer
  set szUnitText(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(24, BigInt(util.toPointer(value)), true);
  }

  // 0x20: pointer
  set szLabel(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(32, BigInt(util.toPointer(value)), true);
  }
}

/**
 * Windows.Win32.Media.DirectShow.MP_ENVELOPE_SEGMENT (size: 32)
 */
export interface MP_ENVELOPE_SEGMENT {
  /** i64 */
  rtStart: Deno.PointerValue;
  /** i64 */
  rtEnd: Deno.PointerValue;
  /** f32 */
  valStart: number;
  /** f32 */
  valEnd: number;
  /** Windows.Win32.Media.DirectShow.MP_CURVE_TYPE */
  iCurve: MP_CURVE_TYPE;
  /** u32 */
  flags: number;
}

export const sizeofMP_ENVELOPE_SEGMENT = 32;

export function allocMP_ENVELOPE_SEGMENT(data?: Partial<MP_ENVELOPE_SEGMENT>): Uint8Array {
  const buf = new Uint8Array(sizeofMP_ENVELOPE_SEGMENT);
  const view = new DataView(buf.buffer);
  // 0x00: i64
  if (data?.rtStart !== undefined) view.setBigInt64(0, BigInt(data.rtStart), true);
  // 0x08: i64
  if (data?.rtEnd !== undefined) view.setBigInt64(8, BigInt(data.rtEnd), true);
  // 0x10: f32
  if (data?.valStart !== undefined) view.setFloat32(16, Number(data.valStart), true);
  // 0x14: f32
  if (data?.valEnd !== undefined) view.setFloat32(20, Number(data.valEnd), true);
  // 0x18: i32
  if (data?.iCurve !== undefined) view.setInt32(24, Number(data.iCurve), true);
  // 0x1c: u32
  if (data?.flags !== undefined) view.setUint32(28, Number(data.flags), true);
  return buf;
}

export class MP_ENVELOPE_SEGMENTView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: i64
  get rtStart(): Deno.PointerValue {
    return Number(this.view.getBigInt64(0, true));
  }

  // 0x08: i64
  get rtEnd(): Deno.PointerValue {
    return Number(this.view.getBigInt64(8, true));
  }

  // 0x10: f32
  get valStart(): number {
    return this.view.getFloat32(16, true);
  }

  // 0x14: f32
  get valEnd(): number {
    return this.view.getFloat32(20, true);
  }

  // 0x18: i32
  get iCurve(): number {
    return this.view.getInt32(24, true);
  }

  // 0x1c: u32
  get flags(): number {
    return this.view.getUint32(28, true);
  }

  // 0x00: i64
  set rtStart(value: Deno.PointerValue) {
    this.view.setBigInt64(0, BigInt(value), true);
  }

  // 0x08: i64
  set rtEnd(value: Deno.PointerValue) {
    this.view.setBigInt64(8, BigInt(value), true);
  }

  // 0x10: f32
  set valStart(value: number) {
    this.view.setFloat32(16, value, true);
  }

  // 0x14: f32
  set valEnd(value: number) {
    this.view.setFloat32(20, value, true);
  }

  // 0x18: i32
  set iCurve(value: number) {
    this.view.setInt32(24, value, true);
  }

  // 0x1c: u32
  set flags(value: number) {
    this.view.setUint32(28, value, true);
  }
}

/**
 * Windows.Win32.Media.DirectShow.VFW_FILTERLIST (size: 16)
 */
export interface VFW_FILTERLIST {
  /** u32 */
  cFilters: number;
  /** array */
  aClsId: Deno.PointerValue | null;
}

export const sizeofVFW_FILTERLIST = 16;

export function allocVFW_FILTERLIST(data?: Partial<VFW_FILTERLIST>): Uint8Array {
  const buf = new Uint8Array(sizeofVFW_FILTERLIST);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.cFilters !== undefined) view.setUint32(0, Number(data.cFilters), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.aClsId !== undefined) view.setBigUint64(8, data.aClsId === null ? 0n : BigInt(util.toPointer(data.aClsId)), true);
  return buf;
}

export class VFW_FILTERLISTView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get cFilters(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  get aClsId(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(8, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: u32
  set cFilters(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  set aClsId(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(8, BigInt(util.toPointer(value)), true);
  }
}

/**
 * Windows.Win32.Media.MediaFoundation.DXVA2_ExtendedFormat (size: 8)
 */
export interface DXVA2_ExtendedFormat {
  /** _Anonymous_e__Union */
  Anonymous: Uint8Array | Deno.PointerValue | null;
}

export const sizeofDXVA2_ExtendedFormat = 8;

export function allocDXVA2_ExtendedFormat(data?: Partial<DXVA2_ExtendedFormat>): Uint8Array {
  const buf = new Uint8Array(sizeofDXVA2_ExtendedFormat);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.Anonymous !== undefined) view.setBigUint64(0, data.Anonymous === null ? 0n : BigInt(util.toPointer(data.Anonymous)), true);
  return buf;
}

export class DXVA2_ExtendedFormatView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get Anonymous(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(0, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: pointer
  set Anonymous(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(0, BigInt(util.toPointer(value)), true);
  }
}

/**
 * Windows.Win32.Media.MediaFoundation.DXVA2_Fixed32 (size: 8)
 */
export interface DXVA2_Fixed32 {
  /** _Anonymous_e__Union */
  Anonymous: Uint8Array | Deno.PointerValue | null;
}

export const sizeofDXVA2_Fixed32 = 8;

export function allocDXVA2_Fixed32(data?: Partial<DXVA2_Fixed32>): Uint8Array {
  const buf = new Uint8Array(sizeofDXVA2_Fixed32);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.Anonymous !== undefined) view.setBigUint64(0, data.Anonymous === null ? 0n : BigInt(util.toPointer(data.Anonymous)), true);
  return buf;
}

export class DXVA2_Fixed32View {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get Anonymous(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(0, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: pointer
  set Anonymous(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(0, BigInt(util.toPointer(value)), true);
  }
}

/**
 * Windows.Win32.Media.DirectShow.DXVA2_VIDEOSAMPLE (size: 72)
 */
export interface DXVA2_VIDEOSAMPLE {
  /** i64 */
  Start: Deno.PointerValue;
  /** i64 */
  End: Deno.PointerValue;
  /** Windows.Win32.Media.MediaFoundation.DXVA2_ExtendedFormat */
  SampleFormat: Uint8Array | Deno.PointerValue | null;
  /** u32 */
  SampleFlags: number;
  /** ptr */
  SrcResource: Deno.PointerValue | Uint8Array | null;
  /** Windows.Win32.Foundation.RECT */
  SrcRect: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Foundation.RECT */
  DstRect: Uint8Array | Deno.PointerValue | null;
  /** array */
  Pal: Deno.PointerValue | null;
  /** Windows.Win32.Media.MediaFoundation.DXVA2_Fixed32 */
  PlanarAlpha: Uint8Array | Deno.PointerValue | null;
}

export const sizeofDXVA2_VIDEOSAMPLE = 72;

export function allocDXVA2_VIDEOSAMPLE(data?: Partial<DXVA2_VIDEOSAMPLE>): Uint8Array {
  const buf = new Uint8Array(sizeofDXVA2_VIDEOSAMPLE);
  const view = new DataView(buf.buffer);
  // 0x00: i64
  if (data?.Start !== undefined) view.setBigInt64(0, BigInt(data.Start), true);
  // 0x08: i64
  if (data?.End !== undefined) view.setBigInt64(8, BigInt(data.End), true);
  // 0x10: pointer
  if (data?.SampleFormat !== undefined) view.setBigUint64(16, data.SampleFormat === null ? 0n : BigInt(util.toPointer(data.SampleFormat)), true);
  // 0x18: u32
  if (data?.SampleFlags !== undefined) view.setUint32(24, Number(data.SampleFlags), true);
  // 0x1c: pad4
  // 0x20: pointer
  if (data?.SrcResource !== undefined) view.setBigUint64(32, data.SrcResource === null ? 0n : BigInt(util.toPointer(data.SrcResource)), true);
  // 0x28: pointer
  if (data?.SrcRect !== undefined) view.setBigUint64(40, data.SrcRect === null ? 0n : BigInt(util.toPointer(data.SrcRect)), true);
  // 0x30: pointer
  if (data?.DstRect !== undefined) view.setBigUint64(48, data.DstRect === null ? 0n : BigInt(util.toPointer(data.DstRect)), true);
  // 0x38: pointer
  if (data?.Pal !== undefined) view.setBigUint64(56, data.Pal === null ? 0n : BigInt(util.toPointer(data.Pal)), true);
  // 0x40: pointer
  if (data?.PlanarAlpha !== undefined) view.setBigUint64(64, data.PlanarAlpha === null ? 0n : BigInt(util.toPointer(data.PlanarAlpha)), true);
  return buf;
}

export class DXVA2_VIDEOSAMPLEView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: i64
  get Start(): Deno.PointerValue {
    return Number(this.view.getBigInt64(0, true));
  }

  // 0x08: i64
  get End(): Deno.PointerValue {
    return Number(this.view.getBigInt64(8, true));
  }

  // 0x10: pointer
  get SampleFormat(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(16, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x18: u32
  get SampleFlags(): number {
    return this.view.getUint32(24, true);
  }

  // 0x1c: pad4

  // 0x20: pointer
  get SrcResource(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(32, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x28: pointer
  get SrcRect(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(40, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x30: pointer
  get DstRect(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(48, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x38: pointer
  get Pal(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(56, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x40: pointer
  get PlanarAlpha(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(64, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: i64
  set Start(value: Deno.PointerValue) {
    this.view.setBigInt64(0, BigInt(value), true);
  }

  // 0x08: i64
  set End(value: Deno.PointerValue) {
    this.view.setBigInt64(8, BigInt(value), true);
  }

  // 0x10: pointer
  set SampleFormat(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(16, BigInt(util.toPointer(value)), true);
  }

  // 0x18: u32
  set SampleFlags(value: number) {
    this.view.setUint32(24, value, true);
  }

  // 0x1c: pad4

  // 0x20: pointer
  set SrcResource(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(32, BigInt(util.toPointer(value)), true);
  }

  // 0x28: pointer
  set SrcRect(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(40, BigInt(util.toPointer(value)), true);
  }

  // 0x30: pointer
  set DstRect(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(48, BigInt(util.toPointer(value)), true);
  }

  // 0x38: pointer
  set Pal(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(56, BigInt(util.toPointer(value)), true);
  }

  // 0x40: pointer
  set PlanarAlpha(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(64, BigInt(util.toPointer(value)), true);
  }
}

/**
 * Windows.Win32.Media.MediaFoundation.DXVA2_AYUVSample16 (size: 8)
 */
export interface DXVA2_AYUVSample16 {
  /** u16 */
  Cr: number;
  /** u16 */
  Cb: number;
  /** u16 */
  Y: number;
  /** u16 */
  Alpha: number;
}

export const sizeofDXVA2_AYUVSample16 = 8;

export function allocDXVA2_AYUVSample16(data?: Partial<DXVA2_AYUVSample16>): Uint8Array {
  const buf = new Uint8Array(sizeofDXVA2_AYUVSample16);
  const view = new DataView(buf.buffer);
  // 0x00: u16
  if (data?.Cr !== undefined) view.setUint16(0, Number(data.Cr), true);
  // 0x02: u16
  if (data?.Cb !== undefined) view.setUint16(2, Number(data.Cb), true);
  // 0x04: u16
  if (data?.Y !== undefined) view.setUint16(4, Number(data.Y), true);
  // 0x06: u16
  if (data?.Alpha !== undefined) view.setUint16(6, Number(data.Alpha), true);
  return buf;
}

export class DXVA2_AYUVSample16View {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u16
  get Cr(): number {
    return this.view.getUint16(0, true);
  }

  // 0x02: u16
  get Cb(): number {
    return this.view.getUint16(2, true);
  }

  // 0x04: u16
  get Y(): number {
    return this.view.getUint16(4, true);
  }

  // 0x06: u16
  get Alpha(): number {
    return this.view.getUint16(6, true);
  }

  // 0x00: u16
  set Cr(value: number) {
    this.view.setUint16(0, value, true);
  }

  // 0x02: u16
  set Cb(value: number) {
    this.view.setUint16(2, value, true);
  }

  // 0x04: u16
  set Y(value: number) {
    this.view.setUint16(4, value, true);
  }

  // 0x06: u16
  set Alpha(value: number) {
    this.view.setUint16(6, value, true);
  }
}

/**
 * Windows.Win32.Media.MediaFoundation.DXVA2_ProcAmpValues (size: 32)
 */
export interface DXVA2_ProcAmpValues {
  /** Windows.Win32.Media.MediaFoundation.DXVA2_Fixed32 */
  Brightness: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Media.MediaFoundation.DXVA2_Fixed32 */
  Contrast: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Media.MediaFoundation.DXVA2_Fixed32 */
  Hue: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Media.MediaFoundation.DXVA2_Fixed32 */
  Saturation: Uint8Array | Deno.PointerValue | null;
}

export const sizeofDXVA2_ProcAmpValues = 32;

export function allocDXVA2_ProcAmpValues(data?: Partial<DXVA2_ProcAmpValues>): Uint8Array {
  const buf = new Uint8Array(sizeofDXVA2_ProcAmpValues);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.Brightness !== undefined) view.setBigUint64(0, data.Brightness === null ? 0n : BigInt(util.toPointer(data.Brightness)), true);
  // 0x08: pointer
  if (data?.Contrast !== undefined) view.setBigUint64(8, data.Contrast === null ? 0n : BigInt(util.toPointer(data.Contrast)), true);
  // 0x10: pointer
  if (data?.Hue !== undefined) view.setBigUint64(16, data.Hue === null ? 0n : BigInt(util.toPointer(data.Hue)), true);
  // 0x18: pointer
  if (data?.Saturation !== undefined) view.setBigUint64(24, data.Saturation === null ? 0n : BigInt(util.toPointer(data.Saturation)), true);
  return buf;
}

export class DXVA2_ProcAmpValuesView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get Brightness(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(0, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x08: pointer
  get Contrast(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(8, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x10: pointer
  get Hue(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(16, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x18: pointer
  get Saturation(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(24, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: pointer
  set Brightness(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(0, BigInt(util.toPointer(value)), true);
  }

  // 0x08: pointer
  set Contrast(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(8, BigInt(util.toPointer(value)), true);
  }

  // 0x10: pointer
  set Hue(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(16, BigInt(util.toPointer(value)), true);
  }

  // 0x18: pointer
  set Saturation(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(24, BigInt(util.toPointer(value)), true);
  }
}

/**
 * Windows.Win32.Media.MediaFoundation.DXVA2_FilterValues (size: 24)
 */
export interface DXVA2_FilterValues {
  /** Windows.Win32.Media.MediaFoundation.DXVA2_Fixed32 */
  Level: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Media.MediaFoundation.DXVA2_Fixed32 */
  Threshold: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Media.MediaFoundation.DXVA2_Fixed32 */
  Radius: Uint8Array | Deno.PointerValue | null;
}

export const sizeofDXVA2_FilterValues = 24;

export function allocDXVA2_FilterValues(data?: Partial<DXVA2_FilterValues>): Uint8Array {
  const buf = new Uint8Array(sizeofDXVA2_FilterValues);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.Level !== undefined) view.setBigUint64(0, data.Level === null ? 0n : BigInt(util.toPointer(data.Level)), true);
  // 0x08: pointer
  if (data?.Threshold !== undefined) view.setBigUint64(8, data.Threshold === null ? 0n : BigInt(util.toPointer(data.Threshold)), true);
  // 0x10: pointer
  if (data?.Radius !== undefined) view.setBigUint64(16, data.Radius === null ? 0n : BigInt(util.toPointer(data.Radius)), true);
  return buf;
}

export class DXVA2_FilterValuesView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get Level(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(0, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x08: pointer
  get Threshold(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(8, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x10: pointer
  get Radius(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(16, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: pointer
  set Level(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(0, BigInt(util.toPointer(value)), true);
  }

  // 0x08: pointer
  set Threshold(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(8, BigInt(util.toPointer(value)), true);
  }

  // 0x10: pointer
  set Radius(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(16, BigInt(util.toPointer(value)), true);
  }
}

/**
 * Windows.Win32.Media.DirectShow.DXVA2_VIDEOPROCESSBLT (size: 120)
 */
export interface DXVA2_VIDEOPROCESSBLT {
  /** i64 */
  TargetFrame: Deno.PointerValue;
  /** Windows.Win32.Foundation.RECT */
  TargetRect: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Foundation.SIZE */
  ConstrictionSize: Uint8Array | Deno.PointerValue | null;
  /** u32 */
  StreamingFlags: number;
  /** Windows.Win32.Media.MediaFoundation.DXVA2_AYUVSample16 */
  BackgroundColor: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Media.MediaFoundation.DXVA2_ExtendedFormat */
  DestFormat: Uint8Array | Deno.PointerValue | null;
  /** u32 */
  DestFlags: number;
  /** Windows.Win32.Media.MediaFoundation.DXVA2_ProcAmpValues */
  ProcAmpValues: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Media.MediaFoundation.DXVA2_Fixed32 */
  Alpha: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Media.MediaFoundation.DXVA2_FilterValues */
  NoiseFilterLuma: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Media.MediaFoundation.DXVA2_FilterValues */
  NoiseFilterChroma: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Media.MediaFoundation.DXVA2_FilterValues */
  DetailFilterLuma: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Media.MediaFoundation.DXVA2_FilterValues */
  DetailFilterChroma: Uint8Array | Deno.PointerValue | null;
  /** ptr */
  pSrcSurfaces: Deno.PointerValue | Uint8Array | null;
  /** u32 */
  NumSrcSurfaces: number;
}

export const sizeofDXVA2_VIDEOPROCESSBLT = 120;

export function allocDXVA2_VIDEOPROCESSBLT(data?: Partial<DXVA2_VIDEOPROCESSBLT>): Uint8Array {
  const buf = new Uint8Array(sizeofDXVA2_VIDEOPROCESSBLT);
  const view = new DataView(buf.buffer);
  // 0x00: i64
  if (data?.TargetFrame !== undefined) view.setBigInt64(0, BigInt(data.TargetFrame), true);
  // 0x08: pointer
  if (data?.TargetRect !== undefined) view.setBigUint64(8, data.TargetRect === null ? 0n : BigInt(util.toPointer(data.TargetRect)), true);
  // 0x10: pointer
  if (data?.ConstrictionSize !== undefined) view.setBigUint64(16, data.ConstrictionSize === null ? 0n : BigInt(util.toPointer(data.ConstrictionSize)), true);
  // 0x18: u32
  if (data?.StreamingFlags !== undefined) view.setUint32(24, Number(data.StreamingFlags), true);
  // 0x1c: pad4
  // 0x20: pointer
  if (data?.BackgroundColor !== undefined) view.setBigUint64(32, data.BackgroundColor === null ? 0n : BigInt(util.toPointer(data.BackgroundColor)), true);
  // 0x28: pointer
  if (data?.DestFormat !== undefined) view.setBigUint64(40, data.DestFormat === null ? 0n : BigInt(util.toPointer(data.DestFormat)), true);
  // 0x30: u32
  if (data?.DestFlags !== undefined) view.setUint32(48, Number(data.DestFlags), true);
  // 0x34: pad4
  // 0x38: pointer
  if (data?.ProcAmpValues !== undefined) view.setBigUint64(56, data.ProcAmpValues === null ? 0n : BigInt(util.toPointer(data.ProcAmpValues)), true);
  // 0x40: pointer
  if (data?.Alpha !== undefined) view.setBigUint64(64, data.Alpha === null ? 0n : BigInt(util.toPointer(data.Alpha)), true);
  // 0x48: pointer
  if (data?.NoiseFilterLuma !== undefined) view.setBigUint64(72, data.NoiseFilterLuma === null ? 0n : BigInt(util.toPointer(data.NoiseFilterLuma)), true);
  // 0x50: pointer
  if (data?.NoiseFilterChroma !== undefined) view.setBigUint64(80, data.NoiseFilterChroma === null ? 0n : BigInt(util.toPointer(data.NoiseFilterChroma)), true);
  // 0x58: pointer
  if (data?.DetailFilterLuma !== undefined) view.setBigUint64(88, data.DetailFilterLuma === null ? 0n : BigInt(util.toPointer(data.DetailFilterLuma)), true);
  // 0x60: pointer
  if (data?.DetailFilterChroma !== undefined) view.setBigUint64(96, data.DetailFilterChroma === null ? 0n : BigInt(util.toPointer(data.DetailFilterChroma)), true);
  // 0x68: pointer
  if (data?.pSrcSurfaces !== undefined) view.setBigUint64(104, data.pSrcSurfaces === null ? 0n : BigInt(util.toPointer(data.pSrcSurfaces)), true);
  // 0x70: u32
  if (data?.NumSrcSurfaces !== undefined) view.setUint32(112, Number(data.NumSrcSurfaces), true);
  // 0x74: pad4
  return buf;
}

export class DXVA2_VIDEOPROCESSBLTView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: i64
  get TargetFrame(): Deno.PointerValue {
    return Number(this.view.getBigInt64(0, true));
  }

  // 0x08: pointer
  get TargetRect(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(8, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x10: pointer
  get ConstrictionSize(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(16, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x18: u32
  get StreamingFlags(): number {
    return this.view.getUint32(24, true);
  }

  // 0x1c: pad4

  // 0x20: pointer
  get BackgroundColor(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(32, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x28: pointer
  get DestFormat(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(40, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x30: u32
  get DestFlags(): number {
    return this.view.getUint32(48, true);
  }

  // 0x34: pad4

  // 0x38: pointer
  get ProcAmpValues(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(56, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x40: pointer
  get Alpha(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(64, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x48: pointer
  get NoiseFilterLuma(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(72, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x50: pointer
  get NoiseFilterChroma(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(80, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x58: pointer
  get DetailFilterLuma(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(88, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x60: pointer
  get DetailFilterChroma(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(96, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x68: pointer
  get pSrcSurfaces(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(104, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x70: u32
  get NumSrcSurfaces(): number {
    return this.view.getUint32(112, true);
  }

  // 0x74: pad4

  // 0x00: i64
  set TargetFrame(value: Deno.PointerValue) {
    this.view.setBigInt64(0, BigInt(value), true);
  }

  // 0x08: pointer
  set TargetRect(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(8, BigInt(util.toPointer(value)), true);
  }

  // 0x10: pointer
  set ConstrictionSize(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(16, BigInt(util.toPointer(value)), true);
  }

  // 0x18: u32
  set StreamingFlags(value: number) {
    this.view.setUint32(24, value, true);
  }

  // 0x1c: pad4

  // 0x20: pointer
  set BackgroundColor(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(32, BigInt(util.toPointer(value)), true);
  }

  // 0x28: pointer
  set DestFormat(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(40, BigInt(util.toPointer(value)), true);
  }

  // 0x30: u32
  set DestFlags(value: number) {
    this.view.setUint32(48, value, true);
  }

  // 0x34: pad4

  // 0x38: pointer
  set ProcAmpValues(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(56, BigInt(util.toPointer(value)), true);
  }

  // 0x40: pointer
  set Alpha(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(64, BigInt(util.toPointer(value)), true);
  }

  // 0x48: pointer
  set NoiseFilterLuma(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(72, BigInt(util.toPointer(value)), true);
  }

  // 0x50: pointer
  set NoiseFilterChroma(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(80, BigInt(util.toPointer(value)), true);
  }

  // 0x58: pointer
  set DetailFilterLuma(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(88, BigInt(util.toPointer(value)), true);
  }

  // 0x60: pointer
  set DetailFilterChroma(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(96, BigInt(util.toPointer(value)), true);
  }

  // 0x68: pointer
  set pSrcSurfaces(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(104, BigInt(util.toPointer(value)), true);
  }

  // 0x70: u32
  set NumSrcSurfaces(value: number) {
    this.view.setUint32(112, value, true);
  }

  // 0x74: pad4
}

/**
 * Windows.Win32.Media.DirectShow.DXVA2SW_CALLBACKS (size: 112)
 */
export interface DXVA2SW_CALLBACKS {
  /** u32 */
  Size: number;
  /** Windows.Win32.Media.DirectShow.PDXVA2SW_GETVIDEOPROCESSORRENDERTARGETCOUNT */
  GetVideoProcessorRenderTargetCount: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Media.DirectShow.PDXVA2SW_GETVIDEOPROCESSORRENDERTARGETS */
  GetVideoProcessorRenderTargets: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Media.DirectShow.PDXVA2SW_GETVIDEOPROCESSORCAPS */
  GetVideoProcessorCaps: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Media.DirectShow.PDXVA2SW_GETVIDEOPROCESSORSUBSTREAMFORMATCOUNT */
  GetVideoProcessorSubStreamFormatCount: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Media.DirectShow.PDXVA2SW_GETVIDEOPROCESSORSUBSTREAMFORMATS */
  GetVideoProcessorSubStreamFormats: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Media.DirectShow.PDXVA2SW_GETPROCAMPRANGE */
  GetProcAmpRange: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Media.DirectShow.PDXVA2SW_GETFILTERPROPERTYRANGE */
  GetFilterPropertyRange: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Media.DirectShow.PDXVA2SW_CREATEVIDEOPROCESSDEVICE */
  CreateVideoProcessDevice: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Media.DirectShow.PDXVA2SW_DESTROYVIDEOPROCESSDEVICE */
  DestroyVideoProcessDevice: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Media.DirectShow.PDXVA2SW_VIDEOPROCESSBEGINFRAME */
  VideoProcessBeginFrame: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Media.DirectShow.PDXVA2SW_VIDEOPROCESSENDFRAME */
  VideoProcessEndFrame: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Media.DirectShow.PDXVA2SW_VIDEOPROCESSSETRENDERTARGET */
  VideoProcessSetRenderTarget: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Media.DirectShow.PDXVA2SW_VIDEOPROCESSBLT */
  VideoProcessBlt: Uint8Array | Deno.PointerValue | null;
}

export const sizeofDXVA2SW_CALLBACKS = 112;

export function allocDXVA2SW_CALLBACKS(data?: Partial<DXVA2SW_CALLBACKS>): Uint8Array {
  const buf = new Uint8Array(sizeofDXVA2SW_CALLBACKS);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.Size !== undefined) view.setUint32(0, Number(data.Size), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.GetVideoProcessorRenderTargetCount !== undefined) view.setBigUint64(8, data.GetVideoProcessorRenderTargetCount === null ? 0n : BigInt(util.toPointer(data.GetVideoProcessorRenderTargetCount)), true);
  // 0x10: pointer
  if (data?.GetVideoProcessorRenderTargets !== undefined) view.setBigUint64(16, data.GetVideoProcessorRenderTargets === null ? 0n : BigInt(util.toPointer(data.GetVideoProcessorRenderTargets)), true);
  // 0x18: pointer
  if (data?.GetVideoProcessorCaps !== undefined) view.setBigUint64(24, data.GetVideoProcessorCaps === null ? 0n : BigInt(util.toPointer(data.GetVideoProcessorCaps)), true);
  // 0x20: pointer
  if (data?.GetVideoProcessorSubStreamFormatCount !== undefined) view.setBigUint64(32, data.GetVideoProcessorSubStreamFormatCount === null ? 0n : BigInt(util.toPointer(data.GetVideoProcessorSubStreamFormatCount)), true);
  // 0x28: pointer
  if (data?.GetVideoProcessorSubStreamFormats !== undefined) view.setBigUint64(40, data.GetVideoProcessorSubStreamFormats === null ? 0n : BigInt(util.toPointer(data.GetVideoProcessorSubStreamFormats)), true);
  // 0x30: pointer
  if (data?.GetProcAmpRange !== undefined) view.setBigUint64(48, data.GetProcAmpRange === null ? 0n : BigInt(util.toPointer(data.GetProcAmpRange)), true);
  // 0x38: pointer
  if (data?.GetFilterPropertyRange !== undefined) view.setBigUint64(56, data.GetFilterPropertyRange === null ? 0n : BigInt(util.toPointer(data.GetFilterPropertyRange)), true);
  // 0x40: pointer
  if (data?.CreateVideoProcessDevice !== undefined) view.setBigUint64(64, data.CreateVideoProcessDevice === null ? 0n : BigInt(util.toPointer(data.CreateVideoProcessDevice)), true);
  // 0x48: pointer
  if (data?.DestroyVideoProcessDevice !== undefined) view.setBigUint64(72, data.DestroyVideoProcessDevice === null ? 0n : BigInt(util.toPointer(data.DestroyVideoProcessDevice)), true);
  // 0x50: pointer
  if (data?.VideoProcessBeginFrame !== undefined) view.setBigUint64(80, data.VideoProcessBeginFrame === null ? 0n : BigInt(util.toPointer(data.VideoProcessBeginFrame)), true);
  // 0x58: pointer
  if (data?.VideoProcessEndFrame !== undefined) view.setBigUint64(88, data.VideoProcessEndFrame === null ? 0n : BigInt(util.toPointer(data.VideoProcessEndFrame)), true);
  // 0x60: pointer
  if (data?.VideoProcessSetRenderTarget !== undefined) view.setBigUint64(96, data.VideoProcessSetRenderTarget === null ? 0n : BigInt(util.toPointer(data.VideoProcessSetRenderTarget)), true);
  // 0x68: pointer
  if (data?.VideoProcessBlt !== undefined) view.setBigUint64(104, data.VideoProcessBlt === null ? 0n : BigInt(util.toPointer(data.VideoProcessBlt)), true);
  return buf;
}

export class DXVA2SW_CALLBACKSView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get Size(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  get GetVideoProcessorRenderTargetCount(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(8, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x10: pointer
  get GetVideoProcessorRenderTargets(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(16, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x18: pointer
  get GetVideoProcessorCaps(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(24, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x20: pointer
  get GetVideoProcessorSubStreamFormatCount(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(32, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x28: pointer
  get GetVideoProcessorSubStreamFormats(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(40, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x30: pointer
  get GetProcAmpRange(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(48, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x38: pointer
  get GetFilterPropertyRange(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(56, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x40: pointer
  get CreateVideoProcessDevice(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(64, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x48: pointer
  get DestroyVideoProcessDevice(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(72, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x50: pointer
  get VideoProcessBeginFrame(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(80, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x58: pointer
  get VideoProcessEndFrame(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(88, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x60: pointer
  get VideoProcessSetRenderTarget(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(96, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x68: pointer
  get VideoProcessBlt(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(104, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: u32
  set Size(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  set GetVideoProcessorRenderTargetCount(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(8, BigInt(util.toPointer(value)), true);
  }

  // 0x10: pointer
  set GetVideoProcessorRenderTargets(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(16, BigInt(util.toPointer(value)), true);
  }

  // 0x18: pointer
  set GetVideoProcessorCaps(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(24, BigInt(util.toPointer(value)), true);
  }

  // 0x20: pointer
  set GetVideoProcessorSubStreamFormatCount(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(32, BigInt(util.toPointer(value)), true);
  }

  // 0x28: pointer
  set GetVideoProcessorSubStreamFormats(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(40, BigInt(util.toPointer(value)), true);
  }

  // 0x30: pointer
  set GetProcAmpRange(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(48, BigInt(util.toPointer(value)), true);
  }

  // 0x38: pointer
  set GetFilterPropertyRange(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(56, BigInt(util.toPointer(value)), true);
  }

  // 0x40: pointer
  set CreateVideoProcessDevice(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(64, BigInt(util.toPointer(value)), true);
  }

  // 0x48: pointer
  set DestroyVideoProcessDevice(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(72, BigInt(util.toPointer(value)), true);
  }

  // 0x50: pointer
  set VideoProcessBeginFrame(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(80, BigInt(util.toPointer(value)), true);
  }

  // 0x58: pointer
  set VideoProcessEndFrame(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(88, BigInt(util.toPointer(value)), true);
  }

  // 0x60: pointer
  set VideoProcessSetRenderTarget(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(96, BigInt(util.toPointer(value)), true);
  }

  // 0x68: pointer
  set VideoProcessBlt(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(104, BigInt(util.toPointer(value)), true);
  }
}

/**
 * Windows.Win32.System.Diagnostics.Etw.EVENT_TRACE_HEADER (size: 56)
 */
export interface EVENT_TRACE_HEADER {
  /** u16 */
  Size: number;
  /** _Anonymous1_e__Union */
  Anonymous1: Uint8Array | Deno.PointerValue | null;
  /** _Anonymous2_e__Union */
  Anonymous2: Uint8Array | Deno.PointerValue | null;
  /** u32 */
  ThreadId: number;
  /** u32 */
  ProcessId: number;
  /** Windows.Win32.Foundation.LARGE_INTEGER */
  TimeStamp: Uint8Array | Deno.PointerValue | null;
  /** _Anonymous3_e__Union */
  Anonymous3: Uint8Array | Deno.PointerValue | null;
  /** _Anonymous4_e__Union */
  Anonymous4: Uint8Array | Deno.PointerValue | null;
}

export const sizeofEVENT_TRACE_HEADER = 56;

export function allocEVENT_TRACE_HEADER(data?: Partial<EVENT_TRACE_HEADER>): Uint8Array {
  const buf = new Uint8Array(sizeofEVENT_TRACE_HEADER);
  const view = new DataView(buf.buffer);
  // 0x00: u16
  if (data?.Size !== undefined) view.setUint16(0, Number(data.Size), true);
  // 0x02: pad6
  // 0x08: pointer
  if (data?.Anonymous1 !== undefined) view.setBigUint64(8, data.Anonymous1 === null ? 0n : BigInt(util.toPointer(data.Anonymous1)), true);
  // 0x10: pointer
  if (data?.Anonymous2 !== undefined) view.setBigUint64(16, data.Anonymous2 === null ? 0n : BigInt(util.toPointer(data.Anonymous2)), true);
  // 0x18: u32
  if (data?.ThreadId !== undefined) view.setUint32(24, Number(data.ThreadId), true);
  // 0x1c: u32
  if (data?.ProcessId !== undefined) view.setUint32(28, Number(data.ProcessId), true);
  // 0x20: pointer
  if (data?.TimeStamp !== undefined) view.setBigUint64(32, data.TimeStamp === null ? 0n : BigInt(util.toPointer(data.TimeStamp)), true);
  // 0x28: pointer
  if (data?.Anonymous3 !== undefined) view.setBigUint64(40, data.Anonymous3 === null ? 0n : BigInt(util.toPointer(data.Anonymous3)), true);
  // 0x30: pointer
  if (data?.Anonymous4 !== undefined) view.setBigUint64(48, data.Anonymous4 === null ? 0n : BigInt(util.toPointer(data.Anonymous4)), true);
  return buf;
}

export class EVENT_TRACE_HEADERView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u16
  get Size(): number {
    return this.view.getUint16(0, true);
  }

  // 0x02: pad6

  // 0x08: pointer
  get Anonymous1(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(8, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x10: pointer
  get Anonymous2(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(16, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x18: u32
  get ThreadId(): number {
    return this.view.getUint32(24, true);
  }

  // 0x1c: u32
  get ProcessId(): number {
    return this.view.getUint32(28, true);
  }

  // 0x20: pointer
  get TimeStamp(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(32, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x28: pointer
  get Anonymous3(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(40, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x30: pointer
  get Anonymous4(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(48, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: u16
  set Size(value: number) {
    this.view.setUint16(0, value, true);
  }

  // 0x02: pad6

  // 0x08: pointer
  set Anonymous1(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(8, BigInt(util.toPointer(value)), true);
  }

  // 0x10: pointer
  set Anonymous2(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(16, BigInt(util.toPointer(value)), true);
  }

  // 0x18: u32
  set ThreadId(value: number) {
    this.view.setUint32(24, value, true);
  }

  // 0x1c: u32
  set ProcessId(value: number) {
    this.view.setUint32(28, value, true);
  }

  // 0x20: pointer
  set TimeStamp(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(32, BigInt(util.toPointer(value)), true);
  }

  // 0x28: pointer
  set Anonymous3(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(40, BigInt(util.toPointer(value)), true);
  }

  // 0x30: pointer
  set Anonymous4(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(48, BigInt(util.toPointer(value)), true);
  }
}

/**
 * Windows.Win32.Media.DirectShow.DXVA2Trace_DecodeDevCreatedData (size: 48)
 */
export interface DXVA2Trace_DecodeDevCreatedData {
  /** Windows.Win32.System.Diagnostics.Etw.EVENT_TRACE_HEADER */
  wmiHeader: Uint8Array | Deno.PointerValue | null;
  /** u64 */
  pObject: Deno.PointerValue;
  /** u64 */
  pD3DDevice: Deno.PointerValue;
  /** System.Guid */
  DeviceGuid: Uint8Array | Deno.PointerValue | null;
  /** u32 */
  Width: number;
  /** u32 */
  Height: number;
  /** Windows.Win32.Foundation.BOOL */
  Enter: boolean;
}

export const sizeofDXVA2Trace_DecodeDevCreatedData = 48;

export function allocDXVA2Trace_DecodeDevCreatedData(data?: Partial<DXVA2Trace_DecodeDevCreatedData>): Uint8Array {
  const buf = new Uint8Array(sizeofDXVA2Trace_DecodeDevCreatedData);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.wmiHeader !== undefined) view.setBigUint64(0, data.wmiHeader === null ? 0n : BigInt(util.toPointer(data.wmiHeader)), true);
  // 0x08: u64
  if (data?.pObject !== undefined) view.setBigUint64(8, BigInt(data.pObject), true);
  // 0x10: u64
  if (data?.pD3DDevice !== undefined) view.setBigUint64(16, BigInt(data.pD3DDevice), true);
  // 0x18: pointer
  if (data?.DeviceGuid !== undefined) view.setBigUint64(24, data.DeviceGuid === null ? 0n : BigInt(util.toPointer(data.DeviceGuid)), true);
  // 0x20: u32
  if (data?.Width !== undefined) view.setUint32(32, Number(data.Width), true);
  // 0x24: u32
  if (data?.Height !== undefined) view.setUint32(36, Number(data.Height), true);
  // 0x28: i32
  if (data?.Enter !== undefined) view.setInt32(40, Number(data.Enter), true);
  // 0x2c: pad4
  return buf;
}

export class DXVA2Trace_DecodeDevCreatedDataView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get wmiHeader(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(0, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x08: u64
  get pObject(): Deno.PointerValue {
    return Number(this.view.getBigUint64(8, true));
  }

  // 0x10: u64
  get pD3DDevice(): Deno.PointerValue {
    return Number(this.view.getBigUint64(16, true));
  }

  // 0x18: pointer
  get DeviceGuid(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(24, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x20: u32
  get Width(): number {
    return this.view.getUint32(32, true);
  }

  // 0x24: u32
  get Height(): number {
    return this.view.getUint32(36, true);
  }

  // 0x28: i32
  get Enter(): number {
    return this.view.getInt32(40, true);
  }

  // 0x2c: pad4

  // 0x00: pointer
  set wmiHeader(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(0, BigInt(util.toPointer(value)), true);
  }

  // 0x08: u64
  set pObject(value: Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(value), true);
  }

  // 0x10: u64
  set pD3DDevice(value: Deno.PointerValue) {
    this.view.setBigUint64(16, BigInt(value), true);
  }

  // 0x18: pointer
  set DeviceGuid(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(24, BigInt(util.toPointer(value)), true);
  }

  // 0x20: u32
  set Width(value: number) {
    this.view.setUint32(32, value, true);
  }

  // 0x24: u32
  set Height(value: number) {
    this.view.setUint32(36, value, true);
  }

  // 0x28: i32
  set Enter(value: number) {
    this.view.setInt32(40, value, true);
  }

  // 0x2c: pad4
}

/**
 * Windows.Win32.Media.DirectShow.DXVA2Trace_DecodeDeviceData (size: 24)
 */
export interface DXVA2Trace_DecodeDeviceData {
  /** Windows.Win32.System.Diagnostics.Etw.EVENT_TRACE_HEADER */
  wmiHeader: Uint8Array | Deno.PointerValue | null;
  /** u64 */
  pObject: Deno.PointerValue;
  /** Windows.Win32.Foundation.BOOL */
  Enter: boolean;
}

export const sizeofDXVA2Trace_DecodeDeviceData = 24;

export function allocDXVA2Trace_DecodeDeviceData(data?: Partial<DXVA2Trace_DecodeDeviceData>): Uint8Array {
  const buf = new Uint8Array(sizeofDXVA2Trace_DecodeDeviceData);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.wmiHeader !== undefined) view.setBigUint64(0, data.wmiHeader === null ? 0n : BigInt(util.toPointer(data.wmiHeader)), true);
  // 0x08: u64
  if (data?.pObject !== undefined) view.setBigUint64(8, BigInt(data.pObject), true);
  // 0x10: i32
  if (data?.Enter !== undefined) view.setInt32(16, Number(data.Enter), true);
  // 0x14: pad4
  return buf;
}

export class DXVA2Trace_DecodeDeviceDataView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get wmiHeader(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(0, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x08: u64
  get pObject(): Deno.PointerValue {
    return Number(this.view.getBigUint64(8, true));
  }

  // 0x10: i32
  get Enter(): number {
    return this.view.getInt32(16, true);
  }

  // 0x14: pad4

  // 0x00: pointer
  set wmiHeader(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(0, BigInt(util.toPointer(value)), true);
  }

  // 0x08: u64
  set pObject(value: Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(value), true);
  }

  // 0x10: i32
  set Enter(value: number) {
    this.view.setInt32(16, value, true);
  }

  // 0x14: pad4
}

/**
 * Windows.Win32.Media.DirectShow.DXVA2Trace_DecodeDevBeginFrameData (size: 32)
 */
export interface DXVA2Trace_DecodeDevBeginFrameData {
  /** Windows.Win32.System.Diagnostics.Etw.EVENT_TRACE_HEADER */
  wmiHeader: Uint8Array | Deno.PointerValue | null;
  /** u64 */
  pObject: Deno.PointerValue;
  /** u64 */
  pRenderTarget: Deno.PointerValue;
  /** Windows.Win32.Foundation.BOOL */
  Enter: boolean;
}

export const sizeofDXVA2Trace_DecodeDevBeginFrameData = 32;

export function allocDXVA2Trace_DecodeDevBeginFrameData(data?: Partial<DXVA2Trace_DecodeDevBeginFrameData>): Uint8Array {
  const buf = new Uint8Array(sizeofDXVA2Trace_DecodeDevBeginFrameData);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.wmiHeader !== undefined) view.setBigUint64(0, data.wmiHeader === null ? 0n : BigInt(util.toPointer(data.wmiHeader)), true);
  // 0x08: u64
  if (data?.pObject !== undefined) view.setBigUint64(8, BigInt(data.pObject), true);
  // 0x10: u64
  if (data?.pRenderTarget !== undefined) view.setBigUint64(16, BigInt(data.pRenderTarget), true);
  // 0x18: i32
  if (data?.Enter !== undefined) view.setInt32(24, Number(data.Enter), true);
  // 0x1c: pad4
  return buf;
}

export class DXVA2Trace_DecodeDevBeginFrameDataView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get wmiHeader(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(0, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x08: u64
  get pObject(): Deno.PointerValue {
    return Number(this.view.getBigUint64(8, true));
  }

  // 0x10: u64
  get pRenderTarget(): Deno.PointerValue {
    return Number(this.view.getBigUint64(16, true));
  }

  // 0x18: i32
  get Enter(): number {
    return this.view.getInt32(24, true);
  }

  // 0x1c: pad4

  // 0x00: pointer
  set wmiHeader(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(0, BigInt(util.toPointer(value)), true);
  }

  // 0x08: u64
  set pObject(value: Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(value), true);
  }

  // 0x10: u64
  set pRenderTarget(value: Deno.PointerValue) {
    this.view.setBigUint64(16, BigInt(value), true);
  }

  // 0x18: i32
  set Enter(value: number) {
    this.view.setInt32(24, value, true);
  }

  // 0x1c: pad4
}

/**
 * Windows.Win32.Media.DirectShow.DXVA2Trace_DecodeDevGetBufferData (size: 24)
 */
export interface DXVA2Trace_DecodeDevGetBufferData {
  /** Windows.Win32.System.Diagnostics.Etw.EVENT_TRACE_HEADER */
  wmiHeader: Uint8Array | Deno.PointerValue | null;
  /** u64 */
  pObject: Deno.PointerValue;
  /** u32 */
  BufferType: number;
  /** Windows.Win32.Foundation.BOOL */
  Enter: boolean;
}

export const sizeofDXVA2Trace_DecodeDevGetBufferData = 24;

export function allocDXVA2Trace_DecodeDevGetBufferData(data?: Partial<DXVA2Trace_DecodeDevGetBufferData>): Uint8Array {
  const buf = new Uint8Array(sizeofDXVA2Trace_DecodeDevGetBufferData);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.wmiHeader !== undefined) view.setBigUint64(0, data.wmiHeader === null ? 0n : BigInt(util.toPointer(data.wmiHeader)), true);
  // 0x08: u64
  if (data?.pObject !== undefined) view.setBigUint64(8, BigInt(data.pObject), true);
  // 0x10: u32
  if (data?.BufferType !== undefined) view.setUint32(16, Number(data.BufferType), true);
  // 0x14: i32
  if (data?.Enter !== undefined) view.setInt32(20, Number(data.Enter), true);
  return buf;
}

export class DXVA2Trace_DecodeDevGetBufferDataView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get wmiHeader(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(0, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x08: u64
  get pObject(): Deno.PointerValue {
    return Number(this.view.getBigUint64(8, true));
  }

  // 0x10: u32
  get BufferType(): number {
    return this.view.getUint32(16, true);
  }

  // 0x14: i32
  get Enter(): number {
    return this.view.getInt32(20, true);
  }

  // 0x00: pointer
  set wmiHeader(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(0, BigInt(util.toPointer(value)), true);
  }

  // 0x08: u64
  set pObject(value: Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(value), true);
  }

  // 0x10: u32
  set BufferType(value: number) {
    this.view.setUint32(16, value, true);
  }

  // 0x14: i32
  set Enter(value: number) {
    this.view.setInt32(20, value, true);
  }
}

/**
 * Windows.Win32.Media.DirectShow.DXVA2Trace_VideoProcessDevCreatedData (size: 48)
 */
export interface DXVA2Trace_VideoProcessDevCreatedData {
  /** Windows.Win32.System.Diagnostics.Etw.EVENT_TRACE_HEADER */
  wmiHeader: Uint8Array | Deno.PointerValue | null;
  /** u64 */
  pObject: Deno.PointerValue;
  /** u64 */
  pD3DDevice: Deno.PointerValue;
  /** System.Guid */
  DeviceGuid: Uint8Array | Deno.PointerValue | null;
  /** u32 */
  RTFourCC: number;
  /** u32 */
  Width: number;
  /** u32 */
  Height: number;
  /** Windows.Win32.Foundation.BOOL */
  Enter: boolean;
}

export const sizeofDXVA2Trace_VideoProcessDevCreatedData = 48;

export function allocDXVA2Trace_VideoProcessDevCreatedData(data?: Partial<DXVA2Trace_VideoProcessDevCreatedData>): Uint8Array {
  const buf = new Uint8Array(sizeofDXVA2Trace_VideoProcessDevCreatedData);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.wmiHeader !== undefined) view.setBigUint64(0, data.wmiHeader === null ? 0n : BigInt(util.toPointer(data.wmiHeader)), true);
  // 0x08: u64
  if (data?.pObject !== undefined) view.setBigUint64(8, BigInt(data.pObject), true);
  // 0x10: u64
  if (data?.pD3DDevice !== undefined) view.setBigUint64(16, BigInt(data.pD3DDevice), true);
  // 0x18: pointer
  if (data?.DeviceGuid !== undefined) view.setBigUint64(24, data.DeviceGuid === null ? 0n : BigInt(util.toPointer(data.DeviceGuid)), true);
  // 0x20: u32
  if (data?.RTFourCC !== undefined) view.setUint32(32, Number(data.RTFourCC), true);
  // 0x24: u32
  if (data?.Width !== undefined) view.setUint32(36, Number(data.Width), true);
  // 0x28: u32
  if (data?.Height !== undefined) view.setUint32(40, Number(data.Height), true);
  // 0x2c: i32
  if (data?.Enter !== undefined) view.setInt32(44, Number(data.Enter), true);
  return buf;
}

export class DXVA2Trace_VideoProcessDevCreatedDataView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get wmiHeader(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(0, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x08: u64
  get pObject(): Deno.PointerValue {
    return Number(this.view.getBigUint64(8, true));
  }

  // 0x10: u64
  get pD3DDevice(): Deno.PointerValue {
    return Number(this.view.getBigUint64(16, true));
  }

  // 0x18: pointer
  get DeviceGuid(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(24, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x20: u32
  get RTFourCC(): number {
    return this.view.getUint32(32, true);
  }

  // 0x24: u32
  get Width(): number {
    return this.view.getUint32(36, true);
  }

  // 0x28: u32
  get Height(): number {
    return this.view.getUint32(40, true);
  }

  // 0x2c: i32
  get Enter(): number {
    return this.view.getInt32(44, true);
  }

  // 0x00: pointer
  set wmiHeader(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(0, BigInt(util.toPointer(value)), true);
  }

  // 0x08: u64
  set pObject(value: Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(value), true);
  }

  // 0x10: u64
  set pD3DDevice(value: Deno.PointerValue) {
    this.view.setBigUint64(16, BigInt(value), true);
  }

  // 0x18: pointer
  set DeviceGuid(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(24, BigInt(util.toPointer(value)), true);
  }

  // 0x20: u32
  set RTFourCC(value: number) {
    this.view.setUint32(32, value, true);
  }

  // 0x24: u32
  set Width(value: number) {
    this.view.setUint32(36, value, true);
  }

  // 0x28: u32
  set Height(value: number) {
    this.view.setUint32(40, value, true);
  }

  // 0x2c: i32
  set Enter(value: number) {
    this.view.setInt32(44, value, true);
  }
}

/**
 * Windows.Win32.Media.DirectShow.DXVA2Trace_VideoProcessDeviceData (size: 24)
 */
export interface DXVA2Trace_VideoProcessDeviceData {
  /** Windows.Win32.System.Diagnostics.Etw.EVENT_TRACE_HEADER */
  wmiHeader: Uint8Array | Deno.PointerValue | null;
  /** u64 */
  pObject: Deno.PointerValue;
  /** Windows.Win32.Foundation.BOOL */
  Enter: boolean;
}

export const sizeofDXVA2Trace_VideoProcessDeviceData = 24;

export function allocDXVA2Trace_VideoProcessDeviceData(data?: Partial<DXVA2Trace_VideoProcessDeviceData>): Uint8Array {
  const buf = new Uint8Array(sizeofDXVA2Trace_VideoProcessDeviceData);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.wmiHeader !== undefined) view.setBigUint64(0, data.wmiHeader === null ? 0n : BigInt(util.toPointer(data.wmiHeader)), true);
  // 0x08: u64
  if (data?.pObject !== undefined) view.setBigUint64(8, BigInt(data.pObject), true);
  // 0x10: i32
  if (data?.Enter !== undefined) view.setInt32(16, Number(data.Enter), true);
  // 0x14: pad4
  return buf;
}

export class DXVA2Trace_VideoProcessDeviceDataView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get wmiHeader(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(0, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x08: u64
  get pObject(): Deno.PointerValue {
    return Number(this.view.getBigUint64(8, true));
  }

  // 0x10: i32
  get Enter(): number {
    return this.view.getInt32(16, true);
  }

  // 0x14: pad4

  // 0x00: pointer
  set wmiHeader(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(0, BigInt(util.toPointer(value)), true);
  }

  // 0x08: u64
  set pObject(value: Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(value), true);
  }

  // 0x10: i32
  set Enter(value: number) {
    this.view.setInt32(16, value, true);
  }

  // 0x14: pad4
}

/**
 * Windows.Win32.Media.DirectShow.DXVA2TraceVideoProcessBltData (size: 48)
 */
export interface DXVA2TraceVideoProcessBltData {
  /** Windows.Win32.System.Diagnostics.Etw.EVENT_TRACE_HEADER */
  wmiHeader: Uint8Array | Deno.PointerValue | null;
  /** u64 */
  pObject: Deno.PointerValue;
  /** u64 */
  pRenderTarget: Deno.PointerValue;
  /** u64 */
  TargetFrameTime: Deno.PointerValue;
  /** Windows.Win32.Foundation.RECT */
  TargetRect: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Foundation.BOOL */
  Enter: boolean;
}

export const sizeofDXVA2TraceVideoProcessBltData = 48;

export function allocDXVA2TraceVideoProcessBltData(data?: Partial<DXVA2TraceVideoProcessBltData>): Uint8Array {
  const buf = new Uint8Array(sizeofDXVA2TraceVideoProcessBltData);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.wmiHeader !== undefined) view.setBigUint64(0, data.wmiHeader === null ? 0n : BigInt(util.toPointer(data.wmiHeader)), true);
  // 0x08: u64
  if (data?.pObject !== undefined) view.setBigUint64(8, BigInt(data.pObject), true);
  // 0x10: u64
  if (data?.pRenderTarget !== undefined) view.setBigUint64(16, BigInt(data.pRenderTarget), true);
  // 0x18: u64
  if (data?.TargetFrameTime !== undefined) view.setBigUint64(24, BigInt(data.TargetFrameTime), true);
  // 0x20: pointer
  if (data?.TargetRect !== undefined) view.setBigUint64(32, data.TargetRect === null ? 0n : BigInt(util.toPointer(data.TargetRect)), true);
  // 0x28: i32
  if (data?.Enter !== undefined) view.setInt32(40, Number(data.Enter), true);
  // 0x2c: pad4
  return buf;
}

export class DXVA2TraceVideoProcessBltDataView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get wmiHeader(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(0, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x08: u64
  get pObject(): Deno.PointerValue {
    return Number(this.view.getBigUint64(8, true));
  }

  // 0x10: u64
  get pRenderTarget(): Deno.PointerValue {
    return Number(this.view.getBigUint64(16, true));
  }

  // 0x18: u64
  get TargetFrameTime(): Deno.PointerValue {
    return Number(this.view.getBigUint64(24, true));
  }

  // 0x20: pointer
  get TargetRect(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(32, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x28: i32
  get Enter(): number {
    return this.view.getInt32(40, true);
  }

  // 0x2c: pad4

  // 0x00: pointer
  set wmiHeader(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(0, BigInt(util.toPointer(value)), true);
  }

  // 0x08: u64
  set pObject(value: Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(value), true);
  }

  // 0x10: u64
  set pRenderTarget(value: Deno.PointerValue) {
    this.view.setBigUint64(16, BigInt(value), true);
  }

  // 0x18: u64
  set TargetFrameTime(value: Deno.PointerValue) {
    this.view.setBigUint64(24, BigInt(value), true);
  }

  // 0x20: pointer
  set TargetRect(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(32, BigInt(util.toPointer(value)), true);
  }

  // 0x28: i32
  set Enter(value: number) {
    this.view.setInt32(40, value, true);
  }

  // 0x2c: pad4
}

/**
 * Windows.Win32.Media.DirectShow.WMDRMProtectionInfo (size: 32)
 */
export interface WMDRMProtectionInfo {
  /** array */
  wszKID: Deno.PointerValue | null;
  /** u64 */
  qwCounter: Deno.PointerValue;
  /** u64 */
  qwIndex: Deno.PointerValue;
  /** u8 */
  bOffset: number;
}

export const sizeofWMDRMProtectionInfo = 32;

export function allocWMDRMProtectionInfo(data?: Partial<WMDRMProtectionInfo>): Uint8Array {
  const buf = new Uint8Array(sizeofWMDRMProtectionInfo);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.wszKID !== undefined) view.setBigUint64(0, data.wszKID === null ? 0n : BigInt(util.toPointer(data.wszKID)), true);
  // 0x08: u64
  if (data?.qwCounter !== undefined) view.setBigUint64(8, BigInt(data.qwCounter), true);
  // 0x10: u64
  if (data?.qwIndex !== undefined) view.setBigUint64(16, BigInt(data.qwIndex), true);
  // 0x18: u8
  if (data?.bOffset !== undefined) view.setUint8(24, Number(data.bOffset));
  // 0x19: pad7
  return buf;
}

export class WMDRMProtectionInfoView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get wszKID(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(0, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x08: u64
  get qwCounter(): Deno.PointerValue {
    return Number(this.view.getBigUint64(8, true));
  }

  // 0x10: u64
  get qwIndex(): Deno.PointerValue {
    return Number(this.view.getBigUint64(16, true));
  }

  // 0x18: u8
  get bOffset(): number {
    return this.view.getUint8(24);
  }

  // 0x19: pad7

  // 0x00: pointer
  set wszKID(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(0, BigInt(util.toPointer(value)), true);
  }

  // 0x08: u64
  set qwCounter(value: Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(value), true);
  }

  // 0x10: u64
  set qwIndex(value: Deno.PointerValue) {
    this.view.setBigUint64(16, BigInt(value), true);
  }

  // 0x18: u8
  set bOffset(value: number) {
    this.view.setUint8(24, value);
  }

  // 0x19: pad7
}

/**
 * Windows.Win32.Media.DirectShow.BadSampleInfo (size: 8)
 */
export interface BadSampleInfo {
  /** Windows.Win32.Foundation.HRESULT */
  hrReason: Uint8Array | Deno.PointerValue | null;
}

export const sizeofBadSampleInfo = 8;

export function allocBadSampleInfo(data?: Partial<BadSampleInfo>): Uint8Array {
  const buf = new Uint8Array(sizeofBadSampleInfo);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.hrReason !== undefined) view.setBigUint64(0, data.hrReason === null ? 0n : BigInt(util.toPointer(data.hrReason)), true);
  return buf;
}

export class BadSampleInfoView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get hrReason(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(0, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: pointer
  set hrReason(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(0, BigInt(util.toPointer(value)), true);
  }
}

/**
 * Windows.Win32.Media.DirectShow.STREAMBUFFER_ATTRIBUTE (size: 32)
 */
export interface STREAMBUFFER_ATTRIBUTE {
  /** Windows.Win32.Foundation.PWSTR */
  pszName: string | null | Uint8Array | Uint16Array;
  /** Windows.Win32.Media.DirectShow.STREAMBUFFER_ATTR_DATATYPE */
  StreamBufferAttributeType: STREAMBUFFER_ATTR_DATATYPE;
  /** ptr */
  pbAttribute: Deno.PointerValue | Uint8Array | null;
  /** u16 */
  cbLength: number;
}

export const sizeofSTREAMBUFFER_ATTRIBUTE = 32;

export function allocSTREAMBUFFER_ATTRIBUTE(data?: Partial<STREAMBUFFER_ATTRIBUTE>): Uint8Array {
  const buf = new Uint8Array(sizeofSTREAMBUFFER_ATTRIBUTE);
  const view = new DataView(buf.buffer);
  // 0x00: buffer
  if (data?.pszName !== undefined) {
    (buf as any)._f0 = util.pwstrToFfi(data.pszName);
    view.setBigUint64(0, (buf as any)._f0 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f0)), true);
  }
  // 0x08: i32
  if (data?.StreamBufferAttributeType !== undefined) view.setInt32(8, Number(data.StreamBufferAttributeType), true);
  // 0x0c: pad4
  // 0x10: pointer
  if (data?.pbAttribute !== undefined) view.setBigUint64(16, data.pbAttribute === null ? 0n : BigInt(util.toPointer(data.pbAttribute)), true);
  // 0x18: u16
  if (data?.cbLength !== undefined) view.setUint16(24, Number(data.cbLength), true);
  // 0x1a: pad6
  return buf;
}

export class STREAMBUFFER_ATTRIBUTEView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: buffer
  get pszName(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(0, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x08: i32
  get StreamBufferAttributeType(): number {
    return this.view.getInt32(8, true);
  }

  // 0x0c: pad4

  // 0x10: pointer
  get pbAttribute(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(16, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x18: u16
  get cbLength(): number {
    return this.view.getUint16(24, true);
  }

  // 0x1a: pad6

  // 0x00: buffer
  set pszName(value: Uint8Array | Deno.PointerValue | null) {
    (this.buf as any)._f0 = value;
    this.view.setBigUint64(0, BigInt(util.toPointer((this.buf as any)._f0)), true);
  }

  // 0x08: i32
  set StreamBufferAttributeType(value: number) {
    this.view.setInt32(8, value, true);
  }

  // 0x0c: pad4

  // 0x10: pointer
  set pbAttribute(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(16, BigInt(util.toPointer(value)), true);
  }

  // 0x18: u16
  set cbLength(value: number) {
    this.view.setUint16(24, value, true);
  }

  // 0x1a: pad6
}

/**
 * Windows.Win32.Media.DirectShow.SBE_PIN_DATA (size: 40)
 */
export interface SBE_PIN_DATA {
  /** u64 */
  cDataBytes: Deno.PointerValue;
  /** u64 */
  cSamplesProcessed: Deno.PointerValue;
  /** u64 */
  cDiscontinuities: Deno.PointerValue;
  /** u64 */
  cSyncPoints: Deno.PointerValue;
  /** u64 */
  cTimestamps: Deno.PointerValue;
}

export const sizeofSBE_PIN_DATA = 40;

export function allocSBE_PIN_DATA(data?: Partial<SBE_PIN_DATA>): Uint8Array {
  const buf = new Uint8Array(sizeofSBE_PIN_DATA);
  const view = new DataView(buf.buffer);
  // 0x00: u64
  if (data?.cDataBytes !== undefined) view.setBigUint64(0, BigInt(data.cDataBytes), true);
  // 0x08: u64
  if (data?.cSamplesProcessed !== undefined) view.setBigUint64(8, BigInt(data.cSamplesProcessed), true);
  // 0x10: u64
  if (data?.cDiscontinuities !== undefined) view.setBigUint64(16, BigInt(data.cDiscontinuities), true);
  // 0x18: u64
  if (data?.cSyncPoints !== undefined) view.setBigUint64(24, BigInt(data.cSyncPoints), true);
  // 0x20: u64
  if (data?.cTimestamps !== undefined) view.setBigUint64(32, BigInt(data.cTimestamps), true);
  return buf;
}

export class SBE_PIN_DATAView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u64
  get cDataBytes(): Deno.PointerValue {
    return Number(this.view.getBigUint64(0, true));
  }

  // 0x08: u64
  get cSamplesProcessed(): Deno.PointerValue {
    return Number(this.view.getBigUint64(8, true));
  }

  // 0x10: u64
  get cDiscontinuities(): Deno.PointerValue {
    return Number(this.view.getBigUint64(16, true));
  }

  // 0x18: u64
  get cSyncPoints(): Deno.PointerValue {
    return Number(this.view.getBigUint64(24, true));
  }

  // 0x20: u64
  get cTimestamps(): Deno.PointerValue {
    return Number(this.view.getBigUint64(32, true));
  }

  // 0x00: u64
  set cDataBytes(value: Deno.PointerValue) {
    this.view.setBigUint64(0, BigInt(value), true);
  }

  // 0x08: u64
  set cSamplesProcessed(value: Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(value), true);
  }

  // 0x10: u64
  set cDiscontinuities(value: Deno.PointerValue) {
    this.view.setBigUint64(16, BigInt(value), true);
  }

  // 0x18: u64
  set cSyncPoints(value: Deno.PointerValue) {
    this.view.setBigUint64(24, BigInt(value), true);
  }

  // 0x20: u64
  set cTimestamps(value: Deno.PointerValue) {
    this.view.setBigUint64(32, BigInt(value), true);
  }
}

/**
 * Windows.Win32.Media.DirectShow.SBE2_STREAM_DESC (size: 16)
 */
export interface SBE2_STREAM_DESC {
  /** u32 */
  Version: number;
  /** u32 */
  StreamId: number;
  /** u32 */
  Default: number;
  /** u32 */
  Reserved: number;
}

export const sizeofSBE2_STREAM_DESC = 16;

export function allocSBE2_STREAM_DESC(data?: Partial<SBE2_STREAM_DESC>): Uint8Array {
  const buf = new Uint8Array(sizeofSBE2_STREAM_DESC);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.Version !== undefined) view.setUint32(0, Number(data.Version), true);
  // 0x04: u32
  if (data?.StreamId !== undefined) view.setUint32(4, Number(data.StreamId), true);
  // 0x08: u32
  if (data?.Default !== undefined) view.setUint32(8, Number(data.Default), true);
  // 0x0c: u32
  if (data?.Reserved !== undefined) view.setUint32(12, Number(data.Reserved), true);
  return buf;
}

export class SBE2_STREAM_DESCView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get Version(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: u32
  get StreamId(): number {
    return this.view.getUint32(4, true);
  }

  // 0x08: u32
  get Default(): number {
    return this.view.getUint32(8, true);
  }

  // 0x0c: u32
  get Reserved(): number {
    return this.view.getUint32(12, true);
  }

  // 0x00: u32
  set Version(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: u32
  set StreamId(value: number) {
    this.view.setUint32(4, value, true);
  }

  // 0x08: u32
  set Default(value: number) {
    this.view.setUint32(8, value, true);
  }

  // 0x0c: u32
  set Reserved(value: number) {
    this.view.setUint32(12, value, true);
  }
}

/**
 * Windows.Win32.Media.DirectShow.DVR_STREAM_DESC (size: 48)
 */
export interface DVR_STREAM_DESC {
  /** u32 */
  Version: number;
  /** u32 */
  StreamId: number;
  /** Windows.Win32.Foundation.BOOL */
  Default: boolean;
  /** Windows.Win32.Foundation.BOOL */
  Creation: boolean;
  /** u32 */
  Reserved: number;
  /** System.Guid */
  guidSubMediaType: Uint8Array | Deno.PointerValue | null;
  /** System.Guid */
  guidFormatType: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Media.MediaFoundation.AM_MEDIA_TYPE */
  MediaType: Uint8Array | Deno.PointerValue | null;
}

export const sizeofDVR_STREAM_DESC = 48;

export function allocDVR_STREAM_DESC(data?: Partial<DVR_STREAM_DESC>): Uint8Array {
  const buf = new Uint8Array(sizeofDVR_STREAM_DESC);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.Version !== undefined) view.setUint32(0, Number(data.Version), true);
  // 0x04: u32
  if (data?.StreamId !== undefined) view.setUint32(4, Number(data.StreamId), true);
  // 0x08: i32
  if (data?.Default !== undefined) view.setInt32(8, Number(data.Default), true);
  // 0x0c: i32
  if (data?.Creation !== undefined) view.setInt32(12, Number(data.Creation), true);
  // 0x10: u32
  if (data?.Reserved !== undefined) view.setUint32(16, Number(data.Reserved), true);
  // 0x14: pad4
  // 0x18: pointer
  if (data?.guidSubMediaType !== undefined) view.setBigUint64(24, data.guidSubMediaType === null ? 0n : BigInt(util.toPointer(data.guidSubMediaType)), true);
  // 0x20: pointer
  if (data?.guidFormatType !== undefined) view.setBigUint64(32, data.guidFormatType === null ? 0n : BigInt(util.toPointer(data.guidFormatType)), true);
  // 0x28: pointer
  if (data?.MediaType !== undefined) view.setBigUint64(40, data.MediaType === null ? 0n : BigInt(util.toPointer(data.MediaType)), true);
  return buf;
}

export class DVR_STREAM_DESCView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get Version(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: u32
  get StreamId(): number {
    return this.view.getUint32(4, true);
  }

  // 0x08: i32
  get Default(): number {
    return this.view.getInt32(8, true);
  }

  // 0x0c: i32
  get Creation(): number {
    return this.view.getInt32(12, true);
  }

  // 0x10: u32
  get Reserved(): number {
    return this.view.getUint32(16, true);
  }

  // 0x14: pad4

  // 0x18: pointer
  get guidSubMediaType(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(24, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x20: pointer
  get guidFormatType(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(32, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x28: pointer
  get MediaType(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(40, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: u32
  set Version(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: u32
  set StreamId(value: number) {
    this.view.setUint32(4, value, true);
  }

  // 0x08: i32
  set Default(value: number) {
    this.view.setInt32(8, value, true);
  }

  // 0x0c: i32
  set Creation(value: number) {
    this.view.setInt32(12, value, true);
  }

  // 0x10: u32
  set Reserved(value: number) {
    this.view.setUint32(16, value, true);
  }

  // 0x14: pad4

  // 0x18: pointer
  set guidSubMediaType(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(24, BigInt(util.toPointer(value)), true);
  }

  // 0x20: pointer
  set guidFormatType(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(32, BigInt(util.toPointer(value)), true);
  }

  // 0x28: pointer
  set MediaType(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(40, BigInt(util.toPointer(value)), true);
  }
}

/**
 * Windows.Win32.Media.DirectShow.PID_BITS_MIDL (size: 8)
 */
export interface PID_BITS_MIDL {
  /** u16 */
  Bits: number;
}

export const sizeofPID_BITS_MIDL = 8;

export function allocPID_BITS_MIDL(data?: Partial<PID_BITS_MIDL>): Uint8Array {
  const buf = new Uint8Array(sizeofPID_BITS_MIDL);
  const view = new DataView(buf.buffer);
  // 0x00: u16
  if (data?.Bits !== undefined) view.setUint16(0, Number(data.Bits), true);
  // 0x02: pad6
  return buf;
}

export class PID_BITS_MIDLView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u16
  get Bits(): number {
    return this.view.getUint16(0, true);
  }

  // 0x02: pad6

  // 0x00: u16
  set Bits(value: number) {
    this.view.setUint16(0, value, true);
  }

  // 0x02: pad6
}

/**
 * Windows.Win32.Media.DirectShow.MPEG_HEADER_BITS_MIDL (size: 8)
 */
export interface MPEG_HEADER_BITS_MIDL {
  /** u16 */
  Bits: number;
}

export const sizeofMPEG_HEADER_BITS_MIDL = 8;

export function allocMPEG_HEADER_BITS_MIDL(data?: Partial<MPEG_HEADER_BITS_MIDL>): Uint8Array {
  const buf = new Uint8Array(sizeofMPEG_HEADER_BITS_MIDL);
  const view = new DataView(buf.buffer);
  // 0x00: u16
  if (data?.Bits !== undefined) view.setUint16(0, Number(data.Bits), true);
  // 0x02: pad6
  return buf;
}

export class MPEG_HEADER_BITS_MIDLView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u16
  get Bits(): number {
    return this.view.getUint16(0, true);
  }

  // 0x02: pad6

  // 0x00: u16
  set Bits(value: number) {
    this.view.setUint16(0, value, true);
  }

  // 0x02: pad6
}

/**
 * Windows.Win32.Media.DirectShow.MPEG_HEADER_VERSION_BITS_MIDL (size: 8)
 */
export interface MPEG_HEADER_VERSION_BITS_MIDL {
  /** u8 */
  Bits: number;
}

export const sizeofMPEG_HEADER_VERSION_BITS_MIDL = 8;

export function allocMPEG_HEADER_VERSION_BITS_MIDL(data?: Partial<MPEG_HEADER_VERSION_BITS_MIDL>): Uint8Array {
  const buf = new Uint8Array(sizeofMPEG_HEADER_VERSION_BITS_MIDL);
  const view = new DataView(buf.buffer);
  // 0x00: u8
  if (data?.Bits !== undefined) view.setUint8(0, Number(data.Bits));
  // 0x01: pad7
  return buf;
}

export class MPEG_HEADER_VERSION_BITS_MIDLView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u8
  get Bits(): number {
    return this.view.getUint8(0);
  }

  // 0x01: pad7

  // 0x00: u8
  set Bits(value: number) {
    this.view.setUint8(0, value);
  }

  // 0x01: pad7
}

/**
 * Windows.Win32.Media.DirectShow.TID_EXTENSION (size: 8)
 */
export interface TID_EXTENSION {
  /** u16 */
  wTidExt: number;
  /** u16 */
  wCount: number;
}

export const sizeofTID_EXTENSION = 8;

export function allocTID_EXTENSION(data?: Partial<TID_EXTENSION>): Uint8Array {
  const buf = new Uint8Array(sizeofTID_EXTENSION);
  const view = new DataView(buf.buffer);
  // 0x00: u16
  if (data?.wTidExt !== undefined) view.setUint16(0, Number(data.wTidExt), true);
  // 0x02: u16
  if (data?.wCount !== undefined) view.setUint16(2, Number(data.wCount), true);
  // 0x04: pad4
  return buf;
}

export class TID_EXTENSIONView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u16
  get wTidExt(): number {
    return this.view.getUint16(0, true);
  }

  // 0x02: u16
  get wCount(): number {
    return this.view.getUint16(2, true);
  }

  // 0x04: pad4

  // 0x00: u16
  set wTidExt(value: number) {
    this.view.setUint16(0, value, true);
  }

  // 0x02: u16
  set wCount(value: number) {
    this.view.setUint16(2, value, true);
  }

  // 0x04: pad4
}

/**
 * _Header_e__Union (size: 16)
 */
export interface _Header_e__Union {
  /** Windows.Win32.Media.DirectShow.MPEG_HEADER_BITS_MIDL */
  S: Uint8Array | Deno.PointerValue | null;
  /** u16 */
  W: number;
}

export const sizeof_Header_e__Union = 16;

export function alloc_Header_e__Union(data?: Partial<_Header_e__Union>): Uint8Array {
  const buf = new Uint8Array(sizeof_Header_e__Union);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.S !== undefined) view.setBigUint64(0, data.S === null ? 0n : BigInt(util.toPointer(data.S)), true);
  // 0x08: u16
  if (data?.W !== undefined) view.setUint16(8, Number(data.W), true);
  // 0x0a: pad6
  return buf;
}

export class _Header_e__UnionView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get S(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(0, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x08: u16
  get W(): number {
    return this.view.getUint16(8, true);
  }

  // 0x0a: pad6

  // 0x00: pointer
  set S(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(0, BigInt(util.toPointer(value)), true);
  }

  // 0x08: u16
  set W(value: number) {
    this.view.setUint16(8, value, true);
  }

  // 0x0a: pad6
}

/**
 * Windows.Win32.Media.DirectShow.SECTION (size: 24)
 */
export interface SECTION {
  /** u8 */
  TableId: number;
  /** _Header_e__Union */
  Header: Uint8Array | Deno.PointerValue | null;
  /** array */
  SectionData: Deno.PointerValue | null;
}

export const sizeofSECTION = 24;

export function allocSECTION(data?: Partial<SECTION>): Uint8Array {
  const buf = new Uint8Array(sizeofSECTION);
  const view = new DataView(buf.buffer);
  // 0x00: u8
  if (data?.TableId !== undefined) view.setUint8(0, Number(data.TableId));
  // 0x01: pad7
  // 0x08: pointer
  if (data?.Header !== undefined) view.setBigUint64(8, data.Header === null ? 0n : BigInt(util.toPointer(data.Header)), true);
  // 0x10: pointer
  if (data?.SectionData !== undefined) view.setBigUint64(16, data.SectionData === null ? 0n : BigInt(util.toPointer(data.SectionData)), true);
  return buf;
}

export class SECTIONView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u8
  get TableId(): number {
    return this.view.getUint8(0);
  }

  // 0x01: pad7

  // 0x08: pointer
  get Header(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(8, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x10: pointer
  get SectionData(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(16, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: u8
  set TableId(value: number) {
    this.view.setUint8(0, value);
  }

  // 0x01: pad7

  // 0x08: pointer
  set Header(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(8, BigInt(util.toPointer(value)), true);
  }

  // 0x10: pointer
  set SectionData(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(16, BigInt(util.toPointer(value)), true);
  }
}

/**
 * _Version_e__Union (size: 16)
 */
export interface _Version_e__Union {
  /** Windows.Win32.Media.DirectShow.MPEG_HEADER_VERSION_BITS_MIDL */
  S: Uint8Array | Deno.PointerValue | null;
  /** u8 */
  B: number;
}

export const sizeof_Version_e__Union = 16;

export function alloc_Version_e__Union(data?: Partial<_Version_e__Union>): Uint8Array {
  const buf = new Uint8Array(sizeof_Version_e__Union);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.S !== undefined) view.setBigUint64(0, data.S === null ? 0n : BigInt(util.toPointer(data.S)), true);
  // 0x08: u8
  if (data?.B !== undefined) view.setUint8(8, Number(data.B));
  // 0x09: pad7
  return buf;
}

export class _Version_e__UnionView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get S(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(0, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x08: u8
  get B(): number {
    return this.view.getUint8(8);
  }

  // 0x09: pad7

  // 0x00: pointer
  set S(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(0, BigInt(util.toPointer(value)), true);
  }

  // 0x08: u8
  set B(value: number) {
    this.view.setUint8(8, value);
  }

  // 0x09: pad7
}

/**
 * Windows.Win32.Media.DirectShow.LONG_SECTION (size: 48)
 */
export interface LONG_SECTION {
  /** u8 */
  TableId: number;
  /** _Header_e__Union */
  Header: Uint8Array | Deno.PointerValue | null;
  /** u16 */
  TableIdExtension: number;
  /** _Version_e__Union */
  Version: Uint8Array | Deno.PointerValue | null;
  /** u8 */
  SectionNumber: number;
  /** u8 */
  LastSectionNumber: number;
  /** array */
  RemainingData: Deno.PointerValue | null;
}

export const sizeofLONG_SECTION = 48;

export function allocLONG_SECTION(data?: Partial<LONG_SECTION>): Uint8Array {
  const buf = new Uint8Array(sizeofLONG_SECTION);
  const view = new DataView(buf.buffer);
  // 0x00: u8
  if (data?.TableId !== undefined) view.setUint8(0, Number(data.TableId));
  // 0x01: pad7
  // 0x08: pointer
  if (data?.Header !== undefined) view.setBigUint64(8, data.Header === null ? 0n : BigInt(util.toPointer(data.Header)), true);
  // 0x10: u16
  if (data?.TableIdExtension !== undefined) view.setUint16(16, Number(data.TableIdExtension), true);
  // 0x12: pad6
  // 0x18: pointer
  if (data?.Version !== undefined) view.setBigUint64(24, data.Version === null ? 0n : BigInt(util.toPointer(data.Version)), true);
  // 0x20: u8
  if (data?.SectionNumber !== undefined) view.setUint8(32, Number(data.SectionNumber));
  // 0x21: u8
  if (data?.LastSectionNumber !== undefined) view.setUint8(33, Number(data.LastSectionNumber));
  // 0x22: pad6
  // 0x28: pointer
  if (data?.RemainingData !== undefined) view.setBigUint64(40, data.RemainingData === null ? 0n : BigInt(util.toPointer(data.RemainingData)), true);
  return buf;
}

export class LONG_SECTIONView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u8
  get TableId(): number {
    return this.view.getUint8(0);
  }

  // 0x01: pad7

  // 0x08: pointer
  get Header(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(8, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x10: u16
  get TableIdExtension(): number {
    return this.view.getUint16(16, true);
  }

  // 0x12: pad6

  // 0x18: pointer
  get Version(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(24, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x20: u8
  get SectionNumber(): number {
    return this.view.getUint8(32);
  }

  // 0x21: u8
  get LastSectionNumber(): number {
    return this.view.getUint8(33);
  }

  // 0x22: pad6

  // 0x28: pointer
  get RemainingData(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(40, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: u8
  set TableId(value: number) {
    this.view.setUint8(0, value);
  }

  // 0x01: pad7

  // 0x08: pointer
  set Header(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(8, BigInt(util.toPointer(value)), true);
  }

  // 0x10: u16
  set TableIdExtension(value: number) {
    this.view.setUint16(16, value, true);
  }

  // 0x12: pad6

  // 0x18: pointer
  set Version(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(24, BigInt(util.toPointer(value)), true);
  }

  // 0x20: u8
  set SectionNumber(value: number) {
    this.view.setUint8(32, value);
  }

  // 0x21: u8
  set LastSectionNumber(value: number) {
    this.view.setUint8(33, value);
  }

  // 0x22: pad6

  // 0x28: pointer
  set RemainingData(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(40, BigInt(util.toPointer(value)), true);
  }
}

/**
 * Windows.Win32.Media.DirectShow.DSMCC_SECTION (size: 56)
 */
export interface DSMCC_SECTION {
  /** u8 */
  TableId: number;
  /** _Header_e__Union */
  Header: Uint8Array | Deno.PointerValue | null;
  /** u16 */
  TableIdExtension: number;
  /** _Version_e__Union */
  Version: Uint8Array | Deno.PointerValue | null;
  /** u8 */
  SectionNumber: number;
  /** u8 */
  LastSectionNumber: number;
  /** u8 */
  ProtocolDiscriminator: number;
  /** u8 */
  DsmccType: number;
  /** u16 */
  MessageId: number;
  /** u32 */
  TransactionId: number;
  /** u8 */
  Reserved: number;
  /** u8 */
  AdaptationLength: number;
  /** u16 */
  MessageLength: number;
  /** array */
  RemainingData: Deno.PointerValue | null;
}

export const sizeofDSMCC_SECTION = 56;

export function allocDSMCC_SECTION(data?: Partial<DSMCC_SECTION>): Uint8Array {
  const buf = new Uint8Array(sizeofDSMCC_SECTION);
  const view = new DataView(buf.buffer);
  // 0x00: u8
  if (data?.TableId !== undefined) view.setUint8(0, Number(data.TableId));
  // 0x01: pad7
  // 0x08: pointer
  if (data?.Header !== undefined) view.setBigUint64(8, data.Header === null ? 0n : BigInt(util.toPointer(data.Header)), true);
  // 0x10: u16
  if (data?.TableIdExtension !== undefined) view.setUint16(16, Number(data.TableIdExtension), true);
  // 0x12: pad6
  // 0x18: pointer
  if (data?.Version !== undefined) view.setBigUint64(24, data.Version === null ? 0n : BigInt(util.toPointer(data.Version)), true);
  // 0x20: u8
  if (data?.SectionNumber !== undefined) view.setUint8(32, Number(data.SectionNumber));
  // 0x21: u8
  if (data?.LastSectionNumber !== undefined) view.setUint8(33, Number(data.LastSectionNumber));
  // 0x22: u8
  if (data?.ProtocolDiscriminator !== undefined) view.setUint8(34, Number(data.ProtocolDiscriminator));
  // 0x23: u8
  if (data?.DsmccType !== undefined) view.setUint8(35, Number(data.DsmccType));
  // 0x24: u16
  if (data?.MessageId !== undefined) view.setUint16(36, Number(data.MessageId), true);
  // 0x26: u32
  if (data?.TransactionId !== undefined) view.setUint32(38, Number(data.TransactionId), true);
  // 0x2a: u8
  if (data?.Reserved !== undefined) view.setUint8(42, Number(data.Reserved));
  // 0x2b: u8
  if (data?.AdaptationLength !== undefined) view.setUint8(43, Number(data.AdaptationLength));
  // 0x2c: u16
  if (data?.MessageLength !== undefined) view.setUint16(44, Number(data.MessageLength), true);
  // 0x2e: pad2
  // 0x30: pointer
  if (data?.RemainingData !== undefined) view.setBigUint64(48, data.RemainingData === null ? 0n : BigInt(util.toPointer(data.RemainingData)), true);
  return buf;
}

export class DSMCC_SECTIONView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u8
  get TableId(): number {
    return this.view.getUint8(0);
  }

  // 0x01: pad7

  // 0x08: pointer
  get Header(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(8, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x10: u16
  get TableIdExtension(): number {
    return this.view.getUint16(16, true);
  }

  // 0x12: pad6

  // 0x18: pointer
  get Version(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(24, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x20: u8
  get SectionNumber(): number {
    return this.view.getUint8(32);
  }

  // 0x21: u8
  get LastSectionNumber(): number {
    return this.view.getUint8(33);
  }

  // 0x22: u8
  get ProtocolDiscriminator(): number {
    return this.view.getUint8(34);
  }

  // 0x23: u8
  get DsmccType(): number {
    return this.view.getUint8(35);
  }

  // 0x24: u16
  get MessageId(): number {
    return this.view.getUint16(36, true);
  }

  // 0x26: u32
  get TransactionId(): number {
    return this.view.getUint32(38, true);
  }

  // 0x2a: u8
  get Reserved(): number {
    return this.view.getUint8(42);
  }

  // 0x2b: u8
  get AdaptationLength(): number {
    return this.view.getUint8(43);
  }

  // 0x2c: u16
  get MessageLength(): number {
    return this.view.getUint16(44, true);
  }

  // 0x2e: pad2

  // 0x30: pointer
  get RemainingData(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(48, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: u8
  set TableId(value: number) {
    this.view.setUint8(0, value);
  }

  // 0x01: pad7

  // 0x08: pointer
  set Header(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(8, BigInt(util.toPointer(value)), true);
  }

  // 0x10: u16
  set TableIdExtension(value: number) {
    this.view.setUint16(16, value, true);
  }

  // 0x12: pad6

  // 0x18: pointer
  set Version(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(24, BigInt(util.toPointer(value)), true);
  }

  // 0x20: u8
  set SectionNumber(value: number) {
    this.view.setUint8(32, value);
  }

  // 0x21: u8
  set LastSectionNumber(value: number) {
    this.view.setUint8(33, value);
  }

  // 0x22: u8
  set ProtocolDiscriminator(value: number) {
    this.view.setUint8(34, value);
  }

  // 0x23: u8
  set DsmccType(value: number) {
    this.view.setUint8(35, value);
  }

  // 0x24: u16
  set MessageId(value: number) {
    this.view.setUint16(36, value, true);
  }

  // 0x26: u32
  set TransactionId(value: number) {
    this.view.setUint32(38, value, true);
  }

  // 0x2a: u8
  set Reserved(value: number) {
    this.view.setUint8(42, value);
  }

  // 0x2b: u8
  set AdaptationLength(value: number) {
    this.view.setUint8(43, value);
  }

  // 0x2c: u16
  set MessageLength(value: number) {
    this.view.setUint16(44, value, true);
  }

  // 0x2e: pad2

  // 0x30: pointer
  set RemainingData(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(48, BigInt(util.toPointer(value)), true);
  }
}

/**
 * Windows.Win32.Media.DirectShow.MPEG_RQST_PACKET (size: 16)
 */
export interface MPEG_RQST_PACKET {
  /** u32 */
  dwLength: number;
  /** ptr */
  pSection: Deno.PointerValue | Uint8Array | null;
}

export const sizeofMPEG_RQST_PACKET = 16;

export function allocMPEG_RQST_PACKET(data?: Partial<MPEG_RQST_PACKET>): Uint8Array {
  const buf = new Uint8Array(sizeofMPEG_RQST_PACKET);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.dwLength !== undefined) view.setUint32(0, Number(data.dwLength), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.pSection !== undefined) view.setBigUint64(8, data.pSection === null ? 0n : BigInt(util.toPointer(data.pSection)), true);
  return buf;
}

export class MPEG_RQST_PACKETView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get dwLength(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  get pSection(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(8, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: u32
  set dwLength(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  set pSection(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(8, BigInt(util.toPointer(value)), true);
  }
}

/**
 * Windows.Win32.Media.DirectShow.MPEG_PACKET_LIST (size: 16)
 */
export interface MPEG_PACKET_LIST {
  /** u16 */
  wPacketCount: number;
  /** array */
  PacketList: Deno.PointerValue | null;
}

export const sizeofMPEG_PACKET_LIST = 16;

export function allocMPEG_PACKET_LIST(data?: Partial<MPEG_PACKET_LIST>): Uint8Array {
  const buf = new Uint8Array(sizeofMPEG_PACKET_LIST);
  const view = new DataView(buf.buffer);
  // 0x00: u16
  if (data?.wPacketCount !== undefined) view.setUint16(0, Number(data.wPacketCount), true);
  // 0x02: pad6
  // 0x08: pointer
  if (data?.PacketList !== undefined) view.setBigUint64(8, data.PacketList === null ? 0n : BigInt(util.toPointer(data.PacketList)), true);
  return buf;
}

export class MPEG_PACKET_LISTView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u16
  get wPacketCount(): number {
    return this.view.getUint16(0, true);
  }

  // 0x02: pad6

  // 0x08: pointer
  get PacketList(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(8, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: u16
  set wPacketCount(value: number) {
    this.view.setUint16(0, value, true);
  }

  // 0x02: pad6

  // 0x08: pointer
  set PacketList(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(8, BigInt(util.toPointer(value)), true);
  }
}

/**
 * Windows.Win32.Media.DirectShow.DSMCC_FILTER_OPTIONS (size: 48)
 */
export interface DSMCC_FILTER_OPTIONS {
  /** Windows.Win32.Foundation.BOOL */
  fSpecifyProtocol: boolean;
  /** u8 */
  Protocol: number;
  /** Windows.Win32.Foundation.BOOL */
  fSpecifyType: boolean;
  /** u8 */
  Type: number;
  /** Windows.Win32.Foundation.BOOL */
  fSpecifyMessageId: boolean;
  /** u16 */
  MessageId: number;
  /** Windows.Win32.Foundation.BOOL */
  fSpecifyTransactionId: boolean;
  /** Windows.Win32.Foundation.BOOL */
  fUseTrxIdMessageIdMask: boolean;
  /** u32 */
  TransactionId: number;
  /** Windows.Win32.Foundation.BOOL */
  fSpecifyModuleVersion: boolean;
  /** u8 */
  ModuleVersion: number;
  /** Windows.Win32.Foundation.BOOL */
  fSpecifyBlockNumber: boolean;
  /** u16 */
  BlockNumber: number;
  /** Windows.Win32.Foundation.BOOL */
  fGetModuleCall: boolean;
  /** u16 */
  NumberOfBlocksInModule: number;
}

export const sizeofDSMCC_FILTER_OPTIONS = 48;

export function allocDSMCC_FILTER_OPTIONS(data?: Partial<DSMCC_FILTER_OPTIONS>): Uint8Array {
  const buf = new Uint8Array(sizeofDSMCC_FILTER_OPTIONS);
  const view = new DataView(buf.buffer);
  // 0x00: i32
  if (data?.fSpecifyProtocol !== undefined) view.setInt32(0, Number(data.fSpecifyProtocol), true);
  // 0x04: u8
  if (data?.Protocol !== undefined) view.setUint8(4, Number(data.Protocol));
  // 0x05: i32
  if (data?.fSpecifyType !== undefined) view.setInt32(5, Number(data.fSpecifyType), true);
  // 0x09: u8
  if (data?.Type !== undefined) view.setUint8(9, Number(data.Type));
  // 0x0a: i32
  if (data?.fSpecifyMessageId !== undefined) view.setInt32(10, Number(data.fSpecifyMessageId), true);
  // 0x0e: u16
  if (data?.MessageId !== undefined) view.setUint16(14, Number(data.MessageId), true);
  // 0x10: i32
  if (data?.fSpecifyTransactionId !== undefined) view.setInt32(16, Number(data.fSpecifyTransactionId), true);
  // 0x14: i32
  if (data?.fUseTrxIdMessageIdMask !== undefined) view.setInt32(20, Number(data.fUseTrxIdMessageIdMask), true);
  // 0x18: u32
  if (data?.TransactionId !== undefined) view.setUint32(24, Number(data.TransactionId), true);
  // 0x1c: i32
  if (data?.fSpecifyModuleVersion !== undefined) view.setInt32(28, Number(data.fSpecifyModuleVersion), true);
  // 0x20: u8
  if (data?.ModuleVersion !== undefined) view.setUint8(32, Number(data.ModuleVersion));
  // 0x21: i32
  if (data?.fSpecifyBlockNumber !== undefined) view.setInt32(33, Number(data.fSpecifyBlockNumber), true);
  // 0x25: u16
  if (data?.BlockNumber !== undefined) view.setUint16(37, Number(data.BlockNumber), true);
  // 0x27: i32
  if (data?.fGetModuleCall !== undefined) view.setInt32(39, Number(data.fGetModuleCall), true);
  // 0x2b: u16
  if (data?.NumberOfBlocksInModule !== undefined) view.setUint16(43, Number(data.NumberOfBlocksInModule), true);
  // 0x2d: pad3
  return buf;
}

export class DSMCC_FILTER_OPTIONSView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: i32
  get fSpecifyProtocol(): number {
    return this.view.getInt32(0, true);
  }

  // 0x04: u8
  get Protocol(): number {
    return this.view.getUint8(4);
  }

  // 0x05: i32
  get fSpecifyType(): number {
    return this.view.getInt32(5, true);
  }

  // 0x09: u8
  get Type(): number {
    return this.view.getUint8(9);
  }

  // 0x0a: i32
  get fSpecifyMessageId(): number {
    return this.view.getInt32(10, true);
  }

  // 0x0e: u16
  get MessageId(): number {
    return this.view.getUint16(14, true);
  }

  // 0x10: i32
  get fSpecifyTransactionId(): number {
    return this.view.getInt32(16, true);
  }

  // 0x14: i32
  get fUseTrxIdMessageIdMask(): number {
    return this.view.getInt32(20, true);
  }

  // 0x18: u32
  get TransactionId(): number {
    return this.view.getUint32(24, true);
  }

  // 0x1c: i32
  get fSpecifyModuleVersion(): number {
    return this.view.getInt32(28, true);
  }

  // 0x20: u8
  get ModuleVersion(): number {
    return this.view.getUint8(32);
  }

  // 0x21: i32
  get fSpecifyBlockNumber(): number {
    return this.view.getInt32(33, true);
  }

  // 0x25: u16
  get BlockNumber(): number {
    return this.view.getUint16(37, true);
  }

  // 0x27: i32
  get fGetModuleCall(): number {
    return this.view.getInt32(39, true);
  }

  // 0x2b: u16
  get NumberOfBlocksInModule(): number {
    return this.view.getUint16(43, true);
  }

  // 0x2d: pad3

  // 0x00: i32
  set fSpecifyProtocol(value: number) {
    this.view.setInt32(0, value, true);
  }

  // 0x04: u8
  set Protocol(value: number) {
    this.view.setUint8(4, value);
  }

  // 0x05: i32
  set fSpecifyType(value: number) {
    this.view.setInt32(5, value, true);
  }

  // 0x09: u8
  set Type(value: number) {
    this.view.setUint8(9, value);
  }

  // 0x0a: i32
  set fSpecifyMessageId(value: number) {
    this.view.setInt32(10, value, true);
  }

  // 0x0e: u16
  set MessageId(value: number) {
    this.view.setUint16(14, value, true);
  }

  // 0x10: i32
  set fSpecifyTransactionId(value: number) {
    this.view.setInt32(16, value, true);
  }

  // 0x14: i32
  set fUseTrxIdMessageIdMask(value: number) {
    this.view.setInt32(20, value, true);
  }

  // 0x18: u32
  set TransactionId(value: number) {
    this.view.setUint32(24, value, true);
  }

  // 0x1c: i32
  set fSpecifyModuleVersion(value: number) {
    this.view.setInt32(28, value, true);
  }

  // 0x20: u8
  set ModuleVersion(value: number) {
    this.view.setUint8(32, value);
  }

  // 0x21: i32
  set fSpecifyBlockNumber(value: number) {
    this.view.setInt32(33, value, true);
  }

  // 0x25: u16
  set BlockNumber(value: number) {
    this.view.setUint16(37, value, true);
  }

  // 0x27: i32
  set fGetModuleCall(value: number) {
    this.view.setInt32(39, value, true);
  }

  // 0x2b: u16
  set NumberOfBlocksInModule(value: number) {
    this.view.setUint16(43, value, true);
  }

  // 0x2d: pad3
}

/**
 * Windows.Win32.Media.DirectShow.ATSC_FILTER_OPTIONS (size: 8)
 */
export interface ATSC_FILTER_OPTIONS {
  /** Windows.Win32.Foundation.BOOL */
  fSpecifyEtmId: boolean;
  /** u32 */
  EtmId: number;
}

export const sizeofATSC_FILTER_OPTIONS = 8;

export function allocATSC_FILTER_OPTIONS(data?: Partial<ATSC_FILTER_OPTIONS>): Uint8Array {
  const buf = new Uint8Array(sizeofATSC_FILTER_OPTIONS);
  const view = new DataView(buf.buffer);
  // 0x00: i32
  if (data?.fSpecifyEtmId !== undefined) view.setInt32(0, Number(data.fSpecifyEtmId), true);
  // 0x04: u32
  if (data?.EtmId !== undefined) view.setUint32(4, Number(data.EtmId), true);
  return buf;
}

export class ATSC_FILTER_OPTIONSView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: i32
  get fSpecifyEtmId(): number {
    return this.view.getInt32(0, true);
  }

  // 0x04: u32
  get EtmId(): number {
    return this.view.getUint32(4, true);
  }

  // 0x00: i32
  set fSpecifyEtmId(value: number) {
    this.view.setInt32(0, value, true);
  }

  // 0x04: u32
  set EtmId(value: number) {
    this.view.setUint32(4, value, true);
  }
}

/**
 * Windows.Win32.Media.DirectShow.DVB_EIT_FILTER_OPTIONS (size: 8)
 */
export interface DVB_EIT_FILTER_OPTIONS {
  /** Windows.Win32.Foundation.BOOL */
  fSpecifySegment: boolean;
  /** u8 */
  bSegment: number;
}

export const sizeofDVB_EIT_FILTER_OPTIONS = 8;

export function allocDVB_EIT_FILTER_OPTIONS(data?: Partial<DVB_EIT_FILTER_OPTIONS>): Uint8Array {
  const buf = new Uint8Array(sizeofDVB_EIT_FILTER_OPTIONS);
  const view = new DataView(buf.buffer);
  // 0x00: i32
  if (data?.fSpecifySegment !== undefined) view.setInt32(0, Number(data.fSpecifySegment), true);
  // 0x04: u8
  if (data?.bSegment !== undefined) view.setUint8(4, Number(data.bSegment));
  // 0x05: pad3
  return buf;
}

export class DVB_EIT_FILTER_OPTIONSView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: i32
  get fSpecifySegment(): number {
    return this.view.getInt32(0, true);
  }

  // 0x04: u8
  get bSegment(): number {
    return this.view.getUint8(4);
  }

  // 0x05: pad3

  // 0x00: i32
  set fSpecifySegment(value: number) {
    this.view.setInt32(0, value, true);
  }

  // 0x04: u8
  set bSegment(value: number) {
    this.view.setUint8(4, value);
  }

  // 0x05: pad3
}

/**
 * Windows.Win32.Media.DirectShow.MPEG2_FILTER (size: 80)
 */
export interface MPEG2_FILTER {
  /** u8 */
  bVersionNumber: number;
  /** u16 */
  wFilterSize: number;
  /** Windows.Win32.Foundation.BOOL */
  fUseRawFilteringBits: boolean;
  /** array */
  Filter: Deno.PointerValue | null;
  /** array */
  Mask: Deno.PointerValue | null;
  /** Windows.Win32.Foundation.BOOL */
  fSpecifyTableIdExtension: boolean;
  /** u16 */
  TableIdExtension: number;
  /** Windows.Win32.Foundation.BOOL */
  fSpecifyVersion: boolean;
  /** u8 */
  Version: number;
  /** Windows.Win32.Foundation.BOOL */
  fSpecifySectionNumber: boolean;
  /** u8 */
  SectionNumber: number;
  /** Windows.Win32.Foundation.BOOL */
  fSpecifyCurrentNext: boolean;
  /** Windows.Win32.Foundation.BOOL */
  fNext: boolean;
  /** Windows.Win32.Foundation.BOOL */
  fSpecifyDsmccOptions: boolean;
  /** Windows.Win32.Media.DirectShow.DSMCC_FILTER_OPTIONS */
  Dsmcc: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Foundation.BOOL */
  fSpecifyAtscOptions: boolean;
  /** Windows.Win32.Media.DirectShow.ATSC_FILTER_OPTIONS */
  Atsc: Uint8Array | Deno.PointerValue | null;
}

export const sizeofMPEG2_FILTER = 80;

export function allocMPEG2_FILTER(data?: Partial<MPEG2_FILTER>): Uint8Array {
  const buf = new Uint8Array(sizeofMPEG2_FILTER);
  const view = new DataView(buf.buffer);
  // 0x00: u8
  if (data?.bVersionNumber !== undefined) view.setUint8(0, Number(data.bVersionNumber));
  // 0x01: u16
  if (data?.wFilterSize !== undefined) view.setUint16(1, Number(data.wFilterSize), true);
  // 0x03: i32
  if (data?.fUseRawFilteringBits !== undefined) view.setInt32(3, Number(data.fUseRawFilteringBits), true);
  // 0x07: pad1
  // 0x08: pointer
  if (data?.Filter !== undefined) view.setBigUint64(8, data.Filter === null ? 0n : BigInt(util.toPointer(data.Filter)), true);
  // 0x10: pointer
  if (data?.Mask !== undefined) view.setBigUint64(16, data.Mask === null ? 0n : BigInt(util.toPointer(data.Mask)), true);
  // 0x18: i32
  if (data?.fSpecifyTableIdExtension !== undefined) view.setInt32(24, Number(data.fSpecifyTableIdExtension), true);
  // 0x1c: u16
  if (data?.TableIdExtension !== undefined) view.setUint16(28, Number(data.TableIdExtension), true);
  // 0x1e: i32
  if (data?.fSpecifyVersion !== undefined) view.setInt32(30, Number(data.fSpecifyVersion), true);
  // 0x22: u8
  if (data?.Version !== undefined) view.setUint8(34, Number(data.Version));
  // 0x23: i32
  if (data?.fSpecifySectionNumber !== undefined) view.setInt32(35, Number(data.fSpecifySectionNumber), true);
  // 0x27: u8
  if (data?.SectionNumber !== undefined) view.setUint8(39, Number(data.SectionNumber));
  // 0x28: i32
  if (data?.fSpecifyCurrentNext !== undefined) view.setInt32(40, Number(data.fSpecifyCurrentNext), true);
  // 0x2c: i32
  if (data?.fNext !== undefined) view.setInt32(44, Number(data.fNext), true);
  // 0x30: i32
  if (data?.fSpecifyDsmccOptions !== undefined) view.setInt32(48, Number(data.fSpecifyDsmccOptions), true);
  // 0x34: pad4
  // 0x38: pointer
  if (data?.Dsmcc !== undefined) view.setBigUint64(56, data.Dsmcc === null ? 0n : BigInt(util.toPointer(data.Dsmcc)), true);
  // 0x40: i32
  if (data?.fSpecifyAtscOptions !== undefined) view.setInt32(64, Number(data.fSpecifyAtscOptions), true);
  // 0x44: pad4
  // 0x48: pointer
  if (data?.Atsc !== undefined) view.setBigUint64(72, data.Atsc === null ? 0n : BigInt(util.toPointer(data.Atsc)), true);
  return buf;
}

export class MPEG2_FILTERView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u8
  get bVersionNumber(): number {
    return this.view.getUint8(0);
  }

  // 0x01: u16
  get wFilterSize(): number {
    return this.view.getUint16(1, true);
  }

  // 0x03: i32
  get fUseRawFilteringBits(): number {
    return this.view.getInt32(3, true);
  }

  // 0x07: pad1

  // 0x08: pointer
  get Filter(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(8, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x10: pointer
  get Mask(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(16, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x18: i32
  get fSpecifyTableIdExtension(): number {
    return this.view.getInt32(24, true);
  }

  // 0x1c: u16
  get TableIdExtension(): number {
    return this.view.getUint16(28, true);
  }

  // 0x1e: i32
  get fSpecifyVersion(): number {
    return this.view.getInt32(30, true);
  }

  // 0x22: u8
  get Version(): number {
    return this.view.getUint8(34);
  }

  // 0x23: i32
  get fSpecifySectionNumber(): number {
    return this.view.getInt32(35, true);
  }

  // 0x27: u8
  get SectionNumber(): number {
    return this.view.getUint8(39);
  }

  // 0x28: i32
  get fSpecifyCurrentNext(): number {
    return this.view.getInt32(40, true);
  }

  // 0x2c: i32
  get fNext(): number {
    return this.view.getInt32(44, true);
  }

  // 0x30: i32
  get fSpecifyDsmccOptions(): number {
    return this.view.getInt32(48, true);
  }

  // 0x34: pad4

  // 0x38: pointer
  get Dsmcc(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(56, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x40: i32
  get fSpecifyAtscOptions(): number {
    return this.view.getInt32(64, true);
  }

  // 0x44: pad4

  // 0x48: pointer
  get Atsc(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(72, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: u8
  set bVersionNumber(value: number) {
    this.view.setUint8(0, value);
  }

  // 0x01: u16
  set wFilterSize(value: number) {
    this.view.setUint16(1, value, true);
  }

  // 0x03: i32
  set fUseRawFilteringBits(value: number) {
    this.view.setInt32(3, value, true);
  }

  // 0x07: pad1

  // 0x08: pointer
  set Filter(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(8, BigInt(util.toPointer(value)), true);
  }

  // 0x10: pointer
  set Mask(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(16, BigInt(util.toPointer(value)), true);
  }

  // 0x18: i32
  set fSpecifyTableIdExtension(value: number) {
    this.view.setInt32(24, value, true);
  }

  // 0x1c: u16
  set TableIdExtension(value: number) {
    this.view.setUint16(28, value, true);
  }

  // 0x1e: i32
  set fSpecifyVersion(value: number) {
    this.view.setInt32(30, value, true);
  }

  // 0x22: u8
  set Version(value: number) {
    this.view.setUint8(34, value);
  }

  // 0x23: i32
  set fSpecifySectionNumber(value: number) {
    this.view.setInt32(35, value, true);
  }

  // 0x27: u8
  set SectionNumber(value: number) {
    this.view.setUint8(39, value);
  }

  // 0x28: i32
  set fSpecifyCurrentNext(value: number) {
    this.view.setInt32(40, value, true);
  }

  // 0x2c: i32
  set fNext(value: number) {
    this.view.setInt32(44, value, true);
  }

  // 0x30: i32
  set fSpecifyDsmccOptions(value: number) {
    this.view.setInt32(48, value, true);
  }

  // 0x34: pad4

  // 0x38: pointer
  set Dsmcc(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(56, BigInt(util.toPointer(value)), true);
  }

  // 0x40: i32
  set fSpecifyAtscOptions(value: number) {
    this.view.setInt32(64, value, true);
  }

  // 0x44: pad4

  // 0x48: pointer
  set Atsc(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(72, BigInt(util.toPointer(value)), true);
  }
}

/**
 * Windows.Win32.Media.DirectShow.MPEG2_FILTER2 (size: 24)
 */
export interface MPEG2_FILTER2 {
  /** _Anonymous_e__Union */
  Anonymous: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Foundation.BOOL */
  fSpecifyDvbEitOptions: boolean;
  /** Windows.Win32.Media.DirectShow.DVB_EIT_FILTER_OPTIONS */
  DvbEit: Uint8Array | Deno.PointerValue | null;
}

export const sizeofMPEG2_FILTER2 = 24;

export function allocMPEG2_FILTER2(data?: Partial<MPEG2_FILTER2>): Uint8Array {
  const buf = new Uint8Array(sizeofMPEG2_FILTER2);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.Anonymous !== undefined) view.setBigUint64(0, data.Anonymous === null ? 0n : BigInt(util.toPointer(data.Anonymous)), true);
  // 0x08: i32
  if (data?.fSpecifyDvbEitOptions !== undefined) view.setInt32(8, Number(data.fSpecifyDvbEitOptions), true);
  // 0x0c: pad4
  // 0x10: pointer
  if (data?.DvbEit !== undefined) view.setBigUint64(16, data.DvbEit === null ? 0n : BigInt(util.toPointer(data.DvbEit)), true);
  return buf;
}

export class MPEG2_FILTER2View {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get Anonymous(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(0, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x08: i32
  get fSpecifyDvbEitOptions(): number {
    return this.view.getInt32(8, true);
  }

  // 0x0c: pad4

  // 0x10: pointer
  get DvbEit(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(16, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: pointer
  set Anonymous(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(0, BigInt(util.toPointer(value)), true);
  }

  // 0x08: i32
  set fSpecifyDvbEitOptions(value: number) {
    this.view.setInt32(8, value, true);
  }

  // 0x0c: pad4

  // 0x10: pointer
  set DvbEit(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(16, BigInt(util.toPointer(value)), true);
  }
}

/**
 * Windows.Win32.Media.DirectShow.MPEG_STREAM_BUFFER (size: 24)
 */
export interface MPEG_STREAM_BUFFER {
  /** Windows.Win32.Foundation.HRESULT */
  hr: Uint8Array | Deno.PointerValue | null;
  /** u32 */
  dwDataBufferSize: number;
  /** u32 */
  dwSizeOfDataRead: number;
  /** ptr */
  pDataBuffer: Deno.PointerValue | Uint8Array | null;
}

export const sizeofMPEG_STREAM_BUFFER = 24;

export function allocMPEG_STREAM_BUFFER(data?: Partial<MPEG_STREAM_BUFFER>): Uint8Array {
  const buf = new Uint8Array(sizeofMPEG_STREAM_BUFFER);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.hr !== undefined) view.setBigUint64(0, data.hr === null ? 0n : BigInt(util.toPointer(data.hr)), true);
  // 0x08: u32
  if (data?.dwDataBufferSize !== undefined) view.setUint32(8, Number(data.dwDataBufferSize), true);
  // 0x0c: u32
  if (data?.dwSizeOfDataRead !== undefined) view.setUint32(12, Number(data.dwSizeOfDataRead), true);
  // 0x10: pointer
  if (data?.pDataBuffer !== undefined) view.setBigUint64(16, data.pDataBuffer === null ? 0n : BigInt(util.toPointer(data.pDataBuffer)), true);
  return buf;
}

export class MPEG_STREAM_BUFFERView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get hr(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(0, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x08: u32
  get dwDataBufferSize(): number {
    return this.view.getUint32(8, true);
  }

  // 0x0c: u32
  get dwSizeOfDataRead(): number {
    return this.view.getUint32(12, true);
  }

  // 0x10: pointer
  get pDataBuffer(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(16, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: pointer
  set hr(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(0, BigInt(util.toPointer(value)), true);
  }

  // 0x08: u32
  set dwDataBufferSize(value: number) {
    this.view.setUint32(8, value, true);
  }

  // 0x0c: u32
  set dwSizeOfDataRead(value: number) {
    this.view.setUint32(12, value, true);
  }

  // 0x10: pointer
  set pDataBuffer(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(16, BigInt(util.toPointer(value)), true);
  }
}

/**
 * Windows.Win32.Media.DirectShow.MPEG_TIME (size: 8)
 */
export interface MPEG_TIME {
  /** u8 */
  Hours: number;
  /** u8 */
  Minutes: number;
  /** u8 */
  Seconds: number;
}

export const sizeofMPEG_TIME = 8;

export function allocMPEG_TIME(data?: Partial<MPEG_TIME>): Uint8Array {
  const buf = new Uint8Array(sizeofMPEG_TIME);
  const view = new DataView(buf.buffer);
  // 0x00: u8
  if (data?.Hours !== undefined) view.setUint8(0, Number(data.Hours));
  // 0x01: u8
  if (data?.Minutes !== undefined) view.setUint8(1, Number(data.Minutes));
  // 0x02: u8
  if (data?.Seconds !== undefined) view.setUint8(2, Number(data.Seconds));
  // 0x03: pad5
  return buf;
}

export class MPEG_TIMEView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u8
  get Hours(): number {
    return this.view.getUint8(0);
  }

  // 0x01: u8
  get Minutes(): number {
    return this.view.getUint8(1);
  }

  // 0x02: u8
  get Seconds(): number {
    return this.view.getUint8(2);
  }

  // 0x03: pad5

  // 0x00: u8
  set Hours(value: number) {
    this.view.setUint8(0, value);
  }

  // 0x01: u8
  set Minutes(value: number) {
    this.view.setUint8(1, value);
  }

  // 0x02: u8
  set Seconds(value: number) {
    this.view.setUint8(2, value);
  }

  // 0x03: pad5
}

/**
 * Windows.Win32.Media.DirectShow.MPEG_DATE (size: 8)
 */
export interface MPEG_DATE {
  /** u8 */
  Date: number;
  /** u8 */
  Month: number;
  /** u16 */
  Year: number;
}

export const sizeofMPEG_DATE = 8;

export function allocMPEG_DATE(data?: Partial<MPEG_DATE>): Uint8Array {
  const buf = new Uint8Array(sizeofMPEG_DATE);
  const view = new DataView(buf.buffer);
  // 0x00: u8
  if (data?.Date !== undefined) view.setUint8(0, Number(data.Date));
  // 0x01: u8
  if (data?.Month !== undefined) view.setUint8(1, Number(data.Month));
  // 0x02: u16
  if (data?.Year !== undefined) view.setUint16(2, Number(data.Year), true);
  // 0x04: pad4
  return buf;
}

export class MPEG_DATEView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u8
  get Date(): number {
    return this.view.getUint8(0);
  }

  // 0x01: u8
  get Month(): number {
    return this.view.getUint8(1);
  }

  // 0x02: u16
  get Year(): number {
    return this.view.getUint16(2, true);
  }

  // 0x04: pad4

  // 0x00: u8
  set Date(value: number) {
    this.view.setUint8(0, value);
  }

  // 0x01: u8
  set Month(value: number) {
    this.view.setUint8(1, value);
  }

  // 0x02: u16
  set Year(value: number) {
    this.view.setUint16(2, value, true);
  }

  // 0x04: pad4
}

/**
 * Windows.Win32.Media.DirectShow.MPEG_DATE_AND_TIME (size: 16)
 */
export interface MPEG_DATE_AND_TIME {
  /** Windows.Win32.Media.DirectShow.MPEG_DATE */
  D: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Media.DirectShow.MPEG_TIME */
  T: Uint8Array | Deno.PointerValue | null;
}

export const sizeofMPEG_DATE_AND_TIME = 16;

export function allocMPEG_DATE_AND_TIME(data?: Partial<MPEG_DATE_AND_TIME>): Uint8Array {
  const buf = new Uint8Array(sizeofMPEG_DATE_AND_TIME);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.D !== undefined) view.setBigUint64(0, data.D === null ? 0n : BigInt(util.toPointer(data.D)), true);
  // 0x08: pointer
  if (data?.T !== undefined) view.setBigUint64(8, data.T === null ? 0n : BigInt(util.toPointer(data.T)), true);
  return buf;
}

export class MPEG_DATE_AND_TIMEView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get D(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(0, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x08: pointer
  get T(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(8, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: pointer
  set D(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(0, BigInt(util.toPointer(value)), true);
  }

  // 0x08: pointer
  set T(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(8, BigInt(util.toPointer(value)), true);
  }
}

/**
 * Windows.Win32.Media.DirectShow.MPEG_BCS_DEMUX (size: 8)
 */
export interface MPEG_BCS_DEMUX {
  /** u32 */
  AVMGraphId: number;
}

export const sizeofMPEG_BCS_DEMUX = 8;

export function allocMPEG_BCS_DEMUX(data?: Partial<MPEG_BCS_DEMUX>): Uint8Array {
  const buf = new Uint8Array(sizeofMPEG_BCS_DEMUX);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.AVMGraphId !== undefined) view.setUint32(0, Number(data.AVMGraphId), true);
  // 0x04: pad4
  return buf;
}

export class MPEG_BCS_DEMUXView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get AVMGraphId(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: pad4

  // 0x00: u32
  set AVMGraphId(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: pad4
}

/**
 * Windows.Win32.Media.DirectShow.MPEG_WINSOCK (size: 8)
 */
export interface MPEG_WINSOCK {
  /** u32 */
  AVMGraphId: number;
}

export const sizeofMPEG_WINSOCK = 8;

export function allocMPEG_WINSOCK(data?: Partial<MPEG_WINSOCK>): Uint8Array {
  const buf = new Uint8Array(sizeofMPEG_WINSOCK);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.AVMGraphId !== undefined) view.setUint32(0, Number(data.AVMGraphId), true);
  // 0x04: pad4
  return buf;
}

export class MPEG_WINSOCKView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get AVMGraphId(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: pad4

  // 0x00: u32
  set AVMGraphId(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: pad4
}

/**
 * _U_e__Union (size: 16)
 */
export interface _U_e__Union {
  /** Windows.Win32.Media.DirectShow.MPEG_BCS_DEMUX */
  Demux: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Media.DirectShow.MPEG_WINSOCK */
  Winsock: Uint8Array | Deno.PointerValue | null;
}

export const sizeof_U_e__Union = 16;

export function alloc_U_e__Union(data?: Partial<_U_e__Union>): Uint8Array {
  const buf = new Uint8Array(sizeof_U_e__Union);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.Demux !== undefined) view.setBigUint64(0, data.Demux === null ? 0n : BigInt(util.toPointer(data.Demux)), true);
  // 0x08: pointer
  if (data?.Winsock !== undefined) view.setBigUint64(8, data.Winsock === null ? 0n : BigInt(util.toPointer(data.Winsock)), true);
  return buf;
}

export class _U_e__UnionView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get Demux(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(0, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x08: pointer
  get Winsock(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(8, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: pointer
  set Demux(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(0, BigInt(util.toPointer(value)), true);
  }

  // 0x08: pointer
  set Winsock(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(8, BigInt(util.toPointer(value)), true);
  }
}

/**
 * Windows.Win32.Media.DirectShow.MPEG_CONTEXT (size: 16)
 */
export interface MPEG_CONTEXT {
  /** Windows.Win32.Media.DirectShow.MPEG_CONTEXT_TYPE */
  Type: MPEG_CONTEXT_TYPE;
  /** _U_e__Union */
  U: Uint8Array | Deno.PointerValue | null;
}

export const sizeofMPEG_CONTEXT = 16;

export function allocMPEG_CONTEXT(data?: Partial<MPEG_CONTEXT>): Uint8Array {
  const buf = new Uint8Array(sizeofMPEG_CONTEXT);
  const view = new DataView(buf.buffer);
  // 0x00: i32
  if (data?.Type !== undefined) view.setInt32(0, Number(data.Type), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.U !== undefined) view.setBigUint64(8, data.U === null ? 0n : BigInt(util.toPointer(data.U)), true);
  return buf;
}

export class MPEG_CONTEXTView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: i32
  get Type(): number {
    return this.view.getInt32(0, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  get U(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(8, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: i32
  set Type(value: number) {
    this.view.setInt32(0, value, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  set U(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(8, BigInt(util.toPointer(value)), true);
  }
}

/**
 * Windows.Win32.Media.DirectShow.MPEG_SERVICE_REQUEST (size: 40)
 */
export interface MPEG_SERVICE_REQUEST {
  /** Windows.Win32.Media.DirectShow.MPEG_REQUEST_TYPE */
  Type: MPEG_REQUEST_TYPE;
  /** Windows.Win32.Media.DirectShow.MPEG_CONTEXT */
  Context: Uint8Array | Deno.PointerValue | null;
  /** u16 */
  Pid: number;
  /** u8 */
  TableId: number;
  /** Windows.Win32.Media.DirectShow.MPEG2_FILTER */
  Filter: Uint8Array | Deno.PointerValue | null;
  /** u32 */
  Flags: number;
}

export const sizeofMPEG_SERVICE_REQUEST = 40;

export function allocMPEG_SERVICE_REQUEST(data?: Partial<MPEG_SERVICE_REQUEST>): Uint8Array {
  const buf = new Uint8Array(sizeofMPEG_SERVICE_REQUEST);
  const view = new DataView(buf.buffer);
  // 0x00: i32
  if (data?.Type !== undefined) view.setInt32(0, Number(data.Type), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.Context !== undefined) view.setBigUint64(8, data.Context === null ? 0n : BigInt(util.toPointer(data.Context)), true);
  // 0x10: u16
  if (data?.Pid !== undefined) view.setUint16(16, Number(data.Pid), true);
  // 0x12: u8
  if (data?.TableId !== undefined) view.setUint8(18, Number(data.TableId));
  // 0x13: pad5
  // 0x18: pointer
  if (data?.Filter !== undefined) view.setBigUint64(24, data.Filter === null ? 0n : BigInt(util.toPointer(data.Filter)), true);
  // 0x20: u32
  if (data?.Flags !== undefined) view.setUint32(32, Number(data.Flags), true);
  // 0x24: pad4
  return buf;
}

export class MPEG_SERVICE_REQUESTView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: i32
  get Type(): number {
    return this.view.getInt32(0, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  get Context(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(8, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x10: u16
  get Pid(): number {
    return this.view.getUint16(16, true);
  }

  // 0x12: u8
  get TableId(): number {
    return this.view.getUint8(18);
  }

  // 0x13: pad5

  // 0x18: pointer
  get Filter(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(24, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x20: u32
  get Flags(): number {
    return this.view.getUint32(32, true);
  }

  // 0x24: pad4

  // 0x00: i32
  set Type(value: number) {
    this.view.setInt32(0, value, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  set Context(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(8, BigInt(util.toPointer(value)), true);
  }

  // 0x10: u16
  set Pid(value: number) {
    this.view.setUint16(16, value, true);
  }

  // 0x12: u8
  set TableId(value: number) {
    this.view.setUint8(18, value);
  }

  // 0x13: pad5

  // 0x18: pointer
  set Filter(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(24, BigInt(util.toPointer(value)), true);
  }

  // 0x20: u32
  set Flags(value: number) {
    this.view.setUint32(32, value, true);
  }

  // 0x24: pad4
}

/**
 * Windows.Win32.Media.DirectShow.MPEG_SERVICE_RESPONSE (size: 8)
 */
export interface MPEG_SERVICE_RESPONSE {
  /** u32 */
  IPAddress: number;
  /** u16 */
  Port: number;
}

export const sizeofMPEG_SERVICE_RESPONSE = 8;

export function allocMPEG_SERVICE_RESPONSE(data?: Partial<MPEG_SERVICE_RESPONSE>): Uint8Array {
  const buf = new Uint8Array(sizeofMPEG_SERVICE_RESPONSE);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.IPAddress !== undefined) view.setUint32(0, Number(data.IPAddress), true);
  // 0x04: u16
  if (data?.Port !== undefined) view.setUint16(4, Number(data.Port), true);
  // 0x06: pad2
  return buf;
}

export class MPEG_SERVICE_RESPONSEView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get IPAddress(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: u16
  get Port(): number {
    return this.view.getUint16(4, true);
  }

  // 0x06: pad2

  // 0x00: u32
  set IPAddress(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: u16
  set Port(value: number) {
    this.view.setUint16(4, value, true);
  }

  // 0x06: pad2
}

/**
 * Windows.Win32.Media.DirectShow.DSMCC_ELEMENT (size: 24)
 */
export interface DSMCC_ELEMENT {
  /** u16 */
  pid: number;
  /** u8 */
  bComponentTag: number;
  /** u32 */
  dwCarouselId: number;
  /** u32 */
  dwTransactionId: number;
  /** ptr */
  pNext: Deno.PointerValue | Uint8Array | null;
}

export const sizeofDSMCC_ELEMENT = 24;

export function allocDSMCC_ELEMENT(data?: Partial<DSMCC_ELEMENT>): Uint8Array {
  const buf = new Uint8Array(sizeofDSMCC_ELEMENT);
  const view = new DataView(buf.buffer);
  // 0x00: u16
  if (data?.pid !== undefined) view.setUint16(0, Number(data.pid), true);
  // 0x02: u8
  if (data?.bComponentTag !== undefined) view.setUint8(2, Number(data.bComponentTag));
  // 0x03: u32
  if (data?.dwCarouselId !== undefined) view.setUint32(3, Number(data.dwCarouselId), true);
  // 0x07: u32
  if (data?.dwTransactionId !== undefined) view.setUint32(7, Number(data.dwTransactionId), true);
  // 0x0b: pad5
  // 0x10: pointer
  if (data?.pNext !== undefined) view.setBigUint64(16, data.pNext === null ? 0n : BigInt(util.toPointer(data.pNext)), true);
  return buf;
}

export class DSMCC_ELEMENTView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u16
  get pid(): number {
    return this.view.getUint16(0, true);
  }

  // 0x02: u8
  get bComponentTag(): number {
    return this.view.getUint8(2);
  }

  // 0x03: u32
  get dwCarouselId(): number {
    return this.view.getUint32(3, true);
  }

  // 0x07: u32
  get dwTransactionId(): number {
    return this.view.getUint32(7, true);
  }

  // 0x0b: pad5

  // 0x10: pointer
  get pNext(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(16, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: u16
  set pid(value: number) {
    this.view.setUint16(0, value, true);
  }

  // 0x02: u8
  set bComponentTag(value: number) {
    this.view.setUint8(2, value);
  }

  // 0x03: u32
  set dwCarouselId(value: number) {
    this.view.setUint32(3, value, true);
  }

  // 0x07: u32
  set dwTransactionId(value: number) {
    this.view.setUint32(7, value, true);
  }

  // 0x0b: pad5

  // 0x10: pointer
  set pNext(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(16, BigInt(util.toPointer(value)), true);
  }
}

/**
 * Windows.Win32.Media.DirectShow.MPE_ELEMENT (size: 16)
 */
export interface MPE_ELEMENT {
  /** u16 */
  pid: number;
  /** u8 */
  bComponentTag: number;
  /** ptr */
  pNext: Deno.PointerValue | Uint8Array | null;
}

export const sizeofMPE_ELEMENT = 16;

export function allocMPE_ELEMENT(data?: Partial<MPE_ELEMENT>): Uint8Array {
  const buf = new Uint8Array(sizeofMPE_ELEMENT);
  const view = new DataView(buf.buffer);
  // 0x00: u16
  if (data?.pid !== undefined) view.setUint16(0, Number(data.pid), true);
  // 0x02: u8
  if (data?.bComponentTag !== undefined) view.setUint8(2, Number(data.bComponentTag));
  // 0x03: pad5
  // 0x08: pointer
  if (data?.pNext !== undefined) view.setBigUint64(8, data.pNext === null ? 0n : BigInt(util.toPointer(data.pNext)), true);
  return buf;
}

export class MPE_ELEMENTView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u16
  get pid(): number {
    return this.view.getUint16(0, true);
  }

  // 0x02: u8
  get bComponentTag(): number {
    return this.view.getUint8(2);
  }

  // 0x03: pad5

  // 0x08: pointer
  get pNext(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(8, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: u16
  set pid(value: number) {
    this.view.setUint16(0, value, true);
  }

  // 0x02: u8
  set bComponentTag(value: number) {
    this.view.setUint8(2, value);
  }

  // 0x03: pad5

  // 0x08: pointer
  set pNext(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(8, BigInt(util.toPointer(value)), true);
  }
}

/**
 * Windows.Win32.Media.DirectShow.MPEG_STREAM_FILTER (size: 32)
 */
export interface MPEG_STREAM_FILTER {
  /** u16 */
  wPidValue: number;
  /** u32 */
  dwFilterSize: number;
  /** Windows.Win32.Foundation.BOOL */
  fCrcEnabled: boolean;
  /** array */
  rgchFilter: Deno.PointerValue | null;
  /** array */
  rgchMask: Deno.PointerValue | null;
}

export const sizeofMPEG_STREAM_FILTER = 32;

export function allocMPEG_STREAM_FILTER(data?: Partial<MPEG_STREAM_FILTER>): Uint8Array {
  const buf = new Uint8Array(sizeofMPEG_STREAM_FILTER);
  const view = new DataView(buf.buffer);
  // 0x00: u16
  if (data?.wPidValue !== undefined) view.setUint16(0, Number(data.wPidValue), true);
  // 0x02: u32
  if (data?.dwFilterSize !== undefined) view.setUint32(2, Number(data.dwFilterSize), true);
  // 0x06: i32
  if (data?.fCrcEnabled !== undefined) view.setInt32(6, Number(data.fCrcEnabled), true);
  // 0x0a: pad6
  // 0x10: pointer
  if (data?.rgchFilter !== undefined) view.setBigUint64(16, data.rgchFilter === null ? 0n : BigInt(util.toPointer(data.rgchFilter)), true);
  // 0x18: pointer
  if (data?.rgchMask !== undefined) view.setBigUint64(24, data.rgchMask === null ? 0n : BigInt(util.toPointer(data.rgchMask)), true);
  return buf;
}

export class MPEG_STREAM_FILTERView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u16
  get wPidValue(): number {
    return this.view.getUint16(0, true);
  }

  // 0x02: u32
  get dwFilterSize(): number {
    return this.view.getUint32(2, true);
  }

  // 0x06: i32
  get fCrcEnabled(): number {
    return this.view.getInt32(6, true);
  }

  // 0x0a: pad6

  // 0x10: pointer
  get rgchFilter(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(16, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x18: pointer
  get rgchMask(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(24, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: u16
  set wPidValue(value: number) {
    this.view.setUint16(0, value, true);
  }

  // 0x02: u32
  set dwFilterSize(value: number) {
    this.view.setUint32(2, value, true);
  }

  // 0x06: i32
  set fCrcEnabled(value: number) {
    this.view.setInt32(6, value, true);
  }

  // 0x0a: pad6

  // 0x10: pointer
  set rgchFilter(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(16, BigInt(util.toPointer(value)), true);
  }

  // 0x18: pointer
  set rgchMask(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(24, BigInt(util.toPointer(value)), true);
  }
}

/**
 * Windows.Win32.Media.DirectShow.Mpeg2TableSampleHdr (size: 24)
 */
export interface Mpeg2TableSampleHdr {
  /** u8 */
  SectionCount: number;
  /** array */
  Reserved: Deno.PointerValue | null;
  /** array */
  SectionOffsets: Deno.PointerValue | null;
}

export const sizeofMpeg2TableSampleHdr = 24;

export function allocMpeg2TableSampleHdr(data?: Partial<Mpeg2TableSampleHdr>): Uint8Array {
  const buf = new Uint8Array(sizeofMpeg2TableSampleHdr);
  const view = new DataView(buf.buffer);
  // 0x00: u8
  if (data?.SectionCount !== undefined) view.setUint8(0, Number(data.SectionCount));
  // 0x01: pad7
  // 0x08: pointer
  if (data?.Reserved !== undefined) view.setBigUint64(8, data.Reserved === null ? 0n : BigInt(util.toPointer(data.Reserved)), true);
  // 0x10: pointer
  if (data?.SectionOffsets !== undefined) view.setBigUint64(16, data.SectionOffsets === null ? 0n : BigInt(util.toPointer(data.SectionOffsets)), true);
  return buf;
}

export class Mpeg2TableSampleHdrView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u8
  get SectionCount(): number {
    return this.view.getUint8(0);
  }

  // 0x01: pad7

  // 0x08: pointer
  get Reserved(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(8, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x10: pointer
  get SectionOffsets(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(16, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: u8
  set SectionCount(value: number) {
    this.view.setUint8(0, value);
  }

  // 0x01: pad7

  // 0x08: pointer
  set Reserved(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(8, BigInt(util.toPointer(value)), true);
  }

  // 0x10: pointer
  set SectionOffsets(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(16, BigInt(util.toPointer(value)), true);
  }
}

/**
 * Windows.Win32.Media.DirectShow.ProgramElement (size: 8)
 */
export interface ProgramElement {
  /** u16 */
  wProgramNumber: number;
  /** u16 */
  wProgramMapPID: number;
}

export const sizeofProgramElement = 8;

export function allocProgramElement(data?: Partial<ProgramElement>): Uint8Array {
  const buf = new Uint8Array(sizeofProgramElement);
  const view = new DataView(buf.buffer);
  // 0x00: u16
  if (data?.wProgramNumber !== undefined) view.setUint16(0, Number(data.wProgramNumber), true);
  // 0x02: u16
  if (data?.wProgramMapPID !== undefined) view.setUint16(2, Number(data.wProgramMapPID), true);
  // 0x04: pad4
  return buf;
}

export class ProgramElementView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u16
  get wProgramNumber(): number {
    return this.view.getUint16(0, true);
  }

  // 0x02: u16
  get wProgramMapPID(): number {
    return this.view.getUint16(2, true);
  }

  // 0x04: pad4

  // 0x00: u16
  set wProgramNumber(value: number) {
    this.view.setUint16(0, value, true);
  }

  // 0x02: u16
  set wProgramMapPID(value: number) {
    this.view.setUint16(2, value, true);
  }

  // 0x04: pad4
}

/**
 * Windows.Win32.Media.DirectShow.UDCR_TAG (size: 48)
 */
export interface UDCR_TAG {
  /** u8 */
  bVersion: number;
  /** array */
  KID: Deno.PointerValue | null;
  /** u64 */
  ullBaseCounter: Deno.PointerValue;
  /** u64 */
  ullBaseCounterRange: Deno.PointerValue;
  /** Windows.Win32.Foundation.BOOL */
  fScrambled: boolean;
  /** u8 */
  bStreamMark: number;
  /** u32 */
  dwReserved1: number;
  /** u32 */
  dwReserved2: number;
}

export const sizeofUDCR_TAG = 48;

export function allocUDCR_TAG(data?: Partial<UDCR_TAG>): Uint8Array {
  const buf = new Uint8Array(sizeofUDCR_TAG);
  const view = new DataView(buf.buffer);
  // 0x00: u8
  if (data?.bVersion !== undefined) view.setUint8(0, Number(data.bVersion));
  // 0x01: pad7
  // 0x08: pointer
  if (data?.KID !== undefined) view.setBigUint64(8, data.KID === null ? 0n : BigInt(util.toPointer(data.KID)), true);
  // 0x10: u64
  if (data?.ullBaseCounter !== undefined) view.setBigUint64(16, BigInt(data.ullBaseCounter), true);
  // 0x18: u64
  if (data?.ullBaseCounterRange !== undefined) view.setBigUint64(24, BigInt(data.ullBaseCounterRange), true);
  // 0x20: i32
  if (data?.fScrambled !== undefined) view.setInt32(32, Number(data.fScrambled), true);
  // 0x24: u8
  if (data?.bStreamMark !== undefined) view.setUint8(36, Number(data.bStreamMark));
  // 0x25: u32
  if (data?.dwReserved1 !== undefined) view.setUint32(37, Number(data.dwReserved1), true);
  // 0x29: u32
  if (data?.dwReserved2 !== undefined) view.setUint32(41, Number(data.dwReserved2), true);
  // 0x2d: pad3
  return buf;
}

export class UDCR_TAGView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u8
  get bVersion(): number {
    return this.view.getUint8(0);
  }

  // 0x01: pad7

  // 0x08: pointer
  get KID(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(8, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x10: u64
  get ullBaseCounter(): Deno.PointerValue {
    return Number(this.view.getBigUint64(16, true));
  }

  // 0x18: u64
  get ullBaseCounterRange(): Deno.PointerValue {
    return Number(this.view.getBigUint64(24, true));
  }

  // 0x20: i32
  get fScrambled(): number {
    return this.view.getInt32(32, true);
  }

  // 0x24: u8
  get bStreamMark(): number {
    return this.view.getUint8(36);
  }

  // 0x25: u32
  get dwReserved1(): number {
    return this.view.getUint32(37, true);
  }

  // 0x29: u32
  get dwReserved2(): number {
    return this.view.getUint32(41, true);
  }

  // 0x2d: pad3

  // 0x00: u8
  set bVersion(value: number) {
    this.view.setUint8(0, value);
  }

  // 0x01: pad7

  // 0x08: pointer
  set KID(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(8, BigInt(util.toPointer(value)), true);
  }

  // 0x10: u64
  set ullBaseCounter(value: Deno.PointerValue) {
    this.view.setBigUint64(16, BigInt(value), true);
  }

  // 0x18: u64
  set ullBaseCounterRange(value: Deno.PointerValue) {
    this.view.setBigUint64(24, BigInt(value), true);
  }

  // 0x20: i32
  set fScrambled(value: number) {
    this.view.setInt32(32, value, true);
  }

  // 0x24: u8
  set bStreamMark(value: number) {
    this.view.setUint8(36, value);
  }

  // 0x25: u32
  set dwReserved1(value: number) {
    this.view.setUint32(37, value, true);
  }

  // 0x29: u32
  set dwReserved2(value: number) {
    this.view.setUint32(41, value, true);
  }

  // 0x2d: pad3
}

/**
 * Windows.Win32.Media.DirectShow.PIC_SEQ_SAMPLE (size: 8)
 */
export interface PIC_SEQ_SAMPLE {
  /** u32 */
  _bitfield: number;
}

export const sizeofPIC_SEQ_SAMPLE = 8;

export function allocPIC_SEQ_SAMPLE(data?: Partial<PIC_SEQ_SAMPLE>): Uint8Array {
  const buf = new Uint8Array(sizeofPIC_SEQ_SAMPLE);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?._bitfield !== undefined) view.setUint32(0, Number(data._bitfield), true);
  // 0x04: pad4
  return buf;
}

export class PIC_SEQ_SAMPLEView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get _bitfield(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: pad4

  // 0x00: u32
  set _bitfield(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: pad4
}

/**
 * Windows.Win32.Media.DirectShow.SAMPLE_SEQ_OFFSET (size: 8)
 */
export interface SAMPLE_SEQ_OFFSET {
  /** u32 */
  _bitfield: number;
}

export const sizeofSAMPLE_SEQ_OFFSET = 8;

export function allocSAMPLE_SEQ_OFFSET(data?: Partial<SAMPLE_SEQ_OFFSET>): Uint8Array {
  const buf = new Uint8Array(sizeofSAMPLE_SEQ_OFFSET);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?._bitfield !== undefined) view.setUint32(0, Number(data._bitfield), true);
  // 0x04: pad4
  return buf;
}

export class SAMPLE_SEQ_OFFSETView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get _bitfield(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: pad4

  // 0x00: u32
  set _bitfield(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: pad4
}

/**
 * Windows.Win32.Media.DirectShow.VA_OPTIONAL_VIDEO_PROPERTIES (size: 24)
 */
export interface VA_OPTIONAL_VIDEO_PROPERTIES {
  /** u16 */
  dwPictureHeight: number;
  /** u16 */
  dwPictureWidth: number;
  /** u16 */
  dwAspectRatioX: number;
  /** u16 */
  dwAspectRatioY: number;
  /** Windows.Win32.Media.DirectShow.VA_VIDEO_FORMAT */
  VAVideoFormat: VA_VIDEO_FORMAT;
  /** Windows.Win32.Media.DirectShow.VA_COLOR_PRIMARIES */
  VAColorPrimaries: VA_COLOR_PRIMARIES;
  /** Windows.Win32.Media.DirectShow.VA_TRANSFER_CHARACTERISTICS */
  VATransferCharacteristics: VA_TRANSFER_CHARACTERISTICS;
  /** Windows.Win32.Media.DirectShow.VA_MATRIX_COEFFICIENTS */
  VAMatrixCoefficients: VA_MATRIX_COEFFICIENTS;
}

export const sizeofVA_OPTIONAL_VIDEO_PROPERTIES = 24;

export function allocVA_OPTIONAL_VIDEO_PROPERTIES(data?: Partial<VA_OPTIONAL_VIDEO_PROPERTIES>): Uint8Array {
  const buf = new Uint8Array(sizeofVA_OPTIONAL_VIDEO_PROPERTIES);
  const view = new DataView(buf.buffer);
  // 0x00: u16
  if (data?.dwPictureHeight !== undefined) view.setUint16(0, Number(data.dwPictureHeight), true);
  // 0x02: u16
  if (data?.dwPictureWidth !== undefined) view.setUint16(2, Number(data.dwPictureWidth), true);
  // 0x04: u16
  if (data?.dwAspectRatioX !== undefined) view.setUint16(4, Number(data.dwAspectRatioX), true);
  // 0x06: u16
  if (data?.dwAspectRatioY !== undefined) view.setUint16(6, Number(data.dwAspectRatioY), true);
  // 0x08: i32
  if (data?.VAVideoFormat !== undefined) view.setInt32(8, Number(data.VAVideoFormat), true);
  // 0x0c: i32
  if (data?.VAColorPrimaries !== undefined) view.setInt32(12, Number(data.VAColorPrimaries), true);
  // 0x10: i32
  if (data?.VATransferCharacteristics !== undefined) view.setInt32(16, Number(data.VATransferCharacteristics), true);
  // 0x14: i32
  if (data?.VAMatrixCoefficients !== undefined) view.setInt32(20, Number(data.VAMatrixCoefficients), true);
  return buf;
}

export class VA_OPTIONAL_VIDEO_PROPERTIESView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u16
  get dwPictureHeight(): number {
    return this.view.getUint16(0, true);
  }

  // 0x02: u16
  get dwPictureWidth(): number {
    return this.view.getUint16(2, true);
  }

  // 0x04: u16
  get dwAspectRatioX(): number {
    return this.view.getUint16(4, true);
  }

  // 0x06: u16
  get dwAspectRatioY(): number {
    return this.view.getUint16(6, true);
  }

  // 0x08: i32
  get VAVideoFormat(): number {
    return this.view.getInt32(8, true);
  }

  // 0x0c: i32
  get VAColorPrimaries(): number {
    return this.view.getInt32(12, true);
  }

  // 0x10: i32
  get VATransferCharacteristics(): number {
    return this.view.getInt32(16, true);
  }

  // 0x14: i32
  get VAMatrixCoefficients(): number {
    return this.view.getInt32(20, true);
  }

  // 0x00: u16
  set dwPictureHeight(value: number) {
    this.view.setUint16(0, value, true);
  }

  // 0x02: u16
  set dwPictureWidth(value: number) {
    this.view.setUint16(2, value, true);
  }

  // 0x04: u16
  set dwAspectRatioX(value: number) {
    this.view.setUint16(4, value, true);
  }

  // 0x06: u16
  set dwAspectRatioY(value: number) {
    this.view.setUint16(6, value, true);
  }

  // 0x08: i32
  set VAVideoFormat(value: number) {
    this.view.setInt32(8, value, true);
  }

  // 0x0c: i32
  set VAColorPrimaries(value: number) {
    this.view.setInt32(12, value, true);
  }

  // 0x10: i32
  set VATransferCharacteristics(value: number) {
    this.view.setInt32(16, value, true);
  }

  // 0x14: i32
  set VAMatrixCoefficients(value: number) {
    this.view.setInt32(20, value, true);
  }
}

/**
 * _Others (size: 8)
 */
export interface _Others {
  /** i64 */
  _bitfield: Deno.PointerValue;
}

export const sizeof_Others = 8;

export function alloc_Others(data?: Partial<_Others>): Uint8Array {
  const buf = new Uint8Array(sizeof_Others);
  const view = new DataView(buf.buffer);
  // 0x00: i64
  if (data?._bitfield !== undefined) view.setBigInt64(0, BigInt(data._bitfield), true);
  return buf;
}

export class _OthersView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: i64
  get _bitfield(): Deno.PointerValue {
    return Number(this.view.getBigInt64(0, true));
  }

  // 0x00: i64
  set _bitfield(value: Deno.PointerValue) {
    this.view.setBigInt64(0, BigInt(value), true);
  }
}

/**
 * _Fields_e__Union (size: 16)
 */
export interface _Fields_e__Union {
  /** _Others */
  Others: Uint8Array | Deno.PointerValue | null;
  /** i64 */
  Value: Deno.PointerValue;
}

export const sizeof_Fields_e__Union = 16;

export function alloc_Fields_e__Union(data?: Partial<_Fields_e__Union>): Uint8Array {
  const buf = new Uint8Array(sizeof_Fields_e__Union);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.Others !== undefined) view.setBigUint64(0, data.Others === null ? 0n : BigInt(util.toPointer(data.Others)), true);
  // 0x08: i64
  if (data?.Value !== undefined) view.setBigInt64(8, BigInt(data.Value), true);
  return buf;
}

export class _Fields_e__UnionView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get Others(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(0, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x08: i64
  get Value(): Deno.PointerValue {
    return Number(this.view.getBigInt64(8, true));
  }

  // 0x00: pointer
  set Others(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(0, BigInt(util.toPointer(value)), true);
  }

  // 0x08: i64
  set Value(value: Deno.PointerValue) {
    this.view.setBigInt64(8, BigInt(value), true);
  }
}

/**
 * Windows.Win32.Media.DirectShow.TRANSPORT_PROPERTIES (size: 24)
 */
export interface TRANSPORT_PROPERTIES {
  /** u32 */
  PID: number;
  /** i64 */
  PCR: Deno.PointerValue;
  /** _Fields_e__Union */
  Fields: Uint8Array | Deno.PointerValue | null;
}

export const sizeofTRANSPORT_PROPERTIES = 24;

export function allocTRANSPORT_PROPERTIES(data?: Partial<TRANSPORT_PROPERTIES>): Uint8Array {
  const buf = new Uint8Array(sizeofTRANSPORT_PROPERTIES);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.PID !== undefined) view.setUint32(0, Number(data.PID), true);
  // 0x04: pad4
  // 0x08: i64
  if (data?.PCR !== undefined) view.setBigInt64(8, BigInt(data.PCR), true);
  // 0x10: pointer
  if (data?.Fields !== undefined) view.setBigUint64(16, data.Fields === null ? 0n : BigInt(util.toPointer(data.Fields)), true);
  return buf;
}

export class TRANSPORT_PROPERTIESView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get PID(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: pad4

  // 0x08: i64
  get PCR(): Deno.PointerValue {
    return Number(this.view.getBigInt64(8, true));
  }

  // 0x10: pointer
  get Fields(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(16, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: u32
  set PID(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: pad4

  // 0x08: i64
  set PCR(value: Deno.PointerValue) {
    this.view.setBigInt64(8, BigInt(value), true);
  }

  // 0x10: pointer
  set Fields(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(16, BigInt(util.toPointer(value)), true);
  }
}

/**
 * Windows.Win32.Media.DirectShow.PBDA_TAG_ATTRIBUTE (size: 24)
 */
export interface PBDA_TAG_ATTRIBUTE {
  /** System.Guid */
  TableUUId: Uint8Array | Deno.PointerValue | null;
  /** u8 */
  TableId: number;
  /** u16 */
  VersionNo: number;
  /** u32 */
  TableDataSize: number;
  /** array */
  TableData: Deno.PointerValue | null;
}

export const sizeofPBDA_TAG_ATTRIBUTE = 24;

export function allocPBDA_TAG_ATTRIBUTE(data?: Partial<PBDA_TAG_ATTRIBUTE>): Uint8Array {
  const buf = new Uint8Array(sizeofPBDA_TAG_ATTRIBUTE);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.TableUUId !== undefined) view.setBigUint64(0, data.TableUUId === null ? 0n : BigInt(util.toPointer(data.TableUUId)), true);
  // 0x08: u8
  if (data?.TableId !== undefined) view.setUint8(8, Number(data.TableId));
  // 0x09: u16
  if (data?.VersionNo !== undefined) view.setUint16(9, Number(data.VersionNo), true);
  // 0x0b: u32
  if (data?.TableDataSize !== undefined) view.setUint32(11, Number(data.TableDataSize), true);
  // 0x0f: pad1
  // 0x10: pointer
  if (data?.TableData !== undefined) view.setBigUint64(16, data.TableData === null ? 0n : BigInt(util.toPointer(data.TableData)), true);
  return buf;
}

export class PBDA_TAG_ATTRIBUTEView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get TableUUId(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(0, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x08: u8
  get TableId(): number {
    return this.view.getUint8(8);
  }

  // 0x09: u16
  get VersionNo(): number {
    return this.view.getUint16(9, true);
  }

  // 0x0b: u32
  get TableDataSize(): number {
    return this.view.getUint32(11, true);
  }

  // 0x0f: pad1

  // 0x10: pointer
  get TableData(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(16, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: pointer
  set TableUUId(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(0, BigInt(util.toPointer(value)), true);
  }

  // 0x08: u8
  set TableId(value: number) {
    this.view.setUint8(8, value);
  }

  // 0x09: u16
  set VersionNo(value: number) {
    this.view.setUint16(9, value, true);
  }

  // 0x0b: u32
  set TableDataSize(value: number) {
    this.view.setUint32(11, value, true);
  }

  // 0x0f: pad1

  // 0x10: pointer
  set TableData(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(16, BigInt(util.toPointer(value)), true);
  }
}

/**
 * Windows.Win32.Media.DirectShow.CAPTURE_STREAMTIME (size: 8)
 */
export interface CAPTURE_STREAMTIME {
  /** i64 */
  StreamTime: Deno.PointerValue;
}

export const sizeofCAPTURE_STREAMTIME = 8;

export function allocCAPTURE_STREAMTIME(data?: Partial<CAPTURE_STREAMTIME>): Uint8Array {
  const buf = new Uint8Array(sizeofCAPTURE_STREAMTIME);
  const view = new DataView(buf.buffer);
  // 0x00: i64
  if (data?.StreamTime !== undefined) view.setBigInt64(0, BigInt(data.StreamTime), true);
  return buf;
}

export class CAPTURE_STREAMTIMEView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: i64
  get StreamTime(): Deno.PointerValue {
    return Number(this.view.getBigInt64(0, true));
  }

  // 0x00: i64
  set StreamTime(value: Deno.PointerValue) {
    this.view.setBigInt64(0, BigInt(value), true);
  }
}

/**
 * Windows.Win32.Media.DirectShow.DSHOW_STREAM_DESC (size: 24)
 */
export interface DSHOW_STREAM_DESC {
  /** u32 */
  VersionNo: number;
  /** u32 */
  StreamId: number;
  /** Windows.Win32.Foundation.BOOL */
  Default: boolean;
  /** Windows.Win32.Foundation.BOOL */
  Creation: boolean;
  /** u32 */
  Reserved: number;
}

export const sizeofDSHOW_STREAM_DESC = 24;

export function allocDSHOW_STREAM_DESC(data?: Partial<DSHOW_STREAM_DESC>): Uint8Array {
  const buf = new Uint8Array(sizeofDSHOW_STREAM_DESC);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.VersionNo !== undefined) view.setUint32(0, Number(data.VersionNo), true);
  // 0x04: u32
  if (data?.StreamId !== undefined) view.setUint32(4, Number(data.StreamId), true);
  // 0x08: i32
  if (data?.Default !== undefined) view.setInt32(8, Number(data.Default), true);
  // 0x0c: i32
  if (data?.Creation !== undefined) view.setInt32(12, Number(data.Creation), true);
  // 0x10: u32
  if (data?.Reserved !== undefined) view.setUint32(16, Number(data.Reserved), true);
  // 0x14: pad4
  return buf;
}

export class DSHOW_STREAM_DESCView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get VersionNo(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: u32
  get StreamId(): number {
    return this.view.getUint32(4, true);
  }

  // 0x08: i32
  get Default(): number {
    return this.view.getInt32(8, true);
  }

  // 0x0c: i32
  get Creation(): number {
    return this.view.getInt32(12, true);
  }

  // 0x10: u32
  get Reserved(): number {
    return this.view.getUint32(16, true);
  }

  // 0x14: pad4

  // 0x00: u32
  set VersionNo(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: u32
  set StreamId(value: number) {
    this.view.setUint32(4, value, true);
  }

  // 0x08: i32
  set Default(value: number) {
    this.view.setInt32(8, value, true);
  }

  // 0x0c: i32
  set Creation(value: number) {
    this.view.setInt32(12, value, true);
  }

  // 0x10: u32
  set Reserved(value: number) {
    this.view.setUint32(16, value, true);
  }

  // 0x14: pad4
}

/**
 * Windows.Win32.Media.DirectShow.SAMPLE_LIVE_STREAM_TIME (size: 16)
 */
export interface SAMPLE_LIVE_STREAM_TIME {
  /** u64 */
  qwStreamTime: Deno.PointerValue;
  /** u64 */
  qwLiveTime: Deno.PointerValue;
}

export const sizeofSAMPLE_LIVE_STREAM_TIME = 16;

export function allocSAMPLE_LIVE_STREAM_TIME(data?: Partial<SAMPLE_LIVE_STREAM_TIME>): Uint8Array {
  const buf = new Uint8Array(sizeofSAMPLE_LIVE_STREAM_TIME);
  const view = new DataView(buf.buffer);
  // 0x00: u64
  if (data?.qwStreamTime !== undefined) view.setBigUint64(0, BigInt(data.qwStreamTime), true);
  // 0x08: u64
  if (data?.qwLiveTime !== undefined) view.setBigUint64(8, BigInt(data.qwLiveTime), true);
  return buf;
}

export class SAMPLE_LIVE_STREAM_TIMEView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u64
  get qwStreamTime(): Deno.PointerValue {
    return Number(this.view.getBigUint64(0, true));
  }

  // 0x08: u64
  get qwLiveTime(): Deno.PointerValue {
    return Number(this.view.getBigUint64(8, true));
  }

  // 0x00: u64
  set qwStreamTime(value: Deno.PointerValue) {
    this.view.setBigUint64(0, BigInt(value), true);
  }

  // 0x08: u64
  set qwLiveTime(value: Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(value), true);
  }
}

/**
 * Windows.Win32.Media.KernelStreaming.KSIDENTIFIER (size: 8)
 */
export interface KSIDENTIFIER {
  /** _Anonymous_e__Union */
  Anonymous: Uint8Array | Deno.PointerValue | null;
}

export const sizeofKSIDENTIFIER = 8;

export function allocKSIDENTIFIER(data?: Partial<KSIDENTIFIER>): Uint8Array {
  const buf = new Uint8Array(sizeofKSIDENTIFIER);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.Anonymous !== undefined) view.setBigUint64(0, data.Anonymous === null ? 0n : BigInt(util.toPointer(data.Anonymous)), true);
  return buf;
}

export class KSIDENTIFIERView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get Anonymous(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(0, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: pointer
  set Anonymous(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(0, BigInt(util.toPointer(value)), true);
  }
}

/**
 * Windows.Win32.Media.DirectShow.KSP_BDA_NODE_PIN (size: 24)
 */
export interface KSP_BDA_NODE_PIN {
  /** Windows.Win32.Media.KernelStreaming.KSIDENTIFIER */
  Property: Uint8Array | Deno.PointerValue | null;
  /** u32 */
  ulNodeType: number;
  /** u32 */
  ulInputPinId: number;
  /** u32 */
  ulOutputPinId: number;
}

export const sizeofKSP_BDA_NODE_PIN = 24;

export function allocKSP_BDA_NODE_PIN(data?: Partial<KSP_BDA_NODE_PIN>): Uint8Array {
  const buf = new Uint8Array(sizeofKSP_BDA_NODE_PIN);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.Property !== undefined) view.setBigUint64(0, data.Property === null ? 0n : BigInt(util.toPointer(data.Property)), true);
  // 0x08: u32
  if (data?.ulNodeType !== undefined) view.setUint32(8, Number(data.ulNodeType), true);
  // 0x0c: u32
  if (data?.ulInputPinId !== undefined) view.setUint32(12, Number(data.ulInputPinId), true);
  // 0x10: u32
  if (data?.ulOutputPinId !== undefined) view.setUint32(16, Number(data.ulOutputPinId), true);
  // 0x14: pad4
  return buf;
}

export class KSP_BDA_NODE_PINView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get Property(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(0, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x08: u32
  get ulNodeType(): number {
    return this.view.getUint32(8, true);
  }

  // 0x0c: u32
  get ulInputPinId(): number {
    return this.view.getUint32(12, true);
  }

  // 0x10: u32
  get ulOutputPinId(): number {
    return this.view.getUint32(16, true);
  }

  // 0x14: pad4

  // 0x00: pointer
  set Property(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(0, BigInt(util.toPointer(value)), true);
  }

  // 0x08: u32
  set ulNodeType(value: number) {
    this.view.setUint32(8, value, true);
  }

  // 0x0c: u32
  set ulInputPinId(value: number) {
    this.view.setUint32(12, value, true);
  }

  // 0x10: u32
  set ulOutputPinId(value: number) {
    this.view.setUint32(16, value, true);
  }

  // 0x14: pad4
}

/**
 * Windows.Win32.Media.DirectShow.KSM_BDA_PIN (size: 24)
 */
export interface KSM_BDA_PIN {
  /** Windows.Win32.Media.KernelStreaming.KSIDENTIFIER */
  Method: Uint8Array | Deno.PointerValue | null;
  /** _Anonymous_e__Union */
  Anonymous: Uint8Array | Deno.PointerValue | null;
  /** u32 */
  Reserved: number;
}

export const sizeofKSM_BDA_PIN = 24;

export function allocKSM_BDA_PIN(data?: Partial<KSM_BDA_PIN>): Uint8Array {
  const buf = new Uint8Array(sizeofKSM_BDA_PIN);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.Method !== undefined) view.setBigUint64(0, data.Method === null ? 0n : BigInt(util.toPointer(data.Method)), true);
  // 0x08: pointer
  if (data?.Anonymous !== undefined) view.setBigUint64(8, data.Anonymous === null ? 0n : BigInt(util.toPointer(data.Anonymous)), true);
  // 0x10: u32
  if (data?.Reserved !== undefined) view.setUint32(16, Number(data.Reserved), true);
  // 0x14: pad4
  return buf;
}

export class KSM_BDA_PINView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get Method(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(0, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x08: pointer
  get Anonymous(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(8, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x10: u32
  get Reserved(): number {
    return this.view.getUint32(16, true);
  }

  // 0x14: pad4

  // 0x00: pointer
  set Method(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(0, BigInt(util.toPointer(value)), true);
  }

  // 0x08: pointer
  set Anonymous(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(8, BigInt(util.toPointer(value)), true);
  }

  // 0x10: u32
  set Reserved(value: number) {
    this.view.setUint32(16, value, true);
  }

  // 0x14: pad4
}

/**
 * Windows.Win32.Media.DirectShow.KSM_BDA_PIN_PAIR (size: 24)
 */
export interface KSM_BDA_PIN_PAIR {
  /** Windows.Win32.Media.KernelStreaming.KSIDENTIFIER */
  Method: Uint8Array | Deno.PointerValue | null;
  /** _Anonymous1_e__Union */
  Anonymous1: Uint8Array | Deno.PointerValue | null;
  /** _Anonymous2_e__Union */
  Anonymous2: Uint8Array | Deno.PointerValue | null;
}

export const sizeofKSM_BDA_PIN_PAIR = 24;

export function allocKSM_BDA_PIN_PAIR(data?: Partial<KSM_BDA_PIN_PAIR>): Uint8Array {
  const buf = new Uint8Array(sizeofKSM_BDA_PIN_PAIR);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.Method !== undefined) view.setBigUint64(0, data.Method === null ? 0n : BigInt(util.toPointer(data.Method)), true);
  // 0x08: pointer
  if (data?.Anonymous1 !== undefined) view.setBigUint64(8, data.Anonymous1 === null ? 0n : BigInt(util.toPointer(data.Anonymous1)), true);
  // 0x10: pointer
  if (data?.Anonymous2 !== undefined) view.setBigUint64(16, data.Anonymous2 === null ? 0n : BigInt(util.toPointer(data.Anonymous2)), true);
  return buf;
}

export class KSM_BDA_PIN_PAIRView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get Method(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(0, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x08: pointer
  get Anonymous1(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(8, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x10: pointer
  get Anonymous2(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(16, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: pointer
  set Method(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(0, BigInt(util.toPointer(value)), true);
  }

  // 0x08: pointer
  set Anonymous1(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(8, BigInt(util.toPointer(value)), true);
  }

  // 0x10: pointer
  set Anonymous2(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(16, BigInt(util.toPointer(value)), true);
  }
}

/**
 * Windows.Win32.Media.KernelStreaming.KSP_NODE (size: 16)
 */
export interface KSP_NODE {
  /** Windows.Win32.Media.KernelStreaming.KSIDENTIFIER */
  Property: Uint8Array | Deno.PointerValue | null;
  /** u32 */
  NodeId: number;
  /** u32 */
  Reserved: number;
}

export const sizeofKSP_NODE = 16;

export function allocKSP_NODE(data?: Partial<KSP_NODE>): Uint8Array {
  const buf = new Uint8Array(sizeofKSP_NODE);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.Property !== undefined) view.setBigUint64(0, data.Property === null ? 0n : BigInt(util.toPointer(data.Property)), true);
  // 0x08: u32
  if (data?.NodeId !== undefined) view.setUint32(8, Number(data.NodeId), true);
  // 0x0c: u32
  if (data?.Reserved !== undefined) view.setUint32(12, Number(data.Reserved), true);
  return buf;
}

export class KSP_NODEView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get Property(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(0, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x08: u32
  get NodeId(): number {
    return this.view.getUint32(8, true);
  }

  // 0x0c: u32
  get Reserved(): number {
    return this.view.getUint32(12, true);
  }

  // 0x00: pointer
  set Property(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(0, BigInt(util.toPointer(value)), true);
  }

  // 0x08: u32
  set NodeId(value: number) {
    this.view.setUint32(8, value, true);
  }

  // 0x0c: u32
  set Reserved(value: number) {
    this.view.setUint32(12, value, true);
  }
}

/**
 * Windows.Win32.Media.DirectShow.KSP_NODE_ESPID (size: 16)
 */
export interface KSP_NODE_ESPID {
  /** Windows.Win32.Media.KernelStreaming.KSP_NODE */
  Property: Uint8Array | Deno.PointerValue | null;
  /** u32 */
  EsPid: number;
}

export const sizeofKSP_NODE_ESPID = 16;

export function allocKSP_NODE_ESPID(data?: Partial<KSP_NODE_ESPID>): Uint8Array {
  const buf = new Uint8Array(sizeofKSP_NODE_ESPID);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.Property !== undefined) view.setBigUint64(0, data.Property === null ? 0n : BigInt(util.toPointer(data.Property)), true);
  // 0x08: u32
  if (data?.EsPid !== undefined) view.setUint32(8, Number(data.EsPid), true);
  // 0x0c: pad4
  return buf;
}

export class KSP_NODE_ESPIDView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get Property(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(0, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x08: u32
  get EsPid(): number {
    return this.view.getUint32(8, true);
  }

  // 0x0c: pad4

  // 0x00: pointer
  set Property(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(0, BigInt(util.toPointer(value)), true);
  }

  // 0x08: u32
  set EsPid(value: number) {
    this.view.setUint32(8, value, true);
  }

  // 0x0c: pad4
}

/**
 * Windows.Win32.Media.DirectShow.KSM_BDA_DEBUG_LEVEL (size: 24)
 */
export interface KSM_BDA_DEBUG_LEVEL {
  /** Windows.Win32.Media.KernelStreaming.KSIDENTIFIER */
  Method: Uint8Array | Deno.PointerValue | null;
  /** u8 */
  ucDebugLevel: number;
  /** u32 */
  ulDebugStringSize: number;
  /** array */
  argbDebugString: Deno.PointerValue | null;
}

export const sizeofKSM_BDA_DEBUG_LEVEL = 24;

export function allocKSM_BDA_DEBUG_LEVEL(data?: Partial<KSM_BDA_DEBUG_LEVEL>): Uint8Array {
  const buf = new Uint8Array(sizeofKSM_BDA_DEBUG_LEVEL);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.Method !== undefined) view.setBigUint64(0, data.Method === null ? 0n : BigInt(util.toPointer(data.Method)), true);
  // 0x08: u8
  if (data?.ucDebugLevel !== undefined) view.setUint8(8, Number(data.ucDebugLevel));
  // 0x09: u32
  if (data?.ulDebugStringSize !== undefined) view.setUint32(9, Number(data.ulDebugStringSize), true);
  // 0x0d: pad3
  // 0x10: pointer
  if (data?.argbDebugString !== undefined) view.setBigUint64(16, data.argbDebugString === null ? 0n : BigInt(util.toPointer(data.argbDebugString)), true);
  return buf;
}

export class KSM_BDA_DEBUG_LEVELView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get Method(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(0, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x08: u8
  get ucDebugLevel(): number {
    return this.view.getUint8(8);
  }

  // 0x09: u32
  get ulDebugStringSize(): number {
    return this.view.getUint32(9, true);
  }

  // 0x0d: pad3

  // 0x10: pointer
  get argbDebugString(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(16, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: pointer
  set Method(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(0, BigInt(util.toPointer(value)), true);
  }

  // 0x08: u8
  set ucDebugLevel(value: number) {
    this.view.setUint8(8, value);
  }

  // 0x09: u32
  set ulDebugStringSize(value: number) {
    this.view.setUint32(9, value, true);
  }

  // 0x0d: pad3

  // 0x10: pointer
  set argbDebugString(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(16, BigInt(util.toPointer(value)), true);
  }
}

/**
 * Windows.Win32.Media.DirectShow.BDA_DEBUG_DATA (size: 32)
 */
export interface BDA_DEBUG_DATA {
  /** i32 */
  lResult: number;
  /** System.Guid */
  uuidDebugDataType: Uint8Array | Deno.PointerValue | null;
  /** u32 */
  ulDataSize: number;
  /** array */
  argbDebugData: Deno.PointerValue | null;
}

export const sizeofBDA_DEBUG_DATA = 32;

export function allocBDA_DEBUG_DATA(data?: Partial<BDA_DEBUG_DATA>): Uint8Array {
  const buf = new Uint8Array(sizeofBDA_DEBUG_DATA);
  const view = new DataView(buf.buffer);
  // 0x00: i32
  if (data?.lResult !== undefined) view.setInt32(0, Number(data.lResult), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.uuidDebugDataType !== undefined) view.setBigUint64(8, data.uuidDebugDataType === null ? 0n : BigInt(util.toPointer(data.uuidDebugDataType)), true);
  // 0x10: u32
  if (data?.ulDataSize !== undefined) view.setUint32(16, Number(data.ulDataSize), true);
  // 0x14: pad4
  // 0x18: pointer
  if (data?.argbDebugData !== undefined) view.setBigUint64(24, data.argbDebugData === null ? 0n : BigInt(util.toPointer(data.argbDebugData)), true);
  return buf;
}

export class BDA_DEBUG_DATAView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: i32
  get lResult(): number {
    return this.view.getInt32(0, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  get uuidDebugDataType(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(8, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x10: u32
  get ulDataSize(): number {
    return this.view.getUint32(16, true);
  }

  // 0x14: pad4

  // 0x18: pointer
  get argbDebugData(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(24, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: i32
  set lResult(value: number) {
    this.view.setInt32(0, value, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  set uuidDebugDataType(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(8, BigInt(util.toPointer(value)), true);
  }

  // 0x10: u32
  set ulDataSize(value: number) {
    this.view.setUint32(16, value, true);
  }

  // 0x14: pad4

  // 0x18: pointer
  set argbDebugData(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(24, BigInt(util.toPointer(value)), true);
  }
}

/**
 * Windows.Win32.Media.DirectShow.BDA_EVENT_DATA (size: 32)
 */
export interface BDA_EVENT_DATA {
  /** i32 */
  lResult: number;
  /** u32 */
  ulEventID: number;
  /** System.Guid */
  uuidEventType: Uint8Array | Deno.PointerValue | null;
  /** u32 */
  ulEventDataLength: number;
  /** array */
  argbEventData: Deno.PointerValue | null;
}

export const sizeofBDA_EVENT_DATA = 32;

export function allocBDA_EVENT_DATA(data?: Partial<BDA_EVENT_DATA>): Uint8Array {
  const buf = new Uint8Array(sizeofBDA_EVENT_DATA);
  const view = new DataView(buf.buffer);
  // 0x00: i32
  if (data?.lResult !== undefined) view.setInt32(0, Number(data.lResult), true);
  // 0x04: u32
  if (data?.ulEventID !== undefined) view.setUint32(4, Number(data.ulEventID), true);
  // 0x08: pointer
  if (data?.uuidEventType !== undefined) view.setBigUint64(8, data.uuidEventType === null ? 0n : BigInt(util.toPointer(data.uuidEventType)), true);
  // 0x10: u32
  if (data?.ulEventDataLength !== undefined) view.setUint32(16, Number(data.ulEventDataLength), true);
  // 0x14: pad4
  // 0x18: pointer
  if (data?.argbEventData !== undefined) view.setBigUint64(24, data.argbEventData === null ? 0n : BigInt(util.toPointer(data.argbEventData)), true);
  return buf;
}

export class BDA_EVENT_DATAView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: i32
  get lResult(): number {
    return this.view.getInt32(0, true);
  }

  // 0x04: u32
  get ulEventID(): number {
    return this.view.getUint32(4, true);
  }

  // 0x08: pointer
  get uuidEventType(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(8, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x10: u32
  get ulEventDataLength(): number {
    return this.view.getUint32(16, true);
  }

  // 0x14: pad4

  // 0x18: pointer
  get argbEventData(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(24, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: i32
  set lResult(value: number) {
    this.view.setInt32(0, value, true);
  }

  // 0x04: u32
  set ulEventID(value: number) {
    this.view.setUint32(4, value, true);
  }

  // 0x08: pointer
  set uuidEventType(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(8, BigInt(util.toPointer(value)), true);
  }

  // 0x10: u32
  set ulEventDataLength(value: number) {
    this.view.setUint32(16, value, true);
  }

  // 0x14: pad4

  // 0x18: pointer
  set argbEventData(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(24, BigInt(util.toPointer(value)), true);
  }
}

/**
 * Windows.Win32.Media.DirectShow.KSM_BDA_EVENT_COMPLETE (size: 16)
 */
export interface KSM_BDA_EVENT_COMPLETE {
  /** Windows.Win32.Media.KernelStreaming.KSIDENTIFIER */
  Method: Uint8Array | Deno.PointerValue | null;
  /** u32 */
  ulEventID: number;
  /** u32 */
  ulEventResult: number;
}

export const sizeofKSM_BDA_EVENT_COMPLETE = 16;

export function allocKSM_BDA_EVENT_COMPLETE(data?: Partial<KSM_BDA_EVENT_COMPLETE>): Uint8Array {
  const buf = new Uint8Array(sizeofKSM_BDA_EVENT_COMPLETE);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.Method !== undefined) view.setBigUint64(0, data.Method === null ? 0n : BigInt(util.toPointer(data.Method)), true);
  // 0x08: u32
  if (data?.ulEventID !== undefined) view.setUint32(8, Number(data.ulEventID), true);
  // 0x0c: u32
  if (data?.ulEventResult !== undefined) view.setUint32(12, Number(data.ulEventResult), true);
  return buf;
}

export class KSM_BDA_EVENT_COMPLETEView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get Method(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(0, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x08: u32
  get ulEventID(): number {
    return this.view.getUint32(8, true);
  }

  // 0x0c: u32
  get ulEventResult(): number {
    return this.view.getUint32(12, true);
  }

  // 0x00: pointer
  set Method(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(0, BigInt(util.toPointer(value)), true);
  }

  // 0x08: u32
  set ulEventID(value: number) {
    this.view.setUint32(8, value, true);
  }

  // 0x0c: u32
  set ulEventResult(value: number) {
    this.view.setUint32(12, value, true);
  }
}

/**
 * Windows.Win32.Media.KernelStreaming.KSM_NODE (size: 16)
 */
export interface KSM_NODE {
  /** Windows.Win32.Media.KernelStreaming.KSIDENTIFIER */
  Method: Uint8Array | Deno.PointerValue | null;
  /** u32 */
  NodeId: number;
  /** u32 */
  Reserved: number;
}

export const sizeofKSM_NODE = 16;

export function allocKSM_NODE(data?: Partial<KSM_NODE>): Uint8Array {
  const buf = new Uint8Array(sizeofKSM_NODE);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.Method !== undefined) view.setBigUint64(0, data.Method === null ? 0n : BigInt(util.toPointer(data.Method)), true);
  // 0x08: u32
  if (data?.NodeId !== undefined) view.setUint32(8, Number(data.NodeId), true);
  // 0x0c: u32
  if (data?.Reserved !== undefined) view.setUint32(12, Number(data.Reserved), true);
  return buf;
}

export class KSM_NODEView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get Method(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(0, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x08: u32
  get NodeId(): number {
    return this.view.getUint32(8, true);
  }

  // 0x0c: u32
  get Reserved(): number {
    return this.view.getUint32(12, true);
  }

  // 0x00: pointer
  set Method(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(0, BigInt(util.toPointer(value)), true);
  }

  // 0x08: u32
  set NodeId(value: number) {
    this.view.setUint32(8, value, true);
  }

  // 0x0c: u32
  set Reserved(value: number) {
    this.view.setUint32(12, value, true);
  }
}

/**
 * Windows.Win32.Media.DirectShow.KSM_BDA_DRM_SETDRM (size: 16)
 */
export interface KSM_BDA_DRM_SETDRM {
  /** Windows.Win32.Media.KernelStreaming.KSM_NODE */
  NodeMethod: Uint8Array | Deno.PointerValue | null;
  /** System.Guid */
  NewDRMuuid: Uint8Array | Deno.PointerValue | null;
}

export const sizeofKSM_BDA_DRM_SETDRM = 16;

export function allocKSM_BDA_DRM_SETDRM(data?: Partial<KSM_BDA_DRM_SETDRM>): Uint8Array {
  const buf = new Uint8Array(sizeofKSM_BDA_DRM_SETDRM);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.NodeMethod !== undefined) view.setBigUint64(0, data.NodeMethod === null ? 0n : BigInt(util.toPointer(data.NodeMethod)), true);
  // 0x08: pointer
  if (data?.NewDRMuuid !== undefined) view.setBigUint64(8, data.NewDRMuuid === null ? 0n : BigInt(util.toPointer(data.NewDRMuuid)), true);
  return buf;
}

export class KSM_BDA_DRM_SETDRMView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get NodeMethod(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(0, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x08: pointer
  get NewDRMuuid(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(8, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: pointer
  set NodeMethod(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(0, BigInt(util.toPointer(value)), true);
  }

  // 0x08: pointer
  set NewDRMuuid(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(8, BigInt(util.toPointer(value)), true);
  }
}

/**
 * Windows.Win32.Media.DirectShow.KSM_BDA_BUFFER (size: 24)
 */
export interface KSM_BDA_BUFFER {
  /** Windows.Win32.Media.KernelStreaming.KSM_NODE */
  NodeMethod: Uint8Array | Deno.PointerValue | null;
  /** u32 */
  ulBufferSize: number;
  /** array */
  argbBuffer: Deno.PointerValue | null;
}

export const sizeofKSM_BDA_BUFFER = 24;

export function allocKSM_BDA_BUFFER(data?: Partial<KSM_BDA_BUFFER>): Uint8Array {
  const buf = new Uint8Array(sizeofKSM_BDA_BUFFER);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.NodeMethod !== undefined) view.setBigUint64(0, data.NodeMethod === null ? 0n : BigInt(util.toPointer(data.NodeMethod)), true);
  // 0x08: u32
  if (data?.ulBufferSize !== undefined) view.setUint32(8, Number(data.ulBufferSize), true);
  // 0x0c: pad4
  // 0x10: pointer
  if (data?.argbBuffer !== undefined) view.setBigUint64(16, data.argbBuffer === null ? 0n : BigInt(util.toPointer(data.argbBuffer)), true);
  return buf;
}

export class KSM_BDA_BUFFERView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get NodeMethod(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(0, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x08: u32
  get ulBufferSize(): number {
    return this.view.getUint32(8, true);
  }

  // 0x0c: pad4

  // 0x10: pointer
  get argbBuffer(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(16, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: pointer
  set NodeMethod(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(0, BigInt(util.toPointer(value)), true);
  }

  // 0x08: u32
  set ulBufferSize(value: number) {
    this.view.setUint32(8, value, true);
  }

  // 0x0c: pad4

  // 0x10: pointer
  set argbBuffer(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(16, BigInt(util.toPointer(value)), true);
  }
}

/**
 * Windows.Win32.Media.DirectShow.KSM_BDA_WMDRM_LICENSE (size: 16)
 */
export interface KSM_BDA_WMDRM_LICENSE {
  /** Windows.Win32.Media.KernelStreaming.KSM_NODE */
  NodeMethod: Uint8Array | Deno.PointerValue | null;
  /** System.Guid */
  uuidKeyID: Uint8Array | Deno.PointerValue | null;
}

export const sizeofKSM_BDA_WMDRM_LICENSE = 16;

export function allocKSM_BDA_WMDRM_LICENSE(data?: Partial<KSM_BDA_WMDRM_LICENSE>): Uint8Array {
  const buf = new Uint8Array(sizeofKSM_BDA_WMDRM_LICENSE);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.NodeMethod !== undefined) view.setBigUint64(0, data.NodeMethod === null ? 0n : BigInt(util.toPointer(data.NodeMethod)), true);
  // 0x08: pointer
  if (data?.uuidKeyID !== undefined) view.setBigUint64(8, data.uuidKeyID === null ? 0n : BigInt(util.toPointer(data.uuidKeyID)), true);
  return buf;
}

export class KSM_BDA_WMDRM_LICENSEView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get NodeMethod(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(0, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x08: pointer
  get uuidKeyID(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(8, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: pointer
  set NodeMethod(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(0, BigInt(util.toPointer(value)), true);
  }

  // 0x08: pointer
  set uuidKeyID(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(8, BigInt(util.toPointer(value)), true);
  }
}

/**
 * Windows.Win32.Media.DirectShow.KSM_BDA_WMDRM_RENEWLICENSE (size: 24)
 */
export interface KSM_BDA_WMDRM_RENEWLICENSE {
  /** Windows.Win32.Media.KernelStreaming.KSM_NODE */
  NodeMethod: Uint8Array | Deno.PointerValue | null;
  /** u32 */
  ulXMRLicenseLength: number;
  /** u32 */
  ulEntitlementTokenLength: number;
  /** array */
  argbDataBuffer: Deno.PointerValue | null;
}

export const sizeofKSM_BDA_WMDRM_RENEWLICENSE = 24;

export function allocKSM_BDA_WMDRM_RENEWLICENSE(data?: Partial<KSM_BDA_WMDRM_RENEWLICENSE>): Uint8Array {
  const buf = new Uint8Array(sizeofKSM_BDA_WMDRM_RENEWLICENSE);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.NodeMethod !== undefined) view.setBigUint64(0, data.NodeMethod === null ? 0n : BigInt(util.toPointer(data.NodeMethod)), true);
  // 0x08: u32
  if (data?.ulXMRLicenseLength !== undefined) view.setUint32(8, Number(data.ulXMRLicenseLength), true);
  // 0x0c: u32
  if (data?.ulEntitlementTokenLength !== undefined) view.setUint32(12, Number(data.ulEntitlementTokenLength), true);
  // 0x10: pointer
  if (data?.argbDataBuffer !== undefined) view.setBigUint64(16, data.argbDataBuffer === null ? 0n : BigInt(util.toPointer(data.argbDataBuffer)), true);
  return buf;
}

export class KSM_BDA_WMDRM_RENEWLICENSEView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get NodeMethod(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(0, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x08: u32
  get ulXMRLicenseLength(): number {
    return this.view.getUint32(8, true);
  }

  // 0x0c: u32
  get ulEntitlementTokenLength(): number {
    return this.view.getUint32(12, true);
  }

  // 0x10: pointer
  get argbDataBuffer(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(16, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: pointer
  set NodeMethod(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(0, BigInt(util.toPointer(value)), true);
  }

  // 0x08: u32
  set ulXMRLicenseLength(value: number) {
    this.view.setUint32(8, value, true);
  }

  // 0x0c: u32
  set ulEntitlementTokenLength(value: number) {
    this.view.setUint32(12, value, true);
  }

  // 0x10: pointer
  set argbDataBuffer(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(16, BigInt(util.toPointer(value)), true);
  }
}

/**
 * Windows.Win32.Media.DirectShow.KSM_BDA_WMDRMTUNER_PURCHASEENTITLEMENT (size: 40)
 */
export interface KSM_BDA_WMDRMTUNER_PURCHASEENTITLEMENT {
  /** Windows.Win32.Media.KernelStreaming.KSM_NODE */
  NodeMethod: Uint8Array | Deno.PointerValue | null;
  /** u32 */
  ulDialogRequest: number;
  /** array */
  cLanguage: Deno.PointerValue | null;
  /** u32 */
  ulPurchaseTokenLength: number;
  /** array */
  argbDataBuffer: Deno.PointerValue | null;
}

export const sizeofKSM_BDA_WMDRMTUNER_PURCHASEENTITLEMENT = 40;

export function allocKSM_BDA_WMDRMTUNER_PURCHASEENTITLEMENT(data?: Partial<KSM_BDA_WMDRMTUNER_PURCHASEENTITLEMENT>): Uint8Array {
  const buf = new Uint8Array(sizeofKSM_BDA_WMDRMTUNER_PURCHASEENTITLEMENT);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.NodeMethod !== undefined) view.setBigUint64(0, data.NodeMethod === null ? 0n : BigInt(util.toPointer(data.NodeMethod)), true);
  // 0x08: u32
  if (data?.ulDialogRequest !== undefined) view.setUint32(8, Number(data.ulDialogRequest), true);
  // 0x0c: pad4
  // 0x10: pointer
  if (data?.cLanguage !== undefined) view.setBigUint64(16, data.cLanguage === null ? 0n : BigInt(util.toPointer(data.cLanguage)), true);
  // 0x18: u32
  if (data?.ulPurchaseTokenLength !== undefined) view.setUint32(24, Number(data.ulPurchaseTokenLength), true);
  // 0x1c: pad4
  // 0x20: pointer
  if (data?.argbDataBuffer !== undefined) view.setBigUint64(32, data.argbDataBuffer === null ? 0n : BigInt(util.toPointer(data.argbDataBuffer)), true);
  return buf;
}

export class KSM_BDA_WMDRMTUNER_PURCHASEENTITLEMENTView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get NodeMethod(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(0, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x08: u32
  get ulDialogRequest(): number {
    return this.view.getUint32(8, true);
  }

  // 0x0c: pad4

  // 0x10: pointer
  get cLanguage(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(16, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x18: u32
  get ulPurchaseTokenLength(): number {
    return this.view.getUint32(24, true);
  }

  // 0x1c: pad4

  // 0x20: pointer
  get argbDataBuffer(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(32, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: pointer
  set NodeMethod(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(0, BigInt(util.toPointer(value)), true);
  }

  // 0x08: u32
  set ulDialogRequest(value: number) {
    this.view.setUint32(8, value, true);
  }

  // 0x0c: pad4

  // 0x10: pointer
  set cLanguage(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(16, BigInt(util.toPointer(value)), true);
  }

  // 0x18: u32
  set ulPurchaseTokenLength(value: number) {
    this.view.setUint32(24, value, true);
  }

  // 0x1c: pad4

  // 0x20: pointer
  set argbDataBuffer(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(32, BigInt(util.toPointer(value)), true);
  }
}

/**
 * Windows.Win32.Media.DirectShow.KSM_BDA_WMDRMTUNER_SETPIDPROTECTION (size: 24)
 */
export interface KSM_BDA_WMDRMTUNER_SETPIDPROTECTION {
  /** Windows.Win32.Media.KernelStreaming.KSM_NODE */
  NodeMethod: Uint8Array | Deno.PointerValue | null;
  /** u32 */
  ulPID: number;
  /** System.Guid */
  uuidKeyID: Uint8Array | Deno.PointerValue | null;
}

export const sizeofKSM_BDA_WMDRMTUNER_SETPIDPROTECTION = 24;

export function allocKSM_BDA_WMDRMTUNER_SETPIDPROTECTION(data?: Partial<KSM_BDA_WMDRMTUNER_SETPIDPROTECTION>): Uint8Array {
  const buf = new Uint8Array(sizeofKSM_BDA_WMDRMTUNER_SETPIDPROTECTION);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.NodeMethod !== undefined) view.setBigUint64(0, data.NodeMethod === null ? 0n : BigInt(util.toPointer(data.NodeMethod)), true);
  // 0x08: u32
  if (data?.ulPID !== undefined) view.setUint32(8, Number(data.ulPID), true);
  // 0x0c: pad4
  // 0x10: pointer
  if (data?.uuidKeyID !== undefined) view.setBigUint64(16, data.uuidKeyID === null ? 0n : BigInt(util.toPointer(data.uuidKeyID)), true);
  return buf;
}

export class KSM_BDA_WMDRMTUNER_SETPIDPROTECTIONView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get NodeMethod(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(0, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x08: u32
  get ulPID(): number {
    return this.view.getUint32(8, true);
  }

  // 0x0c: pad4

  // 0x10: pointer
  get uuidKeyID(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(16, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: pointer
  set NodeMethod(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(0, BigInt(util.toPointer(value)), true);
  }

  // 0x08: u32
  set ulPID(value: number) {
    this.view.setUint32(8, value, true);
  }

  // 0x0c: pad4

  // 0x10: pointer
  set uuidKeyID(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(16, BigInt(util.toPointer(value)), true);
  }
}

/**
 * Windows.Win32.Media.DirectShow.KSM_BDA_WMDRMTUNER_GETPIDPROTECTION (size: 16)
 */
export interface KSM_BDA_WMDRMTUNER_GETPIDPROTECTION {
  /** Windows.Win32.Media.KernelStreaming.KSM_NODE */
  NodeMethod: Uint8Array | Deno.PointerValue | null;
  /** u32 */
  ulPID: number;
}

export const sizeofKSM_BDA_WMDRMTUNER_GETPIDPROTECTION = 16;

export function allocKSM_BDA_WMDRMTUNER_GETPIDPROTECTION(data?: Partial<KSM_BDA_WMDRMTUNER_GETPIDPROTECTION>): Uint8Array {
  const buf = new Uint8Array(sizeofKSM_BDA_WMDRMTUNER_GETPIDPROTECTION);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.NodeMethod !== undefined) view.setBigUint64(0, data.NodeMethod === null ? 0n : BigInt(util.toPointer(data.NodeMethod)), true);
  // 0x08: u32
  if (data?.ulPID !== undefined) view.setUint32(8, Number(data.ulPID), true);
  // 0x0c: pad4
  return buf;
}

export class KSM_BDA_WMDRMTUNER_GETPIDPROTECTIONView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get NodeMethod(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(0, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x08: u32
  get ulPID(): number {
    return this.view.getUint32(8, true);
  }

  // 0x0c: pad4

  // 0x00: pointer
  set NodeMethod(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(0, BigInt(util.toPointer(value)), true);
  }

  // 0x08: u32
  set ulPID(value: number) {
    this.view.setUint32(8, value, true);
  }

  // 0x0c: pad4
}

/**
 * Windows.Win32.Media.DirectShow.KSM_BDA_WMDRMTUNER_SYNCVALUE (size: 16)
 */
export interface KSM_BDA_WMDRMTUNER_SYNCVALUE {
  /** Windows.Win32.Media.KernelStreaming.KSM_NODE */
  NodeMethod: Uint8Array | Deno.PointerValue | null;
  /** u32 */
  ulSyncValue: number;
}

export const sizeofKSM_BDA_WMDRMTUNER_SYNCVALUE = 16;

export function allocKSM_BDA_WMDRMTUNER_SYNCVALUE(data?: Partial<KSM_BDA_WMDRMTUNER_SYNCVALUE>): Uint8Array {
  const buf = new Uint8Array(sizeofKSM_BDA_WMDRMTUNER_SYNCVALUE);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.NodeMethod !== undefined) view.setBigUint64(0, data.NodeMethod === null ? 0n : BigInt(util.toPointer(data.NodeMethod)), true);
  // 0x08: u32
  if (data?.ulSyncValue !== undefined) view.setUint32(8, Number(data.ulSyncValue), true);
  // 0x0c: pad4
  return buf;
}

export class KSM_BDA_WMDRMTUNER_SYNCVALUEView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get NodeMethod(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(0, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x08: u32
  get ulSyncValue(): number {
    return this.view.getUint32(8, true);
  }

  // 0x0c: pad4

  // 0x00: pointer
  set NodeMethod(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(0, BigInt(util.toPointer(value)), true);
  }

  // 0x08: u32
  set ulSyncValue(value: number) {
    this.view.setUint32(8, value, true);
  }

  // 0x0c: pad4
}

/**
 * Windows.Win32.Media.DirectShow.KSM_BDA_TUNER_TUNEREQUEST (size: 24)
 */
export interface KSM_BDA_TUNER_TUNEREQUEST {
  /** Windows.Win32.Media.KernelStreaming.KSIDENTIFIER */
  Method: Uint8Array | Deno.PointerValue | null;
  /** u32 */
  ulTuneLength: number;
  /** array */
  argbTuneData: Deno.PointerValue | null;
}

export const sizeofKSM_BDA_TUNER_TUNEREQUEST = 24;

export function allocKSM_BDA_TUNER_TUNEREQUEST(data?: Partial<KSM_BDA_TUNER_TUNEREQUEST>): Uint8Array {
  const buf = new Uint8Array(sizeofKSM_BDA_TUNER_TUNEREQUEST);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.Method !== undefined) view.setBigUint64(0, data.Method === null ? 0n : BigInt(util.toPointer(data.Method)), true);
  // 0x08: u32
  if (data?.ulTuneLength !== undefined) view.setUint32(8, Number(data.ulTuneLength), true);
  // 0x0c: pad4
  // 0x10: pointer
  if (data?.argbTuneData !== undefined) view.setBigUint64(16, data.argbTuneData === null ? 0n : BigInt(util.toPointer(data.argbTuneData)), true);
  return buf;
}

export class KSM_BDA_TUNER_TUNEREQUESTView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get Method(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(0, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x08: u32
  get ulTuneLength(): number {
    return this.view.getUint32(8, true);
  }

  // 0x0c: pad4

  // 0x10: pointer
  get argbTuneData(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(16, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: pointer
  set Method(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(0, BigInt(util.toPointer(value)), true);
  }

  // 0x08: u32
  set ulTuneLength(value: number) {
    this.view.setUint32(8, value, true);
  }

  // 0x0c: pad4

  // 0x10: pointer
  set argbTuneData(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(16, BigInt(util.toPointer(value)), true);
  }
}

/**
 * Windows.Win32.Media.DirectShow.KSM_BDA_GPNV_GETVALUE (size: 32)
 */
export interface KSM_BDA_GPNV_GETVALUE {
  /** Windows.Win32.Media.KernelStreaming.KSIDENTIFIER */
  Method: Uint8Array | Deno.PointerValue | null;
  /** u32 */
  ulNameLength: number;
  /** array */
  cLanguage: Deno.PointerValue | null;
  /** array */
  argbData: Deno.PointerValue | null;
}

export const sizeofKSM_BDA_GPNV_GETVALUE = 32;

export function allocKSM_BDA_GPNV_GETVALUE(data?: Partial<KSM_BDA_GPNV_GETVALUE>): Uint8Array {
  const buf = new Uint8Array(sizeofKSM_BDA_GPNV_GETVALUE);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.Method !== undefined) view.setBigUint64(0, data.Method === null ? 0n : BigInt(util.toPointer(data.Method)), true);
  // 0x08: u32
  if (data?.ulNameLength !== undefined) view.setUint32(8, Number(data.ulNameLength), true);
  // 0x0c: pad4
  // 0x10: pointer
  if (data?.cLanguage !== undefined) view.setBigUint64(16, data.cLanguage === null ? 0n : BigInt(util.toPointer(data.cLanguage)), true);
  // 0x18: pointer
  if (data?.argbData !== undefined) view.setBigUint64(24, data.argbData === null ? 0n : BigInt(util.toPointer(data.argbData)), true);
  return buf;
}

export class KSM_BDA_GPNV_GETVALUEView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get Method(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(0, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x08: u32
  get ulNameLength(): number {
    return this.view.getUint32(8, true);
  }

  // 0x0c: pad4

  // 0x10: pointer
  get cLanguage(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(16, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x18: pointer
  get argbData(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(24, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: pointer
  set Method(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(0, BigInt(util.toPointer(value)), true);
  }

  // 0x08: u32
  set ulNameLength(value: number) {
    this.view.setUint32(8, value, true);
  }

  // 0x0c: pad4

  // 0x10: pointer
  set cLanguage(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(16, BigInt(util.toPointer(value)), true);
  }

  // 0x18: pointer
  set argbData(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(24, BigInt(util.toPointer(value)), true);
  }
}

/**
 * Windows.Win32.Media.DirectShow.KSM_BDA_GPNV_SETVALUE (size: 40)
 */
export interface KSM_BDA_GPNV_SETVALUE {
  /** Windows.Win32.Media.KernelStreaming.KSIDENTIFIER */
  Method: Uint8Array | Deno.PointerValue | null;
  /** u32 */
  ulDialogRequest: number;
  /** array */
  cLanguage: Deno.PointerValue | null;
  /** u32 */
  ulNameLength: number;
  /** u32 */
  ulValueLength: number;
  /** array */
  argbName: Deno.PointerValue | null;
}

export const sizeofKSM_BDA_GPNV_SETVALUE = 40;

export function allocKSM_BDA_GPNV_SETVALUE(data?: Partial<KSM_BDA_GPNV_SETVALUE>): Uint8Array {
  const buf = new Uint8Array(sizeofKSM_BDA_GPNV_SETVALUE);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.Method !== undefined) view.setBigUint64(0, data.Method === null ? 0n : BigInt(util.toPointer(data.Method)), true);
  // 0x08: u32
  if (data?.ulDialogRequest !== undefined) view.setUint32(8, Number(data.ulDialogRequest), true);
  // 0x0c: pad4
  // 0x10: pointer
  if (data?.cLanguage !== undefined) view.setBigUint64(16, data.cLanguage === null ? 0n : BigInt(util.toPointer(data.cLanguage)), true);
  // 0x18: u32
  if (data?.ulNameLength !== undefined) view.setUint32(24, Number(data.ulNameLength), true);
  // 0x1c: u32
  if (data?.ulValueLength !== undefined) view.setUint32(28, Number(data.ulValueLength), true);
  // 0x20: pointer
  if (data?.argbName !== undefined) view.setBigUint64(32, data.argbName === null ? 0n : BigInt(util.toPointer(data.argbName)), true);
  return buf;
}

export class KSM_BDA_GPNV_SETVALUEView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get Method(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(0, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x08: u32
  get ulDialogRequest(): number {
    return this.view.getUint32(8, true);
  }

  // 0x0c: pad4

  // 0x10: pointer
  get cLanguage(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(16, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x18: u32
  get ulNameLength(): number {
    return this.view.getUint32(24, true);
  }

  // 0x1c: u32
  get ulValueLength(): number {
    return this.view.getUint32(28, true);
  }

  // 0x20: pointer
  get argbName(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(32, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: pointer
  set Method(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(0, BigInt(util.toPointer(value)), true);
  }

  // 0x08: u32
  set ulDialogRequest(value: number) {
    this.view.setUint32(8, value, true);
  }

  // 0x0c: pad4

  // 0x10: pointer
  set cLanguage(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(16, BigInt(util.toPointer(value)), true);
  }

  // 0x18: u32
  set ulNameLength(value: number) {
    this.view.setUint32(24, value, true);
  }

  // 0x1c: u32
  set ulValueLength(value: number) {
    this.view.setUint32(28, value, true);
  }

  // 0x20: pointer
  set argbName(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(32, BigInt(util.toPointer(value)), true);
  }
}

/**
 * Windows.Win32.Media.DirectShow.KSM_BDA_GPNV_NAMEINDEX (size: 16)
 */
export interface KSM_BDA_GPNV_NAMEINDEX {
  /** Windows.Win32.Media.KernelStreaming.KSIDENTIFIER */
  Method: Uint8Array | Deno.PointerValue | null;
  /** u32 */
  ulValueNameIndex: number;
}

export const sizeofKSM_BDA_GPNV_NAMEINDEX = 16;

export function allocKSM_BDA_GPNV_NAMEINDEX(data?: Partial<KSM_BDA_GPNV_NAMEINDEX>): Uint8Array {
  const buf = new Uint8Array(sizeofKSM_BDA_GPNV_NAMEINDEX);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.Method !== undefined) view.setBigUint64(0, data.Method === null ? 0n : BigInt(util.toPointer(data.Method)), true);
  // 0x08: u32
  if (data?.ulValueNameIndex !== undefined) view.setUint32(8, Number(data.ulValueNameIndex), true);
  // 0x0c: pad4
  return buf;
}

export class KSM_BDA_GPNV_NAMEINDEXView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get Method(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(0, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x08: u32
  get ulValueNameIndex(): number {
    return this.view.getUint32(8, true);
  }

  // 0x0c: pad4

  // 0x00: pointer
  set Method(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(0, BigInt(util.toPointer(value)), true);
  }

  // 0x08: u32
  set ulValueNameIndex(value: number) {
    this.view.setUint32(8, value, true);
  }

  // 0x0c: pad4
}

/**
 * Windows.Win32.Media.DirectShow.KSM_BDA_SCAN_CAPABILTIES (size: 16)
 */
export interface KSM_BDA_SCAN_CAPABILTIES {
  /** Windows.Win32.Media.KernelStreaming.KSIDENTIFIER */
  Method: Uint8Array | Deno.PointerValue | null;
  /** System.Guid */
  uuidBroadcastStandard: Uint8Array | Deno.PointerValue | null;
}

export const sizeofKSM_BDA_SCAN_CAPABILTIES = 16;

export function allocKSM_BDA_SCAN_CAPABILTIES(data?: Partial<KSM_BDA_SCAN_CAPABILTIES>): Uint8Array {
  const buf = new Uint8Array(sizeofKSM_BDA_SCAN_CAPABILTIES);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.Method !== undefined) view.setBigUint64(0, data.Method === null ? 0n : BigInt(util.toPointer(data.Method)), true);
  // 0x08: pointer
  if (data?.uuidBroadcastStandard !== undefined) view.setBigUint64(8, data.uuidBroadcastStandard === null ? 0n : BigInt(util.toPointer(data.uuidBroadcastStandard)), true);
  return buf;
}

export class KSM_BDA_SCAN_CAPABILTIESView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get Method(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(0, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x08: pointer
  get uuidBroadcastStandard(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(8, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: pointer
  set Method(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(0, BigInt(util.toPointer(value)), true);
  }

  // 0x08: pointer
  set uuidBroadcastStandard(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(8, BigInt(util.toPointer(value)), true);
  }
}

/**
 * Windows.Win32.Media.DirectShow.KSM_BDA_SCAN_FILTER (size: 32)
 */
export interface KSM_BDA_SCAN_FILTER {
  /** Windows.Win32.Media.KernelStreaming.KSIDENTIFIER */
  Method: Uint8Array | Deno.PointerValue | null;
  /** u32 */
  ulScanModulationTypeSize: number;
  /** u64 */
  AnalogVideoStandards: Deno.PointerValue;
  /** array */
  argbScanModulationTypes: Deno.PointerValue | null;
}

export const sizeofKSM_BDA_SCAN_FILTER = 32;

export function allocKSM_BDA_SCAN_FILTER(data?: Partial<KSM_BDA_SCAN_FILTER>): Uint8Array {
  const buf = new Uint8Array(sizeofKSM_BDA_SCAN_FILTER);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.Method !== undefined) view.setBigUint64(0, data.Method === null ? 0n : BigInt(util.toPointer(data.Method)), true);
  // 0x08: u32
  if (data?.ulScanModulationTypeSize !== undefined) view.setUint32(8, Number(data.ulScanModulationTypeSize), true);
  // 0x0c: pad4
  // 0x10: u64
  if (data?.AnalogVideoStandards !== undefined) view.setBigUint64(16, BigInt(data.AnalogVideoStandards), true);
  // 0x18: pointer
  if (data?.argbScanModulationTypes !== undefined) view.setBigUint64(24, data.argbScanModulationTypes === null ? 0n : BigInt(util.toPointer(data.argbScanModulationTypes)), true);
  return buf;
}

export class KSM_BDA_SCAN_FILTERView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get Method(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(0, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x08: u32
  get ulScanModulationTypeSize(): number {
    return this.view.getUint32(8, true);
  }

  // 0x0c: pad4

  // 0x10: u64
  get AnalogVideoStandards(): Deno.PointerValue {
    return Number(this.view.getBigUint64(16, true));
  }

  // 0x18: pointer
  get argbScanModulationTypes(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(24, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: pointer
  set Method(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(0, BigInt(util.toPointer(value)), true);
  }

  // 0x08: u32
  set ulScanModulationTypeSize(value: number) {
    this.view.setUint32(8, value, true);
  }

  // 0x0c: pad4

  // 0x10: u64
  set AnalogVideoStandards(value: Deno.PointerValue) {
    this.view.setBigUint64(16, BigInt(value), true);
  }

  // 0x18: pointer
  set argbScanModulationTypes(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(24, BigInt(util.toPointer(value)), true);
  }
}

/**
 * Windows.Win32.Media.DirectShow.KSM_BDA_SCAN_START (size: 16)
 */
export interface KSM_BDA_SCAN_START {
  /** Windows.Win32.Media.KernelStreaming.KSIDENTIFIER */
  Method: Uint8Array | Deno.PointerValue | null;
  /** u32 */
  LowerFrequency: number;
  /** u32 */
  HigherFrequency: number;
}

export const sizeofKSM_BDA_SCAN_START = 16;

export function allocKSM_BDA_SCAN_START(data?: Partial<KSM_BDA_SCAN_START>): Uint8Array {
  const buf = new Uint8Array(sizeofKSM_BDA_SCAN_START);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.Method !== undefined) view.setBigUint64(0, data.Method === null ? 0n : BigInt(util.toPointer(data.Method)), true);
  // 0x08: u32
  if (data?.LowerFrequency !== undefined) view.setUint32(8, Number(data.LowerFrequency), true);
  // 0x0c: u32
  if (data?.HigherFrequency !== undefined) view.setUint32(12, Number(data.HigherFrequency), true);
  return buf;
}

export class KSM_BDA_SCAN_STARTView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get Method(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(0, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x08: u32
  get LowerFrequency(): number {
    return this.view.getUint32(8, true);
  }

  // 0x0c: u32
  get HigherFrequency(): number {
    return this.view.getUint32(12, true);
  }

  // 0x00: pointer
  set Method(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(0, BigInt(util.toPointer(value)), true);
  }

  // 0x08: u32
  set LowerFrequency(value: number) {
    this.view.setUint32(8, value, true);
  }

  // 0x0c: u32
  set HigherFrequency(value: number) {
    this.view.setUint32(12, value, true);
  }
}

/**
 * Windows.Win32.Media.DirectShow.KSM_BDA_GDDS_TUNEXMLFROMIDX (size: 16)
 */
export interface KSM_BDA_GDDS_TUNEXMLFROMIDX {
  /** Windows.Win32.Media.KernelStreaming.KSIDENTIFIER */
  Method: Uint8Array | Deno.PointerValue | null;
  /** u64 */
  ulIdx: Deno.PointerValue;
}

export const sizeofKSM_BDA_GDDS_TUNEXMLFROMIDX = 16;

export function allocKSM_BDA_GDDS_TUNEXMLFROMIDX(data?: Partial<KSM_BDA_GDDS_TUNEXMLFROMIDX>): Uint8Array {
  const buf = new Uint8Array(sizeofKSM_BDA_GDDS_TUNEXMLFROMIDX);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.Method !== undefined) view.setBigUint64(0, data.Method === null ? 0n : BigInt(util.toPointer(data.Method)), true);
  // 0x08: u64
  if (data?.ulIdx !== undefined) view.setBigUint64(8, BigInt(data.ulIdx), true);
  return buf;
}

export class KSM_BDA_GDDS_TUNEXMLFROMIDXView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get Method(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(0, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x08: u64
  get ulIdx(): Deno.PointerValue {
    return Number(this.view.getBigUint64(8, true));
  }

  // 0x00: pointer
  set Method(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(0, BigInt(util.toPointer(value)), true);
  }

  // 0x08: u64
  set ulIdx(value: Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(value), true);
  }
}

/**
 * Windows.Win32.Media.DirectShow.KSM_BDA_GDDS_SERVICEFROMTUNEXML (size: 24)
 */
export interface KSM_BDA_GDDS_SERVICEFROMTUNEXML {
  /** Windows.Win32.Media.KernelStreaming.KSIDENTIFIER */
  Method: Uint8Array | Deno.PointerValue | null;
  /** u32 */
  ulTuneXmlLength: number;
  /** array */
  argbTuneXml: Deno.PointerValue | null;
}

export const sizeofKSM_BDA_GDDS_SERVICEFROMTUNEXML = 24;

export function allocKSM_BDA_GDDS_SERVICEFROMTUNEXML(data?: Partial<KSM_BDA_GDDS_SERVICEFROMTUNEXML>): Uint8Array {
  const buf = new Uint8Array(sizeofKSM_BDA_GDDS_SERVICEFROMTUNEXML);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.Method !== undefined) view.setBigUint64(0, data.Method === null ? 0n : BigInt(util.toPointer(data.Method)), true);
  // 0x08: u32
  if (data?.ulTuneXmlLength !== undefined) view.setUint32(8, Number(data.ulTuneXmlLength), true);
  // 0x0c: pad4
  // 0x10: pointer
  if (data?.argbTuneXml !== undefined) view.setBigUint64(16, data.argbTuneXml === null ? 0n : BigInt(util.toPointer(data.argbTuneXml)), true);
  return buf;
}

export class KSM_BDA_GDDS_SERVICEFROMTUNEXMLView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get Method(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(0, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x08: u32
  get ulTuneXmlLength(): number {
    return this.view.getUint32(8, true);
  }

  // 0x0c: pad4

  // 0x10: pointer
  get argbTuneXml(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(16, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: pointer
  set Method(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(0, BigInt(util.toPointer(value)), true);
  }

  // 0x08: u32
  set ulTuneXmlLength(value: number) {
    this.view.setUint32(8, value, true);
  }

  // 0x0c: pad4

  // 0x10: pointer
  set argbTuneXml(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(16, BigInt(util.toPointer(value)), true);
  }
}

/**
 * Windows.Win32.Media.DirectShow.KSM_BDA_USERACTIVITY_USEREASON (size: 16)
 */
export interface KSM_BDA_USERACTIVITY_USEREASON {
  /** Windows.Win32.Media.KernelStreaming.KSIDENTIFIER */
  Method: Uint8Array | Deno.PointerValue | null;
  /** u32 */
  ulUseReason: number;
}

export const sizeofKSM_BDA_USERACTIVITY_USEREASON = 16;

export function allocKSM_BDA_USERACTIVITY_USEREASON(data?: Partial<KSM_BDA_USERACTIVITY_USEREASON>): Uint8Array {
  const buf = new Uint8Array(sizeofKSM_BDA_USERACTIVITY_USEREASON);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.Method !== undefined) view.setBigUint64(0, data.Method === null ? 0n : BigInt(util.toPointer(data.Method)), true);
  // 0x08: u32
  if (data?.ulUseReason !== undefined) view.setUint32(8, Number(data.ulUseReason), true);
  // 0x0c: pad4
  return buf;
}

export class KSM_BDA_USERACTIVITY_USEREASONView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get Method(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(0, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x08: u32
  get ulUseReason(): number {
    return this.view.getUint32(8, true);
  }

  // 0x0c: pad4

  // 0x00: pointer
  set Method(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(0, BigInt(util.toPointer(value)), true);
  }

  // 0x08: u32
  set ulUseReason(value: number) {
    this.view.setUint32(8, value, true);
  }

  // 0x0c: pad4
}

/**
 * Windows.Win32.Media.DirectShow.KSM_BDA_CAS_ENTITLEMENTTOKEN (size: 40)
 */
export interface KSM_BDA_CAS_ENTITLEMENTTOKEN {
  /** Windows.Win32.Media.KernelStreaming.KSM_NODE */
  NodeMethod: Uint8Array | Deno.PointerValue | null;
  /** u32 */
  ulDialogRequest: number;
  /** array */
  cLanguage: Deno.PointerValue | null;
  /** u32 */
  ulRequestType: number;
  /** u32 */
  ulEntitlementTokenLen: number;
  /** array */
  argbEntitlementToken: Deno.PointerValue | null;
}

export const sizeofKSM_BDA_CAS_ENTITLEMENTTOKEN = 40;

export function allocKSM_BDA_CAS_ENTITLEMENTTOKEN(data?: Partial<KSM_BDA_CAS_ENTITLEMENTTOKEN>): Uint8Array {
  const buf = new Uint8Array(sizeofKSM_BDA_CAS_ENTITLEMENTTOKEN);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.NodeMethod !== undefined) view.setBigUint64(0, data.NodeMethod === null ? 0n : BigInt(util.toPointer(data.NodeMethod)), true);
  // 0x08: u32
  if (data?.ulDialogRequest !== undefined) view.setUint32(8, Number(data.ulDialogRequest), true);
  // 0x0c: pad4
  // 0x10: pointer
  if (data?.cLanguage !== undefined) view.setBigUint64(16, data.cLanguage === null ? 0n : BigInt(util.toPointer(data.cLanguage)), true);
  // 0x18: u32
  if (data?.ulRequestType !== undefined) view.setUint32(24, Number(data.ulRequestType), true);
  // 0x1c: u32
  if (data?.ulEntitlementTokenLen !== undefined) view.setUint32(28, Number(data.ulEntitlementTokenLen), true);
  // 0x20: pointer
  if (data?.argbEntitlementToken !== undefined) view.setBigUint64(32, data.argbEntitlementToken === null ? 0n : BigInt(util.toPointer(data.argbEntitlementToken)), true);
  return buf;
}

export class KSM_BDA_CAS_ENTITLEMENTTOKENView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get NodeMethod(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(0, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x08: u32
  get ulDialogRequest(): number {
    return this.view.getUint32(8, true);
  }

  // 0x0c: pad4

  // 0x10: pointer
  get cLanguage(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(16, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x18: u32
  get ulRequestType(): number {
    return this.view.getUint32(24, true);
  }

  // 0x1c: u32
  get ulEntitlementTokenLen(): number {
    return this.view.getUint32(28, true);
  }

  // 0x20: pointer
  get argbEntitlementToken(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(32, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: pointer
  set NodeMethod(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(0, BigInt(util.toPointer(value)), true);
  }

  // 0x08: u32
  set ulDialogRequest(value: number) {
    this.view.setUint32(8, value, true);
  }

  // 0x0c: pad4

  // 0x10: pointer
  set cLanguage(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(16, BigInt(util.toPointer(value)), true);
  }

  // 0x18: u32
  set ulRequestType(value: number) {
    this.view.setUint32(24, value, true);
  }

  // 0x1c: u32
  set ulEntitlementTokenLen(value: number) {
    this.view.setUint32(28, value, true);
  }

  // 0x20: pointer
  set argbEntitlementToken(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(32, BigInt(util.toPointer(value)), true);
  }
}

/**
 * Windows.Win32.Media.DirectShow.KSM_BDA_CAS_CAPTURETOKEN (size: 24)
 */
export interface KSM_BDA_CAS_CAPTURETOKEN {
  /** Windows.Win32.Media.KernelStreaming.KSM_NODE */
  NodeMethod: Uint8Array | Deno.PointerValue | null;
  /** u32 */
  ulTokenLength: number;
  /** array */
  argbToken: Deno.PointerValue | null;
}

export const sizeofKSM_BDA_CAS_CAPTURETOKEN = 24;

export function allocKSM_BDA_CAS_CAPTURETOKEN(data?: Partial<KSM_BDA_CAS_CAPTURETOKEN>): Uint8Array {
  const buf = new Uint8Array(sizeofKSM_BDA_CAS_CAPTURETOKEN);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.NodeMethod !== undefined) view.setBigUint64(0, data.NodeMethod === null ? 0n : BigInt(util.toPointer(data.NodeMethod)), true);
  // 0x08: u32
  if (data?.ulTokenLength !== undefined) view.setUint32(8, Number(data.ulTokenLength), true);
  // 0x0c: pad4
  // 0x10: pointer
  if (data?.argbToken !== undefined) view.setBigUint64(16, data.argbToken === null ? 0n : BigInt(util.toPointer(data.argbToken)), true);
  return buf;
}

export class KSM_BDA_CAS_CAPTURETOKENView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get NodeMethod(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(0, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x08: u32
  get ulTokenLength(): number {
    return this.view.getUint32(8, true);
  }

  // 0x0c: pad4

  // 0x10: pointer
  get argbToken(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(16, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: pointer
  set NodeMethod(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(0, BigInt(util.toPointer(value)), true);
  }

  // 0x08: u32
  set ulTokenLength(value: number) {
    this.view.setUint32(8, value, true);
  }

  // 0x0c: pad4

  // 0x10: pointer
  set argbToken(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(16, BigInt(util.toPointer(value)), true);
  }
}

/**
 * Windows.Win32.Media.DirectShow.KSM_BDA_CAS_OPENBROADCASTMMI (size: 32)
 */
export interface KSM_BDA_CAS_OPENBROADCASTMMI {
  /** Windows.Win32.Media.KernelStreaming.KSM_NODE */
  NodeMethod: Uint8Array | Deno.PointerValue | null;
  /** u32 */
  ulDialogRequest: number;
  /** array */
  cLanguage: Deno.PointerValue | null;
  /** u32 */
  ulEventId: number;
}

export const sizeofKSM_BDA_CAS_OPENBROADCASTMMI = 32;

export function allocKSM_BDA_CAS_OPENBROADCASTMMI(data?: Partial<KSM_BDA_CAS_OPENBROADCASTMMI>): Uint8Array {
  const buf = new Uint8Array(sizeofKSM_BDA_CAS_OPENBROADCASTMMI);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.NodeMethod !== undefined) view.setBigUint64(0, data.NodeMethod === null ? 0n : BigInt(util.toPointer(data.NodeMethod)), true);
  // 0x08: u32
  if (data?.ulDialogRequest !== undefined) view.setUint32(8, Number(data.ulDialogRequest), true);
  // 0x0c: pad4
  // 0x10: pointer
  if (data?.cLanguage !== undefined) view.setBigUint64(16, data.cLanguage === null ? 0n : BigInt(util.toPointer(data.cLanguage)), true);
  // 0x18: u32
  if (data?.ulEventId !== undefined) view.setUint32(24, Number(data.ulEventId), true);
  // 0x1c: pad4
  return buf;
}

export class KSM_BDA_CAS_OPENBROADCASTMMIView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get NodeMethod(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(0, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x08: u32
  get ulDialogRequest(): number {
    return this.view.getUint32(8, true);
  }

  // 0x0c: pad4

  // 0x10: pointer
  get cLanguage(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(16, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x18: u32
  get ulEventId(): number {
    return this.view.getUint32(24, true);
  }

  // 0x1c: pad4

  // 0x00: pointer
  set NodeMethod(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(0, BigInt(util.toPointer(value)), true);
  }

  // 0x08: u32
  set ulDialogRequest(value: number) {
    this.view.setUint32(8, value, true);
  }

  // 0x0c: pad4

  // 0x10: pointer
  set cLanguage(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(16, BigInt(util.toPointer(value)), true);
  }

  // 0x18: u32
  set ulEventId(value: number) {
    this.view.setUint32(24, value, true);
  }

  // 0x1c: pad4
}

/**
 * Windows.Win32.Media.DirectShow.KSM_BDA_CAS_CLOSEMMIDIALOG (size: 32)
 */
export interface KSM_BDA_CAS_CLOSEMMIDIALOG {
  /** Windows.Win32.Media.KernelStreaming.KSM_NODE */
  NodeMethod: Uint8Array | Deno.PointerValue | null;
  /** u32 */
  ulDialogRequest: number;
  /** array */
  cLanguage: Deno.PointerValue | null;
  /** u32 */
  ulDialogNumber: number;
  /** u32 */
  ulReason: number;
}

export const sizeofKSM_BDA_CAS_CLOSEMMIDIALOG = 32;

export function allocKSM_BDA_CAS_CLOSEMMIDIALOG(data?: Partial<KSM_BDA_CAS_CLOSEMMIDIALOG>): Uint8Array {
  const buf = new Uint8Array(sizeofKSM_BDA_CAS_CLOSEMMIDIALOG);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.NodeMethod !== undefined) view.setBigUint64(0, data.NodeMethod === null ? 0n : BigInt(util.toPointer(data.NodeMethod)), true);
  // 0x08: u32
  if (data?.ulDialogRequest !== undefined) view.setUint32(8, Number(data.ulDialogRequest), true);
  // 0x0c: pad4
  // 0x10: pointer
  if (data?.cLanguage !== undefined) view.setBigUint64(16, data.cLanguage === null ? 0n : BigInt(util.toPointer(data.cLanguage)), true);
  // 0x18: u32
  if (data?.ulDialogNumber !== undefined) view.setUint32(24, Number(data.ulDialogNumber), true);
  // 0x1c: u32
  if (data?.ulReason !== undefined) view.setUint32(28, Number(data.ulReason), true);
  return buf;
}

export class KSM_BDA_CAS_CLOSEMMIDIALOGView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get NodeMethod(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(0, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x08: u32
  get ulDialogRequest(): number {
    return this.view.getUint32(8, true);
  }

  // 0x0c: pad4

  // 0x10: pointer
  get cLanguage(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(16, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x18: u32
  get ulDialogNumber(): number {
    return this.view.getUint32(24, true);
  }

  // 0x1c: u32
  get ulReason(): number {
    return this.view.getUint32(28, true);
  }

  // 0x00: pointer
  set NodeMethod(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(0, BigInt(util.toPointer(value)), true);
  }

  // 0x08: u32
  set ulDialogRequest(value: number) {
    this.view.setUint32(8, value, true);
  }

  // 0x0c: pad4

  // 0x10: pointer
  set cLanguage(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(16, BigInt(util.toPointer(value)), true);
  }

  // 0x18: u32
  set ulDialogNumber(value: number) {
    this.view.setUint32(24, value, true);
  }

  // 0x1c: u32
  set ulReason(value: number) {
    this.view.setUint32(28, value, true);
  }
}

/**
 * Windows.Win32.Media.DirectShow.KSM_BDA_ISDBCAS_REQUEST (size: 24)
 */
export interface KSM_BDA_ISDBCAS_REQUEST {
  /** Windows.Win32.Media.KernelStreaming.KSM_NODE */
  NodeMethod: Uint8Array | Deno.PointerValue | null;
  /** u32 */
  ulRequestID: number;
  /** u32 */
  ulIsdbCommandSize: number;
  /** array */
  argbIsdbCommandData: Deno.PointerValue | null;
}

export const sizeofKSM_BDA_ISDBCAS_REQUEST = 24;

export function allocKSM_BDA_ISDBCAS_REQUEST(data?: Partial<KSM_BDA_ISDBCAS_REQUEST>): Uint8Array {
  const buf = new Uint8Array(sizeofKSM_BDA_ISDBCAS_REQUEST);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.NodeMethod !== undefined) view.setBigUint64(0, data.NodeMethod === null ? 0n : BigInt(util.toPointer(data.NodeMethod)), true);
  // 0x08: u32
  if (data?.ulRequestID !== undefined) view.setUint32(8, Number(data.ulRequestID), true);
  // 0x0c: u32
  if (data?.ulIsdbCommandSize !== undefined) view.setUint32(12, Number(data.ulIsdbCommandSize), true);
  // 0x10: pointer
  if (data?.argbIsdbCommandData !== undefined) view.setBigUint64(16, data.argbIsdbCommandData === null ? 0n : BigInt(util.toPointer(data.argbIsdbCommandData)), true);
  return buf;
}

export class KSM_BDA_ISDBCAS_REQUESTView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get NodeMethod(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(0, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x08: u32
  get ulRequestID(): number {
    return this.view.getUint32(8, true);
  }

  // 0x0c: u32
  get ulIsdbCommandSize(): number {
    return this.view.getUint32(12, true);
  }

  // 0x10: pointer
  get argbIsdbCommandData(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(16, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: pointer
  set NodeMethod(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(0, BigInt(util.toPointer(value)), true);
  }

  // 0x08: u32
  set ulRequestID(value: number) {
    this.view.setUint32(8, value, true);
  }

  // 0x0c: u32
  set ulIsdbCommandSize(value: number) {
    this.view.setUint32(12, value, true);
  }

  // 0x10: pointer
  set argbIsdbCommandData(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(16, BigInt(util.toPointer(value)), true);
  }
}

/**
 * Windows.Win32.Media.DirectShow.KSM_BDA_TS_SELECTOR_SETTSID (size: 16)
 */
export interface KSM_BDA_TS_SELECTOR_SETTSID {
  /** Windows.Win32.Media.KernelStreaming.KSM_NODE */
  NodeMethod: Uint8Array | Deno.PointerValue | null;
  /** u16 */
  usTSID: number;
}

export const sizeofKSM_BDA_TS_SELECTOR_SETTSID = 16;

export function allocKSM_BDA_TS_SELECTOR_SETTSID(data?: Partial<KSM_BDA_TS_SELECTOR_SETTSID>): Uint8Array {
  const buf = new Uint8Array(sizeofKSM_BDA_TS_SELECTOR_SETTSID);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.NodeMethod !== undefined) view.setBigUint64(0, data.NodeMethod === null ? 0n : BigInt(util.toPointer(data.NodeMethod)), true);
  // 0x08: u16
  if (data?.usTSID !== undefined) view.setUint16(8, Number(data.usTSID), true);
  // 0x0a: pad6
  return buf;
}

export class KSM_BDA_TS_SELECTOR_SETTSIDView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get NodeMethod(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(0, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x08: u16
  get usTSID(): number {
    return this.view.getUint16(8, true);
  }

  // 0x0a: pad6

  // 0x00: pointer
  set NodeMethod(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(0, BigInt(util.toPointer(value)), true);
  }

  // 0x08: u16
  set usTSID(value: number) {
    this.view.setUint16(8, value, true);
  }

  // 0x0a: pad6
}

/**
 * Windows.Win32.Media.KernelStreaming.KSDATAFORMAT (size: 16)
 */
export interface KSDATAFORMAT {
  /** _Anonymous_e__Struct */
  Anonymous: Uint8Array | Deno.PointerValue | null;
  /** i64 */
  Alignment: Deno.PointerValue;
}

export const sizeofKSDATAFORMAT = 16;

export function allocKSDATAFORMAT(data?: Partial<KSDATAFORMAT>): Uint8Array {
  const buf = new Uint8Array(sizeofKSDATAFORMAT);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.Anonymous !== undefined) view.setBigUint64(0, data.Anonymous === null ? 0n : BigInt(util.toPointer(data.Anonymous)), true);
  // 0x08: i64
  if (data?.Alignment !== undefined) view.setBigInt64(8, BigInt(data.Alignment), true);
  return buf;
}

export class KSDATAFORMATView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get Anonymous(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(0, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x08: i64
  get Alignment(): Deno.PointerValue {
    return Number(this.view.getBigInt64(8, true));
  }

  // 0x00: pointer
  set Anonymous(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(0, BigInt(util.toPointer(value)), true);
  }

  // 0x08: i64
  set Alignment(value: Deno.PointerValue) {
    this.view.setBigInt64(8, BigInt(value), true);
  }
}

/**
 * Windows.Win32.Media.DirectShow.KS_DATARANGE_BDA_ANTENNA (size: 8)
 */
export interface KS_DATARANGE_BDA_ANTENNA {
  /** Windows.Win32.Media.KernelStreaming.KSDATAFORMAT */
  DataRange: Uint8Array | Deno.PointerValue | null;
}

export const sizeofKS_DATARANGE_BDA_ANTENNA = 8;

export function allocKS_DATARANGE_BDA_ANTENNA(data?: Partial<KS_DATARANGE_BDA_ANTENNA>): Uint8Array {
  const buf = new Uint8Array(sizeofKS_DATARANGE_BDA_ANTENNA);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.DataRange !== undefined) view.setBigUint64(0, data.DataRange === null ? 0n : BigInt(util.toPointer(data.DataRange)), true);
  return buf;
}

export class KS_DATARANGE_BDA_ANTENNAView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get DataRange(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(0, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: pointer
  set DataRange(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(0, BigInt(util.toPointer(value)), true);
  }
}

/**
 * Windows.Win32.Media.DirectShow.BDA_TRANSPORT_INFO (size: 24)
 */
export interface BDA_TRANSPORT_INFO {
  /** u32 */
  ulcbPhyiscalPacket: number;
  /** u32 */
  ulcbPhyiscalFrame: number;
  /** u32 */
  ulcbPhyiscalFrameAlignment: number;
  /** i64 */
  AvgTimePerFrame: Deno.PointerValue;
}

export const sizeofBDA_TRANSPORT_INFO = 24;

export function allocBDA_TRANSPORT_INFO(data?: Partial<BDA_TRANSPORT_INFO>): Uint8Array {
  const buf = new Uint8Array(sizeofBDA_TRANSPORT_INFO);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.ulcbPhyiscalPacket !== undefined) view.setUint32(0, Number(data.ulcbPhyiscalPacket), true);
  // 0x04: u32
  if (data?.ulcbPhyiscalFrame !== undefined) view.setUint32(4, Number(data.ulcbPhyiscalFrame), true);
  // 0x08: u32
  if (data?.ulcbPhyiscalFrameAlignment !== undefined) view.setUint32(8, Number(data.ulcbPhyiscalFrameAlignment), true);
  // 0x0c: pad4
  // 0x10: i64
  if (data?.AvgTimePerFrame !== undefined) view.setBigInt64(16, BigInt(data.AvgTimePerFrame), true);
  return buf;
}

export class BDA_TRANSPORT_INFOView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get ulcbPhyiscalPacket(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: u32
  get ulcbPhyiscalFrame(): number {
    return this.view.getUint32(4, true);
  }

  // 0x08: u32
  get ulcbPhyiscalFrameAlignment(): number {
    return this.view.getUint32(8, true);
  }

  // 0x0c: pad4

  // 0x10: i64
  get AvgTimePerFrame(): Deno.PointerValue {
    return Number(this.view.getBigInt64(16, true));
  }

  // 0x00: u32
  set ulcbPhyiscalPacket(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: u32
  set ulcbPhyiscalFrame(value: number) {
    this.view.setUint32(4, value, true);
  }

  // 0x08: u32
  set ulcbPhyiscalFrameAlignment(value: number) {
    this.view.setUint32(8, value, true);
  }

  // 0x0c: pad4

  // 0x10: i64
  set AvgTimePerFrame(value: Deno.PointerValue) {
    this.view.setBigInt64(16, BigInt(value), true);
  }
}

/**
 * Windows.Win32.Media.DirectShow.KS_DATARANGE_BDA_TRANSPORT (size: 16)
 */
export interface KS_DATARANGE_BDA_TRANSPORT {
  /** Windows.Win32.Media.KernelStreaming.KSDATAFORMAT */
  DataRange: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Media.DirectShow.BDA_TRANSPORT_INFO */
  BdaTransportInfo: Uint8Array | Deno.PointerValue | null;
}

export const sizeofKS_DATARANGE_BDA_TRANSPORT = 16;

export function allocKS_DATARANGE_BDA_TRANSPORT(data?: Partial<KS_DATARANGE_BDA_TRANSPORT>): Uint8Array {
  const buf = new Uint8Array(sizeofKS_DATARANGE_BDA_TRANSPORT);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.DataRange !== undefined) view.setBigUint64(0, data.DataRange === null ? 0n : BigInt(util.toPointer(data.DataRange)), true);
  // 0x08: pointer
  if (data?.BdaTransportInfo !== undefined) view.setBigUint64(8, data.BdaTransportInfo === null ? 0n : BigInt(util.toPointer(data.BdaTransportInfo)), true);
  return buf;
}

export class KS_DATARANGE_BDA_TRANSPORTView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get DataRange(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(0, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x08: pointer
  get BdaTransportInfo(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(8, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: pointer
  set DataRange(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(0, BigInt(util.toPointer(value)), true);
  }

  // 0x08: pointer
  set BdaTransportInfo(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(8, BigInt(util.toPointer(value)), true);
  }
}

/**
 * Windows.Win32.Media.DirectShow.ChannelChangeInfo (size: 16)
 */
export interface ChannelChangeInfo {
  /** Windows.Win32.Media.DirectShow.ChannelChangeSpanningEvent_State */
  state: ChannelChangeSpanningEvent_State;
  /** u64 */
  TimeStamp: Deno.PointerValue;
}

export const sizeofChannelChangeInfo = 16;

export function allocChannelChangeInfo(data?: Partial<ChannelChangeInfo>): Uint8Array {
  const buf = new Uint8Array(sizeofChannelChangeInfo);
  const view = new DataView(buf.buffer);
  // 0x00: i32
  if (data?.state !== undefined) view.setInt32(0, Number(data.state), true);
  // 0x04: pad4
  // 0x08: u64
  if (data?.TimeStamp !== undefined) view.setBigUint64(8, BigInt(data.TimeStamp), true);
  return buf;
}

export class ChannelChangeInfoView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: i32
  get state(): number {
    return this.view.getInt32(0, true);
  }

  // 0x04: pad4

  // 0x08: u64
  get TimeStamp(): Deno.PointerValue {
    return Number(this.view.getBigUint64(8, true));
  }

  // 0x00: i32
  set state(value: number) {
    this.view.setInt32(0, value, true);
  }

  // 0x04: pad4

  // 0x08: u64
  set TimeStamp(value: Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(value), true);
  }
}

/**
 * Windows.Win32.Media.DirectShow.ChannelTypeInfo (size: 16)
 */
export interface ChannelTypeInfo {
  /** Windows.Win32.Media.DirectShow.ChannelType */
  channelType: ChannelType;
  /** u64 */
  timeStamp: Deno.PointerValue;
}

export const sizeofChannelTypeInfo = 16;

export function allocChannelTypeInfo(data?: Partial<ChannelTypeInfo>): Uint8Array {
  const buf = new Uint8Array(sizeofChannelTypeInfo);
  const view = new DataView(buf.buffer);
  // 0x00: i32
  if (data?.channelType !== undefined) view.setInt32(0, Number(data.channelType), true);
  // 0x04: pad4
  // 0x08: u64
  if (data?.timeStamp !== undefined) view.setBigUint64(8, BigInt(data.timeStamp), true);
  return buf;
}

export class ChannelTypeInfoView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: i32
  get channelType(): number {
    return this.view.getInt32(0, true);
  }

  // 0x04: pad4

  // 0x08: u64
  get timeStamp(): Deno.PointerValue {
    return Number(this.view.getBigUint64(8, true));
  }

  // 0x00: i32
  set channelType(value: number) {
    this.view.setInt32(0, value, true);
  }

  // 0x04: pad4

  // 0x08: u64
  set timeStamp(value: Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(value), true);
  }
}

/**
 * Windows.Win32.Media.DirectShow.ChannelInfo (size: 16)
 */
export interface ChannelInfo {
  /** i32 */
  lFrequency: number;
  /** _Anonymous_e__Union */
  Anonymous: Uint8Array | Deno.PointerValue | null;
}

export const sizeofChannelInfo = 16;

export function allocChannelInfo(data?: Partial<ChannelInfo>): Uint8Array {
  const buf = new Uint8Array(sizeofChannelInfo);
  const view = new DataView(buf.buffer);
  // 0x00: i32
  if (data?.lFrequency !== undefined) view.setInt32(0, Number(data.lFrequency), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.Anonymous !== undefined) view.setBigUint64(8, data.Anonymous === null ? 0n : BigInt(util.toPointer(data.Anonymous)), true);
  return buf;
}

export class ChannelInfoView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: i32
  get lFrequency(): number {
    return this.view.getInt32(0, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  get Anonymous(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(8, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: i32
  set lFrequency(value: number) {
    this.view.setInt32(0, value, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  set Anonymous(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(8, BigInt(util.toPointer(value)), true);
  }
}

/**
 * Windows.Win32.Media.DirectShow.SpanningEventDescriptor (size: 16)
 */
export interface SpanningEventDescriptor {
  /** u16 */
  wDataLen: number;
  /** u16 */
  wProgNumber: number;
  /** u16 */
  wSID: number;
  /** array */
  bDescriptor: Deno.PointerValue | null;
}

export const sizeofSpanningEventDescriptor = 16;

export function allocSpanningEventDescriptor(data?: Partial<SpanningEventDescriptor>): Uint8Array {
  const buf = new Uint8Array(sizeofSpanningEventDescriptor);
  const view = new DataView(buf.buffer);
  // 0x00: u16
  if (data?.wDataLen !== undefined) view.setUint16(0, Number(data.wDataLen), true);
  // 0x02: u16
  if (data?.wProgNumber !== undefined) view.setUint16(2, Number(data.wProgNumber), true);
  // 0x04: u16
  if (data?.wSID !== undefined) view.setUint16(4, Number(data.wSID), true);
  // 0x06: pad2
  // 0x08: pointer
  if (data?.bDescriptor !== undefined) view.setBigUint64(8, data.bDescriptor === null ? 0n : BigInt(util.toPointer(data.bDescriptor)), true);
  return buf;
}

export class SpanningEventDescriptorView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u16
  get wDataLen(): number {
    return this.view.getUint16(0, true);
  }

  // 0x02: u16
  get wProgNumber(): number {
    return this.view.getUint16(2, true);
  }

  // 0x04: u16
  get wSID(): number {
    return this.view.getUint16(4, true);
  }

  // 0x06: pad2

  // 0x08: pointer
  get bDescriptor(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(8, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: u16
  set wDataLen(value: number) {
    this.view.setUint16(0, value, true);
  }

  // 0x02: u16
  set wProgNumber(value: number) {
    this.view.setUint16(2, value, true);
  }

  // 0x04: u16
  set wSID(value: number) {
    this.view.setUint16(4, value, true);
  }

  // 0x06: pad2

  // 0x08: pointer
  set bDescriptor(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(8, BigInt(util.toPointer(value)), true);
  }
}

/**
 * Windows.Win32.Media.DirectShow.DVBScramblingControlSpanningEvent (size: 8)
 */
export interface DVBScramblingControlSpanningEvent {
  /** u32 */
  ulPID: number;
  /** Windows.Win32.Foundation.BOOL */
  fScrambled: boolean;
}

export const sizeofDVBScramblingControlSpanningEvent = 8;

export function allocDVBScramblingControlSpanningEvent(data?: Partial<DVBScramblingControlSpanningEvent>): Uint8Array {
  const buf = new Uint8Array(sizeofDVBScramblingControlSpanningEvent);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.ulPID !== undefined) view.setUint32(0, Number(data.ulPID), true);
  // 0x04: i32
  if (data?.fScrambled !== undefined) view.setInt32(4, Number(data.fScrambled), true);
  return buf;
}

export class DVBScramblingControlSpanningEventView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get ulPID(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: i32
  get fScrambled(): number {
    return this.view.getInt32(4, true);
  }

  // 0x00: u32
  set ulPID(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: i32
  set fScrambled(value: number) {
    this.view.setInt32(4, value, true);
  }
}

/**
 * Windows.Win32.Media.DirectShow.SpanningEventEmmMessage (size: 24)
 */
export interface SpanningEventEmmMessage {
  /** u8 */
  bCAbroadcasterGroupId: number;
  /** u8 */
  bMessageControl: number;
  /** u16 */
  wServiceId: number;
  /** u16 */
  wTableIdExtension: number;
  /** u8 */
  bDeletionStatus: number;
  /** u8 */
  bDisplayingDuration1: number;
  /** u8 */
  bDisplayingDuration2: number;
  /** u8 */
  bDisplayingDuration3: number;
  /** u8 */
  bDisplayingCycle: number;
  /** u8 */
  bFormatVersion: number;
  /** u8 */
  bDisplayPosition: number;
  /** u16 */
  wMessageLength: number;
  /** array */
  szMessageArea: Deno.PointerValue | null;
}

export const sizeofSpanningEventEmmMessage = 24;

export function allocSpanningEventEmmMessage(data?: Partial<SpanningEventEmmMessage>): Uint8Array {
  const buf = new Uint8Array(sizeofSpanningEventEmmMessage);
  const view = new DataView(buf.buffer);
  // 0x00: u8
  if (data?.bCAbroadcasterGroupId !== undefined) view.setUint8(0, Number(data.bCAbroadcasterGroupId));
  // 0x01: u8
  if (data?.bMessageControl !== undefined) view.setUint8(1, Number(data.bMessageControl));
  // 0x02: u16
  if (data?.wServiceId !== undefined) view.setUint16(2, Number(data.wServiceId), true);
  // 0x04: u16
  if (data?.wTableIdExtension !== undefined) view.setUint16(4, Number(data.wTableIdExtension), true);
  // 0x06: u8
  if (data?.bDeletionStatus !== undefined) view.setUint8(6, Number(data.bDeletionStatus));
  // 0x07: u8
  if (data?.bDisplayingDuration1 !== undefined) view.setUint8(7, Number(data.bDisplayingDuration1));
  // 0x08: u8
  if (data?.bDisplayingDuration2 !== undefined) view.setUint8(8, Number(data.bDisplayingDuration2));
  // 0x09: u8
  if (data?.bDisplayingDuration3 !== undefined) view.setUint8(9, Number(data.bDisplayingDuration3));
  // 0x0a: u8
  if (data?.bDisplayingCycle !== undefined) view.setUint8(10, Number(data.bDisplayingCycle));
  // 0x0b: u8
  if (data?.bFormatVersion !== undefined) view.setUint8(11, Number(data.bFormatVersion));
  // 0x0c: u8
  if (data?.bDisplayPosition !== undefined) view.setUint8(12, Number(data.bDisplayPosition));
  // 0x0d: u16
  if (data?.wMessageLength !== undefined) view.setUint16(13, Number(data.wMessageLength), true);
  // 0x0f: pad1
  // 0x10: pointer
  if (data?.szMessageArea !== undefined) view.setBigUint64(16, data.szMessageArea === null ? 0n : BigInt(util.toPointer(data.szMessageArea)), true);
  return buf;
}

export class SpanningEventEmmMessageView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u8
  get bCAbroadcasterGroupId(): number {
    return this.view.getUint8(0);
  }

  // 0x01: u8
  get bMessageControl(): number {
    return this.view.getUint8(1);
  }

  // 0x02: u16
  get wServiceId(): number {
    return this.view.getUint16(2, true);
  }

  // 0x04: u16
  get wTableIdExtension(): number {
    return this.view.getUint16(4, true);
  }

  // 0x06: u8
  get bDeletionStatus(): number {
    return this.view.getUint8(6);
  }

  // 0x07: u8
  get bDisplayingDuration1(): number {
    return this.view.getUint8(7);
  }

  // 0x08: u8
  get bDisplayingDuration2(): number {
    return this.view.getUint8(8);
  }

  // 0x09: u8
  get bDisplayingDuration3(): number {
    return this.view.getUint8(9);
  }

  // 0x0a: u8
  get bDisplayingCycle(): number {
    return this.view.getUint8(10);
  }

  // 0x0b: u8
  get bFormatVersion(): number {
    return this.view.getUint8(11);
  }

  // 0x0c: u8
  get bDisplayPosition(): number {
    return this.view.getUint8(12);
  }

  // 0x0d: u16
  get wMessageLength(): number {
    return this.view.getUint16(13, true);
  }

  // 0x0f: pad1

  // 0x10: pointer
  get szMessageArea(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(16, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: u8
  set bCAbroadcasterGroupId(value: number) {
    this.view.setUint8(0, value);
  }

  // 0x01: u8
  set bMessageControl(value: number) {
    this.view.setUint8(1, value);
  }

  // 0x02: u16
  set wServiceId(value: number) {
    this.view.setUint16(2, value, true);
  }

  // 0x04: u16
  set wTableIdExtension(value: number) {
    this.view.setUint16(4, value, true);
  }

  // 0x06: u8
  set bDeletionStatus(value: number) {
    this.view.setUint8(6, value);
  }

  // 0x07: u8
  set bDisplayingDuration1(value: number) {
    this.view.setUint8(7, value);
  }

  // 0x08: u8
  set bDisplayingDuration2(value: number) {
    this.view.setUint8(8, value);
  }

  // 0x09: u8
  set bDisplayingDuration3(value: number) {
    this.view.setUint8(9, value);
  }

  // 0x0a: u8
  set bDisplayingCycle(value: number) {
    this.view.setUint8(10, value);
  }

  // 0x0b: u8
  set bFormatVersion(value: number) {
    this.view.setUint8(11, value);
  }

  // 0x0c: u8
  set bDisplayPosition(value: number) {
    this.view.setUint8(12, value);
  }

  // 0x0d: u16
  set wMessageLength(value: number) {
    this.view.setUint16(13, value, true);
  }

  // 0x0f: pad1

  // 0x10: pointer
  set szMessageArea(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(16, BigInt(util.toPointer(value)), true);
  }
}

/**
 * Windows.Win32.Media.DirectShow.LanguageInfo (size: 8)
 */
export interface LanguageInfo {
  /** u16 */
  LangID: number;
  /** i32 */
  lISOLangCode: number;
}

export const sizeofLanguageInfo = 8;

export function allocLanguageInfo(data?: Partial<LanguageInfo>): Uint8Array {
  const buf = new Uint8Array(sizeofLanguageInfo);
  const view = new DataView(buf.buffer);
  // 0x00: u16
  if (data?.LangID !== undefined) view.setUint16(0, Number(data.LangID), true);
  // 0x02: i32
  if (data?.lISOLangCode !== undefined) view.setInt32(2, Number(data.lISOLangCode), true);
  // 0x06: pad2
  return buf;
}

export class LanguageInfoView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u16
  get LangID(): number {
    return this.view.getUint16(0, true);
  }

  // 0x02: i32
  get lISOLangCode(): number {
    return this.view.getInt32(2, true);
  }

  // 0x06: pad2

  // 0x00: u16
  set LangID(value: number) {
    this.view.setUint16(0, value, true);
  }

  // 0x02: i32
  set lISOLangCode(value: number) {
    this.view.setInt32(2, value, true);
  }

  // 0x06: pad2
}

/**
 * Windows.Win32.Media.DirectShow.DualMonoInfo (size: 16)
 */
export interface DualMonoInfo {
  /** u16 */
  LangID1: number;
  /** u16 */
  LangID2: number;
  /** i32 */
  lISOLangCode1: number;
  /** i32 */
  lISOLangCode2: number;
}

export const sizeofDualMonoInfo = 16;

export function allocDualMonoInfo(data?: Partial<DualMonoInfo>): Uint8Array {
  const buf = new Uint8Array(sizeofDualMonoInfo);
  const view = new DataView(buf.buffer);
  // 0x00: u16
  if (data?.LangID1 !== undefined) view.setUint16(0, Number(data.LangID1), true);
  // 0x02: u16
  if (data?.LangID2 !== undefined) view.setUint16(2, Number(data.LangID2), true);
  // 0x04: i32
  if (data?.lISOLangCode1 !== undefined) view.setInt32(4, Number(data.lISOLangCode1), true);
  // 0x08: i32
  if (data?.lISOLangCode2 !== undefined) view.setInt32(8, Number(data.lISOLangCode2), true);
  // 0x0c: pad4
  return buf;
}

export class DualMonoInfoView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u16
  get LangID1(): number {
    return this.view.getUint16(0, true);
  }

  // 0x02: u16
  get LangID2(): number {
    return this.view.getUint16(2, true);
  }

  // 0x04: i32
  get lISOLangCode1(): number {
    return this.view.getInt32(4, true);
  }

  // 0x08: i32
  get lISOLangCode2(): number {
    return this.view.getInt32(8, true);
  }

  // 0x0c: pad4

  // 0x00: u16
  set LangID1(value: number) {
    this.view.setUint16(0, value, true);
  }

  // 0x02: u16
  set LangID2(value: number) {
    this.view.setUint16(2, value, true);
  }

  // 0x04: i32
  set lISOLangCode1(value: number) {
    this.view.setInt32(4, value, true);
  }

  // 0x08: i32
  set lISOLangCode2(value: number) {
    this.view.setInt32(8, value, true);
  }

  // 0x0c: pad4
}

/**
 * Windows.Win32.Media.DirectShow.PIDListSpanningEvent (size: 16)
 */
export interface PIDListSpanningEvent {
  /** u16 */
  wPIDCount: number;
  /** array */
  pulPIDs: Deno.PointerValue | null;
}

export const sizeofPIDListSpanningEvent = 16;

export function allocPIDListSpanningEvent(data?: Partial<PIDListSpanningEvent>): Uint8Array {
  const buf = new Uint8Array(sizeofPIDListSpanningEvent);
  const view = new DataView(buf.buffer);
  // 0x00: u16
  if (data?.wPIDCount !== undefined) view.setUint16(0, Number(data.wPIDCount), true);
  // 0x02: pad6
  // 0x08: pointer
  if (data?.pulPIDs !== undefined) view.setBigUint64(8, data.pulPIDs === null ? 0n : BigInt(util.toPointer(data.pulPIDs)), true);
  return buf;
}

export class PIDListSpanningEventView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u16
  get wPIDCount(): number {
    return this.view.getUint16(0, true);
  }

  // 0x02: pad6

  // 0x08: pointer
  get pulPIDs(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(8, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: u16
  set wPIDCount(value: number) {
    this.view.setUint16(0, value, true);
  }

  // 0x02: pad6

  // 0x08: pointer
  set pulPIDs(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(8, BigInt(util.toPointer(value)), true);
  }
}

/**
 * Windows.Win32.Media.DirectShow.RATING_ATTRIBUTE (size: 8)
 */
export interface RATING_ATTRIBUTE {
  /** u32 */
  rating_attribute_id: number;
  /** u32 */
  rating_attribute_value: number;
}

export const sizeofRATING_ATTRIBUTE = 8;

export function allocRATING_ATTRIBUTE(data?: Partial<RATING_ATTRIBUTE>): Uint8Array {
  const buf = new Uint8Array(sizeofRATING_ATTRIBUTE);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.rating_attribute_id !== undefined) view.setUint32(0, Number(data.rating_attribute_id), true);
  // 0x04: u32
  if (data?.rating_attribute_value !== undefined) view.setUint32(4, Number(data.rating_attribute_value), true);
  return buf;
}

export class RATING_ATTRIBUTEView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get rating_attribute_id(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: u32
  get rating_attribute_value(): number {
    return this.view.getUint32(4, true);
  }

  // 0x00: u32
  set rating_attribute_id(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: u32
  set rating_attribute_value(value: number) {
    this.view.setUint32(4, value, true);
  }
}

/**
 * Windows.Win32.Media.DirectShow.RATING_SYSTEM (size: 40)
 */
export interface RATING_SYSTEM {
  /** System.Guid */
  rating_system_id: Uint8Array | Deno.PointerValue | null;
  /** u8 */
  _bitfield: number;
  /** array */
  country_code: Deno.PointerValue | null;
  /** u32 */
  rating_attribute_count: number;
  /** ptr */
  lpratingattrib: Deno.PointerValue | Uint8Array | null;
}

export const sizeofRATING_SYSTEM = 40;

export function allocRATING_SYSTEM(data?: Partial<RATING_SYSTEM>): Uint8Array {
  const buf = new Uint8Array(sizeofRATING_SYSTEM);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.rating_system_id !== undefined) view.setBigUint64(0, data.rating_system_id === null ? 0n : BigInt(util.toPointer(data.rating_system_id)), true);
  // 0x08: u8
  if (data?._bitfield !== undefined) view.setUint8(8, Number(data._bitfield));
  // 0x09: pad7
  // 0x10: pointer
  if (data?.country_code !== undefined) view.setBigUint64(16, data.country_code === null ? 0n : BigInt(util.toPointer(data.country_code)), true);
  // 0x18: u32
  if (data?.rating_attribute_count !== undefined) view.setUint32(24, Number(data.rating_attribute_count), true);
  // 0x1c: pad4
  // 0x20: pointer
  if (data?.lpratingattrib !== undefined) view.setBigUint64(32, data.lpratingattrib === null ? 0n : BigInt(util.toPointer(data.lpratingattrib)), true);
  return buf;
}

export class RATING_SYSTEMView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get rating_system_id(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(0, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x08: u8
  get _bitfield(): number {
    return this.view.getUint8(8);
  }

  // 0x09: pad7

  // 0x10: pointer
  get country_code(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(16, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x18: u32
  get rating_attribute_count(): number {
    return this.view.getUint32(24, true);
  }

  // 0x1c: pad4

  // 0x20: pointer
  get lpratingattrib(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(32, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: pointer
  set rating_system_id(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(0, BigInt(util.toPointer(value)), true);
  }

  // 0x08: u8
  set _bitfield(value: number) {
    this.view.setUint8(8, value);
  }

  // 0x09: pad7

  // 0x10: pointer
  set country_code(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(16, BigInt(util.toPointer(value)), true);
  }

  // 0x18: u32
  set rating_attribute_count(value: number) {
    this.view.setUint32(24, value, true);
  }

  // 0x1c: pad4

  // 0x20: pointer
  set lpratingattrib(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(32, BigInt(util.toPointer(value)), true);
  }
}

/**
 * Windows.Win32.Media.DirectShow.RATING_INFO (size: 16)
 */
export interface RATING_INFO {
  /** u32 */
  rating_system_count: number;
  /** ptr */
  lpratingsystem: Deno.PointerValue | Uint8Array | null;
}

export const sizeofRATING_INFO = 16;

export function allocRATING_INFO(data?: Partial<RATING_INFO>): Uint8Array {
  const buf = new Uint8Array(sizeofRATING_INFO);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.rating_system_count !== undefined) view.setUint32(0, Number(data.rating_system_count), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.lpratingsystem !== undefined) view.setBigUint64(8, data.lpratingsystem === null ? 0n : BigInt(util.toPointer(data.lpratingsystem)), true);
  return buf;
}

export class RATING_INFOView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get rating_system_count(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  get lpratingsystem(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(8, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: u32
  set rating_system_count(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  set lpratingsystem(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(8, BigInt(util.toPointer(value)), true);
  }
}

/**
 * Windows.Win32.Media.DirectShow.PBDAParentalControl (size: 16)
 */
export interface PBDAParentalControl {
  /** u32 */
  rating_system_count: number;
  /** ptr */
  rating_systems: Deno.PointerValue | Uint8Array | null;
}

export const sizeofPBDAParentalControl = 16;

export function allocPBDAParentalControl(data?: Partial<PBDAParentalControl>): Uint8Array {
  const buf = new Uint8Array(sizeofPBDAParentalControl);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.rating_system_count !== undefined) view.setUint32(0, Number(data.rating_system_count), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.rating_systems !== undefined) view.setBigUint64(8, data.rating_systems === null ? 0n : BigInt(util.toPointer(data.rating_systems)), true);
  return buf;
}

export class PBDAParentalControlView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get rating_system_count(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  get rating_systems(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(8, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: u32
  set rating_system_count(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  set rating_systems(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(8, BigInt(util.toPointer(value)), true);
  }
}

/**
 * Windows.Win32.Media.DirectShow.DvbParentalRatingParam (size: 16)
 */
export interface DvbParentalRatingParam {
  /** array */
  szCountryCode: Deno.PointerValue | null;
  /** u8 */
  bRating: number;
}

export const sizeofDvbParentalRatingParam = 16;

export function allocDvbParentalRatingParam(data?: Partial<DvbParentalRatingParam>): Uint8Array {
  const buf = new Uint8Array(sizeofDvbParentalRatingParam);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.szCountryCode !== undefined) view.setBigUint64(0, data.szCountryCode === null ? 0n : BigInt(util.toPointer(data.szCountryCode)), true);
  // 0x08: u8
  if (data?.bRating !== undefined) view.setUint8(8, Number(data.bRating));
  // 0x09: pad7
  return buf;
}

export class DvbParentalRatingParamView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get szCountryCode(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(0, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x08: u8
  get bRating(): number {
    return this.view.getUint8(8);
  }

  // 0x09: pad7

  // 0x00: pointer
  set szCountryCode(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(0, BigInt(util.toPointer(value)), true);
  }

  // 0x08: u8
  set bRating(value: number) {
    this.view.setUint8(8, value);
  }

  // 0x09: pad7
}

/**
 * Windows.Win32.Media.DirectShow.DvbParentalRatingDescriptor (size: 16)
 */
export interface DvbParentalRatingDescriptor {
  /** u32 */
  ulNumParams: number;
  /** array */
  pParams: Deno.PointerValue | null;
}

export const sizeofDvbParentalRatingDescriptor = 16;

export function allocDvbParentalRatingDescriptor(data?: Partial<DvbParentalRatingDescriptor>): Uint8Array {
  const buf = new Uint8Array(sizeofDvbParentalRatingDescriptor);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.ulNumParams !== undefined) view.setUint32(0, Number(data.ulNumParams), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.pParams !== undefined) view.setBigUint64(8, data.pParams === null ? 0n : BigInt(util.toPointer(data.pParams)), true);
  return buf;
}

export class DvbParentalRatingDescriptorView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get ulNumParams(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  get pParams(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(8, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: u32
  set ulNumParams(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  set pParams(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(8, BigInt(util.toPointer(value)), true);
  }
}

/**
 * Windows.Win32.Media.DirectShow.KSPROPERTY_BDA_RF_TUNER_CAPS_S (size: 48)
 */
export interface KSPROPERTY_BDA_RF_TUNER_CAPS_S {
  /** Windows.Win32.Media.KernelStreaming.KSP_NODE */
  Property: Uint8Array | Deno.PointerValue | null;
  /** u32 */
  Mode: number;
  /** u32 */
  AnalogStandardsSupported: number;
  /** u32 */
  DigitalStandardsSupported: number;
  /** u32 */
  MinFrequency: number;
  /** u32 */
  MaxFrequency: number;
  /** u32 */
  SettlingTime: number;
  /** u32 */
  AnalogSensingRange: number;
  /** u32 */
  DigitalSensingRange: number;
  /** u32 */
  MilliSecondsPerMHz: number;
}

export const sizeofKSPROPERTY_BDA_RF_TUNER_CAPS_S = 48;

export function allocKSPROPERTY_BDA_RF_TUNER_CAPS_S(data?: Partial<KSPROPERTY_BDA_RF_TUNER_CAPS_S>): Uint8Array {
  const buf = new Uint8Array(sizeofKSPROPERTY_BDA_RF_TUNER_CAPS_S);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.Property !== undefined) view.setBigUint64(0, data.Property === null ? 0n : BigInt(util.toPointer(data.Property)), true);
  // 0x08: u32
  if (data?.Mode !== undefined) view.setUint32(8, Number(data.Mode), true);
  // 0x0c: u32
  if (data?.AnalogStandardsSupported !== undefined) view.setUint32(12, Number(data.AnalogStandardsSupported), true);
  // 0x10: u32
  if (data?.DigitalStandardsSupported !== undefined) view.setUint32(16, Number(data.DigitalStandardsSupported), true);
  // 0x14: u32
  if (data?.MinFrequency !== undefined) view.setUint32(20, Number(data.MinFrequency), true);
  // 0x18: u32
  if (data?.MaxFrequency !== undefined) view.setUint32(24, Number(data.MaxFrequency), true);
  // 0x1c: u32
  if (data?.SettlingTime !== undefined) view.setUint32(28, Number(data.SettlingTime), true);
  // 0x20: u32
  if (data?.AnalogSensingRange !== undefined) view.setUint32(32, Number(data.AnalogSensingRange), true);
  // 0x24: u32
  if (data?.DigitalSensingRange !== undefined) view.setUint32(36, Number(data.DigitalSensingRange), true);
  // 0x28: u32
  if (data?.MilliSecondsPerMHz !== undefined) view.setUint32(40, Number(data.MilliSecondsPerMHz), true);
  // 0x2c: pad4
  return buf;
}

export class KSPROPERTY_BDA_RF_TUNER_CAPS_SView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get Property(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(0, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x08: u32
  get Mode(): number {
    return this.view.getUint32(8, true);
  }

  // 0x0c: u32
  get AnalogStandardsSupported(): number {
    return this.view.getUint32(12, true);
  }

  // 0x10: u32
  get DigitalStandardsSupported(): number {
    return this.view.getUint32(16, true);
  }

  // 0x14: u32
  get MinFrequency(): number {
    return this.view.getUint32(20, true);
  }

  // 0x18: u32
  get MaxFrequency(): number {
    return this.view.getUint32(24, true);
  }

  // 0x1c: u32
  get SettlingTime(): number {
    return this.view.getUint32(28, true);
  }

  // 0x20: u32
  get AnalogSensingRange(): number {
    return this.view.getUint32(32, true);
  }

  // 0x24: u32
  get DigitalSensingRange(): number {
    return this.view.getUint32(36, true);
  }

  // 0x28: u32
  get MilliSecondsPerMHz(): number {
    return this.view.getUint32(40, true);
  }

  // 0x2c: pad4

  // 0x00: pointer
  set Property(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(0, BigInt(util.toPointer(value)), true);
  }

  // 0x08: u32
  set Mode(value: number) {
    this.view.setUint32(8, value, true);
  }

  // 0x0c: u32
  set AnalogStandardsSupported(value: number) {
    this.view.setUint32(12, value, true);
  }

  // 0x10: u32
  set DigitalStandardsSupported(value: number) {
    this.view.setUint32(16, value, true);
  }

  // 0x14: u32
  set MinFrequency(value: number) {
    this.view.setUint32(20, value, true);
  }

  // 0x18: u32
  set MaxFrequency(value: number) {
    this.view.setUint32(24, value, true);
  }

  // 0x1c: u32
  set SettlingTime(value: number) {
    this.view.setUint32(28, value, true);
  }

  // 0x20: u32
  set AnalogSensingRange(value: number) {
    this.view.setUint32(32, value, true);
  }

  // 0x24: u32
  set DigitalSensingRange(value: number) {
    this.view.setUint32(36, value, true);
  }

  // 0x28: u32
  set MilliSecondsPerMHz(value: number) {
    this.view.setUint32(40, value, true);
  }

  // 0x2c: pad4
}

/**
 * Windows.Win32.Media.DirectShow.KSPROPERTY_BDA_RF_TUNER_SCAN_STATUS_S (size: 24)
 */
export interface KSPROPERTY_BDA_RF_TUNER_SCAN_STATUS_S {
  /** Windows.Win32.Media.KernelStreaming.KSP_NODE */
  Property: Uint8Array | Deno.PointerValue | null;
  /** u32 */
  CurrentFrequency: number;
  /** u32 */
  FrequencyRangeMin: number;
  /** u32 */
  FrequencyRangeMax: number;
  /** u32 */
  MilliSecondsLeft: number;
}

export const sizeofKSPROPERTY_BDA_RF_TUNER_SCAN_STATUS_S = 24;

export function allocKSPROPERTY_BDA_RF_TUNER_SCAN_STATUS_S(data?: Partial<KSPROPERTY_BDA_RF_TUNER_SCAN_STATUS_S>): Uint8Array {
  const buf = new Uint8Array(sizeofKSPROPERTY_BDA_RF_TUNER_SCAN_STATUS_S);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.Property !== undefined) view.setBigUint64(0, data.Property === null ? 0n : BigInt(util.toPointer(data.Property)), true);
  // 0x08: u32
  if (data?.CurrentFrequency !== undefined) view.setUint32(8, Number(data.CurrentFrequency), true);
  // 0x0c: u32
  if (data?.FrequencyRangeMin !== undefined) view.setUint32(12, Number(data.FrequencyRangeMin), true);
  // 0x10: u32
  if (data?.FrequencyRangeMax !== undefined) view.setUint32(16, Number(data.FrequencyRangeMax), true);
  // 0x14: u32
  if (data?.MilliSecondsLeft !== undefined) view.setUint32(20, Number(data.MilliSecondsLeft), true);
  return buf;
}

export class KSPROPERTY_BDA_RF_TUNER_SCAN_STATUS_SView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get Property(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(0, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x08: u32
  get CurrentFrequency(): number {
    return this.view.getUint32(8, true);
  }

  // 0x0c: u32
  get FrequencyRangeMin(): number {
    return this.view.getUint32(12, true);
  }

  // 0x10: u32
  get FrequencyRangeMax(): number {
    return this.view.getUint32(16, true);
  }

  // 0x14: u32
  get MilliSecondsLeft(): number {
    return this.view.getUint32(20, true);
  }

  // 0x00: pointer
  set Property(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(0, BigInt(util.toPointer(value)), true);
  }

  // 0x08: u32
  set CurrentFrequency(value: number) {
    this.view.setUint32(8, value, true);
  }

  // 0x0c: u32
  set FrequencyRangeMin(value: number) {
    this.view.setUint32(12, value, true);
  }

  // 0x10: u32
  set FrequencyRangeMax(value: number) {
    this.view.setUint32(16, value, true);
  }

  // 0x14: u32
  set MilliSecondsLeft(value: number) {
    this.view.setUint32(20, value, true);
  }
}

/**
 * Windows.Win32.Media.DirectShow.KSPROPERTY_BDA_RF_TUNER_STANDARD_S (size: 16)
 */
export interface KSPROPERTY_BDA_RF_TUNER_STANDARD_S {
  /** Windows.Win32.Media.KernelStreaming.KSP_NODE */
  Property: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Media.DirectShow.BDA_SignalType */
  SignalType: BDA_SignalType;
  /** u32 */
  SignalStandard: number;
}

export const sizeofKSPROPERTY_BDA_RF_TUNER_STANDARD_S = 16;

export function allocKSPROPERTY_BDA_RF_TUNER_STANDARD_S(data?: Partial<KSPROPERTY_BDA_RF_TUNER_STANDARD_S>): Uint8Array {
  const buf = new Uint8Array(sizeofKSPROPERTY_BDA_RF_TUNER_STANDARD_S);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.Property !== undefined) view.setBigUint64(0, data.Property === null ? 0n : BigInt(util.toPointer(data.Property)), true);
  // 0x08: i32
  if (data?.SignalType !== undefined) view.setInt32(8, Number(data.SignalType), true);
  // 0x0c: u32
  if (data?.SignalStandard !== undefined) view.setUint32(12, Number(data.SignalStandard), true);
  return buf;
}

export class KSPROPERTY_BDA_RF_TUNER_STANDARD_SView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get Property(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(0, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x08: i32
  get SignalType(): number {
    return this.view.getInt32(8, true);
  }

  // 0x0c: u32
  get SignalStandard(): number {
    return this.view.getUint32(12, true);
  }

  // 0x00: pointer
  set Property(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(0, BigInt(util.toPointer(value)), true);
  }

  // 0x08: i32
  set SignalType(value: number) {
    this.view.setInt32(8, value, true);
  }

  // 0x0c: u32
  set SignalStandard(value: number) {
    this.view.setUint32(12, value, true);
  }
}

/**
 * Windows.Win32.Media.DirectShow.KSPROPERTY_BDA_RF_TUNER_STANDARD_MODE_S (size: 16)
 */
export interface KSPROPERTY_BDA_RF_TUNER_STANDARD_MODE_S {
  /** Windows.Win32.Media.KernelStreaming.KSP_NODE */
  Property: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Foundation.BOOL */
  AutoDetect: boolean;
}

export const sizeofKSPROPERTY_BDA_RF_TUNER_STANDARD_MODE_S = 16;

export function allocKSPROPERTY_BDA_RF_TUNER_STANDARD_MODE_S(data?: Partial<KSPROPERTY_BDA_RF_TUNER_STANDARD_MODE_S>): Uint8Array {
  const buf = new Uint8Array(sizeofKSPROPERTY_BDA_RF_TUNER_STANDARD_MODE_S);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.Property !== undefined) view.setBigUint64(0, data.Property === null ? 0n : BigInt(util.toPointer(data.Property)), true);
  // 0x08: i32
  if (data?.AutoDetect !== undefined) view.setInt32(8, Number(data.AutoDetect), true);
  // 0x0c: pad4
  return buf;
}

export class KSPROPERTY_BDA_RF_TUNER_STANDARD_MODE_SView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get Property(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(0, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x08: i32
  get AutoDetect(): number {
    return this.view.getInt32(8, true);
  }

  // 0x0c: pad4

  // 0x00: pointer
  set Property(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(0, BigInt(util.toPointer(value)), true);
  }

  // 0x08: i32
  set AutoDetect(value: number) {
    this.view.setInt32(8, value, true);
  }

  // 0x0c: pad4
}

/**
 * Windows.Win32.Media.KernelStreaming.KSEVENTDATA (size: 16)
 */
export interface KSEVENTDATA {
  /** u32 */
  NotificationType: number;
  /** _Anonymous_e__Union */
  Anonymous: Uint8Array | Deno.PointerValue | null;
}

export const sizeofKSEVENTDATA = 16;

export function allocKSEVENTDATA(data?: Partial<KSEVENTDATA>): Uint8Array {
  const buf = new Uint8Array(sizeofKSEVENTDATA);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.NotificationType !== undefined) view.setUint32(0, Number(data.NotificationType), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.Anonymous !== undefined) view.setBigUint64(8, data.Anonymous === null ? 0n : BigInt(util.toPointer(data.Anonymous)), true);
  return buf;
}

export class KSEVENTDATAView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get NotificationType(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  get Anonymous(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(8, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: u32
  set NotificationType(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  set Anonymous(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(8, BigInt(util.toPointer(value)), true);
  }
}

/**
 * Windows.Win32.Media.DirectShow.KSEVENTDATA_BDA_RF_TUNER_SCAN_S (size: 24)
 */
export interface KSEVENTDATA_BDA_RF_TUNER_SCAN_S {
  /** Windows.Win32.Media.KernelStreaming.KSEVENTDATA */
  EventData: Uint8Array | Deno.PointerValue | null;
  /** u32 */
  StartFrequency: number;
  /** u32 */
  EndFrequency: number;
  /** Windows.Win32.Media.DirectShow.BDA_LockType */
  LockRequested: BDA_LockType;
}

export const sizeofKSEVENTDATA_BDA_RF_TUNER_SCAN_S = 24;

export function allocKSEVENTDATA_BDA_RF_TUNER_SCAN_S(data?: Partial<KSEVENTDATA_BDA_RF_TUNER_SCAN_S>): Uint8Array {
  const buf = new Uint8Array(sizeofKSEVENTDATA_BDA_RF_TUNER_SCAN_S);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.EventData !== undefined) view.setBigUint64(0, data.EventData === null ? 0n : BigInt(util.toPointer(data.EventData)), true);
  // 0x08: u32
  if (data?.StartFrequency !== undefined) view.setUint32(8, Number(data.StartFrequency), true);
  // 0x0c: u32
  if (data?.EndFrequency !== undefined) view.setUint32(12, Number(data.EndFrequency), true);
  // 0x10: i32
  if (data?.LockRequested !== undefined) view.setInt32(16, Number(data.LockRequested), true);
  // 0x14: pad4
  return buf;
}

export class KSEVENTDATA_BDA_RF_TUNER_SCAN_SView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get EventData(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(0, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x08: u32
  get StartFrequency(): number {
    return this.view.getUint32(8, true);
  }

  // 0x0c: u32
  get EndFrequency(): number {
    return this.view.getUint32(12, true);
  }

  // 0x10: i32
  get LockRequested(): number {
    return this.view.getInt32(16, true);
  }

  // 0x14: pad4

  // 0x00: pointer
  set EventData(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(0, BigInt(util.toPointer(value)), true);
  }

  // 0x08: u32
  set StartFrequency(value: number) {
    this.view.setUint32(8, value, true);
  }

  // 0x0c: u32
  set EndFrequency(value: number) {
    this.view.setUint32(12, value, true);
  }

  // 0x10: i32
  set LockRequested(value: number) {
    this.view.setInt32(16, value, true);
  }

  // 0x14: pad4
}

/**
 * Windows.Win32.Media.DirectShow.PID_BITS (size: 8)
 */
export interface PID_BITS {
  /** u16 */
  _bitfield: number;
}

export const sizeofPID_BITS = 8;

export function allocPID_BITS(data?: Partial<PID_BITS>): Uint8Array {
  const buf = new Uint8Array(sizeofPID_BITS);
  const view = new DataView(buf.buffer);
  // 0x00: u16
  if (data?._bitfield !== undefined) view.setUint16(0, Number(data._bitfield), true);
  // 0x02: pad6
  return buf;
}

export class PID_BITSView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u16
  get _bitfield(): number {
    return this.view.getUint16(0, true);
  }

  // 0x02: pad6

  // 0x00: u16
  set _bitfield(value: number) {
    this.view.setUint16(0, value, true);
  }

  // 0x02: pad6
}

/**
 * Windows.Win32.Media.DirectShow.MPEG_HEADER_BITS (size: 8)
 */
export interface MPEG_HEADER_BITS {
  /** u16 */
  _bitfield: number;
}

export const sizeofMPEG_HEADER_BITS = 8;

export function allocMPEG_HEADER_BITS(data?: Partial<MPEG_HEADER_BITS>): Uint8Array {
  const buf = new Uint8Array(sizeofMPEG_HEADER_BITS);
  const view = new DataView(buf.buffer);
  // 0x00: u16
  if (data?._bitfield !== undefined) view.setUint16(0, Number(data._bitfield), true);
  // 0x02: pad6
  return buf;
}

export class MPEG_HEADER_BITSView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u16
  get _bitfield(): number {
    return this.view.getUint16(0, true);
  }

  // 0x02: pad6

  // 0x00: u16
  set _bitfield(value: number) {
    this.view.setUint16(0, value, true);
  }

  // 0x02: pad6
}

/**
 * Windows.Win32.Media.DirectShow.MPEG_HEADER_VERSION_BITS (size: 8)
 */
export interface MPEG_HEADER_VERSION_BITS {
  /** u8 */
  _bitfield: number;
}

export const sizeofMPEG_HEADER_VERSION_BITS = 8;

export function allocMPEG_HEADER_VERSION_BITS(data?: Partial<MPEG_HEADER_VERSION_BITS>): Uint8Array {
  const buf = new Uint8Array(sizeofMPEG_HEADER_VERSION_BITS);
  const view = new DataView(buf.buffer);
  // 0x00: u8
  if (data?._bitfield !== undefined) view.setUint8(0, Number(data._bitfield));
  // 0x01: pad7
  return buf;
}

export class MPEG_HEADER_VERSION_BITSView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u8
  get _bitfield(): number {
    return this.view.getUint8(0);
  }

  // 0x01: pad7

  // 0x00: u8
  set _bitfield(value: number) {
    this.view.setUint8(0, value);
  }

  // 0x01: pad7
}

/**
 * Windows.Win32.Media.Audio.WAVEFORMATEX (size: 24)
 */
export interface WAVEFORMATEX {
  /** u16 */
  wFormatTag: number;
  /** u16 */
  nChannels: number;
  /** u32 */
  nSamplesPerSec: number;
  /** u32 */
  nAvgBytesPerSec: number;
  /** u16 */
  nBlockAlign: number;
  /** u16 */
  wBitsPerSample: number;
  /** u16 */
  cbSize: number;
}

export const sizeofWAVEFORMATEX = 24;

export function allocWAVEFORMATEX(data?: Partial<WAVEFORMATEX>): Uint8Array {
  const buf = new Uint8Array(sizeofWAVEFORMATEX);
  const view = new DataView(buf.buffer);
  // 0x00: u16
  if (data?.wFormatTag !== undefined) view.setUint16(0, Number(data.wFormatTag), true);
  // 0x02: u16
  if (data?.nChannels !== undefined) view.setUint16(2, Number(data.nChannels), true);
  // 0x04: u32
  if (data?.nSamplesPerSec !== undefined) view.setUint32(4, Number(data.nSamplesPerSec), true);
  // 0x08: u32
  if (data?.nAvgBytesPerSec !== undefined) view.setUint32(8, Number(data.nAvgBytesPerSec), true);
  // 0x0c: u16
  if (data?.nBlockAlign !== undefined) view.setUint16(12, Number(data.nBlockAlign), true);
  // 0x0e: u16
  if (data?.wBitsPerSample !== undefined) view.setUint16(14, Number(data.wBitsPerSample), true);
  // 0x10: u16
  if (data?.cbSize !== undefined) view.setUint16(16, Number(data.cbSize), true);
  // 0x12: pad6
  return buf;
}

export class WAVEFORMATEXView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u16
  get wFormatTag(): number {
    return this.view.getUint16(0, true);
  }

  // 0x02: u16
  get nChannels(): number {
    return this.view.getUint16(2, true);
  }

  // 0x04: u32
  get nSamplesPerSec(): number {
    return this.view.getUint32(4, true);
  }

  // 0x08: u32
  get nAvgBytesPerSec(): number {
    return this.view.getUint32(8, true);
  }

  // 0x0c: u16
  get nBlockAlign(): number {
    return this.view.getUint16(12, true);
  }

  // 0x0e: u16
  get wBitsPerSample(): number {
    return this.view.getUint16(14, true);
  }

  // 0x10: u16
  get cbSize(): number {
    return this.view.getUint16(16, true);
  }

  // 0x12: pad6

  // 0x00: u16
  set wFormatTag(value: number) {
    this.view.setUint16(0, value, true);
  }

  // 0x02: u16
  set nChannels(value: number) {
    this.view.setUint16(2, value, true);
  }

  // 0x04: u32
  set nSamplesPerSec(value: number) {
    this.view.setUint32(4, value, true);
  }

  // 0x08: u32
  set nAvgBytesPerSec(value: number) {
    this.view.setUint32(8, value, true);
  }

  // 0x0c: u16
  set nBlockAlign(value: number) {
    this.view.setUint16(12, value, true);
  }

  // 0x0e: u16
  set wBitsPerSample(value: number) {
    this.view.setUint16(14, value, true);
  }

  // 0x10: u16
  set cbSize(value: number) {
    this.view.setUint16(16, value, true);
  }

  // 0x12: pad6
}

/**
 * Windows.Win32.Media.DirectShow.MPEG1WAVEFORMAT (size: 32)
 */
export interface MPEG1WAVEFORMAT {
  /** Windows.Win32.Media.Audio.WAVEFORMATEX */
  wfx: Uint8Array | Deno.PointerValue | null;
  /** u16 */
  fwHeadLayer: number;
  /** u32 */
  dwHeadBitrate: number;
  /** u16 */
  fwHeadMode: number;
  /** u16 */
  fwHeadModeExt: number;
  /** u16 */
  wHeadEmphasis: number;
  /** u16 */
  fwHeadFlags: number;
  /** u32 */
  dwPTSLow: number;
  /** u32 */
  dwPTSHigh: number;
}

export const sizeofMPEG1WAVEFORMAT = 32;

export function allocMPEG1WAVEFORMAT(data?: Partial<MPEG1WAVEFORMAT>): Uint8Array {
  const buf = new Uint8Array(sizeofMPEG1WAVEFORMAT);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.wfx !== undefined) view.setBigUint64(0, data.wfx === null ? 0n : BigInt(util.toPointer(data.wfx)), true);
  // 0x08: u16
  if (data?.fwHeadLayer !== undefined) view.setUint16(8, Number(data.fwHeadLayer), true);
  // 0x0a: u32
  if (data?.dwHeadBitrate !== undefined) view.setUint32(10, Number(data.dwHeadBitrate), true);
  // 0x0e: u16
  if (data?.fwHeadMode !== undefined) view.setUint16(14, Number(data.fwHeadMode), true);
  // 0x10: u16
  if (data?.fwHeadModeExt !== undefined) view.setUint16(16, Number(data.fwHeadModeExt), true);
  // 0x12: u16
  if (data?.wHeadEmphasis !== undefined) view.setUint16(18, Number(data.wHeadEmphasis), true);
  // 0x14: u16
  if (data?.fwHeadFlags !== undefined) view.setUint16(20, Number(data.fwHeadFlags), true);
  // 0x16: u32
  if (data?.dwPTSLow !== undefined) view.setUint32(22, Number(data.dwPTSLow), true);
  // 0x1a: u32
  if (data?.dwPTSHigh !== undefined) view.setUint32(26, Number(data.dwPTSHigh), true);
  // 0x1e: pad2
  return buf;
}

export class MPEG1WAVEFORMATView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get wfx(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(0, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x08: u16
  get fwHeadLayer(): number {
    return this.view.getUint16(8, true);
  }

  // 0x0a: u32
  get dwHeadBitrate(): number {
    return this.view.getUint32(10, true);
  }

  // 0x0e: u16
  get fwHeadMode(): number {
    return this.view.getUint16(14, true);
  }

  // 0x10: u16
  get fwHeadModeExt(): number {
    return this.view.getUint16(16, true);
  }

  // 0x12: u16
  get wHeadEmphasis(): number {
    return this.view.getUint16(18, true);
  }

  // 0x14: u16
  get fwHeadFlags(): number {
    return this.view.getUint16(20, true);
  }

  // 0x16: u32
  get dwPTSLow(): number {
    return this.view.getUint32(22, true);
  }

  // 0x1a: u32
  get dwPTSHigh(): number {
    return this.view.getUint32(26, true);
  }

  // 0x1e: pad2

  // 0x00: pointer
  set wfx(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(0, BigInt(util.toPointer(value)), true);
  }

  // 0x08: u16
  set fwHeadLayer(value: number) {
    this.view.setUint16(8, value, true);
  }

  // 0x0a: u32
  set dwHeadBitrate(value: number) {
    this.view.setUint32(10, value, true);
  }

  // 0x0e: u16
  set fwHeadMode(value: number) {
    this.view.setUint16(14, value, true);
  }

  // 0x10: u16
  set fwHeadModeExt(value: number) {
    this.view.setUint16(16, value, true);
  }

  // 0x12: u16
  set wHeadEmphasis(value: number) {
    this.view.setUint16(18, value, true);
  }

  // 0x14: u16
  set fwHeadFlags(value: number) {
    this.view.setUint16(20, value, true);
  }

  // 0x16: u32
  set dwPTSLow(value: number) {
    this.view.setUint32(22, value, true);
  }

  // 0x1a: u32
  set dwPTSHigh(value: number) {
    this.view.setUint32(26, value, true);
  }

  // 0x1e: pad2
}

/**
 * Windows.Win32.Media.DirectShow.MPEGLAYER3WAVEFORMAT (size: 24)
 */
export interface MPEGLAYER3WAVEFORMAT {
  /** Windows.Win32.Media.Audio.WAVEFORMATEX */
  wfx: Uint8Array | Deno.PointerValue | null;
  /** u16 */
  wID: number;
  /** Windows.Win32.Media.DirectShow.MPEGLAYER3WAVEFORMAT_FLAGS */
  fdwFlags: MPEGLAYER3WAVEFORMAT_FLAGS;
  /** u16 */
  nBlockSize: number;
  /** u16 */
  nFramesPerBlock: number;
  /** u16 */
  nCodecDelay: number;
}

export const sizeofMPEGLAYER3WAVEFORMAT = 24;

export function allocMPEGLAYER3WAVEFORMAT(data?: Partial<MPEGLAYER3WAVEFORMAT>): Uint8Array {
  const buf = new Uint8Array(sizeofMPEGLAYER3WAVEFORMAT);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.wfx !== undefined) view.setBigUint64(0, data.wfx === null ? 0n : BigInt(util.toPointer(data.wfx)), true);
  // 0x08: u16
  if (data?.wID !== undefined) view.setUint16(8, Number(data.wID), true);
  // 0x0a: u32
  if (data?.fdwFlags !== undefined) view.setUint32(10, Number(data.fdwFlags), true);
  // 0x0e: u16
  if (data?.nBlockSize !== undefined) view.setUint16(14, Number(data.nBlockSize), true);
  // 0x10: u16
  if (data?.nFramesPerBlock !== undefined) view.setUint16(16, Number(data.nFramesPerBlock), true);
  // 0x12: u16
  if (data?.nCodecDelay !== undefined) view.setUint16(18, Number(data.nCodecDelay), true);
  // 0x14: pad4
  return buf;
}

export class MPEGLAYER3WAVEFORMATView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get wfx(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(0, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x08: u16
  get wID(): number {
    return this.view.getUint16(8, true);
  }

  // 0x0a: u32
  get fdwFlags(): number {
    return this.view.getUint32(10, true);
  }

  // 0x0e: u16
  get nBlockSize(): number {
    return this.view.getUint16(14, true);
  }

  // 0x10: u16
  get nFramesPerBlock(): number {
    return this.view.getUint16(16, true);
  }

  // 0x12: u16
  get nCodecDelay(): number {
    return this.view.getUint16(18, true);
  }

  // 0x14: pad4

  // 0x00: pointer
  set wfx(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(0, BigInt(util.toPointer(value)), true);
  }

  // 0x08: u16
  set wID(value: number) {
    this.view.setUint16(8, value, true);
  }

  // 0x0a: u32
  set fdwFlags(value: number) {
    this.view.setUint32(10, value, true);
  }

  // 0x0e: u16
  set nBlockSize(value: number) {
    this.view.setUint16(14, value, true);
  }

  // 0x10: u16
  set nFramesPerBlock(value: number) {
    this.view.setUint16(16, value, true);
  }

  // 0x12: u16
  set nCodecDelay(value: number) {
    this.view.setUint16(18, value, true);
  }

  // 0x14: pad4
}

/**
 * Windows.Win32.Media.DirectShow.HEAACWAVEINFO (size: 24)
 */
export interface HEAACWAVEINFO {
  /** Windows.Win32.Media.Audio.WAVEFORMATEX */
  wfx: Uint8Array | Deno.PointerValue | null;
  /** u16 */
  wPayloadType: number;
  /** u16 */
  wAudioProfileLevelIndication: number;
  /** u16 */
  wStructType: number;
  /** u16 */
  wReserved1: number;
  /** u32 */
  dwReserved2: number;
}

export const sizeofHEAACWAVEINFO = 24;

export function allocHEAACWAVEINFO(data?: Partial<HEAACWAVEINFO>): Uint8Array {
  const buf = new Uint8Array(sizeofHEAACWAVEINFO);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.wfx !== undefined) view.setBigUint64(0, data.wfx === null ? 0n : BigInt(util.toPointer(data.wfx)), true);
  // 0x08: u16
  if (data?.wPayloadType !== undefined) view.setUint16(8, Number(data.wPayloadType), true);
  // 0x0a: u16
  if (data?.wAudioProfileLevelIndication !== undefined) view.setUint16(10, Number(data.wAudioProfileLevelIndication), true);
  // 0x0c: u16
  if (data?.wStructType !== undefined) view.setUint16(12, Number(data.wStructType), true);
  // 0x0e: u16
  if (data?.wReserved1 !== undefined) view.setUint16(14, Number(data.wReserved1), true);
  // 0x10: u32
  if (data?.dwReserved2 !== undefined) view.setUint32(16, Number(data.dwReserved2), true);
  // 0x14: pad4
  return buf;
}

export class HEAACWAVEINFOView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get wfx(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(0, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x08: u16
  get wPayloadType(): number {
    return this.view.getUint16(8, true);
  }

  // 0x0a: u16
  get wAudioProfileLevelIndication(): number {
    return this.view.getUint16(10, true);
  }

  // 0x0c: u16
  get wStructType(): number {
    return this.view.getUint16(12, true);
  }

  // 0x0e: u16
  get wReserved1(): number {
    return this.view.getUint16(14, true);
  }

  // 0x10: u32
  get dwReserved2(): number {
    return this.view.getUint32(16, true);
  }

  // 0x14: pad4

  // 0x00: pointer
  set wfx(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(0, BigInt(util.toPointer(value)), true);
  }

  // 0x08: u16
  set wPayloadType(value: number) {
    this.view.setUint16(8, value, true);
  }

  // 0x0a: u16
  set wAudioProfileLevelIndication(value: number) {
    this.view.setUint16(10, value, true);
  }

  // 0x0c: u16
  set wStructType(value: number) {
    this.view.setUint16(12, value, true);
  }

  // 0x0e: u16
  set wReserved1(value: number) {
    this.view.setUint16(14, value, true);
  }

  // 0x10: u32
  set dwReserved2(value: number) {
    this.view.setUint32(16, value, true);
  }

  // 0x14: pad4
}

/**
 * Windows.Win32.Media.DirectShow.HEAACWAVEFORMAT (size: 16)
 */
export interface HEAACWAVEFORMAT {
  /** Windows.Win32.Media.DirectShow.HEAACWAVEINFO */
  wfInfo: Uint8Array | Deno.PointerValue | null;
  /** array */
  pbAudioSpecificConfig: Deno.PointerValue | null;
}

export const sizeofHEAACWAVEFORMAT = 16;

export function allocHEAACWAVEFORMAT(data?: Partial<HEAACWAVEFORMAT>): Uint8Array {
  const buf = new Uint8Array(sizeofHEAACWAVEFORMAT);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.wfInfo !== undefined) view.setBigUint64(0, data.wfInfo === null ? 0n : BigInt(util.toPointer(data.wfInfo)), true);
  // 0x08: pointer
  if (data?.pbAudioSpecificConfig !== undefined) view.setBigUint64(8, data.pbAudioSpecificConfig === null ? 0n : BigInt(util.toPointer(data.pbAudioSpecificConfig)), true);
  return buf;
}

export class HEAACWAVEFORMATView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get wfInfo(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(0, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x08: pointer
  get pbAudioSpecificConfig(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(8, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: pointer
  set wfInfo(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(0, BigInt(util.toPointer(value)), true);
  }

  // 0x08: pointer
  set pbAudioSpecificConfig(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(8, BigInt(util.toPointer(value)), true);
  }
}

/**
 * Windows.Win32.Media.DirectShow.DXVA_COPPSetProtectionLevelCmdData (size: 16)
 */
export interface DXVA_COPPSetProtectionLevelCmdData {
  /** u32 */
  ProtType: number;
  /** u32 */
  ProtLevel: number;
  /** u32 */
  ExtendedInfoChangeMask: number;
  /** u32 */
  ExtendedInfoData: number;
}

export const sizeofDXVA_COPPSetProtectionLevelCmdData = 16;

export function allocDXVA_COPPSetProtectionLevelCmdData(data?: Partial<DXVA_COPPSetProtectionLevelCmdData>): Uint8Array {
  const buf = new Uint8Array(sizeofDXVA_COPPSetProtectionLevelCmdData);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.ProtType !== undefined) view.setUint32(0, Number(data.ProtType), true);
  // 0x04: u32
  if (data?.ProtLevel !== undefined) view.setUint32(4, Number(data.ProtLevel), true);
  // 0x08: u32
  if (data?.ExtendedInfoChangeMask !== undefined) view.setUint32(8, Number(data.ExtendedInfoChangeMask), true);
  // 0x0c: u32
  if (data?.ExtendedInfoData !== undefined) view.setUint32(12, Number(data.ExtendedInfoData), true);
  return buf;
}

export class DXVA_COPPSetProtectionLevelCmdDataView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get ProtType(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: u32
  get ProtLevel(): number {
    return this.view.getUint32(4, true);
  }

  // 0x08: u32
  get ExtendedInfoChangeMask(): number {
    return this.view.getUint32(8, true);
  }

  // 0x0c: u32
  get ExtendedInfoData(): number {
    return this.view.getUint32(12, true);
  }

  // 0x00: u32
  set ProtType(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: u32
  set ProtLevel(value: number) {
    this.view.setUint32(4, value, true);
  }

  // 0x08: u32
  set ExtendedInfoChangeMask(value: number) {
    this.view.setUint32(8, value, true);
  }

  // 0x0c: u32
  set ExtendedInfoData(value: number) {
    this.view.setUint32(12, value, true);
  }
}

/**
 * Windows.Win32.Media.DirectShow.DXVA_COPPSetSignalingCmdData (size: 56)
 */
export interface DXVA_COPPSetSignalingCmdData {
  /** u32 */
  ActiveTVProtectionStandard: number;
  /** u32 */
  AspectRatioChangeMask1: number;
  /** u32 */
  AspectRatioData1: number;
  /** u32 */
  AspectRatioChangeMask2: number;
  /** u32 */
  AspectRatioData2: number;
  /** u32 */
  AspectRatioChangeMask3: number;
  /** u32 */
  AspectRatioData3: number;
  /** array */
  ExtendedInfoChangeMask: Deno.PointerValue | null;
  /** array */
  ExtendedInfoData: Deno.PointerValue | null;
  /** u32 */
  Reserved: number;
}

export const sizeofDXVA_COPPSetSignalingCmdData = 56;

export function allocDXVA_COPPSetSignalingCmdData(data?: Partial<DXVA_COPPSetSignalingCmdData>): Uint8Array {
  const buf = new Uint8Array(sizeofDXVA_COPPSetSignalingCmdData);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.ActiveTVProtectionStandard !== undefined) view.setUint32(0, Number(data.ActiveTVProtectionStandard), true);
  // 0x04: u32
  if (data?.AspectRatioChangeMask1 !== undefined) view.setUint32(4, Number(data.AspectRatioChangeMask1), true);
  // 0x08: u32
  if (data?.AspectRatioData1 !== undefined) view.setUint32(8, Number(data.AspectRatioData1), true);
  // 0x0c: u32
  if (data?.AspectRatioChangeMask2 !== undefined) view.setUint32(12, Number(data.AspectRatioChangeMask2), true);
  // 0x10: u32
  if (data?.AspectRatioData2 !== undefined) view.setUint32(16, Number(data.AspectRatioData2), true);
  // 0x14: u32
  if (data?.AspectRatioChangeMask3 !== undefined) view.setUint32(20, Number(data.AspectRatioChangeMask3), true);
  // 0x18: u32
  if (data?.AspectRatioData3 !== undefined) view.setUint32(24, Number(data.AspectRatioData3), true);
  // 0x1c: pad4
  // 0x20: pointer
  if (data?.ExtendedInfoChangeMask !== undefined) view.setBigUint64(32, data.ExtendedInfoChangeMask === null ? 0n : BigInt(util.toPointer(data.ExtendedInfoChangeMask)), true);
  // 0x28: pointer
  if (data?.ExtendedInfoData !== undefined) view.setBigUint64(40, data.ExtendedInfoData === null ? 0n : BigInt(util.toPointer(data.ExtendedInfoData)), true);
  // 0x30: u32
  if (data?.Reserved !== undefined) view.setUint32(48, Number(data.Reserved), true);
  // 0x34: pad4
  return buf;
}

export class DXVA_COPPSetSignalingCmdDataView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get ActiveTVProtectionStandard(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: u32
  get AspectRatioChangeMask1(): number {
    return this.view.getUint32(4, true);
  }

  // 0x08: u32
  get AspectRatioData1(): number {
    return this.view.getUint32(8, true);
  }

  // 0x0c: u32
  get AspectRatioChangeMask2(): number {
    return this.view.getUint32(12, true);
  }

  // 0x10: u32
  get AspectRatioData2(): number {
    return this.view.getUint32(16, true);
  }

  // 0x14: u32
  get AspectRatioChangeMask3(): number {
    return this.view.getUint32(20, true);
  }

  // 0x18: u32
  get AspectRatioData3(): number {
    return this.view.getUint32(24, true);
  }

  // 0x1c: pad4

  // 0x20: pointer
  get ExtendedInfoChangeMask(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(32, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x28: pointer
  get ExtendedInfoData(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(40, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x30: u32
  get Reserved(): number {
    return this.view.getUint32(48, true);
  }

  // 0x34: pad4

  // 0x00: u32
  set ActiveTVProtectionStandard(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: u32
  set AspectRatioChangeMask1(value: number) {
    this.view.setUint32(4, value, true);
  }

  // 0x08: u32
  set AspectRatioData1(value: number) {
    this.view.setUint32(8, value, true);
  }

  // 0x0c: u32
  set AspectRatioChangeMask2(value: number) {
    this.view.setUint32(12, value, true);
  }

  // 0x10: u32
  set AspectRatioData2(value: number) {
    this.view.setUint32(16, value, true);
  }

  // 0x14: u32
  set AspectRatioChangeMask3(value: number) {
    this.view.setUint32(20, value, true);
  }

  // 0x18: u32
  set AspectRatioData3(value: number) {
    this.view.setUint32(24, value, true);
  }

  // 0x1c: pad4

  // 0x20: pointer
  set ExtendedInfoChangeMask(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(32, BigInt(util.toPointer(value)), true);
  }

  // 0x28: pointer
  set ExtendedInfoData(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(40, BigInt(util.toPointer(value)), true);
  }

  // 0x30: u32
  set Reserved(value: number) {
    this.view.setUint32(48, value, true);
  }

  // 0x34: pad4
}

/**
 * Windows.Win32.Media.DirectShow.DXVA_COPPStatusData (size: 24)
 */
export interface DXVA_COPPStatusData {
  /** System.Guid */
  rApp: Uint8Array | Deno.PointerValue | null;
  /** u32 */
  dwFlags: number;
  /** u32 */
  dwData: number;
  /** u32 */
  ExtendedInfoValidMask: number;
  /** u32 */
  ExtendedInfoData: number;
}

export const sizeofDXVA_COPPStatusData = 24;

export function allocDXVA_COPPStatusData(data?: Partial<DXVA_COPPStatusData>): Uint8Array {
  const buf = new Uint8Array(sizeofDXVA_COPPStatusData);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.rApp !== undefined) view.setBigUint64(0, data.rApp === null ? 0n : BigInt(util.toPointer(data.rApp)), true);
  // 0x08: u32
  if (data?.dwFlags !== undefined) view.setUint32(8, Number(data.dwFlags), true);
  // 0x0c: u32
  if (data?.dwData !== undefined) view.setUint32(12, Number(data.dwData), true);
  // 0x10: u32
  if (data?.ExtendedInfoValidMask !== undefined) view.setUint32(16, Number(data.ExtendedInfoValidMask), true);
  // 0x14: u32
  if (data?.ExtendedInfoData !== undefined) view.setUint32(20, Number(data.ExtendedInfoData), true);
  return buf;
}

export class DXVA_COPPStatusDataView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get rApp(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(0, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x08: u32
  get dwFlags(): number {
    return this.view.getUint32(8, true);
  }

  // 0x0c: u32
  get dwData(): number {
    return this.view.getUint32(12, true);
  }

  // 0x10: u32
  get ExtendedInfoValidMask(): number {
    return this.view.getUint32(16, true);
  }

  // 0x14: u32
  get ExtendedInfoData(): number {
    return this.view.getUint32(20, true);
  }

  // 0x00: pointer
  set rApp(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(0, BigInt(util.toPointer(value)), true);
  }

  // 0x08: u32
  set dwFlags(value: number) {
    this.view.setUint32(8, value, true);
  }

  // 0x0c: u32
  set dwData(value: number) {
    this.view.setUint32(12, value, true);
  }

  // 0x10: u32
  set ExtendedInfoValidMask(value: number) {
    this.view.setUint32(16, value, true);
  }

  // 0x14: u32
  set ExtendedInfoData(value: number) {
    this.view.setUint32(20, value, true);
  }
}

/**
 * Windows.Win32.Media.DirectShow.DXVA_COPPStatusDisplayData (size: 40)
 */
export interface DXVA_COPPStatusDisplayData {
  /** System.Guid */
  rApp: Uint8Array | Deno.PointerValue | null;
  /** u32 */
  dwFlags: number;
  /** u32 */
  DisplayWidth: number;
  /** u32 */
  DisplayHeight: number;
  /** u32 */
  Format: number;
  /** u32 */
  d3dFormat: number;
  /** u32 */
  FreqNumerator: number;
  /** u32 */
  FreqDenominator: number;
}

export const sizeofDXVA_COPPStatusDisplayData = 40;

export function allocDXVA_COPPStatusDisplayData(data?: Partial<DXVA_COPPStatusDisplayData>): Uint8Array {
  const buf = new Uint8Array(sizeofDXVA_COPPStatusDisplayData);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.rApp !== undefined) view.setBigUint64(0, data.rApp === null ? 0n : BigInt(util.toPointer(data.rApp)), true);
  // 0x08: u32
  if (data?.dwFlags !== undefined) view.setUint32(8, Number(data.dwFlags), true);
  // 0x0c: u32
  if (data?.DisplayWidth !== undefined) view.setUint32(12, Number(data.DisplayWidth), true);
  // 0x10: u32
  if (data?.DisplayHeight !== undefined) view.setUint32(16, Number(data.DisplayHeight), true);
  // 0x14: u32
  if (data?.Format !== undefined) view.setUint32(20, Number(data.Format), true);
  // 0x18: u32
  if (data?.d3dFormat !== undefined) view.setUint32(24, Number(data.d3dFormat), true);
  // 0x1c: u32
  if (data?.FreqNumerator !== undefined) view.setUint32(28, Number(data.FreqNumerator), true);
  // 0x20: u32
  if (data?.FreqDenominator !== undefined) view.setUint32(32, Number(data.FreqDenominator), true);
  // 0x24: pad4
  return buf;
}

export class DXVA_COPPStatusDisplayDataView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get rApp(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(0, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x08: u32
  get dwFlags(): number {
    return this.view.getUint32(8, true);
  }

  // 0x0c: u32
  get DisplayWidth(): number {
    return this.view.getUint32(12, true);
  }

  // 0x10: u32
  get DisplayHeight(): number {
    return this.view.getUint32(16, true);
  }

  // 0x14: u32
  get Format(): number {
    return this.view.getUint32(20, true);
  }

  // 0x18: u32
  get d3dFormat(): number {
    return this.view.getUint32(24, true);
  }

  // 0x1c: u32
  get FreqNumerator(): number {
    return this.view.getUint32(28, true);
  }

  // 0x20: u32
  get FreqDenominator(): number {
    return this.view.getUint32(32, true);
  }

  // 0x24: pad4

  // 0x00: pointer
  set rApp(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(0, BigInt(util.toPointer(value)), true);
  }

  // 0x08: u32
  set dwFlags(value: number) {
    this.view.setUint32(8, value, true);
  }

  // 0x0c: u32
  set DisplayWidth(value: number) {
    this.view.setUint32(12, value, true);
  }

  // 0x10: u32
  set DisplayHeight(value: number) {
    this.view.setUint32(16, value, true);
  }

  // 0x14: u32
  set Format(value: number) {
    this.view.setUint32(20, value, true);
  }

  // 0x18: u32
  set d3dFormat(value: number) {
    this.view.setUint32(24, value, true);
  }

  // 0x1c: u32
  set FreqNumerator(value: number) {
    this.view.setUint32(28, value, true);
  }

  // 0x20: u32
  set FreqDenominator(value: number) {
    this.view.setUint32(32, value, true);
  }

  // 0x24: pad4
}

/**
 * Windows.Win32.Media.DirectShow.DXVA_COPPStatusHDCPKeyData (size: 40)
 */
export interface DXVA_COPPStatusHDCPKeyData {
  /** System.Guid */
  rApp: Uint8Array | Deno.PointerValue | null;
  /** u32 */
  dwFlags: number;
  /** u32 */
  dwHDCPFlags: number;
  /** System.Guid */
  BKey: Uint8Array | Deno.PointerValue | null;
  /** System.Guid */
  Reserved1: Uint8Array | Deno.PointerValue | null;
  /** System.Guid */
  Reserved2: Uint8Array | Deno.PointerValue | null;
}

export const sizeofDXVA_COPPStatusHDCPKeyData = 40;

export function allocDXVA_COPPStatusHDCPKeyData(data?: Partial<DXVA_COPPStatusHDCPKeyData>): Uint8Array {
  const buf = new Uint8Array(sizeofDXVA_COPPStatusHDCPKeyData);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.rApp !== undefined) view.setBigUint64(0, data.rApp === null ? 0n : BigInt(util.toPointer(data.rApp)), true);
  // 0x08: u32
  if (data?.dwFlags !== undefined) view.setUint32(8, Number(data.dwFlags), true);
  // 0x0c: u32
  if (data?.dwHDCPFlags !== undefined) view.setUint32(12, Number(data.dwHDCPFlags), true);
  // 0x10: pointer
  if (data?.BKey !== undefined) view.setBigUint64(16, data.BKey === null ? 0n : BigInt(util.toPointer(data.BKey)), true);
  // 0x18: pointer
  if (data?.Reserved1 !== undefined) view.setBigUint64(24, data.Reserved1 === null ? 0n : BigInt(util.toPointer(data.Reserved1)), true);
  // 0x20: pointer
  if (data?.Reserved2 !== undefined) view.setBigUint64(32, data.Reserved2 === null ? 0n : BigInt(util.toPointer(data.Reserved2)), true);
  return buf;
}

export class DXVA_COPPStatusHDCPKeyDataView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get rApp(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(0, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x08: u32
  get dwFlags(): number {
    return this.view.getUint32(8, true);
  }

  // 0x0c: u32
  get dwHDCPFlags(): number {
    return this.view.getUint32(12, true);
  }

  // 0x10: pointer
  get BKey(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(16, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x18: pointer
  get Reserved1(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(24, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x20: pointer
  get Reserved2(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(32, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: pointer
  set rApp(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(0, BigInt(util.toPointer(value)), true);
  }

  // 0x08: u32
  set dwFlags(value: number) {
    this.view.setUint32(8, value, true);
  }

  // 0x0c: u32
  set dwHDCPFlags(value: number) {
    this.view.setUint32(12, value, true);
  }

  // 0x10: pointer
  set BKey(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(16, BigInt(util.toPointer(value)), true);
  }

  // 0x18: pointer
  set Reserved1(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(24, BigInt(util.toPointer(value)), true);
  }

  // 0x20: pointer
  set Reserved2(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(32, BigInt(util.toPointer(value)), true);
  }
}

/**
 * Windows.Win32.Media.DirectShow.DXVA_COPPStatusSignalingCmdData (size: 64)
 */
export interface DXVA_COPPStatusSignalingCmdData {
  /** System.Guid */
  rApp: Uint8Array | Deno.PointerValue | null;
  /** u32 */
  dwFlags: number;
  /** u32 */
  AvailableTVProtectionStandards: number;
  /** u32 */
  ActiveTVProtectionStandard: number;
  /** u32 */
  TVType: number;
  /** u32 */
  AspectRatioValidMask1: number;
  /** u32 */
  AspectRatioData1: number;
  /** u32 */
  AspectRatioValidMask2: number;
  /** u32 */
  AspectRatioData2: number;
  /** u32 */
  AspectRatioValidMask3: number;
  /** u32 */
  AspectRatioData3: number;
  /** array */
  ExtendedInfoValidMask: Deno.PointerValue | null;
  /** array */
  ExtendedInfoData: Deno.PointerValue | null;
}

export const sizeofDXVA_COPPStatusSignalingCmdData = 64;

export function allocDXVA_COPPStatusSignalingCmdData(data?: Partial<DXVA_COPPStatusSignalingCmdData>): Uint8Array {
  const buf = new Uint8Array(sizeofDXVA_COPPStatusSignalingCmdData);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.rApp !== undefined) view.setBigUint64(0, data.rApp === null ? 0n : BigInt(util.toPointer(data.rApp)), true);
  // 0x08: u32
  if (data?.dwFlags !== undefined) view.setUint32(8, Number(data.dwFlags), true);
  // 0x0c: u32
  if (data?.AvailableTVProtectionStandards !== undefined) view.setUint32(12, Number(data.AvailableTVProtectionStandards), true);
  // 0x10: u32
  if (data?.ActiveTVProtectionStandard !== undefined) view.setUint32(16, Number(data.ActiveTVProtectionStandard), true);
  // 0x14: u32
  if (data?.TVType !== undefined) view.setUint32(20, Number(data.TVType), true);
  // 0x18: u32
  if (data?.AspectRatioValidMask1 !== undefined) view.setUint32(24, Number(data.AspectRatioValidMask1), true);
  // 0x1c: u32
  if (data?.AspectRatioData1 !== undefined) view.setUint32(28, Number(data.AspectRatioData1), true);
  // 0x20: u32
  if (data?.AspectRatioValidMask2 !== undefined) view.setUint32(32, Number(data.AspectRatioValidMask2), true);
  // 0x24: u32
  if (data?.AspectRatioData2 !== undefined) view.setUint32(36, Number(data.AspectRatioData2), true);
  // 0x28: u32
  if (data?.AspectRatioValidMask3 !== undefined) view.setUint32(40, Number(data.AspectRatioValidMask3), true);
  // 0x2c: u32
  if (data?.AspectRatioData3 !== undefined) view.setUint32(44, Number(data.AspectRatioData3), true);
  // 0x30: pointer
  if (data?.ExtendedInfoValidMask !== undefined) view.setBigUint64(48, data.ExtendedInfoValidMask === null ? 0n : BigInt(util.toPointer(data.ExtendedInfoValidMask)), true);
  // 0x38: pointer
  if (data?.ExtendedInfoData !== undefined) view.setBigUint64(56, data.ExtendedInfoData === null ? 0n : BigInt(util.toPointer(data.ExtendedInfoData)), true);
  return buf;
}

export class DXVA_COPPStatusSignalingCmdDataView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get rApp(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(0, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x08: u32
  get dwFlags(): number {
    return this.view.getUint32(8, true);
  }

  // 0x0c: u32
  get AvailableTVProtectionStandards(): number {
    return this.view.getUint32(12, true);
  }

  // 0x10: u32
  get ActiveTVProtectionStandard(): number {
    return this.view.getUint32(16, true);
  }

  // 0x14: u32
  get TVType(): number {
    return this.view.getUint32(20, true);
  }

  // 0x18: u32
  get AspectRatioValidMask1(): number {
    return this.view.getUint32(24, true);
  }

  // 0x1c: u32
  get AspectRatioData1(): number {
    return this.view.getUint32(28, true);
  }

  // 0x20: u32
  get AspectRatioValidMask2(): number {
    return this.view.getUint32(32, true);
  }

  // 0x24: u32
  get AspectRatioData2(): number {
    return this.view.getUint32(36, true);
  }

  // 0x28: u32
  get AspectRatioValidMask3(): number {
    return this.view.getUint32(40, true);
  }

  // 0x2c: u32
  get AspectRatioData3(): number {
    return this.view.getUint32(44, true);
  }

  // 0x30: pointer
  get ExtendedInfoValidMask(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(48, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x38: pointer
  get ExtendedInfoData(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(56, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: pointer
  set rApp(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(0, BigInt(util.toPointer(value)), true);
  }

  // 0x08: u32
  set dwFlags(value: number) {
    this.view.setUint32(8, value, true);
  }

  // 0x0c: u32
  set AvailableTVProtectionStandards(value: number) {
    this.view.setUint32(12, value, true);
  }

  // 0x10: u32
  set ActiveTVProtectionStandard(value: number) {
    this.view.setUint32(16, value, true);
  }

  // 0x14: u32
  set TVType(value: number) {
    this.view.setUint32(20, value, true);
  }

  // 0x18: u32
  set AspectRatioValidMask1(value: number) {
    this.view.setUint32(24, value, true);
  }

  // 0x1c: u32
  set AspectRatioData1(value: number) {
    this.view.setUint32(28, value, true);
  }

  // 0x20: u32
  set AspectRatioValidMask2(value: number) {
    this.view.setUint32(32, value, true);
  }

  // 0x24: u32
  set AspectRatioData2(value: number) {
    this.view.setUint32(36, value, true);
  }

  // 0x28: u32
  set AspectRatioValidMask3(value: number) {
    this.view.setUint32(40, value, true);
  }

  // 0x2c: u32
  set AspectRatioData3(value: number) {
    this.view.setUint32(44, value, true);
  }

  // 0x30: pointer
  set ExtendedInfoValidMask(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(48, BigInt(util.toPointer(value)), true);
  }

  // 0x38: pointer
  set ExtendedInfoData(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(56, BigInt(util.toPointer(value)), true);
  }
}

export type PSTR = Deno.PointerValue | Uint8Array | null;

// Native Libraries

try {
  var libQUARTZ_dll = Deno.dlopen("QUARTZ.dll", {
    AMGetErrorTextA: {
      parameters: ["pointer", "buffer", "u32"],
      result: "u32",
    },
    AMGetErrorTextW: {
      parameters: ["pointer", "buffer", "u32"],
      result: "u32",
    },
  }).symbols;
} catch(e) { /* ignore */ }

// Symbols

export function AMGetErrorTextA(
  hr: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */,
  pbuffer: string | null | Uint8Array /* Windows.Win32.Foundation.PSTR */,
  MaxLen: number /* u32 */,
): number /* u32 */ {
  return libQUARTZ_dll.AMGetErrorTextA(util.toPointer(hr), util.pstrToFfi(pbuffer), MaxLen);
}

export function AMGetErrorTextW(
  hr: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */,
  pbuffer: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  MaxLen: number /* u32 */,
): number /* u32 */ {
  return libQUARTZ_dll.AMGetErrorTextW(util.toPointer(hr), util.pwstrToFfi(pbuffer), MaxLen);
}

