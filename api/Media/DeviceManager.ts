/// Auto-generated by Deno Win32: Windows.Win32.Media.DeviceManager.Apis

import * as util from "../../util.ts";

// Enums
export type WMDM_TAG_DATATYPE = number;
export type WMDM_SESSION_TYPE = number;
export type WMDM_STORAGE_ENUM_MODE = number;
export type WMDM_FORMATCODE = number;
export type WMDM_ENUM_PROP_VALID_VALUES_FORM = number;
export type WMDM_FIND_SCOPE = number;
export type WMDMMessage = number;

// Constants
export const IOCTL_MTP_CUSTOM_COMMAND = 827348045;
export const MTP_NEXTPHASE_READ_DATA = 1;
export const MTP_NEXTPHASE_WRITE_DATA = 2;
export const MTP_NEXTPHASE_NO_DATA = 3;
export const RSA_KEY_LEN = 64;
export const SAC_SESSION_KEYLEN = 8;
export const SAC_PROTOCOL_WMDM = 1;
export const SAC_PROTOCOL_V1 = 2;
export const SAC_CERT_X509 = 1;
export const SAC_CERT_V1 = 2;
export const WMDMID_LENGTH = 128;
export const WMDM_MAC_LENGTH = 8;
export const WMDM_S_NOT_ALL_PROPERTIES_APPLIED = 282625;
export const WMDM_S_NOT_ALL_PROPERTIES_RETRIEVED = 282626;
export const WMDM_E_BUSY = "-2147201024";
export const WMDM_E_INTERFACEDEAD = "-2147201023";
export const WMDM_E_INVALIDTYPE = "-2147201022";
export const WMDM_E_PROCESSFAILED = "-2147201021";
export const WMDM_E_NOTSUPPORTED = "-2147201020";
export const WMDM_E_NOTCERTIFIED = "-2147201019";
export const WMDM_E_NORIGHTS = "-2147201018";
export const WMDM_E_CALL_OUT_OF_SEQUENCE = "-2147201017";
export const WMDM_E_BUFFERTOOSMALL = "-2147201016";
export const WMDM_E_MOREDATA = "-2147201015";
export const WMDM_E_MAC_CHECK_FAILED = "-2147201014";
export const WMDM_E_USER_CANCELLED = "-2147201013";
export const WMDM_E_SDMI_TRIGGER = "-2147201012";
export const WMDM_E_SDMI_NOMORECOPIES = "-2147201011";
export const WMDM_E_REVOKED = "-2147201010";
export const WMDM_E_LICENSE_NOTEXIST = "-2147201009";
export const WMDM_E_INCORRECT_APPSEC = "-2147201008";
export const WMDM_E_INCORRECT_RIGHTS = "-2147201007";
export const WMDM_E_LICENSE_EXPIRED = "-2147201006";
export const WMDM_E_CANTOPEN_PMSN_SERVICE_PIPE = "-2147201005";
export const WMDM_E_TOO_MANY_SESSIONS = "-2147201005";
export const WMDM_WMDM_REVOKED = 1;
export const WMDM_APP_REVOKED = 2;
export const WMDM_SP_REVOKED = 4;
export const WMDM_SCP_REVOKED = 8;
export const WMDM_GET_FORMAT_SUPPORT_AUDIO = 1;
export const WMDM_GET_FORMAT_SUPPORT_VIDEO = 2;
export const WMDM_GET_FORMAT_SUPPORT_FILE = 4;
export const WMDM_RIGHTS_PLAYBACKCOUNT = 1;
export const WMDM_RIGHTS_EXPIRATIONDATE = 2;
export const WMDM_RIGHTS_GROUPID = 4;
export const WMDM_RIGHTS_FREESERIALIDS = 8;
export const WMDM_RIGHTS_NAMEDSERIALIDS = 16;
export const WMDM_DEVICE_TYPE_PLAYBACK = 1;
export const WMDM_DEVICE_TYPE_RECORD = 2;
export const WMDM_DEVICE_TYPE_DECODE = 4;
export const WMDM_DEVICE_TYPE_ENCODE = 8;
export const WMDM_DEVICE_TYPE_STORAGE = 16;
export const WMDM_DEVICE_TYPE_VIRTUAL = 32;
export const WMDM_DEVICE_TYPE_SDMI = 64;
export const WMDM_DEVICE_TYPE_NONSDMI = 128;
export const WMDM_DEVICE_TYPE_NONREENTRANT = 256;
export const WMDM_DEVICE_TYPE_FILELISTRESYNC = 512;
export const WMDM_DEVICE_TYPE_VIEW_PREF_METADATAVIEW = 1024;
export const WMDM_POWER_CAP_BATTERY = 1;
export const WMDM_POWER_CAP_EXTERNAL = 2;
export const WMDM_POWER_IS_BATTERY = 4;
export const WMDM_POWER_IS_EXTERNAL = 8;
export const WMDM_POWER_PERCENT_AVAILABLE = 16;
export const WMDM_STATUS_READY = 1;
export const WMDM_STATUS_BUSY = 2;
export const WMDM_STATUS_DEVICE_NOTPRESENT = 4;
export const WMDM_STATUS_DEVICECONTROL_PLAYING = 8;
export const WMDM_STATUS_DEVICECONTROL_RECORDING = 16;
export const WMDM_STATUS_DEVICECONTROL_PAUSED = 32;
export const WMDM_STATUS_DEVICECONTROL_REMOTE = 64;
export const WMDM_STATUS_DEVICECONTROL_STREAM = 128;
export const WMDM_STATUS_STORAGE_NOTPRESENT = 256;
export const WMDM_STATUS_STORAGE_INITIALIZING = 512;
export const WMDM_STATUS_STORAGE_BROKEN = 1024;
export const WMDM_STATUS_STORAGE_NOTSUPPORTED = 2048;
export const WMDM_STATUS_STORAGE_UNFORMATTED = 4096;
export const WMDM_STATUS_STORAGECONTROL_INSERTING = 8192;
export const WMDM_STATUS_STORAGECONTROL_DELETING = 16384;
export const WMDM_STATUS_STORAGECONTROL_APPENDING = 32768;
export const WMDM_STATUS_STORAGECONTROL_MOVING = 65536;
export const WMDM_STATUS_STORAGECONTROL_READING = 131072;
export const WMDM_DEVICECAP_CANPLAY = 1;
export const WMDM_DEVICECAP_CANSTREAMPLAY = 2;
export const WMDM_DEVICECAP_CANRECORD = 4;
export const WMDM_DEVICECAP_CANSTREAMRECORD = 8;
export const WMDM_DEVICECAP_CANPAUSE = 16;
export const WMDM_DEVICECAP_CANRESUME = 32;
export const WMDM_DEVICECAP_CANSTOP = 64;
export const WMDM_DEVICECAP_CANSEEK = 128;
export const WMDM_DEVICECAP_HASSECURECLOCK = 256;
export const WMDM_SEEK_REMOTECONTROL = 1;
export const WMDM_SEEK_STREAMINGAUDIO = 2;
export const WMDM_STORAGE_ATTR_FILESYSTEM = 1;
export const WMDM_STORAGE_ATTR_REMOVABLE = 2;
export const WMDM_STORAGE_ATTR_NONREMOVABLE = 4;
export const WMDM_FILE_ATTR_FOLDER = 8;
export const WMDM_FILE_ATTR_LINK = 16;
export const WMDM_FILE_ATTR_FILE = 32;
export const WMDM_FILE_ATTR_VIDEO = 64;
export const WMDM_STORAGE_ATTR_CANEDITMETADATA = 128;
export const WMDM_STORAGE_ATTR_FOLDERS = 256;
export const WMDM_FILE_ATTR_AUDIO = 4096;
export const WMDM_FILE_ATTR_DATA = 8192;
export const WMDM_FILE_ATTR_CANPLAY = 16384;
export const WMDM_FILE_ATTR_CANDELETE = 32768;
export const WMDM_FILE_ATTR_CANMOVE = 65536;
export const WMDM_FILE_ATTR_CANRENAME = 131072;
export const WMDM_FILE_ATTR_CANREAD = 262144;
export const WMDM_FILE_ATTR_MUSIC = 524288;
export const WMDM_FILE_CREATE_OVERWRITE = 1048576;
export const WMDM_FILE_ATTR_AUDIOBOOK = 2097152;
export const WMDM_FILE_ATTR_HIDDEN = 4194304;
export const WMDM_FILE_ATTR_SYSTEM = 8388608;
export const WMDM_FILE_ATTR_READONLY = 16777216;
export const WMDM_STORAGE_ATTR_HAS_FOLDERS = 33554432;
export const WMDM_STORAGE_ATTR_HAS_FILES = 67108864;
export const WMDM_STORAGE_IS_DEFAULT = 134217728;
export const WMDM_STORAGE_CONTAINS_DEFAULT = 268435456;
export const WMDM_STORAGE_ATTR_VIRTUAL = 536870912;
export const WMDM_STORAGECAP_FOLDERSINROOT = 1;
export const WMDM_STORAGECAP_FILESINROOT = 2;
export const WMDM_STORAGECAP_FOLDERSINFOLDERS = 4;
export const WMDM_STORAGECAP_FILESINFOLDERS = 8;
export const WMDM_STORAGECAP_FOLDERLIMITEXISTS = 16;
export const WMDM_STORAGECAP_FILELIMITEXISTS = 32;
export const WMDM_STORAGECAP_NOT_INITIALIZABLE = 64;
export const WMDM_MODE_BLOCK = 1;
export const WMDM_MODE_THREAD = 2;
export const WMDM_CONTENT_FILE = 4;
export const WMDM_CONTENT_FOLDER = 8;
export const WMDM_CONTENT_OPERATIONINTERFACE = 16;
export const WMDM_MODE_QUERY = 32;
export const WMDM_MODE_PROGRESS = 64;
export const WMDM_MODE_TRANSFER_PROTECTED = 128;
export const WMDM_MODE_TRANSFER_UNPROTECTED = 256;
export const WMDM_STORAGECONTROL_INSERTBEFORE = 512;
export const WMDM_STORAGECONTROL_INSERTAFTER = 1024;
export const WMDM_STORAGECONTROL_INSERTINTO = 2048;
export const WMDM_MODE_RECURSIVE = 4096;
export const WMDM_RIGHTS_PLAY_ON_PC = 1;
export const WMDM_RIGHTS_COPY_TO_NON_SDMI_DEVICE = 2;
export const WMDM_RIGHTS_COPY_TO_CD = 8;
export const WMDM_RIGHTS_COPY_TO_SDMI_DEVICE = 16;
export const WMDM_SEEK_BEGIN = 1;
export const WMDM_SEEK_CURRENT = 2;
export const WMDM_SEEK_END = 8;
export const DO_NOT_VIRTUALIZE_STORAGES_AS_DEVICES = 1;
export const ALLOW_OUTOFBAND_NOTIFICATION = 2;
export const MDSP_READ = 1;
export const MDSP_WRITE = 2;
export const MDSP_SEEK_BOF = 1;
export const MDSP_SEEK_CUR = 2;
export const MDSP_SEEK_EOF = 4;
export const WMDM_SCP_EXAMINE_EXTENSION = 1;
export const WMDM_SCP_EXAMINE_DATA = 2;
export const WMDM_SCP_DECIDE_DATA = 8;
export const WMDM_SCP_PROTECTED_OUTPUT = 16;
export const WMDM_SCP_UNPROTECTED_OUTPUT = 32;
export const WMDM_SCP_RIGHTS_DATA = 64;
export const WMDM_SCP_TRANSFER_OBJECTDATA = 32;
export const WMDM_SCP_NO_MORE_CHANGES = 64;
export const WMDM_SCP_DRMINFO_NOT_DRMPROTECTED = 0;
export const WMDM_SCP_DRMINFO_V1HEADER = 1;
export const WMDM_SCP_DRMINFO_V2HEADER = 2;
export const SAC_MAC_LEN = 8;
export const WMDM_LOG_SEV_INFO = 1;
export const WMDM_LOG_SEV_WARN = 2;
export const WMDM_LOG_SEV_ERROR = 4;
export const WMDM_LOG_NOTIMESTAMP = 16;
export const g_wszWMDMFileName = "WMDM/FileName";
export const g_wszWMDMFormatCode = "WMDM/FormatCode";
export const g_wszWMDMLastModifiedDate = "WMDM/LastModifiedDate";
export const g_wszWMDMFileCreationDate = "WMDM/FileCreationDate";
export const g_wszWMDMFileSize = "WMDM/FileSize";
export const g_wszWMDMFileAttributes = "WMDM/FileAttributes";
export const g_wszAudioWAVECodec = "WMDM/AudioWAVECodec";
export const g_wszVideoFourCCCodec = "WMDM/VideoFourCCCodec";
export const g_wszWMDMTitle = "WMDM/Title";
export const g_wszWMDMAuthor = "WMDM/Author";
export const g_wszWMDMDescription = "WMDM/Description";
export const g_wszWMDMIsProtected = "WMDM/IsProtected";
export const g_wszWMDMAlbumTitle = "WMDM/AlbumTitle";
export const g_wszWMDMAlbumArtist = "WMDM/AlbumArtist";
export const g_wszWMDMTrack = "WMDM/Track";
export const g_wszWMDMGenre = "WMDM/Genre";
export const g_wszWMDMTrackMood = "WMDM/TrackMood";
export const g_wszWMDMAlbumCoverFormat = "WMDM/AlbumCoverFormat";
export const g_wszWMDMAlbumCoverSize = "WMDM/AlbumCoverSize";
export const g_wszWMDMAlbumCoverHeight = "WMDM/AlbumCoverHeight";
export const g_wszWMDMAlbumCoverWidth = "WMDM/AlbumCoverWidth";
export const g_wszWMDMAlbumCoverDuration = "WMDM/AlbumCoverDuration";
export const g_wszWMDMAlbumCoverData = "WMDM/AlbumCoverData";
export const g_wszWMDMYear = "WMDM/Year";
export const g_wszWMDMComposer = "WMDM/Composer";
export const g_wszWMDMCodec = "WMDM/Codec";
export const g_wszWMDMDRMId = "WMDM/DRMId";
export const g_wszWMDMBitrate = "WMDM/Bitrate";
export const g_wszWMDMBitRateType = "WMDM/BitRateType";
export const g_wszWMDMSampleRate = "WMDM/SampleRate";
export const g_wszWMDMNumChannels = "WMDM/NumChannels";
export const g_wszWMDMBlockAlignment = "WMDM/BlockAlignment";
export const g_wszWMDMAudioBitDepth = "WMDM/AudioBitDepth";
export const g_wszWMDMTotalBitrate = "WMDM/TotalBitrate";
export const g_wszWMDMVideoBitrate = "WMDM/VideoBitrate";
export const g_wszWMDMFrameRate = "WMDM/FrameRate";
export const g_wszWMDMScanType = "WMDM/ScanType";
export const g_wszWMDMKeyFrameDistance = "WMDM/KeyFrameDistance";
export const g_wszWMDMBufferSize = "WMDM/BufferSize";
export const g_wszWMDMQualitySetting = "WMDM/QualitySetting";
export const g_wszWMDMEncodingProfile = "WMDM/EncodingProfile";
export const g_wszWMDMDuration = "WMDM/Duration";
export const g_wszWMDMAlbumArt = "WMDM/AlbumArt";
export const g_wszWMDMBuyNow = "WMDM/BuyNow";
export const g_wszWMDMNonConsumable = "WMDM/NonConsumable";
export const g_wszWMDMediaClassPrimaryID = "WMDM/MediaClassPrimaryID";
export const g_wszWMDMMediaClassSecondaryID = "WMDM/MediaClassSecondaryID";
export const g_wszWMDMUserEffectiveRating = "WMDM/UserEffectiveRating";
export const g_wszWMDMUserRating = "WMDM/UserRating";
export const g_wszWMDMUserRatingOnDevice = "WMDM/UserRatingOnDevice";
export const g_wszWMDMPlayCount = "WMDM/PlayCount";
export const g_wszWMDMDevicePlayCount = "WMDM/DevicePlayCount";
export const g_wszWMDMAuthorDate = "WMDM/AuthorDate";
export const g_wszWMDMUserLastPlayTime = "WMDM/UserLastPlayTime";
export const g_wszWMDMSubTitle = "WMDM/SubTitle";
export const g_wszWMDMSubTitleDescription = "WMDM/SubTitleDescription";
export const g_wszWMDMMediaCredits = "WMDM/MediaCredits";
export const g_wszWMDMMediaStationName = "WMDM/MediaStationName";
export const g_wszWMDMMediaOriginalChannel = "WMDM/MediaOriginalChannel";
export const g_wszWMDMMediaOriginalBroadcastDateTime = "WMDM/MediaOriginalBroadcastDateTime";
export const g_wszWMDMProviderCopyright = "WMDM/ProviderCopyright";
export const g_wszWMDMSyncID = "WMDM/SyncID";
export const g_wszWMDMPersistentUniqueID = "WMDM/PersistentUniqueID";
export const g_wszWMDMWidth = "WMDM/Width";
export const g_wszWMDMHeight = "WMDM/Height";
export const g_wszWMDMSyncTime = "WMDM/SyncTime";
export const g_wszWMDMParentalRating = "WMDM/ParentalRating";
export const g_wszWMDMMetaGenre = "WMDM/MetaGenre";
export const g_wszWMDMIsRepeat = "WMDM/IsRepeat";
export const g_wszWMDMSupportedDeviceProperties = "WMDM/SupportedDeviceProperties";
export const g_wszWMDMDeviceFriendlyName = "WMDM/DeviceFriendlyName";
export const g_wszWMDMFormatsSupported = "WMDM/FormatsSupported";
export const g_wszWMDMFormatsSupportedAreOrdered = "WMDM/FormatsSupportedAreOrdered";
export const g_wszWMDMSyncRelationshipID = "WMDM/SyncRelationshipID";
export const g_wszWMDMDeviceModelName = "WMDM/DeviceModelName";
export const g_wszWMDMDeviceFirmwareVersion = "WMDM/DeviceFirmwareVersion";
export const g_wszWMDMDeviceVendorExtension = "WMDM/DeviceVendorExtension";
export const g_wszWMDMDeviceProtocol = "WMDM/DeviceProtocol";
export const g_wszWMDMDeviceServiceProviderVendor = "WMDM/DeviceServiceProviderVendor";
export const g_wszWMDMDeviceRevocationInfo = "WMDM/DeviceRevocationInfo";
export const g_wszWMDMCollectionID = "WMDM/CollectionID";
export const g_wszWMDMOwner = "WMDM/Owner";
export const g_wszWMDMEditor = "WMDM/Editor";
export const g_wszWMDMWebmaster = "WMDM/Webmaster";
export const g_wszWMDMSourceURL = "WMDM/SourceURL";
export const g_wszWMDMDestinationURL = "WMDM/DestinationURL";
export const g_wszWMDMCategory = "WMDM/Category";
export const g_wszWMDMTimeBookmark = "WMDM/TimeBookmark";
export const g_wszWMDMObjectBookmark = "WMDM/ObjectBookmark";
export const g_wszWMDMByteBookmark = "WMDM/ByteBookmark";
export const g_wszWMDMDataOffset = "WMDM/DataOffset";
export const g_wszWMDMDataLength = "WMDM/DataLength";
export const g_wszWMDMDataUnits = "WMDM/DataUnits";
export const g_wszWMDMTimeToLive = "WMDM/TimeToLive";
export const g_wszWMDMMediaGuid = "WMDM/MediaGuid";
export const g_wszWPDPassthroughPropertyValues = "WPD/PassthroughPropertyValues";
export const MTP_COMMAND_MAX_PARAMS = 5;
export const MTP_RESPONSE_MAX_PARAMS = 5;
export const MTP_RESPONSE_OK = 8193;
export const WMDM_TYPE_DWORD = 0;
export const WMDM_TYPE_STRING = 1;
export const WMDM_TYPE_BINARY = 2;
export const WMDM_TYPE_BOOL = 3;
export const WMDM_TYPE_QWORD = 4;
export const WMDM_TYPE_WORD = 5;
export const WMDM_TYPE_GUID = 6;
export const WMDM_TYPE_DATE = 7;
export const WMDM_SESSION_NONE = 0;
export const WMDM_SESSION_TRANSFER_TO_DEVICE = 1;
export const WMDM_SESSION_TRANSFER_FROM_DEVICE = 16;
export const WMDM_SESSION_DELETE = 256;
export const WMDM_SESSION_CUSTOM = 4096;
export const ENUM_MODE_RAW = 0;
export const ENUM_MODE_USE_DEVICE_PREF = 1;
export const ENUM_MODE_METADATA_VIEWS = 2;
export const WMDM_FORMATCODE_NOTUSED = 0;
export const WMDM_FORMATCODE_ALLIMAGES = "-1";
export const WMDM_FORMATCODE_UNDEFINED = 12288;
export const WMDM_FORMATCODE_ASSOCIATION = 12289;
export const WMDM_FORMATCODE_SCRIPT = 12290;
export const WMDM_FORMATCODE_EXECUTABLE = 12291;
export const WMDM_FORMATCODE_TEXT = 12292;
export const WMDM_FORMATCODE_HTML = 12293;
export const WMDM_FORMATCODE_DPOF = 12294;
export const WMDM_FORMATCODE_AIFF = 12295;
export const WMDM_FORMATCODE_WAVE = 12296;
export const WMDM_FORMATCODE_MP3 = 12297;
export const WMDM_FORMATCODE_AVI = 12298;
export const WMDM_FORMATCODE_MPEG = 12299;
export const WMDM_FORMATCODE_ASF = 12300;
export const WMDM_FORMATCODE_RESERVED_FIRST = 12301;
export const WMDM_FORMATCODE_RESERVED_LAST = 14335;
export const WMDM_FORMATCODE_IMAGE_UNDEFINED = 14336;
export const WMDM_FORMATCODE_IMAGE_EXIF = 14337;
export const WMDM_FORMATCODE_IMAGE_TIFFEP = 14338;
export const WMDM_FORMATCODE_IMAGE_FLASHPIX = 14339;
export const WMDM_FORMATCODE_IMAGE_BMP = 14340;
export const WMDM_FORMATCODE_IMAGE_CIFF = 14341;
export const WMDM_FORMATCODE_IMAGE_GIF = 14343;
export const WMDM_FORMATCODE_IMAGE_JFIF = 14344;
export const WMDM_FORMATCODE_IMAGE_PCD = 14345;
export const WMDM_FORMATCODE_IMAGE_PICT = 14346;
export const WMDM_FORMATCODE_IMAGE_PNG = 14347;
export const WMDM_FORMATCODE_IMAGE_TIFF = 14349;
export const WMDM_FORMATCODE_IMAGE_TIFFIT = 14350;
export const WMDM_FORMATCODE_IMAGE_JP2 = 14351;
export const WMDM_FORMATCODE_IMAGE_JPX = 14352;
export const WMDM_FORMATCODE_IMAGE_RESERVED_FIRST = 14353;
export const WMDM_FORMATCODE_IMAGE_RESERVED_LAST = 16383;
export const WMDM_FORMATCODE_UNDEFINEDFIRMWARE = 47106;
export const WMDM_FORMATCODE_WBMP = 47107;
export const WMDM_FORMATCODE_JPEGXR = 47108;
export const WMDM_FORMATCODE_WINDOWSIMAGEFORMAT = 47233;
export const WMDM_FORMATCODE_UNDEFINEDAUDIO = 47360;
export const WMDM_FORMATCODE_WMA = 47361;
export const WMDM_FORMATCODE_OGG = 47362;
export const WMDM_FORMATCODE_AAC = 47363;
export const WMDM_FORMATCODE_AUDIBLE = 47364;
export const WMDM_FORMATCODE_FLAC = 47366;
export const WMDM_FORMATCODE_QCELP = 47367;
export const WMDM_FORMATCODE_AMR = 47368;
export const WMDM_FORMATCODE_UNDEFINEDVIDEO = 47488;
export const WMDM_FORMATCODE_WMV = 47489;
export const WMDM_FORMATCODE_MP4 = 47490;
export const WMDM_FORMATCODE_MP2 = 47491;
export const WMDM_FORMATCODE_3GP = 47492;
export const WMDM_FORMATCODE_3G2 = 47493;
export const WMDM_FORMATCODE_AVCHD = 47494;
export const WMDM_FORMATCODE_ATSCTS = 47495;
export const WMDM_FORMATCODE_DVBTS = 47496;
export const WMDM_FORMATCODE_MKV = 47497;
export const WMDM_FORMATCODE_MKA = 47498;
export const WMDM_FORMATCODE_MK3D = 47499;
export const WMDM_FORMATCODE_UNDEFINEDCOLLECTION = 47616;
export const WMDM_FORMATCODE_ABSTRACTMULTIMEDIAALBUM = 47617;
export const WMDM_FORMATCODE_ABSTRACTIMAGEALBUM = 47618;
export const WMDM_FORMATCODE_ABSTRACTAUDIOALBUM = 47619;
export const WMDM_FORMATCODE_ABSTRACTVIDEOALBUM = 47620;
export const WMDM_FORMATCODE_ABSTRACTAUDIOVIDEOPLAYLIST = 47621;
export const WMDM_FORMATCODE_ABSTRACTCONTACTGROUP = 47622;
export const WMDM_FORMATCODE_ABSTRACTMESSAGEFOLDER = 47623;
export const WMDM_FORMATCODE_ABSTRACTCHAPTEREDPRODUCTION = 47624;
export const WMDM_FORMATCODE_MEDIA_CAST = 47627;
export const WMDM_FORMATCODE_WPLPLAYLIST = 47632;
export const WMDM_FORMATCODE_M3UPLAYLIST = 47633;
export const WMDM_FORMATCODE_MPLPLAYLIST = 47634;
export const WMDM_FORMATCODE_ASXPLAYLIST = 47635;
export const WMDM_FORMATCODE_PLSPLAYLIST = 47636;
export const WMDM_FORMATCODE_UNDEFINEDDOCUMENT = 47744;
export const WMDM_FORMATCODE_ABSTRACTDOCUMENT = 47745;
export const WMDM_FORMATCODE_XMLDOCUMENT = 47746;
export const WMDM_FORMATCODE_MICROSOFTWORDDOCUMENT = 47747;
export const WMDM_FORMATCODE_MHTCOMPILEDHTMLDOCUMENT = 47748;
export const WMDM_FORMATCODE_MICROSOFTEXCELSPREADSHEET = 47749;
export const WMDM_FORMATCODE_MICROSOFTPOWERPOINTDOCUMENT = 47750;
export const WMDM_FORMATCODE_UNDEFINEDMESSAGE = 47872;
export const WMDM_FORMATCODE_ABSTRACTMESSAGE = 47873;
export const WMDM_FORMATCODE_UNDEFINEDCONTACT = 48000;
export const WMDM_FORMATCODE_ABSTRACTCONTACT = 48001;
export const WMDM_FORMATCODE_VCARD2 = 48002;
export const WMDM_FORMATCODE_VCARD3 = 48003;
export const WMDM_FORMATCODE_UNDEFINEDCALENDARITEM = 48640;
export const WMDM_FORMATCODE_ABSTRACTCALENDARITEM = 48641;
export const WMDM_FORMATCODE_VCALENDAR1 = 48642;
export const WMDM_FORMATCODE_VCALENDAR2 = 48643;
export const WMDM_FORMATCODE_UNDEFINEDWINDOWSEXECUTABLE = 48768;
export const WMDM_FORMATCODE_M4A = 1297101889;
export const WMDM_FORMATCODE_3GPA = 860311617;
export const WMDM_FORMATCODE_3G2A = 860303937;
export const WMDM_FORMATCODE_SECTION = 48770;
export const WMDM_ENUM_PROP_VALID_VALUES_ANY = 0;
export const WMDM_ENUM_PROP_VALID_VALUES_RANGE = 1;
export const WMDM_ENUM_PROP_VALID_VALUES_ENUM = 2;
export const WMDM_FIND_SCOPE_GLOBAL = 0;
export const WMDM_FIND_SCOPE_IMMEDIATE_CHILDREN = 1;
export const WMDM_MSG_DEVICE_ARRIVAL = 0;
export const WMDM_MSG_DEVICE_REMOVAL = 1;
export const WMDM_MSG_MEDIA_ARRIVAL = 2;
export const WMDM_MSG_MEDIA_REMOVAL = 3;

// Structs

/**
 * Windows.Win32.Media.DeviceManager.Apis (size: 72)
 */
export interface Apis {
  /** System.Guid */
  WMDM_DEVICE_PROTOCOL_MTP: Uint8Array | Deno.PointerValue | null;
  /** System.Guid */
  WMDM_DEVICE_PROTOCOL_RAPI: Uint8Array | Deno.PointerValue | null;
  /** System.Guid */
  WMDM_DEVICE_PROTOCOL_MSC: Uint8Array | Deno.PointerValue | null;
  /** System.Guid */
  WMDM_SERVICE_PROVIDER_VENDOR_MICROSOFT: Uint8Array | Deno.PointerValue | null;
  /** System.Guid */
  SCP_EVENTID_ACQSECURECLOCK: Uint8Array | Deno.PointerValue | null;
  /** System.Guid */
  SCP_EVENTID_NEEDTOINDIV: Uint8Array | Deno.PointerValue | null;
  /** System.Guid */
  SCP_EVENTID_DRMINFO: Uint8Array | Deno.PointerValue | null;
  /** System.Guid */
  SCP_PARAMID_DRMVERSION: Uint8Array | Deno.PointerValue | null;
  /** System.Guid */
  EVENT_WMDM_CONTENT_TRANSFER: Uint8Array | Deno.PointerValue | null;
}

export const sizeofApis = 72;

export function allocApis(data?: Partial<Apis>): Uint8Array {
  const buf = new Uint8Array(sizeofApis);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.WMDM_DEVICE_PROTOCOL_MTP !== undefined) view.setBigUint64(0, data.WMDM_DEVICE_PROTOCOL_MTP === null ? 0n : BigInt(util.toPointer(data.WMDM_DEVICE_PROTOCOL_MTP)), true);
  // 0x08: pointer
  if (data?.WMDM_DEVICE_PROTOCOL_RAPI !== undefined) view.setBigUint64(8, data.WMDM_DEVICE_PROTOCOL_RAPI === null ? 0n : BigInt(util.toPointer(data.WMDM_DEVICE_PROTOCOL_RAPI)), true);
  // 0x10: pointer
  if (data?.WMDM_DEVICE_PROTOCOL_MSC !== undefined) view.setBigUint64(16, data.WMDM_DEVICE_PROTOCOL_MSC === null ? 0n : BigInt(util.toPointer(data.WMDM_DEVICE_PROTOCOL_MSC)), true);
  // 0x18: pointer
  if (data?.WMDM_SERVICE_PROVIDER_VENDOR_MICROSOFT !== undefined) view.setBigUint64(24, data.WMDM_SERVICE_PROVIDER_VENDOR_MICROSOFT === null ? 0n : BigInt(util.toPointer(data.WMDM_SERVICE_PROVIDER_VENDOR_MICROSOFT)), true);
  // 0x20: pointer
  if (data?.SCP_EVENTID_ACQSECURECLOCK !== undefined) view.setBigUint64(32, data.SCP_EVENTID_ACQSECURECLOCK === null ? 0n : BigInt(util.toPointer(data.SCP_EVENTID_ACQSECURECLOCK)), true);
  // 0x28: pointer
  if (data?.SCP_EVENTID_NEEDTOINDIV !== undefined) view.setBigUint64(40, data.SCP_EVENTID_NEEDTOINDIV === null ? 0n : BigInt(util.toPointer(data.SCP_EVENTID_NEEDTOINDIV)), true);
  // 0x30: pointer
  if (data?.SCP_EVENTID_DRMINFO !== undefined) view.setBigUint64(48, data.SCP_EVENTID_DRMINFO === null ? 0n : BigInt(util.toPointer(data.SCP_EVENTID_DRMINFO)), true);
  // 0x38: pointer
  if (data?.SCP_PARAMID_DRMVERSION !== undefined) view.setBigUint64(56, data.SCP_PARAMID_DRMVERSION === null ? 0n : BigInt(util.toPointer(data.SCP_PARAMID_DRMVERSION)), true);
  // 0x40: pointer
  if (data?.EVENT_WMDM_CONTENT_TRANSFER !== undefined) view.setBigUint64(64, data.EVENT_WMDM_CONTENT_TRANSFER === null ? 0n : BigInt(util.toPointer(data.EVENT_WMDM_CONTENT_TRANSFER)), true);
  return buf;
}

export type BOOL = number;

/**
 * Windows.Win32.Media.DeviceManager.__MACINFO (size: 16)
 */
export interface __MACINFO {
  /** Windows.Win32.Foundation.BOOL */
  fUsed: boolean;
  /** array */
  abMacState: Deno.PointerValue | null;
}

export const sizeof__MACINFO = 16;

export function alloc__MACINFO(data?: Partial<__MACINFO>): Uint8Array {
  const buf = new Uint8Array(sizeof__MACINFO);
  const view = new DataView(buf.buffer);
  // 0x00: i32
  if (data?.fUsed !== undefined) view.setInt32(0, Number(data.fUsed), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.abMacState !== undefined) view.setBigUint64(8, data.abMacState === null ? 0n : BigInt(util.toPointer(data.abMacState)), true);
  return buf;
}

/**
 * Windows.Win32.Media.DeviceManager._WAVEFORMATEX (size: 24)
 */
export interface _WAVEFORMATEX {
  /** u16 */
  wFormatTag: number;
  /** u16 */
  nChannels: number;
  /** u32 */
  nSamplesPerSec: number;
  /** u32 */
  nAvgBytesPerSec: number;
  /** u16 */
  nBlockAlign: number;
  /** u16 */
  wBitsPerSample: number;
  /** u16 */
  cbSize: number;
}

export const sizeof_WAVEFORMATEX = 24;

export function alloc_WAVEFORMATEX(data?: Partial<_WAVEFORMATEX>): Uint8Array {
  const buf = new Uint8Array(sizeof_WAVEFORMATEX);
  const view = new DataView(buf.buffer);
  // 0x00: u16
  if (data?.wFormatTag !== undefined) view.setUint16(0, Number(data.wFormatTag), true);
  // 0x02: u16
  if (data?.nChannels !== undefined) view.setUint16(2, Number(data.nChannels), true);
  // 0x04: u32
  if (data?.nSamplesPerSec !== undefined) view.setUint32(4, Number(data.nSamplesPerSec), true);
  // 0x08: u32
  if (data?.nAvgBytesPerSec !== undefined) view.setUint32(8, Number(data.nAvgBytesPerSec), true);
  // 0x0c: u16
  if (data?.nBlockAlign !== undefined) view.setUint16(12, Number(data.nBlockAlign), true);
  // 0x0e: u16
  if (data?.wBitsPerSample !== undefined) view.setUint16(14, Number(data.wBitsPerSample), true);
  // 0x10: u16
  if (data?.cbSize !== undefined) view.setUint16(16, Number(data.cbSize), true);
  // 0x12: pad6
  return buf;
}

/**
 * Windows.Win32.Media.DeviceManager._BITMAPINFOHEADER (size: 40)
 */
export interface _BITMAPINFOHEADER {
  /** u32 */
  biSize: number;
  /** i32 */
  biWidth: number;
  /** i32 */
  biHeight: number;
  /** u16 */
  biPlanes: number;
  /** u16 */
  biBitCount: number;
  /** u32 */
  biCompression: number;
  /** u32 */
  biSizeImage: number;
  /** i32 */
  biXPelsPerMeter: number;
  /** i32 */
  biYPelsPerMeter: number;
  /** u32 */
  biClrUsed: number;
  /** u32 */
  biClrImportant: number;
}

export const sizeof_BITMAPINFOHEADER = 40;

export function alloc_BITMAPINFOHEADER(data?: Partial<_BITMAPINFOHEADER>): Uint8Array {
  const buf = new Uint8Array(sizeof_BITMAPINFOHEADER);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.biSize !== undefined) view.setUint32(0, Number(data.biSize), true);
  // 0x04: i32
  if (data?.biWidth !== undefined) view.setInt32(4, Number(data.biWidth), true);
  // 0x08: i32
  if (data?.biHeight !== undefined) view.setInt32(8, Number(data.biHeight), true);
  // 0x0c: u16
  if (data?.biPlanes !== undefined) view.setUint16(12, Number(data.biPlanes), true);
  // 0x0e: u16
  if (data?.biBitCount !== undefined) view.setUint16(14, Number(data.biBitCount), true);
  // 0x10: u32
  if (data?.biCompression !== undefined) view.setUint32(16, Number(data.biCompression), true);
  // 0x14: u32
  if (data?.biSizeImage !== undefined) view.setUint32(20, Number(data.biSizeImage), true);
  // 0x18: i32
  if (data?.biXPelsPerMeter !== undefined) view.setInt32(24, Number(data.biXPelsPerMeter), true);
  // 0x1c: i32
  if (data?.biYPelsPerMeter !== undefined) view.setInt32(28, Number(data.biYPelsPerMeter), true);
  // 0x20: u32
  if (data?.biClrUsed !== undefined) view.setUint32(32, Number(data.biClrUsed), true);
  // 0x24: u32
  if (data?.biClrImportant !== undefined) view.setUint32(36, Number(data.biClrImportant), true);
  return buf;
}

/**
 * Windows.Win32.Foundation.RECT (size: 16)
 */
export interface RECT {
  /** i32 */
  left: number;
  /** i32 */
  top: number;
  /** i32 */
  right: number;
  /** i32 */
  bottom: number;
}

export const sizeofRECT = 16;

export function allocRECT(data?: Partial<RECT>): Uint8Array {
  const buf = new Uint8Array(sizeofRECT);
  const view = new DataView(buf.buffer);
  // 0x00: i32
  if (data?.left !== undefined) view.setInt32(0, Number(data.left), true);
  // 0x04: i32
  if (data?.top !== undefined) view.setInt32(4, Number(data.top), true);
  // 0x08: i32
  if (data?.right !== undefined) view.setInt32(8, Number(data.right), true);
  // 0x0c: i32
  if (data?.bottom !== undefined) view.setInt32(12, Number(data.bottom), true);
  return buf;
}

/**
 * Windows.Win32.Media.DeviceManager._VIDEOINFOHEADER (size: 40)
 */
export interface _VIDEOINFOHEADER {
  /** Windows.Win32.Foundation.RECT */
  rcSource: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Foundation.RECT */
  rcTarget: Uint8Array | Deno.PointerValue | null;
  /** u32 */
  dwBitRate: number;
  /** u32 */
  dwBitErrorRate: number;
  /** i64 */
  AvgTimePerFrame: Deno.PointerValue;
  /** Windows.Win32.Media.DeviceManager._BITMAPINFOHEADER */
  bmiHeader: Uint8Array | Deno.PointerValue | null;
}

export const sizeof_VIDEOINFOHEADER = 40;

export function alloc_VIDEOINFOHEADER(data?: Partial<_VIDEOINFOHEADER>): Uint8Array {
  const buf = new Uint8Array(sizeof_VIDEOINFOHEADER);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.rcSource !== undefined) view.setBigUint64(0, data.rcSource === null ? 0n : BigInt(util.toPointer(data.rcSource)), true);
  // 0x08: pointer
  if (data?.rcTarget !== undefined) view.setBigUint64(8, data.rcTarget === null ? 0n : BigInt(util.toPointer(data.rcTarget)), true);
  // 0x10: u32
  if (data?.dwBitRate !== undefined) view.setUint32(16, Number(data.dwBitRate), true);
  // 0x14: u32
  if (data?.dwBitErrorRate !== undefined) view.setUint32(20, Number(data.dwBitErrorRate), true);
  // 0x18: i64
  if (data?.AvgTimePerFrame !== undefined) view.setBigInt64(24, BigInt(data.AvgTimePerFrame), true);
  // 0x20: pointer
  if (data?.bmiHeader !== undefined) view.setBigUint64(32, data.bmiHeader === null ? 0n : BigInt(util.toPointer(data.bmiHeader)), true);
  return buf;
}

export type PWSTR = Deno.PointerValue | Uint8Array | null;

/**
 * Windows.Win32.Media.DeviceManager.WMFILECAPABILITIES (size: 16)
 */
export interface WMFILECAPABILITIES {
  /** Windows.Win32.Foundation.PWSTR */
  pwszMimeType: string | null;
  /** u32 */
  dwReserved: number;
}

export const sizeofWMFILECAPABILITIES = 16;

export function allocWMFILECAPABILITIES(data?: Partial<WMFILECAPABILITIES>): Uint8Array {
  const buf = new Uint8Array(sizeofWMFILECAPABILITIES);
  const view = new DataView(buf.buffer);
  // 0x00: buffer
  if (data?.pwszMimeType !== undefined) {
    (buf as any)._f0 = util.pwstrToFfi(data.pwszMimeType);
    view.setBigUint64(0, (buf as any)._f0 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f0)), true);
  }
  // 0x08: u32
  if (data?.dwReserved !== undefined) view.setUint32(8, Number(data.dwReserved), true);
  // 0x0c: pad4
  return buf;
}

/**
 * Windows.Win32.Media.DeviceManager.OPAQUECOMMAND (size: 32)
 */
export interface OPAQUECOMMAND {
  /** System.Guid */
  guidCommand: Uint8Array | Deno.PointerValue | null;
  /** u32 */
  dwDataLen: number;
  /** ptr */
  pData: Deno.PointerValue | Uint8Array | null;
  /** array */
  abMAC: Deno.PointerValue | null;
}

export const sizeofOPAQUECOMMAND = 32;

export function allocOPAQUECOMMAND(data?: Partial<OPAQUECOMMAND>): Uint8Array {
  const buf = new Uint8Array(sizeofOPAQUECOMMAND);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.guidCommand !== undefined) view.setBigUint64(0, data.guidCommand === null ? 0n : BigInt(util.toPointer(data.guidCommand)), true);
  // 0x08: u32
  if (data?.dwDataLen !== undefined) view.setUint32(8, Number(data.dwDataLen), true);
  // 0x0c: pad4
  // 0x10: pointer
  if (data?.pData !== undefined) view.setBigUint64(16, data.pData === null ? 0n : BigInt(util.toPointer(data.pData)), true);
  // 0x18: pointer
  if (data?.abMAC !== undefined) view.setBigUint64(24, data.abMAC === null ? 0n : BigInt(util.toPointer(data.abMAC)), true);
  return buf;
}

/**
 * Windows.Win32.Media.DeviceManager.WMDMID (size: 24)
 */
export interface WMDMID {
  /** u32 */
  cbSize: number;
  /** u32 */
  dwVendorID: number;
  /** array */
  pID: Deno.PointerValue | null;
  /** u32 */
  SerialNumberLength: number;
}

export const sizeofWMDMID = 24;

export function allocWMDMID(data?: Partial<WMDMID>): Uint8Array {
  const buf = new Uint8Array(sizeofWMDMID);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.cbSize !== undefined) view.setUint32(0, Number(data.cbSize), true);
  // 0x04: u32
  if (data?.dwVendorID !== undefined) view.setUint32(4, Number(data.dwVendorID), true);
  // 0x08: pointer
  if (data?.pID !== undefined) view.setBigUint64(8, data.pID === null ? 0n : BigInt(util.toPointer(data.pID)), true);
  // 0x10: u32
  if (data?.SerialNumberLength !== undefined) view.setUint32(16, Number(data.SerialNumberLength), true);
  // 0x14: pad4
  return buf;
}

/**
 * Windows.Win32.Media.DeviceManager.WMDMDATETIME (size: 16)
 */
export interface WMDMDATETIME {
  /** u16 */
  wYear: number;
  /** u16 */
  wMonth: number;
  /** u16 */
  wDay: number;
  /** u16 */
  wHour: number;
  /** u16 */
  wMinute: number;
  /** u16 */
  wSecond: number;
}

export const sizeofWMDMDATETIME = 16;

export function allocWMDMDATETIME(data?: Partial<WMDMDATETIME>): Uint8Array {
  const buf = new Uint8Array(sizeofWMDMDATETIME);
  const view = new DataView(buf.buffer);
  // 0x00: u16
  if (data?.wYear !== undefined) view.setUint16(0, Number(data.wYear), true);
  // 0x02: u16
  if (data?.wMonth !== undefined) view.setUint16(2, Number(data.wMonth), true);
  // 0x04: u16
  if (data?.wDay !== undefined) view.setUint16(4, Number(data.wDay), true);
  // 0x06: u16
  if (data?.wHour !== undefined) view.setUint16(6, Number(data.wHour), true);
  // 0x08: u16
  if (data?.wMinute !== undefined) view.setUint16(8, Number(data.wMinute), true);
  // 0x0a: u16
  if (data?.wSecond !== undefined) view.setUint16(10, Number(data.wSecond), true);
  // 0x0c: pad4
  return buf;
}

/**
 * Windows.Win32.Media.DeviceManager.WMDMRIGHTS (size: 32)
 */
export interface WMDMRIGHTS {
  /** u32 */
  cbSize: number;
  /** u32 */
  dwContentType: number;
  /** u32 */
  fuFlags: number;
  /** u32 */
  fuRights: number;
  /** u32 */
  dwAppSec: number;
  /** u32 */
  dwPlaybackCount: number;
  /** Windows.Win32.Media.DeviceManager.WMDMDATETIME */
  ExpirationDate: Uint8Array | Deno.PointerValue | null;
}

export const sizeofWMDMRIGHTS = 32;

export function allocWMDMRIGHTS(data?: Partial<WMDMRIGHTS>): Uint8Array {
  const buf = new Uint8Array(sizeofWMDMRIGHTS);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.cbSize !== undefined) view.setUint32(0, Number(data.cbSize), true);
  // 0x04: u32
  if (data?.dwContentType !== undefined) view.setUint32(4, Number(data.dwContentType), true);
  // 0x08: u32
  if (data?.fuFlags !== undefined) view.setUint32(8, Number(data.fuFlags), true);
  // 0x0c: u32
  if (data?.fuRights !== undefined) view.setUint32(12, Number(data.fuRights), true);
  // 0x10: u32
  if (data?.dwAppSec !== undefined) view.setUint32(16, Number(data.dwAppSec), true);
  // 0x14: u32
  if (data?.dwPlaybackCount !== undefined) view.setUint32(20, Number(data.dwPlaybackCount), true);
  // 0x18: pointer
  if (data?.ExpirationDate !== undefined) view.setBigUint64(24, data.ExpirationDate === null ? 0n : BigInt(util.toPointer(data.ExpirationDate)), true);
  return buf;
}

/**
 * Windows.Win32.Media.DeviceManager.WMDMMetadataView (size: 24)
 */
export interface WMDMMetadataView {
  /** Windows.Win32.Foundation.PWSTR */
  pwszViewName: string | null;
  /** u32 */
  nDepth: number;
  /** ptr */
  ppwszTags: Deno.PointerValue | Uint8Array | null;
}

export const sizeofWMDMMetadataView = 24;

export function allocWMDMMetadataView(data?: Partial<WMDMMetadataView>): Uint8Array {
  const buf = new Uint8Array(sizeofWMDMMetadataView);
  const view = new DataView(buf.buffer);
  // 0x00: buffer
  if (data?.pwszViewName !== undefined) {
    (buf as any)._f0 = util.pwstrToFfi(data.pwszViewName);
    view.setBigUint64(0, (buf as any)._f0 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f0)), true);
  }
  // 0x08: u32
  if (data?.nDepth !== undefined) view.setUint32(8, Number(data.nDepth), true);
  // 0x0c: pad4
  // 0x10: pointer
  if (data?.ppwszTags !== undefined) view.setBigUint64(16, data.ppwszTags === null ? 0n : BigInt(util.toPointer(data.ppwszTags)), true);
  return buf;
}

/**
 * _Anonymous_e__Struct (size: 16)
 */
export interface _Anonymous_e__Struct {
  /** u64 */
  Alignment: Deno.PointerValue;
  /** u64 */
  Region: Deno.PointerValue;
}

export const sizeof_Anonymous_e__Struct = 16;

export function alloc_Anonymous_e__Struct(data?: Partial<_Anonymous_e__Struct>): Uint8Array {
  const buf = new Uint8Array(sizeof_Anonymous_e__Struct);
  const view = new DataView(buf.buffer);
  // 0x00: u64
  if (data?.Alignment !== undefined) view.setBigUint64(0, BigInt(data.Alignment), true);
  // 0x08: u64
  if (data?.Region !== undefined) view.setBigUint64(8, BigInt(data.Region), true);
  return buf;
}

/**
 * _Anonymous_e__Union (size: 16)
 */
export interface _Anonymous_e__Union {
  /** _Anonymous_e__Struct */
  Anonymous: Uint8Array | Deno.PointerValue | null;
  /** array */
  X: Deno.PointerValue | null;
}

export const sizeof_Anonymous_e__Union = 16;

export function alloc_Anonymous_e__Union(data?: Partial<_Anonymous_e__Union>): Uint8Array {
  const buf = new Uint8Array(sizeof_Anonymous_e__Union);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.Anonymous !== undefined) view.setBigUint64(0, data.Anonymous === null ? 0n : BigInt(util.toPointer(data.Anonymous)), true);
  // 0x08: pointer
  if (data?.X !== undefined) view.setBigUint64(8, data.X === null ? 0n : BigInt(util.toPointer(data.X)), true);
  return buf;
}

/**
 * Windows.Win32.System.Com.StructuredStorage.PROPVARIANT (size: 8)
 */
export interface PROPVARIANT {
  /** _Anonymous_e__Union */
  Anonymous: Uint8Array | Deno.PointerValue | null;
}

export const sizeofPROPVARIANT = 8;

export function allocPROPVARIANT(data?: Partial<PROPVARIANT>): Uint8Array {
  const buf = new Uint8Array(sizeofPROPVARIANT);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.Anonymous !== undefined) view.setBigUint64(0, data.Anonymous === null ? 0n : BigInt(util.toPointer(data.Anonymous)), true);
  return buf;
}

/**
 * Windows.Win32.Media.DeviceManager.WMDM_PROP_VALUES_RANGE (size: 24)
 */
export interface WMDM_PROP_VALUES_RANGE {
  /** Windows.Win32.System.Com.StructuredStorage.PROPVARIANT */
  rangeMin: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.System.Com.StructuredStorage.PROPVARIANT */
  rangeMax: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.System.Com.StructuredStorage.PROPVARIANT */
  rangeStep: Uint8Array | Deno.PointerValue | null;
}

export const sizeofWMDM_PROP_VALUES_RANGE = 24;

export function allocWMDM_PROP_VALUES_RANGE(data?: Partial<WMDM_PROP_VALUES_RANGE>): Uint8Array {
  const buf = new Uint8Array(sizeofWMDM_PROP_VALUES_RANGE);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.rangeMin !== undefined) view.setBigUint64(0, data.rangeMin === null ? 0n : BigInt(util.toPointer(data.rangeMin)), true);
  // 0x08: pointer
  if (data?.rangeMax !== undefined) view.setBigUint64(8, data.rangeMax === null ? 0n : BigInt(util.toPointer(data.rangeMax)), true);
  // 0x10: pointer
  if (data?.rangeStep !== undefined) view.setBigUint64(16, data.rangeStep === null ? 0n : BigInt(util.toPointer(data.rangeStep)), true);
  return buf;
}

/**
 * Windows.Win32.Media.DeviceManager.WMDM_PROP_VALUES_ENUM (size: 16)
 */
export interface WMDM_PROP_VALUES_ENUM {
  /** u32 */
  cEnumValues: number;
  /** ptr */
  pValues: Deno.PointerValue | Uint8Array | null;
}

export const sizeofWMDM_PROP_VALUES_ENUM = 16;

export function allocWMDM_PROP_VALUES_ENUM(data?: Partial<WMDM_PROP_VALUES_ENUM>): Uint8Array {
  const buf = new Uint8Array(sizeofWMDM_PROP_VALUES_ENUM);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.cEnumValues !== undefined) view.setUint32(0, Number(data.cEnumValues), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.pValues !== undefined) view.setBigUint64(8, data.pValues === null ? 0n : BigInt(util.toPointer(data.pValues)), true);
  return buf;
}

/**
 * _ValidValues_e__Union (size: 16)
 */
export interface _ValidValues_e__Union {
  /** Windows.Win32.Media.DeviceManager.WMDM_PROP_VALUES_RANGE */
  ValidValuesRange: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Media.DeviceManager.WMDM_PROP_VALUES_ENUM */
  EnumeratedValidValues: Uint8Array | Deno.PointerValue | null;
}

export const sizeof_ValidValues_e__Union = 16;

export function alloc_ValidValues_e__Union(data?: Partial<_ValidValues_e__Union>): Uint8Array {
  const buf = new Uint8Array(sizeof_ValidValues_e__Union);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.ValidValuesRange !== undefined) view.setBigUint64(0, data.ValidValuesRange === null ? 0n : BigInt(util.toPointer(data.ValidValuesRange)), true);
  // 0x08: pointer
  if (data?.EnumeratedValidValues !== undefined) view.setBigUint64(8, data.EnumeratedValidValues === null ? 0n : BigInt(util.toPointer(data.EnumeratedValidValues)), true);
  return buf;
}

/**
 * Windows.Win32.Media.DeviceManager.WMDM_PROP_DESC (size: 24)
 */
export interface WMDM_PROP_DESC {
  /** Windows.Win32.Foundation.PWSTR */
  pwszPropName: string | null;
  /** Windows.Win32.Media.DeviceManager.WMDM_ENUM_PROP_VALID_VALUES_FORM */
  ValidValuesForm: WMDM_ENUM_PROP_VALID_VALUES_FORM;
  /** _ValidValues_e__Union */
  ValidValues: Uint8Array | Deno.PointerValue | null;
}

export const sizeofWMDM_PROP_DESC = 24;

export function allocWMDM_PROP_DESC(data?: Partial<WMDM_PROP_DESC>): Uint8Array {
  const buf = new Uint8Array(sizeofWMDM_PROP_DESC);
  const view = new DataView(buf.buffer);
  // 0x00: buffer
  if (data?.pwszPropName !== undefined) {
    (buf as any)._f0 = util.pwstrToFfi(data.pwszPropName);
    view.setBigUint64(0, (buf as any)._f0 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f0)), true);
  }
  // 0x08: i32
  if (data?.ValidValuesForm !== undefined) view.setInt32(8, Number(data.ValidValuesForm), true);
  // 0x0c: pad4
  // 0x10: pointer
  if (data?.ValidValues !== undefined) view.setBigUint64(16, data.ValidValues === null ? 0n : BigInt(util.toPointer(data.ValidValues)), true);
  return buf;
}

/**
 * Windows.Win32.Media.DeviceManager.WMDM_PROP_CONFIG (size: 16)
 */
export interface WMDM_PROP_CONFIG {
  /** u32 */
  nPreference: number;
  /** u32 */
  nPropDesc: number;
  /** ptr */
  pPropDesc: Deno.PointerValue | Uint8Array | null;
}

export const sizeofWMDM_PROP_CONFIG = 16;

export function allocWMDM_PROP_CONFIG(data?: Partial<WMDM_PROP_CONFIG>): Uint8Array {
  const buf = new Uint8Array(sizeofWMDM_PROP_CONFIG);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.nPreference !== undefined) view.setUint32(0, Number(data.nPreference), true);
  // 0x04: u32
  if (data?.nPropDesc !== undefined) view.setUint32(4, Number(data.nPropDesc), true);
  // 0x08: pointer
  if (data?.pPropDesc !== undefined) view.setBigUint64(8, data.pPropDesc === null ? 0n : BigInt(util.toPointer(data.pPropDesc)), true);
  return buf;
}

/**
 * Windows.Win32.Media.DeviceManager.WMDM_FORMAT_CAPABILITY (size: 16)
 */
export interface WMDM_FORMAT_CAPABILITY {
  /** u32 */
  nPropConfig: number;
  /** ptr */
  pConfigs: Deno.PointerValue | Uint8Array | null;
}

export const sizeofWMDM_FORMAT_CAPABILITY = 16;

export function allocWMDM_FORMAT_CAPABILITY(data?: Partial<WMDM_FORMAT_CAPABILITY>): Uint8Array {
  const buf = new Uint8Array(sizeofWMDM_FORMAT_CAPABILITY);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.nPropConfig !== undefined) view.setUint32(0, Number(data.nPropConfig), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.pConfigs !== undefined) view.setBigUint64(8, data.pConfigs === null ? 0n : BigInt(util.toPointer(data.pConfigs)), true);
  return buf;
}

/**
 * Windows.Win32.Media.DeviceManager.WMDMDetermineMaxPropStringLen (size: 656)
 */
export interface WMDMDetermineMaxPropStringLen {
  /** array */
  sz001: Deno.PointerValue | null;
  /** array */
  sz002: Deno.PointerValue | null;
  /** array */
  sz003: Deno.PointerValue | null;
  /** array */
  sz004: Deno.PointerValue | null;
  /** array */
  sz005: Deno.PointerValue | null;
  /** array */
  sz006: Deno.PointerValue | null;
  /** array */
  sz007: Deno.PointerValue | null;
  /** array */
  sz008: Deno.PointerValue | null;
  /** array */
  sz009: Deno.PointerValue | null;
  /** array */
  sz010: Deno.PointerValue | null;
  /** array */
  sz011: Deno.PointerValue | null;
  /** array */
  sz012: Deno.PointerValue | null;
  /** array */
  sz013: Deno.PointerValue | null;
  /** array */
  sz014: Deno.PointerValue | null;
  /** array */
  sz015: Deno.PointerValue | null;
  /** array */
  sz016: Deno.PointerValue | null;
  /** array */
  sz017: Deno.PointerValue | null;
  /** array */
  sz018: Deno.PointerValue | null;
  /** array */
  sz019: Deno.PointerValue | null;
  /** array */
  sz020: Deno.PointerValue | null;
  /** array */
  sz021: Deno.PointerValue | null;
  /** array */
  sz022: Deno.PointerValue | null;
  /** array */
  sz023: Deno.PointerValue | null;
  /** array */
  sz024: Deno.PointerValue | null;
  /** array */
  sz025: Deno.PointerValue | null;
  /** array */
  sz026: Deno.PointerValue | null;
  /** array */
  sz027: Deno.PointerValue | null;
  /** array */
  sz028: Deno.PointerValue | null;
  /** array */
  sz029: Deno.PointerValue | null;
  /** array */
  sz030: Deno.PointerValue | null;
  /** array */
  sz031: Deno.PointerValue | null;
  /** array */
  sz032: Deno.PointerValue | null;
  /** array */
  sz033: Deno.PointerValue | null;
  /** array */
  sz034: Deno.PointerValue | null;
  /** array */
  sz035: Deno.PointerValue | null;
  /** array */
  sz036: Deno.PointerValue | null;
  /** array */
  sz037: Deno.PointerValue | null;
  /** array */
  sz041: Deno.PointerValue | null;
  /** array */
  sz043: Deno.PointerValue | null;
  /** array */
  sz044: Deno.PointerValue | null;
  /** array */
  sz045: Deno.PointerValue | null;
  /** array */
  sz046: Deno.PointerValue | null;
  /** array */
  sz047: Deno.PointerValue | null;
  /** array */
  sz048: Deno.PointerValue | null;
  /** array */
  sz049: Deno.PointerValue | null;
  /** array */
  sz050: Deno.PointerValue | null;
  /** array */
  sz051: Deno.PointerValue | null;
  /** array */
  sz052: Deno.PointerValue | null;
  /** array */
  sz053: Deno.PointerValue | null;
  /** array */
  sz054: Deno.PointerValue | null;
  /** array */
  sz055: Deno.PointerValue | null;
  /** array */
  sz056: Deno.PointerValue | null;
  /** array */
  sz057: Deno.PointerValue | null;
  /** array */
  sz058: Deno.PointerValue | null;
  /** array */
  sz059: Deno.PointerValue | null;
  /** array */
  sz060: Deno.PointerValue | null;
  /** array */
  sz061: Deno.PointerValue | null;
  /** array */
  sz062: Deno.PointerValue | null;
  /** array */
  sz063: Deno.PointerValue | null;
  /** array */
  sz064: Deno.PointerValue | null;
  /** array */
  sz065: Deno.PointerValue | null;
  /** array */
  sz066: Deno.PointerValue | null;
  /** array */
  sz067: Deno.PointerValue | null;
  /** array */
  sz068: Deno.PointerValue | null;
  /** array */
  sz069: Deno.PointerValue | null;
  /** array */
  sz070: Deno.PointerValue | null;
  /** array */
  sz071: Deno.PointerValue | null;
  /** array */
  sz072: Deno.PointerValue | null;
  /** array */
  sz073: Deno.PointerValue | null;
  /** array */
  sz074: Deno.PointerValue | null;
  /** array */
  sz075: Deno.PointerValue | null;
  /** array */
  sz076: Deno.PointerValue | null;
  /** array */
  sz077: Deno.PointerValue | null;
  /** array */
  sz078: Deno.PointerValue | null;
  /** array */
  sz079: Deno.PointerValue | null;
  /** array */
  sz080: Deno.PointerValue | null;
  /** array */
  sz081: Deno.PointerValue | null;
  /** array */
  sz082: Deno.PointerValue | null;
  /** array */
  sz083: Deno.PointerValue | null;
  /** array */
  sz084: Deno.PointerValue | null;
  /** array */
  sz085: Deno.PointerValue | null;
  /** array */
  sz086: Deno.PointerValue | null;
}

export const sizeofWMDMDetermineMaxPropStringLen = 656;

export function allocWMDMDetermineMaxPropStringLen(data?: Partial<WMDMDetermineMaxPropStringLen>): Uint8Array {
  const buf = new Uint8Array(sizeofWMDMDetermineMaxPropStringLen);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.sz001 !== undefined) view.setBigUint64(0, data.sz001 === null ? 0n : BigInt(util.toPointer(data.sz001)), true);
  // 0x08: pointer
  if (data?.sz002 !== undefined) view.setBigUint64(8, data.sz002 === null ? 0n : BigInt(util.toPointer(data.sz002)), true);
  // 0x10: pointer
  if (data?.sz003 !== undefined) view.setBigUint64(16, data.sz003 === null ? 0n : BigInt(util.toPointer(data.sz003)), true);
  // 0x18: pointer
  if (data?.sz004 !== undefined) view.setBigUint64(24, data.sz004 === null ? 0n : BigInt(util.toPointer(data.sz004)), true);
  // 0x20: pointer
  if (data?.sz005 !== undefined) view.setBigUint64(32, data.sz005 === null ? 0n : BigInt(util.toPointer(data.sz005)), true);
  // 0x28: pointer
  if (data?.sz006 !== undefined) view.setBigUint64(40, data.sz006 === null ? 0n : BigInt(util.toPointer(data.sz006)), true);
  // 0x30: pointer
  if (data?.sz007 !== undefined) view.setBigUint64(48, data.sz007 === null ? 0n : BigInt(util.toPointer(data.sz007)), true);
  // 0x38: pointer
  if (data?.sz008 !== undefined) view.setBigUint64(56, data.sz008 === null ? 0n : BigInt(util.toPointer(data.sz008)), true);
  // 0x40: pointer
  if (data?.sz009 !== undefined) view.setBigUint64(64, data.sz009 === null ? 0n : BigInt(util.toPointer(data.sz009)), true);
  // 0x48: pointer
  if (data?.sz010 !== undefined) view.setBigUint64(72, data.sz010 === null ? 0n : BigInt(util.toPointer(data.sz010)), true);
  // 0x50: pointer
  if (data?.sz011 !== undefined) view.setBigUint64(80, data.sz011 === null ? 0n : BigInt(util.toPointer(data.sz011)), true);
  // 0x58: pointer
  if (data?.sz012 !== undefined) view.setBigUint64(88, data.sz012 === null ? 0n : BigInt(util.toPointer(data.sz012)), true);
  // 0x60: pointer
  if (data?.sz013 !== undefined) view.setBigUint64(96, data.sz013 === null ? 0n : BigInt(util.toPointer(data.sz013)), true);
  // 0x68: pointer
  if (data?.sz014 !== undefined) view.setBigUint64(104, data.sz014 === null ? 0n : BigInt(util.toPointer(data.sz014)), true);
  // 0x70: pointer
  if (data?.sz015 !== undefined) view.setBigUint64(112, data.sz015 === null ? 0n : BigInt(util.toPointer(data.sz015)), true);
  // 0x78: pointer
  if (data?.sz016 !== undefined) view.setBigUint64(120, data.sz016 === null ? 0n : BigInt(util.toPointer(data.sz016)), true);
  // 0x80: pointer
  if (data?.sz017 !== undefined) view.setBigUint64(128, data.sz017 === null ? 0n : BigInt(util.toPointer(data.sz017)), true);
  // 0x88: pointer
  if (data?.sz018 !== undefined) view.setBigUint64(136, data.sz018 === null ? 0n : BigInt(util.toPointer(data.sz018)), true);
  // 0x90: pointer
  if (data?.sz019 !== undefined) view.setBigUint64(144, data.sz019 === null ? 0n : BigInt(util.toPointer(data.sz019)), true);
  // 0x98: pointer
  if (data?.sz020 !== undefined) view.setBigUint64(152, data.sz020 === null ? 0n : BigInt(util.toPointer(data.sz020)), true);
  // 0xa0: pointer
  if (data?.sz021 !== undefined) view.setBigUint64(160, data.sz021 === null ? 0n : BigInt(util.toPointer(data.sz021)), true);
  // 0xa8: pointer
  if (data?.sz022 !== undefined) view.setBigUint64(168, data.sz022 === null ? 0n : BigInt(util.toPointer(data.sz022)), true);
  // 0xb0: pointer
  if (data?.sz023 !== undefined) view.setBigUint64(176, data.sz023 === null ? 0n : BigInt(util.toPointer(data.sz023)), true);
  // 0xb8: pointer
  if (data?.sz024 !== undefined) view.setBigUint64(184, data.sz024 === null ? 0n : BigInt(util.toPointer(data.sz024)), true);
  // 0xc0: pointer
  if (data?.sz025 !== undefined) view.setBigUint64(192, data.sz025 === null ? 0n : BigInt(util.toPointer(data.sz025)), true);
  // 0xc8: pointer
  if (data?.sz026 !== undefined) view.setBigUint64(200, data.sz026 === null ? 0n : BigInt(util.toPointer(data.sz026)), true);
  // 0xd0: pointer
  if (data?.sz027 !== undefined) view.setBigUint64(208, data.sz027 === null ? 0n : BigInt(util.toPointer(data.sz027)), true);
  // 0xd8: pointer
  if (data?.sz028 !== undefined) view.setBigUint64(216, data.sz028 === null ? 0n : BigInt(util.toPointer(data.sz028)), true);
  // 0xe0: pointer
  if (data?.sz029 !== undefined) view.setBigUint64(224, data.sz029 === null ? 0n : BigInt(util.toPointer(data.sz029)), true);
  // 0xe8: pointer
  if (data?.sz030 !== undefined) view.setBigUint64(232, data.sz030 === null ? 0n : BigInt(util.toPointer(data.sz030)), true);
  // 0xf0: pointer
  if (data?.sz031 !== undefined) view.setBigUint64(240, data.sz031 === null ? 0n : BigInt(util.toPointer(data.sz031)), true);
  // 0xf8: pointer
  if (data?.sz032 !== undefined) view.setBigUint64(248, data.sz032 === null ? 0n : BigInt(util.toPointer(data.sz032)), true);
  // 0x100: pointer
  if (data?.sz033 !== undefined) view.setBigUint64(256, data.sz033 === null ? 0n : BigInt(util.toPointer(data.sz033)), true);
  // 0x108: pointer
  if (data?.sz034 !== undefined) view.setBigUint64(264, data.sz034 === null ? 0n : BigInt(util.toPointer(data.sz034)), true);
  // 0x110: pointer
  if (data?.sz035 !== undefined) view.setBigUint64(272, data.sz035 === null ? 0n : BigInt(util.toPointer(data.sz035)), true);
  // 0x118: pointer
  if (data?.sz036 !== undefined) view.setBigUint64(280, data.sz036 === null ? 0n : BigInt(util.toPointer(data.sz036)), true);
  // 0x120: pointer
  if (data?.sz037 !== undefined) view.setBigUint64(288, data.sz037 === null ? 0n : BigInt(util.toPointer(data.sz037)), true);
  // 0x128: pointer
  if (data?.sz041 !== undefined) view.setBigUint64(296, data.sz041 === null ? 0n : BigInt(util.toPointer(data.sz041)), true);
  // 0x130: pointer
  if (data?.sz043 !== undefined) view.setBigUint64(304, data.sz043 === null ? 0n : BigInt(util.toPointer(data.sz043)), true);
  // 0x138: pointer
  if (data?.sz044 !== undefined) view.setBigUint64(312, data.sz044 === null ? 0n : BigInt(util.toPointer(data.sz044)), true);
  // 0x140: pointer
  if (data?.sz045 !== undefined) view.setBigUint64(320, data.sz045 === null ? 0n : BigInt(util.toPointer(data.sz045)), true);
  // 0x148: pointer
  if (data?.sz046 !== undefined) view.setBigUint64(328, data.sz046 === null ? 0n : BigInt(util.toPointer(data.sz046)), true);
  // 0x150: pointer
  if (data?.sz047 !== undefined) view.setBigUint64(336, data.sz047 === null ? 0n : BigInt(util.toPointer(data.sz047)), true);
  // 0x158: pointer
  if (data?.sz048 !== undefined) view.setBigUint64(344, data.sz048 === null ? 0n : BigInt(util.toPointer(data.sz048)), true);
  // 0x160: pointer
  if (data?.sz049 !== undefined) view.setBigUint64(352, data.sz049 === null ? 0n : BigInt(util.toPointer(data.sz049)), true);
  // 0x168: pointer
  if (data?.sz050 !== undefined) view.setBigUint64(360, data.sz050 === null ? 0n : BigInt(util.toPointer(data.sz050)), true);
  // 0x170: pointer
  if (data?.sz051 !== undefined) view.setBigUint64(368, data.sz051 === null ? 0n : BigInt(util.toPointer(data.sz051)), true);
  // 0x178: pointer
  if (data?.sz052 !== undefined) view.setBigUint64(376, data.sz052 === null ? 0n : BigInt(util.toPointer(data.sz052)), true);
  // 0x180: pointer
  if (data?.sz053 !== undefined) view.setBigUint64(384, data.sz053 === null ? 0n : BigInt(util.toPointer(data.sz053)), true);
  // 0x188: pointer
  if (data?.sz054 !== undefined) view.setBigUint64(392, data.sz054 === null ? 0n : BigInt(util.toPointer(data.sz054)), true);
  // 0x190: pointer
  if (data?.sz055 !== undefined) view.setBigUint64(400, data.sz055 === null ? 0n : BigInt(util.toPointer(data.sz055)), true);
  // 0x198: pointer
  if (data?.sz056 !== undefined) view.setBigUint64(408, data.sz056 === null ? 0n : BigInt(util.toPointer(data.sz056)), true);
  // 0x1a0: pointer
  if (data?.sz057 !== undefined) view.setBigUint64(416, data.sz057 === null ? 0n : BigInt(util.toPointer(data.sz057)), true);
  // 0x1a8: pointer
  if (data?.sz058 !== undefined) view.setBigUint64(424, data.sz058 === null ? 0n : BigInt(util.toPointer(data.sz058)), true);
  // 0x1b0: pointer
  if (data?.sz059 !== undefined) view.setBigUint64(432, data.sz059 === null ? 0n : BigInt(util.toPointer(data.sz059)), true);
  // 0x1b8: pointer
  if (data?.sz060 !== undefined) view.setBigUint64(440, data.sz060 === null ? 0n : BigInt(util.toPointer(data.sz060)), true);
  // 0x1c0: pointer
  if (data?.sz061 !== undefined) view.setBigUint64(448, data.sz061 === null ? 0n : BigInt(util.toPointer(data.sz061)), true);
  // 0x1c8: pointer
  if (data?.sz062 !== undefined) view.setBigUint64(456, data.sz062 === null ? 0n : BigInt(util.toPointer(data.sz062)), true);
  // 0x1d0: pointer
  if (data?.sz063 !== undefined) view.setBigUint64(464, data.sz063 === null ? 0n : BigInt(util.toPointer(data.sz063)), true);
  // 0x1d8: pointer
  if (data?.sz064 !== undefined) view.setBigUint64(472, data.sz064 === null ? 0n : BigInt(util.toPointer(data.sz064)), true);
  // 0x1e0: pointer
  if (data?.sz065 !== undefined) view.setBigUint64(480, data.sz065 === null ? 0n : BigInt(util.toPointer(data.sz065)), true);
  // 0x1e8: pointer
  if (data?.sz066 !== undefined) view.setBigUint64(488, data.sz066 === null ? 0n : BigInt(util.toPointer(data.sz066)), true);
  // 0x1f0: pointer
  if (data?.sz067 !== undefined) view.setBigUint64(496, data.sz067 === null ? 0n : BigInt(util.toPointer(data.sz067)), true);
  // 0x1f8: pointer
  if (data?.sz068 !== undefined) view.setBigUint64(504, data.sz068 === null ? 0n : BigInt(util.toPointer(data.sz068)), true);
  // 0x200: pointer
  if (data?.sz069 !== undefined) view.setBigUint64(512, data.sz069 === null ? 0n : BigInt(util.toPointer(data.sz069)), true);
  // 0x208: pointer
  if (data?.sz070 !== undefined) view.setBigUint64(520, data.sz070 === null ? 0n : BigInt(util.toPointer(data.sz070)), true);
  // 0x210: pointer
  if (data?.sz071 !== undefined) view.setBigUint64(528, data.sz071 === null ? 0n : BigInt(util.toPointer(data.sz071)), true);
  // 0x218: pointer
  if (data?.sz072 !== undefined) view.setBigUint64(536, data.sz072 === null ? 0n : BigInt(util.toPointer(data.sz072)), true);
  // 0x220: pointer
  if (data?.sz073 !== undefined) view.setBigUint64(544, data.sz073 === null ? 0n : BigInt(util.toPointer(data.sz073)), true);
  // 0x228: pointer
  if (data?.sz074 !== undefined) view.setBigUint64(552, data.sz074 === null ? 0n : BigInt(util.toPointer(data.sz074)), true);
  // 0x230: pointer
  if (data?.sz075 !== undefined) view.setBigUint64(560, data.sz075 === null ? 0n : BigInt(util.toPointer(data.sz075)), true);
  // 0x238: pointer
  if (data?.sz076 !== undefined) view.setBigUint64(568, data.sz076 === null ? 0n : BigInt(util.toPointer(data.sz076)), true);
  // 0x240: pointer
  if (data?.sz077 !== undefined) view.setBigUint64(576, data.sz077 === null ? 0n : BigInt(util.toPointer(data.sz077)), true);
  // 0x248: pointer
  if (data?.sz078 !== undefined) view.setBigUint64(584, data.sz078 === null ? 0n : BigInt(util.toPointer(data.sz078)), true);
  // 0x250: pointer
  if (data?.sz079 !== undefined) view.setBigUint64(592, data.sz079 === null ? 0n : BigInt(util.toPointer(data.sz079)), true);
  // 0x258: pointer
  if (data?.sz080 !== undefined) view.setBigUint64(600, data.sz080 === null ? 0n : BigInt(util.toPointer(data.sz080)), true);
  // 0x260: pointer
  if (data?.sz081 !== undefined) view.setBigUint64(608, data.sz081 === null ? 0n : BigInt(util.toPointer(data.sz081)), true);
  // 0x268: pointer
  if (data?.sz082 !== undefined) view.setBigUint64(616, data.sz082 === null ? 0n : BigInt(util.toPointer(data.sz082)), true);
  // 0x270: pointer
  if (data?.sz083 !== undefined) view.setBigUint64(624, data.sz083 === null ? 0n : BigInt(util.toPointer(data.sz083)), true);
  // 0x278: pointer
  if (data?.sz084 !== undefined) view.setBigUint64(632, data.sz084 === null ? 0n : BigInt(util.toPointer(data.sz084)), true);
  // 0x280: pointer
  if (data?.sz085 !== undefined) view.setBigUint64(640, data.sz085 === null ? 0n : BigInt(util.toPointer(data.sz085)), true);
  // 0x288: pointer
  if (data?.sz086 !== undefined) view.setBigUint64(648, data.sz086 === null ? 0n : BigInt(util.toPointer(data.sz086)), true);
  return buf;
}

/**
 * Windows.Win32.Media.DeviceManager.MTP_COMMAND_DATA_IN (size: 32)
 */
export interface MTP_COMMAND_DATA_IN {
  /** u16 */
  OpCode: number;
  /** u32 */
  NumParams: number;
  /** array */
  Params: Deno.PointerValue | null;
  /** u32 */
  NextPhase: number;
  /** u32 */
  CommandWriteDataSize: number;
  /** array */
  CommandWriteData: Deno.PointerValue | null;
}

export const sizeofMTP_COMMAND_DATA_IN = 32;

export function allocMTP_COMMAND_DATA_IN(data?: Partial<MTP_COMMAND_DATA_IN>): Uint8Array {
  const buf = new Uint8Array(sizeofMTP_COMMAND_DATA_IN);
  const view = new DataView(buf.buffer);
  // 0x00: u16
  if (data?.OpCode !== undefined) view.setUint16(0, Number(data.OpCode), true);
  // 0x02: u32
  if (data?.NumParams !== undefined) view.setUint32(2, Number(data.NumParams), true);
  // 0x06: pad2
  // 0x08: pointer
  if (data?.Params !== undefined) view.setBigUint64(8, data.Params === null ? 0n : BigInt(util.toPointer(data.Params)), true);
  // 0x10: u32
  if (data?.NextPhase !== undefined) view.setUint32(16, Number(data.NextPhase), true);
  // 0x14: u32
  if (data?.CommandWriteDataSize !== undefined) view.setUint32(20, Number(data.CommandWriteDataSize), true);
  // 0x18: pointer
  if (data?.CommandWriteData !== undefined) view.setBigUint64(24, data.CommandWriteData === null ? 0n : BigInt(util.toPointer(data.CommandWriteData)), true);
  return buf;
}

/**
 * Windows.Win32.Media.DeviceManager.MTP_COMMAND_DATA_OUT (size: 32)
 */
export interface MTP_COMMAND_DATA_OUT {
  /** u16 */
  ResponseCode: number;
  /** u32 */
  NumParams: number;
  /** array */
  Params: Deno.PointerValue | null;
  /** u32 */
  CommandReadDataSize: number;
  /** array */
  CommandReadData: Deno.PointerValue | null;
}

export const sizeofMTP_COMMAND_DATA_OUT = 32;

export function allocMTP_COMMAND_DATA_OUT(data?: Partial<MTP_COMMAND_DATA_OUT>): Uint8Array {
  const buf = new Uint8Array(sizeofMTP_COMMAND_DATA_OUT);
  const view = new DataView(buf.buffer);
  // 0x00: u16
  if (data?.ResponseCode !== undefined) view.setUint16(0, Number(data.ResponseCode), true);
  // 0x02: u32
  if (data?.NumParams !== undefined) view.setUint32(2, Number(data.NumParams), true);
  // 0x06: pad2
  // 0x08: pointer
  if (data?.Params !== undefined) view.setBigUint64(8, data.Params === null ? 0n : BigInt(util.toPointer(data.Params)), true);
  // 0x10: u32
  if (data?.CommandReadDataSize !== undefined) view.setUint32(16, Number(data.CommandReadDataSize), true);
  // 0x14: pad4
  // 0x18: pointer
  if (data?.CommandReadData !== undefined) view.setBigUint64(24, data.CommandReadData === null ? 0n : BigInt(util.toPointer(data.CommandReadData)), true);
  return buf;
}

// Native Libraries

// Symbols

