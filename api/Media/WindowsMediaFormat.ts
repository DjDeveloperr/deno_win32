/// Auto-generated by Deno Win32: Windows.Win32.Media.WindowsMediaFormat.Apis

import * as util from "../../util.ts";

// Enums
export type _AM_ASFWRITERCONFIG_PARAM = number;
export type WEBSTREAM_SAMPLE_TYPE = number;
export type WM_SF_TYPE = number;
export type WM_SFEX_TYPE = number;
export type WMT_STATUS = number;
export type WMT_STREAM_SELECTION = number;
export type WMT_IMAGE_TYPE = number;
export type WMT_ATTR_DATATYPE = number;
export type WMT_ATTR_IMAGETYPE = number;
export type WMT_VERSION = number;
export type WMT_STORAGE_FORMAT = number;
export type WMT_DRMLA_TRUST = number;
export type WMT_TRANSPORT_TYPE = number;
export type WMT_NET_PROTOCOL = number;
export type WMT_PLAY_MODE = number;
export type WMT_PROXY_SETTINGS = number;
export type WMT_CODEC_INFO_TYPE = number;
export type WM_DM_INTERLACED_TYPE = number;
export type WM_DM_IT_FIRST_FRAME_COHERENCY = number;
export type WMT_OFFSET_FORMAT = number;
export type WMT_INDEXER_TYPE = number;
export type WMT_INDEX_TYPE = number;
export type WMT_FILESINK_MODE = number;
export type WMT_MUSICSPEECH_CLASS_MODE = number;
export type WMT_WATERMARK_ENTRY_TYPE = number;
export type WM_PLAYBACK_DRC_LEVEL = number;
export type WMT_TIMECODE_FRAMERATE = number;
export type WMT_CREDENTIAL_FLAGS = number;
export type WM_AETYPE = number;
export type WMT_RIGHTS = number;
export type NETSOURCE_URLCREDPOLICY_SETTINGS = number;

// Constants
export const WMT_VIDEOIMAGE_SAMPLE_INPUT_FRAME = 1;
export const WMT_VIDEOIMAGE_SAMPLE_OUTPUT_FRAME = 2;
export const WMT_VIDEOIMAGE_SAMPLE_USES_CURRENT_INPUT_FRAME = 4;
export const WMT_VIDEOIMAGE_SAMPLE_USES_PREVIOUS_INPUT_FRAME = 8;
export const WMT_VIDEOIMAGE_SAMPLE_MOTION = 1;
export const WMT_VIDEOIMAGE_SAMPLE_ROTATION = 2;
export const WMT_VIDEOIMAGE_SAMPLE_BLENDING = 4;
export const WMT_VIDEOIMAGE_SAMPLE_ADV_BLENDING = 8;
export const WMT_VIDEOIMAGE_INTEGER_DENOMINATOR = 65536;
export const WMT_VIDEOIMAGE_MAGIC_NUMBER = 491406834;
export const WMT_VIDEOIMAGE_MAGIC_NUMBER_2 = 491406835;
export const WMT_VIDEOIMAGE_TRANSITION_BOW_TIE = 11;
export const WMT_VIDEOIMAGE_TRANSITION_CIRCLE = 12;
export const WMT_VIDEOIMAGE_TRANSITION_CROSS_FADE = 13;
export const WMT_VIDEOIMAGE_TRANSITION_DIAGONAL = 14;
export const WMT_VIDEOIMAGE_TRANSITION_DIAMOND = 15;
export const WMT_VIDEOIMAGE_TRANSITION_FADE_TO_COLOR = 16;
export const WMT_VIDEOIMAGE_TRANSITION_FILLED_V = 17;
export const WMT_VIDEOIMAGE_TRANSITION_FLIP = 18;
export const WMT_VIDEOIMAGE_TRANSITION_INSET = 19;
export const WMT_VIDEOIMAGE_TRANSITION_IRIS = 20;
export const WMT_VIDEOIMAGE_TRANSITION_PAGE_ROLL = 21;
export const WMT_VIDEOIMAGE_TRANSITION_RECTANGLE = 23;
export const WMT_VIDEOIMAGE_TRANSITION_REVEAL = 24;
export const WMT_VIDEOIMAGE_TRANSITION_SLIDE = 27;
export const WMT_VIDEOIMAGE_TRANSITION_SPLIT = 29;
export const WMT_VIDEOIMAGE_TRANSITION_STAR = 30;
export const WMT_VIDEOIMAGE_TRANSITION_WHEEL = 31;
export const WM_SampleExtension_ContentType_Size = 1;
export const WM_SampleExtension_PixelAspectRatio_Size = 2;
export const WM_SampleExtension_Timecode_Size = 14;
export const WM_SampleExtension_SampleDuration_Size = 2;
export const WM_SampleExtension_ChromaLocation_Size = 1;
export const WM_SampleExtension_ColorSpaceInfo_Size = 3;
export const WM_CT_REPEAT_FIRST_FIELD = 16;
export const WM_CT_BOTTOM_FIELD_FIRST = 32;
export const WM_CT_TOP_FIELD_FIRST = 64;
export const WM_CT_INTERLACED = 128;
export const WM_CL_INTERLACED420 = 0;
export const WM_CL_PROGRESSIVE420 = 1;
export const WM_MAX_VIDEO_STREAMS = 63;
export const WM_MAX_STREAMS = 63;
export const WMDRM_IMPORT_INIT_STRUCT_DEFINED = 1;
export const DRM_OPL_TYPES = 1;
export const g_dwWMSpecialAttributes = 20;
export const g_wszWMDuration = "Duration";
export const g_wszWMBitrate = "Bitrate";
export const g_wszWMSeekable = "Seekable";
export const g_wszWMStridable = "Stridable";
export const g_wszWMBroadcast = "Broadcast";
export const g_wszWMProtected = "Is_Protected";
export const g_wszWMTrusted = "Is_Trusted";
export const g_wszWMSignature_Name = "Signature_Name";
export const g_wszWMHasAudio = "HasAudio";
export const g_wszWMHasImage = "HasImage";
export const g_wszWMHasScript = "HasScript";
export const g_wszWMHasVideo = "HasVideo";
export const g_wszWMCurrentBitrate = "CurrentBitrate";
export const g_wszWMOptimalBitrate = "OptimalBitrate";
export const g_wszWMHasAttachedImages = "HasAttachedImages";
export const g_wszWMSkipBackward = "Can_Skip_Backward";
export const g_wszWMSkipForward = "Can_Skip_Forward";
export const g_wszWMNumberOfFrames = "NumberOfFrames";
export const g_wszWMFileSize = "FileSize";
export const g_wszWMHasArbitraryDataStream = "HasArbitraryDataStream";
export const g_wszWMHasFileTransferStream = "HasFileTransferStream";
export const g_wszWMContainerFormat = "WM/ContainerFormat";
export const g_dwWMContentAttributes = 5;
export const g_wszWMTitle = "Title";
export const g_wszWMTitleSort = "TitleSort";
export const g_wszWMAuthor = "Author";
export const g_wszWMAuthorSort = "AuthorSort";
export const g_wszWMDescription = "Description";
export const g_wszWMRating = "Rating";
export const g_wszWMCopyright = "Copyright";
export const g_wszWMUse_DRM = "Use_DRM";
export const g_wszWMDRM_Flags = "DRM_Flags";
export const g_wszWMDRM_Level = "DRM_Level";
export const g_wszWMUse_Advanced_DRM = "Use_Advanced_DRM";
export const g_wszWMDRM_KeySeed = "DRM_KeySeed";
export const g_wszWMDRM_KeyID = "DRM_KeyID";
export const g_wszWMDRM_ContentID = "DRM_ContentID";
export const g_wszWMDRM_SourceID = "DRM_SourceID";
export const g_wszWMDRM_IndividualizedVersion = "DRM_IndividualizedVersion";
export const g_wszWMDRM_LicenseAcqURL = "DRM_LicenseAcqURL";
export const g_wszWMDRM_V1LicenseAcqURL = "DRM_V1LicenseAcqURL";
export const g_wszWMDRM_HeaderSignPrivKey = "DRM_HeaderSignPrivKey";
export const g_wszWMDRM_LASignaturePrivKey = "DRM_LASignaturePrivKey";
export const g_wszWMDRM_LASignatureCert = "DRM_LASignatureCert";
export const g_wszWMDRM_LASignatureLicSrvCert = "DRM_LASignatureLicSrvCert";
export const g_wszWMDRM_LASignatureRootCert = "DRM_LASignatureRootCert";
export const g_wszWMAlbumTitle = "WM/AlbumTitle";
export const g_wszWMAlbumTitleSort = "WM/AlbumTitleSort";
export const g_wszWMTrack = "WM/Track";
export const g_wszWMPromotionURL = "WM/PromotionURL";
export const g_wszWMAlbumCoverURL = "WM/AlbumCoverURL";
export const g_wszWMGenre = "WM/Genre";
export const g_wszWMYear = "WM/Year";
export const g_wszWMGenreID = "WM/GenreID";
export const g_wszWMMCDI = "WM/MCDI";
export const g_wszWMComposer = "WM/Composer";
export const g_wszWMComposerSort = "WM/ComposerSort";
export const g_wszWMLyrics = "WM/Lyrics";
export const g_wszWMTrackNumber = "WM/TrackNumber";
export const g_wszWMToolName = "WM/ToolName";
export const g_wszWMToolVersion = "WM/ToolVersion";
export const g_wszWMIsVBR = "IsVBR";
export const g_wszWMAlbumArtist = "WM/AlbumArtist";
export const g_wszWMAlbumArtistSort = "WM/AlbumArtistSort";
export const g_wszWMBannerImageType = "BannerImageType";
export const g_wszWMBannerImageData = "BannerImageData";
export const g_wszWMBannerImageURL = "BannerImageURL";
export const g_wszWMCopyrightURL = "CopyrightURL";
export const g_wszWMAspectRatioX = "AspectRatioX";
export const g_wszWMAspectRatioY = "AspectRatioY";
export const g_wszASFLeakyBucketPairs = "ASFLeakyBucketPairs";
export const g_dwWMNSCAttributes = 5;
export const g_wszWMNSCName = "NSC_Name";
export const g_wszWMNSCAddress = "NSC_Address";
export const g_wszWMNSCPhone = "NSC_Phone";
export const g_wszWMNSCEmail = "NSC_Email";
export const g_wszWMNSCDescription = "NSC_Description";
export const g_wszWMWriter = "WM/Writer";
export const g_wszWMConductor = "WM/Conductor";
export const g_wszWMProducer = "WM/Producer";
export const g_wszWMDirector = "WM/Director";
export const g_wszWMContentGroupDescription = "WM/ContentGroupDescription";
export const g_wszWMSubTitle = "WM/SubTitle";
export const g_wszWMPartOfSet = "WM/PartOfSet";
export const g_wszWMProtectionType = "WM/ProtectionType";
export const g_wszWMVideoHeight = "WM/VideoHeight";
export const g_wszWMVideoWidth = "WM/VideoWidth";
export const g_wszWMVideoFrameRate = "WM/VideoFrameRate";
export const g_wszWMMediaClassPrimaryID = "WM/MediaClassPrimaryID";
export const g_wszWMMediaClassSecondaryID = "WM/MediaClassSecondaryID";
export const g_wszWMPeriod = "WM/Period";
export const g_wszWMCategory = "WM/Category";
export const g_wszWMPicture = "WM/Picture";
export const g_wszWMLyrics_Synchronised = "WM/Lyrics_Synchronised";
export const g_wszWMOriginalLyricist = "WM/OriginalLyricist";
export const g_wszWMOriginalArtist = "WM/OriginalArtist";
export const g_wszWMOriginalAlbumTitle = "WM/OriginalAlbumTitle";
export const g_wszWMOriginalReleaseYear = "WM/OriginalReleaseYear";
export const g_wszWMOriginalFilename = "WM/OriginalFilename";
export const g_wszWMPublisher = "WM/Publisher";
export const g_wszWMEncodedBy = "WM/EncodedBy";
export const g_wszWMEncodingSettings = "WM/EncodingSettings";
export const g_wszWMEncodingTime = "WM/EncodingTime";
export const g_wszWMAuthorURL = "WM/AuthorURL";
export const g_wszWMUserWebURL = "WM/UserWebURL";
export const g_wszWMAudioFileURL = "WM/AudioFileURL";
export const g_wszWMAudioSourceURL = "WM/AudioSourceURL";
export const g_wszWMLanguage = "WM/Language";
export const g_wszWMParentalRating = "WM/ParentalRating";
export const g_wszWMBeatsPerMinute = "WM/BeatsPerMinute";
export const g_wszWMInitialKey = "WM/InitialKey";
export const g_wszWMMood = "WM/Mood";
export const g_wszWMText = "WM/Text";
export const g_wszWMDVDID = "WM/DVDID";
export const g_wszWMWMContentID = "WM/WMContentID";
export const g_wszWMWMCollectionID = "WM/WMCollectionID";
export const g_wszWMWMCollectionGroupID = "WM/WMCollectionGroupID";
export const g_wszWMUniqueFileIdentifier = "WM/UniqueFileIdentifier";
export const g_wszWMModifiedBy = "WM/ModifiedBy";
export const g_wszWMRadioStationName = "WM/RadioStationName";
export const g_wszWMRadioStationOwner = "WM/RadioStationOwner";
export const g_wszWMPlaylistDelay = "WM/PlaylistDelay";
export const g_wszWMCodec = "WM/Codec";
export const g_wszWMDRM = "WM/DRM";
export const g_wszWMISRC = "WM/ISRC";
export const g_wszWMProvider = "WM/Provider";
export const g_wszWMProviderRating = "WM/ProviderRating";
export const g_wszWMProviderStyle = "WM/ProviderStyle";
export const g_wszWMContentDistributor = "WM/ContentDistributor";
export const g_wszWMSubscriptionContentID = "WM/SubscriptionContentID";
export const g_wszWMWMADRCPeakReference = "WM/WMADRCPeakReference";
export const g_wszWMWMADRCPeakTarget = "WM/WMADRCPeakTarget";
export const g_wszWMWMADRCAverageReference = "WM/WMADRCAverageReference";
export const g_wszWMWMADRCAverageTarget = "WM/WMADRCAverageTarget";
export const g_wszWMStreamTypeInfo = "WM/StreamTypeInfo";
export const g_wszWMPeakBitrate = "WM/PeakBitrate";
export const g_wszWMASFPacketCount = "WM/ASFPacketCount";
export const g_wszWMASFSecurityObjectsSize = "WM/ASFSecurityObjectsSize";
export const g_wszWMSharedUserRating = "WM/SharedUserRating";
export const g_wszWMSubTitleDescription = "WM/SubTitleDescription";
export const g_wszWMMediaCredits = "WM/MediaCredits";
export const g_wszWMParentalRatingReason = "WM/ParentalRatingReason";
export const g_wszWMOriginalReleaseTime = "WM/OriginalReleaseTime";
export const g_wszWMMediaStationCallSign = "WM/MediaStationCallSign";
export const g_wszWMMediaStationName = "WM/MediaStationName";
export const g_wszWMMediaNetworkAffiliation = "WM/MediaNetworkAffiliation";
export const g_wszWMMediaOriginalChannel = "WM/MediaOriginalChannel";
export const g_wszWMMediaOriginalBroadcastDateTime = "WM/MediaOriginalBroadcastDateTime";
export const g_wszWMMediaIsStereo = "WM/MediaIsStereo";
export const g_wszWMVideoClosedCaptioning = "WM/VideoClosedCaptioning";
export const g_wszWMMediaIsRepeat = "WM/MediaIsRepeat";
export const g_wszWMMediaIsLive = "WM/MediaIsLive";
export const g_wszWMMediaIsTape = "WM/MediaIsTape";
export const g_wszWMMediaIsDelay = "WM/MediaIsDelay";
export const g_wszWMMediaIsSubtitled = "WM/MediaIsSubtitled";
export const g_wszWMMediaIsPremiere = "WM/MediaIsPremiere";
export const g_wszWMMediaIsFinale = "WM/MediaIsFinale";
export const g_wszWMMediaIsSAP = "WM/MediaIsSAP";
export const g_wszWMProviderCopyright = "WM/ProviderCopyright";
export const g_wszWMISAN = "WM/ISAN";
export const g_wszWMADID = "WM/ADID";
export const g_wszWMWMShadowFileSourceFileType = "WM/WMShadowFileSourceFileType";
export const g_wszWMWMShadowFileSourceDRMType = "WM/WMShadowFileSourceDRMType";
export const g_wszWMWMCPDistributor = "WM/WMCPDistributor";
export const g_wszWMWMCPDistributorID = "WM/WMCPDistributorID";
export const g_wszWMSeasonNumber = "WM/SeasonNumber";
export const g_wszWMEpisodeNumber = "WM/EpisodeNumber";
export const g_wszEarlyDataDelivery = "EarlyDataDelivery";
export const g_wszJustInTimeDecode = "JustInTimeDecode";
export const g_wszSingleOutputBuffer = "SingleOutputBuffer";
export const g_wszSoftwareScaling = "SoftwareScaling";
export const g_wszDeliverOnReceive = "DeliverOnReceive";
export const g_wszScrambledAudio = "ScrambledAudio";
export const g_wszDedicatedDeliveryThread = "DedicatedDeliveryThread";
export const g_wszEnableDiscreteOutput = "EnableDiscreteOutput";
export const g_wszSpeakerConfig = "SpeakerConfig";
export const g_wszDynamicRangeControl = "DynamicRangeControl";
export const g_wszAllowInterlacedOutput = "AllowInterlacedOutput";
export const g_wszVideoSampleDurations = "VideoSampleDurations";
export const g_wszStreamLanguage = "StreamLanguage";
export const g_wszEnableWMAProSPDIFOutput = "EnableWMAProSPDIFOutput";
export const g_wszDeinterlaceMode = "DeinterlaceMode";
export const g_wszInitialPatternForInverseTelecine = "InitialPatternForInverseTelecine";
export const g_wszJPEGCompressionQuality = "JPEGCompressionQuality";
export const g_wszWatermarkCLSID = "WatermarkCLSID";
export const g_wszWatermarkConfig = "WatermarkConfig";
export const g_wszInterlacedCoding = "InterlacedCoding";
export const g_wszFixedFrameRate = "FixedFrameRate";
export const g_wszOriginalSourceFormatTag = "_SOURCEFORMATTAG";
export const g_wszOriginalWaveFormat = "_ORIGINALWAVEFORMAT";
export const g_wszEDL = "_EDL";
export const g_wszComplexity = "_COMPLEXITYEX";
export const g_wszDecoderComplexityRequested = "_DECODERCOMPLEXITYPROFILE";
export const g_wszReloadIndexOnSeek = "ReloadIndexOnSeek";
export const g_wszStreamNumIndexObjects = "StreamNumIndexObjects";
export const g_wszFailSeekOnError = "FailSeekOnError";
export const g_wszPermitSeeksBeyondEndOfStream = "PermitSeeksBeyondEndOfStream";
export const g_wszUsePacketAtSeekPoint = "UsePacketAtSeekPoint";
export const g_wszSourceBufferTime = "SourceBufferTime";
export const g_wszSourceMaxBytesAtOnce = "SourceMaxBytesAtOnce";
export const g_wszVBREnabled = "_VBRENABLED";
export const g_wszVBRQuality = "_VBRQUALITY";
export const g_wszVBRBitrateMax = "_RMAX";
export const g_wszVBRBufferWindowMax = "_BMAX";
export const g_wszVBRPeak = "VBR Peak";
export const g_wszBufferAverage = "Buffer Average";
export const g_wszComplexityMax = "_COMPLEXITYEXMAX";
export const g_wszComplexityOffline = "_COMPLEXITYEXOFFLINE";
export const g_wszComplexityLive = "_COMPLEXITYEXLIVE";
export const g_wszIsVBRSupported = "_ISVBRSUPPORTED";
export const g_wszNumPasses = "_PASSESUSED";
export const g_wszMusicSpeechClassMode = "MusicSpeechClassMode";
export const g_wszMusicClassMode = "MusicClassMode";
export const g_wszSpeechClassMode = "SpeechClassMode";
export const g_wszMixedClassMode = "MixedClassMode";
export const g_wszSpeechCaps = "SpeechFormatCap";
export const g_wszPeakValue = "PeakValue";
export const g_wszAverageLevel = "AverageLevel";
export const g_wszFold6To2Channels3 = "Fold6To2Channels3";
export const g_wszFoldToChannelsTemplate = "Fold%luTo%luChannels%lu";
export const g_wszDeviceConformanceTemplate = "DeviceConformanceTemplate";
export const g_wszEnableFrameInterpolation = "EnableFrameInterpolation";
export const g_wszNeedsPreviousSample = "NeedsPreviousSample";
export const g_wszWMIsCompilation = "WM/IsCompilation";
export const AM_CONFIGASFWRITER_PARAM_AUTOINDEX = 1;
export const AM_CONFIGASFWRITER_PARAM_MULTIPASS = 2;
export const AM_CONFIGASFWRITER_PARAM_DONTCOMPRESS = 3;
export const WEBSTREAM_SAMPLE_TYPE_FILE = 1;
export const WEBSTREAM_SAMPLE_TYPE_RENDER = 2;
export const WM_SF_CLEANPOINT = 1;
export const WM_SF_DISCONTINUITY = 2;
export const WM_SF_DATALOSS = 4;
export const WM_SFEX_NOTASYNCPOINT = 2;
export const WM_SFEX_DATALOSS = 4;
export const WMT_ERROR = 0;
export const WMT_OPENED = 1;
export const WMT_BUFFERING_START = 2;
export const WMT_BUFFERING_STOP = 3;
export const WMT_EOF = 4;
export const WMT_END_OF_FILE = 4;
export const WMT_END_OF_SEGMENT = 5;
export const WMT_END_OF_STREAMING = 6;
export const WMT_LOCATING = 7;
export const WMT_CONNECTING = 8;
export const WMT_NO_RIGHTS = 9;
export const WMT_MISSING_CODEC = 10;
export const WMT_STARTED = 11;
export const WMT_STOPPED = 12;
export const WMT_CLOSED = 13;
export const WMT_STRIDING = 14;
export const WMT_TIMER = 15;
export const WMT_INDEX_PROGRESS = 16;
export const WMT_SAVEAS_START = 17;
export const WMT_SAVEAS_STOP = 18;
export const WMT_NEW_SOURCEFLAGS = 19;
export const WMT_NEW_METADATA = 20;
export const WMT_BACKUPRESTORE_BEGIN = 21;
export const WMT_SOURCE_SWITCH = 22;
export const WMT_ACQUIRE_LICENSE = 23;
export const WMT_INDIVIDUALIZE = 24;
export const WMT_NEEDS_INDIVIDUALIZATION = 25;
export const WMT_NO_RIGHTS_EX = 26;
export const WMT_BACKUPRESTORE_END = 27;
export const WMT_BACKUPRESTORE_CONNECTING = 28;
export const WMT_BACKUPRESTORE_DISCONNECTING = 29;
export const WMT_ERROR_WITHURL = 30;
export const WMT_RESTRICTED_LICENSE = 31;
export const WMT_CLIENT_CONNECT = 32;
export const WMT_CLIENT_DISCONNECT = 33;
export const WMT_NATIVE_OUTPUT_PROPS_CHANGED = 34;
export const WMT_RECONNECT_START = 35;
export const WMT_RECONNECT_END = 36;
export const WMT_CLIENT_CONNECT_EX = 37;
export const WMT_CLIENT_DISCONNECT_EX = 38;
export const WMT_SET_FEC_SPAN = 39;
export const WMT_PREROLL_READY = 40;
export const WMT_PREROLL_COMPLETE = 41;
export const WMT_CLIENT_PROPERTIES = 42;
export const WMT_LICENSEURL_SIGNATURE_STATE = 43;
export const WMT_INIT_PLAYLIST_BURN = 44;
export const WMT_TRANSCRYPTOR_INIT = 45;
export const WMT_TRANSCRYPTOR_SEEKED = 46;
export const WMT_TRANSCRYPTOR_READ = 47;
export const WMT_TRANSCRYPTOR_CLOSED = 48;
export const WMT_PROXIMITY_RESULT = 49;
export const WMT_PROXIMITY_COMPLETED = 50;
export const WMT_CONTENT_ENABLER = 51;
export const WMT_OFF = 0;
export const WMT_CLEANPOINT_ONLY = 1;
export const WMT_ON = 2;
export const WMT_IT_NONE = 0;
export const WMT_IT_BITMAP = 1;
export const WMT_IT_JPEG = 2;
export const WMT_IT_GIF = 3;
export const WMT_TYPE_DWORD = 0;
export const WMT_TYPE_STRING = 1;
export const WMT_TYPE_BINARY = 2;
export const WMT_TYPE_BOOL = 3;
export const WMT_TYPE_QWORD = 4;
export const WMT_TYPE_WORD = 5;
export const WMT_TYPE_GUID = 6;
export const WMT_IMAGETYPE_BITMAP = 1;
export const WMT_IMAGETYPE_JPEG = 2;
export const WMT_IMAGETYPE_GIF = 3;
export const WMT_VER_4_0 = 262144;
export const WMT_VER_7_0 = 458752;
export const WMT_VER_8_0 = 524288;
export const WMT_VER_9_0 = 589824;
export const WMT_Storage_Format_MP3 = 0;
export const WMT_Storage_Format_V1 = 1;
export const WMT_DRMLA_UNTRUSTED = 0;
export const WMT_DRMLA_TRUSTED = 1;
export const WMT_DRMLA_TAMPERED = 2;
export const WMT_Transport_Type_Unreliable = 0;
export const WMT_Transport_Type_Reliable = 1;
export const WMT_PROTOCOL_HTTP = 0;
export const WMT_PLAY_MODE_AUTOSELECT = 0;
export const WMT_PLAY_MODE_LOCAL = 1;
export const WMT_PLAY_MODE_DOWNLOAD = 2;
export const WMT_PLAY_MODE_STREAMING = 3;
export const WMT_PROXY_SETTING_NONE = 0;
export const WMT_PROXY_SETTING_MANUAL = 1;
export const WMT_PROXY_SETTING_AUTO = 2;
export const WMT_PROXY_SETTING_BROWSER = 3;
export const WMT_PROXY_SETTING_MAX = 4;
export const WMT_CODECINFO_AUDIO = 0;
export const WMT_CODECINFO_VIDEO = 1;
export const WMT_CODECINFO_UNKNOWN = "-1";
export const WM_DM_NOTINTERLACED = 0;
export const WM_DM_DEINTERLACE_NORMAL = 1;
export const WM_DM_DEINTERLACE_HALFSIZE = 2;
export const WM_DM_DEINTERLACE_HALFSIZEDOUBLERATE = 3;
export const WM_DM_DEINTERLACE_INVERSETELECINE = 4;
export const WM_DM_DEINTERLACE_VERTICALHALFSIZEDOUBLERATE = 5;
export const WM_DM_IT_DISABLE_COHERENT_MODE = 0;
export const WM_DM_IT_FIRST_FRAME_IN_CLIP_IS_AA_TOP = 1;
export const WM_DM_IT_FIRST_FRAME_IN_CLIP_IS_BB_TOP = 2;
export const WM_DM_IT_FIRST_FRAME_IN_CLIP_IS_BC_TOP = 3;
export const WM_DM_IT_FIRST_FRAME_IN_CLIP_IS_CD_TOP = 4;
export const WM_DM_IT_FIRST_FRAME_IN_CLIP_IS_DD_TOP = 5;
export const WM_DM_IT_FIRST_FRAME_IN_CLIP_IS_AA_BOTTOM = 6;
export const WM_DM_IT_FIRST_FRAME_IN_CLIP_IS_BB_BOTTOM = 7;
export const WM_DM_IT_FIRST_FRAME_IN_CLIP_IS_BC_BOTTOM = 8;
export const WM_DM_IT_FIRST_FRAME_IN_CLIP_IS_CD_BOTTOM = 9;
export const WM_DM_IT_FIRST_FRAME_IN_CLIP_IS_DD_BOTTOM = 10;
export const WMT_OFFSET_FORMAT_100NS = 0;
export const WMT_OFFSET_FORMAT_FRAME_NUMBERS = 1;
export const WMT_OFFSET_FORMAT_PLAYLIST_OFFSET = 2;
export const WMT_OFFSET_FORMAT_TIMECODE = 3;
export const WMT_OFFSET_FORMAT_100NS_APPROXIMATE = 4;
export const WMT_IT_PRESENTATION_TIME = 0;
export const WMT_IT_FRAME_NUMBERS = 1;
export const WMT_IT_TIMECODE = 2;
export const WMT_IT_NEAREST_DATA_UNIT = 1;
export const WMT_IT_NEAREST_OBJECT = 2;
export const WMT_IT_NEAREST_CLEAN_POINT = 3;
export const WMT_FM_SINGLE_BUFFERS = 1;
export const WMT_FM_FILESINK_DATA_UNITS = 2;
export const WMT_FM_FILESINK_UNBUFFERED = 4;
export const WMT_MS_CLASS_MUSIC = 0;
export const WMT_MS_CLASS_SPEECH = 1;
export const WMT_MS_CLASS_MIXED = 2;
export const WMT_WMETYPE_AUDIO = 1;
export const WMT_WMETYPE_VIDEO = 2;
export const WM_PLAYBACK_DRC_HIGH = 0;
export const WM_PLAYBACK_DRC_MEDIUM = 1;
export const WM_PLAYBACK_DRC_LOW = 2;
export const WMT_TIMECODE_FRAMERATE_30 = 0;
export const WMT_TIMECODE_FRAMERATE_30DROP = 1;
export const WMT_TIMECODE_FRAMERATE_25 = 2;
export const WMT_TIMECODE_FRAMERATE_24 = 3;
export const WMT_CREDENTIAL_SAVE = 1;
export const WMT_CREDENTIAL_DONT_CACHE = 2;
export const WMT_CREDENTIAL_CLEAR_TEXT = 4;
export const WMT_CREDENTIAL_PROXY = 8;
export const WMT_CREDENTIAL_ENCRYPT = 16;
export const WM_AETYPE_INCLUDE = 105;
export const WM_AETYPE_EXCLUDE = 101;
export const WMT_RIGHT_PLAYBACK = 1;
export const WMT_RIGHT_COPY_TO_NON_SDMI_DEVICE = 2;
export const WMT_RIGHT_COPY_TO_CD = 8;
export const WMT_RIGHT_COPY_TO_SDMI_DEVICE = 16;
export const WMT_RIGHT_ONE_TIME = 32;
export const WMT_RIGHT_SAVE_STREAM_PROTECTED = 64;
export const WMT_RIGHT_COPY = 128;
export const WMT_RIGHT_COLLABORATIVE_PLAY = 256;
export const WMT_RIGHT_SDMI_TRIGGER = 65536;
export const WMT_RIGHT_SDMI_NOMORECOPIES = 131072;
export const NETSOURCE_URLCREDPOLICY_SETTING_SILENTLOGONOK = 0;
export const NETSOURCE_URLCREDPOLICY_SETTING_MUSTPROMPTUSER = 1;
export const NETSOURCE_URLCREDPOLICY_SETTING_ANONYMOUSONLY = 2;

// Structs

export type HRESULT = number;

/**
 * Windows.Win32.Media.WindowsMediaFormat.AM_WMT_EVENT_DATA (size: 16)
 */
export interface AM_WMT_EVENT_DATA {
  /** Windows.Win32.Foundation.HRESULT */
  hrStatus: Uint8Array | Deno.PointerValue | null;
  /** ptr */
  pData: Deno.PointerValue | Uint8Array | null;
}

export const sizeofAM_WMT_EVENT_DATA = 16;

export function allocAM_WMT_EVENT_DATA(data?: Partial<AM_WMT_EVENT_DATA>): Uint8Array {
  const buf = new Uint8Array(sizeofAM_WMT_EVENT_DATA);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.hrStatus !== undefined) view.setBigUint64(0, data.hrStatus === null ? 0n : BigInt(util.toPointer(data.hrStatus)), true);
  // 0x08: pointer
  if (data?.pData !== undefined) view.setBigUint64(8, data.pData === null ? 0n : BigInt(util.toPointer(data.pData)), true);
  return buf;
}

export type BOOL = number;

/**
 * Windows.Win32.Media.WindowsMediaFormat.WM_STREAM_PRIORITY_RECORD (size: 8)
 */
export interface WM_STREAM_PRIORITY_RECORD {
  /** u16 */
  wStreamNumber: number;
  /** Windows.Win32.Foundation.BOOL */
  fMandatory: boolean;
}

export const sizeofWM_STREAM_PRIORITY_RECORD = 8;

export function allocWM_STREAM_PRIORITY_RECORD(data?: Partial<WM_STREAM_PRIORITY_RECORD>): Uint8Array {
  const buf = new Uint8Array(sizeofWM_STREAM_PRIORITY_RECORD);
  const view = new DataView(buf.buffer);
  // 0x00: u16
  if (data?.wStreamNumber !== undefined) view.setUint16(0, Number(data.wStreamNumber), true);
  // 0x02: i32
  if (data?.fMandatory !== undefined) view.setInt32(2, Number(data.fMandatory), true);
  // 0x06: pad2
  return buf;
}

/**
 * Windows.Win32.Media.WindowsMediaFormat.WM_WRITER_STATISTICS (size: 56)
 */
export interface WM_WRITER_STATISTICS {
  /** u64 */
  qwSampleCount: Deno.PointerValue;
  /** u64 */
  qwByteCount: Deno.PointerValue;
  /** u64 */
  qwDroppedSampleCount: Deno.PointerValue;
  /** u64 */
  qwDroppedByteCount: Deno.PointerValue;
  /** u32 */
  dwCurrentBitrate: number;
  /** u32 */
  dwAverageBitrate: number;
  /** u32 */
  dwExpectedBitrate: number;
  /** u32 */
  dwCurrentSampleRate: number;
  /** u32 */
  dwAverageSampleRate: number;
  /** u32 */
  dwExpectedSampleRate: number;
}

export const sizeofWM_WRITER_STATISTICS = 56;

export function allocWM_WRITER_STATISTICS(data?: Partial<WM_WRITER_STATISTICS>): Uint8Array {
  const buf = new Uint8Array(sizeofWM_WRITER_STATISTICS);
  const view = new DataView(buf.buffer);
  // 0x00: u64
  if (data?.qwSampleCount !== undefined) view.setBigUint64(0, BigInt(data.qwSampleCount), true);
  // 0x08: u64
  if (data?.qwByteCount !== undefined) view.setBigUint64(8, BigInt(data.qwByteCount), true);
  // 0x10: u64
  if (data?.qwDroppedSampleCount !== undefined) view.setBigUint64(16, BigInt(data.qwDroppedSampleCount), true);
  // 0x18: u64
  if (data?.qwDroppedByteCount !== undefined) view.setBigUint64(24, BigInt(data.qwDroppedByteCount), true);
  // 0x20: u32
  if (data?.dwCurrentBitrate !== undefined) view.setUint32(32, Number(data.dwCurrentBitrate), true);
  // 0x24: u32
  if (data?.dwAverageBitrate !== undefined) view.setUint32(36, Number(data.dwAverageBitrate), true);
  // 0x28: u32
  if (data?.dwExpectedBitrate !== undefined) view.setUint32(40, Number(data.dwExpectedBitrate), true);
  // 0x2c: u32
  if (data?.dwCurrentSampleRate !== undefined) view.setUint32(44, Number(data.dwCurrentSampleRate), true);
  // 0x30: u32
  if (data?.dwAverageSampleRate !== undefined) view.setUint32(48, Number(data.dwAverageSampleRate), true);
  // 0x34: u32
  if (data?.dwExpectedSampleRate !== undefined) view.setUint32(52, Number(data.dwExpectedSampleRate), true);
  return buf;
}

/**
 * Windows.Win32.Media.WindowsMediaFormat.WM_WRITER_STATISTICS_EX (size: 32)
 */
export interface WM_WRITER_STATISTICS_EX {
  /** u32 */
  dwBitratePlusOverhead: number;
  /** u32 */
  dwCurrentSampleDropRateInQueue: number;
  /** u32 */
  dwCurrentSampleDropRateInCodec: number;
  /** u32 */
  dwCurrentSampleDropRateInMultiplexer: number;
  /** u32 */
  dwTotalSampleDropsInQueue: number;
  /** u32 */
  dwTotalSampleDropsInCodec: number;
  /** u32 */
  dwTotalSampleDropsInMultiplexer: number;
}

export const sizeofWM_WRITER_STATISTICS_EX = 32;

export function allocWM_WRITER_STATISTICS_EX(data?: Partial<WM_WRITER_STATISTICS_EX>): Uint8Array {
  const buf = new Uint8Array(sizeofWM_WRITER_STATISTICS_EX);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.dwBitratePlusOverhead !== undefined) view.setUint32(0, Number(data.dwBitratePlusOverhead), true);
  // 0x04: u32
  if (data?.dwCurrentSampleDropRateInQueue !== undefined) view.setUint32(4, Number(data.dwCurrentSampleDropRateInQueue), true);
  // 0x08: u32
  if (data?.dwCurrentSampleDropRateInCodec !== undefined) view.setUint32(8, Number(data.dwCurrentSampleDropRateInCodec), true);
  // 0x0c: u32
  if (data?.dwCurrentSampleDropRateInMultiplexer !== undefined) view.setUint32(12, Number(data.dwCurrentSampleDropRateInMultiplexer), true);
  // 0x10: u32
  if (data?.dwTotalSampleDropsInQueue !== undefined) view.setUint32(16, Number(data.dwTotalSampleDropsInQueue), true);
  // 0x14: u32
  if (data?.dwTotalSampleDropsInCodec !== undefined) view.setUint32(20, Number(data.dwTotalSampleDropsInCodec), true);
  // 0x18: u32
  if (data?.dwTotalSampleDropsInMultiplexer !== undefined) view.setUint32(24, Number(data.dwTotalSampleDropsInMultiplexer), true);
  // 0x1c: pad4
  return buf;
}

/**
 * Windows.Win32.Media.WindowsMediaFormat.WM_READER_STATISTICS (size: 24)
 */
export interface WM_READER_STATISTICS {
  /** u32 */
  cbSize: number;
  /** u32 */
  dwBandwidth: number;
  /** u32 */
  cPacketsReceived: number;
  /** u32 */
  cPacketsRecovered: number;
  /** u32 */
  cPacketsLost: number;
  /** u16 */
  wQuality: number;
}

export const sizeofWM_READER_STATISTICS = 24;

export function allocWM_READER_STATISTICS(data?: Partial<WM_READER_STATISTICS>): Uint8Array {
  const buf = new Uint8Array(sizeofWM_READER_STATISTICS);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.cbSize !== undefined) view.setUint32(0, Number(data.cbSize), true);
  // 0x04: u32
  if (data?.dwBandwidth !== undefined) view.setUint32(4, Number(data.dwBandwidth), true);
  // 0x08: u32
  if (data?.cPacketsReceived !== undefined) view.setUint32(8, Number(data.cPacketsReceived), true);
  // 0x0c: u32
  if (data?.cPacketsRecovered !== undefined) view.setUint32(12, Number(data.cPacketsRecovered), true);
  // 0x10: u32
  if (data?.cPacketsLost !== undefined) view.setUint32(16, Number(data.cPacketsLost), true);
  // 0x14: u16
  if (data?.wQuality !== undefined) view.setUint16(20, Number(data.wQuality), true);
  // 0x16: pad2
  return buf;
}

export type PWSTR = Deno.PointerValue | Uint8Array | null;

/**
 * Windows.Win32.Media.WindowsMediaFormat.WM_READER_CLIENTINFO (size: 72)
 */
export interface WM_READER_CLIENTINFO {
  /** u32 */
  cbSize: number;
  /** Windows.Win32.Foundation.PWSTR */
  wszLang: string | null;
  /** Windows.Win32.Foundation.PWSTR */
  wszBrowserUserAgent: string | null;
  /** Windows.Win32.Foundation.PWSTR */
  wszBrowserWebPage: string | null;
  /** u64 */
  qwReserved: Deno.PointerValue;
  /** ptr */
  pReserved: Deno.PointerValue | Uint8Array | null;
  /** Windows.Win32.Foundation.PWSTR */
  wszHostExe: string | null;
  /** u64 */
  qwHostVersion: Deno.PointerValue;
  /** Windows.Win32.Foundation.PWSTR */
  wszPlayerUserAgent: string | null;
}

export const sizeofWM_READER_CLIENTINFO = 72;

export function allocWM_READER_CLIENTINFO(data?: Partial<WM_READER_CLIENTINFO>): Uint8Array {
  const buf = new Uint8Array(sizeofWM_READER_CLIENTINFO);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.cbSize !== undefined) view.setUint32(0, Number(data.cbSize), true);
  // 0x04: pad4
  // 0x08: buffer
  if (data?.wszLang !== undefined) {
    (buf as any)._f8 = util.pwstrToFfi(data.wszLang);
    view.setBigUint64(8, (buf as any)._f8 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f8)), true);
  }
  // 0x10: buffer
  if (data?.wszBrowserUserAgent !== undefined) {
    (buf as any)._f16 = util.pwstrToFfi(data.wszBrowserUserAgent);
    view.setBigUint64(16, (buf as any)._f16 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f16)), true);
  }
  // 0x18: buffer
  if (data?.wszBrowserWebPage !== undefined) {
    (buf as any)._f24 = util.pwstrToFfi(data.wszBrowserWebPage);
    view.setBigUint64(24, (buf as any)._f24 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f24)), true);
  }
  // 0x20: u64
  if (data?.qwReserved !== undefined) view.setBigUint64(32, BigInt(data.qwReserved), true);
  // 0x28: pointer
  if (data?.pReserved !== undefined) view.setBigUint64(40, data.pReserved === null ? 0n : BigInt(util.toPointer(data.pReserved)), true);
  // 0x30: buffer
  if (data?.wszHostExe !== undefined) {
    (buf as any)._f48 = util.pwstrToFfi(data.wszHostExe);
    view.setBigUint64(48, (buf as any)._f48 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f48)), true);
  }
  // 0x38: u64
  if (data?.qwHostVersion !== undefined) view.setBigUint64(56, BigInt(data.qwHostVersion), true);
  // 0x40: buffer
  if (data?.wszPlayerUserAgent !== undefined) {
    (buf as any)._f64 = util.pwstrToFfi(data.wszPlayerUserAgent);
    view.setBigUint64(64, (buf as any)._f64 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f64)), true);
  }
  return buf;
}

/**
 * Windows.Win32.Media.WindowsMediaFormat.WM_CLIENT_PROPERTIES (size: 8)
 */
export interface WM_CLIENT_PROPERTIES {
  /** u32 */
  dwIPAddress: number;
  /** u32 */
  dwPort: number;
}

export const sizeofWM_CLIENT_PROPERTIES = 8;

export function allocWM_CLIENT_PROPERTIES(data?: Partial<WM_CLIENT_PROPERTIES>): Uint8Array {
  const buf = new Uint8Array(sizeofWM_CLIENT_PROPERTIES);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.dwIPAddress !== undefined) view.setUint32(0, Number(data.dwIPAddress), true);
  // 0x04: u32
  if (data?.dwPort !== undefined) view.setUint32(4, Number(data.dwPort), true);
  return buf;
}

/**
 * Windows.Win32.Media.WindowsMediaFormat.WM_CLIENT_PROPERTIES_EX (size: 32)
 */
export interface WM_CLIENT_PROPERTIES_EX {
  /** u32 */
  cbSize: number;
  /** Windows.Win32.Foundation.PWSTR */
  pwszIPAddress: string | null;
  /** Windows.Win32.Foundation.PWSTR */
  pwszPort: string | null;
  /** Windows.Win32.Foundation.PWSTR */
  pwszDNSName: string | null;
}

export const sizeofWM_CLIENT_PROPERTIES_EX = 32;

export function allocWM_CLIENT_PROPERTIES_EX(data?: Partial<WM_CLIENT_PROPERTIES_EX>): Uint8Array {
  const buf = new Uint8Array(sizeofWM_CLIENT_PROPERTIES_EX);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.cbSize !== undefined) view.setUint32(0, Number(data.cbSize), true);
  // 0x04: pad4
  // 0x08: buffer
  if (data?.pwszIPAddress !== undefined) {
    (buf as any)._f8 = util.pwstrToFfi(data.pwszIPAddress);
    view.setBigUint64(8, (buf as any)._f8 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f8)), true);
  }
  // 0x10: buffer
  if (data?.pwszPort !== undefined) {
    (buf as any)._f16 = util.pwstrToFfi(data.pwszPort);
    view.setBigUint64(16, (buf as any)._f16 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f16)), true);
  }
  // 0x18: buffer
  if (data?.pwszDNSName !== undefined) {
    (buf as any)._f24 = util.pwstrToFfi(data.pwszDNSName);
    view.setBigUint64(24, (buf as any)._f24 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f24)), true);
  }
  return buf;
}

/**
 * Windows.Win32.Media.WindowsMediaFormat.WM_PORT_NUMBER_RANGE (size: 8)
 */
export interface WM_PORT_NUMBER_RANGE {
  /** u16 */
  wPortBegin: number;
  /** u16 */
  wPortEnd: number;
}

export const sizeofWM_PORT_NUMBER_RANGE = 8;

export function allocWM_PORT_NUMBER_RANGE(data?: Partial<WM_PORT_NUMBER_RANGE>): Uint8Array {
  const buf = new Uint8Array(sizeofWM_PORT_NUMBER_RANGE);
  const view = new DataView(buf.buffer);
  // 0x00: u16
  if (data?.wPortBegin !== undefined) view.setUint16(0, Number(data.wPortBegin), true);
  // 0x02: u16
  if (data?.wPortEnd !== undefined) view.setUint16(2, Number(data.wPortEnd), true);
  // 0x04: pad4
  return buf;
}

/**
 * Windows.Win32.Media.WindowsMediaFormat.WMT_BUFFER_SEGMENT (size: 16)
 */
export interface WMT_BUFFER_SEGMENT {
  /** Windows.Win32.Media.WindowsMediaFormat.INSSBuffer */
  pBuffer: Uint8Array | Deno.PointerValue | null;
  /** u32 */
  cbOffset: number;
  /** u32 */
  cbLength: number;
}

export const sizeofWMT_BUFFER_SEGMENT = 16;

export function allocWMT_BUFFER_SEGMENT(data?: Partial<WMT_BUFFER_SEGMENT>): Uint8Array {
  const buf = new Uint8Array(sizeofWMT_BUFFER_SEGMENT);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.pBuffer !== undefined) view.setBigUint64(0, data.pBuffer === null ? 0n : BigInt(util.toPointer(data.pBuffer)), true);
  // 0x08: u32
  if (data?.cbOffset !== undefined) view.setUint32(8, Number(data.cbOffset), true);
  // 0x0c: u32
  if (data?.cbLength !== undefined) view.setUint32(12, Number(data.cbLength), true);
  return buf;
}

/**
 * Windows.Win32.Media.WindowsMediaFormat.WMT_PAYLOAD_FRAGMENT (size: 16)
 */
export interface WMT_PAYLOAD_FRAGMENT {
  /** u32 */
  dwPayloadIndex: number;
  /** Windows.Win32.Media.WindowsMediaFormat.WMT_BUFFER_SEGMENT */
  segmentData: Uint8Array | Deno.PointerValue | null;
}

export const sizeofWMT_PAYLOAD_FRAGMENT = 16;

export function allocWMT_PAYLOAD_FRAGMENT(data?: Partial<WMT_PAYLOAD_FRAGMENT>): Uint8Array {
  const buf = new Uint8Array(sizeofWMT_PAYLOAD_FRAGMENT);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.dwPayloadIndex !== undefined) view.setUint32(0, Number(data.dwPayloadIndex), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.segmentData !== undefined) view.setBigUint64(8, data.segmentData === null ? 0n : BigInt(util.toPointer(data.segmentData)), true);
  return buf;
}

/**
 * Windows.Win32.Media.WindowsMediaFormat.WMT_FILESINK_DATA_UNIT (size: 40)
 */
export interface WMT_FILESINK_DATA_UNIT {
  /** Windows.Win32.Media.WindowsMediaFormat.WMT_BUFFER_SEGMENT */
  packetHeaderBuffer: Uint8Array | Deno.PointerValue | null;
  /** u32 */
  cPayloads: number;
  /** ptr */
  pPayloadHeaderBuffers: Deno.PointerValue | Uint8Array | null;
  /** u32 */
  cPayloadDataFragments: number;
  /** ptr */
  pPayloadDataFragments: Deno.PointerValue | Uint8Array | null;
}

export const sizeofWMT_FILESINK_DATA_UNIT = 40;

export function allocWMT_FILESINK_DATA_UNIT(data?: Partial<WMT_FILESINK_DATA_UNIT>): Uint8Array {
  const buf = new Uint8Array(sizeofWMT_FILESINK_DATA_UNIT);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.packetHeaderBuffer !== undefined) view.setBigUint64(0, data.packetHeaderBuffer === null ? 0n : BigInt(util.toPointer(data.packetHeaderBuffer)), true);
  // 0x08: u32
  if (data?.cPayloads !== undefined) view.setUint32(8, Number(data.cPayloads), true);
  // 0x0c: pad4
  // 0x10: pointer
  if (data?.pPayloadHeaderBuffers !== undefined) view.setBigUint64(16, data.pPayloadHeaderBuffers === null ? 0n : BigInt(util.toPointer(data.pPayloadHeaderBuffers)), true);
  // 0x18: u32
  if (data?.cPayloadDataFragments !== undefined) view.setUint32(24, Number(data.cPayloadDataFragments), true);
  // 0x1c: pad4
  // 0x20: pointer
  if (data?.pPayloadDataFragments !== undefined) view.setBigUint64(32, data.pPayloadDataFragments === null ? 0n : BigInt(util.toPointer(data.pPayloadDataFragments)), true);
  return buf;
}

/**
 * Windows.Win32.Media.WindowsMediaFormat.WMT_WEBSTREAM_FORMAT (size: 8)
 */
export interface WMT_WEBSTREAM_FORMAT {
  /** u16 */
  cbSize: number;
  /** u16 */
  cbSampleHeaderFixedData: number;
  /** u16 */
  wVersion: number;
  /** u16 */
  wReserved: number;
}

export const sizeofWMT_WEBSTREAM_FORMAT = 8;

export function allocWMT_WEBSTREAM_FORMAT(data?: Partial<WMT_WEBSTREAM_FORMAT>): Uint8Array {
  const buf = new Uint8Array(sizeofWMT_WEBSTREAM_FORMAT);
  const view = new DataView(buf.buffer);
  // 0x00: u16
  if (data?.cbSize !== undefined) view.setUint16(0, Number(data.cbSize), true);
  // 0x02: u16
  if (data?.cbSampleHeaderFixedData !== undefined) view.setUint16(2, Number(data.cbSampleHeaderFixedData), true);
  // 0x04: u16
  if (data?.wVersion !== undefined) view.setUint16(4, Number(data.wVersion), true);
  // 0x06: u16
  if (data?.wReserved !== undefined) view.setUint16(6, Number(data.wReserved), true);
  return buf;
}

/**
 * Windows.Win32.Media.WindowsMediaFormat.WMT_WEBSTREAM_SAMPLE_HEADER (size: 16)
 */
export interface WMT_WEBSTREAM_SAMPLE_HEADER {
  /** u16 */
  cbLength: number;
  /** u16 */
  wPart: number;
  /** u16 */
  cTotalParts: number;
  /** u16 */
  wSampleType: number;
  /** array */
  wszURL: Deno.PointerValue | null;
}

export const sizeofWMT_WEBSTREAM_SAMPLE_HEADER = 16;

export function allocWMT_WEBSTREAM_SAMPLE_HEADER(data?: Partial<WMT_WEBSTREAM_SAMPLE_HEADER>): Uint8Array {
  const buf = new Uint8Array(sizeofWMT_WEBSTREAM_SAMPLE_HEADER);
  const view = new DataView(buf.buffer);
  // 0x00: u16
  if (data?.cbLength !== undefined) view.setUint16(0, Number(data.cbLength), true);
  // 0x02: u16
  if (data?.wPart !== undefined) view.setUint16(2, Number(data.wPart), true);
  // 0x04: u16
  if (data?.cTotalParts !== undefined) view.setUint16(4, Number(data.cTotalParts), true);
  // 0x06: u16
  if (data?.wSampleType !== undefined) view.setUint16(6, Number(data.wSampleType), true);
  // 0x08: pointer
  if (data?.wszURL !== undefined) view.setBigUint64(8, data.wszURL === null ? 0n : BigInt(util.toPointer(data.wszURL)), true);
  return buf;
}

/**
 * Windows.Win32.Media.WindowsMediaFormat.WM_ADDRESS_ACCESSENTRY (size: 8)
 */
export interface WM_ADDRESS_ACCESSENTRY {
  /** u32 */
  dwIPAddress: number;
  /** u32 */
  dwMask: number;
}

export const sizeofWM_ADDRESS_ACCESSENTRY = 8;

export function allocWM_ADDRESS_ACCESSENTRY(data?: Partial<WM_ADDRESS_ACCESSENTRY>): Uint8Array {
  const buf = new Uint8Array(sizeofWM_ADDRESS_ACCESSENTRY);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.dwIPAddress !== undefined) view.setUint32(0, Number(data.dwIPAddress), true);
  // 0x04: u32
  if (data?.dwMask !== undefined) view.setUint32(4, Number(data.dwMask), true);
  return buf;
}

/**
 * Windows.Win32.Media.WindowsMediaFormat.WM_PICTURE (size: 40)
 */
export interface WM_PICTURE {
  /** Windows.Win32.Foundation.PWSTR */
  pwszMIMEType: string | null;
  /** u8 */
  bPictureType: number;
  /** Windows.Win32.Foundation.PWSTR */
  pwszDescription: string | null;
  /** u32 */
  dwDataLen: number;
  /** ptr */
  pbData: Deno.PointerValue | Uint8Array | null;
}

export const sizeofWM_PICTURE = 40;

export function allocWM_PICTURE(data?: Partial<WM_PICTURE>): Uint8Array {
  const buf = new Uint8Array(sizeofWM_PICTURE);
  const view = new DataView(buf.buffer);
  // 0x00: buffer
  if (data?.pwszMIMEType !== undefined) {
    (buf as any)._f0 = util.pwstrToFfi(data.pwszMIMEType);
    view.setBigUint64(0, (buf as any)._f0 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f0)), true);
  }
  // 0x08: u8
  if (data?.bPictureType !== undefined) view.setUint8(8, Number(data.bPictureType));
  // 0x09: pad7
  // 0x10: buffer
  if (data?.pwszDescription !== undefined) {
    (buf as any)._f16 = util.pwstrToFfi(data.pwszDescription);
    view.setBigUint64(16, (buf as any)._f16 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f16)), true);
  }
  // 0x18: u32
  if (data?.dwDataLen !== undefined) view.setUint32(24, Number(data.dwDataLen), true);
  // 0x1c: pad4
  // 0x20: pointer
  if (data?.pbData !== undefined) view.setBigUint64(32, data.pbData === null ? 0n : BigInt(util.toPointer(data.pbData)), true);
  return buf;
}

/**
 * Windows.Win32.Media.WindowsMediaFormat.WM_SYNCHRONISED_LYRICS (size: 32)
 */
export interface WM_SYNCHRONISED_LYRICS {
  /** u8 */
  bTimeStampFormat: number;
  /** u8 */
  bContentType: number;
  /** Windows.Win32.Foundation.PWSTR */
  pwszContentDescriptor: string | null;
  /** u32 */
  dwLyricsLen: number;
  /** ptr */
  pbLyrics: Deno.PointerValue | Uint8Array | null;
}

export const sizeofWM_SYNCHRONISED_LYRICS = 32;

export function allocWM_SYNCHRONISED_LYRICS(data?: Partial<WM_SYNCHRONISED_LYRICS>): Uint8Array {
  const buf = new Uint8Array(sizeofWM_SYNCHRONISED_LYRICS);
  const view = new DataView(buf.buffer);
  // 0x00: u8
  if (data?.bTimeStampFormat !== undefined) view.setUint8(0, Number(data.bTimeStampFormat));
  // 0x01: u8
  if (data?.bContentType !== undefined) view.setUint8(1, Number(data.bContentType));
  // 0x02: pad6
  // 0x08: buffer
  if (data?.pwszContentDescriptor !== undefined) {
    (buf as any)._f8 = util.pwstrToFfi(data.pwszContentDescriptor);
    view.setBigUint64(8, (buf as any)._f8 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f8)), true);
  }
  // 0x10: u32
  if (data?.dwLyricsLen !== undefined) view.setUint32(16, Number(data.dwLyricsLen), true);
  // 0x14: pad4
  // 0x18: pointer
  if (data?.pbLyrics !== undefined) view.setBigUint64(24, data.pbLyrics === null ? 0n : BigInt(util.toPointer(data.pbLyrics)), true);
  return buf;
}

/**
 * Windows.Win32.Media.WindowsMediaFormat.WM_USER_WEB_URL (size: 16)
 */
export interface WM_USER_WEB_URL {
  /** Windows.Win32.Foundation.PWSTR */
  pwszDescription: string | null;
  /** Windows.Win32.Foundation.PWSTR */
  pwszURL: string | null;
}

export const sizeofWM_USER_WEB_URL = 16;

export function allocWM_USER_WEB_URL(data?: Partial<WM_USER_WEB_URL>): Uint8Array {
  const buf = new Uint8Array(sizeofWM_USER_WEB_URL);
  const view = new DataView(buf.buffer);
  // 0x00: buffer
  if (data?.pwszDescription !== undefined) {
    (buf as any)._f0 = util.pwstrToFfi(data.pwszDescription);
    view.setBigUint64(0, (buf as any)._f0 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f0)), true);
  }
  // 0x08: buffer
  if (data?.pwszURL !== undefined) {
    (buf as any)._f8 = util.pwstrToFfi(data.pwszURL);
    view.setBigUint64(8, (buf as any)._f8 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f8)), true);
  }
  return buf;
}

/**
 * Windows.Win32.Media.WindowsMediaFormat.WM_USER_TEXT (size: 16)
 */
export interface WM_USER_TEXT {
  /** Windows.Win32.Foundation.PWSTR */
  pwszDescription: string | null;
  /** Windows.Win32.Foundation.PWSTR */
  pwszText: string | null;
}

export const sizeofWM_USER_TEXT = 16;

export function allocWM_USER_TEXT(data?: Partial<WM_USER_TEXT>): Uint8Array {
  const buf = new Uint8Array(sizeofWM_USER_TEXT);
  const view = new DataView(buf.buffer);
  // 0x00: buffer
  if (data?.pwszDescription !== undefined) {
    (buf as any)._f0 = util.pwstrToFfi(data.pwszDescription);
    view.setBigUint64(0, (buf as any)._f0 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f0)), true);
  }
  // 0x08: buffer
  if (data?.pwszText !== undefined) {
    (buf as any)._f8 = util.pwstrToFfi(data.pwszText);
    view.setBigUint64(8, (buf as any)._f8 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f8)), true);
  }
  return buf;
}

/**
 * Windows.Win32.Media.WindowsMediaFormat.WM_LEAKY_BUCKET_PAIR (size: 8)
 */
export interface WM_LEAKY_BUCKET_PAIR {
  /** u32 */
  dwBitrate: number;
  /** u32 */
  msBufferWindow: number;
}

export const sizeofWM_LEAKY_BUCKET_PAIR = 8;

export function allocWM_LEAKY_BUCKET_PAIR(data?: Partial<WM_LEAKY_BUCKET_PAIR>): Uint8Array {
  const buf = new Uint8Array(sizeofWM_LEAKY_BUCKET_PAIR);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.dwBitrate !== undefined) view.setUint32(0, Number(data.dwBitrate), true);
  // 0x04: u32
  if (data?.msBufferWindow !== undefined) view.setUint32(4, Number(data.msBufferWindow), true);
  return buf;
}

/**
 * Windows.Win32.Media.WindowsMediaFormat.WM_STREAM_TYPE_INFO (size: 16)
 */
export interface WM_STREAM_TYPE_INFO {
  /** System.Guid */
  guidMajorType: Uint8Array | Deno.PointerValue | null;
  /** u32 */
  cbFormat: number;
}

export const sizeofWM_STREAM_TYPE_INFO = 16;

export function allocWM_STREAM_TYPE_INFO(data?: Partial<WM_STREAM_TYPE_INFO>): Uint8Array {
  const buf = new Uint8Array(sizeofWM_STREAM_TYPE_INFO);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.guidMajorType !== undefined) view.setBigUint64(0, data.guidMajorType === null ? 0n : BigInt(util.toPointer(data.guidMajorType)), true);
  // 0x08: u32
  if (data?.cbFormat !== undefined) view.setUint32(8, Number(data.cbFormat), true);
  // 0x0c: pad4
  return buf;
}

/**
 * Windows.Win32.Media.WindowsMediaFormat.WMT_WATERMARK_ENTRY (size: 32)
 */
export interface WMT_WATERMARK_ENTRY {
  /** Windows.Win32.Media.WindowsMediaFormat.WMT_WATERMARK_ENTRY_TYPE */
  wmetType: WMT_WATERMARK_ENTRY_TYPE;
  /** System.Guid */
  clsid: Uint8Array | Deno.PointerValue | null;
  /** u32 */
  cbDisplayName: number;
  /** Windows.Win32.Foundation.PWSTR */
  pwszDisplayName: string | null;
}

export const sizeofWMT_WATERMARK_ENTRY = 32;

export function allocWMT_WATERMARK_ENTRY(data?: Partial<WMT_WATERMARK_ENTRY>): Uint8Array {
  const buf = new Uint8Array(sizeofWMT_WATERMARK_ENTRY);
  const view = new DataView(buf.buffer);
  // 0x00: i32
  if (data?.wmetType !== undefined) view.setInt32(0, Number(data.wmetType), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.clsid !== undefined) view.setBigUint64(8, data.clsid === null ? 0n : BigInt(util.toPointer(data.clsid)), true);
  // 0x10: u32
  if (data?.cbDisplayName !== undefined) view.setUint32(16, Number(data.cbDisplayName), true);
  // 0x14: pad4
  // 0x18: buffer
  if (data?.pwszDisplayName !== undefined) {
    (buf as any)._f24 = util.pwstrToFfi(data.pwszDisplayName);
    view.setBigUint64(24, (buf as any)._f24 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f24)), true);
  }
  return buf;
}

/**
 * Windows.Win32.Media.WindowsMediaFormat.WMT_VIDEOIMAGE_SAMPLE (size: 88)
 */
export interface WMT_VIDEOIMAGE_SAMPLE {
  /** u32 */
  dwMagic: number;
  /** u32 */
  cbStruct: number;
  /** u32 */
  dwControlFlags: number;
  /** u32 */
  dwInputFlagsCur: number;
  /** i32 */
  lCurMotionXtoX: number;
  /** i32 */
  lCurMotionYtoX: number;
  /** i32 */
  lCurMotionXoffset: number;
  /** i32 */
  lCurMotionXtoY: number;
  /** i32 */
  lCurMotionYtoY: number;
  /** i32 */
  lCurMotionYoffset: number;
  /** i32 */
  lCurBlendCoef1: number;
  /** i32 */
  lCurBlendCoef2: number;
  /** u32 */
  dwInputFlagsPrev: number;
  /** i32 */
  lPrevMotionXtoX: number;
  /** i32 */
  lPrevMotionYtoX: number;
  /** i32 */
  lPrevMotionXoffset: number;
  /** i32 */
  lPrevMotionXtoY: number;
  /** i32 */
  lPrevMotionYtoY: number;
  /** i32 */
  lPrevMotionYoffset: number;
  /** i32 */
  lPrevBlendCoef1: number;
  /** i32 */
  lPrevBlendCoef2: number;
}

export const sizeofWMT_VIDEOIMAGE_SAMPLE = 88;

export function allocWMT_VIDEOIMAGE_SAMPLE(data?: Partial<WMT_VIDEOIMAGE_SAMPLE>): Uint8Array {
  const buf = new Uint8Array(sizeofWMT_VIDEOIMAGE_SAMPLE);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.dwMagic !== undefined) view.setUint32(0, Number(data.dwMagic), true);
  // 0x04: u32
  if (data?.cbStruct !== undefined) view.setUint32(4, Number(data.cbStruct), true);
  // 0x08: u32
  if (data?.dwControlFlags !== undefined) view.setUint32(8, Number(data.dwControlFlags), true);
  // 0x0c: u32
  if (data?.dwInputFlagsCur !== undefined) view.setUint32(12, Number(data.dwInputFlagsCur), true);
  // 0x10: i32
  if (data?.lCurMotionXtoX !== undefined) view.setInt32(16, Number(data.lCurMotionXtoX), true);
  // 0x14: i32
  if (data?.lCurMotionYtoX !== undefined) view.setInt32(20, Number(data.lCurMotionYtoX), true);
  // 0x18: i32
  if (data?.lCurMotionXoffset !== undefined) view.setInt32(24, Number(data.lCurMotionXoffset), true);
  // 0x1c: i32
  if (data?.lCurMotionXtoY !== undefined) view.setInt32(28, Number(data.lCurMotionXtoY), true);
  // 0x20: i32
  if (data?.lCurMotionYtoY !== undefined) view.setInt32(32, Number(data.lCurMotionYtoY), true);
  // 0x24: i32
  if (data?.lCurMotionYoffset !== undefined) view.setInt32(36, Number(data.lCurMotionYoffset), true);
  // 0x28: i32
  if (data?.lCurBlendCoef1 !== undefined) view.setInt32(40, Number(data.lCurBlendCoef1), true);
  // 0x2c: i32
  if (data?.lCurBlendCoef2 !== undefined) view.setInt32(44, Number(data.lCurBlendCoef2), true);
  // 0x30: u32
  if (data?.dwInputFlagsPrev !== undefined) view.setUint32(48, Number(data.dwInputFlagsPrev), true);
  // 0x34: i32
  if (data?.lPrevMotionXtoX !== undefined) view.setInt32(52, Number(data.lPrevMotionXtoX), true);
  // 0x38: i32
  if (data?.lPrevMotionYtoX !== undefined) view.setInt32(56, Number(data.lPrevMotionYtoX), true);
  // 0x3c: i32
  if (data?.lPrevMotionXoffset !== undefined) view.setInt32(60, Number(data.lPrevMotionXoffset), true);
  // 0x40: i32
  if (data?.lPrevMotionXtoY !== undefined) view.setInt32(64, Number(data.lPrevMotionXtoY), true);
  // 0x44: i32
  if (data?.lPrevMotionYtoY !== undefined) view.setInt32(68, Number(data.lPrevMotionYtoY), true);
  // 0x48: i32
  if (data?.lPrevMotionYoffset !== undefined) view.setInt32(72, Number(data.lPrevMotionYoffset), true);
  // 0x4c: i32
  if (data?.lPrevBlendCoef1 !== undefined) view.setInt32(76, Number(data.lPrevBlendCoef1), true);
  // 0x50: i32
  if (data?.lPrevBlendCoef2 !== undefined) view.setInt32(80, Number(data.lPrevBlendCoef2), true);
  // 0x54: pad4
  return buf;
}

/**
 * Windows.Win32.Media.WindowsMediaFormat.WMT_VIDEOIMAGE_SAMPLE2 (size: 112)
 */
export interface WMT_VIDEOIMAGE_SAMPLE2 {
  /** u32 */
  dwMagic: number;
  /** u32 */
  dwStructSize: number;
  /** u32 */
  dwControlFlags: number;
  /** u32 */
  dwViewportWidth: number;
  /** u32 */
  dwViewportHeight: number;
  /** u32 */
  dwCurrImageWidth: number;
  /** u32 */
  dwCurrImageHeight: number;
  /** f32 */
  fCurrRegionX0: number;
  /** f32 */
  fCurrRegionY0: number;
  /** f32 */
  fCurrRegionWidth: number;
  /** f32 */
  fCurrRegionHeight: number;
  /** f32 */
  fCurrBlendCoef: number;
  /** u32 */
  dwPrevImageWidth: number;
  /** u32 */
  dwPrevImageHeight: number;
  /** f32 */
  fPrevRegionX0: number;
  /** f32 */
  fPrevRegionY0: number;
  /** f32 */
  fPrevRegionWidth: number;
  /** f32 */
  fPrevRegionHeight: number;
  /** f32 */
  fPrevBlendCoef: number;
  /** u32 */
  dwEffectType: number;
  /** u32 */
  dwNumEffectParas: number;
  /** f32 */
  fEffectPara0: number;
  /** f32 */
  fEffectPara1: number;
  /** f32 */
  fEffectPara2: number;
  /** f32 */
  fEffectPara3: number;
  /** f32 */
  fEffectPara4: number;
  /** Windows.Win32.Foundation.BOOL */
  bKeepPrevImage: boolean;
}

export const sizeofWMT_VIDEOIMAGE_SAMPLE2 = 112;

export function allocWMT_VIDEOIMAGE_SAMPLE2(data?: Partial<WMT_VIDEOIMAGE_SAMPLE2>): Uint8Array {
  const buf = new Uint8Array(sizeofWMT_VIDEOIMAGE_SAMPLE2);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.dwMagic !== undefined) view.setUint32(0, Number(data.dwMagic), true);
  // 0x04: u32
  if (data?.dwStructSize !== undefined) view.setUint32(4, Number(data.dwStructSize), true);
  // 0x08: u32
  if (data?.dwControlFlags !== undefined) view.setUint32(8, Number(data.dwControlFlags), true);
  // 0x0c: u32
  if (data?.dwViewportWidth !== undefined) view.setUint32(12, Number(data.dwViewportWidth), true);
  // 0x10: u32
  if (data?.dwViewportHeight !== undefined) view.setUint32(16, Number(data.dwViewportHeight), true);
  // 0x14: u32
  if (data?.dwCurrImageWidth !== undefined) view.setUint32(20, Number(data.dwCurrImageWidth), true);
  // 0x18: u32
  if (data?.dwCurrImageHeight !== undefined) view.setUint32(24, Number(data.dwCurrImageHeight), true);
  // 0x1c: f32
  if (data?.fCurrRegionX0 !== undefined) view.setFloat32(28, Number(data.fCurrRegionX0), true);
  // 0x20: f32
  if (data?.fCurrRegionY0 !== undefined) view.setFloat32(32, Number(data.fCurrRegionY0), true);
  // 0x24: f32
  if (data?.fCurrRegionWidth !== undefined) view.setFloat32(36, Number(data.fCurrRegionWidth), true);
  // 0x28: f32
  if (data?.fCurrRegionHeight !== undefined) view.setFloat32(40, Number(data.fCurrRegionHeight), true);
  // 0x2c: f32
  if (data?.fCurrBlendCoef !== undefined) view.setFloat32(44, Number(data.fCurrBlendCoef), true);
  // 0x30: u32
  if (data?.dwPrevImageWidth !== undefined) view.setUint32(48, Number(data.dwPrevImageWidth), true);
  // 0x34: u32
  if (data?.dwPrevImageHeight !== undefined) view.setUint32(52, Number(data.dwPrevImageHeight), true);
  // 0x38: f32
  if (data?.fPrevRegionX0 !== undefined) view.setFloat32(56, Number(data.fPrevRegionX0), true);
  // 0x3c: f32
  if (data?.fPrevRegionY0 !== undefined) view.setFloat32(60, Number(data.fPrevRegionY0), true);
  // 0x40: f32
  if (data?.fPrevRegionWidth !== undefined) view.setFloat32(64, Number(data.fPrevRegionWidth), true);
  // 0x44: f32
  if (data?.fPrevRegionHeight !== undefined) view.setFloat32(68, Number(data.fPrevRegionHeight), true);
  // 0x48: f32
  if (data?.fPrevBlendCoef !== undefined) view.setFloat32(72, Number(data.fPrevBlendCoef), true);
  // 0x4c: u32
  if (data?.dwEffectType !== undefined) view.setUint32(76, Number(data.dwEffectType), true);
  // 0x50: u32
  if (data?.dwNumEffectParas !== undefined) view.setUint32(80, Number(data.dwNumEffectParas), true);
  // 0x54: f32
  if (data?.fEffectPara0 !== undefined) view.setFloat32(84, Number(data.fEffectPara0), true);
  // 0x58: f32
  if (data?.fEffectPara1 !== undefined) view.setFloat32(88, Number(data.fEffectPara1), true);
  // 0x5c: f32
  if (data?.fEffectPara2 !== undefined) view.setFloat32(92, Number(data.fEffectPara2), true);
  // 0x60: f32
  if (data?.fEffectPara3 !== undefined) view.setFloat32(96, Number(data.fEffectPara3), true);
  // 0x64: f32
  if (data?.fEffectPara4 !== undefined) view.setFloat32(100, Number(data.fEffectPara4), true);
  // 0x68: i32
  if (data?.bKeepPrevImage !== undefined) view.setInt32(104, Number(data.bKeepPrevImage), true);
  // 0x6c: pad4
  return buf;
}

/**
 * Windows.Win32.Media.WindowsMediaFormat.WM_MEDIA_TYPE (size: 64)
 */
export interface WM_MEDIA_TYPE {
  /** System.Guid */
  majortype: Uint8Array | Deno.PointerValue | null;
  /** System.Guid */
  subtype: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Foundation.BOOL */
  bFixedSizeSamples: boolean;
  /** Windows.Win32.Foundation.BOOL */
  bTemporalCompression: boolean;
  /** u32 */
  lSampleSize: number;
  /** System.Guid */
  formattype: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.System.Com.IUnknown */
  pUnk: Uint8Array | Deno.PointerValue | null;
  /** u32 */
  cbFormat: number;
  /** ptr */
  pbFormat: Deno.PointerValue | Uint8Array | null;
}

export const sizeofWM_MEDIA_TYPE = 64;

export function allocWM_MEDIA_TYPE(data?: Partial<WM_MEDIA_TYPE>): Uint8Array {
  const buf = new Uint8Array(sizeofWM_MEDIA_TYPE);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.majortype !== undefined) view.setBigUint64(0, data.majortype === null ? 0n : BigInt(util.toPointer(data.majortype)), true);
  // 0x08: pointer
  if (data?.subtype !== undefined) view.setBigUint64(8, data.subtype === null ? 0n : BigInt(util.toPointer(data.subtype)), true);
  // 0x10: i32
  if (data?.bFixedSizeSamples !== undefined) view.setInt32(16, Number(data.bFixedSizeSamples), true);
  // 0x14: i32
  if (data?.bTemporalCompression !== undefined) view.setInt32(20, Number(data.bTemporalCompression), true);
  // 0x18: u32
  if (data?.lSampleSize !== undefined) view.setUint32(24, Number(data.lSampleSize), true);
  // 0x1c: pad4
  // 0x20: pointer
  if (data?.formattype !== undefined) view.setBigUint64(32, data.formattype === null ? 0n : BigInt(util.toPointer(data.formattype)), true);
  // 0x28: pointer
  if (data?.pUnk !== undefined) view.setBigUint64(40, data.pUnk === null ? 0n : BigInt(util.toPointer(data.pUnk)), true);
  // 0x30: u32
  if (data?.cbFormat !== undefined) view.setUint32(48, Number(data.cbFormat), true);
  // 0x34: pad4
  // 0x38: pointer
  if (data?.pbFormat !== undefined) view.setBigUint64(56, data.pbFormat === null ? 0n : BigInt(util.toPointer(data.pbFormat)), true);
  return buf;
}

/**
 * Windows.Win32.Foundation.RECT (size: 16)
 */
export interface RECT {
  /** i32 */
  left: number;
  /** i32 */
  top: number;
  /** i32 */
  right: number;
  /** i32 */
  bottom: number;
}

export const sizeofRECT = 16;

export function allocRECT(data?: Partial<RECT>): Uint8Array {
  const buf = new Uint8Array(sizeofRECT);
  const view = new DataView(buf.buffer);
  // 0x00: i32
  if (data?.left !== undefined) view.setInt32(0, Number(data.left), true);
  // 0x04: i32
  if (data?.top !== undefined) view.setInt32(4, Number(data.top), true);
  // 0x08: i32
  if (data?.right !== undefined) view.setInt32(8, Number(data.right), true);
  // 0x0c: i32
  if (data?.bottom !== undefined) view.setInt32(12, Number(data.bottom), true);
  return buf;
}

/**
 * Windows.Win32.Graphics.Gdi.BITMAPINFOHEADER (size: 40)
 */
export interface BITMAPINFOHEADER {
  /** u32 */
  biSize: number;
  /** i32 */
  biWidth: number;
  /** i32 */
  biHeight: number;
  /** u16 */
  biPlanes: number;
  /** u16 */
  biBitCount: number;
  /** u32 */
  biCompression: number;
  /** u32 */
  biSizeImage: number;
  /** i32 */
  biXPelsPerMeter: number;
  /** i32 */
  biYPelsPerMeter: number;
  /** u32 */
  biClrUsed: number;
  /** u32 */
  biClrImportant: number;
}

export const sizeofBITMAPINFOHEADER = 40;

export function allocBITMAPINFOHEADER(data?: Partial<BITMAPINFOHEADER>): Uint8Array {
  const buf = new Uint8Array(sizeofBITMAPINFOHEADER);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.biSize !== undefined) view.setUint32(0, Number(data.biSize), true);
  // 0x04: i32
  if (data?.biWidth !== undefined) view.setInt32(4, Number(data.biWidth), true);
  // 0x08: i32
  if (data?.biHeight !== undefined) view.setInt32(8, Number(data.biHeight), true);
  // 0x0c: u16
  if (data?.biPlanes !== undefined) view.setUint16(12, Number(data.biPlanes), true);
  // 0x0e: u16
  if (data?.biBitCount !== undefined) view.setUint16(14, Number(data.biBitCount), true);
  // 0x10: u32
  if (data?.biCompression !== undefined) view.setUint32(16, Number(data.biCompression), true);
  // 0x14: u32
  if (data?.biSizeImage !== undefined) view.setUint32(20, Number(data.biSizeImage), true);
  // 0x18: i32
  if (data?.biXPelsPerMeter !== undefined) view.setInt32(24, Number(data.biXPelsPerMeter), true);
  // 0x1c: i32
  if (data?.biYPelsPerMeter !== undefined) view.setInt32(28, Number(data.biYPelsPerMeter), true);
  // 0x20: u32
  if (data?.biClrUsed !== undefined) view.setUint32(32, Number(data.biClrUsed), true);
  // 0x24: u32
  if (data?.biClrImportant !== undefined) view.setUint32(36, Number(data.biClrImportant), true);
  return buf;
}

/**
 * Windows.Win32.Media.WindowsMediaFormat.WMVIDEOINFOHEADER (size: 40)
 */
export interface WMVIDEOINFOHEADER {
  /** Windows.Win32.Foundation.RECT */
  rcSource: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Foundation.RECT */
  rcTarget: Uint8Array | Deno.PointerValue | null;
  /** u32 */
  dwBitRate: number;
  /** u32 */
  dwBitErrorRate: number;
  /** i64 */
  AvgTimePerFrame: Deno.PointerValue;
  /** Windows.Win32.Graphics.Gdi.BITMAPINFOHEADER */
  bmiHeader: Uint8Array | Deno.PointerValue | null;
}

export const sizeofWMVIDEOINFOHEADER = 40;

export function allocWMVIDEOINFOHEADER(data?: Partial<WMVIDEOINFOHEADER>): Uint8Array {
  const buf = new Uint8Array(sizeofWMVIDEOINFOHEADER);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.rcSource !== undefined) view.setBigUint64(0, data.rcSource === null ? 0n : BigInt(util.toPointer(data.rcSource)), true);
  // 0x08: pointer
  if (data?.rcTarget !== undefined) view.setBigUint64(8, data.rcTarget === null ? 0n : BigInt(util.toPointer(data.rcTarget)), true);
  // 0x10: u32
  if (data?.dwBitRate !== undefined) view.setUint32(16, Number(data.dwBitRate), true);
  // 0x14: u32
  if (data?.dwBitErrorRate !== undefined) view.setUint32(20, Number(data.dwBitErrorRate), true);
  // 0x18: i64
  if (data?.AvgTimePerFrame !== undefined) view.setBigInt64(24, BigInt(data.AvgTimePerFrame), true);
  // 0x20: pointer
  if (data?.bmiHeader !== undefined) view.setBigUint64(32, data.bmiHeader === null ? 0n : BigInt(util.toPointer(data.bmiHeader)), true);
  return buf;
}

/**
 * Windows.Win32.Media.WindowsMediaFormat.WMVIDEOINFOHEADER2 (size: 64)
 */
export interface WMVIDEOINFOHEADER2 {
  /** Windows.Win32.Foundation.RECT */
  rcSource: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Foundation.RECT */
  rcTarget: Uint8Array | Deno.PointerValue | null;
  /** u32 */
  dwBitRate: number;
  /** u32 */
  dwBitErrorRate: number;
  /** i64 */
  AvgTimePerFrame: Deno.PointerValue;
  /** u32 */
  dwInterlaceFlags: number;
  /** u32 */
  dwCopyProtectFlags: number;
  /** u32 */
  dwPictAspectRatioX: number;
  /** u32 */
  dwPictAspectRatioY: number;
  /** u32 */
  dwReserved1: number;
  /** u32 */
  dwReserved2: number;
  /** Windows.Win32.Graphics.Gdi.BITMAPINFOHEADER */
  bmiHeader: Uint8Array | Deno.PointerValue | null;
}

export const sizeofWMVIDEOINFOHEADER2 = 64;

export function allocWMVIDEOINFOHEADER2(data?: Partial<WMVIDEOINFOHEADER2>): Uint8Array {
  const buf = new Uint8Array(sizeofWMVIDEOINFOHEADER2);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.rcSource !== undefined) view.setBigUint64(0, data.rcSource === null ? 0n : BigInt(util.toPointer(data.rcSource)), true);
  // 0x08: pointer
  if (data?.rcTarget !== undefined) view.setBigUint64(8, data.rcTarget === null ? 0n : BigInt(util.toPointer(data.rcTarget)), true);
  // 0x10: u32
  if (data?.dwBitRate !== undefined) view.setUint32(16, Number(data.dwBitRate), true);
  // 0x14: u32
  if (data?.dwBitErrorRate !== undefined) view.setUint32(20, Number(data.dwBitErrorRate), true);
  // 0x18: i64
  if (data?.AvgTimePerFrame !== undefined) view.setBigInt64(24, BigInt(data.AvgTimePerFrame), true);
  // 0x20: u32
  if (data?.dwInterlaceFlags !== undefined) view.setUint32(32, Number(data.dwInterlaceFlags), true);
  // 0x24: u32
  if (data?.dwCopyProtectFlags !== undefined) view.setUint32(36, Number(data.dwCopyProtectFlags), true);
  // 0x28: u32
  if (data?.dwPictAspectRatioX !== undefined) view.setUint32(40, Number(data.dwPictAspectRatioX), true);
  // 0x2c: u32
  if (data?.dwPictAspectRatioY !== undefined) view.setUint32(44, Number(data.dwPictAspectRatioY), true);
  // 0x30: u32
  if (data?.dwReserved1 !== undefined) view.setUint32(48, Number(data.dwReserved1), true);
  // 0x34: u32
  if (data?.dwReserved2 !== undefined) view.setUint32(52, Number(data.dwReserved2), true);
  // 0x38: pointer
  if (data?.bmiHeader !== undefined) view.setBigUint64(56, data.bmiHeader === null ? 0n : BigInt(util.toPointer(data.bmiHeader)), true);
  return buf;
}

/**
 * Windows.Win32.Media.WindowsMediaFormat.WMMPEG2VIDEOINFO (size: 40)
 */
export interface WMMPEG2VIDEOINFO {
  /** Windows.Win32.Media.WindowsMediaFormat.WMVIDEOINFOHEADER2 */
  hdr: Uint8Array | Deno.PointerValue | null;
  /** u32 */
  dwStartTimeCode: number;
  /** u32 */
  cbSequenceHeader: number;
  /** u32 */
  dwProfile: number;
  /** u32 */
  dwLevel: number;
  /** u32 */
  dwFlags: number;
  /** array */
  dwSequenceHeader: Deno.PointerValue | null;
}

export const sizeofWMMPEG2VIDEOINFO = 40;

export function allocWMMPEG2VIDEOINFO(data?: Partial<WMMPEG2VIDEOINFO>): Uint8Array {
  const buf = new Uint8Array(sizeofWMMPEG2VIDEOINFO);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.hdr !== undefined) view.setBigUint64(0, data.hdr === null ? 0n : BigInt(util.toPointer(data.hdr)), true);
  // 0x08: u32
  if (data?.dwStartTimeCode !== undefined) view.setUint32(8, Number(data.dwStartTimeCode), true);
  // 0x0c: u32
  if (data?.cbSequenceHeader !== undefined) view.setUint32(12, Number(data.cbSequenceHeader), true);
  // 0x10: u32
  if (data?.dwProfile !== undefined) view.setUint32(16, Number(data.dwProfile), true);
  // 0x14: u32
  if (data?.dwLevel !== undefined) view.setUint32(20, Number(data.dwLevel), true);
  // 0x18: u32
  if (data?.dwFlags !== undefined) view.setUint32(24, Number(data.dwFlags), true);
  // 0x1c: pad4
  // 0x20: pointer
  if (data?.dwSequenceHeader !== undefined) view.setBigUint64(32, data.dwSequenceHeader === null ? 0n : BigInt(util.toPointer(data.dwSequenceHeader)), true);
  return buf;
}

/**
 * Windows.Win32.Media.WindowsMediaFormat.WMSCRIPTFORMAT (size: 8)
 */
export interface WMSCRIPTFORMAT {
  /** System.Guid */
  scriptType: Uint8Array | Deno.PointerValue | null;
}

export const sizeofWMSCRIPTFORMAT = 8;

export function allocWMSCRIPTFORMAT(data?: Partial<WMSCRIPTFORMAT>): Uint8Array {
  const buf = new Uint8Array(sizeofWMSCRIPTFORMAT);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.scriptType !== undefined) view.setBigUint64(0, data.scriptType === null ? 0n : BigInt(util.toPointer(data.scriptType)), true);
  return buf;
}

/**
 * Windows.Win32.Media.WindowsMediaFormat.WMT_COLORSPACEINFO_EXTENSION_DATA (size: 8)
 */
export interface WMT_COLORSPACEINFO_EXTENSION_DATA {
  /** u8 */
  ucColorPrimaries: number;
  /** u8 */
  ucColorTransferChar: number;
  /** u8 */
  ucColorMatrixCoef: number;
}

export const sizeofWMT_COLORSPACEINFO_EXTENSION_DATA = 8;

export function allocWMT_COLORSPACEINFO_EXTENSION_DATA(data?: Partial<WMT_COLORSPACEINFO_EXTENSION_DATA>): Uint8Array {
  const buf = new Uint8Array(sizeofWMT_COLORSPACEINFO_EXTENSION_DATA);
  const view = new DataView(buf.buffer);
  // 0x00: u8
  if (data?.ucColorPrimaries !== undefined) view.setUint8(0, Number(data.ucColorPrimaries));
  // 0x01: u8
  if (data?.ucColorTransferChar !== undefined) view.setUint8(1, Number(data.ucColorTransferChar));
  // 0x02: u8
  if (data?.ucColorMatrixCoef !== undefined) view.setUint8(2, Number(data.ucColorMatrixCoef));
  // 0x03: pad5
  return buf;
}

/**
 * Windows.Win32.Media.WindowsMediaFormat.WMT_TIMECODE_EXTENSION_DATA (size: 16)
 */
export interface WMT_TIMECODE_EXTENSION_DATA {
  /** u16 */
  wRange: number;
  /** u32 */
  dwTimecode: number;
  /** u32 */
  dwUserbits: number;
  /** u32 */
  dwAmFlags: number;
}

export const sizeofWMT_TIMECODE_EXTENSION_DATA = 16;

export function allocWMT_TIMECODE_EXTENSION_DATA(data?: Partial<WMT_TIMECODE_EXTENSION_DATA>): Uint8Array {
  const buf = new Uint8Array(sizeofWMT_TIMECODE_EXTENSION_DATA);
  const view = new DataView(buf.buffer);
  // 0x00: u16
  if (data?.wRange !== undefined) view.setUint16(0, Number(data.wRange), true);
  // 0x02: u32
  if (data?.dwTimecode !== undefined) view.setUint32(2, Number(data.dwTimecode), true);
  // 0x06: u32
  if (data?.dwUserbits !== undefined) view.setUint32(6, Number(data.dwUserbits), true);
  // 0x0a: u32
  if (data?.dwAmFlags !== undefined) view.setUint32(10, Number(data.dwAmFlags), true);
  // 0x0e: pad2
  return buf;
}

/**
 * Windows.Win32.Media.WindowsMediaFormat.DRM_VAL16 (size: 8)
 */
export interface DRM_VAL16 {
  /** array */
  val: Deno.PointerValue | null;
}

export const sizeofDRM_VAL16 = 8;

export function allocDRM_VAL16(data?: Partial<DRM_VAL16>): Uint8Array {
  const buf = new Uint8Array(sizeofDRM_VAL16);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.val !== undefined) view.setBigUint64(0, data.val === null ? 0n : BigInt(util.toPointer(data.val)), true);
  return buf;
}

/**
 * Windows.Win32.Media.WindowsMediaFormat.WMDRM_IMPORT_INIT_STRUCT (size: 32)
 */
export interface WMDRM_IMPORT_INIT_STRUCT {
  /** u32 */
  dwVersion: number;
  /** u32 */
  cbEncryptedSessionKeyMessage: number;
  /** ptr */
  pbEncryptedSessionKeyMessage: Deno.PointerValue | Uint8Array | null;
  /** u32 */
  cbEncryptedKeyMessage: number;
  /** ptr */
  pbEncryptedKeyMessage: Deno.PointerValue | Uint8Array | null;
}

export const sizeofWMDRM_IMPORT_INIT_STRUCT = 32;

export function allocWMDRM_IMPORT_INIT_STRUCT(data?: Partial<WMDRM_IMPORT_INIT_STRUCT>): Uint8Array {
  const buf = new Uint8Array(sizeofWMDRM_IMPORT_INIT_STRUCT);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.dwVersion !== undefined) view.setUint32(0, Number(data.dwVersion), true);
  // 0x04: u32
  if (data?.cbEncryptedSessionKeyMessage !== undefined) view.setUint32(4, Number(data.cbEncryptedSessionKeyMessage), true);
  // 0x08: pointer
  if (data?.pbEncryptedSessionKeyMessage !== undefined) view.setBigUint64(8, data.pbEncryptedSessionKeyMessage === null ? 0n : BigInt(util.toPointer(data.pbEncryptedSessionKeyMessage)), true);
  // 0x10: u32
  if (data?.cbEncryptedKeyMessage !== undefined) view.setUint32(16, Number(data.cbEncryptedKeyMessage), true);
  // 0x14: pad4
  // 0x18: pointer
  if (data?.pbEncryptedKeyMessage !== undefined) view.setBigUint64(24, data.pbEncryptedKeyMessage === null ? 0n : BigInt(util.toPointer(data.pbEncryptedKeyMessage)), true);
  return buf;
}

/**
 * Windows.Win32.Media.WindowsMediaFormat.DRM_MINIMUM_OUTPUT_PROTECTION_LEVELS (size: 16)
 */
export interface DRM_MINIMUM_OUTPUT_PROTECTION_LEVELS {
  /** u16 */
  wCompressedDigitalVideo: number;
  /** u16 */
  wUncompressedDigitalVideo: number;
  /** u16 */
  wAnalogVideo: number;
  /** u16 */
  wCompressedDigitalAudio: number;
  /** u16 */
  wUncompressedDigitalAudio: number;
}

export const sizeofDRM_MINIMUM_OUTPUT_PROTECTION_LEVELS = 16;

export function allocDRM_MINIMUM_OUTPUT_PROTECTION_LEVELS(data?: Partial<DRM_MINIMUM_OUTPUT_PROTECTION_LEVELS>): Uint8Array {
  const buf = new Uint8Array(sizeofDRM_MINIMUM_OUTPUT_PROTECTION_LEVELS);
  const view = new DataView(buf.buffer);
  // 0x00: u16
  if (data?.wCompressedDigitalVideo !== undefined) view.setUint16(0, Number(data.wCompressedDigitalVideo), true);
  // 0x02: u16
  if (data?.wUncompressedDigitalVideo !== undefined) view.setUint16(2, Number(data.wUncompressedDigitalVideo), true);
  // 0x04: u16
  if (data?.wAnalogVideo !== undefined) view.setUint16(4, Number(data.wAnalogVideo), true);
  // 0x06: u16
  if (data?.wCompressedDigitalAudio !== undefined) view.setUint16(6, Number(data.wCompressedDigitalAudio), true);
  // 0x08: u16
  if (data?.wUncompressedDigitalAudio !== undefined) view.setUint16(8, Number(data.wUncompressedDigitalAudio), true);
  // 0x0a: pad6
  return buf;
}

/**
 * Windows.Win32.Media.WindowsMediaFormat.DRM_OPL_OUTPUT_IDS (size: 16)
 */
export interface DRM_OPL_OUTPUT_IDS {
  /** u16 */
  cIds: number;
  /** ptr */
  rgIds: Deno.PointerValue | Uint8Array | null;
}

export const sizeofDRM_OPL_OUTPUT_IDS = 16;

export function allocDRM_OPL_OUTPUT_IDS(data?: Partial<DRM_OPL_OUTPUT_IDS>): Uint8Array {
  const buf = new Uint8Array(sizeofDRM_OPL_OUTPUT_IDS);
  const view = new DataView(buf.buffer);
  // 0x00: u16
  if (data?.cIds !== undefined) view.setUint16(0, Number(data.cIds), true);
  // 0x02: pad6
  // 0x08: pointer
  if (data?.rgIds !== undefined) view.setBigUint64(8, data.rgIds === null ? 0n : BigInt(util.toPointer(data.rgIds)), true);
  return buf;
}

/**
 * Windows.Win32.Media.WindowsMediaFormat.DRM_OUTPUT_PROTECTION (size: 16)
 */
export interface DRM_OUTPUT_PROTECTION {
  /** System.Guid */
  guidId: Uint8Array | Deno.PointerValue | null;
  /** u8 */
  bConfigData: number;
}

export const sizeofDRM_OUTPUT_PROTECTION = 16;

export function allocDRM_OUTPUT_PROTECTION(data?: Partial<DRM_OUTPUT_PROTECTION>): Uint8Array {
  const buf = new Uint8Array(sizeofDRM_OUTPUT_PROTECTION);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.guidId !== undefined) view.setBigUint64(0, data.guidId === null ? 0n : BigInt(util.toPointer(data.guidId)), true);
  // 0x08: u8
  if (data?.bConfigData !== undefined) view.setUint8(8, Number(data.bConfigData));
  // 0x09: pad7
  return buf;
}

/**
 * Windows.Win32.Media.WindowsMediaFormat.DRM_VIDEO_OUTPUT_PROTECTION_IDS (size: 16)
 */
export interface DRM_VIDEO_OUTPUT_PROTECTION_IDS {
  /** u16 */
  cEntries: number;
  /** ptr */
  rgVop: Deno.PointerValue | Uint8Array | null;
}

export const sizeofDRM_VIDEO_OUTPUT_PROTECTION_IDS = 16;

export function allocDRM_VIDEO_OUTPUT_PROTECTION_IDS(data?: Partial<DRM_VIDEO_OUTPUT_PROTECTION_IDS>): Uint8Array {
  const buf = new Uint8Array(sizeofDRM_VIDEO_OUTPUT_PROTECTION_IDS);
  const view = new DataView(buf.buffer);
  // 0x00: u16
  if (data?.cEntries !== undefined) view.setUint16(0, Number(data.cEntries), true);
  // 0x02: pad6
  // 0x08: pointer
  if (data?.rgVop !== undefined) view.setBigUint64(8, data.rgVop === null ? 0n : BigInt(util.toPointer(data.rgVop)), true);
  return buf;
}

/**
 * Windows.Win32.Media.WindowsMediaFormat.DRM_PLAY_OPL (size: 24)
 */
export interface DRM_PLAY_OPL {
  /** Windows.Win32.Media.WindowsMediaFormat.DRM_MINIMUM_OUTPUT_PROTECTION_LEVELS */
  minOPL: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Media.WindowsMediaFormat.DRM_OPL_OUTPUT_IDS */
  oplIdReserved: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Media.WindowsMediaFormat.DRM_VIDEO_OUTPUT_PROTECTION_IDS */
  vopi: Uint8Array | Deno.PointerValue | null;
}

export const sizeofDRM_PLAY_OPL = 24;

export function allocDRM_PLAY_OPL(data?: Partial<DRM_PLAY_OPL>): Uint8Array {
  const buf = new Uint8Array(sizeofDRM_PLAY_OPL);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.minOPL !== undefined) view.setBigUint64(0, data.minOPL === null ? 0n : BigInt(util.toPointer(data.minOPL)), true);
  // 0x08: pointer
  if (data?.oplIdReserved !== undefined) view.setBigUint64(8, data.oplIdReserved === null ? 0n : BigInt(util.toPointer(data.oplIdReserved)), true);
  // 0x10: pointer
  if (data?.vopi !== undefined) view.setBigUint64(16, data.vopi === null ? 0n : BigInt(util.toPointer(data.vopi)), true);
  return buf;
}

/**
 * Windows.Win32.Media.WindowsMediaFormat.DRM_COPY_OPL (size: 24)
 */
export interface DRM_COPY_OPL {
  /** u16 */
  wMinimumCopyLevel: number;
  /** Windows.Win32.Media.WindowsMediaFormat.DRM_OPL_OUTPUT_IDS */
  oplIdIncludes: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Media.WindowsMediaFormat.DRM_OPL_OUTPUT_IDS */
  oplIdExcludes: Uint8Array | Deno.PointerValue | null;
}

export const sizeofDRM_COPY_OPL = 24;

export function allocDRM_COPY_OPL(data?: Partial<DRM_COPY_OPL>): Uint8Array {
  const buf = new Uint8Array(sizeofDRM_COPY_OPL);
  const view = new DataView(buf.buffer);
  // 0x00: u16
  if (data?.wMinimumCopyLevel !== undefined) view.setUint16(0, Number(data.wMinimumCopyLevel), true);
  // 0x02: pad6
  // 0x08: pointer
  if (data?.oplIdIncludes !== undefined) view.setBigUint64(8, data.oplIdIncludes === null ? 0n : BigInt(util.toPointer(data.oplIdIncludes)), true);
  // 0x10: pointer
  if (data?.oplIdExcludes !== undefined) view.setBigUint64(16, data.oplIdExcludes === null ? 0n : BigInt(util.toPointer(data.oplIdExcludes)), true);
  return buf;
}

// Native Libraries

try {
  var libWMVCore = Deno.dlopen("WMVCore", {
    WMIsContentProtected: {
      parameters: ["buffer", "pointer"],
      result: "pointer",
    },
    WMCreateWriter: {
      parameters: ["pointer", "pointer"],
      result: "pointer",
    },
    WMCreateReader: {
      parameters: ["pointer", "u32", "pointer"],
      result: "pointer",
    },
    WMCreateSyncReader: {
      parameters: ["pointer", "u32", "pointer"],
      result: "pointer",
    },
    WMCreateEditor: {
      parameters: ["pointer"],
      result: "pointer",
    },
    WMCreateIndexer: {
      parameters: ["pointer"],
      result: "pointer",
    },
    WMCreateBackupRestorer: {
      parameters: ["pointer", "pointer"],
      result: "pointer",
    },
    WMCreateProfileManager: {
      parameters: ["pointer"],
      result: "pointer",
    },
    WMCreateWriterFileSink: {
      parameters: ["pointer"],
      result: "pointer",
    },
    WMCreateWriterNetworkSink: {
      parameters: ["pointer"],
      result: "pointer",
    },
    WMCreateWriterPushSink: {
      parameters: ["pointer"],
      result: "pointer",
    },
  }).symbols;
} catch(e) { /* ignore */ }

// Symbols

export function WMIsContentProtected(
  pwszFileName: string | null /* Windows.Win32.Foundation.PWSTR */,
  pfIsProtected: Deno.PointerValue | Uint8Array | null /* ptr */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libWMVCore.WMIsContentProtected(util.pwstrToFfi(pwszFileName), util.toPointer(pfIsProtected)));
}

export function WMCreateWriter(
  pUnkCert: Uint8Array | Deno.PointerValue | null /* Windows.Win32.System.Com.IUnknown */,
  ppWriter: Deno.PointerValue | Uint8Array | null /* ptr */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libWMVCore.WMCreateWriter(util.toPointer(pUnkCert), util.toPointer(ppWriter)));
}

export function WMCreateReader(
  pUnkCert: Uint8Array | Deno.PointerValue | null /* Windows.Win32.System.Com.IUnknown */,
  dwRights: number /* u32 */,
  ppReader: Deno.PointerValue | Uint8Array | null /* ptr */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libWMVCore.WMCreateReader(util.toPointer(pUnkCert), dwRights, util.toPointer(ppReader)));
}

export function WMCreateSyncReader(
  pUnkCert: Uint8Array | Deno.PointerValue | null /* Windows.Win32.System.Com.IUnknown */,
  dwRights: number /* u32 */,
  ppSyncReader: Deno.PointerValue | Uint8Array | null /* ptr */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libWMVCore.WMCreateSyncReader(util.toPointer(pUnkCert), dwRights, util.toPointer(ppSyncReader)));
}

export function WMCreateEditor(
  ppEditor: Deno.PointerValue | Uint8Array | null /* ptr */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libWMVCore.WMCreateEditor(util.toPointer(ppEditor)));
}

export function WMCreateIndexer(
  ppIndexer: Deno.PointerValue | Uint8Array | null /* ptr */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libWMVCore.WMCreateIndexer(util.toPointer(ppIndexer)));
}

export function WMCreateBackupRestorer(
  pCallback: Uint8Array | Deno.PointerValue | null /* Windows.Win32.System.Com.IUnknown */,
  ppBackup: Deno.PointerValue | Uint8Array | null /* ptr */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libWMVCore.WMCreateBackupRestorer(util.toPointer(pCallback), util.toPointer(ppBackup)));
}

export function WMCreateProfileManager(
  ppProfileManager: Deno.PointerValue | Uint8Array | null /* ptr */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libWMVCore.WMCreateProfileManager(util.toPointer(ppProfileManager)));
}

export function WMCreateWriterFileSink(
  ppSink: Deno.PointerValue | Uint8Array | null /* ptr */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libWMVCore.WMCreateWriterFileSink(util.toPointer(ppSink)));
}

export function WMCreateWriterNetworkSink(
  ppSink: Deno.PointerValue | Uint8Array | null /* ptr */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libWMVCore.WMCreateWriterNetworkSink(util.toPointer(ppSink)));
}

export function WMCreateWriterPushSink(
  ppSink: Deno.PointerValue | Uint8Array | null /* ptr */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libWMVCore.WMCreateWriterPushSink(util.toPointer(ppSink)));
}

