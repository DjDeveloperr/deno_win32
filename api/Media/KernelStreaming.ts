/// Auto-generated by Deno Win32: Windows.Win32.Media.KernelStreaming.Apis

import * as util from "../../util.ts";

// Enums
export type KSRESET = number;
export type KSSTATE = number;
export type KSPROPERTY_GENERAL = number;
export type KSMETHOD_STREAMIO = number;
export type KSPROPERTY_MEDIASEEKING = number;
export type KS_SEEKING_FLAGS = number;
export type KS_SEEKING_CAPABILITIES = number;
export type KSPROPERTY_TOPOLOGY = number;
export type KSINTERFACE_STANDARD = number;
export type KSINTERFACE_FILEIO = number;
export type KSPROPERTY_PIN = number;
export type KSPIN_DATAFLOW = number;
export type KSPIN_COMMUNICATION = number;
export type KSEVENT_PINCAPS_CHANGENOTIFICATIONS = number;
export type KSEVENT_VOLUMELIMIT = number;
export type KSPROPERTY_QUALITY = number;
export type KSPROPERTY_CONNECTION = number;
export type KSEVENT_STREAMALLOCATOR = number;
export type KSMETHOD_STREAMALLOCATOR = number;
export type KSPIN_MDL_CACHING_EVENT = number;
export type KSPROPERTY_STREAMINTERFACE = number;
export type KSPROPERTY_STREAM = number;
export type KSPPROPERTY_ALLOCATOR_MDLCACHING = number;
export type KSPROPERTY_CLOCK = number;
export type KSEVENT_CLOCK_POSITION = number;
export type KSEVENT_CONNECTION = number;
export type KSDEVICE_THERMAL_STATE = number;
export type KSEVENT_DEVICE = number;
export type KSDEGRADE_STANDARD = number;
export type KSINTERFACE_MEDIA = number;
export type CONSTRICTOR_OPTION = number;
export type KSMICARRAY_MICTYPE = number;
export type KSMICARRAY_MICARRAYTYPE = number;
export type KSPROPERTY_DIRECTSOUND3DLISTENER = number;
export type KSPROPERTY_DIRECTSOUND3DBUFFER = number;
export type KSDS3D_HRTF_FILTER_QUALITY = number;
export type KSDS3D_HRTF_COEFF_FORMAT = number;
export type KSDS3D_HRTF_FILTER_METHOD = number;
export type KSDS3D_HRTF_FILTER_VERSION = number;
export type KSPROPERTY_HRTF3D = number;
export type KSPROPERTY_ITD3D = number;
export type KSPROPERTY_BIBLIOGRAPHIC = number;
export type KSPROPERTY_TOPOLOGYNODE = number;
export type KSPROPERTY_RTAUDIO = number;
export type KSPROPERTY_BTAUDIO = number;
export type KSPROPERTY_DRMAUDIOSTREAM = number;
export type KSPROPERTY_INTERLEAVEDAUDIO = number;
export type KSPROPERTY_SOUNDDETECTOR = number;
export type KSEVENT_SOUNDDETECTOR = number;
export type KSPROPERTY_AUDIO = number;
export type KSPROPERTY_TELEPHONY_CONTROL = number;
export type TELEPHONY_CALLTYPE = number;
export type TELEPHONY_CALLCONTROLOP = number;
export type TELEPHONY_PROVIDERCHANGEOP = number;
export type TELEPHONY_CALLSTATE = number;
export type KSPROPERTY_TELEPHONY_TOPOLOGY = number;
export type KSPROPERTY_FMRX_TOPOLOGY = number;
export type KSPROPERTY_FMRX_CONTROL = number;
export type KSEVENT_TELEPHONY = number;
export type KSMETHOD_WAVETABLE = number;
export type KSPROPERTY_WAVE = number;
export type KSPROPERTY_CYCLIC = number;
export type KSEVENT_AUDIO_CONTROL_CHANGE = number;
export type KSEVENT_LOOPEDSTREAMING = number;
export type KSPROPERTY_MPEG2VID = number;
export type KSPROPERTY_AC3 = number;
export type KSPROPERTY_AUDDECOUT = number;
export type KSPROPERTY_DVDSUBPIC = number;
export type KSPROPERTY_COPYPROT = number;
export type KS_DVDCOPYSTATE = number;
export type KS_COPY_MACROVISION_LEVEL = number;
export type KS_MPEG2Level = number;
export type KS_MPEG2Profile = number;
export type KSPROPERTY_VBICAP = number;
export type KSPROPERTY_VBICODECFILTERING = number;
export type CAPTURE_MEMORY_ALLOCATION_FLAGS = number;
export type KSPROPERTY_VIDMEM_TRANSPORT = number;
export type KSPROPERTY_MPEG4_MEDIATYPE_ATTRIBUTES = number;
export type KSEVENT_DYNAMICFORMATCHANGE = number;
export type KS_AnalogVideoStandard = number;
export type KSPROPERTY_ALLOCATOR_CONTROL = number;
export type KSPROPERTY_VIDCAP_VIDEOPROCAMP = number;
export type KSPROPERTY_VIDCAP_SELECTOR = number;
export type KSPROPERTY_TUNER = number;
export type KSPROPERTY_TUNER_MODES = number;
export type KS_TUNER_TUNING_FLAGS = number;
export type KS_TUNER_STRATEGY = number;
export type TunerLockType = number;
export type KSEVENT_TUNER = number;
export type KSPROPERTY_VIDCAP_VIDEOENCODER = number;
export type KSPROPERTY_VIDCAP_VIDEODECODER = number;
export type KS_VIDEODECODER_FLAGS = number;
export type KSEVENT_VIDEODECODER = number;
export type KSEVENT_CAMERACONTROL = number;
export type KSPROPERTY_VIDCAP_CAMERACONTROL = number;
export type KS_CameraControlAsyncOperation = number;
export type KSPROPERTY_CAMERACONTROL_FLASH = number;
export type KSPROPERTY_CAMERACONTROL_VIDEO_STABILIZATION_MODE = number;
export type KSPROPERTY_CAMERACONTROL_REGION_OF_INTEREST = number;
export type KSPROPERTY_CAMERACONTROL_IMAGE_PIN_CAPABILITY = number;
export type KSPROPERTY_CAMERACONTROL_EXTENDED_PROPERTY = number;
export type KSEVENT_CAMERAEVENT = number;
export type KSCAMERA_EXTENDEDPROP_WHITEBALANCE_MODE = number;
export type KSCAMERA_EXTENDEDPROP_WBPRESET = number;
export type KSPROPERTY_CAMERA_PHOTOTRIGGERTIME_FLAGS = number;
export type KSCAMERA_EXTENDEDPROP_MetadataAlignment = number;
export type KSCAMERA_MetadataId = number;
export type KSCAMERA_EXTENDEDPROP_FOCUSSTATE = number;
export type KSCAMERA_EXTENDEDPROP_ROITYPE = number;
export type KSPROPERTY_CAMERACONTROL_PERFRAMESETTING_PROPERTY = number;
export type KSCAMERA_PERFRAMESETTING_ITEM_TYPE = number;
export type KSPROPERTY_NETWORKCAMERACONTROL_NTPINFO_TYPE = number;
export type KSPROPERTY_NETWORKCAMERACONTROL_PROPERTY = number;
export type KSPROPERTY_NETWORKCAMERACONTROL_METADATA_TYPE = number;
export type KSPROPERTY_EXTDEVICE = number;
export type RIP_INFO_TYPE = number;
export type KSPROPERTY_EXTXPORT = number;
export type KSPROPERTY_TIMECODE = number;
export type TIMECODE_SAMPLE_FLAGS = number;
export type KSEVENT_DEVCMD = number;
export type KSPROPERTY_VIDCAP_CROSSBAR = number;
export type KSEVENT_CROSSBAR = number;
export type KS_PhysicalConnectorType = number;
export type KSPROPERTY_VIDCAP_TVAUDIO = number;
export type KSEVENT_TVAUDIO = number;
export type KSPROPERTY_VIDCAP_VIDEOCOMPRESSION = number;
export type KS_CompressionCaps = number;
export type KS_VideoStreamingHints = number;
export type KSPROPERTY_OVERLAYUPDATE = number;
export type KSPROPERTY_VIDCAP_VIDEOCONTROL = number;
export type KS_VideoControlFlags = number;
export type KSPROPERTY_VIDCAP_DROPPEDFRAMES = number;
export type KSPROPERTY_VPCONFIG = number;
export type KS_AMPixAspectRatio = number;
export type KS_AMVP_SELECTFORMATBY = number;
export type KS_AMVP_MODE = number;
export type KSEVENT_VPNOTIFY = number;
export type KSEVENT_VIDCAPTOSTI = number;
export type KSPROPERTY_EXTENSION_UNIT = number;
export type KSEVENT_VPVBINOTIFY = number;
export type KS_AM_PROPERTY_TS_RATE_CHANGE = number;
export type KSPROPERTY_JACK = number;
export type EPcxConnectionType = number;
export type EPcxGeoLocation = number;
export type EPcxGenLocation = number;
export type EPxcPortConnection = number;
export type KSJACK_SINK_CONNECTIONTYPE = number;
export type KSPROPERTY_AUDIOPOSTURE = number;
export type AUDIOPOSTURE_ORIENTATION = number;
export type KSPROPERTY_AUDIOENGINE = number;
export type AUDIO_CURVE_TYPE = number;
export type KSPROPERTY_AUDIOSIGNALPROCESSING = number;
export type KSPROPERTY_AUDIORESOURCEMANAGEMENT = number;
export type KSPROPERTY_AUDIOMODULE = number;
export type KSALLOCATORMODE = number;
export type FRAMING_PROP = number;
export type FRAMING_CACHE_OPS = number;
export type PIPE_STATE = number;
export type PIPE_ALLOCATOR_PLACE = number;
export type KS_LogicalMemoryType = number;

// Constants
export const IOCTL_KS_PROPERTY = 3080195;
export const IOCTL_KS_ENABLE_EVENT = 3080199;
export const IOCTL_KS_DISABLE_EVENT = 3080203;
export const IOCTL_KS_METHOD = 3080207;
export const IOCTL_KS_WRITE_STREAM = 3112979;
export const IOCTL_KS_READ_STREAM = 3096599;
export const IOCTL_KS_RESET_STATE = 3080219;
export const KSPRIORITY_LOW = 1;
export const KSPRIORITY_NORMAL = 1073741824;
export const KSPRIORITY_HIGH = 2147483648;
export const KSPRIORITY_EXCLUSIVE = 4294967295;
export const KSMETHOD_TYPE_NONE = 0;
export const KSMETHOD_TYPE_READ = 1;
export const KSMETHOD_TYPE_WRITE = 2;
export const KSMETHOD_TYPE_MODIFY = 3;
export const KSMETHOD_TYPE_SOURCE = 4;
export const KSMETHOD_TYPE_SEND = 1;
export const KSMETHOD_TYPE_SETSUPPORT = 256;
export const KSMETHOD_TYPE_BASICSUPPORT = 512;
export const KSMETHOD_TYPE_TOPOLOGY = 268435456;
export const KSPROPERTY_TYPE_GET = 1;
export const KSPROPERTY_TYPE_GETPAYLOADSIZE = 4;
export const KSPROPERTY_TYPE_SET = 2;
export const KSPROPERTY_TYPE_SETSUPPORT = 256;
export const KSPROPERTY_TYPE_BASICSUPPORT = 512;
export const KSPROPERTY_TYPE_RELATIONS = 1024;
export const KSPROPERTY_TYPE_SERIALIZESET = 2048;
export const KSPROPERTY_TYPE_UNSERIALIZESET = 4096;
export const KSPROPERTY_TYPE_SERIALIZERAW = 8192;
export const KSPROPERTY_TYPE_UNSERIALIZERAW = 16384;
export const KSPROPERTY_TYPE_SERIALIZESIZE = 32768;
export const KSPROPERTY_TYPE_DEFAULTVALUES = 65536;
export const KSPROPERTY_TYPE_TOPOLOGY = 268435456;
export const KSPROPERTY_TYPE_HIGHPRIORITY = 134217728;
export const KSPROPERTY_TYPE_FSFILTERSCOPE = 1073741824;
export const KSPROPERTY_TYPE_COPYPAYLOAD = 2147483648;
export const KSPROPERTY_MEMBER_RANGES = 1;
export const KSPROPERTY_MEMBER_STEPPEDRANGES = 2;
export const KSPROPERTY_MEMBER_VALUES = 3;
export const KSPROPERTY_MEMBER_FLAG_DEFAULT = 1;
export const KSPROPERTY_MEMBER_FLAG_BASICSUPPORT_MULTICHANNEL = 2;
export const KSPROPERTY_MEMBER_FLAG_BASICSUPPORT_UNIFORM = 4;
export const KSEVENTF_EVENT_HANDLE = 1;
export const KSEVENTF_SEMAPHORE_HANDLE = 2;
export const KSEVENTF_EVENT_OBJECT = 4;
export const KSEVENTF_SEMAPHORE_OBJECT = 8;
export const KSEVENTF_DPC = 16;
export const KSEVENTF_WORKITEM = 32;
export const KSEVENTF_KSWORKITEM = 128;
export const KSEVENT_TYPE_ENABLE = 1;
export const KSEVENT_TYPE_ONESHOT = 2;
export const KSEVENT_TYPE_ENABLEBUFFERED = 4;
export const KSEVENT_TYPE_SETSUPPORT = 256;
export const KSEVENT_TYPE_BASICSUPPORT = 512;
export const KSEVENT_TYPE_QUERYBUFFER = 1024;
export const KSEVENT_TYPE_TOPOLOGY = 268435456;
export const KSRELATIVEEVENT_FLAG_HANDLE = 1;
export const KSRELATIVEEVENT_FLAG_POINTER = 2;
export const KSMEDIUM_TYPE_ANYINSTANCE = 0;
export const KSMEDIUM_STANDARD_DEVIO = 0;
export const KSPROPERTY_PIN_FLAGS_ATTRIBUTE_RANGE_AWARE = 1;
export const KSPROPERTY_PIN_FLAGS_MASK = 1;
export const KSDATAFORMAT_BIT_TEMPORAL_COMPRESSION = 0;
export const KSDATAFORMAT_BIT_ATTRIBUTES = 1;
export const KSDATARANGE_BIT_ATTRIBUTES = 1;
export const KSDATARANGE_BIT_REQUIRED_ATTRIBUTES = 2;
export const KSATTRIBUTE_REQUIRED = 1;
export const KSSTRING_Filter = `{9B365890-165F-11D0-A195-0020AFD156E4}`;
export const KSSTRING_Pin = `{146F1A80-4791-11D0-A5D6-28DB04C10000}`;
export const KSSTRING_Clock = `{53172480-4791-11D0-A5D6-28DB04C10000}`;
export const KSSTRING_Allocator = `{642F5D00-4791-11D0-A5D6-28DB04C10000}`;
export const KSSTRING_AllocatorEx = `{091BB63B-603F-11D1-B067-00A0C9062802}`;
export const KSSTRING_TopologyNode = `{0621061A-EE75-11D0-B915-00A0C9223196}`;
export const KSALLOCATOR_REQUIREMENTF_INPLACE_MODIFIER = 1;
export const KSALLOCATOR_REQUIREMENTF_SYSTEM_MEMORY = 2;
export const KSALLOCATOR_REQUIREMENTF_FRAME_INTEGRITY = 4;
export const KSALLOCATOR_REQUIREMENTF_MUST_ALLOCATE = 8;
export const KSALLOCATOR_REQUIREMENTF_SYSTEM_MEMORY_CUSTOM_ALLOCATION = 16;
export const KSALLOCATOR_REQUIREMENTF_PREFERENCES_ONLY = 2147483648;
export const KSALLOCATOR_OPTIONF_COMPATIBLE = 1;
export const KSALLOCATOR_OPTIONF_SYSTEM_MEMORY = 2;
export const KSALLOCATOR_OPTIONF_VALID = 3;
export const KSALLOCATOR_FLAG_PARTIAL_READ_SUPPORT = 16;
export const KSALLOCATOR_FLAG_DEVICE_SPECIFIC = 32;
export const KSALLOCATOR_FLAG_CAN_ALLOCATE = 64;
export const KSALLOCATOR_FLAG_INSIST_ON_FRAMESIZE_RATIO = 128;
export const KSALLOCATOR_FLAG_NO_FRAME_INTEGRITY = 256;
export const KSALLOCATOR_FLAG_MULTIPLE_OUTPUT = 512;
export const KSALLOCATOR_FLAG_CYCLE = 1024;
export const KSALLOCATOR_FLAG_ALLOCATOR_EXISTS = 2048;
export const KSALLOCATOR_FLAG_INDEPENDENT_RANGES = 4096;
export const KSALLOCATOR_FLAG_ATTENTION_STEPPING = 8192;
export const KSALLOCATOR_FLAG_ENABLE_CACHED_MDL = 16384;
export const KSALLOCATOR_FLAG_2D_BUFFER_REQUIRED = 32768;
export const KSSTREAM_HEADER_OPTIONSF_SPLICEPOINT = 1;
export const KSSTREAM_HEADER_OPTIONSF_PREROLL = 2;
export const KSSTREAM_HEADER_OPTIONSF_DATADISCONTINUITY = 4;
export const KSSTREAM_HEADER_OPTIONSF_TYPECHANGED = 8;
export const KSSTREAM_HEADER_OPTIONSF_TIMEVALID = 16;
export const KSSTREAM_HEADER_OPTIONSF_TIMEDISCONTINUITY = 64;
export const KSSTREAM_HEADER_OPTIONSF_FLUSHONPAUSE = 128;
export const KSSTREAM_HEADER_OPTIONSF_DURATIONVALID = 256;
export const KSSTREAM_HEADER_OPTIONSF_ENDOFSTREAM = 512;
export const KSSTREAM_HEADER_OPTIONSF_BUFFEREDTRANSFER = 1024;
export const KSSTREAM_HEADER_OPTIONSF_VRAM_DATA_TRANSFER = 2048;
export const KSSTREAM_HEADER_OPTIONSF_METADATA = 4096;
export const KSSTREAM_HEADER_OPTIONSF_ENDOFPHOTOSEQUENCE = 8192;
export const KSSTREAM_HEADER_OPTIONSF_FRAMEINFO = 16384;
export const KSSTREAM_HEADER_OPTIONSF_PERSIST_SAMPLE = 32768;
export const KSSTREAM_HEADER_OPTIONSF_SAMPLE_PERSISTED = 65536;
export const KSSTREAM_HEADER_TRACK_COMPLETION_NUMBERS = 131072;
export const KSSTREAM_HEADER_OPTIONSF_SECUREBUFFERTRANSFER = 262144;
export const KSSTREAM_HEADER_OPTIONSF_LOOPEDDATA = 2147483648;
export const KSSTREAM_UVC_SECURE_ATTRIBUTE_SIZE = 8192;
export const KSFRAMETIME_VARIABLESIZE = 1;
export const KSRATE_NOPRESENTATIONSTART = 1;
export const KSRATE_NOPRESENTATIONDURATION = 2;
export const NANOSECONDS = 10000000;
export const KSPROBE_STREAMREAD = 0;
export const KSPROBE_STREAMWRITE = 1;
export const KSPROBE_ALLOCATEMDL = 16;
export const KSPROBE_PROBEANDLOCK = 32;
export const KSPROBE_SYSTEMADDRESS = 64;
export const KSPROBE_MODIFY = 512;
export const KSPROBE_ALLOWFORMATCHANGE = 128;
export const KSSTREAM_READ = 0;
export const KSSTREAM_WRITE = 1;
export const KSSTREAM_PAGED_DATA = 0;
export const KSSTREAM_NONPAGED_DATA = 256;
export const KSSTREAM_SYNCHRONOUS = 4096;
export const KSSTREAM_FAILUREEXCEPTION = 8192;
export const KSEVENT_ENTRY_DELETED = 1;
export const KSEVENT_ENTRY_ONESHOT = 2;
export const KSEVENT_ENTRY_BUFFERED = 4;
export const KSDISPATCH_FASTIO = 2147483648;
export const KSCREATE_ITEM_SECURITYCHANGED = 1;
export const KSCREATE_ITEM_WILDCARD = 2;
export const KSCREATE_ITEM_NOPARAMETERS = 4;
export const KSCREATE_ITEM_FREEONSTOP = 8;
export const BUS_INTERFACE_REFERENCE_VERSION = 256;
export const IOCTL_KS_HANDSHAKE = 3080223;
export const MIN_DEV_VER_FOR_QI = 256;
export const KSDEVICE_DESCRIPTOR_VERSION = 256;
export const KSDEVICE_DESCRIPTOR_VERSION_2 = 272;
export const MIN_DEV_VER_FOR_FLAGS = 272;
export const KSDEVICE_FLAG_ENABLE_REMOTE_WAKEUP = 1;
export const KSDEVICE_FLAG_LOWPOWER_PASSTHROUGH = 2;
export const KSDEVICE_FLAG_ENABLE_QUERYINTERFACE = 4;
export const KSFILTER_FLAG_DISPATCH_LEVEL_PROCESSING = 1;
export const KSFILTER_FLAG_CRITICAL_PROCESSING = 2;
export const KSFILTER_FLAG_HYPERCRITICAL_PROCESSING = 4;
export const KSFILTER_FLAG_RECEIVE_ZERO_LENGTH_SAMPLES = 8;
export const KSFILTER_FLAG_DENY_USERMODE_ACCESS = 2147483648;
export const KSFILTER_FLAG_PRIORITIZE_REFERENCEGUID = 16;
export const KSPIN_FLAG_DISPATCH_LEVEL_PROCESSING = 1;
export const KSPIN_FLAG_CRITICAL_PROCESSING = 2;
export const KSPIN_FLAG_HYPERCRITICAL_PROCESSING = 4;
export const KSPIN_FLAG_ASYNCHRONOUS_PROCESSING = 8;
export const KSPIN_FLAG_DO_NOT_INITIATE_PROCESSING = 16;
export const KSPIN_FLAG_INITIATE_PROCESSING_ON_EVERY_ARRIVAL = 32;
export const KSPIN_FLAG_FRAMES_NOT_REQUIRED_FOR_PROCESSING = 64;
export const KSPIN_FLAG_ENFORCE_FIFO = 128;
export const KSPIN_FLAG_GENERATE_MAPPINGS = 256;
export const KSPIN_FLAG_DISTINCT_TRAILING_EDGE = 512;
export const KSPIN_FLAG_PROCESS_IN_RUN_STATE_ONLY = 65536;
export const KSPIN_FLAG_SPLITTER = 131072;
export const KSPIN_FLAG_USE_STANDARD_TRANSPORT = 262144;
export const KSPIN_FLAG_DO_NOT_USE_STANDARD_TRANSPORT = 524288;
export const KSPIN_FLAG_FIXED_FORMAT = 1048576;
export const KSPIN_FLAG_GENERATE_EOS_EVENTS = 2097152;
export const KSPIN_FLAG_IMPLEMENT_CLOCK = 4194304;
export const KSPIN_FLAG_SOME_FRAMES_REQUIRED_FOR_PROCESSING = 8388608;
export const KSPIN_FLAG_PROCESS_IF_ANY_IN_RUN_STATE = 16777216;
export const KSPIN_FLAG_DENY_USERMODE_ACCESS = 2147483648;
export const RT_STRING = 7713761263622;
export const RT_RCDATA = 12111807774730;
export const WAVE_FORMAT_EXTENSIBLE = 65534;
export const KSDSOUND_BUFFER_PRIMARY = 1;
export const KSDSOUND_BUFFER_STATIC = 2;
export const KSDSOUND_BUFFER_LOCHARDWARE = 4;
export const KSDSOUND_BUFFER_LOCSOFTWARE = 8;
export const KSDSOUND_BUFFER_CTRL_3D = 1;
export const KSDSOUND_BUFFER_CTRL_FREQUENCY = 2;
export const KSDSOUND_BUFFER_CTRL_PAN = 4;
export const KSDSOUND_BUFFER_CTRL_VOLUME = 8;
export const KSDSOUND_BUFFER_CTRL_POSITIONNOTIFY = 16;
export const KSAUDIO_STEREO_SPEAKER_GEOMETRY_HEADPHONE = `-1`;
export const KSAUDIO_STEREO_SPEAKER_GEOMETRY_MIN = 5;
export const KSAUDIO_STEREO_SPEAKER_GEOMETRY_NARROW = 10;
export const KSAUDIO_STEREO_SPEAKER_GEOMETRY_WIDE = 20;
export const KSAUDIO_STEREO_SPEAKER_GEOMETRY_MAX = 180;
export const KSDSOUND_3D_MODE_NORMAL = 0;
export const KSDSOUND_3D_MODE_HEADRELATIVE = 1;
export const KSDSOUND_3D_MODE_DISABLE = 2;
export const KSDSOUND_BUFFER_CTRL_HRTF_3D = 1073741824;
export const KSAUDIO_QUALITY_WORST = 0;
export const KSAUDIO_QUALITY_PC = 1;
export const KSAUDIO_QUALITY_BASIC = 2;
export const KSAUDIO_QUALITY_ADVANCED = 3;
export const KSAUDIO_CPU_RESOURCES_NOT_HOST_CPU = 0;
export const KSAUDIO_CPU_RESOURCES_HOST_CPU = 2147483647;
export const SPEAKER_FRONT_LEFT = 1;
export const SPEAKER_FRONT_RIGHT = 2;
export const SPEAKER_FRONT_CENTER = 4;
export const SPEAKER_LOW_FREQUENCY = 8;
export const SPEAKER_BACK_LEFT = 16;
export const SPEAKER_BACK_RIGHT = 32;
export const SPEAKER_FRONT_LEFT_OF_CENTER = 64;
export const SPEAKER_FRONT_RIGHT_OF_CENTER = 128;
export const SPEAKER_BACK_CENTER = 256;
export const SPEAKER_SIDE_LEFT = 512;
export const SPEAKER_SIDE_RIGHT = 1024;
export const SPEAKER_TOP_CENTER = 2048;
export const SPEAKER_TOP_FRONT_LEFT = 4096;
export const SPEAKER_TOP_FRONT_CENTER = 8192;
export const SPEAKER_TOP_FRONT_RIGHT = 16384;
export const SPEAKER_TOP_BACK_LEFT = 32768;
export const SPEAKER_TOP_BACK_CENTER = 65536;
export const SPEAKER_TOP_BACK_RIGHT = 131072;
export const SPEAKER_RESERVED = 2147221504;
export const SPEAKER_ALL = 2147483648;
export const KSAUDIO_SPEAKER_DIRECTOUT = 0;
export const KSAUDIO_SPEAKER_MONO = 4;
export const KSAUDIO_SPEAKER_GROUND_FRONT_LEFT = 1;
export const KSAUDIO_SPEAKER_GROUND_FRONT_CENTER = 4;
export const KSAUDIO_SPEAKER_GROUND_FRONT_RIGHT = 2;
export const KSAUDIO_SPEAKER_GROUND_REAR_LEFT = 16;
export const KSAUDIO_SPEAKER_GROUND_REAR_RIGHT = 32;
export const KSAUDIO_SPEAKER_TOP_MIDDLE = 2048;
export const KSAUDIO_SPEAKER_SUPER_WOOFER = 8;
export const KSNODEPIN_STANDARD_IN = 1;
export const KSNODEPIN_STANDARD_OUT = 0;
export const KSNODEPIN_SUM_MUX_IN = 1;
export const KSNODEPIN_SUM_MUX_OUT = 0;
export const KSNODEPIN_DEMUX_IN = 0;
export const KSNODEPIN_DEMUX_OUT = 1;
export const KSNODEPIN_AEC_RENDER_IN = 1;
export const KSNODEPIN_AEC_RENDER_OUT = 0;
export const KSNODEPIN_AEC_CAPTURE_IN = 2;
export const KSNODEPIN_AEC_CAPTURE_OUT = 3;
export const AEC_STATUS_FD_HISTORY_UNINITIALIZED = 0;
export const AEC_STATUS_FD_HISTORY_CONTINUOUSLY_CONVERGED = 1;
export const AEC_STATUS_FD_HISTORY_PREVIOUSLY_DIVERGED = 2;
export const AEC_STATUS_FD_CURRENTLY_CONVERGED = 8;
export const AEC_MODE_PASS_THROUGH = 0;
export const AEC_MODE_HALF_DUPLEX = 1;
export const AEC_MODE_FULL_DUPLEX = 2;
export const KSPROPERTY_WAVE_QUEUED_POSITION = 1;
export const KSMETHOD_WAVE_QUEUED_BREAKLOOP = 1;
export const KSWAVE_COMPATCAPS_INPUT = 0;
export const KSWAVE_COMPATCAPS_OUTPUT = 1;
export const KSWAVE_BUFFER_ATTRIBUTEF_LOOPING = 1;
export const KSWAVE_BUFFER_ATTRIBUTEF_STATIC = 2;
export const SYSAUDIO_FLAGS_DONT_COMBINE_PINS = 1;
export const SYSAUDIO_FLAGS_CLEAR_PREFERRED = 2;
export const KSMPEGVIDMODE_PANSCAN = 1;
export const KSMPEGVIDMODE_LTRBOX = 2;
export const KSMPEGVIDMODE_SCALE = 4;
export const KSAC3_ALTERNATE_AUDIO_1 = 1;
export const KSAC3_ALTERNATE_AUDIO_2 = 2;
export const KSAC3_ALTERNATE_AUDIO_BOTH = 3;
export const KSAC3_SERVICE_MAIN_AUDIO = 0;
export const KSAC3_SERVICE_NO_DIALOG = 1;
export const KSAC3_SERVICE_VISUALLY_IMPAIRED = 2;
export const KSAC3_SERVICE_HEARING_IMPAIRED = 3;
export const KSAC3_SERVICE_DIALOG_ONLY = 4;
export const KSAC3_SERVICE_COMMENTARY = 5;
export const KSAC3_SERVICE_EMERGENCY_FLASH = 6;
export const KSAC3_SERVICE_VOICE_OVER = 7;
export const KSAUDDECOUTMODE_STEREO_ANALOG = 1;
export const KSAUDDECOUTMODE_PCM_51 = 2;
export const KSAUDDECOUTMODE_SPDIFF = 4;
export const KS_DVD_CGMS_RESERVED_MASK = 120;
export const KS_DVD_CGMS_COPY_PROTECT_MASK = 24;
export const KS_DVD_CGMS_COPY_PERMITTED = 0;
export const KS_DVD_CGMS_COPY_ONCE = 16;
export const KS_DVD_CGMS_NO_COPY = 24;
export const KS_DVD_COPYRIGHT_MASK = 64;
export const KS_DVD_NOT_COPYRIGHTED = 0;
export const KS_DVD_COPYRIGHTED = 64;
export const KS_DVD_SECTOR_PROTECT_MASK = 32;
export const KS_DVD_SECTOR_NOT_PROTECTED = 0;
export const KS_DVD_SECTOR_PROTECTED = 32;
export const KS_BI_RGB = 0;
export const KS_BI_RLE8 = 1;
export const KS_BI_RLE4 = 2;
export const KS_BI_BITFIELDS = 3;
export const KS_BI_JPEG = 4;
export const KS_iPALETTE_COLORS = 256;
export const KS_iEGA_COLORS = 16;
export const KS_iMASK_COLORS = 3;
export const KS_iTRUECOLOR = 16;
export const KS_iRED = 0;
export const KS_iGREEN = 1;
export const KS_iBLUE = 2;
export const KS_iPALETTE = 8;
export const KS_iMAXBITS = 8;
export const KS_VBIDATARATE_NABTS = 5727272;
export const KS_VBIDATARATE_CC = 503493;
export const KS_TVTUNER_CHANGE_BEGIN_TUNE = 1;
export const KS_TVTUNER_CHANGE_END_TUNE = 2;
export const KS_INTERLACE_IsInterlaced = 1;
export const KS_INTERLACE_1FieldPerSample = 2;
export const KS_INTERLACE_Field1First = 4;
export const KS_INTERLACE_UNUSED = 8;
export const KS_INTERLACE_FieldPatternMask = 48;
export const KS_INTERLACE_FieldPatField1Only = 0;
export const KS_INTERLACE_FieldPatField2Only = 16;
export const KS_INTERLACE_FieldPatBothRegular = 32;
export const KS_INTERLACE_FieldPatBothIrregular = 48;
export const KS_INTERLACE_DisplayModeMask = 192;
export const KS_INTERLACE_DisplayModeBobOnly = 0;
export const KS_INTERLACE_DisplayModeWeaveOnly = 64;
export const KS_INTERLACE_DisplayModeBobOrWeave = 128;
export const KS_COPYPROTECT_RestrictDuplication = 1;
export const KS_MPEG2_DoPanScan = 1;
export const KS_MPEG2_DVDLine21Field1 = 2;
export const KS_MPEG2_DVDLine21Field2 = 4;
export const KS_MPEG2_SourceIsLetterboxed = 8;
export const KS_MPEG2_FilmCameraMode = 16;
export const KS_MPEG2_LetterboxAnalogOut = 32;
export const KS_MPEG2_DSS_UserData = 64;
export const KS_MPEG2_DVB_UserData = 128;
export const KS_MPEG2_27MhzTimebase = 256;
export const KS_MPEG2_WidescreenAnalogOut = 512;
export const KS_AMCONTROL_USED = 1;
export const KS_AMCONTROL_PAD_TO_4x3 = 2;
export const KS_AMCONTROL_PAD_TO_16x9 = 4;
export const KS_AMCONTROL_COLORINFO_PRESENT = 128;
export const KS_MAX_SIZE_MPEG1_SEQUENCE_INFO = 140;
export const KS_MPEGAUDIOINFO_27MhzTimebase = 1;
export const KS_VIDEOSTREAM_PREVIEW = 1;
export const KS_VIDEOSTREAM_CAPTURE = 2;
export const KS_VIDEOSTREAM_VBI = 16;
export const KS_VIDEOSTREAM_NABTS = 32;
export const KS_VIDEOSTREAM_CC = 256;
export const KS_VIDEOSTREAM_EDS = 512;
export const KS_VIDEOSTREAM_TELETEXT = 1024;
export const KS_VIDEOSTREAM_STILL = 4096;
export const KS_VIDEOSTREAM_IS_VPE = 32768;
export const KS_VIDEO_ALLOC_VPE_SYSTEM = 1;
export const KS_VIDEO_ALLOC_VPE_DISPLAY = 2;
export const KS_VIDEO_ALLOC_VPE_AGP = 4;
export const KS_VBICAP_PROTECTION_MV_PRESENT = 1;
export const KS_VBICAP_PROTECTION_MV_HARDWARE = 2;
export const KS_VBICAP_PROTECTION_MV_DETECTED = 4;
export const KS_NABTS_GROUPID_ORIGINAL_CONTENT_BASE = 2048;
export const KS_NABTS_GROUPID_ORIGINAL_CONTENT_ADVERTISER_BASE = 2064;
export const KS_NABTS_GROUPID_PRODUCTION_COMPANY_CONTENT_BASE = 2080;
export const KS_NABTS_GROUPID_PRODUCTION_COMPANY_ADVERTISER_BASE = 2096;
export const KS_NABTS_GROUPID_SYNDICATED_SHOW_CONTENT_BASE = 2112;
export const KS_NABTS_GROUPID_SYNDICATED_SHOW_ADVERTISER_BASE = 2128;
export const KS_NABTS_GROUPID_NETWORK_WIDE_CONTENT_BASE = 2144;
export const KS_NABTS_GROUPID_NETWORK_WIDE_ADVERTISER_BASE = 2160;
export const KS_NABTS_GROUPID_TELEVISION_STATION_CONTENT_BASE = 2176;
export const KS_NABTS_GROUPID_TELEVISION_STATION_ADVERTISER_BASE = 2192;
export const KS_NABTS_GROUPID_LOCAL_CABLE_SYSTEM_CONTENT_BASE = 2208;
export const KS_NABTS_GROUPID_LOCAL_CABLE_SYSTEM_ADVERTISER_BASE = 2224;
export const KS_NABTS_GROUPID_MICROSOFT_RESERVED_TEST_DATA_BASE = 2288;
export const MAX_NABTS_VBI_LINES_PER_FIELD = 11;
export const NABTS_LINES_PER_BUNDLE = 16;
export const NABTS_PAYLOAD_PER_LINE = 28;
export const NABTS_BYTES_PER_LINE = 36;
export const KS_CC_SUBSTREAM_ODD = 1;
export const KS_CC_SUBSTREAM_EVEN = 2;
export const KS_CC_SUBSTREAM_FIELD1_MASK = 240;
export const KS_CC_SUBSTREAM_SERVICE_CC1 = 16;
export const KS_CC_SUBSTREAM_SERVICE_CC2 = 32;
export const KS_CC_SUBSTREAM_SERVICE_T1 = 64;
export const KS_CC_SUBSTREAM_SERVICE_T2 = 128;
export const KS_CC_SUBSTREAM_FIELD2_MASK = 7936;
export const KS_CC_SUBSTREAM_SERVICE_CC3 = 256;
export const KS_CC_SUBSTREAM_SERVICE_CC4 = 512;
export const KS_CC_SUBSTREAM_SERVICE_T3 = 1024;
export const KS_CC_SUBSTREAM_SERVICE_T4 = 2048;
export const KS_CC_SUBSTREAM_SERVICE_XDS = 4096;
export const CC_MAX_HW_DECODE_LINES = 12;
export const NABTS_BUFFER_PICTURENUMBER_SUPPORT = 1;
export const WST_TVTUNER_CHANGE_BEGIN_TUNE = 4096;
export const WST_TVTUNER_CHANGE_END_TUNE = 8192;
export const MAX_WST_VBI_LINES_PER_FIELD = 17;
export const WST_BYTES_PER_LINE = 42;
export const KS_VIDEO_FLAG_FIELD_MASK = 3;
export const KS_VIDEO_FLAG_FRAME = 0;
export const KS_VIDEO_FLAG_FIELD1 = 1;
export const KS_VIDEO_FLAG_FIELD2 = 2;
export const KS_VIDEO_FLAG_FIELD1FIRST = 4;
export const KS_VIDEO_FLAG_WEAVE = 8;
export const KS_VIDEO_FLAG_IPB_MASK = 48;
export const KS_VIDEO_FLAG_I_FRAME = 0;
export const KS_VIDEO_FLAG_P_FRAME = 16;
export const KS_VIDEO_FLAG_B_FRAME = 32;
export const KS_VIDEO_FLAG_REPEAT_FIELD = 64;
export const KS_VBI_FLAG_FRAME = 0;
export const KS_VBI_FLAG_FIELD1 = 1;
export const KS_VBI_FLAG_FIELD2 = 2;
export const KS_VBI_FLAG_MV_PRESENT = 256;
export const KS_VBI_FLAG_MV_HARDWARE = 512;
export const KS_VBI_FLAG_MV_DETECTED = 1024;
export const KS_VBI_FLAG_TVTUNER_CHANGE = 16;
export const KS_VBI_FLAG_VBIINFOHEADER_CHANGE = 32;
export const KS_AnalogVideo_NTSC_Mask = 7;
export const KS_AnalogVideo_PAL_Mask = 1052656;
export const KS_AnalogVideo_SECAM_Mask = 1044480;
export const KSPROPERTY_VIDEOPROCAMP_FLAGS_AUTO = 1;
export const KSPROPERTY_VIDEOPROCAMP_FLAGS_MANUAL = 2;
export const KSPROPERTY_CAMERACONTROL_FLAGS_AUTO = 1;
export const KSPROPERTY_CAMERACONTROL_FLAGS_MANUAL = 2;
export const KSPROPERTY_CAMERACONTROL_FLAGS_ASYNCHRONOUS = 4;
export const KSPROPERTY_CAMERACONTROL_FLAGS_ABSOLUTE = 0;
export const KSPROPERTY_CAMERACONTROL_FLAGS_RELATIVE = 16;
export const KSPROPERTY_CAMERACONTROL_FLASH_OFF = 0;
export const KSPROPERTY_CAMERACONTROL_FLASH_ON = 1;
export const KSPROPERTY_CAMERACONTROL_FLASH_AUTO = 2;
export const KSPROPERTY_CAMERACONTROL_FLASH_FLAGS_AUTO = 1;
export const KSPROPERTY_CAMERACONTROL_FLASH_FLAGS_MANUAL = 2;
export const KSPROPERTY_CAMERACONTROL_VIDEOSTABILIZATION_MODE_OFF = 0;
export const KSPROPERTY_CAMERACONTROL_VIDEOSTABILIZATION_MODE_HIGH = 1;
export const KSPROPERTY_CAMERACONTROL_VIDEOSTABILIZATION_MODE_MEDIUM = 2;
export const KSPROPERTY_CAMERACONTROL_VIDEOSTABILIZATION_MODE_LOW = 3;
export const KSPROPERTY_CAMERACONTROL_VIDEOSTABILIZATION_MODE_AUTO = 4;
export const KSPROPERTY_CAMERACONTROL_VIDEOSTABILIZATION_MODE_FLAGS_AUTO = 1;
export const KSPROPERTY_CAMERACONTROL_VIDEOSTABILIZATION_MODE_FLAGS_MANUAL = 2;
export const KSPROPERTY_CAMERACONTROL_REGION_OF_INTEREST_FLAGS_AUTO = 1;
export const KSPROPERTY_CAMERACONTROL_REGION_OF_INTEREST_FLAGS_MANUAL = 2;
export const KSPROPERTY_CAMERACONTROL_REGION_OF_INTEREST_FLAGS_ASYNC = `-2147483648`;
export const KSPROPERTY_CAMERACONTROL_REGION_OF_INTEREST_CONFIG_FOCUS = 256;
export const KSPROPERTY_CAMERACONTROL_REGION_OF_INTEREST_CONFIG_EXPOSURE = 512;
export const KSPROPERTY_CAMERACONTROL_REGION_OF_INTEREST_CONFIG_WB = 1024;
export const KSPROPERTY_CAMERACONTROL_REGION_OF_INTEREST_CONVERGEMODE = 1073741824;
export const KSPROPERTY_CAMERACONTROL_IMAGE_PIN_CAPABILITY_EXCLUSIVE_WITH_RECORD = 1;
export const KSPROPERTY_CAMERACONTROL_IMAGE_PIN_CAPABILITY_SEQUENCE_EXCLUSIVE_WITH_RECORD = 2;
export const KSCAMERA_EXTENDEDPROP_FILTERSCOPE = 4294967295;
export const KSCAMERA_EXTENDEDPROP_CAPS_RESERVED = 18374686479671623680n;
export const KSCAMERA_EXTENDEDPROP_CAPS_ASYNCCONTROL = 9223372036854775808n;
export const KSCAMERA_EXTENDEDPROP_CAPS_CANCELLABLE = 4611686018427387904n;
export const KSCAMERA_EXTENDEDPROP_FLAG_CANCELOPERATION = 9223372036854775808n;
export const KSCAMERA_EXTENDEDPROP_CAPS_MASK = 18374686479671623680n;
export const KSCAMERA_EXTENDEDPROP_FLAG_MASK = 18374686479671623680n;
export const KSCAMERA_EXTENDEDPROP_PHOTOMODE_NORMAL = 0;
export const KSCAMERA_EXTENDEDPROP_PHOTOMODE_SEQUENCE = 1;
export const KSCAMERA_EXTENDEDPROP_WARMSTART_MODE_DISABLED = 0;
export const KSCAMERA_EXTENDEDPROP_WARMSTART_MODE_ENABLED = 1;
export const KSCAMERA_EXTENDEDPROP_PHOTOTHUMBNAIL_DISABLE = 0;
export const KSCAMERA_EXTENDEDPROP_PHOTOTHUMBNAIL_2X = 1;
export const KSCAMERA_EXTENDEDPROP_PHOTOTHUMBNAIL_4X = 2;
export const KSCAMERA_EXTENDEDPROP_PHOTOTHUMBNAIL_8X = 4;
export const KSCAMERA_EXTENDEDPROP_PHOTOTHUMBNAIL_16X = 8;
export const KSCAMERA_EXTENDEDPROP_SCENEMODE_AUTO = 0;
export const KSCAMERA_EXTENDEDPROP_SCENEMODE_MACRO = 1;
export const KSCAMERA_EXTENDEDPROP_SCENEMODE_PORTRAIT = 2;
export const KSCAMERA_EXTENDEDPROP_SCENEMODE_SPORT = 4;
export const KSCAMERA_EXTENDEDPROP_SCENEMODE_SNOW = 8;
export const KSCAMERA_EXTENDEDPROP_SCENEMODE_NIGHT = 16;
export const KSCAMERA_EXTENDEDPROP_SCENEMODE_BEACH = 32;
export const KSCAMERA_EXTENDEDPROP_SCENEMODE_SUNSET = 64;
export const KSCAMERA_EXTENDEDPROP_SCENEMODE_CANDLELIGHT = 128;
export const KSCAMERA_EXTENDEDPROP_SCENEMODE_LANDSCAPE = 256;
export const KSCAMERA_EXTENDEDPROP_SCENEMODE_NIGHTPORTRAIT = 512;
export const KSCAMERA_EXTENDEDPROP_SCENEMODE_BACKLIT = 1024;
export const KSCAMERA_EXTENDEDPROP_SCENEMODE_MANUAL = 36028797018963968n;
export const KSCAMERA_EXTENDEDPROP_VIDEOTORCH_OFF = 0;
export const KSCAMERA_EXTENDEDPROP_VIDEOTORCH_ON = 1;
export const KSCAMERA_EXTENDEDPROP_VIDEOTORCH_ON_ADJUSTABLEPOWER = 2;
export const KSCAMERA_EXTENDEDPROP_FLASH_OFF = 0;
export const KSCAMERA_EXTENDEDPROP_FLASH_ON = 1;
export const KSCAMERA_EXTENDEDPROP_FLASH_ON_ADJUSTABLEPOWER = 2;
export const KSCAMERA_EXTENDEDPROP_FLASH_AUTO = 4;
export const KSCAMERA_EXTENDEDPROP_FLASH_AUTO_ADJUSTABLEPOWER = 8;
export const KSCAMERA_EXTENDEDPROP_FLASH_REDEYEREDUCTION = 16;
export const KSCAMERA_EXTENDEDPROP_FLASH_SINGLEFLASH = 32;
export const KSCAMERA_EXTENDEDPROP_FLASH_MULTIFLASHSUPPORTED = 64;
export const KSCAMERA_EXTENDEDPROP_OPTIMIZATION_PHOTO = 1;
export const KSCAMERA_EXTENDEDPROP_OPTIMIZATION_VIDEO = 2;
export const KSCAMERA_EXTENDEDPROP_OPTIMIZATION_DEFAULT = 0;
export const KSCAMERA_EXTENDEDPROP_OPTIMIZATION_QUALITY = 4;
export const KSCAMERA_EXTENDEDPROP_OPTIMIZATION_LATENCY = 8;
export const KSCAMERA_EXTENDEDPROP_OPTIMIZATION_POWER = 16;
export const KSCAMERA_EXTENDEDPROP_VIDEOPROCFLAG_AUTO = 1;
export const KSCAMERA_EXTENDEDPROP_VIDEOPROCFLAG_MANUAL = 2;
export const KSCAMERA_EXTENDEDPROP_VIDEOPROCFLAG_LOCK = 4;
export const KSCAMERA_EXTENDEDPROP_FOCUS_CONTINUOUS = 256;
export const KSCAMERA_EXTENDEDPROP_FOCUS_RANGE_MACRO = 65536;
export const KSCAMERA_EXTENDEDPROP_FOCUS_RANGE_NORMAL = 131072;
export const KSCAMERA_EXTENDEDPROP_FOCUS_RANGE_FULLRANGE = 262144;
export const KSCAMERA_EXTENDEDPROP_FOCUS_RANGE_INFINITY = 524288;
export const KSCAMERA_EXTENDEDPROP_FOCUS_RANGE_HYPERFOCAL = 1048576;
export const KSCAMERA_EXTENDEDPROP_FOCUS_DISTANCE_INFINITY = 16777216;
export const KSCAMERA_EXTENDEDPROP_FOCUS_DISTANCE_HYPERFOCAL = 33554432;
export const KSCAMERA_EXTENDEDPROP_FOCUS_DISTANCE_NEAREST = 67108864;
export const KSCAMERA_EXTENDEDPROP_ISO_AUTO = 1;
export const KSCAMERA_EXTENDEDPROP_ISO_50 = 2;
export const KSCAMERA_EXTENDEDPROP_ISO_80 = 4;
export const KSCAMERA_EXTENDEDPROP_ISO_100 = 8;
export const KSCAMERA_EXTENDEDPROP_ISO_200 = 16;
export const KSCAMERA_EXTENDEDPROP_ISO_400 = 32;
export const KSCAMERA_EXTENDEDPROP_ISO_800 = 64;
export const KSCAMERA_EXTENDEDPROP_ISO_1600 = 128;
export const KSCAMERA_EXTENDEDPROP_ISO_3200 = 256;
export const KSCAMERA_EXTENDEDPROP_ISO_6400 = 512;
export const KSCAMERA_EXTENDEDPROP_ISO_12800 = 1024;
export const KSCAMERA_EXTENDEDPROP_ISO_25600 = 2048;
export const KSCAMERA_EXTENDEDPROP_FOCUS_CONTINUOUSLOCK = 512;
export const KSCAMERA_EXTENDEDPROP_FOCUS_UNLOCK = 1024;
export const KSCAMERA_EXTENDEDPROP_FOCUS_DRIVERFALLBACK_OFF = 2048;
export const KSCAMERA_EXTENDEDPROP_FOCUS_REGIONBASED = 4096;
export const KSCAMERA_EXTENDEDPROP_ISO_MANUAL = 36028797018963968n;
export const KSCAMERA_EXTENDEDPROP_FLASH_ASSISTANT_OFF = 0;
export const KSCAMERA_EXTENDEDPROP_FLASH_ASSISTANT_ON = 128;
export const KSCAMERA_EXTENDEDPROP_FLASH_ASSISTANT_AUTO = 256;
export const KSCAMERA_EXTENDEDPROP_EVCOMP_SIXTHSTEP = 1;
export const KSCAMERA_EXTENDEDPROP_EVCOMP_QUARTERSTEP = 2;
export const KSCAMERA_EXTENDEDPROP_EVCOMP_THIRDSTEP = 4;
export const KSCAMERA_EXTENDEDPROP_EVCOMP_HALFSTEP = 8;
export const KSCAMERA_EXTENDEDPROP_EVCOMP_FULLSTEP = 16;
export const KSCAMERA_EXTENDEDPROP_PHOTOMODE_SEQUENCE_SUB_NONE = 0;
export const KSCAMERA_EXTENDEDPROP_PHOTOMODE_SEQUENCE_SUB_VARIABLE = 1;
export const KSCAMERA_EXTENDEDPROP_METADATA_MEMORYTYPE_MASK = 255;
export const KSCAMERA_EXTENDEDPROP_METADATA_SYSTEMMEMORY = 1;
export const KSCAMERA_EXTENDEDPROP_METADATA_ALIGNMENTREQUIRED = 256;
export const KSCAMERA_METADATA_FRAMEILLUMINATION_FLAG_ON = 1;
export const KSCAMERA_METADATA_CAPTURESTATS_FLAG_EXPOSURETIME = 1;
export const KSCAMERA_METADATA_CAPTURESTATS_FLAG_EXPOSURECOMPENSATION = 2;
export const KSCAMERA_METADATA_CAPTURESTATS_FLAG_ISOSPEED = 4;
export const KSCAMERA_METADATA_CAPTURESTATS_FLAG_FOCUSSTATE = 8;
export const KSCAMERA_METADATA_CAPTURESTATS_FLAG_LENSPOSITION = 16;
export const KSCAMERA_METADATA_CAPTURESTATS_FLAG_WHITEBALANCE = 32;
export const KSCAMERA_METADATA_CAPTURESTATS_FLAG_FLASH = 64;
export const KSCAMERA_METADATA_CAPTURESTATS_FLAG_FLASHPOWER = 128;
export const KSCAMERA_METADATA_CAPTURESTATS_FLAG_ZOOMFACTOR = 256;
export const KSCAMERA_METADATA_CAPTURESTATS_FLAG_SCENEMODE = 512;
export const KSCAMERA_METADATA_CAPTURESTATS_FLAG_SENSORFRAMERATE = 1024;
export const KSCAMERA_EXTENDEDPROP_FOCUSPRIORITY_OFF = 0;
export const KSCAMERA_EXTENDEDPROP_FOCUSPRIORITY_ON = 1;
export const KSCAMERA_EXTENDEDPROP_PHOTOCONFIRMATION_OFF = 0;
export const KSCAMERA_EXTENDEDPROP_PHOTOCONFIRMATION_ON = 1;
export const KSCAMERA_PERFRAMESETTING_AUTO = 4294967296;
export const KSCAMERA_PERFRAMESETTING_MANUAL = 8589934592;
export const KSCAMERA_EXTENDEDPROP_VIDEOSTABILIZATION_OFF = 0;
export const KSCAMERA_EXTENDEDPROP_VIDEOSTABILIZATION_ON = 1;
export const KSCAMERA_EXTENDEDPROP_VIDEOSTABILIZATION_AUTO = 2;
export const KSCAMERA_EXTENDEDPROP_VFR_OFF = 0;
export const KSCAMERA_EXTENDEDPROP_VFR_ON = 1;
export const KSCAMERA_EXTENDEDPROP_FACEDETECTION_OFF = 0;
export const KSCAMERA_EXTENDEDPROP_FACEDETECTION_ON = 1;
export const KSCAMERA_EXTENDEDPROP_FACEDETECTION_PREVIEW = 1;
export const KSCAMERA_EXTENDEDPROP_FACEDETECTION_VIDEO = 2;
export const KSCAMERA_EXTENDEDPROP_FACEDETECTION_PHOTO = 4;
export const KSCAMERA_EXTENDEDPROP_FACEDETECTION_BLINK = 8;
export const KSCAMERA_EXTENDEDPROP_FACEDETECTION_SMILE = 16;
export const KSCAMERA_EXTENDEDPROP_VIDEOHDR_OFF = 0;
export const KSCAMERA_EXTENDEDPROP_VIDEOHDR_ON = 1;
export const KSCAMERA_EXTENDEDPROP_VIDEOHDR_AUTO = 2;
export const KSCAMERA_EXTENDEDPROP_HISTOGRAM_OFF = 0;
export const KSCAMERA_EXTENDEDPROP_HISTOGRAM_ON = 1;
export const KSCAMERA_EXTENDEDPROP_OIS_OFF = 0;
export const KSCAMERA_EXTENDEDPROP_OIS_ON = 1;
export const KSCAMERA_EXTENDEDPROP_OIS_AUTO = 2;
export const KSCAMERA_EXTENDEDPROP_ADVANCEDPHOTO_OFF = 0;
export const KSCAMERA_EXTENDEDPROP_ADVANCEDPHOTO_AUTO = 1;
export const KSCAMERA_EXTENDEDPROP_ADVANCEDPHOTO_HDR = 2;
export const KSCAMERA_EXTENDEDPROP_ADVANCEDPHOTO_FNF = 4;
export const KSCAMERA_EXTENDEDPROP_ADVANCEDPHOTO_ULTRALOWLIGHT = 8;
export const KSCAMERA_EXTENDEDPROP_ZOOM_DEFAULT = 0;
export const KSCAMERA_EXTENDEDPROP_ZOOM_DIRECT = 1;
export const KSCAMERA_EXTENDEDPROP_ZOOM_SMOOTH = 2;
export const KSCAMERA_EXTENDEDPROP_FACEAUTH_MODE_DISABLED = 1;
export const KSCAMERA_EXTENDEDPROP_FACEAUTH_MODE_ALTERNATIVE_FRAME_ILLUMINATION = 2;
export const KSCAMERA_EXTENDEDPROP_FACEAUTH_MODE_BACKGROUND_SUBTRACTION = 4;
export const KSCAMERA_EXTENDEDPROP_SECUREMODE_DISABLED = 1;
export const KSCAMERA_EXTENDEDPROP_SECUREMODE_ENABLED = 2;
export const KSCAMERA_EXTENDEDPROP_VIDEOTEMPORALDENOISING_AUTO = 1;
export const KSCAMERA_EXTENDEDPROP_VIDEOTEMPORALDENOISING_OFF = 2;
export const KSCAMERA_EXTENDEDPROP_VIDEOTEMPORALDENOISING_ON = 4;
export const KSCAMERA_EXTENDEDPROP_IRTORCHMODE_OFF = 1;
export const KSCAMERA_EXTENDEDPROP_IRTORCHMODE_ALWAYS_ON = 2;
export const KSCAMERA_EXTENDEDPROP_IRTORCHMODE_ALTERNATING_FRAME_ILLUMINATION = 4;
export const KSCAMERA_EXTENDEDPROP_RELATIVEPANELOPTIMIZATION_OFF = 0;
export const KSCAMERA_EXTENDEDPROP_RELATIVEPANELOPTIMIZATION_ON = 1;
export const KSCAMERA_EXTENDEDPROP_RELATIVEPANELOPTIMIZATION_DYNAMIC = 2;
export const KSCAMERA_EXTENDEDPROP_EYEGAZECORRECTION_OFF = 0;
export const KSCAMERA_EXTENDEDPROP_EYEGAZECORRECTION_ON = 1;
export const KSCAMERA_EXTENDEDPROP_BACKGROUNDSEGMENTATION_OFF = 0;
export const KSCAMERA_EXTENDEDPROP_BACKGROUNDSEGMENTATION_BLUR = 1;
export const KSCAMERA_EXTENDEDPROP_BACKGROUNDSEGMENTATION_MASK = 2;
export const KSCAMERA_EXTENDEDPROP_DIGITALWINDOW_MANUAL = 0;
export const KSCAMERA_EXTENDEDPROP_DIGITALWINDOW_AUTOFACEFRAMING = 1;
export const KSCAMERAPROFILE_FLAGS_VIDEOSTABLIZATION = 1;
export const KSCAMERAPROFILE_FLAGS_VIDEOHDR = 2;
export const KSCAMERAPROFILE_FLAGS_PHOTOHDR = 4;
export const KSCAMERAPROFILE_FLAGS_FACEDETECTION = 8;
export const KSCAMERAPROFILE_FLAGS_VARIABLEPHOTOSEQUENCE = 16;
export const KSCAMERAPROFILE_FLAGS_PREVIEW_RES_MUSTMATCH = 32;
export const KSDEVICE_PROFILE_TYPE_UNKNOWN = 0;
export const KSDEVICE_PROFILE_TYPE_CAMERA = 1;
export const KSCameraProfileSensorType_RGB = 1;
export const KSCameraProfileSensorType_Infrared = 2;
export const KSCameraProfileSensorType_Depth = 4;
export const KSCameraProfileSensorType_PoseTracking = 8;
export const KSCameraProfileSensorType_ImageSegmentation = 16;
export const KSCameraProfileSensorType_Custom = 128;
export const KS_TVAUDIO_MODE_MONO = 1;
export const KS_TVAUDIO_MODE_STEREO = 2;
export const KS_TVAUDIO_MODE_LANG_A = 16;
export const KS_TVAUDIO_MODE_LANG_B = 32;
export const KS_TVAUDIO_MODE_LANG_C = 64;
export const KS_TVAUDIO_PRESET_STEREO = 512;
export const KS_TVAUDIO_PRESET_LANG_A = 4096;
export const KS_TVAUDIO_PRESET_LANG_B = 8192;
export const KS_TVAUDIO_PRESET_LANG_C = 16384;
export const KS_AM_UseNewCSSKey = 1;
export const MAX_SINK_DESCRIPTION_NAME_LENGTH = 32;
export const JACKDESC2_PRESENCE_DETECT_CAPABILITY = 1;
export const JACKDESC2_DYNAMIC_FORMAT_CHANGE_CAPABILITY = 2;
export const KSPROPERTY_AUDIO_BUFFER_DURATION = 1;
export const MAX_RESOURCEGROUPID_LENGTH = 256;
export const AUDIOMODULE_MAX_DATA_SIZE = 64000;
export const AUDIOMODULE_MAX_NAME_CCH_SIZE = 128;
export const AllocatorStrategy_DontCare = 0;
export const AllocatorStrategy_MinimizeNumberOfFrames = 1;
export const AllocatorStrategy_MinimizeFrameSize = 2;
export const AllocatorStrategy_MinimizeNumberOfAllocators = 4;
export const AllocatorStrategy_MaximizeSpeed = 8;
export const PipeFactor_None = 0;
export const PipeFactor_UserModeUpstream = 1;
export const PipeFactor_UserModeDownstream = 2;
export const PipeFactor_MemoryTypes = 4;
export const PipeFactor_Flags = 8;
export const PipeFactor_PhysicalRanges = 16;
export const PipeFactor_OptimalRanges = 32;
export const PipeFactor_FixedCompression = 64;
export const PipeFactor_UnknownCompression = 128;
export const PipeFactor_Buffers = 256;
export const PipeFactor_Align = 512;
export const PipeFactor_PhysicalEnd = 1024;
export const PipeFactor_LogicalEnd = 2048;
export const KSPROPERTY_MEMORY_TRANSPORT = 1;
export const KSRESET_BEGIN = 0;
export const KSRESET_END = 1;
export const KSSTATE_STOP = 0;
export const KSSTATE_ACQUIRE = 1;
export const KSSTATE_PAUSE = 2;
export const KSSTATE_RUN = 3;
export const KSPROPERTY_GENERAL_COMPONENTID = 0;
export const KSMETHOD_STREAMIO_READ = 0;
export const KSMETHOD_STREAMIO_WRITE = 1;
export const KSPROPERTY_MEDIASEEKING_CAPABILITIES = 0;
export const KSPROPERTY_MEDIASEEKING_FORMATS = 1;
export const KSPROPERTY_MEDIASEEKING_TIMEFORMAT = 2;
export const KSPROPERTY_MEDIASEEKING_POSITION = 3;
export const KSPROPERTY_MEDIASEEKING_STOPPOSITION = 4;
export const KSPROPERTY_MEDIASEEKING_POSITIONS = 5;
export const KSPROPERTY_MEDIASEEKING_DURATION = 6;
export const KSPROPERTY_MEDIASEEKING_AVAILABLE = 7;
export const KSPROPERTY_MEDIASEEKING_PREROLL = 8;
export const KSPROPERTY_MEDIASEEKING_CONVERTTIMEFORMAT = 9;
export const KS_SEEKING_NoPositioning = 0;
export const KS_SEEKING_AbsolutePositioning = 1;
export const KS_SEEKING_RelativePositioning = 2;
export const KS_SEEKING_IncrementalPositioning = 3;
export const KS_SEEKING_PositioningBitsMask = 3;
export const KS_SEEKING_SeekToKeyFrame = 4;
export const KS_SEEKING_ReturnTime = 8;
export const KS_SEEKING_CanSeekAbsolute = 1;
export const KS_SEEKING_CanSeekForwards = 2;
export const KS_SEEKING_CanSeekBackwards = 4;
export const KS_SEEKING_CanGetCurrentPos = 8;
export const KS_SEEKING_CanGetStopPos = 16;
export const KS_SEEKING_CanGetDuration = 32;
export const KS_SEEKING_CanPlayBackwards = 64;
export const KSPROPERTY_TOPOLOGY_CATEGORIES = 0;
export const KSPROPERTY_TOPOLOGY_NODES = 1;
export const KSPROPERTY_TOPOLOGY_CONNECTIONS = 2;
export const KSPROPERTY_TOPOLOGY_NAME = 3;
export const KSINTERFACE_STANDARD_STREAMING = 0;
export const KSINTERFACE_STANDARD_LOOPED_STREAMING = 1;
export const KSINTERFACE_STANDARD_CONTROL = 2;
export const KSINTERFACE_FILEIO_STREAMING = 0;
export const KSPROPERTY_PIN_CINSTANCES = 0;
export const KSPROPERTY_PIN_CTYPES = 1;
export const KSPROPERTY_PIN_DATAFLOW = 2;
export const KSPROPERTY_PIN_DATARANGES = 3;
export const KSPROPERTY_PIN_DATAINTERSECTION = 4;
export const KSPROPERTY_PIN_INTERFACES = 5;
export const KSPROPERTY_PIN_MEDIUMS = 6;
export const KSPROPERTY_PIN_COMMUNICATION = 7;
export const KSPROPERTY_PIN_GLOBALCINSTANCES = 8;
export const KSPROPERTY_PIN_NECESSARYINSTANCES = 9;
export const KSPROPERTY_PIN_PHYSICALCONNECTION = 10;
export const KSPROPERTY_PIN_CATEGORY = 11;
export const KSPROPERTY_PIN_NAME = 12;
export const KSPROPERTY_PIN_CONSTRAINEDDATARANGES = 13;
export const KSPROPERTY_PIN_PROPOSEDATAFORMAT = 14;
export const KSPROPERTY_PIN_PROPOSEDATAFORMAT2 = 15;
export const KSPROPERTY_PIN_MODEDATAFORMATS = 16;
export const KSPIN_DATAFLOW_IN = 1;
export const KSPIN_DATAFLOW_OUT = 2;
export const KSPIN_COMMUNICATION_NONE = 0;
export const KSPIN_COMMUNICATION_SINK = 1;
export const KSPIN_COMMUNICATION_SOURCE = 2;
export const KSPIN_COMMUNICATION_BOTH = 3;
export const KSPIN_COMMUNICATION_BRIDGE = 4;
export const KSEVENT_PINCAPS_FORMATCHANGE = 0;
export const KSEVENT_PINCAPS_JACKINFOCHANGE = 1;
export const KSEVENT_VOLUMELIMIT_CHANGED = 0;
export const KSPROPERTY_QUALITY_REPORT = 0;
export const KSPROPERTY_QUALITY_ERROR = 1;
export const KSPROPERTY_CONNECTION_STATE = 0;
export const KSPROPERTY_CONNECTION_PRIORITY = 1;
export const KSPROPERTY_CONNECTION_DATAFORMAT = 2;
export const KSPROPERTY_CONNECTION_ALLOCATORFRAMING = 3;
export const KSPROPERTY_CONNECTION_PROPOSEDATAFORMAT = 4;
export const KSPROPERTY_CONNECTION_ACQUIREORDERING = 5;
export const KSPROPERTY_CONNECTION_ALLOCATORFRAMING_EX = 6;
export const KSPROPERTY_CONNECTION_STARTAT = 7;
export const KSEVENT_STREAMALLOCATOR_INTERNAL_FREEFRAME = 0;
export const KSEVENT_STREAMALLOCATOR_FREEFRAME = 1;
export const KSMETHOD_STREAMALLOCATOR_ALLOC = 0;
export const KSMETHOD_STREAMALLOCATOR_FREE = 1;
export const KSPIN_MDL_CACHING_NOTIFY_CLEANUP = 0;
export const KSPIN_MDL_CACHING_NOTIFY_CLEANALL_WAIT = 1;
export const KSPIN_MDL_CACHING_NOTIFY_CLEANALL_NOWAIT = 2;
export const KSPIN_MDL_CACHING_NOTIFY_ADDSAMPLE = 3;
export const KSPROPERTY_STREAMINTERFACE_HEADERSIZE = 0;
export const KSPROPERTY_STREAM_ALLOCATOR = 0;
export const KSPROPERTY_STREAM_QUALITY = 1;
export const KSPROPERTY_STREAM_DEGRADATION = 2;
export const KSPROPERTY_STREAM_MASTERCLOCK = 3;
export const KSPROPERTY_STREAM_TIMEFORMAT = 4;
export const KSPROPERTY_STREAM_PRESENTATIONTIME = 5;
export const KSPROPERTY_STREAM_PRESENTATIONEXTENT = 6;
export const KSPROPERTY_STREAM_FRAMETIME = 7;
export const KSPROPERTY_STREAM_RATECAPABILITY = 8;
export const KSPROPERTY_STREAM_RATE = 9;
export const KSPROPERTY_STREAM_PIPE_ID = 10;
export const KSPROPERTY_ALLOCATOR_CLEANUP_CACHEDMDLPAGES = 1;
export const KSPROPERTY_CLOCK_TIME = 0;
export const KSPROPERTY_CLOCK_PHYSICALTIME = 1;
export const KSPROPERTY_CLOCK_CORRELATEDTIME = 2;
export const KSPROPERTY_CLOCK_CORRELATEDPHYSICALTIME = 3;
export const KSPROPERTY_CLOCK_RESOLUTION = 4;
export const KSPROPERTY_CLOCK_STATE = 5;
export const KSEVENT_CLOCK_INTERVAL_MARK = 0;
export const KSEVENT_CLOCK_POSITION_MARK = 1;
export const KSEVENT_CONNECTION_POSITIONUPDATE = 0;
export const KSEVENT_CONNECTION_DATADISCONTINUITY = 1;
export const KSEVENT_CONNECTION_TIMEDISCONTINUITY = 2;
export const KSEVENT_CONNECTION_PRIORITY = 3;
export const KSEVENT_CONNECTION_ENDOFSTREAM = 4;
export const KSDEVICE_THERMAL_STATE_LOW = 0;
export const KSDEVICE_THERMAL_STATE_HIGH = 1;
export const KSEVENT_DEVICE_LOST = 0;
export const KSEVENT_DEVICE_PREEMPTED = 1;
export const KSEVENT_DEVICE_THERMAL_HIGH = 2;
export const KSEVENT_DEVICE_THERMAL_LOW = 3;
export const KSDEGRADE_STANDARD_SAMPLE = 0;
export const KSDEGRADE_STANDARD_QUALITY = 1;
export const KSDEGRADE_STANDARD_COMPUTATION = 2;
export const KSDEGRADE_STANDARD_SKIP = 3;
export const KSINTERFACE_MEDIA_MUSIC = 0;
export const KSINTERFACE_MEDIA_WAVE_BUFFERED = 1;
export const KSINTERFACE_MEDIA_WAVE_QUEUED = 2;
export const CONSTRICTOR_OPTION_DISABLE = 0;
export const CONSTRICTOR_OPTION_MUTE = 1;
export const KSMICARRAY_MICTYPE_OMNIDIRECTIONAL = 0;
export const KSMICARRAY_MICTYPE_SUBCARDIOID = 1;
export const KSMICARRAY_MICTYPE_CARDIOID = 2;
export const KSMICARRAY_MICTYPE_SUPERCARDIOID = 3;
export const KSMICARRAY_MICTYPE_HYPERCARDIOID = 4;
export const KSMICARRAY_MICTYPE_8SHAPED = 5;
export const KSMICARRAY_MICTYPE_VENDORDEFINED = 15;
export const KSMICARRAY_MICARRAYTYPE_LINEAR = 0;
export const KSMICARRAY_MICARRAYTYPE_PLANAR = 1;
export const KSMICARRAY_MICARRAYTYPE_3D = 2;
export const KSPROPERTY_DIRECTSOUND3DLISTENER_ALL = 0;
export const KSPROPERTY_DIRECTSOUND3DLISTENER_POSITION = 1;
export const KSPROPERTY_DIRECTSOUND3DLISTENER_VELOCITY = 2;
export const KSPROPERTY_DIRECTSOUND3DLISTENER_ORIENTATION = 3;
export const KSPROPERTY_DIRECTSOUND3DLISTENER_DISTANCEFACTOR = 4;
export const KSPROPERTY_DIRECTSOUND3DLISTENER_ROLLOFFFACTOR = 5;
export const KSPROPERTY_DIRECTSOUND3DLISTENER_DOPPLERFACTOR = 6;
export const KSPROPERTY_DIRECTSOUND3DLISTENER_BATCH = 7;
export const KSPROPERTY_DIRECTSOUND3DLISTENER_ALLOCATION = 8;
export const KSPROPERTY_DIRECTSOUND3DBUFFER_ALL = 0;
export const KSPROPERTY_DIRECTSOUND3DBUFFER_POSITION = 1;
export const KSPROPERTY_DIRECTSOUND3DBUFFER_VELOCITY = 2;
export const KSPROPERTY_DIRECTSOUND3DBUFFER_CONEANGLES = 3;
export const KSPROPERTY_DIRECTSOUND3DBUFFER_CONEORIENTATION = 4;
export const KSPROPERTY_DIRECTSOUND3DBUFFER_CONEOUTSIDEVOLUME = 5;
export const KSPROPERTY_DIRECTSOUND3DBUFFER_MINDISTANCE = 6;
export const KSPROPERTY_DIRECTSOUND3DBUFFER_MAXDISTANCE = 7;
export const KSPROPERTY_DIRECTSOUND3DBUFFER_MODE = 8;
export const FULL_FILTER = 0;
export const LIGHT_FILTER = 1;
export const KSDS3D_FILTER_QUALITY_COUNT = 2;
export const FLOAT_COEFF = 0;
export const SHORT_COEFF = 1;
export const KSDS3D_COEFF_COUNT = 2;
export const DIRECT_FORM = 0;
export const CASCADE_FORM = 1;
export const KSDS3D_FILTER_METHOD_COUNT = 2;
export const DS3D_HRTF_VERSION_1 = 0;
export const KSPROPERTY_HRTF3D_PARAMS = 0;
export const KSPROPERTY_HRTF3D_INITIALIZE = 1;
export const KSPROPERTY_HRTF3D_FILTER_FORMAT = 2;
export const KSPROPERTY_ITD3D_PARAMS = 0;
export const KSPROPERTY_BIBLIOGRAPHIC_LEADER = 1380207648;
export const KSPROPERTY_BIBLIOGRAPHIC_LCCN = 808529952;
export const KSPROPERTY_BIBLIOGRAPHIC_ISBN = 808595488;
export const KSPROPERTY_BIBLIOGRAPHIC_ISSN = 842149920;
export const KSPROPERTY_BIBLIOGRAPHIC_CATALOGINGSOURCE = 808726560;
export const KSPROPERTY_BIBLIOGRAPHIC_MAINPERSONALNAME = 808464672;
export const KSPROPERTY_BIBLIOGRAPHIC_MAINCORPORATEBODY = 808530208;
export const KSPROPERTY_BIBLIOGRAPHIC_MAINMEETINGNAME = 825307424;
export const KSPROPERTY_BIBLIOGRAPHIC_MAINUNIFORMTITLE = 808661280;
export const KSPROPERTY_BIBLIOGRAPHIC_UNIFORMTITLE = 808727072;
export const KSPROPERTY_BIBLIOGRAPHIC_TITLESTATEMENT = 892613152;
export const KSPROPERTY_BIBLIOGRAPHIC_VARYINGFORMTITLE = 909390368;
export const KSPROPERTY_BIBLIOGRAPHIC_PUBLICATION = 808858144;
export const KSPROPERTY_BIBLIOGRAPHIC_PHYSICALDESCRIPTION = 808465184;
export const KSPROPERTY_BIBLIOGRAPHIC_ADDEDENTRYTITLE = 808727584;
export const KSPROPERTY_BIBLIOGRAPHIC_SERIESSTATEMENT = 809055264;
export const KSPROPERTY_BIBLIOGRAPHIC_GENERALNOTE = 808465696;
export const KSPROPERTY_BIBLIOGRAPHIC_BIBLIOGRAPHYNOTE = 875574560;
export const KSPROPERTY_BIBLIOGRAPHIC_CONTENTSNOTE = 892351776;
export const KSPROPERTY_BIBLIOGRAPHIC_CREATIONCREDIT = 942683424;
export const KSPROPERTY_BIBLIOGRAPHIC_CITATION = 808531232;
export const KSPROPERTY_BIBLIOGRAPHIC_PARTICIPANT = 825308448;
export const KSPROPERTY_BIBLIOGRAPHIC_SUMMARY = 808596768;
export const KSPROPERTY_BIBLIOGRAPHIC_TARGETAUDIENCE = 825373984;
export const KSPROPERTY_BIBLIOGRAPHIC_ADDEDFORMAVAILABLE = 808662304;
export const KSPROPERTY_BIBLIOGRAPHIC_SYSTEMDETAILS = 942880032;
export const KSPROPERTY_BIBLIOGRAPHIC_AWARDS = 909653280;
export const KSPROPERTY_BIBLIOGRAPHIC_ADDEDENTRYPERSONALNAME = 808465952;
export const KSPROPERTY_BIBLIOGRAPHIC_ADDEDENTRYTOPICALTERM = 808793632;
export const KSPROPERTY_BIBLIOGRAPHIC_ADDEDENTRYGEOGRAPHIC = 825570848;
export const KSPROPERTY_BIBLIOGRAPHIC_INDEXTERMGENRE = 892679712;
export const KSPROPERTY_BIBLIOGRAPHIC_INDEXTERMCURRICULUM = 943011360;
export const KSPROPERTY_BIBLIOGRAPHIC_ADDEDENTRYUNIFORMTITLE = 808662816;
export const KSPROPERTY_BIBLIOGRAPHIC_ADDEDENTRYRELATED = 808728352;
export const KSPROPERTY_BIBLIOGRAPHIC_SERIESSTATEMENTPERSONALNAME = 808466464;
export const KSPROPERTY_BIBLIOGRAPHIC_SERIESSTATEMENTUNIFORMTITLE = 808663072;
export const KSPROPERTY_TOPOLOGYNODE_ENABLE = 1;
export const KSPROPERTY_TOPOLOGYNODE_RESET = 2;
export const KSPROPERTY_RTAUDIO_GETPOSITIONFUNCTION = 0;
export const KSPROPERTY_RTAUDIO_BUFFER = 1;
export const KSPROPERTY_RTAUDIO_HWLATENCY = 2;
export const KSPROPERTY_RTAUDIO_POSITIONREGISTER = 3;
export const KSPROPERTY_RTAUDIO_CLOCKREGISTER = 4;
export const KSPROPERTY_RTAUDIO_BUFFER_WITH_NOTIFICATION = 5;
export const KSPROPERTY_RTAUDIO_REGISTER_NOTIFICATION_EVENT = 6;
export const KSPROPERTY_RTAUDIO_UNREGISTER_NOTIFICATION_EVENT = 7;
export const KSPROPERTY_RTAUDIO_QUERY_NOTIFICATION_SUPPORT = 8;
export const KSPROPERTY_RTAUDIO_PACKETCOUNT = 9;
export const KSPROPERTY_RTAUDIO_PRESENTATION_POSITION = 10;
export const KSPROPERTY_RTAUDIO_GETREADPACKET = 11;
export const KSPROPERTY_RTAUDIO_SETWRITEPACKET = 12;
export const KSPROPERTY_RTAUDIO_PACKETVREGISTER = 13;
export const KSPROPERTY_ONESHOT_RECONNECT = 0;
export const KSPROPERTY_ONESHOT_DISCONNECT = 1;
export const KSPROPERTY_DRMAUDIOSTREAM_CONTENTID = 0;
export const KSPROPERTY_INTERLEAVEDAUDIO_FORMATINFORMATION = 1;
export const KSPROPERTY_SOUNDDETECTOR_SUPPORTEDPATTERNS = 1;
export const KSPROPERTY_SOUNDDETECTOR_PATTERNS = 2;
export const KSPROPERTY_SOUNDDETECTOR_ARMED = 3;
export const KSPROPERTY_SOUNDDETECTOR_MATCHRESULT = 4;
export const KSPROPERTY_SOUNDDETECTOR_RESET = 5;
export const KSPROPERTY_SOUNDDETECTOR_STREAMINGSUPPORT = 6;
export const KSEVENT_SOUNDDETECTOR_MATCHDETECTED = 1;
export const KSPROPERTY_AUDIO_LATENCY = 1;
export const KSPROPERTY_AUDIO_COPY_PROTECTION = 2;
export const KSPROPERTY_AUDIO_CHANNEL_CONFIG = 3;
export const KSPROPERTY_AUDIO_VOLUMELEVEL = 4;
export const KSPROPERTY_AUDIO_POSITION = 5;
export const KSPROPERTY_AUDIO_DYNAMIC_RANGE = 6;
export const KSPROPERTY_AUDIO_QUALITY = 7;
export const KSPROPERTY_AUDIO_SAMPLING_RATE = 8;
export const KSPROPERTY_AUDIO_DYNAMIC_SAMPLING_RATE = 9;
export const KSPROPERTY_AUDIO_MIX_LEVEL_TABLE = 10;
export const KSPROPERTY_AUDIO_MIX_LEVEL_CAPS = 11;
export const KSPROPERTY_AUDIO_MUX_SOURCE = 12;
export const KSPROPERTY_AUDIO_MUTE = 13;
export const KSPROPERTY_AUDIO_BASS = 14;
export const KSPROPERTY_AUDIO_MID = 15;
export const KSPROPERTY_AUDIO_TREBLE = 16;
export const KSPROPERTY_AUDIO_BASS_BOOST = 17;
export const KSPROPERTY_AUDIO_EQ_LEVEL = 18;
export const KSPROPERTY_AUDIO_NUM_EQ_BANDS = 19;
export const KSPROPERTY_AUDIO_EQ_BANDS = 20;
export const KSPROPERTY_AUDIO_AGC = 21;
export const KSPROPERTY_AUDIO_DELAY = 22;
export const KSPROPERTY_AUDIO_LOUDNESS = 23;
export const KSPROPERTY_AUDIO_WIDE_MODE = 24;
export const KSPROPERTY_AUDIO_WIDENESS = 25;
export const KSPROPERTY_AUDIO_REVERB_LEVEL = 26;
export const KSPROPERTY_AUDIO_CHORUS_LEVEL = 27;
export const KSPROPERTY_AUDIO_DEV_SPECIFIC = 28;
export const KSPROPERTY_AUDIO_DEMUX_DEST = 29;
export const KSPROPERTY_AUDIO_STEREO_ENHANCE = 30;
export const KSPROPERTY_AUDIO_MANUFACTURE_GUID = 31;
export const KSPROPERTY_AUDIO_PRODUCT_GUID = 32;
export const KSPROPERTY_AUDIO_CPU_RESOURCES = 33;
export const KSPROPERTY_AUDIO_STEREO_SPEAKER_GEOMETRY = 34;
export const KSPROPERTY_AUDIO_SURROUND_ENCODE = 35;
export const KSPROPERTY_AUDIO_3D_INTERFACE = 36;
export const KSPROPERTY_AUDIO_PEAKMETER = 37;
export const KSPROPERTY_AUDIO_ALGORITHM_INSTANCE = 38;
export const KSPROPERTY_AUDIO_FILTER_STATE = 39;
export const KSPROPERTY_AUDIO_PREFERRED_STATUS = 40;
export const KSPROPERTY_AUDIO_PEQ_MAX_BANDS = 41;
export const KSPROPERTY_AUDIO_PEQ_NUM_BANDS = 42;
export const KSPROPERTY_AUDIO_PEQ_BAND_CENTER_FREQ = 43;
export const KSPROPERTY_AUDIO_PEQ_BAND_Q_FACTOR = 44;
export const KSPROPERTY_AUDIO_PEQ_BAND_LEVEL = 45;
export const KSPROPERTY_AUDIO_CHORUS_MODULATION_RATE = 46;
export const KSPROPERTY_AUDIO_CHORUS_MODULATION_DEPTH = 47;
export const KSPROPERTY_AUDIO_REVERB_TIME = 48;
export const KSPROPERTY_AUDIO_REVERB_DELAY_FEEDBACK = 49;
export const KSPROPERTY_AUDIO_POSITIONEX = 50;
export const KSPROPERTY_AUDIO_MIC_ARRAY_GEOMETRY = 51;
export const KSPROPERTY_AUDIO_PRESENTATION_POSITION = 52;
export const KSPROPERTY_AUDIO_WAVERT_CURRENT_WRITE_POSITION = 53;
export const KSPROPERTY_AUDIO_LINEAR_BUFFER_POSITION = 54;
export const KSPROPERTY_AUDIO_PEAKMETER2 = 55;
export const KSPROPERTY_AUDIO_WAVERT_CURRENT_WRITE_LASTBUFFER_POSITION = 56;
export const KSPROPERTY_AUDIO_VOLUMELIMIT_ENGAGED = 57;
export const KSPROPERTY_AUDIO_MIC_SENSITIVITY = 58;
export const KSPROPERTY_AUDIO_MIC_SNR = 59;
export const KSPROPERTY_AUDIO_MIC_SENSITIVITY2 = 60;
export const KSPROPERTY_TELEPHONY_PROVIDERID = 0;
export const KSPROPERTY_TELEPHONY_CALLINFO = 1;
export const KSPROPERTY_TELEPHONY_CALLCONTROL = 2;
export const KSPROPERTY_TELEPHONY_PROVIDERCHANGE = 3;
export const KSPROPERTY_TELEPHONY_CALLHOLD = 4;
export const KSPROPERTY_TELEPHONY_MUTE_TX = 5;
export const TELEPHONY_CALLTYPE_CIRCUITSWITCHED = 0;
export const TELEPHONY_CALLTYPE_PACKETSWITCHED_LTE = 1;
export const TELEPHONY_CALLTYPE_PACKETSWITCHED_WLAN = 2;
export const TELEPHONY_CALLCONTROLOP_DISABLE = 0;
export const TELEPHONY_CALLCONTROLOP_ENABLE = 1;
export const TELEPHONY_PROVIDERCHANGEOP_END = 0;
export const TELEPHONY_PROVIDERCHANGEOP_BEGIN = 1;
export const TELEPHONY_PROVIDERCHANGEOP_CANCEL = 2;
export const TELEPHONY_CALLSTATE_DISABLED = 0;
export const TELEPHONY_CALLSTATE_ENABLED = 1;
export const TELEPHONY_CALLSTATE_HOLD = 2;
export const TELEPHONY_CALLSTATE_PROVIDERTRANSITION = 3;
export const KSPROPERTY_TELEPHONY_ENDPOINTIDPAIR = 0;
export const KSPROPERTY_TELEPHONY_VOLUME = 1;
export const KSPROPERTY_FMRX_ENDPOINTID = 0;
export const KSPROPERTY_FMRX_VOLUME = 1;
export const KSPROPERTY_FMRX_ANTENNAENDPOINTID = 2;
export const KSPROPERTY_FMRX_STATE = 0;
export const KSEVENT_TELEPHONY_ENDPOINTPAIRS_CHANGED = 0;
export const KSMETHOD_WAVETABLE_WAVE_ALLOC = 0;
export const KSMETHOD_WAVETABLE_WAVE_FREE = 1;
export const KSMETHOD_WAVETABLE_WAVE_FIND = 2;
export const KSMETHOD_WAVETABLE_WAVE_WRITE = 3;
export const KSPROPERTY_WAVE_COMPATIBLE_CAPABILITIES = 0;
export const KSPROPERTY_WAVE_INPUT_CAPABILITIES = 1;
export const KSPROPERTY_WAVE_OUTPUT_CAPABILITIES = 2;
export const KSPROPERTY_WAVE_BUFFER = 3;
export const KSPROPERTY_WAVE_FREQUENCY = 4;
export const KSPROPERTY_WAVE_VOLUME = 5;
export const KSPROPERTY_WAVE_PAN = 6;
export const KSPROPERTY_CYCLIC_POSITION = 0;
export const KSEVENT_CONTROL_CHANGE = 0;
export const KSEVENT_LOOPEDSTREAMING_POSITION = 0;
export const KSPROPERTY_MPEG2VID_MODES = 0;
export const KSPROPERTY_MPEG2VID_CUR_MODE = 1;
export const KSPROPERTY_MPEG2VID_4_3_RECT = 2;
export const KSPROPERTY_MPEG2VID_16_9_RECT = 3;
export const KSPROPERTY_MPEG2VID_16_9_PANSCAN = 4;
export const KSPROPERTY_AC3_ERROR_CONCEALMENT = 1;
export const KSPROPERTY_AC3_ALTERNATE_AUDIO = 2;
export const KSPROPERTY_AC3_DOWNMIX = 3;
export const KSPROPERTY_AC3_BIT_STREAM_MODE = 4;
export const KSPROPERTY_AC3_DIALOGUE_LEVEL = 5;
export const KSPROPERTY_AC3_LANGUAGE_CODE = 6;
export const KSPROPERTY_AC3_ROOM_TYPE = 7;
export const KSPROPERTY_AUDDECOUT_MODES = 0;
export const KSPROPERTY_AUDDECOUT_CUR_MODE = 1;
export const KSPROPERTY_DVDSUBPIC_PALETTE = 0;
export const KSPROPERTY_DVDSUBPIC_HLI = 1;
export const KSPROPERTY_DVDSUBPIC_COMPOSIT_ON = 2;
export const KSPROPERTY_DVDCOPY_CHLG_KEY = 1;
export const KSPROPERTY_DVDCOPY_DVD_KEY1 = 2;
export const KSPROPERTY_DVDCOPY_DEC_KEY2 = 3;
export const KSPROPERTY_DVDCOPY_TITLE_KEY = 4;
export const KSPROPERTY_COPY_MACROVISION = 5;
export const KSPROPERTY_DVDCOPY_REGION = 6;
export const KSPROPERTY_DVDCOPY_SET_COPY_STATE = 7;
export const KSPROPERTY_DVDCOPY_DISC_KEY = 128;
export const KS_DVDCOPYSTATE_INITIALIZE = 0;
export const KS_DVDCOPYSTATE_INITIALIZE_TITLE = 1;
export const KS_DVDCOPYSTATE_AUTHENTICATION_NOT_REQUIRED = 2;
export const KS_DVDCOPYSTATE_AUTHENTICATION_REQUIRED = 3;
export const KS_DVDCOPYSTATE_DONE = 4;
export const KS_MACROVISION_DISABLED = 0;
export const KS_MACROVISION_LEVEL1 = 1;
export const KS_MACROVISION_LEVEL2 = 2;
export const KS_MACROVISION_LEVEL3 = 3;
export const KS_MPEG2Level_Low = 0;
export const KS_MPEG2Level_Main = 1;
export const KS_MPEG2Level_High1440 = 2;
export const KS_MPEG2Level_High = 3;
export const KS_MPEG2Profile_Simple = 0;
export const KS_MPEG2Profile_Main = 1;
export const KS_MPEG2Profile_SNRScalable = 2;
export const KS_MPEG2Profile_SpatiallyScalable = 3;
export const KS_MPEG2Profile_High = 4;
export const KSPROPERTY_VBICAP_PROPERTIES_PROTECTION = 1;
export const KSPROPERTY_VBICODECFILTERING_SCANLINES_REQUESTED_BIT_ARRAY = 1;
export const KSPROPERTY_VBICODECFILTERING_SCANLINES_DISCOVERED_BIT_ARRAY = 2;
export const KSPROPERTY_VBICODECFILTERING_SUBSTREAMS_REQUESTED_BIT_ARRAY = 3;
export const KSPROPERTY_VBICODECFILTERING_SUBSTREAMS_DISCOVERED_BIT_ARRAY = 4;
export const KSPROPERTY_VBICODECFILTERING_STATISTICS = 5;
export const KS_CAPTURE_ALLOC_INVALID = 0;
export const KS_CAPTURE_ALLOC_SYSTEM = 1;
export const KS_CAPTURE_ALLOC_VRAM = 2;
export const KS_CAPTURE_ALLOC_SYSTEM_AGP = 4;
export const KS_CAPTURE_ALLOC_VRAM_MAPPED = 8;
export const KS_CAPTURE_ALLOC_SECURE_BUFFER = 16;
export const KSPROPERTY_DISPLAY_ADAPTER_GUID = 1;
export const KSPROPERTY_PREFERRED_CAPTURE_SURFACE = 2;
export const KSPROPERTY_CURRENT_CAPTURE_SURFACE = 3;
export const KSPROPERTY_MAP_CAPTURE_HANDLE_TO_VRAM_ADDRESS = 4;
export const KSPROPERTY_MPEG4_MEDIATYPE_SD_BOX = 1;
export const KSEVENT_DYNAMIC_FORMAT_CHANGE = 0;
export const KS_AnalogVideo_None = 0;
export const KS_AnalogVideo_NTSC_M = 1;
export const KS_AnalogVideo_NTSC_M_J = 2;
export const KS_AnalogVideo_NTSC_433 = 4;
export const KS_AnalogVideo_PAL_B = 16;
export const KS_AnalogVideo_PAL_D = 32;
export const KS_AnalogVideo_PAL_G = 64;
export const KS_AnalogVideo_PAL_H = 128;
export const KS_AnalogVideo_PAL_I = 256;
export const KS_AnalogVideo_PAL_M = 512;
export const KS_AnalogVideo_PAL_N = 1024;
export const KS_AnalogVideo_PAL_60 = 2048;
export const KS_AnalogVideo_SECAM_B = 4096;
export const KS_AnalogVideo_SECAM_D = 8192;
export const KS_AnalogVideo_SECAM_G = 16384;
export const KS_AnalogVideo_SECAM_H = 32768;
export const KS_AnalogVideo_SECAM_K = 65536;
export const KS_AnalogVideo_SECAM_K1 = 131072;
export const KS_AnalogVideo_SECAM_L = 262144;
export const KS_AnalogVideo_SECAM_L1 = 524288;
export const KS_AnalogVideo_PAL_N_COMBO = 1048576;
export const KSPROPERTY_ALLOCATOR_CONTROL_HONOR_COUNT = 0;
export const KSPROPERTY_ALLOCATOR_CONTROL_SURFACE_SIZE = 1;
export const KSPROPERTY_ALLOCATOR_CONTROL_CAPTURE_CAPS = 2;
export const KSPROPERTY_ALLOCATOR_CONTROL_CAPTURE_INTERLEAVE = 3;
export const KSPROPERTY_VIDEOPROCAMP_BRIGHTNESS = 0;
export const KSPROPERTY_VIDEOPROCAMP_CONTRAST = 1;
export const KSPROPERTY_VIDEOPROCAMP_HUE = 2;
export const KSPROPERTY_VIDEOPROCAMP_SATURATION = 3;
export const KSPROPERTY_VIDEOPROCAMP_SHARPNESS = 4;
export const KSPROPERTY_VIDEOPROCAMP_GAMMA = 5;
export const KSPROPERTY_VIDEOPROCAMP_COLORENABLE = 6;
export const KSPROPERTY_VIDEOPROCAMP_WHITEBALANCE = 7;
export const KSPROPERTY_VIDEOPROCAMP_BACKLIGHT_COMPENSATION = 8;
export const KSPROPERTY_VIDEOPROCAMP_GAIN = 9;
export const KSPROPERTY_VIDEOPROCAMP_DIGITAL_MULTIPLIER = 10;
export const KSPROPERTY_VIDEOPROCAMP_DIGITAL_MULTIPLIER_LIMIT = 11;
export const KSPROPERTY_VIDEOPROCAMP_WHITEBALANCE_COMPONENT = 12;
export const KSPROPERTY_VIDEOPROCAMP_POWERLINE_FREQUENCY = 13;
export const KSPROPERTY_SELECTOR_SOURCE_NODE_ID = 0;
export const KSPROPERTY_SELECTOR_NUM_SOURCES = 1;
export const KSPROPERTY_TUNER_CAPS = 0;
export const KSPROPERTY_TUNER_MODE_CAPS = 1;
export const KSPROPERTY_TUNER_MODE = 2;
export const KSPROPERTY_TUNER_STANDARD = 3;
export const KSPROPERTY_TUNER_FREQUENCY = 4;
export const KSPROPERTY_TUNER_INPUT = 5;
export const KSPROPERTY_TUNER_STATUS = 6;
export const KSPROPERTY_TUNER_IF_MEDIUM = 7;
export const KSPROPERTY_TUNER_SCAN_CAPS = 8;
export const KSPROPERTY_TUNER_SCAN_STATUS = 9;
export const KSPROPERTY_TUNER_STANDARD_MODE = 10;
export const KSPROPERTY_TUNER_NETWORKTYPE_SCAN_CAPS = 11;
export const KSPROPERTY_TUNER_MODE_TV = 1;
export const KSPROPERTY_TUNER_MODE_FM_RADIO = 2;
export const KSPROPERTY_TUNER_MODE_AM_RADIO = 4;
export const KSPROPERTY_TUNER_MODE_DSS = 8;
export const KSPROPERTY_TUNER_MODE_ATSC = 16;
export const KS_TUNER_TUNING_EXACT = 1;
export const KS_TUNER_TUNING_FINE = 2;
export const KS_TUNER_TUNING_COARSE = 3;
export const KS_TUNER_STRATEGY_PLL = 1;
export const KS_TUNER_STRATEGY_SIGNAL_STRENGTH = 2;
export const KS_TUNER_STRATEGY_DRIVER_TUNES = 4;
export const Tuner_LockType_None = 0;
export const Tuner_LockType_Within_Scan_Sensing_Range = 1;
export const Tuner_LockType_Locked = 2;
export const KSEVENT_TUNER_CHANGED = 0;
export const KSEVENT_TUNER_INITIATE_SCAN = 1;
export const KSPROPERTY_VIDEOENCODER_CAPS = 0;
export const KSPROPERTY_VIDEOENCODER_STANDARD = 1;
export const KSPROPERTY_VIDEOENCODER_COPYPROTECTION = 2;
export const KSPROPERTY_VIDEOENCODER_CC_ENABLE = 3;
export const KSPROPERTY_VIDEODECODER_CAPS = 0;
export const KSPROPERTY_VIDEODECODER_STANDARD = 1;
export const KSPROPERTY_VIDEODECODER_STATUS = 2;
export const KSPROPERTY_VIDEODECODER_OUTPUT_ENABLE = 3;
export const KSPROPERTY_VIDEODECODER_VCR_TIMING = 4;
export const KSPROPERTY_VIDEODECODER_STATUS2 = 5;
export const KS_VIDEODECODER_FLAGS_CAN_DISABLE_OUTPUT = 1;
export const KS_VIDEODECODER_FLAGS_CAN_USE_VCR_LOCKING = 2;
export const KS_VIDEODECODER_FLAGS_CAN_INDICATE_LOCKED = 4;
export const KSEVENT_VIDEODECODER_CHANGED = 0;
export const KSEVENT_CAMERACONTROL_FOCUS = 0;
export const KSEVENT_CAMERACONTROL_ZOOM = 1;
export const KSPROPERTY_CAMERACONTROL_PAN = 0;
export const KSPROPERTY_CAMERACONTROL_TILT = 1;
export const KSPROPERTY_CAMERACONTROL_ROLL = 2;
export const KSPROPERTY_CAMERACONTROL_ZOOM = 3;
export const KSPROPERTY_CAMERACONTROL_EXPOSURE = 4;
export const KSPROPERTY_CAMERACONTROL_IRIS = 5;
export const KSPROPERTY_CAMERACONTROL_FOCUS = 6;
export const KSPROPERTY_CAMERACONTROL_SCANMODE = 7;
export const KSPROPERTY_CAMERACONTROL_PRIVACY = 8;
export const KSPROPERTY_CAMERACONTROL_PANTILT = 9;
export const KSPROPERTY_CAMERACONTROL_PAN_RELATIVE = 10;
export const KSPROPERTY_CAMERACONTROL_TILT_RELATIVE = 11;
export const KSPROPERTY_CAMERACONTROL_ROLL_RELATIVE = 12;
export const KSPROPERTY_CAMERACONTROL_ZOOM_RELATIVE = 13;
export const KSPROPERTY_CAMERACONTROL_EXPOSURE_RELATIVE = 14;
export const KSPROPERTY_CAMERACONTROL_IRIS_RELATIVE = 15;
export const KSPROPERTY_CAMERACONTROL_FOCUS_RELATIVE = 16;
export const KSPROPERTY_CAMERACONTROL_PANTILT_RELATIVE = 17;
export const KSPROPERTY_CAMERACONTROL_FOCAL_LENGTH = 18;
export const KSPROPERTY_CAMERACONTROL_AUTO_EXPOSURE_PRIORITY = 19;
export const KS_CAMERACONTROL_ASYNC_START = 1;
export const KS_CAMERACONTROL_ASYNC_STOP = 2;
export const KS_CAMERACONTROL_ASYNC_RESET = 3;
export const KSPROPERTY_CAMERACONTROL_FLASH_PROPERTY_ID = 0;
export const KSPROPERTY_CAMERACONTROL_VIDEO_STABILIZATION_MODE_PROPERTY_ID = 0;
export const KSPROPERTY_CAMERACONTROL_REGION_OF_INTEREST_PROPERTY_ID = 0;
export const KSPROPERTY_CAMERACONTROL_IMAGE_PIN_CAPABILITY_PROPERTY_ID = 0;
export const KSPROPERTY_CAMERACONTROL_EXTENDED_PHOTOMODE = 0;
export const KSPROPERTY_CAMERACONTROL_EXTENDED_PHOTOFRAMERATE = 1;
export const KSPROPERTY_CAMERACONTROL_EXTENDED_PHOTOMAXFRAMERATE = 2;
export const KSPROPERTY_CAMERACONTROL_EXTENDED_PHOTOTRIGGERTIME = 3;
export const KSPROPERTY_CAMERACONTROL_EXTENDED_WARMSTART = 4;
export const KSPROPERTY_CAMERACONTROL_EXTENDED_MAXVIDFPS_PHOTORES = 5;
export const KSPROPERTY_CAMERACONTROL_EXTENDED_PHOTOTHUMBNAIL = 6;
export const KSPROPERTY_CAMERACONTROL_EXTENDED_SCENEMODE = 7;
export const KSPROPERTY_CAMERACONTROL_EXTENDED_TORCHMODE = 8;
export const KSPROPERTY_CAMERACONTROL_EXTENDED_FLASHMODE = 9;
export const KSPROPERTY_CAMERACONTROL_EXTENDED_OPTIMIZATIONHINT = 10;
export const KSPROPERTY_CAMERACONTROL_EXTENDED_WHITEBALANCEMODE = 11;
export const KSPROPERTY_CAMERACONTROL_EXTENDED_EXPOSUREMODE = 12;
export const KSPROPERTY_CAMERACONTROL_EXTENDED_FOCUSMODE = 13;
export const KSPROPERTY_CAMERACONTROL_EXTENDED_ISO = 14;
export const KSPROPERTY_CAMERACONTROL_EXTENDED_FIELDOFVIEW = 15;
export const KSPROPERTY_CAMERACONTROL_EXTENDED_EVCOMPENSATION = 16;
export const KSPROPERTY_CAMERACONTROL_EXTENDED_CAMERAANGLEOFFSET = 17;
export const KSPROPERTY_CAMERACONTROL_EXTENDED_METADATA = 18;
export const KSPROPERTY_CAMERACONTROL_EXTENDED_FOCUSPRIORITY = 19;
export const KSPROPERTY_CAMERACONTROL_EXTENDED_FOCUSSTATE = 20;
export const KSPROPERTY_CAMERACONTROL_EXTENDED_ROI_CONFIGCAPS = 21;
export const KSPROPERTY_CAMERACONTROL_EXTENDED_ROI_ISPCONTROL = 22;
export const KSPROPERTY_CAMERACONTROL_EXTENDED_PHOTOCONFIRMATION = 23;
export const KSPROPERTY_CAMERACONTROL_EXTENDED_ZOOM = 24;
export const KSPROPERTY_CAMERACONTROL_EXTENDED_MCC = 25;
export const KSPROPERTY_CAMERACONTROL_EXTENDED_ISO_ADVANCED = 26;
export const KSPROPERTY_CAMERACONTROL_EXTENDED_VIDEOSTABILIZATION = 27;
export const KSPROPERTY_CAMERACONTROL_EXTENDED_VFR = 28;
export const KSPROPERTY_CAMERACONTROL_EXTENDED_FACEDETECTION = 29;
export const KSPROPERTY_CAMERACONTROL_EXTENDED_VIDEOHDR = 30;
export const KSPROPERTY_CAMERACONTROL_EXTENDED_HISTOGRAM = 31;
export const KSPROPERTY_CAMERACONTROL_EXTENDED_OIS = 32;
export const KSPROPERTY_CAMERACONTROL_EXTENDED_ADVANCEDPHOTO = 33;
export const KSPROPERTY_CAMERACONTROL_EXTENDED_PROFILE = 34;
export const KSPROPERTY_CAMERACONTROL_EXTENDED_FACEAUTH_MODE = 35;
export const KSPROPERTY_CAMERACONTROL_EXTENDED_SECURE_MODE = 36;
export const KSPROPERTY_CAMERACONTROL_EXTENDED_VIDEOTEMPORALDENOISING = 37;
export const KSPROPERTY_CAMERACONTROL_EXTENDED_IRTORCHMODE = 38;
export const KSPROPERTY_CAMERACONTROL_EXTENDED_RELATIVEPANELOPTIMIZATION = 39;
export const KSPROPERTY_CAMERACONTROL_EXTENDED_EYEGAZECORRECTION = 40;
export const KSPROPERTY_CAMERACONTROL_EXTENDED_BACKGROUNDSEGMENTATION = 41;
export const KSPROPERTY_CAMERACONTROL_EXTENDED_DIGITALWINDOW_CONFIGCAPS = 42;
export const KSPROPERTY_CAMERACONTROL_EXTENDED_DIGITALWINDOW = 43;
export const KSPROPERTY_CAMERACONTROL_EXTENDED_END = 44;
export const KSPROPERTY_CAMERACONTROL_EXTENDED_END2 = 44;
export const KSEVENT_PHOTO_SAMPLE_SCANNED = 0;
export const KSCAMERA_EXTENDEDPROP_WHITEBALANCE_TEMPERATURE = 1;
export const KSCAMERA_EXTENDEDPROP_WHITEBALANCE_PRESET = 2;
export const KSCAMERA_EXTENDEDPROP_WBPRESET_CLOUDY = 1;
export const KSCAMERA_EXTENDEDPROP_WBPRESET_DAYLIGHT = 2;
export const KSCAMERA_EXTENDEDPROP_WBPRESET_FLASH = 3;
export const KSCAMERA_EXTENDEDPROP_WBPRESET_FLUORESCENT = 4;
export const KSCAMERA_EXTENDEDPROP_WBPRESET_TUNGSTEN = 5;
export const KSCAMERA_EXTENDEDPROP_WBPRESET_CANDLELIGHT = 6;
export const KSPROPERTY_CAMERA_PHOTOTRIGGERTIME_CLEAR = 0;
export const KSPROPERTY_CAMERA_PHOTOTRIGGERTIME_SET = 1;
export const KSCAMERA_EXTENDEDPROP_MetadataAlignment_16 = 4;
export const KSCAMERA_EXTENDEDPROP_MetadataAlignment_32 = 5;
export const KSCAMERA_EXTENDEDPROP_MetadataAlignment_64 = 6;
export const KSCAMERA_EXTENDEDPROP_MetadataAlignment_128 = 7;
export const KSCAMERA_EXTENDEDPROP_MetadataAlignment_256 = 8;
export const KSCAMERA_EXTENDEDPROP_MetadataAlignment_512 = 9;
export const KSCAMERA_EXTENDEDPROP_MetadataAlignment_1024 = 10;
export const KSCAMERA_EXTENDEDPROP_MetadataAlignment_2048 = 11;
export const KSCAMERA_EXTENDEDPROP_MetadataAlignment_4096 = 12;
export const KSCAMERA_EXTENDEDPROP_MetadataAlignment_8192 = 13;
export const MetadataId_Standard_Start = 1;
export const MetadataId_PhotoConfirmation = 1;
export const MetadataId_UsbVideoHeader = 2;
export const MetadataId_CaptureStats = 3;
export const MetadataId_CameraExtrinsics = 4;
export const MetadataId_CameraIntrinsics = 5;
export const MetadataId_FrameIllumination = 6;
export const MetadataId_DigitalWindow = 7;
export const MetadataId_BackgroundSegmentationMask = 8;
export const MetadataId_Standard_End = 8;
export const MetadataId_Custom_Start = `-2147483648`;
export const KSCAMERA_EXTENDEDPROP_FOCUSSTATE_UNINITIALIZED = 0;
export const KSCAMERA_EXTENDEDPROP_FOCUSSTATE_LOST = 1;
export const KSCAMERA_EXTENDEDPROP_FOCUSSTATE_SEARCHING = 2;
export const KSCAMERA_EXTENDEDPROP_FOCUSSTATE_FOCUSED = 3;
export const KSCAMERA_EXTENDEDPROP_FOCUSSTATE_FAILED = 4;
export const KSCAMERA_EXTENDEDPROP_ROITYPE_UNKNOWN = 0;
export const KSCAMERA_EXTENDEDPROP_ROITYPE_FACE = 1;
export const KSPROPERTY_CAMERACONTROL_PERFRAMESETTING_CAPABILITY = 0;
export const KSPROPERTY_CAMERACONTROL_PERFRAMESETTING_SET = 1;
export const KSPROPERTY_CAMERACONTROL_PERFRAMESETTING_CLEAR = 2;
export const KSCAMERA_PERFRAMESETTING_ITEM_EXPOSURE_TIME = 1;
export const KSCAMERA_PERFRAMESETTING_ITEM_FLASH = 2;
export const KSCAMERA_PERFRAMESETTING_ITEM_EXPOSURE_COMPENSATION = 3;
export const KSCAMERA_PERFRAMESETTING_ITEM_ISO = 4;
export const KSCAMERA_PERFRAMESETTING_ITEM_FOCUS = 5;
export const KSCAMERA_PERFRAMESETTING_ITEM_PHOTOCONFIRMATION = 6;
export const KSCAMERA_PERFRAMESETTING_ITEM_CUSTOM = 7;
export const KSPROPERTY_NETWORKCAMERACONTROL_NTPINFO_TYPE_DISABLE = 0;
export const KSPROPERTY_NETWORKCAMERACONTROL_NTPINFO_TYPE_HOSTNTP = 1;
export const KSPROPERTY_NETWORKCAMERACONTROL_NTPINFO_TYPE_CUSTOM = 2;
export const KSPROPERTY_NETWORKCAMERACONTROL_NTP = 0;
export const KSPROPERTY_NETWORKCAMERACONTROL_URI = 1;
export const KSPROPERTY_NETWORKCAMERACONTROL_METADATA = 2;
export const KSPROPERTY_NETWORKCAMERACONTROL_EVENTTOPICS_XML = 3;
export const KSPROPERTY_NETWORKCAMERACONTROL_METADATA_TYPE_EVENTSINFO = 0;
export const KSPROPERTY_EXTDEVICE_ID = 0;
export const KSPROPERTY_EXTDEVICE_VERSION = 1;
export const KSPROPERTY_EXTDEVICE_POWER_STATE = 2;
export const KSPROPERTY_EXTDEVICE_PORT = 3;
export const KSPROPERTY_EXTDEVICE_CAPABILITIES = 4;
export const SLE_ERROR = 1;
export const SLE_MINORERROR = 2;
export const SLE_WARNING = 3;
export const KSPROPERTY_EXTXPORT_CAPABILITIES = 0;
export const KSPROPERTY_EXTXPORT_INPUT_SIGNAL_MODE = 1;
export const KSPROPERTY_EXTXPORT_OUTPUT_SIGNAL_MODE = 2;
export const KSPROPERTY_EXTXPORT_LOAD_MEDIUM = 3;
export const KSPROPERTY_EXTXPORT_MEDIUM_INFO = 4;
export const KSPROPERTY_EXTXPORT_STATE = 5;
export const KSPROPERTY_EXTXPORT_STATE_NOTIFY = 6;
export const KSPROPERTY_EXTXPORT_TIMECODE_SEARCH = 7;
export const KSPROPERTY_EXTXPORT_ATN_SEARCH = 8;
export const KSPROPERTY_EXTXPORT_RTC_SEARCH = 9;
export const KSPROPERTY_RAW_AVC_CMD = 10;
export const KSPROPERTY_TIMECODE_READER = 0;
export const KSPROPERTY_ATN_READER = 1;
export const KSPROPERTY_RTC_READER = 2;
export const ED_DEVCAP_TIMECODE_READ = 4121;
export const ED_DEVCAP_ATN_READ = 5047;
export const ED_DEVCAP_RTC_READ = 5050;
export const KSEVENT_EXTDEV_COMMAND_NOTIFY_INTERIM_READY = 0;
export const KSEVENT_EXTDEV_COMMAND_CONTROL_INTERIM_READY = 1;
export const KSEVENT_EXTDEV_COMMAND_BUSRESET = 2;
export const KSEVENT_EXTDEV_TIMECODE_UPDATE = 3;
export const KSEVENT_EXTDEV_OPERATION_MODE_UPDATE = 4;
export const KSEVENT_EXTDEV_TRANSPORT_STATE_UPDATE = 5;
export const KSEVENT_EXTDEV_NOTIFY_REMOVAL = 6;
export const KSEVENT_EXTDEV_NOTIFY_MEDIUM_CHANGE = 7;
export const KSPROPERTY_CROSSBAR_CAPS = 0;
export const KSPROPERTY_CROSSBAR_PININFO = 1;
export const KSPROPERTY_CROSSBAR_CAN_ROUTE = 2;
export const KSPROPERTY_CROSSBAR_ROUTE = 3;
export const KSPROPERTY_CROSSBAR_INPUT_ACTIVE = 4;
export const KSEVENT_CROSSBAR_CHANGED = 0;
export const KS_PhysConn_Video_Tuner = 1;
export const KS_PhysConn_Video_Composite = 2;
export const KS_PhysConn_Video_SVideo = 3;
export const KS_PhysConn_Video_RGB = 4;
export const KS_PhysConn_Video_YRYBY = 5;
export const KS_PhysConn_Video_SerialDigital = 6;
export const KS_PhysConn_Video_ParallelDigital = 7;
export const KS_PhysConn_Video_SCSI = 8;
export const KS_PhysConn_Video_AUX = 9;
export const KS_PhysConn_Video_1394 = 10;
export const KS_PhysConn_Video_USB = 11;
export const KS_PhysConn_Video_VideoDecoder = 12;
export const KS_PhysConn_Video_VideoEncoder = 13;
export const KS_PhysConn_Video_SCART = 14;
export const KS_PhysConn_Audio_Tuner = 4096;
export const KS_PhysConn_Audio_Line = 4097;
export const KS_PhysConn_Audio_Mic = 4098;
export const KS_PhysConn_Audio_AESDigital = 4099;
export const KS_PhysConn_Audio_SPDIFDigital = 4100;
export const KS_PhysConn_Audio_SCSI = 4101;
export const KS_PhysConn_Audio_AUX = 4102;
export const KS_PhysConn_Audio_1394 = 4103;
export const KS_PhysConn_Audio_USB = 4104;
export const KS_PhysConn_Audio_AudioDecoder = 4105;
export const KSPROPERTY_TVAUDIO_CAPS = 0;
export const KSPROPERTY_TVAUDIO_MODE = 1;
export const KSPROPERTY_TVAUDIO_CURRENTLY_AVAILABLE_MODES = 2;
export const KSEVENT_TVAUDIO_CHANGED = 0;
export const KSPROPERTY_VIDEOCOMPRESSION_GETINFO = 0;
export const KSPROPERTY_VIDEOCOMPRESSION_KEYFRAME_RATE = 1;
export const KSPROPERTY_VIDEOCOMPRESSION_PFRAMES_PER_KEYFRAME = 2;
export const KSPROPERTY_VIDEOCOMPRESSION_QUALITY = 3;
export const KSPROPERTY_VIDEOCOMPRESSION_OVERRIDE_KEYFRAME = 4;
export const KSPROPERTY_VIDEOCOMPRESSION_OVERRIDE_FRAME_SIZE = 5;
export const KSPROPERTY_VIDEOCOMPRESSION_WINDOWSIZE = 6;
export const KS_CompressionCaps_CanQuality = 1;
export const KS_CompressionCaps_CanCrunch = 2;
export const KS_CompressionCaps_CanKeyFrame = 4;
export const KS_CompressionCaps_CanBFrame = 8;
export const KS_CompressionCaps_CanWindow = 16;
export const KS_StreamingHint_FrameInterval = 256;
export const KS_StreamingHint_KeyFrameRate = 512;
export const KS_StreamingHint_PFrameRate = 1024;
export const KS_StreamingHint_CompQuality = 2048;
export const KS_StreamingHint_CompWindowSize = 4096;
export const KSPROPERTY_OVERLAYUPDATE_INTERESTS = 0;
export const KSPROPERTY_OVERLAYUPDATE_CLIPLIST = 1;
export const KSPROPERTY_OVERLAYUPDATE_PALETTE = 2;
export const KSPROPERTY_OVERLAYUPDATE_COLORKEY = 4;
export const KSPROPERTY_OVERLAYUPDATE_VIDEOPOSITION = 8;
export const KSPROPERTY_OVERLAYUPDATE_DISPLAYCHANGE = 16;
export const KSPROPERTY_OVERLAYUPDATE_COLORREF = 268435456;
export const KSPROPERTY_VIDEOCONTROL_CAPS = 0;
export const KSPROPERTY_VIDEOCONTROL_ACTUAL_FRAME_RATE = 1;
export const KSPROPERTY_VIDEOCONTROL_FRAME_RATES = 2;
export const KSPROPERTY_VIDEOCONTROL_MODE = 3;
export const KS_VideoControlFlag_FlipHorizontal = 1;
export const KS_VideoControlFlag_FlipVertical = 2;
export const KS_Obsolete_VideoControlFlag_ExternalTriggerEnable = 16;
export const KS_Obsolete_VideoControlFlag_Trigger = 32;
export const KS_VideoControlFlag_ExternalTriggerEnable = 4;
export const KS_VideoControlFlag_Trigger = 8;
export const KS_VideoControlFlag_IndependentImagePin = 64;
export const KS_VideoControlFlag_StillCapturePreviewFrame = 128;
export const KS_VideoControlFlag_StartPhotoSequenceCapture = 256;
export const KS_VideoControlFlag_StopPhotoSequenceCapture = 512;
export const KSPROPERTY_DROPPEDFRAMES_CURRENT = 0;
export const KSPROPERTY_VPCONFIG_NUMCONNECTINFO = 0;
export const KSPROPERTY_VPCONFIG_GETCONNECTINFO = 1;
export const KSPROPERTY_VPCONFIG_SETCONNECTINFO = 2;
export const KSPROPERTY_VPCONFIG_VPDATAINFO = 3;
export const KSPROPERTY_VPCONFIG_MAXPIXELRATE = 4;
export const KSPROPERTY_VPCONFIG_INFORMVPINPUT = 5;
export const KSPROPERTY_VPCONFIG_NUMVIDEOFORMAT = 6;
export const KSPROPERTY_VPCONFIG_GETVIDEOFORMAT = 7;
export const KSPROPERTY_VPCONFIG_SETVIDEOFORMAT = 8;
export const KSPROPERTY_VPCONFIG_INVERTPOLARITY = 9;
export const KSPROPERTY_VPCONFIG_DECIMATIONCAPABILITY = 10;
export const KSPROPERTY_VPCONFIG_SCALEFACTOR = 11;
export const KSPROPERTY_VPCONFIG_DDRAWHANDLE = 12;
export const KSPROPERTY_VPCONFIG_VIDEOPORTID = 13;
export const KSPROPERTY_VPCONFIG_DDRAWSURFACEHANDLE = 14;
export const KSPROPERTY_VPCONFIG_SURFACEPARAMS = 15;
export const KS_PixAspectRatio_NTSC4x3 = 0;
export const KS_PixAspectRatio_NTSC16x9 = 1;
export const KS_PixAspectRatio_PAL4x3 = 2;
export const KS_PixAspectRatio_PAL16x9 = 3;
export const KS_AMVP_DO_NOT_CARE = 0;
export const KS_AMVP_BEST_BANDWIDTH = 1;
export const KS_AMVP_INPUT_SAME_AS_OUTPUT = 2;
export const KS_AMVP_MODE_WEAVE = 0;
export const KS_AMVP_MODE_BOBINTERLEAVED = 1;
export const KS_AMVP_MODE_BOBNONINTERLEAVED = 2;
export const KS_AMVP_MODE_SKIPEVEN = 3;
export const KS_AMVP_MODE_SKIPODD = 4;
export const KSEVENT_VPNOTIFY_FORMATCHANGE = 0;
export const KSEVENT_VIDCAPTOSTI_EXT_TRIGGER = 0;
export const KSEVENT_VIDCAP_AUTO_UPDATE = 1;
export const KSEVENT_VIDCAP_SEARCH = 2;
export const KSPROPERTY_EXTENSION_UNIT_INFO = 0;
export const KSPROPERTY_EXTENSION_UNIT_CONTROL = 1;
export const KSPROPERTY_EXTENSION_UNIT_PASS_THROUGH = 65535;
export const KSEVENT_VPVBINOTIFY_FORMATCHANGE = 0;
export const KS_AM_RATE_SimpleRateChange = 1;
export const KS_AM_RATE_ExactRateChange = 2;
export const KS_AM_RATE_MaxFullDataRate = 3;
export const KS_AM_RATE_Step = 4;
export const KSPROPERTY_JACK_DESCRIPTION = 1;
export const KSPROPERTY_JACK_DESCRIPTION2 = 2;
export const KSPROPERTY_JACK_SINK_INFO = 3;
export const KSPROPERTY_JACK_CONTAINERID = 4;
export const eConnTypeUnknown = 0;
export const eConnType3Point5mm = 1;
export const eConnTypeQuarter = 2;
export const eConnTypeAtapiInternal = 3;
export const eConnTypeRCA = 4;
export const eConnTypeOptical = 5;
export const eConnTypeOtherDigital = 6;
export const eConnTypeOtherAnalog = 7;
export const eConnTypeMultichannelAnalogDIN = 8;
export const eConnTypeXlrProfessional = 9;
export const eConnTypeRJ11Modem = 10;
export const eConnTypeCombination = 11;
export const eGeoLocRear = 1;
export const eGeoLocFront = 2;
export const eGeoLocLeft = 3;
export const eGeoLocRight = 4;
export const eGeoLocTop = 5;
export const eGeoLocBottom = 6;
export const eGeoLocRearPanel = 7;
export const eGeoLocRiser = 8;
export const eGeoLocInsideMobileLid = 9;
export const eGeoLocDrivebay = 10;
export const eGeoLocHDMI = 11;
export const eGeoLocOutsideMobileLid = 12;
export const eGeoLocATAPI = 13;
export const eGeoLocNotApplicable = 14;
export const eGeoLocReserved6 = 15;
export const EPcxGeoLocation_enum_count = 16;
export const eGenLocPrimaryBox = 0;
export const eGenLocInternal = 1;
export const eGenLocSeparate = 2;
export const eGenLocOther = 3;
export const EPcxGenLocation_enum_count = 4;
export const ePortConnJack = 0;
export const ePortConnIntegratedDevice = 1;
export const ePortConnBothIntegratedAndJack = 2;
export const ePortConnUnknown = 3;
export const KSJACK_SINK_CONNECTIONTYPE_HDMI = 0;
export const KSJACK_SINK_CONNECTIONTYPE_DISPLAYPORT = 1;
export const KSPROPERTY_AUDIOPOSTURE_ORIENTATION = 1;
export const AUDIOPOSTURE_ORIENTATION_NOTROTATED = 0;
export const AUDIOPOSTURE_ORIENTATION_ROTATED90DEGREESCOUNTERCLOCKWISE = 1;
export const AUDIOPOSTURE_ORIENTATION_ROTATED180DEGREESCOUNTERCLOCKWISE = 2;
export const AUDIOPOSTURE_ORIENTATION_ROTATED270DEGREESCOUNTERCLOCKWISE = 3;
export const KSPROPERTY_AUDIOENGINE_LFXENABLE = 0;
export const KSPROPERTY_AUDIOENGINE_GFXENABLE = 1;
export const KSPROPERTY_AUDIOENGINE_MIXFORMAT = 2;
export const KSPROPERTY_AUDIOENGINE_DEVICEFORMAT = 4;
export const KSPROPERTY_AUDIOENGINE_SUPPORTEDDEVICEFORMATS = 5;
export const KSPROPERTY_AUDIOENGINE_DESCRIPTOR = 6;
export const KSPROPERTY_AUDIOENGINE_BUFFER_SIZE_RANGE = 7;
export const KSPROPERTY_AUDIOENGINE_LOOPBACK_PROTECTION = 8;
export const KSPROPERTY_AUDIOENGINE_VOLUMELEVEL = 9;
export const AUDIO_CURVE_TYPE_NONE = 0;
export const AUDIO_CURVE_TYPE_WINDOWS_FADE = 1;
export const KSPROPERTY_AUDIOSIGNALPROCESSING_MODES = 0;
export const KSPROPERTY_AUDIORESOURCEMANAGEMENT_RESOURCEGROUP = 0;
export const KSPROPERTY_AUDIOMODULE_DESCRIPTORS = 1;
export const KSPROPERTY_AUDIOMODULE_COMMAND = 2;
export const KSPROPERTY_AUDIOMODULE_NOTIFICATION_DEVICE_ID = 3;
export const KsAllocatorMode_User = 0;
export const KsAllocatorMode_Kernel = 1;
export const FramingProp_Uninitialized = 0;
export const FramingProp_None = 1;
export const FramingProp_Old = 2;
export const FramingProp_Ex = 3;
export const Framing_Cache_Update = 0;
export const Framing_Cache_ReadLast = 1;
export const Framing_Cache_ReadOrig = 2;
export const Framing_Cache_Write = 3;
export const PipeState_DontCare = 0;
export const PipeState_RangeNotFixed = 1;
export const PipeState_RangeFixed = 2;
export const PipeState_CompressionUnknown = 3;
export const PipeState_Finalized = 4;
export const Pipe_Allocator_None = 0;
export const Pipe_Allocator_FirstPin = 1;
export const Pipe_Allocator_LastPin = 2;
export const Pipe_Allocator_MiddlePin = 3;
export const KS_MemoryTypeDontCare = 0;
export const KS_MemoryTypeKernelPaged = 1;
export const KS_MemoryTypeKernelNonPaged = 2;
export const KS_MemoryTypeDeviceHostMapped = 3;
export const KS_MemoryTypeDeviceSpecific = 4;
export const KS_MemoryTypeUser = 5;
export const KS_MemoryTypeAnyHost = 6;

// Structs

/**
 * Windows.Win32.Devices.Properties.DEVPROPKEY (size: 16)
 */
export interface DEVPROPKEY {
  /** System.Guid */
  fmtid: Uint8Array | Deno.PointerValue | null;
  /** u32 */
  pid: number;
}

export const sizeofDEVPROPKEY = 16;

export function allocDEVPROPKEY(data?: Partial<DEVPROPKEY>): Uint8Array {
  const buf = new Uint8Array(sizeofDEVPROPKEY);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.fmtid !== undefined) view.setBigUint64(0, data.fmtid === null ? 0n : BigInt(util.toPointer(data.fmtid)), true);
  // 0x08: u32
  if (data?.pid !== undefined) view.setUint32(8, Number(data.pid), true);
  // 0x0c: pad4
  return buf;
}

/**
 * Windows.Win32.Media.KernelStreaming.KSTIME (size: 16)
 */
export interface KSTIME {
  /** i64 */
  Time: Deno.PointerValue;
  /** u32 */
  Numerator: number;
  /** u32 */
  Denominator: number;
}

export const sizeofKSTIME = 16;

export function allocKSTIME(data?: Partial<KSTIME>): Uint8Array {
  const buf = new Uint8Array(sizeofKSTIME);
  const view = new DataView(buf.buffer);
  // 0x00: i64
  if (data?.Time !== undefined) view.setBigInt64(0, BigInt(data.Time), true);
  // 0x08: u32
  if (data?.Numerator !== undefined) view.setUint32(8, Number(data.Numerator), true);
  // 0x0c: u32
  if (data?.Denominator !== undefined) view.setUint32(12, Number(data.Denominator), true);
  return buf;
}

/**
 * Windows.Win32.Media.KernelStreaming.KSSTREAM_HEADER (size: 48)
 */
export interface KSSTREAM_HEADER {
  /** u32 */
  Size: number;
  /** u32 */
  TypeSpecificFlags: number;
  /** Windows.Win32.Media.KernelStreaming.KSTIME */
  PresentationTime: Uint8Array | Deno.PointerValue | null;
  /** i64 */
  Duration: Deno.PointerValue;
  /** u32 */
  FrameExtent: number;
  /** u32 */
  DataUsed: number;
  /** ptr */
  Data: Deno.PointerValue | Uint8Array | null;
  /** u32 */
  OptionsFlags: number;
  /** u32 */
  Reserved: number;
}

export const sizeofKSSTREAM_HEADER = 48;

export function allocKSSTREAM_HEADER(data?: Partial<KSSTREAM_HEADER>): Uint8Array {
  const buf = new Uint8Array(sizeofKSSTREAM_HEADER);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.Size !== undefined) view.setUint32(0, Number(data.Size), true);
  // 0x04: u32
  if (data?.TypeSpecificFlags !== undefined) view.setUint32(4, Number(data.TypeSpecificFlags), true);
  // 0x08: pointer
  if (data?.PresentationTime !== undefined) view.setBigUint64(8, data.PresentationTime === null ? 0n : BigInt(util.toPointer(data.PresentationTime)), true);
  // 0x10: i64
  if (data?.Duration !== undefined) view.setBigInt64(16, BigInt(data.Duration), true);
  // 0x18: u32
  if (data?.FrameExtent !== undefined) view.setUint32(24, Number(data.FrameExtent), true);
  // 0x1c: u32
  if (data?.DataUsed !== undefined) view.setUint32(28, Number(data.DataUsed), true);
  // 0x20: pointer
  if (data?.Data !== undefined) view.setBigUint64(32, data.Data === null ? 0n : BigInt(util.toPointer(data.Data)), true);
  // 0x28: u32
  if (data?.OptionsFlags !== undefined) view.setUint32(40, Number(data.OptionsFlags), true);
  // 0x2c: u32
  if (data?.Reserved !== undefined) view.setUint32(44, Number(data.Reserved), true);
  return buf;
}

/**
 * _Anonymous_e__Struct (size: 16)
 */
export interface _Anonymous_e__Struct {
  /** u64 */
  Alignment: Deno.PointerValue;
  /** u64 */
  Region: Deno.PointerValue;
}

export const sizeof_Anonymous_e__Struct = 16;

export function alloc_Anonymous_e__Struct(data?: Partial<_Anonymous_e__Struct>): Uint8Array {
  const buf = new Uint8Array(sizeof_Anonymous_e__Struct);
  const view = new DataView(buf.buffer);
  // 0x00: u64
  if (data?.Alignment !== undefined) view.setBigUint64(0, BigInt(data.Alignment), true);
  // 0x08: u64
  if (data?.Region !== undefined) view.setBigUint64(8, BigInt(data.Region), true);
  return buf;
}

/**
 * _Anonymous_e__Union (size: 16)
 */
export interface _Anonymous_e__Union {
  /** _Anonymous_e__Struct */
  Anonymous: Uint8Array | Deno.PointerValue | null;
  /** array */
  X: Deno.PointerValue | null;
}

export const sizeof_Anonymous_e__Union = 16;

export function alloc_Anonymous_e__Union(data?: Partial<_Anonymous_e__Union>): Uint8Array {
  const buf = new Uint8Array(sizeof_Anonymous_e__Union);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.Anonymous !== undefined) view.setBigUint64(0, data.Anonymous === null ? 0n : BigInt(util.toPointer(data.Anonymous)), true);
  // 0x08: pointer
  if (data?.X !== undefined) view.setBigUint64(8, data.X === null ? 0n : BigInt(util.toPointer(data.X)), true);
  return buf;
}

/**
 * Windows.Win32.Media.KernelStreaming.KSIDENTIFIER (size: 8)
 */
export interface KSIDENTIFIER {
  /** _Anonymous_e__Union */
  Anonymous: Uint8Array | Deno.PointerValue | null;
}

export const sizeofKSIDENTIFIER = 8;

export function allocKSIDENTIFIER(data?: Partial<KSIDENTIFIER>): Uint8Array {
  const buf = new Uint8Array(sizeofKSIDENTIFIER);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.Anonymous !== undefined) view.setBigUint64(0, data.Anonymous === null ? 0n : BigInt(util.toPointer(data.Anonymous)), true);
  return buf;
}

/**
 * Windows.Win32.Media.KernelStreaming.KSNODEPROPERTY (size: 16)
 */
export interface KSNODEPROPERTY {
  /** Windows.Win32.Media.KernelStreaming.KSIDENTIFIER */
  Property: Uint8Array | Deno.PointerValue | null;
  /** u32 */
  NodeId: number;
  /** u32 */
  Reserved: number;
}

export const sizeofKSNODEPROPERTY = 16;

export function allocKSNODEPROPERTY(data?: Partial<KSNODEPROPERTY>): Uint8Array {
  const buf = new Uint8Array(sizeofKSNODEPROPERTY);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.Property !== undefined) view.setBigUint64(0, data.Property === null ? 0n : BigInt(util.toPointer(data.Property)), true);
  // 0x08: u32
  if (data?.NodeId !== undefined) view.setUint32(8, Number(data.NodeId), true);
  // 0x0c: u32
  if (data?.Reserved !== undefined) view.setUint32(12, Number(data.Reserved), true);
  return buf;
}

/**
 * Windows.Win32.Media.KernelStreaming.KSNODEPROPERTY_AUDIO_3D_LISTENER (size: 16)
 */
export interface KSNODEPROPERTY_AUDIO_3D_LISTENER {
  /** Windows.Win32.Media.KernelStreaming.KSNODEPROPERTY */
  NodeProperty: Uint8Array | Deno.PointerValue | null;
  /** ptr */
  ListenerId: Deno.PointerValue | Uint8Array | null;
}

export const sizeofKSNODEPROPERTY_AUDIO_3D_LISTENER = 16;

export function allocKSNODEPROPERTY_AUDIO_3D_LISTENER(data?: Partial<KSNODEPROPERTY_AUDIO_3D_LISTENER>): Uint8Array {
  const buf = new Uint8Array(sizeofKSNODEPROPERTY_AUDIO_3D_LISTENER);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.NodeProperty !== undefined) view.setBigUint64(0, data.NodeProperty === null ? 0n : BigInt(util.toPointer(data.NodeProperty)), true);
  // 0x08: pointer
  if (data?.ListenerId !== undefined) view.setBigUint64(8, data.ListenerId === null ? 0n : BigInt(util.toPointer(data.ListenerId)), true);
  return buf;
}

/**
 * Windows.Win32.Media.KernelStreaming.KSNODEPROPERTY_AUDIO_PROPERTY (size: 24)
 */
export interface KSNODEPROPERTY_AUDIO_PROPERTY {
  /** Windows.Win32.Media.KernelStreaming.KSNODEPROPERTY */
  NodeProperty: Uint8Array | Deno.PointerValue | null;
  /** ptr */
  AppContext: Deno.PointerValue | Uint8Array | null;
  /** u32 */
  Length: number;
}

export const sizeofKSNODEPROPERTY_AUDIO_PROPERTY = 24;

export function allocKSNODEPROPERTY_AUDIO_PROPERTY(data?: Partial<KSNODEPROPERTY_AUDIO_PROPERTY>): Uint8Array {
  const buf = new Uint8Array(sizeofKSNODEPROPERTY_AUDIO_PROPERTY);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.NodeProperty !== undefined) view.setBigUint64(0, data.NodeProperty === null ? 0n : BigInt(util.toPointer(data.NodeProperty)), true);
  // 0x08: pointer
  if (data?.AppContext !== undefined) view.setBigUint64(8, data.AppContext === null ? 0n : BigInt(util.toPointer(data.AppContext)), true);
  // 0x10: u32
  if (data?.Length !== undefined) view.setUint32(16, Number(data.Length), true);
  // 0x14: pad4
  return buf;
}

/**
 * Windows.Win32.Media.KernelStreaming.KSPRIORITY (size: 8)
 */
export interface KSPRIORITY {
  /** u32 */
  PriorityClass: number;
  /** u32 */
  PrioritySubClass: number;
}

export const sizeofKSPRIORITY = 8;

export function allocKSPRIORITY(data?: Partial<KSPRIORITY>): Uint8Array {
  const buf = new Uint8Array(sizeofKSPRIORITY);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.PriorityClass !== undefined) view.setUint32(0, Number(data.PriorityClass), true);
  // 0x04: u32
  if (data?.PrioritySubClass !== undefined) view.setUint32(4, Number(data.PrioritySubClass), true);
  return buf;
}

/**
 * Windows.Win32.Media.KernelStreaming.KSP_NODE (size: 16)
 */
export interface KSP_NODE {
  /** Windows.Win32.Media.KernelStreaming.KSIDENTIFIER */
  Property: Uint8Array | Deno.PointerValue | null;
  /** u32 */
  NodeId: number;
  /** u32 */
  Reserved: number;
}

export const sizeofKSP_NODE = 16;

export function allocKSP_NODE(data?: Partial<KSP_NODE>): Uint8Array {
  const buf = new Uint8Array(sizeofKSP_NODE);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.Property !== undefined) view.setBigUint64(0, data.Property === null ? 0n : BigInt(util.toPointer(data.Property)), true);
  // 0x08: u32
  if (data?.NodeId !== undefined) view.setUint32(8, Number(data.NodeId), true);
  // 0x0c: u32
  if (data?.Reserved !== undefined) view.setUint32(12, Number(data.Reserved), true);
  return buf;
}

/**
 * Windows.Win32.Media.KernelStreaming.KSM_NODE (size: 16)
 */
export interface KSM_NODE {
  /** Windows.Win32.Media.KernelStreaming.KSIDENTIFIER */
  Method: Uint8Array | Deno.PointerValue | null;
  /** u32 */
  NodeId: number;
  /** u32 */
  Reserved: number;
}

export const sizeofKSM_NODE = 16;

export function allocKSM_NODE(data?: Partial<KSM_NODE>): Uint8Array {
  const buf = new Uint8Array(sizeofKSM_NODE);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.Method !== undefined) view.setBigUint64(0, data.Method === null ? 0n : BigInt(util.toPointer(data.Method)), true);
  // 0x08: u32
  if (data?.NodeId !== undefined) view.setUint32(8, Number(data.NodeId), true);
  // 0x0c: u32
  if (data?.Reserved !== undefined) view.setUint32(12, Number(data.Reserved), true);
  return buf;
}

/**
 * Windows.Win32.Media.KernelStreaming.KSE_NODE (size: 16)
 */
export interface KSE_NODE {
  /** Windows.Win32.Media.KernelStreaming.KSIDENTIFIER */
  Event: Uint8Array | Deno.PointerValue | null;
  /** u32 */
  NodeId: number;
  /** u32 */
  Reserved: number;
}

export const sizeofKSE_NODE = 16;

export function allocKSE_NODE(data?: Partial<KSE_NODE>): Uint8Array {
  const buf = new Uint8Array(sizeofKSE_NODE);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.Event !== undefined) view.setBigUint64(0, data.Event === null ? 0n : BigInt(util.toPointer(data.Event)), true);
  // 0x08: u32
  if (data?.NodeId !== undefined) view.setUint32(8, Number(data.NodeId), true);
  // 0x0c: u32
  if (data?.Reserved !== undefined) view.setUint32(12, Number(data.Reserved), true);
  return buf;
}

/**
 * Windows.Win32.Media.KernelStreaming.KSMULTIPLE_ITEM (size: 8)
 */
export interface KSMULTIPLE_ITEM {
  /** u32 */
  Size: number;
  /** u32 */
  Count: number;
}

export const sizeofKSMULTIPLE_ITEM = 8;

export function allocKSMULTIPLE_ITEM(data?: Partial<KSMULTIPLE_ITEM>): Uint8Array {
  const buf = new Uint8Array(sizeofKSMULTIPLE_ITEM);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.Size !== undefined) view.setUint32(0, Number(data.Size), true);
  // 0x04: u32
  if (data?.Count !== undefined) view.setUint32(4, Number(data.Count), true);
  return buf;
}

/**
 * Windows.Win32.Media.KernelStreaming.KSPROPERTY_DESCRIPTION (size: 24)
 */
export interface KSPROPERTY_DESCRIPTION {
  /** u32 */
  AccessFlags: number;
  /** u32 */
  DescriptionSize: number;
  /** Windows.Win32.Media.KernelStreaming.KSIDENTIFIER */
  PropTypeSet: Uint8Array | Deno.PointerValue | null;
  /** u32 */
  MembersListCount: number;
  /** u32 */
  Reserved: number;
}

export const sizeofKSPROPERTY_DESCRIPTION = 24;

export function allocKSPROPERTY_DESCRIPTION(data?: Partial<KSPROPERTY_DESCRIPTION>): Uint8Array {
  const buf = new Uint8Array(sizeofKSPROPERTY_DESCRIPTION);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.AccessFlags !== undefined) view.setUint32(0, Number(data.AccessFlags), true);
  // 0x04: u32
  if (data?.DescriptionSize !== undefined) view.setUint32(4, Number(data.DescriptionSize), true);
  // 0x08: pointer
  if (data?.PropTypeSet !== undefined) view.setBigUint64(8, data.PropTypeSet === null ? 0n : BigInt(util.toPointer(data.PropTypeSet)), true);
  // 0x10: u32
  if (data?.MembersListCount !== undefined) view.setUint32(16, Number(data.MembersListCount), true);
  // 0x14: u32
  if (data?.Reserved !== undefined) view.setUint32(20, Number(data.Reserved), true);
  return buf;
}

/**
 * Windows.Win32.Media.KernelStreaming.KSPROPERTY_MEMBERSHEADER (size: 16)
 */
export interface KSPROPERTY_MEMBERSHEADER {
  /** u32 */
  MembersFlags: number;
  /** u32 */
  MembersSize: number;
  /** u32 */
  MembersCount: number;
  /** u32 */
  Flags: number;
}

export const sizeofKSPROPERTY_MEMBERSHEADER = 16;

export function allocKSPROPERTY_MEMBERSHEADER(data?: Partial<KSPROPERTY_MEMBERSHEADER>): Uint8Array {
  const buf = new Uint8Array(sizeofKSPROPERTY_MEMBERSHEADER);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.MembersFlags !== undefined) view.setUint32(0, Number(data.MembersFlags), true);
  // 0x04: u32
  if (data?.MembersSize !== undefined) view.setUint32(4, Number(data.MembersSize), true);
  // 0x08: u32
  if (data?.MembersCount !== undefined) view.setUint32(8, Number(data.MembersCount), true);
  // 0x0c: u32
  if (data?.Flags !== undefined) view.setUint32(12, Number(data.Flags), true);
  return buf;
}

/**
 * _Anonymous1_e__Struct (size: 24)
 */
export interface _Anonymous1_e__Struct {
  /** f32 */
  m11: number;
  /** f32 */
  m12: number;
  /** f32 */
  m21: number;
  /** f32 */
  m22: number;
  /** f32 */
  dx: number;
  /** f32 */
  dy: number;
}

export const sizeof_Anonymous1_e__Struct = 24;

export function alloc_Anonymous1_e__Struct(data?: Partial<_Anonymous1_e__Struct>): Uint8Array {
  const buf = new Uint8Array(sizeof_Anonymous1_e__Struct);
  const view = new DataView(buf.buffer);
  // 0x00: f32
  if (data?.m11 !== undefined) view.setFloat32(0, Number(data.m11), true);
  // 0x04: f32
  if (data?.m12 !== undefined) view.setFloat32(4, Number(data.m12), true);
  // 0x08: f32
  if (data?.m21 !== undefined) view.setFloat32(8, Number(data.m21), true);
  // 0x0c: f32
  if (data?.m22 !== undefined) view.setFloat32(12, Number(data.m22), true);
  // 0x10: f32
  if (data?.dx !== undefined) view.setFloat32(16, Number(data.dx), true);
  // 0x14: f32
  if (data?.dy !== undefined) view.setFloat32(20, Number(data.dy), true);
  return buf;
}

/**
 * _Anonymous2_e__Struct (size: 24)
 */
export interface _Anonymous2_e__Struct {
  /** f32 */
  _11: number;
  /** f32 */
  _12: number;
  /** f32 */
  _21: number;
  /** f32 */
  _22: number;
  /** f32 */
  _31: number;
  /** f32 */
  _32: number;
}

export const sizeof_Anonymous2_e__Struct = 24;

export function alloc_Anonymous2_e__Struct(data?: Partial<_Anonymous2_e__Struct>): Uint8Array {
  const buf = new Uint8Array(sizeof_Anonymous2_e__Struct);
  const view = new DataView(buf.buffer);
  // 0x00: f32
  if (data?._11 !== undefined) view.setFloat32(0, Number(data._11), true);
  // 0x04: f32
  if (data?._12 !== undefined) view.setFloat32(4, Number(data._12), true);
  // 0x08: f32
  if (data?._21 !== undefined) view.setFloat32(8, Number(data._21), true);
  // 0x0c: f32
  if (data?._22 !== undefined) view.setFloat32(12, Number(data._22), true);
  // 0x10: f32
  if (data?._31 !== undefined) view.setFloat32(16, Number(data._31), true);
  // 0x14: f32
  if (data?._32 !== undefined) view.setFloat32(20, Number(data._32), true);
  return buf;
}

/**
 * Windows.Win32.Media.KernelStreaming.KSPROPERTY_BOUNDS_LONG (size: 16)
 */
export interface KSPROPERTY_BOUNDS_LONG {
  /** _Anonymous1_e__Struct */
  Anonymous1: Uint8Array | Deno.PointerValue | null;
  /** _Anonymous2_e__Struct */
  Anonymous2: Uint8Array | Deno.PointerValue | null;
}

export const sizeofKSPROPERTY_BOUNDS_LONG = 16;

export function allocKSPROPERTY_BOUNDS_LONG(data?: Partial<KSPROPERTY_BOUNDS_LONG>): Uint8Array {
  const buf = new Uint8Array(sizeofKSPROPERTY_BOUNDS_LONG);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.Anonymous1 !== undefined) view.setBigUint64(0, data.Anonymous1 === null ? 0n : BigInt(util.toPointer(data.Anonymous1)), true);
  // 0x08: pointer
  if (data?.Anonymous2 !== undefined) view.setBigUint64(8, data.Anonymous2 === null ? 0n : BigInt(util.toPointer(data.Anonymous2)), true);
  return buf;
}

/**
 * Windows.Win32.Media.KernelStreaming.KSPROPERTY_BOUNDS_LONGLONG (size: 16)
 */
export interface KSPROPERTY_BOUNDS_LONGLONG {
  /** _Anonymous1_e__Struct */
  Anonymous1: Uint8Array | Deno.PointerValue | null;
  /** _Anonymous2_e__Struct */
  Anonymous2: Uint8Array | Deno.PointerValue | null;
}

export const sizeofKSPROPERTY_BOUNDS_LONGLONG = 16;

export function allocKSPROPERTY_BOUNDS_LONGLONG(data?: Partial<KSPROPERTY_BOUNDS_LONGLONG>): Uint8Array {
  const buf = new Uint8Array(sizeofKSPROPERTY_BOUNDS_LONGLONG);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.Anonymous1 !== undefined) view.setBigUint64(0, data.Anonymous1 === null ? 0n : BigInt(util.toPointer(data.Anonymous1)), true);
  // 0x08: pointer
  if (data?.Anonymous2 !== undefined) view.setBigUint64(8, data.Anonymous2 === null ? 0n : BigInt(util.toPointer(data.Anonymous2)), true);
  return buf;
}

/**
 * Windows.Win32.Media.KernelStreaming.KSPROPERTY_STEPPING_LONG (size: 16)
 */
export interface KSPROPERTY_STEPPING_LONG {
  /** u32 */
  SteppingDelta: number;
  /** u32 */
  Reserved: number;
  /** Windows.Win32.Media.KernelStreaming.KSPROPERTY_BOUNDS_LONG */
  Bounds: Uint8Array | Deno.PointerValue | null;
}

export const sizeofKSPROPERTY_STEPPING_LONG = 16;

export function allocKSPROPERTY_STEPPING_LONG(data?: Partial<KSPROPERTY_STEPPING_LONG>): Uint8Array {
  const buf = new Uint8Array(sizeofKSPROPERTY_STEPPING_LONG);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.SteppingDelta !== undefined) view.setUint32(0, Number(data.SteppingDelta), true);
  // 0x04: u32
  if (data?.Reserved !== undefined) view.setUint32(4, Number(data.Reserved), true);
  // 0x08: pointer
  if (data?.Bounds !== undefined) view.setBigUint64(8, data.Bounds === null ? 0n : BigInt(util.toPointer(data.Bounds)), true);
  return buf;
}

/**
 * Windows.Win32.Media.KernelStreaming.KSPROPERTY_STEPPING_LONGLONG (size: 16)
 */
export interface KSPROPERTY_STEPPING_LONGLONG {
  /** u64 */
  SteppingDelta: Deno.PointerValue;
  /** Windows.Win32.Media.KernelStreaming.KSPROPERTY_BOUNDS_LONGLONG */
  Bounds: Uint8Array | Deno.PointerValue | null;
}

export const sizeofKSPROPERTY_STEPPING_LONGLONG = 16;

export function allocKSPROPERTY_STEPPING_LONGLONG(data?: Partial<KSPROPERTY_STEPPING_LONGLONG>): Uint8Array {
  const buf = new Uint8Array(sizeofKSPROPERTY_STEPPING_LONGLONG);
  const view = new DataView(buf.buffer);
  // 0x00: u64
  if (data?.SteppingDelta !== undefined) view.setBigUint64(0, BigInt(data.SteppingDelta), true);
  // 0x08: pointer
  if (data?.Bounds !== undefined) view.setBigUint64(8, data.Bounds === null ? 0n : BigInt(util.toPointer(data.Bounds)), true);
  return buf;
}

/**
 * Windows.Win32.Media.KernelStreaming.KSEVENTDATA (size: 16)
 */
export interface KSEVENTDATA {
  /** u32 */
  NotificationType: number;
  /** _Anonymous_e__Union */
  Anonymous: Uint8Array | Deno.PointerValue | null;
}

export const sizeofKSEVENTDATA = 16;

export function allocKSEVENTDATA(data?: Partial<KSEVENTDATA>): Uint8Array {
  const buf = new Uint8Array(sizeofKSEVENTDATA);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.NotificationType !== undefined) view.setUint32(0, Number(data.NotificationType), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.Anonymous !== undefined) view.setBigUint64(8, data.Anonymous === null ? 0n : BigInt(util.toPointer(data.Anonymous)), true);
  return buf;
}

/**
 * Windows.Win32.Media.KernelStreaming.KSQUERYBUFFER (size: 24)
 */
export interface KSQUERYBUFFER {
  /** Windows.Win32.Media.KernelStreaming.KSIDENTIFIER */
  Event: Uint8Array | Deno.PointerValue | null;
  /** ptr */
  EventData: Deno.PointerValue | Uint8Array | null;
  /** ptr */
  Reserved: Deno.PointerValue | Uint8Array | null;
}

export const sizeofKSQUERYBUFFER = 24;

export function allocKSQUERYBUFFER(data?: Partial<KSQUERYBUFFER>): Uint8Array {
  const buf = new Uint8Array(sizeofKSQUERYBUFFER);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.Event !== undefined) view.setBigUint64(0, data.Event === null ? 0n : BigInt(util.toPointer(data.Event)), true);
  // 0x08: pointer
  if (data?.EventData !== undefined) view.setBigUint64(8, data.EventData === null ? 0n : BigInt(util.toPointer(data.EventData)), true);
  // 0x10: pointer
  if (data?.Reserved !== undefined) view.setBigUint64(16, data.Reserved === null ? 0n : BigInt(util.toPointer(data.Reserved)), true);
  return buf;
}

/**
 * Windows.Win32.Media.KernelStreaming.KSRELATIVEEVENT (size: 40)
 */
export interface KSRELATIVEEVENT {
  /** u32 */
  Size: number;
  /** u32 */
  Flags: number;
  /** _Anonymous_e__Union */
  Anonymous: Uint8Array | Deno.PointerValue | null;
  /** ptr */
  Reserved: Deno.PointerValue | Uint8Array | null;
  /** Windows.Win32.Media.KernelStreaming.KSIDENTIFIER */
  Event: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Media.KernelStreaming.KSEVENTDATA */
  EventData: Uint8Array | Deno.PointerValue | null;
}

export const sizeofKSRELATIVEEVENT = 40;

export function allocKSRELATIVEEVENT(data?: Partial<KSRELATIVEEVENT>): Uint8Array {
  const buf = new Uint8Array(sizeofKSRELATIVEEVENT);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.Size !== undefined) view.setUint32(0, Number(data.Size), true);
  // 0x04: u32
  if (data?.Flags !== undefined) view.setUint32(4, Number(data.Flags), true);
  // 0x08: pointer
  if (data?.Anonymous !== undefined) view.setBigUint64(8, data.Anonymous === null ? 0n : BigInt(util.toPointer(data.Anonymous)), true);
  // 0x10: pointer
  if (data?.Reserved !== undefined) view.setBigUint64(16, data.Reserved === null ? 0n : BigInt(util.toPointer(data.Reserved)), true);
  // 0x18: pointer
  if (data?.Event !== undefined) view.setBigUint64(24, data.Event === null ? 0n : BigInt(util.toPointer(data.Event)), true);
  // 0x20: pointer
  if (data?.EventData !== undefined) view.setBigUint64(32, data.EventData === null ? 0n : BigInt(util.toPointer(data.EventData)), true);
  return buf;
}

/**
 * Windows.Win32.Media.KernelStreaming.KSEVENT_TIME_MARK (size: 16)
 */
export interface KSEVENT_TIME_MARK {
  /** Windows.Win32.Media.KernelStreaming.KSEVENTDATA */
  EventData: Uint8Array | Deno.PointerValue | null;
  /** i64 */
  MarkTime: Deno.PointerValue;
}

export const sizeofKSEVENT_TIME_MARK = 16;

export function allocKSEVENT_TIME_MARK(data?: Partial<KSEVENT_TIME_MARK>): Uint8Array {
  const buf = new Uint8Array(sizeofKSEVENT_TIME_MARK);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.EventData !== undefined) view.setBigUint64(0, data.EventData === null ? 0n : BigInt(util.toPointer(data.EventData)), true);
  // 0x08: i64
  if (data?.MarkTime !== undefined) view.setBigInt64(8, BigInt(data.MarkTime), true);
  return buf;
}

/**
 * Windows.Win32.Media.KernelStreaming.KSEVENT_TIME_INTERVAL (size: 24)
 */
export interface KSEVENT_TIME_INTERVAL {
  /** Windows.Win32.Media.KernelStreaming.KSEVENTDATA */
  EventData: Uint8Array | Deno.PointerValue | null;
  /** i64 */
  TimeBase: Deno.PointerValue;
  /** i64 */
  Interval: Deno.PointerValue;
}

export const sizeofKSEVENT_TIME_INTERVAL = 24;

export function allocKSEVENT_TIME_INTERVAL(data?: Partial<KSEVENT_TIME_INTERVAL>): Uint8Array {
  const buf = new Uint8Array(sizeofKSEVENT_TIME_INTERVAL);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.EventData !== undefined) view.setBigUint64(0, data.EventData === null ? 0n : BigInt(util.toPointer(data.EventData)), true);
  // 0x08: i64
  if (data?.TimeBase !== undefined) view.setBigInt64(8, BigInt(data.TimeBase), true);
  // 0x10: i64
  if (data?.Interval !== undefined) view.setBigInt64(16, BigInt(data.Interval), true);
  return buf;
}

/**
 * Windows.Win32.Media.KernelStreaming.KSINTERVAL (size: 16)
 */
export interface KSINTERVAL {
  /** i64 */
  TimeBase: Deno.PointerValue;
  /** i64 */
  Interval: Deno.PointerValue;
}

export const sizeofKSINTERVAL = 16;

export function allocKSINTERVAL(data?: Partial<KSINTERVAL>): Uint8Array {
  const buf = new Uint8Array(sizeofKSINTERVAL);
  const view = new DataView(buf.buffer);
  // 0x00: i64
  if (data?.TimeBase !== undefined) view.setBigInt64(0, BigInt(data.TimeBase), true);
  // 0x08: i64
  if (data?.Interval !== undefined) view.setBigInt64(8, BigInt(data.Interval), true);
  return buf;
}

/**
 * Windows.Win32.Media.KernelStreaming.KSCOMPONENTID (size: 40)
 */
export interface KSCOMPONENTID {
  /** System.Guid */
  Manufacturer: Uint8Array | Deno.PointerValue | null;
  /** System.Guid */
  Product: Uint8Array | Deno.PointerValue | null;
  /** System.Guid */
  Component: Uint8Array | Deno.PointerValue | null;
  /** System.Guid */
  Name: Uint8Array | Deno.PointerValue | null;
  /** u32 */
  Version: number;
  /** u32 */
  Revision: number;
}

export const sizeofKSCOMPONENTID = 40;

export function allocKSCOMPONENTID(data?: Partial<KSCOMPONENTID>): Uint8Array {
  const buf = new Uint8Array(sizeofKSCOMPONENTID);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.Manufacturer !== undefined) view.setBigUint64(0, data.Manufacturer === null ? 0n : BigInt(util.toPointer(data.Manufacturer)), true);
  // 0x08: pointer
  if (data?.Product !== undefined) view.setBigUint64(8, data.Product === null ? 0n : BigInt(util.toPointer(data.Product)), true);
  // 0x10: pointer
  if (data?.Component !== undefined) view.setBigUint64(16, data.Component === null ? 0n : BigInt(util.toPointer(data.Component)), true);
  // 0x18: pointer
  if (data?.Name !== undefined) view.setBigUint64(24, data.Name === null ? 0n : BigInt(util.toPointer(data.Name)), true);
  // 0x20: u32
  if (data?.Version !== undefined) view.setUint32(32, Number(data.Version), true);
  // 0x24: u32
  if (data?.Revision !== undefined) view.setUint32(36, Number(data.Revision), true);
  return buf;
}

/**
 * Windows.Win32.Media.KernelStreaming.KSPROPERTY_POSITIONS (size: 24)
 */
export interface KSPROPERTY_POSITIONS {
  /** i64 */
  Current: Deno.PointerValue;
  /** i64 */
  Stop: Deno.PointerValue;
  /** Windows.Win32.Media.KernelStreaming.KS_SEEKING_FLAGS */
  CurrentFlags: KS_SEEKING_FLAGS;
  /** Windows.Win32.Media.KernelStreaming.KS_SEEKING_FLAGS */
  StopFlags: KS_SEEKING_FLAGS;
}

export const sizeofKSPROPERTY_POSITIONS = 24;

export function allocKSPROPERTY_POSITIONS(data?: Partial<KSPROPERTY_POSITIONS>): Uint8Array {
  const buf = new Uint8Array(sizeofKSPROPERTY_POSITIONS);
  const view = new DataView(buf.buffer);
  // 0x00: i64
  if (data?.Current !== undefined) view.setBigInt64(0, BigInt(data.Current), true);
  // 0x08: i64
  if (data?.Stop !== undefined) view.setBigInt64(8, BigInt(data.Stop), true);
  // 0x10: i32
  if (data?.CurrentFlags !== undefined) view.setInt32(16, Number(data.CurrentFlags), true);
  // 0x14: i32
  if (data?.StopFlags !== undefined) view.setInt32(20, Number(data.StopFlags), true);
  return buf;
}

/**
 * Windows.Win32.Media.KernelStreaming.KSPROPERTY_MEDIAAVAILABLE (size: 16)
 */
export interface KSPROPERTY_MEDIAAVAILABLE {
  /** i64 */
  Earliest: Deno.PointerValue;
  /** i64 */
  Latest: Deno.PointerValue;
}

export const sizeofKSPROPERTY_MEDIAAVAILABLE = 16;

export function allocKSPROPERTY_MEDIAAVAILABLE(data?: Partial<KSPROPERTY_MEDIAAVAILABLE>): Uint8Array {
  const buf = new Uint8Array(sizeofKSPROPERTY_MEDIAAVAILABLE);
  const view = new DataView(buf.buffer);
  // 0x00: i64
  if (data?.Earliest !== undefined) view.setBigInt64(0, BigInt(data.Earliest), true);
  // 0x08: i64
  if (data?.Latest !== undefined) view.setBigInt64(8, BigInt(data.Latest), true);
  return buf;
}

/**
 * Windows.Win32.Media.KernelStreaming.KSP_TIMEFORMAT (size: 32)
 */
export interface KSP_TIMEFORMAT {
  /** Windows.Win32.Media.KernelStreaming.KSIDENTIFIER */
  Property: Uint8Array | Deno.PointerValue | null;
  /** System.Guid */
  SourceFormat: Uint8Array | Deno.PointerValue | null;
  /** System.Guid */
  TargetFormat: Uint8Array | Deno.PointerValue | null;
  /** i64 */
  Time: Deno.PointerValue;
}

export const sizeofKSP_TIMEFORMAT = 32;

export function allocKSP_TIMEFORMAT(data?: Partial<KSP_TIMEFORMAT>): Uint8Array {
  const buf = new Uint8Array(sizeofKSP_TIMEFORMAT);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.Property !== undefined) view.setBigUint64(0, data.Property === null ? 0n : BigInt(util.toPointer(data.Property)), true);
  // 0x08: pointer
  if (data?.SourceFormat !== undefined) view.setBigUint64(8, data.SourceFormat === null ? 0n : BigInt(util.toPointer(data.SourceFormat)), true);
  // 0x10: pointer
  if (data?.TargetFormat !== undefined) view.setBigUint64(16, data.TargetFormat === null ? 0n : BigInt(util.toPointer(data.TargetFormat)), true);
  // 0x18: i64
  if (data?.Time !== undefined) view.setBigInt64(24, BigInt(data.Time), true);
  return buf;
}

/**
 * Windows.Win32.Media.KernelStreaming.KSTOPOLOGY_CONNECTION (size: 16)
 */
export interface KSTOPOLOGY_CONNECTION {
  /** u32 */
  FromNode: number;
  /** u32 */
  FromNodePin: number;
  /** u32 */
  ToNode: number;
  /** u32 */
  ToNodePin: number;
}

export const sizeofKSTOPOLOGY_CONNECTION = 16;

export function allocKSTOPOLOGY_CONNECTION(data?: Partial<KSTOPOLOGY_CONNECTION>): Uint8Array {
  const buf = new Uint8Array(sizeofKSTOPOLOGY_CONNECTION);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.FromNode !== undefined) view.setUint32(0, Number(data.FromNode), true);
  // 0x04: u32
  if (data?.FromNodePin !== undefined) view.setUint32(4, Number(data.FromNodePin), true);
  // 0x08: u32
  if (data?.ToNode !== undefined) view.setUint32(8, Number(data.ToNode), true);
  // 0x0c: u32
  if (data?.ToNodePin !== undefined) view.setUint32(12, Number(data.ToNodePin), true);
  return buf;
}

/**
 * Windows.Win32.Media.KernelStreaming.KSTOPOLOGY (size: 64)
 */
export interface KSTOPOLOGY {
  /** u32 */
  CategoriesCount: number;
  /** ptr */
  Categories: Deno.PointerValue | Uint8Array | null;
  /** u32 */
  TopologyNodesCount: number;
  /** ptr */
  TopologyNodes: Deno.PointerValue | Uint8Array | null;
  /** u32 */
  TopologyConnectionsCount: number;
  /** ptr */
  TopologyConnections: Deno.PointerValue | Uint8Array | null;
  /** ptr */
  TopologyNodesNames: Deno.PointerValue | Uint8Array | null;
  /** u32 */
  Reserved: number;
}

export const sizeofKSTOPOLOGY = 64;

export function allocKSTOPOLOGY(data?: Partial<KSTOPOLOGY>): Uint8Array {
  const buf = new Uint8Array(sizeofKSTOPOLOGY);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.CategoriesCount !== undefined) view.setUint32(0, Number(data.CategoriesCount), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.Categories !== undefined) view.setBigUint64(8, data.Categories === null ? 0n : BigInt(util.toPointer(data.Categories)), true);
  // 0x10: u32
  if (data?.TopologyNodesCount !== undefined) view.setUint32(16, Number(data.TopologyNodesCount), true);
  // 0x14: pad4
  // 0x18: pointer
  if (data?.TopologyNodes !== undefined) view.setBigUint64(24, data.TopologyNodes === null ? 0n : BigInt(util.toPointer(data.TopologyNodes)), true);
  // 0x20: u32
  if (data?.TopologyConnectionsCount !== undefined) view.setUint32(32, Number(data.TopologyConnectionsCount), true);
  // 0x24: pad4
  // 0x28: pointer
  if (data?.TopologyConnections !== undefined) view.setBigUint64(40, data.TopologyConnections === null ? 0n : BigInt(util.toPointer(data.TopologyConnections)), true);
  // 0x30: pointer
  if (data?.TopologyNodesNames !== undefined) view.setBigUint64(48, data.TopologyNodesNames === null ? 0n : BigInt(util.toPointer(data.TopologyNodesNames)), true);
  // 0x38: u32
  if (data?.Reserved !== undefined) view.setUint32(56, Number(data.Reserved), true);
  // 0x3c: pad4
  return buf;
}

/**
 * Windows.Win32.Media.KernelStreaming.KSNODE_CREATE (size: 8)
 */
export interface KSNODE_CREATE {
  /** u32 */
  CreateFlags: number;
  /** u32 */
  Node: number;
}

export const sizeofKSNODE_CREATE = 8;

export function allocKSNODE_CREATE(data?: Partial<KSNODE_CREATE>): Uint8Array {
  const buf = new Uint8Array(sizeofKSNODE_CREATE);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.CreateFlags !== undefined) view.setUint32(0, Number(data.CreateFlags), true);
  // 0x04: u32
  if (data?.Node !== undefined) view.setUint32(4, Number(data.Node), true);
  return buf;
}

/**
 * Windows.Win32.Media.KernelStreaming.KSP_PIN (size: 24)
 */
export interface KSP_PIN {
  /** Windows.Win32.Media.KernelStreaming.KSIDENTIFIER */
  Property: Uint8Array | Deno.PointerValue | null;
  /** u32 */
  PinId: number;
  /** _Anonymous_e__Union */
  Anonymous: Uint8Array | Deno.PointerValue | null;
}

export const sizeofKSP_PIN = 24;

export function allocKSP_PIN(data?: Partial<KSP_PIN>): Uint8Array {
  const buf = new Uint8Array(sizeofKSP_PIN);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.Property !== undefined) view.setBigUint64(0, data.Property === null ? 0n : BigInt(util.toPointer(data.Property)), true);
  // 0x08: u32
  if (data?.PinId !== undefined) view.setUint32(8, Number(data.PinId), true);
  // 0x0c: pad4
  // 0x10: pointer
  if (data?.Anonymous !== undefined) view.setBigUint64(16, data.Anonymous === null ? 0n : BigInt(util.toPointer(data.Anonymous)), true);
  return buf;
}

/**
 * Windows.Win32.Media.KernelStreaming.KSE_PIN (size: 16)
 */
export interface KSE_PIN {
  /** Windows.Win32.Media.KernelStreaming.KSIDENTIFIER */
  Event: Uint8Array | Deno.PointerValue | null;
  /** u32 */
  PinId: number;
  /** u32 */
  Reserved: number;
}

export const sizeofKSE_PIN = 16;

export function allocKSE_PIN(data?: Partial<KSE_PIN>): Uint8Array {
  const buf = new Uint8Array(sizeofKSE_PIN);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.Event !== undefined) view.setBigUint64(0, data.Event === null ? 0n : BigInt(util.toPointer(data.Event)), true);
  // 0x08: u32
  if (data?.PinId !== undefined) view.setUint32(8, Number(data.PinId), true);
  // 0x0c: u32
  if (data?.Reserved !== undefined) view.setUint32(12, Number(data.Reserved), true);
  return buf;
}

/**
 * Windows.Win32.Media.KernelStreaming.KSPIN_CINSTANCES (size: 8)
 */
export interface KSPIN_CINSTANCES {
  /** u32 */
  PossibleCount: number;
  /** u32 */
  CurrentCount: number;
}

export const sizeofKSPIN_CINSTANCES = 8;

export function allocKSPIN_CINSTANCES(data?: Partial<KSPIN_CINSTANCES>): Uint8Array {
  const buf = new Uint8Array(sizeofKSPIN_CINSTANCES);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.PossibleCount !== undefined) view.setUint32(0, Number(data.PossibleCount), true);
  // 0x04: u32
  if (data?.CurrentCount !== undefined) view.setUint32(4, Number(data.CurrentCount), true);
  return buf;
}

/**
 * Windows.Win32.Media.KernelStreaming.KSDATAFORMAT (size: 16)
 */
export interface KSDATAFORMAT {
  /** _Anonymous_e__Struct */
  Anonymous: Uint8Array | Deno.PointerValue | null;
  /** i64 */
  Alignment: Deno.PointerValue;
}

export const sizeofKSDATAFORMAT = 16;

export function allocKSDATAFORMAT(data?: Partial<KSDATAFORMAT>): Uint8Array {
  const buf = new Uint8Array(sizeofKSDATAFORMAT);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.Anonymous !== undefined) view.setBigUint64(0, data.Anonymous === null ? 0n : BigInt(util.toPointer(data.Anonymous)), true);
  // 0x08: i64
  if (data?.Alignment !== undefined) view.setBigInt64(8, BigInt(data.Alignment), true);
  return buf;
}

/**
 * Windows.Win32.Media.KernelStreaming.KSATTRIBUTE (size: 16)
 */
export interface KSATTRIBUTE {
  /** u32 */
  Size: number;
  /** u32 */
  Flags: number;
  /** System.Guid */
  Attribute: Uint8Array | Deno.PointerValue | null;
}

export const sizeofKSATTRIBUTE = 16;

export function allocKSATTRIBUTE(data?: Partial<KSATTRIBUTE>): Uint8Array {
  const buf = new Uint8Array(sizeofKSATTRIBUTE);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.Size !== undefined) view.setUint32(0, Number(data.Size), true);
  // 0x04: u32
  if (data?.Flags !== undefined) view.setUint32(4, Number(data.Flags), true);
  // 0x08: pointer
  if (data?.Attribute !== undefined) view.setBigUint64(8, data.Attribute === null ? 0n : BigInt(util.toPointer(data.Attribute)), true);
  return buf;
}

export type HANDLE = Deno.PointerValue;

/**
 * Windows.Win32.Media.KernelStreaming.KSPIN_CONNECT (size: 40)
 */
export interface KSPIN_CONNECT {
  /** Windows.Win32.Media.KernelStreaming.KSIDENTIFIER */
  Interface: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Media.KernelStreaming.KSIDENTIFIER */
  Medium: Uint8Array | Deno.PointerValue | null;
  /** u32 */
  PinId: number;
  /** Windows.Win32.Foundation.HANDLE */
  PinToHandle: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Media.KernelStreaming.KSPRIORITY */
  Priority: Uint8Array | Deno.PointerValue | null;
}

export const sizeofKSPIN_CONNECT = 40;

export function allocKSPIN_CONNECT(data?: Partial<KSPIN_CONNECT>): Uint8Array {
  const buf = new Uint8Array(sizeofKSPIN_CONNECT);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.Interface !== undefined) view.setBigUint64(0, data.Interface === null ? 0n : BigInt(util.toPointer(data.Interface)), true);
  // 0x08: pointer
  if (data?.Medium !== undefined) view.setBigUint64(8, data.Medium === null ? 0n : BigInt(util.toPointer(data.Medium)), true);
  // 0x10: u32
  if (data?.PinId !== undefined) view.setUint32(16, Number(data.PinId), true);
  // 0x14: pad4
  // 0x18: pointer
  if (data?.PinToHandle !== undefined) view.setBigUint64(24, data.PinToHandle === null ? 0n : BigInt(util.toPointer(data.PinToHandle)), true);
  // 0x20: pointer
  if (data?.Priority !== undefined) view.setBigUint64(32, data.Priority === null ? 0n : BigInt(util.toPointer(data.Priority)), true);
  return buf;
}

/**
 * Windows.Win32.Media.KernelStreaming.KSPIN_PHYSICALCONNECTION (size: 16)
 */
export interface KSPIN_PHYSICALCONNECTION {
  /** u32 */
  Size: number;
  /** u32 */
  Pin: number;
  /** array */
  SymbolicLinkName: Deno.PointerValue | null;
}

export const sizeofKSPIN_PHYSICALCONNECTION = 16;

export function allocKSPIN_PHYSICALCONNECTION(data?: Partial<KSPIN_PHYSICALCONNECTION>): Uint8Array {
  const buf = new Uint8Array(sizeofKSPIN_PHYSICALCONNECTION);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.Size !== undefined) view.setUint32(0, Number(data.Size), true);
  // 0x04: u32
  if (data?.Pin !== undefined) view.setUint32(4, Number(data.Pin), true);
  // 0x08: pointer
  if (data?.SymbolicLinkName !== undefined) view.setBigUint64(8, data.SymbolicLinkName === null ? 0n : BigInt(util.toPointer(data.SymbolicLinkName)), true);
  return buf;
}

export type PWSTR = Deno.PointerValue | Uint8Array | null;

/**
 * _Anonymous1_e__Union (size: 64)
 */
export interface _Anonymous1_e__Union {
  /** usize */
  Data0: Deno.PointerValue;
  /** Windows.Win32.Foundation.PWSTR */
  String: string | null;
  /** usize */
  u: Deno.PointerValue;
  /** ptr */
  psid: Deno.PointerValue | Uint8Array | null;
  /** ptr */
  pguid: Deno.PointerValue | Uint8Array | null;
  /** u32 */
  LogonId_LowPart: number;
  /** ptr */
  pObjectTypes: Deno.PointerValue | Uint8Array | null;
  /** ptr */
  pIpAddress: Deno.PointerValue | Uint8Array | null;
}

export const sizeof_Anonymous1_e__Union = 64;

export function alloc_Anonymous1_e__Union(data?: Partial<_Anonymous1_e__Union>): Uint8Array {
  const buf = new Uint8Array(sizeof_Anonymous1_e__Union);
  const view = new DataView(buf.buffer);
  // 0x00: usize
  if (data?.Data0 !== undefined) view.setBigUint64(0, BigInt(data.Data0), true);
  // 0x08: buffer
  if (data?.String !== undefined) {
    (buf as any)._f8 = util.pwstrToFfi(data.String);
    view.setBigUint64(8, (buf as any)._f8 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f8)), true);
  }
  // 0x10: usize
  if (data?.u !== undefined) view.setBigUint64(16, BigInt(data.u), true);
  // 0x18: pointer
  if (data?.psid !== undefined) view.setBigUint64(24, data.psid === null ? 0n : BigInt(util.toPointer(data.psid)), true);
  // 0x20: pointer
  if (data?.pguid !== undefined) view.setBigUint64(32, data.pguid === null ? 0n : BigInt(util.toPointer(data.pguid)), true);
  // 0x28: u32
  if (data?.LogonId_LowPart !== undefined) view.setUint32(40, Number(data.LogonId_LowPart), true);
  // 0x2c: pad4
  // 0x30: pointer
  if (data?.pObjectTypes !== undefined) view.setBigUint64(48, data.pObjectTypes === null ? 0n : BigInt(util.toPointer(data.pObjectTypes)), true);
  // 0x38: pointer
  if (data?.pIpAddress !== undefined) view.setBigUint64(56, data.pIpAddress === null ? 0n : BigInt(util.toPointer(data.pIpAddress)), true);
  return buf;
}

/**
 * _Anonymous2_e__Union (size: 16)
 */
export interface _Anonymous2_e__Union {
  /** usize */
  Data1: Deno.PointerValue;
  /** i32 */
  LogonId_HighPart: number;
}

export const sizeof_Anonymous2_e__Union = 16;

export function alloc_Anonymous2_e__Union(data?: Partial<_Anonymous2_e__Union>): Uint8Array {
  const buf = new Uint8Array(sizeof_Anonymous2_e__Union);
  const view = new DataView(buf.buffer);
  // 0x00: usize
  if (data?.Data1 !== undefined) view.setBigUint64(0, BigInt(data.Data1), true);
  // 0x08: i32
  if (data?.LogonId_HighPart !== undefined) view.setInt32(8, Number(data.LogonId_HighPart), true);
  // 0x0c: pad4
  return buf;
}

/**
 * Windows.Win32.Media.KernelStreaming.KSALLOCATOR_FRAMING (size: 40)
 */
export interface KSALLOCATOR_FRAMING {
  /** _Anonymous1_e__Union */
  Anonymous1: Uint8Array | Deno.PointerValue | null;
  /** u32 */
  PoolType: number;
  /** u32 */
  Frames: number;
  /** u32 */
  FrameSize: number;
  /** _Anonymous2_e__Union */
  Anonymous2: Uint8Array | Deno.PointerValue | null;
  /** u32 */
  Reserved: number;
}

export const sizeofKSALLOCATOR_FRAMING = 40;

export function allocKSALLOCATOR_FRAMING(data?: Partial<KSALLOCATOR_FRAMING>): Uint8Array {
  const buf = new Uint8Array(sizeofKSALLOCATOR_FRAMING);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.Anonymous1 !== undefined) view.setBigUint64(0, data.Anonymous1 === null ? 0n : BigInt(util.toPointer(data.Anonymous1)), true);
  // 0x08: u32
  if (data?.PoolType !== undefined) view.setUint32(8, Number(data.PoolType), true);
  // 0x0c: u32
  if (data?.Frames !== undefined) view.setUint32(12, Number(data.Frames), true);
  // 0x10: u32
  if (data?.FrameSize !== undefined) view.setUint32(16, Number(data.FrameSize), true);
  // 0x14: pad4
  // 0x18: pointer
  if (data?.Anonymous2 !== undefined) view.setBigUint64(24, data.Anonymous2 === null ? 0n : BigInt(util.toPointer(data.Anonymous2)), true);
  // 0x20: u32
  if (data?.Reserved !== undefined) view.setUint32(32, Number(data.Reserved), true);
  // 0x24: pad4
  return buf;
}

/**
 * Windows.Win32.Media.KernelStreaming.KS_FRAMING_RANGE (size: 16)
 */
export interface KS_FRAMING_RANGE {
  /** u32 */
  MinFrameSize: number;
  /** u32 */
  MaxFrameSize: number;
  /** u32 */
  Stepping: number;
}

export const sizeofKS_FRAMING_RANGE = 16;

export function allocKS_FRAMING_RANGE(data?: Partial<KS_FRAMING_RANGE>): Uint8Array {
  const buf = new Uint8Array(sizeofKS_FRAMING_RANGE);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.MinFrameSize !== undefined) view.setUint32(0, Number(data.MinFrameSize), true);
  // 0x04: u32
  if (data?.MaxFrameSize !== undefined) view.setUint32(4, Number(data.MaxFrameSize), true);
  // 0x08: u32
  if (data?.Stepping !== undefined) view.setUint32(8, Number(data.Stepping), true);
  // 0x0c: pad4
  return buf;
}

/**
 * Windows.Win32.Media.KernelStreaming.KS_FRAMING_RANGE_WEIGHTED (size: 16)
 */
export interface KS_FRAMING_RANGE_WEIGHTED {
  /** Windows.Win32.Media.KernelStreaming.KS_FRAMING_RANGE */
  Range: Uint8Array | Deno.PointerValue | null;
  /** u32 */
  InPlaceWeight: number;
  /** u32 */
  NotInPlaceWeight: number;
}

export const sizeofKS_FRAMING_RANGE_WEIGHTED = 16;

export function allocKS_FRAMING_RANGE_WEIGHTED(data?: Partial<KS_FRAMING_RANGE_WEIGHTED>): Uint8Array {
  const buf = new Uint8Array(sizeofKS_FRAMING_RANGE_WEIGHTED);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.Range !== undefined) view.setBigUint64(0, data.Range === null ? 0n : BigInt(util.toPointer(data.Range)), true);
  // 0x08: u32
  if (data?.InPlaceWeight !== undefined) view.setUint32(8, Number(data.InPlaceWeight), true);
  // 0x0c: u32
  if (data?.NotInPlaceWeight !== undefined) view.setUint32(12, Number(data.NotInPlaceWeight), true);
  return buf;
}

/**
 * Windows.Win32.Media.KernelStreaming.KS_COMPRESSION (size: 16)
 */
export interface KS_COMPRESSION {
  /** u32 */
  RatioNumerator: number;
  /** u32 */
  RatioDenominator: number;
  /** u32 */
  RatioConstantMargin: number;
}

export const sizeofKS_COMPRESSION = 16;

export function allocKS_COMPRESSION(data?: Partial<KS_COMPRESSION>): Uint8Array {
  const buf = new Uint8Array(sizeofKS_COMPRESSION);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.RatioNumerator !== undefined) view.setUint32(0, Number(data.RatioNumerator), true);
  // 0x04: u32
  if (data?.RatioDenominator !== undefined) view.setUint32(4, Number(data.RatioDenominator), true);
  // 0x08: u32
  if (data?.RatioConstantMargin !== undefined) view.setUint32(8, Number(data.RatioConstantMargin), true);
  // 0x0c: pad4
  return buf;
}

/**
 * Windows.Win32.Media.KernelStreaming.KS_FRAMING_ITEM (size: 64)
 */
export interface KS_FRAMING_ITEM {
  /** System.Guid */
  MemoryType: Uint8Array | Deno.PointerValue | null;
  /** System.Guid */
  BusType: Uint8Array | Deno.PointerValue | null;
  /** u32 */
  MemoryFlags: number;
  /** u32 */
  BusFlags: number;
  /** u32 */
  Flags: number;
  /** u32 */
  Frames: number;
  /** _Anonymous_e__Union */
  Anonymous: Uint8Array | Deno.PointerValue | null;
  /** u32 */
  MemoryTypeWeight: number;
  /** Windows.Win32.Media.KernelStreaming.KS_FRAMING_RANGE */
  PhysicalRange: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Media.KernelStreaming.KS_FRAMING_RANGE_WEIGHTED */
  FramingRange: Uint8Array | Deno.PointerValue | null;
}

export const sizeofKS_FRAMING_ITEM = 64;

export function allocKS_FRAMING_ITEM(data?: Partial<KS_FRAMING_ITEM>): Uint8Array {
  const buf = new Uint8Array(sizeofKS_FRAMING_ITEM);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.MemoryType !== undefined) view.setBigUint64(0, data.MemoryType === null ? 0n : BigInt(util.toPointer(data.MemoryType)), true);
  // 0x08: pointer
  if (data?.BusType !== undefined) view.setBigUint64(8, data.BusType === null ? 0n : BigInt(util.toPointer(data.BusType)), true);
  // 0x10: u32
  if (data?.MemoryFlags !== undefined) view.setUint32(16, Number(data.MemoryFlags), true);
  // 0x14: u32
  if (data?.BusFlags !== undefined) view.setUint32(20, Number(data.BusFlags), true);
  // 0x18: u32
  if (data?.Flags !== undefined) view.setUint32(24, Number(data.Flags), true);
  // 0x1c: u32
  if (data?.Frames !== undefined) view.setUint32(28, Number(data.Frames), true);
  // 0x20: pointer
  if (data?.Anonymous !== undefined) view.setBigUint64(32, data.Anonymous === null ? 0n : BigInt(util.toPointer(data.Anonymous)), true);
  // 0x28: u32
  if (data?.MemoryTypeWeight !== undefined) view.setUint32(40, Number(data.MemoryTypeWeight), true);
  // 0x2c: pad4
  // 0x30: pointer
  if (data?.PhysicalRange !== undefined) view.setBigUint64(48, data.PhysicalRange === null ? 0n : BigInt(util.toPointer(data.PhysicalRange)), true);
  // 0x38: pointer
  if (data?.FramingRange !== undefined) view.setBigUint64(56, data.FramingRange === null ? 0n : BigInt(util.toPointer(data.FramingRange)), true);
  return buf;
}

/**
 * Windows.Win32.Media.KernelStreaming.KSALLOCATOR_FRAMING_EX (size: 32)
 */
export interface KSALLOCATOR_FRAMING_EX {
  /** u32 */
  CountItems: number;
  /** u32 */
  PinFlags: number;
  /** Windows.Win32.Media.KernelStreaming.KS_COMPRESSION */
  OutputCompression: Uint8Array | Deno.PointerValue | null;
  /** u32 */
  PinWeight: number;
  /** array */
  FramingItem: Deno.PointerValue | null;
}

export const sizeofKSALLOCATOR_FRAMING_EX = 32;

export function allocKSALLOCATOR_FRAMING_EX(data?: Partial<KSALLOCATOR_FRAMING_EX>): Uint8Array {
  const buf = new Uint8Array(sizeofKSALLOCATOR_FRAMING_EX);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.CountItems !== undefined) view.setUint32(0, Number(data.CountItems), true);
  // 0x04: u32
  if (data?.PinFlags !== undefined) view.setUint32(4, Number(data.PinFlags), true);
  // 0x08: pointer
  if (data?.OutputCompression !== undefined) view.setBigUint64(8, data.OutputCompression === null ? 0n : BigInt(util.toPointer(data.OutputCompression)), true);
  // 0x10: u32
  if (data?.PinWeight !== undefined) view.setUint32(16, Number(data.PinWeight), true);
  // 0x14: pad4
  // 0x18: pointer
  if (data?.FramingItem !== undefined) view.setBigUint64(24, data.FramingItem === null ? 0n : BigInt(util.toPointer(data.FramingItem)), true);
  return buf;
}

/**
 * Windows.Win32.Media.KernelStreaming.KSSTREAMALLOCATOR_STATUS (size: 16)
 */
export interface KSSTREAMALLOCATOR_STATUS {
  /** Windows.Win32.Media.KernelStreaming.KSALLOCATOR_FRAMING */
  Framing: Uint8Array | Deno.PointerValue | null;
  /** u32 */
  AllocatedFrames: number;
  /** u32 */
  Reserved: number;
}

export const sizeofKSSTREAMALLOCATOR_STATUS = 16;

export function allocKSSTREAMALLOCATOR_STATUS(data?: Partial<KSSTREAMALLOCATOR_STATUS>): Uint8Array {
  const buf = new Uint8Array(sizeofKSSTREAMALLOCATOR_STATUS);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.Framing !== undefined) view.setBigUint64(0, data.Framing === null ? 0n : BigInt(util.toPointer(data.Framing)), true);
  // 0x08: u32
  if (data?.AllocatedFrames !== undefined) view.setUint32(8, Number(data.AllocatedFrames), true);
  // 0x0c: u32
  if (data?.Reserved !== undefined) view.setUint32(12, Number(data.Reserved), true);
  return buf;
}

/**
 * Windows.Win32.Media.KernelStreaming.KSSTREAMALLOCATOR_STATUS_EX (size: 16)
 */
export interface KSSTREAMALLOCATOR_STATUS_EX {
  /** Windows.Win32.Media.KernelStreaming.KSALLOCATOR_FRAMING_EX */
  Framing: Uint8Array | Deno.PointerValue | null;
  /** u32 */
  AllocatedFrames: number;
  /** u32 */
  Reserved: number;
}

export const sizeofKSSTREAMALLOCATOR_STATUS_EX = 16;

export function allocKSSTREAMALLOCATOR_STATUS_EX(data?: Partial<KSSTREAMALLOCATOR_STATUS_EX>): Uint8Array {
  const buf = new Uint8Array(sizeofKSSTREAMALLOCATOR_STATUS_EX);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.Framing !== undefined) view.setBigUint64(0, data.Framing === null ? 0n : BigInt(util.toPointer(data.Framing)), true);
  // 0x08: u32
  if (data?.AllocatedFrames !== undefined) view.setUint32(8, Number(data.AllocatedFrames), true);
  // 0x0c: u32
  if (data?.Reserved !== undefined) view.setUint32(12, Number(data.Reserved), true);
  return buf;
}

/**
 * Windows.Win32.Media.KernelStreaming.KSSTREAM_METADATA_INFO (size: 32)
 */
export interface KSSTREAM_METADATA_INFO {
  /** u32 */
  BufferSize: number;
  /** u32 */
  UsedSize: number;
  /** ptr */
  Data: Deno.PointerValue | Uint8Array | null;
  /** ptr */
  SystemVa: Deno.PointerValue | Uint8Array | null;
  /** u32 */
  Flags: number;
  /** u32 */
  Reserved: number;
}

export const sizeofKSSTREAM_METADATA_INFO = 32;

export function allocKSSTREAM_METADATA_INFO(data?: Partial<KSSTREAM_METADATA_INFO>): Uint8Array {
  const buf = new Uint8Array(sizeofKSSTREAM_METADATA_INFO);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.BufferSize !== undefined) view.setUint32(0, Number(data.BufferSize), true);
  // 0x04: u32
  if (data?.UsedSize !== undefined) view.setUint32(4, Number(data.UsedSize), true);
  // 0x08: pointer
  if (data?.Data !== undefined) view.setBigUint64(8, data.Data === null ? 0n : BigInt(util.toPointer(data.Data)), true);
  // 0x10: pointer
  if (data?.SystemVa !== undefined) view.setBigUint64(16, data.SystemVa === null ? 0n : BigInt(util.toPointer(data.SystemVa)), true);
  // 0x18: u32
  if (data?.Flags !== undefined) view.setUint32(24, Number(data.Flags), true);
  // 0x1c: u32
  if (data?.Reserved !== undefined) view.setUint32(28, Number(data.Reserved), true);
  return buf;
}

/**
 * Windows.Win32.Media.KernelStreaming.KSSTREAM_UVC_METADATATYPE_TIMESTAMP (size: 24)
 */
export interface KSSTREAM_UVC_METADATATYPE_TIMESTAMP {
  /** u32 */
  PresentationTimeStamp: number;
  /** u32 */
  SourceClockReference: number;
  /** _Anonymous_e__Union */
  Anonymous: Uint8Array | Deno.PointerValue | null;
  /** u16 */
  Reserved0: number;
  /** u32 */
  Reserved1: number;
}

export const sizeofKSSTREAM_UVC_METADATATYPE_TIMESTAMP = 24;

export function allocKSSTREAM_UVC_METADATATYPE_TIMESTAMP(data?: Partial<KSSTREAM_UVC_METADATATYPE_TIMESTAMP>): Uint8Array {
  const buf = new Uint8Array(sizeofKSSTREAM_UVC_METADATATYPE_TIMESTAMP);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.PresentationTimeStamp !== undefined) view.setUint32(0, Number(data.PresentationTimeStamp), true);
  // 0x04: u32
  if (data?.SourceClockReference !== undefined) view.setUint32(4, Number(data.SourceClockReference), true);
  // 0x08: pointer
  if (data?.Anonymous !== undefined) view.setBigUint64(8, data.Anonymous === null ? 0n : BigInt(util.toPointer(data.Anonymous)), true);
  // 0x10: u16
  if (data?.Reserved0 !== undefined) view.setUint16(16, Number(data.Reserved0), true);
  // 0x12: u32
  if (data?.Reserved1 !== undefined) view.setUint32(18, Number(data.Reserved1), true);
  // 0x16: pad2
  return buf;
}

/**
 * Windows.Win32.Media.KernelStreaming.KSSTREAM_UVC_METADATA (size: 16)
 */
export interface KSSTREAM_UVC_METADATA {
  /** Windows.Win32.Media.KernelStreaming.KSSTREAM_UVC_METADATATYPE_TIMESTAMP */
  StartOfFrameTimestamp: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Media.KernelStreaming.KSSTREAM_UVC_METADATATYPE_TIMESTAMP */
  EndOfFrameTimestamp: Uint8Array | Deno.PointerValue | null;
}

export const sizeofKSSTREAM_UVC_METADATA = 16;

export function allocKSSTREAM_UVC_METADATA(data?: Partial<KSSTREAM_UVC_METADATA>): Uint8Array {
  const buf = new Uint8Array(sizeofKSSTREAM_UVC_METADATA);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.StartOfFrameTimestamp !== undefined) view.setBigUint64(0, data.StartOfFrameTimestamp === null ? 0n : BigInt(util.toPointer(data.StartOfFrameTimestamp)), true);
  // 0x08: pointer
  if (data?.EndOfFrameTimestamp !== undefined) view.setBigUint64(8, data.EndOfFrameTimestamp === null ? 0n : BigInt(util.toPointer(data.EndOfFrameTimestamp)), true);
  return buf;
}

/**
 * Windows.Win32.Media.KernelStreaming.KSPIN_MDL_CACHING_NOTIFICATION (size: 16)
 */
export interface KSPIN_MDL_CACHING_NOTIFICATION {
  /** Windows.Win32.Media.KernelStreaming.KSPIN_MDL_CACHING_EVENT */
  Event: KSPIN_MDL_CACHING_EVENT;
  /** ptr */
  Buffer: Deno.PointerValue | Uint8Array | null;
}

export const sizeofKSPIN_MDL_CACHING_NOTIFICATION = 16;

export function allocKSPIN_MDL_CACHING_NOTIFICATION(data?: Partial<KSPIN_MDL_CACHING_NOTIFICATION>): Uint8Array {
  const buf = new Uint8Array(sizeofKSPIN_MDL_CACHING_NOTIFICATION);
  const view = new DataView(buf.buffer);
  // 0x00: i32
  if (data?.Event !== undefined) view.setInt32(0, Number(data.Event), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.Buffer !== undefined) view.setBigUint64(8, data.Buffer === null ? 0n : BigInt(util.toPointer(data.Buffer)), true);
  return buf;
}

/**
 * Windows.Win32.Media.KernelStreaming.KSPIN_MDL_CACHING_NOTIFICATION32 (size: 8)
 */
export interface KSPIN_MDL_CACHING_NOTIFICATION32 {
  /** Windows.Win32.Media.KernelStreaming.KSPIN_MDL_CACHING_EVENT */
  Event: KSPIN_MDL_CACHING_EVENT;
  /** u32 */
  Buffer: number;
}

export const sizeofKSPIN_MDL_CACHING_NOTIFICATION32 = 8;

export function allocKSPIN_MDL_CACHING_NOTIFICATION32(data?: Partial<KSPIN_MDL_CACHING_NOTIFICATION32>): Uint8Array {
  const buf = new Uint8Array(sizeofKSPIN_MDL_CACHING_NOTIFICATION32);
  const view = new DataView(buf.buffer);
  // 0x00: i32
  if (data?.Event !== undefined) view.setInt32(0, Number(data.Event), true);
  // 0x04: u32
  if (data?.Buffer !== undefined) view.setUint32(4, Number(data.Buffer), true);
  return buf;
}

/**
 * Windows.Win32.Media.KernelStreaming.KSQUALITY_MANAGER (size: 16)
 */
export interface KSQUALITY_MANAGER {
  /** Windows.Win32.Foundation.HANDLE */
  QualityManager: Uint8Array | Deno.PointerValue | null;
  /** ptr */
  Context: Deno.PointerValue | Uint8Array | null;
}

export const sizeofKSQUALITY_MANAGER = 16;

export function allocKSQUALITY_MANAGER(data?: Partial<KSQUALITY_MANAGER>): Uint8Array {
  const buf = new Uint8Array(sizeofKSQUALITY_MANAGER);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.QualityManager !== undefined) view.setBigUint64(0, data.QualityManager === null ? 0n : BigInt(util.toPointer(data.QualityManager)), true);
  // 0x08: pointer
  if (data?.Context !== undefined) view.setBigUint64(8, data.Context === null ? 0n : BigInt(util.toPointer(data.Context)), true);
  return buf;
}

/**
 * Windows.Win32.Media.KernelStreaming.KSFRAMETIME (size: 16)
 */
export interface KSFRAMETIME {
  /** i64 */
  Duration: Deno.PointerValue;
  /** u32 */
  FrameFlags: number;
  /** u32 */
  Reserved: number;
}

export const sizeofKSFRAMETIME = 16;

export function allocKSFRAMETIME(data?: Partial<KSFRAMETIME>): Uint8Array {
  const buf = new Uint8Array(sizeofKSFRAMETIME);
  const view = new DataView(buf.buffer);
  // 0x00: i64
  if (data?.Duration !== undefined) view.setBigInt64(0, BigInt(data.Duration), true);
  // 0x08: u32
  if (data?.FrameFlags !== undefined) view.setUint32(8, Number(data.FrameFlags), true);
  // 0x0c: u32
  if (data?.Reserved !== undefined) view.setUint32(12, Number(data.Reserved), true);
  return buf;
}

/**
 * Windows.Win32.Media.KernelStreaming.KSRATE (size: 32)
 */
export interface KSRATE {
  /** i64 */
  PresentationStart: Deno.PointerValue;
  /** i64 */
  Duration: Deno.PointerValue;
  /** Windows.Win32.Media.KernelStreaming.KSIDENTIFIER */
  Interface: Uint8Array | Deno.PointerValue | null;
  /** i32 */
  Rate: number;
  /** u32 */
  Flags: number;
}

export const sizeofKSRATE = 32;

export function allocKSRATE(data?: Partial<KSRATE>): Uint8Array {
  const buf = new Uint8Array(sizeofKSRATE);
  const view = new DataView(buf.buffer);
  // 0x00: i64
  if (data?.PresentationStart !== undefined) view.setBigInt64(0, BigInt(data.PresentationStart), true);
  // 0x08: i64
  if (data?.Duration !== undefined) view.setBigInt64(8, BigInt(data.Duration), true);
  // 0x10: pointer
  if (data?.Interface !== undefined) view.setBigUint64(16, data.Interface === null ? 0n : BigInt(util.toPointer(data.Interface)), true);
  // 0x18: i32
  if (data?.Rate !== undefined) view.setInt32(24, Number(data.Rate), true);
  // 0x1c: u32
  if (data?.Flags !== undefined) view.setUint32(28, Number(data.Flags), true);
  return buf;
}

/**
 * Windows.Win32.Media.KernelStreaming.KSRATE_CAPABILITY (size: 16)
 */
export interface KSRATE_CAPABILITY {
  /** Windows.Win32.Media.KernelStreaming.KSIDENTIFIER */
  Property: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Media.KernelStreaming.KSRATE */
  Rate: Uint8Array | Deno.PointerValue | null;
}

export const sizeofKSRATE_CAPABILITY = 16;

export function allocKSRATE_CAPABILITY(data?: Partial<KSRATE_CAPABILITY>): Uint8Array {
  const buf = new Uint8Array(sizeofKSRATE_CAPABILITY);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.Property !== undefined) view.setBigUint64(0, data.Property === null ? 0n : BigInt(util.toPointer(data.Property)), true);
  // 0x08: pointer
  if (data?.Rate !== undefined) view.setBigUint64(8, data.Rate === null ? 0n : BigInt(util.toPointer(data.Rate)), true);
  return buf;
}

/**
 * Windows.Win32.Media.KernelStreaming.KSCLOCK_CREATE (size: 8)
 */
export interface KSCLOCK_CREATE {
  /** u32 */
  CreateFlags: number;
}

export const sizeofKSCLOCK_CREATE = 8;

export function allocKSCLOCK_CREATE(data?: Partial<KSCLOCK_CREATE>): Uint8Array {
  const buf = new Uint8Array(sizeofKSCLOCK_CREATE);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.CreateFlags !== undefined) view.setUint32(0, Number(data.CreateFlags), true);
  // 0x04: pad4
  return buf;
}

/**
 * Windows.Win32.Media.KernelStreaming.KSCORRELATED_TIME (size: 16)
 */
export interface KSCORRELATED_TIME {
  /** i64 */
  Time: Deno.PointerValue;
  /** i64 */
  SystemTime: Deno.PointerValue;
}

export const sizeofKSCORRELATED_TIME = 16;

export function allocKSCORRELATED_TIME(data?: Partial<KSCORRELATED_TIME>): Uint8Array {
  const buf = new Uint8Array(sizeofKSCORRELATED_TIME);
  const view = new DataView(buf.buffer);
  // 0x00: i64
  if (data?.Time !== undefined) view.setBigInt64(0, BigInt(data.Time), true);
  // 0x08: i64
  if (data?.SystemTime !== undefined) view.setBigInt64(8, BigInt(data.SystemTime), true);
  return buf;
}

/**
 * Windows.Win32.Media.KernelStreaming.KSRESOLUTION (size: 16)
 */
export interface KSRESOLUTION {
  /** i64 */
  Granularity: Deno.PointerValue;
  /** i64 */
  Error: Deno.PointerValue;
}

export const sizeofKSRESOLUTION = 16;

export function allocKSRESOLUTION(data?: Partial<KSRESOLUTION>): Uint8Array {
  const buf = new Uint8Array(sizeofKSRESOLUTION);
  const view = new DataView(buf.buffer);
  // 0x00: i64
  if (data?.Granularity !== undefined) view.setBigInt64(0, BigInt(data.Granularity), true);
  // 0x08: i64
  if (data?.Error !== undefined) view.setBigInt64(8, BigInt(data.Error), true);
  return buf;
}

/**
 * Windows.Win32.Media.KernelStreaming.KSQUALITY (size: 24)
 */
export interface KSQUALITY {
  /** ptr */
  Context: Deno.PointerValue | Uint8Array | null;
  /** u32 */
  Proportion: number;
  /** i64 */
  DeltaTime: Deno.PointerValue;
}

export const sizeofKSQUALITY = 24;

export function allocKSQUALITY(data?: Partial<KSQUALITY>): Uint8Array {
  const buf = new Uint8Array(sizeofKSQUALITY);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.Context !== undefined) view.setBigUint64(0, data.Context === null ? 0n : BigInt(util.toPointer(data.Context)), true);
  // 0x08: u32
  if (data?.Proportion !== undefined) view.setUint32(8, Number(data.Proportion), true);
  // 0x0c: pad4
  // 0x10: i64
  if (data?.DeltaTime !== undefined) view.setBigInt64(16, BigInt(data.DeltaTime), true);
  return buf;
}

/**
 * Windows.Win32.Media.KernelStreaming.KSERROR (size: 16)
 */
export interface KSERROR {
  /** ptr */
  Context: Deno.PointerValue | Uint8Array | null;
  /** u32 */
  Status: number;
}

export const sizeofKSERROR = 16;

export function allocKSERROR(data?: Partial<KSERROR>): Uint8Array {
  const buf = new Uint8Array(sizeofKSERROR);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.Context !== undefined) view.setBigUint64(0, data.Context === null ? 0n : BigInt(util.toPointer(data.Context)), true);
  // 0x08: u32
  if (data?.Status !== undefined) view.setUint32(8, Number(data.Status), true);
  // 0x0c: pad4
  return buf;
}

/**
 * Windows.Win32.Media.KernelStreaming.KSPROPERTY_SERIALHDR (size: 16)
 */
export interface KSPROPERTY_SERIALHDR {
  /** System.Guid */
  PropertySet: Uint8Array | Deno.PointerValue | null;
  /** u32 */
  Count: number;
}

export const sizeofKSPROPERTY_SERIALHDR = 16;

export function allocKSPROPERTY_SERIALHDR(data?: Partial<KSPROPERTY_SERIALHDR>): Uint8Array {
  const buf = new Uint8Array(sizeofKSPROPERTY_SERIALHDR);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.PropertySet !== undefined) view.setBigUint64(0, data.PropertySet === null ? 0n : BigInt(util.toPointer(data.PropertySet)), true);
  // 0x08: u32
  if (data?.Count !== undefined) view.setUint32(8, Number(data.Count), true);
  // 0x0c: pad4
  return buf;
}

/**
 * Windows.Win32.Media.KernelStreaming.KSPROPERTY_SERIAL (size: 16)
 */
export interface KSPROPERTY_SERIAL {
  /** Windows.Win32.Media.KernelStreaming.KSIDENTIFIER */
  PropTypeSet: Uint8Array | Deno.PointerValue | null;
  /** u32 */
  Id: number;
  /** u32 */
  PropertyLength: number;
}

export const sizeofKSPROPERTY_SERIAL = 16;

export function allocKSPROPERTY_SERIAL(data?: Partial<KSPROPERTY_SERIAL>): Uint8Array {
  const buf = new Uint8Array(sizeofKSPROPERTY_SERIAL);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.PropTypeSet !== undefined) view.setBigUint64(0, data.PropTypeSet === null ? 0n : BigInt(util.toPointer(data.PropTypeSet)), true);
  // 0x08: u32
  if (data?.Id !== undefined) view.setUint32(8, Number(data.Id), true);
  // 0x0c: u32
  if (data?.PropertyLength !== undefined) view.setUint32(12, Number(data.PropertyLength), true);
  return buf;
}

/**
 * _combined_e__Struct (size: 16)
 */
export interface _combined_e__Struct {
  /** u32 */
  pHandle: number;
  /** u32 */
  fHandle: number;
  /** u64 */
  uPayload: Deno.PointerValue;
}

export const sizeof_combined_e__Struct = 16;

export function alloc_combined_e__Struct(data?: Partial<_combined_e__Struct>): Uint8Array {
  const buf = new Uint8Array(sizeof_combined_e__Struct);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.pHandle !== undefined) view.setUint32(0, Number(data.pHandle), true);
  // 0x04: u32
  if (data?.fHandle !== undefined) view.setUint32(4, Number(data.fHandle), true);
  // 0x08: u64
  if (data?.uPayload !== undefined) view.setBigUint64(8, BigInt(data.uPayload), true);
  return buf;
}

/**
 * Windows.Win32.Media.KernelStreaming.MF_MDL_SHARED_PAYLOAD_KEY (size: 16)
 */
export interface MF_MDL_SHARED_PAYLOAD_KEY {
  /** _combined_e__Struct */
  combined: Uint8Array | Deno.PointerValue | null;
  /** System.Guid */
  GMDLHandle: Uint8Array | Deno.PointerValue | null;
}

export const sizeofMF_MDL_SHARED_PAYLOAD_KEY = 16;

export function allocMF_MDL_SHARED_PAYLOAD_KEY(data?: Partial<MF_MDL_SHARED_PAYLOAD_KEY>): Uint8Array {
  const buf = new Uint8Array(sizeofMF_MDL_SHARED_PAYLOAD_KEY);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.combined !== undefined) view.setBigUint64(0, data.combined === null ? 0n : BigInt(util.toPointer(data.combined)), true);
  // 0x08: pointer
  if (data?.GMDLHandle !== undefined) view.setBigUint64(8, data.GMDLHandle === null ? 0n : BigInt(util.toPointer(data.GMDLHandle)), true);
  return buf;
}

/**
 * Windows.Win32.Media.KernelStreaming.KSMULTIPLE_DATA_PROP (size: 16)
 */
export interface KSMULTIPLE_DATA_PROP {
  /** Windows.Win32.Media.KernelStreaming.KSIDENTIFIER */
  Property: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Media.KernelStreaming.KSMULTIPLE_ITEM */
  MultipleItem: Uint8Array | Deno.PointerValue | null;
}

export const sizeofKSMULTIPLE_DATA_PROP = 16;

export function allocKSMULTIPLE_DATA_PROP(data?: Partial<KSMULTIPLE_DATA_PROP>): Uint8Array {
  const buf = new Uint8Array(sizeofKSMULTIPLE_DATA_PROP);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.Property !== undefined) view.setBigUint64(0, data.Property === null ? 0n : BigInt(util.toPointer(data.Property)), true);
  // 0x08: pointer
  if (data?.MultipleItem !== undefined) view.setBigUint64(8, data.MultipleItem === null ? 0n : BigInt(util.toPointer(data.MultipleItem)), true);
  return buf;
}

/**
 * Windows.Win32.Media.KernelStreaming.KSAUDIO_POSITION (size: 16)
 */
export interface KSAUDIO_POSITION {
  /** u64 */
  PlayOffset: Deno.PointerValue;
  /** u64 */
  WriteOffset: Deno.PointerValue;
}

export const sizeofKSAUDIO_POSITION = 16;

export function allocKSAUDIO_POSITION(data?: Partial<KSAUDIO_POSITION>): Uint8Array {
  const buf = new Uint8Array(sizeofKSAUDIO_POSITION);
  const view = new DataView(buf.buffer);
  // 0x00: u64
  if (data?.PlayOffset !== undefined) view.setBigUint64(0, BigInt(data.PlayOffset), true);
  // 0x08: u64
  if (data?.WriteOffset !== undefined) view.setBigUint64(8, BigInt(data.WriteOffset), true);
  return buf;
}

/**
 * Windows.Win32.Media.KernelStreaming.KSAUDIO_PRESENTATION_POSITION (size: 16)
 */
export interface KSAUDIO_PRESENTATION_POSITION {
  /** u64 */
  u64PositionInBlocks: Deno.PointerValue;
  /** u64 */
  u64QPCPosition: Deno.PointerValue;
}

export const sizeofKSAUDIO_PRESENTATION_POSITION = 16;

export function allocKSAUDIO_PRESENTATION_POSITION(data?: Partial<KSAUDIO_PRESENTATION_POSITION>): Uint8Array {
  const buf = new Uint8Array(sizeofKSAUDIO_PRESENTATION_POSITION);
  const view = new DataView(buf.buffer);
  // 0x00: u64
  if (data?.u64PositionInBlocks !== undefined) view.setBigUint64(0, BigInt(data.u64PositionInBlocks), true);
  // 0x08: u64
  if (data?.u64QPCPosition !== undefined) view.setBigUint64(8, BigInt(data.u64QPCPosition), true);
  return buf;
}

/**
 * Windows.Win32.Media.KernelStreaming.KSAUDIO_PACKETSIZE_PROCESSINGMODE_CONSTRAINT (size: 16)
 */
export interface KSAUDIO_PACKETSIZE_PROCESSINGMODE_CONSTRAINT {
  /** System.Guid */
  ProcessingMode: Uint8Array | Deno.PointerValue | null;
  /** u32 */
  SamplesPerProcessingPacket: number;
  /** u32 */
  ProcessingPacketDurationInHns: number;
}

export const sizeofKSAUDIO_PACKETSIZE_PROCESSINGMODE_CONSTRAINT = 16;

export function allocKSAUDIO_PACKETSIZE_PROCESSINGMODE_CONSTRAINT(data?: Partial<KSAUDIO_PACKETSIZE_PROCESSINGMODE_CONSTRAINT>): Uint8Array {
  const buf = new Uint8Array(sizeofKSAUDIO_PACKETSIZE_PROCESSINGMODE_CONSTRAINT);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.ProcessingMode !== undefined) view.setBigUint64(0, data.ProcessingMode === null ? 0n : BigInt(util.toPointer(data.ProcessingMode)), true);
  // 0x08: u32
  if (data?.SamplesPerProcessingPacket !== undefined) view.setUint32(8, Number(data.SamplesPerProcessingPacket), true);
  // 0x0c: u32
  if (data?.ProcessingPacketDurationInHns !== undefined) view.setUint32(12, Number(data.ProcessingPacketDurationInHns), true);
  return buf;
}

/**
 * Windows.Win32.Media.KernelStreaming.KSAUDIO_PACKETSIZE_CONSTRAINTS (size: 24)
 */
export interface KSAUDIO_PACKETSIZE_CONSTRAINTS {
  /** u32 */
  MinPacketPeriodInHns: number;
  /** u32 */
  PacketSizeFileAlignment: number;
  /** u32 */
  Reserved: number;
  /** u32 */
  NumProcessingModeConstraints: number;
  /** array */
  ProcessingModeConstraints: Deno.PointerValue | null;
}

export const sizeofKSAUDIO_PACKETSIZE_CONSTRAINTS = 24;

export function allocKSAUDIO_PACKETSIZE_CONSTRAINTS(data?: Partial<KSAUDIO_PACKETSIZE_CONSTRAINTS>): Uint8Array {
  const buf = new Uint8Array(sizeofKSAUDIO_PACKETSIZE_CONSTRAINTS);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.MinPacketPeriodInHns !== undefined) view.setUint32(0, Number(data.MinPacketPeriodInHns), true);
  // 0x04: u32
  if (data?.PacketSizeFileAlignment !== undefined) view.setUint32(4, Number(data.PacketSizeFileAlignment), true);
  // 0x08: u32
  if (data?.Reserved !== undefined) view.setUint32(8, Number(data.Reserved), true);
  // 0x0c: u32
  if (data?.NumProcessingModeConstraints !== undefined) view.setUint32(12, Number(data.NumProcessingModeConstraints), true);
  // 0x10: pointer
  if (data?.ProcessingModeConstraints !== undefined) view.setBigUint64(16, data.ProcessingModeConstraints === null ? 0n : BigInt(util.toPointer(data.ProcessingModeConstraints)), true);
  return buf;
}

/**
 * Windows.Win32.Media.KernelStreaming.KSAUDIO_PACKETSIZE_CONSTRAINTS2 (size: 24)
 */
export interface KSAUDIO_PACKETSIZE_CONSTRAINTS2 {
  /** u32 */
  MinPacketPeriodInHns: number;
  /** u32 */
  PacketSizeFileAlignment: number;
  /** u32 */
  MaxPacketSizeInBytes: number;
  /** u32 */
  NumProcessingModeConstraints: number;
  /** array */
  ProcessingModeConstraints: Deno.PointerValue | null;
}

export const sizeofKSAUDIO_PACKETSIZE_CONSTRAINTS2 = 24;

export function allocKSAUDIO_PACKETSIZE_CONSTRAINTS2(data?: Partial<KSAUDIO_PACKETSIZE_CONSTRAINTS2>): Uint8Array {
  const buf = new Uint8Array(sizeofKSAUDIO_PACKETSIZE_CONSTRAINTS2);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.MinPacketPeriodInHns !== undefined) view.setUint32(0, Number(data.MinPacketPeriodInHns), true);
  // 0x04: u32
  if (data?.PacketSizeFileAlignment !== undefined) view.setUint32(4, Number(data.PacketSizeFileAlignment), true);
  // 0x08: u32
  if (data?.MaxPacketSizeInBytes !== undefined) view.setUint32(8, Number(data.MaxPacketSizeInBytes), true);
  // 0x0c: u32
  if (data?.NumProcessingModeConstraints !== undefined) view.setUint32(12, Number(data.NumProcessingModeConstraints), true);
  // 0x10: pointer
  if (data?.ProcessingModeConstraints !== undefined) view.setBigUint64(16, data.ProcessingModeConstraints === null ? 0n : BigInt(util.toPointer(data.ProcessingModeConstraints)), true);
  return buf;
}

/**
 * Windows.Win32.Media.KernelStreaming.KSAUDIO_MICROPHONE_COORDINATES (size: 16)
 */
export interface KSAUDIO_MICROPHONE_COORDINATES {
  /** u16 */
  usType: number;
  /** i16 */
  wXCoord: number;
  /** i16 */
  wYCoord: number;
  /** i16 */
  wZCoord: number;
  /** i16 */
  wVerticalAngle: number;
  /** i16 */
  wHorizontalAngle: number;
}

export const sizeofKSAUDIO_MICROPHONE_COORDINATES = 16;

export function allocKSAUDIO_MICROPHONE_COORDINATES(data?: Partial<KSAUDIO_MICROPHONE_COORDINATES>): Uint8Array {
  const buf = new Uint8Array(sizeofKSAUDIO_MICROPHONE_COORDINATES);
  const view = new DataView(buf.buffer);
  // 0x00: u16
  if (data?.usType !== undefined) view.setUint16(0, Number(data.usType), true);
  // 0x02: i16
  if (data?.wXCoord !== undefined) view.setInt16(2, Number(data.wXCoord), true);
  // 0x04: i16
  if (data?.wYCoord !== undefined) view.setInt16(4, Number(data.wYCoord), true);
  // 0x06: i16
  if (data?.wZCoord !== undefined) view.setInt16(6, Number(data.wZCoord), true);
  // 0x08: i16
  if (data?.wVerticalAngle !== undefined) view.setInt16(8, Number(data.wVerticalAngle), true);
  // 0x0a: i16
  if (data?.wHorizontalAngle !== undefined) view.setInt16(10, Number(data.wHorizontalAngle), true);
  // 0x0c: pad4
  return buf;
}

/**
 * Windows.Win32.Media.KernelStreaming.KSAUDIO_MIC_ARRAY_GEOMETRY (size: 32)
 */
export interface KSAUDIO_MIC_ARRAY_GEOMETRY {
  /** u16 */
  usVersion: number;
  /** u16 */
  usMicArrayType: number;
  /** i16 */
  wVerticalAngleBegin: number;
  /** i16 */
  wVerticalAngleEnd: number;
  /** i16 */
  wHorizontalAngleBegin: number;
  /** i16 */
  wHorizontalAngleEnd: number;
  /** u16 */
  usFrequencyBandLo: number;
  /** u16 */
  usFrequencyBandHi: number;
  /** u16 */
  usNumberOfMicrophones: number;
  /** array */
  KsMicCoord: Deno.PointerValue | null;
}

export const sizeofKSAUDIO_MIC_ARRAY_GEOMETRY = 32;

export function allocKSAUDIO_MIC_ARRAY_GEOMETRY(data?: Partial<KSAUDIO_MIC_ARRAY_GEOMETRY>): Uint8Array {
  const buf = new Uint8Array(sizeofKSAUDIO_MIC_ARRAY_GEOMETRY);
  const view = new DataView(buf.buffer);
  // 0x00: u16
  if (data?.usVersion !== undefined) view.setUint16(0, Number(data.usVersion), true);
  // 0x02: u16
  if (data?.usMicArrayType !== undefined) view.setUint16(2, Number(data.usMicArrayType), true);
  // 0x04: i16
  if (data?.wVerticalAngleBegin !== undefined) view.setInt16(4, Number(data.wVerticalAngleBegin), true);
  // 0x06: i16
  if (data?.wVerticalAngleEnd !== undefined) view.setInt16(6, Number(data.wVerticalAngleEnd), true);
  // 0x08: i16
  if (data?.wHorizontalAngleBegin !== undefined) view.setInt16(8, Number(data.wHorizontalAngleBegin), true);
  // 0x0a: i16
  if (data?.wHorizontalAngleEnd !== undefined) view.setInt16(10, Number(data.wHorizontalAngleEnd), true);
  // 0x0c: u16
  if (data?.usFrequencyBandLo !== undefined) view.setUint16(12, Number(data.usFrequencyBandLo), true);
  // 0x0e: u16
  if (data?.usFrequencyBandHi !== undefined) view.setUint16(14, Number(data.usFrequencyBandHi), true);
  // 0x10: u16
  if (data?.usNumberOfMicrophones !== undefined) view.setUint16(16, Number(data.usNumberOfMicrophones), true);
  // 0x12: pad6
  // 0x18: pointer
  if (data?.KsMicCoord !== undefined) view.setBigUint64(24, data.KsMicCoord === null ? 0n : BigInt(util.toPointer(data.KsMicCoord)), true);
  return buf;
}

/**
 * _Anonymous3_e__Union (size: 16)
 */
export interface _Anonymous3_e__Union {
  /** u32 */
  dwAlphaDestConst: number;
  /** Windows.Win32.Graphics.DirectDraw.IDirectDrawSurface */
  lpDDSAlphaDest: Uint8Array | Deno.PointerValue | null;
}

export const sizeof_Anonymous3_e__Union = 16;

export function alloc_Anonymous3_e__Union(data?: Partial<_Anonymous3_e__Union>): Uint8Array {
  const buf = new Uint8Array(sizeof_Anonymous3_e__Union);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.dwAlphaDestConst !== undefined) view.setUint32(0, Number(data.dwAlphaDestConst), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.lpDDSAlphaDest !== undefined) view.setBigUint64(8, data.lpDDSAlphaDest === null ? 0n : BigInt(util.toPointer(data.lpDDSAlphaDest)), true);
  return buf;
}

/**
 * Windows.Win32.Media.KernelStreaming.DS3DVECTOR (size: 24)
 */
export interface DS3DVECTOR {
  /** _Anonymous1_e__Union */
  Anonymous1: Uint8Array | Deno.PointerValue | null;
  /** _Anonymous2_e__Union */
  Anonymous2: Uint8Array | Deno.PointerValue | null;
  /** _Anonymous3_e__Union */
  Anonymous3: Uint8Array | Deno.PointerValue | null;
}

export const sizeofDS3DVECTOR = 24;

export function allocDS3DVECTOR(data?: Partial<DS3DVECTOR>): Uint8Array {
  const buf = new Uint8Array(sizeofDS3DVECTOR);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.Anonymous1 !== undefined) view.setBigUint64(0, data.Anonymous1 === null ? 0n : BigInt(util.toPointer(data.Anonymous1)), true);
  // 0x08: pointer
  if (data?.Anonymous2 !== undefined) view.setBigUint64(8, data.Anonymous2 === null ? 0n : BigInt(util.toPointer(data.Anonymous2)), true);
  // 0x10: pointer
  if (data?.Anonymous3 !== undefined) view.setBigUint64(16, data.Anonymous3 === null ? 0n : BigInt(util.toPointer(data.Anonymous3)), true);
  return buf;
}

/**
 * Windows.Win32.Media.KernelStreaming.KSDS3D_LISTENER_ALL (size: 48)
 */
export interface KSDS3D_LISTENER_ALL {
  /** Windows.Win32.Media.KernelStreaming.DS3DVECTOR */
  Position: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Media.KernelStreaming.DS3DVECTOR */
  Velocity: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Media.KernelStreaming.DS3DVECTOR */
  OrientFront: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Media.KernelStreaming.DS3DVECTOR */
  OrientTop: Uint8Array | Deno.PointerValue | null;
  /** f32 */
  DistanceFactor: number;
  /** f32 */
  RolloffFactor: number;
  /** f32 */
  DopplerFactor: number;
}

export const sizeofKSDS3D_LISTENER_ALL = 48;

export function allocKSDS3D_LISTENER_ALL(data?: Partial<KSDS3D_LISTENER_ALL>): Uint8Array {
  const buf = new Uint8Array(sizeofKSDS3D_LISTENER_ALL);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.Position !== undefined) view.setBigUint64(0, data.Position === null ? 0n : BigInt(util.toPointer(data.Position)), true);
  // 0x08: pointer
  if (data?.Velocity !== undefined) view.setBigUint64(8, data.Velocity === null ? 0n : BigInt(util.toPointer(data.Velocity)), true);
  // 0x10: pointer
  if (data?.OrientFront !== undefined) view.setBigUint64(16, data.OrientFront === null ? 0n : BigInt(util.toPointer(data.OrientFront)), true);
  // 0x18: pointer
  if (data?.OrientTop !== undefined) view.setBigUint64(24, data.OrientTop === null ? 0n : BigInt(util.toPointer(data.OrientTop)), true);
  // 0x20: f32
  if (data?.DistanceFactor !== undefined) view.setFloat32(32, Number(data.DistanceFactor), true);
  // 0x24: f32
  if (data?.RolloffFactor !== undefined) view.setFloat32(36, Number(data.RolloffFactor), true);
  // 0x28: f32
  if (data?.DopplerFactor !== undefined) view.setFloat32(40, Number(data.DopplerFactor), true);
  // 0x2c: pad4
  return buf;
}

/**
 * Windows.Win32.Media.KernelStreaming.KSDS3D_LISTENER_ORIENTATION (size: 16)
 */
export interface KSDS3D_LISTENER_ORIENTATION {
  /** Windows.Win32.Media.KernelStreaming.DS3DVECTOR */
  Front: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Media.KernelStreaming.DS3DVECTOR */
  Top: Uint8Array | Deno.PointerValue | null;
}

export const sizeofKSDS3D_LISTENER_ORIENTATION = 16;

export function allocKSDS3D_LISTENER_ORIENTATION(data?: Partial<KSDS3D_LISTENER_ORIENTATION>): Uint8Array {
  const buf = new Uint8Array(sizeofKSDS3D_LISTENER_ORIENTATION);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.Front !== undefined) view.setBigUint64(0, data.Front === null ? 0n : BigInt(util.toPointer(data.Front)), true);
  // 0x08: pointer
  if (data?.Top !== undefined) view.setBigUint64(8, data.Top === null ? 0n : BigInt(util.toPointer(data.Top)), true);
  return buf;
}

/**
 * Windows.Win32.Media.KernelStreaming.KSDS3D_BUFFER_ALL (size: 48)
 */
export interface KSDS3D_BUFFER_ALL {
  /** Windows.Win32.Media.KernelStreaming.DS3DVECTOR */
  Position: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Media.KernelStreaming.DS3DVECTOR */
  Velocity: Uint8Array | Deno.PointerValue | null;
  /** u32 */
  InsideConeAngle: number;
  /** u32 */
  OutsideConeAngle: number;
  /** Windows.Win32.Media.KernelStreaming.DS3DVECTOR */
  ConeOrientation: Uint8Array | Deno.PointerValue | null;
  /** i32 */
  ConeOutsideVolume: number;
  /** f32 */
  MinDistance: number;
  /** f32 */
  MaxDistance: number;
  /** u32 */
  Mode: number;
}

export const sizeofKSDS3D_BUFFER_ALL = 48;

export function allocKSDS3D_BUFFER_ALL(data?: Partial<KSDS3D_BUFFER_ALL>): Uint8Array {
  const buf = new Uint8Array(sizeofKSDS3D_BUFFER_ALL);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.Position !== undefined) view.setBigUint64(0, data.Position === null ? 0n : BigInt(util.toPointer(data.Position)), true);
  // 0x08: pointer
  if (data?.Velocity !== undefined) view.setBigUint64(8, data.Velocity === null ? 0n : BigInt(util.toPointer(data.Velocity)), true);
  // 0x10: u32
  if (data?.InsideConeAngle !== undefined) view.setUint32(16, Number(data.InsideConeAngle), true);
  // 0x14: u32
  if (data?.OutsideConeAngle !== undefined) view.setUint32(20, Number(data.OutsideConeAngle), true);
  // 0x18: pointer
  if (data?.ConeOrientation !== undefined) view.setBigUint64(24, data.ConeOrientation === null ? 0n : BigInt(util.toPointer(data.ConeOrientation)), true);
  // 0x20: i32
  if (data?.ConeOutsideVolume !== undefined) view.setInt32(32, Number(data.ConeOutsideVolume), true);
  // 0x24: f32
  if (data?.MinDistance !== undefined) view.setFloat32(36, Number(data.MinDistance), true);
  // 0x28: f32
  if (data?.MaxDistance !== undefined) view.setFloat32(40, Number(data.MaxDistance), true);
  // 0x2c: u32
  if (data?.Mode !== undefined) view.setUint32(44, Number(data.Mode), true);
  return buf;
}

/**
 * Windows.Win32.Media.KernelStreaming.KSDS3D_BUFFER_CONE_ANGLES (size: 8)
 */
export interface KSDS3D_BUFFER_CONE_ANGLES {
  /** u32 */
  InsideConeAngle: number;
  /** u32 */
  OutsideConeAngle: number;
}

export const sizeofKSDS3D_BUFFER_CONE_ANGLES = 8;

export function allocKSDS3D_BUFFER_CONE_ANGLES(data?: Partial<KSDS3D_BUFFER_CONE_ANGLES>): Uint8Array {
  const buf = new Uint8Array(sizeofKSDS3D_BUFFER_CONE_ANGLES);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.InsideConeAngle !== undefined) view.setUint32(0, Number(data.InsideConeAngle), true);
  // 0x04: u32
  if (data?.OutsideConeAngle !== undefined) view.setUint32(4, Number(data.OutsideConeAngle), true);
  return buf;
}

export type BOOL = number;

/**
 * Windows.Win32.Media.KernelStreaming.KSDS3D_HRTF_PARAMS_MSG (size: 24)
 */
export interface KSDS3D_HRTF_PARAMS_MSG {
  /** u32 */
  Size: number;
  /** u32 */
  Enabled: number;
  /** Windows.Win32.Foundation.BOOL */
  SwapChannels: boolean;
  /** Windows.Win32.Foundation.BOOL */
  ZeroAzimuth: boolean;
  /** Windows.Win32.Foundation.BOOL */
  CrossFadeOutput: boolean;
  /** u32 */
  FilterSize: number;
}

export const sizeofKSDS3D_HRTF_PARAMS_MSG = 24;

export function allocKSDS3D_HRTF_PARAMS_MSG(data?: Partial<KSDS3D_HRTF_PARAMS_MSG>): Uint8Array {
  const buf = new Uint8Array(sizeofKSDS3D_HRTF_PARAMS_MSG);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.Size !== undefined) view.setUint32(0, Number(data.Size), true);
  // 0x04: u32
  if (data?.Enabled !== undefined) view.setUint32(4, Number(data.Enabled), true);
  // 0x08: i32
  if (data?.SwapChannels !== undefined) view.setInt32(8, Number(data.SwapChannels), true);
  // 0x0c: i32
  if (data?.ZeroAzimuth !== undefined) view.setInt32(12, Number(data.ZeroAzimuth), true);
  // 0x10: i32
  if (data?.CrossFadeOutput !== undefined) view.setInt32(16, Number(data.CrossFadeOutput), true);
  // 0x14: u32
  if (data?.FilterSize !== undefined) view.setUint32(20, Number(data.FilterSize), true);
  return buf;
}

/**
 * Windows.Win32.Media.KernelStreaming.KSDS3D_HRTF_INIT_MSG (size: 32)
 */
export interface KSDS3D_HRTF_INIT_MSG {
  /** u32 */
  Size: number;
  /** Windows.Win32.Media.KernelStreaming.KSDS3D_HRTF_FILTER_QUALITY */
  Quality: KSDS3D_HRTF_FILTER_QUALITY;
  /** f32 */
  SampleRate: number;
  /** u32 */
  MaxFilterSize: number;
  /** u32 */
  FilterTransientMuteLength: number;
  /** u32 */
  FilterOverlapBufferLength: number;
  /** u32 */
  OutputOverlapBufferLength: number;
  /** u32 */
  Reserved: number;
}

export const sizeofKSDS3D_HRTF_INIT_MSG = 32;

export function allocKSDS3D_HRTF_INIT_MSG(data?: Partial<KSDS3D_HRTF_INIT_MSG>): Uint8Array {
  const buf = new Uint8Array(sizeofKSDS3D_HRTF_INIT_MSG);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.Size !== undefined) view.setUint32(0, Number(data.Size), true);
  // 0x04: i32
  if (data?.Quality !== undefined) view.setInt32(4, Number(data.Quality), true);
  // 0x08: f32
  if (data?.SampleRate !== undefined) view.setFloat32(8, Number(data.SampleRate), true);
  // 0x0c: u32
  if (data?.MaxFilterSize !== undefined) view.setUint32(12, Number(data.MaxFilterSize), true);
  // 0x10: u32
  if (data?.FilterTransientMuteLength !== undefined) view.setUint32(16, Number(data.FilterTransientMuteLength), true);
  // 0x14: u32
  if (data?.FilterOverlapBufferLength !== undefined) view.setUint32(20, Number(data.FilterOverlapBufferLength), true);
  // 0x18: u32
  if (data?.OutputOverlapBufferLength !== undefined) view.setUint32(24, Number(data.OutputOverlapBufferLength), true);
  // 0x1c: u32
  if (data?.Reserved !== undefined) view.setUint32(28, Number(data.Reserved), true);
  return buf;
}

/**
 * Windows.Win32.Media.KernelStreaming.KSDS3D_HRTF_FILTER_FORMAT_MSG (size: 16)
 */
export interface KSDS3D_HRTF_FILTER_FORMAT_MSG {
  /** Windows.Win32.Media.KernelStreaming.KSDS3D_HRTF_FILTER_METHOD */
  FilterMethod: KSDS3D_HRTF_FILTER_METHOD;
  /** Windows.Win32.Media.KernelStreaming.KSDS3D_HRTF_COEFF_FORMAT */
  CoeffFormat: KSDS3D_HRTF_COEFF_FORMAT;
  /** Windows.Win32.Media.KernelStreaming.KSDS3D_HRTF_FILTER_VERSION */
  Version: KSDS3D_HRTF_FILTER_VERSION;
  /** u32 */
  Reserved: number;
}

export const sizeofKSDS3D_HRTF_FILTER_FORMAT_MSG = 16;

export function allocKSDS3D_HRTF_FILTER_FORMAT_MSG(data?: Partial<KSDS3D_HRTF_FILTER_FORMAT_MSG>): Uint8Array {
  const buf = new Uint8Array(sizeofKSDS3D_HRTF_FILTER_FORMAT_MSG);
  const view = new DataView(buf.buffer);
  // 0x00: i32
  if (data?.FilterMethod !== undefined) view.setInt32(0, Number(data.FilterMethod), true);
  // 0x04: i32
  if (data?.CoeffFormat !== undefined) view.setInt32(4, Number(data.CoeffFormat), true);
  // 0x08: i32
  if (data?.Version !== undefined) view.setInt32(8, Number(data.Version), true);
  // 0x0c: u32
  if (data?.Reserved !== undefined) view.setUint32(12, Number(data.Reserved), true);
  return buf;
}

/**
 * Windows.Win32.Media.KernelStreaming.KSDS3D_ITD_PARAMS (size: 24)
 */
export interface KSDS3D_ITD_PARAMS {
  /** i32 */
  Channel: number;
  /** f32 */
  VolSmoothScale: number;
  /** f32 */
  TotalDryAttenuation: number;
  /** f32 */
  TotalWetAttenuation: number;
  /** i32 */
  SmoothFrequency: number;
  /** i32 */
  Delay: number;
}

export const sizeofKSDS3D_ITD_PARAMS = 24;

export function allocKSDS3D_ITD_PARAMS(data?: Partial<KSDS3D_ITD_PARAMS>): Uint8Array {
  const buf = new Uint8Array(sizeofKSDS3D_ITD_PARAMS);
  const view = new DataView(buf.buffer);
  // 0x00: i32
  if (data?.Channel !== undefined) view.setInt32(0, Number(data.Channel), true);
  // 0x04: f32
  if (data?.VolSmoothScale !== undefined) view.setFloat32(4, Number(data.VolSmoothScale), true);
  // 0x08: f32
  if (data?.TotalDryAttenuation !== undefined) view.setFloat32(8, Number(data.TotalDryAttenuation), true);
  // 0x0c: f32
  if (data?.TotalWetAttenuation !== undefined) view.setFloat32(12, Number(data.TotalWetAttenuation), true);
  // 0x10: i32
  if (data?.SmoothFrequency !== undefined) view.setInt32(16, Number(data.SmoothFrequency), true);
  // 0x14: i32
  if (data?.Delay !== undefined) view.setInt32(20, Number(data.Delay), true);
  return buf;
}

/**
 * Windows.Win32.Media.KernelStreaming.KSDS3D_ITD_PARAMS_MSG (size: 32)
 */
export interface KSDS3D_ITD_PARAMS_MSG {
  /** u32 */
  Enabled: number;
  /** Windows.Win32.Media.KernelStreaming.KSDS3D_ITD_PARAMS */
  LeftParams: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Media.KernelStreaming.KSDS3D_ITD_PARAMS */
  RightParams: Uint8Array | Deno.PointerValue | null;
  /** u32 */
  Reserved: number;
}

export const sizeofKSDS3D_ITD_PARAMS_MSG = 32;

export function allocKSDS3D_ITD_PARAMS_MSG(data?: Partial<KSDS3D_ITD_PARAMS_MSG>): Uint8Array {
  const buf = new Uint8Array(sizeofKSDS3D_ITD_PARAMS_MSG);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.Enabled !== undefined) view.setUint32(0, Number(data.Enabled), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.LeftParams !== undefined) view.setBigUint64(8, data.LeftParams === null ? 0n : BigInt(util.toPointer(data.LeftParams)), true);
  // 0x10: pointer
  if (data?.RightParams !== undefined) view.setBigUint64(16, data.RightParams === null ? 0n : BigInt(util.toPointer(data.RightParams)), true);
  // 0x18: u32
  if (data?.Reserved !== undefined) view.setUint32(24, Number(data.Reserved), true);
  // 0x1c: pad4
  return buf;
}

/**
 * Windows.Win32.Media.KernelStreaming.KSDATARANGE_AUDIO (size: 32)
 */
export interface KSDATARANGE_AUDIO {
  /** Windows.Win32.Media.KernelStreaming.KSDATAFORMAT */
  DataRange: Uint8Array | Deno.PointerValue | null;
  /** u32 */
  MaximumChannels: number;
  /** u32 */
  MinimumBitsPerSample: number;
  /** u32 */
  MaximumBitsPerSample: number;
  /** u32 */
  MinimumSampleFrequency: number;
  /** u32 */
  MaximumSampleFrequency: number;
}

export const sizeofKSDATARANGE_AUDIO = 32;

export function allocKSDATARANGE_AUDIO(data?: Partial<KSDATARANGE_AUDIO>): Uint8Array {
  const buf = new Uint8Array(sizeofKSDATARANGE_AUDIO);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.DataRange !== undefined) view.setBigUint64(0, data.DataRange === null ? 0n : BigInt(util.toPointer(data.DataRange)), true);
  // 0x08: u32
  if (data?.MaximumChannels !== undefined) view.setUint32(8, Number(data.MaximumChannels), true);
  // 0x0c: u32
  if (data?.MinimumBitsPerSample !== undefined) view.setUint32(12, Number(data.MinimumBitsPerSample), true);
  // 0x10: u32
  if (data?.MaximumBitsPerSample !== undefined) view.setUint32(16, Number(data.MaximumBitsPerSample), true);
  // 0x14: u32
  if (data?.MinimumSampleFrequency !== undefined) view.setUint32(20, Number(data.MinimumSampleFrequency), true);
  // 0x18: u32
  if (data?.MaximumSampleFrequency !== undefined) view.setUint32(24, Number(data.MaximumSampleFrequency), true);
  // 0x1c: pad4
  return buf;
}

/**
 * Windows.Win32.Media.KernelStreaming.KSRTAUDIO_BUFFER_PROPERTY (size: 24)
 */
export interface KSRTAUDIO_BUFFER_PROPERTY {
  /** Windows.Win32.Media.KernelStreaming.KSIDENTIFIER */
  Property: Uint8Array | Deno.PointerValue | null;
  /** ptr */
  BaseAddress: Deno.PointerValue | Uint8Array | null;
  /** u32 */
  RequestedBufferSize: number;
}

export const sizeofKSRTAUDIO_BUFFER_PROPERTY = 24;

export function allocKSRTAUDIO_BUFFER_PROPERTY(data?: Partial<KSRTAUDIO_BUFFER_PROPERTY>): Uint8Array {
  const buf = new Uint8Array(sizeofKSRTAUDIO_BUFFER_PROPERTY);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.Property !== undefined) view.setBigUint64(0, data.Property === null ? 0n : BigInt(util.toPointer(data.Property)), true);
  // 0x08: pointer
  if (data?.BaseAddress !== undefined) view.setBigUint64(8, data.BaseAddress === null ? 0n : BigInt(util.toPointer(data.BaseAddress)), true);
  // 0x10: u32
  if (data?.RequestedBufferSize !== undefined) view.setUint32(16, Number(data.RequestedBufferSize), true);
  // 0x14: pad4
  return buf;
}

/**
 * Windows.Win32.Media.KernelStreaming.KSRTAUDIO_BUFFER_PROPERTY32 (size: 16)
 */
export interface KSRTAUDIO_BUFFER_PROPERTY32 {
  /** Windows.Win32.Media.KernelStreaming.KSIDENTIFIER */
  Property: Uint8Array | Deno.PointerValue | null;
  /** u32 */
  BaseAddress: number;
  /** u32 */
  RequestedBufferSize: number;
}

export const sizeofKSRTAUDIO_BUFFER_PROPERTY32 = 16;

export function allocKSRTAUDIO_BUFFER_PROPERTY32(data?: Partial<KSRTAUDIO_BUFFER_PROPERTY32>): Uint8Array {
  const buf = new Uint8Array(sizeofKSRTAUDIO_BUFFER_PROPERTY32);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.Property !== undefined) view.setBigUint64(0, data.Property === null ? 0n : BigInt(util.toPointer(data.Property)), true);
  // 0x08: u32
  if (data?.BaseAddress !== undefined) view.setUint32(8, Number(data.BaseAddress), true);
  // 0x0c: u32
  if (data?.RequestedBufferSize !== undefined) view.setUint32(12, Number(data.RequestedBufferSize), true);
  return buf;
}

/**
 * Windows.Win32.Media.KernelStreaming.KSRTAUDIO_BUFFER_PROPERTY_WITH_NOTIFICATION (size: 24)
 */
export interface KSRTAUDIO_BUFFER_PROPERTY_WITH_NOTIFICATION {
  /** Windows.Win32.Media.KernelStreaming.KSIDENTIFIER */
  Property: Uint8Array | Deno.PointerValue | null;
  /** ptr */
  BaseAddress: Deno.PointerValue | Uint8Array | null;
  /** u32 */
  RequestedBufferSize: number;
  /** u32 */
  NotificationCount: number;
}

export const sizeofKSRTAUDIO_BUFFER_PROPERTY_WITH_NOTIFICATION = 24;

export function allocKSRTAUDIO_BUFFER_PROPERTY_WITH_NOTIFICATION(data?: Partial<KSRTAUDIO_BUFFER_PROPERTY_WITH_NOTIFICATION>): Uint8Array {
  const buf = new Uint8Array(sizeofKSRTAUDIO_BUFFER_PROPERTY_WITH_NOTIFICATION);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.Property !== undefined) view.setBigUint64(0, data.Property === null ? 0n : BigInt(util.toPointer(data.Property)), true);
  // 0x08: pointer
  if (data?.BaseAddress !== undefined) view.setBigUint64(8, data.BaseAddress === null ? 0n : BigInt(util.toPointer(data.BaseAddress)), true);
  // 0x10: u32
  if (data?.RequestedBufferSize !== undefined) view.setUint32(16, Number(data.RequestedBufferSize), true);
  // 0x14: u32
  if (data?.NotificationCount !== undefined) view.setUint32(20, Number(data.NotificationCount), true);
  return buf;
}

/**
 * Windows.Win32.Media.KernelStreaming.KSRTAUDIO_BUFFER_PROPERTY_WITH_NOTIFICATION32 (size: 24)
 */
export interface KSRTAUDIO_BUFFER_PROPERTY_WITH_NOTIFICATION32 {
  /** Windows.Win32.Media.KernelStreaming.KSIDENTIFIER */
  Property: Uint8Array | Deno.PointerValue | null;
  /** u32 */
  BaseAddress: number;
  /** u32 */
  RequestedBufferSize: number;
  /** u32 */
  NotificationCount: number;
}

export const sizeofKSRTAUDIO_BUFFER_PROPERTY_WITH_NOTIFICATION32 = 24;

export function allocKSRTAUDIO_BUFFER_PROPERTY_WITH_NOTIFICATION32(data?: Partial<KSRTAUDIO_BUFFER_PROPERTY_WITH_NOTIFICATION32>): Uint8Array {
  const buf = new Uint8Array(sizeofKSRTAUDIO_BUFFER_PROPERTY_WITH_NOTIFICATION32);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.Property !== undefined) view.setBigUint64(0, data.Property === null ? 0n : BigInt(util.toPointer(data.Property)), true);
  // 0x08: u32
  if (data?.BaseAddress !== undefined) view.setUint32(8, Number(data.BaseAddress), true);
  // 0x0c: u32
  if (data?.RequestedBufferSize !== undefined) view.setUint32(12, Number(data.RequestedBufferSize), true);
  // 0x10: u32
  if (data?.NotificationCount !== undefined) view.setUint32(16, Number(data.NotificationCount), true);
  // 0x14: pad4
  return buf;
}

/**
 * Windows.Win32.Media.KernelStreaming.KSRTAUDIO_BUFFER (size: 16)
 */
export interface KSRTAUDIO_BUFFER {
  /** ptr */
  BufferAddress: Deno.PointerValue | Uint8Array | null;
  /** u32 */
  ActualBufferSize: number;
  /** Windows.Win32.Foundation.BOOL */
  CallMemoryBarrier: boolean;
}

export const sizeofKSRTAUDIO_BUFFER = 16;

export function allocKSRTAUDIO_BUFFER(data?: Partial<KSRTAUDIO_BUFFER>): Uint8Array {
  const buf = new Uint8Array(sizeofKSRTAUDIO_BUFFER);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.BufferAddress !== undefined) view.setBigUint64(0, data.BufferAddress === null ? 0n : BigInt(util.toPointer(data.BufferAddress)), true);
  // 0x08: u32
  if (data?.ActualBufferSize !== undefined) view.setUint32(8, Number(data.ActualBufferSize), true);
  // 0x0c: i32
  if (data?.CallMemoryBarrier !== undefined) view.setInt32(12, Number(data.CallMemoryBarrier), true);
  return buf;
}

/**
 * Windows.Win32.Media.KernelStreaming.KSRTAUDIO_BUFFER32 (size: 16)
 */
export interface KSRTAUDIO_BUFFER32 {
  /** u32 */
  BufferAddress: number;
  /** u32 */
  ActualBufferSize: number;
  /** Windows.Win32.Foundation.BOOL */
  CallMemoryBarrier: boolean;
}

export const sizeofKSRTAUDIO_BUFFER32 = 16;

export function allocKSRTAUDIO_BUFFER32(data?: Partial<KSRTAUDIO_BUFFER32>): Uint8Array {
  const buf = new Uint8Array(sizeofKSRTAUDIO_BUFFER32);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.BufferAddress !== undefined) view.setUint32(0, Number(data.BufferAddress), true);
  // 0x04: u32
  if (data?.ActualBufferSize !== undefined) view.setUint32(4, Number(data.ActualBufferSize), true);
  // 0x08: i32
  if (data?.CallMemoryBarrier !== undefined) view.setInt32(8, Number(data.CallMemoryBarrier), true);
  // 0x0c: pad4
  return buf;
}

/**
 * Windows.Win32.Media.KernelStreaming.KSRTAUDIO_HWLATENCY (size: 16)
 */
export interface KSRTAUDIO_HWLATENCY {
  /** u32 */
  FifoSize: number;
  /** u32 */
  ChipsetDelay: number;
  /** u32 */
  CodecDelay: number;
}

export const sizeofKSRTAUDIO_HWLATENCY = 16;

export function allocKSRTAUDIO_HWLATENCY(data?: Partial<KSRTAUDIO_HWLATENCY>): Uint8Array {
  const buf = new Uint8Array(sizeofKSRTAUDIO_HWLATENCY);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.FifoSize !== undefined) view.setUint32(0, Number(data.FifoSize), true);
  // 0x04: u32
  if (data?.ChipsetDelay !== undefined) view.setUint32(4, Number(data.ChipsetDelay), true);
  // 0x08: u32
  if (data?.CodecDelay !== undefined) view.setUint32(8, Number(data.CodecDelay), true);
  // 0x0c: pad4
  return buf;
}

/**
 * Windows.Win32.Media.KernelStreaming.KSRTAUDIO_HWREGISTER_PROPERTY (size: 16)
 */
export interface KSRTAUDIO_HWREGISTER_PROPERTY {
  /** Windows.Win32.Media.KernelStreaming.KSIDENTIFIER */
  Property: Uint8Array | Deno.PointerValue | null;
  /** ptr */
  BaseAddress: Deno.PointerValue | Uint8Array | null;
}

export const sizeofKSRTAUDIO_HWREGISTER_PROPERTY = 16;

export function allocKSRTAUDIO_HWREGISTER_PROPERTY(data?: Partial<KSRTAUDIO_HWREGISTER_PROPERTY>): Uint8Array {
  const buf = new Uint8Array(sizeofKSRTAUDIO_HWREGISTER_PROPERTY);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.Property !== undefined) view.setBigUint64(0, data.Property === null ? 0n : BigInt(util.toPointer(data.Property)), true);
  // 0x08: pointer
  if (data?.BaseAddress !== undefined) view.setBigUint64(8, data.BaseAddress === null ? 0n : BigInt(util.toPointer(data.BaseAddress)), true);
  return buf;
}

/**
 * Windows.Win32.Media.KernelStreaming.KSRTAUDIO_HWREGISTER_PROPERTY32 (size: 16)
 */
export interface KSRTAUDIO_HWREGISTER_PROPERTY32 {
  /** Windows.Win32.Media.KernelStreaming.KSIDENTIFIER */
  Property: Uint8Array | Deno.PointerValue | null;
  /** u32 */
  BaseAddress: number;
}

export const sizeofKSRTAUDIO_HWREGISTER_PROPERTY32 = 16;

export function allocKSRTAUDIO_HWREGISTER_PROPERTY32(data?: Partial<KSRTAUDIO_HWREGISTER_PROPERTY32>): Uint8Array {
  const buf = new Uint8Array(sizeofKSRTAUDIO_HWREGISTER_PROPERTY32);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.Property !== undefined) view.setBigUint64(0, data.Property === null ? 0n : BigInt(util.toPointer(data.Property)), true);
  // 0x08: u32
  if (data?.BaseAddress !== undefined) view.setUint32(8, Number(data.BaseAddress), true);
  // 0x0c: pad4
  return buf;
}

/**
 * Windows.Win32.Media.KernelStreaming.KSRTAUDIO_HWREGISTER (size: 40)
 */
export interface KSRTAUDIO_HWREGISTER {
  /** ptr */
  Register: Deno.PointerValue | Uint8Array | null;
  /** u32 */
  Width: number;
  /** u64 */
  Numerator: Deno.PointerValue;
  /** u64 */
  Denominator: Deno.PointerValue;
  /** u32 */
  Accuracy: number;
}

export const sizeofKSRTAUDIO_HWREGISTER = 40;

export function allocKSRTAUDIO_HWREGISTER(data?: Partial<KSRTAUDIO_HWREGISTER>): Uint8Array {
  const buf = new Uint8Array(sizeofKSRTAUDIO_HWREGISTER);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.Register !== undefined) view.setBigUint64(0, data.Register === null ? 0n : BigInt(util.toPointer(data.Register)), true);
  // 0x08: u32
  if (data?.Width !== undefined) view.setUint32(8, Number(data.Width), true);
  // 0x0c: pad4
  // 0x10: u64
  if (data?.Numerator !== undefined) view.setBigUint64(16, BigInt(data.Numerator), true);
  // 0x18: u64
  if (data?.Denominator !== undefined) view.setBigUint64(24, BigInt(data.Denominator), true);
  // 0x20: u32
  if (data?.Accuracy !== undefined) view.setUint32(32, Number(data.Accuracy), true);
  // 0x24: pad4
  return buf;
}

/**
 * Windows.Win32.Media.KernelStreaming.KSRTAUDIO_HWREGISTER32 (size: 32)
 */
export interface KSRTAUDIO_HWREGISTER32 {
  /** u32 */
  Register: number;
  /** u32 */
  Width: number;
  /** u64 */
  Numerator: Deno.PointerValue;
  /** u64 */
  Denominator: Deno.PointerValue;
  /** u32 */
  Accuracy: number;
}

export const sizeofKSRTAUDIO_HWREGISTER32 = 32;

export function allocKSRTAUDIO_HWREGISTER32(data?: Partial<KSRTAUDIO_HWREGISTER32>): Uint8Array {
  const buf = new Uint8Array(sizeofKSRTAUDIO_HWREGISTER32);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.Register !== undefined) view.setUint32(0, Number(data.Register), true);
  // 0x04: u32
  if (data?.Width !== undefined) view.setUint32(4, Number(data.Width), true);
  // 0x08: u64
  if (data?.Numerator !== undefined) view.setBigUint64(8, BigInt(data.Numerator), true);
  // 0x10: u64
  if (data?.Denominator !== undefined) view.setBigUint64(16, BigInt(data.Denominator), true);
  // 0x18: u32
  if (data?.Accuracy !== undefined) view.setUint32(24, Number(data.Accuracy), true);
  // 0x1c: pad4
  return buf;
}

/**
 * Windows.Win32.Media.KernelStreaming.KSRTAUDIO_NOTIFICATION_EVENT_PROPERTY (size: 16)
 */
export interface KSRTAUDIO_NOTIFICATION_EVENT_PROPERTY {
  /** Windows.Win32.Media.KernelStreaming.KSIDENTIFIER */
  Property: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Foundation.HANDLE */
  NotificationEvent: Uint8Array | Deno.PointerValue | null;
}

export const sizeofKSRTAUDIO_NOTIFICATION_EVENT_PROPERTY = 16;

export function allocKSRTAUDIO_NOTIFICATION_EVENT_PROPERTY(data?: Partial<KSRTAUDIO_NOTIFICATION_EVENT_PROPERTY>): Uint8Array {
  const buf = new Uint8Array(sizeofKSRTAUDIO_NOTIFICATION_EVENT_PROPERTY);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.Property !== undefined) view.setBigUint64(0, data.Property === null ? 0n : BigInt(util.toPointer(data.Property)), true);
  // 0x08: pointer
  if (data?.NotificationEvent !== undefined) view.setBigUint64(8, data.NotificationEvent === null ? 0n : BigInt(util.toPointer(data.NotificationEvent)), true);
  return buf;
}

/**
 * Windows.Win32.Media.KernelStreaming.KSRTAUDIO_NOTIFICATION_EVENT_PROPERTY32 (size: 16)
 */
export interface KSRTAUDIO_NOTIFICATION_EVENT_PROPERTY32 {
  /** Windows.Win32.Media.KernelStreaming.KSIDENTIFIER */
  Property: Uint8Array | Deno.PointerValue | null;
  /** u32 */
  NotificationEvent: number;
}

export const sizeofKSRTAUDIO_NOTIFICATION_EVENT_PROPERTY32 = 16;

export function allocKSRTAUDIO_NOTIFICATION_EVENT_PROPERTY32(data?: Partial<KSRTAUDIO_NOTIFICATION_EVENT_PROPERTY32>): Uint8Array {
  const buf = new Uint8Array(sizeofKSRTAUDIO_NOTIFICATION_EVENT_PROPERTY32);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.Property !== undefined) view.setBigUint64(0, data.Property === null ? 0n : BigInt(util.toPointer(data.Property)), true);
  // 0x08: u32
  if (data?.NotificationEvent !== undefined) view.setUint32(8, Number(data.NotificationEvent), true);
  // 0x0c: pad4
  return buf;
}

/**
 * Windows.Win32.Media.KernelStreaming.KSRTAUDIO_GETREADPACKET_INFO (size: 24)
 */
export interface KSRTAUDIO_GETREADPACKET_INFO {
  /** u32 */
  PacketNumber: number;
  /** u32 */
  Flags: number;
  /** u64 */
  PerformanceCounterValue: Deno.PointerValue;
  /** Windows.Win32.Foundation.BOOL */
  MoreData: boolean;
}

export const sizeofKSRTAUDIO_GETREADPACKET_INFO = 24;

export function allocKSRTAUDIO_GETREADPACKET_INFO(data?: Partial<KSRTAUDIO_GETREADPACKET_INFO>): Uint8Array {
  const buf = new Uint8Array(sizeofKSRTAUDIO_GETREADPACKET_INFO);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.PacketNumber !== undefined) view.setUint32(0, Number(data.PacketNumber), true);
  // 0x04: u32
  if (data?.Flags !== undefined) view.setUint32(4, Number(data.Flags), true);
  // 0x08: u64
  if (data?.PerformanceCounterValue !== undefined) view.setBigUint64(8, BigInt(data.PerformanceCounterValue), true);
  // 0x10: i32
  if (data?.MoreData !== undefined) view.setInt32(16, Number(data.MoreData), true);
  // 0x14: pad4
  return buf;
}

/**
 * Windows.Win32.Media.KernelStreaming.KSRTAUDIO_SETWRITEPACKET_INFO (size: 16)
 */
export interface KSRTAUDIO_SETWRITEPACKET_INFO {
  /** u32 */
  PacketNumber: number;
  /** u32 */
  Flags: number;
  /** u32 */
  EosPacketLength: number;
}

export const sizeofKSRTAUDIO_SETWRITEPACKET_INFO = 16;

export function allocKSRTAUDIO_SETWRITEPACKET_INFO(data?: Partial<KSRTAUDIO_SETWRITEPACKET_INFO>): Uint8Array {
  const buf = new Uint8Array(sizeofKSRTAUDIO_SETWRITEPACKET_INFO);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.PacketNumber !== undefined) view.setUint32(0, Number(data.PacketNumber), true);
  // 0x04: u32
  if (data?.Flags !== undefined) view.setUint32(4, Number(data.Flags), true);
  // 0x08: u32
  if (data?.EosPacketLength !== undefined) view.setUint32(8, Number(data.EosPacketLength), true);
  // 0x0c: pad4
  return buf;
}

/**
 * Windows.Win32.Media.KernelStreaming.KSRTAUDIO_PACKETVREGISTER_PROPERTY (size: 16)
 */
export interface KSRTAUDIO_PACKETVREGISTER_PROPERTY {
  /** Windows.Win32.Media.KernelStreaming.KSIDENTIFIER */
  Property: Uint8Array | Deno.PointerValue | null;
  /** ptr */
  BaseAddress: Deno.PointerValue | Uint8Array | null;
}

export const sizeofKSRTAUDIO_PACKETVREGISTER_PROPERTY = 16;

export function allocKSRTAUDIO_PACKETVREGISTER_PROPERTY(data?: Partial<KSRTAUDIO_PACKETVREGISTER_PROPERTY>): Uint8Array {
  const buf = new Uint8Array(sizeofKSRTAUDIO_PACKETVREGISTER_PROPERTY);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.Property !== undefined) view.setBigUint64(0, data.Property === null ? 0n : BigInt(util.toPointer(data.Property)), true);
  // 0x08: pointer
  if (data?.BaseAddress !== undefined) view.setBigUint64(8, data.BaseAddress === null ? 0n : BigInt(util.toPointer(data.BaseAddress)), true);
  return buf;
}

/**
 * Windows.Win32.Media.KernelStreaming.KSRTAUDIO_PACKETVREGISTER (size: 24)
 */
export interface KSRTAUDIO_PACKETVREGISTER {
  /** ptr */
  CompletedPacketCount: Deno.PointerValue | Uint8Array | null;
  /** ptr */
  CompletedPacketQPC: Deno.PointerValue | Uint8Array | null;
  /** ptr */
  CompletedPacketHash: Deno.PointerValue | Uint8Array | null;
}

export const sizeofKSRTAUDIO_PACKETVREGISTER = 24;

export function allocKSRTAUDIO_PACKETVREGISTER(data?: Partial<KSRTAUDIO_PACKETVREGISTER>): Uint8Array {
  const buf = new Uint8Array(sizeofKSRTAUDIO_PACKETVREGISTER);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.CompletedPacketCount !== undefined) view.setBigUint64(0, data.CompletedPacketCount === null ? 0n : BigInt(util.toPointer(data.CompletedPacketCount)), true);
  // 0x08: pointer
  if (data?.CompletedPacketQPC !== undefined) view.setBigUint64(8, data.CompletedPacketQPC === null ? 0n : BigInt(util.toPointer(data.CompletedPacketQPC)), true);
  // 0x10: pointer
  if (data?.CompletedPacketHash !== undefined) view.setBigUint64(16, data.CompletedPacketHash === null ? 0n : BigInt(util.toPointer(data.CompletedPacketHash)), true);
  return buf;
}

/**
 * Windows.Win32.Media.KernelStreaming.INTERLEAVED_AUDIO_FORMAT_INFORMATION (size: 32)
 */
export interface INTERLEAVED_AUDIO_FORMAT_INFORMATION {
  /** u32 */
  Size: number;
  /** u32 */
  PrimaryChannelCount: number;
  /** u32 */
  PrimaryChannelStartPosition: number;
  /** u32 */
  PrimaryChannelMask: number;
  /** u32 */
  InterleavedChannelCount: number;
  /** u32 */
  InterleavedChannelStartPosition: number;
  /** u32 */
  InterleavedChannelMask: number;
}

export const sizeofINTERLEAVED_AUDIO_FORMAT_INFORMATION = 32;

export function allocINTERLEAVED_AUDIO_FORMAT_INFORMATION(data?: Partial<INTERLEAVED_AUDIO_FORMAT_INFORMATION>): Uint8Array {
  const buf = new Uint8Array(sizeofINTERLEAVED_AUDIO_FORMAT_INFORMATION);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.Size !== undefined) view.setUint32(0, Number(data.Size), true);
  // 0x04: u32
  if (data?.PrimaryChannelCount !== undefined) view.setUint32(4, Number(data.PrimaryChannelCount), true);
  // 0x08: u32
  if (data?.PrimaryChannelStartPosition !== undefined) view.setUint32(8, Number(data.PrimaryChannelStartPosition), true);
  // 0x0c: u32
  if (data?.PrimaryChannelMask !== undefined) view.setUint32(12, Number(data.PrimaryChannelMask), true);
  // 0x10: u32
  if (data?.InterleavedChannelCount !== undefined) view.setUint32(16, Number(data.InterleavedChannelCount), true);
  // 0x14: u32
  if (data?.InterleavedChannelStartPosition !== undefined) view.setUint32(20, Number(data.InterleavedChannelStartPosition), true);
  // 0x18: u32
  if (data?.InterleavedChannelMask !== undefined) view.setUint32(24, Number(data.InterleavedChannelMask), true);
  // 0x1c: pad4
  return buf;
}

/**
 * Windows.Win32.Media.KernelStreaming.KSSOUNDDETECTORPROPERTY (size: 16)
 */
export interface KSSOUNDDETECTORPROPERTY {
  /** Windows.Win32.Media.KernelStreaming.KSIDENTIFIER */
  Property: Uint8Array | Deno.PointerValue | null;
  /** System.Guid */
  EventId: Uint8Array | Deno.PointerValue | null;
}

export const sizeofKSSOUNDDETECTORPROPERTY = 16;

export function allocKSSOUNDDETECTORPROPERTY(data?: Partial<KSSOUNDDETECTORPROPERTY>): Uint8Array {
  const buf = new Uint8Array(sizeofKSSOUNDDETECTORPROPERTY);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.Property !== undefined) view.setBigUint64(0, data.Property === null ? 0n : BigInt(util.toPointer(data.Property)), true);
  // 0x08: pointer
  if (data?.EventId !== undefined) view.setBigUint64(8, data.EventId === null ? 0n : BigInt(util.toPointer(data.EventId)), true);
  return buf;
}

/**
 * Windows.Win32.Media.KernelStreaming.SOUNDDETECTOR_PATTERNHEADER (size: 16)
 */
export interface SOUNDDETECTOR_PATTERNHEADER {
  /** u32 */
  Size: number;
  /** System.Guid */
  PatternType: Uint8Array | Deno.PointerValue | null;
}

export const sizeofSOUNDDETECTOR_PATTERNHEADER = 16;

export function allocSOUNDDETECTOR_PATTERNHEADER(data?: Partial<SOUNDDETECTOR_PATTERNHEADER>): Uint8Array {
  const buf = new Uint8Array(sizeofSOUNDDETECTOR_PATTERNHEADER);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.Size !== undefined) view.setUint32(0, Number(data.Size), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.PatternType !== undefined) view.setBigUint64(8, data.PatternType === null ? 0n : BigInt(util.toPointer(data.PatternType)), true);
  return buf;
}

/**
 * Windows.Win32.Media.KernelStreaming.KSAUDIO_COPY_PROTECTION (size: 8)
 */
export interface KSAUDIO_COPY_PROTECTION {
  /** Windows.Win32.Foundation.BOOL */
  fCopyrighted: boolean;
  /** Windows.Win32.Foundation.BOOL */
  fOriginal: boolean;
}

export const sizeofKSAUDIO_COPY_PROTECTION = 8;

export function allocKSAUDIO_COPY_PROTECTION(data?: Partial<KSAUDIO_COPY_PROTECTION>): Uint8Array {
  const buf = new Uint8Array(sizeofKSAUDIO_COPY_PROTECTION);
  const view = new DataView(buf.buffer);
  // 0x00: i32
  if (data?.fCopyrighted !== undefined) view.setInt32(0, Number(data.fCopyrighted), true);
  // 0x04: i32
  if (data?.fOriginal !== undefined) view.setInt32(4, Number(data.fOriginal), true);
  return buf;
}

/**
 * Windows.Win32.Media.KernelStreaming.KSAUDIO_CHANNEL_CONFIG (size: 8)
 */
export interface KSAUDIO_CHANNEL_CONFIG {
  /** i32 */
  ActiveSpeakerPositions: number;
}

export const sizeofKSAUDIO_CHANNEL_CONFIG = 8;

export function allocKSAUDIO_CHANNEL_CONFIG(data?: Partial<KSAUDIO_CHANNEL_CONFIG>): Uint8Array {
  const buf = new Uint8Array(sizeofKSAUDIO_CHANNEL_CONFIG);
  const view = new DataView(buf.buffer);
  // 0x00: i32
  if (data?.ActiveSpeakerPositions !== undefined) view.setInt32(0, Number(data.ActiveSpeakerPositions), true);
  // 0x04: pad4
  return buf;
}

/**
 * Windows.Win32.Media.KernelStreaming.KSAUDIO_DYNAMIC_RANGE (size: 8)
 */
export interface KSAUDIO_DYNAMIC_RANGE {
  /** u32 */
  QuietCompression: number;
  /** u32 */
  LoudCompression: number;
}

export const sizeofKSAUDIO_DYNAMIC_RANGE = 8;

export function allocKSAUDIO_DYNAMIC_RANGE(data?: Partial<KSAUDIO_DYNAMIC_RANGE>): Uint8Array {
  const buf = new Uint8Array(sizeofKSAUDIO_DYNAMIC_RANGE);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.QuietCompression !== undefined) view.setUint32(0, Number(data.QuietCompression), true);
  // 0x04: u32
  if (data?.LoudCompression !== undefined) view.setUint32(4, Number(data.LoudCompression), true);
  return buf;
}

/**
 * Windows.Win32.Media.KernelStreaming.KSAUDIO_MIXLEVEL (size: 8)
 */
export interface KSAUDIO_MIXLEVEL {
  /** Windows.Win32.Foundation.BOOL */
  Mute: boolean;
  /** i32 */
  Level: number;
}

export const sizeofKSAUDIO_MIXLEVEL = 8;

export function allocKSAUDIO_MIXLEVEL(data?: Partial<KSAUDIO_MIXLEVEL>): Uint8Array {
  const buf = new Uint8Array(sizeofKSAUDIO_MIXLEVEL);
  const view = new DataView(buf.buffer);
  // 0x00: i32
  if (data?.Mute !== undefined) view.setInt32(0, Number(data.Mute), true);
  // 0x04: i32
  if (data?.Level !== undefined) view.setInt32(4, Number(data.Level), true);
  return buf;
}

/**
 * Windows.Win32.Media.KernelStreaming.KSAUDIO_MIX_CAPS (size: 24)
 */
export interface KSAUDIO_MIX_CAPS {
  /** Windows.Win32.Foundation.BOOL */
  Mute: boolean;
  /** i32 */
  Minimum: number;
  /** i32 */
  Maximum: number;
  /** _Anonymous_e__Union */
  Anonymous: Uint8Array | Deno.PointerValue | null;
}

export const sizeofKSAUDIO_MIX_CAPS = 24;

export function allocKSAUDIO_MIX_CAPS(data?: Partial<KSAUDIO_MIX_CAPS>): Uint8Array {
  const buf = new Uint8Array(sizeofKSAUDIO_MIX_CAPS);
  const view = new DataView(buf.buffer);
  // 0x00: i32
  if (data?.Mute !== undefined) view.setInt32(0, Number(data.Mute), true);
  // 0x04: i32
  if (data?.Minimum !== undefined) view.setInt32(4, Number(data.Minimum), true);
  // 0x08: i32
  if (data?.Maximum !== undefined) view.setInt32(8, Number(data.Maximum), true);
  // 0x0c: pad4
  // 0x10: pointer
  if (data?.Anonymous !== undefined) view.setBigUint64(16, data.Anonymous === null ? 0n : BigInt(util.toPointer(data.Anonymous)), true);
  return buf;
}

/**
 * Windows.Win32.Media.KernelStreaming.KSAUDIO_MIXCAP_TABLE (size: 16)
 */
export interface KSAUDIO_MIXCAP_TABLE {
  /** u32 */
  InputChannels: number;
  /** u32 */
  OutputChannels: number;
  /** array */
  Capabilities: Deno.PointerValue | null;
}

export const sizeofKSAUDIO_MIXCAP_TABLE = 16;

export function allocKSAUDIO_MIXCAP_TABLE(data?: Partial<KSAUDIO_MIXCAP_TABLE>): Uint8Array {
  const buf = new Uint8Array(sizeofKSAUDIO_MIXCAP_TABLE);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.InputChannels !== undefined) view.setUint32(0, Number(data.InputChannels), true);
  // 0x04: u32
  if (data?.OutputChannels !== undefined) view.setUint32(4, Number(data.OutputChannels), true);
  // 0x08: pointer
  if (data?.Capabilities !== undefined) view.setBigUint64(8, data.Capabilities === null ? 0n : BigInt(util.toPointer(data.Capabilities)), true);
  return buf;
}

/**
 * _u_e__Struct (size: 16)
 */
export interface _u_e__Struct {
  /** u32 */
  dwValue: number;
  /** Windows.Win32.Foundation.PWSTR */
  pwszName: string | null;
}

export const sizeof_u_e__Struct = 16;

export function alloc_u_e__Struct(data?: Partial<_u_e__Struct>): Uint8Array {
  const buf = new Uint8Array(sizeof_u_e__Struct);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.dwValue !== undefined) view.setUint32(0, Number(data.dwValue), true);
  // 0x04: pad4
  // 0x08: buffer
  if (data?.pwszName !== undefined) {
    (buf as any)._f8 = util.pwstrToFfi(data.pwszName);
    view.setBigUint64(8, (buf as any)._f8 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f8)), true);
  }
  return buf;
}

/**
 * Windows.Win32.Foundation.LARGE_INTEGER (size: 24)
 */
export interface LARGE_INTEGER {
  /** _Anonymous_e__Struct */
  Anonymous: Uint8Array | Deno.PointerValue | null;
  /** _u_e__Struct */
  u: Uint8Array | Deno.PointerValue | null;
  /** i64 */
  QuadPart: Deno.PointerValue;
}

export const sizeofLARGE_INTEGER = 24;

export function allocLARGE_INTEGER(data?: Partial<LARGE_INTEGER>): Uint8Array {
  const buf = new Uint8Array(sizeofLARGE_INTEGER);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.Anonymous !== undefined) view.setBigUint64(0, data.Anonymous === null ? 0n : BigInt(util.toPointer(data.Anonymous)), true);
  // 0x08: pointer
  if (data?.u !== undefined) view.setBigUint64(8, data.u === null ? 0n : BigInt(util.toPointer(data.u)), true);
  // 0x10: i64
  if (data?.QuadPart !== undefined) view.setBigInt64(16, BigInt(data.QuadPart), true);
  return buf;
}

/**
 * Windows.Win32.Media.KernelStreaming.KSAUDIO_POSITIONEX (size: 32)
 */
export interface KSAUDIO_POSITIONEX {
  /** Windows.Win32.Foundation.LARGE_INTEGER */
  TimerFrequency: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Foundation.LARGE_INTEGER */
  TimeStamp1: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Media.KernelStreaming.KSAUDIO_POSITION */
  Position: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Foundation.LARGE_INTEGER */
  TimeStamp2: Uint8Array | Deno.PointerValue | null;
}

export const sizeofKSAUDIO_POSITIONEX = 32;

export function allocKSAUDIO_POSITIONEX(data?: Partial<KSAUDIO_POSITIONEX>): Uint8Array {
  const buf = new Uint8Array(sizeofKSAUDIO_POSITIONEX);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.TimerFrequency !== undefined) view.setBigUint64(0, data.TimerFrequency === null ? 0n : BigInt(util.toPointer(data.TimerFrequency)), true);
  // 0x08: pointer
  if (data?.TimeStamp1 !== undefined) view.setBigUint64(8, data.TimeStamp1 === null ? 0n : BigInt(util.toPointer(data.TimeStamp1)), true);
  // 0x10: pointer
  if (data?.Position !== undefined) view.setBigUint64(16, data.Position === null ? 0n : BigInt(util.toPointer(data.Position)), true);
  // 0x18: pointer
  if (data?.TimeStamp2 !== undefined) view.setBigUint64(24, data.TimeStamp2 === null ? 0n : BigInt(util.toPointer(data.TimeStamp2)), true);
  return buf;
}

/**
 * Windows.Win32.Media.KernelStreaming.KSTELEPHONY_CALLCONTROL (size: 8)
 */
export interface KSTELEPHONY_CALLCONTROL {
  /** Windows.Win32.Media.KernelStreaming.TELEPHONY_CALLTYPE */
  CallType: TELEPHONY_CALLTYPE;
  /** Windows.Win32.Media.KernelStreaming.TELEPHONY_CALLCONTROLOP */
  CallControlOp: TELEPHONY_CALLCONTROLOP;
}

export const sizeofKSTELEPHONY_CALLCONTROL = 8;

export function allocKSTELEPHONY_CALLCONTROL(data?: Partial<KSTELEPHONY_CALLCONTROL>): Uint8Array {
  const buf = new Uint8Array(sizeofKSTELEPHONY_CALLCONTROL);
  const view = new DataView(buf.buffer);
  // 0x00: i32
  if (data?.CallType !== undefined) view.setInt32(0, Number(data.CallType), true);
  // 0x04: i32
  if (data?.CallControlOp !== undefined) view.setInt32(4, Number(data.CallControlOp), true);
  return buf;
}

/**
 * Windows.Win32.Media.KernelStreaming.KSTELEPHONY_PROVIDERCHANGE (size: 8)
 */
export interface KSTELEPHONY_PROVIDERCHANGE {
  /** Windows.Win32.Media.KernelStreaming.TELEPHONY_CALLTYPE */
  CallType: TELEPHONY_CALLTYPE;
  /** Windows.Win32.Media.KernelStreaming.TELEPHONY_PROVIDERCHANGEOP */
  ProviderChangeOp: TELEPHONY_PROVIDERCHANGEOP;
}

export const sizeofKSTELEPHONY_PROVIDERCHANGE = 8;

export function allocKSTELEPHONY_PROVIDERCHANGE(data?: Partial<KSTELEPHONY_PROVIDERCHANGE>): Uint8Array {
  const buf = new Uint8Array(sizeofKSTELEPHONY_PROVIDERCHANGE);
  const view = new DataView(buf.buffer);
  // 0x00: i32
  if (data?.CallType !== undefined) view.setInt32(0, Number(data.CallType), true);
  // 0x04: i32
  if (data?.ProviderChangeOp !== undefined) view.setInt32(4, Number(data.ProviderChangeOp), true);
  return buf;
}

/**
 * Windows.Win32.Media.KernelStreaming.KSTELEPHONY_CALLINFO (size: 8)
 */
export interface KSTELEPHONY_CALLINFO {
  /** Windows.Win32.Media.KernelStreaming.TELEPHONY_CALLTYPE */
  CallType: TELEPHONY_CALLTYPE;
  /** Windows.Win32.Media.KernelStreaming.TELEPHONY_CALLSTATE */
  CallState: TELEPHONY_CALLSTATE;
}

export const sizeofKSTELEPHONY_CALLINFO = 8;

export function allocKSTELEPHONY_CALLINFO(data?: Partial<KSTELEPHONY_CALLINFO>): Uint8Array {
  const buf = new Uint8Array(sizeofKSTELEPHONY_CALLINFO);
  const view = new DataView(buf.buffer);
  // 0x00: i32
  if (data?.CallType !== undefined) view.setInt32(0, Number(data.CallType), true);
  // 0x04: i32
  if (data?.CallState !== undefined) view.setInt32(4, Number(data.CallState), true);
  return buf;
}

/**
 * Windows.Win32.Media.KernelStreaming.KSTOPOLOGY_ENDPOINTID (size: 16)
 */
export interface KSTOPOLOGY_ENDPOINTID {
  /** array */
  TopologyName: Deno.PointerValue | null;
  /** u32 */
  PinId: number;
}

export const sizeofKSTOPOLOGY_ENDPOINTID = 16;

export function allocKSTOPOLOGY_ENDPOINTID(data?: Partial<KSTOPOLOGY_ENDPOINTID>): Uint8Array {
  const buf = new Uint8Array(sizeofKSTOPOLOGY_ENDPOINTID);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.TopologyName !== undefined) view.setBigUint64(0, data.TopologyName === null ? 0n : BigInt(util.toPointer(data.TopologyName)), true);
  // 0x08: u32
  if (data?.PinId !== undefined) view.setUint32(8, Number(data.PinId), true);
  // 0x0c: pad4
  return buf;
}

/**
 * Windows.Win32.Media.KernelStreaming.KSTOPOLOGY_ENDPOINTIDPAIR (size: 16)
 */
export interface KSTOPOLOGY_ENDPOINTIDPAIR {
  /** Windows.Win32.Media.KernelStreaming.KSTOPOLOGY_ENDPOINTID */
  RenderEndpoint: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Media.KernelStreaming.KSTOPOLOGY_ENDPOINTID */
  CaptureEndpoint: Uint8Array | Deno.PointerValue | null;
}

export const sizeofKSTOPOLOGY_ENDPOINTIDPAIR = 16;

export function allocKSTOPOLOGY_ENDPOINTIDPAIR(data?: Partial<KSTOPOLOGY_ENDPOINTIDPAIR>): Uint8Array {
  const buf = new Uint8Array(sizeofKSTOPOLOGY_ENDPOINTIDPAIR);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.RenderEndpoint !== undefined) view.setBigUint64(0, data.RenderEndpoint === null ? 0n : BigInt(util.toPointer(data.RenderEndpoint)), true);
  // 0x08: pointer
  if (data?.CaptureEndpoint !== undefined) view.setBigUint64(8, data.CaptureEndpoint === null ? 0n : BigInt(util.toPointer(data.CaptureEndpoint)), true);
  return buf;
}

/**
 * Windows.Win32.Media.KernelStreaming.KSWAVETABLE_WAVE_DESC (size: 32)
 */
export interface KSWAVETABLE_WAVE_DESC {
  /** Windows.Win32.Media.KernelStreaming.KSIDENTIFIER */
  Identifier: Uint8Array | Deno.PointerValue | null;
  /** u32 */
  Size: number;
  /** Windows.Win32.Foundation.BOOL */
  Looped: boolean;
  /** u32 */
  LoopPoint: number;
  /** Windows.Win32.Foundation.BOOL */
  InROM: boolean;
  /** Windows.Win32.Media.KernelStreaming.KSDATAFORMAT */
  Format: Uint8Array | Deno.PointerValue | null;
}

export const sizeofKSWAVETABLE_WAVE_DESC = 32;

export function allocKSWAVETABLE_WAVE_DESC(data?: Partial<KSWAVETABLE_WAVE_DESC>): Uint8Array {
  const buf = new Uint8Array(sizeofKSWAVETABLE_WAVE_DESC);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.Identifier !== undefined) view.setBigUint64(0, data.Identifier === null ? 0n : BigInt(util.toPointer(data.Identifier)), true);
  // 0x08: u32
  if (data?.Size !== undefined) view.setUint32(8, Number(data.Size), true);
  // 0x0c: i32
  if (data?.Looped !== undefined) view.setInt32(12, Number(data.Looped), true);
  // 0x10: u32
  if (data?.LoopPoint !== undefined) view.setUint32(16, Number(data.LoopPoint), true);
  // 0x14: i32
  if (data?.InROM !== undefined) view.setInt32(20, Number(data.InROM), true);
  // 0x18: pointer
  if (data?.Format !== undefined) view.setBigUint64(24, data.Format === null ? 0n : BigInt(util.toPointer(data.Format)), true);
  return buf;
}

/**
 * Windows.Win32.Media.KernelStreaming.KSWAVE_COMPATCAPS (size: 8)
 */
export interface KSWAVE_COMPATCAPS {
  /** u32 */
  ulDeviceType: number;
}

export const sizeofKSWAVE_COMPATCAPS = 8;

export function allocKSWAVE_COMPATCAPS(data?: Partial<KSWAVE_COMPATCAPS>): Uint8Array {
  const buf = new Uint8Array(sizeofKSWAVE_COMPATCAPS);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.ulDeviceType !== undefined) view.setUint32(0, Number(data.ulDeviceType), true);
  // 0x04: pad4
  return buf;
}

/**
 * Windows.Win32.Media.KernelStreaming.KSWAVE_INPUT_CAPABILITIES (size: 32)
 */
export interface KSWAVE_INPUT_CAPABILITIES {
  /** u32 */
  MaximumChannelsPerConnection: number;
  /** u32 */
  MinimumBitsPerSample: number;
  /** u32 */
  MaximumBitsPerSample: number;
  /** u32 */
  MinimumSampleFrequency: number;
  /** u32 */
  MaximumSampleFrequency: number;
  /** u32 */
  TotalConnections: number;
  /** u32 */
  ActiveConnections: number;
}

export const sizeofKSWAVE_INPUT_CAPABILITIES = 32;

export function allocKSWAVE_INPUT_CAPABILITIES(data?: Partial<KSWAVE_INPUT_CAPABILITIES>): Uint8Array {
  const buf = new Uint8Array(sizeofKSWAVE_INPUT_CAPABILITIES);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.MaximumChannelsPerConnection !== undefined) view.setUint32(0, Number(data.MaximumChannelsPerConnection), true);
  // 0x04: u32
  if (data?.MinimumBitsPerSample !== undefined) view.setUint32(4, Number(data.MinimumBitsPerSample), true);
  // 0x08: u32
  if (data?.MaximumBitsPerSample !== undefined) view.setUint32(8, Number(data.MaximumBitsPerSample), true);
  // 0x0c: u32
  if (data?.MinimumSampleFrequency !== undefined) view.setUint32(12, Number(data.MinimumSampleFrequency), true);
  // 0x10: u32
  if (data?.MaximumSampleFrequency !== undefined) view.setUint32(16, Number(data.MaximumSampleFrequency), true);
  // 0x14: u32
  if (data?.TotalConnections !== undefined) view.setUint32(20, Number(data.TotalConnections), true);
  // 0x18: u32
  if (data?.ActiveConnections !== undefined) view.setUint32(24, Number(data.ActiveConnections), true);
  // 0x1c: pad4
  return buf;
}

/**
 * Windows.Win32.Media.KernelStreaming.KSWAVE_OUTPUT_CAPABILITIES (size: 80)
 */
export interface KSWAVE_OUTPUT_CAPABILITIES {
  /** u32 */
  MaximumChannelsPerConnection: number;
  /** u32 */
  MinimumBitsPerSample: number;
  /** u32 */
  MaximumBitsPerSample: number;
  /** u32 */
  MinimumSampleFrequency: number;
  /** u32 */
  MaximumSampleFrequency: number;
  /** u32 */
  TotalConnections: number;
  /** u32 */
  StaticConnections: number;
  /** u32 */
  StreamingConnections: number;
  /** u32 */
  ActiveConnections: number;
  /** u32 */
  ActiveStaticConnections: number;
  /** u32 */
  ActiveStreamingConnections: number;
  /** u32 */
  Total3DConnections: number;
  /** u32 */
  Static3DConnections: number;
  /** u32 */
  Streaming3DConnections: number;
  /** u32 */
  Active3DConnections: number;
  /** u32 */
  ActiveStatic3DConnections: number;
  /** u32 */
  ActiveStreaming3DConnections: number;
  /** u32 */
  TotalSampleMemory: number;
  /** u32 */
  FreeSampleMemory: number;
  /** u32 */
  LargestFreeContiguousSampleMemory: number;
}

export const sizeofKSWAVE_OUTPUT_CAPABILITIES = 80;

export function allocKSWAVE_OUTPUT_CAPABILITIES(data?: Partial<KSWAVE_OUTPUT_CAPABILITIES>): Uint8Array {
  const buf = new Uint8Array(sizeofKSWAVE_OUTPUT_CAPABILITIES);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.MaximumChannelsPerConnection !== undefined) view.setUint32(0, Number(data.MaximumChannelsPerConnection), true);
  // 0x04: u32
  if (data?.MinimumBitsPerSample !== undefined) view.setUint32(4, Number(data.MinimumBitsPerSample), true);
  // 0x08: u32
  if (data?.MaximumBitsPerSample !== undefined) view.setUint32(8, Number(data.MaximumBitsPerSample), true);
  // 0x0c: u32
  if (data?.MinimumSampleFrequency !== undefined) view.setUint32(12, Number(data.MinimumSampleFrequency), true);
  // 0x10: u32
  if (data?.MaximumSampleFrequency !== undefined) view.setUint32(16, Number(data.MaximumSampleFrequency), true);
  // 0x14: u32
  if (data?.TotalConnections !== undefined) view.setUint32(20, Number(data.TotalConnections), true);
  // 0x18: u32
  if (data?.StaticConnections !== undefined) view.setUint32(24, Number(data.StaticConnections), true);
  // 0x1c: u32
  if (data?.StreamingConnections !== undefined) view.setUint32(28, Number(data.StreamingConnections), true);
  // 0x20: u32
  if (data?.ActiveConnections !== undefined) view.setUint32(32, Number(data.ActiveConnections), true);
  // 0x24: u32
  if (data?.ActiveStaticConnections !== undefined) view.setUint32(36, Number(data.ActiveStaticConnections), true);
  // 0x28: u32
  if (data?.ActiveStreamingConnections !== undefined) view.setUint32(40, Number(data.ActiveStreamingConnections), true);
  // 0x2c: u32
  if (data?.Total3DConnections !== undefined) view.setUint32(44, Number(data.Total3DConnections), true);
  // 0x30: u32
  if (data?.Static3DConnections !== undefined) view.setUint32(48, Number(data.Static3DConnections), true);
  // 0x34: u32
  if (data?.Streaming3DConnections !== undefined) view.setUint32(52, Number(data.Streaming3DConnections), true);
  // 0x38: u32
  if (data?.Active3DConnections !== undefined) view.setUint32(56, Number(data.Active3DConnections), true);
  // 0x3c: u32
  if (data?.ActiveStatic3DConnections !== undefined) view.setUint32(60, Number(data.ActiveStatic3DConnections), true);
  // 0x40: u32
  if (data?.ActiveStreaming3DConnections !== undefined) view.setUint32(64, Number(data.ActiveStreaming3DConnections), true);
  // 0x44: u32
  if (data?.TotalSampleMemory !== undefined) view.setUint32(68, Number(data.TotalSampleMemory), true);
  // 0x48: u32
  if (data?.FreeSampleMemory !== undefined) view.setUint32(72, Number(data.FreeSampleMemory), true);
  // 0x4c: u32
  if (data?.LargestFreeContiguousSampleMemory !== undefined) view.setUint32(76, Number(data.LargestFreeContiguousSampleMemory), true);
  return buf;
}

/**
 * Windows.Win32.Media.KernelStreaming.KSWAVE_VOLUME (size: 8)
 */
export interface KSWAVE_VOLUME {
  /** i32 */
  LeftAttenuation: number;
  /** i32 */
  RightAttenuation: number;
}

export const sizeofKSWAVE_VOLUME = 8;

export function allocKSWAVE_VOLUME(data?: Partial<KSWAVE_VOLUME>): Uint8Array {
  const buf = new Uint8Array(sizeofKSWAVE_VOLUME);
  const view = new DataView(buf.buffer);
  // 0x00: i32
  if (data?.LeftAttenuation !== undefined) view.setInt32(0, Number(data.LeftAttenuation), true);
  // 0x04: i32
  if (data?.RightAttenuation !== undefined) view.setInt32(4, Number(data.RightAttenuation), true);
  return buf;
}

/**
 * Windows.Win32.Media.KernelStreaming.KSWAVE_BUFFER (size: 16)
 */
export interface KSWAVE_BUFFER {
  /** u32 */
  Attributes: number;
  /** u32 */
  BufferSize: number;
  /** ptr */
  BufferAddress: Deno.PointerValue | Uint8Array | null;
}

export const sizeofKSWAVE_BUFFER = 16;

export function allocKSWAVE_BUFFER(data?: Partial<KSWAVE_BUFFER>): Uint8Array {
  const buf = new Uint8Array(sizeofKSWAVE_BUFFER);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.Attributes !== undefined) view.setUint32(0, Number(data.Attributes), true);
  // 0x04: u32
  if (data?.BufferSize !== undefined) view.setUint32(4, Number(data.BufferSize), true);
  // 0x08: pointer
  if (data?.BufferAddress !== undefined) view.setBigUint64(8, data.BufferAddress === null ? 0n : BigInt(util.toPointer(data.BufferAddress)), true);
  return buf;
}

/**
 * Windows.Win32.Media.KernelStreaming.KSDATARANGE_MUSIC (size: 32)
 */
export interface KSDATARANGE_MUSIC {
  /** Windows.Win32.Media.KernelStreaming.KSDATAFORMAT */
  DataRange: Uint8Array | Deno.PointerValue | null;
  /** System.Guid */
  Technology: Uint8Array | Deno.PointerValue | null;
  /** u32 */
  Channels: number;
  /** u32 */
  Notes: number;
  /** u32 */
  ChannelMask: number;
}

export const sizeofKSDATARANGE_MUSIC = 32;

export function allocKSDATARANGE_MUSIC(data?: Partial<KSDATARANGE_MUSIC>): Uint8Array {
  const buf = new Uint8Array(sizeofKSDATARANGE_MUSIC);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.DataRange !== undefined) view.setBigUint64(0, data.DataRange === null ? 0n : BigInt(util.toPointer(data.DataRange)), true);
  // 0x08: pointer
  if (data?.Technology !== undefined) view.setBigUint64(8, data.Technology === null ? 0n : BigInt(util.toPointer(data.Technology)), true);
  // 0x10: u32
  if (data?.Channels !== undefined) view.setUint32(16, Number(data.Channels), true);
  // 0x14: u32
  if (data?.Notes !== undefined) view.setUint32(20, Number(data.Notes), true);
  // 0x18: u32
  if (data?.ChannelMask !== undefined) view.setUint32(24, Number(data.ChannelMask), true);
  // 0x1c: pad4
  return buf;
}

/**
 * Windows.Win32.Media.KernelStreaming.LOOPEDSTREAMING_POSITION_EVENT_DATA (size: 16)
 */
export interface LOOPEDSTREAMING_POSITION_EVENT_DATA {
  /** Windows.Win32.Media.KernelStreaming.KSEVENTDATA */
  KsEventData: Uint8Array | Deno.PointerValue | null;
  /** u64 */
  Position: Deno.PointerValue;
}

export const sizeofLOOPEDSTREAMING_POSITION_EVENT_DATA = 16;

export function allocLOOPEDSTREAMING_POSITION_EVENT_DATA(data?: Partial<LOOPEDSTREAMING_POSITION_EVENT_DATA>): Uint8Array {
  const buf = new Uint8Array(sizeofLOOPEDSTREAMING_POSITION_EVENT_DATA);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.KsEventData !== undefined) view.setBigUint64(0, data.KsEventData === null ? 0n : BigInt(util.toPointer(data.KsEventData)), true);
  // 0x08: u64
  if (data?.Position !== undefined) view.setBigUint64(8, BigInt(data.Position), true);
  return buf;
}

/**
 * Windows.Win32.Media.KernelStreaming.KSNODEPROPERTY_AUDIO_CHANNEL (size: 16)
 */
export interface KSNODEPROPERTY_AUDIO_CHANNEL {
  /** Windows.Win32.Media.KernelStreaming.KSNODEPROPERTY */
  NodeProperty: Uint8Array | Deno.PointerValue | null;
  /** i32 */
  Channel: number;
  /** u32 */
  Reserved: number;
}

export const sizeofKSNODEPROPERTY_AUDIO_CHANNEL = 16;

export function allocKSNODEPROPERTY_AUDIO_CHANNEL(data?: Partial<KSNODEPROPERTY_AUDIO_CHANNEL>): Uint8Array {
  const buf = new Uint8Array(sizeofKSNODEPROPERTY_AUDIO_CHANNEL);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.NodeProperty !== undefined) view.setBigUint64(0, data.NodeProperty === null ? 0n : BigInt(util.toPointer(data.NodeProperty)), true);
  // 0x08: i32
  if (data?.Channel !== undefined) view.setInt32(8, Number(data.Channel), true);
  // 0x0c: u32
  if (data?.Reserved !== undefined) view.setUint32(12, Number(data.Reserved), true);
  return buf;
}

/**
 * Windows.Win32.Media.KernelStreaming.KSNODEPROPERTY_AUDIO_DEV_SPECIFIC (size: 24)
 */
export interface KSNODEPROPERTY_AUDIO_DEV_SPECIFIC {
  /** Windows.Win32.Media.KernelStreaming.KSNODEPROPERTY */
  NodeProperty: Uint8Array | Deno.PointerValue | null;
  /** u32 */
  DevSpecificId: number;
  /** u32 */
  DeviceInfo: number;
  /** u32 */
  Length: number;
}

export const sizeofKSNODEPROPERTY_AUDIO_DEV_SPECIFIC = 24;

export function allocKSNODEPROPERTY_AUDIO_DEV_SPECIFIC(data?: Partial<KSNODEPROPERTY_AUDIO_DEV_SPECIFIC>): Uint8Array {
  const buf = new Uint8Array(sizeofKSNODEPROPERTY_AUDIO_DEV_SPECIFIC);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.NodeProperty !== undefined) view.setBigUint64(0, data.NodeProperty === null ? 0n : BigInt(util.toPointer(data.NodeProperty)), true);
  // 0x08: u32
  if (data?.DevSpecificId !== undefined) view.setUint32(8, Number(data.DevSpecificId), true);
  // 0x0c: u32
  if (data?.DeviceInfo !== undefined) view.setUint32(12, Number(data.DeviceInfo), true);
  // 0x10: u32
  if (data?.Length !== undefined) view.setUint32(16, Number(data.Length), true);
  // 0x14: pad4
  return buf;
}

/**
 * Windows.Win32.Media.KernelStreaming.KSMUSICFORMAT (size: 8)
 */
export interface KSMUSICFORMAT {
  /** u32 */
  TimeDeltaMs: number;
  /** u32 */
  ByteCount: number;
}

export const sizeofKSMUSICFORMAT = 8;

export function allocKSMUSICFORMAT(data?: Partial<KSMUSICFORMAT>): Uint8Array {
  const buf = new Uint8Array(sizeofKSMUSICFORMAT);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.TimeDeltaMs !== undefined) view.setUint32(0, Number(data.TimeDeltaMs), true);
  // 0x04: u32
  if (data?.ByteCount !== undefined) view.setUint32(4, Number(data.ByteCount), true);
  return buf;
}

/**
 * Windows.Win32.Media.KernelStreaming.KSMPEGVID_RECT (size: 16)
 */
export interface KSMPEGVID_RECT {
  /** u32 */
  StartX: number;
  /** u32 */
  StartY: number;
  /** u32 */
  EndX: number;
  /** u32 */
  EndY: number;
}

export const sizeofKSMPEGVID_RECT = 16;

export function allocKSMPEGVID_RECT(data?: Partial<KSMPEGVID_RECT>): Uint8Array {
  const buf = new Uint8Array(sizeofKSMPEGVID_RECT);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.StartX !== undefined) view.setUint32(0, Number(data.StartX), true);
  // 0x04: u32
  if (data?.StartY !== undefined) view.setUint32(4, Number(data.StartY), true);
  // 0x08: u32
  if (data?.EndX !== undefined) view.setUint32(8, Number(data.EndX), true);
  // 0x0c: u32
  if (data?.EndY !== undefined) view.setUint32(12, Number(data.EndY), true);
  return buf;
}

/**
 * Windows.Win32.Media.KernelStreaming.KSAC3_ERROR_CONCEALMENT (size: 8)
 */
export interface KSAC3_ERROR_CONCEALMENT {
  /** Windows.Win32.Foundation.BOOL */
  fRepeatPreviousBlock: boolean;
  /** Windows.Win32.Foundation.BOOL */
  fErrorInCurrentBlock: boolean;
}

export const sizeofKSAC3_ERROR_CONCEALMENT = 8;

export function allocKSAC3_ERROR_CONCEALMENT(data?: Partial<KSAC3_ERROR_CONCEALMENT>): Uint8Array {
  const buf = new Uint8Array(sizeofKSAC3_ERROR_CONCEALMENT);
  const view = new DataView(buf.buffer);
  // 0x00: i32
  if (data?.fRepeatPreviousBlock !== undefined) view.setInt32(0, Number(data.fRepeatPreviousBlock), true);
  // 0x04: i32
  if (data?.fErrorInCurrentBlock !== undefined) view.setInt32(4, Number(data.fErrorInCurrentBlock), true);
  return buf;
}

/**
 * Windows.Win32.Media.KernelStreaming.KSAC3_ALTERNATE_AUDIO (size: 8)
 */
export interface KSAC3_ALTERNATE_AUDIO {
  /** Windows.Win32.Foundation.BOOL */
  fStereo: boolean;
  /** u32 */
  DualMode: number;
}

export const sizeofKSAC3_ALTERNATE_AUDIO = 8;

export function allocKSAC3_ALTERNATE_AUDIO(data?: Partial<KSAC3_ALTERNATE_AUDIO>): Uint8Array {
  const buf = new Uint8Array(sizeofKSAC3_ALTERNATE_AUDIO);
  const view = new DataView(buf.buffer);
  // 0x00: i32
  if (data?.fStereo !== undefined) view.setInt32(0, Number(data.fStereo), true);
  // 0x04: u32
  if (data?.DualMode !== undefined) view.setUint32(4, Number(data.DualMode), true);
  return buf;
}

/**
 * Windows.Win32.Media.KernelStreaming.KSAC3_DOWNMIX (size: 8)
 */
export interface KSAC3_DOWNMIX {
  /** Windows.Win32.Foundation.BOOL */
  fDownMix: boolean;
  /** Windows.Win32.Foundation.BOOL */
  fDolbySurround: boolean;
}

export const sizeofKSAC3_DOWNMIX = 8;

export function allocKSAC3_DOWNMIX(data?: Partial<KSAC3_DOWNMIX>): Uint8Array {
  const buf = new Uint8Array(sizeofKSAC3_DOWNMIX);
  const view = new DataView(buf.buffer);
  // 0x00: i32
  if (data?.fDownMix !== undefined) view.setInt32(0, Number(data.fDownMix), true);
  // 0x04: i32
  if (data?.fDolbySurround !== undefined) view.setInt32(4, Number(data.fDolbySurround), true);
  return buf;
}

/**
 * Windows.Win32.Media.KernelStreaming.KSAC3_BIT_STREAM_MODE (size: 8)
 */
export interface KSAC3_BIT_STREAM_MODE {
  /** i32 */
  BitStreamMode: number;
}

export const sizeofKSAC3_BIT_STREAM_MODE = 8;

export function allocKSAC3_BIT_STREAM_MODE(data?: Partial<KSAC3_BIT_STREAM_MODE>): Uint8Array {
  const buf = new Uint8Array(sizeofKSAC3_BIT_STREAM_MODE);
  const view = new DataView(buf.buffer);
  // 0x00: i32
  if (data?.BitStreamMode !== undefined) view.setInt32(0, Number(data.BitStreamMode), true);
  // 0x04: pad4
  return buf;
}

/**
 * Windows.Win32.Media.KernelStreaming.KSAC3_DIALOGUE_LEVEL (size: 8)
 */
export interface KSAC3_DIALOGUE_LEVEL {
  /** u32 */
  DialogueLevel: number;
}

export const sizeofKSAC3_DIALOGUE_LEVEL = 8;

export function allocKSAC3_DIALOGUE_LEVEL(data?: Partial<KSAC3_DIALOGUE_LEVEL>): Uint8Array {
  const buf = new Uint8Array(sizeofKSAC3_DIALOGUE_LEVEL);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.DialogueLevel !== undefined) view.setUint32(0, Number(data.DialogueLevel), true);
  // 0x04: pad4
  return buf;
}

/**
 * Windows.Win32.Media.KernelStreaming.KSAC3_ROOM_TYPE (size: 8)
 */
export interface KSAC3_ROOM_TYPE {
  /** Windows.Win32.Foundation.BOOL */
  fLargeRoom: boolean;
}

export const sizeofKSAC3_ROOM_TYPE = 8;

export function allocKSAC3_ROOM_TYPE(data?: Partial<KSAC3_ROOM_TYPE>): Uint8Array {
  const buf = new Uint8Array(sizeofKSAC3_ROOM_TYPE);
  const view = new DataView(buf.buffer);
  // 0x00: i32
  if (data?.fLargeRoom !== undefined) view.setInt32(0, Number(data.fLargeRoom), true);
  // 0x04: pad4
  return buf;
}

/**
 * Windows.Win32.Media.KernelStreaming.KS_DVD_YCrCb (size: 8)
 */
export interface KS_DVD_YCrCb {
  /** u8 */
  Reserved: number;
  /** u8 */
  Y: number;
  /** u8 */
  Cr: number;
  /** u8 */
  Cb: number;
}

export const sizeofKS_DVD_YCrCb = 8;

export function allocKS_DVD_YCrCb(data?: Partial<KS_DVD_YCrCb>): Uint8Array {
  const buf = new Uint8Array(sizeofKS_DVD_YCrCb);
  const view = new DataView(buf.buffer);
  // 0x00: u8
  if (data?.Reserved !== undefined) view.setUint8(0, Number(data.Reserved));
  // 0x01: u8
  if (data?.Y !== undefined) view.setUint8(1, Number(data.Y));
  // 0x02: u8
  if (data?.Cr !== undefined) view.setUint8(2, Number(data.Cr));
  // 0x03: u8
  if (data?.Cb !== undefined) view.setUint8(3, Number(data.Cb));
  // 0x04: pad4
  return buf;
}

/**
 * Windows.Win32.Media.KernelStreaming.KS_DVD_YUV (size: 8)
 */
export interface KS_DVD_YUV {
  /** u8 */
  Reserved: number;
  /** u8 */
  Y: number;
  /** u8 */
  V: number;
  /** u8 */
  U: number;
}

export const sizeofKS_DVD_YUV = 8;

export function allocKS_DVD_YUV(data?: Partial<KS_DVD_YUV>): Uint8Array {
  const buf = new Uint8Array(sizeofKS_DVD_YUV);
  const view = new DataView(buf.buffer);
  // 0x00: u8
  if (data?.Reserved !== undefined) view.setUint8(0, Number(data.Reserved));
  // 0x01: u8
  if (data?.Y !== undefined) view.setUint8(1, Number(data.Y));
  // 0x02: u8
  if (data?.V !== undefined) view.setUint8(2, Number(data.V));
  // 0x03: u8
  if (data?.U !== undefined) view.setUint8(3, Number(data.U));
  // 0x04: pad4
  return buf;
}

/**
 * Windows.Win32.Media.KernelStreaming.KSPROPERTY_SPPAL (size: 8)
 */
export interface KSPROPERTY_SPPAL {
  /** array */
  sppal: Deno.PointerValue | null;
}

export const sizeofKSPROPERTY_SPPAL = 8;

export function allocKSPROPERTY_SPPAL(data?: Partial<KSPROPERTY_SPPAL>): Uint8Array {
  const buf = new Uint8Array(sizeofKSPROPERTY_SPPAL);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.sppal !== undefined) view.setBigUint64(0, data.sppal === null ? 0n : BigInt(util.toPointer(data.sppal)), true);
  return buf;
}

/**
 * Windows.Win32.Media.KernelStreaming.KS_COLCON (size: 8)
 */
export interface KS_COLCON {
  /** u8 */
  _bitfield1: number;
  /** u8 */
  _bitfield2: number;
  /** u8 */
  _bitfield3: number;
  /** u8 */
  _bitfield4: number;
}

export const sizeofKS_COLCON = 8;

export function allocKS_COLCON(data?: Partial<KS_COLCON>): Uint8Array {
  const buf = new Uint8Array(sizeofKS_COLCON);
  const view = new DataView(buf.buffer);
  // 0x00: u8
  if (data?._bitfield1 !== undefined) view.setUint8(0, Number(data._bitfield1));
  // 0x01: u8
  if (data?._bitfield2 !== undefined) view.setUint8(1, Number(data._bitfield2));
  // 0x02: u8
  if (data?._bitfield3 !== undefined) view.setUint8(2, Number(data._bitfield3));
  // 0x03: u8
  if (data?._bitfield4 !== undefined) view.setUint8(3, Number(data._bitfield4));
  // 0x04: pad4
  return buf;
}

/**
 * Windows.Win32.Media.KernelStreaming.KSPROPERTY_SPHLI (size: 32)
 */
export interface KSPROPERTY_SPHLI {
  /** u16 */
  HLISS: number;
  /** u16 */
  Reserved: number;
  /** u32 */
  StartPTM: number;
  /** u32 */
  EndPTM: number;
  /** u16 */
  StartX: number;
  /** u16 */
  StartY: number;
  /** u16 */
  StopX: number;
  /** u16 */
  StopY: number;
  /** Windows.Win32.Media.KernelStreaming.KS_COLCON */
  ColCon: Uint8Array | Deno.PointerValue | null;
}

export const sizeofKSPROPERTY_SPHLI = 32;

export function allocKSPROPERTY_SPHLI(data?: Partial<KSPROPERTY_SPHLI>): Uint8Array {
  const buf = new Uint8Array(sizeofKSPROPERTY_SPHLI);
  const view = new DataView(buf.buffer);
  // 0x00: u16
  if (data?.HLISS !== undefined) view.setUint16(0, Number(data.HLISS), true);
  // 0x02: u16
  if (data?.Reserved !== undefined) view.setUint16(2, Number(data.Reserved), true);
  // 0x04: u32
  if (data?.StartPTM !== undefined) view.setUint32(4, Number(data.StartPTM), true);
  // 0x08: u32
  if (data?.EndPTM !== undefined) view.setUint32(8, Number(data.EndPTM), true);
  // 0x0c: u16
  if (data?.StartX !== undefined) view.setUint16(12, Number(data.StartX), true);
  // 0x0e: u16
  if (data?.StartY !== undefined) view.setUint16(14, Number(data.StartY), true);
  // 0x10: u16
  if (data?.StopX !== undefined) view.setUint16(16, Number(data.StopX), true);
  // 0x12: u16
  if (data?.StopY !== undefined) view.setUint16(18, Number(data.StopY), true);
  // 0x14: pad4
  // 0x18: pointer
  if (data?.ColCon !== undefined) view.setBigUint64(24, data.ColCon === null ? 0n : BigInt(util.toPointer(data.ColCon)), true);
  return buf;
}

/**
 * Windows.Win32.Media.KernelStreaming.KS_DVDCOPY_CHLGKEY (size: 16)
 */
export interface KS_DVDCOPY_CHLGKEY {
  /** array */
  ChlgKey: Deno.PointerValue | null;
  /** array */
  Reserved: Deno.PointerValue | null;
}

export const sizeofKS_DVDCOPY_CHLGKEY = 16;

export function allocKS_DVDCOPY_CHLGKEY(data?: Partial<KS_DVDCOPY_CHLGKEY>): Uint8Array {
  const buf = new Uint8Array(sizeofKS_DVDCOPY_CHLGKEY);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.ChlgKey !== undefined) view.setBigUint64(0, data.ChlgKey === null ? 0n : BigInt(util.toPointer(data.ChlgKey)), true);
  // 0x08: pointer
  if (data?.Reserved !== undefined) view.setBigUint64(8, data.Reserved === null ? 0n : BigInt(util.toPointer(data.Reserved)), true);
  return buf;
}

/**
 * Windows.Win32.Media.KernelStreaming.KS_DVDCOPY_BUSKEY (size: 16)
 */
export interface KS_DVDCOPY_BUSKEY {
  /** array */
  BusKey: Deno.PointerValue | null;
  /** array */
  Reserved: Deno.PointerValue | null;
}

export const sizeofKS_DVDCOPY_BUSKEY = 16;

export function allocKS_DVDCOPY_BUSKEY(data?: Partial<KS_DVDCOPY_BUSKEY>): Uint8Array {
  const buf = new Uint8Array(sizeofKS_DVDCOPY_BUSKEY);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.BusKey !== undefined) view.setBigUint64(0, data.BusKey === null ? 0n : BigInt(util.toPointer(data.BusKey)), true);
  // 0x08: pointer
  if (data?.Reserved !== undefined) view.setBigUint64(8, data.Reserved === null ? 0n : BigInt(util.toPointer(data.Reserved)), true);
  return buf;
}

/**
 * Windows.Win32.Media.KernelStreaming.KS_DVDCOPY_DISCKEY (size: 8)
 */
export interface KS_DVDCOPY_DISCKEY {
  /** array */
  DiscKey: Deno.PointerValue | null;
}

export const sizeofKS_DVDCOPY_DISCKEY = 8;

export function allocKS_DVDCOPY_DISCKEY(data?: Partial<KS_DVDCOPY_DISCKEY>): Uint8Array {
  const buf = new Uint8Array(sizeofKS_DVDCOPY_DISCKEY);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.DiscKey !== undefined) view.setBigUint64(0, data.DiscKey === null ? 0n : BigInt(util.toPointer(data.DiscKey)), true);
  return buf;
}

/**
 * Windows.Win32.Media.KernelStreaming.KS_DVDCOPY_REGION (size: 16)
 */
export interface KS_DVDCOPY_REGION {
  /** u8 */
  Reserved: number;
  /** u8 */
  RegionData: number;
  /** array */
  Reserved2: Deno.PointerValue | null;
}

export const sizeofKS_DVDCOPY_REGION = 16;

export function allocKS_DVDCOPY_REGION(data?: Partial<KS_DVDCOPY_REGION>): Uint8Array {
  const buf = new Uint8Array(sizeofKS_DVDCOPY_REGION);
  const view = new DataView(buf.buffer);
  // 0x00: u8
  if (data?.Reserved !== undefined) view.setUint8(0, Number(data.Reserved));
  // 0x01: u8
  if (data?.RegionData !== undefined) view.setUint8(1, Number(data.RegionData));
  // 0x02: pad6
  // 0x08: pointer
  if (data?.Reserved2 !== undefined) view.setBigUint64(8, data.Reserved2 === null ? 0n : BigInt(util.toPointer(data.Reserved2)), true);
  return buf;
}

/**
 * Windows.Win32.Media.KernelStreaming.KS_DVDCOPY_TITLEKEY (size: 32)
 */
export interface KS_DVDCOPY_TITLEKEY {
  /** u32 */
  KeyFlags: number;
  /** array */
  ReservedNT: Deno.PointerValue | null;
  /** array */
  TitleKey: Deno.PointerValue | null;
  /** array */
  Reserved: Deno.PointerValue | null;
}

export const sizeofKS_DVDCOPY_TITLEKEY = 32;

export function allocKS_DVDCOPY_TITLEKEY(data?: Partial<KS_DVDCOPY_TITLEKEY>): Uint8Array {
  const buf = new Uint8Array(sizeofKS_DVDCOPY_TITLEKEY);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.KeyFlags !== undefined) view.setUint32(0, Number(data.KeyFlags), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.ReservedNT !== undefined) view.setBigUint64(8, data.ReservedNT === null ? 0n : BigInt(util.toPointer(data.ReservedNT)), true);
  // 0x10: pointer
  if (data?.TitleKey !== undefined) view.setBigUint64(16, data.TitleKey === null ? 0n : BigInt(util.toPointer(data.TitleKey)), true);
  // 0x18: pointer
  if (data?.Reserved !== undefined) view.setBigUint64(24, data.Reserved === null ? 0n : BigInt(util.toPointer(data.Reserved)), true);
  return buf;
}

/**
 * Windows.Win32.Media.KernelStreaming.KS_COPY_MACROVISION (size: 8)
 */
export interface KS_COPY_MACROVISION {
  /** u32 */
  MACROVISIONLevel: number;
}

export const sizeofKS_COPY_MACROVISION = 8;

export function allocKS_COPY_MACROVISION(data?: Partial<KS_COPY_MACROVISION>): Uint8Array {
  const buf = new Uint8Array(sizeofKS_COPY_MACROVISION);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.MACROVISIONLevel !== undefined) view.setUint32(0, Number(data.MACROVISIONLevel), true);
  // 0x04: pad4
  return buf;
}

/**
 * Windows.Win32.Media.KernelStreaming.KS_DVDCOPY_SET_COPY_STATE (size: 8)
 */
export interface KS_DVDCOPY_SET_COPY_STATE {
  /** u32 */
  DVDCopyState: number;
}

export const sizeofKS_DVDCOPY_SET_COPY_STATE = 8;

export function allocKS_DVDCOPY_SET_COPY_STATE(data?: Partial<KS_DVDCOPY_SET_COPY_STATE>): Uint8Array {
  const buf = new Uint8Array(sizeofKS_DVDCOPY_SET_COPY_STATE);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.DVDCopyState !== undefined) view.setUint32(0, Number(data.DVDCopyState), true);
  // 0x04: pad4
  return buf;
}

/**
 * Windows.Win32.Media.KernelStreaming.KS_RGBQUAD (size: 8)
 */
export interface KS_RGBQUAD {
  /** u8 */
  rgbBlue: number;
  /** u8 */
  rgbGreen: number;
  /** u8 */
  rgbRed: number;
  /** u8 */
  rgbReserved: number;
}

export const sizeofKS_RGBQUAD = 8;

export function allocKS_RGBQUAD(data?: Partial<KS_RGBQUAD>): Uint8Array {
  const buf = new Uint8Array(sizeofKS_RGBQUAD);
  const view = new DataView(buf.buffer);
  // 0x00: u8
  if (data?.rgbBlue !== undefined) view.setUint8(0, Number(data.rgbBlue));
  // 0x01: u8
  if (data?.rgbGreen !== undefined) view.setUint8(1, Number(data.rgbGreen));
  // 0x02: u8
  if (data?.rgbRed !== undefined) view.setUint8(2, Number(data.rgbRed));
  // 0x03: u8
  if (data?.rgbReserved !== undefined) view.setUint8(3, Number(data.rgbReserved));
  // 0x04: pad4
  return buf;
}

/**
 * Windows.Win32.Media.KernelStreaming.KS_BITMAPINFOHEADER (size: 40)
 */
export interface KS_BITMAPINFOHEADER {
  /** u32 */
  biSize: number;
  /** i32 */
  biWidth: number;
  /** i32 */
  biHeight: number;
  /** u16 */
  biPlanes: number;
  /** u16 */
  biBitCount: number;
  /** u32 */
  biCompression: number;
  /** u32 */
  biSizeImage: number;
  /** i32 */
  biXPelsPerMeter: number;
  /** i32 */
  biYPelsPerMeter: number;
  /** u32 */
  biClrUsed: number;
  /** u32 */
  biClrImportant: number;
}

export const sizeofKS_BITMAPINFOHEADER = 40;

export function allocKS_BITMAPINFOHEADER(data?: Partial<KS_BITMAPINFOHEADER>): Uint8Array {
  const buf = new Uint8Array(sizeofKS_BITMAPINFOHEADER);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.biSize !== undefined) view.setUint32(0, Number(data.biSize), true);
  // 0x04: i32
  if (data?.biWidth !== undefined) view.setInt32(4, Number(data.biWidth), true);
  // 0x08: i32
  if (data?.biHeight !== undefined) view.setInt32(8, Number(data.biHeight), true);
  // 0x0c: u16
  if (data?.biPlanes !== undefined) view.setUint16(12, Number(data.biPlanes), true);
  // 0x0e: u16
  if (data?.biBitCount !== undefined) view.setUint16(14, Number(data.biBitCount), true);
  // 0x10: u32
  if (data?.biCompression !== undefined) view.setUint32(16, Number(data.biCompression), true);
  // 0x14: u32
  if (data?.biSizeImage !== undefined) view.setUint32(20, Number(data.biSizeImage), true);
  // 0x18: i32
  if (data?.biXPelsPerMeter !== undefined) view.setInt32(24, Number(data.biXPelsPerMeter), true);
  // 0x1c: i32
  if (data?.biYPelsPerMeter !== undefined) view.setInt32(28, Number(data.biYPelsPerMeter), true);
  // 0x20: u32
  if (data?.biClrUsed !== undefined) view.setUint32(32, Number(data.biClrUsed), true);
  // 0x24: u32
  if (data?.biClrImportant !== undefined) view.setUint32(36, Number(data.biClrImportant), true);
  return buf;
}

/**
 * Windows.Win32.Media.KernelStreaming.KS_TRUECOLORINFO (size: 16)
 */
export interface KS_TRUECOLORINFO {
  /** array */
  dwBitMasks: Deno.PointerValue | null;
  /** array */
  bmiColors: Deno.PointerValue | null;
}

export const sizeofKS_TRUECOLORINFO = 16;

export function allocKS_TRUECOLORINFO(data?: Partial<KS_TRUECOLORINFO>): Uint8Array {
  const buf = new Uint8Array(sizeofKS_TRUECOLORINFO);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.dwBitMasks !== undefined) view.setBigUint64(0, data.dwBitMasks === null ? 0n : BigInt(util.toPointer(data.dwBitMasks)), true);
  // 0x08: pointer
  if (data?.bmiColors !== undefined) view.setBigUint64(8, data.bmiColors === null ? 0n : BigInt(util.toPointer(data.bmiColors)), true);
  return buf;
}

/**
 * Windows.Win32.Foundation.RECT (size: 16)
 */
export interface RECT {
  /** i32 */
  left: number;
  /** i32 */
  top: number;
  /** i32 */
  right: number;
  /** i32 */
  bottom: number;
}

export const sizeofRECT = 16;

export function allocRECT(data?: Partial<RECT>): Uint8Array {
  const buf = new Uint8Array(sizeofRECT);
  const view = new DataView(buf.buffer);
  // 0x00: i32
  if (data?.left !== undefined) view.setInt32(0, Number(data.left), true);
  // 0x04: i32
  if (data?.top !== undefined) view.setInt32(4, Number(data.top), true);
  // 0x08: i32
  if (data?.right !== undefined) view.setInt32(8, Number(data.right), true);
  // 0x0c: i32
  if (data?.bottom !== undefined) view.setInt32(12, Number(data.bottom), true);
  return buf;
}

/**
 * Windows.Win32.Media.KernelStreaming.KS_VIDEOINFOHEADER (size: 40)
 */
export interface KS_VIDEOINFOHEADER {
  /** Windows.Win32.Foundation.RECT */
  rcSource: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Foundation.RECT */
  rcTarget: Uint8Array | Deno.PointerValue | null;
  /** u32 */
  dwBitRate: number;
  /** u32 */
  dwBitErrorRate: number;
  /** i64 */
  AvgTimePerFrame: Deno.PointerValue;
  /** Windows.Win32.Media.KernelStreaming.KS_BITMAPINFOHEADER */
  bmiHeader: Uint8Array | Deno.PointerValue | null;
}

export const sizeofKS_VIDEOINFOHEADER = 40;

export function allocKS_VIDEOINFOHEADER(data?: Partial<KS_VIDEOINFOHEADER>): Uint8Array {
  const buf = new Uint8Array(sizeofKS_VIDEOINFOHEADER);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.rcSource !== undefined) view.setBigUint64(0, data.rcSource === null ? 0n : BigInt(util.toPointer(data.rcSource)), true);
  // 0x08: pointer
  if (data?.rcTarget !== undefined) view.setBigUint64(8, data.rcTarget === null ? 0n : BigInt(util.toPointer(data.rcTarget)), true);
  // 0x10: u32
  if (data?.dwBitRate !== undefined) view.setUint32(16, Number(data.dwBitRate), true);
  // 0x14: u32
  if (data?.dwBitErrorRate !== undefined) view.setUint32(20, Number(data.dwBitErrorRate), true);
  // 0x18: i64
  if (data?.AvgTimePerFrame !== undefined) view.setBigInt64(24, BigInt(data.AvgTimePerFrame), true);
  // 0x20: pointer
  if (data?.bmiHeader !== undefined) view.setBigUint64(32, data.bmiHeader === null ? 0n : BigInt(util.toPointer(data.bmiHeader)), true);
  return buf;
}

/**
 * Windows.Win32.Media.KernelStreaming.KS_VIDEOINFO (size: 48)
 */
export interface KS_VIDEOINFO {
  /** Windows.Win32.Foundation.RECT */
  rcSource: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Foundation.RECT */
  rcTarget: Uint8Array | Deno.PointerValue | null;
  /** u32 */
  dwBitRate: number;
  /** u32 */
  dwBitErrorRate: number;
  /** i64 */
  AvgTimePerFrame: Deno.PointerValue;
  /** Windows.Win32.Media.KernelStreaming.KS_BITMAPINFOHEADER */
  bmiHeader: Uint8Array | Deno.PointerValue | null;
  /** _Anonymous_e__Union */
  Anonymous: Uint8Array | Deno.PointerValue | null;
}

export const sizeofKS_VIDEOINFO = 48;

export function allocKS_VIDEOINFO(data?: Partial<KS_VIDEOINFO>): Uint8Array {
  const buf = new Uint8Array(sizeofKS_VIDEOINFO);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.rcSource !== undefined) view.setBigUint64(0, data.rcSource === null ? 0n : BigInt(util.toPointer(data.rcSource)), true);
  // 0x08: pointer
  if (data?.rcTarget !== undefined) view.setBigUint64(8, data.rcTarget === null ? 0n : BigInt(util.toPointer(data.rcTarget)), true);
  // 0x10: u32
  if (data?.dwBitRate !== undefined) view.setUint32(16, Number(data.dwBitRate), true);
  // 0x14: u32
  if (data?.dwBitErrorRate !== undefined) view.setUint32(20, Number(data.dwBitErrorRate), true);
  // 0x18: i64
  if (data?.AvgTimePerFrame !== undefined) view.setBigInt64(24, BigInt(data.AvgTimePerFrame), true);
  // 0x20: pointer
  if (data?.bmiHeader !== undefined) view.setBigUint64(32, data.bmiHeader === null ? 0n : BigInt(util.toPointer(data.bmiHeader)), true);
  // 0x28: pointer
  if (data?.Anonymous !== undefined) view.setBigUint64(40, data.Anonymous === null ? 0n : BigInt(util.toPointer(data.Anonymous)), true);
  return buf;
}

/**
 * Windows.Win32.Media.KernelStreaming.KS_VBIINFOHEADER (size: 48)
 */
export interface KS_VBIINFOHEADER {
  /** u32 */
  StartLine: number;
  /** u32 */
  EndLine: number;
  /** u32 */
  SamplingFrequency: number;
  /** u32 */
  MinLineStartTime: number;
  /** u32 */
  MaxLineStartTime: number;
  /** u32 */
  ActualLineStartTime: number;
  /** u32 */
  ActualLineEndTime: number;
  /** u32 */
  VideoStandard: number;
  /** u32 */
  SamplesPerLine: number;
  /** u32 */
  StrideInBytes: number;
  /** u32 */
  BufferSize: number;
}

export const sizeofKS_VBIINFOHEADER = 48;

export function allocKS_VBIINFOHEADER(data?: Partial<KS_VBIINFOHEADER>): Uint8Array {
  const buf = new Uint8Array(sizeofKS_VBIINFOHEADER);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.StartLine !== undefined) view.setUint32(0, Number(data.StartLine), true);
  // 0x04: u32
  if (data?.EndLine !== undefined) view.setUint32(4, Number(data.EndLine), true);
  // 0x08: u32
  if (data?.SamplingFrequency !== undefined) view.setUint32(8, Number(data.SamplingFrequency), true);
  // 0x0c: u32
  if (data?.MinLineStartTime !== undefined) view.setUint32(12, Number(data.MinLineStartTime), true);
  // 0x10: u32
  if (data?.MaxLineStartTime !== undefined) view.setUint32(16, Number(data.MaxLineStartTime), true);
  // 0x14: u32
  if (data?.ActualLineStartTime !== undefined) view.setUint32(20, Number(data.ActualLineStartTime), true);
  // 0x18: u32
  if (data?.ActualLineEndTime !== undefined) view.setUint32(24, Number(data.ActualLineEndTime), true);
  // 0x1c: u32
  if (data?.VideoStandard !== undefined) view.setUint32(28, Number(data.VideoStandard), true);
  // 0x20: u32
  if (data?.SamplesPerLine !== undefined) view.setUint32(32, Number(data.SamplesPerLine), true);
  // 0x24: u32
  if (data?.StrideInBytes !== undefined) view.setUint32(36, Number(data.StrideInBytes), true);
  // 0x28: u32
  if (data?.BufferSize !== undefined) view.setUint32(40, Number(data.BufferSize), true);
  // 0x2c: pad4
  return buf;
}

/**
 * Windows.Win32.Media.KernelStreaming.KS_ANALOGVIDEOINFO (size: 32)
 */
export interface KS_ANALOGVIDEOINFO {
  /** Windows.Win32.Foundation.RECT */
  rcSource: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Foundation.RECT */
  rcTarget: Uint8Array | Deno.PointerValue | null;
  /** u32 */
  dwActiveWidth: number;
  /** u32 */
  dwActiveHeight: number;
  /** i64 */
  AvgTimePerFrame: Deno.PointerValue;
}

export const sizeofKS_ANALOGVIDEOINFO = 32;

export function allocKS_ANALOGVIDEOINFO(data?: Partial<KS_ANALOGVIDEOINFO>): Uint8Array {
  const buf = new Uint8Array(sizeofKS_ANALOGVIDEOINFO);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.rcSource !== undefined) view.setBigUint64(0, data.rcSource === null ? 0n : BigInt(util.toPointer(data.rcSource)), true);
  // 0x08: pointer
  if (data?.rcTarget !== undefined) view.setBigUint64(8, data.rcTarget === null ? 0n : BigInt(util.toPointer(data.rcTarget)), true);
  // 0x10: u32
  if (data?.dwActiveWidth !== undefined) view.setUint32(16, Number(data.dwActiveWidth), true);
  // 0x14: u32
  if (data?.dwActiveHeight !== undefined) view.setUint32(20, Number(data.dwActiveHeight), true);
  // 0x18: i64
  if (data?.AvgTimePerFrame !== undefined) view.setBigInt64(24, BigInt(data.AvgTimePerFrame), true);
  return buf;
}

/**
 * Windows.Win32.Media.KernelStreaming.KS_TVTUNER_CHANGE_INFO (size: 16)
 */
export interface KS_TVTUNER_CHANGE_INFO {
  /** u32 */
  dwFlags: number;
  /** u32 */
  dwCountryCode: number;
  /** u32 */
  dwAnalogVideoStandard: number;
  /** u32 */
  dwChannel: number;
}

export const sizeofKS_TVTUNER_CHANGE_INFO = 16;

export function allocKS_TVTUNER_CHANGE_INFO(data?: Partial<KS_TVTUNER_CHANGE_INFO>): Uint8Array {
  const buf = new Uint8Array(sizeofKS_TVTUNER_CHANGE_INFO);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.dwFlags !== undefined) view.setUint32(0, Number(data.dwFlags), true);
  // 0x04: u32
  if (data?.dwCountryCode !== undefined) view.setUint32(4, Number(data.dwCountryCode), true);
  // 0x08: u32
  if (data?.dwAnalogVideoStandard !== undefined) view.setUint32(8, Number(data.dwAnalogVideoStandard), true);
  // 0x0c: u32
  if (data?.dwChannel !== undefined) view.setUint32(12, Number(data.dwChannel), true);
  return buf;
}

/**
 * Windows.Win32.Media.KernelStreaming.KS_VIDEOINFOHEADER2 (size: 72)
 */
export interface KS_VIDEOINFOHEADER2 {
  /** Windows.Win32.Foundation.RECT */
  rcSource: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Foundation.RECT */
  rcTarget: Uint8Array | Deno.PointerValue | null;
  /** u32 */
  dwBitRate: number;
  /** u32 */
  dwBitErrorRate: number;
  /** i64 */
  AvgTimePerFrame: Deno.PointerValue;
  /** u32 */
  dwInterlaceFlags: number;
  /** u32 */
  dwCopyProtectFlags: number;
  /** u32 */
  dwPictAspectRatioX: number;
  /** u32 */
  dwPictAspectRatioY: number;
  /** _Anonymous_e__Union */
  Anonymous: Uint8Array | Deno.PointerValue | null;
  /** u32 */
  dwReserved2: number;
  /** Windows.Win32.Media.KernelStreaming.KS_BITMAPINFOHEADER */
  bmiHeader: Uint8Array | Deno.PointerValue | null;
}

export const sizeofKS_VIDEOINFOHEADER2 = 72;

export function allocKS_VIDEOINFOHEADER2(data?: Partial<KS_VIDEOINFOHEADER2>): Uint8Array {
  const buf = new Uint8Array(sizeofKS_VIDEOINFOHEADER2);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.rcSource !== undefined) view.setBigUint64(0, data.rcSource === null ? 0n : BigInt(util.toPointer(data.rcSource)), true);
  // 0x08: pointer
  if (data?.rcTarget !== undefined) view.setBigUint64(8, data.rcTarget === null ? 0n : BigInt(util.toPointer(data.rcTarget)), true);
  // 0x10: u32
  if (data?.dwBitRate !== undefined) view.setUint32(16, Number(data.dwBitRate), true);
  // 0x14: u32
  if (data?.dwBitErrorRate !== undefined) view.setUint32(20, Number(data.dwBitErrorRate), true);
  // 0x18: i64
  if (data?.AvgTimePerFrame !== undefined) view.setBigInt64(24, BigInt(data.AvgTimePerFrame), true);
  // 0x20: u32
  if (data?.dwInterlaceFlags !== undefined) view.setUint32(32, Number(data.dwInterlaceFlags), true);
  // 0x24: u32
  if (data?.dwCopyProtectFlags !== undefined) view.setUint32(36, Number(data.dwCopyProtectFlags), true);
  // 0x28: u32
  if (data?.dwPictAspectRatioX !== undefined) view.setUint32(40, Number(data.dwPictAspectRatioX), true);
  // 0x2c: u32
  if (data?.dwPictAspectRatioY !== undefined) view.setUint32(44, Number(data.dwPictAspectRatioY), true);
  // 0x30: pointer
  if (data?.Anonymous !== undefined) view.setBigUint64(48, data.Anonymous === null ? 0n : BigInt(util.toPointer(data.Anonymous)), true);
  // 0x38: u32
  if (data?.dwReserved2 !== undefined) view.setUint32(56, Number(data.dwReserved2), true);
  // 0x3c: pad4
  // 0x40: pointer
  if (data?.bmiHeader !== undefined) view.setBigUint64(64, data.bmiHeader === null ? 0n : BigInt(util.toPointer(data.bmiHeader)), true);
  return buf;
}

/**
 * Windows.Win32.Media.KernelStreaming.KS_MPEG1VIDEOINFO (size: 24)
 */
export interface KS_MPEG1VIDEOINFO {
  /** Windows.Win32.Media.KernelStreaming.KS_VIDEOINFOHEADER */
  hdr: Uint8Array | Deno.PointerValue | null;
  /** u32 */
  dwStartTimeCode: number;
  /** u32 */
  cbSequenceHeader: number;
  /** array */
  bSequenceHeader: Deno.PointerValue | null;
}

export const sizeofKS_MPEG1VIDEOINFO = 24;

export function allocKS_MPEG1VIDEOINFO(data?: Partial<KS_MPEG1VIDEOINFO>): Uint8Array {
  const buf = new Uint8Array(sizeofKS_MPEG1VIDEOINFO);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.hdr !== undefined) view.setBigUint64(0, data.hdr === null ? 0n : BigInt(util.toPointer(data.hdr)), true);
  // 0x08: u32
  if (data?.dwStartTimeCode !== undefined) view.setUint32(8, Number(data.dwStartTimeCode), true);
  // 0x0c: u32
  if (data?.cbSequenceHeader !== undefined) view.setUint32(12, Number(data.cbSequenceHeader), true);
  // 0x10: pointer
  if (data?.bSequenceHeader !== undefined) view.setBigUint64(16, data.bSequenceHeader === null ? 0n : BigInt(util.toPointer(data.bSequenceHeader)), true);
  return buf;
}

/**
 * Windows.Win32.Media.KernelStreaming.KS_MPEGVIDEOINFO2 (size: 40)
 */
export interface KS_MPEGVIDEOINFO2 {
  /** Windows.Win32.Media.KernelStreaming.KS_VIDEOINFOHEADER2 */
  hdr: Uint8Array | Deno.PointerValue | null;
  /** u32 */
  dwStartTimeCode: number;
  /** u32 */
  cbSequenceHeader: number;
  /** u32 */
  dwProfile: number;
  /** u32 */
  dwLevel: number;
  /** u32 */
  dwFlags: number;
  /** array */
  bSequenceHeader: Deno.PointerValue | null;
}

export const sizeofKS_MPEGVIDEOINFO2 = 40;

export function allocKS_MPEGVIDEOINFO2(data?: Partial<KS_MPEGVIDEOINFO2>): Uint8Array {
  const buf = new Uint8Array(sizeofKS_MPEGVIDEOINFO2);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.hdr !== undefined) view.setBigUint64(0, data.hdr === null ? 0n : BigInt(util.toPointer(data.hdr)), true);
  // 0x08: u32
  if (data?.dwStartTimeCode !== undefined) view.setUint32(8, Number(data.dwStartTimeCode), true);
  // 0x0c: u32
  if (data?.cbSequenceHeader !== undefined) view.setUint32(12, Number(data.cbSequenceHeader), true);
  // 0x10: u32
  if (data?.dwProfile !== undefined) view.setUint32(16, Number(data.dwProfile), true);
  // 0x14: u32
  if (data?.dwLevel !== undefined) view.setUint32(20, Number(data.dwLevel), true);
  // 0x18: u32
  if (data?.dwFlags !== undefined) view.setUint32(24, Number(data.dwFlags), true);
  // 0x1c: pad4
  // 0x20: pointer
  if (data?.bSequenceHeader !== undefined) view.setBigUint64(32, data.bSequenceHeader === null ? 0n : BigInt(util.toPointer(data.bSequenceHeader)), true);
  return buf;
}

/**
 * Windows.Win32.Media.KernelStreaming.KS_H264VIDEOINFO (size: 80)
 */
export interface KS_H264VIDEOINFO {
  /** u16 */
  wWidth: number;
  /** u16 */
  wHeight: number;
  /** u16 */
  wSARwidth: number;
  /** u16 */
  wSARheight: number;
  /** u16 */
  wProfile: number;
  /** u8 */
  bLevelIDC: number;
  /** u16 */
  wConstrainedToolset: number;
  /** u32 */
  bmSupportedUsages: number;
  /** u16 */
  bmCapabilities: number;
  /** u32 */
  bmSVCCapabilities: number;
  /** u32 */
  bmMVCCapabilities: number;
  /** u32 */
  dwFrameInterval: number;
  /** u8 */
  bMaxCodecConfigDelay: number;
  /** u8 */
  bmSupportedSliceModes: number;
  /** u8 */
  bmSupportedSyncFrameTypes: number;
  /** u8 */
  bResolutionScaling: number;
  /** u8 */
  bSimulcastSupport: number;
  /** u8 */
  bmSupportedRateControlModes: number;
  /** u16 */
  wMaxMBperSecOneResolutionNoScalability: number;
  /** u16 */
  wMaxMBperSecTwoResolutionsNoScalability: number;
  /** u16 */
  wMaxMBperSecThreeResolutionsNoScalability: number;
  /** u16 */
  wMaxMBperSecFourResolutionsNoScalability: number;
  /** u16 */
  wMaxMBperSecOneResolutionTemporalScalability: number;
  /** u16 */
  wMaxMBperSecTwoResolutionsTemporalScalablility: number;
  /** u16 */
  wMaxMBperSecThreeResolutionsTemporalScalability: number;
  /** u16 */
  wMaxMBperSecFourResolutionsTemporalScalability: number;
  /** u16 */
  wMaxMBperSecOneResolutionTemporalQualityScalability: number;
  /** u16 */
  wMaxMBperSecTwoResolutionsTemporalQualityScalability: number;
  /** u16 */
  wMaxMBperSecThreeResolutionsTemporalQualityScalablity: number;
  /** u16 */
  wMaxMBperSecFourResolutionsTemporalQualityScalability: number;
  /** u16 */
  wMaxMBperSecOneResolutionTemporalSpatialScalability: number;
  /** u16 */
  wMaxMBperSecTwoResolutionsTemporalSpatialScalability: number;
  /** u16 */
  wMaxMBperSecThreeResolutionsTemporalSpatialScalablity: number;
  /** u16 */
  wMaxMBperSecFourResolutionsTemporalSpatialScalability: number;
  /** u16 */
  wMaxMBperSecOneResolutionFullScalability: number;
  /** u16 */
  wMaxMBperSecTwoResolutionsFullScalability: number;
  /** u16 */
  wMaxMBperSecThreeResolutionsFullScalability: number;
  /** u16 */
  wMaxMBperSecFourResolutionsFullScalability: number;
}

export const sizeofKS_H264VIDEOINFO = 80;

export function allocKS_H264VIDEOINFO(data?: Partial<KS_H264VIDEOINFO>): Uint8Array {
  const buf = new Uint8Array(sizeofKS_H264VIDEOINFO);
  const view = new DataView(buf.buffer);
  // 0x00: u16
  if (data?.wWidth !== undefined) view.setUint16(0, Number(data.wWidth), true);
  // 0x02: u16
  if (data?.wHeight !== undefined) view.setUint16(2, Number(data.wHeight), true);
  // 0x04: u16
  if (data?.wSARwidth !== undefined) view.setUint16(4, Number(data.wSARwidth), true);
  // 0x06: u16
  if (data?.wSARheight !== undefined) view.setUint16(6, Number(data.wSARheight), true);
  // 0x08: u16
  if (data?.wProfile !== undefined) view.setUint16(8, Number(data.wProfile), true);
  // 0x0a: u8
  if (data?.bLevelIDC !== undefined) view.setUint8(10, Number(data.bLevelIDC));
  // 0x0b: u16
  if (data?.wConstrainedToolset !== undefined) view.setUint16(11, Number(data.wConstrainedToolset), true);
  // 0x0d: u32
  if (data?.bmSupportedUsages !== undefined) view.setUint32(13, Number(data.bmSupportedUsages), true);
  // 0x11: u16
  if (data?.bmCapabilities !== undefined) view.setUint16(17, Number(data.bmCapabilities), true);
  // 0x13: u32
  if (data?.bmSVCCapabilities !== undefined) view.setUint32(19, Number(data.bmSVCCapabilities), true);
  // 0x17: u32
  if (data?.bmMVCCapabilities !== undefined) view.setUint32(23, Number(data.bmMVCCapabilities), true);
  // 0x1b: u32
  if (data?.dwFrameInterval !== undefined) view.setUint32(27, Number(data.dwFrameInterval), true);
  // 0x1f: u8
  if (data?.bMaxCodecConfigDelay !== undefined) view.setUint8(31, Number(data.bMaxCodecConfigDelay));
  // 0x20: u8
  if (data?.bmSupportedSliceModes !== undefined) view.setUint8(32, Number(data.bmSupportedSliceModes));
  // 0x21: u8
  if (data?.bmSupportedSyncFrameTypes !== undefined) view.setUint8(33, Number(data.bmSupportedSyncFrameTypes));
  // 0x22: u8
  if (data?.bResolutionScaling !== undefined) view.setUint8(34, Number(data.bResolutionScaling));
  // 0x23: u8
  if (data?.bSimulcastSupport !== undefined) view.setUint8(35, Number(data.bSimulcastSupport));
  // 0x24: u8
  if (data?.bmSupportedRateControlModes !== undefined) view.setUint8(36, Number(data.bmSupportedRateControlModes));
  // 0x25: u16
  if (data?.wMaxMBperSecOneResolutionNoScalability !== undefined) view.setUint16(37, Number(data.wMaxMBperSecOneResolutionNoScalability), true);
  // 0x27: u16
  if (data?.wMaxMBperSecTwoResolutionsNoScalability !== undefined) view.setUint16(39, Number(data.wMaxMBperSecTwoResolutionsNoScalability), true);
  // 0x29: u16
  if (data?.wMaxMBperSecThreeResolutionsNoScalability !== undefined) view.setUint16(41, Number(data.wMaxMBperSecThreeResolutionsNoScalability), true);
  // 0x2b: u16
  if (data?.wMaxMBperSecFourResolutionsNoScalability !== undefined) view.setUint16(43, Number(data.wMaxMBperSecFourResolutionsNoScalability), true);
  // 0x2d: u16
  if (data?.wMaxMBperSecOneResolutionTemporalScalability !== undefined) view.setUint16(45, Number(data.wMaxMBperSecOneResolutionTemporalScalability), true);
  // 0x2f: u16
  if (data?.wMaxMBperSecTwoResolutionsTemporalScalablility !== undefined) view.setUint16(47, Number(data.wMaxMBperSecTwoResolutionsTemporalScalablility), true);
  // 0x31: u16
  if (data?.wMaxMBperSecThreeResolutionsTemporalScalability !== undefined) view.setUint16(49, Number(data.wMaxMBperSecThreeResolutionsTemporalScalability), true);
  // 0x33: u16
  if (data?.wMaxMBperSecFourResolutionsTemporalScalability !== undefined) view.setUint16(51, Number(data.wMaxMBperSecFourResolutionsTemporalScalability), true);
  // 0x35: u16
  if (data?.wMaxMBperSecOneResolutionTemporalQualityScalability !== undefined) view.setUint16(53, Number(data.wMaxMBperSecOneResolutionTemporalQualityScalability), true);
  // 0x37: u16
  if (data?.wMaxMBperSecTwoResolutionsTemporalQualityScalability !== undefined) view.setUint16(55, Number(data.wMaxMBperSecTwoResolutionsTemporalQualityScalability), true);
  // 0x39: u16
  if (data?.wMaxMBperSecThreeResolutionsTemporalQualityScalablity !== undefined) view.setUint16(57, Number(data.wMaxMBperSecThreeResolutionsTemporalQualityScalablity), true);
  // 0x3b: u16
  if (data?.wMaxMBperSecFourResolutionsTemporalQualityScalability !== undefined) view.setUint16(59, Number(data.wMaxMBperSecFourResolutionsTemporalQualityScalability), true);
  // 0x3d: u16
  if (data?.wMaxMBperSecOneResolutionTemporalSpatialScalability !== undefined) view.setUint16(61, Number(data.wMaxMBperSecOneResolutionTemporalSpatialScalability), true);
  // 0x3f: u16
  if (data?.wMaxMBperSecTwoResolutionsTemporalSpatialScalability !== undefined) view.setUint16(63, Number(data.wMaxMBperSecTwoResolutionsTemporalSpatialScalability), true);
  // 0x41: u16
  if (data?.wMaxMBperSecThreeResolutionsTemporalSpatialScalablity !== undefined) view.setUint16(65, Number(data.wMaxMBperSecThreeResolutionsTemporalSpatialScalablity), true);
  // 0x43: u16
  if (data?.wMaxMBperSecFourResolutionsTemporalSpatialScalability !== undefined) view.setUint16(67, Number(data.wMaxMBperSecFourResolutionsTemporalSpatialScalability), true);
  // 0x45: u16
  if (data?.wMaxMBperSecOneResolutionFullScalability !== undefined) view.setUint16(69, Number(data.wMaxMBperSecOneResolutionFullScalability), true);
  // 0x47: u16
  if (data?.wMaxMBperSecTwoResolutionsFullScalability !== undefined) view.setUint16(71, Number(data.wMaxMBperSecTwoResolutionsFullScalability), true);
  // 0x49: u16
  if (data?.wMaxMBperSecThreeResolutionsFullScalability !== undefined) view.setUint16(73, Number(data.wMaxMBperSecThreeResolutionsFullScalability), true);
  // 0x4b: u16
  if (data?.wMaxMBperSecFourResolutionsFullScalability !== undefined) view.setUint16(75, Number(data.wMaxMBperSecFourResolutionsFullScalability), true);
  // 0x4d: pad3
  return buf;
}

/**
 * Windows.Win32.Media.KernelStreaming.KS_MPEGAUDIOINFO (size: 16)
 */
export interface KS_MPEGAUDIOINFO {
  /** u32 */
  dwFlags: number;
  /** u32 */
  dwReserved1: number;
  /** u32 */
  dwReserved2: number;
  /** u32 */
  dwReserved3: number;
}

export const sizeofKS_MPEGAUDIOINFO = 16;

export function allocKS_MPEGAUDIOINFO(data?: Partial<KS_MPEGAUDIOINFO>): Uint8Array {
  const buf = new Uint8Array(sizeofKS_MPEGAUDIOINFO);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.dwFlags !== undefined) view.setUint32(0, Number(data.dwFlags), true);
  // 0x04: u32
  if (data?.dwReserved1 !== undefined) view.setUint32(4, Number(data.dwReserved1), true);
  // 0x08: u32
  if (data?.dwReserved2 !== undefined) view.setUint32(8, Number(data.dwReserved2), true);
  // 0x0c: u32
  if (data?.dwReserved3 !== undefined) view.setUint32(12, Number(data.dwReserved3), true);
  return buf;
}

/**
 * Windows.Win32.Media.KernelStreaming.KS_DATAFORMAT_VIDEOINFOHEADER (size: 16)
 */
export interface KS_DATAFORMAT_VIDEOINFOHEADER {
  /** Windows.Win32.Media.KernelStreaming.KSDATAFORMAT */
  DataFormat: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Media.KernelStreaming.KS_VIDEOINFOHEADER */
  VideoInfoHeader: Uint8Array | Deno.PointerValue | null;
}

export const sizeofKS_DATAFORMAT_VIDEOINFOHEADER = 16;

export function allocKS_DATAFORMAT_VIDEOINFOHEADER(data?: Partial<KS_DATAFORMAT_VIDEOINFOHEADER>): Uint8Array {
  const buf = new Uint8Array(sizeofKS_DATAFORMAT_VIDEOINFOHEADER);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.DataFormat !== undefined) view.setBigUint64(0, data.DataFormat === null ? 0n : BigInt(util.toPointer(data.DataFormat)), true);
  // 0x08: pointer
  if (data?.VideoInfoHeader !== undefined) view.setBigUint64(8, data.VideoInfoHeader === null ? 0n : BigInt(util.toPointer(data.VideoInfoHeader)), true);
  return buf;
}

/**
 * Windows.Win32.Media.KernelStreaming.KS_DATAFORMAT_VIDEOINFOHEADER2 (size: 16)
 */
export interface KS_DATAFORMAT_VIDEOINFOHEADER2 {
  /** Windows.Win32.Media.KernelStreaming.KSDATAFORMAT */
  DataFormat: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Media.KernelStreaming.KS_VIDEOINFOHEADER2 */
  VideoInfoHeader2: Uint8Array | Deno.PointerValue | null;
}

export const sizeofKS_DATAFORMAT_VIDEOINFOHEADER2 = 16;

export function allocKS_DATAFORMAT_VIDEOINFOHEADER2(data?: Partial<KS_DATAFORMAT_VIDEOINFOHEADER2>): Uint8Array {
  const buf = new Uint8Array(sizeofKS_DATAFORMAT_VIDEOINFOHEADER2);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.DataFormat !== undefined) view.setBigUint64(0, data.DataFormat === null ? 0n : BigInt(util.toPointer(data.DataFormat)), true);
  // 0x08: pointer
  if (data?.VideoInfoHeader2 !== undefined) view.setBigUint64(8, data.VideoInfoHeader2 === null ? 0n : BigInt(util.toPointer(data.VideoInfoHeader2)), true);
  return buf;
}

/**
 * Windows.Win32.Media.KernelStreaming.KS_DATAFORMAT_MPEGVIDEOINFO2 (size: 16)
 */
export interface KS_DATAFORMAT_MPEGVIDEOINFO2 {
  /** Windows.Win32.Media.KernelStreaming.KSDATAFORMAT */
  DataFormat: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Media.KernelStreaming.KS_MPEGVIDEOINFO2 */
  MpegVideoInfoHeader2: Uint8Array | Deno.PointerValue | null;
}

export const sizeofKS_DATAFORMAT_MPEGVIDEOINFO2 = 16;

export function allocKS_DATAFORMAT_MPEGVIDEOINFO2(data?: Partial<KS_DATAFORMAT_MPEGVIDEOINFO2>): Uint8Array {
  const buf = new Uint8Array(sizeofKS_DATAFORMAT_MPEGVIDEOINFO2);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.DataFormat !== undefined) view.setBigUint64(0, data.DataFormat === null ? 0n : BigInt(util.toPointer(data.DataFormat)), true);
  // 0x08: pointer
  if (data?.MpegVideoInfoHeader2 !== undefined) view.setBigUint64(8, data.MpegVideoInfoHeader2 === null ? 0n : BigInt(util.toPointer(data.MpegVideoInfoHeader2)), true);
  return buf;
}

/**
 * Windows.Win32.Media.KernelStreaming.KS_DATAFORMAT_H264VIDEOINFO (size: 16)
 */
export interface KS_DATAFORMAT_H264VIDEOINFO {
  /** Windows.Win32.Media.KernelStreaming.KSDATAFORMAT */
  DataFormat: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Media.KernelStreaming.KS_H264VIDEOINFO */
  H264VideoInfoHeader: Uint8Array | Deno.PointerValue | null;
}

export const sizeofKS_DATAFORMAT_H264VIDEOINFO = 16;

export function allocKS_DATAFORMAT_H264VIDEOINFO(data?: Partial<KS_DATAFORMAT_H264VIDEOINFO>): Uint8Array {
  const buf = new Uint8Array(sizeofKS_DATAFORMAT_H264VIDEOINFO);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.DataFormat !== undefined) view.setBigUint64(0, data.DataFormat === null ? 0n : BigInt(util.toPointer(data.DataFormat)), true);
  // 0x08: pointer
  if (data?.H264VideoInfoHeader !== undefined) view.setBigUint64(8, data.H264VideoInfoHeader === null ? 0n : BigInt(util.toPointer(data.H264VideoInfoHeader)), true);
  return buf;
}

/**
 * Windows.Win32.Media.KernelStreaming.KS_DATAFORMAT_IMAGEINFO (size: 16)
 */
export interface KS_DATAFORMAT_IMAGEINFO {
  /** Windows.Win32.Media.KernelStreaming.KSDATAFORMAT */
  DataFormat: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Media.KernelStreaming.KS_BITMAPINFOHEADER */
  ImageInfoHeader: Uint8Array | Deno.PointerValue | null;
}

export const sizeofKS_DATAFORMAT_IMAGEINFO = 16;

export function allocKS_DATAFORMAT_IMAGEINFO(data?: Partial<KS_DATAFORMAT_IMAGEINFO>): Uint8Array {
  const buf = new Uint8Array(sizeofKS_DATAFORMAT_IMAGEINFO);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.DataFormat !== undefined) view.setBigUint64(0, data.DataFormat === null ? 0n : BigInt(util.toPointer(data.DataFormat)), true);
  // 0x08: pointer
  if (data?.ImageInfoHeader !== undefined) view.setBigUint64(8, data.ImageInfoHeader === null ? 0n : BigInt(util.toPointer(data.ImageInfoHeader)), true);
  return buf;
}

/**
 * Windows.Win32.Media.KernelStreaming.KS_DATAFORMAT_VIDEOINFO_PALETTE (size: 16)
 */
export interface KS_DATAFORMAT_VIDEOINFO_PALETTE {
  /** Windows.Win32.Media.KernelStreaming.KSDATAFORMAT */
  DataFormat: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Media.KernelStreaming.KS_VIDEOINFO */
  VideoInfo: Uint8Array | Deno.PointerValue | null;
}

export const sizeofKS_DATAFORMAT_VIDEOINFO_PALETTE = 16;

export function allocKS_DATAFORMAT_VIDEOINFO_PALETTE(data?: Partial<KS_DATAFORMAT_VIDEOINFO_PALETTE>): Uint8Array {
  const buf = new Uint8Array(sizeofKS_DATAFORMAT_VIDEOINFO_PALETTE);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.DataFormat !== undefined) view.setBigUint64(0, data.DataFormat === null ? 0n : BigInt(util.toPointer(data.DataFormat)), true);
  // 0x08: pointer
  if (data?.VideoInfo !== undefined) view.setBigUint64(8, data.VideoInfo === null ? 0n : BigInt(util.toPointer(data.VideoInfo)), true);
  return buf;
}

/**
 * Windows.Win32.Media.KernelStreaming.KS_DATAFORMAT_VBIINFOHEADER (size: 16)
 */
export interface KS_DATAFORMAT_VBIINFOHEADER {
  /** Windows.Win32.Media.KernelStreaming.KSDATAFORMAT */
  DataFormat: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Media.KernelStreaming.KS_VBIINFOHEADER */
  VBIInfoHeader: Uint8Array | Deno.PointerValue | null;
}

export const sizeofKS_DATAFORMAT_VBIINFOHEADER = 16;

export function allocKS_DATAFORMAT_VBIINFOHEADER(data?: Partial<KS_DATAFORMAT_VBIINFOHEADER>): Uint8Array {
  const buf = new Uint8Array(sizeofKS_DATAFORMAT_VBIINFOHEADER);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.DataFormat !== undefined) view.setBigUint64(0, data.DataFormat === null ? 0n : BigInt(util.toPointer(data.DataFormat)), true);
  // 0x08: pointer
  if (data?.VBIInfoHeader !== undefined) view.setBigUint64(8, data.VBIInfoHeader === null ? 0n : BigInt(util.toPointer(data.VBIInfoHeader)), true);
  return buf;
}

/**
 * Windows.Win32.Foundation.SIZE (size: 8)
 */
export interface SIZE {
  /** i32 */
  cx: number;
  /** i32 */
  cy: number;
}

export const sizeofSIZE = 8;

export function allocSIZE(data?: Partial<SIZE>): Uint8Array {
  const buf = new Uint8Array(sizeofSIZE);
  const view = new DataView(buf.buffer);
  // 0x00: i32
  if (data?.cx !== undefined) view.setInt32(0, Number(data.cx), true);
  // 0x04: i32
  if (data?.cy !== undefined) view.setInt32(4, Number(data.cy), true);
  return buf;
}

/**
 * Windows.Win32.Media.KernelStreaming.KS_VIDEO_STREAM_CONFIG_CAPS (size: 120)
 */
export interface KS_VIDEO_STREAM_CONFIG_CAPS {
  /** System.Guid */
  guid: Uint8Array | Deno.PointerValue | null;
  /** u32 */
  VideoStandard: number;
  /** Windows.Win32.Foundation.SIZE */
  InputSize: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Foundation.SIZE */
  MinCroppingSize: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Foundation.SIZE */
  MaxCroppingSize: Uint8Array | Deno.PointerValue | null;
  /** i32 */
  CropGranularityX: number;
  /** i32 */
  CropGranularityY: number;
  /** i32 */
  CropAlignX: number;
  /** i32 */
  CropAlignY: number;
  /** Windows.Win32.Foundation.SIZE */
  MinOutputSize: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Foundation.SIZE */
  MaxOutputSize: Uint8Array | Deno.PointerValue | null;
  /** i32 */
  OutputGranularityX: number;
  /** i32 */
  OutputGranularityY: number;
  /** i32 */
  StretchTapsX: number;
  /** i32 */
  StretchTapsY: number;
  /** i32 */
  ShrinkTapsX: number;
  /** i32 */
  ShrinkTapsY: number;
  /** i64 */
  MinFrameInterval: Deno.PointerValue;
  /** i64 */
  MaxFrameInterval: Deno.PointerValue;
  /** i32 */
  MinBitsPerSecond: number;
  /** i32 */
  MaxBitsPerSecond: number;
}

export const sizeofKS_VIDEO_STREAM_CONFIG_CAPS = 120;

export function allocKS_VIDEO_STREAM_CONFIG_CAPS(data?: Partial<KS_VIDEO_STREAM_CONFIG_CAPS>): Uint8Array {
  const buf = new Uint8Array(sizeofKS_VIDEO_STREAM_CONFIG_CAPS);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.guid !== undefined) view.setBigUint64(0, data.guid === null ? 0n : BigInt(util.toPointer(data.guid)), true);
  // 0x08: u32
  if (data?.VideoStandard !== undefined) view.setUint32(8, Number(data.VideoStandard), true);
  // 0x0c: pad4
  // 0x10: pointer
  if (data?.InputSize !== undefined) view.setBigUint64(16, data.InputSize === null ? 0n : BigInt(util.toPointer(data.InputSize)), true);
  // 0x18: pointer
  if (data?.MinCroppingSize !== undefined) view.setBigUint64(24, data.MinCroppingSize === null ? 0n : BigInt(util.toPointer(data.MinCroppingSize)), true);
  // 0x20: pointer
  if (data?.MaxCroppingSize !== undefined) view.setBigUint64(32, data.MaxCroppingSize === null ? 0n : BigInt(util.toPointer(data.MaxCroppingSize)), true);
  // 0x28: i32
  if (data?.CropGranularityX !== undefined) view.setInt32(40, Number(data.CropGranularityX), true);
  // 0x2c: i32
  if (data?.CropGranularityY !== undefined) view.setInt32(44, Number(data.CropGranularityY), true);
  // 0x30: i32
  if (data?.CropAlignX !== undefined) view.setInt32(48, Number(data.CropAlignX), true);
  // 0x34: i32
  if (data?.CropAlignY !== undefined) view.setInt32(52, Number(data.CropAlignY), true);
  // 0x38: pointer
  if (data?.MinOutputSize !== undefined) view.setBigUint64(56, data.MinOutputSize === null ? 0n : BigInt(util.toPointer(data.MinOutputSize)), true);
  // 0x40: pointer
  if (data?.MaxOutputSize !== undefined) view.setBigUint64(64, data.MaxOutputSize === null ? 0n : BigInt(util.toPointer(data.MaxOutputSize)), true);
  // 0x48: i32
  if (data?.OutputGranularityX !== undefined) view.setInt32(72, Number(data.OutputGranularityX), true);
  // 0x4c: i32
  if (data?.OutputGranularityY !== undefined) view.setInt32(76, Number(data.OutputGranularityY), true);
  // 0x50: i32
  if (data?.StretchTapsX !== undefined) view.setInt32(80, Number(data.StretchTapsX), true);
  // 0x54: i32
  if (data?.StretchTapsY !== undefined) view.setInt32(84, Number(data.StretchTapsY), true);
  // 0x58: i32
  if (data?.ShrinkTapsX !== undefined) view.setInt32(88, Number(data.ShrinkTapsX), true);
  // 0x5c: i32
  if (data?.ShrinkTapsY !== undefined) view.setInt32(92, Number(data.ShrinkTapsY), true);
  // 0x60: i64
  if (data?.MinFrameInterval !== undefined) view.setBigInt64(96, BigInt(data.MinFrameInterval), true);
  // 0x68: i64
  if (data?.MaxFrameInterval !== undefined) view.setBigInt64(104, BigInt(data.MaxFrameInterval), true);
  // 0x70: i32
  if (data?.MinBitsPerSecond !== undefined) view.setInt32(112, Number(data.MinBitsPerSecond), true);
  // 0x74: i32
  if (data?.MaxBitsPerSecond !== undefined) view.setInt32(116, Number(data.MaxBitsPerSecond), true);
  return buf;
}

/**
 * Windows.Win32.Media.KernelStreaming.KS_DATARANGE_VIDEO (size: 40)
 */
export interface KS_DATARANGE_VIDEO {
  /** Windows.Win32.Media.KernelStreaming.KSDATAFORMAT */
  DataRange: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Foundation.BOOL */
  bFixedSizeSamples: boolean;
  /** Windows.Win32.Foundation.BOOL */
  bTemporalCompression: boolean;
  /** u32 */
  StreamDescriptionFlags: number;
  /** u32 */
  MemoryAllocationFlags: number;
  /** Windows.Win32.Media.KernelStreaming.KS_VIDEO_STREAM_CONFIG_CAPS */
  ConfigCaps: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Media.KernelStreaming.KS_VIDEOINFOHEADER */
  VideoInfoHeader: Uint8Array | Deno.PointerValue | null;
}

export const sizeofKS_DATARANGE_VIDEO = 40;

export function allocKS_DATARANGE_VIDEO(data?: Partial<KS_DATARANGE_VIDEO>): Uint8Array {
  const buf = new Uint8Array(sizeofKS_DATARANGE_VIDEO);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.DataRange !== undefined) view.setBigUint64(0, data.DataRange === null ? 0n : BigInt(util.toPointer(data.DataRange)), true);
  // 0x08: i32
  if (data?.bFixedSizeSamples !== undefined) view.setInt32(8, Number(data.bFixedSizeSamples), true);
  // 0x0c: i32
  if (data?.bTemporalCompression !== undefined) view.setInt32(12, Number(data.bTemporalCompression), true);
  // 0x10: u32
  if (data?.StreamDescriptionFlags !== undefined) view.setUint32(16, Number(data.StreamDescriptionFlags), true);
  // 0x14: u32
  if (data?.MemoryAllocationFlags !== undefined) view.setUint32(20, Number(data.MemoryAllocationFlags), true);
  // 0x18: pointer
  if (data?.ConfigCaps !== undefined) view.setBigUint64(24, data.ConfigCaps === null ? 0n : BigInt(util.toPointer(data.ConfigCaps)), true);
  // 0x20: pointer
  if (data?.VideoInfoHeader !== undefined) view.setBigUint64(32, data.VideoInfoHeader === null ? 0n : BigInt(util.toPointer(data.VideoInfoHeader)), true);
  return buf;
}

/**
 * Windows.Win32.Media.KernelStreaming.KS_DATARANGE_VIDEO2 (size: 40)
 */
export interface KS_DATARANGE_VIDEO2 {
  /** Windows.Win32.Media.KernelStreaming.KSDATAFORMAT */
  DataRange: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Foundation.BOOL */
  bFixedSizeSamples: boolean;
  /** Windows.Win32.Foundation.BOOL */
  bTemporalCompression: boolean;
  /** u32 */
  StreamDescriptionFlags: number;
  /** u32 */
  MemoryAllocationFlags: number;
  /** Windows.Win32.Media.KernelStreaming.KS_VIDEO_STREAM_CONFIG_CAPS */
  ConfigCaps: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Media.KernelStreaming.KS_VIDEOINFOHEADER2 */
  VideoInfoHeader: Uint8Array | Deno.PointerValue | null;
}

export const sizeofKS_DATARANGE_VIDEO2 = 40;

export function allocKS_DATARANGE_VIDEO2(data?: Partial<KS_DATARANGE_VIDEO2>): Uint8Array {
  const buf = new Uint8Array(sizeofKS_DATARANGE_VIDEO2);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.DataRange !== undefined) view.setBigUint64(0, data.DataRange === null ? 0n : BigInt(util.toPointer(data.DataRange)), true);
  // 0x08: i32
  if (data?.bFixedSizeSamples !== undefined) view.setInt32(8, Number(data.bFixedSizeSamples), true);
  // 0x0c: i32
  if (data?.bTemporalCompression !== undefined) view.setInt32(12, Number(data.bTemporalCompression), true);
  // 0x10: u32
  if (data?.StreamDescriptionFlags !== undefined) view.setUint32(16, Number(data.StreamDescriptionFlags), true);
  // 0x14: u32
  if (data?.MemoryAllocationFlags !== undefined) view.setUint32(20, Number(data.MemoryAllocationFlags), true);
  // 0x18: pointer
  if (data?.ConfigCaps !== undefined) view.setBigUint64(24, data.ConfigCaps === null ? 0n : BigInt(util.toPointer(data.ConfigCaps)), true);
  // 0x20: pointer
  if (data?.VideoInfoHeader !== undefined) view.setBigUint64(32, data.VideoInfoHeader === null ? 0n : BigInt(util.toPointer(data.VideoInfoHeader)), true);
  return buf;
}

/**
 * Windows.Win32.Media.KernelStreaming.KS_DATARANGE_MPEG1_VIDEO (size: 40)
 */
export interface KS_DATARANGE_MPEG1_VIDEO {
  /** Windows.Win32.Media.KernelStreaming.KSDATAFORMAT */
  DataRange: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Foundation.BOOL */
  bFixedSizeSamples: boolean;
  /** Windows.Win32.Foundation.BOOL */
  bTemporalCompression: boolean;
  /** u32 */
  StreamDescriptionFlags: number;
  /** u32 */
  MemoryAllocationFlags: number;
  /** Windows.Win32.Media.KernelStreaming.KS_VIDEO_STREAM_CONFIG_CAPS */
  ConfigCaps: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Media.KernelStreaming.KS_MPEG1VIDEOINFO */
  VideoInfoHeader: Uint8Array | Deno.PointerValue | null;
}

export const sizeofKS_DATARANGE_MPEG1_VIDEO = 40;

export function allocKS_DATARANGE_MPEG1_VIDEO(data?: Partial<KS_DATARANGE_MPEG1_VIDEO>): Uint8Array {
  const buf = new Uint8Array(sizeofKS_DATARANGE_MPEG1_VIDEO);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.DataRange !== undefined) view.setBigUint64(0, data.DataRange === null ? 0n : BigInt(util.toPointer(data.DataRange)), true);
  // 0x08: i32
  if (data?.bFixedSizeSamples !== undefined) view.setInt32(8, Number(data.bFixedSizeSamples), true);
  // 0x0c: i32
  if (data?.bTemporalCompression !== undefined) view.setInt32(12, Number(data.bTemporalCompression), true);
  // 0x10: u32
  if (data?.StreamDescriptionFlags !== undefined) view.setUint32(16, Number(data.StreamDescriptionFlags), true);
  // 0x14: u32
  if (data?.MemoryAllocationFlags !== undefined) view.setUint32(20, Number(data.MemoryAllocationFlags), true);
  // 0x18: pointer
  if (data?.ConfigCaps !== undefined) view.setBigUint64(24, data.ConfigCaps === null ? 0n : BigInt(util.toPointer(data.ConfigCaps)), true);
  // 0x20: pointer
  if (data?.VideoInfoHeader !== undefined) view.setBigUint64(32, data.VideoInfoHeader === null ? 0n : BigInt(util.toPointer(data.VideoInfoHeader)), true);
  return buf;
}

/**
 * Windows.Win32.Media.KernelStreaming.KS_DATARANGE_MPEG2_VIDEO (size: 40)
 */
export interface KS_DATARANGE_MPEG2_VIDEO {
  /** Windows.Win32.Media.KernelStreaming.KSDATAFORMAT */
  DataRange: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Foundation.BOOL */
  bFixedSizeSamples: boolean;
  /** Windows.Win32.Foundation.BOOL */
  bTemporalCompression: boolean;
  /** u32 */
  StreamDescriptionFlags: number;
  /** u32 */
  MemoryAllocationFlags: number;
  /** Windows.Win32.Media.KernelStreaming.KS_VIDEO_STREAM_CONFIG_CAPS */
  ConfigCaps: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Media.KernelStreaming.KS_MPEGVIDEOINFO2 */
  VideoInfoHeader: Uint8Array | Deno.PointerValue | null;
}

export const sizeofKS_DATARANGE_MPEG2_VIDEO = 40;

export function allocKS_DATARANGE_MPEG2_VIDEO(data?: Partial<KS_DATARANGE_MPEG2_VIDEO>): Uint8Array {
  const buf = new Uint8Array(sizeofKS_DATARANGE_MPEG2_VIDEO);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.DataRange !== undefined) view.setBigUint64(0, data.DataRange === null ? 0n : BigInt(util.toPointer(data.DataRange)), true);
  // 0x08: i32
  if (data?.bFixedSizeSamples !== undefined) view.setInt32(8, Number(data.bFixedSizeSamples), true);
  // 0x0c: i32
  if (data?.bTemporalCompression !== undefined) view.setInt32(12, Number(data.bTemporalCompression), true);
  // 0x10: u32
  if (data?.StreamDescriptionFlags !== undefined) view.setUint32(16, Number(data.StreamDescriptionFlags), true);
  // 0x14: u32
  if (data?.MemoryAllocationFlags !== undefined) view.setUint32(20, Number(data.MemoryAllocationFlags), true);
  // 0x18: pointer
  if (data?.ConfigCaps !== undefined) view.setBigUint64(24, data.ConfigCaps === null ? 0n : BigInt(util.toPointer(data.ConfigCaps)), true);
  // 0x20: pointer
  if (data?.VideoInfoHeader !== undefined) view.setBigUint64(32, data.VideoInfoHeader === null ? 0n : BigInt(util.toPointer(data.VideoInfoHeader)), true);
  return buf;
}

/**
 * Windows.Win32.Media.KernelStreaming.KS_DATARANGE_H264_VIDEO (size: 40)
 */
export interface KS_DATARANGE_H264_VIDEO {
  /** Windows.Win32.Media.KernelStreaming.KSDATAFORMAT */
  DataRange: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Foundation.BOOL */
  bFixedSizeSamples: boolean;
  /** Windows.Win32.Foundation.BOOL */
  bTemporalCompression: boolean;
  /** u32 */
  StreamDescriptionFlags: number;
  /** u32 */
  MemoryAllocationFlags: number;
  /** Windows.Win32.Media.KernelStreaming.KS_VIDEO_STREAM_CONFIG_CAPS */
  ConfigCaps: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Media.KernelStreaming.KS_H264VIDEOINFO */
  VideoInfoHeader: Uint8Array | Deno.PointerValue | null;
}

export const sizeofKS_DATARANGE_H264_VIDEO = 40;

export function allocKS_DATARANGE_H264_VIDEO(data?: Partial<KS_DATARANGE_H264_VIDEO>): Uint8Array {
  const buf = new Uint8Array(sizeofKS_DATARANGE_H264_VIDEO);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.DataRange !== undefined) view.setBigUint64(0, data.DataRange === null ? 0n : BigInt(util.toPointer(data.DataRange)), true);
  // 0x08: i32
  if (data?.bFixedSizeSamples !== undefined) view.setInt32(8, Number(data.bFixedSizeSamples), true);
  // 0x0c: i32
  if (data?.bTemporalCompression !== undefined) view.setInt32(12, Number(data.bTemporalCompression), true);
  // 0x10: u32
  if (data?.StreamDescriptionFlags !== undefined) view.setUint32(16, Number(data.StreamDescriptionFlags), true);
  // 0x14: u32
  if (data?.MemoryAllocationFlags !== undefined) view.setUint32(20, Number(data.MemoryAllocationFlags), true);
  // 0x18: pointer
  if (data?.ConfigCaps !== undefined) view.setBigUint64(24, data.ConfigCaps === null ? 0n : BigInt(util.toPointer(data.ConfigCaps)), true);
  // 0x20: pointer
  if (data?.VideoInfoHeader !== undefined) view.setBigUint64(32, data.VideoInfoHeader === null ? 0n : BigInt(util.toPointer(data.VideoInfoHeader)), true);
  return buf;
}

/**
 * Windows.Win32.Media.KernelStreaming.KS_DATARANGE_IMAGE (size: 24)
 */
export interface KS_DATARANGE_IMAGE {
  /** Windows.Win32.Media.KernelStreaming.KSDATAFORMAT */
  DataRange: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Media.KernelStreaming.KS_VIDEO_STREAM_CONFIG_CAPS */
  ConfigCaps: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Media.KernelStreaming.KS_BITMAPINFOHEADER */
  ImageInfoHeader: Uint8Array | Deno.PointerValue | null;
}

export const sizeofKS_DATARANGE_IMAGE = 24;

export function allocKS_DATARANGE_IMAGE(data?: Partial<KS_DATARANGE_IMAGE>): Uint8Array {
  const buf = new Uint8Array(sizeofKS_DATARANGE_IMAGE);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.DataRange !== undefined) view.setBigUint64(0, data.DataRange === null ? 0n : BigInt(util.toPointer(data.DataRange)), true);
  // 0x08: pointer
  if (data?.ConfigCaps !== undefined) view.setBigUint64(8, data.ConfigCaps === null ? 0n : BigInt(util.toPointer(data.ConfigCaps)), true);
  // 0x10: pointer
  if (data?.ImageInfoHeader !== undefined) view.setBigUint64(16, data.ImageInfoHeader === null ? 0n : BigInt(util.toPointer(data.ImageInfoHeader)), true);
  return buf;
}

/**
 * Windows.Win32.Media.KernelStreaming.KS_DATARANGE_VIDEO_PALETTE (size: 40)
 */
export interface KS_DATARANGE_VIDEO_PALETTE {
  /** Windows.Win32.Media.KernelStreaming.KSDATAFORMAT */
  DataRange: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Foundation.BOOL */
  bFixedSizeSamples: boolean;
  /** Windows.Win32.Foundation.BOOL */
  bTemporalCompression: boolean;
  /** u32 */
  StreamDescriptionFlags: number;
  /** u32 */
  MemoryAllocationFlags: number;
  /** Windows.Win32.Media.KernelStreaming.KS_VIDEO_STREAM_CONFIG_CAPS */
  ConfigCaps: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Media.KernelStreaming.KS_VIDEOINFO */
  VideoInfo: Uint8Array | Deno.PointerValue | null;
}

export const sizeofKS_DATARANGE_VIDEO_PALETTE = 40;

export function allocKS_DATARANGE_VIDEO_PALETTE(data?: Partial<KS_DATARANGE_VIDEO_PALETTE>): Uint8Array {
  const buf = new Uint8Array(sizeofKS_DATARANGE_VIDEO_PALETTE);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.DataRange !== undefined) view.setBigUint64(0, data.DataRange === null ? 0n : BigInt(util.toPointer(data.DataRange)), true);
  // 0x08: i32
  if (data?.bFixedSizeSamples !== undefined) view.setInt32(8, Number(data.bFixedSizeSamples), true);
  // 0x0c: i32
  if (data?.bTemporalCompression !== undefined) view.setInt32(12, Number(data.bTemporalCompression), true);
  // 0x10: u32
  if (data?.StreamDescriptionFlags !== undefined) view.setUint32(16, Number(data.StreamDescriptionFlags), true);
  // 0x14: u32
  if (data?.MemoryAllocationFlags !== undefined) view.setUint32(20, Number(data.MemoryAllocationFlags), true);
  // 0x18: pointer
  if (data?.ConfigCaps !== undefined) view.setBigUint64(24, data.ConfigCaps === null ? 0n : BigInt(util.toPointer(data.ConfigCaps)), true);
  // 0x20: pointer
  if (data?.VideoInfo !== undefined) view.setBigUint64(32, data.VideoInfo === null ? 0n : BigInt(util.toPointer(data.VideoInfo)), true);
  return buf;
}

/**
 * Windows.Win32.Media.KernelStreaming.KS_DATARANGE_VIDEO_VBI (size: 40)
 */
export interface KS_DATARANGE_VIDEO_VBI {
  /** Windows.Win32.Media.KernelStreaming.KSDATAFORMAT */
  DataRange: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Foundation.BOOL */
  bFixedSizeSamples: boolean;
  /** Windows.Win32.Foundation.BOOL */
  bTemporalCompression: boolean;
  /** u32 */
  StreamDescriptionFlags: number;
  /** u32 */
  MemoryAllocationFlags: number;
  /** Windows.Win32.Media.KernelStreaming.KS_VIDEO_STREAM_CONFIG_CAPS */
  ConfigCaps: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Media.KernelStreaming.KS_VBIINFOHEADER */
  VBIInfoHeader: Uint8Array | Deno.PointerValue | null;
}

export const sizeofKS_DATARANGE_VIDEO_VBI = 40;

export function allocKS_DATARANGE_VIDEO_VBI(data?: Partial<KS_DATARANGE_VIDEO_VBI>): Uint8Array {
  const buf = new Uint8Array(sizeofKS_DATARANGE_VIDEO_VBI);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.DataRange !== undefined) view.setBigUint64(0, data.DataRange === null ? 0n : BigInt(util.toPointer(data.DataRange)), true);
  // 0x08: i32
  if (data?.bFixedSizeSamples !== undefined) view.setInt32(8, Number(data.bFixedSizeSamples), true);
  // 0x0c: i32
  if (data?.bTemporalCompression !== undefined) view.setInt32(12, Number(data.bTemporalCompression), true);
  // 0x10: u32
  if (data?.StreamDescriptionFlags !== undefined) view.setUint32(16, Number(data.StreamDescriptionFlags), true);
  // 0x14: u32
  if (data?.MemoryAllocationFlags !== undefined) view.setUint32(20, Number(data.MemoryAllocationFlags), true);
  // 0x18: pointer
  if (data?.ConfigCaps !== undefined) view.setBigUint64(24, data.ConfigCaps === null ? 0n : BigInt(util.toPointer(data.ConfigCaps)), true);
  // 0x20: pointer
  if (data?.VBIInfoHeader !== undefined) view.setBigUint64(32, data.VBIInfoHeader === null ? 0n : BigInt(util.toPointer(data.VBIInfoHeader)), true);
  return buf;
}

/**
 * Windows.Win32.Media.KernelStreaming.KS_DATARANGE_ANALOGVIDEO (size: 16)
 */
export interface KS_DATARANGE_ANALOGVIDEO {
  /** Windows.Win32.Media.KernelStreaming.KSDATAFORMAT */
  DataRange: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Media.KernelStreaming.KS_ANALOGVIDEOINFO */
  AnalogVideoInfo: Uint8Array | Deno.PointerValue | null;
}

export const sizeofKS_DATARANGE_ANALOGVIDEO = 16;

export function allocKS_DATARANGE_ANALOGVIDEO(data?: Partial<KS_DATARANGE_ANALOGVIDEO>): Uint8Array {
  const buf = new Uint8Array(sizeofKS_DATARANGE_ANALOGVIDEO);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.DataRange !== undefined) view.setBigUint64(0, data.DataRange === null ? 0n : BigInt(util.toPointer(data.DataRange)), true);
  // 0x08: pointer
  if (data?.AnalogVideoInfo !== undefined) view.setBigUint64(8, data.AnalogVideoInfo === null ? 0n : BigInt(util.toPointer(data.AnalogVideoInfo)), true);
  return buf;
}

/**
 * Windows.Win32.Media.KernelStreaming.VBICAP_PROPERTIES_PROTECTION_S (size: 16)
 */
export interface VBICAP_PROPERTIES_PROTECTION_S {
  /** Windows.Win32.Media.KernelStreaming.KSIDENTIFIER */
  Property: Uint8Array | Deno.PointerValue | null;
  /** u32 */
  StreamIndex: number;
  /** u32 */
  Status: number;
}

export const sizeofVBICAP_PROPERTIES_PROTECTION_S = 16;

export function allocVBICAP_PROPERTIES_PROTECTION_S(data?: Partial<VBICAP_PROPERTIES_PROTECTION_S>): Uint8Array {
  const buf = new Uint8Array(sizeofVBICAP_PROPERTIES_PROTECTION_S);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.Property !== undefined) view.setBigUint64(0, data.Property === null ? 0n : BigInt(util.toPointer(data.Property)), true);
  // 0x08: u32
  if (data?.StreamIndex !== undefined) view.setUint32(8, Number(data.StreamIndex), true);
  // 0x0c: u32
  if (data?.Status !== undefined) view.setUint32(12, Number(data.Status), true);
  return buf;
}

/**
 * Windows.Win32.Media.KernelStreaming.NABTSFEC_BUFFER (size: 16)
 */
export interface NABTSFEC_BUFFER {
  /** u32 */
  dataSize: number;
  /** u16 */
  groupID: number;
  /** u16 */
  Reserved: number;
  /** array */
  data: Deno.PointerValue | null;
}

export const sizeofNABTSFEC_BUFFER = 16;

export function allocNABTSFEC_BUFFER(data?: Partial<NABTSFEC_BUFFER>): Uint8Array {
  const buf = new Uint8Array(sizeofNABTSFEC_BUFFER);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.dataSize !== undefined) view.setUint32(0, Number(data.dataSize), true);
  // 0x04: u16
  if (data?.groupID !== undefined) view.setUint16(4, Number(data.groupID), true);
  // 0x06: u16
  if (data?.Reserved !== undefined) view.setUint16(6, Number(data.Reserved), true);
  // 0x08: pointer
  if (data?.data !== undefined) view.setBigUint64(8, data.data === null ? 0n : BigInt(util.toPointer(data.data)), true);
  return buf;
}

/**
 * Windows.Win32.Media.KernelStreaming.VBICODECFILTERING_SCANLINES (size: 8)
 */
export interface VBICODECFILTERING_SCANLINES {
  /** array */
  DwordBitArray: Deno.PointerValue | null;
}

export const sizeofVBICODECFILTERING_SCANLINES = 8;

export function allocVBICODECFILTERING_SCANLINES(data?: Partial<VBICODECFILTERING_SCANLINES>): Uint8Array {
  const buf = new Uint8Array(sizeofVBICODECFILTERING_SCANLINES);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.DwordBitArray !== undefined) view.setBigUint64(0, data.DwordBitArray === null ? 0n : BigInt(util.toPointer(data.DwordBitArray)), true);
  return buf;
}

/**
 * Windows.Win32.Media.KernelStreaming.VBICODECFILTERING_NABTS_SUBSTREAMS (size: 8)
 */
export interface VBICODECFILTERING_NABTS_SUBSTREAMS {
  /** array */
  SubstreamMask: Deno.PointerValue | null;
}

export const sizeofVBICODECFILTERING_NABTS_SUBSTREAMS = 8;

export function allocVBICODECFILTERING_NABTS_SUBSTREAMS(data?: Partial<VBICODECFILTERING_NABTS_SUBSTREAMS>): Uint8Array {
  const buf = new Uint8Array(sizeofVBICODECFILTERING_NABTS_SUBSTREAMS);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.SubstreamMask !== undefined) view.setBigUint64(0, data.SubstreamMask === null ? 0n : BigInt(util.toPointer(data.SubstreamMask)), true);
  return buf;
}

/**
 * Windows.Win32.Media.KernelStreaming.VBICODECFILTERING_CC_SUBSTREAMS (size: 8)
 */
export interface VBICODECFILTERING_CC_SUBSTREAMS {
  /** u32 */
  SubstreamMask: number;
}

export const sizeofVBICODECFILTERING_CC_SUBSTREAMS = 8;

export function allocVBICODECFILTERING_CC_SUBSTREAMS(data?: Partial<VBICODECFILTERING_CC_SUBSTREAMS>): Uint8Array {
  const buf = new Uint8Array(sizeofVBICODECFILTERING_CC_SUBSTREAMS);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.SubstreamMask !== undefined) view.setUint32(0, Number(data.SubstreamMask), true);
  // 0x04: pad4
  return buf;
}

/**
 * Windows.Win32.Media.KernelStreaming.CC_BYTE_PAIR (size: 16)
 */
export interface CC_BYTE_PAIR {
  /** array */
  Decoded: Deno.PointerValue | null;
  /** u16 */
  Reserved: number;
}

export const sizeofCC_BYTE_PAIR = 16;

export function allocCC_BYTE_PAIR(data?: Partial<CC_BYTE_PAIR>): Uint8Array {
  const buf = new Uint8Array(sizeofCC_BYTE_PAIR);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.Decoded !== undefined) view.setBigUint64(0, data.Decoded === null ? 0n : BigInt(util.toPointer(data.Decoded)), true);
  // 0x08: u16
  if (data?.Reserved !== undefined) view.setUint16(8, Number(data.Reserved), true);
  // 0x0a: pad6
  return buf;
}

/**
 * Windows.Win32.Media.KernelStreaming.CC_HW_FIELD (size: 32)
 */
export interface CC_HW_FIELD {
  /** Windows.Win32.Media.KernelStreaming.VBICODECFILTERING_SCANLINES */
  ScanlinesRequested: Uint8Array | Deno.PointerValue | null;
  /** u32 */
  fieldFlags: number;
  /** i64 */
  PictureNumber: Deno.PointerValue;
  /** array */
  Lines: Deno.PointerValue | null;
}

export const sizeofCC_HW_FIELD = 32;

export function allocCC_HW_FIELD(data?: Partial<CC_HW_FIELD>): Uint8Array {
  const buf = new Uint8Array(sizeofCC_HW_FIELD);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.ScanlinesRequested !== undefined) view.setBigUint64(0, data.ScanlinesRequested === null ? 0n : BigInt(util.toPointer(data.ScanlinesRequested)), true);
  // 0x08: u32
  if (data?.fieldFlags !== undefined) view.setUint32(8, Number(data.fieldFlags), true);
  // 0x0c: pad4
  // 0x10: i64
  if (data?.PictureNumber !== undefined) view.setBigInt64(16, BigInt(data.PictureNumber), true);
  // 0x18: pointer
  if (data?.Lines !== undefined) view.setBigUint64(24, data.Lines === null ? 0n : BigInt(util.toPointer(data.Lines)), true);
  return buf;
}

/**
 * Windows.Win32.Media.KernelStreaming.NABTS_BUFFER_LINE (size: 16)
 */
export interface NABTS_BUFFER_LINE {
  /** u8 */
  Confidence: number;
  /** array */
  Bytes: Deno.PointerValue | null;
}

export const sizeofNABTS_BUFFER_LINE = 16;

export function allocNABTS_BUFFER_LINE(data?: Partial<NABTS_BUFFER_LINE>): Uint8Array {
  const buf = new Uint8Array(sizeofNABTS_BUFFER_LINE);
  const view = new DataView(buf.buffer);
  // 0x00: u8
  if (data?.Confidence !== undefined) view.setUint8(0, Number(data.Confidence));
  // 0x01: pad7
  // 0x08: pointer
  if (data?.Bytes !== undefined) view.setBigUint64(8, data.Bytes === null ? 0n : BigInt(util.toPointer(data.Bytes)), true);
  return buf;
}

/**
 * Windows.Win32.Media.KernelStreaming.NABTS_BUFFER (size: 24)
 */
export interface NABTS_BUFFER {
  /** Windows.Win32.Media.KernelStreaming.VBICODECFILTERING_SCANLINES */
  ScanlinesRequested: Uint8Array | Deno.PointerValue | null;
  /** i64 */
  PictureNumber: Deno.PointerValue;
  /** array */
  NabtsLines: Deno.PointerValue | null;
}

export const sizeofNABTS_BUFFER = 24;

export function allocNABTS_BUFFER(data?: Partial<NABTS_BUFFER>): Uint8Array {
  const buf = new Uint8Array(sizeofNABTS_BUFFER);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.ScanlinesRequested !== undefined) view.setBigUint64(0, data.ScanlinesRequested === null ? 0n : BigInt(util.toPointer(data.ScanlinesRequested)), true);
  // 0x08: i64
  if (data?.PictureNumber !== undefined) view.setBigInt64(8, BigInt(data.PictureNumber), true);
  // 0x10: pointer
  if (data?.NabtsLines !== undefined) view.setBigUint64(16, data.NabtsLines === null ? 0n : BigInt(util.toPointer(data.NabtsLines)), true);
  return buf;
}

/**
 * Windows.Win32.Media.KernelStreaming.WST_BUFFER_LINE (size: 16)
 */
export interface WST_BUFFER_LINE {
  /** u8 */
  Confidence: number;
  /** array */
  Bytes: Deno.PointerValue | null;
}

export const sizeofWST_BUFFER_LINE = 16;

export function allocWST_BUFFER_LINE(data?: Partial<WST_BUFFER_LINE>): Uint8Array {
  const buf = new Uint8Array(sizeofWST_BUFFER_LINE);
  const view = new DataView(buf.buffer);
  // 0x00: u8
  if (data?.Confidence !== undefined) view.setUint8(0, Number(data.Confidence));
  // 0x01: pad7
  // 0x08: pointer
  if (data?.Bytes !== undefined) view.setBigUint64(8, data.Bytes === null ? 0n : BigInt(util.toPointer(data.Bytes)), true);
  return buf;
}

/**
 * Windows.Win32.Media.KernelStreaming.WST_BUFFER (size: 16)
 */
export interface WST_BUFFER {
  /** Windows.Win32.Media.KernelStreaming.VBICODECFILTERING_SCANLINES */
  ScanlinesRequested: Uint8Array | Deno.PointerValue | null;
  /** array */
  WstLines: Deno.PointerValue | null;
}

export const sizeofWST_BUFFER = 16;

export function allocWST_BUFFER(data?: Partial<WST_BUFFER>): Uint8Array {
  const buf = new Uint8Array(sizeofWST_BUFFER);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.ScanlinesRequested !== undefined) view.setBigUint64(0, data.ScanlinesRequested === null ? 0n : BigInt(util.toPointer(data.ScanlinesRequested)), true);
  // 0x08: pointer
  if (data?.WstLines !== undefined) view.setBigUint64(8, data.WstLines === null ? 0n : BigInt(util.toPointer(data.WstLines)), true);
  return buf;
}

/**
 * Windows.Win32.Media.KernelStreaming.VBICODECFILTERING_STATISTICS_COMMON (size: 56)
 */
export interface VBICODECFILTERING_STATISTICS_COMMON {
  /** u32 */
  InputSRBsProcessed: number;
  /** u32 */
  OutputSRBsProcessed: number;
  /** u32 */
  SRBsIgnored: number;
  /** u32 */
  InputSRBsMissing: number;
  /** u32 */
  OutputSRBsMissing: number;
  /** u32 */
  OutputFailures: number;
  /** u32 */
  InternalErrors: number;
  /** u32 */
  ExternalErrors: number;
  /** u32 */
  InputDiscontinuities: number;
  /** u32 */
  DSPFailures: number;
  /** u32 */
  TvTunerChanges: number;
  /** u32 */
  VBIHeaderChanges: number;
  /** u32 */
  LineConfidenceAvg: number;
  /** u32 */
  BytesOutput: number;
}

export const sizeofVBICODECFILTERING_STATISTICS_COMMON = 56;

export function allocVBICODECFILTERING_STATISTICS_COMMON(data?: Partial<VBICODECFILTERING_STATISTICS_COMMON>): Uint8Array {
  const buf = new Uint8Array(sizeofVBICODECFILTERING_STATISTICS_COMMON);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.InputSRBsProcessed !== undefined) view.setUint32(0, Number(data.InputSRBsProcessed), true);
  // 0x04: u32
  if (data?.OutputSRBsProcessed !== undefined) view.setUint32(4, Number(data.OutputSRBsProcessed), true);
  // 0x08: u32
  if (data?.SRBsIgnored !== undefined) view.setUint32(8, Number(data.SRBsIgnored), true);
  // 0x0c: u32
  if (data?.InputSRBsMissing !== undefined) view.setUint32(12, Number(data.InputSRBsMissing), true);
  // 0x10: u32
  if (data?.OutputSRBsMissing !== undefined) view.setUint32(16, Number(data.OutputSRBsMissing), true);
  // 0x14: u32
  if (data?.OutputFailures !== undefined) view.setUint32(20, Number(data.OutputFailures), true);
  // 0x18: u32
  if (data?.InternalErrors !== undefined) view.setUint32(24, Number(data.InternalErrors), true);
  // 0x1c: u32
  if (data?.ExternalErrors !== undefined) view.setUint32(28, Number(data.ExternalErrors), true);
  // 0x20: u32
  if (data?.InputDiscontinuities !== undefined) view.setUint32(32, Number(data.InputDiscontinuities), true);
  // 0x24: u32
  if (data?.DSPFailures !== undefined) view.setUint32(36, Number(data.DSPFailures), true);
  // 0x28: u32
  if (data?.TvTunerChanges !== undefined) view.setUint32(40, Number(data.TvTunerChanges), true);
  // 0x2c: u32
  if (data?.VBIHeaderChanges !== undefined) view.setUint32(44, Number(data.VBIHeaderChanges), true);
  // 0x30: u32
  if (data?.LineConfidenceAvg !== undefined) view.setUint32(48, Number(data.LineConfidenceAvg), true);
  // 0x34: u32
  if (data?.BytesOutput !== undefined) view.setUint32(52, Number(data.BytesOutput), true);
  return buf;
}

/**
 * Windows.Win32.Media.KernelStreaming.VBICODECFILTERING_STATISTICS_COMMON_PIN (size: 32)
 */
export interface VBICODECFILTERING_STATISTICS_COMMON_PIN {
  /** u32 */
  SRBsProcessed: number;
  /** u32 */
  SRBsIgnored: number;
  /** u32 */
  SRBsMissing: number;
  /** u32 */
  InternalErrors: number;
  /** u32 */
  ExternalErrors: number;
  /** u32 */
  Discontinuities: number;
  /** u32 */
  LineConfidenceAvg: number;
  /** u32 */
  BytesOutput: number;
}

export const sizeofVBICODECFILTERING_STATISTICS_COMMON_PIN = 32;

export function allocVBICODECFILTERING_STATISTICS_COMMON_PIN(data?: Partial<VBICODECFILTERING_STATISTICS_COMMON_PIN>): Uint8Array {
  const buf = new Uint8Array(sizeofVBICODECFILTERING_STATISTICS_COMMON_PIN);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.SRBsProcessed !== undefined) view.setUint32(0, Number(data.SRBsProcessed), true);
  // 0x04: u32
  if (data?.SRBsIgnored !== undefined) view.setUint32(4, Number(data.SRBsIgnored), true);
  // 0x08: u32
  if (data?.SRBsMissing !== undefined) view.setUint32(8, Number(data.SRBsMissing), true);
  // 0x0c: u32
  if (data?.InternalErrors !== undefined) view.setUint32(12, Number(data.InternalErrors), true);
  // 0x10: u32
  if (data?.ExternalErrors !== undefined) view.setUint32(16, Number(data.ExternalErrors), true);
  // 0x14: u32
  if (data?.Discontinuities !== undefined) view.setUint32(20, Number(data.Discontinuities), true);
  // 0x18: u32
  if (data?.LineConfidenceAvg !== undefined) view.setUint32(24, Number(data.LineConfidenceAvg), true);
  // 0x1c: u32
  if (data?.BytesOutput !== undefined) view.setUint32(28, Number(data.BytesOutput), true);
  return buf;
}

/**
 * Windows.Win32.Media.KernelStreaming.VBICODECFILTERING_STATISTICS_NABTS (size: 40)
 */
export interface VBICODECFILTERING_STATISTICS_NABTS {
  /** Windows.Win32.Media.KernelStreaming.VBICODECFILTERING_STATISTICS_COMMON */
  Common: Uint8Array | Deno.PointerValue | null;
  /** u32 */
  FECBundleBadLines: number;
  /** u32 */
  FECQueueOverflows: number;
  /** u32 */
  FECCorrectedLines: number;
  /** u32 */
  FECUncorrectableLines: number;
  /** u32 */
  BundlesProcessed: number;
  /** u32 */
  BundlesSent2IP: number;
  /** u32 */
  FilteredLines: number;
}

export const sizeofVBICODECFILTERING_STATISTICS_NABTS = 40;

export function allocVBICODECFILTERING_STATISTICS_NABTS(data?: Partial<VBICODECFILTERING_STATISTICS_NABTS>): Uint8Array {
  const buf = new Uint8Array(sizeofVBICODECFILTERING_STATISTICS_NABTS);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.Common !== undefined) view.setBigUint64(0, data.Common === null ? 0n : BigInt(util.toPointer(data.Common)), true);
  // 0x08: u32
  if (data?.FECBundleBadLines !== undefined) view.setUint32(8, Number(data.FECBundleBadLines), true);
  // 0x0c: u32
  if (data?.FECQueueOverflows !== undefined) view.setUint32(12, Number(data.FECQueueOverflows), true);
  // 0x10: u32
  if (data?.FECCorrectedLines !== undefined) view.setUint32(16, Number(data.FECCorrectedLines), true);
  // 0x14: u32
  if (data?.FECUncorrectableLines !== undefined) view.setUint32(20, Number(data.FECUncorrectableLines), true);
  // 0x18: u32
  if (data?.BundlesProcessed !== undefined) view.setUint32(24, Number(data.BundlesProcessed), true);
  // 0x1c: u32
  if (data?.BundlesSent2IP !== undefined) view.setUint32(28, Number(data.BundlesSent2IP), true);
  // 0x20: u32
  if (data?.FilteredLines !== undefined) view.setUint32(32, Number(data.FilteredLines), true);
  // 0x24: pad4
  return buf;
}

/**
 * Windows.Win32.Media.KernelStreaming.VBICODECFILTERING_STATISTICS_NABTS_PIN (size: 8)
 */
export interface VBICODECFILTERING_STATISTICS_NABTS_PIN {
  /** Windows.Win32.Media.KernelStreaming.VBICODECFILTERING_STATISTICS_COMMON_PIN */
  Common: Uint8Array | Deno.PointerValue | null;
}

export const sizeofVBICODECFILTERING_STATISTICS_NABTS_PIN = 8;

export function allocVBICODECFILTERING_STATISTICS_NABTS_PIN(data?: Partial<VBICODECFILTERING_STATISTICS_NABTS_PIN>): Uint8Array {
  const buf = new Uint8Array(sizeofVBICODECFILTERING_STATISTICS_NABTS_PIN);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.Common !== undefined) view.setBigUint64(0, data.Common === null ? 0n : BigInt(util.toPointer(data.Common)), true);
  return buf;
}

/**
 * Windows.Win32.Media.KernelStreaming.VBICODECFILTERING_STATISTICS_CC (size: 8)
 */
export interface VBICODECFILTERING_STATISTICS_CC {
  /** Windows.Win32.Media.KernelStreaming.VBICODECFILTERING_STATISTICS_COMMON */
  Common: Uint8Array | Deno.PointerValue | null;
}

export const sizeofVBICODECFILTERING_STATISTICS_CC = 8;

export function allocVBICODECFILTERING_STATISTICS_CC(data?: Partial<VBICODECFILTERING_STATISTICS_CC>): Uint8Array {
  const buf = new Uint8Array(sizeofVBICODECFILTERING_STATISTICS_CC);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.Common !== undefined) view.setBigUint64(0, data.Common === null ? 0n : BigInt(util.toPointer(data.Common)), true);
  return buf;
}

/**
 * Windows.Win32.Media.KernelStreaming.VBICODECFILTERING_STATISTICS_CC_PIN (size: 8)
 */
export interface VBICODECFILTERING_STATISTICS_CC_PIN {
  /** Windows.Win32.Media.KernelStreaming.VBICODECFILTERING_STATISTICS_COMMON_PIN */
  Common: Uint8Array | Deno.PointerValue | null;
}

export const sizeofVBICODECFILTERING_STATISTICS_CC_PIN = 8;

export function allocVBICODECFILTERING_STATISTICS_CC_PIN(data?: Partial<VBICODECFILTERING_STATISTICS_CC_PIN>): Uint8Array {
  const buf = new Uint8Array(sizeofVBICODECFILTERING_STATISTICS_CC_PIN);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.Common !== undefined) view.setBigUint64(0, data.Common === null ? 0n : BigInt(util.toPointer(data.Common)), true);
  return buf;
}

/**
 * Windows.Win32.Media.KernelStreaming.VBICODECFILTERING_STATISTICS_TELETEXT (size: 8)
 */
export interface VBICODECFILTERING_STATISTICS_TELETEXT {
  /** Windows.Win32.Media.KernelStreaming.VBICODECFILTERING_STATISTICS_COMMON */
  Common: Uint8Array | Deno.PointerValue | null;
}

export const sizeofVBICODECFILTERING_STATISTICS_TELETEXT = 8;

export function allocVBICODECFILTERING_STATISTICS_TELETEXT(data?: Partial<VBICODECFILTERING_STATISTICS_TELETEXT>): Uint8Array {
  const buf = new Uint8Array(sizeofVBICODECFILTERING_STATISTICS_TELETEXT);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.Common !== undefined) view.setBigUint64(0, data.Common === null ? 0n : BigInt(util.toPointer(data.Common)), true);
  return buf;
}

/**
 * Windows.Win32.Media.KernelStreaming.VBICODECFILTERING_STATISTICS_TELETEXT_PIN (size: 8)
 */
export interface VBICODECFILTERING_STATISTICS_TELETEXT_PIN {
  /** Windows.Win32.Media.KernelStreaming.VBICODECFILTERING_STATISTICS_COMMON_PIN */
  Common: Uint8Array | Deno.PointerValue | null;
}

export const sizeofVBICODECFILTERING_STATISTICS_TELETEXT_PIN = 8;

export function allocVBICODECFILTERING_STATISTICS_TELETEXT_PIN(data?: Partial<VBICODECFILTERING_STATISTICS_TELETEXT_PIN>): Uint8Array {
  const buf = new Uint8Array(sizeofVBICODECFILTERING_STATISTICS_TELETEXT_PIN);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.Common !== undefined) view.setBigUint64(0, data.Common === null ? 0n : BigInt(util.toPointer(data.Common)), true);
  return buf;
}

/**
 * Windows.Win32.Media.KernelStreaming.KSPROPERTY_VBICODECFILTERING_SCANLINES_S (size: 16)
 */
export interface KSPROPERTY_VBICODECFILTERING_SCANLINES_S {
  /** Windows.Win32.Media.KernelStreaming.KSIDENTIFIER */
  Property: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Media.KernelStreaming.VBICODECFILTERING_SCANLINES */
  Scanlines: Uint8Array | Deno.PointerValue | null;
}

export const sizeofKSPROPERTY_VBICODECFILTERING_SCANLINES_S = 16;

export function allocKSPROPERTY_VBICODECFILTERING_SCANLINES_S(data?: Partial<KSPROPERTY_VBICODECFILTERING_SCANLINES_S>): Uint8Array {
  const buf = new Uint8Array(sizeofKSPROPERTY_VBICODECFILTERING_SCANLINES_S);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.Property !== undefined) view.setBigUint64(0, data.Property === null ? 0n : BigInt(util.toPointer(data.Property)), true);
  // 0x08: pointer
  if (data?.Scanlines !== undefined) view.setBigUint64(8, data.Scanlines === null ? 0n : BigInt(util.toPointer(data.Scanlines)), true);
  return buf;
}

/**
 * Windows.Win32.Media.KernelStreaming.KSPROPERTY_VBICODECFILTERING_NABTS_SUBSTREAMS_S (size: 16)
 */
export interface KSPROPERTY_VBICODECFILTERING_NABTS_SUBSTREAMS_S {
  /** Windows.Win32.Media.KernelStreaming.KSIDENTIFIER */
  Property: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Media.KernelStreaming.VBICODECFILTERING_NABTS_SUBSTREAMS */
  Substreams: Uint8Array | Deno.PointerValue | null;
}

export const sizeofKSPROPERTY_VBICODECFILTERING_NABTS_SUBSTREAMS_S = 16;

export function allocKSPROPERTY_VBICODECFILTERING_NABTS_SUBSTREAMS_S(data?: Partial<KSPROPERTY_VBICODECFILTERING_NABTS_SUBSTREAMS_S>): Uint8Array {
  const buf = new Uint8Array(sizeofKSPROPERTY_VBICODECFILTERING_NABTS_SUBSTREAMS_S);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.Property !== undefined) view.setBigUint64(0, data.Property === null ? 0n : BigInt(util.toPointer(data.Property)), true);
  // 0x08: pointer
  if (data?.Substreams !== undefined) view.setBigUint64(8, data.Substreams === null ? 0n : BigInt(util.toPointer(data.Substreams)), true);
  return buf;
}

/**
 * Windows.Win32.Media.KernelStreaming.KSPROPERTY_VBICODECFILTERING_CC_SUBSTREAMS_S (size: 16)
 */
export interface KSPROPERTY_VBICODECFILTERING_CC_SUBSTREAMS_S {
  /** Windows.Win32.Media.KernelStreaming.KSIDENTIFIER */
  Property: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Media.KernelStreaming.VBICODECFILTERING_CC_SUBSTREAMS */
  Substreams: Uint8Array | Deno.PointerValue | null;
}

export const sizeofKSPROPERTY_VBICODECFILTERING_CC_SUBSTREAMS_S = 16;

export function allocKSPROPERTY_VBICODECFILTERING_CC_SUBSTREAMS_S(data?: Partial<KSPROPERTY_VBICODECFILTERING_CC_SUBSTREAMS_S>): Uint8Array {
  const buf = new Uint8Array(sizeofKSPROPERTY_VBICODECFILTERING_CC_SUBSTREAMS_S);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.Property !== undefined) view.setBigUint64(0, data.Property === null ? 0n : BigInt(util.toPointer(data.Property)), true);
  // 0x08: pointer
  if (data?.Substreams !== undefined) view.setBigUint64(8, data.Substreams === null ? 0n : BigInt(util.toPointer(data.Substreams)), true);
  return buf;
}

/**
 * Windows.Win32.Media.KernelStreaming.KSPROPERTY_VBICODECFILTERING_STATISTICS_COMMON_S (size: 16)
 */
export interface KSPROPERTY_VBICODECFILTERING_STATISTICS_COMMON_S {
  /** Windows.Win32.Media.KernelStreaming.KSIDENTIFIER */
  Property: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Media.KernelStreaming.VBICODECFILTERING_STATISTICS_COMMON */
  Statistics: Uint8Array | Deno.PointerValue | null;
}

export const sizeofKSPROPERTY_VBICODECFILTERING_STATISTICS_COMMON_S = 16;

export function allocKSPROPERTY_VBICODECFILTERING_STATISTICS_COMMON_S(data?: Partial<KSPROPERTY_VBICODECFILTERING_STATISTICS_COMMON_S>): Uint8Array {
  const buf = new Uint8Array(sizeofKSPROPERTY_VBICODECFILTERING_STATISTICS_COMMON_S);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.Property !== undefined) view.setBigUint64(0, data.Property === null ? 0n : BigInt(util.toPointer(data.Property)), true);
  // 0x08: pointer
  if (data?.Statistics !== undefined) view.setBigUint64(8, data.Statistics === null ? 0n : BigInt(util.toPointer(data.Statistics)), true);
  return buf;
}

/**
 * Windows.Win32.Media.KernelStreaming.KSPROPERTY_VBICODECFILTERING_STATISTICS_COMMON_PIN_S (size: 16)
 */
export interface KSPROPERTY_VBICODECFILTERING_STATISTICS_COMMON_PIN_S {
  /** Windows.Win32.Media.KernelStreaming.KSIDENTIFIER */
  Property: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Media.KernelStreaming.VBICODECFILTERING_STATISTICS_COMMON_PIN */
  Statistics: Uint8Array | Deno.PointerValue | null;
}

export const sizeofKSPROPERTY_VBICODECFILTERING_STATISTICS_COMMON_PIN_S = 16;

export function allocKSPROPERTY_VBICODECFILTERING_STATISTICS_COMMON_PIN_S(data?: Partial<KSPROPERTY_VBICODECFILTERING_STATISTICS_COMMON_PIN_S>): Uint8Array {
  const buf = new Uint8Array(sizeofKSPROPERTY_VBICODECFILTERING_STATISTICS_COMMON_PIN_S);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.Property !== undefined) view.setBigUint64(0, data.Property === null ? 0n : BigInt(util.toPointer(data.Property)), true);
  // 0x08: pointer
  if (data?.Statistics !== undefined) view.setBigUint64(8, data.Statistics === null ? 0n : BigInt(util.toPointer(data.Statistics)), true);
  return buf;
}

/**
 * Windows.Win32.Media.KernelStreaming.KSPROPERTY_VBICODECFILTERING_STATISTICS_NABTS_S (size: 16)
 */
export interface KSPROPERTY_VBICODECFILTERING_STATISTICS_NABTS_S {
  /** Windows.Win32.Media.KernelStreaming.KSIDENTIFIER */
  Property: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Media.KernelStreaming.VBICODECFILTERING_STATISTICS_NABTS */
  Statistics: Uint8Array | Deno.PointerValue | null;
}

export const sizeofKSPROPERTY_VBICODECFILTERING_STATISTICS_NABTS_S = 16;

export function allocKSPROPERTY_VBICODECFILTERING_STATISTICS_NABTS_S(data?: Partial<KSPROPERTY_VBICODECFILTERING_STATISTICS_NABTS_S>): Uint8Array {
  const buf = new Uint8Array(sizeofKSPROPERTY_VBICODECFILTERING_STATISTICS_NABTS_S);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.Property !== undefined) view.setBigUint64(0, data.Property === null ? 0n : BigInt(util.toPointer(data.Property)), true);
  // 0x08: pointer
  if (data?.Statistics !== undefined) view.setBigUint64(8, data.Statistics === null ? 0n : BigInt(util.toPointer(data.Statistics)), true);
  return buf;
}

/**
 * Windows.Win32.Media.KernelStreaming.KSPROPERTY_VBICODECFILTERING_STATISTICS_NABTS_PIN_S (size: 16)
 */
export interface KSPROPERTY_VBICODECFILTERING_STATISTICS_NABTS_PIN_S {
  /** Windows.Win32.Media.KernelStreaming.KSIDENTIFIER */
  Property: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Media.KernelStreaming.VBICODECFILTERING_STATISTICS_NABTS_PIN */
  Statistics: Uint8Array | Deno.PointerValue | null;
}

export const sizeofKSPROPERTY_VBICODECFILTERING_STATISTICS_NABTS_PIN_S = 16;

export function allocKSPROPERTY_VBICODECFILTERING_STATISTICS_NABTS_PIN_S(data?: Partial<KSPROPERTY_VBICODECFILTERING_STATISTICS_NABTS_PIN_S>): Uint8Array {
  const buf = new Uint8Array(sizeofKSPROPERTY_VBICODECFILTERING_STATISTICS_NABTS_PIN_S);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.Property !== undefined) view.setBigUint64(0, data.Property === null ? 0n : BigInt(util.toPointer(data.Property)), true);
  // 0x08: pointer
  if (data?.Statistics !== undefined) view.setBigUint64(8, data.Statistics === null ? 0n : BigInt(util.toPointer(data.Statistics)), true);
  return buf;
}

/**
 * Windows.Win32.Media.KernelStreaming.KSPROPERTY_VBICODECFILTERING_STATISTICS_CC_S (size: 16)
 */
export interface KSPROPERTY_VBICODECFILTERING_STATISTICS_CC_S {
  /** Windows.Win32.Media.KernelStreaming.KSIDENTIFIER */
  Property: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Media.KernelStreaming.VBICODECFILTERING_STATISTICS_CC */
  Statistics: Uint8Array | Deno.PointerValue | null;
}

export const sizeofKSPROPERTY_VBICODECFILTERING_STATISTICS_CC_S = 16;

export function allocKSPROPERTY_VBICODECFILTERING_STATISTICS_CC_S(data?: Partial<KSPROPERTY_VBICODECFILTERING_STATISTICS_CC_S>): Uint8Array {
  const buf = new Uint8Array(sizeofKSPROPERTY_VBICODECFILTERING_STATISTICS_CC_S);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.Property !== undefined) view.setBigUint64(0, data.Property === null ? 0n : BigInt(util.toPointer(data.Property)), true);
  // 0x08: pointer
  if (data?.Statistics !== undefined) view.setBigUint64(8, data.Statistics === null ? 0n : BigInt(util.toPointer(data.Statistics)), true);
  return buf;
}

/**
 * Windows.Win32.Media.KernelStreaming.KSPROPERTY_VBICODECFILTERING_STATISTICS_CC_PIN_S (size: 16)
 */
export interface KSPROPERTY_VBICODECFILTERING_STATISTICS_CC_PIN_S {
  /** Windows.Win32.Media.KernelStreaming.KSIDENTIFIER */
  Property: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Media.KernelStreaming.VBICODECFILTERING_STATISTICS_CC_PIN */
  Statistics: Uint8Array | Deno.PointerValue | null;
}

export const sizeofKSPROPERTY_VBICODECFILTERING_STATISTICS_CC_PIN_S = 16;

export function allocKSPROPERTY_VBICODECFILTERING_STATISTICS_CC_PIN_S(data?: Partial<KSPROPERTY_VBICODECFILTERING_STATISTICS_CC_PIN_S>): Uint8Array {
  const buf = new Uint8Array(sizeofKSPROPERTY_VBICODECFILTERING_STATISTICS_CC_PIN_S);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.Property !== undefined) view.setBigUint64(0, data.Property === null ? 0n : BigInt(util.toPointer(data.Property)), true);
  // 0x08: pointer
  if (data?.Statistics !== undefined) view.setBigUint64(8, data.Statistics === null ? 0n : BigInt(util.toPointer(data.Statistics)), true);
  return buf;
}

/**
 * Windows.Win32.Media.KernelStreaming.VRAM_SURFACE_INFO (size: 48)
 */
export interface VRAM_SURFACE_INFO {
  /** usize */
  hSurface: Deno.PointerValue;
  /** i64 */
  VramPhysicalAddress: Deno.PointerValue;
  /** u32 */
  cbCaptured: number;
  /** u32 */
  dwWidth: number;
  /** u32 */
  dwHeight: number;
  /** u32 */
  dwLinearSize: number;
  /** i32 */
  lPitch: number;
  /** array */
  ullReserved: Deno.PointerValue | null;
}

export const sizeofVRAM_SURFACE_INFO = 48;

export function allocVRAM_SURFACE_INFO(data?: Partial<VRAM_SURFACE_INFO>): Uint8Array {
  const buf = new Uint8Array(sizeofVRAM_SURFACE_INFO);
  const view = new DataView(buf.buffer);
  // 0x00: usize
  if (data?.hSurface !== undefined) view.setBigUint64(0, BigInt(data.hSurface), true);
  // 0x08: i64
  if (data?.VramPhysicalAddress !== undefined) view.setBigInt64(8, BigInt(data.VramPhysicalAddress), true);
  // 0x10: u32
  if (data?.cbCaptured !== undefined) view.setUint32(16, Number(data.cbCaptured), true);
  // 0x14: u32
  if (data?.dwWidth !== undefined) view.setUint32(20, Number(data.dwWidth), true);
  // 0x18: u32
  if (data?.dwHeight !== undefined) view.setUint32(24, Number(data.dwHeight), true);
  // 0x1c: u32
  if (data?.dwLinearSize !== undefined) view.setUint32(28, Number(data.dwLinearSize), true);
  // 0x20: i32
  if (data?.lPitch !== undefined) view.setInt32(32, Number(data.lPitch), true);
  // 0x24: pad4
  // 0x28: pointer
  if (data?.ullReserved !== undefined) view.setBigUint64(40, data.ullReserved === null ? 0n : BigInt(util.toPointer(data.ullReserved)), true);
  return buf;
}

/**
 * Windows.Win32.Media.KernelStreaming.VRAM_SURFACE_INFO_PROPERTY_S (size: 16)
 */
export interface VRAM_SURFACE_INFO_PROPERTY_S {
  /** Windows.Win32.Media.KernelStreaming.KSIDENTIFIER */
  Property: Uint8Array | Deno.PointerValue | null;
  /** ptr */
  pVramSurfaceInfo: Deno.PointerValue | Uint8Array | null;
}

export const sizeofVRAM_SURFACE_INFO_PROPERTY_S = 16;

export function allocVRAM_SURFACE_INFO_PROPERTY_S(data?: Partial<VRAM_SURFACE_INFO_PROPERTY_S>): Uint8Array {
  const buf = new Uint8Array(sizeofVRAM_SURFACE_INFO_PROPERTY_S);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.Property !== undefined) view.setBigUint64(0, data.Property === null ? 0n : BigInt(util.toPointer(data.Property)), true);
  // 0x08: pointer
  if (data?.pVramSurfaceInfo !== undefined) view.setBigUint64(8, data.pVramSurfaceInfo === null ? 0n : BigInt(util.toPointer(data.pVramSurfaceInfo)), true);
  return buf;
}

/**
 * Windows.Win32.Media.KernelStreaming.SECURE_BUFFER_INFO (size: 24)
 */
export interface SECURE_BUFFER_INFO {
  /** System.Guid */
  guidBufferIdentifier: Uint8Array | Deno.PointerValue | null;
  /** u32 */
  cbBufferSize: number;
  /** u32 */
  cbCaptured: number;
  /** array */
  ullReserved: Deno.PointerValue | null;
}

export const sizeofSECURE_BUFFER_INFO = 24;

export function allocSECURE_BUFFER_INFO(data?: Partial<SECURE_BUFFER_INFO>): Uint8Array {
  const buf = new Uint8Array(sizeofSECURE_BUFFER_INFO);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.guidBufferIdentifier !== undefined) view.setBigUint64(0, data.guidBufferIdentifier === null ? 0n : BigInt(util.toPointer(data.guidBufferIdentifier)), true);
  // 0x08: u32
  if (data?.cbBufferSize !== undefined) view.setUint32(8, Number(data.cbBufferSize), true);
  // 0x0c: u32
  if (data?.cbCaptured !== undefined) view.setUint32(12, Number(data.cbCaptured), true);
  // 0x10: pointer
  if (data?.ullReserved !== undefined) view.setBigUint64(16, data.ullReserved === null ? 0n : BigInt(util.toPointer(data.ullReserved)), true);
  return buf;
}

/**
 * Windows.Win32.Media.KernelStreaming.KS_FRAME_INFO (size: 72)
 */
export interface KS_FRAME_INFO {
  /** u32 */
  ExtendedHeaderSize: number;
  /** u32 */
  dwFrameFlags: number;
  /** i64 */
  PictureNumber: Deno.PointerValue;
  /** i64 */
  DropCount: Deno.PointerValue;
  /** Windows.Win32.Foundation.HANDLE */
  hDirectDraw: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Foundation.HANDLE */
  hSurfaceHandle: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Foundation.RECT */
  DirectDrawRect: Uint8Array | Deno.PointerValue | null;
  /** _Anonymous1_e__Union */
  Anonymous1: Uint8Array | Deno.PointerValue | null;
  /** u32 */
  Reserved2: number;
  /** _Anonymous2_e__Union */
  Anonymous2: Uint8Array | Deno.PointerValue | null;
}

export const sizeofKS_FRAME_INFO = 72;

export function allocKS_FRAME_INFO(data?: Partial<KS_FRAME_INFO>): Uint8Array {
  const buf = new Uint8Array(sizeofKS_FRAME_INFO);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.ExtendedHeaderSize !== undefined) view.setUint32(0, Number(data.ExtendedHeaderSize), true);
  // 0x04: u32
  if (data?.dwFrameFlags !== undefined) view.setUint32(4, Number(data.dwFrameFlags), true);
  // 0x08: i64
  if (data?.PictureNumber !== undefined) view.setBigInt64(8, BigInt(data.PictureNumber), true);
  // 0x10: i64
  if (data?.DropCount !== undefined) view.setBigInt64(16, BigInt(data.DropCount), true);
  // 0x18: pointer
  if (data?.hDirectDraw !== undefined) view.setBigUint64(24, data.hDirectDraw === null ? 0n : BigInt(util.toPointer(data.hDirectDraw)), true);
  // 0x20: pointer
  if (data?.hSurfaceHandle !== undefined) view.setBigUint64(32, data.hSurfaceHandle === null ? 0n : BigInt(util.toPointer(data.hSurfaceHandle)), true);
  // 0x28: pointer
  if (data?.DirectDrawRect !== undefined) view.setBigUint64(40, data.DirectDrawRect === null ? 0n : BigInt(util.toPointer(data.DirectDrawRect)), true);
  // 0x30: pointer
  if (data?.Anonymous1 !== undefined) view.setBigUint64(48, data.Anonymous1 === null ? 0n : BigInt(util.toPointer(data.Anonymous1)), true);
  // 0x38: u32
  if (data?.Reserved2 !== undefined) view.setUint32(56, Number(data.Reserved2), true);
  // 0x3c: pad4
  // 0x40: pointer
  if (data?.Anonymous2 !== undefined) view.setBigUint64(64, data.Anonymous2 === null ? 0n : BigInt(util.toPointer(data.Anonymous2)), true);
  return buf;
}

/**
 * Windows.Win32.Media.KernelStreaming.KS_VBI_FRAME_INFO (size: 48)
 */
export interface KS_VBI_FRAME_INFO {
  /** u32 */
  ExtendedHeaderSize: number;
  /** u32 */
  dwFrameFlags: number;
  /** i64 */
  PictureNumber: Deno.PointerValue;
  /** i64 */
  DropCount: Deno.PointerValue;
  /** u32 */
  dwSamplingFrequency: number;
  /** Windows.Win32.Media.KernelStreaming.KS_TVTUNER_CHANGE_INFO */
  TvTunerChangeInfo: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Media.KernelStreaming.KS_VBIINFOHEADER */
  VBIInfoHeader: Uint8Array | Deno.PointerValue | null;
}

export const sizeofKS_VBI_FRAME_INFO = 48;

export function allocKS_VBI_FRAME_INFO(data?: Partial<KS_VBI_FRAME_INFO>): Uint8Array {
  const buf = new Uint8Array(sizeofKS_VBI_FRAME_INFO);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.ExtendedHeaderSize !== undefined) view.setUint32(0, Number(data.ExtendedHeaderSize), true);
  // 0x04: u32
  if (data?.dwFrameFlags !== undefined) view.setUint32(4, Number(data.dwFrameFlags), true);
  // 0x08: i64
  if (data?.PictureNumber !== undefined) view.setBigInt64(8, BigInt(data.PictureNumber), true);
  // 0x10: i64
  if (data?.DropCount !== undefined) view.setBigInt64(16, BigInt(data.DropCount), true);
  // 0x18: u32
  if (data?.dwSamplingFrequency !== undefined) view.setUint32(24, Number(data.dwSamplingFrequency), true);
  // 0x1c: pad4
  // 0x20: pointer
  if (data?.TvTunerChangeInfo !== undefined) view.setBigUint64(32, data.TvTunerChangeInfo === null ? 0n : BigInt(util.toPointer(data.TvTunerChangeInfo)), true);
  // 0x28: pointer
  if (data?.VBIInfoHeader !== undefined) view.setBigUint64(40, data.VBIInfoHeader === null ? 0n : BigInt(util.toPointer(data.VBIInfoHeader)), true);
  return buf;
}

/**
 * Windows.Win32.Media.KernelStreaming.KSPROPERTY_ALLOCATOR_CONTROL_SURFACE_SIZE_S (size: 8)
 */
export interface KSPROPERTY_ALLOCATOR_CONTROL_SURFACE_SIZE_S {
  /** u32 */
  CX: number;
  /** u32 */
  CY: number;
}

export const sizeofKSPROPERTY_ALLOCATOR_CONTROL_SURFACE_SIZE_S = 8;

export function allocKSPROPERTY_ALLOCATOR_CONTROL_SURFACE_SIZE_S(data?: Partial<KSPROPERTY_ALLOCATOR_CONTROL_SURFACE_SIZE_S>): Uint8Array {
  const buf = new Uint8Array(sizeofKSPROPERTY_ALLOCATOR_CONTROL_SURFACE_SIZE_S);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.CX !== undefined) view.setUint32(0, Number(data.CX), true);
  // 0x04: u32
  if (data?.CY !== undefined) view.setUint32(4, Number(data.CY), true);
  return buf;
}

/**
 * Windows.Win32.Media.KernelStreaming.KSPROPERTY_ALLOCATOR_CONTROL_CAPTURE_CAPS_S (size: 8)
 */
export interface KSPROPERTY_ALLOCATOR_CONTROL_CAPTURE_CAPS_S {
  /** u32 */
  InterleavedCapSupported: number;
}

export const sizeofKSPROPERTY_ALLOCATOR_CONTROL_CAPTURE_CAPS_S = 8;

export function allocKSPROPERTY_ALLOCATOR_CONTROL_CAPTURE_CAPS_S(data?: Partial<KSPROPERTY_ALLOCATOR_CONTROL_CAPTURE_CAPS_S>): Uint8Array {
  const buf = new Uint8Array(sizeofKSPROPERTY_ALLOCATOR_CONTROL_CAPTURE_CAPS_S);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.InterleavedCapSupported !== undefined) view.setUint32(0, Number(data.InterleavedCapSupported), true);
  // 0x04: pad4
  return buf;
}

/**
 * Windows.Win32.Media.KernelStreaming.KSPROPERTY_ALLOCATOR_CONTROL_CAPTURE_INTERLEAVE_S (size: 8)
 */
export interface KSPROPERTY_ALLOCATOR_CONTROL_CAPTURE_INTERLEAVE_S {
  /** u32 */
  InterleavedCapPossible: number;
}

export const sizeofKSPROPERTY_ALLOCATOR_CONTROL_CAPTURE_INTERLEAVE_S = 8;

export function allocKSPROPERTY_ALLOCATOR_CONTROL_CAPTURE_INTERLEAVE_S(data?: Partial<KSPROPERTY_ALLOCATOR_CONTROL_CAPTURE_INTERLEAVE_S>): Uint8Array {
  const buf = new Uint8Array(sizeofKSPROPERTY_ALLOCATOR_CONTROL_CAPTURE_INTERLEAVE_S);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.InterleavedCapPossible !== undefined) view.setUint32(0, Number(data.InterleavedCapPossible), true);
  // 0x04: pad4
  return buf;
}

/**
 * Windows.Win32.Media.KernelStreaming.KSPROPERTY_VIDEOPROCAMP_S (size: 24)
 */
export interface KSPROPERTY_VIDEOPROCAMP_S {
  /** Windows.Win32.Media.KernelStreaming.KSIDENTIFIER */
  Property: Uint8Array | Deno.PointerValue | null;
  /** i32 */
  Value: number;
  /** u32 */
  Flags: number;
  /** u32 */
  Capabilities: number;
}

export const sizeofKSPROPERTY_VIDEOPROCAMP_S = 24;

export function allocKSPROPERTY_VIDEOPROCAMP_S(data?: Partial<KSPROPERTY_VIDEOPROCAMP_S>): Uint8Array {
  const buf = new Uint8Array(sizeofKSPROPERTY_VIDEOPROCAMP_S);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.Property !== undefined) view.setBigUint64(0, data.Property === null ? 0n : BigInt(util.toPointer(data.Property)), true);
  // 0x08: i32
  if (data?.Value !== undefined) view.setInt32(8, Number(data.Value), true);
  // 0x0c: u32
  if (data?.Flags !== undefined) view.setUint32(12, Number(data.Flags), true);
  // 0x10: u32
  if (data?.Capabilities !== undefined) view.setUint32(16, Number(data.Capabilities), true);
  // 0x14: pad4
  return buf;
}

/**
 * Windows.Win32.Media.KernelStreaming.KSPROPERTY_VIDEOPROCAMP_NODE_S (size: 24)
 */
export interface KSPROPERTY_VIDEOPROCAMP_NODE_S {
  /** Windows.Win32.Media.KernelStreaming.KSP_NODE */
  NodeProperty: Uint8Array | Deno.PointerValue | null;
  /** i32 */
  Value: number;
  /** u32 */
  Flags: number;
  /** u32 */
  Capabilities: number;
}

export const sizeofKSPROPERTY_VIDEOPROCAMP_NODE_S = 24;

export function allocKSPROPERTY_VIDEOPROCAMP_NODE_S(data?: Partial<KSPROPERTY_VIDEOPROCAMP_NODE_S>): Uint8Array {
  const buf = new Uint8Array(sizeofKSPROPERTY_VIDEOPROCAMP_NODE_S);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.NodeProperty !== undefined) view.setBigUint64(0, data.NodeProperty === null ? 0n : BigInt(util.toPointer(data.NodeProperty)), true);
  // 0x08: i32
  if (data?.Value !== undefined) view.setInt32(8, Number(data.Value), true);
  // 0x0c: u32
  if (data?.Flags !== undefined) view.setUint32(12, Number(data.Flags), true);
  // 0x10: u32
  if (data?.Capabilities !== undefined) view.setUint32(16, Number(data.Capabilities), true);
  // 0x14: pad4
  return buf;
}

/**
 * Windows.Win32.Media.KernelStreaming.KSPROPERTY_VIDEOPROCAMP_S2 (size: 24)
 */
export interface KSPROPERTY_VIDEOPROCAMP_S2 {
  /** Windows.Win32.Media.KernelStreaming.KSIDENTIFIER */
  Property: Uint8Array | Deno.PointerValue | null;
  /** i32 */
  Value1: number;
  /** u32 */
  Flags: number;
  /** u32 */
  Capabilities: number;
  /** i32 */
  Value2: number;
}

export const sizeofKSPROPERTY_VIDEOPROCAMP_S2 = 24;

export function allocKSPROPERTY_VIDEOPROCAMP_S2(data?: Partial<KSPROPERTY_VIDEOPROCAMP_S2>): Uint8Array {
  const buf = new Uint8Array(sizeofKSPROPERTY_VIDEOPROCAMP_S2);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.Property !== undefined) view.setBigUint64(0, data.Property === null ? 0n : BigInt(util.toPointer(data.Property)), true);
  // 0x08: i32
  if (data?.Value1 !== undefined) view.setInt32(8, Number(data.Value1), true);
  // 0x0c: u32
  if (data?.Flags !== undefined) view.setUint32(12, Number(data.Flags), true);
  // 0x10: u32
  if (data?.Capabilities !== undefined) view.setUint32(16, Number(data.Capabilities), true);
  // 0x14: i32
  if (data?.Value2 !== undefined) view.setInt32(20, Number(data.Value2), true);
  return buf;
}

/**
 * Windows.Win32.Media.KernelStreaming.KSPROPERTY_VIDEOPROCAMP_NODE_S2 (size: 24)
 */
export interface KSPROPERTY_VIDEOPROCAMP_NODE_S2 {
  /** Windows.Win32.Media.KernelStreaming.KSP_NODE */
  NodeProperty: Uint8Array | Deno.PointerValue | null;
  /** i32 */
  Value1: number;
  /** u32 */
  Flags: number;
  /** u32 */
  Capabilities: number;
  /** i32 */
  Value2: number;
}

export const sizeofKSPROPERTY_VIDEOPROCAMP_NODE_S2 = 24;

export function allocKSPROPERTY_VIDEOPROCAMP_NODE_S2(data?: Partial<KSPROPERTY_VIDEOPROCAMP_NODE_S2>): Uint8Array {
  const buf = new Uint8Array(sizeofKSPROPERTY_VIDEOPROCAMP_NODE_S2);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.NodeProperty !== undefined) view.setBigUint64(0, data.NodeProperty === null ? 0n : BigInt(util.toPointer(data.NodeProperty)), true);
  // 0x08: i32
  if (data?.Value1 !== undefined) view.setInt32(8, Number(data.Value1), true);
  // 0x0c: u32
  if (data?.Flags !== undefined) view.setUint32(12, Number(data.Flags), true);
  // 0x10: u32
  if (data?.Capabilities !== undefined) view.setUint32(16, Number(data.Capabilities), true);
  // 0x14: i32
  if (data?.Value2 !== undefined) view.setInt32(20, Number(data.Value2), true);
  return buf;
}

/**
 * Windows.Win32.Media.KernelStreaming.KSPROPERTY_SELECTOR_S (size: 24)
 */
export interface KSPROPERTY_SELECTOR_S {
  /** Windows.Win32.Media.KernelStreaming.KSIDENTIFIER */
  Property: Uint8Array | Deno.PointerValue | null;
  /** i32 */
  Value: number;
  /** u32 */
  Flags: number;
  /** u32 */
  Capabilities: number;
}

export const sizeofKSPROPERTY_SELECTOR_S = 24;

export function allocKSPROPERTY_SELECTOR_S(data?: Partial<KSPROPERTY_SELECTOR_S>): Uint8Array {
  const buf = new Uint8Array(sizeofKSPROPERTY_SELECTOR_S);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.Property !== undefined) view.setBigUint64(0, data.Property === null ? 0n : BigInt(util.toPointer(data.Property)), true);
  // 0x08: i32
  if (data?.Value !== undefined) view.setInt32(8, Number(data.Value), true);
  // 0x0c: u32
  if (data?.Flags !== undefined) view.setUint32(12, Number(data.Flags), true);
  // 0x10: u32
  if (data?.Capabilities !== undefined) view.setUint32(16, Number(data.Capabilities), true);
  // 0x14: pad4
  return buf;
}

/**
 * Windows.Win32.Media.KernelStreaming.KSPROPERTY_SELECTOR_NODE_S (size: 24)
 */
export interface KSPROPERTY_SELECTOR_NODE_S {
  /** Windows.Win32.Media.KernelStreaming.KSP_NODE */
  NodeProperty: Uint8Array | Deno.PointerValue | null;
  /** i32 */
  Value: number;
  /** u32 */
  Flags: number;
  /** u32 */
  Capabilities: number;
}

export const sizeofKSPROPERTY_SELECTOR_NODE_S = 24;

export function allocKSPROPERTY_SELECTOR_NODE_S(data?: Partial<KSPROPERTY_SELECTOR_NODE_S>): Uint8Array {
  const buf = new Uint8Array(sizeofKSPROPERTY_SELECTOR_NODE_S);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.NodeProperty !== undefined) view.setBigUint64(0, data.NodeProperty === null ? 0n : BigInt(util.toPointer(data.NodeProperty)), true);
  // 0x08: i32
  if (data?.Value !== undefined) view.setInt32(8, Number(data.Value), true);
  // 0x0c: u32
  if (data?.Flags !== undefined) view.setUint32(12, Number(data.Flags), true);
  // 0x10: u32
  if (data?.Capabilities !== undefined) view.setUint32(16, Number(data.Capabilities), true);
  // 0x14: pad4
  return buf;
}

/**
 * Windows.Win32.Media.KernelStreaming.KSPROPERTY_TUNER_CAPS_S (size: 40)
 */
export interface KSPROPERTY_TUNER_CAPS_S {
  /** Windows.Win32.Media.KernelStreaming.KSIDENTIFIER */
  Property: Uint8Array | Deno.PointerValue | null;
  /** u32 */
  ModesSupported: number;
  /** Windows.Win32.Media.KernelStreaming.KSIDENTIFIER */
  VideoMedium: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Media.KernelStreaming.KSIDENTIFIER */
  TVAudioMedium: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Media.KernelStreaming.KSIDENTIFIER */
  RadioAudioMedium: Uint8Array | Deno.PointerValue | null;
}

export const sizeofKSPROPERTY_TUNER_CAPS_S = 40;

export function allocKSPROPERTY_TUNER_CAPS_S(data?: Partial<KSPROPERTY_TUNER_CAPS_S>): Uint8Array {
  const buf = new Uint8Array(sizeofKSPROPERTY_TUNER_CAPS_S);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.Property !== undefined) view.setBigUint64(0, data.Property === null ? 0n : BigInt(util.toPointer(data.Property)), true);
  // 0x08: u32
  if (data?.ModesSupported !== undefined) view.setUint32(8, Number(data.ModesSupported), true);
  // 0x0c: pad4
  // 0x10: pointer
  if (data?.VideoMedium !== undefined) view.setBigUint64(16, data.VideoMedium === null ? 0n : BigInt(util.toPointer(data.VideoMedium)), true);
  // 0x18: pointer
  if (data?.TVAudioMedium !== undefined) view.setBigUint64(24, data.TVAudioMedium === null ? 0n : BigInt(util.toPointer(data.TVAudioMedium)), true);
  // 0x20: pointer
  if (data?.RadioAudioMedium !== undefined) view.setBigUint64(32, data.RadioAudioMedium === null ? 0n : BigInt(util.toPointer(data.RadioAudioMedium)), true);
  return buf;
}

/**
 * Windows.Win32.Media.KernelStreaming.KSPROPERTY_TUNER_IF_MEDIUM_S (size: 16)
 */
export interface KSPROPERTY_TUNER_IF_MEDIUM_S {
  /** Windows.Win32.Media.KernelStreaming.KSIDENTIFIER */
  Property: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Media.KernelStreaming.KSIDENTIFIER */
  IFMedium: Uint8Array | Deno.PointerValue | null;
}

export const sizeofKSPROPERTY_TUNER_IF_MEDIUM_S = 16;

export function allocKSPROPERTY_TUNER_IF_MEDIUM_S(data?: Partial<KSPROPERTY_TUNER_IF_MEDIUM_S>): Uint8Array {
  const buf = new Uint8Array(sizeofKSPROPERTY_TUNER_IF_MEDIUM_S);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.Property !== undefined) view.setBigUint64(0, data.Property === null ? 0n : BigInt(util.toPointer(data.Property)), true);
  // 0x08: pointer
  if (data?.IFMedium !== undefined) view.setBigUint64(8, data.IFMedium === null ? 0n : BigInt(util.toPointer(data.IFMedium)), true);
  return buf;
}

/**
 * Windows.Win32.Media.KernelStreaming.KSPROPERTY_TUNER_MODE_CAPS_S (size: 40)
 */
export interface KSPROPERTY_TUNER_MODE_CAPS_S {
  /** Windows.Win32.Media.KernelStreaming.KSIDENTIFIER */
  Property: Uint8Array | Deno.PointerValue | null;
  /** u32 */
  Mode: number;
  /** u32 */
  StandardsSupported: number;
  /** u32 */
  MinFrequency: number;
  /** u32 */
  MaxFrequency: number;
  /** u32 */
  TuningGranularity: number;
  /** u32 */
  NumberOfInputs: number;
  /** u32 */
  SettlingTime: number;
  /** u32 */
  Strategy: number;
}

export const sizeofKSPROPERTY_TUNER_MODE_CAPS_S = 40;

export function allocKSPROPERTY_TUNER_MODE_CAPS_S(data?: Partial<KSPROPERTY_TUNER_MODE_CAPS_S>): Uint8Array {
  const buf = new Uint8Array(sizeofKSPROPERTY_TUNER_MODE_CAPS_S);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.Property !== undefined) view.setBigUint64(0, data.Property === null ? 0n : BigInt(util.toPointer(data.Property)), true);
  // 0x08: u32
  if (data?.Mode !== undefined) view.setUint32(8, Number(data.Mode), true);
  // 0x0c: u32
  if (data?.StandardsSupported !== undefined) view.setUint32(12, Number(data.StandardsSupported), true);
  // 0x10: u32
  if (data?.MinFrequency !== undefined) view.setUint32(16, Number(data.MinFrequency), true);
  // 0x14: u32
  if (data?.MaxFrequency !== undefined) view.setUint32(20, Number(data.MaxFrequency), true);
  // 0x18: u32
  if (data?.TuningGranularity !== undefined) view.setUint32(24, Number(data.TuningGranularity), true);
  // 0x1c: u32
  if (data?.NumberOfInputs !== undefined) view.setUint32(28, Number(data.NumberOfInputs), true);
  // 0x20: u32
  if (data?.SettlingTime !== undefined) view.setUint32(32, Number(data.SettlingTime), true);
  // 0x24: u32
  if (data?.Strategy !== undefined) view.setUint32(36, Number(data.Strategy), true);
  return buf;
}

/**
 * Windows.Win32.Media.KernelStreaming.KSPROPERTY_TUNER_MODE_S (size: 16)
 */
export interface KSPROPERTY_TUNER_MODE_S {
  /** Windows.Win32.Media.KernelStreaming.KSIDENTIFIER */
  Property: Uint8Array | Deno.PointerValue | null;
  /** u32 */
  Mode: number;
}

export const sizeofKSPROPERTY_TUNER_MODE_S = 16;

export function allocKSPROPERTY_TUNER_MODE_S(data?: Partial<KSPROPERTY_TUNER_MODE_S>): Uint8Array {
  const buf = new Uint8Array(sizeofKSPROPERTY_TUNER_MODE_S);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.Property !== undefined) view.setBigUint64(0, data.Property === null ? 0n : BigInt(util.toPointer(data.Property)), true);
  // 0x08: u32
  if (data?.Mode !== undefined) view.setUint32(8, Number(data.Mode), true);
  // 0x0c: pad4
  return buf;
}

/**
 * Windows.Win32.Media.KernelStreaming.KSPROPERTY_TUNER_FREQUENCY_S (size: 40)
 */
export interface KSPROPERTY_TUNER_FREQUENCY_S {
  /** Windows.Win32.Media.KernelStreaming.KSIDENTIFIER */
  Property: Uint8Array | Deno.PointerValue | null;
  /** u32 */
  Frequency: number;
  /** u32 */
  LastFrequency: number;
  /** u32 */
  TuningFlags: number;
  /** u32 */
  VideoSubChannel: number;
  /** u32 */
  AudioSubChannel: number;
  /** u32 */
  Channel: number;
  /** u32 */
  Country: number;
}

export const sizeofKSPROPERTY_TUNER_FREQUENCY_S = 40;

export function allocKSPROPERTY_TUNER_FREQUENCY_S(data?: Partial<KSPROPERTY_TUNER_FREQUENCY_S>): Uint8Array {
  const buf = new Uint8Array(sizeofKSPROPERTY_TUNER_FREQUENCY_S);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.Property !== undefined) view.setBigUint64(0, data.Property === null ? 0n : BigInt(util.toPointer(data.Property)), true);
  // 0x08: u32
  if (data?.Frequency !== undefined) view.setUint32(8, Number(data.Frequency), true);
  // 0x0c: u32
  if (data?.LastFrequency !== undefined) view.setUint32(12, Number(data.LastFrequency), true);
  // 0x10: u32
  if (data?.TuningFlags !== undefined) view.setUint32(16, Number(data.TuningFlags), true);
  // 0x14: u32
  if (data?.VideoSubChannel !== undefined) view.setUint32(20, Number(data.VideoSubChannel), true);
  // 0x18: u32
  if (data?.AudioSubChannel !== undefined) view.setUint32(24, Number(data.AudioSubChannel), true);
  // 0x1c: u32
  if (data?.Channel !== undefined) view.setUint32(28, Number(data.Channel), true);
  // 0x20: u32
  if (data?.Country !== undefined) view.setUint32(32, Number(data.Country), true);
  // 0x24: pad4
  return buf;
}

/**
 * Windows.Win32.Media.KernelStreaming.KSPROPERTY_TUNER_STANDARD_S (size: 16)
 */
export interface KSPROPERTY_TUNER_STANDARD_S {
  /** Windows.Win32.Media.KernelStreaming.KSIDENTIFIER */
  Property: Uint8Array | Deno.PointerValue | null;
  /** u32 */
  Standard: number;
}

export const sizeofKSPROPERTY_TUNER_STANDARD_S = 16;

export function allocKSPROPERTY_TUNER_STANDARD_S(data?: Partial<KSPROPERTY_TUNER_STANDARD_S>): Uint8Array {
  const buf = new Uint8Array(sizeofKSPROPERTY_TUNER_STANDARD_S);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.Property !== undefined) view.setBigUint64(0, data.Property === null ? 0n : BigInt(util.toPointer(data.Property)), true);
  // 0x08: u32
  if (data?.Standard !== undefined) view.setUint32(8, Number(data.Standard), true);
  // 0x0c: pad4
  return buf;
}

/**
 * Windows.Win32.Media.KernelStreaming.KSPROPERTY_TUNER_STANDARD_MODE_S (size: 16)
 */
export interface KSPROPERTY_TUNER_STANDARD_MODE_S {
  /** Windows.Win32.Media.KernelStreaming.KSIDENTIFIER */
  Property: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Foundation.BOOL */
  AutoDetect: boolean;
}

export const sizeofKSPROPERTY_TUNER_STANDARD_MODE_S = 16;

export function allocKSPROPERTY_TUNER_STANDARD_MODE_S(data?: Partial<KSPROPERTY_TUNER_STANDARD_MODE_S>): Uint8Array {
  const buf = new Uint8Array(sizeofKSPROPERTY_TUNER_STANDARD_MODE_S);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.Property !== undefined) view.setBigUint64(0, data.Property === null ? 0n : BigInt(util.toPointer(data.Property)), true);
  // 0x08: i32
  if (data?.AutoDetect !== undefined) view.setInt32(8, Number(data.AutoDetect), true);
  // 0x0c: pad4
  return buf;
}

/**
 * Windows.Win32.Media.KernelStreaming.KSPROPERTY_TUNER_INPUT_S (size: 16)
 */
export interface KSPROPERTY_TUNER_INPUT_S {
  /** Windows.Win32.Media.KernelStreaming.KSIDENTIFIER */
  Property: Uint8Array | Deno.PointerValue | null;
  /** u32 */
  InputIndex: number;
}

export const sizeofKSPROPERTY_TUNER_INPUT_S = 16;

export function allocKSPROPERTY_TUNER_INPUT_S(data?: Partial<KSPROPERTY_TUNER_INPUT_S>): Uint8Array {
  const buf = new Uint8Array(sizeofKSPROPERTY_TUNER_INPUT_S);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.Property !== undefined) view.setBigUint64(0, data.Property === null ? 0n : BigInt(util.toPointer(data.Property)), true);
  // 0x08: u32
  if (data?.InputIndex !== undefined) view.setUint32(8, Number(data.InputIndex), true);
  // 0x0c: pad4
  return buf;
}

/**
 * Windows.Win32.Media.KernelStreaming.KSPROPERTY_TUNER_STATUS_S (size: 24)
 */
export interface KSPROPERTY_TUNER_STATUS_S {
  /** Windows.Win32.Media.KernelStreaming.KSIDENTIFIER */
  Property: Uint8Array | Deno.PointerValue | null;
  /** u32 */
  CurrentFrequency: number;
  /** u32 */
  PLLOffset: number;
  /** u32 */
  SignalStrength: number;
  /** u32 */
  Busy: number;
}

export const sizeofKSPROPERTY_TUNER_STATUS_S = 24;

export function allocKSPROPERTY_TUNER_STATUS_S(data?: Partial<KSPROPERTY_TUNER_STATUS_S>): Uint8Array {
  const buf = new Uint8Array(sizeofKSPROPERTY_TUNER_STATUS_S);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.Property !== undefined) view.setBigUint64(0, data.Property === null ? 0n : BigInt(util.toPointer(data.Property)), true);
  // 0x08: u32
  if (data?.CurrentFrequency !== undefined) view.setUint32(8, Number(data.CurrentFrequency), true);
  // 0x0c: u32
  if (data?.PLLOffset !== undefined) view.setUint32(12, Number(data.PLLOffset), true);
  // 0x10: u32
  if (data?.SignalStrength !== undefined) view.setUint32(16, Number(data.SignalStrength), true);
  // 0x14: u32
  if (data?.Busy !== undefined) view.setUint32(20, Number(data.Busy), true);
  return buf;
}

/**
 * Windows.Win32.Media.KernelStreaming.TUNER_ANALOG_CAPS_S (size: 32)
 */
export interface TUNER_ANALOG_CAPS_S {
  /** u32 */
  Mode: number;
  /** u32 */
  StandardsSupported: number;
  /** u32 */
  MinFrequency: number;
  /** u32 */
  MaxFrequency: number;
  /** u32 */
  TuningGranularity: number;
  /** u32 */
  SettlingTime: number;
  /** u32 */
  ScanSensingRange: number;
  /** u32 */
  FineTuneSensingRange: number;
}

export const sizeofTUNER_ANALOG_CAPS_S = 32;

export function allocTUNER_ANALOG_CAPS_S(data?: Partial<TUNER_ANALOG_CAPS_S>): Uint8Array {
  const buf = new Uint8Array(sizeofTUNER_ANALOG_CAPS_S);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.Mode !== undefined) view.setUint32(0, Number(data.Mode), true);
  // 0x04: u32
  if (data?.StandardsSupported !== undefined) view.setUint32(4, Number(data.StandardsSupported), true);
  // 0x08: u32
  if (data?.MinFrequency !== undefined) view.setUint32(8, Number(data.MinFrequency), true);
  // 0x0c: u32
  if (data?.MaxFrequency !== undefined) view.setUint32(12, Number(data.MaxFrequency), true);
  // 0x10: u32
  if (data?.TuningGranularity !== undefined) view.setUint32(16, Number(data.TuningGranularity), true);
  // 0x14: u32
  if (data?.SettlingTime !== undefined) view.setUint32(20, Number(data.SettlingTime), true);
  // 0x18: u32
  if (data?.ScanSensingRange !== undefined) view.setUint32(24, Number(data.ScanSensingRange), true);
  // 0x1c: u32
  if (data?.FineTuneSensingRange !== undefined) view.setUint32(28, Number(data.FineTuneSensingRange), true);
  return buf;
}

/**
 * Windows.Win32.Media.KernelStreaming.KSPROPERTY_TUNER_SCAN_CAPS_S (size: 32)
 */
export interface KSPROPERTY_TUNER_SCAN_CAPS_S {
  /** Windows.Win32.Media.KernelStreaming.KSIDENTIFIER */
  Property: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Foundation.BOOL */
  fSupportsHardwareAssistedScanning: boolean;
  /** u32 */
  SupportedBroadcastStandards: number;
  /** ptr */
  GUIDBucket: Deno.PointerValue | Uint8Array | null;
  /** u32 */
  lengthofBucket: number;
}

export const sizeofKSPROPERTY_TUNER_SCAN_CAPS_S = 32;

export function allocKSPROPERTY_TUNER_SCAN_CAPS_S(data?: Partial<KSPROPERTY_TUNER_SCAN_CAPS_S>): Uint8Array {
  const buf = new Uint8Array(sizeofKSPROPERTY_TUNER_SCAN_CAPS_S);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.Property !== undefined) view.setBigUint64(0, data.Property === null ? 0n : BigInt(util.toPointer(data.Property)), true);
  // 0x08: i32
  if (data?.fSupportsHardwareAssistedScanning !== undefined) view.setInt32(8, Number(data.fSupportsHardwareAssistedScanning), true);
  // 0x0c: u32
  if (data?.SupportedBroadcastStandards !== undefined) view.setUint32(12, Number(data.SupportedBroadcastStandards), true);
  // 0x10: pointer
  if (data?.GUIDBucket !== undefined) view.setBigUint64(16, data.GUIDBucket === null ? 0n : BigInt(util.toPointer(data.GUIDBucket)), true);
  // 0x18: u32
  if (data?.lengthofBucket !== undefined) view.setUint32(24, Number(data.lengthofBucket), true);
  // 0x1c: pad4
  return buf;
}

/**
 * Windows.Win32.Media.KernelStreaming.KSPROPERTY_TUNER_NETWORKTYPE_SCAN_CAPS_S (size: 32)
 */
export interface KSPROPERTY_TUNER_NETWORKTYPE_SCAN_CAPS_S {
  /** Windows.Win32.Media.KernelStreaming.KSIDENTIFIER */
  Property: Uint8Array | Deno.PointerValue | null;
  /** System.Guid */
  NetworkType: Uint8Array | Deno.PointerValue | null;
  /** u32 */
  BufferSize: number;
  /** ptr */
  NetworkTunerCapabilities: Deno.PointerValue | Uint8Array | null;
}

export const sizeofKSPROPERTY_TUNER_NETWORKTYPE_SCAN_CAPS_S = 32;

export function allocKSPROPERTY_TUNER_NETWORKTYPE_SCAN_CAPS_S(data?: Partial<KSPROPERTY_TUNER_NETWORKTYPE_SCAN_CAPS_S>): Uint8Array {
  const buf = new Uint8Array(sizeofKSPROPERTY_TUNER_NETWORKTYPE_SCAN_CAPS_S);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.Property !== undefined) view.setBigUint64(0, data.Property === null ? 0n : BigInt(util.toPointer(data.Property)), true);
  // 0x08: pointer
  if (data?.NetworkType !== undefined) view.setBigUint64(8, data.NetworkType === null ? 0n : BigInt(util.toPointer(data.NetworkType)), true);
  // 0x10: u32
  if (data?.BufferSize !== undefined) view.setUint32(16, Number(data.BufferSize), true);
  // 0x14: pad4
  // 0x18: pointer
  if (data?.NetworkTunerCapabilities !== undefined) view.setBigUint64(24, data.NetworkTunerCapabilities === null ? 0n : BigInt(util.toPointer(data.NetworkTunerCapabilities)), true);
  return buf;
}

/**
 * Windows.Win32.Media.KernelStreaming.KSPROPERTY_TUNER_SCAN_STATUS_S (size: 16)
 */
export interface KSPROPERTY_TUNER_SCAN_STATUS_S {
  /** Windows.Win32.Media.KernelStreaming.KSIDENTIFIER */
  Property: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Media.KernelStreaming.TunerLockType */
  LockStatus: TunerLockType;
  /** u32 */
  CurrentFrequency: number;
}

export const sizeofKSPROPERTY_TUNER_SCAN_STATUS_S = 16;

export function allocKSPROPERTY_TUNER_SCAN_STATUS_S(data?: Partial<KSPROPERTY_TUNER_SCAN_STATUS_S>): Uint8Array {
  const buf = new Uint8Array(sizeofKSPROPERTY_TUNER_SCAN_STATUS_S);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.Property !== undefined) view.setBigUint64(0, data.Property === null ? 0n : BigInt(util.toPointer(data.Property)), true);
  // 0x08: i32
  if (data?.LockStatus !== undefined) view.setInt32(8, Number(data.LockStatus), true);
  // 0x0c: u32
  if (data?.CurrentFrequency !== undefined) view.setUint32(12, Number(data.CurrentFrequency), true);
  return buf;
}

/**
 * Windows.Win32.Media.KernelStreaming.KSEVENT_TUNER_INITIATE_SCAN_S (size: 16)
 */
export interface KSEVENT_TUNER_INITIATE_SCAN_S {
  /** Windows.Win32.Media.KernelStreaming.KSEVENTDATA */
  EventData: Uint8Array | Deno.PointerValue | null;
  /** u32 */
  StartFrequency: number;
  /** u32 */
  EndFrequency: number;
}

export const sizeofKSEVENT_TUNER_INITIATE_SCAN_S = 16;

export function allocKSEVENT_TUNER_INITIATE_SCAN_S(data?: Partial<KSEVENT_TUNER_INITIATE_SCAN_S>): Uint8Array {
  const buf = new Uint8Array(sizeofKSEVENT_TUNER_INITIATE_SCAN_S);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.EventData !== undefined) view.setBigUint64(0, data.EventData === null ? 0n : BigInt(util.toPointer(data.EventData)), true);
  // 0x08: u32
  if (data?.StartFrequency !== undefined) view.setUint32(8, Number(data.StartFrequency), true);
  // 0x0c: u32
  if (data?.EndFrequency !== undefined) view.setUint32(12, Number(data.EndFrequency), true);
  return buf;
}

/**
 * Windows.Win32.Media.KernelStreaming.KSPROPERTY_VIDEOENCODER_S (size: 24)
 */
export interface KSPROPERTY_VIDEOENCODER_S {
  /** Windows.Win32.Media.KernelStreaming.KSIDENTIFIER */
  Property: Uint8Array | Deno.PointerValue | null;
  /** i32 */
  Value: number;
  /** u32 */
  Flags: number;
  /** u32 */
  Capabilities: number;
}

export const sizeofKSPROPERTY_VIDEOENCODER_S = 24;

export function allocKSPROPERTY_VIDEOENCODER_S(data?: Partial<KSPROPERTY_VIDEOENCODER_S>): Uint8Array {
  const buf = new Uint8Array(sizeofKSPROPERTY_VIDEOENCODER_S);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.Property !== undefined) view.setBigUint64(0, data.Property === null ? 0n : BigInt(util.toPointer(data.Property)), true);
  // 0x08: i32
  if (data?.Value !== undefined) view.setInt32(8, Number(data.Value), true);
  // 0x0c: u32
  if (data?.Flags !== undefined) view.setUint32(12, Number(data.Flags), true);
  // 0x10: u32
  if (data?.Capabilities !== undefined) view.setUint32(16, Number(data.Capabilities), true);
  // 0x14: pad4
  return buf;
}

/**
 * Windows.Win32.Media.KernelStreaming.KSPROPERTY_VIDEODECODER_CAPS_S (size: 24)
 */
export interface KSPROPERTY_VIDEODECODER_CAPS_S {
  /** Windows.Win32.Media.KernelStreaming.KSIDENTIFIER */
  Property: Uint8Array | Deno.PointerValue | null;
  /** u32 */
  StandardsSupported: number;
  /** u32 */
  Capabilities: number;
  /** u32 */
  SettlingTime: number;
  /** u32 */
  HSyncPerVSync: number;
}

export const sizeofKSPROPERTY_VIDEODECODER_CAPS_S = 24;

export function allocKSPROPERTY_VIDEODECODER_CAPS_S(data?: Partial<KSPROPERTY_VIDEODECODER_CAPS_S>): Uint8Array {
  const buf = new Uint8Array(sizeofKSPROPERTY_VIDEODECODER_CAPS_S);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.Property !== undefined) view.setBigUint64(0, data.Property === null ? 0n : BigInt(util.toPointer(data.Property)), true);
  // 0x08: u32
  if (data?.StandardsSupported !== undefined) view.setUint32(8, Number(data.StandardsSupported), true);
  // 0x0c: u32
  if (data?.Capabilities !== undefined) view.setUint32(12, Number(data.Capabilities), true);
  // 0x10: u32
  if (data?.SettlingTime !== undefined) view.setUint32(16, Number(data.SettlingTime), true);
  // 0x14: u32
  if (data?.HSyncPerVSync !== undefined) view.setUint32(20, Number(data.HSyncPerVSync), true);
  return buf;
}

/**
 * Windows.Win32.Media.KernelStreaming.KSPROPERTY_VIDEODECODER_STATUS_S (size: 16)
 */
export interface KSPROPERTY_VIDEODECODER_STATUS_S {
  /** Windows.Win32.Media.KernelStreaming.KSIDENTIFIER */
  Property: Uint8Array | Deno.PointerValue | null;
  /** u32 */
  NumberOfLines: number;
  /** u32 */
  SignalLocked: number;
}

export const sizeofKSPROPERTY_VIDEODECODER_STATUS_S = 16;

export function allocKSPROPERTY_VIDEODECODER_STATUS_S(data?: Partial<KSPROPERTY_VIDEODECODER_STATUS_S>): Uint8Array {
  const buf = new Uint8Array(sizeofKSPROPERTY_VIDEODECODER_STATUS_S);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.Property !== undefined) view.setBigUint64(0, data.Property === null ? 0n : BigInt(util.toPointer(data.Property)), true);
  // 0x08: u32
  if (data?.NumberOfLines !== undefined) view.setUint32(8, Number(data.NumberOfLines), true);
  // 0x0c: u32
  if (data?.SignalLocked !== undefined) view.setUint32(12, Number(data.SignalLocked), true);
  return buf;
}

/**
 * Windows.Win32.Media.KernelStreaming.KSPROPERTY_VIDEODECODER_STATUS2_S (size: 24)
 */
export interface KSPROPERTY_VIDEODECODER_STATUS2_S {
  /** Windows.Win32.Media.KernelStreaming.KSIDENTIFIER */
  Property: Uint8Array | Deno.PointerValue | null;
  /** u32 */
  NumberOfLines: number;
  /** u32 */
  SignalLocked: number;
  /** u32 */
  ChromaLock: number;
}

export const sizeofKSPROPERTY_VIDEODECODER_STATUS2_S = 24;

export function allocKSPROPERTY_VIDEODECODER_STATUS2_S(data?: Partial<KSPROPERTY_VIDEODECODER_STATUS2_S>): Uint8Array {
  const buf = new Uint8Array(sizeofKSPROPERTY_VIDEODECODER_STATUS2_S);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.Property !== undefined) view.setBigUint64(0, data.Property === null ? 0n : BigInt(util.toPointer(data.Property)), true);
  // 0x08: u32
  if (data?.NumberOfLines !== undefined) view.setUint32(8, Number(data.NumberOfLines), true);
  // 0x0c: u32
  if (data?.SignalLocked !== undefined) view.setUint32(12, Number(data.SignalLocked), true);
  // 0x10: u32
  if (data?.ChromaLock !== undefined) view.setUint32(16, Number(data.ChromaLock), true);
  // 0x14: pad4
  return buf;
}

/**
 * Windows.Win32.Media.KernelStreaming.KSPROPERTY_VIDEODECODER_S (size: 16)
 */
export interface KSPROPERTY_VIDEODECODER_S {
  /** Windows.Win32.Media.KernelStreaming.KSIDENTIFIER */
  Property: Uint8Array | Deno.PointerValue | null;
  /** u32 */
  Value: number;
}

export const sizeofKSPROPERTY_VIDEODECODER_S = 16;

export function allocKSPROPERTY_VIDEODECODER_S(data?: Partial<KSPROPERTY_VIDEODECODER_S>): Uint8Array {
  const buf = new Uint8Array(sizeofKSPROPERTY_VIDEODECODER_S);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.Property !== undefined) view.setBigUint64(0, data.Property === null ? 0n : BigInt(util.toPointer(data.Property)), true);
  // 0x08: u32
  if (data?.Value !== undefined) view.setUint32(8, Number(data.Value), true);
  // 0x0c: pad4
  return buf;
}

/**
 * Windows.Win32.Media.KernelStreaming.KSPROPERTY_CAMERACONTROL_S_EX (size: 32)
 */
export interface KSPROPERTY_CAMERACONTROL_S_EX {
  /** Windows.Win32.Media.KernelStreaming.KSIDENTIFIER */
  Property: Uint8Array | Deno.PointerValue | null;
  /** i32 */
  Value: number;
  /** u32 */
  Flags: number;
  /** u32 */
  Capabilities: number;
  /** Windows.Win32.Foundation.RECT */
  FocusRect: Uint8Array | Deno.PointerValue | null;
}

export const sizeofKSPROPERTY_CAMERACONTROL_S_EX = 32;

export function allocKSPROPERTY_CAMERACONTROL_S_EX(data?: Partial<KSPROPERTY_CAMERACONTROL_S_EX>): Uint8Array {
  const buf = new Uint8Array(sizeofKSPROPERTY_CAMERACONTROL_S_EX);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.Property !== undefined) view.setBigUint64(0, data.Property === null ? 0n : BigInt(util.toPointer(data.Property)), true);
  // 0x08: i32
  if (data?.Value !== undefined) view.setInt32(8, Number(data.Value), true);
  // 0x0c: u32
  if (data?.Flags !== undefined) view.setUint32(12, Number(data.Flags), true);
  // 0x10: u32
  if (data?.Capabilities !== undefined) view.setUint32(16, Number(data.Capabilities), true);
  // 0x14: pad4
  // 0x18: pointer
  if (data?.FocusRect !== undefined) view.setBigUint64(24, data.FocusRect === null ? 0n : BigInt(util.toPointer(data.FocusRect)), true);
  return buf;
}

/**
 * Windows.Win32.Media.KernelStreaming.KSPROPERTY_CAMERACONTROL_S (size: 24)
 */
export interface KSPROPERTY_CAMERACONTROL_S {
  /** Windows.Win32.Media.KernelStreaming.KSIDENTIFIER */
  Property: Uint8Array | Deno.PointerValue | null;
  /** i32 */
  Value: number;
  /** u32 */
  Flags: number;
  /** u32 */
  Capabilities: number;
}

export const sizeofKSPROPERTY_CAMERACONTROL_S = 24;

export function allocKSPROPERTY_CAMERACONTROL_S(data?: Partial<KSPROPERTY_CAMERACONTROL_S>): Uint8Array {
  const buf = new Uint8Array(sizeofKSPROPERTY_CAMERACONTROL_S);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.Property !== undefined) view.setBigUint64(0, data.Property === null ? 0n : BigInt(util.toPointer(data.Property)), true);
  // 0x08: i32
  if (data?.Value !== undefined) view.setInt32(8, Number(data.Value), true);
  // 0x0c: u32
  if (data?.Flags !== undefined) view.setUint32(12, Number(data.Flags), true);
  // 0x10: u32
  if (data?.Capabilities !== undefined) view.setUint32(16, Number(data.Capabilities), true);
  // 0x14: pad4
  return buf;
}

/**
 * Windows.Win32.Media.KernelStreaming.KSPROPERTY_CAMERACONTROL_NODE_S (size: 24)
 */
export interface KSPROPERTY_CAMERACONTROL_NODE_S {
  /** Windows.Win32.Media.KernelStreaming.KSP_NODE */
  NodeProperty: Uint8Array | Deno.PointerValue | null;
  /** i32 */
  Value: number;
  /** u32 */
  Flags: number;
  /** u32 */
  Capabilities: number;
}

export const sizeofKSPROPERTY_CAMERACONTROL_NODE_S = 24;

export function allocKSPROPERTY_CAMERACONTROL_NODE_S(data?: Partial<KSPROPERTY_CAMERACONTROL_NODE_S>): Uint8Array {
  const buf = new Uint8Array(sizeofKSPROPERTY_CAMERACONTROL_NODE_S);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.NodeProperty !== undefined) view.setBigUint64(0, data.NodeProperty === null ? 0n : BigInt(util.toPointer(data.NodeProperty)), true);
  // 0x08: i32
  if (data?.Value !== undefined) view.setInt32(8, Number(data.Value), true);
  // 0x0c: u32
  if (data?.Flags !== undefined) view.setUint32(12, Number(data.Flags), true);
  // 0x10: u32
  if (data?.Capabilities !== undefined) view.setUint32(16, Number(data.Capabilities), true);
  // 0x14: pad4
  return buf;
}

/**
 * Windows.Win32.Media.KernelStreaming.KSPROPERTY_CAMERACONTROL_S2 (size: 24)
 */
export interface KSPROPERTY_CAMERACONTROL_S2 {
  /** Windows.Win32.Media.KernelStreaming.KSIDENTIFIER */
  Property: Uint8Array | Deno.PointerValue | null;
  /** i32 */
  Value1: number;
  /** u32 */
  Flags: number;
  /** u32 */
  Capabilities: number;
  /** i32 */
  Value2: number;
}

export const sizeofKSPROPERTY_CAMERACONTROL_S2 = 24;

export function allocKSPROPERTY_CAMERACONTROL_S2(data?: Partial<KSPROPERTY_CAMERACONTROL_S2>): Uint8Array {
  const buf = new Uint8Array(sizeofKSPROPERTY_CAMERACONTROL_S2);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.Property !== undefined) view.setBigUint64(0, data.Property === null ? 0n : BigInt(util.toPointer(data.Property)), true);
  // 0x08: i32
  if (data?.Value1 !== undefined) view.setInt32(8, Number(data.Value1), true);
  // 0x0c: u32
  if (data?.Flags !== undefined) view.setUint32(12, Number(data.Flags), true);
  // 0x10: u32
  if (data?.Capabilities !== undefined) view.setUint32(16, Number(data.Capabilities), true);
  // 0x14: i32
  if (data?.Value2 !== undefined) view.setInt32(20, Number(data.Value2), true);
  return buf;
}

/**
 * Windows.Win32.Media.KernelStreaming.KSPROPERTY_CAMERACONTROL_NODE_S2 (size: 24)
 */
export interface KSPROPERTY_CAMERACONTROL_NODE_S2 {
  /** Windows.Win32.Media.KernelStreaming.KSP_NODE */
  NodeProperty: Uint8Array | Deno.PointerValue | null;
  /** i32 */
  Value1: number;
  /** u32 */
  Flags: number;
  /** u32 */
  Capabilities: number;
  /** i32 */
  Value2: number;
}

export const sizeofKSPROPERTY_CAMERACONTROL_NODE_S2 = 24;

export function allocKSPROPERTY_CAMERACONTROL_NODE_S2(data?: Partial<KSPROPERTY_CAMERACONTROL_NODE_S2>): Uint8Array {
  const buf = new Uint8Array(sizeofKSPROPERTY_CAMERACONTROL_NODE_S2);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.NodeProperty !== undefined) view.setBigUint64(0, data.NodeProperty === null ? 0n : BigInt(util.toPointer(data.NodeProperty)), true);
  // 0x08: i32
  if (data?.Value1 !== undefined) view.setInt32(8, Number(data.Value1), true);
  // 0x0c: u32
  if (data?.Flags !== undefined) view.setUint32(12, Number(data.Flags), true);
  // 0x10: u32
  if (data?.Capabilities !== undefined) view.setUint32(16, Number(data.Capabilities), true);
  // 0x14: i32
  if (data?.Value2 !== undefined) view.setInt32(20, Number(data.Value2), true);
  return buf;
}

/**
 * Windows.Win32.Media.KernelStreaming.KSPROPERTY_CAMERACONTROL_FOCAL_LENGTH_S (size: 24)
 */
export interface KSPROPERTY_CAMERACONTROL_FOCAL_LENGTH_S {
  /** Windows.Win32.Media.KernelStreaming.KSIDENTIFIER */
  Property: Uint8Array | Deno.PointerValue | null;
  /** i32 */
  lOcularFocalLength: number;
  /** i32 */
  lObjectiveFocalLengthMin: number;
  /** i32 */
  lObjectiveFocalLengthMax: number;
}

export const sizeofKSPROPERTY_CAMERACONTROL_FOCAL_LENGTH_S = 24;

export function allocKSPROPERTY_CAMERACONTROL_FOCAL_LENGTH_S(data?: Partial<KSPROPERTY_CAMERACONTROL_FOCAL_LENGTH_S>): Uint8Array {
  const buf = new Uint8Array(sizeofKSPROPERTY_CAMERACONTROL_FOCAL_LENGTH_S);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.Property !== undefined) view.setBigUint64(0, data.Property === null ? 0n : BigInt(util.toPointer(data.Property)), true);
  // 0x08: i32
  if (data?.lOcularFocalLength !== undefined) view.setInt32(8, Number(data.lOcularFocalLength), true);
  // 0x0c: i32
  if (data?.lObjectiveFocalLengthMin !== undefined) view.setInt32(12, Number(data.lObjectiveFocalLengthMin), true);
  // 0x10: i32
  if (data?.lObjectiveFocalLengthMax !== undefined) view.setInt32(16, Number(data.lObjectiveFocalLengthMax), true);
  // 0x14: pad4
  return buf;
}

/**
 * Windows.Win32.Media.KernelStreaming.KSPROPERTY_CAMERACONTROL_NODE_FOCAL_LENGTH_S (size: 24)
 */
export interface KSPROPERTY_CAMERACONTROL_NODE_FOCAL_LENGTH_S {
  /** Windows.Win32.Media.KernelStreaming.KSNODEPROPERTY */
  NodeProperty: Uint8Array | Deno.PointerValue | null;
  /** i32 */
  lOcularFocalLength: number;
  /** i32 */
  lObjectiveFocalLengthMin: number;
  /** i32 */
  lObjectiveFocalLengthMax: number;
}

export const sizeofKSPROPERTY_CAMERACONTROL_NODE_FOCAL_LENGTH_S = 24;

export function allocKSPROPERTY_CAMERACONTROL_NODE_FOCAL_LENGTH_S(data?: Partial<KSPROPERTY_CAMERACONTROL_NODE_FOCAL_LENGTH_S>): Uint8Array {
  const buf = new Uint8Array(sizeofKSPROPERTY_CAMERACONTROL_NODE_FOCAL_LENGTH_S);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.NodeProperty !== undefined) view.setBigUint64(0, data.NodeProperty === null ? 0n : BigInt(util.toPointer(data.NodeProperty)), true);
  // 0x08: i32
  if (data?.lOcularFocalLength !== undefined) view.setInt32(8, Number(data.lOcularFocalLength), true);
  // 0x0c: i32
  if (data?.lObjectiveFocalLengthMin !== undefined) view.setInt32(12, Number(data.lObjectiveFocalLengthMin), true);
  // 0x10: i32
  if (data?.lObjectiveFocalLengthMax !== undefined) view.setInt32(16, Number(data.lObjectiveFocalLengthMax), true);
  // 0x14: pad4
  return buf;
}

/**
 * Windows.Win32.Media.KernelStreaming.KSPROPERTY_CAMERACONTROL_FLASH_S (size: 8)
 */
export interface KSPROPERTY_CAMERACONTROL_FLASH_S {
  /** u32 */
  Flash: number;
  /** u32 */
  Capabilities: number;
}

export const sizeofKSPROPERTY_CAMERACONTROL_FLASH_S = 8;

export function allocKSPROPERTY_CAMERACONTROL_FLASH_S(data?: Partial<KSPROPERTY_CAMERACONTROL_FLASH_S>): Uint8Array {
  const buf = new Uint8Array(sizeofKSPROPERTY_CAMERACONTROL_FLASH_S);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.Flash !== undefined) view.setUint32(0, Number(data.Flash), true);
  // 0x04: u32
  if (data?.Capabilities !== undefined) view.setUint32(4, Number(data.Capabilities), true);
  return buf;
}

/**
 * Windows.Win32.Media.KernelStreaming.KSPROPERTY_CAMERACONTROL_VIDEOSTABILIZATION_MODE_S (size: 8)
 */
export interface KSPROPERTY_CAMERACONTROL_VIDEOSTABILIZATION_MODE_S {
  /** u32 */
  VideoStabilizationMode: number;
  /** u32 */
  Capabilities: number;
}

export const sizeofKSPROPERTY_CAMERACONTROL_VIDEOSTABILIZATION_MODE_S = 8;

export function allocKSPROPERTY_CAMERACONTROL_VIDEOSTABILIZATION_MODE_S(data?: Partial<KSPROPERTY_CAMERACONTROL_VIDEOSTABILIZATION_MODE_S>): Uint8Array {
  const buf = new Uint8Array(sizeofKSPROPERTY_CAMERACONTROL_VIDEOSTABILIZATION_MODE_S);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.VideoStabilizationMode !== undefined) view.setUint32(0, Number(data.VideoStabilizationMode), true);
  // 0x04: u32
  if (data?.Capabilities !== undefined) view.setUint32(4, Number(data.Capabilities), true);
  return buf;
}

/**
 * Windows.Win32.Media.KernelStreaming.KSPROPERTY_CAMERACONTROL_REGION_OF_INTEREST_S (size: 32)
 */
export interface KSPROPERTY_CAMERACONTROL_REGION_OF_INTEREST_S {
  /** Windows.Win32.Foundation.RECT */
  FocusRect: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Foundation.BOOL */
  AutoFocusLock: boolean;
  /** Windows.Win32.Foundation.BOOL */
  AutoExposureLock: boolean;
  /** Windows.Win32.Foundation.BOOL */
  AutoWhitebalanceLock: boolean;
  /** _Anonymous_e__Union */
  Anonymous: Uint8Array | Deno.PointerValue | null;
}

export const sizeofKSPROPERTY_CAMERACONTROL_REGION_OF_INTEREST_S = 32;

export function allocKSPROPERTY_CAMERACONTROL_REGION_OF_INTEREST_S(data?: Partial<KSPROPERTY_CAMERACONTROL_REGION_OF_INTEREST_S>): Uint8Array {
  const buf = new Uint8Array(sizeofKSPROPERTY_CAMERACONTROL_REGION_OF_INTEREST_S);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.FocusRect !== undefined) view.setBigUint64(0, data.FocusRect === null ? 0n : BigInt(util.toPointer(data.FocusRect)), true);
  // 0x08: i32
  if (data?.AutoFocusLock !== undefined) view.setInt32(8, Number(data.AutoFocusLock), true);
  // 0x0c: i32
  if (data?.AutoExposureLock !== undefined) view.setInt32(12, Number(data.AutoExposureLock), true);
  // 0x10: i32
  if (data?.AutoWhitebalanceLock !== undefined) view.setInt32(16, Number(data.AutoWhitebalanceLock), true);
  // 0x14: pad4
  // 0x18: pointer
  if (data?.Anonymous !== undefined) view.setBigUint64(24, data.Anonymous === null ? 0n : BigInt(util.toPointer(data.Anonymous)), true);
  return buf;
}

/**
 * Windows.Win32.Media.KernelStreaming.KSPROPERTY_CAMERACONTROL_IMAGE_PIN_CAPABILITY_S (size: 8)
 */
export interface KSPROPERTY_CAMERACONTROL_IMAGE_PIN_CAPABILITY_S {
  /** u32 */
  Capabilities: number;
  /** u32 */
  Reserved0: number;
}

export const sizeofKSPROPERTY_CAMERACONTROL_IMAGE_PIN_CAPABILITY_S = 8;

export function allocKSPROPERTY_CAMERACONTROL_IMAGE_PIN_CAPABILITY_S(data?: Partial<KSPROPERTY_CAMERACONTROL_IMAGE_PIN_CAPABILITY_S>): Uint8Array {
  const buf = new Uint8Array(sizeofKSPROPERTY_CAMERACONTROL_IMAGE_PIN_CAPABILITY_S);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.Capabilities !== undefined) view.setUint32(0, Number(data.Capabilities), true);
  // 0x04: u32
  if (data?.Reserved0 !== undefined) view.setUint32(4, Number(data.Reserved0), true);
  return buf;
}

/**
 * Windows.Win32.Media.KernelStreaming.KSCAMERA_EXTENDEDPROP_HEADER (size: 32)
 */
export interface KSCAMERA_EXTENDEDPROP_HEADER {
  /** u32 */
  Version: number;
  /** u32 */
  PinId: number;
  /** u32 */
  Size: number;
  /** u32 */
  Result: number;
  /** u64 */
  Flags: Deno.PointerValue;
  /** u64 */
  Capability: Deno.PointerValue;
}

export const sizeofKSCAMERA_EXTENDEDPROP_HEADER = 32;

export function allocKSCAMERA_EXTENDEDPROP_HEADER(data?: Partial<KSCAMERA_EXTENDEDPROP_HEADER>): Uint8Array {
  const buf = new Uint8Array(sizeofKSCAMERA_EXTENDEDPROP_HEADER);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.Version !== undefined) view.setUint32(0, Number(data.Version), true);
  // 0x04: u32
  if (data?.PinId !== undefined) view.setUint32(4, Number(data.PinId), true);
  // 0x08: u32
  if (data?.Size !== undefined) view.setUint32(8, Number(data.Size), true);
  // 0x0c: u32
  if (data?.Result !== undefined) view.setUint32(12, Number(data.Result), true);
  // 0x10: u64
  if (data?.Flags !== undefined) view.setBigUint64(16, BigInt(data.Flags), true);
  // 0x18: u64
  if (data?.Capability !== undefined) view.setBigUint64(24, BigInt(data.Capability), true);
  return buf;
}

/**
 * _Value_e__Union (size: 16)
 */
export interface _Value_e__Union {
  /** u16 */
  ShortUuid: number;
  /** System.Guid */
  LongUuid: Uint8Array | Deno.PointerValue | null;
}

export const sizeof_Value_e__Union = 16;

export function alloc_Value_e__Union(data?: Partial<_Value_e__Union>): Uint8Array {
  const buf = new Uint8Array(sizeof_Value_e__Union);
  const view = new DataView(buf.buffer);
  // 0x00: u16
  if (data?.ShortUuid !== undefined) view.setUint16(0, Number(data.ShortUuid), true);
  // 0x02: pad6
  // 0x08: pointer
  if (data?.LongUuid !== undefined) view.setBigUint64(8, data.LongUuid === null ? 0n : BigInt(util.toPointer(data.LongUuid)), true);
  return buf;
}

export type KSCAMERA_EXTENDEDPROP_VALUE = Uint8Array | Deno.PointerValue | null;

/**
 * Windows.Win32.Media.KernelStreaming.KSCAMERA_MAXVIDEOFPS_FORPHOTORES (size: 24)
 */
export interface KSCAMERA_MAXVIDEOFPS_FORPHOTORES {
  /** u32 */
  PhotoResWidth: number;
  /** u32 */
  PhotoResHeight: number;
  /** u32 */
  PreviewFPSNum: number;
  /** u32 */
  PreviewFPSDenom: number;
  /** u32 */
  CaptureFPSNum: number;
  /** u32 */
  CaptureFPSDenom: number;
}

export const sizeofKSCAMERA_MAXVIDEOFPS_FORPHOTORES = 24;

export function allocKSCAMERA_MAXVIDEOFPS_FORPHOTORES(data?: Partial<KSCAMERA_MAXVIDEOFPS_FORPHOTORES>): Uint8Array {
  const buf = new Uint8Array(sizeofKSCAMERA_MAXVIDEOFPS_FORPHOTORES);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.PhotoResWidth !== undefined) view.setUint32(0, Number(data.PhotoResWidth), true);
  // 0x04: u32
  if (data?.PhotoResHeight !== undefined) view.setUint32(4, Number(data.PhotoResHeight), true);
  // 0x08: u32
  if (data?.PreviewFPSNum !== undefined) view.setUint32(8, Number(data.PreviewFPSNum), true);
  // 0x0c: u32
  if (data?.PreviewFPSDenom !== undefined) view.setUint32(12, Number(data.PreviewFPSDenom), true);
  // 0x10: u32
  if (data?.CaptureFPSNum !== undefined) view.setUint32(16, Number(data.CaptureFPSNum), true);
  // 0x14: u32
  if (data?.CaptureFPSDenom !== undefined) view.setUint32(20, Number(data.CaptureFPSDenom), true);
  return buf;
}

/**
 * Windows.Win32.Media.KernelStreaming.KSCAMERA_EXTENDEDPROP_PHOTOMODE (size: 16)
 */
export interface KSCAMERA_EXTENDEDPROP_PHOTOMODE {
  /** u32 */
  RequestedHistoryFrames: number;
  /** u32 */
  MaxHistoryFrames: number;
  /** u32 */
  SubMode: number;
  /** u32 */
  Reserved: number;
}

export const sizeofKSCAMERA_EXTENDEDPROP_PHOTOMODE = 16;

export function allocKSCAMERA_EXTENDEDPROP_PHOTOMODE(data?: Partial<KSCAMERA_EXTENDEDPROP_PHOTOMODE>): Uint8Array {
  const buf = new Uint8Array(sizeofKSCAMERA_EXTENDEDPROP_PHOTOMODE);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.RequestedHistoryFrames !== undefined) view.setUint32(0, Number(data.RequestedHistoryFrames), true);
  // 0x04: u32
  if (data?.MaxHistoryFrames !== undefined) view.setUint32(4, Number(data.MaxHistoryFrames), true);
  // 0x08: u32
  if (data?.SubMode !== undefined) view.setUint32(8, Number(data.SubMode), true);
  // 0x0c: u32
  if (data?.Reserved !== undefined) view.setUint32(12, Number(data.Reserved), true);
  return buf;
}

/**
 * Windows.Win32.Media.KernelStreaming.KSCAMERA_EXTENDEDPROP_VIDEOPROCSETTING (size: 32)
 */
export interface KSCAMERA_EXTENDEDPROP_VIDEOPROCSETTING {
  /** u32 */
  Mode: number;
  /** i32 */
  Min: number;
  /** i32 */
  Max: number;
  /** i32 */
  Step: number;
  /** Windows.Win32.Media.KernelStreaming.KSCAMERA_EXTENDEDPROP_VALUE */
  VideoProc: Uint8Array | Deno.PointerValue | null;
  /** u64 */
  Reserved: Deno.PointerValue;
}

export const sizeofKSCAMERA_EXTENDEDPROP_VIDEOPROCSETTING = 32;

export function allocKSCAMERA_EXTENDEDPROP_VIDEOPROCSETTING(data?: Partial<KSCAMERA_EXTENDEDPROP_VIDEOPROCSETTING>): Uint8Array {
  const buf = new Uint8Array(sizeofKSCAMERA_EXTENDEDPROP_VIDEOPROCSETTING);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.Mode !== undefined) view.setUint32(0, Number(data.Mode), true);
  // 0x04: i32
  if (data?.Min !== undefined) view.setInt32(4, Number(data.Min), true);
  // 0x08: i32
  if (data?.Max !== undefined) view.setInt32(8, Number(data.Max), true);
  // 0x0c: i32
  if (data?.Step !== undefined) view.setInt32(12, Number(data.Step), true);
  // 0x10: pointer
  if (data?.VideoProc !== undefined) view.setBigUint64(16, data.VideoProc === null ? 0n : BigInt(util.toPointer(data.VideoProc)), true);
  // 0x18: u64
  if (data?.Reserved !== undefined) view.setBigUint64(24, BigInt(data.Reserved), true);
  return buf;
}

/**
 * Windows.Win32.Media.KernelStreaming.KSCAMERA_EXTENDEDPROP_EVCOMPENSATION (size: 24)
 */
export interface KSCAMERA_EXTENDEDPROP_EVCOMPENSATION {
  /** u32 */
  Mode: number;
  /** i32 */
  Min: number;
  /** i32 */
  Max: number;
  /** i32 */
  Value: number;
  /** u64 */
  Reserved: Deno.PointerValue;
}

export const sizeofKSCAMERA_EXTENDEDPROP_EVCOMPENSATION = 24;

export function allocKSCAMERA_EXTENDEDPROP_EVCOMPENSATION(data?: Partial<KSCAMERA_EXTENDEDPROP_EVCOMPENSATION>): Uint8Array {
  const buf = new Uint8Array(sizeofKSCAMERA_EXTENDEDPROP_EVCOMPENSATION);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.Mode !== undefined) view.setUint32(0, Number(data.Mode), true);
  // 0x04: i32
  if (data?.Min !== undefined) view.setInt32(4, Number(data.Min), true);
  // 0x08: i32
  if (data?.Max !== undefined) view.setInt32(8, Number(data.Max), true);
  // 0x0c: i32
  if (data?.Value !== undefined) view.setInt32(12, Number(data.Value), true);
  // 0x10: u64
  if (data?.Reserved !== undefined) view.setBigUint64(16, BigInt(data.Reserved), true);
  return buf;
}

/**
 * Windows.Win32.Media.KernelStreaming.KSCAMERA_EXTENDEDPROP_FIELDOFVIEW (size: 16)
 */
export interface KSCAMERA_EXTENDEDPROP_FIELDOFVIEW {
  /** u32 */
  NormalizedFocalLengthX: number;
  /** u32 */
  NormalizedFocalLengthY: number;
  /** u32 */
  Flag: number;
  /** u32 */
  Reserved: number;
}

export const sizeofKSCAMERA_EXTENDEDPROP_FIELDOFVIEW = 16;

export function allocKSCAMERA_EXTENDEDPROP_FIELDOFVIEW(data?: Partial<KSCAMERA_EXTENDEDPROP_FIELDOFVIEW>): Uint8Array {
  const buf = new Uint8Array(sizeofKSCAMERA_EXTENDEDPROP_FIELDOFVIEW);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.NormalizedFocalLengthX !== undefined) view.setUint32(0, Number(data.NormalizedFocalLengthX), true);
  // 0x04: u32
  if (data?.NormalizedFocalLengthY !== undefined) view.setUint32(4, Number(data.NormalizedFocalLengthY), true);
  // 0x08: u32
  if (data?.Flag !== undefined) view.setUint32(8, Number(data.Flag), true);
  // 0x0c: u32
  if (data?.Reserved !== undefined) view.setUint32(12, Number(data.Reserved), true);
  return buf;
}

/**
 * Windows.Win32.Media.KernelStreaming.KSCAMERA_EXTENDEDPROP_CAMERAOFFSET (size: 16)
 */
export interface KSCAMERA_EXTENDEDPROP_CAMERAOFFSET {
  /** i32 */
  PitchAngle: number;
  /** i32 */
  YawAngle: number;
  /** u32 */
  Flag: number;
  /** u32 */
  Reserved: number;
}

export const sizeofKSCAMERA_EXTENDEDPROP_CAMERAOFFSET = 16;

export function allocKSCAMERA_EXTENDEDPROP_CAMERAOFFSET(data?: Partial<KSCAMERA_EXTENDEDPROP_CAMERAOFFSET>): Uint8Array {
  const buf = new Uint8Array(sizeofKSCAMERA_EXTENDEDPROP_CAMERAOFFSET);
  const view = new DataView(buf.buffer);
  // 0x00: i32
  if (data?.PitchAngle !== undefined) view.setInt32(0, Number(data.PitchAngle), true);
  // 0x04: i32
  if (data?.YawAngle !== undefined) view.setInt32(4, Number(data.YawAngle), true);
  // 0x08: u32
  if (data?.Flag !== undefined) view.setUint32(8, Number(data.Flag), true);
  // 0x0c: u32
  if (data?.Reserved !== undefined) view.setUint32(12, Number(data.Reserved), true);
  return buf;
}

/**
 * Windows.Win32.Media.KernelStreaming.KSCAMERA_EXTENDEDPROP_METADATAINFO (size: 8)
 */
export interface KSCAMERA_EXTENDEDPROP_METADATAINFO {
  /** i32 */
  BufferAlignment: number;
  /** u32 */
  MaxMetadataBufferSize: number;
}

export const sizeofKSCAMERA_EXTENDEDPROP_METADATAINFO = 8;

export function allocKSCAMERA_EXTENDEDPROP_METADATAINFO(data?: Partial<KSCAMERA_EXTENDEDPROP_METADATAINFO>): Uint8Array {
  const buf = new Uint8Array(sizeofKSCAMERA_EXTENDEDPROP_METADATAINFO);
  const view = new DataView(buf.buffer);
  // 0x00: i32
  if (data?.BufferAlignment !== undefined) view.setInt32(0, Number(data.BufferAlignment), true);
  // 0x04: u32
  if (data?.MaxMetadataBufferSize !== undefined) view.setUint32(4, Number(data.MaxMetadataBufferSize), true);
  return buf;
}

/**
 * Windows.Win32.Media.KernelStreaming.KSCAMERA_METADATA_ITEMHEADER (size: 8)
 */
export interface KSCAMERA_METADATA_ITEMHEADER {
  /** u32 */
  MetadataId: number;
  /** u32 */
  Size: number;
}

export const sizeofKSCAMERA_METADATA_ITEMHEADER = 8;

export function allocKSCAMERA_METADATA_ITEMHEADER(data?: Partial<KSCAMERA_METADATA_ITEMHEADER>): Uint8Array {
  const buf = new Uint8Array(sizeofKSCAMERA_METADATA_ITEMHEADER);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.MetadataId !== undefined) view.setUint32(0, Number(data.MetadataId), true);
  // 0x04: u32
  if (data?.Size !== undefined) view.setUint32(4, Number(data.Size), true);
  return buf;
}

/**
 * Windows.Win32.Media.KernelStreaming.KSCAMERA_METADATA_PHOTOCONFIRMATION (size: 16)
 */
export interface KSCAMERA_METADATA_PHOTOCONFIRMATION {
  /** Windows.Win32.Media.KernelStreaming.KSCAMERA_METADATA_ITEMHEADER */
  Header: Uint8Array | Deno.PointerValue | null;
  /** u32 */
  PhotoConfirmationIndex: number;
  /** u32 */
  Reserved: number;
}

export const sizeofKSCAMERA_METADATA_PHOTOCONFIRMATION = 16;

export function allocKSCAMERA_METADATA_PHOTOCONFIRMATION(data?: Partial<KSCAMERA_METADATA_PHOTOCONFIRMATION>): Uint8Array {
  const buf = new Uint8Array(sizeofKSCAMERA_METADATA_PHOTOCONFIRMATION);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.Header !== undefined) view.setBigUint64(0, data.Header === null ? 0n : BigInt(util.toPointer(data.Header)), true);
  // 0x08: u32
  if (data?.PhotoConfirmationIndex !== undefined) view.setUint32(8, Number(data.PhotoConfirmationIndex), true);
  // 0x0c: u32
  if (data?.Reserved !== undefined) view.setUint32(12, Number(data.Reserved), true);
  return buf;
}

/**
 * Windows.Win32.Media.KernelStreaming.KSCAMERA_METADATA_FRAMEILLUMINATION (size: 16)
 */
export interface KSCAMERA_METADATA_FRAMEILLUMINATION {
  /** Windows.Win32.Media.KernelStreaming.KSCAMERA_METADATA_ITEMHEADER */
  Header: Uint8Array | Deno.PointerValue | null;
  /** u32 */
  Flags: number;
  /** u32 */
  Reserved: number;
}

export const sizeofKSCAMERA_METADATA_FRAMEILLUMINATION = 16;

export function allocKSCAMERA_METADATA_FRAMEILLUMINATION(data?: Partial<KSCAMERA_METADATA_FRAMEILLUMINATION>): Uint8Array {
  const buf = new Uint8Array(sizeofKSCAMERA_METADATA_FRAMEILLUMINATION);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.Header !== undefined) view.setBigUint64(0, data.Header === null ? 0n : BigInt(util.toPointer(data.Header)), true);
  // 0x08: u32
  if (data?.Flags !== undefined) view.setUint32(8, Number(data.Flags), true);
  // 0x0c: u32
  if (data?.Reserved !== undefined) view.setUint32(12, Number(data.Reserved), true);
  return buf;
}

/**
 * Windows.Win32.Media.KernelStreaming.KSCAMERA_METADATA_CAPTURESTATS (size: 80)
 */
export interface KSCAMERA_METADATA_CAPTURESTATS {
  /** Windows.Win32.Media.KernelStreaming.KSCAMERA_METADATA_ITEMHEADER */
  Header: Uint8Array | Deno.PointerValue | null;
  /** u32 */
  Flags: number;
  /** u32 */
  Reserved: number;
  /** u64 */
  ExposureTime: Deno.PointerValue;
  /** u64 */
  ExposureCompensationFlags: Deno.PointerValue;
  /** i32 */
  ExposureCompensationValue: number;
  /** u32 */
  IsoSpeed: number;
  /** u32 */
  FocusState: number;
  /** u32 */
  LensPosition: number;
  /** u32 */
  WhiteBalance: number;
  /** u32 */
  Flash: number;
  /** u32 */
  FlashPower: number;
  /** u32 */
  ZoomFactor: number;
  /** u64 */
  SceneMode: Deno.PointerValue;
  /** u64 */
  SensorFramerate: Deno.PointerValue;
}

export const sizeofKSCAMERA_METADATA_CAPTURESTATS = 80;

export function allocKSCAMERA_METADATA_CAPTURESTATS(data?: Partial<KSCAMERA_METADATA_CAPTURESTATS>): Uint8Array {
  const buf = new Uint8Array(sizeofKSCAMERA_METADATA_CAPTURESTATS);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.Header !== undefined) view.setBigUint64(0, data.Header === null ? 0n : BigInt(util.toPointer(data.Header)), true);
  // 0x08: u32
  if (data?.Flags !== undefined) view.setUint32(8, Number(data.Flags), true);
  // 0x0c: u32
  if (data?.Reserved !== undefined) view.setUint32(12, Number(data.Reserved), true);
  // 0x10: u64
  if (data?.ExposureTime !== undefined) view.setBigUint64(16, BigInt(data.ExposureTime), true);
  // 0x18: u64
  if (data?.ExposureCompensationFlags !== undefined) view.setBigUint64(24, BigInt(data.ExposureCompensationFlags), true);
  // 0x20: i32
  if (data?.ExposureCompensationValue !== undefined) view.setInt32(32, Number(data.ExposureCompensationValue), true);
  // 0x24: u32
  if (data?.IsoSpeed !== undefined) view.setUint32(36, Number(data.IsoSpeed), true);
  // 0x28: u32
  if (data?.FocusState !== undefined) view.setUint32(40, Number(data.FocusState), true);
  // 0x2c: u32
  if (data?.LensPosition !== undefined) view.setUint32(44, Number(data.LensPosition), true);
  // 0x30: u32
  if (data?.WhiteBalance !== undefined) view.setUint32(48, Number(data.WhiteBalance), true);
  // 0x34: u32
  if (data?.Flash !== undefined) view.setUint32(52, Number(data.Flash), true);
  // 0x38: u32
  if (data?.FlashPower !== undefined) view.setUint32(56, Number(data.FlashPower), true);
  // 0x3c: u32
  if (data?.ZoomFactor !== undefined) view.setUint32(60, Number(data.ZoomFactor), true);
  // 0x40: u64
  if (data?.SceneMode !== undefined) view.setBigUint64(64, BigInt(data.SceneMode), true);
  // 0x48: u64
  if (data?.SensorFramerate !== undefined) view.setBigUint64(72, BigInt(data.SensorFramerate), true);
  return buf;
}

/**
 * Windows.Win32.Media.KernelStreaming.KSCAMERA_EXTENDEDPROP_ROI_CONFIGCAPSHEADER (size: 16)
 */
export interface KSCAMERA_EXTENDEDPROP_ROI_CONFIGCAPSHEADER {
  /** u32 */
  Size: number;
  /** u32 */
  ConfigCapCount: number;
  /** u64 */
  Reserved: Deno.PointerValue;
}

export const sizeofKSCAMERA_EXTENDEDPROP_ROI_CONFIGCAPSHEADER = 16;

export function allocKSCAMERA_EXTENDEDPROP_ROI_CONFIGCAPSHEADER(data?: Partial<KSCAMERA_EXTENDEDPROP_ROI_CONFIGCAPSHEADER>): Uint8Array {
  const buf = new Uint8Array(sizeofKSCAMERA_EXTENDEDPROP_ROI_CONFIGCAPSHEADER);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.Size !== undefined) view.setUint32(0, Number(data.Size), true);
  // 0x04: u32
  if (data?.ConfigCapCount !== undefined) view.setUint32(4, Number(data.ConfigCapCount), true);
  // 0x08: u64
  if (data?.Reserved !== undefined) view.setBigUint64(8, BigInt(data.Reserved), true);
  return buf;
}

/**
 * Windows.Win32.Media.KernelStreaming.KSCAMERA_EXTENDEDPROP_ROI_CONFIGCAPS (size: 16)
 */
export interface KSCAMERA_EXTENDEDPROP_ROI_CONFIGCAPS {
  /** u32 */
  ControlId: number;
  /** u32 */
  MaxNumberOfROIs: number;
  /** u64 */
  Capability: Deno.PointerValue;
}

export const sizeofKSCAMERA_EXTENDEDPROP_ROI_CONFIGCAPS = 16;

export function allocKSCAMERA_EXTENDEDPROP_ROI_CONFIGCAPS(data?: Partial<KSCAMERA_EXTENDEDPROP_ROI_CONFIGCAPS>): Uint8Array {
  const buf = new Uint8Array(sizeofKSCAMERA_EXTENDEDPROP_ROI_CONFIGCAPS);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.ControlId !== undefined) view.setUint32(0, Number(data.ControlId), true);
  // 0x04: u32
  if (data?.MaxNumberOfROIs !== undefined) view.setUint32(4, Number(data.MaxNumberOfROIs), true);
  // 0x08: u64
  if (data?.Capability !== undefined) view.setBigUint64(8, BigInt(data.Capability), true);
  return buf;
}

/**
 * Windows.Win32.Media.KernelStreaming.KSCAMERA_EXTENDEDPROP_ROI_ISPCONTROLHEADER (size: 16)
 */
export interface KSCAMERA_EXTENDEDPROP_ROI_ISPCONTROLHEADER {
  /** u32 */
  Size: number;
  /** u32 */
  ControlCount: number;
  /** u64 */
  Reserved: Deno.PointerValue;
}

export const sizeofKSCAMERA_EXTENDEDPROP_ROI_ISPCONTROLHEADER = 16;

export function allocKSCAMERA_EXTENDEDPROP_ROI_ISPCONTROLHEADER(data?: Partial<KSCAMERA_EXTENDEDPROP_ROI_ISPCONTROLHEADER>): Uint8Array {
  const buf = new Uint8Array(sizeofKSCAMERA_EXTENDEDPROP_ROI_ISPCONTROLHEADER);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.Size !== undefined) view.setUint32(0, Number(data.Size), true);
  // 0x04: u32
  if (data?.ControlCount !== undefined) view.setUint32(4, Number(data.ControlCount), true);
  // 0x08: u64
  if (data?.Reserved !== undefined) view.setBigUint64(8, BigInt(data.Reserved), true);
  return buf;
}

/**
 * Windows.Win32.Media.KernelStreaming.KSCAMERA_EXTENDEDPROP_ROI_ISPCONTROL (size: 16)
 */
export interface KSCAMERA_EXTENDEDPROP_ROI_ISPCONTROL {
  /** u32 */
  ControlId: number;
  /** u32 */
  ROICount: number;
  /** u32 */
  Result: number;
  /** u32 */
  Reserved: number;
}

export const sizeofKSCAMERA_EXTENDEDPROP_ROI_ISPCONTROL = 16;

export function allocKSCAMERA_EXTENDEDPROP_ROI_ISPCONTROL(data?: Partial<KSCAMERA_EXTENDEDPROP_ROI_ISPCONTROL>): Uint8Array {
  const buf = new Uint8Array(sizeofKSCAMERA_EXTENDEDPROP_ROI_ISPCONTROL);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.ControlId !== undefined) view.setUint32(0, Number(data.ControlId), true);
  // 0x04: u32
  if (data?.ROICount !== undefined) view.setUint32(4, Number(data.ROICount), true);
  // 0x08: u32
  if (data?.Result !== undefined) view.setUint32(8, Number(data.Result), true);
  // 0x0c: u32
  if (data?.Reserved !== undefined) view.setUint32(12, Number(data.Reserved), true);
  return buf;
}

/**
 * Windows.Win32.Media.KernelStreaming.KSCAMERA_EXTENDEDPROP_ROI_INFO (size: 24)
 */
export interface KSCAMERA_EXTENDEDPROP_ROI_INFO {
  /** Windows.Win32.Foundation.RECT */
  Region: Uint8Array | Deno.PointerValue | null;
  /** u64 */
  Flags: Deno.PointerValue;
  /** i32 */
  Weight: number;
  /** i32 */
  RegionOfInterestType: number;
}

export const sizeofKSCAMERA_EXTENDEDPROP_ROI_INFO = 24;

export function allocKSCAMERA_EXTENDEDPROP_ROI_INFO(data?: Partial<KSCAMERA_EXTENDEDPROP_ROI_INFO>): Uint8Array {
  const buf = new Uint8Array(sizeofKSCAMERA_EXTENDEDPROP_ROI_INFO);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.Region !== undefined) view.setBigUint64(0, data.Region === null ? 0n : BigInt(util.toPointer(data.Region)), true);
  // 0x08: u64
  if (data?.Flags !== undefined) view.setBigUint64(8, BigInt(data.Flags), true);
  // 0x10: i32
  if (data?.Weight !== undefined) view.setInt32(16, Number(data.Weight), true);
  // 0x14: i32
  if (data?.RegionOfInterestType !== undefined) view.setInt32(20, Number(data.RegionOfInterestType), true);
  return buf;
}

/**
 * Windows.Win32.Media.KernelStreaming.KSCAMERA_EXTENDEDPROP_ROI_WHITEBALANCE (size: 16)
 */
export interface KSCAMERA_EXTENDEDPROP_ROI_WHITEBALANCE {
  /** Windows.Win32.Media.KernelStreaming.KSCAMERA_EXTENDEDPROP_ROI_INFO */
  ROIInfo: Uint8Array | Deno.PointerValue | null;
  /** u64 */
  Reserved: Deno.PointerValue;
}

export const sizeofKSCAMERA_EXTENDEDPROP_ROI_WHITEBALANCE = 16;

export function allocKSCAMERA_EXTENDEDPROP_ROI_WHITEBALANCE(data?: Partial<KSCAMERA_EXTENDEDPROP_ROI_WHITEBALANCE>): Uint8Array {
  const buf = new Uint8Array(sizeofKSCAMERA_EXTENDEDPROP_ROI_WHITEBALANCE);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.ROIInfo !== undefined) view.setBigUint64(0, data.ROIInfo === null ? 0n : BigInt(util.toPointer(data.ROIInfo)), true);
  // 0x08: u64
  if (data?.Reserved !== undefined) view.setBigUint64(8, BigInt(data.Reserved), true);
  return buf;
}

/**
 * Windows.Win32.Media.KernelStreaming.KSCAMERA_EXTENDEDPROP_ROI_EXPOSURE (size: 16)
 */
export interface KSCAMERA_EXTENDEDPROP_ROI_EXPOSURE {
  /** Windows.Win32.Media.KernelStreaming.KSCAMERA_EXTENDEDPROP_ROI_INFO */
  ROIInfo: Uint8Array | Deno.PointerValue | null;
  /** u64 */
  Reserved: Deno.PointerValue;
}

export const sizeofKSCAMERA_EXTENDEDPROP_ROI_EXPOSURE = 16;

export function allocKSCAMERA_EXTENDEDPROP_ROI_EXPOSURE(data?: Partial<KSCAMERA_EXTENDEDPROP_ROI_EXPOSURE>): Uint8Array {
  const buf = new Uint8Array(sizeofKSCAMERA_EXTENDEDPROP_ROI_EXPOSURE);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.ROIInfo !== undefined) view.setBigUint64(0, data.ROIInfo === null ? 0n : BigInt(util.toPointer(data.ROIInfo)), true);
  // 0x08: u64
  if (data?.Reserved !== undefined) view.setBigUint64(8, BigInt(data.Reserved), true);
  return buf;
}

/**
 * Windows.Win32.Media.KernelStreaming.KSCAMERA_EXTENDEDPROP_ROI_FOCUS (size: 16)
 */
export interface KSCAMERA_EXTENDEDPROP_ROI_FOCUS {
  /** Windows.Win32.Media.KernelStreaming.KSCAMERA_EXTENDEDPROP_ROI_INFO */
  ROIInfo: Uint8Array | Deno.PointerValue | null;
  /** u64 */
  Reserved: Deno.PointerValue;
}

export const sizeofKSCAMERA_EXTENDEDPROP_ROI_FOCUS = 16;

export function allocKSCAMERA_EXTENDEDPROP_ROI_FOCUS(data?: Partial<KSCAMERA_EXTENDEDPROP_ROI_FOCUS>): Uint8Array {
  const buf = new Uint8Array(sizeofKSCAMERA_EXTENDEDPROP_ROI_FOCUS);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.ROIInfo !== undefined) view.setBigUint64(0, data.ROIInfo === null ? 0n : BigInt(util.toPointer(data.ROIInfo)), true);
  // 0x08: u64
  if (data?.Reserved !== undefined) view.setBigUint64(8, BigInt(data.Reserved), true);
  return buf;
}

/**
 * Windows.Win32.Media.KernelStreaming.KSCAMERA_PERFRAMESETTING_CAP_ITEM_HEADER (size: 16)
 */
export interface KSCAMERA_PERFRAMESETTING_CAP_ITEM_HEADER {
  /** u32 */
  Size: number;
  /** u32 */
  Type: number;
  /** u64 */
  Flags: Deno.PointerValue;
}

export const sizeofKSCAMERA_PERFRAMESETTING_CAP_ITEM_HEADER = 16;

export function allocKSCAMERA_PERFRAMESETTING_CAP_ITEM_HEADER(data?: Partial<KSCAMERA_PERFRAMESETTING_CAP_ITEM_HEADER>): Uint8Array {
  const buf = new Uint8Array(sizeofKSCAMERA_PERFRAMESETTING_CAP_ITEM_HEADER);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.Size !== undefined) view.setUint32(0, Number(data.Size), true);
  // 0x04: u32
  if (data?.Type !== undefined) view.setUint32(4, Number(data.Type), true);
  // 0x08: u64
  if (data?.Flags !== undefined) view.setBigUint64(8, BigInt(data.Flags), true);
  return buf;
}

/**
 * Windows.Win32.Media.KernelStreaming.KSCAMERA_PERFRAMESETTING_CAP_HEADER (size: 16)
 */
export interface KSCAMERA_PERFRAMESETTING_CAP_HEADER {
  /** u32 */
  Size: number;
  /** u32 */
  ItemCount: number;
  /** u64 */
  Flags: Deno.PointerValue;
}

export const sizeofKSCAMERA_PERFRAMESETTING_CAP_HEADER = 16;

export function allocKSCAMERA_PERFRAMESETTING_CAP_HEADER(data?: Partial<KSCAMERA_PERFRAMESETTING_CAP_HEADER>): Uint8Array {
  const buf = new Uint8Array(sizeofKSCAMERA_PERFRAMESETTING_CAP_HEADER);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.Size !== undefined) view.setUint32(0, Number(data.Size), true);
  // 0x04: u32
  if (data?.ItemCount !== undefined) view.setUint32(4, Number(data.ItemCount), true);
  // 0x08: u64
  if (data?.Flags !== undefined) view.setBigUint64(8, BigInt(data.Flags), true);
  return buf;
}

/**
 * Windows.Win32.Media.KernelStreaming.KSCAMERA_PERFRAMESETTING_CUSTOM_ITEM (size: 16)
 */
export interface KSCAMERA_PERFRAMESETTING_CUSTOM_ITEM {
  /** u32 */
  Size: number;
  /** u32 */
  Reserved: number;
  /** System.Guid */
  Id: Uint8Array | Deno.PointerValue | null;
}

export const sizeofKSCAMERA_PERFRAMESETTING_CUSTOM_ITEM = 16;

export function allocKSCAMERA_PERFRAMESETTING_CUSTOM_ITEM(data?: Partial<KSCAMERA_PERFRAMESETTING_CUSTOM_ITEM>): Uint8Array {
  const buf = new Uint8Array(sizeofKSCAMERA_PERFRAMESETTING_CUSTOM_ITEM);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.Size !== undefined) view.setUint32(0, Number(data.Size), true);
  // 0x04: u32
  if (data?.Reserved !== undefined) view.setUint32(4, Number(data.Reserved), true);
  // 0x08: pointer
  if (data?.Id !== undefined) view.setBigUint64(8, data.Id === null ? 0n : BigInt(util.toPointer(data.Id)), true);
  return buf;
}

/**
 * Windows.Win32.Media.KernelStreaming.KSCAMERA_PERFRAMESETTING_ITEM_HEADER (size: 16)
 */
export interface KSCAMERA_PERFRAMESETTING_ITEM_HEADER {
  /** u32 */
  Size: number;
  /** u32 */
  Type: number;
  /** u64 */
  Flags: Deno.PointerValue;
}

export const sizeofKSCAMERA_PERFRAMESETTING_ITEM_HEADER = 16;

export function allocKSCAMERA_PERFRAMESETTING_ITEM_HEADER(data?: Partial<KSCAMERA_PERFRAMESETTING_ITEM_HEADER>): Uint8Array {
  const buf = new Uint8Array(sizeofKSCAMERA_PERFRAMESETTING_ITEM_HEADER);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.Size !== undefined) view.setUint32(0, Number(data.Size), true);
  // 0x04: u32
  if (data?.Type !== undefined) view.setUint32(4, Number(data.Type), true);
  // 0x08: u64
  if (data?.Flags !== undefined) view.setBigUint64(8, BigInt(data.Flags), true);
  return buf;
}

/**
 * Windows.Win32.Media.KernelStreaming.KSCAMERA_PERFRAMESETTING_FRAME_HEADER (size: 16)
 */
export interface KSCAMERA_PERFRAMESETTING_FRAME_HEADER {
  /** u32 */
  Size: number;
  /** u32 */
  Id: number;
  /** u32 */
  ItemCount: number;
  /** u32 */
  Reserved: number;
}

export const sizeofKSCAMERA_PERFRAMESETTING_FRAME_HEADER = 16;

export function allocKSCAMERA_PERFRAMESETTING_FRAME_HEADER(data?: Partial<KSCAMERA_PERFRAMESETTING_FRAME_HEADER>): Uint8Array {
  const buf = new Uint8Array(sizeofKSCAMERA_PERFRAMESETTING_FRAME_HEADER);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.Size !== undefined) view.setUint32(0, Number(data.Size), true);
  // 0x04: u32
  if (data?.Id !== undefined) view.setUint32(4, Number(data.Id), true);
  // 0x08: u32
  if (data?.ItemCount !== undefined) view.setUint32(8, Number(data.ItemCount), true);
  // 0x0c: u32
  if (data?.Reserved !== undefined) view.setUint32(12, Number(data.Reserved), true);
  return buf;
}

/**
 * Windows.Win32.Media.KernelStreaming.KSCAMERA_PERFRAMESETTING_HEADER (size: 32)
 */
export interface KSCAMERA_PERFRAMESETTING_HEADER {
  /** u32 */
  Size: number;
  /** u32 */
  FrameCount: number;
  /** System.Guid */
  Id: Uint8Array | Deno.PointerValue | null;
  /** u64 */
  Flags: Deno.PointerValue;
  /** u32 */
  LoopCount: number;
  /** u32 */
  Reserved: number;
}

export const sizeofKSCAMERA_PERFRAMESETTING_HEADER = 32;

export function allocKSCAMERA_PERFRAMESETTING_HEADER(data?: Partial<KSCAMERA_PERFRAMESETTING_HEADER>): Uint8Array {
  const buf = new Uint8Array(sizeofKSCAMERA_PERFRAMESETTING_HEADER);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.Size !== undefined) view.setUint32(0, Number(data.Size), true);
  // 0x04: u32
  if (data?.FrameCount !== undefined) view.setUint32(4, Number(data.FrameCount), true);
  // 0x08: pointer
  if (data?.Id !== undefined) view.setBigUint64(8, data.Id === null ? 0n : BigInt(util.toPointer(data.Id)), true);
  // 0x10: u64
  if (data?.Flags !== undefined) view.setBigUint64(16, BigInt(data.Flags), true);
  // 0x18: u32
  if (data?.LoopCount !== undefined) view.setUint32(24, Number(data.LoopCount), true);
  // 0x1c: u32
  if (data?.Reserved !== undefined) view.setUint32(28, Number(data.Reserved), true);
  return buf;
}

/**
 * Windows.Win32.Media.KernelStreaming.KSCAMERA_EXTENDEDPROP_DIGITALWINDOW_SETTING (size: 16)
 */
export interface KSCAMERA_EXTENDEDPROP_DIGITALWINDOW_SETTING {
  /** i32 */
  OriginX: number;
  /** i32 */
  OriginY: number;
  /** i32 */
  WindowSize: number;
  /** u32 */
  Reserved: number;
}

export const sizeofKSCAMERA_EXTENDEDPROP_DIGITALWINDOW_SETTING = 16;

export function allocKSCAMERA_EXTENDEDPROP_DIGITALWINDOW_SETTING(data?: Partial<KSCAMERA_EXTENDEDPROP_DIGITALWINDOW_SETTING>): Uint8Array {
  const buf = new Uint8Array(sizeofKSCAMERA_EXTENDEDPROP_DIGITALWINDOW_SETTING);
  const view = new DataView(buf.buffer);
  // 0x00: i32
  if (data?.OriginX !== undefined) view.setInt32(0, Number(data.OriginX), true);
  // 0x04: i32
  if (data?.OriginY !== undefined) view.setInt32(4, Number(data.OriginY), true);
  // 0x08: i32
  if (data?.WindowSize !== undefined) view.setInt32(8, Number(data.WindowSize), true);
  // 0x0c: u32
  if (data?.Reserved !== undefined) view.setUint32(12, Number(data.Reserved), true);
  return buf;
}

/**
 * Windows.Win32.Media.KernelStreaming.KSCAMERA_METADATA_DIGITALWINDOW (size: 16)
 */
export interface KSCAMERA_METADATA_DIGITALWINDOW {
  /** Windows.Win32.Media.KernelStreaming.KSCAMERA_METADATA_ITEMHEADER */
  Header: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Media.KernelStreaming.KSCAMERA_EXTENDEDPROP_DIGITALWINDOW_SETTING */
  Window: Uint8Array | Deno.PointerValue | null;
}

export const sizeofKSCAMERA_METADATA_DIGITALWINDOW = 16;

export function allocKSCAMERA_METADATA_DIGITALWINDOW(data?: Partial<KSCAMERA_METADATA_DIGITALWINDOW>): Uint8Array {
  const buf = new Uint8Array(sizeofKSCAMERA_METADATA_DIGITALWINDOW);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.Header !== undefined) view.setBigUint64(0, data.Header === null ? 0n : BigInt(util.toPointer(data.Header)), true);
  // 0x08: pointer
  if (data?.Window !== undefined) view.setBigUint64(8, data.Window === null ? 0n : BigInt(util.toPointer(data.Window)), true);
  return buf;
}

/**
 * Windows.Win32.Media.KernelStreaming.KSCAMERA_EXTENDEDPROP_DIGITALWINDOW_CONFIGCAPSHEADER (size: 8)
 */
export interface KSCAMERA_EXTENDEDPROP_DIGITALWINDOW_CONFIGCAPSHEADER {
  /** u32 */
  Size: number;
  /** u32 */
  Count: number;
}

export const sizeofKSCAMERA_EXTENDEDPROP_DIGITALWINDOW_CONFIGCAPSHEADER = 8;

export function allocKSCAMERA_EXTENDEDPROP_DIGITALWINDOW_CONFIGCAPSHEADER(data?: Partial<KSCAMERA_EXTENDEDPROP_DIGITALWINDOW_CONFIGCAPSHEADER>): Uint8Array {
  const buf = new Uint8Array(sizeofKSCAMERA_EXTENDEDPROP_DIGITALWINDOW_CONFIGCAPSHEADER);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.Size !== undefined) view.setUint32(0, Number(data.Size), true);
  // 0x04: u32
  if (data?.Count !== undefined) view.setUint32(4, Number(data.Count), true);
  return buf;
}

/**
 * Windows.Win32.Media.KernelStreaming.KSCAMERA_EXTENDEDPROP_DIGITALWINDOW_CONFIGCAPS (size: 40)
 */
export interface KSCAMERA_EXTENDEDPROP_DIGITALWINDOW_CONFIGCAPS {
  /** i32 */
  ResolutionX: number;
  /** i32 */
  ResolutionY: number;
  /** i32 */
  PorchTop: number;
  /** i32 */
  PorchLeft: number;
  /** i32 */
  PorchBottom: number;
  /** i32 */
  PorchRight: number;
  /** i32 */
  NonUpscalingWindowSize: number;
  /** i32 */
  MinWindowSize: number;
  /** i32 */
  MaxWindowSize: number;
  /** i32 */
  Reserved: number;
}

export const sizeofKSCAMERA_EXTENDEDPROP_DIGITALWINDOW_CONFIGCAPS = 40;

export function allocKSCAMERA_EXTENDEDPROP_DIGITALWINDOW_CONFIGCAPS(data?: Partial<KSCAMERA_EXTENDEDPROP_DIGITALWINDOW_CONFIGCAPS>): Uint8Array {
  const buf = new Uint8Array(sizeofKSCAMERA_EXTENDEDPROP_DIGITALWINDOW_CONFIGCAPS);
  const view = new DataView(buf.buffer);
  // 0x00: i32
  if (data?.ResolutionX !== undefined) view.setInt32(0, Number(data.ResolutionX), true);
  // 0x04: i32
  if (data?.ResolutionY !== undefined) view.setInt32(4, Number(data.ResolutionY), true);
  // 0x08: i32
  if (data?.PorchTop !== undefined) view.setInt32(8, Number(data.PorchTop), true);
  // 0x0c: i32
  if (data?.PorchLeft !== undefined) view.setInt32(12, Number(data.PorchLeft), true);
  // 0x10: i32
  if (data?.PorchBottom !== undefined) view.setInt32(16, Number(data.PorchBottom), true);
  // 0x14: i32
  if (data?.PorchRight !== undefined) view.setInt32(20, Number(data.PorchRight), true);
  // 0x18: i32
  if (data?.NonUpscalingWindowSize !== undefined) view.setInt32(24, Number(data.NonUpscalingWindowSize), true);
  // 0x1c: i32
  if (data?.MinWindowSize !== undefined) view.setInt32(28, Number(data.MinWindowSize), true);
  // 0x20: i32
  if (data?.MaxWindowSize !== undefined) view.setInt32(32, Number(data.MaxWindowSize), true);
  // 0x24: i32
  if (data?.Reserved !== undefined) view.setInt32(36, Number(data.Reserved), true);
  return buf;
}

/**
 * _MaxFrameRate_e__Struct (size: 8)
 */
export interface _MaxFrameRate_e__Struct {
  /** i32 */
  Numerator: number;
  /** i32 */
  Denominator: number;
}

export const sizeof_MaxFrameRate_e__Struct = 8;

export function alloc_MaxFrameRate_e__Struct(data?: Partial<_MaxFrameRate_e__Struct>): Uint8Array {
  const buf = new Uint8Array(sizeof_MaxFrameRate_e__Struct);
  const view = new DataView(buf.buffer);
  // 0x00: i32
  if (data?.Numerator !== undefined) view.setInt32(0, Number(data.Numerator), true);
  // 0x04: i32
  if (data?.Denominator !== undefined) view.setInt32(4, Number(data.Denominator), true);
  return buf;
}

/**
 * Windows.Win32.Media.KernelStreaming.KSCAMERA_EXTENDEDPROP_BACKGROUNDSEGMENTATION_CONFIGCAPS (size: 32)
 */
export interface KSCAMERA_EXTENDEDPROP_BACKGROUNDSEGMENTATION_CONFIGCAPS {
  /** Windows.Win32.Foundation.SIZE */
  Resolution: Uint8Array | Deno.PointerValue | null;
  /** _MaxFrameRate_e__Struct */
  MaxFrameRate: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Foundation.SIZE */
  MaskResolution: Uint8Array | Deno.PointerValue | null;
  /** System.Guid */
  SubType: Uint8Array | Deno.PointerValue | null;
}

export const sizeofKSCAMERA_EXTENDEDPROP_BACKGROUNDSEGMENTATION_CONFIGCAPS = 32;

export function allocKSCAMERA_EXTENDEDPROP_BACKGROUNDSEGMENTATION_CONFIGCAPS(data?: Partial<KSCAMERA_EXTENDEDPROP_BACKGROUNDSEGMENTATION_CONFIGCAPS>): Uint8Array {
  const buf = new Uint8Array(sizeofKSCAMERA_EXTENDEDPROP_BACKGROUNDSEGMENTATION_CONFIGCAPS);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.Resolution !== undefined) view.setBigUint64(0, data.Resolution === null ? 0n : BigInt(util.toPointer(data.Resolution)), true);
  // 0x08: pointer
  if (data?.MaxFrameRate !== undefined) view.setBigUint64(8, data.MaxFrameRate === null ? 0n : BigInt(util.toPointer(data.MaxFrameRate)), true);
  // 0x10: pointer
  if (data?.MaskResolution !== undefined) view.setBigUint64(16, data.MaskResolution === null ? 0n : BigInt(util.toPointer(data.MaskResolution)), true);
  // 0x18: pointer
  if (data?.SubType !== undefined) view.setBigUint64(24, data.SubType === null ? 0n : BigInt(util.toPointer(data.SubType)), true);
  return buf;
}

/**
 * Windows.Win32.Media.KernelStreaming.KSCAMERA_METADATA_BACKGROUNDSEGMENTATIONMASK (size: 40)
 */
export interface KSCAMERA_METADATA_BACKGROUNDSEGMENTATIONMASK {
  /** Windows.Win32.Media.KernelStreaming.KSCAMERA_METADATA_ITEMHEADER */
  Header: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Foundation.RECT */
  MaskCoverageBoundingBox: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Foundation.SIZE */
  MaskResolution: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Foundation.RECT */
  ForegroundBoundingBox: Uint8Array | Deno.PointerValue | null;
  /** array */
  MaskData: Deno.PointerValue | null;
}

export const sizeofKSCAMERA_METADATA_BACKGROUNDSEGMENTATIONMASK = 40;

export function allocKSCAMERA_METADATA_BACKGROUNDSEGMENTATIONMASK(data?: Partial<KSCAMERA_METADATA_BACKGROUNDSEGMENTATIONMASK>): Uint8Array {
  const buf = new Uint8Array(sizeofKSCAMERA_METADATA_BACKGROUNDSEGMENTATIONMASK);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.Header !== undefined) view.setBigUint64(0, data.Header === null ? 0n : BigInt(util.toPointer(data.Header)), true);
  // 0x08: pointer
  if (data?.MaskCoverageBoundingBox !== undefined) view.setBigUint64(8, data.MaskCoverageBoundingBox === null ? 0n : BigInt(util.toPointer(data.MaskCoverageBoundingBox)), true);
  // 0x10: pointer
  if (data?.MaskResolution !== undefined) view.setBigUint64(16, data.MaskResolution === null ? 0n : BigInt(util.toPointer(data.MaskResolution)), true);
  // 0x18: pointer
  if (data?.ForegroundBoundingBox !== undefined) view.setBigUint64(24, data.ForegroundBoundingBox === null ? 0n : BigInt(util.toPointer(data.ForegroundBoundingBox)), true);
  // 0x20: pointer
  if (data?.MaskData !== undefined) view.setBigUint64(32, data.MaskData === null ? 0n : BigInt(util.toPointer(data.MaskData)), true);
  return buf;
}

/**
 * Windows.Win32.Media.KernelStreaming.KSCAMERA_EXTENDEDPROP_PROFILE (size: 16)
 */
export interface KSCAMERA_EXTENDEDPROP_PROFILE {
  /** System.Guid */
  ProfileId: Uint8Array | Deno.PointerValue | null;
  /** u32 */
  Index: number;
  /** u32 */
  Reserved: number;
}

export const sizeofKSCAMERA_EXTENDEDPROP_PROFILE = 16;

export function allocKSCAMERA_EXTENDEDPROP_PROFILE(data?: Partial<KSCAMERA_EXTENDEDPROP_PROFILE>): Uint8Array {
  const buf = new Uint8Array(sizeofKSCAMERA_EXTENDEDPROP_PROFILE);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.ProfileId !== undefined) view.setBigUint64(0, data.ProfileId === null ? 0n : BigInt(util.toPointer(data.ProfileId)), true);
  // 0x08: u32
  if (data?.Index !== undefined) view.setUint32(8, Number(data.Index), true);
  // 0x0c: u32
  if (data?.Reserved !== undefined) view.setUint32(12, Number(data.Reserved), true);
  return buf;
}

/**
 * _Resolution_e__Struct (size: 8)
 */
export interface _Resolution_e__Struct {
  /** u32 */
  X: number;
  /** u32 */
  Y: number;
}

export const sizeof_Resolution_e__Struct = 8;

export function alloc_Resolution_e__Struct(data?: Partial<_Resolution_e__Struct>): Uint8Array {
  const buf = new Uint8Array(sizeof_Resolution_e__Struct);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.X !== undefined) view.setUint32(0, Number(data.X), true);
  // 0x04: u32
  if (data?.Y !== undefined) view.setUint32(4, Number(data.Y), true);
  return buf;
}

/**
 * Windows.Win32.Media.KernelStreaming.KSCAMERA_PROFILE_MEDIAINFO (size: 40)
 */
export interface KSCAMERA_PROFILE_MEDIAINFO {
  /** _Resolution_e__Struct */
  Resolution: Uint8Array | Deno.PointerValue | null;
  /** _MaxFrameRate_e__Struct */
  MaxFrameRate: Uint8Array | Deno.PointerValue | null;
  /** u64 */
  Flags: Deno.PointerValue;
  /** u32 */
  Data0: number;
  /** u32 */
  Data1: number;
  /** u32 */
  Data2: number;
  /** u32 */
  Data3: number;
}

export const sizeofKSCAMERA_PROFILE_MEDIAINFO = 40;

export function allocKSCAMERA_PROFILE_MEDIAINFO(data?: Partial<KSCAMERA_PROFILE_MEDIAINFO>): Uint8Array {
  const buf = new Uint8Array(sizeofKSCAMERA_PROFILE_MEDIAINFO);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.Resolution !== undefined) view.setBigUint64(0, data.Resolution === null ? 0n : BigInt(util.toPointer(data.Resolution)), true);
  // 0x08: pointer
  if (data?.MaxFrameRate !== undefined) view.setBigUint64(8, data.MaxFrameRate === null ? 0n : BigInt(util.toPointer(data.MaxFrameRate)), true);
  // 0x10: u64
  if (data?.Flags !== undefined) view.setBigUint64(16, BigInt(data.Flags), true);
  // 0x18: u32
  if (data?.Data0 !== undefined) view.setUint32(24, Number(data.Data0), true);
  // 0x1c: u32
  if (data?.Data1 !== undefined) view.setUint32(28, Number(data.Data1), true);
  // 0x20: u32
  if (data?.Data2 !== undefined) view.setUint32(32, Number(data.Data2), true);
  // 0x24: u32
  if (data?.Data3 !== undefined) view.setUint32(36, Number(data.Data3), true);
  return buf;
}

/**
 * Windows.Win32.Media.KernelStreaming.KSCAMERA_PROFILE_PININFO (size: 32)
 */
export interface KSCAMERA_PROFILE_PININFO {
  /** System.Guid */
  PinCategory: Uint8Array | Deno.PointerValue | null;
  /** _Anonymous_e__Union */
  Anonymous: Uint8Array | Deno.PointerValue | null;
  /** u32 */
  MediaInfoCount: number;
  /** ptr */
  MediaInfos: Deno.PointerValue | Uint8Array | null;
}

export const sizeofKSCAMERA_PROFILE_PININFO = 32;

export function allocKSCAMERA_PROFILE_PININFO(data?: Partial<KSCAMERA_PROFILE_PININFO>): Uint8Array {
  const buf = new Uint8Array(sizeofKSCAMERA_PROFILE_PININFO);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.PinCategory !== undefined) view.setBigUint64(0, data.PinCategory === null ? 0n : BigInt(util.toPointer(data.PinCategory)), true);
  // 0x08: pointer
  if (data?.Anonymous !== undefined) view.setBigUint64(8, data.Anonymous === null ? 0n : BigInt(util.toPointer(data.Anonymous)), true);
  // 0x10: u32
  if (data?.MediaInfoCount !== undefined) view.setUint32(16, Number(data.MediaInfoCount), true);
  // 0x14: pad4
  // 0x18: pointer
  if (data?.MediaInfos !== undefined) view.setBigUint64(24, data.MediaInfos === null ? 0n : BigInt(util.toPointer(data.MediaInfos)), true);
  return buf;
}

/**
 * Windows.Win32.Media.KernelStreaming.KSCAMERA_PROFILE_INFO (size: 24)
 */
export interface KSCAMERA_PROFILE_INFO {
  /** System.Guid */
  ProfileId: Uint8Array | Deno.PointerValue | null;
  /** u32 */
  Index: number;
  /** u32 */
  PinCount: number;
  /** ptr */
  Pins: Deno.PointerValue | Uint8Array | null;
}

export const sizeofKSCAMERA_PROFILE_INFO = 24;

export function allocKSCAMERA_PROFILE_INFO(data?: Partial<KSCAMERA_PROFILE_INFO>): Uint8Array {
  const buf = new Uint8Array(sizeofKSCAMERA_PROFILE_INFO);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.ProfileId !== undefined) view.setBigUint64(0, data.ProfileId === null ? 0n : BigInt(util.toPointer(data.ProfileId)), true);
  // 0x08: u32
  if (data?.Index !== undefined) view.setUint32(8, Number(data.Index), true);
  // 0x0c: u32
  if (data?.PinCount !== undefined) view.setUint32(12, Number(data.PinCount), true);
  // 0x10: pointer
  if (data?.Pins !== undefined) view.setBigUint64(16, data.Pins === null ? 0n : BigInt(util.toPointer(data.Pins)), true);
  return buf;
}

/**
 * Windows.Win32.Media.KernelStreaming.KSCAMERA_PROFILE_CONCURRENCYINFO (size: 24)
 */
export interface KSCAMERA_PROFILE_CONCURRENCYINFO {
  /** System.Guid */
  ReferenceGuid: Uint8Array | Deno.PointerValue | null;
  /** u32 */
  Reserved: number;
  /** u32 */
  ProfileCount: number;
  /** ptr */
  Profiles: Deno.PointerValue | Uint8Array | null;
}

export const sizeofKSCAMERA_PROFILE_CONCURRENCYINFO = 24;

export function allocKSCAMERA_PROFILE_CONCURRENCYINFO(data?: Partial<KSCAMERA_PROFILE_CONCURRENCYINFO>): Uint8Array {
  const buf = new Uint8Array(sizeofKSCAMERA_PROFILE_CONCURRENCYINFO);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.ReferenceGuid !== undefined) view.setBigUint64(0, data.ReferenceGuid === null ? 0n : BigInt(util.toPointer(data.ReferenceGuid)), true);
  // 0x08: u32
  if (data?.Reserved !== undefined) view.setUint32(8, Number(data.Reserved), true);
  // 0x0c: u32
  if (data?.ProfileCount !== undefined) view.setUint32(12, Number(data.ProfileCount), true);
  // 0x10: pointer
  if (data?.Profiles !== undefined) view.setBigUint64(16, data.Profiles === null ? 0n : BigInt(util.toPointer(data.Profiles)), true);
  return buf;
}

/**
 * Windows.Win32.Media.KernelStreaming.KSDEVICE_PROFILE_INFO (size: 16)
 */
export interface KSDEVICE_PROFILE_INFO {
  /** u32 */
  Type: number;
  /** u32 */
  Size: number;
  /** _Anonymous_e__Union */
  Anonymous: Uint8Array | Deno.PointerValue | null;
}

export const sizeofKSDEVICE_PROFILE_INFO = 16;

export function allocKSDEVICE_PROFILE_INFO(data?: Partial<KSDEVICE_PROFILE_INFO>): Uint8Array {
  const buf = new Uint8Array(sizeofKSDEVICE_PROFILE_INFO);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.Type !== undefined) view.setUint32(0, Number(data.Type), true);
  // 0x04: u32
  if (data?.Size !== undefined) view.setUint32(4, Number(data.Size), true);
  // 0x08: pointer
  if (data?.Anonymous !== undefined) view.setBigUint64(8, data.Anonymous === null ? 0n : BigInt(util.toPointer(data.Anonymous)), true);
  return buf;
}

/**
 * Windows.Win32.Media.KernelStreaming.WNF_KSCAMERA_STREAMSTATE_INFO (size: 16)
 */
export interface WNF_KSCAMERA_STREAMSTATE_INFO {
  /** u32 */
  ProcessId: number;
  /** u32 */
  SessionId: number;
  /** u32 */
  StreamState: number;
  /** u32 */
  Reserved: number;
}

export const sizeofWNF_KSCAMERA_STREAMSTATE_INFO = 16;

export function allocWNF_KSCAMERA_STREAMSTATE_INFO(data?: Partial<WNF_KSCAMERA_STREAMSTATE_INFO>): Uint8Array {
  const buf = new Uint8Array(sizeofWNF_KSCAMERA_STREAMSTATE_INFO);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.ProcessId !== undefined) view.setUint32(0, Number(data.ProcessId), true);
  // 0x04: u32
  if (data?.SessionId !== undefined) view.setUint32(4, Number(data.SessionId), true);
  // 0x08: u32
  if (data?.StreamState !== undefined) view.setUint32(8, Number(data.StreamState), true);
  // 0x0c: u32
  if (data?.Reserved !== undefined) view.setUint32(12, Number(data.Reserved), true);
  return buf;
}

/**
 * Windows.Win32.Media.KernelStreaming.KSPROPERTY_NETWORKCAMERACONTROL_NTPINFO_HEADER (size: 8)
 */
export interface KSPROPERTY_NETWORKCAMERACONTROL_NTPINFO_HEADER {
  /** u32 */
  Size: number;
  /** Windows.Win32.Media.KernelStreaming.KSPROPERTY_NETWORKCAMERACONTROL_NTPINFO_TYPE */
  Type: KSPROPERTY_NETWORKCAMERACONTROL_NTPINFO_TYPE;
}

export const sizeofKSPROPERTY_NETWORKCAMERACONTROL_NTPINFO_HEADER = 8;

export function allocKSPROPERTY_NETWORKCAMERACONTROL_NTPINFO_HEADER(data?: Partial<KSPROPERTY_NETWORKCAMERACONTROL_NTPINFO_HEADER>): Uint8Array {
  const buf = new Uint8Array(sizeofKSPROPERTY_NETWORKCAMERACONTROL_NTPINFO_HEADER);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.Size !== undefined) view.setUint32(0, Number(data.Size), true);
  // 0x04: i32
  if (data?.Type !== undefined) view.setInt32(4, Number(data.Type), true);
  return buf;
}

/**
 * Windows.Win32.Media.KernelStreaming.KSPROPERTY_NETWORKCAMERACONTROL_METADATA_INFO (size: 24)
 */
export interface KSPROPERTY_NETWORKCAMERACONTROL_METADATA_INFO {
  /** u32 */
  MetadataItems: number;
  /** u32 */
  Size: number;
  /** Windows.Win32.Foundation.BOOL */
  PTZStatus: boolean;
  /** Windows.Win32.Foundation.BOOL */
  Events: boolean;
  /** Windows.Win32.Foundation.BOOL */
  Analytics: boolean;
  /** Windows.Win32.Foundation.BOOL */
  Reserved: boolean;
}

export const sizeofKSPROPERTY_NETWORKCAMERACONTROL_METADATA_INFO = 24;

export function allocKSPROPERTY_NETWORKCAMERACONTROL_METADATA_INFO(data?: Partial<KSPROPERTY_NETWORKCAMERACONTROL_METADATA_INFO>): Uint8Array {
  const buf = new Uint8Array(sizeofKSPROPERTY_NETWORKCAMERACONTROL_METADATA_INFO);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.MetadataItems !== undefined) view.setUint32(0, Number(data.MetadataItems), true);
  // 0x04: u32
  if (data?.Size !== undefined) view.setUint32(4, Number(data.Size), true);
  // 0x08: i32
  if (data?.PTZStatus !== undefined) view.setInt32(8, Number(data.PTZStatus), true);
  // 0x0c: i32
  if (data?.Events !== undefined) view.setInt32(12, Number(data.Events), true);
  // 0x10: i32
  if (data?.Analytics !== undefined) view.setInt32(16, Number(data.Analytics), true);
  // 0x14: i32
  if (data?.Reserved !== undefined) view.setInt32(20, Number(data.Reserved), true);
  return buf;
}

/**
 * Windows.Win32.Media.KernelStreaming.KSPROPERTY_NETWORKCAMERACONTROL_EVENT_INFO (size: 16)
 */
export interface KSPROPERTY_NETWORKCAMERACONTROL_EVENT_INFO {
  /** Windows.Win32.Media.KernelStreaming.KSCAMERA_METADATA_ITEMHEADER */
  Header: Uint8Array | Deno.PointerValue | null;
  /** array */
  EventFilter: Deno.PointerValue | null;
}

export const sizeofKSPROPERTY_NETWORKCAMERACONTROL_EVENT_INFO = 16;

export function allocKSPROPERTY_NETWORKCAMERACONTROL_EVENT_INFO(data?: Partial<KSPROPERTY_NETWORKCAMERACONTROL_EVENT_INFO>): Uint8Array {
  const buf = new Uint8Array(sizeofKSPROPERTY_NETWORKCAMERACONTROL_EVENT_INFO);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.Header !== undefined) view.setBigUint64(0, data.Header === null ? 0n : BigInt(util.toPointer(data.Header)), true);
  // 0x08: pointer
  if (data?.EventFilter !== undefined) view.setBigUint64(8, data.EventFilter === null ? 0n : BigInt(util.toPointer(data.EventFilter)), true);
  return buf;
}

/**
 * Windows.Win32.Media.KernelStreaming.DEVCAPS (size: 96)
 */
export interface DEVCAPS {
  /** i32 */
  CanRecord: number;
  /** i32 */
  CanRecordStrobe: number;
  /** i32 */
  HasAudio: number;
  /** i32 */
  HasVideo: number;
  /** i32 */
  UsesFiles: number;
  /** i32 */
  CanSave: number;
  /** i32 */
  DeviceType: number;
  /** i32 */
  TCRead: number;
  /** i32 */
  TCWrite: number;
  /** i32 */
  CTLRead: number;
  /** i32 */
  IndexRead: number;
  /** i32 */
  Preroll: number;
  /** i32 */
  Postroll: number;
  /** i32 */
  SyncAcc: number;
  /** i32 */
  NormRate: number;
  /** i32 */
  CanPreview: number;
  /** i32 */
  CanMonitorSrc: number;
  /** i32 */
  CanTest: number;
  /** i32 */
  VideoIn: number;
  /** i32 */
  AudioIn: number;
  /** i32 */
  Calibrate: number;
  /** i32 */
  SeekType: number;
  /** i32 */
  SimulatedHardware: number;
}

export const sizeofDEVCAPS = 96;

export function allocDEVCAPS(data?: Partial<DEVCAPS>): Uint8Array {
  const buf = new Uint8Array(sizeofDEVCAPS);
  const view = new DataView(buf.buffer);
  // 0x00: i32
  if (data?.CanRecord !== undefined) view.setInt32(0, Number(data.CanRecord), true);
  // 0x04: i32
  if (data?.CanRecordStrobe !== undefined) view.setInt32(4, Number(data.CanRecordStrobe), true);
  // 0x08: i32
  if (data?.HasAudio !== undefined) view.setInt32(8, Number(data.HasAudio), true);
  // 0x0c: i32
  if (data?.HasVideo !== undefined) view.setInt32(12, Number(data.HasVideo), true);
  // 0x10: i32
  if (data?.UsesFiles !== undefined) view.setInt32(16, Number(data.UsesFiles), true);
  // 0x14: i32
  if (data?.CanSave !== undefined) view.setInt32(20, Number(data.CanSave), true);
  // 0x18: i32
  if (data?.DeviceType !== undefined) view.setInt32(24, Number(data.DeviceType), true);
  // 0x1c: i32
  if (data?.TCRead !== undefined) view.setInt32(28, Number(data.TCRead), true);
  // 0x20: i32
  if (data?.TCWrite !== undefined) view.setInt32(32, Number(data.TCWrite), true);
  // 0x24: i32
  if (data?.CTLRead !== undefined) view.setInt32(36, Number(data.CTLRead), true);
  // 0x28: i32
  if (data?.IndexRead !== undefined) view.setInt32(40, Number(data.IndexRead), true);
  // 0x2c: i32
  if (data?.Preroll !== undefined) view.setInt32(44, Number(data.Preroll), true);
  // 0x30: i32
  if (data?.Postroll !== undefined) view.setInt32(48, Number(data.Postroll), true);
  // 0x34: i32
  if (data?.SyncAcc !== undefined) view.setInt32(52, Number(data.SyncAcc), true);
  // 0x38: i32
  if (data?.NormRate !== undefined) view.setInt32(56, Number(data.NormRate), true);
  // 0x3c: i32
  if (data?.CanPreview !== undefined) view.setInt32(60, Number(data.CanPreview), true);
  // 0x40: i32
  if (data?.CanMonitorSrc !== undefined) view.setInt32(64, Number(data.CanMonitorSrc), true);
  // 0x44: i32
  if (data?.CanTest !== undefined) view.setInt32(68, Number(data.CanTest), true);
  // 0x48: i32
  if (data?.VideoIn !== undefined) view.setInt32(72, Number(data.VideoIn), true);
  // 0x4c: i32
  if (data?.AudioIn !== undefined) view.setInt32(76, Number(data.AudioIn), true);
  // 0x50: i32
  if (data?.Calibrate !== undefined) view.setInt32(80, Number(data.Calibrate), true);
  // 0x54: i32
  if (data?.SeekType !== undefined) view.setInt32(84, Number(data.SeekType), true);
  // 0x58: i32
  if (data?.SimulatedHardware !== undefined) view.setInt32(88, Number(data.SimulatedHardware), true);
  // 0x5c: pad4
  return buf;
}

export type NTSTATUS = number;

/**
 * Windows.Win32.System.Diagnostics.Debug.EXCEPTION_RECORD (size: 48)
 */
export interface EXCEPTION_RECORD {
  /** Windows.Win32.Foundation.NTSTATUS */
  ExceptionCode: Uint8Array | Deno.PointerValue | null;
  /** u32 */
  ExceptionFlags: number;
  /** ptr */
  ExceptionRecord: Deno.PointerValue | Uint8Array | null;
  /** ptr */
  ExceptionAddress: Deno.PointerValue | Uint8Array | null;
  /** u32 */
  NumberParameters: number;
  /** array */
  ExceptionInformation: Deno.PointerValue | null;
}

export const sizeofEXCEPTION_RECORD = 48;

export function allocEXCEPTION_RECORD(data?: Partial<EXCEPTION_RECORD>): Uint8Array {
  const buf = new Uint8Array(sizeofEXCEPTION_RECORD);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.ExceptionCode !== undefined) view.setBigUint64(0, data.ExceptionCode === null ? 0n : BigInt(util.toPointer(data.ExceptionCode)), true);
  // 0x08: u32
  if (data?.ExceptionFlags !== undefined) view.setUint32(8, Number(data.ExceptionFlags), true);
  // 0x0c: pad4
  // 0x10: pointer
  if (data?.ExceptionRecord !== undefined) view.setBigUint64(16, data.ExceptionRecord === null ? 0n : BigInt(util.toPointer(data.ExceptionRecord)), true);
  // 0x18: pointer
  if (data?.ExceptionAddress !== undefined) view.setBigUint64(24, data.ExceptionAddress === null ? 0n : BigInt(util.toPointer(data.ExceptionAddress)), true);
  // 0x20: u32
  if (data?.NumberParameters !== undefined) view.setUint32(32, Number(data.NumberParameters), true);
  // 0x24: pad4
  // 0x28: pointer
  if (data?.ExceptionInformation !== undefined) view.setBigUint64(40, data.ExceptionInformation === null ? 0n : BigInt(util.toPointer(data.ExceptionInformation)), true);
  return buf;
}

/**
 * Windows.Win32.System.Diagnostics.Debug.EXCEPTION_DEBUG_INFO (size: 16)
 */
export interface EXCEPTION_DEBUG_INFO {
  /** Windows.Win32.System.Diagnostics.Debug.EXCEPTION_RECORD */
  ExceptionRecord: Uint8Array | Deno.PointerValue | null;
  /** u32 */
  dwFirstChance: number;
}

export const sizeofEXCEPTION_DEBUG_INFO = 16;

export function allocEXCEPTION_DEBUG_INFO(data?: Partial<EXCEPTION_DEBUG_INFO>): Uint8Array {
  const buf = new Uint8Array(sizeofEXCEPTION_DEBUG_INFO);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.ExceptionRecord !== undefined) view.setBigUint64(0, data.ExceptionRecord === null ? 0n : BigInt(util.toPointer(data.ExceptionRecord)), true);
  // 0x08: u32
  if (data?.dwFirstChance !== undefined) view.setUint32(8, Number(data.dwFirstChance), true);
  // 0x0c: pad4
  return buf;
}

/**
 * Windows.Win32.System.Diagnostics.Debug.CREATE_THREAD_DEBUG_INFO (size: 24)
 */
export interface CREATE_THREAD_DEBUG_INFO {
  /** Windows.Win32.Foundation.HANDLE */
  hThread: Uint8Array | Deno.PointerValue | null;
  /** ptr */
  lpThreadLocalBase: Deno.PointerValue | Uint8Array | null;
  /** Windows.Win32.System.Threading.LPTHREAD_START_ROUTINE */
  lpStartAddress: Uint8Array | Deno.PointerValue | null;
}

export const sizeofCREATE_THREAD_DEBUG_INFO = 24;

export function allocCREATE_THREAD_DEBUG_INFO(data?: Partial<CREATE_THREAD_DEBUG_INFO>): Uint8Array {
  const buf = new Uint8Array(sizeofCREATE_THREAD_DEBUG_INFO);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.hThread !== undefined) view.setBigUint64(0, data.hThread === null ? 0n : BigInt(util.toPointer(data.hThread)), true);
  // 0x08: pointer
  if (data?.lpThreadLocalBase !== undefined) view.setBigUint64(8, data.lpThreadLocalBase === null ? 0n : BigInt(util.toPointer(data.lpThreadLocalBase)), true);
  // 0x10: pointer
  if (data?.lpStartAddress !== undefined) view.setBigUint64(16, data.lpStartAddress === null ? 0n : BigInt(util.toPointer(data.lpStartAddress)), true);
  return buf;
}

/**
 * Windows.Win32.System.Diagnostics.Debug.CREATE_PROCESS_DEBUG_INFO (size: 72)
 */
export interface CREATE_PROCESS_DEBUG_INFO {
  /** Windows.Win32.Foundation.HANDLE */
  hFile: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Foundation.HANDLE */
  hProcess: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Foundation.HANDLE */
  hThread: Uint8Array | Deno.PointerValue | null;
  /** ptr */
  lpBaseOfImage: Deno.PointerValue | Uint8Array | null;
  /** u32 */
  dwDebugInfoFileOffset: number;
  /** u32 */
  nDebugInfoSize: number;
  /** ptr */
  lpThreadLocalBase: Deno.PointerValue | Uint8Array | null;
  /** Windows.Win32.System.Threading.LPTHREAD_START_ROUTINE */
  lpStartAddress: Uint8Array | Deno.PointerValue | null;
  /** ptr */
  lpImageName: Deno.PointerValue | Uint8Array | null;
  /** u16 */
  fUnicode: number;
}

export const sizeofCREATE_PROCESS_DEBUG_INFO = 72;

export function allocCREATE_PROCESS_DEBUG_INFO(data?: Partial<CREATE_PROCESS_DEBUG_INFO>): Uint8Array {
  const buf = new Uint8Array(sizeofCREATE_PROCESS_DEBUG_INFO);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.hFile !== undefined) view.setBigUint64(0, data.hFile === null ? 0n : BigInt(util.toPointer(data.hFile)), true);
  // 0x08: pointer
  if (data?.hProcess !== undefined) view.setBigUint64(8, data.hProcess === null ? 0n : BigInt(util.toPointer(data.hProcess)), true);
  // 0x10: pointer
  if (data?.hThread !== undefined) view.setBigUint64(16, data.hThread === null ? 0n : BigInt(util.toPointer(data.hThread)), true);
  // 0x18: pointer
  if (data?.lpBaseOfImage !== undefined) view.setBigUint64(24, data.lpBaseOfImage === null ? 0n : BigInt(util.toPointer(data.lpBaseOfImage)), true);
  // 0x20: u32
  if (data?.dwDebugInfoFileOffset !== undefined) view.setUint32(32, Number(data.dwDebugInfoFileOffset), true);
  // 0x24: u32
  if (data?.nDebugInfoSize !== undefined) view.setUint32(36, Number(data.nDebugInfoSize), true);
  // 0x28: pointer
  if (data?.lpThreadLocalBase !== undefined) view.setBigUint64(40, data.lpThreadLocalBase === null ? 0n : BigInt(util.toPointer(data.lpThreadLocalBase)), true);
  // 0x30: pointer
  if (data?.lpStartAddress !== undefined) view.setBigUint64(48, data.lpStartAddress === null ? 0n : BigInt(util.toPointer(data.lpStartAddress)), true);
  // 0x38: pointer
  if (data?.lpImageName !== undefined) view.setBigUint64(56, data.lpImageName === null ? 0n : BigInt(util.toPointer(data.lpImageName)), true);
  // 0x40: u16
  if (data?.fUnicode !== undefined) view.setUint16(64, Number(data.fUnicode), true);
  // 0x42: pad6
  return buf;
}

/**
 * Windows.Win32.System.Diagnostics.Debug.EXIT_THREAD_DEBUG_INFO (size: 8)
 */
export interface EXIT_THREAD_DEBUG_INFO {
  /** u32 */
  dwExitCode: number;
}

export const sizeofEXIT_THREAD_DEBUG_INFO = 8;

export function allocEXIT_THREAD_DEBUG_INFO(data?: Partial<EXIT_THREAD_DEBUG_INFO>): Uint8Array {
  const buf = new Uint8Array(sizeofEXIT_THREAD_DEBUG_INFO);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.dwExitCode !== undefined) view.setUint32(0, Number(data.dwExitCode), true);
  // 0x04: pad4
  return buf;
}

/**
 * Windows.Win32.System.Diagnostics.Debug.EXIT_PROCESS_DEBUG_INFO (size: 8)
 */
export interface EXIT_PROCESS_DEBUG_INFO {
  /** u32 */
  dwExitCode: number;
}

export const sizeofEXIT_PROCESS_DEBUG_INFO = 8;

export function allocEXIT_PROCESS_DEBUG_INFO(data?: Partial<EXIT_PROCESS_DEBUG_INFO>): Uint8Array {
  const buf = new Uint8Array(sizeofEXIT_PROCESS_DEBUG_INFO);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.dwExitCode !== undefined) view.setUint32(0, Number(data.dwExitCode), true);
  // 0x04: pad4
  return buf;
}

/**
 * Windows.Win32.System.Diagnostics.Debug.LOAD_DLL_DEBUG_INFO (size: 40)
 */
export interface LOAD_DLL_DEBUG_INFO {
  /** Windows.Win32.Foundation.HANDLE */
  hFile: Uint8Array | Deno.PointerValue | null;
  /** ptr */
  lpBaseOfDll: Deno.PointerValue | Uint8Array | null;
  /** u32 */
  dwDebugInfoFileOffset: number;
  /** u32 */
  nDebugInfoSize: number;
  /** ptr */
  lpImageName: Deno.PointerValue | Uint8Array | null;
  /** u16 */
  fUnicode: number;
}

export const sizeofLOAD_DLL_DEBUG_INFO = 40;

export function allocLOAD_DLL_DEBUG_INFO(data?: Partial<LOAD_DLL_DEBUG_INFO>): Uint8Array {
  const buf = new Uint8Array(sizeofLOAD_DLL_DEBUG_INFO);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.hFile !== undefined) view.setBigUint64(0, data.hFile === null ? 0n : BigInt(util.toPointer(data.hFile)), true);
  // 0x08: pointer
  if (data?.lpBaseOfDll !== undefined) view.setBigUint64(8, data.lpBaseOfDll === null ? 0n : BigInt(util.toPointer(data.lpBaseOfDll)), true);
  // 0x10: u32
  if (data?.dwDebugInfoFileOffset !== undefined) view.setUint32(16, Number(data.dwDebugInfoFileOffset), true);
  // 0x14: u32
  if (data?.nDebugInfoSize !== undefined) view.setUint32(20, Number(data.nDebugInfoSize), true);
  // 0x18: pointer
  if (data?.lpImageName !== undefined) view.setBigUint64(24, data.lpImageName === null ? 0n : BigInt(util.toPointer(data.lpImageName)), true);
  // 0x20: u16
  if (data?.fUnicode !== undefined) view.setUint16(32, Number(data.fUnicode), true);
  // 0x22: pad6
  return buf;
}

/**
 * Windows.Win32.System.Diagnostics.Debug.UNLOAD_DLL_DEBUG_INFO (size: 8)
 */
export interface UNLOAD_DLL_DEBUG_INFO {
  /** ptr */
  lpBaseOfDll: Deno.PointerValue | Uint8Array | null;
}

export const sizeofUNLOAD_DLL_DEBUG_INFO = 8;

export function allocUNLOAD_DLL_DEBUG_INFO(data?: Partial<UNLOAD_DLL_DEBUG_INFO>): Uint8Array {
  const buf = new Uint8Array(sizeofUNLOAD_DLL_DEBUG_INFO);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.lpBaseOfDll !== undefined) view.setBigUint64(0, data.lpBaseOfDll === null ? 0n : BigInt(util.toPointer(data.lpBaseOfDll)), true);
  return buf;
}

export type PSTR = Deno.PointerValue | Uint8Array | null;

/**
 * Windows.Win32.System.Diagnostics.Debug.OUTPUT_DEBUG_STRING_INFO (size: 16)
 */
export interface OUTPUT_DEBUG_STRING_INFO {
  /** Windows.Win32.Foundation.PSTR */
  lpDebugStringData: string | null;
  /** u16 */
  fUnicode: number;
  /** u16 */
  nDebugStringLength: number;
}

export const sizeofOUTPUT_DEBUG_STRING_INFO = 16;

export function allocOUTPUT_DEBUG_STRING_INFO(data?: Partial<OUTPUT_DEBUG_STRING_INFO>): Uint8Array {
  const buf = new Uint8Array(sizeofOUTPUT_DEBUG_STRING_INFO);
  const view = new DataView(buf.buffer);
  // 0x00: buffer
  if (data?.lpDebugStringData !== undefined) {
    (buf as any)._f0 = util.pstrToFfi(data.lpDebugStringData);
    view.setBigUint64(0, (buf as any)._f0 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f0)), true);
  }
  // 0x08: u16
  if (data?.fUnicode !== undefined) view.setUint16(8, Number(data.fUnicode), true);
  // 0x0a: u16
  if (data?.nDebugStringLength !== undefined) view.setUint16(10, Number(data.nDebugStringLength), true);
  // 0x0c: pad4
  return buf;
}

/**
 * Windows.Win32.System.Diagnostics.Debug.RIP_INFO (size: 8)
 */
export interface RIP_INFO {
  /** u32 */
  dwError: number;
  /** Windows.Win32.System.Diagnostics.Debug.RIP_INFO_TYPE */
  dwType: RIP_INFO_TYPE;
}

export const sizeofRIP_INFO = 8;

export function allocRIP_INFO(data?: Partial<RIP_INFO>): Uint8Array {
  const buf = new Uint8Array(sizeofRIP_INFO);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.dwError !== undefined) view.setUint32(0, Number(data.dwError), true);
  // 0x04: u32
  if (data?.dwType !== undefined) view.setUint32(4, Number(data.dwType), true);
  return buf;
}

/**
 * _u_e__Union (size: 72)
 */
export interface _u_e__Union {
  /** Windows.Win32.System.Diagnostics.Debug.EXCEPTION_DEBUG_INFO */
  Exception: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.System.Diagnostics.Debug.CREATE_THREAD_DEBUG_INFO */
  CreateThread: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.System.Diagnostics.Debug.CREATE_PROCESS_DEBUG_INFO */
  CreateProcessInfo: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.System.Diagnostics.Debug.EXIT_THREAD_DEBUG_INFO */
  ExitThread: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.System.Diagnostics.Debug.EXIT_PROCESS_DEBUG_INFO */
  ExitProcess: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.System.Diagnostics.Debug.LOAD_DLL_DEBUG_INFO */
  LoadDll: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.System.Diagnostics.Debug.UNLOAD_DLL_DEBUG_INFO */
  UnloadDll: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.System.Diagnostics.Debug.OUTPUT_DEBUG_STRING_INFO */
  DebugString: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.System.Diagnostics.Debug.RIP_INFO */
  RipInfo: Uint8Array | Deno.PointerValue | null;
}

export const sizeof_u_e__Union = 72;

export function alloc_u_e__Union(data?: Partial<_u_e__Union>): Uint8Array {
  const buf = new Uint8Array(sizeof_u_e__Union);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.Exception !== undefined) view.setBigUint64(0, data.Exception === null ? 0n : BigInt(util.toPointer(data.Exception)), true);
  // 0x08: pointer
  if (data?.CreateThread !== undefined) view.setBigUint64(8, data.CreateThread === null ? 0n : BigInt(util.toPointer(data.CreateThread)), true);
  // 0x10: pointer
  if (data?.CreateProcessInfo !== undefined) view.setBigUint64(16, data.CreateProcessInfo === null ? 0n : BigInt(util.toPointer(data.CreateProcessInfo)), true);
  // 0x18: pointer
  if (data?.ExitThread !== undefined) view.setBigUint64(24, data.ExitThread === null ? 0n : BigInt(util.toPointer(data.ExitThread)), true);
  // 0x20: pointer
  if (data?.ExitProcess !== undefined) view.setBigUint64(32, data.ExitProcess === null ? 0n : BigInt(util.toPointer(data.ExitProcess)), true);
  // 0x28: pointer
  if (data?.LoadDll !== undefined) view.setBigUint64(40, data.LoadDll === null ? 0n : BigInt(util.toPointer(data.LoadDll)), true);
  // 0x30: pointer
  if (data?.UnloadDll !== undefined) view.setBigUint64(48, data.UnloadDll === null ? 0n : BigInt(util.toPointer(data.UnloadDll)), true);
  // 0x38: pointer
  if (data?.DebugString !== undefined) view.setBigUint64(56, data.DebugString === null ? 0n : BigInt(util.toPointer(data.DebugString)), true);
  // 0x40: pointer
  if (data?.RipInfo !== undefined) view.setBigUint64(64, data.RipInfo === null ? 0n : BigInt(util.toPointer(data.RipInfo)), true);
  return buf;
}

/**
 * Windows.Win32.Media.KernelStreaming.KSPROPERTY_EXTDEVICE_S (size: 16)
 */
export interface KSPROPERTY_EXTDEVICE_S {
  /** Windows.Win32.Media.KernelStreaming.KSIDENTIFIER */
  Property: Uint8Array | Deno.PointerValue | null;
  /** _u_e__Union */
  u: Uint8Array | Deno.PointerValue | null;
}

export const sizeofKSPROPERTY_EXTDEVICE_S = 16;

export function allocKSPROPERTY_EXTDEVICE_S(data?: Partial<KSPROPERTY_EXTDEVICE_S>): Uint8Array {
  const buf = new Uint8Array(sizeofKSPROPERTY_EXTDEVICE_S);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.Property !== undefined) view.setBigUint64(0, data.Property === null ? 0n : BigInt(util.toPointer(data.Property)), true);
  // 0x08: pointer
  if (data?.u !== undefined) view.setBigUint64(8, data.u === null ? 0n : BigInt(util.toPointer(data.u)), true);
  return buf;
}

/**
 * Windows.Win32.Media.KernelStreaming.TRANSPORTSTATUS (size: 56)
 */
export interface TRANSPORTSTATUS {
  /** i32 */
  Mode: number;
  /** i32 */
  LastError: number;
  /** i32 */
  RecordInhibit: number;
  /** i32 */
  ServoLock: number;
  /** i32 */
  MediaPresent: number;
  /** i32 */
  MediaLength: number;
  /** i32 */
  MediaSize: number;
  /** i32 */
  MediaTrackCount: number;
  /** i32 */
  MediaTrackLength: number;
  /** i32 */
  MediaTrackSide: number;
  /** i32 */
  MediaType: number;
  /** i32 */
  LinkMode: number;
  /** i32 */
  NotifyOn: number;
}

export const sizeofTRANSPORTSTATUS = 56;

export function allocTRANSPORTSTATUS(data?: Partial<TRANSPORTSTATUS>): Uint8Array {
  const buf = new Uint8Array(sizeofTRANSPORTSTATUS);
  const view = new DataView(buf.buffer);
  // 0x00: i32
  if (data?.Mode !== undefined) view.setInt32(0, Number(data.Mode), true);
  // 0x04: i32
  if (data?.LastError !== undefined) view.setInt32(4, Number(data.LastError), true);
  // 0x08: i32
  if (data?.RecordInhibit !== undefined) view.setInt32(8, Number(data.RecordInhibit), true);
  // 0x0c: i32
  if (data?.ServoLock !== undefined) view.setInt32(12, Number(data.ServoLock), true);
  // 0x10: i32
  if (data?.MediaPresent !== undefined) view.setInt32(16, Number(data.MediaPresent), true);
  // 0x14: i32
  if (data?.MediaLength !== undefined) view.setInt32(20, Number(data.MediaLength), true);
  // 0x18: i32
  if (data?.MediaSize !== undefined) view.setInt32(24, Number(data.MediaSize), true);
  // 0x1c: i32
  if (data?.MediaTrackCount !== undefined) view.setInt32(28, Number(data.MediaTrackCount), true);
  // 0x20: i32
  if (data?.MediaTrackLength !== undefined) view.setInt32(32, Number(data.MediaTrackLength), true);
  // 0x24: i32
  if (data?.MediaTrackSide !== undefined) view.setInt32(36, Number(data.MediaTrackSide), true);
  // 0x28: i32
  if (data?.MediaType !== undefined) view.setInt32(40, Number(data.MediaType), true);
  // 0x2c: i32
  if (data?.LinkMode !== undefined) view.setInt32(44, Number(data.LinkMode), true);
  // 0x30: i32
  if (data?.NotifyOn !== undefined) view.setInt32(48, Number(data.NotifyOn), true);
  // 0x34: pad4
  return buf;
}

/**
 * Windows.Win32.Media.KernelStreaming.TRANSPORTBASICPARMS (size: 136)
 */
export interface TRANSPORTBASICPARMS {
  /** i32 */
  TimeFormat: number;
  /** i32 */
  TimeReference: number;
  /** i32 */
  Superimpose: number;
  /** i32 */
  EndStopAction: number;
  /** i32 */
  RecordFormat: number;
  /** i32 */
  StepFrames: number;
  /** i32 */
  SetpField: number;
  /** i32 */
  Preroll: number;
  /** i32 */
  RecPreroll: number;
  /** i32 */
  Postroll: number;
  /** i32 */
  EditDelay: number;
  /** i32 */
  PlayTCDelay: number;
  /** i32 */
  RecTCDelay: number;
  /** i32 */
  EditField: number;
  /** i32 */
  FrameServo: number;
  /** i32 */
  ColorFrameServo: number;
  /** i32 */
  ServoRef: number;
  /** i32 */
  WarnGenlock: number;
  /** i32 */
  SetTracking: number;
  /** array */
  VolumeName: Deno.PointerValue | null;
  /** array */
  Ballistic: Deno.PointerValue | null;
  /** i32 */
  Speed: number;
  /** i32 */
  CounterFormat: number;
  /** i32 */
  TunerChannel: number;
  /** i32 */
  TunerNumber: number;
  /** i32 */
  TimerEvent: number;
  /** i32 */
  TimerStartDay: number;
  /** i32 */
  TimerStartTime: number;
  /** i32 */
  TimerStopDay: number;
  /** i32 */
  TimerStopTime: number;
}

export const sizeofTRANSPORTBASICPARMS = 136;

export function allocTRANSPORTBASICPARMS(data?: Partial<TRANSPORTBASICPARMS>): Uint8Array {
  const buf = new Uint8Array(sizeofTRANSPORTBASICPARMS);
  const view = new DataView(buf.buffer);
  // 0x00: i32
  if (data?.TimeFormat !== undefined) view.setInt32(0, Number(data.TimeFormat), true);
  // 0x04: i32
  if (data?.TimeReference !== undefined) view.setInt32(4, Number(data.TimeReference), true);
  // 0x08: i32
  if (data?.Superimpose !== undefined) view.setInt32(8, Number(data.Superimpose), true);
  // 0x0c: i32
  if (data?.EndStopAction !== undefined) view.setInt32(12, Number(data.EndStopAction), true);
  // 0x10: i32
  if (data?.RecordFormat !== undefined) view.setInt32(16, Number(data.RecordFormat), true);
  // 0x14: i32
  if (data?.StepFrames !== undefined) view.setInt32(20, Number(data.StepFrames), true);
  // 0x18: i32
  if (data?.SetpField !== undefined) view.setInt32(24, Number(data.SetpField), true);
  // 0x1c: i32
  if (data?.Preroll !== undefined) view.setInt32(28, Number(data.Preroll), true);
  // 0x20: i32
  if (data?.RecPreroll !== undefined) view.setInt32(32, Number(data.RecPreroll), true);
  // 0x24: i32
  if (data?.Postroll !== undefined) view.setInt32(36, Number(data.Postroll), true);
  // 0x28: i32
  if (data?.EditDelay !== undefined) view.setInt32(40, Number(data.EditDelay), true);
  // 0x2c: i32
  if (data?.PlayTCDelay !== undefined) view.setInt32(44, Number(data.PlayTCDelay), true);
  // 0x30: i32
  if (data?.RecTCDelay !== undefined) view.setInt32(48, Number(data.RecTCDelay), true);
  // 0x34: i32
  if (data?.EditField !== undefined) view.setInt32(52, Number(data.EditField), true);
  // 0x38: i32
  if (data?.FrameServo !== undefined) view.setInt32(56, Number(data.FrameServo), true);
  // 0x3c: i32
  if (data?.ColorFrameServo !== undefined) view.setInt32(60, Number(data.ColorFrameServo), true);
  // 0x40: i32
  if (data?.ServoRef !== undefined) view.setInt32(64, Number(data.ServoRef), true);
  // 0x44: i32
  if (data?.WarnGenlock !== undefined) view.setInt32(68, Number(data.WarnGenlock), true);
  // 0x48: i32
  if (data?.SetTracking !== undefined) view.setInt32(72, Number(data.SetTracking), true);
  // 0x4c: pad4
  // 0x50: pointer
  if (data?.VolumeName !== undefined) view.setBigUint64(80, data.VolumeName === null ? 0n : BigInt(util.toPointer(data.VolumeName)), true);
  // 0x58: pointer
  if (data?.Ballistic !== undefined) view.setBigUint64(88, data.Ballistic === null ? 0n : BigInt(util.toPointer(data.Ballistic)), true);
  // 0x60: i32
  if (data?.Speed !== undefined) view.setInt32(96, Number(data.Speed), true);
  // 0x64: i32
  if (data?.CounterFormat !== undefined) view.setInt32(100, Number(data.CounterFormat), true);
  // 0x68: i32
  if (data?.TunerChannel !== undefined) view.setInt32(104, Number(data.TunerChannel), true);
  // 0x6c: i32
  if (data?.TunerNumber !== undefined) view.setInt32(108, Number(data.TunerNumber), true);
  // 0x70: i32
  if (data?.TimerEvent !== undefined) view.setInt32(112, Number(data.TimerEvent), true);
  // 0x74: i32
  if (data?.TimerStartDay !== undefined) view.setInt32(116, Number(data.TimerStartDay), true);
  // 0x78: i32
  if (data?.TimerStartTime !== undefined) view.setInt32(120, Number(data.TimerStartTime), true);
  // 0x7c: i32
  if (data?.TimerStopDay !== undefined) view.setInt32(124, Number(data.TimerStopDay), true);
  // 0x80: i32
  if (data?.TimerStopTime !== undefined) view.setInt32(128, Number(data.TimerStopTime), true);
  // 0x84: pad4
  return buf;
}

/**
 * Windows.Win32.Media.KernelStreaming.TRANSPORTVIDEOPARMS (size: 8)
 */
export interface TRANSPORTVIDEOPARMS {
  /** i32 */
  OutputMode: number;
  /** i32 */
  Input: number;
}

export const sizeofTRANSPORTVIDEOPARMS = 8;

export function allocTRANSPORTVIDEOPARMS(data?: Partial<TRANSPORTVIDEOPARMS>): Uint8Array {
  const buf = new Uint8Array(sizeofTRANSPORTVIDEOPARMS);
  const view = new DataView(buf.buffer);
  // 0x00: i32
  if (data?.OutputMode !== undefined) view.setInt32(0, Number(data.OutputMode), true);
  // 0x04: i32
  if (data?.Input !== undefined) view.setInt32(4, Number(data.Input), true);
  return buf;
}

/**
 * Windows.Win32.Media.KernelStreaming.TRANSPORTAUDIOPARMS (size: 24)
 */
export interface TRANSPORTAUDIOPARMS {
  /** i32 */
  EnableOutput: number;
  /** i32 */
  EnableRecord: number;
  /** i32 */
  EnableSelsync: number;
  /** i32 */
  Input: number;
  /** i32 */
  MonitorSource: number;
}

export const sizeofTRANSPORTAUDIOPARMS = 24;

export function allocTRANSPORTAUDIOPARMS(data?: Partial<TRANSPORTAUDIOPARMS>): Uint8Array {
  const buf = new Uint8Array(sizeofTRANSPORTAUDIOPARMS);
  const view = new DataView(buf.buffer);
  // 0x00: i32
  if (data?.EnableOutput !== undefined) view.setInt32(0, Number(data.EnableOutput), true);
  // 0x04: i32
  if (data?.EnableRecord !== undefined) view.setInt32(4, Number(data.EnableRecord), true);
  // 0x08: i32
  if (data?.EnableSelsync !== undefined) view.setInt32(8, Number(data.EnableSelsync), true);
  // 0x0c: i32
  if (data?.Input !== undefined) view.setInt32(12, Number(data.Input), true);
  // 0x10: i32
  if (data?.MonitorSource !== undefined) view.setInt32(16, Number(data.MonitorSource), true);
  // 0x14: pad4
  return buf;
}

/**
 * Windows.Win32.Media.KernelStreaming.MEDIUM_INFO (size: 16)
 */
export interface MEDIUM_INFO {
  /** Windows.Win32.Foundation.BOOL */
  MediaPresent: boolean;
  /** u32 */
  MediaType: number;
  /** Windows.Win32.Foundation.BOOL */
  RecordInhibit: boolean;
}

export const sizeofMEDIUM_INFO = 16;

export function allocMEDIUM_INFO(data?: Partial<MEDIUM_INFO>): Uint8Array {
  const buf = new Uint8Array(sizeofMEDIUM_INFO);
  const view = new DataView(buf.buffer);
  // 0x00: i32
  if (data?.MediaPresent !== undefined) view.setInt32(0, Number(data.MediaPresent), true);
  // 0x04: u32
  if (data?.MediaType !== undefined) view.setUint32(4, Number(data.MediaType), true);
  // 0x08: i32
  if (data?.RecordInhibit !== undefined) view.setInt32(8, Number(data.RecordInhibit), true);
  // 0x0c: pad4
  return buf;
}

/**
 * Windows.Win32.Media.KernelStreaming.TRANSPORT_STATE (size: 8)
 */
export interface TRANSPORT_STATE {
  /** u32 */
  Mode: number;
  /** u32 */
  State: number;
}

export const sizeofTRANSPORT_STATE = 8;

export function allocTRANSPORT_STATE(data?: Partial<TRANSPORT_STATE>): Uint8Array {
  const buf = new Uint8Array(sizeofTRANSPORT_STATE);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.Mode !== undefined) view.setUint32(0, Number(data.Mode), true);
  // 0x04: u32
  if (data?.State !== undefined) view.setUint32(4, Number(data.State), true);
  return buf;
}

/**
 * Windows.Win32.Media.KernelStreaming.KSPROPERTY_EXTXPORT_S (size: 16)
 */
export interface KSPROPERTY_EXTXPORT_S {
  /** Windows.Win32.Media.KernelStreaming.KSIDENTIFIER */
  Property: Uint8Array | Deno.PointerValue | null;
  /** _u_e__Union */
  u: Uint8Array | Deno.PointerValue | null;
}

export const sizeofKSPROPERTY_EXTXPORT_S = 16;

export function allocKSPROPERTY_EXTXPORT_S(data?: Partial<KSPROPERTY_EXTXPORT_S>): Uint8Array {
  const buf = new Uint8Array(sizeofKSPROPERTY_EXTXPORT_S);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.Property !== undefined) view.setBigUint64(0, data.Property === null ? 0n : BigInt(util.toPointer(data.Property)), true);
  // 0x08: pointer
  if (data?.u !== undefined) view.setBigUint64(8, data.u === null ? 0n : BigInt(util.toPointer(data.u)), true);
  return buf;
}

/**
 * Windows.Win32.Media.KernelStreaming.KSPROPERTY_EXTXPORT_NODE_S (size: 16)
 */
export interface KSPROPERTY_EXTXPORT_NODE_S {
  /** Windows.Win32.Media.KernelStreaming.KSP_NODE */
  NodeProperty: Uint8Array | Deno.PointerValue | null;
  /** _u_e__Union */
  u: Uint8Array | Deno.PointerValue | null;
}

export const sizeofKSPROPERTY_EXTXPORT_NODE_S = 16;

export function allocKSPROPERTY_EXTXPORT_NODE_S(data?: Partial<KSPROPERTY_EXTXPORT_NODE_S>): Uint8Array {
  const buf = new Uint8Array(sizeofKSPROPERTY_EXTXPORT_NODE_S);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.NodeProperty !== undefined) view.setBigUint64(0, data.NodeProperty === null ? 0n : BigInt(util.toPointer(data.NodeProperty)), true);
  // 0x08: pointer
  if (data?.u !== undefined) view.setBigUint64(8, data.u === null ? 0n : BigInt(util.toPointer(data.u)), true);
  return buf;
}

/**
 * Windows.Win32.Media.TIMECODE (size: 16)
 */
export interface TIMECODE {
  /** _Anonymous_e__Struct */
  Anonymous: Uint8Array | Deno.PointerValue | null;
  /** u64 */
  qw: Deno.PointerValue;
}

export const sizeofTIMECODE = 16;

export function allocTIMECODE(data?: Partial<TIMECODE>): Uint8Array {
  const buf = new Uint8Array(sizeofTIMECODE);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.Anonymous !== undefined) view.setBigUint64(0, data.Anonymous === null ? 0n : BigInt(util.toPointer(data.Anonymous)), true);
  // 0x08: u64
  if (data?.qw !== undefined) view.setBigUint64(8, BigInt(data.qw), true);
  return buf;
}

/**
 * Windows.Win32.Media.TIMECODE_SAMPLE (size: 24)
 */
export interface TIMECODE_SAMPLE {
  /** i64 */
  qwTick: Deno.PointerValue;
  /** Windows.Win32.Media.TIMECODE */
  timecode: Uint8Array | Deno.PointerValue | null;
  /** u32 */
  dwUser: number;
  /** Windows.Win32.Media.TIMECODE_SAMPLE_FLAGS */
  dwFlags: TIMECODE_SAMPLE_FLAGS;
}

export const sizeofTIMECODE_SAMPLE = 24;

export function allocTIMECODE_SAMPLE(data?: Partial<TIMECODE_SAMPLE>): Uint8Array {
  const buf = new Uint8Array(sizeofTIMECODE_SAMPLE);
  const view = new DataView(buf.buffer);
  // 0x00: i64
  if (data?.qwTick !== undefined) view.setBigInt64(0, BigInt(data.qwTick), true);
  // 0x08: pointer
  if (data?.timecode !== undefined) view.setBigUint64(8, data.timecode === null ? 0n : BigInt(util.toPointer(data.timecode)), true);
  // 0x10: u32
  if (data?.dwUser !== undefined) view.setUint32(16, Number(data.dwUser), true);
  // 0x14: u32
  if (data?.dwFlags !== undefined) view.setUint32(20, Number(data.dwFlags), true);
  return buf;
}

/**
 * Windows.Win32.Media.KernelStreaming.KSPROPERTY_TIMECODE_S (size: 16)
 */
export interface KSPROPERTY_TIMECODE_S {
  /** Windows.Win32.Media.KernelStreaming.KSIDENTIFIER */
  Property: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Media.TIMECODE_SAMPLE */
  TimecodeSamp: Uint8Array | Deno.PointerValue | null;
}

export const sizeofKSPROPERTY_TIMECODE_S = 16;

export function allocKSPROPERTY_TIMECODE_S(data?: Partial<KSPROPERTY_TIMECODE_S>): Uint8Array {
  const buf = new Uint8Array(sizeofKSPROPERTY_TIMECODE_S);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.Property !== undefined) view.setBigUint64(0, data.Property === null ? 0n : BigInt(util.toPointer(data.Property)), true);
  // 0x08: pointer
  if (data?.TimecodeSamp !== undefined) view.setBigUint64(8, data.TimecodeSamp === null ? 0n : BigInt(util.toPointer(data.TimecodeSamp)), true);
  return buf;
}

/**
 * Windows.Win32.Media.KernelStreaming.KSPROPERTY_TIMECODE_NODE_S (size: 16)
 */
export interface KSPROPERTY_TIMECODE_NODE_S {
  /** Windows.Win32.Media.KernelStreaming.KSP_NODE */
  NodeProperty: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Media.TIMECODE_SAMPLE */
  TimecodeSamp: Uint8Array | Deno.PointerValue | null;
}

export const sizeofKSPROPERTY_TIMECODE_NODE_S = 16;

export function allocKSPROPERTY_TIMECODE_NODE_S(data?: Partial<KSPROPERTY_TIMECODE_NODE_S>): Uint8Array {
  const buf = new Uint8Array(sizeofKSPROPERTY_TIMECODE_NODE_S);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.NodeProperty !== undefined) view.setBigUint64(0, data.NodeProperty === null ? 0n : BigInt(util.toPointer(data.NodeProperty)), true);
  // 0x08: pointer
  if (data?.TimecodeSamp !== undefined) view.setBigUint64(8, data.TimecodeSamp === null ? 0n : BigInt(util.toPointer(data.TimecodeSamp)), true);
  return buf;
}

/**
 * Windows.Win32.Media.KernelStreaming.KSPROPERTY_CROSSBAR_CAPS_S (size: 16)
 */
export interface KSPROPERTY_CROSSBAR_CAPS_S {
  /** Windows.Win32.Media.KernelStreaming.KSIDENTIFIER */
  Property: Uint8Array | Deno.PointerValue | null;
  /** u32 */
  NumberOfInputs: number;
  /** u32 */
  NumberOfOutputs: number;
}

export const sizeofKSPROPERTY_CROSSBAR_CAPS_S = 16;

export function allocKSPROPERTY_CROSSBAR_CAPS_S(data?: Partial<KSPROPERTY_CROSSBAR_CAPS_S>): Uint8Array {
  const buf = new Uint8Array(sizeofKSPROPERTY_CROSSBAR_CAPS_S);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.Property !== undefined) view.setBigUint64(0, data.Property === null ? 0n : BigInt(util.toPointer(data.Property)), true);
  // 0x08: u32
  if (data?.NumberOfInputs !== undefined) view.setUint32(8, Number(data.NumberOfInputs), true);
  // 0x0c: u32
  if (data?.NumberOfOutputs !== undefined) view.setUint32(12, Number(data.NumberOfOutputs), true);
  return buf;
}

/**
 * Windows.Win32.Media.KernelStreaming.KSPROPERTY_CROSSBAR_PININFO_S (size: 32)
 */
export interface KSPROPERTY_CROSSBAR_PININFO_S {
  /** Windows.Win32.Media.KernelStreaming.KSIDENTIFIER */
  Property: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Media.KernelStreaming.KSPIN_DATAFLOW */
  Direction: KSPIN_DATAFLOW;
  /** u32 */
  Index: number;
  /** u32 */
  PinType: number;
  /** u32 */
  RelatedPinIndex: number;
  /** Windows.Win32.Media.KernelStreaming.KSIDENTIFIER */
  Medium: Uint8Array | Deno.PointerValue | null;
}

export const sizeofKSPROPERTY_CROSSBAR_PININFO_S = 32;

export function allocKSPROPERTY_CROSSBAR_PININFO_S(data?: Partial<KSPROPERTY_CROSSBAR_PININFO_S>): Uint8Array {
  const buf = new Uint8Array(sizeofKSPROPERTY_CROSSBAR_PININFO_S);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.Property !== undefined) view.setBigUint64(0, data.Property === null ? 0n : BigInt(util.toPointer(data.Property)), true);
  // 0x08: i32
  if (data?.Direction !== undefined) view.setInt32(8, Number(data.Direction), true);
  // 0x0c: u32
  if (data?.Index !== undefined) view.setUint32(12, Number(data.Index), true);
  // 0x10: u32
  if (data?.PinType !== undefined) view.setUint32(16, Number(data.PinType), true);
  // 0x14: u32
  if (data?.RelatedPinIndex !== undefined) view.setUint32(20, Number(data.RelatedPinIndex), true);
  // 0x18: pointer
  if (data?.Medium !== undefined) view.setBigUint64(24, data.Medium === null ? 0n : BigInt(util.toPointer(data.Medium)), true);
  return buf;
}

/**
 * Windows.Win32.Media.KernelStreaming.KSPROPERTY_CROSSBAR_ROUTE_S (size: 24)
 */
export interface KSPROPERTY_CROSSBAR_ROUTE_S {
  /** Windows.Win32.Media.KernelStreaming.KSIDENTIFIER */
  Property: Uint8Array | Deno.PointerValue | null;
  /** u32 */
  IndexInputPin: number;
  /** u32 */
  IndexOutputPin: number;
  /** u32 */
  CanRoute: number;
}

export const sizeofKSPROPERTY_CROSSBAR_ROUTE_S = 24;

export function allocKSPROPERTY_CROSSBAR_ROUTE_S(data?: Partial<KSPROPERTY_CROSSBAR_ROUTE_S>): Uint8Array {
  const buf = new Uint8Array(sizeofKSPROPERTY_CROSSBAR_ROUTE_S);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.Property !== undefined) view.setBigUint64(0, data.Property === null ? 0n : BigInt(util.toPointer(data.Property)), true);
  // 0x08: u32
  if (data?.IndexInputPin !== undefined) view.setUint32(8, Number(data.IndexInputPin), true);
  // 0x0c: u32
  if (data?.IndexOutputPin !== undefined) view.setUint32(12, Number(data.IndexOutputPin), true);
  // 0x10: u32
  if (data?.CanRoute !== undefined) view.setUint32(16, Number(data.CanRoute), true);
  // 0x14: pad4
  return buf;
}

/**
 * Windows.Win32.Media.KernelStreaming.KSPROPERTY_CROSSBAR_ACTIVE_S (size: 16)
 */
export interface KSPROPERTY_CROSSBAR_ACTIVE_S {
  /** Windows.Win32.Media.KernelStreaming.KSIDENTIFIER */
  Property: Uint8Array | Deno.PointerValue | null;
  /** u32 */
  IndexInputPin: number;
  /** u32 */
  Active: number;
}

export const sizeofKSPROPERTY_CROSSBAR_ACTIVE_S = 16;

export function allocKSPROPERTY_CROSSBAR_ACTIVE_S(data?: Partial<KSPROPERTY_CROSSBAR_ACTIVE_S>): Uint8Array {
  const buf = new Uint8Array(sizeofKSPROPERTY_CROSSBAR_ACTIVE_S);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.Property !== undefined) view.setBigUint64(0, data.Property === null ? 0n : BigInt(util.toPointer(data.Property)), true);
  // 0x08: u32
  if (data?.IndexInputPin !== undefined) view.setUint32(8, Number(data.IndexInputPin), true);
  // 0x0c: u32
  if (data?.Active !== undefined) view.setUint32(12, Number(data.Active), true);
  return buf;
}

/**
 * Windows.Win32.Media.KernelStreaming.KSPROPERTY_TVAUDIO_CAPS_S (size: 32)
 */
export interface KSPROPERTY_TVAUDIO_CAPS_S {
  /** Windows.Win32.Media.KernelStreaming.KSIDENTIFIER */
  Property: Uint8Array | Deno.PointerValue | null;
  /** u32 */
  Capabilities: number;
  /** Windows.Win32.Media.KernelStreaming.KSIDENTIFIER */
  InputMedium: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Media.KernelStreaming.KSIDENTIFIER */
  OutputMedium: Uint8Array | Deno.PointerValue | null;
}

export const sizeofKSPROPERTY_TVAUDIO_CAPS_S = 32;

export function allocKSPROPERTY_TVAUDIO_CAPS_S(data?: Partial<KSPROPERTY_TVAUDIO_CAPS_S>): Uint8Array {
  const buf = new Uint8Array(sizeofKSPROPERTY_TVAUDIO_CAPS_S);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.Property !== undefined) view.setBigUint64(0, data.Property === null ? 0n : BigInt(util.toPointer(data.Property)), true);
  // 0x08: u32
  if (data?.Capabilities !== undefined) view.setUint32(8, Number(data.Capabilities), true);
  // 0x0c: pad4
  // 0x10: pointer
  if (data?.InputMedium !== undefined) view.setBigUint64(16, data.InputMedium === null ? 0n : BigInt(util.toPointer(data.InputMedium)), true);
  // 0x18: pointer
  if (data?.OutputMedium !== undefined) view.setBigUint64(24, data.OutputMedium === null ? 0n : BigInt(util.toPointer(data.OutputMedium)), true);
  return buf;
}

/**
 * Windows.Win32.Media.KernelStreaming.KSPROPERTY_TVAUDIO_S (size: 16)
 */
export interface KSPROPERTY_TVAUDIO_S {
  /** Windows.Win32.Media.KernelStreaming.KSIDENTIFIER */
  Property: Uint8Array | Deno.PointerValue | null;
  /** u32 */
  Mode: number;
}

export const sizeofKSPROPERTY_TVAUDIO_S = 16;

export function allocKSPROPERTY_TVAUDIO_S(data?: Partial<KSPROPERTY_TVAUDIO_S>): Uint8Array {
  const buf = new Uint8Array(sizeofKSPROPERTY_TVAUDIO_S);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.Property !== undefined) view.setBigUint64(0, data.Property === null ? 0n : BigInt(util.toPointer(data.Property)), true);
  // 0x08: u32
  if (data?.Mode !== undefined) view.setUint32(8, Number(data.Mode), true);
  // 0x0c: pad4
  return buf;
}

/**
 * Windows.Win32.Media.KernelStreaming.KSPROPERTY_VIDEOCOMPRESSION_GETINFO_S (size: 32)
 */
export interface KSPROPERTY_VIDEOCOMPRESSION_GETINFO_S {
  /** Windows.Win32.Media.KernelStreaming.KSIDENTIFIER */
  Property: Uint8Array | Deno.PointerValue | null;
  /** u32 */
  StreamIndex: number;
  /** i32 */
  DefaultKeyFrameRate: number;
  /** i32 */
  DefaultPFrameRate: number;
  /** i32 */
  DefaultQuality: number;
  /** i32 */
  NumberOfQualitySettings: number;
  /** i32 */
  Capabilities: number;
}

export const sizeofKSPROPERTY_VIDEOCOMPRESSION_GETINFO_S = 32;

export function allocKSPROPERTY_VIDEOCOMPRESSION_GETINFO_S(data?: Partial<KSPROPERTY_VIDEOCOMPRESSION_GETINFO_S>): Uint8Array {
  const buf = new Uint8Array(sizeofKSPROPERTY_VIDEOCOMPRESSION_GETINFO_S);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.Property !== undefined) view.setBigUint64(0, data.Property === null ? 0n : BigInt(util.toPointer(data.Property)), true);
  // 0x08: u32
  if (data?.StreamIndex !== undefined) view.setUint32(8, Number(data.StreamIndex), true);
  // 0x0c: i32
  if (data?.DefaultKeyFrameRate !== undefined) view.setInt32(12, Number(data.DefaultKeyFrameRate), true);
  // 0x10: i32
  if (data?.DefaultPFrameRate !== undefined) view.setInt32(16, Number(data.DefaultPFrameRate), true);
  // 0x14: i32
  if (data?.DefaultQuality !== undefined) view.setInt32(20, Number(data.DefaultQuality), true);
  // 0x18: i32
  if (data?.NumberOfQualitySettings !== undefined) view.setInt32(24, Number(data.NumberOfQualitySettings), true);
  // 0x1c: i32
  if (data?.Capabilities !== undefined) view.setInt32(28, Number(data.Capabilities), true);
  return buf;
}

/**
 * Windows.Win32.Media.KernelStreaming.KSPROPERTY_VIDEOCOMPRESSION_S (size: 16)
 */
export interface KSPROPERTY_VIDEOCOMPRESSION_S {
  /** Windows.Win32.Media.KernelStreaming.KSIDENTIFIER */
  Property: Uint8Array | Deno.PointerValue | null;
  /** u32 */
  StreamIndex: number;
  /** i32 */
  Value: number;
}

export const sizeofKSPROPERTY_VIDEOCOMPRESSION_S = 16;

export function allocKSPROPERTY_VIDEOCOMPRESSION_S(data?: Partial<KSPROPERTY_VIDEOCOMPRESSION_S>): Uint8Array {
  const buf = new Uint8Array(sizeofKSPROPERTY_VIDEOCOMPRESSION_S);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.Property !== undefined) view.setBigUint64(0, data.Property === null ? 0n : BigInt(util.toPointer(data.Property)), true);
  // 0x08: u32
  if (data?.StreamIndex !== undefined) view.setUint32(8, Number(data.StreamIndex), true);
  // 0x0c: i32
  if (data?.Value !== undefined) view.setInt32(12, Number(data.Value), true);
  return buf;
}

/**
 * Windows.Win32.Media.KernelStreaming.KSPROPERTY_VIDEOCOMPRESSION_S1 (size: 24)
 */
export interface KSPROPERTY_VIDEOCOMPRESSION_S1 {
  /** Windows.Win32.Media.KernelStreaming.KSIDENTIFIER */
  Property: Uint8Array | Deno.PointerValue | null;
  /** u32 */
  StreamIndex: number;
  /** i32 */
  Value: number;
  /** u32 */
  Flags: number;
}

export const sizeofKSPROPERTY_VIDEOCOMPRESSION_S1 = 24;

export function allocKSPROPERTY_VIDEOCOMPRESSION_S1(data?: Partial<KSPROPERTY_VIDEOCOMPRESSION_S1>): Uint8Array {
  const buf = new Uint8Array(sizeofKSPROPERTY_VIDEOCOMPRESSION_S1);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.Property !== undefined) view.setBigUint64(0, data.Property === null ? 0n : BigInt(util.toPointer(data.Property)), true);
  // 0x08: u32
  if (data?.StreamIndex !== undefined) view.setUint32(8, Number(data.StreamIndex), true);
  // 0x0c: i32
  if (data?.Value !== undefined) view.setInt32(12, Number(data.Value), true);
  // 0x10: u32
  if (data?.Flags !== undefined) view.setUint32(16, Number(data.Flags), true);
  // 0x14: pad4
  return buf;
}

/**
 * Windows.Win32.Media.KernelStreaming.KSDISPLAYCHANGE (size: 24)
 */
export interface KSDISPLAYCHANGE {
  /** u32 */
  PelsWidth: number;
  /** u32 */
  PelsHeight: number;
  /** u32 */
  BitsPerPel: number;
  /** array */
  DeviceID: Deno.PointerValue | null;
}

export const sizeofKSDISPLAYCHANGE = 24;

export function allocKSDISPLAYCHANGE(data?: Partial<KSDISPLAYCHANGE>): Uint8Array {
  const buf = new Uint8Array(sizeofKSDISPLAYCHANGE);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.PelsWidth !== undefined) view.setUint32(0, Number(data.PelsWidth), true);
  // 0x04: u32
  if (data?.PelsHeight !== undefined) view.setUint32(4, Number(data.PelsHeight), true);
  // 0x08: u32
  if (data?.BitsPerPel !== undefined) view.setUint32(8, Number(data.BitsPerPel), true);
  // 0x0c: pad4
  // 0x10: pointer
  if (data?.DeviceID !== undefined) view.setBigUint64(16, data.DeviceID === null ? 0n : BigInt(util.toPointer(data.DeviceID)), true);
  return buf;
}

/**
 * Windows.Win32.Media.KernelStreaming.KSPROPERTY_VIDEOCONTROL_CAPS_S (size: 16)
 */
export interface KSPROPERTY_VIDEOCONTROL_CAPS_S {
  /** Windows.Win32.Media.KernelStreaming.KSIDENTIFIER */
  Property: Uint8Array | Deno.PointerValue | null;
  /** u32 */
  StreamIndex: number;
  /** u32 */
  VideoControlCaps: number;
}

export const sizeofKSPROPERTY_VIDEOCONTROL_CAPS_S = 16;

export function allocKSPROPERTY_VIDEOCONTROL_CAPS_S(data?: Partial<KSPROPERTY_VIDEOCONTROL_CAPS_S>): Uint8Array {
  const buf = new Uint8Array(sizeofKSPROPERTY_VIDEOCONTROL_CAPS_S);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.Property !== undefined) view.setBigUint64(0, data.Property === null ? 0n : BigInt(util.toPointer(data.Property)), true);
  // 0x08: u32
  if (data?.StreamIndex !== undefined) view.setUint32(8, Number(data.StreamIndex), true);
  // 0x0c: u32
  if (data?.VideoControlCaps !== undefined) view.setUint32(12, Number(data.VideoControlCaps), true);
  return buf;
}

/**
 * Windows.Win32.Media.KernelStreaming.KSPROPERTY_VIDEOCONTROL_MODE_S (size: 16)
 */
export interface KSPROPERTY_VIDEOCONTROL_MODE_S {
  /** Windows.Win32.Media.KernelStreaming.KSIDENTIFIER */
  Property: Uint8Array | Deno.PointerValue | null;
  /** u32 */
  StreamIndex: number;
  /** i32 */
  Mode: number;
}

export const sizeofKSPROPERTY_VIDEOCONTROL_MODE_S = 16;

export function allocKSPROPERTY_VIDEOCONTROL_MODE_S(data?: Partial<KSPROPERTY_VIDEOCONTROL_MODE_S>): Uint8Array {
  const buf = new Uint8Array(sizeofKSPROPERTY_VIDEOCONTROL_MODE_S);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.Property !== undefined) view.setBigUint64(0, data.Property === null ? 0n : BigInt(util.toPointer(data.Property)), true);
  // 0x08: u32
  if (data?.StreamIndex !== undefined) view.setUint32(8, Number(data.StreamIndex), true);
  // 0x0c: i32
  if (data?.Mode !== undefined) view.setInt32(12, Number(data.Mode), true);
  return buf;
}

/**
 * Windows.Win32.Media.KernelStreaming.KSPROPERTY_VIDEOCONTROL_ACTUAL_FRAME_RATE_S (size: 40)
 */
export interface KSPROPERTY_VIDEOCONTROL_ACTUAL_FRAME_RATE_S {
  /** Windows.Win32.Media.KernelStreaming.KSIDENTIFIER */
  Property: Uint8Array | Deno.PointerValue | null;
  /** u32 */
  StreamIndex: number;
  /** u32 */
  RangeIndex: number;
  /** Windows.Win32.Foundation.SIZE */
  Dimensions: Uint8Array | Deno.PointerValue | null;
  /** i64 */
  CurrentActualFrameRate: Deno.PointerValue;
  /** i64 */
  CurrentMaxAvailableFrameRate: Deno.PointerValue;
}

export const sizeofKSPROPERTY_VIDEOCONTROL_ACTUAL_FRAME_RATE_S = 40;

export function allocKSPROPERTY_VIDEOCONTROL_ACTUAL_FRAME_RATE_S(data?: Partial<KSPROPERTY_VIDEOCONTROL_ACTUAL_FRAME_RATE_S>): Uint8Array {
  const buf = new Uint8Array(sizeofKSPROPERTY_VIDEOCONTROL_ACTUAL_FRAME_RATE_S);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.Property !== undefined) view.setBigUint64(0, data.Property === null ? 0n : BigInt(util.toPointer(data.Property)), true);
  // 0x08: u32
  if (data?.StreamIndex !== undefined) view.setUint32(8, Number(data.StreamIndex), true);
  // 0x0c: u32
  if (data?.RangeIndex !== undefined) view.setUint32(12, Number(data.RangeIndex), true);
  // 0x10: pointer
  if (data?.Dimensions !== undefined) view.setBigUint64(16, data.Dimensions === null ? 0n : BigInt(util.toPointer(data.Dimensions)), true);
  // 0x18: i64
  if (data?.CurrentActualFrameRate !== undefined) view.setBigInt64(24, BigInt(data.CurrentActualFrameRate), true);
  // 0x20: i64
  if (data?.CurrentMaxAvailableFrameRate !== undefined) view.setBigInt64(32, BigInt(data.CurrentMaxAvailableFrameRate), true);
  return buf;
}

/**
 * Windows.Win32.Media.KernelStreaming.KSPROPERTY_VIDEOCONTROL_FRAME_RATES_S (size: 24)
 */
export interface KSPROPERTY_VIDEOCONTROL_FRAME_RATES_S {
  /** Windows.Win32.Media.KernelStreaming.KSIDENTIFIER */
  Property: Uint8Array | Deno.PointerValue | null;
  /** u32 */
  StreamIndex: number;
  /** u32 */
  RangeIndex: number;
  /** Windows.Win32.Foundation.SIZE */
  Dimensions: Uint8Array | Deno.PointerValue | null;
}

export const sizeofKSPROPERTY_VIDEOCONTROL_FRAME_RATES_S = 24;

export function allocKSPROPERTY_VIDEOCONTROL_FRAME_RATES_S(data?: Partial<KSPROPERTY_VIDEOCONTROL_FRAME_RATES_S>): Uint8Array {
  const buf = new Uint8Array(sizeofKSPROPERTY_VIDEOCONTROL_FRAME_RATES_S);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.Property !== undefined) view.setBigUint64(0, data.Property === null ? 0n : BigInt(util.toPointer(data.Property)), true);
  // 0x08: u32
  if (data?.StreamIndex !== undefined) view.setUint32(8, Number(data.StreamIndex), true);
  // 0x0c: u32
  if (data?.RangeIndex !== undefined) view.setUint32(12, Number(data.RangeIndex), true);
  // 0x10: pointer
  if (data?.Dimensions !== undefined) view.setBigUint64(16, data.Dimensions === null ? 0n : BigInt(util.toPointer(data.Dimensions)), true);
  return buf;
}

/**
 * Windows.Win32.Media.KernelStreaming.KSPROPERTY_DROPPEDFRAMES_CURRENT_S (size: 32)
 */
export interface KSPROPERTY_DROPPEDFRAMES_CURRENT_S {
  /** Windows.Win32.Media.KernelStreaming.KSIDENTIFIER */
  Property: Uint8Array | Deno.PointerValue | null;
  /** i64 */
  PictureNumber: Deno.PointerValue;
  /** i64 */
  DropCount: Deno.PointerValue;
  /** u32 */
  AverageFrameSize: number;
}

export const sizeofKSPROPERTY_DROPPEDFRAMES_CURRENT_S = 32;

export function allocKSPROPERTY_DROPPEDFRAMES_CURRENT_S(data?: Partial<KSPROPERTY_DROPPEDFRAMES_CURRENT_S>): Uint8Array {
  const buf = new Uint8Array(sizeofKSPROPERTY_DROPPEDFRAMES_CURRENT_S);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.Property !== undefined) view.setBigUint64(0, data.Property === null ? 0n : BigInt(util.toPointer(data.Property)), true);
  // 0x08: i64
  if (data?.PictureNumber !== undefined) view.setBigInt64(8, BigInt(data.PictureNumber), true);
  // 0x10: i64
  if (data?.DropCount !== undefined) view.setBigInt64(16, BigInt(data.DropCount), true);
  // 0x18: u32
  if (data?.AverageFrameSize !== undefined) view.setUint32(24, Number(data.AverageFrameSize), true);
  // 0x1c: pad4
  return buf;
}

/**
 * Windows.Win32.Media.KernelStreaming.KS_AMVPDIMINFO (size: 24)
 */
export interface KS_AMVPDIMINFO {
  /** u32 */
  dwFieldWidth: number;
  /** u32 */
  dwFieldHeight: number;
  /** u32 */
  dwVBIWidth: number;
  /** u32 */
  dwVBIHeight: number;
  /** Windows.Win32.Foundation.RECT */
  rcValidRegion: Uint8Array | Deno.PointerValue | null;
}

export const sizeofKS_AMVPDIMINFO = 24;

export function allocKS_AMVPDIMINFO(data?: Partial<KS_AMVPDIMINFO>): Uint8Array {
  const buf = new Uint8Array(sizeofKS_AMVPDIMINFO);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.dwFieldWidth !== undefined) view.setUint32(0, Number(data.dwFieldWidth), true);
  // 0x04: u32
  if (data?.dwFieldHeight !== undefined) view.setUint32(4, Number(data.dwFieldHeight), true);
  // 0x08: u32
  if (data?.dwVBIWidth !== undefined) view.setUint32(8, Number(data.dwVBIWidth), true);
  // 0x0c: u32
  if (data?.dwVBIHeight !== undefined) view.setUint32(12, Number(data.dwVBIHeight), true);
  // 0x10: pointer
  if (data?.rcValidRegion !== undefined) view.setBigUint64(16, data.rcValidRegion === null ? 0n : BigInt(util.toPointer(data.rcValidRegion)), true);
  return buf;
}

/**
 * Windows.Win32.Media.KernelStreaming.KS_AMVPDATAINFO (size: 56)
 */
export interface KS_AMVPDATAINFO {
  /** u32 */
  dwSize: number;
  /** u32 */
  dwMicrosecondsPerField: number;
  /** Windows.Win32.Media.KernelStreaming.KS_AMVPDIMINFO */
  amvpDimInfo: Uint8Array | Deno.PointerValue | null;
  /** u32 */
  dwPictAspectRatioX: number;
  /** u32 */
  dwPictAspectRatioY: number;
  /** Windows.Win32.Foundation.BOOL */
  bEnableDoubleClock: boolean;
  /** Windows.Win32.Foundation.BOOL */
  bEnableVACT: boolean;
  /** Windows.Win32.Foundation.BOOL */
  bDataIsInterlaced: boolean;
  /** i32 */
  lHalfLinesOdd: number;
  /** Windows.Win32.Foundation.BOOL */
  bFieldPolarityInverted: boolean;
  /** u32 */
  dwNumLinesInVREF: number;
  /** i32 */
  lHalfLinesEven: number;
  /** u32 */
  dwReserved1: number;
}

export const sizeofKS_AMVPDATAINFO = 56;

export function allocKS_AMVPDATAINFO(data?: Partial<KS_AMVPDATAINFO>): Uint8Array {
  const buf = new Uint8Array(sizeofKS_AMVPDATAINFO);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.dwSize !== undefined) view.setUint32(0, Number(data.dwSize), true);
  // 0x04: u32
  if (data?.dwMicrosecondsPerField !== undefined) view.setUint32(4, Number(data.dwMicrosecondsPerField), true);
  // 0x08: pointer
  if (data?.amvpDimInfo !== undefined) view.setBigUint64(8, data.amvpDimInfo === null ? 0n : BigInt(util.toPointer(data.amvpDimInfo)), true);
  // 0x10: u32
  if (data?.dwPictAspectRatioX !== undefined) view.setUint32(16, Number(data.dwPictAspectRatioX), true);
  // 0x14: u32
  if (data?.dwPictAspectRatioY !== undefined) view.setUint32(20, Number(data.dwPictAspectRatioY), true);
  // 0x18: i32
  if (data?.bEnableDoubleClock !== undefined) view.setInt32(24, Number(data.bEnableDoubleClock), true);
  // 0x1c: i32
  if (data?.bEnableVACT !== undefined) view.setInt32(28, Number(data.bEnableVACT), true);
  // 0x20: i32
  if (data?.bDataIsInterlaced !== undefined) view.setInt32(32, Number(data.bDataIsInterlaced), true);
  // 0x24: i32
  if (data?.lHalfLinesOdd !== undefined) view.setInt32(36, Number(data.lHalfLinesOdd), true);
  // 0x28: i32
  if (data?.bFieldPolarityInverted !== undefined) view.setInt32(40, Number(data.bFieldPolarityInverted), true);
  // 0x2c: u32
  if (data?.dwNumLinesInVREF !== undefined) view.setUint32(44, Number(data.dwNumLinesInVREF), true);
  // 0x30: i32
  if (data?.lHalfLinesEven !== undefined) view.setInt32(48, Number(data.lHalfLinesEven), true);
  // 0x34: u32
  if (data?.dwReserved1 !== undefined) view.setUint32(52, Number(data.dwReserved1), true);
  return buf;
}

/**
 * Windows.Win32.Media.KernelStreaming.KS_AMVPSIZE (size: 8)
 */
export interface KS_AMVPSIZE {
  /** u32 */
  dwWidth: number;
  /** u32 */
  dwHeight: number;
}

export const sizeofKS_AMVPSIZE = 8;

export function allocKS_AMVPSIZE(data?: Partial<KS_AMVPSIZE>): Uint8Array {
  const buf = new Uint8Array(sizeofKS_AMVPSIZE);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.dwWidth !== undefined) view.setUint32(0, Number(data.dwWidth), true);
  // 0x04: u32
  if (data?.dwHeight !== undefined) view.setUint32(4, Number(data.dwHeight), true);
  return buf;
}

/**
 * Windows.Win32.Media.KernelStreaming.KSVPMAXPIXELRATE (size: 16)
 */
export interface KSVPMAXPIXELRATE {
  /** Windows.Win32.Media.KernelStreaming.KS_AMVPSIZE */
  Size: Uint8Array | Deno.PointerValue | null;
  /** u32 */
  MaxPixelsPerSecond: number;
  /** u32 */
  Reserved: number;
}

export const sizeofKSVPMAXPIXELRATE = 16;

export function allocKSVPMAXPIXELRATE(data?: Partial<KSVPMAXPIXELRATE>): Uint8Array {
  const buf = new Uint8Array(sizeofKSVPMAXPIXELRATE);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.Size !== undefined) view.setBigUint64(0, data.Size === null ? 0n : BigInt(util.toPointer(data.Size)), true);
  // 0x08: u32
  if (data?.MaxPixelsPerSecond !== undefined) view.setUint32(8, Number(data.MaxPixelsPerSecond), true);
  // 0x0c: u32
  if (data?.Reserved !== undefined) view.setUint32(12, Number(data.Reserved), true);
  return buf;
}

/**
 * Windows.Win32.Media.KernelStreaming.KSVPSIZE_PROP (size: 16)
 */
export interface KSVPSIZE_PROP {
  /** Windows.Win32.Media.KernelStreaming.KSIDENTIFIER */
  Property: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Media.KernelStreaming.KS_AMVPSIZE */
  Size: Uint8Array | Deno.PointerValue | null;
}

export const sizeofKSVPSIZE_PROP = 16;

export function allocKSVPSIZE_PROP(data?: Partial<KSVPSIZE_PROP>): Uint8Array {
  const buf = new Uint8Array(sizeofKSVPSIZE_PROP);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.Property !== undefined) view.setBigUint64(0, data.Property === null ? 0n : BigInt(util.toPointer(data.Property)), true);
  // 0x08: pointer
  if (data?.Size !== undefined) view.setBigUint64(8, data.Size === null ? 0n : BigInt(util.toPointer(data.Size)), true);
  return buf;
}

/**
 * Windows.Win32.Media.KernelStreaming.KSVPSURFACEPARAMS (size: 16)
 */
export interface KSVPSURFACEPARAMS {
  /** u32 */
  dwPitch: number;
  /** u32 */
  dwXOrigin: number;
  /** u32 */
  dwYOrigin: number;
}

export const sizeofKSVPSURFACEPARAMS = 16;

export function allocKSVPSURFACEPARAMS(data?: Partial<KSVPSURFACEPARAMS>): Uint8Array {
  const buf = new Uint8Array(sizeofKSVPSURFACEPARAMS);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.dwPitch !== undefined) view.setUint32(0, Number(data.dwPitch), true);
  // 0x04: u32
  if (data?.dwXOrigin !== undefined) view.setUint32(4, Number(data.dwXOrigin), true);
  // 0x08: u32
  if (data?.dwYOrigin !== undefined) view.setUint32(8, Number(data.dwYOrigin), true);
  // 0x0c: pad4
  return buf;
}

/**
 * Windows.Win32.Media.KernelStreaming.KSGOP_USERDATA (size: 24)
 */
export interface KSGOP_USERDATA {
  /** u32 */
  sc: number;
  /** u32 */
  reserved1: number;
  /** u8 */
  cFields: number;
  /** array */
  l21Data: Deno.PointerValue | null;
}

export const sizeofKSGOP_USERDATA = 24;

export function allocKSGOP_USERDATA(data?: Partial<KSGOP_USERDATA>): Uint8Array {
  const buf = new Uint8Array(sizeofKSGOP_USERDATA);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.sc !== undefined) view.setUint32(0, Number(data.sc), true);
  // 0x04: u32
  if (data?.reserved1 !== undefined) view.setUint32(4, Number(data.reserved1), true);
  // 0x08: u8
  if (data?.cFields !== undefined) view.setUint8(8, Number(data.cFields));
  // 0x09: pad7
  // 0x10: pointer
  if (data?.l21Data !== undefined) view.setBigUint64(16, data.l21Data === null ? 0n : BigInt(util.toPointer(data.l21Data)), true);
  return buf;
}

/**
 * Windows.Win32.Media.KernelStreaming.KS_AM_SimpleRateChange (size: 16)
 */
export interface KS_AM_SimpleRateChange {
  /** i64 */
  StartTime: Deno.PointerValue;
  /** i32 */
  Rate: number;
}

export const sizeofKS_AM_SimpleRateChange = 16;

export function allocKS_AM_SimpleRateChange(data?: Partial<KS_AM_SimpleRateChange>): Uint8Array {
  const buf = new Uint8Array(sizeofKS_AM_SimpleRateChange);
  const view = new DataView(buf.buffer);
  // 0x00: i64
  if (data?.StartTime !== undefined) view.setBigInt64(0, BigInt(data.StartTime), true);
  // 0x08: i32
  if (data?.Rate !== undefined) view.setInt32(8, Number(data.Rate), true);
  // 0x0c: pad4
  return buf;
}

/**
 * Windows.Win32.Media.KernelStreaming.KS_AM_ExactRateChange (size: 16)
 */
export interface KS_AM_ExactRateChange {
  /** i64 */
  OutputZeroTime: Deno.PointerValue;
  /** i32 */
  Rate: number;
}

export const sizeofKS_AM_ExactRateChange = 16;

export function allocKS_AM_ExactRateChange(data?: Partial<KS_AM_ExactRateChange>): Uint8Array {
  const buf = new Uint8Array(sizeofKS_AM_ExactRateChange);
  const view = new DataView(buf.buffer);
  // 0x00: i64
  if (data?.OutputZeroTime !== undefined) view.setBigInt64(0, BigInt(data.OutputZeroTime), true);
  // 0x08: i32
  if (data?.Rate !== undefined) view.setInt32(8, Number(data.Rate), true);
  // 0x0c: pad4
  return buf;
}

/**
 * Windows.Win32.Media.KernelStreaming.KSJACK_DESCRIPTION (size: 32)
 */
export interface KSJACK_DESCRIPTION {
  /** u32 */
  ChannelMapping: number;
  /** u32 */
  Color: number;
  /** Windows.Win32.Media.KernelStreaming.EPcxConnectionType */
  ConnectionType: EPcxConnectionType;
  /** Windows.Win32.Media.KernelStreaming.EPcxGeoLocation */
  GeoLocation: EPcxGeoLocation;
  /** Windows.Win32.Media.KernelStreaming.EPcxGenLocation */
  GenLocation: EPcxGenLocation;
  /** Windows.Win32.Media.KernelStreaming.EPxcPortConnection */
  PortConnection: EPxcPortConnection;
  /** Windows.Win32.Foundation.BOOL */
  IsConnected: boolean;
}

export const sizeofKSJACK_DESCRIPTION = 32;

export function allocKSJACK_DESCRIPTION(data?: Partial<KSJACK_DESCRIPTION>): Uint8Array {
  const buf = new Uint8Array(sizeofKSJACK_DESCRIPTION);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.ChannelMapping !== undefined) view.setUint32(0, Number(data.ChannelMapping), true);
  // 0x04: u32
  if (data?.Color !== undefined) view.setUint32(4, Number(data.Color), true);
  // 0x08: i32
  if (data?.ConnectionType !== undefined) view.setInt32(8, Number(data.ConnectionType), true);
  // 0x0c: i32
  if (data?.GeoLocation !== undefined) view.setInt32(12, Number(data.GeoLocation), true);
  // 0x10: i32
  if (data?.GenLocation !== undefined) view.setInt32(16, Number(data.GenLocation), true);
  // 0x14: i32
  if (data?.PortConnection !== undefined) view.setInt32(20, Number(data.PortConnection), true);
  // 0x18: i32
  if (data?.IsConnected !== undefined) view.setInt32(24, Number(data.IsConnected), true);
  // 0x1c: pad4
  return buf;
}

/**
 * Windows.Win32.Foundation.LUID (size: 8)
 */
export interface LUID {
  /** u32 */
  LowPart: number;
  /** i32 */
  HighPart: number;
}

export const sizeofLUID = 8;

export function allocLUID(data?: Partial<LUID>): Uint8Array {
  const buf = new Uint8Array(sizeofLUID);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.LowPart !== undefined) view.setUint32(0, Number(data.LowPart), true);
  // 0x04: i32
  if (data?.HighPart !== undefined) view.setInt32(4, Number(data.HighPart), true);
  return buf;
}

/**
 * Windows.Win32.Media.KernelStreaming.KSJACK_SINK_INFORMATION (size: 40)
 */
export interface KSJACK_SINK_INFORMATION {
  /** Windows.Win32.Media.KernelStreaming.KSJACK_SINK_CONNECTIONTYPE */
  ConnType: KSJACK_SINK_CONNECTIONTYPE;
  /** u16 */
  ManufacturerId: number;
  /** u16 */
  ProductId: number;
  /** u16 */
  AudioLatency: number;
  /** Windows.Win32.Foundation.BOOL */
  HDCPCapable: boolean;
  /** Windows.Win32.Foundation.BOOL */
  AICapable: boolean;
  /** u8 */
  SinkDescriptionLength: number;
  /** array */
  SinkDescription: Deno.PointerValue | null;
  /** Windows.Win32.Foundation.LUID */
  PortId: Uint8Array | Deno.PointerValue | null;
}

export const sizeofKSJACK_SINK_INFORMATION = 40;

export function allocKSJACK_SINK_INFORMATION(data?: Partial<KSJACK_SINK_INFORMATION>): Uint8Array {
  const buf = new Uint8Array(sizeofKSJACK_SINK_INFORMATION);
  const view = new DataView(buf.buffer);
  // 0x00: i32
  if (data?.ConnType !== undefined) view.setInt32(0, Number(data.ConnType), true);
  // 0x04: u16
  if (data?.ManufacturerId !== undefined) view.setUint16(4, Number(data.ManufacturerId), true);
  // 0x06: u16
  if (data?.ProductId !== undefined) view.setUint16(6, Number(data.ProductId), true);
  // 0x08: u16
  if (data?.AudioLatency !== undefined) view.setUint16(8, Number(data.AudioLatency), true);
  // 0x0a: i32
  if (data?.HDCPCapable !== undefined) view.setInt32(10, Number(data.HDCPCapable), true);
  // 0x0e: i32
  if (data?.AICapable !== undefined) view.setInt32(14, Number(data.AICapable), true);
  // 0x12: u8
  if (data?.SinkDescriptionLength !== undefined) view.setUint8(18, Number(data.SinkDescriptionLength));
  // 0x13: pad5
  // 0x18: pointer
  if (data?.SinkDescription !== undefined) view.setBigUint64(24, data.SinkDescription === null ? 0n : BigInt(util.toPointer(data.SinkDescription)), true);
  // 0x20: pointer
  if (data?.PortId !== undefined) view.setBigUint64(32, data.PortId === null ? 0n : BigInt(util.toPointer(data.PortId)), true);
  return buf;
}

/**
 * Windows.Win32.Media.KernelStreaming.KSJACK_DESCRIPTION2 (size: 8)
 */
export interface KSJACK_DESCRIPTION2 {
  /** u32 */
  DeviceStateInfo: number;
  /** u32 */
  JackCapabilities: number;
}

export const sizeofKSJACK_DESCRIPTION2 = 8;

export function allocKSJACK_DESCRIPTION2(data?: Partial<KSJACK_DESCRIPTION2>): Uint8Array {
  const buf = new Uint8Array(sizeofKSJACK_DESCRIPTION2);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.DeviceStateInfo !== undefined) view.setUint32(0, Number(data.DeviceStateInfo), true);
  // 0x04: u32
  if (data?.JackCapabilities !== undefined) view.setUint32(4, Number(data.JackCapabilities), true);
  return buf;
}

/**
 * Windows.Win32.Media.KernelStreaming.KSAUDIOENGINE_DESCRIPTOR (size: 16)
 */
export interface KSAUDIOENGINE_DESCRIPTOR {
  /** u32 */
  nHostPinId: number;
  /** u32 */
  nOffloadPinId: number;
  /** u32 */
  nLoopbackPinId: number;
}

export const sizeofKSAUDIOENGINE_DESCRIPTOR = 16;

export function allocKSAUDIOENGINE_DESCRIPTOR(data?: Partial<KSAUDIOENGINE_DESCRIPTOR>): Uint8Array {
  const buf = new Uint8Array(sizeofKSAUDIOENGINE_DESCRIPTOR);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.nHostPinId !== undefined) view.setUint32(0, Number(data.nHostPinId), true);
  // 0x04: u32
  if (data?.nOffloadPinId !== undefined) view.setUint32(4, Number(data.nOffloadPinId), true);
  // 0x08: u32
  if (data?.nLoopbackPinId !== undefined) view.setUint32(8, Number(data.nLoopbackPinId), true);
  // 0x0c: pad4
  return buf;
}

/**
 * Windows.Win32.Media.KernelStreaming.KSAUDIOENGINE_BUFFER_SIZE_RANGE (size: 8)
 */
export interface KSAUDIOENGINE_BUFFER_SIZE_RANGE {
  /** u32 */
  MinBufferBytes: number;
  /** u32 */
  MaxBufferBytes: number;
}

export const sizeofKSAUDIOENGINE_BUFFER_SIZE_RANGE = 8;

export function allocKSAUDIOENGINE_BUFFER_SIZE_RANGE(data?: Partial<KSAUDIOENGINE_BUFFER_SIZE_RANGE>): Uint8Array {
  const buf = new Uint8Array(sizeofKSAUDIOENGINE_BUFFER_SIZE_RANGE);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.MinBufferBytes !== undefined) view.setUint32(0, Number(data.MinBufferBytes), true);
  // 0x04: u32
  if (data?.MaxBufferBytes !== undefined) view.setUint32(4, Number(data.MaxBufferBytes), true);
  return buf;
}

/**
 * Windows.Win32.Media.KernelStreaming.KSAUDIOENGINE_VOLUMELEVEL (size: 16)
 */
export interface KSAUDIOENGINE_VOLUMELEVEL {
  /** i32 */
  TargetVolume: number;
  /** Windows.Win32.Media.KernelStreaming.AUDIO_CURVE_TYPE */
  CurveType: AUDIO_CURVE_TYPE;
  /** u64 */
  CurveDuration: Deno.PointerValue;
}

export const sizeofKSAUDIOENGINE_VOLUMELEVEL = 16;

export function allocKSAUDIOENGINE_VOLUMELEVEL(data?: Partial<KSAUDIOENGINE_VOLUMELEVEL>): Uint8Array {
  const buf = new Uint8Array(sizeofKSAUDIOENGINE_VOLUMELEVEL);
  const view = new DataView(buf.buffer);
  // 0x00: i32
  if (data?.TargetVolume !== undefined) view.setInt32(0, Number(data.TargetVolume), true);
  // 0x04: i32
  if (data?.CurveType !== undefined) view.setInt32(4, Number(data.CurveType), true);
  // 0x08: u64
  if (data?.CurveDuration !== undefined) view.setBigUint64(8, BigInt(data.CurveDuration), true);
  return buf;
}

/**
 * Windows.Win32.Media.KernelStreaming.KSATTRIBUTE_AUDIOSIGNALPROCESSING_MODE (size: 16)
 */
export interface KSATTRIBUTE_AUDIOSIGNALPROCESSING_MODE {
  /** Windows.Win32.Media.KernelStreaming.KSATTRIBUTE */
  AttributeHeader: Uint8Array | Deno.PointerValue | null;
  /** System.Guid */
  SignalProcessingMode: Uint8Array | Deno.PointerValue | null;
}

export const sizeofKSATTRIBUTE_AUDIOSIGNALPROCESSING_MODE = 16;

export function allocKSATTRIBUTE_AUDIOSIGNALPROCESSING_MODE(data?: Partial<KSATTRIBUTE_AUDIOSIGNALPROCESSING_MODE>): Uint8Array {
  const buf = new Uint8Array(sizeofKSATTRIBUTE_AUDIOSIGNALPROCESSING_MODE);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.AttributeHeader !== undefined) view.setBigUint64(0, data.AttributeHeader === null ? 0n : BigInt(util.toPointer(data.AttributeHeader)), true);
  // 0x08: pointer
  if (data?.SignalProcessingMode !== undefined) view.setBigUint64(8, data.SignalProcessingMode === null ? 0n : BigInt(util.toPointer(data.SignalProcessingMode)), true);
  return buf;
}

/**
 * Windows.Win32.Media.KernelStreaming.AUDIORESOURCEMANAGEMENT_RESOURCEGROUP (size: 16)
 */
export interface AUDIORESOURCEMANAGEMENT_RESOURCEGROUP {
  /** Windows.Win32.Foundation.BOOL */
  ResourceGroupAcquired: boolean;
  /** array */
  ResourceGroupName: Deno.PointerValue | null;
}

export const sizeofAUDIORESOURCEMANAGEMENT_RESOURCEGROUP = 16;

export function allocAUDIORESOURCEMANAGEMENT_RESOURCEGROUP(data?: Partial<AUDIORESOURCEMANAGEMENT_RESOURCEGROUP>): Uint8Array {
  const buf = new Uint8Array(sizeofAUDIORESOURCEMANAGEMENT_RESOURCEGROUP);
  const view = new DataView(buf.buffer);
  // 0x00: i32
  if (data?.ResourceGroupAcquired !== undefined) view.setInt32(0, Number(data.ResourceGroupAcquired), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.ResourceGroupName !== undefined) view.setBigUint64(8, data.ResourceGroupName === null ? 0n : BigInt(util.toPointer(data.ResourceGroupName)), true);
  return buf;
}

/**
 * Windows.Win32.Media.KernelStreaming.KSAUDIOMODULE_DESCRIPTOR (size: 32)
 */
export interface KSAUDIOMODULE_DESCRIPTOR {
  /** System.Guid */
  ClassId: Uint8Array | Deno.PointerValue | null;
  /** u32 */
  InstanceId: number;
  /** u32 */
  VersionMajor: number;
  /** u32 */
  VersionMinor: number;
  /** array */
  Name: Deno.PointerValue | null;
}

export const sizeofKSAUDIOMODULE_DESCRIPTOR = 32;

export function allocKSAUDIOMODULE_DESCRIPTOR(data?: Partial<KSAUDIOMODULE_DESCRIPTOR>): Uint8Array {
  const buf = new Uint8Array(sizeofKSAUDIOMODULE_DESCRIPTOR);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.ClassId !== undefined) view.setBigUint64(0, data.ClassId === null ? 0n : BigInt(util.toPointer(data.ClassId)), true);
  // 0x08: u32
  if (data?.InstanceId !== undefined) view.setUint32(8, Number(data.InstanceId), true);
  // 0x0c: u32
  if (data?.VersionMajor !== undefined) view.setUint32(12, Number(data.VersionMajor), true);
  // 0x10: u32
  if (data?.VersionMinor !== undefined) view.setUint32(16, Number(data.VersionMinor), true);
  // 0x14: pad4
  // 0x18: pointer
  if (data?.Name !== undefined) view.setBigUint64(24, data.Name === null ? 0n : BigInt(util.toPointer(data.Name)), true);
  return buf;
}

/**
 * Windows.Win32.Media.KernelStreaming.KSAUDIOMODULE_PROPERTY (size: 24)
 */
export interface KSAUDIOMODULE_PROPERTY {
  /** Windows.Win32.Media.KernelStreaming.KSIDENTIFIER */
  Property: Uint8Array | Deno.PointerValue | null;
  /** System.Guid */
  ClassId: Uint8Array | Deno.PointerValue | null;
  /** u32 */
  InstanceId: number;
}

export const sizeofKSAUDIOMODULE_PROPERTY = 24;

export function allocKSAUDIOMODULE_PROPERTY(data?: Partial<KSAUDIOMODULE_PROPERTY>): Uint8Array {
  const buf = new Uint8Array(sizeofKSAUDIOMODULE_PROPERTY);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.Property !== undefined) view.setBigUint64(0, data.Property === null ? 0n : BigInt(util.toPointer(data.Property)), true);
  // 0x08: pointer
  if (data?.ClassId !== undefined) view.setBigUint64(8, data.ClassId === null ? 0n : BigInt(util.toPointer(data.ClassId)), true);
  // 0x10: u32
  if (data?.InstanceId !== undefined) view.setUint32(16, Number(data.InstanceId), true);
  // 0x14: pad4
  return buf;
}

/**
 * Windows.Win32.Media.KernelStreaming.KSAUDIOMODULE_NOTIFICATION (size: 8)
 */
export interface KSAUDIOMODULE_NOTIFICATION {
  /** _Anonymous_e__Union */
  Anonymous: Uint8Array | Deno.PointerValue | null;
}

export const sizeofKSAUDIOMODULE_NOTIFICATION = 8;

export function allocKSAUDIOMODULE_NOTIFICATION(data?: Partial<KSAUDIOMODULE_NOTIFICATION>): Uint8Array {
  const buf = new Uint8Array(sizeofKSAUDIOMODULE_NOTIFICATION);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.Anonymous !== undefined) view.setBigUint64(0, data.Anonymous === null ? 0n : BigInt(util.toPointer(data.Anonymous)), true);
  return buf;
}

/**
 * Windows.Win32.Media.KernelStreaming.OPTIMAL_WEIGHT_TOTALS (size: 24)
 */
export interface OPTIMAL_WEIGHT_TOTALS {
  /** i64 */
  MinTotalNominator: Deno.PointerValue;
  /** i64 */
  MaxTotalNominator: Deno.PointerValue;
  /** i64 */
  TotalDenominator: Deno.PointerValue;
}

export const sizeofOPTIMAL_WEIGHT_TOTALS = 24;

export function allocOPTIMAL_WEIGHT_TOTALS(data?: Partial<OPTIMAL_WEIGHT_TOTALS>): Uint8Array {
  const buf = new Uint8Array(sizeofOPTIMAL_WEIGHT_TOTALS);
  const view = new DataView(buf.buffer);
  // 0x00: i64
  if (data?.MinTotalNominator !== undefined) view.setBigInt64(0, BigInt(data.MinTotalNominator), true);
  // 0x08: i64
  if (data?.MaxTotalNominator !== undefined) view.setBigInt64(8, BigInt(data.MaxTotalNominator), true);
  // 0x10: i64
  if (data?.TotalDenominator !== undefined) view.setBigInt64(16, BigInt(data.TotalDenominator), true);
  return buf;
}

/**
 * Windows.Win32.Media.KernelStreaming.PIPE_DIMENSIONS (size: 24)
 */
export interface PIPE_DIMENSIONS {
  /** Windows.Win32.Media.KernelStreaming.KS_COMPRESSION */
  AllocatorPin: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Media.KernelStreaming.KS_COMPRESSION */
  MaxExpansionPin: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Media.KernelStreaming.KS_COMPRESSION */
  EndPin: Uint8Array | Deno.PointerValue | null;
}

export const sizeofPIPE_DIMENSIONS = 24;

export function allocPIPE_DIMENSIONS(data?: Partial<PIPE_DIMENSIONS>): Uint8Array {
  const buf = new Uint8Array(sizeofPIPE_DIMENSIONS);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.AllocatorPin !== undefined) view.setBigUint64(0, data.AllocatorPin === null ? 0n : BigInt(util.toPointer(data.AllocatorPin)), true);
  // 0x08: pointer
  if (data?.MaxExpansionPin !== undefined) view.setBigUint64(8, data.MaxExpansionPin === null ? 0n : BigInt(util.toPointer(data.MaxExpansionPin)), true);
  // 0x10: pointer
  if (data?.EndPin !== undefined) view.setBigUint64(16, data.EndPin === null ? 0n : BigInt(util.toPointer(data.EndPin)), true);
  return buf;
}

/**
 * Windows.Win32.Media.KernelStreaming.PIPE_TERMINATION (size: 40)
 */
export interface PIPE_TERMINATION {
  /** u32 */
  Flags: number;
  /** u32 */
  OutsideFactors: number;
  /** u32 */
  Weigth: number;
  /** Windows.Win32.Media.KernelStreaming.KS_FRAMING_RANGE */
  PhysicalRange: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Media.KernelStreaming.KS_FRAMING_RANGE_WEIGHTED */
  OptimalRange: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Media.KernelStreaming.KS_COMPRESSION */
  Compression: Uint8Array | Deno.PointerValue | null;
}

export const sizeofPIPE_TERMINATION = 40;

export function allocPIPE_TERMINATION(data?: Partial<PIPE_TERMINATION>): Uint8Array {
  const buf = new Uint8Array(sizeofPIPE_TERMINATION);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.Flags !== undefined) view.setUint32(0, Number(data.Flags), true);
  // 0x04: u32
  if (data?.OutsideFactors !== undefined) view.setUint32(4, Number(data.OutsideFactors), true);
  // 0x08: u32
  if (data?.Weigth !== undefined) view.setUint32(8, Number(data.Weigth), true);
  // 0x0c: pad4
  // 0x10: pointer
  if (data?.PhysicalRange !== undefined) view.setBigUint64(16, data.PhysicalRange === null ? 0n : BigInt(util.toPointer(data.PhysicalRange)), true);
  // 0x18: pointer
  if (data?.OptimalRange !== undefined) view.setBigUint64(24, data.OptimalRange === null ? 0n : BigInt(util.toPointer(data.OptimalRange)), true);
  // 0x20: pointer
  if (data?.Compression !== undefined) view.setBigUint64(32, data.Compression === null ? 0n : BigInt(util.toPointer(data.Compression)), true);
  return buf;
}

/**
 * Windows.Win32.Media.KernelStreaming.ALLOCATOR_PROPERTIES_EX (size: 128)
 */
export interface ALLOCATOR_PROPERTIES_EX {
  /** i32 */
  cBuffers: number;
  /** i32 */
  cbBuffer: number;
  /** i32 */
  cbAlign: number;
  /** i32 */
  cbPrefix: number;
  /** System.Guid */
  MemoryType: Uint8Array | Deno.PointerValue | null;
  /** System.Guid */
  BusType: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Media.KernelStreaming.PIPE_STATE */
  State: PIPE_STATE;
  /** Windows.Win32.Media.KernelStreaming.PIPE_TERMINATION */
  Input: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Media.KernelStreaming.PIPE_TERMINATION */
  Output: Uint8Array | Deno.PointerValue | null;
  /** u32 */
  Strategy: number;
  /** u32 */
  Flags: number;
  /** u32 */
  Weight: number;
  /** Windows.Win32.Media.KernelStreaming.KS_LogicalMemoryType */
  LogicalMemoryType: KS_LogicalMemoryType;
  /** Windows.Win32.Media.KernelStreaming.PIPE_ALLOCATOR_PLACE */
  AllocatorPlace: PIPE_ALLOCATOR_PLACE;
  /** Windows.Win32.Media.KernelStreaming.PIPE_DIMENSIONS */
  Dimensions: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Media.KernelStreaming.KS_FRAMING_RANGE */
  PhysicalRange: Uint8Array | Deno.PointerValue | null;
  /** ptr */
  PrevSegment: Deno.PointerValue | Uint8Array | null;
  /** u32 */
  CountNextSegments: number;
  /** ptr */
  NextSegments: Deno.PointerValue | Uint8Array | null;
  /** u32 */
  InsideFactors: number;
  /** u32 */
  NumberPins: number;
}

export const sizeofALLOCATOR_PROPERTIES_EX = 128;

export function allocALLOCATOR_PROPERTIES_EX(data?: Partial<ALLOCATOR_PROPERTIES_EX>): Uint8Array {
  const buf = new Uint8Array(sizeofALLOCATOR_PROPERTIES_EX);
  const view = new DataView(buf.buffer);
  // 0x00: i32
  if (data?.cBuffers !== undefined) view.setInt32(0, Number(data.cBuffers), true);
  // 0x04: i32
  if (data?.cbBuffer !== undefined) view.setInt32(4, Number(data.cbBuffer), true);
  // 0x08: i32
  if (data?.cbAlign !== undefined) view.setInt32(8, Number(data.cbAlign), true);
  // 0x0c: i32
  if (data?.cbPrefix !== undefined) view.setInt32(12, Number(data.cbPrefix), true);
  // 0x10: pointer
  if (data?.MemoryType !== undefined) view.setBigUint64(16, data.MemoryType === null ? 0n : BigInt(util.toPointer(data.MemoryType)), true);
  // 0x18: pointer
  if (data?.BusType !== undefined) view.setBigUint64(24, data.BusType === null ? 0n : BigInt(util.toPointer(data.BusType)), true);
  // 0x20: i32
  if (data?.State !== undefined) view.setInt32(32, Number(data.State), true);
  // 0x24: pad4
  // 0x28: pointer
  if (data?.Input !== undefined) view.setBigUint64(40, data.Input === null ? 0n : BigInt(util.toPointer(data.Input)), true);
  // 0x30: pointer
  if (data?.Output !== undefined) view.setBigUint64(48, data.Output === null ? 0n : BigInt(util.toPointer(data.Output)), true);
  // 0x38: u32
  if (data?.Strategy !== undefined) view.setUint32(56, Number(data.Strategy), true);
  // 0x3c: u32
  if (data?.Flags !== undefined) view.setUint32(60, Number(data.Flags), true);
  // 0x40: u32
  if (data?.Weight !== undefined) view.setUint32(64, Number(data.Weight), true);
  // 0x44: i32
  if (data?.LogicalMemoryType !== undefined) view.setInt32(68, Number(data.LogicalMemoryType), true);
  // 0x48: i32
  if (data?.AllocatorPlace !== undefined) view.setInt32(72, Number(data.AllocatorPlace), true);
  // 0x4c: pad4
  // 0x50: pointer
  if (data?.Dimensions !== undefined) view.setBigUint64(80, data.Dimensions === null ? 0n : BigInt(util.toPointer(data.Dimensions)), true);
  // 0x58: pointer
  if (data?.PhysicalRange !== undefined) view.setBigUint64(88, data.PhysicalRange === null ? 0n : BigInt(util.toPointer(data.PhysicalRange)), true);
  // 0x60: pointer
  if (data?.PrevSegment !== undefined) view.setBigUint64(96, data.PrevSegment === null ? 0n : BigInt(util.toPointer(data.PrevSegment)), true);
  // 0x68: u32
  if (data?.CountNextSegments !== undefined) view.setUint32(104, Number(data.CountNextSegments), true);
  // 0x6c: pad4
  // 0x70: pointer
  if (data?.NextSegments !== undefined) view.setBigUint64(112, data.NextSegments === null ? 0n : BigInt(util.toPointer(data.NextSegments)), true);
  // 0x78: u32
  if (data?.InsideFactors !== undefined) view.setUint32(120, Number(data.InsideFactors), true);
  // 0x7c: u32
  if (data?.NumberPins !== undefined) view.setUint32(124, Number(data.NumberPins), true);
  return buf;
}

export type HRESULT = number;

// Native Libraries

try {
  var libksuser_dll = Deno.dlopen("ksuser.dll", {
    KsCreateAllocator: {
      parameters: ["pointer", "pointer", "pointer"],
      result: "u32",
    },
    KsCreateClock: {
      parameters: ["pointer", "pointer", "pointer"],
      result: "u32",
    },
    KsCreatePin: {
      parameters: ["pointer", "pointer", "u32", "pointer"],
      result: "u32",
    },
    KsCreateTopologyNode: {
      parameters: ["pointer", "pointer", "u32", "pointer"],
      result: "u32",
    },
    KsCreateAllocator2: {
      parameters: ["pointer", "pointer", "pointer"],
      result: "pointer",
    },
    KsCreateClock2: {
      parameters: ["pointer", "pointer", "pointer"],
      result: "pointer",
    },
    KsCreatePin2: {
      parameters: ["pointer", "pointer", "u32", "pointer"],
      result: "pointer",
    },
    KsCreateTopologyNode2: {
      parameters: ["pointer", "pointer", "u32", "pointer"],
      result: "pointer",
    },
  }).symbols;
} catch(e) { /* ignore */ }

// Symbols

export function KsCreateAllocator(
  ConnectionHandle: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Foundation.HANDLE */,
  AllocatorFraming: Deno.PointerValue | Uint8Array | null /* ptr */,
  AllocatorHandle: Deno.PointerValue | Uint8Array | null /* ptr */,
): number /* u32 */ {
  return libksuser_dll.KsCreateAllocator(util.toPointer(ConnectionHandle), util.toPointer(AllocatorFraming), util.toPointer(AllocatorHandle));
}

export function KsCreateClock(
  ConnectionHandle: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Foundation.HANDLE */,
  ClockCreate: Deno.PointerValue | Uint8Array | null /* ptr */,
  ClockHandle: Deno.PointerValue | Uint8Array | null /* ptr */,
): number /* u32 */ {
  return libksuser_dll.KsCreateClock(util.toPointer(ConnectionHandle), util.toPointer(ClockCreate), util.toPointer(ClockHandle));
}

export function KsCreatePin(
  FilterHandle: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Foundation.HANDLE */,
  Connect: Deno.PointerValue | Uint8Array | null /* ptr */,
  DesiredAccess: number /* u32 */,
  ConnectionHandle: Deno.PointerValue | Uint8Array | null /* ptr */,
): number /* u32 */ {
  return libksuser_dll.KsCreatePin(util.toPointer(FilterHandle), util.toPointer(Connect), DesiredAccess, util.toPointer(ConnectionHandle));
}

export function KsCreateTopologyNode(
  ParentHandle: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Foundation.HANDLE */,
  NodeCreate: Deno.PointerValue | Uint8Array | null /* ptr */,
  DesiredAccess: number /* u32 */,
  NodeHandle: Deno.PointerValue | Uint8Array | null /* ptr */,
): number /* u32 */ {
  return libksuser_dll.KsCreateTopologyNode(util.toPointer(ParentHandle), util.toPointer(NodeCreate), DesiredAccess, util.toPointer(NodeHandle));
}

export function KsCreateAllocator2(
  ConnectionHandle: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Foundation.HANDLE */,
  AllocatorFraming: Deno.PointerValue | Uint8Array | null /* ptr */,
  AllocatorHandle: Deno.PointerValue | Uint8Array | null /* ptr */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libksuser_dll.KsCreateAllocator2(util.toPointer(ConnectionHandle), util.toPointer(AllocatorFraming), util.toPointer(AllocatorHandle)));
}

export function KsCreateClock2(
  ConnectionHandle: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Foundation.HANDLE */,
  ClockCreate: Deno.PointerValue | Uint8Array | null /* ptr */,
  ClockHandle: Deno.PointerValue | Uint8Array | null /* ptr */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libksuser_dll.KsCreateClock2(util.toPointer(ConnectionHandle), util.toPointer(ClockCreate), util.toPointer(ClockHandle)));
}

export function KsCreatePin2(
  FilterHandle: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Foundation.HANDLE */,
  Connect: Deno.PointerValue | Uint8Array | null /* ptr */,
  DesiredAccess: number /* u32 */,
  ConnectionHandle: Deno.PointerValue | Uint8Array | null /* ptr */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libksuser_dll.KsCreatePin2(util.toPointer(FilterHandle), util.toPointer(Connect), DesiredAccess, util.toPointer(ConnectionHandle)));
}

export function KsCreateTopologyNode2(
  ParentHandle: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Foundation.HANDLE */,
  NodeCreate: Deno.PointerValue | Uint8Array | null /* ptr */,
  DesiredAccess: number /* u32 */,
  NodeHandle: Deno.PointerValue | Uint8Array | null /* ptr */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libksuser_dll.KsCreateTopologyNode2(util.toPointer(ParentHandle), util.toPointer(NodeCreate), DesiredAccess, util.toPointer(NodeHandle)));
}

