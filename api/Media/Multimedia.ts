/// Auto-generated by Deno Win32: Windows.Win32.Media.Multimedia.Apis

import * as util from "../../util.ts";

// Constants
export const WM_CAP_START = 1024;
export const MODM_USER = 16384;
export const MIDM_USER = 16384;
export const MODM_MAPPER = 8192;
export const MIDM_MAPPER = 8192;
export const MODM_INIT = 100;
export const MIDM_INIT = 100;
export const MODM_INIT_EX = 104;
export const MIDM_INIT_EX = 104;
export const DRV_MCI_FIRST = 2048;
export const ACMDM_BASE = 24576;
export const ICM_RESERVED = 20480;
export const MCI_TEST = 32;
export const MCI_CAPTURE = 2160;
export const MCI_MONITOR = 2161;
export const MCI_RESERVE = 2162;
export const MCI_SETAUDIO = 2163;
export const MCI_SIGNAL = 2165;
export const MCI_SETVIDEO = 2166;
export const MCI_QUALITY = 2167;
export const MCI_LIST = 2168;
export const MCI_UNDO = 2169;
export const MCI_CONFIGURE = 2170;
export const MCI_RESTORE = 2171;
export const MCI_ON = 1;
export const MCI_OFF = 0;
export const MCI_DGV_FILE_MODE_SAVING = 1;
export const MCI_DGV_FILE_MODE_LOADING = 2;
export const MCI_DGV_FILE_MODE_EDITING = 3;
export const MCI_DGV_FILE_MODE_IDLE = 4;
export const MCI_ON_S = 32768;
export const MCI_OFF_S = 32769;
export const MCI_DGV_FILE_S = 32770;
export const MCI_DGV_INPUT_S = 32771;
export const MCI_DGV_FILE_MODE_SAVING_S = 32772;
export const MCI_DGV_FILE_MODE_LOADING_S = 32773;
export const MCI_DGV_FILE_MODE_EDITING_S = 32774;
export const MCI_DGV_FILE_MODE_IDLE_S = 32775;
export const MCI_DGV_SETVIDEO_SRC_NTSC_S = 32784;
export const MCI_DGV_SETVIDEO_SRC_RGB_S = 32785;
export const MCI_DGV_SETVIDEO_SRC_SVIDEO_S = 32786;
export const MCI_DGV_SETVIDEO_SRC_PAL_S = 32787;
export const MCI_DGV_SETVIDEO_SRC_SECAM_S = 32788;
export const MCI_DGV_SETVIDEO_SRC_GENERIC_S = 32789;
export const MCI_DGV_SETAUDIO_SRC_LEFT_S = 32800;
export const MCI_DGV_SETAUDIO_SRC_RIGHT_S = 32801;
export const MCI_DGV_SETAUDIO_SRC_AVERAGE_S = 32802;
export const MCI_DGV_SETAUDIO_SRC_STEREO_S = 32803;
export const MCIERR_DGV_DEVICE_LIMIT = 512;
export const MCIERR_DGV_IOERR = 513;
export const MCIERR_DGV_WORKSPACE_EMPTY = 514;
export const MCIERR_DGV_DISK_FULL = 515;
export const MCIERR_DGV_DEVICE_MEMORY_FULL = 516;
export const MCIERR_DGV_BAD_CLIPBOARD_RANGE = 517;
export const MCI_DGV_METHOD_PRE = 40960;
export const MCI_DGV_METHOD_POST = 40961;
export const MCI_DGV_METHOD_DIRECT = 40962;
export const MCI_DGV_FF_AVSS = 16384;
export const MCI_DGV_FF_AVI = 16385;
export const MCI_DGV_FF_DIB = 16386;
export const MCI_DGV_FF_RDIB = 16387;
export const MCI_DGV_FF_JPEG = 16388;
export const MCI_DGV_FF_RJPEG = 16389;
export const MCI_DGV_FF_JFIF = 16390;
export const MCI_DGV_FF_MPEG = 16391;
export const MCI_DGV_GETDEVCAPS_CAN_LOCK = 16384;
export const MCI_DGV_GETDEVCAPS_CAN_STRETCH = 16385;
export const MCI_DGV_GETDEVCAPS_CAN_FREEZE = 16386;
export const MCI_DGV_GETDEVCAPS_MAX_WINDOWS = 16387;
export const MCI_DGV_GETDEVCAPS_CAN_REVERSE = 16388;
export const MCI_DGV_GETDEVCAPS_HAS_STILL = 16389;
export const MCI_DGV_GETDEVCAPS_PALETTES = 16390;
export const MCI_DGV_GETDEVCAPS_CAN_STR_IN = 16392;
export const MCI_DGV_GETDEVCAPS_CAN_TEST = 16393;
export const MCI_DGV_GETDEVCAPS_MAXIMUM_RATE = 16394;
export const MCI_DGV_GETDEVCAPS_MINIMUM_RATE = 16395;
export const MCI_DGV_CAPTURE_AS = 65536;
export const MCI_DGV_CAPTURE_AT = 131072;
export const MCI_DGV_COPY_AT = 65536;
export const MCI_DGV_COPY_AUDIO_STREAM = 131072;
export const MCI_DGV_COPY_VIDEO_STREAM = 262144;
export const MCI_DGV_CUE_INPUT = 65536;
export const MCI_DGV_CUE_OUTPUT = 131072;
export const MCI_DGV_CUE_NOSHOW = 262144;
export const MCI_DGV_CUT_AT = 65536;
export const MCI_DGV_CUT_AUDIO_STREAM = 131072;
export const MCI_DGV_CUT_VIDEO_STREAM = 262144;
export const MCI_DGV_DELETE_AT = 65536;
export const MCI_DGV_DELETE_AUDIO_STREAM = 131072;
export const MCI_DGV_DELETE_VIDEO_STREAM = 262144;
export const MCI_DGV_FREEZE_AT = 65536;
export const MCI_DGV_FREEZE_OUTSIDE = 131072;
export const MCI_DGV_INFO_TEXT = 65536;
export const MCI_DGV_INFO_ITEM = 131072;
export const MCI_INFO_VERSION = 1024;
export const MCI_DGV_INFO_USAGE = 16384;
export const MCI_DGV_INFO_AUDIO_QUALITY = 16385;
export const MCI_DGV_INFO_STILL_QUALITY = 16386;
export const MCI_DGV_INFO_VIDEO_QUALITY = 16387;
export const MCI_DGV_INFO_AUDIO_ALG = 16388;
export const MCI_DGV_INFO_STILL_ALG = 16389;
export const MCI_DGV_INFO_VIDEO_ALG = 16390;
export const MCI_DGV_LIST_ITEM = 65536;
export const MCI_DGV_LIST_COUNT = 131072;
export const MCI_DGV_LIST_NUMBER = 262144;
export const MCI_DGV_LIST_ALG = 524288;
export const MCI_DGV_LIST_AUDIO_ALG = 16384;
export const MCI_DGV_LIST_AUDIO_QUALITY = 16385;
export const MCI_DGV_LIST_AUDIO_STREAM = 16386;
export const MCI_DGV_LIST_STILL_ALG = 16387;
export const MCI_DGV_LIST_STILL_QUALITY = 16388;
export const MCI_DGV_LIST_VIDEO_ALG = 16389;
export const MCI_DGV_LIST_VIDEO_QUALITY = 16390;
export const MCI_DGV_LIST_VIDEO_STREAM = 16391;
export const MCI_DGV_LIST_VIDEO_SOURCE = 16392;
export const MCI_DGV_MONITOR_METHOD = 65536;
export const MCI_DGV_MONITOR_SOURCE = 131072;
export const MCI_DGV_MONITOR_INPUT = 16384;
export const MCI_DGV_MONITOR_FILE = 16385;
export const MCI_DGV_OPEN_WS = 65536;
export const MCI_DGV_OPEN_PARENT = 131072;
export const MCI_DGV_OPEN_NOSTATIC = 262144;
export const MCI_DGV_OPEN_16BIT = 524288;
export const MCI_DGV_OPEN_32BIT = 1048576;
export const MCI_DGV_PASTE_AT = 65536;
export const MCI_DGV_PASTE_AUDIO_STREAM = 131072;
export const MCI_DGV_PASTE_VIDEO_STREAM = 262144;
export const MCI_DGV_PASTE_INSERT = 524288;
export const MCI_DGV_PASTE_OVERWRITE = 1048576;
export const MCI_DGV_PLAY_REPEAT = 65536;
export const MCI_DGV_PLAY_REVERSE = 131072;
export const MCI_DGV_RECT = 65536;
export const MCI_DGV_PUT_SOURCE = 131072;
export const MCI_DGV_PUT_DESTINATION = 262144;
export const MCI_DGV_PUT_FRAME = 524288;
export const MCI_DGV_PUT_VIDEO = 1048576;
export const MCI_DGV_PUT_WINDOW = 2097152;
export const MCI_DGV_PUT_CLIENT = 4194304;
export const MCI_QUALITY_ITEM = 65536;
export const MCI_QUALITY_NAME = 131072;
export const MCI_QUALITY_ALG = 262144;
export const MCI_QUALITY_DIALOG = 524288;
export const MCI_QUALITY_HANDLE = 1048576;
export const MCI_QUALITY_ITEM_AUDIO = 16384;
export const MCI_QUALITY_ITEM_STILL = 16385;
export const MCI_QUALITY_ITEM_VIDEO = 16386;
export const MCI_DGV_REALIZE_NORM = 65536;
export const MCI_DGV_REALIZE_BKGD = 131072;
export const MCI_DGV_RECORD_HOLD = 131072;
export const MCI_DGV_RECORD_AUDIO_STREAM = 262144;
export const MCI_DGV_RECORD_VIDEO_STREAM = 524288;
export const MCI_DGV_RESERVE_IN = 65536;
export const MCI_DGV_RESERVE_SIZE = 131072;
export const MCI_DGV_RESTORE_FROM = 65536;
export const MCI_DGV_RESTORE_AT = 131072;
export const MCI_DGV_SAVE_ABORT = 131072;
export const MCI_DGV_SAVE_KEEPRESERVE = 262144;
export const MCI_DGV_SET_SEEK_EXACTLY = 65536;
export const MCI_DGV_SET_SPEED = 131072;
export const MCI_DGV_SET_STILL = 262144;
export const MCI_DGV_SET_FILEFORMAT = 524288;
export const MCI_DGV_SETAUDIO_OVER = 65536;
export const MCI_DGV_SETAUDIO_CLOCKTIME = 131072;
export const MCI_DGV_SETAUDIO_ALG = 262144;
export const MCI_DGV_SETAUDIO_QUALITY = 524288;
export const MCI_DGV_SETAUDIO_RECORD = 1048576;
export const MCI_DGV_SETAUDIO_LEFT = 2097152;
export const MCI_DGV_SETAUDIO_RIGHT = 4194304;
export const MCI_DGV_SETAUDIO_ITEM = 8388608;
export const MCI_DGV_SETAUDIO_VALUE = 16777216;
export const MCI_DGV_SETAUDIO_INPUT = 33554432;
export const MCI_DGV_SETAUDIO_OUTPUT = 67108864;
export const MCI_DGV_SETAUDIO_TREBLE = 16384;
export const MCI_DGV_SETAUDIO_BASS = 16385;
export const MCI_DGV_SETAUDIO_VOLUME = 16386;
export const MCI_DGV_SETAUDIO_STREAM = 16387;
export const MCI_DGV_SETAUDIO_SOURCE = 16388;
export const MCI_DGV_SETAUDIO_SAMPLESPERSEC = 16389;
export const MCI_DGV_SETAUDIO_AVGBYTESPERSEC = 16390;
export const MCI_DGV_SETAUDIO_BLOCKALIGN = 16391;
export const MCI_DGV_SETAUDIO_BITSPERSAMPLE = 16392;
export const MCI_DGV_SETAUDIO_SOURCE_STEREO = 0;
export const MCI_DGV_SETAUDIO_SOURCE_LEFT = 1;
export const MCI_DGV_SETAUDIO_SOURCE_RIGHT = 2;
export const MCI_DGV_SETAUDIO_SOURCE_AVERAGE = 16384;
export const MCI_DGV_SETVIDEO_QUALITY = 65536;
export const MCI_DGV_SETVIDEO_ALG = 131072;
export const MCI_DGV_SETVIDEO_CLOCKTIME = 262144;
export const MCI_DGV_SETVIDEO_SRC_NUMBER = 524288;
export const MCI_DGV_SETVIDEO_ITEM = 1048576;
export const MCI_DGV_SETVIDEO_OVER = 2097152;
export const MCI_DGV_SETVIDEO_RECORD = 4194304;
export const MCI_DGV_SETVIDEO_STILL = 8388608;
export const MCI_DGV_SETVIDEO_VALUE = 16777216;
export const MCI_DGV_SETVIDEO_INPUT = 33554432;
export const MCI_DGV_SETVIDEO_OUTPUT = 67108864;
export const MCI_DGV_SETVIDEO_SRC_NTSC = 16384;
export const MCI_DGV_SETVIDEO_SRC_RGB = 16385;
export const MCI_DGV_SETVIDEO_SRC_SVIDEO = 16386;
export const MCI_DGV_SETVIDEO_SRC_PAL = 16387;
export const MCI_DGV_SETVIDEO_SRC_SECAM = 16388;
export const MCI_DGV_SETVIDEO_SRC_GENERIC = 16389;
export const MCI_DGV_SETVIDEO_BRIGHTNESS = 16384;
export const MCI_DGV_SETVIDEO_COLOR = 16385;
export const MCI_DGV_SETVIDEO_CONTRAST = 16386;
export const MCI_DGV_SETVIDEO_TINT = 16387;
export const MCI_DGV_SETVIDEO_SHARPNESS = 16388;
export const MCI_DGV_SETVIDEO_GAMMA = 16389;
export const MCI_DGV_SETVIDEO_STREAM = 16390;
export const MCI_DGV_SETVIDEO_PALHANDLE = 16391;
export const MCI_DGV_SETVIDEO_FRAME_RATE = 16392;
export const MCI_DGV_SETVIDEO_SOURCE = 16393;
export const MCI_DGV_SETVIDEO_KEY_INDEX = 16394;
export const MCI_DGV_SETVIDEO_KEY_COLOR = 16395;
export const MCI_DGV_SETVIDEO_BITSPERPEL = 16396;
export const MCI_DGV_SIGNAL_AT = 65536;
export const MCI_DGV_SIGNAL_EVERY = 131072;
export const MCI_DGV_SIGNAL_USERVAL = 262144;
export const MCI_DGV_SIGNAL_CANCEL = 524288;
export const MCI_DGV_SIGNAL_POSITION = 1048576;
export const MCI_DGV_STATUS_NOMINAL = 131072;
export const MCI_DGV_STATUS_REFERENCE = 262144;
export const MCI_DGV_STATUS_LEFT = 524288;
export const MCI_DGV_STATUS_RIGHT = 1048576;
export const MCI_DGV_STATUS_DISKSPACE = 2097152;
export const MCI_DGV_STATUS_INPUT = 4194304;
export const MCI_DGV_STATUS_OUTPUT = 8388608;
export const MCI_DGV_STATUS_RECORD = 16777216;
export const MCI_DGV_STATUS_AUDIO_INPUT = 16384;
export const MCI_DGV_STATUS_HWND = 16385;
export const MCI_DGV_STATUS_SPEED = 16387;
export const MCI_DGV_STATUS_HPAL = 16388;
export const MCI_DGV_STATUS_BRIGHTNESS = 16389;
export const MCI_DGV_STATUS_COLOR = 16390;
export const MCI_DGV_STATUS_CONTRAST = 16391;
export const MCI_DGV_STATUS_FILEFORMAT = 16392;
export const MCI_DGV_STATUS_AUDIO_SOURCE = 16393;
export const MCI_DGV_STATUS_GAMMA = 16394;
export const MCI_DGV_STATUS_MONITOR = 16395;
export const MCI_DGV_STATUS_MONITOR_METHOD = 16396;
export const MCI_DGV_STATUS_FRAME_RATE = 16398;
export const MCI_DGV_STATUS_BASS = 16399;
export const MCI_DGV_STATUS_SIZE = 16400;
export const MCI_DGV_STATUS_SEEK_EXACTLY = 16401;
export const MCI_DGV_STATUS_SHARPNESS = 16402;
export const MCI_DGV_STATUS_SMPTE = 16403;
export const MCI_DGV_STATUS_AUDIO = 16404;
export const MCI_DGV_STATUS_TINT = 16405;
export const MCI_DGV_STATUS_TREBLE = 16406;
export const MCI_DGV_STATUS_UNSAVED = 16407;
export const MCI_DGV_STATUS_VIDEO = 16408;
export const MCI_DGV_STATUS_VOLUME = 16409;
export const MCI_DGV_STATUS_AUDIO_RECORD = 16410;
export const MCI_DGV_STATUS_VIDEO_SOURCE = 16411;
export const MCI_DGV_STATUS_VIDEO_RECORD = 16412;
export const MCI_DGV_STATUS_STILL_FILEFORMAT = 16413;
export const MCI_DGV_STATUS_VIDEO_SRC_NUM = 16414;
export const MCI_DGV_STATUS_FILE_MODE = 16415;
export const MCI_DGV_STATUS_FILE_COMPLETION = 16416;
export const MCI_DGV_STATUS_WINDOW_VISIBLE = 16417;
export const MCI_DGV_STATUS_WINDOW_MINIMIZED = 16418;
export const MCI_DGV_STATUS_WINDOW_MAXIMIZED = 16419;
export const MCI_DGV_STATUS_KEY_INDEX = 16420;
export const MCI_DGV_STATUS_KEY_COLOR = 16421;
export const MCI_DGV_STATUS_PAUSE_MODE = 16422;
export const MCI_DGV_STATUS_SAMPLESPERSEC = 16423;
export const MCI_DGV_STATUS_AVGBYTESPERSEC = 16424;
export const MCI_DGV_STATUS_BLOCKALIGN = 16425;
export const MCI_DGV_STATUS_BITSPERSAMPLE = 16426;
export const MCI_DGV_STATUS_BITSPERPEL = 16427;
export const MCI_DGV_STATUS_FORWARD = 16428;
export const MCI_DGV_STATUS_AUDIO_STREAM = 16429;
export const MCI_DGV_STATUS_VIDEO_STREAM = 16430;
export const MCI_DGV_STEP_REVERSE = 65536;
export const MCI_DGV_STEP_FRAMES = 131072;
export const MCI_DGV_STOP_HOLD = 65536;
export const MCI_DGV_UPDATE_HDC = 131072;
export const MCI_DGV_UPDATE_PAINT = 262144;
export const MCI_DGV_WHERE_SOURCE = 131072;
export const MCI_DGV_WHERE_DESTINATION = 262144;
export const MCI_DGV_WHERE_FRAME = 524288;
export const MCI_DGV_WHERE_VIDEO = 1048576;
export const MCI_DGV_WHERE_WINDOW = 2097152;
export const MCI_DGV_WHERE_MAX = 4194304;
export const MCI_DGV_WINDOW_HWND = 65536;
export const MCI_DGV_WINDOW_STATE = 262144;
export const MCI_DGV_WINDOW_TEXT = 524288;
export const MCI_DGV_WINDOW_DEFAULT = 0;
export const MM_CREATIVE = 2;
export const MM_MEDIAVISION = 3;
export const MM_FUJITSU = 4;
export const MM_PRAGMATRAX = 5;
export const MM_CYRIX = 6;
export const MM_PHILIPS_SPEECH_PROCESSING = 7;
export const MM_NETXL = 8;
export const MM_ZYXEL = 9;
export const MM_BECUBED = 10;
export const MM_AARDVARK = 11;
export const MM_BINTEC = 12;
export const MM_HEWLETT_PACKARD = 13;
export const MM_ACULAB = 14;
export const MM_FAITH = 15;
export const MM_MITEL = 16;
export const MM_QUANTUM3D = 17;
export const MM_SNI = 18;
export const MM_EMU = 19;
export const MM_ARTISOFT = 20;
export const MM_TURTLE_BEACH = 21;
export const MM_IBM = 22;
export const MM_VOCALTEC = 23;
export const MM_ROLAND = 24;
export const MM_DSP_SOLUTIONS = 25;
export const MM_NEC = 26;
export const MM_ATI = 27;
export const MM_WANGLABS = 28;
export const MM_TANDY = 29;
export const MM_VOYETRA = 30;
export const MM_ANTEX = 31;
export const MM_ICL_PS = 32;
export const MM_INTEL = 33;
export const MM_GRAVIS = 34;
export const MM_VAL = 35;
export const MM_INTERACTIVE = 36;
export const MM_YAMAHA = 37;
export const MM_EVEREX = 38;
export const MM_ECHO = 39;
export const MM_SIERRA = 40;
export const MM_CAT = 41;
export const MM_APPS = 42;
export const MM_DSP_GROUP = 43;
export const MM_MELABS = 44;
export const MM_COMPUTER_FRIENDS = 45;
export const MM_ESS = 46;
export const MM_AUDIOFILE = 47;
export const MM_MOTOROLA = 48;
export const MM_CANOPUS = 49;
export const MM_EPSON = 50;
export const MM_TRUEVISION = 51;
export const MM_AZTECH = 52;
export const MM_VIDEOLOGIC = 53;
export const MM_SCALACS = 54;
export const MM_KORG = 55;
export const MM_APT = 56;
export const MM_ICS = 57;
export const MM_ITERATEDSYS = 58;
export const MM_METHEUS = 59;
export const MM_LOGITECH = 60;
export const MM_WINNOV = 61;
export const MM_NCR = 62;
export const MM_EXAN = 63;
export const MM_AST = 64;
export const MM_WILLOWPOND = 65;
export const MM_SONICFOUNDRY = 66;
export const MM_VITEC = 67;
export const MM_MOSCOM = 68;
export const MM_SILICONSOFT = 69;
export const MM_TERRATEC = 70;
export const MM_MEDIASONIC = 71;
export const MM_SANYO = 72;
export const MM_SUPERMAC = 73;
export const MM_AUDIOPT = 74;
export const MM_NOGATECH = 75;
export const MM_SPEECHCOMP = 76;
export const MM_AHEAD = 77;
export const MM_DOLBY = 78;
export const MM_OKI = 79;
export const MM_AURAVISION = 80;
export const MM_OLIVETTI = 81;
export const MM_IOMAGIC = 82;
export const MM_MATSUSHITA = 83;
export const MM_CONTROLRES = 84;
export const MM_XEBEC = 85;
export const MM_NEWMEDIA = 86;
export const MM_NMS = 87;
export const MM_LYRRUS = 88;
export const MM_COMPUSIC = 89;
export const MM_OPTI = 90;
export const MM_ADLACC = 91;
export const MM_COMPAQ = 92;
export const MM_DIALOGIC = 93;
export const MM_INSOFT = 94;
export const MM_MPTUS = 95;
export const MM_WEITEK = 96;
export const MM_LERNOUT_AND_HAUSPIE = 97;
export const MM_QCIAR = 98;
export const MM_APPLE = 99;
export const MM_DIGITAL = 100;
export const MM_MOTU = 101;
export const MM_WORKBIT = 102;
export const MM_OSITECH = 103;
export const MM_MIRO = 104;
export const MM_CIRRUSLOGIC = 105;
export const MM_ISOLUTION = 106;
export const MM_HORIZONS = 107;
export const MM_CONCEPTS = 108;
export const MM_VTG = 109;
export const MM_RADIUS = 110;
export const MM_ROCKWELL = 111;
export const MM_XYZ = 112;
export const MM_OPCODE = 113;
export const MM_VOXWARE = 114;
export const MM_NORTHERN_TELECOM = 115;
export const MM_APICOM = 116;
export const MM_GRANDE = 117;
export const MM_ADDX = 118;
export const MM_WILDCAT = 119;
export const MM_RHETOREX = 120;
export const MM_BROOKTREE = 121;
export const MM_ENSONIQ = 125;
export const MM_FAST = 126;
export const MM_NVIDIA = 127;
export const MM_OKSORI = 128;
export const MM_DIACOUSTICS = 129;
export const MM_GULBRANSEN = 130;
export const MM_KAY_ELEMETRICS = 131;
export const MM_CRYSTAL = 132;
export const MM_SPLASH_STUDIOS = 133;
export const MM_QUARTERDECK = 134;
export const MM_TDK = 135;
export const MM_DIGITAL_AUDIO_LABS = 136;
export const MM_SEERSYS = 137;
export const MM_PICTURETEL = 138;
export const MM_ATT_MICROELECTRONICS = 139;
export const MM_OSPREY = 140;
export const MM_MEDIATRIX = 141;
export const MM_SOUNDESIGNS = 142;
export const MM_ALDIGITAL = 143;
export const MM_SPECTRUM_SIGNAL_PROCESSING = 144;
export const MM_ECS = 145;
export const MM_AMD = 146;
export const MM_COREDYNAMICS = 147;
export const MM_CANAM = 148;
export const MM_SOFTSOUND = 149;
export const MM_NORRIS = 150;
export const MM_DDD = 151;
export const MM_EUPHONICS = 152;
export const MM_PRECEPT = 153;
export const MM_CRYSTAL_NET = 154;
export const MM_CHROMATIC = 155;
export const MM_VOICEINFO = 156;
export const MM_VIENNASYS = 157;
export const MM_CONNECTIX = 158;
export const MM_GADGETLABS = 159;
export const MM_FRONTIER = 160;
export const MM_VIONA = 161;
export const MM_CASIO = 162;
export const MM_DIAMONDMM = 163;
export const MM_S3 = 164;
export const MM_DVISION = 165;
export const MM_NETSCAPE = 166;
export const MM_SOUNDSPACE = 167;
export const MM_VANKOEVERING = 168;
export const MM_QTEAM = 169;
export const MM_ZEFIRO = 170;
export const MM_STUDER = 171;
export const MM_FRAUNHOFER_IIS = 172;
export const MM_QUICKNET = 173;
export const MM_ALARIS = 174;
export const MM_SICRESOURCE = 175;
export const MM_NEOMAGIC = 176;
export const MM_MERGING_TECHNOLOGIES = 177;
export const MM_XIRLINK = 178;
export const MM_COLORGRAPH = 179;
export const MM_OTI = 180;
export const MM_AUREAL = 181;
export const MM_VIVO = 182;
export const MM_SHARP = 183;
export const MM_LUCENT = 184;
export const MM_ATT = 185;
export const MM_SUNCOM = 186;
export const MM_SORVIS = 187;
export const MM_INVISION = 188;
export const MM_BERKOM = 189;
export const MM_MARIAN = 190;
export const MM_DPSINC = 191;
export const MM_BCB = 192;
export const MM_MOTIONPIXELS = 193;
export const MM_QDESIGN = 194;
export const MM_NMP = 195;
export const MM_DATAFUSION = 196;
export const MM_DUCK = 197;
export const MM_FTR = 198;
export const MM_BERCOS = 199;
export const MM_ONLIVE = 200;
export const MM_SIEMENS_SBC = 201;
export const MM_TERALOGIC = 202;
export const MM_PHONET = 203;
export const MM_WINBOND = 204;
export const MM_VIRTUALMUSIC = 205;
export const MM_ENET = 206;
export const MM_GUILLEMOT = 207;
export const MM_EMAGIC = 208;
export const MM_MWM = 209;
export const MM_PACIFICRESEARCH = 210;
export const MM_SIPROLAB = 211;
export const MM_LYNX = 212;
export const MM_SPECTRUM_PRODUCTIONS = 213;
export const MM_DICTAPHONE = 214;
export const MM_QUALCOMM = 215;
export const MM_RZS = 216;
export const MM_AUDIOSCIENCE = 217;
export const MM_PINNACLE = 218;
export const MM_EES = 219;
export const MM_HAFTMANN = 220;
export const MM_LUCID = 221;
export const MM_HEADSPACE = 222;
export const MM_UNISYS = 223;
export const MM_LUMINOSITI = 224;
export const MM_ACTIVEVOICE = 225;
export const MM_DTS = 226;
export const MM_DIGIGRAM = 227;
export const MM_SOFTLAB_NSK = 228;
export const MM_FORTEMEDIA = 229;
export const MM_SONORUS = 230;
export const MM_ARRAY = 231;
export const MM_DATARAN = 232;
export const MM_I_LINK = 233;
export const MM_SELSIUS_SYSTEMS = 234;
export const MM_ADMOS = 235;
export const MM_LEXICON = 236;
export const MM_SGI = 237;
export const MM_IPI = 238;
export const MM_ICE = 239;
export const MM_VQST = 240;
export const MM_ETEK = 241;
export const MM_CS = 242;
export const MM_ALESIS = 243;
export const MM_INTERNET = 244;
export const MM_SONY = 245;
export const MM_HYPERACTIVE = 246;
export const MM_UHER_INFORMATIC = 247;
export const MM_SYDEC_NV = 248;
export const MM_FLEXION = 249;
export const MM_VIA = 250;
export const MM_MICRONAS = 251;
export const MM_ANALOGDEVICES = 252;
export const MM_HP = 253;
export const MM_MATROX_DIV = 254;
export const MM_QUICKAUDIO = 255;
export const MM_YOUCOM = 256;
export const MM_RICHMOND = 257;
export const MM_IODD = 258;
export const MM_ICCC = 259;
export const MM_3COM = 260;
export const MM_MALDEN = 261;
export const MM_3DFX = 262;
export const MM_MINDMAKER = 263;
export const MM_TELEKOL = 264;
export const MM_ST_MICROELECTRONICS = 265;
export const MM_ALGOVISION = 266;
export const MM_UNMAPPED = 65535;
export const MM_PID_UNMAPPED = 65535;
export const MM_PCSPEAKER_WAVEOUT = 13;
export const MM_MSFT_WSS_WAVEIN = 14;
export const MM_MSFT_WSS_WAVEOUT = 15;
export const MM_MSFT_WSS_FMSYNTH_STEREO = 16;
export const MM_MSFT_WSS_MIXER = 17;
export const MM_MSFT_WSS_OEM_WAVEIN = 18;
export const MM_MSFT_WSS_OEM_WAVEOUT = 19;
export const MM_MSFT_WSS_OEM_FMSYNTH_STEREO = 20;
export const MM_MSFT_WSS_AUX = 21;
export const MM_MSFT_WSS_OEM_AUX = 22;
export const MM_MSFT_GENERIC_WAVEIN = 23;
export const MM_MSFT_GENERIC_WAVEOUT = 24;
export const MM_MSFT_GENERIC_MIDIIN = 25;
export const MM_MSFT_GENERIC_MIDIOUT = 26;
export const MM_MSFT_GENERIC_MIDISYNTH = 27;
export const MM_MSFT_GENERIC_AUX_LINE = 28;
export const MM_MSFT_GENERIC_AUX_MIC = 29;
export const MM_MSFT_GENERIC_AUX_CD = 30;
export const MM_MSFT_WSS_OEM_MIXER = 31;
export const MM_MSFT_MSACM = 32;
export const MM_MSFT_ACM_MSADPCM = 33;
export const MM_MSFT_ACM_IMAADPCM = 34;
export const MM_MSFT_ACM_MSFILTER = 35;
export const MM_MSFT_ACM_GSM610 = 36;
export const MM_MSFT_ACM_G711 = 37;
export const MM_MSFT_ACM_PCM = 38;
export const MM_WSS_SB16_WAVEIN = 39;
export const MM_WSS_SB16_WAVEOUT = 40;
export const MM_WSS_SB16_MIDIIN = 41;
export const MM_WSS_SB16_MIDIOUT = 42;
export const MM_WSS_SB16_SYNTH = 43;
export const MM_WSS_SB16_AUX_LINE = 44;
export const MM_WSS_SB16_AUX_CD = 45;
export const MM_WSS_SB16_MIXER = 46;
export const MM_WSS_SBPRO_WAVEIN = 47;
export const MM_WSS_SBPRO_WAVEOUT = 48;
export const MM_WSS_SBPRO_MIDIIN = 49;
export const MM_WSS_SBPRO_MIDIOUT = 50;
export const MM_WSS_SBPRO_SYNTH = 51;
export const MM_WSS_SBPRO_AUX_LINE = 52;
export const MM_WSS_SBPRO_AUX_CD = 53;
export const MM_WSS_SBPRO_MIXER = 54;
export const MM_MSFT_WSS_NT_WAVEIN = 55;
export const MM_MSFT_WSS_NT_WAVEOUT = 56;
export const MM_MSFT_WSS_NT_FMSYNTH_STEREO = 57;
export const MM_MSFT_WSS_NT_MIXER = 58;
export const MM_MSFT_WSS_NT_AUX = 59;
export const MM_MSFT_SB16_WAVEIN = 60;
export const MM_MSFT_SB16_WAVEOUT = 61;
export const MM_MSFT_SB16_MIDIIN = 62;
export const MM_MSFT_SB16_MIDIOUT = 63;
export const MM_MSFT_SB16_SYNTH = 64;
export const MM_MSFT_SB16_AUX_LINE = 65;
export const MM_MSFT_SB16_AUX_CD = 66;
export const MM_MSFT_SB16_MIXER = 67;
export const MM_MSFT_SBPRO_WAVEIN = 68;
export const MM_MSFT_SBPRO_WAVEOUT = 69;
export const MM_MSFT_SBPRO_MIDIIN = 70;
export const MM_MSFT_SBPRO_MIDIOUT = 71;
export const MM_MSFT_SBPRO_SYNTH = 72;
export const MM_MSFT_SBPRO_AUX_LINE = 73;
export const MM_MSFT_SBPRO_AUX_CD = 74;
export const MM_MSFT_SBPRO_MIXER = 75;
export const MM_MSFT_MSOPL_SYNTH = 76;
export const MM_MSFT_VMDMS_LINE_WAVEIN = 80;
export const MM_MSFT_VMDMS_LINE_WAVEOUT = 81;
export const MM_MSFT_VMDMS_HANDSET_WAVEIN = 82;
export const MM_MSFT_VMDMS_HANDSET_WAVEOUT = 83;
export const MM_MSFT_VMDMW_LINE_WAVEIN = 84;
export const MM_MSFT_VMDMW_LINE_WAVEOUT = 85;
export const MM_MSFT_VMDMW_HANDSET_WAVEIN = 86;
export const MM_MSFT_VMDMW_HANDSET_WAVEOUT = 87;
export const MM_MSFT_VMDMW_MIXER = 88;
export const MM_MSFT_VMDM_GAME_WAVEOUT = 89;
export const MM_MSFT_VMDM_GAME_WAVEIN = 90;
export const MM_MSFT_ACM_MSNAUDIO = 91;
export const MM_MSFT_ACM_MSG723 = 92;
export const MM_MSFT_ACM_MSRT24 = 93;
export const MM_MSFT_WDMAUDIO_WAVEOUT = 100;
export const MM_MSFT_WDMAUDIO_WAVEIN = 101;
export const MM_MSFT_WDMAUDIO_MIDIOUT = 102;
export const MM_MSFT_WDMAUDIO_MIDIIN = 103;
export const MM_MSFT_WDMAUDIO_MIXER = 104;
export const MM_MSFT_WDMAUDIO_AUX = 105;
export const MM_CREATIVE_SB15_WAVEIN = 1;
export const MM_CREATIVE_SB20_WAVEIN = 2;
export const MM_CREATIVE_SBPRO_WAVEIN = 3;
export const MM_CREATIVE_SBP16_WAVEIN = 4;
export const MM_CREATIVE_PHNBLST_WAVEIN = 5;
export const MM_CREATIVE_SB15_WAVEOUT = 101;
export const MM_CREATIVE_SB20_WAVEOUT = 102;
export const MM_CREATIVE_SBPRO_WAVEOUT = 103;
export const MM_CREATIVE_SBP16_WAVEOUT = 104;
export const MM_CREATIVE_PHNBLST_WAVEOUT = 105;
export const MM_CREATIVE_MIDIOUT = 201;
export const MM_CREATIVE_MIDIIN = 202;
export const MM_CREATIVE_FMSYNTH_MONO = 301;
export const MM_CREATIVE_FMSYNTH_STEREO = 302;
export const MM_CREATIVE_MIDI_AWE32 = 303;
export const MM_CREATIVE_AUX_CD = 401;
export const MM_CREATIVE_AUX_LINE = 402;
export const MM_CREATIVE_AUX_MIC = 403;
export const MM_CREATIVE_AUX_MASTER = 404;
export const MM_CREATIVE_AUX_PCSPK = 405;
export const MM_CREATIVE_AUX_WAVE = 406;
export const MM_CREATIVE_AUX_MIDI = 407;
export const MM_CREATIVE_SBPRO_MIXER = 408;
export const MM_CREATIVE_SB16_MIXER = 409;
export const MM_MEDIAVISION_PROAUDIO = 16;
export const MM_PROAUD_MIDIOUT = 17;
export const MM_PROAUD_MIDIIN = 18;
export const MM_PROAUD_SYNTH = 19;
export const MM_PROAUD_WAVEOUT = 20;
export const MM_PROAUD_WAVEIN = 21;
export const MM_PROAUD_MIXER = 22;
export const MM_PROAUD_AUX = 23;
export const MM_MEDIAVISION_THUNDER = 32;
export const MM_THUNDER_SYNTH = 35;
export const MM_THUNDER_WAVEOUT = 36;
export const MM_THUNDER_WAVEIN = 37;
export const MM_THUNDER_AUX = 39;
export const MM_MEDIAVISION_TPORT = 64;
export const MM_TPORT_WAVEOUT = 65;
export const MM_TPORT_WAVEIN = 66;
export const MM_TPORT_SYNTH = 67;
export const MM_MEDIAVISION_PROAUDIO_PLUS = 80;
export const MM_PROAUD_PLUS_MIDIOUT = 81;
export const MM_PROAUD_PLUS_MIDIIN = 82;
export const MM_PROAUD_PLUS_SYNTH = 83;
export const MM_PROAUD_PLUS_WAVEOUT = 84;
export const MM_PROAUD_PLUS_WAVEIN = 85;
export const MM_PROAUD_PLUS_MIXER = 86;
export const MM_PROAUD_PLUS_AUX = 87;
export const MM_MEDIAVISION_PROAUDIO_16 = 96;
export const MM_PROAUD_16_MIDIOUT = 97;
export const MM_PROAUD_16_MIDIIN = 98;
export const MM_PROAUD_16_SYNTH = 99;
export const MM_PROAUD_16_WAVEOUT = 100;
export const MM_PROAUD_16_WAVEIN = 101;
export const MM_PROAUD_16_MIXER = 102;
export const MM_PROAUD_16_AUX = 103;
export const MM_MEDIAVISION_PROSTUDIO_16 = 96;
export const MM_STUDIO_16_MIDIOUT = 97;
export const MM_STUDIO_16_MIDIIN = 98;
export const MM_STUDIO_16_SYNTH = 99;
export const MM_STUDIO_16_WAVEOUT = 100;
export const MM_STUDIO_16_WAVEIN = 101;
export const MM_STUDIO_16_MIXER = 102;
export const MM_STUDIO_16_AUX = 103;
export const MM_MEDIAVISION_CDPC = 112;
export const MM_CDPC_MIDIOUT = 113;
export const MM_CDPC_MIDIIN = 114;
export const MM_CDPC_SYNTH = 115;
export const MM_CDPC_WAVEOUT = 116;
export const MM_CDPC_WAVEIN = 117;
export const MM_CDPC_MIXER = 118;
export const MM_CDPC_AUX = 119;
export const MM_MEDIAVISION_OPUS1208 = 128;
export const MM_OPUS401_MIDIOUT = 129;
export const MM_OPUS401_MIDIIN = 130;
export const MM_OPUS1208_SYNTH = 131;
export const MM_OPUS1208_WAVEOUT = 132;
export const MM_OPUS1208_WAVEIN = 133;
export const MM_OPUS1208_MIXER = 134;
export const MM_OPUS1208_AUX = 135;
export const MM_MEDIAVISION_OPUS1216 = 144;
export const MM_OPUS1216_MIDIOUT = 145;
export const MM_OPUS1216_MIDIIN = 146;
export const MM_OPUS1216_SYNTH = 147;
export const MM_OPUS1216_WAVEOUT = 148;
export const MM_OPUS1216_WAVEIN = 149;
export const MM_OPUS1216_MIXER = 150;
export const MM_OPUS1216_AUX = 151;
export const MM_CYRIX_XASYNTH = 1;
export const MM_CYRIX_XAMIDIIN = 2;
export const MM_CYRIX_XAMIDIOUT = 3;
export const MM_CYRIX_XAWAVEIN = 4;
export const MM_CYRIX_XAWAVEOUT = 5;
export const MM_CYRIX_XAAUX = 6;
export const MM_CYRIX_XAMIXER = 7;
export const MM_PHILIPS_ACM_LPCBB = 1;
export const MM_NETXL_XLVIDEO = 1;
export const MM_ZYXEL_ACM_ADPCM = 1;
export const MM_AARDVARK_STUDIO12_WAVEOUT = 1;
export const MM_AARDVARK_STUDIO12_WAVEIN = 2;
export const MM_AARDVARK_STUDIO88_WAVEOUT = 3;
export const MM_AARDVARK_STUDIO88_WAVEIN = 4;
export const MM_BINTEC_TAPI_WAVE = 1;
export const MM_HEWLETT_PACKARD_CU_CODEC = 1;
export const MM_MITEL_TALKTO_LINE_WAVEOUT = 100;
export const MM_MITEL_TALKTO_LINE_WAVEIN = 101;
export const MM_MITEL_TALKTO_HANDSET_WAVEOUT = 102;
export const MM_MITEL_TALKTO_HANDSET_WAVEIN = 103;
export const MM_MITEL_TALKTO_BRIDGED_WAVEOUT = 104;
export const MM_MITEL_TALKTO_BRIDGED_WAVEIN = 105;
export const MM_MITEL_MPA_HANDSET_WAVEOUT = 200;
export const MM_MITEL_MPA_HANDSET_WAVEIN = 201;
export const MM_MITEL_MPA_HANDSFREE_WAVEOUT = 202;
export const MM_MITEL_MPA_HANDSFREE_WAVEIN = 203;
export const MM_MITEL_MPA_LINE1_WAVEOUT = 204;
export const MM_MITEL_MPA_LINE1_WAVEIN = 205;
export const MM_MITEL_MPA_LINE2_WAVEOUT = 206;
export const MM_MITEL_MPA_LINE2_WAVEIN = 207;
export const MM_MITEL_MEDIAPATH_WAVEOUT = 300;
export const MM_MITEL_MEDIAPATH_WAVEIN = 301;
export const MM_SNI_ACM_G721 = 1;
export const MM_EMU_APSSYNTH = 1;
export const MM_EMU_APSMIDIIN = 2;
export const MM_EMU_APSMIDIOUT = 3;
export const MM_EMU_APSWAVEIN = 4;
export const MM_EMU_APSWAVEOUT = 5;
export const MM_ARTISOFT_SBWAVEIN = 1;
export const MM_ARTISOFT_SBWAVEOUT = 2;
export const MM_TBS_TROPEZ_WAVEIN = 37;
export const MM_TBS_TROPEZ_WAVEOUT = 38;
export const MM_TBS_TROPEZ_AUX1 = 39;
export const MM_TBS_TROPEZ_AUX2 = 40;
export const MM_TBS_TROPEZ_LINE = 41;
export const MM_MMOTION_WAVEAUX = 1;
export const MM_MMOTION_WAVEOUT = 2;
export const MM_MMOTION_WAVEIN = 3;
export const MM_IBM_PCMCIA_WAVEIN = 11;
export const MM_IBM_PCMCIA_WAVEOUT = 12;
export const MM_IBM_PCMCIA_SYNTH = 13;
export const MM_IBM_PCMCIA_MIDIIN = 14;
export const MM_IBM_PCMCIA_MIDIOUT = 15;
export const MM_IBM_PCMCIA_AUX = 16;
export const MM_IBM_THINKPAD200 = 17;
export const MM_IBM_MWAVE_WAVEIN = 18;
export const MM_IBM_MWAVE_WAVEOUT = 19;
export const MM_IBM_MWAVE_MIXER = 20;
export const MM_IBM_MWAVE_MIDIIN = 21;
export const MM_IBM_MWAVE_MIDIOUT = 22;
export const MM_IBM_MWAVE_AUX = 23;
export const MM_IBM_WC_MIDIOUT = 30;
export const MM_IBM_WC_WAVEOUT = 31;
export const MM_IBM_WC_MIXEROUT = 33;
export const MM_VOCALTEC_WAVEOUT = 1;
export const MM_VOCALTEC_WAVEIN = 2;
export const MM_ROLAND_RAP10_MIDIOUT = 10;
export const MM_ROLAND_RAP10_MIDIIN = 11;
export const MM_ROLAND_RAP10_SYNTH = 12;
export const MM_ROLAND_RAP10_WAVEOUT = 13;
export const MM_ROLAND_RAP10_WAVEIN = 14;
export const MM_ROLAND_MPU401_MIDIOUT = 15;
export const MM_ROLAND_MPU401_MIDIIN = 16;
export const MM_ROLAND_SMPU_MIDIOUTA = 17;
export const MM_ROLAND_SMPU_MIDIOUTB = 18;
export const MM_ROLAND_SMPU_MIDIINA = 19;
export const MM_ROLAND_SMPU_MIDIINB = 20;
export const MM_ROLAND_SC7_MIDIOUT = 21;
export const MM_ROLAND_SC7_MIDIIN = 22;
export const MM_ROLAND_SERIAL_MIDIOUT = 23;
export const MM_ROLAND_SERIAL_MIDIIN = 24;
export const MM_ROLAND_SCP_MIDIOUT = 38;
export const MM_ROLAND_SCP_MIDIIN = 39;
export const MM_ROLAND_SCP_WAVEOUT = 40;
export const MM_ROLAND_SCP_WAVEIN = 41;
export const MM_ROLAND_SCP_MIXER = 42;
export const MM_ROLAND_SCP_AUX = 48;
export const MM_DSP_SOLUTIONS_WAVEOUT = 1;
export const MM_DSP_SOLUTIONS_WAVEIN = 2;
export const MM_DSP_SOLUTIONS_SYNTH = 3;
export const MM_DSP_SOLUTIONS_AUX = 4;
export const MM_NEC_73_86_SYNTH = 5;
export const MM_NEC_73_86_WAVEOUT = 6;
export const MM_NEC_73_86_WAVEIN = 7;
export const MM_NEC_26_SYNTH = 9;
export const MM_NEC_MPU401_MIDIOUT = 10;
export const MM_NEC_MPU401_MIDIIN = 11;
export const MM_NEC_JOYSTICK = 12;
export const MM_WANGLABS_WAVEIN1 = 1;
export const MM_WANGLABS_WAVEOUT1 = 2;
export const MM_TANDY_VISWAVEIN = 1;
export const MM_TANDY_VISWAVEOUT = 2;
export const MM_TANDY_VISBIOSSYNTH = 3;
export const MM_TANDY_SENS_MMAWAVEIN = 4;
export const MM_TANDY_SENS_MMAWAVEOUT = 5;
export const MM_TANDY_SENS_MMAMIDIIN = 6;
export const MM_TANDY_SENS_MMAMIDIOUT = 7;
export const MM_TANDY_SENS_VISWAVEOUT = 8;
export const MM_TANDY_PSSJWAVEIN = 9;
export const MM_TANDY_PSSJWAVEOUT = 10;
export const MM_ANTEX_SX12_WAVEIN = 1;
export const MM_ANTEX_SX12_WAVEOUT = 2;
export const MM_ANTEX_SX15_WAVEIN = 3;
export const MM_ANTEX_SX15_WAVEOUT = 4;
export const MM_ANTEX_VP625_WAVEIN = 5;
export const MM_ANTEX_VP625_WAVEOUT = 6;
export const MM_ANTEX_AUDIOPORT22_WAVEIN = 7;
export const MM_ANTEX_AUDIOPORT22_WAVEOUT = 8;
export const MM_ANTEX_AUDIOPORT22_FEEDTHRU = 9;
export const MM_INTELOPD_WAVEIN = 1;
export const MM_INTELOPD_WAVEOUT = 101;
export const MM_INTELOPD_AUX = 401;
export const MM_INTEL_NSPMODEMLINEIN = 501;
export const MM_INTEL_NSPMODEMLINEOUT = 502;
export const MM_VAL_MICROKEY_AP_WAVEIN = 1;
export const MM_VAL_MICROKEY_AP_WAVEOUT = 2;
export const MM_INTERACTIVE_WAVEIN = 69;
export const MM_INTERACTIVE_WAVEOUT = 69;
export const MM_YAMAHA_GSS_SYNTH = 1;
export const MM_YAMAHA_GSS_WAVEOUT = 2;
export const MM_YAMAHA_GSS_WAVEIN = 3;
export const MM_YAMAHA_GSS_MIDIOUT = 4;
export const MM_YAMAHA_GSS_MIDIIN = 5;
export const MM_YAMAHA_GSS_AUX = 6;
export const MM_YAMAHA_SERIAL_MIDIOUT = 7;
export const MM_YAMAHA_SERIAL_MIDIIN = 8;
export const MM_YAMAHA_OPL3SA_WAVEOUT = 16;
export const MM_YAMAHA_OPL3SA_WAVEIN = 17;
export const MM_YAMAHA_OPL3SA_FMSYNTH = 18;
export const MM_YAMAHA_OPL3SA_YSYNTH = 19;
export const MM_YAMAHA_OPL3SA_MIDIOUT = 20;
export const MM_YAMAHA_OPL3SA_MIDIIN = 21;
export const MM_YAMAHA_OPL3SA_MIXER = 23;
export const MM_YAMAHA_OPL3SA_JOYSTICK = 24;
export const MM_YAMAHA_YMF724LEG_MIDIOUT = 25;
export const MM_YAMAHA_YMF724LEG_MIDIIN = 26;
export const MM_YAMAHA_YMF724_WAVEOUT = 27;
export const MM_YAMAHA_YMF724_WAVEIN = 28;
export const MM_YAMAHA_YMF724_MIDIOUT = 29;
export const MM_YAMAHA_YMF724_AUX = 30;
export const MM_YAMAHA_YMF724_MIXER = 31;
export const MM_YAMAHA_YMF724LEG_FMSYNTH = 32;
export const MM_YAMAHA_YMF724LEG_MIXER = 33;
export const MM_YAMAHA_SXG_MIDIOUT = 34;
export const MM_YAMAHA_SXG_WAVEOUT = 35;
export const MM_YAMAHA_SXG_MIXER = 36;
export const MM_YAMAHA_ACXG_WAVEIN = 37;
export const MM_YAMAHA_ACXG_WAVEOUT = 38;
export const MM_YAMAHA_ACXG_MIDIOUT = 39;
export const MM_YAMAHA_ACXG_MIXER = 40;
export const MM_YAMAHA_ACXG_AUX = 41;
export const MM_EVEREX_CARRIER = 1;
export const MM_ECHO_SYNTH = 1;
export const MM_ECHO_WAVEOUT = 2;
export const MM_ECHO_WAVEIN = 3;
export const MM_ECHO_MIDIOUT = 4;
export const MM_ECHO_MIDIIN = 5;
export const MM_ECHO_AUX = 6;
export const MM_SIERRA_ARIA_MIDIOUT = 20;
export const MM_SIERRA_ARIA_MIDIIN = 21;
export const MM_SIERRA_ARIA_SYNTH = 22;
export const MM_SIERRA_ARIA_WAVEOUT = 23;
export const MM_SIERRA_ARIA_WAVEIN = 24;
export const MM_SIERRA_ARIA_AUX = 25;
export const MM_SIERRA_ARIA_AUX2 = 32;
export const MM_SIERRA_QUARTET_WAVEIN = 80;
export const MM_SIERRA_QUARTET_WAVEOUT = 81;
export const MM_SIERRA_QUARTET_MIDIIN = 82;
export const MM_SIERRA_QUARTET_MIDIOUT = 83;
export const MM_SIERRA_QUARTET_SYNTH = 84;
export const MM_SIERRA_QUARTET_AUX_CD = 85;
export const MM_SIERRA_QUARTET_AUX_LINE = 86;
export const MM_SIERRA_QUARTET_AUX_MODEM = 87;
export const MM_SIERRA_QUARTET_MIXER = 88;
export const MM_CAT_WAVEOUT = 1;
export const MM_DSP_GROUP_TRUESPEECH = 1;
export const MM_MELABS_MIDI2GO = 1;
export const MM_ESS_AMWAVEOUT = 1;
export const MM_ESS_AMWAVEIN = 2;
export const MM_ESS_AMAUX = 3;
export const MM_ESS_AMSYNTH = 4;
export const MM_ESS_AMMIDIOUT = 5;
export const MM_ESS_AMMIDIIN = 6;
export const MM_ESS_MIXER = 7;
export const MM_ESS_AUX_CD = 8;
export const MM_ESS_MPU401_MIDIOUT = 9;
export const MM_ESS_MPU401_MIDIIN = 10;
export const MM_ESS_ES488_WAVEOUT = 16;
export const MM_ESS_ES488_WAVEIN = 17;
export const MM_ESS_ES488_MIXER = 18;
export const MM_ESS_ES688_WAVEOUT = 19;
export const MM_ESS_ES688_WAVEIN = 20;
export const MM_ESS_ES688_MIXER = 21;
export const MM_ESS_ES1488_WAVEOUT = 22;
export const MM_ESS_ES1488_WAVEIN = 23;
export const MM_ESS_ES1488_MIXER = 24;
export const MM_ESS_ES1688_WAVEOUT = 25;
export const MM_ESS_ES1688_WAVEIN = 26;
export const MM_ESS_ES1688_MIXER = 27;
export const MM_ESS_ES1788_WAVEOUT = 28;
export const MM_ESS_ES1788_WAVEIN = 29;
export const MM_ESS_ES1788_MIXER = 30;
export const MM_ESS_ES1888_WAVEOUT = 31;
export const MM_ESS_ES1888_WAVEIN = 32;
export const MM_ESS_ES1888_MIXER = 33;
export const MM_ESS_ES1868_WAVEOUT = 34;
export const MM_ESS_ES1868_WAVEIN = 35;
export const MM_ESS_ES1868_MIXER = 36;
export const MM_ESS_ES1878_WAVEOUT = 37;
export const MM_ESS_ES1878_WAVEIN = 38;
export const MM_ESS_ES1878_MIXER = 39;
export const MM_CANOPUS_ACM_DVREX = 1;
export const MM_EPS_FMSND = 1;
export const MM_TRUEVISION_WAVEIN1 = 1;
export const MM_TRUEVISION_WAVEOUT1 = 2;
export const MM_AZTECH_MIDIOUT = 3;
export const MM_AZTECH_MIDIIN = 4;
export const MM_AZTECH_WAVEIN = 17;
export const MM_AZTECH_WAVEOUT = 18;
export const MM_AZTECH_FMSYNTH = 20;
export const MM_AZTECH_MIXER = 21;
export const MM_AZTECH_PRO16_WAVEIN = 33;
export const MM_AZTECH_PRO16_WAVEOUT = 34;
export const MM_AZTECH_PRO16_FMSYNTH = 38;
export const MM_AZTECH_DSP16_WAVEIN = 65;
export const MM_AZTECH_DSP16_WAVEOUT = 66;
export const MM_AZTECH_DSP16_FMSYNTH = 68;
export const MM_AZTECH_DSP16_WAVESYNTH = 70;
export const MM_AZTECH_NOVA16_WAVEIN = 71;
export const MM_AZTECH_NOVA16_WAVEOUT = 72;
export const MM_AZTECH_NOVA16_MIXER = 73;
export const MM_AZTECH_WASH16_WAVEIN = 74;
export const MM_AZTECH_WASH16_WAVEOUT = 75;
export const MM_AZTECH_WASH16_MIXER = 76;
export const MM_AZTECH_AUX_CD = 401;
export const MM_AZTECH_AUX_LINE = 402;
export const MM_AZTECH_AUX_MIC = 403;
export const MM_AZTECH_AUX = 404;
export const MM_VIDEOLOGIC_MSWAVEIN = 1;
export const MM_VIDEOLOGIC_MSWAVEOUT = 2;
export const MM_KORG_PCIF_MIDIOUT = 1;
export const MM_KORG_PCIF_MIDIIN = 2;
export const MM_KORG_1212IO_MSWAVEIN = 3;
export const MM_KORG_1212IO_MSWAVEOUT = 4;
export const MM_APT_ACE100CD = 1;
export const MM_ICS_WAVEDECK_WAVEOUT = 1;
export const MM_ICS_WAVEDECK_WAVEIN = 2;
export const MM_ICS_WAVEDECK_MIXER = 3;
export const MM_ICS_WAVEDECK_AUX = 4;
export const MM_ICS_WAVEDECK_SYNTH = 5;
export const MM_ICS_WAVEDEC_SB_WAVEOUT = 6;
export const MM_ICS_WAVEDEC_SB_WAVEIN = 7;
export const MM_ICS_WAVEDEC_SB_FM_MIDIOUT = 8;
export const MM_ICS_WAVEDEC_SB_MPU401_MIDIOUT = 9;
export const MM_ICS_WAVEDEC_SB_MPU401_MIDIIN = 10;
export const MM_ICS_WAVEDEC_SB_MIXER = 11;
export const MM_ICS_WAVEDEC_SB_AUX = 12;
export const MM_ICS_2115_LITE_MIDIOUT = 13;
export const MM_ICS_2120_LITE_MIDIOUT = 14;
export const MM_ITERATEDSYS_FUFCODEC = 1;
export const MM_METHEUS_ZIPPER = 1;
export const MM_WINNOV_CAVIAR_WAVEIN = 1;
export const MM_WINNOV_CAVIAR_WAVEOUT = 2;
export const MM_WINNOV_CAVIAR_VIDC = 3;
export const MM_WINNOV_CAVIAR_CHAMPAGNE = 4;
export const MM_WINNOV_CAVIAR_YUV8 = 5;
export const MM_NCR_BA_WAVEIN = 1;
export const MM_NCR_BA_WAVEOUT = 2;
export const MM_NCR_BA_SYNTH = 3;
export const MM_NCR_BA_AUX = 4;
export const MM_NCR_BA_MIXER = 5;
export const MM_AST_MODEMWAVE_WAVEIN = 13;
export const MM_AST_MODEMWAVE_WAVEOUT = 14;
export const MM_WILLOWPOND_FMSYNTH_STEREO = 20;
export const MM_WILLOWPOND_MPU401 = 21;
export const MM_WILLOWPOND_SNDPORT_WAVEIN = 100;
export const MM_WILLOWPOND_SNDPORT_WAVEOUT = 101;
export const MM_WILLOWPOND_SNDPORT_MIXER = 102;
export const MM_WILLOWPOND_SNDPORT_AUX = 103;
export const MM_WILLOWPOND_PH_WAVEIN = 104;
export const MM_WILLOWPOND_PH_WAVEOUT = 105;
export const MM_WILLOWPOND_PH_MIXER = 106;
export const MM_WILLOWPOND_PH_AUX = 107;
export const MM_WILLOPOND_SNDCOMM_WAVEIN = 108;
export const MM_WILLOWPOND_SNDCOMM_WAVEOUT = 109;
export const MM_WILLOWPOND_SNDCOMM_MIXER = 110;
export const MM_WILLOWPOND_SNDCOMM_AUX = 111;
export const MM_WILLOWPOND_GENERIC_WAVEIN = 112;
export const MM_WILLOWPOND_GENERIC_WAVEOUT = 113;
export const MM_WILLOWPOND_GENERIC_MIXER = 114;
export const MM_WILLOWPOND_GENERIC_AUX = 115;
export const MM_VITEC_VMAKER = 1;
export const MM_VITEC_VMPRO = 2;
export const MM_MOSCOM_VPC2400_IN = 1;
export const MM_MOSCOM_VPC2400_OUT = 2;
export const MM_SILICONSOFT_SC1_WAVEIN = 1;
export const MM_SILICONSOFT_SC1_WAVEOUT = 2;
export const MM_SILICONSOFT_SC2_WAVEIN = 3;
export const MM_SILICONSOFT_SC2_WAVEOUT = 4;
export const MM_SILICONSOFT_SOUNDJR2_WAVEOUT = 5;
export const MM_SILICONSOFT_SOUNDJR2PR_WAVEIN = 6;
export const MM_SILICONSOFT_SOUNDJR2PR_WAVEOUT = 7;
export const MM_SILICONSOFT_SOUNDJR3_WAVEOUT = 8;
export const MM_TTEWS_WAVEIN = 1;
export const MM_TTEWS_WAVEOUT = 2;
export const MM_TTEWS_MIDIIN = 3;
export const MM_TTEWS_MIDIOUT = 4;
export const MM_TTEWS_MIDISYNTH = 5;
export const MM_TTEWS_MIDIMONITOR = 6;
export const MM_TTEWS_VMIDIIN = 7;
export const MM_TTEWS_VMIDIOUT = 8;
export const MM_TTEWS_AUX = 9;
export const MM_TTEWS_MIXER = 10;
export const MM_MEDIASONIC_ACM_G723 = 1;
export const MM_MEDIASONIC_ICOM = 2;
export const MM_ICOM_WAVEIN = 3;
export const MM_ICOM_WAVEOUT = 4;
export const MM_ICOM_MIXER = 5;
export const MM_ICOM_AUX = 6;
export const MM_ICOM_LINE = 7;
export const MM_SANYO_ACM_LD_ADPCM = 1;
export const MM_AHEAD_MULTISOUND = 1;
export const MM_AHEAD_SOUNDBLASTER = 2;
export const MM_AHEAD_PROAUDIO = 3;
export const MM_AHEAD_GENERIC = 4;
export const MM_OLIVETTI_WAVEIN = 1;
export const MM_OLIVETTI_WAVEOUT = 2;
export const MM_OLIVETTI_MIXER = 3;
export const MM_OLIVETTI_AUX = 4;
export const MM_OLIVETTI_MIDIIN = 5;
export const MM_OLIVETTI_MIDIOUT = 6;
export const MM_OLIVETTI_SYNTH = 7;
export const MM_OLIVETTI_JOYSTICK = 8;
export const MM_OLIVETTI_ACM_GSM = 9;
export const MM_OLIVETTI_ACM_ADPCM = 10;
export const MM_OLIVETTI_ACM_CELP = 11;
export const MM_OLIVETTI_ACM_SBC = 12;
export const MM_OLIVETTI_ACM_OPR = 13;
export const MM_IOMAGIC_TEMPO_WAVEOUT = 1;
export const MM_IOMAGIC_TEMPO_WAVEIN = 2;
export const MM_IOMAGIC_TEMPO_SYNTH = 3;
export const MM_IOMAGIC_TEMPO_MIDIOUT = 4;
export const MM_IOMAGIC_TEMPO_MXDOUT = 5;
export const MM_IOMAGIC_TEMPO_AUXOUT = 6;
export const MM_MATSUSHITA_WAVEIN = 1;
export const MM_MATSUSHITA_WAVEOUT = 2;
export const MM_MATSUSHITA_FMSYNTH_STEREO = 3;
export const MM_MATSUSHITA_MIXER = 4;
export const MM_MATSUSHITA_AUX = 5;
export const MM_NEWMEDIA_WAVJAMMER = 1;
export const MM_LYRRUS_BRIDGE_GUITAR = 1;
export const MM_OPTI_M16_FMSYNTH_STEREO = 1;
export const MM_OPTI_M16_MIDIIN = 2;
export const MM_OPTI_M16_MIDIOUT = 3;
export const MM_OPTI_M16_WAVEIN = 4;
export const MM_OPTI_M16_WAVEOUT = 5;
export const MM_OPTI_M16_MIXER = 6;
export const MM_OPTI_M16_AUX = 7;
export const MM_OPTI_P16_FMSYNTH_STEREO = 16;
export const MM_OPTI_P16_MIDIIN = 17;
export const MM_OPTI_P16_MIDIOUT = 18;
export const MM_OPTI_P16_WAVEIN = 19;
export const MM_OPTI_P16_WAVEOUT = 20;
export const MM_OPTI_P16_MIXER = 21;
export const MM_OPTI_P16_AUX = 22;
export const MM_OPTI_M32_WAVEIN = 32;
export const MM_OPTI_M32_WAVEOUT = 33;
export const MM_OPTI_M32_MIDIIN = 34;
export const MM_OPTI_M32_MIDIOUT = 35;
export const MM_OPTI_M32_SYNTH_STEREO = 36;
export const MM_OPTI_M32_MIXER = 37;
export const MM_OPTI_M32_AUX = 38;
export const MM_COMPAQ_BB_WAVEIN = 1;
export const MM_COMPAQ_BB_WAVEOUT = 2;
export const MM_COMPAQ_BB_WAVEAUX = 3;
export const MM_MPTUS_SPWAVEOUT = 1;
export const MM_LERNOUT_ANDHAUSPIE_LHCODECACM = 1;
export const MM_DIGITAL_AV320_WAVEIN = 1;
export const MM_DIGITAL_AV320_WAVEOUT = 2;
export const MM_DIGITAL_ACM_G723 = 3;
export const MM_DIGITAL_ICM_H263 = 4;
export const MM_DIGITAL_ICM_H261 = 5;
export const MM_MOTU_MTP_MIDIOUT_ALL = 100;
export const MM_MOTU_MTP_MIDIIN_1 = 101;
export const MM_MOTU_MTP_MIDIOUT_1 = 101;
export const MM_MOTU_MTP_MIDIIN_2 = 102;
export const MM_MOTU_MTP_MIDIOUT_2 = 102;
export const MM_MOTU_MTP_MIDIIN_3 = 103;
export const MM_MOTU_MTP_MIDIOUT_3 = 103;
export const MM_MOTU_MTP_MIDIIN_4 = 104;
export const MM_MOTU_MTP_MIDIOUT_4 = 104;
export const MM_MOTU_MTP_MIDIIN_5 = 105;
export const MM_MOTU_MTP_MIDIOUT_5 = 105;
export const MM_MOTU_MTP_MIDIIN_6 = 106;
export const MM_MOTU_MTP_MIDIOUT_6 = 106;
export const MM_MOTU_MTP_MIDIIN_7 = 107;
export const MM_MOTU_MTP_MIDIOUT_7 = 107;
export const MM_MOTU_MTP_MIDIIN_8 = 108;
export const MM_MOTU_MTP_MIDIOUT_8 = 108;
export const MM_MOTU_MTPII_MIDIOUT_ALL = 200;
export const MM_MOTU_MTPII_MIDIIN_SYNC = 200;
export const MM_MOTU_MTPII_MIDIIN_1 = 201;
export const MM_MOTU_MTPII_MIDIOUT_1 = 201;
export const MM_MOTU_MTPII_MIDIIN_2 = 202;
export const MM_MOTU_MTPII_MIDIOUT_2 = 202;
export const MM_MOTU_MTPII_MIDIIN_3 = 203;
export const MM_MOTU_MTPII_MIDIOUT_3 = 203;
export const MM_MOTU_MTPII_MIDIIN_4 = 204;
export const MM_MOTU_MTPII_MIDIOUT_4 = 204;
export const MM_MOTU_MTPII_MIDIIN_5 = 205;
export const MM_MOTU_MTPII_MIDIOUT_5 = 205;
export const MM_MOTU_MTPII_MIDIIN_6 = 206;
export const MM_MOTU_MTPII_MIDIOUT_6 = 206;
export const MM_MOTU_MTPII_MIDIIN_7 = 207;
export const MM_MOTU_MTPII_MIDIOUT_7 = 207;
export const MM_MOTU_MTPII_MIDIIN_8 = 208;
export const MM_MOTU_MTPII_MIDIOUT_8 = 208;
export const MM_MOTU_MTPII_NET_MIDIIN_1 = 209;
export const MM_MOTU_MTPII_NET_MIDIOUT_1 = 209;
export const MM_MOTU_MTPII_NET_MIDIIN_2 = 210;
export const MM_MOTU_MTPII_NET_MIDIOUT_2 = 210;
export const MM_MOTU_MTPII_NET_MIDIIN_3 = 211;
export const MM_MOTU_MTPII_NET_MIDIOUT_3 = 211;
export const MM_MOTU_MTPII_NET_MIDIIN_4 = 212;
export const MM_MOTU_MTPII_NET_MIDIOUT_4 = 212;
export const MM_MOTU_MTPII_NET_MIDIIN_5 = 213;
export const MM_MOTU_MTPII_NET_MIDIOUT_5 = 213;
export const MM_MOTU_MTPII_NET_MIDIIN_6 = 214;
export const MM_MOTU_MTPII_NET_MIDIOUT_6 = 214;
export const MM_MOTU_MTPII_NET_MIDIIN_7 = 215;
export const MM_MOTU_MTPII_NET_MIDIOUT_7 = 215;
export const MM_MOTU_MTPII_NET_MIDIIN_8 = 216;
export const MM_MOTU_MTPII_NET_MIDIOUT_8 = 216;
export const MM_MOTU_MXP_MIDIIN_MIDIOUT_ALL = 300;
export const MM_MOTU_MXP_MIDIIN_SYNC = 300;
export const MM_MOTU_MXP_MIDIIN_MIDIIN_1 = 301;
export const MM_MOTU_MXP_MIDIIN_MIDIOUT_1 = 301;
export const MM_MOTU_MXP_MIDIIN_MIDIIN_2 = 302;
export const MM_MOTU_MXP_MIDIIN_MIDIOUT_2 = 302;
export const MM_MOTU_MXP_MIDIIN_MIDIIN_3 = 303;
export const MM_MOTU_MXP_MIDIIN_MIDIOUT_3 = 303;
export const MM_MOTU_MXP_MIDIIN_MIDIIN_4 = 304;
export const MM_MOTU_MXP_MIDIIN_MIDIOUT_4 = 304;
export const MM_MOTU_MXP_MIDIIN_MIDIIN_5 = 305;
export const MM_MOTU_MXP_MIDIIN_MIDIOUT_5 = 305;
export const MM_MOTU_MXP_MIDIIN_MIDIIN_6 = 306;
export const MM_MOTU_MXP_MIDIIN_MIDIOUT_6 = 306;
export const MM_MOTU_MXPMPU_MIDIOUT_ALL = 400;
export const MM_MOTU_MXPMPU_MIDIIN_SYNC = 400;
export const MM_MOTU_MXPMPU_MIDIIN_1 = 401;
export const MM_MOTU_MXPMPU_MIDIOUT_1 = 401;
export const MM_MOTU_MXPMPU_MIDIIN_2 = 402;
export const MM_MOTU_MXPMPU_MIDIOUT_2 = 402;
export const MM_MOTU_MXPMPU_MIDIIN_3 = 403;
export const MM_MOTU_MXPMPU_MIDIOUT_3 = 403;
export const MM_MOTU_MXPMPU_MIDIIN_4 = 404;
export const MM_MOTU_MXPMPU_MIDIOUT_4 = 404;
export const MM_MOTU_MXPMPU_MIDIIN_5 = 405;
export const MM_MOTU_MXPMPU_MIDIOUT_5 = 405;
export const MM_MOTU_MXPMPU_MIDIIN_6 = 406;
export const MM_MOTU_MXPMPU_MIDIOUT_6 = 406;
export const MM_MOTU_MXN_MIDIOUT_ALL = 500;
export const MM_MOTU_MXN_MIDIIN_SYNC = 500;
export const MM_MOTU_MXN_MIDIIN_1 = 501;
export const MM_MOTU_MXN_MIDIOUT_1 = 501;
export const MM_MOTU_MXN_MIDIIN_2 = 502;
export const MM_MOTU_MXN_MIDIOUT_2 = 502;
export const MM_MOTU_MXN_MIDIIN_3 = 503;
export const MM_MOTU_MXN_MIDIOUT_3 = 503;
export const MM_MOTU_MXN_MIDIIN_4 = 504;
export const MM_MOTU_MXN_MIDIOUT_4 = 504;
export const MM_MOTU_FLYER_MIDI_IN_SYNC = 600;
export const MM_MOTU_FLYER_MIDI_IN_A = 601;
export const MM_MOTU_FLYER_MIDI_OUT_A = 601;
export const MM_MOTU_FLYER_MIDI_IN_B = 602;
export const MM_MOTU_FLYER_MIDI_OUT_B = 602;
export const MM_MOTU_PKX_MIDI_IN_SYNC = 700;
export const MM_MOTU_PKX_MIDI_IN_A = 701;
export const MM_MOTU_PKX_MIDI_OUT_A = 701;
export const MM_MOTU_PKX_MIDI_IN_B = 702;
export const MM_MOTU_PKX_MIDI_OUT_B = 702;
export const MM_MOTU_DTX_MIDI_IN_SYNC = 800;
export const MM_MOTU_DTX_MIDI_IN_A = 801;
export const MM_MOTU_DTX_MIDI_OUT_A = 801;
export const MM_MOTU_DTX_MIDI_IN_B = 802;
export const MM_MOTU_DTX_MIDI_OUT_B = 802;
export const MM_MOTU_MTPAV_MIDIOUT_ALL = 900;
export const MM_MOTU_MTPAV_MIDIIN_SYNC = 900;
export const MM_MOTU_MTPAV_MIDIIN_1 = 901;
export const MM_MOTU_MTPAV_MIDIOUT_1 = 901;
export const MM_MOTU_MTPAV_MIDIIN_2 = 902;
export const MM_MOTU_MTPAV_MIDIOUT_2 = 902;
export const MM_MOTU_MTPAV_MIDIIN_3 = 903;
export const MM_MOTU_MTPAV_MIDIOUT_3 = 903;
export const MM_MOTU_MTPAV_MIDIIN_4 = 904;
export const MM_MOTU_MTPAV_MIDIOUT_4 = 904;
export const MM_MOTU_MTPAV_MIDIIN_5 = 905;
export const MM_MOTU_MTPAV_MIDIOUT_5 = 905;
export const MM_MOTU_MTPAV_MIDIIN_6 = 906;
export const MM_MOTU_MTPAV_MIDIOUT_6 = 906;
export const MM_MOTU_MTPAV_MIDIIN_7 = 907;
export const MM_MOTU_MTPAV_MIDIOUT_7 = 907;
export const MM_MOTU_MTPAV_MIDIIN_8 = 908;
export const MM_MOTU_MTPAV_MIDIOUT_8 = 908;
export const MM_MOTU_MTPAV_NET_MIDIIN_1 = 909;
export const MM_MOTU_MTPAV_NET_MIDIOUT_1 = 909;
export const MM_MOTU_MTPAV_NET_MIDIIN_2 = 910;
export const MM_MOTU_MTPAV_NET_MIDIOUT_2 = 910;
export const MM_MOTU_MTPAV_NET_MIDIIN_3 = 911;
export const MM_MOTU_MTPAV_NET_MIDIOUT_3 = 911;
export const MM_MOTU_MTPAV_NET_MIDIIN_4 = 912;
export const MM_MOTU_MTPAV_NET_MIDIOUT_4 = 912;
export const MM_MOTU_MTPAV_NET_MIDIIN_5 = 913;
export const MM_MOTU_MTPAV_NET_MIDIOUT_5 = 913;
export const MM_MOTU_MTPAV_NET_MIDIIN_6 = 914;
export const MM_MOTU_MTPAV_NET_MIDIOUT_6 = 914;
export const MM_MOTU_MTPAV_NET_MIDIIN_7 = 915;
export const MM_MOTU_MTPAV_NET_MIDIOUT_7 = 915;
export const MM_MOTU_MTPAV_NET_MIDIIN_8 = 916;
export const MM_MOTU_MTPAV_NET_MIDIOUT_8 = 916;
export const MM_MOTU_MTPAV_MIDIIN_ADAT = 917;
export const MM_MOTU_MTPAV_MIDIOUT_ADAT = 917;
export const MM_MOTU_MXPXT_MIDIIN_SYNC = 1000;
export const MM_MOTU_MXPXT_MIDIOUT_ALL = 1000;
export const MM_MOTU_MXPXT_MIDIIN_1 = 1001;
export const MM_MOTU_MXPXT_MIDIOUT_1 = 1001;
export const MM_MOTU_MXPXT_MIDIOUT_2 = 1002;
export const MM_MOTU_MXPXT_MIDIIN_2 = 1002;
export const MM_MOTU_MXPXT_MIDIIN_3 = 1003;
export const MM_MOTU_MXPXT_MIDIOUT_3 = 1003;
export const MM_MOTU_MXPXT_MIDIIN_4 = 1004;
export const MM_MOTU_MXPXT_MIDIOUT_4 = 1004;
export const MM_MOTU_MXPXT_MIDIIN_5 = 1005;
export const MM_MOTU_MXPXT_MIDIOUT_5 = 1005;
export const MM_MOTU_MXPXT_MIDIOUT_6 = 1006;
export const MM_MOTU_MXPXT_MIDIIN_6 = 1006;
export const MM_MOTU_MXPXT_MIDIOUT_7 = 1007;
export const MM_MOTU_MXPXT_MIDIIN_7 = 1007;
export const MM_MOTU_MXPXT_MIDIOUT_8 = 1008;
export const MM_MOTU_MXPXT_MIDIIN_8 = 1008;
export const MM_WORKBIT_MIXER = 1;
export const MM_WORKBIT_WAVEOUT = 2;
export const MM_WORKBIT_WAVEIN = 3;
export const MM_WORKBIT_MIDIIN = 4;
export const MM_WORKBIT_MIDIOUT = 5;
export const MM_WORKBIT_FMSYNTH = 6;
export const MM_WORKBIT_AUX = 7;
export const MM_WORKBIT_JOYSTICK = 8;
export const MM_OSITECH_TRUMPCARD = 1;
export const MM_MIRO_MOVIEPRO = 1;
export const MM_MIRO_VIDEOD1 = 2;
export const MM_MIRO_VIDEODC1TV = 3;
export const MM_MIRO_VIDEOTD = 4;
export const MM_MIRO_DC30_WAVEOUT = 5;
export const MM_MIRO_DC30_WAVEIN = 6;
export const MM_MIRO_DC30_MIX = 7;
export const MM_ISOLUTION_PASCAL = 1;
export const MM_VOICEMIXER = 1;
export const ROCKWELL_WA1_WAVEIN = 100;
export const ROCKWELL_WA1_WAVEOUT = 101;
export const ROCKWELL_WA1_SYNTH = 102;
export const ROCKWELL_WA1_MIXER = 103;
export const ROCKWELL_WA1_MPU401_IN = 104;
export const ROCKWELL_WA1_MPU401_OUT = 105;
export const ROCKWELL_WA2_WAVEIN = 200;
export const ROCKWELL_WA2_WAVEOUT = 201;
export const ROCKWELL_WA2_SYNTH = 202;
export const ROCKWELL_WA2_MIXER = 203;
export const ROCKWELL_WA2_MPU401_IN = 204;
export const ROCKWELL_WA2_MPU401_OUT = 205;
export const MM_VOXWARE_CODEC = 1;
export const MM_NORTEL_MPXAC_WAVEIN = 1;
export const MM_NORTEL_MPXAC_WAVEOUT = 2;
export const MM_ADDX_PCTV_DIGITALMIX = 1;
export const MM_ADDX_PCTV_WAVEIN = 2;
export const MM_ADDX_PCTV_WAVEOUT = 3;
export const MM_ADDX_PCTV_MIXER = 4;
export const MM_ADDX_PCTV_AUX_CD = 5;
export const MM_ADDX_PCTV_AUX_LINE = 6;
export const MM_WILDCAT_AUTOSCOREMIDIIN = 1;
export const MM_RHETOREX_WAVEIN = 1;
export const MM_RHETOREX_WAVEOUT = 2;
export const MM_BTV_WAVEIN = 1;
export const MM_BTV_WAVEOUT = 2;
export const MM_BTV_MIDIIN = 3;
export const MM_BTV_MIDIOUT = 4;
export const MM_BTV_MIDISYNTH = 5;
export const MM_BTV_AUX_LINE = 6;
export const MM_BTV_AUX_MIC = 7;
export const MM_BTV_AUX_CD = 8;
export const MM_BTV_DIGITALIN = 9;
export const MM_BTV_DIGITALOUT = 10;
export const MM_BTV_MIDIWAVESTREAM = 11;
export const MM_BTV_MIXER = 12;
export const MM_ENSONIQ_SOUNDSCAPE = 16;
export const MM_SOUNDSCAPE_WAVEOUT = 17;
export const MM_SOUNDSCAPE_WAVEOUT_AUX = 18;
export const MM_SOUNDSCAPE_WAVEIN = 19;
export const MM_SOUNDSCAPE_MIDIOUT = 20;
export const MM_SOUNDSCAPE_MIDIIN = 21;
export const MM_SOUNDSCAPE_SYNTH = 22;
export const MM_SOUNDSCAPE_MIXER = 23;
export const MM_SOUNDSCAPE_AUX = 24;
export const MM_NVIDIA_WAVEOUT = 1;
export const MM_NVIDIA_WAVEIN = 2;
export const MM_NVIDIA_MIDIOUT = 3;
export const MM_NVIDIA_MIDIIN = 4;
export const MM_NVIDIA_GAMEPORT = 5;
export const MM_NVIDIA_MIXER = 6;
export const MM_NVIDIA_AUX = 7;
export const MM_OKSORI_BASE = 0;
export const MM_OKSORI_OSR8_WAVEOUT = 1;
export const MM_OKSORI_OSR8_WAVEIN = 2;
export const MM_OKSORI_OSR16_WAVEOUT = 3;
export const MM_OKSORI_OSR16_WAVEIN = 4;
export const MM_OKSORI_FM_OPL4 = 5;
export const MM_OKSORI_MIX_MASTER = 6;
export const MM_OKSORI_MIX_WAVE = 7;
export const MM_OKSORI_MIX_FM = 8;
export const MM_OKSORI_MIX_LINE = 9;
export const MM_OKSORI_MIX_CD = 10;
export const MM_OKSORI_MIX_MIC = 11;
export const MM_OKSORI_MIX_ECHO = 12;
export const MM_OKSORI_MIX_AUX1 = 13;
export const MM_OKSORI_MIX_LINE1 = 14;
export const MM_OKSORI_EXT_MIC1 = 15;
export const MM_OKSORI_EXT_MIC2 = 16;
export const MM_OKSORI_MIDIOUT = 17;
export const MM_OKSORI_MIDIIN = 18;
export const MM_OKSORI_MPEG_CDVISION = 19;
export const MM_DIACOUSTICS_DRUM_ACTION = 1;
export const MM_KAY_ELEMETRICS_CSL = 17152;
export const MM_KAY_ELEMETRICS_CSL_DAT = 17160;
export const MM_KAY_ELEMETRICS_CSL_4CHANNEL = 17161;
export const MM_CRYSTAL_CS4232_WAVEIN = 1;
export const MM_CRYSTAL_CS4232_WAVEOUT = 2;
export const MM_CRYSTAL_CS4232_WAVEMIXER = 3;
export const MM_CRYSTAL_CS4232_WAVEAUX_AUX1 = 4;
export const MM_CRYSTAL_CS4232_WAVEAUX_AUX2 = 5;
export const MM_CRYSTAL_CS4232_WAVEAUX_LINE = 6;
export const MM_CRYSTAL_CS4232_WAVEAUX_MONO = 7;
export const MM_CRYSTAL_CS4232_WAVEAUX_MASTER = 8;
export const MM_CRYSTAL_CS4232_MIDIIN = 9;
export const MM_CRYSTAL_CS4232_MIDIOUT = 10;
export const MM_CRYSTAL_CS4232_INPUTGAIN_AUX1 = 13;
export const MM_CRYSTAL_CS4232_INPUTGAIN_LOOP = 14;
export const MM_CRYSTAL_SOUND_FUSION_WAVEIN = 21;
export const MM_CRYSTAL_SOUND_FUSION_WAVEOUT = 22;
export const MM_CRYSTAL_SOUND_FUSION_MIXER = 23;
export const MM_CRYSTAL_SOUND_FUSION_MIDIIN = 24;
export const MM_CRYSTAL_SOUND_FUSION_MIDIOUT = 25;
export const MM_CRYSTAL_SOUND_FUSION_JOYSTICK = 26;
export const MM_QUARTERDECK_LHWAVEIN = 0;
export const MM_QUARTERDECK_LHWAVEOUT = 1;
export const MM_TDK_MW_MIDI_SYNTH = 1;
export const MM_TDK_MW_MIDI_IN = 2;
export const MM_TDK_MW_MIDI_OUT = 3;
export const MM_TDK_MW_WAVE_IN = 4;
export const MM_TDK_MW_WAVE_OUT = 5;
export const MM_TDK_MW_AUX = 6;
export const MM_TDK_MW_MIXER = 10;
export const MM_TDK_MW_AUX_MASTER = 100;
export const MM_TDK_MW_AUX_BASS = 101;
export const MM_TDK_MW_AUX_TREBLE = 102;
export const MM_TDK_MW_AUX_MIDI_VOL = 103;
export const MM_TDK_MW_AUX_WAVE_VOL = 104;
export const MM_TDK_MW_AUX_WAVE_RVB = 105;
export const MM_TDK_MW_AUX_WAVE_CHR = 106;
export const MM_TDK_MW_AUX_VOL = 107;
export const MM_TDK_MW_AUX_RVB = 108;
export const MM_TDK_MW_AUX_CHR = 109;
export const MM_DIGITAL_AUDIO_LABS_TC = 1;
export const MM_DIGITAL_AUDIO_LABS_DOC = 2;
export const MM_DIGITAL_AUDIO_LABS_V8 = 16;
export const MM_DIGITAL_AUDIO_LABS_CPRO = 17;
export const MM_DIGITAL_AUDIO_LABS_VP = 18;
export const MM_DIGITAL_AUDIO_LABS_CDLX = 19;
export const MM_DIGITAL_AUDIO_LABS_CTDIF = 20;
export const MM_SEERSYS_SEERSYNTH = 1;
export const MM_SEERSYS_SEERWAVE = 2;
export const MM_SEERSYS_SEERMIX = 3;
export const MM_SEERSYS_WAVESYNTH = 4;
export const MM_SEERSYS_WAVESYNTH_WG = 5;
export const MM_SEERSYS_REALITY = 6;
export const MM_OSPREY_1000WAVEIN = 1;
export const MM_OSPREY_1000WAVEOUT = 2;
export const MM_SOUNDESIGNS_WAVEIN = 1;
export const MM_SOUNDESIGNS_WAVEOUT = 2;
export const MM_SSP_SNDFESWAVEIN = 1;
export const MM_SSP_SNDFESWAVEOUT = 2;
export const MM_SSP_SNDFESMIDIIN = 3;
export const MM_SSP_SNDFESMIDIOUT = 4;
export const MM_SSP_SNDFESSYNTH = 5;
export const MM_SSP_SNDFESMIX = 6;
export const MM_SSP_SNDFESAUX = 7;
export const MM_ECS_AADF_MIDI_IN = 10;
export const MM_ECS_AADF_MIDI_OUT = 11;
export const MM_ECS_AADF_WAVE2MIDI_IN = 12;
export const MM_AMD_INTERWAVE_WAVEIN = 1;
export const MM_AMD_INTERWAVE_WAVEOUT = 2;
export const MM_AMD_INTERWAVE_SYNTH = 3;
export const MM_AMD_INTERWAVE_MIXER1 = 4;
export const MM_AMD_INTERWAVE_MIXER2 = 5;
export const MM_AMD_INTERWAVE_JOYSTICK = 6;
export const MM_AMD_INTERWAVE_EX_CD = 7;
export const MM_AMD_INTERWAVE_MIDIIN = 8;
export const MM_AMD_INTERWAVE_MIDIOUT = 9;
export const MM_AMD_INTERWAVE_AUX1 = 10;
export const MM_AMD_INTERWAVE_AUX2 = 11;
export const MM_AMD_INTERWAVE_AUX_MIC = 12;
export const MM_AMD_INTERWAVE_AUX_CD = 13;
export const MM_AMD_INTERWAVE_MONO_IN = 14;
export const MM_AMD_INTERWAVE_MONO_OUT = 15;
export const MM_AMD_INTERWAVE_EX_TELEPHONY = 16;
export const MM_AMD_INTERWAVE_WAVEOUT_BASE = 17;
export const MM_AMD_INTERWAVE_WAVEOUT_TREBLE = 18;
export const MM_AMD_INTERWAVE_STEREO_ENHANCED = 19;
export const MM_COREDYNAMICS_DYNAMIXHR = 1;
export const MM_COREDYNAMICS_DYNASONIX_SYNTH = 2;
export const MM_COREDYNAMICS_DYNASONIX_MIDI_IN = 3;
export const MM_COREDYNAMICS_DYNASONIX_MIDI_OUT = 4;
export const MM_COREDYNAMICS_DYNASONIX_WAVE_IN = 5;
export const MM_COREDYNAMICS_DYNASONIX_WAVE_OUT = 6;
export const MM_COREDYNAMICS_DYNASONIX_AUDIO_IN = 7;
export const MM_COREDYNAMICS_DYNASONIX_AUDIO_OUT = 8;
export const MM_COREDYNAMICS_DYNAGRAFX_VGA = 9;
export const MM_COREDYNAMICS_DYNAGRAFX_WAVE_IN = 10;
export const MM_COREDYNAMICS_DYNAGRAFX_WAVE_OUT = 11;
export const MM_CANAM_CBXWAVEOUT = 1;
export const MM_CANAM_CBXWAVEIN = 2;
export const MM_SOFTSOUND_CODEC = 1;
export const MM_NORRIS_VOICELINK = 1;
export const MM_DDD_MIDILINK_MIDIIN = 1;
export const MM_DDD_MIDILINK_MIDIOUT = 2;
export const MM_EUPHONICS_AUX_CD = 1;
export const MM_EUPHONICS_AUX_LINE = 2;
export const MM_EUPHONICS_AUX_MASTER = 3;
export const MM_EUPHONICS_AUX_MIC = 4;
export const MM_EUPHONICS_AUX_MIDI = 5;
export const MM_EUPHONICS_AUX_WAVE = 6;
export const MM_EUPHONICS_FMSYNTH_MONO = 7;
export const MM_EUPHONICS_FMSYNTH_STEREO = 8;
export const MM_EUPHONICS_MIDIIN = 9;
export const MM_EUPHONICS_MIDIOUT = 10;
export const MM_EUPHONICS_MIXER = 11;
export const MM_EUPHONICS_WAVEIN = 12;
export const MM_EUPHONICS_WAVEOUT = 13;
export const MM_EUPHONICS_EUSYNTH = 14;
export const CRYSTAL_NET_SFM_CODEC = 1;
export const MM_CHROMATIC_M1 = 1;
export const MM_CHROMATIC_M1_WAVEIN = 2;
export const MM_CHROMATIC_M1_WAVEOUT = 3;
export const MM_CHROMATIC_M1_FMSYNTH = 4;
export const MM_CHROMATIC_M1_MIXER = 5;
export const MM_CHROMATIC_M1_AUX = 6;
export const MM_CHROMATIC_M1_AUX_CD = 7;
export const MM_CHROMATIC_M1_MIDIIN = 8;
export const MM_CHROMATIC_M1_MIDIOUT = 9;
export const MM_CHROMATIC_M1_WTSYNTH = 16;
export const MM_CHROMATIC_M1_MPEGWAVEIN = 17;
export const MM_CHROMATIC_M1_MPEGWAVEOUT = 18;
export const MM_CHROMATIC_M2 = 19;
export const MM_CHROMATIC_M2_WAVEIN = 20;
export const MM_CHROMATIC_M2_WAVEOUT = 21;
export const MM_CHROMATIC_M2_FMSYNTH = 22;
export const MM_CHROMATIC_M2_MIXER = 23;
export const MM_CHROMATIC_M2_AUX = 24;
export const MM_CHROMATIC_M2_AUX_CD = 25;
export const MM_CHROMATIC_M2_MIDIIN = 32;
export const MM_CHROMATIC_M2_MIDIOUT = 33;
export const MM_CHROMATIC_M2_WTSYNTH = 34;
export const MM_CHROMATIC_M2_MPEGWAVEIN = 35;
export const MM_CHROMATIC_M2_MPEGWAVEOUT = 36;
export const MM_VIENNASYS_TSP_WAVE_DRIVER = 1;
export const MM_CONNECTIX_VIDEC_CODEC = 1;
export const MM_GADGETLABS_WAVE44_WAVEIN = 1;
export const MM_GADGETLABS_WAVE44_WAVEOUT = 2;
export const MM_GADGETLABS_WAVE42_WAVEIN = 3;
export const MM_GADGETLABS_WAVE42_WAVEOUT = 4;
export const MM_GADGETLABS_WAVE4_MIDIIN = 5;
export const MM_GADGETLABS_WAVE4_MIDIOUT = 6;
export const MM_FRONTIER_WAVECENTER_MIDIIN = 1;
export const MM_FRONTIER_WAVECENTER_MIDIOUT = 2;
export const MM_FRONTIER_WAVECENTER_WAVEIN = 3;
export const MM_FRONTIER_WAVECENTER_WAVEOUT = 4;
export const MM_VIONA_QVINPCI_MIXER = 1;
export const MM_VIONA_QVINPCI_WAVEIN = 2;
export const MM_VIONAQVINPCI_WAVEOUT = 3;
export const MM_VIONA_BUSTER_MIXER = 4;
export const MM_VIONA_CINEMASTER_MIXER = 5;
export const MM_VIONA_CONCERTO_MIXER = 6;
export const MM_CASIO_WP150_MIDIOUT = 1;
export const MM_CASIO_WP150_MIDIIN = 2;
export const MM_CASIO_LSG_MIDIOUT = 3;
export const MM_DIMD_PLATFORM = 0;
export const MM_DIMD_DIRSOUND = 1;
export const MM_DIMD_VIRTMPU = 2;
export const MM_DIMD_VIRTSB = 3;
export const MM_DIMD_VIRTJOY = 4;
export const MM_DIMD_WAVEIN = 5;
export const MM_DIMD_WAVEOUT = 6;
export const MM_DIMD_MIDIIN = 7;
export const MM_DIMD_MIDIOUT = 8;
export const MM_DIMD_AUX_LINE = 9;
export const MM_DIMD_MIXER = 10;
export const MM_DIMD_WSS_WAVEIN = 14;
export const MM_DIMD_WSS_WAVEOUT = 15;
export const MM_DIMD_WSS_MIXER = 17;
export const MM_DIMD_WSS_AUX = 21;
export const MM_DIMD_WSS_SYNTH = 76;
export const MM_S3_WAVEOUT = 1;
export const MM_S3_WAVEIN = 2;
export const MM_S3_MIDIOUT = 3;
export const MM_S3_MIDIIN = 4;
export const MM_S3_FMSYNTH = 5;
export const MM_S3_MIXER = 6;
export const MM_S3_AUX = 7;
export const MM_VKC_MPU401_MIDIIN = 256;
export const MM_VKC_SERIAL_MIDIIN = 257;
export const MM_VKC_MPU401_MIDIOUT = 512;
export const MM_VKC_SERIAL_MIDIOUT = 513;
export const MM_ZEFIRO_ZA2 = 2;
export const MM_FHGIIS_MPEGLAYER3_DECODE = 9;
export const MM_FHGIIS_MPEGLAYER3 = 10;
export const MM_FHGIIS_MPEGLAYER3_LITE = 10;
export const MM_FHGIIS_MPEGLAYER3_BASIC = 11;
export const MM_FHGIIS_MPEGLAYER3_ADVANCED = 12;
export const MM_FHGIIS_MPEGLAYER3_PROFESSIONAL = 13;
export const MM_FHGIIS_MPEGLAYER3_ADVANCEDPLUS = 14;
export const MM_QUICKNET_PJWAVEIN = 1;
export const MM_QUICKNET_PJWAVEOUT = 2;
export const MM_SICRESOURCE_SSO3D = 2;
export const MM_SICRESOURCE_SSOW3DI = 3;
export const MM_NEOMAGIC_SYNTH = 1;
export const MM_NEOMAGIC_WAVEOUT = 2;
export const MM_NEOMAGIC_WAVEIN = 3;
export const MM_NEOMAGIC_MIDIOUT = 4;
export const MM_NEOMAGIC_MIDIIN = 5;
export const MM_NEOMAGIC_AUX = 6;
export const MM_NEOMAGIC_MW3DX_WAVEOUT = 10;
export const MM_NEOMAGIC_MW3DX_WAVEIN = 11;
export const MM_NEOMAGIC_MW3DX_MIDIOUT = 12;
export const MM_NEOMAGIC_MW3DX_MIDIIN = 13;
export const MM_NEOMAGIC_MW3DX_FMSYNTH = 14;
export const MM_NEOMAGIC_MW3DX_GMSYNTH = 15;
export const MM_NEOMAGIC_MW3DX_MIXER = 16;
export const MM_NEOMAGIC_MW3DX_AUX = 17;
export const MM_NEOMAGIC_MWAVE_WAVEOUT = 20;
export const MM_NEOMAGIC_MWAVE_WAVEIN = 21;
export const MM_NEOMAGIC_MWAVE_MIDIOUT = 22;
export const MM_NEOMAGIC_MWAVE_MIDIIN = 23;
export const MM_NEOMAGIC_MWAVE_MIXER = 24;
export const MM_NEOMAGIC_MWAVE_AUX = 25;
export const MM_MERGING_MPEGL3 = 1;
export const MM_XIRLINK_VISIONLINK = 1;
export const MM_OTI_611WAVEIN = 5;
export const MM_OTI_611WAVEOUT = 6;
export const MM_OTI_611MIXER = 7;
export const MM_OTI_611MIDIN = 18;
export const MM_OTI_611MIDIOUT = 19;
export const MM_AUREAL_AU8820 = 16;
export const MM_AU8820_SYNTH = 17;
export const MM_AU8820_WAVEOUT = 18;
export const MM_AU8820_WAVEIN = 19;
export const MM_AU8820_MIXER = 20;
export const MM_AU8820_AUX = 21;
export const MM_AU8820_MIDIOUT = 22;
export const MM_AU8820_MIDIIN = 23;
export const MM_AUREAL_AU8830 = 32;
export const MM_AU8830_SYNTH = 33;
export const MM_AU8830_WAVEOUT = 34;
export const MM_AU8830_WAVEIN = 35;
export const MM_AU8830_MIXER = 36;
export const MM_AU8830_AUX = 37;
export const MM_AU8830_MIDIOUT = 38;
export const MM_AU8830_MIDIIN = 39;
export const MM_VIVO_AUDIO_CODEC = 1;
export const MM_SHARP_MDC_MIDI_SYNTH = 1;
export const MM_SHARP_MDC_MIDI_IN = 2;
export const MM_SHARP_MDC_MIDI_OUT = 3;
export const MM_SHARP_MDC_WAVE_IN = 4;
export const MM_SHARP_MDC_WAVE_OUT = 5;
export const MM_SHARP_MDC_AUX = 6;
export const MM_SHARP_MDC_MIXER = 10;
export const MM_SHARP_MDC_AUX_MASTER = 100;
export const MM_SHARP_MDC_AUX_BASS = 101;
export const MM_SHARP_MDC_AUX_TREBLE = 102;
export const MM_SHARP_MDC_AUX_MIDI_VOL = 103;
export const MM_SHARP_MDC_AUX_WAVE_VOL = 104;
export const MM_SHARP_MDC_AUX_WAVE_RVB = 105;
export const MM_SHARP_MDC_AUX_WAVE_CHR = 106;
export const MM_SHARP_MDC_AUX_VOL = 107;
export const MM_SHARP_MDC_AUX_RVB = 108;
export const MM_SHARP_MDC_AUX_CHR = 109;
export const MM_LUCENT_ACM_G723 = 0;
export const MM_ATT_G729A = 1;
export const MM_MARIAN_ARC44WAVEIN = 1;
export const MM_MARIAN_ARC44WAVEOUT = 2;
export const MM_MARIAN_PRODIF24WAVEIN = 3;
export const MM_MARIAN_PRODIF24WAVEOUT = 4;
export const MM_MARIAN_ARC88WAVEIN = 5;
export const MM_MARIAN_ARC88WAVEOUT = 6;
export const MM_BCB_NETBOARD_10 = 1;
export const MM_BCB_TT75_10 = 2;
export const MM_MOTIONPIXELS_MVI2 = 1;
export const MM_QDESIGN_ACM_MPEG = 1;
export const MM_QDESIGN_ACM_QDESIGN_MUSIC = 2;
export const MM_NMP_CCP_WAVEIN = 1;
export const MM_NMP_CCP_WAVEOUT = 2;
export const MM_NMP_ACM_AMR = 10;
export const MM_DF_ACM_G726 = 1;
export const MM_DF_ACM_GSM610 = 2;
export const MM_BERCOS_WAVEIN = 1;
export const MM_BERCOS_MIXER = 2;
export const MM_BERCOS_WAVEOUT = 3;
export const MM_ONLIVE_MPCODEC = 1;
export const MM_PHONET_PP_WAVEOUT = 1;
export const MM_PHONET_PP_WAVEIN = 2;
export const MM_PHONET_PP_MIXER = 3;
export const MM_FTR_ENCODER_WAVEIN = 1;
export const MM_FTR_ACM = 2;
export const MM_ENET_T2000_LINEIN = 1;
export const MM_ENET_T2000_LINEOUT = 2;
export const MM_ENET_T2000_HANDSETIN = 3;
export const MM_ENET_T2000_HANDSETOUT = 4;
export const MM_EMAGIC_UNITOR8 = 1;
export const MM_SIPROLAB_ACELPNET = 1;
export const MM_DICTAPHONE_G726 = 1;
export const MM_RZS_ACM_TUBGSM = 1;
export const MM_EES_PCMIDI14 = 1;
export const MM_EES_PCMIDI14_IN = 2;
export const MM_EES_PCMIDI14_OUT1 = 3;
export const MM_EES_PCMIDI14_OUT2 = 4;
export const MM_EES_PCMIDI14_OUT3 = 5;
export const MM_EES_PCMIDI14_OUT4 = 6;
export const MM_HAFTMANN_LPTDAC2 = 1;
export const MM_LUCID_PCI24WAVEIN = 1;
export const MM_LUCID_PCI24WAVEOUT = 2;
export const MM_HEADSPACE_HAESYNTH = 1;
export const MM_HEADSPACE_HAEWAVEOUT = 2;
export const MM_HEADSPACE_HAEWAVEIN = 3;
export const MM_HEADSPACE_HAEMIXER = 4;
export const MM_UNISYS_ACM_NAP = 1;
export const MM_LUMINOSITI_SCWAVEIN = 1;
export const MM_LUMINOSITI_SCWAVEOUT = 2;
export const MM_LUMINOSITI_SCWAVEMIX = 3;
export const MM_ACTIVEVOICE_ACM_VOXADPCM = 1;
export const MM_DTS_DS = 1;
export const MM_SOFTLAB_NSK_FRW_WAVEIN = 1;
export const MM_SOFTLAB_NSK_FRW_WAVEOUT = 2;
export const MM_SOFTLAB_NSK_FRW_MIXER = 3;
export const MM_SOFTLAB_NSK_FRW_AUX = 4;
export const MM_FORTEMEDIA_WAVEIN = 1;
export const MM_FORTEMEDIA_WAVEOUT = 2;
export const MM_FORTEMEDIA_FMSYNC = 3;
export const MM_FORTEMEDIA_MIXER = 4;
export const MM_FORTEMEDIA_AUX = 5;
export const MM_SONORUS_STUDIO = 1;
export const MM_I_LINK_VOICE_CODER = 1;
export const MM_SELSIUS_SYSTEMS_RTPWAVEOUT = 1;
export const MM_SELSIUS_SYSTEMS_RTPWAVEIN = 2;
export const MM_ADMOS_FM_SYNTH = 1;
export const MM_ADMOS_QS3AMIDIOUT = 2;
export const MM_ADMOS_QS3AMIDIIN = 3;
export const MM_ADMOS_QS3AWAVEOUT = 4;
export const MM_ADMOS_QS3AWAVEIN = 5;
export const MM_LEXICON_STUDIO_WAVE_OUT = 1;
export const MM_LEXICON_STUDIO_WAVE_IN = 2;
export const MM_SGI_320_WAVEIN = 1;
export const MM_SGI_320_WAVEOUT = 2;
export const MM_SGI_320_MIXER = 3;
export const MM_SGI_540_WAVEIN = 4;
export const MM_SGI_540_WAVEOUT = 5;
export const MM_SGI_540_MIXER = 6;
export const MM_SGI_RAD_ADATMONO1_WAVEIN = 7;
export const MM_SGI_RAD_ADATMONO2_WAVEIN = 8;
export const MM_SGI_RAD_ADATMONO3_WAVEIN = 9;
export const MM_SGI_RAD_ADATMONO4_WAVEIN = 10;
export const MM_SGI_RAD_ADATMONO5_WAVEIN = 11;
export const MM_SGI_RAD_ADATMONO6_WAVEIN = 12;
export const MM_SGI_RAD_ADATMONO7_WAVEIN = 13;
export const MM_SGI_RAD_ADATMONO8_WAVEIN = 14;
export const MM_SGI_RAD_ADATSTEREO12_WAVEIN = 15;
export const MM_SGI_RAD_ADATSTEREO34_WAVEIN = 16;
export const MM_SGI_RAD_ADATSTEREO56_WAVEIN = 17;
export const MM_SGI_RAD_ADATSTEREO78_WAVEIN = 18;
export const MM_SGI_RAD_ADAT8CHAN_WAVEIN = 19;
export const MM_SGI_RAD_ADATMONO1_WAVEOUT = 20;
export const MM_SGI_RAD_ADATMONO2_WAVEOUT = 21;
export const MM_SGI_RAD_ADATMONO3_WAVEOUT = 22;
export const MM_SGI_RAD_ADATMONO4_WAVEOUT = 23;
export const MM_SGI_RAD_ADATMONO5_WAVEOUT = 24;
export const MM_SGI_RAD_ADATMONO6_WAVEOUT = 25;
export const MM_SGI_RAD_ADATMONO7_WAVEOUT = 26;
export const MM_SGI_RAD_ADATMONO8_WAVEOUT = 27;
export const MM_SGI_RAD_ADATSTEREO12_WAVEOUT = 28;
export const MM_SGI_RAD_ADATSTEREO32_WAVEOUT = 29;
export const MM_SGI_RAD_ADATSTEREO56_WAVEOUT = 30;
export const MM_SGI_RAD_ADATSTEREO78_WAVEOUT = 31;
export const MM_SGI_RAD_ADAT8CHAN_WAVEOUT = 32;
export const MM_SGI_RAD_AESMONO1_WAVEIN = 33;
export const MM_SGI_RAD_AESMONO2_WAVEIN = 34;
export const MM_SGI_RAD_AESSTEREO_WAVEIN = 35;
export const MM_SGI_RAD_AESMONO1_WAVEOUT = 36;
export const MM_SGI_RAD_AESMONO2_WAVEOUT = 37;
export const MM_SGI_RAD_AESSTEREO_WAVEOUT = 38;
export const MM_IPI_ACM_HSX = 1;
export const MM_IPI_ACM_RPELP = 2;
export const MM_IPI_WF_ASSS = 3;
export const MM_IPI_AT_WAVEOUT = 4;
export const MM_IPI_AT_WAVEIN = 5;
export const MM_IPI_AT_MIXER = 6;
export const MM_ICE_WAVEOUT = 1;
export const MM_ICE_WAVEIN = 2;
export const MM_ICE_MTWAVEOUT = 3;
export const MM_ICE_MTWAVEIN = 4;
export const MM_ICE_MIDIOUT1 = 5;
export const MM_ICE_MIDIIN1 = 6;
export const MM_ICE_MIDIOUT2 = 7;
export const MM_ICE_MIDIIN2 = 8;
export const MM_ICE_SYNTH = 9;
export const MM_ICE_MIXER = 10;
export const MM_ICE_AUX = 11;
export const MM_VQST_VQC1 = 1;
export const MM_VQST_VQC2 = 2;
export const MM_ETEK_KWIKMIDI_MIDIIN = 1;
export const MM_ETEK_KWIKMIDI_MIDIOUT = 2;
export const MM_INTERNET_SSW_MIDIOUT = 10;
export const MM_INTERNET_SSW_MIDIIN = 11;
export const MM_INTERNET_SSW_WAVEOUT = 12;
export const MM_INTERNET_SSW_WAVEIN = 13;
export const MM_SONY_ACM_SCX = 1;
export const MM_UH_ACM_ADPCM = 1;
export const MM_SYDEC_NV_WAVEIN = 1;
export const MM_SYDEC_NV_WAVEOUT = 2;
export const MM_FLEXION_X300_WAVEIN = 1;
export const MM_FLEXION_X300_WAVEOUT = 2;
export const MM_VIA_WAVEOUT = 1;
export const MM_VIA_WAVEIN = 2;
export const MM_VIA_MIXER = 3;
export const MM_VIA_AUX = 4;
export const MM_VIA_MPU401_MIDIOUT = 5;
export const MM_VIA_MPU401_MIDIIN = 6;
export const MM_VIA_SWFM_SYNTH = 7;
export const MM_VIA_WDM_WAVEOUT = 8;
export const MM_VIA_WDM_WAVEIN = 9;
export const MM_VIA_WDM_MIXER = 10;
export const MM_VIA_WDM_MPU401_MIDIOUT = 11;
export const MM_VIA_WDM_MPU401_MIDIIN = 12;
export const MM_MICRONAS_SC4 = 1;
export const MM_MICRONAS_CLP833 = 2;
export const MM_HP_WAVEOUT = 1;
export const MM_HP_WAVEIN = 2;
export const MM_QUICKAUDIO_MINIMIDI = 1;
export const MM_QUICKAUDIO_MAXIMIDI = 2;
export const MM_ICCC_UNA3_WAVEIN = 1;
export const MM_ICCC_UNA3_WAVEOUT = 2;
export const MM_ICCC_UNA3_AUX = 3;
export const MM_ICCC_UNA3_MIXER = 4;
export const MM_3COM_CB_MIXER = 1;
export const MM_3COM_CB_WAVEIN = 2;
export const MM_3COM_CB_WAVEOUT = 3;
export const MM_MINDMAKER_GC_WAVEIN = 1;
export const MM_MINDMAKER_GC_WAVEOUT = 2;
export const MM_MINDMAKER_GC_MIXER = 3;
export const MM_TELEKOL_WAVEOUT = 1;
export const MM_TELEKOL_WAVEIN = 2;
export const MM_ALGOVISION_VB80WAVEOUT = 1;
export const MM_ALGOVISION_VB80WAVEIN = 2;
export const MM_ALGOVISION_VB80MIXER = 3;
export const MM_ALGOVISION_VB80AUX = 4;
export const MM_ALGOVISION_VB80AUX2 = 5;
export const WAVE_FORMAT_UNKNOWN = 0;
export const WAVE_FORMAT_ADPCM = 2;
export const WAVE_FORMAT_IEEE_FLOAT = 3;
export const WAVE_FORMAT_VSELP = 4;
export const WAVE_FORMAT_IBM_CVSD = 5;
export const WAVE_FORMAT_ALAW = 6;
export const WAVE_FORMAT_MULAW = 7;
export const WAVE_FORMAT_DTS = 8;
export const WAVE_FORMAT_DRM = 9;
export const WAVE_FORMAT_WMAVOICE9 = 10;
export const WAVE_FORMAT_WMAVOICE10 = 11;
export const WAVE_FORMAT_OKI_ADPCM = 16;
export const WAVE_FORMAT_DVI_ADPCM = 17;
export const WAVE_FORMAT_IMA_ADPCM = 17;
export const WAVE_FORMAT_MEDIASPACE_ADPCM = 18;
export const WAVE_FORMAT_SIERRA_ADPCM = 19;
export const WAVE_FORMAT_G723_ADPCM = 20;
export const WAVE_FORMAT_DIGISTD = 21;
export const WAVE_FORMAT_DIGIFIX = 22;
export const WAVE_FORMAT_DIALOGIC_OKI_ADPCM = 23;
export const WAVE_FORMAT_MEDIAVISION_ADPCM = 24;
export const WAVE_FORMAT_CU_CODEC = 25;
export const WAVE_FORMAT_HP_DYN_VOICE = 26;
export const WAVE_FORMAT_YAMAHA_ADPCM = 32;
export const WAVE_FORMAT_SONARC = 33;
export const WAVE_FORMAT_DSPGROUP_TRUESPEECH = 34;
export const WAVE_FORMAT_ECHOSC1 = 35;
export const WAVE_FORMAT_AUDIOFILE_AF36 = 36;
export const WAVE_FORMAT_APTX = 37;
export const WAVE_FORMAT_AUDIOFILE_AF10 = 38;
export const WAVE_FORMAT_PROSODY_1612 = 39;
export const WAVE_FORMAT_LRC = 40;
export const WAVE_FORMAT_DOLBY_AC2 = 48;
export const WAVE_FORMAT_GSM610 = 49;
export const WAVE_FORMAT_MSNAUDIO = 50;
export const WAVE_FORMAT_ANTEX_ADPCME = 51;
export const WAVE_FORMAT_CONTROL_RES_VQLPC = 52;
export const WAVE_FORMAT_DIGIREAL = 53;
export const WAVE_FORMAT_DIGIADPCM = 54;
export const WAVE_FORMAT_CONTROL_RES_CR10 = 55;
export const WAVE_FORMAT_NMS_VBXADPCM = 56;
export const WAVE_FORMAT_CS_IMAADPCM = 57;
export const WAVE_FORMAT_ECHOSC3 = 58;
export const WAVE_FORMAT_ROCKWELL_ADPCM = 59;
export const WAVE_FORMAT_ROCKWELL_DIGITALK = 60;
export const WAVE_FORMAT_XEBEC = 61;
export const WAVE_FORMAT_G721_ADPCM = 64;
export const WAVE_FORMAT_G728_CELP = 65;
export const WAVE_FORMAT_MSG723 = 66;
export const WAVE_FORMAT_INTEL_G723_1 = 67;
export const WAVE_FORMAT_INTEL_G729 = 68;
export const WAVE_FORMAT_SHARP_G726 = 69;
export const WAVE_FORMAT_MPEG = 80;
export const WAVE_FORMAT_RT24 = 82;
export const WAVE_FORMAT_PAC = 83;
export const WAVE_FORMAT_MPEGLAYER3 = 85;
export const WAVE_FORMAT_LUCENT_G723 = 89;
export const WAVE_FORMAT_CIRRUS = 96;
export const WAVE_FORMAT_ESPCM = 97;
export const WAVE_FORMAT_VOXWARE = 98;
export const WAVE_FORMAT_CANOPUS_ATRAC = 99;
export const WAVE_FORMAT_G726_ADPCM = 100;
export const WAVE_FORMAT_G722_ADPCM = 101;
export const WAVE_FORMAT_DSAT = 102;
export const WAVE_FORMAT_DSAT_DISPLAY = 103;
export const WAVE_FORMAT_VOXWARE_BYTE_ALIGNED = 105;
export const WAVE_FORMAT_VOXWARE_AC8 = 112;
export const WAVE_FORMAT_VOXWARE_AC10 = 113;
export const WAVE_FORMAT_VOXWARE_AC16 = 114;
export const WAVE_FORMAT_VOXWARE_AC20 = 115;
export const WAVE_FORMAT_VOXWARE_RT24 = 116;
export const WAVE_FORMAT_VOXWARE_RT29 = 117;
export const WAVE_FORMAT_VOXWARE_RT29HW = 118;
export const WAVE_FORMAT_VOXWARE_VR12 = 119;
export const WAVE_FORMAT_VOXWARE_VR18 = 120;
export const WAVE_FORMAT_VOXWARE_TQ40 = 121;
export const WAVE_FORMAT_VOXWARE_SC3 = 122;
export const WAVE_FORMAT_VOXWARE_SC3_1 = 123;
export const WAVE_FORMAT_SOFTSOUND = 128;
export const WAVE_FORMAT_VOXWARE_TQ60 = 129;
export const WAVE_FORMAT_MSRT24 = 130;
export const WAVE_FORMAT_G729A = 131;
export const WAVE_FORMAT_MVI_MVI2 = 132;
export const WAVE_FORMAT_DF_G726 = 133;
export const WAVE_FORMAT_DF_GSM610 = 134;
export const WAVE_FORMAT_ISIAUDIO = 136;
export const WAVE_FORMAT_ONLIVE = 137;
export const WAVE_FORMAT_MULTITUDE_FT_SX20 = 138;
export const WAVE_FORMAT_INFOCOM_ITS_G721_ADPCM = 139;
export const WAVE_FORMAT_CONVEDIA_G729 = 140;
export const WAVE_FORMAT_CONGRUENCY = 141;
export const WAVE_FORMAT_SBC24 = 145;
export const WAVE_FORMAT_DOLBY_AC3_SPDIF = 146;
export const WAVE_FORMAT_MEDIASONIC_G723 = 147;
export const WAVE_FORMAT_PROSODY_8KBPS = 148;
export const WAVE_FORMAT_ZYXEL_ADPCM = 151;
export const WAVE_FORMAT_PHILIPS_LPCBB = 152;
export const WAVE_FORMAT_PACKED = 153;
export const WAVE_FORMAT_MALDEN_PHONYTALK = 160;
export const WAVE_FORMAT_RACAL_RECORDER_GSM = 161;
export const WAVE_FORMAT_RACAL_RECORDER_G720_A = 162;
export const WAVE_FORMAT_RACAL_RECORDER_G723_1 = 163;
export const WAVE_FORMAT_RACAL_RECORDER_TETRA_ACELP = 164;
export const WAVE_FORMAT_NEC_AAC = 176;
export const WAVE_FORMAT_RAW_AAC1 = 255;
export const WAVE_FORMAT_RHETOREX_ADPCM = 256;
export const WAVE_FORMAT_IRAT = 257;
export const WAVE_FORMAT_VIVO_G723 = 273;
export const WAVE_FORMAT_VIVO_SIREN = 274;
export const WAVE_FORMAT_PHILIPS_CELP = 288;
export const WAVE_FORMAT_PHILIPS_GRUNDIG = 289;
export const WAVE_FORMAT_DIGITAL_G723 = 291;
export const WAVE_FORMAT_SANYO_LD_ADPCM = 293;
export const WAVE_FORMAT_SIPROLAB_ACEPLNET = 304;
export const WAVE_FORMAT_SIPROLAB_ACELP4800 = 305;
export const WAVE_FORMAT_SIPROLAB_ACELP8V3 = 306;
export const WAVE_FORMAT_SIPROLAB_G729 = 307;
export const WAVE_FORMAT_SIPROLAB_G729A = 308;
export const WAVE_FORMAT_SIPROLAB_KELVIN = 309;
export const WAVE_FORMAT_VOICEAGE_AMR = 310;
export const WAVE_FORMAT_G726ADPCM = 320;
export const WAVE_FORMAT_DICTAPHONE_CELP68 = 321;
export const WAVE_FORMAT_DICTAPHONE_CELP54 = 322;
export const WAVE_FORMAT_QUALCOMM_PUREVOICE = 336;
export const WAVE_FORMAT_QUALCOMM_HALFRATE = 337;
export const WAVE_FORMAT_TUBGSM = 341;
export const WAVE_FORMAT_MSAUDIO1 = 352;
export const WAVE_FORMAT_WMAUDIO2 = 353;
export const WAVE_FORMAT_WMAUDIO3 = 354;
export const WAVE_FORMAT_WMAUDIO_LOSSLESS = 355;
export const WAVE_FORMAT_WMASPDIF = 356;
export const WAVE_FORMAT_UNISYS_NAP_ADPCM = 368;
export const WAVE_FORMAT_UNISYS_NAP_ULAW = 369;
export const WAVE_FORMAT_UNISYS_NAP_ALAW = 370;
export const WAVE_FORMAT_UNISYS_NAP_16K = 371;
export const WAVE_FORMAT_SYCOM_ACM_SYC008 = 372;
export const WAVE_FORMAT_SYCOM_ACM_SYC701_G726L = 373;
export const WAVE_FORMAT_SYCOM_ACM_SYC701_CELP54 = 374;
export const WAVE_FORMAT_SYCOM_ACM_SYC701_CELP68 = 375;
export const WAVE_FORMAT_KNOWLEDGE_ADVENTURE_ADPCM = 376;
export const WAVE_FORMAT_FRAUNHOFER_IIS_MPEG2_AAC = 384;
export const WAVE_FORMAT_DTS_DS = 400;
export const WAVE_FORMAT_CREATIVE_ADPCM = 512;
export const WAVE_FORMAT_CREATIVE_FASTSPEECH8 = 514;
export const WAVE_FORMAT_CREATIVE_FASTSPEECH10 = 515;
export const WAVE_FORMAT_UHER_ADPCM = 528;
export const WAVE_FORMAT_ULEAD_DV_AUDIO = 533;
export const WAVE_FORMAT_ULEAD_DV_AUDIO_1 = 534;
export const WAVE_FORMAT_QUARTERDECK = 544;
export const WAVE_FORMAT_ILINK_VC = 560;
export const WAVE_FORMAT_RAW_SPORT = 576;
export const WAVE_FORMAT_ESST_AC3 = 577;
export const WAVE_FORMAT_GENERIC_PASSTHRU = 585;
export const WAVE_FORMAT_IPI_HSX = 592;
export const WAVE_FORMAT_IPI_RPELP = 593;
export const WAVE_FORMAT_CS2 = 608;
export const WAVE_FORMAT_SONY_SCX = 624;
export const WAVE_FORMAT_SONY_SCY = 625;
export const WAVE_FORMAT_SONY_ATRAC3 = 626;
export const WAVE_FORMAT_SONY_SPC = 627;
export const WAVE_FORMAT_TELUM_AUDIO = 640;
export const WAVE_FORMAT_TELUM_IA_AUDIO = 641;
export const WAVE_FORMAT_NORCOM_VOICE_SYSTEMS_ADPCM = 645;
export const WAVE_FORMAT_FM_TOWNS_SND = 768;
export const WAVE_FORMAT_MICRONAS = 848;
export const WAVE_FORMAT_MICRONAS_CELP833 = 849;
export const WAVE_FORMAT_BTV_DIGITAL = 1024;
export const WAVE_FORMAT_INTEL_MUSIC_CODER = 1025;
export const WAVE_FORMAT_INDEO_AUDIO = 1026;
export const WAVE_FORMAT_QDESIGN_MUSIC = 1104;
export const WAVE_FORMAT_ON2_VP7_AUDIO = 1280;
export const WAVE_FORMAT_ON2_VP6_AUDIO = 1281;
export const WAVE_FORMAT_VME_VMPCM = 1664;
export const WAVE_FORMAT_TPC = 1665;
export const WAVE_FORMAT_LIGHTWAVE_LOSSLESS = 2222;
export const WAVE_FORMAT_OLIGSM = 4096;
export const WAVE_FORMAT_OLIADPCM = 4097;
export const WAVE_FORMAT_OLICELP = 4098;
export const WAVE_FORMAT_OLISBC = 4099;
export const WAVE_FORMAT_OLIOPR = 4100;
export const WAVE_FORMAT_LH_CODEC = 4352;
export const WAVE_FORMAT_LH_CODEC_CELP = 4353;
export const WAVE_FORMAT_LH_CODEC_SBC8 = 4354;
export const WAVE_FORMAT_LH_CODEC_SBC12 = 4355;
export const WAVE_FORMAT_LH_CODEC_SBC16 = 4356;
export const WAVE_FORMAT_NORRIS = 5120;
export const WAVE_FORMAT_ISIAUDIO_2 = 5121;
export const WAVE_FORMAT_SOUNDSPACE_MUSICOMPRESS = 5376;
export const WAVE_FORMAT_MPEG_ADTS_AAC = 5632;
export const WAVE_FORMAT_MPEG_RAW_AAC = 5633;
export const WAVE_FORMAT_MPEG_LOAS = 5634;
export const WAVE_FORMAT_NOKIA_MPEG_ADTS_AAC = 5640;
export const WAVE_FORMAT_NOKIA_MPEG_RAW_AAC = 5641;
export const WAVE_FORMAT_VODAFONE_MPEG_ADTS_AAC = 5642;
export const WAVE_FORMAT_VODAFONE_MPEG_RAW_AAC = 5643;
export const WAVE_FORMAT_MPEG_HEAAC = 5648;
export const WAVE_FORMAT_VOXWARE_RT24_SPEECH = 6172;
export const WAVE_FORMAT_SONICFOUNDRY_LOSSLESS = 6513;
export const WAVE_FORMAT_INNINGS_TELECOM_ADPCM = 6521;
export const WAVE_FORMAT_LUCENT_SX8300P = 7175;
export const WAVE_FORMAT_LUCENT_SX5363S = 7180;
export const WAVE_FORMAT_CUSEEME = 7939;
export const WAVE_FORMAT_NTCSOFT_ALF2CM_ACM = 8132;
export const WAVE_FORMAT_DVM = 8192;
export const WAVE_FORMAT_DTS2 = 8193;
export const WAVE_FORMAT_MAKEAVIS = 13075;
export const WAVE_FORMAT_DIVIO_MPEG4_AAC = 16707;
export const WAVE_FORMAT_NOKIA_ADAPTIVE_MULTIRATE = 16897;
export const WAVE_FORMAT_DIVIO_G726 = 16963;
export const WAVE_FORMAT_LEAD_SPEECH = 17228;
export const WAVE_FORMAT_LEAD_VORBIS = 22092;
export const WAVE_FORMAT_WAVPACK_AUDIO = 22358;
export const WAVE_FORMAT_ALAC = 27745;
export const WAVE_FORMAT_OGG_VORBIS_MODE_1 = 26447;
export const WAVE_FORMAT_OGG_VORBIS_MODE_2 = 26448;
export const WAVE_FORMAT_OGG_VORBIS_MODE_3 = 26449;
export const WAVE_FORMAT_OGG_VORBIS_MODE_1_PLUS = 26479;
export const WAVE_FORMAT_OGG_VORBIS_MODE_2_PLUS = 26480;
export const WAVE_FORMAT_OGG_VORBIS_MODE_3_PLUS = 26481;
export const WAVE_FORMAT_3COM_NBX = 28672;
export const WAVE_FORMAT_OPUS = 28751;
export const WAVE_FORMAT_FAAD_AAC = 28781;
export const WAVE_FORMAT_AMR_NB = 29537;
export const WAVE_FORMAT_AMR_WB = 29538;
export const WAVE_FORMAT_AMR_WP = 29539;
export const WAVE_FORMAT_GSM_AMR_CBR = 31265;
export const WAVE_FORMAT_GSM_AMR_VBR_SID = 31266;
export const WAVE_FORMAT_COMVERSE_INFOSYS_G723_1 = 41216;
export const WAVE_FORMAT_COMVERSE_INFOSYS_AVQSBC = 41217;
export const WAVE_FORMAT_COMVERSE_INFOSYS_SBC = 41218;
export const WAVE_FORMAT_SYMBOL_G729_A = 41219;
export const WAVE_FORMAT_VOICEAGE_AMR_WB = 41220;
export const WAVE_FORMAT_INGENIENT_G726 = 41221;
export const WAVE_FORMAT_MPEG4_AAC = 41222;
export const WAVE_FORMAT_ENCORE_G726 = 41223;
export const WAVE_FORMAT_ZOLL_ASAO = 41224;
export const WAVE_FORMAT_SPEEX_VOICE = 41225;
export const WAVE_FORMAT_VIANIX_MASC = 41226;
export const WAVE_FORMAT_WM9_SPECTRUM_ANALYZER = 41227;
export const WAVE_FORMAT_WMF_SPECTRUM_ANAYZER = 41228;
export const WAVE_FORMAT_GSM_610 = 41229;
export const WAVE_FORMAT_GSM_620 = 41230;
export const WAVE_FORMAT_GSM_660 = 41231;
export const WAVE_FORMAT_GSM_690 = 41232;
export const WAVE_FORMAT_GSM_ADAPTIVE_MULTIRATE_WB = 41233;
export const WAVE_FORMAT_POLYCOM_G722 = 41234;
export const WAVE_FORMAT_POLYCOM_G728 = 41235;
export const WAVE_FORMAT_POLYCOM_G729_A = 41236;
export const WAVE_FORMAT_POLYCOM_SIREN = 41237;
export const WAVE_FORMAT_GLOBAL_IP_ILBC = 41238;
export const WAVE_FORMAT_RADIOTIME_TIME_SHIFT_RADIO = 41239;
export const WAVE_FORMAT_NICE_ACA = 41240;
export const WAVE_FORMAT_NICE_ADPCM = 41241;
export const WAVE_FORMAT_VOCORD_G721 = 41242;
export const WAVE_FORMAT_VOCORD_G726 = 41243;
export const WAVE_FORMAT_VOCORD_G722_1 = 41244;
export const WAVE_FORMAT_VOCORD_G728 = 41245;
export const WAVE_FORMAT_VOCORD_G729 = 41246;
export const WAVE_FORMAT_VOCORD_G729_A = 41247;
export const WAVE_FORMAT_VOCORD_G723_1 = 41248;
export const WAVE_FORMAT_VOCORD_LBC = 41249;
export const WAVE_FORMAT_NICE_G728 = 41250;
export const WAVE_FORMAT_FRACE_TELECOM_G729 = 41251;
export const WAVE_FORMAT_CODIAN = 41252;
export const WAVE_FORMAT_DOLBY_AC4 = 44096;
export const WAVE_FORMAT_FLAC = 61868;
export const WAVE_FORMAT_DEVELOPMENT = 65535;
export const ACM_MPEG_LAYER1 = 1;
export const ACM_MPEG_LAYER2 = 2;
export const ACM_MPEG_LAYER3 = 4;
export const ACM_MPEG_STEREO = 1;
export const ACM_MPEG_JOINTSTEREO = 2;
export const ACM_MPEG_DUALCHANNEL = 4;
export const ACM_MPEG_SINGLECHANNEL = 8;
export const ACM_MPEG_PRIVATEBIT = 1;
export const ACM_MPEG_COPYRIGHT = 2;
export const ACM_MPEG_ORIGINALHOME = 4;
export const ACM_MPEG_PROTECTIONBIT = 8;
export const ACM_MPEG_ID_MPEG1 = 16;
export const MPEGLAYER3_WFX_EXTRA_BYTES = 12;
export const MPEGLAYER3_ID_UNKNOWN = 0;
export const MPEGLAYER3_ID_MPEG = 1;
export const MPEGLAYER3_ID_CONSTANTFRAMESIZE = 2;
export const MM_MSFT_ACM_WMAUDIO = 39;
export const WMAUDIO_BITS_PER_SAMPLE = 16;
export const WMAUDIO_MAX_CHANNELS = 2;
export const MM_MSFT_ACM_MSAUDIO1 = 39;
export const MSAUDIO1_BITS_PER_SAMPLE = 16;
export const MSAUDIO1_MAX_CHANNELS = 2;
export const MM_MSFT_ACM_WMAUDIO2 = 101;
export const WMAUDIO2_BITS_PER_SAMPLE = 16;
export const WMAUDIO2_MAX_CHANNELS = 2;
export const WAVE_FILTER_UNKNOWN = 0;
export const WAVE_FILTER_DEVELOPMENT = 65535;
export const WAVE_FILTER_VOLUME = 1;
export const WAVE_FILTER_ECHO = 2;
export const JPEG_PROCESS_BASELINE = 0;
export const AVIIF_CONTROLFRAME = 512;
export const JIFMK_SOF0 = 65472;
export const JIFMK_SOF1 = 65473;
export const JIFMK_SOF2 = 65474;
export const JIFMK_SOF3 = 65475;
export const JIFMK_SOF5 = 65477;
export const JIFMK_SOF6 = 65478;
export const JIFMK_SOF7 = 65479;
export const JIFMK_JPG = 65480;
export const JIFMK_SOF9 = 65481;
export const JIFMK_SOF10 = 65482;
export const JIFMK_SOF11 = 65483;
export const JIFMK_SOF13 = 65485;
export const JIFMK_SOF14 = 65486;
export const JIFMK_SOF15 = 65487;
export const JIFMK_DHT = 65476;
export const JIFMK_DAC = 65484;
export const JIFMK_RST0 = 65488;
export const JIFMK_RST1 = 65489;
export const JIFMK_RST2 = 65490;
export const JIFMK_RST3 = 65491;
export const JIFMK_RST4 = 65492;
export const JIFMK_RST5 = 65493;
export const JIFMK_RST6 = 65494;
export const JIFMK_RST7 = 65495;
export const JIFMK_SOI = 65496;
export const JIFMK_EOI = 65497;
export const JIFMK_SOS = 65498;
export const JIFMK_DQT = 65499;
export const JIFMK_DNL = 65500;
export const JIFMK_DRI = 65501;
export const JIFMK_DHP = 65502;
export const JIFMK_EXP = 65503;
export const JIFMK_APP0 = 65504;
export const JIFMK_APP1 = 65505;
export const JIFMK_APP2 = 65506;
export const JIFMK_APP3 = 65507;
export const JIFMK_APP4 = 65508;
export const JIFMK_APP5 = 65509;
export const JIFMK_APP6 = 65510;
export const JIFMK_APP7 = 65511;
export const JIFMK_JPG0 = 65520;
export const JIFMK_JPG1 = 65521;
export const JIFMK_JPG2 = 65522;
export const JIFMK_JPG3 = 65523;
export const JIFMK_JPG4 = 65524;
export const JIFMK_JPG5 = 65525;
export const JIFMK_JPG6 = 65526;
export const JIFMK_JPG7 = 65527;
export const JIFMK_JPG8 = 65528;
export const JIFMK_JPG9 = 65529;
export const JIFMK_JPG10 = 65530;
export const JIFMK_JPG11 = 65531;
export const JIFMK_JPG12 = 65532;
export const JIFMK_JPG13 = 65533;
export const JIFMK_COM = 65534;
export const JIFMK_TEM = 65281;
export const JIFMK_RES = 65282;
export const JIFMK_00 = 65280;
export const JIFMK_FF = 65535;
export const JPEG_Y = 1;
export const JPEG_YCbCr = 2;
export const JPEG_RGB = 3;
export const MIXERCONTROL_CONTROLTYPE_SRS_MTS = 536936454;
export const MIXERCONTROL_CONTROLTYPE_SRS_ONOFF = 536936455;
export const MIXERCONTROL_CONTROLTYPE_SRS_SYNTHSELECT = 536936456;
export const VP_COMMAND_GET = 1;
export const VP_COMMAND_SET = 2;
export const VP_FLAGS_TV_MODE = 1;
export const VP_FLAGS_TV_STANDARD = 2;
export const VP_FLAGS_FLICKER = 4;
export const VP_FLAGS_OVERSCAN = 8;
export const VP_FLAGS_MAX_UNSCALED = 16;
export const VP_FLAGS_POSITION = 32;
export const VP_FLAGS_BRIGHTNESS = 64;
export const VP_FLAGS_CONTRAST = 128;
export const VP_FLAGS_COPYPROTECT = 256;
export const VP_MODE_WIN_GRAPHICS = 1;
export const VP_MODE_TV_PLAYBACK = 2;
export const VP_TV_STANDARD_NTSC_M = 1;
export const VP_TV_STANDARD_NTSC_M_J = 2;
export const VP_TV_STANDARD_PAL_B = 4;
export const VP_TV_STANDARD_PAL_D = 8;
export const VP_TV_STANDARD_PAL_H = 16;
export const VP_TV_STANDARD_PAL_I = 32;
export const VP_TV_STANDARD_PAL_M = 64;
export const VP_TV_STANDARD_PAL_N = 128;
export const VP_TV_STANDARD_SECAM_B = 256;
export const VP_TV_STANDARD_SECAM_D = 512;
export const VP_TV_STANDARD_SECAM_G = 1024;
export const VP_TV_STANDARD_SECAM_H = 2048;
export const VP_TV_STANDARD_SECAM_K = 4096;
export const VP_TV_STANDARD_SECAM_K1 = 8192;
export const VP_TV_STANDARD_SECAM_L = 16384;
export const VP_TV_STANDARD_WIN_VGA = 32768;
export const VP_TV_STANDARD_NTSC_433 = 65536;
export const VP_TV_STANDARD_PAL_G = 131072;
export const VP_TV_STANDARD_PAL_60 = 262144;
export const VP_TV_STANDARD_SECAM_L1 = 524288;
export const VP_CP_TYPE_APS_TRIGGER = 1;
export const VP_CP_TYPE_MACROVISION = 2;
export const VP_CP_CMD_ACTIVATE = 1;
export const VP_CP_CMD_DEACTIVATE = 2;
export const VP_CP_CMD_CHANGE = 4;
export const ICVERSION = 260;
export const BI_1632 = 842217009;
export const ICERR_OK = 0;
export const ICERR_DONTDRAW = 1;
export const ICERR_NEWPALETTE = 2;
export const ICERR_GOTOKEYFRAME = 3;
export const ICERR_STOPDRAWING = 4;
export const ICERR_UNSUPPORTED = "-1";
export const ICERR_BADFORMAT = "-2";
export const ICERR_MEMORY = "-3";
export const ICERR_INTERNAL = "-4";
export const ICERR_BADFLAGS = "-5";
export const ICERR_BADPARAM = "-6";
export const ICERR_BADSIZE = "-7";
export const ICERR_BADHANDLE = "-8";
export const ICERR_CANTUPDATE = "-9";
export const ICERR_ABORT = "-10";
export const ICERR_ERROR = "-100";
export const ICERR_BADBITDEPTH = "-200";
export const ICERR_BADIMAGESIZE = "-201";
export const ICERR_CUSTOM = "-400";
export const ICMODE_COMPRESS = 1;
export const ICMODE_DECOMPRESS = 2;
export const ICMODE_FASTDECOMPRESS = 3;
export const ICMODE_QUERY = 4;
export const ICMODE_FASTCOMPRESS = 5;
export const ICMODE_DRAW = 8;
export const ICMODE_INTERNALF_FUNCTION32 = 32768;
export const ICMODE_INTERNALF_MASK = 32768;
export const AVIIF_TWOCC = 2;
export const ICQUALITY_LOW = 0;
export const ICQUALITY_HIGH = 10000;
export const ICQUALITY_DEFAULT = "-1";
export const ICM_USER = 16384;
export const ICM_RESERVED_LOW = 20480;
export const ICM_RESERVED_HIGH = 24576;
export const ICM_GETSTATE = 20480;
export const ICM_SETSTATE = 20481;
export const ICM_GETINFO = 20482;
export const ICM_CONFIGURE = 20490;
export const ICM_ABOUT = 20491;
export const ICM_GETERRORTEXT = 20492;
export const ICM_GETFORMATNAME = 20500;
export const ICM_ENUMFORMATS = 20501;
export const ICM_GETDEFAULTQUALITY = 20510;
export const ICM_GETQUALITY = 20511;
export const ICM_SETQUALITY = 20512;
export const ICM_SET = 20520;
export const ICM_GET = 20521;
export const ICM_COMPRESS_GET_FORMAT = 16388;
export const ICM_COMPRESS_GET_SIZE = 16389;
export const ICM_COMPRESS_QUERY = 16390;
export const ICM_COMPRESS_BEGIN = 16391;
export const ICM_COMPRESS = 16392;
export const ICM_COMPRESS_END = 16393;
export const ICM_DECOMPRESS_GET_FORMAT = 16394;
export const ICM_DECOMPRESS_QUERY = 16395;
export const ICM_DECOMPRESS_BEGIN = 16396;
export const ICM_DECOMPRESS = 16397;
export const ICM_DECOMPRESS_END = 16398;
export const ICM_DECOMPRESS_SET_PALETTE = 16413;
export const ICM_DECOMPRESS_GET_PALETTE = 16414;
export const ICM_DRAW_QUERY = 16415;
export const ICM_DRAW_BEGIN = 16399;
export const ICM_DRAW_GET_PALETTE = 16400;
export const ICM_DRAW_UPDATE = 16401;
export const ICM_DRAW_START = 16402;
export const ICM_DRAW_STOP = 16403;
export const ICM_DRAW_BITS = 16404;
export const ICM_DRAW_END = 16405;
export const ICM_DRAW_GETTIME = 16416;
export const ICM_DRAW = 16417;
export const ICM_DRAW_WINDOW = 16418;
export const ICM_DRAW_SETTIME = 16419;
export const ICM_DRAW_REALIZE = 16420;
export const ICM_DRAW_FLUSH = 16421;
export const ICM_DRAW_RENDERBUFFER = 16422;
export const ICM_DRAW_START_PLAY = 16423;
export const ICM_DRAW_STOP_PLAY = 16424;
export const ICM_DRAW_SUGGESTFORMAT = 16434;
export const ICM_DRAW_CHANGEPALETTE = 16435;
export const ICM_DRAW_IDLE = 16436;
export const ICM_GETBUFFERSWANTED = 16425;
export const ICM_GETDEFAULTKEYFRAMERATE = 16426;
export const ICM_DECOMPRESSEX_BEGIN = 16444;
export const ICM_DECOMPRESSEX_QUERY = 16445;
export const ICM_DECOMPRESSEX = 16446;
export const ICM_DECOMPRESSEX_END = 16447;
export const ICM_COMPRESS_FRAMES_INFO = 16454;
export const ICM_COMPRESS_FRAMES = 16455;
export const ICM_SET_STATUS_PROC = 16456;
export const VIDCF_QUALITY = 1;
export const VIDCF_CRUNCH = 2;
export const VIDCF_TEMPORAL = 4;
export const VIDCF_COMPRESSFRAMES = 8;
export const VIDCF_DRAW = 16;
export const VIDCF_FASTTEMPORALC = 32;
export const VIDCF_FASTTEMPORALD = 128;
export const ICCOMPRESS_KEYFRAME = 1;
export const ICCOMPRESSFRAMES_PADDING = 1;
export const ICSTATUS_START = 0;
export const ICSTATUS_STATUS = 1;
export const ICSTATUS_END = 2;
export const ICSTATUS_ERROR = 3;
export const ICSTATUS_YIELD = 4;
export const ICDECOMPRESS_HURRYUP = "-2147483648";
export const ICDECOMPRESS_UPDATE = 1073741824;
export const ICDECOMPRESS_PREROLL = 536870912;
export const ICDECOMPRESS_NULLFRAME = 268435456;
export const ICDECOMPRESS_NOTKEYFRAME = 134217728;
export const ICDRAW_QUERY = 1;
export const ICDRAW_FULLSCREEN = 2;
export const ICDRAW_HDC = 4;
export const ICDRAW_ANIMATE = 8;
export const ICDRAW_CONTINUE = 16;
export const ICDRAW_MEMORYDC = 32;
export const ICDRAW_UPDATING = 64;
export const ICDRAW_RENDER = 128;
export const ICDRAW_BUFFER = 256;
export const ICDRAW_HURRYUP = "-2147483648";
export const ICDRAW_UPDATE = 1073741824;
export const ICDRAW_PREROLL = 536870912;
export const ICDRAW_NULLFRAME = 268435456;
export const ICDRAW_NOTKEYFRAME = 134217728;
export const ICINSTALL_UNICODE = 32768;
export const ICINSTALL_FUNCTION = 1;
export const ICINSTALL_DRIVER = 2;
export const ICINSTALL_HDRV = 4;
export const ICINSTALL_DRIVERW = 32770;
export const ICMF_CONFIGURE_QUERY = 1;
export const ICMF_ABOUT_QUERY = 1;
export const ICMF_COMPVARS_VALID = 1;
export const ICMF_CHOOSE_KEYFRAME = 1;
export const ICMF_CHOOSE_DATARATE = 2;
export const ICMF_CHOOSE_PREVIEW = 4;
export const ICMF_CHOOSE_ALLCOMPRESSORS = 8;
export const DDF_0001 = 1;
export const DDF_UPDATE = 2;
export const DDF_SAME_HDC = 4;
export const DDF_SAME_DRAW = 8;
export const DDF_DONTDRAW = 16;
export const DDF_ANIMATE = 32;
export const DDF_BUFFER = 64;
export const DDF_JUSTDRAWIT = 128;
export const DDF_FULLSCREEN = 256;
export const DDF_BACKGROUNDPAL = 512;
export const DDF_NOTKEYFRAME = 1024;
export const DDF_HURRYUP = 2048;
export const DDF_HALFTONE = 4096;
export const DDF_2000 = 8192;
export const DDF_PREROLL = 16;
export const DDF_SAME_DIB = 8;
export const DDF_SAME_SIZE = 8;
export const PD_CAN_DRAW_DIB = 1;
export const PD_CAN_STRETCHDIB = 2;
export const PD_STRETCHDIB_1_1_OK = 4;
export const PD_STRETCHDIB_1_2_OK = 8;
export const PD_STRETCHDIB_1_N_OK = 16;
export const AVIGETFRAMEF_BESTDISPLAYFMT = 1;
export const AVISTREAMINFO_DISABLED = 1;
export const AVISTREAMINFO_FORMATCHANGES = 65536;
export const AVIFILEINFO_HASINDEX = 16;
export const AVIFILEINFO_MUSTUSEINDEX = 32;
export const AVIFILEINFO_ISINTERLEAVED = 256;
export const AVIFILEINFO_WASCAPTUREFILE = 65536;
export const AVIFILEINFO_COPYRIGHTED = 131072;
export const AVIFILECAPS_CANREAD = 1;
export const AVIFILECAPS_CANWRITE = 2;
export const AVIFILECAPS_ALLKEYFRAMES = 16;
export const AVIFILECAPS_NOCOMPRESSION = 32;
export const AVICOMPRESSF_INTERLEAVE = 1;
export const AVICOMPRESSF_DATARATE = 2;
export const AVICOMPRESSF_KEYFRAMES = 4;
export const AVICOMPRESSF_VALID = 8;
export const AVIFILEHANDLER_CANREAD = 1;
export const AVIFILEHANDLER_CANWRITE = 2;
export const AVIFILEHANDLER_CANACCEPTNONRGB = 4;
export const AVISTREAMREAD_CONVENIENT = "-1";
export const FIND_DIR = 15;
export const FIND_NEXT = 1;
export const FIND_PREV = 4;
export const FIND_FROM_START = 8;
export const FIND_TYPE = 240;
export const FIND_KEY = 16;
export const FIND_ANY = 32;
export const FIND_FORMAT = 64;
export const FIND_RET = 61440;
export const FIND_POS = 0;
export const FIND_LENGTH = 4096;
export const FIND_OFFSET = 8192;
export const FIND_SIZE = 12288;
export const FIND_INDEX = 16384;
export const SEARCH_NEAREST = 4;
export const SEARCH_BACKWARD = 4;
export const SEARCH_FORWARD = 1;
export const SEARCH_KEY = 16;
export const SEARCH_ANY = 32;
export const AVIERR_OK = 0;
export const MCIWNDOPENF_NEW = 1;
export const MCIWNDF_NOAUTOSIZEWINDOW = 1;
export const MCIWNDF_NOPLAYBAR = 2;
export const MCIWNDF_NOAUTOSIZEMOVIE = 4;
export const MCIWNDF_NOMENU = 8;
export const MCIWNDF_SHOWNAME = 16;
export const MCIWNDF_SHOWPOS = 32;
export const MCIWNDF_SHOWMODE = 64;
export const MCIWNDF_SHOWALL = 112;
export const MCIWNDF_NOTIFYMODE = 256;
export const MCIWNDF_NOTIFYPOS = 512;
export const MCIWNDF_NOTIFYSIZE = 1024;
export const MCIWNDF_NOTIFYERROR = 4096;
export const MCIWNDF_NOTIFYALL = 7936;
export const MCIWNDF_NOTIFYANSI = 128;
export const MCIWNDF_NOTIFYMEDIAA = 2176;
export const MCIWNDF_NOTIFYMEDIAW = 2048;
export const MCIWNDF_NOTIFYMEDIA = 2048;
export const MCIWNDF_RECORD = 8192;
export const MCIWNDF_NOERRORDLG = 16384;
export const MCIWNDF_NOOPEN = 32768;
export const MCIWNDM_GETDEVICEID = 1124;
export const MCIWNDM_GETSTART = 1127;
export const MCIWNDM_GETLENGTH = 1128;
export const MCIWNDM_GETEND = 1129;
export const MCIWNDM_EJECT = 1131;
export const MCIWNDM_SETZOOM = 1132;
export const MCIWNDM_GETZOOM = 1133;
export const MCIWNDM_SETVOLUME = 1134;
export const MCIWNDM_GETVOLUME = 1135;
export const MCIWNDM_SETSPEED = 1136;
export const MCIWNDM_GETSPEED = 1137;
export const MCIWNDM_SETREPEAT = 1138;
export const MCIWNDM_GETREPEAT = 1139;
export const MCIWNDM_REALIZE = 1142;
export const MCIWNDM_VALIDATEMEDIA = 1145;
export const MCIWNDM_PLAYFROM = 1146;
export const MCIWNDM_PLAYTO = 1147;
export const MCIWNDM_GETPALETTE = 1150;
export const MCIWNDM_SETPALETTE = 1151;
export const MCIWNDM_SETTIMERS = 1153;
export const MCIWNDM_SETACTIVETIMER = 1154;
export const MCIWNDM_SETINACTIVETIMER = 1155;
export const MCIWNDM_GETACTIVETIMER = 1156;
export const MCIWNDM_GETINACTIVETIMER = 1157;
export const MCIWNDM_CHANGESTYLES = 1159;
export const MCIWNDM_GETSTYLES = 1160;
export const MCIWNDM_GETALIAS = 1161;
export const MCIWNDM_PLAYREVERSE = 1163;
export const MCIWNDM_GET_SOURCE = 1164;
export const MCIWNDM_PUT_SOURCE = 1165;
export const MCIWNDM_GET_DEST = 1166;
export const MCIWNDM_PUT_DEST = 1167;
export const MCIWNDM_CAN_PLAY = 1168;
export const MCIWNDM_CAN_WINDOW = 1169;
export const MCIWNDM_CAN_RECORD = 1170;
export const MCIWNDM_CAN_SAVE = 1171;
export const MCIWNDM_CAN_EJECT = 1172;
export const MCIWNDM_CAN_CONFIG = 1173;
export const MCIWNDM_PALETTEKICK = 1174;
export const MCIWNDM_OPENINTERFACE = 1175;
export const MCIWNDM_SETOWNER = 1176;
export const MCIWNDM_SENDSTRINGA = 1125;
export const MCIWNDM_GETPOSITIONA = 1126;
export const MCIWNDM_GETMODEA = 1130;
export const MCIWNDM_SETTIMEFORMATA = 1143;
export const MCIWNDM_GETTIMEFORMATA = 1144;
export const MCIWNDM_GETFILENAMEA = 1148;
export const MCIWNDM_GETDEVICEA = 1149;
export const MCIWNDM_GETERRORA = 1152;
export const MCIWNDM_NEWA = 1158;
export const MCIWNDM_RETURNSTRINGA = 1162;
export const MCIWNDM_OPENA = 1177;
export const MCIWNDM_SENDSTRINGW = 1225;
export const MCIWNDM_GETPOSITIONW = 1226;
export const MCIWNDM_GETMODEW = 1230;
export const MCIWNDM_SETTIMEFORMATW = 1243;
export const MCIWNDM_GETTIMEFORMATW = 1244;
export const MCIWNDM_GETFILENAMEW = 1248;
export const MCIWNDM_GETDEVICEW = 1249;
export const MCIWNDM_GETERRORW = 1252;
export const MCIWNDM_NEWW = 1258;
export const MCIWNDM_RETURNSTRINGW = 1262;
export const MCIWNDM_OPENW = 1276;
export const MCIWNDM_SENDSTRING = 1225;
export const MCIWNDM_GETPOSITION = 1226;
export const MCIWNDM_GETMODE = 1230;
export const MCIWNDM_SETTIMEFORMAT = 1243;
export const MCIWNDM_GETTIMEFORMAT = 1244;
export const MCIWNDM_GETFILENAME = 1248;
export const MCIWNDM_GETDEVICE = 1249;
export const MCIWNDM_GETERROR = 1252;
export const MCIWNDM_NEW = 1258;
export const MCIWNDM_RETURNSTRING = 1262;
export const MCIWNDM_OPEN = 1276;
export const MCIWNDM_NOTIFYMODE = 1224;
export const MCIWNDM_NOTIFYPOS = 1225;
export const MCIWNDM_NOTIFYSIZE = 1226;
export const MCIWNDM_NOTIFYMEDIA = 1227;
export const MCIWNDM_NOTIFYERROR = 1229;
export const MCIWND_START = "-1";
export const MCIWND_END = "-2";
export const MCI_OPEN = 2051;
export const MCI_CLOSE = 2052;
export const MCI_PLAY = 2054;
export const MCI_SEEK = 2055;
export const MCI_STOP = 2056;
export const MCI_PAUSE = 2057;
export const MCI_STEP = 2062;
export const MCI_RECORD = 2063;
export const MCI_SAVE = 2067;
export const MCI_CUT = 2129;
export const MCI_COPY = 2130;
export const MCI_PASTE = 2131;
export const MCI_RESUME = 2133;
export const MCI_DELETE = 2134;
export const MCI_MODE_NOT_READY = 524;
export const MCI_MODE_STOP = 525;
export const MCI_MODE_PLAY = 526;
export const MCI_MODE_RECORD = 527;
export const MCI_MODE_SEEK = 528;
export const MCI_MODE_PAUSE = 529;
export const MCI_MODE_OPEN = 530;
export const DV_ERR_OK = 0;
export const DV_ERR_BASE = 1;
export const DV_ERR_NONSPECIFIC = 1;
export const DV_ERR_BADFORMAT = 2;
export const DV_ERR_STILLPLAYING = 3;
export const DV_ERR_UNPREPARED = 4;
export const DV_ERR_SYNC = 5;
export const DV_ERR_TOOMANYCHANNELS = 6;
export const DV_ERR_NOTDETECTED = 7;
export const DV_ERR_BADINSTALL = 8;
export const DV_ERR_CREATEPALETTE = 9;
export const DV_ERR_SIZEFIELD = 10;
export const DV_ERR_PARAM1 = 11;
export const DV_ERR_PARAM2 = 12;
export const DV_ERR_CONFIG1 = 13;
export const DV_ERR_CONFIG2 = 14;
export const DV_ERR_FLAGS = 15;
export const DV_ERR_13 = 16;
export const DV_ERR_NOTSUPPORTED = 17;
export const DV_ERR_NOMEM = 18;
export const DV_ERR_ALLOCATED = 19;
export const DV_ERR_BADDEVICEID = 20;
export const DV_ERR_INVALHANDLE = 21;
export const DV_ERR_BADERRNUM = 22;
export const DV_ERR_NO_BUFFERS = 23;
export const DV_ERR_MEM_CONFLICT = 24;
export const DV_ERR_IO_CONFLICT = 25;
export const DV_ERR_DMA_CONFLICT = 26;
export const DV_ERR_INT_CONFLICT = 27;
export const DV_ERR_PROTECT_ONLY = 28;
export const DV_ERR_LASTERROR = 28;
export const DV_ERR_USER_MSG = 1001;
export const DV_VM_OPEN = 976;
export const DV_VM_CLOSE = 977;
export const DV_VM_DATA = 978;
export const DV_VM_ERROR = 979;
export const VHDR_DONE = 1;
export const VHDR_PREPARED = 2;
export const VHDR_INQUEUE = 4;
export const VHDR_KEYFRAME = 8;
export const VHDR_VALID = 15;
export const VCAPS_OVERLAY = 1;
export const VCAPS_SRC_CAN_CLIP = 2;
export const VCAPS_DST_CAN_CLIP = 4;
export const VCAPS_CAN_SCALE = 8;
export const VIDEO_EXTERNALIN = 1;
export const VIDEO_EXTERNALOUT = 2;
export const VIDEO_IN = 4;
export const VIDEO_OUT = 8;
export const VIDEO_DLG_QUERY = 16;
export const VIDEO_CONFIGURE_QUERY = 32768;
export const VIDEO_CONFIGURE_SET = 4096;
export const VIDEO_CONFIGURE_GET = 8192;
export const VIDEO_CONFIGURE_QUERYSIZE = 1;
export const VIDEO_CONFIGURE_CURRENT = 16;
export const VIDEO_CONFIGURE_NOMINAL = 32;
export const VIDEO_CONFIGURE_MIN = 64;
export const VIDEO_CONFIGURE_MAX = 128;
export const DVM_USER = 16384;
export const DVM_CONFIGURE_START = 4096;
export const DVM_CONFIGURE_END = 8191;
export const DVM_PALETTE = 4097;
export const DVM_FORMAT = 4098;
export const DVM_PALETTERGB555 = 4099;
export const DVM_SRC_RECT = 4100;
export const DVM_DST_RECT = 4101;
export const WM_CAP_UNICODE_START = 1124;
export const WM_CAP_GET_CAPSTREAMPTR = 1025;
export const WM_CAP_SET_CALLBACK_ERRORW = 1126;
export const WM_CAP_SET_CALLBACK_STATUSW = 1127;
export const WM_CAP_SET_CALLBACK_ERRORA = 1026;
export const WM_CAP_SET_CALLBACK_STATUSA = 1027;
export const WM_CAP_SET_CALLBACK_ERROR = 1126;
export const WM_CAP_SET_CALLBACK_STATUS = 1127;
export const WM_CAP_SET_CALLBACK_YIELD = 1028;
export const WM_CAP_SET_CALLBACK_FRAME = 1029;
export const WM_CAP_SET_CALLBACK_VIDEOSTREAM = 1030;
export const WM_CAP_SET_CALLBACK_WAVESTREAM = 1031;
export const WM_CAP_GET_USER_DATA = 1032;
export const WM_CAP_SET_USER_DATA = 1033;
export const WM_CAP_DRIVER_CONNECT = 1034;
export const WM_CAP_DRIVER_DISCONNECT = 1035;
export const WM_CAP_DRIVER_GET_NAMEA = 1036;
export const WM_CAP_DRIVER_GET_VERSIONA = 1037;
export const WM_CAP_DRIVER_GET_NAMEW = 1136;
export const WM_CAP_DRIVER_GET_VERSIONW = 1137;
export const WM_CAP_DRIVER_GET_NAME = 1136;
export const WM_CAP_DRIVER_GET_VERSION = 1137;
export const WM_CAP_DRIVER_GET_CAPS = 1038;
export const WM_CAP_FILE_SET_CAPTURE_FILEA = 1044;
export const WM_CAP_FILE_GET_CAPTURE_FILEA = 1045;
export const WM_CAP_FILE_SAVEASA = 1047;
export const WM_CAP_FILE_SAVEDIBA = 1049;
export const WM_CAP_FILE_SET_CAPTURE_FILEW = 1144;
export const WM_CAP_FILE_GET_CAPTURE_FILEW = 1145;
export const WM_CAP_FILE_SAVEASW = 1147;
export const WM_CAP_FILE_SAVEDIBW = 1149;
export const WM_CAP_FILE_SET_CAPTURE_FILE = 1144;
export const WM_CAP_FILE_GET_CAPTURE_FILE = 1145;
export const WM_CAP_FILE_SAVEAS = 1147;
export const WM_CAP_FILE_SAVEDIB = 1149;
export const WM_CAP_FILE_ALLOCATE = 1046;
export const WM_CAP_FILE_SET_INFOCHUNK = 1048;
export const WM_CAP_EDIT_COPY = 1054;
export const WM_CAP_SET_AUDIOFORMAT = 1059;
export const WM_CAP_GET_AUDIOFORMAT = 1060;
export const WM_CAP_DLG_VIDEOFORMAT = 1065;
export const WM_CAP_DLG_VIDEOSOURCE = 1066;
export const WM_CAP_DLG_VIDEODISPLAY = 1067;
export const WM_CAP_GET_VIDEOFORMAT = 1068;
export const WM_CAP_SET_VIDEOFORMAT = 1069;
export const WM_CAP_DLG_VIDEOCOMPRESSION = 1070;
export const WM_CAP_SET_PREVIEW = 1074;
export const WM_CAP_SET_OVERLAY = 1075;
export const WM_CAP_SET_PREVIEWRATE = 1076;
export const WM_CAP_SET_SCALE = 1077;
export const WM_CAP_GET_STATUS = 1078;
export const WM_CAP_SET_SCROLL = 1079;
export const WM_CAP_GRAB_FRAME = 1084;
export const WM_CAP_GRAB_FRAME_NOSTOP = 1085;
export const WM_CAP_SEQUENCE = 1086;
export const WM_CAP_SEQUENCE_NOFILE = 1087;
export const WM_CAP_SET_SEQUENCE_SETUP = 1088;
export const WM_CAP_GET_SEQUENCE_SETUP = 1089;
export const WM_CAP_SET_MCI_DEVICEA = 1090;
export const WM_CAP_GET_MCI_DEVICEA = 1091;
export const WM_CAP_SET_MCI_DEVICEW = 1190;
export const WM_CAP_GET_MCI_DEVICEW = 1191;
export const WM_CAP_SET_MCI_DEVICE = 1190;
export const WM_CAP_GET_MCI_DEVICE = 1191;
export const WM_CAP_STOP = 1092;
export const WM_CAP_ABORT = 1093;
export const WM_CAP_SINGLE_FRAME_OPEN = 1094;
export const WM_CAP_SINGLE_FRAME_CLOSE = 1095;
export const WM_CAP_SINGLE_FRAME = 1096;
export const WM_CAP_PAL_OPENA = 1104;
export const WM_CAP_PAL_SAVEA = 1105;
export const WM_CAP_PAL_OPENW = 1204;
export const WM_CAP_PAL_SAVEW = 1205;
export const WM_CAP_PAL_OPEN = 1204;
export const WM_CAP_PAL_SAVE = 1205;
export const WM_CAP_PAL_PASTE = 1106;
export const WM_CAP_PAL_AUTOCREATE = 1107;
export const WM_CAP_PAL_MANUALCREATE = 1108;
export const WM_CAP_SET_CALLBACK_CAPCONTROL = 1109;
export const WM_CAP_UNICODE_END = 1205;
export const WM_CAP_END = 1205;
export const AVSTREAMMASTER_AUDIO = 0;
export const AVSTREAMMASTER_NONE = 1;
export const CONTROLCALLBACK_PREROLL = 1;
export const CONTROLCALLBACK_CAPTURING = 2;
export const IDS_CAP_BEGIN = 300;
export const IDS_CAP_END = 301;
export const IDS_CAP_INFO = 401;
export const IDS_CAP_OUTOFMEM = 402;
export const IDS_CAP_FILEEXISTS = 403;
export const IDS_CAP_ERRORPALOPEN = 404;
export const IDS_CAP_ERRORPALSAVE = 405;
export const IDS_CAP_ERRORDIBSAVE = 406;
export const IDS_CAP_DEFAVIEXT = 407;
export const IDS_CAP_DEFPALEXT = 408;
export const IDS_CAP_CANTOPEN = 409;
export const IDS_CAP_SEQ_MSGSTART = 410;
export const IDS_CAP_SEQ_MSGSTOP = 411;
export const IDS_CAP_VIDEDITERR = 412;
export const IDS_CAP_READONLYFILE = 413;
export const IDS_CAP_WRITEERROR = 414;
export const IDS_CAP_NODISKSPACE = 415;
export const IDS_CAP_SETFILESIZE = 416;
export const IDS_CAP_SAVEASPERCENT = 417;
export const IDS_CAP_DRIVER_ERROR = 418;
export const IDS_CAP_WAVE_OPEN_ERROR = 419;
export const IDS_CAP_WAVE_ALLOC_ERROR = 420;
export const IDS_CAP_WAVE_PREPARE_ERROR = 421;
export const IDS_CAP_WAVE_ADD_ERROR = 422;
export const IDS_CAP_WAVE_SIZE_ERROR = 423;
export const IDS_CAP_VIDEO_OPEN_ERROR = 424;
export const IDS_CAP_VIDEO_ALLOC_ERROR = 425;
export const IDS_CAP_VIDEO_PREPARE_ERROR = 426;
export const IDS_CAP_VIDEO_ADD_ERROR = 427;
export const IDS_CAP_VIDEO_SIZE_ERROR = 428;
export const IDS_CAP_FILE_OPEN_ERROR = 429;
export const IDS_CAP_FILE_WRITE_ERROR = 430;
export const IDS_CAP_RECORDING_ERROR = 431;
export const IDS_CAP_RECORDING_ERROR2 = 432;
export const IDS_CAP_AVI_INIT_ERROR = 433;
export const IDS_CAP_NO_FRAME_CAP_ERROR = 434;
export const IDS_CAP_NO_PALETTE_WARN = 435;
export const IDS_CAP_MCI_CONTROL_ERROR = 436;
export const IDS_CAP_MCI_CANT_STEP_ERROR = 437;
export const IDS_CAP_NO_AUDIO_CAP_ERROR = 438;
export const IDS_CAP_AVI_DRAWDIB_ERROR = 439;
export const IDS_CAP_COMPRESSOR_ERROR = 440;
export const IDS_CAP_AUDIO_DROP_ERROR = 441;
export const IDS_CAP_AUDIO_DROP_COMPERROR = 442;
export const IDS_CAP_STAT_LIVE_MODE = 500;
export const IDS_CAP_STAT_OVERLAY_MODE = 501;
export const IDS_CAP_STAT_CAP_INIT = 502;
export const IDS_CAP_STAT_CAP_FINI = 503;
export const IDS_CAP_STAT_PALETTE_BUILD = 504;
export const IDS_CAP_STAT_OPTPAL_BUILD = 505;
export const IDS_CAP_STAT_I_FRAMES = 506;
export const IDS_CAP_STAT_L_FRAMES = 507;
export const IDS_CAP_STAT_CAP_L_FRAMES = 508;
export const IDS_CAP_STAT_CAP_AUDIO = 509;
export const IDS_CAP_STAT_VIDEOCURRENT = 510;
export const IDS_CAP_STAT_VIDEOAUDIO = 511;
export const IDS_CAP_STAT_VIDEOONLY = 512;
export const IDS_CAP_STAT_FRAMESDROPPED = 513;
export const JOYERR_NOERROR = 0;
export const JOYERR_PARMS = 165;
export const JOYERR_NOCANDO = 166;
export const JOYERR_UNPLUGGED = 167;
export const JOY_BUTTON1 = 1;
export const JOY_BUTTON2 = 2;
export const JOY_BUTTON3 = 4;
export const JOY_BUTTON4 = 8;
export const JOY_BUTTON1CHG = 256;
export const JOY_BUTTON2CHG = 512;
export const JOY_BUTTON3CHG = 1024;
export const JOY_BUTTON4CHG = 2048;
export const JOY_BUTTON5 = 16;
export const JOY_BUTTON6 = 32;
export const JOY_BUTTON7 = 64;
export const JOY_BUTTON8 = 128;
export const JOY_BUTTON9 = 256;
export const JOY_BUTTON10 = 512;
export const JOY_BUTTON11 = 1024;
export const JOY_BUTTON12 = 2048;
export const JOY_BUTTON13 = 4096;
export const JOY_BUTTON14 = 8192;
export const JOY_BUTTON15 = 16384;
export const JOY_BUTTON16 = 32768;
export const JOY_BUTTON17 = 65536;
export const JOY_BUTTON18 = 131072;
export const JOY_BUTTON19 = 262144;
export const JOY_BUTTON20 = 524288;
export const JOY_BUTTON21 = 1048576;
export const JOY_BUTTON22 = 2097152;
export const JOY_BUTTON23 = 4194304;
export const JOY_BUTTON24 = 8388608;
export const JOY_BUTTON25 = 16777216;
export const JOY_BUTTON26 = 33554432;
export const JOY_BUTTON27 = 67108864;
export const JOY_BUTTON28 = 134217728;
export const JOY_BUTTON29 = 268435456;
export const JOY_BUTTON30 = 536870912;
export const JOY_BUTTON31 = 1073741824;
export const JOY_BUTTON32 = "-2147483648";
export const JOY_POVFORWARD = 0;
export const JOY_POVRIGHT = 9000;
export const JOY_POVBACKWARD = 18000;
export const JOY_POVLEFT = 27000;
export const JOY_RETURNX = 1;
export const JOY_RETURNY = 2;
export const JOY_RETURNZ = 4;
export const JOY_RETURNR = 8;
export const JOY_RETURNU = 16;
export const JOY_RETURNV = 32;
export const JOY_RETURNPOV = 64;
export const JOY_RETURNBUTTONS = 128;
export const JOY_RETURNRAWDATA = 256;
export const JOY_RETURNPOVCTS = 512;
export const JOY_RETURNCENTERED = 1024;
export const JOY_USEDEADZONE = 2048;
export const JOY_CAL_READALWAYS = 65536;
export const JOY_CAL_READXYONLY = 131072;
export const JOY_CAL_READ3 = 262144;
export const JOY_CAL_READ4 = 524288;
export const JOY_CAL_READXONLY = 1048576;
export const JOY_CAL_READYONLY = 2097152;
export const JOY_CAL_READ5 = 4194304;
export const JOY_CAL_READ6 = 8388608;
export const JOY_CAL_READZONLY = 16777216;
export const JOY_CAL_READRONLY = 33554432;
export const JOY_CAL_READUONLY = 67108864;
export const JOY_CAL_READVONLY = 134217728;
export const JOYSTICKID1 = 0;
export const JOYSTICKID2 = 1;
export const JOYCAPS_HASZ = 1;
export const JOYCAPS_HASR = 2;
export const JOYCAPS_HASU = 4;
export const JOYCAPS_HASV = 8;
export const JOYCAPS_HASPOV = 16;
export const JOYCAPS_POV4DIR = 32;
export const JOYCAPS_POVCTS = 64;
export const DRV_LOAD = 1;
export const DRV_ENABLE = 2;
export const DRV_OPEN = 3;
export const DRV_CLOSE = 4;
export const DRV_DISABLE = 5;
export const DRV_FREE = 6;
export const DRV_CONFIGURE = 7;
export const DRV_QUERYCONFIGURE = 8;
export const DRV_INSTALL = 9;
export const DRV_REMOVE = 10;
export const DRV_RESERVED = 2048;
export const DRV_USER = 16384;
export const DCB_NOSWITCH = 8;
export const DCB_TYPEMASK = 7;
export const DCB_NULL = 0;
export const DCB_WINDOW = 1;
export const DCB_TASK = 2;
export const DCB_FUNCTION = 3;
export const DCB_EVENT = 5;
export const DRVM_INIT = 100;
export const DRVM_EXIT = 101;
export const DRVM_DISABLE = 102;
export const DRVM_ENABLE = 103;
export const DRVM_INIT_EX = 104;
export const DRVM_USER = 16384;
export const DRVM_MAPPER_RECONFIGURE = 8193;
export const DRVM_MAPPER_PREFERRED_GET = 8213;
export const DRVM_MAPPER_CONSOLEVOICECOM_GET = 8215;
export const DRV_QUERYDEVNODE = 2050;
export const DRV_QUERYMAPPABLE = 2053;
export const DRV_QUERYMODULE = 2057;
export const DRV_PNPINSTALL = 2059;
export const DRV_QUERYDEVICEINTERFACE = 2060;
export const DRV_QUERYDEVICEINTERFACESIZE = 2061;
export const DRV_QUERYSTRINGID = 2062;
export const DRV_QUERYSTRINGIDSIZE = 2063;
export const DRV_QUERYIDFROMSTRINGID = 2064;
export const DRV_QUERYFUNCTIONINSTANCEID = 2065;
export const DRV_QUERYFUNCTIONINSTANCEIDSIZE = 2066;
export const DRVM_MAPPER_PREFERRED_FLAGS_PREFERREDONLY = 1;
export const DRVM_IOCTL = 256;
export const DRVM_ADD_THRU = 257;
export const DRVM_REMOVE_THRU = 258;
export const DRVM_IOCTL_LAST = 261;
export const DRVM_IOCTL_CMD_USER = 0;
export const DRVM_IOCTL_CMD_SYSTEM = "-2147483648";
export const VADMAD_Device_ID = 1092;
export const WODM_INIT = 100;
export const WIDM_INIT = 100;
export const WODM_INIT_EX = 104;
export const WIDM_INIT_EX = 104;
export const WODM_GETNUMDEVS = 3;
export const WODM_GETDEVCAPS = 4;
export const WODM_OPEN = 5;
export const WODM_CLOSE = 6;
export const WODM_PREPARE = 7;
export const WODM_UNPREPARE = 8;
export const WODM_WRITE = 9;
export const WODM_PAUSE = 10;
export const WODM_RESTART = 11;
export const WODM_RESET = 12;
export const WODM_GETPOS = 13;
export const WODM_GETPITCH = 14;
export const WODM_SETPITCH = 15;
export const WODM_GETVOLUME = 16;
export const WODM_SETVOLUME = 17;
export const WODM_GETPLAYBACKRATE = 18;
export const WODM_SETPLAYBACKRATE = 19;
export const WODM_BREAKLOOP = 20;
export const WODM_PREFERRED = 21;
export const WODM_BUSY = 21;
export const WIDM_GETNUMDEVS = 50;
export const WIDM_GETDEVCAPS = 51;
export const WIDM_OPEN = 52;
export const WIDM_CLOSE = 53;
export const WIDM_PREPARE = 54;
export const WIDM_UNPREPARE = 55;
export const WIDM_ADDBUFFER = 56;
export const WIDM_START = 57;
export const WIDM_STOP = 58;
export const WIDM_RESET = 59;
export const WIDM_GETPOS = 60;
export const WIDM_PREFERRED = 61;
export const MIDI_IO_PACKED = 0;
export const MIDI_IO_COOKED = 2;
export const MODM_GETNUMDEVS = 1;
export const MODM_GETDEVCAPS = 2;
export const MODM_OPEN = 3;
export const MODM_CLOSE = 4;
export const MODM_PREPARE = 5;
export const MODM_UNPREPARE = 6;
export const MODM_DATA = 7;
export const MODM_LONGDATA = 8;
export const MODM_RESET = 9;
export const MODM_GETVOLUME = 10;
export const MODM_SETVOLUME = 11;
export const MODM_CACHEPATCHES = 12;
export const MODM_CACHEDRUMPATCHES = 13;
export const MODM_STRMDATA = 14;
export const MODM_GETPOS = 17;
export const MODM_PAUSE = 18;
export const MODM_RESTART = 19;
export const MODM_STOP = 20;
export const MODM_PROPERTIES = 21;
export const MODM_PREFERRED = 22;
export const MODM_RECONFIGURE = 18280;
export const MIDM_GETNUMDEVS = 53;
export const MIDM_GETDEVCAPS = 54;
export const MIDM_OPEN = 55;
export const MIDM_CLOSE = 56;
export const MIDM_PREPARE = 57;
export const MIDM_UNPREPARE = 58;
export const MIDM_ADDBUFFER = 59;
export const MIDM_START = 60;
export const MIDM_STOP = 61;
export const MIDM_RESET = 62;
export const AUXM_INIT = 100;
export const AUXM_INIT_EX = 104;
export const AUXDM_GETNUMDEVS = 3;
export const AUXDM_GETDEVCAPS = 4;
export const AUXDM_GETVOLUME = 5;
export const AUXDM_SETVOLUME = 6;
export const MXDM_INIT = 100;
export const MXDM_INIT_EX = 104;
export const MXDM_USER = 16384;
export const MXDM_BASE = 1;
export const MXDM_GETNUMDEVS = 1;
export const MXDM_GETDEVCAPS = 2;
export const MXDM_OPEN = 3;
export const MXDM_CLOSE = 4;
export const MXDM_GETLINEINFO = 5;
export const MXDM_GETLINECONTROLS = 6;
export const MXDM_GETCONTROLDETAILS = 7;
export const MXDM_SETCONTROLDETAILS = 8;
export const TDD_KILLTIMEREVENT = 2048;
export const TDD_SETTIMEREVENT = 2052;
export const TDD_GETSYSTEMTIME = 2056;
export const TDD_GETDEVCAPS = 2060;
export const TDD_BEGINMINPERIOD = 2064;
export const TDD_ENDMINPERIOD = 2068;
export const JDD_GETNUMDEVS = 2049;
export const JDD_GETDEVCAPS = 2050;
export const JDD_GETPOS = 2305;
export const JDD_SETCALIBRATION = 2306;
export const JDD_CONFIGCHANGED = 2307;
export const JDD_GETPOSEX = 2308;
export const MCI_OPEN_DRIVER = 2049;
export const MCI_CLOSE_DRIVER = 2050;
export const MCI_FALSE = 531;
export const MCI_TRUE = 532;
export const MCI_FORMAT_MILLISECONDS_S = 533;
export const MCI_FORMAT_HMS_S = 534;
export const MCI_FORMAT_MSF_S = 535;
export const MCI_FORMAT_FRAMES_S = 536;
export const MCI_FORMAT_SMPTE_24_S = 537;
export const MCI_FORMAT_SMPTE_25_S = 538;
export const MCI_FORMAT_SMPTE_30_S = 539;
export const MCI_FORMAT_SMPTE_30DROP_S = 540;
export const MCI_FORMAT_BYTES_S = 541;
export const MCI_FORMAT_SAMPLES_S = 542;
export const MCI_FORMAT_TMSF_S = 543;
export const MCI_VD_FORMAT_TRACK_S = 1029;
export const WAVE_FORMAT_PCM_S = 1152;
export const WAVE_MAPPER_S = 1153;
export const MCI_SEQ_MAPPER_S = 1221;
export const MCI_SEQ_FILE_S = 1222;
export const MCI_SEQ_MIDI_S = 1223;
export const MCI_SEQ_SMPTE_S = 1224;
export const MCI_SEQ_FORMAT_SONGPTR_S = 1225;
export const MCI_SEQ_NONE_S = 1226;
export const MIDIMAPPER_S = 1227;
export const MCI_MAX_DEVICE_TYPE_LENGTH = 80;
export const MCI_RESOURCE_RETURNED = 65536;
export const MCI_COLONIZED3_RETURN = 131072;
export const MCI_COLONIZED4_RETURN = 262144;
export const MCI_INTEGER_RETURNED = 524288;
export const MCI_RESOURCE_DRIVER = 1048576;
export const MCI_COMMAND_HEAD = 0;
export const MCI_STRING = 1;
export const MCI_INTEGER = 2;
export const MCI_END_COMMAND = 3;
export const MCI_RETURN = 4;
export const MCI_FLAG = 5;
export const MCI_END_COMMAND_LIST = 6;
export const MCI_RECT = 7;
export const MCI_CONSTANT = 8;
export const MCI_END_CONSTANT = 9;
export const MCI_HWND = 10;
export const MCI_HPAL = 11;
export const MCI_HDC = 12;
export const MCI_INTEGER64 = 13;
export const TASKERR_NOTASKSUPPORT = 1;
export const TASKERR_OUTOFMEMORY = 2;
export const DRV_EXITSESSION = 11;
export const DRV_POWER = 15;
export const DRVCNF_CANCEL = 0;
export const DRVCNF_OK = 1;
export const DRVCNF_RESTART = 2;
export const DRV_CANCEL = 0;
export const DRV_OK = 1;
export const DRV_RESTART = 2;
export const DRV_MCI_LAST = 6143;
export const MMIOERR_BASE = 256;
export const MMIOERR_FILENOTFOUND = 257;
export const MMIOERR_OUTOFMEMORY = 258;
export const MMIOERR_CANNOTOPEN = 259;
export const MMIOERR_CANNOTCLOSE = 260;
export const MMIOERR_CANNOTREAD = 261;
export const MMIOERR_CANNOTWRITE = 262;
export const MMIOERR_CANNOTSEEK = 263;
export const MMIOERR_CANNOTEXPAND = 264;
export const MMIOERR_CHUNKNOTFOUND = 265;
export const MMIOERR_UNBUFFERED = 266;
export const MMIOERR_PATHNOTFOUND = 267;
export const MMIOERR_ACCESSDENIED = 268;
export const MMIOERR_SHARINGVIOLATION = 269;
export const MMIOERR_NETWORKERROR = 270;
export const MMIOERR_TOOMANYOPENFILES = 271;
export const MMIOERR_INVALIDFILE = 272;
export const MMIO_RWMODE = 3;
export const MMIO_SHAREMODE = 112;
export const MMIO_CREATE = 4096;
export const MMIO_PARSE = 256;
export const MMIO_DELETE = 512;
export const MMIO_EXIST = 16384;
export const MMIO_ALLOCBUF = 65536;
export const MMIO_GETTEMP = 131072;
export const MMIO_DIRTY = 268435456;
export const MMIO_READ = 0;
export const MMIO_WRITE = 1;
export const MMIO_READWRITE = 2;
export const MMIO_COMPAT = 0;
export const MMIO_EXCLUSIVE = 16;
export const MMIO_DENYWRITE = 32;
export const MMIO_DENYREAD = 48;
export const MMIO_DENYNONE = 64;
export const MMIO_FHOPEN = 16;
export const MMIO_EMPTYBUF = 16;
export const MMIO_TOUPPER = 16;
export const MMIO_INSTALLPROC = 65536;
export const MMIO_GLOBALPROC = 268435456;
export const MMIO_REMOVEPROC = 131072;
export const MMIO_UNICODEPROC = 16777216;
export const MMIO_FINDPROC = 262144;
export const MMIO_FINDCHUNK = 16;
export const MMIO_FINDRIFF = 32;
export const MMIO_FINDLIST = 64;
export const MMIO_CREATERIFF = 32;
export const MMIO_CREATELIST = 64;
export const MMIOM_READ = 0;
export const MMIOM_WRITE = 1;
export const MMIOM_SEEK = 2;
export const MMIOM_OPEN = 3;
export const MMIOM_CLOSE = 4;
export const MMIOM_WRITEFLUSH = 5;
export const MMIOM_RENAME = 6;
export const MMIOM_USER = 32768;
export const SEEK_SET = 0;
export const SEEK_CUR = 1;
export const SEEK_END = 2;
export const MMIO_DEFAULTBUFFER = 8192;
export const FACILITY_NS = 13;
export const MCI_MCIAVI_PLAY_WINDOW = 16777216;
export const MCI_MCIAVI_PLAY_FULLSCREEN = 33554432;
export const MCI_MCIAVI_PLAY_FULLBY2 = 67108864;
export const MCI_AVI_STATUS_FRAMES_SKIPPED = 32769;
export const MCI_AVI_STATUS_LAST_PLAY_SPEED = 32770;
export const MCI_AVI_STATUS_AUDIO_BREAKS = 32771;
export const MCI_AVI_SETVIDEO_DRAW_PROCEDURE = 32768;
export const MCI_AVI_SETVIDEO_PALETTE_COLOR = 33024;
export const MCI_AVI_SETVIDEO_PALETTE_HALFTONE = 65535;
export const MCIERR_AVI_OLDAVIFORMAT = 612;
export const MCIERR_AVI_NOTINTERLEAVED = 613;
export const MCIERR_AVI_NODISPDIB = 614;
export const MCIERR_AVI_CANTPLAYFULLSCREEN = 615;
export const MCIERR_AVI_TOOBIGFORVGA = 616;
export const MCIERR_AVI_NOCOMPRESSOR = 617;
export const MCIERR_AVI_DISPLAYERROR = 618;
export const MCIERR_AVI_AUDIOERROR = 619;
export const MCIERR_AVI_BADPALETTE = 620;
export const DLG_ACMFORMATCHOOSE_ID = 70;
export const IDD_ACMFORMATCHOOSE_BTN_HELP = 9;
export const IDD_ACMFORMATCHOOSE_CMB_CUSTOM = 100;
export const IDD_ACMFORMATCHOOSE_CMB_FORMATTAG = 101;
export const IDD_ACMFORMATCHOOSE_CMB_FORMAT = 102;
export const IDD_ACMFORMATCHOOSE_BTN_SETNAME = 103;
export const IDD_ACMFORMATCHOOSE_BTN_DELNAME = 104;
export const DLG_ACMFILTERCHOOSE_ID = 71;
export const IDD_ACMFILTERCHOOSE_BTN_HELP = 9;
export const IDD_ACMFILTERCHOOSE_CMB_CUSTOM = 100;
export const IDD_ACMFILTERCHOOSE_CMB_FILTERTAG = 101;
export const IDD_ACMFILTERCHOOSE_CMB_FILTER = 102;
export const IDD_ACMFILTERCHOOSE_BTN_SETNAME = 103;
export const IDD_ACMFILTERCHOOSE_BTN_DELNAME = 104;
export const FACILITY_NS_WIN32 = 7;
export const NS_S_CALLPENDING = 936749839185412096n;
export const NS_S_CALLABORTED = 936750938697039873n;
export const NS_S_STREAM_TRUNCATED = 936752038208667650n;
export const NS_W_SERVER_BANDWIDTH_LIMIT = 936753139867779075n;
export const NS_W_FILE_BANDWIDTH_LIMIT = 936754239379406852n;
export const NS_E_NOCONNECTION = 936755339964776453n;
export const NS_E_CANNOTCONNECT = 936756439476404230n;
export const NS_E_CANNOTDESTROYTITLE = 936757538988032007n;
export const NS_E_CANNOTRENAMETITLE = 936758638499659784n;
export const NS_E_CANNOTOFFLINEDISK = 936759738011287561n;
export const NS_E_CANNOTONLINEDISK = 936760837522915338n;
export const NS_E_NOREGISTEREDWALKER = 936761937034543115n;
export const NS_E_NOFUNNEL = 936763036546170892n;
export const NS_E_NO_LOCALPLAY = 936764136057798669n;
export const NS_E_NETWORK_BUSY = 936765235569426446n;
export const NS_E_TOO_MANY_SESS = 936766335081054223n;
export const NS_E_ALREADY_CONNECTED = 936767434592682000n;
export const NS_E_INVALID_INDEX = 936768534104309777n;
export const NS_E_PROTOCOL_MISMATCH = 936769633615937554n;
export const NS_E_TIMEOUT = 936770733127565331n;
export const NS_E_NET_WRITE = 936771832639193108n;
export const NS_E_NET_READ = 936772932150820885n;
export const NS_E_DISK_WRITE = 936774031662448662n;
export const NS_E_DISK_READ = 936775131174076439n;
export const NS_E_FILE_WRITE = 936776230685704216n;
export const NS_E_FILE_READ = 936777330197331993n;
export const NS_E_FILE_NOT_FOUND = 936778429708959770n;
export const NS_E_FILE_EXISTS = 936779529220587547n;
export const NS_E_INVALID_NAME = 936780628732215324n;
export const NS_E_FILE_OPEN_FAILED = 936781728243843101n;
export const NS_E_FILE_ALLOCATION_FAILED = 936782827755470878n;
export const NS_E_FILE_INIT_FAILED = 936783927267098655n;
export const NS_E_FILE_PLAY_FAILED = 936785026778726432n;
export const NS_E_SET_DISK_UID_FAILED = 936786126290354209n;
export const NS_E_INDUCED = 936787225801981986n;
export const NS_E_CCLINK_DOWN = 936788325313609763n;
export const NS_E_INTERNAL = 936789424825237540n;
export const NS_E_BUSY = 936790524336865317n;
export const NS_E_UNRECOGNIZED_STREAM_TYPE = 936791623848493094n;
export const NS_E_NETWORK_SERVICE_FAILURE = 936792723360120871n;
export const NS_E_NETWORK_RESOURCE_FAILURE = 936793822871748648n;
export const NS_E_CONNECTION_FAILURE = 936794922383376425n;
export const NS_E_SHUTDOWN = 936796021895004202n;
export const NS_E_INVALID_REQUEST = 936797121406631979n;
export const NS_E_INSUFFICIENT_BANDWIDTH = 936798220918259756n;
export const NS_E_NOT_REBUILDING = 936799320429887533n;
export const NS_E_LATE_OPERATION = 936800419941515310n;
export const NS_E_INVALID_DATA = 936801519453143087n;
export const NS_E_FILE_BANDWIDTH_LIMIT = 936802618964770864n;
export const NS_E_OPEN_FILE_LIMIT = 936803718476398641n;
export const NS_E_BAD_CONTROL_DATA = 936804817988026418n;
export const NS_E_NO_STREAM = 936805917499654195n;
export const NS_E_STREAM_END = 936807017011281972n;
export const NS_E_SERVER_NOT_FOUND = 936808116522909749n;
export const NS_E_DUPLICATE_NAME = 936809216034537526n;
export const NS_E_DUPLICATE_ADDRESS = 936810315546165303n;
export const NS_E_BAD_MULTICAST_ADDRESS = 936811415057793080n;
export const NS_E_BAD_ADAPTER_ADDRESS = 936812514569420857n;
export const NS_E_BAD_DELIVERY_MODE = 936813614081048634n;
export const NS_E_INVALID_CHANNEL = 936814713592676411n;
export const NS_E_INVALID_STREAM = 936815813104304188n;
export const NS_E_INVALID_ARCHIVE = 936816912615931965n;
export const NS_E_NOTITLES = 936818012127559742n;
export const NS_E_INVALID_CLIENT = 936819111639187519n;
export const NS_E_INVALID_BLACKHOLE_ADDRESS = 936820211150815296n;
export const NS_E_INCOMPATIBLE_FORMAT = 936821310662443073n;
export const NS_E_INVALID_KEY = 936822410174070850n;
export const NS_E_INVALID_PORT = 936823509685698627n;
export const NS_E_INVALID_TTL = 936824609197326404n;
export const NS_E_STRIDE_REFUSED = 936825708708954181n;
export const NS_E_MMSAUTOSERVER_CANTFINDWALKER = 936826808220581958n;
export const NS_E_MAX_BITRATE = 936827907732209735n;
export const NS_E_LOGFILEPERIOD = 936829007243837512n;
export const NS_E_MAX_CLIENTS = 936830106755465289n;
export const NS_E_LOG_FILE_SIZE = 936831206267093066n;
export const NS_E_MAX_FILERATE = 936832305778720843n;
export const NS_E_WALKER_UNKNOWN = 936833405290348620n;
export const NS_E_WALKER_SERVER = 936834504801976397n;
export const NS_E_WALKER_USAGE = 936835604313604174n;
export const NS_I_TIGER_START = 936836701677748303n;
export const NS_E_TIGER_FAIL = 936837803336859728n;
export const NS_I_CUB_START = 936838900701003857n;
export const NS_I_CUB_RUNNING = 936840000212631634n;
export const NS_E_CUB_FAIL = 936841101871743059n;
export const NS_I_DISK_START = 936842199235887188n;
export const NS_E_DISK_FAIL = 936843300894998613n;
export const NS_I_DISK_REBUILD_STARTED = 936844398259142742n;
export const NS_I_DISK_REBUILD_FINISHED = 936845497770770519n;
export const NS_I_DISK_REBUILD_ABORTED = 936846597282398296n;
export const NS_I_LIMIT_FUNNELS = 936847696794026073n;
export const NS_I_START_DISK = 936848796305653850n;
export const NS_I_STOP_DISK = 936849895817281627n;
export const NS_I_STOP_CUB = 936850995328909404n;
export const NS_I_KILL_USERSESSION = 936852094840537181n;
export const NS_I_KILL_CONNECTION = 936853194352164958n;
export const NS_I_REBUILD_DISK = 936854293863792735n;
export const NS_W_UNKNOWN_EVENT = 936854294937534560n;
export const NS_E_MAX_FUNNELS_ALERT = 936855395522904160n;
export const NS_E_ALLOCATE_FILE_FAIL = 936856495034531937n;
export const NS_E_PAGING_ERROR = 936857594546159714n;
export const NS_E_BAD_BLOCK0_VERSION = 936858694057787491n;
export const NS_E_BAD_DISK_UID = 936859793569415268n;
export const NS_E_BAD_FSMAJOR_VERSION = 936860893081043045n;
export const NS_E_BAD_STAMPNUMBER = 936861992592670822n;
export const NS_E_PARTIALLY_REBUILT_DISK = 936863092104298599n;
export const NS_E_ENACTPLAN_GIVEUP = 936864191615926376n;
export const MCMADM_I_NO_EVENTS = 936865288980070505n;
export const MCMADM_E_REGKEY_NOT_FOUND = 936866390639181930n;
export const NS_E_NO_FORMATS = 936867490150809707n;
export const NS_E_NO_REFERENCES = 936868589662437484n;
export const NS_E_WAVE_OPEN = 936869689174065261n;
export const NS_I_LOGGING_FAILED = 936870786538209390n;
export const NS_E_CANNOTCONNECTEVENTS = 936871888197320815n;
export const NS_I_LIMIT_BANDWIDTH = 936872985561464944n;
export const NS_E_NO_DEVICE = 936874087220576369n;
export const NS_E_NO_SPECIFIED_DEVICE = 938984050034278514n;
export const NS_E_NOTHING_TO_DO = 938985149545908209n;
export const NS_E_NO_MULTICAST = 936968645220567026n;
export const NS_E_MONITOR_GIVEUP = 936969744732192968n;
export const NS_E_REMIRRORED_DISK = 936970844243820745n;
export const NS_E_INSUFFICIENT_DATA = 936971943755448522n;
export const NS_E_ASSERT = 936973043267076299n;
export const NS_E_BAD_ADAPTER_NAME = 936974142778704076n;
export const NS_E_NOT_LICENSED = 936975242290331853n;
export const NS_E_NO_SERVER_CONTACT = 936976341801959630n;
export const NS_E_TOO_MANY_TITLES = 936977441313587407n;
export const NS_E_TITLE_SIZE_EXCEEDED = 936978540825215184n;
export const NS_E_UDP_DISABLED = 936979640336842961n;
export const NS_E_TCP_DISABLED = 936980739848470738n;
export const NS_E_HTTP_DISABLED = 936981839360098515n;
export const NS_E_LICENSE_EXPIRED = 936982938871726292n;
export const NS_E_TITLE_BITRATE = 936984038383354069n;
export const NS_E_EMPTY_PROGRAM_NAME = 936985137894981846n;
export const NS_E_MISSING_CHANNEL = 936986237406609623n;
export const NS_E_NO_CHANNELS = 936987336918237400n;
export const NS_E_INVALID_INDEX2 = 937188547546120409n;
export const NS_E_CUB_FAIL_LINK = 937189647057748368n;
export const NS_I_CUB_UNFAIL_LINK = 937190744421892497n;
export const NS_E_BAD_CUB_UID = 937191846081003922n;
export const NS_I_RESTRIPE_START = 937192943445148051n;
export const NS_I_RESTRIPE_DONE = 937194042956775828n;
export const NS_E_GLITCH_MODE = 937195144615887253n;
export const NS_I_RESTRIPE_DISK_OUT = 937196241980031382n;
export const NS_I_RESTRIPE_CUB_OUT = 937197341491659159n;
export const NS_I_DISK_STOP = 937198441003286936n;
export const NS_I_CATATONIC_FAILURE = 937199541588656537n;
export const NS_I_CATATONIC_AUTO_UNFAIL = 937200641100284314n;
export const NS_E_NO_MEDIA_PROTOCOL = 940047277778338203n;
export const NS_E_INVALID_INPUT_FORMAT = 940048377289968568n;
export const NS_E_MSAUDIO_NOT_INSTALLED = 940049476801596345n;
export const NS_E_UNEXPECTED_MSAUDIO_ERROR = 940050576313224122n;
export const NS_E_INVALID_OUTPUT_FORMAT = 940051675824851899n;
export const NS_E_NOT_CONFIGURED = 940052775336479676n;
export const NS_E_PROTECTED_CONTENT = 940053874848107453n;
export const NS_E_LICENSE_REQUIRED = 940054974359735230n;
export const NS_E_TAMPERED_CONTENT = 940056073871363007n;
export const NS_E_LICENSE_OUTOFDATE = 940057173382990784n;
export const NS_E_LICENSE_INCORRECT_RIGHTS = 940058272894618561n;
export const NS_E_AUDIO_CODEC_NOT_INSTALLED = 940059372406246338n;
export const NS_E_AUDIO_CODEC_ERROR = 940060471917874115n;
export const NS_E_VIDEO_CODEC_NOT_INSTALLED = 940061571429501892n;
export const NS_E_VIDEO_CODEC_ERROR = 940062670941129669n;
export const NS_E_INVALIDPROFILE = 940063770452757446n;
export const NS_E_INCOMPATIBLE_VERSION = 940064869964385223n;
export const NS_S_REBUFFERING = 940065966254787528n;
export const NS_S_DEGRADING_QUALITY = 940067065766415305n;
export const NS_E_OFFLINE_MODE = 940068168499268554n;
export const NS_E_NOT_CONNECTED = 940069268010896331n;
export const NS_E_TOO_MUCH_DATA = 940070367522524108n;
export const NS_E_UNSUPPORTED_PROPERTY = 940071467034151885n;
export const NS_E_8BIT_WAVE_UNSUPPORTED = 940072566545779662n;
export const NS_E_NO_MORE_SAMPLES = 940073666057407439n;
export const NS_E_INVALID_SAMPLING_RATE = 940074765569035216n;
export const NS_E_MAX_PACKET_SIZE_TOO_SMALL = 940075865080662993n;
export const NS_E_LATE_PACKET = 940076964592290770n;
export const NS_E_DUPLICATE_PACKET = 940078064103918547n;
export const NS_E_SDK_BUFFERTOOSMALL = 940079163615546324n;
export const NS_E_INVALID_NUM_PASSES = 940080263127174101n;
export const NS_E_ATTRIBUTE_READ_ONLY = 940081362638801878n;
export const NS_E_ATTRIBUTE_NOT_ALLOWED = 940082462150429655n;
export const NS_E_INVALID_EDL = 940083561662057432n;
export const NS_E_DATA_UNIT_EXTENSION_TOO_LARGE = 940084661173685209n;
export const NS_E_CODEC_DMO_ERROR = 940085760685312986n;
export const NS_S_TRANSCRYPTOR_EOF = 940086856975715291n;
export const NS_E_FEATURE_DISABLED_BY_GROUP_POLICY = 940087959708568540n;
export const NS_E_FEATURE_DISABLED_IN_SKU = 940089059220196317n;
export const NS_E_WMDRM_DEPRECATED = 941146789406116830n;
export const NS_E_NO_CD = 941147888917745568n;
export const NS_E_CANT_READ_DIGITAL = 941148988429373345n;
export const NS_E_DEVICE_DISCONNECTED = 941150087941001122n;
export const NS_E_DEVICE_NOT_SUPPORT_FORMAT = 941151187452628899n;
export const NS_E_SLOW_READ_DIGITAL = 941152286964256676n;
export const NS_E_MIXER_INVALID_LINE = 941153386475884453n;
export const NS_E_MIXER_INVALID_CONTROL = 941154485987512230n;
export const NS_E_MIXER_INVALID_VALUE = 941155585499140007n;
export const NS_E_MIXER_UNKNOWN_MMRESULT = 941156685010767784n;
export const NS_E_USER_STOP = 941157784522395561n;
export const NS_E_MP3_FORMAT_NOT_FOUND = 941158884034023338n;
export const NS_E_CD_READ_ERROR_NO_CORRECTION = 941159983545651115n;
export const NS_E_CD_READ_ERROR = 941161083057278892n;
export const NS_E_CD_SLOW_COPY = 941162182568906669n;
export const NS_E_CD_COPYTO_CD = 941163282080534446n;
export const NS_E_MIXER_NODRIVER = 941164381592162223n;
export const NS_E_REDBOOK_ENABLED_WHILE_COPYING = 941165481103790000n;
export const NS_E_CD_REFRESH = 941166580615417777n;
export const NS_E_CD_DRIVER_PROBLEM = 941167680127045554n;
export const NS_E_WONT_DO_DIGITAL = 941168779638673331n;
export const NS_E_WMPXML_NOERROR = 941169879150301108n;
export const NS_E_WMPXML_ENDOFDATA = 941170978661928885n;
export const NS_E_WMPXML_PARSEERROR = 941172078173556662n;
export const NS_E_WMPXML_ATTRIBUTENOTFOUND = 941173177685184439n;
export const NS_E_WMPXML_PINOTFOUND = 941174277196812216n;
export const NS_E_WMPXML_EMPTYDOC = 941175376708439993n;
export const NS_E_WMP_PATH_ALREADY_IN_LIBRARY = 941179774754951098n;
export const NS_E_WMP_FILESCANALREADYSTARTED = 941180874266578878n;
export const NS_E_WMP_HME_INVALIDOBJECTID = 941181973778206655n;
export const NS_E_WMP_MF_CODE_EXPIRED = 941183073289834432n;
export const NS_E_WMP_HME_NOTSEARCHABLEFORITEMS = 941184172801462209n;
export const NS_E_WMP_HME_STALEREQUEST = 941189670359601090n;
export const NS_E_WMP_ADDTOLIBRARY_FAILED = 941190769871228871n;
export const NS_E_WMP_WINDOWSAPIFAILURE = 941191869382856648n;
export const NS_E_WMP_RECORDING_NOT_ALLOWED = 941192968894484425n;
export const NS_E_DEVICE_NOT_READY = 941194068406112202n;
export const NS_E_DAMAGED_FILE = 941195167917739979n;
export const NS_E_MPDB_GENERIC = 941196267429367756n;
export const NS_E_FILE_FAILED_CHECKS = 941197366940995533n;
export const NS_E_MEDIA_LIBRARY_FAILED = 941198466452623310n;
export const NS_E_SHARING_VIOLATION = 941199565964251087n;
export const NS_E_NO_ERROR_STRING_FOUND = 941200665475878864n;
export const NS_E_WMPOCX_NO_REMOTE_CORE = 941201764987506641n;
export const NS_E_WMPOCX_NO_ACTIVE_CORE = 941202864499134418n;
export const NS_E_WMPOCX_NOT_RUNNING_REMOTELY = 941203964010762195n;
export const NS_E_WMPOCX_NO_REMOTE_WINDOW = 941205063522389972n;
export const NS_E_WMPOCX_ERRORMANAGERNOTAVAILABLE = 941206163034017749n;
export const NS_E_PLUGIN_NOTSHUTDOWN = 941207262545645526n;
export const NS_E_WMP_CANNOT_FIND_FOLDER = 941208362057273303n;
export const NS_E_WMP_STREAMING_RECORDING_NOT_ALLOWED = 941209461568901080n;
export const NS_E_WMP_PLUGINDLL_NOTFOUND = 941210561080528857n;
export const NS_E_NEED_TO_ASK_USER = 941211660592156634n;
export const NS_E_WMPOCX_PLAYER_NOT_DOCKED = 941212760103784411n;
export const NS_E_WMP_EXTERNAL_NOTREADY = 941213859615412188n;
export const NS_E_WMP_MLS_STALE_DATA = 941214959127039965n;
export const NS_E_WMP_UI_SUBCONTROLSNOTSUPPORTED = 941216058638667742n;
export const NS_E_WMP_UI_VERSIONMISMATCH = 941217158150295519n;
export const NS_E_WMP_UI_NOTATHEMEFILE = 941218257661923296n;
export const NS_E_WMP_UI_SUBELEMENTNOTFOUND = 941219357173551073n;
export const NS_E_WMP_UI_VERSIONPARSE = 941220456685178850n;
export const NS_E_WMP_UI_VIEWIDNOTFOUND = 941221556196806627n;
export const NS_E_WMP_UI_PASSTHROUGH = 941222655708434404n;
export const NS_E_WMP_UI_OBJECTNOTFOUND = 941223755220062181n;
export const NS_E_WMP_UI_SECONDHANDLER = 941224854731689958n;
export const NS_E_WMP_UI_NOSKININZIP = 941225954243317735n;
export const NS_S_WMP_UI_VERSIONMISMATCH = 941227050533720040n;
export const NS_S_WMP_EXCEPTION = 941228150045347817n;
export const NS_E_WMP_URLDOWNLOADFAILED = 941229252778201066n;
export const NS_E_WMPOCX_UNABLE_TO_LOAD_SKIN = 941230352289828843n;
export const NS_E_WMP_INVALID_SKIN = 941231451801456620n;
export const NS_E_WMP_SENDMAILFAILED = 941232551313084397n;
export const NS_E_WMP_LOCKEDINSKINMODE = 941233650824712174n;
export const NS_E_WMP_FAILED_TO_SAVE_FILE = 941234750336339951n;
export const NS_E_WMP_SAVEAS_READONLY = 941235849847967728n;
export const NS_E_WMP_FAILED_TO_SAVE_PLAYLIST = 941236949359595505n;
export const NS_E_WMP_FAILED_TO_OPEN_WMD = 941238048871223282n;
export const NS_E_WMP_CANT_PLAY_PROTECTED = 941239148382851059n;
export const NS_E_SHARING_STATE_OUT_OF_SYNC = 941245745452617716n;
export const NS_E_WMPOCX_REMOTE_PLAYER_ALREADY_RUNNING = 941256740568895482n;
export const NS_E_WMP_RBC_JPGMAPPINGIMAGE = 941257840080523268n;
export const NS_E_WMP_JPGTRANSPARENCY = 941262238127034373n;
export const NS_E_WMP_INVALID_MAX_VAL = 941263337638662153n;
export const NS_E_WMP_INVALID_MIN_VAL = 941267735685173258n;
export const NS_E_WMP_CS_JPGPOSITIONIMAGE = 941268835196801038n;
export const NS_E_WMP_CS_NOTEVENLYDIVISIBLE = 941278730801451023n;
export const NS_E_WMPZIP_NOTAZIPFILE = 941279830313078808n;
export const NS_E_WMPZIP_CORRUPT = 941280929824706585n;
export const NS_E_WMPZIP_FILENOTFOUND = 941289725917728794n;
export const NS_E_WMP_IMAGE_FILETYPE_UNSUPPORTED = 941290825429356578n;
export const NS_E_WMP_IMAGE_INVALID_FORMAT = 941291924940984355n;
export const NS_E_WMP_GIF_UNEXPECTED_ENDOFFILE = 941293024452612132n;
export const NS_E_WMP_GIF_INVALID_FORMAT = 941294123964239909n;
export const NS_E_WMP_GIF_BAD_VERSION_NUMBER = 941295223475867686n;
export const NS_E_WMP_GIF_NO_IMAGE_IN_FILE = 941296322987495463n;
export const NS_E_WMP_PNG_INVALIDFORMAT = 941297422499123240n;
export const NS_E_WMP_PNG_UNSUPPORTED_BITDEPTH = 941298522010751017n;
export const NS_E_WMP_PNG_UNSUPPORTED_COMPRESSION = 941299621522378794n;
export const NS_E_WMP_PNG_UNSUPPORTED_FILTER = 941300721034006571n;
export const NS_E_WMP_PNG_UNSUPPORTED_INTERLACE = 941301820545634348n;
export const NS_E_WMP_PNG_UNSUPPORTED_BAD_CRC = 941302920057262125n;
export const NS_E_WMP_BMP_INVALID_BITMASK = 941304019568889902n;
export const NS_E_WMP_BMP_TOPDOWN_DIB_UNSUPPORTED = 941305119080517679n;
export const NS_E_WMP_BMP_BITMAP_NOT_CREATED = 941306218592145456n;
export const NS_E_WMP_BMP_COMPRESSION_UNSUPPORTED = 941307318103773233n;
export const NS_E_WMP_BMP_INVALID_FORMAT = 941308417615401010n;
export const NS_E_WMP_JPG_JERR_ARITHCODING_NOTIMPL = 941309517127028787n;
export const NS_E_WMP_JPG_INVALID_FORMAT = 941310616638656564n;
export const NS_E_WMP_JPG_BAD_DCTSIZE = 941311716150284341n;
export const NS_E_WMP_JPG_BAD_VERSION_NUMBER = 941312815661912118n;
export const NS_E_WMP_JPG_BAD_PRECISION = 941313915173539895n;
export const NS_E_WMP_JPG_CCIR601_NOTIMPL = 941315014685167672n;
export const NS_E_WMP_JPG_NO_IMAGE_IN_FILE = 941316114196795449n;
export const NS_E_WMP_JPG_READ_ERROR = 941317213708423226n;
export const NS_E_WMP_JPG_FRACT_SAMPLE_NOTIMPL = 941318313220051003n;
export const NS_E_WMP_JPG_IMAGE_TOO_BIG = 941319412731678780n;
export const NS_E_WMP_JPG_UNEXPECTED_ENDOFFILE = 941320512243306557n;
export const NS_E_WMP_JPG_SOF_UNSUPPORTED = 941321611754934334n;
export const NS_E_WMP_JPG_UNKNOWN_MARKER = 941322711266562111n;
export const NS_S_WMP_LOADED_GIF_IMAGE = 941323807556964416n;
export const NS_S_WMP_LOADED_PNG_IMAGE = 941324907068592193n;
export const NS_S_WMP_LOADED_BMP_IMAGE = 941326006580219970n;
export const NS_S_WMP_LOADED_JPG_IMAGE = 941327106091847747n;
export const NS_E_WMP_FAILED_TO_OPEN_IMAGE = 941332606871212100n;
export const NS_E_WMP_DAI_SONGTOOSHORT = 941333706382839881n;
export const NS_E_WMG_RATEUNAVAILABLE = 941334805894467658n;
export const NS_E_WMG_PLUGINUNAVAILABLE = 941335905406095435n;
export const NS_E_WMG_CANNOTQUEUE = 941337004917723212n;
export const NS_E_WMG_PREROLLLICENSEACQUISITIONNOTALLOWED = 941338104429350989n;
export const NS_E_WMG_UNEXPECTEDPREROLLSTATUS = 941339203940978766n;
export const NS_S_WMG_FORCE_DROP_FRAME = 941341399743008847n;
export const NS_E_WMG_INVALID_COPP_CERTIFICATE = 941342502475862097n;
export const NS_E_WMG_COPP_SECURITY_INVALID = 941343601987489874n;
export const NS_E_WMG_COPP_UNSUPPORTED = 941344701499117651n;
export const NS_E_WMG_INVALIDSTATE = 941345801010745428n;
export const NS_E_WMG_SINKALREADYEXISTS = 941346900522373205n;
export const NS_E_WMG_NOSDKINTERFACE = 941348000034000982n;
export const NS_E_WMG_NOTALLOUTPUTSRENDERED = 941349099545628759n;
export const NS_E_WMG_FILETRANSFERNOTALLOWED = 941350199057256536n;
export const NS_E_WMR_UNSUPPORTEDSTREAM = 941351298568884313n;
export const NS_E_WMR_PINNOTFOUND = 941352398080512090n;
export const NS_E_WMR_WAITINGONFORMATSWITCH = 941353497592139867n;
export const NS_E_WMR_NOSOURCEFILTER = 941354597103767644n;
export const NS_E_WMR_PINTYPENOMATCH = 941355696615395421n;
export const NS_E_WMR_NOCALLBACKAVAILABLE = 941356796127023198n;
export const NS_S_WMR_ALREADYRENDERED = 941357892417425503n;
export const NS_S_WMR_PINTYPEPARTIALMATCH = 941358991929053280n;
export const NS_S_WMR_PINTYPEFULLMATCH = 941360091440681057n;
export const NS_E_WMR_SAMPLEPROPERTYNOTSET = 941361194173534306n;
export const NS_E_WMR_CANNOT_RENDER_BINARY_STREAM = 941362293685162083n;
export const NS_E_WMG_LICENSE_TAMPERED = 941363393196789860n;
export const NS_E_WMR_WILLNOT_RENDER_BINARY_STREAM = 941364492708417637n;
export const NS_S_WMG_ADVISE_DROP_FRAME = 941365588998819942n;
export const NS_S_WMG_ADVISE_DROP_TO_KEYFRAME = 941366688510447719n;
export const NS_E_WMX_UNRECOGNIZED_PLAYLIST_FORMAT = 941367791243300968n;
export const NS_E_ASX_INVALIDFORMAT = 941368890754928745n;
export const NS_E_ASX_INVALIDVERSION = 941369990266556522n;
export const NS_E_ASX_INVALID_REPEAT_BLOCK = 941371089778184299n;
export const NS_E_ASX_NOTHING_TO_WRITE = 941372189289812076n;
export const NS_E_URLLIST_INVALIDFORMAT = 941373288801439853n;
export const NS_E_WMX_ATTRIBUTE_DOES_NOT_EXIST = 941374388313067630n;
export const NS_E_WMX_ATTRIBUTE_ALREADY_EXISTS = 941375487824695407n;
export const NS_E_WMX_ATTRIBUTE_UNRETRIEVABLE = 941376587336323184n;
export const NS_E_WMX_ITEM_DOES_NOT_EXIST = 941377686847950961n;
export const NS_E_WMX_ITEM_TYPE_ILLEGAL = 941378786359578738n;
export const NS_E_WMX_ITEM_UNSETTABLE = 941379885871206515n;
export const NS_E_WMX_PLAYLIST_EMPTY = 941380985382834292n;
export const NS_E_MLS_SMARTPLAYLIST_FILTER_NOT_REGISTERED = 941382084894462069n;
export const NS_E_WMX_INVALID_FORMAT_OVER_NESTING = 941388681964228726n;
export const NS_E_WMPCORE_NOSOURCEURLSTRING = 941389781475856508n;
export const NS_E_WMPCORE_COCREATEFAILEDFORGITOBJECT = 941390880987484285n;
export const NS_E_WMPCORE_FAILEDTOGETMARSHALLEDEVENTHANDLERINTERFACE = 941391980499112062n;
export const NS_E_WMPCORE_BUFFERTOOSMALL = 941393080010739839n;
export const NS_E_WMPCORE_UNAVAILABLE = 941394179522367616n;
export const NS_E_WMPCORE_INVALIDPLAYLISTMODE = 941399677080506497n;
export const NS_E_WMPCORE_ITEMNOTINPLAYLIST = 941400776592134278n;
export const NS_E_WMPCORE_PLAYLISTEMPTY = 941401876103762055n;
export const NS_E_WMPCORE_NOBROWSER = 941402975615389832n;
export const NS_E_WMPCORE_UNRECOGNIZED_MEDIA_URL = 941404075127017609n;
export const NS_E_WMPCORE_GRAPH_NOT_IN_LIST = 941405174638645386n;
export const NS_E_WMPCORE_PLAYLIST_EMPTY_OR_SINGLE_MEDIA = 941406274150273163n;
export const NS_E_WMPCORE_ERRORSINKNOTREGISTERED = 941407373661900940n;
export const NS_E_WMPCORE_ERRORMANAGERNOTAVAILABLE = 941408473173528717n;
export const NS_E_WMPCORE_WEBHELPFAILED = 941409572685156494n;
export const NS_E_WMPCORE_MEDIA_ERROR_RESUME_FAILED = 941410672196784271n;
export const NS_E_WMPCORE_NO_REF_IN_ENTRY = 941411771708412048n;
export const NS_E_WMPCORE_WMX_LIST_ATTRIBUTE_NAME_EMPTY = 941412871220039825n;
export const NS_E_WMPCORE_WMX_LIST_ATTRIBUTE_NAME_ILLEGAL = 941413970731667602n;
export const NS_E_WMPCORE_WMX_LIST_ATTRIBUTE_VALUE_EMPTY = 941415070243295379n;
export const NS_E_WMPCORE_WMX_LIST_ATTRIBUTE_VALUE_ILLEGAL = 941416169754923156n;
export const NS_E_WMPCORE_WMX_LIST_ITEM_ATTRIBUTE_NAME_EMPTY = 941417269266550933n;
export const NS_E_WMPCORE_WMX_LIST_ITEM_ATTRIBUTE_NAME_ILLEGAL = 941418368778178710n;
export const NS_E_WMPCORE_WMX_LIST_ITEM_ATTRIBUTE_VALUE_EMPTY = 941419468289806487n;
export const NS_E_WMPCORE_LIST_ENTRY_NO_REF = 941420567801434264n;
export const NS_E_WMPCORE_MISNAMED_FILE = 941421667313062041n;
export const NS_E_WMPCORE_CODEC_NOT_TRUSTED = 941422766824689818n;
export const NS_E_WMPCORE_CODEC_NOT_FOUND = 941423866336317595n;
export const NS_E_WMPCORE_CODEC_DOWNLOAD_NOT_ALLOWED = 941424965847945372n;
export const NS_E_WMPCORE_ERROR_DOWNLOADING_PLAYLIST = 941426065359573149n;
export const NS_E_WMPCORE_FAILED_TO_BUILD_PLAYLIST = 941427164871200926n;
export const NS_E_WMPCORE_PLAYLIST_ITEM_ALTERNATE_NONE = 941428264382828703n;
export const NS_E_WMPCORE_PLAYLIST_ITEM_ALTERNATE_EXHAUSTED = 941429363894456480n;
export const NS_E_WMPCORE_PLAYLIST_ITEM_ALTERNATE_NAME_NOT_FOUND = 941430463406084257n;
export const NS_E_WMPCORE_PLAYLIST_ITEM_ALTERNATE_MORPH_FAILED = 941431562917712034n;
export const NS_E_WMPCORE_PLAYLIST_ITEM_ALTERNATE_INIT_FAILED = 941432662429339811n;
export const NS_E_WMPCORE_MEDIA_ALTERNATE_REF_EMPTY = 941433761940967588n;
export const NS_E_WMPCORE_PLAYLIST_NO_EVENT_NAME = 941434861452595365n;
export const NS_E_WMPCORE_PLAYLIST_EVENT_ATTRIBUTE_ABSENT = 941435960964223142n;
export const NS_E_WMPCORE_PLAYLIST_EVENT_EMPTY = 941437060475850919n;
export const NS_E_WMPCORE_PLAYLIST_STACK_EMPTY = 941438159987478696n;
export const NS_E_WMPCORE_CURRENT_MEDIA_NOT_ACTIVE = 941440359010734249n;
export const NS_E_WMPCORE_USER_CANCEL = 941441458522362027n;
export const NS_E_WMPCORE_PLAYLIST_REPEAT_EMPTY = 941442558033989804n;
export const NS_E_WMPCORE_PLAYLIST_REPEAT_START_MEDIA_NONE = 941443657545617581n;
export const NS_E_WMPCORE_PLAYLIST_REPEAT_END_MEDIA_NONE = 941444757057245358n;
export const NS_E_WMPCORE_INVALID_PLAYLIST_URL = 941445856568873135n;
export const NS_E_WMPCORE_MISMATCHED_RUNTIME = 941446956080500912n;
export const NS_E_WMPCORE_PLAYLIST_IMPORT_FAILED_NO_ITEMS = 941448055592128689n;
export const NS_E_WMPCORE_VIDEO_TRANSFORM_FILTER_INSERTION = 941449155103756466n;
export const NS_E_WMPCORE_MEDIA_UNAVAILABLE = 941450254615384243n;
export const NS_E_WMPCORE_WMX_ENTRYREF_NO_REF = 941451354127012020n;
export const NS_E_WMPCORE_NO_PLAYABLE_MEDIA_IN_PLAYLIST = 941452453638639797n;
export const NS_E_WMPCORE_PLAYLIST_EMPTY_NESTED_PLAYLIST_SKIPPED_ITEMS = 941453553150267574n;
export const NS_E_WMPCORE_BUSY = 941454652661895351n;
export const NS_E_WMPCORE_MEDIA_CHILD_PLAYLIST_UNAVAILABLE = 941455752173523128n;
export const NS_E_WMPCORE_MEDIA_NO_CHILD_PLAYLIST = 941456851685150905n;
export const NS_E_WMPCORE_FILE_NOT_FOUND = 941457951196778682n;
export const NS_E_WMPCORE_TEMP_FILE_NOT_FOUND = 941459050708406459n;
export const NS_E_WMDM_REVOKED = 941460150220034236n;
export const NS_E_DDRAW_GENERIC = 941461249731662013n;
export const NS_E_DISPLAY_MODE_CHANGE_FAILED = 941462349243289790n;
export const NS_E_PLAYLIST_CONTAINS_ERRORS = 941463448754917567n;
export const NS_E_CHANGING_PROXY_NAME = 941464548266545344n;
export const NS_E_CHANGING_PROXY_PORT = 941465647778173121n;
export const NS_E_CHANGING_PROXY_EXCEPTIONLIST = 941466747289800898n;
export const NS_E_CHANGING_PROXYBYPASS = 941467846801428675n;
export const NS_E_CHANGING_PROXY_PROTOCOL_NOT_FOUND = 941468946313056452n;
export const NS_E_GRAPH_NOAUDIOLANGUAGE = 941470045824684229n;
export const NS_E_GRAPH_NOAUDIOLANGUAGESELECTED = 941471145336312006n;
export const NS_E_CORECD_NOTAMEDIACD = 941472244847939783n;
export const NS_E_WMPCORE_MEDIA_URL_TOO_LONG = 941473344359567560n;
export const NS_E_WMPFLASH_CANT_FIND_COM_SERVER = 941474443871195337n;
export const NS_E_WMPFLASH_INCOMPATIBLEVERSION = 941475543382823114n;
export const NS_E_WMPOCXGRAPH_IE_DISALLOWS_ACTIVEX_CONTROLS = 941476642894450891n;
export const NS_E_NEED_CORE_REFERENCE = 941477742406078668n;
export const NS_E_MEDIACD_READ_ERROR = 941478841917706445n;
export const NS_E_IE_DISALLOWS_ACTIVEX_CONTROLS = 941479941429334222n;
export const NS_E_FLASH_PLAYBACK_NOT_ALLOWED = 941481040940961999n;
export const NS_E_UNABLE_TO_CREATE_RIP_LOCATION = 941482140452589776n;
export const NS_E_WMPCORE_SOME_CODECS_MISSING = 941483239964217553n;
export const NS_E_WMP_RIP_FAILED = 941484339475845330n;
export const NS_E_WMP_FAILED_TO_RIP_TRACK = 941485438987473107n;
export const NS_E_WMP_ERASE_FAILED = 941486538499100884n;
export const NS_E_WMP_FORMAT_FAILED = 941487638010728661n;
export const NS_E_WMP_CANNOT_BURN_NON_LOCAL_FILE = 941488737522356438n;
export const NS_E_WMP_FILE_TYPE_CANNOT_BURN_TO_AUDIO_CD = 941489837033984215n;
export const NS_E_WMP_FILE_DOES_NOT_FIT_ON_CD = 941490936545611992n;
export const NS_E_WMP_FILE_NO_DURATION = 941492036057239769n;
export const NS_E_PDA_FAILED_TO_BURN = 941493135568867546n;
export const NS_S_NEED_TO_BUY_BURN_RIGHTS = 941494231859269851n;
export const NS_E_FAILED_DOWNLOAD_ABORT_BURN = 941495334592123100n;
export const NS_E_WMPCORE_DEVICE_DRIVERS_MISSING = 941531618475839709n;
export const NS_S_WMPCORE_PLAYLISTCLEARABORT = 941532714766242046n;
export const NS_S_WMPCORE_PLAYLISTREMOVEITEMABORT = 941536013301125375n;
export const NS_S_WMPCORE_PLAYLIST_CREATION_PENDING = 941537112812753154n;
export const NS_S_WMPCORE_MEDIA_VALIDATION_PENDING = 941538212324380931n;
export const NS_S_WMPCORE_PLAYLIST_REPEAT_SECONDARY_SEGMENTS_IGNORED = 941539311836008708n;
export const NS_S_WMPCORE_COMMAND_NOT_AVAILABLE = 941540411347636485n;
export const NS_S_WMPCORE_PLAYLIST_NAME_AUTO_GENERATED = 941541510859264262n;
export const NS_S_WMPCORE_PLAYLIST_IMPORT_MISSING_ITEMS = 941542610370892039n;
export const NS_S_WMPCORE_PLAYLIST_COLLAPSED_TO_SINGLE_MEDIA = 941543709882519816n;
export const NS_S_WMPCORE_MEDIA_CHILD_PLAYLIST_OPEN_PENDING = 941544809394147593n;
export const NS_S_WMPCORE_MORE_NODES_AVAIABLE = 941575595719725322n;
export const NS_E_WMPIM_USEROFFLINE = 941576698452578598n;
export const NS_E_WMPIM_USERCANCELED = 941577797964206375n;
export const NS_E_WMPIM_DIALUPFAILED = 941578897475834152n;
export const NS_E_WINSOCK_ERROR_STRING = 941586594057228585n;
export const NS_E_WMPBR_NOLISTENER = 941587693568856368n;
export const NS_E_WMPBR_BACKUPCANCEL = 941588793080484145n;
export const NS_E_WMPBR_RESTORECANCEL = 941589892592111922n;
export const NS_E_WMPBR_ERRORWITHURL = 941590992103739699n;
export const NS_E_WMPBR_NAMECOLLISION = 941592091615367476n;
export const NS_S_WMPBR_SUCCESS = 941593187905769781n;
export const NS_S_WMPBR_PARTIALSUCCESS = 941594287417397558n;
export const NS_E_WMPBR_DRIVE_INVALID = 941595390150250807n;
export const NS_E_WMPBR_BACKUPRESTOREFAILED = 941608584289784120n;
export const NS_S_WMPEFFECT_TRANSPARENT = 941609680580186436n;
export const NS_S_WMPEFFECT_OPAQUE = 941619576184836421n;
export const NS_S_OPERATION_PENDING = 941630571301114190n;
export const NS_E_WMP_CONVERT_FILE_FAILED = 941631674033967448n;
export const NS_E_WMP_CONVERT_NO_RIGHTS_ERRORURL = 941632773545595225n;
export const NS_E_WMP_CONVERT_NO_RIGHTS_NOERRORURL = 941633873057223002n;
export const NS_E_WMP_CONVERT_FILE_CORRUPT = 941634972568850779n;
export const NS_E_WMP_CONVERT_PLUGIN_UNAVAILABLE_ERRORURL = 941636072080478556n;
export const NS_E_WMP_CONVERT_PLUGIN_UNAVAILABLE_NOERRORURL = 941637171592106333n;
export const NS_E_WMP_CONVERT_PLUGIN_UNKNOWN_FILE_OWNER = 941639370615361886n;
export const NS_E_DVD_DISC_COPY_PROTECT_OUTPUT_NS = 941640470126989664n;
export const NS_E_DVD_DISC_COPY_PROTECT_OUTPUT_FAILED = 941641569638617441n;
export const NS_E_DVD_NO_SUBPICTURE_STREAM = 941642669150245218n;
export const NS_E_DVD_COPY_PROTECT = 941643768661872995n;
export const NS_E_DVD_AUTHORING_PROBLEM = 941644868173500772n;
export const NS_E_DVD_INVALID_DISC_REGION = 941645967685128549n;
export const NS_E_DVD_COMPATIBLE_VIDEO_CARD = 941647067196756326n;
export const NS_E_DVD_MACROVISION = 941648166708384103n;
export const NS_E_DVD_SYSTEM_DECODER_REGION = 941649266220011880n;
export const NS_E_DVD_DISC_DECODER_REGION = 941650365731639657n;
export const NS_E_DVD_NO_VIDEO_STREAM = 941651465243267434n;
export const NS_E_DVD_NO_AUDIO_STREAM = 941652564754895211n;
export const NS_E_DVD_GRAPH_BUILDING = 941653664266522988n;
export const NS_E_DVD_NO_DECODER = 941654763778150765n;
export const NS_E_DVD_PARENTAL = 941655863289778542n;
export const NS_E_DVD_CANNOT_JUMP = 941656962801406319n;
export const NS_E_DVD_DEVICE_CONTENTION = 941658062313034096n;
export const NS_E_DVD_NO_VIDEO_MEMORY = 941659161824661873n;
export const NS_E_DVD_CANNOT_COPY_PROTECTED = 941660261336289650n;
export const NS_E_DVD_REQUIRED_PROPERTY_NOT_SET = 941661360847917427n;
export const NS_E_DVD_INVALID_TITLE_CHAPTER = 941663559871172980n;
export const NS_E_NO_CD_BURNER = 941664659382800758n;
export const NS_E_DEVICE_IS_NOT_READY = 941665758894428535n;
export const NS_E_PDA_UNSUPPORTED_FORMAT = 941666858406056312n;
export const NS_E_NO_PDA = 941667957917684089n;
export const NS_E_PDA_UNSPECIFIED_ERROR = 941669057429311866n;
export const NS_E_MEMSTORAGE_BAD_DATA = 941670156940939643n;
export const NS_E_PDA_FAIL_SELECT_DEVICE = 941671256452567420n;
export const NS_E_PDA_FAIL_READ_WAVE_FILE = 941672355964195197n;
export const NS_E_IMAPI_LOSSOFSTREAMING = 941673455475822974n;
export const NS_E_PDA_DEVICE_FULL = 941674554987450751n;
export const NS_E_FAIL_LAUNCH_ROXIO_PLUGIN = 941675654499078528n;
export const NS_E_PDA_DEVICE_FULL_IN_SESSION = 941676754010706305n;
export const NS_E_IMAPI_MEDIUM_INVALIDTYPE = 941677853522334082n;
export const NS_E_PDA_MANUALDEVICE = 941678953033961859n;
export const NS_E_PDA_PARTNERSHIPNOTEXIST = 941680052545589636n;
export const NS_E_PDA_CANNOT_CREATE_ADDITIONAL_SYNC_RELATIONSHIP = 941681152057217413n;
export const NS_E_PDA_NO_TRANSCODE_OF_DRM = 941682251568845190n;
export const NS_E_PDA_TRANSCODECACHEFULL = 941683351080472967n;
export const NS_E_PDA_TOO_MANY_FILE_COLLISIONS = 941684450592100744n;
export const NS_E_PDA_CANNOT_TRANSCODE = 941685550103728521n;
export const NS_E_PDA_TOO_MANY_FILES_IN_DIRECTORY = 941686649615356298n;
export const NS_E_PROCESSINGSHOWSYNCWIZARD = 941687749126984075n;
export const NS_E_PDA_TRANSCODE_NOT_PERMITTED = 941688848638611852n;
export const NS_E_PDA_INITIALIZINGDEVICES = 941689948150239629n;
export const NS_E_PDA_OBSOLETE_SP = 941691047661867406n;
export const NS_E_PDA_TITLE_COLLISION = 941692147173495183n;
export const NS_E_PDA_DEVICESUPPORTDISABLED = 941693246685122960n;
export const NS_E_PDA_NO_LONGER_AVAILABLE = 941694346196750737n;
export const NS_E_PDA_ENCODER_NOT_RESPONDING = 941695445708378514n;
export const NS_E_PDA_CANNOT_SYNC_FROM_LOCATION = 941696545220006291n;
export const NS_E_WMP_PROTOCOL_PROBLEM = 941697644731634068n;
export const NS_E_WMP_NO_DISK_SPACE = 941698744243261845n;
export const NS_E_WMP_LOGON_FAILURE = 941699843754889622n;
export const NS_E_WMP_CANNOT_FIND_FILE = 941700943266517399n;
export const NS_E_WMP_SERVER_INACCESSIBLE = 941702042778145176n;
export const NS_E_WMP_UNSUPPORTED_FORMAT = 941703142289772953n;
export const NS_E_WMP_DSHOW_UNSUPPORTED_FORMAT = 941704241801400730n;
export const NS_E_WMP_PLAYLIST_EXISTS = 941705341313028507n;
export const NS_E_WMP_NONMEDIA_FILES = 941706440824656284n;
export const NS_E_WMP_INVALID_ASX = 941707540336284061n;
export const NS_E_WMP_ALREADY_IN_USE = 941708639847911838n;
export const NS_E_WMP_IMAPI_FAILURE = 941709739359539615n;
export const NS_E_WMP_WMDM_FAILURE = 941710838871167392n;
export const NS_E_WMP_CODEC_NEEDED_WITH_4CC = 941711938382795169n;
export const NS_E_WMP_CODEC_NEEDED_WITH_FORMATTAG = 941713037894422946n;
export const NS_E_WMP_MSSAP_NOT_AVAILABLE = 941714137406050723n;
export const NS_E_WMP_WMDM_INTERFACEDEAD = 941715236917678500n;
export const NS_E_WMP_WMDM_NOTCERTIFIED = 941716336429306277n;
export const NS_E_WMP_WMDM_LICENSE_NOTEXIST = 941717435940934054n;
export const NS_E_WMP_WMDM_LICENSE_EXPIRED = 941718535452561831n;
export const NS_E_WMP_WMDM_BUSY = 941719634964189608n;
export const NS_E_WMP_WMDM_NORIGHTS = 941720734475817385n;
export const NS_E_WMP_WMDM_INCORRECT_RIGHTS = 941721833987445162n;
export const NS_E_WMP_IMAPI_GENERIC = 941724033010700715n;
export const NS_E_WMP_IMAPI_DEVICE_NOTPRESENT = 941725132522328493n;
export const NS_E_WMP_IMAPI_DEVICE_BUSY = 941726232033956270n;
export const NS_E_WMP_IMAPI_LOSS_OF_STREAMING = 941727331545584047n;
export const NS_E_WMP_SERVER_UNAVAILABLE = 941728431057211824n;
export const NS_E_WMP_FILE_OPEN_FAILED = 941729530568839601n;
export const NS_E_WMP_VERIFY_ONLINE = 941730630080467378n;
export const NS_E_WMP_SERVER_NOT_RESPONDING = 941731729592095155n;
export const NS_E_WMP_DRM_CORRUPT_BACKUP = 941732829103722932n;
export const NS_E_WMP_DRM_LICENSE_SERVER_UNAVAILABLE = 941733928615350709n;
export const NS_E_WMP_NETWORK_FIREWALL = 941735028126978486n;
export const NS_E_WMP_NO_REMOVABLE_MEDIA = 941736127638606263n;
export const NS_E_WMP_PROXY_CONNECT_TIMEOUT = 941737227150234040n;
export const NS_E_WMP_NEED_UPGRADE = 941738326661861817n;
export const NS_E_WMP_AUDIO_HW_PROBLEM = 941739426173489594n;
export const NS_E_WMP_INVALID_PROTOCOL = 941740525685117371n;
export const NS_E_WMP_INVALID_LIBRARY_ADD = 941741625196745148n;
export const NS_E_WMP_MMS_NOT_SUPPORTED = 941742724708372925n;
export const NS_E_WMP_NO_PROTOCOLS_SELECTED = 941743824220000702n;
export const NS_E_WMP_GOFULLSCREEN_FAILED = 941744923731628479n;
export const NS_E_WMP_NETWORK_ERROR = 941746023243256256n;
export const NS_E_WMP_CONNECT_TIMEOUT = 941747122754884033n;
export const NS_E_WMP_MULTICAST_DISABLED = 941748222266511810n;
export const NS_E_WMP_SERVER_DNS_TIMEOUT = 941749321778139587n;
export const NS_E_WMP_PROXY_NOT_FOUND = 941750421289767364n;
export const NS_E_WMP_TAMPERED_CONTENT = 941751520801395141n;
export const NS_E_WMP_OUTOFMEMORY = 941752620313022918n;
export const NS_E_WMP_AUDIO_CODEC_NOT_INSTALLED = 941753719824650695n;
export const NS_E_WMP_VIDEO_CODEC_NOT_INSTALLED = 941754819336278472n;
export const NS_E_WMP_IMAPI_DEVICE_INVALIDTYPE = 941755918847906249n;
export const NS_E_WMP_DRM_DRIVER_AUTH_FAILURE = 941757018359534026n;
export const NS_E_WMP_NETWORK_RESOURCE_FAILURE = 941758117871161803n;
export const NS_E_WMP_UPGRADE_APPLICATION = 941759217382789580n;
export const NS_E_WMP_UNKNOWN_ERROR = 941760316894417357n;
export const NS_E_WMP_INVALID_KEY = 941761416406045134n;
export const NS_E_WMP_CD_ANOTHER_USER = 941762515917672911n;
export const NS_E_WMP_DRM_NEEDS_AUTHORIZATION = 941763615429300688n;
export const NS_E_WMP_BAD_DRIVER = 941764714940928465n;
export const NS_E_WMP_ACCESS_DENIED = 941765814452556242n;
export const NS_E_WMP_LICENSE_RESTRICTS = 941766913964184019n;
export const NS_E_WMP_INVALID_REQUEST = 941768013475811796n;
export const NS_E_WMP_CD_STASH_NO_SPACE = 941769112987439573n;
export const NS_E_WMP_DRM_NEW_HARDWARE = 941770212499067350n;
export const NS_E_WMP_DRM_INVALID_SIG = 941771312010695127n;
export const NS_E_WMP_DRM_CANNOT_RESTORE = 941772411522322904n;
export const NS_E_WMP_BURN_DISC_OVERFLOW = 941773511033950681n;
export const NS_E_WMP_DRM_GENERIC_LICENSE_FAILURE = 941774610545578458n;
export const NS_E_WMP_DRM_NO_SECURE_CLOCK = 941775710057206235n;
export const NS_E_WMP_DRM_NO_RIGHTS = 941776809568834012n;
export const NS_E_WMP_DRM_INDIV_FAILED = 941777909080461789n;
export const NS_E_WMP_SERVER_NONEWCONNECTIONS = 941779008592089566n;
export const NS_E_WMP_MULTIPLE_ERROR_IN_PLAYLIST = 941780108103717343n;
export const NS_E_WMP_IMAPI2_ERASE_FAIL = 941781207615345120n;
export const NS_E_WMP_IMAPI2_ERASE_DEVICE_BUSY = 941782307126972897n;
export const NS_E_WMP_DRM_COMPONENT_FAILURE = 941783406638600674n;
export const NS_E_WMP_DRM_NO_DEVICE_CERT = 941784506150228451n;
export const NS_E_WMP_SERVER_SECURITY_ERROR = 941785605661856228n;
export const NS_E_WMP_AUDIO_DEVICE_LOST = 941786705173484005n;
export const NS_E_WMP_IMAPI_MEDIA_INCOMPATIBLE = 941795501266506214n;
export const NS_E_SYNCWIZ_DEVICE_FULL = 941796600778133998n;
export const NS_E_SYNCWIZ_CANNOT_CHANGE_SETTINGS = 941797700289761775n;
export const NS_E_TRANSCODE_DELETECACHEERROR = 941806496382783984n;
export const NS_E_CD_NO_BUFFERS_READ = 941807595894411768n;
export const NS_E_CD_EMPTY_TRACK_QUEUE = 941808695406039545n;
export const NS_E_CD_NO_READER = 941809794917667322n;
export const NS_E_CD_ISRC_INVALID = 941810894429295099n;
export const NS_E_CD_MEDIA_CATALOG_NUMBER_INVALID = 941811993940922876n;
export const NS_E_SLOW_READ_DIGITAL_WITH_ERRORCORRECTION = 941813093452550653n;
export const NS_E_CD_SPEEDDETECT_NOT_ENOUGH_READS = 941814192964178430n;
export const NS_E_CD_QUEUEING_DISABLED = 941817491499061759n;
export const NS_E_WMP_DRM_ACQUIRING_LICENSE = 941818591010689538n;
export const NS_E_WMP_DRM_LICENSE_EXPIRED = 941819690522317315n;
export const NS_E_WMP_DRM_LICENSE_NOTACQUIRED = 941820790033945092n;
export const NS_E_WMP_DRM_LICENSE_NOTENABLED = 941821889545572869n;
export const NS_E_WMP_DRM_LICENSE_UNUSABLE = 941822989057200646n;
export const NS_E_WMP_DRM_LICENSE_CONTENT_REVOKED = 941824088568828423n;
export const NS_E_WMP_DRM_LICENSE_NOSAP = 941825188080456200n;
export const NS_E_WMP_DRM_UNABLE_TO_ACQUIRE_LICENSE = 941826287592083977n;
export const NS_E_WMP_LICENSE_REQUIRED = 941827387103711754n;
export const NS_E_WMP_PROTECTED_CONTENT = 941861471964172811n;
export const NS_E_WMP_POLICY_VALUE_NOT_CONFIGURED = 941872467080450602n;
export const NS_E_PDA_CANNOT_SYNC_FROM_INTERNET = 941873566592078388n;
export const NS_E_PDA_CANNOT_SYNC_INVALID_PLAYLIST = 941874666103706165n;
export const NS_E_PDA_FAILED_TO_SYNCHRONIZE_FILE = 941875765615333942n;
export const NS_E_PDA_SYNC_FAILED = 941876865126961719n;
export const NS_E_PDA_DELETE_FAILED = 941877964638589496n;
export const NS_E_PDA_FAILED_TO_RETRIEVE_FILE = 941879064150217273n;
export const NS_E_PDA_DEVICE_NOT_RESPONDING = 941880163661845050n;
export const NS_E_PDA_FAILED_TO_TRANSCODE_PHOTO = 941881263173472827n;
export const NS_E_PDA_FAILED_TO_ENCRYPT_TRANSCODED_FILE = 941882362685100604n;
export const NS_E_PDA_CANNOT_TRANSCODE_TO_AUDIO = 941883462196728381n;
export const NS_E_PDA_CANNOT_TRANSCODE_TO_VIDEO = 941884561708356158n;
export const NS_E_PDA_CANNOT_TRANSCODE_TO_IMAGE = 941885661219983935n;
export const NS_E_PDA_RETRIEVED_FILE_FILENAME_TOO_LONG = 941886760731611712n;
export const NS_E_PDA_CEWMDM_DRM_ERROR = 941887860243239489n;
export const NS_E_INCOMPLETE_PLAYLIST = 941888959754867266n;
export const NS_E_PDA_SYNC_RUNNING = 941890059266495043n;
export const NS_E_PDA_SYNC_LOGIN_ERROR = 941891158778122820n;
export const NS_E_PDA_TRANSCODE_CODEC_NOT_FOUND = 941892258289750597n;
export const NS_E_CANNOT_SYNC_DRM_TO_NON_JANUS_DEVICE = 941893357801378374n;
export const NS_E_CANNOT_SYNC_PREVIOUS_SYNC_RUNNING = 941916447545561671n;
export const NS_E_WMP_HWND_NOTFOUND = 941917547057189468n;
export const NS_E_BKGDOWNLOAD_WRONG_NO_FILES = 941918646568817245n;
export const NS_E_BKGDOWNLOAD_COMPLETECANCELLEDJOB = 941919746080445022n;
export const NS_E_BKGDOWNLOAD_CANCELCOMPLETEDJOB = 941920845592072799n;
export const NS_E_BKGDOWNLOAD_NOJOBPOINTER = 941921945103700576n;
export const NS_E_BKGDOWNLOAD_INVALIDJOBSIGNATURE = 941923044615328353n;
export const NS_E_BKGDOWNLOAD_FAILED_TO_CREATE_TEMPFILE = 941924144126956130n;
export const NS_E_BKGDOWNLOAD_PLUGIN_FAILEDINITIALIZE = 941925243638583907n;
export const NS_E_BKGDOWNLOAD_PLUGIN_FAILEDTOMOVEFILE = 941926343150211684n;
export const NS_E_BKGDOWNLOAD_CALLFUNCFAILED = 941927442661839461n;
export const NS_E_BKGDOWNLOAD_CALLFUNCTIMEOUT = 941928542173467238n;
export const NS_E_BKGDOWNLOAD_CALLFUNCENDED = 941929641685095015n;
export const NS_E_BKGDOWNLOAD_WMDUNPACKFAILED = 941930741196722792n;
export const NS_E_BKGDOWNLOAD_FAILEDINITIALIZE = 941931840708350569n;
export const NS_E_INTERFACE_NOT_REGISTERED_IN_GIT = 941932940219978346n;
export const NS_E_BKGDOWNLOAD_INVALID_FILE_NAME = 941971423126950507n;
export const NS_E_IMAGE_DOWNLOAD_FAILED = 942026398708339342n;
export const NS_E_WMP_UDRM_NOUSERLIST = 942027498219967168n;
export const NS_E_WMP_DRM_NOT_ACQUIRING = 942081374289728193n;
export const NS_E_WMP_BSTR_TOO_LONG = 942092369406006002n;
export const NS_E_WMP_AUTOPLAY_INVALID_STATE = 942103364522283772n;
export const NS_E_WMP_COMPONENT_REVOKED = 942136349871117062n;
export const NS_E_CURL_NOTSAFE = 942137449382744868n;
export const NS_E_CURL_INVALIDCHAR = 942138548894372645n;
export const NS_E_CURL_INVALIDHOSTNAME = 942139648406000422n;
export const NS_E_CURL_INVALIDPATH = 942140747917628199n;
export const NS_E_CURL_INVALIDSCHEME = 942141847429255976n;
export const NS_E_CURL_INVALIDURL = 942144046452511529n;
export const NS_E_CURL_CANTWALK = 942145145964139307n;
export const NS_E_CURL_INVALIDPORT = 942146245475767084n;
export const NS_E_CURLHELPER_NOTADIRECTORY = 942147344987394861n;
export const NS_E_CURLHELPER_NOTAFILE = 942148444499022638n;
export const NS_E_CURL_CANTDECODE = 942149544010650415n;
export const NS_E_CURLHELPER_NOTRELATIVE = 942150643522278192n;
export const NS_E_CURL_INVALIDBUFFERSIZE = 942191325452505905n;
export const NS_E_SUBSCRIPTIONSERVICE_PLAYBACK_DISALLOWED = 942192424964133718n;
export const NS_E_CANNOT_BUY_OR_DOWNLOAD_FROM_MULTIPLE_SERVICES = 942193524475761495n;
export const NS_E_CANNOT_BUY_OR_DOWNLOAD_CONTENT = 942194623987389272n;
export const NS_S_TRACK_BUY_REQUIRES_ALBUM_PURCHASE = 942195720277791577n;
export const NS_E_NOT_CONTENT_PARTNER_TRACK = 942196823010644826n;
export const NS_E_TRACK_DOWNLOAD_REQUIRES_ALBUM_PURCHASE = 942197922522272603n;
export const NS_E_TRACK_DOWNLOAD_REQUIRES_PURCHASE = 942199022033900380n;
export const NS_E_TRACK_PURCHASE_MAXIMUM_EXCEEDED = 942200121545528157n;
export const NS_S_NAVIGATION_COMPLETE_WITH_ERRORS = 942201217835930462n;
export const NS_E_SUBSCRIPTIONSERVICE_LOGIN_FAILED = 942202320568783711n;
export const NS_E_SUBSCRIPTIONSERVICE_DOWNLOAD_TIMEOUT = 942203420080411488n;
export const NS_S_TRACK_ALREADY_DOWNLOADED = 942204516370813793n;
export const NS_E_CONTENT_PARTNER_STILL_INITIALIZING = 942205619103667042n;
export const NS_E_OPEN_CONTAINING_FOLDER_FAILED = 942213315685061475n;
export const NS_E_ADVANCEDEDIT_TOO_MANY_PICTURES = 942246301033894762n;
export const NS_E_REDIRECT = 942247400545522568n;
export const NS_E_STALE_PRESENTATION = 942248500057150345n;
export const NS_E_NAMESPACE_WRONG_PERSIST = 942249599568778122n;
export const NS_E_NAMESPACE_WRONG_TYPE = 942250699080405899n;
export const NS_E_NAMESPACE_NODE_CONFLICT = 942251798592033676n;
export const NS_E_NAMESPACE_NODE_NOT_FOUND = 942252898103661453n;
export const NS_E_NAMESPACE_BUFFER_TOO_SMALL = 942253997615289230n;
export const NS_E_NAMESPACE_TOO_MANY_CALLBACKS = 942255097126917007n;
export const NS_E_NAMESPACE_DUPLICATE_CALLBACK = 942256196638544784n;
export const NS_E_NAMESPACE_CALLBACK_NOT_FOUND = 942257296150172561n;
export const NS_E_NAMESPACE_NAME_TOO_LONG = 942258395661800338n;
export const NS_E_NAMESPACE_DUPLICATE_NAME = 942259495173428115n;
export const NS_E_NAMESPACE_EMPTY_NAME = 942260594685055892n;
export const NS_E_NAMESPACE_INDEX_TOO_LARGE = 942261694196683669n;
export const NS_E_NAMESPACE_BAD_NAME = 942262793708311446n;
export const NS_E_NAMESPACE_WRONG_SECURITY = 942356252196672407n;
export const NS_E_CACHE_ARCHIVE_CONFLICT = 942357351708300268n;
export const NS_E_CACHE_ORIGIN_SERVER_NOT_FOUND = 942358451219928045n;
export const NS_E_CACHE_ORIGIN_SERVER_TIMEOUT = 942359550731555822n;
export const NS_E_CACHE_NOT_BROADCAST = 942360650243183599n;
export const NS_E_CACHE_CANNOT_BE_CACHED = 942361749754811376n;
export const NS_E_CACHE_NOT_MODIFIED = 942466203359450097n;
export const NS_E_CANNOT_REMOVE_PUBLISHING_POINT = 942467302871077968n;
export const NS_E_CANNOT_REMOVE_PLUGIN = 942468402382705745n;
export const NS_E_WRONG_PUBLISHING_POINT_TYPE = 942469501894333522n;
export const NS_E_UNSUPPORTED_LOAD_TYPE = 942470601405961299n;
export const NS_E_INVALID_PLUGIN_LOAD_TYPE_CONFIGURATION = 942471700917589076n;
export const NS_E_INVALID_PUBLISHING_POINT_NAME = 942472800429216853n;
export const NS_E_TOO_MANY_MULTICAST_SINKS = 942473899940844630n;
export const NS_E_PUBLISHING_POINT_INVALID_REQUEST_WHILE_STARTED = 942474999452472407n;
export const NS_E_MULTICAST_PLUGIN_NOT_ENABLED = 942476098964100184n;
export const NS_E_INVALID_OPERATING_SYSTEM_VERSION = 942477198475727961n;
export const NS_E_PUBLISHING_POINT_REMOVED = 942478297987355738n;
export const NS_E_INVALID_PUSH_PUBLISHING_POINT_START_REQUEST = 942479397498983515n;
export const NS_E_UNSUPPORTED_LANGUAGE = 942480497010611292n;
export const NS_E_WRONG_OS_VERSION = 942481596522239069n;
export const NS_E_PUBLISHING_POINT_STOPPED = 942576154522227806n;
export const NS_E_PLAYLIST_ENTRY_ALREADY_PLAYING = 942577254033855668n;
export const NS_E_EMPTY_PLAYLIST = 942578353545483445n;
export const NS_E_PLAYLIST_PARSE_FAILURE = 942579453057111222n;
export const NS_E_PLAYLIST_UNSUPPORTED_ENTRY = 942580552568738999n;
export const NS_E_PLAYLIST_ENTRY_NOT_IN_PLAYLIST = 942581652080366776n;
export const NS_E_PLAYLIST_ENTRY_SEEK = 942582751591994553n;
export const NS_E_PLAYLIST_RECURSIVE_PLAYLISTS = 942583851103622330n;
export const NS_E_PLAYLIST_TOO_MANY_NESTED_PLAYLISTS = 942584950615250107n;
export const NS_E_PLAYLIST_SHUTDOWN = 942586050126877884n;
export const NS_E_PLAYLIST_END_RECEDING = 942587149638505661n;
export const NS_I_PLAYLIST_CHANGE_RECEDING = 942686103537521854n;
export const NS_E_DATAPATH_NO_SINK = 942687205196633368n;
export const NS_S_PUBLISHING_POINT_STARTED_WITH_FAILED_SINKS = 942688301487035673n;
export const NS_E_INVALID_PUSH_TEMPLATE = 942689404219888922n;
export const NS_E_INVALID_PUSH_PUBLISHING_POINT = 942690503731516699n;
export const NS_E_CRITICAL_ERROR = 942691603243144476n;
export const NS_E_NO_NEW_CONNECTIONS = 942692702754772253n;
export const NS_E_WSX_INVALID_VERSION = 942693802266400030n;
export const NS_E_HEADER_MISMATCH = 942694901778027807n;
export const NS_E_PUSH_DUPLICATE_PUBLISHING_POINT_NAME = 942796056847783200n;
export const NS_E_NO_SCRIPT_ENGINE = 942797156359411068n;
export const NS_E_PLUGIN_ERROR_REPORTED = 942798255871038845n;
export const NS_E_SOURCE_PLUGIN_NOT_FOUND = 942799355382666622n;
export const NS_E_PLAYLIST_PLUGIN_NOT_FOUND = 942800454894294399n;
export const NS_E_DATA_SOURCE_ENUMERATION_NOT_SUPPORTED = 942801554405922176n;
export const NS_E_MEDIA_PARSER_INVALID_FORMAT = 942802653917549953n;
export const NS_E_SCRIPT_DEBUGGER_NOT_INSTALLED = 942803753429177730n;
export const NS_E_FEATURE_REQUIRES_ENTERPRISE_SERVER = 942804852940805507n;
export const NS_E_WIZARD_RUNNING = 942805952452433284n;
export const NS_E_INVALID_LOG_URL = 942807051964061061n;
export const NS_E_INVALID_MTU_RANGE = 942808151475688838n;
export const NS_E_INVALID_PLAY_STATISTICS = 942809250987316615n;
export const NS_E_LOG_NEED_TO_BE_SKIPPED = 942810350498944392n;
export const NS_E_HTTP_TEXT_DATACONTAINER_SIZE_LIMIT_EXCEEDED = 942811450010572169n;
export const NS_E_PORT_IN_USE = 942812549522199946n;
export const NS_E_PORT_IN_USE_HTTP = 942813649033827723n;
export const NS_E_HTTP_TEXT_DATACONTAINER_INVALID_SERVER_RESPONSE = 942814748545455500n;
export const NS_E_ARCHIVE_REACH_QUOTA = 942815848057083277n;
export const NS_E_ARCHIVE_ABORT_DUE_TO_BCAST = 942816947568711054n;
export const NS_E_ARCHIVE_GAP_DETECTED = 942818047080338831n;
export const NS_E_AUTHORIZATION_FILE_NOT_FOUND = 944445324289447312n;
export const NS_E_BAD_MARKIN = 944446423801076568n;
export const NS_E_BAD_MARKOUT = 944447523312704345n;
export const NS_E_NOMATCHING_MEDIASOURCE = 944448622824332122n;
export const NS_E_UNSUPPORTED_SOURCETYPE = 944449722335959899n;
export const NS_E_TOO_MANY_AUDIO = 944450821847587676n;
export const NS_E_TOO_MANY_VIDEO = 944451921359215453n;
export const NS_E_NOMATCHING_ELEMENT = 944453020870843230n;
export const NS_E_MISMATCHED_MEDIACONTENT = 944454120382471007n;
export const NS_E_CANNOT_DELETE_ACTIVE_SOURCEGROUP = 944455219894098784n;
export const NS_E_AUDIODEVICE_BUSY = 944456319405726561n;
export const NS_E_AUDIODEVICE_UNEXPECTED = 944457418917354338n;
export const NS_E_AUDIODEVICE_BADFORMAT = 944458518428982115n;
export const NS_E_VIDEODEVICE_BUSY = 944459617940609892n;
export const NS_E_VIDEODEVICE_UNEXPECTED = 944460717452237669n;
export const NS_E_INVALIDCALL_WHILE_ENCODER_RUNNING = 944461816963865446n;
export const NS_E_NO_PROFILE_IN_SOURCEGROUP = 944462916475493223n;
export const NS_E_VIDEODRIVER_UNSTABLE = 944464015987121000n;
export const NS_E_VIDCAPSTARTFAILED = 944465115498748777n;
export const NS_E_VIDSOURCECOMPRESSION = 944466215010376554n;
export const NS_E_VIDSOURCESIZE = 944467314522004331n;
export const NS_E_ICMQUERYFORMAT = 944468414033632108n;
export const NS_E_VIDCAPCREATEWINDOW = 944469513545259885n;
export const NS_E_VIDCAPDRVINUSE = 944470613056887662n;
export const NS_E_NO_MEDIAFORMAT_IN_SOURCE = 944471712568515439n;
export const NS_E_NO_VALID_OUTPUT_STREAM = 944472812080143216n;
export const NS_E_NO_VALID_SOURCE_PLUGIN = 944473911591770993n;
export const NS_E_NO_ACTIVE_SOURCEGROUP = 944475011103398770n;
export const NS_E_NO_SCRIPT_STREAM = 944476110615026547n;
export const NS_E_INVALIDCALL_WHILE_ARCHIVAL_RUNNING = 944477210126654324n;
export const NS_E_INVALIDPACKETSIZE = 944478309638282101n;
export const NS_E_PLUGIN_CLSID_INVALID = 944479409149909878n;
export const NS_E_UNSUPPORTED_ARCHIVETYPE = 944480508661537655n;
export const NS_E_UNSUPPORTED_ARCHIVEOPERATION = 944481608173165432n;
export const NS_E_ARCHIVE_FILENAME_NOTSET = 944482707684793209n;
export const NS_E_SOURCEGROUP_NOTPREPARED = 944483807196420986n;
export const NS_E_PROFILE_MISMATCH = 944484906708048763n;
export const NS_E_INCORRECTCLIPSETTINGS = 944486006219676540n;
export const NS_E_NOSTATSAVAILABLE = 944487105731304317n;
export const NS_E_NOTARCHIVING = 944488205242932094n;
export const NS_E_INVALIDCALL_WHILE_ENCODER_STOPPED = 944489304754559871n;
export const NS_E_NOSOURCEGROUPS = 944490404266187648n;
export const NS_E_INVALIDINPUTFPS = 944491503777815425n;
export const NS_E_NO_DATAVIEW_SUPPORT = 944492603289443202n;
export const NS_E_CODEC_UNAVAILABLE = 944493702801070979n;
export const NS_E_ARCHIVE_SAME_AS_INPUT = 944494802312698756n;
export const NS_E_SOURCE_NOTSPECIFIED = 944495901824326533n;
export const NS_E_NO_REALTIME_TIMECOMPRESSION = 944497001335954310n;
export const NS_E_UNSUPPORTED_ENCODER_DEVICE = 944498100847582087n;
export const NS_E_UNEXPECTED_DISPLAY_SETTINGS = 944499200359209864n;
export const NS_E_NO_AUDIODATA = 944500299870837641n;
export const NS_E_INPUTSOURCE_PROBLEM = 944501399382465418n;
export const NS_E_WME_VERSION_MISMATCH = 944502498894093195n;
export const NS_E_NO_REALTIME_PREPROCESS = 944503598405720972n;
export const NS_E_NO_REPEAT_PREPROCESS = 944504697917348749n;
export const NS_E_CANNOT_PAUSE_LIVEBROADCAST = 944505797428976526n;
export const NS_E_DRM_PROFILE_NOT_SET = 944506896940604303n;
export const NS_E_DUPLICATE_DRMPROFILE = 944507996452232080n;
export const NS_E_INVALID_DEVICE = 944509095963859857n;
export const NS_E_SPEECHEDL_ON_NON_MIXEDMODE = 944510195475487634n;
export const NS_E_DRM_PASSWORD_TOO_LONG = 944511294987115411n;
export const NS_E_DEVCONTROL_FAILED_SEEK = 944512394498743188n;
export const NS_E_INTERLACE_REQUIRE_SAMESIZE = 944513494010370965n;
export const NS_E_TOO_MANY_DEVICECONTROL = 944514593521998742n;
export const NS_E_NO_MULTIPASS_FOR_LIVEDEVICE = 944515693033626519n;
export const NS_E_MISSING_AUDIENCE = 944516792545254296n;
export const NS_E_AUDIENCE_CONTENTTYPE_MISMATCH = 944517892056882073n;
export const NS_E_MISSING_SOURCE_INDEX = 944518991568509850n;
export const NS_E_NUM_LANGUAGE_MISMATCH = 944520091080137627n;
export const NS_E_LANGUAGE_MISMATCH = 944521190591765404n;
export const NS_E_VBRMODE_MISMATCH = 944522290103393181n;
export const NS_E_INVALID_INPUT_AUDIENCE_INDEX = 944523389615020958n;
export const NS_E_INVALID_INPUT_LANGUAGE = 944524489126648735n;
export const NS_E_INVALID_INPUT_STREAM = 944525588638276512n;
export const NS_E_EXPECT_MONO_WAV_INPUT = 944526688149904289n;
export const NS_E_INPUT_WAVFORMAT_MISMATCH = 944527787661532066n;
export const NS_E_RECORDQ_DISK_FULL = 944528887173159843n;
export const NS_E_NO_PAL_INVERSE_TELECINE = 944529986684787620n;
export const NS_E_ACTIVE_SG_DEVICE_DISCONNECTED = 944531086196415397n;
export const NS_E_ACTIVE_SG_DEVICE_CONTROL_DISCONNECTED = 944532185708043174n;
export const NS_E_NO_FRAMES_SUBMITTED_TO_ANALYZER = 944533285219670951n;
export const NS_E_INPUT_DOESNOT_SUPPORT_SMPTE = 944534384731298728n;
export const NS_E_NO_SMPTE_WITH_MULTIPLE_SOURCEGROUPS = 944535484242926505n;
export const NS_E_BAD_CONTENTEDL = 944536583754554282n;
export const NS_E_INTERLACEMODE_MISMATCH = 944537683266182059n;
export const NS_E_NONSQUAREPIXELMODE_MISMATCH = 944538782777809836n;
export const NS_E_SMPTEMODE_MISMATCH = 944539882289437613n;
export const NS_E_END_OF_TAPE = 944540981801065390n;
export const NS_E_NO_MEDIA_IN_AUDIENCE = 944542081312693167n;
export const NS_E_NO_AUDIENCES = 944543180824320944n;
export const NS_E_NO_AUDIO_COMPAT = 944544280335948721n;
export const NS_E_INVALID_VBR_COMPAT = 944545379847576498n;
export const NS_E_NO_PROFILE_NAME = 944546479359204275n;
export const NS_E_INVALID_VBR_WITH_UNCOMP = 944547578870832052n;
export const NS_E_MULTIPLE_VBR_AUDIENCES = 944548678382459829n;
export const NS_E_UNCOMP_COMP_COMBINATION = 944549777894087606n;
export const NS_E_MULTIPLE_AUDIO_CODECS = 944550877405715383n;
export const NS_E_MULTIPLE_AUDIO_FORMATS = 944551976917343160n;
export const NS_E_AUDIO_BITRATE_STEPDOWN = 944553076428970937n;
export const NS_E_INVALID_AUDIO_PEAKRATE = 944554175940598714n;
export const NS_E_INVALID_AUDIO_PEAKRATE_2 = 944555275452226491n;
export const NS_E_INVALID_AUDIO_BUFFERMAX = 944556374963854268n;
export const NS_E_MULTIPLE_VIDEO_CODECS = 944557474475482045n;
export const NS_E_MULTIPLE_VIDEO_SIZES = 944558573987109822n;
export const NS_E_INVALID_VIDEO_BITRATE = 944559673498737599n;
export const NS_E_VIDEO_BITRATE_STEPDOWN = 944560773010365376n;
export const NS_E_INVALID_VIDEO_PEAKRATE = 944561872521993153n;
export const NS_E_INVALID_VIDEO_PEAKRATE_2 = 944562972033620930n;
export const NS_E_INVALID_VIDEO_WIDTH = 944564071545248707n;
export const NS_E_INVALID_VIDEO_HEIGHT = 944565171056876484n;
export const NS_E_INVALID_VIDEO_FPS = 944566270568504261n;
export const NS_E_INVALID_VIDEO_KEYFRAME = 944567370080132038n;
export const NS_E_INVALID_VIDEO_IQUALITY = 944568469591759815n;
export const NS_E_INVALID_VIDEO_CQUALITY = 944569569103387592n;
export const NS_E_INVALID_VIDEO_BUFFER = 944570668615015369n;
export const NS_E_INVALID_VIDEO_BUFFERMAX = 944571768126643146n;
export const NS_E_INVALID_VIDEO_BUFFERMAX_2 = 944572867638270923n;
export const NS_E_INVALID_VIDEO_WIDTH_ALIGN = 944573967149898700n;
export const NS_E_INVALID_VIDEO_HEIGHT_ALIGN = 944575066661526477n;
export const NS_E_MULTIPLE_SCRIPT_BITRATES = 944576166173154254n;
export const NS_E_INVALID_SCRIPT_BITRATE = 944577265684782031n;
export const NS_E_MULTIPLE_FILE_BITRATES = 944578365196409808n;
export const NS_E_INVALID_FILE_BITRATE = 944579464708037585n;
export const NS_E_SAME_AS_INPUT_COMBINATION = 944580564219665362n;
export const NS_E_SOURCE_CANNOT_LOOP = 944581663731293139n;
export const NS_E_INVALID_FOLDDOWN_COEFFICIENTS = 944582763242920916n;
export const NS_E_DRMPROFILE_NOTFOUND = 944583862754548693n;
export const NS_E_INVALID_TIMECODE = 944584962266176470n;
export const NS_E_NO_AUDIO_TIMECOMPRESSION = 944586061777804247n;
export const NS_E_NO_TWOPASS_TIMECOMPRESSION = 944587161289432024n;
export const NS_E_TIMECODE_REQUIRES_VIDEOSTREAM = 944588260801059801n;
export const NS_E_NO_MBR_WITH_TIMECODE = 944589360312687578n;
export const NS_E_INVALID_INTERLACEMODE = 944590459824315355n;
export const NS_E_INVALID_INTERLACE_COMPAT = 944591559335943132n;
export const NS_E_INVALID_NONSQUAREPIXEL_COMPAT = 944592658847570909n;
export const NS_E_INVALID_SOURCE_WITH_DEVICE_CONTROL = 944593758359198686n;
export const NS_E_CANNOT_GENERATE_BROADCAST_INFO_FOR_QUALITYVBR = 944594857870826463n;
export const NS_E_EXCEED_MAX_DRM_PROFILE_LIMIT = 944595957382454240n;
export const NS_E_DEVICECONTROL_UNSTABLE = 944597056894082017n;
export const NS_E_INVALID_PIXEL_ASPECT_RATIO = 944598156405709794n;
export const NS_E_AUDIENCE__LANGUAGE_CONTENTTYPE_MISMATCH = 944599255917337571n;
export const NS_E_INVALID_PROFILE_CONTENTTYPE = 944600355428965348n;
export const NS_E_TRANSFORM_PLUGIN_NOT_FOUND = 944601454940593125n;
export const NS_E_TRANSFORM_PLUGIN_INVALID = 944602554452220902n;
export const NS_E_EDL_REQUIRED_FOR_DEVICE_MULTIPASS = 944603653963848679n;
export const NS_E_INVALID_VIDEO_WIDTH_FOR_INTERLACED_ENCODING = 944604753475476456n;
export const NS_E_MARKIN_UNSUPPORTED = 947744958684404713n;
export const NS_E_DRM_INVALID_APPLICATION = 947746058196035345n;
export const NS_E_DRM_LICENSE_STORE_ERROR = 947747157707663122n;
export const NS_E_DRM_SECURE_STORE_ERROR = 947748257219290899n;
export const NS_E_DRM_LICENSE_STORE_SAVE_ERROR = 947749356730918676n;
export const NS_E_DRM_SECURE_STORE_UNLOCK_ERROR = 947750456242546453n;
export const NS_E_DRM_INVALID_CONTENT = 947751555754174230n;
export const NS_E_DRM_UNABLE_TO_OPEN_LICENSE = 947752655265802007n;
export const NS_E_DRM_INVALID_LICENSE = 947753754777429784n;
export const NS_E_DRM_INVALID_MACHINE = 947755953800685337n;
export const NS_E_DRM_ENUM_LICENSE_FAILED = 947757053312313115n;
export const NS_E_DRM_INVALID_LICENSE_REQUEST = 947758152823940892n;
export const NS_E_DRM_UNABLE_TO_INITIALIZE = 947759252335568669n;
export const NS_E_DRM_UNABLE_TO_ACQUIRE_LICENSE = 947760351847196446n;
export const NS_E_DRM_INVALID_LICENSE_ACQUIRED = 947761451358824223n;
export const NS_E_DRM_NO_RIGHTS = 947762550870452000n;
export const NS_E_DRM_KEY_ERROR = 947763650382079777n;
export const NS_E_DRM_ENCRYPT_ERROR = 947764749893707554n;
export const NS_E_DRM_DECRYPT_ERROR = 947766948916963107n;
export const NS_E_DRM_LICENSE_INVALID_XML = 947768048428590885n;
export const NS_S_DRM_LICENSE_ACQUIRED = 947769144718993190n;
export const NS_S_DRM_INDIVIDUALIZED = 947770244230620967n;
export const NS_E_DRM_NEEDS_INDIVIDUALIZATION = 947771346963474216n;
export const NS_E_DRM_ALREADY_INDIVIDUALIZED = 947772446475101993n;
export const NS_E_DRM_ACTION_NOT_QUERIED = 947773545986729770n;
export const NS_E_DRM_ACQUIRING_LICENSE = 947774645498357547n;
export const NS_E_DRM_INDIVIDUALIZING = 947775745009985324n;
export const NS_E_BACKUP_RESTORE_FAILURE = 947776844521613101n;
export const NS_E_BACKUP_RESTORE_BAD_REQUEST_ID = 947777944033240878n;
export const NS_E_DRM_PARAMETERS_MISMATCHED = 947779043544868655n;
export const NS_E_DRM_UNABLE_TO_CREATE_LICENSE_OBJECT = 947780143056496432n;
export const NS_E_DRM_UNABLE_TO_CREATE_INDI_OBJECT = 947781242568124209n;
export const NS_E_DRM_UNABLE_TO_CREATE_ENCRYPT_OBJECT = 947782342079751986n;
export const NS_E_DRM_UNABLE_TO_CREATE_DECRYPT_OBJECT = 947783441591379763n;
export const NS_E_DRM_UNABLE_TO_CREATE_PROPERTIES_OBJECT = 947784541103007540n;
export const NS_E_DRM_UNABLE_TO_CREATE_BACKUP_OBJECT = 947785640614635317n;
export const NS_E_DRM_INDIVIDUALIZE_ERROR = 947786740126263094n;
export const NS_E_DRM_LICENSE_OPEN_ERROR = 947787839637890871n;
export const NS_E_DRM_LICENSE_CLOSE_ERROR = 947788939149518648n;
export const NS_E_DRM_GET_LICENSE_ERROR = 947790038661146425n;
export const NS_E_DRM_QUERY_ERROR = 947791138172774202n;
export const NS_E_DRM_REPORT_ERROR = 947792237684401979n;
export const NS_E_DRM_GET_LICENSESTRING_ERROR = 947793337196029756n;
export const NS_E_DRM_GET_CONTENTSTRING_ERROR = 947794436707657533n;
export const NS_E_DRM_MONITOR_ERROR = 947795536219285310n;
export const NS_E_DRM_UNABLE_TO_SET_PARAMETER = 947796635730913087n;
export const NS_E_DRM_INVALID_APPDATA = 947797735242540864n;
export const NS_E_DRM_INVALID_APPDATA_VERSION = 947798834754168641n;
export const NS_E_DRM_BACKUP_EXISTS = 947799934265796418n;
export const NS_E_DRM_BACKUP_CORRUPT = 947801033777424195n;
export const NS_E_DRM_BACKUPRESTORE_BUSY = 947802133289051972n;
export const NS_E_BACKUP_RESTORE_BAD_DATA = 947803232800679749n;
export const NS_S_DRM_MONITOR_CANCELLED = 947804329091082054n;
export const NS_S_DRM_ACQUIRE_CANCELLED = 947805428602709831n;
export const NS_E_DRM_LICENSE_UNUSABLE = 947806531335563080n;
export const NS_E_DRM_INVALID_PROPERTY = 947807630847190857n;
export const NS_E_DRM_SECURE_STORE_NOT_FOUND = 947808730358818634n;
export const NS_E_DRM_CACHED_CONTENT_ERROR = 947809829870446411n;
export const NS_E_DRM_INDIVIDUALIZATION_INCOMPLETE = 947810929382074188n;
export const NS_E_DRM_DRIVER_AUTH_FAILURE = 947812028893701965n;
export const NS_E_DRM_NEED_UPGRADE_MSSAP = 947813128405329742n;
export const NS_E_DRM_REOPEN_CONTENT = 947814227916957519n;
export const NS_E_DRM_DRIVER_DIGIOUT_FAILURE = 947815327428585296n;
export const NS_E_DRM_INVALID_SECURESTORE_PASSWORD = 947816426940213073n;
export const NS_E_DRM_APPCERT_REVOKED = 947817526451840850n;
export const NS_E_DRM_RESTORE_FRAUD = 947818625963468627n;
export const NS_E_DRM_HARDWARE_INCONSISTENT = 947819725475096404n;
export const NS_E_DRM_SDMI_TRIGGER = 947820824986724181n;
export const NS_E_DRM_SDMI_NOMORECOPIES = 947821924498351958n;
export const NS_E_DRM_UNABLE_TO_CREATE_HEADER_OBJECT = 947823024009979735n;
export const NS_E_DRM_UNABLE_TO_CREATE_KEYS_OBJECT = 947824123521607512n;
export const NS_E_DRM_LICENSE_NOTACQUIRED = 947825223033235289n;
export const NS_E_DRM_UNABLE_TO_CREATE_CODING_OBJECT = 947826322544863066n;
export const NS_E_DRM_UNABLE_TO_CREATE_STATE_DATA_OBJECT = 947827422056490843n;
export const NS_E_DRM_BUFFER_TOO_SMALL = 947828521568118620n;
export const NS_E_DRM_UNSUPPORTED_PROPERTY = 947829621079746397n;
export const NS_E_DRM_ERROR_BAD_NET_RESP = 947830720591374174n;
export const NS_E_DRM_STORE_NOTALLSTORED = 947831820103001951n;
export const NS_E_DRM_SECURITY_COMPONENT_SIGNATURE_INVALID = 947832919614629728n;
export const NS_E_DRM_INVALID_DATA = 947834019126257505n;
export const NS_E_DRM_POLICY_DISABLE_ONLINE = 947835118637885282n;
export const NS_E_DRM_UNABLE_TO_CREATE_AUTHENTICATION_OBJECT = 947836218149513059n;
export const NS_E_DRM_NOT_CONFIGURED = 947837317661140836n;
export const NS_E_DRM_DEVICE_ACTIVATION_CANCELED = 947838417172768613n;
export const NS_E_BACKUP_RESTORE_TOO_MANY_RESETS = 947839516684396390n;
export const NS_E_DRM_DEBUGGING_NOT_ALLOWED = 947840616196024167n;
export const NS_E_DRM_OPERATION_CANCELED = 947841715707651944n;
export const NS_E_DRM_RESTRICTIONS_NOT_RETRIEVED = 947842815219279721n;
export const NS_E_DRM_UNABLE_TO_CREATE_PLAYLIST_OBJECT = 947843914730907498n;
export const NS_E_DRM_UNABLE_TO_CREATE_PLAYLIST_BURN_OBJECT = 947845014242535275n;
export const NS_E_DRM_UNABLE_TO_CREATE_DEVICE_REGISTRATION_OBJECT = 947846113754163052n;
export const NS_E_DRM_UNABLE_TO_CREATE_METERING_OBJECT = 947847213265790829n;
export const NS_S_DRM_BURNABLE_TRACK = 947848309556193134n;
export const NS_S_DRM_BURNABLE_TRACK_WITH_PLAYLIST_RESTRICTION = 947849409067820911n;
export const NS_E_DRM_TRACK_EXCEEDED_PLAYLIST_RESTICTION = 947850511800674160n;
export const NS_E_DRM_TRACK_EXCEEDED_TRACKBURN_RESTRICTION = 947851611312301937n;
export const NS_E_DRM_UNABLE_TO_GET_DEVICE_CERT = 947852710823929714n;
export const NS_E_DRM_UNABLE_TO_GET_SECURE_CLOCK = 947853810335557491n;
export const NS_E_DRM_UNABLE_TO_SET_SECURE_CLOCK = 947854909847185268n;
export const NS_E_DRM_UNABLE_TO_GET_SECURE_CLOCK_FROM_SERVER = 947856009358813045n;
export const NS_E_DRM_POLICY_METERING_DISABLED = 947857108870440822n;
export const NS_E_DRM_TRANSFER_CHAINED_LICENSES_UNSUPPORTED = 947858208382068599n;
export const NS_E_DRM_SDK_VERSIONMISMATCH = 947859307893696376n;
export const NS_E_DRM_LIC_NEEDS_DEVICE_CLOCK_SET = 947860407405324153n;
export const NS_E_LICENSE_HEADER_MISSING_URL = 947861506916951930n;
export const NS_E_DEVICE_NOT_WMDRM_DEVICE = 947862606428579707n;
export const NS_E_DRM_INVALID_APPCERT = 947863705940207484n;
export const NS_E_DRM_PROTOCOL_FORCEFUL_TERMINATION_ON_PETITION = 947864805451835261n;
export const NS_E_DRM_PROTOCOL_FORCEFUL_TERMINATION_ON_CHALLENGE = 947865904963463038n;
export const NS_E_DRM_CHECKPOINT_FAILED = 947867004475090815n;
export const NS_E_DRM_BB_UNABLE_TO_INITIALIZE = 947868103986718592n;
export const NS_E_DRM_UNABLE_TO_LOAD_HARDWARE_ID = 947869203498346369n;
export const NS_E_DRM_UNABLE_TO_OPEN_DATA_STORE = 947870303009974146n;
export const NS_E_DRM_DATASTORE_CORRUPT = 947871402521601923n;
export const NS_E_DRM_UNABLE_TO_CREATE_INMEMORYSTORE_OBJECT = 947872502033229700n;
export const NS_E_DRM_STUBLIB_REQUIRED = 947873601544857477n;
export const NS_E_DRM_UNABLE_TO_CREATE_CERTIFICATE_OBJECT = 947874701056485254n;
export const NS_E_DRM_MIGRATION_TARGET_NOT_ONLINE = 947875800568113031n;
export const NS_E_DRM_INVALID_MIGRATION_IMAGE = 947876900079740808n;
export const NS_E_DRM_MIGRATION_TARGET_STATES_CORRUPTED = 947877999591368585n;
export const NS_E_DRM_MIGRATION_IMPORTER_NOT_AVAILABLE = 947879099102996362n;
export const NS_DRM_E_MIGRATION_UPGRADE_WITH_DIFF_SID = 947880198614624139n;
export const NS_DRM_E_MIGRATION_SOURCE_MACHINE_IN_USE = 947881298126251916n;
export const NS_DRM_E_MIGRATION_TARGET_MACHINE_LESS_THAN_LH = 947882397637879693n;
export const NS_DRM_E_MIGRATION_IMAGE_ALREADY_EXISTS = 947883497149507470n;
export const NS_E_DRM_HARDWAREID_MISMATCH = 947884596661135247n;
export const NS_E_INVALID_DRMV2CLT_STUBLIB = 947885696172763024n;
export const NS_E_DRM_MIGRATION_INVALID_LEGACYV2_DATA = 947886795684390801n;
export const NS_E_DRM_MIGRATION_LICENSE_ALREADY_EXISTS = 947887895196018578n;
export const NS_E_DRM_MIGRATION_INVALID_LEGACYV2_SST_PASSWORD = 947888994707646355n;
export const NS_E_DRM_MIGRATION_NOT_SUPPORTED = 947890094219274132n;
export const NS_E_DRM_UNABLE_TO_CREATE_MIGRATION_IMPORTER_OBJECT = 947891193730901909n;
export const NS_E_DRM_CHECKPOINT_MISMATCH = 947892293242529686n;
export const NS_E_DRM_CHECKPOINT_CORRUPT = 947893392754157463n;
export const NS_E_REG_FLUSH_FAILURE = 947894492265785240n;
export const NS_E_HDS_KEY_MISMATCH = 947895591777413017n;
export const NS_E_DRM_MIGRATION_OPERATION_CANCELLED = 947896691289040794n;
export const NS_E_DRM_MIGRATION_OBJECT_IN_USE = 947897790800668571n;
export const NS_E_DRM_MALFORMED_CONTENT_HEADER = 947963761498335132n;
export const NS_E_DRM_LICENSE_EXPIRED = 947964861009962968n;
export const NS_E_DRM_LICENSE_NOTENABLED = 947965960521590745n;
export const NS_E_DRM_LICENSE_APPSECLOW = 947967060033218522n;
export const NS_E_DRM_STORE_NEEDINDI = 947968159544846299n;
export const NS_E_DRM_STORE_NOTALLOWED = 947969259056474076n;
export const NS_E_DRM_LICENSE_APP_NOTALLOWED = 947970358568101853n;
export const NS_S_DRM_NEEDS_INDIVIDUALIZATION = 947971454858504158n;
export const NS_E_DRM_LICENSE_CERT_EXPIRED = 947972557591357407n;
export const NS_E_DRM_LICENSE_SECLOW = 947973657102985184n;
export const NS_E_DRM_LICENSE_CONTENT_REVOKED = 947974756614612961n;
export const NS_E_DRM_DEVICE_NOT_REGISTERED = 948018737079724002n;
export const NS_E_DRM_LICENSE_NOSAP = 948019836591351818n;
export const NS_E_DRM_LICENSE_NOSVP = 948020936102979595n;
export const NS_E_DRM_LICENSE_NOWDM = 948022035614607372n;
export const NS_E_DRM_LICENSE_NOTRUSTEDCODEC = 948023135126235149n;
export const NS_E_DRM_SOURCEID_NOT_SUPPORTED = 948074812172740622n;
export const NS_E_DRM_NEEDS_UPGRADE_TEMPFILE = 948075911684368445n;
export const NS_E_DRM_NEED_UPGRADE_PD = 948077011195996222n;
export const NS_E_DRM_SIGNATURE_FAILURE = 948078110707623999n;
export const NS_E_DRM_LICENSE_SERVER_INFO_MISSING = 948079210219251776n;
export const NS_E_DRM_BUSY = 948080309730879553n;
export const NS_E_DRM_PD_TOO_MANY_DEVICES = 948081409242507330n;
export const NS_E_DRM_INDIV_FRAUD = 948082508754135107n;
export const NS_E_DRM_INDIV_NO_CABS = 948083608265762884n;
export const NS_E_DRM_INDIV_SERVICE_UNAVAILABLE = 948084707777390661n;
export const NS_E_DRM_RESTORE_SERVICE_UNAVAILABLE = 948085807289018438n;
export const NS_E_DRM_CLIENT_CODE_EXPIRED = 948086906800646215n;
export const NS_E_DRM_NO_UPLINK_LICENSE = 948088006312273992n;
export const NS_E_DRM_INVALID_KID = 948089105823901769n;
export const NS_E_DRM_LICENSE_INITIALIZATION_ERROR = 948091304847157322n;
export const NS_E_DRM_CHAIN_TOO_LONG = 948092404358785100n;
export const NS_E_DRM_UNSUPPORTED_ALGORITHM = 948093503870412877n;
export const NS_E_DRM_LICENSE_DELETION_ERROR = 948183663823890510n;
export const NS_E_DRM_INVALID_CERTIFICATE = 948184763335518368n;
export const NS_E_DRM_CERTIFICATE_REVOKED = 948185862847146145n;
export const NS_E_DRM_LICENSE_UNAVAILABLE = 948186962358773922n;
export const NS_E_DRM_DEVICE_LIMIT_REACHED = 948188061870401699n;
export const NS_E_DRM_UNABLE_TO_VERIFY_PROXIMITY = 948189161382029476n;
export const NS_E_DRM_MUST_REGISTER = 948190260893657253n;
export const NS_E_DRM_MUST_APPROVE = 948191360405285030n;
export const NS_E_DRM_MUST_REVALIDATE = 948192459916912807n;
export const NS_E_DRM_INVALID_PROXIMITY_RESPONSE = 948193559428540584n;
export const NS_E_DRM_INVALID_SESSION = 948194658940168361n;
export const NS_E_DRM_DEVICE_NOT_OPEN = 948195758451796138n;
export const NS_E_DRM_DEVICE_ALREADY_REGISTERED = 948196857963423915n;
export const NS_E_DRM_UNSUPPORTED_PROTOCOL_VERSION = 948197957475051692n;
export const NS_E_DRM_UNSUPPORTED_ACTION = 948199056986679469n;
export const NS_E_DRM_CERTIFICATE_SECURITY_LEVEL_INADEQUATE = 948200156498307246n;
export const NS_E_DRM_UNABLE_TO_OPEN_PORT = 948201256009935023n;
export const NS_E_DRM_BAD_REQUEST = 948202355521562800n;
export const NS_E_DRM_INVALID_CRL = 948203455033190577n;
export const NS_E_DRM_ATTRIBUTE_TOO_LONG = 948204554544818354n;
export const NS_E_DRM_EXPIRED_LICENSEBLOB = 948205654056446131n;
export const NS_E_DRM_INVALID_LICENSEBLOB = 948206753568073908n;
export const NS_E_DRM_INCLUSION_LIST_REQUIRED = 948207853079701685n;
export const NS_E_DRM_DRMV2CLT_REVOKED = 948208952591329462n;
export const NS_E_DRM_RIV_TOO_SMALL = 948293614986668215n;
export const NS_E_OUTPUT_PROTECTION_LEVEL_UNSUPPORTED = 948294714498296068n;
export const NS_E_COMPRESSED_DIGITAL_VIDEO_PROTECTION_LEVEL_UNSUPPORTED = 948295814009923845n;
export const NS_E_UNCOMPRESSED_DIGITAL_VIDEO_PROTECTION_LEVEL_UNSUPPORTED = 948296913521551622n;
export const NS_E_ANALOG_VIDEO_PROTECTION_LEVEL_UNSUPPORTED = 948298013033179399n;
export const NS_E_COMPRESSED_DIGITAL_AUDIO_PROTECTION_LEVEL_UNSUPPORTED = 948299112544807176n;
export const NS_E_UNCOMPRESSED_DIGITAL_AUDIO_PROTECTION_LEVEL_UNSUPPORTED = 948300212056434953n;
export const NS_E_OUTPUT_PROTECTION_SCHEME_UNSUPPORTED = 948843370800556298n;
export const NS_S_REBOOT_RECOMMENDED = 948844467090959096n;
export const NS_S_REBOOT_REQUIRED = 948845566602586873n;
export const NS_E_REBOOT_RECOMMENDED = 948846669335440122n;
export const NS_E_REBOOT_REQUIRED = 948847768847067899n;
export const NS_E_SETUP_INCOMPLETE = 948848868358695676n;
export const NS_E_SETUP_DRM_MIGRATION_FAILED = 948849967870323453n;
export const NS_E_SETUP_IGNORABLE_FAILURE = 948851067381951230n;
export const NS_E_SETUP_DRM_MIGRATION_FAILED_AND_IGNORABLE_FAILURE = 948852166893579007n;
export const NS_E_SETUP_BLOCKED = 949942882428332800n;
export const NS_E_UNKNOWN_PROTOCOL = 949943981939961568n;
export const NS_E_REDIRECT_TO_PROXY = 949945081451589345n;
export const NS_E_INTERNAL_SERVER_ERROR = 949946180963217122n;
export const NS_E_BAD_REQUEST = 949947280474844899n;
export const NS_E_ERROR_FROM_PROXY = 949948379986472676n;
export const NS_E_PROXY_TIMEOUT = 949949479498100453n;
export const NS_E_SERVER_UNAVAILABLE = 949950579009728230n;
export const NS_E_REFUSED_BY_SERVER = 949951678521356007n;
export const NS_E_INCOMPATIBLE_SERVER = 949952778032983784n;
export const NS_E_MULTICAST_DISABLED = 949953877544611561n;
export const NS_E_INVALID_REDIRECT = 949954977056239338n;
export const NS_E_ALL_PROTOCOLS_DISABLED = 949956076567867115n;
export const NS_E_MSBD_NO_LONGER_SUPPORTED = 949957176079494892n;
export const NS_E_PROXY_NOT_FOUND = 949958275591122669n;
export const NS_E_CANNOT_CONNECT_TO_PROXY = 949959375102750446n;
export const NS_E_SERVER_DNS_TIMEOUT = 949960474614378223n;
export const NS_E_PROXY_DNS_TIMEOUT = 949961574126006000n;
export const NS_E_CLOSED_ON_SUSPEND = 949962673637633777n;
export const NS_E_CANNOT_READ_PLAYLIST_FROM_MEDIASERVER = 949963773149261554n;
export const NS_E_SESSION_NOT_FOUND = 949964872660889331n;
export const NS_E_REQUIRE_STREAMING_CLIENT = 949965972172517108n;
export const NS_E_PLAYLIST_ENTRY_HAS_CHANGED = 949967071684144885n;
export const NS_E_PROXY_ACCESSDENIED = 949968171195772662n;
export const NS_E_PROXY_SOURCE_ACCESSDENIED = 949969270707400439n;
export const NS_E_NETWORK_SINK_WRITE = 949970370219028216n;
export const NS_E_FIREWALL = 949971469730655993n;
export const NS_E_MMS_NOT_SUPPORTED = 949972569242283770n;
export const NS_E_SERVER_ACCESSDENIED = 949973668753911547n;
export const NS_E_RESOURCE_GONE = 949974768265539324n;
export const NS_E_NO_EXISTING_PACKETIZER = 949975867777167101n;
export const NS_E_BAD_SYNTAX_IN_SERVER_RESPONSE = 949976967288794878n;
export const NS_I_RECONNECTED = 949978064652939007n;
export const NS_E_RESET_SOCKET_CONNECTION = 949979166312050432n;
export const NS_I_NOLOG_STOP = 949980263676194561n;
export const NS_E_TOO_MANY_HOPS = 949981365335305986n;
export const NS_I_EXISTING_PACKETIZER = 949982462699450115n;
export const NS_I_MANUAL_PROXY = 949983562211077892n;
export const NS_E_TOO_MUCH_DATA_FROM_SERVER = 949984663870189317n;
export const NS_E_CONNECT_TIMEOUT = 949985763381817094n;
export const NS_E_PROXY_CONNECT_TIMEOUT = 949986862893444871n;
export const NS_E_SESSION_INVALID = 949987962405072648n;
export const NS_S_EOSRECEDING = 949989058695474953n;
export const NS_E_PACKETSINK_UNKNOWN_FEC_STREAM = 949990161428328202n;
export const NS_E_PUSH_CANNOTCONNECT = 949991260939955979n;
export const NS_E_INCOMPATIBLE_PUSH_SERVER = 949992360451583756n;
export const NS_S_CHANGENOTICE = 951042390834884365n;
export const NS_E_END_OF_PLAYLIST = 951043493567738568n;
export const NS_E_USE_FILE_SOURCE = 951044593079366345n;
export const NS_E_PROPERTY_NOT_FOUND = 951046792102621898n;
export const NS_E_PROPERTY_READ_ONLY = 951047891614249676n;
export const NS_E_TABLE_KEY_NOT_FOUND = 951050090637505229n;
export const NS_E_INVALID_QUERY_OPERATOR = 951051190149133007n;
export const NS_E_INVALID_QUERY_PROPERTY = 951053389172388560n;
export const NS_E_PROPERTY_NOT_SUPPORTED = 951055588195644114n;
export const NS_E_SCHEMA_CLASSIFY_FAILURE = 951056687707271892n;
export const NS_E_METADATA_FORMAT_NOT_SUPPORTED = 951057787218899669n;
export const NS_E_METADATA_NO_EDITING_CAPABILITY = 951058886730527446n;
export const NS_E_METADATA_CANNOT_SET_LOCALE = 951059986242155223n;
export const NS_E_METADATA_LANGUAGE_NOT_SUPORTED = 951061085753783000n;
export const NS_E_METADATA_NO_RFC1766_NAME_FOR_LOCALE = 951062185265410777n;
export const NS_E_METADATA_NOT_AVAILABLE = 951063284777038554n;
export const NS_E_METADATA_CACHE_DATA_NOT_AVAILABLE = 951064384288666331n;
export const NS_E_METADATA_INVALID_DOCUMENT_TYPE = 951065483800294108n;
export const NS_E_METADATA_IDENTIFIER_NOT_AVAILABLE = 951066583311921885n;
export const NS_E_METADATA_CANNOT_RETRIEVE_FROM_OFFLINE_CACHE = 357361680986846;
export const VFW_HIDE_SETTINGS_PAGE = 1;
export const VFW_HIDE_VIDEOSRC_PAGE = 2;
export const VFW_HIDE_CAMERACONTROL_PAGE = 4;
export const VFW_OEM_ADD_PAGE = 2147483648;
export const VFW_USE_DEVICE_HANDLE = 1;
export const VFW_USE_STREAM_HANDLE = 2;
export const VFW_QUERY_DEV_CHANGED = 256;
export const MCIERR_INVALID_DEVICE_ID = 257;
export const MCIERR_UNRECOGNIZED_KEYWORD = 259;
export const MCIERR_UNRECOGNIZED_COMMAND = 261;
export const MCIERR_HARDWARE = 262;
export const MCIERR_INVALID_DEVICE_NAME = 263;
export const MCIERR_OUT_OF_MEMORY = 264;
export const MCIERR_DEVICE_OPEN = 265;
export const MCIERR_CANNOT_LOAD_DRIVER = 266;
export const MCIERR_MISSING_COMMAND_STRING = 267;
export const MCIERR_PARAM_OVERFLOW = 268;
export const MCIERR_MISSING_STRING_ARGUMENT = 269;
export const MCIERR_BAD_INTEGER = 270;
export const MCIERR_PARSER_INTERNAL = 271;
export const MCIERR_DRIVER_INTERNAL = 272;
export const MCIERR_MISSING_PARAMETER = 273;
export const MCIERR_UNSUPPORTED_FUNCTION = 274;
export const MCIERR_FILE_NOT_FOUND = 275;
export const MCIERR_DEVICE_NOT_READY = 276;
export const MCIERR_INTERNAL = 277;
export const MCIERR_DRIVER = 278;
export const MCIERR_CANNOT_USE_ALL = 279;
export const MCIERR_MULTIPLE = 280;
export const MCIERR_EXTENSION_NOT_FOUND = 281;
export const MCIERR_OUTOFRANGE = 282;
export const MCIERR_FLAGS_NOT_COMPATIBLE = 284;
export const MCIERR_FILE_NOT_SAVED = 286;
export const MCIERR_DEVICE_TYPE_REQUIRED = 287;
export const MCIERR_DEVICE_LOCKED = 288;
export const MCIERR_DUPLICATE_ALIAS = 289;
export const MCIERR_BAD_CONSTANT = 290;
export const MCIERR_MUST_USE_SHAREABLE = 291;
export const MCIERR_MISSING_DEVICE_NAME = 292;
export const MCIERR_BAD_TIME_FORMAT = 293;
export const MCIERR_NO_CLOSING_QUOTE = 294;
export const MCIERR_DUPLICATE_FLAGS = 295;
export const MCIERR_INVALID_FILE = 296;
export const MCIERR_NULL_PARAMETER_BLOCK = 297;
export const MCIERR_UNNAMED_RESOURCE = 298;
export const MCIERR_NEW_REQUIRES_ALIAS = 299;
export const MCIERR_NOTIFY_ON_AUTO_OPEN = 300;
export const MCIERR_NO_ELEMENT_ALLOWED = 301;
export const MCIERR_NONAPPLICABLE_FUNCTION = 302;
export const MCIERR_ILLEGAL_FOR_AUTO_OPEN = 303;
export const MCIERR_FILENAME_REQUIRED = 304;
export const MCIERR_EXTRA_CHARACTERS = 305;
export const MCIERR_DEVICE_NOT_INSTALLED = 306;
export const MCIERR_GET_CD = 307;
export const MCIERR_SET_CD = 308;
export const MCIERR_SET_DRIVE = 309;
export const MCIERR_DEVICE_LENGTH = 310;
export const MCIERR_DEVICE_ORD_LENGTH = 311;
export const MCIERR_NO_INTEGER = 312;
export const MCIERR_WAVE_OUTPUTSINUSE = 320;
export const MCIERR_WAVE_SETOUTPUTINUSE = 321;
export const MCIERR_WAVE_INPUTSINUSE = 322;
export const MCIERR_WAVE_SETINPUTINUSE = 323;
export const MCIERR_WAVE_OUTPUTUNSPECIFIED = 324;
export const MCIERR_WAVE_INPUTUNSPECIFIED = 325;
export const MCIERR_WAVE_OUTPUTSUNSUITABLE = 326;
export const MCIERR_WAVE_SETOUTPUTUNSUITABLE = 327;
export const MCIERR_WAVE_INPUTSUNSUITABLE = 328;
export const MCIERR_WAVE_SETINPUTUNSUITABLE = 329;
export const MCIERR_SEQ_DIV_INCOMPATIBLE = 336;
export const MCIERR_SEQ_PORT_INUSE = 337;
export const MCIERR_SEQ_PORT_NONEXISTENT = 338;
export const MCIERR_SEQ_PORT_MAPNODEVICE = 339;
export const MCIERR_SEQ_PORT_MISCERROR = 340;
export const MCIERR_SEQ_TIMER = 341;
export const MCIERR_SEQ_PORTUNSPECIFIED = 342;
export const MCIERR_SEQ_NOMIDIPRESENT = 343;
export const MCIERR_NO_WINDOW = 346;
export const MCIERR_CREATEWINDOW = 347;
export const MCIERR_FILE_READ = 348;
export const MCIERR_FILE_WRITE = 349;
export const MCIERR_NO_IDENTITY = 350;
export const MCIERR_CUSTOM_DRIVER_BASE = 512;
export const MCI_FIRST = 2048;
export const MCI_ESCAPE = 2053;
export const MCI_INFO = 2058;
export const MCI_GETDEVCAPS = 2059;
export const MCI_SPIN = 2060;
export const MCI_SET = 2061;
export const MCI_SYSINFO = 2064;
export const MCI_BREAK = 2065;
export const MCI_STATUS = 2068;
export const MCI_CUE = 2096;
export const MCI_REALIZE = 2112;
export const MCI_WINDOW = 2113;
export const MCI_PUT = 2114;
export const MCI_WHERE = 2115;
export const MCI_FREEZE = 2116;
export const MCI_UNFREEZE = 2117;
export const MCI_LOAD = 2128;
export const MCI_UPDATE = 2132;
export const MCI_USER_MESSAGES = 3072;
export const MCI_LAST = 4095;
export const MCI_DEVTYPE_VCR = 513;
export const MCI_DEVTYPE_VIDEODISC = 514;
export const MCI_DEVTYPE_OVERLAY = 515;
export const MCI_DEVTYPE_CD_AUDIO = 516;
export const MCI_DEVTYPE_DAT = 517;
export const MCI_DEVTYPE_SCANNER = 518;
export const MCI_DEVTYPE_ANIMATION = 519;
export const MCI_DEVTYPE_DIGITAL_VIDEO = 520;
export const MCI_DEVTYPE_OTHER = 521;
export const MCI_DEVTYPE_WAVEFORM_AUDIO = 522;
export const MCI_DEVTYPE_SEQUENCER = 523;
export const MCI_DEVTYPE_FIRST = 513;
export const MCI_DEVTYPE_LAST = 523;
export const MCI_DEVTYPE_FIRST_USER = 4096;
export const MCI_FORMAT_MILLISECONDS = 0;
export const MCI_FORMAT_HMS = 1;
export const MCI_FORMAT_MSF = 2;
export const MCI_FORMAT_FRAMES = 3;
export const MCI_FORMAT_SMPTE_24 = 4;
export const MCI_FORMAT_SMPTE_25 = 5;
export const MCI_FORMAT_SMPTE_30 = 6;
export const MCI_FORMAT_SMPTE_30DROP = 7;
export const MCI_FORMAT_BYTES = 8;
export const MCI_FORMAT_SAMPLES = 9;
export const MCI_FORMAT_TMSF = 10;
export const MCI_NOTIFY_SUCCESSFUL = 1;
export const MCI_NOTIFY_SUPERSEDED = 2;
export const MCI_NOTIFY_ABORTED = 4;
export const MCI_NOTIFY_FAILURE = 8;
export const MCI_NOTIFY = 1;
export const MCI_WAIT = 2;
export const MCI_FROM = 4;
export const MCI_TO = 8;
export const MCI_TRACK = 16;
export const MCI_OPEN_SHAREABLE = 256;
export const MCI_OPEN_ELEMENT = 512;
export const MCI_OPEN_ALIAS = 1024;
export const MCI_OPEN_ELEMENT_ID = 2048;
export const MCI_OPEN_TYPE_ID = 4096;
export const MCI_OPEN_TYPE = 8192;
export const MCI_SEEK_TO_START = 256;
export const MCI_SEEK_TO_END = 512;
export const MCI_STATUS_ITEM = 256;
export const MCI_STATUS_START = 512;
export const MCI_STATUS_LENGTH = 1;
export const MCI_STATUS_POSITION = 2;
export const MCI_STATUS_NUMBER_OF_TRACKS = 3;
export const MCI_STATUS_MODE = 4;
export const MCI_STATUS_MEDIA_PRESENT = 5;
export const MCI_STATUS_TIME_FORMAT = 6;
export const MCI_STATUS_READY = 7;
export const MCI_STATUS_CURRENT_TRACK = 8;
export const MCI_INFO_PRODUCT = 256;
export const MCI_INFO_FILE = 512;
export const MCI_INFO_MEDIA_UPC = 1024;
export const MCI_INFO_MEDIA_IDENTITY = 2048;
export const MCI_INFO_NAME = 4096;
export const MCI_INFO_COPYRIGHT = 8192;
export const MCI_GETDEVCAPS_ITEM = 256;
export const MCI_GETDEVCAPS_CAN_RECORD = 1;
export const MCI_GETDEVCAPS_HAS_AUDIO = 2;
export const MCI_GETDEVCAPS_HAS_VIDEO = 3;
export const MCI_GETDEVCAPS_DEVICE_TYPE = 4;
export const MCI_GETDEVCAPS_USES_FILES = 5;
export const MCI_GETDEVCAPS_COMPOUND_DEVICE = 6;
export const MCI_GETDEVCAPS_CAN_EJECT = 7;
export const MCI_GETDEVCAPS_CAN_PLAY = 8;
export const MCI_GETDEVCAPS_CAN_SAVE = 9;
export const MCI_SYSINFO_QUANTITY = 256;
export const MCI_SYSINFO_OPEN = 512;
export const MCI_SYSINFO_NAME = 1024;
export const MCI_SYSINFO_INSTALLNAME = 2048;
export const MCI_SET_DOOR_OPEN = 256;
export const MCI_SET_DOOR_CLOSED = 512;
export const MCI_SET_TIME_FORMAT = 1024;
export const MCI_SET_AUDIO = 2048;
export const MCI_SET_VIDEO = 4096;
export const MCI_SET_ON = 8192;
export const MCI_SET_OFF = 16384;
export const MCI_SET_AUDIO_ALL = 0;
export const MCI_SET_AUDIO_LEFT = 1;
export const MCI_SET_AUDIO_RIGHT = 2;
export const MCI_BREAK_KEY = 256;
export const MCI_BREAK_HWND = 512;
export const MCI_BREAK_OFF = 1024;
export const MCI_RECORD_INSERT = 256;
export const MCI_RECORD_OVERWRITE = 512;
export const MCI_SAVE_FILE = 256;
export const MCI_LOAD_FILE = 256;
export const MCI_VD_MODE_PARK = 1025;
export const MCI_VD_MEDIA_CLV = 1026;
export const MCI_VD_MEDIA_CAV = 1027;
export const MCI_VD_MEDIA_OTHER = 1028;
export const MCI_VD_FORMAT_TRACK = 16385;
export const MCI_VD_PLAY_REVERSE = 65536;
export const MCI_VD_PLAY_FAST = 131072;
export const MCI_VD_PLAY_SPEED = 262144;
export const MCI_VD_PLAY_SCAN = 524288;
export const MCI_VD_PLAY_SLOW = 1048576;
export const MCI_VD_SEEK_REVERSE = 65536;
export const MCI_VD_STATUS_SPEED = 16386;
export const MCI_VD_STATUS_FORWARD = 16387;
export const MCI_VD_STATUS_MEDIA_TYPE = 16388;
export const MCI_VD_STATUS_SIDE = 16389;
export const MCI_VD_STATUS_DISC_SIZE = 16390;
export const MCI_VD_GETDEVCAPS_CLV = 65536;
export const MCI_VD_GETDEVCAPS_CAV = 131072;
export const MCI_VD_SPIN_UP = 65536;
export const MCI_VD_SPIN_DOWN = 131072;
export const MCI_VD_GETDEVCAPS_CAN_REVERSE = 16386;
export const MCI_VD_GETDEVCAPS_FAST_RATE = 16387;
export const MCI_VD_GETDEVCAPS_SLOW_RATE = 16388;
export const MCI_VD_GETDEVCAPS_NORMAL_RATE = 16389;
export const MCI_VD_STEP_FRAMES = 65536;
export const MCI_VD_STEP_REVERSE = 131072;
export const MCI_VD_ESCAPE_STRING = 256;
export const MCI_CDA_STATUS_TYPE_TRACK = 16385;
export const MCI_CDA_TRACK_AUDIO = 1088;
export const MCI_CDA_TRACK_OTHER = 1089;
export const MCI_WAVE_PCM = 1152;
export const MCI_WAVE_MAPPER = 1153;
export const MCI_WAVE_OPEN_BUFFER = 65536;
export const MCI_WAVE_SET_FORMATTAG = 65536;
export const MCI_WAVE_SET_CHANNELS = 131072;
export const MCI_WAVE_SET_SAMPLESPERSEC = 262144;
export const MCI_WAVE_SET_AVGBYTESPERSEC = 524288;
export const MCI_WAVE_SET_BLOCKALIGN = 1048576;
export const MCI_WAVE_SET_BITSPERSAMPLE = 2097152;
export const MCI_WAVE_INPUT = 4194304;
export const MCI_WAVE_OUTPUT = 8388608;
export const MCI_WAVE_STATUS_FORMATTAG = 16385;
export const MCI_WAVE_STATUS_CHANNELS = 16386;
export const MCI_WAVE_STATUS_SAMPLESPERSEC = 16387;
export const MCI_WAVE_STATUS_AVGBYTESPERSEC = 16388;
export const MCI_WAVE_STATUS_BLOCKALIGN = 16389;
export const MCI_WAVE_STATUS_BITSPERSAMPLE = 16390;
export const MCI_WAVE_STATUS_LEVEL = 16391;
export const MCI_WAVE_SET_ANYINPUT = 67108864;
export const MCI_WAVE_SET_ANYOUTPUT = 134217728;
export const MCI_WAVE_GETDEVCAPS_INPUTS = 16385;
export const MCI_WAVE_GETDEVCAPS_OUTPUTS = 16386;
export const MCI_SEQ_FORMAT_SONGPTR = 16385;
export const MCI_SEQ_FILE = 16386;
export const MCI_SEQ_MIDI = 16387;
export const MCI_SEQ_SMPTE = 16388;
export const MCI_SEQ_NONE = 65533;
export const MCI_SEQ_MAPPER = 65535;
export const MCI_SEQ_STATUS_TEMPO = 16386;
export const MCI_SEQ_STATUS_PORT = 16387;
export const MCI_SEQ_STATUS_SLAVE = 16391;
export const MCI_SEQ_STATUS_MASTER = 16392;
export const MCI_SEQ_STATUS_OFFSET = 16393;
export const MCI_SEQ_STATUS_DIVTYPE = 16394;
export const MCI_SEQ_STATUS_NAME = 16395;
export const MCI_SEQ_STATUS_COPYRIGHT = 16396;
export const MCI_SEQ_SET_TEMPO = 65536;
export const MCI_SEQ_SET_PORT = 131072;
export const MCI_SEQ_SET_SLAVE = 262144;
export const MCI_SEQ_SET_MASTER = 524288;
export const MCI_SEQ_SET_OFFSET = 16777216;
export const MCI_ANIM_OPEN_WS = 65536;
export const MCI_ANIM_OPEN_PARENT = 131072;
export const MCI_ANIM_OPEN_NOSTATIC = 262144;
export const MCI_ANIM_PLAY_SPEED = 65536;
export const MCI_ANIM_PLAY_REVERSE = 131072;
export const MCI_ANIM_PLAY_FAST = 262144;
export const MCI_ANIM_PLAY_SLOW = 524288;
export const MCI_ANIM_PLAY_SCAN = 1048576;
export const MCI_ANIM_STEP_REVERSE = 65536;
export const MCI_ANIM_STEP_FRAMES = 131072;
export const MCI_ANIM_STATUS_SPEED = 16385;
export const MCI_ANIM_STATUS_FORWARD = 16386;
export const MCI_ANIM_STATUS_HWND = 16387;
export const MCI_ANIM_STATUS_HPAL = 16388;
export const MCI_ANIM_STATUS_STRETCH = 16389;
export const MCI_ANIM_INFO_TEXT = 65536;
export const MCI_ANIM_GETDEVCAPS_CAN_REVERSE = 16385;
export const MCI_ANIM_GETDEVCAPS_FAST_RATE = 16386;
export const MCI_ANIM_GETDEVCAPS_SLOW_RATE = 16387;
export const MCI_ANIM_GETDEVCAPS_NORMAL_RATE = 16388;
export const MCI_ANIM_GETDEVCAPS_PALETTES = 16390;
export const MCI_ANIM_GETDEVCAPS_CAN_STRETCH = 16391;
export const MCI_ANIM_GETDEVCAPS_MAX_WINDOWS = 16392;
export const MCI_ANIM_REALIZE_NORM = 65536;
export const MCI_ANIM_REALIZE_BKGD = 131072;
export const MCI_ANIM_WINDOW_HWND = 65536;
export const MCI_ANIM_WINDOW_STATE = 262144;
export const MCI_ANIM_WINDOW_TEXT = 524288;
export const MCI_ANIM_WINDOW_ENABLE_STRETCH = 1048576;
export const MCI_ANIM_WINDOW_DISABLE_STRETCH = 2097152;
export const MCI_ANIM_WINDOW_DEFAULT = 0;
export const MCI_ANIM_RECT = 65536;
export const MCI_ANIM_PUT_SOURCE = 131072;
export const MCI_ANIM_PUT_DESTINATION = 262144;
export const MCI_ANIM_WHERE_SOURCE = 131072;
export const MCI_ANIM_WHERE_DESTINATION = 262144;
export const MCI_ANIM_UPDATE_HDC = 131072;
export const MCI_OVLY_OPEN_WS = 65536;
export const MCI_OVLY_OPEN_PARENT = 131072;
export const MCI_OVLY_STATUS_HWND = 16385;
export const MCI_OVLY_STATUS_STRETCH = 16386;
export const MCI_OVLY_INFO_TEXT = 65536;
export const MCI_OVLY_GETDEVCAPS_CAN_STRETCH = 16385;
export const MCI_OVLY_GETDEVCAPS_CAN_FREEZE = 16386;
export const MCI_OVLY_GETDEVCAPS_MAX_WINDOWS = 16387;
export const MCI_OVLY_WINDOW_HWND = 65536;
export const MCI_OVLY_WINDOW_STATE = 262144;
export const MCI_OVLY_WINDOW_TEXT = 524288;
export const MCI_OVLY_WINDOW_ENABLE_STRETCH = 1048576;
export const MCI_OVLY_WINDOW_DISABLE_STRETCH = 2097152;
export const MCI_OVLY_WINDOW_DEFAULT = 0;
export const MCI_OVLY_RECT = 65536;
export const MCI_OVLY_PUT_SOURCE = 131072;
export const MCI_OVLY_PUT_DESTINATION = 262144;
export const MCI_OVLY_PUT_FRAME = 524288;
export const MCI_OVLY_PUT_VIDEO = 1048576;
export const MCI_OVLY_WHERE_SOURCE = 131072;
export const MCI_OVLY_WHERE_DESTINATION = 262144;
export const MCI_OVLY_WHERE_FRAME = 524288;
export const MCI_OVLY_WHERE_VIDEO = 1048576;

// Structs

export type HMMIO = Deno.PointerValue;

export type HDRVR = Deno.PointerValue;

export type HIC = Deno.PointerValue;

export type HVIDEO = Deno.PointerValue;

/**
 * Windows.Win32.Media.Multimedia.ADPCMCOEFSET (size: 8)
 */
export interface ADPCMCOEFSET {
  /** i16 */
  iCoef1: number;
  /** i16 */
  iCoef2: number;
}

export const sizeofADPCMCOEFSET = 8;

export function allocADPCMCOEFSET(data?: Partial<ADPCMCOEFSET>): Uint8Array {
  const buf = new Uint8Array(sizeofADPCMCOEFSET);
  const view = new DataView(buf.buffer);
  // 0x00: i16
  if (data?.iCoef1 !== undefined) view.setInt16(0, Number(data.iCoef1), true);
  // 0x02: i16
  if (data?.iCoef2 !== undefined) view.setInt16(2, Number(data.iCoef2), true);
  // 0x04: pad4
  return buf;
}

/**
 * Windows.Win32.Media.Audio.WAVEFORMATEX (size: 24)
 */
export interface WAVEFORMATEX {
  /** u16 */
  wFormatTag: number;
  /** u16 */
  nChannels: number;
  /** u32 */
  nSamplesPerSec: number;
  /** u32 */
  nAvgBytesPerSec: number;
  /** u16 */
  nBlockAlign: number;
  /** u16 */
  wBitsPerSample: number;
  /** u16 */
  cbSize: number;
}

export const sizeofWAVEFORMATEX = 24;

export function allocWAVEFORMATEX(data?: Partial<WAVEFORMATEX>): Uint8Array {
  const buf = new Uint8Array(sizeofWAVEFORMATEX);
  const view = new DataView(buf.buffer);
  // 0x00: u16
  if (data?.wFormatTag !== undefined) view.setUint16(0, Number(data.wFormatTag), true);
  // 0x02: u16
  if (data?.nChannels !== undefined) view.setUint16(2, Number(data.nChannels), true);
  // 0x04: u32
  if (data?.nSamplesPerSec !== undefined) view.setUint32(4, Number(data.nSamplesPerSec), true);
  // 0x08: u32
  if (data?.nAvgBytesPerSec !== undefined) view.setUint32(8, Number(data.nAvgBytesPerSec), true);
  // 0x0c: u16
  if (data?.nBlockAlign !== undefined) view.setUint16(12, Number(data.nBlockAlign), true);
  // 0x0e: u16
  if (data?.wBitsPerSample !== undefined) view.setUint16(14, Number(data.wBitsPerSample), true);
  // 0x10: u16
  if (data?.cbSize !== undefined) view.setUint16(16, Number(data.cbSize), true);
  // 0x12: pad6
  return buf;
}

/**
 * Windows.Win32.Media.Multimedia.ADPCMWAVEFORMAT (size: 24)
 */
export interface ADPCMWAVEFORMAT {
  /** Windows.Win32.Media.Audio.WAVEFORMATEX */
  wfx: Uint8Array | Deno.PointerValue | null;
  /** u16 */
  wSamplesPerBlock: number;
  /** u16 */
  wNumCoef: number;
  /** array */
  aCoef: Deno.PointerValue | null;
}

export const sizeofADPCMWAVEFORMAT = 24;

export function allocADPCMWAVEFORMAT(data?: Partial<ADPCMWAVEFORMAT>): Uint8Array {
  const buf = new Uint8Array(sizeofADPCMWAVEFORMAT);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.wfx !== undefined) view.setBigUint64(0, data.wfx === null ? 0n : BigInt(util.toPointer(data.wfx)), true);
  // 0x08: u16
  if (data?.wSamplesPerBlock !== undefined) view.setUint16(8, Number(data.wSamplesPerBlock), true);
  // 0x0a: u16
  if (data?.wNumCoef !== undefined) view.setUint16(10, Number(data.wNumCoef), true);
  // 0x0c: pad4
  // 0x10: pointer
  if (data?.aCoef !== undefined) view.setBigUint64(16, data.aCoef === null ? 0n : BigInt(util.toPointer(data.aCoef)), true);
  return buf;
}

/**
 * Windows.Win32.Media.Multimedia.DRMWAVEFORMAT (size: 24)
 */
export interface DRMWAVEFORMAT {
  /** Windows.Win32.Media.Audio.WAVEFORMATEX */
  wfx: Uint8Array | Deno.PointerValue | null;
  /** u16 */
  wReserved: number;
  /** u32 */
  ulContentId: number;
  /** Windows.Win32.Media.Audio.WAVEFORMATEX */
  wfxSecure: Uint8Array | Deno.PointerValue | null;
}

export const sizeofDRMWAVEFORMAT = 24;

export function allocDRMWAVEFORMAT(data?: Partial<DRMWAVEFORMAT>): Uint8Array {
  const buf = new Uint8Array(sizeofDRMWAVEFORMAT);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.wfx !== undefined) view.setBigUint64(0, data.wfx === null ? 0n : BigInt(util.toPointer(data.wfx)), true);
  // 0x08: u16
  if (data?.wReserved !== undefined) view.setUint16(8, Number(data.wReserved), true);
  // 0x0a: u32
  if (data?.ulContentId !== undefined) view.setUint32(10, Number(data.ulContentId), true);
  // 0x0e: pad2
  // 0x10: pointer
  if (data?.wfxSecure !== undefined) view.setBigUint64(16, data.wfxSecure === null ? 0n : BigInt(util.toPointer(data.wfxSecure)), true);
  return buf;
}

/**
 * Windows.Win32.Media.Multimedia.DVIADPCMWAVEFORMAT (size: 16)
 */
export interface DVIADPCMWAVEFORMAT {
  /** Windows.Win32.Media.Audio.WAVEFORMATEX */
  wfx: Uint8Array | Deno.PointerValue | null;
  /** u16 */
  wSamplesPerBlock: number;
}

export const sizeofDVIADPCMWAVEFORMAT = 16;

export function allocDVIADPCMWAVEFORMAT(data?: Partial<DVIADPCMWAVEFORMAT>): Uint8Array {
  const buf = new Uint8Array(sizeofDVIADPCMWAVEFORMAT);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.wfx !== undefined) view.setBigUint64(0, data.wfx === null ? 0n : BigInt(util.toPointer(data.wfx)), true);
  // 0x08: u16
  if (data?.wSamplesPerBlock !== undefined) view.setUint16(8, Number(data.wSamplesPerBlock), true);
  // 0x0a: pad6
  return buf;
}

/**
 * Windows.Win32.Media.Multimedia.IMAADPCMWAVEFORMAT (size: 16)
 */
export interface IMAADPCMWAVEFORMAT {
  /** Windows.Win32.Media.Audio.WAVEFORMATEX */
  wfx: Uint8Array | Deno.PointerValue | null;
  /** u16 */
  wSamplesPerBlock: number;
}

export const sizeofIMAADPCMWAVEFORMAT = 16;

export function allocIMAADPCMWAVEFORMAT(data?: Partial<IMAADPCMWAVEFORMAT>): Uint8Array {
  const buf = new Uint8Array(sizeofIMAADPCMWAVEFORMAT);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.wfx !== undefined) view.setBigUint64(0, data.wfx === null ? 0n : BigInt(util.toPointer(data.wfx)), true);
  // 0x08: u16
  if (data?.wSamplesPerBlock !== undefined) view.setUint16(8, Number(data.wSamplesPerBlock), true);
  // 0x0a: pad6
  return buf;
}

/**
 * Windows.Win32.Media.Multimedia.MEDIASPACEADPCMWAVEFORMAT (size: 16)
 */
export interface MEDIASPACEADPCMWAVEFORMAT {
  /** Windows.Win32.Media.Audio.WAVEFORMATEX */
  wfx: Uint8Array | Deno.PointerValue | null;
  /** u16 */
  wRevision: number;
}

export const sizeofMEDIASPACEADPCMWAVEFORMAT = 16;

export function allocMEDIASPACEADPCMWAVEFORMAT(data?: Partial<MEDIASPACEADPCMWAVEFORMAT>): Uint8Array {
  const buf = new Uint8Array(sizeofMEDIASPACEADPCMWAVEFORMAT);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.wfx !== undefined) view.setBigUint64(0, data.wfx === null ? 0n : BigInt(util.toPointer(data.wfx)), true);
  // 0x08: u16
  if (data?.wRevision !== undefined) view.setUint16(8, Number(data.wRevision), true);
  // 0x0a: pad6
  return buf;
}

/**
 * Windows.Win32.Media.Multimedia.SIERRAADPCMWAVEFORMAT (size: 16)
 */
export interface SIERRAADPCMWAVEFORMAT {
  /** Windows.Win32.Media.Audio.WAVEFORMATEX */
  wfx: Uint8Array | Deno.PointerValue | null;
  /** u16 */
  wRevision: number;
}

export const sizeofSIERRAADPCMWAVEFORMAT = 16;

export function allocSIERRAADPCMWAVEFORMAT(data?: Partial<SIERRAADPCMWAVEFORMAT>): Uint8Array {
  const buf = new Uint8Array(sizeofSIERRAADPCMWAVEFORMAT);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.wfx !== undefined) view.setBigUint64(0, data.wfx === null ? 0n : BigInt(util.toPointer(data.wfx)), true);
  // 0x08: u16
  if (data?.wRevision !== undefined) view.setUint16(8, Number(data.wRevision), true);
  // 0x0a: pad6
  return buf;
}

/**
 * Windows.Win32.Media.Multimedia.G723_ADPCMWAVEFORMAT (size: 16)
 */
export interface G723_ADPCMWAVEFORMAT {
  /** Windows.Win32.Media.Audio.WAVEFORMATEX */
  wfx: Uint8Array | Deno.PointerValue | null;
  /** u16 */
  cbExtraSize: number;
  /** u16 */
  nAuxBlockSize: number;
}

export const sizeofG723_ADPCMWAVEFORMAT = 16;

export function allocG723_ADPCMWAVEFORMAT(data?: Partial<G723_ADPCMWAVEFORMAT>): Uint8Array {
  const buf = new Uint8Array(sizeofG723_ADPCMWAVEFORMAT);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.wfx !== undefined) view.setBigUint64(0, data.wfx === null ? 0n : BigInt(util.toPointer(data.wfx)), true);
  // 0x08: u16
  if (data?.cbExtraSize !== undefined) view.setUint16(8, Number(data.cbExtraSize), true);
  // 0x0a: u16
  if (data?.nAuxBlockSize !== undefined) view.setUint16(10, Number(data.nAuxBlockSize), true);
  // 0x0c: pad4
  return buf;
}

/**
 * Windows.Win32.Media.Multimedia.DIGISTDWAVEFORMAT (size: 8)
 */
export interface DIGISTDWAVEFORMAT {
  /** Windows.Win32.Media.Audio.WAVEFORMATEX */
  wfx: Uint8Array | Deno.PointerValue | null;
}

export const sizeofDIGISTDWAVEFORMAT = 8;

export function allocDIGISTDWAVEFORMAT(data?: Partial<DIGISTDWAVEFORMAT>): Uint8Array {
  const buf = new Uint8Array(sizeofDIGISTDWAVEFORMAT);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.wfx !== undefined) view.setBigUint64(0, data.wfx === null ? 0n : BigInt(util.toPointer(data.wfx)), true);
  return buf;
}

/**
 * Windows.Win32.Media.Multimedia.DIGIFIXWAVEFORMAT (size: 8)
 */
export interface DIGIFIXWAVEFORMAT {
  /** Windows.Win32.Media.Audio.WAVEFORMATEX */
  wfx: Uint8Array | Deno.PointerValue | null;
}

export const sizeofDIGIFIXWAVEFORMAT = 8;

export function allocDIGIFIXWAVEFORMAT(data?: Partial<DIGIFIXWAVEFORMAT>): Uint8Array {
  const buf = new Uint8Array(sizeofDIGIFIXWAVEFORMAT);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.wfx !== undefined) view.setBigUint64(0, data.wfx === null ? 0n : BigInt(util.toPointer(data.wfx)), true);
  return buf;
}

/**
 * Windows.Win32.Media.Multimedia.DIALOGICOKIADPCMWAVEFORMAT (size: 8)
 */
export interface DIALOGICOKIADPCMWAVEFORMAT {
  /** Windows.Win32.Media.Audio.WAVEFORMATEX */
  ewf: Uint8Array | Deno.PointerValue | null;
}

export const sizeofDIALOGICOKIADPCMWAVEFORMAT = 8;

export function allocDIALOGICOKIADPCMWAVEFORMAT(data?: Partial<DIALOGICOKIADPCMWAVEFORMAT>): Uint8Array {
  const buf = new Uint8Array(sizeofDIALOGICOKIADPCMWAVEFORMAT);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.ewf !== undefined) view.setBigUint64(0, data.ewf === null ? 0n : BigInt(util.toPointer(data.ewf)), true);
  return buf;
}

/**
 * Windows.Win32.Media.Multimedia.YAMAHA_ADPCMWAVEFORMAT (size: 8)
 */
export interface YAMAHA_ADPCMWAVEFORMAT {
  /** Windows.Win32.Media.Audio.WAVEFORMATEX */
  wfx: Uint8Array | Deno.PointerValue | null;
}

export const sizeofYAMAHA_ADPCMWAVEFORMAT = 8;

export function allocYAMAHA_ADPCMWAVEFORMAT(data?: Partial<YAMAHA_ADPCMWAVEFORMAT>): Uint8Array {
  const buf = new Uint8Array(sizeofYAMAHA_ADPCMWAVEFORMAT);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.wfx !== undefined) view.setBigUint64(0, data.wfx === null ? 0n : BigInt(util.toPointer(data.wfx)), true);
  return buf;
}

/**
 * Windows.Win32.Media.Multimedia.SONARCWAVEFORMAT (size: 16)
 */
export interface SONARCWAVEFORMAT {
  /** Windows.Win32.Media.Audio.WAVEFORMATEX */
  wfx: Uint8Array | Deno.PointerValue | null;
  /** u16 */
  wCompType: number;
}

export const sizeofSONARCWAVEFORMAT = 16;

export function allocSONARCWAVEFORMAT(data?: Partial<SONARCWAVEFORMAT>): Uint8Array {
  const buf = new Uint8Array(sizeofSONARCWAVEFORMAT);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.wfx !== undefined) view.setBigUint64(0, data.wfx === null ? 0n : BigInt(util.toPointer(data.wfx)), true);
  // 0x08: u16
  if (data?.wCompType !== undefined) view.setUint16(8, Number(data.wCompType), true);
  // 0x0a: pad6
  return buf;
}

/**
 * Windows.Win32.Media.Multimedia.TRUESPEECHWAVEFORMAT (size: 24)
 */
export interface TRUESPEECHWAVEFORMAT {
  /** Windows.Win32.Media.Audio.WAVEFORMATEX */
  wfx: Uint8Array | Deno.PointerValue | null;
  /** u16 */
  wRevision: number;
  /** u16 */
  nSamplesPerBlock: number;
  /** array */
  abReserved: Deno.PointerValue | null;
}

export const sizeofTRUESPEECHWAVEFORMAT = 24;

export function allocTRUESPEECHWAVEFORMAT(data?: Partial<TRUESPEECHWAVEFORMAT>): Uint8Array {
  const buf = new Uint8Array(sizeofTRUESPEECHWAVEFORMAT);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.wfx !== undefined) view.setBigUint64(0, data.wfx === null ? 0n : BigInt(util.toPointer(data.wfx)), true);
  // 0x08: u16
  if (data?.wRevision !== undefined) view.setUint16(8, Number(data.wRevision), true);
  // 0x0a: u16
  if (data?.nSamplesPerBlock !== undefined) view.setUint16(10, Number(data.nSamplesPerBlock), true);
  // 0x0c: pad4
  // 0x10: pointer
  if (data?.abReserved !== undefined) view.setBigUint64(16, data.abReserved === null ? 0n : BigInt(util.toPointer(data.abReserved)), true);
  return buf;
}

/**
 * Windows.Win32.Media.Multimedia.ECHOSC1WAVEFORMAT (size: 8)
 */
export interface ECHOSC1WAVEFORMAT {
  /** Windows.Win32.Media.Audio.WAVEFORMATEX */
  wfx: Uint8Array | Deno.PointerValue | null;
}

export const sizeofECHOSC1WAVEFORMAT = 8;

export function allocECHOSC1WAVEFORMAT(data?: Partial<ECHOSC1WAVEFORMAT>): Uint8Array {
  const buf = new Uint8Array(sizeofECHOSC1WAVEFORMAT);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.wfx !== undefined) view.setBigUint64(0, data.wfx === null ? 0n : BigInt(util.toPointer(data.wfx)), true);
  return buf;
}

/**
 * Windows.Win32.Media.Multimedia.AUDIOFILE_AF36WAVEFORMAT (size: 8)
 */
export interface AUDIOFILE_AF36WAVEFORMAT {
  /** Windows.Win32.Media.Audio.WAVEFORMATEX */
  wfx: Uint8Array | Deno.PointerValue | null;
}

export const sizeofAUDIOFILE_AF36WAVEFORMAT = 8;

export function allocAUDIOFILE_AF36WAVEFORMAT(data?: Partial<AUDIOFILE_AF36WAVEFORMAT>): Uint8Array {
  const buf = new Uint8Array(sizeofAUDIOFILE_AF36WAVEFORMAT);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.wfx !== undefined) view.setBigUint64(0, data.wfx === null ? 0n : BigInt(util.toPointer(data.wfx)), true);
  return buf;
}

/**
 * Windows.Win32.Media.Multimedia.APTXWAVEFORMAT (size: 8)
 */
export interface APTXWAVEFORMAT {
  /** Windows.Win32.Media.Audio.WAVEFORMATEX */
  wfx: Uint8Array | Deno.PointerValue | null;
}

export const sizeofAPTXWAVEFORMAT = 8;

export function allocAPTXWAVEFORMAT(data?: Partial<APTXWAVEFORMAT>): Uint8Array {
  const buf = new Uint8Array(sizeofAPTXWAVEFORMAT);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.wfx !== undefined) view.setBigUint64(0, data.wfx === null ? 0n : BigInt(util.toPointer(data.wfx)), true);
  return buf;
}

/**
 * Windows.Win32.Media.Multimedia.AUDIOFILE_AF10WAVEFORMAT (size: 8)
 */
export interface AUDIOFILE_AF10WAVEFORMAT {
  /** Windows.Win32.Media.Audio.WAVEFORMATEX */
  wfx: Uint8Array | Deno.PointerValue | null;
}

export const sizeofAUDIOFILE_AF10WAVEFORMAT = 8;

export function allocAUDIOFILE_AF10WAVEFORMAT(data?: Partial<AUDIOFILE_AF10WAVEFORMAT>): Uint8Array {
  const buf = new Uint8Array(sizeofAUDIOFILE_AF10WAVEFORMAT);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.wfx !== undefined) view.setBigUint64(0, data.wfx === null ? 0n : BigInt(util.toPointer(data.wfx)), true);
  return buf;
}

/**
 * Windows.Win32.Media.Multimedia.DOLBYAC2WAVEFORMAT (size: 16)
 */
export interface DOLBYAC2WAVEFORMAT {
  /** Windows.Win32.Media.Audio.WAVEFORMATEX */
  wfx: Uint8Array | Deno.PointerValue | null;
  /** u16 */
  nAuxBitsCode: number;
}

export const sizeofDOLBYAC2WAVEFORMAT = 16;

export function allocDOLBYAC2WAVEFORMAT(data?: Partial<DOLBYAC2WAVEFORMAT>): Uint8Array {
  const buf = new Uint8Array(sizeofDOLBYAC2WAVEFORMAT);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.wfx !== undefined) view.setBigUint64(0, data.wfx === null ? 0n : BigInt(util.toPointer(data.wfx)), true);
  // 0x08: u16
  if (data?.nAuxBitsCode !== undefined) view.setUint16(8, Number(data.nAuxBitsCode), true);
  // 0x0a: pad6
  return buf;
}

/**
 * Windows.Win32.Media.Multimedia.GSM610WAVEFORMAT (size: 16)
 */
export interface GSM610WAVEFORMAT {
  /** Windows.Win32.Media.Audio.WAVEFORMATEX */
  wfx: Uint8Array | Deno.PointerValue | null;
  /** u16 */
  wSamplesPerBlock: number;
}

export const sizeofGSM610WAVEFORMAT = 16;

export function allocGSM610WAVEFORMAT(data?: Partial<GSM610WAVEFORMAT>): Uint8Array {
  const buf = new Uint8Array(sizeofGSM610WAVEFORMAT);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.wfx !== undefined) view.setBigUint64(0, data.wfx === null ? 0n : BigInt(util.toPointer(data.wfx)), true);
  // 0x08: u16
  if (data?.wSamplesPerBlock !== undefined) view.setUint16(8, Number(data.wSamplesPerBlock), true);
  // 0x0a: pad6
  return buf;
}

/**
 * Windows.Win32.Media.Multimedia.ADPCMEWAVEFORMAT (size: 16)
 */
export interface ADPCMEWAVEFORMAT {
  /** Windows.Win32.Media.Audio.WAVEFORMATEX */
  wfx: Uint8Array | Deno.PointerValue | null;
  /** u16 */
  wSamplesPerBlock: number;
}

export const sizeofADPCMEWAVEFORMAT = 16;

export function allocADPCMEWAVEFORMAT(data?: Partial<ADPCMEWAVEFORMAT>): Uint8Array {
  const buf = new Uint8Array(sizeofADPCMEWAVEFORMAT);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.wfx !== undefined) view.setBigUint64(0, data.wfx === null ? 0n : BigInt(util.toPointer(data.wfx)), true);
  // 0x08: u16
  if (data?.wSamplesPerBlock !== undefined) view.setUint16(8, Number(data.wSamplesPerBlock), true);
  // 0x0a: pad6
  return buf;
}

/**
 * Windows.Win32.Media.Multimedia.CONTRESVQLPCWAVEFORMAT (size: 16)
 */
export interface CONTRESVQLPCWAVEFORMAT {
  /** Windows.Win32.Media.Audio.WAVEFORMATEX */
  wfx: Uint8Array | Deno.PointerValue | null;
  /** u16 */
  wSamplesPerBlock: number;
}

export const sizeofCONTRESVQLPCWAVEFORMAT = 16;

export function allocCONTRESVQLPCWAVEFORMAT(data?: Partial<CONTRESVQLPCWAVEFORMAT>): Uint8Array {
  const buf = new Uint8Array(sizeofCONTRESVQLPCWAVEFORMAT);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.wfx !== undefined) view.setBigUint64(0, data.wfx === null ? 0n : BigInt(util.toPointer(data.wfx)), true);
  // 0x08: u16
  if (data?.wSamplesPerBlock !== undefined) view.setUint16(8, Number(data.wSamplesPerBlock), true);
  // 0x0a: pad6
  return buf;
}

/**
 * Windows.Win32.Media.Multimedia.DIGIREALWAVEFORMAT (size: 16)
 */
export interface DIGIREALWAVEFORMAT {
  /** Windows.Win32.Media.Audio.WAVEFORMATEX */
  wfx: Uint8Array | Deno.PointerValue | null;
  /** u16 */
  wSamplesPerBlock: number;
}

export const sizeofDIGIREALWAVEFORMAT = 16;

export function allocDIGIREALWAVEFORMAT(data?: Partial<DIGIREALWAVEFORMAT>): Uint8Array {
  const buf = new Uint8Array(sizeofDIGIREALWAVEFORMAT);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.wfx !== undefined) view.setBigUint64(0, data.wfx === null ? 0n : BigInt(util.toPointer(data.wfx)), true);
  // 0x08: u16
  if (data?.wSamplesPerBlock !== undefined) view.setUint16(8, Number(data.wSamplesPerBlock), true);
  // 0x0a: pad6
  return buf;
}

/**
 * Windows.Win32.Media.Multimedia.DIGIADPCMWAVEFORMAT (size: 16)
 */
export interface DIGIADPCMWAVEFORMAT {
  /** Windows.Win32.Media.Audio.WAVEFORMATEX */
  wfx: Uint8Array | Deno.PointerValue | null;
  /** u16 */
  wSamplesPerBlock: number;
}

export const sizeofDIGIADPCMWAVEFORMAT = 16;

export function allocDIGIADPCMWAVEFORMAT(data?: Partial<DIGIADPCMWAVEFORMAT>): Uint8Array {
  const buf = new Uint8Array(sizeofDIGIADPCMWAVEFORMAT);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.wfx !== undefined) view.setBigUint64(0, data.wfx === null ? 0n : BigInt(util.toPointer(data.wfx)), true);
  // 0x08: u16
  if (data?.wSamplesPerBlock !== undefined) view.setUint16(8, Number(data.wSamplesPerBlock), true);
  // 0x0a: pad6
  return buf;
}

/**
 * Windows.Win32.Media.Multimedia.CONTRESCR10WAVEFORMAT (size: 16)
 */
export interface CONTRESCR10WAVEFORMAT {
  /** Windows.Win32.Media.Audio.WAVEFORMATEX */
  wfx: Uint8Array | Deno.PointerValue | null;
  /** u16 */
  wSamplesPerBlock: number;
}

export const sizeofCONTRESCR10WAVEFORMAT = 16;

export function allocCONTRESCR10WAVEFORMAT(data?: Partial<CONTRESCR10WAVEFORMAT>): Uint8Array {
  const buf = new Uint8Array(sizeofCONTRESCR10WAVEFORMAT);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.wfx !== undefined) view.setBigUint64(0, data.wfx === null ? 0n : BigInt(util.toPointer(data.wfx)), true);
  // 0x08: u16
  if (data?.wSamplesPerBlock !== undefined) view.setUint16(8, Number(data.wSamplesPerBlock), true);
  // 0x0a: pad6
  return buf;
}

/**
 * Windows.Win32.Media.Multimedia.NMS_VBXADPCMWAVEFORMAT (size: 16)
 */
export interface NMS_VBXADPCMWAVEFORMAT {
  /** Windows.Win32.Media.Audio.WAVEFORMATEX */
  wfx: Uint8Array | Deno.PointerValue | null;
  /** u16 */
  wSamplesPerBlock: number;
}

export const sizeofNMS_VBXADPCMWAVEFORMAT = 16;

export function allocNMS_VBXADPCMWAVEFORMAT(data?: Partial<NMS_VBXADPCMWAVEFORMAT>): Uint8Array {
  const buf = new Uint8Array(sizeofNMS_VBXADPCMWAVEFORMAT);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.wfx !== undefined) view.setBigUint64(0, data.wfx === null ? 0n : BigInt(util.toPointer(data.wfx)), true);
  // 0x08: u16
  if (data?.wSamplesPerBlock !== undefined) view.setUint16(8, Number(data.wSamplesPerBlock), true);
  // 0x0a: pad6
  return buf;
}

/**
 * Windows.Win32.Media.Multimedia.G721_ADPCMWAVEFORMAT (size: 16)
 */
export interface G721_ADPCMWAVEFORMAT {
  /** Windows.Win32.Media.Audio.WAVEFORMATEX */
  wfx: Uint8Array | Deno.PointerValue | null;
  /** u16 */
  nAuxBlockSize: number;
}

export const sizeofG721_ADPCMWAVEFORMAT = 16;

export function allocG721_ADPCMWAVEFORMAT(data?: Partial<G721_ADPCMWAVEFORMAT>): Uint8Array {
  const buf = new Uint8Array(sizeofG721_ADPCMWAVEFORMAT);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.wfx !== undefined) view.setBigUint64(0, data.wfx === null ? 0n : BigInt(util.toPointer(data.wfx)), true);
  // 0x08: u16
  if (data?.nAuxBlockSize !== undefined) view.setUint16(8, Number(data.nAuxBlockSize), true);
  // 0x0a: pad6
  return buf;
}

/**
 * Windows.Win32.Media.Multimedia.MSAUDIO1WAVEFORMAT (size: 16)
 */
export interface MSAUDIO1WAVEFORMAT {
  /** Windows.Win32.Media.Audio.WAVEFORMATEX */
  wfx: Uint8Array | Deno.PointerValue | null;
  /** u16 */
  wSamplesPerBlock: number;
  /** u16 */
  wEncodeOptions: number;
}

export const sizeofMSAUDIO1WAVEFORMAT = 16;

export function allocMSAUDIO1WAVEFORMAT(data?: Partial<MSAUDIO1WAVEFORMAT>): Uint8Array {
  const buf = new Uint8Array(sizeofMSAUDIO1WAVEFORMAT);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.wfx !== undefined) view.setBigUint64(0, data.wfx === null ? 0n : BigInt(util.toPointer(data.wfx)), true);
  // 0x08: u16
  if (data?.wSamplesPerBlock !== undefined) view.setUint16(8, Number(data.wSamplesPerBlock), true);
  // 0x0a: u16
  if (data?.wEncodeOptions !== undefined) view.setUint16(10, Number(data.wEncodeOptions), true);
  // 0x0c: pad4
  return buf;
}

/**
 * Windows.Win32.Media.Multimedia.WMAUDIO2WAVEFORMAT (size: 24)
 */
export interface WMAUDIO2WAVEFORMAT {
  /** Windows.Win32.Media.Audio.WAVEFORMATEX */
  wfx: Uint8Array | Deno.PointerValue | null;
  /** u32 */
  dwSamplesPerBlock: number;
  /** u16 */
  wEncodeOptions: number;
  /** u32 */
  dwSuperBlockAlign: number;
}

export const sizeofWMAUDIO2WAVEFORMAT = 24;

export function allocWMAUDIO2WAVEFORMAT(data?: Partial<WMAUDIO2WAVEFORMAT>): Uint8Array {
  const buf = new Uint8Array(sizeofWMAUDIO2WAVEFORMAT);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.wfx !== undefined) view.setBigUint64(0, data.wfx === null ? 0n : BigInt(util.toPointer(data.wfx)), true);
  // 0x08: u32
  if (data?.dwSamplesPerBlock !== undefined) view.setUint32(8, Number(data.dwSamplesPerBlock), true);
  // 0x0c: u16
  if (data?.wEncodeOptions !== undefined) view.setUint16(12, Number(data.wEncodeOptions), true);
  // 0x0e: u32
  if (data?.dwSuperBlockAlign !== undefined) view.setUint32(14, Number(data.dwSuperBlockAlign), true);
  // 0x12: pad6
  return buf;
}

/**
 * Windows.Win32.Media.Multimedia.WMAUDIO3WAVEFORMAT (size: 32)
 */
export interface WMAUDIO3WAVEFORMAT {
  /** Windows.Win32.Media.Audio.WAVEFORMATEX */
  wfx: Uint8Array | Deno.PointerValue | null;
  /** u16 */
  wValidBitsPerSample: number;
  /** u32 */
  dwChannelMask: number;
  /** u32 */
  dwReserved1: number;
  /** u32 */
  dwReserved2: number;
  /** u16 */
  wEncodeOptions: number;
  /** u16 */
  wReserved3: number;
}

export const sizeofWMAUDIO3WAVEFORMAT = 32;

export function allocWMAUDIO3WAVEFORMAT(data?: Partial<WMAUDIO3WAVEFORMAT>): Uint8Array {
  const buf = new Uint8Array(sizeofWMAUDIO3WAVEFORMAT);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.wfx !== undefined) view.setBigUint64(0, data.wfx === null ? 0n : BigInt(util.toPointer(data.wfx)), true);
  // 0x08: u16
  if (data?.wValidBitsPerSample !== undefined) view.setUint16(8, Number(data.wValidBitsPerSample), true);
  // 0x0a: u32
  if (data?.dwChannelMask !== undefined) view.setUint32(10, Number(data.dwChannelMask), true);
  // 0x0e: u32
  if (data?.dwReserved1 !== undefined) view.setUint32(14, Number(data.dwReserved1), true);
  // 0x12: u32
  if (data?.dwReserved2 !== undefined) view.setUint32(18, Number(data.dwReserved2), true);
  // 0x16: u16
  if (data?.wEncodeOptions !== undefined) view.setUint16(22, Number(data.wEncodeOptions), true);
  // 0x18: u16
  if (data?.wReserved3 !== undefined) view.setUint16(24, Number(data.wReserved3), true);
  // 0x1a: pad6
  return buf;
}

/**
 * Windows.Win32.Media.Multimedia.CREATIVEADPCMWAVEFORMAT (size: 16)
 */
export interface CREATIVEADPCMWAVEFORMAT {
  /** Windows.Win32.Media.Audio.WAVEFORMATEX */
  wfx: Uint8Array | Deno.PointerValue | null;
  /** u16 */
  wRevision: number;
}

export const sizeofCREATIVEADPCMWAVEFORMAT = 16;

export function allocCREATIVEADPCMWAVEFORMAT(data?: Partial<CREATIVEADPCMWAVEFORMAT>): Uint8Array {
  const buf = new Uint8Array(sizeofCREATIVEADPCMWAVEFORMAT);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.wfx !== undefined) view.setBigUint64(0, data.wfx === null ? 0n : BigInt(util.toPointer(data.wfx)), true);
  // 0x08: u16
  if (data?.wRevision !== undefined) view.setUint16(8, Number(data.wRevision), true);
  // 0x0a: pad6
  return buf;
}

/**
 * Windows.Win32.Media.Multimedia.CREATIVEFASTSPEECH8WAVEFORMAT (size: 16)
 */
export interface CREATIVEFASTSPEECH8WAVEFORMAT {
  /** Windows.Win32.Media.Audio.WAVEFORMATEX */
  wfx: Uint8Array | Deno.PointerValue | null;
  /** u16 */
  wRevision: number;
}

export const sizeofCREATIVEFASTSPEECH8WAVEFORMAT = 16;

export function allocCREATIVEFASTSPEECH8WAVEFORMAT(data?: Partial<CREATIVEFASTSPEECH8WAVEFORMAT>): Uint8Array {
  const buf = new Uint8Array(sizeofCREATIVEFASTSPEECH8WAVEFORMAT);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.wfx !== undefined) view.setBigUint64(0, data.wfx === null ? 0n : BigInt(util.toPointer(data.wfx)), true);
  // 0x08: u16
  if (data?.wRevision !== undefined) view.setUint16(8, Number(data.wRevision), true);
  // 0x0a: pad6
  return buf;
}

/**
 * Windows.Win32.Media.Multimedia.CREATIVEFASTSPEECH10WAVEFORMAT (size: 16)
 */
export interface CREATIVEFASTSPEECH10WAVEFORMAT {
  /** Windows.Win32.Media.Audio.WAVEFORMATEX */
  wfx: Uint8Array | Deno.PointerValue | null;
  /** u16 */
  wRevision: number;
}

export const sizeofCREATIVEFASTSPEECH10WAVEFORMAT = 16;

export function allocCREATIVEFASTSPEECH10WAVEFORMAT(data?: Partial<CREATIVEFASTSPEECH10WAVEFORMAT>): Uint8Array {
  const buf = new Uint8Array(sizeofCREATIVEFASTSPEECH10WAVEFORMAT);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.wfx !== undefined) view.setBigUint64(0, data.wfx === null ? 0n : BigInt(util.toPointer(data.wfx)), true);
  // 0x08: u16
  if (data?.wRevision !== undefined) view.setUint16(8, Number(data.wRevision), true);
  // 0x0a: pad6
  return buf;
}

/**
 * Windows.Win32.Media.Multimedia.FMTOWNS_SND_WAVEFORMAT (size: 16)
 */
export interface FMTOWNS_SND_WAVEFORMAT {
  /** Windows.Win32.Media.Audio.WAVEFORMATEX */
  wfx: Uint8Array | Deno.PointerValue | null;
  /** u16 */
  wRevision: number;
}

export const sizeofFMTOWNS_SND_WAVEFORMAT = 16;

export function allocFMTOWNS_SND_WAVEFORMAT(data?: Partial<FMTOWNS_SND_WAVEFORMAT>): Uint8Array {
  const buf = new Uint8Array(sizeofFMTOWNS_SND_WAVEFORMAT);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.wfx !== undefined) view.setBigUint64(0, data.wfx === null ? 0n : BigInt(util.toPointer(data.wfx)), true);
  // 0x08: u16
  if (data?.wRevision !== undefined) view.setUint16(8, Number(data.wRevision), true);
  // 0x0a: pad6
  return buf;
}

/**
 * Windows.Win32.Media.Multimedia.OLIGSMWAVEFORMAT (size: 8)
 */
export interface OLIGSMWAVEFORMAT {
  /** Windows.Win32.Media.Audio.WAVEFORMATEX */
  wfx: Uint8Array | Deno.PointerValue | null;
}

export const sizeofOLIGSMWAVEFORMAT = 8;

export function allocOLIGSMWAVEFORMAT(data?: Partial<OLIGSMWAVEFORMAT>): Uint8Array {
  const buf = new Uint8Array(sizeofOLIGSMWAVEFORMAT);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.wfx !== undefined) view.setBigUint64(0, data.wfx === null ? 0n : BigInt(util.toPointer(data.wfx)), true);
  return buf;
}

/**
 * Windows.Win32.Media.Multimedia.OLIADPCMWAVEFORMAT (size: 8)
 */
export interface OLIADPCMWAVEFORMAT {
  /** Windows.Win32.Media.Audio.WAVEFORMATEX */
  wfx: Uint8Array | Deno.PointerValue | null;
}

export const sizeofOLIADPCMWAVEFORMAT = 8;

export function allocOLIADPCMWAVEFORMAT(data?: Partial<OLIADPCMWAVEFORMAT>): Uint8Array {
  const buf = new Uint8Array(sizeofOLIADPCMWAVEFORMAT);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.wfx !== undefined) view.setBigUint64(0, data.wfx === null ? 0n : BigInt(util.toPointer(data.wfx)), true);
  return buf;
}

/**
 * Windows.Win32.Media.Multimedia.OLICELPWAVEFORMAT (size: 8)
 */
export interface OLICELPWAVEFORMAT {
  /** Windows.Win32.Media.Audio.WAVEFORMATEX */
  wfx: Uint8Array | Deno.PointerValue | null;
}

export const sizeofOLICELPWAVEFORMAT = 8;

export function allocOLICELPWAVEFORMAT(data?: Partial<OLICELPWAVEFORMAT>): Uint8Array {
  const buf = new Uint8Array(sizeofOLICELPWAVEFORMAT);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.wfx !== undefined) view.setBigUint64(0, data.wfx === null ? 0n : BigInt(util.toPointer(data.wfx)), true);
  return buf;
}

/**
 * Windows.Win32.Media.Multimedia.OLISBCWAVEFORMAT (size: 8)
 */
export interface OLISBCWAVEFORMAT {
  /** Windows.Win32.Media.Audio.WAVEFORMATEX */
  wfx: Uint8Array | Deno.PointerValue | null;
}

export const sizeofOLISBCWAVEFORMAT = 8;

export function allocOLISBCWAVEFORMAT(data?: Partial<OLISBCWAVEFORMAT>): Uint8Array {
  const buf = new Uint8Array(sizeofOLISBCWAVEFORMAT);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.wfx !== undefined) view.setBigUint64(0, data.wfx === null ? 0n : BigInt(util.toPointer(data.wfx)), true);
  return buf;
}

/**
 * Windows.Win32.Media.Multimedia.OLIOPRWAVEFORMAT (size: 8)
 */
export interface OLIOPRWAVEFORMAT {
  /** Windows.Win32.Media.Audio.WAVEFORMATEX */
  wfx: Uint8Array | Deno.PointerValue | null;
}

export const sizeofOLIOPRWAVEFORMAT = 8;

export function allocOLIOPRWAVEFORMAT(data?: Partial<OLIOPRWAVEFORMAT>): Uint8Array {
  const buf = new Uint8Array(sizeofOLIOPRWAVEFORMAT);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.wfx !== undefined) view.setBigUint64(0, data.wfx === null ? 0n : BigInt(util.toPointer(data.wfx)), true);
  return buf;
}

/**
 * Windows.Win32.Media.Multimedia.CSIMAADPCMWAVEFORMAT (size: 8)
 */
export interface CSIMAADPCMWAVEFORMAT {
  /** Windows.Win32.Media.Audio.WAVEFORMATEX */
  wfx: Uint8Array | Deno.PointerValue | null;
}

export const sizeofCSIMAADPCMWAVEFORMAT = 8;

export function allocCSIMAADPCMWAVEFORMAT(data?: Partial<CSIMAADPCMWAVEFORMAT>): Uint8Array {
  const buf = new Uint8Array(sizeofCSIMAADPCMWAVEFORMAT);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.wfx !== undefined) view.setBigUint64(0, data.wfx === null ? 0n : BigInt(util.toPointer(data.wfx)), true);
  return buf;
}

export type CHAR = number;

/**
 * Windows.Win32.Media.Multimedia.s_RIFFWAVE_inst (size: 32)
 */
export interface s_RIFFWAVE_inst {
  /** u8 */
  bUnshiftedNote: number;
  /** Windows.Win32.Foundation.CHAR */
  chFineTune: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Foundation.CHAR */
  chGain: Uint8Array | Deno.PointerValue | null;
  /** u8 */
  bLowNote: number;
  /** u8 */
  bHighNote: number;
  /** u8 */
  bLowVelocity: number;
  /** u8 */
  bHighVelocity: number;
}

export const sizeofS_RIFFWAVE_inst = 32;

export function allocS_RIFFWAVE_inst(data?: Partial<s_RIFFWAVE_inst>): Uint8Array {
  const buf = new Uint8Array(sizeofS_RIFFWAVE_inst);
  const view = new DataView(buf.buffer);
  // 0x00: u8
  if (data?.bUnshiftedNote !== undefined) view.setUint8(0, Number(data.bUnshiftedNote));
  // 0x01: pad7
  // 0x08: pointer
  if (data?.chFineTune !== undefined) view.setBigUint64(8, data.chFineTune === null ? 0n : BigInt(util.toPointer(data.chFineTune)), true);
  // 0x10: pointer
  if (data?.chGain !== undefined) view.setBigUint64(16, data.chGain === null ? 0n : BigInt(util.toPointer(data.chGain)), true);
  // 0x18: u8
  if (data?.bLowNote !== undefined) view.setUint8(24, Number(data.bLowNote));
  // 0x19: u8
  if (data?.bHighNote !== undefined) view.setUint8(25, Number(data.bHighNote));
  // 0x1a: u8
  if (data?.bLowVelocity !== undefined) view.setUint8(26, Number(data.bLowVelocity));
  // 0x1b: u8
  if (data?.bHighVelocity !== undefined) view.setUint8(27, Number(data.bHighVelocity));
  // 0x1c: pad4
  return buf;
}

/**
 * Windows.Win32.Graphics.Gdi.BITMAPINFOHEADER (size: 40)
 */
export interface BITMAPINFOHEADER {
  /** u32 */
  biSize: number;
  /** i32 */
  biWidth: number;
  /** i32 */
  biHeight: number;
  /** u16 */
  biPlanes: number;
  /** u16 */
  biBitCount: number;
  /** u32 */
  biCompression: number;
  /** u32 */
  biSizeImage: number;
  /** i32 */
  biXPelsPerMeter: number;
  /** i32 */
  biYPelsPerMeter: number;
  /** u32 */
  biClrUsed: number;
  /** u32 */
  biClrImportant: number;
}

export const sizeofBITMAPINFOHEADER = 40;

export function allocBITMAPINFOHEADER(data?: Partial<BITMAPINFOHEADER>): Uint8Array {
  const buf = new Uint8Array(sizeofBITMAPINFOHEADER);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.biSize !== undefined) view.setUint32(0, Number(data.biSize), true);
  // 0x04: i32
  if (data?.biWidth !== undefined) view.setInt32(4, Number(data.biWidth), true);
  // 0x08: i32
  if (data?.biHeight !== undefined) view.setInt32(8, Number(data.biHeight), true);
  // 0x0c: u16
  if (data?.biPlanes !== undefined) view.setUint16(12, Number(data.biPlanes), true);
  // 0x0e: u16
  if (data?.biBitCount !== undefined) view.setUint16(14, Number(data.biBitCount), true);
  // 0x10: u32
  if (data?.biCompression !== undefined) view.setUint32(16, Number(data.biCompression), true);
  // 0x14: u32
  if (data?.biSizeImage !== undefined) view.setUint32(20, Number(data.biSizeImage), true);
  // 0x18: i32
  if (data?.biXPelsPerMeter !== undefined) view.setInt32(24, Number(data.biXPelsPerMeter), true);
  // 0x1c: i32
  if (data?.biYPelsPerMeter !== undefined) view.setInt32(28, Number(data.biYPelsPerMeter), true);
  // 0x20: u32
  if (data?.biClrUsed !== undefined) view.setUint32(32, Number(data.biClrUsed), true);
  // 0x24: u32
  if (data?.biClrImportant !== undefined) view.setUint32(36, Number(data.biClrImportant), true);
  return buf;
}

/**
 * Windows.Win32.Media.Multimedia.EXBMINFOHEADER (size: 16)
 */
export interface EXBMINFOHEADER {
  /** Windows.Win32.Graphics.Gdi.BITMAPINFOHEADER */
  bmi: Uint8Array | Deno.PointerValue | null;
  /** u32 */
  biExtDataOffset: number;
}

export const sizeofEXBMINFOHEADER = 16;

export function allocEXBMINFOHEADER(data?: Partial<EXBMINFOHEADER>): Uint8Array {
  const buf = new Uint8Array(sizeofEXBMINFOHEADER);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.bmi !== undefined) view.setBigUint64(0, data.bmi === null ? 0n : BigInt(util.toPointer(data.bmi)), true);
  // 0x08: u32
  if (data?.biExtDataOffset !== undefined) view.setUint32(8, Number(data.biExtDataOffset), true);
  // 0x0c: pad4
  return buf;
}

/**
 * Windows.Win32.Media.Multimedia.JPEGINFOHEADER (size: 24)
 */
export interface JPEGINFOHEADER {
  /** u32 */
  JPEGSize: number;
  /** u32 */
  JPEGProcess: number;
  /** u32 */
  JPEGColorSpaceID: number;
  /** u32 */
  JPEGBitsPerSample: number;
  /** u32 */
  JPEGHSubSampling: number;
  /** u32 */
  JPEGVSubSampling: number;
}

export const sizeofJPEGINFOHEADER = 24;

export function allocJPEGINFOHEADER(data?: Partial<JPEGINFOHEADER>): Uint8Array {
  const buf = new Uint8Array(sizeofJPEGINFOHEADER);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.JPEGSize !== undefined) view.setUint32(0, Number(data.JPEGSize), true);
  // 0x04: u32
  if (data?.JPEGProcess !== undefined) view.setUint32(4, Number(data.JPEGProcess), true);
  // 0x08: u32
  if (data?.JPEGColorSpaceID !== undefined) view.setUint32(8, Number(data.JPEGColorSpaceID), true);
  // 0x0c: u32
  if (data?.JPEGBitsPerSample !== undefined) view.setUint32(12, Number(data.JPEGBitsPerSample), true);
  // 0x10: u32
  if (data?.JPEGHSubSampling !== undefined) view.setUint32(16, Number(data.JPEGHSubSampling), true);
  // 0x14: u32
  if (data?.JPEGVSubSampling !== undefined) view.setUint32(20, Number(data.JPEGVSubSampling), true);
  return buf;
}

/**
 * Windows.Win32.Media.Multimedia.MCI_GENERIC_PARMS (size: 8)
 */
export interface MCI_GENERIC_PARMS {
  /** usize */
  dwCallback: Deno.PointerValue;
}

export const sizeofMCI_GENERIC_PARMS = 8;

export function allocMCI_GENERIC_PARMS(data?: Partial<MCI_GENERIC_PARMS>): Uint8Array {
  const buf = new Uint8Array(sizeofMCI_GENERIC_PARMS);
  const view = new DataView(buf.buffer);
  // 0x00: usize
  if (data?.dwCallback !== undefined) view.setBigUint64(0, BigInt(data.dwCallback), true);
  return buf;
}

export type PSTR = Deno.PointerValue | Uint8Array | null;

/**
 * Windows.Win32.Media.Multimedia.MCI_OPEN_PARMSA (size: 40)
 */
export interface MCI_OPEN_PARMSA {
  /** usize */
  dwCallback: Deno.PointerValue;
  /** u32 */
  wDeviceID: number;
  /** Windows.Win32.Foundation.PSTR */
  lpstrDeviceType: string | null;
  /** Windows.Win32.Foundation.PSTR */
  lpstrElementName: string | null;
  /** Windows.Win32.Foundation.PSTR */
  lpstrAlias: string | null;
}

export const sizeofMCI_OPEN_PARMSA = 40;

export function allocMCI_OPEN_PARMSA(data?: Partial<MCI_OPEN_PARMSA>): Uint8Array {
  const buf = new Uint8Array(sizeofMCI_OPEN_PARMSA);
  const view = new DataView(buf.buffer);
  // 0x00: usize
  if (data?.dwCallback !== undefined) view.setBigUint64(0, BigInt(data.dwCallback), true);
  // 0x08: u32
  if (data?.wDeviceID !== undefined) view.setUint32(8, Number(data.wDeviceID), true);
  // 0x0c: pad4
  // 0x10: buffer
  if (data?.lpstrDeviceType !== undefined) {
    (buf as any)._f16 = util.pstrToFfi(data.lpstrDeviceType);
    view.setBigUint64(16, (buf as any)._f16 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f16)), true);
  }
  // 0x18: buffer
  if (data?.lpstrElementName !== undefined) {
    (buf as any)._f24 = util.pstrToFfi(data.lpstrElementName);
    view.setBigUint64(24, (buf as any)._f24 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f24)), true);
  }
  // 0x20: buffer
  if (data?.lpstrAlias !== undefined) {
    (buf as any)._f32 = util.pstrToFfi(data.lpstrAlias);
    view.setBigUint64(32, (buf as any)._f32 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f32)), true);
  }
  return buf;
}

export type PWSTR = Deno.PointerValue | Uint8Array | null;

/**
 * Windows.Win32.Media.Multimedia.MCI_OPEN_PARMSW (size: 40)
 */
export interface MCI_OPEN_PARMSW {
  /** usize */
  dwCallback: Deno.PointerValue;
  /** u32 */
  wDeviceID: number;
  /** Windows.Win32.Foundation.PWSTR */
  lpstrDeviceType: string | null;
  /** Windows.Win32.Foundation.PWSTR */
  lpstrElementName: string | null;
  /** Windows.Win32.Foundation.PWSTR */
  lpstrAlias: string | null;
}

export const sizeofMCI_OPEN_PARMSW = 40;

export function allocMCI_OPEN_PARMSW(data?: Partial<MCI_OPEN_PARMSW>): Uint8Array {
  const buf = new Uint8Array(sizeofMCI_OPEN_PARMSW);
  const view = new DataView(buf.buffer);
  // 0x00: usize
  if (data?.dwCallback !== undefined) view.setBigUint64(0, BigInt(data.dwCallback), true);
  // 0x08: u32
  if (data?.wDeviceID !== undefined) view.setUint32(8, Number(data.wDeviceID), true);
  // 0x0c: pad4
  // 0x10: buffer
  if (data?.lpstrDeviceType !== undefined) {
    (buf as any)._f16 = util.pwstrToFfi(data.lpstrDeviceType);
    view.setBigUint64(16, (buf as any)._f16 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f16)), true);
  }
  // 0x18: buffer
  if (data?.lpstrElementName !== undefined) {
    (buf as any)._f24 = util.pwstrToFfi(data.lpstrElementName);
    view.setBigUint64(24, (buf as any)._f24 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f24)), true);
  }
  // 0x20: buffer
  if (data?.lpstrAlias !== undefined) {
    (buf as any)._f32 = util.pwstrToFfi(data.lpstrAlias);
    view.setBigUint64(32, (buf as any)._f32 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f32)), true);
  }
  return buf;
}

/**
 * Windows.Win32.Media.Multimedia.MCI_PLAY_PARMS (size: 16)
 */
export interface MCI_PLAY_PARMS {
  /** usize */
  dwCallback: Deno.PointerValue;
  /** u32 */
  dwFrom: number;
  /** u32 */
  dwTo: number;
}

export const sizeofMCI_PLAY_PARMS = 16;

export function allocMCI_PLAY_PARMS(data?: Partial<MCI_PLAY_PARMS>): Uint8Array {
  const buf = new Uint8Array(sizeofMCI_PLAY_PARMS);
  const view = new DataView(buf.buffer);
  // 0x00: usize
  if (data?.dwCallback !== undefined) view.setBigUint64(0, BigInt(data.dwCallback), true);
  // 0x08: u32
  if (data?.dwFrom !== undefined) view.setUint32(8, Number(data.dwFrom), true);
  // 0x0c: u32
  if (data?.dwTo !== undefined) view.setUint32(12, Number(data.dwTo), true);
  return buf;
}

/**
 * Windows.Win32.Media.Multimedia.MCI_SEEK_PARMS (size: 16)
 */
export interface MCI_SEEK_PARMS {
  /** usize */
  dwCallback: Deno.PointerValue;
  /** u32 */
  dwTo: number;
}

export const sizeofMCI_SEEK_PARMS = 16;

export function allocMCI_SEEK_PARMS(data?: Partial<MCI_SEEK_PARMS>): Uint8Array {
  const buf = new Uint8Array(sizeofMCI_SEEK_PARMS);
  const view = new DataView(buf.buffer);
  // 0x00: usize
  if (data?.dwCallback !== undefined) view.setBigUint64(0, BigInt(data.dwCallback), true);
  // 0x08: u32
  if (data?.dwTo !== undefined) view.setUint32(8, Number(data.dwTo), true);
  // 0x0c: pad4
  return buf;
}

/**
 * Windows.Win32.Media.Multimedia.MCI_STATUS_PARMS (size: 24)
 */
export interface MCI_STATUS_PARMS {
  /** usize */
  dwCallback: Deno.PointerValue;
  /** usize */
  dwReturn: Deno.PointerValue;
  /** u32 */
  dwItem: number;
  /** u32 */
  dwTrack: number;
}

export const sizeofMCI_STATUS_PARMS = 24;

export function allocMCI_STATUS_PARMS(data?: Partial<MCI_STATUS_PARMS>): Uint8Array {
  const buf = new Uint8Array(sizeofMCI_STATUS_PARMS);
  const view = new DataView(buf.buffer);
  // 0x00: usize
  if (data?.dwCallback !== undefined) view.setBigUint64(0, BigInt(data.dwCallback), true);
  // 0x08: usize
  if (data?.dwReturn !== undefined) view.setBigUint64(8, BigInt(data.dwReturn), true);
  // 0x10: u32
  if (data?.dwItem !== undefined) view.setUint32(16, Number(data.dwItem), true);
  // 0x14: u32
  if (data?.dwTrack !== undefined) view.setUint32(20, Number(data.dwTrack), true);
  return buf;
}

/**
 * Windows.Win32.Media.Multimedia.MCI_INFO_PARMSA (size: 24)
 */
export interface MCI_INFO_PARMSA {
  /** usize */
  dwCallback: Deno.PointerValue;
  /** Windows.Win32.Foundation.PSTR */
  lpstrReturn: string | null;
  /** u32 */
  dwRetSize: number;
}

export const sizeofMCI_INFO_PARMSA = 24;

export function allocMCI_INFO_PARMSA(data?: Partial<MCI_INFO_PARMSA>): Uint8Array {
  const buf = new Uint8Array(sizeofMCI_INFO_PARMSA);
  const view = new DataView(buf.buffer);
  // 0x00: usize
  if (data?.dwCallback !== undefined) view.setBigUint64(0, BigInt(data.dwCallback), true);
  // 0x08: buffer
  if (data?.lpstrReturn !== undefined) {
    (buf as any)._f8 = util.pstrToFfi(data.lpstrReturn);
    view.setBigUint64(8, (buf as any)._f8 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f8)), true);
  }
  // 0x10: u32
  if (data?.dwRetSize !== undefined) view.setUint32(16, Number(data.dwRetSize), true);
  // 0x14: pad4
  return buf;
}

/**
 * Windows.Win32.Media.Multimedia.MCI_INFO_PARMSW (size: 24)
 */
export interface MCI_INFO_PARMSW {
  /** usize */
  dwCallback: Deno.PointerValue;
  /** Windows.Win32.Foundation.PWSTR */
  lpstrReturn: string | null;
  /** u32 */
  dwRetSize: number;
}

export const sizeofMCI_INFO_PARMSW = 24;

export function allocMCI_INFO_PARMSW(data?: Partial<MCI_INFO_PARMSW>): Uint8Array {
  const buf = new Uint8Array(sizeofMCI_INFO_PARMSW);
  const view = new DataView(buf.buffer);
  // 0x00: usize
  if (data?.dwCallback !== undefined) view.setBigUint64(0, BigInt(data.dwCallback), true);
  // 0x08: buffer
  if (data?.lpstrReturn !== undefined) {
    (buf as any)._f8 = util.pwstrToFfi(data.lpstrReturn);
    view.setBigUint64(8, (buf as any)._f8 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f8)), true);
  }
  // 0x10: u32
  if (data?.dwRetSize !== undefined) view.setUint32(16, Number(data.dwRetSize), true);
  // 0x14: pad4
  return buf;
}

/**
 * Windows.Win32.Media.Multimedia.MCI_GETDEVCAPS_PARMS (size: 16)
 */
export interface MCI_GETDEVCAPS_PARMS {
  /** usize */
  dwCallback: Deno.PointerValue;
  /** u32 */
  dwReturn: number;
  /** u32 */
  dwItem: number;
}

export const sizeofMCI_GETDEVCAPS_PARMS = 16;

export function allocMCI_GETDEVCAPS_PARMS(data?: Partial<MCI_GETDEVCAPS_PARMS>): Uint8Array {
  const buf = new Uint8Array(sizeofMCI_GETDEVCAPS_PARMS);
  const view = new DataView(buf.buffer);
  // 0x00: usize
  if (data?.dwCallback !== undefined) view.setBigUint64(0, BigInt(data.dwCallback), true);
  // 0x08: u32
  if (data?.dwReturn !== undefined) view.setUint32(8, Number(data.dwReturn), true);
  // 0x0c: u32
  if (data?.dwItem !== undefined) view.setUint32(12, Number(data.dwItem), true);
  return buf;
}

/**
 * Windows.Win32.Media.Multimedia.MCI_SYSINFO_PARMSA (size: 32)
 */
export interface MCI_SYSINFO_PARMSA {
  /** usize */
  dwCallback: Deno.PointerValue;
  /** Windows.Win32.Foundation.PSTR */
  lpstrReturn: string | null;
  /** u32 */
  dwRetSize: number;
  /** u32 */
  dwNumber: number;
  /** u32 */
  wDeviceType: number;
}

export const sizeofMCI_SYSINFO_PARMSA = 32;

export function allocMCI_SYSINFO_PARMSA(data?: Partial<MCI_SYSINFO_PARMSA>): Uint8Array {
  const buf = new Uint8Array(sizeofMCI_SYSINFO_PARMSA);
  const view = new DataView(buf.buffer);
  // 0x00: usize
  if (data?.dwCallback !== undefined) view.setBigUint64(0, BigInt(data.dwCallback), true);
  // 0x08: buffer
  if (data?.lpstrReturn !== undefined) {
    (buf as any)._f8 = util.pstrToFfi(data.lpstrReturn);
    view.setBigUint64(8, (buf as any)._f8 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f8)), true);
  }
  // 0x10: u32
  if (data?.dwRetSize !== undefined) view.setUint32(16, Number(data.dwRetSize), true);
  // 0x14: u32
  if (data?.dwNumber !== undefined) view.setUint32(20, Number(data.dwNumber), true);
  // 0x18: u32
  if (data?.wDeviceType !== undefined) view.setUint32(24, Number(data.wDeviceType), true);
  // 0x1c: pad4
  return buf;
}

/**
 * Windows.Win32.Media.Multimedia.MCI_SYSINFO_PARMSW (size: 32)
 */
export interface MCI_SYSINFO_PARMSW {
  /** usize */
  dwCallback: Deno.PointerValue;
  /** Windows.Win32.Foundation.PWSTR */
  lpstrReturn: string | null;
  /** u32 */
  dwRetSize: number;
  /** u32 */
  dwNumber: number;
  /** u32 */
  wDeviceType: number;
}

export const sizeofMCI_SYSINFO_PARMSW = 32;

export function allocMCI_SYSINFO_PARMSW(data?: Partial<MCI_SYSINFO_PARMSW>): Uint8Array {
  const buf = new Uint8Array(sizeofMCI_SYSINFO_PARMSW);
  const view = new DataView(buf.buffer);
  // 0x00: usize
  if (data?.dwCallback !== undefined) view.setBigUint64(0, BigInt(data.dwCallback), true);
  // 0x08: buffer
  if (data?.lpstrReturn !== undefined) {
    (buf as any)._f8 = util.pwstrToFfi(data.lpstrReturn);
    view.setBigUint64(8, (buf as any)._f8 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f8)), true);
  }
  // 0x10: u32
  if (data?.dwRetSize !== undefined) view.setUint32(16, Number(data.dwRetSize), true);
  // 0x14: u32
  if (data?.dwNumber !== undefined) view.setUint32(20, Number(data.dwNumber), true);
  // 0x18: u32
  if (data?.wDeviceType !== undefined) view.setUint32(24, Number(data.wDeviceType), true);
  // 0x1c: pad4
  return buf;
}

/**
 * Windows.Win32.Media.Multimedia.MCI_SET_PARMS (size: 16)
 */
export interface MCI_SET_PARMS {
  /** usize */
  dwCallback: Deno.PointerValue;
  /** u32 */
  dwTimeFormat: number;
  /** u32 */
  dwAudio: number;
}

export const sizeofMCI_SET_PARMS = 16;

export function allocMCI_SET_PARMS(data?: Partial<MCI_SET_PARMS>): Uint8Array {
  const buf = new Uint8Array(sizeofMCI_SET_PARMS);
  const view = new DataView(buf.buffer);
  // 0x00: usize
  if (data?.dwCallback !== undefined) view.setBigUint64(0, BigInt(data.dwCallback), true);
  // 0x08: u32
  if (data?.dwTimeFormat !== undefined) view.setUint32(8, Number(data.dwTimeFormat), true);
  // 0x0c: u32
  if (data?.dwAudio !== undefined) view.setUint32(12, Number(data.dwAudio), true);
  return buf;
}

export type HWND = Deno.PointerValue;

/**
 * Windows.Win32.Media.Multimedia.MCI_BREAK_PARMS (size: 24)
 */
export interface MCI_BREAK_PARMS {
  /** usize */
  dwCallback: Deno.PointerValue;
  /** i32 */
  nVirtKey: number;
  /** Windows.Win32.Foundation.HWND */
  hwndBreak: Deno.PointerValue | null;
}

export const sizeofMCI_BREAK_PARMS = 24;

export function allocMCI_BREAK_PARMS(data?: Partial<MCI_BREAK_PARMS>): Uint8Array {
  const buf = new Uint8Array(sizeofMCI_BREAK_PARMS);
  const view = new DataView(buf.buffer);
  // 0x00: usize
  if (data?.dwCallback !== undefined) view.setBigUint64(0, BigInt(data.dwCallback), true);
  // 0x08: i32
  if (data?.nVirtKey !== undefined) view.setInt32(8, Number(data.nVirtKey), true);
  // 0x0c: pad4
  // 0x10: pointer
  if (data?.hwndBreak !== undefined) view.setBigUint64(16, data.hwndBreak === null ? 0n : BigInt(util.toPointer(data.hwndBreak)), true);
  return buf;
}

/**
 * Windows.Win32.Media.Multimedia.MCI_SAVE_PARMSA (size: 16)
 */
export interface MCI_SAVE_PARMSA {
  /** usize */
  dwCallback: Deno.PointerValue;
  /** Windows.Win32.Foundation.PSTR */
  lpfilename: string | null;
}

export const sizeofMCI_SAVE_PARMSA = 16;

export function allocMCI_SAVE_PARMSA(data?: Partial<MCI_SAVE_PARMSA>): Uint8Array {
  const buf = new Uint8Array(sizeofMCI_SAVE_PARMSA);
  const view = new DataView(buf.buffer);
  // 0x00: usize
  if (data?.dwCallback !== undefined) view.setBigUint64(0, BigInt(data.dwCallback), true);
  // 0x08: buffer
  if (data?.lpfilename !== undefined) {
    (buf as any)._f8 = util.pstrToFfi(data.lpfilename);
    view.setBigUint64(8, (buf as any)._f8 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f8)), true);
  }
  return buf;
}

/**
 * Windows.Win32.Media.Multimedia.MCI_SAVE_PARMSW (size: 16)
 */
export interface MCI_SAVE_PARMSW {
  /** usize */
  dwCallback: Deno.PointerValue;
  /** Windows.Win32.Foundation.PWSTR */
  lpfilename: string | null;
}

export const sizeofMCI_SAVE_PARMSW = 16;

export function allocMCI_SAVE_PARMSW(data?: Partial<MCI_SAVE_PARMSW>): Uint8Array {
  const buf = new Uint8Array(sizeofMCI_SAVE_PARMSW);
  const view = new DataView(buf.buffer);
  // 0x00: usize
  if (data?.dwCallback !== undefined) view.setBigUint64(0, BigInt(data.dwCallback), true);
  // 0x08: buffer
  if (data?.lpfilename !== undefined) {
    (buf as any)._f8 = util.pwstrToFfi(data.lpfilename);
    view.setBigUint64(8, (buf as any)._f8 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f8)), true);
  }
  return buf;
}

/**
 * Windows.Win32.Media.Multimedia.MCI_LOAD_PARMSA (size: 16)
 */
export interface MCI_LOAD_PARMSA {
  /** usize */
  dwCallback: Deno.PointerValue;
  /** Windows.Win32.Foundation.PSTR */
  lpfilename: string | null;
}

export const sizeofMCI_LOAD_PARMSA = 16;

export function allocMCI_LOAD_PARMSA(data?: Partial<MCI_LOAD_PARMSA>): Uint8Array {
  const buf = new Uint8Array(sizeofMCI_LOAD_PARMSA);
  const view = new DataView(buf.buffer);
  // 0x00: usize
  if (data?.dwCallback !== undefined) view.setBigUint64(0, BigInt(data.dwCallback), true);
  // 0x08: buffer
  if (data?.lpfilename !== undefined) {
    (buf as any)._f8 = util.pstrToFfi(data.lpfilename);
    view.setBigUint64(8, (buf as any)._f8 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f8)), true);
  }
  return buf;
}

/**
 * Windows.Win32.Media.Multimedia.MCI_LOAD_PARMSW (size: 16)
 */
export interface MCI_LOAD_PARMSW {
  /** usize */
  dwCallback: Deno.PointerValue;
  /** Windows.Win32.Foundation.PWSTR */
  lpfilename: string | null;
}

export const sizeofMCI_LOAD_PARMSW = 16;

export function allocMCI_LOAD_PARMSW(data?: Partial<MCI_LOAD_PARMSW>): Uint8Array {
  const buf = new Uint8Array(sizeofMCI_LOAD_PARMSW);
  const view = new DataView(buf.buffer);
  // 0x00: usize
  if (data?.dwCallback !== undefined) view.setBigUint64(0, BigInt(data.dwCallback), true);
  // 0x08: buffer
  if (data?.lpfilename !== undefined) {
    (buf as any)._f8 = util.pwstrToFfi(data.lpfilename);
    view.setBigUint64(8, (buf as any)._f8 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f8)), true);
  }
  return buf;
}

/**
 * Windows.Win32.Media.Multimedia.MCI_RECORD_PARMS (size: 16)
 */
export interface MCI_RECORD_PARMS {
  /** usize */
  dwCallback: Deno.PointerValue;
  /** u32 */
  dwFrom: number;
  /** u32 */
  dwTo: number;
}

export const sizeofMCI_RECORD_PARMS = 16;

export function allocMCI_RECORD_PARMS(data?: Partial<MCI_RECORD_PARMS>): Uint8Array {
  const buf = new Uint8Array(sizeofMCI_RECORD_PARMS);
  const view = new DataView(buf.buffer);
  // 0x00: usize
  if (data?.dwCallback !== undefined) view.setBigUint64(0, BigInt(data.dwCallback), true);
  // 0x08: u32
  if (data?.dwFrom !== undefined) view.setUint32(8, Number(data.dwFrom), true);
  // 0x0c: u32
  if (data?.dwTo !== undefined) view.setUint32(12, Number(data.dwTo), true);
  return buf;
}

/**
 * Windows.Win32.Media.Multimedia.MCI_VD_PLAY_PARMS (size: 24)
 */
export interface MCI_VD_PLAY_PARMS {
  /** usize */
  dwCallback: Deno.PointerValue;
  /** u32 */
  dwFrom: number;
  /** u32 */
  dwTo: number;
  /** u32 */
  dwSpeed: number;
}

export const sizeofMCI_VD_PLAY_PARMS = 24;

export function allocMCI_VD_PLAY_PARMS(data?: Partial<MCI_VD_PLAY_PARMS>): Uint8Array {
  const buf = new Uint8Array(sizeofMCI_VD_PLAY_PARMS);
  const view = new DataView(buf.buffer);
  // 0x00: usize
  if (data?.dwCallback !== undefined) view.setBigUint64(0, BigInt(data.dwCallback), true);
  // 0x08: u32
  if (data?.dwFrom !== undefined) view.setUint32(8, Number(data.dwFrom), true);
  // 0x0c: u32
  if (data?.dwTo !== undefined) view.setUint32(12, Number(data.dwTo), true);
  // 0x10: u32
  if (data?.dwSpeed !== undefined) view.setUint32(16, Number(data.dwSpeed), true);
  // 0x14: pad4
  return buf;
}

/**
 * Windows.Win32.Media.Multimedia.MCI_VD_STEP_PARMS (size: 16)
 */
export interface MCI_VD_STEP_PARMS {
  /** usize */
  dwCallback: Deno.PointerValue;
  /** u32 */
  dwFrames: number;
}

export const sizeofMCI_VD_STEP_PARMS = 16;

export function allocMCI_VD_STEP_PARMS(data?: Partial<MCI_VD_STEP_PARMS>): Uint8Array {
  const buf = new Uint8Array(sizeofMCI_VD_STEP_PARMS);
  const view = new DataView(buf.buffer);
  // 0x00: usize
  if (data?.dwCallback !== undefined) view.setBigUint64(0, BigInt(data.dwCallback), true);
  // 0x08: u32
  if (data?.dwFrames !== undefined) view.setUint32(8, Number(data.dwFrames), true);
  // 0x0c: pad4
  return buf;
}

/**
 * Windows.Win32.Media.Multimedia.MCI_VD_ESCAPE_PARMSA (size: 16)
 */
export interface MCI_VD_ESCAPE_PARMSA {
  /** usize */
  dwCallback: Deno.PointerValue;
  /** Windows.Win32.Foundation.PSTR */
  lpstrCommand: string | null;
}

export const sizeofMCI_VD_ESCAPE_PARMSA = 16;

export function allocMCI_VD_ESCAPE_PARMSA(data?: Partial<MCI_VD_ESCAPE_PARMSA>): Uint8Array {
  const buf = new Uint8Array(sizeofMCI_VD_ESCAPE_PARMSA);
  const view = new DataView(buf.buffer);
  // 0x00: usize
  if (data?.dwCallback !== undefined) view.setBigUint64(0, BigInt(data.dwCallback), true);
  // 0x08: buffer
  if (data?.lpstrCommand !== undefined) {
    (buf as any)._f8 = util.pstrToFfi(data.lpstrCommand);
    view.setBigUint64(8, (buf as any)._f8 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f8)), true);
  }
  return buf;
}

/**
 * Windows.Win32.Media.Multimedia.MCI_VD_ESCAPE_PARMSW (size: 16)
 */
export interface MCI_VD_ESCAPE_PARMSW {
  /** usize */
  dwCallback: Deno.PointerValue;
  /** Windows.Win32.Foundation.PWSTR */
  lpstrCommand: string | null;
}

export const sizeofMCI_VD_ESCAPE_PARMSW = 16;

export function allocMCI_VD_ESCAPE_PARMSW(data?: Partial<MCI_VD_ESCAPE_PARMSW>): Uint8Array {
  const buf = new Uint8Array(sizeofMCI_VD_ESCAPE_PARMSW);
  const view = new DataView(buf.buffer);
  // 0x00: usize
  if (data?.dwCallback !== undefined) view.setBigUint64(0, BigInt(data.dwCallback), true);
  // 0x08: buffer
  if (data?.lpstrCommand !== undefined) {
    (buf as any)._f8 = util.pwstrToFfi(data.lpstrCommand);
    view.setBigUint64(8, (buf as any)._f8 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f8)), true);
  }
  return buf;
}

/**
 * Windows.Win32.Media.Multimedia.MCI_WAVE_OPEN_PARMSA (size: 48)
 */
export interface MCI_WAVE_OPEN_PARMSA {
  /** usize */
  dwCallback: Deno.PointerValue;
  /** u32 */
  wDeviceID: number;
  /** Windows.Win32.Foundation.PSTR */
  lpstrDeviceType: string | null;
  /** Windows.Win32.Foundation.PSTR */
  lpstrElementName: string | null;
  /** Windows.Win32.Foundation.PSTR */
  lpstrAlias: string | null;
  /** u32 */
  dwBufferSeconds: number;
}

export const sizeofMCI_WAVE_OPEN_PARMSA = 48;

export function allocMCI_WAVE_OPEN_PARMSA(data?: Partial<MCI_WAVE_OPEN_PARMSA>): Uint8Array {
  const buf = new Uint8Array(sizeofMCI_WAVE_OPEN_PARMSA);
  const view = new DataView(buf.buffer);
  // 0x00: usize
  if (data?.dwCallback !== undefined) view.setBigUint64(0, BigInt(data.dwCallback), true);
  // 0x08: u32
  if (data?.wDeviceID !== undefined) view.setUint32(8, Number(data.wDeviceID), true);
  // 0x0c: pad4
  // 0x10: buffer
  if (data?.lpstrDeviceType !== undefined) {
    (buf as any)._f16 = util.pstrToFfi(data.lpstrDeviceType);
    view.setBigUint64(16, (buf as any)._f16 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f16)), true);
  }
  // 0x18: buffer
  if (data?.lpstrElementName !== undefined) {
    (buf as any)._f24 = util.pstrToFfi(data.lpstrElementName);
    view.setBigUint64(24, (buf as any)._f24 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f24)), true);
  }
  // 0x20: buffer
  if (data?.lpstrAlias !== undefined) {
    (buf as any)._f32 = util.pstrToFfi(data.lpstrAlias);
    view.setBigUint64(32, (buf as any)._f32 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f32)), true);
  }
  // 0x28: u32
  if (data?.dwBufferSeconds !== undefined) view.setUint32(40, Number(data.dwBufferSeconds), true);
  // 0x2c: pad4
  return buf;
}

/**
 * Windows.Win32.Media.Multimedia.MCI_WAVE_OPEN_PARMSW (size: 48)
 */
export interface MCI_WAVE_OPEN_PARMSW {
  /** usize */
  dwCallback: Deno.PointerValue;
  /** u32 */
  wDeviceID: number;
  /** Windows.Win32.Foundation.PWSTR */
  lpstrDeviceType: string | null;
  /** Windows.Win32.Foundation.PWSTR */
  lpstrElementName: string | null;
  /** Windows.Win32.Foundation.PWSTR */
  lpstrAlias: string | null;
  /** u32 */
  dwBufferSeconds: number;
}

export const sizeofMCI_WAVE_OPEN_PARMSW = 48;

export function allocMCI_WAVE_OPEN_PARMSW(data?: Partial<MCI_WAVE_OPEN_PARMSW>): Uint8Array {
  const buf = new Uint8Array(sizeofMCI_WAVE_OPEN_PARMSW);
  const view = new DataView(buf.buffer);
  // 0x00: usize
  if (data?.dwCallback !== undefined) view.setBigUint64(0, BigInt(data.dwCallback), true);
  // 0x08: u32
  if (data?.wDeviceID !== undefined) view.setUint32(8, Number(data.wDeviceID), true);
  // 0x0c: pad4
  // 0x10: buffer
  if (data?.lpstrDeviceType !== undefined) {
    (buf as any)._f16 = util.pwstrToFfi(data.lpstrDeviceType);
    view.setBigUint64(16, (buf as any)._f16 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f16)), true);
  }
  // 0x18: buffer
  if (data?.lpstrElementName !== undefined) {
    (buf as any)._f24 = util.pwstrToFfi(data.lpstrElementName);
    view.setBigUint64(24, (buf as any)._f24 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f24)), true);
  }
  // 0x20: buffer
  if (data?.lpstrAlias !== undefined) {
    (buf as any)._f32 = util.pwstrToFfi(data.lpstrAlias);
    view.setBigUint64(32, (buf as any)._f32 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f32)), true);
  }
  // 0x28: u32
  if (data?.dwBufferSeconds !== undefined) view.setUint32(40, Number(data.dwBufferSeconds), true);
  // 0x2c: pad4
  return buf;
}

/**
 * Windows.Win32.Media.Multimedia.MCI_WAVE_DELETE_PARMS (size: 16)
 */
export interface MCI_WAVE_DELETE_PARMS {
  /** usize */
  dwCallback: Deno.PointerValue;
  /** u32 */
  dwFrom: number;
  /** u32 */
  dwTo: number;
}

export const sizeofMCI_WAVE_DELETE_PARMS = 16;

export function allocMCI_WAVE_DELETE_PARMS(data?: Partial<MCI_WAVE_DELETE_PARMS>): Uint8Array {
  const buf = new Uint8Array(sizeofMCI_WAVE_DELETE_PARMS);
  const view = new DataView(buf.buffer);
  // 0x00: usize
  if (data?.dwCallback !== undefined) view.setBigUint64(0, BigInt(data.dwCallback), true);
  // 0x08: u32
  if (data?.dwFrom !== undefined) view.setUint32(8, Number(data.dwFrom), true);
  // 0x0c: u32
  if (data?.dwTo !== undefined) view.setUint32(12, Number(data.dwTo), true);
  return buf;
}

/**
 * Windows.Win32.Media.Multimedia.MCI_WAVE_SET_PARMS (size: 48)
 */
export interface MCI_WAVE_SET_PARMS {
  /** usize */
  dwCallback: Deno.PointerValue;
  /** u32 */
  dwTimeFormat: number;
  /** u32 */
  dwAudio: number;
  /** u32 */
  wInput: number;
  /** u32 */
  wOutput: number;
  /** u16 */
  wFormatTag: number;
  /** u16 */
  wReserved2: number;
  /** u16 */
  nChannels: number;
  /** u16 */
  wReserved3: number;
  /** u32 */
  nSamplesPerSec: number;
  /** u32 */
  nAvgBytesPerSec: number;
  /** u16 */
  nBlockAlign: number;
  /** u16 */
  wReserved4: number;
  /** u16 */
  wBitsPerSample: number;
  /** u16 */
  wReserved5: number;
}

export const sizeofMCI_WAVE_SET_PARMS = 48;

export function allocMCI_WAVE_SET_PARMS(data?: Partial<MCI_WAVE_SET_PARMS>): Uint8Array {
  const buf = new Uint8Array(sizeofMCI_WAVE_SET_PARMS);
  const view = new DataView(buf.buffer);
  // 0x00: usize
  if (data?.dwCallback !== undefined) view.setBigUint64(0, BigInt(data.dwCallback), true);
  // 0x08: u32
  if (data?.dwTimeFormat !== undefined) view.setUint32(8, Number(data.dwTimeFormat), true);
  // 0x0c: u32
  if (data?.dwAudio !== undefined) view.setUint32(12, Number(data.dwAudio), true);
  // 0x10: u32
  if (data?.wInput !== undefined) view.setUint32(16, Number(data.wInput), true);
  // 0x14: u32
  if (data?.wOutput !== undefined) view.setUint32(20, Number(data.wOutput), true);
  // 0x18: u16
  if (data?.wFormatTag !== undefined) view.setUint16(24, Number(data.wFormatTag), true);
  // 0x1a: u16
  if (data?.wReserved2 !== undefined) view.setUint16(26, Number(data.wReserved2), true);
  // 0x1c: u16
  if (data?.nChannels !== undefined) view.setUint16(28, Number(data.nChannels), true);
  // 0x1e: u16
  if (data?.wReserved3 !== undefined) view.setUint16(30, Number(data.wReserved3), true);
  // 0x20: u32
  if (data?.nSamplesPerSec !== undefined) view.setUint32(32, Number(data.nSamplesPerSec), true);
  // 0x24: u32
  if (data?.nAvgBytesPerSec !== undefined) view.setUint32(36, Number(data.nAvgBytesPerSec), true);
  // 0x28: u16
  if (data?.nBlockAlign !== undefined) view.setUint16(40, Number(data.nBlockAlign), true);
  // 0x2a: u16
  if (data?.wReserved4 !== undefined) view.setUint16(42, Number(data.wReserved4), true);
  // 0x2c: u16
  if (data?.wBitsPerSample !== undefined) view.setUint16(44, Number(data.wBitsPerSample), true);
  // 0x2e: u16
  if (data?.wReserved5 !== undefined) view.setUint16(46, Number(data.wReserved5), true);
  return buf;
}

/**
 * Windows.Win32.Media.Multimedia.MCI_SEQ_SET_PARMS (size: 40)
 */
export interface MCI_SEQ_SET_PARMS {
  /** usize */
  dwCallback: Deno.PointerValue;
  /** u32 */
  dwTimeFormat: number;
  /** u32 */
  dwAudio: number;
  /** u32 */
  dwTempo: number;
  /** u32 */
  dwPort: number;
  /** u32 */
  dwSlave: number;
  /** u32 */
  dwMaster: number;
  /** u32 */
  dwOffset: number;
}

export const sizeofMCI_SEQ_SET_PARMS = 40;

export function allocMCI_SEQ_SET_PARMS(data?: Partial<MCI_SEQ_SET_PARMS>): Uint8Array {
  const buf = new Uint8Array(sizeofMCI_SEQ_SET_PARMS);
  const view = new DataView(buf.buffer);
  // 0x00: usize
  if (data?.dwCallback !== undefined) view.setBigUint64(0, BigInt(data.dwCallback), true);
  // 0x08: u32
  if (data?.dwTimeFormat !== undefined) view.setUint32(8, Number(data.dwTimeFormat), true);
  // 0x0c: u32
  if (data?.dwAudio !== undefined) view.setUint32(12, Number(data.dwAudio), true);
  // 0x10: u32
  if (data?.dwTempo !== undefined) view.setUint32(16, Number(data.dwTempo), true);
  // 0x14: u32
  if (data?.dwPort !== undefined) view.setUint32(20, Number(data.dwPort), true);
  // 0x18: u32
  if (data?.dwSlave !== undefined) view.setUint32(24, Number(data.dwSlave), true);
  // 0x1c: u32
  if (data?.dwMaster !== undefined) view.setUint32(28, Number(data.dwMaster), true);
  // 0x20: u32
  if (data?.dwOffset !== undefined) view.setUint32(32, Number(data.dwOffset), true);
  // 0x24: pad4
  return buf;
}

/**
 * Windows.Win32.Media.Multimedia.MCI_ANIM_OPEN_PARMSA (size: 56)
 */
export interface MCI_ANIM_OPEN_PARMSA {
  /** usize */
  dwCallback: Deno.PointerValue;
  /** u32 */
  wDeviceID: number;
  /** Windows.Win32.Foundation.PSTR */
  lpstrDeviceType: string | null;
  /** Windows.Win32.Foundation.PSTR */
  lpstrElementName: string | null;
  /** Windows.Win32.Foundation.PSTR */
  lpstrAlias: string | null;
  /** u32 */
  dwStyle: number;
  /** Windows.Win32.Foundation.HWND */
  hWndParent: Deno.PointerValue | null;
}

export const sizeofMCI_ANIM_OPEN_PARMSA = 56;

export function allocMCI_ANIM_OPEN_PARMSA(data?: Partial<MCI_ANIM_OPEN_PARMSA>): Uint8Array {
  const buf = new Uint8Array(sizeofMCI_ANIM_OPEN_PARMSA);
  const view = new DataView(buf.buffer);
  // 0x00: usize
  if (data?.dwCallback !== undefined) view.setBigUint64(0, BigInt(data.dwCallback), true);
  // 0x08: u32
  if (data?.wDeviceID !== undefined) view.setUint32(8, Number(data.wDeviceID), true);
  // 0x0c: pad4
  // 0x10: buffer
  if (data?.lpstrDeviceType !== undefined) {
    (buf as any)._f16 = util.pstrToFfi(data.lpstrDeviceType);
    view.setBigUint64(16, (buf as any)._f16 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f16)), true);
  }
  // 0x18: buffer
  if (data?.lpstrElementName !== undefined) {
    (buf as any)._f24 = util.pstrToFfi(data.lpstrElementName);
    view.setBigUint64(24, (buf as any)._f24 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f24)), true);
  }
  // 0x20: buffer
  if (data?.lpstrAlias !== undefined) {
    (buf as any)._f32 = util.pstrToFfi(data.lpstrAlias);
    view.setBigUint64(32, (buf as any)._f32 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f32)), true);
  }
  // 0x28: u32
  if (data?.dwStyle !== undefined) view.setUint32(40, Number(data.dwStyle), true);
  // 0x2c: pad4
  // 0x30: pointer
  if (data?.hWndParent !== undefined) view.setBigUint64(48, data.hWndParent === null ? 0n : BigInt(util.toPointer(data.hWndParent)), true);
  return buf;
}

/**
 * Windows.Win32.Media.Multimedia.MCI_ANIM_OPEN_PARMSW (size: 56)
 */
export interface MCI_ANIM_OPEN_PARMSW {
  /** usize */
  dwCallback: Deno.PointerValue;
  /** u32 */
  wDeviceID: number;
  /** Windows.Win32.Foundation.PWSTR */
  lpstrDeviceType: string | null;
  /** Windows.Win32.Foundation.PWSTR */
  lpstrElementName: string | null;
  /** Windows.Win32.Foundation.PWSTR */
  lpstrAlias: string | null;
  /** u32 */
  dwStyle: number;
  /** Windows.Win32.Foundation.HWND */
  hWndParent: Deno.PointerValue | null;
}

export const sizeofMCI_ANIM_OPEN_PARMSW = 56;

export function allocMCI_ANIM_OPEN_PARMSW(data?: Partial<MCI_ANIM_OPEN_PARMSW>): Uint8Array {
  const buf = new Uint8Array(sizeofMCI_ANIM_OPEN_PARMSW);
  const view = new DataView(buf.buffer);
  // 0x00: usize
  if (data?.dwCallback !== undefined) view.setBigUint64(0, BigInt(data.dwCallback), true);
  // 0x08: u32
  if (data?.wDeviceID !== undefined) view.setUint32(8, Number(data.wDeviceID), true);
  // 0x0c: pad4
  // 0x10: buffer
  if (data?.lpstrDeviceType !== undefined) {
    (buf as any)._f16 = util.pwstrToFfi(data.lpstrDeviceType);
    view.setBigUint64(16, (buf as any)._f16 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f16)), true);
  }
  // 0x18: buffer
  if (data?.lpstrElementName !== undefined) {
    (buf as any)._f24 = util.pwstrToFfi(data.lpstrElementName);
    view.setBigUint64(24, (buf as any)._f24 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f24)), true);
  }
  // 0x20: buffer
  if (data?.lpstrAlias !== undefined) {
    (buf as any)._f32 = util.pwstrToFfi(data.lpstrAlias);
    view.setBigUint64(32, (buf as any)._f32 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f32)), true);
  }
  // 0x28: u32
  if (data?.dwStyle !== undefined) view.setUint32(40, Number(data.dwStyle), true);
  // 0x2c: pad4
  // 0x30: pointer
  if (data?.hWndParent !== undefined) view.setBigUint64(48, data.hWndParent === null ? 0n : BigInt(util.toPointer(data.hWndParent)), true);
  return buf;
}

/**
 * Windows.Win32.Media.Multimedia.MCI_ANIM_PLAY_PARMS (size: 24)
 */
export interface MCI_ANIM_PLAY_PARMS {
  /** usize */
  dwCallback: Deno.PointerValue;
  /** u32 */
  dwFrom: number;
  /** u32 */
  dwTo: number;
  /** u32 */
  dwSpeed: number;
}

export const sizeofMCI_ANIM_PLAY_PARMS = 24;

export function allocMCI_ANIM_PLAY_PARMS(data?: Partial<MCI_ANIM_PLAY_PARMS>): Uint8Array {
  const buf = new Uint8Array(sizeofMCI_ANIM_PLAY_PARMS);
  const view = new DataView(buf.buffer);
  // 0x00: usize
  if (data?.dwCallback !== undefined) view.setBigUint64(0, BigInt(data.dwCallback), true);
  // 0x08: u32
  if (data?.dwFrom !== undefined) view.setUint32(8, Number(data.dwFrom), true);
  // 0x0c: u32
  if (data?.dwTo !== undefined) view.setUint32(12, Number(data.dwTo), true);
  // 0x10: u32
  if (data?.dwSpeed !== undefined) view.setUint32(16, Number(data.dwSpeed), true);
  // 0x14: pad4
  return buf;
}

/**
 * Windows.Win32.Media.Multimedia.MCI_ANIM_STEP_PARMS (size: 16)
 */
export interface MCI_ANIM_STEP_PARMS {
  /** usize */
  dwCallback: Deno.PointerValue;
  /** u32 */
  dwFrames: number;
}

export const sizeofMCI_ANIM_STEP_PARMS = 16;

export function allocMCI_ANIM_STEP_PARMS(data?: Partial<MCI_ANIM_STEP_PARMS>): Uint8Array {
  const buf = new Uint8Array(sizeofMCI_ANIM_STEP_PARMS);
  const view = new DataView(buf.buffer);
  // 0x00: usize
  if (data?.dwCallback !== undefined) view.setBigUint64(0, BigInt(data.dwCallback), true);
  // 0x08: u32
  if (data?.dwFrames !== undefined) view.setUint32(8, Number(data.dwFrames), true);
  // 0x0c: pad4
  return buf;
}

/**
 * Windows.Win32.Media.Multimedia.MCI_ANIM_WINDOW_PARMSA (size: 32)
 */
export interface MCI_ANIM_WINDOW_PARMSA {
  /** usize */
  dwCallback: Deno.PointerValue;
  /** Windows.Win32.Foundation.HWND */
  hWnd: Deno.PointerValue | null;
  /** u32 */
  nCmdShow: number;
  /** Windows.Win32.Foundation.PSTR */
  lpstrText: string | null;
}

export const sizeofMCI_ANIM_WINDOW_PARMSA = 32;

export function allocMCI_ANIM_WINDOW_PARMSA(data?: Partial<MCI_ANIM_WINDOW_PARMSA>): Uint8Array {
  const buf = new Uint8Array(sizeofMCI_ANIM_WINDOW_PARMSA);
  const view = new DataView(buf.buffer);
  // 0x00: usize
  if (data?.dwCallback !== undefined) view.setBigUint64(0, BigInt(data.dwCallback), true);
  // 0x08: pointer
  if (data?.hWnd !== undefined) view.setBigUint64(8, data.hWnd === null ? 0n : BigInt(util.toPointer(data.hWnd)), true);
  // 0x10: u32
  if (data?.nCmdShow !== undefined) view.setUint32(16, Number(data.nCmdShow), true);
  // 0x14: pad4
  // 0x18: buffer
  if (data?.lpstrText !== undefined) {
    (buf as any)._f24 = util.pstrToFfi(data.lpstrText);
    view.setBigUint64(24, (buf as any)._f24 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f24)), true);
  }
  return buf;
}

/**
 * Windows.Win32.Media.Multimedia.MCI_ANIM_WINDOW_PARMSW (size: 32)
 */
export interface MCI_ANIM_WINDOW_PARMSW {
  /** usize */
  dwCallback: Deno.PointerValue;
  /** Windows.Win32.Foundation.HWND */
  hWnd: Deno.PointerValue | null;
  /** u32 */
  nCmdShow: number;
  /** Windows.Win32.Foundation.PWSTR */
  lpstrText: string | null;
}

export const sizeofMCI_ANIM_WINDOW_PARMSW = 32;

export function allocMCI_ANIM_WINDOW_PARMSW(data?: Partial<MCI_ANIM_WINDOW_PARMSW>): Uint8Array {
  const buf = new Uint8Array(sizeofMCI_ANIM_WINDOW_PARMSW);
  const view = new DataView(buf.buffer);
  // 0x00: usize
  if (data?.dwCallback !== undefined) view.setBigUint64(0, BigInt(data.dwCallback), true);
  // 0x08: pointer
  if (data?.hWnd !== undefined) view.setBigUint64(8, data.hWnd === null ? 0n : BigInt(util.toPointer(data.hWnd)), true);
  // 0x10: u32
  if (data?.nCmdShow !== undefined) view.setUint32(16, Number(data.nCmdShow), true);
  // 0x14: pad4
  // 0x18: buffer
  if (data?.lpstrText !== undefined) {
    (buf as any)._f24 = util.pwstrToFfi(data.lpstrText);
    view.setBigUint64(24, (buf as any)._f24 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f24)), true);
  }
  return buf;
}

/**
 * Windows.Win32.Foundation.RECT (size: 16)
 */
export interface RECT {
  /** i32 */
  left: number;
  /** i32 */
  top: number;
  /** i32 */
  right: number;
  /** i32 */
  bottom: number;
}

export const sizeofRECT = 16;

export function allocRECT(data?: Partial<RECT>): Uint8Array {
  const buf = new Uint8Array(sizeofRECT);
  const view = new DataView(buf.buffer);
  // 0x00: i32
  if (data?.left !== undefined) view.setInt32(0, Number(data.left), true);
  // 0x04: i32
  if (data?.top !== undefined) view.setInt32(4, Number(data.top), true);
  // 0x08: i32
  if (data?.right !== undefined) view.setInt32(8, Number(data.right), true);
  // 0x0c: i32
  if (data?.bottom !== undefined) view.setInt32(12, Number(data.bottom), true);
  return buf;
}

/**
 * Windows.Win32.Media.Multimedia.MCI_ANIM_RECT_PARMS (size: 16)
 */
export interface MCI_ANIM_RECT_PARMS {
  /** usize */
  dwCallback: Deno.PointerValue;
  /** Windows.Win32.Foundation.RECT */
  rc: Uint8Array | Deno.PointerValue | null;
}

export const sizeofMCI_ANIM_RECT_PARMS = 16;

export function allocMCI_ANIM_RECT_PARMS(data?: Partial<MCI_ANIM_RECT_PARMS>): Uint8Array {
  const buf = new Uint8Array(sizeofMCI_ANIM_RECT_PARMS);
  const view = new DataView(buf.buffer);
  // 0x00: usize
  if (data?.dwCallback !== undefined) view.setBigUint64(0, BigInt(data.dwCallback), true);
  // 0x08: pointer
  if (data?.rc !== undefined) view.setBigUint64(8, data.rc === null ? 0n : BigInt(util.toPointer(data.rc)), true);
  return buf;
}

export type HDC = Deno.PointerValue;

/**
 * Windows.Win32.Media.Multimedia.MCI_ANIM_UPDATE_PARMS (size: 24)
 */
export interface MCI_ANIM_UPDATE_PARMS {
  /** usize */
  dwCallback: Deno.PointerValue;
  /** Windows.Win32.Foundation.RECT */
  rc: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Graphics.Gdi.HDC */
  hDC: Uint8Array | Deno.PointerValue | null;
}

export const sizeofMCI_ANIM_UPDATE_PARMS = 24;

export function allocMCI_ANIM_UPDATE_PARMS(data?: Partial<MCI_ANIM_UPDATE_PARMS>): Uint8Array {
  const buf = new Uint8Array(sizeofMCI_ANIM_UPDATE_PARMS);
  const view = new DataView(buf.buffer);
  // 0x00: usize
  if (data?.dwCallback !== undefined) view.setBigUint64(0, BigInt(data.dwCallback), true);
  // 0x08: pointer
  if (data?.rc !== undefined) view.setBigUint64(8, data.rc === null ? 0n : BigInt(util.toPointer(data.rc)), true);
  // 0x10: pointer
  if (data?.hDC !== undefined) view.setBigUint64(16, data.hDC === null ? 0n : BigInt(util.toPointer(data.hDC)), true);
  return buf;
}

/**
 * Windows.Win32.Media.Multimedia.MCI_OVLY_OPEN_PARMSA (size: 56)
 */
export interface MCI_OVLY_OPEN_PARMSA {
  /** usize */
  dwCallback: Deno.PointerValue;
  /** u32 */
  wDeviceID: number;
  /** Windows.Win32.Foundation.PSTR */
  lpstrDeviceType: string | null;
  /** Windows.Win32.Foundation.PSTR */
  lpstrElementName: string | null;
  /** Windows.Win32.Foundation.PSTR */
  lpstrAlias: string | null;
  /** u32 */
  dwStyle: number;
  /** Windows.Win32.Foundation.HWND */
  hWndParent: Deno.PointerValue | null;
}

export const sizeofMCI_OVLY_OPEN_PARMSA = 56;

export function allocMCI_OVLY_OPEN_PARMSA(data?: Partial<MCI_OVLY_OPEN_PARMSA>): Uint8Array {
  const buf = new Uint8Array(sizeofMCI_OVLY_OPEN_PARMSA);
  const view = new DataView(buf.buffer);
  // 0x00: usize
  if (data?.dwCallback !== undefined) view.setBigUint64(0, BigInt(data.dwCallback), true);
  // 0x08: u32
  if (data?.wDeviceID !== undefined) view.setUint32(8, Number(data.wDeviceID), true);
  // 0x0c: pad4
  // 0x10: buffer
  if (data?.lpstrDeviceType !== undefined) {
    (buf as any)._f16 = util.pstrToFfi(data.lpstrDeviceType);
    view.setBigUint64(16, (buf as any)._f16 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f16)), true);
  }
  // 0x18: buffer
  if (data?.lpstrElementName !== undefined) {
    (buf as any)._f24 = util.pstrToFfi(data.lpstrElementName);
    view.setBigUint64(24, (buf as any)._f24 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f24)), true);
  }
  // 0x20: buffer
  if (data?.lpstrAlias !== undefined) {
    (buf as any)._f32 = util.pstrToFfi(data.lpstrAlias);
    view.setBigUint64(32, (buf as any)._f32 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f32)), true);
  }
  // 0x28: u32
  if (data?.dwStyle !== undefined) view.setUint32(40, Number(data.dwStyle), true);
  // 0x2c: pad4
  // 0x30: pointer
  if (data?.hWndParent !== undefined) view.setBigUint64(48, data.hWndParent === null ? 0n : BigInt(util.toPointer(data.hWndParent)), true);
  return buf;
}

/**
 * Windows.Win32.Media.Multimedia.MCI_OVLY_OPEN_PARMSW (size: 56)
 */
export interface MCI_OVLY_OPEN_PARMSW {
  /** usize */
  dwCallback: Deno.PointerValue;
  /** u32 */
  wDeviceID: number;
  /** Windows.Win32.Foundation.PWSTR */
  lpstrDeviceType: string | null;
  /** Windows.Win32.Foundation.PWSTR */
  lpstrElementName: string | null;
  /** Windows.Win32.Foundation.PWSTR */
  lpstrAlias: string | null;
  /** u32 */
  dwStyle: number;
  /** Windows.Win32.Foundation.HWND */
  hWndParent: Deno.PointerValue | null;
}

export const sizeofMCI_OVLY_OPEN_PARMSW = 56;

export function allocMCI_OVLY_OPEN_PARMSW(data?: Partial<MCI_OVLY_OPEN_PARMSW>): Uint8Array {
  const buf = new Uint8Array(sizeofMCI_OVLY_OPEN_PARMSW);
  const view = new DataView(buf.buffer);
  // 0x00: usize
  if (data?.dwCallback !== undefined) view.setBigUint64(0, BigInt(data.dwCallback), true);
  // 0x08: u32
  if (data?.wDeviceID !== undefined) view.setUint32(8, Number(data.wDeviceID), true);
  // 0x0c: pad4
  // 0x10: buffer
  if (data?.lpstrDeviceType !== undefined) {
    (buf as any)._f16 = util.pwstrToFfi(data.lpstrDeviceType);
    view.setBigUint64(16, (buf as any)._f16 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f16)), true);
  }
  // 0x18: buffer
  if (data?.lpstrElementName !== undefined) {
    (buf as any)._f24 = util.pwstrToFfi(data.lpstrElementName);
    view.setBigUint64(24, (buf as any)._f24 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f24)), true);
  }
  // 0x20: buffer
  if (data?.lpstrAlias !== undefined) {
    (buf as any)._f32 = util.pwstrToFfi(data.lpstrAlias);
    view.setBigUint64(32, (buf as any)._f32 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f32)), true);
  }
  // 0x28: u32
  if (data?.dwStyle !== undefined) view.setUint32(40, Number(data.dwStyle), true);
  // 0x2c: pad4
  // 0x30: pointer
  if (data?.hWndParent !== undefined) view.setBigUint64(48, data.hWndParent === null ? 0n : BigInt(util.toPointer(data.hWndParent)), true);
  return buf;
}

/**
 * Windows.Win32.Media.Multimedia.MCI_OVLY_WINDOW_PARMSA (size: 32)
 */
export interface MCI_OVLY_WINDOW_PARMSA {
  /** usize */
  dwCallback: Deno.PointerValue;
  /** Windows.Win32.Foundation.HWND */
  hWnd: Deno.PointerValue | null;
  /** u32 */
  nCmdShow: number;
  /** Windows.Win32.Foundation.PSTR */
  lpstrText: string | null;
}

export const sizeofMCI_OVLY_WINDOW_PARMSA = 32;

export function allocMCI_OVLY_WINDOW_PARMSA(data?: Partial<MCI_OVLY_WINDOW_PARMSA>): Uint8Array {
  const buf = new Uint8Array(sizeofMCI_OVLY_WINDOW_PARMSA);
  const view = new DataView(buf.buffer);
  // 0x00: usize
  if (data?.dwCallback !== undefined) view.setBigUint64(0, BigInt(data.dwCallback), true);
  // 0x08: pointer
  if (data?.hWnd !== undefined) view.setBigUint64(8, data.hWnd === null ? 0n : BigInt(util.toPointer(data.hWnd)), true);
  // 0x10: u32
  if (data?.nCmdShow !== undefined) view.setUint32(16, Number(data.nCmdShow), true);
  // 0x14: pad4
  // 0x18: buffer
  if (data?.lpstrText !== undefined) {
    (buf as any)._f24 = util.pstrToFfi(data.lpstrText);
    view.setBigUint64(24, (buf as any)._f24 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f24)), true);
  }
  return buf;
}

/**
 * Windows.Win32.Media.Multimedia.MCI_OVLY_WINDOW_PARMSW (size: 32)
 */
export interface MCI_OVLY_WINDOW_PARMSW {
  /** usize */
  dwCallback: Deno.PointerValue;
  /** Windows.Win32.Foundation.HWND */
  hWnd: Deno.PointerValue | null;
  /** u32 */
  nCmdShow: number;
  /** Windows.Win32.Foundation.PWSTR */
  lpstrText: string | null;
}

export const sizeofMCI_OVLY_WINDOW_PARMSW = 32;

export function allocMCI_OVLY_WINDOW_PARMSW(data?: Partial<MCI_OVLY_WINDOW_PARMSW>): Uint8Array {
  const buf = new Uint8Array(sizeofMCI_OVLY_WINDOW_PARMSW);
  const view = new DataView(buf.buffer);
  // 0x00: usize
  if (data?.dwCallback !== undefined) view.setBigUint64(0, BigInt(data.dwCallback), true);
  // 0x08: pointer
  if (data?.hWnd !== undefined) view.setBigUint64(8, data.hWnd === null ? 0n : BigInt(util.toPointer(data.hWnd)), true);
  // 0x10: u32
  if (data?.nCmdShow !== undefined) view.setUint32(16, Number(data.nCmdShow), true);
  // 0x14: pad4
  // 0x18: buffer
  if (data?.lpstrText !== undefined) {
    (buf as any)._f24 = util.pwstrToFfi(data.lpstrText);
    view.setBigUint64(24, (buf as any)._f24 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f24)), true);
  }
  return buf;
}

/**
 * Windows.Win32.Media.Multimedia.MCI_OVLY_RECT_PARMS (size: 16)
 */
export interface MCI_OVLY_RECT_PARMS {
  /** usize */
  dwCallback: Deno.PointerValue;
  /** Windows.Win32.Foundation.RECT */
  rc: Uint8Array | Deno.PointerValue | null;
}

export const sizeofMCI_OVLY_RECT_PARMS = 16;

export function allocMCI_OVLY_RECT_PARMS(data?: Partial<MCI_OVLY_RECT_PARMS>): Uint8Array {
  const buf = new Uint8Array(sizeofMCI_OVLY_RECT_PARMS);
  const view = new DataView(buf.buffer);
  // 0x00: usize
  if (data?.dwCallback !== undefined) view.setBigUint64(0, BigInt(data.dwCallback), true);
  // 0x08: pointer
  if (data?.rc !== undefined) view.setBigUint64(8, data.rc === null ? 0n : BigInt(util.toPointer(data.rc)), true);
  return buf;
}

/**
 * Windows.Win32.Media.Multimedia.MCI_OVLY_SAVE_PARMSA (size: 24)
 */
export interface MCI_OVLY_SAVE_PARMSA {
  /** usize */
  dwCallback: Deno.PointerValue;
  /** Windows.Win32.Foundation.PSTR */
  lpfilename: string | null;
  /** Windows.Win32.Foundation.RECT */
  rc: Uint8Array | Deno.PointerValue | null;
}

export const sizeofMCI_OVLY_SAVE_PARMSA = 24;

export function allocMCI_OVLY_SAVE_PARMSA(data?: Partial<MCI_OVLY_SAVE_PARMSA>): Uint8Array {
  const buf = new Uint8Array(sizeofMCI_OVLY_SAVE_PARMSA);
  const view = new DataView(buf.buffer);
  // 0x00: usize
  if (data?.dwCallback !== undefined) view.setBigUint64(0, BigInt(data.dwCallback), true);
  // 0x08: buffer
  if (data?.lpfilename !== undefined) {
    (buf as any)._f8 = util.pstrToFfi(data.lpfilename);
    view.setBigUint64(8, (buf as any)._f8 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f8)), true);
  }
  // 0x10: pointer
  if (data?.rc !== undefined) view.setBigUint64(16, data.rc === null ? 0n : BigInt(util.toPointer(data.rc)), true);
  return buf;
}

/**
 * Windows.Win32.Media.Multimedia.MCI_OVLY_SAVE_PARMSW (size: 24)
 */
export interface MCI_OVLY_SAVE_PARMSW {
  /** usize */
  dwCallback: Deno.PointerValue;
  /** Windows.Win32.Foundation.PWSTR */
  lpfilename: string | null;
  /** Windows.Win32.Foundation.RECT */
  rc: Uint8Array | Deno.PointerValue | null;
}

export const sizeofMCI_OVLY_SAVE_PARMSW = 24;

export function allocMCI_OVLY_SAVE_PARMSW(data?: Partial<MCI_OVLY_SAVE_PARMSW>): Uint8Array {
  const buf = new Uint8Array(sizeofMCI_OVLY_SAVE_PARMSW);
  const view = new DataView(buf.buffer);
  // 0x00: usize
  if (data?.dwCallback !== undefined) view.setBigUint64(0, BigInt(data.dwCallback), true);
  // 0x08: buffer
  if (data?.lpfilename !== undefined) {
    (buf as any)._f8 = util.pwstrToFfi(data.lpfilename);
    view.setBigUint64(8, (buf as any)._f8 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f8)), true);
  }
  // 0x10: pointer
  if (data?.rc !== undefined) view.setBigUint64(16, data.rc === null ? 0n : BigInt(util.toPointer(data.rc)), true);
  return buf;
}

/**
 * Windows.Win32.Media.Multimedia.MCI_OVLY_LOAD_PARMSA (size: 24)
 */
export interface MCI_OVLY_LOAD_PARMSA {
  /** usize */
  dwCallback: Deno.PointerValue;
  /** Windows.Win32.Foundation.PSTR */
  lpfilename: string | null;
  /** Windows.Win32.Foundation.RECT */
  rc: Uint8Array | Deno.PointerValue | null;
}

export const sizeofMCI_OVLY_LOAD_PARMSA = 24;

export function allocMCI_OVLY_LOAD_PARMSA(data?: Partial<MCI_OVLY_LOAD_PARMSA>): Uint8Array {
  const buf = new Uint8Array(sizeofMCI_OVLY_LOAD_PARMSA);
  const view = new DataView(buf.buffer);
  // 0x00: usize
  if (data?.dwCallback !== undefined) view.setBigUint64(0, BigInt(data.dwCallback), true);
  // 0x08: buffer
  if (data?.lpfilename !== undefined) {
    (buf as any)._f8 = util.pstrToFfi(data.lpfilename);
    view.setBigUint64(8, (buf as any)._f8 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f8)), true);
  }
  // 0x10: pointer
  if (data?.rc !== undefined) view.setBigUint64(16, data.rc === null ? 0n : BigInt(util.toPointer(data.rc)), true);
  return buf;
}

/**
 * Windows.Win32.Media.Multimedia.MCI_OVLY_LOAD_PARMSW (size: 24)
 */
export interface MCI_OVLY_LOAD_PARMSW {
  /** usize */
  dwCallback: Deno.PointerValue;
  /** Windows.Win32.Foundation.PWSTR */
  lpfilename: string | null;
  /** Windows.Win32.Foundation.RECT */
  rc: Uint8Array | Deno.PointerValue | null;
}

export const sizeofMCI_OVLY_LOAD_PARMSW = 24;

export function allocMCI_OVLY_LOAD_PARMSW(data?: Partial<MCI_OVLY_LOAD_PARMSW>): Uint8Array {
  const buf = new Uint8Array(sizeofMCI_OVLY_LOAD_PARMSW);
  const view = new DataView(buf.buffer);
  // 0x00: usize
  if (data?.dwCallback !== undefined) view.setBigUint64(0, BigInt(data.dwCallback), true);
  // 0x08: buffer
  if (data?.lpfilename !== undefined) {
    (buf as any)._f8 = util.pwstrToFfi(data.lpfilename);
    view.setBigUint64(8, (buf as any)._f8 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f8)), true);
  }
  // 0x10: pointer
  if (data?.rc !== undefined) view.setBigUint64(16, data.rc === null ? 0n : BigInt(util.toPointer(data.rc)), true);
  return buf;
}

/**
 * Windows.Win32.Media.Multimedia.DRVCONFIGINFOEX (size: 32)
 */
export interface DRVCONFIGINFOEX {
  /** u32 */
  dwDCISize: number;
  /** Windows.Win32.Foundation.PWSTR */
  lpszDCISectionName: string | null;
  /** Windows.Win32.Foundation.PWSTR */
  lpszDCIAliasName: string | null;
  /** u32 */
  dnDevNode: number;
}

export const sizeofDRVCONFIGINFOEX = 32;

export function allocDRVCONFIGINFOEX(data?: Partial<DRVCONFIGINFOEX>): Uint8Array {
  const buf = new Uint8Array(sizeofDRVCONFIGINFOEX);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.dwDCISize !== undefined) view.setUint32(0, Number(data.dwDCISize), true);
  // 0x04: pad4
  // 0x08: buffer
  if (data?.lpszDCISectionName !== undefined) {
    (buf as any)._f8 = util.pwstrToFfi(data.lpszDCISectionName);
    view.setBigUint64(8, (buf as any)._f8 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f8)), true);
  }
  // 0x10: buffer
  if (data?.lpszDCIAliasName !== undefined) {
    (buf as any)._f16 = util.pwstrToFfi(data.lpszDCIAliasName);
    view.setBigUint64(16, (buf as any)._f16 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f16)), true);
  }
  // 0x18: u32
  if (data?.dnDevNode !== undefined) view.setUint32(24, Number(data.dnDevNode), true);
  // 0x1c: pad4
  return buf;
}

/**
 * Windows.Win32.Media.Multimedia.DRVCONFIGINFO (size: 24)
 */
export interface DRVCONFIGINFO {
  /** u32 */
  dwDCISize: number;
  /** Windows.Win32.Foundation.PWSTR */
  lpszDCISectionName: string | null;
  /** Windows.Win32.Foundation.PWSTR */
  lpszDCIAliasName: string | null;
}

export const sizeofDRVCONFIGINFO = 24;

export function allocDRVCONFIGINFO(data?: Partial<DRVCONFIGINFO>): Uint8Array {
  const buf = new Uint8Array(sizeofDRVCONFIGINFO);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.dwDCISize !== undefined) view.setUint32(0, Number(data.dwDCISize), true);
  // 0x04: pad4
  // 0x08: buffer
  if (data?.lpszDCISectionName !== undefined) {
    (buf as any)._f8 = util.pwstrToFfi(data.lpszDCISectionName);
    view.setBigUint64(8, (buf as any)._f8 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f8)), true);
  }
  // 0x10: buffer
  if (data?.lpszDCIAliasName !== undefined) {
    (buf as any)._f16 = util.pwstrToFfi(data.lpszDCIAliasName);
    view.setBigUint64(16, (buf as any)._f16 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f16)), true);
  }
  return buf;
}

export type HTASK = Deno.PointerValue;

/**
 * Windows.Win32.Media.Multimedia.MMIOINFO (size: 104)
 */
export interface MMIOINFO {
  /** u32 */
  dwFlags: number;
  /** u32 */
  fccIOProc: number;
  /** Windows.Win32.Media.Multimedia.LPMMIOPROC */
  pIOProc: Uint8Array | Deno.PointerValue | null;
  /** u32 */
  wErrorRet: number;
  /** Windows.Win32.Media.HTASK */
  htask: Uint8Array | Deno.PointerValue | null;
  /** i32 */
  cchBuffer: number;
  /** ptr */
  pchBuffer: Deno.PointerValue | Uint8Array | null;
  /** ptr */
  pchNext: Deno.PointerValue | Uint8Array | null;
  /** ptr */
  pchEndRead: Deno.PointerValue | Uint8Array | null;
  /** ptr */
  pchEndWrite: Deno.PointerValue | Uint8Array | null;
  /** i32 */
  lBufOffset: number;
  /** i32 */
  lDiskOffset: number;
  /** array */
  adwInfo: Deno.PointerValue | null;
  /** u32 */
  dwReserved1: number;
  /** u32 */
  dwReserved2: number;
  /** Windows.Win32.Media.Multimedia.HMMIO */
  hmmio: Uint8Array | Deno.PointerValue | null;
}

export const sizeofMMIOINFO = 104;

export function allocMMIOINFO(data?: Partial<MMIOINFO>): Uint8Array {
  const buf = new Uint8Array(sizeofMMIOINFO);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.dwFlags !== undefined) view.setUint32(0, Number(data.dwFlags), true);
  // 0x04: u32
  if (data?.fccIOProc !== undefined) view.setUint32(4, Number(data.fccIOProc), true);
  // 0x08: pointer
  if (data?.pIOProc !== undefined) view.setBigUint64(8, data.pIOProc === null ? 0n : BigInt(util.toPointer(data.pIOProc)), true);
  // 0x10: u32
  if (data?.wErrorRet !== undefined) view.setUint32(16, Number(data.wErrorRet), true);
  // 0x14: pad4
  // 0x18: pointer
  if (data?.htask !== undefined) view.setBigUint64(24, data.htask === null ? 0n : BigInt(util.toPointer(data.htask)), true);
  // 0x20: i32
  if (data?.cchBuffer !== undefined) view.setInt32(32, Number(data.cchBuffer), true);
  // 0x24: pad4
  // 0x28: pointer
  if (data?.pchBuffer !== undefined) view.setBigUint64(40, data.pchBuffer === null ? 0n : BigInt(util.toPointer(data.pchBuffer)), true);
  // 0x30: pointer
  if (data?.pchNext !== undefined) view.setBigUint64(48, data.pchNext === null ? 0n : BigInt(util.toPointer(data.pchNext)), true);
  // 0x38: pointer
  if (data?.pchEndRead !== undefined) view.setBigUint64(56, data.pchEndRead === null ? 0n : BigInt(util.toPointer(data.pchEndRead)), true);
  // 0x40: pointer
  if (data?.pchEndWrite !== undefined) view.setBigUint64(64, data.pchEndWrite === null ? 0n : BigInt(util.toPointer(data.pchEndWrite)), true);
  // 0x48: i32
  if (data?.lBufOffset !== undefined) view.setInt32(72, Number(data.lBufOffset), true);
  // 0x4c: i32
  if (data?.lDiskOffset !== undefined) view.setInt32(76, Number(data.lDiskOffset), true);
  // 0x50: pointer
  if (data?.adwInfo !== undefined) view.setBigUint64(80, data.adwInfo === null ? 0n : BigInt(util.toPointer(data.adwInfo)), true);
  // 0x58: u32
  if (data?.dwReserved1 !== undefined) view.setUint32(88, Number(data.dwReserved1), true);
  // 0x5c: u32
  if (data?.dwReserved2 !== undefined) view.setUint32(92, Number(data.dwReserved2), true);
  // 0x60: pointer
  if (data?.hmmio !== undefined) view.setBigUint64(96, data.hmmio === null ? 0n : BigInt(util.toPointer(data.hmmio)), true);
  return buf;
}

/**
 * Windows.Win32.Media.Multimedia.MMCKINFO (size: 24)
 */
export interface MMCKINFO {
  /** u32 */
  ckid: number;
  /** u32 */
  cksize: number;
  /** u32 */
  fccType: number;
  /** u32 */
  dwDataOffset: number;
  /** u32 */
  dwFlags: number;
}

export const sizeofMMCKINFO = 24;

export function allocMMCKINFO(data?: Partial<MMCKINFO>): Uint8Array {
  const buf = new Uint8Array(sizeofMMCKINFO);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.ckid !== undefined) view.setUint32(0, Number(data.ckid), true);
  // 0x04: u32
  if (data?.cksize !== undefined) view.setUint32(4, Number(data.cksize), true);
  // 0x08: u32
  if (data?.fccType !== undefined) view.setUint32(8, Number(data.fccType), true);
  // 0x0c: u32
  if (data?.dwDataOffset !== undefined) view.setUint32(12, Number(data.dwDataOffset), true);
  // 0x10: u32
  if (data?.dwFlags !== undefined) view.setUint32(16, Number(data.dwFlags), true);
  // 0x14: pad4
  return buf;
}

/**
 * Windows.Win32.Media.Multimedia.JOYCAPSA (size: 112)
 */
export interface JOYCAPSA {
  /** u16 */
  wMid: number;
  /** u16 */
  wPid: number;
  /** array */
  szPname: Deno.PointerValue | null;
  /** u32 */
  wXmin: number;
  /** u32 */
  wXmax: number;
  /** u32 */
  wYmin: number;
  /** u32 */
  wYmax: number;
  /** u32 */
  wZmin: number;
  /** u32 */
  wZmax: number;
  /** u32 */
  wNumButtons: number;
  /** u32 */
  wPeriodMin: number;
  /** u32 */
  wPeriodMax: number;
  /** u32 */
  wRmin: number;
  /** u32 */
  wRmax: number;
  /** u32 */
  wUmin: number;
  /** u32 */
  wUmax: number;
  /** u32 */
  wVmin: number;
  /** u32 */
  wVmax: number;
  /** u32 */
  wCaps: number;
  /** u32 */
  wMaxAxes: number;
  /** u32 */
  wNumAxes: number;
  /** u32 */
  wMaxButtons: number;
  /** array */
  szRegKey: Deno.PointerValue | null;
  /** array */
  szOEMVxD: Deno.PointerValue | null;
}

export const sizeofJOYCAPSA = 112;

export function allocJOYCAPSA(data?: Partial<JOYCAPSA>): Uint8Array {
  const buf = new Uint8Array(sizeofJOYCAPSA);
  const view = new DataView(buf.buffer);
  // 0x00: u16
  if (data?.wMid !== undefined) view.setUint16(0, Number(data.wMid), true);
  // 0x02: u16
  if (data?.wPid !== undefined) view.setUint16(2, Number(data.wPid), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.szPname !== undefined) view.setBigUint64(8, data.szPname === null ? 0n : BigInt(util.toPointer(data.szPname)), true);
  // 0x10: u32
  if (data?.wXmin !== undefined) view.setUint32(16, Number(data.wXmin), true);
  // 0x14: u32
  if (data?.wXmax !== undefined) view.setUint32(20, Number(data.wXmax), true);
  // 0x18: u32
  if (data?.wYmin !== undefined) view.setUint32(24, Number(data.wYmin), true);
  // 0x1c: u32
  if (data?.wYmax !== undefined) view.setUint32(28, Number(data.wYmax), true);
  // 0x20: u32
  if (data?.wZmin !== undefined) view.setUint32(32, Number(data.wZmin), true);
  // 0x24: u32
  if (data?.wZmax !== undefined) view.setUint32(36, Number(data.wZmax), true);
  // 0x28: u32
  if (data?.wNumButtons !== undefined) view.setUint32(40, Number(data.wNumButtons), true);
  // 0x2c: u32
  if (data?.wPeriodMin !== undefined) view.setUint32(44, Number(data.wPeriodMin), true);
  // 0x30: u32
  if (data?.wPeriodMax !== undefined) view.setUint32(48, Number(data.wPeriodMax), true);
  // 0x34: u32
  if (data?.wRmin !== undefined) view.setUint32(52, Number(data.wRmin), true);
  // 0x38: u32
  if (data?.wRmax !== undefined) view.setUint32(56, Number(data.wRmax), true);
  // 0x3c: u32
  if (data?.wUmin !== undefined) view.setUint32(60, Number(data.wUmin), true);
  // 0x40: u32
  if (data?.wUmax !== undefined) view.setUint32(64, Number(data.wUmax), true);
  // 0x44: u32
  if (data?.wVmin !== undefined) view.setUint32(68, Number(data.wVmin), true);
  // 0x48: u32
  if (data?.wVmax !== undefined) view.setUint32(72, Number(data.wVmax), true);
  // 0x4c: u32
  if (data?.wCaps !== undefined) view.setUint32(76, Number(data.wCaps), true);
  // 0x50: u32
  if (data?.wMaxAxes !== undefined) view.setUint32(80, Number(data.wMaxAxes), true);
  // 0x54: u32
  if (data?.wNumAxes !== undefined) view.setUint32(84, Number(data.wNumAxes), true);
  // 0x58: u32
  if (data?.wMaxButtons !== undefined) view.setUint32(88, Number(data.wMaxButtons), true);
  // 0x5c: pad4
  // 0x60: pointer
  if (data?.szRegKey !== undefined) view.setBigUint64(96, data.szRegKey === null ? 0n : BigInt(util.toPointer(data.szRegKey)), true);
  // 0x68: pointer
  if (data?.szOEMVxD !== undefined) view.setBigUint64(104, data.szOEMVxD === null ? 0n : BigInt(util.toPointer(data.szOEMVxD)), true);
  return buf;
}

/**
 * Windows.Win32.Media.Multimedia.JOYCAPSW (size: 112)
 */
export interface JOYCAPSW {
  /** u16 */
  wMid: number;
  /** u16 */
  wPid: number;
  /** array */
  szPname: Deno.PointerValue | null;
  /** u32 */
  wXmin: number;
  /** u32 */
  wXmax: number;
  /** u32 */
  wYmin: number;
  /** u32 */
  wYmax: number;
  /** u32 */
  wZmin: number;
  /** u32 */
  wZmax: number;
  /** u32 */
  wNumButtons: number;
  /** u32 */
  wPeriodMin: number;
  /** u32 */
  wPeriodMax: number;
  /** u32 */
  wRmin: number;
  /** u32 */
  wRmax: number;
  /** u32 */
  wUmin: number;
  /** u32 */
  wUmax: number;
  /** u32 */
  wVmin: number;
  /** u32 */
  wVmax: number;
  /** u32 */
  wCaps: number;
  /** u32 */
  wMaxAxes: number;
  /** u32 */
  wNumAxes: number;
  /** u32 */
  wMaxButtons: number;
  /** array */
  szRegKey: Deno.PointerValue | null;
  /** array */
  szOEMVxD: Deno.PointerValue | null;
}

export const sizeofJOYCAPSW = 112;

export function allocJOYCAPSW(data?: Partial<JOYCAPSW>): Uint8Array {
  const buf = new Uint8Array(sizeofJOYCAPSW);
  const view = new DataView(buf.buffer);
  // 0x00: u16
  if (data?.wMid !== undefined) view.setUint16(0, Number(data.wMid), true);
  // 0x02: u16
  if (data?.wPid !== undefined) view.setUint16(2, Number(data.wPid), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.szPname !== undefined) view.setBigUint64(8, data.szPname === null ? 0n : BigInt(util.toPointer(data.szPname)), true);
  // 0x10: u32
  if (data?.wXmin !== undefined) view.setUint32(16, Number(data.wXmin), true);
  // 0x14: u32
  if (data?.wXmax !== undefined) view.setUint32(20, Number(data.wXmax), true);
  // 0x18: u32
  if (data?.wYmin !== undefined) view.setUint32(24, Number(data.wYmin), true);
  // 0x1c: u32
  if (data?.wYmax !== undefined) view.setUint32(28, Number(data.wYmax), true);
  // 0x20: u32
  if (data?.wZmin !== undefined) view.setUint32(32, Number(data.wZmin), true);
  // 0x24: u32
  if (data?.wZmax !== undefined) view.setUint32(36, Number(data.wZmax), true);
  // 0x28: u32
  if (data?.wNumButtons !== undefined) view.setUint32(40, Number(data.wNumButtons), true);
  // 0x2c: u32
  if (data?.wPeriodMin !== undefined) view.setUint32(44, Number(data.wPeriodMin), true);
  // 0x30: u32
  if (data?.wPeriodMax !== undefined) view.setUint32(48, Number(data.wPeriodMax), true);
  // 0x34: u32
  if (data?.wRmin !== undefined) view.setUint32(52, Number(data.wRmin), true);
  // 0x38: u32
  if (data?.wRmax !== undefined) view.setUint32(56, Number(data.wRmax), true);
  // 0x3c: u32
  if (data?.wUmin !== undefined) view.setUint32(60, Number(data.wUmin), true);
  // 0x40: u32
  if (data?.wUmax !== undefined) view.setUint32(64, Number(data.wUmax), true);
  // 0x44: u32
  if (data?.wVmin !== undefined) view.setUint32(68, Number(data.wVmin), true);
  // 0x48: u32
  if (data?.wVmax !== undefined) view.setUint32(72, Number(data.wVmax), true);
  // 0x4c: u32
  if (data?.wCaps !== undefined) view.setUint32(76, Number(data.wCaps), true);
  // 0x50: u32
  if (data?.wMaxAxes !== undefined) view.setUint32(80, Number(data.wMaxAxes), true);
  // 0x54: u32
  if (data?.wNumAxes !== undefined) view.setUint32(84, Number(data.wNumAxes), true);
  // 0x58: u32
  if (data?.wMaxButtons !== undefined) view.setUint32(88, Number(data.wMaxButtons), true);
  // 0x5c: pad4
  // 0x60: pointer
  if (data?.szRegKey !== undefined) view.setBigUint64(96, data.szRegKey === null ? 0n : BigInt(util.toPointer(data.szRegKey)), true);
  // 0x68: pointer
  if (data?.szOEMVxD !== undefined) view.setBigUint64(104, data.szOEMVxD === null ? 0n : BigInt(util.toPointer(data.szOEMVxD)), true);
  return buf;
}

/**
 * Windows.Win32.Media.Multimedia.JOYCAPS2A (size: 136)
 */
export interface JOYCAPS2A {
  /** u16 */
  wMid: number;
  /** u16 */
  wPid: number;
  /** array */
  szPname: Deno.PointerValue | null;
  /** u32 */
  wXmin: number;
  /** u32 */
  wXmax: number;
  /** u32 */
  wYmin: number;
  /** u32 */
  wYmax: number;
  /** u32 */
  wZmin: number;
  /** u32 */
  wZmax: number;
  /** u32 */
  wNumButtons: number;
  /** u32 */
  wPeriodMin: number;
  /** u32 */
  wPeriodMax: number;
  /** u32 */
  wRmin: number;
  /** u32 */
  wRmax: number;
  /** u32 */
  wUmin: number;
  /** u32 */
  wUmax: number;
  /** u32 */
  wVmin: number;
  /** u32 */
  wVmax: number;
  /** u32 */
  wCaps: number;
  /** u32 */
  wMaxAxes: number;
  /** u32 */
  wNumAxes: number;
  /** u32 */
  wMaxButtons: number;
  /** array */
  szRegKey: Deno.PointerValue | null;
  /** array */
  szOEMVxD: Deno.PointerValue | null;
  /** System.Guid */
  ManufacturerGuid: Uint8Array | Deno.PointerValue | null;
  /** System.Guid */
  ProductGuid: Uint8Array | Deno.PointerValue | null;
  /** System.Guid */
  NameGuid: Uint8Array | Deno.PointerValue | null;
}

export const sizeofJOYCAPS2A = 136;

export function allocJOYCAPS2A(data?: Partial<JOYCAPS2A>): Uint8Array {
  const buf = new Uint8Array(sizeofJOYCAPS2A);
  const view = new DataView(buf.buffer);
  // 0x00: u16
  if (data?.wMid !== undefined) view.setUint16(0, Number(data.wMid), true);
  // 0x02: u16
  if (data?.wPid !== undefined) view.setUint16(2, Number(data.wPid), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.szPname !== undefined) view.setBigUint64(8, data.szPname === null ? 0n : BigInt(util.toPointer(data.szPname)), true);
  // 0x10: u32
  if (data?.wXmin !== undefined) view.setUint32(16, Number(data.wXmin), true);
  // 0x14: u32
  if (data?.wXmax !== undefined) view.setUint32(20, Number(data.wXmax), true);
  // 0x18: u32
  if (data?.wYmin !== undefined) view.setUint32(24, Number(data.wYmin), true);
  // 0x1c: u32
  if (data?.wYmax !== undefined) view.setUint32(28, Number(data.wYmax), true);
  // 0x20: u32
  if (data?.wZmin !== undefined) view.setUint32(32, Number(data.wZmin), true);
  // 0x24: u32
  if (data?.wZmax !== undefined) view.setUint32(36, Number(data.wZmax), true);
  // 0x28: u32
  if (data?.wNumButtons !== undefined) view.setUint32(40, Number(data.wNumButtons), true);
  // 0x2c: u32
  if (data?.wPeriodMin !== undefined) view.setUint32(44, Number(data.wPeriodMin), true);
  // 0x30: u32
  if (data?.wPeriodMax !== undefined) view.setUint32(48, Number(data.wPeriodMax), true);
  // 0x34: u32
  if (data?.wRmin !== undefined) view.setUint32(52, Number(data.wRmin), true);
  // 0x38: u32
  if (data?.wRmax !== undefined) view.setUint32(56, Number(data.wRmax), true);
  // 0x3c: u32
  if (data?.wUmin !== undefined) view.setUint32(60, Number(data.wUmin), true);
  // 0x40: u32
  if (data?.wUmax !== undefined) view.setUint32(64, Number(data.wUmax), true);
  // 0x44: u32
  if (data?.wVmin !== undefined) view.setUint32(68, Number(data.wVmin), true);
  // 0x48: u32
  if (data?.wVmax !== undefined) view.setUint32(72, Number(data.wVmax), true);
  // 0x4c: u32
  if (data?.wCaps !== undefined) view.setUint32(76, Number(data.wCaps), true);
  // 0x50: u32
  if (data?.wMaxAxes !== undefined) view.setUint32(80, Number(data.wMaxAxes), true);
  // 0x54: u32
  if (data?.wNumAxes !== undefined) view.setUint32(84, Number(data.wNumAxes), true);
  // 0x58: u32
  if (data?.wMaxButtons !== undefined) view.setUint32(88, Number(data.wMaxButtons), true);
  // 0x5c: pad4
  // 0x60: pointer
  if (data?.szRegKey !== undefined) view.setBigUint64(96, data.szRegKey === null ? 0n : BigInt(util.toPointer(data.szRegKey)), true);
  // 0x68: pointer
  if (data?.szOEMVxD !== undefined) view.setBigUint64(104, data.szOEMVxD === null ? 0n : BigInt(util.toPointer(data.szOEMVxD)), true);
  // 0x70: pointer
  if (data?.ManufacturerGuid !== undefined) view.setBigUint64(112, data.ManufacturerGuid === null ? 0n : BigInt(util.toPointer(data.ManufacturerGuid)), true);
  // 0x78: pointer
  if (data?.ProductGuid !== undefined) view.setBigUint64(120, data.ProductGuid === null ? 0n : BigInt(util.toPointer(data.ProductGuid)), true);
  // 0x80: pointer
  if (data?.NameGuid !== undefined) view.setBigUint64(128, data.NameGuid === null ? 0n : BigInt(util.toPointer(data.NameGuid)), true);
  return buf;
}

/**
 * Windows.Win32.Media.Multimedia.JOYCAPS2W (size: 136)
 */
export interface JOYCAPS2W {
  /** u16 */
  wMid: number;
  /** u16 */
  wPid: number;
  /** array */
  szPname: Deno.PointerValue | null;
  /** u32 */
  wXmin: number;
  /** u32 */
  wXmax: number;
  /** u32 */
  wYmin: number;
  /** u32 */
  wYmax: number;
  /** u32 */
  wZmin: number;
  /** u32 */
  wZmax: number;
  /** u32 */
  wNumButtons: number;
  /** u32 */
  wPeriodMin: number;
  /** u32 */
  wPeriodMax: number;
  /** u32 */
  wRmin: number;
  /** u32 */
  wRmax: number;
  /** u32 */
  wUmin: number;
  /** u32 */
  wUmax: number;
  /** u32 */
  wVmin: number;
  /** u32 */
  wVmax: number;
  /** u32 */
  wCaps: number;
  /** u32 */
  wMaxAxes: number;
  /** u32 */
  wNumAxes: number;
  /** u32 */
  wMaxButtons: number;
  /** array */
  szRegKey: Deno.PointerValue | null;
  /** array */
  szOEMVxD: Deno.PointerValue | null;
  /** System.Guid */
  ManufacturerGuid: Uint8Array | Deno.PointerValue | null;
  /** System.Guid */
  ProductGuid: Uint8Array | Deno.PointerValue | null;
  /** System.Guid */
  NameGuid: Uint8Array | Deno.PointerValue | null;
}

export const sizeofJOYCAPS2W = 136;

export function allocJOYCAPS2W(data?: Partial<JOYCAPS2W>): Uint8Array {
  const buf = new Uint8Array(sizeofJOYCAPS2W);
  const view = new DataView(buf.buffer);
  // 0x00: u16
  if (data?.wMid !== undefined) view.setUint16(0, Number(data.wMid), true);
  // 0x02: u16
  if (data?.wPid !== undefined) view.setUint16(2, Number(data.wPid), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.szPname !== undefined) view.setBigUint64(8, data.szPname === null ? 0n : BigInt(util.toPointer(data.szPname)), true);
  // 0x10: u32
  if (data?.wXmin !== undefined) view.setUint32(16, Number(data.wXmin), true);
  // 0x14: u32
  if (data?.wXmax !== undefined) view.setUint32(20, Number(data.wXmax), true);
  // 0x18: u32
  if (data?.wYmin !== undefined) view.setUint32(24, Number(data.wYmin), true);
  // 0x1c: u32
  if (data?.wYmax !== undefined) view.setUint32(28, Number(data.wYmax), true);
  // 0x20: u32
  if (data?.wZmin !== undefined) view.setUint32(32, Number(data.wZmin), true);
  // 0x24: u32
  if (data?.wZmax !== undefined) view.setUint32(36, Number(data.wZmax), true);
  // 0x28: u32
  if (data?.wNumButtons !== undefined) view.setUint32(40, Number(data.wNumButtons), true);
  // 0x2c: u32
  if (data?.wPeriodMin !== undefined) view.setUint32(44, Number(data.wPeriodMin), true);
  // 0x30: u32
  if (data?.wPeriodMax !== undefined) view.setUint32(48, Number(data.wPeriodMax), true);
  // 0x34: u32
  if (data?.wRmin !== undefined) view.setUint32(52, Number(data.wRmin), true);
  // 0x38: u32
  if (data?.wRmax !== undefined) view.setUint32(56, Number(data.wRmax), true);
  // 0x3c: u32
  if (data?.wUmin !== undefined) view.setUint32(60, Number(data.wUmin), true);
  // 0x40: u32
  if (data?.wUmax !== undefined) view.setUint32(64, Number(data.wUmax), true);
  // 0x44: u32
  if (data?.wVmin !== undefined) view.setUint32(68, Number(data.wVmin), true);
  // 0x48: u32
  if (data?.wVmax !== undefined) view.setUint32(72, Number(data.wVmax), true);
  // 0x4c: u32
  if (data?.wCaps !== undefined) view.setUint32(76, Number(data.wCaps), true);
  // 0x50: u32
  if (data?.wMaxAxes !== undefined) view.setUint32(80, Number(data.wMaxAxes), true);
  // 0x54: u32
  if (data?.wNumAxes !== undefined) view.setUint32(84, Number(data.wNumAxes), true);
  // 0x58: u32
  if (data?.wMaxButtons !== undefined) view.setUint32(88, Number(data.wMaxButtons), true);
  // 0x5c: pad4
  // 0x60: pointer
  if (data?.szRegKey !== undefined) view.setBigUint64(96, data.szRegKey === null ? 0n : BigInt(util.toPointer(data.szRegKey)), true);
  // 0x68: pointer
  if (data?.szOEMVxD !== undefined) view.setBigUint64(104, data.szOEMVxD === null ? 0n : BigInt(util.toPointer(data.szOEMVxD)), true);
  // 0x70: pointer
  if (data?.ManufacturerGuid !== undefined) view.setBigUint64(112, data.ManufacturerGuid === null ? 0n : BigInt(util.toPointer(data.ManufacturerGuid)), true);
  // 0x78: pointer
  if (data?.ProductGuid !== undefined) view.setBigUint64(120, data.ProductGuid === null ? 0n : BigInt(util.toPointer(data.ProductGuid)), true);
  // 0x80: pointer
  if (data?.NameGuid !== undefined) view.setBigUint64(128, data.NameGuid === null ? 0n : BigInt(util.toPointer(data.NameGuid)), true);
  return buf;
}

/**
 * Windows.Win32.Media.Multimedia.JOYINFO (size: 16)
 */
export interface JOYINFO {
  /** u32 */
  wXpos: number;
  /** u32 */
  wYpos: number;
  /** u32 */
  wZpos: number;
  /** u32 */
  wButtons: number;
}

export const sizeofJOYINFO = 16;

export function allocJOYINFO(data?: Partial<JOYINFO>): Uint8Array {
  const buf = new Uint8Array(sizeofJOYINFO);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.wXpos !== undefined) view.setUint32(0, Number(data.wXpos), true);
  // 0x04: u32
  if (data?.wYpos !== undefined) view.setUint32(4, Number(data.wYpos), true);
  // 0x08: u32
  if (data?.wZpos !== undefined) view.setUint32(8, Number(data.wZpos), true);
  // 0x0c: u32
  if (data?.wButtons !== undefined) view.setUint32(12, Number(data.wButtons), true);
  return buf;
}

/**
 * Windows.Win32.Media.Multimedia.JOYINFOEX (size: 56)
 */
export interface JOYINFOEX {
  /** u32 */
  dwSize: number;
  /** u32 */
  dwFlags: number;
  /** u32 */
  dwXpos: number;
  /** u32 */
  dwYpos: number;
  /** u32 */
  dwZpos: number;
  /** u32 */
  dwRpos: number;
  /** u32 */
  dwUpos: number;
  /** u32 */
  dwVpos: number;
  /** u32 */
  dwButtons: number;
  /** u32 */
  dwButtonNumber: number;
  /** u32 */
  dwPOV: number;
  /** u32 */
  dwReserved1: number;
  /** u32 */
  dwReserved2: number;
}

export const sizeofJOYINFOEX = 56;

export function allocJOYINFOEX(data?: Partial<JOYINFOEX>): Uint8Array {
  const buf = new Uint8Array(sizeofJOYINFOEX);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.dwSize !== undefined) view.setUint32(0, Number(data.dwSize), true);
  // 0x04: u32
  if (data?.dwFlags !== undefined) view.setUint32(4, Number(data.dwFlags), true);
  // 0x08: u32
  if (data?.dwXpos !== undefined) view.setUint32(8, Number(data.dwXpos), true);
  // 0x0c: u32
  if (data?.dwYpos !== undefined) view.setUint32(12, Number(data.dwYpos), true);
  // 0x10: u32
  if (data?.dwZpos !== undefined) view.setUint32(16, Number(data.dwZpos), true);
  // 0x14: u32
  if (data?.dwRpos !== undefined) view.setUint32(20, Number(data.dwRpos), true);
  // 0x18: u32
  if (data?.dwUpos !== undefined) view.setUint32(24, Number(data.dwUpos), true);
  // 0x1c: u32
  if (data?.dwVpos !== undefined) view.setUint32(28, Number(data.dwVpos), true);
  // 0x20: u32
  if (data?.dwButtons !== undefined) view.setUint32(32, Number(data.dwButtons), true);
  // 0x24: u32
  if (data?.dwButtonNumber !== undefined) view.setUint32(36, Number(data.dwButtonNumber), true);
  // 0x28: u32
  if (data?.dwPOV !== undefined) view.setUint32(40, Number(data.dwPOV), true);
  // 0x2c: u32
  if (data?.dwReserved1 !== undefined) view.setUint32(44, Number(data.dwReserved1), true);
  // 0x30: u32
  if (data?.dwReserved2 !== undefined) view.setUint32(48, Number(data.dwReserved2), true);
  // 0x34: pad4
  return buf;
}

/**
 * Windows.Win32.Media.Multimedia.MCI_DGV_RECT_PARMS (size: 16)
 */
export interface MCI_DGV_RECT_PARMS {
  /** usize */
  dwCallback: Deno.PointerValue;
  /** Windows.Win32.Foundation.RECT */
  rc: Uint8Array | Deno.PointerValue | null;
}

export const sizeofMCI_DGV_RECT_PARMS = 16;

export function allocMCI_DGV_RECT_PARMS(data?: Partial<MCI_DGV_RECT_PARMS>): Uint8Array {
  const buf = new Uint8Array(sizeofMCI_DGV_RECT_PARMS);
  const view = new DataView(buf.buffer);
  // 0x00: usize
  if (data?.dwCallback !== undefined) view.setBigUint64(0, BigInt(data.dwCallback), true);
  // 0x08: pointer
  if (data?.rc !== undefined) view.setBigUint64(8, data.rc === null ? 0n : BigInt(util.toPointer(data.rc)), true);
  return buf;
}

/**
 * Windows.Win32.Media.Multimedia.MCI_DGV_CAPTURE_PARMSA (size: 24)
 */
export interface MCI_DGV_CAPTURE_PARMSA {
  /** usize */
  dwCallback: Deno.PointerValue;
  /** Windows.Win32.Foundation.PSTR */
  lpstrFileName: string | null;
  /** Windows.Win32.Foundation.RECT */
  rc: Uint8Array | Deno.PointerValue | null;
}

export const sizeofMCI_DGV_CAPTURE_PARMSA = 24;

export function allocMCI_DGV_CAPTURE_PARMSA(data?: Partial<MCI_DGV_CAPTURE_PARMSA>): Uint8Array {
  const buf = new Uint8Array(sizeofMCI_DGV_CAPTURE_PARMSA);
  const view = new DataView(buf.buffer);
  // 0x00: usize
  if (data?.dwCallback !== undefined) view.setBigUint64(0, BigInt(data.dwCallback), true);
  // 0x08: buffer
  if (data?.lpstrFileName !== undefined) {
    (buf as any)._f8 = util.pstrToFfi(data.lpstrFileName);
    view.setBigUint64(8, (buf as any)._f8 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f8)), true);
  }
  // 0x10: pointer
  if (data?.rc !== undefined) view.setBigUint64(16, data.rc === null ? 0n : BigInt(util.toPointer(data.rc)), true);
  return buf;
}

/**
 * Windows.Win32.Media.Multimedia.MCI_DGV_CAPTURE_PARMSW (size: 24)
 */
export interface MCI_DGV_CAPTURE_PARMSW {
  /** usize */
  dwCallback: Deno.PointerValue;
  /** Windows.Win32.Foundation.PWSTR */
  lpstrFileName: string | null;
  /** Windows.Win32.Foundation.RECT */
  rc: Uint8Array | Deno.PointerValue | null;
}

export const sizeofMCI_DGV_CAPTURE_PARMSW = 24;

export function allocMCI_DGV_CAPTURE_PARMSW(data?: Partial<MCI_DGV_CAPTURE_PARMSW>): Uint8Array {
  const buf = new Uint8Array(sizeofMCI_DGV_CAPTURE_PARMSW);
  const view = new DataView(buf.buffer);
  // 0x00: usize
  if (data?.dwCallback !== undefined) view.setBigUint64(0, BigInt(data.dwCallback), true);
  // 0x08: buffer
  if (data?.lpstrFileName !== undefined) {
    (buf as any)._f8 = util.pwstrToFfi(data.lpstrFileName);
    view.setBigUint64(8, (buf as any)._f8 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f8)), true);
  }
  // 0x10: pointer
  if (data?.rc !== undefined) view.setBigUint64(16, data.rc === null ? 0n : BigInt(util.toPointer(data.rc)), true);
  return buf;
}

/**
 * Windows.Win32.Media.Multimedia.MCI_DGV_COPY_PARMS (size: 32)
 */
export interface MCI_DGV_COPY_PARMS {
  /** usize */
  dwCallback: Deno.PointerValue;
  /** u32 */
  dwFrom: number;
  /** u32 */
  dwTo: number;
  /** Windows.Win32.Foundation.RECT */
  rc: Uint8Array | Deno.PointerValue | null;
  /** u32 */
  dwAudioStream: number;
  /** u32 */
  dwVideoStream: number;
}

export const sizeofMCI_DGV_COPY_PARMS = 32;

export function allocMCI_DGV_COPY_PARMS(data?: Partial<MCI_DGV_COPY_PARMS>): Uint8Array {
  const buf = new Uint8Array(sizeofMCI_DGV_COPY_PARMS);
  const view = new DataView(buf.buffer);
  // 0x00: usize
  if (data?.dwCallback !== undefined) view.setBigUint64(0, BigInt(data.dwCallback), true);
  // 0x08: u32
  if (data?.dwFrom !== undefined) view.setUint32(8, Number(data.dwFrom), true);
  // 0x0c: u32
  if (data?.dwTo !== undefined) view.setUint32(12, Number(data.dwTo), true);
  // 0x10: pointer
  if (data?.rc !== undefined) view.setBigUint64(16, data.rc === null ? 0n : BigInt(util.toPointer(data.rc)), true);
  // 0x18: u32
  if (data?.dwAudioStream !== undefined) view.setUint32(24, Number(data.dwAudioStream), true);
  // 0x1c: u32
  if (data?.dwVideoStream !== undefined) view.setUint32(28, Number(data.dwVideoStream), true);
  return buf;
}

/**
 * Windows.Win32.Media.Multimedia.MCI_DGV_CUE_PARMS (size: 16)
 */
export interface MCI_DGV_CUE_PARMS {
  /** usize */
  dwCallback: Deno.PointerValue;
  /** u32 */
  dwTo: number;
}

export const sizeofMCI_DGV_CUE_PARMS = 16;

export function allocMCI_DGV_CUE_PARMS(data?: Partial<MCI_DGV_CUE_PARMS>): Uint8Array {
  const buf = new Uint8Array(sizeofMCI_DGV_CUE_PARMS);
  const view = new DataView(buf.buffer);
  // 0x00: usize
  if (data?.dwCallback !== undefined) view.setBigUint64(0, BigInt(data.dwCallback), true);
  // 0x08: u32
  if (data?.dwTo !== undefined) view.setUint32(8, Number(data.dwTo), true);
  // 0x0c: pad4
  return buf;
}

/**
 * Windows.Win32.Media.Multimedia.MCI_DGV_CUT_PARMS (size: 32)
 */
export interface MCI_DGV_CUT_PARMS {
  /** usize */
  dwCallback: Deno.PointerValue;
  /** u32 */
  dwFrom: number;
  /** u32 */
  dwTo: number;
  /** Windows.Win32.Foundation.RECT */
  rc: Uint8Array | Deno.PointerValue | null;
  /** u32 */
  dwAudioStream: number;
  /** u32 */
  dwVideoStream: number;
}

export const sizeofMCI_DGV_CUT_PARMS = 32;

export function allocMCI_DGV_CUT_PARMS(data?: Partial<MCI_DGV_CUT_PARMS>): Uint8Array {
  const buf = new Uint8Array(sizeofMCI_DGV_CUT_PARMS);
  const view = new DataView(buf.buffer);
  // 0x00: usize
  if (data?.dwCallback !== undefined) view.setBigUint64(0, BigInt(data.dwCallback), true);
  // 0x08: u32
  if (data?.dwFrom !== undefined) view.setUint32(8, Number(data.dwFrom), true);
  // 0x0c: u32
  if (data?.dwTo !== undefined) view.setUint32(12, Number(data.dwTo), true);
  // 0x10: pointer
  if (data?.rc !== undefined) view.setBigUint64(16, data.rc === null ? 0n : BigInt(util.toPointer(data.rc)), true);
  // 0x18: u32
  if (data?.dwAudioStream !== undefined) view.setUint32(24, Number(data.dwAudioStream), true);
  // 0x1c: u32
  if (data?.dwVideoStream !== undefined) view.setUint32(28, Number(data.dwVideoStream), true);
  return buf;
}

/**
 * Windows.Win32.Media.Multimedia.MCI_DGV_DELETE_PARMS (size: 32)
 */
export interface MCI_DGV_DELETE_PARMS {
  /** usize */
  dwCallback: Deno.PointerValue;
  /** u32 */
  dwFrom: number;
  /** u32 */
  dwTo: number;
  /** Windows.Win32.Foundation.RECT */
  rc: Uint8Array | Deno.PointerValue | null;
  /** u32 */
  dwAudioStream: number;
  /** u32 */
  dwVideoStream: number;
}

export const sizeofMCI_DGV_DELETE_PARMS = 32;

export function allocMCI_DGV_DELETE_PARMS(data?: Partial<MCI_DGV_DELETE_PARMS>): Uint8Array {
  const buf = new Uint8Array(sizeofMCI_DGV_DELETE_PARMS);
  const view = new DataView(buf.buffer);
  // 0x00: usize
  if (data?.dwCallback !== undefined) view.setBigUint64(0, BigInt(data.dwCallback), true);
  // 0x08: u32
  if (data?.dwFrom !== undefined) view.setUint32(8, Number(data.dwFrom), true);
  // 0x0c: u32
  if (data?.dwTo !== undefined) view.setUint32(12, Number(data.dwTo), true);
  // 0x10: pointer
  if (data?.rc !== undefined) view.setBigUint64(16, data.rc === null ? 0n : BigInt(util.toPointer(data.rc)), true);
  // 0x18: u32
  if (data?.dwAudioStream !== undefined) view.setUint32(24, Number(data.dwAudioStream), true);
  // 0x1c: u32
  if (data?.dwVideoStream !== undefined) view.setUint32(28, Number(data.dwVideoStream), true);
  return buf;
}

/**
 * Windows.Win32.Media.Multimedia.MCI_DGV_INFO_PARMSA (size: 24)
 */
export interface MCI_DGV_INFO_PARMSA {
  /** usize */
  dwCallback: Deno.PointerValue;
  /** Windows.Win32.Foundation.PSTR */
  lpstrReturn: string | null;
  /** u32 */
  dwRetSize: number;
  /** u32 */
  dwItem: number;
}

export const sizeofMCI_DGV_INFO_PARMSA = 24;

export function allocMCI_DGV_INFO_PARMSA(data?: Partial<MCI_DGV_INFO_PARMSA>): Uint8Array {
  const buf = new Uint8Array(sizeofMCI_DGV_INFO_PARMSA);
  const view = new DataView(buf.buffer);
  // 0x00: usize
  if (data?.dwCallback !== undefined) view.setBigUint64(0, BigInt(data.dwCallback), true);
  // 0x08: buffer
  if (data?.lpstrReturn !== undefined) {
    (buf as any)._f8 = util.pstrToFfi(data.lpstrReturn);
    view.setBigUint64(8, (buf as any)._f8 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f8)), true);
  }
  // 0x10: u32
  if (data?.dwRetSize !== undefined) view.setUint32(16, Number(data.dwRetSize), true);
  // 0x14: u32
  if (data?.dwItem !== undefined) view.setUint32(20, Number(data.dwItem), true);
  return buf;
}

/**
 * Windows.Win32.Media.Multimedia.MCI_DGV_INFO_PARMSW (size: 24)
 */
export interface MCI_DGV_INFO_PARMSW {
  /** usize */
  dwCallback: Deno.PointerValue;
  /** Windows.Win32.Foundation.PWSTR */
  lpstrReturn: string | null;
  /** u32 */
  dwRetSize: number;
  /** u32 */
  dwItem: number;
}

export const sizeofMCI_DGV_INFO_PARMSW = 24;

export function allocMCI_DGV_INFO_PARMSW(data?: Partial<MCI_DGV_INFO_PARMSW>): Uint8Array {
  const buf = new Uint8Array(sizeofMCI_DGV_INFO_PARMSW);
  const view = new DataView(buf.buffer);
  // 0x00: usize
  if (data?.dwCallback !== undefined) view.setBigUint64(0, BigInt(data.dwCallback), true);
  // 0x08: buffer
  if (data?.lpstrReturn !== undefined) {
    (buf as any)._f8 = util.pwstrToFfi(data.lpstrReturn);
    view.setBigUint64(8, (buf as any)._f8 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f8)), true);
  }
  // 0x10: u32
  if (data?.dwRetSize !== undefined) view.setUint32(16, Number(data.dwRetSize), true);
  // 0x14: u32
  if (data?.dwItem !== undefined) view.setUint32(20, Number(data.dwItem), true);
  return buf;
}

/**
 * Windows.Win32.Media.Multimedia.MCI_DGV_LIST_PARMSA (size: 40)
 */
export interface MCI_DGV_LIST_PARMSA {
  /** usize */
  dwCallback: Deno.PointerValue;
  /** Windows.Win32.Foundation.PSTR */
  lpstrReturn: string | null;
  /** u32 */
  dwLength: number;
  /** u32 */
  dwNumber: number;
  /** u32 */
  dwItem: number;
  /** Windows.Win32.Foundation.PSTR */
  lpstrAlgorithm: string | null;
}

export const sizeofMCI_DGV_LIST_PARMSA = 40;

export function allocMCI_DGV_LIST_PARMSA(data?: Partial<MCI_DGV_LIST_PARMSA>): Uint8Array {
  const buf = new Uint8Array(sizeofMCI_DGV_LIST_PARMSA);
  const view = new DataView(buf.buffer);
  // 0x00: usize
  if (data?.dwCallback !== undefined) view.setBigUint64(0, BigInt(data.dwCallback), true);
  // 0x08: buffer
  if (data?.lpstrReturn !== undefined) {
    (buf as any)._f8 = util.pstrToFfi(data.lpstrReturn);
    view.setBigUint64(8, (buf as any)._f8 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f8)), true);
  }
  // 0x10: u32
  if (data?.dwLength !== undefined) view.setUint32(16, Number(data.dwLength), true);
  // 0x14: u32
  if (data?.dwNumber !== undefined) view.setUint32(20, Number(data.dwNumber), true);
  // 0x18: u32
  if (data?.dwItem !== undefined) view.setUint32(24, Number(data.dwItem), true);
  // 0x1c: pad4
  // 0x20: buffer
  if (data?.lpstrAlgorithm !== undefined) {
    (buf as any)._f32 = util.pstrToFfi(data.lpstrAlgorithm);
    view.setBigUint64(32, (buf as any)._f32 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f32)), true);
  }
  return buf;
}

/**
 * Windows.Win32.Media.Multimedia.MCI_DGV_LIST_PARMSW (size: 40)
 */
export interface MCI_DGV_LIST_PARMSW {
  /** usize */
  dwCallback: Deno.PointerValue;
  /** Windows.Win32.Foundation.PWSTR */
  lpstrReturn: string | null;
  /** u32 */
  dwLength: number;
  /** u32 */
  dwNumber: number;
  /** u32 */
  dwItem: number;
  /** Windows.Win32.Foundation.PWSTR */
  lpstrAlgorithm: string | null;
}

export const sizeofMCI_DGV_LIST_PARMSW = 40;

export function allocMCI_DGV_LIST_PARMSW(data?: Partial<MCI_DGV_LIST_PARMSW>): Uint8Array {
  const buf = new Uint8Array(sizeofMCI_DGV_LIST_PARMSW);
  const view = new DataView(buf.buffer);
  // 0x00: usize
  if (data?.dwCallback !== undefined) view.setBigUint64(0, BigInt(data.dwCallback), true);
  // 0x08: buffer
  if (data?.lpstrReturn !== undefined) {
    (buf as any)._f8 = util.pwstrToFfi(data.lpstrReturn);
    view.setBigUint64(8, (buf as any)._f8 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f8)), true);
  }
  // 0x10: u32
  if (data?.dwLength !== undefined) view.setUint32(16, Number(data.dwLength), true);
  // 0x14: u32
  if (data?.dwNumber !== undefined) view.setUint32(20, Number(data.dwNumber), true);
  // 0x18: u32
  if (data?.dwItem !== undefined) view.setUint32(24, Number(data.dwItem), true);
  // 0x1c: pad4
  // 0x20: buffer
  if (data?.lpstrAlgorithm !== undefined) {
    (buf as any)._f32 = util.pwstrToFfi(data.lpstrAlgorithm);
    view.setBigUint64(32, (buf as any)._f32 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f32)), true);
  }
  return buf;
}

/**
 * Windows.Win32.Media.Multimedia.MCI_DGV_MONITOR_PARMS (size: 16)
 */
export interface MCI_DGV_MONITOR_PARMS {
  /** usize */
  dwCallback: Deno.PointerValue;
  /** u32 */
  dwSource: number;
  /** u32 */
  dwMethod: number;
}

export const sizeofMCI_DGV_MONITOR_PARMS = 16;

export function allocMCI_DGV_MONITOR_PARMS(data?: Partial<MCI_DGV_MONITOR_PARMS>): Uint8Array {
  const buf = new Uint8Array(sizeofMCI_DGV_MONITOR_PARMS);
  const view = new DataView(buf.buffer);
  // 0x00: usize
  if (data?.dwCallback !== undefined) view.setBigUint64(0, BigInt(data.dwCallback), true);
  // 0x08: u32
  if (data?.dwSource !== undefined) view.setUint32(8, Number(data.dwSource), true);
  // 0x0c: u32
  if (data?.dwMethod !== undefined) view.setUint32(12, Number(data.dwMethod), true);
  return buf;
}

/**
 * Windows.Win32.Media.Multimedia.MCI_DGV_OPEN_PARMSA (size: 56)
 */
export interface MCI_DGV_OPEN_PARMSA {
  /** usize */
  dwCallback: Deno.PointerValue;
  /** u32 */
  wDeviceID: number;
  /** Windows.Win32.Foundation.PSTR */
  lpstrDeviceType: string | null;
  /** Windows.Win32.Foundation.PSTR */
  lpstrElementName: string | null;
  /** Windows.Win32.Foundation.PSTR */
  lpstrAlias: string | null;
  /** u32 */
  dwStyle: number;
  /** Windows.Win32.Foundation.HWND */
  hWndParent: Deno.PointerValue | null;
}

export const sizeofMCI_DGV_OPEN_PARMSA = 56;

export function allocMCI_DGV_OPEN_PARMSA(data?: Partial<MCI_DGV_OPEN_PARMSA>): Uint8Array {
  const buf = new Uint8Array(sizeofMCI_DGV_OPEN_PARMSA);
  const view = new DataView(buf.buffer);
  // 0x00: usize
  if (data?.dwCallback !== undefined) view.setBigUint64(0, BigInt(data.dwCallback), true);
  // 0x08: u32
  if (data?.wDeviceID !== undefined) view.setUint32(8, Number(data.wDeviceID), true);
  // 0x0c: pad4
  // 0x10: buffer
  if (data?.lpstrDeviceType !== undefined) {
    (buf as any)._f16 = util.pstrToFfi(data.lpstrDeviceType);
    view.setBigUint64(16, (buf as any)._f16 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f16)), true);
  }
  // 0x18: buffer
  if (data?.lpstrElementName !== undefined) {
    (buf as any)._f24 = util.pstrToFfi(data.lpstrElementName);
    view.setBigUint64(24, (buf as any)._f24 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f24)), true);
  }
  // 0x20: buffer
  if (data?.lpstrAlias !== undefined) {
    (buf as any)._f32 = util.pstrToFfi(data.lpstrAlias);
    view.setBigUint64(32, (buf as any)._f32 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f32)), true);
  }
  // 0x28: u32
  if (data?.dwStyle !== undefined) view.setUint32(40, Number(data.dwStyle), true);
  // 0x2c: pad4
  // 0x30: pointer
  if (data?.hWndParent !== undefined) view.setBigUint64(48, data.hWndParent === null ? 0n : BigInt(util.toPointer(data.hWndParent)), true);
  return buf;
}

/**
 * Windows.Win32.Media.Multimedia.MCI_DGV_OPEN_PARMSW (size: 56)
 */
export interface MCI_DGV_OPEN_PARMSW {
  /** usize */
  dwCallback: Deno.PointerValue;
  /** u32 */
  wDeviceID: number;
  /** Windows.Win32.Foundation.PWSTR */
  lpstrDeviceType: string | null;
  /** Windows.Win32.Foundation.PWSTR */
  lpstrElementName: string | null;
  /** Windows.Win32.Foundation.PWSTR */
  lpstrAlias: string | null;
  /** u32 */
  dwStyle: number;
  /** Windows.Win32.Foundation.HWND */
  hWndParent: Deno.PointerValue | null;
}

export const sizeofMCI_DGV_OPEN_PARMSW = 56;

export function allocMCI_DGV_OPEN_PARMSW(data?: Partial<MCI_DGV_OPEN_PARMSW>): Uint8Array {
  const buf = new Uint8Array(sizeofMCI_DGV_OPEN_PARMSW);
  const view = new DataView(buf.buffer);
  // 0x00: usize
  if (data?.dwCallback !== undefined) view.setBigUint64(0, BigInt(data.dwCallback), true);
  // 0x08: u32
  if (data?.wDeviceID !== undefined) view.setUint32(8, Number(data.wDeviceID), true);
  // 0x0c: pad4
  // 0x10: buffer
  if (data?.lpstrDeviceType !== undefined) {
    (buf as any)._f16 = util.pwstrToFfi(data.lpstrDeviceType);
    view.setBigUint64(16, (buf as any)._f16 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f16)), true);
  }
  // 0x18: buffer
  if (data?.lpstrElementName !== undefined) {
    (buf as any)._f24 = util.pwstrToFfi(data.lpstrElementName);
    view.setBigUint64(24, (buf as any)._f24 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f24)), true);
  }
  // 0x20: buffer
  if (data?.lpstrAlias !== undefined) {
    (buf as any)._f32 = util.pwstrToFfi(data.lpstrAlias);
    view.setBigUint64(32, (buf as any)._f32 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f32)), true);
  }
  // 0x28: u32
  if (data?.dwStyle !== undefined) view.setUint32(40, Number(data.dwStyle), true);
  // 0x2c: pad4
  // 0x30: pointer
  if (data?.hWndParent !== undefined) view.setBigUint64(48, data.hWndParent === null ? 0n : BigInt(util.toPointer(data.hWndParent)), true);
  return buf;
}

/**
 * Windows.Win32.Media.Multimedia.MCI_DGV_PASTE_PARMS (size: 32)
 */
export interface MCI_DGV_PASTE_PARMS {
  /** usize */
  dwCallback: Deno.PointerValue;
  /** u32 */
  dwTo: number;
  /** Windows.Win32.Foundation.RECT */
  rc: Uint8Array | Deno.PointerValue | null;
  /** u32 */
  dwAudioStream: number;
  /** u32 */
  dwVideoStream: number;
}

export const sizeofMCI_DGV_PASTE_PARMS = 32;

export function allocMCI_DGV_PASTE_PARMS(data?: Partial<MCI_DGV_PASTE_PARMS>): Uint8Array {
  const buf = new Uint8Array(sizeofMCI_DGV_PASTE_PARMS);
  const view = new DataView(buf.buffer);
  // 0x00: usize
  if (data?.dwCallback !== undefined) view.setBigUint64(0, BigInt(data.dwCallback), true);
  // 0x08: u32
  if (data?.dwTo !== undefined) view.setUint32(8, Number(data.dwTo), true);
  // 0x0c: pad4
  // 0x10: pointer
  if (data?.rc !== undefined) view.setBigUint64(16, data.rc === null ? 0n : BigInt(util.toPointer(data.rc)), true);
  // 0x18: u32
  if (data?.dwAudioStream !== undefined) view.setUint32(24, Number(data.dwAudioStream), true);
  // 0x1c: u32
  if (data?.dwVideoStream !== undefined) view.setUint32(28, Number(data.dwVideoStream), true);
  return buf;
}

/**
 * Windows.Win32.Media.Multimedia.MCI_DGV_QUALITY_PARMSA (size: 32)
 */
export interface MCI_DGV_QUALITY_PARMSA {
  /** usize */
  dwCallback: Deno.PointerValue;
  /** u32 */
  dwItem: number;
  /** Windows.Win32.Foundation.PSTR */
  lpstrName: string | null;
  /** u32 */
  lpstrAlgorithm: number;
  /** u32 */
  dwHandle: number;
}

export const sizeofMCI_DGV_QUALITY_PARMSA = 32;

export function allocMCI_DGV_QUALITY_PARMSA(data?: Partial<MCI_DGV_QUALITY_PARMSA>): Uint8Array {
  const buf = new Uint8Array(sizeofMCI_DGV_QUALITY_PARMSA);
  const view = new DataView(buf.buffer);
  // 0x00: usize
  if (data?.dwCallback !== undefined) view.setBigUint64(0, BigInt(data.dwCallback), true);
  // 0x08: u32
  if (data?.dwItem !== undefined) view.setUint32(8, Number(data.dwItem), true);
  // 0x0c: pad4
  // 0x10: buffer
  if (data?.lpstrName !== undefined) {
    (buf as any)._f16 = util.pstrToFfi(data.lpstrName);
    view.setBigUint64(16, (buf as any)._f16 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f16)), true);
  }
  // 0x18: u32
  if (data?.lpstrAlgorithm !== undefined) view.setUint32(24, Number(data.lpstrAlgorithm), true);
  // 0x1c: u32
  if (data?.dwHandle !== undefined) view.setUint32(28, Number(data.dwHandle), true);
  return buf;
}

/**
 * Windows.Win32.Media.Multimedia.MCI_DGV_QUALITY_PARMSW (size: 32)
 */
export interface MCI_DGV_QUALITY_PARMSW {
  /** usize */
  dwCallback: Deno.PointerValue;
  /** u32 */
  dwItem: number;
  /** Windows.Win32.Foundation.PWSTR */
  lpstrName: string | null;
  /** u32 */
  lpstrAlgorithm: number;
  /** u32 */
  dwHandle: number;
}

export const sizeofMCI_DGV_QUALITY_PARMSW = 32;

export function allocMCI_DGV_QUALITY_PARMSW(data?: Partial<MCI_DGV_QUALITY_PARMSW>): Uint8Array {
  const buf = new Uint8Array(sizeofMCI_DGV_QUALITY_PARMSW);
  const view = new DataView(buf.buffer);
  // 0x00: usize
  if (data?.dwCallback !== undefined) view.setBigUint64(0, BigInt(data.dwCallback), true);
  // 0x08: u32
  if (data?.dwItem !== undefined) view.setUint32(8, Number(data.dwItem), true);
  // 0x0c: pad4
  // 0x10: buffer
  if (data?.lpstrName !== undefined) {
    (buf as any)._f16 = util.pwstrToFfi(data.lpstrName);
    view.setBigUint64(16, (buf as any)._f16 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f16)), true);
  }
  // 0x18: u32
  if (data?.lpstrAlgorithm !== undefined) view.setUint32(24, Number(data.lpstrAlgorithm), true);
  // 0x1c: u32
  if (data?.dwHandle !== undefined) view.setUint32(28, Number(data.dwHandle), true);
  return buf;
}

/**
 * Windows.Win32.Media.Multimedia.MCI_DGV_RECORD_PARMS (size: 32)
 */
export interface MCI_DGV_RECORD_PARMS {
  /** usize */
  dwCallback: Deno.PointerValue;
  /** u32 */
  dwFrom: number;
  /** u32 */
  dwTo: number;
  /** Windows.Win32.Foundation.RECT */
  rc: Uint8Array | Deno.PointerValue | null;
  /** u32 */
  dwAudioStream: number;
  /** u32 */
  dwVideoStream: number;
}

export const sizeofMCI_DGV_RECORD_PARMS = 32;

export function allocMCI_DGV_RECORD_PARMS(data?: Partial<MCI_DGV_RECORD_PARMS>): Uint8Array {
  const buf = new Uint8Array(sizeofMCI_DGV_RECORD_PARMS);
  const view = new DataView(buf.buffer);
  // 0x00: usize
  if (data?.dwCallback !== undefined) view.setBigUint64(0, BigInt(data.dwCallback), true);
  // 0x08: u32
  if (data?.dwFrom !== undefined) view.setUint32(8, Number(data.dwFrom), true);
  // 0x0c: u32
  if (data?.dwTo !== undefined) view.setUint32(12, Number(data.dwTo), true);
  // 0x10: pointer
  if (data?.rc !== undefined) view.setBigUint64(16, data.rc === null ? 0n : BigInt(util.toPointer(data.rc)), true);
  // 0x18: u32
  if (data?.dwAudioStream !== undefined) view.setUint32(24, Number(data.dwAudioStream), true);
  // 0x1c: u32
  if (data?.dwVideoStream !== undefined) view.setUint32(28, Number(data.dwVideoStream), true);
  return buf;
}

/**
 * Windows.Win32.Media.Multimedia.MCI_DGV_RESERVE_PARMSA (size: 24)
 */
export interface MCI_DGV_RESERVE_PARMSA {
  /** usize */
  dwCallback: Deno.PointerValue;
  /** Windows.Win32.Foundation.PSTR */
  lpstrPath: string | null;
  /** u32 */
  dwSize: number;
}

export const sizeofMCI_DGV_RESERVE_PARMSA = 24;

export function allocMCI_DGV_RESERVE_PARMSA(data?: Partial<MCI_DGV_RESERVE_PARMSA>): Uint8Array {
  const buf = new Uint8Array(sizeofMCI_DGV_RESERVE_PARMSA);
  const view = new DataView(buf.buffer);
  // 0x00: usize
  if (data?.dwCallback !== undefined) view.setBigUint64(0, BigInt(data.dwCallback), true);
  // 0x08: buffer
  if (data?.lpstrPath !== undefined) {
    (buf as any)._f8 = util.pstrToFfi(data.lpstrPath);
    view.setBigUint64(8, (buf as any)._f8 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f8)), true);
  }
  // 0x10: u32
  if (data?.dwSize !== undefined) view.setUint32(16, Number(data.dwSize), true);
  // 0x14: pad4
  return buf;
}

/**
 * Windows.Win32.Media.Multimedia.MCI_DGV_RESERVE_PARMSW (size: 24)
 */
export interface MCI_DGV_RESERVE_PARMSW {
  /** usize */
  dwCallback: Deno.PointerValue;
  /** Windows.Win32.Foundation.PWSTR */
  lpstrPath: string | null;
  /** u32 */
  dwSize: number;
}

export const sizeofMCI_DGV_RESERVE_PARMSW = 24;

export function allocMCI_DGV_RESERVE_PARMSW(data?: Partial<MCI_DGV_RESERVE_PARMSW>): Uint8Array {
  const buf = new Uint8Array(sizeofMCI_DGV_RESERVE_PARMSW);
  const view = new DataView(buf.buffer);
  // 0x00: usize
  if (data?.dwCallback !== undefined) view.setBigUint64(0, BigInt(data.dwCallback), true);
  // 0x08: buffer
  if (data?.lpstrPath !== undefined) {
    (buf as any)._f8 = util.pwstrToFfi(data.lpstrPath);
    view.setBigUint64(8, (buf as any)._f8 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f8)), true);
  }
  // 0x10: u32
  if (data?.dwSize !== undefined) view.setUint32(16, Number(data.dwSize), true);
  // 0x14: pad4
  return buf;
}

/**
 * Windows.Win32.Media.Multimedia.MCI_DGV_RESTORE_PARMSA (size: 24)
 */
export interface MCI_DGV_RESTORE_PARMSA {
  /** usize */
  dwCallback: Deno.PointerValue;
  /** Windows.Win32.Foundation.PSTR */
  lpstrFileName: string | null;
  /** Windows.Win32.Foundation.RECT */
  rc: Uint8Array | Deno.PointerValue | null;
}

export const sizeofMCI_DGV_RESTORE_PARMSA = 24;

export function allocMCI_DGV_RESTORE_PARMSA(data?: Partial<MCI_DGV_RESTORE_PARMSA>): Uint8Array {
  const buf = new Uint8Array(sizeofMCI_DGV_RESTORE_PARMSA);
  const view = new DataView(buf.buffer);
  // 0x00: usize
  if (data?.dwCallback !== undefined) view.setBigUint64(0, BigInt(data.dwCallback), true);
  // 0x08: buffer
  if (data?.lpstrFileName !== undefined) {
    (buf as any)._f8 = util.pstrToFfi(data.lpstrFileName);
    view.setBigUint64(8, (buf as any)._f8 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f8)), true);
  }
  // 0x10: pointer
  if (data?.rc !== undefined) view.setBigUint64(16, data.rc === null ? 0n : BigInt(util.toPointer(data.rc)), true);
  return buf;
}

/**
 * Windows.Win32.Media.Multimedia.MCI_DGV_RESTORE_PARMSW (size: 24)
 */
export interface MCI_DGV_RESTORE_PARMSW {
  /** usize */
  dwCallback: Deno.PointerValue;
  /** Windows.Win32.Foundation.PWSTR */
  lpstrFileName: string | null;
  /** Windows.Win32.Foundation.RECT */
  rc: Uint8Array | Deno.PointerValue | null;
}

export const sizeofMCI_DGV_RESTORE_PARMSW = 24;

export function allocMCI_DGV_RESTORE_PARMSW(data?: Partial<MCI_DGV_RESTORE_PARMSW>): Uint8Array {
  const buf = new Uint8Array(sizeofMCI_DGV_RESTORE_PARMSW);
  const view = new DataView(buf.buffer);
  // 0x00: usize
  if (data?.dwCallback !== undefined) view.setBigUint64(0, BigInt(data.dwCallback), true);
  // 0x08: buffer
  if (data?.lpstrFileName !== undefined) {
    (buf as any)._f8 = util.pwstrToFfi(data.lpstrFileName);
    view.setBigUint64(8, (buf as any)._f8 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f8)), true);
  }
  // 0x10: pointer
  if (data?.rc !== undefined) view.setBigUint64(16, data.rc === null ? 0n : BigInt(util.toPointer(data.rc)), true);
  return buf;
}

/**
 * Windows.Win32.Media.Multimedia.MCI_DGV_SAVE_PARMSA (size: 24)
 */
export interface MCI_DGV_SAVE_PARMSA {
  /** usize */
  dwCallback: Deno.PointerValue;
  /** Windows.Win32.Foundation.PSTR */
  lpstrFileName: string | null;
  /** Windows.Win32.Foundation.RECT */
  rc: Uint8Array | Deno.PointerValue | null;
}

export const sizeofMCI_DGV_SAVE_PARMSA = 24;

export function allocMCI_DGV_SAVE_PARMSA(data?: Partial<MCI_DGV_SAVE_PARMSA>): Uint8Array {
  const buf = new Uint8Array(sizeofMCI_DGV_SAVE_PARMSA);
  const view = new DataView(buf.buffer);
  // 0x00: usize
  if (data?.dwCallback !== undefined) view.setBigUint64(0, BigInt(data.dwCallback), true);
  // 0x08: buffer
  if (data?.lpstrFileName !== undefined) {
    (buf as any)._f8 = util.pstrToFfi(data.lpstrFileName);
    view.setBigUint64(8, (buf as any)._f8 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f8)), true);
  }
  // 0x10: pointer
  if (data?.rc !== undefined) view.setBigUint64(16, data.rc === null ? 0n : BigInt(util.toPointer(data.rc)), true);
  return buf;
}

/**
 * Windows.Win32.Media.Multimedia.MCI_DGV_SAVE_PARMSW (size: 24)
 */
export interface MCI_DGV_SAVE_PARMSW {
  /** usize */
  dwCallback: Deno.PointerValue;
  /** Windows.Win32.Foundation.PWSTR */
  lpstrFileName: string | null;
  /** Windows.Win32.Foundation.RECT */
  rc: Uint8Array | Deno.PointerValue | null;
}

export const sizeofMCI_DGV_SAVE_PARMSW = 24;

export function allocMCI_DGV_SAVE_PARMSW(data?: Partial<MCI_DGV_SAVE_PARMSW>): Uint8Array {
  const buf = new Uint8Array(sizeofMCI_DGV_SAVE_PARMSW);
  const view = new DataView(buf.buffer);
  // 0x00: usize
  if (data?.dwCallback !== undefined) view.setBigUint64(0, BigInt(data.dwCallback), true);
  // 0x08: buffer
  if (data?.lpstrFileName !== undefined) {
    (buf as any)._f8 = util.pwstrToFfi(data.lpstrFileName);
    view.setBigUint64(8, (buf as any)._f8 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f8)), true);
  }
  // 0x10: pointer
  if (data?.rc !== undefined) view.setBigUint64(16, data.rc === null ? 0n : BigInt(util.toPointer(data.rc)), true);
  return buf;
}

/**
 * Windows.Win32.Media.Multimedia.MCI_DGV_SET_PARMS (size: 24)
 */
export interface MCI_DGV_SET_PARMS {
  /** usize */
  dwCallback: Deno.PointerValue;
  /** u32 */
  dwTimeFormat: number;
  /** u32 */
  dwAudio: number;
  /** u32 */
  dwFileFormat: number;
  /** u32 */
  dwSpeed: number;
}

export const sizeofMCI_DGV_SET_PARMS = 24;

export function allocMCI_DGV_SET_PARMS(data?: Partial<MCI_DGV_SET_PARMS>): Uint8Array {
  const buf = new Uint8Array(sizeofMCI_DGV_SET_PARMS);
  const view = new DataView(buf.buffer);
  // 0x00: usize
  if (data?.dwCallback !== undefined) view.setBigUint64(0, BigInt(data.dwCallback), true);
  // 0x08: u32
  if (data?.dwTimeFormat !== undefined) view.setUint32(8, Number(data.dwTimeFormat), true);
  // 0x0c: u32
  if (data?.dwAudio !== undefined) view.setUint32(12, Number(data.dwAudio), true);
  // 0x10: u32
  if (data?.dwFileFormat !== undefined) view.setUint32(16, Number(data.dwFileFormat), true);
  // 0x14: u32
  if (data?.dwSpeed !== undefined) view.setUint32(20, Number(data.dwSpeed), true);
  return buf;
}

/**
 * Windows.Win32.Media.Multimedia.MCI_DGV_SETAUDIO_PARMSA (size: 40)
 */
export interface MCI_DGV_SETAUDIO_PARMSA {
  /** usize */
  dwCallback: Deno.PointerValue;
  /** u32 */
  dwItem: number;
  /** u32 */
  dwValue: number;
  /** u32 */
  dwOver: number;
  /** Windows.Win32.Foundation.PSTR */
  lpstrAlgorithm: string | null;
  /** Windows.Win32.Foundation.PSTR */
  lpstrQuality: string | null;
}

export const sizeofMCI_DGV_SETAUDIO_PARMSA = 40;

export function allocMCI_DGV_SETAUDIO_PARMSA(data?: Partial<MCI_DGV_SETAUDIO_PARMSA>): Uint8Array {
  const buf = new Uint8Array(sizeofMCI_DGV_SETAUDIO_PARMSA);
  const view = new DataView(buf.buffer);
  // 0x00: usize
  if (data?.dwCallback !== undefined) view.setBigUint64(0, BigInt(data.dwCallback), true);
  // 0x08: u32
  if (data?.dwItem !== undefined) view.setUint32(8, Number(data.dwItem), true);
  // 0x0c: u32
  if (data?.dwValue !== undefined) view.setUint32(12, Number(data.dwValue), true);
  // 0x10: u32
  if (data?.dwOver !== undefined) view.setUint32(16, Number(data.dwOver), true);
  // 0x14: pad4
  // 0x18: buffer
  if (data?.lpstrAlgorithm !== undefined) {
    (buf as any)._f24 = util.pstrToFfi(data.lpstrAlgorithm);
    view.setBigUint64(24, (buf as any)._f24 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f24)), true);
  }
  // 0x20: buffer
  if (data?.lpstrQuality !== undefined) {
    (buf as any)._f32 = util.pstrToFfi(data.lpstrQuality);
    view.setBigUint64(32, (buf as any)._f32 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f32)), true);
  }
  return buf;
}

/**
 * Windows.Win32.Media.Multimedia.MCI_DGV_SETAUDIO_PARMSW (size: 40)
 */
export interface MCI_DGV_SETAUDIO_PARMSW {
  /** usize */
  dwCallback: Deno.PointerValue;
  /** u32 */
  dwItem: number;
  /** u32 */
  dwValue: number;
  /** u32 */
  dwOver: number;
  /** Windows.Win32.Foundation.PWSTR */
  lpstrAlgorithm: string | null;
  /** Windows.Win32.Foundation.PWSTR */
  lpstrQuality: string | null;
}

export const sizeofMCI_DGV_SETAUDIO_PARMSW = 40;

export function allocMCI_DGV_SETAUDIO_PARMSW(data?: Partial<MCI_DGV_SETAUDIO_PARMSW>): Uint8Array {
  const buf = new Uint8Array(sizeofMCI_DGV_SETAUDIO_PARMSW);
  const view = new DataView(buf.buffer);
  // 0x00: usize
  if (data?.dwCallback !== undefined) view.setBigUint64(0, BigInt(data.dwCallback), true);
  // 0x08: u32
  if (data?.dwItem !== undefined) view.setUint32(8, Number(data.dwItem), true);
  // 0x0c: u32
  if (data?.dwValue !== undefined) view.setUint32(12, Number(data.dwValue), true);
  // 0x10: u32
  if (data?.dwOver !== undefined) view.setUint32(16, Number(data.dwOver), true);
  // 0x14: pad4
  // 0x18: buffer
  if (data?.lpstrAlgorithm !== undefined) {
    (buf as any)._f24 = util.pwstrToFfi(data.lpstrAlgorithm);
    view.setBigUint64(24, (buf as any)._f24 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f24)), true);
  }
  // 0x20: buffer
  if (data?.lpstrQuality !== undefined) {
    (buf as any)._f32 = util.pwstrToFfi(data.lpstrQuality);
    view.setBigUint64(32, (buf as any)._f32 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f32)), true);
  }
  return buf;
}

/**
 * Windows.Win32.Media.Multimedia.MCI_DGV_SIGNAL_PARMS (size: 24)
 */
export interface MCI_DGV_SIGNAL_PARMS {
  /** usize */
  dwCallback: Deno.PointerValue;
  /** u32 */
  dwPosition: number;
  /** u32 */
  dwPeriod: number;
  /** u32 */
  dwUserParm: number;
}

export const sizeofMCI_DGV_SIGNAL_PARMS = 24;

export function allocMCI_DGV_SIGNAL_PARMS(data?: Partial<MCI_DGV_SIGNAL_PARMS>): Uint8Array {
  const buf = new Uint8Array(sizeofMCI_DGV_SIGNAL_PARMS);
  const view = new DataView(buf.buffer);
  // 0x00: usize
  if (data?.dwCallback !== undefined) view.setBigUint64(0, BigInt(data.dwCallback), true);
  // 0x08: u32
  if (data?.dwPosition !== undefined) view.setUint32(8, Number(data.dwPosition), true);
  // 0x0c: u32
  if (data?.dwPeriod !== undefined) view.setUint32(12, Number(data.dwPeriod), true);
  // 0x10: u32
  if (data?.dwUserParm !== undefined) view.setUint32(16, Number(data.dwUserParm), true);
  // 0x14: pad4
  return buf;
}

/**
 * Windows.Win32.Media.Multimedia.MCI_DGV_SETVIDEO_PARMSA (size: 48)
 */
export interface MCI_DGV_SETVIDEO_PARMSA {
  /** usize */
  dwCallback: Deno.PointerValue;
  /** u32 */
  dwItem: number;
  /** u32 */
  dwValue: number;
  /** u32 */
  dwOver: number;
  /** Windows.Win32.Foundation.PSTR */
  lpstrAlgorithm: string | null;
  /** Windows.Win32.Foundation.PSTR */
  lpstrQuality: string | null;
  /** u32 */
  dwSourceNumber: number;
}

export const sizeofMCI_DGV_SETVIDEO_PARMSA = 48;

export function allocMCI_DGV_SETVIDEO_PARMSA(data?: Partial<MCI_DGV_SETVIDEO_PARMSA>): Uint8Array {
  const buf = new Uint8Array(sizeofMCI_DGV_SETVIDEO_PARMSA);
  const view = new DataView(buf.buffer);
  // 0x00: usize
  if (data?.dwCallback !== undefined) view.setBigUint64(0, BigInt(data.dwCallback), true);
  // 0x08: u32
  if (data?.dwItem !== undefined) view.setUint32(8, Number(data.dwItem), true);
  // 0x0c: u32
  if (data?.dwValue !== undefined) view.setUint32(12, Number(data.dwValue), true);
  // 0x10: u32
  if (data?.dwOver !== undefined) view.setUint32(16, Number(data.dwOver), true);
  // 0x14: pad4
  // 0x18: buffer
  if (data?.lpstrAlgorithm !== undefined) {
    (buf as any)._f24 = util.pstrToFfi(data.lpstrAlgorithm);
    view.setBigUint64(24, (buf as any)._f24 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f24)), true);
  }
  // 0x20: buffer
  if (data?.lpstrQuality !== undefined) {
    (buf as any)._f32 = util.pstrToFfi(data.lpstrQuality);
    view.setBigUint64(32, (buf as any)._f32 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f32)), true);
  }
  // 0x28: u32
  if (data?.dwSourceNumber !== undefined) view.setUint32(40, Number(data.dwSourceNumber), true);
  // 0x2c: pad4
  return buf;
}

/**
 * Windows.Win32.Media.Multimedia.MCI_DGV_SETVIDEO_PARMSW (size: 48)
 */
export interface MCI_DGV_SETVIDEO_PARMSW {
  /** usize */
  dwCallback: Deno.PointerValue;
  /** u32 */
  dwItem: number;
  /** u32 */
  dwValue: number;
  /** u32 */
  dwOver: number;
  /** Windows.Win32.Foundation.PWSTR */
  lpstrAlgorithm: string | null;
  /** Windows.Win32.Foundation.PWSTR */
  lpstrQuality: string | null;
  /** u32 */
  dwSourceNumber: number;
}

export const sizeofMCI_DGV_SETVIDEO_PARMSW = 48;

export function allocMCI_DGV_SETVIDEO_PARMSW(data?: Partial<MCI_DGV_SETVIDEO_PARMSW>): Uint8Array {
  const buf = new Uint8Array(sizeofMCI_DGV_SETVIDEO_PARMSW);
  const view = new DataView(buf.buffer);
  // 0x00: usize
  if (data?.dwCallback !== undefined) view.setBigUint64(0, BigInt(data.dwCallback), true);
  // 0x08: u32
  if (data?.dwItem !== undefined) view.setUint32(8, Number(data.dwItem), true);
  // 0x0c: u32
  if (data?.dwValue !== undefined) view.setUint32(12, Number(data.dwValue), true);
  // 0x10: u32
  if (data?.dwOver !== undefined) view.setUint32(16, Number(data.dwOver), true);
  // 0x14: pad4
  // 0x18: buffer
  if (data?.lpstrAlgorithm !== undefined) {
    (buf as any)._f24 = util.pwstrToFfi(data.lpstrAlgorithm);
    view.setBigUint64(24, (buf as any)._f24 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f24)), true);
  }
  // 0x20: buffer
  if (data?.lpstrQuality !== undefined) {
    (buf as any)._f32 = util.pwstrToFfi(data.lpstrQuality);
    view.setBigUint64(32, (buf as any)._f32 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f32)), true);
  }
  // 0x28: u32
  if (data?.dwSourceNumber !== undefined) view.setUint32(40, Number(data.dwSourceNumber), true);
  // 0x2c: pad4
  return buf;
}

/**
 * Windows.Win32.Media.Multimedia.MCI_DGV_STATUS_PARMSA (size: 40)
 */
export interface MCI_DGV_STATUS_PARMSA {
  /** usize */
  dwCallback: Deno.PointerValue;
  /** usize */
  dwReturn: Deno.PointerValue;
  /** u32 */
  dwItem: number;
  /** u32 */
  dwTrack: number;
  /** Windows.Win32.Foundation.PSTR */
  lpstrDrive: string | null;
  /** u32 */
  dwReference: number;
}

export const sizeofMCI_DGV_STATUS_PARMSA = 40;

export function allocMCI_DGV_STATUS_PARMSA(data?: Partial<MCI_DGV_STATUS_PARMSA>): Uint8Array {
  const buf = new Uint8Array(sizeofMCI_DGV_STATUS_PARMSA);
  const view = new DataView(buf.buffer);
  // 0x00: usize
  if (data?.dwCallback !== undefined) view.setBigUint64(0, BigInt(data.dwCallback), true);
  // 0x08: usize
  if (data?.dwReturn !== undefined) view.setBigUint64(8, BigInt(data.dwReturn), true);
  // 0x10: u32
  if (data?.dwItem !== undefined) view.setUint32(16, Number(data.dwItem), true);
  // 0x14: u32
  if (data?.dwTrack !== undefined) view.setUint32(20, Number(data.dwTrack), true);
  // 0x18: buffer
  if (data?.lpstrDrive !== undefined) {
    (buf as any)._f24 = util.pstrToFfi(data.lpstrDrive);
    view.setBigUint64(24, (buf as any)._f24 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f24)), true);
  }
  // 0x20: u32
  if (data?.dwReference !== undefined) view.setUint32(32, Number(data.dwReference), true);
  // 0x24: pad4
  return buf;
}

/**
 * Windows.Win32.Media.Multimedia.MCI_DGV_STATUS_PARMSW (size: 40)
 */
export interface MCI_DGV_STATUS_PARMSW {
  /** usize */
  dwCallback: Deno.PointerValue;
  /** usize */
  dwReturn: Deno.PointerValue;
  /** u32 */
  dwItem: number;
  /** u32 */
  dwTrack: number;
  /** Windows.Win32.Foundation.PWSTR */
  lpstrDrive: string | null;
  /** u32 */
  dwReference: number;
}

export const sizeofMCI_DGV_STATUS_PARMSW = 40;

export function allocMCI_DGV_STATUS_PARMSW(data?: Partial<MCI_DGV_STATUS_PARMSW>): Uint8Array {
  const buf = new Uint8Array(sizeofMCI_DGV_STATUS_PARMSW);
  const view = new DataView(buf.buffer);
  // 0x00: usize
  if (data?.dwCallback !== undefined) view.setBigUint64(0, BigInt(data.dwCallback), true);
  // 0x08: usize
  if (data?.dwReturn !== undefined) view.setBigUint64(8, BigInt(data.dwReturn), true);
  // 0x10: u32
  if (data?.dwItem !== undefined) view.setUint32(16, Number(data.dwItem), true);
  // 0x14: u32
  if (data?.dwTrack !== undefined) view.setUint32(20, Number(data.dwTrack), true);
  // 0x18: buffer
  if (data?.lpstrDrive !== undefined) {
    (buf as any)._f24 = util.pwstrToFfi(data.lpstrDrive);
    view.setBigUint64(24, (buf as any)._f24 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f24)), true);
  }
  // 0x20: u32
  if (data?.dwReference !== undefined) view.setUint32(32, Number(data.dwReference), true);
  // 0x24: pad4
  return buf;
}

/**
 * Windows.Win32.Media.Multimedia.MCI_DGV_STEP_PARMS (size: 16)
 */
export interface MCI_DGV_STEP_PARMS {
  /** usize */
  dwCallback: Deno.PointerValue;
  /** u32 */
  dwFrames: number;
}

export const sizeofMCI_DGV_STEP_PARMS = 16;

export function allocMCI_DGV_STEP_PARMS(data?: Partial<MCI_DGV_STEP_PARMS>): Uint8Array {
  const buf = new Uint8Array(sizeofMCI_DGV_STEP_PARMS);
  const view = new DataView(buf.buffer);
  // 0x00: usize
  if (data?.dwCallback !== undefined) view.setBigUint64(0, BigInt(data.dwCallback), true);
  // 0x08: u32
  if (data?.dwFrames !== undefined) view.setUint32(8, Number(data.dwFrames), true);
  // 0x0c: pad4
  return buf;
}

/**
 * Windows.Win32.Media.Multimedia.MCI_DGV_UPDATE_PARMS (size: 24)
 */
export interface MCI_DGV_UPDATE_PARMS {
  /** usize */
  dwCallback: Deno.PointerValue;
  /** Windows.Win32.Foundation.RECT */
  rc: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Graphics.Gdi.HDC */
  hDC: Uint8Array | Deno.PointerValue | null;
}

export const sizeofMCI_DGV_UPDATE_PARMS = 24;

export function allocMCI_DGV_UPDATE_PARMS(data?: Partial<MCI_DGV_UPDATE_PARMS>): Uint8Array {
  const buf = new Uint8Array(sizeofMCI_DGV_UPDATE_PARMS);
  const view = new DataView(buf.buffer);
  // 0x00: usize
  if (data?.dwCallback !== undefined) view.setBigUint64(0, BigInt(data.dwCallback), true);
  // 0x08: pointer
  if (data?.rc !== undefined) view.setBigUint64(8, data.rc === null ? 0n : BigInt(util.toPointer(data.rc)), true);
  // 0x10: pointer
  if (data?.hDC !== undefined) view.setBigUint64(16, data.hDC === null ? 0n : BigInt(util.toPointer(data.hDC)), true);
  return buf;
}

/**
 * Windows.Win32.Media.Multimedia.MCI_DGV_WINDOW_PARMSA (size: 32)
 */
export interface MCI_DGV_WINDOW_PARMSA {
  /** usize */
  dwCallback: Deno.PointerValue;
  /** Windows.Win32.Foundation.HWND */
  hWnd: Deno.PointerValue | null;
  /** u32 */
  nCmdShow: number;
  /** Windows.Win32.Foundation.PSTR */
  lpstrText: string | null;
}

export const sizeofMCI_DGV_WINDOW_PARMSA = 32;

export function allocMCI_DGV_WINDOW_PARMSA(data?: Partial<MCI_DGV_WINDOW_PARMSA>): Uint8Array {
  const buf = new Uint8Array(sizeofMCI_DGV_WINDOW_PARMSA);
  const view = new DataView(buf.buffer);
  // 0x00: usize
  if (data?.dwCallback !== undefined) view.setBigUint64(0, BigInt(data.dwCallback), true);
  // 0x08: pointer
  if (data?.hWnd !== undefined) view.setBigUint64(8, data.hWnd === null ? 0n : BigInt(util.toPointer(data.hWnd)), true);
  // 0x10: u32
  if (data?.nCmdShow !== undefined) view.setUint32(16, Number(data.nCmdShow), true);
  // 0x14: pad4
  // 0x18: buffer
  if (data?.lpstrText !== undefined) {
    (buf as any)._f24 = util.pstrToFfi(data.lpstrText);
    view.setBigUint64(24, (buf as any)._f24 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f24)), true);
  }
  return buf;
}

/**
 * Windows.Win32.Media.Multimedia.MCI_DGV_WINDOW_PARMSW (size: 32)
 */
export interface MCI_DGV_WINDOW_PARMSW {
  /** usize */
  dwCallback: Deno.PointerValue;
  /** Windows.Win32.Foundation.HWND */
  hWnd: Deno.PointerValue | null;
  /** u32 */
  nCmdShow: number;
  /** Windows.Win32.Foundation.PWSTR */
  lpstrText: string | null;
}

export const sizeofMCI_DGV_WINDOW_PARMSW = 32;

export function allocMCI_DGV_WINDOW_PARMSW(data?: Partial<MCI_DGV_WINDOW_PARMSW>): Uint8Array {
  const buf = new Uint8Array(sizeofMCI_DGV_WINDOW_PARMSW);
  const view = new DataView(buf.buffer);
  // 0x00: usize
  if (data?.dwCallback !== undefined) view.setBigUint64(0, BigInt(data.dwCallback), true);
  // 0x08: pointer
  if (data?.hWnd !== undefined) view.setBigUint64(8, data.hWnd === null ? 0n : BigInt(util.toPointer(data.hWnd)), true);
  // 0x10: u32
  if (data?.nCmdShow !== undefined) view.setUint32(16, Number(data.nCmdShow), true);
  // 0x14: pad4
  // 0x18: buffer
  if (data?.lpstrText !== undefined) {
    (buf as any)._f24 = util.pwstrToFfi(data.lpstrText);
    view.setBigUint64(24, (buf as any)._f24 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f24)), true);
  }
  return buf;
}

export type LRESULT = Deno.PointerValue;

/**
 * Windows.Win32.Media.Multimedia.ICOPEN (size: 56)
 */
export interface ICOPEN {
  /** u32 */
  dwSize: number;
  /** u32 */
  fccType: number;
  /** u32 */
  fccHandler: number;
  /** u32 */
  dwVersion: number;
  /** u32 */
  dwFlags: number;
  /** Windows.Win32.Foundation.LRESULT */
  dwError: Uint8Array | Deno.PointerValue | null;
  /** ptr */
  pV1Reserved: Deno.PointerValue | Uint8Array | null;
  /** ptr */
  pV2Reserved: Deno.PointerValue | Uint8Array | null;
  /** u32 */
  dnDevNode: number;
}

export const sizeofICOPEN = 56;

export function allocICOPEN(data?: Partial<ICOPEN>): Uint8Array {
  const buf = new Uint8Array(sizeofICOPEN);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.dwSize !== undefined) view.setUint32(0, Number(data.dwSize), true);
  // 0x04: u32
  if (data?.fccType !== undefined) view.setUint32(4, Number(data.fccType), true);
  // 0x08: u32
  if (data?.fccHandler !== undefined) view.setUint32(8, Number(data.fccHandler), true);
  // 0x0c: u32
  if (data?.dwVersion !== undefined) view.setUint32(12, Number(data.dwVersion), true);
  // 0x10: u32
  if (data?.dwFlags !== undefined) view.setUint32(16, Number(data.dwFlags), true);
  // 0x14: pad4
  // 0x18: pointer
  if (data?.dwError !== undefined) view.setBigUint64(24, data.dwError === null ? 0n : BigInt(util.toPointer(data.dwError)), true);
  // 0x20: pointer
  if (data?.pV1Reserved !== undefined) view.setBigUint64(32, data.pV1Reserved === null ? 0n : BigInt(util.toPointer(data.pV1Reserved)), true);
  // 0x28: pointer
  if (data?.pV2Reserved !== undefined) view.setBigUint64(40, data.pV2Reserved === null ? 0n : BigInt(util.toPointer(data.pV2Reserved)), true);
  // 0x30: u32
  if (data?.dnDevNode !== undefined) view.setUint32(48, Number(data.dnDevNode), true);
  // 0x34: pad4
  return buf;
}

/**
 * Windows.Win32.Media.Multimedia.ICINFO (size: 48)
 */
export interface ICINFO {
  /** u32 */
  dwSize: number;
  /** u32 */
  fccType: number;
  /** u32 */
  fccHandler: number;
  /** u32 */
  dwFlags: number;
  /** u32 */
  dwVersion: number;
  /** u32 */
  dwVersionICM: number;
  /** array */
  szName: Deno.PointerValue | null;
  /** array */
  szDescription: Deno.PointerValue | null;
  /** array */
  szDriver: Deno.PointerValue | null;
}

export const sizeofICINFO = 48;

export function allocICINFO(data?: Partial<ICINFO>): Uint8Array {
  const buf = new Uint8Array(sizeofICINFO);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.dwSize !== undefined) view.setUint32(0, Number(data.dwSize), true);
  // 0x04: u32
  if (data?.fccType !== undefined) view.setUint32(4, Number(data.fccType), true);
  // 0x08: u32
  if (data?.fccHandler !== undefined) view.setUint32(8, Number(data.fccHandler), true);
  // 0x0c: u32
  if (data?.dwFlags !== undefined) view.setUint32(12, Number(data.dwFlags), true);
  // 0x10: u32
  if (data?.dwVersion !== undefined) view.setUint32(16, Number(data.dwVersion), true);
  // 0x14: u32
  if (data?.dwVersionICM !== undefined) view.setUint32(20, Number(data.dwVersionICM), true);
  // 0x18: pointer
  if (data?.szName !== undefined) view.setBigUint64(24, data.szName === null ? 0n : BigInt(util.toPointer(data.szName)), true);
  // 0x20: pointer
  if (data?.szDescription !== undefined) view.setBigUint64(32, data.szDescription === null ? 0n : BigInt(util.toPointer(data.szDescription)), true);
  // 0x28: pointer
  if (data?.szDriver !== undefined) view.setBigUint64(40, data.szDriver === null ? 0n : BigInt(util.toPointer(data.szDriver)), true);
  return buf;
}

/**
 * Windows.Win32.Media.Multimedia.ICCOMPRESS (size: 88)
 */
export interface ICCOMPRESS {
  /** u32 */
  dwFlags: number;
  /** ptr */
  lpbiOutput: Deno.PointerValue | Uint8Array | null;
  /** ptr */
  lpOutput: Deno.PointerValue | Uint8Array | null;
  /** ptr */
  lpbiInput: Deno.PointerValue | Uint8Array | null;
  /** ptr */
  lpInput: Deno.PointerValue | Uint8Array | null;
  /** ptr */
  lpckid: Deno.PointerValue | Uint8Array | null;
  /** ptr */
  lpdwFlags: Deno.PointerValue | Uint8Array | null;
  /** i32 */
  lFrameNum: number;
  /** u32 */
  dwFrameSize: number;
  /** u32 */
  dwQuality: number;
  /** ptr */
  lpbiPrev: Deno.PointerValue | Uint8Array | null;
  /** ptr */
  lpPrev: Deno.PointerValue | Uint8Array | null;
}

export const sizeofICCOMPRESS = 88;

export function allocICCOMPRESS(data?: Partial<ICCOMPRESS>): Uint8Array {
  const buf = new Uint8Array(sizeofICCOMPRESS);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.dwFlags !== undefined) view.setUint32(0, Number(data.dwFlags), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.lpbiOutput !== undefined) view.setBigUint64(8, data.lpbiOutput === null ? 0n : BigInt(util.toPointer(data.lpbiOutput)), true);
  // 0x10: pointer
  if (data?.lpOutput !== undefined) view.setBigUint64(16, data.lpOutput === null ? 0n : BigInt(util.toPointer(data.lpOutput)), true);
  // 0x18: pointer
  if (data?.lpbiInput !== undefined) view.setBigUint64(24, data.lpbiInput === null ? 0n : BigInt(util.toPointer(data.lpbiInput)), true);
  // 0x20: pointer
  if (data?.lpInput !== undefined) view.setBigUint64(32, data.lpInput === null ? 0n : BigInt(util.toPointer(data.lpInput)), true);
  // 0x28: pointer
  if (data?.lpckid !== undefined) view.setBigUint64(40, data.lpckid === null ? 0n : BigInt(util.toPointer(data.lpckid)), true);
  // 0x30: pointer
  if (data?.lpdwFlags !== undefined) view.setBigUint64(48, data.lpdwFlags === null ? 0n : BigInt(util.toPointer(data.lpdwFlags)), true);
  // 0x38: i32
  if (data?.lFrameNum !== undefined) view.setInt32(56, Number(data.lFrameNum), true);
  // 0x3c: u32
  if (data?.dwFrameSize !== undefined) view.setUint32(60, Number(data.dwFrameSize), true);
  // 0x40: u32
  if (data?.dwQuality !== undefined) view.setUint32(64, Number(data.dwQuality), true);
  // 0x44: pad4
  // 0x48: pointer
  if (data?.lpbiPrev !== undefined) view.setBigUint64(72, data.lpbiPrev === null ? 0n : BigInt(util.toPointer(data.lpbiPrev)), true);
  // 0x50: pointer
  if (data?.lpPrev !== undefined) view.setBigUint64(80, data.lpPrev === null ? 0n : BigInt(util.toPointer(data.lpPrev)), true);
  return buf;
}

export type LPARAM = Deno.PointerValue;

/**
 * Windows.Win32.Media.Multimedia.ICCOMPRESSFRAMES (size: 96)
 */
export interface ICCOMPRESSFRAMES {
  /** u32 */
  dwFlags: number;
  /** ptr */
  lpbiOutput: Deno.PointerValue | Uint8Array | null;
  /** Windows.Win32.Foundation.LPARAM */
  lOutput: Uint8Array | Deno.PointerValue | null;
  /** ptr */
  lpbiInput: Deno.PointerValue | Uint8Array | null;
  /** Windows.Win32.Foundation.LPARAM */
  lInput: Uint8Array | Deno.PointerValue | null;
  /** i32 */
  lStartFrame: number;
  /** i32 */
  lFrameCount: number;
  /** i32 */
  lQuality: number;
  /** i32 */
  lDataRate: number;
  /** i32 */
  lKeyRate: number;
  /** u32 */
  dwRate: number;
  /** u32 */
  dwScale: number;
  /** u32 */
  dwOverheadPerFrame: number;
  /** u32 */
  dwReserved2: number;
  /** isize */
  GetData: Deno.PointerValue;
  /** isize */
  PutData: Deno.PointerValue;
}

export const sizeofICCOMPRESSFRAMES = 96;

export function allocICCOMPRESSFRAMES(data?: Partial<ICCOMPRESSFRAMES>): Uint8Array {
  const buf = new Uint8Array(sizeofICCOMPRESSFRAMES);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.dwFlags !== undefined) view.setUint32(0, Number(data.dwFlags), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.lpbiOutput !== undefined) view.setBigUint64(8, data.lpbiOutput === null ? 0n : BigInt(util.toPointer(data.lpbiOutput)), true);
  // 0x10: pointer
  if (data?.lOutput !== undefined) view.setBigUint64(16, data.lOutput === null ? 0n : BigInt(util.toPointer(data.lOutput)), true);
  // 0x18: pointer
  if (data?.lpbiInput !== undefined) view.setBigUint64(24, data.lpbiInput === null ? 0n : BigInt(util.toPointer(data.lpbiInput)), true);
  // 0x20: pointer
  if (data?.lInput !== undefined) view.setBigUint64(32, data.lInput === null ? 0n : BigInt(util.toPointer(data.lInput)), true);
  // 0x28: i32
  if (data?.lStartFrame !== undefined) view.setInt32(40, Number(data.lStartFrame), true);
  // 0x2c: i32
  if (data?.lFrameCount !== undefined) view.setInt32(44, Number(data.lFrameCount), true);
  // 0x30: i32
  if (data?.lQuality !== undefined) view.setInt32(48, Number(data.lQuality), true);
  // 0x34: i32
  if (data?.lDataRate !== undefined) view.setInt32(52, Number(data.lDataRate), true);
  // 0x38: i32
  if (data?.lKeyRate !== undefined) view.setInt32(56, Number(data.lKeyRate), true);
  // 0x3c: u32
  if (data?.dwRate !== undefined) view.setUint32(60, Number(data.dwRate), true);
  // 0x40: u32
  if (data?.dwScale !== undefined) view.setUint32(64, Number(data.dwScale), true);
  // 0x44: u32
  if (data?.dwOverheadPerFrame !== undefined) view.setUint32(68, Number(data.dwOverheadPerFrame), true);
  // 0x48: u32
  if (data?.dwReserved2 !== undefined) view.setUint32(72, Number(data.dwReserved2), true);
  // 0x4c: pad4
  // 0x50: isize
  if (data?.GetData !== undefined) view.setBigInt64(80, BigInt(data.GetData), true);
  // 0x58: isize
  if (data?.PutData !== undefined) view.setBigInt64(88, BigInt(data.PutData), true);
  return buf;
}

/**
 * Windows.Win32.Media.Multimedia.ICSETSTATUSPROC (size: 24)
 */
export interface ICSETSTATUSPROC {
  /** u32 */
  dwFlags: number;
  /** Windows.Win32.Foundation.LPARAM */
  lParam: Uint8Array | Deno.PointerValue | null;
  /** isize */
  Status: Deno.PointerValue;
}

export const sizeofICSETSTATUSPROC = 24;

export function allocICSETSTATUSPROC(data?: Partial<ICSETSTATUSPROC>): Uint8Array {
  const buf = new Uint8Array(sizeofICSETSTATUSPROC);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.dwFlags !== undefined) view.setUint32(0, Number(data.dwFlags), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.lParam !== undefined) view.setBigUint64(8, data.lParam === null ? 0n : BigInt(util.toPointer(data.lParam)), true);
  // 0x10: isize
  if (data?.Status !== undefined) view.setBigInt64(16, BigInt(data.Status), true);
  return buf;
}

/**
 * Windows.Win32.Media.Multimedia.ICDECOMPRESS (size: 48)
 */
export interface ICDECOMPRESS {
  /** u32 */
  dwFlags: number;
  /** ptr */
  lpbiInput: Deno.PointerValue | Uint8Array | null;
  /** ptr */
  lpInput: Deno.PointerValue | Uint8Array | null;
  /** ptr */
  lpbiOutput: Deno.PointerValue | Uint8Array | null;
  /** ptr */
  lpOutput: Deno.PointerValue | Uint8Array | null;
  /** u32 */
  ckid: number;
}

export const sizeofICDECOMPRESS = 48;

export function allocICDECOMPRESS(data?: Partial<ICDECOMPRESS>): Uint8Array {
  const buf = new Uint8Array(sizeofICDECOMPRESS);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.dwFlags !== undefined) view.setUint32(0, Number(data.dwFlags), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.lpbiInput !== undefined) view.setBigUint64(8, data.lpbiInput === null ? 0n : BigInt(util.toPointer(data.lpbiInput)), true);
  // 0x10: pointer
  if (data?.lpInput !== undefined) view.setBigUint64(16, data.lpInput === null ? 0n : BigInt(util.toPointer(data.lpInput)), true);
  // 0x18: pointer
  if (data?.lpbiOutput !== undefined) view.setBigUint64(24, data.lpbiOutput === null ? 0n : BigInt(util.toPointer(data.lpbiOutput)), true);
  // 0x20: pointer
  if (data?.lpOutput !== undefined) view.setBigUint64(32, data.lpOutput === null ? 0n : BigInt(util.toPointer(data.lpOutput)), true);
  // 0x28: u32
  if (data?.ckid !== undefined) view.setUint32(40, Number(data.ckid), true);
  // 0x2c: pad4
  return buf;
}

/**
 * Windows.Win32.Media.Multimedia.ICDECOMPRESSEX (size: 72)
 */
export interface ICDECOMPRESSEX {
  /** u32 */
  dwFlags: number;
  /** ptr */
  lpbiSrc: Deno.PointerValue | Uint8Array | null;
  /** ptr */
  lpSrc: Deno.PointerValue | Uint8Array | null;
  /** ptr */
  lpbiDst: Deno.PointerValue | Uint8Array | null;
  /** ptr */
  lpDst: Deno.PointerValue | Uint8Array | null;
  /** i32 */
  xDst: number;
  /** i32 */
  yDst: number;
  /** i32 */
  dxDst: number;
  /** i32 */
  dyDst: number;
  /** i32 */
  xSrc: number;
  /** i32 */
  ySrc: number;
  /** i32 */
  dxSrc: number;
  /** i32 */
  dySrc: number;
}

export const sizeofICDECOMPRESSEX = 72;

export function allocICDECOMPRESSEX(data?: Partial<ICDECOMPRESSEX>): Uint8Array {
  const buf = new Uint8Array(sizeofICDECOMPRESSEX);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.dwFlags !== undefined) view.setUint32(0, Number(data.dwFlags), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.lpbiSrc !== undefined) view.setBigUint64(8, data.lpbiSrc === null ? 0n : BigInt(util.toPointer(data.lpbiSrc)), true);
  // 0x10: pointer
  if (data?.lpSrc !== undefined) view.setBigUint64(16, data.lpSrc === null ? 0n : BigInt(util.toPointer(data.lpSrc)), true);
  // 0x18: pointer
  if (data?.lpbiDst !== undefined) view.setBigUint64(24, data.lpbiDst === null ? 0n : BigInt(util.toPointer(data.lpbiDst)), true);
  // 0x20: pointer
  if (data?.lpDst !== undefined) view.setBigUint64(32, data.lpDst === null ? 0n : BigInt(util.toPointer(data.lpDst)), true);
  // 0x28: i32
  if (data?.xDst !== undefined) view.setInt32(40, Number(data.xDst), true);
  // 0x2c: i32
  if (data?.yDst !== undefined) view.setInt32(44, Number(data.yDst), true);
  // 0x30: i32
  if (data?.dxDst !== undefined) view.setInt32(48, Number(data.dxDst), true);
  // 0x34: i32
  if (data?.dyDst !== undefined) view.setInt32(52, Number(data.dyDst), true);
  // 0x38: i32
  if (data?.xSrc !== undefined) view.setInt32(56, Number(data.xSrc), true);
  // 0x3c: i32
  if (data?.ySrc !== undefined) view.setInt32(60, Number(data.ySrc), true);
  // 0x40: i32
  if (data?.dxSrc !== undefined) view.setInt32(64, Number(data.dxSrc), true);
  // 0x44: i32
  if (data?.dySrc !== undefined) view.setInt32(68, Number(data.dySrc), true);
  return buf;
}

export type HPALETTE = Deno.PointerValue;

/**
 * Windows.Win32.Media.Multimedia.ICDRAWBEGIN (size: 80)
 */
export interface ICDRAWBEGIN {
  /** u32 */
  dwFlags: number;
  /** Windows.Win32.Graphics.Gdi.HPALETTE */
  hpal: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Foundation.HWND */
  hwnd: Deno.PointerValue | null;
  /** Windows.Win32.Graphics.Gdi.HDC */
  hdc: Uint8Array | Deno.PointerValue | null;
  /** i32 */
  xDst: number;
  /** i32 */
  yDst: number;
  /** i32 */
  dxDst: number;
  /** i32 */
  dyDst: number;
  /** ptr */
  lpbi: Deno.PointerValue | Uint8Array | null;
  /** i32 */
  xSrc: number;
  /** i32 */
  ySrc: number;
  /** i32 */
  dxSrc: number;
  /** i32 */
  dySrc: number;
  /** u32 */
  dwRate: number;
  /** u32 */
  dwScale: number;
}

export const sizeofICDRAWBEGIN = 80;

export function allocICDRAWBEGIN(data?: Partial<ICDRAWBEGIN>): Uint8Array {
  const buf = new Uint8Array(sizeofICDRAWBEGIN);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.dwFlags !== undefined) view.setUint32(0, Number(data.dwFlags), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.hpal !== undefined) view.setBigUint64(8, data.hpal === null ? 0n : BigInt(util.toPointer(data.hpal)), true);
  // 0x10: pointer
  if (data?.hwnd !== undefined) view.setBigUint64(16, data.hwnd === null ? 0n : BigInt(util.toPointer(data.hwnd)), true);
  // 0x18: pointer
  if (data?.hdc !== undefined) view.setBigUint64(24, data.hdc === null ? 0n : BigInt(util.toPointer(data.hdc)), true);
  // 0x20: i32
  if (data?.xDst !== undefined) view.setInt32(32, Number(data.xDst), true);
  // 0x24: i32
  if (data?.yDst !== undefined) view.setInt32(36, Number(data.yDst), true);
  // 0x28: i32
  if (data?.dxDst !== undefined) view.setInt32(40, Number(data.dxDst), true);
  // 0x2c: i32
  if (data?.dyDst !== undefined) view.setInt32(44, Number(data.dyDst), true);
  // 0x30: pointer
  if (data?.lpbi !== undefined) view.setBigUint64(48, data.lpbi === null ? 0n : BigInt(util.toPointer(data.lpbi)), true);
  // 0x38: i32
  if (data?.xSrc !== undefined) view.setInt32(56, Number(data.xSrc), true);
  // 0x3c: i32
  if (data?.ySrc !== undefined) view.setInt32(60, Number(data.ySrc), true);
  // 0x40: i32
  if (data?.dxSrc !== undefined) view.setInt32(64, Number(data.dxSrc), true);
  // 0x44: i32
  if (data?.dySrc !== undefined) view.setInt32(68, Number(data.dySrc), true);
  // 0x48: u32
  if (data?.dwRate !== undefined) view.setUint32(72, Number(data.dwRate), true);
  // 0x4c: u32
  if (data?.dwScale !== undefined) view.setUint32(76, Number(data.dwScale), true);
  return buf;
}

/**
 * Windows.Win32.Media.Multimedia.ICDRAW (size: 32)
 */
export interface ICDRAW {
  /** u32 */
  dwFlags: number;
  /** ptr */
  lpFormat: Deno.PointerValue | Uint8Array | null;
  /** ptr */
  lpData: Deno.PointerValue | Uint8Array | null;
  /** u32 */
  cbData: number;
  /** i32 */
  lTime: number;
}

export const sizeofICDRAW = 32;

export function allocICDRAW(data?: Partial<ICDRAW>): Uint8Array {
  const buf = new Uint8Array(sizeofICDRAW);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.dwFlags !== undefined) view.setUint32(0, Number(data.dwFlags), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.lpFormat !== undefined) view.setBigUint64(8, data.lpFormat === null ? 0n : BigInt(util.toPointer(data.lpFormat)), true);
  // 0x10: pointer
  if (data?.lpData !== undefined) view.setBigUint64(16, data.lpData === null ? 0n : BigInt(util.toPointer(data.lpData)), true);
  // 0x18: u32
  if (data?.cbData !== undefined) view.setUint32(24, Number(data.cbData), true);
  // 0x1c: i32
  if (data?.lTime !== undefined) view.setInt32(28, Number(data.lTime), true);
  return buf;
}

/**
 * Windows.Win32.Media.Multimedia.ICDRAWSUGGEST (size: 40)
 */
export interface ICDRAWSUGGEST {
  /** ptr */
  lpbiIn: Deno.PointerValue | Uint8Array | null;
  /** ptr */
  lpbiSuggest: Deno.PointerValue | Uint8Array | null;
  /** i32 */
  dxSrc: number;
  /** i32 */
  dySrc: number;
  /** i32 */
  dxDst: number;
  /** i32 */
  dyDst: number;
  /** Windows.Win32.Media.Multimedia.HIC */
  hicDecompressor: Uint8Array | Deno.PointerValue | null;
}

export const sizeofICDRAWSUGGEST = 40;

export function allocICDRAWSUGGEST(data?: Partial<ICDRAWSUGGEST>): Uint8Array {
  const buf = new Uint8Array(sizeofICDRAWSUGGEST);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.lpbiIn !== undefined) view.setBigUint64(0, data.lpbiIn === null ? 0n : BigInt(util.toPointer(data.lpbiIn)), true);
  // 0x08: pointer
  if (data?.lpbiSuggest !== undefined) view.setBigUint64(8, data.lpbiSuggest === null ? 0n : BigInt(util.toPointer(data.lpbiSuggest)), true);
  // 0x10: i32
  if (data?.dxSrc !== undefined) view.setInt32(16, Number(data.dxSrc), true);
  // 0x14: i32
  if (data?.dySrc !== undefined) view.setInt32(20, Number(data.dySrc), true);
  // 0x18: i32
  if (data?.dxDst !== undefined) view.setInt32(24, Number(data.dxDst), true);
  // 0x1c: i32
  if (data?.dyDst !== undefined) view.setInt32(28, Number(data.dyDst), true);
  // 0x20: pointer
  if (data?.hicDecompressor !== undefined) view.setBigUint64(32, data.hicDecompressor === null ? 0n : BigInt(util.toPointer(data.hicDecompressor)), true);
  return buf;
}

/**
 * Windows.Win32.Media.Multimedia.ICPALETTE (size: 24)
 */
export interface ICPALETTE {
  /** u32 */
  dwFlags: number;
  /** i32 */
  iStart: number;
  /** i32 */
  iLen: number;
  /** ptr */
  lppe: Deno.PointerValue | Uint8Array | null;
}

export const sizeofICPALETTE = 24;

export function allocICPALETTE(data?: Partial<ICPALETTE>): Uint8Array {
  const buf = new Uint8Array(sizeofICPALETTE);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.dwFlags !== undefined) view.setUint32(0, Number(data.dwFlags), true);
  // 0x04: i32
  if (data?.iStart !== undefined) view.setInt32(4, Number(data.iStart), true);
  // 0x08: i32
  if (data?.iLen !== undefined) view.setInt32(8, Number(data.iLen), true);
  // 0x0c: pad4
  // 0x10: pointer
  if (data?.lppe !== undefined) view.setBigUint64(16, data.lppe === null ? 0n : BigInt(util.toPointer(data.lppe)), true);
  return buf;
}

/**
 * Windows.Win32.Media.Multimedia.COMPVARS (size: 96)
 */
export interface COMPVARS {
  /** i32 */
  cbSize: number;
  /** u32 */
  dwFlags: number;
  /** Windows.Win32.Media.Multimedia.HIC */
  hic: Uint8Array | Deno.PointerValue | null;
  /** u32 */
  fccType: number;
  /** u32 */
  fccHandler: number;
  /** ptr */
  lpbiIn: Deno.PointerValue | Uint8Array | null;
  /** ptr */
  lpbiOut: Deno.PointerValue | Uint8Array | null;
  /** ptr */
  lpBitsOut: Deno.PointerValue | Uint8Array | null;
  /** ptr */
  lpBitsPrev: Deno.PointerValue | Uint8Array | null;
  /** i32 */
  lFrame: number;
  /** i32 */
  lKey: number;
  /** i32 */
  lDataRate: number;
  /** i32 */
  lQ: number;
  /** i32 */
  lKeyCount: number;
  /** ptr */
  lpState: Deno.PointerValue | Uint8Array | null;
  /** i32 */
  cbState: number;
}

export const sizeofCOMPVARS = 96;

export function allocCOMPVARS(data?: Partial<COMPVARS>): Uint8Array {
  const buf = new Uint8Array(sizeofCOMPVARS);
  const view = new DataView(buf.buffer);
  // 0x00: i32
  if (data?.cbSize !== undefined) view.setInt32(0, Number(data.cbSize), true);
  // 0x04: u32
  if (data?.dwFlags !== undefined) view.setUint32(4, Number(data.dwFlags), true);
  // 0x08: pointer
  if (data?.hic !== undefined) view.setBigUint64(8, data.hic === null ? 0n : BigInt(util.toPointer(data.hic)), true);
  // 0x10: u32
  if (data?.fccType !== undefined) view.setUint32(16, Number(data.fccType), true);
  // 0x14: u32
  if (data?.fccHandler !== undefined) view.setUint32(20, Number(data.fccHandler), true);
  // 0x18: pointer
  if (data?.lpbiIn !== undefined) view.setBigUint64(24, data.lpbiIn === null ? 0n : BigInt(util.toPointer(data.lpbiIn)), true);
  // 0x20: pointer
  if (data?.lpbiOut !== undefined) view.setBigUint64(32, data.lpbiOut === null ? 0n : BigInt(util.toPointer(data.lpbiOut)), true);
  // 0x28: pointer
  if (data?.lpBitsOut !== undefined) view.setBigUint64(40, data.lpBitsOut === null ? 0n : BigInt(util.toPointer(data.lpBitsOut)), true);
  // 0x30: pointer
  if (data?.lpBitsPrev !== undefined) view.setBigUint64(48, data.lpBitsPrev === null ? 0n : BigInt(util.toPointer(data.lpBitsPrev)), true);
  // 0x38: i32
  if (data?.lFrame !== undefined) view.setInt32(56, Number(data.lFrame), true);
  // 0x3c: i32
  if (data?.lKey !== undefined) view.setInt32(60, Number(data.lKey), true);
  // 0x40: i32
  if (data?.lDataRate !== undefined) view.setInt32(64, Number(data.lDataRate), true);
  // 0x44: i32
  if (data?.lQ !== undefined) view.setInt32(68, Number(data.lQ), true);
  // 0x48: i32
  if (data?.lKeyCount !== undefined) view.setInt32(72, Number(data.lKeyCount), true);
  // 0x4c: pad4
  // 0x50: pointer
  if (data?.lpState !== undefined) view.setBigUint64(80, data.lpState === null ? 0n : BigInt(util.toPointer(data.lpState)), true);
  // 0x58: i32
  if (data?.cbState !== undefined) view.setInt32(88, Number(data.cbState), true);
  // 0x5c: pad4
  return buf;
}

/**
 * Windows.Win32.Media.Multimedia.DRAWDIBTIME (size: 32)
 */
export interface DRAWDIBTIME {
  /** i32 */
  timeCount: number;
  /** i32 */
  timeDraw: number;
  /** i32 */
  timeDecompress: number;
  /** i32 */
  timeDither: number;
  /** i32 */
  timeStretch: number;
  /** i32 */
  timeBlt: number;
  /** i32 */
  timeSetDIBits: number;
}

export const sizeofDRAWDIBTIME = 32;

export function allocDRAWDIBTIME(data?: Partial<DRAWDIBTIME>): Uint8Array {
  const buf = new Uint8Array(sizeofDRAWDIBTIME);
  const view = new DataView(buf.buffer);
  // 0x00: i32
  if (data?.timeCount !== undefined) view.setInt32(0, Number(data.timeCount), true);
  // 0x04: i32
  if (data?.timeDraw !== undefined) view.setInt32(4, Number(data.timeDraw), true);
  // 0x08: i32
  if (data?.timeDecompress !== undefined) view.setInt32(8, Number(data.timeDecompress), true);
  // 0x0c: i32
  if (data?.timeDither !== undefined) view.setInt32(12, Number(data.timeDither), true);
  // 0x10: i32
  if (data?.timeStretch !== undefined) view.setInt32(16, Number(data.timeStretch), true);
  // 0x14: i32
  if (data?.timeBlt !== undefined) view.setInt32(20, Number(data.timeBlt), true);
  // 0x18: i32
  if (data?.timeSetDIBits !== undefined) view.setInt32(24, Number(data.timeSetDIBits), true);
  // 0x1c: pad4
  return buf;
}

/**
 * Windows.Win32.Media.Multimedia.AVISTREAMINFOW (size: 80)
 */
export interface AVISTREAMINFOW {
  /** u32 */
  fccType: number;
  /** u32 */
  fccHandler: number;
  /** u32 */
  dwFlags: number;
  /** u32 */
  dwCaps: number;
  /** u16 */
  wPriority: number;
  /** u16 */
  wLanguage: number;
  /** u32 */
  dwScale: number;
  /** u32 */
  dwRate: number;
  /** u32 */
  dwStart: number;
  /** u32 */
  dwLength: number;
  /** u32 */
  dwInitialFrames: number;
  /** u32 */
  dwSuggestedBufferSize: number;
  /** u32 */
  dwQuality: number;
  /** u32 */
  dwSampleSize: number;
  /** Windows.Win32.Foundation.RECT */
  rcFrame: Uint8Array | Deno.PointerValue | null;
  /** u32 */
  dwEditCount: number;
  /** u32 */
  dwFormatChangeCount: number;
  /** array */
  szName: Deno.PointerValue | null;
}

export const sizeofAVISTREAMINFOW = 80;

export function allocAVISTREAMINFOW(data?: Partial<AVISTREAMINFOW>): Uint8Array {
  const buf = new Uint8Array(sizeofAVISTREAMINFOW);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.fccType !== undefined) view.setUint32(0, Number(data.fccType), true);
  // 0x04: u32
  if (data?.fccHandler !== undefined) view.setUint32(4, Number(data.fccHandler), true);
  // 0x08: u32
  if (data?.dwFlags !== undefined) view.setUint32(8, Number(data.dwFlags), true);
  // 0x0c: u32
  if (data?.dwCaps !== undefined) view.setUint32(12, Number(data.dwCaps), true);
  // 0x10: u16
  if (data?.wPriority !== undefined) view.setUint16(16, Number(data.wPriority), true);
  // 0x12: u16
  if (data?.wLanguage !== undefined) view.setUint16(18, Number(data.wLanguage), true);
  // 0x14: u32
  if (data?.dwScale !== undefined) view.setUint32(20, Number(data.dwScale), true);
  // 0x18: u32
  if (data?.dwRate !== undefined) view.setUint32(24, Number(data.dwRate), true);
  // 0x1c: u32
  if (data?.dwStart !== undefined) view.setUint32(28, Number(data.dwStart), true);
  // 0x20: u32
  if (data?.dwLength !== undefined) view.setUint32(32, Number(data.dwLength), true);
  // 0x24: u32
  if (data?.dwInitialFrames !== undefined) view.setUint32(36, Number(data.dwInitialFrames), true);
  // 0x28: u32
  if (data?.dwSuggestedBufferSize !== undefined) view.setUint32(40, Number(data.dwSuggestedBufferSize), true);
  // 0x2c: u32
  if (data?.dwQuality !== undefined) view.setUint32(44, Number(data.dwQuality), true);
  // 0x30: u32
  if (data?.dwSampleSize !== undefined) view.setUint32(48, Number(data.dwSampleSize), true);
  // 0x34: pad4
  // 0x38: pointer
  if (data?.rcFrame !== undefined) view.setBigUint64(56, data.rcFrame === null ? 0n : BigInt(util.toPointer(data.rcFrame)), true);
  // 0x40: u32
  if (data?.dwEditCount !== undefined) view.setUint32(64, Number(data.dwEditCount), true);
  // 0x44: u32
  if (data?.dwFormatChangeCount !== undefined) view.setUint32(68, Number(data.dwFormatChangeCount), true);
  // 0x48: pointer
  if (data?.szName !== undefined) view.setBigUint64(72, data.szName === null ? 0n : BigInt(util.toPointer(data.szName)), true);
  return buf;
}

/**
 * Windows.Win32.Media.Multimedia.AVISTREAMINFOA (size: 80)
 */
export interface AVISTREAMINFOA {
  /** u32 */
  fccType: number;
  /** u32 */
  fccHandler: number;
  /** u32 */
  dwFlags: number;
  /** u32 */
  dwCaps: number;
  /** u16 */
  wPriority: number;
  /** u16 */
  wLanguage: number;
  /** u32 */
  dwScale: number;
  /** u32 */
  dwRate: number;
  /** u32 */
  dwStart: number;
  /** u32 */
  dwLength: number;
  /** u32 */
  dwInitialFrames: number;
  /** u32 */
  dwSuggestedBufferSize: number;
  /** u32 */
  dwQuality: number;
  /** u32 */
  dwSampleSize: number;
  /** Windows.Win32.Foundation.RECT */
  rcFrame: Uint8Array | Deno.PointerValue | null;
  /** u32 */
  dwEditCount: number;
  /** u32 */
  dwFormatChangeCount: number;
  /** array */
  szName: Deno.PointerValue | null;
}

export const sizeofAVISTREAMINFOA = 80;

export function allocAVISTREAMINFOA(data?: Partial<AVISTREAMINFOA>): Uint8Array {
  const buf = new Uint8Array(sizeofAVISTREAMINFOA);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.fccType !== undefined) view.setUint32(0, Number(data.fccType), true);
  // 0x04: u32
  if (data?.fccHandler !== undefined) view.setUint32(4, Number(data.fccHandler), true);
  // 0x08: u32
  if (data?.dwFlags !== undefined) view.setUint32(8, Number(data.dwFlags), true);
  // 0x0c: u32
  if (data?.dwCaps !== undefined) view.setUint32(12, Number(data.dwCaps), true);
  // 0x10: u16
  if (data?.wPriority !== undefined) view.setUint16(16, Number(data.wPriority), true);
  // 0x12: u16
  if (data?.wLanguage !== undefined) view.setUint16(18, Number(data.wLanguage), true);
  // 0x14: u32
  if (data?.dwScale !== undefined) view.setUint32(20, Number(data.dwScale), true);
  // 0x18: u32
  if (data?.dwRate !== undefined) view.setUint32(24, Number(data.dwRate), true);
  // 0x1c: u32
  if (data?.dwStart !== undefined) view.setUint32(28, Number(data.dwStart), true);
  // 0x20: u32
  if (data?.dwLength !== undefined) view.setUint32(32, Number(data.dwLength), true);
  // 0x24: u32
  if (data?.dwInitialFrames !== undefined) view.setUint32(36, Number(data.dwInitialFrames), true);
  // 0x28: u32
  if (data?.dwSuggestedBufferSize !== undefined) view.setUint32(40, Number(data.dwSuggestedBufferSize), true);
  // 0x2c: u32
  if (data?.dwQuality !== undefined) view.setUint32(44, Number(data.dwQuality), true);
  // 0x30: u32
  if (data?.dwSampleSize !== undefined) view.setUint32(48, Number(data.dwSampleSize), true);
  // 0x34: pad4
  // 0x38: pointer
  if (data?.rcFrame !== undefined) view.setBigUint64(56, data.rcFrame === null ? 0n : BigInt(util.toPointer(data.rcFrame)), true);
  // 0x40: u32
  if (data?.dwEditCount !== undefined) view.setUint32(64, Number(data.dwEditCount), true);
  // 0x44: u32
  if (data?.dwFormatChangeCount !== undefined) view.setUint32(68, Number(data.dwFormatChangeCount), true);
  // 0x48: pointer
  if (data?.szName !== undefined) view.setBigUint64(72, data.szName === null ? 0n : BigInt(util.toPointer(data.szName)), true);
  return buf;
}

/**
 * Windows.Win32.Media.Multimedia.AVIFILEINFOW (size: 56)
 */
export interface AVIFILEINFOW {
  /** u32 */
  dwMaxBytesPerSec: number;
  /** u32 */
  dwFlags: number;
  /** u32 */
  dwCaps: number;
  /** u32 */
  dwStreams: number;
  /** u32 */
  dwSuggestedBufferSize: number;
  /** u32 */
  dwWidth: number;
  /** u32 */
  dwHeight: number;
  /** u32 */
  dwScale: number;
  /** u32 */
  dwRate: number;
  /** u32 */
  dwLength: number;
  /** u32 */
  dwEditCount: number;
  /** array */
  szFileType: Deno.PointerValue | null;
}

export const sizeofAVIFILEINFOW = 56;

export function allocAVIFILEINFOW(data?: Partial<AVIFILEINFOW>): Uint8Array {
  const buf = new Uint8Array(sizeofAVIFILEINFOW);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.dwMaxBytesPerSec !== undefined) view.setUint32(0, Number(data.dwMaxBytesPerSec), true);
  // 0x04: u32
  if (data?.dwFlags !== undefined) view.setUint32(4, Number(data.dwFlags), true);
  // 0x08: u32
  if (data?.dwCaps !== undefined) view.setUint32(8, Number(data.dwCaps), true);
  // 0x0c: u32
  if (data?.dwStreams !== undefined) view.setUint32(12, Number(data.dwStreams), true);
  // 0x10: u32
  if (data?.dwSuggestedBufferSize !== undefined) view.setUint32(16, Number(data.dwSuggestedBufferSize), true);
  // 0x14: u32
  if (data?.dwWidth !== undefined) view.setUint32(20, Number(data.dwWidth), true);
  // 0x18: u32
  if (data?.dwHeight !== undefined) view.setUint32(24, Number(data.dwHeight), true);
  // 0x1c: u32
  if (data?.dwScale !== undefined) view.setUint32(28, Number(data.dwScale), true);
  // 0x20: u32
  if (data?.dwRate !== undefined) view.setUint32(32, Number(data.dwRate), true);
  // 0x24: u32
  if (data?.dwLength !== undefined) view.setUint32(36, Number(data.dwLength), true);
  // 0x28: u32
  if (data?.dwEditCount !== undefined) view.setUint32(40, Number(data.dwEditCount), true);
  // 0x2c: pad4
  // 0x30: pointer
  if (data?.szFileType !== undefined) view.setBigUint64(48, data.szFileType === null ? 0n : BigInt(util.toPointer(data.szFileType)), true);
  return buf;
}

/**
 * Windows.Win32.Media.Multimedia.AVIFILEINFOA (size: 56)
 */
export interface AVIFILEINFOA {
  /** u32 */
  dwMaxBytesPerSec: number;
  /** u32 */
  dwFlags: number;
  /** u32 */
  dwCaps: number;
  /** u32 */
  dwStreams: number;
  /** u32 */
  dwSuggestedBufferSize: number;
  /** u32 */
  dwWidth: number;
  /** u32 */
  dwHeight: number;
  /** u32 */
  dwScale: number;
  /** u32 */
  dwRate: number;
  /** u32 */
  dwLength: number;
  /** u32 */
  dwEditCount: number;
  /** array */
  szFileType: Deno.PointerValue | null;
}

export const sizeofAVIFILEINFOA = 56;

export function allocAVIFILEINFOA(data?: Partial<AVIFILEINFOA>): Uint8Array {
  const buf = new Uint8Array(sizeofAVIFILEINFOA);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.dwMaxBytesPerSec !== undefined) view.setUint32(0, Number(data.dwMaxBytesPerSec), true);
  // 0x04: u32
  if (data?.dwFlags !== undefined) view.setUint32(4, Number(data.dwFlags), true);
  // 0x08: u32
  if (data?.dwCaps !== undefined) view.setUint32(8, Number(data.dwCaps), true);
  // 0x0c: u32
  if (data?.dwStreams !== undefined) view.setUint32(12, Number(data.dwStreams), true);
  // 0x10: u32
  if (data?.dwSuggestedBufferSize !== undefined) view.setUint32(16, Number(data.dwSuggestedBufferSize), true);
  // 0x14: u32
  if (data?.dwWidth !== undefined) view.setUint32(20, Number(data.dwWidth), true);
  // 0x18: u32
  if (data?.dwHeight !== undefined) view.setUint32(24, Number(data.dwHeight), true);
  // 0x1c: u32
  if (data?.dwScale !== undefined) view.setUint32(28, Number(data.dwScale), true);
  // 0x20: u32
  if (data?.dwRate !== undefined) view.setUint32(32, Number(data.dwRate), true);
  // 0x24: u32
  if (data?.dwLength !== undefined) view.setUint32(36, Number(data.dwLength), true);
  // 0x28: u32
  if (data?.dwEditCount !== undefined) view.setUint32(40, Number(data.dwEditCount), true);
  // 0x2c: pad4
  // 0x30: pointer
  if (data?.szFileType !== undefined) view.setBigUint64(48, data.szFileType === null ? 0n : BigInt(util.toPointer(data.szFileType)), true);
  return buf;
}

/**
 * Windows.Win32.Media.Multimedia.AVICOMPRESSOPTIONS (size: 56)
 */
export interface AVICOMPRESSOPTIONS {
  /** u32 */
  fccType: number;
  /** u32 */
  fccHandler: number;
  /** u32 */
  dwKeyFrameEvery: number;
  /** u32 */
  dwQuality: number;
  /** u32 */
  dwBytesPerSecond: number;
  /** u32 */
  dwFlags: number;
  /** ptr */
  lpFormat: Deno.PointerValue | Uint8Array | null;
  /** u32 */
  cbFormat: number;
  /** ptr */
  lpParms: Deno.PointerValue | Uint8Array | null;
  /** u32 */
  cbParms: number;
  /** u32 */
  dwInterleaveEvery: number;
}

export const sizeofAVICOMPRESSOPTIONS = 56;

export function allocAVICOMPRESSOPTIONS(data?: Partial<AVICOMPRESSOPTIONS>): Uint8Array {
  const buf = new Uint8Array(sizeofAVICOMPRESSOPTIONS);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.fccType !== undefined) view.setUint32(0, Number(data.fccType), true);
  // 0x04: u32
  if (data?.fccHandler !== undefined) view.setUint32(4, Number(data.fccHandler), true);
  // 0x08: u32
  if (data?.dwKeyFrameEvery !== undefined) view.setUint32(8, Number(data.dwKeyFrameEvery), true);
  // 0x0c: u32
  if (data?.dwQuality !== undefined) view.setUint32(12, Number(data.dwQuality), true);
  // 0x10: u32
  if (data?.dwBytesPerSecond !== undefined) view.setUint32(16, Number(data.dwBytesPerSecond), true);
  // 0x14: u32
  if (data?.dwFlags !== undefined) view.setUint32(20, Number(data.dwFlags), true);
  // 0x18: pointer
  if (data?.lpFormat !== undefined) view.setBigUint64(24, data.lpFormat === null ? 0n : BigInt(util.toPointer(data.lpFormat)), true);
  // 0x20: u32
  if (data?.cbFormat !== undefined) view.setUint32(32, Number(data.cbFormat), true);
  // 0x24: pad4
  // 0x28: pointer
  if (data?.lpParms !== undefined) view.setBigUint64(40, data.lpParms === null ? 0n : BigInt(util.toPointer(data.lpParms)), true);
  // 0x30: u32
  if (data?.cbParms !== undefined) view.setUint32(48, Number(data.cbParms), true);
  // 0x34: u32
  if (data?.dwInterleaveEvery !== undefined) view.setUint32(52, Number(data.dwInterleaveEvery), true);
  return buf;
}

/**
 * Windows.Win32.Media.Multimedia.VIDEOHDR (size: 48)
 */
export interface VIDEOHDR {
  /** ptr */
  lpData: Deno.PointerValue | Uint8Array | null;
  /** u32 */
  dwBufferLength: number;
  /** u32 */
  dwBytesUsed: number;
  /** u32 */
  dwTimeCaptured: number;
  /** usize */
  dwUser: Deno.PointerValue;
  /** u32 */
  dwFlags: number;
  /** array */
  dwReserved: Deno.PointerValue | null;
}

export const sizeofVIDEOHDR = 48;

export function allocVIDEOHDR(data?: Partial<VIDEOHDR>): Uint8Array {
  const buf = new Uint8Array(sizeofVIDEOHDR);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.lpData !== undefined) view.setBigUint64(0, data.lpData === null ? 0n : BigInt(util.toPointer(data.lpData)), true);
  // 0x08: u32
  if (data?.dwBufferLength !== undefined) view.setUint32(8, Number(data.dwBufferLength), true);
  // 0x0c: u32
  if (data?.dwBytesUsed !== undefined) view.setUint32(12, Number(data.dwBytesUsed), true);
  // 0x10: u32
  if (data?.dwTimeCaptured !== undefined) view.setUint32(16, Number(data.dwTimeCaptured), true);
  // 0x14: pad4
  // 0x18: usize
  if (data?.dwUser !== undefined) view.setBigUint64(24, BigInt(data.dwUser), true);
  // 0x20: u32
  if (data?.dwFlags !== undefined) view.setUint32(32, Number(data.dwFlags), true);
  // 0x24: pad4
  // 0x28: pointer
  if (data?.dwReserved !== undefined) view.setBigUint64(40, data.dwReserved === null ? 0n : BigInt(util.toPointer(data.dwReserved)), true);
  return buf;
}

/**
 * Windows.Win32.Media.Multimedia.CHANNEL_CAPS (size: 40)
 */
export interface CHANNEL_CAPS {
  /** u32 */
  dwFlags: number;
  /** u32 */
  dwSrcRectXMod: number;
  /** u32 */
  dwSrcRectYMod: number;
  /** u32 */
  dwSrcRectWidthMod: number;
  /** u32 */
  dwSrcRectHeightMod: number;
  /** u32 */
  dwDstRectXMod: number;
  /** u32 */
  dwDstRectYMod: number;
  /** u32 */
  dwDstRectWidthMod: number;
  /** u32 */
  dwDstRectHeightMod: number;
}

export const sizeofCHANNEL_CAPS = 40;

export function allocCHANNEL_CAPS(data?: Partial<CHANNEL_CAPS>): Uint8Array {
  const buf = new Uint8Array(sizeofCHANNEL_CAPS);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.dwFlags !== undefined) view.setUint32(0, Number(data.dwFlags), true);
  // 0x04: u32
  if (data?.dwSrcRectXMod !== undefined) view.setUint32(4, Number(data.dwSrcRectXMod), true);
  // 0x08: u32
  if (data?.dwSrcRectYMod !== undefined) view.setUint32(8, Number(data.dwSrcRectYMod), true);
  // 0x0c: u32
  if (data?.dwSrcRectWidthMod !== undefined) view.setUint32(12, Number(data.dwSrcRectWidthMod), true);
  // 0x10: u32
  if (data?.dwSrcRectHeightMod !== undefined) view.setUint32(16, Number(data.dwSrcRectHeightMod), true);
  // 0x14: u32
  if (data?.dwDstRectXMod !== undefined) view.setUint32(20, Number(data.dwDstRectXMod), true);
  // 0x18: u32
  if (data?.dwDstRectYMod !== undefined) view.setUint32(24, Number(data.dwDstRectYMod), true);
  // 0x1c: u32
  if (data?.dwDstRectWidthMod !== undefined) view.setUint32(28, Number(data.dwDstRectWidthMod), true);
  // 0x20: u32
  if (data?.dwDstRectHeightMod !== undefined) view.setUint32(32, Number(data.dwDstRectHeightMod), true);
  // 0x24: pad4
  return buf;
}

export type BOOL = number;

export type HANDLE = Deno.PointerValue;

/**
 * Windows.Win32.Media.Multimedia.CAPDRIVERCAPS (size: 64)
 */
export interface CAPDRIVERCAPS {
  /** u32 */
  wDeviceIndex: number;
  /** Windows.Win32.Foundation.BOOL */
  fHasOverlay: boolean;
  /** Windows.Win32.Foundation.BOOL */
  fHasDlgVideoSource: boolean;
  /** Windows.Win32.Foundation.BOOL */
  fHasDlgVideoFormat: boolean;
  /** Windows.Win32.Foundation.BOOL */
  fHasDlgVideoDisplay: boolean;
  /** Windows.Win32.Foundation.BOOL */
  fCaptureInitialized: boolean;
  /** Windows.Win32.Foundation.BOOL */
  fDriverSuppliesPalettes: boolean;
  /** Windows.Win32.Foundation.HANDLE */
  hVideoIn: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Foundation.HANDLE */
  hVideoOut: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Foundation.HANDLE */
  hVideoExtIn: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Foundation.HANDLE */
  hVideoExtOut: Uint8Array | Deno.PointerValue | null;
}

export const sizeofCAPDRIVERCAPS = 64;

export function allocCAPDRIVERCAPS(data?: Partial<CAPDRIVERCAPS>): Uint8Array {
  const buf = new Uint8Array(sizeofCAPDRIVERCAPS);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.wDeviceIndex !== undefined) view.setUint32(0, Number(data.wDeviceIndex), true);
  // 0x04: i32
  if (data?.fHasOverlay !== undefined) view.setInt32(4, Number(data.fHasOverlay), true);
  // 0x08: i32
  if (data?.fHasDlgVideoSource !== undefined) view.setInt32(8, Number(data.fHasDlgVideoSource), true);
  // 0x0c: i32
  if (data?.fHasDlgVideoFormat !== undefined) view.setInt32(12, Number(data.fHasDlgVideoFormat), true);
  // 0x10: i32
  if (data?.fHasDlgVideoDisplay !== undefined) view.setInt32(16, Number(data.fHasDlgVideoDisplay), true);
  // 0x14: i32
  if (data?.fCaptureInitialized !== undefined) view.setInt32(20, Number(data.fCaptureInitialized), true);
  // 0x18: i32
  if (data?.fDriverSuppliesPalettes !== undefined) view.setInt32(24, Number(data.fDriverSuppliesPalettes), true);
  // 0x1c: pad4
  // 0x20: pointer
  if (data?.hVideoIn !== undefined) view.setBigUint64(32, data.hVideoIn === null ? 0n : BigInt(util.toPointer(data.hVideoIn)), true);
  // 0x28: pointer
  if (data?.hVideoOut !== undefined) view.setBigUint64(40, data.hVideoOut === null ? 0n : BigInt(util.toPointer(data.hVideoOut)), true);
  // 0x30: pointer
  if (data?.hVideoExtIn !== undefined) view.setBigUint64(48, data.hVideoExtIn === null ? 0n : BigInt(util.toPointer(data.hVideoExtIn)), true);
  // 0x38: pointer
  if (data?.hVideoExtOut !== undefined) view.setBigUint64(56, data.hVideoExtOut === null ? 0n : BigInt(util.toPointer(data.hVideoExtOut)), true);
  return buf;
}

/**
 * Windows.Win32.Foundation.POINT (size: 8)
 */
export interface POINT {
  /** i32 */
  x: number;
  /** i32 */
  y: number;
}

export const sizeofPOINT = 8;

export function allocPOINT(data?: Partial<POINT>): Uint8Array {
  const buf = new Uint8Array(sizeofPOINT);
  const view = new DataView(buf.buffer);
  // 0x00: i32
  if (data?.x !== undefined) view.setInt32(0, Number(data.x), true);
  // 0x04: i32
  if (data?.y !== undefined) view.setInt32(4, Number(data.y), true);
  return buf;
}

/**
 * Windows.Win32.Media.Multimedia.CAPSTATUS (size: 88)
 */
export interface CAPSTATUS {
  /** u32 */
  uiImageWidth: number;
  /** u32 */
  uiImageHeight: number;
  /** Windows.Win32.Foundation.BOOL */
  fLiveWindow: boolean;
  /** Windows.Win32.Foundation.BOOL */
  fOverlayWindow: boolean;
  /** Windows.Win32.Foundation.BOOL */
  fScale: boolean;
  /** Windows.Win32.Foundation.POINT */
  ptScroll: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Foundation.BOOL */
  fUsingDefaultPalette: boolean;
  /** Windows.Win32.Foundation.BOOL */
  fAudioHardware: boolean;
  /** Windows.Win32.Foundation.BOOL */
  fCapFileExists: boolean;
  /** u32 */
  dwCurrentVideoFrame: number;
  /** u32 */
  dwCurrentVideoFramesDropped: number;
  /** u32 */
  dwCurrentWaveSamples: number;
  /** u32 */
  dwCurrentTimeElapsedMS: number;
  /** Windows.Win32.Graphics.Gdi.HPALETTE */
  hPalCurrent: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Foundation.BOOL */
  fCapturingNow: boolean;
  /** u32 */
  dwReturn: number;
  /** u32 */
  wNumVideoAllocated: number;
  /** u32 */
  wNumAudioAllocated: number;
}

export const sizeofCAPSTATUS = 88;

export function allocCAPSTATUS(data?: Partial<CAPSTATUS>): Uint8Array {
  const buf = new Uint8Array(sizeofCAPSTATUS);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.uiImageWidth !== undefined) view.setUint32(0, Number(data.uiImageWidth), true);
  // 0x04: u32
  if (data?.uiImageHeight !== undefined) view.setUint32(4, Number(data.uiImageHeight), true);
  // 0x08: i32
  if (data?.fLiveWindow !== undefined) view.setInt32(8, Number(data.fLiveWindow), true);
  // 0x0c: i32
  if (data?.fOverlayWindow !== undefined) view.setInt32(12, Number(data.fOverlayWindow), true);
  // 0x10: i32
  if (data?.fScale !== undefined) view.setInt32(16, Number(data.fScale), true);
  // 0x14: pad4
  // 0x18: pointer
  if (data?.ptScroll !== undefined) view.setBigUint64(24, data.ptScroll === null ? 0n : BigInt(util.toPointer(data.ptScroll)), true);
  // 0x20: i32
  if (data?.fUsingDefaultPalette !== undefined) view.setInt32(32, Number(data.fUsingDefaultPalette), true);
  // 0x24: i32
  if (data?.fAudioHardware !== undefined) view.setInt32(36, Number(data.fAudioHardware), true);
  // 0x28: i32
  if (data?.fCapFileExists !== undefined) view.setInt32(40, Number(data.fCapFileExists), true);
  // 0x2c: u32
  if (data?.dwCurrentVideoFrame !== undefined) view.setUint32(44, Number(data.dwCurrentVideoFrame), true);
  // 0x30: u32
  if (data?.dwCurrentVideoFramesDropped !== undefined) view.setUint32(48, Number(data.dwCurrentVideoFramesDropped), true);
  // 0x34: u32
  if (data?.dwCurrentWaveSamples !== undefined) view.setUint32(52, Number(data.dwCurrentWaveSamples), true);
  // 0x38: u32
  if (data?.dwCurrentTimeElapsedMS !== undefined) view.setUint32(56, Number(data.dwCurrentTimeElapsedMS), true);
  // 0x3c: pad4
  // 0x40: pointer
  if (data?.hPalCurrent !== undefined) view.setBigUint64(64, data.hPalCurrent === null ? 0n : BigInt(util.toPointer(data.hPalCurrent)), true);
  // 0x48: i32
  if (data?.fCapturingNow !== undefined) view.setInt32(72, Number(data.fCapturingNow), true);
  // 0x4c: u32
  if (data?.dwReturn !== undefined) view.setUint32(76, Number(data.dwReturn), true);
  // 0x50: u32
  if (data?.wNumVideoAllocated !== undefined) view.setUint32(80, Number(data.wNumVideoAllocated), true);
  // 0x54: u32
  if (data?.wNumAudioAllocated !== undefined) view.setUint32(84, Number(data.wNumAudioAllocated), true);
  return buf;
}

/**
 * Windows.Win32.Media.Multimedia.CAPTUREPARMS (size: 96)
 */
export interface CAPTUREPARMS {
  /** u32 */
  dwRequestMicroSecPerFrame: number;
  /** Windows.Win32.Foundation.BOOL */
  fMakeUserHitOKToCapture: boolean;
  /** u32 */
  wPercentDropForError: number;
  /** Windows.Win32.Foundation.BOOL */
  fYield: boolean;
  /** u32 */
  dwIndexSize: number;
  /** u32 */
  wChunkGranularity: number;
  /** Windows.Win32.Foundation.BOOL */
  fUsingDOSMemory: boolean;
  /** u32 */
  wNumVideoRequested: number;
  /** Windows.Win32.Foundation.BOOL */
  fCaptureAudio: boolean;
  /** u32 */
  wNumAudioRequested: number;
  /** u32 */
  vKeyAbort: number;
  /** Windows.Win32.Foundation.BOOL */
  fAbortLeftMouse: boolean;
  /** Windows.Win32.Foundation.BOOL */
  fAbortRightMouse: boolean;
  /** Windows.Win32.Foundation.BOOL */
  fLimitEnabled: boolean;
  /** u32 */
  wTimeLimit: number;
  /** Windows.Win32.Foundation.BOOL */
  fMCIControl: boolean;
  /** Windows.Win32.Foundation.BOOL */
  fStepMCIDevice: boolean;
  /** u32 */
  dwMCIStartTime: number;
  /** u32 */
  dwMCIStopTime: number;
  /** Windows.Win32.Foundation.BOOL */
  fStepCaptureAt2x: boolean;
  /** u32 */
  wStepCaptureAverageFrames: number;
  /** u32 */
  dwAudioBufferSize: number;
  /** Windows.Win32.Foundation.BOOL */
  fDisableWriteCache: boolean;
  /** u32 */
  AVStreamMaster: number;
}

export const sizeofCAPTUREPARMS = 96;

export function allocCAPTUREPARMS(data?: Partial<CAPTUREPARMS>): Uint8Array {
  const buf = new Uint8Array(sizeofCAPTUREPARMS);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.dwRequestMicroSecPerFrame !== undefined) view.setUint32(0, Number(data.dwRequestMicroSecPerFrame), true);
  // 0x04: i32
  if (data?.fMakeUserHitOKToCapture !== undefined) view.setInt32(4, Number(data.fMakeUserHitOKToCapture), true);
  // 0x08: u32
  if (data?.wPercentDropForError !== undefined) view.setUint32(8, Number(data.wPercentDropForError), true);
  // 0x0c: i32
  if (data?.fYield !== undefined) view.setInt32(12, Number(data.fYield), true);
  // 0x10: u32
  if (data?.dwIndexSize !== undefined) view.setUint32(16, Number(data.dwIndexSize), true);
  // 0x14: u32
  if (data?.wChunkGranularity !== undefined) view.setUint32(20, Number(data.wChunkGranularity), true);
  // 0x18: i32
  if (data?.fUsingDOSMemory !== undefined) view.setInt32(24, Number(data.fUsingDOSMemory), true);
  // 0x1c: u32
  if (data?.wNumVideoRequested !== undefined) view.setUint32(28, Number(data.wNumVideoRequested), true);
  // 0x20: i32
  if (data?.fCaptureAudio !== undefined) view.setInt32(32, Number(data.fCaptureAudio), true);
  // 0x24: u32
  if (data?.wNumAudioRequested !== undefined) view.setUint32(36, Number(data.wNumAudioRequested), true);
  // 0x28: u32
  if (data?.vKeyAbort !== undefined) view.setUint32(40, Number(data.vKeyAbort), true);
  // 0x2c: i32
  if (data?.fAbortLeftMouse !== undefined) view.setInt32(44, Number(data.fAbortLeftMouse), true);
  // 0x30: i32
  if (data?.fAbortRightMouse !== undefined) view.setInt32(48, Number(data.fAbortRightMouse), true);
  // 0x34: i32
  if (data?.fLimitEnabled !== undefined) view.setInt32(52, Number(data.fLimitEnabled), true);
  // 0x38: u32
  if (data?.wTimeLimit !== undefined) view.setUint32(56, Number(data.wTimeLimit), true);
  // 0x3c: i32
  if (data?.fMCIControl !== undefined) view.setInt32(60, Number(data.fMCIControl), true);
  // 0x40: i32
  if (data?.fStepMCIDevice !== undefined) view.setInt32(64, Number(data.fStepMCIDevice), true);
  // 0x44: u32
  if (data?.dwMCIStartTime !== undefined) view.setUint32(68, Number(data.dwMCIStartTime), true);
  // 0x48: u32
  if (data?.dwMCIStopTime !== undefined) view.setUint32(72, Number(data.dwMCIStopTime), true);
  // 0x4c: i32
  if (data?.fStepCaptureAt2x !== undefined) view.setInt32(76, Number(data.fStepCaptureAt2x), true);
  // 0x50: u32
  if (data?.wStepCaptureAverageFrames !== undefined) view.setUint32(80, Number(data.wStepCaptureAverageFrames), true);
  // 0x54: u32
  if (data?.dwAudioBufferSize !== undefined) view.setUint32(84, Number(data.dwAudioBufferSize), true);
  // 0x58: i32
  if (data?.fDisableWriteCache !== undefined) view.setInt32(88, Number(data.fDisableWriteCache), true);
  // 0x5c: u32
  if (data?.AVStreamMaster !== undefined) view.setUint32(92, Number(data.AVStreamMaster), true);
  return buf;
}

/**
 * Windows.Win32.Media.Multimedia.CAPINFOCHUNK (size: 24)
 */
export interface CAPINFOCHUNK {
  /** u32 */
  fccInfoID: number;
  /** ptr */
  lpData: Deno.PointerValue | Uint8Array | null;
  /** i32 */
  cbData: number;
}

export const sizeofCAPINFOCHUNK = 24;

export function allocCAPINFOCHUNK(data?: Partial<CAPINFOCHUNK>): Uint8Array {
  const buf = new Uint8Array(sizeofCAPINFOCHUNK);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.fccInfoID !== undefined) view.setUint32(0, Number(data.fccInfoID), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.lpData !== undefined) view.setBigUint64(8, data.lpData === null ? 0n : BigInt(util.toPointer(data.lpData)), true);
  // 0x10: i32
  if (data?.cbData !== undefined) view.setInt32(16, Number(data.cbData), true);
  // 0x14: pad4
  return buf;
}

/**
 * Windows.Win32.Media.Multimedia.DRVM_IOCTL_DATA (size: 8)
 */
export interface DRVM_IOCTL_DATA {
  /** u32 */
  dwSize: number;
  /** u32 */
  dwCmd: number;
}

export const sizeofDRVM_IOCTL_DATA = 8;

export function allocDRVM_IOCTL_DATA(data?: Partial<DRVM_IOCTL_DATA>): Uint8Array {
  const buf = new Uint8Array(sizeofDRVM_IOCTL_DATA);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.dwSize !== undefined) view.setUint32(0, Number(data.dwSize), true);
  // 0x04: u32
  if (data?.dwCmd !== undefined) view.setUint32(4, Number(data.dwCmd), true);
  return buf;
}

export type HWAVE = Deno.PointerValue;

/**
 * Windows.Win32.Media.Multimedia.WAVEOPENDESC (size: 48)
 */
export interface WAVEOPENDESC {
  /** Windows.Win32.Media.Audio.HWAVE */
  hWave: Uint8Array | Deno.PointerValue | null;
  /** ptr */
  lpFormat: Deno.PointerValue | Uint8Array | null;
  /** usize */
  dwCallback: Deno.PointerValue;
  /** usize */
  dwInstance: Deno.PointerValue;
  /** u32 */
  uMappedDeviceID: number;
  /** usize */
  dnDevNode: Deno.PointerValue;
}

export const sizeofWAVEOPENDESC = 48;

export function allocWAVEOPENDESC(data?: Partial<WAVEOPENDESC>): Uint8Array {
  const buf = new Uint8Array(sizeofWAVEOPENDESC);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.hWave !== undefined) view.setBigUint64(0, data.hWave === null ? 0n : BigInt(util.toPointer(data.hWave)), true);
  // 0x08: pointer
  if (data?.lpFormat !== undefined) view.setBigUint64(8, data.lpFormat === null ? 0n : BigInt(util.toPointer(data.lpFormat)), true);
  // 0x10: usize
  if (data?.dwCallback !== undefined) view.setBigUint64(16, BigInt(data.dwCallback), true);
  // 0x18: usize
  if (data?.dwInstance !== undefined) view.setBigUint64(24, BigInt(data.dwInstance), true);
  // 0x20: u32
  if (data?.uMappedDeviceID !== undefined) view.setUint32(32, Number(data.uMappedDeviceID), true);
  // 0x24: pad4
  // 0x28: usize
  if (data?.dnDevNode !== undefined) view.setBigUint64(40, BigInt(data.dnDevNode), true);
  return buf;
}

/**
 * Windows.Win32.Media.Multimedia.MIDIOPENSTRMID (size: 8)
 */
export interface MIDIOPENSTRMID {
  /** u32 */
  dwStreamID: number;
  /** u32 */
  uDeviceID: number;
}

export const sizeofMIDIOPENSTRMID = 8;

export function allocMIDIOPENSTRMID(data?: Partial<MIDIOPENSTRMID>): Uint8Array {
  const buf = new Uint8Array(sizeofMIDIOPENSTRMID);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.dwStreamID !== undefined) view.setUint32(0, Number(data.dwStreamID), true);
  // 0x04: u32
  if (data?.uDeviceID !== undefined) view.setUint32(4, Number(data.uDeviceID), true);
  return buf;
}

export type HMIXER = Deno.PointerValue;

/**
 * Windows.Win32.Media.Multimedia.MIXEROPENDESC (size: 40)
 */
export interface MIXEROPENDESC {
  /** Windows.Win32.Media.Audio.HMIXER */
  hmx: Uint8Array | Deno.PointerValue | null;
  /** ptr */
  pReserved0: Deno.PointerValue | Uint8Array | null;
  /** usize */
  dwCallback: Deno.PointerValue;
  /** usize */
  dwInstance: Deno.PointerValue;
  /** usize */
  dnDevNode: Deno.PointerValue;
}

export const sizeofMIXEROPENDESC = 40;

export function allocMIXEROPENDESC(data?: Partial<MIXEROPENDESC>): Uint8Array {
  const buf = new Uint8Array(sizeofMIXEROPENDESC);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.hmx !== undefined) view.setBigUint64(0, data.hmx === null ? 0n : BigInt(util.toPointer(data.hmx)), true);
  // 0x08: pointer
  if (data?.pReserved0 !== undefined) view.setBigUint64(8, data.pReserved0 === null ? 0n : BigInt(util.toPointer(data.pReserved0)), true);
  // 0x10: usize
  if (data?.dwCallback !== undefined) view.setBigUint64(16, BigInt(data.dwCallback), true);
  // 0x18: usize
  if (data?.dwInstance !== undefined) view.setBigUint64(24, BigInt(data.dwInstance), true);
  // 0x20: usize
  if (data?.dnDevNode !== undefined) view.setBigUint64(32, BigInt(data.dnDevNode), true);
  return buf;
}

/**
 * Windows.Win32.Media.Multimedia.TIMEREVENT (size: 24)
 */
export interface TIMEREVENT {
  /** u16 */
  wDelay: number;
  /** u16 */
  wResolution: number;
  /** Windows.Win32.Media.LPTIMECALLBACK */
  lpFunction: Uint8Array | Deno.PointerValue | null;
  /** u32 */
  dwUser: number;
  /** u16 */
  wFlags: number;
  /** u16 */
  wReserved1: number;
}

export const sizeofTIMEREVENT = 24;

export function allocTIMEREVENT(data?: Partial<TIMEREVENT>): Uint8Array {
  const buf = new Uint8Array(sizeofTIMEREVENT);
  const view = new DataView(buf.buffer);
  // 0x00: u16
  if (data?.wDelay !== undefined) view.setUint16(0, Number(data.wDelay), true);
  // 0x02: u16
  if (data?.wResolution !== undefined) view.setUint16(2, Number(data.wResolution), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.lpFunction !== undefined) view.setBigUint64(8, data.lpFunction === null ? 0n : BigInt(util.toPointer(data.lpFunction)), true);
  // 0x10: u32
  if (data?.dwUser !== undefined) view.setUint32(16, Number(data.dwUser), true);
  // 0x14: u16
  if (data?.wFlags !== undefined) view.setUint16(20, Number(data.wFlags), true);
  // 0x16: u16
  if (data?.wReserved1 !== undefined) view.setUint16(22, Number(data.wReserved1), true);
  return buf;
}

/**
 * Windows.Win32.Media.Multimedia.MCI_OPEN_DRIVER_PARMS (size: 24)
 */
export interface MCI_OPEN_DRIVER_PARMS {
  /** u32 */
  wDeviceID: number;
  /** Windows.Win32.Foundation.PWSTR */
  lpstrParams: string | null;
  /** u32 */
  wCustomCommandTable: number;
  /** u32 */
  wType: number;
}

export const sizeofMCI_OPEN_DRIVER_PARMS = 24;

export function allocMCI_OPEN_DRIVER_PARMS(data?: Partial<MCI_OPEN_DRIVER_PARMS>): Uint8Array {
  const buf = new Uint8Array(sizeofMCI_OPEN_DRIVER_PARMS);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.wDeviceID !== undefined) view.setUint32(0, Number(data.wDeviceID), true);
  // 0x04: pad4
  // 0x08: buffer
  if (data?.lpstrParams !== undefined) {
    (buf as any)._f8 = util.pwstrToFfi(data.lpstrParams);
    view.setBigUint64(8, (buf as any)._f8 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f8)), true);
  }
  // 0x10: u32
  if (data?.wCustomCommandTable !== undefined) view.setUint32(16, Number(data.wCustomCommandTable), true);
  // 0x14: u32
  if (data?.wType !== undefined) view.setUint32(20, Number(data.wType), true);
  return buf;
}

export type HINSTANCE = Deno.PointerValue;

export type HRESULT = number;

// Native Libraries

try {
  var libWINMM = Deno.dlopen("WINMM", {
    mciSendCommandA: {
      parameters: ["u32", "u32", "usize", "usize"],
      result: "u32",
    },
    mciSendCommandW: {
      parameters: ["u32", "u32", "usize", "usize"],
      result: "u32",
    },
    mciSendStringA: {
      parameters: ["buffer", "buffer", "u32", "pointer"],
      result: "u32",
    },
    mciSendStringW: {
      parameters: ["buffer", "buffer", "u32", "pointer"],
      result: "u32",
    },
    mciGetDeviceIDA: {
      parameters: ["buffer"],
      result: "u32",
    },
    mciGetDeviceIDW: {
      parameters: ["buffer"],
      result: "u32",
    },
    mciGetDeviceIDFromElementIDA: {
      parameters: ["u32", "buffer"],
      result: "u32",
    },
    mciGetDeviceIDFromElementIDW: {
      parameters: ["u32", "buffer"],
      result: "u32",
    },
    mciGetErrorStringA: {
      parameters: ["u32", "buffer", "u32"],
      result: "i32",
    },
    mciGetErrorStringW: {
      parameters: ["u32", "buffer", "u32"],
      result: "i32",
    },
    mciSetYieldProc: {
      parameters: ["u32", "pointer", "u32"],
      result: "i32",
    },
    mciGetCreatorTask: {
      parameters: ["u32"],
      result: "pointer",
    },
    mciGetYieldProc: {
      parameters: ["u32", "pointer"],
      result: "pointer",
    },
    mciGetDriverData: {
      parameters: ["u32"],
      result: "usize",
    },
    mciLoadCommandResource: {
      parameters: ["pointer", "buffer", "u32"],
      result: "u32",
    },
    mciSetDriverData: {
      parameters: ["u32", "usize"],
      result: "i32",
    },
    mciDriverYield: {
      parameters: ["u32"],
      result: "u32",
    },
    mciDriverNotify: {
      parameters: ["pointer", "u32", "u32"],
      result: "i32",
    },
    mciFreeCommandResource: {
      parameters: ["u32"],
      result: "i32",
    },
    CloseDriver: {
      parameters: ["pointer", "pointer", "pointer"],
      result: "pointer",
    },
    OpenDriver: {
      parameters: ["buffer", "buffer", "pointer"],
      result: "pointer",
    },
    SendDriverMessage: {
      parameters: ["pointer", "u32", "pointer", "pointer"],
      result: "pointer",
    },
    DrvGetModuleHandle: {
      parameters: ["pointer"],
      result: "pointer",
    },
    GetDriverModuleHandle: {
      parameters: ["pointer"],
      result: "pointer",
    },
    DefDriverProc: {
      parameters: ["usize", "pointer", "u32", "pointer", "pointer"],
      result: "pointer",
    },
    DriverCallback: {
      parameters: ["usize", "u32", "pointer", "u32", "usize", "usize", "usize"],
      result: "i32",
    },
    mmDrvInstall: {
      parameters: ["pointer", "buffer", "pointer", "u32"],
      result: "u32",
    },
    mmioStringToFOURCCA: {
      parameters: ["buffer", "u32"],
      result: "u32",
    },
    mmioStringToFOURCCW: {
      parameters: ["buffer", "u32"],
      result: "u32",
    },
    mmioInstallIOProcA: {
      parameters: ["u32", "pointer", "u32"],
      result: "pointer",
    },
    mmioInstallIOProcW: {
      parameters: ["u32", "pointer", "u32"],
      result: "pointer",
    },
    mmioOpenA: {
      parameters: ["buffer", "pointer", "u32"],
      result: "pointer",
    },
    mmioOpenW: {
      parameters: ["buffer", "pointer", "u32"],
      result: "pointer",
    },
    mmioRenameA: {
      parameters: ["buffer", "buffer", "pointer", "u32"],
      result: "u32",
    },
    mmioRenameW: {
      parameters: ["buffer", "buffer", "pointer", "u32"],
      result: "u32",
    },
    mmioClose: {
      parameters: ["pointer", "u32"],
      result: "u32",
    },
    mmioRead: {
      parameters: ["pointer", "pointer", "i32"],
      result: "i32",
    },
    mmioWrite: {
      parameters: ["pointer", "buffer", "i32"],
      result: "i32",
    },
    mmioSeek: {
      parameters: ["pointer", "i32", "i32"],
      result: "i32",
    },
    mmioGetInfo: {
      parameters: ["pointer", "pointer", "u32"],
      result: "u32",
    },
    mmioSetInfo: {
      parameters: ["pointer", "pointer", "u32"],
      result: "u32",
    },
    mmioSetBuffer: {
      parameters: ["pointer", "buffer", "i32", "u32"],
      result: "u32",
    },
    mmioFlush: {
      parameters: ["pointer", "u32"],
      result: "u32",
    },
    mmioAdvance: {
      parameters: ["pointer", "pointer", "u32"],
      result: "u32",
    },
    mmioSendMessage: {
      parameters: ["pointer", "u32", "pointer", "pointer"],
      result: "pointer",
    },
    mmioDescend: {
      parameters: ["pointer", "pointer", "pointer", "u32"],
      result: "u32",
    },
    mmioAscend: {
      parameters: ["pointer", "pointer", "u32"],
      result: "u32",
    },
    mmioCreateChunk: {
      parameters: ["pointer", "pointer", "u32"],
      result: "u32",
    },
    joyGetPosEx: {
      parameters: ["u32", "pointer"],
      result: "u32",
    },
    joyGetNumDevs: {
      parameters: [],
      result: "u32",
    },
    joyGetDevCapsA: {
      parameters: ["usize", "pointer", "u32"],
      result: "u32",
    },
    joyGetDevCapsW: {
      parameters: ["usize", "pointer", "u32"],
      result: "u32",
    },
    joyGetPos: {
      parameters: ["u32", "pointer"],
      result: "u32",
    },
    joyGetThreshold: {
      parameters: ["u32", "pointer"],
      result: "u32",
    },
    joyReleaseCapture: {
      parameters: ["u32"],
      result: "u32",
    },
    joySetCapture: {
      parameters: ["pointer", "u32", "u32", "i32"],
      result: "u32",
    },
    joySetThreshold: {
      parameters: ["u32", "u32"],
      result: "u32",
    },
    mmTaskCreate: {
      parameters: ["pointer", "pointer", "usize"],
      result: "u32",
    },
    mmTaskBlock: {
      parameters: ["u32"],
      result: "void",
    },
    mmTaskSignal: {
      parameters: ["u32"],
      result: "i32",
    },
    mmTaskYield: {
      parameters: [],
      result: "void",
    },
    mmGetCurrentTask: {
      parameters: [],
      result: "u32",
    },
  }).symbols;
} catch(e) { /* ignore */ }

try {
  var libapi_ms_win_mm_misc_l1_1_1 = Deno.dlopen("api-ms-win-mm-misc-l1-1-1", {
    sndOpenSound: {
      parameters: ["buffer", "buffer", "i32", "pointer"],
      result: "i32",
    },
  }).symbols;
} catch(e) { /* ignore */ }

try {
  var libMSVFW32 = Deno.dlopen("MSVFW32", {
    VideoForWindowsVersion: {
      parameters: [],
      result: "u32",
    },
    ICInfo: {
      parameters: ["u32", "u32", "pointer"],
      result: "i32",
    },
    ICInstall: {
      parameters: ["u32", "u32", "pointer", "buffer", "u32"],
      result: "i32",
    },
    ICRemove: {
      parameters: ["u32", "u32", "u32"],
      result: "i32",
    },
    ICGetInfo: {
      parameters: ["pointer", "pointer", "u32"],
      result: "pointer",
    },
    ICOpen: {
      parameters: ["u32", "u32", "u32"],
      result: "pointer",
    },
    ICOpenFunction: {
      parameters: ["u32", "u32", "u32", "pointer"],
      result: "pointer",
    },
    ICClose: {
      parameters: ["pointer"],
      result: "pointer",
    },
    ICSendMessage: {
      parameters: ["pointer", "u32", "usize", "usize"],
      result: "pointer",
    },
    ICCompress: {
      parameters: ["pointer", "u32", "pointer", "pointer", "pointer", "pointer", "pointer", "pointer", "i32", "u32", "u32", "pointer", "pointer"],
      result: "u32",
    },
    ICDecompress: {
      parameters: ["pointer", "u32", "pointer", "pointer", "pointer", "pointer"],
      result: "u32",
    },
    ICDrawBegin: {
      parameters: ["pointer", "u32", "pointer", "pointer", "pointer", "i32", "i32", "i32", "i32", "pointer", "i32", "i32", "i32", "i32", "u32", "u32"],
      result: "u32",
    },
    ICDraw: {
      parameters: ["pointer", "u32", "pointer", "pointer", "u32", "i32"],
      result: "u32",
    },
    ICLocate: {
      parameters: ["u32", "u32", "pointer", "pointer", "u16"],
      result: "pointer",
    },
    ICGetDisplayFormat: {
      parameters: ["pointer", "pointer", "pointer", "i32", "i32", "i32"],
      result: "pointer",
    },
    ICImageCompress: {
      parameters: ["pointer", "u32", "pointer", "pointer", "pointer", "i32", "pointer"],
      result: "pointer",
    },
    ICImageDecompress: {
      parameters: ["pointer", "u32", "pointer", "pointer", "pointer"],
      result: "pointer",
    },
    ICCompressorChoose: {
      parameters: ["pointer", "u32", "pointer", "pointer", "pointer", "buffer"],
      result: "i32",
    },
    ICSeqCompressFrameStart: {
      parameters: ["pointer", "pointer"],
      result: "i32",
    },
    ICSeqCompressFrameEnd: {
      parameters: ["pointer"],
      result: "void",
    },
    ICSeqCompressFrame: {
      parameters: ["pointer", "u32", "pointer", "pointer", "pointer"],
      result: "pointer",
    },
    ICCompressorFree: {
      parameters: ["pointer"],
      result: "void",
    },
    DrawDibOpen: {
      parameters: [],
      result: "isize",
    },
    DrawDibClose: {
      parameters: ["isize"],
      result: "i32",
    },
    DrawDibGetBuffer: {
      parameters: ["isize", "pointer", "u32", "u32"],
      result: "pointer",
    },
    DrawDibGetPalette: {
      parameters: ["isize"],
      result: "pointer",
    },
    DrawDibSetPalette: {
      parameters: ["isize", "pointer"],
      result: "i32",
    },
    DrawDibChangePalette: {
      parameters: ["isize", "i32", "i32", "pointer"],
      result: "i32",
    },
    DrawDibRealize: {
      parameters: ["isize", "pointer", "i32"],
      result: "u32",
    },
    DrawDibStart: {
      parameters: ["isize", "u32"],
      result: "i32",
    },
    DrawDibStop: {
      parameters: ["isize"],
      result: "i32",
    },
    DrawDibBegin: {
      parameters: ["isize", "pointer", "i32", "i32", "pointer", "i32", "i32", "u32"],
      result: "i32",
    },
    DrawDibDraw: {
      parameters: ["isize", "pointer", "i32", "i32", "i32", "i32", "pointer", "pointer", "i32", "i32", "i32", "i32", "u32"],
      result: "i32",
    },
    DrawDibEnd: {
      parameters: ["isize"],
      result: "i32",
    },
    DrawDibTime: {
      parameters: ["isize", "pointer"],
      result: "i32",
    },
    DrawDibProfileDisplay: {
      parameters: ["pointer"],
      result: "pointer",
    },
    MCIWndCreateA: {
      parameters: ["pointer", "pointer", "u32", "buffer"],
      result: "pointer",
    },
    MCIWndCreateW: {
      parameters: ["pointer", "pointer", "u32", "buffer"],
      result: "pointer",
    },
    MCIWndRegisterClass: {
      parameters: [],
      result: "i32",
    },
    GetOpenFileNamePreviewA: {
      parameters: ["pointer"],
      result: "i32",
    },
    GetSaveFileNamePreviewA: {
      parameters: ["pointer"],
      result: "i32",
    },
    GetOpenFileNamePreviewW: {
      parameters: ["pointer"],
      result: "i32",
    },
    GetSaveFileNamePreviewW: {
      parameters: ["pointer"],
      result: "i32",
    },
  }).symbols;
} catch(e) { /* ignore */ }

try {
  var libAVIFIL32 = Deno.dlopen("AVIFIL32", {
    AVIFileInit: {
      parameters: [],
      result: "void",
    },
    AVIFileExit: {
      parameters: [],
      result: "void",
    },
    AVIFileAddRef: {
      parameters: ["pointer"],
      result: "u32",
    },
    AVIFileRelease: {
      parameters: ["pointer"],
      result: "u32",
    },
    AVIFileOpenA: {
      parameters: ["pointer", "buffer", "u32", "pointer"],
      result: "pointer",
    },
    AVIFileOpenW: {
      parameters: ["pointer", "buffer", "u32", "pointer"],
      result: "pointer",
    },
    AVIFileInfoW: {
      parameters: ["pointer", "pointer", "i32"],
      result: "pointer",
    },
    AVIFileInfoA: {
      parameters: ["pointer", "pointer", "i32"],
      result: "pointer",
    },
    AVIFileGetStream: {
      parameters: ["pointer", "pointer", "u32", "i32"],
      result: "pointer",
    },
    AVIFileCreateStreamW: {
      parameters: ["pointer", "pointer", "pointer"],
      result: "pointer",
    },
    AVIFileCreateStreamA: {
      parameters: ["pointer", "pointer", "pointer"],
      result: "pointer",
    },
    AVIFileWriteData: {
      parameters: ["pointer", "u32", "pointer", "i32"],
      result: "pointer",
    },
    AVIFileReadData: {
      parameters: ["pointer", "u32", "pointer", "pointer"],
      result: "pointer",
    },
    AVIFileEndRecord: {
      parameters: ["pointer"],
      result: "pointer",
    },
    AVIStreamAddRef: {
      parameters: ["pointer"],
      result: "u32",
    },
    AVIStreamRelease: {
      parameters: ["pointer"],
      result: "u32",
    },
    AVIStreamInfoW: {
      parameters: ["pointer", "pointer", "i32"],
      result: "pointer",
    },
    AVIStreamInfoA: {
      parameters: ["pointer", "pointer", "i32"],
      result: "pointer",
    },
    AVIStreamFindSample: {
      parameters: ["pointer", "i32", "i32"],
      result: "i32",
    },
    AVIStreamReadFormat: {
      parameters: ["pointer", "i32", "pointer", "pointer"],
      result: "pointer",
    },
    AVIStreamSetFormat: {
      parameters: ["pointer", "i32", "pointer", "i32"],
      result: "pointer",
    },
    AVIStreamReadData: {
      parameters: ["pointer", "u32", "pointer", "pointer"],
      result: "pointer",
    },
    AVIStreamWriteData: {
      parameters: ["pointer", "u32", "pointer", "i32"],
      result: "pointer",
    },
    AVIStreamRead: {
      parameters: ["pointer", "i32", "i32", "pointer", "i32", "pointer", "pointer"],
      result: "pointer",
    },
    AVIStreamWrite: {
      parameters: ["pointer", "i32", "i32", "pointer", "i32", "u32", "pointer", "pointer"],
      result: "pointer",
    },
    AVIStreamStart: {
      parameters: ["pointer"],
      result: "i32",
    },
    AVIStreamLength: {
      parameters: ["pointer"],
      result: "i32",
    },
    AVIStreamTimeToSample: {
      parameters: ["pointer", "i32"],
      result: "i32",
    },
    AVIStreamSampleToTime: {
      parameters: ["pointer", "i32"],
      result: "i32",
    },
    AVIStreamBeginStreaming: {
      parameters: ["pointer", "i32", "i32", "i32"],
      result: "pointer",
    },
    AVIStreamEndStreaming: {
      parameters: ["pointer"],
      result: "pointer",
    },
    AVIStreamGetFrameOpen: {
      parameters: ["pointer", "pointer"],
      result: "pointer",
    },
    AVIStreamGetFrame: {
      parameters: ["pointer", "i32"],
      result: "pointer",
    },
    AVIStreamGetFrameClose: {
      parameters: ["pointer"],
      result: "pointer",
    },
    AVIStreamOpenFromFileA: {
      parameters: ["pointer", "buffer", "u32", "i32", "u32", "pointer"],
      result: "pointer",
    },
    AVIStreamOpenFromFileW: {
      parameters: ["pointer", "buffer", "u32", "i32", "u32", "pointer"],
      result: "pointer",
    },
    AVIStreamCreate: {
      parameters: ["pointer", "i32", "i32", "pointer"],
      result: "pointer",
    },
    AVIMakeCompressedStream: {
      parameters: ["pointer", "pointer", "pointer", "pointer"],
      result: "pointer",
    },
    AVISaveA: {
      parameters: ["buffer", "pointer", "pointer", "i32", "pointer", "pointer"],
      result: "pointer",
    },
    AVISaveVA: {
      parameters: ["buffer", "pointer", "pointer", "i32", "pointer", "pointer"],
      result: "pointer",
    },
    AVISaveW: {
      parameters: ["buffer", "pointer", "pointer", "i32", "pointer", "pointer"],
      result: "pointer",
    },
    AVISaveVW: {
      parameters: ["buffer", "pointer", "pointer", "i32", "pointer", "pointer"],
      result: "pointer",
    },
    AVISaveOptions: {
      parameters: ["pointer", "u32", "i32", "pointer", "pointer"],
      result: "isize",
    },
    AVISaveOptionsFree: {
      parameters: ["i32", "pointer"],
      result: "pointer",
    },
    AVIBuildFilterW: {
      parameters: ["buffer", "i32", "i32"],
      result: "pointer",
    },
    AVIBuildFilterA: {
      parameters: ["buffer", "i32", "i32"],
      result: "pointer",
    },
    AVIMakeFileFromStreams: {
      parameters: ["pointer", "i32", "pointer"],
      result: "pointer",
    },
    AVIMakeStreamFromClipboard: {
      parameters: ["u32", "pointer", "pointer"],
      result: "pointer",
    },
    AVIPutFileOnClipboard: {
      parameters: ["pointer"],
      result: "pointer",
    },
    AVIGetFromClipboard: {
      parameters: ["pointer"],
      result: "pointer",
    },
    AVIClearClipboard: {
      parameters: [],
      result: "pointer",
    },
    CreateEditableStream: {
      parameters: ["pointer", "pointer"],
      result: "pointer",
    },
    EditStreamCut: {
      parameters: ["pointer", "pointer", "pointer", "pointer"],
      result: "pointer",
    },
    EditStreamCopy: {
      parameters: ["pointer", "pointer", "pointer", "pointer"],
      result: "pointer",
    },
    EditStreamPaste: {
      parameters: ["pointer", "pointer", "pointer", "pointer", "i32", "i32"],
      result: "pointer",
    },
    EditStreamClone: {
      parameters: ["pointer", "pointer"],
      result: "pointer",
    },
    EditStreamSetNameA: {
      parameters: ["pointer", "buffer"],
      result: "pointer",
    },
    EditStreamSetNameW: {
      parameters: ["pointer", "buffer"],
      result: "pointer",
    },
    EditStreamSetInfoW: {
      parameters: ["pointer", "pointer", "i32"],
      result: "pointer",
    },
    EditStreamSetInfoA: {
      parameters: ["pointer", "pointer", "i32"],
      result: "pointer",
    },
  }).symbols;
} catch(e) { /* ignore */ }

try {
  var libAVICAP32 = Deno.dlopen("AVICAP32", {
    capCreateCaptureWindowA: {
      parameters: ["buffer", "u32", "i32", "i32", "i32", "i32", "pointer", "i32"],
      result: "pointer",
    },
    capGetDriverDescriptionA: {
      parameters: ["u32", "buffer", "i32", "buffer", "i32"],
      result: "i32",
    },
    capCreateCaptureWindowW: {
      parameters: ["buffer", "u32", "i32", "i32", "i32", "i32", "pointer", "i32"],
      result: "pointer",
    },
    capGetDriverDescriptionW: {
      parameters: ["u32", "buffer", "i32", "buffer", "i32"],
      result: "i32",
    },
  }).symbols;
} catch(e) { /* ignore */ }

// Symbols

export function mciSendCommandA(
  mciId: number /* u32 */,
  uMsg: number /* u32 */,
  dwParam1: Deno.PointerValue /* usize */,
  dwParam2: Deno.PointerValue /* usize */,
): number /* u32 */ {
  return libWINMM.mciSendCommandA(mciId, uMsg, dwParam1, dwParam2);
}

export function mciSendCommandW(
  mciId: number /* u32 */,
  uMsg: number /* u32 */,
  dwParam1: Deno.PointerValue /* usize */,
  dwParam2: Deno.PointerValue /* usize */,
): number /* u32 */ {
  return libWINMM.mciSendCommandW(mciId, uMsg, dwParam1, dwParam2);
}

export function mciSendStringA(
  lpstrCommand: string | null /* Windows.Win32.Foundation.PSTR */,
  lpstrReturnString: string | null /* Windows.Win32.Foundation.PSTR */,
  uReturnLength: number /* u32 */,
  hwndCallback: Deno.PointerValue | null /* Windows.Win32.Foundation.HWND */,
): number /* u32 */ {
  return libWINMM.mciSendStringA(util.pstrToFfi(lpstrCommand), util.pstrToFfi(lpstrReturnString), uReturnLength, util.hwndToFfi(hwndCallback));
}

export function mciSendStringW(
  lpstrCommand: string | null /* Windows.Win32.Foundation.PWSTR */,
  lpstrReturnString: string | null /* Windows.Win32.Foundation.PWSTR */,
  uReturnLength: number /* u32 */,
  hwndCallback: Deno.PointerValue | null /* Windows.Win32.Foundation.HWND */,
): number /* u32 */ {
  return libWINMM.mciSendStringW(util.pwstrToFfi(lpstrCommand), util.pwstrToFfi(lpstrReturnString), uReturnLength, util.hwndToFfi(hwndCallback));
}

export function mciGetDeviceIDA(
  pszDevice: string | null /* Windows.Win32.Foundation.PSTR */,
): number /* u32 */ {
  return libWINMM.mciGetDeviceIDA(util.pstrToFfi(pszDevice));
}

export function mciGetDeviceIDW(
  pszDevice: string | null /* Windows.Win32.Foundation.PWSTR */,
): number /* u32 */ {
  return libWINMM.mciGetDeviceIDW(util.pwstrToFfi(pszDevice));
}

export function mciGetDeviceIDFromElementIDA(
  dwElementID: number /* u32 */,
  lpstrType: string | null /* Windows.Win32.Foundation.PSTR */,
): number /* u32 */ {
  return libWINMM.mciGetDeviceIDFromElementIDA(dwElementID, util.pstrToFfi(lpstrType));
}

export function mciGetDeviceIDFromElementIDW(
  dwElementID: number /* u32 */,
  lpstrType: string | null /* Windows.Win32.Foundation.PWSTR */,
): number /* u32 */ {
  return libWINMM.mciGetDeviceIDFromElementIDW(dwElementID, util.pwstrToFfi(lpstrType));
}

export function mciGetErrorStringA(
  mcierr: number /* u32 */,
  pszText: string | null /* Windows.Win32.Foundation.PSTR */,
  cchText: number /* u32 */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libWINMM.mciGetErrorStringA(mcierr, util.pstrToFfi(pszText), cchText));
}

export function mciGetErrorStringW(
  mcierr: number /* u32 */,
  pszText: string | null /* Windows.Win32.Foundation.PWSTR */,
  cchText: number /* u32 */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libWINMM.mciGetErrorStringW(mcierr, util.pwstrToFfi(pszText), cchText));
}

export function mciSetYieldProc(
  mciId: number /* u32 */,
  fpYieldProc: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Media.Multimedia.YIELDPROC */,
  dwYieldData: number /* u32 */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libWINMM.mciSetYieldProc(mciId, util.toPointer(fpYieldProc), dwYieldData));
}

export function mciGetCreatorTask(
  mciId: number /* u32 */,
): Deno.PointerValue | null /* Windows.Win32.Media.HTASK */ {
  return util.pointerFromFfi(libWINMM.mciGetCreatorTask(mciId));
}

export function mciGetYieldProc(
  mciId: number /* u32 */,
  pdwYieldData: Deno.PointerValue | Uint8Array | null /* ptr */,
): Deno.PointerValue | null /* Windows.Win32.Media.Multimedia.YIELDPROC */ {
  return util.pointerFromFfi(libWINMM.mciGetYieldProc(mciId, util.toPointer(pdwYieldData)));
}

export function mciGetDriverData(
  wDeviceID: number /* u32 */,
): Deno.PointerValue /* usize */ {
  return libWINMM.mciGetDriverData(wDeviceID);
}

export function mciLoadCommandResource(
  hInstance: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Foundation.HANDLE */,
  lpResName: string | null /* Windows.Win32.Foundation.PWSTR */,
  wType: number /* u32 */,
): number /* u32 */ {
  return libWINMM.mciLoadCommandResource(util.toPointer(hInstance), util.pwstrToFfi(lpResName), wType);
}

export function mciSetDriverData(
  wDeviceID: number /* u32 */,
  dwData: Deno.PointerValue /* usize */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libWINMM.mciSetDriverData(wDeviceID, dwData));
}

export function mciDriverYield(
  wDeviceID: number /* u32 */,
): number /* u32 */ {
  return libWINMM.mciDriverYield(wDeviceID);
}

export function mciDriverNotify(
  hwndCallback: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Foundation.HANDLE */,
  wDeviceID: number /* u32 */,
  uStatus: number /* u32 */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libWINMM.mciDriverNotify(util.toPointer(hwndCallback), wDeviceID, uStatus));
}

export function mciFreeCommandResource(
  wTable: number /* u32 */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libWINMM.mciFreeCommandResource(wTable));
}

export function CloseDriver(
  hDriver: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Media.Multimedia.HDRVR */,
  lParam1: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Foundation.LPARAM */,
  lParam2: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Foundation.LPARAM */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.LRESULT */ {
  return util.pointerFromFfi(libWINMM.CloseDriver(util.toPointer(hDriver), util.toPointer(lParam1), util.toPointer(lParam2)));
}

export function OpenDriver(
  szDriverName: string | null /* Windows.Win32.Foundation.PWSTR */,
  szSectionName: string | null /* Windows.Win32.Foundation.PWSTR */,
  lParam2: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Foundation.LPARAM */,
): Deno.PointerValue | null /* Windows.Win32.Media.Multimedia.HDRVR */ {
  return util.pointerFromFfi(libWINMM.OpenDriver(util.pwstrToFfi(szDriverName), util.pwstrToFfi(szSectionName), util.toPointer(lParam2)));
}

export function SendDriverMessage(
  hDriver: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Media.Multimedia.HDRVR */,
  message: number /* u32 */,
  lParam1: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Foundation.LPARAM */,
  lParam2: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Foundation.LPARAM */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.LRESULT */ {
  return util.pointerFromFfi(libWINMM.SendDriverMessage(util.toPointer(hDriver), message, util.toPointer(lParam1), util.toPointer(lParam2)));
}

export function DrvGetModuleHandle(
  hDriver: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Media.Multimedia.HDRVR */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HINSTANCE */ {
  return util.pointerFromFfi(libWINMM.DrvGetModuleHandle(util.toPointer(hDriver)));
}

export function GetDriverModuleHandle(
  hDriver: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Media.Multimedia.HDRVR */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HINSTANCE */ {
  return util.pointerFromFfi(libWINMM.GetDriverModuleHandle(util.toPointer(hDriver)));
}

export function DefDriverProc(
  dwDriverIdentifier: Deno.PointerValue /* usize */,
  hdrvr: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Media.Multimedia.HDRVR */,
  uMsg: number /* u32 */,
  lParam1: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Foundation.LPARAM */,
  lParam2: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Foundation.LPARAM */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.LRESULT */ {
  return util.pointerFromFfi(libWINMM.DefDriverProc(dwDriverIdentifier, util.toPointer(hdrvr), uMsg, util.toPointer(lParam1), util.toPointer(lParam2)));
}

export function DriverCallback(
  dwCallback: Deno.PointerValue /* usize */,
  dwFlags: number /* u32 */,
  hDevice: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Media.Multimedia.HDRVR */,
  dwMsg: number /* u32 */,
  dwUser: Deno.PointerValue /* usize */,
  dwParam1: Deno.PointerValue /* usize */,
  dwParam2: Deno.PointerValue /* usize */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libWINMM.DriverCallback(dwCallback, dwFlags, util.toPointer(hDevice), dwMsg, dwUser, dwParam1, dwParam2));
}

export function sndOpenSound(
  EventName: string | null /* Windows.Win32.Foundation.PWSTR */,
  AppName: string | null /* Windows.Win32.Foundation.PWSTR */,
  Flags: number /* i32 */,
  FileHandle: Deno.PointerValue | Uint8Array | null /* ptr */,
): number /* i32 */ {
  return libapi_ms_win_mm_misc_l1_1_1.sndOpenSound(util.pwstrToFfi(EventName), util.pwstrToFfi(AppName), Flags, util.toPointer(FileHandle));
}

export function mmDrvInstall(
  hDriver: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Media.Multimedia.HDRVR */,
  wszDrvEntry: string | null /* Windows.Win32.Foundation.PWSTR */,
  drvMessage: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Media.Multimedia.DRIVERMSGPROC */,
  wFlags: number /* u32 */,
): number /* u32 */ {
  return libWINMM.mmDrvInstall(util.toPointer(hDriver), util.pwstrToFfi(wszDrvEntry), util.toPointer(drvMessage), wFlags);
}

export function mmioStringToFOURCCA(
  sz: string | null /* Windows.Win32.Foundation.PSTR */,
  uFlags: number /* u32 */,
): number /* u32 */ {
  return libWINMM.mmioStringToFOURCCA(util.pstrToFfi(sz), uFlags);
}

export function mmioStringToFOURCCW(
  sz: string | null /* Windows.Win32.Foundation.PWSTR */,
  uFlags: number /* u32 */,
): number /* u32 */ {
  return libWINMM.mmioStringToFOURCCW(util.pwstrToFfi(sz), uFlags);
}

export function mmioInstallIOProcA(
  fccIOProc: number /* u32 */,
  pIOProc: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Media.Multimedia.LPMMIOPROC */,
  dwFlags: number /* u32 */,
): Deno.PointerValue | null /* Windows.Win32.Media.Multimedia.LPMMIOPROC */ {
  return util.pointerFromFfi(libWINMM.mmioInstallIOProcA(fccIOProc, util.toPointer(pIOProc), dwFlags));
}

export function mmioInstallIOProcW(
  fccIOProc: number /* u32 */,
  pIOProc: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Media.Multimedia.LPMMIOPROC */,
  dwFlags: number /* u32 */,
): Deno.PointerValue | null /* Windows.Win32.Media.Multimedia.LPMMIOPROC */ {
  return util.pointerFromFfi(libWINMM.mmioInstallIOProcW(fccIOProc, util.toPointer(pIOProc), dwFlags));
}

export function mmioOpenA(
  pszFileName: string | null /* Windows.Win32.Foundation.PSTR */,
  pmmioinfo: Deno.PointerValue | Uint8Array | null /* ptr */,
  fdwOpen: number /* u32 */,
): Deno.PointerValue | null /* Windows.Win32.Media.Multimedia.HMMIO */ {
  return util.pointerFromFfi(libWINMM.mmioOpenA(util.pstrToFfi(pszFileName), util.toPointer(pmmioinfo), fdwOpen));
}

export function mmioOpenW(
  pszFileName: string | null /* Windows.Win32.Foundation.PWSTR */,
  pmmioinfo: Deno.PointerValue | Uint8Array | null /* ptr */,
  fdwOpen: number /* u32 */,
): Deno.PointerValue | null /* Windows.Win32.Media.Multimedia.HMMIO */ {
  return util.pointerFromFfi(libWINMM.mmioOpenW(util.pwstrToFfi(pszFileName), util.toPointer(pmmioinfo), fdwOpen));
}

export function mmioRenameA(
  pszFileName: string | null /* Windows.Win32.Foundation.PSTR */,
  pszNewFileName: string | null /* Windows.Win32.Foundation.PSTR */,
  pmmioinfo: Deno.PointerValue | Uint8Array | null /* ptr */,
  fdwRename: number /* u32 */,
): number /* u32 */ {
  return libWINMM.mmioRenameA(util.pstrToFfi(pszFileName), util.pstrToFfi(pszNewFileName), util.toPointer(pmmioinfo), fdwRename);
}

export function mmioRenameW(
  pszFileName: string | null /* Windows.Win32.Foundation.PWSTR */,
  pszNewFileName: string | null /* Windows.Win32.Foundation.PWSTR */,
  pmmioinfo: Deno.PointerValue | Uint8Array | null /* ptr */,
  fdwRename: number /* u32 */,
): number /* u32 */ {
  return libWINMM.mmioRenameW(util.pwstrToFfi(pszFileName), util.pwstrToFfi(pszNewFileName), util.toPointer(pmmioinfo), fdwRename);
}

export function mmioClose(
  hmmio: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Media.Multimedia.HMMIO */,
  fuClose: number /* u32 */,
): number /* u32 */ {
  return libWINMM.mmioClose(util.toPointer(hmmio), fuClose);
}

export function mmioRead(
  hmmio: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Media.Multimedia.HMMIO */,
  pch: Deno.PointerValue | Uint8Array | null /* ptr */,
  cch: number /* i32 */,
): number /* i32 */ {
  return libWINMM.mmioRead(util.toPointer(hmmio), util.toPointer(pch), cch);
}

export function mmioWrite(
  hmmio: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Media.Multimedia.HMMIO */,
  pch: string | null /* Windows.Win32.Foundation.PSTR */,
  cch: number /* i32 */,
): number /* i32 */ {
  return libWINMM.mmioWrite(util.toPointer(hmmio), util.pstrToFfi(pch), cch);
}

export function mmioSeek(
  hmmio: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Media.Multimedia.HMMIO */,
  lOffset: number /* i32 */,
  iOrigin: number /* i32 */,
): number /* i32 */ {
  return libWINMM.mmioSeek(util.toPointer(hmmio), lOffset, iOrigin);
}

export function mmioGetInfo(
  hmmio: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Media.Multimedia.HMMIO */,
  pmmioinfo: Deno.PointerValue | Uint8Array | null /* ptr */,
  fuInfo: number /* u32 */,
): number /* u32 */ {
  return libWINMM.mmioGetInfo(util.toPointer(hmmio), util.toPointer(pmmioinfo), fuInfo);
}

export function mmioSetInfo(
  hmmio: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Media.Multimedia.HMMIO */,
  pmmioinfo: Deno.PointerValue | Uint8Array | null /* ptr */,
  fuInfo: number /* u32 */,
): number /* u32 */ {
  return libWINMM.mmioSetInfo(util.toPointer(hmmio), util.toPointer(pmmioinfo), fuInfo);
}

export function mmioSetBuffer(
  hmmio: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Media.Multimedia.HMMIO */,
  pchBuffer: string | null /* Windows.Win32.Foundation.PSTR */,
  cchBuffer: number /* i32 */,
  fuBuffer: number /* u32 */,
): number /* u32 */ {
  return libWINMM.mmioSetBuffer(util.toPointer(hmmio), util.pstrToFfi(pchBuffer), cchBuffer, fuBuffer);
}

export function mmioFlush(
  hmmio: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Media.Multimedia.HMMIO */,
  fuFlush: number /* u32 */,
): number /* u32 */ {
  return libWINMM.mmioFlush(util.toPointer(hmmio), fuFlush);
}

export function mmioAdvance(
  hmmio: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Media.Multimedia.HMMIO */,
  pmmioinfo: Deno.PointerValue | Uint8Array | null /* ptr */,
  fuAdvance: number /* u32 */,
): number /* u32 */ {
  return libWINMM.mmioAdvance(util.toPointer(hmmio), util.toPointer(pmmioinfo), fuAdvance);
}

export function mmioSendMessage(
  hmmio: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Media.Multimedia.HMMIO */,
  uMsg: number /* u32 */,
  lParam1: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Foundation.LPARAM */,
  lParam2: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Foundation.LPARAM */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.LRESULT */ {
  return util.pointerFromFfi(libWINMM.mmioSendMessage(util.toPointer(hmmio), uMsg, util.toPointer(lParam1), util.toPointer(lParam2)));
}

export function mmioDescend(
  hmmio: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Media.Multimedia.HMMIO */,
  pmmcki: Deno.PointerValue | Uint8Array | null /* ptr */,
  pmmckiParent: Deno.PointerValue | Uint8Array | null /* ptr */,
  fuDescend: number /* u32 */,
): number /* u32 */ {
  return libWINMM.mmioDescend(util.toPointer(hmmio), util.toPointer(pmmcki), util.toPointer(pmmckiParent), fuDescend);
}

export function mmioAscend(
  hmmio: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Media.Multimedia.HMMIO */,
  pmmcki: Deno.PointerValue | Uint8Array | null /* ptr */,
  fuAscend: number /* u32 */,
): number /* u32 */ {
  return libWINMM.mmioAscend(util.toPointer(hmmio), util.toPointer(pmmcki), fuAscend);
}

export function mmioCreateChunk(
  hmmio: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Media.Multimedia.HMMIO */,
  pmmcki: Deno.PointerValue | Uint8Array | null /* ptr */,
  fuCreate: number /* u32 */,
): number /* u32 */ {
  return libWINMM.mmioCreateChunk(util.toPointer(hmmio), util.toPointer(pmmcki), fuCreate);
}

export function joyGetPosEx(
  uJoyID: number /* u32 */,
  pji: Deno.PointerValue | Uint8Array | null /* ptr */,
): number /* u32 */ {
  return libWINMM.joyGetPosEx(uJoyID, util.toPointer(pji));
}

export function joyGetNumDevs(): number /* u32 */ {
  return libWINMM.joyGetNumDevs();
}

export function joyGetDevCapsA(
  uJoyID: Deno.PointerValue /* usize */,
  pjc: Deno.PointerValue | Uint8Array | null /* ptr */,
  cbjc: number /* u32 */,
): number /* u32 */ {
  return libWINMM.joyGetDevCapsA(uJoyID, util.toPointer(pjc), cbjc);
}

export function joyGetDevCapsW(
  uJoyID: Deno.PointerValue /* usize */,
  pjc: Deno.PointerValue | Uint8Array | null /* ptr */,
  cbjc: number /* u32 */,
): number /* u32 */ {
  return libWINMM.joyGetDevCapsW(uJoyID, util.toPointer(pjc), cbjc);
}

export function joyGetPos(
  uJoyID: number /* u32 */,
  pji: Deno.PointerValue | Uint8Array | null /* ptr */,
): number /* u32 */ {
  return libWINMM.joyGetPos(uJoyID, util.toPointer(pji));
}

export function joyGetThreshold(
  uJoyID: number /* u32 */,
  puThreshold: Deno.PointerValue | Uint8Array | null /* ptr */,
): number /* u32 */ {
  return libWINMM.joyGetThreshold(uJoyID, util.toPointer(puThreshold));
}

export function joyReleaseCapture(
  uJoyID: number /* u32 */,
): number /* u32 */ {
  return libWINMM.joyReleaseCapture(uJoyID);
}

export function joySetCapture(
  hwnd: Deno.PointerValue | null /* Windows.Win32.Foundation.HWND */,
  uJoyID: number /* u32 */,
  uPeriod: number /* u32 */,
  fChanged: boolean /* Windows.Win32.Foundation.BOOL */,
): number /* u32 */ {
  return libWINMM.joySetCapture(util.hwndToFfi(hwnd), uJoyID, uPeriod, util.boolToFfi(fChanged));
}

export function joySetThreshold(
  uJoyID: number /* u32 */,
  uThreshold: number /* u32 */,
): number /* u32 */ {
  return libWINMM.joySetThreshold(uJoyID, uThreshold);
}

export function VideoForWindowsVersion(): number /* u32 */ {
  return libMSVFW32.VideoForWindowsVersion();
}

export function ICInfo(
  fccType: number /* u32 */,
  fccHandler: number /* u32 */,
  lpicinfo: Deno.PointerValue | Uint8Array | null /* ptr */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libMSVFW32.ICInfo(fccType, fccHandler, util.toPointer(lpicinfo)));
}

export function ICInstall(
  fccType: number /* u32 */,
  fccHandler: number /* u32 */,
  lParam: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Foundation.LPARAM */,
  szDesc: string | null /* Windows.Win32.Foundation.PSTR */,
  wFlags: number /* u32 */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libMSVFW32.ICInstall(fccType, fccHandler, util.toPointer(lParam), util.pstrToFfi(szDesc), wFlags));
}

export function ICRemove(
  fccType: number /* u32 */,
  fccHandler: number /* u32 */,
  wFlags: number /* u32 */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libMSVFW32.ICRemove(fccType, fccHandler, wFlags));
}

export function ICGetInfo(
  hic: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Media.Multimedia.HIC */,
  picinfo: Deno.PointerValue | Uint8Array | null /* ptr */,
  cb: number /* u32 */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.LRESULT */ {
  return util.pointerFromFfi(libMSVFW32.ICGetInfo(util.toPointer(hic), util.toPointer(picinfo), cb));
}

export function ICOpen(
  fccType: number /* u32 */,
  fccHandler: number /* u32 */,
  wMode: number /* u32 */,
): Deno.PointerValue | null /* Windows.Win32.Media.Multimedia.HIC */ {
  return util.pointerFromFfi(libMSVFW32.ICOpen(fccType, fccHandler, wMode));
}

export function ICOpenFunction(
  fccType: number /* u32 */,
  fccHandler: number /* u32 */,
  wMode: number /* u32 */,
  lpfnHandler: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Foundation.FARPROC */,
): Deno.PointerValue | null /* Windows.Win32.Media.Multimedia.HIC */ {
  return util.pointerFromFfi(libMSVFW32.ICOpenFunction(fccType, fccHandler, wMode, util.toPointer(lpfnHandler)));
}

export function ICClose(
  hic: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Media.Multimedia.HIC */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.LRESULT */ {
  return util.pointerFromFfi(libMSVFW32.ICClose(util.toPointer(hic)));
}

export function ICSendMessage(
  hic: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Media.Multimedia.HIC */,
  msg: number /* u32 */,
  dw1: Deno.PointerValue /* usize */,
  dw2: Deno.PointerValue /* usize */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.LRESULT */ {
  return util.pointerFromFfi(libMSVFW32.ICSendMessage(util.toPointer(hic), msg, dw1, dw2));
}

export function ICCompress(
  hic: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Media.Multimedia.HIC */,
  dwFlags: number /* u32 */,
  lpbiOutput: Deno.PointerValue | Uint8Array | null /* ptr */,
  lpData: Deno.PointerValue | Uint8Array | null /* ptr */,
  lpbiInput: Deno.PointerValue | Uint8Array | null /* ptr */,
  lpBits: Deno.PointerValue | Uint8Array | null /* ptr */,
  lpckid: Deno.PointerValue | Uint8Array | null /* ptr */,
  lpdwFlags: Deno.PointerValue | Uint8Array | null /* ptr */,
  lFrameNum: number /* i32 */,
  dwFrameSize: number /* u32 */,
  dwQuality: number /* u32 */,
  lpbiPrev: Deno.PointerValue | Uint8Array | null /* ptr */,
  lpPrev: Deno.PointerValue | Uint8Array | null /* ptr */,
): number /* u32 */ {
  return libMSVFW32.ICCompress(util.toPointer(hic), dwFlags, util.toPointer(lpbiOutput), util.toPointer(lpData), util.toPointer(lpbiInput), util.toPointer(lpBits), util.toPointer(lpckid), util.toPointer(lpdwFlags), lFrameNum, dwFrameSize, dwQuality, util.toPointer(lpbiPrev), util.toPointer(lpPrev));
}

export function ICDecompress(
  hic: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Media.Multimedia.HIC */,
  dwFlags: number /* u32 */,
  lpbiFormat: Deno.PointerValue | Uint8Array | null /* ptr */,
  lpData: Deno.PointerValue | Uint8Array | null /* ptr */,
  lpbi: Deno.PointerValue | Uint8Array | null /* ptr */,
  lpBits: Deno.PointerValue | Uint8Array | null /* ptr */,
): number /* u32 */ {
  return libMSVFW32.ICDecompress(util.toPointer(hic), dwFlags, util.toPointer(lpbiFormat), util.toPointer(lpData), util.toPointer(lpbi), util.toPointer(lpBits));
}

export function ICDrawBegin(
  hic: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Media.Multimedia.HIC */,
  dwFlags: number /* u32 */,
  hpal: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Graphics.Gdi.HPALETTE */,
  hwnd: Deno.PointerValue | null /* Windows.Win32.Foundation.HWND */,
  hdc: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Graphics.Gdi.HDC */,
  xDst: number /* i32 */,
  yDst: number /* i32 */,
  dxDst: number /* i32 */,
  dyDst: number /* i32 */,
  lpbi: Deno.PointerValue | Uint8Array | null /* ptr */,
  xSrc: number /* i32 */,
  ySrc: number /* i32 */,
  dxSrc: number /* i32 */,
  dySrc: number /* i32 */,
  dwRate: number /* u32 */,
  dwScale: number /* u32 */,
): number /* u32 */ {
  return libMSVFW32.ICDrawBegin(util.toPointer(hic), dwFlags, util.toPointer(hpal), util.hwndToFfi(hwnd), util.toPointer(hdc), xDst, yDst, dxDst, dyDst, util.toPointer(lpbi), xSrc, ySrc, dxSrc, dySrc, dwRate, dwScale);
}

export function ICDraw(
  hic: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Media.Multimedia.HIC */,
  dwFlags: number /* u32 */,
  lpFormat: Deno.PointerValue | Uint8Array | null /* ptr */,
  lpData: Deno.PointerValue | Uint8Array | null /* ptr */,
  cbData: number /* u32 */,
  lTime: number /* i32 */,
): number /* u32 */ {
  return libMSVFW32.ICDraw(util.toPointer(hic), dwFlags, util.toPointer(lpFormat), util.toPointer(lpData), cbData, lTime);
}

export function ICLocate(
  fccType: number /* u32 */,
  fccHandler: number /* u32 */,
  lpbiIn: Deno.PointerValue | Uint8Array | null /* ptr */,
  lpbiOut: Deno.PointerValue | Uint8Array | null /* ptr */,
  wFlags: number /* u16 */,
): Deno.PointerValue | null /* Windows.Win32.Media.Multimedia.HIC */ {
  return util.pointerFromFfi(libMSVFW32.ICLocate(fccType, fccHandler, util.toPointer(lpbiIn), util.toPointer(lpbiOut), wFlags));
}

export function ICGetDisplayFormat(
  hic: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Media.Multimedia.HIC */,
  lpbiIn: Deno.PointerValue | Uint8Array | null /* ptr */,
  lpbiOut: Deno.PointerValue | Uint8Array | null /* ptr */,
  BitDepth: number /* i32 */,
  dx: number /* i32 */,
  dy: number /* i32 */,
): Deno.PointerValue | null /* Windows.Win32.Media.Multimedia.HIC */ {
  return util.pointerFromFfi(libMSVFW32.ICGetDisplayFormat(util.toPointer(hic), util.toPointer(lpbiIn), util.toPointer(lpbiOut), BitDepth, dx, dy));
}

export function ICImageCompress(
  hic: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Media.Multimedia.HIC */,
  uiFlags: number /* u32 */,
  lpbiIn: Deno.PointerValue | Uint8Array | null /* ptr */,
  lpBits: Deno.PointerValue | Uint8Array | null /* ptr */,
  lpbiOut: Deno.PointerValue | Uint8Array | null /* ptr */,
  lQuality: number /* i32 */,
  plSize: Deno.PointerValue | Uint8Array | null /* ptr */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HANDLE */ {
  return util.pointerFromFfi(libMSVFW32.ICImageCompress(util.toPointer(hic), uiFlags, util.toPointer(lpbiIn), util.toPointer(lpBits), util.toPointer(lpbiOut), lQuality, util.toPointer(plSize)));
}

export function ICImageDecompress(
  hic: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Media.Multimedia.HIC */,
  uiFlags: number /* u32 */,
  lpbiIn: Deno.PointerValue | Uint8Array | null /* ptr */,
  lpBits: Deno.PointerValue | Uint8Array | null /* ptr */,
  lpbiOut: Deno.PointerValue | Uint8Array | null /* ptr */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HANDLE */ {
  return util.pointerFromFfi(libMSVFW32.ICImageDecompress(util.toPointer(hic), uiFlags, util.toPointer(lpbiIn), util.toPointer(lpBits), util.toPointer(lpbiOut)));
}

export function ICCompressorChoose(
  hwnd: Deno.PointerValue | null /* Windows.Win32.Foundation.HWND */,
  uiFlags: number /* u32 */,
  pvIn: Deno.PointerValue | Uint8Array | null /* ptr */,
  lpData: Deno.PointerValue | Uint8Array | null /* ptr */,
  pc: Deno.PointerValue | Uint8Array | null /* ptr */,
  lpszTitle: string | null /* Windows.Win32.Foundation.PSTR */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libMSVFW32.ICCompressorChoose(util.hwndToFfi(hwnd), uiFlags, util.toPointer(pvIn), util.toPointer(lpData), util.toPointer(pc), util.pstrToFfi(lpszTitle)));
}

export function ICSeqCompressFrameStart(
  pc: Deno.PointerValue | Uint8Array | null /* ptr */,
  lpbiIn: Deno.PointerValue | Uint8Array | null /* ptr */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libMSVFW32.ICSeqCompressFrameStart(util.toPointer(pc), util.toPointer(lpbiIn)));
}

export function ICSeqCompressFrameEnd(
  pc: Deno.PointerValue | Uint8Array | null /* ptr */,
): void /* void */ {
  return libMSVFW32.ICSeqCompressFrameEnd(util.toPointer(pc));
}

export function ICSeqCompressFrame(
  pc: Deno.PointerValue | Uint8Array | null /* ptr */,
  uiFlags: number /* u32 */,
  lpBits: Deno.PointerValue | Uint8Array | null /* ptr */,
  pfKey: Deno.PointerValue | Uint8Array | null /* ptr */,
  plSize: Deno.PointerValue | Uint8Array | null /* ptr */,
): Deno.PointerValue | null /* ptr */ {
  return util.pointerFromFfi(libMSVFW32.ICSeqCompressFrame(util.toPointer(pc), uiFlags, util.toPointer(lpBits), util.toPointer(pfKey), util.toPointer(plSize)));
}

export function ICCompressorFree(
  pc: Deno.PointerValue | Uint8Array | null /* ptr */,
): void /* void */ {
  return libMSVFW32.ICCompressorFree(util.toPointer(pc));
}

export function DrawDibOpen(): Deno.PointerValue /* isize */ {
  return libMSVFW32.DrawDibOpen();
}

export function DrawDibClose(
  hdd: Deno.PointerValue /* isize */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libMSVFW32.DrawDibClose(hdd));
}

export function DrawDibGetBuffer(
  hdd: Deno.PointerValue /* isize */,
  lpbi: Deno.PointerValue | Uint8Array | null /* ptr */,
  dwSize: number /* u32 */,
  dwFlags: number /* u32 */,
): Deno.PointerValue | null /* ptr */ {
  return util.pointerFromFfi(libMSVFW32.DrawDibGetBuffer(hdd, util.toPointer(lpbi), dwSize, dwFlags));
}

export function DrawDibGetPalette(
  hdd: Deno.PointerValue /* isize */,
): Deno.PointerValue | null /* Windows.Win32.Graphics.Gdi.HPALETTE */ {
  return util.pointerFromFfi(libMSVFW32.DrawDibGetPalette(hdd));
}

export function DrawDibSetPalette(
  hdd: Deno.PointerValue /* isize */,
  hpal: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Graphics.Gdi.HPALETTE */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libMSVFW32.DrawDibSetPalette(hdd, util.toPointer(hpal)));
}

export function DrawDibChangePalette(
  hdd: Deno.PointerValue /* isize */,
  iStart: number /* i32 */,
  iLen: number /* i32 */,
  lppe: Deno.PointerValue | Uint8Array | null /* ptr */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libMSVFW32.DrawDibChangePalette(hdd, iStart, iLen, util.toPointer(lppe)));
}

export function DrawDibRealize(
  hdd: Deno.PointerValue /* isize */,
  hdc: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Graphics.Gdi.HDC */,
  fBackground: boolean /* Windows.Win32.Foundation.BOOL */,
): number /* u32 */ {
  return libMSVFW32.DrawDibRealize(hdd, util.toPointer(hdc), util.boolToFfi(fBackground));
}

export function DrawDibStart(
  hdd: Deno.PointerValue /* isize */,
  rate: number /* u32 */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libMSVFW32.DrawDibStart(hdd, rate));
}

export function DrawDibStop(
  hdd: Deno.PointerValue /* isize */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libMSVFW32.DrawDibStop(hdd));
}

export function DrawDibBegin(
  hdd: Deno.PointerValue /* isize */,
  hdc: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Graphics.Gdi.HDC */,
  dxDst: number /* i32 */,
  dyDst: number /* i32 */,
  lpbi: Deno.PointerValue | Uint8Array | null /* ptr */,
  dxSrc: number /* i32 */,
  dySrc: number /* i32 */,
  wFlags: number /* u32 */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libMSVFW32.DrawDibBegin(hdd, util.toPointer(hdc), dxDst, dyDst, util.toPointer(lpbi), dxSrc, dySrc, wFlags));
}

export function DrawDibDraw(
  hdd: Deno.PointerValue /* isize */,
  hdc: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Graphics.Gdi.HDC */,
  xDst: number /* i32 */,
  yDst: number /* i32 */,
  dxDst: number /* i32 */,
  dyDst: number /* i32 */,
  lpbi: Deno.PointerValue | Uint8Array | null /* ptr */,
  lpBits: Deno.PointerValue | Uint8Array | null /* ptr */,
  xSrc: number /* i32 */,
  ySrc: number /* i32 */,
  dxSrc: number /* i32 */,
  dySrc: number /* i32 */,
  wFlags: number /* u32 */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libMSVFW32.DrawDibDraw(hdd, util.toPointer(hdc), xDst, yDst, dxDst, dyDst, util.toPointer(lpbi), util.toPointer(lpBits), xSrc, ySrc, dxSrc, dySrc, wFlags));
}

export function DrawDibEnd(
  hdd: Deno.PointerValue /* isize */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libMSVFW32.DrawDibEnd(hdd));
}

export function DrawDibTime(
  hdd: Deno.PointerValue /* isize */,
  lpddtime: Deno.PointerValue | Uint8Array | null /* ptr */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libMSVFW32.DrawDibTime(hdd, util.toPointer(lpddtime)));
}

export function DrawDibProfileDisplay(
  lpbi: Deno.PointerValue | Uint8Array | null /* ptr */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.LRESULT */ {
  return util.pointerFromFfi(libMSVFW32.DrawDibProfileDisplay(util.toPointer(lpbi)));
}

export function AVIFileInit(): void /* void */ {
  return libAVIFIL32.AVIFileInit();
}

export function AVIFileExit(): void /* void */ {
  return libAVIFIL32.AVIFileExit();
}

export function AVIFileAddRef(
  pfile: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Media.Multimedia.IAVIFile */,
): number /* u32 */ {
  return libAVIFIL32.AVIFileAddRef(util.toPointer(pfile));
}

export function AVIFileRelease(
  pfile: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Media.Multimedia.IAVIFile */,
): number /* u32 */ {
  return libAVIFIL32.AVIFileRelease(util.toPointer(pfile));
}

export function AVIFileOpenA(
  ppfile: Deno.PointerValue | Uint8Array | null /* ptr */,
  szFile: string | null /* Windows.Win32.Foundation.PSTR */,
  uMode: number /* u32 */,
  lpHandler: Deno.PointerValue | Uint8Array | null /* ptr */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libAVIFIL32.AVIFileOpenA(util.toPointer(ppfile), util.pstrToFfi(szFile), uMode, util.toPointer(lpHandler)));
}

export function AVIFileOpenW(
  ppfile: Deno.PointerValue | Uint8Array | null /* ptr */,
  szFile: string | null /* Windows.Win32.Foundation.PWSTR */,
  uMode: number /* u32 */,
  lpHandler: Deno.PointerValue | Uint8Array | null /* ptr */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libAVIFIL32.AVIFileOpenW(util.toPointer(ppfile), util.pwstrToFfi(szFile), uMode, util.toPointer(lpHandler)));
}

export function AVIFileInfoW(
  pfile: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Media.Multimedia.IAVIFile */,
  pfi: Deno.PointerValue | Uint8Array | null /* ptr */,
  lSize: number /* i32 */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libAVIFIL32.AVIFileInfoW(util.toPointer(pfile), util.toPointer(pfi), lSize));
}

export function AVIFileInfoA(
  pfile: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Media.Multimedia.IAVIFile */,
  pfi: Deno.PointerValue | Uint8Array | null /* ptr */,
  lSize: number /* i32 */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libAVIFIL32.AVIFileInfoA(util.toPointer(pfile), util.toPointer(pfi), lSize));
}

export function AVIFileGetStream(
  pfile: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Media.Multimedia.IAVIFile */,
  ppavi: Deno.PointerValue | Uint8Array | null /* ptr */,
  fccType: number /* u32 */,
  lParam: number /* i32 */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libAVIFIL32.AVIFileGetStream(util.toPointer(pfile), util.toPointer(ppavi), fccType, lParam));
}

export function AVIFileCreateStreamW(
  pfile: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Media.Multimedia.IAVIFile */,
  ppavi: Deno.PointerValue | Uint8Array | null /* ptr */,
  psi: Deno.PointerValue | Uint8Array | null /* ptr */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libAVIFIL32.AVIFileCreateStreamW(util.toPointer(pfile), util.toPointer(ppavi), util.toPointer(psi)));
}

export function AVIFileCreateStreamA(
  pfile: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Media.Multimedia.IAVIFile */,
  ppavi: Deno.PointerValue | Uint8Array | null /* ptr */,
  psi: Deno.PointerValue | Uint8Array | null /* ptr */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libAVIFIL32.AVIFileCreateStreamA(util.toPointer(pfile), util.toPointer(ppavi), util.toPointer(psi)));
}

export function AVIFileWriteData(
  pfile: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Media.Multimedia.IAVIFile */,
  ckid: number /* u32 */,
  lpData: Deno.PointerValue | Uint8Array | null /* ptr */,
  cbData: number /* i32 */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libAVIFIL32.AVIFileWriteData(util.toPointer(pfile), ckid, util.toPointer(lpData), cbData));
}

export function AVIFileReadData(
  pfile: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Media.Multimedia.IAVIFile */,
  ckid: number /* u32 */,
  lpData: Deno.PointerValue | Uint8Array | null /* ptr */,
  lpcbData: Deno.PointerValue | Uint8Array | null /* ptr */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libAVIFIL32.AVIFileReadData(util.toPointer(pfile), ckid, util.toPointer(lpData), util.toPointer(lpcbData)));
}

export function AVIFileEndRecord(
  pfile: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Media.Multimedia.IAVIFile */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libAVIFIL32.AVIFileEndRecord(util.toPointer(pfile)));
}

export function AVIStreamAddRef(
  pavi: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Media.Multimedia.IAVIStream */,
): number /* u32 */ {
  return libAVIFIL32.AVIStreamAddRef(util.toPointer(pavi));
}

export function AVIStreamRelease(
  pavi: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Media.Multimedia.IAVIStream */,
): number /* u32 */ {
  return libAVIFIL32.AVIStreamRelease(util.toPointer(pavi));
}

export function AVIStreamInfoW(
  pavi: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Media.Multimedia.IAVIStream */,
  psi: Deno.PointerValue | Uint8Array | null /* ptr */,
  lSize: number /* i32 */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libAVIFIL32.AVIStreamInfoW(util.toPointer(pavi), util.toPointer(psi), lSize));
}

export function AVIStreamInfoA(
  pavi: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Media.Multimedia.IAVIStream */,
  psi: Deno.PointerValue | Uint8Array | null /* ptr */,
  lSize: number /* i32 */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libAVIFIL32.AVIStreamInfoA(util.toPointer(pavi), util.toPointer(psi), lSize));
}

export function AVIStreamFindSample(
  pavi: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Media.Multimedia.IAVIStream */,
  lPos: number /* i32 */,
  lFlags: number /* i32 */,
): number /* i32 */ {
  return libAVIFIL32.AVIStreamFindSample(util.toPointer(pavi), lPos, lFlags);
}

export function AVIStreamReadFormat(
  pavi: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Media.Multimedia.IAVIStream */,
  lPos: number /* i32 */,
  lpFormat: Deno.PointerValue | Uint8Array | null /* ptr */,
  lpcbFormat: Deno.PointerValue | Uint8Array | null /* ptr */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libAVIFIL32.AVIStreamReadFormat(util.toPointer(pavi), lPos, util.toPointer(lpFormat), util.toPointer(lpcbFormat)));
}

export function AVIStreamSetFormat(
  pavi: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Media.Multimedia.IAVIStream */,
  lPos: number /* i32 */,
  lpFormat: Deno.PointerValue | Uint8Array | null /* ptr */,
  cbFormat: number /* i32 */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libAVIFIL32.AVIStreamSetFormat(util.toPointer(pavi), lPos, util.toPointer(lpFormat), cbFormat));
}

export function AVIStreamReadData(
  pavi: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Media.Multimedia.IAVIStream */,
  fcc: number /* u32 */,
  lp: Deno.PointerValue | Uint8Array | null /* ptr */,
  lpcb: Deno.PointerValue | Uint8Array | null /* ptr */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libAVIFIL32.AVIStreamReadData(util.toPointer(pavi), fcc, util.toPointer(lp), util.toPointer(lpcb)));
}

export function AVIStreamWriteData(
  pavi: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Media.Multimedia.IAVIStream */,
  fcc: number /* u32 */,
  lp: Deno.PointerValue | Uint8Array | null /* ptr */,
  cb: number /* i32 */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libAVIFIL32.AVIStreamWriteData(util.toPointer(pavi), fcc, util.toPointer(lp), cb));
}

export function AVIStreamRead(
  pavi: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Media.Multimedia.IAVIStream */,
  lStart: number /* i32 */,
  lSamples: number /* i32 */,
  lpBuffer: Deno.PointerValue | Uint8Array | null /* ptr */,
  cbBuffer: number /* i32 */,
  plBytes: Deno.PointerValue | Uint8Array | null /* ptr */,
  plSamples: Deno.PointerValue | Uint8Array | null /* ptr */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libAVIFIL32.AVIStreamRead(util.toPointer(pavi), lStart, lSamples, util.toPointer(lpBuffer), cbBuffer, util.toPointer(plBytes), util.toPointer(plSamples)));
}

export function AVIStreamWrite(
  pavi: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Media.Multimedia.IAVIStream */,
  lStart: number /* i32 */,
  lSamples: number /* i32 */,
  lpBuffer: Deno.PointerValue | Uint8Array | null /* ptr */,
  cbBuffer: number /* i32 */,
  dwFlags: number /* u32 */,
  plSampWritten: Deno.PointerValue | Uint8Array | null /* ptr */,
  plBytesWritten: Deno.PointerValue | Uint8Array | null /* ptr */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libAVIFIL32.AVIStreamWrite(util.toPointer(pavi), lStart, lSamples, util.toPointer(lpBuffer), cbBuffer, dwFlags, util.toPointer(plSampWritten), util.toPointer(plBytesWritten)));
}

export function AVIStreamStart(
  pavi: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Media.Multimedia.IAVIStream */,
): number /* i32 */ {
  return libAVIFIL32.AVIStreamStart(util.toPointer(pavi));
}

export function AVIStreamLength(
  pavi: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Media.Multimedia.IAVIStream */,
): number /* i32 */ {
  return libAVIFIL32.AVIStreamLength(util.toPointer(pavi));
}

export function AVIStreamTimeToSample(
  pavi: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Media.Multimedia.IAVIStream */,
  lTime: number /* i32 */,
): number /* i32 */ {
  return libAVIFIL32.AVIStreamTimeToSample(util.toPointer(pavi), lTime);
}

export function AVIStreamSampleToTime(
  pavi: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Media.Multimedia.IAVIStream */,
  lSample: number /* i32 */,
): number /* i32 */ {
  return libAVIFIL32.AVIStreamSampleToTime(util.toPointer(pavi), lSample);
}

export function AVIStreamBeginStreaming(
  pavi: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Media.Multimedia.IAVIStream */,
  lStart: number /* i32 */,
  lEnd: number /* i32 */,
  lRate: number /* i32 */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libAVIFIL32.AVIStreamBeginStreaming(util.toPointer(pavi), lStart, lEnd, lRate));
}

export function AVIStreamEndStreaming(
  pavi: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Media.Multimedia.IAVIStream */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libAVIFIL32.AVIStreamEndStreaming(util.toPointer(pavi)));
}

export function AVIStreamGetFrameOpen(
  pavi: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Media.Multimedia.IAVIStream */,
  lpbiWanted: Deno.PointerValue | Uint8Array | null /* ptr */,
): Deno.PointerValue | null /* Windows.Win32.Media.Multimedia.IGetFrame */ {
  return util.pointerFromFfi(libAVIFIL32.AVIStreamGetFrameOpen(util.toPointer(pavi), util.toPointer(lpbiWanted)));
}

export function AVIStreamGetFrame(
  pg: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Media.Multimedia.IGetFrame */,
  lPos: number /* i32 */,
): Deno.PointerValue | null /* ptr */ {
  return util.pointerFromFfi(libAVIFIL32.AVIStreamGetFrame(util.toPointer(pg), lPos));
}

export function AVIStreamGetFrameClose(
  pg: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Media.Multimedia.IGetFrame */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libAVIFIL32.AVIStreamGetFrameClose(util.toPointer(pg)));
}

export function AVIStreamOpenFromFileA(
  ppavi: Deno.PointerValue | Uint8Array | null /* ptr */,
  szFile: string | null /* Windows.Win32.Foundation.PSTR */,
  fccType: number /* u32 */,
  lParam: number /* i32 */,
  mode: number /* u32 */,
  pclsidHandler: Deno.PointerValue | Uint8Array | null /* ptr */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libAVIFIL32.AVIStreamOpenFromFileA(util.toPointer(ppavi), util.pstrToFfi(szFile), fccType, lParam, mode, util.toPointer(pclsidHandler)));
}

export function AVIStreamOpenFromFileW(
  ppavi: Deno.PointerValue | Uint8Array | null /* ptr */,
  szFile: string | null /* Windows.Win32.Foundation.PWSTR */,
  fccType: number /* u32 */,
  lParam: number /* i32 */,
  mode: number /* u32 */,
  pclsidHandler: Deno.PointerValue | Uint8Array | null /* ptr */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libAVIFIL32.AVIStreamOpenFromFileW(util.toPointer(ppavi), util.pwstrToFfi(szFile), fccType, lParam, mode, util.toPointer(pclsidHandler)));
}

export function AVIStreamCreate(
  ppavi: Deno.PointerValue | Uint8Array | null /* ptr */,
  lParam1: number /* i32 */,
  lParam2: number /* i32 */,
  pclsidHandler: Deno.PointerValue | Uint8Array | null /* ptr */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libAVIFIL32.AVIStreamCreate(util.toPointer(ppavi), lParam1, lParam2, util.toPointer(pclsidHandler)));
}

export function AVIMakeCompressedStream(
  ppsCompressed: Deno.PointerValue | Uint8Array | null /* ptr */,
  ppsSource: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Media.Multimedia.IAVIStream */,
  lpOptions: Deno.PointerValue | Uint8Array | null /* ptr */,
  pclsidHandler: Deno.PointerValue | Uint8Array | null /* ptr */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libAVIFIL32.AVIMakeCompressedStream(util.toPointer(ppsCompressed), util.toPointer(ppsSource), util.toPointer(lpOptions), util.toPointer(pclsidHandler)));
}

export function AVISaveA(
  szFile: string | null /* Windows.Win32.Foundation.PSTR */,
  pclsidHandler: Deno.PointerValue | Uint8Array | null /* ptr */,
  lpfnCallback: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Media.Multimedia.AVISAVECALLBACK */,
  nStreams: number /* i32 */,
  pfile: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Media.Multimedia.IAVIStream */,
  lpOptions: Deno.PointerValue | Uint8Array | null /* ptr */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libAVIFIL32.AVISaveA(util.pstrToFfi(szFile), util.toPointer(pclsidHandler), util.toPointer(lpfnCallback), nStreams, util.toPointer(pfile), util.toPointer(lpOptions)));
}

export function AVISaveVA(
  szFile: string | null /* Windows.Win32.Foundation.PSTR */,
  pclsidHandler: Deno.PointerValue | Uint8Array | null /* ptr */,
  lpfnCallback: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Media.Multimedia.AVISAVECALLBACK */,
  nStreams: number /* i32 */,
  ppavi: Deno.PointerValue | Uint8Array | null /* ptr */,
  plpOptions: Deno.PointerValue | Uint8Array | null /* ptr */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libAVIFIL32.AVISaveVA(util.pstrToFfi(szFile), util.toPointer(pclsidHandler), util.toPointer(lpfnCallback), nStreams, util.toPointer(ppavi), util.toPointer(plpOptions)));
}

export function AVISaveW(
  szFile: string | null /* Windows.Win32.Foundation.PWSTR */,
  pclsidHandler: Deno.PointerValue | Uint8Array | null /* ptr */,
  lpfnCallback: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Media.Multimedia.AVISAVECALLBACK */,
  nStreams: number /* i32 */,
  pfile: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Media.Multimedia.IAVIStream */,
  lpOptions: Deno.PointerValue | Uint8Array | null /* ptr */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libAVIFIL32.AVISaveW(util.pwstrToFfi(szFile), util.toPointer(pclsidHandler), util.toPointer(lpfnCallback), nStreams, util.toPointer(pfile), util.toPointer(lpOptions)));
}

export function AVISaveVW(
  szFile: string | null /* Windows.Win32.Foundation.PWSTR */,
  pclsidHandler: Deno.PointerValue | Uint8Array | null /* ptr */,
  lpfnCallback: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Media.Multimedia.AVISAVECALLBACK */,
  nStreams: number /* i32 */,
  ppavi: Deno.PointerValue | Uint8Array | null /* ptr */,
  plpOptions: Deno.PointerValue | Uint8Array | null /* ptr */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libAVIFIL32.AVISaveVW(util.pwstrToFfi(szFile), util.toPointer(pclsidHandler), util.toPointer(lpfnCallback), nStreams, util.toPointer(ppavi), util.toPointer(plpOptions)));
}

export function AVISaveOptions(
  hwnd: Deno.PointerValue | null /* Windows.Win32.Foundation.HWND */,
  uiFlags: number /* u32 */,
  nStreams: number /* i32 */,
  ppavi: Deno.PointerValue | Uint8Array | null /* ptr */,
  plpOptions: Deno.PointerValue | Uint8Array | null /* ptr */,
): Deno.PointerValue /* isize */ {
  return libAVIFIL32.AVISaveOptions(util.hwndToFfi(hwnd), uiFlags, nStreams, util.toPointer(ppavi), util.toPointer(plpOptions));
}

export function AVISaveOptionsFree(
  nStreams: number /* i32 */,
  plpOptions: Deno.PointerValue | Uint8Array | null /* ptr */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libAVIFIL32.AVISaveOptionsFree(nStreams, util.toPointer(plpOptions)));
}

export function AVIBuildFilterW(
  lpszFilter: string | null /* Windows.Win32.Foundation.PWSTR */,
  cbFilter: number /* i32 */,
  fSaving: boolean /* Windows.Win32.Foundation.BOOL */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libAVIFIL32.AVIBuildFilterW(util.pwstrToFfi(lpszFilter), cbFilter, util.boolToFfi(fSaving)));
}

export function AVIBuildFilterA(
  lpszFilter: string | null /* Windows.Win32.Foundation.PSTR */,
  cbFilter: number /* i32 */,
  fSaving: boolean /* Windows.Win32.Foundation.BOOL */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libAVIFIL32.AVIBuildFilterA(util.pstrToFfi(lpszFilter), cbFilter, util.boolToFfi(fSaving)));
}

export function AVIMakeFileFromStreams(
  ppfile: Deno.PointerValue | Uint8Array | null /* ptr */,
  nStreams: number /* i32 */,
  papStreams: Deno.PointerValue | Uint8Array | null /* ptr */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libAVIFIL32.AVIMakeFileFromStreams(util.toPointer(ppfile), nStreams, util.toPointer(papStreams)));
}

export function AVIMakeStreamFromClipboard(
  cfFormat: number /* u32 */,
  hGlobal: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Foundation.HANDLE */,
  ppstream: Deno.PointerValue | Uint8Array | null /* ptr */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libAVIFIL32.AVIMakeStreamFromClipboard(cfFormat, util.toPointer(hGlobal), util.toPointer(ppstream)));
}

export function AVIPutFileOnClipboard(
  pf: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Media.Multimedia.IAVIFile */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libAVIFIL32.AVIPutFileOnClipboard(util.toPointer(pf)));
}

export function AVIGetFromClipboard(
  lppf: Deno.PointerValue | Uint8Array | null /* ptr */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libAVIFIL32.AVIGetFromClipboard(util.toPointer(lppf)));
}

export function AVIClearClipboard(): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libAVIFIL32.AVIClearClipboard());
}

export function CreateEditableStream(
  ppsEditable: Deno.PointerValue | Uint8Array | null /* ptr */,
  psSource: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Media.Multimedia.IAVIStream */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libAVIFIL32.CreateEditableStream(util.toPointer(ppsEditable), util.toPointer(psSource)));
}

export function EditStreamCut(
  pavi: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Media.Multimedia.IAVIStream */,
  plStart: Deno.PointerValue | Uint8Array | null /* ptr */,
  plLength: Deno.PointerValue | Uint8Array | null /* ptr */,
  ppResult: Deno.PointerValue | Uint8Array | null /* ptr */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libAVIFIL32.EditStreamCut(util.toPointer(pavi), util.toPointer(plStart), util.toPointer(plLength), util.toPointer(ppResult)));
}

export function EditStreamCopy(
  pavi: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Media.Multimedia.IAVIStream */,
  plStart: Deno.PointerValue | Uint8Array | null /* ptr */,
  plLength: Deno.PointerValue | Uint8Array | null /* ptr */,
  ppResult: Deno.PointerValue | Uint8Array | null /* ptr */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libAVIFIL32.EditStreamCopy(util.toPointer(pavi), util.toPointer(plStart), util.toPointer(plLength), util.toPointer(ppResult)));
}

export function EditStreamPaste(
  pavi: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Media.Multimedia.IAVIStream */,
  plPos: Deno.PointerValue | Uint8Array | null /* ptr */,
  plLength: Deno.PointerValue | Uint8Array | null /* ptr */,
  pstream: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Media.Multimedia.IAVIStream */,
  lStart: number /* i32 */,
  lEnd: number /* i32 */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libAVIFIL32.EditStreamPaste(util.toPointer(pavi), util.toPointer(plPos), util.toPointer(plLength), util.toPointer(pstream), lStart, lEnd));
}

export function EditStreamClone(
  pavi: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Media.Multimedia.IAVIStream */,
  ppResult: Deno.PointerValue | Uint8Array | null /* ptr */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libAVIFIL32.EditStreamClone(util.toPointer(pavi), util.toPointer(ppResult)));
}

export function EditStreamSetNameA(
  pavi: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Media.Multimedia.IAVIStream */,
  lpszName: string | null /* Windows.Win32.Foundation.PSTR */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libAVIFIL32.EditStreamSetNameA(util.toPointer(pavi), util.pstrToFfi(lpszName)));
}

export function EditStreamSetNameW(
  pavi: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Media.Multimedia.IAVIStream */,
  lpszName: string | null /* Windows.Win32.Foundation.PWSTR */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libAVIFIL32.EditStreamSetNameW(util.toPointer(pavi), util.pwstrToFfi(lpszName)));
}

export function EditStreamSetInfoW(
  pavi: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Media.Multimedia.IAVIStream */,
  lpInfo: Deno.PointerValue | Uint8Array | null /* ptr */,
  cbInfo: number /* i32 */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libAVIFIL32.EditStreamSetInfoW(util.toPointer(pavi), util.toPointer(lpInfo), cbInfo));
}

export function EditStreamSetInfoA(
  pavi: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Media.Multimedia.IAVIStream */,
  lpInfo: Deno.PointerValue | Uint8Array | null /* ptr */,
  cbInfo: number /* i32 */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libAVIFIL32.EditStreamSetInfoA(util.toPointer(pavi), util.toPointer(lpInfo), cbInfo));
}

export function MCIWndCreateA(
  hwndParent: Deno.PointerValue | null /* Windows.Win32.Foundation.HWND */,
  hInstance: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Foundation.HINSTANCE */,
  dwStyle: number /* u32 */,
  szFile: string | null /* Windows.Win32.Foundation.PSTR */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HWND */ {
  return util.hwndFromFfi(libMSVFW32.MCIWndCreateA(util.hwndToFfi(hwndParent), util.toPointer(hInstance), dwStyle, util.pstrToFfi(szFile)));
}

export function MCIWndCreateW(
  hwndParent: Deno.PointerValue | null /* Windows.Win32.Foundation.HWND */,
  hInstance: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Foundation.HINSTANCE */,
  dwStyle: number /* u32 */,
  szFile: string | null /* Windows.Win32.Foundation.PWSTR */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HWND */ {
  return util.hwndFromFfi(libMSVFW32.MCIWndCreateW(util.hwndToFfi(hwndParent), util.toPointer(hInstance), dwStyle, util.pwstrToFfi(szFile)));
}

export function MCIWndRegisterClass(): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libMSVFW32.MCIWndRegisterClass());
}

export function capCreateCaptureWindowA(
  lpszWindowName: string | null /* Windows.Win32.Foundation.PSTR */,
  dwStyle: number /* u32 */,
  x: number /* i32 */,
  y: number /* i32 */,
  nWidth: number /* i32 */,
  nHeight: number /* i32 */,
  hwndParent: Deno.PointerValue | null /* Windows.Win32.Foundation.HWND */,
  nID: number /* i32 */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HWND */ {
  return util.hwndFromFfi(libAVICAP32.capCreateCaptureWindowA(util.pstrToFfi(lpszWindowName), dwStyle, x, y, nWidth, nHeight, util.hwndToFfi(hwndParent), nID));
}

export function capGetDriverDescriptionA(
  wDriverIndex: number /* u32 */,
  lpszName: string | null /* Windows.Win32.Foundation.PSTR */,
  cbName: number /* i32 */,
  lpszVer: string | null /* Windows.Win32.Foundation.PSTR */,
  cbVer: number /* i32 */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libAVICAP32.capGetDriverDescriptionA(wDriverIndex, util.pstrToFfi(lpszName), cbName, util.pstrToFfi(lpszVer), cbVer));
}

export function capCreateCaptureWindowW(
  lpszWindowName: string | null /* Windows.Win32.Foundation.PWSTR */,
  dwStyle: number /* u32 */,
  x: number /* i32 */,
  y: number /* i32 */,
  nWidth: number /* i32 */,
  nHeight: number /* i32 */,
  hwndParent: Deno.PointerValue | null /* Windows.Win32.Foundation.HWND */,
  nID: number /* i32 */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HWND */ {
  return util.hwndFromFfi(libAVICAP32.capCreateCaptureWindowW(util.pwstrToFfi(lpszWindowName), dwStyle, x, y, nWidth, nHeight, util.hwndToFfi(hwndParent), nID));
}

export function capGetDriverDescriptionW(
  wDriverIndex: number /* u32 */,
  lpszName: string | null /* Windows.Win32.Foundation.PWSTR */,
  cbName: number /* i32 */,
  lpszVer: string | null /* Windows.Win32.Foundation.PWSTR */,
  cbVer: number /* i32 */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libAVICAP32.capGetDriverDescriptionW(wDriverIndex, util.pwstrToFfi(lpszName), cbName, util.pwstrToFfi(lpszVer), cbVer));
}

export function GetOpenFileNamePreviewA(
  lpofn: Deno.PointerValue | Uint8Array | null /* ptr */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libMSVFW32.GetOpenFileNamePreviewA(util.toPointer(lpofn)));
}

export function GetSaveFileNamePreviewA(
  lpofn: Deno.PointerValue | Uint8Array | null /* ptr */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libMSVFW32.GetSaveFileNamePreviewA(util.toPointer(lpofn)));
}

export function GetOpenFileNamePreviewW(
  lpofn: Deno.PointerValue | Uint8Array | null /* ptr */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libMSVFW32.GetOpenFileNamePreviewW(util.toPointer(lpofn)));
}

export function GetSaveFileNamePreviewW(
  lpofn: Deno.PointerValue | Uint8Array | null /* ptr */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libMSVFW32.GetSaveFileNamePreviewW(util.toPointer(lpofn)));
}

export function mmTaskCreate(
  lpfn: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Media.Multimedia.LPTASKCALLBACK */,
  lph: Deno.PointerValue | Uint8Array | null /* ptr */,
  dwInst: Deno.PointerValue /* usize */,
): number /* u32 */ {
  return libWINMM.mmTaskCreate(util.toPointer(lpfn), util.toPointer(lph), dwInst);
}

export function mmTaskBlock(
  h: number /* u32 */,
): void /* void */ {
  return libWINMM.mmTaskBlock(h);
}

export function mmTaskSignal(
  h: number /* u32 */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libWINMM.mmTaskSignal(h));
}

export function mmTaskYield(): void /* void */ {
  return libWINMM.mmTaskYield();
}

export function mmGetCurrentTask(): number /* u32 */ {
  return libWINMM.mmGetCurrentTask();
}

