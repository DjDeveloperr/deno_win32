/// Auto-generated by Deno Win32: Windows.Win32.Media.Audio.Apis

import * as util from "../../util.ts";

// Enums
export type MIDI_WAVE_OPEN_TYPE = number;
export type SND_FLAGS = number;
export type MIXERLINE_COMPONENTTYPE = number;
export type APO_BUFFER_FLAGS = number;
export type APO_CONNECTION_BUFFER_TYPE = number;
export type APO_FLAG = number;
export type AUDIO_FLOW_TYPE = number;
export type EAudioConstriction = number;
export type AUDIO_SYSTEMEFFECT_STATE = number;
export type APO_LOG_LEVEL = number;
export type APO_NOTIFICATION_TYPE = number;
export type AUDIO_SYSTEMEFFECTS_PROPERTYSTORE_TYPE = number;
export type DMUS_CLOCKTYPE = number;
export type DSPROPERTY_DIRECTSOUNDDEVICE = number;
export type DIRECTSOUNDDEVICE_TYPE = number;
export type DIRECTSOUNDDEVICE_DATAFLOW = number;
export type EndpointConnectorType = number;
export type XAPO_BUFFER_FLAGS = number;
export type XAUDIO2_FILTER_TYPE = number;
export type HrtfDirectivityType = number;
export type HrtfEnvironment = number;
export type HrtfDistanceDecayType = number;
export type AUDCLNT_SHAREMODE = number;
export type AUDIO_STREAM_CATEGORY = number;
export type AudioSessionState = number;
export type _AUDCLNT_BUFFERFLAGS = number;
export type AUDCLNT_STREAMOPTIONS = number;
export type AUDIO_DUCKING_OPTIONS = number;
export type AUDIO_EFFECT_STATE = number;
export type AMBISONICS_TYPE = number;
export type AMBISONICS_CHANNEL_ORDERING = number;
export type AMBISONICS_NORMALIZATION = number;
export type AudioObjectType = number;
export type SPATIAL_AUDIO_STREAM_OPTIONS = number;
export type SpatialAudioHrtfDirectivityType = number;
export type SpatialAudioHrtfEnvironmentType = number;
export type SpatialAudioHrtfDistanceDecayType = number;
export type EDataFlow = number;
export type ERole = number;
export type EndpointFormFactor = number;
export type DataFlow = number;
export type PartType = number;
export type ConnectorType = number;
export type AudioSessionDisconnectReason = number;
export type SpatialAudioMetadataWriterOverflowMode = number;
export type SpatialAudioMetadataCopyMode = number;
export type PROCESS_LOOPBACK_MODE = number;
export type AUDIOCLIENT_ACTIVATION_TYPE = number;
export type AudioStateMonitorSoundLevel = number;

// Constants
export const MIXERCONTROL_CONTROLTYPE_CUSTOM = 0;
export const MIXERCONTROL_CONTROLTYPE_BOOLEANMETER = 268500992;
export const MIXERCONTROL_CONTROLTYPE_SIGNEDMETER = 268566528;
export const MIXERCONTROL_CONTROLTYPE_PEAKMETER = 268566529;
export const MIXERCONTROL_CONTROLTYPE_UNSIGNEDMETER = 268632064;
export const MIXERCONTROL_CONTROLTYPE_BOOLEAN = 536936448;
export const MIXERCONTROL_CONTROLTYPE_ONOFF = 536936449;
export const MIXERCONTROL_CONTROLTYPE_MUTE = 536936450;
export const MIXERCONTROL_CONTROLTYPE_MONO = 536936451;
export const MIXERCONTROL_CONTROLTYPE_LOUDNESS = 536936452;
export const MIXERCONTROL_CONTROLTYPE_STEREOENH = 536936453;
export const MIXERCONTROL_CONTROLTYPE_BASS_BOOST = 536945271;
export const MIXERCONTROL_CONTROLTYPE_BUTTON = 553713664;
export const MIXERCONTROL_CONTROLTYPE_DECIBELS = 805568512;
export const MIXERCONTROL_CONTROLTYPE_SIGNED = 805437440;
export const MIXERCONTROL_CONTROLTYPE_UNSIGNED = 805502976;
export const MIXERCONTROL_CONTROLTYPE_PERCENT = 805634048;
export const MIXERCONTROL_CONTROLTYPE_SLIDER = 1073872896;
export const MIXERCONTROL_CONTROLTYPE_PAN = 1073872897;
export const MIXERCONTROL_CONTROLTYPE_QSOUNDPAN = 1073872898;
export const MIXERCONTROL_CONTROLTYPE_FADER = 1342373888;
export const MIXERCONTROL_CONTROLTYPE_VOLUME = 1342373889;
export const MIXERCONTROL_CONTROLTYPE_BASS = 1342373890;
export const MIXERCONTROL_CONTROLTYPE_TREBLE = 1342373891;
export const MIXERCONTROL_CONTROLTYPE_EQUALIZER = 1342373892;
export const MIXERCONTROL_CONTROLTYPE_SINGLESELECT = 1879113728;
export const MIXERCONTROL_CONTROLTYPE_MUX = 1879113729;
export const MIXERCONTROL_CONTROLTYPE_MULTIPLESELECT = 1895890944;
export const MIXERCONTROL_CONTROLTYPE_MIXER = 1895890945;
export const MIXERCONTROL_CONTROLTYPE_MICROTIME = 1610809344;
export const MIXERCONTROL_CONTROLTYPE_MILLITIME = 1627586560;
export const WAVE_MAPPER = 4294967295;
export const ENDPOINT_FORMAT_RESET_MIX_ONLY = 1;
export const ENDPOINT_HARDWARE_SUPPORT_VOLUME = 1;
export const ENDPOINT_HARDWARE_SUPPORT_MUTE = 2;
export const ENDPOINT_HARDWARE_SUPPORT_METER = 4;
export const AUDIOCLOCK_CHARACTERISTIC_FIXED_FREQ = 1;
export const AMBISONICS_PARAM_VERSION_1 = 1;
export const AUDCLNT_E_NOT_INITIALIZED = 9871892601689931777n;
export const AUDCLNT_E_ALREADY_INITIALIZED = 9871893701201559554n;
export const AUDCLNT_E_WRONG_ENDPOINT_TYPE = 9871894800713187331n;
export const AUDCLNT_E_DEVICE_INVALIDATED = 9871895900224815108n;
export const AUDCLNT_E_NOT_STOPPED = 9871896999736442885n;
export const AUDCLNT_E_BUFFER_TOO_LARGE = 9871898099248070662n;
export const AUDCLNT_E_OUT_OF_ORDER = 9871899198759698439n;
export const AUDCLNT_E_UNSUPPORTED_FORMAT = 9871900298271326216n;
export const AUDCLNT_E_INVALID_SIZE = 9871901397782953993n;
export const AUDCLNT_E_DEVICE_IN_USE = 9871902497294581770n;
export const AUDCLNT_E_BUFFER_OPERATION_PENDING = 9871903596806209547n;
export const AUDCLNT_E_THREAD_NOT_REGISTERED = 9871905795829465100n;
export const AUDCLNT_E_EXCLUSIVE_MODE_NOT_ALLOWED = 9871906895341092878n;
export const AUDCLNT_E_ENDPOINT_CREATE_FAILED = 9871907994852720655n;
export const AUDCLNT_E_SERVICE_NOT_RUNNING = 9871909094364348432n;
export const AUDCLNT_E_EVENTHANDLE_NOT_EXPECTED = 9871910193875976209n;
export const AUDCLNT_E_EXCLUSIVE_MODE_ONLY = 9871911293387603986n;
export const AUDCLNT_E_BUFDURATION_PERIOD_NOT_EQUAL = 9871912392899231763n;
export const AUDCLNT_E_EVENTHANDLE_NOT_SET = 9871913492410859540n;
export const AUDCLNT_E_INCORRECT_BUFFER_SIZE = 9871914591922487317n;
export const AUDCLNT_E_BUFFER_SIZE_ERROR = 9871915691434115094n;
export const AUDCLNT_E_CPUUSAGE_EXCEEDED = 9871916790945742871n;
export const AUDCLNT_E_BUFFER_ERROR = 9871917890457370648n;
export const AUDCLNT_E_BUFFER_SIZE_NOT_ALIGNED = 9871925587038765081n;
export const AUDCLNT_E_INVALID_DEVICE_PERIOD = 9871926686550392864n;
export const AUDCLNT_E_INVALID_STREAM_FLAG = 9871927786062020641n;
export const AUDCLNT_E_ENDPOINT_OFFLOAD_NOT_CAPABLE = 9871928885573648418n;
export const AUDCLNT_E_OUT_OF_OFFLOAD_RESOURCES = 9871929985085276195n;
export const AUDCLNT_E_OFFLOAD_MODE_ONLY = 9871931084596903972n;
export const AUDCLNT_E_NONOFFLOAD_MODE_ONLY = 9871932184108531749n;
export const AUDCLNT_E_RESOURCES_INVALIDATED = 9871933283620159526n;
export const AUDCLNT_E_RAW_MODE_UNSUPPORTED = 9871934383131787303n;
export const AUDCLNT_E_ENGINE_PERIODICITY_LOCKED = 9871935482643415080n;
export const AUDCLNT_E_ENGINE_FORMAT_LOCKED = 9871943179224809513n;
export const AUDCLNT_E_HEADTRACKING_ENABLED = 9871960771410853936n;
export const AUDCLNT_E_HEADTRACKING_UNSUPPORTED = 9871961870922481728n;
export const AUDCLNT_E_EFFECT_NOT_AVAILABLE = 9871962970434109505n;
export const AUDCLNT_E_EFFECT_STATE_READ_ONLY = 9871891502178304066n;
export const AUDCLNT_S_BUFFER_EMPTY = 9871892599542448129n;
export const AUDCLNT_S_THREAD_ALREADY_REGISTERED = 9871893699054075906n;
export const AUDCLNT_S_POSITION_STALLED = 72057611360993283n;
export const AUDCLNT_STREAMFLAGS_CROSSPROCESS = 65536;
export const AUDCLNT_STREAMFLAGS_LOOPBACK = 131072;
export const AUDCLNT_STREAMFLAGS_EVENTCALLBACK = 262144;
export const AUDCLNT_STREAMFLAGS_NOPERSIST = 524288;
export const AUDCLNT_STREAMFLAGS_RATEADJUST = 1048576;
export const AUDCLNT_STREAMFLAGS_SRC_DEFAULT_QUALITY = 134217728;
export const AUDCLNT_STREAMFLAGS_AUTOCONVERTPCM = 2147483648;
export const AUDCLNT_SESSIONFLAGS_EXPIREWHENUNOWNED = 268435456;
export const AUDCLNT_SESSIONFLAGS_DISPLAY_HIDE = 536870912;
export const AUDCLNT_SESSIONFLAGS_DISPLAY_HIDEWHENEXPIRED = 1073741824;
export const SPTLAUDCLNT_E_DESTROYED = 9872172977155014912n;
export const SPTLAUDCLNT_E_OUT_OF_ORDER = 9872174076666642689n;
export const SPTLAUDCLNT_E_RESOURCES_INVALIDATED = 9872175176178270466n;
export const SPTLAUDCLNT_E_NO_MORE_OBJECTS = 9872176275689898243n;
export const SPTLAUDCLNT_E_PROPERTY_NOT_SUPPORTED = 9872177375201526020n;
export const SPTLAUDCLNT_E_ERRORS_IN_OBJECT_CALLS = 9872178474713153797n;
export const SPTLAUDCLNT_E_METADATA_FORMAT_NOT_SUPPORTED = 9872179574224781574n;
export const SPTLAUDCLNT_E_STREAM_NOT_AVAILABLE = 9872180673736409351n;
export const SPTLAUDCLNT_E_INVALID_LICENSE = 9872182872759664904n;
export const SPTLAUDCLNT_E_STREAM_NOT_STOPPED = 9872183972271292682n;
export const SPTLAUDCLNT_E_STATIC_OBJECT_NOT_AVAILABLE = 9872185071782920459n;
export const SPTLAUDCLNT_E_OBJECT_ALREADY_ACTIVE = 9872186171294548236n;
export const SPTLAUDCLNT_E_INTERNAL = 8815563571469;
export const DEVICE_STATE_ACTIVE = 1;
export const DEVICE_STATE_DISABLED = 2;
export const DEVICE_STATE_NOTPRESENT = 4;
export const DEVICE_STATE_UNPLUGGED = 8;
export const DEVICE_STATEMASK_ALL = 15;
export const ENDPOINT_SYSFX_ENABLED = 0;
export const ENDPOINT_SYSFX_DISABLED = 1;
export const SPATIAL_AUDIO_STANDARD_COMMANDS_START = 200;
export const SPATIAL_AUDIO_POSITION = 200;
export const SPTLAUD_MD_CLNT_E_COMMAND_NOT_FOUND = 9872454452131725824n;
export const SPTLAUD_MD_CLNT_E_OBJECT_NOT_INITIALIZED = 9872455551643353601n;
export const SPTLAUD_MD_CLNT_E_INVALID_ARGS = 9872456651154981378n;
export const SPTLAUD_MD_CLNT_E_METADATA_FORMAT_NOT_FOUND = 9872457750666609155n;
export const SPTLAUD_MD_CLNT_E_VALUE_BUFFER_INCORRECT_SIZE = 9872458850178236932n;
export const SPTLAUD_MD_CLNT_E_MEMORY_BOUNDS = 9872459949689864709n;
export const SPTLAUD_MD_CLNT_E_NO_MORE_COMMANDS = 9872461049201492486n;
export const SPTLAUD_MD_CLNT_E_BUFFER_ALREADY_ATTACHED = 9872462148713120263n;
export const SPTLAUD_MD_CLNT_E_BUFFER_NOT_ATTACHED = 9872463248224748040n;
export const SPTLAUD_MD_CLNT_E_FRAMECOUNT_OUT_OF_RANGE = 9872470944806142473n;
export const SPTLAUD_MD_CLNT_E_NO_ITEMS_FOUND = 9872472044317770256n;
export const SPTLAUD_MD_CLNT_E_ITEM_COPY_OVERFLOW = 9872473143829398033n;
export const SPTLAUD_MD_CLNT_E_NO_ITEMS_OPEN = 9872474243341025810n;
export const SPTLAUD_MD_CLNT_E_ITEMS_ALREADY_OPEN = 9872475342852653587n;
export const SPTLAUD_MD_CLNT_E_ATTACH_FAILED_INTERNAL_BUFFER = 9872476442364281364n;
export const SPTLAUD_MD_CLNT_E_DETACH_FAILED_INTERNAL_BUFFER = 9872477541875909141n;
export const SPTLAUD_MD_CLNT_E_NO_BUFFER_ATTACHED = 9872478641387536918n;
export const SPTLAUD_MD_CLNT_E_NO_MORE_ITEMS = 9872479740899164695n;
export const SPTLAUD_MD_CLNT_E_FRAMEOFFSET_OUT_OF_RANGE = 9872480840410792472n;
export const SPTLAUD_MD_CLNT_E_ITEM_MUST_HAVE_COMMANDS = 9872488536992186905n;
export const SPTLAUD_MD_CLNT_E_NO_ITEMOFFSET_WRITTEN = 9872489636503814688n;
export const SPTLAUD_MD_CLNT_E_NO_ITEMS_WRITTEN = 9872490736015442465n;
export const SPTLAUD_MD_CLNT_E_COMMAND_ALREADY_WRITTEN = 9872491835527070242n;
export const SPTLAUD_MD_CLNT_E_FORMAT_MISMATCH = 9872492935038698019n;
export const SPTLAUD_MD_CLNT_E_BUFFER_STILL_ATTACHED = 9872494034550325796n;
export const SPTLAUD_MD_CLNT_E_ITEMS_LOCKED_FOR_WRITING = 2886251019141448229n;
export const VIRTUAL_AUDIO_DEVICE_PROCESS_LOOPBACK = `VAD\\Process_Loopback`;
export const WAVERR_BADFORMAT = 32;
export const WAVERR_STILLPLAYING = 33;
export const WAVERR_UNPREPARED = 34;
export const WAVERR_SYNC = 35;
export const WAVERR_LASTERROR = 35;
export const WHDR_DONE = 1;
export const WHDR_PREPARED = 2;
export const WHDR_BEGINLOOP = 4;
export const WHDR_ENDLOOP = 8;
export const WHDR_INQUEUE = 16;
export const WAVECAPS_PITCH = 1;
export const WAVECAPS_PLAYBACKRATE = 2;
export const WAVECAPS_VOLUME = 4;
export const WAVECAPS_LRVOLUME = 8;
export const WAVECAPS_SYNC = 16;
export const WAVECAPS_SAMPLEACCURATE = 32;
export const WAVE_INVALIDFORMAT = 0;
export const WAVE_FORMAT_1M08 = 1;
export const WAVE_FORMAT_1S08 = 2;
export const WAVE_FORMAT_1M16 = 4;
export const WAVE_FORMAT_1S16 = 8;
export const WAVE_FORMAT_2M08 = 16;
export const WAVE_FORMAT_2S08 = 32;
export const WAVE_FORMAT_2M16 = 64;
export const WAVE_FORMAT_2S16 = 128;
export const WAVE_FORMAT_4M08 = 256;
export const WAVE_FORMAT_4S08 = 512;
export const WAVE_FORMAT_4M16 = 1024;
export const WAVE_FORMAT_4S16 = 2048;
export const WAVE_FORMAT_44M08 = 256;
export const WAVE_FORMAT_44S08 = 512;
export const WAVE_FORMAT_44M16 = 1024;
export const WAVE_FORMAT_44S16 = 2048;
export const WAVE_FORMAT_48M08 = 4096;
export const WAVE_FORMAT_48S08 = 8192;
export const WAVE_FORMAT_48M16 = 16384;
export const WAVE_FORMAT_48S16 = 32768;
export const WAVE_FORMAT_96M08 = 65536;
export const WAVE_FORMAT_96S08 = 131072;
export const WAVE_FORMAT_96M16 = 262144;
export const WAVE_FORMAT_96S16 = 524288;
export const WAVE_FORMAT_PCM = 1;
export const MIDIERR_UNPREPARED = 64;
export const MIDIERR_STILLPLAYING = 65;
export const MIDIERR_NOMAP = 66;
export const MIDIERR_NOTREADY = 67;
export const MIDIERR_NODEVICE = 68;
export const MIDIERR_INVALIDSETUP = 69;
export const MIDIERR_BADOPENMODE = 70;
export const MIDIERR_DONT_CONTINUE = 71;
export const MIDIERR_LASTERROR = 71;
export const MIDIPATCHSIZE = 128;
export const MIDI_CACHE_ALL = 1;
export const MIDI_CACHE_BESTFIT = 2;
export const MIDI_CACHE_QUERY = 3;
export const MIDI_UNCACHE = 4;
export const MOD_MIDIPORT = 1;
export const MOD_SYNTH = 2;
export const MOD_SQSYNTH = 3;
export const MOD_FMSYNTH = 4;
export const MOD_MAPPER = 5;
export const MOD_WAVETABLE = 6;
export const MOD_SWSYNTH = 7;
export const MIDICAPS_VOLUME = 1;
export const MIDICAPS_LRVOLUME = 2;
export const MIDICAPS_CACHE = 4;
export const MIDICAPS_STREAM = 8;
export const MHDR_DONE = 1;
export const MHDR_PREPARED = 2;
export const MHDR_INQUEUE = 4;
export const MHDR_ISSTRM = 8;
export const MEVT_F_SHORT = 0;
export const MEVT_F_LONG = `-2147483648`;
export const MEVT_F_CALLBACK = 1073741824;
export const MIDISTRM_ERROR = `-2`;
export const MIDIPROP_SET = `-2147483648`;
export const MIDIPROP_GET = 1073741824;
export const MIDIPROP_TIMEDIV = 1;
export const MIDIPROP_TEMPO = 2;
export const AUXCAPS_CDAUDIO = 1;
export const AUXCAPS_AUXIN = 2;
export const AUXCAPS_VOLUME = 1;
export const AUXCAPS_LRVOLUME = 2;
export const MIXER_SHORT_NAME_CHARS = 16;
export const MIXER_LONG_NAME_CHARS = 64;
export const MIXERR_INVALLINE = 1024;
export const MIXERR_INVALCONTROL = 1025;
export const MIXERR_INVALVALUE = 1026;
export const MIXERR_LASTERROR = 1026;
export const MIXER_OBJECTF_HANDLE = `-2147483648`;
export const MIXER_OBJECTF_MIXER = 0;
export const MIXER_OBJECTF_WAVEOUT = 268435456;
export const MIXER_OBJECTF_WAVEIN = 536870912;
export const MIXER_OBJECTF_MIDIOUT = 805306368;
export const MIXER_OBJECTF_MIDIIN = 1073741824;
export const MIXER_OBJECTF_AUX = 1342177280;
export const MIXERLINE_LINEF_ACTIVE = 1;
export const MIXERLINE_LINEF_DISCONNECTED = 32768;
export const MIXERLINE_LINEF_SOURCE = `-2147483648`;
export const MIXERLINE_COMPONENTTYPE_DST_FIRST = 0;
export const MIXERLINE_COMPONENTTYPE_DST_LAST = 8;
export const MIXERLINE_COMPONENTTYPE_SRC_FIRST = 4096;
export const MIXERLINE_COMPONENTTYPE_SRC_LAST = 4106;
export const MIXERLINE_TARGETTYPE_UNDEFINED = 0;
export const MIXERLINE_TARGETTYPE_WAVEOUT = 1;
export const MIXERLINE_TARGETTYPE_WAVEIN = 2;
export const MIXERLINE_TARGETTYPE_MIDIOUT = 3;
export const MIXERLINE_TARGETTYPE_MIDIIN = 4;
export const MIXERLINE_TARGETTYPE_AUX = 5;
export const MIXER_GETLINEINFOF_DESTINATION = 0;
export const MIXER_GETLINEINFOF_SOURCE = 1;
export const MIXER_GETLINEINFOF_LINEID = 2;
export const MIXER_GETLINEINFOF_COMPONENTTYPE = 3;
export const MIXER_GETLINEINFOF_TARGETTYPE = 4;
export const MIXER_GETLINEINFOF_QUERYMASK = 15;
export const MIXERCONTROL_CONTROLF_UNIFORM = 1;
export const MIXERCONTROL_CONTROLF_MULTIPLE = 2;
export const MIXERCONTROL_CONTROLF_DISABLED = `-2147483648`;
export const MIXERCONTROL_CT_CLASS_MASK = `-268435456`;
export const MIXERCONTROL_CT_CLASS_CUSTOM = 0;
export const MIXERCONTROL_CT_CLASS_METER = 268435456;
export const MIXERCONTROL_CT_CLASS_SWITCH = 536870912;
export const MIXERCONTROL_CT_CLASS_NUMBER = 805306368;
export const MIXERCONTROL_CT_CLASS_SLIDER = 1073741824;
export const MIXERCONTROL_CT_CLASS_FADER = 1342177280;
export const MIXERCONTROL_CT_CLASS_TIME = 1610612736;
export const MIXERCONTROL_CT_CLASS_LIST = 1879048192;
export const MIXERCONTROL_CT_SUBCLASS_MASK = 251658240;
export const MIXERCONTROL_CT_SC_SWITCH_BOOLEAN = 0;
export const MIXERCONTROL_CT_SC_SWITCH_BUTTON = 16777216;
export const MIXERCONTROL_CT_SC_METER_POLLED = 0;
export const MIXERCONTROL_CT_SC_TIME_MICROSECS = 0;
export const MIXERCONTROL_CT_SC_TIME_MILLISECS = 16777216;
export const MIXERCONTROL_CT_SC_LIST_SINGLE = 0;
export const MIXERCONTROL_CT_SC_LIST_MULTIPLE = 16777216;
export const MIXERCONTROL_CT_UNITS_MASK = 16711680;
export const MIXERCONTROL_CT_UNITS_CUSTOM = 0;
export const MIXERCONTROL_CT_UNITS_BOOLEAN = 65536;
export const MIXERCONTROL_CT_UNITS_SIGNED = 131072;
export const MIXERCONTROL_CT_UNITS_UNSIGNED = 196608;
export const MIXERCONTROL_CT_UNITS_DECIBELS = 262144;
export const MIXERCONTROL_CT_UNITS_PERCENT = 327680;
export const MIXER_GETLINECONTROLSF_ALL = 0;
export const MIXER_GETLINECONTROLSF_ONEBYID = 1;
export const MIXER_GETLINECONTROLSF_ONEBYTYPE = 2;
export const MIXER_GETLINECONTROLSF_QUERYMASK = 15;
export const MIXER_GETCONTROLDETAILSF_VALUE = 0;
export const MIXER_GETCONTROLDETAILSF_LISTTEXT = 1;
export const MIXER_GETCONTROLDETAILSF_QUERYMASK = 15;
export const MIXER_SETCONTROLDETAILSF_VALUE = 0;
export const MIXER_SETCONTROLDETAILSF_CUSTOM = 1;
export const MIXER_SETCONTROLDETAILSF_QUERYMASK = 15;
export const DRV_MAPPER_PREFERRED_INPUT_GET = 16384;
export const DRV_MAPPER_PREFERRED_OUTPUT_GET = 16386;
export const DRVM_MAPPER = 8192;
export const DRVM_MAPPER_STATUS = 8192;
export const WIDM_MAPPER_STATUS = 8192;
export const WAVEIN_MAPPER_STATUS_DEVICE = 0;
export const WAVEIN_MAPPER_STATUS_MAPPED = 1;
export const WAVEIN_MAPPER_STATUS_FORMAT = 2;
export const WODM_MAPPER_STATUS = 8192;
export const WAVEOUT_MAPPER_STATUS_DEVICE = 0;
export const WAVEOUT_MAPPER_STATUS_MAPPED = 1;
export const WAVEOUT_MAPPER_STATUS_FORMAT = 2;
export const ACMERR_BASE = 512;
export const ACMERR_NOTPOSSIBLE = 512;
export const ACMERR_BUSY = 513;
export const ACMERR_UNPREPARED = 514;
export const ACMERR_CANCELED = 515;
export const ACM_METRIC_COUNT_DRIVERS = 1;
export const ACM_METRIC_COUNT_CODECS = 2;
export const ACM_METRIC_COUNT_CONVERTERS = 3;
export const ACM_METRIC_COUNT_FILTERS = 4;
export const ACM_METRIC_COUNT_DISABLED = 5;
export const ACM_METRIC_COUNT_HARDWARE = 6;
export const ACM_METRIC_COUNT_LOCAL_DRIVERS = 20;
export const ACM_METRIC_COUNT_LOCAL_CODECS = 21;
export const ACM_METRIC_COUNT_LOCAL_CONVERTERS = 22;
export const ACM_METRIC_COUNT_LOCAL_FILTERS = 23;
export const ACM_METRIC_COUNT_LOCAL_DISABLED = 24;
export const ACM_METRIC_HARDWARE_WAVE_INPUT = 30;
export const ACM_METRIC_HARDWARE_WAVE_OUTPUT = 31;
export const ACM_METRIC_MAX_SIZE_FORMAT = 50;
export const ACM_METRIC_MAX_SIZE_FILTER = 51;
export const ACM_METRIC_DRIVER_SUPPORT = 100;
export const ACM_METRIC_DRIVER_PRIORITY = 101;
export const ACM_DRIVERENUMF_NOLOCAL = 1073741824;
export const ACM_DRIVERENUMF_DISABLED = `-2147483648`;
export const ACM_DRIVERADDF_NAME = 1;
export const ACM_DRIVERADDF_FUNCTION = 3;
export const ACM_DRIVERADDF_NOTIFYHWND = 4;
export const ACM_DRIVERADDF_TYPEMASK = 7;
export const ACM_DRIVERADDF_LOCAL = 0;
export const ACM_DRIVERADDF_GLOBAL = 8;
export const ACMDM_USER = 16384;
export const ACMDM_RESERVED_LOW = 24576;
export const ACMDM_RESERVED_HIGH = 28671;
export const ACMDM_DRIVER_ABOUT = 24587;
export const ACM_DRIVERPRIORITYF_ENABLE = 1;
export const ACM_DRIVERPRIORITYF_DISABLE = 2;
export const ACM_DRIVERPRIORITYF_ABLEMASK = 3;
export const ACM_DRIVERPRIORITYF_BEGIN = 65536;
export const ACM_DRIVERPRIORITYF_END = 131072;
export const ACM_DRIVERPRIORITYF_DEFERMASK = 196608;
export const ACMDRIVERDETAILS_SHORTNAME_CHARS = 32;
export const ACMDRIVERDETAILS_LONGNAME_CHARS = 128;
export const ACMDRIVERDETAILS_COPYRIGHT_CHARS = 80;
export const ACMDRIVERDETAILS_LICENSING_CHARS = 128;
export const ACMDRIVERDETAILS_FEATURES_CHARS = 512;
export const ACMDRIVERDETAILS_SUPPORTF_CODEC = 1;
export const ACMDRIVERDETAILS_SUPPORTF_CONVERTER = 2;
export const ACMDRIVERDETAILS_SUPPORTF_FILTER = 4;
export const ACMDRIVERDETAILS_SUPPORTF_HARDWARE = 8;
export const ACMDRIVERDETAILS_SUPPORTF_ASYNC = 16;
export const ACMDRIVERDETAILS_SUPPORTF_LOCAL = 1073741824;
export const ACMDRIVERDETAILS_SUPPORTF_DISABLED = `-2147483648`;
export const ACMFORMATTAGDETAILS_FORMATTAG_CHARS = 48;
export const ACM_FORMATTAGDETAILSF_INDEX = 0;
export const ACM_FORMATTAGDETAILSF_FORMATTAG = 1;
export const ACM_FORMATTAGDETAILSF_LARGESTSIZE = 2;
export const ACM_FORMATTAGDETAILSF_QUERYMASK = 15;
export const ACMFORMATDETAILS_FORMAT_CHARS = 128;
export const ACM_FORMATDETAILSF_INDEX = 0;
export const ACM_FORMATDETAILSF_FORMAT = 1;
export const ACM_FORMATDETAILSF_QUERYMASK = 15;
export const ACM_FORMATENUMF_WFORMATTAG = 65536;
export const ACM_FORMATENUMF_NCHANNELS = 131072;
export const ACM_FORMATENUMF_NSAMPLESPERSEC = 262144;
export const ACM_FORMATENUMF_WBITSPERSAMPLE = 524288;
export const ACM_FORMATENUMF_CONVERT = 1048576;
export const ACM_FORMATENUMF_SUGGEST = 2097152;
export const ACM_FORMATENUMF_HARDWARE = 4194304;
export const ACM_FORMATENUMF_INPUT = 8388608;
export const ACM_FORMATENUMF_OUTPUT = 16777216;
export const ACM_FORMATSUGGESTF_WFORMATTAG = 65536;
export const ACM_FORMATSUGGESTF_NCHANNELS = 131072;
export const ACM_FORMATSUGGESTF_NSAMPLESPERSEC = 262144;
export const ACM_FORMATSUGGESTF_WBITSPERSAMPLE = 524288;
export const ACM_FORMATSUGGESTF_TYPEMASK = 16711680;
export const ACMHELPMSGSTRINGA = `acmchoose_help`;
export const ACMHELPMSGSTRINGW = `acmchoose_help`;
export const ACMHELPMSGCONTEXTMENUA = `acmchoose_contextmenu`;
export const ACMHELPMSGCONTEXTMENUW = `acmchoose_contextmenu`;
export const ACMHELPMSGCONTEXTHELPA = `acmchoose_contexthelp`;
export const ACMHELPMSGCONTEXTHELPW = `acmchoose_contexthelp`;
export const ACMHELPMSGSTRING = `acmchoose_help`;
export const ACMHELPMSGCONTEXTMENU = `acmchoose_contextmenu`;
export const ACMHELPMSGCONTEXTHELP = `acmchoose_contexthelp`;
export const MM_ACM_FORMATCHOOSE = 32768;
export const FORMATCHOOSE_MESSAGE = 0;
export const FORMATCHOOSE_FORMATTAG_VERIFY = 0;
export const FORMATCHOOSE_FORMAT_VERIFY = 1;
export const FORMATCHOOSE_CUSTOM_VERIFY = 2;
export const ACMFORMATCHOOSE_STYLEF_SHOWHELP = 4;
export const ACMFORMATCHOOSE_STYLEF_ENABLEHOOK = 8;
export const ACMFORMATCHOOSE_STYLEF_ENABLETEMPLATE = 16;
export const ACMFORMATCHOOSE_STYLEF_ENABLETEMPLATEHANDLE = 32;
export const ACMFORMATCHOOSE_STYLEF_INITTOWFXSTRUCT = 64;
export const ACMFORMATCHOOSE_STYLEF_CONTEXTHELP = 128;
export const ACMFILTERTAGDETAILS_FILTERTAG_CHARS = 48;
export const ACM_FILTERTAGDETAILSF_INDEX = 0;
export const ACM_FILTERTAGDETAILSF_FILTERTAG = 1;
export const ACM_FILTERTAGDETAILSF_LARGESTSIZE = 2;
export const ACM_FILTERTAGDETAILSF_QUERYMASK = 15;
export const ACMFILTERDETAILS_FILTER_CHARS = 128;
export const ACM_FILTERDETAILSF_INDEX = 0;
export const ACM_FILTERDETAILSF_FILTER = 1;
export const ACM_FILTERDETAILSF_QUERYMASK = 15;
export const ACM_FILTERENUMF_DWFILTERTAG = 65536;
export const MM_ACM_FILTERCHOOSE = 32768;
export const FILTERCHOOSE_MESSAGE = 0;
export const FILTERCHOOSE_FILTERTAG_VERIFY = 0;
export const FILTERCHOOSE_FILTER_VERIFY = 1;
export const FILTERCHOOSE_CUSTOM_VERIFY = 2;
export const ACMFILTERCHOOSE_STYLEF_SHOWHELP = 4;
export const ACMFILTERCHOOSE_STYLEF_ENABLEHOOK = 8;
export const ACMFILTERCHOOSE_STYLEF_ENABLETEMPLATE = 16;
export const ACMFILTERCHOOSE_STYLEF_ENABLETEMPLATEHANDLE = 32;
export const ACMFILTERCHOOSE_STYLEF_INITTOFILTERSTRUCT = 64;
export const ACMFILTERCHOOSE_STYLEF_CONTEXTHELP = 128;
export const ACMSTREAMHEADER_STATUSF_DONE = 65536;
export const ACMSTREAMHEADER_STATUSF_PREPARED = 131072;
export const ACMSTREAMHEADER_STATUSF_INQUEUE = 1048576;
export const ACM_STREAMOPENF_QUERY = 1;
export const ACM_STREAMOPENF_ASYNC = 2;
export const ACM_STREAMOPENF_NONREALTIME = 4;
export const ACM_STREAMSIZEF_SOURCE = 0;
export const ACM_STREAMSIZEF_DESTINATION = 1;
export const ACM_STREAMSIZEF_QUERYMASK = 15;
export const ACM_STREAMCONVERTF_BLOCKALIGN = 4;
export const ACM_STREAMCONVERTF_START = 16;
export const ACM_STREAMCONVERTF_END = 32;
export const SND_RING = 1048576;
export const SND_ALIAS_START = 0;
export const ACMDM_DRIVER_NOTIFY = 24577;
export const ACMDM_DRIVER_DETAILS = 24586;
export const ACMDM_HARDWARE_WAVE_CAPS_INPUT = 24596;
export const ACMDM_HARDWARE_WAVE_CAPS_OUTPUT = 24597;
export const ACMDM_FORMATTAG_DETAILS = 24601;
export const ACMDM_FORMAT_DETAILS = 24602;
export const ACMDM_FORMAT_SUGGEST = 24603;
export const ACMDM_FILTERTAG_DETAILS = 24626;
export const ACMDM_FILTER_DETAILS = 24627;
export const ACMDM_STREAM_OPEN = 24652;
export const ACMDM_STREAM_CLOSE = 24653;
export const ACMDM_STREAM_SIZE = 24654;
export const ACMDM_STREAM_CONVERT = 24655;
export const ACMDM_STREAM_RESET = 24656;
export const ACMDM_STREAM_PREPARE = 24657;
export const ACMDM_STREAM_UNPREPARE = 24658;
export const ACMDM_STREAM_UPDATE = 24659;
export const CALLBACK_TYPEMASK = 458752;
export const CALLBACK_NULL = 0;
export const CALLBACK_WINDOW = 65536;
export const CALLBACK_TASK = 131072;
export const CALLBACK_FUNCTION = 196608;
export const CALLBACK_THREAD = 131072;
export const CALLBACK_EVENT = 327680;
export const WAVE_FORMAT_QUERY = 1;
export const WAVE_ALLOWSYNC = 2;
export const WAVE_MAPPED = 4;
export const WAVE_FORMAT_DIRECT = 8;
export const WAVE_FORMAT_DIRECT_QUERY = 9;
export const WAVE_MAPPED_DEFAULT_COMMUNICATION_DEVICE = 16;
export const MIDI_IO_STATUS = 32;
export const SND_APPLICATION = 128;
export const SND_ALIAS = 65536;
export const SND_ALIAS_ID = 1114112;
export const SND_FILENAME = 131072;
export const SND_RESOURCE = 262148;
export const SND_ASYNC = 1;
export const SND_NODEFAULT = 2;
export const SND_LOOP = 8;
export const SND_MEMORY = 4;
export const SND_NOSTOP = 16;
export const SND_NOWAIT = 8192;
export const SND_PURGE = 64;
export const SND_SENTRY = 524288;
export const SND_SYNC = 0;
export const SND_SYSTEM = 2097152;
export const MIXERLINE_COMPONENTTYPE_DST_DIGITAL = 1;
export const MIXERLINE_COMPONENTTYPE_DST_HEADPHONES = 5;
export const MIXERLINE_COMPONENTTYPE_DST_LINE = 2;
export const MIXERLINE_COMPONENTTYPE_DST_MONITOR = 3;
export const MIXERLINE_COMPONENTTYPE_DST_SPEAKERS = 4;
export const MIXERLINE_COMPONENTTYPE_DST_TELEPHONE = 6;
export const MIXERLINE_COMPONENTTYPE_DST_UNDEFINED = 0;
export const MIXERLINE_COMPONENTTYPE_DST_VOICEIN = 8;
export const MIXERLINE_COMPONENTTYPE_DST_WAVEIN = 7;
export const MIXERLINE_COMPONENTTYPE_SRC_ANALOG = 4106;
export const MIXERLINE_COMPONENTTYPE_SRC_AUXILIARY = 4105;
export const MIXERLINE_COMPONENTTYPE_SRC_COMPACTDISC = 4101;
export const MIXERLINE_COMPONENTTYPE_SRC_DIGITAL = 4097;
export const MIXERLINE_COMPONENTTYPE_SRC_LINE = 4098;
export const MIXERLINE_COMPONENTTYPE_SRC_MICROPHONE = 4099;
export const MIXERLINE_COMPONENTTYPE_SRC_PCSPEAKER = 4103;
export const MIXERLINE_COMPONENTTYPE_SRC_SYNTHESIZER = 4100;
export const MIXERLINE_COMPONENTTYPE_SRC_TELEPHONE = 4102;
export const MIXERLINE_COMPONENTTYPE_SRC_UNDEFINED = 4096;
export const MIXERLINE_COMPONENTTYPE_SRC_WAVEOUT = 4104;
export const APOERR_ALREADY_INITIALIZED = 9007201473234010113n;
export const APOERR_NOT_INITIALIZED = 9007202572745637890n;
export const APOERR_FORMAT_NOT_SUPPORTED = 9007203672257265667n;
export const APOERR_INVALID_APO_CLSID = 9007204771768893444n;
export const APOERR_BUFFERS_OVERLAP = 9007205871280521221n;
export const APOERR_ALREADY_UNLOCKED = 9007206970792148998n;
export const APOERR_NUM_CONNECTIONS_INVALID = 9007208070303776775n;
export const APOERR_INVALID_OUTPUT_MAXFRAMECOUNT = 9007209169815404552n;
export const APOERR_INVALID_CONNECTION_FORMAT = 9007210269327032329n;
export const APOERR_APO_LOCKED = 9007211368838660106n;
export const APOERR_INVALID_COEFFCOUNT = 9007212468350287883n;
export const APOERR_INVALID_COEFFICIENT = 9007213567861915660n;
export const APOERR_INVALID_CURVE_PARAM = 9007214667373543437n;
export const APOERR_INVALID_INPUTID = 36649631758;
export const AUDIO_MIN_FRAMERATE = 10;
export const AUDIO_MAX_FRAMERATE = 384000;
export const AUDIO_MIN_CHANNELS = 1;
export const AUDIO_MAX_CHANNELS = 4096;
export const AUDIOMEDIATYPE_EQUAL_FORMAT_TYPES = 2;
export const AUDIOMEDIATYPE_EQUAL_FORMAT_DATA = 4;
export const AUDIOMEDIATYPE_EQUAL_FORMAT_USER_DATA = 8;
export const DMUS_MAX_DESCRIPTION = 128;
export const DMUS_MAX_DRIVER = 128;
export const DMUS_EFFECT_NONE = 0;
export const DMUS_EFFECT_REVERB = 1;
export const DMUS_EFFECT_CHORUS = 2;
export const DMUS_EFFECT_DELAY = 4;
export const DMUS_PC_INPUTCLASS = 0;
export const DMUS_PC_OUTPUTCLASS = 1;
export const DMUS_PC_DLS = 1;
export const DMUS_PC_EXTERNAL = 2;
export const DMUS_PC_SOFTWARESYNTH = 4;
export const DMUS_PC_MEMORYSIZEFIXED = 8;
export const DMUS_PC_GMINHARDWARE = 16;
export const DMUS_PC_GSINHARDWARE = 32;
export const DMUS_PC_XGINHARDWARE = 64;
export const DMUS_PC_DIRECTSOUND = 128;
export const DMUS_PC_SHAREABLE = 256;
export const DMUS_PC_DLS2 = 512;
export const DMUS_PC_AUDIOPATH = 1024;
export const DMUS_PC_WAVE = 2048;
export const DMUS_PC_SYSTEMMEMORY = 2147483647;
export const DMUS_PORT_WINMM_DRIVER = 0;
export const DMUS_PORT_USER_MODE_SYNTH = 1;
export const DMUS_PORT_KERNEL_MODE = 2;
export const DMUS_PORTPARAMS_VOICES = 1;
export const DMUS_PORTPARAMS_CHANNELGROUPS = 2;
export const DMUS_PORTPARAMS_AUDIOCHANNELS = 4;
export const DMUS_PORTPARAMS_SAMPLERATE = 8;
export const DMUS_PORTPARAMS_EFFECTS = 32;
export const DMUS_PORTPARAMS_SHARE = 64;
export const DMUS_PORTPARAMS_FEATURES = 128;
export const DMUS_PORT_FEATURE_AUDIOPATH = 1;
export const DMUS_PORT_FEATURE_STREAMING = 2;
export const DMUS_SYNTHSTATS_VOICES = 1;
export const DMUS_SYNTHSTATS_TOTAL_CPU = 2;
export const DMUS_SYNTHSTATS_CPU_PER_VOICE = 4;
export const DMUS_SYNTHSTATS_LOST_NOTES = 8;
export const DMUS_SYNTHSTATS_PEAK_VOLUME = 16;
export const DMUS_SYNTHSTATS_FREE_MEMORY = 32;
export const DMUS_SYNTHSTATS_SYSTEMMEMORY = 2147483647;
export const DMUS_CLOCKF_GLOBAL = 1;
export const DSBUSID_FIRST_SPKR_LOC = 0;
export const DSBUSID_FRONT_LEFT = 0;
export const DSBUSID_LEFT = 0;
export const DSBUSID_FRONT_RIGHT = 1;
export const DSBUSID_RIGHT = 1;
export const DSBUSID_FRONT_CENTER = 2;
export const DSBUSID_LOW_FREQUENCY = 3;
export const DSBUSID_BACK_LEFT = 4;
export const DSBUSID_BACK_RIGHT = 5;
export const DSBUSID_FRONT_LEFT_OF_CENTER = 6;
export const DSBUSID_FRONT_RIGHT_OF_CENTER = 7;
export const DSBUSID_BACK_CENTER = 8;
export const DSBUSID_SIDE_LEFT = 9;
export const DSBUSID_SIDE_RIGHT = 10;
export const DSBUSID_TOP_CENTER = 11;
export const DSBUSID_TOP_FRONT_LEFT = 12;
export const DSBUSID_TOP_FRONT_CENTER = 13;
export const DSBUSID_TOP_FRONT_RIGHT = 14;
export const DSBUSID_TOP_BACK_LEFT = 15;
export const DSBUSID_TOP_BACK_CENTER = 16;
export const DSBUSID_TOP_BACK_RIGHT = 17;
export const DSBUSID_LAST_SPKR_LOC = 17;
export const DSBUSID_REVERB_SEND = 64;
export const DSBUSID_CHORUS_SEND = 65;
export const DSBUSID_DYNAMIC_0 = 512;
export const DSBUSID_NULL = 4294967295;
export const DAUD_CRITICAL_VOICE_PRIORITY = 4026531840;
export const DAUD_HIGH_VOICE_PRIORITY = 3221225472;
export const DAUD_STANDARD_VOICE_PRIORITY = 2147483648;
export const DAUD_LOW_VOICE_PRIORITY = 1073741824;
export const DAUD_PERSIST_VOICE_PRIORITY = 268435456;
export const DAUD_CHAN1_VOICE_PRIORITY_OFFSET = 14;
export const DAUD_CHAN2_VOICE_PRIORITY_OFFSET = 13;
export const DAUD_CHAN3_VOICE_PRIORITY_OFFSET = 12;
export const DAUD_CHAN4_VOICE_PRIORITY_OFFSET = 11;
export const DAUD_CHAN5_VOICE_PRIORITY_OFFSET = 10;
export const DAUD_CHAN6_VOICE_PRIORITY_OFFSET = 9;
export const DAUD_CHAN7_VOICE_PRIORITY_OFFSET = 8;
export const DAUD_CHAN8_VOICE_PRIORITY_OFFSET = 7;
export const DAUD_CHAN9_VOICE_PRIORITY_OFFSET = 6;
export const DAUD_CHAN10_VOICE_PRIORITY_OFFSET = 15;
export const DAUD_CHAN11_VOICE_PRIORITY_OFFSET = 5;
export const DAUD_CHAN12_VOICE_PRIORITY_OFFSET = 4;
export const DAUD_CHAN13_VOICE_PRIORITY_OFFSET = 3;
export const DAUD_CHAN14_VOICE_PRIORITY_OFFSET = 2;
export const DAUD_CHAN15_VOICE_PRIORITY_OFFSET = 1;
export const DAUD_CHAN16_VOICE_PRIORITY_OFFSET = 0;
export const DMUS_VOLUME_MAX = 2000;
export const DMUS_VOLUME_MIN = `-20000`;
export const DMUS_EVENT_STRUCTURED = 1;
export const DMUS_DOWNLOADINFO_INSTRUMENT = 1;
export const DMUS_DOWNLOADINFO_WAVE = 2;
export const DMUS_DOWNLOADINFO_INSTRUMENT2 = 3;
export const DMUS_DOWNLOADINFO_WAVEARTICULATION = 4;
export const DMUS_DOWNLOADINFO_STREAMINGWAVE = 5;
export const DMUS_DOWNLOADINFO_ONESHOTWAVE = 6;
export const DMUS_DEFAULT_SIZE_OFFSETTABLE = 1;
export const DMUS_INSTRUMENT_GM_INSTRUMENT = 1;
export const DMUS_MIN_DATA_SIZE = 4;
export const CONN_SRC_NONE = 0;
export const CONN_SRC_LFO = 1;
export const CONN_SRC_KEYONVELOCITY = 2;
export const CONN_SRC_KEYNUMBER = 3;
export const CONN_SRC_EG1 = 4;
export const CONN_SRC_EG2 = 5;
export const CONN_SRC_PITCHWHEEL = 6;
export const CONN_SRC_CC1 = 129;
export const CONN_SRC_CC7 = 135;
export const CONN_SRC_CC10 = 138;
export const CONN_SRC_CC11 = 139;
export const CONN_DST_NONE = 0;
export const CONN_DST_ATTENUATION = 1;
export const CONN_DST_PITCH = 3;
export const CONN_DST_PAN = 4;
export const CONN_DST_LFO_FREQUENCY = 260;
export const CONN_DST_LFO_STARTDELAY = 261;
export const CONN_DST_EG1_ATTACKTIME = 518;
export const CONN_DST_EG1_DECAYTIME = 519;
export const CONN_DST_EG1_RELEASETIME = 521;
export const CONN_DST_EG1_SUSTAINLEVEL = 522;
export const CONN_DST_EG2_ATTACKTIME = 778;
export const CONN_DST_EG2_DECAYTIME = 779;
export const CONN_DST_EG2_RELEASETIME = 781;
export const CONN_DST_EG2_SUSTAINLEVEL = 782;
export const CONN_TRN_NONE = 0;
export const CONN_TRN_CONCAVE = 1;
export const F_INSTRUMENT_DRUMS = 2147483648;
export const F_RGN_OPTION_SELFNONEXCLUSIVE = 1;
export const WAVELINK_CHANNEL_LEFT = 1;
export const WAVELINK_CHANNEL_RIGHT = 2;
export const F_WAVELINK_PHASE_MASTER = 1;
export const POOL_CUE_NULL = `-1`;
export const F_WSMP_NO_TRUNCATION = 1;
export const F_WSMP_NO_COMPRESSION = 2;
export const WLOOP_TYPE_FORWARD = 0;
export const CONN_SRC_POLYPRESSURE = 7;
export const CONN_SRC_CHANNELPRESSURE = 8;
export const CONN_SRC_VIBRATO = 9;
export const CONN_SRC_MONOPRESSURE = 10;
export const CONN_SRC_CC91 = 219;
export const CONN_SRC_CC93 = 221;
export const CONN_DST_GAIN = 1;
export const CONN_DST_KEYNUMBER = 5;
export const CONN_DST_LEFT = 16;
export const CONN_DST_RIGHT = 17;
export const CONN_DST_CENTER = 18;
export const CONN_DST_LEFTREAR = 19;
export const CONN_DST_RIGHTREAR = 20;
export const CONN_DST_LFE_CHANNEL = 21;
export const CONN_DST_CHORUS = 128;
export const CONN_DST_REVERB = 129;
export const CONN_DST_VIB_FREQUENCY = 276;
export const CONN_DST_VIB_STARTDELAY = 277;
export const CONN_DST_EG1_DELAYTIME = 523;
export const CONN_DST_EG1_HOLDTIME = 524;
export const CONN_DST_EG1_SHUTDOWNTIME = 525;
export const CONN_DST_EG2_DELAYTIME = 783;
export const CONN_DST_EG2_HOLDTIME = 784;
export const CONN_DST_FILTER_CUTOFF = 1280;
export const CONN_DST_FILTER_Q = 1281;
export const CONN_TRN_CONVEX = 2;
export const CONN_TRN_SWITCH = 3;
export const DLS_CDL_AND = 1;
export const DLS_CDL_OR = 2;
export const DLS_CDL_XOR = 3;
export const DLS_CDL_ADD = 4;
export const DLS_CDL_SUBTRACT = 5;
export const DLS_CDL_MULTIPLY = 6;
export const DLS_CDL_DIVIDE = 7;
export const DLS_CDL_LOGICAL_AND = 8;
export const DLS_CDL_LOGICAL_OR = 9;
export const DLS_CDL_LT = 10;
export const DLS_CDL_LE = 11;
export const DLS_CDL_GT = 12;
export const DLS_CDL_GE = 13;
export const DLS_CDL_EQ = 14;
export const DLS_CDL_NOT = 15;
export const DLS_CDL_CONST = 16;
export const DLS_CDL_QUERY = 17;
export const DLS_CDL_QUERYSUPPORTED = 18;
export const WLOOP_TYPE_RELEASE = 2;
export const F_WAVELINK_MULTICHANNEL = 2;
export const REGSTR_PATH_SOFTWARESYNTHS = `Software\\Microsoft\\DirectMusic\\SoftwareSynths`;
export const REFRESH_F_LASTBUFFER = 1;
export const DV_DVSD_NTSC_FRAMESIZE = 120000;
export const DV_DVSD_PAL_FRAMESIZE = 144000;
export const DV_SMCHN = 57344;
export const DV_AUDIOMODE = 3840;
export const DV_AUDIOSMP = 939524096;
export const DV_AUDIOQU = 117440512;
export const DV_NTSCPAL = 2097152;
export const DV_STYPE = 2031616;
export const DV_NTSC = 0;
export const DV_PAL = 1;
export const DV_SD = 0;
export const DV_HD = 1;
export const DV_SL = 2;
export const DV_CAP_AUD16Bits = 0;
export const DV_CAP_AUD12Bits = 1;
export const SIZE_DVINFO = 32;
export const DIRECTSOUND_VERSION = 1792;
export const _FACDS = 2168;
export const DSFX_LOCHARDWARE = 1;
export const DSFX_LOCSOFTWARE = 2;
export const DSCFX_LOCHARDWARE = 1;
export const DSCFX_LOCSOFTWARE = 2;
export const DSCFXR_LOCHARDWARE = 16;
export const DSCFXR_LOCSOFTWARE = 32;
export const KSPROPERTY_SUPPORT_GET = 1;
export const KSPROPERTY_SUPPORT_SET = 2;
export const DSFXGARGLE_WAVE_TRIANGLE = 0;
export const DSFXGARGLE_WAVE_SQUARE = 1;
export const DSFXGARGLE_RATEHZ_MIN = 1;
export const DSFXGARGLE_RATEHZ_MAX = 1000;
export const DSFXCHORUS_WAVE_TRIANGLE = 0;
export const DSFXCHORUS_WAVE_SIN = 1;
export const DSFXCHORUS_WETDRYMIX_MIN = 0;
export const DSFXCHORUS_WETDRYMIX_MAX = 100;
export const DSFXCHORUS_DEPTH_MIN = 0;
export const DSFXCHORUS_DEPTH_MAX = 100;
export const DSFXCHORUS_FEEDBACK_MIN = `-99`;
export const DSFXCHORUS_FEEDBACK_MAX = 99;
export const DSFXCHORUS_FREQUENCY_MIN = 0;
export const DSFXCHORUS_FREQUENCY_MAX = 10;
export const DSFXCHORUS_DELAY_MIN = 0;
export const DSFXCHORUS_DELAY_MAX = 20;
export const DSFXCHORUS_PHASE_MIN = 0;
export const DSFXCHORUS_PHASE_MAX = 4;
export const DSFXCHORUS_PHASE_NEG_180 = 0;
export const DSFXCHORUS_PHASE_NEG_90 = 1;
export const DSFXCHORUS_PHASE_ZERO = 2;
export const DSFXCHORUS_PHASE_90 = 3;
export const DSFXCHORUS_PHASE_180 = 4;
export const DSFXFLANGER_WAVE_TRIANGLE = 0;
export const DSFXFLANGER_WAVE_SIN = 1;
export const DSFXFLANGER_WETDRYMIX_MIN = 0;
export const DSFXFLANGER_WETDRYMIX_MAX = 100;
export const DSFXFLANGER_FREQUENCY_MIN = 0;
export const DSFXFLANGER_FREQUENCY_MAX = 10;
export const DSFXFLANGER_DEPTH_MIN = 0;
export const DSFXFLANGER_DEPTH_MAX = 100;
export const DSFXFLANGER_PHASE_MIN = 0;
export const DSFXFLANGER_PHASE_MAX = 4;
export const DSFXFLANGER_FEEDBACK_MIN = `-99`;
export const DSFXFLANGER_FEEDBACK_MAX = 99;
export const DSFXFLANGER_DELAY_MIN = 0;
export const DSFXFLANGER_DELAY_MAX = 4;
export const DSFXFLANGER_PHASE_NEG_180 = 0;
export const DSFXFLANGER_PHASE_NEG_90 = 1;
export const DSFXFLANGER_PHASE_ZERO = 2;
export const DSFXFLANGER_PHASE_90 = 3;
export const DSFXFLANGER_PHASE_180 = 4;
export const DSFXECHO_WETDRYMIX_MIN = 0;
export const DSFXECHO_WETDRYMIX_MAX = 100;
export const DSFXECHO_FEEDBACK_MIN = 0;
export const DSFXECHO_FEEDBACK_MAX = 100;
export const DSFXECHO_LEFTDELAY_MIN = 1;
export const DSFXECHO_LEFTDELAY_MAX = 2000;
export const DSFXECHO_RIGHTDELAY_MIN = 1;
export const DSFXECHO_RIGHTDELAY_MAX = 2000;
export const DSFXECHO_PANDELAY_MIN = 0;
export const DSFXECHO_PANDELAY_MAX = 1;
export const DSFXDISTORTION_GAIN_MIN = `-60`;
export const DSFXDISTORTION_GAIN_MAX = 0;
export const DSFXDISTORTION_EDGE_MIN = 0;
export const DSFXDISTORTION_EDGE_MAX = 100;
export const DSFXDISTORTION_POSTEQCENTERFREQUENCY_MIN = 100;
export const DSFXDISTORTION_POSTEQCENTERFREQUENCY_MAX = 8000;
export const DSFXDISTORTION_POSTEQBANDWIDTH_MIN = 100;
export const DSFXDISTORTION_POSTEQBANDWIDTH_MAX = 8000;
export const DSFXDISTORTION_PRELOWPASSCUTOFF_MIN = 100;
export const DSFXDISTORTION_PRELOWPASSCUTOFF_MAX = 8000;
export const DSFXCOMPRESSOR_GAIN_MIN = `-60`;
export const DSFXCOMPRESSOR_GAIN_MAX = 60;
export const DSFXCOMPRESSOR_ATTACK_MIN = `0.009999999776482582`;
export const DSFXCOMPRESSOR_ATTACK_MAX = 500;
export const DSFXCOMPRESSOR_RELEASE_MIN = 50;
export const DSFXCOMPRESSOR_RELEASE_MAX = 3000;
export const DSFXCOMPRESSOR_THRESHOLD_MIN = `-60`;
export const DSFXCOMPRESSOR_THRESHOLD_MAX = 0;
export const DSFXCOMPRESSOR_RATIO_MIN = 1;
export const DSFXCOMPRESSOR_RATIO_MAX = 100;
export const DSFXCOMPRESSOR_PREDELAY_MIN = 0;
export const DSFXCOMPRESSOR_PREDELAY_MAX = 4;
export const DSFXPARAMEQ_CENTER_MIN = 80;
export const DSFXPARAMEQ_CENTER_MAX = 16000;
export const DSFXPARAMEQ_BANDWIDTH_MIN = 1;
export const DSFXPARAMEQ_BANDWIDTH_MAX = 36;
export const DSFXPARAMEQ_GAIN_MIN = `-15`;
export const DSFXPARAMEQ_GAIN_MAX = 15;
export const DSFX_I3DL2REVERB_ROOM_MIN = `-10000`;
export const DSFX_I3DL2REVERB_ROOM_MAX = 0;
export const DSFX_I3DL2REVERB_ROOM_DEFAULT = `-1000`;
export const DSFX_I3DL2REVERB_ROOMHF_MIN = `-10000`;
export const DSFX_I3DL2REVERB_ROOMHF_MAX = 0;
export const DSFX_I3DL2REVERB_ROOMHF_DEFAULT = `-100`;
export const DSFX_I3DL2REVERB_ROOMROLLOFFFACTOR_MIN = 0;
export const DSFX_I3DL2REVERB_ROOMROLLOFFFACTOR_MAX = 10;
export const DSFX_I3DL2REVERB_ROOMROLLOFFFACTOR_DEFAULT = 0;
export const DSFX_I3DL2REVERB_DECAYTIME_MIN = `0.10000000149011612`;
export const DSFX_I3DL2REVERB_DECAYTIME_MAX = 20;
export const DSFX_I3DL2REVERB_DECAYTIME_DEFAULT = `1.4900000095367432`;
export const DSFX_I3DL2REVERB_DECAYHFRATIO_MIN = `0.10000000149011612`;
export const DSFX_I3DL2REVERB_DECAYHFRATIO_MAX = 2;
export const DSFX_I3DL2REVERB_DECAYHFRATIO_DEFAULT = `0.8299999833106995`;
export const DSFX_I3DL2REVERB_REFLECTIONS_MIN = `-10000`;
export const DSFX_I3DL2REVERB_REFLECTIONS_MAX = 1000;
export const DSFX_I3DL2REVERB_REFLECTIONS_DEFAULT = `-2602`;
export const DSFX_I3DL2REVERB_REFLECTIONSDELAY_MIN = 0;
export const DSFX_I3DL2REVERB_REFLECTIONSDELAY_MAX = `0.30000001192092896`;
export const DSFX_I3DL2REVERB_REFLECTIONSDELAY_DEFAULT = `0.007000000216066837`;
export const DSFX_I3DL2REVERB_REVERB_MIN = `-10000`;
export const DSFX_I3DL2REVERB_REVERB_MAX = 2000;
export const DSFX_I3DL2REVERB_REVERB_DEFAULT = 200;
export const DSFX_I3DL2REVERB_REVERBDELAY_MIN = 0;
export const DSFX_I3DL2REVERB_REVERBDELAY_MAX = `0.10000000149011612`;
export const DSFX_I3DL2REVERB_REVERBDELAY_DEFAULT = `0.010999999940395355`;
export const DSFX_I3DL2REVERB_DIFFUSION_MIN = 0;
export const DSFX_I3DL2REVERB_DIFFUSION_MAX = 100;
export const DSFX_I3DL2REVERB_DIFFUSION_DEFAULT = 100;
export const DSFX_I3DL2REVERB_DENSITY_MIN = 0;
export const DSFX_I3DL2REVERB_DENSITY_MAX = 100;
export const DSFX_I3DL2REVERB_DENSITY_DEFAULT = 100;
export const DSFX_I3DL2REVERB_HFREFERENCE_MIN = 20;
export const DSFX_I3DL2REVERB_HFREFERENCE_MAX = 20000;
export const DSFX_I3DL2REVERB_HFREFERENCE_DEFAULT = 5000;
export const DSFX_I3DL2REVERB_QUALITY_MIN = 0;
export const DSFX_I3DL2REVERB_QUALITY_MAX = 3;
export const DSFX_I3DL2REVERB_QUALITY_DEFAULT = 2;
export const DSFX_WAVESREVERB_INGAIN_MIN = `-96`;
export const DSFX_WAVESREVERB_INGAIN_MAX = 0;
export const DSFX_WAVESREVERB_INGAIN_DEFAULT = 0;
export const DSFX_WAVESREVERB_REVERBMIX_MIN = `-96`;
export const DSFX_WAVESREVERB_REVERBMIX_MAX = 0;
export const DSFX_WAVESREVERB_REVERBMIX_DEFAULT = 0;
export const DSFX_WAVESREVERB_REVERBTIME_MIN = `0.0010000000474974513`;
export const DSFX_WAVESREVERB_REVERBTIME_MAX = 3000;
export const DSFX_WAVESREVERB_REVERBTIME_DEFAULT = 1000;
export const DSFX_WAVESREVERB_HIGHFREQRTRATIO_MIN = `0.0010000000474974513`;
export const DSFX_WAVESREVERB_HIGHFREQRTRATIO_MAX = `0.9990000128746033`;
export const DSFX_WAVESREVERB_HIGHFREQRTRATIO_DEFAULT = `0.0010000000474974513`;
export const DSCFX_AEC_MODE_PASS_THROUGH = 0;
export const DSCFX_AEC_MODE_HALF_DUPLEX = 1;
export const DSCFX_AEC_MODE_FULL_DUPLEX = 2;
export const DSCFX_AEC_STATUS_HISTORY_UNINITIALIZED = 0;
export const DSCFX_AEC_STATUS_HISTORY_CONTINUOUSLY_CONVERGED = 1;
export const DSCFX_AEC_STATUS_HISTORY_PREVIOUSLY_DIVERGED = 2;
export const DSCFX_AEC_STATUS_CURRENTLY_CONVERGED = 8;
export const DS_NO_VIRTUALIZATION = 219902342877151242n;
export const DSCAPS_PRIMARYMONO = 1;
export const DSCAPS_PRIMARYSTEREO = 2;
export const DSCAPS_PRIMARY8BIT = 4;
export const DSCAPS_PRIMARY16BIT = 8;
export const DSCAPS_CONTINUOUSRATE = 16;
export const DSCAPS_EMULDRIVER = 32;
export const DSCAPS_CERTIFIED = 64;
export const DSCAPS_SECONDARYMONO = 256;
export const DSCAPS_SECONDARYSTEREO = 512;
export const DSCAPS_SECONDARY8BIT = 1024;
export const DSCAPS_SECONDARY16BIT = 2048;
export const DSSCL_NORMAL = 1;
export const DSSCL_PRIORITY = 2;
export const DSSCL_EXCLUSIVE = 3;
export const DSSCL_WRITEPRIMARY = 4;
export const DSSPEAKER_DIRECTOUT = 0;
export const DSSPEAKER_HEADPHONE = 1;
export const DSSPEAKER_MONO = 2;
export const DSSPEAKER_QUAD = 3;
export const DSSPEAKER_STEREO = 4;
export const DSSPEAKER_SURROUND = 5;
export const DSSPEAKER_5POINT1 = 6;
export const DSSPEAKER_7POINT1 = 7;
export const DSSPEAKER_7POINT1_SURROUND = 8;
export const DSSPEAKER_5POINT1_SURROUND = 9;
export const DSSPEAKER_7POINT1_WIDE = 7;
export const DSSPEAKER_5POINT1_BACK = 6;
export const DSSPEAKER_GEOMETRY_MIN = 5;
export const DSSPEAKER_GEOMETRY_NARROW = 10;
export const DSSPEAKER_GEOMETRY_WIDE = 20;
export const DSSPEAKER_GEOMETRY_MAX = 180;
export const DSBCAPS_PRIMARYBUFFER = 1;
export const DSBCAPS_STATIC = 2;
export const DSBCAPS_LOCHARDWARE = 4;
export const DSBCAPS_LOCSOFTWARE = 8;
export const DSBCAPS_CTRL3D = 16;
export const DSBCAPS_CTRLFREQUENCY = 32;
export const DSBCAPS_CTRLPAN = 64;
export const DSBCAPS_CTRLVOLUME = 128;
export const DSBCAPS_CTRLPOSITIONNOTIFY = 256;
export const DSBCAPS_CTRLFX = 512;
export const DSBCAPS_STICKYFOCUS = 16384;
export const DSBCAPS_GLOBALFOCUS = 32768;
export const DSBCAPS_GETCURRENTPOSITION2 = 65536;
export const DSBCAPS_MUTE3DATMAXDISTANCE = 131072;
export const DSBCAPS_LOCDEFER = 262144;
export const DSBCAPS_TRUEPLAYPOSITION = 524288;
export const DSBPLAY_LOOPING = 1;
export const DSBPLAY_LOCHARDWARE = 2;
export const DSBPLAY_LOCSOFTWARE = 4;
export const DSBPLAY_TERMINATEBY_TIME = 8;
export const DSBPLAY_TERMINATEBY_DISTANCE = 16;
export const DSBPLAY_TERMINATEBY_PRIORITY = 32;
export const DSBSTATUS_PLAYING = 1;
export const DSBSTATUS_BUFFERLOST = 2;
export const DSBSTATUS_LOOPING = 4;
export const DSBSTATUS_LOCHARDWARE = 8;
export const DSBSTATUS_LOCSOFTWARE = 16;
export const DSBSTATUS_TERMINATED = 32;
export const DSBLOCK_FROMWRITECURSOR = 1;
export const DSBLOCK_ENTIREBUFFER = 2;
export const DSBFREQUENCY_ORIGINAL = 0;
export const DSBFREQUENCY_MIN = 100;
export const DSBFREQUENCY_MAX = 200000;
export const DSBPAN_LEFT = `-10000`;
export const DSBPAN_CENTER = 0;
export const DSBPAN_RIGHT = 10000;
export const DSBVOLUME_MIN = `-10000`;
export const DSBVOLUME_MAX = 0;
export const DSBSIZE_MIN = 4;
export const DSBSIZE_MAX = 268435455;
export const DSBSIZE_FX_MIN = 150;
export const DSBNOTIFICATIONS_MAX = 100000;
export const DS3DMODE_NORMAL = 0;
export const DS3DMODE_HEADRELATIVE = 1;
export const DS3DMODE_DISABLE = 2;
export const DS3D_IMMEDIATE = 0;
export const DS3D_DEFERRED = 1;
export const DS3D_DEFAULTDISTANCEFACTOR = 1;
export const DS3D_MINROLLOFFFACTOR = 0;
export const DS3D_MAXROLLOFFFACTOR = 10;
export const DS3D_DEFAULTROLLOFFFACTOR = 1;
export const DS3D_MINDOPPLERFACTOR = 0;
export const DS3D_MAXDOPPLERFACTOR = 10;
export const DS3D_DEFAULTDOPPLERFACTOR = 1;
export const DS3D_DEFAULTMINDISTANCE = 1;
export const DS3D_DEFAULTMAXDISTANCE = 1000000000;
export const DS3D_MINCONEANGLE = 0;
export const DS3D_MAXCONEANGLE = 360;
export const DS3D_DEFAULTCONEANGLE = 360;
export const DS3D_DEFAULTCONEOUTSIDEVOLUME = 0;
export const DSCCAPS_EMULDRIVER = 32;
export const DSCCAPS_CERTIFIED = 64;
export const DSCCAPS_MULTIPLECAPTURE = 1;
export const DSCBCAPS_WAVEMAPPED = 2147483648;
export const DSCBCAPS_CTRLFX = 512;
export const DSCBLOCK_ENTIREBUFFER = 1;
export const DSCBSTATUS_CAPTURING = 1;
export const DSCBSTATUS_LOOPING = 2;
export const DSCBSTART_LOOPING = 1;
export const DSBPN_OFFSETSTOP = 4294967295;
export const DS_CERTIFIED = 0;
export const DS_UNCERTIFIED = 1;
export const DSFXR_PRESENT = 0;
export const DSFXR_LOCHARDWARE = 1;
export const DSFXR_LOCSOFTWARE = 2;
export const DSFXR_UNALLOCATED = 3;
export const DSFXR_FAILED = 4;
export const DSFXR_UNKNOWN = 5;
export const DSFXR_SENDLOOP = 6;
export const DSFX_I3DL2_MATERIAL_PRESET_SINGLEWINDOW = 0;
export const DSFX_I3DL2_MATERIAL_PRESET_DOUBLEWINDOW = 1;
export const DSFX_I3DL2_MATERIAL_PRESET_THINDOOR = 2;
export const DSFX_I3DL2_MATERIAL_PRESET_THICKDOOR = 3;
export const DSFX_I3DL2_MATERIAL_PRESET_WOODWALL = 4;
export const DSFX_I3DL2_MATERIAL_PRESET_BRICKWALL = 5;
export const DSFX_I3DL2_MATERIAL_PRESET_STONEWALL = 6;
export const DSFX_I3DL2_MATERIAL_PRESET_CURTAIN = 7;
export const DSFX_I3DL2_ENVIRONMENT_PRESET_DEFAULT = 0;
export const DSFX_I3DL2_ENVIRONMENT_PRESET_GENERIC = 1;
export const DSFX_I3DL2_ENVIRONMENT_PRESET_PADDEDCELL = 2;
export const DSFX_I3DL2_ENVIRONMENT_PRESET_ROOM = 3;
export const DSFX_I3DL2_ENVIRONMENT_PRESET_BATHROOM = 4;
export const DSFX_I3DL2_ENVIRONMENT_PRESET_LIVINGROOM = 5;
export const DSFX_I3DL2_ENVIRONMENT_PRESET_STONEROOM = 6;
export const DSFX_I3DL2_ENVIRONMENT_PRESET_AUDITORIUM = 7;
export const DSFX_I3DL2_ENVIRONMENT_PRESET_CONCERTHALL = 8;
export const DSFX_I3DL2_ENVIRONMENT_PRESET_CAVE = 9;
export const DSFX_I3DL2_ENVIRONMENT_PRESET_ARENA = 10;
export const DSFX_I3DL2_ENVIRONMENT_PRESET_HANGAR = 11;
export const DSFX_I3DL2_ENVIRONMENT_PRESET_CARPETEDHALLWAY = 12;
export const DSFX_I3DL2_ENVIRONMENT_PRESET_HALLWAY = 13;
export const DSFX_I3DL2_ENVIRONMENT_PRESET_STONECORRIDOR = 14;
export const DSFX_I3DL2_ENVIRONMENT_PRESET_ALLEY = 15;
export const DSFX_I3DL2_ENVIRONMENT_PRESET_FOREST = 16;
export const DSFX_I3DL2_ENVIRONMENT_PRESET_CITY = 17;
export const DSFX_I3DL2_ENVIRONMENT_PRESET_MOUNTAINS = 18;
export const DSFX_I3DL2_ENVIRONMENT_PRESET_QUARRY = 19;
export const DSFX_I3DL2_ENVIRONMENT_PRESET_PLAIN = 20;
export const DSFX_I3DL2_ENVIRONMENT_PRESET_PARKINGLOT = 21;
export const DSFX_I3DL2_ENVIRONMENT_PRESET_SEWERPIPE = 22;
export const DSFX_I3DL2_ENVIRONMENT_PRESET_UNDERWATER = 23;
export const DSFX_I3DL2_ENVIRONMENT_PRESET_SMALLROOM = 24;
export const DSFX_I3DL2_ENVIRONMENT_PRESET_MEDIUMROOM = 25;
export const DSFX_I3DL2_ENVIRONMENT_PRESET_LARGEROOM = 26;
export const DSFX_I3DL2_ENVIRONMENT_PRESET_MEDIUMHALL = 27;
export const DSFX_I3DL2_ENVIRONMENT_PRESET_LARGEHALL = 28;
export const DSFX_I3DL2_ENVIRONMENT_PRESET_PLATE = 29;
export const FXEQ_MIN_FRAMERATE = 22000;
export const FXEQ_MAX_FRAMERATE = 48000;
export const FXEQ_MIN_FREQUENCY_CENTER = 20;
export const FXEQ_MAX_FREQUENCY_CENTER = 20000;
export const FXEQ_DEFAULT_FREQUENCY_CENTER_0 = 100;
export const FXEQ_DEFAULT_FREQUENCY_CENTER_1 = 800;
export const FXEQ_DEFAULT_FREQUENCY_CENTER_2 = 2000;
export const FXEQ_DEFAULT_FREQUENCY_CENTER_3 = 10000;
export const FXEQ_MIN_GAIN = `0.12600000202655792`;
export const FXEQ_MAX_GAIN = `7.940000057220459`;
export const FXEQ_DEFAULT_GAIN = 1;
export const FXEQ_MIN_BANDWIDTH = `0.10000000149011612`;
export const FXEQ_MAX_BANDWIDTH = 2;
export const FXEQ_DEFAULT_BANDWIDTH = 1;
export const FXMASTERINGLIMITER_MIN_RELEASE = 1;
export const FXMASTERINGLIMITER_MAX_RELEASE = 20;
export const FXMASTERINGLIMITER_DEFAULT_RELEASE = 6;
export const FXMASTERINGLIMITER_MIN_LOUDNESS = 1;
export const FXMASTERINGLIMITER_MAX_LOUDNESS = 1800;
export const FXMASTERINGLIMITER_DEFAULT_LOUDNESS = 1000;
export const FXREVERB_MIN_DIFFUSION = 0;
export const FXREVERB_MAX_DIFFUSION = 1;
export const FXREVERB_DEFAULT_DIFFUSION = `0.8999999761581421`;
export const FXREVERB_MIN_ROOMSIZE = `0.00009999999747378752`;
export const FXREVERB_MAX_ROOMSIZE = 1;
export const FXREVERB_DEFAULT_ROOMSIZE = `0.6000000238418579`;
export const FXLOUDNESS_DEFAULT_MOMENTARY_MS = 400;
export const FXLOUDNESS_DEFAULT_SHORTTERM_MS = 3000;
export const FXECHO_MIN_WETDRYMIX = 0;
export const FXECHO_MAX_WETDRYMIX = 1;
export const FXECHO_DEFAULT_WETDRYMIX = `0.5`;
export const FXECHO_MIN_FEEDBACK = 0;
export const FXECHO_MAX_FEEDBACK = 1;
export const FXECHO_DEFAULT_FEEDBACK = `0.5`;
export const FXECHO_MIN_DELAY = 1;
export const FXECHO_MAX_DELAY = 2000;
export const FXECHO_DEFAULT_DELAY = 500;
export const XAUDIO2_DLL_A = `xaudio2_9.dll`;
export const XAUDIO2_DLL_W = `xaudio2_9.dll`;
export const XAUDIO2D_DLL_A = `xaudio2_9d.dll`;
export const XAUDIO2D_DLL_W = `xaudio2_9d.dll`;
export const XAUDIO2_DLL = `xaudio2_9.dll`;
export const XAUDIO2D_DLL = `xaudio2_9d.dll`;
export const XAUDIO2_MAX_BUFFER_BYTES = 2147483648;
export const XAUDIO2_MAX_QUEUED_BUFFERS = 64;
export const XAUDIO2_MAX_BUFFERS_SYSTEM = 2;
export const XAUDIO2_MAX_AUDIO_CHANNELS = 64;
export const XAUDIO2_MIN_SAMPLE_RATE = 1000;
export const XAUDIO2_MAX_SAMPLE_RATE = 200000;
export const XAUDIO2_MAX_VOLUME_LEVEL = 16777216;
export const XAUDIO2_MAX_FREQ_RATIO = 1024;
export const XAUDIO2_DEFAULT_FREQ_RATIO = 2;
export const XAUDIO2_MAX_FILTER_ONEOVERQ = `1.5`;
export const XAUDIO2_MAX_FILTER_FREQUENCY = 1;
export const XAUDIO2_MAX_LOOP_COUNT = 254;
export const XAUDIO2_MAX_INSTANCES = 8;
export const XAUDIO2_MAX_RATIO_TIMES_RATE_XMA_MONO = 600000;
export const XAUDIO2_MAX_RATIO_TIMES_RATE_XMA_MULTICHANNEL = 300000;
export const XAUDIO2_COMMIT_NOW = 0;
export const XAUDIO2_COMMIT_ALL = 0;
export const XAUDIO2_NO_LOOP_REGION = 0;
export const XAUDIO2_LOOP_INFINITE = 255;
export const XAUDIO2_DEFAULT_CHANNELS = 0;
export const XAUDIO2_DEFAULT_SAMPLERATE = 0;
export const XAUDIO2_DEBUG_ENGINE = 1;
export const XAUDIO2_VOICE_NOPITCH = 2;
export const XAUDIO2_VOICE_NOSRC = 4;
export const XAUDIO2_VOICE_USEFILTER = 8;
export const XAUDIO2_PLAY_TAILS = 32;
export const XAUDIO2_END_OF_STREAM = 64;
export const XAUDIO2_SEND_USEFILTER = 128;
export const XAUDIO2_VOICE_NOSAMPLESPLAYED = 256;
export const XAUDIO2_STOP_ENGINE_WHEN_IDLE = 8192;
export const XAUDIO2_1024_QUANTUM = 32768;
export const XAUDIO2_NO_VIRTUAL_AUDIO_CLIENT = 65536;
export const XAUDIO2_DEFAULT_FILTER_FREQUENCY = 1;
export const XAUDIO2_DEFAULT_FILTER_ONEOVERQ = 1;
export const XAUDIO2_QUANTUM_NUMERATOR = 1;
export const XAUDIO2_QUANTUM_DENOMINATOR = 100;
export const FACILITY_XAUDIO2 = 2198;
export const XAUDIO2_E_INVALID_CALL = 10808641324183846913n;
export const XAUDIO2_E_XMA_DECODER_ERROR = 10808642423695474690n;
export const XAUDIO2_E_XAPO_CREATION_FAILED = 10808643523207102467n;
export const XAUDIO2_E_DEVICE_INVALIDATED = 14411518827056988164n;
export const Processor1 = 1;
export const Processor2 = 2;
export const Processor3 = 4;
export const Processor4 = 8;
export const Processor5 = 16;
export const Processor6 = 32;
export const Processor7 = 64;
export const Processor8 = 128;
export const Processor9 = 256;
export const Processor10 = 512;
export const Processor11 = 1024;
export const Processor12 = 2048;
export const Processor13 = 4096;
export const Processor14 = 8192;
export const Processor15 = 16384;
export const Processor16 = 32768;
export const Processor17 = 65536;
export const Processor18 = 131072;
export const Processor19 = 262144;
export const Processor20 = 524288;
export const Processor21 = 1048576;
export const Processor22 = 2097152;
export const Processor23 = 4194304;
export const Processor24 = 8388608;
export const Processor25 = 16777216;
export const Processor26 = 33554432;
export const Processor27 = 67108864;
export const Processor28 = 134217728;
export const Processor29 = 268435456;
export const Processor30 = 536870912;
export const Processor31 = 1073741824;
export const Processor32 = 2147483648;
export const XAUDIO2_ANY_PROCESSOR = 4294967295;
export const XAUDIO2_USE_DEFAULT_PROCESSOR = 0;
export const XAUDIO2_DEFAULT_PROCESSOR = 1;
export const XAUDIO2_LOG_ERRORS = 1;
export const XAUDIO2_LOG_WARNINGS = 2;
export const XAUDIO2_LOG_INFO = 4;
export const XAUDIO2_LOG_DETAIL = 8;
export const XAUDIO2_LOG_API_CALLS = 16;
export const XAUDIO2_LOG_FUNC_CALLS = 32;
export const XAUDIO2_LOG_TIMING = 64;
export const XAUDIO2_LOG_LOCKS = 128;
export const XAUDIO2_LOG_MEMORY = 256;
export const XAUDIO2_LOG_STREAMING = 4096;
export const XAUDIO2FX_REVERB_MIN_FRAMERATE = 20000;
export const XAUDIO2FX_REVERB_MAX_FRAMERATE = 48000;
export const XAUDIO2FX_REVERB_MIN_WET_DRY_MIX = 0;
export const XAUDIO2FX_REVERB_MIN_REFLECTIONS_DELAY = 0;
export const XAUDIO2FX_REVERB_MIN_REVERB_DELAY = 0;
export const XAUDIO2FX_REVERB_MIN_REAR_DELAY = 0;
export const XAUDIO2FX_REVERB_MIN_7POINT1_SIDE_DELAY = 0;
export const XAUDIO2FX_REVERB_MIN_7POINT1_REAR_DELAY = 0;
export const XAUDIO2FX_REVERB_MIN_POSITION = 0;
export const XAUDIO2FX_REVERB_MIN_DIFFUSION = 0;
export const XAUDIO2FX_REVERB_MIN_LOW_EQ_GAIN = 0;
export const XAUDIO2FX_REVERB_MIN_LOW_EQ_CUTOFF = 0;
export const XAUDIO2FX_REVERB_MIN_HIGH_EQ_GAIN = 0;
export const XAUDIO2FX_REVERB_MIN_HIGH_EQ_CUTOFF = 0;
export const XAUDIO2FX_REVERB_MIN_ROOM_FILTER_FREQ = 20;
export const XAUDIO2FX_REVERB_MIN_ROOM_FILTER_MAIN = `-100`;
export const XAUDIO2FX_REVERB_MIN_ROOM_FILTER_HF = `-100`;
export const XAUDIO2FX_REVERB_MIN_REFLECTIONS_GAIN = `-100`;
export const XAUDIO2FX_REVERB_MIN_REVERB_GAIN = `-100`;
export const XAUDIO2FX_REVERB_MIN_DECAY_TIME = `0.10000000149011612`;
export const XAUDIO2FX_REVERB_MIN_DENSITY = 0;
export const XAUDIO2FX_REVERB_MIN_ROOM_SIZE = 0;
export const XAUDIO2FX_REVERB_MAX_WET_DRY_MIX = 100;
export const XAUDIO2FX_REVERB_MAX_REFLECTIONS_DELAY = 300;
export const XAUDIO2FX_REVERB_MAX_REVERB_DELAY = 85;
export const XAUDIO2FX_REVERB_MAX_REAR_DELAY = 5;
export const XAUDIO2FX_REVERB_MAX_7POINT1_SIDE_DELAY = 5;
export const XAUDIO2FX_REVERB_MAX_7POINT1_REAR_DELAY = 20;
export const XAUDIO2FX_REVERB_MAX_POSITION = 30;
export const XAUDIO2FX_REVERB_MAX_DIFFUSION = 15;
export const XAUDIO2FX_REVERB_MAX_LOW_EQ_GAIN = 12;
export const XAUDIO2FX_REVERB_MAX_LOW_EQ_CUTOFF = 9;
export const XAUDIO2FX_REVERB_MAX_HIGH_EQ_GAIN = 8;
export const XAUDIO2FX_REVERB_MAX_HIGH_EQ_CUTOFF = 14;
export const XAUDIO2FX_REVERB_MAX_ROOM_FILTER_FREQ = 20000;
export const XAUDIO2FX_REVERB_MAX_ROOM_FILTER_MAIN = 0;
export const XAUDIO2FX_REVERB_MAX_ROOM_FILTER_HF = 0;
export const XAUDIO2FX_REVERB_MAX_REFLECTIONS_GAIN = 20;
export const XAUDIO2FX_REVERB_MAX_REVERB_GAIN = 20;
export const XAUDIO2FX_REVERB_MAX_DENSITY = 100;
export const XAUDIO2FX_REVERB_MAX_ROOM_SIZE = 100;
export const XAUDIO2FX_REVERB_DEFAULT_WET_DRY_MIX = 100;
export const XAUDIO2FX_REVERB_DEFAULT_REFLECTIONS_DELAY = 5;
export const XAUDIO2FX_REVERB_DEFAULT_REVERB_DELAY = 5;
export const XAUDIO2FX_REVERB_DEFAULT_REAR_DELAY = 5;
export const XAUDIO2FX_REVERB_DEFAULT_7POINT1_SIDE_DELAY = 5;
export const XAUDIO2FX_REVERB_DEFAULT_7POINT1_REAR_DELAY = 20;
export const XAUDIO2FX_REVERB_DEFAULT_POSITION = 6;
export const XAUDIO2FX_REVERB_DEFAULT_POSITION_MATRIX = 27;
export const XAUDIO2FX_REVERB_DEFAULT_EARLY_DIFFUSION = 8;
export const XAUDIO2FX_REVERB_DEFAULT_LATE_DIFFUSION = 8;
export const XAUDIO2FX_REVERB_DEFAULT_LOW_EQ_GAIN = 8;
export const XAUDIO2FX_REVERB_DEFAULT_LOW_EQ_CUTOFF = 4;
export const XAUDIO2FX_REVERB_DEFAULT_HIGH_EQ_GAIN = 8;
export const XAUDIO2FX_REVERB_DEFAULT_HIGH_EQ_CUTOFF = 4;
export const XAUDIO2FX_REVERB_DEFAULT_ROOM_FILTER_FREQ = 5000;
export const XAUDIO2FX_REVERB_DEFAULT_ROOM_FILTER_MAIN = 0;
export const XAUDIO2FX_REVERB_DEFAULT_ROOM_FILTER_HF = 0;
export const XAUDIO2FX_REVERB_DEFAULT_REFLECTIONS_GAIN = 0;
export const XAUDIO2FX_REVERB_DEFAULT_REVERB_GAIN = 0;
export const XAUDIO2FX_REVERB_DEFAULT_DECAY_TIME = 1;
export const XAUDIO2FX_REVERB_DEFAULT_DENSITY = 100;
export const XAUDIO2FX_REVERB_DEFAULT_ROOM_SIZE = 100;
export const XAUDIO2FX_REVERB_DEFAULT_DISABLE_LATE_FIELD = 0;
export const HRTF_MAX_GAIN_LIMIT = 12;
export const HRTF_MIN_GAIN_LIMIT = `-96`;
export const HRTF_MIN_UNITY_GAIN_DISTANCE = `0.05000000074505806`;
export const HRTF_DEFAULT_UNITY_GAIN_DISTANCE = 1;
export const FACILITY_XAPO = 2199;
export const XAPO_E_FORMAT_UNSUPPORTED = 5264667301937348609n;
export const XAPO_MIN_CHANNELS = 1;
export const XAPO_MAX_CHANNELS = 64;
export const XAPO_MIN_FRAMERATE = 1000;
export const XAPO_MAX_FRAMERATE = 200000;
export const XAPO_REGISTRATION_STRING_LENGTH = 256;
export const XAPO_FLAG_CHANNELS_MUST_MATCH = 1;
export const XAPO_FLAG_FRAMERATE_MUST_MATCH = 2;
export const XAPO_FLAG_BITSPERSAMPLE_MUST_MATCH = 4;
export const XAPO_FLAG_BUFFERCOUNT_MUST_MATCH = 8;
export const XAPO_FLAG_INPLACE_REQUIRED = 32;
export const XAPO_FLAG_INPLACE_SUPPORTED = 16;
export const SPEAKER_MONO = 4;
export const X3DAUDIO_HANDLE_BYTESIZE = 20;
export const X3DAUDIO_PI = `3.1415927410125732`;
export const X3DAUDIO_2PI = `6.2831854820251465`;
export const X3DAUDIO_SPEED_OF_SOUND = `343.5`;
export const X3DAUDIO_CALCULATE_MATRIX = 1;
export const X3DAUDIO_CALCULATE_DELAY = 2;
export const X3DAUDIO_CALCULATE_LPF_DIRECT = 4;
export const X3DAUDIO_CALCULATE_LPF_REVERB = 8;
export const X3DAUDIO_CALCULATE_REVERB = 16;
export const X3DAUDIO_CALCULATE_DOPPLER = 32;
export const X3DAUDIO_CALCULATE_EMITTER_ANGLE = 64;
export const X3DAUDIO_CALCULATE_ZEROCENTER = 65536;
export const X3DAUDIO_CALCULATE_REDIRECT_TO_LFE = 131072;
export const BUFFER_INVALID = 0;
export const BUFFER_VALID = 1;
export const BUFFER_SILENT = 2;
export const APO_CONNECTION_BUFFER_TYPE_ALLOCATED = 0;
export const APO_CONNECTION_BUFFER_TYPE_EXTERNAL = 1;
export const APO_CONNECTION_BUFFER_TYPE_DEPENDANT = 2;
export const APO_FLAG_NONE = 0;
export const APO_FLAG_INPLACE = 1;
export const APO_FLAG_SAMPLESPERFRAME_MUST_MATCH = 2;
export const APO_FLAG_FRAMESPERSECOND_MUST_MATCH = 4;
export const APO_FLAG_BITSPERSAMPLE_MUST_MATCH = 8;
export const APO_FLAG_MIXER = 16;
export const APO_FLAG_DEFAULT = 14;
export const AUDIO_FLOW_PULL = 0;
export const AUDIO_FLOW_PUSH = 1;
export const eAudioConstrictionOff = 0;
export const eAudioConstriction48_16 = 1;
export const eAudioConstriction44_16 = 2;
export const eAudioConstriction14_14 = 3;
export const eAudioConstrictionMute = 4;
export const AUDIO_SYSTEMEFFECT_STATE_OFF = 0;
export const AUDIO_SYSTEMEFFECT_STATE_ON = 1;
export const APO_LOG_LEVEL_ALWAYS = 0;
export const APO_LOG_LEVEL_CRITICAL = 1;
export const APO_LOG_LEVEL_ERROR = 2;
export const APO_LOG_LEVEL_WARNING = 3;
export const APO_LOG_LEVEL_INFO = 4;
export const APO_LOG_LEVEL_VERBOSE = 5;
export const APO_NOTIFICATION_TYPE_NONE = 0;
export const APO_NOTIFICATION_TYPE_ENDPOINT_VOLUME = 1;
export const APO_NOTIFICATION_TYPE_ENDPOINT_PROPERTY_CHANGE = 2;
export const APO_NOTIFICATION_TYPE_SYSTEM_EFFECTS_PROPERTY_CHANGE = 3;
export const AUDIO_SYSTEMEFFECTS_PROPERTYSTORE_TYPE_DEFAULT = 0;
export const AUDIO_SYSTEMEFFECTS_PROPERTYSTORE_TYPE_USER = 1;
export const AUDIO_SYSTEMEFFECTS_PROPERTYSTORE_TYPE_VOLATILE = 2;
export const AUDIO_SYSTEMEFFECTS_PROPERTYSTORE_TYPE_ENUM_COUNT = 3;
export const DMUS_CLOCK_SYSTEM = 0;
export const DMUS_CLOCK_WAVE = 1;
export const DSPROPERTY_DIRECTSOUNDDEVICE_WAVEDEVICEMAPPING_A = 1;
export const DSPROPERTY_DIRECTSOUNDDEVICE_DESCRIPTION_1 = 2;
export const DSPROPERTY_DIRECTSOUNDDEVICE_ENUMERATE_1 = 3;
export const DSPROPERTY_DIRECTSOUNDDEVICE_WAVEDEVICEMAPPING_W = 4;
export const DSPROPERTY_DIRECTSOUNDDEVICE_DESCRIPTION_A = 5;
export const DSPROPERTY_DIRECTSOUNDDEVICE_DESCRIPTION_W = 6;
export const DSPROPERTY_DIRECTSOUNDDEVICE_ENUMERATE_A = 7;
export const DSPROPERTY_DIRECTSOUNDDEVICE_ENUMERATE_W = 8;
export const DIRECTSOUNDDEVICE_TYPE_EMULATED = 0;
export const DIRECTSOUNDDEVICE_TYPE_VXD = 1;
export const DIRECTSOUNDDEVICE_TYPE_WDM = 2;
export const DIRECTSOUNDDEVICE_DATAFLOW_RENDER = 0;
export const DIRECTSOUNDDEVICE_DATAFLOW_CAPTURE = 1;
export const eHostProcessConnector = 0;
export const eOffloadConnector = 1;
export const eLoopbackConnector = 2;
export const eKeywordDetectorConnector = 3;
export const eConnectorCount = 4;
export const XAPO_BUFFER_SILENT = 0;
export const XAPO_BUFFER_VALID = 1;
export const LowPassFilter = 0;
export const BandPassFilter = 1;
export const HighPassFilter = 2;
export const NotchFilter = 3;
export const LowPassOnePoleFilter = 4;
export const HighPassOnePoleFilter = 5;
export const OmniDirectional = 0;
export const Cardioid = 1;
export const Cone = 2;
export const Small = 0;
export const Medium = 1;
export const Large = 2;
export const Outdoors = 3;
export const NaturalDecay = 0;
export const CustomDecay = 1;
export const AUDCLNT_SHAREMODE_SHARED = 0;
export const AUDCLNT_SHAREMODE_EXCLUSIVE = 1;
export const AudioCategory_Other = 0;
export const AudioCategory_ForegroundOnlyMedia = 1;
export const AudioCategory_Communications = 3;
export const AudioCategory_Alerts = 4;
export const AudioCategory_SoundEffects = 5;
export const AudioCategory_GameEffects = 6;
export const AudioCategory_GameMedia = 7;
export const AudioCategory_GameChat = 8;
export const AudioCategory_Speech = 9;
export const AudioCategory_Movie = 10;
export const AudioCategory_Media = 11;
export const AudioCategory_FarFieldSpeech = 12;
export const AudioCategory_UniformSpeech = 13;
export const AudioCategory_VoiceTyping = 14;
export const AudioSessionStateInactive = 0;
export const AudioSessionStateActive = 1;
export const AudioSessionStateExpired = 2;
export const AUDCLNT_BUFFERFLAGS_DATA_DISCONTINUITY = 1;
export const AUDCLNT_BUFFERFLAGS_SILENT = 2;
export const AUDCLNT_BUFFERFLAGS_TIMESTAMP_ERROR = 4;
export const AUDCLNT_STREAMOPTIONS_NONE = 0;
export const AUDCLNT_STREAMOPTIONS_RAW = 1;
export const AUDCLNT_STREAMOPTIONS_MATCH_FORMAT = 2;
export const AUDCLNT_STREAMOPTIONS_AMBISONICS = 4;
export const AUDIO_DUCKING_OPTIONS_DEFAULT = 0;
export const AUDIO_DUCKING_OPTIONS_DO_NOT_DUCK_OTHER_STREAMS = 1;
export const AUDIO_EFFECT_STATE_OFF = 0;
export const AUDIO_EFFECT_STATE_ON = 1;
export const AMBISONICS_TYPE_FULL3D = 0;
export const AMBISONICS_CHANNEL_ORDERING_ACN = 0;
export const AMBISONICS_NORMALIZATION_SN3D = 0;
export const AMBISONICS_NORMALIZATION_N3D = 1;
export const AudioObjectType_None = 0;
export const AudioObjectType_Dynamic = 1;
export const AudioObjectType_FrontLeft = 2;
export const AudioObjectType_FrontRight = 4;
export const AudioObjectType_FrontCenter = 8;
export const AudioObjectType_LowFrequency = 16;
export const AudioObjectType_SideLeft = 32;
export const AudioObjectType_SideRight = 64;
export const AudioObjectType_BackLeft = 128;
export const AudioObjectType_BackRight = 256;
export const AudioObjectType_TopFrontLeft = 512;
export const AudioObjectType_TopFrontRight = 1024;
export const AudioObjectType_TopBackLeft = 2048;
export const AudioObjectType_TopBackRight = 4096;
export const AudioObjectType_BottomFrontLeft = 8192;
export const AudioObjectType_BottomFrontRight = 16384;
export const AudioObjectType_BottomBackLeft = 32768;
export const AudioObjectType_BottomBackRight = 65536;
export const AudioObjectType_BackCenter = 131072;
export const SPATIAL_AUDIO_STREAM_OPTIONS_NONE = 0;
export const SPATIAL_AUDIO_STREAM_OPTIONS_OFFLOAD = 1;
export const SpatialAudioHrtfDirectivity_OmniDirectional = 0;
export const SpatialAudioHrtfDirectivity_Cardioid = 1;
export const SpatialAudioHrtfDirectivity_Cone = 2;
export const SpatialAudioHrtfEnvironment_Small = 0;
export const SpatialAudioHrtfEnvironment_Medium = 1;
export const SpatialAudioHrtfEnvironment_Large = 2;
export const SpatialAudioHrtfEnvironment_Outdoors = 3;
export const SpatialAudioHrtfEnvironment_Average = 4;
export const SpatialAudioHrtfDistanceDecay_NaturalDecay = 0;
export const SpatialAudioHrtfDistanceDecay_CustomDecay = 1;
export const eRender = 0;
export const eCapture = 1;
export const eAll = 2;
export const EDataFlow_enum_count = 3;
export const eConsole = 0;
export const eMultimedia = 1;
export const eCommunications = 2;
export const ERole_enum_count = 3;
export const RemoteNetworkDevice = 0;
export const Speakers = 1;
export const LineLevel = 2;
export const Headphones = 3;
export const Microphone = 4;
export const Headset = 5;
export const Handset = 6;
export const UnknownDigitalPassthrough = 7;
export const SPDIF = 8;
export const DigitalAudioDisplayDevice = 9;
export const UnknownFormFactor = 10;
export const EndpointFormFactor_enum_count = 11;
export const In = 0;
export const Out = 1;
export const Connector = 0;
export const Subunit = 1;
export const Unknown_Connector = 0;
export const Physical_Internal = 1;
export const Physical_External = 2;
export const Software_IO = 3;
export const Software_Fixed = 4;
export const Network = 5;
export const DisconnectReasonDeviceRemoval = 0;
export const DisconnectReasonServerShutdown = 1;
export const DisconnectReasonFormatChanged = 2;
export const DisconnectReasonSessionLogoff = 3;
export const DisconnectReasonSessionDisconnected = 4;
export const DisconnectReasonExclusiveModeOverride = 5;
export const SpatialAudioMetadataWriterOverflow_Fail = 0;
export const SpatialAudioMetadataWriterOverflow_MergeWithNew = 1;
export const SpatialAudioMetadataWriterOverflow_MergeWithLast = 2;
export const SpatialAudioMetadataCopy_Overwrite = 0;
export const SpatialAudioMetadataCopy_Append = 1;
export const SpatialAudioMetadataCopy_AppendMergeWithLast = 2;
export const SpatialAudioMetadataCopy_AppendMergeWithFirst = 3;
export const PROCESS_LOOPBACK_MODE_INCLUDE_TARGET_PROCESS_TREE = 0;
export const PROCESS_LOOPBACK_MODE_EXCLUDE_TARGET_PROCESS_TREE = 1;
export const AUDIOCLIENT_ACTIVATION_TYPE_DEFAULT = 0;
export const AUDIOCLIENT_ACTIVATION_TYPE_PROCESS_LOOPBACK = 1;
export const Muted = 0;
export const Low = 1;
export const Full = 2;

// Structs

/**
 * Windows.Win32.UI.Shell.PropertiesSystem.PROPERTYKEY (size: 16)
 */
export interface PROPERTYKEY {
  /** System.Guid */
  fmtid: Uint8Array | Deno.PointerValue | null;
  /** u32 */
  pid: number;
}

export const sizeofPROPERTYKEY = 16;

export function allocPROPERTYKEY(data?: Partial<PROPERTYKEY>): Uint8Array {
  const buf = new Uint8Array(sizeofPROPERTYKEY);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.fmtid !== undefined) view.setBigUint64(0, data.fmtid === null ? 0n : BigInt(util.toPointer(data.fmtid)), true);
  // 0x08: u32
  if (data?.pid !== undefined) view.setUint32(8, Number(data.pid), true);
  // 0x0c: pad4
  return buf;
}

/**
 * Windows.Win32.Media.Audio.Apo.UNCOMPRESSEDAUDIOFORMAT (size: 32)
 */
export interface UNCOMPRESSEDAUDIOFORMAT {
  /** System.Guid */
  guidFormatType: Uint8Array | Deno.PointerValue | null;
  /** u32 */
  dwSamplesPerFrame: number;
  /** u32 */
  dwBytesPerSampleContainer: number;
  /** u32 */
  dwValidBitsPerSample: number;
  /** f32 */
  fFramesPerSecond: number;
  /** u32 */
  dwChannelMask: number;
}

export const sizeofUNCOMPRESSEDAUDIOFORMAT = 32;

export function allocUNCOMPRESSEDAUDIOFORMAT(data?: Partial<UNCOMPRESSEDAUDIOFORMAT>): Uint8Array {
  const buf = new Uint8Array(sizeofUNCOMPRESSEDAUDIOFORMAT);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.guidFormatType !== undefined) view.setBigUint64(0, data.guidFormatType === null ? 0n : BigInt(util.toPointer(data.guidFormatType)), true);
  // 0x08: u32
  if (data?.dwSamplesPerFrame !== undefined) view.setUint32(8, Number(data.dwSamplesPerFrame), true);
  // 0x0c: u32
  if (data?.dwBytesPerSampleContainer !== undefined) view.setUint32(12, Number(data.dwBytesPerSampleContainer), true);
  // 0x10: u32
  if (data?.dwValidBitsPerSample !== undefined) view.setUint32(16, Number(data.dwValidBitsPerSample), true);
  // 0x14: f32
  if (data?.fFramesPerSecond !== undefined) view.setFloat32(20, Number(data.fFramesPerSecond), true);
  // 0x18: u32
  if (data?.dwChannelMask !== undefined) view.setUint32(24, Number(data.dwChannelMask), true);
  // 0x1c: pad4
  return buf;
}

/**
 * Windows.Win32.Media.Audio.Apo.APO_CONNECTION_PROPERTY (size: 24)
 */
export interface APO_CONNECTION_PROPERTY {
  /** usize */
  pBuffer: Deno.PointerValue;
  /** u32 */
  u32ValidFrameCount: number;
  /** Windows.Win32.Media.Audio.Apo.APO_BUFFER_FLAGS */
  u32BufferFlags: APO_BUFFER_FLAGS;
  /** u32 */
  u32Signature: number;
}

export const sizeofAPO_CONNECTION_PROPERTY = 24;

export function allocAPO_CONNECTION_PROPERTY(data?: Partial<APO_CONNECTION_PROPERTY>): Uint8Array {
  const buf = new Uint8Array(sizeofAPO_CONNECTION_PROPERTY);
  const view = new DataView(buf.buffer);
  // 0x00: usize
  if (data?.pBuffer !== undefined) view.setBigUint64(0, BigInt(data.pBuffer), true);
  // 0x08: u32
  if (data?.u32ValidFrameCount !== undefined) view.setUint32(8, Number(data.u32ValidFrameCount), true);
  // 0x0c: i32
  if (data?.u32BufferFlags !== undefined) view.setInt32(12, Number(data.u32BufferFlags), true);
  // 0x10: u32
  if (data?.u32Signature !== undefined) view.setUint32(16, Number(data.u32Signature), true);
  // 0x14: pad4
  return buf;
}

/**
 * Windows.Win32.Media.Audio.Apo.APO_CONNECTION_PROPERTY_V2 (size: 16)
 */
export interface APO_CONNECTION_PROPERTY_V2 {
  /** Windows.Win32.Media.Audio.Apo.APO_CONNECTION_PROPERTY */
  property: Uint8Array | Deno.PointerValue | null;
  /** u64 */
  u64QPCTime: Deno.PointerValue;
}

export const sizeofAPO_CONNECTION_PROPERTY_V2 = 16;

export function allocAPO_CONNECTION_PROPERTY_V2(data?: Partial<APO_CONNECTION_PROPERTY_V2>): Uint8Array {
  const buf = new Uint8Array(sizeofAPO_CONNECTION_PROPERTY_V2);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.property !== undefined) view.setBigUint64(0, data.property === null ? 0n : BigInt(util.toPointer(data.property)), true);
  // 0x08: u64
  if (data?.u64QPCTime !== undefined) view.setBigUint64(8, BigInt(data.u64QPCTime), true);
  return buf;
}

/**
 * Windows.Win32.Media.Audio.Apo.APO_CONNECTION_DESCRIPTOR (size: 40)
 */
export interface APO_CONNECTION_DESCRIPTOR {
  /** Windows.Win32.Media.Audio.Apo.APO_CONNECTION_BUFFER_TYPE */
  Type: APO_CONNECTION_BUFFER_TYPE;
  /** usize */
  pBuffer: Deno.PointerValue;
  /** u32 */
  u32MaxFrameCount: number;
  /** Windows.Win32.Media.Audio.Apo.IAudioMediaType */
  pFormat: Uint8Array | Deno.PointerValue | null;
  /** u32 */
  u32Signature: number;
}

export const sizeofAPO_CONNECTION_DESCRIPTOR = 40;

export function allocAPO_CONNECTION_DESCRIPTOR(data?: Partial<APO_CONNECTION_DESCRIPTOR>): Uint8Array {
  const buf = new Uint8Array(sizeofAPO_CONNECTION_DESCRIPTOR);
  const view = new DataView(buf.buffer);
  // 0x00: i32
  if (data?.Type !== undefined) view.setInt32(0, Number(data.Type), true);
  // 0x04: pad4
  // 0x08: usize
  if (data?.pBuffer !== undefined) view.setBigUint64(8, BigInt(data.pBuffer), true);
  // 0x10: u32
  if (data?.u32MaxFrameCount !== undefined) view.setUint32(16, Number(data.u32MaxFrameCount), true);
  // 0x14: pad4
  // 0x18: pointer
  if (data?.pFormat !== undefined) view.setBigUint64(24, data.pFormat === null ? 0n : BigInt(util.toPointer(data.pFormat)), true);
  // 0x20: u32
  if (data?.u32Signature !== undefined) view.setUint32(32, Number(data.u32Signature), true);
  // 0x24: pad4
  return buf;
}

/**
 * Windows.Win32.Media.Audio.Apo.APO_REG_PROPERTIES (size: 72)
 */
export interface APO_REG_PROPERTIES {
  /** System.Guid */
  clsid: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Media.Audio.Apo.APO_FLAG */
  Flags: APO_FLAG;
  /** array */
  szFriendlyName: Deno.PointerValue | null;
  /** array */
  szCopyrightInfo: Deno.PointerValue | null;
  /** u32 */
  u32MajorVersion: number;
  /** u32 */
  u32MinorVersion: number;
  /** u32 */
  u32MinInputConnections: number;
  /** u32 */
  u32MaxInputConnections: number;
  /** u32 */
  u32MinOutputConnections: number;
  /** u32 */
  u32MaxOutputConnections: number;
  /** u32 */
  u32MaxInstances: number;
  /** u32 */
  u32NumAPOInterfaces: number;
  /** array */
  iidAPOInterfaceList: Deno.PointerValue | null;
}

export const sizeofAPO_REG_PROPERTIES = 72;

export function allocAPO_REG_PROPERTIES(data?: Partial<APO_REG_PROPERTIES>): Uint8Array {
  const buf = new Uint8Array(sizeofAPO_REG_PROPERTIES);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.clsid !== undefined) view.setBigUint64(0, data.clsid === null ? 0n : BigInt(util.toPointer(data.clsid)), true);
  // 0x08: i32
  if (data?.Flags !== undefined) view.setInt32(8, Number(data.Flags), true);
  // 0x0c: pad4
  // 0x10: pointer
  if (data?.szFriendlyName !== undefined) view.setBigUint64(16, data.szFriendlyName === null ? 0n : BigInt(util.toPointer(data.szFriendlyName)), true);
  // 0x18: pointer
  if (data?.szCopyrightInfo !== undefined) view.setBigUint64(24, data.szCopyrightInfo === null ? 0n : BigInt(util.toPointer(data.szCopyrightInfo)), true);
  // 0x20: u32
  if (data?.u32MajorVersion !== undefined) view.setUint32(32, Number(data.u32MajorVersion), true);
  // 0x24: u32
  if (data?.u32MinorVersion !== undefined) view.setUint32(36, Number(data.u32MinorVersion), true);
  // 0x28: u32
  if (data?.u32MinInputConnections !== undefined) view.setUint32(40, Number(data.u32MinInputConnections), true);
  // 0x2c: u32
  if (data?.u32MaxInputConnections !== undefined) view.setUint32(44, Number(data.u32MaxInputConnections), true);
  // 0x30: u32
  if (data?.u32MinOutputConnections !== undefined) view.setUint32(48, Number(data.u32MinOutputConnections), true);
  // 0x34: u32
  if (data?.u32MaxOutputConnections !== undefined) view.setUint32(52, Number(data.u32MaxOutputConnections), true);
  // 0x38: u32
  if (data?.u32MaxInstances !== undefined) view.setUint32(56, Number(data.u32MaxInstances), true);
  // 0x3c: u32
  if (data?.u32NumAPOInterfaces !== undefined) view.setUint32(60, Number(data.u32NumAPOInterfaces), true);
  // 0x40: pointer
  if (data?.iidAPOInterfaceList !== undefined) view.setBigUint64(64, data.iidAPOInterfaceList === null ? 0n : BigInt(util.toPointer(data.iidAPOInterfaceList)), true);
  return buf;
}

/**
 * Windows.Win32.Media.Audio.Apo.APOInitBaseStruct (size: 16)
 */
export interface APOInitBaseStruct {
  /** u32 */
  cbSize: number;
  /** System.Guid */
  clsid: Uint8Array | Deno.PointerValue | null;
}

export const sizeofAPOInitBaseStruct = 16;

export function allocAPOInitBaseStruct(data?: Partial<APOInitBaseStruct>): Uint8Array {
  const buf = new Uint8Array(sizeofAPOInitBaseStruct);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.cbSize !== undefined) view.setUint32(0, Number(data.cbSize), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.clsid !== undefined) view.setBigUint64(8, data.clsid === null ? 0n : BigInt(util.toPointer(data.clsid)), true);
  return buf;
}

/**
 * Windows.Win32.Media.Audio.Apo.APOInitSystemEffects (size: 40)
 */
export interface APOInitSystemEffects {
  /** Windows.Win32.Media.Audio.Apo.APOInitBaseStruct */
  APOInit: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.UI.Shell.PropertiesSystem.IPropertyStore */
  pAPOEndpointProperties: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.UI.Shell.PropertiesSystem.IPropertyStore */
  pAPOSystemEffectsProperties: Uint8Array | Deno.PointerValue | null;
  /** ptr */
  pReserved: Deno.PointerValue | Uint8Array | null;
  /** Windows.Win32.Media.Audio.IMMDeviceCollection */
  pDeviceCollection: Uint8Array | Deno.PointerValue | null;
}

export const sizeofAPOInitSystemEffects = 40;

export function allocAPOInitSystemEffects(data?: Partial<APOInitSystemEffects>): Uint8Array {
  const buf = new Uint8Array(sizeofAPOInitSystemEffects);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.APOInit !== undefined) view.setBigUint64(0, data.APOInit === null ? 0n : BigInt(util.toPointer(data.APOInit)), true);
  // 0x08: pointer
  if (data?.pAPOEndpointProperties !== undefined) view.setBigUint64(8, data.pAPOEndpointProperties === null ? 0n : BigInt(util.toPointer(data.pAPOEndpointProperties)), true);
  // 0x10: pointer
  if (data?.pAPOSystemEffectsProperties !== undefined) view.setBigUint64(16, data.pAPOSystemEffectsProperties === null ? 0n : BigInt(util.toPointer(data.pAPOSystemEffectsProperties)), true);
  // 0x18: pointer
  if (data?.pReserved !== undefined) view.setBigUint64(24, data.pReserved === null ? 0n : BigInt(util.toPointer(data.pReserved)), true);
  // 0x20: pointer
  if (data?.pDeviceCollection !== undefined) view.setBigUint64(32, data.pDeviceCollection === null ? 0n : BigInt(util.toPointer(data.pDeviceCollection)), true);
  return buf;
}

export type BOOL = number;

/**
 * Windows.Win32.Media.Audio.Apo.APOInitSystemEffects2 (size: 64)
 */
export interface APOInitSystemEffects2 {
  /** Windows.Win32.Media.Audio.Apo.APOInitBaseStruct */
  APOInit: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.UI.Shell.PropertiesSystem.IPropertyStore */
  pAPOEndpointProperties: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.UI.Shell.PropertiesSystem.IPropertyStore */
  pAPOSystemEffectsProperties: Uint8Array | Deno.PointerValue | null;
  /** ptr */
  pReserved: Deno.PointerValue | Uint8Array | null;
  /** Windows.Win32.Media.Audio.IMMDeviceCollection */
  pDeviceCollection: Uint8Array | Deno.PointerValue | null;
  /** u32 */
  nSoftwareIoDeviceInCollection: number;
  /** u32 */
  nSoftwareIoConnectorIndex: number;
  /** System.Guid */
  AudioProcessingMode: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Foundation.BOOL */
  InitializeForDiscoveryOnly: boolean;
}

export const sizeofAPOInitSystemEffects2 = 64;

export function allocAPOInitSystemEffects2(data?: Partial<APOInitSystemEffects2>): Uint8Array {
  const buf = new Uint8Array(sizeofAPOInitSystemEffects2);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.APOInit !== undefined) view.setBigUint64(0, data.APOInit === null ? 0n : BigInt(util.toPointer(data.APOInit)), true);
  // 0x08: pointer
  if (data?.pAPOEndpointProperties !== undefined) view.setBigUint64(8, data.pAPOEndpointProperties === null ? 0n : BigInt(util.toPointer(data.pAPOEndpointProperties)), true);
  // 0x10: pointer
  if (data?.pAPOSystemEffectsProperties !== undefined) view.setBigUint64(16, data.pAPOSystemEffectsProperties === null ? 0n : BigInt(util.toPointer(data.pAPOSystemEffectsProperties)), true);
  // 0x18: pointer
  if (data?.pReserved !== undefined) view.setBigUint64(24, data.pReserved === null ? 0n : BigInt(util.toPointer(data.pReserved)), true);
  // 0x20: pointer
  if (data?.pDeviceCollection !== undefined) view.setBigUint64(32, data.pDeviceCollection === null ? 0n : BigInt(util.toPointer(data.pDeviceCollection)), true);
  // 0x28: u32
  if (data?.nSoftwareIoDeviceInCollection !== undefined) view.setUint32(40, Number(data.nSoftwareIoDeviceInCollection), true);
  // 0x2c: u32
  if (data?.nSoftwareIoConnectorIndex !== undefined) view.setUint32(44, Number(data.nSoftwareIoConnectorIndex), true);
  // 0x30: pointer
  if (data?.AudioProcessingMode !== undefined) view.setBigUint64(48, data.AudioProcessingMode === null ? 0n : BigInt(util.toPointer(data.AudioProcessingMode)), true);
  // 0x38: i32
  if (data?.InitializeForDiscoveryOnly !== undefined) view.setInt32(56, Number(data.InitializeForDiscoveryOnly), true);
  // 0x3c: pad4
  return buf;
}

export type LPARAM = Deno.PointerValue;

export type PWSTR = Deno.PointerValue | Uint8Array | null;

/**
 * Windows.Win32.Media.Audio.Apo.AudioFXExtensionParams (size: 24)
 */
export interface AudioFXExtensionParams {
  /** Windows.Win32.Foundation.LPARAM */
  AddPageParam: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Foundation.PWSTR */
  pwstrEndpointID: string | null | Uint8Array | Uint16Array;
  /** Windows.Win32.UI.Shell.PropertiesSystem.IPropertyStore */
  pFxProperties: Uint8Array | Deno.PointerValue | null;
}

export const sizeofAudioFXExtensionParams = 24;

export function allocAudioFXExtensionParams(data?: Partial<AudioFXExtensionParams>): Uint8Array {
  const buf = new Uint8Array(sizeofAudioFXExtensionParams);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.AddPageParam !== undefined) view.setBigUint64(0, data.AddPageParam === null ? 0n : BigInt(util.toPointer(data.AddPageParam)), true);
  // 0x08: buffer
  if (data?.pwstrEndpointID !== undefined) {
    (buf as any)._f8 = util.pwstrToFfi(data.pwstrEndpointID);
    view.setBigUint64(8, (buf as any)._f8 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f8)), true);
  }
  // 0x10: pointer
  if (data?.pFxProperties !== undefined) view.setBigUint64(16, data.pFxProperties === null ? 0n : BigInt(util.toPointer(data.pFxProperties)), true);
  return buf;
}

/**
 * Windows.Win32.Media.Audio.Apo.AUDIO_SYSTEMEFFECT (size: 16)
 */
export interface AUDIO_SYSTEMEFFECT {
  /** System.Guid */
  id: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Foundation.BOOL */
  canSetState: boolean;
  /** Windows.Win32.Media.Audio.Apo.AUDIO_SYSTEMEFFECT_STATE */
  state: AUDIO_SYSTEMEFFECT_STATE;
}

export const sizeofAUDIO_SYSTEMEFFECT = 16;

export function allocAUDIO_SYSTEMEFFECT(data?: Partial<AUDIO_SYSTEMEFFECT>): Uint8Array {
  const buf = new Uint8Array(sizeofAUDIO_SYSTEMEFFECT);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.id !== undefined) view.setBigUint64(0, data.id === null ? 0n : BigInt(util.toPointer(data.id)), true);
  // 0x08: i32
  if (data?.canSetState !== undefined) view.setInt32(8, Number(data.canSetState), true);
  // 0x0c: i32
  if (data?.state !== undefined) view.setInt32(12, Number(data.state), true);
  return buf;
}

/**
 * Windows.Win32.Media.Audio.Apo.APOInitSystemEffects3 (size: 56)
 */
export interface APOInitSystemEffects3 {
  /** Windows.Win32.Media.Audio.Apo.APOInitBaseStruct */
  APOInit: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.UI.Shell.PropertiesSystem.IPropertyStore */
  pAPOEndpointProperties: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.System.Com.IServiceProvider */
  pServiceProvider: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Media.Audio.IMMDeviceCollection */
  pDeviceCollection: Uint8Array | Deno.PointerValue | null;
  /** u32 */
  nSoftwareIoDeviceInCollection: number;
  /** u32 */
  nSoftwareIoConnectorIndex: number;
  /** System.Guid */
  AudioProcessingMode: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Foundation.BOOL */
  InitializeForDiscoveryOnly: boolean;
}

export const sizeofAPOInitSystemEffects3 = 56;

export function allocAPOInitSystemEffects3(data?: Partial<APOInitSystemEffects3>): Uint8Array {
  const buf = new Uint8Array(sizeofAPOInitSystemEffects3);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.APOInit !== undefined) view.setBigUint64(0, data.APOInit === null ? 0n : BigInt(util.toPointer(data.APOInit)), true);
  // 0x08: pointer
  if (data?.pAPOEndpointProperties !== undefined) view.setBigUint64(8, data.pAPOEndpointProperties === null ? 0n : BigInt(util.toPointer(data.pAPOEndpointProperties)), true);
  // 0x10: pointer
  if (data?.pServiceProvider !== undefined) view.setBigUint64(16, data.pServiceProvider === null ? 0n : BigInt(util.toPointer(data.pServiceProvider)), true);
  // 0x18: pointer
  if (data?.pDeviceCollection !== undefined) view.setBigUint64(24, data.pDeviceCollection === null ? 0n : BigInt(util.toPointer(data.pDeviceCollection)), true);
  // 0x20: u32
  if (data?.nSoftwareIoDeviceInCollection !== undefined) view.setUint32(32, Number(data.nSoftwareIoDeviceInCollection), true);
  // 0x24: u32
  if (data?.nSoftwareIoConnectorIndex !== undefined) view.setUint32(36, Number(data.nSoftwareIoConnectorIndex), true);
  // 0x28: pointer
  if (data?.AudioProcessingMode !== undefined) view.setBigUint64(40, data.AudioProcessingMode === null ? 0n : BigInt(util.toPointer(data.AudioProcessingMode)), true);
  // 0x30: i32
  if (data?.InitializeForDiscoveryOnly !== undefined) view.setInt32(48, Number(data.InitializeForDiscoveryOnly), true);
  // 0x34: pad4
  return buf;
}

/**
 * Windows.Win32.Media.Audio.Apo.AUDIO_ENDPOINT_VOLUME_CHANGE_NOTIFICATION (size: 16)
 */
export interface AUDIO_ENDPOINT_VOLUME_CHANGE_NOTIFICATION {
  /** Windows.Win32.Media.Audio.IMMDevice */
  endpoint: Uint8Array | Deno.PointerValue | null;
  /** ptr */
  volume: Deno.PointerValue | Uint8Array | null;
}

export const sizeofAUDIO_ENDPOINT_VOLUME_CHANGE_NOTIFICATION = 16;

export function allocAUDIO_ENDPOINT_VOLUME_CHANGE_NOTIFICATION(data?: Partial<AUDIO_ENDPOINT_VOLUME_CHANGE_NOTIFICATION>): Uint8Array {
  const buf = new Uint8Array(sizeofAUDIO_ENDPOINT_VOLUME_CHANGE_NOTIFICATION);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.endpoint !== undefined) view.setBigUint64(0, data.endpoint === null ? 0n : BigInt(util.toPointer(data.endpoint)), true);
  // 0x08: pointer
  if (data?.volume !== undefined) view.setBigUint64(8, data.volume === null ? 0n : BigInt(util.toPointer(data.volume)), true);
  return buf;
}

/**
 * Windows.Win32.Media.Audio.Apo.AUDIO_ENDPOINT_PROPERTY_CHANGE_NOTIFICATION (size: 24)
 */
export interface AUDIO_ENDPOINT_PROPERTY_CHANGE_NOTIFICATION {
  /** Windows.Win32.Media.Audio.IMMDevice */
  endpoint: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.UI.Shell.PropertiesSystem.IPropertyStore */
  propertyStore: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.UI.Shell.PropertiesSystem.PROPERTYKEY */
  propertyKey: Uint8Array | Deno.PointerValue | null;
}

export const sizeofAUDIO_ENDPOINT_PROPERTY_CHANGE_NOTIFICATION = 24;

export function allocAUDIO_ENDPOINT_PROPERTY_CHANGE_NOTIFICATION(data?: Partial<AUDIO_ENDPOINT_PROPERTY_CHANGE_NOTIFICATION>): Uint8Array {
  const buf = new Uint8Array(sizeofAUDIO_ENDPOINT_PROPERTY_CHANGE_NOTIFICATION);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.endpoint !== undefined) view.setBigUint64(0, data.endpoint === null ? 0n : BigInt(util.toPointer(data.endpoint)), true);
  // 0x08: pointer
  if (data?.propertyStore !== undefined) view.setBigUint64(8, data.propertyStore === null ? 0n : BigInt(util.toPointer(data.propertyStore)), true);
  // 0x10: pointer
  if (data?.propertyKey !== undefined) view.setBigUint64(16, data.propertyKey === null ? 0n : BigInt(util.toPointer(data.propertyKey)), true);
  return buf;
}

/**
 * Windows.Win32.Media.Audio.Apo.AUDIO_SYSTEMEFFECTS_PROPERTY_CHANGE_NOTIFICATION (size: 40)
 */
export interface AUDIO_SYSTEMEFFECTS_PROPERTY_CHANGE_NOTIFICATION {
  /** Windows.Win32.Media.Audio.IMMDevice */
  endpoint: Uint8Array | Deno.PointerValue | null;
  /** System.Guid */
  propertyStoreContext: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Media.Audio.AUDIO_SYSTEMEFFECTS_PROPERTYSTORE_TYPE */
  propertyStoreType: AUDIO_SYSTEMEFFECTS_PROPERTYSTORE_TYPE;
  /** Windows.Win32.UI.Shell.PropertiesSystem.IPropertyStore */
  propertyStore: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.UI.Shell.PropertiesSystem.PROPERTYKEY */
  propertyKey: Uint8Array | Deno.PointerValue | null;
}

export const sizeofAUDIO_SYSTEMEFFECTS_PROPERTY_CHANGE_NOTIFICATION = 40;

export function allocAUDIO_SYSTEMEFFECTS_PROPERTY_CHANGE_NOTIFICATION(data?: Partial<AUDIO_SYSTEMEFFECTS_PROPERTY_CHANGE_NOTIFICATION>): Uint8Array {
  const buf = new Uint8Array(sizeofAUDIO_SYSTEMEFFECTS_PROPERTY_CHANGE_NOTIFICATION);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.endpoint !== undefined) view.setBigUint64(0, data.endpoint === null ? 0n : BigInt(util.toPointer(data.endpoint)), true);
  // 0x08: pointer
  if (data?.propertyStoreContext !== undefined) view.setBigUint64(8, data.propertyStoreContext === null ? 0n : BigInt(util.toPointer(data.propertyStoreContext)), true);
  // 0x10: i32
  if (data?.propertyStoreType !== undefined) view.setInt32(16, Number(data.propertyStoreType), true);
  // 0x14: pad4
  // 0x18: pointer
  if (data?.propertyStore !== undefined) view.setBigUint64(24, data.propertyStore === null ? 0n : BigInt(util.toPointer(data.propertyStore)), true);
  // 0x20: pointer
  if (data?.propertyKey !== undefined) view.setBigUint64(32, data.propertyKey === null ? 0n : BigInt(util.toPointer(data.propertyKey)), true);
  return buf;
}

/**
 * _Anonymous_e__Struct (size: 16)
 */
export interface _Anonymous_e__Struct {
  /** u64 */
  Alignment: Deno.PointerValue;
  /** u64 */
  Region: Deno.PointerValue;
}

export const sizeof_Anonymous_e__Struct = 16;

export function alloc_Anonymous_e__Struct(data?: Partial<_Anonymous_e__Struct>): Uint8Array {
  const buf = new Uint8Array(sizeof_Anonymous_e__Struct);
  const view = new DataView(buf.buffer);
  // 0x00: u64
  if (data?.Alignment !== undefined) view.setBigUint64(0, BigInt(data.Alignment), true);
  // 0x08: u64
  if (data?.Region !== undefined) view.setBigUint64(8, BigInt(data.Region), true);
  return buf;
}

/**
 * _Anonymous_e__Union (size: 16)
 */
export interface _Anonymous_e__Union {
  /** _Anonymous_e__Struct */
  Anonymous: Uint8Array | Deno.PointerValue | null;
  /** array */
  X: Deno.PointerValue | null;
}

export const sizeof_Anonymous_e__Union = 16;

export function alloc_Anonymous_e__Union(data?: Partial<_Anonymous_e__Union>): Uint8Array {
  const buf = new Uint8Array(sizeof_Anonymous_e__Union);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.Anonymous !== undefined) view.setBigUint64(0, data.Anonymous === null ? 0n : BigInt(util.toPointer(data.Anonymous)), true);
  // 0x08: pointer
  if (data?.X !== undefined) view.setBigUint64(8, data.X === null ? 0n : BigInt(util.toPointer(data.X)), true);
  return buf;
}

/**
 * Windows.Win32.Media.Audio.Apo.APO_NOTIFICATION (size: 16)
 */
export interface APO_NOTIFICATION {
  /** Windows.Win32.Media.Audio.Apo.APO_NOTIFICATION_TYPE */
  type: APO_NOTIFICATION_TYPE;
  /** _Anonymous_e__Union */
  Anonymous: Uint8Array | Deno.PointerValue | null;
}

export const sizeofAPO_NOTIFICATION = 16;

export function allocAPO_NOTIFICATION(data?: Partial<APO_NOTIFICATION>): Uint8Array {
  const buf = new Uint8Array(sizeofAPO_NOTIFICATION);
  const view = new DataView(buf.buffer);
  // 0x00: i32
  if (data?.type !== undefined) view.setInt32(0, Number(data.type), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.Anonymous !== undefined) view.setBigUint64(8, data.Anonymous === null ? 0n : BigInt(util.toPointer(data.Anonymous)), true);
  return buf;
}

/**
 * Windows.Win32.Media.Audio.Apo.AUDIO_ENDPOINT_VOLUME_APO_NOTIFICATION_DESCRIPTOR (size: 8)
 */
export interface AUDIO_ENDPOINT_VOLUME_APO_NOTIFICATION_DESCRIPTOR {
  /** Windows.Win32.Media.Audio.IMMDevice */
  device: Uint8Array | Deno.PointerValue | null;
}

export const sizeofAUDIO_ENDPOINT_VOLUME_APO_NOTIFICATION_DESCRIPTOR = 8;

export function allocAUDIO_ENDPOINT_VOLUME_APO_NOTIFICATION_DESCRIPTOR(data?: Partial<AUDIO_ENDPOINT_VOLUME_APO_NOTIFICATION_DESCRIPTOR>): Uint8Array {
  const buf = new Uint8Array(sizeofAUDIO_ENDPOINT_VOLUME_APO_NOTIFICATION_DESCRIPTOR);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.device !== undefined) view.setBigUint64(0, data.device === null ? 0n : BigInt(util.toPointer(data.device)), true);
  return buf;
}

/**
 * Windows.Win32.Media.Audio.Apo.AUDIO_ENDPOINT_PROPERTY_CHANGE_APO_NOTIFICATION_DESCRIPTOR (size: 8)
 */
export interface AUDIO_ENDPOINT_PROPERTY_CHANGE_APO_NOTIFICATION_DESCRIPTOR {
  /** Windows.Win32.Media.Audio.IMMDevice */
  device: Uint8Array | Deno.PointerValue | null;
}

export const sizeofAUDIO_ENDPOINT_PROPERTY_CHANGE_APO_NOTIFICATION_DESCRIPTOR = 8;

export function allocAUDIO_ENDPOINT_PROPERTY_CHANGE_APO_NOTIFICATION_DESCRIPTOR(data?: Partial<AUDIO_ENDPOINT_PROPERTY_CHANGE_APO_NOTIFICATION_DESCRIPTOR>): Uint8Array {
  const buf = new Uint8Array(sizeofAUDIO_ENDPOINT_PROPERTY_CHANGE_APO_NOTIFICATION_DESCRIPTOR);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.device !== undefined) view.setBigUint64(0, data.device === null ? 0n : BigInt(util.toPointer(data.device)), true);
  return buf;
}

/**
 * Windows.Win32.Media.Audio.Apo.AUDIO_SYSTEMEFFECTS_PROPERTY_CHANGE_APO_NOTIFICATION_DESCRIPTOR (size: 16)
 */
export interface AUDIO_SYSTEMEFFECTS_PROPERTY_CHANGE_APO_NOTIFICATION_DESCRIPTOR {
  /** Windows.Win32.Media.Audio.IMMDevice */
  device: Uint8Array | Deno.PointerValue | null;
  /** System.Guid */
  propertyStoreContext: Uint8Array | Deno.PointerValue | null;
}

export const sizeofAUDIO_SYSTEMEFFECTS_PROPERTY_CHANGE_APO_NOTIFICATION_DESCRIPTOR = 16;

export function allocAUDIO_SYSTEMEFFECTS_PROPERTY_CHANGE_APO_NOTIFICATION_DESCRIPTOR(data?: Partial<AUDIO_SYSTEMEFFECTS_PROPERTY_CHANGE_APO_NOTIFICATION_DESCRIPTOR>): Uint8Array {
  const buf = new Uint8Array(sizeofAUDIO_SYSTEMEFFECTS_PROPERTY_CHANGE_APO_NOTIFICATION_DESCRIPTOR);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.device !== undefined) view.setBigUint64(0, data.device === null ? 0n : BigInt(util.toPointer(data.device)), true);
  // 0x08: pointer
  if (data?.propertyStoreContext !== undefined) view.setBigUint64(8, data.propertyStoreContext === null ? 0n : BigInt(util.toPointer(data.propertyStoreContext)), true);
  return buf;
}

/**
 * Windows.Win32.Media.Audio.Apo.APO_NOTIFICATION_DESCRIPTOR (size: 16)
 */
export interface APO_NOTIFICATION_DESCRIPTOR {
  /** Windows.Win32.Media.Audio.Apo.APO_NOTIFICATION_TYPE */
  type: APO_NOTIFICATION_TYPE;
  /** _Anonymous_e__Union */
  Anonymous: Uint8Array | Deno.PointerValue | null;
}

export const sizeofAPO_NOTIFICATION_DESCRIPTOR = 16;

export function allocAPO_NOTIFICATION_DESCRIPTOR(data?: Partial<APO_NOTIFICATION_DESCRIPTOR>): Uint8Array {
  const buf = new Uint8Array(sizeofAPO_NOTIFICATION_DESCRIPTOR);
  const view = new DataView(buf.buffer);
  // 0x00: i32
  if (data?.type !== undefined) view.setInt32(0, Number(data.type), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.Anonymous !== undefined) view.setBigUint64(8, data.Anonymous === null ? 0n : BigInt(util.toPointer(data.Anonymous)), true);
  return buf;
}

/**
 * Windows.Win32.Media.Audio.DirectMusic.DLSID (size: 16)
 */
export interface DLSID {
  /** u32 */
  ulData1: number;
  /** u16 */
  usData2: number;
  /** u16 */
  usData3: number;
  /** array */
  abData4: Deno.PointerValue | null;
}

export const sizeofDLSID = 16;

export function allocDLSID(data?: Partial<DLSID>): Uint8Array {
  const buf = new Uint8Array(sizeofDLSID);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.ulData1 !== undefined) view.setUint32(0, Number(data.ulData1), true);
  // 0x04: u16
  if (data?.usData2 !== undefined) view.setUint16(4, Number(data.usData2), true);
  // 0x06: u16
  if (data?.usData3 !== undefined) view.setUint16(6, Number(data.usData3), true);
  // 0x08: pointer
  if (data?.abData4 !== undefined) view.setBigUint64(8, data.abData4 === null ? 0n : BigInt(util.toPointer(data.abData4)), true);
  return buf;
}

/**
 * Windows.Win32.Media.Audio.DirectMusic.DLSVERSION (size: 8)
 */
export interface DLSVERSION {
  /** u32 */
  dwVersionMS: number;
  /** u32 */
  dwVersionLS: number;
}

export const sizeofDLSVERSION = 8;

export function allocDLSVERSION(data?: Partial<DLSVERSION>): Uint8Array {
  const buf = new Uint8Array(sizeofDLSVERSION);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.dwVersionMS !== undefined) view.setUint32(0, Number(data.dwVersionMS), true);
  // 0x04: u32
  if (data?.dwVersionLS !== undefined) view.setUint32(4, Number(data.dwVersionLS), true);
  return buf;
}

/**
 * Windows.Win32.Media.Audio.DirectMusic.CONNECTION (size: 16)
 */
export interface CONNECTION {
  /** u16 */
  usSource: number;
  /** u16 */
  usControl: number;
  /** u16 */
  usDestination: number;
  /** u16 */
  usTransform: number;
  /** i32 */
  lScale: number;
}

export const sizeofCONNECTION = 16;

export function allocCONNECTION(data?: Partial<CONNECTION>): Uint8Array {
  const buf = new Uint8Array(sizeofCONNECTION);
  const view = new DataView(buf.buffer);
  // 0x00: u16
  if (data?.usSource !== undefined) view.setUint16(0, Number(data.usSource), true);
  // 0x02: u16
  if (data?.usControl !== undefined) view.setUint16(2, Number(data.usControl), true);
  // 0x04: u16
  if (data?.usDestination !== undefined) view.setUint16(4, Number(data.usDestination), true);
  // 0x06: u16
  if (data?.usTransform !== undefined) view.setUint16(6, Number(data.usTransform), true);
  // 0x08: i32
  if (data?.lScale !== undefined) view.setInt32(8, Number(data.lScale), true);
  // 0x0c: pad4
  return buf;
}

/**
 * Windows.Win32.Media.Audio.DirectMusic.CONNECTIONLIST (size: 8)
 */
export interface CONNECTIONLIST {
  /** u32 */
  cbSize: number;
  /** u32 */
  cConnections: number;
}

export const sizeofCONNECTIONLIST = 8;

export function allocCONNECTIONLIST(data?: Partial<CONNECTIONLIST>): Uint8Array {
  const buf = new Uint8Array(sizeofCONNECTIONLIST);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.cbSize !== undefined) view.setUint32(0, Number(data.cbSize), true);
  // 0x04: u32
  if (data?.cConnections !== undefined) view.setUint32(4, Number(data.cConnections), true);
  return buf;
}

/**
 * Windows.Win32.Media.Audio.DirectMusic.RGNRANGE (size: 8)
 */
export interface RGNRANGE {
  /** u16 */
  usLow: number;
  /** u16 */
  usHigh: number;
}

export const sizeofRGNRANGE = 8;

export function allocRGNRANGE(data?: Partial<RGNRANGE>): Uint8Array {
  const buf = new Uint8Array(sizeofRGNRANGE);
  const view = new DataView(buf.buffer);
  // 0x00: u16
  if (data?.usLow !== undefined) view.setUint16(0, Number(data.usLow), true);
  // 0x02: u16
  if (data?.usHigh !== undefined) view.setUint16(2, Number(data.usHigh), true);
  // 0x04: pad4
  return buf;
}

/**
 * Windows.Win32.Media.Audio.DirectMusic.MIDILOCALE (size: 8)
 */
export interface MIDILOCALE {
  /** u32 */
  ulBank: number;
  /** u32 */
  ulInstrument: number;
}

export const sizeofMIDILOCALE = 8;

export function allocMIDILOCALE(data?: Partial<MIDILOCALE>): Uint8Array {
  const buf = new Uint8Array(sizeofMIDILOCALE);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.ulBank !== undefined) view.setUint32(0, Number(data.ulBank), true);
  // 0x04: u32
  if (data?.ulInstrument !== undefined) view.setUint32(4, Number(data.ulInstrument), true);
  return buf;
}

/**
 * Windows.Win32.Media.Audio.DirectMusic.RGNHEADER (size: 24)
 */
export interface RGNHEADER {
  /** Windows.Win32.Media.Audio.DirectMusic.RGNRANGE */
  RangeKey: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Media.Audio.DirectMusic.RGNRANGE */
  RangeVelocity: Uint8Array | Deno.PointerValue | null;
  /** u16 */
  fusOptions: number;
  /** u16 */
  usKeyGroup: number;
}

export const sizeofRGNHEADER = 24;

export function allocRGNHEADER(data?: Partial<RGNHEADER>): Uint8Array {
  const buf = new Uint8Array(sizeofRGNHEADER);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.RangeKey !== undefined) view.setBigUint64(0, data.RangeKey === null ? 0n : BigInt(util.toPointer(data.RangeKey)), true);
  // 0x08: pointer
  if (data?.RangeVelocity !== undefined) view.setBigUint64(8, data.RangeVelocity === null ? 0n : BigInt(util.toPointer(data.RangeVelocity)), true);
  // 0x10: u16
  if (data?.fusOptions !== undefined) view.setUint16(16, Number(data.fusOptions), true);
  // 0x12: u16
  if (data?.usKeyGroup !== undefined) view.setUint16(18, Number(data.usKeyGroup), true);
  // 0x14: pad4
  return buf;
}

/**
 * Windows.Win32.Media.Audio.DirectMusic.INSTHEADER (size: 16)
 */
export interface INSTHEADER {
  /** u32 */
  cRegions: number;
  /** Windows.Win32.Media.Audio.DirectMusic.MIDILOCALE */
  Locale: Uint8Array | Deno.PointerValue | null;
}

export const sizeofINSTHEADER = 16;

export function allocINSTHEADER(data?: Partial<INSTHEADER>): Uint8Array {
  const buf = new Uint8Array(sizeofINSTHEADER);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.cRegions !== undefined) view.setUint32(0, Number(data.cRegions), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.Locale !== undefined) view.setBigUint64(8, data.Locale === null ? 0n : BigInt(util.toPointer(data.Locale)), true);
  return buf;
}

/**
 * Windows.Win32.Media.Audio.DirectMusic.DLSHEADER (size: 8)
 */
export interface DLSHEADER {
  /** u32 */
  cInstruments: number;
}

export const sizeofDLSHEADER = 8;

export function allocDLSHEADER(data?: Partial<DLSHEADER>): Uint8Array {
  const buf = new Uint8Array(sizeofDLSHEADER);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.cInstruments !== undefined) view.setUint32(0, Number(data.cInstruments), true);
  // 0x04: pad4
  return buf;
}

/**
 * Windows.Win32.Media.Audio.DirectMusic.WAVELINK (size: 16)
 */
export interface WAVELINK {
  /** u16 */
  fusOptions: number;
  /** u16 */
  usPhaseGroup: number;
  /** u32 */
  ulChannel: number;
  /** u32 */
  ulTableIndex: number;
}

export const sizeofWAVELINK = 16;

export function allocWAVELINK(data?: Partial<WAVELINK>): Uint8Array {
  const buf = new Uint8Array(sizeofWAVELINK);
  const view = new DataView(buf.buffer);
  // 0x00: u16
  if (data?.fusOptions !== undefined) view.setUint16(0, Number(data.fusOptions), true);
  // 0x02: u16
  if (data?.usPhaseGroup !== undefined) view.setUint16(2, Number(data.usPhaseGroup), true);
  // 0x04: u32
  if (data?.ulChannel !== undefined) view.setUint32(4, Number(data.ulChannel), true);
  // 0x08: u32
  if (data?.ulTableIndex !== undefined) view.setUint32(8, Number(data.ulTableIndex), true);
  // 0x0c: pad4
  return buf;
}

/**
 * Windows.Win32.Media.Audio.DirectMusic.POOLCUE (size: 8)
 */
export interface POOLCUE {
  /** u32 */
  ulOffset: number;
}

export const sizeofPOOLCUE = 8;

export function allocPOOLCUE(data?: Partial<POOLCUE>): Uint8Array {
  const buf = new Uint8Array(sizeofPOOLCUE);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.ulOffset !== undefined) view.setUint32(0, Number(data.ulOffset), true);
  // 0x04: pad4
  return buf;
}

/**
 * Windows.Win32.Media.Audio.DirectMusic.POOLTABLE (size: 8)
 */
export interface POOLTABLE {
  /** u32 */
  cbSize: number;
  /** u32 */
  cCues: number;
}

export const sizeofPOOLTABLE = 8;

export function allocPOOLTABLE(data?: Partial<POOLTABLE>): Uint8Array {
  const buf = new Uint8Array(sizeofPOOLTABLE);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.cbSize !== undefined) view.setUint32(0, Number(data.cbSize), true);
  // 0x04: u32
  if (data?.cCues !== undefined) view.setUint32(4, Number(data.cCues), true);
  return buf;
}

/**
 * Windows.Win32.Media.Audio.DirectMusic.WSMPL (size: 24)
 */
export interface WSMPL {
  /** u32 */
  cbSize: number;
  /** u16 */
  usUnityNote: number;
  /** i16 */
  sFineTune: number;
  /** i32 */
  lAttenuation: number;
  /** u32 */
  fulOptions: number;
  /** u32 */
  cSampleLoops: number;
}

export const sizeofWSMPL = 24;

export function allocWSMPL(data?: Partial<WSMPL>): Uint8Array {
  const buf = new Uint8Array(sizeofWSMPL);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.cbSize !== undefined) view.setUint32(0, Number(data.cbSize), true);
  // 0x04: u16
  if (data?.usUnityNote !== undefined) view.setUint16(4, Number(data.usUnityNote), true);
  // 0x06: i16
  if (data?.sFineTune !== undefined) view.setInt16(6, Number(data.sFineTune), true);
  // 0x08: i32
  if (data?.lAttenuation !== undefined) view.setInt32(8, Number(data.lAttenuation), true);
  // 0x0c: u32
  if (data?.fulOptions !== undefined) view.setUint32(12, Number(data.fulOptions), true);
  // 0x10: u32
  if (data?.cSampleLoops !== undefined) view.setUint32(16, Number(data.cSampleLoops), true);
  // 0x14: pad4
  return buf;
}

/**
 * Windows.Win32.Media.Audio.DirectMusic.WLOOP (size: 16)
 */
export interface WLOOP {
  /** u32 */
  cbSize: number;
  /** u32 */
  ulType: number;
  /** u32 */
  ulStart: number;
  /** u32 */
  ulLength: number;
}

export const sizeofWLOOP = 16;

export function allocWLOOP(data?: Partial<WLOOP>): Uint8Array {
  const buf = new Uint8Array(sizeofWLOOP);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.cbSize !== undefined) view.setUint32(0, Number(data.cbSize), true);
  // 0x04: u32
  if (data?.ulType !== undefined) view.setUint32(4, Number(data.ulType), true);
  // 0x08: u32
  if (data?.ulStart !== undefined) view.setUint32(8, Number(data.ulStart), true);
  // 0x0c: u32
  if (data?.ulLength !== undefined) view.setUint32(12, Number(data.ulLength), true);
  return buf;
}

/**
 * Windows.Win32.Media.Audio.DirectMusic.DMUS_DOWNLOADINFO (size: 16)
 */
export interface DMUS_DOWNLOADINFO {
  /** u32 */
  dwDLType: number;
  /** u32 */
  dwDLId: number;
  /** u32 */
  dwNumOffsetTableEntries: number;
  /** u32 */
  cbSize: number;
}

export const sizeofDMUS_DOWNLOADINFO = 16;

export function allocDMUS_DOWNLOADINFO(data?: Partial<DMUS_DOWNLOADINFO>): Uint8Array {
  const buf = new Uint8Array(sizeofDMUS_DOWNLOADINFO);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.dwDLType !== undefined) view.setUint32(0, Number(data.dwDLType), true);
  // 0x04: u32
  if (data?.dwDLId !== undefined) view.setUint32(4, Number(data.dwDLId), true);
  // 0x08: u32
  if (data?.dwNumOffsetTableEntries !== undefined) view.setUint32(8, Number(data.dwNumOffsetTableEntries), true);
  // 0x0c: u32
  if (data?.cbSize !== undefined) view.setUint32(12, Number(data.cbSize), true);
  return buf;
}

/**
 * Windows.Win32.Media.Audio.DirectMusic.DMUS_OFFSETTABLE (size: 8)
 */
export interface DMUS_OFFSETTABLE {
  /** array */
  ulOffsetTable: Deno.PointerValue | null;
}

export const sizeofDMUS_OFFSETTABLE = 8;

export function allocDMUS_OFFSETTABLE(data?: Partial<DMUS_OFFSETTABLE>): Uint8Array {
  const buf = new Uint8Array(sizeofDMUS_OFFSETTABLE);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.ulOffsetTable !== undefined) view.setBigUint64(0, data.ulOffsetTable === null ? 0n : BigInt(util.toPointer(data.ulOffsetTable)), true);
  return buf;
}

/**
 * Windows.Win32.Media.Audio.DirectMusic.DMUS_INSTRUMENT (size: 24)
 */
export interface DMUS_INSTRUMENT {
  /** u32 */
  ulPatch: number;
  /** u32 */
  ulFirstRegionIdx: number;
  /** u32 */
  ulGlobalArtIdx: number;
  /** u32 */
  ulFirstExtCkIdx: number;
  /** u32 */
  ulCopyrightIdx: number;
  /** u32 */
  ulFlags: number;
}

export const sizeofDMUS_INSTRUMENT = 24;

export function allocDMUS_INSTRUMENT(data?: Partial<DMUS_INSTRUMENT>): Uint8Array {
  const buf = new Uint8Array(sizeofDMUS_INSTRUMENT);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.ulPatch !== undefined) view.setUint32(0, Number(data.ulPatch), true);
  // 0x04: u32
  if (data?.ulFirstRegionIdx !== undefined) view.setUint32(4, Number(data.ulFirstRegionIdx), true);
  // 0x08: u32
  if (data?.ulGlobalArtIdx !== undefined) view.setUint32(8, Number(data.ulGlobalArtIdx), true);
  // 0x0c: u32
  if (data?.ulFirstExtCkIdx !== undefined) view.setUint32(12, Number(data.ulFirstExtCkIdx), true);
  // 0x10: u32
  if (data?.ulCopyrightIdx !== undefined) view.setUint32(16, Number(data.ulCopyrightIdx), true);
  // 0x14: u32
  if (data?.ulFlags !== undefined) view.setUint32(20, Number(data.ulFlags), true);
  return buf;
}

/**
 * Windows.Win32.Media.Audio.DirectMusic.DMUS_REGION (size: 56)
 */
export interface DMUS_REGION {
  /** Windows.Win32.Media.Audio.DirectMusic.RGNRANGE */
  RangeKey: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Media.Audio.DirectMusic.RGNRANGE */
  RangeVelocity: Uint8Array | Deno.PointerValue | null;
  /** u16 */
  fusOptions: number;
  /** u16 */
  usKeyGroup: number;
  /** u32 */
  ulRegionArtIdx: number;
  /** u32 */
  ulNextRegionIdx: number;
  /** u32 */
  ulFirstExtCkIdx: number;
  /** Windows.Win32.Media.Audio.DirectMusic.WAVELINK */
  WaveLink: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Media.Audio.DirectMusic.WSMPL */
  WSMP: Uint8Array | Deno.PointerValue | null;
  /** array */
  WLOOP: Deno.PointerValue | null;
}

export const sizeofDMUS_REGION = 56;

export function allocDMUS_REGION(data?: Partial<DMUS_REGION>): Uint8Array {
  const buf = new Uint8Array(sizeofDMUS_REGION);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.RangeKey !== undefined) view.setBigUint64(0, data.RangeKey === null ? 0n : BigInt(util.toPointer(data.RangeKey)), true);
  // 0x08: pointer
  if (data?.RangeVelocity !== undefined) view.setBigUint64(8, data.RangeVelocity === null ? 0n : BigInt(util.toPointer(data.RangeVelocity)), true);
  // 0x10: u16
  if (data?.fusOptions !== undefined) view.setUint16(16, Number(data.fusOptions), true);
  // 0x12: u16
  if (data?.usKeyGroup !== undefined) view.setUint16(18, Number(data.usKeyGroup), true);
  // 0x14: u32
  if (data?.ulRegionArtIdx !== undefined) view.setUint32(20, Number(data.ulRegionArtIdx), true);
  // 0x18: u32
  if (data?.ulNextRegionIdx !== undefined) view.setUint32(24, Number(data.ulNextRegionIdx), true);
  // 0x1c: u32
  if (data?.ulFirstExtCkIdx !== undefined) view.setUint32(28, Number(data.ulFirstExtCkIdx), true);
  // 0x20: pointer
  if (data?.WaveLink !== undefined) view.setBigUint64(32, data.WaveLink === null ? 0n : BigInt(util.toPointer(data.WaveLink)), true);
  // 0x28: pointer
  if (data?.WSMP !== undefined) view.setBigUint64(40, data.WSMP === null ? 0n : BigInt(util.toPointer(data.WSMP)), true);
  // 0x30: pointer
  if (data?.WLOOP !== undefined) view.setBigUint64(48, data.WLOOP === null ? 0n : BigInt(util.toPointer(data.WLOOP)), true);
  return buf;
}

/**
 * Windows.Win32.Media.Audio.DirectMusic.DMUS_LFOPARAMS (size: 24)
 */
export interface DMUS_LFOPARAMS {
  /** i32 */
  pcFrequency: number;
  /** i32 */
  tcDelay: number;
  /** i32 */
  gcVolumeScale: number;
  /** i32 */
  pcPitchScale: number;
  /** i32 */
  gcMWToVolume: number;
  /** i32 */
  pcMWToPitch: number;
}

export const sizeofDMUS_LFOPARAMS = 24;

export function allocDMUS_LFOPARAMS(data?: Partial<DMUS_LFOPARAMS>): Uint8Array {
  const buf = new Uint8Array(sizeofDMUS_LFOPARAMS);
  const view = new DataView(buf.buffer);
  // 0x00: i32
  if (data?.pcFrequency !== undefined) view.setInt32(0, Number(data.pcFrequency), true);
  // 0x04: i32
  if (data?.tcDelay !== undefined) view.setInt32(4, Number(data.tcDelay), true);
  // 0x08: i32
  if (data?.gcVolumeScale !== undefined) view.setInt32(8, Number(data.gcVolumeScale), true);
  // 0x0c: i32
  if (data?.pcPitchScale !== undefined) view.setInt32(12, Number(data.pcPitchScale), true);
  // 0x10: i32
  if (data?.gcMWToVolume !== undefined) view.setInt32(16, Number(data.gcMWToVolume), true);
  // 0x14: i32
  if (data?.pcMWToPitch !== undefined) view.setInt32(20, Number(data.pcMWToPitch), true);
  return buf;
}

/**
 * Windows.Win32.Media.Audio.DirectMusic.DMUS_VEGPARAMS (size: 24)
 */
export interface DMUS_VEGPARAMS {
  /** i32 */
  tcAttack: number;
  /** i32 */
  tcDecay: number;
  /** i32 */
  ptSustain: number;
  /** i32 */
  tcRelease: number;
  /** i32 */
  tcVel2Attack: number;
  /** i32 */
  tcKey2Decay: number;
}

export const sizeofDMUS_VEGPARAMS = 24;

export function allocDMUS_VEGPARAMS(data?: Partial<DMUS_VEGPARAMS>): Uint8Array {
  const buf = new Uint8Array(sizeofDMUS_VEGPARAMS);
  const view = new DataView(buf.buffer);
  // 0x00: i32
  if (data?.tcAttack !== undefined) view.setInt32(0, Number(data.tcAttack), true);
  // 0x04: i32
  if (data?.tcDecay !== undefined) view.setInt32(4, Number(data.tcDecay), true);
  // 0x08: i32
  if (data?.ptSustain !== undefined) view.setInt32(8, Number(data.ptSustain), true);
  // 0x0c: i32
  if (data?.tcRelease !== undefined) view.setInt32(12, Number(data.tcRelease), true);
  // 0x10: i32
  if (data?.tcVel2Attack !== undefined) view.setInt32(16, Number(data.tcVel2Attack), true);
  // 0x14: i32
  if (data?.tcKey2Decay !== undefined) view.setInt32(20, Number(data.tcKey2Decay), true);
  return buf;
}

/**
 * Windows.Win32.Media.Audio.DirectMusic.DMUS_PEGPARAMS (size: 32)
 */
export interface DMUS_PEGPARAMS {
  /** i32 */
  tcAttack: number;
  /** i32 */
  tcDecay: number;
  /** i32 */
  ptSustain: number;
  /** i32 */
  tcRelease: number;
  /** i32 */
  tcVel2Attack: number;
  /** i32 */
  tcKey2Decay: number;
  /** i32 */
  pcRange: number;
}

export const sizeofDMUS_PEGPARAMS = 32;

export function allocDMUS_PEGPARAMS(data?: Partial<DMUS_PEGPARAMS>): Uint8Array {
  const buf = new Uint8Array(sizeofDMUS_PEGPARAMS);
  const view = new DataView(buf.buffer);
  // 0x00: i32
  if (data?.tcAttack !== undefined) view.setInt32(0, Number(data.tcAttack), true);
  // 0x04: i32
  if (data?.tcDecay !== undefined) view.setInt32(4, Number(data.tcDecay), true);
  // 0x08: i32
  if (data?.ptSustain !== undefined) view.setInt32(8, Number(data.ptSustain), true);
  // 0x0c: i32
  if (data?.tcRelease !== undefined) view.setInt32(12, Number(data.tcRelease), true);
  // 0x10: i32
  if (data?.tcVel2Attack !== undefined) view.setInt32(16, Number(data.tcVel2Attack), true);
  // 0x14: i32
  if (data?.tcKey2Decay !== undefined) view.setInt32(20, Number(data.tcKey2Decay), true);
  // 0x18: i32
  if (data?.pcRange !== undefined) view.setInt32(24, Number(data.pcRange), true);
  // 0x1c: pad4
  return buf;
}

/**
 * Windows.Win32.Media.Audio.DirectMusic.DMUS_MSCPARAMS (size: 8)
 */
export interface DMUS_MSCPARAMS {
  /** i32 */
  ptDefaultPan: number;
}

export const sizeofDMUS_MSCPARAMS = 8;

export function allocDMUS_MSCPARAMS(data?: Partial<DMUS_MSCPARAMS>): Uint8Array {
  const buf = new Uint8Array(sizeofDMUS_MSCPARAMS);
  const view = new DataView(buf.buffer);
  // 0x00: i32
  if (data?.ptDefaultPan !== undefined) view.setInt32(0, Number(data.ptDefaultPan), true);
  // 0x04: pad4
  return buf;
}

/**
 * Windows.Win32.Media.Audio.DirectMusic.DMUS_ARTICPARAMS (size: 32)
 */
export interface DMUS_ARTICPARAMS {
  /** Windows.Win32.Media.Audio.DirectMusic.DMUS_LFOPARAMS */
  LFO: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Media.Audio.DirectMusic.DMUS_VEGPARAMS */
  VolEG: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Media.Audio.DirectMusic.DMUS_PEGPARAMS */
  PitchEG: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Media.Audio.DirectMusic.DMUS_MSCPARAMS */
  Misc: Uint8Array | Deno.PointerValue | null;
}

export const sizeofDMUS_ARTICPARAMS = 32;

export function allocDMUS_ARTICPARAMS(data?: Partial<DMUS_ARTICPARAMS>): Uint8Array {
  const buf = new Uint8Array(sizeofDMUS_ARTICPARAMS);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.LFO !== undefined) view.setBigUint64(0, data.LFO === null ? 0n : BigInt(util.toPointer(data.LFO)), true);
  // 0x08: pointer
  if (data?.VolEG !== undefined) view.setBigUint64(8, data.VolEG === null ? 0n : BigInt(util.toPointer(data.VolEG)), true);
  // 0x10: pointer
  if (data?.PitchEG !== undefined) view.setBigUint64(16, data.PitchEG === null ? 0n : BigInt(util.toPointer(data.PitchEG)), true);
  // 0x18: pointer
  if (data?.Misc !== undefined) view.setBigUint64(24, data.Misc === null ? 0n : BigInt(util.toPointer(data.Misc)), true);
  return buf;
}

/**
 * Windows.Win32.Media.Audio.DirectMusic.DMUS_ARTICULATION (size: 8)
 */
export interface DMUS_ARTICULATION {
  /** u32 */
  ulArt1Idx: number;
  /** u32 */
  ulFirstExtCkIdx: number;
}

export const sizeofDMUS_ARTICULATION = 8;

export function allocDMUS_ARTICULATION(data?: Partial<DMUS_ARTICULATION>): Uint8Array {
  const buf = new Uint8Array(sizeofDMUS_ARTICULATION);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.ulArt1Idx !== undefined) view.setUint32(0, Number(data.ulArt1Idx), true);
  // 0x04: u32
  if (data?.ulFirstExtCkIdx !== undefined) view.setUint32(4, Number(data.ulFirstExtCkIdx), true);
  return buf;
}

/**
 * Windows.Win32.Media.Audio.DirectMusic.DMUS_ARTICULATION2 (size: 16)
 */
export interface DMUS_ARTICULATION2 {
  /** u32 */
  ulArtIdx: number;
  /** u32 */
  ulFirstExtCkIdx: number;
  /** u32 */
  ulNextArtIdx: number;
}

export const sizeofDMUS_ARTICULATION2 = 16;

export function allocDMUS_ARTICULATION2(data?: Partial<DMUS_ARTICULATION2>): Uint8Array {
  const buf = new Uint8Array(sizeofDMUS_ARTICULATION2);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.ulArtIdx !== undefined) view.setUint32(0, Number(data.ulArtIdx), true);
  // 0x04: u32
  if (data?.ulFirstExtCkIdx !== undefined) view.setUint32(4, Number(data.ulFirstExtCkIdx), true);
  // 0x08: u32
  if (data?.ulNextArtIdx !== undefined) view.setUint32(8, Number(data.ulNextArtIdx), true);
  // 0x0c: pad4
  return buf;
}

/**
 * Windows.Win32.Media.Audio.DirectMusic.DMUS_EXTENSIONCHUNK (size: 24)
 */
export interface DMUS_EXTENSIONCHUNK {
  /** u32 */
  cbSize: number;
  /** u32 */
  ulNextExtCkIdx: number;
  /** u32 */
  ExtCkID: number;
  /** array */
  byExtCk: Deno.PointerValue | null;
}

export const sizeofDMUS_EXTENSIONCHUNK = 24;

export function allocDMUS_EXTENSIONCHUNK(data?: Partial<DMUS_EXTENSIONCHUNK>): Uint8Array {
  const buf = new Uint8Array(sizeofDMUS_EXTENSIONCHUNK);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.cbSize !== undefined) view.setUint32(0, Number(data.cbSize), true);
  // 0x04: u32
  if (data?.ulNextExtCkIdx !== undefined) view.setUint32(4, Number(data.ulNextExtCkIdx), true);
  // 0x08: u32
  if (data?.ExtCkID !== undefined) view.setUint32(8, Number(data.ExtCkID), true);
  // 0x0c: pad4
  // 0x10: pointer
  if (data?.byExtCk !== undefined) view.setBigUint64(16, data.byExtCk === null ? 0n : BigInt(util.toPointer(data.byExtCk)), true);
  return buf;
}

/**
 * Windows.Win32.Media.Audio.DirectMusic.DMUS_COPYRIGHT (size: 16)
 */
export interface DMUS_COPYRIGHT {
  /** u32 */
  cbSize: number;
  /** array */
  byCopyright: Deno.PointerValue | null;
}

export const sizeofDMUS_COPYRIGHT = 16;

export function allocDMUS_COPYRIGHT(data?: Partial<DMUS_COPYRIGHT>): Uint8Array {
  const buf = new Uint8Array(sizeofDMUS_COPYRIGHT);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.cbSize !== undefined) view.setUint32(0, Number(data.cbSize), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.byCopyright !== undefined) view.setBigUint64(8, data.byCopyright === null ? 0n : BigInt(util.toPointer(data.byCopyright)), true);
  return buf;
}

/**
 * Windows.Win32.Media.Audio.DirectMusic.DMUS_WAVEDATA (size: 16)
 */
export interface DMUS_WAVEDATA {
  /** u32 */
  cbSize: number;
  /** array */
  byData: Deno.PointerValue | null;
}

export const sizeofDMUS_WAVEDATA = 16;

export function allocDMUS_WAVEDATA(data?: Partial<DMUS_WAVEDATA>): Uint8Array {
  const buf = new Uint8Array(sizeofDMUS_WAVEDATA);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.cbSize !== undefined) view.setUint32(0, Number(data.cbSize), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.byData !== undefined) view.setBigUint64(8, data.byData === null ? 0n : BigInt(util.toPointer(data.byData)), true);
  return buf;
}

/**
 * Windows.Win32.Media.Audio.WAVEFORMATEX (size: 24)
 */
export interface WAVEFORMATEX {
  /** u16 */
  wFormatTag: number;
  /** u16 */
  nChannels: number;
  /** u32 */
  nSamplesPerSec: number;
  /** u32 */
  nAvgBytesPerSec: number;
  /** u16 */
  nBlockAlign: number;
  /** u16 */
  wBitsPerSample: number;
  /** u16 */
  cbSize: number;
}

export const sizeofWAVEFORMATEX = 24;

export function allocWAVEFORMATEX(data?: Partial<WAVEFORMATEX>): Uint8Array {
  const buf = new Uint8Array(sizeofWAVEFORMATEX);
  const view = new DataView(buf.buffer);
  // 0x00: u16
  if (data?.wFormatTag !== undefined) view.setUint16(0, Number(data.wFormatTag), true);
  // 0x02: u16
  if (data?.nChannels !== undefined) view.setUint16(2, Number(data.nChannels), true);
  // 0x04: u32
  if (data?.nSamplesPerSec !== undefined) view.setUint32(4, Number(data.nSamplesPerSec), true);
  // 0x08: u32
  if (data?.nAvgBytesPerSec !== undefined) view.setUint32(8, Number(data.nAvgBytesPerSec), true);
  // 0x0c: u16
  if (data?.nBlockAlign !== undefined) view.setUint16(12, Number(data.nBlockAlign), true);
  // 0x0e: u16
  if (data?.wBitsPerSample !== undefined) view.setUint16(14, Number(data.wBitsPerSample), true);
  // 0x10: u16
  if (data?.cbSize !== undefined) view.setUint16(16, Number(data.cbSize), true);
  // 0x12: pad6
  return buf;
}

/**
 * Windows.Win32.Media.Audio.DirectMusic.DMUS_WAVE (size: 24)
 */
export interface DMUS_WAVE {
  /** u32 */
  ulFirstExtCkIdx: number;
  /** u32 */
  ulCopyrightIdx: number;
  /** u32 */
  ulWaveDataIdx: number;
  /** Windows.Win32.Media.Audio.WAVEFORMATEX */
  WaveformatEx: Uint8Array | Deno.PointerValue | null;
}

export const sizeofDMUS_WAVE = 24;

export function allocDMUS_WAVE(data?: Partial<DMUS_WAVE>): Uint8Array {
  const buf = new Uint8Array(sizeofDMUS_WAVE);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.ulFirstExtCkIdx !== undefined) view.setUint32(0, Number(data.ulFirstExtCkIdx), true);
  // 0x04: u32
  if (data?.ulCopyrightIdx !== undefined) view.setUint32(4, Number(data.ulCopyrightIdx), true);
  // 0x08: u32
  if (data?.ulWaveDataIdx !== undefined) view.setUint32(8, Number(data.ulWaveDataIdx), true);
  // 0x0c: pad4
  // 0x10: pointer
  if (data?.WaveformatEx !== undefined) view.setBigUint64(16, data.WaveformatEx === null ? 0n : BigInt(util.toPointer(data.WaveformatEx)), true);
  return buf;
}

/**
 * Windows.Win32.Media.Audio.DirectMusic.DMUS_NOTERANGE (size: 8)
 */
export interface DMUS_NOTERANGE {
  /** u32 */
  dwLowNote: number;
  /** u32 */
  dwHighNote: number;
}

export const sizeofDMUS_NOTERANGE = 8;

export function allocDMUS_NOTERANGE(data?: Partial<DMUS_NOTERANGE>): Uint8Array {
  const buf = new Uint8Array(sizeofDMUS_NOTERANGE);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.dwLowNote !== undefined) view.setUint32(0, Number(data.dwLowNote), true);
  // 0x04: u32
  if (data?.dwHighNote !== undefined) view.setUint32(4, Number(data.dwHighNote), true);
  return buf;
}

/**
 * Windows.Win32.Media.Audio.DirectMusic.DMUS_WAVEARTDL (size: 24)
 */
export interface DMUS_WAVEARTDL {
  /** u32 */
  ulDownloadIdIdx: number;
  /** u32 */
  ulBus: number;
  /** u32 */
  ulBuffers: number;
  /** u32 */
  ulMasterDLId: number;
  /** u16 */
  usOptions: number;
}

export const sizeofDMUS_WAVEARTDL = 24;

export function allocDMUS_WAVEARTDL(data?: Partial<DMUS_WAVEARTDL>): Uint8Array {
  const buf = new Uint8Array(sizeofDMUS_WAVEARTDL);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.ulDownloadIdIdx !== undefined) view.setUint32(0, Number(data.ulDownloadIdIdx), true);
  // 0x04: u32
  if (data?.ulBus !== undefined) view.setUint32(4, Number(data.ulBus), true);
  // 0x08: u32
  if (data?.ulBuffers !== undefined) view.setUint32(8, Number(data.ulBuffers), true);
  // 0x0c: u32
  if (data?.ulMasterDLId !== undefined) view.setUint32(12, Number(data.ulMasterDLId), true);
  // 0x10: u16
  if (data?.usOptions !== undefined) view.setUint16(16, Number(data.usOptions), true);
  // 0x12: pad6
  return buf;
}

/**
 * Windows.Win32.Media.Audio.DirectMusic.DMUS_WAVEDL (size: 8)
 */
export interface DMUS_WAVEDL {
  /** u32 */
  cbWaveData: number;
}

export const sizeofDMUS_WAVEDL = 8;

export function allocDMUS_WAVEDL(data?: Partial<DMUS_WAVEDL>): Uint8Array {
  const buf = new Uint8Array(sizeofDMUS_WAVEDL);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.cbWaveData !== undefined) view.setUint32(0, Number(data.cbWaveData), true);
  // 0x04: pad4
  return buf;
}

/**
 * Windows.Win32.Media.Audio.DirectMusic.DMUS_EVENTHEADER (size: 24)
 */
export interface DMUS_EVENTHEADER {
  /** u32 */
  cbEvent: number;
  /** u32 */
  dwChannelGroup: number;
  /** i64 */
  rtDelta: Deno.PointerValue;
  /** u32 */
  dwFlags: number;
}

export const sizeofDMUS_EVENTHEADER = 24;

export function allocDMUS_EVENTHEADER(data?: Partial<DMUS_EVENTHEADER>): Uint8Array {
  const buf = new Uint8Array(sizeofDMUS_EVENTHEADER);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.cbEvent !== undefined) view.setUint32(0, Number(data.cbEvent), true);
  // 0x04: u32
  if (data?.dwChannelGroup !== undefined) view.setUint32(4, Number(data.dwChannelGroup), true);
  // 0x08: i64
  if (data?.rtDelta !== undefined) view.setBigInt64(8, BigInt(data.rtDelta), true);
  // 0x10: u32
  if (data?.dwFlags !== undefined) view.setUint32(16, Number(data.dwFlags), true);
  // 0x14: pad4
  return buf;
}

/**
 * Windows.Win32.Media.Audio.DirectMusic.DMUS_BUFFERDESC (size: 24)
 */
export interface DMUS_BUFFERDESC {
  /** u32 */
  dwSize: number;
  /** u32 */
  dwFlags: number;
  /** System.Guid */
  guidBufferFormat: Uint8Array | Deno.PointerValue | null;
  /** u32 */
  cbBuffer: number;
}

export const sizeofDMUS_BUFFERDESC = 24;

export function allocDMUS_BUFFERDESC(data?: Partial<DMUS_BUFFERDESC>): Uint8Array {
  const buf = new Uint8Array(sizeofDMUS_BUFFERDESC);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.dwSize !== undefined) view.setUint32(0, Number(data.dwSize), true);
  // 0x04: u32
  if (data?.dwFlags !== undefined) view.setUint32(4, Number(data.dwFlags), true);
  // 0x08: pointer
  if (data?.guidBufferFormat !== undefined) view.setBigUint64(8, data.guidBufferFormat === null ? 0n : BigInt(util.toPointer(data.guidBufferFormat)), true);
  // 0x10: u32
  if (data?.cbBuffer !== undefined) view.setUint32(16, Number(data.cbBuffer), true);
  // 0x14: pad4
  return buf;
}

/**
 * Windows.Win32.Media.Audio.DirectMusic.DMUS_PORTCAPS (size: 56)
 */
export interface DMUS_PORTCAPS {
  /** u32 */
  dwSize: number;
  /** u32 */
  dwFlags: number;
  /** System.Guid */
  guidPort: Uint8Array | Deno.PointerValue | null;
  /** u32 */
  dwClass: number;
  /** u32 */
  dwType: number;
  /** u32 */
  dwMemorySize: number;
  /** u32 */
  dwMaxChannelGroups: number;
  /** u32 */
  dwMaxVoices: number;
  /** u32 */
  dwMaxAudioChannels: number;
  /** u32 */
  dwEffectFlags: number;
  /** array */
  wszDescription: Deno.PointerValue | null;
}

export const sizeofDMUS_PORTCAPS = 56;

export function allocDMUS_PORTCAPS(data?: Partial<DMUS_PORTCAPS>): Uint8Array {
  const buf = new Uint8Array(sizeofDMUS_PORTCAPS);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.dwSize !== undefined) view.setUint32(0, Number(data.dwSize), true);
  // 0x04: u32
  if (data?.dwFlags !== undefined) view.setUint32(4, Number(data.dwFlags), true);
  // 0x08: pointer
  if (data?.guidPort !== undefined) view.setBigUint64(8, data.guidPort === null ? 0n : BigInt(util.toPointer(data.guidPort)), true);
  // 0x10: u32
  if (data?.dwClass !== undefined) view.setUint32(16, Number(data.dwClass), true);
  // 0x14: u32
  if (data?.dwType !== undefined) view.setUint32(20, Number(data.dwType), true);
  // 0x18: u32
  if (data?.dwMemorySize !== undefined) view.setUint32(24, Number(data.dwMemorySize), true);
  // 0x1c: u32
  if (data?.dwMaxChannelGroups !== undefined) view.setUint32(28, Number(data.dwMaxChannelGroups), true);
  // 0x20: u32
  if (data?.dwMaxVoices !== undefined) view.setUint32(32, Number(data.dwMaxVoices), true);
  // 0x24: u32
  if (data?.dwMaxAudioChannels !== undefined) view.setUint32(36, Number(data.dwMaxAudioChannels), true);
  // 0x28: u32
  if (data?.dwEffectFlags !== undefined) view.setUint32(40, Number(data.dwEffectFlags), true);
  // 0x2c: pad4
  // 0x30: pointer
  if (data?.wszDescription !== undefined) view.setBigUint64(48, data.wszDescription === null ? 0n : BigInt(util.toPointer(data.wszDescription)), true);
  return buf;
}

/**
 * Windows.Win32.Media.Audio.DirectMusic.DMUS_PORTPARAMS7 (size: 32)
 */
export interface DMUS_PORTPARAMS7 {
  /** u32 */
  dwSize: number;
  /** u32 */
  dwValidParams: number;
  /** u32 */
  dwVoices: number;
  /** u32 */
  dwChannelGroups: number;
  /** u32 */
  dwAudioChannels: number;
  /** u32 */
  dwSampleRate: number;
  /** u32 */
  dwEffectFlags: number;
  /** Windows.Win32.Foundation.BOOL */
  fShare: boolean;
}

export const sizeofDMUS_PORTPARAMS7 = 32;

export function allocDMUS_PORTPARAMS7(data?: Partial<DMUS_PORTPARAMS7>): Uint8Array {
  const buf = new Uint8Array(sizeofDMUS_PORTPARAMS7);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.dwSize !== undefined) view.setUint32(0, Number(data.dwSize), true);
  // 0x04: u32
  if (data?.dwValidParams !== undefined) view.setUint32(4, Number(data.dwValidParams), true);
  // 0x08: u32
  if (data?.dwVoices !== undefined) view.setUint32(8, Number(data.dwVoices), true);
  // 0x0c: u32
  if (data?.dwChannelGroups !== undefined) view.setUint32(12, Number(data.dwChannelGroups), true);
  // 0x10: u32
  if (data?.dwAudioChannels !== undefined) view.setUint32(16, Number(data.dwAudioChannels), true);
  // 0x14: u32
  if (data?.dwSampleRate !== undefined) view.setUint32(20, Number(data.dwSampleRate), true);
  // 0x18: u32
  if (data?.dwEffectFlags !== undefined) view.setUint32(24, Number(data.dwEffectFlags), true);
  // 0x1c: i32
  if (data?.fShare !== undefined) view.setInt32(28, Number(data.fShare), true);
  return buf;
}

/**
 * Windows.Win32.Media.Audio.DirectMusic.DMUS_PORTPARAMS8 (size: 40)
 */
export interface DMUS_PORTPARAMS8 {
  /** u32 */
  dwSize: number;
  /** u32 */
  dwValidParams: number;
  /** u32 */
  dwVoices: number;
  /** u32 */
  dwChannelGroups: number;
  /** u32 */
  dwAudioChannels: number;
  /** u32 */
  dwSampleRate: number;
  /** u32 */
  dwEffectFlags: number;
  /** Windows.Win32.Foundation.BOOL */
  fShare: boolean;
  /** u32 */
  dwFeatures: number;
}

export const sizeofDMUS_PORTPARAMS8 = 40;

export function allocDMUS_PORTPARAMS8(data?: Partial<DMUS_PORTPARAMS8>): Uint8Array {
  const buf = new Uint8Array(sizeofDMUS_PORTPARAMS8);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.dwSize !== undefined) view.setUint32(0, Number(data.dwSize), true);
  // 0x04: u32
  if (data?.dwValidParams !== undefined) view.setUint32(4, Number(data.dwValidParams), true);
  // 0x08: u32
  if (data?.dwVoices !== undefined) view.setUint32(8, Number(data.dwVoices), true);
  // 0x0c: u32
  if (data?.dwChannelGroups !== undefined) view.setUint32(12, Number(data.dwChannelGroups), true);
  // 0x10: u32
  if (data?.dwAudioChannels !== undefined) view.setUint32(16, Number(data.dwAudioChannels), true);
  // 0x14: u32
  if (data?.dwSampleRate !== undefined) view.setUint32(20, Number(data.dwSampleRate), true);
  // 0x18: u32
  if (data?.dwEffectFlags !== undefined) view.setUint32(24, Number(data.dwEffectFlags), true);
  // 0x1c: i32
  if (data?.fShare !== undefined) view.setInt32(28, Number(data.fShare), true);
  // 0x20: u32
  if (data?.dwFeatures !== undefined) view.setUint32(32, Number(data.dwFeatures), true);
  // 0x24: pad4
  return buf;
}

/**
 * Windows.Win32.Media.Audio.DirectMusic.DMUS_SYNTHSTATS (size: 32)
 */
export interface DMUS_SYNTHSTATS {
  /** u32 */
  dwSize: number;
  /** u32 */
  dwValidStats: number;
  /** u32 */
  dwVoices: number;
  /** u32 */
  dwTotalCPU: number;
  /** u32 */
  dwCPUPerVoice: number;
  /** u32 */
  dwLostNotes: number;
  /** u32 */
  dwFreeMemory: number;
  /** i32 */
  lPeakVolume: number;
}

export const sizeofDMUS_SYNTHSTATS = 32;

export function allocDMUS_SYNTHSTATS(data?: Partial<DMUS_SYNTHSTATS>): Uint8Array {
  const buf = new Uint8Array(sizeofDMUS_SYNTHSTATS);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.dwSize !== undefined) view.setUint32(0, Number(data.dwSize), true);
  // 0x04: u32
  if (data?.dwValidStats !== undefined) view.setUint32(4, Number(data.dwValidStats), true);
  // 0x08: u32
  if (data?.dwVoices !== undefined) view.setUint32(8, Number(data.dwVoices), true);
  // 0x0c: u32
  if (data?.dwTotalCPU !== undefined) view.setUint32(12, Number(data.dwTotalCPU), true);
  // 0x10: u32
  if (data?.dwCPUPerVoice !== undefined) view.setUint32(16, Number(data.dwCPUPerVoice), true);
  // 0x14: u32
  if (data?.dwLostNotes !== undefined) view.setUint32(20, Number(data.dwLostNotes), true);
  // 0x18: u32
  if (data?.dwFreeMemory !== undefined) view.setUint32(24, Number(data.dwFreeMemory), true);
  // 0x1c: i32
  if (data?.lPeakVolume !== undefined) view.setInt32(28, Number(data.lPeakVolume), true);
  return buf;
}

/**
 * Windows.Win32.Media.Audio.DirectMusic.DMUS_SYNTHSTATS8 (size: 40)
 */
export interface DMUS_SYNTHSTATS8 {
  /** u32 */
  dwSize: number;
  /** u32 */
  dwValidStats: number;
  /** u32 */
  dwVoices: number;
  /** u32 */
  dwTotalCPU: number;
  /** u32 */
  dwCPUPerVoice: number;
  /** u32 */
  dwLostNotes: number;
  /** u32 */
  dwFreeMemory: number;
  /** i32 */
  lPeakVolume: number;
  /** u32 */
  dwSynthMemUse: number;
}

export const sizeofDMUS_SYNTHSTATS8 = 40;

export function allocDMUS_SYNTHSTATS8(data?: Partial<DMUS_SYNTHSTATS8>): Uint8Array {
  const buf = new Uint8Array(sizeofDMUS_SYNTHSTATS8);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.dwSize !== undefined) view.setUint32(0, Number(data.dwSize), true);
  // 0x04: u32
  if (data?.dwValidStats !== undefined) view.setUint32(4, Number(data.dwValidStats), true);
  // 0x08: u32
  if (data?.dwVoices !== undefined) view.setUint32(8, Number(data.dwVoices), true);
  // 0x0c: u32
  if (data?.dwTotalCPU !== undefined) view.setUint32(12, Number(data.dwTotalCPU), true);
  // 0x10: u32
  if (data?.dwCPUPerVoice !== undefined) view.setUint32(16, Number(data.dwCPUPerVoice), true);
  // 0x14: u32
  if (data?.dwLostNotes !== undefined) view.setUint32(20, Number(data.dwLostNotes), true);
  // 0x18: u32
  if (data?.dwFreeMemory !== undefined) view.setUint32(24, Number(data.dwFreeMemory), true);
  // 0x1c: i32
  if (data?.lPeakVolume !== undefined) view.setInt32(28, Number(data.lPeakVolume), true);
  // 0x20: u32
  if (data?.dwSynthMemUse !== undefined) view.setUint32(32, Number(data.dwSynthMemUse), true);
  // 0x24: pad4
  return buf;
}

/**
 * Windows.Win32.Media.Audio.DirectMusic.DMUS_WAVES_REVERB_PARAMS (size: 16)
 */
export interface DMUS_WAVES_REVERB_PARAMS {
  /** f32 */
  fInGain: number;
  /** f32 */
  fReverbMix: number;
  /** f32 */
  fReverbTime: number;
  /** f32 */
  fHighFreqRTRatio: number;
}

export const sizeofDMUS_WAVES_REVERB_PARAMS = 16;

export function allocDMUS_WAVES_REVERB_PARAMS(data?: Partial<DMUS_WAVES_REVERB_PARAMS>): Uint8Array {
  const buf = new Uint8Array(sizeofDMUS_WAVES_REVERB_PARAMS);
  const view = new DataView(buf.buffer);
  // 0x00: f32
  if (data?.fInGain !== undefined) view.setFloat32(0, Number(data.fInGain), true);
  // 0x04: f32
  if (data?.fReverbMix !== undefined) view.setFloat32(4, Number(data.fReverbMix), true);
  // 0x08: f32
  if (data?.fReverbTime !== undefined) view.setFloat32(8, Number(data.fReverbTime), true);
  // 0x0c: f32
  if (data?.fHighFreqRTRatio !== undefined) view.setFloat32(12, Number(data.fHighFreqRTRatio), true);
  return buf;
}

/**
 * Windows.Win32.Media.Audio.DirectMusic.DMUS_CLOCKINFO7 (size: 24)
 */
export interface DMUS_CLOCKINFO7 {
  /** u32 */
  dwSize: number;
  /** Windows.Win32.Media.Audio.DirectMusic.DMUS_CLOCKTYPE */
  ctType: DMUS_CLOCKTYPE;
  /** System.Guid */
  guidClock: Uint8Array | Deno.PointerValue | null;
  /** array */
  wszDescription: Deno.PointerValue | null;
}

export const sizeofDMUS_CLOCKINFO7 = 24;

export function allocDMUS_CLOCKINFO7(data?: Partial<DMUS_CLOCKINFO7>): Uint8Array {
  const buf = new Uint8Array(sizeofDMUS_CLOCKINFO7);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.dwSize !== undefined) view.setUint32(0, Number(data.dwSize), true);
  // 0x04: i32
  if (data?.ctType !== undefined) view.setInt32(4, Number(data.ctType), true);
  // 0x08: pointer
  if (data?.guidClock !== undefined) view.setBigUint64(8, data.guidClock === null ? 0n : BigInt(util.toPointer(data.guidClock)), true);
  // 0x10: pointer
  if (data?.wszDescription !== undefined) view.setBigUint64(16, data.wszDescription === null ? 0n : BigInt(util.toPointer(data.wszDescription)), true);
  return buf;
}

/**
 * Windows.Win32.Media.Audio.DirectMusic.DMUS_CLOCKINFO8 (size: 32)
 */
export interface DMUS_CLOCKINFO8 {
  /** u32 */
  dwSize: number;
  /** Windows.Win32.Media.Audio.DirectMusic.DMUS_CLOCKTYPE */
  ctType: DMUS_CLOCKTYPE;
  /** System.Guid */
  guidClock: Uint8Array | Deno.PointerValue | null;
  /** array */
  wszDescription: Deno.PointerValue | null;
  /** u32 */
  dwFlags: number;
}

export const sizeofDMUS_CLOCKINFO8 = 32;

export function allocDMUS_CLOCKINFO8(data?: Partial<DMUS_CLOCKINFO8>): Uint8Array {
  const buf = new Uint8Array(sizeofDMUS_CLOCKINFO8);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.dwSize !== undefined) view.setUint32(0, Number(data.dwSize), true);
  // 0x04: i32
  if (data?.ctType !== undefined) view.setInt32(4, Number(data.ctType), true);
  // 0x08: pointer
  if (data?.guidClock !== undefined) view.setBigUint64(8, data.guidClock === null ? 0n : BigInt(util.toPointer(data.guidClock)), true);
  // 0x10: pointer
  if (data?.wszDescription !== undefined) view.setBigUint64(16, data.wszDescription === null ? 0n : BigInt(util.toPointer(data.wszDescription)), true);
  // 0x18: u32
  if (data?.dwFlags !== undefined) view.setUint32(24, Number(data.dwFlags), true);
  // 0x1c: pad4
  return buf;
}

/**
 * Windows.Win32.Media.Audio.DirectMusic.DMUS_VOICE_STATE (size: 16)
 */
export interface DMUS_VOICE_STATE {
  /** Windows.Win32.Foundation.BOOL */
  bExists: boolean;
  /** u64 */
  spPosition: Deno.PointerValue;
}

export const sizeofDMUS_VOICE_STATE = 16;

export function allocDMUS_VOICE_STATE(data?: Partial<DMUS_VOICE_STATE>): Uint8Array {
  const buf = new Uint8Array(sizeofDMUS_VOICE_STATE);
  const view = new DataView(buf.buffer);
  // 0x00: i32
  if (data?.bExists !== undefined) view.setInt32(0, Number(data.bExists), true);
  // 0x04: pad4
  // 0x08: u64
  if (data?.spPosition !== undefined) view.setBigUint64(8, BigInt(data.spPosition), true);
  return buf;
}

export type PSTR = Deno.PointerValue | Uint8Array | null;

/**
 * Windows.Win32.Media.Audio.DirectMusic.DSPROPERTY_DIRECTSOUNDDEVICE_WAVEDEVICEMAPPING_A_DATA (size: 24)
 */
export interface DSPROPERTY_DIRECTSOUNDDEVICE_WAVEDEVICEMAPPING_A_DATA {
  /** Windows.Win32.Foundation.PSTR */
  DeviceName: string | null | Uint8Array;
  /** Windows.Win32.Media.Audio.DirectMusic.DIRECTSOUNDDEVICE_DATAFLOW */
  DataFlow: DIRECTSOUNDDEVICE_DATAFLOW;
  /** System.Guid */
  DeviceId: Uint8Array | Deno.PointerValue | null;
}

export const sizeofDSPROPERTY_DIRECTSOUNDDEVICE_WAVEDEVICEMAPPING_A_DATA = 24;

export function allocDSPROPERTY_DIRECTSOUNDDEVICE_WAVEDEVICEMAPPING_A_DATA(data?: Partial<DSPROPERTY_DIRECTSOUNDDEVICE_WAVEDEVICEMAPPING_A_DATA>): Uint8Array {
  const buf = new Uint8Array(sizeofDSPROPERTY_DIRECTSOUNDDEVICE_WAVEDEVICEMAPPING_A_DATA);
  const view = new DataView(buf.buffer);
  // 0x00: buffer
  if (data?.DeviceName !== undefined) {
    (buf as any)._f0 = util.pstrToFfi(data.DeviceName);
    view.setBigUint64(0, (buf as any)._f0 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f0)), true);
  }
  // 0x08: i32
  if (data?.DataFlow !== undefined) view.setInt32(8, Number(data.DataFlow), true);
  // 0x0c: pad4
  // 0x10: pointer
  if (data?.DeviceId !== undefined) view.setBigUint64(16, data.DeviceId === null ? 0n : BigInt(util.toPointer(data.DeviceId)), true);
  return buf;
}

/**
 * Windows.Win32.Media.Audio.DirectMusic.DSPROPERTY_DIRECTSOUNDDEVICE_WAVEDEVICEMAPPING_W_DATA (size: 24)
 */
export interface DSPROPERTY_DIRECTSOUNDDEVICE_WAVEDEVICEMAPPING_W_DATA {
  /** Windows.Win32.Foundation.PWSTR */
  DeviceName: string | null | Uint8Array | Uint16Array;
  /** Windows.Win32.Media.Audio.DirectMusic.DIRECTSOUNDDEVICE_DATAFLOW */
  DataFlow: DIRECTSOUNDDEVICE_DATAFLOW;
  /** System.Guid */
  DeviceId: Uint8Array | Deno.PointerValue | null;
}

export const sizeofDSPROPERTY_DIRECTSOUNDDEVICE_WAVEDEVICEMAPPING_W_DATA = 24;

export function allocDSPROPERTY_DIRECTSOUNDDEVICE_WAVEDEVICEMAPPING_W_DATA(data?: Partial<DSPROPERTY_DIRECTSOUNDDEVICE_WAVEDEVICEMAPPING_W_DATA>): Uint8Array {
  const buf = new Uint8Array(sizeofDSPROPERTY_DIRECTSOUNDDEVICE_WAVEDEVICEMAPPING_W_DATA);
  const view = new DataView(buf.buffer);
  // 0x00: buffer
  if (data?.DeviceName !== undefined) {
    (buf as any)._f0 = util.pwstrToFfi(data.DeviceName);
    view.setBigUint64(0, (buf as any)._f0 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f0)), true);
  }
  // 0x08: i32
  if (data?.DataFlow !== undefined) view.setInt32(8, Number(data.DataFlow), true);
  // 0x0c: pad4
  // 0x10: pointer
  if (data?.DeviceId !== undefined) view.setBigUint64(16, data.DeviceId === null ? 0n : BigInt(util.toPointer(data.DeviceId)), true);
  return buf;
}

/**
 * Windows.Win32.Media.Audio.DirectMusic.DSPROPERTY_DIRECTSOUNDDEVICE_DESCRIPTION_1_DATA (size: 56)
 */
export interface DSPROPERTY_DIRECTSOUNDDEVICE_DESCRIPTION_1_DATA {
  /** System.Guid */
  DeviceId: Uint8Array | Deno.PointerValue | null;
  /** array */
  DescriptionA: Deno.PointerValue | null;
  /** array */
  DescriptionW: Deno.PointerValue | null;
  /** array */
  ModuleA: Deno.PointerValue | null;
  /** array */
  ModuleW: Deno.PointerValue | null;
  /** Windows.Win32.Media.Audio.DirectMusic.DIRECTSOUNDDEVICE_TYPE */
  Type: DIRECTSOUNDDEVICE_TYPE;
  /** Windows.Win32.Media.Audio.DirectMusic.DIRECTSOUNDDEVICE_DATAFLOW */
  DataFlow: DIRECTSOUNDDEVICE_DATAFLOW;
  /** u32 */
  WaveDeviceId: number;
  /** u32 */
  Devnode: number;
}

export const sizeofDSPROPERTY_DIRECTSOUNDDEVICE_DESCRIPTION_1_DATA = 56;

export function allocDSPROPERTY_DIRECTSOUNDDEVICE_DESCRIPTION_1_DATA(data?: Partial<DSPROPERTY_DIRECTSOUNDDEVICE_DESCRIPTION_1_DATA>): Uint8Array {
  const buf = new Uint8Array(sizeofDSPROPERTY_DIRECTSOUNDDEVICE_DESCRIPTION_1_DATA);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.DeviceId !== undefined) view.setBigUint64(0, data.DeviceId === null ? 0n : BigInt(util.toPointer(data.DeviceId)), true);
  // 0x08: pointer
  if (data?.DescriptionA !== undefined) view.setBigUint64(8, data.DescriptionA === null ? 0n : BigInt(util.toPointer(data.DescriptionA)), true);
  // 0x10: pointer
  if (data?.DescriptionW !== undefined) view.setBigUint64(16, data.DescriptionW === null ? 0n : BigInt(util.toPointer(data.DescriptionW)), true);
  // 0x18: pointer
  if (data?.ModuleA !== undefined) view.setBigUint64(24, data.ModuleA === null ? 0n : BigInt(util.toPointer(data.ModuleA)), true);
  // 0x20: pointer
  if (data?.ModuleW !== undefined) view.setBigUint64(32, data.ModuleW === null ? 0n : BigInt(util.toPointer(data.ModuleW)), true);
  // 0x28: i32
  if (data?.Type !== undefined) view.setInt32(40, Number(data.Type), true);
  // 0x2c: i32
  if (data?.DataFlow !== undefined) view.setInt32(44, Number(data.DataFlow), true);
  // 0x30: u32
  if (data?.WaveDeviceId !== undefined) view.setUint32(48, Number(data.WaveDeviceId), true);
  // 0x34: u32
  if (data?.Devnode !== undefined) view.setUint32(52, Number(data.Devnode), true);
  return buf;
}

/**
 * Windows.Win32.Media.Audio.DirectMusic.DSPROPERTY_DIRECTSOUNDDEVICE_DESCRIPTION_A_DATA (size: 48)
 */
export interface DSPROPERTY_DIRECTSOUNDDEVICE_DESCRIPTION_A_DATA {
  /** Windows.Win32.Media.Audio.DirectMusic.DIRECTSOUNDDEVICE_TYPE */
  Type: DIRECTSOUNDDEVICE_TYPE;
  /** Windows.Win32.Media.Audio.DirectMusic.DIRECTSOUNDDEVICE_DATAFLOW */
  DataFlow: DIRECTSOUNDDEVICE_DATAFLOW;
  /** System.Guid */
  DeviceId: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Foundation.PSTR */
  Description: string | null | Uint8Array;
  /** Windows.Win32.Foundation.PSTR */
  Module: string | null | Uint8Array;
  /** Windows.Win32.Foundation.PSTR */
  Interface: string | null | Uint8Array;
  /** u32 */
  WaveDeviceId: number;
}

export const sizeofDSPROPERTY_DIRECTSOUNDDEVICE_DESCRIPTION_A_DATA = 48;

export function allocDSPROPERTY_DIRECTSOUNDDEVICE_DESCRIPTION_A_DATA(data?: Partial<DSPROPERTY_DIRECTSOUNDDEVICE_DESCRIPTION_A_DATA>): Uint8Array {
  const buf = new Uint8Array(sizeofDSPROPERTY_DIRECTSOUNDDEVICE_DESCRIPTION_A_DATA);
  const view = new DataView(buf.buffer);
  // 0x00: i32
  if (data?.Type !== undefined) view.setInt32(0, Number(data.Type), true);
  // 0x04: i32
  if (data?.DataFlow !== undefined) view.setInt32(4, Number(data.DataFlow), true);
  // 0x08: pointer
  if (data?.DeviceId !== undefined) view.setBigUint64(8, data.DeviceId === null ? 0n : BigInt(util.toPointer(data.DeviceId)), true);
  // 0x10: buffer
  if (data?.Description !== undefined) {
    (buf as any)._f16 = util.pstrToFfi(data.Description);
    view.setBigUint64(16, (buf as any)._f16 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f16)), true);
  }
  // 0x18: buffer
  if (data?.Module !== undefined) {
    (buf as any)._f24 = util.pstrToFfi(data.Module);
    view.setBigUint64(24, (buf as any)._f24 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f24)), true);
  }
  // 0x20: buffer
  if (data?.Interface !== undefined) {
    (buf as any)._f32 = util.pstrToFfi(data.Interface);
    view.setBigUint64(32, (buf as any)._f32 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f32)), true);
  }
  // 0x28: u32
  if (data?.WaveDeviceId !== undefined) view.setUint32(40, Number(data.WaveDeviceId), true);
  // 0x2c: pad4
  return buf;
}

/**
 * Windows.Win32.Media.Audio.DirectMusic.DSPROPERTY_DIRECTSOUNDDEVICE_DESCRIPTION_W_DATA (size: 48)
 */
export interface DSPROPERTY_DIRECTSOUNDDEVICE_DESCRIPTION_W_DATA {
  /** Windows.Win32.Media.Audio.DirectMusic.DIRECTSOUNDDEVICE_TYPE */
  Type: DIRECTSOUNDDEVICE_TYPE;
  /** Windows.Win32.Media.Audio.DirectMusic.DIRECTSOUNDDEVICE_DATAFLOW */
  DataFlow: DIRECTSOUNDDEVICE_DATAFLOW;
  /** System.Guid */
  DeviceId: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Foundation.PWSTR */
  Description: string | null | Uint8Array | Uint16Array;
  /** Windows.Win32.Foundation.PWSTR */
  Module: string | null | Uint8Array | Uint16Array;
  /** Windows.Win32.Foundation.PWSTR */
  Interface: string | null | Uint8Array | Uint16Array;
  /** u32 */
  WaveDeviceId: number;
}

export const sizeofDSPROPERTY_DIRECTSOUNDDEVICE_DESCRIPTION_W_DATA = 48;

export function allocDSPROPERTY_DIRECTSOUNDDEVICE_DESCRIPTION_W_DATA(data?: Partial<DSPROPERTY_DIRECTSOUNDDEVICE_DESCRIPTION_W_DATA>): Uint8Array {
  const buf = new Uint8Array(sizeofDSPROPERTY_DIRECTSOUNDDEVICE_DESCRIPTION_W_DATA);
  const view = new DataView(buf.buffer);
  // 0x00: i32
  if (data?.Type !== undefined) view.setInt32(0, Number(data.Type), true);
  // 0x04: i32
  if (data?.DataFlow !== undefined) view.setInt32(4, Number(data.DataFlow), true);
  // 0x08: pointer
  if (data?.DeviceId !== undefined) view.setBigUint64(8, data.DeviceId === null ? 0n : BigInt(util.toPointer(data.DeviceId)), true);
  // 0x10: buffer
  if (data?.Description !== undefined) {
    (buf as any)._f16 = util.pwstrToFfi(data.Description);
    view.setBigUint64(16, (buf as any)._f16 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f16)), true);
  }
  // 0x18: buffer
  if (data?.Module !== undefined) {
    (buf as any)._f24 = util.pwstrToFfi(data.Module);
    view.setBigUint64(24, (buf as any)._f24 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f24)), true);
  }
  // 0x20: buffer
  if (data?.Interface !== undefined) {
    (buf as any)._f32 = util.pwstrToFfi(data.Interface);
    view.setBigUint64(32, (buf as any)._f32 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f32)), true);
  }
  // 0x28: u32
  if (data?.WaveDeviceId !== undefined) view.setUint32(40, Number(data.WaveDeviceId), true);
  // 0x2c: pad4
  return buf;
}

/**
 * Windows.Win32.Media.Audio.DirectMusic.DSPROPERTY_DIRECTSOUNDDEVICE_ENUMERATE_1_DATA (size: 16)
 */
export interface DSPROPERTY_DIRECTSOUNDDEVICE_ENUMERATE_1_DATA {
  /** Windows.Win32.Media.Audio.DirectMusic.LPFNDIRECTSOUNDDEVICEENUMERATECALLBACK1 */
  Callback: Uint8Array | Deno.PointerValue | null;
  /** ptr */
  Context: Deno.PointerValue | Uint8Array | null;
}

export const sizeofDSPROPERTY_DIRECTSOUNDDEVICE_ENUMERATE_1_DATA = 16;

export function allocDSPROPERTY_DIRECTSOUNDDEVICE_ENUMERATE_1_DATA(data?: Partial<DSPROPERTY_DIRECTSOUNDDEVICE_ENUMERATE_1_DATA>): Uint8Array {
  const buf = new Uint8Array(sizeofDSPROPERTY_DIRECTSOUNDDEVICE_ENUMERATE_1_DATA);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.Callback !== undefined) view.setBigUint64(0, data.Callback === null ? 0n : BigInt(util.toPointer(data.Callback)), true);
  // 0x08: pointer
  if (data?.Context !== undefined) view.setBigUint64(8, data.Context === null ? 0n : BigInt(util.toPointer(data.Context)), true);
  return buf;
}

/**
 * Windows.Win32.Media.Audio.DirectMusic.DSPROPERTY_DIRECTSOUNDDEVICE_ENUMERATE_A_DATA (size: 16)
 */
export interface DSPROPERTY_DIRECTSOUNDDEVICE_ENUMERATE_A_DATA {
  /** Windows.Win32.Media.Audio.DirectMusic.LPFNDIRECTSOUNDDEVICEENUMERATECALLBACKA */
  Callback: Uint8Array | Deno.PointerValue | null;
  /** ptr */
  Context: Deno.PointerValue | Uint8Array | null;
}

export const sizeofDSPROPERTY_DIRECTSOUNDDEVICE_ENUMERATE_A_DATA = 16;

export function allocDSPROPERTY_DIRECTSOUNDDEVICE_ENUMERATE_A_DATA(data?: Partial<DSPROPERTY_DIRECTSOUNDDEVICE_ENUMERATE_A_DATA>): Uint8Array {
  const buf = new Uint8Array(sizeofDSPROPERTY_DIRECTSOUNDDEVICE_ENUMERATE_A_DATA);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.Callback !== undefined) view.setBigUint64(0, data.Callback === null ? 0n : BigInt(util.toPointer(data.Callback)), true);
  // 0x08: pointer
  if (data?.Context !== undefined) view.setBigUint64(8, data.Context === null ? 0n : BigInt(util.toPointer(data.Context)), true);
  return buf;
}

/**
 * Windows.Win32.Media.Audio.DirectMusic.DSPROPERTY_DIRECTSOUNDDEVICE_ENUMERATE_W_DATA (size: 16)
 */
export interface DSPROPERTY_DIRECTSOUNDDEVICE_ENUMERATE_W_DATA {
  /** Windows.Win32.Media.Audio.DirectMusic.LPFNDIRECTSOUNDDEVICEENUMERATECALLBACKW */
  Callback: Uint8Array | Deno.PointerValue | null;
  /** ptr */
  Context: Deno.PointerValue | Uint8Array | null;
}

export const sizeofDSPROPERTY_DIRECTSOUNDDEVICE_ENUMERATE_W_DATA = 16;

export function allocDSPROPERTY_DIRECTSOUNDDEVICE_ENUMERATE_W_DATA(data?: Partial<DSPROPERTY_DIRECTSOUNDDEVICE_ENUMERATE_W_DATA>): Uint8Array {
  const buf = new Uint8Array(sizeofDSPROPERTY_DIRECTSOUNDDEVICE_ENUMERATE_W_DATA);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.Callback !== undefined) view.setBigUint64(0, data.Callback === null ? 0n : BigInt(util.toPointer(data.Callback)), true);
  // 0x08: pointer
  if (data?.Context !== undefined) view.setBigUint64(8, data.Context === null ? 0n : BigInt(util.toPointer(data.Context)), true);
  return buf;
}

/**
 * Windows.Win32.Media.Audio.DirectMusic.DVAudInfo (size: 40)
 */
export interface DVAudInfo {
  /** array */
  bAudStyle: Deno.PointerValue | null;
  /** array */
  bAudQu: Deno.PointerValue | null;
  /** u8 */
  bNumAudPin: number;
  /** array */
  wAvgSamplesPerPinPerFrm: Deno.PointerValue | null;
  /** u16 */
  wBlkMode: number;
  /** u16 */
  wDIFMode: number;
  /** u16 */
  wBlkDiv: number;
}

export const sizeofDVAudInfo = 40;

export function allocDVAudInfo(data?: Partial<DVAudInfo>): Uint8Array {
  const buf = new Uint8Array(sizeofDVAudInfo);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.bAudStyle !== undefined) view.setBigUint64(0, data.bAudStyle === null ? 0n : BigInt(util.toPointer(data.bAudStyle)), true);
  // 0x08: pointer
  if (data?.bAudQu !== undefined) view.setBigUint64(8, data.bAudQu === null ? 0n : BigInt(util.toPointer(data.bAudQu)), true);
  // 0x10: u8
  if (data?.bNumAudPin !== undefined) view.setUint8(16, Number(data.bNumAudPin));
  // 0x11: pad7
  // 0x18: pointer
  if (data?.wAvgSamplesPerPinPerFrm !== undefined) view.setBigUint64(24, data.wAvgSamplesPerPinPerFrm === null ? 0n : BigInt(util.toPointer(data.wAvgSamplesPerPinPerFrm)), true);
  // 0x20: u16
  if (data?.wBlkMode !== undefined) view.setUint16(32, Number(data.wBlkMode), true);
  // 0x22: u16
  if (data?.wDIFMode !== undefined) view.setUint16(34, Number(data.wDIFMode), true);
  // 0x24: u16
  if (data?.wBlkDiv !== undefined) view.setUint16(36, Number(data.wBlkDiv), true);
  // 0x26: pad2
  return buf;
}

/**
 * Windows.Win32.Media.Audio.DirectSound.DSCAPS (size: 96)
 */
export interface DSCAPS {
  /** u32 */
  dwSize: number;
  /** u32 */
  dwFlags: number;
  /** u32 */
  dwMinSecondarySampleRate: number;
  /** u32 */
  dwMaxSecondarySampleRate: number;
  /** u32 */
  dwPrimaryBuffers: number;
  /** u32 */
  dwMaxHwMixingAllBuffers: number;
  /** u32 */
  dwMaxHwMixingStaticBuffers: number;
  /** u32 */
  dwMaxHwMixingStreamingBuffers: number;
  /** u32 */
  dwFreeHwMixingAllBuffers: number;
  /** u32 */
  dwFreeHwMixingStaticBuffers: number;
  /** u32 */
  dwFreeHwMixingStreamingBuffers: number;
  /** u32 */
  dwMaxHw3DAllBuffers: number;
  /** u32 */
  dwMaxHw3DStaticBuffers: number;
  /** u32 */
  dwMaxHw3DStreamingBuffers: number;
  /** u32 */
  dwFreeHw3DAllBuffers: number;
  /** u32 */
  dwFreeHw3DStaticBuffers: number;
  /** u32 */
  dwFreeHw3DStreamingBuffers: number;
  /** u32 */
  dwTotalHwMemBytes: number;
  /** u32 */
  dwFreeHwMemBytes: number;
  /** u32 */
  dwMaxContigFreeHwMemBytes: number;
  /** u32 */
  dwUnlockTransferRateHwBuffers: number;
  /** u32 */
  dwPlayCpuOverheadSwBuffers: number;
  /** u32 */
  dwReserved1: number;
  /** u32 */
  dwReserved2: number;
}

export const sizeofDSCAPS = 96;

export function allocDSCAPS(data?: Partial<DSCAPS>): Uint8Array {
  const buf = new Uint8Array(sizeofDSCAPS);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.dwSize !== undefined) view.setUint32(0, Number(data.dwSize), true);
  // 0x04: u32
  if (data?.dwFlags !== undefined) view.setUint32(4, Number(data.dwFlags), true);
  // 0x08: u32
  if (data?.dwMinSecondarySampleRate !== undefined) view.setUint32(8, Number(data.dwMinSecondarySampleRate), true);
  // 0x0c: u32
  if (data?.dwMaxSecondarySampleRate !== undefined) view.setUint32(12, Number(data.dwMaxSecondarySampleRate), true);
  // 0x10: u32
  if (data?.dwPrimaryBuffers !== undefined) view.setUint32(16, Number(data.dwPrimaryBuffers), true);
  // 0x14: u32
  if (data?.dwMaxHwMixingAllBuffers !== undefined) view.setUint32(20, Number(data.dwMaxHwMixingAllBuffers), true);
  // 0x18: u32
  if (data?.dwMaxHwMixingStaticBuffers !== undefined) view.setUint32(24, Number(data.dwMaxHwMixingStaticBuffers), true);
  // 0x1c: u32
  if (data?.dwMaxHwMixingStreamingBuffers !== undefined) view.setUint32(28, Number(data.dwMaxHwMixingStreamingBuffers), true);
  // 0x20: u32
  if (data?.dwFreeHwMixingAllBuffers !== undefined) view.setUint32(32, Number(data.dwFreeHwMixingAllBuffers), true);
  // 0x24: u32
  if (data?.dwFreeHwMixingStaticBuffers !== undefined) view.setUint32(36, Number(data.dwFreeHwMixingStaticBuffers), true);
  // 0x28: u32
  if (data?.dwFreeHwMixingStreamingBuffers !== undefined) view.setUint32(40, Number(data.dwFreeHwMixingStreamingBuffers), true);
  // 0x2c: u32
  if (data?.dwMaxHw3DAllBuffers !== undefined) view.setUint32(44, Number(data.dwMaxHw3DAllBuffers), true);
  // 0x30: u32
  if (data?.dwMaxHw3DStaticBuffers !== undefined) view.setUint32(48, Number(data.dwMaxHw3DStaticBuffers), true);
  // 0x34: u32
  if (data?.dwMaxHw3DStreamingBuffers !== undefined) view.setUint32(52, Number(data.dwMaxHw3DStreamingBuffers), true);
  // 0x38: u32
  if (data?.dwFreeHw3DAllBuffers !== undefined) view.setUint32(56, Number(data.dwFreeHw3DAllBuffers), true);
  // 0x3c: u32
  if (data?.dwFreeHw3DStaticBuffers !== undefined) view.setUint32(60, Number(data.dwFreeHw3DStaticBuffers), true);
  // 0x40: u32
  if (data?.dwFreeHw3DStreamingBuffers !== undefined) view.setUint32(64, Number(data.dwFreeHw3DStreamingBuffers), true);
  // 0x44: u32
  if (data?.dwTotalHwMemBytes !== undefined) view.setUint32(68, Number(data.dwTotalHwMemBytes), true);
  // 0x48: u32
  if (data?.dwFreeHwMemBytes !== undefined) view.setUint32(72, Number(data.dwFreeHwMemBytes), true);
  // 0x4c: u32
  if (data?.dwMaxContigFreeHwMemBytes !== undefined) view.setUint32(76, Number(data.dwMaxContigFreeHwMemBytes), true);
  // 0x50: u32
  if (data?.dwUnlockTransferRateHwBuffers !== undefined) view.setUint32(80, Number(data.dwUnlockTransferRateHwBuffers), true);
  // 0x54: u32
  if (data?.dwPlayCpuOverheadSwBuffers !== undefined) view.setUint32(84, Number(data.dwPlayCpuOverheadSwBuffers), true);
  // 0x58: u32
  if (data?.dwReserved1 !== undefined) view.setUint32(88, Number(data.dwReserved1), true);
  // 0x5c: u32
  if (data?.dwReserved2 !== undefined) view.setUint32(92, Number(data.dwReserved2), true);
  return buf;
}

/**
 * Windows.Win32.Media.Audio.DirectSound.DSBCAPS (size: 24)
 */
export interface DSBCAPS {
  /** u32 */
  dwSize: number;
  /** u32 */
  dwFlags: number;
  /** u32 */
  dwBufferBytes: number;
  /** u32 */
  dwUnlockTransferRate: number;
  /** u32 */
  dwPlayCpuOverhead: number;
}

export const sizeofDSBCAPS = 24;

export function allocDSBCAPS(data?: Partial<DSBCAPS>): Uint8Array {
  const buf = new Uint8Array(sizeofDSBCAPS);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.dwSize !== undefined) view.setUint32(0, Number(data.dwSize), true);
  // 0x04: u32
  if (data?.dwFlags !== undefined) view.setUint32(4, Number(data.dwFlags), true);
  // 0x08: u32
  if (data?.dwBufferBytes !== undefined) view.setUint32(8, Number(data.dwBufferBytes), true);
  // 0x0c: u32
  if (data?.dwUnlockTransferRate !== undefined) view.setUint32(12, Number(data.dwUnlockTransferRate), true);
  // 0x10: u32
  if (data?.dwPlayCpuOverhead !== undefined) view.setUint32(16, Number(data.dwPlayCpuOverhead), true);
  // 0x14: pad4
  return buf;
}

/**
 * Windows.Win32.Media.Audio.DirectSound.DSEFFECTDESC (size: 32)
 */
export interface DSEFFECTDESC {
  /** u32 */
  dwSize: number;
  /** u32 */
  dwFlags: number;
  /** System.Guid */
  guidDSFXClass: Uint8Array | Deno.PointerValue | null;
  /** usize */
  dwReserved1: Deno.PointerValue;
  /** usize */
  dwReserved2: Deno.PointerValue;
}

export const sizeofDSEFFECTDESC = 32;

export function allocDSEFFECTDESC(data?: Partial<DSEFFECTDESC>): Uint8Array {
  const buf = new Uint8Array(sizeofDSEFFECTDESC);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.dwSize !== undefined) view.setUint32(0, Number(data.dwSize), true);
  // 0x04: u32
  if (data?.dwFlags !== undefined) view.setUint32(4, Number(data.dwFlags), true);
  // 0x08: pointer
  if (data?.guidDSFXClass !== undefined) view.setBigUint64(8, data.guidDSFXClass === null ? 0n : BigInt(util.toPointer(data.guidDSFXClass)), true);
  // 0x10: usize
  if (data?.dwReserved1 !== undefined) view.setBigUint64(16, BigInt(data.dwReserved1), true);
  // 0x18: usize
  if (data?.dwReserved2 !== undefined) view.setBigUint64(24, BigInt(data.dwReserved2), true);
  return buf;
}

/**
 * Windows.Win32.Media.Audio.DirectSound.DSCEFFECTDESC (size: 32)
 */
export interface DSCEFFECTDESC {
  /** u32 */
  dwSize: number;
  /** u32 */
  dwFlags: number;
  /** System.Guid */
  guidDSCFXClass: Uint8Array | Deno.PointerValue | null;
  /** System.Guid */
  guidDSCFXInstance: Uint8Array | Deno.PointerValue | null;
  /** u32 */
  dwReserved1: number;
  /** u32 */
  dwReserved2: number;
}

export const sizeofDSCEFFECTDESC = 32;

export function allocDSCEFFECTDESC(data?: Partial<DSCEFFECTDESC>): Uint8Array {
  const buf = new Uint8Array(sizeofDSCEFFECTDESC);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.dwSize !== undefined) view.setUint32(0, Number(data.dwSize), true);
  // 0x04: u32
  if (data?.dwFlags !== undefined) view.setUint32(4, Number(data.dwFlags), true);
  // 0x08: pointer
  if (data?.guidDSCFXClass !== undefined) view.setBigUint64(8, data.guidDSCFXClass === null ? 0n : BigInt(util.toPointer(data.guidDSCFXClass)), true);
  // 0x10: pointer
  if (data?.guidDSCFXInstance !== undefined) view.setBigUint64(16, data.guidDSCFXInstance === null ? 0n : BigInt(util.toPointer(data.guidDSCFXInstance)), true);
  // 0x18: u32
  if (data?.dwReserved1 !== undefined) view.setUint32(24, Number(data.dwReserved1), true);
  // 0x1c: u32
  if (data?.dwReserved2 !== undefined) view.setUint32(28, Number(data.dwReserved2), true);
  return buf;
}

/**
 * Windows.Win32.Media.Audio.DirectSound.DSBUFFERDESC (size: 32)
 */
export interface DSBUFFERDESC {
  /** u32 */
  dwSize: number;
  /** u32 */
  dwFlags: number;
  /** u32 */
  dwBufferBytes: number;
  /** u32 */
  dwReserved: number;
  /** ptr */
  lpwfxFormat: Deno.PointerValue | Uint8Array | null;
  /** System.Guid */
  guid3DAlgorithm: Uint8Array | Deno.PointerValue | null;
}

export const sizeofDSBUFFERDESC = 32;

export function allocDSBUFFERDESC(data?: Partial<DSBUFFERDESC>): Uint8Array {
  const buf = new Uint8Array(sizeofDSBUFFERDESC);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.dwSize !== undefined) view.setUint32(0, Number(data.dwSize), true);
  // 0x04: u32
  if (data?.dwFlags !== undefined) view.setUint32(4, Number(data.dwFlags), true);
  // 0x08: u32
  if (data?.dwBufferBytes !== undefined) view.setUint32(8, Number(data.dwBufferBytes), true);
  // 0x0c: u32
  if (data?.dwReserved !== undefined) view.setUint32(12, Number(data.dwReserved), true);
  // 0x10: pointer
  if (data?.lpwfxFormat !== undefined) view.setBigUint64(16, data.lpwfxFormat === null ? 0n : BigInt(util.toPointer(data.lpwfxFormat)), true);
  // 0x18: pointer
  if (data?.guid3DAlgorithm !== undefined) view.setBigUint64(24, data.guid3DAlgorithm === null ? 0n : BigInt(util.toPointer(data.guid3DAlgorithm)), true);
  return buf;
}

/**
 * Windows.Win32.Media.Audio.DirectSound.DSBUFFERDESC1 (size: 24)
 */
export interface DSBUFFERDESC1 {
  /** u32 */
  dwSize: number;
  /** u32 */
  dwFlags: number;
  /** u32 */
  dwBufferBytes: number;
  /** u32 */
  dwReserved: number;
  /** ptr */
  lpwfxFormat: Deno.PointerValue | Uint8Array | null;
}

export const sizeofDSBUFFERDESC1 = 24;

export function allocDSBUFFERDESC1(data?: Partial<DSBUFFERDESC1>): Uint8Array {
  const buf = new Uint8Array(sizeofDSBUFFERDESC1);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.dwSize !== undefined) view.setUint32(0, Number(data.dwSize), true);
  // 0x04: u32
  if (data?.dwFlags !== undefined) view.setUint32(4, Number(data.dwFlags), true);
  // 0x08: u32
  if (data?.dwBufferBytes !== undefined) view.setUint32(8, Number(data.dwBufferBytes), true);
  // 0x0c: u32
  if (data?.dwReserved !== undefined) view.setUint32(12, Number(data.dwReserved), true);
  // 0x10: pointer
  if (data?.lpwfxFormat !== undefined) view.setBigUint64(16, data.lpwfxFormat === null ? 0n : BigInt(util.toPointer(data.lpwfxFormat)), true);
  return buf;
}

/**
 * Windows.Win32.Graphics.Direct3D.D3DVECTOR (size: 16)
 */
export interface D3DVECTOR {
  /** f32 */
  x: number;
  /** f32 */
  y: number;
  /** f32 */
  z: number;
}

export const sizeofD3DVECTOR = 16;

export function allocD3DVECTOR(data?: Partial<D3DVECTOR>): Uint8Array {
  const buf = new Uint8Array(sizeofD3DVECTOR);
  const view = new DataView(buf.buffer);
  // 0x00: f32
  if (data?.x !== undefined) view.setFloat32(0, Number(data.x), true);
  // 0x04: f32
  if (data?.y !== undefined) view.setFloat32(4, Number(data.y), true);
  // 0x08: f32
  if (data?.z !== undefined) view.setFloat32(8, Number(data.z), true);
  // 0x0c: pad4
  return buf;
}

/**
 * Windows.Win32.Media.Audio.DirectSound.DS3DBUFFER (size: 56)
 */
export interface DS3DBUFFER {
  /** u32 */
  dwSize: number;
  /** Windows.Win32.Graphics.Direct3D.D3DVECTOR */
  vPosition: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Graphics.Direct3D.D3DVECTOR */
  vVelocity: Uint8Array | Deno.PointerValue | null;
  /** u32 */
  dwInsideConeAngle: number;
  /** u32 */
  dwOutsideConeAngle: number;
  /** Windows.Win32.Graphics.Direct3D.D3DVECTOR */
  vConeOrientation: Uint8Array | Deno.PointerValue | null;
  /** i32 */
  lConeOutsideVolume: number;
  /** f32 */
  flMinDistance: number;
  /** f32 */
  flMaxDistance: number;
  /** u32 */
  dwMode: number;
}

export const sizeofDS3DBUFFER = 56;

export function allocDS3DBUFFER(data?: Partial<DS3DBUFFER>): Uint8Array {
  const buf = new Uint8Array(sizeofDS3DBUFFER);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.dwSize !== undefined) view.setUint32(0, Number(data.dwSize), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.vPosition !== undefined) view.setBigUint64(8, data.vPosition === null ? 0n : BigInt(util.toPointer(data.vPosition)), true);
  // 0x10: pointer
  if (data?.vVelocity !== undefined) view.setBigUint64(16, data.vVelocity === null ? 0n : BigInt(util.toPointer(data.vVelocity)), true);
  // 0x18: u32
  if (data?.dwInsideConeAngle !== undefined) view.setUint32(24, Number(data.dwInsideConeAngle), true);
  // 0x1c: u32
  if (data?.dwOutsideConeAngle !== undefined) view.setUint32(28, Number(data.dwOutsideConeAngle), true);
  // 0x20: pointer
  if (data?.vConeOrientation !== undefined) view.setBigUint64(32, data.vConeOrientation === null ? 0n : BigInt(util.toPointer(data.vConeOrientation)), true);
  // 0x28: i32
  if (data?.lConeOutsideVolume !== undefined) view.setInt32(40, Number(data.lConeOutsideVolume), true);
  // 0x2c: f32
  if (data?.flMinDistance !== undefined) view.setFloat32(44, Number(data.flMinDistance), true);
  // 0x30: f32
  if (data?.flMaxDistance !== undefined) view.setFloat32(48, Number(data.flMaxDistance), true);
  // 0x34: u32
  if (data?.dwMode !== undefined) view.setUint32(52, Number(data.dwMode), true);
  return buf;
}

/**
 * Windows.Win32.Media.Audio.DirectSound.DS3DLISTENER (size: 56)
 */
export interface DS3DLISTENER {
  /** u32 */
  dwSize: number;
  /** Windows.Win32.Graphics.Direct3D.D3DVECTOR */
  vPosition: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Graphics.Direct3D.D3DVECTOR */
  vVelocity: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Graphics.Direct3D.D3DVECTOR */
  vOrientFront: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Graphics.Direct3D.D3DVECTOR */
  vOrientTop: Uint8Array | Deno.PointerValue | null;
  /** f32 */
  flDistanceFactor: number;
  /** f32 */
  flRolloffFactor: number;
  /** f32 */
  flDopplerFactor: number;
}

export const sizeofDS3DLISTENER = 56;

export function allocDS3DLISTENER(data?: Partial<DS3DLISTENER>): Uint8Array {
  const buf = new Uint8Array(sizeofDS3DLISTENER);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.dwSize !== undefined) view.setUint32(0, Number(data.dwSize), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.vPosition !== undefined) view.setBigUint64(8, data.vPosition === null ? 0n : BigInt(util.toPointer(data.vPosition)), true);
  // 0x10: pointer
  if (data?.vVelocity !== undefined) view.setBigUint64(16, data.vVelocity === null ? 0n : BigInt(util.toPointer(data.vVelocity)), true);
  // 0x18: pointer
  if (data?.vOrientFront !== undefined) view.setBigUint64(24, data.vOrientFront === null ? 0n : BigInt(util.toPointer(data.vOrientFront)), true);
  // 0x20: pointer
  if (data?.vOrientTop !== undefined) view.setBigUint64(32, data.vOrientTop === null ? 0n : BigInt(util.toPointer(data.vOrientTop)), true);
  // 0x28: f32
  if (data?.flDistanceFactor !== undefined) view.setFloat32(40, Number(data.flDistanceFactor), true);
  // 0x2c: f32
  if (data?.flRolloffFactor !== undefined) view.setFloat32(44, Number(data.flRolloffFactor), true);
  // 0x30: f32
  if (data?.flDopplerFactor !== undefined) view.setFloat32(48, Number(data.flDopplerFactor), true);
  // 0x34: pad4
  return buf;
}

/**
 * Windows.Win32.Media.Audio.DirectSound.DSCCAPS (size: 16)
 */
export interface DSCCAPS {
  /** u32 */
  dwSize: number;
  /** u32 */
  dwFlags: number;
  /** u32 */
  dwFormats: number;
  /** u32 */
  dwChannels: number;
}

export const sizeofDSCCAPS = 16;

export function allocDSCCAPS(data?: Partial<DSCCAPS>): Uint8Array {
  const buf = new Uint8Array(sizeofDSCCAPS);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.dwSize !== undefined) view.setUint32(0, Number(data.dwSize), true);
  // 0x04: u32
  if (data?.dwFlags !== undefined) view.setUint32(4, Number(data.dwFlags), true);
  // 0x08: u32
  if (data?.dwFormats !== undefined) view.setUint32(8, Number(data.dwFormats), true);
  // 0x0c: u32
  if (data?.dwChannels !== undefined) view.setUint32(12, Number(data.dwChannels), true);
  return buf;
}

/**
 * Windows.Win32.Media.Audio.DirectSound.DSCBUFFERDESC1 (size: 24)
 */
export interface DSCBUFFERDESC1 {
  /** u32 */
  dwSize: number;
  /** u32 */
  dwFlags: number;
  /** u32 */
  dwBufferBytes: number;
  /** u32 */
  dwReserved: number;
  /** ptr */
  lpwfxFormat: Deno.PointerValue | Uint8Array | null;
}

export const sizeofDSCBUFFERDESC1 = 24;

export function allocDSCBUFFERDESC1(data?: Partial<DSCBUFFERDESC1>): Uint8Array {
  const buf = new Uint8Array(sizeofDSCBUFFERDESC1);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.dwSize !== undefined) view.setUint32(0, Number(data.dwSize), true);
  // 0x04: u32
  if (data?.dwFlags !== undefined) view.setUint32(4, Number(data.dwFlags), true);
  // 0x08: u32
  if (data?.dwBufferBytes !== undefined) view.setUint32(8, Number(data.dwBufferBytes), true);
  // 0x0c: u32
  if (data?.dwReserved !== undefined) view.setUint32(12, Number(data.dwReserved), true);
  // 0x10: pointer
  if (data?.lpwfxFormat !== undefined) view.setBigUint64(16, data.lpwfxFormat === null ? 0n : BigInt(util.toPointer(data.lpwfxFormat)), true);
  return buf;
}

/**
 * Windows.Win32.Media.Audio.DirectSound.DSCBUFFERDESC (size: 40)
 */
export interface DSCBUFFERDESC {
  /** u32 */
  dwSize: number;
  /** u32 */
  dwFlags: number;
  /** u32 */
  dwBufferBytes: number;
  /** u32 */
  dwReserved: number;
  /** ptr */
  lpwfxFormat: Deno.PointerValue | Uint8Array | null;
  /** u32 */
  dwFXCount: number;
  /** ptr */
  lpDSCFXDesc: Deno.PointerValue | Uint8Array | null;
}

export const sizeofDSCBUFFERDESC = 40;

export function allocDSCBUFFERDESC(data?: Partial<DSCBUFFERDESC>): Uint8Array {
  const buf = new Uint8Array(sizeofDSCBUFFERDESC);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.dwSize !== undefined) view.setUint32(0, Number(data.dwSize), true);
  // 0x04: u32
  if (data?.dwFlags !== undefined) view.setUint32(4, Number(data.dwFlags), true);
  // 0x08: u32
  if (data?.dwBufferBytes !== undefined) view.setUint32(8, Number(data.dwBufferBytes), true);
  // 0x0c: u32
  if (data?.dwReserved !== undefined) view.setUint32(12, Number(data.dwReserved), true);
  // 0x10: pointer
  if (data?.lpwfxFormat !== undefined) view.setBigUint64(16, data.lpwfxFormat === null ? 0n : BigInt(util.toPointer(data.lpwfxFormat)), true);
  // 0x18: u32
  if (data?.dwFXCount !== undefined) view.setUint32(24, Number(data.dwFXCount), true);
  // 0x1c: pad4
  // 0x20: pointer
  if (data?.lpDSCFXDesc !== undefined) view.setBigUint64(32, data.lpDSCFXDesc === null ? 0n : BigInt(util.toPointer(data.lpDSCFXDesc)), true);
  return buf;
}

/**
 * Windows.Win32.Media.Audio.DirectSound.DSCBCAPS (size: 16)
 */
export interface DSCBCAPS {
  /** u32 */
  dwSize: number;
  /** u32 */
  dwFlags: number;
  /** u32 */
  dwBufferBytes: number;
  /** u32 */
  dwReserved: number;
}

export const sizeofDSCBCAPS = 16;

export function allocDSCBCAPS(data?: Partial<DSCBCAPS>): Uint8Array {
  const buf = new Uint8Array(sizeofDSCBCAPS);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.dwSize !== undefined) view.setUint32(0, Number(data.dwSize), true);
  // 0x04: u32
  if (data?.dwFlags !== undefined) view.setUint32(4, Number(data.dwFlags), true);
  // 0x08: u32
  if (data?.dwBufferBytes !== undefined) view.setUint32(8, Number(data.dwBufferBytes), true);
  // 0x0c: u32
  if (data?.dwReserved !== undefined) view.setUint32(12, Number(data.dwReserved), true);
  return buf;
}

export type HANDLE = Deno.PointerValue;

/**
 * Windows.Win32.Media.Audio.DirectSound.DSBPOSITIONNOTIFY (size: 16)
 */
export interface DSBPOSITIONNOTIFY {
  /** u32 */
  dwOffset: number;
  /** Windows.Win32.Foundation.HANDLE */
  hEventNotify: Uint8Array | Deno.PointerValue | null;
}

export const sizeofDSBPOSITIONNOTIFY = 16;

export function allocDSBPOSITIONNOTIFY(data?: Partial<DSBPOSITIONNOTIFY>): Uint8Array {
  const buf = new Uint8Array(sizeofDSBPOSITIONNOTIFY);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.dwOffset !== undefined) view.setUint32(0, Number(data.dwOffset), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.hEventNotify !== undefined) view.setBigUint64(8, data.hEventNotify === null ? 0n : BigInt(util.toPointer(data.hEventNotify)), true);
  return buf;
}

/**
 * Windows.Win32.Media.Audio.DirectSound.DSFXGargle (size: 8)
 */
export interface DSFXGargle {
  /** u32 */
  dwRateHz: number;
  /** u32 */
  dwWaveShape: number;
}

export const sizeofDSFXGargle = 8;

export function allocDSFXGargle(data?: Partial<DSFXGargle>): Uint8Array {
  const buf = new Uint8Array(sizeofDSFXGargle);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.dwRateHz !== undefined) view.setUint32(0, Number(data.dwRateHz), true);
  // 0x04: u32
  if (data?.dwWaveShape !== undefined) view.setUint32(4, Number(data.dwWaveShape), true);
  return buf;
}

/**
 * Windows.Win32.Media.Audio.DirectSound.DSFXChorus (size: 32)
 */
export interface DSFXChorus {
  /** f32 */
  fWetDryMix: number;
  /** f32 */
  fDepth: number;
  /** f32 */
  fFeedback: number;
  /** f32 */
  fFrequency: number;
  /** i32 */
  lWaveform: number;
  /** f32 */
  fDelay: number;
  /** i32 */
  lPhase: number;
}

export const sizeofDSFXChorus = 32;

export function allocDSFXChorus(data?: Partial<DSFXChorus>): Uint8Array {
  const buf = new Uint8Array(sizeofDSFXChorus);
  const view = new DataView(buf.buffer);
  // 0x00: f32
  if (data?.fWetDryMix !== undefined) view.setFloat32(0, Number(data.fWetDryMix), true);
  // 0x04: f32
  if (data?.fDepth !== undefined) view.setFloat32(4, Number(data.fDepth), true);
  // 0x08: f32
  if (data?.fFeedback !== undefined) view.setFloat32(8, Number(data.fFeedback), true);
  // 0x0c: f32
  if (data?.fFrequency !== undefined) view.setFloat32(12, Number(data.fFrequency), true);
  // 0x10: i32
  if (data?.lWaveform !== undefined) view.setInt32(16, Number(data.lWaveform), true);
  // 0x14: f32
  if (data?.fDelay !== undefined) view.setFloat32(20, Number(data.fDelay), true);
  // 0x18: i32
  if (data?.lPhase !== undefined) view.setInt32(24, Number(data.lPhase), true);
  // 0x1c: pad4
  return buf;
}

/**
 * Windows.Win32.Media.Audio.DirectSound.DSFXFlanger (size: 32)
 */
export interface DSFXFlanger {
  /** f32 */
  fWetDryMix: number;
  /** f32 */
  fDepth: number;
  /** f32 */
  fFeedback: number;
  /** f32 */
  fFrequency: number;
  /** i32 */
  lWaveform: number;
  /** f32 */
  fDelay: number;
  /** i32 */
  lPhase: number;
}

export const sizeofDSFXFlanger = 32;

export function allocDSFXFlanger(data?: Partial<DSFXFlanger>): Uint8Array {
  const buf = new Uint8Array(sizeofDSFXFlanger);
  const view = new DataView(buf.buffer);
  // 0x00: f32
  if (data?.fWetDryMix !== undefined) view.setFloat32(0, Number(data.fWetDryMix), true);
  // 0x04: f32
  if (data?.fDepth !== undefined) view.setFloat32(4, Number(data.fDepth), true);
  // 0x08: f32
  if (data?.fFeedback !== undefined) view.setFloat32(8, Number(data.fFeedback), true);
  // 0x0c: f32
  if (data?.fFrequency !== undefined) view.setFloat32(12, Number(data.fFrequency), true);
  // 0x10: i32
  if (data?.lWaveform !== undefined) view.setInt32(16, Number(data.lWaveform), true);
  // 0x14: f32
  if (data?.fDelay !== undefined) view.setFloat32(20, Number(data.fDelay), true);
  // 0x18: i32
  if (data?.lPhase !== undefined) view.setInt32(24, Number(data.lPhase), true);
  // 0x1c: pad4
  return buf;
}

/**
 * Windows.Win32.Media.Audio.DirectSound.DSFXEcho (size: 24)
 */
export interface DSFXEcho {
  /** f32 */
  fWetDryMix: number;
  /** f32 */
  fFeedback: number;
  /** f32 */
  fLeftDelay: number;
  /** f32 */
  fRightDelay: number;
  /** i32 */
  lPanDelay: number;
}

export const sizeofDSFXEcho = 24;

export function allocDSFXEcho(data?: Partial<DSFXEcho>): Uint8Array {
  const buf = new Uint8Array(sizeofDSFXEcho);
  const view = new DataView(buf.buffer);
  // 0x00: f32
  if (data?.fWetDryMix !== undefined) view.setFloat32(0, Number(data.fWetDryMix), true);
  // 0x04: f32
  if (data?.fFeedback !== undefined) view.setFloat32(4, Number(data.fFeedback), true);
  // 0x08: f32
  if (data?.fLeftDelay !== undefined) view.setFloat32(8, Number(data.fLeftDelay), true);
  // 0x0c: f32
  if (data?.fRightDelay !== undefined) view.setFloat32(12, Number(data.fRightDelay), true);
  // 0x10: i32
  if (data?.lPanDelay !== undefined) view.setInt32(16, Number(data.lPanDelay), true);
  // 0x14: pad4
  return buf;
}

/**
 * Windows.Win32.Media.Audio.DirectSound.DSFXDistortion (size: 24)
 */
export interface DSFXDistortion {
  /** f32 */
  fGain: number;
  /** f32 */
  fEdge: number;
  /** f32 */
  fPostEQCenterFrequency: number;
  /** f32 */
  fPostEQBandwidth: number;
  /** f32 */
  fPreLowpassCutoff: number;
}

export const sizeofDSFXDistortion = 24;

export function allocDSFXDistortion(data?: Partial<DSFXDistortion>): Uint8Array {
  const buf = new Uint8Array(sizeofDSFXDistortion);
  const view = new DataView(buf.buffer);
  // 0x00: f32
  if (data?.fGain !== undefined) view.setFloat32(0, Number(data.fGain), true);
  // 0x04: f32
  if (data?.fEdge !== undefined) view.setFloat32(4, Number(data.fEdge), true);
  // 0x08: f32
  if (data?.fPostEQCenterFrequency !== undefined) view.setFloat32(8, Number(data.fPostEQCenterFrequency), true);
  // 0x0c: f32
  if (data?.fPostEQBandwidth !== undefined) view.setFloat32(12, Number(data.fPostEQBandwidth), true);
  // 0x10: f32
  if (data?.fPreLowpassCutoff !== undefined) view.setFloat32(16, Number(data.fPreLowpassCutoff), true);
  // 0x14: pad4
  return buf;
}

/**
 * Windows.Win32.Media.Audio.DirectSound.DSFXCompressor (size: 24)
 */
export interface DSFXCompressor {
  /** f32 */
  fGain: number;
  /** f32 */
  fAttack: number;
  /** f32 */
  fRelease: number;
  /** f32 */
  fThreshold: number;
  /** f32 */
  fRatio: number;
  /** f32 */
  fPredelay: number;
}

export const sizeofDSFXCompressor = 24;

export function allocDSFXCompressor(data?: Partial<DSFXCompressor>): Uint8Array {
  const buf = new Uint8Array(sizeofDSFXCompressor);
  const view = new DataView(buf.buffer);
  // 0x00: f32
  if (data?.fGain !== undefined) view.setFloat32(0, Number(data.fGain), true);
  // 0x04: f32
  if (data?.fAttack !== undefined) view.setFloat32(4, Number(data.fAttack), true);
  // 0x08: f32
  if (data?.fRelease !== undefined) view.setFloat32(8, Number(data.fRelease), true);
  // 0x0c: f32
  if (data?.fThreshold !== undefined) view.setFloat32(12, Number(data.fThreshold), true);
  // 0x10: f32
  if (data?.fRatio !== undefined) view.setFloat32(16, Number(data.fRatio), true);
  // 0x14: f32
  if (data?.fPredelay !== undefined) view.setFloat32(20, Number(data.fPredelay), true);
  return buf;
}

/**
 * Windows.Win32.Media.Audio.DirectSound.DSFXParamEq (size: 16)
 */
export interface DSFXParamEq {
  /** f32 */
  fCenter: number;
  /** f32 */
  fBandwidth: number;
  /** f32 */
  fGain: number;
}

export const sizeofDSFXParamEq = 16;

export function allocDSFXParamEq(data?: Partial<DSFXParamEq>): Uint8Array {
  const buf = new Uint8Array(sizeofDSFXParamEq);
  const view = new DataView(buf.buffer);
  // 0x00: f32
  if (data?.fCenter !== undefined) view.setFloat32(0, Number(data.fCenter), true);
  // 0x04: f32
  if (data?.fBandwidth !== undefined) view.setFloat32(4, Number(data.fBandwidth), true);
  // 0x08: f32
  if (data?.fGain !== undefined) view.setFloat32(8, Number(data.fGain), true);
  // 0x0c: pad4
  return buf;
}

/**
 * Windows.Win32.Media.Audio.DirectSound.DSFXI3DL2Reverb (size: 48)
 */
export interface DSFXI3DL2Reverb {
  /** i32 */
  lRoom: number;
  /** i32 */
  lRoomHF: number;
  /** f32 */
  flRoomRolloffFactor: number;
  /** f32 */
  flDecayTime: number;
  /** f32 */
  flDecayHFRatio: number;
  /** i32 */
  lReflections: number;
  /** f32 */
  flReflectionsDelay: number;
  /** i32 */
  lReverb: number;
  /** f32 */
  flReverbDelay: number;
  /** f32 */
  flDiffusion: number;
  /** f32 */
  flDensity: number;
  /** f32 */
  flHFReference: number;
}

export const sizeofDSFXI3DL2Reverb = 48;

export function allocDSFXI3DL2Reverb(data?: Partial<DSFXI3DL2Reverb>): Uint8Array {
  const buf = new Uint8Array(sizeofDSFXI3DL2Reverb);
  const view = new DataView(buf.buffer);
  // 0x00: i32
  if (data?.lRoom !== undefined) view.setInt32(0, Number(data.lRoom), true);
  // 0x04: i32
  if (data?.lRoomHF !== undefined) view.setInt32(4, Number(data.lRoomHF), true);
  // 0x08: f32
  if (data?.flRoomRolloffFactor !== undefined) view.setFloat32(8, Number(data.flRoomRolloffFactor), true);
  // 0x0c: f32
  if (data?.flDecayTime !== undefined) view.setFloat32(12, Number(data.flDecayTime), true);
  // 0x10: f32
  if (data?.flDecayHFRatio !== undefined) view.setFloat32(16, Number(data.flDecayHFRatio), true);
  // 0x14: i32
  if (data?.lReflections !== undefined) view.setInt32(20, Number(data.lReflections), true);
  // 0x18: f32
  if (data?.flReflectionsDelay !== undefined) view.setFloat32(24, Number(data.flReflectionsDelay), true);
  // 0x1c: i32
  if (data?.lReverb !== undefined) view.setInt32(28, Number(data.lReverb), true);
  // 0x20: f32
  if (data?.flReverbDelay !== undefined) view.setFloat32(32, Number(data.flReverbDelay), true);
  // 0x24: f32
  if (data?.flDiffusion !== undefined) view.setFloat32(36, Number(data.flDiffusion), true);
  // 0x28: f32
  if (data?.flDensity !== undefined) view.setFloat32(40, Number(data.flDensity), true);
  // 0x2c: f32
  if (data?.flHFReference !== undefined) view.setFloat32(44, Number(data.flHFReference), true);
  return buf;
}

/**
 * Windows.Win32.Media.Audio.DirectSound.DSFXWavesReverb (size: 16)
 */
export interface DSFXWavesReverb {
  /** f32 */
  fInGain: number;
  /** f32 */
  fReverbMix: number;
  /** f32 */
  fReverbTime: number;
  /** f32 */
  fHighFreqRTRatio: number;
}

export const sizeofDSFXWavesReverb = 16;

export function allocDSFXWavesReverb(data?: Partial<DSFXWavesReverb>): Uint8Array {
  const buf = new Uint8Array(sizeofDSFXWavesReverb);
  const view = new DataView(buf.buffer);
  // 0x00: f32
  if (data?.fInGain !== undefined) view.setFloat32(0, Number(data.fInGain), true);
  // 0x04: f32
  if (data?.fReverbMix !== undefined) view.setFloat32(4, Number(data.fReverbMix), true);
  // 0x08: f32
  if (data?.fReverbTime !== undefined) view.setFloat32(8, Number(data.fReverbTime), true);
  // 0x0c: f32
  if (data?.fHighFreqRTRatio !== undefined) view.setFloat32(12, Number(data.fHighFreqRTRatio), true);
  return buf;
}

/**
 * Windows.Win32.Media.Audio.DirectSound.DSCFXAec (size: 16)
 */
export interface DSCFXAec {
  /** Windows.Win32.Foundation.BOOL */
  fEnable: boolean;
  /** Windows.Win32.Foundation.BOOL */
  fNoiseFill: boolean;
  /** u32 */
  dwMode: number;
}

export const sizeofDSCFXAec = 16;

export function allocDSCFXAec(data?: Partial<DSCFXAec>): Uint8Array {
  const buf = new Uint8Array(sizeofDSCFXAec);
  const view = new DataView(buf.buffer);
  // 0x00: i32
  if (data?.fEnable !== undefined) view.setInt32(0, Number(data.fEnable), true);
  // 0x04: i32
  if (data?.fNoiseFill !== undefined) view.setInt32(4, Number(data.fNoiseFill), true);
  // 0x08: u32
  if (data?.dwMode !== undefined) view.setUint32(8, Number(data.dwMode), true);
  // 0x0c: pad4
  return buf;
}

/**
 * Windows.Win32.Media.Audio.DirectSound.DSCFXNoiseSuppress (size: 8)
 */
export interface DSCFXNoiseSuppress {
  /** Windows.Win32.Foundation.BOOL */
  fEnable: boolean;
}

export const sizeofDSCFXNoiseSuppress = 8;

export function allocDSCFXNoiseSuppress(data?: Partial<DSCFXNoiseSuppress>): Uint8Array {
  const buf = new Uint8Array(sizeofDSCFXNoiseSuppress);
  const view = new DataView(buf.buffer);
  // 0x00: i32
  if (data?.fEnable !== undefined) view.setInt32(0, Number(data.fEnable), true);
  // 0x04: pad4
  return buf;
}

/**
 * Windows.Win32.Media.Audio.Endpoints.AUDIO_ENDPOINT_SHARED_CREATE_PARAMS (size: 24)
 */
export interface AUDIO_ENDPOINT_SHARED_CREATE_PARAMS {
  /** u32 */
  u32Size: number;
  /** u32 */
  u32TSSessionId: number;
  /** Windows.Win32.Media.Audio.Endpoints.EndpointConnectorType */
  targetEndpointConnectorType: EndpointConnectorType;
  /** Windows.Win32.Media.Audio.WAVEFORMATEX */
  wfxDeviceFormat: Uint8Array | Deno.PointerValue | null;
}

export const sizeofAUDIO_ENDPOINT_SHARED_CREATE_PARAMS = 24;

export function allocAUDIO_ENDPOINT_SHARED_CREATE_PARAMS(data?: Partial<AUDIO_ENDPOINT_SHARED_CREATE_PARAMS>): Uint8Array {
  const buf = new Uint8Array(sizeofAUDIO_ENDPOINT_SHARED_CREATE_PARAMS);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.u32Size !== undefined) view.setUint32(0, Number(data.u32Size), true);
  // 0x04: u32
  if (data?.u32TSSessionId !== undefined) view.setUint32(4, Number(data.u32TSSessionId), true);
  // 0x08: i32
  if (data?.targetEndpointConnectorType !== undefined) view.setInt32(8, Number(data.targetEndpointConnectorType), true);
  // 0x0c: pad4
  // 0x10: pointer
  if (data?.wfxDeviceFormat !== undefined) view.setBigUint64(16, data.wfxDeviceFormat === null ? 0n : BigInt(util.toPointer(data.wfxDeviceFormat)), true);
  return buf;
}

/**
 * Windows.Win32.Media.Audio.AUDIO_VOLUME_NOTIFICATION_DATA (size: 32)
 */
export interface AUDIO_VOLUME_NOTIFICATION_DATA {
  /** System.Guid */
  guidEventContext: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Foundation.BOOL */
  bMuted: boolean;
  /** f32 */
  fMasterVolume: number;
  /** u32 */
  nChannels: number;
  /** array */
  afChannelVolumes: Deno.PointerValue | null;
}

export const sizeofAUDIO_VOLUME_NOTIFICATION_DATA = 32;

export function allocAUDIO_VOLUME_NOTIFICATION_DATA(data?: Partial<AUDIO_VOLUME_NOTIFICATION_DATA>): Uint8Array {
  const buf = new Uint8Array(sizeofAUDIO_VOLUME_NOTIFICATION_DATA);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.guidEventContext !== undefined) view.setBigUint64(0, data.guidEventContext === null ? 0n : BigInt(util.toPointer(data.guidEventContext)), true);
  // 0x08: i32
  if (data?.bMuted !== undefined) view.setInt32(8, Number(data.bMuted), true);
  // 0x0c: f32
  if (data?.fMasterVolume !== undefined) view.setFloat32(12, Number(data.fMasterVolume), true);
  // 0x10: u32
  if (data?.nChannels !== undefined) view.setUint32(16, Number(data.nChannels), true);
  // 0x14: pad4
  // 0x18: pointer
  if (data?.afChannelVolumes !== undefined) view.setBigUint64(24, data.afChannelVolumes === null ? 0n : BigInt(util.toPointer(data.afChannelVolumes)), true);
  return buf;
}

export type HMIDI = Deno.PointerValue;

export type HMIDIIN = Deno.PointerValue;

export type HMIDIOUT = Deno.PointerValue;

export type HMIDISTRM = Deno.PointerValue;

export type HMIXER = Deno.PointerValue;

export type HMIXEROBJ = Deno.PointerValue;

export type HWAVE = Deno.PointerValue;

export type HWAVEOUT = Deno.PointerValue;

export type HWAVEIN = Deno.PointerValue;

export type HACMDRIVERID = Deno.PointerValue;

export type HACMDRIVER = Deno.PointerValue;

export type HACMSTREAM = Deno.PointerValue;

export type HACMOBJ = Deno.PointerValue;

/**
 * _Samples_e__Union (size: 8)
 */
export interface _Samples_e__Union {
  /** u16 */
  wValidBitsPerSample: number;
  /** u16 */
  wSamplesPerBlock: number;
  /** u16 */
  wReserved: number;
}

export const sizeof_Samples_e__Union = 8;

export function alloc_Samples_e__Union(data?: Partial<_Samples_e__Union>): Uint8Array {
  const buf = new Uint8Array(sizeof_Samples_e__Union);
  const view = new DataView(buf.buffer);
  // 0x00: u16
  if (data?.wValidBitsPerSample !== undefined) view.setUint16(0, Number(data.wValidBitsPerSample), true);
  // 0x02: u16
  if (data?.wSamplesPerBlock !== undefined) view.setUint16(2, Number(data.wSamplesPerBlock), true);
  // 0x04: u16
  if (data?.wReserved !== undefined) view.setUint16(4, Number(data.wReserved), true);
  // 0x06: pad2
  return buf;
}

/**
 * Windows.Win32.Media.Audio.WAVEFORMATEXTENSIBLE (size: 32)
 */
export interface WAVEFORMATEXTENSIBLE {
  /** Windows.Win32.Media.Audio.WAVEFORMATEX */
  Format: Uint8Array | Deno.PointerValue | null;
  /** _Samples_e__Union */
  Samples: Uint8Array | Deno.PointerValue | null;
  /** u32 */
  dwChannelMask: number;
  /** System.Guid */
  SubFormat: Uint8Array | Deno.PointerValue | null;
}

export const sizeofWAVEFORMATEXTENSIBLE = 32;

export function allocWAVEFORMATEXTENSIBLE(data?: Partial<WAVEFORMATEXTENSIBLE>): Uint8Array {
  const buf = new Uint8Array(sizeofWAVEFORMATEXTENSIBLE);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.Format !== undefined) view.setBigUint64(0, data.Format === null ? 0n : BigInt(util.toPointer(data.Format)), true);
  // 0x08: pointer
  if (data?.Samples !== undefined) view.setBigUint64(8, data.Samples === null ? 0n : BigInt(util.toPointer(data.Samples)), true);
  // 0x10: u32
  if (data?.dwChannelMask !== undefined) view.setUint32(16, Number(data.dwChannelMask), true);
  // 0x14: pad4
  // 0x18: pointer
  if (data?.SubFormat !== undefined) view.setBigUint64(24, data.SubFormat === null ? 0n : BigInt(util.toPointer(data.SubFormat)), true);
  return buf;
}

/**
 * Windows.Win32.Media.Audio.WAVEFILTER (size: 24)
 */
export interface WAVEFILTER {
  /** u32 */
  cbStruct: number;
  /** u32 */
  dwFilterTag: number;
  /** u32 */
  fdwFilter: number;
  /** array */
  dwReserved: Deno.PointerValue | null;
}

export const sizeofWAVEFILTER = 24;

export function allocWAVEFILTER(data?: Partial<WAVEFILTER>): Uint8Array {
  const buf = new Uint8Array(sizeofWAVEFILTER);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.cbStruct !== undefined) view.setUint32(0, Number(data.cbStruct), true);
  // 0x04: u32
  if (data?.dwFilterTag !== undefined) view.setUint32(4, Number(data.dwFilterTag), true);
  // 0x08: u32
  if (data?.fdwFilter !== undefined) view.setUint32(8, Number(data.fdwFilter), true);
  // 0x0c: pad4
  // 0x10: pointer
  if (data?.dwReserved !== undefined) view.setBigUint64(16, data.dwReserved === null ? 0n : BigInt(util.toPointer(data.dwReserved)), true);
  return buf;
}

/**
 * Windows.Win32.Media.Audio.VOLUMEWAVEFILTER (size: 16)
 */
export interface VOLUMEWAVEFILTER {
  /** Windows.Win32.Media.Audio.WAVEFILTER */
  wfltr: Uint8Array | Deno.PointerValue | null;
  /** u32 */
  dwVolume: number;
}

export const sizeofVOLUMEWAVEFILTER = 16;

export function allocVOLUMEWAVEFILTER(data?: Partial<VOLUMEWAVEFILTER>): Uint8Array {
  const buf = new Uint8Array(sizeofVOLUMEWAVEFILTER);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.wfltr !== undefined) view.setBigUint64(0, data.wfltr === null ? 0n : BigInt(util.toPointer(data.wfltr)), true);
  // 0x08: u32
  if (data?.dwVolume !== undefined) view.setUint32(8, Number(data.dwVolume), true);
  // 0x0c: pad4
  return buf;
}

/**
 * Windows.Win32.Media.Audio.ECHOWAVEFILTER (size: 16)
 */
export interface ECHOWAVEFILTER {
  /** Windows.Win32.Media.Audio.WAVEFILTER */
  wfltr: Uint8Array | Deno.PointerValue | null;
  /** u32 */
  dwVolume: number;
  /** u32 */
  dwDelay: number;
}

export const sizeofECHOWAVEFILTER = 16;

export function allocECHOWAVEFILTER(data?: Partial<ECHOWAVEFILTER>): Uint8Array {
  const buf = new Uint8Array(sizeofECHOWAVEFILTER);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.wfltr !== undefined) view.setBigUint64(0, data.wfltr === null ? 0n : BigInt(util.toPointer(data.wfltr)), true);
  // 0x08: u32
  if (data?.dwVolume !== undefined) view.setUint32(8, Number(data.dwVolume), true);
  // 0x0c: u32
  if (data?.dwDelay !== undefined) view.setUint32(12, Number(data.dwDelay), true);
  return buf;
}

/**
 * Windows.Win32.Media.Audio.DirectMusic.MDEVICECAPSEX (size: 16)
 */
export interface MDEVICECAPSEX {
  /** u32 */
  cbSize: number;
  /** ptr */
  pCaps: Deno.PointerValue | Uint8Array | null;
}

export const sizeofMDEVICECAPSEX = 16;

export function allocMDEVICECAPSEX(data?: Partial<MDEVICECAPSEX>): Uint8Array {
  const buf = new Uint8Array(sizeofMDEVICECAPSEX);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.cbSize !== undefined) view.setUint32(0, Number(data.cbSize), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.pCaps !== undefined) view.setBigUint64(8, data.pCaps === null ? 0n : BigInt(util.toPointer(data.pCaps)), true);
  return buf;
}

/**
 * Windows.Win32.Media.Audio.DirectMusic.MIDIOPENDESC (size: 48)
 */
export interface MIDIOPENDESC {
  /** Windows.Win32.Media.Audio.HMIDI */
  hMidi: Uint8Array | Deno.PointerValue | null;
  /** usize */
  dwCallback: Deno.PointerValue;
  /** usize */
  dwInstance: Deno.PointerValue;
  /** usize */
  dnDevNode: Deno.PointerValue;
  /** u32 */
  cIds: number;
  /** array */
  rgIds: Deno.PointerValue | null;
}

export const sizeofMIDIOPENDESC = 48;

export function allocMIDIOPENDESC(data?: Partial<MIDIOPENDESC>): Uint8Array {
  const buf = new Uint8Array(sizeofMIDIOPENDESC);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.hMidi !== undefined) view.setBigUint64(0, data.hMidi === null ? 0n : BigInt(util.toPointer(data.hMidi)), true);
  // 0x08: usize
  if (data?.dwCallback !== undefined) view.setBigUint64(8, BigInt(data.dwCallback), true);
  // 0x10: usize
  if (data?.dwInstance !== undefined) view.setBigUint64(16, BigInt(data.dwInstance), true);
  // 0x18: usize
  if (data?.dnDevNode !== undefined) view.setBigUint64(24, BigInt(data.dnDevNode), true);
  // 0x20: u32
  if (data?.cIds !== undefined) view.setUint32(32, Number(data.cIds), true);
  // 0x24: pad4
  // 0x28: pointer
  if (data?.rgIds !== undefined) view.setBigUint64(40, data.rgIds === null ? 0n : BigInt(util.toPointer(data.rgIds)), true);
  return buf;
}

/**
 * Windows.Win32.Media.Audio.XAudio2.XAPO_REGISTRATION_PROPERTIES (size: 56)
 */
export interface XAPO_REGISTRATION_PROPERTIES {
  /** System.Guid */
  clsid: Uint8Array | Deno.PointerValue | null;
  /** array */
  FriendlyName: Deno.PointerValue | null;
  /** array */
  CopyrightInfo: Deno.PointerValue | null;
  /** u32 */
  MajorVersion: number;
  /** u32 */
  MinorVersion: number;
  /** u32 */
  Flags: number;
  /** u32 */
  MinInputBufferCount: number;
  /** u32 */
  MaxInputBufferCount: number;
  /** u32 */
  MinOutputBufferCount: number;
  /** u32 */
  MaxOutputBufferCount: number;
}

export const sizeofXAPO_REGISTRATION_PROPERTIES = 56;

export function allocXAPO_REGISTRATION_PROPERTIES(data?: Partial<XAPO_REGISTRATION_PROPERTIES>): Uint8Array {
  const buf = new Uint8Array(sizeofXAPO_REGISTRATION_PROPERTIES);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.clsid !== undefined) view.setBigUint64(0, data.clsid === null ? 0n : BigInt(util.toPointer(data.clsid)), true);
  // 0x08: pointer
  if (data?.FriendlyName !== undefined) view.setBigUint64(8, data.FriendlyName === null ? 0n : BigInt(util.toPointer(data.FriendlyName)), true);
  // 0x10: pointer
  if (data?.CopyrightInfo !== undefined) view.setBigUint64(16, data.CopyrightInfo === null ? 0n : BigInt(util.toPointer(data.CopyrightInfo)), true);
  // 0x18: u32
  if (data?.MajorVersion !== undefined) view.setUint32(24, Number(data.MajorVersion), true);
  // 0x1c: u32
  if (data?.MinorVersion !== undefined) view.setUint32(28, Number(data.MinorVersion), true);
  // 0x20: u32
  if (data?.Flags !== undefined) view.setUint32(32, Number(data.Flags), true);
  // 0x24: u32
  if (data?.MinInputBufferCount !== undefined) view.setUint32(36, Number(data.MinInputBufferCount), true);
  // 0x28: u32
  if (data?.MaxInputBufferCount !== undefined) view.setUint32(40, Number(data.MaxInputBufferCount), true);
  // 0x2c: u32
  if (data?.MinOutputBufferCount !== undefined) view.setUint32(44, Number(data.MinOutputBufferCount), true);
  // 0x30: u32
  if (data?.MaxOutputBufferCount !== undefined) view.setUint32(48, Number(data.MaxOutputBufferCount), true);
  // 0x34: pad4
  return buf;
}

/**
 * Windows.Win32.Media.Audio.XAudio2.XAPO_LOCKFORPROCESS_PARAMETERS (size: 16)
 */
export interface XAPO_LOCKFORPROCESS_PARAMETERS {
  /** ptr */
  pFormat: Deno.PointerValue | Uint8Array | null;
  /** u32 */
  MaxFrameCount: number;
}

export const sizeofXAPO_LOCKFORPROCESS_PARAMETERS = 16;

export function allocXAPO_LOCKFORPROCESS_PARAMETERS(data?: Partial<XAPO_LOCKFORPROCESS_PARAMETERS>): Uint8Array {
  const buf = new Uint8Array(sizeofXAPO_LOCKFORPROCESS_PARAMETERS);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.pFormat !== undefined) view.setBigUint64(0, data.pFormat === null ? 0n : BigInt(util.toPointer(data.pFormat)), true);
  // 0x08: u32
  if (data?.MaxFrameCount !== undefined) view.setUint32(8, Number(data.MaxFrameCount), true);
  // 0x0c: pad4
  return buf;
}

/**
 * Windows.Win32.Media.Audio.XAudio2.XAPO_PROCESS_BUFFER_PARAMETERS (size: 16)
 */
export interface XAPO_PROCESS_BUFFER_PARAMETERS {
  /** ptr */
  pBuffer: Deno.PointerValue | Uint8Array | null;
  /** Windows.Win32.Media.Audio.XAudio2.XAPO_BUFFER_FLAGS */
  BufferFlags: XAPO_BUFFER_FLAGS;
  /** u32 */
  ValidFrameCount: number;
}

export const sizeofXAPO_PROCESS_BUFFER_PARAMETERS = 16;

export function allocXAPO_PROCESS_BUFFER_PARAMETERS(data?: Partial<XAPO_PROCESS_BUFFER_PARAMETERS>): Uint8Array {
  const buf = new Uint8Array(sizeofXAPO_PROCESS_BUFFER_PARAMETERS);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.pBuffer !== undefined) view.setBigUint64(0, data.pBuffer === null ? 0n : BigInt(util.toPointer(data.pBuffer)), true);
  // 0x08: i32
  if (data?.BufferFlags !== undefined) view.setInt32(8, Number(data.BufferFlags), true);
  // 0x0c: u32
  if (data?.ValidFrameCount !== undefined) view.setUint32(12, Number(data.ValidFrameCount), true);
  return buf;
}

/**
 * Windows.Win32.Media.Audio.XAudio2.FXEQ_PARAMETERS (size: 48)
 */
export interface FXEQ_PARAMETERS {
  /** f32 */
  FrequencyCenter0: number;
  /** f32 */
  Gain0: number;
  /** f32 */
  Bandwidth0: number;
  /** f32 */
  FrequencyCenter1: number;
  /** f32 */
  Gain1: number;
  /** f32 */
  Bandwidth1: number;
  /** f32 */
  FrequencyCenter2: number;
  /** f32 */
  Gain2: number;
  /** f32 */
  Bandwidth2: number;
  /** f32 */
  FrequencyCenter3: number;
  /** f32 */
  Gain3: number;
  /** f32 */
  Bandwidth3: number;
}

export const sizeofFXEQ_PARAMETERS = 48;

export function allocFXEQ_PARAMETERS(data?: Partial<FXEQ_PARAMETERS>): Uint8Array {
  const buf = new Uint8Array(sizeofFXEQ_PARAMETERS);
  const view = new DataView(buf.buffer);
  // 0x00: f32
  if (data?.FrequencyCenter0 !== undefined) view.setFloat32(0, Number(data.FrequencyCenter0), true);
  // 0x04: f32
  if (data?.Gain0 !== undefined) view.setFloat32(4, Number(data.Gain0), true);
  // 0x08: f32
  if (data?.Bandwidth0 !== undefined) view.setFloat32(8, Number(data.Bandwidth0), true);
  // 0x0c: f32
  if (data?.FrequencyCenter1 !== undefined) view.setFloat32(12, Number(data.FrequencyCenter1), true);
  // 0x10: f32
  if (data?.Gain1 !== undefined) view.setFloat32(16, Number(data.Gain1), true);
  // 0x14: f32
  if (data?.Bandwidth1 !== undefined) view.setFloat32(20, Number(data.Bandwidth1), true);
  // 0x18: f32
  if (data?.FrequencyCenter2 !== undefined) view.setFloat32(24, Number(data.FrequencyCenter2), true);
  // 0x1c: f32
  if (data?.Gain2 !== undefined) view.setFloat32(28, Number(data.Gain2), true);
  // 0x20: f32
  if (data?.Bandwidth2 !== undefined) view.setFloat32(32, Number(data.Bandwidth2), true);
  // 0x24: f32
  if (data?.FrequencyCenter3 !== undefined) view.setFloat32(36, Number(data.FrequencyCenter3), true);
  // 0x28: f32
  if (data?.Gain3 !== undefined) view.setFloat32(40, Number(data.Gain3), true);
  // 0x2c: f32
  if (data?.Bandwidth3 !== undefined) view.setFloat32(44, Number(data.Bandwidth3), true);
  return buf;
}

/**
 * Windows.Win32.Media.Audio.XAudio2.FXMASTERINGLIMITER_PARAMETERS (size: 8)
 */
export interface FXMASTERINGLIMITER_PARAMETERS {
  /** u32 */
  Release: number;
  /** u32 */
  Loudness: number;
}

export const sizeofFXMASTERINGLIMITER_PARAMETERS = 8;

export function allocFXMASTERINGLIMITER_PARAMETERS(data?: Partial<FXMASTERINGLIMITER_PARAMETERS>): Uint8Array {
  const buf = new Uint8Array(sizeofFXMASTERINGLIMITER_PARAMETERS);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.Release !== undefined) view.setUint32(0, Number(data.Release), true);
  // 0x04: u32
  if (data?.Loudness !== undefined) view.setUint32(4, Number(data.Loudness), true);
  return buf;
}

/**
 * Windows.Win32.Media.Audio.XAudio2.FXREVERB_PARAMETERS (size: 8)
 */
export interface FXREVERB_PARAMETERS {
  /** f32 */
  Diffusion: number;
  /** f32 */
  RoomSize: number;
}

export const sizeofFXREVERB_PARAMETERS = 8;

export function allocFXREVERB_PARAMETERS(data?: Partial<FXREVERB_PARAMETERS>): Uint8Array {
  const buf = new Uint8Array(sizeofFXREVERB_PARAMETERS);
  const view = new DataView(buf.buffer);
  // 0x00: f32
  if (data?.Diffusion !== undefined) view.setFloat32(0, Number(data.Diffusion), true);
  // 0x04: f32
  if (data?.RoomSize !== undefined) view.setFloat32(4, Number(data.RoomSize), true);
  return buf;
}

/**
 * Windows.Win32.Media.Audio.XAudio2.FXECHO_INITDATA (size: 8)
 */
export interface FXECHO_INITDATA {
  /** f32 */
  MaxDelay: number;
}

export const sizeofFXECHO_INITDATA = 8;

export function allocFXECHO_INITDATA(data?: Partial<FXECHO_INITDATA>): Uint8Array {
  const buf = new Uint8Array(sizeofFXECHO_INITDATA);
  const view = new DataView(buf.buffer);
  // 0x00: f32
  if (data?.MaxDelay !== undefined) view.setFloat32(0, Number(data.MaxDelay), true);
  // 0x04: pad4
  return buf;
}

/**
 * Windows.Win32.Media.Audio.XAudio2.FXECHO_PARAMETERS (size: 16)
 */
export interface FXECHO_PARAMETERS {
  /** f32 */
  WetDryMix: number;
  /** f32 */
  Feedback: number;
  /** f32 */
  Delay: number;
}

export const sizeofFXECHO_PARAMETERS = 16;

export function allocFXECHO_PARAMETERS(data?: Partial<FXECHO_PARAMETERS>): Uint8Array {
  const buf = new Uint8Array(sizeofFXECHO_PARAMETERS);
  const view = new DataView(buf.buffer);
  // 0x00: f32
  if (data?.WetDryMix !== undefined) view.setFloat32(0, Number(data.WetDryMix), true);
  // 0x04: f32
  if (data?.Feedback !== undefined) view.setFloat32(4, Number(data.Feedback), true);
  // 0x08: f32
  if (data?.Delay !== undefined) view.setFloat32(8, Number(data.Delay), true);
  // 0x0c: pad4
  return buf;
}

/**
 * Windows.Win32.Media.Audio.XAudio2.XAUDIO2_VOICE_DETAILS (size: 16)
 */
export interface XAUDIO2_VOICE_DETAILS {
  /** u32 */
  CreationFlags: number;
  /** u32 */
  ActiveFlags: number;
  /** u32 */
  InputChannels: number;
  /** u32 */
  InputSampleRate: number;
}

export const sizeofXAUDIO2_VOICE_DETAILS = 16;

export function allocXAUDIO2_VOICE_DETAILS(data?: Partial<XAUDIO2_VOICE_DETAILS>): Uint8Array {
  const buf = new Uint8Array(sizeofXAUDIO2_VOICE_DETAILS);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.CreationFlags !== undefined) view.setUint32(0, Number(data.CreationFlags), true);
  // 0x04: u32
  if (data?.ActiveFlags !== undefined) view.setUint32(4, Number(data.ActiveFlags), true);
  // 0x08: u32
  if (data?.InputChannels !== undefined) view.setUint32(8, Number(data.InputChannels), true);
  // 0x0c: u32
  if (data?.InputSampleRate !== undefined) view.setUint32(12, Number(data.InputSampleRate), true);
  return buf;
}

/**
 * Windows.Win32.Media.Audio.XAudio2.XAUDIO2_SEND_DESCRIPTOR (size: 16)
 */
export interface XAUDIO2_SEND_DESCRIPTOR {
  /** u32 */
  Flags: number;
  /** Windows.Win32.Media.Audio.XAudio2.IXAudio2Voice */
  pOutputVoice: Uint8Array | Deno.PointerValue | null;
}

export const sizeofXAUDIO2_SEND_DESCRIPTOR = 16;

export function allocXAUDIO2_SEND_DESCRIPTOR(data?: Partial<XAUDIO2_SEND_DESCRIPTOR>): Uint8Array {
  const buf = new Uint8Array(sizeofXAUDIO2_SEND_DESCRIPTOR);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.Flags !== undefined) view.setUint32(0, Number(data.Flags), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.pOutputVoice !== undefined) view.setBigUint64(8, data.pOutputVoice === null ? 0n : BigInt(util.toPointer(data.pOutputVoice)), true);
  return buf;
}

/**
 * Windows.Win32.Media.Audio.XAudio2.XAUDIO2_VOICE_SENDS (size: 16)
 */
export interface XAUDIO2_VOICE_SENDS {
  /** u32 */
  SendCount: number;
  /** ptr */
  pSends: Deno.PointerValue | Uint8Array | null;
}

export const sizeofXAUDIO2_VOICE_SENDS = 16;

export function allocXAUDIO2_VOICE_SENDS(data?: Partial<XAUDIO2_VOICE_SENDS>): Uint8Array {
  const buf = new Uint8Array(sizeofXAUDIO2_VOICE_SENDS);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.SendCount !== undefined) view.setUint32(0, Number(data.SendCount), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.pSends !== undefined) view.setBigUint64(8, data.pSends === null ? 0n : BigInt(util.toPointer(data.pSends)), true);
  return buf;
}

/**
 * Windows.Win32.Media.Audio.XAudio2.XAUDIO2_EFFECT_DESCRIPTOR (size: 16)
 */
export interface XAUDIO2_EFFECT_DESCRIPTOR {
  /** Windows.Win32.System.Com.IUnknown */
  pEffect: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Foundation.BOOL */
  InitialState: boolean;
  /** u32 */
  OutputChannels: number;
}

export const sizeofXAUDIO2_EFFECT_DESCRIPTOR = 16;

export function allocXAUDIO2_EFFECT_DESCRIPTOR(data?: Partial<XAUDIO2_EFFECT_DESCRIPTOR>): Uint8Array {
  const buf = new Uint8Array(sizeofXAUDIO2_EFFECT_DESCRIPTOR);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.pEffect !== undefined) view.setBigUint64(0, data.pEffect === null ? 0n : BigInt(util.toPointer(data.pEffect)), true);
  // 0x08: i32
  if (data?.InitialState !== undefined) view.setInt32(8, Number(data.InitialState), true);
  // 0x0c: u32
  if (data?.OutputChannels !== undefined) view.setUint32(12, Number(data.OutputChannels), true);
  return buf;
}

/**
 * Windows.Win32.Media.Audio.XAudio2.XAUDIO2_EFFECT_CHAIN (size: 16)
 */
export interface XAUDIO2_EFFECT_CHAIN {
  /** u32 */
  EffectCount: number;
  /** ptr */
  pEffectDescriptors: Deno.PointerValue | Uint8Array | null;
}

export const sizeofXAUDIO2_EFFECT_CHAIN = 16;

export function allocXAUDIO2_EFFECT_CHAIN(data?: Partial<XAUDIO2_EFFECT_CHAIN>): Uint8Array {
  const buf = new Uint8Array(sizeofXAUDIO2_EFFECT_CHAIN);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.EffectCount !== undefined) view.setUint32(0, Number(data.EffectCount), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.pEffectDescriptors !== undefined) view.setBigUint64(8, data.pEffectDescriptors === null ? 0n : BigInt(util.toPointer(data.pEffectDescriptors)), true);
  return buf;
}

/**
 * Windows.Win32.Media.Audio.XAudio2.XAUDIO2_FILTER_PARAMETERS (size: 16)
 */
export interface XAUDIO2_FILTER_PARAMETERS {
  /** Windows.Win32.Media.Audio.XAudio2.XAUDIO2_FILTER_TYPE */
  Type: XAUDIO2_FILTER_TYPE;
  /** f32 */
  Frequency: number;
  /** f32 */
  OneOverQ: number;
}

export const sizeofXAUDIO2_FILTER_PARAMETERS = 16;

export function allocXAUDIO2_FILTER_PARAMETERS(data?: Partial<XAUDIO2_FILTER_PARAMETERS>): Uint8Array {
  const buf = new Uint8Array(sizeofXAUDIO2_FILTER_PARAMETERS);
  const view = new DataView(buf.buffer);
  // 0x00: i32
  if (data?.Type !== undefined) view.setInt32(0, Number(data.Type), true);
  // 0x04: f32
  if (data?.Frequency !== undefined) view.setFloat32(4, Number(data.Frequency), true);
  // 0x08: f32
  if (data?.OneOverQ !== undefined) view.setFloat32(8, Number(data.OneOverQ), true);
  // 0x0c: pad4
  return buf;
}

/**
 * Windows.Win32.Media.Audio.XAudio2.XAUDIO2_BUFFER (size: 48)
 */
export interface XAUDIO2_BUFFER {
  /** u32 */
  Flags: number;
  /** u32 */
  AudioBytes: number;
  /** ptr */
  pAudioData: Deno.PointerValue | Uint8Array | null;
  /** u32 */
  PlayBegin: number;
  /** u32 */
  PlayLength: number;
  /** u32 */
  LoopBegin: number;
  /** u32 */
  LoopLength: number;
  /** u32 */
  LoopCount: number;
  /** ptr */
  pContext: Deno.PointerValue | Uint8Array | null;
}

export const sizeofXAUDIO2_BUFFER = 48;

export function allocXAUDIO2_BUFFER(data?: Partial<XAUDIO2_BUFFER>): Uint8Array {
  const buf = new Uint8Array(sizeofXAUDIO2_BUFFER);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.Flags !== undefined) view.setUint32(0, Number(data.Flags), true);
  // 0x04: u32
  if (data?.AudioBytes !== undefined) view.setUint32(4, Number(data.AudioBytes), true);
  // 0x08: pointer
  if (data?.pAudioData !== undefined) view.setBigUint64(8, data.pAudioData === null ? 0n : BigInt(util.toPointer(data.pAudioData)), true);
  // 0x10: u32
  if (data?.PlayBegin !== undefined) view.setUint32(16, Number(data.PlayBegin), true);
  // 0x14: u32
  if (data?.PlayLength !== undefined) view.setUint32(20, Number(data.PlayLength), true);
  // 0x18: u32
  if (data?.LoopBegin !== undefined) view.setUint32(24, Number(data.LoopBegin), true);
  // 0x1c: u32
  if (data?.LoopLength !== undefined) view.setUint32(28, Number(data.LoopLength), true);
  // 0x20: u32
  if (data?.LoopCount !== undefined) view.setUint32(32, Number(data.LoopCount), true);
  // 0x24: pad4
  // 0x28: pointer
  if (data?.pContext !== undefined) view.setBigUint64(40, data.pContext === null ? 0n : BigInt(util.toPointer(data.pContext)), true);
  return buf;
}

/**
 * Windows.Win32.Media.Audio.XAudio2.XAUDIO2_BUFFER_WMA (size: 16)
 */
export interface XAUDIO2_BUFFER_WMA {
  /** ptr */
  pDecodedPacketCumulativeBytes: Deno.PointerValue | Uint8Array | null;
  /** u32 */
  PacketCount: number;
}

export const sizeofXAUDIO2_BUFFER_WMA = 16;

export function allocXAUDIO2_BUFFER_WMA(data?: Partial<XAUDIO2_BUFFER_WMA>): Uint8Array {
  const buf = new Uint8Array(sizeofXAUDIO2_BUFFER_WMA);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.pDecodedPacketCumulativeBytes !== undefined) view.setBigUint64(0, data.pDecodedPacketCumulativeBytes === null ? 0n : BigInt(util.toPointer(data.pDecodedPacketCumulativeBytes)), true);
  // 0x08: u32
  if (data?.PacketCount !== undefined) view.setUint32(8, Number(data.PacketCount), true);
  // 0x0c: pad4
  return buf;
}

/**
 * Windows.Win32.Media.Audio.XAudio2.XAUDIO2_VOICE_STATE (size: 24)
 */
export interface XAUDIO2_VOICE_STATE {
  /** ptr */
  pCurrentBufferContext: Deno.PointerValue | Uint8Array | null;
  /** u32 */
  BuffersQueued: number;
  /** u64 */
  SamplesPlayed: Deno.PointerValue;
}

export const sizeofXAUDIO2_VOICE_STATE = 24;

export function allocXAUDIO2_VOICE_STATE(data?: Partial<XAUDIO2_VOICE_STATE>): Uint8Array {
  const buf = new Uint8Array(sizeofXAUDIO2_VOICE_STATE);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.pCurrentBufferContext !== undefined) view.setBigUint64(0, data.pCurrentBufferContext === null ? 0n : BigInt(util.toPointer(data.pCurrentBufferContext)), true);
  // 0x08: u32
  if (data?.BuffersQueued !== undefined) view.setUint32(8, Number(data.BuffersQueued), true);
  // 0x0c: pad4
  // 0x10: u64
  if (data?.SamplesPlayed !== undefined) view.setBigUint64(16, BigInt(data.SamplesPlayed), true);
  return buf;
}

/**
 * Windows.Win32.Media.Audio.XAudio2.XAUDIO2_PERFORMANCE_DATA (size: 64)
 */
export interface XAUDIO2_PERFORMANCE_DATA {
  /** u64 */
  AudioCyclesSinceLastQuery: Deno.PointerValue;
  /** u64 */
  TotalCyclesSinceLastQuery: Deno.PointerValue;
  /** u32 */
  MinimumCyclesPerQuantum: number;
  /** u32 */
  MaximumCyclesPerQuantum: number;
  /** u32 */
  MemoryUsageInBytes: number;
  /** u32 */
  CurrentLatencyInSamples: number;
  /** u32 */
  GlitchesSinceEngineStarted: number;
  /** u32 */
  ActiveSourceVoiceCount: number;
  /** u32 */
  TotalSourceVoiceCount: number;
  /** u32 */
  ActiveSubmixVoiceCount: number;
  /** u32 */
  ActiveResamplerCount: number;
  /** u32 */
  ActiveMatrixMixCount: number;
  /** u32 */
  ActiveXmaSourceVoices: number;
  /** u32 */
  ActiveXmaStreams: number;
}

export const sizeofXAUDIO2_PERFORMANCE_DATA = 64;

export function allocXAUDIO2_PERFORMANCE_DATA(data?: Partial<XAUDIO2_PERFORMANCE_DATA>): Uint8Array {
  const buf = new Uint8Array(sizeofXAUDIO2_PERFORMANCE_DATA);
  const view = new DataView(buf.buffer);
  // 0x00: u64
  if (data?.AudioCyclesSinceLastQuery !== undefined) view.setBigUint64(0, BigInt(data.AudioCyclesSinceLastQuery), true);
  // 0x08: u64
  if (data?.TotalCyclesSinceLastQuery !== undefined) view.setBigUint64(8, BigInt(data.TotalCyclesSinceLastQuery), true);
  // 0x10: u32
  if (data?.MinimumCyclesPerQuantum !== undefined) view.setUint32(16, Number(data.MinimumCyclesPerQuantum), true);
  // 0x14: u32
  if (data?.MaximumCyclesPerQuantum !== undefined) view.setUint32(20, Number(data.MaximumCyclesPerQuantum), true);
  // 0x18: u32
  if (data?.MemoryUsageInBytes !== undefined) view.setUint32(24, Number(data.MemoryUsageInBytes), true);
  // 0x1c: u32
  if (data?.CurrentLatencyInSamples !== undefined) view.setUint32(28, Number(data.CurrentLatencyInSamples), true);
  // 0x20: u32
  if (data?.GlitchesSinceEngineStarted !== undefined) view.setUint32(32, Number(data.GlitchesSinceEngineStarted), true);
  // 0x24: u32
  if (data?.ActiveSourceVoiceCount !== undefined) view.setUint32(36, Number(data.ActiveSourceVoiceCount), true);
  // 0x28: u32
  if (data?.TotalSourceVoiceCount !== undefined) view.setUint32(40, Number(data.TotalSourceVoiceCount), true);
  // 0x2c: u32
  if (data?.ActiveSubmixVoiceCount !== undefined) view.setUint32(44, Number(data.ActiveSubmixVoiceCount), true);
  // 0x30: u32
  if (data?.ActiveResamplerCount !== undefined) view.setUint32(48, Number(data.ActiveResamplerCount), true);
  // 0x34: u32
  if (data?.ActiveMatrixMixCount !== undefined) view.setUint32(52, Number(data.ActiveMatrixMixCount), true);
  // 0x38: u32
  if (data?.ActiveXmaSourceVoices !== undefined) view.setUint32(56, Number(data.ActiveXmaSourceVoices), true);
  // 0x3c: u32
  if (data?.ActiveXmaStreams !== undefined) view.setUint32(60, Number(data.ActiveXmaStreams), true);
  return buf;
}

/**
 * Windows.Win32.Media.Audio.XAudio2.XAUDIO2_DEBUG_CONFIGURATION (size: 24)
 */
export interface XAUDIO2_DEBUG_CONFIGURATION {
  /** u32 */
  TraceMask: number;
  /** u32 */
  BreakMask: number;
  /** Windows.Win32.Foundation.BOOL */
  LogThreadID: boolean;
  /** Windows.Win32.Foundation.BOOL */
  LogFileline: boolean;
  /** Windows.Win32.Foundation.BOOL */
  LogFunctionName: boolean;
  /** Windows.Win32.Foundation.BOOL */
  LogTiming: boolean;
}

export const sizeofXAUDIO2_DEBUG_CONFIGURATION = 24;

export function allocXAUDIO2_DEBUG_CONFIGURATION(data?: Partial<XAUDIO2_DEBUG_CONFIGURATION>): Uint8Array {
  const buf = new Uint8Array(sizeofXAUDIO2_DEBUG_CONFIGURATION);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.TraceMask !== undefined) view.setUint32(0, Number(data.TraceMask), true);
  // 0x04: u32
  if (data?.BreakMask !== undefined) view.setUint32(4, Number(data.BreakMask), true);
  // 0x08: i32
  if (data?.LogThreadID !== undefined) view.setInt32(8, Number(data.LogThreadID), true);
  // 0x0c: i32
  if (data?.LogFileline !== undefined) view.setInt32(12, Number(data.LogFileline), true);
  // 0x10: i32
  if (data?.LogFunctionName !== undefined) view.setInt32(16, Number(data.LogFunctionName), true);
  // 0x14: i32
  if (data?.LogTiming !== undefined) view.setInt32(20, Number(data.LogTiming), true);
  return buf;
}

/**
 * Windows.Win32.Media.Audio.XAudio2.XAUDIO2FX_VOLUMEMETER_LEVELS (size: 24)
 */
export interface XAUDIO2FX_VOLUMEMETER_LEVELS {
  /** ptr */
  pPeakLevels: Deno.PointerValue | Uint8Array | null;
  /** ptr */
  pRMSLevels: Deno.PointerValue | Uint8Array | null;
  /** u32 */
  ChannelCount: number;
}

export const sizeofXAUDIO2FX_VOLUMEMETER_LEVELS = 24;

export function allocXAUDIO2FX_VOLUMEMETER_LEVELS(data?: Partial<XAUDIO2FX_VOLUMEMETER_LEVELS>): Uint8Array {
  const buf = new Uint8Array(sizeofXAUDIO2FX_VOLUMEMETER_LEVELS);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.pPeakLevels !== undefined) view.setBigUint64(0, data.pPeakLevels === null ? 0n : BigInt(util.toPointer(data.pPeakLevels)), true);
  // 0x08: pointer
  if (data?.pRMSLevels !== undefined) view.setBigUint64(8, data.pRMSLevels === null ? 0n : BigInt(util.toPointer(data.pRMSLevels)), true);
  // 0x10: u32
  if (data?.ChannelCount !== undefined) view.setUint32(16, Number(data.ChannelCount), true);
  // 0x14: pad4
  return buf;
}

/**
 * Windows.Win32.Media.Audio.XAudio2.XAUDIO2FX_REVERB_PARAMETERS (size: 64)
 */
export interface XAUDIO2FX_REVERB_PARAMETERS {
  /** f32 */
  WetDryMix: number;
  /** u32 */
  ReflectionsDelay: number;
  /** u8 */
  ReverbDelay: number;
  /** u8 */
  RearDelay: number;
  /** u8 */
  SideDelay: number;
  /** u8 */
  PositionLeft: number;
  /** u8 */
  PositionRight: number;
  /** u8 */
  PositionMatrixLeft: number;
  /** u8 */
  PositionMatrixRight: number;
  /** u8 */
  EarlyDiffusion: number;
  /** u8 */
  LateDiffusion: number;
  /** u8 */
  LowEQGain: number;
  /** u8 */
  LowEQCutoff: number;
  /** u8 */
  HighEQGain: number;
  /** u8 */
  HighEQCutoff: number;
  /** f32 */
  RoomFilterFreq: number;
  /** f32 */
  RoomFilterMain: number;
  /** f32 */
  RoomFilterHF: number;
  /** f32 */
  ReflectionsGain: number;
  /** f32 */
  ReverbGain: number;
  /** f32 */
  DecayTime: number;
  /** f32 */
  Density: number;
  /** f32 */
  RoomSize: number;
  /** Windows.Win32.Foundation.BOOL */
  DisableLateField: boolean;
}

export const sizeofXAUDIO2FX_REVERB_PARAMETERS = 64;

export function allocXAUDIO2FX_REVERB_PARAMETERS(data?: Partial<XAUDIO2FX_REVERB_PARAMETERS>): Uint8Array {
  const buf = new Uint8Array(sizeofXAUDIO2FX_REVERB_PARAMETERS);
  const view = new DataView(buf.buffer);
  // 0x00: f32
  if (data?.WetDryMix !== undefined) view.setFloat32(0, Number(data.WetDryMix), true);
  // 0x04: u32
  if (data?.ReflectionsDelay !== undefined) view.setUint32(4, Number(data.ReflectionsDelay), true);
  // 0x08: u8
  if (data?.ReverbDelay !== undefined) view.setUint8(8, Number(data.ReverbDelay));
  // 0x09: u8
  if (data?.RearDelay !== undefined) view.setUint8(9, Number(data.RearDelay));
  // 0x0a: u8
  if (data?.SideDelay !== undefined) view.setUint8(10, Number(data.SideDelay));
  // 0x0b: u8
  if (data?.PositionLeft !== undefined) view.setUint8(11, Number(data.PositionLeft));
  // 0x0c: u8
  if (data?.PositionRight !== undefined) view.setUint8(12, Number(data.PositionRight));
  // 0x0d: u8
  if (data?.PositionMatrixLeft !== undefined) view.setUint8(13, Number(data.PositionMatrixLeft));
  // 0x0e: u8
  if (data?.PositionMatrixRight !== undefined) view.setUint8(14, Number(data.PositionMatrixRight));
  // 0x0f: u8
  if (data?.EarlyDiffusion !== undefined) view.setUint8(15, Number(data.EarlyDiffusion));
  // 0x10: u8
  if (data?.LateDiffusion !== undefined) view.setUint8(16, Number(data.LateDiffusion));
  // 0x11: u8
  if (data?.LowEQGain !== undefined) view.setUint8(17, Number(data.LowEQGain));
  // 0x12: u8
  if (data?.LowEQCutoff !== undefined) view.setUint8(18, Number(data.LowEQCutoff));
  // 0x13: u8
  if (data?.HighEQGain !== undefined) view.setUint8(19, Number(data.HighEQGain));
  // 0x14: u8
  if (data?.HighEQCutoff !== undefined) view.setUint8(20, Number(data.HighEQCutoff));
  // 0x15: f32
  if (data?.RoomFilterFreq !== undefined) view.setFloat32(21, Number(data.RoomFilterFreq), true);
  // 0x19: f32
  if (data?.RoomFilterMain !== undefined) view.setFloat32(25, Number(data.RoomFilterMain), true);
  // 0x1d: f32
  if (data?.RoomFilterHF !== undefined) view.setFloat32(29, Number(data.RoomFilterHF), true);
  // 0x21: f32
  if (data?.ReflectionsGain !== undefined) view.setFloat32(33, Number(data.ReflectionsGain), true);
  // 0x25: f32
  if (data?.ReverbGain !== undefined) view.setFloat32(37, Number(data.ReverbGain), true);
  // 0x29: f32
  if (data?.DecayTime !== undefined) view.setFloat32(41, Number(data.DecayTime), true);
  // 0x2d: f32
  if (data?.Density !== undefined) view.setFloat32(45, Number(data.Density), true);
  // 0x31: f32
  if (data?.RoomSize !== undefined) view.setFloat32(49, Number(data.RoomSize), true);
  // 0x35: i32
  if (data?.DisableLateField !== undefined) view.setInt32(53, Number(data.DisableLateField), true);
  // 0x39: pad7
  return buf;
}

/**
 * Windows.Win32.Media.Audio.XAudio2.XAUDIO2FX_REVERB_I3DL2_PARAMETERS (size: 56)
 */
export interface XAUDIO2FX_REVERB_I3DL2_PARAMETERS {
  /** f32 */
  WetDryMix: number;
  /** i32 */
  Room: number;
  /** i32 */
  RoomHF: number;
  /** f32 */
  RoomRolloffFactor: number;
  /** f32 */
  DecayTime: number;
  /** f32 */
  DecayHFRatio: number;
  /** i32 */
  Reflections: number;
  /** f32 */
  ReflectionsDelay: number;
  /** i32 */
  Reverb: number;
  /** f32 */
  ReverbDelay: number;
  /** f32 */
  Diffusion: number;
  /** f32 */
  Density: number;
  /** f32 */
  HFReference: number;
}

export const sizeofXAUDIO2FX_REVERB_I3DL2_PARAMETERS = 56;

export function allocXAUDIO2FX_REVERB_I3DL2_PARAMETERS(data?: Partial<XAUDIO2FX_REVERB_I3DL2_PARAMETERS>): Uint8Array {
  const buf = new Uint8Array(sizeofXAUDIO2FX_REVERB_I3DL2_PARAMETERS);
  const view = new DataView(buf.buffer);
  // 0x00: f32
  if (data?.WetDryMix !== undefined) view.setFloat32(0, Number(data.WetDryMix), true);
  // 0x04: i32
  if (data?.Room !== undefined) view.setInt32(4, Number(data.Room), true);
  // 0x08: i32
  if (data?.RoomHF !== undefined) view.setInt32(8, Number(data.RoomHF), true);
  // 0x0c: f32
  if (data?.RoomRolloffFactor !== undefined) view.setFloat32(12, Number(data.RoomRolloffFactor), true);
  // 0x10: f32
  if (data?.DecayTime !== undefined) view.setFloat32(16, Number(data.DecayTime), true);
  // 0x14: f32
  if (data?.DecayHFRatio !== undefined) view.setFloat32(20, Number(data.DecayHFRatio), true);
  // 0x18: i32
  if (data?.Reflections !== undefined) view.setInt32(24, Number(data.Reflections), true);
  // 0x1c: f32
  if (data?.ReflectionsDelay !== undefined) view.setFloat32(28, Number(data.ReflectionsDelay), true);
  // 0x20: i32
  if (data?.Reverb !== undefined) view.setInt32(32, Number(data.Reverb), true);
  // 0x24: f32
  if (data?.ReverbDelay !== undefined) view.setFloat32(36, Number(data.ReverbDelay), true);
  // 0x28: f32
  if (data?.Diffusion !== undefined) view.setFloat32(40, Number(data.Diffusion), true);
  // 0x2c: f32
  if (data?.Density !== undefined) view.setFloat32(44, Number(data.Density), true);
  // 0x30: f32
  if (data?.HFReference !== undefined) view.setFloat32(48, Number(data.HFReference), true);
  // 0x34: pad4
  return buf;
}

/**
 * Windows.Win32.Media.Audio.XAudio2.HrtfPosition (size: 16)
 */
export interface HrtfPosition {
  /** f32 */
  x: number;
  /** f32 */
  y: number;
  /** f32 */
  z: number;
}

export const sizeofHrtfPosition = 16;

export function allocHrtfPosition(data?: Partial<HrtfPosition>): Uint8Array {
  const buf = new Uint8Array(sizeofHrtfPosition);
  const view = new DataView(buf.buffer);
  // 0x00: f32
  if (data?.x !== undefined) view.setFloat32(0, Number(data.x), true);
  // 0x04: f32
  if (data?.y !== undefined) view.setFloat32(4, Number(data.y), true);
  // 0x08: f32
  if (data?.z !== undefined) view.setFloat32(8, Number(data.z), true);
  // 0x0c: pad4
  return buf;
}

/**
 * Windows.Win32.Media.Audio.XAudio2.HrtfOrientation (size: 8)
 */
export interface HrtfOrientation {
  /** array */
  element: Deno.PointerValue | null;
}

export const sizeofHrtfOrientation = 8;

export function allocHrtfOrientation(data?: Partial<HrtfOrientation>): Uint8Array {
  const buf = new Uint8Array(sizeofHrtfOrientation);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.element !== undefined) view.setBigUint64(0, data.element === null ? 0n : BigInt(util.toPointer(data.element)), true);
  return buf;
}

/**
 * Windows.Win32.Media.Audio.XAudio2.HrtfDirectivity (size: 8)
 */
export interface HrtfDirectivity {
  /** Windows.Win32.Media.Audio.XAudio2.HrtfDirectivityType */
  type: HrtfDirectivityType;
  /** f32 */
  scaling: number;
}

export const sizeofHrtfDirectivity = 8;

export function allocHrtfDirectivity(data?: Partial<HrtfDirectivity>): Uint8Array {
  const buf = new Uint8Array(sizeofHrtfDirectivity);
  const view = new DataView(buf.buffer);
  // 0x00: i32
  if (data?.type !== undefined) view.setInt32(0, Number(data.type), true);
  // 0x04: f32
  if (data?.scaling !== undefined) view.setFloat32(4, Number(data.scaling), true);
  return buf;
}

/**
 * Windows.Win32.Media.Audio.XAudio2.HrtfDirectivityCardioid (size: 16)
 */
export interface HrtfDirectivityCardioid {
  /** Windows.Win32.Media.Audio.XAudio2.HrtfDirectivity */
  directivity: Uint8Array | Deno.PointerValue | null;
  /** f32 */
  order: number;
}

export const sizeofHrtfDirectivityCardioid = 16;

export function allocHrtfDirectivityCardioid(data?: Partial<HrtfDirectivityCardioid>): Uint8Array {
  const buf = new Uint8Array(sizeofHrtfDirectivityCardioid);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.directivity !== undefined) view.setBigUint64(0, data.directivity === null ? 0n : BigInt(util.toPointer(data.directivity)), true);
  // 0x08: f32
  if (data?.order !== undefined) view.setFloat32(8, Number(data.order), true);
  // 0x0c: pad4
  return buf;
}

/**
 * Windows.Win32.Media.Audio.XAudio2.HrtfDirectivityCone (size: 16)
 */
export interface HrtfDirectivityCone {
  /** Windows.Win32.Media.Audio.XAudio2.HrtfDirectivity */
  directivity: Uint8Array | Deno.PointerValue | null;
  /** f32 */
  innerAngle: number;
  /** f32 */
  outerAngle: number;
}

export const sizeofHrtfDirectivityCone = 16;

export function allocHrtfDirectivityCone(data?: Partial<HrtfDirectivityCone>): Uint8Array {
  const buf = new Uint8Array(sizeofHrtfDirectivityCone);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.directivity !== undefined) view.setBigUint64(0, data.directivity === null ? 0n : BigInt(util.toPointer(data.directivity)), true);
  // 0x08: f32
  if (data?.innerAngle !== undefined) view.setFloat32(8, Number(data.innerAngle), true);
  // 0x0c: f32
  if (data?.outerAngle !== undefined) view.setFloat32(12, Number(data.outerAngle), true);
  return buf;
}

/**
 * Windows.Win32.Media.Audio.XAudio2.HrtfDistanceDecay (size: 24)
 */
export interface HrtfDistanceDecay {
  /** Windows.Win32.Media.Audio.XAudio2.HrtfDistanceDecayType */
  type: HrtfDistanceDecayType;
  /** f32 */
  maxGain: number;
  /** f32 */
  minGain: number;
  /** f32 */
  unityGainDistance: number;
  /** f32 */
  cutoffDistance: number;
}

export const sizeofHrtfDistanceDecay = 24;

export function allocHrtfDistanceDecay(data?: Partial<HrtfDistanceDecay>): Uint8Array {
  const buf = new Uint8Array(sizeofHrtfDistanceDecay);
  const view = new DataView(buf.buffer);
  // 0x00: i32
  if (data?.type !== undefined) view.setInt32(0, Number(data.type), true);
  // 0x04: f32
  if (data?.maxGain !== undefined) view.setFloat32(4, Number(data.maxGain), true);
  // 0x08: f32
  if (data?.minGain !== undefined) view.setFloat32(8, Number(data.minGain), true);
  // 0x0c: f32
  if (data?.unityGainDistance !== undefined) view.setFloat32(12, Number(data.unityGainDistance), true);
  // 0x10: f32
  if (data?.cutoffDistance !== undefined) view.setFloat32(16, Number(data.cutoffDistance), true);
  // 0x14: pad4
  return buf;
}

/**
 * Windows.Win32.Media.Audio.XAudio2.HrtfApoInit (size: 16)
 */
export interface HrtfApoInit {
  /** ptr */
  distanceDecay: Deno.PointerValue | Uint8Array | null;
  /** ptr */
  directivity: Deno.PointerValue | Uint8Array | null;
}

export const sizeofHrtfApoInit = 16;

export function allocHrtfApoInit(data?: Partial<HrtfApoInit>): Uint8Array {
  const buf = new Uint8Array(sizeofHrtfApoInit);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.distanceDecay !== undefined) view.setBigUint64(0, data.distanceDecay === null ? 0n : BigInt(util.toPointer(data.distanceDecay)), true);
  // 0x08: pointer
  if (data?.directivity !== undefined) view.setBigUint64(8, data.directivity === null ? 0n : BigInt(util.toPointer(data.directivity)), true);
  return buf;
}

/**
 * Windows.Win32.Media.Audio.ACMSTREAMHEADER (size: 72)
 */
export interface ACMSTREAMHEADER {
  /** u32 */
  cbStruct: number;
  /** u32 */
  fdwStatus: number;
  /** usize */
  dwUser: Deno.PointerValue;
  /** ptr */
  pbSrc: Deno.PointerValue | Uint8Array | null;
  /** u32 */
  cbSrcLength: number;
  /** u32 */
  cbSrcLengthUsed: number;
  /** usize */
  dwSrcUser: Deno.PointerValue;
  /** ptr */
  pbDst: Deno.PointerValue | Uint8Array | null;
  /** u32 */
  cbDstLength: number;
  /** u32 */
  cbDstLengthUsed: number;
  /** usize */
  dwDstUser: Deno.PointerValue;
  /** array */
  dwReservedDriver: Deno.PointerValue | null;
}

export const sizeofACMSTREAMHEADER = 72;

export function allocACMSTREAMHEADER(data?: Partial<ACMSTREAMHEADER>): Uint8Array {
  const buf = new Uint8Array(sizeofACMSTREAMHEADER);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.cbStruct !== undefined) view.setUint32(0, Number(data.cbStruct), true);
  // 0x04: u32
  if (data?.fdwStatus !== undefined) view.setUint32(4, Number(data.fdwStatus), true);
  // 0x08: usize
  if (data?.dwUser !== undefined) view.setBigUint64(8, BigInt(data.dwUser), true);
  // 0x10: pointer
  if (data?.pbSrc !== undefined) view.setBigUint64(16, data.pbSrc === null ? 0n : BigInt(util.toPointer(data.pbSrc)), true);
  // 0x18: u32
  if (data?.cbSrcLength !== undefined) view.setUint32(24, Number(data.cbSrcLength), true);
  // 0x1c: u32
  if (data?.cbSrcLengthUsed !== undefined) view.setUint32(28, Number(data.cbSrcLengthUsed), true);
  // 0x20: usize
  if (data?.dwSrcUser !== undefined) view.setBigUint64(32, BigInt(data.dwSrcUser), true);
  // 0x28: pointer
  if (data?.pbDst !== undefined) view.setBigUint64(40, data.pbDst === null ? 0n : BigInt(util.toPointer(data.pbDst)), true);
  // 0x30: u32
  if (data?.cbDstLength !== undefined) view.setUint32(48, Number(data.cbDstLength), true);
  // 0x34: u32
  if (data?.cbDstLengthUsed !== undefined) view.setUint32(52, Number(data.cbDstLengthUsed), true);
  // 0x38: usize
  if (data?.dwDstUser !== undefined) view.setBigUint64(56, BigInt(data.dwDstUser), true);
  // 0x40: pointer
  if (data?.dwReservedDriver !== undefined) view.setBigUint64(64, data.dwReservedDriver === null ? 0n : BigInt(util.toPointer(data.dwReservedDriver)), true);
  return buf;
}

/**
 * Windows.Win32.Media.Audio.WAVEHDR (size: 48)
 */
export interface WAVEHDR {
  /** Windows.Win32.Foundation.PSTR */
  lpData: string | null | Uint8Array;
  /** u32 */
  dwBufferLength: number;
  /** u32 */
  dwBytesRecorded: number;
  /** usize */
  dwUser: Deno.PointerValue;
  /** u32 */
  dwFlags: number;
  /** u32 */
  dwLoops: number;
  /** ptr */
  lpNext: Deno.PointerValue | Uint8Array | null;
  /** usize */
  reserved: Deno.PointerValue;
}

export const sizeofWAVEHDR = 48;

export function allocWAVEHDR(data?: Partial<WAVEHDR>): Uint8Array {
  const buf = new Uint8Array(sizeofWAVEHDR);
  const view = new DataView(buf.buffer);
  // 0x00: buffer
  if (data?.lpData !== undefined) {
    (buf as any)._f0 = util.pstrToFfi(data.lpData);
    view.setBigUint64(0, (buf as any)._f0 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f0)), true);
  }
  // 0x08: u32
  if (data?.dwBufferLength !== undefined) view.setUint32(8, Number(data.dwBufferLength), true);
  // 0x0c: u32
  if (data?.dwBytesRecorded !== undefined) view.setUint32(12, Number(data.dwBytesRecorded), true);
  // 0x10: usize
  if (data?.dwUser !== undefined) view.setBigUint64(16, BigInt(data.dwUser), true);
  // 0x18: u32
  if (data?.dwFlags !== undefined) view.setUint32(24, Number(data.dwFlags), true);
  // 0x1c: u32
  if (data?.dwLoops !== undefined) view.setUint32(28, Number(data.dwLoops), true);
  // 0x20: pointer
  if (data?.lpNext !== undefined) view.setBigUint64(32, data.lpNext === null ? 0n : BigInt(util.toPointer(data.lpNext)), true);
  // 0x28: usize
  if (data?.reserved !== undefined) view.setBigUint64(40, BigInt(data.reserved), true);
  return buf;
}

/**
 * Windows.Win32.Media.Audio.WAVEOUTCAPSA (size: 32)
 */
export interface WAVEOUTCAPSA {
  /** u16 */
  wMid: number;
  /** u16 */
  wPid: number;
  /** u32 */
  vDriverVersion: number;
  /** array */
  szPname: Deno.PointerValue | null;
  /** u32 */
  dwFormats: number;
  /** u16 */
  wChannels: number;
  /** u16 */
  wReserved1: number;
  /** u32 */
  dwSupport: number;
}

export const sizeofWAVEOUTCAPSA = 32;

export function allocWAVEOUTCAPSA(data?: Partial<WAVEOUTCAPSA>): Uint8Array {
  const buf = new Uint8Array(sizeofWAVEOUTCAPSA);
  const view = new DataView(buf.buffer);
  // 0x00: u16
  if (data?.wMid !== undefined) view.setUint16(0, Number(data.wMid), true);
  // 0x02: u16
  if (data?.wPid !== undefined) view.setUint16(2, Number(data.wPid), true);
  // 0x04: u32
  if (data?.vDriverVersion !== undefined) view.setUint32(4, Number(data.vDriverVersion), true);
  // 0x08: pointer
  if (data?.szPname !== undefined) view.setBigUint64(8, data.szPname === null ? 0n : BigInt(util.toPointer(data.szPname)), true);
  // 0x10: u32
  if (data?.dwFormats !== undefined) view.setUint32(16, Number(data.dwFormats), true);
  // 0x14: u16
  if (data?.wChannels !== undefined) view.setUint16(20, Number(data.wChannels), true);
  // 0x16: u16
  if (data?.wReserved1 !== undefined) view.setUint16(22, Number(data.wReserved1), true);
  // 0x18: u32
  if (data?.dwSupport !== undefined) view.setUint32(24, Number(data.dwSupport), true);
  // 0x1c: pad4
  return buf;
}

/**
 * Windows.Win32.Media.Audio.WAVEOUTCAPSW (size: 32)
 */
export interface WAVEOUTCAPSW {
  /** u16 */
  wMid: number;
  /** u16 */
  wPid: number;
  /** u32 */
  vDriverVersion: number;
  /** array */
  szPname: Deno.PointerValue | null;
  /** u32 */
  dwFormats: number;
  /** u16 */
  wChannels: number;
  /** u16 */
  wReserved1: number;
  /** u32 */
  dwSupport: number;
}

export const sizeofWAVEOUTCAPSW = 32;

export function allocWAVEOUTCAPSW(data?: Partial<WAVEOUTCAPSW>): Uint8Array {
  const buf = new Uint8Array(sizeofWAVEOUTCAPSW);
  const view = new DataView(buf.buffer);
  // 0x00: u16
  if (data?.wMid !== undefined) view.setUint16(0, Number(data.wMid), true);
  // 0x02: u16
  if (data?.wPid !== undefined) view.setUint16(2, Number(data.wPid), true);
  // 0x04: u32
  if (data?.vDriverVersion !== undefined) view.setUint32(4, Number(data.vDriverVersion), true);
  // 0x08: pointer
  if (data?.szPname !== undefined) view.setBigUint64(8, data.szPname === null ? 0n : BigInt(util.toPointer(data.szPname)), true);
  // 0x10: u32
  if (data?.dwFormats !== undefined) view.setUint32(16, Number(data.dwFormats), true);
  // 0x14: u16
  if (data?.wChannels !== undefined) view.setUint16(20, Number(data.wChannels), true);
  // 0x16: u16
  if (data?.wReserved1 !== undefined) view.setUint16(22, Number(data.wReserved1), true);
  // 0x18: u32
  if (data?.dwSupport !== undefined) view.setUint32(24, Number(data.dwSupport), true);
  // 0x1c: pad4
  return buf;
}

/**
 * Windows.Win32.Media.Audio.WAVEOUTCAPS2A (size: 56)
 */
export interface WAVEOUTCAPS2A {
  /** u16 */
  wMid: number;
  /** u16 */
  wPid: number;
  /** u32 */
  vDriverVersion: number;
  /** array */
  szPname: Deno.PointerValue | null;
  /** u32 */
  dwFormats: number;
  /** u16 */
  wChannels: number;
  /** u16 */
  wReserved1: number;
  /** u32 */
  dwSupport: number;
  /** System.Guid */
  ManufacturerGuid: Uint8Array | Deno.PointerValue | null;
  /** System.Guid */
  ProductGuid: Uint8Array | Deno.PointerValue | null;
  /** System.Guid */
  NameGuid: Uint8Array | Deno.PointerValue | null;
}

export const sizeofWAVEOUTCAPS2A = 56;

export function allocWAVEOUTCAPS2A(data?: Partial<WAVEOUTCAPS2A>): Uint8Array {
  const buf = new Uint8Array(sizeofWAVEOUTCAPS2A);
  const view = new DataView(buf.buffer);
  // 0x00: u16
  if (data?.wMid !== undefined) view.setUint16(0, Number(data.wMid), true);
  // 0x02: u16
  if (data?.wPid !== undefined) view.setUint16(2, Number(data.wPid), true);
  // 0x04: u32
  if (data?.vDriverVersion !== undefined) view.setUint32(4, Number(data.vDriverVersion), true);
  // 0x08: pointer
  if (data?.szPname !== undefined) view.setBigUint64(8, data.szPname === null ? 0n : BigInt(util.toPointer(data.szPname)), true);
  // 0x10: u32
  if (data?.dwFormats !== undefined) view.setUint32(16, Number(data.dwFormats), true);
  // 0x14: u16
  if (data?.wChannels !== undefined) view.setUint16(20, Number(data.wChannels), true);
  // 0x16: u16
  if (data?.wReserved1 !== undefined) view.setUint16(22, Number(data.wReserved1), true);
  // 0x18: u32
  if (data?.dwSupport !== undefined) view.setUint32(24, Number(data.dwSupport), true);
  // 0x1c: pad4
  // 0x20: pointer
  if (data?.ManufacturerGuid !== undefined) view.setBigUint64(32, data.ManufacturerGuid === null ? 0n : BigInt(util.toPointer(data.ManufacturerGuid)), true);
  // 0x28: pointer
  if (data?.ProductGuid !== undefined) view.setBigUint64(40, data.ProductGuid === null ? 0n : BigInt(util.toPointer(data.ProductGuid)), true);
  // 0x30: pointer
  if (data?.NameGuid !== undefined) view.setBigUint64(48, data.NameGuid === null ? 0n : BigInt(util.toPointer(data.NameGuid)), true);
  return buf;
}

/**
 * Windows.Win32.Media.Audio.WAVEOUTCAPS2W (size: 56)
 */
export interface WAVEOUTCAPS2W {
  /** u16 */
  wMid: number;
  /** u16 */
  wPid: number;
  /** u32 */
  vDriverVersion: number;
  /** array */
  szPname: Deno.PointerValue | null;
  /** u32 */
  dwFormats: number;
  /** u16 */
  wChannels: number;
  /** u16 */
  wReserved1: number;
  /** u32 */
  dwSupport: number;
  /** System.Guid */
  ManufacturerGuid: Uint8Array | Deno.PointerValue | null;
  /** System.Guid */
  ProductGuid: Uint8Array | Deno.PointerValue | null;
  /** System.Guid */
  NameGuid: Uint8Array | Deno.PointerValue | null;
}

export const sizeofWAVEOUTCAPS2W = 56;

export function allocWAVEOUTCAPS2W(data?: Partial<WAVEOUTCAPS2W>): Uint8Array {
  const buf = new Uint8Array(sizeofWAVEOUTCAPS2W);
  const view = new DataView(buf.buffer);
  // 0x00: u16
  if (data?.wMid !== undefined) view.setUint16(0, Number(data.wMid), true);
  // 0x02: u16
  if (data?.wPid !== undefined) view.setUint16(2, Number(data.wPid), true);
  // 0x04: u32
  if (data?.vDriverVersion !== undefined) view.setUint32(4, Number(data.vDriverVersion), true);
  // 0x08: pointer
  if (data?.szPname !== undefined) view.setBigUint64(8, data.szPname === null ? 0n : BigInt(util.toPointer(data.szPname)), true);
  // 0x10: u32
  if (data?.dwFormats !== undefined) view.setUint32(16, Number(data.dwFormats), true);
  // 0x14: u16
  if (data?.wChannels !== undefined) view.setUint16(20, Number(data.wChannels), true);
  // 0x16: u16
  if (data?.wReserved1 !== undefined) view.setUint16(22, Number(data.wReserved1), true);
  // 0x18: u32
  if (data?.dwSupport !== undefined) view.setUint32(24, Number(data.dwSupport), true);
  // 0x1c: pad4
  // 0x20: pointer
  if (data?.ManufacturerGuid !== undefined) view.setBigUint64(32, data.ManufacturerGuid === null ? 0n : BigInt(util.toPointer(data.ManufacturerGuid)), true);
  // 0x28: pointer
  if (data?.ProductGuid !== undefined) view.setBigUint64(40, data.ProductGuid === null ? 0n : BigInt(util.toPointer(data.ProductGuid)), true);
  // 0x30: pointer
  if (data?.NameGuid !== undefined) view.setBigUint64(48, data.NameGuid === null ? 0n : BigInt(util.toPointer(data.NameGuid)), true);
  return buf;
}

/**
 * Windows.Win32.Media.Audio.WAVEINCAPSA (size: 24)
 */
export interface WAVEINCAPSA {
  /** u16 */
  wMid: number;
  /** u16 */
  wPid: number;
  /** u32 */
  vDriverVersion: number;
  /** array */
  szPname: Deno.PointerValue | null;
  /** u32 */
  dwFormats: number;
  /** u16 */
  wChannels: number;
  /** u16 */
  wReserved1: number;
}

export const sizeofWAVEINCAPSA = 24;

export function allocWAVEINCAPSA(data?: Partial<WAVEINCAPSA>): Uint8Array {
  const buf = new Uint8Array(sizeofWAVEINCAPSA);
  const view = new DataView(buf.buffer);
  // 0x00: u16
  if (data?.wMid !== undefined) view.setUint16(0, Number(data.wMid), true);
  // 0x02: u16
  if (data?.wPid !== undefined) view.setUint16(2, Number(data.wPid), true);
  // 0x04: u32
  if (data?.vDriverVersion !== undefined) view.setUint32(4, Number(data.vDriverVersion), true);
  // 0x08: pointer
  if (data?.szPname !== undefined) view.setBigUint64(8, data.szPname === null ? 0n : BigInt(util.toPointer(data.szPname)), true);
  // 0x10: u32
  if (data?.dwFormats !== undefined) view.setUint32(16, Number(data.dwFormats), true);
  // 0x14: u16
  if (data?.wChannels !== undefined) view.setUint16(20, Number(data.wChannels), true);
  // 0x16: u16
  if (data?.wReserved1 !== undefined) view.setUint16(22, Number(data.wReserved1), true);
  return buf;
}

/**
 * Windows.Win32.Media.Audio.WAVEINCAPSW (size: 24)
 */
export interface WAVEINCAPSW {
  /** u16 */
  wMid: number;
  /** u16 */
  wPid: number;
  /** u32 */
  vDriverVersion: number;
  /** array */
  szPname: Deno.PointerValue | null;
  /** u32 */
  dwFormats: number;
  /** u16 */
  wChannels: number;
  /** u16 */
  wReserved1: number;
}

export const sizeofWAVEINCAPSW = 24;

export function allocWAVEINCAPSW(data?: Partial<WAVEINCAPSW>): Uint8Array {
  const buf = new Uint8Array(sizeofWAVEINCAPSW);
  const view = new DataView(buf.buffer);
  // 0x00: u16
  if (data?.wMid !== undefined) view.setUint16(0, Number(data.wMid), true);
  // 0x02: u16
  if (data?.wPid !== undefined) view.setUint16(2, Number(data.wPid), true);
  // 0x04: u32
  if (data?.vDriverVersion !== undefined) view.setUint32(4, Number(data.vDriverVersion), true);
  // 0x08: pointer
  if (data?.szPname !== undefined) view.setBigUint64(8, data.szPname === null ? 0n : BigInt(util.toPointer(data.szPname)), true);
  // 0x10: u32
  if (data?.dwFormats !== undefined) view.setUint32(16, Number(data.dwFormats), true);
  // 0x14: u16
  if (data?.wChannels !== undefined) view.setUint16(20, Number(data.wChannels), true);
  // 0x16: u16
  if (data?.wReserved1 !== undefined) view.setUint16(22, Number(data.wReserved1), true);
  return buf;
}

/**
 * Windows.Win32.Media.Audio.WAVEINCAPS2A (size: 48)
 */
export interface WAVEINCAPS2A {
  /** u16 */
  wMid: number;
  /** u16 */
  wPid: number;
  /** u32 */
  vDriverVersion: number;
  /** array */
  szPname: Deno.PointerValue | null;
  /** u32 */
  dwFormats: number;
  /** u16 */
  wChannels: number;
  /** u16 */
  wReserved1: number;
  /** System.Guid */
  ManufacturerGuid: Uint8Array | Deno.PointerValue | null;
  /** System.Guid */
  ProductGuid: Uint8Array | Deno.PointerValue | null;
  /** System.Guid */
  NameGuid: Uint8Array | Deno.PointerValue | null;
}

export const sizeofWAVEINCAPS2A = 48;

export function allocWAVEINCAPS2A(data?: Partial<WAVEINCAPS2A>): Uint8Array {
  const buf = new Uint8Array(sizeofWAVEINCAPS2A);
  const view = new DataView(buf.buffer);
  // 0x00: u16
  if (data?.wMid !== undefined) view.setUint16(0, Number(data.wMid), true);
  // 0x02: u16
  if (data?.wPid !== undefined) view.setUint16(2, Number(data.wPid), true);
  // 0x04: u32
  if (data?.vDriverVersion !== undefined) view.setUint32(4, Number(data.vDriverVersion), true);
  // 0x08: pointer
  if (data?.szPname !== undefined) view.setBigUint64(8, data.szPname === null ? 0n : BigInt(util.toPointer(data.szPname)), true);
  // 0x10: u32
  if (data?.dwFormats !== undefined) view.setUint32(16, Number(data.dwFormats), true);
  // 0x14: u16
  if (data?.wChannels !== undefined) view.setUint16(20, Number(data.wChannels), true);
  // 0x16: u16
  if (data?.wReserved1 !== undefined) view.setUint16(22, Number(data.wReserved1), true);
  // 0x18: pointer
  if (data?.ManufacturerGuid !== undefined) view.setBigUint64(24, data.ManufacturerGuid === null ? 0n : BigInt(util.toPointer(data.ManufacturerGuid)), true);
  // 0x20: pointer
  if (data?.ProductGuid !== undefined) view.setBigUint64(32, data.ProductGuid === null ? 0n : BigInt(util.toPointer(data.ProductGuid)), true);
  // 0x28: pointer
  if (data?.NameGuid !== undefined) view.setBigUint64(40, data.NameGuid === null ? 0n : BigInt(util.toPointer(data.NameGuid)), true);
  return buf;
}

/**
 * Windows.Win32.Media.Audio.WAVEINCAPS2W (size: 48)
 */
export interface WAVEINCAPS2W {
  /** u16 */
  wMid: number;
  /** u16 */
  wPid: number;
  /** u32 */
  vDriverVersion: number;
  /** array */
  szPname: Deno.PointerValue | null;
  /** u32 */
  dwFormats: number;
  /** u16 */
  wChannels: number;
  /** u16 */
  wReserved1: number;
  /** System.Guid */
  ManufacturerGuid: Uint8Array | Deno.PointerValue | null;
  /** System.Guid */
  ProductGuid: Uint8Array | Deno.PointerValue | null;
  /** System.Guid */
  NameGuid: Uint8Array | Deno.PointerValue | null;
}

export const sizeofWAVEINCAPS2W = 48;

export function allocWAVEINCAPS2W(data?: Partial<WAVEINCAPS2W>): Uint8Array {
  const buf = new Uint8Array(sizeofWAVEINCAPS2W);
  const view = new DataView(buf.buffer);
  // 0x00: u16
  if (data?.wMid !== undefined) view.setUint16(0, Number(data.wMid), true);
  // 0x02: u16
  if (data?.wPid !== undefined) view.setUint16(2, Number(data.wPid), true);
  // 0x04: u32
  if (data?.vDriverVersion !== undefined) view.setUint32(4, Number(data.vDriverVersion), true);
  // 0x08: pointer
  if (data?.szPname !== undefined) view.setBigUint64(8, data.szPname === null ? 0n : BigInt(util.toPointer(data.szPname)), true);
  // 0x10: u32
  if (data?.dwFormats !== undefined) view.setUint32(16, Number(data.dwFormats), true);
  // 0x14: u16
  if (data?.wChannels !== undefined) view.setUint16(20, Number(data.wChannels), true);
  // 0x16: u16
  if (data?.wReserved1 !== undefined) view.setUint16(22, Number(data.wReserved1), true);
  // 0x18: pointer
  if (data?.ManufacturerGuid !== undefined) view.setBigUint64(24, data.ManufacturerGuid === null ? 0n : BigInt(util.toPointer(data.ManufacturerGuid)), true);
  // 0x20: pointer
  if (data?.ProductGuid !== undefined) view.setBigUint64(32, data.ProductGuid === null ? 0n : BigInt(util.toPointer(data.ProductGuid)), true);
  // 0x28: pointer
  if (data?.NameGuid !== undefined) view.setBigUint64(40, data.NameGuid === null ? 0n : BigInt(util.toPointer(data.NameGuid)), true);
  return buf;
}

/**
 * Windows.Win32.Media.Audio.WAVEFORMAT (size: 16)
 */
export interface WAVEFORMAT {
  /** u16 */
  wFormatTag: number;
  /** u16 */
  nChannels: number;
  /** u32 */
  nSamplesPerSec: number;
  /** u32 */
  nAvgBytesPerSec: number;
  /** u16 */
  nBlockAlign: number;
}

export const sizeofWAVEFORMAT = 16;

export function allocWAVEFORMAT(data?: Partial<WAVEFORMAT>): Uint8Array {
  const buf = new Uint8Array(sizeofWAVEFORMAT);
  const view = new DataView(buf.buffer);
  // 0x00: u16
  if (data?.wFormatTag !== undefined) view.setUint16(0, Number(data.wFormatTag), true);
  // 0x02: u16
  if (data?.nChannels !== undefined) view.setUint16(2, Number(data.nChannels), true);
  // 0x04: u32
  if (data?.nSamplesPerSec !== undefined) view.setUint32(4, Number(data.nSamplesPerSec), true);
  // 0x08: u32
  if (data?.nAvgBytesPerSec !== undefined) view.setUint32(8, Number(data.nAvgBytesPerSec), true);
  // 0x0c: u16
  if (data?.nBlockAlign !== undefined) view.setUint16(12, Number(data.nBlockAlign), true);
  // 0x0e: pad2
  return buf;
}

/**
 * Windows.Win32.Media.Audio.PCMWAVEFORMAT (size: 16)
 */
export interface PCMWAVEFORMAT {
  /** Windows.Win32.Media.Audio.WAVEFORMAT */
  wf: Uint8Array | Deno.PointerValue | null;
  /** u16 */
  wBitsPerSample: number;
}

export const sizeofPCMWAVEFORMAT = 16;

export function allocPCMWAVEFORMAT(data?: Partial<PCMWAVEFORMAT>): Uint8Array {
  const buf = new Uint8Array(sizeofPCMWAVEFORMAT);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.wf !== undefined) view.setBigUint64(0, data.wf === null ? 0n : BigInt(util.toPointer(data.wf)), true);
  // 0x08: u16
  if (data?.wBitsPerSample !== undefined) view.setUint16(8, Number(data.wBitsPerSample), true);
  // 0x0a: pad6
  return buf;
}

/**
 * Windows.Win32.Media.Audio.MIDIOUTCAPSA (size: 32)
 */
export interface MIDIOUTCAPSA {
  /** u16 */
  wMid: number;
  /** u16 */
  wPid: number;
  /** u32 */
  vDriverVersion: number;
  /** array */
  szPname: Deno.PointerValue | null;
  /** u16 */
  wTechnology: number;
  /** u16 */
  wVoices: number;
  /** u16 */
  wNotes: number;
  /** u16 */
  wChannelMask: number;
  /** u32 */
  dwSupport: number;
}

export const sizeofMIDIOUTCAPSA = 32;

export function allocMIDIOUTCAPSA(data?: Partial<MIDIOUTCAPSA>): Uint8Array {
  const buf = new Uint8Array(sizeofMIDIOUTCAPSA);
  const view = new DataView(buf.buffer);
  // 0x00: u16
  if (data?.wMid !== undefined) view.setUint16(0, Number(data.wMid), true);
  // 0x02: u16
  if (data?.wPid !== undefined) view.setUint16(2, Number(data.wPid), true);
  // 0x04: u32
  if (data?.vDriverVersion !== undefined) view.setUint32(4, Number(data.vDriverVersion), true);
  // 0x08: pointer
  if (data?.szPname !== undefined) view.setBigUint64(8, data.szPname === null ? 0n : BigInt(util.toPointer(data.szPname)), true);
  // 0x10: u16
  if (data?.wTechnology !== undefined) view.setUint16(16, Number(data.wTechnology), true);
  // 0x12: u16
  if (data?.wVoices !== undefined) view.setUint16(18, Number(data.wVoices), true);
  // 0x14: u16
  if (data?.wNotes !== undefined) view.setUint16(20, Number(data.wNotes), true);
  // 0x16: u16
  if (data?.wChannelMask !== undefined) view.setUint16(22, Number(data.wChannelMask), true);
  // 0x18: u32
  if (data?.dwSupport !== undefined) view.setUint32(24, Number(data.dwSupport), true);
  // 0x1c: pad4
  return buf;
}

/**
 * Windows.Win32.Media.Audio.MIDIOUTCAPSW (size: 32)
 */
export interface MIDIOUTCAPSW {
  /** u16 */
  wMid: number;
  /** u16 */
  wPid: number;
  /** u32 */
  vDriverVersion: number;
  /** array */
  szPname: Deno.PointerValue | null;
  /** u16 */
  wTechnology: number;
  /** u16 */
  wVoices: number;
  /** u16 */
  wNotes: number;
  /** u16 */
  wChannelMask: number;
  /** u32 */
  dwSupport: number;
}

export const sizeofMIDIOUTCAPSW = 32;

export function allocMIDIOUTCAPSW(data?: Partial<MIDIOUTCAPSW>): Uint8Array {
  const buf = new Uint8Array(sizeofMIDIOUTCAPSW);
  const view = new DataView(buf.buffer);
  // 0x00: u16
  if (data?.wMid !== undefined) view.setUint16(0, Number(data.wMid), true);
  // 0x02: u16
  if (data?.wPid !== undefined) view.setUint16(2, Number(data.wPid), true);
  // 0x04: u32
  if (data?.vDriverVersion !== undefined) view.setUint32(4, Number(data.vDriverVersion), true);
  // 0x08: pointer
  if (data?.szPname !== undefined) view.setBigUint64(8, data.szPname === null ? 0n : BigInt(util.toPointer(data.szPname)), true);
  // 0x10: u16
  if (data?.wTechnology !== undefined) view.setUint16(16, Number(data.wTechnology), true);
  // 0x12: u16
  if (data?.wVoices !== undefined) view.setUint16(18, Number(data.wVoices), true);
  // 0x14: u16
  if (data?.wNotes !== undefined) view.setUint16(20, Number(data.wNotes), true);
  // 0x16: u16
  if (data?.wChannelMask !== undefined) view.setUint16(22, Number(data.wChannelMask), true);
  // 0x18: u32
  if (data?.dwSupport !== undefined) view.setUint32(24, Number(data.dwSupport), true);
  // 0x1c: pad4
  return buf;
}

/**
 * Windows.Win32.Media.Audio.MIDIOUTCAPS2A (size: 56)
 */
export interface MIDIOUTCAPS2A {
  /** u16 */
  wMid: number;
  /** u16 */
  wPid: number;
  /** u32 */
  vDriverVersion: number;
  /** array */
  szPname: Deno.PointerValue | null;
  /** u16 */
  wTechnology: number;
  /** u16 */
  wVoices: number;
  /** u16 */
  wNotes: number;
  /** u16 */
  wChannelMask: number;
  /** u32 */
  dwSupport: number;
  /** System.Guid */
  ManufacturerGuid: Uint8Array | Deno.PointerValue | null;
  /** System.Guid */
  ProductGuid: Uint8Array | Deno.PointerValue | null;
  /** System.Guid */
  NameGuid: Uint8Array | Deno.PointerValue | null;
}

export const sizeofMIDIOUTCAPS2A = 56;

export function allocMIDIOUTCAPS2A(data?: Partial<MIDIOUTCAPS2A>): Uint8Array {
  const buf = new Uint8Array(sizeofMIDIOUTCAPS2A);
  const view = new DataView(buf.buffer);
  // 0x00: u16
  if (data?.wMid !== undefined) view.setUint16(0, Number(data.wMid), true);
  // 0x02: u16
  if (data?.wPid !== undefined) view.setUint16(2, Number(data.wPid), true);
  // 0x04: u32
  if (data?.vDriverVersion !== undefined) view.setUint32(4, Number(data.vDriverVersion), true);
  // 0x08: pointer
  if (data?.szPname !== undefined) view.setBigUint64(8, data.szPname === null ? 0n : BigInt(util.toPointer(data.szPname)), true);
  // 0x10: u16
  if (data?.wTechnology !== undefined) view.setUint16(16, Number(data.wTechnology), true);
  // 0x12: u16
  if (data?.wVoices !== undefined) view.setUint16(18, Number(data.wVoices), true);
  // 0x14: u16
  if (data?.wNotes !== undefined) view.setUint16(20, Number(data.wNotes), true);
  // 0x16: u16
  if (data?.wChannelMask !== undefined) view.setUint16(22, Number(data.wChannelMask), true);
  // 0x18: u32
  if (data?.dwSupport !== undefined) view.setUint32(24, Number(data.dwSupport), true);
  // 0x1c: pad4
  // 0x20: pointer
  if (data?.ManufacturerGuid !== undefined) view.setBigUint64(32, data.ManufacturerGuid === null ? 0n : BigInt(util.toPointer(data.ManufacturerGuid)), true);
  // 0x28: pointer
  if (data?.ProductGuid !== undefined) view.setBigUint64(40, data.ProductGuid === null ? 0n : BigInt(util.toPointer(data.ProductGuid)), true);
  // 0x30: pointer
  if (data?.NameGuid !== undefined) view.setBigUint64(48, data.NameGuid === null ? 0n : BigInt(util.toPointer(data.NameGuid)), true);
  return buf;
}

/**
 * Windows.Win32.Media.Audio.MIDIOUTCAPS2W (size: 56)
 */
export interface MIDIOUTCAPS2W {
  /** u16 */
  wMid: number;
  /** u16 */
  wPid: number;
  /** u32 */
  vDriverVersion: number;
  /** array */
  szPname: Deno.PointerValue | null;
  /** u16 */
  wTechnology: number;
  /** u16 */
  wVoices: number;
  /** u16 */
  wNotes: number;
  /** u16 */
  wChannelMask: number;
  /** u32 */
  dwSupport: number;
  /** System.Guid */
  ManufacturerGuid: Uint8Array | Deno.PointerValue | null;
  /** System.Guid */
  ProductGuid: Uint8Array | Deno.PointerValue | null;
  /** System.Guid */
  NameGuid: Uint8Array | Deno.PointerValue | null;
}

export const sizeofMIDIOUTCAPS2W = 56;

export function allocMIDIOUTCAPS2W(data?: Partial<MIDIOUTCAPS2W>): Uint8Array {
  const buf = new Uint8Array(sizeofMIDIOUTCAPS2W);
  const view = new DataView(buf.buffer);
  // 0x00: u16
  if (data?.wMid !== undefined) view.setUint16(0, Number(data.wMid), true);
  // 0x02: u16
  if (data?.wPid !== undefined) view.setUint16(2, Number(data.wPid), true);
  // 0x04: u32
  if (data?.vDriverVersion !== undefined) view.setUint32(4, Number(data.vDriverVersion), true);
  // 0x08: pointer
  if (data?.szPname !== undefined) view.setBigUint64(8, data.szPname === null ? 0n : BigInt(util.toPointer(data.szPname)), true);
  // 0x10: u16
  if (data?.wTechnology !== undefined) view.setUint16(16, Number(data.wTechnology), true);
  // 0x12: u16
  if (data?.wVoices !== undefined) view.setUint16(18, Number(data.wVoices), true);
  // 0x14: u16
  if (data?.wNotes !== undefined) view.setUint16(20, Number(data.wNotes), true);
  // 0x16: u16
  if (data?.wChannelMask !== undefined) view.setUint16(22, Number(data.wChannelMask), true);
  // 0x18: u32
  if (data?.dwSupport !== undefined) view.setUint32(24, Number(data.dwSupport), true);
  // 0x1c: pad4
  // 0x20: pointer
  if (data?.ManufacturerGuid !== undefined) view.setBigUint64(32, data.ManufacturerGuid === null ? 0n : BigInt(util.toPointer(data.ManufacturerGuid)), true);
  // 0x28: pointer
  if (data?.ProductGuid !== undefined) view.setBigUint64(40, data.ProductGuid === null ? 0n : BigInt(util.toPointer(data.ProductGuid)), true);
  // 0x30: pointer
  if (data?.NameGuid !== undefined) view.setBigUint64(48, data.NameGuid === null ? 0n : BigInt(util.toPointer(data.NameGuid)), true);
  return buf;
}

/**
 * Windows.Win32.Media.Audio.MIDIINCAPSA (size: 24)
 */
export interface MIDIINCAPSA {
  /** u16 */
  wMid: number;
  /** u16 */
  wPid: number;
  /** u32 */
  vDriverVersion: number;
  /** array */
  szPname: Deno.PointerValue | null;
  /** u32 */
  dwSupport: number;
}

export const sizeofMIDIINCAPSA = 24;

export function allocMIDIINCAPSA(data?: Partial<MIDIINCAPSA>): Uint8Array {
  const buf = new Uint8Array(sizeofMIDIINCAPSA);
  const view = new DataView(buf.buffer);
  // 0x00: u16
  if (data?.wMid !== undefined) view.setUint16(0, Number(data.wMid), true);
  // 0x02: u16
  if (data?.wPid !== undefined) view.setUint16(2, Number(data.wPid), true);
  // 0x04: u32
  if (data?.vDriverVersion !== undefined) view.setUint32(4, Number(data.vDriverVersion), true);
  // 0x08: pointer
  if (data?.szPname !== undefined) view.setBigUint64(8, data.szPname === null ? 0n : BigInt(util.toPointer(data.szPname)), true);
  // 0x10: u32
  if (data?.dwSupport !== undefined) view.setUint32(16, Number(data.dwSupport), true);
  // 0x14: pad4
  return buf;
}

/**
 * Windows.Win32.Media.Audio.MIDIINCAPSW (size: 24)
 */
export interface MIDIINCAPSW {
  /** u16 */
  wMid: number;
  /** u16 */
  wPid: number;
  /** u32 */
  vDriverVersion: number;
  /** array */
  szPname: Deno.PointerValue | null;
  /** u32 */
  dwSupport: number;
}

export const sizeofMIDIINCAPSW = 24;

export function allocMIDIINCAPSW(data?: Partial<MIDIINCAPSW>): Uint8Array {
  const buf = new Uint8Array(sizeofMIDIINCAPSW);
  const view = new DataView(buf.buffer);
  // 0x00: u16
  if (data?.wMid !== undefined) view.setUint16(0, Number(data.wMid), true);
  // 0x02: u16
  if (data?.wPid !== undefined) view.setUint16(2, Number(data.wPid), true);
  // 0x04: u32
  if (data?.vDriverVersion !== undefined) view.setUint32(4, Number(data.vDriverVersion), true);
  // 0x08: pointer
  if (data?.szPname !== undefined) view.setBigUint64(8, data.szPname === null ? 0n : BigInt(util.toPointer(data.szPname)), true);
  // 0x10: u32
  if (data?.dwSupport !== undefined) view.setUint32(16, Number(data.dwSupport), true);
  // 0x14: pad4
  return buf;
}

/**
 * Windows.Win32.Media.Audio.MIDIINCAPS2A (size: 48)
 */
export interface MIDIINCAPS2A {
  /** u16 */
  wMid: number;
  /** u16 */
  wPid: number;
  /** u32 */
  vDriverVersion: number;
  /** array */
  szPname: Deno.PointerValue | null;
  /** u32 */
  dwSupport: number;
  /** System.Guid */
  ManufacturerGuid: Uint8Array | Deno.PointerValue | null;
  /** System.Guid */
  ProductGuid: Uint8Array | Deno.PointerValue | null;
  /** System.Guid */
  NameGuid: Uint8Array | Deno.PointerValue | null;
}

export const sizeofMIDIINCAPS2A = 48;

export function allocMIDIINCAPS2A(data?: Partial<MIDIINCAPS2A>): Uint8Array {
  const buf = new Uint8Array(sizeofMIDIINCAPS2A);
  const view = new DataView(buf.buffer);
  // 0x00: u16
  if (data?.wMid !== undefined) view.setUint16(0, Number(data.wMid), true);
  // 0x02: u16
  if (data?.wPid !== undefined) view.setUint16(2, Number(data.wPid), true);
  // 0x04: u32
  if (data?.vDriverVersion !== undefined) view.setUint32(4, Number(data.vDriverVersion), true);
  // 0x08: pointer
  if (data?.szPname !== undefined) view.setBigUint64(8, data.szPname === null ? 0n : BigInt(util.toPointer(data.szPname)), true);
  // 0x10: u32
  if (data?.dwSupport !== undefined) view.setUint32(16, Number(data.dwSupport), true);
  // 0x14: pad4
  // 0x18: pointer
  if (data?.ManufacturerGuid !== undefined) view.setBigUint64(24, data.ManufacturerGuid === null ? 0n : BigInt(util.toPointer(data.ManufacturerGuid)), true);
  // 0x20: pointer
  if (data?.ProductGuid !== undefined) view.setBigUint64(32, data.ProductGuid === null ? 0n : BigInt(util.toPointer(data.ProductGuid)), true);
  // 0x28: pointer
  if (data?.NameGuid !== undefined) view.setBigUint64(40, data.NameGuid === null ? 0n : BigInt(util.toPointer(data.NameGuid)), true);
  return buf;
}

/**
 * Windows.Win32.Media.Audio.MIDIINCAPS2W (size: 48)
 */
export interface MIDIINCAPS2W {
  /** u16 */
  wMid: number;
  /** u16 */
  wPid: number;
  /** u32 */
  vDriverVersion: number;
  /** array */
  szPname: Deno.PointerValue | null;
  /** u32 */
  dwSupport: number;
  /** System.Guid */
  ManufacturerGuid: Uint8Array | Deno.PointerValue | null;
  /** System.Guid */
  ProductGuid: Uint8Array | Deno.PointerValue | null;
  /** System.Guid */
  NameGuid: Uint8Array | Deno.PointerValue | null;
}

export const sizeofMIDIINCAPS2W = 48;

export function allocMIDIINCAPS2W(data?: Partial<MIDIINCAPS2W>): Uint8Array {
  const buf = new Uint8Array(sizeofMIDIINCAPS2W);
  const view = new DataView(buf.buffer);
  // 0x00: u16
  if (data?.wMid !== undefined) view.setUint16(0, Number(data.wMid), true);
  // 0x02: u16
  if (data?.wPid !== undefined) view.setUint16(2, Number(data.wPid), true);
  // 0x04: u32
  if (data?.vDriverVersion !== undefined) view.setUint32(4, Number(data.vDriverVersion), true);
  // 0x08: pointer
  if (data?.szPname !== undefined) view.setBigUint64(8, data.szPname === null ? 0n : BigInt(util.toPointer(data.szPname)), true);
  // 0x10: u32
  if (data?.dwSupport !== undefined) view.setUint32(16, Number(data.dwSupport), true);
  // 0x14: pad4
  // 0x18: pointer
  if (data?.ManufacturerGuid !== undefined) view.setBigUint64(24, data.ManufacturerGuid === null ? 0n : BigInt(util.toPointer(data.ManufacturerGuid)), true);
  // 0x20: pointer
  if (data?.ProductGuid !== undefined) view.setBigUint64(32, data.ProductGuid === null ? 0n : BigInt(util.toPointer(data.ProductGuid)), true);
  // 0x28: pointer
  if (data?.NameGuid !== undefined) view.setBigUint64(40, data.NameGuid === null ? 0n : BigInt(util.toPointer(data.NameGuid)), true);
  return buf;
}

/**
 * Windows.Win32.Media.Audio.MIDIHDR (size: 64)
 */
export interface MIDIHDR {
  /** Windows.Win32.Foundation.PSTR */
  lpData: string | null | Uint8Array;
  /** u32 */
  dwBufferLength: number;
  /** u32 */
  dwBytesRecorded: number;
  /** usize */
  dwUser: Deno.PointerValue;
  /** u32 */
  dwFlags: number;
  /** ptr */
  lpNext: Deno.PointerValue | Uint8Array | null;
  /** usize */
  reserved: Deno.PointerValue;
  /** u32 */
  dwOffset: number;
  /** array */
  dwReserved: Deno.PointerValue | null;
}

export const sizeofMIDIHDR = 64;

export function allocMIDIHDR(data?: Partial<MIDIHDR>): Uint8Array {
  const buf = new Uint8Array(sizeofMIDIHDR);
  const view = new DataView(buf.buffer);
  // 0x00: buffer
  if (data?.lpData !== undefined) {
    (buf as any)._f0 = util.pstrToFfi(data.lpData);
    view.setBigUint64(0, (buf as any)._f0 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f0)), true);
  }
  // 0x08: u32
  if (data?.dwBufferLength !== undefined) view.setUint32(8, Number(data.dwBufferLength), true);
  // 0x0c: u32
  if (data?.dwBytesRecorded !== undefined) view.setUint32(12, Number(data.dwBytesRecorded), true);
  // 0x10: usize
  if (data?.dwUser !== undefined) view.setBigUint64(16, BigInt(data.dwUser), true);
  // 0x18: u32
  if (data?.dwFlags !== undefined) view.setUint32(24, Number(data.dwFlags), true);
  // 0x1c: pad4
  // 0x20: pointer
  if (data?.lpNext !== undefined) view.setBigUint64(32, data.lpNext === null ? 0n : BigInt(util.toPointer(data.lpNext)), true);
  // 0x28: usize
  if (data?.reserved !== undefined) view.setBigUint64(40, BigInt(data.reserved), true);
  // 0x30: u32
  if (data?.dwOffset !== undefined) view.setUint32(48, Number(data.dwOffset), true);
  // 0x34: pad4
  // 0x38: pointer
  if (data?.dwReserved !== undefined) view.setBigUint64(56, data.dwReserved === null ? 0n : BigInt(util.toPointer(data.dwReserved)), true);
  return buf;
}

/**
 * Windows.Win32.Media.Audio.MIDIEVENT (size: 24)
 */
export interface MIDIEVENT {
  /** u32 */
  dwDeltaTime: number;
  /** u32 */
  dwStreamID: number;
  /** u32 */
  dwEvent: number;
  /** array */
  dwParms: Deno.PointerValue | null;
}

export const sizeofMIDIEVENT = 24;

export function allocMIDIEVENT(data?: Partial<MIDIEVENT>): Uint8Array {
  const buf = new Uint8Array(sizeofMIDIEVENT);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.dwDeltaTime !== undefined) view.setUint32(0, Number(data.dwDeltaTime), true);
  // 0x04: u32
  if (data?.dwStreamID !== undefined) view.setUint32(4, Number(data.dwStreamID), true);
  // 0x08: u32
  if (data?.dwEvent !== undefined) view.setUint32(8, Number(data.dwEvent), true);
  // 0x0c: pad4
  // 0x10: pointer
  if (data?.dwParms !== undefined) view.setBigUint64(16, data.dwParms === null ? 0n : BigInt(util.toPointer(data.dwParms)), true);
  return buf;
}

/**
 * Windows.Win32.Media.Audio.MIDISTRMBUFFVER (size: 16)
 */
export interface MIDISTRMBUFFVER {
  /** u32 */
  dwVersion: number;
  /** u32 */
  dwMid: number;
  /** u32 */
  dwOEMVersion: number;
}

export const sizeofMIDISTRMBUFFVER = 16;

export function allocMIDISTRMBUFFVER(data?: Partial<MIDISTRMBUFFVER>): Uint8Array {
  const buf = new Uint8Array(sizeofMIDISTRMBUFFVER);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.dwVersion !== undefined) view.setUint32(0, Number(data.dwVersion), true);
  // 0x04: u32
  if (data?.dwMid !== undefined) view.setUint32(4, Number(data.dwMid), true);
  // 0x08: u32
  if (data?.dwOEMVersion !== undefined) view.setUint32(8, Number(data.dwOEMVersion), true);
  // 0x0c: pad4
  return buf;
}

/**
 * Windows.Win32.Media.Audio.MIDIPROPTIMEDIV (size: 8)
 */
export interface MIDIPROPTIMEDIV {
  /** u32 */
  cbStruct: number;
  /** u32 */
  dwTimeDiv: number;
}

export const sizeofMIDIPROPTIMEDIV = 8;

export function allocMIDIPROPTIMEDIV(data?: Partial<MIDIPROPTIMEDIV>): Uint8Array {
  const buf = new Uint8Array(sizeofMIDIPROPTIMEDIV);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.cbStruct !== undefined) view.setUint32(0, Number(data.cbStruct), true);
  // 0x04: u32
  if (data?.dwTimeDiv !== undefined) view.setUint32(4, Number(data.dwTimeDiv), true);
  return buf;
}

/**
 * Windows.Win32.Media.Audio.MIDIPROPTEMPO (size: 8)
 */
export interface MIDIPROPTEMPO {
  /** u32 */
  cbStruct: number;
  /** u32 */
  dwTempo: number;
}

export const sizeofMIDIPROPTEMPO = 8;

export function allocMIDIPROPTEMPO(data?: Partial<MIDIPROPTEMPO>): Uint8Array {
  const buf = new Uint8Array(sizeofMIDIPROPTEMPO);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.cbStruct !== undefined) view.setUint32(0, Number(data.cbStruct), true);
  // 0x04: u32
  if (data?.dwTempo !== undefined) view.setUint32(4, Number(data.dwTempo), true);
  return buf;
}

/**
 * Windows.Win32.Media.Audio.AUXCAPSA (size: 24)
 */
export interface AUXCAPSA {
  /** u16 */
  wMid: number;
  /** u16 */
  wPid: number;
  /** u32 */
  vDriverVersion: number;
  /** array */
  szPname: Deno.PointerValue | null;
  /** u16 */
  wTechnology: number;
  /** u16 */
  wReserved1: number;
  /** u32 */
  dwSupport: number;
}

export const sizeofAUXCAPSA = 24;

export function allocAUXCAPSA(data?: Partial<AUXCAPSA>): Uint8Array {
  const buf = new Uint8Array(sizeofAUXCAPSA);
  const view = new DataView(buf.buffer);
  // 0x00: u16
  if (data?.wMid !== undefined) view.setUint16(0, Number(data.wMid), true);
  // 0x02: u16
  if (data?.wPid !== undefined) view.setUint16(2, Number(data.wPid), true);
  // 0x04: u32
  if (data?.vDriverVersion !== undefined) view.setUint32(4, Number(data.vDriverVersion), true);
  // 0x08: pointer
  if (data?.szPname !== undefined) view.setBigUint64(8, data.szPname === null ? 0n : BigInt(util.toPointer(data.szPname)), true);
  // 0x10: u16
  if (data?.wTechnology !== undefined) view.setUint16(16, Number(data.wTechnology), true);
  // 0x12: u16
  if (data?.wReserved1 !== undefined) view.setUint16(18, Number(data.wReserved1), true);
  // 0x14: u32
  if (data?.dwSupport !== undefined) view.setUint32(20, Number(data.dwSupport), true);
  return buf;
}

/**
 * Windows.Win32.Media.Audio.AUXCAPSW (size: 24)
 */
export interface AUXCAPSW {
  /** u16 */
  wMid: number;
  /** u16 */
  wPid: number;
  /** u32 */
  vDriverVersion: number;
  /** array */
  szPname: Deno.PointerValue | null;
  /** u16 */
  wTechnology: number;
  /** u16 */
  wReserved1: number;
  /** u32 */
  dwSupport: number;
}

export const sizeofAUXCAPSW = 24;

export function allocAUXCAPSW(data?: Partial<AUXCAPSW>): Uint8Array {
  const buf = new Uint8Array(sizeofAUXCAPSW);
  const view = new DataView(buf.buffer);
  // 0x00: u16
  if (data?.wMid !== undefined) view.setUint16(0, Number(data.wMid), true);
  // 0x02: u16
  if (data?.wPid !== undefined) view.setUint16(2, Number(data.wPid), true);
  // 0x04: u32
  if (data?.vDriverVersion !== undefined) view.setUint32(4, Number(data.vDriverVersion), true);
  // 0x08: pointer
  if (data?.szPname !== undefined) view.setBigUint64(8, data.szPname === null ? 0n : BigInt(util.toPointer(data.szPname)), true);
  // 0x10: u16
  if (data?.wTechnology !== undefined) view.setUint16(16, Number(data.wTechnology), true);
  // 0x12: u16
  if (data?.wReserved1 !== undefined) view.setUint16(18, Number(data.wReserved1), true);
  // 0x14: u32
  if (data?.dwSupport !== undefined) view.setUint32(20, Number(data.dwSupport), true);
  return buf;
}

/**
 * Windows.Win32.Media.Audio.AUXCAPS2A (size: 48)
 */
export interface AUXCAPS2A {
  /** u16 */
  wMid: number;
  /** u16 */
  wPid: number;
  /** u32 */
  vDriverVersion: number;
  /** array */
  szPname: Deno.PointerValue | null;
  /** u16 */
  wTechnology: number;
  /** u16 */
  wReserved1: number;
  /** u32 */
  dwSupport: number;
  /** System.Guid */
  ManufacturerGuid: Uint8Array | Deno.PointerValue | null;
  /** System.Guid */
  ProductGuid: Uint8Array | Deno.PointerValue | null;
  /** System.Guid */
  NameGuid: Uint8Array | Deno.PointerValue | null;
}

export const sizeofAUXCAPS2A = 48;

export function allocAUXCAPS2A(data?: Partial<AUXCAPS2A>): Uint8Array {
  const buf = new Uint8Array(sizeofAUXCAPS2A);
  const view = new DataView(buf.buffer);
  // 0x00: u16
  if (data?.wMid !== undefined) view.setUint16(0, Number(data.wMid), true);
  // 0x02: u16
  if (data?.wPid !== undefined) view.setUint16(2, Number(data.wPid), true);
  // 0x04: u32
  if (data?.vDriverVersion !== undefined) view.setUint32(4, Number(data.vDriverVersion), true);
  // 0x08: pointer
  if (data?.szPname !== undefined) view.setBigUint64(8, data.szPname === null ? 0n : BigInt(util.toPointer(data.szPname)), true);
  // 0x10: u16
  if (data?.wTechnology !== undefined) view.setUint16(16, Number(data.wTechnology), true);
  // 0x12: u16
  if (data?.wReserved1 !== undefined) view.setUint16(18, Number(data.wReserved1), true);
  // 0x14: u32
  if (data?.dwSupport !== undefined) view.setUint32(20, Number(data.dwSupport), true);
  // 0x18: pointer
  if (data?.ManufacturerGuid !== undefined) view.setBigUint64(24, data.ManufacturerGuid === null ? 0n : BigInt(util.toPointer(data.ManufacturerGuid)), true);
  // 0x20: pointer
  if (data?.ProductGuid !== undefined) view.setBigUint64(32, data.ProductGuid === null ? 0n : BigInt(util.toPointer(data.ProductGuid)), true);
  // 0x28: pointer
  if (data?.NameGuid !== undefined) view.setBigUint64(40, data.NameGuid === null ? 0n : BigInt(util.toPointer(data.NameGuid)), true);
  return buf;
}

/**
 * Windows.Win32.Media.Audio.AUXCAPS2W (size: 48)
 */
export interface AUXCAPS2W {
  /** u16 */
  wMid: number;
  /** u16 */
  wPid: number;
  /** u32 */
  vDriverVersion: number;
  /** array */
  szPname: Deno.PointerValue | null;
  /** u16 */
  wTechnology: number;
  /** u16 */
  wReserved1: number;
  /** u32 */
  dwSupport: number;
  /** System.Guid */
  ManufacturerGuid: Uint8Array | Deno.PointerValue | null;
  /** System.Guid */
  ProductGuid: Uint8Array | Deno.PointerValue | null;
  /** System.Guid */
  NameGuid: Uint8Array | Deno.PointerValue | null;
}

export const sizeofAUXCAPS2W = 48;

export function allocAUXCAPS2W(data?: Partial<AUXCAPS2W>): Uint8Array {
  const buf = new Uint8Array(sizeofAUXCAPS2W);
  const view = new DataView(buf.buffer);
  // 0x00: u16
  if (data?.wMid !== undefined) view.setUint16(0, Number(data.wMid), true);
  // 0x02: u16
  if (data?.wPid !== undefined) view.setUint16(2, Number(data.wPid), true);
  // 0x04: u32
  if (data?.vDriverVersion !== undefined) view.setUint32(4, Number(data.vDriverVersion), true);
  // 0x08: pointer
  if (data?.szPname !== undefined) view.setBigUint64(8, data.szPname === null ? 0n : BigInt(util.toPointer(data.szPname)), true);
  // 0x10: u16
  if (data?.wTechnology !== undefined) view.setUint16(16, Number(data.wTechnology), true);
  // 0x12: u16
  if (data?.wReserved1 !== undefined) view.setUint16(18, Number(data.wReserved1), true);
  // 0x14: u32
  if (data?.dwSupport !== undefined) view.setUint32(20, Number(data.dwSupport), true);
  // 0x18: pointer
  if (data?.ManufacturerGuid !== undefined) view.setBigUint64(24, data.ManufacturerGuid === null ? 0n : BigInt(util.toPointer(data.ManufacturerGuid)), true);
  // 0x20: pointer
  if (data?.ProductGuid !== undefined) view.setBigUint64(32, data.ProductGuid === null ? 0n : BigInt(util.toPointer(data.ProductGuid)), true);
  // 0x28: pointer
  if (data?.NameGuid !== undefined) view.setBigUint64(40, data.NameGuid === null ? 0n : BigInt(util.toPointer(data.NameGuid)), true);
  return buf;
}

/**
 * Windows.Win32.Media.Audio.MIXERCAPSA (size: 24)
 */
export interface MIXERCAPSA {
  /** u16 */
  wMid: number;
  /** u16 */
  wPid: number;
  /** u32 */
  vDriverVersion: number;
  /** array */
  szPname: Deno.PointerValue | null;
  /** u32 */
  fdwSupport: number;
  /** u32 */
  cDestinations: number;
}

export const sizeofMIXERCAPSA = 24;

export function allocMIXERCAPSA(data?: Partial<MIXERCAPSA>): Uint8Array {
  const buf = new Uint8Array(sizeofMIXERCAPSA);
  const view = new DataView(buf.buffer);
  // 0x00: u16
  if (data?.wMid !== undefined) view.setUint16(0, Number(data.wMid), true);
  // 0x02: u16
  if (data?.wPid !== undefined) view.setUint16(2, Number(data.wPid), true);
  // 0x04: u32
  if (data?.vDriverVersion !== undefined) view.setUint32(4, Number(data.vDriverVersion), true);
  // 0x08: pointer
  if (data?.szPname !== undefined) view.setBigUint64(8, data.szPname === null ? 0n : BigInt(util.toPointer(data.szPname)), true);
  // 0x10: u32
  if (data?.fdwSupport !== undefined) view.setUint32(16, Number(data.fdwSupport), true);
  // 0x14: u32
  if (data?.cDestinations !== undefined) view.setUint32(20, Number(data.cDestinations), true);
  return buf;
}

/**
 * Windows.Win32.Media.Audio.MIXERCAPSW (size: 24)
 */
export interface MIXERCAPSW {
  /** u16 */
  wMid: number;
  /** u16 */
  wPid: number;
  /** u32 */
  vDriverVersion: number;
  /** array */
  szPname: Deno.PointerValue | null;
  /** u32 */
  fdwSupport: number;
  /** u32 */
  cDestinations: number;
}

export const sizeofMIXERCAPSW = 24;

export function allocMIXERCAPSW(data?: Partial<MIXERCAPSW>): Uint8Array {
  const buf = new Uint8Array(sizeofMIXERCAPSW);
  const view = new DataView(buf.buffer);
  // 0x00: u16
  if (data?.wMid !== undefined) view.setUint16(0, Number(data.wMid), true);
  // 0x02: u16
  if (data?.wPid !== undefined) view.setUint16(2, Number(data.wPid), true);
  // 0x04: u32
  if (data?.vDriverVersion !== undefined) view.setUint32(4, Number(data.vDriverVersion), true);
  // 0x08: pointer
  if (data?.szPname !== undefined) view.setBigUint64(8, data.szPname === null ? 0n : BigInt(util.toPointer(data.szPname)), true);
  // 0x10: u32
  if (data?.fdwSupport !== undefined) view.setUint32(16, Number(data.fdwSupport), true);
  // 0x14: u32
  if (data?.cDestinations !== undefined) view.setUint32(20, Number(data.cDestinations), true);
  return buf;
}

/**
 * Windows.Win32.Media.Audio.MIXERCAPS2A (size: 48)
 */
export interface MIXERCAPS2A {
  /** u16 */
  wMid: number;
  /** u16 */
  wPid: number;
  /** u32 */
  vDriverVersion: number;
  /** array */
  szPname: Deno.PointerValue | null;
  /** u32 */
  fdwSupport: number;
  /** u32 */
  cDestinations: number;
  /** System.Guid */
  ManufacturerGuid: Uint8Array | Deno.PointerValue | null;
  /** System.Guid */
  ProductGuid: Uint8Array | Deno.PointerValue | null;
  /** System.Guid */
  NameGuid: Uint8Array | Deno.PointerValue | null;
}

export const sizeofMIXERCAPS2A = 48;

export function allocMIXERCAPS2A(data?: Partial<MIXERCAPS2A>): Uint8Array {
  const buf = new Uint8Array(sizeofMIXERCAPS2A);
  const view = new DataView(buf.buffer);
  // 0x00: u16
  if (data?.wMid !== undefined) view.setUint16(0, Number(data.wMid), true);
  // 0x02: u16
  if (data?.wPid !== undefined) view.setUint16(2, Number(data.wPid), true);
  // 0x04: u32
  if (data?.vDriverVersion !== undefined) view.setUint32(4, Number(data.vDriverVersion), true);
  // 0x08: pointer
  if (data?.szPname !== undefined) view.setBigUint64(8, data.szPname === null ? 0n : BigInt(util.toPointer(data.szPname)), true);
  // 0x10: u32
  if (data?.fdwSupport !== undefined) view.setUint32(16, Number(data.fdwSupport), true);
  // 0x14: u32
  if (data?.cDestinations !== undefined) view.setUint32(20, Number(data.cDestinations), true);
  // 0x18: pointer
  if (data?.ManufacturerGuid !== undefined) view.setBigUint64(24, data.ManufacturerGuid === null ? 0n : BigInt(util.toPointer(data.ManufacturerGuid)), true);
  // 0x20: pointer
  if (data?.ProductGuid !== undefined) view.setBigUint64(32, data.ProductGuid === null ? 0n : BigInt(util.toPointer(data.ProductGuid)), true);
  // 0x28: pointer
  if (data?.NameGuid !== undefined) view.setBigUint64(40, data.NameGuid === null ? 0n : BigInt(util.toPointer(data.NameGuid)), true);
  return buf;
}

/**
 * Windows.Win32.Media.Audio.MIXERCAPS2W (size: 48)
 */
export interface MIXERCAPS2W {
  /** u16 */
  wMid: number;
  /** u16 */
  wPid: number;
  /** u32 */
  vDriverVersion: number;
  /** array */
  szPname: Deno.PointerValue | null;
  /** u32 */
  fdwSupport: number;
  /** u32 */
  cDestinations: number;
  /** System.Guid */
  ManufacturerGuid: Uint8Array | Deno.PointerValue | null;
  /** System.Guid */
  ProductGuid: Uint8Array | Deno.PointerValue | null;
  /** System.Guid */
  NameGuid: Uint8Array | Deno.PointerValue | null;
}

export const sizeofMIXERCAPS2W = 48;

export function allocMIXERCAPS2W(data?: Partial<MIXERCAPS2W>): Uint8Array {
  const buf = new Uint8Array(sizeofMIXERCAPS2W);
  const view = new DataView(buf.buffer);
  // 0x00: u16
  if (data?.wMid !== undefined) view.setUint16(0, Number(data.wMid), true);
  // 0x02: u16
  if (data?.wPid !== undefined) view.setUint16(2, Number(data.wPid), true);
  // 0x04: u32
  if (data?.vDriverVersion !== undefined) view.setUint32(4, Number(data.vDriverVersion), true);
  // 0x08: pointer
  if (data?.szPname !== undefined) view.setBigUint64(8, data.szPname === null ? 0n : BigInt(util.toPointer(data.szPname)), true);
  // 0x10: u32
  if (data?.fdwSupport !== undefined) view.setUint32(16, Number(data.fdwSupport), true);
  // 0x14: u32
  if (data?.cDestinations !== undefined) view.setUint32(20, Number(data.cDestinations), true);
  // 0x18: pointer
  if (data?.ManufacturerGuid !== undefined) view.setBigUint64(24, data.ManufacturerGuid === null ? 0n : BigInt(util.toPointer(data.ManufacturerGuid)), true);
  // 0x20: pointer
  if (data?.ProductGuid !== undefined) view.setBigUint64(32, data.ProductGuid === null ? 0n : BigInt(util.toPointer(data.ProductGuid)), true);
  // 0x28: pointer
  if (data?.NameGuid !== undefined) view.setBigUint64(40, data.NameGuid === null ? 0n : BigInt(util.toPointer(data.NameGuid)), true);
  return buf;
}

/**
 * _Target_e__Struct (size: 24)
 */
export interface _Target_e__Struct {
  /** u32 */
  dwType: number;
  /** u32 */
  dwDeviceID: number;
  /** u16 */
  wMid: number;
  /** u16 */
  wPid: number;
  /** u32 */
  vDriverVersion: number;
  /** array */
  szPname: Deno.PointerValue | null;
}

export const sizeof_Target_e__Struct = 24;

export function alloc_Target_e__Struct(data?: Partial<_Target_e__Struct>): Uint8Array {
  const buf = new Uint8Array(sizeof_Target_e__Struct);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.dwType !== undefined) view.setUint32(0, Number(data.dwType), true);
  // 0x04: u32
  if (data?.dwDeviceID !== undefined) view.setUint32(4, Number(data.dwDeviceID), true);
  // 0x08: u16
  if (data?.wMid !== undefined) view.setUint16(8, Number(data.wMid), true);
  // 0x0a: u16
  if (data?.wPid !== undefined) view.setUint16(10, Number(data.wPid), true);
  // 0x0c: u32
  if (data?.vDriverVersion !== undefined) view.setUint32(12, Number(data.vDriverVersion), true);
  // 0x10: pointer
  if (data?.szPname !== undefined) view.setBigUint64(16, data.szPname === null ? 0n : BigInt(util.toPointer(data.szPname)), true);
  return buf;
}

/**
 * Windows.Win32.Media.Audio.MIXERLINEA (size: 72)
 */
export interface MIXERLINEA {
  /** u32 */
  cbStruct: number;
  /** u32 */
  dwDestination: number;
  /** u32 */
  dwSource: number;
  /** u32 */
  dwLineID: number;
  /** u32 */
  fdwLine: number;
  /** usize */
  dwUser: Deno.PointerValue;
  /** Windows.Win32.Media.Audio.MIXERLINE_COMPONENTTYPE */
  dwComponentType: MIXERLINE_COMPONENTTYPE;
  /** u32 */
  cChannels: number;
  /** u32 */
  cConnections: number;
  /** u32 */
  cControls: number;
  /** array */
  szShortName: Deno.PointerValue | null;
  /** array */
  szName: Deno.PointerValue | null;
  /** _Target_e__Struct */
  Target: Uint8Array | Deno.PointerValue | null;
}

export const sizeofMIXERLINEA = 72;

export function allocMIXERLINEA(data?: Partial<MIXERLINEA>): Uint8Array {
  const buf = new Uint8Array(sizeofMIXERLINEA);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.cbStruct !== undefined) view.setUint32(0, Number(data.cbStruct), true);
  // 0x04: u32
  if (data?.dwDestination !== undefined) view.setUint32(4, Number(data.dwDestination), true);
  // 0x08: u32
  if (data?.dwSource !== undefined) view.setUint32(8, Number(data.dwSource), true);
  // 0x0c: u32
  if (data?.dwLineID !== undefined) view.setUint32(12, Number(data.dwLineID), true);
  // 0x10: u32
  if (data?.fdwLine !== undefined) view.setUint32(16, Number(data.fdwLine), true);
  // 0x14: pad4
  // 0x18: usize
  if (data?.dwUser !== undefined) view.setBigUint64(24, BigInt(data.dwUser), true);
  // 0x20: u32
  if (data?.dwComponentType !== undefined) view.setUint32(32, Number(data.dwComponentType), true);
  // 0x24: u32
  if (data?.cChannels !== undefined) view.setUint32(36, Number(data.cChannels), true);
  // 0x28: u32
  if (data?.cConnections !== undefined) view.setUint32(40, Number(data.cConnections), true);
  // 0x2c: u32
  if (data?.cControls !== undefined) view.setUint32(44, Number(data.cControls), true);
  // 0x30: pointer
  if (data?.szShortName !== undefined) view.setBigUint64(48, data.szShortName === null ? 0n : BigInt(util.toPointer(data.szShortName)), true);
  // 0x38: pointer
  if (data?.szName !== undefined) view.setBigUint64(56, data.szName === null ? 0n : BigInt(util.toPointer(data.szName)), true);
  // 0x40: pointer
  if (data?.Target !== undefined) view.setBigUint64(64, data.Target === null ? 0n : BigInt(util.toPointer(data.Target)), true);
  return buf;
}

/**
 * Windows.Win32.Media.Audio.MIXERLINEW (size: 72)
 */
export interface MIXERLINEW {
  /** u32 */
  cbStruct: number;
  /** u32 */
  dwDestination: number;
  /** u32 */
  dwSource: number;
  /** u32 */
  dwLineID: number;
  /** u32 */
  fdwLine: number;
  /** usize */
  dwUser: Deno.PointerValue;
  /** Windows.Win32.Media.Audio.MIXERLINE_COMPONENTTYPE */
  dwComponentType: MIXERLINE_COMPONENTTYPE;
  /** u32 */
  cChannels: number;
  /** u32 */
  cConnections: number;
  /** u32 */
  cControls: number;
  /** array */
  szShortName: Deno.PointerValue | null;
  /** array */
  szName: Deno.PointerValue | null;
  /** _Target_e__Struct */
  Target: Uint8Array | Deno.PointerValue | null;
}

export const sizeofMIXERLINEW = 72;

export function allocMIXERLINEW(data?: Partial<MIXERLINEW>): Uint8Array {
  const buf = new Uint8Array(sizeofMIXERLINEW);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.cbStruct !== undefined) view.setUint32(0, Number(data.cbStruct), true);
  // 0x04: u32
  if (data?.dwDestination !== undefined) view.setUint32(4, Number(data.dwDestination), true);
  // 0x08: u32
  if (data?.dwSource !== undefined) view.setUint32(8, Number(data.dwSource), true);
  // 0x0c: u32
  if (data?.dwLineID !== undefined) view.setUint32(12, Number(data.dwLineID), true);
  // 0x10: u32
  if (data?.fdwLine !== undefined) view.setUint32(16, Number(data.fdwLine), true);
  // 0x14: pad4
  // 0x18: usize
  if (data?.dwUser !== undefined) view.setBigUint64(24, BigInt(data.dwUser), true);
  // 0x20: u32
  if (data?.dwComponentType !== undefined) view.setUint32(32, Number(data.dwComponentType), true);
  // 0x24: u32
  if (data?.cChannels !== undefined) view.setUint32(36, Number(data.cChannels), true);
  // 0x28: u32
  if (data?.cConnections !== undefined) view.setUint32(40, Number(data.cConnections), true);
  // 0x2c: u32
  if (data?.cControls !== undefined) view.setUint32(44, Number(data.cControls), true);
  // 0x30: pointer
  if (data?.szShortName !== undefined) view.setBigUint64(48, data.szShortName === null ? 0n : BigInt(util.toPointer(data.szShortName)), true);
  // 0x38: pointer
  if (data?.szName !== undefined) view.setBigUint64(56, data.szName === null ? 0n : BigInt(util.toPointer(data.szName)), true);
  // 0x40: pointer
  if (data?.Target !== undefined) view.setBigUint64(64, data.Target === null ? 0n : BigInt(util.toPointer(data.Target)), true);
  return buf;
}

/**
 * _Anonymous1_e__Struct (size: 24)
 */
export interface _Anonymous1_e__Struct {
  /** f32 */
  m11: number;
  /** f32 */
  m12: number;
  /** f32 */
  m21: number;
  /** f32 */
  m22: number;
  /** f32 */
  dx: number;
  /** f32 */
  dy: number;
}

export const sizeof_Anonymous1_e__Struct = 24;

export function alloc_Anonymous1_e__Struct(data?: Partial<_Anonymous1_e__Struct>): Uint8Array {
  const buf = new Uint8Array(sizeof_Anonymous1_e__Struct);
  const view = new DataView(buf.buffer);
  // 0x00: f32
  if (data?.m11 !== undefined) view.setFloat32(0, Number(data.m11), true);
  // 0x04: f32
  if (data?.m12 !== undefined) view.setFloat32(4, Number(data.m12), true);
  // 0x08: f32
  if (data?.m21 !== undefined) view.setFloat32(8, Number(data.m21), true);
  // 0x0c: f32
  if (data?.m22 !== undefined) view.setFloat32(12, Number(data.m22), true);
  // 0x10: f32
  if (data?.dx !== undefined) view.setFloat32(16, Number(data.dx), true);
  // 0x14: f32
  if (data?.dy !== undefined) view.setFloat32(20, Number(data.dy), true);
  return buf;
}

/**
 * _Anonymous2_e__Struct (size: 24)
 */
export interface _Anonymous2_e__Struct {
  /** f32 */
  _11: number;
  /** f32 */
  _12: number;
  /** f32 */
  _21: number;
  /** f32 */
  _22: number;
  /** f32 */
  _31: number;
  /** f32 */
  _32: number;
}

export const sizeof_Anonymous2_e__Struct = 24;

export function alloc_Anonymous2_e__Struct(data?: Partial<_Anonymous2_e__Struct>): Uint8Array {
  const buf = new Uint8Array(sizeof_Anonymous2_e__Struct);
  const view = new DataView(buf.buffer);
  // 0x00: f32
  if (data?._11 !== undefined) view.setFloat32(0, Number(data._11), true);
  // 0x04: f32
  if (data?._12 !== undefined) view.setFloat32(4, Number(data._12), true);
  // 0x08: f32
  if (data?._21 !== undefined) view.setFloat32(8, Number(data._21), true);
  // 0x0c: f32
  if (data?._22 !== undefined) view.setFloat32(12, Number(data._22), true);
  // 0x10: f32
  if (data?._31 !== undefined) view.setFloat32(16, Number(data._31), true);
  // 0x14: f32
  if (data?._32 !== undefined) view.setFloat32(20, Number(data._32), true);
  return buf;
}

/**
 * _Bounds_e__Union (size: 24)
 */
export interface _Bounds_e__Union {
  /** _Anonymous1_e__Struct */
  Anonymous1: Uint8Array | Deno.PointerValue | null;
  /** _Anonymous2_e__Struct */
  Anonymous2: Uint8Array | Deno.PointerValue | null;
  /** array */
  dwReserved: Deno.PointerValue | null;
}

export const sizeof_Bounds_e__Union = 24;

export function alloc_Bounds_e__Union(data?: Partial<_Bounds_e__Union>): Uint8Array {
  const buf = new Uint8Array(sizeof_Bounds_e__Union);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.Anonymous1 !== undefined) view.setBigUint64(0, data.Anonymous1 === null ? 0n : BigInt(util.toPointer(data.Anonymous1)), true);
  // 0x08: pointer
  if (data?.Anonymous2 !== undefined) view.setBigUint64(8, data.Anonymous2 === null ? 0n : BigInt(util.toPointer(data.Anonymous2)), true);
  // 0x10: pointer
  if (data?.dwReserved !== undefined) view.setBigUint64(16, data.dwReserved === null ? 0n : BigInt(util.toPointer(data.dwReserved)), true);
  return buf;
}

/**
 * _Metrics_e__Union (size: 16)
 */
export interface _Metrics_e__Union {
  /** u32 */
  cSteps: number;
  /** u32 */
  cbCustomData: number;
  /** array */
  dwReserved: Deno.PointerValue | null;
}

export const sizeof_Metrics_e__Union = 16;

export function alloc_Metrics_e__Union(data?: Partial<_Metrics_e__Union>): Uint8Array {
  const buf = new Uint8Array(sizeof_Metrics_e__Union);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.cSteps !== undefined) view.setUint32(0, Number(data.cSteps), true);
  // 0x04: u32
  if (data?.cbCustomData !== undefined) view.setUint32(4, Number(data.cbCustomData), true);
  // 0x08: pointer
  if (data?.dwReserved !== undefined) view.setBigUint64(8, data.dwReserved === null ? 0n : BigInt(util.toPointer(data.dwReserved)), true);
  return buf;
}

/**
 * Windows.Win32.Media.Audio.MIXERCONTROLA (size: 56)
 */
export interface MIXERCONTROLA {
  /** u32 */
  cbStruct: number;
  /** u32 */
  dwControlID: number;
  /** u32 */
  dwControlType: number;
  /** u32 */
  fdwControl: number;
  /** u32 */
  cMultipleItems: number;
  /** array */
  szShortName: Deno.PointerValue | null;
  /** array */
  szName: Deno.PointerValue | null;
  /** _Bounds_e__Union */
  Bounds: Uint8Array | Deno.PointerValue | null;
  /** _Metrics_e__Union */
  Metrics: Uint8Array | Deno.PointerValue | null;
}

export const sizeofMIXERCONTROLA = 56;

export function allocMIXERCONTROLA(data?: Partial<MIXERCONTROLA>): Uint8Array {
  const buf = new Uint8Array(sizeofMIXERCONTROLA);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.cbStruct !== undefined) view.setUint32(0, Number(data.cbStruct), true);
  // 0x04: u32
  if (data?.dwControlID !== undefined) view.setUint32(4, Number(data.dwControlID), true);
  // 0x08: u32
  if (data?.dwControlType !== undefined) view.setUint32(8, Number(data.dwControlType), true);
  // 0x0c: u32
  if (data?.fdwControl !== undefined) view.setUint32(12, Number(data.fdwControl), true);
  // 0x10: u32
  if (data?.cMultipleItems !== undefined) view.setUint32(16, Number(data.cMultipleItems), true);
  // 0x14: pad4
  // 0x18: pointer
  if (data?.szShortName !== undefined) view.setBigUint64(24, data.szShortName === null ? 0n : BigInt(util.toPointer(data.szShortName)), true);
  // 0x20: pointer
  if (data?.szName !== undefined) view.setBigUint64(32, data.szName === null ? 0n : BigInt(util.toPointer(data.szName)), true);
  // 0x28: pointer
  if (data?.Bounds !== undefined) view.setBigUint64(40, data.Bounds === null ? 0n : BigInt(util.toPointer(data.Bounds)), true);
  // 0x30: pointer
  if (data?.Metrics !== undefined) view.setBigUint64(48, data.Metrics === null ? 0n : BigInt(util.toPointer(data.Metrics)), true);
  return buf;
}

/**
 * Windows.Win32.Media.Audio.MIXERCONTROLW (size: 56)
 */
export interface MIXERCONTROLW {
  /** u32 */
  cbStruct: number;
  /** u32 */
  dwControlID: number;
  /** u32 */
  dwControlType: number;
  /** u32 */
  fdwControl: number;
  /** u32 */
  cMultipleItems: number;
  /** array */
  szShortName: Deno.PointerValue | null;
  /** array */
  szName: Deno.PointerValue | null;
  /** _Bounds_e__Union */
  Bounds: Uint8Array | Deno.PointerValue | null;
  /** _Metrics_e__Union */
  Metrics: Uint8Array | Deno.PointerValue | null;
}

export const sizeofMIXERCONTROLW = 56;

export function allocMIXERCONTROLW(data?: Partial<MIXERCONTROLW>): Uint8Array {
  const buf = new Uint8Array(sizeofMIXERCONTROLW);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.cbStruct !== undefined) view.setUint32(0, Number(data.cbStruct), true);
  // 0x04: u32
  if (data?.dwControlID !== undefined) view.setUint32(4, Number(data.dwControlID), true);
  // 0x08: u32
  if (data?.dwControlType !== undefined) view.setUint32(8, Number(data.dwControlType), true);
  // 0x0c: u32
  if (data?.fdwControl !== undefined) view.setUint32(12, Number(data.fdwControl), true);
  // 0x10: u32
  if (data?.cMultipleItems !== undefined) view.setUint32(16, Number(data.cMultipleItems), true);
  // 0x14: pad4
  // 0x18: pointer
  if (data?.szShortName !== undefined) view.setBigUint64(24, data.szShortName === null ? 0n : BigInt(util.toPointer(data.szShortName)), true);
  // 0x20: pointer
  if (data?.szName !== undefined) view.setBigUint64(32, data.szName === null ? 0n : BigInt(util.toPointer(data.szName)), true);
  // 0x28: pointer
  if (data?.Bounds !== undefined) view.setBigUint64(40, data.Bounds === null ? 0n : BigInt(util.toPointer(data.Bounds)), true);
  // 0x30: pointer
  if (data?.Metrics !== undefined) view.setBigUint64(48, data.Metrics === null ? 0n : BigInt(util.toPointer(data.Metrics)), true);
  return buf;
}

/**
 * Windows.Win32.Media.Audio.MIXERLINECONTROLSA (size: 32)
 */
export interface MIXERLINECONTROLSA {
  /** u32 */
  cbStruct: number;
  /** u32 */
  dwLineID: number;
  /** _Anonymous_e__Union */
  Anonymous: Uint8Array | Deno.PointerValue | null;
  /** u32 */
  cControls: number;
  /** u32 */
  cbmxctrl: number;
  /** ptr */
  pamxctrl: Deno.PointerValue | Uint8Array | null;
}

export const sizeofMIXERLINECONTROLSA = 32;

export function allocMIXERLINECONTROLSA(data?: Partial<MIXERLINECONTROLSA>): Uint8Array {
  const buf = new Uint8Array(sizeofMIXERLINECONTROLSA);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.cbStruct !== undefined) view.setUint32(0, Number(data.cbStruct), true);
  // 0x04: u32
  if (data?.dwLineID !== undefined) view.setUint32(4, Number(data.dwLineID), true);
  // 0x08: pointer
  if (data?.Anonymous !== undefined) view.setBigUint64(8, data.Anonymous === null ? 0n : BigInt(util.toPointer(data.Anonymous)), true);
  // 0x10: u32
  if (data?.cControls !== undefined) view.setUint32(16, Number(data.cControls), true);
  // 0x14: u32
  if (data?.cbmxctrl !== undefined) view.setUint32(20, Number(data.cbmxctrl), true);
  // 0x18: pointer
  if (data?.pamxctrl !== undefined) view.setBigUint64(24, data.pamxctrl === null ? 0n : BigInt(util.toPointer(data.pamxctrl)), true);
  return buf;
}

/**
 * Windows.Win32.Media.Audio.MIXERLINECONTROLSW (size: 32)
 */
export interface MIXERLINECONTROLSW {
  /** u32 */
  cbStruct: number;
  /** u32 */
  dwLineID: number;
  /** _Anonymous_e__Union */
  Anonymous: Uint8Array | Deno.PointerValue | null;
  /** u32 */
  cControls: number;
  /** u32 */
  cbmxctrl: number;
  /** ptr */
  pamxctrl: Deno.PointerValue | Uint8Array | null;
}

export const sizeofMIXERLINECONTROLSW = 32;

export function allocMIXERLINECONTROLSW(data?: Partial<MIXERLINECONTROLSW>): Uint8Array {
  const buf = new Uint8Array(sizeofMIXERLINECONTROLSW);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.cbStruct !== undefined) view.setUint32(0, Number(data.cbStruct), true);
  // 0x04: u32
  if (data?.dwLineID !== undefined) view.setUint32(4, Number(data.dwLineID), true);
  // 0x08: pointer
  if (data?.Anonymous !== undefined) view.setBigUint64(8, data.Anonymous === null ? 0n : BigInt(util.toPointer(data.Anonymous)), true);
  // 0x10: u32
  if (data?.cControls !== undefined) view.setUint32(16, Number(data.cControls), true);
  // 0x14: u32
  if (data?.cbmxctrl !== undefined) view.setUint32(20, Number(data.cbmxctrl), true);
  // 0x18: pointer
  if (data?.pamxctrl !== undefined) view.setBigUint64(24, data.pamxctrl === null ? 0n : BigInt(util.toPointer(data.pamxctrl)), true);
  return buf;
}

/**
 * Windows.Win32.Media.Audio.MIXERCONTROLDETAILS (size: 40)
 */
export interface MIXERCONTROLDETAILS {
  /** u32 */
  cbStruct: number;
  /** u32 */
  dwControlID: number;
  /** u32 */
  cChannels: number;
  /** _Anonymous_e__Union */
  Anonymous: Uint8Array | Deno.PointerValue | null;
  /** u32 */
  cbDetails: number;
  /** ptr */
  paDetails: Deno.PointerValue | Uint8Array | null;
}

export const sizeofMIXERCONTROLDETAILS = 40;

export function allocMIXERCONTROLDETAILS(data?: Partial<MIXERCONTROLDETAILS>): Uint8Array {
  const buf = new Uint8Array(sizeofMIXERCONTROLDETAILS);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.cbStruct !== undefined) view.setUint32(0, Number(data.cbStruct), true);
  // 0x04: u32
  if (data?.dwControlID !== undefined) view.setUint32(4, Number(data.dwControlID), true);
  // 0x08: u32
  if (data?.cChannels !== undefined) view.setUint32(8, Number(data.cChannels), true);
  // 0x0c: pad4
  // 0x10: pointer
  if (data?.Anonymous !== undefined) view.setBigUint64(16, data.Anonymous === null ? 0n : BigInt(util.toPointer(data.Anonymous)), true);
  // 0x18: u32
  if (data?.cbDetails !== undefined) view.setUint32(24, Number(data.cbDetails), true);
  // 0x1c: pad4
  // 0x20: pointer
  if (data?.paDetails !== undefined) view.setBigUint64(32, data.paDetails === null ? 0n : BigInt(util.toPointer(data.paDetails)), true);
  return buf;
}

/**
 * Windows.Win32.Media.Audio.MIXERCONTROLDETAILS_LISTTEXTA (size: 16)
 */
export interface MIXERCONTROLDETAILS_LISTTEXTA {
  /** u32 */
  dwParam1: number;
  /** u32 */
  dwParam2: number;
  /** array */
  szName: Deno.PointerValue | null;
}

export const sizeofMIXERCONTROLDETAILS_LISTTEXTA = 16;

export function allocMIXERCONTROLDETAILS_LISTTEXTA(data?: Partial<MIXERCONTROLDETAILS_LISTTEXTA>): Uint8Array {
  const buf = new Uint8Array(sizeofMIXERCONTROLDETAILS_LISTTEXTA);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.dwParam1 !== undefined) view.setUint32(0, Number(data.dwParam1), true);
  // 0x04: u32
  if (data?.dwParam2 !== undefined) view.setUint32(4, Number(data.dwParam2), true);
  // 0x08: pointer
  if (data?.szName !== undefined) view.setBigUint64(8, data.szName === null ? 0n : BigInt(util.toPointer(data.szName)), true);
  return buf;
}

/**
 * Windows.Win32.Media.Audio.MIXERCONTROLDETAILS_LISTTEXTW (size: 16)
 */
export interface MIXERCONTROLDETAILS_LISTTEXTW {
  /** u32 */
  dwParam1: number;
  /** u32 */
  dwParam2: number;
  /** array */
  szName: Deno.PointerValue | null;
}

export const sizeofMIXERCONTROLDETAILS_LISTTEXTW = 16;

export function allocMIXERCONTROLDETAILS_LISTTEXTW(data?: Partial<MIXERCONTROLDETAILS_LISTTEXTW>): Uint8Array {
  const buf = new Uint8Array(sizeofMIXERCONTROLDETAILS_LISTTEXTW);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.dwParam1 !== undefined) view.setUint32(0, Number(data.dwParam1), true);
  // 0x04: u32
  if (data?.dwParam2 !== undefined) view.setUint32(4, Number(data.dwParam2), true);
  // 0x08: pointer
  if (data?.szName !== undefined) view.setBigUint64(8, data.szName === null ? 0n : BigInt(util.toPointer(data.szName)), true);
  return buf;
}

/**
 * Windows.Win32.Media.Audio.MIXERCONTROLDETAILS_BOOLEAN (size: 8)
 */
export interface MIXERCONTROLDETAILS_BOOLEAN {
  /** i32 */
  fValue: number;
}

export const sizeofMIXERCONTROLDETAILS_BOOLEAN = 8;

export function allocMIXERCONTROLDETAILS_BOOLEAN(data?: Partial<MIXERCONTROLDETAILS_BOOLEAN>): Uint8Array {
  const buf = new Uint8Array(sizeofMIXERCONTROLDETAILS_BOOLEAN);
  const view = new DataView(buf.buffer);
  // 0x00: i32
  if (data?.fValue !== undefined) view.setInt32(0, Number(data.fValue), true);
  // 0x04: pad4
  return buf;
}

/**
 * Windows.Win32.Media.Audio.MIXERCONTROLDETAILS_SIGNED (size: 8)
 */
export interface MIXERCONTROLDETAILS_SIGNED {
  /** i32 */
  lValue: number;
}

export const sizeofMIXERCONTROLDETAILS_SIGNED = 8;

export function allocMIXERCONTROLDETAILS_SIGNED(data?: Partial<MIXERCONTROLDETAILS_SIGNED>): Uint8Array {
  const buf = new Uint8Array(sizeofMIXERCONTROLDETAILS_SIGNED);
  const view = new DataView(buf.buffer);
  // 0x00: i32
  if (data?.lValue !== undefined) view.setInt32(0, Number(data.lValue), true);
  // 0x04: pad4
  return buf;
}

/**
 * Windows.Win32.Media.Audio.MIXERCONTROLDETAILS_UNSIGNED (size: 8)
 */
export interface MIXERCONTROLDETAILS_UNSIGNED {
  /** u32 */
  dwValue: number;
}

export const sizeofMIXERCONTROLDETAILS_UNSIGNED = 8;

export function allocMIXERCONTROLDETAILS_UNSIGNED(data?: Partial<MIXERCONTROLDETAILS_UNSIGNED>): Uint8Array {
  const buf = new Uint8Array(sizeofMIXERCONTROLDETAILS_UNSIGNED);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.dwValue !== undefined) view.setUint32(0, Number(data.dwValue), true);
  // 0x04: pad4
  return buf;
}

/**
 * Windows.Win32.Media.Audio.AudioClientProperties (size: 16)
 */
export interface AudioClientProperties {
  /** u32 */
  cbSize: number;
  /** Windows.Win32.Foundation.BOOL */
  bIsOffload: boolean;
  /** Windows.Win32.Media.Audio.AUDIO_STREAM_CATEGORY */
  eCategory: AUDIO_STREAM_CATEGORY;
  /** Windows.Win32.Media.Audio.AUDCLNT_STREAMOPTIONS */
  Options: AUDCLNT_STREAMOPTIONS;
}

export const sizeofAudioClientProperties = 16;

export function allocAudioClientProperties(data?: Partial<AudioClientProperties>): Uint8Array {
  const buf = new Uint8Array(sizeofAudioClientProperties);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.cbSize !== undefined) view.setUint32(0, Number(data.cbSize), true);
  // 0x04: i32
  if (data?.bIsOffload !== undefined) view.setInt32(4, Number(data.bIsOffload), true);
  // 0x08: i32
  if (data?.eCategory !== undefined) view.setInt32(8, Number(data.eCategory), true);
  // 0x0c: u32
  if (data?.Options !== undefined) view.setUint32(12, Number(data.Options), true);
  return buf;
}

/**
 * Windows.Win32.Media.Audio.AudioClient3ActivationParams (size: 8)
 */
export interface AudioClient3ActivationParams {
  /** System.Guid */
  tracingContextId: Uint8Array | Deno.PointerValue | null;
}

export const sizeofAudioClient3ActivationParams = 8;

export function allocAudioClient3ActivationParams(data?: Partial<AudioClient3ActivationParams>): Uint8Array {
  const buf = new Uint8Array(sizeofAudioClient3ActivationParams);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.tracingContextId !== undefined) view.setBigUint64(0, data.tracingContextId === null ? 0n : BigInt(util.toPointer(data.tracingContextId)), true);
  return buf;
}

/**
 * Windows.Win32.Media.Audio.AUDIO_EFFECT (size: 16)
 */
export interface AUDIO_EFFECT {
  /** System.Guid */
  id: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Foundation.BOOL */
  canSetState: boolean;
  /** Windows.Win32.Media.Audio.AUDIO_EFFECT_STATE */
  state: AUDIO_EFFECT_STATE;
}

export const sizeofAUDIO_EFFECT = 16;

export function allocAUDIO_EFFECT(data?: Partial<AUDIO_EFFECT>): Uint8Array {
  const buf = new Uint8Array(sizeofAUDIO_EFFECT);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.id !== undefined) view.setBigUint64(0, data.id === null ? 0n : BigInt(util.toPointer(data.id)), true);
  // 0x08: i32
  if (data?.canSetState !== undefined) view.setInt32(8, Number(data.canSetState), true);
  // 0x0c: i32
  if (data?.state !== undefined) view.setInt32(12, Number(data.state), true);
  return buf;
}

/**
 * Windows.Win32.Media.Audio.AMBISONICS_PARAMS (size: 40)
 */
export interface AMBISONICS_PARAMS {
  /** u32 */
  u32Size: number;
  /** u32 */
  u32Version: number;
  /** Windows.Win32.Media.Audio.AMBISONICS_TYPE */
  u32Type: AMBISONICS_TYPE;
  /** Windows.Win32.Media.Audio.AMBISONICS_CHANNEL_ORDERING */
  u32ChannelOrdering: AMBISONICS_CHANNEL_ORDERING;
  /** Windows.Win32.Media.Audio.AMBISONICS_NORMALIZATION */
  u32Normalization: AMBISONICS_NORMALIZATION;
  /** u32 */
  u32Order: number;
  /** u32 */
  u32NumChannels: number;
  /** ptr */
  pu32ChannelMap: Deno.PointerValue | Uint8Array | null;
}

export const sizeofAMBISONICS_PARAMS = 40;

export function allocAMBISONICS_PARAMS(data?: Partial<AMBISONICS_PARAMS>): Uint8Array {
  const buf = new Uint8Array(sizeofAMBISONICS_PARAMS);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.u32Size !== undefined) view.setUint32(0, Number(data.u32Size), true);
  // 0x04: u32
  if (data?.u32Version !== undefined) view.setUint32(4, Number(data.u32Version), true);
  // 0x08: i32
  if (data?.u32Type !== undefined) view.setInt32(8, Number(data.u32Type), true);
  // 0x0c: i32
  if (data?.u32ChannelOrdering !== undefined) view.setInt32(12, Number(data.u32ChannelOrdering), true);
  // 0x10: i32
  if (data?.u32Normalization !== undefined) view.setInt32(16, Number(data.u32Normalization), true);
  // 0x14: u32
  if (data?.u32Order !== undefined) view.setUint32(20, Number(data.u32Order), true);
  // 0x18: u32
  if (data?.u32NumChannels !== undefined) view.setUint32(24, Number(data.u32NumChannels), true);
  // 0x1c: pad4
  // 0x20: pointer
  if (data?.pu32ChannelMap !== undefined) view.setBigUint64(32, data.pu32ChannelMap === null ? 0n : BigInt(util.toPointer(data.pu32ChannelMap)), true);
  return buf;
}

/**
 * Windows.Win32.Media.Audio.SpatialAudioObjectRenderStreamActivationParams (size: 40)
 */
export interface SpatialAudioObjectRenderStreamActivationParams {
  /** ptr */
  ObjectFormat: Deno.PointerValue | Uint8Array | null;
  /** Windows.Win32.Media.Audio.AudioObjectType */
  StaticObjectTypeMask: AudioObjectType;
  /** u32 */
  MinDynamicObjectCount: number;
  /** u32 */
  MaxDynamicObjectCount: number;
  /** Windows.Win32.Media.Audio.AUDIO_STREAM_CATEGORY */
  Category: AUDIO_STREAM_CATEGORY;
  /** Windows.Win32.Foundation.HANDLE */
  EventHandle: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Media.Audio.ISpatialAudioObjectRenderStreamNotify */
  NotifyObject: Uint8Array | Deno.PointerValue | null;
}

export const sizeofSpatialAudioObjectRenderStreamActivationParams = 40;

export function allocSpatialAudioObjectRenderStreamActivationParams(data?: Partial<SpatialAudioObjectRenderStreamActivationParams>): Uint8Array {
  const buf = new Uint8Array(sizeofSpatialAudioObjectRenderStreamActivationParams);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.ObjectFormat !== undefined) view.setBigUint64(0, data.ObjectFormat === null ? 0n : BigInt(util.toPointer(data.ObjectFormat)), true);
  // 0x08: u32
  if (data?.StaticObjectTypeMask !== undefined) view.setUint32(8, Number(data.StaticObjectTypeMask), true);
  // 0x0c: u32
  if (data?.MinDynamicObjectCount !== undefined) view.setUint32(12, Number(data.MinDynamicObjectCount), true);
  // 0x10: u32
  if (data?.MaxDynamicObjectCount !== undefined) view.setUint32(16, Number(data.MaxDynamicObjectCount), true);
  // 0x14: i32
  if (data?.Category !== undefined) view.setInt32(20, Number(data.Category), true);
  // 0x18: pointer
  if (data?.EventHandle !== undefined) view.setBigUint64(24, data.EventHandle === null ? 0n : BigInt(util.toPointer(data.EventHandle)), true);
  // 0x20: pointer
  if (data?.NotifyObject !== undefined) view.setBigUint64(32, data.NotifyObject === null ? 0n : BigInt(util.toPointer(data.NotifyObject)), true);
  return buf;
}

/**
 * Windows.Win32.Media.Audio.SpatialAudioObjectRenderStreamActivationParams2 (size: 48)
 */
export interface SpatialAudioObjectRenderStreamActivationParams2 {
  /** ptr */
  ObjectFormat: Deno.PointerValue | Uint8Array | null;
  /** Windows.Win32.Media.Audio.AudioObjectType */
  StaticObjectTypeMask: AudioObjectType;
  /** u32 */
  MinDynamicObjectCount: number;
  /** u32 */
  MaxDynamicObjectCount: number;
  /** Windows.Win32.Media.Audio.AUDIO_STREAM_CATEGORY */
  Category: AUDIO_STREAM_CATEGORY;
  /** Windows.Win32.Foundation.HANDLE */
  EventHandle: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Media.Audio.ISpatialAudioObjectRenderStreamNotify */
  NotifyObject: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Media.Audio.SPATIAL_AUDIO_STREAM_OPTIONS */
  Options: SPATIAL_AUDIO_STREAM_OPTIONS;
}

export const sizeofSpatialAudioObjectRenderStreamActivationParams2 = 48;

export function allocSpatialAudioObjectRenderStreamActivationParams2(data?: Partial<SpatialAudioObjectRenderStreamActivationParams2>): Uint8Array {
  const buf = new Uint8Array(sizeofSpatialAudioObjectRenderStreamActivationParams2);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.ObjectFormat !== undefined) view.setBigUint64(0, data.ObjectFormat === null ? 0n : BigInt(util.toPointer(data.ObjectFormat)), true);
  // 0x08: u32
  if (data?.StaticObjectTypeMask !== undefined) view.setUint32(8, Number(data.StaticObjectTypeMask), true);
  // 0x0c: u32
  if (data?.MinDynamicObjectCount !== undefined) view.setUint32(12, Number(data.MinDynamicObjectCount), true);
  // 0x10: u32
  if (data?.MaxDynamicObjectCount !== undefined) view.setUint32(16, Number(data.MaxDynamicObjectCount), true);
  // 0x14: i32
  if (data?.Category !== undefined) view.setInt32(20, Number(data.Category), true);
  // 0x18: pointer
  if (data?.EventHandle !== undefined) view.setBigUint64(24, data.EventHandle === null ? 0n : BigInt(util.toPointer(data.EventHandle)), true);
  // 0x20: pointer
  if (data?.NotifyObject !== undefined) view.setBigUint64(32, data.NotifyObject === null ? 0n : BigInt(util.toPointer(data.NotifyObject)), true);
  // 0x28: u32
  if (data?.Options !== undefined) view.setUint32(40, Number(data.Options), true);
  // 0x2c: pad4
  return buf;
}

/**
 * Windows.Win32.Media.Audio.SpatialAudioClientActivationParams (size: 32)
 */
export interface SpatialAudioClientActivationParams {
  /** System.Guid */
  tracingContextId: Uint8Array | Deno.PointerValue | null;
  /** System.Guid */
  appId: Uint8Array | Deno.PointerValue | null;
  /** i32 */
  majorVersion: number;
  /** i32 */
  minorVersion1: number;
  /** i32 */
  minorVersion2: number;
  /** i32 */
  minorVersion3: number;
}

export const sizeofSpatialAudioClientActivationParams = 32;

export function allocSpatialAudioClientActivationParams(data?: Partial<SpatialAudioClientActivationParams>): Uint8Array {
  const buf = new Uint8Array(sizeofSpatialAudioClientActivationParams);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.tracingContextId !== undefined) view.setBigUint64(0, data.tracingContextId === null ? 0n : BigInt(util.toPointer(data.tracingContextId)), true);
  // 0x08: pointer
  if (data?.appId !== undefined) view.setBigUint64(8, data.appId === null ? 0n : BigInt(util.toPointer(data.appId)), true);
  // 0x10: i32
  if (data?.majorVersion !== undefined) view.setInt32(16, Number(data.majorVersion), true);
  // 0x14: i32
  if (data?.minorVersion1 !== undefined) view.setInt32(20, Number(data.minorVersion1), true);
  // 0x18: i32
  if (data?.minorVersion2 !== undefined) view.setInt32(24, Number(data.minorVersion2), true);
  // 0x1c: i32
  if (data?.minorVersion3 !== undefined) view.setInt32(28, Number(data.minorVersion3), true);
  return buf;
}

/**
 * Windows.Win32.Media.Audio.SpatialAudioHrtfDirectivity (size: 8)
 */
export interface SpatialAudioHrtfDirectivity {
  /** Windows.Win32.Media.Audio.SpatialAudioHrtfDirectivityType */
  Type: SpatialAudioHrtfDirectivityType;
  /** f32 */
  Scaling: number;
}

export const sizeofSpatialAudioHrtfDirectivity = 8;

export function allocSpatialAudioHrtfDirectivity(data?: Partial<SpatialAudioHrtfDirectivity>): Uint8Array {
  const buf = new Uint8Array(sizeofSpatialAudioHrtfDirectivity);
  const view = new DataView(buf.buffer);
  // 0x00: i32
  if (data?.Type !== undefined) view.setInt32(0, Number(data.Type), true);
  // 0x04: f32
  if (data?.Scaling !== undefined) view.setFloat32(4, Number(data.Scaling), true);
  return buf;
}

/**
 * Windows.Win32.Media.Audio.SpatialAudioHrtfDirectivityCardioid (size: 16)
 */
export interface SpatialAudioHrtfDirectivityCardioid {
  /** Windows.Win32.Media.Audio.SpatialAudioHrtfDirectivity */
  directivity: Uint8Array | Deno.PointerValue | null;
  /** f32 */
  Order: number;
}

export const sizeofSpatialAudioHrtfDirectivityCardioid = 16;

export function allocSpatialAudioHrtfDirectivityCardioid(data?: Partial<SpatialAudioHrtfDirectivityCardioid>): Uint8Array {
  const buf = new Uint8Array(sizeofSpatialAudioHrtfDirectivityCardioid);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.directivity !== undefined) view.setBigUint64(0, data.directivity === null ? 0n : BigInt(util.toPointer(data.directivity)), true);
  // 0x08: f32
  if (data?.Order !== undefined) view.setFloat32(8, Number(data.Order), true);
  // 0x0c: pad4
  return buf;
}

/**
 * Windows.Win32.Media.Audio.SpatialAudioHrtfDirectivityCone (size: 16)
 */
export interface SpatialAudioHrtfDirectivityCone {
  /** Windows.Win32.Media.Audio.SpatialAudioHrtfDirectivity */
  directivity: Uint8Array | Deno.PointerValue | null;
  /** f32 */
  InnerAngle: number;
  /** f32 */
  OuterAngle: number;
}

export const sizeofSpatialAudioHrtfDirectivityCone = 16;

export function allocSpatialAudioHrtfDirectivityCone(data?: Partial<SpatialAudioHrtfDirectivityCone>): Uint8Array {
  const buf = new Uint8Array(sizeofSpatialAudioHrtfDirectivityCone);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.directivity !== undefined) view.setBigUint64(0, data.directivity === null ? 0n : BigInt(util.toPointer(data.directivity)), true);
  // 0x08: f32
  if (data?.InnerAngle !== undefined) view.setFloat32(8, Number(data.InnerAngle), true);
  // 0x0c: f32
  if (data?.OuterAngle !== undefined) view.setFloat32(12, Number(data.OuterAngle), true);
  return buf;
}

/**
 * Windows.Win32.Media.Audio.SpatialAudioHrtfDirectivityUnion (size: 24)
 */
export interface SpatialAudioHrtfDirectivityUnion {
  /** Windows.Win32.Media.Audio.SpatialAudioHrtfDirectivityCone */
  Cone: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Media.Audio.SpatialAudioHrtfDirectivityCardioid */
  Cardiod: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Media.Audio.SpatialAudioHrtfDirectivity */
  Omni: Uint8Array | Deno.PointerValue | null;
}

export const sizeofSpatialAudioHrtfDirectivityUnion = 24;

export function allocSpatialAudioHrtfDirectivityUnion(data?: Partial<SpatialAudioHrtfDirectivityUnion>): Uint8Array {
  const buf = new Uint8Array(sizeofSpatialAudioHrtfDirectivityUnion);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.Cone !== undefined) view.setBigUint64(0, data.Cone === null ? 0n : BigInt(util.toPointer(data.Cone)), true);
  // 0x08: pointer
  if (data?.Cardiod !== undefined) view.setBigUint64(8, data.Cardiod === null ? 0n : BigInt(util.toPointer(data.Cardiod)), true);
  // 0x10: pointer
  if (data?.Omni !== undefined) view.setBigUint64(16, data.Omni === null ? 0n : BigInt(util.toPointer(data.Omni)), true);
  return buf;
}

/**
 * Windows.Win32.Media.Audio.SpatialAudioHrtfDistanceDecay (size: 24)
 */
export interface SpatialAudioHrtfDistanceDecay {
  /** Windows.Win32.Media.Audio.SpatialAudioHrtfDistanceDecayType */
  Type: SpatialAudioHrtfDistanceDecayType;
  /** f32 */
  MaxGain: number;
  /** f32 */
  MinGain: number;
  /** f32 */
  UnityGainDistance: number;
  /** f32 */
  CutoffDistance: number;
}

export const sizeofSpatialAudioHrtfDistanceDecay = 24;

export function allocSpatialAudioHrtfDistanceDecay(data?: Partial<SpatialAudioHrtfDistanceDecay>): Uint8Array {
  const buf = new Uint8Array(sizeofSpatialAudioHrtfDistanceDecay);
  const view = new DataView(buf.buffer);
  // 0x00: i32
  if (data?.Type !== undefined) view.setInt32(0, Number(data.Type), true);
  // 0x04: f32
  if (data?.MaxGain !== undefined) view.setFloat32(4, Number(data.MaxGain), true);
  // 0x08: f32
  if (data?.MinGain !== undefined) view.setFloat32(8, Number(data.MinGain), true);
  // 0x0c: f32
  if (data?.UnityGainDistance !== undefined) view.setFloat32(12, Number(data.UnityGainDistance), true);
  // 0x10: f32
  if (data?.CutoffDistance !== undefined) view.setFloat32(16, Number(data.CutoffDistance), true);
  // 0x14: pad4
  return buf;
}

/**
 * Windows.Win32.Media.Audio.SpatialAudioHrtfActivationParams (size: 72)
 */
export interface SpatialAudioHrtfActivationParams {
  /** ptr */
  ObjectFormat: Deno.PointerValue | Uint8Array | null;
  /** Windows.Win32.Media.Audio.AudioObjectType */
  StaticObjectTypeMask: AudioObjectType;
  /** u32 */
  MinDynamicObjectCount: number;
  /** u32 */
  MaxDynamicObjectCount: number;
  /** Windows.Win32.Media.Audio.AUDIO_STREAM_CATEGORY */
  Category: AUDIO_STREAM_CATEGORY;
  /** Windows.Win32.Foundation.HANDLE */
  EventHandle: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Media.Audio.ISpatialAudioObjectRenderStreamNotify */
  NotifyObject: Uint8Array | Deno.PointerValue | null;
  /** ptr */
  DistanceDecay: Deno.PointerValue | Uint8Array | null;
  /** ptr */
  Directivity: Deno.PointerValue | Uint8Array | null;
  /** ptr */
  Environment: Deno.PointerValue | Uint8Array | null;
  /** ptr */
  Orientation: Deno.PointerValue | Uint8Array | null;
}

export const sizeofSpatialAudioHrtfActivationParams = 72;

export function allocSpatialAudioHrtfActivationParams(data?: Partial<SpatialAudioHrtfActivationParams>): Uint8Array {
  const buf = new Uint8Array(sizeofSpatialAudioHrtfActivationParams);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.ObjectFormat !== undefined) view.setBigUint64(0, data.ObjectFormat === null ? 0n : BigInt(util.toPointer(data.ObjectFormat)), true);
  // 0x08: u32
  if (data?.StaticObjectTypeMask !== undefined) view.setUint32(8, Number(data.StaticObjectTypeMask), true);
  // 0x0c: u32
  if (data?.MinDynamicObjectCount !== undefined) view.setUint32(12, Number(data.MinDynamicObjectCount), true);
  // 0x10: u32
  if (data?.MaxDynamicObjectCount !== undefined) view.setUint32(16, Number(data.MaxDynamicObjectCount), true);
  // 0x14: i32
  if (data?.Category !== undefined) view.setInt32(20, Number(data.Category), true);
  // 0x18: pointer
  if (data?.EventHandle !== undefined) view.setBigUint64(24, data.EventHandle === null ? 0n : BigInt(util.toPointer(data.EventHandle)), true);
  // 0x20: pointer
  if (data?.NotifyObject !== undefined) view.setBigUint64(32, data.NotifyObject === null ? 0n : BigInt(util.toPointer(data.NotifyObject)), true);
  // 0x28: pointer
  if (data?.DistanceDecay !== undefined) view.setBigUint64(40, data.DistanceDecay === null ? 0n : BigInt(util.toPointer(data.DistanceDecay)), true);
  // 0x30: pointer
  if (data?.Directivity !== undefined) view.setBigUint64(48, data.Directivity === null ? 0n : BigInt(util.toPointer(data.Directivity)), true);
  // 0x38: pointer
  if (data?.Environment !== undefined) view.setBigUint64(56, data.Environment === null ? 0n : BigInt(util.toPointer(data.Environment)), true);
  // 0x40: pointer
  if (data?.Orientation !== undefined) view.setBigUint64(64, data.Orientation === null ? 0n : BigInt(util.toPointer(data.Orientation)), true);
  return buf;
}

/**
 * Windows.Win32.Media.Audio.SpatialAudioHrtfActivationParams2 (size: 80)
 */
export interface SpatialAudioHrtfActivationParams2 {
  /** ptr */
  ObjectFormat: Deno.PointerValue | Uint8Array | null;
  /** Windows.Win32.Media.Audio.AudioObjectType */
  StaticObjectTypeMask: AudioObjectType;
  /** u32 */
  MinDynamicObjectCount: number;
  /** u32 */
  MaxDynamicObjectCount: number;
  /** Windows.Win32.Media.Audio.AUDIO_STREAM_CATEGORY */
  Category: AUDIO_STREAM_CATEGORY;
  /** Windows.Win32.Foundation.HANDLE */
  EventHandle: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Media.Audio.ISpatialAudioObjectRenderStreamNotify */
  NotifyObject: Uint8Array | Deno.PointerValue | null;
  /** ptr */
  DistanceDecay: Deno.PointerValue | Uint8Array | null;
  /** ptr */
  Directivity: Deno.PointerValue | Uint8Array | null;
  /** ptr */
  Environment: Deno.PointerValue | Uint8Array | null;
  /** ptr */
  Orientation: Deno.PointerValue | Uint8Array | null;
  /** Windows.Win32.Media.Audio.SPATIAL_AUDIO_STREAM_OPTIONS */
  Options: SPATIAL_AUDIO_STREAM_OPTIONS;
}

export const sizeofSpatialAudioHrtfActivationParams2 = 80;

export function allocSpatialAudioHrtfActivationParams2(data?: Partial<SpatialAudioHrtfActivationParams2>): Uint8Array {
  const buf = new Uint8Array(sizeofSpatialAudioHrtfActivationParams2);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.ObjectFormat !== undefined) view.setBigUint64(0, data.ObjectFormat === null ? 0n : BigInt(util.toPointer(data.ObjectFormat)), true);
  // 0x08: u32
  if (data?.StaticObjectTypeMask !== undefined) view.setUint32(8, Number(data.StaticObjectTypeMask), true);
  // 0x0c: u32
  if (data?.MinDynamicObjectCount !== undefined) view.setUint32(12, Number(data.MinDynamicObjectCount), true);
  // 0x10: u32
  if (data?.MaxDynamicObjectCount !== undefined) view.setUint32(16, Number(data.MaxDynamicObjectCount), true);
  // 0x14: i32
  if (data?.Category !== undefined) view.setInt32(20, Number(data.Category), true);
  // 0x18: pointer
  if (data?.EventHandle !== undefined) view.setBigUint64(24, data.EventHandle === null ? 0n : BigInt(util.toPointer(data.EventHandle)), true);
  // 0x20: pointer
  if (data?.NotifyObject !== undefined) view.setBigUint64(32, data.NotifyObject === null ? 0n : BigInt(util.toPointer(data.NotifyObject)), true);
  // 0x28: pointer
  if (data?.DistanceDecay !== undefined) view.setBigUint64(40, data.DistanceDecay === null ? 0n : BigInt(util.toPointer(data.DistanceDecay)), true);
  // 0x30: pointer
  if (data?.Directivity !== undefined) view.setBigUint64(48, data.Directivity === null ? 0n : BigInt(util.toPointer(data.Directivity)), true);
  // 0x38: pointer
  if (data?.Environment !== undefined) view.setBigUint64(56, data.Environment === null ? 0n : BigInt(util.toPointer(data.Environment)), true);
  // 0x40: pointer
  if (data?.Orientation !== undefined) view.setBigUint64(64, data.Orientation === null ? 0n : BigInt(util.toPointer(data.Orientation)), true);
  // 0x48: u32
  if (data?.Options !== undefined) view.setUint32(72, Number(data.Options), true);
  // 0x4c: pad4
  return buf;
}

/**
 * Windows.Win32.Media.Audio.DIRECTX_AUDIO_ACTIVATION_PARAMS (size: 24)
 */
export interface DIRECTX_AUDIO_ACTIVATION_PARAMS {
  /** u32 */
  cbDirectXAudioActivationParams: number;
  /** System.Guid */
  guidAudioSession: Uint8Array | Deno.PointerValue | null;
  /** u32 */
  dwAudioStreamFlags: number;
}

export const sizeofDIRECTX_AUDIO_ACTIVATION_PARAMS = 24;

export function allocDIRECTX_AUDIO_ACTIVATION_PARAMS(data?: Partial<DIRECTX_AUDIO_ACTIVATION_PARAMS>): Uint8Array {
  const buf = new Uint8Array(sizeofDIRECTX_AUDIO_ACTIVATION_PARAMS);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.cbDirectXAudioActivationParams !== undefined) view.setUint32(0, Number(data.cbDirectXAudioActivationParams), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.guidAudioSession !== undefined) view.setBigUint64(8, data.guidAudioSession === null ? 0n : BigInt(util.toPointer(data.guidAudioSession)), true);
  // 0x10: u32
  if (data?.dwAudioStreamFlags !== undefined) view.setUint32(16, Number(data.dwAudioStreamFlags), true);
  // 0x14: pad4
  return buf;
}

/**
 * Windows.Win32.Media.Audio.AudioExtensionParams (size: 32)
 */
export interface AudioExtensionParams {
  /** Windows.Win32.Foundation.LPARAM */
  AddPageParam: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Media.Audio.IMMDevice */
  pEndpoint: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Media.Audio.IMMDevice */
  pPnpInterface: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Media.Audio.IMMDevice */
  pPnpDevnode: Uint8Array | Deno.PointerValue | null;
}

export const sizeofAudioExtensionParams = 32;

export function allocAudioExtensionParams(data?: Partial<AudioExtensionParams>): Uint8Array {
  const buf = new Uint8Array(sizeofAudioExtensionParams);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.AddPageParam !== undefined) view.setBigUint64(0, data.AddPageParam === null ? 0n : BigInt(util.toPointer(data.AddPageParam)), true);
  // 0x08: pointer
  if (data?.pEndpoint !== undefined) view.setBigUint64(8, data.pEndpoint === null ? 0n : BigInt(util.toPointer(data.pEndpoint)), true);
  // 0x10: pointer
  if (data?.pPnpInterface !== undefined) view.setBigUint64(16, data.pPnpInterface === null ? 0n : BigInt(util.toPointer(data.pPnpInterface)), true);
  // 0x18: pointer
  if (data?.pPnpDevnode !== undefined) view.setBigUint64(24, data.pPnpDevnode === null ? 0n : BigInt(util.toPointer(data.pPnpDevnode)), true);
  return buf;
}

/**
 * Windows.Win32.Media.Audio.SpatialAudioMetadataItemsInfo (size: 16)
 */
export interface SpatialAudioMetadataItemsInfo {
  /** u16 */
  FrameCount: number;
  /** u16 */
  ItemCount: number;
  /** u16 */
  MaxItemCount: number;
  /** u32 */
  MaxValueBufferLength: number;
}

export const sizeofSpatialAudioMetadataItemsInfo = 16;

export function allocSpatialAudioMetadataItemsInfo(data?: Partial<SpatialAudioMetadataItemsInfo>): Uint8Array {
  const buf = new Uint8Array(sizeofSpatialAudioMetadataItemsInfo);
  const view = new DataView(buf.buffer);
  // 0x00: u16
  if (data?.FrameCount !== undefined) view.setUint16(0, Number(data.FrameCount), true);
  // 0x02: u16
  if (data?.ItemCount !== undefined) view.setUint16(2, Number(data.ItemCount), true);
  // 0x04: u16
  if (data?.MaxItemCount !== undefined) view.setUint16(4, Number(data.MaxItemCount), true);
  // 0x06: u32
  if (data?.MaxValueBufferLength !== undefined) view.setUint32(6, Number(data.MaxValueBufferLength), true);
  // 0x0a: pad6
  return buf;
}

/**
 * Windows.Win32.Media.Audio.SpatialAudioObjectRenderStreamForMetadataActivationParams (size: 64)
 */
export interface SpatialAudioObjectRenderStreamForMetadataActivationParams {
  /** ptr */
  ObjectFormat: Deno.PointerValue | Uint8Array | null;
  /** Windows.Win32.Media.Audio.AudioObjectType */
  StaticObjectTypeMask: AudioObjectType;
  /** u32 */
  MinDynamicObjectCount: number;
  /** u32 */
  MaxDynamicObjectCount: number;
  /** Windows.Win32.Media.Audio.AUDIO_STREAM_CATEGORY */
  Category: AUDIO_STREAM_CATEGORY;
  /** Windows.Win32.Foundation.HANDLE */
  EventHandle: Uint8Array | Deno.PointerValue | null;
  /** System.Guid */
  MetadataFormatId: Uint8Array | Deno.PointerValue | null;
  /** u16 */
  MaxMetadataItemCount: number;
  /** ptr */
  MetadataActivationParams: Deno.PointerValue | Uint8Array | null;
  /** Windows.Win32.Media.Audio.ISpatialAudioObjectRenderStreamNotify */
  NotifyObject: Uint8Array | Deno.PointerValue | null;
}

export const sizeofSpatialAudioObjectRenderStreamForMetadataActivationParams = 64;

export function allocSpatialAudioObjectRenderStreamForMetadataActivationParams(data?: Partial<SpatialAudioObjectRenderStreamForMetadataActivationParams>): Uint8Array {
  const buf = new Uint8Array(sizeofSpatialAudioObjectRenderStreamForMetadataActivationParams);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.ObjectFormat !== undefined) view.setBigUint64(0, data.ObjectFormat === null ? 0n : BigInt(util.toPointer(data.ObjectFormat)), true);
  // 0x08: u32
  if (data?.StaticObjectTypeMask !== undefined) view.setUint32(8, Number(data.StaticObjectTypeMask), true);
  // 0x0c: u32
  if (data?.MinDynamicObjectCount !== undefined) view.setUint32(12, Number(data.MinDynamicObjectCount), true);
  // 0x10: u32
  if (data?.MaxDynamicObjectCount !== undefined) view.setUint32(16, Number(data.MaxDynamicObjectCount), true);
  // 0x14: i32
  if (data?.Category !== undefined) view.setInt32(20, Number(data.Category), true);
  // 0x18: pointer
  if (data?.EventHandle !== undefined) view.setBigUint64(24, data.EventHandle === null ? 0n : BigInt(util.toPointer(data.EventHandle)), true);
  // 0x20: pointer
  if (data?.MetadataFormatId !== undefined) view.setBigUint64(32, data.MetadataFormatId === null ? 0n : BigInt(util.toPointer(data.MetadataFormatId)), true);
  // 0x28: u16
  if (data?.MaxMetadataItemCount !== undefined) view.setUint16(40, Number(data.MaxMetadataItemCount), true);
  // 0x2a: pad6
  // 0x30: pointer
  if (data?.MetadataActivationParams !== undefined) view.setBigUint64(48, data.MetadataActivationParams === null ? 0n : BigInt(util.toPointer(data.MetadataActivationParams)), true);
  // 0x38: pointer
  if (data?.NotifyObject !== undefined) view.setBigUint64(56, data.NotifyObject === null ? 0n : BigInt(util.toPointer(data.NotifyObject)), true);
  return buf;
}

/**
 * Windows.Win32.Media.Audio.SpatialAudioObjectRenderStreamForMetadataActivationParams2 (size: 72)
 */
export interface SpatialAudioObjectRenderStreamForMetadataActivationParams2 {
  /** ptr */
  ObjectFormat: Deno.PointerValue | Uint8Array | null;
  /** Windows.Win32.Media.Audio.AudioObjectType */
  StaticObjectTypeMask: AudioObjectType;
  /** u32 */
  MinDynamicObjectCount: number;
  /** u32 */
  MaxDynamicObjectCount: number;
  /** Windows.Win32.Media.Audio.AUDIO_STREAM_CATEGORY */
  Category: AUDIO_STREAM_CATEGORY;
  /** Windows.Win32.Foundation.HANDLE */
  EventHandle: Uint8Array | Deno.PointerValue | null;
  /** System.Guid */
  MetadataFormatId: Uint8Array | Deno.PointerValue | null;
  /** u32 */
  MaxMetadataItemCount: number;
  /** ptr */
  MetadataActivationParams: Deno.PointerValue | Uint8Array | null;
  /** Windows.Win32.Media.Audio.ISpatialAudioObjectRenderStreamNotify */
  NotifyObject: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Media.Audio.SPATIAL_AUDIO_STREAM_OPTIONS */
  Options: SPATIAL_AUDIO_STREAM_OPTIONS;
}

export const sizeofSpatialAudioObjectRenderStreamForMetadataActivationParams2 = 72;

export function allocSpatialAudioObjectRenderStreamForMetadataActivationParams2(data?: Partial<SpatialAudioObjectRenderStreamForMetadataActivationParams2>): Uint8Array {
  const buf = new Uint8Array(sizeofSpatialAudioObjectRenderStreamForMetadataActivationParams2);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.ObjectFormat !== undefined) view.setBigUint64(0, data.ObjectFormat === null ? 0n : BigInt(util.toPointer(data.ObjectFormat)), true);
  // 0x08: u32
  if (data?.StaticObjectTypeMask !== undefined) view.setUint32(8, Number(data.StaticObjectTypeMask), true);
  // 0x0c: u32
  if (data?.MinDynamicObjectCount !== undefined) view.setUint32(12, Number(data.MinDynamicObjectCount), true);
  // 0x10: u32
  if (data?.MaxDynamicObjectCount !== undefined) view.setUint32(16, Number(data.MaxDynamicObjectCount), true);
  // 0x14: i32
  if (data?.Category !== undefined) view.setInt32(20, Number(data.Category), true);
  // 0x18: pointer
  if (data?.EventHandle !== undefined) view.setBigUint64(24, data.EventHandle === null ? 0n : BigInt(util.toPointer(data.EventHandle)), true);
  // 0x20: pointer
  if (data?.MetadataFormatId !== undefined) view.setBigUint64(32, data.MetadataFormatId === null ? 0n : BigInt(util.toPointer(data.MetadataFormatId)), true);
  // 0x28: u32
  if (data?.MaxMetadataItemCount !== undefined) view.setUint32(40, Number(data.MaxMetadataItemCount), true);
  // 0x2c: pad4
  // 0x30: pointer
  if (data?.MetadataActivationParams !== undefined) view.setBigUint64(48, data.MetadataActivationParams === null ? 0n : BigInt(util.toPointer(data.MetadataActivationParams)), true);
  // 0x38: pointer
  if (data?.NotifyObject !== undefined) view.setBigUint64(56, data.NotifyObject === null ? 0n : BigInt(util.toPointer(data.NotifyObject)), true);
  // 0x40: u32
  if (data?.Options !== undefined) view.setUint32(64, Number(data.Options), true);
  // 0x44: pad4
  return buf;
}

/**
 * Windows.Win32.Media.Audio.AUDIOCLIENT_PROCESS_LOOPBACK_PARAMS (size: 8)
 */
export interface AUDIOCLIENT_PROCESS_LOOPBACK_PARAMS {
  /** u32 */
  TargetProcessId: number;
  /** Windows.Win32.Media.Audio.PROCESS_LOOPBACK_MODE */
  ProcessLoopbackMode: PROCESS_LOOPBACK_MODE;
}

export const sizeofAUDIOCLIENT_PROCESS_LOOPBACK_PARAMS = 8;

export function allocAUDIOCLIENT_PROCESS_LOOPBACK_PARAMS(data?: Partial<AUDIOCLIENT_PROCESS_LOOPBACK_PARAMS>): Uint8Array {
  const buf = new Uint8Array(sizeofAUDIOCLIENT_PROCESS_LOOPBACK_PARAMS);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.TargetProcessId !== undefined) view.setUint32(0, Number(data.TargetProcessId), true);
  // 0x04: i32
  if (data?.ProcessLoopbackMode !== undefined) view.setInt32(4, Number(data.ProcessLoopbackMode), true);
  return buf;
}

/**
 * Windows.Win32.Media.Audio.AUDIOCLIENT_ACTIVATION_PARAMS (size: 16)
 */
export interface AUDIOCLIENT_ACTIVATION_PARAMS {
  /** Windows.Win32.Media.Audio.AUDIOCLIENT_ACTIVATION_TYPE */
  ActivationType: AUDIOCLIENT_ACTIVATION_TYPE;
  /** _Anonymous_e__Union */
  Anonymous: Uint8Array | Deno.PointerValue | null;
}

export const sizeofAUDIOCLIENT_ACTIVATION_PARAMS = 16;

export function allocAUDIOCLIENT_ACTIVATION_PARAMS(data?: Partial<AUDIOCLIENT_ACTIVATION_PARAMS>): Uint8Array {
  const buf = new Uint8Array(sizeofAUDIOCLIENT_ACTIVATION_PARAMS);
  const view = new DataView(buf.buffer);
  // 0x00: i32
  if (data?.ActivationType !== undefined) view.setInt32(0, Number(data.ActivationType), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.Anonymous !== undefined) view.setBigUint64(8, data.Anonymous === null ? 0n : BigInt(util.toPointer(data.Anonymous)), true);
  return buf;
}

export type HICON = Deno.PointerValue;

/**
 * Windows.Win32.Media.Audio.ACMDRIVERDETAILSA (size: 88)
 */
export interface ACMDRIVERDETAILSA {
  /** u32 */
  cbStruct: number;
  /** u32 */
  fccType: number;
  /** u32 */
  fccComp: number;
  /** u16 */
  wMid: number;
  /** u16 */
  wPid: number;
  /** u32 */
  vdwACM: number;
  /** u32 */
  vdwDriver: number;
  /** u32 */
  fdwSupport: number;
  /** u32 */
  cFormatTags: number;
  /** u32 */
  cFilterTags: number;
  /** Windows.Win32.UI.WindowsAndMessaging.HICON */
  hicon: Uint8Array | Deno.PointerValue | null;
  /** array */
  szShortName: Deno.PointerValue | null;
  /** array */
  szLongName: Deno.PointerValue | null;
  /** array */
  szCopyright: Deno.PointerValue | null;
  /** array */
  szLicensing: Deno.PointerValue | null;
  /** array */
  szFeatures: Deno.PointerValue | null;
}

export const sizeofACMDRIVERDETAILSA = 88;

export function allocACMDRIVERDETAILSA(data?: Partial<ACMDRIVERDETAILSA>): Uint8Array {
  const buf = new Uint8Array(sizeofACMDRIVERDETAILSA);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.cbStruct !== undefined) view.setUint32(0, Number(data.cbStruct), true);
  // 0x04: u32
  if (data?.fccType !== undefined) view.setUint32(4, Number(data.fccType), true);
  // 0x08: u32
  if (data?.fccComp !== undefined) view.setUint32(8, Number(data.fccComp), true);
  // 0x0c: u16
  if (data?.wMid !== undefined) view.setUint16(12, Number(data.wMid), true);
  // 0x0e: u16
  if (data?.wPid !== undefined) view.setUint16(14, Number(data.wPid), true);
  // 0x10: u32
  if (data?.vdwACM !== undefined) view.setUint32(16, Number(data.vdwACM), true);
  // 0x14: u32
  if (data?.vdwDriver !== undefined) view.setUint32(20, Number(data.vdwDriver), true);
  // 0x18: u32
  if (data?.fdwSupport !== undefined) view.setUint32(24, Number(data.fdwSupport), true);
  // 0x1c: u32
  if (data?.cFormatTags !== undefined) view.setUint32(28, Number(data.cFormatTags), true);
  // 0x20: u32
  if (data?.cFilterTags !== undefined) view.setUint32(32, Number(data.cFilterTags), true);
  // 0x24: pad4
  // 0x28: pointer
  if (data?.hicon !== undefined) view.setBigUint64(40, data.hicon === null ? 0n : BigInt(util.toPointer(data.hicon)), true);
  // 0x30: pointer
  if (data?.szShortName !== undefined) view.setBigUint64(48, data.szShortName === null ? 0n : BigInt(util.toPointer(data.szShortName)), true);
  // 0x38: pointer
  if (data?.szLongName !== undefined) view.setBigUint64(56, data.szLongName === null ? 0n : BigInt(util.toPointer(data.szLongName)), true);
  // 0x40: pointer
  if (data?.szCopyright !== undefined) view.setBigUint64(64, data.szCopyright === null ? 0n : BigInt(util.toPointer(data.szCopyright)), true);
  // 0x48: pointer
  if (data?.szLicensing !== undefined) view.setBigUint64(72, data.szLicensing === null ? 0n : BigInt(util.toPointer(data.szLicensing)), true);
  // 0x50: pointer
  if (data?.szFeatures !== undefined) view.setBigUint64(80, data.szFeatures === null ? 0n : BigInt(util.toPointer(data.szFeatures)), true);
  return buf;
}

/**
 * Windows.Win32.Media.Audio.ACMDRIVERDETAILSW (size: 88)
 */
export interface ACMDRIVERDETAILSW {
  /** u32 */
  cbStruct: number;
  /** u32 */
  fccType: number;
  /** u32 */
  fccComp: number;
  /** u16 */
  wMid: number;
  /** u16 */
  wPid: number;
  /** u32 */
  vdwACM: number;
  /** u32 */
  vdwDriver: number;
  /** u32 */
  fdwSupport: number;
  /** u32 */
  cFormatTags: number;
  /** u32 */
  cFilterTags: number;
  /** Windows.Win32.UI.WindowsAndMessaging.HICON */
  hicon: Uint8Array | Deno.PointerValue | null;
  /** array */
  szShortName: Deno.PointerValue | null;
  /** array */
  szLongName: Deno.PointerValue | null;
  /** array */
  szCopyright: Deno.PointerValue | null;
  /** array */
  szLicensing: Deno.PointerValue | null;
  /** array */
  szFeatures: Deno.PointerValue | null;
}

export const sizeofACMDRIVERDETAILSW = 88;

export function allocACMDRIVERDETAILSW(data?: Partial<ACMDRIVERDETAILSW>): Uint8Array {
  const buf = new Uint8Array(sizeofACMDRIVERDETAILSW);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.cbStruct !== undefined) view.setUint32(0, Number(data.cbStruct), true);
  // 0x04: u32
  if (data?.fccType !== undefined) view.setUint32(4, Number(data.fccType), true);
  // 0x08: u32
  if (data?.fccComp !== undefined) view.setUint32(8, Number(data.fccComp), true);
  // 0x0c: u16
  if (data?.wMid !== undefined) view.setUint16(12, Number(data.wMid), true);
  // 0x0e: u16
  if (data?.wPid !== undefined) view.setUint16(14, Number(data.wPid), true);
  // 0x10: u32
  if (data?.vdwACM !== undefined) view.setUint32(16, Number(data.vdwACM), true);
  // 0x14: u32
  if (data?.vdwDriver !== undefined) view.setUint32(20, Number(data.vdwDriver), true);
  // 0x18: u32
  if (data?.fdwSupport !== undefined) view.setUint32(24, Number(data.fdwSupport), true);
  // 0x1c: u32
  if (data?.cFormatTags !== undefined) view.setUint32(28, Number(data.cFormatTags), true);
  // 0x20: u32
  if (data?.cFilterTags !== undefined) view.setUint32(32, Number(data.cFilterTags), true);
  // 0x24: pad4
  // 0x28: pointer
  if (data?.hicon !== undefined) view.setBigUint64(40, data.hicon === null ? 0n : BigInt(util.toPointer(data.hicon)), true);
  // 0x30: pointer
  if (data?.szShortName !== undefined) view.setBigUint64(48, data.szShortName === null ? 0n : BigInt(util.toPointer(data.szShortName)), true);
  // 0x38: pointer
  if (data?.szLongName !== undefined) view.setBigUint64(56, data.szLongName === null ? 0n : BigInt(util.toPointer(data.szLongName)), true);
  // 0x40: pointer
  if (data?.szCopyright !== undefined) view.setBigUint64(64, data.szCopyright === null ? 0n : BigInt(util.toPointer(data.szCopyright)), true);
  // 0x48: pointer
  if (data?.szLicensing !== undefined) view.setBigUint64(72, data.szLicensing === null ? 0n : BigInt(util.toPointer(data.szLicensing)), true);
  // 0x50: pointer
  if (data?.szFeatures !== undefined) view.setBigUint64(80, data.szFeatures === null ? 0n : BigInt(util.toPointer(data.szFeatures)), true);
  return buf;
}

/**
 * Windows.Win32.Media.Audio.ACMFORMATTAGDETAILSA (size: 32)
 */
export interface ACMFORMATTAGDETAILSA {
  /** u32 */
  cbStruct: number;
  /** u32 */
  dwFormatTagIndex: number;
  /** u32 */
  dwFormatTag: number;
  /** u32 */
  cbFormatSize: number;
  /** u32 */
  fdwSupport: number;
  /** u32 */
  cStandardFormats: number;
  /** array */
  szFormatTag: Deno.PointerValue | null;
}

export const sizeofACMFORMATTAGDETAILSA = 32;

export function allocACMFORMATTAGDETAILSA(data?: Partial<ACMFORMATTAGDETAILSA>): Uint8Array {
  const buf = new Uint8Array(sizeofACMFORMATTAGDETAILSA);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.cbStruct !== undefined) view.setUint32(0, Number(data.cbStruct), true);
  // 0x04: u32
  if (data?.dwFormatTagIndex !== undefined) view.setUint32(4, Number(data.dwFormatTagIndex), true);
  // 0x08: u32
  if (data?.dwFormatTag !== undefined) view.setUint32(8, Number(data.dwFormatTag), true);
  // 0x0c: u32
  if (data?.cbFormatSize !== undefined) view.setUint32(12, Number(data.cbFormatSize), true);
  // 0x10: u32
  if (data?.fdwSupport !== undefined) view.setUint32(16, Number(data.fdwSupport), true);
  // 0x14: u32
  if (data?.cStandardFormats !== undefined) view.setUint32(20, Number(data.cStandardFormats), true);
  // 0x18: pointer
  if (data?.szFormatTag !== undefined) view.setBigUint64(24, data.szFormatTag === null ? 0n : BigInt(util.toPointer(data.szFormatTag)), true);
  return buf;
}

/**
 * Windows.Win32.Media.Audio.ACMFORMATTAGDETAILSW (size: 32)
 */
export interface ACMFORMATTAGDETAILSW {
  /** u32 */
  cbStruct: number;
  /** u32 */
  dwFormatTagIndex: number;
  /** u32 */
  dwFormatTag: number;
  /** u32 */
  cbFormatSize: number;
  /** u32 */
  fdwSupport: number;
  /** u32 */
  cStandardFormats: number;
  /** array */
  szFormatTag: Deno.PointerValue | null;
}

export const sizeofACMFORMATTAGDETAILSW = 32;

export function allocACMFORMATTAGDETAILSW(data?: Partial<ACMFORMATTAGDETAILSW>): Uint8Array {
  const buf = new Uint8Array(sizeofACMFORMATTAGDETAILSW);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.cbStruct !== undefined) view.setUint32(0, Number(data.cbStruct), true);
  // 0x04: u32
  if (data?.dwFormatTagIndex !== undefined) view.setUint32(4, Number(data.dwFormatTagIndex), true);
  // 0x08: u32
  if (data?.dwFormatTag !== undefined) view.setUint32(8, Number(data.dwFormatTag), true);
  // 0x0c: u32
  if (data?.cbFormatSize !== undefined) view.setUint32(12, Number(data.cbFormatSize), true);
  // 0x10: u32
  if (data?.fdwSupport !== undefined) view.setUint32(16, Number(data.fdwSupport), true);
  // 0x14: u32
  if (data?.cStandardFormats !== undefined) view.setUint32(20, Number(data.cStandardFormats), true);
  // 0x18: pointer
  if (data?.szFormatTag !== undefined) view.setBigUint64(24, data.szFormatTag === null ? 0n : BigInt(util.toPointer(data.szFormatTag)), true);
  return buf;
}

/**
 * Windows.Win32.Media.Audio.ACMFORMATDETAILSA (size: 40)
 */
export interface ACMFORMATDETAILSA {
  /** u32 */
  cbStruct: number;
  /** u32 */
  dwFormatIndex: number;
  /** u32 */
  dwFormatTag: number;
  /** u32 */
  fdwSupport: number;
  /** ptr */
  pwfx: Deno.PointerValue | Uint8Array | null;
  /** u32 */
  cbwfx: number;
  /** array */
  szFormat: Deno.PointerValue | null;
}

export const sizeofACMFORMATDETAILSA = 40;

export function allocACMFORMATDETAILSA(data?: Partial<ACMFORMATDETAILSA>): Uint8Array {
  const buf = new Uint8Array(sizeofACMFORMATDETAILSA);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.cbStruct !== undefined) view.setUint32(0, Number(data.cbStruct), true);
  // 0x04: u32
  if (data?.dwFormatIndex !== undefined) view.setUint32(4, Number(data.dwFormatIndex), true);
  // 0x08: u32
  if (data?.dwFormatTag !== undefined) view.setUint32(8, Number(data.dwFormatTag), true);
  // 0x0c: u32
  if (data?.fdwSupport !== undefined) view.setUint32(12, Number(data.fdwSupport), true);
  // 0x10: pointer
  if (data?.pwfx !== undefined) view.setBigUint64(16, data.pwfx === null ? 0n : BigInt(util.toPointer(data.pwfx)), true);
  // 0x18: u32
  if (data?.cbwfx !== undefined) view.setUint32(24, Number(data.cbwfx), true);
  // 0x1c: pad4
  // 0x20: pointer
  if (data?.szFormat !== undefined) view.setBigUint64(32, data.szFormat === null ? 0n : BigInt(util.toPointer(data.szFormat)), true);
  return buf;
}

/**
 * Windows.Win32.Media.Audio.tACMFORMATDETAILSW (size: 40)
 */
export interface tACMFORMATDETAILSW {
  /** u32 */
  cbStruct: number;
  /** u32 */
  dwFormatIndex: number;
  /** u32 */
  dwFormatTag: number;
  /** u32 */
  fdwSupport: number;
  /** ptr */
  pwfx: Deno.PointerValue | Uint8Array | null;
  /** u32 */
  cbwfx: number;
  /** array */
  szFormat: Deno.PointerValue | null;
}

export const sizeofTACMFORMATDETAILSW = 40;

export function allocTACMFORMATDETAILSW(data?: Partial<tACMFORMATDETAILSW>): Uint8Array {
  const buf = new Uint8Array(sizeofTACMFORMATDETAILSW);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.cbStruct !== undefined) view.setUint32(0, Number(data.cbStruct), true);
  // 0x04: u32
  if (data?.dwFormatIndex !== undefined) view.setUint32(4, Number(data.dwFormatIndex), true);
  // 0x08: u32
  if (data?.dwFormatTag !== undefined) view.setUint32(8, Number(data.dwFormatTag), true);
  // 0x0c: u32
  if (data?.fdwSupport !== undefined) view.setUint32(12, Number(data.fdwSupport), true);
  // 0x10: pointer
  if (data?.pwfx !== undefined) view.setBigUint64(16, data.pwfx === null ? 0n : BigInt(util.toPointer(data.pwfx)), true);
  // 0x18: u32
  if (data?.cbwfx !== undefined) view.setUint32(24, Number(data.cbwfx), true);
  // 0x1c: pad4
  // 0x20: pointer
  if (data?.szFormat !== undefined) view.setBigUint64(32, data.szFormat === null ? 0n : BigInt(util.toPointer(data.szFormat)), true);
  return buf;
}

export type HWND = Deno.PointerValue;

export type HINSTANCE = Deno.PointerValue;

/**
 * Windows.Win32.Media.Audio.ACMFORMATCHOOSEA (size: 112)
 */
export interface ACMFORMATCHOOSEA {
  /** u32 */
  cbStruct: number;
  /** u32 */
  fdwStyle: number;
  /** Windows.Win32.Foundation.HWND */
  hwndOwner: Deno.PointerValue | null;
  /** ptr */
  pwfx: Deno.PointerValue | Uint8Array | null;
  /** u32 */
  cbwfx: number;
  /** Windows.Win32.Foundation.PSTR */
  pszTitle: string | null | Uint8Array;
  /** array */
  szFormatTag: Deno.PointerValue | null;
  /** array */
  szFormat: Deno.PointerValue | null;
  /** Windows.Win32.Foundation.PSTR */
  pszName: string | null | Uint8Array;
  /** u32 */
  cchName: number;
  /** u32 */
  fdwEnum: number;
  /** ptr */
  pwfxEnum: Deno.PointerValue | Uint8Array | null;
  /** Windows.Win32.Foundation.HINSTANCE */
  hInstance: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Foundation.PSTR */
  pszTemplateName: string | null | Uint8Array;
  /** Windows.Win32.Foundation.LPARAM */
  lCustData: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Media.Audio.ACMFORMATCHOOSEHOOKPROCA */
  pfnHook: Uint8Array | Deno.PointerValue | null;
}

export const sizeofACMFORMATCHOOSEA = 112;

export function allocACMFORMATCHOOSEA(data?: Partial<ACMFORMATCHOOSEA>): Uint8Array {
  const buf = new Uint8Array(sizeofACMFORMATCHOOSEA);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.cbStruct !== undefined) view.setUint32(0, Number(data.cbStruct), true);
  // 0x04: u32
  if (data?.fdwStyle !== undefined) view.setUint32(4, Number(data.fdwStyle), true);
  // 0x08: pointer
  if (data?.hwndOwner !== undefined) view.setBigUint64(8, data.hwndOwner === null ? 0n : BigInt(util.toPointer(data.hwndOwner)), true);
  // 0x10: pointer
  if (data?.pwfx !== undefined) view.setBigUint64(16, data.pwfx === null ? 0n : BigInt(util.toPointer(data.pwfx)), true);
  // 0x18: u32
  if (data?.cbwfx !== undefined) view.setUint32(24, Number(data.cbwfx), true);
  // 0x1c: pad4
  // 0x20: buffer
  if (data?.pszTitle !== undefined) {
    (buf as any)._f32 = util.pstrToFfi(data.pszTitle);
    view.setBigUint64(32, (buf as any)._f32 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f32)), true);
  }
  // 0x28: pointer
  if (data?.szFormatTag !== undefined) view.setBigUint64(40, data.szFormatTag === null ? 0n : BigInt(util.toPointer(data.szFormatTag)), true);
  // 0x30: pointer
  if (data?.szFormat !== undefined) view.setBigUint64(48, data.szFormat === null ? 0n : BigInt(util.toPointer(data.szFormat)), true);
  // 0x38: buffer
  if (data?.pszName !== undefined) {
    (buf as any)._f56 = util.pstrToFfi(data.pszName);
    view.setBigUint64(56, (buf as any)._f56 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f56)), true);
  }
  // 0x40: u32
  if (data?.cchName !== undefined) view.setUint32(64, Number(data.cchName), true);
  // 0x44: u32
  if (data?.fdwEnum !== undefined) view.setUint32(68, Number(data.fdwEnum), true);
  // 0x48: pointer
  if (data?.pwfxEnum !== undefined) view.setBigUint64(72, data.pwfxEnum === null ? 0n : BigInt(util.toPointer(data.pwfxEnum)), true);
  // 0x50: pointer
  if (data?.hInstance !== undefined) view.setBigUint64(80, data.hInstance === null ? 0n : BigInt(util.toPointer(data.hInstance)), true);
  // 0x58: buffer
  if (data?.pszTemplateName !== undefined) {
    (buf as any)._f88 = util.pstrToFfi(data.pszTemplateName);
    view.setBigUint64(88, (buf as any)._f88 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f88)), true);
  }
  // 0x60: pointer
  if (data?.lCustData !== undefined) view.setBigUint64(96, data.lCustData === null ? 0n : BigInt(util.toPointer(data.lCustData)), true);
  // 0x68: pointer
  if (data?.pfnHook !== undefined) view.setBigUint64(104, data.pfnHook === null ? 0n : BigInt(util.toPointer(data.pfnHook)), true);
  return buf;
}

/**
 * Windows.Win32.Media.Audio.ACMFORMATCHOOSEW (size: 112)
 */
export interface ACMFORMATCHOOSEW {
  /** u32 */
  cbStruct: number;
  /** u32 */
  fdwStyle: number;
  /** Windows.Win32.Foundation.HWND */
  hwndOwner: Deno.PointerValue | null;
  /** ptr */
  pwfx: Deno.PointerValue | Uint8Array | null;
  /** u32 */
  cbwfx: number;
  /** Windows.Win32.Foundation.PWSTR */
  pszTitle: string | null | Uint8Array | Uint16Array;
  /** array */
  szFormatTag: Deno.PointerValue | null;
  /** array */
  szFormat: Deno.PointerValue | null;
  /** Windows.Win32.Foundation.PWSTR */
  pszName: string | null | Uint8Array | Uint16Array;
  /** u32 */
  cchName: number;
  /** u32 */
  fdwEnum: number;
  /** ptr */
  pwfxEnum: Deno.PointerValue | Uint8Array | null;
  /** Windows.Win32.Foundation.HINSTANCE */
  hInstance: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Foundation.PWSTR */
  pszTemplateName: string | null | Uint8Array | Uint16Array;
  /** Windows.Win32.Foundation.LPARAM */
  lCustData: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Media.Audio.ACMFORMATCHOOSEHOOKPROCW */
  pfnHook: Uint8Array | Deno.PointerValue | null;
}

export const sizeofACMFORMATCHOOSEW = 112;

export function allocACMFORMATCHOOSEW(data?: Partial<ACMFORMATCHOOSEW>): Uint8Array {
  const buf = new Uint8Array(sizeofACMFORMATCHOOSEW);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.cbStruct !== undefined) view.setUint32(0, Number(data.cbStruct), true);
  // 0x04: u32
  if (data?.fdwStyle !== undefined) view.setUint32(4, Number(data.fdwStyle), true);
  // 0x08: pointer
  if (data?.hwndOwner !== undefined) view.setBigUint64(8, data.hwndOwner === null ? 0n : BigInt(util.toPointer(data.hwndOwner)), true);
  // 0x10: pointer
  if (data?.pwfx !== undefined) view.setBigUint64(16, data.pwfx === null ? 0n : BigInt(util.toPointer(data.pwfx)), true);
  // 0x18: u32
  if (data?.cbwfx !== undefined) view.setUint32(24, Number(data.cbwfx), true);
  // 0x1c: pad4
  // 0x20: buffer
  if (data?.pszTitle !== undefined) {
    (buf as any)._f32 = util.pwstrToFfi(data.pszTitle);
    view.setBigUint64(32, (buf as any)._f32 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f32)), true);
  }
  // 0x28: pointer
  if (data?.szFormatTag !== undefined) view.setBigUint64(40, data.szFormatTag === null ? 0n : BigInt(util.toPointer(data.szFormatTag)), true);
  // 0x30: pointer
  if (data?.szFormat !== undefined) view.setBigUint64(48, data.szFormat === null ? 0n : BigInt(util.toPointer(data.szFormat)), true);
  // 0x38: buffer
  if (data?.pszName !== undefined) {
    (buf as any)._f56 = util.pwstrToFfi(data.pszName);
    view.setBigUint64(56, (buf as any)._f56 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f56)), true);
  }
  // 0x40: u32
  if (data?.cchName !== undefined) view.setUint32(64, Number(data.cchName), true);
  // 0x44: u32
  if (data?.fdwEnum !== undefined) view.setUint32(68, Number(data.fdwEnum), true);
  // 0x48: pointer
  if (data?.pwfxEnum !== undefined) view.setBigUint64(72, data.pwfxEnum === null ? 0n : BigInt(util.toPointer(data.pwfxEnum)), true);
  // 0x50: pointer
  if (data?.hInstance !== undefined) view.setBigUint64(80, data.hInstance === null ? 0n : BigInt(util.toPointer(data.hInstance)), true);
  // 0x58: buffer
  if (data?.pszTemplateName !== undefined) {
    (buf as any)._f88 = util.pwstrToFfi(data.pszTemplateName);
    view.setBigUint64(88, (buf as any)._f88 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f88)), true);
  }
  // 0x60: pointer
  if (data?.lCustData !== undefined) view.setBigUint64(96, data.lCustData === null ? 0n : BigInt(util.toPointer(data.lCustData)), true);
  // 0x68: pointer
  if (data?.pfnHook !== undefined) view.setBigUint64(104, data.pfnHook === null ? 0n : BigInt(util.toPointer(data.pfnHook)), true);
  return buf;
}

/**
 * Windows.Win32.Media.Audio.ACMFILTERTAGDETAILSA (size: 32)
 */
export interface ACMFILTERTAGDETAILSA {
  /** u32 */
  cbStruct: number;
  /** u32 */
  dwFilterTagIndex: number;
  /** u32 */
  dwFilterTag: number;
  /** u32 */
  cbFilterSize: number;
  /** u32 */
  fdwSupport: number;
  /** u32 */
  cStandardFilters: number;
  /** array */
  szFilterTag: Deno.PointerValue | null;
}

export const sizeofACMFILTERTAGDETAILSA = 32;

export function allocACMFILTERTAGDETAILSA(data?: Partial<ACMFILTERTAGDETAILSA>): Uint8Array {
  const buf = new Uint8Array(sizeofACMFILTERTAGDETAILSA);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.cbStruct !== undefined) view.setUint32(0, Number(data.cbStruct), true);
  // 0x04: u32
  if (data?.dwFilterTagIndex !== undefined) view.setUint32(4, Number(data.dwFilterTagIndex), true);
  // 0x08: u32
  if (data?.dwFilterTag !== undefined) view.setUint32(8, Number(data.dwFilterTag), true);
  // 0x0c: u32
  if (data?.cbFilterSize !== undefined) view.setUint32(12, Number(data.cbFilterSize), true);
  // 0x10: u32
  if (data?.fdwSupport !== undefined) view.setUint32(16, Number(data.fdwSupport), true);
  // 0x14: u32
  if (data?.cStandardFilters !== undefined) view.setUint32(20, Number(data.cStandardFilters), true);
  // 0x18: pointer
  if (data?.szFilterTag !== undefined) view.setBigUint64(24, data.szFilterTag === null ? 0n : BigInt(util.toPointer(data.szFilterTag)), true);
  return buf;
}

/**
 * Windows.Win32.Media.Audio.ACMFILTERTAGDETAILSW (size: 32)
 */
export interface ACMFILTERTAGDETAILSW {
  /** u32 */
  cbStruct: number;
  /** u32 */
  dwFilterTagIndex: number;
  /** u32 */
  dwFilterTag: number;
  /** u32 */
  cbFilterSize: number;
  /** u32 */
  fdwSupport: number;
  /** u32 */
  cStandardFilters: number;
  /** array */
  szFilterTag: Deno.PointerValue | null;
}

export const sizeofACMFILTERTAGDETAILSW = 32;

export function allocACMFILTERTAGDETAILSW(data?: Partial<ACMFILTERTAGDETAILSW>): Uint8Array {
  const buf = new Uint8Array(sizeofACMFILTERTAGDETAILSW);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.cbStruct !== undefined) view.setUint32(0, Number(data.cbStruct), true);
  // 0x04: u32
  if (data?.dwFilterTagIndex !== undefined) view.setUint32(4, Number(data.dwFilterTagIndex), true);
  // 0x08: u32
  if (data?.dwFilterTag !== undefined) view.setUint32(8, Number(data.dwFilterTag), true);
  // 0x0c: u32
  if (data?.cbFilterSize !== undefined) view.setUint32(12, Number(data.cbFilterSize), true);
  // 0x10: u32
  if (data?.fdwSupport !== undefined) view.setUint32(16, Number(data.fdwSupport), true);
  // 0x14: u32
  if (data?.cStandardFilters !== undefined) view.setUint32(20, Number(data.cStandardFilters), true);
  // 0x18: pointer
  if (data?.szFilterTag !== undefined) view.setBigUint64(24, data.szFilterTag === null ? 0n : BigInt(util.toPointer(data.szFilterTag)), true);
  return buf;
}

/**
 * Windows.Win32.Media.Audio.ACMFILTERDETAILSA (size: 40)
 */
export interface ACMFILTERDETAILSA {
  /** u32 */
  cbStruct: number;
  /** u32 */
  dwFilterIndex: number;
  /** u32 */
  dwFilterTag: number;
  /** u32 */
  fdwSupport: number;
  /** ptr */
  pwfltr: Deno.PointerValue | Uint8Array | null;
  /** u32 */
  cbwfltr: number;
  /** array */
  szFilter: Deno.PointerValue | null;
}

export const sizeofACMFILTERDETAILSA = 40;

export function allocACMFILTERDETAILSA(data?: Partial<ACMFILTERDETAILSA>): Uint8Array {
  const buf = new Uint8Array(sizeofACMFILTERDETAILSA);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.cbStruct !== undefined) view.setUint32(0, Number(data.cbStruct), true);
  // 0x04: u32
  if (data?.dwFilterIndex !== undefined) view.setUint32(4, Number(data.dwFilterIndex), true);
  // 0x08: u32
  if (data?.dwFilterTag !== undefined) view.setUint32(8, Number(data.dwFilterTag), true);
  // 0x0c: u32
  if (data?.fdwSupport !== undefined) view.setUint32(12, Number(data.fdwSupport), true);
  // 0x10: pointer
  if (data?.pwfltr !== undefined) view.setBigUint64(16, data.pwfltr === null ? 0n : BigInt(util.toPointer(data.pwfltr)), true);
  // 0x18: u32
  if (data?.cbwfltr !== undefined) view.setUint32(24, Number(data.cbwfltr), true);
  // 0x1c: pad4
  // 0x20: pointer
  if (data?.szFilter !== undefined) view.setBigUint64(32, data.szFilter === null ? 0n : BigInt(util.toPointer(data.szFilter)), true);
  return buf;
}

/**
 * Windows.Win32.Media.Audio.ACMFILTERDETAILSW (size: 40)
 */
export interface ACMFILTERDETAILSW {
  /** u32 */
  cbStruct: number;
  /** u32 */
  dwFilterIndex: number;
  /** u32 */
  dwFilterTag: number;
  /** u32 */
  fdwSupport: number;
  /** ptr */
  pwfltr: Deno.PointerValue | Uint8Array | null;
  /** u32 */
  cbwfltr: number;
  /** array */
  szFilter: Deno.PointerValue | null;
}

export const sizeofACMFILTERDETAILSW = 40;

export function allocACMFILTERDETAILSW(data?: Partial<ACMFILTERDETAILSW>): Uint8Array {
  const buf = new Uint8Array(sizeofACMFILTERDETAILSW);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.cbStruct !== undefined) view.setUint32(0, Number(data.cbStruct), true);
  // 0x04: u32
  if (data?.dwFilterIndex !== undefined) view.setUint32(4, Number(data.dwFilterIndex), true);
  // 0x08: u32
  if (data?.dwFilterTag !== undefined) view.setUint32(8, Number(data.dwFilterTag), true);
  // 0x0c: u32
  if (data?.fdwSupport !== undefined) view.setUint32(12, Number(data.fdwSupport), true);
  // 0x10: pointer
  if (data?.pwfltr !== undefined) view.setBigUint64(16, data.pwfltr === null ? 0n : BigInt(util.toPointer(data.pwfltr)), true);
  // 0x18: u32
  if (data?.cbwfltr !== undefined) view.setUint32(24, Number(data.cbwfltr), true);
  // 0x1c: pad4
  // 0x20: pointer
  if (data?.szFilter !== undefined) view.setBigUint64(32, data.szFilter === null ? 0n : BigInt(util.toPointer(data.szFilter)), true);
  return buf;
}

/**
 * Windows.Win32.Media.Audio.ACMFILTERCHOOSEA (size: 112)
 */
export interface ACMFILTERCHOOSEA {
  /** u32 */
  cbStruct: number;
  /** u32 */
  fdwStyle: number;
  /** Windows.Win32.Foundation.HWND */
  hwndOwner: Deno.PointerValue | null;
  /** ptr */
  pwfltr: Deno.PointerValue | Uint8Array | null;
  /** u32 */
  cbwfltr: number;
  /** Windows.Win32.Foundation.PSTR */
  pszTitle: string | null | Uint8Array;
  /** array */
  szFilterTag: Deno.PointerValue | null;
  /** array */
  szFilter: Deno.PointerValue | null;
  /** Windows.Win32.Foundation.PSTR */
  pszName: string | null | Uint8Array;
  /** u32 */
  cchName: number;
  /** u32 */
  fdwEnum: number;
  /** ptr */
  pwfltrEnum: Deno.PointerValue | Uint8Array | null;
  /** Windows.Win32.Foundation.HINSTANCE */
  hInstance: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Foundation.PSTR */
  pszTemplateName: string | null | Uint8Array;
  /** Windows.Win32.Foundation.LPARAM */
  lCustData: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Media.Audio.ACMFILTERCHOOSEHOOKPROCA */
  pfnHook: Uint8Array | Deno.PointerValue | null;
}

export const sizeofACMFILTERCHOOSEA = 112;

export function allocACMFILTERCHOOSEA(data?: Partial<ACMFILTERCHOOSEA>): Uint8Array {
  const buf = new Uint8Array(sizeofACMFILTERCHOOSEA);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.cbStruct !== undefined) view.setUint32(0, Number(data.cbStruct), true);
  // 0x04: u32
  if (data?.fdwStyle !== undefined) view.setUint32(4, Number(data.fdwStyle), true);
  // 0x08: pointer
  if (data?.hwndOwner !== undefined) view.setBigUint64(8, data.hwndOwner === null ? 0n : BigInt(util.toPointer(data.hwndOwner)), true);
  // 0x10: pointer
  if (data?.pwfltr !== undefined) view.setBigUint64(16, data.pwfltr === null ? 0n : BigInt(util.toPointer(data.pwfltr)), true);
  // 0x18: u32
  if (data?.cbwfltr !== undefined) view.setUint32(24, Number(data.cbwfltr), true);
  // 0x1c: pad4
  // 0x20: buffer
  if (data?.pszTitle !== undefined) {
    (buf as any)._f32 = util.pstrToFfi(data.pszTitle);
    view.setBigUint64(32, (buf as any)._f32 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f32)), true);
  }
  // 0x28: pointer
  if (data?.szFilterTag !== undefined) view.setBigUint64(40, data.szFilterTag === null ? 0n : BigInt(util.toPointer(data.szFilterTag)), true);
  // 0x30: pointer
  if (data?.szFilter !== undefined) view.setBigUint64(48, data.szFilter === null ? 0n : BigInt(util.toPointer(data.szFilter)), true);
  // 0x38: buffer
  if (data?.pszName !== undefined) {
    (buf as any)._f56 = util.pstrToFfi(data.pszName);
    view.setBigUint64(56, (buf as any)._f56 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f56)), true);
  }
  // 0x40: u32
  if (data?.cchName !== undefined) view.setUint32(64, Number(data.cchName), true);
  // 0x44: u32
  if (data?.fdwEnum !== undefined) view.setUint32(68, Number(data.fdwEnum), true);
  // 0x48: pointer
  if (data?.pwfltrEnum !== undefined) view.setBigUint64(72, data.pwfltrEnum === null ? 0n : BigInt(util.toPointer(data.pwfltrEnum)), true);
  // 0x50: pointer
  if (data?.hInstance !== undefined) view.setBigUint64(80, data.hInstance === null ? 0n : BigInt(util.toPointer(data.hInstance)), true);
  // 0x58: buffer
  if (data?.pszTemplateName !== undefined) {
    (buf as any)._f88 = util.pstrToFfi(data.pszTemplateName);
    view.setBigUint64(88, (buf as any)._f88 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f88)), true);
  }
  // 0x60: pointer
  if (data?.lCustData !== undefined) view.setBigUint64(96, data.lCustData === null ? 0n : BigInt(util.toPointer(data.lCustData)), true);
  // 0x68: pointer
  if (data?.pfnHook !== undefined) view.setBigUint64(104, data.pfnHook === null ? 0n : BigInt(util.toPointer(data.pfnHook)), true);
  return buf;
}

/**
 * Windows.Win32.Media.Audio.ACMFILTERCHOOSEW (size: 112)
 */
export interface ACMFILTERCHOOSEW {
  /** u32 */
  cbStruct: number;
  /** u32 */
  fdwStyle: number;
  /** Windows.Win32.Foundation.HWND */
  hwndOwner: Deno.PointerValue | null;
  /** ptr */
  pwfltr: Deno.PointerValue | Uint8Array | null;
  /** u32 */
  cbwfltr: number;
  /** Windows.Win32.Foundation.PWSTR */
  pszTitle: string | null | Uint8Array | Uint16Array;
  /** array */
  szFilterTag: Deno.PointerValue | null;
  /** array */
  szFilter: Deno.PointerValue | null;
  /** Windows.Win32.Foundation.PWSTR */
  pszName: string | null | Uint8Array | Uint16Array;
  /** u32 */
  cchName: number;
  /** u32 */
  fdwEnum: number;
  /** ptr */
  pwfltrEnum: Deno.PointerValue | Uint8Array | null;
  /** Windows.Win32.Foundation.HINSTANCE */
  hInstance: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Foundation.PWSTR */
  pszTemplateName: string | null | Uint8Array | Uint16Array;
  /** Windows.Win32.Foundation.LPARAM */
  lCustData: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Media.Audio.ACMFILTERCHOOSEHOOKPROCW */
  pfnHook: Uint8Array | Deno.PointerValue | null;
}

export const sizeofACMFILTERCHOOSEW = 112;

export function allocACMFILTERCHOOSEW(data?: Partial<ACMFILTERCHOOSEW>): Uint8Array {
  const buf = new Uint8Array(sizeofACMFILTERCHOOSEW);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.cbStruct !== undefined) view.setUint32(0, Number(data.cbStruct), true);
  // 0x04: u32
  if (data?.fdwStyle !== undefined) view.setUint32(4, Number(data.fdwStyle), true);
  // 0x08: pointer
  if (data?.hwndOwner !== undefined) view.setBigUint64(8, data.hwndOwner === null ? 0n : BigInt(util.toPointer(data.hwndOwner)), true);
  // 0x10: pointer
  if (data?.pwfltr !== undefined) view.setBigUint64(16, data.pwfltr === null ? 0n : BigInt(util.toPointer(data.pwfltr)), true);
  // 0x18: u32
  if (data?.cbwfltr !== undefined) view.setUint32(24, Number(data.cbwfltr), true);
  // 0x1c: pad4
  // 0x20: buffer
  if (data?.pszTitle !== undefined) {
    (buf as any)._f32 = util.pwstrToFfi(data.pszTitle);
    view.setBigUint64(32, (buf as any)._f32 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f32)), true);
  }
  // 0x28: pointer
  if (data?.szFilterTag !== undefined) view.setBigUint64(40, data.szFilterTag === null ? 0n : BigInt(util.toPointer(data.szFilterTag)), true);
  // 0x30: pointer
  if (data?.szFilter !== undefined) view.setBigUint64(48, data.szFilter === null ? 0n : BigInt(util.toPointer(data.szFilter)), true);
  // 0x38: buffer
  if (data?.pszName !== undefined) {
    (buf as any)._f56 = util.pwstrToFfi(data.pszName);
    view.setBigUint64(56, (buf as any)._f56 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f56)), true);
  }
  // 0x40: u32
  if (data?.cchName !== undefined) view.setUint32(64, Number(data.cchName), true);
  // 0x44: u32
  if (data?.fdwEnum !== undefined) view.setUint32(68, Number(data.fdwEnum), true);
  // 0x48: pointer
  if (data?.pwfltrEnum !== undefined) view.setBigUint64(72, data.pwfltrEnum === null ? 0n : BigInt(util.toPointer(data.pwfltrEnum)), true);
  // 0x50: pointer
  if (data?.hInstance !== undefined) view.setBigUint64(80, data.hInstance === null ? 0n : BigInt(util.toPointer(data.hInstance)), true);
  // 0x58: buffer
  if (data?.pszTemplateName !== undefined) {
    (buf as any)._f88 = util.pwstrToFfi(data.pszTemplateName);
    view.setBigUint64(88, (buf as any)._f88 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f88)), true);
  }
  // 0x60: pointer
  if (data?.lCustData !== undefined) view.setBigUint64(96, data.lCustData === null ? 0n : BigInt(util.toPointer(data.lCustData)), true);
  // 0x68: pointer
  if (data?.pfnHook !== undefined) view.setBigUint64(104, data.pfnHook === null ? 0n : BigInt(util.toPointer(data.pfnHook)), true);
  return buf;
}

/**
 * Windows.Win32.Media.Audio.ACMDRVOPENDESCA (size: 48)
 */
export interface ACMDRVOPENDESCA {
  /** u32 */
  cbStruct: number;
  /** u32 */
  fccType: number;
  /** u32 */
  fccComp: number;
  /** u32 */
  dwVersion: number;
  /** u32 */
  dwFlags: number;
  /** u32 */
  dwError: number;
  /** Windows.Win32.Foundation.PSTR */
  pszSectionName: string | null | Uint8Array;
  /** Windows.Win32.Foundation.PSTR */
  pszAliasName: string | null | Uint8Array;
  /** u32 */
  dnDevNode: number;
}

export const sizeofACMDRVOPENDESCA = 48;

export function allocACMDRVOPENDESCA(data?: Partial<ACMDRVOPENDESCA>): Uint8Array {
  const buf = new Uint8Array(sizeofACMDRVOPENDESCA);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.cbStruct !== undefined) view.setUint32(0, Number(data.cbStruct), true);
  // 0x04: u32
  if (data?.fccType !== undefined) view.setUint32(4, Number(data.fccType), true);
  // 0x08: u32
  if (data?.fccComp !== undefined) view.setUint32(8, Number(data.fccComp), true);
  // 0x0c: u32
  if (data?.dwVersion !== undefined) view.setUint32(12, Number(data.dwVersion), true);
  // 0x10: u32
  if (data?.dwFlags !== undefined) view.setUint32(16, Number(data.dwFlags), true);
  // 0x14: u32
  if (data?.dwError !== undefined) view.setUint32(20, Number(data.dwError), true);
  // 0x18: buffer
  if (data?.pszSectionName !== undefined) {
    (buf as any)._f24 = util.pstrToFfi(data.pszSectionName);
    view.setBigUint64(24, (buf as any)._f24 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f24)), true);
  }
  // 0x20: buffer
  if (data?.pszAliasName !== undefined) {
    (buf as any)._f32 = util.pstrToFfi(data.pszAliasName);
    view.setBigUint64(32, (buf as any)._f32 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f32)), true);
  }
  // 0x28: u32
  if (data?.dnDevNode !== undefined) view.setUint32(40, Number(data.dnDevNode), true);
  // 0x2c: pad4
  return buf;
}

/**
 * Windows.Win32.Media.Audio.ACMDRVOPENDESCW (size: 48)
 */
export interface ACMDRVOPENDESCW {
  /** u32 */
  cbStruct: number;
  /** u32 */
  fccType: number;
  /** u32 */
  fccComp: number;
  /** u32 */
  dwVersion: number;
  /** u32 */
  dwFlags: number;
  /** u32 */
  dwError: number;
  /** Windows.Win32.Foundation.PWSTR */
  pszSectionName: string | null | Uint8Array | Uint16Array;
  /** Windows.Win32.Foundation.PWSTR */
  pszAliasName: string | null | Uint8Array | Uint16Array;
  /** u32 */
  dnDevNode: number;
}

export const sizeofACMDRVOPENDESCW = 48;

export function allocACMDRVOPENDESCW(data?: Partial<ACMDRVOPENDESCW>): Uint8Array {
  const buf = new Uint8Array(sizeofACMDRVOPENDESCW);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.cbStruct !== undefined) view.setUint32(0, Number(data.cbStruct), true);
  // 0x04: u32
  if (data?.fccType !== undefined) view.setUint32(4, Number(data.fccType), true);
  // 0x08: u32
  if (data?.fccComp !== undefined) view.setUint32(8, Number(data.fccComp), true);
  // 0x0c: u32
  if (data?.dwVersion !== undefined) view.setUint32(12, Number(data.dwVersion), true);
  // 0x10: u32
  if (data?.dwFlags !== undefined) view.setUint32(16, Number(data.dwFlags), true);
  // 0x14: u32
  if (data?.dwError !== undefined) view.setUint32(20, Number(data.dwError), true);
  // 0x18: buffer
  if (data?.pszSectionName !== undefined) {
    (buf as any)._f24 = util.pwstrToFfi(data.pszSectionName);
    view.setBigUint64(24, (buf as any)._f24 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f24)), true);
  }
  // 0x20: buffer
  if (data?.pszAliasName !== undefined) {
    (buf as any)._f32 = util.pwstrToFfi(data.pszAliasName);
    view.setBigUint64(32, (buf as any)._f32 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f32)), true);
  }
  // 0x28: u32
  if (data?.dnDevNode !== undefined) view.setUint32(40, Number(data.dnDevNode), true);
  // 0x2c: pad4
  return buf;
}

/**
 * Windows.Win32.Media.Audio.ACMDRVSTREAMINSTANCE (size: 72)
 */
export interface ACMDRVSTREAMINSTANCE {
  /** u32 */
  cbStruct: number;
  /** ptr */
  pwfxSrc: Deno.PointerValue | Uint8Array | null;
  /** ptr */
  pwfxDst: Deno.PointerValue | Uint8Array | null;
  /** ptr */
  pwfltr: Deno.PointerValue | Uint8Array | null;
  /** usize */
  dwCallback: Deno.PointerValue;
  /** usize */
  dwInstance: Deno.PointerValue;
  /** u32 */
  fdwOpen: number;
  /** u32 */
  fdwDriver: number;
  /** usize */
  dwDriver: Deno.PointerValue;
  /** Windows.Win32.Media.Audio.HACMSTREAM */
  has: Uint8Array | Deno.PointerValue | null;
}

export const sizeofACMDRVSTREAMINSTANCE = 72;

export function allocACMDRVSTREAMINSTANCE(data?: Partial<ACMDRVSTREAMINSTANCE>): Uint8Array {
  const buf = new Uint8Array(sizeofACMDRVSTREAMINSTANCE);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.cbStruct !== undefined) view.setUint32(0, Number(data.cbStruct), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.pwfxSrc !== undefined) view.setBigUint64(8, data.pwfxSrc === null ? 0n : BigInt(util.toPointer(data.pwfxSrc)), true);
  // 0x10: pointer
  if (data?.pwfxDst !== undefined) view.setBigUint64(16, data.pwfxDst === null ? 0n : BigInt(util.toPointer(data.pwfxDst)), true);
  // 0x18: pointer
  if (data?.pwfltr !== undefined) view.setBigUint64(24, data.pwfltr === null ? 0n : BigInt(util.toPointer(data.pwfltr)), true);
  // 0x20: usize
  if (data?.dwCallback !== undefined) view.setBigUint64(32, BigInt(data.dwCallback), true);
  // 0x28: usize
  if (data?.dwInstance !== undefined) view.setBigUint64(40, BigInt(data.dwInstance), true);
  // 0x30: u32
  if (data?.fdwOpen !== undefined) view.setUint32(48, Number(data.fdwOpen), true);
  // 0x34: u32
  if (data?.fdwDriver !== undefined) view.setUint32(52, Number(data.fdwDriver), true);
  // 0x38: usize
  if (data?.dwDriver !== undefined) view.setBigUint64(56, BigInt(data.dwDriver), true);
  // 0x40: pointer
  if (data?.has !== undefined) view.setBigUint64(64, data.has === null ? 0n : BigInt(util.toPointer(data.has)), true);
  return buf;
}

/**
 * Windows.Win32.Media.Audio.ACMDRVSTREAMHEADER (size: 144)
 */
export interface ACMDRVSTREAMHEADER {
  /** u32 */
  cbStruct: number;
  /** u32 */
  fdwStatus: number;
  /** usize */
  dwUser: Deno.PointerValue;
  /** ptr */
  pbSrc: Deno.PointerValue | Uint8Array | null;
  /** u32 */
  cbSrcLength: number;
  /** u32 */
  cbSrcLengthUsed: number;
  /** usize */
  dwSrcUser: Deno.PointerValue;
  /** ptr */
  pbDst: Deno.PointerValue | Uint8Array | null;
  /** u32 */
  cbDstLength: number;
  /** u32 */
  cbDstLengthUsed: number;
  /** usize */
  dwDstUser: Deno.PointerValue;
  /** u32 */
  fdwConvert: number;
  /** ptr */
  padshNext: Deno.PointerValue | Uint8Array | null;
  /** u32 */
  fdwDriver: number;
  /** usize */
  dwDriver: Deno.PointerValue;
  /** u32 */
  fdwPrepared: number;
  /** usize */
  dwPrepared: Deno.PointerValue;
  /** ptr */
  pbPreparedSrc: Deno.PointerValue | Uint8Array | null;
  /** u32 */
  cbPreparedSrcLength: number;
  /** ptr */
  pbPreparedDst: Deno.PointerValue | Uint8Array | null;
  /** u32 */
  cbPreparedDstLength: number;
}

export const sizeofACMDRVSTREAMHEADER = 144;

export function allocACMDRVSTREAMHEADER(data?: Partial<ACMDRVSTREAMHEADER>): Uint8Array {
  const buf = new Uint8Array(sizeofACMDRVSTREAMHEADER);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.cbStruct !== undefined) view.setUint32(0, Number(data.cbStruct), true);
  // 0x04: u32
  if (data?.fdwStatus !== undefined) view.setUint32(4, Number(data.fdwStatus), true);
  // 0x08: usize
  if (data?.dwUser !== undefined) view.setBigUint64(8, BigInt(data.dwUser), true);
  // 0x10: pointer
  if (data?.pbSrc !== undefined) view.setBigUint64(16, data.pbSrc === null ? 0n : BigInt(util.toPointer(data.pbSrc)), true);
  // 0x18: u32
  if (data?.cbSrcLength !== undefined) view.setUint32(24, Number(data.cbSrcLength), true);
  // 0x1c: u32
  if (data?.cbSrcLengthUsed !== undefined) view.setUint32(28, Number(data.cbSrcLengthUsed), true);
  // 0x20: usize
  if (data?.dwSrcUser !== undefined) view.setBigUint64(32, BigInt(data.dwSrcUser), true);
  // 0x28: pointer
  if (data?.pbDst !== undefined) view.setBigUint64(40, data.pbDst === null ? 0n : BigInt(util.toPointer(data.pbDst)), true);
  // 0x30: u32
  if (data?.cbDstLength !== undefined) view.setUint32(48, Number(data.cbDstLength), true);
  // 0x34: u32
  if (data?.cbDstLengthUsed !== undefined) view.setUint32(52, Number(data.cbDstLengthUsed), true);
  // 0x38: usize
  if (data?.dwDstUser !== undefined) view.setBigUint64(56, BigInt(data.dwDstUser), true);
  // 0x40: u32
  if (data?.fdwConvert !== undefined) view.setUint32(64, Number(data.fdwConvert), true);
  // 0x44: pad4
  // 0x48: pointer
  if (data?.padshNext !== undefined) view.setBigUint64(72, data.padshNext === null ? 0n : BigInt(util.toPointer(data.padshNext)), true);
  // 0x50: u32
  if (data?.fdwDriver !== undefined) view.setUint32(80, Number(data.fdwDriver), true);
  // 0x54: pad4
  // 0x58: usize
  if (data?.dwDriver !== undefined) view.setBigUint64(88, BigInt(data.dwDriver), true);
  // 0x60: u32
  if (data?.fdwPrepared !== undefined) view.setUint32(96, Number(data.fdwPrepared), true);
  // 0x64: pad4
  // 0x68: usize
  if (data?.dwPrepared !== undefined) view.setBigUint64(104, BigInt(data.dwPrepared), true);
  // 0x70: pointer
  if (data?.pbPreparedSrc !== undefined) view.setBigUint64(112, data.pbPreparedSrc === null ? 0n : BigInt(util.toPointer(data.pbPreparedSrc)), true);
  // 0x78: u32
  if (data?.cbPreparedSrcLength !== undefined) view.setUint32(120, Number(data.cbPreparedSrcLength), true);
  // 0x7c: pad4
  // 0x80: pointer
  if (data?.pbPreparedDst !== undefined) view.setBigUint64(128, data.pbPreparedDst === null ? 0n : BigInt(util.toPointer(data.pbPreparedDst)), true);
  // 0x88: u32
  if (data?.cbPreparedDstLength !== undefined) view.setUint32(136, Number(data.cbPreparedDstLength), true);
  // 0x8c: pad4
  return buf;
}

/**
 * Windows.Win32.Media.Audio.ACMDRVSTREAMSIZE (size: 16)
 */
export interface ACMDRVSTREAMSIZE {
  /** u32 */
  cbStruct: number;
  /** u32 */
  fdwSize: number;
  /** u32 */
  cbSrcLength: number;
  /** u32 */
  cbDstLength: number;
}

export const sizeofACMDRVSTREAMSIZE = 16;

export function allocACMDRVSTREAMSIZE(data?: Partial<ACMDRVSTREAMSIZE>): Uint8Array {
  const buf = new Uint8Array(sizeofACMDRVSTREAMSIZE);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.cbStruct !== undefined) view.setUint32(0, Number(data.cbStruct), true);
  // 0x04: u32
  if (data?.fdwSize !== undefined) view.setUint32(4, Number(data.fdwSize), true);
  // 0x08: u32
  if (data?.cbSrcLength !== undefined) view.setUint32(8, Number(data.cbSrcLength), true);
  // 0x0c: u32
  if (data?.cbDstLength !== undefined) view.setUint32(12, Number(data.cbDstLength), true);
  return buf;
}

/**
 * Windows.Win32.Media.Audio.ACMDRVFORMATSUGGEST (size: 40)
 */
export interface ACMDRVFORMATSUGGEST {
  /** u32 */
  cbStruct: number;
  /** u32 */
  fdwSuggest: number;
  /** ptr */
  pwfxSrc: Deno.PointerValue | Uint8Array | null;
  /** u32 */
  cbwfxSrc: number;
  /** ptr */
  pwfxDst: Deno.PointerValue | Uint8Array | null;
  /** u32 */
  cbwfxDst: number;
}

export const sizeofACMDRVFORMATSUGGEST = 40;

export function allocACMDRVFORMATSUGGEST(data?: Partial<ACMDRVFORMATSUGGEST>): Uint8Array {
  const buf = new Uint8Array(sizeofACMDRVFORMATSUGGEST);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.cbStruct !== undefined) view.setUint32(0, Number(data.cbStruct), true);
  // 0x04: u32
  if (data?.fdwSuggest !== undefined) view.setUint32(4, Number(data.fdwSuggest), true);
  // 0x08: pointer
  if (data?.pwfxSrc !== undefined) view.setBigUint64(8, data.pwfxSrc === null ? 0n : BigInt(util.toPointer(data.pwfxSrc)), true);
  // 0x10: u32
  if (data?.cbwfxSrc !== undefined) view.setUint32(16, Number(data.cbwfxSrc), true);
  // 0x14: pad4
  // 0x18: pointer
  if (data?.pwfxDst !== undefined) view.setBigUint64(24, data.pwfxDst === null ? 0n : BigInt(util.toPointer(data.pwfxDst)), true);
  // 0x20: u32
  if (data?.cbwfxDst !== undefined) view.setUint32(32, Number(data.cbwfxDst), true);
  // 0x24: pad4
  return buf;
}

export type HRESULT = number;

export type LRESULT = Deno.PointerValue;

// Native Libraries

try {
  var libOLE32_dll = Deno.dlopen("OLE32.dll", {
    CoRegisterMessageFilter: {
      parameters: ["pointer", "pointer"],
      result: "pointer",
    },
  }).symbols;
} catch(e) { /* ignore */ }

try {
  var libWINMM_dll = Deno.dlopen("WINMM.dll", {
    sndPlaySoundA: {
      parameters: ["buffer", "u32"],
      result: "i32",
    },
    sndPlaySoundW: {
      parameters: ["buffer", "u32"],
      result: "i32",
    },
    PlaySoundA: {
      parameters: ["buffer", "pointer", "u32"],
      result: "i32",
    },
    PlaySoundW: {
      parameters: ["buffer", "pointer", "u32"],
      result: "i32",
    },
    waveOutGetNumDevs: {
      parameters: [],
      result: "u32",
    },
    waveOutGetDevCapsA: {
      parameters: ["usize", "pointer", "u32"],
      result: "u32",
    },
    waveOutGetDevCapsW: {
      parameters: ["usize", "pointer", "u32"],
      result: "u32",
    },
    waveOutGetVolume: {
      parameters: ["pointer", "pointer"],
      result: "u32",
    },
    waveOutSetVolume: {
      parameters: ["pointer", "u32"],
      result: "u32",
    },
    waveOutGetErrorTextA: {
      parameters: ["u32", "buffer", "u32"],
      result: "u32",
    },
    waveOutGetErrorTextW: {
      parameters: ["u32", "buffer", "u32"],
      result: "u32",
    },
    waveOutOpen: {
      parameters: ["pointer", "u32", "pointer", "usize", "usize", "u32"],
      result: "u32",
    },
    waveOutClose: {
      parameters: ["pointer"],
      result: "u32",
    },
    waveOutPrepareHeader: {
      parameters: ["pointer", "pointer", "u32"],
      result: "u32",
    },
    waveOutUnprepareHeader: {
      parameters: ["pointer", "pointer", "u32"],
      result: "u32",
    },
    waveOutWrite: {
      parameters: ["pointer", "pointer", "u32"],
      result: "u32",
    },
    waveOutPause: {
      parameters: ["pointer"],
      result: "u32",
    },
    waveOutRestart: {
      parameters: ["pointer"],
      result: "u32",
    },
    waveOutReset: {
      parameters: ["pointer"],
      result: "u32",
    },
    waveOutBreakLoop: {
      parameters: ["pointer"],
      result: "u32",
    },
    waveOutGetPosition: {
      parameters: ["pointer", "pointer", "u32"],
      result: "u32",
    },
    waveOutGetPitch: {
      parameters: ["pointer", "pointer"],
      result: "u32",
    },
    waveOutSetPitch: {
      parameters: ["pointer", "u32"],
      result: "u32",
    },
    waveOutGetPlaybackRate: {
      parameters: ["pointer", "pointer"],
      result: "u32",
    },
    waveOutSetPlaybackRate: {
      parameters: ["pointer", "u32"],
      result: "u32",
    },
    waveOutGetID: {
      parameters: ["pointer", "pointer"],
      result: "u32",
    },
    waveOutMessage: {
      parameters: ["pointer", "u32", "usize", "usize"],
      result: "u32",
    },
    waveInGetNumDevs: {
      parameters: [],
      result: "u32",
    },
    waveInGetDevCapsA: {
      parameters: ["usize", "pointer", "u32"],
      result: "u32",
    },
    waveInGetDevCapsW: {
      parameters: ["usize", "pointer", "u32"],
      result: "u32",
    },
    waveInGetErrorTextA: {
      parameters: ["u32", "buffer", "u32"],
      result: "u32",
    },
    waveInGetErrorTextW: {
      parameters: ["u32", "buffer", "u32"],
      result: "u32",
    },
    waveInOpen: {
      parameters: ["pointer", "u32", "pointer", "usize", "usize", "u32"],
      result: "u32",
    },
    waveInClose: {
      parameters: ["pointer"],
      result: "u32",
    },
    waveInPrepareHeader: {
      parameters: ["pointer", "pointer", "u32"],
      result: "u32",
    },
    waveInUnprepareHeader: {
      parameters: ["pointer", "pointer", "u32"],
      result: "u32",
    },
    waveInAddBuffer: {
      parameters: ["pointer", "pointer", "u32"],
      result: "u32",
    },
    waveInStart: {
      parameters: ["pointer"],
      result: "u32",
    },
    waveInStop: {
      parameters: ["pointer"],
      result: "u32",
    },
    waveInReset: {
      parameters: ["pointer"],
      result: "u32",
    },
    waveInGetPosition: {
      parameters: ["pointer", "pointer", "u32"],
      result: "u32",
    },
    waveInGetID: {
      parameters: ["pointer", "pointer"],
      result: "u32",
    },
    waveInMessage: {
      parameters: ["pointer", "u32", "usize", "usize"],
      result: "u32",
    },
    midiOutGetNumDevs: {
      parameters: [],
      result: "u32",
    },
    midiStreamOpen: {
      parameters: ["pointer", "pointer", "u32", "usize", "usize", "u32"],
      result: "u32",
    },
    midiStreamClose: {
      parameters: ["pointer"],
      result: "u32",
    },
    midiStreamProperty: {
      parameters: ["pointer", "pointer", "u32"],
      result: "u32",
    },
    midiStreamPosition: {
      parameters: ["pointer", "pointer", "u32"],
      result: "u32",
    },
    midiStreamOut: {
      parameters: ["pointer", "pointer", "u32"],
      result: "u32",
    },
    midiStreamPause: {
      parameters: ["pointer"],
      result: "u32",
    },
    midiStreamRestart: {
      parameters: ["pointer"],
      result: "u32",
    },
    midiStreamStop: {
      parameters: ["pointer"],
      result: "u32",
    },
    midiConnect: {
      parameters: ["pointer", "pointer", "pointer"],
      result: "u32",
    },
    midiDisconnect: {
      parameters: ["pointer", "pointer", "pointer"],
      result: "u32",
    },
    midiOutGetDevCapsA: {
      parameters: ["usize", "pointer", "u32"],
      result: "u32",
    },
    midiOutGetDevCapsW: {
      parameters: ["usize", "pointer", "u32"],
      result: "u32",
    },
    midiOutGetVolume: {
      parameters: ["pointer", "pointer"],
      result: "u32",
    },
    midiOutSetVolume: {
      parameters: ["pointer", "u32"],
      result: "u32",
    },
    midiOutGetErrorTextA: {
      parameters: ["u32", "buffer", "u32"],
      result: "u32",
    },
    midiOutGetErrorTextW: {
      parameters: ["u32", "buffer", "u32"],
      result: "u32",
    },
    midiOutOpen: {
      parameters: ["pointer", "u32", "usize", "usize", "u32"],
      result: "u32",
    },
    midiOutClose: {
      parameters: ["pointer"],
      result: "u32",
    },
    midiOutPrepareHeader: {
      parameters: ["pointer", "pointer", "u32"],
      result: "u32",
    },
    midiOutUnprepareHeader: {
      parameters: ["pointer", "pointer", "u32"],
      result: "u32",
    },
    midiOutShortMsg: {
      parameters: ["pointer", "u32"],
      result: "u32",
    },
    midiOutLongMsg: {
      parameters: ["pointer", "pointer", "u32"],
      result: "u32",
    },
    midiOutReset: {
      parameters: ["pointer"],
      result: "u32",
    },
    midiOutCachePatches: {
      parameters: ["pointer", "u32", "pointer", "u32"],
      result: "u32",
    },
    midiOutCacheDrumPatches: {
      parameters: ["pointer", "u32", "pointer", "u32"],
      result: "u32",
    },
    midiOutGetID: {
      parameters: ["pointer", "pointer"],
      result: "u32",
    },
    midiOutMessage: {
      parameters: ["pointer", "u32", "usize", "usize"],
      result: "u32",
    },
    midiInGetNumDevs: {
      parameters: [],
      result: "u32",
    },
    midiInGetDevCapsA: {
      parameters: ["usize", "pointer", "u32"],
      result: "u32",
    },
    midiInGetDevCapsW: {
      parameters: ["usize", "pointer", "u32"],
      result: "u32",
    },
    midiInGetErrorTextA: {
      parameters: ["u32", "buffer", "u32"],
      result: "u32",
    },
    midiInGetErrorTextW: {
      parameters: ["u32", "buffer", "u32"],
      result: "u32",
    },
    midiInOpen: {
      parameters: ["pointer", "u32", "usize", "usize", "u32"],
      result: "u32",
    },
    midiInClose: {
      parameters: ["pointer"],
      result: "u32",
    },
    midiInPrepareHeader: {
      parameters: ["pointer", "pointer", "u32"],
      result: "u32",
    },
    midiInUnprepareHeader: {
      parameters: ["pointer", "pointer", "u32"],
      result: "u32",
    },
    midiInAddBuffer: {
      parameters: ["pointer", "pointer", "u32"],
      result: "u32",
    },
    midiInStart: {
      parameters: ["pointer"],
      result: "u32",
    },
    midiInStop: {
      parameters: ["pointer"],
      result: "u32",
    },
    midiInReset: {
      parameters: ["pointer"],
      result: "u32",
    },
    midiInGetID: {
      parameters: ["pointer", "pointer"],
      result: "u32",
    },
    midiInMessage: {
      parameters: ["pointer", "u32", "usize", "usize"],
      result: "u32",
    },
    auxGetNumDevs: {
      parameters: [],
      result: "u32",
    },
    auxGetDevCapsA: {
      parameters: ["usize", "pointer", "u32"],
      result: "u32",
    },
    auxGetDevCapsW: {
      parameters: ["usize", "pointer", "u32"],
      result: "u32",
    },
    auxSetVolume: {
      parameters: ["u32", "u32"],
      result: "u32",
    },
    auxGetVolume: {
      parameters: ["u32", "pointer"],
      result: "u32",
    },
    auxOutMessage: {
      parameters: ["u32", "u32", "usize", "usize"],
      result: "u32",
    },
    mixerGetNumDevs: {
      parameters: [],
      result: "u32",
    },
    mixerGetDevCapsA: {
      parameters: ["usize", "pointer", "u32"],
      result: "u32",
    },
    mixerGetDevCapsW: {
      parameters: ["usize", "pointer", "u32"],
      result: "u32",
    },
    mixerOpen: {
      parameters: ["pointer", "u32", "usize", "usize", "u32"],
      result: "u32",
    },
    mixerClose: {
      parameters: ["pointer"],
      result: "u32",
    },
    mixerMessage: {
      parameters: ["pointer", "u32", "usize", "usize"],
      result: "u32",
    },
    mixerGetLineInfoA: {
      parameters: ["pointer", "pointer", "u32"],
      result: "u32",
    },
    mixerGetLineInfoW: {
      parameters: ["pointer", "pointer", "u32"],
      result: "u32",
    },
    mixerGetID: {
      parameters: ["pointer", "pointer", "u32"],
      result: "u32",
    },
    mixerGetLineControlsA: {
      parameters: ["pointer", "pointer", "u32"],
      result: "u32",
    },
    mixerGetLineControlsW: {
      parameters: ["pointer", "pointer", "u32"],
      result: "u32",
    },
    mixerGetControlDetailsA: {
      parameters: ["pointer", "pointer", "u32"],
      result: "u32",
    },
    mixerGetControlDetailsW: {
      parameters: ["pointer", "pointer", "u32"],
      result: "u32",
    },
    mixerSetControlDetails: {
      parameters: ["pointer", "pointer", "u32"],
      result: "u32",
    },
  }).symbols;
} catch(e) { /* ignore */ }

try {
  var libMMDevAPI_dll = Deno.dlopen("MMDevAPI.dll", {
    ActivateAudioInterfaceAsync: {
      parameters: ["buffer", "pointer", "pointer", "pointer", "pointer"],
      result: "pointer",
    },
  }).symbols;
} catch(e) { /* ignore */ }

try {
  var libWindows_Media_MediaControl_dll = Deno.dlopen("Windows.Media.MediaControl.dll", {
    CreateRenderAudioStateMonitor: {
      parameters: ["pointer"],
      result: "pointer",
    },
    CreateRenderAudioStateMonitorForCategory: {
      parameters: ["i32", "pointer"],
      result: "pointer",
    },
    CreateRenderAudioStateMonitorForCategoryAndDeviceRole: {
      parameters: ["i32", "i32", "pointer"],
      result: "pointer",
    },
    CreateRenderAudioStateMonitorForCategoryAndDeviceId: {
      parameters: ["i32", "buffer", "pointer"],
      result: "pointer",
    },
    CreateCaptureAudioStateMonitor: {
      parameters: ["pointer"],
      result: "pointer",
    },
    CreateCaptureAudioStateMonitorForCategory: {
      parameters: ["i32", "pointer"],
      result: "pointer",
    },
    CreateCaptureAudioStateMonitorForCategoryAndDeviceRole: {
      parameters: ["i32", "i32", "pointer"],
      result: "pointer",
    },
    CreateCaptureAudioStateMonitorForCategoryAndDeviceId: {
      parameters: ["i32", "buffer", "pointer"],
      result: "pointer",
    },
  }).symbols;
} catch(e) { /* ignore */ }

try {
  var libMSACM32_dll = Deno.dlopen("MSACM32.dll", {
    acmGetVersion: {
      parameters: [],
      result: "u32",
    },
    acmMetrics: {
      parameters: ["pointer", "u32", "pointer"],
      result: "u32",
    },
    acmDriverEnum: {
      parameters: ["pointer", "usize", "u32"],
      result: "u32",
    },
    acmDriverID: {
      parameters: ["pointer", "pointer", "u32"],
      result: "u32",
    },
    acmDriverAddA: {
      parameters: ["pointer", "pointer", "pointer", "u32", "u32"],
      result: "u32",
    },
    acmDriverAddW: {
      parameters: ["pointer", "pointer", "pointer", "u32", "u32"],
      result: "u32",
    },
    acmDriverRemove: {
      parameters: ["pointer", "u32"],
      result: "u32",
    },
    acmDriverOpen: {
      parameters: ["pointer", "pointer", "u32"],
      result: "u32",
    },
    acmDriverClose: {
      parameters: ["pointer", "u32"],
      result: "u32",
    },
    acmDriverMessage: {
      parameters: ["pointer", "u32", "pointer", "pointer"],
      result: "pointer",
    },
    acmDriverPriority: {
      parameters: ["pointer", "u32", "u32"],
      result: "u32",
    },
    acmDriverDetailsA: {
      parameters: ["pointer", "pointer", "u32"],
      result: "u32",
    },
    acmDriverDetailsW: {
      parameters: ["pointer", "pointer", "u32"],
      result: "u32",
    },
    acmFormatTagDetailsA: {
      parameters: ["pointer", "pointer", "u32"],
      result: "u32",
    },
    acmFormatTagDetailsW: {
      parameters: ["pointer", "pointer", "u32"],
      result: "u32",
    },
    acmFormatTagEnumA: {
      parameters: ["pointer", "pointer", "pointer", "usize", "u32"],
      result: "u32",
    },
    acmFormatTagEnumW: {
      parameters: ["pointer", "pointer", "pointer", "usize", "u32"],
      result: "u32",
    },
    acmFormatDetailsA: {
      parameters: ["pointer", "pointer", "u32"],
      result: "u32",
    },
    acmFormatDetailsW: {
      parameters: ["pointer", "pointer", "u32"],
      result: "u32",
    },
    acmFormatEnumA: {
      parameters: ["pointer", "pointer", "pointer", "usize", "u32"],
      result: "u32",
    },
    acmFormatEnumW: {
      parameters: ["pointer", "pointer", "pointer", "usize", "u32"],
      result: "u32",
    },
    acmFormatSuggest: {
      parameters: ["pointer", "pointer", "pointer", "u32", "u32"],
      result: "u32",
    },
    acmFormatChooseA: {
      parameters: ["pointer"],
      result: "u32",
    },
    acmFormatChooseW: {
      parameters: ["pointer"],
      result: "u32",
    },
    acmFilterTagDetailsA: {
      parameters: ["pointer", "pointer", "u32"],
      result: "u32",
    },
    acmFilterTagDetailsW: {
      parameters: ["pointer", "pointer", "u32"],
      result: "u32",
    },
    acmFilterTagEnumA: {
      parameters: ["pointer", "pointer", "pointer", "usize", "u32"],
      result: "u32",
    },
    acmFilterTagEnumW: {
      parameters: ["pointer", "pointer", "pointer", "usize", "u32"],
      result: "u32",
    },
    acmFilterDetailsA: {
      parameters: ["pointer", "pointer", "u32"],
      result: "u32",
    },
    acmFilterDetailsW: {
      parameters: ["pointer", "pointer", "u32"],
      result: "u32",
    },
    acmFilterEnumA: {
      parameters: ["pointer", "pointer", "pointer", "usize", "u32"],
      result: "u32",
    },
    acmFilterEnumW: {
      parameters: ["pointer", "pointer", "pointer", "usize", "u32"],
      result: "u32",
    },
    acmFilterChooseA: {
      parameters: ["pointer"],
      result: "u32",
    },
    acmFilterChooseW: {
      parameters: ["pointer"],
      result: "u32",
    },
    acmStreamOpen: {
      parameters: ["pointer", "pointer", "pointer", "pointer", "pointer", "usize", "usize", "u32"],
      result: "u32",
    },
    acmStreamClose: {
      parameters: ["pointer", "u32"],
      result: "u32",
    },
    acmStreamSize: {
      parameters: ["pointer", "u32", "pointer", "u32"],
      result: "u32",
    },
    acmStreamReset: {
      parameters: ["pointer", "u32"],
      result: "u32",
    },
    acmStreamMessage: {
      parameters: ["pointer", "u32", "pointer", "pointer"],
      result: "u32",
    },
    acmStreamConvert: {
      parameters: ["pointer", "pointer", "u32"],
      result: "u32",
    },
    acmStreamPrepareHeader: {
      parameters: ["pointer", "pointer", "u32"],
      result: "u32",
    },
    acmStreamUnprepareHeader: {
      parameters: ["pointer", "pointer", "u32"],
      result: "u32",
    },
  }).symbols;
} catch(e) { /* ignore */ }

// Symbols

export function CoRegisterMessageFilter(
  lpMessageFilter: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Media.Audio.IMessageFilter */,
  lplpMessageFilter: Deno.PointerValue | Uint8Array | null /* ptr */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libOLE32_dll.CoRegisterMessageFilter(util.toPointer(lpMessageFilter), util.toPointer(lplpMessageFilter)));
}

export function sndPlaySoundA(
  pszSound: string | null | Uint8Array /* Windows.Win32.Foundation.PSTR */,
  fuSound: number /* u32 */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libWINMM_dll.sndPlaySoundA(util.pstrToFfi(pszSound), fuSound));
}

export function sndPlaySoundW(
  pszSound: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  fuSound: number /* u32 */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libWINMM_dll.sndPlaySoundW(util.pwstrToFfi(pszSound), fuSound));
}

export function PlaySoundA(
  pszSound: string | null | Uint8Array /* Windows.Win32.Foundation.PSTR */,
  hmod: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Foundation.HINSTANCE */,
  fdwSound: SND_FLAGS /* Windows.Win32.Media.Audio.SND_FLAGS */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libWINMM_dll.PlaySoundA(util.pstrToFfi(pszSound), util.toPointer(hmod), fdwSound));
}

export function PlaySoundW(
  pszSound: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  hmod: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Foundation.HINSTANCE */,
  fdwSound: SND_FLAGS /* Windows.Win32.Media.Audio.SND_FLAGS */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libWINMM_dll.PlaySoundW(util.pwstrToFfi(pszSound), util.toPointer(hmod), fdwSound));
}

export function waveOutGetNumDevs(): number /* u32 */ {
  return libWINMM_dll.waveOutGetNumDevs();
}

export function waveOutGetDevCapsA(
  uDeviceID: Deno.PointerValue /* usize */,
  pwoc: Deno.PointerValue | Uint8Array | null /* ptr */,
  cbwoc: number /* u32 */,
): number /* u32 */ {
  return libWINMM_dll.waveOutGetDevCapsA(uDeviceID, util.toPointer(pwoc), cbwoc);
}

export function waveOutGetDevCapsW(
  uDeviceID: Deno.PointerValue /* usize */,
  pwoc: Deno.PointerValue | Uint8Array | null /* ptr */,
  cbwoc: number /* u32 */,
): number /* u32 */ {
  return libWINMM_dll.waveOutGetDevCapsW(uDeviceID, util.toPointer(pwoc), cbwoc);
}

export function waveOutGetVolume(
  hwo: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Media.Audio.HWAVEOUT */,
  pdwVolume: Deno.PointerValue | Uint8Array | null /* ptr */,
): number /* u32 */ {
  return libWINMM_dll.waveOutGetVolume(util.toPointer(hwo), util.toPointer(pdwVolume));
}

export function waveOutSetVolume(
  hwo: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Media.Audio.HWAVEOUT */,
  dwVolume: number /* u32 */,
): number /* u32 */ {
  return libWINMM_dll.waveOutSetVolume(util.toPointer(hwo), dwVolume);
}

export function waveOutGetErrorTextA(
  mmrError: number /* u32 */,
  pszText: string | null | Uint8Array /* Windows.Win32.Foundation.PSTR */,
  cchText: number /* u32 */,
): number /* u32 */ {
  return libWINMM_dll.waveOutGetErrorTextA(mmrError, util.pstrToFfi(pszText), cchText);
}

export function waveOutGetErrorTextW(
  mmrError: number /* u32 */,
  pszText: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  cchText: number /* u32 */,
): number /* u32 */ {
  return libWINMM_dll.waveOutGetErrorTextW(mmrError, util.pwstrToFfi(pszText), cchText);
}

export function waveOutOpen(
  phwo: Deno.PointerValue | Uint8Array | null /* ptr */,
  uDeviceID: number /* u32 */,
  pwfx: Deno.PointerValue | Uint8Array | null /* ptr */,
  dwCallback: Deno.PointerValue /* usize */,
  dwInstance: Deno.PointerValue /* usize */,
  fdwOpen: MIDI_WAVE_OPEN_TYPE /* Windows.Win32.Media.Audio.MIDI_WAVE_OPEN_TYPE */,
): number /* u32 */ {
  return libWINMM_dll.waveOutOpen(util.toPointer(phwo), uDeviceID, util.toPointer(pwfx), dwCallback, dwInstance, fdwOpen);
}

export function waveOutClose(
  hwo: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Media.Audio.HWAVEOUT */,
): number /* u32 */ {
  return libWINMM_dll.waveOutClose(util.toPointer(hwo));
}

export function waveOutPrepareHeader(
  hwo: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Media.Audio.HWAVEOUT */,
  pwh: Deno.PointerValue | Uint8Array | null /* ptr */,
  cbwh: number /* u32 */,
): number /* u32 */ {
  return libWINMM_dll.waveOutPrepareHeader(util.toPointer(hwo), util.toPointer(pwh), cbwh);
}

export function waveOutUnprepareHeader(
  hwo: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Media.Audio.HWAVEOUT */,
  pwh: Deno.PointerValue | Uint8Array | null /* ptr */,
  cbwh: number /* u32 */,
): number /* u32 */ {
  return libWINMM_dll.waveOutUnprepareHeader(util.toPointer(hwo), util.toPointer(pwh), cbwh);
}

export function waveOutWrite(
  hwo: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Media.Audio.HWAVEOUT */,
  pwh: Deno.PointerValue | Uint8Array | null /* ptr */,
  cbwh: number /* u32 */,
): number /* u32 */ {
  return libWINMM_dll.waveOutWrite(util.toPointer(hwo), util.toPointer(pwh), cbwh);
}

export function waveOutPause(
  hwo: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Media.Audio.HWAVEOUT */,
): number /* u32 */ {
  return libWINMM_dll.waveOutPause(util.toPointer(hwo));
}

export function waveOutRestart(
  hwo: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Media.Audio.HWAVEOUT */,
): number /* u32 */ {
  return libWINMM_dll.waveOutRestart(util.toPointer(hwo));
}

export function waveOutReset(
  hwo: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Media.Audio.HWAVEOUT */,
): number /* u32 */ {
  return libWINMM_dll.waveOutReset(util.toPointer(hwo));
}

export function waveOutBreakLoop(
  hwo: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Media.Audio.HWAVEOUT */,
): number /* u32 */ {
  return libWINMM_dll.waveOutBreakLoop(util.toPointer(hwo));
}

export function waveOutGetPosition(
  hwo: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Media.Audio.HWAVEOUT */,
  pmmt: Deno.PointerValue | Uint8Array | null /* ptr */,
  cbmmt: number /* u32 */,
): number /* u32 */ {
  return libWINMM_dll.waveOutGetPosition(util.toPointer(hwo), util.toPointer(pmmt), cbmmt);
}

export function waveOutGetPitch(
  hwo: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Media.Audio.HWAVEOUT */,
  pdwPitch: Deno.PointerValue | Uint8Array | null /* ptr */,
): number /* u32 */ {
  return libWINMM_dll.waveOutGetPitch(util.toPointer(hwo), util.toPointer(pdwPitch));
}

export function waveOutSetPitch(
  hwo: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Media.Audio.HWAVEOUT */,
  dwPitch: number /* u32 */,
): number /* u32 */ {
  return libWINMM_dll.waveOutSetPitch(util.toPointer(hwo), dwPitch);
}

export function waveOutGetPlaybackRate(
  hwo: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Media.Audio.HWAVEOUT */,
  pdwRate: Deno.PointerValue | Uint8Array | null /* ptr */,
): number /* u32 */ {
  return libWINMM_dll.waveOutGetPlaybackRate(util.toPointer(hwo), util.toPointer(pdwRate));
}

export function waveOutSetPlaybackRate(
  hwo: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Media.Audio.HWAVEOUT */,
  dwRate: number /* u32 */,
): number /* u32 */ {
  return libWINMM_dll.waveOutSetPlaybackRate(util.toPointer(hwo), dwRate);
}

export function waveOutGetID(
  hwo: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Media.Audio.HWAVEOUT */,
  puDeviceID: Deno.PointerValue | Uint8Array | null /* ptr */,
): number /* u32 */ {
  return libWINMM_dll.waveOutGetID(util.toPointer(hwo), util.toPointer(puDeviceID));
}

export function waveOutMessage(
  hwo: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Media.Audio.HWAVEOUT */,
  uMsg: number /* u32 */,
  dw1: Deno.PointerValue /* usize */,
  dw2: Deno.PointerValue /* usize */,
): number /* u32 */ {
  return libWINMM_dll.waveOutMessage(util.toPointer(hwo), uMsg, dw1, dw2);
}

export function waveInGetNumDevs(): number /* u32 */ {
  return libWINMM_dll.waveInGetNumDevs();
}

export function waveInGetDevCapsA(
  uDeviceID: Deno.PointerValue /* usize */,
  pwic: Deno.PointerValue | Uint8Array | null /* ptr */,
  cbwic: number /* u32 */,
): number /* u32 */ {
  return libWINMM_dll.waveInGetDevCapsA(uDeviceID, util.toPointer(pwic), cbwic);
}

export function waveInGetDevCapsW(
  uDeviceID: Deno.PointerValue /* usize */,
  pwic: Deno.PointerValue | Uint8Array | null /* ptr */,
  cbwic: number /* u32 */,
): number /* u32 */ {
  return libWINMM_dll.waveInGetDevCapsW(uDeviceID, util.toPointer(pwic), cbwic);
}

export function waveInGetErrorTextA(
  mmrError: number /* u32 */,
  pszText: string | null | Uint8Array /* Windows.Win32.Foundation.PSTR */,
  cchText: number /* u32 */,
): number /* u32 */ {
  return libWINMM_dll.waveInGetErrorTextA(mmrError, util.pstrToFfi(pszText), cchText);
}

export function waveInGetErrorTextW(
  mmrError: number /* u32 */,
  pszText: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  cchText: number /* u32 */,
): number /* u32 */ {
  return libWINMM_dll.waveInGetErrorTextW(mmrError, util.pwstrToFfi(pszText), cchText);
}

export function waveInOpen(
  phwi: Deno.PointerValue | Uint8Array | null /* ptr */,
  uDeviceID: number /* u32 */,
  pwfx: Deno.PointerValue | Uint8Array | null /* ptr */,
  dwCallback: Deno.PointerValue /* usize */,
  dwInstance: Deno.PointerValue /* usize */,
  fdwOpen: MIDI_WAVE_OPEN_TYPE /* Windows.Win32.Media.Audio.MIDI_WAVE_OPEN_TYPE */,
): number /* u32 */ {
  return libWINMM_dll.waveInOpen(util.toPointer(phwi), uDeviceID, util.toPointer(pwfx), dwCallback, dwInstance, fdwOpen);
}

export function waveInClose(
  hwi: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Media.Audio.HWAVEIN */,
): number /* u32 */ {
  return libWINMM_dll.waveInClose(util.toPointer(hwi));
}

export function waveInPrepareHeader(
  hwi: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Media.Audio.HWAVEIN */,
  pwh: Deno.PointerValue | Uint8Array | null /* ptr */,
  cbwh: number /* u32 */,
): number /* u32 */ {
  return libWINMM_dll.waveInPrepareHeader(util.toPointer(hwi), util.toPointer(pwh), cbwh);
}

export function waveInUnprepareHeader(
  hwi: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Media.Audio.HWAVEIN */,
  pwh: Deno.PointerValue | Uint8Array | null /* ptr */,
  cbwh: number /* u32 */,
): number /* u32 */ {
  return libWINMM_dll.waveInUnprepareHeader(util.toPointer(hwi), util.toPointer(pwh), cbwh);
}

export function waveInAddBuffer(
  hwi: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Media.Audio.HWAVEIN */,
  pwh: Deno.PointerValue | Uint8Array | null /* ptr */,
  cbwh: number /* u32 */,
): number /* u32 */ {
  return libWINMM_dll.waveInAddBuffer(util.toPointer(hwi), util.toPointer(pwh), cbwh);
}

export function waveInStart(
  hwi: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Media.Audio.HWAVEIN */,
): number /* u32 */ {
  return libWINMM_dll.waveInStart(util.toPointer(hwi));
}

export function waveInStop(
  hwi: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Media.Audio.HWAVEIN */,
): number /* u32 */ {
  return libWINMM_dll.waveInStop(util.toPointer(hwi));
}

export function waveInReset(
  hwi: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Media.Audio.HWAVEIN */,
): number /* u32 */ {
  return libWINMM_dll.waveInReset(util.toPointer(hwi));
}

export function waveInGetPosition(
  hwi: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Media.Audio.HWAVEIN */,
  pmmt: Deno.PointerValue | Uint8Array | null /* ptr */,
  cbmmt: number /* u32 */,
): number /* u32 */ {
  return libWINMM_dll.waveInGetPosition(util.toPointer(hwi), util.toPointer(pmmt), cbmmt);
}

export function waveInGetID(
  hwi: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Media.Audio.HWAVEIN */,
  puDeviceID: Deno.PointerValue | Uint8Array | null /* ptr */,
): number /* u32 */ {
  return libWINMM_dll.waveInGetID(util.toPointer(hwi), util.toPointer(puDeviceID));
}

export function waveInMessage(
  hwi: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Media.Audio.HWAVEIN */,
  uMsg: number /* u32 */,
  dw1: Deno.PointerValue /* usize */,
  dw2: Deno.PointerValue /* usize */,
): number /* u32 */ {
  return libWINMM_dll.waveInMessage(util.toPointer(hwi), uMsg, dw1, dw2);
}

export function midiOutGetNumDevs(): number /* u32 */ {
  return libWINMM_dll.midiOutGetNumDevs();
}

export function midiStreamOpen(
  phms: Deno.PointerValue | Uint8Array | null /* ptr */,
  puDeviceID: Deno.PointerValue | Uint8Array | null /* ptr */,
  cMidi: number /* u32 */,
  dwCallback: Deno.PointerValue /* usize */,
  dwInstance: Deno.PointerValue /* usize */,
  fdwOpen: number /* u32 */,
): number /* u32 */ {
  return libWINMM_dll.midiStreamOpen(util.toPointer(phms), util.toPointer(puDeviceID), cMidi, dwCallback, dwInstance, fdwOpen);
}

export function midiStreamClose(
  hms: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Media.Audio.HMIDISTRM */,
): number /* u32 */ {
  return libWINMM_dll.midiStreamClose(util.toPointer(hms));
}

export function midiStreamProperty(
  hms: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Media.Audio.HMIDISTRM */,
  lppropdata: Deno.PointerValue | Uint8Array | null /* ptr */,
  dwProperty: number /* u32 */,
): number /* u32 */ {
  return libWINMM_dll.midiStreamProperty(util.toPointer(hms), util.toPointer(lppropdata), dwProperty);
}

export function midiStreamPosition(
  hms: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Media.Audio.HMIDISTRM */,
  lpmmt: Deno.PointerValue | Uint8Array | null /* ptr */,
  cbmmt: number /* u32 */,
): number /* u32 */ {
  return libWINMM_dll.midiStreamPosition(util.toPointer(hms), util.toPointer(lpmmt), cbmmt);
}

export function midiStreamOut(
  hms: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Media.Audio.HMIDISTRM */,
  pmh: Deno.PointerValue | Uint8Array | null /* ptr */,
  cbmh: number /* u32 */,
): number /* u32 */ {
  return libWINMM_dll.midiStreamOut(util.toPointer(hms), util.toPointer(pmh), cbmh);
}

export function midiStreamPause(
  hms: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Media.Audio.HMIDISTRM */,
): number /* u32 */ {
  return libWINMM_dll.midiStreamPause(util.toPointer(hms));
}

export function midiStreamRestart(
  hms: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Media.Audio.HMIDISTRM */,
): number /* u32 */ {
  return libWINMM_dll.midiStreamRestart(util.toPointer(hms));
}

export function midiStreamStop(
  hms: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Media.Audio.HMIDISTRM */,
): number /* u32 */ {
  return libWINMM_dll.midiStreamStop(util.toPointer(hms));
}

export function midiConnect(
  hmi: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Media.Audio.HMIDI */,
  hmo: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Media.Audio.HMIDIOUT */,
  pReserved: Deno.PointerValue | Uint8Array | null /* ptr */,
): number /* u32 */ {
  return libWINMM_dll.midiConnect(util.toPointer(hmi), util.toPointer(hmo), util.toPointer(pReserved));
}

export function midiDisconnect(
  hmi: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Media.Audio.HMIDI */,
  hmo: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Media.Audio.HMIDIOUT */,
  pReserved: Deno.PointerValue | Uint8Array | null /* ptr */,
): number /* u32 */ {
  return libWINMM_dll.midiDisconnect(util.toPointer(hmi), util.toPointer(hmo), util.toPointer(pReserved));
}

export function midiOutGetDevCapsA(
  uDeviceID: Deno.PointerValue /* usize */,
  pmoc: Deno.PointerValue | Uint8Array | null /* ptr */,
  cbmoc: number /* u32 */,
): number /* u32 */ {
  return libWINMM_dll.midiOutGetDevCapsA(uDeviceID, util.toPointer(pmoc), cbmoc);
}

export function midiOutGetDevCapsW(
  uDeviceID: Deno.PointerValue /* usize */,
  pmoc: Deno.PointerValue | Uint8Array | null /* ptr */,
  cbmoc: number /* u32 */,
): number /* u32 */ {
  return libWINMM_dll.midiOutGetDevCapsW(uDeviceID, util.toPointer(pmoc), cbmoc);
}

export function midiOutGetVolume(
  hmo: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Media.Audio.HMIDIOUT */,
  pdwVolume: Deno.PointerValue | Uint8Array | null /* ptr */,
): number /* u32 */ {
  return libWINMM_dll.midiOutGetVolume(util.toPointer(hmo), util.toPointer(pdwVolume));
}

export function midiOutSetVolume(
  hmo: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Media.Audio.HMIDIOUT */,
  dwVolume: number /* u32 */,
): number /* u32 */ {
  return libWINMM_dll.midiOutSetVolume(util.toPointer(hmo), dwVolume);
}

export function midiOutGetErrorTextA(
  mmrError: number /* u32 */,
  pszText: string | null | Uint8Array /* Windows.Win32.Foundation.PSTR */,
  cchText: number /* u32 */,
): number /* u32 */ {
  return libWINMM_dll.midiOutGetErrorTextA(mmrError, util.pstrToFfi(pszText), cchText);
}

export function midiOutGetErrorTextW(
  mmrError: number /* u32 */,
  pszText: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  cchText: number /* u32 */,
): number /* u32 */ {
  return libWINMM_dll.midiOutGetErrorTextW(mmrError, util.pwstrToFfi(pszText), cchText);
}

export function midiOutOpen(
  phmo: Deno.PointerValue | Uint8Array | null /* ptr */,
  uDeviceID: number /* u32 */,
  dwCallback: Deno.PointerValue /* usize */,
  dwInstance: Deno.PointerValue /* usize */,
  fdwOpen: MIDI_WAVE_OPEN_TYPE /* Windows.Win32.Media.Audio.MIDI_WAVE_OPEN_TYPE */,
): number /* u32 */ {
  return libWINMM_dll.midiOutOpen(util.toPointer(phmo), uDeviceID, dwCallback, dwInstance, fdwOpen);
}

export function midiOutClose(
  hmo: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Media.Audio.HMIDIOUT */,
): number /* u32 */ {
  return libWINMM_dll.midiOutClose(util.toPointer(hmo));
}

export function midiOutPrepareHeader(
  hmo: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Media.Audio.HMIDIOUT */,
  pmh: Deno.PointerValue | Uint8Array | null /* ptr */,
  cbmh: number /* u32 */,
): number /* u32 */ {
  return libWINMM_dll.midiOutPrepareHeader(util.toPointer(hmo), util.toPointer(pmh), cbmh);
}

export function midiOutUnprepareHeader(
  hmo: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Media.Audio.HMIDIOUT */,
  pmh: Deno.PointerValue | Uint8Array | null /* ptr */,
  cbmh: number /* u32 */,
): number /* u32 */ {
  return libWINMM_dll.midiOutUnprepareHeader(util.toPointer(hmo), util.toPointer(pmh), cbmh);
}

export function midiOutShortMsg(
  hmo: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Media.Audio.HMIDIOUT */,
  dwMsg: number /* u32 */,
): number /* u32 */ {
  return libWINMM_dll.midiOutShortMsg(util.toPointer(hmo), dwMsg);
}

export function midiOutLongMsg(
  hmo: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Media.Audio.HMIDIOUT */,
  pmh: Deno.PointerValue | Uint8Array | null /* ptr */,
  cbmh: number /* u32 */,
): number /* u32 */ {
  return libWINMM_dll.midiOutLongMsg(util.toPointer(hmo), util.toPointer(pmh), cbmh);
}

export function midiOutReset(
  hmo: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Media.Audio.HMIDIOUT */,
): number /* u32 */ {
  return libWINMM_dll.midiOutReset(util.toPointer(hmo));
}

export function midiOutCachePatches(
  hmo: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Media.Audio.HMIDIOUT */,
  uBank: number /* u32 */,
  pwpa: Deno.PointerValue | Uint8Array | null /* ptr */,
  fuCache: number /* u32 */,
): number /* u32 */ {
  return libWINMM_dll.midiOutCachePatches(util.toPointer(hmo), uBank, util.toPointer(pwpa), fuCache);
}

export function midiOutCacheDrumPatches(
  hmo: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Media.Audio.HMIDIOUT */,
  uPatch: number /* u32 */,
  pwkya: Deno.PointerValue | Uint8Array | null /* ptr */,
  fuCache: number /* u32 */,
): number /* u32 */ {
  return libWINMM_dll.midiOutCacheDrumPatches(util.toPointer(hmo), uPatch, util.toPointer(pwkya), fuCache);
}

export function midiOutGetID(
  hmo: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Media.Audio.HMIDIOUT */,
  puDeviceID: Deno.PointerValue | Uint8Array | null /* ptr */,
): number /* u32 */ {
  return libWINMM_dll.midiOutGetID(util.toPointer(hmo), util.toPointer(puDeviceID));
}

export function midiOutMessage(
  hmo: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Media.Audio.HMIDIOUT */,
  uMsg: number /* u32 */,
  dw1: Deno.PointerValue /* usize */,
  dw2: Deno.PointerValue /* usize */,
): number /* u32 */ {
  return libWINMM_dll.midiOutMessage(util.toPointer(hmo), uMsg, dw1, dw2);
}

export function midiInGetNumDevs(): number /* u32 */ {
  return libWINMM_dll.midiInGetNumDevs();
}

export function midiInGetDevCapsA(
  uDeviceID: Deno.PointerValue /* usize */,
  pmic: Deno.PointerValue | Uint8Array | null /* ptr */,
  cbmic: number /* u32 */,
): number /* u32 */ {
  return libWINMM_dll.midiInGetDevCapsA(uDeviceID, util.toPointer(pmic), cbmic);
}

export function midiInGetDevCapsW(
  uDeviceID: Deno.PointerValue /* usize */,
  pmic: Deno.PointerValue | Uint8Array | null /* ptr */,
  cbmic: number /* u32 */,
): number /* u32 */ {
  return libWINMM_dll.midiInGetDevCapsW(uDeviceID, util.toPointer(pmic), cbmic);
}

export function midiInGetErrorTextA(
  mmrError: number /* u32 */,
  pszText: string | null | Uint8Array /* Windows.Win32.Foundation.PSTR */,
  cchText: number /* u32 */,
): number /* u32 */ {
  return libWINMM_dll.midiInGetErrorTextA(mmrError, util.pstrToFfi(pszText), cchText);
}

export function midiInGetErrorTextW(
  mmrError: number /* u32 */,
  pszText: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  cchText: number /* u32 */,
): number /* u32 */ {
  return libWINMM_dll.midiInGetErrorTextW(mmrError, util.pwstrToFfi(pszText), cchText);
}

export function midiInOpen(
  phmi: Deno.PointerValue | Uint8Array | null /* ptr */,
  uDeviceID: number /* u32 */,
  dwCallback: Deno.PointerValue /* usize */,
  dwInstance: Deno.PointerValue /* usize */,
  fdwOpen: MIDI_WAVE_OPEN_TYPE /* Windows.Win32.Media.Audio.MIDI_WAVE_OPEN_TYPE */,
): number /* u32 */ {
  return libWINMM_dll.midiInOpen(util.toPointer(phmi), uDeviceID, dwCallback, dwInstance, fdwOpen);
}

export function midiInClose(
  hmi: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Media.Audio.HMIDIIN */,
): number /* u32 */ {
  return libWINMM_dll.midiInClose(util.toPointer(hmi));
}

export function midiInPrepareHeader(
  hmi: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Media.Audio.HMIDIIN */,
  pmh: Deno.PointerValue | Uint8Array | null /* ptr */,
  cbmh: number /* u32 */,
): number /* u32 */ {
  return libWINMM_dll.midiInPrepareHeader(util.toPointer(hmi), util.toPointer(pmh), cbmh);
}

export function midiInUnprepareHeader(
  hmi: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Media.Audio.HMIDIIN */,
  pmh: Deno.PointerValue | Uint8Array | null /* ptr */,
  cbmh: number /* u32 */,
): number /* u32 */ {
  return libWINMM_dll.midiInUnprepareHeader(util.toPointer(hmi), util.toPointer(pmh), cbmh);
}

export function midiInAddBuffer(
  hmi: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Media.Audio.HMIDIIN */,
  pmh: Deno.PointerValue | Uint8Array | null /* ptr */,
  cbmh: number /* u32 */,
): number /* u32 */ {
  return libWINMM_dll.midiInAddBuffer(util.toPointer(hmi), util.toPointer(pmh), cbmh);
}

export function midiInStart(
  hmi: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Media.Audio.HMIDIIN */,
): number /* u32 */ {
  return libWINMM_dll.midiInStart(util.toPointer(hmi));
}

export function midiInStop(
  hmi: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Media.Audio.HMIDIIN */,
): number /* u32 */ {
  return libWINMM_dll.midiInStop(util.toPointer(hmi));
}

export function midiInReset(
  hmi: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Media.Audio.HMIDIIN */,
): number /* u32 */ {
  return libWINMM_dll.midiInReset(util.toPointer(hmi));
}

export function midiInGetID(
  hmi: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Media.Audio.HMIDIIN */,
  puDeviceID: Deno.PointerValue | Uint8Array | null /* ptr */,
): number /* u32 */ {
  return libWINMM_dll.midiInGetID(util.toPointer(hmi), util.toPointer(puDeviceID));
}

export function midiInMessage(
  hmi: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Media.Audio.HMIDIIN */,
  uMsg: number /* u32 */,
  dw1: Deno.PointerValue /* usize */,
  dw2: Deno.PointerValue /* usize */,
): number /* u32 */ {
  return libWINMM_dll.midiInMessage(util.toPointer(hmi), uMsg, dw1, dw2);
}

export function auxGetNumDevs(): number /* u32 */ {
  return libWINMM_dll.auxGetNumDevs();
}

export function auxGetDevCapsA(
  uDeviceID: Deno.PointerValue /* usize */,
  pac: Deno.PointerValue | Uint8Array | null /* ptr */,
  cbac: number /* u32 */,
): number /* u32 */ {
  return libWINMM_dll.auxGetDevCapsA(uDeviceID, util.toPointer(pac), cbac);
}

export function auxGetDevCapsW(
  uDeviceID: Deno.PointerValue /* usize */,
  pac: Deno.PointerValue | Uint8Array | null /* ptr */,
  cbac: number /* u32 */,
): number /* u32 */ {
  return libWINMM_dll.auxGetDevCapsW(uDeviceID, util.toPointer(pac), cbac);
}

export function auxSetVolume(
  uDeviceID: number /* u32 */,
  dwVolume: number /* u32 */,
): number /* u32 */ {
  return libWINMM_dll.auxSetVolume(uDeviceID, dwVolume);
}

export function auxGetVolume(
  uDeviceID: number /* u32 */,
  pdwVolume: Deno.PointerValue | Uint8Array | null /* ptr */,
): number /* u32 */ {
  return libWINMM_dll.auxGetVolume(uDeviceID, util.toPointer(pdwVolume));
}

export function auxOutMessage(
  uDeviceID: number /* u32 */,
  uMsg: number /* u32 */,
  dw1: Deno.PointerValue /* usize */,
  dw2: Deno.PointerValue /* usize */,
): number /* u32 */ {
  return libWINMM_dll.auxOutMessage(uDeviceID, uMsg, dw1, dw2);
}

export function mixerGetNumDevs(): number /* u32 */ {
  return libWINMM_dll.mixerGetNumDevs();
}

export function mixerGetDevCapsA(
  uMxId: Deno.PointerValue /* usize */,
  pmxcaps: Deno.PointerValue | Uint8Array | null /* ptr */,
  cbmxcaps: number /* u32 */,
): number /* u32 */ {
  return libWINMM_dll.mixerGetDevCapsA(uMxId, util.toPointer(pmxcaps), cbmxcaps);
}

export function mixerGetDevCapsW(
  uMxId: Deno.PointerValue /* usize */,
  pmxcaps: Deno.PointerValue | Uint8Array | null /* ptr */,
  cbmxcaps: number /* u32 */,
): number /* u32 */ {
  return libWINMM_dll.mixerGetDevCapsW(uMxId, util.toPointer(pmxcaps), cbmxcaps);
}

export function mixerOpen(
  phmx: Deno.PointerValue | Uint8Array | null /* ptr */,
  uMxId: number /* u32 */,
  dwCallback: Deno.PointerValue /* usize */,
  dwInstance: Deno.PointerValue /* usize */,
  fdwOpen: number /* u32 */,
): number /* u32 */ {
  return libWINMM_dll.mixerOpen(util.toPointer(phmx), uMxId, dwCallback, dwInstance, fdwOpen);
}

export function mixerClose(
  hmx: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Media.Audio.HMIXER */,
): number /* u32 */ {
  return libWINMM_dll.mixerClose(util.toPointer(hmx));
}

export function mixerMessage(
  hmx: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Media.Audio.HMIXER */,
  uMsg: number /* u32 */,
  dwParam1: Deno.PointerValue /* usize */,
  dwParam2: Deno.PointerValue /* usize */,
): number /* u32 */ {
  return libWINMM_dll.mixerMessage(util.toPointer(hmx), uMsg, dwParam1, dwParam2);
}

export function mixerGetLineInfoA(
  hmxobj: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Media.Audio.HMIXEROBJ */,
  pmxl: Deno.PointerValue | Uint8Array | null /* ptr */,
  fdwInfo: number /* u32 */,
): number /* u32 */ {
  return libWINMM_dll.mixerGetLineInfoA(util.toPointer(hmxobj), util.toPointer(pmxl), fdwInfo);
}

export function mixerGetLineInfoW(
  hmxobj: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Media.Audio.HMIXEROBJ */,
  pmxl: Deno.PointerValue | Uint8Array | null /* ptr */,
  fdwInfo: number /* u32 */,
): number /* u32 */ {
  return libWINMM_dll.mixerGetLineInfoW(util.toPointer(hmxobj), util.toPointer(pmxl), fdwInfo);
}

export function mixerGetID(
  hmxobj: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Media.Audio.HMIXEROBJ */,
  puMxId: Deno.PointerValue | Uint8Array | null /* ptr */,
  fdwId: number /* u32 */,
): number /* u32 */ {
  return libWINMM_dll.mixerGetID(util.toPointer(hmxobj), util.toPointer(puMxId), fdwId);
}

export function mixerGetLineControlsA(
  hmxobj: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Media.Audio.HMIXEROBJ */,
  pmxlc: Deno.PointerValue | Uint8Array | null /* ptr */,
  fdwControls: number /* u32 */,
): number /* u32 */ {
  return libWINMM_dll.mixerGetLineControlsA(util.toPointer(hmxobj), util.toPointer(pmxlc), fdwControls);
}

export function mixerGetLineControlsW(
  hmxobj: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Media.Audio.HMIXEROBJ */,
  pmxlc: Deno.PointerValue | Uint8Array | null /* ptr */,
  fdwControls: number /* u32 */,
): number /* u32 */ {
  return libWINMM_dll.mixerGetLineControlsW(util.toPointer(hmxobj), util.toPointer(pmxlc), fdwControls);
}

export function mixerGetControlDetailsA(
  hmxobj: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Media.Audio.HMIXEROBJ */,
  pmxcd: Deno.PointerValue | Uint8Array | null /* ptr */,
  fdwDetails: number /* u32 */,
): number /* u32 */ {
  return libWINMM_dll.mixerGetControlDetailsA(util.toPointer(hmxobj), util.toPointer(pmxcd), fdwDetails);
}

export function mixerGetControlDetailsW(
  hmxobj: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Media.Audio.HMIXEROBJ */,
  pmxcd: Deno.PointerValue | Uint8Array | null /* ptr */,
  fdwDetails: number /* u32 */,
): number /* u32 */ {
  return libWINMM_dll.mixerGetControlDetailsW(util.toPointer(hmxobj), util.toPointer(pmxcd), fdwDetails);
}

export function mixerSetControlDetails(
  hmxobj: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Media.Audio.HMIXEROBJ */,
  pmxcd: Deno.PointerValue | Uint8Array | null /* ptr */,
  fdwDetails: number /* u32 */,
): number /* u32 */ {
  return libWINMM_dll.mixerSetControlDetails(util.toPointer(hmxobj), util.toPointer(pmxcd), fdwDetails);
}

export function ActivateAudioInterfaceAsync(
  deviceInterfacePath: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  riid: Deno.PointerValue | Uint8Array | null /* ptr */,
  activationParams: Deno.PointerValue | Uint8Array | null /* ptr */,
  completionHandler: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Media.Audio.IActivateAudioInterfaceCompletionHandler */,
  activationOperation: Deno.PointerValue | Uint8Array | null /* ptr */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libMMDevAPI_dll.ActivateAudioInterfaceAsync(util.pwstrToFfi(deviceInterfacePath), util.toPointer(riid), util.toPointer(activationParams), util.toPointer(completionHandler), util.toPointer(activationOperation)));
}

export function CreateRenderAudioStateMonitor(
  audioStateMonitor: Deno.PointerValue | Uint8Array | null /* ptr */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libWindows_Media_MediaControl_dll.CreateRenderAudioStateMonitor(util.toPointer(audioStateMonitor)));
}

export function CreateRenderAudioStateMonitorForCategory(
  category: AUDIO_STREAM_CATEGORY /* Windows.Win32.Media.Audio.AUDIO_STREAM_CATEGORY */,
  audioStateMonitor: Deno.PointerValue | Uint8Array | null /* ptr */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libWindows_Media_MediaControl_dll.CreateRenderAudioStateMonitorForCategory(category, util.toPointer(audioStateMonitor)));
}

export function CreateRenderAudioStateMonitorForCategoryAndDeviceRole(
  category: AUDIO_STREAM_CATEGORY /* Windows.Win32.Media.Audio.AUDIO_STREAM_CATEGORY */,
  role: ERole /* Windows.Win32.Media.Audio.ERole */,
  audioStateMonitor: Deno.PointerValue | Uint8Array | null /* ptr */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libWindows_Media_MediaControl_dll.CreateRenderAudioStateMonitorForCategoryAndDeviceRole(category, role, util.toPointer(audioStateMonitor)));
}

export function CreateRenderAudioStateMonitorForCategoryAndDeviceId(
  category: AUDIO_STREAM_CATEGORY /* Windows.Win32.Media.Audio.AUDIO_STREAM_CATEGORY */,
  deviceId: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  audioStateMonitor: Deno.PointerValue | Uint8Array | null /* ptr */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libWindows_Media_MediaControl_dll.CreateRenderAudioStateMonitorForCategoryAndDeviceId(category, util.pwstrToFfi(deviceId), util.toPointer(audioStateMonitor)));
}

export function CreateCaptureAudioStateMonitor(
  audioStateMonitor: Deno.PointerValue | Uint8Array | null /* ptr */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libWindows_Media_MediaControl_dll.CreateCaptureAudioStateMonitor(util.toPointer(audioStateMonitor)));
}

export function CreateCaptureAudioStateMonitorForCategory(
  category: AUDIO_STREAM_CATEGORY /* Windows.Win32.Media.Audio.AUDIO_STREAM_CATEGORY */,
  audioStateMonitor: Deno.PointerValue | Uint8Array | null /* ptr */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libWindows_Media_MediaControl_dll.CreateCaptureAudioStateMonitorForCategory(category, util.toPointer(audioStateMonitor)));
}

export function CreateCaptureAudioStateMonitorForCategoryAndDeviceRole(
  category: AUDIO_STREAM_CATEGORY /* Windows.Win32.Media.Audio.AUDIO_STREAM_CATEGORY */,
  role: ERole /* Windows.Win32.Media.Audio.ERole */,
  audioStateMonitor: Deno.PointerValue | Uint8Array | null /* ptr */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libWindows_Media_MediaControl_dll.CreateCaptureAudioStateMonitorForCategoryAndDeviceRole(category, role, util.toPointer(audioStateMonitor)));
}

export function CreateCaptureAudioStateMonitorForCategoryAndDeviceId(
  category: AUDIO_STREAM_CATEGORY /* Windows.Win32.Media.Audio.AUDIO_STREAM_CATEGORY */,
  deviceId: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  audioStateMonitor: Deno.PointerValue | Uint8Array | null /* ptr */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libWindows_Media_MediaControl_dll.CreateCaptureAudioStateMonitorForCategoryAndDeviceId(category, util.pwstrToFfi(deviceId), util.toPointer(audioStateMonitor)));
}

export function acmGetVersion(): number /* u32 */ {
  return libMSACM32_dll.acmGetVersion();
}

export function acmMetrics(
  hao: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Media.Audio.HACMOBJ */,
  uMetric: number /* u32 */,
  pMetric: Deno.PointerValue | Uint8Array | null /* ptr */,
): number /* u32 */ {
  return libMSACM32_dll.acmMetrics(util.toPointer(hao), uMetric, util.toPointer(pMetric));
}

export function acmDriverEnum(
  fnCallback: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Media.Audio.ACMDRIVERENUMCB */,
  dwInstance: Deno.PointerValue /* usize */,
  fdwEnum: number /* u32 */,
): number /* u32 */ {
  return libMSACM32_dll.acmDriverEnum(util.toPointer(fnCallback), dwInstance, fdwEnum);
}

export function acmDriverID(
  hao: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Media.Audio.HACMOBJ */,
  phadid: Deno.PointerValue | Uint8Array | null /* ptr */,
  fdwDriverID: number /* u32 */,
): number /* u32 */ {
  return libMSACM32_dll.acmDriverID(util.toPointer(hao), util.toPointer(phadid), fdwDriverID);
}

export function acmDriverAddA(
  phadid: Deno.PointerValue | Uint8Array | null /* ptr */,
  hinstModule: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Foundation.HINSTANCE */,
  lParam: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Foundation.LPARAM */,
  dwPriority: number /* u32 */,
  fdwAdd: number /* u32 */,
): number /* u32 */ {
  return libMSACM32_dll.acmDriverAddA(util.toPointer(phadid), util.toPointer(hinstModule), util.toPointer(lParam), dwPriority, fdwAdd);
}

export function acmDriverAddW(
  phadid: Deno.PointerValue | Uint8Array | null /* ptr */,
  hinstModule: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Foundation.HINSTANCE */,
  lParam: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Foundation.LPARAM */,
  dwPriority: number /* u32 */,
  fdwAdd: number /* u32 */,
): number /* u32 */ {
  return libMSACM32_dll.acmDriverAddW(util.toPointer(phadid), util.toPointer(hinstModule), util.toPointer(lParam), dwPriority, fdwAdd);
}

export function acmDriverRemove(
  hadid: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Media.Audio.HACMDRIVERID */,
  fdwRemove: number /* u32 */,
): number /* u32 */ {
  return libMSACM32_dll.acmDriverRemove(util.toPointer(hadid), fdwRemove);
}

export function acmDriverOpen(
  phad: Deno.PointerValue | Uint8Array | null /* ptr */,
  hadid: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Media.Audio.HACMDRIVERID */,
  fdwOpen: number /* u32 */,
): number /* u32 */ {
  return libMSACM32_dll.acmDriverOpen(util.toPointer(phad), util.toPointer(hadid), fdwOpen);
}

export function acmDriverClose(
  had: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Media.Audio.HACMDRIVER */,
  fdwClose: number /* u32 */,
): number /* u32 */ {
  return libMSACM32_dll.acmDriverClose(util.toPointer(had), fdwClose);
}

export function acmDriverMessage(
  had: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Media.Audio.HACMDRIVER */,
  uMsg: number /* u32 */,
  lParam1: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Foundation.LPARAM */,
  lParam2: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Foundation.LPARAM */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.LRESULT */ {
  return util.pointerFromFfi(libMSACM32_dll.acmDriverMessage(util.toPointer(had), uMsg, util.toPointer(lParam1), util.toPointer(lParam2)));
}

export function acmDriverPriority(
  hadid: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Media.Audio.HACMDRIVERID */,
  dwPriority: number /* u32 */,
  fdwPriority: number /* u32 */,
): number /* u32 */ {
  return libMSACM32_dll.acmDriverPriority(util.toPointer(hadid), dwPriority, fdwPriority);
}

export function acmDriverDetailsA(
  hadid: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Media.Audio.HACMDRIVERID */,
  padd: Deno.PointerValue | Uint8Array | null /* ptr */,
  fdwDetails: number /* u32 */,
): number /* u32 */ {
  return libMSACM32_dll.acmDriverDetailsA(util.toPointer(hadid), util.toPointer(padd), fdwDetails);
}

export function acmDriverDetailsW(
  hadid: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Media.Audio.HACMDRIVERID */,
  padd: Deno.PointerValue | Uint8Array | null /* ptr */,
  fdwDetails: number /* u32 */,
): number /* u32 */ {
  return libMSACM32_dll.acmDriverDetailsW(util.toPointer(hadid), util.toPointer(padd), fdwDetails);
}

export function acmFormatTagDetailsA(
  had: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Media.Audio.HACMDRIVER */,
  paftd: Deno.PointerValue | Uint8Array | null /* ptr */,
  fdwDetails: number /* u32 */,
): number /* u32 */ {
  return libMSACM32_dll.acmFormatTagDetailsA(util.toPointer(had), util.toPointer(paftd), fdwDetails);
}

export function acmFormatTagDetailsW(
  had: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Media.Audio.HACMDRIVER */,
  paftd: Deno.PointerValue | Uint8Array | null /* ptr */,
  fdwDetails: number /* u32 */,
): number /* u32 */ {
  return libMSACM32_dll.acmFormatTagDetailsW(util.toPointer(had), util.toPointer(paftd), fdwDetails);
}

export function acmFormatTagEnumA(
  had: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Media.Audio.HACMDRIVER */,
  paftd: Deno.PointerValue | Uint8Array | null /* ptr */,
  fnCallback: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Media.Audio.ACMFORMATTAGENUMCBA */,
  dwInstance: Deno.PointerValue /* usize */,
  fdwEnum: number /* u32 */,
): number /* u32 */ {
  return libMSACM32_dll.acmFormatTagEnumA(util.toPointer(had), util.toPointer(paftd), util.toPointer(fnCallback), dwInstance, fdwEnum);
}

export function acmFormatTagEnumW(
  had: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Media.Audio.HACMDRIVER */,
  paftd: Deno.PointerValue | Uint8Array | null /* ptr */,
  fnCallback: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Media.Audio.ACMFORMATTAGENUMCBW */,
  dwInstance: Deno.PointerValue /* usize */,
  fdwEnum: number /* u32 */,
): number /* u32 */ {
  return libMSACM32_dll.acmFormatTagEnumW(util.toPointer(had), util.toPointer(paftd), util.toPointer(fnCallback), dwInstance, fdwEnum);
}

export function acmFormatDetailsA(
  had: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Media.Audio.HACMDRIVER */,
  pafd: Deno.PointerValue | Uint8Array | null /* ptr */,
  fdwDetails: number /* u32 */,
): number /* u32 */ {
  return libMSACM32_dll.acmFormatDetailsA(util.toPointer(had), util.toPointer(pafd), fdwDetails);
}

export function acmFormatDetailsW(
  had: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Media.Audio.HACMDRIVER */,
  pafd: Deno.PointerValue | Uint8Array | null /* ptr */,
  fdwDetails: number /* u32 */,
): number /* u32 */ {
  return libMSACM32_dll.acmFormatDetailsW(util.toPointer(had), util.toPointer(pafd), fdwDetails);
}

export function acmFormatEnumA(
  had: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Media.Audio.HACMDRIVER */,
  pafd: Deno.PointerValue | Uint8Array | null /* ptr */,
  fnCallback: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Media.Audio.ACMFORMATENUMCBA */,
  dwInstance: Deno.PointerValue /* usize */,
  fdwEnum: number /* u32 */,
): number /* u32 */ {
  return libMSACM32_dll.acmFormatEnumA(util.toPointer(had), util.toPointer(pafd), util.toPointer(fnCallback), dwInstance, fdwEnum);
}

export function acmFormatEnumW(
  had: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Media.Audio.HACMDRIVER */,
  pafd: Deno.PointerValue | Uint8Array | null /* ptr */,
  fnCallback: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Media.Audio.ACMFORMATENUMCBW */,
  dwInstance: Deno.PointerValue /* usize */,
  fdwEnum: number /* u32 */,
): number /* u32 */ {
  return libMSACM32_dll.acmFormatEnumW(util.toPointer(had), util.toPointer(pafd), util.toPointer(fnCallback), dwInstance, fdwEnum);
}

export function acmFormatSuggest(
  had: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Media.Audio.HACMDRIVER */,
  pwfxSrc: Deno.PointerValue | Uint8Array | null /* ptr */,
  pwfxDst: Deno.PointerValue | Uint8Array | null /* ptr */,
  cbwfxDst: number /* u32 */,
  fdwSuggest: number /* u32 */,
): number /* u32 */ {
  return libMSACM32_dll.acmFormatSuggest(util.toPointer(had), util.toPointer(pwfxSrc), util.toPointer(pwfxDst), cbwfxDst, fdwSuggest);
}

export function acmFormatChooseA(
  pafmtc: Deno.PointerValue | Uint8Array | null /* ptr */,
): number /* u32 */ {
  return libMSACM32_dll.acmFormatChooseA(util.toPointer(pafmtc));
}

export function acmFormatChooseW(
  pafmtc: Deno.PointerValue | Uint8Array | null /* ptr */,
): number /* u32 */ {
  return libMSACM32_dll.acmFormatChooseW(util.toPointer(pafmtc));
}

export function acmFilterTagDetailsA(
  had: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Media.Audio.HACMDRIVER */,
  paftd: Deno.PointerValue | Uint8Array | null /* ptr */,
  fdwDetails: number /* u32 */,
): number /* u32 */ {
  return libMSACM32_dll.acmFilterTagDetailsA(util.toPointer(had), util.toPointer(paftd), fdwDetails);
}

export function acmFilterTagDetailsW(
  had: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Media.Audio.HACMDRIVER */,
  paftd: Deno.PointerValue | Uint8Array | null /* ptr */,
  fdwDetails: number /* u32 */,
): number /* u32 */ {
  return libMSACM32_dll.acmFilterTagDetailsW(util.toPointer(had), util.toPointer(paftd), fdwDetails);
}

export function acmFilterTagEnumA(
  had: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Media.Audio.HACMDRIVER */,
  paftd: Deno.PointerValue | Uint8Array | null /* ptr */,
  fnCallback: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Media.Audio.ACMFILTERTAGENUMCBA */,
  dwInstance: Deno.PointerValue /* usize */,
  fdwEnum: number /* u32 */,
): number /* u32 */ {
  return libMSACM32_dll.acmFilterTagEnumA(util.toPointer(had), util.toPointer(paftd), util.toPointer(fnCallback), dwInstance, fdwEnum);
}

export function acmFilterTagEnumW(
  had: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Media.Audio.HACMDRIVER */,
  paftd: Deno.PointerValue | Uint8Array | null /* ptr */,
  fnCallback: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Media.Audio.ACMFILTERTAGENUMCBW */,
  dwInstance: Deno.PointerValue /* usize */,
  fdwEnum: number /* u32 */,
): number /* u32 */ {
  return libMSACM32_dll.acmFilterTagEnumW(util.toPointer(had), util.toPointer(paftd), util.toPointer(fnCallback), dwInstance, fdwEnum);
}

export function acmFilterDetailsA(
  had: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Media.Audio.HACMDRIVER */,
  pafd: Deno.PointerValue | Uint8Array | null /* ptr */,
  fdwDetails: number /* u32 */,
): number /* u32 */ {
  return libMSACM32_dll.acmFilterDetailsA(util.toPointer(had), util.toPointer(pafd), fdwDetails);
}

export function acmFilterDetailsW(
  had: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Media.Audio.HACMDRIVER */,
  pafd: Deno.PointerValue | Uint8Array | null /* ptr */,
  fdwDetails: number /* u32 */,
): number /* u32 */ {
  return libMSACM32_dll.acmFilterDetailsW(util.toPointer(had), util.toPointer(pafd), fdwDetails);
}

export function acmFilterEnumA(
  had: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Media.Audio.HACMDRIVER */,
  pafd: Deno.PointerValue | Uint8Array | null /* ptr */,
  fnCallback: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Media.Audio.ACMFILTERENUMCBA */,
  dwInstance: Deno.PointerValue /* usize */,
  fdwEnum: number /* u32 */,
): number /* u32 */ {
  return libMSACM32_dll.acmFilterEnumA(util.toPointer(had), util.toPointer(pafd), util.toPointer(fnCallback), dwInstance, fdwEnum);
}

export function acmFilterEnumW(
  had: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Media.Audio.HACMDRIVER */,
  pafd: Deno.PointerValue | Uint8Array | null /* ptr */,
  fnCallback: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Media.Audio.ACMFILTERENUMCBW */,
  dwInstance: Deno.PointerValue /* usize */,
  fdwEnum: number /* u32 */,
): number /* u32 */ {
  return libMSACM32_dll.acmFilterEnumW(util.toPointer(had), util.toPointer(pafd), util.toPointer(fnCallback), dwInstance, fdwEnum);
}

export function acmFilterChooseA(
  pafltrc: Deno.PointerValue | Uint8Array | null /* ptr */,
): number /* u32 */ {
  return libMSACM32_dll.acmFilterChooseA(util.toPointer(pafltrc));
}

export function acmFilterChooseW(
  pafltrc: Deno.PointerValue | Uint8Array | null /* ptr */,
): number /* u32 */ {
  return libMSACM32_dll.acmFilterChooseW(util.toPointer(pafltrc));
}

export function acmStreamOpen(
  phas: Deno.PointerValue | Uint8Array | null /* ptr */,
  had: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Media.Audio.HACMDRIVER */,
  pwfxSrc: Deno.PointerValue | Uint8Array | null /* ptr */,
  pwfxDst: Deno.PointerValue | Uint8Array | null /* ptr */,
  pwfltr: Deno.PointerValue | Uint8Array | null /* ptr */,
  dwCallback: Deno.PointerValue /* usize */,
  dwInstance: Deno.PointerValue /* usize */,
  fdwOpen: number /* u32 */,
): number /* u32 */ {
  return libMSACM32_dll.acmStreamOpen(util.toPointer(phas), util.toPointer(had), util.toPointer(pwfxSrc), util.toPointer(pwfxDst), util.toPointer(pwfltr), dwCallback, dwInstance, fdwOpen);
}

export function acmStreamClose(
  has: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Media.Audio.HACMSTREAM */,
  fdwClose: number /* u32 */,
): number /* u32 */ {
  return libMSACM32_dll.acmStreamClose(util.toPointer(has), fdwClose);
}

export function acmStreamSize(
  has: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Media.Audio.HACMSTREAM */,
  cbInput: number /* u32 */,
  pdwOutputBytes: Deno.PointerValue | Uint8Array | null /* ptr */,
  fdwSize: number /* u32 */,
): number /* u32 */ {
  return libMSACM32_dll.acmStreamSize(util.toPointer(has), cbInput, util.toPointer(pdwOutputBytes), fdwSize);
}

export function acmStreamReset(
  has: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Media.Audio.HACMSTREAM */,
  fdwReset: number /* u32 */,
): number /* u32 */ {
  return libMSACM32_dll.acmStreamReset(util.toPointer(has), fdwReset);
}

export function acmStreamMessage(
  has: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Media.Audio.HACMSTREAM */,
  uMsg: number /* u32 */,
  lParam1: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Foundation.LPARAM */,
  lParam2: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Foundation.LPARAM */,
): number /* u32 */ {
  return libMSACM32_dll.acmStreamMessage(util.toPointer(has), uMsg, util.toPointer(lParam1), util.toPointer(lParam2));
}

export function acmStreamConvert(
  has: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Media.Audio.HACMSTREAM */,
  pash: Deno.PointerValue | Uint8Array | null /* ptr */,
  fdwConvert: number /* u32 */,
): number /* u32 */ {
  return libMSACM32_dll.acmStreamConvert(util.toPointer(has), util.toPointer(pash), fdwConvert);
}

export function acmStreamPrepareHeader(
  has: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Media.Audio.HACMSTREAM */,
  pash: Deno.PointerValue | Uint8Array | null /* ptr */,
  fdwPrepare: number /* u32 */,
): number /* u32 */ {
  return libMSACM32_dll.acmStreamPrepareHeader(util.toPointer(has), util.toPointer(pash), fdwPrepare);
}

export function acmStreamUnprepareHeader(
  has: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Media.Audio.HACMSTREAM */,
  pash: Deno.PointerValue | Uint8Array | null /* ptr */,
  fdwUnprepare: number /* u32 */,
): number /* u32 */ {
  return libMSACM32_dll.acmStreamUnprepareHeader(util.toPointer(has), util.toPointer(pash), fdwUnprepare);
}

