/// Auto-generated by Deno Win32: Windows.Win32.Media.Audio.Apo.Apis

import * as util from "../../../util.ts";

// Enums
export type APO_BUFFER_FLAGS = number;
export type APO_CONNECTION_BUFFER_TYPE = number;
export type APO_FLAG = number;
export type AUDIO_FLOW_TYPE = number;
export type EAudioConstriction = number;
export type AUDIO_SYSTEMEFFECT_STATE = number;
export type APO_LOG_LEVEL = number;
export type APO_NOTIFICATION_TYPE = number;
export type __MIDL___MIDL_itf_mmdeviceapi_0000_0008_0002 = number;

// Constants
export const APOERR_ALREADY_INITIALIZED = 9007201473234010113n;
export const APOERR_NOT_INITIALIZED = 9007202572745637890n;
export const APOERR_FORMAT_NOT_SUPPORTED = 9007203672257265667n;
export const APOERR_INVALID_APO_CLSID = 9007204771768893444n;
export const APOERR_BUFFERS_OVERLAP = 9007205871280521221n;
export const APOERR_ALREADY_UNLOCKED = 9007206970792148998n;
export const APOERR_NUM_CONNECTIONS_INVALID = 9007208070303776775n;
export const APOERR_INVALID_OUTPUT_MAXFRAMECOUNT = 9007209169815404552n;
export const APOERR_INVALID_CONNECTION_FORMAT = 9007210269327032329n;
export const APOERR_APO_LOCKED = 9007211368838660106n;
export const APOERR_INVALID_COEFFCOUNT = 9007212468350287883n;
export const APOERR_INVALID_COEFFICIENT = 9007213567861915660n;
export const APOERR_INVALID_CURVE_PARAM = 9007214667373543437n;
export const APOERR_INVALID_INPUTID = 36649631758;
export const AUDIO_MIN_FRAMERATE = 10;
export const AUDIO_MAX_FRAMERATE = 384000;
export const AUDIO_MIN_CHANNELS = 1;
export const AUDIO_MAX_CHANNELS = 4096;
export const AUDIOMEDIATYPE_EQUAL_FORMAT_TYPES = 2;
export const AUDIOMEDIATYPE_EQUAL_FORMAT_DATA = 4;
export const AUDIOMEDIATYPE_EQUAL_FORMAT_USER_DATA = 8;
export const BUFFER_INVALID = 0;
export const BUFFER_VALID = 1;
export const BUFFER_SILENT = 2;
export const APO_CONNECTION_BUFFER_TYPE_ALLOCATED = 0;
export const APO_CONNECTION_BUFFER_TYPE_EXTERNAL = 1;
export const APO_CONNECTION_BUFFER_TYPE_DEPENDANT = 2;
export const APO_FLAG_NONE = 0;
export const APO_FLAG_INPLACE = 1;
export const APO_FLAG_SAMPLESPERFRAME_MUST_MATCH = 2;
export const APO_FLAG_FRAMESPERSECOND_MUST_MATCH = 4;
export const APO_FLAG_BITSPERSAMPLE_MUST_MATCH = 8;
export const APO_FLAG_MIXER = 16;
export const APO_FLAG_DEFAULT = 14;
export const AUDIO_FLOW_PULL = 0;
export const AUDIO_FLOW_PUSH = 1;
export const eAudioConstrictionOff = 0;
export const eAudioConstriction48_16 = 1;
export const eAudioConstriction44_16 = 2;
export const eAudioConstriction14_14 = 3;
export const eAudioConstrictionMute = 4;
export const AUDIO_SYSTEMEFFECT_STATE_OFF = 0;
export const AUDIO_SYSTEMEFFECT_STATE_ON = 1;
export const APO_LOG_LEVEL_ALWAYS = 0;
export const APO_LOG_LEVEL_CRITICAL = 1;
export const APO_LOG_LEVEL_ERROR = 2;
export const APO_LOG_LEVEL_WARNING = 3;
export const APO_LOG_LEVEL_INFO = 4;
export const APO_LOG_LEVEL_VERBOSE = 5;
export const APO_NOTIFICATION_TYPE_NONE = 0;
export const APO_NOTIFICATION_TYPE_ENDPOINT_VOLUME = 1;
export const APO_NOTIFICATION_TYPE_ENDPOINT_PROPERTY_CHANGE = 2;
export const APO_NOTIFICATION_TYPE_SYSTEM_EFFECTS_PROPERTY_CHANGE = 3;
export const AUDIO_SYSTEMEFFECTS_PROPERTYSTORE_TYPE_DEFAULT = 0;
export const AUDIO_SYSTEMEFFECTS_PROPERTYSTORE_TYPE_USER = 1;
export const AUDIO_SYSTEMEFFECTS_PROPERTYSTORE_TYPE_VOLATILE = 2;
export const AUDIO_SYSTEMEFFECTS_PROPERTYSTORE_TYPE_ENUM_COUNT = 3;

// Structs

/**
 * Windows.Win32.UI.Shell.PropertiesSystem.PROPERTYKEY (size: 16)
 */
export interface PROPERTYKEY {
  /** System.Guid */
  fmtid: Uint8Array | Deno.PointerValue | null;
  /** u32 */
  pid: number;
}

export const sizeofPROPERTYKEY = 16;

export function allocPROPERTYKEY(data?: Partial<PROPERTYKEY>): Uint8Array {
  const buf = new Uint8Array(sizeofPROPERTYKEY);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.fmtid !== undefined) view.setBigUint64(0, data.fmtid === null ? 0n : BigInt(util.toPointer(data.fmtid)), true);
  // 0x08: u32
  if (data?.pid !== undefined) view.setUint32(8, Number(data.pid), true);
  // 0x0c: pad4
  return buf;
}

/**
 * Windows.Win32.Media.Audio.Apo.Apis (size: 256)
 */
export interface Apis {
  /** Windows.Win32.UI.Shell.PropertiesSystem.PROPERTYKEY */
  PKEY_FX_Association: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.UI.Shell.PropertiesSystem.PROPERTYKEY */
  PKEY_FX_PreMixEffectClsid: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.UI.Shell.PropertiesSystem.PROPERTYKEY */
  PKEY_FX_PostMixEffectClsid: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.UI.Shell.PropertiesSystem.PROPERTYKEY */
  PKEY_FX_UserInterfaceClsid: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.UI.Shell.PropertiesSystem.PROPERTYKEY */
  PKEY_FX_FriendlyName: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.UI.Shell.PropertiesSystem.PROPERTYKEY */
  PKEY_FX_StreamEffectClsid: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.UI.Shell.PropertiesSystem.PROPERTYKEY */
  PKEY_FX_ModeEffectClsid: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.UI.Shell.PropertiesSystem.PROPERTYKEY */
  PKEY_FX_EndpointEffectClsid: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.UI.Shell.PropertiesSystem.PROPERTYKEY */
  PKEY_FX_KeywordDetector_StreamEffectClsid: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.UI.Shell.PropertiesSystem.PROPERTYKEY */
  PKEY_FX_KeywordDetector_ModeEffectClsid: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.UI.Shell.PropertiesSystem.PROPERTYKEY */
  PKEY_FX_KeywordDetector_EndpointEffectClsid: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.UI.Shell.PropertiesSystem.PROPERTYKEY */
  PKEY_FX_Offload_StreamEffectClsid: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.UI.Shell.PropertiesSystem.PROPERTYKEY */
  PKEY_FX_Offload_ModeEffectClsid: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.UI.Shell.PropertiesSystem.PROPERTYKEY */
  PKEY_CompositeFX_StreamEffectClsid: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.UI.Shell.PropertiesSystem.PROPERTYKEY */
  PKEY_CompositeFX_ModeEffectClsid: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.UI.Shell.PropertiesSystem.PROPERTYKEY */
  PKEY_CompositeFX_EndpointEffectClsid: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.UI.Shell.PropertiesSystem.PROPERTYKEY */
  PKEY_CompositeFX_KeywordDetector_StreamEffectClsid: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.UI.Shell.PropertiesSystem.PROPERTYKEY */
  PKEY_CompositeFX_KeywordDetector_ModeEffectClsid: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.UI.Shell.PropertiesSystem.PROPERTYKEY */
  PKEY_CompositeFX_KeywordDetector_EndpointEffectClsid: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.UI.Shell.PropertiesSystem.PROPERTYKEY */
  PKEY_CompositeFX_Offload_StreamEffectClsid: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.UI.Shell.PropertiesSystem.PROPERTYKEY */
  PKEY_CompositeFX_Offload_ModeEffectClsid: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.UI.Shell.PropertiesSystem.PROPERTYKEY */
  PKEY_SFX_ProcessingModes_Supported_For_Streaming: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.UI.Shell.PropertiesSystem.PROPERTYKEY */
  PKEY_MFX_ProcessingModes_Supported_For_Streaming: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.UI.Shell.PropertiesSystem.PROPERTYKEY */
  PKEY_EFX_ProcessingModes_Supported_For_Streaming: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.UI.Shell.PropertiesSystem.PROPERTYKEY */
  PKEY_SFX_KeywordDetector_ProcessingModes_Supported_For_Streaming: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.UI.Shell.PropertiesSystem.PROPERTYKEY */
  PKEY_MFX_KeywordDetector_ProcessingModes_Supported_For_Streaming: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.UI.Shell.PropertiesSystem.PROPERTYKEY */
  PKEY_EFX_KeywordDetector_ProcessingModes_Supported_For_Streaming: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.UI.Shell.PropertiesSystem.PROPERTYKEY */
  PKEY_SFX_Offload_ProcessingModes_Supported_For_Streaming: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.UI.Shell.PropertiesSystem.PROPERTYKEY */
  PKEY_MFX_Offload_ProcessingModes_Supported_For_Streaming: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.UI.Shell.PropertiesSystem.PROPERTYKEY */
  PKEY_APO_SWFallback_ProcessingModes: Uint8Array | Deno.PointerValue | null;
  /** System.Guid */
  SID_AudioProcessingObjectRTQueue: Uint8Array | Deno.PointerValue | null;
  /** System.Guid */
  SID_AudioProcessingObjectLoggingService: Uint8Array | Deno.PointerValue | null;
}

export const sizeofApis = 256;

export function allocApis(data?: Partial<Apis>): Uint8Array {
  const buf = new Uint8Array(sizeofApis);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.PKEY_FX_Association !== undefined) view.setBigUint64(0, data.PKEY_FX_Association === null ? 0n : BigInt(util.toPointer(data.PKEY_FX_Association)), true);
  // 0x08: pointer
  if (data?.PKEY_FX_PreMixEffectClsid !== undefined) view.setBigUint64(8, data.PKEY_FX_PreMixEffectClsid === null ? 0n : BigInt(util.toPointer(data.PKEY_FX_PreMixEffectClsid)), true);
  // 0x10: pointer
  if (data?.PKEY_FX_PostMixEffectClsid !== undefined) view.setBigUint64(16, data.PKEY_FX_PostMixEffectClsid === null ? 0n : BigInt(util.toPointer(data.PKEY_FX_PostMixEffectClsid)), true);
  // 0x18: pointer
  if (data?.PKEY_FX_UserInterfaceClsid !== undefined) view.setBigUint64(24, data.PKEY_FX_UserInterfaceClsid === null ? 0n : BigInt(util.toPointer(data.PKEY_FX_UserInterfaceClsid)), true);
  // 0x20: pointer
  if (data?.PKEY_FX_FriendlyName !== undefined) view.setBigUint64(32, data.PKEY_FX_FriendlyName === null ? 0n : BigInt(util.toPointer(data.PKEY_FX_FriendlyName)), true);
  // 0x28: pointer
  if (data?.PKEY_FX_StreamEffectClsid !== undefined) view.setBigUint64(40, data.PKEY_FX_StreamEffectClsid === null ? 0n : BigInt(util.toPointer(data.PKEY_FX_StreamEffectClsid)), true);
  // 0x30: pointer
  if (data?.PKEY_FX_ModeEffectClsid !== undefined) view.setBigUint64(48, data.PKEY_FX_ModeEffectClsid === null ? 0n : BigInt(util.toPointer(data.PKEY_FX_ModeEffectClsid)), true);
  // 0x38: pointer
  if (data?.PKEY_FX_EndpointEffectClsid !== undefined) view.setBigUint64(56, data.PKEY_FX_EndpointEffectClsid === null ? 0n : BigInt(util.toPointer(data.PKEY_FX_EndpointEffectClsid)), true);
  // 0x40: pointer
  if (data?.PKEY_FX_KeywordDetector_StreamEffectClsid !== undefined) view.setBigUint64(64, data.PKEY_FX_KeywordDetector_StreamEffectClsid === null ? 0n : BigInt(util.toPointer(data.PKEY_FX_KeywordDetector_StreamEffectClsid)), true);
  // 0x48: pointer
  if (data?.PKEY_FX_KeywordDetector_ModeEffectClsid !== undefined) view.setBigUint64(72, data.PKEY_FX_KeywordDetector_ModeEffectClsid === null ? 0n : BigInt(util.toPointer(data.PKEY_FX_KeywordDetector_ModeEffectClsid)), true);
  // 0x50: pointer
  if (data?.PKEY_FX_KeywordDetector_EndpointEffectClsid !== undefined) view.setBigUint64(80, data.PKEY_FX_KeywordDetector_EndpointEffectClsid === null ? 0n : BigInt(util.toPointer(data.PKEY_FX_KeywordDetector_EndpointEffectClsid)), true);
  // 0x58: pointer
  if (data?.PKEY_FX_Offload_StreamEffectClsid !== undefined) view.setBigUint64(88, data.PKEY_FX_Offload_StreamEffectClsid === null ? 0n : BigInt(util.toPointer(data.PKEY_FX_Offload_StreamEffectClsid)), true);
  // 0x60: pointer
  if (data?.PKEY_FX_Offload_ModeEffectClsid !== undefined) view.setBigUint64(96, data.PKEY_FX_Offload_ModeEffectClsid === null ? 0n : BigInt(util.toPointer(data.PKEY_FX_Offload_ModeEffectClsid)), true);
  // 0x68: pointer
  if (data?.PKEY_CompositeFX_StreamEffectClsid !== undefined) view.setBigUint64(104, data.PKEY_CompositeFX_StreamEffectClsid === null ? 0n : BigInt(util.toPointer(data.PKEY_CompositeFX_StreamEffectClsid)), true);
  // 0x70: pointer
  if (data?.PKEY_CompositeFX_ModeEffectClsid !== undefined) view.setBigUint64(112, data.PKEY_CompositeFX_ModeEffectClsid === null ? 0n : BigInt(util.toPointer(data.PKEY_CompositeFX_ModeEffectClsid)), true);
  // 0x78: pointer
  if (data?.PKEY_CompositeFX_EndpointEffectClsid !== undefined) view.setBigUint64(120, data.PKEY_CompositeFX_EndpointEffectClsid === null ? 0n : BigInt(util.toPointer(data.PKEY_CompositeFX_EndpointEffectClsid)), true);
  // 0x80: pointer
  if (data?.PKEY_CompositeFX_KeywordDetector_StreamEffectClsid !== undefined) view.setBigUint64(128, data.PKEY_CompositeFX_KeywordDetector_StreamEffectClsid === null ? 0n : BigInt(util.toPointer(data.PKEY_CompositeFX_KeywordDetector_StreamEffectClsid)), true);
  // 0x88: pointer
  if (data?.PKEY_CompositeFX_KeywordDetector_ModeEffectClsid !== undefined) view.setBigUint64(136, data.PKEY_CompositeFX_KeywordDetector_ModeEffectClsid === null ? 0n : BigInt(util.toPointer(data.PKEY_CompositeFX_KeywordDetector_ModeEffectClsid)), true);
  // 0x90: pointer
  if (data?.PKEY_CompositeFX_KeywordDetector_EndpointEffectClsid !== undefined) view.setBigUint64(144, data.PKEY_CompositeFX_KeywordDetector_EndpointEffectClsid === null ? 0n : BigInt(util.toPointer(data.PKEY_CompositeFX_KeywordDetector_EndpointEffectClsid)), true);
  // 0x98: pointer
  if (data?.PKEY_CompositeFX_Offload_StreamEffectClsid !== undefined) view.setBigUint64(152, data.PKEY_CompositeFX_Offload_StreamEffectClsid === null ? 0n : BigInt(util.toPointer(data.PKEY_CompositeFX_Offload_StreamEffectClsid)), true);
  // 0xa0: pointer
  if (data?.PKEY_CompositeFX_Offload_ModeEffectClsid !== undefined) view.setBigUint64(160, data.PKEY_CompositeFX_Offload_ModeEffectClsid === null ? 0n : BigInt(util.toPointer(data.PKEY_CompositeFX_Offload_ModeEffectClsid)), true);
  // 0xa8: pointer
  if (data?.PKEY_SFX_ProcessingModes_Supported_For_Streaming !== undefined) view.setBigUint64(168, data.PKEY_SFX_ProcessingModes_Supported_For_Streaming === null ? 0n : BigInt(util.toPointer(data.PKEY_SFX_ProcessingModes_Supported_For_Streaming)), true);
  // 0xb0: pointer
  if (data?.PKEY_MFX_ProcessingModes_Supported_For_Streaming !== undefined) view.setBigUint64(176, data.PKEY_MFX_ProcessingModes_Supported_For_Streaming === null ? 0n : BigInt(util.toPointer(data.PKEY_MFX_ProcessingModes_Supported_For_Streaming)), true);
  // 0xb8: pointer
  if (data?.PKEY_EFX_ProcessingModes_Supported_For_Streaming !== undefined) view.setBigUint64(184, data.PKEY_EFX_ProcessingModes_Supported_For_Streaming === null ? 0n : BigInt(util.toPointer(data.PKEY_EFX_ProcessingModes_Supported_For_Streaming)), true);
  // 0xc0: pointer
  if (data?.PKEY_SFX_KeywordDetector_ProcessingModes_Supported_For_Streaming !== undefined) view.setBigUint64(192, data.PKEY_SFX_KeywordDetector_ProcessingModes_Supported_For_Streaming === null ? 0n : BigInt(util.toPointer(data.PKEY_SFX_KeywordDetector_ProcessingModes_Supported_For_Streaming)), true);
  // 0xc8: pointer
  if (data?.PKEY_MFX_KeywordDetector_ProcessingModes_Supported_For_Streaming !== undefined) view.setBigUint64(200, data.PKEY_MFX_KeywordDetector_ProcessingModes_Supported_For_Streaming === null ? 0n : BigInt(util.toPointer(data.PKEY_MFX_KeywordDetector_ProcessingModes_Supported_For_Streaming)), true);
  // 0xd0: pointer
  if (data?.PKEY_EFX_KeywordDetector_ProcessingModes_Supported_For_Streaming !== undefined) view.setBigUint64(208, data.PKEY_EFX_KeywordDetector_ProcessingModes_Supported_For_Streaming === null ? 0n : BigInt(util.toPointer(data.PKEY_EFX_KeywordDetector_ProcessingModes_Supported_For_Streaming)), true);
  // 0xd8: pointer
  if (data?.PKEY_SFX_Offload_ProcessingModes_Supported_For_Streaming !== undefined) view.setBigUint64(216, data.PKEY_SFX_Offload_ProcessingModes_Supported_For_Streaming === null ? 0n : BigInt(util.toPointer(data.PKEY_SFX_Offload_ProcessingModes_Supported_For_Streaming)), true);
  // 0xe0: pointer
  if (data?.PKEY_MFX_Offload_ProcessingModes_Supported_For_Streaming !== undefined) view.setBigUint64(224, data.PKEY_MFX_Offload_ProcessingModes_Supported_For_Streaming === null ? 0n : BigInt(util.toPointer(data.PKEY_MFX_Offload_ProcessingModes_Supported_For_Streaming)), true);
  // 0xe8: pointer
  if (data?.PKEY_APO_SWFallback_ProcessingModes !== undefined) view.setBigUint64(232, data.PKEY_APO_SWFallback_ProcessingModes === null ? 0n : BigInt(util.toPointer(data.PKEY_APO_SWFallback_ProcessingModes)), true);
  // 0xf0: pointer
  if (data?.SID_AudioProcessingObjectRTQueue !== undefined) view.setBigUint64(240, data.SID_AudioProcessingObjectRTQueue === null ? 0n : BigInt(util.toPointer(data.SID_AudioProcessingObjectRTQueue)), true);
  // 0xf8: pointer
  if (data?.SID_AudioProcessingObjectLoggingService !== undefined) view.setBigUint64(248, data.SID_AudioProcessingObjectLoggingService === null ? 0n : BigInt(util.toPointer(data.SID_AudioProcessingObjectLoggingService)), true);
  return buf;
}

/**
 * Windows.Win32.Media.Audio.Apo.UNCOMPRESSEDAUDIOFORMAT (size: 32)
 */
export interface UNCOMPRESSEDAUDIOFORMAT {
  /** System.Guid */
  guidFormatType: Uint8Array | Deno.PointerValue | null;
  /** u32 */
  dwSamplesPerFrame: number;
  /** u32 */
  dwBytesPerSampleContainer: number;
  /** u32 */
  dwValidBitsPerSample: number;
  /** f32 */
  fFramesPerSecond: number;
  /** u32 */
  dwChannelMask: number;
}

export const sizeofUNCOMPRESSEDAUDIOFORMAT = 32;

export function allocUNCOMPRESSEDAUDIOFORMAT(data?: Partial<UNCOMPRESSEDAUDIOFORMAT>): Uint8Array {
  const buf = new Uint8Array(sizeofUNCOMPRESSEDAUDIOFORMAT);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.guidFormatType !== undefined) view.setBigUint64(0, data.guidFormatType === null ? 0n : BigInt(util.toPointer(data.guidFormatType)), true);
  // 0x08: u32
  if (data?.dwSamplesPerFrame !== undefined) view.setUint32(8, Number(data.dwSamplesPerFrame), true);
  // 0x0c: u32
  if (data?.dwBytesPerSampleContainer !== undefined) view.setUint32(12, Number(data.dwBytesPerSampleContainer), true);
  // 0x10: u32
  if (data?.dwValidBitsPerSample !== undefined) view.setUint32(16, Number(data.dwValidBitsPerSample), true);
  // 0x14: f32
  if (data?.fFramesPerSecond !== undefined) view.setFloat32(20, Number(data.fFramesPerSecond), true);
  // 0x18: u32
  if (data?.dwChannelMask !== undefined) view.setUint32(24, Number(data.dwChannelMask), true);
  // 0x1c: pad4
  return buf;
}

/**
 * Windows.Win32.Media.Audio.Apo.APO_CONNECTION_PROPERTY (size: 24)
 */
export interface APO_CONNECTION_PROPERTY {
  /** usize */
  pBuffer: Deno.PointerValue;
  /** u32 */
  u32ValidFrameCount: number;
  /** Windows.Win32.Media.Audio.Apo.APO_BUFFER_FLAGS */
  u32BufferFlags: APO_BUFFER_FLAGS;
  /** u32 */
  u32Signature: number;
}

export const sizeofAPO_CONNECTION_PROPERTY = 24;

export function allocAPO_CONNECTION_PROPERTY(data?: Partial<APO_CONNECTION_PROPERTY>): Uint8Array {
  const buf = new Uint8Array(sizeofAPO_CONNECTION_PROPERTY);
  const view = new DataView(buf.buffer);
  // 0x00: usize
  if (data?.pBuffer !== undefined) view.setBigUint64(0, BigInt(data.pBuffer), true);
  // 0x08: u32
  if (data?.u32ValidFrameCount !== undefined) view.setUint32(8, Number(data.u32ValidFrameCount), true);
  // 0x0c: i32
  if (data?.u32BufferFlags !== undefined) view.setInt32(12, Number(data.u32BufferFlags), true);
  // 0x10: u32
  if (data?.u32Signature !== undefined) view.setUint32(16, Number(data.u32Signature), true);
  // 0x14: pad4
  return buf;
}

/**
 * Windows.Win32.Media.Audio.Apo.APO_CONNECTION_PROPERTY_V2 (size: 16)
 */
export interface APO_CONNECTION_PROPERTY_V2 {
  /** Windows.Win32.Media.Audio.Apo.APO_CONNECTION_PROPERTY */
  property: Uint8Array | Deno.PointerValue | null;
  /** u64 */
  u64QPCTime: Deno.PointerValue;
}

export const sizeofAPO_CONNECTION_PROPERTY_V2 = 16;

export function allocAPO_CONNECTION_PROPERTY_V2(data?: Partial<APO_CONNECTION_PROPERTY_V2>): Uint8Array {
  const buf = new Uint8Array(sizeofAPO_CONNECTION_PROPERTY_V2);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.property !== undefined) view.setBigUint64(0, data.property === null ? 0n : BigInt(util.toPointer(data.property)), true);
  // 0x08: u64
  if (data?.u64QPCTime !== undefined) view.setBigUint64(8, BigInt(data.u64QPCTime), true);
  return buf;
}

/**
 * Windows.Win32.Media.Audio.Apo.APO_CONNECTION_DESCRIPTOR (size: 40)
 */
export interface APO_CONNECTION_DESCRIPTOR {
  /** Windows.Win32.Media.Audio.Apo.APO_CONNECTION_BUFFER_TYPE */
  Type: APO_CONNECTION_BUFFER_TYPE;
  /** usize */
  pBuffer: Deno.PointerValue;
  /** u32 */
  u32MaxFrameCount: number;
  /** Windows.Win32.Media.Audio.Apo.IAudioMediaType */
  pFormat: Uint8Array | Deno.PointerValue | null;
  /** u32 */
  u32Signature: number;
}

export const sizeofAPO_CONNECTION_DESCRIPTOR = 40;

export function allocAPO_CONNECTION_DESCRIPTOR(data?: Partial<APO_CONNECTION_DESCRIPTOR>): Uint8Array {
  const buf = new Uint8Array(sizeofAPO_CONNECTION_DESCRIPTOR);
  const view = new DataView(buf.buffer);
  // 0x00: i32
  if (data?.Type !== undefined) view.setInt32(0, Number(data.Type), true);
  // 0x04: pad4
  // 0x08: usize
  if (data?.pBuffer !== undefined) view.setBigUint64(8, BigInt(data.pBuffer), true);
  // 0x10: u32
  if (data?.u32MaxFrameCount !== undefined) view.setUint32(16, Number(data.u32MaxFrameCount), true);
  // 0x14: pad4
  // 0x18: pointer
  if (data?.pFormat !== undefined) view.setBigUint64(24, data.pFormat === null ? 0n : BigInt(util.toPointer(data.pFormat)), true);
  // 0x20: u32
  if (data?.u32Signature !== undefined) view.setUint32(32, Number(data.u32Signature), true);
  // 0x24: pad4
  return buf;
}

/**
 * Windows.Win32.Media.Audio.Apo.APO_REG_PROPERTIES (size: 72)
 */
export interface APO_REG_PROPERTIES {
  /** System.Guid */
  clsid: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Media.Audio.Apo.APO_FLAG */
  Flags: APO_FLAG;
  /** array */
  szFriendlyName: Deno.PointerValue | null;
  /** array */
  szCopyrightInfo: Deno.PointerValue | null;
  /** u32 */
  u32MajorVersion: number;
  /** u32 */
  u32MinorVersion: number;
  /** u32 */
  u32MinInputConnections: number;
  /** u32 */
  u32MaxInputConnections: number;
  /** u32 */
  u32MinOutputConnections: number;
  /** u32 */
  u32MaxOutputConnections: number;
  /** u32 */
  u32MaxInstances: number;
  /** u32 */
  u32NumAPOInterfaces: number;
  /** array */
  iidAPOInterfaceList: Deno.PointerValue | null;
}

export const sizeofAPO_REG_PROPERTIES = 72;

export function allocAPO_REG_PROPERTIES(data?: Partial<APO_REG_PROPERTIES>): Uint8Array {
  const buf = new Uint8Array(sizeofAPO_REG_PROPERTIES);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.clsid !== undefined) view.setBigUint64(0, data.clsid === null ? 0n : BigInt(util.toPointer(data.clsid)), true);
  // 0x08: i32
  if (data?.Flags !== undefined) view.setInt32(8, Number(data.Flags), true);
  // 0x0c: pad4
  // 0x10: pointer
  if (data?.szFriendlyName !== undefined) view.setBigUint64(16, data.szFriendlyName === null ? 0n : BigInt(util.toPointer(data.szFriendlyName)), true);
  // 0x18: pointer
  if (data?.szCopyrightInfo !== undefined) view.setBigUint64(24, data.szCopyrightInfo === null ? 0n : BigInt(util.toPointer(data.szCopyrightInfo)), true);
  // 0x20: u32
  if (data?.u32MajorVersion !== undefined) view.setUint32(32, Number(data.u32MajorVersion), true);
  // 0x24: u32
  if (data?.u32MinorVersion !== undefined) view.setUint32(36, Number(data.u32MinorVersion), true);
  // 0x28: u32
  if (data?.u32MinInputConnections !== undefined) view.setUint32(40, Number(data.u32MinInputConnections), true);
  // 0x2c: u32
  if (data?.u32MaxInputConnections !== undefined) view.setUint32(44, Number(data.u32MaxInputConnections), true);
  // 0x30: u32
  if (data?.u32MinOutputConnections !== undefined) view.setUint32(48, Number(data.u32MinOutputConnections), true);
  // 0x34: u32
  if (data?.u32MaxOutputConnections !== undefined) view.setUint32(52, Number(data.u32MaxOutputConnections), true);
  // 0x38: u32
  if (data?.u32MaxInstances !== undefined) view.setUint32(56, Number(data.u32MaxInstances), true);
  // 0x3c: u32
  if (data?.u32NumAPOInterfaces !== undefined) view.setUint32(60, Number(data.u32NumAPOInterfaces), true);
  // 0x40: pointer
  if (data?.iidAPOInterfaceList !== undefined) view.setBigUint64(64, data.iidAPOInterfaceList === null ? 0n : BigInt(util.toPointer(data.iidAPOInterfaceList)), true);
  return buf;
}

/**
 * Windows.Win32.Media.Audio.Apo.APOInitBaseStruct (size: 16)
 */
export interface APOInitBaseStruct {
  /** u32 */
  cbSize: number;
  /** System.Guid */
  clsid: Uint8Array | Deno.PointerValue | null;
}

export const sizeofAPOInitBaseStruct = 16;

export function allocAPOInitBaseStruct(data?: Partial<APOInitBaseStruct>): Uint8Array {
  const buf = new Uint8Array(sizeofAPOInitBaseStruct);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.cbSize !== undefined) view.setUint32(0, Number(data.cbSize), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.clsid !== undefined) view.setBigUint64(8, data.clsid === null ? 0n : BigInt(util.toPointer(data.clsid)), true);
  return buf;
}

/**
 * Windows.Win32.Media.Audio.Apo.APOInitSystemEffects (size: 40)
 */
export interface APOInitSystemEffects {
  /** Windows.Win32.Media.Audio.Apo.APOInitBaseStruct */
  APOInit: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.UI.Shell.PropertiesSystem.IPropertyStore */
  pAPOEndpointProperties: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.UI.Shell.PropertiesSystem.IPropertyStore */
  pAPOSystemEffectsProperties: Uint8Array | Deno.PointerValue | null;
  /** ptr */
  pReserved: Deno.PointerValue | Uint8Array | null;
  /** Windows.Win32.Media.Audio.IMMDeviceCollection */
  pDeviceCollection: Uint8Array | Deno.PointerValue | null;
}

export const sizeofAPOInitSystemEffects = 40;

export function allocAPOInitSystemEffects(data?: Partial<APOInitSystemEffects>): Uint8Array {
  const buf = new Uint8Array(sizeofAPOInitSystemEffects);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.APOInit !== undefined) view.setBigUint64(0, data.APOInit === null ? 0n : BigInt(util.toPointer(data.APOInit)), true);
  // 0x08: pointer
  if (data?.pAPOEndpointProperties !== undefined) view.setBigUint64(8, data.pAPOEndpointProperties === null ? 0n : BigInt(util.toPointer(data.pAPOEndpointProperties)), true);
  // 0x10: pointer
  if (data?.pAPOSystemEffectsProperties !== undefined) view.setBigUint64(16, data.pAPOSystemEffectsProperties === null ? 0n : BigInt(util.toPointer(data.pAPOSystemEffectsProperties)), true);
  // 0x18: pointer
  if (data?.pReserved !== undefined) view.setBigUint64(24, data.pReserved === null ? 0n : BigInt(util.toPointer(data.pReserved)), true);
  // 0x20: pointer
  if (data?.pDeviceCollection !== undefined) view.setBigUint64(32, data.pDeviceCollection === null ? 0n : BigInt(util.toPointer(data.pDeviceCollection)), true);
  return buf;
}

export type BOOL = number;

/**
 * Windows.Win32.Media.Audio.Apo.APOInitSystemEffects2 (size: 64)
 */
export interface APOInitSystemEffects2 {
  /** Windows.Win32.Media.Audio.Apo.APOInitBaseStruct */
  APOInit: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.UI.Shell.PropertiesSystem.IPropertyStore */
  pAPOEndpointProperties: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.UI.Shell.PropertiesSystem.IPropertyStore */
  pAPOSystemEffectsProperties: Uint8Array | Deno.PointerValue | null;
  /** ptr */
  pReserved: Deno.PointerValue | Uint8Array | null;
  /** Windows.Win32.Media.Audio.IMMDeviceCollection */
  pDeviceCollection: Uint8Array | Deno.PointerValue | null;
  /** u32 */
  nSoftwareIoDeviceInCollection: number;
  /** u32 */
  nSoftwareIoConnectorIndex: number;
  /** System.Guid */
  AudioProcessingMode: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Foundation.BOOL */
  InitializeForDiscoveryOnly: boolean;
}

export const sizeofAPOInitSystemEffects2 = 64;

export function allocAPOInitSystemEffects2(data?: Partial<APOInitSystemEffects2>): Uint8Array {
  const buf = new Uint8Array(sizeofAPOInitSystemEffects2);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.APOInit !== undefined) view.setBigUint64(0, data.APOInit === null ? 0n : BigInt(util.toPointer(data.APOInit)), true);
  // 0x08: pointer
  if (data?.pAPOEndpointProperties !== undefined) view.setBigUint64(8, data.pAPOEndpointProperties === null ? 0n : BigInt(util.toPointer(data.pAPOEndpointProperties)), true);
  // 0x10: pointer
  if (data?.pAPOSystemEffectsProperties !== undefined) view.setBigUint64(16, data.pAPOSystemEffectsProperties === null ? 0n : BigInt(util.toPointer(data.pAPOSystemEffectsProperties)), true);
  // 0x18: pointer
  if (data?.pReserved !== undefined) view.setBigUint64(24, data.pReserved === null ? 0n : BigInt(util.toPointer(data.pReserved)), true);
  // 0x20: pointer
  if (data?.pDeviceCollection !== undefined) view.setBigUint64(32, data.pDeviceCollection === null ? 0n : BigInt(util.toPointer(data.pDeviceCollection)), true);
  // 0x28: u32
  if (data?.nSoftwareIoDeviceInCollection !== undefined) view.setUint32(40, Number(data.nSoftwareIoDeviceInCollection), true);
  // 0x2c: u32
  if (data?.nSoftwareIoConnectorIndex !== undefined) view.setUint32(44, Number(data.nSoftwareIoConnectorIndex), true);
  // 0x30: pointer
  if (data?.AudioProcessingMode !== undefined) view.setBigUint64(48, data.AudioProcessingMode === null ? 0n : BigInt(util.toPointer(data.AudioProcessingMode)), true);
  // 0x38: i32
  if (data?.InitializeForDiscoveryOnly !== undefined) view.setInt32(56, Number(data.InitializeForDiscoveryOnly), true);
  // 0x3c: pad4
  return buf;
}

export type LPARAM = Deno.PointerValue;

export type PWSTR = Deno.PointerValue | Uint8Array | null;

/**
 * Windows.Win32.Media.Audio.Apo.AudioFXExtensionParams (size: 24)
 */
export interface AudioFXExtensionParams {
  /** Windows.Win32.Foundation.LPARAM */
  AddPageParam: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Foundation.PWSTR */
  pwstrEndpointID: string | null;
  /** Windows.Win32.UI.Shell.PropertiesSystem.IPropertyStore */
  pFxProperties: Uint8Array | Deno.PointerValue | null;
}

export const sizeofAudioFXExtensionParams = 24;

export function allocAudioFXExtensionParams(data?: Partial<AudioFXExtensionParams>): Uint8Array {
  const buf = new Uint8Array(sizeofAudioFXExtensionParams);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.AddPageParam !== undefined) view.setBigUint64(0, data.AddPageParam === null ? 0n : BigInt(util.toPointer(data.AddPageParam)), true);
  // 0x08: buffer
  if (data?.pwstrEndpointID !== undefined) {
    (buf as any)._f8 = util.pwstrToFfi(data.pwstrEndpointID);
    view.setBigUint64(8, (buf as any)._f8 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f8)), true);
  }
  // 0x10: pointer
  if (data?.pFxProperties !== undefined) view.setBigUint64(16, data.pFxProperties === null ? 0n : BigInt(util.toPointer(data.pFxProperties)), true);
  return buf;
}

/**
 * Windows.Win32.Media.Audio.Apo.AUDIO_SYSTEMEFFECT (size: 16)
 */
export interface AUDIO_SYSTEMEFFECT {
  /** System.Guid */
  id: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Foundation.BOOL */
  canSetState: boolean;
  /** Windows.Win32.Media.Audio.Apo.AUDIO_SYSTEMEFFECT_STATE */
  state: AUDIO_SYSTEMEFFECT_STATE;
}

export const sizeofAUDIO_SYSTEMEFFECT = 16;

export function allocAUDIO_SYSTEMEFFECT(data?: Partial<AUDIO_SYSTEMEFFECT>): Uint8Array {
  const buf = new Uint8Array(sizeofAUDIO_SYSTEMEFFECT);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.id !== undefined) view.setBigUint64(0, data.id === null ? 0n : BigInt(util.toPointer(data.id)), true);
  // 0x08: i32
  if (data?.canSetState !== undefined) view.setInt32(8, Number(data.canSetState), true);
  // 0x0c: i32
  if (data?.state !== undefined) view.setInt32(12, Number(data.state), true);
  return buf;
}

/**
 * Windows.Win32.Media.Audio.Apo.APOInitSystemEffects3 (size: 56)
 */
export interface APOInitSystemEffects3 {
  /** Windows.Win32.Media.Audio.Apo.APOInitBaseStruct */
  APOInit: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.UI.Shell.PropertiesSystem.IPropertyStore */
  pAPOEndpointProperties: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.System.Com.IServiceProvider */
  pServiceProvider: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Media.Audio.IMMDeviceCollection */
  pDeviceCollection: Uint8Array | Deno.PointerValue | null;
  /** u32 */
  nSoftwareIoDeviceInCollection: number;
  /** u32 */
  nSoftwareIoConnectorIndex: number;
  /** System.Guid */
  AudioProcessingMode: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Foundation.BOOL */
  InitializeForDiscoveryOnly: boolean;
}

export const sizeofAPOInitSystemEffects3 = 56;

export function allocAPOInitSystemEffects3(data?: Partial<APOInitSystemEffects3>): Uint8Array {
  const buf = new Uint8Array(sizeofAPOInitSystemEffects3);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.APOInit !== undefined) view.setBigUint64(0, data.APOInit === null ? 0n : BigInt(util.toPointer(data.APOInit)), true);
  // 0x08: pointer
  if (data?.pAPOEndpointProperties !== undefined) view.setBigUint64(8, data.pAPOEndpointProperties === null ? 0n : BigInt(util.toPointer(data.pAPOEndpointProperties)), true);
  // 0x10: pointer
  if (data?.pServiceProvider !== undefined) view.setBigUint64(16, data.pServiceProvider === null ? 0n : BigInt(util.toPointer(data.pServiceProvider)), true);
  // 0x18: pointer
  if (data?.pDeviceCollection !== undefined) view.setBigUint64(24, data.pDeviceCollection === null ? 0n : BigInt(util.toPointer(data.pDeviceCollection)), true);
  // 0x20: u32
  if (data?.nSoftwareIoDeviceInCollection !== undefined) view.setUint32(32, Number(data.nSoftwareIoDeviceInCollection), true);
  // 0x24: u32
  if (data?.nSoftwareIoConnectorIndex !== undefined) view.setUint32(36, Number(data.nSoftwareIoConnectorIndex), true);
  // 0x28: pointer
  if (data?.AudioProcessingMode !== undefined) view.setBigUint64(40, data.AudioProcessingMode === null ? 0n : BigInt(util.toPointer(data.AudioProcessingMode)), true);
  // 0x30: i32
  if (data?.InitializeForDiscoveryOnly !== undefined) view.setInt32(48, Number(data.InitializeForDiscoveryOnly), true);
  // 0x34: pad4
  return buf;
}

/**
 * Windows.Win32.Media.Audio.Apo.AUDIO_ENDPOINT_VOLUME_CHANGE_NOTIFICATION (size: 16)
 */
export interface AUDIO_ENDPOINT_VOLUME_CHANGE_NOTIFICATION {
  /** Windows.Win32.Media.Audio.IMMDevice */
  endpoint: Uint8Array | Deno.PointerValue | null;
  /** ptr */
  volume: Deno.PointerValue | Uint8Array | null;
}

export const sizeofAUDIO_ENDPOINT_VOLUME_CHANGE_NOTIFICATION = 16;

export function allocAUDIO_ENDPOINT_VOLUME_CHANGE_NOTIFICATION(data?: Partial<AUDIO_ENDPOINT_VOLUME_CHANGE_NOTIFICATION>): Uint8Array {
  const buf = new Uint8Array(sizeofAUDIO_ENDPOINT_VOLUME_CHANGE_NOTIFICATION);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.endpoint !== undefined) view.setBigUint64(0, data.endpoint === null ? 0n : BigInt(util.toPointer(data.endpoint)), true);
  // 0x08: pointer
  if (data?.volume !== undefined) view.setBigUint64(8, data.volume === null ? 0n : BigInt(util.toPointer(data.volume)), true);
  return buf;
}

/**
 * Windows.Win32.Media.Audio.Apo.AUDIO_ENDPOINT_PROPERTY_CHANGE_NOTIFICATION (size: 24)
 */
export interface AUDIO_ENDPOINT_PROPERTY_CHANGE_NOTIFICATION {
  /** Windows.Win32.Media.Audio.IMMDevice */
  endpoint: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.UI.Shell.PropertiesSystem.IPropertyStore */
  propertyStore: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.UI.Shell.PropertiesSystem.PROPERTYKEY */
  propertyKey: Uint8Array | Deno.PointerValue | null;
}

export const sizeofAUDIO_ENDPOINT_PROPERTY_CHANGE_NOTIFICATION = 24;

export function allocAUDIO_ENDPOINT_PROPERTY_CHANGE_NOTIFICATION(data?: Partial<AUDIO_ENDPOINT_PROPERTY_CHANGE_NOTIFICATION>): Uint8Array {
  const buf = new Uint8Array(sizeofAUDIO_ENDPOINT_PROPERTY_CHANGE_NOTIFICATION);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.endpoint !== undefined) view.setBigUint64(0, data.endpoint === null ? 0n : BigInt(util.toPointer(data.endpoint)), true);
  // 0x08: pointer
  if (data?.propertyStore !== undefined) view.setBigUint64(8, data.propertyStore === null ? 0n : BigInt(util.toPointer(data.propertyStore)), true);
  // 0x10: pointer
  if (data?.propertyKey !== undefined) view.setBigUint64(16, data.propertyKey === null ? 0n : BigInt(util.toPointer(data.propertyKey)), true);
  return buf;
}

/**
 * Windows.Win32.Media.Audio.Apo.AUDIO_SYSTEMEFFECTS_PROPERTY_CHANGE_NOTIFICATION (size: 40)
 */
export interface AUDIO_SYSTEMEFFECTS_PROPERTY_CHANGE_NOTIFICATION {
  /** Windows.Win32.Media.Audio.IMMDevice */
  endpoint: Uint8Array | Deno.PointerValue | null;
  /** System.Guid */
  propertyStoreContext: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Media.Audio.__MIDL___MIDL_itf_mmdeviceapi_0000_0008_0002 */
  propertyStoreType: __MIDL___MIDL_itf_mmdeviceapi_0000_0008_0002;
  /** Windows.Win32.UI.Shell.PropertiesSystem.IPropertyStore */
  propertyStore: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.UI.Shell.PropertiesSystem.PROPERTYKEY */
  propertyKey: Uint8Array | Deno.PointerValue | null;
}

export const sizeofAUDIO_SYSTEMEFFECTS_PROPERTY_CHANGE_NOTIFICATION = 40;

export function allocAUDIO_SYSTEMEFFECTS_PROPERTY_CHANGE_NOTIFICATION(data?: Partial<AUDIO_SYSTEMEFFECTS_PROPERTY_CHANGE_NOTIFICATION>): Uint8Array {
  const buf = new Uint8Array(sizeofAUDIO_SYSTEMEFFECTS_PROPERTY_CHANGE_NOTIFICATION);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.endpoint !== undefined) view.setBigUint64(0, data.endpoint === null ? 0n : BigInt(util.toPointer(data.endpoint)), true);
  // 0x08: pointer
  if (data?.propertyStoreContext !== undefined) view.setBigUint64(8, data.propertyStoreContext === null ? 0n : BigInt(util.toPointer(data.propertyStoreContext)), true);
  // 0x10: i32
  if (data?.propertyStoreType !== undefined) view.setInt32(16, Number(data.propertyStoreType), true);
  // 0x14: pad4
  // 0x18: pointer
  if (data?.propertyStore !== undefined) view.setBigUint64(24, data.propertyStore === null ? 0n : BigInt(util.toPointer(data.propertyStore)), true);
  // 0x20: pointer
  if (data?.propertyKey !== undefined) view.setBigUint64(32, data.propertyKey === null ? 0n : BigInt(util.toPointer(data.propertyKey)), true);
  return buf;
}

/**
 * _Anonymous_e__Struct (size: 16)
 */
export interface _Anonymous_e__Struct {
  /** u64 */
  Alignment: Deno.PointerValue;
  /** u64 */
  Region: Deno.PointerValue;
}

export const sizeof_Anonymous_e__Struct = 16;

export function alloc_Anonymous_e__Struct(data?: Partial<_Anonymous_e__Struct>): Uint8Array {
  const buf = new Uint8Array(sizeof_Anonymous_e__Struct);
  const view = new DataView(buf.buffer);
  // 0x00: u64
  if (data?.Alignment !== undefined) view.setBigUint64(0, BigInt(data.Alignment), true);
  // 0x08: u64
  if (data?.Region !== undefined) view.setBigUint64(8, BigInt(data.Region), true);
  return buf;
}

/**
 * _Anonymous_e__Union (size: 16)
 */
export interface _Anonymous_e__Union {
  /** _Anonymous_e__Struct */
  Anonymous: Uint8Array | Deno.PointerValue | null;
  /** array */
  X: Deno.PointerValue | null;
}

export const sizeof_Anonymous_e__Union = 16;

export function alloc_Anonymous_e__Union(data?: Partial<_Anonymous_e__Union>): Uint8Array {
  const buf = new Uint8Array(sizeof_Anonymous_e__Union);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.Anonymous !== undefined) view.setBigUint64(0, data.Anonymous === null ? 0n : BigInt(util.toPointer(data.Anonymous)), true);
  // 0x08: pointer
  if (data?.X !== undefined) view.setBigUint64(8, data.X === null ? 0n : BigInt(util.toPointer(data.X)), true);
  return buf;
}

/**
 * Windows.Win32.Media.Audio.Apo.APO_NOTIFICATION (size: 16)
 */
export interface APO_NOTIFICATION {
  /** Windows.Win32.Media.Audio.Apo.APO_NOTIFICATION_TYPE */
  type: APO_NOTIFICATION_TYPE;
  /** _Anonymous_e__Union */
  Anonymous: Uint8Array | Deno.PointerValue | null;
}

export const sizeofAPO_NOTIFICATION = 16;

export function allocAPO_NOTIFICATION(data?: Partial<APO_NOTIFICATION>): Uint8Array {
  const buf = new Uint8Array(sizeofAPO_NOTIFICATION);
  const view = new DataView(buf.buffer);
  // 0x00: i32
  if (data?.type !== undefined) view.setInt32(0, Number(data.type), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.Anonymous !== undefined) view.setBigUint64(8, data.Anonymous === null ? 0n : BigInt(util.toPointer(data.Anonymous)), true);
  return buf;
}

/**
 * Windows.Win32.Media.Audio.Apo.AUDIO_ENDPOINT_VOLUME_APO_NOTIFICATION_DESCRIPTOR (size: 8)
 */
export interface AUDIO_ENDPOINT_VOLUME_APO_NOTIFICATION_DESCRIPTOR {
  /** Windows.Win32.Media.Audio.IMMDevice */
  device: Uint8Array | Deno.PointerValue | null;
}

export const sizeofAUDIO_ENDPOINT_VOLUME_APO_NOTIFICATION_DESCRIPTOR = 8;

export function allocAUDIO_ENDPOINT_VOLUME_APO_NOTIFICATION_DESCRIPTOR(data?: Partial<AUDIO_ENDPOINT_VOLUME_APO_NOTIFICATION_DESCRIPTOR>): Uint8Array {
  const buf = new Uint8Array(sizeofAUDIO_ENDPOINT_VOLUME_APO_NOTIFICATION_DESCRIPTOR);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.device !== undefined) view.setBigUint64(0, data.device === null ? 0n : BigInt(util.toPointer(data.device)), true);
  return buf;
}

/**
 * Windows.Win32.Media.Audio.Apo.AUDIO_ENDPOINT_PROPERTY_CHANGE_APO_NOTIFICATION_DESCRIPTOR (size: 8)
 */
export interface AUDIO_ENDPOINT_PROPERTY_CHANGE_APO_NOTIFICATION_DESCRIPTOR {
  /** Windows.Win32.Media.Audio.IMMDevice */
  device: Uint8Array | Deno.PointerValue | null;
}

export const sizeofAUDIO_ENDPOINT_PROPERTY_CHANGE_APO_NOTIFICATION_DESCRIPTOR = 8;

export function allocAUDIO_ENDPOINT_PROPERTY_CHANGE_APO_NOTIFICATION_DESCRIPTOR(data?: Partial<AUDIO_ENDPOINT_PROPERTY_CHANGE_APO_NOTIFICATION_DESCRIPTOR>): Uint8Array {
  const buf = new Uint8Array(sizeofAUDIO_ENDPOINT_PROPERTY_CHANGE_APO_NOTIFICATION_DESCRIPTOR);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.device !== undefined) view.setBigUint64(0, data.device === null ? 0n : BigInt(util.toPointer(data.device)), true);
  return buf;
}

/**
 * Windows.Win32.Media.Audio.Apo.AUDIO_SYSTEMEFFECTS_PROPERTY_CHANGE_APO_NOTIFICATION_DESCRIPTOR (size: 16)
 */
export interface AUDIO_SYSTEMEFFECTS_PROPERTY_CHANGE_APO_NOTIFICATION_DESCRIPTOR {
  /** Windows.Win32.Media.Audio.IMMDevice */
  device: Uint8Array | Deno.PointerValue | null;
  /** System.Guid */
  propertyStoreContext: Uint8Array | Deno.PointerValue | null;
}

export const sizeofAUDIO_SYSTEMEFFECTS_PROPERTY_CHANGE_APO_NOTIFICATION_DESCRIPTOR = 16;

export function allocAUDIO_SYSTEMEFFECTS_PROPERTY_CHANGE_APO_NOTIFICATION_DESCRIPTOR(data?: Partial<AUDIO_SYSTEMEFFECTS_PROPERTY_CHANGE_APO_NOTIFICATION_DESCRIPTOR>): Uint8Array {
  const buf = new Uint8Array(sizeofAUDIO_SYSTEMEFFECTS_PROPERTY_CHANGE_APO_NOTIFICATION_DESCRIPTOR);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.device !== undefined) view.setBigUint64(0, data.device === null ? 0n : BigInt(util.toPointer(data.device)), true);
  // 0x08: pointer
  if (data?.propertyStoreContext !== undefined) view.setBigUint64(8, data.propertyStoreContext === null ? 0n : BigInt(util.toPointer(data.propertyStoreContext)), true);
  return buf;
}

/**
 * Windows.Win32.Media.Audio.Apo.APO_NOTIFICATION_DESCRIPTOR (size: 16)
 */
export interface APO_NOTIFICATION_DESCRIPTOR {
  /** Windows.Win32.Media.Audio.Apo.APO_NOTIFICATION_TYPE */
  type: APO_NOTIFICATION_TYPE;
  /** _Anonymous_e__Union */
  Anonymous: Uint8Array | Deno.PointerValue | null;
}

export const sizeofAPO_NOTIFICATION_DESCRIPTOR = 16;

export function allocAPO_NOTIFICATION_DESCRIPTOR(data?: Partial<APO_NOTIFICATION_DESCRIPTOR>): Uint8Array {
  const buf = new Uint8Array(sizeofAPO_NOTIFICATION_DESCRIPTOR);
  const view = new DataView(buf.buffer);
  // 0x00: i32
  if (data?.type !== undefined) view.setInt32(0, Number(data.type), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.Anonymous !== undefined) view.setBigUint64(8, data.Anonymous === null ? 0n : BigInt(util.toPointer(data.Anonymous)), true);
  return buf;
}

// Native Libraries

// Symbols

