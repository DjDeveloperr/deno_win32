/// Auto-generated by Deno Win32: Windows.Win32.Media.Audio.XAudio2.Apis

import * as util from "../../../util.ts";

// Enums
export type XAPO_BUFFER_FLAGS = number;
export type XAUDIO2_FILTER_TYPE = number;
export type HrtfDirectivityType = number;
export type HrtfEnvironment = number;
export type HrtfDistanceDecayType = number;

// Constants
export const FXEQ_MIN_FRAMERATE = 22000;
export const FXEQ_MAX_FRAMERATE = 48000;
export const FXEQ_MIN_FREQUENCY_CENTER = 20;
export const FXEQ_MAX_FREQUENCY_CENTER = 20000;
export const FXEQ_DEFAULT_FREQUENCY_CENTER_0 = 100;
export const FXEQ_DEFAULT_FREQUENCY_CENTER_1 = 800;
export const FXEQ_DEFAULT_FREQUENCY_CENTER_2 = 2000;
export const FXEQ_DEFAULT_FREQUENCY_CENTER_3 = 10000;
export const FXEQ_MIN_GAIN = `0.12600000202655792`;
export const FXEQ_MAX_GAIN = `7.940000057220459`;
export const FXEQ_DEFAULT_GAIN = 1;
export const FXEQ_MIN_BANDWIDTH = `0.10000000149011612`;
export const FXEQ_MAX_BANDWIDTH = 2;
export const FXEQ_DEFAULT_BANDWIDTH = 1;
export const FXMASTERINGLIMITER_MIN_RELEASE = 1;
export const FXMASTERINGLIMITER_MAX_RELEASE = 20;
export const FXMASTERINGLIMITER_DEFAULT_RELEASE = 6;
export const FXMASTERINGLIMITER_MIN_LOUDNESS = 1;
export const FXMASTERINGLIMITER_MAX_LOUDNESS = 1800;
export const FXMASTERINGLIMITER_DEFAULT_LOUDNESS = 1000;
export const FXREVERB_MIN_DIFFUSION = 0;
export const FXREVERB_MAX_DIFFUSION = 1;
export const FXREVERB_DEFAULT_DIFFUSION = `0.8999999761581421`;
export const FXREVERB_MIN_ROOMSIZE = `0.00009999999747378752`;
export const FXREVERB_MAX_ROOMSIZE = 1;
export const FXREVERB_DEFAULT_ROOMSIZE = `0.6000000238418579`;
export const FXLOUDNESS_DEFAULT_MOMENTARY_MS = 400;
export const FXLOUDNESS_DEFAULT_SHORTTERM_MS = 3000;
export const FXECHO_MIN_WETDRYMIX = 0;
export const FXECHO_MAX_WETDRYMIX = 1;
export const FXECHO_DEFAULT_WETDRYMIX = `0.5`;
export const FXECHO_MIN_FEEDBACK = 0;
export const FXECHO_MAX_FEEDBACK = 1;
export const FXECHO_DEFAULT_FEEDBACK = `0.5`;
export const FXECHO_MIN_DELAY = 1;
export const FXECHO_MAX_DELAY = 2000;
export const FXECHO_DEFAULT_DELAY = 500;
export const XAUDIO2_DLL_A = `xaudio2_9.dll`;
export const XAUDIO2_DLL_W = `xaudio2_9.dll`;
export const XAUDIO2D_DLL_A = `xaudio2_9d.dll`;
export const XAUDIO2D_DLL_W = `xaudio2_9d.dll`;
export const XAUDIO2_DLL = `xaudio2_9.dll`;
export const XAUDIO2D_DLL = `xaudio2_9d.dll`;
export const XAUDIO2_MAX_BUFFER_BYTES = 2147483648;
export const XAUDIO2_MAX_QUEUED_BUFFERS = 64;
export const XAUDIO2_MAX_BUFFERS_SYSTEM = 2;
export const XAUDIO2_MAX_AUDIO_CHANNELS = 64;
export const XAUDIO2_MIN_SAMPLE_RATE = 1000;
export const XAUDIO2_MAX_SAMPLE_RATE = 200000;
export const XAUDIO2_MAX_VOLUME_LEVEL = 16777216;
export const XAUDIO2_MAX_FREQ_RATIO = 1024;
export const XAUDIO2_DEFAULT_FREQ_RATIO = 2;
export const XAUDIO2_MAX_FILTER_ONEOVERQ = `1.5`;
export const XAUDIO2_MAX_FILTER_FREQUENCY = 1;
export const XAUDIO2_MAX_LOOP_COUNT = 254;
export const XAUDIO2_MAX_INSTANCES = 8;
export const XAUDIO2_MAX_RATIO_TIMES_RATE_XMA_MONO = 600000;
export const XAUDIO2_MAX_RATIO_TIMES_RATE_XMA_MULTICHANNEL = 300000;
export const XAUDIO2_COMMIT_NOW = 0;
export const XAUDIO2_COMMIT_ALL = 0;
export const XAUDIO2_NO_LOOP_REGION = 0;
export const XAUDIO2_LOOP_INFINITE = 255;
export const XAUDIO2_DEFAULT_CHANNELS = 0;
export const XAUDIO2_DEFAULT_SAMPLERATE = 0;
export const XAUDIO2_DEBUG_ENGINE = 1;
export const XAUDIO2_VOICE_NOPITCH = 2;
export const XAUDIO2_VOICE_NOSRC = 4;
export const XAUDIO2_VOICE_USEFILTER = 8;
export const XAUDIO2_PLAY_TAILS = 32;
export const XAUDIO2_END_OF_STREAM = 64;
export const XAUDIO2_SEND_USEFILTER = 128;
export const XAUDIO2_VOICE_NOSAMPLESPLAYED = 256;
export const XAUDIO2_STOP_ENGINE_WHEN_IDLE = 8192;
export const XAUDIO2_1024_QUANTUM = 32768;
export const XAUDIO2_NO_VIRTUAL_AUDIO_CLIENT = 65536;
export const XAUDIO2_DEFAULT_FILTER_FREQUENCY = 1;
export const XAUDIO2_DEFAULT_FILTER_ONEOVERQ = 1;
export const XAUDIO2_QUANTUM_NUMERATOR = 1;
export const XAUDIO2_QUANTUM_DENOMINATOR = 100;
export const FACILITY_XAUDIO2 = 2198;
export const XAUDIO2_E_INVALID_CALL = 10808641324183846913n;
export const XAUDIO2_E_XMA_DECODER_ERROR = 10808642423695474690n;
export const XAUDIO2_E_XAPO_CREATION_FAILED = 10808643523207102467n;
export const XAUDIO2_E_DEVICE_INVALIDATED = 14411518827056988164n;
export const Processor1 = 1;
export const Processor2 = 2;
export const Processor3 = 4;
export const Processor4 = 8;
export const Processor5 = 16;
export const Processor6 = 32;
export const Processor7 = 64;
export const Processor8 = 128;
export const Processor9 = 256;
export const Processor10 = 512;
export const Processor11 = 1024;
export const Processor12 = 2048;
export const Processor13 = 4096;
export const Processor14 = 8192;
export const Processor15 = 16384;
export const Processor16 = 32768;
export const Processor17 = 65536;
export const Processor18 = 131072;
export const Processor19 = 262144;
export const Processor20 = 524288;
export const Processor21 = 1048576;
export const Processor22 = 2097152;
export const Processor23 = 4194304;
export const Processor24 = 8388608;
export const Processor25 = 16777216;
export const Processor26 = 33554432;
export const Processor27 = 67108864;
export const Processor28 = 134217728;
export const Processor29 = 268435456;
export const Processor30 = 536870912;
export const Processor31 = 1073741824;
export const Processor32 = 2147483648;
export const XAUDIO2_ANY_PROCESSOR = 4294967295;
export const XAUDIO2_USE_DEFAULT_PROCESSOR = 0;
export const XAUDIO2_DEFAULT_PROCESSOR = 1;
export const XAUDIO2_LOG_ERRORS = 1;
export const XAUDIO2_LOG_WARNINGS = 2;
export const XAUDIO2_LOG_INFO = 4;
export const XAUDIO2_LOG_DETAIL = 8;
export const XAUDIO2_LOG_API_CALLS = 16;
export const XAUDIO2_LOG_FUNC_CALLS = 32;
export const XAUDIO2_LOG_TIMING = 64;
export const XAUDIO2_LOG_LOCKS = 128;
export const XAUDIO2_LOG_MEMORY = 256;
export const XAUDIO2_LOG_STREAMING = 4096;
export const XAUDIO2FX_REVERB_MIN_FRAMERATE = 20000;
export const XAUDIO2FX_REVERB_MAX_FRAMERATE = 48000;
export const XAUDIO2FX_REVERB_MIN_WET_DRY_MIX = 0;
export const XAUDIO2FX_REVERB_MIN_REFLECTIONS_DELAY = 0;
export const XAUDIO2FX_REVERB_MIN_REVERB_DELAY = 0;
export const XAUDIO2FX_REVERB_MIN_REAR_DELAY = 0;
export const XAUDIO2FX_REVERB_MIN_7POINT1_SIDE_DELAY = 0;
export const XAUDIO2FX_REVERB_MIN_7POINT1_REAR_DELAY = 0;
export const XAUDIO2FX_REVERB_MIN_POSITION = 0;
export const XAUDIO2FX_REVERB_MIN_DIFFUSION = 0;
export const XAUDIO2FX_REVERB_MIN_LOW_EQ_GAIN = 0;
export const XAUDIO2FX_REVERB_MIN_LOW_EQ_CUTOFF = 0;
export const XAUDIO2FX_REVERB_MIN_HIGH_EQ_GAIN = 0;
export const XAUDIO2FX_REVERB_MIN_HIGH_EQ_CUTOFF = 0;
export const XAUDIO2FX_REVERB_MIN_ROOM_FILTER_FREQ = 20;
export const XAUDIO2FX_REVERB_MIN_ROOM_FILTER_MAIN = `-100`;
export const XAUDIO2FX_REVERB_MIN_ROOM_FILTER_HF = `-100`;
export const XAUDIO2FX_REVERB_MIN_REFLECTIONS_GAIN = `-100`;
export const XAUDIO2FX_REVERB_MIN_REVERB_GAIN = `-100`;
export const XAUDIO2FX_REVERB_MIN_DECAY_TIME = `0.10000000149011612`;
export const XAUDIO2FX_REVERB_MIN_DENSITY = 0;
export const XAUDIO2FX_REVERB_MIN_ROOM_SIZE = 0;
export const XAUDIO2FX_REVERB_MAX_WET_DRY_MIX = 100;
export const XAUDIO2FX_REVERB_MAX_REFLECTIONS_DELAY = 300;
export const XAUDIO2FX_REVERB_MAX_REVERB_DELAY = 85;
export const XAUDIO2FX_REVERB_MAX_REAR_DELAY = 5;
export const XAUDIO2FX_REVERB_MAX_7POINT1_SIDE_DELAY = 5;
export const XAUDIO2FX_REVERB_MAX_7POINT1_REAR_DELAY = 20;
export const XAUDIO2FX_REVERB_MAX_POSITION = 30;
export const XAUDIO2FX_REVERB_MAX_DIFFUSION = 15;
export const XAUDIO2FX_REVERB_MAX_LOW_EQ_GAIN = 12;
export const XAUDIO2FX_REVERB_MAX_LOW_EQ_CUTOFF = 9;
export const XAUDIO2FX_REVERB_MAX_HIGH_EQ_GAIN = 8;
export const XAUDIO2FX_REVERB_MAX_HIGH_EQ_CUTOFF = 14;
export const XAUDIO2FX_REVERB_MAX_ROOM_FILTER_FREQ = 20000;
export const XAUDIO2FX_REVERB_MAX_ROOM_FILTER_MAIN = 0;
export const XAUDIO2FX_REVERB_MAX_ROOM_FILTER_HF = 0;
export const XAUDIO2FX_REVERB_MAX_REFLECTIONS_GAIN = 20;
export const XAUDIO2FX_REVERB_MAX_REVERB_GAIN = 20;
export const XAUDIO2FX_REVERB_MAX_DENSITY = 100;
export const XAUDIO2FX_REVERB_MAX_ROOM_SIZE = 100;
export const XAUDIO2FX_REVERB_DEFAULT_WET_DRY_MIX = 100;
export const XAUDIO2FX_REVERB_DEFAULT_REFLECTIONS_DELAY = 5;
export const XAUDIO2FX_REVERB_DEFAULT_REVERB_DELAY = 5;
export const XAUDIO2FX_REVERB_DEFAULT_REAR_DELAY = 5;
export const XAUDIO2FX_REVERB_DEFAULT_7POINT1_SIDE_DELAY = 5;
export const XAUDIO2FX_REVERB_DEFAULT_7POINT1_REAR_DELAY = 20;
export const XAUDIO2FX_REVERB_DEFAULT_POSITION = 6;
export const XAUDIO2FX_REVERB_DEFAULT_POSITION_MATRIX = 27;
export const XAUDIO2FX_REVERB_DEFAULT_EARLY_DIFFUSION = 8;
export const XAUDIO2FX_REVERB_DEFAULT_LATE_DIFFUSION = 8;
export const XAUDIO2FX_REVERB_DEFAULT_LOW_EQ_GAIN = 8;
export const XAUDIO2FX_REVERB_DEFAULT_LOW_EQ_CUTOFF = 4;
export const XAUDIO2FX_REVERB_DEFAULT_HIGH_EQ_GAIN = 8;
export const XAUDIO2FX_REVERB_DEFAULT_HIGH_EQ_CUTOFF = 4;
export const XAUDIO2FX_REVERB_DEFAULT_ROOM_FILTER_FREQ = 5000;
export const XAUDIO2FX_REVERB_DEFAULT_ROOM_FILTER_MAIN = 0;
export const XAUDIO2FX_REVERB_DEFAULT_ROOM_FILTER_HF = 0;
export const XAUDIO2FX_REVERB_DEFAULT_REFLECTIONS_GAIN = 0;
export const XAUDIO2FX_REVERB_DEFAULT_REVERB_GAIN = 0;
export const XAUDIO2FX_REVERB_DEFAULT_DECAY_TIME = 1;
export const XAUDIO2FX_REVERB_DEFAULT_DENSITY = 100;
export const XAUDIO2FX_REVERB_DEFAULT_ROOM_SIZE = 100;
export const XAUDIO2FX_REVERB_DEFAULT_DISABLE_LATE_FIELD = 0;
export const HRTF_MAX_GAIN_LIMIT = 12;
export const HRTF_MIN_GAIN_LIMIT = `-96`;
export const HRTF_MIN_UNITY_GAIN_DISTANCE = `0.05000000074505806`;
export const HRTF_DEFAULT_UNITY_GAIN_DISTANCE = 1;
export const FACILITY_XAPO = 2199;
export const XAPO_E_FORMAT_UNSUPPORTED = 5264667301937348609n;
export const XAPO_MIN_CHANNELS = 1;
export const XAPO_MAX_CHANNELS = 64;
export const XAPO_MIN_FRAMERATE = 1000;
export const XAPO_MAX_FRAMERATE = 200000;
export const XAPO_REGISTRATION_STRING_LENGTH = 256;
export const XAPO_FLAG_CHANNELS_MUST_MATCH = 1;
export const XAPO_FLAG_FRAMERATE_MUST_MATCH = 2;
export const XAPO_FLAG_BITSPERSAMPLE_MUST_MATCH = 4;
export const XAPO_FLAG_BUFFERCOUNT_MUST_MATCH = 8;
export const XAPO_FLAG_INPLACE_REQUIRED = 32;
export const XAPO_FLAG_INPLACE_SUPPORTED = 16;
export const SPEAKER_MONO = 4;
export const X3DAUDIO_HANDLE_BYTESIZE = 20;
export const X3DAUDIO_PI = `3.1415927410125732`;
export const X3DAUDIO_2PI = `6.2831854820251465`;
export const X3DAUDIO_SPEED_OF_SOUND = `343.5`;
export const X3DAUDIO_CALCULATE_MATRIX = 1;
export const X3DAUDIO_CALCULATE_DELAY = 2;
export const X3DAUDIO_CALCULATE_LPF_DIRECT = 4;
export const X3DAUDIO_CALCULATE_LPF_REVERB = 8;
export const X3DAUDIO_CALCULATE_REVERB = 16;
export const X3DAUDIO_CALCULATE_DOPPLER = 32;
export const X3DAUDIO_CALCULATE_EMITTER_ANGLE = 64;
export const X3DAUDIO_CALCULATE_ZEROCENTER = 65536;
export const X3DAUDIO_CALCULATE_REDIRECT_TO_LFE = 131072;
export const XAPO_BUFFER_SILENT = 0;
export const XAPO_BUFFER_VALID = 1;
export const LowPassFilter = 0;
export const BandPassFilter = 1;
export const HighPassFilter = 2;
export const NotchFilter = 3;
export const LowPassOnePoleFilter = 4;
export const HighPassOnePoleFilter = 5;
export const OmniDirectional = 0;
export const Cardioid = 1;
export const Cone = 2;
export const Small = 0;
export const Medium = 1;
export const Large = 2;
export const Outdoors = 3;
export const NaturalDecay = 0;
export const CustomDecay = 1;

// Structs

/**
 * Windows.Win32.Media.Audio.XAudio2.XAPO_REGISTRATION_PROPERTIES (size: 56)
 */
export interface XAPO_REGISTRATION_PROPERTIES {
  /** System.Guid */
  clsid: Uint8Array | Deno.PointerValue | null;
  /** array */
  FriendlyName: Deno.PointerValue | null;
  /** array */
  CopyrightInfo: Deno.PointerValue | null;
  /** u32 */
  MajorVersion: number;
  /** u32 */
  MinorVersion: number;
  /** u32 */
  Flags: number;
  /** u32 */
  MinInputBufferCount: number;
  /** u32 */
  MaxInputBufferCount: number;
  /** u32 */
  MinOutputBufferCount: number;
  /** u32 */
  MaxOutputBufferCount: number;
}

export const sizeofXAPO_REGISTRATION_PROPERTIES = 56;

export function allocXAPO_REGISTRATION_PROPERTIES(data?: Partial<XAPO_REGISTRATION_PROPERTIES>): Uint8Array {
  const buf = new Uint8Array(sizeofXAPO_REGISTRATION_PROPERTIES);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.clsid !== undefined) view.setBigUint64(0, data.clsid === null ? 0n : util.toBigInt(util.toPointer(data.clsid)), true);
  // 0x08: pointer
  if (data?.FriendlyName !== undefined) view.setBigUint64(8, data.FriendlyName === null ? 0n : util.toBigInt(util.toPointer(data.FriendlyName)), true);
  // 0x10: pointer
  if (data?.CopyrightInfo !== undefined) view.setBigUint64(16, data.CopyrightInfo === null ? 0n : util.toBigInt(util.toPointer(data.CopyrightInfo)), true);
  // 0x18: u32
  if (data?.MajorVersion !== undefined) view.setUint32(24, Number(data.MajorVersion), true);
  // 0x1c: u32
  if (data?.MinorVersion !== undefined) view.setUint32(28, Number(data.MinorVersion), true);
  // 0x20: u32
  if (data?.Flags !== undefined) view.setUint32(32, Number(data.Flags), true);
  // 0x24: u32
  if (data?.MinInputBufferCount !== undefined) view.setUint32(36, Number(data.MinInputBufferCount), true);
  // 0x28: u32
  if (data?.MaxInputBufferCount !== undefined) view.setUint32(40, Number(data.MaxInputBufferCount), true);
  // 0x2c: u32
  if (data?.MinOutputBufferCount !== undefined) view.setUint32(44, Number(data.MinOutputBufferCount), true);
  // 0x30: u32
  if (data?.MaxOutputBufferCount !== undefined) view.setUint32(48, Number(data.MaxOutputBufferCount), true);
  // 0x34: pad4
  return buf;
}

export class XAPO_REGISTRATION_PROPERTIESView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get clsid(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(0, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x08: pointer
  get FriendlyName(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(8, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x10: pointer
  get CopyrightInfo(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(16, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x18: u32
  get MajorVersion(): number {
    return this.view.getUint32(24, true);
  }

  // 0x1c: u32
  get MinorVersion(): number {
    return this.view.getUint32(28, true);
  }

  // 0x20: u32
  get Flags(): number {
    return this.view.getUint32(32, true);
  }

  // 0x24: u32
  get MinInputBufferCount(): number {
    return this.view.getUint32(36, true);
  }

  // 0x28: u32
  get MaxInputBufferCount(): number {
    return this.view.getUint32(40, true);
  }

  // 0x2c: u32
  get MinOutputBufferCount(): number {
    return this.view.getUint32(44, true);
  }

  // 0x30: u32
  get MaxOutputBufferCount(): number {
    return this.view.getUint32(48, true);
  }

  // 0x34: pad4

  // 0x00: pointer
  set clsid(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(0, util.toBigInt(util.toPointer(value)), true);
  }

  // 0x08: pointer
  set FriendlyName(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(8, util.toBigInt(util.toPointer(value)), true);
  }

  // 0x10: pointer
  set CopyrightInfo(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(16, util.toBigInt(util.toPointer(value)), true);
  }

  // 0x18: u32
  set MajorVersion(value: number) {
    this.view.setUint32(24, value, true);
  }

  // 0x1c: u32
  set MinorVersion(value: number) {
    this.view.setUint32(28, value, true);
  }

  // 0x20: u32
  set Flags(value: number) {
    this.view.setUint32(32, value, true);
  }

  // 0x24: u32
  set MinInputBufferCount(value: number) {
    this.view.setUint32(36, value, true);
  }

  // 0x28: u32
  set MaxInputBufferCount(value: number) {
    this.view.setUint32(40, value, true);
  }

  // 0x2c: u32
  set MinOutputBufferCount(value: number) {
    this.view.setUint32(44, value, true);
  }

  // 0x30: u32
  set MaxOutputBufferCount(value: number) {
    this.view.setUint32(48, value, true);
  }

  // 0x34: pad4
}

/**
 * Windows.Win32.Media.Audio.XAudio2.XAPO_LOCKFORPROCESS_PARAMETERS (size: 16)
 */
export interface XAPO_LOCKFORPROCESS_PARAMETERS {
  /** ptr */
  pFormat: Deno.PointerValue | Uint8Array | null;
  /** u32 */
  MaxFrameCount: number;
}

export const sizeofXAPO_LOCKFORPROCESS_PARAMETERS = 16;

export function allocXAPO_LOCKFORPROCESS_PARAMETERS(data?: Partial<XAPO_LOCKFORPROCESS_PARAMETERS>): Uint8Array {
  const buf = new Uint8Array(sizeofXAPO_LOCKFORPROCESS_PARAMETERS);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.pFormat !== undefined) view.setBigUint64(0, data.pFormat === null ? 0n : util.toBigInt(util.toPointer(data.pFormat)), true);
  // 0x08: u32
  if (data?.MaxFrameCount !== undefined) view.setUint32(8, Number(data.MaxFrameCount), true);
  // 0x0c: pad4
  return buf;
}

export class XAPO_LOCKFORPROCESS_PARAMETERSView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get pFormat(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(0, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x08: u32
  get MaxFrameCount(): number {
    return this.view.getUint32(8, true);
  }

  // 0x0c: pad4

  // 0x00: pointer
  set pFormat(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(0, util.toBigInt(util.toPointer(value)), true);
  }

  // 0x08: u32
  set MaxFrameCount(value: number) {
    this.view.setUint32(8, value, true);
  }

  // 0x0c: pad4
}

/**
 * Windows.Win32.Media.Audio.XAudio2.XAPO_PROCESS_BUFFER_PARAMETERS (size: 16)
 */
export interface XAPO_PROCESS_BUFFER_PARAMETERS {
  /** ptr */
  pBuffer: Deno.PointerValue | Uint8Array | null;
  /** Windows.Win32.Media.Audio.XAudio2.XAPO_BUFFER_FLAGS */
  BufferFlags: XAPO_BUFFER_FLAGS;
  /** u32 */
  ValidFrameCount: number;
}

export const sizeofXAPO_PROCESS_BUFFER_PARAMETERS = 16;

export function allocXAPO_PROCESS_BUFFER_PARAMETERS(data?: Partial<XAPO_PROCESS_BUFFER_PARAMETERS>): Uint8Array {
  const buf = new Uint8Array(sizeofXAPO_PROCESS_BUFFER_PARAMETERS);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.pBuffer !== undefined) view.setBigUint64(0, data.pBuffer === null ? 0n : util.toBigInt(util.toPointer(data.pBuffer)), true);
  // 0x08: i32
  if (data?.BufferFlags !== undefined) view.setInt32(8, Number(data.BufferFlags), true);
  // 0x0c: u32
  if (data?.ValidFrameCount !== undefined) view.setUint32(12, Number(data.ValidFrameCount), true);
  return buf;
}

export class XAPO_PROCESS_BUFFER_PARAMETERSView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get pBuffer(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(0, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x08: i32
  get BufferFlags(): number {
    return this.view.getInt32(8, true);
  }

  // 0x0c: u32
  get ValidFrameCount(): number {
    return this.view.getUint32(12, true);
  }

  // 0x00: pointer
  set pBuffer(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(0, util.toBigInt(util.toPointer(value)), true);
  }

  // 0x08: i32
  set BufferFlags(value: number) {
    this.view.setInt32(8, value, true);
  }

  // 0x0c: u32
  set ValidFrameCount(value: number) {
    this.view.setUint32(12, value, true);
  }
}

/**
 * Windows.Win32.Media.Audio.XAudio2.FXEQ_PARAMETERS (size: 48)
 */
export interface FXEQ_PARAMETERS {
  /** f32 */
  FrequencyCenter0: number;
  /** f32 */
  Gain0: number;
  /** f32 */
  Bandwidth0: number;
  /** f32 */
  FrequencyCenter1: number;
  /** f32 */
  Gain1: number;
  /** f32 */
  Bandwidth1: number;
  /** f32 */
  FrequencyCenter2: number;
  /** f32 */
  Gain2: number;
  /** f32 */
  Bandwidth2: number;
  /** f32 */
  FrequencyCenter3: number;
  /** f32 */
  Gain3: number;
  /** f32 */
  Bandwidth3: number;
}

export const sizeofFXEQ_PARAMETERS = 48;

export function allocFXEQ_PARAMETERS(data?: Partial<FXEQ_PARAMETERS>): Uint8Array {
  const buf = new Uint8Array(sizeofFXEQ_PARAMETERS);
  const view = new DataView(buf.buffer);
  // 0x00: f32
  if (data?.FrequencyCenter0 !== undefined) view.setFloat32(0, Number(data.FrequencyCenter0), true);
  // 0x04: f32
  if (data?.Gain0 !== undefined) view.setFloat32(4, Number(data.Gain0), true);
  // 0x08: f32
  if (data?.Bandwidth0 !== undefined) view.setFloat32(8, Number(data.Bandwidth0), true);
  // 0x0c: f32
  if (data?.FrequencyCenter1 !== undefined) view.setFloat32(12, Number(data.FrequencyCenter1), true);
  // 0x10: f32
  if (data?.Gain1 !== undefined) view.setFloat32(16, Number(data.Gain1), true);
  // 0x14: f32
  if (data?.Bandwidth1 !== undefined) view.setFloat32(20, Number(data.Bandwidth1), true);
  // 0x18: f32
  if (data?.FrequencyCenter2 !== undefined) view.setFloat32(24, Number(data.FrequencyCenter2), true);
  // 0x1c: f32
  if (data?.Gain2 !== undefined) view.setFloat32(28, Number(data.Gain2), true);
  // 0x20: f32
  if (data?.Bandwidth2 !== undefined) view.setFloat32(32, Number(data.Bandwidth2), true);
  // 0x24: f32
  if (data?.FrequencyCenter3 !== undefined) view.setFloat32(36, Number(data.FrequencyCenter3), true);
  // 0x28: f32
  if (data?.Gain3 !== undefined) view.setFloat32(40, Number(data.Gain3), true);
  // 0x2c: f32
  if (data?.Bandwidth3 !== undefined) view.setFloat32(44, Number(data.Bandwidth3), true);
  return buf;
}

export class FXEQ_PARAMETERSView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: f32
  get FrequencyCenter0(): number {
    return this.view.getFloat32(0, true);
  }

  // 0x04: f32
  get Gain0(): number {
    return this.view.getFloat32(4, true);
  }

  // 0x08: f32
  get Bandwidth0(): number {
    return this.view.getFloat32(8, true);
  }

  // 0x0c: f32
  get FrequencyCenter1(): number {
    return this.view.getFloat32(12, true);
  }

  // 0x10: f32
  get Gain1(): number {
    return this.view.getFloat32(16, true);
  }

  // 0x14: f32
  get Bandwidth1(): number {
    return this.view.getFloat32(20, true);
  }

  // 0x18: f32
  get FrequencyCenter2(): number {
    return this.view.getFloat32(24, true);
  }

  // 0x1c: f32
  get Gain2(): number {
    return this.view.getFloat32(28, true);
  }

  // 0x20: f32
  get Bandwidth2(): number {
    return this.view.getFloat32(32, true);
  }

  // 0x24: f32
  get FrequencyCenter3(): number {
    return this.view.getFloat32(36, true);
  }

  // 0x28: f32
  get Gain3(): number {
    return this.view.getFloat32(40, true);
  }

  // 0x2c: f32
  get Bandwidth3(): number {
    return this.view.getFloat32(44, true);
  }

  // 0x00: f32
  set FrequencyCenter0(value: number) {
    this.view.setFloat32(0, value, true);
  }

  // 0x04: f32
  set Gain0(value: number) {
    this.view.setFloat32(4, value, true);
  }

  // 0x08: f32
  set Bandwidth0(value: number) {
    this.view.setFloat32(8, value, true);
  }

  // 0x0c: f32
  set FrequencyCenter1(value: number) {
    this.view.setFloat32(12, value, true);
  }

  // 0x10: f32
  set Gain1(value: number) {
    this.view.setFloat32(16, value, true);
  }

  // 0x14: f32
  set Bandwidth1(value: number) {
    this.view.setFloat32(20, value, true);
  }

  // 0x18: f32
  set FrequencyCenter2(value: number) {
    this.view.setFloat32(24, value, true);
  }

  // 0x1c: f32
  set Gain2(value: number) {
    this.view.setFloat32(28, value, true);
  }

  // 0x20: f32
  set Bandwidth2(value: number) {
    this.view.setFloat32(32, value, true);
  }

  // 0x24: f32
  set FrequencyCenter3(value: number) {
    this.view.setFloat32(36, value, true);
  }

  // 0x28: f32
  set Gain3(value: number) {
    this.view.setFloat32(40, value, true);
  }

  // 0x2c: f32
  set Bandwidth3(value: number) {
    this.view.setFloat32(44, value, true);
  }
}

/**
 * Windows.Win32.Media.Audio.XAudio2.FXMASTERINGLIMITER_PARAMETERS (size: 8)
 */
export interface FXMASTERINGLIMITER_PARAMETERS {
  /** u32 */
  Release: number;
  /** u32 */
  Loudness: number;
}

export const sizeofFXMASTERINGLIMITER_PARAMETERS = 8;

export function allocFXMASTERINGLIMITER_PARAMETERS(data?: Partial<FXMASTERINGLIMITER_PARAMETERS>): Uint8Array {
  const buf = new Uint8Array(sizeofFXMASTERINGLIMITER_PARAMETERS);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.Release !== undefined) view.setUint32(0, Number(data.Release), true);
  // 0x04: u32
  if (data?.Loudness !== undefined) view.setUint32(4, Number(data.Loudness), true);
  return buf;
}

export class FXMASTERINGLIMITER_PARAMETERSView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get Release(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: u32
  get Loudness(): number {
    return this.view.getUint32(4, true);
  }

  // 0x00: u32
  set Release(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: u32
  set Loudness(value: number) {
    this.view.setUint32(4, value, true);
  }
}

/**
 * Windows.Win32.Media.Audio.XAudio2.FXREVERB_PARAMETERS (size: 8)
 */
export interface FXREVERB_PARAMETERS {
  /** f32 */
  Diffusion: number;
  /** f32 */
  RoomSize: number;
}

export const sizeofFXREVERB_PARAMETERS = 8;

export function allocFXREVERB_PARAMETERS(data?: Partial<FXREVERB_PARAMETERS>): Uint8Array {
  const buf = new Uint8Array(sizeofFXREVERB_PARAMETERS);
  const view = new DataView(buf.buffer);
  // 0x00: f32
  if (data?.Diffusion !== undefined) view.setFloat32(0, Number(data.Diffusion), true);
  // 0x04: f32
  if (data?.RoomSize !== undefined) view.setFloat32(4, Number(data.RoomSize), true);
  return buf;
}

export class FXREVERB_PARAMETERSView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: f32
  get Diffusion(): number {
    return this.view.getFloat32(0, true);
  }

  // 0x04: f32
  get RoomSize(): number {
    return this.view.getFloat32(4, true);
  }

  // 0x00: f32
  set Diffusion(value: number) {
    this.view.setFloat32(0, value, true);
  }

  // 0x04: f32
  set RoomSize(value: number) {
    this.view.setFloat32(4, value, true);
  }
}

/**
 * Windows.Win32.Media.Audio.XAudio2.FXECHO_INITDATA (size: 8)
 */
export interface FXECHO_INITDATA {
  /** f32 */
  MaxDelay: number;
}

export const sizeofFXECHO_INITDATA = 8;

export function allocFXECHO_INITDATA(data?: Partial<FXECHO_INITDATA>): Uint8Array {
  const buf = new Uint8Array(sizeofFXECHO_INITDATA);
  const view = new DataView(buf.buffer);
  // 0x00: f32
  if (data?.MaxDelay !== undefined) view.setFloat32(0, Number(data.MaxDelay), true);
  // 0x04: pad4
  return buf;
}

export class FXECHO_INITDATAView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: f32
  get MaxDelay(): number {
    return this.view.getFloat32(0, true);
  }

  // 0x04: pad4

  // 0x00: f32
  set MaxDelay(value: number) {
    this.view.setFloat32(0, value, true);
  }

  // 0x04: pad4
}

/**
 * Windows.Win32.Media.Audio.XAudio2.FXECHO_PARAMETERS (size: 16)
 */
export interface FXECHO_PARAMETERS {
  /** f32 */
  WetDryMix: number;
  /** f32 */
  Feedback: number;
  /** f32 */
  Delay: number;
}

export const sizeofFXECHO_PARAMETERS = 16;

export function allocFXECHO_PARAMETERS(data?: Partial<FXECHO_PARAMETERS>): Uint8Array {
  const buf = new Uint8Array(sizeofFXECHO_PARAMETERS);
  const view = new DataView(buf.buffer);
  // 0x00: f32
  if (data?.WetDryMix !== undefined) view.setFloat32(0, Number(data.WetDryMix), true);
  // 0x04: f32
  if (data?.Feedback !== undefined) view.setFloat32(4, Number(data.Feedback), true);
  // 0x08: f32
  if (data?.Delay !== undefined) view.setFloat32(8, Number(data.Delay), true);
  // 0x0c: pad4
  return buf;
}

export class FXECHO_PARAMETERSView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: f32
  get WetDryMix(): number {
    return this.view.getFloat32(0, true);
  }

  // 0x04: f32
  get Feedback(): number {
    return this.view.getFloat32(4, true);
  }

  // 0x08: f32
  get Delay(): number {
    return this.view.getFloat32(8, true);
  }

  // 0x0c: pad4

  // 0x00: f32
  set WetDryMix(value: number) {
    this.view.setFloat32(0, value, true);
  }

  // 0x04: f32
  set Feedback(value: number) {
    this.view.setFloat32(4, value, true);
  }

  // 0x08: f32
  set Delay(value: number) {
    this.view.setFloat32(8, value, true);
  }

  // 0x0c: pad4
}

/**
 * Windows.Win32.Media.Audio.XAudio2.XAUDIO2_VOICE_DETAILS (size: 16)
 */
export interface XAUDIO2_VOICE_DETAILS {
  /** u32 */
  CreationFlags: number;
  /** u32 */
  ActiveFlags: number;
  /** u32 */
  InputChannels: number;
  /** u32 */
  InputSampleRate: number;
}

export const sizeofXAUDIO2_VOICE_DETAILS = 16;

export function allocXAUDIO2_VOICE_DETAILS(data?: Partial<XAUDIO2_VOICE_DETAILS>): Uint8Array {
  const buf = new Uint8Array(sizeofXAUDIO2_VOICE_DETAILS);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.CreationFlags !== undefined) view.setUint32(0, Number(data.CreationFlags), true);
  // 0x04: u32
  if (data?.ActiveFlags !== undefined) view.setUint32(4, Number(data.ActiveFlags), true);
  // 0x08: u32
  if (data?.InputChannels !== undefined) view.setUint32(8, Number(data.InputChannels), true);
  // 0x0c: u32
  if (data?.InputSampleRate !== undefined) view.setUint32(12, Number(data.InputSampleRate), true);
  return buf;
}

export class XAUDIO2_VOICE_DETAILSView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get CreationFlags(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: u32
  get ActiveFlags(): number {
    return this.view.getUint32(4, true);
  }

  // 0x08: u32
  get InputChannels(): number {
    return this.view.getUint32(8, true);
  }

  // 0x0c: u32
  get InputSampleRate(): number {
    return this.view.getUint32(12, true);
  }

  // 0x00: u32
  set CreationFlags(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: u32
  set ActiveFlags(value: number) {
    this.view.setUint32(4, value, true);
  }

  // 0x08: u32
  set InputChannels(value: number) {
    this.view.setUint32(8, value, true);
  }

  // 0x0c: u32
  set InputSampleRate(value: number) {
    this.view.setUint32(12, value, true);
  }
}

/**
 * Windows.Win32.Media.Audio.XAudio2.XAUDIO2_SEND_DESCRIPTOR (size: 16)
 */
export interface XAUDIO2_SEND_DESCRIPTOR {
  /** u32 */
  Flags: number;
  /** Windows.Win32.Media.Audio.XAudio2.IXAudio2Voice */
  pOutputVoice: Uint8Array | Deno.PointerValue | null;
}

export const sizeofXAUDIO2_SEND_DESCRIPTOR = 16;

export function allocXAUDIO2_SEND_DESCRIPTOR(data?: Partial<XAUDIO2_SEND_DESCRIPTOR>): Uint8Array {
  const buf = new Uint8Array(sizeofXAUDIO2_SEND_DESCRIPTOR);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.Flags !== undefined) view.setUint32(0, Number(data.Flags), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.pOutputVoice !== undefined) view.setBigUint64(8, data.pOutputVoice === null ? 0n : util.toBigInt(util.toPointer(data.pOutputVoice)), true);
  return buf;
}

export class XAUDIO2_SEND_DESCRIPTORView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get Flags(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  get pOutputVoice(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(8, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: u32
  set Flags(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  set pOutputVoice(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(8, util.toBigInt(util.toPointer(value)), true);
  }
}

/**
 * Windows.Win32.Media.Audio.XAudio2.XAUDIO2_VOICE_SENDS (size: 16)
 */
export interface XAUDIO2_VOICE_SENDS {
  /** u32 */
  SendCount: number;
  /** ptr */
  pSends: Deno.PointerValue | Uint8Array | null;
}

export const sizeofXAUDIO2_VOICE_SENDS = 16;

export function allocXAUDIO2_VOICE_SENDS(data?: Partial<XAUDIO2_VOICE_SENDS>): Uint8Array {
  const buf = new Uint8Array(sizeofXAUDIO2_VOICE_SENDS);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.SendCount !== undefined) view.setUint32(0, Number(data.SendCount), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.pSends !== undefined) view.setBigUint64(8, data.pSends === null ? 0n : util.toBigInt(util.toPointer(data.pSends)), true);
  return buf;
}

export class XAUDIO2_VOICE_SENDSView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get SendCount(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  get pSends(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(8, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: u32
  set SendCount(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  set pSends(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(8, util.toBigInt(util.toPointer(value)), true);
  }
}

export type BOOL = number;

/**
 * Windows.Win32.Media.Audio.XAudio2.XAUDIO2_EFFECT_DESCRIPTOR (size: 16)
 */
export interface XAUDIO2_EFFECT_DESCRIPTOR {
  /** Windows.Win32.System.Com.IUnknown */
  pEffect: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Foundation.BOOL */
  InitialState: boolean;
  /** u32 */
  OutputChannels: number;
}

export const sizeofXAUDIO2_EFFECT_DESCRIPTOR = 16;

export function allocXAUDIO2_EFFECT_DESCRIPTOR(data?: Partial<XAUDIO2_EFFECT_DESCRIPTOR>): Uint8Array {
  const buf = new Uint8Array(sizeofXAUDIO2_EFFECT_DESCRIPTOR);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.pEffect !== undefined) view.setBigUint64(0, data.pEffect === null ? 0n : util.toBigInt(util.toPointer(data.pEffect)), true);
  // 0x08: i32
  if (data?.InitialState !== undefined) view.setInt32(8, Number(data.InitialState), true);
  // 0x0c: u32
  if (data?.OutputChannels !== undefined) view.setUint32(12, Number(data.OutputChannels), true);
  return buf;
}

export class XAUDIO2_EFFECT_DESCRIPTORView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get pEffect(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(0, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x08: i32
  get InitialState(): number {
    return this.view.getInt32(8, true);
  }

  // 0x0c: u32
  get OutputChannels(): number {
    return this.view.getUint32(12, true);
  }

  // 0x00: pointer
  set pEffect(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(0, util.toBigInt(util.toPointer(value)), true);
  }

  // 0x08: i32
  set InitialState(value: number) {
    this.view.setInt32(8, value, true);
  }

  // 0x0c: u32
  set OutputChannels(value: number) {
    this.view.setUint32(12, value, true);
  }
}

/**
 * Windows.Win32.Media.Audio.XAudio2.XAUDIO2_EFFECT_CHAIN (size: 16)
 */
export interface XAUDIO2_EFFECT_CHAIN {
  /** u32 */
  EffectCount: number;
  /** ptr */
  pEffectDescriptors: Deno.PointerValue | Uint8Array | null;
}

export const sizeofXAUDIO2_EFFECT_CHAIN = 16;

export function allocXAUDIO2_EFFECT_CHAIN(data?: Partial<XAUDIO2_EFFECT_CHAIN>): Uint8Array {
  const buf = new Uint8Array(sizeofXAUDIO2_EFFECT_CHAIN);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.EffectCount !== undefined) view.setUint32(0, Number(data.EffectCount), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.pEffectDescriptors !== undefined) view.setBigUint64(8, data.pEffectDescriptors === null ? 0n : util.toBigInt(util.toPointer(data.pEffectDescriptors)), true);
  return buf;
}

export class XAUDIO2_EFFECT_CHAINView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get EffectCount(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  get pEffectDescriptors(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(8, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: u32
  set EffectCount(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  set pEffectDescriptors(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(8, util.toBigInt(util.toPointer(value)), true);
  }
}

/**
 * Windows.Win32.Media.Audio.XAudio2.XAUDIO2_FILTER_PARAMETERS (size: 16)
 */
export interface XAUDIO2_FILTER_PARAMETERS {
  /** Windows.Win32.Media.Audio.XAudio2.XAUDIO2_FILTER_TYPE */
  Type: XAUDIO2_FILTER_TYPE;
  /** f32 */
  Frequency: number;
  /** f32 */
  OneOverQ: number;
}

export const sizeofXAUDIO2_FILTER_PARAMETERS = 16;

export function allocXAUDIO2_FILTER_PARAMETERS(data?: Partial<XAUDIO2_FILTER_PARAMETERS>): Uint8Array {
  const buf = new Uint8Array(sizeofXAUDIO2_FILTER_PARAMETERS);
  const view = new DataView(buf.buffer);
  // 0x00: i32
  if (data?.Type !== undefined) view.setInt32(0, Number(data.Type), true);
  // 0x04: f32
  if (data?.Frequency !== undefined) view.setFloat32(4, Number(data.Frequency), true);
  // 0x08: f32
  if (data?.OneOverQ !== undefined) view.setFloat32(8, Number(data.OneOverQ), true);
  // 0x0c: pad4
  return buf;
}

export class XAUDIO2_FILTER_PARAMETERSView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: i32
  get Type(): number {
    return this.view.getInt32(0, true);
  }

  // 0x04: f32
  get Frequency(): number {
    return this.view.getFloat32(4, true);
  }

  // 0x08: f32
  get OneOverQ(): number {
    return this.view.getFloat32(8, true);
  }

  // 0x0c: pad4

  // 0x00: i32
  set Type(value: number) {
    this.view.setInt32(0, value, true);
  }

  // 0x04: f32
  set Frequency(value: number) {
    this.view.setFloat32(4, value, true);
  }

  // 0x08: f32
  set OneOverQ(value: number) {
    this.view.setFloat32(8, value, true);
  }

  // 0x0c: pad4
}

/**
 * Windows.Win32.Media.Audio.XAudio2.XAUDIO2_BUFFER (size: 48)
 */
export interface XAUDIO2_BUFFER {
  /** u32 */
  Flags: number;
  /** u32 */
  AudioBytes: number;
  /** ptr */
  pAudioData: Deno.PointerValue | Uint8Array | null;
  /** u32 */
  PlayBegin: number;
  /** u32 */
  PlayLength: number;
  /** u32 */
  LoopBegin: number;
  /** u32 */
  LoopLength: number;
  /** u32 */
  LoopCount: number;
  /** ptr */
  pContext: Deno.PointerValue | Uint8Array | null;
}

export const sizeofXAUDIO2_BUFFER = 48;

export function allocXAUDIO2_BUFFER(data?: Partial<XAUDIO2_BUFFER>): Uint8Array {
  const buf = new Uint8Array(sizeofXAUDIO2_BUFFER);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.Flags !== undefined) view.setUint32(0, Number(data.Flags), true);
  // 0x04: u32
  if (data?.AudioBytes !== undefined) view.setUint32(4, Number(data.AudioBytes), true);
  // 0x08: pointer
  if (data?.pAudioData !== undefined) view.setBigUint64(8, data.pAudioData === null ? 0n : util.toBigInt(util.toPointer(data.pAudioData)), true);
  // 0x10: u32
  if (data?.PlayBegin !== undefined) view.setUint32(16, Number(data.PlayBegin), true);
  // 0x14: u32
  if (data?.PlayLength !== undefined) view.setUint32(20, Number(data.PlayLength), true);
  // 0x18: u32
  if (data?.LoopBegin !== undefined) view.setUint32(24, Number(data.LoopBegin), true);
  // 0x1c: u32
  if (data?.LoopLength !== undefined) view.setUint32(28, Number(data.LoopLength), true);
  // 0x20: u32
  if (data?.LoopCount !== undefined) view.setUint32(32, Number(data.LoopCount), true);
  // 0x24: pad4
  // 0x28: pointer
  if (data?.pContext !== undefined) view.setBigUint64(40, data.pContext === null ? 0n : util.toBigInt(util.toPointer(data.pContext)), true);
  return buf;
}

export class XAUDIO2_BUFFERView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get Flags(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: u32
  get AudioBytes(): number {
    return this.view.getUint32(4, true);
  }

  // 0x08: pointer
  get pAudioData(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(8, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x10: u32
  get PlayBegin(): number {
    return this.view.getUint32(16, true);
  }

  // 0x14: u32
  get PlayLength(): number {
    return this.view.getUint32(20, true);
  }

  // 0x18: u32
  get LoopBegin(): number {
    return this.view.getUint32(24, true);
  }

  // 0x1c: u32
  get LoopLength(): number {
    return this.view.getUint32(28, true);
  }

  // 0x20: u32
  get LoopCount(): number {
    return this.view.getUint32(32, true);
  }

  // 0x24: pad4

  // 0x28: pointer
  get pContext(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(40, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: u32
  set Flags(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: u32
  set AudioBytes(value: number) {
    this.view.setUint32(4, value, true);
  }

  // 0x08: pointer
  set pAudioData(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(8, util.toBigInt(util.toPointer(value)), true);
  }

  // 0x10: u32
  set PlayBegin(value: number) {
    this.view.setUint32(16, value, true);
  }

  // 0x14: u32
  set PlayLength(value: number) {
    this.view.setUint32(20, value, true);
  }

  // 0x18: u32
  set LoopBegin(value: number) {
    this.view.setUint32(24, value, true);
  }

  // 0x1c: u32
  set LoopLength(value: number) {
    this.view.setUint32(28, value, true);
  }

  // 0x20: u32
  set LoopCount(value: number) {
    this.view.setUint32(32, value, true);
  }

  // 0x24: pad4

  // 0x28: pointer
  set pContext(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(40, util.toBigInt(util.toPointer(value)), true);
  }
}

/**
 * Windows.Win32.Media.Audio.XAudio2.XAUDIO2_BUFFER_WMA (size: 16)
 */
export interface XAUDIO2_BUFFER_WMA {
  /** ptr */
  pDecodedPacketCumulativeBytes: Deno.PointerValue | Uint8Array | null;
  /** u32 */
  PacketCount: number;
}

export const sizeofXAUDIO2_BUFFER_WMA = 16;

export function allocXAUDIO2_BUFFER_WMA(data?: Partial<XAUDIO2_BUFFER_WMA>): Uint8Array {
  const buf = new Uint8Array(sizeofXAUDIO2_BUFFER_WMA);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.pDecodedPacketCumulativeBytes !== undefined) view.setBigUint64(0, data.pDecodedPacketCumulativeBytes === null ? 0n : util.toBigInt(util.toPointer(data.pDecodedPacketCumulativeBytes)), true);
  // 0x08: u32
  if (data?.PacketCount !== undefined) view.setUint32(8, Number(data.PacketCount), true);
  // 0x0c: pad4
  return buf;
}

export class XAUDIO2_BUFFER_WMAView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get pDecodedPacketCumulativeBytes(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(0, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x08: u32
  get PacketCount(): number {
    return this.view.getUint32(8, true);
  }

  // 0x0c: pad4

  // 0x00: pointer
  set pDecodedPacketCumulativeBytes(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(0, util.toBigInt(util.toPointer(value)), true);
  }

  // 0x08: u32
  set PacketCount(value: number) {
    this.view.setUint32(8, value, true);
  }

  // 0x0c: pad4
}

/**
 * Windows.Win32.Media.Audio.XAudio2.XAUDIO2_VOICE_STATE (size: 24)
 */
export interface XAUDIO2_VOICE_STATE {
  /** ptr */
  pCurrentBufferContext: Deno.PointerValue | Uint8Array | null;
  /** u32 */
  BuffersQueued: number;
  /** u64 */
  SamplesPlayed: number | bigint;
}

export const sizeofXAUDIO2_VOICE_STATE = 24;

export function allocXAUDIO2_VOICE_STATE(data?: Partial<XAUDIO2_VOICE_STATE>): Uint8Array {
  const buf = new Uint8Array(sizeofXAUDIO2_VOICE_STATE);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.pCurrentBufferContext !== undefined) view.setBigUint64(0, data.pCurrentBufferContext === null ? 0n : util.toBigInt(util.toPointer(data.pCurrentBufferContext)), true);
  // 0x08: u32
  if (data?.BuffersQueued !== undefined) view.setUint32(8, Number(data.BuffersQueued), true);
  // 0x0c: pad4
  // 0x10: u64
  if (data?.SamplesPlayed !== undefined) view.setBigUint64(16, util.toBigInt(data.SamplesPlayed), true);
  return buf;
}

export class XAUDIO2_VOICE_STATEView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get pCurrentBufferContext(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(0, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x08: u32
  get BuffersQueued(): number {
    return this.view.getUint32(8, true);
  }

  // 0x0c: pad4

  // 0x10: u64
  get SamplesPlayed(): number | bigint {
    return this.view.getBigUint64(16, true);
  }

  // 0x00: pointer
  set pCurrentBufferContext(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(0, util.toBigInt(util.toPointer(value)), true);
  }

  // 0x08: u32
  set BuffersQueued(value: number) {
    this.view.setUint32(8, value, true);
  }

  // 0x0c: pad4

  // 0x10: u64
  set SamplesPlayed(value: number | bigint) {
    this.view.setBigUint64(16, util.toBigInt(value), true);
  }
}

/**
 * Windows.Win32.Media.Audio.XAudio2.XAUDIO2_PERFORMANCE_DATA (size: 64)
 */
export interface XAUDIO2_PERFORMANCE_DATA {
  /** u64 */
  AudioCyclesSinceLastQuery: number | bigint;
  /** u64 */
  TotalCyclesSinceLastQuery: number | bigint;
  /** u32 */
  MinimumCyclesPerQuantum: number;
  /** u32 */
  MaximumCyclesPerQuantum: number;
  /** u32 */
  MemoryUsageInBytes: number;
  /** u32 */
  CurrentLatencyInSamples: number;
  /** u32 */
  GlitchesSinceEngineStarted: number;
  /** u32 */
  ActiveSourceVoiceCount: number;
  /** u32 */
  TotalSourceVoiceCount: number;
  /** u32 */
  ActiveSubmixVoiceCount: number;
  /** u32 */
  ActiveResamplerCount: number;
  /** u32 */
  ActiveMatrixMixCount: number;
  /** u32 */
  ActiveXmaSourceVoices: number;
  /** u32 */
  ActiveXmaStreams: number;
}

export const sizeofXAUDIO2_PERFORMANCE_DATA = 64;

export function allocXAUDIO2_PERFORMANCE_DATA(data?: Partial<XAUDIO2_PERFORMANCE_DATA>): Uint8Array {
  const buf = new Uint8Array(sizeofXAUDIO2_PERFORMANCE_DATA);
  const view = new DataView(buf.buffer);
  // 0x00: u64
  if (data?.AudioCyclesSinceLastQuery !== undefined) view.setBigUint64(0, util.toBigInt(data.AudioCyclesSinceLastQuery), true);
  // 0x08: u64
  if (data?.TotalCyclesSinceLastQuery !== undefined) view.setBigUint64(8, util.toBigInt(data.TotalCyclesSinceLastQuery), true);
  // 0x10: u32
  if (data?.MinimumCyclesPerQuantum !== undefined) view.setUint32(16, Number(data.MinimumCyclesPerQuantum), true);
  // 0x14: u32
  if (data?.MaximumCyclesPerQuantum !== undefined) view.setUint32(20, Number(data.MaximumCyclesPerQuantum), true);
  // 0x18: u32
  if (data?.MemoryUsageInBytes !== undefined) view.setUint32(24, Number(data.MemoryUsageInBytes), true);
  // 0x1c: u32
  if (data?.CurrentLatencyInSamples !== undefined) view.setUint32(28, Number(data.CurrentLatencyInSamples), true);
  // 0x20: u32
  if (data?.GlitchesSinceEngineStarted !== undefined) view.setUint32(32, Number(data.GlitchesSinceEngineStarted), true);
  // 0x24: u32
  if (data?.ActiveSourceVoiceCount !== undefined) view.setUint32(36, Number(data.ActiveSourceVoiceCount), true);
  // 0x28: u32
  if (data?.TotalSourceVoiceCount !== undefined) view.setUint32(40, Number(data.TotalSourceVoiceCount), true);
  // 0x2c: u32
  if (data?.ActiveSubmixVoiceCount !== undefined) view.setUint32(44, Number(data.ActiveSubmixVoiceCount), true);
  // 0x30: u32
  if (data?.ActiveResamplerCount !== undefined) view.setUint32(48, Number(data.ActiveResamplerCount), true);
  // 0x34: u32
  if (data?.ActiveMatrixMixCount !== undefined) view.setUint32(52, Number(data.ActiveMatrixMixCount), true);
  // 0x38: u32
  if (data?.ActiveXmaSourceVoices !== undefined) view.setUint32(56, Number(data.ActiveXmaSourceVoices), true);
  // 0x3c: u32
  if (data?.ActiveXmaStreams !== undefined) view.setUint32(60, Number(data.ActiveXmaStreams), true);
  return buf;
}

export class XAUDIO2_PERFORMANCE_DATAView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u64
  get AudioCyclesSinceLastQuery(): number | bigint {
    return this.view.getBigUint64(0, true);
  }

  // 0x08: u64
  get TotalCyclesSinceLastQuery(): number | bigint {
    return this.view.getBigUint64(8, true);
  }

  // 0x10: u32
  get MinimumCyclesPerQuantum(): number {
    return this.view.getUint32(16, true);
  }

  // 0x14: u32
  get MaximumCyclesPerQuantum(): number {
    return this.view.getUint32(20, true);
  }

  // 0x18: u32
  get MemoryUsageInBytes(): number {
    return this.view.getUint32(24, true);
  }

  // 0x1c: u32
  get CurrentLatencyInSamples(): number {
    return this.view.getUint32(28, true);
  }

  // 0x20: u32
  get GlitchesSinceEngineStarted(): number {
    return this.view.getUint32(32, true);
  }

  // 0x24: u32
  get ActiveSourceVoiceCount(): number {
    return this.view.getUint32(36, true);
  }

  // 0x28: u32
  get TotalSourceVoiceCount(): number {
    return this.view.getUint32(40, true);
  }

  // 0x2c: u32
  get ActiveSubmixVoiceCount(): number {
    return this.view.getUint32(44, true);
  }

  // 0x30: u32
  get ActiveResamplerCount(): number {
    return this.view.getUint32(48, true);
  }

  // 0x34: u32
  get ActiveMatrixMixCount(): number {
    return this.view.getUint32(52, true);
  }

  // 0x38: u32
  get ActiveXmaSourceVoices(): number {
    return this.view.getUint32(56, true);
  }

  // 0x3c: u32
  get ActiveXmaStreams(): number {
    return this.view.getUint32(60, true);
  }

  // 0x00: u64
  set AudioCyclesSinceLastQuery(value: number | bigint) {
    this.view.setBigUint64(0, util.toBigInt(value), true);
  }

  // 0x08: u64
  set TotalCyclesSinceLastQuery(value: number | bigint) {
    this.view.setBigUint64(8, util.toBigInt(value), true);
  }

  // 0x10: u32
  set MinimumCyclesPerQuantum(value: number) {
    this.view.setUint32(16, value, true);
  }

  // 0x14: u32
  set MaximumCyclesPerQuantum(value: number) {
    this.view.setUint32(20, value, true);
  }

  // 0x18: u32
  set MemoryUsageInBytes(value: number) {
    this.view.setUint32(24, value, true);
  }

  // 0x1c: u32
  set CurrentLatencyInSamples(value: number) {
    this.view.setUint32(28, value, true);
  }

  // 0x20: u32
  set GlitchesSinceEngineStarted(value: number) {
    this.view.setUint32(32, value, true);
  }

  // 0x24: u32
  set ActiveSourceVoiceCount(value: number) {
    this.view.setUint32(36, value, true);
  }

  // 0x28: u32
  set TotalSourceVoiceCount(value: number) {
    this.view.setUint32(40, value, true);
  }

  // 0x2c: u32
  set ActiveSubmixVoiceCount(value: number) {
    this.view.setUint32(44, value, true);
  }

  // 0x30: u32
  set ActiveResamplerCount(value: number) {
    this.view.setUint32(48, value, true);
  }

  // 0x34: u32
  set ActiveMatrixMixCount(value: number) {
    this.view.setUint32(52, value, true);
  }

  // 0x38: u32
  set ActiveXmaSourceVoices(value: number) {
    this.view.setUint32(56, value, true);
  }

  // 0x3c: u32
  set ActiveXmaStreams(value: number) {
    this.view.setUint32(60, value, true);
  }
}

/**
 * Windows.Win32.Media.Audio.XAudio2.XAUDIO2_DEBUG_CONFIGURATION (size: 24)
 */
export interface XAUDIO2_DEBUG_CONFIGURATION {
  /** u32 */
  TraceMask: number;
  /** u32 */
  BreakMask: number;
  /** Windows.Win32.Foundation.BOOL */
  LogThreadID: boolean;
  /** Windows.Win32.Foundation.BOOL */
  LogFileline: boolean;
  /** Windows.Win32.Foundation.BOOL */
  LogFunctionName: boolean;
  /** Windows.Win32.Foundation.BOOL */
  LogTiming: boolean;
}

export const sizeofXAUDIO2_DEBUG_CONFIGURATION = 24;

export function allocXAUDIO2_DEBUG_CONFIGURATION(data?: Partial<XAUDIO2_DEBUG_CONFIGURATION>): Uint8Array {
  const buf = new Uint8Array(sizeofXAUDIO2_DEBUG_CONFIGURATION);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.TraceMask !== undefined) view.setUint32(0, Number(data.TraceMask), true);
  // 0x04: u32
  if (data?.BreakMask !== undefined) view.setUint32(4, Number(data.BreakMask), true);
  // 0x08: i32
  if (data?.LogThreadID !== undefined) view.setInt32(8, Number(data.LogThreadID), true);
  // 0x0c: i32
  if (data?.LogFileline !== undefined) view.setInt32(12, Number(data.LogFileline), true);
  // 0x10: i32
  if (data?.LogFunctionName !== undefined) view.setInt32(16, Number(data.LogFunctionName), true);
  // 0x14: i32
  if (data?.LogTiming !== undefined) view.setInt32(20, Number(data.LogTiming), true);
  return buf;
}

export class XAUDIO2_DEBUG_CONFIGURATIONView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get TraceMask(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: u32
  get BreakMask(): number {
    return this.view.getUint32(4, true);
  }

  // 0x08: i32
  get LogThreadID(): number {
    return this.view.getInt32(8, true);
  }

  // 0x0c: i32
  get LogFileline(): number {
    return this.view.getInt32(12, true);
  }

  // 0x10: i32
  get LogFunctionName(): number {
    return this.view.getInt32(16, true);
  }

  // 0x14: i32
  get LogTiming(): number {
    return this.view.getInt32(20, true);
  }

  // 0x00: u32
  set TraceMask(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: u32
  set BreakMask(value: number) {
    this.view.setUint32(4, value, true);
  }

  // 0x08: i32
  set LogThreadID(value: number) {
    this.view.setInt32(8, value, true);
  }

  // 0x0c: i32
  set LogFileline(value: number) {
    this.view.setInt32(12, value, true);
  }

  // 0x10: i32
  set LogFunctionName(value: number) {
    this.view.setInt32(16, value, true);
  }

  // 0x14: i32
  set LogTiming(value: number) {
    this.view.setInt32(20, value, true);
  }
}

/**
 * Windows.Win32.Media.Audio.XAudio2.XAUDIO2FX_VOLUMEMETER_LEVELS (size: 24)
 */
export interface XAUDIO2FX_VOLUMEMETER_LEVELS {
  /** ptr */
  pPeakLevels: Deno.PointerValue | Uint8Array | null;
  /** ptr */
  pRMSLevels: Deno.PointerValue | Uint8Array | null;
  /** u32 */
  ChannelCount: number;
}

export const sizeofXAUDIO2FX_VOLUMEMETER_LEVELS = 24;

export function allocXAUDIO2FX_VOLUMEMETER_LEVELS(data?: Partial<XAUDIO2FX_VOLUMEMETER_LEVELS>): Uint8Array {
  const buf = new Uint8Array(sizeofXAUDIO2FX_VOLUMEMETER_LEVELS);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.pPeakLevels !== undefined) view.setBigUint64(0, data.pPeakLevels === null ? 0n : util.toBigInt(util.toPointer(data.pPeakLevels)), true);
  // 0x08: pointer
  if (data?.pRMSLevels !== undefined) view.setBigUint64(8, data.pRMSLevels === null ? 0n : util.toBigInt(util.toPointer(data.pRMSLevels)), true);
  // 0x10: u32
  if (data?.ChannelCount !== undefined) view.setUint32(16, Number(data.ChannelCount), true);
  // 0x14: pad4
  return buf;
}

export class XAUDIO2FX_VOLUMEMETER_LEVELSView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get pPeakLevels(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(0, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x08: pointer
  get pRMSLevels(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(8, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x10: u32
  get ChannelCount(): number {
    return this.view.getUint32(16, true);
  }

  // 0x14: pad4

  // 0x00: pointer
  set pPeakLevels(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(0, util.toBigInt(util.toPointer(value)), true);
  }

  // 0x08: pointer
  set pRMSLevels(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(8, util.toBigInt(util.toPointer(value)), true);
  }

  // 0x10: u32
  set ChannelCount(value: number) {
    this.view.setUint32(16, value, true);
  }

  // 0x14: pad4
}

/**
 * Windows.Win32.Media.Audio.XAudio2.XAUDIO2FX_REVERB_PARAMETERS (size: 64)
 */
export interface XAUDIO2FX_REVERB_PARAMETERS {
  /** f32 */
  WetDryMix: number;
  /** u32 */
  ReflectionsDelay: number;
  /** u8 */
  ReverbDelay: number;
  /** u8 */
  RearDelay: number;
  /** u8 */
  SideDelay: number;
  /** u8 */
  PositionLeft: number;
  /** u8 */
  PositionRight: number;
  /** u8 */
  PositionMatrixLeft: number;
  /** u8 */
  PositionMatrixRight: number;
  /** u8 */
  EarlyDiffusion: number;
  /** u8 */
  LateDiffusion: number;
  /** u8 */
  LowEQGain: number;
  /** u8 */
  LowEQCutoff: number;
  /** u8 */
  HighEQGain: number;
  /** u8 */
  HighEQCutoff: number;
  /** f32 */
  RoomFilterFreq: number;
  /** f32 */
  RoomFilterMain: number;
  /** f32 */
  RoomFilterHF: number;
  /** f32 */
  ReflectionsGain: number;
  /** f32 */
  ReverbGain: number;
  /** f32 */
  DecayTime: number;
  /** f32 */
  Density: number;
  /** f32 */
  RoomSize: number;
  /** Windows.Win32.Foundation.BOOL */
  DisableLateField: boolean;
}

export const sizeofXAUDIO2FX_REVERB_PARAMETERS = 64;

export function allocXAUDIO2FX_REVERB_PARAMETERS(data?: Partial<XAUDIO2FX_REVERB_PARAMETERS>): Uint8Array {
  const buf = new Uint8Array(sizeofXAUDIO2FX_REVERB_PARAMETERS);
  const view = new DataView(buf.buffer);
  // 0x00: f32
  if (data?.WetDryMix !== undefined) view.setFloat32(0, Number(data.WetDryMix), true);
  // 0x04: u32
  if (data?.ReflectionsDelay !== undefined) view.setUint32(4, Number(data.ReflectionsDelay), true);
  // 0x08: u8
  if (data?.ReverbDelay !== undefined) view.setUint8(8, Number(data.ReverbDelay));
  // 0x09: u8
  if (data?.RearDelay !== undefined) view.setUint8(9, Number(data.RearDelay));
  // 0x0a: u8
  if (data?.SideDelay !== undefined) view.setUint8(10, Number(data.SideDelay));
  // 0x0b: u8
  if (data?.PositionLeft !== undefined) view.setUint8(11, Number(data.PositionLeft));
  // 0x0c: u8
  if (data?.PositionRight !== undefined) view.setUint8(12, Number(data.PositionRight));
  // 0x0d: u8
  if (data?.PositionMatrixLeft !== undefined) view.setUint8(13, Number(data.PositionMatrixLeft));
  // 0x0e: u8
  if (data?.PositionMatrixRight !== undefined) view.setUint8(14, Number(data.PositionMatrixRight));
  // 0x0f: u8
  if (data?.EarlyDiffusion !== undefined) view.setUint8(15, Number(data.EarlyDiffusion));
  // 0x10: u8
  if (data?.LateDiffusion !== undefined) view.setUint8(16, Number(data.LateDiffusion));
  // 0x11: u8
  if (data?.LowEQGain !== undefined) view.setUint8(17, Number(data.LowEQGain));
  // 0x12: u8
  if (data?.LowEQCutoff !== undefined) view.setUint8(18, Number(data.LowEQCutoff));
  // 0x13: u8
  if (data?.HighEQGain !== undefined) view.setUint8(19, Number(data.HighEQGain));
  // 0x14: u8
  if (data?.HighEQCutoff !== undefined) view.setUint8(20, Number(data.HighEQCutoff));
  // 0x15: f32
  if (data?.RoomFilterFreq !== undefined) view.setFloat32(21, Number(data.RoomFilterFreq), true);
  // 0x19: f32
  if (data?.RoomFilterMain !== undefined) view.setFloat32(25, Number(data.RoomFilterMain), true);
  // 0x1d: f32
  if (data?.RoomFilterHF !== undefined) view.setFloat32(29, Number(data.RoomFilterHF), true);
  // 0x21: f32
  if (data?.ReflectionsGain !== undefined) view.setFloat32(33, Number(data.ReflectionsGain), true);
  // 0x25: f32
  if (data?.ReverbGain !== undefined) view.setFloat32(37, Number(data.ReverbGain), true);
  // 0x29: f32
  if (data?.DecayTime !== undefined) view.setFloat32(41, Number(data.DecayTime), true);
  // 0x2d: f32
  if (data?.Density !== undefined) view.setFloat32(45, Number(data.Density), true);
  // 0x31: f32
  if (data?.RoomSize !== undefined) view.setFloat32(49, Number(data.RoomSize), true);
  // 0x35: i32
  if (data?.DisableLateField !== undefined) view.setInt32(53, Number(data.DisableLateField), true);
  // 0x39: pad7
  return buf;
}

export class XAUDIO2FX_REVERB_PARAMETERSView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: f32
  get WetDryMix(): number {
    return this.view.getFloat32(0, true);
  }

  // 0x04: u32
  get ReflectionsDelay(): number {
    return this.view.getUint32(4, true);
  }

  // 0x08: u8
  get ReverbDelay(): number {
    return this.view.getUint8(8);
  }

  // 0x09: u8
  get RearDelay(): number {
    return this.view.getUint8(9);
  }

  // 0x0a: u8
  get SideDelay(): number {
    return this.view.getUint8(10);
  }

  // 0x0b: u8
  get PositionLeft(): number {
    return this.view.getUint8(11);
  }

  // 0x0c: u8
  get PositionRight(): number {
    return this.view.getUint8(12);
  }

  // 0x0d: u8
  get PositionMatrixLeft(): number {
    return this.view.getUint8(13);
  }

  // 0x0e: u8
  get PositionMatrixRight(): number {
    return this.view.getUint8(14);
  }

  // 0x0f: u8
  get EarlyDiffusion(): number {
    return this.view.getUint8(15);
  }

  // 0x10: u8
  get LateDiffusion(): number {
    return this.view.getUint8(16);
  }

  // 0x11: u8
  get LowEQGain(): number {
    return this.view.getUint8(17);
  }

  // 0x12: u8
  get LowEQCutoff(): number {
    return this.view.getUint8(18);
  }

  // 0x13: u8
  get HighEQGain(): number {
    return this.view.getUint8(19);
  }

  // 0x14: u8
  get HighEQCutoff(): number {
    return this.view.getUint8(20);
  }

  // 0x15: f32
  get RoomFilterFreq(): number {
    return this.view.getFloat32(21, true);
  }

  // 0x19: f32
  get RoomFilterMain(): number {
    return this.view.getFloat32(25, true);
  }

  // 0x1d: f32
  get RoomFilterHF(): number {
    return this.view.getFloat32(29, true);
  }

  // 0x21: f32
  get ReflectionsGain(): number {
    return this.view.getFloat32(33, true);
  }

  // 0x25: f32
  get ReverbGain(): number {
    return this.view.getFloat32(37, true);
  }

  // 0x29: f32
  get DecayTime(): number {
    return this.view.getFloat32(41, true);
  }

  // 0x2d: f32
  get Density(): number {
    return this.view.getFloat32(45, true);
  }

  // 0x31: f32
  get RoomSize(): number {
    return this.view.getFloat32(49, true);
  }

  // 0x35: i32
  get DisableLateField(): number {
    return this.view.getInt32(53, true);
  }

  // 0x39: pad7

  // 0x00: f32
  set WetDryMix(value: number) {
    this.view.setFloat32(0, value, true);
  }

  // 0x04: u32
  set ReflectionsDelay(value: number) {
    this.view.setUint32(4, value, true);
  }

  // 0x08: u8
  set ReverbDelay(value: number) {
    this.view.setUint8(8, value);
  }

  // 0x09: u8
  set RearDelay(value: number) {
    this.view.setUint8(9, value);
  }

  // 0x0a: u8
  set SideDelay(value: number) {
    this.view.setUint8(10, value);
  }

  // 0x0b: u8
  set PositionLeft(value: number) {
    this.view.setUint8(11, value);
  }

  // 0x0c: u8
  set PositionRight(value: number) {
    this.view.setUint8(12, value);
  }

  // 0x0d: u8
  set PositionMatrixLeft(value: number) {
    this.view.setUint8(13, value);
  }

  // 0x0e: u8
  set PositionMatrixRight(value: number) {
    this.view.setUint8(14, value);
  }

  // 0x0f: u8
  set EarlyDiffusion(value: number) {
    this.view.setUint8(15, value);
  }

  // 0x10: u8
  set LateDiffusion(value: number) {
    this.view.setUint8(16, value);
  }

  // 0x11: u8
  set LowEQGain(value: number) {
    this.view.setUint8(17, value);
  }

  // 0x12: u8
  set LowEQCutoff(value: number) {
    this.view.setUint8(18, value);
  }

  // 0x13: u8
  set HighEQGain(value: number) {
    this.view.setUint8(19, value);
  }

  // 0x14: u8
  set HighEQCutoff(value: number) {
    this.view.setUint8(20, value);
  }

  // 0x15: f32
  set RoomFilterFreq(value: number) {
    this.view.setFloat32(21, value, true);
  }

  // 0x19: f32
  set RoomFilterMain(value: number) {
    this.view.setFloat32(25, value, true);
  }

  // 0x1d: f32
  set RoomFilterHF(value: number) {
    this.view.setFloat32(29, value, true);
  }

  // 0x21: f32
  set ReflectionsGain(value: number) {
    this.view.setFloat32(33, value, true);
  }

  // 0x25: f32
  set ReverbGain(value: number) {
    this.view.setFloat32(37, value, true);
  }

  // 0x29: f32
  set DecayTime(value: number) {
    this.view.setFloat32(41, value, true);
  }

  // 0x2d: f32
  set Density(value: number) {
    this.view.setFloat32(45, value, true);
  }

  // 0x31: f32
  set RoomSize(value: number) {
    this.view.setFloat32(49, value, true);
  }

  // 0x35: i32
  set DisableLateField(value: number) {
    this.view.setInt32(53, value, true);
  }

  // 0x39: pad7
}

/**
 * Windows.Win32.Media.Audio.XAudio2.XAUDIO2FX_REVERB_I3DL2_PARAMETERS (size: 56)
 */
export interface XAUDIO2FX_REVERB_I3DL2_PARAMETERS {
  /** f32 */
  WetDryMix: number;
  /** i32 */
  Room: number;
  /** i32 */
  RoomHF: number;
  /** f32 */
  RoomRolloffFactor: number;
  /** f32 */
  DecayTime: number;
  /** f32 */
  DecayHFRatio: number;
  /** i32 */
  Reflections: number;
  /** f32 */
  ReflectionsDelay: number;
  /** i32 */
  Reverb: number;
  /** f32 */
  ReverbDelay: number;
  /** f32 */
  Diffusion: number;
  /** f32 */
  Density: number;
  /** f32 */
  HFReference: number;
}

export const sizeofXAUDIO2FX_REVERB_I3DL2_PARAMETERS = 56;

export function allocXAUDIO2FX_REVERB_I3DL2_PARAMETERS(data?: Partial<XAUDIO2FX_REVERB_I3DL2_PARAMETERS>): Uint8Array {
  const buf = new Uint8Array(sizeofXAUDIO2FX_REVERB_I3DL2_PARAMETERS);
  const view = new DataView(buf.buffer);
  // 0x00: f32
  if (data?.WetDryMix !== undefined) view.setFloat32(0, Number(data.WetDryMix), true);
  // 0x04: i32
  if (data?.Room !== undefined) view.setInt32(4, Number(data.Room), true);
  // 0x08: i32
  if (data?.RoomHF !== undefined) view.setInt32(8, Number(data.RoomHF), true);
  // 0x0c: f32
  if (data?.RoomRolloffFactor !== undefined) view.setFloat32(12, Number(data.RoomRolloffFactor), true);
  // 0x10: f32
  if (data?.DecayTime !== undefined) view.setFloat32(16, Number(data.DecayTime), true);
  // 0x14: f32
  if (data?.DecayHFRatio !== undefined) view.setFloat32(20, Number(data.DecayHFRatio), true);
  // 0x18: i32
  if (data?.Reflections !== undefined) view.setInt32(24, Number(data.Reflections), true);
  // 0x1c: f32
  if (data?.ReflectionsDelay !== undefined) view.setFloat32(28, Number(data.ReflectionsDelay), true);
  // 0x20: i32
  if (data?.Reverb !== undefined) view.setInt32(32, Number(data.Reverb), true);
  // 0x24: f32
  if (data?.ReverbDelay !== undefined) view.setFloat32(36, Number(data.ReverbDelay), true);
  // 0x28: f32
  if (data?.Diffusion !== undefined) view.setFloat32(40, Number(data.Diffusion), true);
  // 0x2c: f32
  if (data?.Density !== undefined) view.setFloat32(44, Number(data.Density), true);
  // 0x30: f32
  if (data?.HFReference !== undefined) view.setFloat32(48, Number(data.HFReference), true);
  // 0x34: pad4
  return buf;
}

export class XAUDIO2FX_REVERB_I3DL2_PARAMETERSView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: f32
  get WetDryMix(): number {
    return this.view.getFloat32(0, true);
  }

  // 0x04: i32
  get Room(): number {
    return this.view.getInt32(4, true);
  }

  // 0x08: i32
  get RoomHF(): number {
    return this.view.getInt32(8, true);
  }

  // 0x0c: f32
  get RoomRolloffFactor(): number {
    return this.view.getFloat32(12, true);
  }

  // 0x10: f32
  get DecayTime(): number {
    return this.view.getFloat32(16, true);
  }

  // 0x14: f32
  get DecayHFRatio(): number {
    return this.view.getFloat32(20, true);
  }

  // 0x18: i32
  get Reflections(): number {
    return this.view.getInt32(24, true);
  }

  // 0x1c: f32
  get ReflectionsDelay(): number {
    return this.view.getFloat32(28, true);
  }

  // 0x20: i32
  get Reverb(): number {
    return this.view.getInt32(32, true);
  }

  // 0x24: f32
  get ReverbDelay(): number {
    return this.view.getFloat32(36, true);
  }

  // 0x28: f32
  get Diffusion(): number {
    return this.view.getFloat32(40, true);
  }

  // 0x2c: f32
  get Density(): number {
    return this.view.getFloat32(44, true);
  }

  // 0x30: f32
  get HFReference(): number {
    return this.view.getFloat32(48, true);
  }

  // 0x34: pad4

  // 0x00: f32
  set WetDryMix(value: number) {
    this.view.setFloat32(0, value, true);
  }

  // 0x04: i32
  set Room(value: number) {
    this.view.setInt32(4, value, true);
  }

  // 0x08: i32
  set RoomHF(value: number) {
    this.view.setInt32(8, value, true);
  }

  // 0x0c: f32
  set RoomRolloffFactor(value: number) {
    this.view.setFloat32(12, value, true);
  }

  // 0x10: f32
  set DecayTime(value: number) {
    this.view.setFloat32(16, value, true);
  }

  // 0x14: f32
  set DecayHFRatio(value: number) {
    this.view.setFloat32(20, value, true);
  }

  // 0x18: i32
  set Reflections(value: number) {
    this.view.setInt32(24, value, true);
  }

  // 0x1c: f32
  set ReflectionsDelay(value: number) {
    this.view.setFloat32(28, value, true);
  }

  // 0x20: i32
  set Reverb(value: number) {
    this.view.setInt32(32, value, true);
  }

  // 0x24: f32
  set ReverbDelay(value: number) {
    this.view.setFloat32(36, value, true);
  }

  // 0x28: f32
  set Diffusion(value: number) {
    this.view.setFloat32(40, value, true);
  }

  // 0x2c: f32
  set Density(value: number) {
    this.view.setFloat32(44, value, true);
  }

  // 0x30: f32
  set HFReference(value: number) {
    this.view.setFloat32(48, value, true);
  }

  // 0x34: pad4
}

/**
 * Windows.Win32.Media.Audio.XAudio2.HrtfPosition (size: 16)
 */
export interface HrtfPosition {
  /** f32 */
  x: number;
  /** f32 */
  y: number;
  /** f32 */
  z: number;
}

export const sizeofHrtfPosition = 16;

export function allocHrtfPosition(data?: Partial<HrtfPosition>): Uint8Array {
  const buf = new Uint8Array(sizeofHrtfPosition);
  const view = new DataView(buf.buffer);
  // 0x00: f32
  if (data?.x !== undefined) view.setFloat32(0, Number(data.x), true);
  // 0x04: f32
  if (data?.y !== undefined) view.setFloat32(4, Number(data.y), true);
  // 0x08: f32
  if (data?.z !== undefined) view.setFloat32(8, Number(data.z), true);
  // 0x0c: pad4
  return buf;
}

export class HrtfPositionView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: f32
  get x(): number {
    return this.view.getFloat32(0, true);
  }

  // 0x04: f32
  get y(): number {
    return this.view.getFloat32(4, true);
  }

  // 0x08: f32
  get z(): number {
    return this.view.getFloat32(8, true);
  }

  // 0x0c: pad4

  // 0x00: f32
  set x(value: number) {
    this.view.setFloat32(0, value, true);
  }

  // 0x04: f32
  set y(value: number) {
    this.view.setFloat32(4, value, true);
  }

  // 0x08: f32
  set z(value: number) {
    this.view.setFloat32(8, value, true);
  }

  // 0x0c: pad4
}

/**
 * Windows.Win32.Media.Audio.XAudio2.HrtfOrientation (size: 8)
 */
export interface HrtfOrientation {
  /** array */
  element: Deno.PointerValue | null;
}

export const sizeofHrtfOrientation = 8;

export function allocHrtfOrientation(data?: Partial<HrtfOrientation>): Uint8Array {
  const buf = new Uint8Array(sizeofHrtfOrientation);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.element !== undefined) view.setBigUint64(0, data.element === null ? 0n : util.toBigInt(util.toPointer(data.element)), true);
  return buf;
}

export class HrtfOrientationView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get element(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(0, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: pointer
  set element(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(0, util.toBigInt(util.toPointer(value)), true);
  }
}

/**
 * Windows.Win32.Media.Audio.XAudio2.HrtfDirectivity (size: 8)
 */
export interface HrtfDirectivity {
  /** Windows.Win32.Media.Audio.XAudio2.HrtfDirectivityType */
  type: HrtfDirectivityType;
  /** f32 */
  scaling: number;
}

export const sizeofHrtfDirectivity = 8;

export function allocHrtfDirectivity(data?: Partial<HrtfDirectivity>): Uint8Array {
  const buf = new Uint8Array(sizeofHrtfDirectivity);
  const view = new DataView(buf.buffer);
  // 0x00: i32
  if (data?.type !== undefined) view.setInt32(0, Number(data.type), true);
  // 0x04: f32
  if (data?.scaling !== undefined) view.setFloat32(4, Number(data.scaling), true);
  return buf;
}

export class HrtfDirectivityView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: i32
  get type(): number {
    return this.view.getInt32(0, true);
  }

  // 0x04: f32
  get scaling(): number {
    return this.view.getFloat32(4, true);
  }

  // 0x00: i32
  set type(value: number) {
    this.view.setInt32(0, value, true);
  }

  // 0x04: f32
  set scaling(value: number) {
    this.view.setFloat32(4, value, true);
  }
}

/**
 * Windows.Win32.Media.Audio.XAudio2.HrtfDirectivityCardioid (size: 16)
 */
export interface HrtfDirectivityCardioid {
  /** Windows.Win32.Media.Audio.XAudio2.HrtfDirectivity */
  directivity: Uint8Array | Deno.PointerValue | null;
  /** f32 */
  order: number;
}

export const sizeofHrtfDirectivityCardioid = 16;

export function allocHrtfDirectivityCardioid(data?: Partial<HrtfDirectivityCardioid>): Uint8Array {
  const buf = new Uint8Array(sizeofHrtfDirectivityCardioid);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.directivity !== undefined) view.setBigUint64(0, data.directivity === null ? 0n : util.toBigInt(util.toPointer(data.directivity)), true);
  // 0x08: f32
  if (data?.order !== undefined) view.setFloat32(8, Number(data.order), true);
  // 0x0c: pad4
  return buf;
}

export class HrtfDirectivityCardioidView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get directivity(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(0, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x08: f32
  get order(): number {
    return this.view.getFloat32(8, true);
  }

  // 0x0c: pad4

  // 0x00: pointer
  set directivity(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(0, util.toBigInt(util.toPointer(value)), true);
  }

  // 0x08: f32
  set order(value: number) {
    this.view.setFloat32(8, value, true);
  }

  // 0x0c: pad4
}

/**
 * Windows.Win32.Media.Audio.XAudio2.HrtfDirectivityCone (size: 16)
 */
export interface HrtfDirectivityCone {
  /** Windows.Win32.Media.Audio.XAudio2.HrtfDirectivity */
  directivity: Uint8Array | Deno.PointerValue | null;
  /** f32 */
  innerAngle: number;
  /** f32 */
  outerAngle: number;
}

export const sizeofHrtfDirectivityCone = 16;

export function allocHrtfDirectivityCone(data?: Partial<HrtfDirectivityCone>): Uint8Array {
  const buf = new Uint8Array(sizeofHrtfDirectivityCone);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.directivity !== undefined) view.setBigUint64(0, data.directivity === null ? 0n : util.toBigInt(util.toPointer(data.directivity)), true);
  // 0x08: f32
  if (data?.innerAngle !== undefined) view.setFloat32(8, Number(data.innerAngle), true);
  // 0x0c: f32
  if (data?.outerAngle !== undefined) view.setFloat32(12, Number(data.outerAngle), true);
  return buf;
}

export class HrtfDirectivityConeView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get directivity(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(0, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x08: f32
  get innerAngle(): number {
    return this.view.getFloat32(8, true);
  }

  // 0x0c: f32
  get outerAngle(): number {
    return this.view.getFloat32(12, true);
  }

  // 0x00: pointer
  set directivity(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(0, util.toBigInt(util.toPointer(value)), true);
  }

  // 0x08: f32
  set innerAngle(value: number) {
    this.view.setFloat32(8, value, true);
  }

  // 0x0c: f32
  set outerAngle(value: number) {
    this.view.setFloat32(12, value, true);
  }
}

/**
 * Windows.Win32.Media.Audio.XAudio2.HrtfDistanceDecay (size: 24)
 */
export interface HrtfDistanceDecay {
  /** Windows.Win32.Media.Audio.XAudio2.HrtfDistanceDecayType */
  type: HrtfDistanceDecayType;
  /** f32 */
  maxGain: number;
  /** f32 */
  minGain: number;
  /** f32 */
  unityGainDistance: number;
  /** f32 */
  cutoffDistance: number;
}

export const sizeofHrtfDistanceDecay = 24;

export function allocHrtfDistanceDecay(data?: Partial<HrtfDistanceDecay>): Uint8Array {
  const buf = new Uint8Array(sizeofHrtfDistanceDecay);
  const view = new DataView(buf.buffer);
  // 0x00: i32
  if (data?.type !== undefined) view.setInt32(0, Number(data.type), true);
  // 0x04: f32
  if (data?.maxGain !== undefined) view.setFloat32(4, Number(data.maxGain), true);
  // 0x08: f32
  if (data?.minGain !== undefined) view.setFloat32(8, Number(data.minGain), true);
  // 0x0c: f32
  if (data?.unityGainDistance !== undefined) view.setFloat32(12, Number(data.unityGainDistance), true);
  // 0x10: f32
  if (data?.cutoffDistance !== undefined) view.setFloat32(16, Number(data.cutoffDistance), true);
  // 0x14: pad4
  return buf;
}

export class HrtfDistanceDecayView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: i32
  get type(): number {
    return this.view.getInt32(0, true);
  }

  // 0x04: f32
  get maxGain(): number {
    return this.view.getFloat32(4, true);
  }

  // 0x08: f32
  get minGain(): number {
    return this.view.getFloat32(8, true);
  }

  // 0x0c: f32
  get unityGainDistance(): number {
    return this.view.getFloat32(12, true);
  }

  // 0x10: f32
  get cutoffDistance(): number {
    return this.view.getFloat32(16, true);
  }

  // 0x14: pad4

  // 0x00: i32
  set type(value: number) {
    this.view.setInt32(0, value, true);
  }

  // 0x04: f32
  set maxGain(value: number) {
    this.view.setFloat32(4, value, true);
  }

  // 0x08: f32
  set minGain(value: number) {
    this.view.setFloat32(8, value, true);
  }

  // 0x0c: f32
  set unityGainDistance(value: number) {
    this.view.setFloat32(12, value, true);
  }

  // 0x10: f32
  set cutoffDistance(value: number) {
    this.view.setFloat32(16, value, true);
  }

  // 0x14: pad4
}

/**
 * Windows.Win32.Media.Audio.XAudio2.HrtfApoInit (size: 16)
 */
export interface HrtfApoInit {
  /** ptr */
  distanceDecay: Deno.PointerValue | Uint8Array | null;
  /** ptr */
  directivity: Deno.PointerValue | Uint8Array | null;
}

export const sizeofHrtfApoInit = 16;

export function allocHrtfApoInit(data?: Partial<HrtfApoInit>): Uint8Array {
  const buf = new Uint8Array(sizeofHrtfApoInit);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.distanceDecay !== undefined) view.setBigUint64(0, data.distanceDecay === null ? 0n : util.toBigInt(util.toPointer(data.distanceDecay)), true);
  // 0x08: pointer
  if (data?.directivity !== undefined) view.setBigUint64(8, data.directivity === null ? 0n : util.toBigInt(util.toPointer(data.directivity)), true);
  return buf;
}

export class HrtfApoInitView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get distanceDecay(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(0, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x08: pointer
  get directivity(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(8, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: pointer
  set distanceDecay(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(0, util.toBigInt(util.toPointer(value)), true);
  }

  // 0x08: pointer
  set directivity(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(8, util.toBigInt(util.toPointer(value)), true);
  }
}

export type HRESULT = number;

// Native Libraries

try {
  var libXAudio2_8_dll = Deno.dlopen("XAudio2_8.dll", {
    CreateFX: {
      parameters: ["pointer", "pointer", "pointer", "u32"],
      result: "pointer",
    },
    XAudio2CreateWithVersionInfo: {
      parameters: ["pointer", "u32", "u32", "u32"],
      result: "pointer",
    },
    CreateAudioVolumeMeter: {
      parameters: ["pointer"],
      result: "pointer",
    },
    CreateAudioReverb: {
      parameters: ["pointer"],
      result: "pointer",
    },
  }).symbols;
} catch(e) { /* ignore */ }

try {
  var libHrtfApo_dll = Deno.dlopen("HrtfApo.dll", {
    CreateHrtfApo: {
      parameters: ["pointer", "pointer"],
      result: "pointer",
    },
  }).symbols;
} catch(e) { /* ignore */ }

// Symbols

export function CreateFX(
  clsid: Deno.PointerValue | Uint8Array | null /* ptr */,
  pEffect: Deno.PointerValue | Uint8Array | null /* ptr */,
  pInitDat: Deno.PointerValue | Uint8Array | null /* ptr */,
  InitDataByteSize: number /* u32 */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libXAudio2_8_dll.CreateFX(util.toPointer(clsid), util.toPointer(pEffect), util.toPointer(pInitDat), InitDataByteSize));
}

export function XAudio2CreateWithVersionInfo(
  ppXAudio2: Deno.PointerValue | Uint8Array | null /* ptr */,
  Flags: number /* u32 */,
  XAudio2Processor: number /* u32 */,
  ntddiVersion: number /* u32 */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libXAudio2_8_dll.XAudio2CreateWithVersionInfo(util.toPointer(ppXAudio2), Flags, XAudio2Processor, ntddiVersion));
}

export function CreateAudioVolumeMeter(
  ppApo: Deno.PointerValue | Uint8Array | null /* ptr */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libXAudio2_8_dll.CreateAudioVolumeMeter(util.toPointer(ppApo)));
}

export function CreateAudioReverb(
  ppApo: Deno.PointerValue | Uint8Array | null /* ptr */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libXAudio2_8_dll.CreateAudioReverb(util.toPointer(ppApo)));
}

export function CreateHrtfApo(
  init: Deno.PointerValue | Uint8Array | null /* ptr */,
  xApo: Deno.PointerValue | Uint8Array | null /* ptr */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libHrtfApo_dll.CreateHrtfApo(util.toPointer(init), util.toPointer(xApo)));
}

