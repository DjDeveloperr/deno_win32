/// Auto-generated by Deno Win32: Windows.Win32.Media.Audio.DirectSound.Apis

import * as util from "../../../util.ts";

// Constants
export const DIRECTSOUND_VERSION = 1792;
export const _FACDS = 2168;
export const DSFX_LOCHARDWARE = 1;
export const DSFX_LOCSOFTWARE = 2;
export const DSCFX_LOCHARDWARE = 1;
export const DSCFX_LOCSOFTWARE = 2;
export const DSCFXR_LOCHARDWARE = 16;
export const DSCFXR_LOCSOFTWARE = 32;
export const KSPROPERTY_SUPPORT_GET = 1;
export const KSPROPERTY_SUPPORT_SET = 2;
export const DSFXGARGLE_WAVE_TRIANGLE = 0;
export const DSFXGARGLE_WAVE_SQUARE = 1;
export const DSFXGARGLE_RATEHZ_MIN = 1;
export const DSFXGARGLE_RATEHZ_MAX = 1000;
export const DSFXCHORUS_WAVE_TRIANGLE = 0;
export const DSFXCHORUS_WAVE_SIN = 1;
export const DSFXCHORUS_WETDRYMIX_MIN = 0;
export const DSFXCHORUS_WETDRYMIX_MAX = 100;
export const DSFXCHORUS_DEPTH_MIN = 0;
export const DSFXCHORUS_DEPTH_MAX = 100;
export const DSFXCHORUS_FEEDBACK_MIN = `-99`;
export const DSFXCHORUS_FEEDBACK_MAX = 99;
export const DSFXCHORUS_FREQUENCY_MIN = 0;
export const DSFXCHORUS_FREQUENCY_MAX = 10;
export const DSFXCHORUS_DELAY_MIN = 0;
export const DSFXCHORUS_DELAY_MAX = 20;
export const DSFXCHORUS_PHASE_MIN = 0;
export const DSFXCHORUS_PHASE_MAX = 4;
export const DSFXCHORUS_PHASE_NEG_180 = 0;
export const DSFXCHORUS_PHASE_NEG_90 = 1;
export const DSFXCHORUS_PHASE_ZERO = 2;
export const DSFXCHORUS_PHASE_90 = 3;
export const DSFXCHORUS_PHASE_180 = 4;
export const DSFXFLANGER_WAVE_TRIANGLE = 0;
export const DSFXFLANGER_WAVE_SIN = 1;
export const DSFXFLANGER_WETDRYMIX_MIN = 0;
export const DSFXFLANGER_WETDRYMIX_MAX = 100;
export const DSFXFLANGER_FREQUENCY_MIN = 0;
export const DSFXFLANGER_FREQUENCY_MAX = 10;
export const DSFXFLANGER_DEPTH_MIN = 0;
export const DSFXFLANGER_DEPTH_MAX = 100;
export const DSFXFLANGER_PHASE_MIN = 0;
export const DSFXFLANGER_PHASE_MAX = 4;
export const DSFXFLANGER_FEEDBACK_MIN = `-99`;
export const DSFXFLANGER_FEEDBACK_MAX = 99;
export const DSFXFLANGER_DELAY_MIN = 0;
export const DSFXFLANGER_DELAY_MAX = 4;
export const DSFXFLANGER_PHASE_NEG_180 = 0;
export const DSFXFLANGER_PHASE_NEG_90 = 1;
export const DSFXFLANGER_PHASE_ZERO = 2;
export const DSFXFLANGER_PHASE_90 = 3;
export const DSFXFLANGER_PHASE_180 = 4;
export const DSFXECHO_WETDRYMIX_MIN = 0;
export const DSFXECHO_WETDRYMIX_MAX = 100;
export const DSFXECHO_FEEDBACK_MIN = 0;
export const DSFXECHO_FEEDBACK_MAX = 100;
export const DSFXECHO_LEFTDELAY_MIN = 1;
export const DSFXECHO_LEFTDELAY_MAX = 2000;
export const DSFXECHO_RIGHTDELAY_MIN = 1;
export const DSFXECHO_RIGHTDELAY_MAX = 2000;
export const DSFXECHO_PANDELAY_MIN = 0;
export const DSFXECHO_PANDELAY_MAX = 1;
export const DSFXDISTORTION_GAIN_MIN = `-60`;
export const DSFXDISTORTION_GAIN_MAX = 0;
export const DSFXDISTORTION_EDGE_MIN = 0;
export const DSFXDISTORTION_EDGE_MAX = 100;
export const DSFXDISTORTION_POSTEQCENTERFREQUENCY_MIN = 100;
export const DSFXDISTORTION_POSTEQCENTERFREQUENCY_MAX = 8000;
export const DSFXDISTORTION_POSTEQBANDWIDTH_MIN = 100;
export const DSFXDISTORTION_POSTEQBANDWIDTH_MAX = 8000;
export const DSFXDISTORTION_PRELOWPASSCUTOFF_MIN = 100;
export const DSFXDISTORTION_PRELOWPASSCUTOFF_MAX = 8000;
export const DSFXCOMPRESSOR_GAIN_MIN = `-60`;
export const DSFXCOMPRESSOR_GAIN_MAX = 60;
export const DSFXCOMPRESSOR_ATTACK_MIN = `0.009999999776482582`;
export const DSFXCOMPRESSOR_ATTACK_MAX = 500;
export const DSFXCOMPRESSOR_RELEASE_MIN = 50;
export const DSFXCOMPRESSOR_RELEASE_MAX = 3000;
export const DSFXCOMPRESSOR_THRESHOLD_MIN = `-60`;
export const DSFXCOMPRESSOR_THRESHOLD_MAX = 0;
export const DSFXCOMPRESSOR_RATIO_MIN = 1;
export const DSFXCOMPRESSOR_RATIO_MAX = 100;
export const DSFXCOMPRESSOR_PREDELAY_MIN = 0;
export const DSFXCOMPRESSOR_PREDELAY_MAX = 4;
export const DSFXPARAMEQ_CENTER_MIN = 80;
export const DSFXPARAMEQ_CENTER_MAX = 16000;
export const DSFXPARAMEQ_BANDWIDTH_MIN = 1;
export const DSFXPARAMEQ_BANDWIDTH_MAX = 36;
export const DSFXPARAMEQ_GAIN_MIN = `-15`;
export const DSFXPARAMEQ_GAIN_MAX = 15;
export const DSFX_I3DL2REVERB_ROOM_MIN = `-10000`;
export const DSFX_I3DL2REVERB_ROOM_MAX = 0;
export const DSFX_I3DL2REVERB_ROOM_DEFAULT = `-1000`;
export const DSFX_I3DL2REVERB_ROOMHF_MIN = `-10000`;
export const DSFX_I3DL2REVERB_ROOMHF_MAX = 0;
export const DSFX_I3DL2REVERB_ROOMHF_DEFAULT = `-100`;
export const DSFX_I3DL2REVERB_ROOMROLLOFFFACTOR_MIN = 0;
export const DSFX_I3DL2REVERB_ROOMROLLOFFFACTOR_MAX = 10;
export const DSFX_I3DL2REVERB_ROOMROLLOFFFACTOR_DEFAULT = 0;
export const DSFX_I3DL2REVERB_DECAYTIME_MIN = `0.10000000149011612`;
export const DSFX_I3DL2REVERB_DECAYTIME_MAX = 20;
export const DSFX_I3DL2REVERB_DECAYTIME_DEFAULT = `1.4900000095367432`;
export const DSFX_I3DL2REVERB_DECAYHFRATIO_MIN = `0.10000000149011612`;
export const DSFX_I3DL2REVERB_DECAYHFRATIO_MAX = 2;
export const DSFX_I3DL2REVERB_DECAYHFRATIO_DEFAULT = `0.8299999833106995`;
export const DSFX_I3DL2REVERB_REFLECTIONS_MIN = `-10000`;
export const DSFX_I3DL2REVERB_REFLECTIONS_MAX = 1000;
export const DSFX_I3DL2REVERB_REFLECTIONS_DEFAULT = `-2602`;
export const DSFX_I3DL2REVERB_REFLECTIONSDELAY_MIN = 0;
export const DSFX_I3DL2REVERB_REFLECTIONSDELAY_MAX = `0.30000001192092896`;
export const DSFX_I3DL2REVERB_REFLECTIONSDELAY_DEFAULT = `0.007000000216066837`;
export const DSFX_I3DL2REVERB_REVERB_MIN = `-10000`;
export const DSFX_I3DL2REVERB_REVERB_MAX = 2000;
export const DSFX_I3DL2REVERB_REVERB_DEFAULT = 200;
export const DSFX_I3DL2REVERB_REVERBDELAY_MIN = 0;
export const DSFX_I3DL2REVERB_REVERBDELAY_MAX = `0.10000000149011612`;
export const DSFX_I3DL2REVERB_REVERBDELAY_DEFAULT = `0.010999999940395355`;
export const DSFX_I3DL2REVERB_DIFFUSION_MIN = 0;
export const DSFX_I3DL2REVERB_DIFFUSION_MAX = 100;
export const DSFX_I3DL2REVERB_DIFFUSION_DEFAULT = 100;
export const DSFX_I3DL2REVERB_DENSITY_MIN = 0;
export const DSFX_I3DL2REVERB_DENSITY_MAX = 100;
export const DSFX_I3DL2REVERB_DENSITY_DEFAULT = 100;
export const DSFX_I3DL2REVERB_HFREFERENCE_MIN = 20;
export const DSFX_I3DL2REVERB_HFREFERENCE_MAX = 20000;
export const DSFX_I3DL2REVERB_HFREFERENCE_DEFAULT = 5000;
export const DSFX_I3DL2REVERB_QUALITY_MIN = 0;
export const DSFX_I3DL2REVERB_QUALITY_MAX = 3;
export const DSFX_I3DL2REVERB_QUALITY_DEFAULT = 2;
export const DSFX_WAVESREVERB_INGAIN_MIN = `-96`;
export const DSFX_WAVESREVERB_INGAIN_MAX = 0;
export const DSFX_WAVESREVERB_INGAIN_DEFAULT = 0;
export const DSFX_WAVESREVERB_REVERBMIX_MIN = `-96`;
export const DSFX_WAVESREVERB_REVERBMIX_MAX = 0;
export const DSFX_WAVESREVERB_REVERBMIX_DEFAULT = 0;
export const DSFX_WAVESREVERB_REVERBTIME_MIN = `0.0010000000474974513`;
export const DSFX_WAVESREVERB_REVERBTIME_MAX = 3000;
export const DSFX_WAVESREVERB_REVERBTIME_DEFAULT = 1000;
export const DSFX_WAVESREVERB_HIGHFREQRTRATIO_MIN = `0.0010000000474974513`;
export const DSFX_WAVESREVERB_HIGHFREQRTRATIO_MAX = `0.9990000128746033`;
export const DSFX_WAVESREVERB_HIGHFREQRTRATIO_DEFAULT = `0.0010000000474974513`;
export const DSCFX_AEC_MODE_PASS_THROUGH = 0;
export const DSCFX_AEC_MODE_HALF_DUPLEX = 1;
export const DSCFX_AEC_MODE_FULL_DUPLEX = 2;
export const DSCFX_AEC_STATUS_HISTORY_UNINITIALIZED = 0;
export const DSCFX_AEC_STATUS_HISTORY_CONTINUOUSLY_CONVERGED = 1;
export const DSCFX_AEC_STATUS_HISTORY_PREVIOUSLY_DIVERGED = 2;
export const DSCFX_AEC_STATUS_CURRENTLY_CONVERGED = 8;
export const DS_NO_VIRTUALIZATION = 219902342877151242n;
export const DSCAPS_PRIMARYMONO = 1;
export const DSCAPS_PRIMARYSTEREO = 2;
export const DSCAPS_PRIMARY8BIT = 4;
export const DSCAPS_PRIMARY16BIT = 8;
export const DSCAPS_CONTINUOUSRATE = 16;
export const DSCAPS_EMULDRIVER = 32;
export const DSCAPS_CERTIFIED = 64;
export const DSCAPS_SECONDARYMONO = 256;
export const DSCAPS_SECONDARYSTEREO = 512;
export const DSCAPS_SECONDARY8BIT = 1024;
export const DSCAPS_SECONDARY16BIT = 2048;
export const DSSCL_NORMAL = 1;
export const DSSCL_PRIORITY = 2;
export const DSSCL_EXCLUSIVE = 3;
export const DSSCL_WRITEPRIMARY = 4;
export const DSSPEAKER_DIRECTOUT = 0;
export const DSSPEAKER_HEADPHONE = 1;
export const DSSPEAKER_MONO = 2;
export const DSSPEAKER_QUAD = 3;
export const DSSPEAKER_STEREO = 4;
export const DSSPEAKER_SURROUND = 5;
export const DSSPEAKER_5POINT1 = 6;
export const DSSPEAKER_7POINT1 = 7;
export const DSSPEAKER_7POINT1_SURROUND = 8;
export const DSSPEAKER_5POINT1_SURROUND = 9;
export const DSSPEAKER_7POINT1_WIDE = 7;
export const DSSPEAKER_5POINT1_BACK = 6;
export const DSSPEAKER_GEOMETRY_MIN = 5;
export const DSSPEAKER_GEOMETRY_NARROW = 10;
export const DSSPEAKER_GEOMETRY_WIDE = 20;
export const DSSPEAKER_GEOMETRY_MAX = 180;
export const DSBCAPS_PRIMARYBUFFER = 1;
export const DSBCAPS_STATIC = 2;
export const DSBCAPS_LOCHARDWARE = 4;
export const DSBCAPS_LOCSOFTWARE = 8;
export const DSBCAPS_CTRL3D = 16;
export const DSBCAPS_CTRLFREQUENCY = 32;
export const DSBCAPS_CTRLPAN = 64;
export const DSBCAPS_CTRLVOLUME = 128;
export const DSBCAPS_CTRLPOSITIONNOTIFY = 256;
export const DSBCAPS_CTRLFX = 512;
export const DSBCAPS_STICKYFOCUS = 16384;
export const DSBCAPS_GLOBALFOCUS = 32768;
export const DSBCAPS_GETCURRENTPOSITION2 = 65536;
export const DSBCAPS_MUTE3DATMAXDISTANCE = 131072;
export const DSBCAPS_LOCDEFER = 262144;
export const DSBCAPS_TRUEPLAYPOSITION = 524288;
export const DSBPLAY_LOOPING = 1;
export const DSBPLAY_LOCHARDWARE = 2;
export const DSBPLAY_LOCSOFTWARE = 4;
export const DSBPLAY_TERMINATEBY_TIME = 8;
export const DSBPLAY_TERMINATEBY_DISTANCE = 16;
export const DSBPLAY_TERMINATEBY_PRIORITY = 32;
export const DSBSTATUS_PLAYING = 1;
export const DSBSTATUS_BUFFERLOST = 2;
export const DSBSTATUS_LOOPING = 4;
export const DSBSTATUS_LOCHARDWARE = 8;
export const DSBSTATUS_LOCSOFTWARE = 16;
export const DSBSTATUS_TERMINATED = 32;
export const DSBLOCK_FROMWRITECURSOR = 1;
export const DSBLOCK_ENTIREBUFFER = 2;
export const DSBFREQUENCY_ORIGINAL = 0;
export const DSBFREQUENCY_MIN = 100;
export const DSBFREQUENCY_MAX = 200000;
export const DSBPAN_LEFT = `-10000`;
export const DSBPAN_CENTER = 0;
export const DSBPAN_RIGHT = 10000;
export const DSBVOLUME_MIN = `-10000`;
export const DSBVOLUME_MAX = 0;
export const DSBSIZE_MIN = 4;
export const DSBSIZE_MAX = 268435455;
export const DSBSIZE_FX_MIN = 150;
export const DSBNOTIFICATIONS_MAX = 100000;
export const DS3DMODE_NORMAL = 0;
export const DS3DMODE_HEADRELATIVE = 1;
export const DS3DMODE_DISABLE = 2;
export const DS3D_IMMEDIATE = 0;
export const DS3D_DEFERRED = 1;
export const DS3D_DEFAULTDISTANCEFACTOR = 1;
export const DS3D_MINROLLOFFFACTOR = 0;
export const DS3D_MAXROLLOFFFACTOR = 10;
export const DS3D_DEFAULTROLLOFFFACTOR = 1;
export const DS3D_MINDOPPLERFACTOR = 0;
export const DS3D_MAXDOPPLERFACTOR = 10;
export const DS3D_DEFAULTDOPPLERFACTOR = 1;
export const DS3D_DEFAULTMINDISTANCE = 1;
export const DS3D_DEFAULTMAXDISTANCE = 1000000000;
export const DS3D_MINCONEANGLE = 0;
export const DS3D_MAXCONEANGLE = 360;
export const DS3D_DEFAULTCONEANGLE = 360;
export const DS3D_DEFAULTCONEOUTSIDEVOLUME = 0;
export const DSCCAPS_EMULDRIVER = 32;
export const DSCCAPS_CERTIFIED = 64;
export const DSCCAPS_MULTIPLECAPTURE = 1;
export const DSCBCAPS_WAVEMAPPED = 2147483648;
export const DSCBCAPS_CTRLFX = 512;
export const DSCBLOCK_ENTIREBUFFER = 1;
export const DSCBSTATUS_CAPTURING = 1;
export const DSCBSTATUS_LOOPING = 2;
export const DSCBSTART_LOOPING = 1;
export const DSBPN_OFFSETSTOP = 4294967295;
export const DS_CERTIFIED = 0;
export const DS_UNCERTIFIED = 1;
export const DSFXR_PRESENT = 0;
export const DSFXR_LOCHARDWARE = 1;
export const DSFXR_LOCSOFTWARE = 2;
export const DSFXR_UNALLOCATED = 3;
export const DSFXR_FAILED = 4;
export const DSFXR_UNKNOWN = 5;
export const DSFXR_SENDLOOP = 6;
export const DSFX_I3DL2_MATERIAL_PRESET_SINGLEWINDOW = 0;
export const DSFX_I3DL2_MATERIAL_PRESET_DOUBLEWINDOW = 1;
export const DSFX_I3DL2_MATERIAL_PRESET_THINDOOR = 2;
export const DSFX_I3DL2_MATERIAL_PRESET_THICKDOOR = 3;
export const DSFX_I3DL2_MATERIAL_PRESET_WOODWALL = 4;
export const DSFX_I3DL2_MATERIAL_PRESET_BRICKWALL = 5;
export const DSFX_I3DL2_MATERIAL_PRESET_STONEWALL = 6;
export const DSFX_I3DL2_MATERIAL_PRESET_CURTAIN = 7;
export const DSFX_I3DL2_ENVIRONMENT_PRESET_DEFAULT = 0;
export const DSFX_I3DL2_ENVIRONMENT_PRESET_GENERIC = 1;
export const DSFX_I3DL2_ENVIRONMENT_PRESET_PADDEDCELL = 2;
export const DSFX_I3DL2_ENVIRONMENT_PRESET_ROOM = 3;
export const DSFX_I3DL2_ENVIRONMENT_PRESET_BATHROOM = 4;
export const DSFX_I3DL2_ENVIRONMENT_PRESET_LIVINGROOM = 5;
export const DSFX_I3DL2_ENVIRONMENT_PRESET_STONEROOM = 6;
export const DSFX_I3DL2_ENVIRONMENT_PRESET_AUDITORIUM = 7;
export const DSFX_I3DL2_ENVIRONMENT_PRESET_CONCERTHALL = 8;
export const DSFX_I3DL2_ENVIRONMENT_PRESET_CAVE = 9;
export const DSFX_I3DL2_ENVIRONMENT_PRESET_ARENA = 10;
export const DSFX_I3DL2_ENVIRONMENT_PRESET_HANGAR = 11;
export const DSFX_I3DL2_ENVIRONMENT_PRESET_CARPETEDHALLWAY = 12;
export const DSFX_I3DL2_ENVIRONMENT_PRESET_HALLWAY = 13;
export const DSFX_I3DL2_ENVIRONMENT_PRESET_STONECORRIDOR = 14;
export const DSFX_I3DL2_ENVIRONMENT_PRESET_ALLEY = 15;
export const DSFX_I3DL2_ENVIRONMENT_PRESET_FOREST = 16;
export const DSFX_I3DL2_ENVIRONMENT_PRESET_CITY = 17;
export const DSFX_I3DL2_ENVIRONMENT_PRESET_MOUNTAINS = 18;
export const DSFX_I3DL2_ENVIRONMENT_PRESET_QUARRY = 19;
export const DSFX_I3DL2_ENVIRONMENT_PRESET_PLAIN = 20;
export const DSFX_I3DL2_ENVIRONMENT_PRESET_PARKINGLOT = 21;
export const DSFX_I3DL2_ENVIRONMENT_PRESET_SEWERPIPE = 22;
export const DSFX_I3DL2_ENVIRONMENT_PRESET_UNDERWATER = 23;
export const DSFX_I3DL2_ENVIRONMENT_PRESET_SMALLROOM = 24;
export const DSFX_I3DL2_ENVIRONMENT_PRESET_MEDIUMROOM = 25;
export const DSFX_I3DL2_ENVIRONMENT_PRESET_LARGEROOM = 26;
export const DSFX_I3DL2_ENVIRONMENT_PRESET_MEDIUMHALL = 27;
export const DSFX_I3DL2_ENVIRONMENT_PRESET_LARGEHALL = 28;
export const DSFX_I3DL2_ENVIRONMENT_PRESET_PLATE = 29;

// Structs

/**
 * Windows.Win32.Media.Audio.DirectSound.DSCAPS (size: 96)
 */
export interface DSCAPS {
  /** u32 */
  dwSize: number;
  /** u32 */
  dwFlags: number;
  /** u32 */
  dwMinSecondarySampleRate: number;
  /** u32 */
  dwMaxSecondarySampleRate: number;
  /** u32 */
  dwPrimaryBuffers: number;
  /** u32 */
  dwMaxHwMixingAllBuffers: number;
  /** u32 */
  dwMaxHwMixingStaticBuffers: number;
  /** u32 */
  dwMaxHwMixingStreamingBuffers: number;
  /** u32 */
  dwFreeHwMixingAllBuffers: number;
  /** u32 */
  dwFreeHwMixingStaticBuffers: number;
  /** u32 */
  dwFreeHwMixingStreamingBuffers: number;
  /** u32 */
  dwMaxHw3DAllBuffers: number;
  /** u32 */
  dwMaxHw3DStaticBuffers: number;
  /** u32 */
  dwMaxHw3DStreamingBuffers: number;
  /** u32 */
  dwFreeHw3DAllBuffers: number;
  /** u32 */
  dwFreeHw3DStaticBuffers: number;
  /** u32 */
  dwFreeHw3DStreamingBuffers: number;
  /** u32 */
  dwTotalHwMemBytes: number;
  /** u32 */
  dwFreeHwMemBytes: number;
  /** u32 */
  dwMaxContigFreeHwMemBytes: number;
  /** u32 */
  dwUnlockTransferRateHwBuffers: number;
  /** u32 */
  dwPlayCpuOverheadSwBuffers: number;
  /** u32 */
  dwReserved1: number;
  /** u32 */
  dwReserved2: number;
}

export const sizeofDSCAPS = 96;

export function allocDSCAPS(data?: Partial<DSCAPS>): Uint8Array {
  const buf = new Uint8Array(sizeofDSCAPS);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.dwSize !== undefined) view.setUint32(0, Number(data.dwSize), true);
  // 0x04: u32
  if (data?.dwFlags !== undefined) view.setUint32(4, Number(data.dwFlags), true);
  // 0x08: u32
  if (data?.dwMinSecondarySampleRate !== undefined) view.setUint32(8, Number(data.dwMinSecondarySampleRate), true);
  // 0x0c: u32
  if (data?.dwMaxSecondarySampleRate !== undefined) view.setUint32(12, Number(data.dwMaxSecondarySampleRate), true);
  // 0x10: u32
  if (data?.dwPrimaryBuffers !== undefined) view.setUint32(16, Number(data.dwPrimaryBuffers), true);
  // 0x14: u32
  if (data?.dwMaxHwMixingAllBuffers !== undefined) view.setUint32(20, Number(data.dwMaxHwMixingAllBuffers), true);
  // 0x18: u32
  if (data?.dwMaxHwMixingStaticBuffers !== undefined) view.setUint32(24, Number(data.dwMaxHwMixingStaticBuffers), true);
  // 0x1c: u32
  if (data?.dwMaxHwMixingStreamingBuffers !== undefined) view.setUint32(28, Number(data.dwMaxHwMixingStreamingBuffers), true);
  // 0x20: u32
  if (data?.dwFreeHwMixingAllBuffers !== undefined) view.setUint32(32, Number(data.dwFreeHwMixingAllBuffers), true);
  // 0x24: u32
  if (data?.dwFreeHwMixingStaticBuffers !== undefined) view.setUint32(36, Number(data.dwFreeHwMixingStaticBuffers), true);
  // 0x28: u32
  if (data?.dwFreeHwMixingStreamingBuffers !== undefined) view.setUint32(40, Number(data.dwFreeHwMixingStreamingBuffers), true);
  // 0x2c: u32
  if (data?.dwMaxHw3DAllBuffers !== undefined) view.setUint32(44, Number(data.dwMaxHw3DAllBuffers), true);
  // 0x30: u32
  if (data?.dwMaxHw3DStaticBuffers !== undefined) view.setUint32(48, Number(data.dwMaxHw3DStaticBuffers), true);
  // 0x34: u32
  if (data?.dwMaxHw3DStreamingBuffers !== undefined) view.setUint32(52, Number(data.dwMaxHw3DStreamingBuffers), true);
  // 0x38: u32
  if (data?.dwFreeHw3DAllBuffers !== undefined) view.setUint32(56, Number(data.dwFreeHw3DAllBuffers), true);
  // 0x3c: u32
  if (data?.dwFreeHw3DStaticBuffers !== undefined) view.setUint32(60, Number(data.dwFreeHw3DStaticBuffers), true);
  // 0x40: u32
  if (data?.dwFreeHw3DStreamingBuffers !== undefined) view.setUint32(64, Number(data.dwFreeHw3DStreamingBuffers), true);
  // 0x44: u32
  if (data?.dwTotalHwMemBytes !== undefined) view.setUint32(68, Number(data.dwTotalHwMemBytes), true);
  // 0x48: u32
  if (data?.dwFreeHwMemBytes !== undefined) view.setUint32(72, Number(data.dwFreeHwMemBytes), true);
  // 0x4c: u32
  if (data?.dwMaxContigFreeHwMemBytes !== undefined) view.setUint32(76, Number(data.dwMaxContigFreeHwMemBytes), true);
  // 0x50: u32
  if (data?.dwUnlockTransferRateHwBuffers !== undefined) view.setUint32(80, Number(data.dwUnlockTransferRateHwBuffers), true);
  // 0x54: u32
  if (data?.dwPlayCpuOverheadSwBuffers !== undefined) view.setUint32(84, Number(data.dwPlayCpuOverheadSwBuffers), true);
  // 0x58: u32
  if (data?.dwReserved1 !== undefined) view.setUint32(88, Number(data.dwReserved1), true);
  // 0x5c: u32
  if (data?.dwReserved2 !== undefined) view.setUint32(92, Number(data.dwReserved2), true);
  return buf;
}

export class DSCAPSView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get dwSize(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: u32
  get dwFlags(): number {
    return this.view.getUint32(4, true);
  }

  // 0x08: u32
  get dwMinSecondarySampleRate(): number {
    return this.view.getUint32(8, true);
  }

  // 0x0c: u32
  get dwMaxSecondarySampleRate(): number {
    return this.view.getUint32(12, true);
  }

  // 0x10: u32
  get dwPrimaryBuffers(): number {
    return this.view.getUint32(16, true);
  }

  // 0x14: u32
  get dwMaxHwMixingAllBuffers(): number {
    return this.view.getUint32(20, true);
  }

  // 0x18: u32
  get dwMaxHwMixingStaticBuffers(): number {
    return this.view.getUint32(24, true);
  }

  // 0x1c: u32
  get dwMaxHwMixingStreamingBuffers(): number {
    return this.view.getUint32(28, true);
  }

  // 0x20: u32
  get dwFreeHwMixingAllBuffers(): number {
    return this.view.getUint32(32, true);
  }

  // 0x24: u32
  get dwFreeHwMixingStaticBuffers(): number {
    return this.view.getUint32(36, true);
  }

  // 0x28: u32
  get dwFreeHwMixingStreamingBuffers(): number {
    return this.view.getUint32(40, true);
  }

  // 0x2c: u32
  get dwMaxHw3DAllBuffers(): number {
    return this.view.getUint32(44, true);
  }

  // 0x30: u32
  get dwMaxHw3DStaticBuffers(): number {
    return this.view.getUint32(48, true);
  }

  // 0x34: u32
  get dwMaxHw3DStreamingBuffers(): number {
    return this.view.getUint32(52, true);
  }

  // 0x38: u32
  get dwFreeHw3DAllBuffers(): number {
    return this.view.getUint32(56, true);
  }

  // 0x3c: u32
  get dwFreeHw3DStaticBuffers(): number {
    return this.view.getUint32(60, true);
  }

  // 0x40: u32
  get dwFreeHw3DStreamingBuffers(): number {
    return this.view.getUint32(64, true);
  }

  // 0x44: u32
  get dwTotalHwMemBytes(): number {
    return this.view.getUint32(68, true);
  }

  // 0x48: u32
  get dwFreeHwMemBytes(): number {
    return this.view.getUint32(72, true);
  }

  // 0x4c: u32
  get dwMaxContigFreeHwMemBytes(): number {
    return this.view.getUint32(76, true);
  }

  // 0x50: u32
  get dwUnlockTransferRateHwBuffers(): number {
    return this.view.getUint32(80, true);
  }

  // 0x54: u32
  get dwPlayCpuOverheadSwBuffers(): number {
    return this.view.getUint32(84, true);
  }

  // 0x58: u32
  get dwReserved1(): number {
    return this.view.getUint32(88, true);
  }

  // 0x5c: u32
  get dwReserved2(): number {
    return this.view.getUint32(92, true);
  }

  // 0x00: u32
  set dwSize(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: u32
  set dwFlags(value: number) {
    this.view.setUint32(4, value, true);
  }

  // 0x08: u32
  set dwMinSecondarySampleRate(value: number) {
    this.view.setUint32(8, value, true);
  }

  // 0x0c: u32
  set dwMaxSecondarySampleRate(value: number) {
    this.view.setUint32(12, value, true);
  }

  // 0x10: u32
  set dwPrimaryBuffers(value: number) {
    this.view.setUint32(16, value, true);
  }

  // 0x14: u32
  set dwMaxHwMixingAllBuffers(value: number) {
    this.view.setUint32(20, value, true);
  }

  // 0x18: u32
  set dwMaxHwMixingStaticBuffers(value: number) {
    this.view.setUint32(24, value, true);
  }

  // 0x1c: u32
  set dwMaxHwMixingStreamingBuffers(value: number) {
    this.view.setUint32(28, value, true);
  }

  // 0x20: u32
  set dwFreeHwMixingAllBuffers(value: number) {
    this.view.setUint32(32, value, true);
  }

  // 0x24: u32
  set dwFreeHwMixingStaticBuffers(value: number) {
    this.view.setUint32(36, value, true);
  }

  // 0x28: u32
  set dwFreeHwMixingStreamingBuffers(value: number) {
    this.view.setUint32(40, value, true);
  }

  // 0x2c: u32
  set dwMaxHw3DAllBuffers(value: number) {
    this.view.setUint32(44, value, true);
  }

  // 0x30: u32
  set dwMaxHw3DStaticBuffers(value: number) {
    this.view.setUint32(48, value, true);
  }

  // 0x34: u32
  set dwMaxHw3DStreamingBuffers(value: number) {
    this.view.setUint32(52, value, true);
  }

  // 0x38: u32
  set dwFreeHw3DAllBuffers(value: number) {
    this.view.setUint32(56, value, true);
  }

  // 0x3c: u32
  set dwFreeHw3DStaticBuffers(value: number) {
    this.view.setUint32(60, value, true);
  }

  // 0x40: u32
  set dwFreeHw3DStreamingBuffers(value: number) {
    this.view.setUint32(64, value, true);
  }

  // 0x44: u32
  set dwTotalHwMemBytes(value: number) {
    this.view.setUint32(68, value, true);
  }

  // 0x48: u32
  set dwFreeHwMemBytes(value: number) {
    this.view.setUint32(72, value, true);
  }

  // 0x4c: u32
  set dwMaxContigFreeHwMemBytes(value: number) {
    this.view.setUint32(76, value, true);
  }

  // 0x50: u32
  set dwUnlockTransferRateHwBuffers(value: number) {
    this.view.setUint32(80, value, true);
  }

  // 0x54: u32
  set dwPlayCpuOverheadSwBuffers(value: number) {
    this.view.setUint32(84, value, true);
  }

  // 0x58: u32
  set dwReserved1(value: number) {
    this.view.setUint32(88, value, true);
  }

  // 0x5c: u32
  set dwReserved2(value: number) {
    this.view.setUint32(92, value, true);
  }
}

/**
 * Windows.Win32.Media.Audio.DirectSound.DSBCAPS (size: 24)
 */
export interface DSBCAPS {
  /** u32 */
  dwSize: number;
  /** u32 */
  dwFlags: number;
  /** u32 */
  dwBufferBytes: number;
  /** u32 */
  dwUnlockTransferRate: number;
  /** u32 */
  dwPlayCpuOverhead: number;
}

export const sizeofDSBCAPS = 24;

export function allocDSBCAPS(data?: Partial<DSBCAPS>): Uint8Array {
  const buf = new Uint8Array(sizeofDSBCAPS);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.dwSize !== undefined) view.setUint32(0, Number(data.dwSize), true);
  // 0x04: u32
  if (data?.dwFlags !== undefined) view.setUint32(4, Number(data.dwFlags), true);
  // 0x08: u32
  if (data?.dwBufferBytes !== undefined) view.setUint32(8, Number(data.dwBufferBytes), true);
  // 0x0c: u32
  if (data?.dwUnlockTransferRate !== undefined) view.setUint32(12, Number(data.dwUnlockTransferRate), true);
  // 0x10: u32
  if (data?.dwPlayCpuOverhead !== undefined) view.setUint32(16, Number(data.dwPlayCpuOverhead), true);
  // 0x14: pad4
  return buf;
}

export class DSBCAPSView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get dwSize(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: u32
  get dwFlags(): number {
    return this.view.getUint32(4, true);
  }

  // 0x08: u32
  get dwBufferBytes(): number {
    return this.view.getUint32(8, true);
  }

  // 0x0c: u32
  get dwUnlockTransferRate(): number {
    return this.view.getUint32(12, true);
  }

  // 0x10: u32
  get dwPlayCpuOverhead(): number {
    return this.view.getUint32(16, true);
  }

  // 0x14: pad4

  // 0x00: u32
  set dwSize(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: u32
  set dwFlags(value: number) {
    this.view.setUint32(4, value, true);
  }

  // 0x08: u32
  set dwBufferBytes(value: number) {
    this.view.setUint32(8, value, true);
  }

  // 0x0c: u32
  set dwUnlockTransferRate(value: number) {
    this.view.setUint32(12, value, true);
  }

  // 0x10: u32
  set dwPlayCpuOverhead(value: number) {
    this.view.setUint32(16, value, true);
  }

  // 0x14: pad4
}

/**
 * Windows.Win32.Media.Audio.DirectSound.DSEFFECTDESC (size: 32)
 */
export interface DSEFFECTDESC {
  /** u32 */
  dwSize: number;
  /** u32 */
  dwFlags: number;
  /** System.Guid */
  guidDSFXClass: Uint8Array | Deno.PointerValue;
  /** usize */
  dwReserved1: bigint | number;
  /** usize */
  dwReserved2: bigint | number;
}

export const sizeofDSEFFECTDESC = 32;

export function allocDSEFFECTDESC(data?: Partial<DSEFFECTDESC>): Uint8Array {
  const buf = new Uint8Array(sizeofDSEFFECTDESC);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.dwSize !== undefined) view.setUint32(0, Number(data.dwSize), true);
  // 0x04: u32
  if (data?.dwFlags !== undefined) view.setUint32(4, Number(data.dwFlags), true);
  // 0x08: pointer
  if (data?.guidDSFXClass !== undefined) view.setBigUint64(8, data.guidDSFXClass === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.guidDSFXClass))), true);
  // 0x10: usize
  if (data?.dwReserved1 !== undefined) view.setBigUint64(16, BigInt(data.dwReserved1), true);
  // 0x18: usize
  if (data?.dwReserved2 !== undefined) view.setBigUint64(24, BigInt(data.dwReserved2), true);
  return buf;
}

export class DSEFFECTDESCView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get dwSize(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: u32
  get dwFlags(): number {
    return this.view.getUint32(4, true);
  }

  // 0x08: pointer
  get guidDSFXClass(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x10: usize
  get dwReserved1(): bigint | number {
    return Number(this.view.getBigUint64(16, true));
  }

  // 0x18: usize
  get dwReserved2(): bigint | number {
    return Number(this.view.getBigUint64(24, true));
  }

  // 0x00: u32
  set dwSize(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: u32
  set dwFlags(value: number) {
    this.view.setUint32(4, value, true);
  }

  // 0x08: pointer
  set guidDSFXClass(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x10: usize
  set dwReserved1(value: bigint | number) {
    this.view.setBigUint64(16, BigInt(value), true);
  }

  // 0x18: usize
  set dwReserved2(value: bigint | number) {
    this.view.setBigUint64(24, BigInt(value), true);
  }
}

/**
 * Windows.Win32.Media.Audio.DirectSound.DSCEFFECTDESC (size: 32)
 */
export interface DSCEFFECTDESC {
  /** u32 */
  dwSize: number;
  /** u32 */
  dwFlags: number;
  /** System.Guid */
  guidDSCFXClass: Uint8Array | Deno.PointerValue;
  /** System.Guid */
  guidDSCFXInstance: Uint8Array | Deno.PointerValue;
  /** u32 */
  dwReserved1: number;
  /** u32 */
  dwReserved2: number;
}

export const sizeofDSCEFFECTDESC = 32;

export function allocDSCEFFECTDESC(data?: Partial<DSCEFFECTDESC>): Uint8Array {
  const buf = new Uint8Array(sizeofDSCEFFECTDESC);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.dwSize !== undefined) view.setUint32(0, Number(data.dwSize), true);
  // 0x04: u32
  if (data?.dwFlags !== undefined) view.setUint32(4, Number(data.dwFlags), true);
  // 0x08: pointer
  if (data?.guidDSCFXClass !== undefined) view.setBigUint64(8, data.guidDSCFXClass === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.guidDSCFXClass))), true);
  // 0x10: pointer
  if (data?.guidDSCFXInstance !== undefined) view.setBigUint64(16, data.guidDSCFXInstance === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.guidDSCFXInstance))), true);
  // 0x18: u32
  if (data?.dwReserved1 !== undefined) view.setUint32(24, Number(data.dwReserved1), true);
  // 0x1c: u32
  if (data?.dwReserved2 !== undefined) view.setUint32(28, Number(data.dwReserved2), true);
  return buf;
}

export class DSCEFFECTDESCView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get dwSize(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: u32
  get dwFlags(): number {
    return this.view.getUint32(4, true);
  }

  // 0x08: pointer
  get guidDSCFXClass(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x10: pointer
  get guidDSCFXInstance(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(16, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x18: u32
  get dwReserved1(): number {
    return this.view.getUint32(24, true);
  }

  // 0x1c: u32
  get dwReserved2(): number {
    return this.view.getUint32(28, true);
  }

  // 0x00: u32
  set dwSize(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: u32
  set dwFlags(value: number) {
    this.view.setUint32(4, value, true);
  }

  // 0x08: pointer
  set guidDSCFXClass(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x10: pointer
  set guidDSCFXInstance(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(16, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x18: u32
  set dwReserved1(value: number) {
    this.view.setUint32(24, value, true);
  }

  // 0x1c: u32
  set dwReserved2(value: number) {
    this.view.setUint32(28, value, true);
  }
}

/**
 * Windows.Win32.Media.Audio.DirectSound.DSBUFFERDESC (size: 32)
 */
export interface DSBUFFERDESC {
  /** u32 */
  dwSize: number;
  /** u32 */
  dwFlags: number;
  /** u32 */
  dwBufferBytes: number;
  /** u32 */
  dwReserved: number;
  /** ptr */
  lpwfxFormat: Deno.PointerValue | Uint8Array;
  /** System.Guid */
  guid3DAlgorithm: Uint8Array | Deno.PointerValue;
}

export const sizeofDSBUFFERDESC = 32;

export function allocDSBUFFERDESC(data?: Partial<DSBUFFERDESC>): Uint8Array {
  const buf = new Uint8Array(sizeofDSBUFFERDESC);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.dwSize !== undefined) view.setUint32(0, Number(data.dwSize), true);
  // 0x04: u32
  if (data?.dwFlags !== undefined) view.setUint32(4, Number(data.dwFlags), true);
  // 0x08: u32
  if (data?.dwBufferBytes !== undefined) view.setUint32(8, Number(data.dwBufferBytes), true);
  // 0x0c: u32
  if (data?.dwReserved !== undefined) view.setUint32(12, Number(data.dwReserved), true);
  // 0x10: pointer
  if (data?.lpwfxFormat !== undefined) view.setBigUint64(16, data.lpwfxFormat === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.lpwfxFormat))), true);
  // 0x18: pointer
  if (data?.guid3DAlgorithm !== undefined) view.setBigUint64(24, data.guid3DAlgorithm === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.guid3DAlgorithm))), true);
  return buf;
}

export class DSBUFFERDESCView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get dwSize(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: u32
  get dwFlags(): number {
    return this.view.getUint32(4, true);
  }

  // 0x08: u32
  get dwBufferBytes(): number {
    return this.view.getUint32(8, true);
  }

  // 0x0c: u32
  get dwReserved(): number {
    return this.view.getUint32(12, true);
  }

  // 0x10: pointer
  get lpwfxFormat(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(16, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x18: pointer
  get guid3DAlgorithm(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(24, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: u32
  set dwSize(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: u32
  set dwFlags(value: number) {
    this.view.setUint32(4, value, true);
  }

  // 0x08: u32
  set dwBufferBytes(value: number) {
    this.view.setUint32(8, value, true);
  }

  // 0x0c: u32
  set dwReserved(value: number) {
    this.view.setUint32(12, value, true);
  }

  // 0x10: pointer
  set lpwfxFormat(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(16, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x18: pointer
  set guid3DAlgorithm(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(24, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.Media.Audio.DirectSound.DSBUFFERDESC1 (size: 24)
 */
export interface DSBUFFERDESC1 {
  /** u32 */
  dwSize: number;
  /** u32 */
  dwFlags: number;
  /** u32 */
  dwBufferBytes: number;
  /** u32 */
  dwReserved: number;
  /** ptr */
  lpwfxFormat: Deno.PointerValue | Uint8Array;
}

export const sizeofDSBUFFERDESC1 = 24;

export function allocDSBUFFERDESC1(data?: Partial<DSBUFFERDESC1>): Uint8Array {
  const buf = new Uint8Array(sizeofDSBUFFERDESC1);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.dwSize !== undefined) view.setUint32(0, Number(data.dwSize), true);
  // 0x04: u32
  if (data?.dwFlags !== undefined) view.setUint32(4, Number(data.dwFlags), true);
  // 0x08: u32
  if (data?.dwBufferBytes !== undefined) view.setUint32(8, Number(data.dwBufferBytes), true);
  // 0x0c: u32
  if (data?.dwReserved !== undefined) view.setUint32(12, Number(data.dwReserved), true);
  // 0x10: pointer
  if (data?.lpwfxFormat !== undefined) view.setBigUint64(16, data.lpwfxFormat === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.lpwfxFormat))), true);
  return buf;
}

export class DSBUFFERDESC1View {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get dwSize(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: u32
  get dwFlags(): number {
    return this.view.getUint32(4, true);
  }

  // 0x08: u32
  get dwBufferBytes(): number {
    return this.view.getUint32(8, true);
  }

  // 0x0c: u32
  get dwReserved(): number {
    return this.view.getUint32(12, true);
  }

  // 0x10: pointer
  get lpwfxFormat(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(16, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: u32
  set dwSize(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: u32
  set dwFlags(value: number) {
    this.view.setUint32(4, value, true);
  }

  // 0x08: u32
  set dwBufferBytes(value: number) {
    this.view.setUint32(8, value, true);
  }

  // 0x0c: u32
  set dwReserved(value: number) {
    this.view.setUint32(12, value, true);
  }

  // 0x10: pointer
  set lpwfxFormat(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(16, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.Graphics.Direct3D.D3DVECTOR (size: 16)
 */
export interface D3DVECTOR {
  /** f32 */
  x: number;
  /** f32 */
  y: number;
  /** f32 */
  z: number;
}

export const sizeofD3DVECTOR = 16;

export function allocD3DVECTOR(data?: Partial<D3DVECTOR>): Uint8Array {
  const buf = new Uint8Array(sizeofD3DVECTOR);
  const view = new DataView(buf.buffer);
  // 0x00: f32
  if (data?.x !== undefined) view.setFloat32(0, Number(data.x), true);
  // 0x04: f32
  if (data?.y !== undefined) view.setFloat32(4, Number(data.y), true);
  // 0x08: f32
  if (data?.z !== undefined) view.setFloat32(8, Number(data.z), true);
  // 0x0c: pad4
  return buf;
}

export class D3DVECTORView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: f32
  get x(): number {
    return this.view.getFloat32(0, true);
  }

  // 0x04: f32
  get y(): number {
    return this.view.getFloat32(4, true);
  }

  // 0x08: f32
  get z(): number {
    return this.view.getFloat32(8, true);
  }

  // 0x0c: pad4

  // 0x00: f32
  set x(value: number) {
    this.view.setFloat32(0, value, true);
  }

  // 0x04: f32
  set y(value: number) {
    this.view.setFloat32(4, value, true);
  }

  // 0x08: f32
  set z(value: number) {
    this.view.setFloat32(8, value, true);
  }

  // 0x0c: pad4
}

/**
 * Windows.Win32.Media.Audio.DirectSound.DS3DBUFFER (size: 56)
 */
export interface DS3DBUFFER {
  /** u32 */
  dwSize: number;
  /** Windows.Win32.Graphics.Direct3D.D3DVECTOR */
  vPosition: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.Graphics.Direct3D.D3DVECTOR */
  vVelocity: Uint8Array | Deno.PointerValue;
  /** u32 */
  dwInsideConeAngle: number;
  /** u32 */
  dwOutsideConeAngle: number;
  /** Windows.Win32.Graphics.Direct3D.D3DVECTOR */
  vConeOrientation: Uint8Array | Deno.PointerValue;
  /** i32 */
  lConeOutsideVolume: number;
  /** f32 */
  flMinDistance: number;
  /** f32 */
  flMaxDistance: number;
  /** u32 */
  dwMode: number;
}

export const sizeofDS3DBUFFER = 56;

export function allocDS3DBUFFER(data?: Partial<DS3DBUFFER>): Uint8Array {
  const buf = new Uint8Array(sizeofDS3DBUFFER);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.dwSize !== undefined) view.setUint32(0, Number(data.dwSize), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.vPosition !== undefined) view.setBigUint64(8, data.vPosition === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.vPosition))), true);
  // 0x10: pointer
  if (data?.vVelocity !== undefined) view.setBigUint64(16, data.vVelocity === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.vVelocity))), true);
  // 0x18: u32
  if (data?.dwInsideConeAngle !== undefined) view.setUint32(24, Number(data.dwInsideConeAngle), true);
  // 0x1c: u32
  if (data?.dwOutsideConeAngle !== undefined) view.setUint32(28, Number(data.dwOutsideConeAngle), true);
  // 0x20: pointer
  if (data?.vConeOrientation !== undefined) view.setBigUint64(32, data.vConeOrientation === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.vConeOrientation))), true);
  // 0x28: i32
  if (data?.lConeOutsideVolume !== undefined) view.setInt32(40, Number(data.lConeOutsideVolume), true);
  // 0x2c: f32
  if (data?.flMinDistance !== undefined) view.setFloat32(44, Number(data.flMinDistance), true);
  // 0x30: f32
  if (data?.flMaxDistance !== undefined) view.setFloat32(48, Number(data.flMaxDistance), true);
  // 0x34: u32
  if (data?.dwMode !== undefined) view.setUint32(52, Number(data.dwMode), true);
  return buf;
}

export class DS3DBUFFERView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get dwSize(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  get vPosition(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x10: pointer
  get vVelocity(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(16, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x18: u32
  get dwInsideConeAngle(): number {
    return this.view.getUint32(24, true);
  }

  // 0x1c: u32
  get dwOutsideConeAngle(): number {
    return this.view.getUint32(28, true);
  }

  // 0x20: pointer
  get vConeOrientation(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(32, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x28: i32
  get lConeOutsideVolume(): number {
    return this.view.getInt32(40, true);
  }

  // 0x2c: f32
  get flMinDistance(): number {
    return this.view.getFloat32(44, true);
  }

  // 0x30: f32
  get flMaxDistance(): number {
    return this.view.getFloat32(48, true);
  }

  // 0x34: u32
  get dwMode(): number {
    return this.view.getUint32(52, true);
  }

  // 0x00: u32
  set dwSize(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  set vPosition(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x10: pointer
  set vVelocity(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(16, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x18: u32
  set dwInsideConeAngle(value: number) {
    this.view.setUint32(24, value, true);
  }

  // 0x1c: u32
  set dwOutsideConeAngle(value: number) {
    this.view.setUint32(28, value, true);
  }

  // 0x20: pointer
  set vConeOrientation(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(32, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x28: i32
  set lConeOutsideVolume(value: number) {
    this.view.setInt32(40, value, true);
  }

  // 0x2c: f32
  set flMinDistance(value: number) {
    this.view.setFloat32(44, value, true);
  }

  // 0x30: f32
  set flMaxDistance(value: number) {
    this.view.setFloat32(48, value, true);
  }

  // 0x34: u32
  set dwMode(value: number) {
    this.view.setUint32(52, value, true);
  }
}

/**
 * Windows.Win32.Media.Audio.DirectSound.DS3DLISTENER (size: 56)
 */
export interface DS3DLISTENER {
  /** u32 */
  dwSize: number;
  /** Windows.Win32.Graphics.Direct3D.D3DVECTOR */
  vPosition: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.Graphics.Direct3D.D3DVECTOR */
  vVelocity: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.Graphics.Direct3D.D3DVECTOR */
  vOrientFront: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.Graphics.Direct3D.D3DVECTOR */
  vOrientTop: Uint8Array | Deno.PointerValue;
  /** f32 */
  flDistanceFactor: number;
  /** f32 */
  flRolloffFactor: number;
  /** f32 */
  flDopplerFactor: number;
}

export const sizeofDS3DLISTENER = 56;

export function allocDS3DLISTENER(data?: Partial<DS3DLISTENER>): Uint8Array {
  const buf = new Uint8Array(sizeofDS3DLISTENER);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.dwSize !== undefined) view.setUint32(0, Number(data.dwSize), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.vPosition !== undefined) view.setBigUint64(8, data.vPosition === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.vPosition))), true);
  // 0x10: pointer
  if (data?.vVelocity !== undefined) view.setBigUint64(16, data.vVelocity === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.vVelocity))), true);
  // 0x18: pointer
  if (data?.vOrientFront !== undefined) view.setBigUint64(24, data.vOrientFront === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.vOrientFront))), true);
  // 0x20: pointer
  if (data?.vOrientTop !== undefined) view.setBigUint64(32, data.vOrientTop === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.vOrientTop))), true);
  // 0x28: f32
  if (data?.flDistanceFactor !== undefined) view.setFloat32(40, Number(data.flDistanceFactor), true);
  // 0x2c: f32
  if (data?.flRolloffFactor !== undefined) view.setFloat32(44, Number(data.flRolloffFactor), true);
  // 0x30: f32
  if (data?.flDopplerFactor !== undefined) view.setFloat32(48, Number(data.flDopplerFactor), true);
  // 0x34: pad4
  return buf;
}

export class DS3DLISTENERView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get dwSize(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  get vPosition(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x10: pointer
  get vVelocity(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(16, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x18: pointer
  get vOrientFront(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(24, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x20: pointer
  get vOrientTop(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(32, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x28: f32
  get flDistanceFactor(): number {
    return this.view.getFloat32(40, true);
  }

  // 0x2c: f32
  get flRolloffFactor(): number {
    return this.view.getFloat32(44, true);
  }

  // 0x30: f32
  get flDopplerFactor(): number {
    return this.view.getFloat32(48, true);
  }

  // 0x34: pad4

  // 0x00: u32
  set dwSize(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  set vPosition(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x10: pointer
  set vVelocity(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(16, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x18: pointer
  set vOrientFront(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(24, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x20: pointer
  set vOrientTop(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(32, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x28: f32
  set flDistanceFactor(value: number) {
    this.view.setFloat32(40, value, true);
  }

  // 0x2c: f32
  set flRolloffFactor(value: number) {
    this.view.setFloat32(44, value, true);
  }

  // 0x30: f32
  set flDopplerFactor(value: number) {
    this.view.setFloat32(48, value, true);
  }

  // 0x34: pad4
}

/**
 * Windows.Win32.Media.Audio.DirectSound.DSCCAPS (size: 16)
 */
export interface DSCCAPS {
  /** u32 */
  dwSize: number;
  /** u32 */
  dwFlags: number;
  /** u32 */
  dwFormats: number;
  /** u32 */
  dwChannels: number;
}

export const sizeofDSCCAPS = 16;

export function allocDSCCAPS(data?: Partial<DSCCAPS>): Uint8Array {
  const buf = new Uint8Array(sizeofDSCCAPS);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.dwSize !== undefined) view.setUint32(0, Number(data.dwSize), true);
  // 0x04: u32
  if (data?.dwFlags !== undefined) view.setUint32(4, Number(data.dwFlags), true);
  // 0x08: u32
  if (data?.dwFormats !== undefined) view.setUint32(8, Number(data.dwFormats), true);
  // 0x0c: u32
  if (data?.dwChannels !== undefined) view.setUint32(12, Number(data.dwChannels), true);
  return buf;
}

export class DSCCAPSView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get dwSize(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: u32
  get dwFlags(): number {
    return this.view.getUint32(4, true);
  }

  // 0x08: u32
  get dwFormats(): number {
    return this.view.getUint32(8, true);
  }

  // 0x0c: u32
  get dwChannels(): number {
    return this.view.getUint32(12, true);
  }

  // 0x00: u32
  set dwSize(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: u32
  set dwFlags(value: number) {
    this.view.setUint32(4, value, true);
  }

  // 0x08: u32
  set dwFormats(value: number) {
    this.view.setUint32(8, value, true);
  }

  // 0x0c: u32
  set dwChannels(value: number) {
    this.view.setUint32(12, value, true);
  }
}

/**
 * Windows.Win32.Media.Audio.DirectSound.DSCBUFFERDESC1 (size: 24)
 */
export interface DSCBUFFERDESC1 {
  /** u32 */
  dwSize: number;
  /** u32 */
  dwFlags: number;
  /** u32 */
  dwBufferBytes: number;
  /** u32 */
  dwReserved: number;
  /** ptr */
  lpwfxFormat: Deno.PointerValue | Uint8Array;
}

export const sizeofDSCBUFFERDESC1 = 24;

export function allocDSCBUFFERDESC1(data?: Partial<DSCBUFFERDESC1>): Uint8Array {
  const buf = new Uint8Array(sizeofDSCBUFFERDESC1);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.dwSize !== undefined) view.setUint32(0, Number(data.dwSize), true);
  // 0x04: u32
  if (data?.dwFlags !== undefined) view.setUint32(4, Number(data.dwFlags), true);
  // 0x08: u32
  if (data?.dwBufferBytes !== undefined) view.setUint32(8, Number(data.dwBufferBytes), true);
  // 0x0c: u32
  if (data?.dwReserved !== undefined) view.setUint32(12, Number(data.dwReserved), true);
  // 0x10: pointer
  if (data?.lpwfxFormat !== undefined) view.setBigUint64(16, data.lpwfxFormat === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.lpwfxFormat))), true);
  return buf;
}

export class DSCBUFFERDESC1View {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get dwSize(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: u32
  get dwFlags(): number {
    return this.view.getUint32(4, true);
  }

  // 0x08: u32
  get dwBufferBytes(): number {
    return this.view.getUint32(8, true);
  }

  // 0x0c: u32
  get dwReserved(): number {
    return this.view.getUint32(12, true);
  }

  // 0x10: pointer
  get lpwfxFormat(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(16, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: u32
  set dwSize(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: u32
  set dwFlags(value: number) {
    this.view.setUint32(4, value, true);
  }

  // 0x08: u32
  set dwBufferBytes(value: number) {
    this.view.setUint32(8, value, true);
  }

  // 0x0c: u32
  set dwReserved(value: number) {
    this.view.setUint32(12, value, true);
  }

  // 0x10: pointer
  set lpwfxFormat(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(16, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.Media.Audio.DirectSound.DSCBUFFERDESC (size: 40)
 */
export interface DSCBUFFERDESC {
  /** u32 */
  dwSize: number;
  /** u32 */
  dwFlags: number;
  /** u32 */
  dwBufferBytes: number;
  /** u32 */
  dwReserved: number;
  /** ptr */
  lpwfxFormat: Deno.PointerValue | Uint8Array;
  /** u32 */
  dwFXCount: number;
  /** ptr */
  lpDSCFXDesc: Deno.PointerValue | Uint8Array;
}

export const sizeofDSCBUFFERDESC = 40;

export function allocDSCBUFFERDESC(data?: Partial<DSCBUFFERDESC>): Uint8Array {
  const buf = new Uint8Array(sizeofDSCBUFFERDESC);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.dwSize !== undefined) view.setUint32(0, Number(data.dwSize), true);
  // 0x04: u32
  if (data?.dwFlags !== undefined) view.setUint32(4, Number(data.dwFlags), true);
  // 0x08: u32
  if (data?.dwBufferBytes !== undefined) view.setUint32(8, Number(data.dwBufferBytes), true);
  // 0x0c: u32
  if (data?.dwReserved !== undefined) view.setUint32(12, Number(data.dwReserved), true);
  // 0x10: pointer
  if (data?.lpwfxFormat !== undefined) view.setBigUint64(16, data.lpwfxFormat === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.lpwfxFormat))), true);
  // 0x18: u32
  if (data?.dwFXCount !== undefined) view.setUint32(24, Number(data.dwFXCount), true);
  // 0x1c: pad4
  // 0x20: pointer
  if (data?.lpDSCFXDesc !== undefined) view.setBigUint64(32, data.lpDSCFXDesc === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.lpDSCFXDesc))), true);
  return buf;
}

export class DSCBUFFERDESCView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get dwSize(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: u32
  get dwFlags(): number {
    return this.view.getUint32(4, true);
  }

  // 0x08: u32
  get dwBufferBytes(): number {
    return this.view.getUint32(8, true);
  }

  // 0x0c: u32
  get dwReserved(): number {
    return this.view.getUint32(12, true);
  }

  // 0x10: pointer
  get lpwfxFormat(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(16, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x18: u32
  get dwFXCount(): number {
    return this.view.getUint32(24, true);
  }

  // 0x1c: pad4

  // 0x20: pointer
  get lpDSCFXDesc(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(32, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: u32
  set dwSize(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: u32
  set dwFlags(value: number) {
    this.view.setUint32(4, value, true);
  }

  // 0x08: u32
  set dwBufferBytes(value: number) {
    this.view.setUint32(8, value, true);
  }

  // 0x0c: u32
  set dwReserved(value: number) {
    this.view.setUint32(12, value, true);
  }

  // 0x10: pointer
  set lpwfxFormat(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(16, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x18: u32
  set dwFXCount(value: number) {
    this.view.setUint32(24, value, true);
  }

  // 0x1c: pad4

  // 0x20: pointer
  set lpDSCFXDesc(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(32, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.Media.Audio.DirectSound.DSCBCAPS (size: 16)
 */
export interface DSCBCAPS {
  /** u32 */
  dwSize: number;
  /** u32 */
  dwFlags: number;
  /** u32 */
  dwBufferBytes: number;
  /** u32 */
  dwReserved: number;
}

export const sizeofDSCBCAPS = 16;

export function allocDSCBCAPS(data?: Partial<DSCBCAPS>): Uint8Array {
  const buf = new Uint8Array(sizeofDSCBCAPS);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.dwSize !== undefined) view.setUint32(0, Number(data.dwSize), true);
  // 0x04: u32
  if (data?.dwFlags !== undefined) view.setUint32(4, Number(data.dwFlags), true);
  // 0x08: u32
  if (data?.dwBufferBytes !== undefined) view.setUint32(8, Number(data.dwBufferBytes), true);
  // 0x0c: u32
  if (data?.dwReserved !== undefined) view.setUint32(12, Number(data.dwReserved), true);
  return buf;
}

export class DSCBCAPSView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get dwSize(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: u32
  get dwFlags(): number {
    return this.view.getUint32(4, true);
  }

  // 0x08: u32
  get dwBufferBytes(): number {
    return this.view.getUint32(8, true);
  }

  // 0x0c: u32
  get dwReserved(): number {
    return this.view.getUint32(12, true);
  }

  // 0x00: u32
  set dwSize(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: u32
  set dwFlags(value: number) {
    this.view.setUint32(4, value, true);
  }

  // 0x08: u32
  set dwBufferBytes(value: number) {
    this.view.setUint32(8, value, true);
  }

  // 0x0c: u32
  set dwReserved(value: number) {
    this.view.setUint32(12, value, true);
  }
}

export type HANDLE = bigint | number;

/**
 * Windows.Win32.Media.Audio.DirectSound.DSBPOSITIONNOTIFY (size: 16)
 */
export interface DSBPOSITIONNOTIFY {
  /** u32 */
  dwOffset: number;
  /** Windows.Win32.Foundation.HANDLE */
  hEventNotify: Uint8Array | Deno.PointerValue;
}

export const sizeofDSBPOSITIONNOTIFY = 16;

export function allocDSBPOSITIONNOTIFY(data?: Partial<DSBPOSITIONNOTIFY>): Uint8Array {
  const buf = new Uint8Array(sizeofDSBPOSITIONNOTIFY);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.dwOffset !== undefined) view.setUint32(0, Number(data.dwOffset), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.hEventNotify !== undefined) view.setBigUint64(8, data.hEventNotify === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.hEventNotify))), true);
  return buf;
}

export class DSBPOSITIONNOTIFYView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get dwOffset(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  get hEventNotify(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: u32
  set dwOffset(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  set hEventNotify(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.Media.Audio.DirectSound.DSFXGargle (size: 8)
 */
export interface DSFXGargle {
  /** u32 */
  dwRateHz: number;
  /** u32 */
  dwWaveShape: number;
}

export const sizeofDSFXGargle = 8;

export function allocDSFXGargle(data?: Partial<DSFXGargle>): Uint8Array {
  const buf = new Uint8Array(sizeofDSFXGargle);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.dwRateHz !== undefined) view.setUint32(0, Number(data.dwRateHz), true);
  // 0x04: u32
  if (data?.dwWaveShape !== undefined) view.setUint32(4, Number(data.dwWaveShape), true);
  return buf;
}

export class DSFXGargleView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get dwRateHz(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: u32
  get dwWaveShape(): number {
    return this.view.getUint32(4, true);
  }

  // 0x00: u32
  set dwRateHz(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: u32
  set dwWaveShape(value: number) {
    this.view.setUint32(4, value, true);
  }
}

/**
 * Windows.Win32.Media.Audio.DirectSound.DSFXChorus (size: 32)
 */
export interface DSFXChorus {
  /** f32 */
  fWetDryMix: number;
  /** f32 */
  fDepth: number;
  /** f32 */
  fFeedback: number;
  /** f32 */
  fFrequency: number;
  /** i32 */
  lWaveform: number;
  /** f32 */
  fDelay: number;
  /** i32 */
  lPhase: number;
}

export const sizeofDSFXChorus = 32;

export function allocDSFXChorus(data?: Partial<DSFXChorus>): Uint8Array {
  const buf = new Uint8Array(sizeofDSFXChorus);
  const view = new DataView(buf.buffer);
  // 0x00: f32
  if (data?.fWetDryMix !== undefined) view.setFloat32(0, Number(data.fWetDryMix), true);
  // 0x04: f32
  if (data?.fDepth !== undefined) view.setFloat32(4, Number(data.fDepth), true);
  // 0x08: f32
  if (data?.fFeedback !== undefined) view.setFloat32(8, Number(data.fFeedback), true);
  // 0x0c: f32
  if (data?.fFrequency !== undefined) view.setFloat32(12, Number(data.fFrequency), true);
  // 0x10: i32
  if (data?.lWaveform !== undefined) view.setInt32(16, Number(data.lWaveform), true);
  // 0x14: f32
  if (data?.fDelay !== undefined) view.setFloat32(20, Number(data.fDelay), true);
  // 0x18: i32
  if (data?.lPhase !== undefined) view.setInt32(24, Number(data.lPhase), true);
  // 0x1c: pad4
  return buf;
}

export class DSFXChorusView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: f32
  get fWetDryMix(): number {
    return this.view.getFloat32(0, true);
  }

  // 0x04: f32
  get fDepth(): number {
    return this.view.getFloat32(4, true);
  }

  // 0x08: f32
  get fFeedback(): number {
    return this.view.getFloat32(8, true);
  }

  // 0x0c: f32
  get fFrequency(): number {
    return this.view.getFloat32(12, true);
  }

  // 0x10: i32
  get lWaveform(): number {
    return this.view.getInt32(16, true);
  }

  // 0x14: f32
  get fDelay(): number {
    return this.view.getFloat32(20, true);
  }

  // 0x18: i32
  get lPhase(): number {
    return this.view.getInt32(24, true);
  }

  // 0x1c: pad4

  // 0x00: f32
  set fWetDryMix(value: number) {
    this.view.setFloat32(0, value, true);
  }

  // 0x04: f32
  set fDepth(value: number) {
    this.view.setFloat32(4, value, true);
  }

  // 0x08: f32
  set fFeedback(value: number) {
    this.view.setFloat32(8, value, true);
  }

  // 0x0c: f32
  set fFrequency(value: number) {
    this.view.setFloat32(12, value, true);
  }

  // 0x10: i32
  set lWaveform(value: number) {
    this.view.setInt32(16, value, true);
  }

  // 0x14: f32
  set fDelay(value: number) {
    this.view.setFloat32(20, value, true);
  }

  // 0x18: i32
  set lPhase(value: number) {
    this.view.setInt32(24, value, true);
  }

  // 0x1c: pad4
}

/**
 * Windows.Win32.Media.Audio.DirectSound.DSFXFlanger (size: 32)
 */
export interface DSFXFlanger {
  /** f32 */
  fWetDryMix: number;
  /** f32 */
  fDepth: number;
  /** f32 */
  fFeedback: number;
  /** f32 */
  fFrequency: number;
  /** i32 */
  lWaveform: number;
  /** f32 */
  fDelay: number;
  /** i32 */
  lPhase: number;
}

export const sizeofDSFXFlanger = 32;

export function allocDSFXFlanger(data?: Partial<DSFXFlanger>): Uint8Array {
  const buf = new Uint8Array(sizeofDSFXFlanger);
  const view = new DataView(buf.buffer);
  // 0x00: f32
  if (data?.fWetDryMix !== undefined) view.setFloat32(0, Number(data.fWetDryMix), true);
  // 0x04: f32
  if (data?.fDepth !== undefined) view.setFloat32(4, Number(data.fDepth), true);
  // 0x08: f32
  if (data?.fFeedback !== undefined) view.setFloat32(8, Number(data.fFeedback), true);
  // 0x0c: f32
  if (data?.fFrequency !== undefined) view.setFloat32(12, Number(data.fFrequency), true);
  // 0x10: i32
  if (data?.lWaveform !== undefined) view.setInt32(16, Number(data.lWaveform), true);
  // 0x14: f32
  if (data?.fDelay !== undefined) view.setFloat32(20, Number(data.fDelay), true);
  // 0x18: i32
  if (data?.lPhase !== undefined) view.setInt32(24, Number(data.lPhase), true);
  // 0x1c: pad4
  return buf;
}

export class DSFXFlangerView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: f32
  get fWetDryMix(): number {
    return this.view.getFloat32(0, true);
  }

  // 0x04: f32
  get fDepth(): number {
    return this.view.getFloat32(4, true);
  }

  // 0x08: f32
  get fFeedback(): number {
    return this.view.getFloat32(8, true);
  }

  // 0x0c: f32
  get fFrequency(): number {
    return this.view.getFloat32(12, true);
  }

  // 0x10: i32
  get lWaveform(): number {
    return this.view.getInt32(16, true);
  }

  // 0x14: f32
  get fDelay(): number {
    return this.view.getFloat32(20, true);
  }

  // 0x18: i32
  get lPhase(): number {
    return this.view.getInt32(24, true);
  }

  // 0x1c: pad4

  // 0x00: f32
  set fWetDryMix(value: number) {
    this.view.setFloat32(0, value, true);
  }

  // 0x04: f32
  set fDepth(value: number) {
    this.view.setFloat32(4, value, true);
  }

  // 0x08: f32
  set fFeedback(value: number) {
    this.view.setFloat32(8, value, true);
  }

  // 0x0c: f32
  set fFrequency(value: number) {
    this.view.setFloat32(12, value, true);
  }

  // 0x10: i32
  set lWaveform(value: number) {
    this.view.setInt32(16, value, true);
  }

  // 0x14: f32
  set fDelay(value: number) {
    this.view.setFloat32(20, value, true);
  }

  // 0x18: i32
  set lPhase(value: number) {
    this.view.setInt32(24, value, true);
  }

  // 0x1c: pad4
}

/**
 * Windows.Win32.Media.Audio.DirectSound.DSFXEcho (size: 24)
 */
export interface DSFXEcho {
  /** f32 */
  fWetDryMix: number;
  /** f32 */
  fFeedback: number;
  /** f32 */
  fLeftDelay: number;
  /** f32 */
  fRightDelay: number;
  /** i32 */
  lPanDelay: number;
}

export const sizeofDSFXEcho = 24;

export function allocDSFXEcho(data?: Partial<DSFXEcho>): Uint8Array {
  const buf = new Uint8Array(sizeofDSFXEcho);
  const view = new DataView(buf.buffer);
  // 0x00: f32
  if (data?.fWetDryMix !== undefined) view.setFloat32(0, Number(data.fWetDryMix), true);
  // 0x04: f32
  if (data?.fFeedback !== undefined) view.setFloat32(4, Number(data.fFeedback), true);
  // 0x08: f32
  if (data?.fLeftDelay !== undefined) view.setFloat32(8, Number(data.fLeftDelay), true);
  // 0x0c: f32
  if (data?.fRightDelay !== undefined) view.setFloat32(12, Number(data.fRightDelay), true);
  // 0x10: i32
  if (data?.lPanDelay !== undefined) view.setInt32(16, Number(data.lPanDelay), true);
  // 0x14: pad4
  return buf;
}

export class DSFXEchoView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: f32
  get fWetDryMix(): number {
    return this.view.getFloat32(0, true);
  }

  // 0x04: f32
  get fFeedback(): number {
    return this.view.getFloat32(4, true);
  }

  // 0x08: f32
  get fLeftDelay(): number {
    return this.view.getFloat32(8, true);
  }

  // 0x0c: f32
  get fRightDelay(): number {
    return this.view.getFloat32(12, true);
  }

  // 0x10: i32
  get lPanDelay(): number {
    return this.view.getInt32(16, true);
  }

  // 0x14: pad4

  // 0x00: f32
  set fWetDryMix(value: number) {
    this.view.setFloat32(0, value, true);
  }

  // 0x04: f32
  set fFeedback(value: number) {
    this.view.setFloat32(4, value, true);
  }

  // 0x08: f32
  set fLeftDelay(value: number) {
    this.view.setFloat32(8, value, true);
  }

  // 0x0c: f32
  set fRightDelay(value: number) {
    this.view.setFloat32(12, value, true);
  }

  // 0x10: i32
  set lPanDelay(value: number) {
    this.view.setInt32(16, value, true);
  }

  // 0x14: pad4
}

/**
 * Windows.Win32.Media.Audio.DirectSound.DSFXDistortion (size: 24)
 */
export interface DSFXDistortion {
  /** f32 */
  fGain: number;
  /** f32 */
  fEdge: number;
  /** f32 */
  fPostEQCenterFrequency: number;
  /** f32 */
  fPostEQBandwidth: number;
  /** f32 */
  fPreLowpassCutoff: number;
}

export const sizeofDSFXDistortion = 24;

export function allocDSFXDistortion(data?: Partial<DSFXDistortion>): Uint8Array {
  const buf = new Uint8Array(sizeofDSFXDistortion);
  const view = new DataView(buf.buffer);
  // 0x00: f32
  if (data?.fGain !== undefined) view.setFloat32(0, Number(data.fGain), true);
  // 0x04: f32
  if (data?.fEdge !== undefined) view.setFloat32(4, Number(data.fEdge), true);
  // 0x08: f32
  if (data?.fPostEQCenterFrequency !== undefined) view.setFloat32(8, Number(data.fPostEQCenterFrequency), true);
  // 0x0c: f32
  if (data?.fPostEQBandwidth !== undefined) view.setFloat32(12, Number(data.fPostEQBandwidth), true);
  // 0x10: f32
  if (data?.fPreLowpassCutoff !== undefined) view.setFloat32(16, Number(data.fPreLowpassCutoff), true);
  // 0x14: pad4
  return buf;
}

export class DSFXDistortionView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: f32
  get fGain(): number {
    return this.view.getFloat32(0, true);
  }

  // 0x04: f32
  get fEdge(): number {
    return this.view.getFloat32(4, true);
  }

  // 0x08: f32
  get fPostEQCenterFrequency(): number {
    return this.view.getFloat32(8, true);
  }

  // 0x0c: f32
  get fPostEQBandwidth(): number {
    return this.view.getFloat32(12, true);
  }

  // 0x10: f32
  get fPreLowpassCutoff(): number {
    return this.view.getFloat32(16, true);
  }

  // 0x14: pad4

  // 0x00: f32
  set fGain(value: number) {
    this.view.setFloat32(0, value, true);
  }

  // 0x04: f32
  set fEdge(value: number) {
    this.view.setFloat32(4, value, true);
  }

  // 0x08: f32
  set fPostEQCenterFrequency(value: number) {
    this.view.setFloat32(8, value, true);
  }

  // 0x0c: f32
  set fPostEQBandwidth(value: number) {
    this.view.setFloat32(12, value, true);
  }

  // 0x10: f32
  set fPreLowpassCutoff(value: number) {
    this.view.setFloat32(16, value, true);
  }

  // 0x14: pad4
}

/**
 * Windows.Win32.Media.Audio.DirectSound.DSFXCompressor (size: 24)
 */
export interface DSFXCompressor {
  /** f32 */
  fGain: number;
  /** f32 */
  fAttack: number;
  /** f32 */
  fRelease: number;
  /** f32 */
  fThreshold: number;
  /** f32 */
  fRatio: number;
  /** f32 */
  fPredelay: number;
}

export const sizeofDSFXCompressor = 24;

export function allocDSFXCompressor(data?: Partial<DSFXCompressor>): Uint8Array {
  const buf = new Uint8Array(sizeofDSFXCompressor);
  const view = new DataView(buf.buffer);
  // 0x00: f32
  if (data?.fGain !== undefined) view.setFloat32(0, Number(data.fGain), true);
  // 0x04: f32
  if (data?.fAttack !== undefined) view.setFloat32(4, Number(data.fAttack), true);
  // 0x08: f32
  if (data?.fRelease !== undefined) view.setFloat32(8, Number(data.fRelease), true);
  // 0x0c: f32
  if (data?.fThreshold !== undefined) view.setFloat32(12, Number(data.fThreshold), true);
  // 0x10: f32
  if (data?.fRatio !== undefined) view.setFloat32(16, Number(data.fRatio), true);
  // 0x14: f32
  if (data?.fPredelay !== undefined) view.setFloat32(20, Number(data.fPredelay), true);
  return buf;
}

export class DSFXCompressorView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: f32
  get fGain(): number {
    return this.view.getFloat32(0, true);
  }

  // 0x04: f32
  get fAttack(): number {
    return this.view.getFloat32(4, true);
  }

  // 0x08: f32
  get fRelease(): number {
    return this.view.getFloat32(8, true);
  }

  // 0x0c: f32
  get fThreshold(): number {
    return this.view.getFloat32(12, true);
  }

  // 0x10: f32
  get fRatio(): number {
    return this.view.getFloat32(16, true);
  }

  // 0x14: f32
  get fPredelay(): number {
    return this.view.getFloat32(20, true);
  }

  // 0x00: f32
  set fGain(value: number) {
    this.view.setFloat32(0, value, true);
  }

  // 0x04: f32
  set fAttack(value: number) {
    this.view.setFloat32(4, value, true);
  }

  // 0x08: f32
  set fRelease(value: number) {
    this.view.setFloat32(8, value, true);
  }

  // 0x0c: f32
  set fThreshold(value: number) {
    this.view.setFloat32(12, value, true);
  }

  // 0x10: f32
  set fRatio(value: number) {
    this.view.setFloat32(16, value, true);
  }

  // 0x14: f32
  set fPredelay(value: number) {
    this.view.setFloat32(20, value, true);
  }
}

/**
 * Windows.Win32.Media.Audio.DirectSound.DSFXParamEq (size: 16)
 */
export interface DSFXParamEq {
  /** f32 */
  fCenter: number;
  /** f32 */
  fBandwidth: number;
  /** f32 */
  fGain: number;
}

export const sizeofDSFXParamEq = 16;

export function allocDSFXParamEq(data?: Partial<DSFXParamEq>): Uint8Array {
  const buf = new Uint8Array(sizeofDSFXParamEq);
  const view = new DataView(buf.buffer);
  // 0x00: f32
  if (data?.fCenter !== undefined) view.setFloat32(0, Number(data.fCenter), true);
  // 0x04: f32
  if (data?.fBandwidth !== undefined) view.setFloat32(4, Number(data.fBandwidth), true);
  // 0x08: f32
  if (data?.fGain !== undefined) view.setFloat32(8, Number(data.fGain), true);
  // 0x0c: pad4
  return buf;
}

export class DSFXParamEqView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: f32
  get fCenter(): number {
    return this.view.getFloat32(0, true);
  }

  // 0x04: f32
  get fBandwidth(): number {
    return this.view.getFloat32(4, true);
  }

  // 0x08: f32
  get fGain(): number {
    return this.view.getFloat32(8, true);
  }

  // 0x0c: pad4

  // 0x00: f32
  set fCenter(value: number) {
    this.view.setFloat32(0, value, true);
  }

  // 0x04: f32
  set fBandwidth(value: number) {
    this.view.setFloat32(4, value, true);
  }

  // 0x08: f32
  set fGain(value: number) {
    this.view.setFloat32(8, value, true);
  }

  // 0x0c: pad4
}

/**
 * Windows.Win32.Media.Audio.DirectSound.DSFXI3DL2Reverb (size: 48)
 */
export interface DSFXI3DL2Reverb {
  /** i32 */
  lRoom: number;
  /** i32 */
  lRoomHF: number;
  /** f32 */
  flRoomRolloffFactor: number;
  /** f32 */
  flDecayTime: number;
  /** f32 */
  flDecayHFRatio: number;
  /** i32 */
  lReflections: number;
  /** f32 */
  flReflectionsDelay: number;
  /** i32 */
  lReverb: number;
  /** f32 */
  flReverbDelay: number;
  /** f32 */
  flDiffusion: number;
  /** f32 */
  flDensity: number;
  /** f32 */
  flHFReference: number;
}

export const sizeofDSFXI3DL2Reverb = 48;

export function allocDSFXI3DL2Reverb(data?: Partial<DSFXI3DL2Reverb>): Uint8Array {
  const buf = new Uint8Array(sizeofDSFXI3DL2Reverb);
  const view = new DataView(buf.buffer);
  // 0x00: i32
  if (data?.lRoom !== undefined) view.setInt32(0, Number(data.lRoom), true);
  // 0x04: i32
  if (data?.lRoomHF !== undefined) view.setInt32(4, Number(data.lRoomHF), true);
  // 0x08: f32
  if (data?.flRoomRolloffFactor !== undefined) view.setFloat32(8, Number(data.flRoomRolloffFactor), true);
  // 0x0c: f32
  if (data?.flDecayTime !== undefined) view.setFloat32(12, Number(data.flDecayTime), true);
  // 0x10: f32
  if (data?.flDecayHFRatio !== undefined) view.setFloat32(16, Number(data.flDecayHFRatio), true);
  // 0x14: i32
  if (data?.lReflections !== undefined) view.setInt32(20, Number(data.lReflections), true);
  // 0x18: f32
  if (data?.flReflectionsDelay !== undefined) view.setFloat32(24, Number(data.flReflectionsDelay), true);
  // 0x1c: i32
  if (data?.lReverb !== undefined) view.setInt32(28, Number(data.lReverb), true);
  // 0x20: f32
  if (data?.flReverbDelay !== undefined) view.setFloat32(32, Number(data.flReverbDelay), true);
  // 0x24: f32
  if (data?.flDiffusion !== undefined) view.setFloat32(36, Number(data.flDiffusion), true);
  // 0x28: f32
  if (data?.flDensity !== undefined) view.setFloat32(40, Number(data.flDensity), true);
  // 0x2c: f32
  if (data?.flHFReference !== undefined) view.setFloat32(44, Number(data.flHFReference), true);
  return buf;
}

export class DSFXI3DL2ReverbView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: i32
  get lRoom(): number {
    return this.view.getInt32(0, true);
  }

  // 0x04: i32
  get lRoomHF(): number {
    return this.view.getInt32(4, true);
  }

  // 0x08: f32
  get flRoomRolloffFactor(): number {
    return this.view.getFloat32(8, true);
  }

  // 0x0c: f32
  get flDecayTime(): number {
    return this.view.getFloat32(12, true);
  }

  // 0x10: f32
  get flDecayHFRatio(): number {
    return this.view.getFloat32(16, true);
  }

  // 0x14: i32
  get lReflections(): number {
    return this.view.getInt32(20, true);
  }

  // 0x18: f32
  get flReflectionsDelay(): number {
    return this.view.getFloat32(24, true);
  }

  // 0x1c: i32
  get lReverb(): number {
    return this.view.getInt32(28, true);
  }

  // 0x20: f32
  get flReverbDelay(): number {
    return this.view.getFloat32(32, true);
  }

  // 0x24: f32
  get flDiffusion(): number {
    return this.view.getFloat32(36, true);
  }

  // 0x28: f32
  get flDensity(): number {
    return this.view.getFloat32(40, true);
  }

  // 0x2c: f32
  get flHFReference(): number {
    return this.view.getFloat32(44, true);
  }

  // 0x00: i32
  set lRoom(value: number) {
    this.view.setInt32(0, value, true);
  }

  // 0x04: i32
  set lRoomHF(value: number) {
    this.view.setInt32(4, value, true);
  }

  // 0x08: f32
  set flRoomRolloffFactor(value: number) {
    this.view.setFloat32(8, value, true);
  }

  // 0x0c: f32
  set flDecayTime(value: number) {
    this.view.setFloat32(12, value, true);
  }

  // 0x10: f32
  set flDecayHFRatio(value: number) {
    this.view.setFloat32(16, value, true);
  }

  // 0x14: i32
  set lReflections(value: number) {
    this.view.setInt32(20, value, true);
  }

  // 0x18: f32
  set flReflectionsDelay(value: number) {
    this.view.setFloat32(24, value, true);
  }

  // 0x1c: i32
  set lReverb(value: number) {
    this.view.setInt32(28, value, true);
  }

  // 0x20: f32
  set flReverbDelay(value: number) {
    this.view.setFloat32(32, value, true);
  }

  // 0x24: f32
  set flDiffusion(value: number) {
    this.view.setFloat32(36, value, true);
  }

  // 0x28: f32
  set flDensity(value: number) {
    this.view.setFloat32(40, value, true);
  }

  // 0x2c: f32
  set flHFReference(value: number) {
    this.view.setFloat32(44, value, true);
  }
}

/**
 * Windows.Win32.Media.Audio.DirectSound.DSFXWavesReverb (size: 16)
 */
export interface DSFXWavesReverb {
  /** f32 */
  fInGain: number;
  /** f32 */
  fReverbMix: number;
  /** f32 */
  fReverbTime: number;
  /** f32 */
  fHighFreqRTRatio: number;
}

export const sizeofDSFXWavesReverb = 16;

export function allocDSFXWavesReverb(data?: Partial<DSFXWavesReverb>): Uint8Array {
  const buf = new Uint8Array(sizeofDSFXWavesReverb);
  const view = new DataView(buf.buffer);
  // 0x00: f32
  if (data?.fInGain !== undefined) view.setFloat32(0, Number(data.fInGain), true);
  // 0x04: f32
  if (data?.fReverbMix !== undefined) view.setFloat32(4, Number(data.fReverbMix), true);
  // 0x08: f32
  if (data?.fReverbTime !== undefined) view.setFloat32(8, Number(data.fReverbTime), true);
  // 0x0c: f32
  if (data?.fHighFreqRTRatio !== undefined) view.setFloat32(12, Number(data.fHighFreqRTRatio), true);
  return buf;
}

export class DSFXWavesReverbView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: f32
  get fInGain(): number {
    return this.view.getFloat32(0, true);
  }

  // 0x04: f32
  get fReverbMix(): number {
    return this.view.getFloat32(4, true);
  }

  // 0x08: f32
  get fReverbTime(): number {
    return this.view.getFloat32(8, true);
  }

  // 0x0c: f32
  get fHighFreqRTRatio(): number {
    return this.view.getFloat32(12, true);
  }

  // 0x00: f32
  set fInGain(value: number) {
    this.view.setFloat32(0, value, true);
  }

  // 0x04: f32
  set fReverbMix(value: number) {
    this.view.setFloat32(4, value, true);
  }

  // 0x08: f32
  set fReverbTime(value: number) {
    this.view.setFloat32(8, value, true);
  }

  // 0x0c: f32
  set fHighFreqRTRatio(value: number) {
    this.view.setFloat32(12, value, true);
  }
}

export type BOOL = number;

/**
 * Windows.Win32.Media.Audio.DirectSound.DSCFXAec (size: 16)
 */
export interface DSCFXAec {
  /** Windows.Win32.Foundation.BOOL */
  fEnable: boolean;
  /** Windows.Win32.Foundation.BOOL */
  fNoiseFill: boolean;
  /** u32 */
  dwMode: number;
}

export const sizeofDSCFXAec = 16;

export function allocDSCFXAec(data?: Partial<DSCFXAec>): Uint8Array {
  const buf = new Uint8Array(sizeofDSCFXAec);
  const view = new DataView(buf.buffer);
  // 0x00: i32
  if (data?.fEnable !== undefined) view.setInt32(0, Number(data.fEnable), true);
  // 0x04: i32
  if (data?.fNoiseFill !== undefined) view.setInt32(4, Number(data.fNoiseFill), true);
  // 0x08: u32
  if (data?.dwMode !== undefined) view.setUint32(8, Number(data.dwMode), true);
  // 0x0c: pad4
  return buf;
}

export class DSCFXAecView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: i32
  get fEnable(): number {
    return this.view.getInt32(0, true);
  }

  // 0x04: i32
  get fNoiseFill(): number {
    return this.view.getInt32(4, true);
  }

  // 0x08: u32
  get dwMode(): number {
    return this.view.getUint32(8, true);
  }

  // 0x0c: pad4

  // 0x00: i32
  set fEnable(value: number) {
    this.view.setInt32(0, value, true);
  }

  // 0x04: i32
  set fNoiseFill(value: number) {
    this.view.setInt32(4, value, true);
  }

  // 0x08: u32
  set dwMode(value: number) {
    this.view.setUint32(8, value, true);
  }

  // 0x0c: pad4
}

/**
 * Windows.Win32.Media.Audio.DirectSound.DSCFXNoiseSuppress (size: 8)
 */
export interface DSCFXNoiseSuppress {
  /** Windows.Win32.Foundation.BOOL */
  fEnable: boolean;
}

export const sizeofDSCFXNoiseSuppress = 8;

export function allocDSCFXNoiseSuppress(data?: Partial<DSCFXNoiseSuppress>): Uint8Array {
  const buf = new Uint8Array(sizeofDSCFXNoiseSuppress);
  const view = new DataView(buf.buffer);
  // 0x00: i32
  if (data?.fEnable !== undefined) view.setInt32(0, Number(data.fEnable), true);
  // 0x04: pad4
  return buf;
}

export class DSCFXNoiseSuppressView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: i32
  get fEnable(): number {
    return this.view.getInt32(0, true);
  }

  // 0x04: pad4

  // 0x00: i32
  set fEnable(value: number) {
    this.view.setInt32(0, value, true);
  }

  // 0x04: pad4
}

export type HRESULT = number;

export type HWND = bigint | number;

// Native Libraries

try {
  var libDSOUND_dll = Deno.dlopen("DSOUND.dll", {
    DirectSoundCreate: {
      parameters: ["pointer", "pointer", "pointer"],
      result: "pointer",
    },
    DirectSoundEnumerateA: {
      parameters: ["pointer", "pointer"],
      result: "pointer",
    },
    DirectSoundEnumerateW: {
      parameters: ["pointer", "pointer"],
      result: "pointer",
    },
    DirectSoundCaptureCreate: {
      parameters: ["pointer", "pointer", "pointer"],
      result: "pointer",
    },
    DirectSoundCaptureEnumerateA: {
      parameters: ["pointer", "pointer"],
      result: "pointer",
    },
    DirectSoundCaptureEnumerateW: {
      parameters: ["pointer", "pointer"],
      result: "pointer",
    },
    DirectSoundCreate8: {
      parameters: ["pointer", "pointer", "pointer"],
      result: "pointer",
    },
    DirectSoundCaptureCreate8: {
      parameters: ["pointer", "pointer", "pointer"],
      result: "pointer",
    },
    DirectSoundFullDuplexCreate: {
      parameters: ["pointer", "pointer", "pointer", "pointer", "pointer", "u32", "pointer", "pointer", "pointer", "pointer"],
      result: "pointer",
    },
    GetDeviceID: {
      parameters: ["pointer", "pointer"],
      result: "pointer",
    },
  }).symbols;
} catch(e) { /* ignore */ }

// Symbols

export function DirectSoundCreate(
  pcGuidDevice: Deno.PointerValue | Uint8Array /* ptr */,
  ppDS: Deno.PointerValue | Uint8Array /* ptr */,
  pUnkOuter: Uint8Array | Deno.PointerValue /* Windows.Win32.System.Com.IUnknown */,
): Deno.PointerValue /* Windows.Win32.Foundation.HRESULT */ {
  return libDSOUND_dll.DirectSoundCreate(util.toPointer(pcGuidDevice), util.toPointer(ppDS), util.toPointer(pUnkOuter));
}

export function DirectSoundEnumerateA(
  pDSEnumCallback: Uint8Array | Deno.PointerValue /* Windows.Win32.Media.Audio.DirectSound.LPDSENUMCALLBACKA */,
  pContext: Deno.PointerValue | Uint8Array /* ptr */,
): Deno.PointerValue /* Windows.Win32.Foundation.HRESULT */ {
  return libDSOUND_dll.DirectSoundEnumerateA(util.toPointer(pDSEnumCallback), util.toPointer(pContext));
}

export function DirectSoundEnumerateW(
  pDSEnumCallback: Uint8Array | Deno.PointerValue /* Windows.Win32.Media.Audio.DirectSound.LPDSENUMCALLBACKW */,
  pContext: Deno.PointerValue | Uint8Array /* ptr */,
): Deno.PointerValue /* Windows.Win32.Foundation.HRESULT */ {
  return libDSOUND_dll.DirectSoundEnumerateW(util.toPointer(pDSEnumCallback), util.toPointer(pContext));
}

export function DirectSoundCaptureCreate(
  pcGuidDevice: Deno.PointerValue | Uint8Array /* ptr */,
  ppDSC: Deno.PointerValue | Uint8Array /* ptr */,
  pUnkOuter: Uint8Array | Deno.PointerValue /* Windows.Win32.System.Com.IUnknown */,
): Deno.PointerValue /* Windows.Win32.Foundation.HRESULT */ {
  return libDSOUND_dll.DirectSoundCaptureCreate(util.toPointer(pcGuidDevice), util.toPointer(ppDSC), util.toPointer(pUnkOuter));
}

export function DirectSoundCaptureEnumerateA(
  pDSEnumCallback: Uint8Array | Deno.PointerValue /* Windows.Win32.Media.Audio.DirectSound.LPDSENUMCALLBACKA */,
  pContext: Deno.PointerValue | Uint8Array /* ptr */,
): Deno.PointerValue /* Windows.Win32.Foundation.HRESULT */ {
  return libDSOUND_dll.DirectSoundCaptureEnumerateA(util.toPointer(pDSEnumCallback), util.toPointer(pContext));
}

export function DirectSoundCaptureEnumerateW(
  pDSEnumCallback: Uint8Array | Deno.PointerValue /* Windows.Win32.Media.Audio.DirectSound.LPDSENUMCALLBACKW */,
  pContext: Deno.PointerValue | Uint8Array /* ptr */,
): Deno.PointerValue /* Windows.Win32.Foundation.HRESULT */ {
  return libDSOUND_dll.DirectSoundCaptureEnumerateW(util.toPointer(pDSEnumCallback), util.toPointer(pContext));
}

export function DirectSoundCreate8(
  pcGuidDevice: Deno.PointerValue | Uint8Array /* ptr */,
  ppDS8: Deno.PointerValue | Uint8Array /* ptr */,
  pUnkOuter: Uint8Array | Deno.PointerValue /* Windows.Win32.System.Com.IUnknown */,
): Deno.PointerValue /* Windows.Win32.Foundation.HRESULT */ {
  return libDSOUND_dll.DirectSoundCreate8(util.toPointer(pcGuidDevice), util.toPointer(ppDS8), util.toPointer(pUnkOuter));
}

export function DirectSoundCaptureCreate8(
  pcGuidDevice: Deno.PointerValue | Uint8Array /* ptr */,
  ppDSC8: Deno.PointerValue | Uint8Array /* ptr */,
  pUnkOuter: Uint8Array | Deno.PointerValue /* Windows.Win32.System.Com.IUnknown */,
): Deno.PointerValue /* Windows.Win32.Foundation.HRESULT */ {
  return libDSOUND_dll.DirectSoundCaptureCreate8(util.toPointer(pcGuidDevice), util.toPointer(ppDSC8), util.toPointer(pUnkOuter));
}

export function DirectSoundFullDuplexCreate(
  pcGuidCaptureDevice: Deno.PointerValue | Uint8Array /* ptr */,
  pcGuidRenderDevice: Deno.PointerValue | Uint8Array /* ptr */,
  pcDSCBufferDesc: Deno.PointerValue | Uint8Array /* ptr */,
  pcDSBufferDesc: Deno.PointerValue | Uint8Array /* ptr */,
  hWnd: Deno.PointerValue /* Windows.Win32.Foundation.HWND */,
  dwLevel: number /* u32 */,
  ppDSFD: Deno.PointerValue | Uint8Array /* ptr */,
  ppDSCBuffer8: Deno.PointerValue | Uint8Array /* ptr */,
  ppDSBuffer8: Deno.PointerValue | Uint8Array /* ptr */,
  pUnkOuter: Uint8Array | Deno.PointerValue /* Windows.Win32.System.Com.IUnknown */,
): Deno.PointerValue /* Windows.Win32.Foundation.HRESULT */ {
  return libDSOUND_dll.DirectSoundFullDuplexCreate(util.toPointer(pcGuidCaptureDevice), util.toPointer(pcGuidRenderDevice), util.toPointer(pcDSCBufferDesc), util.toPointer(pcDSBufferDesc), (hWnd), dwLevel, util.toPointer(ppDSFD), util.toPointer(ppDSCBuffer8), util.toPointer(ppDSBuffer8), util.toPointer(pUnkOuter));
}

export function GetDeviceID(
  pGuidSrc: Deno.PointerValue | Uint8Array /* ptr */,
  pGuidDest: Deno.PointerValue | Uint8Array /* ptr */,
): Deno.PointerValue /* Windows.Win32.Foundation.HRESULT */ {
  return libDSOUND_dll.GetDeviceID(util.toPointer(pGuidSrc), util.toPointer(pGuidDest));
}

