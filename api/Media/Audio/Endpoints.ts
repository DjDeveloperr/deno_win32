/// Auto-generated by Deno Win32: Windows.Win32.Media.Audio.Endpoints.Apis

import * as util from "../../../util.ts";

// Enums
export type EndpointConnectorType = number;

// Constants
export const eHostProcessConnector = 0;
export const eOffloadConnector = 1;
export const eLoopbackConnector = 2;
export const eKeywordDetectorConnector = 3;
export const eConnectorCount = 4;

// Structs

/**
 * Windows.Win32.UI.Shell.PropertiesSystem.PROPERTYKEY (size: 16)
 */
export interface PROPERTYKEY {
  /** System.Guid */
  fmtid: Uint8Array | Deno.PointerValue | null;
  /** u32 */
  pid: number;
}

export const sizeofPROPERTYKEY = 16;

export function allocPROPERTYKEY(data?: Partial<PROPERTYKEY>): Uint8Array {
  const buf = new Uint8Array(sizeofPROPERTYKEY);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.fmtid !== undefined) view.setBigUint64(0, data.fmtid === null ? 0n : BigInt(util.toPointer(data.fmtid)), true);
  // 0x08: u32
  if (data?.pid !== undefined) view.setUint32(8, Number(data.pid), true);
  // 0x0c: pad4
  return buf;
}

/**
 * Windows.Win32.Media.Audio.Endpoints.Apis (size: 32)
 */
export interface Apis {
  /** Windows.Win32.UI.Shell.PropertiesSystem.PROPERTYKEY */
  DEVPKEY_AudioEndpointPlugin_FactoryCLSID: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.UI.Shell.PropertiesSystem.PROPERTYKEY */
  DEVPKEY_AudioEndpointPlugin_DataFlow: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.UI.Shell.PropertiesSystem.PROPERTYKEY */
  DEVPKEY_AudioEndpointPlugin_PnPInterface: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.UI.Shell.PropertiesSystem.PROPERTYKEY */
  DEVPKEY_AudioEndpointPlugin2_FactoryCLSID: Uint8Array | Deno.PointerValue | null;
}

export const sizeofApis = 32;

export function allocApis(data?: Partial<Apis>): Uint8Array {
  const buf = new Uint8Array(sizeofApis);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.DEVPKEY_AudioEndpointPlugin_FactoryCLSID !== undefined) view.setBigUint64(0, data.DEVPKEY_AudioEndpointPlugin_FactoryCLSID === null ? 0n : BigInt(util.toPointer(data.DEVPKEY_AudioEndpointPlugin_FactoryCLSID)), true);
  // 0x08: pointer
  if (data?.DEVPKEY_AudioEndpointPlugin_DataFlow !== undefined) view.setBigUint64(8, data.DEVPKEY_AudioEndpointPlugin_DataFlow === null ? 0n : BigInt(util.toPointer(data.DEVPKEY_AudioEndpointPlugin_DataFlow)), true);
  // 0x10: pointer
  if (data?.DEVPKEY_AudioEndpointPlugin_PnPInterface !== undefined) view.setBigUint64(16, data.DEVPKEY_AudioEndpointPlugin_PnPInterface === null ? 0n : BigInt(util.toPointer(data.DEVPKEY_AudioEndpointPlugin_PnPInterface)), true);
  // 0x18: pointer
  if (data?.DEVPKEY_AudioEndpointPlugin2_FactoryCLSID !== undefined) view.setBigUint64(24, data.DEVPKEY_AudioEndpointPlugin2_FactoryCLSID === null ? 0n : BigInt(util.toPointer(data.DEVPKEY_AudioEndpointPlugin2_FactoryCLSID)), true);
  return buf;
}

/**
 * Windows.Win32.Media.Audio.WAVEFORMATEX (size: 24)
 */
export interface WAVEFORMATEX {
  /** u16 */
  wFormatTag: number;
  /** u16 */
  nChannels: number;
  /** u32 */
  nSamplesPerSec: number;
  /** u32 */
  nAvgBytesPerSec: number;
  /** u16 */
  nBlockAlign: number;
  /** u16 */
  wBitsPerSample: number;
  /** u16 */
  cbSize: number;
}

export const sizeofWAVEFORMATEX = 24;

export function allocWAVEFORMATEX(data?: Partial<WAVEFORMATEX>): Uint8Array {
  const buf = new Uint8Array(sizeofWAVEFORMATEX);
  const view = new DataView(buf.buffer);
  // 0x00: u16
  if (data?.wFormatTag !== undefined) view.setUint16(0, Number(data.wFormatTag), true);
  // 0x02: u16
  if (data?.nChannels !== undefined) view.setUint16(2, Number(data.nChannels), true);
  // 0x04: u32
  if (data?.nSamplesPerSec !== undefined) view.setUint32(4, Number(data.nSamplesPerSec), true);
  // 0x08: u32
  if (data?.nAvgBytesPerSec !== undefined) view.setUint32(8, Number(data.nAvgBytesPerSec), true);
  // 0x0c: u16
  if (data?.nBlockAlign !== undefined) view.setUint16(12, Number(data.nBlockAlign), true);
  // 0x0e: u16
  if (data?.wBitsPerSample !== undefined) view.setUint16(14, Number(data.wBitsPerSample), true);
  // 0x10: u16
  if (data?.cbSize !== undefined) view.setUint16(16, Number(data.cbSize), true);
  // 0x12: pad6
  return buf;
}

/**
 * Windows.Win32.Media.Audio.Endpoints.AUDIO_ENDPOINT_SHARED_CREATE_PARAMS (size: 24)
 */
export interface AUDIO_ENDPOINT_SHARED_CREATE_PARAMS {
  /** u32 */
  u32Size: number;
  /** u32 */
  u32TSSessionId: number;
  /** Windows.Win32.Media.Audio.Endpoints.EndpointConnectorType */
  targetEndpointConnectorType: EndpointConnectorType;
  /** Windows.Win32.Media.Audio.WAVEFORMATEX */
  wfxDeviceFormat: Uint8Array | Deno.PointerValue | null;
}

export const sizeofAUDIO_ENDPOINT_SHARED_CREATE_PARAMS = 24;

export function allocAUDIO_ENDPOINT_SHARED_CREATE_PARAMS(data?: Partial<AUDIO_ENDPOINT_SHARED_CREATE_PARAMS>): Uint8Array {
  const buf = new Uint8Array(sizeofAUDIO_ENDPOINT_SHARED_CREATE_PARAMS);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.u32Size !== undefined) view.setUint32(0, Number(data.u32Size), true);
  // 0x04: u32
  if (data?.u32TSSessionId !== undefined) view.setUint32(4, Number(data.u32TSSessionId), true);
  // 0x08: i32
  if (data?.targetEndpointConnectorType !== undefined) view.setInt32(8, Number(data.targetEndpointConnectorType), true);
  // 0x0c: pad4
  // 0x10: pointer
  if (data?.wfxDeviceFormat !== undefined) view.setBigUint64(16, data.wfxDeviceFormat === null ? 0n : BigInt(util.toPointer(data.wfxDeviceFormat)), true);
  return buf;
}

// Native Libraries

// Symbols

