/// Auto-generated by Deno Win32: Windows.Win32.Media.Audio.DirectMusic.Apis

import * as util from "../../../util.ts";

// Enums
export type DMUS_CLOCKTYPE = number;
export type DSPROPERTY_DIRECTSOUNDDEVICE = number;
export type DIRECTSOUNDDEVICE_TYPE = number;
export type DIRECTSOUNDDEVICE_DATAFLOW = number;

// Constants
export const DMUS_MAX_DESCRIPTION = 128;
export const DMUS_MAX_DRIVER = 128;
export const DMUS_EFFECT_NONE = 0;
export const DMUS_EFFECT_REVERB = 1;
export const DMUS_EFFECT_CHORUS = 2;
export const DMUS_EFFECT_DELAY = 4;
export const DMUS_PC_INPUTCLASS = 0;
export const DMUS_PC_OUTPUTCLASS = 1;
export const DMUS_PC_DLS = 1;
export const DMUS_PC_EXTERNAL = 2;
export const DMUS_PC_SOFTWARESYNTH = 4;
export const DMUS_PC_MEMORYSIZEFIXED = 8;
export const DMUS_PC_GMINHARDWARE = 16;
export const DMUS_PC_GSINHARDWARE = 32;
export const DMUS_PC_XGINHARDWARE = 64;
export const DMUS_PC_DIRECTSOUND = 128;
export const DMUS_PC_SHAREABLE = 256;
export const DMUS_PC_DLS2 = 512;
export const DMUS_PC_AUDIOPATH = 1024;
export const DMUS_PC_WAVE = 2048;
export const DMUS_PC_SYSTEMMEMORY = 2147483647;
export const DMUS_PORT_WINMM_DRIVER = 0;
export const DMUS_PORT_USER_MODE_SYNTH = 1;
export const DMUS_PORT_KERNEL_MODE = 2;
export const DMUS_PORTPARAMS_VOICES = 1;
export const DMUS_PORTPARAMS_CHANNELGROUPS = 2;
export const DMUS_PORTPARAMS_AUDIOCHANNELS = 4;
export const DMUS_PORTPARAMS_SAMPLERATE = 8;
export const DMUS_PORTPARAMS_EFFECTS = 32;
export const DMUS_PORTPARAMS_SHARE = 64;
export const DMUS_PORTPARAMS_FEATURES = 128;
export const DMUS_PORT_FEATURE_AUDIOPATH = 1;
export const DMUS_PORT_FEATURE_STREAMING = 2;
export const DMUS_SYNTHSTATS_VOICES = 1;
export const DMUS_SYNTHSTATS_TOTAL_CPU = 2;
export const DMUS_SYNTHSTATS_CPU_PER_VOICE = 4;
export const DMUS_SYNTHSTATS_LOST_NOTES = 8;
export const DMUS_SYNTHSTATS_PEAK_VOLUME = 16;
export const DMUS_SYNTHSTATS_FREE_MEMORY = 32;
export const DMUS_SYNTHSTATS_SYSTEMMEMORY = 2147483647;
export const DMUS_CLOCKF_GLOBAL = 1;
export const DSBUSID_FIRST_SPKR_LOC = 0;
export const DSBUSID_FRONT_LEFT = 0;
export const DSBUSID_LEFT = 0;
export const DSBUSID_FRONT_RIGHT = 1;
export const DSBUSID_RIGHT = 1;
export const DSBUSID_FRONT_CENTER = 2;
export const DSBUSID_LOW_FREQUENCY = 3;
export const DSBUSID_BACK_LEFT = 4;
export const DSBUSID_BACK_RIGHT = 5;
export const DSBUSID_FRONT_LEFT_OF_CENTER = 6;
export const DSBUSID_FRONT_RIGHT_OF_CENTER = 7;
export const DSBUSID_BACK_CENTER = 8;
export const DSBUSID_SIDE_LEFT = 9;
export const DSBUSID_SIDE_RIGHT = 10;
export const DSBUSID_TOP_CENTER = 11;
export const DSBUSID_TOP_FRONT_LEFT = 12;
export const DSBUSID_TOP_FRONT_CENTER = 13;
export const DSBUSID_TOP_FRONT_RIGHT = 14;
export const DSBUSID_TOP_BACK_LEFT = 15;
export const DSBUSID_TOP_BACK_CENTER = 16;
export const DSBUSID_TOP_BACK_RIGHT = 17;
export const DSBUSID_LAST_SPKR_LOC = 17;
export const DSBUSID_REVERB_SEND = 64;
export const DSBUSID_CHORUS_SEND = 65;
export const DSBUSID_DYNAMIC_0 = 512;
export const DSBUSID_NULL = 4294967295;
export const DAUD_CRITICAL_VOICE_PRIORITY = 4026531840;
export const DAUD_HIGH_VOICE_PRIORITY = 3221225472;
export const DAUD_STANDARD_VOICE_PRIORITY = 2147483648;
export const DAUD_LOW_VOICE_PRIORITY = 1073741824;
export const DAUD_PERSIST_VOICE_PRIORITY = 268435456;
export const DAUD_CHAN1_VOICE_PRIORITY_OFFSET = 14;
export const DAUD_CHAN2_VOICE_PRIORITY_OFFSET = 13;
export const DAUD_CHAN3_VOICE_PRIORITY_OFFSET = 12;
export const DAUD_CHAN4_VOICE_PRIORITY_OFFSET = 11;
export const DAUD_CHAN5_VOICE_PRIORITY_OFFSET = 10;
export const DAUD_CHAN6_VOICE_PRIORITY_OFFSET = 9;
export const DAUD_CHAN7_VOICE_PRIORITY_OFFSET = 8;
export const DAUD_CHAN8_VOICE_PRIORITY_OFFSET = 7;
export const DAUD_CHAN9_VOICE_PRIORITY_OFFSET = 6;
export const DAUD_CHAN10_VOICE_PRIORITY_OFFSET = 15;
export const DAUD_CHAN11_VOICE_PRIORITY_OFFSET = 5;
export const DAUD_CHAN12_VOICE_PRIORITY_OFFSET = 4;
export const DAUD_CHAN13_VOICE_PRIORITY_OFFSET = 3;
export const DAUD_CHAN14_VOICE_PRIORITY_OFFSET = 2;
export const DAUD_CHAN15_VOICE_PRIORITY_OFFSET = 1;
export const DAUD_CHAN16_VOICE_PRIORITY_OFFSET = 0;
export const DMUS_VOLUME_MAX = 2000;
export const DMUS_VOLUME_MIN = `-20000`;
export const DMUS_EVENT_STRUCTURED = 1;
export const DMUS_DOWNLOADINFO_INSTRUMENT = 1;
export const DMUS_DOWNLOADINFO_WAVE = 2;
export const DMUS_DOWNLOADINFO_INSTRUMENT2 = 3;
export const DMUS_DOWNLOADINFO_WAVEARTICULATION = 4;
export const DMUS_DOWNLOADINFO_STREAMINGWAVE = 5;
export const DMUS_DOWNLOADINFO_ONESHOTWAVE = 6;
export const DMUS_DEFAULT_SIZE_OFFSETTABLE = 1;
export const DMUS_INSTRUMENT_GM_INSTRUMENT = 1;
export const DMUS_MIN_DATA_SIZE = 4;
export const CONN_SRC_NONE = 0;
export const CONN_SRC_LFO = 1;
export const CONN_SRC_KEYONVELOCITY = 2;
export const CONN_SRC_KEYNUMBER = 3;
export const CONN_SRC_EG1 = 4;
export const CONN_SRC_EG2 = 5;
export const CONN_SRC_PITCHWHEEL = 6;
export const CONN_SRC_CC1 = 129;
export const CONN_SRC_CC7 = 135;
export const CONN_SRC_CC10 = 138;
export const CONN_SRC_CC11 = 139;
export const CONN_DST_NONE = 0;
export const CONN_DST_ATTENUATION = 1;
export const CONN_DST_PITCH = 3;
export const CONN_DST_PAN = 4;
export const CONN_DST_LFO_FREQUENCY = 260;
export const CONN_DST_LFO_STARTDELAY = 261;
export const CONN_DST_EG1_ATTACKTIME = 518;
export const CONN_DST_EG1_DECAYTIME = 519;
export const CONN_DST_EG1_RELEASETIME = 521;
export const CONN_DST_EG1_SUSTAINLEVEL = 522;
export const CONN_DST_EG2_ATTACKTIME = 778;
export const CONN_DST_EG2_DECAYTIME = 779;
export const CONN_DST_EG2_RELEASETIME = 781;
export const CONN_DST_EG2_SUSTAINLEVEL = 782;
export const CONN_TRN_NONE = 0;
export const CONN_TRN_CONCAVE = 1;
export const F_INSTRUMENT_DRUMS = 2147483648;
export const F_RGN_OPTION_SELFNONEXCLUSIVE = 1;
export const WAVELINK_CHANNEL_LEFT = 1;
export const WAVELINK_CHANNEL_RIGHT = 2;
export const F_WAVELINK_PHASE_MASTER = 1;
export const POOL_CUE_NULL = `-1`;
export const F_WSMP_NO_TRUNCATION = 1;
export const F_WSMP_NO_COMPRESSION = 2;
export const WLOOP_TYPE_FORWARD = 0;
export const CONN_SRC_POLYPRESSURE = 7;
export const CONN_SRC_CHANNELPRESSURE = 8;
export const CONN_SRC_VIBRATO = 9;
export const CONN_SRC_MONOPRESSURE = 10;
export const CONN_SRC_CC91 = 219;
export const CONN_SRC_CC93 = 221;
export const CONN_DST_GAIN = 1;
export const CONN_DST_KEYNUMBER = 5;
export const CONN_DST_LEFT = 16;
export const CONN_DST_RIGHT = 17;
export const CONN_DST_CENTER = 18;
export const CONN_DST_LEFTREAR = 19;
export const CONN_DST_RIGHTREAR = 20;
export const CONN_DST_LFE_CHANNEL = 21;
export const CONN_DST_CHORUS = 128;
export const CONN_DST_REVERB = 129;
export const CONN_DST_VIB_FREQUENCY = 276;
export const CONN_DST_VIB_STARTDELAY = 277;
export const CONN_DST_EG1_DELAYTIME = 523;
export const CONN_DST_EG1_HOLDTIME = 524;
export const CONN_DST_EG1_SHUTDOWNTIME = 525;
export const CONN_DST_EG2_DELAYTIME = 783;
export const CONN_DST_EG2_HOLDTIME = 784;
export const CONN_DST_FILTER_CUTOFF = 1280;
export const CONN_DST_FILTER_Q = 1281;
export const CONN_TRN_CONVEX = 2;
export const CONN_TRN_SWITCH = 3;
export const DLS_CDL_AND = 1;
export const DLS_CDL_OR = 2;
export const DLS_CDL_XOR = 3;
export const DLS_CDL_ADD = 4;
export const DLS_CDL_SUBTRACT = 5;
export const DLS_CDL_MULTIPLY = 6;
export const DLS_CDL_DIVIDE = 7;
export const DLS_CDL_LOGICAL_AND = 8;
export const DLS_CDL_LOGICAL_OR = 9;
export const DLS_CDL_LT = 10;
export const DLS_CDL_LE = 11;
export const DLS_CDL_GT = 12;
export const DLS_CDL_GE = 13;
export const DLS_CDL_EQ = 14;
export const DLS_CDL_NOT = 15;
export const DLS_CDL_CONST = 16;
export const DLS_CDL_QUERY = 17;
export const DLS_CDL_QUERYSUPPORTED = 18;
export const WLOOP_TYPE_RELEASE = 2;
export const F_WAVELINK_MULTICHANNEL = 2;
export const REGSTR_PATH_SOFTWARESYNTHS = `Software\Microsoft\DirectMusic\SoftwareSynths`;
export const REFRESH_F_LASTBUFFER = 1;
export const DV_DVSD_NTSC_FRAMESIZE = 120000;
export const DV_DVSD_PAL_FRAMESIZE = 144000;
export const DV_SMCHN = 57344;
export const DV_AUDIOMODE = 3840;
export const DV_AUDIOSMP = 939524096;
export const DV_AUDIOQU = 117440512;
export const DV_NTSCPAL = 2097152;
export const DV_STYPE = 2031616;
export const DV_NTSC = 0;
export const DV_PAL = 1;
export const DV_SD = 0;
export const DV_HD = 1;
export const DV_SL = 2;
export const DV_CAP_AUD16Bits = 0;
export const DV_CAP_AUD12Bits = 1;
export const SIZE_DVINFO = 32;
export const DMUS_CLOCK_SYSTEM = 0;
export const DMUS_CLOCK_WAVE = 1;
export const DSPROPERTY_DIRECTSOUNDDEVICE_WAVEDEVICEMAPPING_A = 1;
export const DSPROPERTY_DIRECTSOUNDDEVICE_DESCRIPTION_1 = 2;
export const DSPROPERTY_DIRECTSOUNDDEVICE_ENUMERATE_1 = 3;
export const DSPROPERTY_DIRECTSOUNDDEVICE_WAVEDEVICEMAPPING_W = 4;
export const DSPROPERTY_DIRECTSOUNDDEVICE_DESCRIPTION_A = 5;
export const DSPROPERTY_DIRECTSOUNDDEVICE_DESCRIPTION_W = 6;
export const DSPROPERTY_DIRECTSOUNDDEVICE_ENUMERATE_A = 7;
export const DSPROPERTY_DIRECTSOUNDDEVICE_ENUMERATE_W = 8;
export const DIRECTSOUNDDEVICE_TYPE_EMULATED = 0;
export const DIRECTSOUNDDEVICE_TYPE_VXD = 1;
export const DIRECTSOUNDDEVICE_TYPE_WDM = 2;
export const DIRECTSOUNDDEVICE_DATAFLOW_RENDER = 0;
export const DIRECTSOUNDDEVICE_DATAFLOW_CAPTURE = 1;

// Structs

/**
 * Windows.Win32.Media.Audio.DirectMusic.DLSID (size: 16)
 */
export interface DLSID {
  /** u32 */
  ulData1: number;
  /** u16 */
  usData2: number;
  /** u16 */
  usData3: number;
  /** array */
  abData4: Deno.PointerValue | null;
}

export const sizeofDLSID = 16;

export function allocDLSID(data?: Partial<DLSID>): Uint8Array {
  const buf = new Uint8Array(sizeofDLSID);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.ulData1 !== undefined) view.setUint32(0, Number(data.ulData1), true);
  // 0x04: u16
  if (data?.usData2 !== undefined) view.setUint16(4, Number(data.usData2), true);
  // 0x06: u16
  if (data?.usData3 !== undefined) view.setUint16(6, Number(data.usData3), true);
  // 0x08: pointer
  if (data?.abData4 !== undefined) view.setBigUint64(8, data.abData4 === null ? 0n : BigInt(util.toPointer(data.abData4)), true);
  return buf;
}

/**
 * Windows.Win32.Media.Audio.DirectMusic.DLSVERSION (size: 8)
 */
export interface DLSVERSION {
  /** u32 */
  dwVersionMS: number;
  /** u32 */
  dwVersionLS: number;
}

export const sizeofDLSVERSION = 8;

export function allocDLSVERSION(data?: Partial<DLSVERSION>): Uint8Array {
  const buf = new Uint8Array(sizeofDLSVERSION);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.dwVersionMS !== undefined) view.setUint32(0, Number(data.dwVersionMS), true);
  // 0x04: u32
  if (data?.dwVersionLS !== undefined) view.setUint32(4, Number(data.dwVersionLS), true);
  return buf;
}

/**
 * Windows.Win32.Media.Audio.DirectMusic.CONNECTION (size: 16)
 */
export interface CONNECTION {
  /** u16 */
  usSource: number;
  /** u16 */
  usControl: number;
  /** u16 */
  usDestination: number;
  /** u16 */
  usTransform: number;
  /** i32 */
  lScale: number;
}

export const sizeofCONNECTION = 16;

export function allocCONNECTION(data?: Partial<CONNECTION>): Uint8Array {
  const buf = new Uint8Array(sizeofCONNECTION);
  const view = new DataView(buf.buffer);
  // 0x00: u16
  if (data?.usSource !== undefined) view.setUint16(0, Number(data.usSource), true);
  // 0x02: u16
  if (data?.usControl !== undefined) view.setUint16(2, Number(data.usControl), true);
  // 0x04: u16
  if (data?.usDestination !== undefined) view.setUint16(4, Number(data.usDestination), true);
  // 0x06: u16
  if (data?.usTransform !== undefined) view.setUint16(6, Number(data.usTransform), true);
  // 0x08: i32
  if (data?.lScale !== undefined) view.setInt32(8, Number(data.lScale), true);
  // 0x0c: pad4
  return buf;
}

/**
 * Windows.Win32.Media.Audio.DirectMusic.CONNECTIONLIST (size: 8)
 */
export interface CONNECTIONLIST {
  /** u32 */
  cbSize: number;
  /** u32 */
  cConnections: number;
}

export const sizeofCONNECTIONLIST = 8;

export function allocCONNECTIONLIST(data?: Partial<CONNECTIONLIST>): Uint8Array {
  const buf = new Uint8Array(sizeofCONNECTIONLIST);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.cbSize !== undefined) view.setUint32(0, Number(data.cbSize), true);
  // 0x04: u32
  if (data?.cConnections !== undefined) view.setUint32(4, Number(data.cConnections), true);
  return buf;
}

/**
 * Windows.Win32.Media.Audio.DirectMusic.RGNRANGE (size: 8)
 */
export interface RGNRANGE {
  /** u16 */
  usLow: number;
  /** u16 */
  usHigh: number;
}

export const sizeofRGNRANGE = 8;

export function allocRGNRANGE(data?: Partial<RGNRANGE>): Uint8Array {
  const buf = new Uint8Array(sizeofRGNRANGE);
  const view = new DataView(buf.buffer);
  // 0x00: u16
  if (data?.usLow !== undefined) view.setUint16(0, Number(data.usLow), true);
  // 0x02: u16
  if (data?.usHigh !== undefined) view.setUint16(2, Number(data.usHigh), true);
  // 0x04: pad4
  return buf;
}

/**
 * Windows.Win32.Media.Audio.DirectMusic.MIDILOCALE (size: 8)
 */
export interface MIDILOCALE {
  /** u32 */
  ulBank: number;
  /** u32 */
  ulInstrument: number;
}

export const sizeofMIDILOCALE = 8;

export function allocMIDILOCALE(data?: Partial<MIDILOCALE>): Uint8Array {
  const buf = new Uint8Array(sizeofMIDILOCALE);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.ulBank !== undefined) view.setUint32(0, Number(data.ulBank), true);
  // 0x04: u32
  if (data?.ulInstrument !== undefined) view.setUint32(4, Number(data.ulInstrument), true);
  return buf;
}

/**
 * Windows.Win32.Media.Audio.DirectMusic.RGNHEADER (size: 24)
 */
export interface RGNHEADER {
  /** Windows.Win32.Media.Audio.DirectMusic.RGNRANGE */
  RangeKey: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Media.Audio.DirectMusic.RGNRANGE */
  RangeVelocity: Uint8Array | Deno.PointerValue | null;
  /** u16 */
  fusOptions: number;
  /** u16 */
  usKeyGroup: number;
}

export const sizeofRGNHEADER = 24;

export function allocRGNHEADER(data?: Partial<RGNHEADER>): Uint8Array {
  const buf = new Uint8Array(sizeofRGNHEADER);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.RangeKey !== undefined) view.setBigUint64(0, data.RangeKey === null ? 0n : BigInt(util.toPointer(data.RangeKey)), true);
  // 0x08: pointer
  if (data?.RangeVelocity !== undefined) view.setBigUint64(8, data.RangeVelocity === null ? 0n : BigInt(util.toPointer(data.RangeVelocity)), true);
  // 0x10: u16
  if (data?.fusOptions !== undefined) view.setUint16(16, Number(data.fusOptions), true);
  // 0x12: u16
  if (data?.usKeyGroup !== undefined) view.setUint16(18, Number(data.usKeyGroup), true);
  // 0x14: pad4
  return buf;
}

/**
 * Windows.Win32.Media.Audio.DirectMusic.INSTHEADER (size: 16)
 */
export interface INSTHEADER {
  /** u32 */
  cRegions: number;
  /** Windows.Win32.Media.Audio.DirectMusic.MIDILOCALE */
  Locale: Uint8Array | Deno.PointerValue | null;
}

export const sizeofINSTHEADER = 16;

export function allocINSTHEADER(data?: Partial<INSTHEADER>): Uint8Array {
  const buf = new Uint8Array(sizeofINSTHEADER);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.cRegions !== undefined) view.setUint32(0, Number(data.cRegions), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.Locale !== undefined) view.setBigUint64(8, data.Locale === null ? 0n : BigInt(util.toPointer(data.Locale)), true);
  return buf;
}

/**
 * Windows.Win32.Media.Audio.DirectMusic.DLSHEADER (size: 8)
 */
export interface DLSHEADER {
  /** u32 */
  cInstruments: number;
}

export const sizeofDLSHEADER = 8;

export function allocDLSHEADER(data?: Partial<DLSHEADER>): Uint8Array {
  const buf = new Uint8Array(sizeofDLSHEADER);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.cInstruments !== undefined) view.setUint32(0, Number(data.cInstruments), true);
  // 0x04: pad4
  return buf;
}

/**
 * Windows.Win32.Media.Audio.DirectMusic.WAVELINK (size: 16)
 */
export interface WAVELINK {
  /** u16 */
  fusOptions: number;
  /** u16 */
  usPhaseGroup: number;
  /** u32 */
  ulChannel: number;
  /** u32 */
  ulTableIndex: number;
}

export const sizeofWAVELINK = 16;

export function allocWAVELINK(data?: Partial<WAVELINK>): Uint8Array {
  const buf = new Uint8Array(sizeofWAVELINK);
  const view = new DataView(buf.buffer);
  // 0x00: u16
  if (data?.fusOptions !== undefined) view.setUint16(0, Number(data.fusOptions), true);
  // 0x02: u16
  if (data?.usPhaseGroup !== undefined) view.setUint16(2, Number(data.usPhaseGroup), true);
  // 0x04: u32
  if (data?.ulChannel !== undefined) view.setUint32(4, Number(data.ulChannel), true);
  // 0x08: u32
  if (data?.ulTableIndex !== undefined) view.setUint32(8, Number(data.ulTableIndex), true);
  // 0x0c: pad4
  return buf;
}

/**
 * Windows.Win32.Media.Audio.DirectMusic.POOLCUE (size: 8)
 */
export interface POOLCUE {
  /** u32 */
  ulOffset: number;
}

export const sizeofPOOLCUE = 8;

export function allocPOOLCUE(data?: Partial<POOLCUE>): Uint8Array {
  const buf = new Uint8Array(sizeofPOOLCUE);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.ulOffset !== undefined) view.setUint32(0, Number(data.ulOffset), true);
  // 0x04: pad4
  return buf;
}

/**
 * Windows.Win32.Media.Audio.DirectMusic.POOLTABLE (size: 8)
 */
export interface POOLTABLE {
  /** u32 */
  cbSize: number;
  /** u32 */
  cCues: number;
}

export const sizeofPOOLTABLE = 8;

export function allocPOOLTABLE(data?: Partial<POOLTABLE>): Uint8Array {
  const buf = new Uint8Array(sizeofPOOLTABLE);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.cbSize !== undefined) view.setUint32(0, Number(data.cbSize), true);
  // 0x04: u32
  if (data?.cCues !== undefined) view.setUint32(4, Number(data.cCues), true);
  return buf;
}

/**
 * Windows.Win32.Media.Audio.DirectMusic.WSMPL (size: 24)
 */
export interface WSMPL {
  /** u32 */
  cbSize: number;
  /** u16 */
  usUnityNote: number;
  /** i16 */
  sFineTune: number;
  /** i32 */
  lAttenuation: number;
  /** u32 */
  fulOptions: number;
  /** u32 */
  cSampleLoops: number;
}

export const sizeofWSMPL = 24;

export function allocWSMPL(data?: Partial<WSMPL>): Uint8Array {
  const buf = new Uint8Array(sizeofWSMPL);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.cbSize !== undefined) view.setUint32(0, Number(data.cbSize), true);
  // 0x04: u16
  if (data?.usUnityNote !== undefined) view.setUint16(4, Number(data.usUnityNote), true);
  // 0x06: i16
  if (data?.sFineTune !== undefined) view.setInt16(6, Number(data.sFineTune), true);
  // 0x08: i32
  if (data?.lAttenuation !== undefined) view.setInt32(8, Number(data.lAttenuation), true);
  // 0x0c: u32
  if (data?.fulOptions !== undefined) view.setUint32(12, Number(data.fulOptions), true);
  // 0x10: u32
  if (data?.cSampleLoops !== undefined) view.setUint32(16, Number(data.cSampleLoops), true);
  // 0x14: pad4
  return buf;
}

/**
 * Windows.Win32.Media.Audio.DirectMusic.WLOOP (size: 16)
 */
export interface WLOOP {
  /** u32 */
  cbSize: number;
  /** u32 */
  ulType: number;
  /** u32 */
  ulStart: number;
  /** u32 */
  ulLength: number;
}

export const sizeofWLOOP = 16;

export function allocWLOOP(data?: Partial<WLOOP>): Uint8Array {
  const buf = new Uint8Array(sizeofWLOOP);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.cbSize !== undefined) view.setUint32(0, Number(data.cbSize), true);
  // 0x04: u32
  if (data?.ulType !== undefined) view.setUint32(4, Number(data.ulType), true);
  // 0x08: u32
  if (data?.ulStart !== undefined) view.setUint32(8, Number(data.ulStart), true);
  // 0x0c: u32
  if (data?.ulLength !== undefined) view.setUint32(12, Number(data.ulLength), true);
  return buf;
}

/**
 * Windows.Win32.Media.Audio.DirectMusic.DMUS_DOWNLOADINFO (size: 16)
 */
export interface DMUS_DOWNLOADINFO {
  /** u32 */
  dwDLType: number;
  /** u32 */
  dwDLId: number;
  /** u32 */
  dwNumOffsetTableEntries: number;
  /** u32 */
  cbSize: number;
}

export const sizeofDMUS_DOWNLOADINFO = 16;

export function allocDMUS_DOWNLOADINFO(data?: Partial<DMUS_DOWNLOADINFO>): Uint8Array {
  const buf = new Uint8Array(sizeofDMUS_DOWNLOADINFO);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.dwDLType !== undefined) view.setUint32(0, Number(data.dwDLType), true);
  // 0x04: u32
  if (data?.dwDLId !== undefined) view.setUint32(4, Number(data.dwDLId), true);
  // 0x08: u32
  if (data?.dwNumOffsetTableEntries !== undefined) view.setUint32(8, Number(data.dwNumOffsetTableEntries), true);
  // 0x0c: u32
  if (data?.cbSize !== undefined) view.setUint32(12, Number(data.cbSize), true);
  return buf;
}

/**
 * Windows.Win32.Media.Audio.DirectMusic.DMUS_OFFSETTABLE (size: 8)
 */
export interface DMUS_OFFSETTABLE {
  /** array */
  ulOffsetTable: Deno.PointerValue | null;
}

export const sizeofDMUS_OFFSETTABLE = 8;

export function allocDMUS_OFFSETTABLE(data?: Partial<DMUS_OFFSETTABLE>): Uint8Array {
  const buf = new Uint8Array(sizeofDMUS_OFFSETTABLE);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.ulOffsetTable !== undefined) view.setBigUint64(0, data.ulOffsetTable === null ? 0n : BigInt(util.toPointer(data.ulOffsetTable)), true);
  return buf;
}

/**
 * Windows.Win32.Media.Audio.DirectMusic.DMUS_INSTRUMENT (size: 24)
 */
export interface DMUS_INSTRUMENT {
  /** u32 */
  ulPatch: number;
  /** u32 */
  ulFirstRegionIdx: number;
  /** u32 */
  ulGlobalArtIdx: number;
  /** u32 */
  ulFirstExtCkIdx: number;
  /** u32 */
  ulCopyrightIdx: number;
  /** u32 */
  ulFlags: number;
}

export const sizeofDMUS_INSTRUMENT = 24;

export function allocDMUS_INSTRUMENT(data?: Partial<DMUS_INSTRUMENT>): Uint8Array {
  const buf = new Uint8Array(sizeofDMUS_INSTRUMENT);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.ulPatch !== undefined) view.setUint32(0, Number(data.ulPatch), true);
  // 0x04: u32
  if (data?.ulFirstRegionIdx !== undefined) view.setUint32(4, Number(data.ulFirstRegionIdx), true);
  // 0x08: u32
  if (data?.ulGlobalArtIdx !== undefined) view.setUint32(8, Number(data.ulGlobalArtIdx), true);
  // 0x0c: u32
  if (data?.ulFirstExtCkIdx !== undefined) view.setUint32(12, Number(data.ulFirstExtCkIdx), true);
  // 0x10: u32
  if (data?.ulCopyrightIdx !== undefined) view.setUint32(16, Number(data.ulCopyrightIdx), true);
  // 0x14: u32
  if (data?.ulFlags !== undefined) view.setUint32(20, Number(data.ulFlags), true);
  return buf;
}

/**
 * Windows.Win32.Media.Audio.DirectMusic.DMUS_REGION (size: 56)
 */
export interface DMUS_REGION {
  /** Windows.Win32.Media.Audio.DirectMusic.RGNRANGE */
  RangeKey: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Media.Audio.DirectMusic.RGNRANGE */
  RangeVelocity: Uint8Array | Deno.PointerValue | null;
  /** u16 */
  fusOptions: number;
  /** u16 */
  usKeyGroup: number;
  /** u32 */
  ulRegionArtIdx: number;
  /** u32 */
  ulNextRegionIdx: number;
  /** u32 */
  ulFirstExtCkIdx: number;
  /** Windows.Win32.Media.Audio.DirectMusic.WAVELINK */
  WaveLink: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Media.Audio.DirectMusic.WSMPL */
  WSMP: Uint8Array | Deno.PointerValue | null;
  /** array */
  WLOOP: Deno.PointerValue | null;
}

export const sizeofDMUS_REGION = 56;

export function allocDMUS_REGION(data?: Partial<DMUS_REGION>): Uint8Array {
  const buf = new Uint8Array(sizeofDMUS_REGION);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.RangeKey !== undefined) view.setBigUint64(0, data.RangeKey === null ? 0n : BigInt(util.toPointer(data.RangeKey)), true);
  // 0x08: pointer
  if (data?.RangeVelocity !== undefined) view.setBigUint64(8, data.RangeVelocity === null ? 0n : BigInt(util.toPointer(data.RangeVelocity)), true);
  // 0x10: u16
  if (data?.fusOptions !== undefined) view.setUint16(16, Number(data.fusOptions), true);
  // 0x12: u16
  if (data?.usKeyGroup !== undefined) view.setUint16(18, Number(data.usKeyGroup), true);
  // 0x14: u32
  if (data?.ulRegionArtIdx !== undefined) view.setUint32(20, Number(data.ulRegionArtIdx), true);
  // 0x18: u32
  if (data?.ulNextRegionIdx !== undefined) view.setUint32(24, Number(data.ulNextRegionIdx), true);
  // 0x1c: u32
  if (data?.ulFirstExtCkIdx !== undefined) view.setUint32(28, Number(data.ulFirstExtCkIdx), true);
  // 0x20: pointer
  if (data?.WaveLink !== undefined) view.setBigUint64(32, data.WaveLink === null ? 0n : BigInt(util.toPointer(data.WaveLink)), true);
  // 0x28: pointer
  if (data?.WSMP !== undefined) view.setBigUint64(40, data.WSMP === null ? 0n : BigInt(util.toPointer(data.WSMP)), true);
  // 0x30: pointer
  if (data?.WLOOP !== undefined) view.setBigUint64(48, data.WLOOP === null ? 0n : BigInt(util.toPointer(data.WLOOP)), true);
  return buf;
}

/**
 * Windows.Win32.Media.Audio.DirectMusic.DMUS_LFOPARAMS (size: 24)
 */
export interface DMUS_LFOPARAMS {
  /** i32 */
  pcFrequency: number;
  /** i32 */
  tcDelay: number;
  /** i32 */
  gcVolumeScale: number;
  /** i32 */
  pcPitchScale: number;
  /** i32 */
  gcMWToVolume: number;
  /** i32 */
  pcMWToPitch: number;
}

export const sizeofDMUS_LFOPARAMS = 24;

export function allocDMUS_LFOPARAMS(data?: Partial<DMUS_LFOPARAMS>): Uint8Array {
  const buf = new Uint8Array(sizeofDMUS_LFOPARAMS);
  const view = new DataView(buf.buffer);
  // 0x00: i32
  if (data?.pcFrequency !== undefined) view.setInt32(0, Number(data.pcFrequency), true);
  // 0x04: i32
  if (data?.tcDelay !== undefined) view.setInt32(4, Number(data.tcDelay), true);
  // 0x08: i32
  if (data?.gcVolumeScale !== undefined) view.setInt32(8, Number(data.gcVolumeScale), true);
  // 0x0c: i32
  if (data?.pcPitchScale !== undefined) view.setInt32(12, Number(data.pcPitchScale), true);
  // 0x10: i32
  if (data?.gcMWToVolume !== undefined) view.setInt32(16, Number(data.gcMWToVolume), true);
  // 0x14: i32
  if (data?.pcMWToPitch !== undefined) view.setInt32(20, Number(data.pcMWToPitch), true);
  return buf;
}

/**
 * Windows.Win32.Media.Audio.DirectMusic.DMUS_VEGPARAMS (size: 24)
 */
export interface DMUS_VEGPARAMS {
  /** i32 */
  tcAttack: number;
  /** i32 */
  tcDecay: number;
  /** i32 */
  ptSustain: number;
  /** i32 */
  tcRelease: number;
  /** i32 */
  tcVel2Attack: number;
  /** i32 */
  tcKey2Decay: number;
}

export const sizeofDMUS_VEGPARAMS = 24;

export function allocDMUS_VEGPARAMS(data?: Partial<DMUS_VEGPARAMS>): Uint8Array {
  const buf = new Uint8Array(sizeofDMUS_VEGPARAMS);
  const view = new DataView(buf.buffer);
  // 0x00: i32
  if (data?.tcAttack !== undefined) view.setInt32(0, Number(data.tcAttack), true);
  // 0x04: i32
  if (data?.tcDecay !== undefined) view.setInt32(4, Number(data.tcDecay), true);
  // 0x08: i32
  if (data?.ptSustain !== undefined) view.setInt32(8, Number(data.ptSustain), true);
  // 0x0c: i32
  if (data?.tcRelease !== undefined) view.setInt32(12, Number(data.tcRelease), true);
  // 0x10: i32
  if (data?.tcVel2Attack !== undefined) view.setInt32(16, Number(data.tcVel2Attack), true);
  // 0x14: i32
  if (data?.tcKey2Decay !== undefined) view.setInt32(20, Number(data.tcKey2Decay), true);
  return buf;
}

/**
 * Windows.Win32.Media.Audio.DirectMusic.DMUS_PEGPARAMS (size: 32)
 */
export interface DMUS_PEGPARAMS {
  /** i32 */
  tcAttack: number;
  /** i32 */
  tcDecay: number;
  /** i32 */
  ptSustain: number;
  /** i32 */
  tcRelease: number;
  /** i32 */
  tcVel2Attack: number;
  /** i32 */
  tcKey2Decay: number;
  /** i32 */
  pcRange: number;
}

export const sizeofDMUS_PEGPARAMS = 32;

export function allocDMUS_PEGPARAMS(data?: Partial<DMUS_PEGPARAMS>): Uint8Array {
  const buf = new Uint8Array(sizeofDMUS_PEGPARAMS);
  const view = new DataView(buf.buffer);
  // 0x00: i32
  if (data?.tcAttack !== undefined) view.setInt32(0, Number(data.tcAttack), true);
  // 0x04: i32
  if (data?.tcDecay !== undefined) view.setInt32(4, Number(data.tcDecay), true);
  // 0x08: i32
  if (data?.ptSustain !== undefined) view.setInt32(8, Number(data.ptSustain), true);
  // 0x0c: i32
  if (data?.tcRelease !== undefined) view.setInt32(12, Number(data.tcRelease), true);
  // 0x10: i32
  if (data?.tcVel2Attack !== undefined) view.setInt32(16, Number(data.tcVel2Attack), true);
  // 0x14: i32
  if (data?.tcKey2Decay !== undefined) view.setInt32(20, Number(data.tcKey2Decay), true);
  // 0x18: i32
  if (data?.pcRange !== undefined) view.setInt32(24, Number(data.pcRange), true);
  // 0x1c: pad4
  return buf;
}

/**
 * Windows.Win32.Media.Audio.DirectMusic.DMUS_MSCPARAMS (size: 8)
 */
export interface DMUS_MSCPARAMS {
  /** i32 */
  ptDefaultPan: number;
}

export const sizeofDMUS_MSCPARAMS = 8;

export function allocDMUS_MSCPARAMS(data?: Partial<DMUS_MSCPARAMS>): Uint8Array {
  const buf = new Uint8Array(sizeofDMUS_MSCPARAMS);
  const view = new DataView(buf.buffer);
  // 0x00: i32
  if (data?.ptDefaultPan !== undefined) view.setInt32(0, Number(data.ptDefaultPan), true);
  // 0x04: pad4
  return buf;
}

/**
 * Windows.Win32.Media.Audio.DirectMusic.DMUS_ARTICPARAMS (size: 32)
 */
export interface DMUS_ARTICPARAMS {
  /** Windows.Win32.Media.Audio.DirectMusic.DMUS_LFOPARAMS */
  LFO: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Media.Audio.DirectMusic.DMUS_VEGPARAMS */
  VolEG: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Media.Audio.DirectMusic.DMUS_PEGPARAMS */
  PitchEG: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Media.Audio.DirectMusic.DMUS_MSCPARAMS */
  Misc: Uint8Array | Deno.PointerValue | null;
}

export const sizeofDMUS_ARTICPARAMS = 32;

export function allocDMUS_ARTICPARAMS(data?: Partial<DMUS_ARTICPARAMS>): Uint8Array {
  const buf = new Uint8Array(sizeofDMUS_ARTICPARAMS);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.LFO !== undefined) view.setBigUint64(0, data.LFO === null ? 0n : BigInt(util.toPointer(data.LFO)), true);
  // 0x08: pointer
  if (data?.VolEG !== undefined) view.setBigUint64(8, data.VolEG === null ? 0n : BigInt(util.toPointer(data.VolEG)), true);
  // 0x10: pointer
  if (data?.PitchEG !== undefined) view.setBigUint64(16, data.PitchEG === null ? 0n : BigInt(util.toPointer(data.PitchEG)), true);
  // 0x18: pointer
  if (data?.Misc !== undefined) view.setBigUint64(24, data.Misc === null ? 0n : BigInt(util.toPointer(data.Misc)), true);
  return buf;
}

/**
 * Windows.Win32.Media.Audio.DirectMusic.DMUS_ARTICULATION (size: 8)
 */
export interface DMUS_ARTICULATION {
  /** u32 */
  ulArt1Idx: number;
  /** u32 */
  ulFirstExtCkIdx: number;
}

export const sizeofDMUS_ARTICULATION = 8;

export function allocDMUS_ARTICULATION(data?: Partial<DMUS_ARTICULATION>): Uint8Array {
  const buf = new Uint8Array(sizeofDMUS_ARTICULATION);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.ulArt1Idx !== undefined) view.setUint32(0, Number(data.ulArt1Idx), true);
  // 0x04: u32
  if (data?.ulFirstExtCkIdx !== undefined) view.setUint32(4, Number(data.ulFirstExtCkIdx), true);
  return buf;
}

/**
 * Windows.Win32.Media.Audio.DirectMusic.DMUS_ARTICULATION2 (size: 16)
 */
export interface DMUS_ARTICULATION2 {
  /** u32 */
  ulArtIdx: number;
  /** u32 */
  ulFirstExtCkIdx: number;
  /** u32 */
  ulNextArtIdx: number;
}

export const sizeofDMUS_ARTICULATION2 = 16;

export function allocDMUS_ARTICULATION2(data?: Partial<DMUS_ARTICULATION2>): Uint8Array {
  const buf = new Uint8Array(sizeofDMUS_ARTICULATION2);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.ulArtIdx !== undefined) view.setUint32(0, Number(data.ulArtIdx), true);
  // 0x04: u32
  if (data?.ulFirstExtCkIdx !== undefined) view.setUint32(4, Number(data.ulFirstExtCkIdx), true);
  // 0x08: u32
  if (data?.ulNextArtIdx !== undefined) view.setUint32(8, Number(data.ulNextArtIdx), true);
  // 0x0c: pad4
  return buf;
}

/**
 * Windows.Win32.Media.Audio.DirectMusic.DMUS_EXTENSIONCHUNK (size: 24)
 */
export interface DMUS_EXTENSIONCHUNK {
  /** u32 */
  cbSize: number;
  /** u32 */
  ulNextExtCkIdx: number;
  /** u32 */
  ExtCkID: number;
  /** array */
  byExtCk: Deno.PointerValue | null;
}

export const sizeofDMUS_EXTENSIONCHUNK = 24;

export function allocDMUS_EXTENSIONCHUNK(data?: Partial<DMUS_EXTENSIONCHUNK>): Uint8Array {
  const buf = new Uint8Array(sizeofDMUS_EXTENSIONCHUNK);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.cbSize !== undefined) view.setUint32(0, Number(data.cbSize), true);
  // 0x04: u32
  if (data?.ulNextExtCkIdx !== undefined) view.setUint32(4, Number(data.ulNextExtCkIdx), true);
  // 0x08: u32
  if (data?.ExtCkID !== undefined) view.setUint32(8, Number(data.ExtCkID), true);
  // 0x0c: pad4
  // 0x10: pointer
  if (data?.byExtCk !== undefined) view.setBigUint64(16, data.byExtCk === null ? 0n : BigInt(util.toPointer(data.byExtCk)), true);
  return buf;
}

/**
 * Windows.Win32.Media.Audio.DirectMusic.DMUS_COPYRIGHT (size: 16)
 */
export interface DMUS_COPYRIGHT {
  /** u32 */
  cbSize: number;
  /** array */
  byCopyright: Deno.PointerValue | null;
}

export const sizeofDMUS_COPYRIGHT = 16;

export function allocDMUS_COPYRIGHT(data?: Partial<DMUS_COPYRIGHT>): Uint8Array {
  const buf = new Uint8Array(sizeofDMUS_COPYRIGHT);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.cbSize !== undefined) view.setUint32(0, Number(data.cbSize), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.byCopyright !== undefined) view.setBigUint64(8, data.byCopyright === null ? 0n : BigInt(util.toPointer(data.byCopyright)), true);
  return buf;
}

/**
 * Windows.Win32.Media.Audio.DirectMusic.DMUS_WAVEDATA (size: 16)
 */
export interface DMUS_WAVEDATA {
  /** u32 */
  cbSize: number;
  /** array */
  byData: Deno.PointerValue | null;
}

export const sizeofDMUS_WAVEDATA = 16;

export function allocDMUS_WAVEDATA(data?: Partial<DMUS_WAVEDATA>): Uint8Array {
  const buf = new Uint8Array(sizeofDMUS_WAVEDATA);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.cbSize !== undefined) view.setUint32(0, Number(data.cbSize), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.byData !== undefined) view.setBigUint64(8, data.byData === null ? 0n : BigInt(util.toPointer(data.byData)), true);
  return buf;
}

/**
 * Windows.Win32.Media.Audio.WAVEFORMATEX (size: 24)
 */
export interface WAVEFORMATEX {
  /** u16 */
  wFormatTag: number;
  /** u16 */
  nChannels: number;
  /** u32 */
  nSamplesPerSec: number;
  /** u32 */
  nAvgBytesPerSec: number;
  /** u16 */
  nBlockAlign: number;
  /** u16 */
  wBitsPerSample: number;
  /** u16 */
  cbSize: number;
}

export const sizeofWAVEFORMATEX = 24;

export function allocWAVEFORMATEX(data?: Partial<WAVEFORMATEX>): Uint8Array {
  const buf = new Uint8Array(sizeofWAVEFORMATEX);
  const view = new DataView(buf.buffer);
  // 0x00: u16
  if (data?.wFormatTag !== undefined) view.setUint16(0, Number(data.wFormatTag), true);
  // 0x02: u16
  if (data?.nChannels !== undefined) view.setUint16(2, Number(data.nChannels), true);
  // 0x04: u32
  if (data?.nSamplesPerSec !== undefined) view.setUint32(4, Number(data.nSamplesPerSec), true);
  // 0x08: u32
  if (data?.nAvgBytesPerSec !== undefined) view.setUint32(8, Number(data.nAvgBytesPerSec), true);
  // 0x0c: u16
  if (data?.nBlockAlign !== undefined) view.setUint16(12, Number(data.nBlockAlign), true);
  // 0x0e: u16
  if (data?.wBitsPerSample !== undefined) view.setUint16(14, Number(data.wBitsPerSample), true);
  // 0x10: u16
  if (data?.cbSize !== undefined) view.setUint16(16, Number(data.cbSize), true);
  // 0x12: pad6
  return buf;
}

/**
 * Windows.Win32.Media.Audio.DirectMusic.DMUS_WAVE (size: 24)
 */
export interface DMUS_WAVE {
  /** u32 */
  ulFirstExtCkIdx: number;
  /** u32 */
  ulCopyrightIdx: number;
  /** u32 */
  ulWaveDataIdx: number;
  /** Windows.Win32.Media.Audio.WAVEFORMATEX */
  WaveformatEx: Uint8Array | Deno.PointerValue | null;
}

export const sizeofDMUS_WAVE = 24;

export function allocDMUS_WAVE(data?: Partial<DMUS_WAVE>): Uint8Array {
  const buf = new Uint8Array(sizeofDMUS_WAVE);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.ulFirstExtCkIdx !== undefined) view.setUint32(0, Number(data.ulFirstExtCkIdx), true);
  // 0x04: u32
  if (data?.ulCopyrightIdx !== undefined) view.setUint32(4, Number(data.ulCopyrightIdx), true);
  // 0x08: u32
  if (data?.ulWaveDataIdx !== undefined) view.setUint32(8, Number(data.ulWaveDataIdx), true);
  // 0x0c: pad4
  // 0x10: pointer
  if (data?.WaveformatEx !== undefined) view.setBigUint64(16, data.WaveformatEx === null ? 0n : BigInt(util.toPointer(data.WaveformatEx)), true);
  return buf;
}

/**
 * Windows.Win32.Media.Audio.DirectMusic.DMUS_NOTERANGE (size: 8)
 */
export interface DMUS_NOTERANGE {
  /** u32 */
  dwLowNote: number;
  /** u32 */
  dwHighNote: number;
}

export const sizeofDMUS_NOTERANGE = 8;

export function allocDMUS_NOTERANGE(data?: Partial<DMUS_NOTERANGE>): Uint8Array {
  const buf = new Uint8Array(sizeofDMUS_NOTERANGE);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.dwLowNote !== undefined) view.setUint32(0, Number(data.dwLowNote), true);
  // 0x04: u32
  if (data?.dwHighNote !== undefined) view.setUint32(4, Number(data.dwHighNote), true);
  return buf;
}

/**
 * Windows.Win32.Media.Audio.DirectMusic.DMUS_WAVEARTDL (size: 24)
 */
export interface DMUS_WAVEARTDL {
  /** u32 */
  ulDownloadIdIdx: number;
  /** u32 */
  ulBus: number;
  /** u32 */
  ulBuffers: number;
  /** u32 */
  ulMasterDLId: number;
  /** u16 */
  usOptions: number;
}

export const sizeofDMUS_WAVEARTDL = 24;

export function allocDMUS_WAVEARTDL(data?: Partial<DMUS_WAVEARTDL>): Uint8Array {
  const buf = new Uint8Array(sizeofDMUS_WAVEARTDL);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.ulDownloadIdIdx !== undefined) view.setUint32(0, Number(data.ulDownloadIdIdx), true);
  // 0x04: u32
  if (data?.ulBus !== undefined) view.setUint32(4, Number(data.ulBus), true);
  // 0x08: u32
  if (data?.ulBuffers !== undefined) view.setUint32(8, Number(data.ulBuffers), true);
  // 0x0c: u32
  if (data?.ulMasterDLId !== undefined) view.setUint32(12, Number(data.ulMasterDLId), true);
  // 0x10: u16
  if (data?.usOptions !== undefined) view.setUint16(16, Number(data.usOptions), true);
  // 0x12: pad6
  return buf;
}

/**
 * Windows.Win32.Media.Audio.DirectMusic.DMUS_WAVEDL (size: 8)
 */
export interface DMUS_WAVEDL {
  /** u32 */
  cbWaveData: number;
}

export const sizeofDMUS_WAVEDL = 8;

export function allocDMUS_WAVEDL(data?: Partial<DMUS_WAVEDL>): Uint8Array {
  const buf = new Uint8Array(sizeofDMUS_WAVEDL);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.cbWaveData !== undefined) view.setUint32(0, Number(data.cbWaveData), true);
  // 0x04: pad4
  return buf;
}

/**
 * Windows.Win32.Media.Audio.DirectMusic.DMUS_EVENTHEADER (size: 24)
 */
export interface DMUS_EVENTHEADER {
  /** u32 */
  cbEvent: number;
  /** u32 */
  dwChannelGroup: number;
  /** i64 */
  rtDelta: Deno.PointerValue;
  /** u32 */
  dwFlags: number;
}

export const sizeofDMUS_EVENTHEADER = 24;

export function allocDMUS_EVENTHEADER(data?: Partial<DMUS_EVENTHEADER>): Uint8Array {
  const buf = new Uint8Array(sizeofDMUS_EVENTHEADER);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.cbEvent !== undefined) view.setUint32(0, Number(data.cbEvent), true);
  // 0x04: u32
  if (data?.dwChannelGroup !== undefined) view.setUint32(4, Number(data.dwChannelGroup), true);
  // 0x08: i64
  if (data?.rtDelta !== undefined) view.setBigInt64(8, BigInt(data.rtDelta), true);
  // 0x10: u32
  if (data?.dwFlags !== undefined) view.setUint32(16, Number(data.dwFlags), true);
  // 0x14: pad4
  return buf;
}

/**
 * Windows.Win32.Media.Audio.DirectMusic.DMUS_BUFFERDESC (size: 24)
 */
export interface DMUS_BUFFERDESC {
  /** u32 */
  dwSize: number;
  /** u32 */
  dwFlags: number;
  /** System.Guid */
  guidBufferFormat: Uint8Array | Deno.PointerValue | null;
  /** u32 */
  cbBuffer: number;
}

export const sizeofDMUS_BUFFERDESC = 24;

export function allocDMUS_BUFFERDESC(data?: Partial<DMUS_BUFFERDESC>): Uint8Array {
  const buf = new Uint8Array(sizeofDMUS_BUFFERDESC);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.dwSize !== undefined) view.setUint32(0, Number(data.dwSize), true);
  // 0x04: u32
  if (data?.dwFlags !== undefined) view.setUint32(4, Number(data.dwFlags), true);
  // 0x08: pointer
  if (data?.guidBufferFormat !== undefined) view.setBigUint64(8, data.guidBufferFormat === null ? 0n : BigInt(util.toPointer(data.guidBufferFormat)), true);
  // 0x10: u32
  if (data?.cbBuffer !== undefined) view.setUint32(16, Number(data.cbBuffer), true);
  // 0x14: pad4
  return buf;
}

/**
 * Windows.Win32.Media.Audio.DirectMusic.DMUS_PORTCAPS (size: 56)
 */
export interface DMUS_PORTCAPS {
  /** u32 */
  dwSize: number;
  /** u32 */
  dwFlags: number;
  /** System.Guid */
  guidPort: Uint8Array | Deno.PointerValue | null;
  /** u32 */
  dwClass: number;
  /** u32 */
  dwType: number;
  /** u32 */
  dwMemorySize: number;
  /** u32 */
  dwMaxChannelGroups: number;
  /** u32 */
  dwMaxVoices: number;
  /** u32 */
  dwMaxAudioChannels: number;
  /** u32 */
  dwEffectFlags: number;
  /** array */
  wszDescription: Deno.PointerValue | null;
}

export const sizeofDMUS_PORTCAPS = 56;

export function allocDMUS_PORTCAPS(data?: Partial<DMUS_PORTCAPS>): Uint8Array {
  const buf = new Uint8Array(sizeofDMUS_PORTCAPS);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.dwSize !== undefined) view.setUint32(0, Number(data.dwSize), true);
  // 0x04: u32
  if (data?.dwFlags !== undefined) view.setUint32(4, Number(data.dwFlags), true);
  // 0x08: pointer
  if (data?.guidPort !== undefined) view.setBigUint64(8, data.guidPort === null ? 0n : BigInt(util.toPointer(data.guidPort)), true);
  // 0x10: u32
  if (data?.dwClass !== undefined) view.setUint32(16, Number(data.dwClass), true);
  // 0x14: u32
  if (data?.dwType !== undefined) view.setUint32(20, Number(data.dwType), true);
  // 0x18: u32
  if (data?.dwMemorySize !== undefined) view.setUint32(24, Number(data.dwMemorySize), true);
  // 0x1c: u32
  if (data?.dwMaxChannelGroups !== undefined) view.setUint32(28, Number(data.dwMaxChannelGroups), true);
  // 0x20: u32
  if (data?.dwMaxVoices !== undefined) view.setUint32(32, Number(data.dwMaxVoices), true);
  // 0x24: u32
  if (data?.dwMaxAudioChannels !== undefined) view.setUint32(36, Number(data.dwMaxAudioChannels), true);
  // 0x28: u32
  if (data?.dwEffectFlags !== undefined) view.setUint32(40, Number(data.dwEffectFlags), true);
  // 0x2c: pad4
  // 0x30: pointer
  if (data?.wszDescription !== undefined) view.setBigUint64(48, data.wszDescription === null ? 0n : BigInt(util.toPointer(data.wszDescription)), true);
  return buf;
}

export type BOOL = number;

/**
 * Windows.Win32.Media.Audio.DirectMusic.DMUS_PORTPARAMS7 (size: 32)
 */
export interface DMUS_PORTPARAMS7 {
  /** u32 */
  dwSize: number;
  /** u32 */
  dwValidParams: number;
  /** u32 */
  dwVoices: number;
  /** u32 */
  dwChannelGroups: number;
  /** u32 */
  dwAudioChannels: number;
  /** u32 */
  dwSampleRate: number;
  /** u32 */
  dwEffectFlags: number;
  /** Windows.Win32.Foundation.BOOL */
  fShare: boolean;
}

export const sizeofDMUS_PORTPARAMS7 = 32;

export function allocDMUS_PORTPARAMS7(data?: Partial<DMUS_PORTPARAMS7>): Uint8Array {
  const buf = new Uint8Array(sizeofDMUS_PORTPARAMS7);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.dwSize !== undefined) view.setUint32(0, Number(data.dwSize), true);
  // 0x04: u32
  if (data?.dwValidParams !== undefined) view.setUint32(4, Number(data.dwValidParams), true);
  // 0x08: u32
  if (data?.dwVoices !== undefined) view.setUint32(8, Number(data.dwVoices), true);
  // 0x0c: u32
  if (data?.dwChannelGroups !== undefined) view.setUint32(12, Number(data.dwChannelGroups), true);
  // 0x10: u32
  if (data?.dwAudioChannels !== undefined) view.setUint32(16, Number(data.dwAudioChannels), true);
  // 0x14: u32
  if (data?.dwSampleRate !== undefined) view.setUint32(20, Number(data.dwSampleRate), true);
  // 0x18: u32
  if (data?.dwEffectFlags !== undefined) view.setUint32(24, Number(data.dwEffectFlags), true);
  // 0x1c: i32
  if (data?.fShare !== undefined) view.setInt32(28, Number(data.fShare), true);
  return buf;
}

/**
 * Windows.Win32.Media.Audio.DirectMusic.DMUS_PORTPARAMS8 (size: 40)
 */
export interface DMUS_PORTPARAMS8 {
  /** u32 */
  dwSize: number;
  /** u32 */
  dwValidParams: number;
  /** u32 */
  dwVoices: number;
  /** u32 */
  dwChannelGroups: number;
  /** u32 */
  dwAudioChannels: number;
  /** u32 */
  dwSampleRate: number;
  /** u32 */
  dwEffectFlags: number;
  /** Windows.Win32.Foundation.BOOL */
  fShare: boolean;
  /** u32 */
  dwFeatures: number;
}

export const sizeofDMUS_PORTPARAMS8 = 40;

export function allocDMUS_PORTPARAMS8(data?: Partial<DMUS_PORTPARAMS8>): Uint8Array {
  const buf = new Uint8Array(sizeofDMUS_PORTPARAMS8);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.dwSize !== undefined) view.setUint32(0, Number(data.dwSize), true);
  // 0x04: u32
  if (data?.dwValidParams !== undefined) view.setUint32(4, Number(data.dwValidParams), true);
  // 0x08: u32
  if (data?.dwVoices !== undefined) view.setUint32(8, Number(data.dwVoices), true);
  // 0x0c: u32
  if (data?.dwChannelGroups !== undefined) view.setUint32(12, Number(data.dwChannelGroups), true);
  // 0x10: u32
  if (data?.dwAudioChannels !== undefined) view.setUint32(16, Number(data.dwAudioChannels), true);
  // 0x14: u32
  if (data?.dwSampleRate !== undefined) view.setUint32(20, Number(data.dwSampleRate), true);
  // 0x18: u32
  if (data?.dwEffectFlags !== undefined) view.setUint32(24, Number(data.dwEffectFlags), true);
  // 0x1c: i32
  if (data?.fShare !== undefined) view.setInt32(28, Number(data.fShare), true);
  // 0x20: u32
  if (data?.dwFeatures !== undefined) view.setUint32(32, Number(data.dwFeatures), true);
  // 0x24: pad4
  return buf;
}

/**
 * Windows.Win32.Media.Audio.DirectMusic.DMUS_SYNTHSTATS (size: 32)
 */
export interface DMUS_SYNTHSTATS {
  /** u32 */
  dwSize: number;
  /** u32 */
  dwValidStats: number;
  /** u32 */
  dwVoices: number;
  /** u32 */
  dwTotalCPU: number;
  /** u32 */
  dwCPUPerVoice: number;
  /** u32 */
  dwLostNotes: number;
  /** u32 */
  dwFreeMemory: number;
  /** i32 */
  lPeakVolume: number;
}

export const sizeofDMUS_SYNTHSTATS = 32;

export function allocDMUS_SYNTHSTATS(data?: Partial<DMUS_SYNTHSTATS>): Uint8Array {
  const buf = new Uint8Array(sizeofDMUS_SYNTHSTATS);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.dwSize !== undefined) view.setUint32(0, Number(data.dwSize), true);
  // 0x04: u32
  if (data?.dwValidStats !== undefined) view.setUint32(4, Number(data.dwValidStats), true);
  // 0x08: u32
  if (data?.dwVoices !== undefined) view.setUint32(8, Number(data.dwVoices), true);
  // 0x0c: u32
  if (data?.dwTotalCPU !== undefined) view.setUint32(12, Number(data.dwTotalCPU), true);
  // 0x10: u32
  if (data?.dwCPUPerVoice !== undefined) view.setUint32(16, Number(data.dwCPUPerVoice), true);
  // 0x14: u32
  if (data?.dwLostNotes !== undefined) view.setUint32(20, Number(data.dwLostNotes), true);
  // 0x18: u32
  if (data?.dwFreeMemory !== undefined) view.setUint32(24, Number(data.dwFreeMemory), true);
  // 0x1c: i32
  if (data?.lPeakVolume !== undefined) view.setInt32(28, Number(data.lPeakVolume), true);
  return buf;
}

/**
 * Windows.Win32.Media.Audio.DirectMusic.DMUS_SYNTHSTATS8 (size: 40)
 */
export interface DMUS_SYNTHSTATS8 {
  /** u32 */
  dwSize: number;
  /** u32 */
  dwValidStats: number;
  /** u32 */
  dwVoices: number;
  /** u32 */
  dwTotalCPU: number;
  /** u32 */
  dwCPUPerVoice: number;
  /** u32 */
  dwLostNotes: number;
  /** u32 */
  dwFreeMemory: number;
  /** i32 */
  lPeakVolume: number;
  /** u32 */
  dwSynthMemUse: number;
}

export const sizeofDMUS_SYNTHSTATS8 = 40;

export function allocDMUS_SYNTHSTATS8(data?: Partial<DMUS_SYNTHSTATS8>): Uint8Array {
  const buf = new Uint8Array(sizeofDMUS_SYNTHSTATS8);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.dwSize !== undefined) view.setUint32(0, Number(data.dwSize), true);
  // 0x04: u32
  if (data?.dwValidStats !== undefined) view.setUint32(4, Number(data.dwValidStats), true);
  // 0x08: u32
  if (data?.dwVoices !== undefined) view.setUint32(8, Number(data.dwVoices), true);
  // 0x0c: u32
  if (data?.dwTotalCPU !== undefined) view.setUint32(12, Number(data.dwTotalCPU), true);
  // 0x10: u32
  if (data?.dwCPUPerVoice !== undefined) view.setUint32(16, Number(data.dwCPUPerVoice), true);
  // 0x14: u32
  if (data?.dwLostNotes !== undefined) view.setUint32(20, Number(data.dwLostNotes), true);
  // 0x18: u32
  if (data?.dwFreeMemory !== undefined) view.setUint32(24, Number(data.dwFreeMemory), true);
  // 0x1c: i32
  if (data?.lPeakVolume !== undefined) view.setInt32(28, Number(data.lPeakVolume), true);
  // 0x20: u32
  if (data?.dwSynthMemUse !== undefined) view.setUint32(32, Number(data.dwSynthMemUse), true);
  // 0x24: pad4
  return buf;
}

/**
 * Windows.Win32.Media.Audio.DirectMusic.DMUS_WAVES_REVERB_PARAMS (size: 16)
 */
export interface DMUS_WAVES_REVERB_PARAMS {
  /** f32 */
  fInGain: number;
  /** f32 */
  fReverbMix: number;
  /** f32 */
  fReverbTime: number;
  /** f32 */
  fHighFreqRTRatio: number;
}

export const sizeofDMUS_WAVES_REVERB_PARAMS = 16;

export function allocDMUS_WAVES_REVERB_PARAMS(data?: Partial<DMUS_WAVES_REVERB_PARAMS>): Uint8Array {
  const buf = new Uint8Array(sizeofDMUS_WAVES_REVERB_PARAMS);
  const view = new DataView(buf.buffer);
  // 0x00: f32
  if (data?.fInGain !== undefined) view.setFloat32(0, Number(data.fInGain), true);
  // 0x04: f32
  if (data?.fReverbMix !== undefined) view.setFloat32(4, Number(data.fReverbMix), true);
  // 0x08: f32
  if (data?.fReverbTime !== undefined) view.setFloat32(8, Number(data.fReverbTime), true);
  // 0x0c: f32
  if (data?.fHighFreqRTRatio !== undefined) view.setFloat32(12, Number(data.fHighFreqRTRatio), true);
  return buf;
}

/**
 * Windows.Win32.Media.Audio.DirectMusic.DMUS_CLOCKINFO7 (size: 24)
 */
export interface DMUS_CLOCKINFO7 {
  /** u32 */
  dwSize: number;
  /** Windows.Win32.Media.Audio.DirectMusic.DMUS_CLOCKTYPE */
  ctType: DMUS_CLOCKTYPE;
  /** System.Guid */
  guidClock: Uint8Array | Deno.PointerValue | null;
  /** array */
  wszDescription: Deno.PointerValue | null;
}

export const sizeofDMUS_CLOCKINFO7 = 24;

export function allocDMUS_CLOCKINFO7(data?: Partial<DMUS_CLOCKINFO7>): Uint8Array {
  const buf = new Uint8Array(sizeofDMUS_CLOCKINFO7);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.dwSize !== undefined) view.setUint32(0, Number(data.dwSize), true);
  // 0x04: i32
  if (data?.ctType !== undefined) view.setInt32(4, Number(data.ctType), true);
  // 0x08: pointer
  if (data?.guidClock !== undefined) view.setBigUint64(8, data.guidClock === null ? 0n : BigInt(util.toPointer(data.guidClock)), true);
  // 0x10: pointer
  if (data?.wszDescription !== undefined) view.setBigUint64(16, data.wszDescription === null ? 0n : BigInt(util.toPointer(data.wszDescription)), true);
  return buf;
}

/**
 * Windows.Win32.Media.Audio.DirectMusic.DMUS_CLOCKINFO8 (size: 32)
 */
export interface DMUS_CLOCKINFO8 {
  /** u32 */
  dwSize: number;
  /** Windows.Win32.Media.Audio.DirectMusic.DMUS_CLOCKTYPE */
  ctType: DMUS_CLOCKTYPE;
  /** System.Guid */
  guidClock: Uint8Array | Deno.PointerValue | null;
  /** array */
  wszDescription: Deno.PointerValue | null;
  /** u32 */
  dwFlags: number;
}

export const sizeofDMUS_CLOCKINFO8 = 32;

export function allocDMUS_CLOCKINFO8(data?: Partial<DMUS_CLOCKINFO8>): Uint8Array {
  const buf = new Uint8Array(sizeofDMUS_CLOCKINFO8);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.dwSize !== undefined) view.setUint32(0, Number(data.dwSize), true);
  // 0x04: i32
  if (data?.ctType !== undefined) view.setInt32(4, Number(data.ctType), true);
  // 0x08: pointer
  if (data?.guidClock !== undefined) view.setBigUint64(8, data.guidClock === null ? 0n : BigInt(util.toPointer(data.guidClock)), true);
  // 0x10: pointer
  if (data?.wszDescription !== undefined) view.setBigUint64(16, data.wszDescription === null ? 0n : BigInt(util.toPointer(data.wszDescription)), true);
  // 0x18: u32
  if (data?.dwFlags !== undefined) view.setUint32(24, Number(data.dwFlags), true);
  // 0x1c: pad4
  return buf;
}

/**
 * Windows.Win32.Media.Audio.DirectMusic.DMUS_VOICE_STATE (size: 16)
 */
export interface DMUS_VOICE_STATE {
  /** Windows.Win32.Foundation.BOOL */
  bExists: boolean;
  /** u64 */
  spPosition: Deno.PointerValue;
}

export const sizeofDMUS_VOICE_STATE = 16;

export function allocDMUS_VOICE_STATE(data?: Partial<DMUS_VOICE_STATE>): Uint8Array {
  const buf = new Uint8Array(sizeofDMUS_VOICE_STATE);
  const view = new DataView(buf.buffer);
  // 0x00: i32
  if (data?.bExists !== undefined) view.setInt32(0, Number(data.bExists), true);
  // 0x04: pad4
  // 0x08: u64
  if (data?.spPosition !== undefined) view.setBigUint64(8, BigInt(data.spPosition), true);
  return buf;
}

export type PSTR = Deno.PointerValue | Uint8Array | null;

/**
 * Windows.Win32.Media.Audio.DirectMusic.DSPROPERTY_DIRECTSOUNDDEVICE_WAVEDEVICEMAPPING_A_DATA (size: 24)
 */
export interface DSPROPERTY_DIRECTSOUNDDEVICE_WAVEDEVICEMAPPING_A_DATA {
  /** Windows.Win32.Foundation.PSTR */
  DeviceName: string | null;
  /** Windows.Win32.Media.Audio.DirectMusic.DIRECTSOUNDDEVICE_DATAFLOW */
  DataFlow: DIRECTSOUNDDEVICE_DATAFLOW;
  /** System.Guid */
  DeviceId: Uint8Array | Deno.PointerValue | null;
}

export const sizeofDSPROPERTY_DIRECTSOUNDDEVICE_WAVEDEVICEMAPPING_A_DATA = 24;

export function allocDSPROPERTY_DIRECTSOUNDDEVICE_WAVEDEVICEMAPPING_A_DATA(data?: Partial<DSPROPERTY_DIRECTSOUNDDEVICE_WAVEDEVICEMAPPING_A_DATA>): Uint8Array {
  const buf = new Uint8Array(sizeofDSPROPERTY_DIRECTSOUNDDEVICE_WAVEDEVICEMAPPING_A_DATA);
  const view = new DataView(buf.buffer);
  // 0x00: buffer
  if (data?.DeviceName !== undefined) {
    (buf as any)._f0 = util.pstrToFfi(data.DeviceName);
    view.setBigUint64(0, (buf as any)._f0 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f0)), true);
  }
  // 0x08: i32
  if (data?.DataFlow !== undefined) view.setInt32(8, Number(data.DataFlow), true);
  // 0x0c: pad4
  // 0x10: pointer
  if (data?.DeviceId !== undefined) view.setBigUint64(16, data.DeviceId === null ? 0n : BigInt(util.toPointer(data.DeviceId)), true);
  return buf;
}

export type PWSTR = Deno.PointerValue | Uint8Array | null;

/**
 * Windows.Win32.Media.Audio.DirectMusic.DSPROPERTY_DIRECTSOUNDDEVICE_WAVEDEVICEMAPPING_W_DATA (size: 24)
 */
export interface DSPROPERTY_DIRECTSOUNDDEVICE_WAVEDEVICEMAPPING_W_DATA {
  /** Windows.Win32.Foundation.PWSTR */
  DeviceName: string | null;
  /** Windows.Win32.Media.Audio.DirectMusic.DIRECTSOUNDDEVICE_DATAFLOW */
  DataFlow: DIRECTSOUNDDEVICE_DATAFLOW;
  /** System.Guid */
  DeviceId: Uint8Array | Deno.PointerValue | null;
}

export const sizeofDSPROPERTY_DIRECTSOUNDDEVICE_WAVEDEVICEMAPPING_W_DATA = 24;

export function allocDSPROPERTY_DIRECTSOUNDDEVICE_WAVEDEVICEMAPPING_W_DATA(data?: Partial<DSPROPERTY_DIRECTSOUNDDEVICE_WAVEDEVICEMAPPING_W_DATA>): Uint8Array {
  const buf = new Uint8Array(sizeofDSPROPERTY_DIRECTSOUNDDEVICE_WAVEDEVICEMAPPING_W_DATA);
  const view = new DataView(buf.buffer);
  // 0x00: buffer
  if (data?.DeviceName !== undefined) {
    (buf as any)._f0 = util.pwstrToFfi(data.DeviceName);
    view.setBigUint64(0, (buf as any)._f0 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f0)), true);
  }
  // 0x08: i32
  if (data?.DataFlow !== undefined) view.setInt32(8, Number(data.DataFlow), true);
  // 0x0c: pad4
  // 0x10: pointer
  if (data?.DeviceId !== undefined) view.setBigUint64(16, data.DeviceId === null ? 0n : BigInt(util.toPointer(data.DeviceId)), true);
  return buf;
}

/**
 * Windows.Win32.Media.Audio.DirectMusic.DSPROPERTY_DIRECTSOUNDDEVICE_DESCRIPTION_1_DATA (size: 56)
 */
export interface DSPROPERTY_DIRECTSOUNDDEVICE_DESCRIPTION_1_DATA {
  /** System.Guid */
  DeviceId: Uint8Array | Deno.PointerValue | null;
  /** array */
  DescriptionA: Deno.PointerValue | null;
  /** array */
  DescriptionW: Deno.PointerValue | null;
  /** array */
  ModuleA: Deno.PointerValue | null;
  /** array */
  ModuleW: Deno.PointerValue | null;
  /** Windows.Win32.Media.Audio.DirectMusic.DIRECTSOUNDDEVICE_TYPE */
  Type: DIRECTSOUNDDEVICE_TYPE;
  /** Windows.Win32.Media.Audio.DirectMusic.DIRECTSOUNDDEVICE_DATAFLOW */
  DataFlow: DIRECTSOUNDDEVICE_DATAFLOW;
  /** u32 */
  WaveDeviceId: number;
  /** u32 */
  Devnode: number;
}

export const sizeofDSPROPERTY_DIRECTSOUNDDEVICE_DESCRIPTION_1_DATA = 56;

export function allocDSPROPERTY_DIRECTSOUNDDEVICE_DESCRIPTION_1_DATA(data?: Partial<DSPROPERTY_DIRECTSOUNDDEVICE_DESCRIPTION_1_DATA>): Uint8Array {
  const buf = new Uint8Array(sizeofDSPROPERTY_DIRECTSOUNDDEVICE_DESCRIPTION_1_DATA);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.DeviceId !== undefined) view.setBigUint64(0, data.DeviceId === null ? 0n : BigInt(util.toPointer(data.DeviceId)), true);
  // 0x08: pointer
  if (data?.DescriptionA !== undefined) view.setBigUint64(8, data.DescriptionA === null ? 0n : BigInt(util.toPointer(data.DescriptionA)), true);
  // 0x10: pointer
  if (data?.DescriptionW !== undefined) view.setBigUint64(16, data.DescriptionW === null ? 0n : BigInt(util.toPointer(data.DescriptionW)), true);
  // 0x18: pointer
  if (data?.ModuleA !== undefined) view.setBigUint64(24, data.ModuleA === null ? 0n : BigInt(util.toPointer(data.ModuleA)), true);
  // 0x20: pointer
  if (data?.ModuleW !== undefined) view.setBigUint64(32, data.ModuleW === null ? 0n : BigInt(util.toPointer(data.ModuleW)), true);
  // 0x28: i32
  if (data?.Type !== undefined) view.setInt32(40, Number(data.Type), true);
  // 0x2c: i32
  if (data?.DataFlow !== undefined) view.setInt32(44, Number(data.DataFlow), true);
  // 0x30: u32
  if (data?.WaveDeviceId !== undefined) view.setUint32(48, Number(data.WaveDeviceId), true);
  // 0x34: u32
  if (data?.Devnode !== undefined) view.setUint32(52, Number(data.Devnode), true);
  return buf;
}

/**
 * Windows.Win32.Media.Audio.DirectMusic.DSPROPERTY_DIRECTSOUNDDEVICE_DESCRIPTION_A_DATA (size: 48)
 */
export interface DSPROPERTY_DIRECTSOUNDDEVICE_DESCRIPTION_A_DATA {
  /** Windows.Win32.Media.Audio.DirectMusic.DIRECTSOUNDDEVICE_TYPE */
  Type: DIRECTSOUNDDEVICE_TYPE;
  /** Windows.Win32.Media.Audio.DirectMusic.DIRECTSOUNDDEVICE_DATAFLOW */
  DataFlow: DIRECTSOUNDDEVICE_DATAFLOW;
  /** System.Guid */
  DeviceId: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Foundation.PSTR */
  Description: string | null;
  /** Windows.Win32.Foundation.PSTR */
  Module: string | null;
  /** Windows.Win32.Foundation.PSTR */
  Interface: string | null;
  /** u32 */
  WaveDeviceId: number;
}

export const sizeofDSPROPERTY_DIRECTSOUNDDEVICE_DESCRIPTION_A_DATA = 48;

export function allocDSPROPERTY_DIRECTSOUNDDEVICE_DESCRIPTION_A_DATA(data?: Partial<DSPROPERTY_DIRECTSOUNDDEVICE_DESCRIPTION_A_DATA>): Uint8Array {
  const buf = new Uint8Array(sizeofDSPROPERTY_DIRECTSOUNDDEVICE_DESCRIPTION_A_DATA);
  const view = new DataView(buf.buffer);
  // 0x00: i32
  if (data?.Type !== undefined) view.setInt32(0, Number(data.Type), true);
  // 0x04: i32
  if (data?.DataFlow !== undefined) view.setInt32(4, Number(data.DataFlow), true);
  // 0x08: pointer
  if (data?.DeviceId !== undefined) view.setBigUint64(8, data.DeviceId === null ? 0n : BigInt(util.toPointer(data.DeviceId)), true);
  // 0x10: buffer
  if (data?.Description !== undefined) {
    (buf as any)._f16 = util.pstrToFfi(data.Description);
    view.setBigUint64(16, (buf as any)._f16 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f16)), true);
  }
  // 0x18: buffer
  if (data?.Module !== undefined) {
    (buf as any)._f24 = util.pstrToFfi(data.Module);
    view.setBigUint64(24, (buf as any)._f24 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f24)), true);
  }
  // 0x20: buffer
  if (data?.Interface !== undefined) {
    (buf as any)._f32 = util.pstrToFfi(data.Interface);
    view.setBigUint64(32, (buf as any)._f32 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f32)), true);
  }
  // 0x28: u32
  if (data?.WaveDeviceId !== undefined) view.setUint32(40, Number(data.WaveDeviceId), true);
  // 0x2c: pad4
  return buf;
}

/**
 * Windows.Win32.Media.Audio.DirectMusic.DSPROPERTY_DIRECTSOUNDDEVICE_DESCRIPTION_W_DATA (size: 48)
 */
export interface DSPROPERTY_DIRECTSOUNDDEVICE_DESCRIPTION_W_DATA {
  /** Windows.Win32.Media.Audio.DirectMusic.DIRECTSOUNDDEVICE_TYPE */
  Type: DIRECTSOUNDDEVICE_TYPE;
  /** Windows.Win32.Media.Audio.DirectMusic.DIRECTSOUNDDEVICE_DATAFLOW */
  DataFlow: DIRECTSOUNDDEVICE_DATAFLOW;
  /** System.Guid */
  DeviceId: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Foundation.PWSTR */
  Description: string | null;
  /** Windows.Win32.Foundation.PWSTR */
  Module: string | null;
  /** Windows.Win32.Foundation.PWSTR */
  Interface: string | null;
  /** u32 */
  WaveDeviceId: number;
}

export const sizeofDSPROPERTY_DIRECTSOUNDDEVICE_DESCRIPTION_W_DATA = 48;

export function allocDSPROPERTY_DIRECTSOUNDDEVICE_DESCRIPTION_W_DATA(data?: Partial<DSPROPERTY_DIRECTSOUNDDEVICE_DESCRIPTION_W_DATA>): Uint8Array {
  const buf = new Uint8Array(sizeofDSPROPERTY_DIRECTSOUNDDEVICE_DESCRIPTION_W_DATA);
  const view = new DataView(buf.buffer);
  // 0x00: i32
  if (data?.Type !== undefined) view.setInt32(0, Number(data.Type), true);
  // 0x04: i32
  if (data?.DataFlow !== undefined) view.setInt32(4, Number(data.DataFlow), true);
  // 0x08: pointer
  if (data?.DeviceId !== undefined) view.setBigUint64(8, data.DeviceId === null ? 0n : BigInt(util.toPointer(data.DeviceId)), true);
  // 0x10: buffer
  if (data?.Description !== undefined) {
    (buf as any)._f16 = util.pwstrToFfi(data.Description);
    view.setBigUint64(16, (buf as any)._f16 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f16)), true);
  }
  // 0x18: buffer
  if (data?.Module !== undefined) {
    (buf as any)._f24 = util.pwstrToFfi(data.Module);
    view.setBigUint64(24, (buf as any)._f24 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f24)), true);
  }
  // 0x20: buffer
  if (data?.Interface !== undefined) {
    (buf as any)._f32 = util.pwstrToFfi(data.Interface);
    view.setBigUint64(32, (buf as any)._f32 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f32)), true);
  }
  // 0x28: u32
  if (data?.WaveDeviceId !== undefined) view.setUint32(40, Number(data.WaveDeviceId), true);
  // 0x2c: pad4
  return buf;
}

/**
 * Windows.Win32.Media.Audio.DirectMusic.DSPROPERTY_DIRECTSOUNDDEVICE_ENUMERATE_1_DATA (size: 16)
 */
export interface DSPROPERTY_DIRECTSOUNDDEVICE_ENUMERATE_1_DATA {
  /** Windows.Win32.Media.Audio.DirectMusic.LPFNDIRECTSOUNDDEVICEENUMERATECALLBACK1 */
  Callback: Uint8Array | Deno.PointerValue | null;
  /** ptr */
  Context: Deno.PointerValue | Uint8Array | null;
}

export const sizeofDSPROPERTY_DIRECTSOUNDDEVICE_ENUMERATE_1_DATA = 16;

export function allocDSPROPERTY_DIRECTSOUNDDEVICE_ENUMERATE_1_DATA(data?: Partial<DSPROPERTY_DIRECTSOUNDDEVICE_ENUMERATE_1_DATA>): Uint8Array {
  const buf = new Uint8Array(sizeofDSPROPERTY_DIRECTSOUNDDEVICE_ENUMERATE_1_DATA);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.Callback !== undefined) view.setBigUint64(0, data.Callback === null ? 0n : BigInt(util.toPointer(data.Callback)), true);
  // 0x08: pointer
  if (data?.Context !== undefined) view.setBigUint64(8, data.Context === null ? 0n : BigInt(util.toPointer(data.Context)), true);
  return buf;
}

/**
 * Windows.Win32.Media.Audio.DirectMusic.DSPROPERTY_DIRECTSOUNDDEVICE_ENUMERATE_A_DATA (size: 16)
 */
export interface DSPROPERTY_DIRECTSOUNDDEVICE_ENUMERATE_A_DATA {
  /** Windows.Win32.Media.Audio.DirectMusic.LPFNDIRECTSOUNDDEVICEENUMERATECALLBACKA */
  Callback: Uint8Array | Deno.PointerValue | null;
  /** ptr */
  Context: Deno.PointerValue | Uint8Array | null;
}

export const sizeofDSPROPERTY_DIRECTSOUNDDEVICE_ENUMERATE_A_DATA = 16;

export function allocDSPROPERTY_DIRECTSOUNDDEVICE_ENUMERATE_A_DATA(data?: Partial<DSPROPERTY_DIRECTSOUNDDEVICE_ENUMERATE_A_DATA>): Uint8Array {
  const buf = new Uint8Array(sizeofDSPROPERTY_DIRECTSOUNDDEVICE_ENUMERATE_A_DATA);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.Callback !== undefined) view.setBigUint64(0, data.Callback === null ? 0n : BigInt(util.toPointer(data.Callback)), true);
  // 0x08: pointer
  if (data?.Context !== undefined) view.setBigUint64(8, data.Context === null ? 0n : BigInt(util.toPointer(data.Context)), true);
  return buf;
}

/**
 * Windows.Win32.Media.Audio.DirectMusic.DSPROPERTY_DIRECTSOUNDDEVICE_ENUMERATE_W_DATA (size: 16)
 */
export interface DSPROPERTY_DIRECTSOUNDDEVICE_ENUMERATE_W_DATA {
  /** Windows.Win32.Media.Audio.DirectMusic.LPFNDIRECTSOUNDDEVICEENUMERATECALLBACKW */
  Callback: Uint8Array | Deno.PointerValue | null;
  /** ptr */
  Context: Deno.PointerValue | Uint8Array | null;
}

export const sizeofDSPROPERTY_DIRECTSOUNDDEVICE_ENUMERATE_W_DATA = 16;

export function allocDSPROPERTY_DIRECTSOUNDDEVICE_ENUMERATE_W_DATA(data?: Partial<DSPROPERTY_DIRECTSOUNDDEVICE_ENUMERATE_W_DATA>): Uint8Array {
  const buf = new Uint8Array(sizeofDSPROPERTY_DIRECTSOUNDDEVICE_ENUMERATE_W_DATA);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.Callback !== undefined) view.setBigUint64(0, data.Callback === null ? 0n : BigInt(util.toPointer(data.Callback)), true);
  // 0x08: pointer
  if (data?.Context !== undefined) view.setBigUint64(8, data.Context === null ? 0n : BigInt(util.toPointer(data.Context)), true);
  return buf;
}

/**
 * Windows.Win32.Media.Audio.DirectMusic.DVAudInfo (size: 40)
 */
export interface DVAudInfo {
  /** array */
  bAudStyle: Deno.PointerValue | null;
  /** array */
  bAudQu: Deno.PointerValue | null;
  /** u8 */
  bNumAudPin: number;
  /** array */
  wAvgSamplesPerPinPerFrm: Deno.PointerValue | null;
  /** u16 */
  wBlkMode: number;
  /** u16 */
  wDIFMode: number;
  /** u16 */
  wBlkDiv: number;
}

export const sizeofDVAudInfo = 40;

export function allocDVAudInfo(data?: Partial<DVAudInfo>): Uint8Array {
  const buf = new Uint8Array(sizeofDVAudInfo);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.bAudStyle !== undefined) view.setBigUint64(0, data.bAudStyle === null ? 0n : BigInt(util.toPointer(data.bAudStyle)), true);
  // 0x08: pointer
  if (data?.bAudQu !== undefined) view.setBigUint64(8, data.bAudQu === null ? 0n : BigInt(util.toPointer(data.bAudQu)), true);
  // 0x10: u8
  if (data?.bNumAudPin !== undefined) view.setUint8(16, Number(data.bNumAudPin));
  // 0x11: pad7
  // 0x18: pointer
  if (data?.wAvgSamplesPerPinPerFrm !== undefined) view.setBigUint64(24, data.wAvgSamplesPerPinPerFrm === null ? 0n : BigInt(util.toPointer(data.wAvgSamplesPerPinPerFrm)), true);
  // 0x20: u16
  if (data?.wBlkMode !== undefined) view.setUint16(32, Number(data.wBlkMode), true);
  // 0x22: u16
  if (data?.wDIFMode !== undefined) view.setUint16(34, Number(data.wDIFMode), true);
  // 0x24: u16
  if (data?.wBlkDiv !== undefined) view.setUint16(36, Number(data.wBlkDiv), true);
  // 0x26: pad2
  return buf;
}

/**
 * Windows.Win32.Media.Audio.DirectMusic.MDEVICECAPSEX (size: 16)
 */
export interface MDEVICECAPSEX {
  /** u32 */
  cbSize: number;
  /** ptr */
  pCaps: Deno.PointerValue | Uint8Array | null;
}

export const sizeofMDEVICECAPSEX = 16;

export function allocMDEVICECAPSEX(data?: Partial<MDEVICECAPSEX>): Uint8Array {
  const buf = new Uint8Array(sizeofMDEVICECAPSEX);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.cbSize !== undefined) view.setUint32(0, Number(data.cbSize), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.pCaps !== undefined) view.setBigUint64(8, data.pCaps === null ? 0n : BigInt(util.toPointer(data.pCaps)), true);
  return buf;
}

export type HMIDI = Deno.PointerValue;

/**
 * Windows.Win32.Media.Audio.DirectMusic.MIDIOPENDESC (size: 48)
 */
export interface MIDIOPENDESC {
  /** Windows.Win32.Media.Audio.HMIDI */
  hMidi: Uint8Array | Deno.PointerValue | null;
  /** usize */
  dwCallback: Deno.PointerValue;
  /** usize */
  dwInstance: Deno.PointerValue;
  /** usize */
  dnDevNode: Deno.PointerValue;
  /** u32 */
  cIds: number;
  /** array */
  rgIds: Deno.PointerValue | null;
}

export const sizeofMIDIOPENDESC = 48;

export function allocMIDIOPENDESC(data?: Partial<MIDIOPENDESC>): Uint8Array {
  const buf = new Uint8Array(sizeofMIDIOPENDESC);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.hMidi !== undefined) view.setBigUint64(0, data.hMidi === null ? 0n : BigInt(util.toPointer(data.hMidi)), true);
  // 0x08: usize
  if (data?.dwCallback !== undefined) view.setBigUint64(8, BigInt(data.dwCallback), true);
  // 0x10: usize
  if (data?.dwInstance !== undefined) view.setBigUint64(16, BigInt(data.dwInstance), true);
  // 0x18: usize
  if (data?.dnDevNode !== undefined) view.setBigUint64(24, BigInt(data.dnDevNode), true);
  // 0x20: u32
  if (data?.cIds !== undefined) view.setUint32(32, Number(data.cIds), true);
  // 0x24: pad4
  // 0x28: pointer
  if (data?.rgIds !== undefined) view.setBigUint64(40, data.rgIds === null ? 0n : BigInt(util.toPointer(data.rgIds)), true);
  return buf;
}

// Native Libraries

// Symbols

