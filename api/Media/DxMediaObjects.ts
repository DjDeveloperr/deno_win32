/// Auto-generated by Deno Win32: Windows.Win32.Media.DxMediaObjects.Apis

import * as util from "../../util.ts";

// Enums
export type _DMO_INPUT_DATA_BUFFER_FLAGS = number;
export type _DMO_OUTPUT_DATA_BUFFER_FLAGS = number;
export type _DMO_INPUT_STATUS_FLAGS = number;
export type _DMO_INPUT_STREAM_INFO_FLAGS = number;
export type _DMO_OUTPUT_STREAM_INFO_FLAGS = number;
export type _DMO_SET_TYPE_FLAGS = number;
export type _DMO_PROCESS_OUTPUT_FLAGS = number;
export type _DMO_INPLACE_PROCESS_FLAGS = number;
export type _DMO_QUALITY_STATUS_FLAGS = number;
export type _DMO_VIDEO_OUTPUT_STREAM_FLAGS = number;
export type DMO_REGISTER_FLAGS = number;
export type DMO_ENUM_FLAGS = number;

// Constants
export const DMO_E_INVALIDSTREAMINDEX = 288795544456004097n;
export const DMO_E_INVALIDTYPE = 1187558720002;
export const DMO_E_TYPE_NOT_SET = 288797743479259651n;
export const DMO_E_NOTACCEPTING = 288798842990887428n;
export const DMO_E_TYPE_NOT_ACCEPTED = 288799942502515205n;
export const DMO_E_NO_MORE_ITEMS = 288801042014142982n;
export const DMO_INPUT_DATA_BUFFERF_SYNCPOINT = 1;
export const DMO_INPUT_DATA_BUFFERF_TIME = 2;
export const DMO_INPUT_DATA_BUFFERF_TIMELENGTH = 4;
export const DMO_INPUT_DATA_BUFFERF_DISCONTINUITY = 8;
export const DMO_OUTPUT_DATA_BUFFERF_SYNCPOINT = 1;
export const DMO_OUTPUT_DATA_BUFFERF_TIME = 2;
export const DMO_OUTPUT_DATA_BUFFERF_TIMELENGTH = 4;
export const DMO_OUTPUT_DATA_BUFFERF_DISCONTINUITY = 8;
export const DMO_OUTPUT_DATA_BUFFERF_INCOMPLETE = 16777216;
export const DMO_INPUT_STATUSF_ACCEPT_DATA = 1;
export const DMO_INPUT_STREAMF_WHOLE_SAMPLES = 1;
export const DMO_INPUT_STREAMF_SINGLE_SAMPLE_PER_BUFFER = 2;
export const DMO_INPUT_STREAMF_FIXED_SAMPLE_SIZE = 4;
export const DMO_INPUT_STREAMF_HOLDS_BUFFERS = 8;
export const DMO_OUTPUT_STREAMF_WHOLE_SAMPLES = 1;
export const DMO_OUTPUT_STREAMF_SINGLE_SAMPLE_PER_BUFFER = 2;
export const DMO_OUTPUT_STREAMF_FIXED_SAMPLE_SIZE = 4;
export const DMO_OUTPUT_STREAMF_DISCARDABLE = 8;
export const DMO_OUTPUT_STREAMF_OPTIONAL = 16;
export const DMO_SET_TYPEF_TEST_ONLY = 1;
export const DMO_SET_TYPEF_CLEAR = 2;
export const DMO_PROCESS_OUTPUT_DISCARD_WHEN_NO_BUFFER = 1;
export const DMO_INPLACE_NORMAL = 0;
export const DMO_INPLACE_ZERO = 1;
export const DMO_QUALITY_STATUS_ENABLED = 1;
export const DMO_VOSF_NEEDS_PREVIOUS_SAMPLE = 1;
export const DMO_REGISTERF_IS_KEYED = 1;
export const DMO_ENUMF_INCLUDE_KEYED = 1;

// Structs

export type BOOL = number;

/**
 * Windows.Win32.Media.DxMediaObjects.DMO_MEDIA_TYPE (size: 64)
 */
export interface DMO_MEDIA_TYPE {
  /** System.Guid */
  majortype: Uint8Array | Deno.PointerValue | null;
  /** System.Guid */
  subtype: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Foundation.BOOL */
  bFixedSizeSamples: boolean;
  /** Windows.Win32.Foundation.BOOL */
  bTemporalCompression: boolean;
  /** u32 */
  lSampleSize: number;
  /** System.Guid */
  formattype: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.System.Com.IUnknown */
  pUnk: Uint8Array | Deno.PointerValue | null;
  /** u32 */
  cbFormat: number;
  /** ptr */
  pbFormat: Deno.PointerValue | Uint8Array | null;
}

export const sizeofDMO_MEDIA_TYPE = 64;

export function allocDMO_MEDIA_TYPE(data?: Partial<DMO_MEDIA_TYPE>): Uint8Array {
  const buf = new Uint8Array(sizeofDMO_MEDIA_TYPE);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.majortype !== undefined) view.setBigUint64(0, data.majortype === null ? 0n : BigInt(util.toPointer(data.majortype)), true);
  // 0x08: pointer
  if (data?.subtype !== undefined) view.setBigUint64(8, data.subtype === null ? 0n : BigInt(util.toPointer(data.subtype)), true);
  // 0x10: i32
  if (data?.bFixedSizeSamples !== undefined) view.setInt32(16, Number(data.bFixedSizeSamples), true);
  // 0x14: i32
  if (data?.bTemporalCompression !== undefined) view.setInt32(20, Number(data.bTemporalCompression), true);
  // 0x18: u32
  if (data?.lSampleSize !== undefined) view.setUint32(24, Number(data.lSampleSize), true);
  // 0x1c: pad4
  // 0x20: pointer
  if (data?.formattype !== undefined) view.setBigUint64(32, data.formattype === null ? 0n : BigInt(util.toPointer(data.formattype)), true);
  // 0x28: pointer
  if (data?.pUnk !== undefined) view.setBigUint64(40, data.pUnk === null ? 0n : BigInt(util.toPointer(data.pUnk)), true);
  // 0x30: u32
  if (data?.cbFormat !== undefined) view.setUint32(48, Number(data.cbFormat), true);
  // 0x34: pad4
  // 0x38: pointer
  if (data?.pbFormat !== undefined) view.setBigUint64(56, data.pbFormat === null ? 0n : BigInt(util.toPointer(data.pbFormat)), true);
  return buf;
}

/**
 * Windows.Win32.Media.DxMediaObjects.DMO_OUTPUT_DATA_BUFFER (size: 32)
 */
export interface DMO_OUTPUT_DATA_BUFFER {
  /** Windows.Win32.Media.DxMediaObjects.IMediaBuffer */
  pBuffer: Uint8Array | Deno.PointerValue | null;
  /** u32 */
  dwStatus: number;
  /** i64 */
  rtTimestamp: Deno.PointerValue;
  /** i64 */
  rtTimelength: Deno.PointerValue;
}

export const sizeofDMO_OUTPUT_DATA_BUFFER = 32;

export function allocDMO_OUTPUT_DATA_BUFFER(data?: Partial<DMO_OUTPUT_DATA_BUFFER>): Uint8Array {
  const buf = new Uint8Array(sizeofDMO_OUTPUT_DATA_BUFFER);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.pBuffer !== undefined) view.setBigUint64(0, data.pBuffer === null ? 0n : BigInt(util.toPointer(data.pBuffer)), true);
  // 0x08: u32
  if (data?.dwStatus !== undefined) view.setUint32(8, Number(data.dwStatus), true);
  // 0x0c: pad4
  // 0x10: i64
  if (data?.rtTimestamp !== undefined) view.setBigInt64(16, BigInt(data.rtTimestamp), true);
  // 0x18: i64
  if (data?.rtTimelength !== undefined) view.setBigInt64(24, BigInt(data.rtTimelength), true);
  return buf;
}

/**
 * Windows.Win32.Media.DxMediaObjects.DMO_PARTIAL_MEDIATYPE (size: 16)
 */
export interface DMO_PARTIAL_MEDIATYPE {
  /** System.Guid */
  type: Uint8Array | Deno.PointerValue | null;
  /** System.Guid */
  subtype: Uint8Array | Deno.PointerValue | null;
}

export const sizeofDMO_PARTIAL_MEDIATYPE = 16;

export function allocDMO_PARTIAL_MEDIATYPE(data?: Partial<DMO_PARTIAL_MEDIATYPE>): Uint8Array {
  const buf = new Uint8Array(sizeofDMO_PARTIAL_MEDIATYPE);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.type !== undefined) view.setBigUint64(0, data.type === null ? 0n : BigInt(util.toPointer(data.type)), true);
  // 0x08: pointer
  if (data?.subtype !== undefined) view.setBigUint64(8, data.subtype === null ? 0n : BigInt(util.toPointer(data.subtype)), true);
  return buf;
}

export type PWSTR = Deno.PointerValue | Uint8Array | null;

export type HRESULT = number;

// Native Libraries

try {
  var libmsdmo_dll = Deno.dlopen("msdmo.dll", {
    DMORegister: {
      parameters: ["buffer", "pointer", "pointer", "u32", "u32", "pointer", "u32", "pointer"],
      result: "pointer",
    },
    DMOUnregister: {
      parameters: ["pointer", "pointer"],
      result: "pointer",
    },
    DMOEnum: {
      parameters: ["pointer", "u32", "u32", "pointer", "u32", "pointer", "pointer"],
      result: "pointer",
    },
    DMOGetTypes: {
      parameters: ["pointer", "u32", "pointer", "pointer", "u32", "pointer", "pointer"],
      result: "pointer",
    },
    DMOGetName: {
      parameters: ["pointer", "buffer"],
      result: "pointer",
    },
    MoInitMediaType: {
      parameters: ["pointer", "u32"],
      result: "pointer",
    },
    MoFreeMediaType: {
      parameters: ["pointer"],
      result: "pointer",
    },
    MoCopyMediaType: {
      parameters: ["pointer", "pointer"],
      result: "pointer",
    },
    MoCreateMediaType: {
      parameters: ["pointer", "u32"],
      result: "pointer",
    },
    MoDeleteMediaType: {
      parameters: ["pointer"],
      result: "pointer",
    },
    MoDuplicateMediaType: {
      parameters: ["pointer", "pointer"],
      result: "pointer",
    },
  }).symbols;
} catch(e) { /* ignore */ }

// Symbols

export function DMORegister(
  szName: string | null /* Windows.Win32.Foundation.PWSTR */,
  clsidDMO: Deno.PointerValue | Uint8Array | null /* ptr */,
  guidCategory: Deno.PointerValue | Uint8Array | null /* ptr */,
  dwFlags: number /* u32 */,
  cInTypes: number /* u32 */,
  pInTypes: Deno.PointerValue | Uint8Array | null /* ptr */,
  cOutTypes: number /* u32 */,
  pOutTypes: Deno.PointerValue | Uint8Array | null /* ptr */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libmsdmo_dll.DMORegister(util.pwstrToFfi(szName), util.toPointer(clsidDMO), util.toPointer(guidCategory), dwFlags, cInTypes, util.toPointer(pInTypes), cOutTypes, util.toPointer(pOutTypes)));
}

export function DMOUnregister(
  clsidDMO: Deno.PointerValue | Uint8Array | null /* ptr */,
  guidCategory: Deno.PointerValue | Uint8Array | null /* ptr */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libmsdmo_dll.DMOUnregister(util.toPointer(clsidDMO), util.toPointer(guidCategory)));
}

export function DMOEnum(
  guidCategory: Deno.PointerValue | Uint8Array | null /* ptr */,
  dwFlags: number /* u32 */,
  cInTypes: number /* u32 */,
  pInTypes: Deno.PointerValue | Uint8Array | null /* ptr */,
  cOutTypes: number /* u32 */,
  pOutTypes: Deno.PointerValue | Uint8Array | null /* ptr */,
  ppEnum: Deno.PointerValue | Uint8Array | null /* ptr */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libmsdmo_dll.DMOEnum(util.toPointer(guidCategory), dwFlags, cInTypes, util.toPointer(pInTypes), cOutTypes, util.toPointer(pOutTypes), util.toPointer(ppEnum)));
}

export function DMOGetTypes(
  clsidDMO: Deno.PointerValue | Uint8Array | null /* ptr */,
  ulInputTypesRequested: number /* u32 */,
  pulInputTypesSupplied: Deno.PointerValue | Uint8Array | null /* ptr */,
  pInputTypes: Deno.PointerValue | Uint8Array | null /* ptr */,
  ulOutputTypesRequested: number /* u32 */,
  pulOutputTypesSupplied: Deno.PointerValue | Uint8Array | null /* ptr */,
  pOutputTypes: Deno.PointerValue | Uint8Array | null /* ptr */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libmsdmo_dll.DMOGetTypes(util.toPointer(clsidDMO), ulInputTypesRequested, util.toPointer(pulInputTypesSupplied), util.toPointer(pInputTypes), ulOutputTypesRequested, util.toPointer(pulOutputTypesSupplied), util.toPointer(pOutputTypes)));
}

export function DMOGetName(
  clsidDMO: Deno.PointerValue | Uint8Array | null /* ptr */,
  szName: string | null /* Windows.Win32.Foundation.PWSTR */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libmsdmo_dll.DMOGetName(util.toPointer(clsidDMO), util.pwstrToFfi(szName)));
}

export function MoInitMediaType(
  pmt: Deno.PointerValue | Uint8Array | null /* ptr */,
  cbFormat: number /* u32 */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libmsdmo_dll.MoInitMediaType(util.toPointer(pmt), cbFormat));
}

export function MoFreeMediaType(
  pmt: Deno.PointerValue | Uint8Array | null /* ptr */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libmsdmo_dll.MoFreeMediaType(util.toPointer(pmt)));
}

export function MoCopyMediaType(
  pmtDest: Deno.PointerValue | Uint8Array | null /* ptr */,
  pmtSrc: Deno.PointerValue | Uint8Array | null /* ptr */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libmsdmo_dll.MoCopyMediaType(util.toPointer(pmtDest), util.toPointer(pmtSrc)));
}

export function MoCreateMediaType(
  ppmt: Deno.PointerValue | Uint8Array | null /* ptr */,
  cbFormat: number /* u32 */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libmsdmo_dll.MoCreateMediaType(util.toPointer(ppmt), cbFormat));
}

export function MoDeleteMediaType(
  pmt: Deno.PointerValue | Uint8Array | null /* ptr */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libmsdmo_dll.MoDeleteMediaType(util.toPointer(pmt)));
}

export function MoDuplicateMediaType(
  ppmtDest: Deno.PointerValue | Uint8Array | null /* ptr */,
  pmtSrc: Deno.PointerValue | Uint8Array | null /* ptr */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libmsdmo_dll.MoDuplicateMediaType(util.toPointer(ppmtDest), util.toPointer(pmtSrc)));
}

