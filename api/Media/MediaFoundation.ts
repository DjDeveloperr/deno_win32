/// Auto-generated by Deno Win32: Windows.Win32.Media.MediaFoundation.Apis

import * as util from "../../util.ts";

// Enums
export type MEDIA_EVENT_GENERATOR_GET_EVENT_FLAGS = number;
export type MPEG2VIDEOINFO_FLAGS = number;
export type MF_Plugin_Type = number;
export type BI_COMPRESSION = number;
export type D3D12_VIDEO_FIELD_TYPE = number;
export type D3D12_VIDEO_FRAME_STEREO_FORMAT = number;
export type DXGI_FORMAT = number;
export type DXGI_COLOR_SPACE_TYPE = number;
export type D3D12_VIDEO_FRAME_CODED_INTERLACE_TYPE = number;
export type D3D12_FEATURE_VIDEO = number;
export type D3D12_BITSTREAM_ENCRYPTION_TYPE = number;
export type D3D12_VIDEO_PROCESS_FILTER = number;
export type D3D12_VIDEO_PROCESS_FILTER_FLAGS = number;
export type D3D12_VIDEO_PROCESS_DEINTERLACE_FLAGS = number;
export type D3D12_VIDEO_PROCESS_ALPHA_FILL_MODE = number;
export type D3D12_VIDEO_DECODE_TIER = number;
export type D3D12_VIDEO_DECODE_SUPPORT_FLAGS = number;
export type D3D12_VIDEO_DECODE_CONFIGURATION_FLAGS = number;
export type D3D12_VIDEO_DECODE_STATUS = number;
export type D3D12_VIDEO_DECODE_ARGUMENT_TYPE = number;
export type D3D12_VIDEO_DECODE_HISTOGRAM_COMPONENT = number;
export type D3D12_VIDEO_DECODE_HISTOGRAM_COMPONENT_FLAGS = number;
export type D3D12_VIDEO_DECODE_CONVERSION_SUPPORT_FLAGS = number;
export type D3D12_VIDEO_SCALE_SUPPORT_FLAGS = number;
export type D3D12_VIDEO_PROCESS_FEATURE_FLAGS = number;
export type D3D12_VIDEO_PROCESS_AUTO_PROCESSING_FLAGS = number;
export type D3D12_VIDEO_PROCESS_ORIENTATION = number;
export type D3D12_VIDEO_PROCESS_INPUT_STREAM_FLAGS = number;
export type D3D12_VIDEO_PROCESS_SUPPORT_FLAGS = number;
export type D3D12_VIDEO_MOTION_ESTIMATOR_SEARCH_BLOCK_SIZE = number;
export type D3D12_VIDEO_MOTION_ESTIMATOR_SEARCH_BLOCK_SIZE_FLAGS = number;
export type D3D12_VIDEO_MOTION_ESTIMATOR_VECTOR_PRECISION = number;
export type D3D12_VIDEO_MOTION_ESTIMATOR_VECTOR_PRECISION_FLAGS = number;
export type D3D12_VIDEO_PROTECTED_RESOURCE_SUPPORT_FLAGS = number;
export type D3D12_VIDEO_EXTENSION_COMMAND_PARAMETER_STAGE = number;
export type D3D12_VIDEO_EXTENSION_COMMAND_PARAMETER_TYPE = number;
export type D3D12_VIDEO_EXTENSION_COMMAND_PARAMETER_FLAGS = number;
export type D3D12_COMMAND_LIST_SUPPORT_FLAGS = number;
export type D3D12_VIDEO_ENCODER_RATE_CONTROL_MODE = number;
export type D3D12_VIDEO_ENCODER_RATE_CONTROL_FLAGS = number;
export type D3D12_VIDEO_ENCODER_CODEC = number;
export type D3D12_VIDEO_ENCODER_PROFILE_H264 = number;
export type D3D12_VIDEO_ENCODER_PROFILE_HEVC = number;
export type D3D12_VIDEO_ENCODER_LEVELS_H264 = number;
export type D3D12_VIDEO_ENCODER_TIER_HEVC = number;
export type D3D12_VIDEO_ENCODER_LEVELS_HEVC = number;
export type D3D12_VIDEO_ENCODER_INTRA_REFRESH_MODE = number;
export type D3D12_VIDEO_ENCODER_FRAME_SUBREGION_LAYOUT_MODE = number;
export type D3D12_VIDEO_ENCODER_HEAP_FLAGS = number;
export type D3D12_VIDEO_ENCODER_CODEC_CONFIGURATION_SUPPORT_H264_FLAGS = number;
export type D3D12_VIDEO_ENCODER_CODEC_CONFIGURATION_H264_SLICES_DEBLOCKING_MODES = number;
export type D3D12_VIDEO_ENCODER_CODEC_CONFIGURATION_H264_SLICES_DEBLOCKING_MODE_FLAGS = number;
export type D3D12_VIDEO_ENCODER_CODEC_CONFIGURATION_SUPPORT_HEVC_FLAGS = number;
export type D3D12_VIDEO_ENCODER_CODEC_CONFIGURATION_HEVC_CUSIZE = number;
export type D3D12_VIDEO_ENCODER_CODEC_CONFIGURATION_HEVC_TUSIZE = number;
export type D3D12_VIDEO_ENCODER_SUPPORT_FLAGS = number;
export type D3D12_VIDEO_ENCODER_CODEC_CONFIGURATION_H264_FLAGS = number;
export type D3D12_VIDEO_ENCODER_CODEC_CONFIGURATION_H264_DIRECT_MODES = number;
export type D3D12_VIDEO_ENCODER_CODEC_CONFIGURATION_HEVC_FLAGS = number;
export type D3D12_VIDEO_ENCODER_MOTION_ESTIMATION_PRECISION_MODE = number;
export type D3D12_VIDEO_ENCODER_VALIDATION_FLAGS = number;
export type D3D12_VIDEO_ENCODER_FLAGS = number;
export type D3D12_VIDEO_ENCODER_FRAME_TYPE_H264 = number;
export type D3D12_VIDEO_ENCODER_PICTURE_CONTROL_CODEC_DATA_H264_FLAGS = number;
export type D3D12_VIDEO_ENCODER_FRAME_TYPE_HEVC = number;
export type D3D12_VIDEO_ENCODER_PICTURE_CONTROL_CODEC_DATA_HEVC_FLAGS = number;
export type D3D12_VIDEO_ENCODER_PICTURE_CONTROL_FLAGS = number;
export type D3D12_VIDEO_ENCODER_SEQUENCE_CONTROL_FLAGS = number;
export type D3D12_VIDEO_ENCODER_ENCODE_ERROR_FLAGS = number;
export type WMT_PROP_DATATYPE = number;
export type WMV_DYNAMIC_FLAGS = number;
export type MF_AUVRHP_ROOMMODEL = number;
export type AEC_SYSTEM_MODE = number;
export type AEC_VAD_MODE = number;
export type AEC_INPUT_STREAM = number;
export type MIC_ARRAY_MODE = number;
export type MFVideoDSPMode = number;
export type TOC_POS_TYPE = number;
export type FILE_OPENMODE = number;
export type SEEK_ORIGIN = number;
export type FILE_ACCESSMODE = number;
export type D3DFORMAT = number;
export type D3DPOOL = number;
export type DXVA_SampleFormat = number;
export type DXVA_VideoTransferFunction = number;
export type DXVA_VideoPrimaries = number;
export type DXVA_VideoLighting = number;
export type DXVA_VideoTransferMatrix = number;
export type DXVA_NominalRange = number;
export type DXVA_VideoChromaSubsampling = number;
export type DXVA_VideoProcessCaps = number;
export type DXVA_DeinterlaceTech = number;
export type DXVA_SampleFlags = number;
export type DXVA_DestinationFlags = number;
export type DXVA_ProcAmpControlProp = number;
export type eAVEncCommonRateControlMode = number;
export type eAVEncCommonStreamEndHandling = number;
export type eAVEncVideoOutputFrameRateConversion = number;
export type eAVDecVideoSoftwareDeinterlaceMode = number;
export type eAVFastDecodeMode = number;
export type eAVDecVideoH264ErrorConcealment = number;
export type eAVDecVideoMPEG2ErrorConcealment = number;
export type eAVDecVideoCodecType = number;
export type eAVDecVideoDXVAMode = number;
export type eAVDecVideoDXVABusEncryption = number;
export type eAVEncVideoSourceScanType = number;
export type eAVEncVideoOutputScanType = number;
export type eAVEncVideoFilmContent = number;
export type eAVEncVideoChromaResolution = number;
export type eAVEncVideoChromaSubsampling = number;
export type eAVEncVideoColorPrimaries = number;
export type eAVEncVideoColorTransferFunction = number;
export type eAVEncVideoColorTransferMatrix = number;
export type eAVEncVideoColorLighting = number;
export type eAVEncVideoColorNominalRange = number;
export type eAVEncInputVideoSystem = number;
export type eAVEncVideoContentType = number;
export type eAVEncAdaptiveMode = number;
export type eAVScenarioInfo = number;
export type eVideoEncoderDisplayContentType = number;
export type eAVEncMuxOutput = number;
export type eAVEncAudioDualMono = number;
export type eAVEncAudioInputContent = number;
export type eAVEncMPVProfile = number;
export type eAVEncMPVLevel = number;
export type eAVEncH263VProfile = number;
export type eAVEncH264VProfile = number;
export type eAVEncH265VProfile = number;
export type eAVEncVP9VProfile = number;
export type eAVEncH263PictureType = number;
export type eAVEncH264PictureType = number;
export type eAVEncH263VLevel = number;
export type eAVEncH264VLevel = number;
export type eAVEncH265VLevel = number;
export type eAVEncMPVFrameFieldMode = number;
export type eAVEncMPVSceneDetection = number;
export type eAVEncMPVScanPattern = number;
export type eAVEncMPVQScaleType = number;
export type eAVEncMPVIntraVLCTable = number;
export type eAVEncMPALayer = number;
export type eAVEncMPACodingMode = number;
export type eAVEncMPAEmphasisType = number;
export type eAVEncDDService = number;
export type eAVEncDDProductionRoomType = number;
export type eAVEncDDDynamicRangeCompressionControl = number;
export type eAVEncDDSurroundExMode = number;
export type eAVEncDDPreferredStereoDownMixMode = number;
export type eAVEncDDAtoDConverterType = number;
export type eAVEncDDHeadphoneMode = number;
export type eAVDecVideoInputScanType = number;
export type eAVDecVideoSWPowerLevel = number;
export type eAVDecAACDownmixMode = number;
export type eAVDecHEAACDynamicRangeControl = number;
export type eAVDecAudioDualMono = number;
export type eAVDecAudioDualMonoReproMode = number;
export type eAVAudioChannelConfig = number;
export type eAVDDSurroundMode = number;
export type eAVDecDDOperationalMode = number;
export type eAVDecDDMatrixDecodingMode = number;
export type eAVDecDDStereoDownMixMode = number;
export type eAVDSPLoudnessEqualization = number;
export type eAVDSPSpeakerFill = number;
export type eAVEncChromaEncodeMode = number;
export type DXVAHD_FRAME_FORMAT = number;
export type DXVAHD_DEVICE_USAGE = number;
export type DXVAHD_SURFACE_TYPE = number;
export type DXVAHD_DEVICE_TYPE = number;
export type DXVAHD_DEVICE_CAPS = number;
export type DXVAHD_FEATURE_CAPS = number;
export type DXVAHD_FILTER_CAPS = number;
export type DXVAHD_INPUT_FORMAT_CAPS = number;
export type DXVAHD_PROCESSOR_CAPS = number;
export type DXVAHD_ITELECINE_CAPS = number;
export type DXVAHD_FILTER = number;
export type DXVAHD_BLT_STATE = number;
export type DXVAHD_ALPHA_FILL_MODE = number;
export type DXVAHD_STREAM_STATE = number;
export type DXVAHD_OUTPUT_RATE = number;
export type DXVA2_SampleFormat = number;
export type DXVA2_VideoChromaSubSampling = number;
export type DXVA2_NominalRange = number;
export type DXVA2_VideoTransferMatrix = number;
export type DXVA2_VideoLighting = number;
export type DXVA2_VideoPrimaries = number;
export type DXVA2_VideoTransferFunction = number;
export type DXVA2_DeinterlaceTech = number;
export type DXVA2_FilterType = number;
export type DXVA2_NoiseFilterTech = number;
export type DXVA2_DetailFilterTech = number;
export type DXVA2_ProcAmp = number;
export type DXVA2_VideoProcess = number;
export type DXVA2_VPDev = number;
export type DXVA2_SampleData = number;
export type DXVA2_DestData = number;
export type DXVA2_BufferfType = number;
export type DXVA2_VideoRenderTargetType = number;
export type DXVA2_SurfaceType = number;
export type OPM_TYPE = number;
export type OPM_VIDEO_OUTPUT_SEMANTICS = number;
export type OPM_HDCP_FLAGS = number;
export type OPM_STATUS = number;
export type OPM_CONNECTOR_TYPE = number;
export type OPM_DVI_CHARACTERISTIC = number;
export type OPM_OUTPUT_HARDWARE_PROTECTION = number;
export type OPM_BUS_TYPE = number;
export type OPM_DPCP_PROTECTION_LEVEL = number;
export type OPM_HDCP_PROTECTION_LEVEL = number;
export type OPM_TYPE_ENFORCEMENT_HDCP_PROTECTION_LEVEL = number;
export type OPM_CGMSA = number;
export type OPM_ACP_PROTECTION_LEVEL = number;
export type OPM_PROTECTION_TYPE = number;
export type OPM_PROTECTION_STANDARD_TYPE = number;
export type OPM_IMAGE_ASPECT_RATIO_EN300294 = number;
export type KSMETHOD_OPMVIDEOOUTPUT = number;
export type MF_ATTRIBUTE_TYPE = number;
export type MF_ATTRIBUTES_MATCH_TYPE = number;
export type MF_ATTRIBUTE_SERIALIZE_OPTIONS = number;
export type MF2DBuffer_LockFlags = number;
export type MFVideoInterlaceMode = number;
export type MFVideoTransferFunction = number;
export type MFVideoPrimaries = number;
export type MFVideoLighting = number;
export type MFVideoTransferMatrix = number;
export type MFVideoChromaSubsampling = number;
export type MFNominalRange = number;
export type MFVideoFlags = number;
export type MFStandardVideoFormat = number;
export type MF_EVENT_TYPE = number;
export type MFBYTESTREAM_SEEK_ORIGIN = number;
export type MF_FILE_ACCESSMODE = number;
export type MF_FILE_OPENMODE = number;
export type MF_FILE_FLAGS = number;
export type MF_PLUGIN_CONTROL_POLICY = number;
export type MF_STREAM_STATE = number;
export type _MFT_INPUT_DATA_BUFFER_FLAGS = number;
export type _MFT_OUTPUT_DATA_BUFFER_FLAGS = number;
export type _MFT_INPUT_STATUS_FLAGS = number;
export type _MFT_OUTPUT_STATUS_FLAGS = number;
export type _MFT_INPUT_STREAM_INFO_FLAGS = number;
export type _MFT_OUTPUT_STREAM_INFO_FLAGS = number;
export type _MFT_SET_TYPE_FLAGS = number;
export type _MFT_PROCESS_OUTPUT_FLAGS = number;
export type _MFT_PROCESS_OUTPUT_STATUS = number;
export type MFT_DRAIN_TYPE = number;
export type MFT_MESSAGE_TYPE = number;
export type DeviceStreamState = number;
export type MF3DVideoOutputType = number;
export type MFT_AUDIO_DECODER_DEGRADATION_REASON = number;
export type MFT_AUDIO_DECODER_DEGRADATION_TYPE = number;
export type MFSESSION_SETTOPOLOGY_FLAGS = number;
export type MFSESSION_GETFULLTOPOLOGY_FLAGS = number;
export type MFPMPSESSION_CREATION_FLAGS = number;
export type MF_OBJECT_TYPE = number;
export type MF_RESOLUTION_FLAGS = number;
export type MF_CONNECT_METHOD = number;
export type MF_TOPOLOGY_RESOLUTION_STATUS_FLAGS = number;
export type MFMEDIASOURCE_CHARACTERISTICS = number;
export type MFSTREAMSINK_MARKER_TYPE = number;
export type MF_VIDEO_PROCESSOR_ROTATION = number;
export type MF_VIDEO_PROCESSOR_MIRROR = number;
export type MFVideoSphericalFormat = number;
export type MFVideoSphericalProjectionMode = number;
export type MFTOPOLOGY_DXVA_MODE = number;
export type MFTOPOLOGY_HARDWARE_MODE = number;
export type MF_TOPOLOGY_TYPE = number;
export type MF_TOPONODE_FLUSH_MODE = number;
export type MF_TOPONODE_DRAIN_MODE = number;
export type MFCLOCK_CHARACTERISTICS_FLAGS = number;
export type MFCLOCK_STATE = number;
export type MFCLOCK_RELATIONAL_FLAGS = number;
export type MFTIMER_FLAGS = number;
export type MF_ACTIVATE_CUSTOM_MIXER = number;
export type MF_ACTIVATE_CUSTOM_PRESENTER = number;
export type MFSHUTDOWN_STATUS = number;
export type MF_URL_TRUST_STATUS = number;
export type MFRATE_DIRECTION = number;
export type MF_QUALITY_DROP_MODE = number;
export type MF_QUALITY_LEVEL = number;
export type MF_QUALITY_ADVISE_FLAGS = number;
export type MFSequencerTopologyFlags = number;
export type MFNetCredentialRequirements = number;
export type MFNetCredentialOptions = number;
export type MFNetAuthenticationFlags = number;
export type MFNETSOURCE_PROTOCOL_TYPE = number;
export type MFNETSOURCE_TRANSPORT_TYPE = number;
export type MFNETSOURCE_CACHE_STATE = number;
export type MFNETSOURCE_STATISTICS_IDS = number;
export type MFNET_PROXYSETTINGS = number;
export type MFPOLICYMANAGER_ACTION = number;
export type MF_OPM_CGMSA_PROTECTION_LEVEL = number;
export type MF_OPM_ACP_PROTECTION_LEVEL = number;
export type MFAudioConstriction = number;
export type SAMPLE_PROTECTION_VERSION = number;
export type MF_TRANSCODE_TOPOLOGYMODE_FLAGS = number;
export type MF_TRANSCODE_ADJUST_PROFILE_FLAGS = number;
export type MF_VIDEO_PROCESSOR_ALGORITHM_TYPE = number;
export type MF_MEDIAKEYSESSION_TYPE = number;
export type MF_MEDIAKEY_STATUS = number;
export type MF_MEDIAKEYSESSION_MESSAGETYPE = number;
export type MF_CROSS_ORIGIN_POLICY = number;
export type MFSensorDeviceType = number;
export type MFSensorStreamType = number;
export type MFSensorDeviceMode = number;
export type MFCameraIntrinsic_DistortionModelType = number;
export type MFCameraOcclusionState = number;
export type MFSampleAllocatorUsage = number;
export type MFASF_INDEXER_FLAGS = number;
export type MFASF_SPLITTERFLAGS = number;
export type ASF_STATUSFLAGS = number;
export type MFASF_MULTIPLEXERFLAGS = number;
export type MFASF_STREAMSELECTOR_FLAGS = number;
export type ASF_SELECTION_STATUS = number;
export type MFSINK_WMDRMACTION = number;
export type MF_CAPTURE_ENGINE_DEVICE_TYPE = number;
export type MF_CAPTURE_ENGINE_SINK_TYPE = number;
export type MF_CAPTURE_ENGINE_SOURCE = number;
export type MF_CAPTURE_ENGINE_STREAM_CATEGORY = number;
export type MF_CAPTURE_ENGINE_MEDIA_CATEGORY_TYPE = number;
export type MF_CAPTURE_ENGINE_AUDIO_PROCESSING_MODE = number;
export type MF_MT_D3D_RESOURCE_VERSION_ENUM = number;
export type MFASYNC_WORKQUEUE_TYPE = number;
export type MF_TOPOSTATUS = number;
export type MFSampleEncryptionProtectionScheme = number;
export type MFT_ENUM_FLAG = number;
export type MFFrameSourceTypes = number;
export type MFVideo3DFormat = number;
export type MFVideo3DSampleFormat = number;
export type MFVideoRotationFormat = number;
export type MFDepthMeasurement = number;
export type MF_CUSTOM_DECODE_UNIT_TYPE = number;
export type MFVideoDRMFlags = number;
export type MFVideoPadFlags = number;
export type MFVideoSrcContentHintFlags = number;
export type MFWaveFormatExConvertFlags = number;
export type EAllocationType = number;
export type MF_MEDIA_ENGINE_ERR = number;
export type MF_MEDIA_ENGINE_EVENT = number;
export type MF_MEDIA_ENGINE_NETWORK = number;
export type MF_MEDIA_ENGINE_READY = number;
export type MF_MEDIA_ENGINE_CANPLAY = number;
export type MF_MEDIA_ENGINE_PRELOAD = number;
export type MF_MEDIA_ENGINE_S3D_PACKING_MODE = number;
export type MF_MEDIA_ENGINE_STATISTIC = number;
export type MF_MEDIA_ENGINE_SEEK_MODE = number;
export type MF_MEDIA_ENGINE_EXTENSION_TYPE = number;
export type MF_MEDIA_ENGINE_FRAME_PROTECTION_FLAGS = number;
export type MF_MSE_VP9_SUPPORT_TYPE = number;
export type MF_MSE_OPUS_SUPPORT_TYPE = number;
export type MF_MSE_APPEND_MODE = number;
export type MF_MSE_READY = number;
export type MF_MSE_ERROR = number;
export type MF_MEDIA_ENGINE_KEYERR = number;
export type MF_HDCP_STATUS = number;
export type MF_MEDIA_ENGINE_OPM_STATUS = number;
export type MF_MEDIA_ENGINE_CREATEFLAGS = number;
export type MF_MEDIA_ENGINE_PROTECTION_FLAGS = number;
export type MF_TIMED_TEXT_TRACK_KIND = number;
export type MF_TIMED_TEXT_UNIT_TYPE = number;
export type MF_TIMED_TEXT_FONT_STYLE = number;
export type MF_TIMED_TEXT_ALIGNMENT = number;
export type MF_TIMED_TEXT_DISPLAY_ALIGNMENT = number;
export type MF_TIMED_TEXT_DECORATION = number;
export type MF_TIMED_TEXT_WRITING_MODE = number;
export type MF_TIMED_TEXT_SCROLL_MODE = number;
export type MF_TIMED_TEXT_ERROR_CODE = number;
export type MF_TIMED_TEXT_CUE_EVENT = number;
export type MF_TIMED_TEXT_TRACK_READY_STATE = number;
export type MF_TIMED_TEXT_RUBY_POSITION = number;
export type MF_TIMED_TEXT_RUBY_ALIGN = number;
export type MF_TIMED_TEXT_RUBY_RESERVE = number;
export type MF_TIMED_TEXT_BOUTEN_TYPE = number;
export type MF_TIMED_TEXT_BOUTEN_POSITION = number;
export type MF_MEDIA_ENGINE_STREAMTYPE_FAILED = number;
export type MF_MEDIAKEYS_REQUIREMENT = number;
export type MF_SOURCE_READER_FLAG = number;
export type MF_SOURCE_READER_CONTROL_FLAG = number;
export type MF_SOURCE_READER_CONSTANTS = number;
export type MF_SOURCE_READER_CURRENT_TYPE_CONSTANTS = number;
export type MF_SINK_WRITER_CONSTANTS = number;
export type MFVideoAspectRatioMode = number;
export type MFVideoRenderPrefs = number;
export type MFVP_MESSAGE_TYPE = number;
export type MFVideoMixPrefs = number;
export type EVRFilterConfigPrefs = number;
export type MF_SERVICE_LOOKUP_TYPE = number;
export type MFP_CREATION_OPTIONS = number;
export type MFP_MEDIAPLAYER_STATE = number;
export type _MFP_MEDIAITEM_CHARACTERISTICS = number;
export type _MFP_CREDENTIAL_FLAGS = number;
export type MFP_EVENT_TYPE = number;
export type MF_SHARING_ENGINE_EVENT = number;
export type MF_MEDIA_SHARING_ENGINE_EVENT = number;
export type PLAYTO_SOURCE_CREATEFLAGS = number;
export type MFVideoAlphaBitmapFlags = number;
export type MFVirtualCameraType = number;
export type MFVirtualCameraLifetime = number;
export type MFVirtualCameraAccess = number;
export type OPM_HDCP_TYPE = number;
export type OPM_HDCP_STATUS = number;

// Constants
export const MF_EVENT_FLAG_NONE = 0;
export const MF_EVENT_FLAG_NO_WAIT = 1;
export const AMMPEG2_DoPanScan = 1;
export const AMMPEG2_DVDLine21Field1 = 2;
export const AMMPEG2_DVDLine21Field2 = 4;
export const AMMPEG2_SourceIsLetterboxed = 8;
export const AMMPEG2_FilmCameraMode = 16;
export const AMMPEG2_LetterboxAnalogOut = 32;
export const AMMPEG2_DSS_UserData = 64;
export const AMMPEG2_DVB_UserData = 128;
export const AMMPEG2_27MhzTimebase = 256;
export const AMMPEG2_WidescreenAnalogOut = 512;
export const MF_Plugin_Type_MFT = 0;
export const MF_Plugin_Type_MediaSource = 1;
export const MF_Plugin_Type_MFT_MatchOutputType = 2;
export const MF_Plugin_Type_Other = `-1`;
export const AVENC_H263V_LEVELCOUNT = 8;
export const AVENC_H264V_LEVELCOUNT = 16;
export const AVENC_H264V_MAX_MBBITS = 3200;
export const DXVA2_E_NOT_INITIALIZED = 297239793757327360n;
export const DXVA2_E_NEW_VIDEO_DEVICE = 292736194129956865n;
export const DXVA2_E_VIDEO_DEVICE_LOCKED = 2810247286318436354n;
export const DXVA2_E_NOT_AVAILABLE = 4323456829834399747n;
export const MAX_SUBSTREAMS = 15;
export const DXVA2_DECODE_GET_DRIVER_HANDLE = 1829;
export const DXVA2_DECODE_SPECIFY_ENCRYPTED_BLOCKS = 1828;
export const MFEVRDLL = 0;
export const MF_SDK_VERSION = 2;
export const MF_API_VERSION = 112;
export const MFSTARTUP_NOSOCKET = 1;
export const MFSTARTUP_LITE = 1;
export const MFSTARTUP_FULL = 0;
export const MF_E_DXGI_DEVICE_NOT_INITIALIZED = 297239793757327360n;
export const MF_E_DXGI_NEW_VIDEO_DEVICE = 292736194129956865n;
export const MF_E_DXGI_VIDEO_DEVICE_LOCKED = 2810247286318436354n;
export const MF_1_BYTE_ALIGNMENT = 0;
export const MF_2_BYTE_ALIGNMENT = 1;
export const MF_4_BYTE_ALIGNMENT = 3;
export const MF_8_BYTE_ALIGNMENT = 7;
export const MF_16_BYTE_ALIGNMENT = 15;
export const MF_32_BYTE_ALIGNMENT = 31;
export const MF_64_BYTE_ALIGNMENT = 63;
export const MF_128_BYTE_ALIGNMENT = 127;
export const MF_256_BYTE_ALIGNMENT = 255;
export const MF_512_BYTE_ALIGNMENT = 511;
export const MF_1024_BYTE_ALIGNMENT = 1023;
export const MF_2048_BYTE_ALIGNMENT = 2047;
export const MF_4096_BYTE_ALIGNMENT = 4095;
export const MF_8192_BYTE_ALIGNMENT = 8191;
export const MFSESSIONCAP_START = 1;
export const MFSESSIONCAP_SEEK = 2;
export const MFSESSIONCAP_PAUSE = 4;
export const MFSESSIONCAP_RATE_FORWARD = 16;
export const MFSESSIONCAP_RATE_REVERSE = 32;
export const MFSESSIONCAP_DOES_NOT_USE_NETWORK = 64;
export const MFSampleExtension_ClosedCaption_CEA708_MAX_SIZE = 256;
export const MACROBLOCK_FLAG_SKIP = 1;
export const MACROBLOCK_FLAG_DIRTY = 2;
export const MACROBLOCK_FLAG_MOTION = 4;
export const MACROBLOCK_FLAG_VIDEO = 8;
export const MACROBLOCK_FLAG_HAS_MOTION_VECTOR = 16;
export const MACROBLOCK_FLAG_HAS_QP = 32;
export const MFCAPTURE_METADATA_SCAN_RIGHT_LEFT = 1;
export const MFCAPTURE_METADATA_SCAN_BOTTOM_TOP = 2;
export const MFCAPTURE_METADATA_SCANLINE_VERTICAL = 4;
export const MF_METADATAFACIALEXPRESSION_SMILE = 1;
export const MF_METADATATIMESTAMPS_DEVICE = 1;
export const MF_METADATATIMESTAMPS_PRESENTATION = 2;
export const MF_HISTOGRAM_CHANNEL_Y = 1;
export const MF_HISTOGRAM_CHANNEL_R = 2;
export const MF_HISTOGRAM_CHANNEL_G = 4;
export const MF_HISTOGRAM_CHANNEL_B = 8;
export const MF_HISTOGRAM_CHANNEL_Cb = 16;
export const MF_HISTOGRAM_CHANNEL_Cr = 32;
export const LOCAL_D3DFMT_DEFINES = 1;
export const MEDIASINK_FIXED_STREAMS = 1;
export const MEDIASINK_CANNOT_MATCH_CLOCK = 2;
export const MEDIASINK_RATELESS = 4;
export const MEDIASINK_CLOCK_REQUIRED = 8;
export const MEDIASINK_CAN_PREROLL = 16;
export const MEDIASINK_REQUIRE_REFERENCE_MEDIATYPE = 32;
export const MFCLOCK_FREQUENCY_HNS = 10000000;
export const MFCLOCK_TOLERANCE_UNKNOWN = 50000;
export const MFCLOCK_JITTER_ISR = 1000;
export const MFCLOCK_JITTER_DPC = 4000;
export const MFCLOCK_JITTER_PASSIVE = 10000;
export const PRESENTATION_CURRENT_POSITION = 9223372036854775807n;
export const MF_AUDIO_RENDERER_ATTRIBUTE_FLAGS_CROSSPROCESS = 1;
export const MF_AUDIO_RENDERER_ATTRIBUTE_FLAGS_NOPERSIST = 2;
export const MF_AUDIO_RENDERER_ATTRIBUTE_FLAGS_DONT_ALLOW_FORMAT_CHANGES = 4;
export const MFRR_INFO_VERSION = 0;
export const MF_USER_MODE_COMPONENT_LOAD = 1;
export const MF_KERNEL_MODE_COMPONENT_LOAD = 2;
export const MF_GRL_LOAD_FAILED = 16;
export const MF_INVALID_GRL_SIGNATURE = 32;
export const MF_GRL_ABSENT = 4096;
export const MF_COMPONENT_REVOKED = 8192;
export const MF_COMPONENT_INVALID_EKU = 16384;
export const MF_COMPONENT_CERT_REVOKED = 32768;
export const MF_COMPONENT_INVALID_ROOT = 65536;
export const MF_COMPONENT_HS_CERT_REVOKED = 131072;
export const MF_COMPONENT_LS_CERT_REVOKED = 262144;
export const MF_BOOT_DRIVER_VERIFICATION_FAILED = 1048576;
export const MF_TEST_SIGNED_COMPONENT_LOADING = 16777216;
export const MF_MINCRYPT_FAILURE = 268435456;
export const SHA_HASH_LEN = 20;
export const MFSEQUENCER_INVALID_ELEMENT_ID = 4294967295;
export const MFCONTENTPROTECTIONDEVICE_FUNCTIONID_START = 67108864;
export const MFCONTENTPROTECTIONDEVICE_REALTIMECLIENT_DATA_FUNCTIONID = 67108864;
export const MF_UNKNOWN_DURATION = 0;
export const MF_INVALID_PRESENTATION_TIME = 9223372036854775808n;
export const MF_MEDIATYPE_EQUAL_MAJOR_TYPES = 1;
export const MF_MEDIATYPE_EQUAL_FORMAT_TYPES = 2;
export const MF_MEDIATYPE_EQUAL_FORMAT_DATA = 4;
export const MF_MEDIATYPE_EQUAL_FORMAT_USER_DATA = 8;
export const MFASYNC_FAST_IO_PROCESSING_CALLBACK = 1;
export const MFASYNC_SIGNAL_CALLBACK = 2;
export const MFASYNC_BLOCKING_CALLBACK = 4;
export const MFASYNC_REPLY_CALLBACK = 8;
export const MFASYNC_LOCALIZE_REMOTE_CALLBACK = 16;
export const MFASYNC_CALLBACK_QUEUE_UNDEFINED = 0;
export const MFASYNC_CALLBACK_QUEUE_STANDARD = 1;
export const MFASYNC_CALLBACK_QUEUE_RT = 2;
export const MFASYNC_CALLBACK_QUEUE_IO = 3;
export const MFASYNC_CALLBACK_QUEUE_TIMER = 4;
export const MFASYNC_CALLBACK_QUEUE_MULTITHREADED = 5;
export const MFASYNC_CALLBACK_QUEUE_LONG_FUNCTION = 7;
export const MFASYNC_CALLBACK_QUEUE_PRIVATE_MASK = 4294901760;
export const MFASYNC_CALLBACK_QUEUE_ALL = 4294967295;
export const MFBYTESTREAM_IS_READABLE = 1;
export const MFBYTESTREAM_IS_WRITABLE = 2;
export const MFBYTESTREAM_IS_SEEKABLE = 4;
export const MFBYTESTREAM_IS_REMOTE = 8;
export const MFBYTESTREAM_IS_DIRECTORY = 128;
export const MFBYTESTREAM_HAS_SLOW_SEEK = 256;
export const MFBYTESTREAM_IS_PARTIALLY_DOWNLOADED = 512;
export const MFBYTESTREAM_SHARE_WRITE = 1024;
export const MFBYTESTREAM_DOES_NOT_USE_NETWORK = 2048;
export const MFBYTESTREAM_SEEK_FLAG_CANCEL_PENDING_IO = 1;
export const MFT_STREAMS_UNLIMITED = 4294967295;
export const MFT_OUTPUT_BOUND_UPPER_UNBOUNDED = 9223372036854775807n;
export const WM_CODEC_ONEPASS_CBR = 1;
export const WM_CODEC_ONEPASS_VBR = 2;
export const WM_CODEC_TWOPASS_CBR = 4;
export const WM_CODEC_TWOPASS_VBR_UNCONSTRAINED = 8;
export const WM_CODEC_TWOPASS_VBR_PEAKCONSTRAINED = 16;
export const SYSFXUI_DONOTSHOW_LOUDNESSEQUALIZATION = 1;
export const SYSFXUI_DONOTSHOW_ROOMCORRECTION = 2;
export const SYSFXUI_DONOTSHOW_BASSMANAGEMENT = 4;
export const SYSFXUI_DONOTSHOW_BASSBOOST = 8;
export const SYSFXUI_DONOTSHOW_HEADPHONEVIRTUALIZATION = 16;
export const SYSFXUI_DONOTSHOW_VIRTUALSURROUND = 32;
export const SYSFXUI_DONOTSHOW_SPEAKERFILLING = 64;
export const SYSFXUI_DONOTSHOW_CHANNELPHANTOMING = 128;
export const AEC_MAX_SYSTEM_MODES = 6;
export const WMAAECMA_E_NO_ACTIVE_RENDER_STREAM = 2278293514;
export const E_TOCPARSER_INVALIDASFFILE = 2218770038785;
export const E_TOCPARSER_INVALIDRIFFFILE = 952141905028710402n;
export const TOC_MAX_DESCRIPTION_SIZE = 65535;
export const TOC_ENTRY_MAX_TITLE_SIZE = 65535;
export const MFASFINDEXER_PER_ENTRY_BYTES_DYNAMIC = 65535;
export const MFASFINDEXER_NO_FIXED_INTERVAL = 4294967295;
export const MFASFINDEXER_READ_FOR_REVERSEPLAYBACK_OUTOFDATASEGMENT = 18446744073709551615n;
export const MFASFINDEXER_APPROX_SEEK_TIME_UNKNOWN = 18446744073709551615n;
export const MFASF_MAX_STREAM_NUMBER = 127;
export const MFASF_INVALID_STREAM_NUMBER = 128;
export const MFASF_PAYLOADEXTENSION_MAX_SIZE = 255;
export const MFASF_PAYLOADEXTENSION_VARIABLE_SIZE = 65535;
export const MFASF_DEFAULT_BUFFER_WINDOW_MS = 3000;
export const FACILITY_MF = 13;
export const FACILITY_MF_WIN32 = 7;
export const MF_E_PLATFORM_NOT_INITIALIZED = 952143005195515568n;
export const MF_E_BUFFERTOOSMALL = 952144104707143345n;
export const MF_E_INVALIDREQUEST = 952145204218771122n;
export const MF_E_INVALIDSTREAMNUMBER = 952146303730398899n;
export const MF_E_INVALIDMEDIATYPE = 952147403242026676n;
export const MF_E_NOTACCEPTING = 952148502753654453n;
export const MF_E_NOT_INITIALIZED = 952149602265282230n;
export const MF_E_UNSUPPORTED_REPRESENTATION = 952151801288537783n;
export const MF_E_NO_MORE_TYPES = 952152900800165561n;
export const MF_E_UNSUPPORTED_SERVICE = 952154000311793338n;
export const MF_E_UNEXPECTED = 952155099823421115n;
export const MF_E_INVALIDNAME = 952156199335048892n;
export const MF_E_INVALIDTYPE = 952157298846676669n;
export const MF_E_INVALID_FILE_FORMAT = 952158398358304446n;
export const MF_E_INVALIDINDEX = 952159497869932223n;
export const MF_E_INVALID_TIMESTAMP = 952162796404815552n;
export const MF_E_UNSUPPORTED_SCHEME = 952163895916443331n;
export const MF_E_UNSUPPORTED_BYTESTREAM_TYPE = 952164995428071108n;
export const MF_E_UNSUPPORTED_TIME_FORMAT = 952168293962954437n;
export const MF_E_NO_SAMPLE_TIMESTAMP = 952169393474582216n;
export const MF_E_NO_SAMPLE_DURATION = 952171592497837769n;
export const MF_E_INVALID_STREAM_DATA = 952175990544348875n;
export const MF_E_RT_UNAVAILABLE = 952177090055976655n;
export const MF_E_UNSUPPORTED_RATE = 952178189567604432n;
export const MF_E_THINNING_UNSUPPORTED = 952179289079232209n;
export const MF_E_REVERSE_UNSUPPORTED = 952180388590859986n;
export const MF_E_UNSUPPORTED_RATE_TRANSITION = 952181488102487763n;
export const MF_E_RATE_CHANGE_PREEMPTED = 952182587614115540n;
export const MF_E_NOT_FOUND = 952183687125743317n;
export const MF_E_NOT_AVAILABLE = 952184786637371094n;
export const MF_E_NO_CLOCK = 952185886148998871n;
export const MF_S_MULTIPLE_BEGIN = 952186982439401176n;
export const MF_E_MULTIPLE_BEGIN = 952188085172254425n;
export const MF_E_MULTIPLE_SUBSCRIBERS = 952189184683882202n;
export const MF_E_TIMER_ORPHANED = 952190284195509979n;
export const MF_E_STATE_TRANSITION_PENDING = 952191383707137756n;
export const MF_E_UNSUPPORTED_STATE_TRANSITION = 952192483218765533n;
export const MF_E_UNRECOVERABLE_ERROR_OCCURRED = 952193582730393310n;
export const MF_E_SAMPLE_HAS_TOO_MANY_BUFFERS = 952194682242021087n;
export const MF_E_SAMPLE_NOT_WRITABLE = 952196881265276640n;
export const MF_E_INVALID_KEY = 952197980776904418n;
export const MF_E_BAD_STARTUP_VERSION = 952199080288532195n;
export const MF_E_UNSUPPORTED_CAPTION = 952200179800159972n;
export const MF_E_INVALID_POSITION = 952201279311787749n;
export const MF_E_ATTRIBUTENOTFOUND = 952202378823415526n;
export const MF_E_PROPERTY_TYPE_NOT_ALLOWED = 952203478335043303n;
export const MF_E_PROPERTY_TYPE_NOT_SUPPORTED = 952204577846671080n;
export const MF_E_PROPERTY_EMPTY = 952205677358298857n;
export const MF_E_PROPERTY_NOT_EMPTY = 952206776869926634n;
export const MF_E_PROPERTY_VECTOR_NOT_ALLOWED = 952207876381554411n;
export const MF_E_PROPERTY_VECTOR_REQUIRED = 952208975893182188n;
export const MF_E_OPERATION_CANCELLED = 952210075404809965n;
export const MF_E_BYTESTREAM_NOT_SEEKABLE = 952211174916437742n;
export const MF_E_DISABLED_IN_SAFEMODE = 952212274428065519n;
export const MF_E_CANNOT_PARSE_BYTESTREAM = 952213373939693296n;
export const MF_E_SOURCERESOLVER_MUTUALLY_EXCLUSIVE_FLAGS = 952214473451321073n;
export const MF_E_MEDIAPROC_WRONGSTATE = 952215572962948850n;
export const MF_E_RT_THROUGHPUT_NOT_AVAILABLE = 952216672474576627n;
export const MF_E_RT_TOO_MANY_CLASSES = 952217771986204404n;
export const MF_E_RT_WOULDBLOCK = 952218871497832181n;
export const MF_E_NO_BITPUMP = 952219971009459958n;
export const MF_E_RT_OUTOFMEMORY = 952221070521087735n;
export const MF_E_RT_WORKQUEUE_CLASS_NOT_SPECIFIED = 968678560565638904n;
export const MF_E_INSUFFICIENT_BUFFER = 952223269544358256n;
export const MF_E_CANNOT_CREATE_SINK = 952224369055971066n;
export const MF_E_BYTESTREAM_UNKNOWN_LENGTH = 952225468567598843n;
export const MF_E_SESSION_PAUSEWHILESTOPPED = 952226568079226620n;
export const MF_S_ACTIVATE_REPLACED = 952227664369628925n;
export const MF_E_FORMAT_CHANGE_NOT_SUPPORTED = 952228767102482174n;
export const MF_E_INVALID_WORKQUEUE = 952229866614109951n;
export const MF_E_DRM_UNSUPPORTED = 952230966125737728n;
export const MF_E_UNAUTHORIZED = 952232065637365505n;
export const MF_E_OUT_OF_RANGE = 952233165148993282n;
export const MF_E_INVALID_CODEC_MERIT = 952234264660621059n;
export const MF_E_HW_MFT_FAILED_START_STREAMING = 952235364172248836n;
export const MF_E_OPERATION_IN_PROGRESS = 952236463683876613n;
export const MF_E_HARDWARE_DRM_UNSUPPORTED = 952237563195504390n;
export const MF_E_DURATION_TOO_LONG = 952238662707132167n;
export const MF_E_OPERATION_UNSUPPORTED_AT_D3D_FEATURE_LEVEL = 952239762218759944n;
export const MF_E_UNSUPPORTED_MEDIATYPE_AT_D3D_FEATURE_LEVEL = 953241417311663881n;
export const MF_S_ASF_PARSEINPROGRESS = 953241415164181144n;
export const MF_E_ASF_PARSINGINCOMPLETE = 953242516823292568n;
export const MF_E_ASF_MISSINGDATA = 953243616334920345n;
export const MF_E_ASF_INVALIDDATA = 953244715846548122n;
export const MF_E_ASF_OPAQUEPACKET = 953245815358175899n;
export const MF_E_ASF_NOINDEX = 953246914869803676n;
export const MF_E_ASF_OUTOFRANGE = 953248014381431453n;
export const MF_E_ASF_INDEXNOTLOADED = 953249113893059230n;
export const MF_E_ASF_TOO_MANY_PAYLOADS = 953250213404687007n;
export const MF_E_ASF_UNSUPPORTED_STREAM_TYPE = 953251312916314784n;
export const MF_E_ASF_DROPPED_PACKET = 954340928939440801n;
export const MF_E_NO_EVENTS_AVAILABLE = 954343127962697344n;
export const MF_E_INVALID_STATE_TRANSITION = 954345326985952898n;
export const MF_E_END_OF_STREAM = 954346426497580676n;
export const MF_E_SHUTDOWN = 954347526009208453n;
export const MF_E_MP3_NOTFOUND = 954348625520836230n;
export const MF_E_MP3_OUTOFDATA = 954349725032464007n;
export const MF_E_MP3_NOTMP3 = 954350824544091784n;
export const MF_E_MP3_NOTSUPPORTED = 954351924055719561n;
export const MF_E_NO_DURATION = 954354123078975114n;
export const MF_E_INVALID_FORMAT = 954355222590602892n;
export const MF_E_PROPERTY_NOT_FOUND = 954356322102230669n;
export const MF_E_PROPERTY_READ_ONLY = 954357421613858446n;
export const MF_E_PROPERTY_NOT_ALLOWED = 954359620637113999n;
export const MF_E_MEDIA_SOURCE_NOT_STARTED = 954367317218508433n;
export const MF_E_UNSUPPORTED_FORMAT = 954368416730136216n;
export const MF_E_MP3_BAD_CRC = 954369516241763993n;
export const MF_E_NOT_PROTECTED = 954370615753391770n;
export const MF_E_MEDIA_SOURCE_WRONGSTATE = 954371715265019547n;
export const MF_E_MEDIA_SOURCE_NO_STREAMS_SELECTED = 954372814776647324n;
export const MF_E_CANNOT_FIND_KEYFRAME_SAMPLE = 954373914288275101n;
export const MF_E_UNSUPPORTED_CHARACTERISTICS = 954375013799902878n;
export const MF_E_NO_AUDIO_RECORDING_DEVICE = 954376113311530655n;
export const MF_E_AUDIO_RECORDING_DEVICE_IN_USE = 954377212823158432n;
export const MF_E_AUDIO_RECORDING_DEVICE_INVALIDATED = 954378312334786209n;
export const MF_E_VIDEO_RECORDING_DEVICE_INVALIDATED = 954379411846413986n;
export const MF_E_VIDEO_RECORDING_DEVICE_PREEMPTED = 955440440567217827n;
export const MF_E_NETWORK_RESOURCE_FAILURE = 955441540078846568n;
export const MF_E_NET_WRITE = 955442639590474345n;
export const MF_E_NET_READ = 955443739102102122n;
export const MF_E_NET_REQUIRE_NETWORK = 955444838613729899n;
export const MF_E_NET_REQUIRE_ASYNC = 955445938125357676n;
export const MF_E_NET_BWLEVEL_NOT_SUPPORTED = 955447037636985453n;
export const MF_E_NET_STREAMGROUPS_NOT_SUPPORTED = 955448137148613230n;
export const MF_E_NET_MANUALSS_NOT_SUPPORTED = 955449236660241007n;
export const MF_E_NET_INVALID_PRESENTATION_DESCRIPTOR = 955450336171868784n;
export const MF_E_NET_CACHESTREAM_NOT_FOUND = 955451435683496561n;
export const MF_I_MANUAL_PROXY = 955453632559268466n;
export const MF_E_NET_REQUIRE_INPUT = 955454734218379892n;
export const MF_E_NET_REDIRECT = 955455833730007669n;
export const MF_E_NET_REDIRECT_TO_PROXY = 955456933241635446n;
export const MF_E_NET_TOO_MANY_REDIRECTS = 955458032753263223n;
export const MF_E_NET_TIMEOUT = 955459132264891000n;
export const MF_E_NET_CLIENT_CLOSE = 955460231776518777n;
export const MF_E_NET_BAD_CONTROL_DATA = 955461331288146554n;
export const MF_E_NET_INCOMPATIBLE_SERVER = 955462430799774331n;
export const MF_E_NET_UNSAFE_URL = 955463530311402108n;
export const MF_E_NET_CACHE_NO_DATA = 955464629823029885n;
export const MF_E_NET_EOL = 955465729334657662n;
export const MF_E_NET_BAD_REQUEST = 955466828846285439n;
export const MF_E_NET_INTERNAL_SERVER_ERROR = 955467928357913216n;
export const MF_E_NET_SESSION_NOT_FOUND = 955469027869540993n;
export const MF_E_NET_NOCONNECTION = 955470127381168770n;
export const MF_E_NET_CONNECTION_FAILURE = 955471226892796547n;
export const MF_E_NET_INCOMPATIBLE_PUSHSERVER = 955472326404424324n;
export const MF_E_NET_SERVER_ACCESSDENIED = 955473425916052101n;
export const MF_E_NET_PROXY_ACCESSDENIED = 955474525427679878n;
export const MF_E_NET_CANNOTCONNECT = 955475624939307655n;
export const MF_E_NET_INVALID_PUSH_TEMPLATE = 955476724450935432n;
export const MF_E_NET_INVALID_PUSH_PUBLISHING_POINT = 955477823962563209n;
export const MF_E_NET_BUSY = 955478923474190986n;
export const MF_E_NET_RESOURCE_GONE = 955480022985818763n;
export const MF_E_NET_ERROR_FROM_PROXY = 955481122497446540n;
export const MF_E_NET_PROXY_TIMEOUT = 955482222009074317n;
export const MF_E_NET_SERVER_UNAVAILABLE = 955483321520702094n;
export const MF_E_NET_TOO_MUCH_DATA = 955484421032329871n;
export const MF_E_NET_SESSION_INVALID = 955485520543957648n;
export const MF_E_OFFLINE_MODE = 955486620055585425n;
export const MF_E_NET_UDP_BLOCKED = 955487719567213202n;
export const MF_E_NET_UNSUPPORTED_CONFIGURATION = 955488819078840979n;
export const MF_E_NET_PROTOCOL_DISABLED = 955489918590468756n;
export const MF_E_NET_COMPANION_DRIVER_DISCONNECT = 956539952194994837n;
export const MF_E_ALREADY_INITIALIZED = 956541051706623568n;
export const MF_E_BANDWIDTH_OVERRUN = 956542151218251345n;
export const MF_E_LATE_SAMPLE = 956543250729879122n;
export const MF_E_FLUSH_NEEDED = 956544350241506899n;
export const MF_E_INVALID_PROFILE = 956545449753134676n;
export const MF_E_INDEX_NOT_COMMITTED = 956546549264762453n;
export const MF_E_NO_INDEX = 956547648776390230n;
export const MF_E_CANNOT_INDEX_IN_PLACE = 956548748288018007n;
export const MF_E_MISSING_ASF_LEAKYBUCKET = 956549847799645784n;
export const MF_E_INVALID_ASF_STREAMID = 957639463822771801n;
export const MF_E_STREAMSINK_REMOVED = 957641662846028344n;
export const MF_E_STREAMSINKS_OUT_OF_SYNC = 957642762357656122n;
export const MF_E_STREAMSINKS_FIXED = 957643861869283899n;
export const MF_E_STREAMSINK_EXISTS = 957644961380911676n;
export const MF_E_SAMPLEALLOCATOR_CANCELED = 957646060892539453n;
export const MF_E_SAMPLEALLOCATOR_EMPTY = 957647160404167230n;
export const MF_E_SINK_ALREADYSTOPPED = 957648259915795007n;
export const MF_E_ASF_FILESINK_BITRATE_UNKNOWN = 957649359427422784n;
export const MF_E_SINK_NO_STREAMS = 957650458939050561n;
export const MF_S_SINK_NOT_FINALIZED = 957651555229452866n;
export const MF_E_METADATA_TOO_LONG = 957652657962306115n;
export const MF_E_SINK_NO_SAMPLES_PROCESSED = 957653757473933892n;
export const MF_E_SINK_HEADERS_NOT_FOUND = 958738975450548805n;
export const MF_E_VIDEO_REN_NO_PROCAMP_HW = 958740074962177568n;
export const MF_E_VIDEO_REN_NO_DEINTERLACE_HW = 958741174473805345n;
export const MF_E_VIDEO_REN_COPYPROT_FAILED = 958742273985433122n;
export const MF_E_VIDEO_REN_SURFACE_NOT_SHARED = 958743373497060899n;
export const MF_E_VIDEO_DEVICE_LOCKED = 958744473008688676n;
export const MF_E_NEW_VIDEO_DEVICE = 958745572520316453n;
export const MF_E_NO_VIDEO_SAMPLE_AVAILABLE = 958848926613327398n;
export const MF_E_NO_AUDIO_PLAYBACK_DEVICE = 958850026124955268n;
export const MF_E_AUDIO_PLAYBACK_DEVICE_IN_USE = 958851125636583045n;
export const MF_E_AUDIO_PLAYBACK_DEVICE_INVALIDATED = 958852225148210822n;
export const MF_E_AUDIO_SERVICE_NOT_RUNNING = 958853324659838599n;
export const MF_E_AUDIO_BUFFER_SIZE_ERROR = 958854424171466376n;
export const MF_E_AUDIO_CLIENT_WRAPPER_SPOOF_ERROR = 959845084148092553n;
export const MF_E_TOPO_INVALID_OPTIONAL_NODE = 959848382682976782n;
export const MF_E_TOPO_CANNOT_FIND_DECRYPTOR = 959849482194604561n;
export const MF_E_TOPO_CODEC_NOT_FOUND = 959850581706232338n;
export const MF_E_TOPO_CANNOT_CONNECT = 959851681217860115n;
export const MF_E_TOPO_UNSUPPORTED = 959852780729487892n;
export const MF_E_TOPO_INVALID_TIME_ATTRIBUTES = 959853880241115669n;
export const MF_E_TOPO_LOOPS_IN_TOPOLOGY = 959854979752743446n;
export const MF_E_TOPO_MISSING_PRESENTATION_DESCRIPTOR = 959856079264371223n;
export const MF_E_TOPO_MISSING_STREAM_DESCRIPTOR = 959857178775999000n;
export const MF_E_TOPO_STREAM_DESCRIPTOR_NOT_SELECTED = 959858278287626777n;
export const MF_E_TOPO_MISSING_SOURCE = 959859377799254554n;
export const MF_E_TOPO_SINK_ACTIVATES_UNSUPPORTED = 964240931635941915n;
export const MF_E_SEQUENCER_UNKNOWN_SEGMENT_ID = 964242031147573676n;
export const MF_S_SEQUENCER_CONTEXT_CANCELED = 964243127437975981n;
export const MF_E_NO_SOURCE_IN_CACHE = 964244230170829230n;
export const MF_S_SEQUENCER_SEGMENT_AT_END_OF_STREAM = 967535065251537327n;
export const MF_E_TRANSFORM_TYPE_NOT_SET = 967536167984393568n;
export const MF_E_TRANSFORM_STREAM_CHANGE = 967537267496021345n;
export const MF_E_TRANSFORM_INPUT_REMAINING = 967538367007649122n;
export const MF_E_TRANSFORM_PROFILE_MISSING = 967539466519276899n;
export const MF_E_TRANSFORM_PROFILE_INVALID_OR_CORRUPT = 967540566030904676n;
export const MF_E_TRANSFORM_PROFILE_TRUNCATED = 967541665542532453n;
export const MF_E_TRANSFORM_PROPERTY_PID_NOT_RECOGNIZED = 967542765054160230n;
export const MF_E_TRANSFORM_PROPERTY_VARIANT_TYPE_WRONG = 967543864565788007n;
export const MF_E_TRANSFORM_PROPERTY_NOT_WRITEABLE = 967544964077415784n;
export const MF_E_TRANSFORM_PROPERTY_ARRAY_VALUE_WRONG_NUM_DIM = 967546063589043561n;
export const MF_E_TRANSFORM_PROPERTY_VALUE_SIZE_WRONG = 967547163100671338n;
export const MF_E_TRANSFORM_PROPERTY_VALUE_OUT_OF_RANGE = 967548262612299115n;
export const MF_E_TRANSFORM_PROPERTY_VALUE_INCOMPATIBLE = 967549362123926892n;
export const MF_E_TRANSFORM_NOT_POSSIBLE_FOR_CURRENT_OUTPUT_MEDIATYPE = 967550461635554669n;
export const MF_E_TRANSFORM_NOT_POSSIBLE_FOR_CURRENT_INPUT_MEDIATYPE = 967551561147182446n;
export const MF_E_TRANSFORM_NOT_POSSIBLE_FOR_CURRENT_MEDIATYPE_COMBINATION = 967552660658810223n;
export const MF_E_TRANSFORM_CONFLICTS_WITH_OTHER_CURRENTLY_ENABLED_FEATURES = 967554859682065776n;
export const MF_E_TRANSFORM_NEED_MORE_INPUT = 967555959193693554n;
export const MF_E_TRANSFORM_NOT_POSSIBLE_FOR_CURRENT_SPKR_CONFIG = 967557058705321331n;
export const MF_E_TRANSFORM_CANNOT_CHANGE_MEDIATYPE_WHILE_PROCESSING = 967558158216949108n;
export const MF_S_TRANSFORM_DO_NOT_PROPAGATE_EVENT = 967559254507351413n;
export const MF_E_UNSUPPORTED_D3D_TYPE = 967560357240204662n;
export const MF_E_TRANSFORM_ASYNC_LOCKED = 967561456751832439n;
export const MF_E_TRANSFORM_CANNOT_INITIALIZE_ACM_DRIVER = 967562556263460216n;
export const MF_E_TRANSFORM_STREAM_INVALID_RESOLUTION = 967563655775087993n;
export const MF_E_TRANSFORM_ASYNC_MFT_NOT_SUPPORTED = 967565854798343546n;
export const MF_E_TRANSFORM_EXATTRIBUTE_NOT_SUPPORTED = 968634580100541820n;
export const MF_E_LICENSE_INCORRECT_RIGHTS = 968635679612170568n;
export const MF_E_LICENSE_OUTOFDATE = 968636779123798345n;
export const MF_E_LICENSE_REQUIRED = 968637878635426122n;
export const MF_E_DRM_HARDWARE_INCONSISTENT = 968638978147053899n;
export const MF_E_NO_CONTENT_PROTECTION_MANAGER = 968640077658681676n;
export const MF_E_LICENSE_RESTORE_NO_RIGHTS = 968641177170309453n;
export const MF_E_BACKUP_RESTRICTED_LICENSE = 968642276681937230n;
export const MF_E_LICENSE_RESTORE_NEEDS_INDIVIDUALIZATION = 968643376193565007n;
export const MF_S_PROTECTION_NOT_REQUIRED = 968644472483967312n;
export const MF_E_COMPONENT_REVOKED = 968645575216820561n;
export const MF_E_TRUST_DISABLED = 968646674728448338n;
export const MF_E_WMDRMOTA_NO_ACTION = 968647774240076115n;
export const MF_E_WMDRMOTA_ACTION_ALREADY_SET = 968648873751703892n;
export const MF_E_WMDRMOTA_DRM_HEADER_NOT_AVAILABLE = 968649973263331669n;
export const MF_E_WMDRMOTA_DRM_ENCRYPTION_SCHEME_NOT_SUPPORTED = 968651072774959446n;
export const MF_E_WMDRMOTA_ACTION_MISMATCH = 968652172286587223n;
export const MF_E_WMDRMOTA_INVALID_POLICY = 968653271798215000n;
export const MF_E_POLICY_UNSUPPORTED = 968654371309842777n;
export const MF_E_OPL_NOT_SUPPORTED = 968655470821470554n;
export const MF_E_TOPOLOGY_VERIFICATION_FAILED = 968656570333098331n;
export const MF_E_SIGNATURE_VERIFICATION_FAILED = 968657669844726108n;
export const MF_E_DEBUGGING_NOT_ALLOWED = 968658769356353885n;
export const MF_E_CODE_EXPIRED = 968659868867981662n;
export const MF_E_GRL_VERSION_TOO_LOW = 968660968379609439n;
export const MF_E_GRL_RENEWAL_NOT_FOUND = 968662067891237216n;
export const MF_E_GRL_EXTENSIBLE_ENTRY_NOT_FOUND = 968663167402864993n;
export const MF_E_KERNEL_UNTRUSTED = 968664266914492770n;
export const MF_E_PEAUTH_UNTRUSTED = 968666465937748323n;
export const MF_E_NON_PE_PROCESS = 968668664961003877n;
export const MF_E_REBOOT_REQUIRED = 968669764472631655n;
export const MF_S_WAIT_FOR_POLICY_SET = 968670860763033960n;
export const MF_S_VIDEO_DISABLED_WITH_UNKNOWN_SOFTWARE_OUTPUT = 968671960274661737n;
export const MF_E_GRL_INVALID_FORMAT = 968673063007514986n;
export const MF_E_GRL_UNRECOGNIZED_FORMAT = 968674162519142763n;
export const MF_E_ALL_PROCESS_RESTART_REQUIRED = 968675262030770540n;
export const MF_E_PROCESS_RESTART_REQUIRED = 968676361542398317n;
export const MF_E_USERMODE_UNTRUSTED = 968677461054026094n;
export const MF_E_PEAUTH_SESSION_NOT_STARTED = 968679660077281647n;
export const MF_E_PEAUTH_PUBLICKEY_REVOKED = 968680759588909425n;
export const MF_E_GRL_ABSENT = 968681859100537202n;
export const MF_S_PE_TRUSTED = 968682955390939507n;
export const MF_E_PE_UNTRUSTED = 968684058123792756n;
export const MF_E_PEAUTH_NOT_STARTED = 968685157635420533n;
export const MF_E_INCOMPATIBLE_SAMPLE_PROTECTION = 968686257147048310n;
export const MF_E_PE_SESSIONS_MAXED = 968687356658676087n;
export const MF_E_HIGH_SECURITY_LEVEL_CONTENT_NOT_ALLOWED = 968688456170303864n;
export const MF_E_TEST_SIGNED_COMPONENTS_NOT_ALLOWED = 968689555681931641n;
export const MF_E_ITA_UNSUPPORTED_ACTION = 968690655193559418n;
export const MF_E_ITA_ERROR_PARSING_SAP_PARAMETERS = 968691754705187195n;
export const MF_E_POLICY_MGR_ACTION_OUTOFBOUNDS = 968692854216814972n;
export const MF_E_BAD_OPL_STRUCTURE_FORMAT = 968693953728442749n;
export const MF_E_ITA_UNRECOGNIZED_ANALOG_VIDEO_PROTECTION_GUID = 968695053240070526n;
export const MF_E_NO_PMP_HOST = 968696152751698303n;
export const MF_E_ITA_OPL_DATA_NOT_INITIALIZED = 968697252263326080n;
export const MF_E_ITA_UNRECOGNIZED_ANALOG_VIDEO_OUTPUT = 968698351774953857n;
export const MF_E_ITA_UNRECOGNIZED_DIGITAL_VIDEO_OUTPUT = 968699451286581634n;
export const MF_E_RESOLUTION_REQUIRES_PMP_CREATION_CALLBACK = 968700550798209411n;
export const MF_E_INVALID_AKE_CHANNEL_PARAMETERS = 968701650309837188n;
export const MF_E_CONTENT_PROTECTION_SYSTEM_NOT_ENABLED = 968702749821464965n;
export const MF_E_UNSUPPORTED_CONTENT_PROTECTION_SYSTEM = 968703849333092742n;
export const MF_E_DRM_MIGRATION_NOT_SUPPORTED = 968704948844720519n;
export const MF_E_HDCP_AUTHENTICATION_FAILURE = 968706048356348296n;
export const MF_E_HDCP_LINK_FAILURE = 980729208006078857n;
export const MF_E_CLOCK_INVALID_CONTINUITY_KEY = 980730307517717568n;
export const MF_E_CLOCK_NO_TIME_SOURCE = 980731407029345345n;
export const MF_E_CLOCK_STATE_ALREADY_SET = 980732506540973122n;
export const MF_E_CLOCK_NOT_SIMPLE = 980733606052600899n;
export const MF_S_CLOCK_STOPPED = 980734702343003204n;
export const MF_E_CLOCK_AUDIO_DEVICE_POSITION_UNEXPECTED = 980735801854630981n;
export const MF_E_CLOCK_AUDIO_RENDER_POSITION_UNEXPECTED = 980736901366258758n;
export const MF_E_CLOCK_AUDIO_RENDER_TIME_UNEXPECTED = 981828716412640327n;
export const MF_E_NO_MORE_DROP_MODES = 981829819145494568n;
export const MF_E_NO_MORE_QUALITY_LEVELS = 981830918657122345n;
export const MF_E_DROPTIME_NOT_SUPPORTED = 981832018168750122n;
export const MF_E_QUALITYKNOB_WAIT_LONGER = 981833117680377899n;
export const MF_E_QM_INVALIDSTATE = 982928231261642796n;
export const MF_E_TRANSCODE_NO_CONTAINERTYPE = 982929330773271568n;
export const MF_E_TRANSCODE_PROFILE_NO_MATCHING_STREAMS = 982930430284899345n;
export const MF_E_TRANSCODE_NO_MATCHING_ENCODER = 982931529796527122n;
export const MF_E_TRANSCODE_INVALID_PROFILE = 984027742889419795n;
export const MF_E_ALLOCATOR_NOT_INITIALIZED = 984028842401048568n;
export const MF_E_ALLOCATOR_NOT_COMMITED = 984029941912676345n;
export const MF_E_ALLOCATOR_ALREADY_COMMITED = 984031041424304122n;
export const MF_E_STREAM_ERROR = 984032140935931899n;
export const MF_E_INVALID_STREAM_STATE = 984033240447559676n;
export const MF_E_HW_STREAM_NOT_CONNECTED = 985127254517196797n;
export const MF_E_NO_CAPTURE_DEVICES_AVAILABLE = 985128354028825568n;
export const MF_E_CAPTURE_SINK_OUTPUT_NOT_SET = 985129453540453345n;
export const MF_E_CAPTURE_SINK_MIRROR_ERROR = 985130553052081122n;
export const MF_E_CAPTURE_SINK_ROTATE_ERROR = 985131652563708899n;
export const MF_E_CAPTURE_ENGINE_INVALID_OP = 985132752075336676n;
export const MF_E_CAPTURE_ENGINE_ALL_EFFECTS_REMOVED = 985133851586964453n;
export const MF_E_CAPTURE_SOURCE_NO_INDEPENDENT_PHOTO_STREAM_PRESENT = 985134951098592230n;
export const MF_E_CAPTURE_SOURCE_NO_VIDEO_STREAM_PRESENT = 985136050610220007n;
export const MF_E_CAPTURE_SOURCE_NO_AUDIO_STREAM_PRESENT = 985137150121847784n;
export const MF_E_CAPTURE_SOURCE_DEVICE_EXTENDEDPROP_OP_IN_PROGRESS = 985138249633475561n;
export const MF_E_CAPTURE_PROPERTY_SET_DURING_PHOTO = 985139349145103338n;
export const MF_E_CAPTURE_NO_SAMPLES_IN_QUEUE = 985140448656731115n;
export const MF_E_HW_ACCELERATED_THUMBNAIL_NOT_SUPPORTED = 985141548168358892n;
export const MF_E_UNSUPPORTED_CAPTURE_DEVICE_PRESENT = 986226766144973805n;
export const MF_E_TIMELINECONTROLLER_UNSUPPORTED_SOURCE_TYPE = 986227865656602568n;
export const MF_E_TIMELINECONTROLLER_NOT_ALLOWED = 986228965168230345n;
export const MF_E_TIMELINECONTROLLER_CANNOT_ATTACH = 987326277772750794n;
export const MF_E_MEDIA_EXTENSION_APPSERVICE_CONNECTION_FAILED = 987327377284379568n;
export const MF_E_MEDIA_EXTENSION_APPSERVICE_REQUEST_FAILED = 987328476796007345n;
export const MF_E_MEDIA_EXTENSION_PACKAGE_INTEGRITY_CHECK_FAILED = 987329576307635122n;
export const MF_E_MEDIA_EXTENSION_PACKAGE_LICENSE_INVALID = 8070451652161549235n;
export const MF_INDEX_SIZE_ERR = 2154823681;
export const MF_NOT_FOUND_ERR = 2154823688;
export const MF_NOT_SUPPORTED_ERR = 2154823689;
export const MF_INVALID_STATE_ERR = 2154823691;
export const MF_SYNTAX_ERR = 2154823692;
export const MF_INVALID_ACCESS_ERR = 2154823695;
export const MF_QUOTA_EXCEEDED_ERR = 2154823702;
export const MF_PARSE_ERR = 2154823761;
export const MF_TYPE_ERR = 2154840069;
export const g_wszSpeechFormatCaps = `SpeechFormatCap`;
export const g_wszWMCPCodecName = `_CODECNAME`;
export const g_wszWMCPSupportedVBRModes = `_SUPPORTEDVBRMODES`;
export const g_wszWMCPAudioVBRSupported = `_VBRENABLED`;
export const g_wszWMCPAudioVBRQuality = `_VBRQUALITY`;
export const g_wszWMCPMaxPasses = `_PASSESRECOMMENDED`;
export const g_wszWMCPDefaultCrisp = `_DEFAULTCRISP`;
export const COPP_ProtectionType_Unknown = `-2147483648`;
export const COPP_ProtectionType_None = 0;
export const COPP_ProtectionType_HDCP = 1;
export const COPP_ProtectionType_ACP = 2;
export const COPP_ProtectionType_CGMSA = 4;
export const COPP_ProtectionType_Mask = `-2147483641`;
export const COPP_ProtectionType_Reserved = 2147483640;
export const BI_RGB = 0;
export const BI_RLE8 = 1;
export const BI_RLE4 = 2;
export const BI_BITFIELDS = 3;
export const BI_JPEG = 4;
export const BI_PNG = 5;
export const D3D12_VIDEO_FIELD_TYPE_NONE = 0;
export const D3D12_VIDEO_FIELD_TYPE_INTERLACED_TOP_FIELD_FIRST = 1;
export const D3D12_VIDEO_FIELD_TYPE_INTERLACED_BOTTOM_FIELD_FIRST = 2;
export const D3D12_VIDEO_FRAME_STEREO_FORMAT_NONE = 0;
export const D3D12_VIDEO_FRAME_STEREO_FORMAT_MONO = 1;
export const D3D12_VIDEO_FRAME_STEREO_FORMAT_HORIZONTAL = 2;
export const D3D12_VIDEO_FRAME_STEREO_FORMAT_VERTICAL = 3;
export const D3D12_VIDEO_FRAME_STEREO_FORMAT_SEPARATE = 4;
export const DXGI_FORMAT_UNKNOWN = 0;
export const DXGI_FORMAT_R32G32B32A32_TYPELESS = 1;
export const DXGI_FORMAT_R32G32B32A32_FLOAT = 2;
export const DXGI_FORMAT_R32G32B32A32_UINT = 3;
export const DXGI_FORMAT_R32G32B32A32_SINT = 4;
export const DXGI_FORMAT_R32G32B32_TYPELESS = 5;
export const DXGI_FORMAT_R32G32B32_FLOAT = 6;
export const DXGI_FORMAT_R32G32B32_UINT = 7;
export const DXGI_FORMAT_R32G32B32_SINT = 8;
export const DXGI_FORMAT_R16G16B16A16_TYPELESS = 9;
export const DXGI_FORMAT_R16G16B16A16_FLOAT = 10;
export const DXGI_FORMAT_R16G16B16A16_UNORM = 11;
export const DXGI_FORMAT_R16G16B16A16_UINT = 12;
export const DXGI_FORMAT_R16G16B16A16_SNORM = 13;
export const DXGI_FORMAT_R16G16B16A16_SINT = 14;
export const DXGI_FORMAT_R32G32_TYPELESS = 15;
export const DXGI_FORMAT_R32G32_FLOAT = 16;
export const DXGI_FORMAT_R32G32_UINT = 17;
export const DXGI_FORMAT_R32G32_SINT = 18;
export const DXGI_FORMAT_R32G8X24_TYPELESS = 19;
export const DXGI_FORMAT_D32_FLOAT_S8X24_UINT = 20;
export const DXGI_FORMAT_R32_FLOAT_X8X24_TYPELESS = 21;
export const DXGI_FORMAT_X32_TYPELESS_G8X24_UINT = 22;
export const DXGI_FORMAT_R10G10B10A2_TYPELESS = 23;
export const DXGI_FORMAT_R10G10B10A2_UNORM = 24;
export const DXGI_FORMAT_R10G10B10A2_UINT = 25;
export const DXGI_FORMAT_R11G11B10_FLOAT = 26;
export const DXGI_FORMAT_R8G8B8A8_TYPELESS = 27;
export const DXGI_FORMAT_R8G8B8A8_UNORM = 28;
export const DXGI_FORMAT_R8G8B8A8_UNORM_SRGB = 29;
export const DXGI_FORMAT_R8G8B8A8_UINT = 30;
export const DXGI_FORMAT_R8G8B8A8_SNORM = 31;
export const DXGI_FORMAT_R8G8B8A8_SINT = 32;
export const DXGI_FORMAT_R16G16_TYPELESS = 33;
export const DXGI_FORMAT_R16G16_FLOAT = 34;
export const DXGI_FORMAT_R16G16_UNORM = 35;
export const DXGI_FORMAT_R16G16_UINT = 36;
export const DXGI_FORMAT_R16G16_SNORM = 37;
export const DXGI_FORMAT_R16G16_SINT = 38;
export const DXGI_FORMAT_R32_TYPELESS = 39;
export const DXGI_FORMAT_D32_FLOAT = 40;
export const DXGI_FORMAT_R32_FLOAT = 41;
export const DXGI_FORMAT_R32_UINT = 42;
export const DXGI_FORMAT_R32_SINT = 43;
export const DXGI_FORMAT_R24G8_TYPELESS = 44;
export const DXGI_FORMAT_D24_UNORM_S8_UINT = 45;
export const DXGI_FORMAT_R24_UNORM_X8_TYPELESS = 46;
export const DXGI_FORMAT_X24_TYPELESS_G8_UINT = 47;
export const DXGI_FORMAT_R8G8_TYPELESS = 48;
export const DXGI_FORMAT_R8G8_UNORM = 49;
export const DXGI_FORMAT_R8G8_UINT = 50;
export const DXGI_FORMAT_R8G8_SNORM = 51;
export const DXGI_FORMAT_R8G8_SINT = 52;
export const DXGI_FORMAT_R16_TYPELESS = 53;
export const DXGI_FORMAT_R16_FLOAT = 54;
export const DXGI_FORMAT_D16_UNORM = 55;
export const DXGI_FORMAT_R16_UNORM = 56;
export const DXGI_FORMAT_R16_UINT = 57;
export const DXGI_FORMAT_R16_SNORM = 58;
export const DXGI_FORMAT_R16_SINT = 59;
export const DXGI_FORMAT_R8_TYPELESS = 60;
export const DXGI_FORMAT_R8_UNORM = 61;
export const DXGI_FORMAT_R8_UINT = 62;
export const DXGI_FORMAT_R8_SNORM = 63;
export const DXGI_FORMAT_R8_SINT = 64;
export const DXGI_FORMAT_A8_UNORM = 65;
export const DXGI_FORMAT_R1_UNORM = 66;
export const DXGI_FORMAT_R9G9B9E5_SHAREDEXP = 67;
export const DXGI_FORMAT_R8G8_B8G8_UNORM = 68;
export const DXGI_FORMAT_G8R8_G8B8_UNORM = 69;
export const DXGI_FORMAT_BC1_TYPELESS = 70;
export const DXGI_FORMAT_BC1_UNORM = 71;
export const DXGI_FORMAT_BC1_UNORM_SRGB = 72;
export const DXGI_FORMAT_BC2_TYPELESS = 73;
export const DXGI_FORMAT_BC2_UNORM = 74;
export const DXGI_FORMAT_BC2_UNORM_SRGB = 75;
export const DXGI_FORMAT_BC3_TYPELESS = 76;
export const DXGI_FORMAT_BC3_UNORM = 77;
export const DXGI_FORMAT_BC3_UNORM_SRGB = 78;
export const DXGI_FORMAT_BC4_TYPELESS = 79;
export const DXGI_FORMAT_BC4_UNORM = 80;
export const DXGI_FORMAT_BC4_SNORM = 81;
export const DXGI_FORMAT_BC5_TYPELESS = 82;
export const DXGI_FORMAT_BC5_UNORM = 83;
export const DXGI_FORMAT_BC5_SNORM = 84;
export const DXGI_FORMAT_B5G6R5_UNORM = 85;
export const DXGI_FORMAT_B5G5R5A1_UNORM = 86;
export const DXGI_FORMAT_B8G8R8A8_UNORM = 87;
export const DXGI_FORMAT_B8G8R8X8_UNORM = 88;
export const DXGI_FORMAT_R10G10B10_XR_BIAS_A2_UNORM = 89;
export const DXGI_FORMAT_B8G8R8A8_TYPELESS = 90;
export const DXGI_FORMAT_B8G8R8A8_UNORM_SRGB = 91;
export const DXGI_FORMAT_B8G8R8X8_TYPELESS = 92;
export const DXGI_FORMAT_B8G8R8X8_UNORM_SRGB = 93;
export const DXGI_FORMAT_BC6H_TYPELESS = 94;
export const DXGI_FORMAT_BC6H_UF16 = 95;
export const DXGI_FORMAT_BC6H_SF16 = 96;
export const DXGI_FORMAT_BC7_TYPELESS = 97;
export const DXGI_FORMAT_BC7_UNORM = 98;
export const DXGI_FORMAT_BC7_UNORM_SRGB = 99;
export const DXGI_FORMAT_AYUV = 100;
export const DXGI_FORMAT_Y410 = 101;
export const DXGI_FORMAT_Y416 = 102;
export const DXGI_FORMAT_NV12 = 103;
export const DXGI_FORMAT_P010 = 104;
export const DXGI_FORMAT_P016 = 105;
export const DXGI_FORMAT_420_OPAQUE = 106;
export const DXGI_FORMAT_YUY2 = 107;
export const DXGI_FORMAT_Y210 = 108;
export const DXGI_FORMAT_Y216 = 109;
export const DXGI_FORMAT_NV11 = 110;
export const DXGI_FORMAT_AI44 = 111;
export const DXGI_FORMAT_IA44 = 112;
export const DXGI_FORMAT_P8 = 113;
export const DXGI_FORMAT_A8P8 = 114;
export const DXGI_FORMAT_B4G4R4A4_UNORM = 115;
export const DXGI_FORMAT_P208 = 130;
export const DXGI_FORMAT_V208 = 131;
export const DXGI_FORMAT_V408 = 132;
export const DXGI_FORMAT_SAMPLER_FEEDBACK_MIN_MIP_OPAQUE = 189;
export const DXGI_FORMAT_SAMPLER_FEEDBACK_MIP_REGION_USED_OPAQUE = 190;
export const DXGI_FORMAT_FORCE_UINT = 4294967295;
export const DXGI_COLOR_SPACE_RGB_FULL_G22_NONE_P709 = 0;
export const DXGI_COLOR_SPACE_RGB_FULL_G10_NONE_P709 = 1;
export const DXGI_COLOR_SPACE_RGB_STUDIO_G22_NONE_P709 = 2;
export const DXGI_COLOR_SPACE_RGB_STUDIO_G22_NONE_P2020 = 3;
export const DXGI_COLOR_SPACE_RESERVED = 4;
export const DXGI_COLOR_SPACE_YCBCR_FULL_G22_NONE_P709_X601 = 5;
export const DXGI_COLOR_SPACE_YCBCR_STUDIO_G22_LEFT_P601 = 6;
export const DXGI_COLOR_SPACE_YCBCR_FULL_G22_LEFT_P601 = 7;
export const DXGI_COLOR_SPACE_YCBCR_STUDIO_G22_LEFT_P709 = 8;
export const DXGI_COLOR_SPACE_YCBCR_FULL_G22_LEFT_P709 = 9;
export const DXGI_COLOR_SPACE_YCBCR_STUDIO_G22_LEFT_P2020 = 10;
export const DXGI_COLOR_SPACE_YCBCR_FULL_G22_LEFT_P2020 = 11;
export const DXGI_COLOR_SPACE_RGB_FULL_G2084_NONE_P2020 = 12;
export const DXGI_COLOR_SPACE_YCBCR_STUDIO_G2084_LEFT_P2020 = 13;
export const DXGI_COLOR_SPACE_RGB_STUDIO_G2084_NONE_P2020 = 14;
export const DXGI_COLOR_SPACE_YCBCR_STUDIO_G22_TOPLEFT_P2020 = 15;
export const DXGI_COLOR_SPACE_YCBCR_STUDIO_G2084_TOPLEFT_P2020 = 16;
export const DXGI_COLOR_SPACE_RGB_FULL_G22_NONE_P2020 = 17;
export const DXGI_COLOR_SPACE_YCBCR_STUDIO_GHLG_TOPLEFT_P2020 = 18;
export const DXGI_COLOR_SPACE_YCBCR_FULL_GHLG_TOPLEFT_P2020 = 19;
export const DXGI_COLOR_SPACE_RGB_STUDIO_G24_NONE_P709 = 20;
export const DXGI_COLOR_SPACE_RGB_STUDIO_G24_NONE_P2020 = 21;
export const DXGI_COLOR_SPACE_YCBCR_STUDIO_G24_LEFT_P709 = 22;
export const DXGI_COLOR_SPACE_YCBCR_STUDIO_G24_LEFT_P2020 = 23;
export const DXGI_COLOR_SPACE_YCBCR_STUDIO_G24_TOPLEFT_P2020 = 24;
export const DXGI_COLOR_SPACE_CUSTOM = `-1`;
export const D3D12_VIDEO_FRAME_CODED_INTERLACE_TYPE_NONE = 0;
export const D3D12_VIDEO_FRAME_CODED_INTERLACE_TYPE_FIELD_BASED = 1;
export const D3D12_FEATURE_VIDEO_DECODE_SUPPORT = 0;
export const D3D12_FEATURE_VIDEO_DECODE_PROFILES = 1;
export const D3D12_FEATURE_VIDEO_DECODE_FORMATS = 2;
export const D3D12_FEATURE_VIDEO_DECODE_CONVERSION_SUPPORT = 3;
export const D3D12_FEATURE_VIDEO_PROCESS_SUPPORT = 5;
export const D3D12_FEATURE_VIDEO_PROCESS_MAX_INPUT_STREAMS = 6;
export const D3D12_FEATURE_VIDEO_PROCESS_REFERENCE_INFO = 7;
export const D3D12_FEATURE_VIDEO_DECODER_HEAP_SIZE = 8;
export const D3D12_FEATURE_VIDEO_PROCESSOR_SIZE = 9;
export const D3D12_FEATURE_VIDEO_DECODE_PROFILE_COUNT = 10;
export const D3D12_FEATURE_VIDEO_DECODE_FORMAT_COUNT = 11;
export const D3D12_FEATURE_VIDEO_ARCHITECTURE = 17;
export const D3D12_FEATURE_VIDEO_DECODE_HISTOGRAM = 18;
export const D3D12_FEATURE_VIDEO_FEATURE_AREA_SUPPORT = 19;
export const D3D12_FEATURE_VIDEO_MOTION_ESTIMATOR = 20;
export const D3D12_FEATURE_VIDEO_MOTION_ESTIMATOR_SIZE = 21;
export const D3D12_FEATURE_VIDEO_EXTENSION_COMMAND_COUNT = 22;
export const D3D12_FEATURE_VIDEO_EXTENSION_COMMANDS = 23;
export const D3D12_FEATURE_VIDEO_EXTENSION_COMMAND_PARAMETER_COUNT = 24;
export const D3D12_FEATURE_VIDEO_EXTENSION_COMMAND_PARAMETERS = 25;
export const D3D12_FEATURE_VIDEO_EXTENSION_COMMAND_SUPPORT = 26;
export const D3D12_FEATURE_VIDEO_EXTENSION_COMMAND_SIZE = 27;
export const D3D12_FEATURE_VIDEO_DECODE_PROTECTED_RESOURCES = 28;
export const D3D12_FEATURE_VIDEO_PROCESS_PROTECTED_RESOURCES = 29;
export const D3D12_FEATURE_VIDEO_MOTION_ESTIMATOR_PROTECTED_RESOURCES = 30;
export const D3D12_FEATURE_VIDEO_DECODER_HEAP_SIZE1 = 31;
export const D3D12_FEATURE_VIDEO_PROCESSOR_SIZE1 = 32;
export const D3D12_BITSTREAM_ENCRYPTION_TYPE_NONE = 0;
export const D3D12_VIDEO_PROCESS_FILTER_BRIGHTNESS = 0;
export const D3D12_VIDEO_PROCESS_FILTER_CONTRAST = 1;
export const D3D12_VIDEO_PROCESS_FILTER_HUE = 2;
export const D3D12_VIDEO_PROCESS_FILTER_SATURATION = 3;
export const D3D12_VIDEO_PROCESS_FILTER_NOISE_REDUCTION = 4;
export const D3D12_VIDEO_PROCESS_FILTER_EDGE_ENHANCEMENT = 5;
export const D3D12_VIDEO_PROCESS_FILTER_ANAMORPHIC_SCALING = 6;
export const D3D12_VIDEO_PROCESS_FILTER_STEREO_ADJUSTMENT = 7;
export const D3D12_VIDEO_PROCESS_FILTER_FLAG_NONE = 0;
export const D3D12_VIDEO_PROCESS_FILTER_FLAG_BRIGHTNESS = 1;
export const D3D12_VIDEO_PROCESS_FILTER_FLAG_CONTRAST = 2;
export const D3D12_VIDEO_PROCESS_FILTER_FLAG_HUE = 4;
export const D3D12_VIDEO_PROCESS_FILTER_FLAG_SATURATION = 8;
export const D3D12_VIDEO_PROCESS_FILTER_FLAG_NOISE_REDUCTION = 16;
export const D3D12_VIDEO_PROCESS_FILTER_FLAG_EDGE_ENHANCEMENT = 32;
export const D3D12_VIDEO_PROCESS_FILTER_FLAG_ANAMORPHIC_SCALING = 64;
export const D3D12_VIDEO_PROCESS_FILTER_FLAG_STEREO_ADJUSTMENT = 128;
export const D3D12_VIDEO_PROCESS_DEINTERLACE_FLAG_NONE = 0;
export const D3D12_VIDEO_PROCESS_DEINTERLACE_FLAG_BOB = 1;
export const D3D12_VIDEO_PROCESS_DEINTERLACE_FLAG_CUSTOM = 2147483648;
export const D3D12_VIDEO_PROCESS_ALPHA_FILL_MODE_OPAQUE = 0;
export const D3D12_VIDEO_PROCESS_ALPHA_FILL_MODE_BACKGROUND = 1;
export const D3D12_VIDEO_PROCESS_ALPHA_FILL_MODE_DESTINATION = 2;
export const D3D12_VIDEO_PROCESS_ALPHA_FILL_MODE_SOURCE_STREAM = 3;
export const D3D12_VIDEO_DECODE_TIER_NOT_SUPPORTED = 0;
export const D3D12_VIDEO_DECODE_TIER_1 = 1;
export const D3D12_VIDEO_DECODE_TIER_2 = 2;
export const D3D12_VIDEO_DECODE_TIER_3 = 3;
export const D3D12_VIDEO_DECODE_SUPPORT_FLAG_NONE = 0;
export const D3D12_VIDEO_DECODE_SUPPORT_FLAG_SUPPORTED = 1;
export const D3D12_VIDEO_DECODE_CONFIGURATION_FLAG_NONE = 0;
export const D3D12_VIDEO_DECODE_CONFIGURATION_FLAG_HEIGHT_ALIGNMENT_MULTIPLE_32_REQUIRED = 1;
export const D3D12_VIDEO_DECODE_CONFIGURATION_FLAG_POST_PROCESSING_SUPPORTED = 2;
export const D3D12_VIDEO_DECODE_CONFIGURATION_FLAG_REFERENCE_ONLY_ALLOCATIONS_REQUIRED = 4;
export const D3D12_VIDEO_DECODE_CONFIGURATION_FLAG_ALLOW_RESOLUTION_CHANGE_ON_NON_KEY_FRAME = 8;
export const D3D12_VIDEO_DECODE_STATUS_OK = 0;
export const D3D12_VIDEO_DECODE_STATUS_CONTINUE = 1;
export const D3D12_VIDEO_DECODE_STATUS_CONTINUE_SKIP_DISPLAY = 2;
export const D3D12_VIDEO_DECODE_STATUS_RESTART = 3;
export const D3D12_VIDEO_DECODE_STATUS_RATE_EXCEEDED = 4;
export const D3D12_VIDEO_DECODE_ARGUMENT_TYPE_PICTURE_PARAMETERS = 0;
export const D3D12_VIDEO_DECODE_ARGUMENT_TYPE_INVERSE_QUANTIZATION_MATRIX = 1;
export const D3D12_VIDEO_DECODE_ARGUMENT_TYPE_SLICE_CONTROL = 2;
export const D3D12_VIDEO_DECODE_ARGUMENT_TYPE_MAX_VALID = 3;
export const D3D12_VIDEO_DECODE_HISTOGRAM_COMPONENT_Y = 0;
export const D3D12_VIDEO_DECODE_HISTOGRAM_COMPONENT_U = 1;
export const D3D12_VIDEO_DECODE_HISTOGRAM_COMPONENT_V = 2;
export const D3D12_VIDEO_DECODE_HISTOGRAM_COMPONENT_R = 0;
export const D3D12_VIDEO_DECODE_HISTOGRAM_COMPONENT_G = 1;
export const D3D12_VIDEO_DECODE_HISTOGRAM_COMPONENT_B = 2;
export const D3D12_VIDEO_DECODE_HISTOGRAM_COMPONENT_A = 3;
export const D3D12_VIDEO_DECODE_HISTOGRAM_COMPONENT_FLAG_NONE = 0;
export const D3D12_VIDEO_DECODE_HISTOGRAM_COMPONENT_FLAG_Y = 1;
export const D3D12_VIDEO_DECODE_HISTOGRAM_COMPONENT_FLAG_U = 2;
export const D3D12_VIDEO_DECODE_HISTOGRAM_COMPONENT_FLAG_V = 4;
export const D3D12_VIDEO_DECODE_HISTOGRAM_COMPONENT_FLAG_R = 1;
export const D3D12_VIDEO_DECODE_HISTOGRAM_COMPONENT_FLAG_G = 2;
export const D3D12_VIDEO_DECODE_HISTOGRAM_COMPONENT_FLAG_B = 4;
export const D3D12_VIDEO_DECODE_HISTOGRAM_COMPONENT_FLAG_A = 8;
export const D3D12_VIDEO_DECODE_CONVERSION_SUPPORT_FLAG_NONE = 0;
export const D3D12_VIDEO_DECODE_CONVERSION_SUPPORT_FLAG_SUPPORTED = 1;
export const D3D12_VIDEO_SCALE_SUPPORT_FLAG_NONE = 0;
export const D3D12_VIDEO_SCALE_SUPPORT_FLAG_POW2_ONLY = 1;
export const D3D12_VIDEO_SCALE_SUPPORT_FLAG_EVEN_DIMENSIONS_ONLY = 2;
export const D3D12_VIDEO_PROCESS_FEATURE_FLAG_NONE = 0;
export const D3D12_VIDEO_PROCESS_FEATURE_FLAG_ALPHA_FILL = 1;
export const D3D12_VIDEO_PROCESS_FEATURE_FLAG_LUMA_KEY = 2;
export const D3D12_VIDEO_PROCESS_FEATURE_FLAG_STEREO = 4;
export const D3D12_VIDEO_PROCESS_FEATURE_FLAG_ROTATION = 8;
export const D3D12_VIDEO_PROCESS_FEATURE_FLAG_FLIP = 16;
export const D3D12_VIDEO_PROCESS_FEATURE_FLAG_ALPHA_BLENDING = 32;
export const D3D12_VIDEO_PROCESS_FEATURE_FLAG_PIXEL_ASPECT_RATIO = 64;
export const D3D12_VIDEO_PROCESS_AUTO_PROCESSING_FLAG_NONE = 0;
export const D3D12_VIDEO_PROCESS_AUTO_PROCESSING_FLAG_DENOISE = 1;
export const D3D12_VIDEO_PROCESS_AUTO_PROCESSING_FLAG_DERINGING = 2;
export const D3D12_VIDEO_PROCESS_AUTO_PROCESSING_FLAG_EDGE_ENHANCEMENT = 4;
export const D3D12_VIDEO_PROCESS_AUTO_PROCESSING_FLAG_COLOR_CORRECTION = 8;
export const D3D12_VIDEO_PROCESS_AUTO_PROCESSING_FLAG_FLESH_TONE_MAPPING = 16;
export const D3D12_VIDEO_PROCESS_AUTO_PROCESSING_FLAG_IMAGE_STABILIZATION = 32;
export const D3D12_VIDEO_PROCESS_AUTO_PROCESSING_FLAG_SUPER_RESOLUTION = 64;
export const D3D12_VIDEO_PROCESS_AUTO_PROCESSING_FLAG_ANAMORPHIC_SCALING = 128;
export const D3D12_VIDEO_PROCESS_AUTO_PROCESSING_FLAG_CUSTOM = 2147483648;
export const D3D12_VIDEO_PROCESS_ORIENTATION_DEFAULT = 0;
export const D3D12_VIDEO_PROCESS_ORIENTATION_FLIP_HORIZONTAL = 1;
export const D3D12_VIDEO_PROCESS_ORIENTATION_CLOCKWISE_90 = 2;
export const D3D12_VIDEO_PROCESS_ORIENTATION_CLOCKWISE_90_FLIP_HORIZONTAL = 3;
export const D3D12_VIDEO_PROCESS_ORIENTATION_CLOCKWISE_180 = 4;
export const D3D12_VIDEO_PROCESS_ORIENTATION_FLIP_VERTICAL = 5;
export const D3D12_VIDEO_PROCESS_ORIENTATION_CLOCKWISE_270 = 6;
export const D3D12_VIDEO_PROCESS_ORIENTATION_CLOCKWISE_270_FLIP_HORIZONTAL = 7;
export const D3D12_VIDEO_PROCESS_INPUT_STREAM_FLAG_NONE = 0;
export const D3D12_VIDEO_PROCESS_INPUT_STREAM_FLAG_FRAME_DISCONTINUITY = 1;
export const D3D12_VIDEO_PROCESS_INPUT_STREAM_FLAG_FRAME_REPEAT = 2;
export const D3D12_VIDEO_PROCESS_SUPPORT_FLAG_NONE = 0;
export const D3D12_VIDEO_PROCESS_SUPPORT_FLAG_SUPPORTED = 1;
export const D3D12_VIDEO_MOTION_ESTIMATOR_SEARCH_BLOCK_SIZE_8X8 = 0;
export const D3D12_VIDEO_MOTION_ESTIMATOR_SEARCH_BLOCK_SIZE_16X16 = 1;
export const D3D12_VIDEO_MOTION_ESTIMATOR_SEARCH_BLOCK_SIZE_FLAG_NONE = 0;
export const D3D12_VIDEO_MOTION_ESTIMATOR_SEARCH_BLOCK_SIZE_FLAG_8X8 = 1;
export const D3D12_VIDEO_MOTION_ESTIMATOR_SEARCH_BLOCK_SIZE_FLAG_16X16 = 2;
export const D3D12_VIDEO_MOTION_ESTIMATOR_VECTOR_PRECISION_QUARTER_PEL = 0;
export const D3D12_VIDEO_MOTION_ESTIMATOR_VECTOR_PRECISION_FLAG_NONE = 0;
export const D3D12_VIDEO_MOTION_ESTIMATOR_VECTOR_PRECISION_FLAG_QUARTER_PEL = 1;
export const D3D12_VIDEO_PROTECTED_RESOURCE_SUPPORT_FLAG_NONE = 0;
export const D3D12_VIDEO_PROTECTED_RESOURCE_SUPPORT_FLAG_SUPPORTED = 1;
export const D3D12_VIDEO_EXTENSION_COMMAND_PARAMETER_STAGE_CREATION = 0;
export const D3D12_VIDEO_EXTENSION_COMMAND_PARAMETER_STAGE_INITIALIZATION = 1;
export const D3D12_VIDEO_EXTENSION_COMMAND_PARAMETER_STAGE_EXECUTION = 2;
export const D3D12_VIDEO_EXTENSION_COMMAND_PARAMETER_STAGE_CAPS_INPUT = 3;
export const D3D12_VIDEO_EXTENSION_COMMAND_PARAMETER_STAGE_CAPS_OUTPUT = 4;
export const D3D12_VIDEO_EXTENSION_COMMAND_PARAMETER_STAGE_DEVICE_EXECUTE_INPUT = 5;
export const D3D12_VIDEO_EXTENSION_COMMAND_PARAMETER_STAGE_DEVICE_EXECUTE_OUTPUT = 6;
export const D3D12_VIDEO_EXTENSION_COMMAND_PARAMETER_TYPE_UINT8 = 0;
export const D3D12_VIDEO_EXTENSION_COMMAND_PARAMETER_TYPE_UINT16 = 1;
export const D3D12_VIDEO_EXTENSION_COMMAND_PARAMETER_TYPE_UINT32 = 2;
export const D3D12_VIDEO_EXTENSION_COMMAND_PARAMETER_TYPE_UINT64 = 3;
export const D3D12_VIDEO_EXTENSION_COMMAND_PARAMETER_TYPE_SINT8 = 4;
export const D3D12_VIDEO_EXTENSION_COMMAND_PARAMETER_TYPE_SINT16 = 5;
export const D3D12_VIDEO_EXTENSION_COMMAND_PARAMETER_TYPE_SINT32 = 6;
export const D3D12_VIDEO_EXTENSION_COMMAND_PARAMETER_TYPE_SINT64 = 7;
export const D3D12_VIDEO_EXTENSION_COMMAND_PARAMETER_TYPE_FLOAT = 8;
export const D3D12_VIDEO_EXTENSION_COMMAND_PARAMETER_TYPE_DOUBLE = 9;
export const D3D12_VIDEO_EXTENSION_COMMAND_PARAMETER_TYPE_RESOURCE = 10;
export const D3D12_VIDEO_EXTENSION_COMMAND_PARAMETER_FLAG_NONE = 0;
export const D3D12_VIDEO_EXTENSION_COMMAND_PARAMETER_FLAG_READ = 1;
export const D3D12_VIDEO_EXTENSION_COMMAND_PARAMETER_FLAG_WRITE = 2;
export const D3D12_COMMAND_LIST_SUPPORT_FLAG_NONE = 0;
export const D3D12_COMMAND_LIST_SUPPORT_FLAG_DIRECT = 1;
export const D3D12_COMMAND_LIST_SUPPORT_FLAG_BUNDLE = 2;
export const D3D12_COMMAND_LIST_SUPPORT_FLAG_COMPUTE = 4;
export const D3D12_COMMAND_LIST_SUPPORT_FLAG_COPY = 8;
export const D3D12_COMMAND_LIST_SUPPORT_FLAG_VIDEO_DECODE = 16;
export const D3D12_COMMAND_LIST_SUPPORT_FLAG_VIDEO_PROCESS = 32;
export const D3D12_COMMAND_LIST_SUPPORT_FLAG_VIDEO_ENCODE = 64;
export const D3D12_VIDEO_ENCODER_RATE_CONTROL_MODE_ABSOLUTE_QP_MAP = 0;
export const D3D12_VIDEO_ENCODER_RATE_CONTROL_MODE_CQP = 1;
export const D3D12_VIDEO_ENCODER_RATE_CONTROL_MODE_CBR = 2;
export const D3D12_VIDEO_ENCODER_RATE_CONTROL_MODE_VBR = 3;
export const D3D12_VIDEO_ENCODER_RATE_CONTROL_MODE_QVBR = 4;
export const D3D12_VIDEO_ENCODER_RATE_CONTROL_FLAG_NONE = 0;
export const D3D12_VIDEO_ENCODER_RATE_CONTROL_FLAG_ENABLE_DELTA_QP = 1;
export const D3D12_VIDEO_ENCODER_RATE_CONTROL_FLAG_ENABLE_FRAME_ANALYSIS = 2;
export const D3D12_VIDEO_ENCODER_RATE_CONTROL_FLAG_ENABLE_QP_RANGE = 4;
export const D3D12_VIDEO_ENCODER_RATE_CONTROL_FLAG_ENABLE_INITIAL_QP = 8;
export const D3D12_VIDEO_ENCODER_RATE_CONTROL_FLAG_ENABLE_MAX_FRAME_SIZE = 16;
export const D3D12_VIDEO_ENCODER_RATE_CONTROL_FLAG_ENABLE_VBV_SIZES = 32;
export const D3D12_VIDEO_ENCODER_CODEC_H264 = 0;
export const D3D12_VIDEO_ENCODER_CODEC_HEVC = 1;
export const D3D12_VIDEO_ENCODER_PROFILE_H264_MAIN = 0;
export const D3D12_VIDEO_ENCODER_PROFILE_H264_HIGH = 1;
export const D3D12_VIDEO_ENCODER_PROFILE_H264_HIGH_10 = 2;
export const D3D12_VIDEO_ENCODER_PROFILE_HEVC_MAIN = 0;
export const D3D12_VIDEO_ENCODER_PROFILE_HEVC_MAIN10 = 1;
export const D3D12_VIDEO_ENCODER_LEVELS_H264_1 = 0;
export const D3D12_VIDEO_ENCODER_LEVELS_H264_1b = 1;
export const D3D12_VIDEO_ENCODER_LEVELS_H264_11 = 2;
export const D3D12_VIDEO_ENCODER_LEVELS_H264_12 = 3;
export const D3D12_VIDEO_ENCODER_LEVELS_H264_13 = 4;
export const D3D12_VIDEO_ENCODER_LEVELS_H264_2 = 5;
export const D3D12_VIDEO_ENCODER_LEVELS_H264_21 = 6;
export const D3D12_VIDEO_ENCODER_LEVELS_H264_22 = 7;
export const D3D12_VIDEO_ENCODER_LEVELS_H264_3 = 8;
export const D3D12_VIDEO_ENCODER_LEVELS_H264_31 = 9;
export const D3D12_VIDEO_ENCODER_LEVELS_H264_32 = 10;
export const D3D12_VIDEO_ENCODER_LEVELS_H264_4 = 11;
export const D3D12_VIDEO_ENCODER_LEVELS_H264_41 = 12;
export const D3D12_VIDEO_ENCODER_LEVELS_H264_42 = 13;
export const D3D12_VIDEO_ENCODER_LEVELS_H264_5 = 14;
export const D3D12_VIDEO_ENCODER_LEVELS_H264_51 = 15;
export const D3D12_VIDEO_ENCODER_LEVELS_H264_52 = 16;
export const D3D12_VIDEO_ENCODER_LEVELS_H264_6 = 17;
export const D3D12_VIDEO_ENCODER_LEVELS_H264_61 = 18;
export const D3D12_VIDEO_ENCODER_LEVELS_H264_62 = 19;
export const D3D12_VIDEO_ENCODER_TIER_HEVC_MAIN = 0;
export const D3D12_VIDEO_ENCODER_TIER_HEVC_HIGH = 1;
export const D3D12_VIDEO_ENCODER_LEVELS_HEVC_1 = 0;
export const D3D12_VIDEO_ENCODER_LEVELS_HEVC_2 = 1;
export const D3D12_VIDEO_ENCODER_LEVELS_HEVC_21 = 2;
export const D3D12_VIDEO_ENCODER_LEVELS_HEVC_3 = 3;
export const D3D12_VIDEO_ENCODER_LEVELS_HEVC_31 = 4;
export const D3D12_VIDEO_ENCODER_LEVELS_HEVC_4 = 5;
export const D3D12_VIDEO_ENCODER_LEVELS_HEVC_41 = 6;
export const D3D12_VIDEO_ENCODER_LEVELS_HEVC_5 = 7;
export const D3D12_VIDEO_ENCODER_LEVELS_HEVC_51 = 8;
export const D3D12_VIDEO_ENCODER_LEVELS_HEVC_52 = 9;
export const D3D12_VIDEO_ENCODER_LEVELS_HEVC_6 = 10;
export const D3D12_VIDEO_ENCODER_LEVELS_HEVC_61 = 11;
export const D3D12_VIDEO_ENCODER_LEVELS_HEVC_62 = 12;
export const D3D12_VIDEO_ENCODER_INTRA_REFRESH_MODE_NONE = 0;
export const D3D12_VIDEO_ENCODER_INTRA_REFRESH_MODE_ROW_BASED = 1;
export const D3D12_VIDEO_ENCODER_FRAME_SUBREGION_LAYOUT_MODE_FULL_FRAME = 0;
export const D3D12_VIDEO_ENCODER_FRAME_SUBREGION_LAYOUT_MODE_BYTES_PER_SUBREGION = 1;
export const D3D12_VIDEO_ENCODER_FRAME_SUBREGION_LAYOUT_MODE_SQUARE_UNITS_PER_SUBREGION_ROW_UNALIGNED = 2;
export const D3D12_VIDEO_ENCODER_FRAME_SUBREGION_LAYOUT_MODE_UNIFORM_PARTITIONING_ROWS_PER_SUBREGION = 3;
export const D3D12_VIDEO_ENCODER_FRAME_SUBREGION_LAYOUT_MODE_UNIFORM_PARTITIONING_SUBREGIONS_PER_FRAME = 4;
export const D3D12_VIDEO_ENCODER_HEAP_FLAG_NONE = 0;
export const D3D12_VIDEO_ENCODER_CODEC_CONFIGURATION_SUPPORT_H264_FLAG_NONE = 0;
export const D3D12_VIDEO_ENCODER_CODEC_CONFIGURATION_SUPPORT_H264_FLAG_CABAC_ENCODING_SUPPORT = 1;
export const D3D12_VIDEO_ENCODER_CODEC_CONFIGURATION_SUPPORT_H264_FLAG_INTRA_SLICE_CONSTRAINED_ENCODING_SUPPORT = 2;
export const D3D12_VIDEO_ENCODER_CODEC_CONFIGURATION_SUPPORT_H264_FLAG_BFRAME_LTR_COMBINED_SUPPORT = 4;
export const D3D12_VIDEO_ENCODER_CODEC_CONFIGURATION_SUPPORT_H264_FLAG_ADAPTIVE_8x8_TRANSFORM_ENCODING_SUPPORT = 8;
export const D3D12_VIDEO_ENCODER_CODEC_CONFIGURATION_SUPPORT_H264_FLAG_DIRECT_SPATIAL_ENCODING_SUPPORT = 16;
export const D3D12_VIDEO_ENCODER_CODEC_CONFIGURATION_SUPPORT_H264_FLAG_DIRECT_TEMPORAL_ENCODING_SUPPORT = 32;
export const D3D12_VIDEO_ENCODER_CODEC_CONFIGURATION_SUPPORT_H264_FLAG_CONSTRAINED_INTRAPREDICTION_SUPPORT = 64;
export const D3D12_VIDEO_ENCODER_CODEC_CONFIGURATION_H264_SLICES_DEBLOCKING_MODE_0_ALL_LUMA_CHROMA_SLICE_BLOCK_EDGES_ALWAYS_FILTERED = 0;
export const D3D12_VIDEO_ENCODER_CODEC_CONFIGURATION_H264_SLICES_DEBLOCKING_MODE_1_DISABLE_ALL_SLICE_BLOCK_EDGES = 1;
export const D3D12_VIDEO_ENCODER_CODEC_CONFIGURATION_H264_SLICES_DEBLOCKING_MODE_2_DISABLE_SLICE_BOUNDARIES_BLOCKS = 2;
export const D3D12_VIDEO_ENCODER_CODEC_CONFIGURATION_H264_SLICES_DEBLOCKING_MODE_3_USE_TWO_STAGE_DEBLOCKING = 3;
export const D3D12_VIDEO_ENCODER_CODEC_CONFIGURATION_H264_SLICES_DEBLOCKING_MODE_4_DISABLE_CHROMA_BLOCK_EDGES = 4;
export const D3D12_VIDEO_ENCODER_CODEC_CONFIGURATION_H264_SLICES_DEBLOCKING_MODE_5_DISABLE_CHROMA_BLOCK_EDGES_AND_LUMA_BOUNDARIES = 5;
export const D3D12_VIDEO_ENCODER_CODEC_CONFIGURATION_H264_SLICES_DEBLOCKING_MODE_6_DISABLE_CHROMA_BLOCK_EDGES_AND_USE_LUMA_TWO_STAGE_DEBLOCKING = 6;
export const D3D12_VIDEO_ENCODER_CODEC_CONFIGURATION_H264_SLICES_DEBLOCKING_MODE_FLAG_NONE = 0;
export const D3D12_VIDEO_ENCODER_CODEC_CONFIGURATION_H264_SLICES_DEBLOCKING_MODE_FLAG_0_ALL_LUMA_CHROMA_SLICE_BLOCK_EDGES_ALWAYS_FILTERED = 1;
export const D3D12_VIDEO_ENCODER_CODEC_CONFIGURATION_H264_SLICES_DEBLOCKING_MODE_FLAG_1_DISABLE_ALL_SLICE_BLOCK_EDGES = 2;
export const D3D12_VIDEO_ENCODER_CODEC_CONFIGURATION_H264_SLICES_DEBLOCKING_MODE_FLAG_2_DISABLE_SLICE_BOUNDARIES_BLOCKS = 4;
export const D3D12_VIDEO_ENCODER_CODEC_CONFIGURATION_H264_SLICES_DEBLOCKING_MODE_FLAG_3_USE_TWO_STAGE_DEBLOCKING = 8;
export const D3D12_VIDEO_ENCODER_CODEC_CONFIGURATION_H264_SLICES_DEBLOCKING_MODE_FLAG_4_DISABLE_CHROMA_BLOCK_EDGES = 16;
export const D3D12_VIDEO_ENCODER_CODEC_CONFIGURATION_H264_SLICES_DEBLOCKING_MODE_FLAG_5_DISABLE_CHROMA_BLOCK_EDGES_AND_LUMA_BOUNDARIES = 32;
export const D3D12_VIDEO_ENCODER_CODEC_CONFIGURATION_H264_SLICES_DEBLOCKING_MODE_FLAG_6_DISABLE_CHROMA_BLOCK_EDGES_AND_USE_LUMA_TWO_STAGE_DEBLOCKING = 64;
export const D3D12_VIDEO_ENCODER_CODEC_CONFIGURATION_SUPPORT_HEVC_FLAG_NONE = 0;
export const D3D12_VIDEO_ENCODER_CODEC_CONFIGURATION_SUPPORT_HEVC_FLAG_BFRAME_LTR_COMBINED_SUPPORT = 1;
export const D3D12_VIDEO_ENCODER_CODEC_CONFIGURATION_SUPPORT_HEVC_FLAG_INTRA_SLICE_CONSTRAINED_ENCODING_SUPPORT = 2;
export const D3D12_VIDEO_ENCODER_CODEC_CONFIGURATION_SUPPORT_HEVC_FLAG_CONSTRAINED_INTRAPREDICTION_SUPPORT = 4;
export const D3D12_VIDEO_ENCODER_CODEC_CONFIGURATION_SUPPORT_HEVC_FLAG_SAO_FILTER_SUPPORT = 8;
export const D3D12_VIDEO_ENCODER_CODEC_CONFIGURATION_SUPPORT_HEVC_FLAG_ASYMETRIC_MOTION_PARTITION_SUPPORT = 16;
export const D3D12_VIDEO_ENCODER_CODEC_CONFIGURATION_SUPPORT_HEVC_FLAG_ASYMETRIC_MOTION_PARTITION_REQUIRED = 32;
export const D3D12_VIDEO_ENCODER_CODEC_CONFIGURATION_SUPPORT_HEVC_FLAG_TRANSFORM_SKIP_SUPPORT = 64;
export const D3D12_VIDEO_ENCODER_CODEC_CONFIGURATION_SUPPORT_HEVC_FLAG_DISABLING_LOOP_FILTER_ACROSS_SLICES_SUPPORT = 128;
export const D3D12_VIDEO_ENCODER_CODEC_CONFIGURATION_SUPPORT_HEVC_FLAG_P_FRAMES_IMPLEMENTED_AS_LOW_DELAY_B_FRAMES = 256;
export const D3D12_VIDEO_ENCODER_CODEC_CONFIGURATION_HEVC_CUSIZE_8x8 = 0;
export const D3D12_VIDEO_ENCODER_CODEC_CONFIGURATION_HEVC_CUSIZE_16x16 = 1;
export const D3D12_VIDEO_ENCODER_CODEC_CONFIGURATION_HEVC_CUSIZE_32x32 = 2;
export const D3D12_VIDEO_ENCODER_CODEC_CONFIGURATION_HEVC_CUSIZE_64x64 = 3;
export const D3D12_VIDEO_ENCODER_CODEC_CONFIGURATION_HEVC_TUSIZE_4x4 = 0;
export const D3D12_VIDEO_ENCODER_CODEC_CONFIGURATION_HEVC_TUSIZE_8x8 = 1;
export const D3D12_VIDEO_ENCODER_CODEC_CONFIGURATION_HEVC_TUSIZE_16x16 = 2;
export const D3D12_VIDEO_ENCODER_CODEC_CONFIGURATION_HEVC_TUSIZE_32x32 = 3;
export const D3D12_VIDEO_ENCODER_SUPPORT_FLAG_NONE = 0;
export const D3D12_VIDEO_ENCODER_SUPPORT_FLAG_GENERAL_SUPPORT_OK = 1;
export const D3D12_VIDEO_ENCODER_SUPPORT_FLAG_RATE_CONTROL_RECONFIGURATION_AVAILABLE = 2;
export const D3D12_VIDEO_ENCODER_SUPPORT_FLAG_RESOLUTION_RECONFIGURATION_AVAILABLE = 4;
export const D3D12_VIDEO_ENCODER_SUPPORT_FLAG_RATE_CONTROL_VBV_SIZE_CONFIG_AVAILABLE = 8;
export const D3D12_VIDEO_ENCODER_SUPPORT_FLAG_RATE_CONTROL_FRAME_ANALYSIS_AVAILABLE = 16;
export const D3D12_VIDEO_ENCODER_SUPPORT_FLAG_RECONSTRUCTED_FRAMES_REQUIRE_TEXTURE_ARRAYS = 32;
export const D3D12_VIDEO_ENCODER_SUPPORT_FLAG_RATE_CONTROL_DELTA_QP_AVAILABLE = 64;
export const D3D12_VIDEO_ENCODER_SUPPORT_FLAG_SUBREGION_LAYOUT_RECONFIGURATION_AVAILABLE = 128;
export const D3D12_VIDEO_ENCODER_SUPPORT_FLAG_RATE_CONTROL_ADJUSTABLE_QP_RANGE_AVAILABLE = 256;
export const D3D12_VIDEO_ENCODER_SUPPORT_FLAG_RATE_CONTROL_INITIAL_QP_AVAILABLE = 512;
export const D3D12_VIDEO_ENCODER_SUPPORT_FLAG_RATE_CONTROL_MAX_FRAME_SIZE_AVAILABLE = 1024;
export const D3D12_VIDEO_ENCODER_SUPPORT_FLAG_SEQUENCE_GOP_RECONFIGURATION_AVAILABLE = 2048;
export const D3D12_VIDEO_ENCODER_SUPPORT_FLAG_MOTION_ESTIMATION_PRECISION_MODE_LIMIT_AVAILABLE = 4096;
export const D3D12_VIDEO_ENCODER_CODEC_CONFIGURATION_H264_FLAG_NONE = 0;
export const D3D12_VIDEO_ENCODER_CODEC_CONFIGURATION_H264_FLAG_USE_CONSTRAINED_INTRAPREDICTION = 1;
export const D3D12_VIDEO_ENCODER_CODEC_CONFIGURATION_H264_FLAG_USE_ADAPTIVE_8x8_TRANSFORM = 2;
export const D3D12_VIDEO_ENCODER_CODEC_CONFIGURATION_H264_FLAG_ENABLE_CABAC_ENCODING = 4;
export const D3D12_VIDEO_ENCODER_CODEC_CONFIGURATION_H264_FLAG_ALLOW_REQUEST_INTRA_CONSTRAINED_SLICES = 8;
export const D3D12_VIDEO_ENCODER_CODEC_CONFIGURATION_H264_DIRECT_MODES_DISABLED = 0;
export const D3D12_VIDEO_ENCODER_CODEC_CONFIGURATION_H264_DIRECT_MODES_TEMPORAL = 1;
export const D3D12_VIDEO_ENCODER_CODEC_CONFIGURATION_H264_DIRECT_MODES_SPATIAL = 2;
export const D3D12_VIDEO_ENCODER_CODEC_CONFIGURATION_HEVC_FLAG_NONE = 0;
export const D3D12_VIDEO_ENCODER_CODEC_CONFIGURATION_HEVC_FLAG_DISABLE_LOOP_FILTER_ACROSS_SLICES = 1;
export const D3D12_VIDEO_ENCODER_CODEC_CONFIGURATION_HEVC_FLAG_ALLOW_REQUEST_INTRA_CONSTRAINED_SLICES = 2;
export const D3D12_VIDEO_ENCODER_CODEC_CONFIGURATION_HEVC_FLAG_ENABLE_SAO_FILTER = 4;
export const D3D12_VIDEO_ENCODER_CODEC_CONFIGURATION_HEVC_FLAG_ENABLE_LONG_TERM_REFERENCES = 8;
export const D3D12_VIDEO_ENCODER_CODEC_CONFIGURATION_HEVC_FLAG_USE_ASYMETRIC_MOTION_PARTITION = 16;
export const D3D12_VIDEO_ENCODER_CODEC_CONFIGURATION_HEVC_FLAG_ENABLE_TRANSFORM_SKIPPING = 32;
export const D3D12_VIDEO_ENCODER_CODEC_CONFIGURATION_HEVC_FLAG_USE_CONSTRAINED_INTRAPREDICTION = 64;
export const D3D12_VIDEO_ENCODER_MOTION_ESTIMATION_PRECISION_MODE_MAXIMUM = 0;
export const D3D12_VIDEO_ENCODER_MOTION_ESTIMATION_PRECISION_MODE_FULL_PIXEL = 1;
export const D3D12_VIDEO_ENCODER_MOTION_ESTIMATION_PRECISION_MODE_HALF_PIXEL = 2;
export const D3D12_VIDEO_ENCODER_MOTION_ESTIMATION_PRECISION_MODE_QUARTER_PIXEL = 3;
export const D3D12_VIDEO_ENCODER_VALIDATION_FLAG_NONE = 0;
export const D3D12_VIDEO_ENCODER_VALIDATION_FLAG_CODEC_NOT_SUPPORTED = 1;
export const D3D12_VIDEO_ENCODER_VALIDATION_FLAG_INPUT_FORMAT_NOT_SUPPORTED = 8;
export const D3D12_VIDEO_ENCODER_VALIDATION_FLAG_CODEC_CONFIGURATION_NOT_SUPPORTED = 16;
export const D3D12_VIDEO_ENCODER_VALIDATION_FLAG_RATE_CONTROL_MODE_NOT_SUPPORTED = 32;
export const D3D12_VIDEO_ENCODER_VALIDATION_FLAG_RATE_CONTROL_CONFIGURATION_NOT_SUPPORTED = 64;
export const D3D12_VIDEO_ENCODER_VALIDATION_FLAG_INTRA_REFRESH_MODE_NOT_SUPPORTED = 128;
export const D3D12_VIDEO_ENCODER_VALIDATION_FLAG_SUBREGION_LAYOUT_MODE_NOT_SUPPORTED = 256;
export const D3D12_VIDEO_ENCODER_VALIDATION_FLAG_RESOLUTION_NOT_SUPPORTED_IN_LIST = 512;
export const D3D12_VIDEO_ENCODER_VALIDATION_FLAG_GOP_STRUCTURE_NOT_SUPPORTED = 2048;
export const D3D12_VIDEO_ENCODER_FLAG_NONE = 0;
export const D3D12_VIDEO_ENCODER_FRAME_TYPE_H264_I_FRAME = 0;
export const D3D12_VIDEO_ENCODER_FRAME_TYPE_H264_P_FRAME = 1;
export const D3D12_VIDEO_ENCODER_FRAME_TYPE_H264_B_FRAME = 2;
export const D3D12_VIDEO_ENCODER_FRAME_TYPE_H264_IDR_FRAME = 3;
export const D3D12_VIDEO_ENCODER_PICTURE_CONTROL_CODEC_DATA_H264_FLAG_NONE = 0;
export const D3D12_VIDEO_ENCODER_PICTURE_CONTROL_CODEC_DATA_H264_FLAG_REQUEST_INTRA_CONSTRAINED_SLICES = 1;
export const D3D12_VIDEO_ENCODER_FRAME_TYPE_HEVC_I_FRAME = 0;
export const D3D12_VIDEO_ENCODER_FRAME_TYPE_HEVC_P_FRAME = 1;
export const D3D12_VIDEO_ENCODER_FRAME_TYPE_HEVC_B_FRAME = 2;
export const D3D12_VIDEO_ENCODER_FRAME_TYPE_HEVC_IDR_FRAME = 3;
export const D3D12_VIDEO_ENCODER_PICTURE_CONTROL_CODEC_DATA_HEVC_FLAG_NONE = 0;
export const D3D12_VIDEO_ENCODER_PICTURE_CONTROL_CODEC_DATA_HEVC_FLAG_REQUEST_INTRA_CONSTRAINED_SLICES = 1;
export const D3D12_VIDEO_ENCODER_PICTURE_CONTROL_FLAG_NONE = 0;
export const D3D12_VIDEO_ENCODER_PICTURE_CONTROL_FLAG_USED_AS_REFERENCE_PICTURE = 1;
export const D3D12_VIDEO_ENCODER_SEQUENCE_CONTROL_FLAG_NONE = 0;
export const D3D12_VIDEO_ENCODER_SEQUENCE_CONTROL_FLAG_RESOLUTION_CHANGE = 1;
export const D3D12_VIDEO_ENCODER_SEQUENCE_CONTROL_FLAG_RATE_CONTROL_CHANGE = 2;
export const D3D12_VIDEO_ENCODER_SEQUENCE_CONTROL_FLAG_SUBREGION_LAYOUT_CHANGE = 4;
export const D3D12_VIDEO_ENCODER_SEQUENCE_CONTROL_FLAG_REQUEST_INTRA_REFRESH = 8;
export const D3D12_VIDEO_ENCODER_SEQUENCE_CONTROL_FLAG_GOP_SEQUENCE_CHANGE = 16;
export const D3D12_VIDEO_ENCODER_ENCODE_ERROR_FLAG_NO_ERROR = 0;
export const D3D12_VIDEO_ENCODER_ENCODE_ERROR_FLAG_CODEC_PICTURE_CONTROL_NOT_SUPPORTED = 1;
export const D3D12_VIDEO_ENCODER_ENCODE_ERROR_FLAG_SUBREGION_LAYOUT_CONFIGURATION_NOT_SUPPORTED = 2;
export const D3D12_VIDEO_ENCODER_ENCODE_ERROR_FLAG_INVALID_REFERENCE_PICTURES = 4;
export const D3D12_VIDEO_ENCODER_ENCODE_ERROR_FLAG_RECONFIGURATION_REQUEST_NOT_SUPPORTED = 8;
export const D3D12_VIDEO_ENCODER_ENCODE_ERROR_FLAG_INVALID_METADATA_BUFFER_SOURCE = 16;
export const WMT_PROP_TYPE_DWORD = 0;
export const WMT_PROP_TYPE_STRING = 1;
export const WMT_PROP_TYPE_BINARY = 2;
export const WMT_PROP_TYPE_BOOL = 3;
export const WMT_PROP_TYPE_QWORD = 4;
export const WMT_PROP_TYPE_WORD = 5;
export const WMT_PROP_TYPE_GUID = 6;
export const WMV_DYNAMIC_BITRATE = 1;
export const WMV_DYNAMIC_RESOLUTION = 2;
export const WMV_DYNAMIC_COMPLEXITY = 4;
export const VRHP_SMALLROOM = 0;
export const VRHP_MEDIUMROOM = 1;
export const VRHP_BIGROOM = 2;
export const VRHP_CUSTUMIZEDROOM = 3;
export const SINGLE_CHANNEL_AEC = 0;
export const ADAPTIVE_ARRAY_ONLY = 1;
export const OPTIBEAM_ARRAY_ONLY = 2;
export const ADAPTIVE_ARRAY_AND_AEC = 3;
export const OPTIBEAM_ARRAY_AND_AEC = 4;
export const SINGLE_CHANNEL_NSAGC = 5;
export const MODE_NOT_SET = 6;
export const AEC_VAD_DISABLED = 0;
export const AEC_VAD_NORMAL = 1;
export const AEC_VAD_FOR_AGC = 2;
export const AEC_VAD_FOR_SILENCE_SUPPRESSION = 3;
export const AEC_CAPTURE_STREAM = 0;
export const AEC_REFERENCE_STREAM = 1;
export const MICARRAY_SINGLE_CHAN = 0;
export const MICARRAY_SIMPLE_SUM = 256;
export const MICARRAY_SINGLE_BEAM = 512;
export const MICARRAY_FIXED_BEAM = 1024;
export const MICARRAY_EXTERN_BEAM = 2048;
export const MFVideoDSPMode_Passthrough = 1;
export const MFVideoDSPMode_Stabilization = 4;
export const TOC_POS_INHEADER = 0;
export const TOC_POS_TOPLEVELOBJECT = 1;
export const OPENMODE_FAIL_IF_NOT_EXIST = 0;
export const OPENMODE_FAIL_IF_EXIST = 1;
export const OPENMODE_RESET_IF_EXIST = 2;
export const OPENMODE_APPEND_IF_EXIST = 3;
export const OPENMODE_DELETE_IF_EXIST = 4;
export const _msoBegin = 0;
export const _msoCurrent = 1;
export const ACCESSMODE_READ = 1;
export const ACCESSMODE_WRITE = 2;
export const ACCESSMODE_READWRITE = 3;
export const ACCESSMODE_WRITE_EXCLUSIVE = 4;
export const D3DFMT_UNKNOWN = 0;
export const D3DFMT_R8G8B8 = 20;
export const D3DFMT_A8R8G8B8 = 21;
export const D3DFMT_X8R8G8B8 = 22;
export const D3DFMT_R5G6B5 = 23;
export const D3DFMT_X1R5G5B5 = 24;
export const D3DFMT_A1R5G5B5 = 25;
export const D3DFMT_A4R4G4B4 = 26;
export const D3DFMT_R3G3B2 = 27;
export const D3DFMT_A8 = 28;
export const D3DFMT_A8R3G3B2 = 29;
export const D3DFMT_X4R4G4B4 = 30;
export const D3DFMT_A2B10G10R10 = 31;
export const D3DFMT_A8B8G8R8 = 32;
export const D3DFMT_X8B8G8R8 = 33;
export const D3DFMT_G16R16 = 34;
export const D3DFMT_A2R10G10B10 = 35;
export const D3DFMT_A16B16G16R16 = 36;
export const D3DFMT_A8P8 = 40;
export const D3DFMT_P8 = 41;
export const D3DFMT_L8 = 50;
export const D3DFMT_A8L8 = 51;
export const D3DFMT_A4L4 = 52;
export const D3DFMT_V8U8 = 60;
export const D3DFMT_L6V5U5 = 61;
export const D3DFMT_X8L8V8U8 = 62;
export const D3DFMT_Q8W8V8U8 = 63;
export const D3DFMT_V16U16 = 64;
export const D3DFMT_A2W10V10U10 = 67;
export const D3DFMT_UYVY = 1498831189;
export const D3DFMT_R8G8_B8G8 = 1195525970;
export const D3DFMT_YUY2 = 844715353;
export const D3DFMT_G8R8_G8B8 = 1111970375;
export const D3DFMT_DXT1 = 827611204;
export const D3DFMT_DXT2 = 844388420;
export const D3DFMT_DXT3 = 861165636;
export const D3DFMT_DXT4 = 877942852;
export const D3DFMT_DXT5 = 894720068;
export const D3DFMT_D16_LOCKABLE = 70;
export const D3DFMT_D32 = 71;
export const D3DFMT_D15S1 = 73;
export const D3DFMT_D24S8 = 75;
export const D3DFMT_D24X8 = 77;
export const D3DFMT_D24X4S4 = 79;
export const D3DFMT_D16 = 80;
export const D3DFMT_D32F_LOCKABLE = 82;
export const D3DFMT_D24FS8 = 83;
export const D3DFMT_D32_LOCKABLE = 84;
export const D3DFMT_S8_LOCKABLE = 85;
export const D3DFMT_L16 = 81;
export const D3DFMT_VERTEXDATA = 100;
export const D3DFMT_INDEX16 = 101;
export const D3DFMT_INDEX32 = 102;
export const D3DFMT_Q16W16V16U16 = 110;
export const D3DFMT_MULTI2_ARGB8 = 827606349;
export const D3DFMT_R16F = 111;
export const D3DFMT_G16R16F = 112;
export const D3DFMT_A16B16G16R16F = 113;
export const D3DFMT_R32F = 114;
export const D3DFMT_G32R32F = 115;
export const D3DFMT_A32B32G32R32F = 116;
export const D3DFMT_CxV8U8 = 117;
export const D3DFMT_A1 = 118;
export const D3DFMT_A2B10G10R10_XR_BIAS = 119;
export const D3DFMT_BINARYBUFFER = 199;
export const D3DFMT_FORCE_DWORD = 2147483647;
export const D3DPOOL_DEFAULT = 0;
export const D3DPOOL_MANAGED = 1;
export const D3DPOOL_SYSTEMMEM = 2;
export const D3DPOOL_SCRATCH = 3;
export const D3DPOOL_FORCE_DWORD = 2147483647;
export const DXVA_SampleFormatMask = 255;
export const DXVA_SampleUnknown = 0;
export const DXVA_SamplePreviousFrame = 1;
export const DXVA_SampleProgressiveFrame = 2;
export const DXVA_SampleFieldInterleavedEvenFirst = 3;
export const DXVA_SampleFieldInterleavedOddFirst = 4;
export const DXVA_SampleFieldSingleEven = 5;
export const DXVA_SampleFieldSingleOdd = 6;
export const DXVA_SampleSubStream = 7;
export const DXVA_VideoTransFuncShift = 27;
export const DXVA_VideoTransFuncMask = `-134217728`;
export const DXVA_VideoTransFunc_Unknown = 0;
export const DXVA_VideoTransFunc_10 = 1;
export const DXVA_VideoTransFunc_18 = 2;
export const DXVA_VideoTransFunc_20 = 3;
export const DXVA_VideoTransFunc_22 = 4;
export const DXVA_VideoTransFunc_22_709 = 5;
export const DXVA_VideoTransFunc_22_240M = 6;
export const DXVA_VideoTransFunc_22_8bit_sRGB = 7;
export const DXVA_VideoTransFunc_28 = 8;
export const DXVA_VideoPrimariesShift = 22;
export const DXVA_VideoPrimariesMask = 130023424;
export const DXVA_VideoPrimaries_Unknown = 0;
export const DXVA_VideoPrimaries_reserved = 1;
export const DXVA_VideoPrimaries_BT709 = 2;
export const DXVA_VideoPrimaries_BT470_2_SysM = 3;
export const DXVA_VideoPrimaries_BT470_2_SysBG = 4;
export const DXVA_VideoPrimaries_SMPTE170M = 5;
export const DXVA_VideoPrimaries_SMPTE240M = 6;
export const DXVA_VideoPrimaries_EBU3213 = 7;
export const DXVA_VideoPrimaries_SMPTE_C = 8;
export const DXVA_VideoLightingShift = 18;
export const DXVA_VideoLightingMask = 3932160;
export const DXVA_VideoLighting_Unknown = 0;
export const DXVA_VideoLighting_bright = 1;
export const DXVA_VideoLighting_office = 2;
export const DXVA_VideoLighting_dim = 3;
export const DXVA_VideoLighting_dark = 4;
export const DXVA_VideoTransferMatrixShift = 15;
export const DXVA_VideoTransferMatrixMask = 229376;
export const DXVA_VideoTransferMatrix_Unknown = 0;
export const DXVA_VideoTransferMatrix_BT709 = 1;
export const DXVA_VideoTransferMatrix_BT601 = 2;
export const DXVA_VideoTransferMatrix_SMPTE240M = 3;
export const DXVA_NominalRangeShift = 12;
export const DXVA_NominalRangeMask = 28672;
export const DXVA_NominalRange_Unknown = 0;
export const DXVA_NominalRange_Normal = 1;
export const DXVA_NominalRange_Wide = 2;
export const DXVA_NominalRange_0_255 = 1;
export const DXVA_NominalRange_16_235 = 2;
export const DXVA_NominalRange_48_208 = 3;
export const DXVA_VideoChromaSubsamplingShift = 8;
export const DXVA_VideoChromaSubsamplingMask = 3840;
export const DXVA_VideoChromaSubsampling_Unknown = 0;
export const DXVA_VideoChromaSubsampling_ProgressiveChroma = 8;
export const DXVA_VideoChromaSubsampling_Horizontally_Cosited = 4;
export const DXVA_VideoChromaSubsampling_Vertically_Cosited = 2;
export const DXVA_VideoChromaSubsampling_Vertically_AlignedChromaPlanes = 1;
export const DXVA_VideoChromaSubsampling_MPEG2 = 5;
export const DXVA_VideoChromaSubsampling_MPEG1 = 1;
export const DXVA_VideoChromaSubsampling_DV_PAL = 6;
export const DXVA_VideoChromaSubsampling_Cosited = 7;
export const DXVA_VideoProcess_None = 0;
export const DXVA_VideoProcess_YUV2RGB = 1;
export const DXVA_VideoProcess_StretchX = 2;
export const DXVA_VideoProcess_StretchY = 4;
export const DXVA_VideoProcess_AlphaBlend = 8;
export const DXVA_VideoProcess_SubRects = 16;
export const DXVA_VideoProcess_SubStreams = 32;
export const DXVA_VideoProcess_SubStreamsExtended = 64;
export const DXVA_VideoProcess_YUV2RGBExtended = 128;
export const DXVA_VideoProcess_AlphaBlendExtended = 256;
export const DXVA_DeinterlaceTech_Unknown = 0;
export const DXVA_DeinterlaceTech_BOBLineReplicate = 1;
export const DXVA_DeinterlaceTech_BOBVerticalStretch = 2;
export const DXVA_DeinterlaceTech_BOBVerticalStretch4Tap = 256;
export const DXVA_DeinterlaceTech_MedianFiltering = 4;
export const DXVA_DeinterlaceTech_EdgeFiltering = 16;
export const DXVA_DeinterlaceTech_FieldAdaptive = 32;
export const DXVA_DeinterlaceTech_PixelAdaptive = 64;
export const DXVA_DeinterlaceTech_MotionVectorSteered = 128;
export const DXVA_SampleFlagsMask = 15;
export const DXVA_SampleFlag_Palette_Changed = 1;
export const DXVA_SampleFlag_SrcRect_Changed = 2;
export const DXVA_SampleFlag_DstRect_Changed = 4;
export const DXVA_SampleFlag_ColorData_Changed = 8;
export const DXVA_DestinationFlagMask = 15;
export const DXVA_DestinationFlag_Background_Changed = 1;
export const DXVA_DestinationFlag_TargetRect_Changed = 2;
export const DXVA_DestinationFlag_ColorData_Changed = 4;
export const DXVA_DestinationFlag_Alpha_Changed = 8;
export const DXVA_ProcAmp_None = 0;
export const DXVA_ProcAmp_Brightness = 1;
export const DXVA_ProcAmp_Contrast = 2;
export const DXVA_ProcAmp_Hue = 4;
export const DXVA_ProcAmp_Saturation = 8;
export const eAVEncCommonRateControlMode_CBR = 0;
export const eAVEncCommonRateControlMode_PeakConstrainedVBR = 1;
export const eAVEncCommonRateControlMode_UnconstrainedVBR = 2;
export const eAVEncCommonRateControlMode_Quality = 3;
export const eAVEncCommonRateControlMode_LowDelayVBR = 4;
export const eAVEncCommonRateControlMode_GlobalVBR = 5;
export const eAVEncCommonRateControlMode_GlobalLowDelayVBR = 6;
export const eAVEncCommonStreamEndHandling_DiscardPartial = 0;
export const eAVEncCommonStreamEndHandling_EnsureComplete = 1;
export const eAVEncVideoOutputFrameRateConversion_Disable = 0;
export const eAVEncVideoOutputFrameRateConversion_Enable = 1;
export const eAVEncVideoOutputFrameRateConversion_Alias = 2;
export const eAVDecVideoSoftwareDeinterlaceMode_NoDeinterlacing = 0;
export const eAVDecVideoSoftwareDeinterlaceMode_ProgressiveDeinterlacing = 1;
export const eAVDecVideoSoftwareDeinterlaceMode_BOBDeinterlacing = 2;
export const eAVDecVideoSoftwareDeinterlaceMode_SmartBOBDeinterlacing = 3;
export const eVideoDecodeCompliant = 0;
export const eVideoDecodeOptimalLF = 1;
export const eVideoDecodeDisableLF = 2;
export const eVideoDecodeFastest = 32;
export const eErrorConcealmentTypeDrop = 0;
export const eErrorConcealmentTypeBasic = 1;
export const eErrorConcealmentTypeAdvanced = 2;
export const eErrorConcealmentTypeDXVASetBlack = 3;
export const eErrorConcealmentOff = 0;
export const eErrorConcealmentOn = 1;
export const eAVDecVideoCodecType_NOTPLAYING = 0;
export const eAVDecVideoCodecType_MPEG2 = 1;
export const eAVDecVideoCodecType_H264 = 2;
export const eAVDecVideoDXVAMode_NOTPLAYING = 0;
export const eAVDecVideoDXVAMode_SW = 1;
export const eAVDecVideoDXVAMode_MC = 2;
export const eAVDecVideoDXVAMode_IDCT = 3;
export const eAVDecVideoDXVAMode_VLD = 4;
export const eAVDecVideoDXVABusEncryption_NONE = 0;
export const eAVDecVideoDXVABusEncryption_PRIVATE = 1;
export const eAVDecVideoDXVABusEncryption_AES = 2;
export const eAVEncVideoSourceScan_Automatic = 0;
export const eAVEncVideoSourceScan_Interlaced = 1;
export const eAVEncVideoSourceScan_Progressive = 2;
export const eAVEncVideoOutputScan_Progressive = 0;
export const eAVEncVideoOutputScan_Interlaced = 1;
export const eAVEncVideoOutputScan_SameAsInput = 2;
export const eAVEncVideoOutputScan_Automatic = 3;
export const eAVEncVideoFilmContent_VideoOnly = 0;
export const eAVEncVideoFilmContent_FilmOnly = 1;
export const eAVEncVideoFilmContent_Mixed = 2;
export const eAVEncVideoChromaResolution_SameAsSource = 0;
export const eAVEncVideoChromaResolution_444 = 1;
export const eAVEncVideoChromaResolution_422 = 2;
export const eAVEncVideoChromaResolution_420 = 3;
export const eAVEncVideoChromaResolution_411 = 4;
export const eAVEncVideoChromaSubsamplingFormat_SameAsSource = 0;
export const eAVEncVideoChromaSubsamplingFormat_ProgressiveChroma = 8;
export const eAVEncVideoChromaSubsamplingFormat_Horizontally_Cosited = 4;
export const eAVEncVideoChromaSubsamplingFormat_Vertically_Cosited = 2;
export const eAVEncVideoChromaSubsamplingFormat_Vertically_AlignedChromaPlanes = 1;
export const eAVEncVideoColorPrimaries_SameAsSource = 0;
export const eAVEncVideoColorPrimaries_Reserved = 1;
export const eAVEncVideoColorPrimaries_BT709 = 2;
export const eAVEncVideoColorPrimaries_BT470_2_SysM = 3;
export const eAVEncVideoColorPrimaries_BT470_2_SysBG = 4;
export const eAVEncVideoColorPrimaries_SMPTE170M = 5;
export const eAVEncVideoColorPrimaries_SMPTE240M = 6;
export const eAVEncVideoColorPrimaries_EBU3231 = 7;
export const eAVEncVideoColorPrimaries_SMPTE_C = 8;
export const eAVEncVideoColorTransferFunction_SameAsSource = 0;
export const eAVEncVideoColorTransferFunction_10 = 1;
export const eAVEncVideoColorTransferFunction_18 = 2;
export const eAVEncVideoColorTransferFunction_20 = 3;
export const eAVEncVideoColorTransferFunction_22 = 4;
export const eAVEncVideoColorTransferFunction_22_709 = 5;
export const eAVEncVideoColorTransferFunction_22_240M = 6;
export const eAVEncVideoColorTransferFunction_22_8bit_sRGB = 7;
export const eAVEncVideoColorTransferFunction_28 = 8;
export const eAVEncVideoColorTransferMatrix_SameAsSource = 0;
export const eAVEncVideoColorTransferMatrix_BT709 = 1;
export const eAVEncVideoColorTransferMatrix_BT601 = 2;
export const eAVEncVideoColorTransferMatrix_SMPTE240M = 3;
export const eAVEncVideoColorLighting_SameAsSource = 0;
export const eAVEncVideoColorLighting_Unknown = 1;
export const eAVEncVideoColorLighting_Bright = 2;
export const eAVEncVideoColorLighting_Office = 3;
export const eAVEncVideoColorLighting_Dim = 4;
export const eAVEncVideoColorLighting_Dark = 5;
export const eAVEncVideoColorNominalRange_SameAsSource = 0;
export const eAVEncVideoColorNominalRange_0_255 = 1;
export const eAVEncVideoColorNominalRange_16_235 = 2;
export const eAVEncVideoColorNominalRange_48_208 = 3;
export const eAVEncInputVideoSystem_Unspecified = 0;
export const eAVEncInputVideoSystem_PAL = 1;
export const eAVEncInputVideoSystem_NTSC = 2;
export const eAVEncInputVideoSystem_SECAM = 3;
export const eAVEncInputVideoSystem_MAC = 4;
export const eAVEncInputVideoSystem_HDV = 5;
export const eAVEncInputVideoSystem_Component = 6;
export const eAVEncVideoContentType_Unknown = 0;
export const eAVEncVideoContentType_FixedCameraAngle = 1;
export const eAVEncAdaptiveMode_None = 0;
export const eAVEncAdaptiveMode_Resolution = 1;
export const eAVEncAdaptiveMode_FrameRate = 2;
export const eAVScenarioInfo_Unknown = 0;
export const eAVScenarioInfo_DisplayRemoting = 1;
export const eAVScenarioInfo_VideoConference = 2;
export const eAVScenarioInfo_Archive = 3;
export const eAVScenarioInfo_LiveStreaming = 4;
export const eAVScenarioInfo_CameraRecord = 5;
export const eAVScenarioInfo_DisplayRemotingWithFeatureMap = 6;
export const eVideoEncoderDisplayContent_Unknown = 0;
export const eVideoEncoderDisplayContent_FullScreenVideo = 1;
export const eAVEncMuxOutputAuto = 0;
export const eAVEncMuxOutputPS = 1;
export const eAVEncMuxOutputTS = 2;
export const eAVEncAudioDualMono_SameAsInput = 0;
export const eAVEncAudioDualMono_Off = 1;
export const eAVEncAudioDualMono_On = 2;
export const AVEncAudioInputContent_Unknown = 0;
export const AVEncAudioInputContent_Voice = 1;
export const AVEncAudioInputContent_Music = 2;
export const eAVEncMPVProfile_unknown = 0;
export const eAVEncMPVProfile_Simple = 1;
export const eAVEncMPVProfile_Main = 2;
export const eAVEncMPVProfile_High = 3;
export const eAVEncMPVProfile_422 = 4;
export const eAVEncMPVLevel_Low = 1;
export const eAVEncMPVLevel_Main = 2;
export const eAVEncMPVLevel_High1440 = 3;
export const eAVEncMPVLevel_High = 4;
export const eAVEncH263VProfile_Base = 0;
export const eAVEncH263VProfile_CompatibilityV2 = 1;
export const eAVEncH263VProfile_CompatibilityV1 = 2;
export const eAVEncH263VProfile_WirelessV2 = 3;
export const eAVEncH263VProfile_WirelessV3 = 4;
export const eAVEncH263VProfile_HighCompression = 5;
export const eAVEncH263VProfile_Internet = 6;
export const eAVEncH263VProfile_Interlace = 7;
export const eAVEncH263VProfile_HighLatency = 8;
export const eAVEncH264VProfile_unknown = 0;
export const eAVEncH264VProfile_Simple = 66;
export const eAVEncH264VProfile_Base = 66;
export const eAVEncH264VProfile_Main = 77;
export const eAVEncH264VProfile_High = 100;
export const eAVEncH264VProfile_422 = 122;
export const eAVEncH264VProfile_High10 = 110;
export const eAVEncH264VProfile_444 = 244;
export const eAVEncH264VProfile_Extended = 88;
export const eAVEncH264VProfile_ScalableBase = 83;
export const eAVEncH264VProfile_ScalableHigh = 86;
export const eAVEncH264VProfile_MultiviewHigh = 118;
export const eAVEncH264VProfile_StereoHigh = 128;
export const eAVEncH264VProfile_ConstrainedBase = 256;
export const eAVEncH264VProfile_UCConstrainedHigh = 257;
export const eAVEncH264VProfile_UCScalableConstrainedBase = 258;
export const eAVEncH264VProfile_UCScalableConstrainedHigh = 259;
export const eAVEncH265VProfile_unknown = 0;
export const eAVEncH265VProfile_Main_420_8 = 1;
export const eAVEncH265VProfile_Main_420_10 = 2;
export const eAVEncH265VProfile_Main_420_12 = 3;
export const eAVEncH265VProfile_Main_422_10 = 4;
export const eAVEncH265VProfile_Main_422_12 = 5;
export const eAVEncH265VProfile_Main_444_8 = 6;
export const eAVEncH265VProfile_Main_444_10 = 7;
export const eAVEncH265VProfile_Main_444_12 = 8;
export const eAVEncH265VProfile_Monochrome_12 = 9;
export const eAVEncH265VProfile_Monochrome_16 = 10;
export const eAVEncH265VProfile_MainIntra_420_8 = 11;
export const eAVEncH265VProfile_MainIntra_420_10 = 12;
export const eAVEncH265VProfile_MainIntra_420_12 = 13;
export const eAVEncH265VProfile_MainIntra_422_10 = 14;
export const eAVEncH265VProfile_MainIntra_422_12 = 15;
export const eAVEncH265VProfile_MainIntra_444_8 = 16;
export const eAVEncH265VProfile_MainIntra_444_10 = 17;
export const eAVEncH265VProfile_MainIntra_444_12 = 18;
export const eAVEncH265VProfile_MainIntra_444_16 = 19;
export const eAVEncH265VProfile_MainStill_420_8 = 20;
export const eAVEncH265VProfile_MainStill_444_8 = 21;
export const eAVEncH265VProfile_MainStill_444_16 = 22;
export const eAVEncVP9VProfile_unknown = 0;
export const eAVEncVP9VProfile_420_8 = 1;
export const eAVEncVP9VProfile_420_10 = 2;
export const eAVEncVP9VProfile_420_12 = 3;
export const eAVEncH263PictureType_I = 0;
export const eAVEncH263PictureType_P = 1;
export const eAVEncH263PictureType_B = 2;
export const eAVEncH264PictureType_IDR = 0;
export const eAVEncH264PictureType_P = 1;
export const eAVEncH264PictureType_B = 2;
export const eAVEncH263VLevel1 = 10;
export const eAVEncH263VLevel2 = 20;
export const eAVEncH263VLevel3 = 30;
export const eAVEncH263VLevel4 = 40;
export const eAVEncH263VLevel4_5 = 45;
export const eAVEncH263VLevel5 = 50;
export const eAVEncH263VLevel6 = 60;
export const eAVEncH263VLevel7 = 70;
export const eAVEncH264VLevel1 = 10;
export const eAVEncH264VLevel1_b = 11;
export const eAVEncH264VLevel1_1 = 11;
export const eAVEncH264VLevel1_2 = 12;
export const eAVEncH264VLevel1_3 = 13;
export const eAVEncH264VLevel2 = 20;
export const eAVEncH264VLevel2_1 = 21;
export const eAVEncH264VLevel2_2 = 22;
export const eAVEncH264VLevel3 = 30;
export const eAVEncH264VLevel3_1 = 31;
export const eAVEncH264VLevel3_2 = 32;
export const eAVEncH264VLevel4 = 40;
export const eAVEncH264VLevel4_1 = 41;
export const eAVEncH264VLevel4_2 = 42;
export const eAVEncH264VLevel5 = 50;
export const eAVEncH264VLevel5_1 = 51;
export const eAVEncH264VLevel5_2 = 52;
export const eAVEncH265VLevel1 = 30;
export const eAVEncH265VLevel2 = 60;
export const eAVEncH265VLevel2_1 = 63;
export const eAVEncH265VLevel3 = 90;
export const eAVEncH265VLevel3_1 = 93;
export const eAVEncH265VLevel4 = 120;
export const eAVEncH265VLevel4_1 = 123;
export const eAVEncH265VLevel5 = 150;
export const eAVEncH265VLevel5_1 = 153;
export const eAVEncH265VLevel5_2 = 156;
export const eAVEncH265VLevel6 = 180;
export const eAVEncH265VLevel6_1 = 183;
export const eAVEncH265VLevel6_2 = 186;
export const eAVEncMPVFrameFieldMode_FieldMode = 0;
export const eAVEncMPVFrameFieldMode_FrameMode = 1;
export const eAVEncMPVSceneDetection_None = 0;
export const eAVEncMPVSceneDetection_InsertIPicture = 1;
export const eAVEncMPVSceneDetection_StartNewGOP = 2;
export const eAVEncMPVSceneDetection_StartNewLocatableGOP = 3;
export const eAVEncMPVScanPattern_Auto = 0;
export const eAVEncMPVScanPattern_ZigZagScan = 1;
export const eAVEncMPVScanPattern_AlternateScan = 2;
export const eAVEncMPVQScaleType_Auto = 0;
export const eAVEncMPVQScaleType_Linear = 1;
export const eAVEncMPVQScaleType_NonLinear = 2;
export const eAVEncMPVIntraVLCTable_Auto = 0;
export const eAVEncMPVIntraVLCTable_MPEG1 = 1;
export const eAVEncMPVIntraVLCTable_Alternate = 2;
export const eAVEncMPALayer_1 = 1;
export const eAVEncMPALayer_2 = 2;
export const eAVEncMPALayer_3 = 3;
export const eAVEncMPACodingMode_Mono = 0;
export const eAVEncMPACodingMode_Stereo = 1;
export const eAVEncMPACodingMode_DualChannel = 2;
export const eAVEncMPACodingMode_JointStereo = 3;
export const eAVEncMPACodingMode_Surround = 4;
export const eAVEncMPAEmphasisType_None = 0;
export const eAVEncMPAEmphasisType_50_15 = 1;
export const eAVEncMPAEmphasisType_Reserved = 2;
export const eAVEncMPAEmphasisType_CCITT_J17 = 3;
export const eAVEncDDService_CM = 0;
export const eAVEncDDService_ME = 1;
export const eAVEncDDService_VI = 2;
export const eAVEncDDService_HI = 3;
export const eAVEncDDService_D = 4;
export const eAVEncDDService_C = 5;
export const eAVEncDDService_E = 6;
export const eAVEncDDService_VO = 7;
export const eAVEncDDProductionRoomType_NotIndicated = 0;
export const eAVEncDDProductionRoomType_Large = 1;
export const eAVEncDDProductionRoomType_Small = 2;
export const eAVEncDDDynamicRangeCompressionControl_None = 0;
export const eAVEncDDDynamicRangeCompressionControl_FilmStandard = 1;
export const eAVEncDDDynamicRangeCompressionControl_FilmLight = 2;
export const eAVEncDDDynamicRangeCompressionControl_MusicStandard = 3;
export const eAVEncDDDynamicRangeCompressionControl_MusicLight = 4;
export const eAVEncDDDynamicRangeCompressionControl_Speech = 5;
export const eAVEncDDSurroundExMode_NotIndicated = 0;
export const eAVEncDDSurroundExMode_No = 1;
export const eAVEncDDSurroundExMode_Yes = 2;
export const eAVEncDDPreferredStereoDownMixMode_LtRt = 0;
export const eAVEncDDPreferredStereoDownMixMode_LoRo = 1;
export const eAVEncDDAtoDConverterType_Standard = 0;
export const eAVEncDDAtoDConverterType_HDCD = 1;
export const eAVEncDDHeadphoneMode_NotIndicated = 0;
export const eAVEncDDHeadphoneMode_NotEncoded = 1;
export const eAVEncDDHeadphoneMode_Encoded = 2;
export const eAVDecVideoInputScan_Unknown = 0;
export const eAVDecVideoInputScan_Progressive = 1;
export const eAVDecVideoInputScan_Interlaced_UpperFieldFirst = 2;
export const eAVDecVideoInputScan_Interlaced_LowerFieldFirst = 3;
export const eAVDecVideoSWPowerLevel_BatteryLife = 0;
export const eAVDecVideoSWPowerLevel_Balanced = 50;
export const eAVDecVideoSWPowerLevel_VideoQuality = 100;
export const eAVDecAACUseISODownmix = 0;
export const eAVDecAACUseARIBDownmix = 1;
export const eAVDecHEAACDynamicRangeControl_OFF = 0;
export const eAVDecHEAACDynamicRangeControl_ON = 1;
export const eAVDecAudioDualMono_IsNotDualMono = 0;
export const eAVDecAudioDualMono_IsDualMono = 1;
export const eAVDecAudioDualMono_UnSpecified = 2;
export const eAVDecAudioDualMonoReproMode_STEREO = 0;
export const eAVDecAudioDualMonoReproMode_LEFT_MONO = 1;
export const eAVDecAudioDualMonoReproMode_RIGHT_MONO = 2;
export const eAVDecAudioDualMonoReproMode_MIX_MONO = 3;
export const eAVAudioChannelConfig_FRONT_LEFT = 1;
export const eAVAudioChannelConfig_FRONT_RIGHT = 2;
export const eAVAudioChannelConfig_FRONT_CENTER = 4;
export const eAVAudioChannelConfig_LOW_FREQUENCY = 8;
export const eAVAudioChannelConfig_BACK_LEFT = 16;
export const eAVAudioChannelConfig_BACK_RIGHT = 32;
export const eAVAudioChannelConfig_FRONT_LEFT_OF_CENTER = 64;
export const eAVAudioChannelConfig_FRONT_RIGHT_OF_CENTER = 128;
export const eAVAudioChannelConfig_BACK_CENTER = 256;
export const eAVAudioChannelConfig_SIDE_LEFT = 512;
export const eAVAudioChannelConfig_SIDE_RIGHT = 1024;
export const eAVAudioChannelConfig_TOP_CENTER = 2048;
export const eAVAudioChannelConfig_TOP_FRONT_LEFT = 4096;
export const eAVAudioChannelConfig_TOP_FRONT_CENTER = 8192;
export const eAVAudioChannelConfig_TOP_FRONT_RIGHT = 16384;
export const eAVAudioChannelConfig_TOP_BACK_LEFT = 32768;
export const eAVAudioChannelConfig_TOP_BACK_CENTER = 65536;
export const eAVAudioChannelConfig_TOP_BACK_RIGHT = 131072;
export const eAVDDSurroundMode_NotIndicated = 0;
export const eAVDDSurroundMode_No = 1;
export const eAVDDSurroundMode_Yes = 2;
export const eAVDecDDOperationalMode_NONE = 0;
export const eAVDecDDOperationalMode_LINE = 1;
export const eAVDecDDOperationalMode_RF = 2;
export const eAVDecDDOperationalMode_CUSTOM0 = 3;
export const eAVDecDDOperationalMode_CUSTOM1 = 4;
export const eAVDecDDOperationalMode_PORTABLE8 = 5;
export const eAVDecDDOperationalMode_PORTABLE11 = 6;
export const eAVDecDDOperationalMode_PORTABLE14 = 7;
export const eAVDecDDMatrixDecodingMode_OFF = 0;
export const eAVDecDDMatrixDecodingMode_ON = 1;
export const eAVDecDDMatrixDecodingMode_AUTO = 2;
export const eAVDecDDStereoDownMixMode_Auto = 0;
export const eAVDecDDStereoDownMixMode_LtRt = 1;
export const eAVDecDDStereoDownMixMode_LoRo = 2;
export const eAVDSPLoudnessEqualization_OFF = 0;
export const eAVDSPLoudnessEqualization_ON = 1;
export const eAVDSPLoudnessEqualization_AUTO = 2;
export const eAVDSPSpeakerFill_OFF = 0;
export const eAVDSPSpeakerFill_ON = 1;
export const eAVDSPSpeakerFill_AUTO = 2;
export const eAVEncChromaEncodeMode_420 = 0;
export const eAVEncChromaEncodeMode_444 = 1;
export const eAVEncChromaEncodeMode_444_v2 = 2;
export const DXVAHD_FRAME_FORMAT_PROGRESSIVE = 0;
export const DXVAHD_FRAME_FORMAT_INTERLACED_TOP_FIELD_FIRST = 1;
export const DXVAHD_FRAME_FORMAT_INTERLACED_BOTTOM_FIELD_FIRST = 2;
export const DXVAHD_DEVICE_USAGE_PLAYBACK_NORMAL = 0;
export const DXVAHD_DEVICE_USAGE_OPTIMAL_SPEED = 1;
export const DXVAHD_DEVICE_USAGE_OPTIMAL_QUALITY = 2;
export const DXVAHD_SURFACE_TYPE_VIDEO_INPUT = 0;
export const DXVAHD_SURFACE_TYPE_VIDEO_INPUT_PRIVATE = 1;
export const DXVAHD_SURFACE_TYPE_VIDEO_OUTPUT = 2;
export const DXVAHD_DEVICE_TYPE_HARDWARE = 0;
export const DXVAHD_DEVICE_TYPE_SOFTWARE = 1;
export const DXVAHD_DEVICE_TYPE_REFERENCE = 2;
export const DXVAHD_DEVICE_TYPE_OTHER = 3;
export const DXVAHD_DEVICE_CAPS_LINEAR_SPACE = 1;
export const DXVAHD_DEVICE_CAPS_xvYCC = 2;
export const DXVAHD_DEVICE_CAPS_RGB_RANGE_CONVERSION = 4;
export const DXVAHD_DEVICE_CAPS_YCbCr_MATRIX_CONVERSION = 8;
export const DXVAHD_FEATURE_CAPS_ALPHA_FILL = 1;
export const DXVAHD_FEATURE_CAPS_CONSTRICTION = 2;
export const DXVAHD_FEATURE_CAPS_LUMA_KEY = 4;
export const DXVAHD_FEATURE_CAPS_ALPHA_PALETTE = 8;
export const DXVAHD_FILTER_CAPS_BRIGHTNESS = 1;
export const DXVAHD_FILTER_CAPS_CONTRAST = 2;
export const DXVAHD_FILTER_CAPS_HUE = 4;
export const DXVAHD_FILTER_CAPS_SATURATION = 8;
export const DXVAHD_FILTER_CAPS_NOISE_REDUCTION = 16;
export const DXVAHD_FILTER_CAPS_EDGE_ENHANCEMENT = 32;
export const DXVAHD_FILTER_CAPS_ANAMORPHIC_SCALING = 64;
export const DXVAHD_INPUT_FORMAT_CAPS_RGB_INTERLACED = 1;
export const DXVAHD_INPUT_FORMAT_CAPS_RGB_PROCAMP = 2;
export const DXVAHD_INPUT_FORMAT_CAPS_RGB_LUMA_KEY = 4;
export const DXVAHD_INPUT_FORMAT_CAPS_PALETTE_INTERLACED = 8;
export const DXVAHD_PROCESSOR_CAPS_DEINTERLACE_BLEND = 1;
export const DXVAHD_PROCESSOR_CAPS_DEINTERLACE_BOB = 2;
export const DXVAHD_PROCESSOR_CAPS_DEINTERLACE_ADAPTIVE = 4;
export const DXVAHD_PROCESSOR_CAPS_DEINTERLACE_MOTION_COMPENSATION = 8;
export const DXVAHD_PROCESSOR_CAPS_INVERSE_TELECINE = 16;
export const DXVAHD_PROCESSOR_CAPS_FRAME_RATE_CONVERSION = 32;
export const DXVAHD_ITELECINE_CAPS_32 = 1;
export const DXVAHD_ITELECINE_CAPS_22 = 2;
export const DXVAHD_ITELECINE_CAPS_2224 = 4;
export const DXVAHD_ITELECINE_CAPS_2332 = 8;
export const DXVAHD_ITELECINE_CAPS_32322 = 16;
export const DXVAHD_ITELECINE_CAPS_55 = 32;
export const DXVAHD_ITELECINE_CAPS_64 = 64;
export const DXVAHD_ITELECINE_CAPS_87 = 128;
export const DXVAHD_ITELECINE_CAPS_222222222223 = 256;
export const DXVAHD_ITELECINE_CAPS_OTHER = `-2147483648`;
export const DXVAHD_FILTER_BRIGHTNESS = 0;
export const DXVAHD_FILTER_CONTRAST = 1;
export const DXVAHD_FILTER_HUE = 2;
export const DXVAHD_FILTER_SATURATION = 3;
export const DXVAHD_FILTER_NOISE_REDUCTION = 4;
export const DXVAHD_FILTER_EDGE_ENHANCEMENT = 5;
export const DXVAHD_FILTER_ANAMORPHIC_SCALING = 6;
export const DXVAHD_BLT_STATE_TARGET_RECT = 0;
export const DXVAHD_BLT_STATE_BACKGROUND_COLOR = 1;
export const DXVAHD_BLT_STATE_OUTPUT_COLOR_SPACE = 2;
export const DXVAHD_BLT_STATE_ALPHA_FILL = 3;
export const DXVAHD_BLT_STATE_CONSTRICTION = 4;
export const DXVAHD_BLT_STATE_PRIVATE = 1000;
export const DXVAHD_ALPHA_FILL_MODE_OPAQUE = 0;
export const DXVAHD_ALPHA_FILL_MODE_BACKGROUND = 1;
export const DXVAHD_ALPHA_FILL_MODE_DESTINATION = 2;
export const DXVAHD_ALPHA_FILL_MODE_SOURCE_STREAM = 3;
export const DXVAHD_STREAM_STATE_D3DFORMAT = 0;
export const DXVAHD_STREAM_STATE_FRAME_FORMAT = 1;
export const DXVAHD_STREAM_STATE_INPUT_COLOR_SPACE = 2;
export const DXVAHD_STREAM_STATE_OUTPUT_RATE = 3;
export const DXVAHD_STREAM_STATE_SOURCE_RECT = 4;
export const DXVAHD_STREAM_STATE_DESTINATION_RECT = 5;
export const DXVAHD_STREAM_STATE_ALPHA = 6;
export const DXVAHD_STREAM_STATE_PALETTE = 7;
export const DXVAHD_STREAM_STATE_LUMA_KEY = 8;
export const DXVAHD_STREAM_STATE_ASPECT_RATIO = 9;
export const DXVAHD_STREAM_STATE_FILTER_BRIGHTNESS = 100;
export const DXVAHD_STREAM_STATE_FILTER_CONTRAST = 101;
export const DXVAHD_STREAM_STATE_FILTER_HUE = 102;
export const DXVAHD_STREAM_STATE_FILTER_SATURATION = 103;
export const DXVAHD_STREAM_STATE_FILTER_NOISE_REDUCTION = 104;
export const DXVAHD_STREAM_STATE_FILTER_EDGE_ENHANCEMENT = 105;
export const DXVAHD_STREAM_STATE_FILTER_ANAMORPHIC_SCALING = 106;
export const DXVAHD_STREAM_STATE_PRIVATE = 1000;
export const DXVAHD_OUTPUT_RATE_NORMAL = 0;
export const DXVAHD_OUTPUT_RATE_HALF = 1;
export const DXVAHD_OUTPUT_RATE_CUSTOM = 2;
export const DXVA2_SampleFormatMask = 255;
export const DXVA2_SampleUnknown = 0;
export const DXVA2_SampleProgressiveFrame = 2;
export const DXVA2_SampleFieldInterleavedEvenFirst = 3;
export const DXVA2_SampleFieldInterleavedOddFirst = 4;
export const DXVA2_SampleFieldSingleEven = 5;
export const DXVA2_SampleFieldSingleOdd = 6;
export const DXVA2_SampleSubStream = 7;
export const DXVA2_VideoChromaSubsamplingMask = 15;
export const DXVA2_VideoChromaSubsampling_Unknown = 0;
export const DXVA2_VideoChromaSubsampling_ProgressiveChroma = 8;
export const DXVA2_VideoChromaSubsampling_Horizontally_Cosited = 4;
export const DXVA2_VideoChromaSubsampling_Vertically_Cosited = 2;
export const DXVA2_VideoChromaSubsampling_Vertically_AlignedChromaPlanes = 1;
export const DXVA2_VideoChromaSubsampling_MPEG2 = 5;
export const DXVA2_VideoChromaSubsampling_MPEG1 = 1;
export const DXVA2_VideoChromaSubsampling_DV_PAL = 6;
export const DXVA2_VideoChromaSubsampling_Cosited = 7;
export const DXVA2_NominalRangeMask = 7;
export const DXVA2_NominalRange_Unknown = 0;
export const DXVA2_NominalRange_Normal = 1;
export const DXVA2_NominalRange_Wide = 2;
export const DXVA2_NominalRange_0_255 = 1;
export const DXVA2_NominalRange_16_235 = 2;
export const DXVA2_NominalRange_48_208 = 3;
export const DXVA2_VideoTransferMatrixMask = 7;
export const DXVA2_VideoTransferMatrix_Unknown = 0;
export const DXVA2_VideoTransferMatrix_BT709 = 1;
export const DXVA2_VideoTransferMatrix_BT601 = 2;
export const DXVA2_VideoTransferMatrix_SMPTE240M = 3;
export const DXVA2_VideoLightingMask = 15;
export const DXVA2_VideoLighting_Unknown = 0;
export const DXVA2_VideoLighting_bright = 1;
export const DXVA2_VideoLighting_office = 2;
export const DXVA2_VideoLighting_dim = 3;
export const DXVA2_VideoLighting_dark = 4;
export const DXVA2_VideoPrimariesMask = 31;
export const DXVA2_VideoPrimaries_Unknown = 0;
export const DXVA2_VideoPrimaries_reserved = 1;
export const DXVA2_VideoPrimaries_BT709 = 2;
export const DXVA2_VideoPrimaries_BT470_2_SysM = 3;
export const DXVA2_VideoPrimaries_BT470_2_SysBG = 4;
export const DXVA2_VideoPrimaries_SMPTE170M = 5;
export const DXVA2_VideoPrimaries_SMPTE240M = 6;
export const DXVA2_VideoPrimaries_EBU3213 = 7;
export const DXVA2_VideoPrimaries_SMPTE_C = 8;
export const DXVA2_VideoTransFuncMask = 31;
export const DXVA2_VideoTransFunc_Unknown = 0;
export const DXVA2_VideoTransFunc_10 = 1;
export const DXVA2_VideoTransFunc_18 = 2;
export const DXVA2_VideoTransFunc_20 = 3;
export const DXVA2_VideoTransFunc_22 = 4;
export const DXVA2_VideoTransFunc_709 = 5;
export const DXVA2_VideoTransFunc_240M = 6;
export const DXVA2_VideoTransFunc_sRGB = 7;
export const DXVA2_VideoTransFunc_28 = 8;
export const DXVA2_DeinterlaceTech_Unknown = 0;
export const DXVA2_DeinterlaceTech_BOBLineReplicate = 1;
export const DXVA2_DeinterlaceTech_BOBVerticalStretch = 2;
export const DXVA2_DeinterlaceTech_BOBVerticalStretch4Tap = 4;
export const DXVA2_DeinterlaceTech_MedianFiltering = 8;
export const DXVA2_DeinterlaceTech_EdgeFiltering = 16;
export const DXVA2_DeinterlaceTech_FieldAdaptive = 32;
export const DXVA2_DeinterlaceTech_PixelAdaptive = 64;
export const DXVA2_DeinterlaceTech_MotionVectorSteered = 128;
export const DXVA2_DeinterlaceTech_InverseTelecine = 256;
export const DXVA2_DeinterlaceTech_Mask = 511;
export const DXVA2_NoiseFilterLumaLevel = 1;
export const DXVA2_NoiseFilterLumaThreshold = 2;
export const DXVA2_NoiseFilterLumaRadius = 3;
export const DXVA2_NoiseFilterChromaLevel = 4;
export const DXVA2_NoiseFilterChromaThreshold = 5;
export const DXVA2_NoiseFilterChromaRadius = 6;
export const DXVA2_DetailFilterLumaLevel = 7;
export const DXVA2_DetailFilterLumaThreshold = 8;
export const DXVA2_DetailFilterLumaRadius = 9;
export const DXVA2_DetailFilterChromaLevel = 10;
export const DXVA2_DetailFilterChromaThreshold = 11;
export const DXVA2_DetailFilterChromaRadius = 12;
export const DXVA2_NoiseFilterTech_Unsupported = 0;
export const DXVA2_NoiseFilterTech_Unknown = 1;
export const DXVA2_NoiseFilterTech_Median = 2;
export const DXVA2_NoiseFilterTech_Temporal = 4;
export const DXVA2_NoiseFilterTech_BlockNoise = 8;
export const DXVA2_NoiseFilterTech_MosquitoNoise = 16;
export const DXVA2_NoiseFilterTech_Mask = 31;
export const DXVA2_DetailFilterTech_Unsupported = 0;
export const DXVA2_DetailFilterTech_Unknown = 1;
export const DXVA2_DetailFilterTech_Edge = 2;
export const DXVA2_DetailFilterTech_Sharpening = 4;
export const DXVA2_DetailFilterTech_Mask = 7;
export const DXVA2_ProcAmp_None = 0;
export const DXVA2_ProcAmp_Brightness = 1;
export const DXVA2_ProcAmp_Contrast = 2;
export const DXVA2_ProcAmp_Hue = 4;
export const DXVA2_ProcAmp_Saturation = 8;
export const DXVA2_ProcAmp_Mask = 15;
export const DXVA2_VideoProcess_None = 0;
export const DXVA2_VideoProcess_YUV2RGB = 1;
export const DXVA2_VideoProcess_StretchX = 2;
export const DXVA2_VideoProcess_StretchY = 4;
export const DXVA2_VideoProcess_AlphaBlend = 8;
export const DXVA2_VideoProcess_SubRects = 16;
export const DXVA2_VideoProcess_SubStreams = 32;
export const DXVA2_VideoProcess_SubStreamsExtended = 64;
export const DXVA2_VideoProcess_YUV2RGBExtended = 128;
export const DXVA2_VideoProcess_AlphaBlendExtended = 256;
export const DXVA2_VideoProcess_Constriction = 512;
export const DXVA2_VideoProcess_NoiseFilter = 1024;
export const DXVA2_VideoProcess_DetailFilter = 2048;
export const DXVA2_VideoProcess_PlanarAlpha = 4096;
export const DXVA2_VideoProcess_LinearScaling = 8192;
export const DXVA2_VideoProcess_GammaCompensated = 16384;
export const DXVA2_VideoProcess_MaintainsOriginalFieldData = 32768;
export const DXVA2_VideoProcess_Mask = 65535;
export const DXVA2_VPDev_HardwareDevice = 1;
export const DXVA2_VPDev_EmulatedDXVA1 = 2;
export const DXVA2_VPDev_SoftwareDevice = 4;
export const DXVA2_VPDev_Mask = 7;
export const DXVA2_SampleData_RFF = 1;
export const DXVA2_SampleData_TFF = 2;
export const DXVA2_SampleData_RFF_TFF_Present = 4;
export const DXVA2_SampleData_Mask = 65535;
export const DXVA2_DestData_RFF = 1;
export const DXVA2_DestData_TFF = 2;
export const DXVA2_DestData_RFF_TFF_Present = 4;
export const DXVA2_DestData_Mask = 65535;
export const DXVA2_PictureParametersBufferType = 0;
export const DXVA2_MacroBlockControlBufferType = 1;
export const DXVA2_ResidualDifferenceBufferType = 2;
export const DXVA2_DeblockingControlBufferType = 3;
export const DXVA2_InverseQuantizationMatrixBufferType = 4;
export const DXVA2_SliceControlBufferType = 5;
export const DXVA2_BitStreamDateBufferType = 6;
export const DXVA2_MotionVectorBuffer = 7;
export const DXVA2_FilmGrainBuffer = 8;
export const DXVA2_VideoDecoderRenderTarget = 0;
export const DXVA2_VideoProcessorRenderTarget = 1;
export const DXVA2_VideoSoftwareRenderTarget = 2;
export const DXVA2_SurfaceType_DecoderRenderTarget = 0;
export const DXVA2_SurfaceType_ProcessorRenderTarget = 1;
export const DXVA2_SurfaceType_D3DRenderTargetTexture = 2;
export const OPM_OMAC_SIZE = 16;
export const OPM_128_BIT_RANDOM_NUMBER_SIZE = 16;
export const OPM_ENCRYPTED_INITIALIZATION_PARAMETERS_SIZE = 256;
export const OPM_CONFIGURE_SETTING_DATA_SIZE = 4056;
export const OPM_GET_INFORMATION_PARAMETERS_SIZE = 4056;
export const OPM_REQUESTED_INFORMATION_SIZE = 4076;
export const OPM_HDCP_KEY_SELECTION_VECTOR_SIZE = 5;
export const OPM_PROTECTION_TYPE_SIZE = 4;
export const OPM_BUS_TYPE_MASK = 65535;
export const OPM_BUS_IMPLEMENTATION_MODIFIER_MASK = 32767;
export const OPM_VOS_COPP_SEMANTICS = 0;
export const OPM_VOS_OPM_SEMANTICS = 1;
export const OPM_VOS_OPM_INDIRECT_DISPLAY = 2;
export const OPM_HDCP_FLAG_NONE = 0;
export const OPM_HDCP_FLAG_REPEATER = 1;
export const OPM_STATUS_NORMAL = 0;
export const OPM_STATUS_LINK_LOST = 1;
export const OPM_STATUS_RENEGOTIATION_REQUIRED = 2;
export const OPM_STATUS_TAMPERING_DETECTED = 4;
export const OPM_STATUS_REVOKED_HDCP_DEVICE_ATTACHED = 8;
export const OPM_CONNECTOR_TYPE_OTHER = `-1`;
export const OPM_CONNECTOR_TYPE_VGA = 0;
export const OPM_CONNECTOR_TYPE_SVIDEO = 1;
export const OPM_CONNECTOR_TYPE_COMPOSITE_VIDEO = 2;
export const OPM_CONNECTOR_TYPE_COMPONENT_VIDEO = 3;
export const OPM_CONNECTOR_TYPE_DVI = 4;
export const OPM_CONNECTOR_TYPE_HDMI = 5;
export const OPM_CONNECTOR_TYPE_LVDS = 6;
export const OPM_CONNECTOR_TYPE_D_JPN = 8;
export const OPM_CONNECTOR_TYPE_SDI = 9;
export const OPM_CONNECTOR_TYPE_DISPLAYPORT_EXTERNAL = 10;
export const OPM_CONNECTOR_TYPE_DISPLAYPORT_EMBEDDED = 11;
export const OPM_CONNECTOR_TYPE_UDI_EXTERNAL = 12;
export const OPM_CONNECTOR_TYPE_UDI_EMBEDDED = 13;
export const OPM_CONNECTOR_TYPE_RESERVED = 14;
export const OPM_CONNECTOR_TYPE_MIRACAST = 15;
export const OPM_CONNECTOR_TYPE_TRANSPORT_AGNOSTIC_DIGITAL_MODE_A = 16;
export const OPM_CONNECTOR_TYPE_TRANSPORT_AGNOSTIC_DIGITAL_MODE_B = 17;
export const OPM_COPP_COMPATIBLE_CONNECTOR_TYPE_INTERNAL = `-2147483648`;
export const OPM_DVI_CHARACTERISTIC_1_0 = 1;
export const OPM_DVI_CHARACTERISTIC_1_1_OR_ABOVE = 2;
export const OPM_OUTPUT_HARDWARE_PROTECTION_NOT_SUPPORTED = 0;
export const OPM_OUTPUT_HARDWARE_PROTECTION_SUPPORTED = 1;
export const OPM_BUS_TYPE_OTHER = 0;
export const OPM_BUS_TYPE_PCI = 1;
export const OPM_BUS_TYPE_PCIX = 2;
export const OPM_BUS_TYPE_PCIEXPRESS = 3;
export const OPM_BUS_TYPE_AGP = 4;
export const OPM_BUS_IMPLEMENTATION_MODIFIER_INSIDE_OF_CHIPSET = 65536;
export const OPM_BUS_IMPLEMENTATION_MODIFIER_TRACKS_ON_MOTHER_BOARD_TO_CHIP = 131072;
export const OPM_BUS_IMPLEMENTATION_MODIFIER_TRACKS_ON_MOTHER_BOARD_TO_SOCKET = 196608;
export const OPM_BUS_IMPLEMENTATION_MODIFIER_DAUGHTER_BOARD_CONNECTOR = 262144;
export const OPM_BUS_IMPLEMENTATION_MODIFIER_DAUGHTER_BOARD_CONNECTOR_INSIDE_OF_NUAE = 327680;
export const OPM_BUS_IMPLEMENTATION_MODIFIER_NON_STANDARD = `-2147483648`;
export const OPM_COPP_COMPATIBLE_BUS_TYPE_INTEGRATED = `-2147483648`;
export const OPM_DPCP_OFF = 0;
export const OPM_DPCP_ON = 1;
export const OPM_DPCP_FORCE_ULONG = 2147483647;
export const OPM_HDCP_OFF = 0;
export const OPM_HDCP_ON = 1;
export const OPM_HDCP_FORCE_ULONG = 2147483647;
export const OPM_TYPE_ENFORCEMENT_HDCP_OFF = 0;
export const OPM_TYPE_ENFORCEMENT_HDCP_ON_WITH_NO_TYPE_RESTRICTION = 1;
export const OPM_TYPE_ENFORCEMENT_HDCP_ON_WITH_TYPE1_RESTRICTION = 2;
export const OPM_TYPE_ENFORCEMENT_HDCP_FORCE_ULONG = 2147483647;
export const OPM_CGMSA_OFF = 0;
export const OPM_CGMSA_COPY_FREELY = 1;
export const OPM_CGMSA_COPY_NO_MORE = 2;
export const OPM_CGMSA_COPY_ONE_GENERATION = 3;
export const OPM_CGMSA_COPY_NEVER = 4;
export const OPM_CGMSA_REDISTRIBUTION_CONTROL_REQUIRED = 8;
export const OPM_ACP_OFF = 0;
export const OPM_ACP_LEVEL_ONE = 1;
export const OPM_ACP_LEVEL_TWO = 2;
export const OPM_ACP_LEVEL_THREE = 3;
export const OPM_ACP_FORCE_ULONG = 2147483647;
export const OPM_PROTECTION_TYPE_OTHER = `-2147483648`;
export const OPM_PROTECTION_TYPE_NONE = 0;
export const OPM_PROTECTION_TYPE_COPP_COMPATIBLE_HDCP = 1;
export const OPM_PROTECTION_TYPE_ACP = 2;
export const OPM_PROTECTION_TYPE_CGMSA = 4;
export const OPM_PROTECTION_TYPE_HDCP = 8;
export const OPM_PROTECTION_TYPE_DPCP = 16;
export const OPM_PROTECTION_TYPE_TYPE_ENFORCEMENT_HDCP = 32;
export const OPM_PROTECTION_STANDARD_OTHER = 2147483648;
export const OPM_PROTECTION_STANDARD_NONE = 0;
export const OPM_PROTECTION_STANDARD_IEC61880_525I = 1;
export const OPM_PROTECTION_STANDARD_IEC61880_2_525I = 2;
export const OPM_PROTECTION_STANDARD_IEC62375_625P = 4;
export const OPM_PROTECTION_STANDARD_EIA608B_525 = 8;
export const OPM_PROTECTION_STANDARD_EN300294_625I = 16;
export const OPM_PROTECTION_STANDARD_CEA805A_TYPEA_525P = 32;
export const OPM_PROTECTION_STANDARD_CEA805A_TYPEA_750P = 64;
export const OPM_PROTECTION_STANDARD_CEA805A_TYPEA_1125I = 128;
export const OPM_PROTECTION_STANDARD_CEA805A_TYPEB_525P = 256;
export const OPM_PROTECTION_STANDARD_CEA805A_TYPEB_750P = 512;
export const OPM_PROTECTION_STANDARD_CEA805A_TYPEB_1125I = 1024;
export const OPM_PROTECTION_STANDARD_ARIBTRB15_525I = 2048;
export const OPM_PROTECTION_STANDARD_ARIBTRB15_525P = 4096;
export const OPM_PROTECTION_STANDARD_ARIBTRB15_750P = 8192;
export const OPM_PROTECTION_STANDARD_ARIBTRB15_1125I = 16384;
export const OPM_ASPECT_RATIO_EN300294_FULL_FORMAT_4_BY_3 = 0;
export const OPM_ASPECT_RATIO_EN300294_BOX_14_BY_9_CENTER = 1;
export const OPM_ASPECT_RATIO_EN300294_BOX_14_BY_9_TOP = 2;
export const OPM_ASPECT_RATIO_EN300294_BOX_16_BY_9_CENTER = 3;
export const OPM_ASPECT_RATIO_EN300294_BOX_16_BY_9_TOP = 4;
export const OPM_ASPECT_RATIO_EN300294_BOX_GT_16_BY_9_CENTER = 5;
export const OPM_ASPECT_RATIO_EN300294_FULL_FORMAT_4_BY_3_PROTECTED_CENTER = 6;
export const OPM_ASPECT_RATIO_EN300294_FULL_FORMAT_16_BY_9_ANAMORPHIC = 7;
export const OPM_ASPECT_RATIO_FORCE_ULONG = 2147483647;
export const KSMETHOD_OPMVIDEOOUTPUT_STARTINITIALIZATION = 0;
export const KSMETHOD_OPMVIDEOOUTPUT_FINISHINITIALIZATION = 1;
export const KSMETHOD_OPMVIDEOOUTPUT_GETINFORMATION = 2;
export const MF_ATTRIBUTE_UINT32 = 19;
export const MF_ATTRIBUTE_UINT64 = 21;
export const MF_ATTRIBUTE_DOUBLE = 5;
export const MF_ATTRIBUTE_GUID = 72;
export const MF_ATTRIBUTE_STRING = 31;
export const MF_ATTRIBUTE_BLOB = 4113;
export const MF_ATTRIBUTE_IUNKNOWN = 13;
export const MF_ATTRIBUTES_MATCH_OUR_ITEMS = 0;
export const MF_ATTRIBUTES_MATCH_THEIR_ITEMS = 1;
export const MF_ATTRIBUTES_MATCH_ALL_ITEMS = 2;
export const MF_ATTRIBUTES_MATCH_INTERSECTION = 3;
export const MF_ATTRIBUTES_MATCH_SMALLER = 4;
export const MF_ATTRIBUTE_SERIALIZE_UNKNOWN_BYREF = 1;
export const MF2DBuffer_LockFlags_LockTypeMask = 3;
export const MF2DBuffer_LockFlags_Read = 1;
export const MF2DBuffer_LockFlags_Write = 2;
export const MF2DBuffer_LockFlags_ReadWrite = 3;
export const MF2DBuffer_LockFlags_ForceDWORD = 2147483647;
export const MFVideoInterlace_Unknown = 0;
export const MFVideoInterlace_Progressive = 2;
export const MFVideoInterlace_FieldInterleavedUpperFirst = 3;
export const MFVideoInterlace_FieldInterleavedLowerFirst = 4;
export const MFVideoInterlace_FieldSingleUpper = 5;
export const MFVideoInterlace_FieldSingleLower = 6;
export const MFVideoInterlace_MixedInterlaceOrProgressive = 7;
export const MFVideoInterlace_Last = 8;
export const MFVideoInterlace_ForceDWORD = 2147483647;
export const MFVideoTransFunc_Unknown = 0;
export const MFVideoTransFunc_10 = 1;
export const MFVideoTransFunc_18 = 2;
export const MFVideoTransFunc_20 = 3;
export const MFVideoTransFunc_22 = 4;
export const MFVideoTransFunc_709 = 5;
export const MFVideoTransFunc_240M = 6;
export const MFVideoTransFunc_sRGB = 7;
export const MFVideoTransFunc_28 = 8;
export const MFVideoTransFunc_Log_100 = 9;
export const MFVideoTransFunc_Log_316 = 10;
export const MFVideoTransFunc_709_sym = 11;
export const MFVideoTransFunc_2020_const = 12;
export const MFVideoTransFunc_2020 = 13;
export const MFVideoTransFunc_26 = 14;
export const MFVideoTransFunc_2084 = 15;
export const MFVideoTransFunc_HLG = 16;
export const MFVideoTransFunc_10_rel = 17;
export const MFVideoTransFunc_Last = 18;
export const MFVideoTransFunc_ForceDWORD = 2147483647;
export const MFVideoPrimaries_Unknown = 0;
export const MFVideoPrimaries_reserved = 1;
export const MFVideoPrimaries_BT709 = 2;
export const MFVideoPrimaries_BT470_2_SysM = 3;
export const MFVideoPrimaries_BT470_2_SysBG = 4;
export const MFVideoPrimaries_SMPTE170M = 5;
export const MFVideoPrimaries_SMPTE240M = 6;
export const MFVideoPrimaries_EBU3213 = 7;
export const MFVideoPrimaries_SMPTE_C = 8;
export const MFVideoPrimaries_BT2020 = 9;
export const MFVideoPrimaries_XYZ = 10;
export const MFVideoPrimaries_DCI_P3 = 11;
export const MFVideoPrimaries_ACES = 12;
export const MFVideoPrimaries_Last = 13;
export const MFVideoPrimaries_ForceDWORD = 2147483647;
export const MFVideoLighting_Unknown = 0;
export const MFVideoLighting_bright = 1;
export const MFVideoLighting_office = 2;
export const MFVideoLighting_dim = 3;
export const MFVideoLighting_dark = 4;
export const MFVideoLighting_Last = 5;
export const MFVideoLighting_ForceDWORD = 2147483647;
export const MFVideoTransferMatrix_Unknown = 0;
export const MFVideoTransferMatrix_BT709 = 1;
export const MFVideoTransferMatrix_BT601 = 2;
export const MFVideoTransferMatrix_SMPTE240M = 3;
export const MFVideoTransferMatrix_BT2020_10 = 4;
export const MFVideoTransferMatrix_BT2020_12 = 5;
export const MFVideoTransferMatrix_Last = 6;
export const MFVideoTransferMatrix_ForceDWORD = 2147483647;
export const MFVideoChromaSubsampling_Unknown = 0;
export const MFVideoChromaSubsampling_ProgressiveChroma = 8;
export const MFVideoChromaSubsampling_Horizontally_Cosited = 4;
export const MFVideoChromaSubsampling_Vertically_Cosited = 2;
export const MFVideoChromaSubsampling_Vertically_AlignedChromaPlanes = 1;
export const MFVideoChromaSubsampling_MPEG2 = 5;
export const MFVideoChromaSubsampling_MPEG1 = 1;
export const MFVideoChromaSubsampling_DV_PAL = 6;
export const MFVideoChromaSubsampling_Cosited = 7;
export const MFVideoChromaSubsampling_Last = 8;
export const MFVideoChromaSubsampling_ForceDWORD = 2147483647;
export const MFNominalRange_Unknown = 0;
export const MFNominalRange_Normal = 1;
export const MFNominalRange_Wide = 2;
export const MFNominalRange_0_255 = 1;
export const MFNominalRange_16_235 = 2;
export const MFNominalRange_48_208 = 3;
export const MFNominalRange_64_127 = 4;
export const MFNominalRange_Last = 5;
export const MFNominalRange_ForceDWORD = 2147483647;
export const MFVideoFlag_PAD_TO_Mask = 3;
export const MFVideoFlag_PAD_TO_None = 0;
export const MFVideoFlag_PAD_TO_4x3 = 1;
export const MFVideoFlag_PAD_TO_16x9 = 2;
export const MFVideoFlag_SrcContentHintMask = 28;
export const MFVideoFlag_SrcContentHintNone = 0;
export const MFVideoFlag_SrcContentHint16x9 = 4;
export const MFVideoFlag_SrcContentHint235_1 = 8;
export const MFVideoFlag_AnalogProtected = 32;
export const MFVideoFlag_DigitallyProtected = 64;
export const MFVideoFlag_ProgressiveContent = 128;
export const MFVideoFlag_FieldRepeatCountMask = 1792;
export const MFVideoFlag_FieldRepeatCountShift = 8;
export const MFVideoFlag_ProgressiveSeqReset = 2048;
export const MFVideoFlag_PanScanEnabled = 131072;
export const MFVideoFlag_LowerFieldFirst = 262144;
export const MFVideoFlag_BottomUpLinearRep = 524288;
export const MFVideoFlags_DXVASurface = 1048576;
export const MFVideoFlags_RenderTargetSurface = 4194304;
export const MFVideoFlags_ForceQWORD = 2147483647;
export const MFStdVideoFormat_reserved = 0;
export const MFStdVideoFormat_NTSC = 1;
export const MFStdVideoFormat_PAL = 2;
export const MFStdVideoFormat_DVD_NTSC = 3;
export const MFStdVideoFormat_DVD_PAL = 4;
export const MFStdVideoFormat_DV_PAL = 5;
export const MFStdVideoFormat_DV_NTSC = 6;
export const MFStdVideoFormat_ATSC_SD480i = 7;
export const MFStdVideoFormat_ATSC_HD1080i = 8;
export const MFStdVideoFormat_ATSC_HD720p = 9;
export const MEUnknown = 0;
export const MEError = 1;
export const MEExtendedType = 2;
export const MENonFatalError = 3;
export const MEGenericV1Anchor = 3;
export const MESessionUnknown = 100;
export const MESessionTopologySet = 101;
export const MESessionTopologiesCleared = 102;
export const MESessionStarted = 103;
export const MESessionPaused = 104;
export const MESessionStopped = 105;
export const MESessionClosed = 106;
export const MESessionEnded = 107;
export const MESessionRateChanged = 108;
export const MESessionScrubSampleComplete = 109;
export const MESessionCapabilitiesChanged = 110;
export const MESessionTopologyStatus = 111;
export const MESessionNotifyPresentationTime = 112;
export const MENewPresentation = 113;
export const MELicenseAcquisitionStart = 114;
export const MELicenseAcquisitionCompleted = 115;
export const MEIndividualizationStart = 116;
export const MEIndividualizationCompleted = 117;
export const MEEnablerProgress = 118;
export const MEEnablerCompleted = 119;
export const MEPolicyError = 120;
export const MEPolicyReport = 121;
export const MEBufferingStarted = 122;
export const MEBufferingStopped = 123;
export const MEConnectStart = 124;
export const MEConnectEnd = 125;
export const MEReconnectStart = 126;
export const MEReconnectEnd = 127;
export const MERendererEvent = 128;
export const MESessionStreamSinkFormatChanged = 129;
export const MESessionV1Anchor = 129;
export const MESourceUnknown = 200;
export const MESourceStarted = 201;
export const MEStreamStarted = 202;
export const MESourceSeeked = 203;
export const MEStreamSeeked = 204;
export const MENewStream = 205;
export const MEUpdatedStream = 206;
export const MESourceStopped = 207;
export const MEStreamStopped = 208;
export const MESourcePaused = 209;
export const MEStreamPaused = 210;
export const MEEndOfPresentation = 211;
export const MEEndOfStream = 212;
export const MEMediaSample = 213;
export const MEStreamTick = 214;
export const MEStreamThinMode = 215;
export const MEStreamFormatChanged = 216;
export const MESourceRateChanged = 217;
export const MEEndOfPresentationSegment = 218;
export const MESourceCharacteristicsChanged = 219;
export const MESourceRateChangeRequested = 220;
export const MESourceMetadataChanged = 221;
export const MESequencerSourceTopologyUpdated = 222;
export const MESourceV1Anchor = 222;
export const MESinkUnknown = 300;
export const MEStreamSinkStarted = 301;
export const MEStreamSinkStopped = 302;
export const MEStreamSinkPaused = 303;
export const MEStreamSinkRateChanged = 304;
export const MEStreamSinkRequestSample = 305;
export const MEStreamSinkMarker = 306;
export const MEStreamSinkPrerolled = 307;
export const MEStreamSinkScrubSampleComplete = 308;
export const MEStreamSinkFormatChanged = 309;
export const MEStreamSinkDeviceChanged = 310;
export const MEQualityNotify = 311;
export const MESinkInvalidated = 312;
export const MEAudioSessionNameChanged = 313;
export const MEAudioSessionVolumeChanged = 314;
export const MEAudioSessionDeviceRemoved = 315;
export const MEAudioSessionServerShutdown = 316;
export const MEAudioSessionGroupingParamChanged = 317;
export const MEAudioSessionIconChanged = 318;
export const MEAudioSessionFormatChanged = 319;
export const MEAudioSessionDisconnected = 320;
export const MEAudioSessionExclusiveModeOverride = 321;
export const MESinkV1Anchor = 321;
export const MECaptureAudioSessionVolumeChanged = 322;
export const MECaptureAudioSessionDeviceRemoved = 323;
export const MECaptureAudioSessionFormatChanged = 324;
export const MECaptureAudioSessionDisconnected = 325;
export const MECaptureAudioSessionExclusiveModeOverride = 326;
export const MECaptureAudioSessionServerShutdown = 327;
export const MESinkV2Anchor = 327;
export const METrustUnknown = 400;
export const MEPolicyChanged = 401;
export const MEContentProtectionMessage = 402;
export const MEPolicySet = 403;
export const METrustV1Anchor = 403;
export const MEWMDRMLicenseBackupCompleted = 500;
export const MEWMDRMLicenseBackupProgress = 501;
export const MEWMDRMLicenseRestoreCompleted = 502;
export const MEWMDRMLicenseRestoreProgress = 503;
export const MEWMDRMLicenseAcquisitionCompleted = 506;
export const MEWMDRMIndividualizationCompleted = 508;
export const MEWMDRMIndividualizationProgress = 513;
export const MEWMDRMProximityCompleted = 514;
export const MEWMDRMLicenseStoreCleaned = 515;
export const MEWMDRMRevocationDownloadCompleted = 516;
export const MEWMDRMV1Anchor = 516;
export const METransformUnknown = 600;
export const METransformNeedInput = 601;
export const METransformHaveOutput = 602;
export const METransformDrainComplete = 603;
export const METransformMarker = 604;
export const METransformInputStreamStateChanged = 605;
export const MEByteStreamCharacteristicsChanged = 700;
export const MEVideoCaptureDeviceRemoved = 800;
export const MEVideoCaptureDevicePreempted = 801;
export const MEStreamSinkFormatInvalidated = 802;
export const MEEncodingParameters = 803;
export const MEContentProtectionMetadata = 900;
export const MEDeviceThermalStateChanged = 950;
export const MEReservedMax = 10000;
export const msoBegin = 0;
export const msoCurrent = 1;
export const MF_ACCESSMODE_READ = 1;
export const MF_ACCESSMODE_WRITE = 2;
export const MF_ACCESSMODE_READWRITE = 3;
export const MF_OPENMODE_FAIL_IF_NOT_EXIST = 0;
export const MF_OPENMODE_FAIL_IF_EXIST = 1;
export const MF_OPENMODE_RESET_IF_EXIST = 2;
export const MF_OPENMODE_APPEND_IF_EXIST = 3;
export const MF_OPENMODE_DELETE_IF_EXIST = 4;
export const MF_FILEFLAGS_NONE = 0;
export const MF_FILEFLAGS_NOBUFFERING = 1;
export const MF_FILEFLAGS_ALLOW_WRITE_SHARING = 2;
export const MF_PLUGIN_CONTROL_POLICY_USE_ALL_PLUGINS = 0;
export const MF_PLUGIN_CONTROL_POLICY_USE_APPROVED_PLUGINS = 1;
export const MF_PLUGIN_CONTROL_POLICY_USE_WEB_PLUGINS = 2;
export const MF_PLUGIN_CONTROL_POLICY_USE_WEB_PLUGINS_EDGEMODE = 3;
export const MF_STREAM_STATE_STOPPED = 0;
export const MF_STREAM_STATE_PAUSED = 1;
export const MF_STREAM_STATE_RUNNING = 2;
export const MFT_INPUT_DATA_BUFFER_PLACEHOLDER = `-1`;
export const MFT_OUTPUT_DATA_BUFFER_INCOMPLETE = 16777216;
export const MFT_OUTPUT_DATA_BUFFER_FORMAT_CHANGE = 256;
export const MFT_OUTPUT_DATA_BUFFER_STREAM_END = 512;
export const MFT_OUTPUT_DATA_BUFFER_NO_SAMPLE = 768;
export const MFT_INPUT_STATUS_ACCEPT_DATA = 1;
export const MFT_OUTPUT_STATUS_SAMPLE_READY = 1;
export const MFT_INPUT_STREAM_WHOLE_SAMPLES = 1;
export const MFT_INPUT_STREAM_SINGLE_SAMPLE_PER_BUFFER = 2;
export const MFT_INPUT_STREAM_FIXED_SAMPLE_SIZE = 4;
export const MFT_INPUT_STREAM_HOLDS_BUFFERS = 8;
export const MFT_INPUT_STREAM_DOES_NOT_ADDREF = 256;
export const MFT_INPUT_STREAM_REMOVABLE = 512;
export const MFT_INPUT_STREAM_OPTIONAL = 1024;
export const MFT_INPUT_STREAM_PROCESSES_IN_PLACE = 2048;
export const MFT_OUTPUT_STREAM_WHOLE_SAMPLES = 1;
export const MFT_OUTPUT_STREAM_SINGLE_SAMPLE_PER_BUFFER = 2;
export const MFT_OUTPUT_STREAM_FIXED_SAMPLE_SIZE = 4;
export const MFT_OUTPUT_STREAM_DISCARDABLE = 8;
export const MFT_OUTPUT_STREAM_OPTIONAL = 16;
export const MFT_OUTPUT_STREAM_PROVIDES_SAMPLES = 256;
export const MFT_OUTPUT_STREAM_CAN_PROVIDE_SAMPLES = 512;
export const MFT_OUTPUT_STREAM_LAZY_READ = 1024;
export const MFT_OUTPUT_STREAM_REMOVABLE = 2048;
export const MFT_SET_TYPE_TEST_ONLY = 1;
export const MFT_PROCESS_OUTPUT_DISCARD_WHEN_NO_BUFFER = 1;
export const MFT_PROCESS_OUTPUT_REGENERATE_LAST_OUTPUT = 2;
export const MFT_PROCESS_OUTPUT_STATUS_NEW_STREAMS = 256;
export const MFT_DRAIN_PRODUCE_TAILS = 0;
export const MFT_DRAIN_NO_TAILS = 1;
export const MFT_MESSAGE_COMMAND_FLUSH = 0;
export const MFT_MESSAGE_COMMAND_DRAIN = 1;
export const MFT_MESSAGE_SET_D3D_MANAGER = 2;
export const MFT_MESSAGE_DROP_SAMPLES = 3;
export const MFT_MESSAGE_COMMAND_TICK = 4;
export const MFT_MESSAGE_NOTIFY_BEGIN_STREAMING = 268435456;
export const MFT_MESSAGE_NOTIFY_END_STREAMING = 268435457;
export const MFT_MESSAGE_NOTIFY_END_OF_STREAM = 268435458;
export const MFT_MESSAGE_NOTIFY_START_OF_STREAM = 268435459;
export const MFT_MESSAGE_NOTIFY_RELEASE_RESOURCES = 268435460;
export const MFT_MESSAGE_NOTIFY_REACQUIRE_RESOURCES = 268435461;
export const MFT_MESSAGE_NOTIFY_EVENT = 268435462;
export const MFT_MESSAGE_COMMAND_SET_OUTPUT_STREAM_STATE = 268435463;
export const MFT_MESSAGE_COMMAND_FLUSH_OUTPUT_STREAM = 268435464;
export const MFT_MESSAGE_COMMAND_MARKER = 536870912;
export const DeviceStreamState_Stop = 0;
export const DeviceStreamState_Pause = 1;
export const DeviceStreamState_Run = 2;
export const DeviceStreamState_Disabled = 3;
export const MF3DVideoOutputType_BaseView = 0;
export const MF3DVideoOutputType_Stereo = 1;
export const MFT_AUDIO_DECODER_DEGRADATION_REASON_NONE = 0;
export const MFT_AUDIO_DECODER_DEGRADATION_REASON_LICENSING_REQUIREMENT = 1;
export const MFT_AUDIO_DECODER_DEGRADATION_TYPE_NONE = 0;
export const MFT_AUDIO_DECODER_DEGRADATION_TYPE_DOWNMIX2CHANNEL = 1;
export const MFT_AUDIO_DECODER_DEGRADATION_TYPE_DOWNMIX6CHANNEL = 2;
export const MFT_AUDIO_DECODER_DEGRADATION_TYPE_DOWNMIX8CHANNEL = 3;
export const MFSESSION_SETTOPOLOGY_IMMEDIATE = 1;
export const MFSESSION_SETTOPOLOGY_NORESOLUTION = 2;
export const MFSESSION_SETTOPOLOGY_CLEAR_CURRENT = 4;
export const MFSESSION_GETFULLTOPOLOGY_CURRENT = 1;
export const MFPMPSESSION_UNPROTECTED_PROCESS = 1;
export const MFPMPSESSION_IN_PROCESS = 2;
export const MF_OBJECT_MEDIASOURCE = 0;
export const MF_OBJECT_BYTESTREAM = 1;
export const MF_OBJECT_INVALID = 2;
export const MF_RESOLUTION_MEDIASOURCE = 1;
export const MF_RESOLUTION_BYTESTREAM = 2;
export const MF_RESOLUTION_CONTENT_DOES_NOT_HAVE_TO_MATCH_EXTENSION_OR_MIME_TYPE = 16;
export const MF_RESOLUTION_KEEP_BYTE_STREAM_ALIVE_ON_FAIL = 32;
export const MF_RESOLUTION_DISABLE_LOCAL_PLUGINS = 64;
export const MF_RESOLUTION_PLUGIN_CONTROL_POLICY_APPROVED_ONLY = 128;
export const MF_RESOLUTION_PLUGIN_CONTROL_POLICY_WEB_ONLY = 256;
export const MF_RESOLUTION_PLUGIN_CONTROL_POLICY_WEB_ONLY_EDGEMODE = 512;
export const MF_RESOLUTION_ENABLE_STORE_PLUGINS = 1024;
export const MF_RESOLUTION_READ = 65536;
export const MF_RESOLUTION_WRITE = 131072;
export const MF_CONNECT_DIRECT = 0;
export const MF_CONNECT_ALLOW_CONVERTER = 1;
export const MF_CONNECT_ALLOW_DECODER = 3;
export const MF_CONNECT_RESOLVE_INDEPENDENT_OUTPUTTYPES = 4;
export const MF_CONNECT_AS_OPTIONAL = 65536;
export const MF_CONNECT_AS_OPTIONAL_BRANCH = 131072;
export const MF_TOPOLOGY_RESOLUTION_SUCCEEDED = 0;
export const MF_OPTIONAL_NODE_REJECTED_MEDIA_TYPE = 1;
export const MF_OPTIONAL_NODE_REJECTED_PROTECTED_PROCESS = 2;
export const MFMEDIASOURCE_IS_LIVE = 1;
export const MFMEDIASOURCE_CAN_SEEK = 2;
export const MFMEDIASOURCE_CAN_PAUSE = 4;
export const MFMEDIASOURCE_HAS_SLOW_SEEK = 8;
export const MFMEDIASOURCE_HAS_MULTIPLE_PRESENTATIONS = 16;
export const MFMEDIASOURCE_CAN_SKIPFORWARD = 32;
export const MFMEDIASOURCE_CAN_SKIPBACKWARD = 64;
export const MFMEDIASOURCE_DOES_NOT_USE_NETWORK = 128;
export const MFSTREAMSINK_MARKER_DEFAULT = 0;
export const MFSTREAMSINK_MARKER_ENDOFSEGMENT = 1;
export const MFSTREAMSINK_MARKER_TICK = 2;
export const MFSTREAMSINK_MARKER_EVENT = 3;
export const ROTATION_NONE = 0;
export const ROTATION_NORMAL = 1;
export const MIRROR_NONE = 0;
export const MIRROR_HORIZONTAL = 1;
export const MIRROR_VERTICAL = 2;
export const MFVideoSphericalFormat_Unsupported = 0;
export const MFVideoSphericalFormat_Equirectangular = 1;
export const MFVideoSphericalFormat_CubeMap = 2;
export const MFVideoSphericalFormat_3DMesh = 3;
export const MFVideoSphericalProjectionMode_Spherical = 0;
export const MFVideoSphericalProjectionMode_Flat = 1;
export const MFTOPOLOGY_DXVA_DEFAULT = 0;
export const MFTOPOLOGY_DXVA_NONE = 1;
export const MFTOPOLOGY_DXVA_FULL = 2;
export const MFTOPOLOGY_HWMODE_SOFTWARE_ONLY = 0;
export const MFTOPOLOGY_HWMODE_USE_HARDWARE = 1;
export const MFTOPOLOGY_HWMODE_USE_ONLY_HARDWARE = 2;
export const MF_TOPOLOGY_OUTPUT_NODE = 0;
export const MF_TOPOLOGY_SOURCESTREAM_NODE = 1;
export const MF_TOPOLOGY_TRANSFORM_NODE = 2;
export const MF_TOPOLOGY_TEE_NODE = 3;
export const MF_TOPOLOGY_MAX = `-1`;
export const MF_TOPONODE_FLUSH_ALWAYS = 0;
export const MF_TOPONODE_FLUSH_SEEK = 1;
export const MF_TOPONODE_FLUSH_NEVER = 2;
export const MF_TOPONODE_DRAIN_DEFAULT = 0;
export const MF_TOPONODE_DRAIN_ALWAYS = 1;
export const MF_TOPONODE_DRAIN_NEVER = 2;
export const MFCLOCK_CHARACTERISTICS_FLAG_FREQUENCY_10MHZ = 2;
export const MFCLOCK_CHARACTERISTICS_FLAG_ALWAYS_RUNNING = 4;
export const MFCLOCK_CHARACTERISTICS_FLAG_IS_SYSTEM_CLOCK = 8;
export const MFCLOCK_STATE_INVALID = 0;
export const MFCLOCK_STATE_RUNNING = 1;
export const MFCLOCK_STATE_STOPPED = 2;
export const MFCLOCK_STATE_PAUSED = 3;
export const MFCLOCK_RELATIONAL_FLAG_JITTER_NEVER_AHEAD = 1;
export const MFTIMER_RELATIVE = 1;
export const MF_ACTIVATE_CUSTOM_MIXER_ALLOWFAIL = 1;
export const MF_ACTIVATE_CUSTOM_PRESENTER_ALLOWFAIL = 1;
export const MFSHUTDOWN_INITIATED = 0;
export const MFSHUTDOWN_COMPLETED = 1;
export const MF_LICENSE_URL_UNTRUSTED = 0;
export const MF_LICENSE_URL_TRUSTED = 1;
export const MF_LICENSE_URL_TAMPERED = 2;
export const MFRATE_FORWARD = 0;
export const MFRATE_REVERSE = 1;
export const MF_DROP_MODE_NONE = 0;
export const MF_DROP_MODE_1 = 1;
export const MF_DROP_MODE_2 = 2;
export const MF_DROP_MODE_3 = 3;
export const MF_DROP_MODE_4 = 4;
export const MF_DROP_MODE_5 = 5;
export const MF_NUM_DROP_MODES = 6;
export const MF_QUALITY_NORMAL = 0;
export const MF_QUALITY_NORMAL_MINUS_1 = 1;
export const MF_QUALITY_NORMAL_MINUS_2 = 2;
export const MF_QUALITY_NORMAL_MINUS_3 = 3;
export const MF_QUALITY_NORMAL_MINUS_4 = 4;
export const MF_QUALITY_NORMAL_MINUS_5 = 5;
export const MF_NUM_QUALITY_LEVELS = 6;
export const MF_QUALITY_CANNOT_KEEP_UP = 1;
export const SequencerTopologyFlags_Last = 1;
export const REQUIRE_PROMPT = 1;
export const REQUIRE_SAVE_SELECTED = 2;
export const MFNET_CREDENTIAL_SAVE = 1;
export const MFNET_CREDENTIAL_DONT_CACHE = 2;
export const MFNET_CREDENTIAL_ALLOW_CLEAR_TEXT = 4;
export const MFNET_AUTHENTICATION_PROXY = 1;
export const MFNET_AUTHENTICATION_CLEAR_TEXT = 2;
export const MFNET_AUTHENTICATION_LOGGED_ON_USER = 4;
export const MFNETSOURCE_UNDEFINED = 0;
export const MFNETSOURCE_HTTP = 1;
export const MFNETSOURCE_RTSP = 2;
export const MFNETSOURCE_FILE = 3;
export const MFNETSOURCE_MULTICAST = 4;
export const MFNETSOURCE_UDP = 0;
export const MFNETSOURCE_TCP = 1;
export const MFNETSOURCE_CACHE_UNAVAILABLE = 0;
export const MFNETSOURCE_CACHE_ACTIVE_WRITING = 1;
export const MFNETSOURCE_CACHE_ACTIVE_COMPLETE = 2;
export const MFNETSOURCE_RECVPACKETS_ID = 0;
export const MFNETSOURCE_LOSTPACKETS_ID = 1;
export const MFNETSOURCE_RESENDSREQUESTED_ID = 2;
export const MFNETSOURCE_RESENDSRECEIVED_ID = 3;
export const MFNETSOURCE_RECOVEREDBYECCPACKETS_ID = 4;
export const MFNETSOURCE_RECOVEREDBYRTXPACKETS_ID = 5;
export const MFNETSOURCE_OUTPACKETS_ID = 6;
export const MFNETSOURCE_RECVRATE_ID = 7;
export const MFNETSOURCE_AVGBANDWIDTHBPS_ID = 8;
export const MFNETSOURCE_BYTESRECEIVED_ID = 9;
export const MFNETSOURCE_PROTOCOL_ID = 10;
export const MFNETSOURCE_TRANSPORT_ID = 11;
export const MFNETSOURCE_CACHE_STATE_ID = 12;
export const MFNETSOURCE_LINKBANDWIDTH_ID = 13;
export const MFNETSOURCE_CONTENTBITRATE_ID = 14;
export const MFNETSOURCE_SPEEDFACTOR_ID = 15;
export const MFNETSOURCE_BUFFERSIZE_ID = 16;
export const MFNETSOURCE_BUFFERPROGRESS_ID = 17;
export const MFNETSOURCE_LASTBWSWITCHTS_ID = 18;
export const MFNETSOURCE_SEEKRANGESTART_ID = 19;
export const MFNETSOURCE_SEEKRANGEEND_ID = 20;
export const MFNETSOURCE_BUFFERINGCOUNT_ID = 21;
export const MFNETSOURCE_INCORRECTLYSIGNEDPACKETS_ID = 22;
export const MFNETSOURCE_SIGNEDSESSION_ID = 23;
export const MFNETSOURCE_MAXBITRATE_ID = 24;
export const MFNETSOURCE_RECEPTION_QUALITY_ID = 25;
export const MFNETSOURCE_RECOVEREDPACKETS_ID = 26;
export const MFNETSOURCE_VBR_ID = 27;
export const MFNETSOURCE_DOWNLOADPROGRESS_ID = 28;
export const MFNETSOURCE_UNPREDEFINEDPROTOCOLNAME_ID = 29;
export const MFNET_PROXYSETTING_NONE = 0;
export const MFNET_PROXYSETTING_MANUAL = 1;
export const MFNET_PROXYSETTING_AUTO = 2;
export const MFNET_PROXYSETTING_BROWSER = 3;
export const PEACTION_NO = 0;
export const PEACTION_PLAY = 1;
export const PEACTION_COPY = 2;
export const PEACTION_EXPORT = 3;
export const PEACTION_EXTRACT = 4;
export const PEACTION_RESERVED1 = 5;
export const PEACTION_RESERVED2 = 6;
export const PEACTION_RESERVED3 = 7;
export const PEACTION_LAST = 7;
export const MF_OPM_CGMSA_OFF = 0;
export const MF_OPM_CGMSA_COPY_FREELY = 1;
export const MF_OPM_CGMSA_COPY_NO_MORE = 2;
export const MF_OPM_CGMSA_COPY_ONE_GENERATION = 3;
export const MF_OPM_CGMSA_COPY_NEVER = 4;
export const MF_OPM_CGMSA_REDISTRIBUTION_CONTROL_REQUIRED = 8;
export const MF_OPM_ACP_OFF = 0;
export const MF_OPM_ACP_LEVEL_ONE = 1;
export const MF_OPM_ACP_LEVEL_TWO = 2;
export const MF_OPM_ACP_LEVEL_THREE = 3;
export const MF_OPM_ACP_FORCE_ULONG = 2147483647;
export const MFaudioConstrictionOff = 0;
export const MFaudioConstriction48_16 = 1;
export const MFaudioConstriction44_16 = 2;
export const MFaudioConstriction14_14 = 3;
export const MFaudioConstrictionMute = 4;
export const SAMPLE_PROTECTION_VERSION_NO = 0;
export const SAMPLE_PROTECTION_VERSION_BASIC_LOKI = 1;
export const SAMPLE_PROTECTION_VERSION_SCATTER = 2;
export const SAMPLE_PROTECTION_VERSION_RC4 = 3;
export const SAMPLE_PROTECTION_VERSION_AES128CTR = 4;
export const MF_TRANSCODE_TOPOLOGYMODE_SOFTWARE_ONLY = 0;
export const MF_TRANSCODE_TOPOLOGYMODE_HARDWARE_ALLOWED = 1;
export const MF_TRANSCODE_ADJUST_PROFILE_DEFAULT = 0;
export const MF_TRANSCODE_ADJUST_PROFILE_USE_SOURCE_ATTRIBUTES = 1;
export const MF_VIDEO_PROCESSOR_ALGORITHM_DEFAULT = 0;
export const MF_VIDEO_PROCESSOR_ALGORITHM_MRF_CRF_444 = 1;
export const MF_MEDIAKEYSESSION_TYPE_TEMPORARY = 0;
export const MF_MEDIAKEYSESSION_TYPE_PERSISTENT_LICENSE = 1;
export const MF_MEDIAKEYSESSION_TYPE_PERSISTENT_RELEASE_MESSAGE = 2;
export const MF_MEDIAKEYSESSION_TYPE_PERSISTENT_USAGE_RECORD = 3;
export const MF_MEDIAKEY_STATUS_USABLE = 0;
export const MF_MEDIAKEY_STATUS_EXPIRED = 1;
export const MF_MEDIAKEY_STATUS_OUTPUT_DOWNSCALED = 2;
export const MF_MEDIAKEY_STATUS_OUTPUT_NOT_ALLOWED = 3;
export const MF_MEDIAKEY_STATUS_STATUS_PENDING = 4;
export const MF_MEDIAKEY_STATUS_INTERNAL_ERROR = 5;
export const MF_MEDIAKEY_STATUS_RELEASED = 6;
export const MF_MEDIAKEY_STATUS_OUTPUT_RESTRICTED = 7;
export const MF_MEDIAKEYSESSION_MESSAGETYPE_LICENSE_REQUEST = 0;
export const MF_MEDIAKEYSESSION_MESSAGETYPE_LICENSE_RENEWAL = 1;
export const MF_MEDIAKEYSESSION_MESSAGETYPE_LICENSE_RELEASE = 2;
export const MF_MEDIAKEYSESSION_MESSAGETYPE_INDIVIDUALIZATION_REQUEST = 3;
export const MF_CROSS_ORIGIN_POLICY_NONE = 0;
export const MF_CROSS_ORIGIN_POLICY_ANONYMOUS = 1;
export const MF_CROSS_ORIGIN_POLICY_USE_CREDENTIALS = 2;
export const MFSensorDeviceType_Unknown = 0;
export const MFSensorDeviceType_Device = 1;
export const MFSensorDeviceType_MediaSource = 2;
export const MFSensorDeviceType_FrameProvider = 3;
export const MFSensorDeviceType_SensorTransform = 4;
export const MFSensorStreamType_Unknown = 0;
export const MFSensorStreamType_Input = 1;
export const MFSensorStreamType_Output = 2;
export const MFSensorDeviceMode_Controller = 0;
export const MFSensorDeviceMode_Shared = 1;
export const MFCameraIntrinsic_DistortionModelType_6KT = 0;
export const MFCameraIntrinsic_DistortionModelType_ArcTan = 1;
export const MFCameraOcclusionState_Open = 0;
export const MFCameraOcclusionState_OccludedByLid = 1;
export const MFCameraOcclusionState_OccludedByCameraHardware = 2;
export const MFSampleAllocatorUsage_UsesProvidedAllocator = 0;
export const MFSampleAllocatorUsage_UsesCustomAllocator = 1;
export const MFSampleAllocatorUsage_DoesNotAllocate = 2;
export const MFASF_INDEXER_WRITE_NEW_INDEX = 1;
export const MFASF_INDEXER_READ_FOR_REVERSEPLAYBACK = 2;
export const MFASF_INDEXER_WRITE_FOR_LIVEREAD = 4;
export const MFASF_SPLITTER_REVERSE = 1;
export const MFASF_SPLITTER_WMDRM = 2;
export const ASF_STATUSFLAGS_INCOMPLETE = 1;
export const ASF_STATUSFLAGS_NONFATAL_ERROR = 2;
export const MFASF_MULTIPLEXER_AUTOADJUST_BITRATE = 1;
export const MFASF_STREAMSELECTOR_DISABLE_THINNING = 1;
export const MFASF_STREAMSELECTOR_USE_AVERAGE_BITRATE = 2;
export const ASF_STATUS_NOTSELECTED = 0;
export const ASF_STATUS_CLEANPOINTSONLY = 1;
export const ASF_STATUS_ALLDATAUNITS = 2;
export const MFSINK_WMDRMACTION_UNDEFINED = 0;
export const MFSINK_WMDRMACTION_ENCODE = 1;
export const MFSINK_WMDRMACTION_TRANSCODE = 2;
export const MFSINK_WMDRMACTION_TRANSCRYPT = 3;
export const MFSINK_WMDRMACTION_LAST = 3;
export const MF_CAPTURE_ENGINE_DEVICE_TYPE_AUDIO = 0;
export const MF_CAPTURE_ENGINE_DEVICE_TYPE_VIDEO = 1;
export const MF_CAPTURE_ENGINE_SINK_TYPE_RECORD = 0;
export const MF_CAPTURE_ENGINE_SINK_TYPE_PREVIEW = 1;
export const MF_CAPTURE_ENGINE_SINK_TYPE_PHOTO = 2;
export const MF_CAPTURE_ENGINE_PREFERRED_SOURCE_STREAM_FOR_VIDEO_PREVIEW = 4294967290;
export const MF_CAPTURE_ENGINE_PREFERRED_SOURCE_STREAM_FOR_VIDEO_RECORD = 4294967289;
export const MF_CAPTURE_ENGINE_PREFERRED_SOURCE_STREAM_FOR_PHOTO = 4294967288;
export const MF_CAPTURE_ENGINE_PREFERRED_SOURCE_STREAM_FOR_AUDIO = 4294967287;
export const MF_CAPTURE_ENGINE_PREFERRED_SOURCE_STREAM_FOR_METADATA = 4294967286;
export const MF_CAPTURE_ENGINE_MEDIASOURCE = 4294967295;
export const MF_CAPTURE_ENGINE_STREAM_CATEGORY_VIDEO_PREVIEW = 0;
export const MF_CAPTURE_ENGINE_STREAM_CATEGORY_VIDEO_CAPTURE = 1;
export const MF_CAPTURE_ENGINE_STREAM_CATEGORY_PHOTO_INDEPENDENT = 2;
export const MF_CAPTURE_ENGINE_STREAM_CATEGORY_PHOTO_DEPENDENT = 3;
export const MF_CAPTURE_ENGINE_STREAM_CATEGORY_AUDIO = 4;
export const MF_CAPTURE_ENGINE_STREAM_CATEGORY_UNSUPPORTED = 5;
export const MF_CAPTURE_ENGINE_STREAM_CATEGORY_METADATA = 6;
export const MF_CAPTURE_ENGINE_MEDIA_CATEGORY_TYPE_OTHER = 0;
export const MF_CAPTURE_ENGINE_MEDIA_CATEGORY_TYPE_COMMUNICATIONS = 1;
export const MF_CAPTURE_ENGINE_MEDIA_CATEGORY_TYPE_MEDIA = 2;
export const MF_CAPTURE_ENGINE_MEDIA_CATEGORY_TYPE_GAMECHAT = 3;
export const MF_CAPTURE_ENGINE_MEDIA_CATEGORY_TYPE_SPEECH = 4;
export const MF_CAPTURE_ENGINE_MEDIA_CATEGORY_TYPE_FARFIELDSPEECH = 5;
export const MF_CAPTURE_ENGINE_MEDIA_CATEGORY_TYPE_UNIFORMSPEECH = 6;
export const MF_CAPTURE_ENGINE_MEDIA_CATEGORY_TYPE_VOICETYPING = 7;
export const MF_CAPTURE_ENGINE_AUDIO_PROCESSING_DEFAULT = 0;
export const MF_CAPTURE_ENGINE_AUDIO_PROCESSING_RAW = 1;
export const MF_D3D11_RESOURCE = 0;
export const MF_D3D12_RESOURCE = 1;
export const MF_STANDARD_WORKQUEUE = 0;
export const MF_WINDOW_WORKQUEUE = 1;
export const MF_MULTITHREADED_WORKQUEUE = 2;
export const MF_TOPOSTATUS_INVALID = 0;
export const MF_TOPOSTATUS_READY = 100;
export const MF_TOPOSTATUS_STARTED_SOURCE = 200;
export const MF_TOPOSTATUS_DYNAMIC_CHANGED = 210;
export const MF_TOPOSTATUS_SINK_SWITCHED = 300;
export const MF_TOPOSTATUS_ENDED = 400;
export const MF_SAMPLE_ENCRYPTION_PROTECTION_SCHEME_NONE = 0;
export const MF_SAMPLE_ENCRYPTION_PROTECTION_SCHEME_AES_CTR = 1;
export const MF_SAMPLE_ENCRYPTION_PROTECTION_SCHEME_AES_CBC = 2;
export const MFT_ENUM_FLAG_SYNCMFT = 1;
export const MFT_ENUM_FLAG_ASYNCMFT = 2;
export const MFT_ENUM_FLAG_HARDWARE = 4;
export const MFT_ENUM_FLAG_FIELDOFUSE = 8;
export const MFT_ENUM_FLAG_LOCALMFT = 16;
export const MFT_ENUM_FLAG_TRANSCODE_ONLY = 32;
export const MFT_ENUM_FLAG_SORTANDFILTER = 64;
export const MFT_ENUM_FLAG_SORTANDFILTER_APPROVED_ONLY = 192;
export const MFT_ENUM_FLAG_SORTANDFILTER_WEB_ONLY = 320;
export const MFT_ENUM_FLAG_SORTANDFILTER_WEB_ONLY_EDGEMODE = 576;
export const MFT_ENUM_FLAG_UNTRUSTED_STOREMFT = 1024;
export const MFT_ENUM_FLAG_ALL = 63;
export const MFFrameSourceTypes_Color = 1;
export const MFFrameSourceTypes_Infrared = 2;
export const MFFrameSourceTypes_Depth = 4;
export const MFFrameSourceTypes_Image = 8;
export const MFFrameSourceTypes_Custom = 128;
export const MFVideo3DSampleFormat_BaseView = 0;
export const MFVideo3DSampleFormat_MultiView = 1;
export const MFVideo3DSampleFormat_Packed_LeftRight = 2;
export const MFVideo3DSampleFormat_Packed_TopBottom = 3;
export const MFSampleExtension_3DVideo_MultiView = 1;
export const MFSampleExtension_3DVideo_Packed = 0;
export const MFVideoRotationFormat_0 = 0;
export const MFVideoRotationFormat_90 = 90;
export const MFVideoRotationFormat_180 = 180;
export const MFVideoRotationFormat_270 = 270;
export const DistanceToFocalPlane = 0;
export const DistanceToOpticalCenter = 1;
export const MF_DECODE_UNIT_NAL = 0;
export const MF_DECODE_UNIT_SEI = 1;
export const MFVideoDRMFlag_None = 0;
export const MFVideoDRMFlag_AnalogProtected = 1;
export const MFVideoDRMFlag_DigitallyProtected = 2;
export const MFVideoPadFlag_PAD_TO_None = 0;
export const MFVideoPadFlag_PAD_TO_4x3 = 1;
export const MFVideoPadFlag_PAD_TO_16x9 = 2;
export const MFVideoSrcContentHintFlag_None = 0;
export const MFVideoSrcContentHintFlag_16x9 = 1;
export const MFVideoSrcContentHintFlag_235_1 = 2;
export const MFWaveFormatExConvertFlag_Normal = 0;
export const MFWaveFormatExConvertFlag_ForceExtensible = 1;
export const eAllocationTypeDynamic = 0;
export const eAllocationTypeRT = 1;
export const eAllocationTypePageable = 2;
export const eAllocationTypeIgnore = 3;
export const MF_MEDIA_ENGINE_ERR_NOERROR = 0;
export const MF_MEDIA_ENGINE_ERR_ABORTED = 1;
export const MF_MEDIA_ENGINE_ERR_NETWORK = 2;
export const MF_MEDIA_ENGINE_ERR_DECODE = 3;
export const MF_MEDIA_ENGINE_ERR_SRC_NOT_SUPPORTED = 4;
export const MF_MEDIA_ENGINE_ERR_ENCRYPTED = 5;
export const MF_MEDIA_ENGINE_EVENT_LOADSTART = 1;
export const MF_MEDIA_ENGINE_EVENT_PROGRESS = 2;
export const MF_MEDIA_ENGINE_EVENT_SUSPEND = 3;
export const MF_MEDIA_ENGINE_EVENT_ABORT = 4;
export const MF_MEDIA_ENGINE_EVENT_ERROR = 5;
export const MF_MEDIA_ENGINE_EVENT_EMPTIED = 6;
export const MF_MEDIA_ENGINE_EVENT_STALLED = 7;
export const MF_MEDIA_ENGINE_EVENT_PLAY = 8;
export const MF_MEDIA_ENGINE_EVENT_PAUSE = 9;
export const MF_MEDIA_ENGINE_EVENT_LOADEDMETADATA = 10;
export const MF_MEDIA_ENGINE_EVENT_LOADEDDATA = 11;
export const MF_MEDIA_ENGINE_EVENT_WAITING = 12;
export const MF_MEDIA_ENGINE_EVENT_PLAYING = 13;
export const MF_MEDIA_ENGINE_EVENT_CANPLAY = 14;
export const MF_MEDIA_ENGINE_EVENT_CANPLAYTHROUGH = 15;
export const MF_MEDIA_ENGINE_EVENT_SEEKING = 16;
export const MF_MEDIA_ENGINE_EVENT_SEEKED = 17;
export const MF_MEDIA_ENGINE_EVENT_TIMEUPDATE = 18;
export const MF_MEDIA_ENGINE_EVENT_ENDED = 19;
export const MF_MEDIA_ENGINE_EVENT_RATECHANGE = 20;
export const MF_MEDIA_ENGINE_EVENT_DURATIONCHANGE = 21;
export const MF_MEDIA_ENGINE_EVENT_VOLUMECHANGE = 22;
export const MF_MEDIA_ENGINE_EVENT_FORMATCHANGE = 1000;
export const MF_MEDIA_ENGINE_EVENT_PURGEQUEUEDEVENTS = 1001;
export const MF_MEDIA_ENGINE_EVENT_TIMELINE_MARKER = 1002;
export const MF_MEDIA_ENGINE_EVENT_BALANCECHANGE = 1003;
export const MF_MEDIA_ENGINE_EVENT_DOWNLOADCOMPLETE = 1004;
export const MF_MEDIA_ENGINE_EVENT_BUFFERINGSTARTED = 1005;
export const MF_MEDIA_ENGINE_EVENT_BUFFERINGENDED = 1006;
export const MF_MEDIA_ENGINE_EVENT_FRAMESTEPCOMPLETED = 1007;
export const MF_MEDIA_ENGINE_EVENT_NOTIFYSTABLESTATE = 1008;
export const MF_MEDIA_ENGINE_EVENT_FIRSTFRAMEREADY = 1009;
export const MF_MEDIA_ENGINE_EVENT_TRACKSCHANGE = 1010;
export const MF_MEDIA_ENGINE_EVENT_OPMINFO = 1011;
export const MF_MEDIA_ENGINE_EVENT_RESOURCELOST = 1012;
export const MF_MEDIA_ENGINE_EVENT_DELAYLOADEVENT_CHANGED = 1013;
export const MF_MEDIA_ENGINE_EVENT_STREAMRENDERINGERROR = 1014;
export const MF_MEDIA_ENGINE_EVENT_SUPPORTEDRATES_CHANGED = 1015;
export const MF_MEDIA_ENGINE_EVENT_AUDIOENDPOINTCHANGE = 1016;
export const MF_MEDIA_ENGINE_NETWORK_EMPTY = 0;
export const MF_MEDIA_ENGINE_NETWORK_IDLE = 1;
export const MF_MEDIA_ENGINE_NETWORK_LOADING = 2;
export const MF_MEDIA_ENGINE_NETWORK_NO_SOURCE = 3;
export const MF_MEDIA_ENGINE_READY_HAVE_NOTHING = 0;
export const MF_MEDIA_ENGINE_READY_HAVE_METADATA = 1;
export const MF_MEDIA_ENGINE_READY_HAVE_CURRENT_DATA = 2;
export const MF_MEDIA_ENGINE_READY_HAVE_FUTURE_DATA = 3;
export const MF_MEDIA_ENGINE_READY_HAVE_ENOUGH_DATA = 4;
export const MF_MEDIA_ENGINE_CANPLAY_NOT_SUPPORTED = 0;
export const MF_MEDIA_ENGINE_CANPLAY_MAYBE = 1;
export const MF_MEDIA_ENGINE_CANPLAY_PROBABLY = 2;
export const MF_MEDIA_ENGINE_PRELOAD_MISSING = 0;
export const MF_MEDIA_ENGINE_PRELOAD_EMPTY = 1;
export const MF_MEDIA_ENGINE_PRELOAD_NONE = 2;
export const MF_MEDIA_ENGINE_PRELOAD_METADATA = 3;
export const MF_MEDIA_ENGINE_PRELOAD_AUTOMATIC = 4;
export const MF_MEDIA_ENGINE_S3D_PACKING_MODE_NONE = 0;
export const MF_MEDIA_ENGINE_S3D_PACKING_MODE_SIDE_BY_SIDE = 1;
export const MF_MEDIA_ENGINE_S3D_PACKING_MODE_TOP_BOTTOM = 2;
export const MF_MEDIA_ENGINE_STATISTIC_FRAMES_RENDERED = 0;
export const MF_MEDIA_ENGINE_STATISTIC_FRAMES_DROPPED = 1;
export const MF_MEDIA_ENGINE_STATISTIC_BYTES_DOWNLOADED = 2;
export const MF_MEDIA_ENGINE_STATISTIC_BUFFER_PROGRESS = 3;
export const MF_MEDIA_ENGINE_STATISTIC_FRAMES_PER_SECOND = 4;
export const MF_MEDIA_ENGINE_STATISTIC_PLAYBACK_JITTER = 5;
export const MF_MEDIA_ENGINE_STATISTIC_FRAMES_CORRUPTED = 6;
export const MF_MEDIA_ENGINE_STATISTIC_TOTAL_FRAME_DELAY = 7;
export const MF_MEDIA_ENGINE_SEEK_MODE_NORMAL = 0;
export const MF_MEDIA_ENGINE_SEEK_MODE_APPROXIMATE = 1;
export const MF_MEDIA_ENGINE_EXTENSION_TYPE_MEDIASOURCE = 0;
export const MF_MEDIA_ENGINE_EXTENSION_TYPE_BYTESTREAM = 1;
export const MF_MEDIA_ENGINE_FRAME_PROTECTION_FLAG_PROTECTED = 1;
export const MF_MEDIA_ENGINE_FRAME_PROTECTION_FLAG_REQUIRES_SURFACE_PROTECTION = 2;
export const MF_MEDIA_ENGINE_FRAME_PROTECTION_FLAG_REQUIRES_ANTI_SCREEN_SCRAPE_PROTECTION = 4;
export const MF_MSE_VP9_SUPPORT_DEFAULT = 0;
export const MF_MSE_VP9_SUPPORT_ON = 1;
export const MF_MSE_VP9_SUPPORT_OFF = 2;
export const MF_MSE_OPUS_SUPPORT_ON = 0;
export const MF_MSE_OPUS_SUPPORT_OFF = 1;
export const MF_MSE_APPEND_MODE_SEGMENTS = 0;
export const MF_MSE_APPEND_MODE_SEQUENCE = 1;
export const MF_MSE_READY_CLOSED = 1;
export const MF_MSE_READY_OPEN = 2;
export const MF_MSE_READY_ENDED = 3;
export const MF_MSE_ERROR_NOERROR = 0;
export const MF_MSE_ERROR_NETWORK = 1;
export const MF_MSE_ERROR_DECODE = 2;
export const MF_MSE_ERROR_UNKNOWN_ERROR = 3;
export const MF_MEDIAENGINE_KEYERR_UNKNOWN = 1;
export const MF_MEDIAENGINE_KEYERR_CLIENT = 2;
export const MF_MEDIAENGINE_KEYERR_SERVICE = 3;
export const MF_MEDIAENGINE_KEYERR_OUTPUT = 4;
export const MF_MEDIAENGINE_KEYERR_HARDWARECHANGE = 5;
export const MF_MEDIAENGINE_KEYERR_DOMAIN = 6;
export const MF_HDCP_STATUS_ON = 0;
export const MF_HDCP_STATUS_OFF = 1;
export const MF_HDCP_STATUS_ON_WITH_TYPE_ENFORCEMENT = 2;
export const MF_MEDIA_ENGINE_OPM_NOT_REQUESTED = 0;
export const MF_MEDIA_ENGINE_OPM_ESTABLISHED = 1;
export const MF_MEDIA_ENGINE_OPM_FAILED_VM = 2;
export const MF_MEDIA_ENGINE_OPM_FAILED_BDA = 3;
export const MF_MEDIA_ENGINE_OPM_FAILED_UNSIGNED_DRIVER = 4;
export const MF_MEDIA_ENGINE_OPM_FAILED = 5;
export const MF_MEDIA_ENGINE_AUDIOONLY = 1;
export const MF_MEDIA_ENGINE_WAITFORSTABLE_STATE = 2;
export const MF_MEDIA_ENGINE_FORCEMUTE = 4;
export const MF_MEDIA_ENGINE_REAL_TIME_MODE = 8;
export const MF_MEDIA_ENGINE_DISABLE_LOCAL_PLUGINS = 16;
export const MF_MEDIA_ENGINE_CREATEFLAGS_MASK = 31;
export const MF_MEDIA_ENGINE_ENABLE_PROTECTED_CONTENT = 1;
export const MF_MEDIA_ENGINE_USE_PMP_FOR_ALL_CONTENT = 2;
export const MF_MEDIA_ENGINE_USE_UNPROTECTED_PMP = 4;
export const MF_TIMED_TEXT_TRACK_KIND_UNKNOWN = 0;
export const MF_TIMED_TEXT_TRACK_KIND_SUBTITLES = 1;
export const MF_TIMED_TEXT_TRACK_KIND_CAPTIONS = 2;
export const MF_TIMED_TEXT_TRACK_KIND_METADATA = 3;
export const MF_TIMED_TEXT_UNIT_TYPE_PIXELS = 0;
export const MF_TIMED_TEXT_UNIT_TYPE_PERCENTAGE = 1;
export const MF_TIMED_TEXT_FONT_STYLE_NORMAL = 0;
export const MF_TIMED_TEXT_FONT_STYLE_OBLIQUE = 1;
export const MF_TIMED_TEXT_FONT_STYLE_ITALIC = 2;
export const MF_TIMED_TEXT_ALIGNMENT_START = 0;
export const MF_TIMED_TEXT_ALIGNMENT_END = 1;
export const MF_TIMED_TEXT_ALIGNMENT_CENTER = 2;
export const MF_TIMED_TEXT_DISPLAY_ALIGNMENT_BEFORE = 0;
export const MF_TIMED_TEXT_DISPLAY_ALIGNMENT_AFTER = 1;
export const MF_TIMED_TEXT_DISPLAY_ALIGNMENT_CENTER = 2;
export const MF_TIMED_TEXT_DECORATION_NONE = 0;
export const MF_TIMED_TEXT_DECORATION_UNDERLINE = 1;
export const MF_TIMED_TEXT_DECORATION_LINE_THROUGH = 2;
export const MF_TIMED_TEXT_DECORATION_OVERLINE = 4;
export const MF_TIMED_TEXT_WRITING_MODE_LRTB = 0;
export const MF_TIMED_TEXT_WRITING_MODE_RLTB = 1;
export const MF_TIMED_TEXT_WRITING_MODE_TBRL = 2;
export const MF_TIMED_TEXT_WRITING_MODE_TBLR = 3;
export const MF_TIMED_TEXT_WRITING_MODE_LR = 4;
export const MF_TIMED_TEXT_WRITING_MODE_RL = 5;
export const MF_TIMED_TEXT_WRITING_MODE_TB = 6;
export const MF_TIMED_TEXT_SCROLL_MODE_POP_ON = 0;
export const MF_TIMED_TEXT_SCROLL_MODE_ROLL_UP = 1;
export const MF_TIMED_TEXT_ERROR_CODE_NOERROR = 0;
export const MF_TIMED_TEXT_ERROR_CODE_FATAL = 1;
export const MF_TIMED_TEXT_ERROR_CODE_DATA_FORMAT = 2;
export const MF_TIMED_TEXT_ERROR_CODE_NETWORK = 3;
export const MF_TIMED_TEXT_ERROR_CODE_INTERNAL = 4;
export const MF_TIMED_TEXT_CUE_EVENT_ACTIVE = 0;
export const MF_TIMED_TEXT_CUE_EVENT_INACTIVE = 1;
export const MF_TIMED_TEXT_CUE_EVENT_CLEAR = 2;
export const MF_TIMED_TEXT_TRACK_READY_STATE_NONE = 0;
export const MF_TIMED_TEXT_TRACK_READY_STATE_LOADING = 1;
export const MF_TIMED_TEXT_TRACK_READY_STATE_LOADED = 2;
export const MF_TIMED_TEXT_TRACK_READY_STATE_ERROR = 3;
export const MF_TIMED_TEXT_RUBY_POSITION_BEFORE = 0;
export const MF_TIMED_TEXT_RUBY_POSITION_AFTER = 1;
export const MF_TIMED_TEXT_RUBY_POSITION_OUTSIDE = 2;
export const MF_TIMED_TEXT_RUBY_ALIGN_CENTER = 0;
export const MF_TIMED_TEXT_RUBY_ALIGN_START = 1;
export const MF_TIMED_TEXT_RUBY_ALIGN_END = 2;
export const MF_TIMED_TEXT_RUBY_ALIGN_SPACEAROUND = 3;
export const MF_TIMED_TEXT_RUBY_ALIGN_SPACEBETWEEN = 4;
export const MF_TIMED_TEXT_RUBY_ALIGN_WITHBASE = 5;
export const MF_TIMED_TEXT_RUBY_RESERVE_NONE = 0;
export const MF_TIMED_TEXT_RUBY_RESERVE_BEFORE = 1;
export const MF_TIMED_TEXT_RUBY_RESERVE_AFTER = 2;
export const MF_TIMED_TEXT_RUBY_RESERVE_BOTH = 3;
export const MF_TIMED_TEXT_RUBY_RESERVE_OUTSIDE = 4;
export const MF_TIMED_TEXT_BOUTEN_TYPE_NONE = 0;
export const MF_TIMED_TEXT_BOUTEN_TYPE_AUTO = 1;
export const MF_TIMED_TEXT_BOUTEN_TYPE_FILLEDCIRCLE = 2;
export const MF_TIMED_TEXT_BOUTEN_TYPE_OPENCIRCLE = 3;
export const MF_TIMED_TEXT_BOUTEN_TYPE_FILLEDDOT = 4;
export const MF_TIMED_TEXT_BOUTEN_TYPE_OPENDOT = 5;
export const MF_TIMED_TEXT_BOUTEN_TYPE_FILLEDSESAME = 6;
export const MF_TIMED_TEXT_BOUTEN_TYPE_OPENSESAME = 7;
export const MF_TIMED_TEXT_BOUTEN_POSITION_BEFORE = 0;
export const MF_TIMED_TEXT_BOUTEN_POSITION_AFTER = 1;
export const MF_TIMED_TEXT_BOUTEN_POSITION_OUTSIDE = 2;
export const MF_MEDIA_ENGINE_STREAMTYPE_FAILED_UNKNOWN = 0;
export const MF_MEDIA_ENGINE_STREAMTYPE_FAILED_AUDIO = 1;
export const MF_MEDIA_ENGINE_STREAMTYPE_FAILED_VIDEO = 2;
export const MF_MEDIAKEYS_REQUIREMENT_REQUIRED = 1;
export const MF_MEDIAKEYS_REQUIREMENT_OPTIONAL = 2;
export const MF_MEDIAKEYS_REQUIREMENT_NOT_ALLOWED = 3;
export const MF_SOURCE_READERF_ERROR = 1;
export const MF_SOURCE_READERF_ENDOFSTREAM = 2;
export const MF_SOURCE_READERF_NEWSTREAM = 4;
export const MF_SOURCE_READERF_NATIVEMEDIATYPECHANGED = 16;
export const MF_SOURCE_READERF_CURRENTMEDIATYPECHANGED = 32;
export const MF_SOURCE_READERF_STREAMTICK = 256;
export const MF_SOURCE_READERF_ALLEFFECTSREMOVED = 512;
export const MF_SOURCE_READER_CONTROLF_DRAIN = 1;
export const MF_SOURCE_READER_INVALID_STREAM_INDEX = `-1`;
export const MF_SOURCE_READER_ALL_STREAMS = `-2`;
export const MF_SOURCE_READER_ANY_STREAM = `-2`;
export const MF_SOURCE_READER_FIRST_AUDIO_STREAM = `-3`;
export const MF_SOURCE_READER_FIRST_VIDEO_STREAM = `-4`;
export const MF_SOURCE_READER_MEDIASOURCE = `-1`;
export const MF_SOURCE_READER_CURRENT_TYPE_INDEX = `-1`;
export const MF_SINK_WRITER_INVALID_STREAM_INDEX = 4294967295;
export const MF_SINK_WRITER_ALL_STREAMS = 4294967294;
export const MF_SINK_WRITER_MEDIASINK = 4294967295;
export const MFVideoARMode_None = 0;
export const MFVideoARMode_PreservePicture = 1;
export const MFVideoARMode_PreservePixel = 2;
export const MFVideoARMode_NonLinearStretch = 4;
export const MFVideoARMode_Mask = 7;
export const MFVideoRenderPrefs_DoNotRenderBorder = 1;
export const MFVideoRenderPrefs_DoNotClipToDevice = 2;
export const MFVideoRenderPrefs_AllowOutputThrottling = 4;
export const MFVideoRenderPrefs_ForceOutputThrottling = 8;
export const MFVideoRenderPrefs_ForceBatching = 16;
export const MFVideoRenderPrefs_AllowBatching = 32;
export const MFVideoRenderPrefs_ForceScaling = 64;
export const MFVideoRenderPrefs_AllowScaling = 128;
export const MFVideoRenderPrefs_DoNotRepaintOnStop = 256;
export const MFVideoRenderPrefs_Mask = 511;
export const MFVP_MESSAGE_FLUSH = 0;
export const MFVP_MESSAGE_INVALIDATEMEDIATYPE = 1;
export const MFVP_MESSAGE_PROCESSINPUTNOTIFY = 2;
export const MFVP_MESSAGE_BEGINSTREAMING = 3;
export const MFVP_MESSAGE_ENDSTREAMING = 4;
export const MFVP_MESSAGE_ENDOFSTREAM = 5;
export const MFVP_MESSAGE_STEP = 6;
export const MFVP_MESSAGE_CANCELSTEP = 7;
export const MFVideoMixPrefs_ForceHalfInterlace = 1;
export const MFVideoMixPrefs_AllowDropToHalfInterlace = 2;
export const MFVideoMixPrefs_AllowDropToBob = 4;
export const MFVideoMixPrefs_ForceBob = 8;
export const MFVideoMixPrefs_EnableRotation = 16;
export const MFVideoMixPrefs_Mask = 31;
export const EVRFilterConfigPrefs_EnableQoS = 1;
export const EVRFilterConfigPrefs_Mask = 1;
export const MF_SERVICE_LOOKUP_UPSTREAM = 0;
export const MF_SERVICE_LOOKUP_UPSTREAM_DIRECT = 1;
export const MF_SERVICE_LOOKUP_DOWNSTREAM = 2;
export const MF_SERVICE_LOOKUP_DOWNSTREAM_DIRECT = 3;
export const MF_SERVICE_LOOKUP_ALL = 4;
export const MF_SERVICE_LOOKUP_GLOBAL = 5;
export const MFP_OPTION_NONE = 0;
export const MFP_OPTION_FREE_THREADED_CALLBACK = 1;
export const MFP_OPTION_NO_MMCSS = 2;
export const MFP_OPTION_NO_REMOTE_DESKTOP_OPTIMIZATION = 4;
export const MFP_MEDIAPLAYER_STATE_EMPTY = 0;
export const MFP_MEDIAPLAYER_STATE_STOPPED = 1;
export const MFP_MEDIAPLAYER_STATE_PLAYING = 2;
export const MFP_MEDIAPLAYER_STATE_PAUSED = 3;
export const MFP_MEDIAPLAYER_STATE_SHUTDOWN = 4;
export const MFP_MEDIAITEM_IS_LIVE = 1;
export const MFP_MEDIAITEM_CAN_SEEK = 2;
export const MFP_MEDIAITEM_CAN_PAUSE = 4;
export const MFP_MEDIAITEM_HAS_SLOW_SEEK = 8;
export const MFP_CREDENTIAL_PROMPT = 1;
export const MFP_CREDENTIAL_SAVE = 2;
export const MFP_CREDENTIAL_DO_NOT_CACHE = 4;
export const MFP_CREDENTIAL_CLEAR_TEXT = 8;
export const MFP_CREDENTIAL_PROXY = 16;
export const MFP_CREDENTIAL_LOGGED_ON_USER = 32;
export const MFP_EVENT_TYPE_PLAY = 0;
export const MFP_EVENT_TYPE_PAUSE = 1;
export const MFP_EVENT_TYPE_STOP = 2;
export const MFP_EVENT_TYPE_POSITION_SET = 3;
export const MFP_EVENT_TYPE_RATE_SET = 4;
export const MFP_EVENT_TYPE_MEDIAITEM_CREATED = 5;
export const MFP_EVENT_TYPE_MEDIAITEM_SET = 6;
export const MFP_EVENT_TYPE_FRAME_STEP = 7;
export const MFP_EVENT_TYPE_MEDIAITEM_CLEARED = 8;
export const MFP_EVENT_TYPE_MF = 9;
export const MFP_EVENT_TYPE_ERROR = 10;
export const MFP_EVENT_TYPE_PLAYBACK_ENDED = 11;
export const MFP_EVENT_TYPE_ACQUIRE_USER_CREDENTIAL = 12;
export const MF_SHARING_ENGINE_EVENT_DISCONNECT = 2000;
export const MF_SHARING_ENGINE_EVENT_LOCALRENDERINGSTARTED = 2001;
export const MF_SHARING_ENGINE_EVENT_LOCALRENDERINGENDED = 2002;
export const MF_SHARING_ENGINE_EVENT_STOPPED = 2003;
export const MF_SHARING_ENGINE_EVENT_ERROR = 2501;
export const MF_MEDIA_SHARING_ENGINE_EVENT_DISCONNECT = 2000;
export const PLAYTO_SOURCE_NONE = 0;
export const PLAYTO_SOURCE_IMAGE = 1;
export const PLAYTO_SOURCE_AUDIO = 2;
export const PLAYTO_SOURCE_VIDEO = 4;
export const PLAYTO_SOURCE_PROTECTED = 8;
export const MFVideoAlphaBitmap_EntireDDS = 1;
export const MFVideoAlphaBitmap_SrcColorKey = 2;
export const MFVideoAlphaBitmap_SrcRect = 4;
export const MFVideoAlphaBitmap_DestRect = 8;
export const MFVideoAlphaBitmap_FilterMode = 16;
export const MFVideoAlphaBitmap_Alpha = 32;
export const MFVideoAlphaBitmap_BitMask = 63;
export const MFVirtualCameraType_SoftwareCameraSource = 0;
export const MFVirtualCameraLifetime_Session = 0;
export const MFVirtualCameraLifetime_System = 1;
export const MFVirtualCameraAccess_CurrentUser = 0;
export const MFVirtualCameraAccess_AllUsers = 1;
export const OPM_HDCP_TYPE_0 = 0;
export const OPM_HDCP_TYPE_1 = 1;
export const OPM_HDCP_STATUS_ON = 0;
export const OPM_HDCP_STATUS_OFF = 1;

// Structs

/**
 * Windows.Win32.Devices.Properties.DEVPROPKEY (size: 16)
 */
export interface DEVPROPKEY {
  /** System.Guid */
  fmtid: Uint8Array | Deno.PointerValue;
  /** u32 */
  pid: number;
}

export const sizeofDEVPROPKEY = 16;

export function allocDEVPROPKEY(data?: Partial<DEVPROPKEY>): Uint8Array {
  const buf = new Uint8Array(sizeofDEVPROPKEY);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.fmtid !== undefined) view.setBigUint64(0, data.fmtid === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.fmtid))), true);
  // 0x08: u32
  if (data?.pid !== undefined) view.setUint32(8, Number(data.pid), true);
  // 0x0c: pad4
  return buf;
}

export class DEVPROPKEYView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get fmtid(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(0, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x08: u32
  get pid(): number {
    return this.view.getUint32(8, true);
  }

  // 0x0c: pad4

  // 0x00: pointer
  set fmtid(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(0, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x08: u32
  set pid(value: number) {
    this.view.setUint32(8, value, true);
  }

  // 0x0c: pad4
}

export type BOOL = number;

/**
 * Windows.Win32.Media.MediaFoundation.AM_MEDIA_TYPE (size: 64)
 */
export interface AM_MEDIA_TYPE {
  /** System.Guid */
  majortype: Uint8Array | Deno.PointerValue;
  /** System.Guid */
  subtype: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.Foundation.BOOL */
  bFixedSizeSamples: boolean;
  /** Windows.Win32.Foundation.BOOL */
  bTemporalCompression: boolean;
  /** u32 */
  lSampleSize: number;
  /** System.Guid */
  formattype: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.System.Com.IUnknown */
  pUnk: Uint8Array | Deno.PointerValue;
  /** u32 */
  cbFormat: number;
  /** ptr */
  pbFormat: Deno.PointerValue | Uint8Array;
}

export const sizeofAM_MEDIA_TYPE = 64;

export function allocAM_MEDIA_TYPE(data?: Partial<AM_MEDIA_TYPE>): Uint8Array {
  const buf = new Uint8Array(sizeofAM_MEDIA_TYPE);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.majortype !== undefined) view.setBigUint64(0, data.majortype === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.majortype))), true);
  // 0x08: pointer
  if (data?.subtype !== undefined) view.setBigUint64(8, data.subtype === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.subtype))), true);
  // 0x10: i32
  if (data?.bFixedSizeSamples !== undefined) view.setInt32(16, Number(data.bFixedSizeSamples), true);
  // 0x14: i32
  if (data?.bTemporalCompression !== undefined) view.setInt32(20, Number(data.bTemporalCompression), true);
  // 0x18: u32
  if (data?.lSampleSize !== undefined) view.setUint32(24, Number(data.lSampleSize), true);
  // 0x1c: pad4
  // 0x20: pointer
  if (data?.formattype !== undefined) view.setBigUint64(32, data.formattype === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.formattype))), true);
  // 0x28: pointer
  if (data?.pUnk !== undefined) view.setBigUint64(40, data.pUnk === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.pUnk))), true);
  // 0x30: u32
  if (data?.cbFormat !== undefined) view.setUint32(48, Number(data.cbFormat), true);
  // 0x34: pad4
  // 0x38: pointer
  if (data?.pbFormat !== undefined) view.setBigUint64(56, data.pbFormat === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.pbFormat))), true);
  return buf;
}

export class AM_MEDIA_TYPEView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get majortype(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(0, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x08: pointer
  get subtype(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x10: i32
  get bFixedSizeSamples(): number {
    return this.view.getInt32(16, true);
  }

  // 0x14: i32
  get bTemporalCompression(): number {
    return this.view.getInt32(20, true);
  }

  // 0x18: u32
  get lSampleSize(): number {
    return this.view.getUint32(24, true);
  }

  // 0x1c: pad4

  // 0x20: pointer
  get formattype(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(32, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x28: pointer
  get pUnk(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(40, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x30: u32
  get cbFormat(): number {
    return this.view.getUint32(48, true);
  }

  // 0x34: pad4

  // 0x38: pointer
  get pbFormat(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(56, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: pointer
  set majortype(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(0, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x08: pointer
  set subtype(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x10: i32
  set bFixedSizeSamples(value: number) {
    this.view.setInt32(16, value, true);
  }

  // 0x14: i32
  set bTemporalCompression(value: number) {
    this.view.setInt32(20, value, true);
  }

  // 0x18: u32
  set lSampleSize(value: number) {
    this.view.setUint32(24, value, true);
  }

  // 0x1c: pad4

  // 0x20: pointer
  set formattype(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(32, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x28: pointer
  set pUnk(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(40, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x30: u32
  set cbFormat(value: number) {
    this.view.setUint32(48, value, true);
  }

  // 0x34: pad4

  // 0x38: pointer
  set pbFormat(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(56, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.Media.MediaFoundation.CodecAPIEventData (size: 24)
 */
export interface CodecAPIEventData {
  /** System.Guid */
  guid: Uint8Array | Deno.PointerValue;
  /** u32 */
  dataLength: number;
  /** array */
  reserved: Deno.PointerValue;
}

export const sizeofCodecAPIEventData = 24;

export function allocCodecAPIEventData(data?: Partial<CodecAPIEventData>): Uint8Array {
  const buf = new Uint8Array(sizeofCodecAPIEventData);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.guid !== undefined) view.setBigUint64(0, data.guid === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.guid))), true);
  // 0x08: u32
  if (data?.dataLength !== undefined) view.setUint32(8, Number(data.dataLength), true);
  // 0x0c: pad4
  // 0x10: pointer
  if (data?.reserved !== undefined) view.setBigUint64(16, data.reserved === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.reserved))), true);
  return buf;
}

export class CodecAPIEventDataView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get guid(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(0, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x08: u32
  get dataLength(): number {
    return this.view.getUint32(8, true);
  }

  // 0x0c: pad4

  // 0x10: pointer
  get reserved(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(16, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: pointer
  set guid(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(0, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x08: u32
  set dataLength(value: number) {
    this.view.setUint32(8, value, true);
  }

  // 0x0c: pad4

  // 0x10: pointer
  set reserved(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(16, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.Foundation.RECT (size: 16)
 */
export interface RECT {
  /** i32 */
  left: number;
  /** i32 */
  top: number;
  /** i32 */
  right: number;
  /** i32 */
  bottom: number;
}

export const sizeofRECT = 16;

export function allocRECT(data?: Partial<RECT>): Uint8Array {
  const buf = new Uint8Array(sizeofRECT);
  const view = new DataView(buf.buffer);
  // 0x00: i32
  if (data?.left !== undefined) view.setInt32(0, Number(data.left), true);
  // 0x04: i32
  if (data?.top !== undefined) view.setInt32(4, Number(data.top), true);
  // 0x08: i32
  if (data?.right !== undefined) view.setInt32(8, Number(data.right), true);
  // 0x0c: i32
  if (data?.bottom !== undefined) view.setInt32(12, Number(data.bottom), true);
  return buf;
}

export class RECTView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: i32
  get left(): number {
    return this.view.getInt32(0, true);
  }

  // 0x04: i32
  get top(): number {
    return this.view.getInt32(4, true);
  }

  // 0x08: i32
  get right(): number {
    return this.view.getInt32(8, true);
  }

  // 0x0c: i32
  get bottom(): number {
    return this.view.getInt32(12, true);
  }

  // 0x00: i32
  set left(value: number) {
    this.view.setInt32(0, value, true);
  }

  // 0x04: i32
  set top(value: number) {
    this.view.setInt32(4, value, true);
  }

  // 0x08: i32
  set right(value: number) {
    this.view.setInt32(8, value, true);
  }

  // 0x0c: i32
  set bottom(value: number) {
    this.view.setInt32(12, value, true);
  }
}

/**
 * Windows.Win32.Graphics.Gdi.BITMAPINFOHEADER (size: 40)
 */
export interface BITMAPINFOHEADER {
  /** u32 */
  biSize: number;
  /** i32 */
  biWidth: number;
  /** i32 */
  biHeight: number;
  /** u16 */
  biPlanes: number;
  /** u16 */
  biBitCount: number;
  /** Windows.Win32.Graphics.Gdi.BI_COMPRESSION */
  biCompression: BI_COMPRESSION;
  /** u32 */
  biSizeImage: number;
  /** i32 */
  biXPelsPerMeter: number;
  /** i32 */
  biYPelsPerMeter: number;
  /** u32 */
  biClrUsed: number;
  /** u32 */
  biClrImportant: number;
}

export const sizeofBITMAPINFOHEADER = 40;

export function allocBITMAPINFOHEADER(data?: Partial<BITMAPINFOHEADER>): Uint8Array {
  const buf = new Uint8Array(sizeofBITMAPINFOHEADER);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.biSize !== undefined) view.setUint32(0, Number(data.biSize), true);
  // 0x04: i32
  if (data?.biWidth !== undefined) view.setInt32(4, Number(data.biWidth), true);
  // 0x08: i32
  if (data?.biHeight !== undefined) view.setInt32(8, Number(data.biHeight), true);
  // 0x0c: u16
  if (data?.biPlanes !== undefined) view.setUint16(12, Number(data.biPlanes), true);
  // 0x0e: u16
  if (data?.biBitCount !== undefined) view.setUint16(14, Number(data.biBitCount), true);
  // 0x10: i32
  if (data?.biCompression !== undefined) view.setInt32(16, Number(data.biCompression), true);
  // 0x14: u32
  if (data?.biSizeImage !== undefined) view.setUint32(20, Number(data.biSizeImage), true);
  // 0x18: i32
  if (data?.biXPelsPerMeter !== undefined) view.setInt32(24, Number(data.biXPelsPerMeter), true);
  // 0x1c: i32
  if (data?.biYPelsPerMeter !== undefined) view.setInt32(28, Number(data.biYPelsPerMeter), true);
  // 0x20: u32
  if (data?.biClrUsed !== undefined) view.setUint32(32, Number(data.biClrUsed), true);
  // 0x24: u32
  if (data?.biClrImportant !== undefined) view.setUint32(36, Number(data.biClrImportant), true);
  return buf;
}

export class BITMAPINFOHEADERView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get biSize(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: i32
  get biWidth(): number {
    return this.view.getInt32(4, true);
  }

  // 0x08: i32
  get biHeight(): number {
    return this.view.getInt32(8, true);
  }

  // 0x0c: u16
  get biPlanes(): number {
    return this.view.getUint16(12, true);
  }

  // 0x0e: u16
  get biBitCount(): number {
    return this.view.getUint16(14, true);
  }

  // 0x10: i32
  get biCompression(): number {
    return this.view.getInt32(16, true);
  }

  // 0x14: u32
  get biSizeImage(): number {
    return this.view.getUint32(20, true);
  }

  // 0x18: i32
  get biXPelsPerMeter(): number {
    return this.view.getInt32(24, true);
  }

  // 0x1c: i32
  get biYPelsPerMeter(): number {
    return this.view.getInt32(28, true);
  }

  // 0x20: u32
  get biClrUsed(): number {
    return this.view.getUint32(32, true);
  }

  // 0x24: u32
  get biClrImportant(): number {
    return this.view.getUint32(36, true);
  }

  // 0x00: u32
  set biSize(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: i32
  set biWidth(value: number) {
    this.view.setInt32(4, value, true);
  }

  // 0x08: i32
  set biHeight(value: number) {
    this.view.setInt32(8, value, true);
  }

  // 0x0c: u16
  set biPlanes(value: number) {
    this.view.setUint16(12, value, true);
  }

  // 0x0e: u16
  set biBitCount(value: number) {
    this.view.setUint16(14, value, true);
  }

  // 0x10: i32
  set biCompression(value: number) {
    this.view.setInt32(16, value, true);
  }

  // 0x14: u32
  set biSizeImage(value: number) {
    this.view.setUint32(20, value, true);
  }

  // 0x18: i32
  set biXPelsPerMeter(value: number) {
    this.view.setInt32(24, value, true);
  }

  // 0x1c: i32
  set biYPelsPerMeter(value: number) {
    this.view.setInt32(28, value, true);
  }

  // 0x20: u32
  set biClrUsed(value: number) {
    this.view.setUint32(32, value, true);
  }

  // 0x24: u32
  set biClrImportant(value: number) {
    this.view.setUint32(36, value, true);
  }
}

/**
 * Windows.Win32.Media.MediaFoundation.VIDEOINFOHEADER (size: 40)
 */
export interface VIDEOINFOHEADER {
  /** Windows.Win32.Foundation.RECT */
  rcSource: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.Foundation.RECT */
  rcTarget: Uint8Array | Deno.PointerValue;
  /** u32 */
  dwBitRate: number;
  /** u32 */
  dwBitErrorRate: number;
  /** i64 */
  AvgTimePerFrame: bigint | number;
  /** Windows.Win32.Graphics.Gdi.BITMAPINFOHEADER */
  bmiHeader: Uint8Array | Deno.PointerValue;
}

export const sizeofVIDEOINFOHEADER = 40;

export function allocVIDEOINFOHEADER(data?: Partial<VIDEOINFOHEADER>): Uint8Array {
  const buf = new Uint8Array(sizeofVIDEOINFOHEADER);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.rcSource !== undefined) view.setBigUint64(0, data.rcSource === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.rcSource))), true);
  // 0x08: pointer
  if (data?.rcTarget !== undefined) view.setBigUint64(8, data.rcTarget === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.rcTarget))), true);
  // 0x10: u32
  if (data?.dwBitRate !== undefined) view.setUint32(16, Number(data.dwBitRate), true);
  // 0x14: u32
  if (data?.dwBitErrorRate !== undefined) view.setUint32(20, Number(data.dwBitErrorRate), true);
  // 0x18: i64
  if (data?.AvgTimePerFrame !== undefined) view.setBigInt64(24, BigInt(data.AvgTimePerFrame), true);
  // 0x20: pointer
  if (data?.bmiHeader !== undefined) view.setBigUint64(32, data.bmiHeader === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.bmiHeader))), true);
  return buf;
}

export class VIDEOINFOHEADERView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get rcSource(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(0, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x08: pointer
  get rcTarget(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x10: u32
  get dwBitRate(): number {
    return this.view.getUint32(16, true);
  }

  // 0x14: u32
  get dwBitErrorRate(): number {
    return this.view.getUint32(20, true);
  }

  // 0x18: i64
  get AvgTimePerFrame(): bigint | number {
    return Number(this.view.getBigInt64(24, true));
  }

  // 0x20: pointer
  get bmiHeader(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(32, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: pointer
  set rcSource(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(0, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x08: pointer
  set rcTarget(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x10: u32
  set dwBitRate(value: number) {
    this.view.setUint32(16, value, true);
  }

  // 0x14: u32
  set dwBitErrorRate(value: number) {
    this.view.setUint32(20, value, true);
  }

  // 0x18: i64
  set AvgTimePerFrame(value: bigint | number) {
    this.view.setBigInt64(24, BigInt(value), true);
  }

  // 0x20: pointer
  set bmiHeader(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(32, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.Media.MediaFoundation.MPEG1VIDEOINFO (size: 24)
 */
export interface MPEG1VIDEOINFO {
  /** Windows.Win32.Media.MediaFoundation.VIDEOINFOHEADER */
  hdr: Uint8Array | Deno.PointerValue;
  /** u32 */
  dwStartTimeCode: number;
  /** u32 */
  cbSequenceHeader: number;
  /** array */
  bSequenceHeader: Deno.PointerValue;
}

export const sizeofMPEG1VIDEOINFO = 24;

export function allocMPEG1VIDEOINFO(data?: Partial<MPEG1VIDEOINFO>): Uint8Array {
  const buf = new Uint8Array(sizeofMPEG1VIDEOINFO);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.hdr !== undefined) view.setBigUint64(0, data.hdr === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.hdr))), true);
  // 0x08: u32
  if (data?.dwStartTimeCode !== undefined) view.setUint32(8, Number(data.dwStartTimeCode), true);
  // 0x0c: u32
  if (data?.cbSequenceHeader !== undefined) view.setUint32(12, Number(data.cbSequenceHeader), true);
  // 0x10: pointer
  if (data?.bSequenceHeader !== undefined) view.setBigUint64(16, data.bSequenceHeader === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.bSequenceHeader))), true);
  return buf;
}

export class MPEG1VIDEOINFOView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get hdr(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(0, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x08: u32
  get dwStartTimeCode(): number {
    return this.view.getUint32(8, true);
  }

  // 0x0c: u32
  get cbSequenceHeader(): number {
    return this.view.getUint32(12, true);
  }

  // 0x10: pointer
  get bSequenceHeader(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(16, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: pointer
  set hdr(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(0, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x08: u32
  set dwStartTimeCode(value: number) {
    this.view.setUint32(8, value, true);
  }

  // 0x0c: u32
  set cbSequenceHeader(value: number) {
    this.view.setUint32(12, value, true);
  }

  // 0x10: pointer
  set bSequenceHeader(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(16, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * _Anonymous_e__Struct (size: 16)
 */
export interface _Anonymous_e__Struct {
  /** u64 */
  Alignment: bigint | number;
  /** u64 */
  Region: bigint | number;
}

export const sizeof_Anonymous_e__Struct = 16;

export function alloc_Anonymous_e__Struct(data?: Partial<_Anonymous_e__Struct>): Uint8Array {
  const buf = new Uint8Array(sizeof_Anonymous_e__Struct);
  const view = new DataView(buf.buffer);
  // 0x00: u64
  if (data?.Alignment !== undefined) view.setBigUint64(0, BigInt(data.Alignment), true);
  // 0x08: u64
  if (data?.Region !== undefined) view.setBigUint64(8, BigInt(data.Region), true);
  return buf;
}

export class _Anonymous_e__StructView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u64
  get Alignment(): bigint | number {
    return Number(this.view.getBigUint64(0, true));
  }

  // 0x08: u64
  get Region(): bigint | number {
    return Number(this.view.getBigUint64(8, true));
  }

  // 0x00: u64
  set Alignment(value: bigint | number) {
    this.view.setBigUint64(0, BigInt(value), true);
  }

  // 0x08: u64
  set Region(value: bigint | number) {
    this.view.setBigUint64(8, BigInt(value), true);
  }
}

/**
 * _Anonymous_e__Union (size: 16)
 */
export interface _Anonymous_e__Union {
  /** _Anonymous_e__Struct */
  Anonymous: Uint8Array | Deno.PointerValue;
  /** array */
  X: Deno.PointerValue;
}

export const sizeof_Anonymous_e__Union = 16;

export function alloc_Anonymous_e__Union(data?: Partial<_Anonymous_e__Union>): Uint8Array {
  const buf = new Uint8Array(sizeof_Anonymous_e__Union);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.Anonymous !== undefined) view.setBigUint64(0, data.Anonymous === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.Anonymous))), true);
  // 0x08: pointer
  if (data?.X !== undefined) view.setBigUint64(8, data.X === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.X))), true);
  return buf;
}

export class _Anonymous_e__UnionView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get Anonymous(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(0, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x08: pointer
  get X(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: pointer
  set Anonymous(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(0, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x08: pointer
  set X(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.Media.MediaFoundation.VIDEOINFOHEADER2 (size: 72)
 */
export interface VIDEOINFOHEADER2 {
  /** Windows.Win32.Foundation.RECT */
  rcSource: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.Foundation.RECT */
  rcTarget: Uint8Array | Deno.PointerValue;
  /** u32 */
  dwBitRate: number;
  /** u32 */
  dwBitErrorRate: number;
  /** i64 */
  AvgTimePerFrame: bigint | number;
  /** u32 */
  dwInterlaceFlags: number;
  /** u32 */
  dwCopyProtectFlags: number;
  /** u32 */
  dwPictAspectRatioX: number;
  /** u32 */
  dwPictAspectRatioY: number;
  /** _Anonymous_e__Union */
  Anonymous: Uint8Array | Deno.PointerValue;
  /** u32 */
  dwReserved2: number;
  /** Windows.Win32.Graphics.Gdi.BITMAPINFOHEADER */
  bmiHeader: Uint8Array | Deno.PointerValue;
}

export const sizeofVIDEOINFOHEADER2 = 72;

export function allocVIDEOINFOHEADER2(data?: Partial<VIDEOINFOHEADER2>): Uint8Array {
  const buf = new Uint8Array(sizeofVIDEOINFOHEADER2);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.rcSource !== undefined) view.setBigUint64(0, data.rcSource === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.rcSource))), true);
  // 0x08: pointer
  if (data?.rcTarget !== undefined) view.setBigUint64(8, data.rcTarget === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.rcTarget))), true);
  // 0x10: u32
  if (data?.dwBitRate !== undefined) view.setUint32(16, Number(data.dwBitRate), true);
  // 0x14: u32
  if (data?.dwBitErrorRate !== undefined) view.setUint32(20, Number(data.dwBitErrorRate), true);
  // 0x18: i64
  if (data?.AvgTimePerFrame !== undefined) view.setBigInt64(24, BigInt(data.AvgTimePerFrame), true);
  // 0x20: u32
  if (data?.dwInterlaceFlags !== undefined) view.setUint32(32, Number(data.dwInterlaceFlags), true);
  // 0x24: u32
  if (data?.dwCopyProtectFlags !== undefined) view.setUint32(36, Number(data.dwCopyProtectFlags), true);
  // 0x28: u32
  if (data?.dwPictAspectRatioX !== undefined) view.setUint32(40, Number(data.dwPictAspectRatioX), true);
  // 0x2c: u32
  if (data?.dwPictAspectRatioY !== undefined) view.setUint32(44, Number(data.dwPictAspectRatioY), true);
  // 0x30: pointer
  if (data?.Anonymous !== undefined) view.setBigUint64(48, data.Anonymous === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.Anonymous))), true);
  // 0x38: u32
  if (data?.dwReserved2 !== undefined) view.setUint32(56, Number(data.dwReserved2), true);
  // 0x3c: pad4
  // 0x40: pointer
  if (data?.bmiHeader !== undefined) view.setBigUint64(64, data.bmiHeader === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.bmiHeader))), true);
  return buf;
}

export class VIDEOINFOHEADER2View {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get rcSource(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(0, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x08: pointer
  get rcTarget(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x10: u32
  get dwBitRate(): number {
    return this.view.getUint32(16, true);
  }

  // 0x14: u32
  get dwBitErrorRate(): number {
    return this.view.getUint32(20, true);
  }

  // 0x18: i64
  get AvgTimePerFrame(): bigint | number {
    return Number(this.view.getBigInt64(24, true));
  }

  // 0x20: u32
  get dwInterlaceFlags(): number {
    return this.view.getUint32(32, true);
  }

  // 0x24: u32
  get dwCopyProtectFlags(): number {
    return this.view.getUint32(36, true);
  }

  // 0x28: u32
  get dwPictAspectRatioX(): number {
    return this.view.getUint32(40, true);
  }

  // 0x2c: u32
  get dwPictAspectRatioY(): number {
    return this.view.getUint32(44, true);
  }

  // 0x30: pointer
  get Anonymous(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(48, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x38: u32
  get dwReserved2(): number {
    return this.view.getUint32(56, true);
  }

  // 0x3c: pad4

  // 0x40: pointer
  get bmiHeader(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(64, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: pointer
  set rcSource(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(0, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x08: pointer
  set rcTarget(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x10: u32
  set dwBitRate(value: number) {
    this.view.setUint32(16, value, true);
  }

  // 0x14: u32
  set dwBitErrorRate(value: number) {
    this.view.setUint32(20, value, true);
  }

  // 0x18: i64
  set AvgTimePerFrame(value: bigint | number) {
    this.view.setBigInt64(24, BigInt(value), true);
  }

  // 0x20: u32
  set dwInterlaceFlags(value: number) {
    this.view.setUint32(32, value, true);
  }

  // 0x24: u32
  set dwCopyProtectFlags(value: number) {
    this.view.setUint32(36, value, true);
  }

  // 0x28: u32
  set dwPictAspectRatioX(value: number) {
    this.view.setUint32(40, value, true);
  }

  // 0x2c: u32
  set dwPictAspectRatioY(value: number) {
    this.view.setUint32(44, value, true);
  }

  // 0x30: pointer
  set Anonymous(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(48, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x38: u32
  set dwReserved2(value: number) {
    this.view.setUint32(56, value, true);
  }

  // 0x3c: pad4

  // 0x40: pointer
  set bmiHeader(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(64, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.Media.MediaFoundation.MPEG2VIDEOINFO (size: 40)
 */
export interface MPEG2VIDEOINFO {
  /** Windows.Win32.Media.MediaFoundation.VIDEOINFOHEADER2 */
  hdr: Uint8Array | Deno.PointerValue;
  /** u32 */
  dwStartTimeCode: number;
  /** u32 */
  cbSequenceHeader: number;
  /** u32 */
  dwProfile: number;
  /** u32 */
  dwLevel: number;
  /** Windows.Win32.Media.MediaFoundation.MPEG2VIDEOINFO_FLAGS */
  dwFlags: MPEG2VIDEOINFO_FLAGS;
  /** array */
  dwSequenceHeader: Deno.PointerValue;
}

export const sizeofMPEG2VIDEOINFO = 40;

export function allocMPEG2VIDEOINFO(data?: Partial<MPEG2VIDEOINFO>): Uint8Array {
  const buf = new Uint8Array(sizeofMPEG2VIDEOINFO);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.hdr !== undefined) view.setBigUint64(0, data.hdr === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.hdr))), true);
  // 0x08: u32
  if (data?.dwStartTimeCode !== undefined) view.setUint32(8, Number(data.dwStartTimeCode), true);
  // 0x0c: u32
  if (data?.cbSequenceHeader !== undefined) view.setUint32(12, Number(data.cbSequenceHeader), true);
  // 0x10: u32
  if (data?.dwProfile !== undefined) view.setUint32(16, Number(data.dwProfile), true);
  // 0x14: u32
  if (data?.dwLevel !== undefined) view.setUint32(20, Number(data.dwLevel), true);
  // 0x18: u32
  if (data?.dwFlags !== undefined) view.setUint32(24, Number(data.dwFlags), true);
  // 0x1c: pad4
  // 0x20: pointer
  if (data?.dwSequenceHeader !== undefined) view.setBigUint64(32, data.dwSequenceHeader === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.dwSequenceHeader))), true);
  return buf;
}

export class MPEG2VIDEOINFOView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get hdr(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(0, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x08: u32
  get dwStartTimeCode(): number {
    return this.view.getUint32(8, true);
  }

  // 0x0c: u32
  get cbSequenceHeader(): number {
    return this.view.getUint32(12, true);
  }

  // 0x10: u32
  get dwProfile(): number {
    return this.view.getUint32(16, true);
  }

  // 0x14: u32
  get dwLevel(): number {
    return this.view.getUint32(20, true);
  }

  // 0x18: u32
  get dwFlags(): number {
    return this.view.getUint32(24, true);
  }

  // 0x1c: pad4

  // 0x20: pointer
  get dwSequenceHeader(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(32, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: pointer
  set hdr(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(0, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x08: u32
  set dwStartTimeCode(value: number) {
    this.view.setUint32(8, value, true);
  }

  // 0x0c: u32
  set cbSequenceHeader(value: number) {
    this.view.setUint32(12, value, true);
  }

  // 0x10: u32
  set dwProfile(value: number) {
    this.view.setUint32(16, value, true);
  }

  // 0x14: u32
  set dwLevel(value: number) {
    this.view.setUint32(20, value, true);
  }

  // 0x18: u32
  set dwFlags(value: number) {
    this.view.setUint32(24, value, true);
  }

  // 0x1c: pad4

  // 0x20: pointer
  set dwSequenceHeader(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(32, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.Media.MediaFoundation.D3DCONTENTPROTECTIONCAPS (size: 32)
 */
export interface D3DCONTENTPROTECTIONCAPS {
  /** u32 */
  Caps: number;
  /** System.Guid */
  KeyExchangeType: Uint8Array | Deno.PointerValue;
  /** u32 */
  BufferAlignmentStart: number;
  /** u32 */
  BlockAlignmentSize: number;
  /** u64 */
  ProtectedMemorySize: bigint | number;
}

export const sizeofD3DCONTENTPROTECTIONCAPS = 32;

export function allocD3DCONTENTPROTECTIONCAPS(data?: Partial<D3DCONTENTPROTECTIONCAPS>): Uint8Array {
  const buf = new Uint8Array(sizeofD3DCONTENTPROTECTIONCAPS);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.Caps !== undefined) view.setUint32(0, Number(data.Caps), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.KeyExchangeType !== undefined) view.setBigUint64(8, data.KeyExchangeType === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.KeyExchangeType))), true);
  // 0x10: u32
  if (data?.BufferAlignmentStart !== undefined) view.setUint32(16, Number(data.BufferAlignmentStart), true);
  // 0x14: u32
  if (data?.BlockAlignmentSize !== undefined) view.setUint32(20, Number(data.BlockAlignmentSize), true);
  // 0x18: u64
  if (data?.ProtectedMemorySize !== undefined) view.setBigUint64(24, BigInt(data.ProtectedMemorySize), true);
  return buf;
}

export class D3DCONTENTPROTECTIONCAPSView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get Caps(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  get KeyExchangeType(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x10: u32
  get BufferAlignmentStart(): number {
    return this.view.getUint32(16, true);
  }

  // 0x14: u32
  get BlockAlignmentSize(): number {
    return this.view.getUint32(20, true);
  }

  // 0x18: u64
  get ProtectedMemorySize(): bigint | number {
    return Number(this.view.getBigUint64(24, true));
  }

  // 0x00: u32
  set Caps(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  set KeyExchangeType(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x10: u32
  set BufferAlignmentStart(value: number) {
    this.view.setUint32(16, value, true);
  }

  // 0x14: u32
  set BlockAlignmentSize(value: number) {
    this.view.setUint32(20, value, true);
  }

  // 0x18: u64
  set ProtectedMemorySize(value: bigint | number) {
    this.view.setBigUint64(24, BigInt(value), true);
  }
}

/**
 * Windows.Win32.Media.MediaFoundation.DXVA_VideoSample2 (size: 64)
 */
export interface DXVA_VideoSample2 {
  /** u32 */
  Size: number;
  /** u32 */
  Reserved: number;
  /** i64 */
  rtStart: bigint | number;
  /** i64 */
  rtEnd: bigint | number;
  /** u32 */
  SampleFormat: number;
  /** u32 */
  SampleFlags: number;
  /** ptr */
  lpDDSSrcSurface: Deno.PointerValue | Uint8Array;
  /** Windows.Win32.Foundation.RECT */
  rcSrc: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.Foundation.RECT */
  rcDst: Uint8Array | Deno.PointerValue;
  /** array */
  Palette: Deno.PointerValue;
}

export const sizeofDXVA_VideoSample2 = 64;

export function allocDXVA_VideoSample2(data?: Partial<DXVA_VideoSample2>): Uint8Array {
  const buf = new Uint8Array(sizeofDXVA_VideoSample2);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.Size !== undefined) view.setUint32(0, Number(data.Size), true);
  // 0x04: u32
  if (data?.Reserved !== undefined) view.setUint32(4, Number(data.Reserved), true);
  // 0x08: i64
  if (data?.rtStart !== undefined) view.setBigInt64(8, BigInt(data.rtStart), true);
  // 0x10: i64
  if (data?.rtEnd !== undefined) view.setBigInt64(16, BigInt(data.rtEnd), true);
  // 0x18: u32
  if (data?.SampleFormat !== undefined) view.setUint32(24, Number(data.SampleFormat), true);
  // 0x1c: u32
  if (data?.SampleFlags !== undefined) view.setUint32(28, Number(data.SampleFlags), true);
  // 0x20: pointer
  if (data?.lpDDSSrcSurface !== undefined) view.setBigUint64(32, data.lpDDSSrcSurface === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.lpDDSSrcSurface))), true);
  // 0x28: pointer
  if (data?.rcSrc !== undefined) view.setBigUint64(40, data.rcSrc === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.rcSrc))), true);
  // 0x30: pointer
  if (data?.rcDst !== undefined) view.setBigUint64(48, data.rcDst === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.rcDst))), true);
  // 0x38: pointer
  if (data?.Palette !== undefined) view.setBigUint64(56, data.Palette === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.Palette))), true);
  return buf;
}

export class DXVA_VideoSample2View {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get Size(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: u32
  get Reserved(): number {
    return this.view.getUint32(4, true);
  }

  // 0x08: i64
  get rtStart(): bigint | number {
    return Number(this.view.getBigInt64(8, true));
  }

  // 0x10: i64
  get rtEnd(): bigint | number {
    return Number(this.view.getBigInt64(16, true));
  }

  // 0x18: u32
  get SampleFormat(): number {
    return this.view.getUint32(24, true);
  }

  // 0x1c: u32
  get SampleFlags(): number {
    return this.view.getUint32(28, true);
  }

  // 0x20: pointer
  get lpDDSSrcSurface(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(32, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x28: pointer
  get rcSrc(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(40, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x30: pointer
  get rcDst(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(48, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x38: pointer
  get Palette(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(56, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: u32
  set Size(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: u32
  set Reserved(value: number) {
    this.view.setUint32(4, value, true);
  }

  // 0x08: i64
  set rtStart(value: bigint | number) {
    this.view.setBigInt64(8, BigInt(value), true);
  }

  // 0x10: i64
  set rtEnd(value: bigint | number) {
    this.view.setBigInt64(16, BigInt(value), true);
  }

  // 0x18: u32
  set SampleFormat(value: number) {
    this.view.setUint32(24, value, true);
  }

  // 0x1c: u32
  set SampleFlags(value: number) {
    this.view.setUint32(28, value, true);
  }

  // 0x20: pointer
  set lpDDSSrcSurface(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(32, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x28: pointer
  set rcSrc(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(40, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x30: pointer
  set rcDst(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(48, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x38: pointer
  set Palette(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(56, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.Media.MediaFoundation.DXVA_VideoSample32 (size: 56)
 */
export interface DXVA_VideoSample32 {
  /** i64 */
  rtStart: bigint | number;
  /** i64 */
  rtEnd: bigint | number;
  /** u32 */
  SampleFormat: number;
  /** u32 */
  SampleFlags: number;
  /** u32 */
  lpDDSSrcSurface: number;
  /** Windows.Win32.Foundation.RECT */
  rcSrc: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.Foundation.RECT */
  rcDst: Uint8Array | Deno.PointerValue;
  /** array */
  Palette: Deno.PointerValue;
}

export const sizeofDXVA_VideoSample32 = 56;

export function allocDXVA_VideoSample32(data?: Partial<DXVA_VideoSample32>): Uint8Array {
  const buf = new Uint8Array(sizeofDXVA_VideoSample32);
  const view = new DataView(buf.buffer);
  // 0x00: i64
  if (data?.rtStart !== undefined) view.setBigInt64(0, BigInt(data.rtStart), true);
  // 0x08: i64
  if (data?.rtEnd !== undefined) view.setBigInt64(8, BigInt(data.rtEnd), true);
  // 0x10: u32
  if (data?.SampleFormat !== undefined) view.setUint32(16, Number(data.SampleFormat), true);
  // 0x14: u32
  if (data?.SampleFlags !== undefined) view.setUint32(20, Number(data.SampleFlags), true);
  // 0x18: u32
  if (data?.lpDDSSrcSurface !== undefined) view.setUint32(24, Number(data.lpDDSSrcSurface), true);
  // 0x1c: pad4
  // 0x20: pointer
  if (data?.rcSrc !== undefined) view.setBigUint64(32, data.rcSrc === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.rcSrc))), true);
  // 0x28: pointer
  if (data?.rcDst !== undefined) view.setBigUint64(40, data.rcDst === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.rcDst))), true);
  // 0x30: pointer
  if (data?.Palette !== undefined) view.setBigUint64(48, data.Palette === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.Palette))), true);
  return buf;
}

export class DXVA_VideoSample32View {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: i64
  get rtStart(): bigint | number {
    return Number(this.view.getBigInt64(0, true));
  }

  // 0x08: i64
  get rtEnd(): bigint | number {
    return Number(this.view.getBigInt64(8, true));
  }

  // 0x10: u32
  get SampleFormat(): number {
    return this.view.getUint32(16, true);
  }

  // 0x14: u32
  get SampleFlags(): number {
    return this.view.getUint32(20, true);
  }

  // 0x18: u32
  get lpDDSSrcSurface(): number {
    return this.view.getUint32(24, true);
  }

  // 0x1c: pad4

  // 0x20: pointer
  get rcSrc(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(32, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x28: pointer
  get rcDst(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(40, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x30: pointer
  get Palette(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(48, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: i64
  set rtStart(value: bigint | number) {
    this.view.setBigInt64(0, BigInt(value), true);
  }

  // 0x08: i64
  set rtEnd(value: bigint | number) {
    this.view.setBigInt64(8, BigInt(value), true);
  }

  // 0x10: u32
  set SampleFormat(value: number) {
    this.view.setUint32(16, value, true);
  }

  // 0x14: u32
  set SampleFlags(value: number) {
    this.view.setUint32(20, value, true);
  }

  // 0x18: u32
  set lpDDSSrcSurface(value: number) {
    this.view.setUint32(24, value, true);
  }

  // 0x1c: pad4

  // 0x20: pointer
  set rcSrc(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(32, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x28: pointer
  set rcDst(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(40, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x30: pointer
  set Palette(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(48, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.Media.MediaFoundation.DXVA_AYUVsample2 (size: 8)
 */
export interface DXVA_AYUVsample2 {
  /** u8 */
  bCrValue: number;
  /** u8 */
  bCbValue: number;
  /** u8 */
  bY_Value: number;
  /** u8 */
  bSampleAlpha8: number;
}

export const sizeofDXVA_AYUVsample2 = 8;

export function allocDXVA_AYUVsample2(data?: Partial<DXVA_AYUVsample2>): Uint8Array {
  const buf = new Uint8Array(sizeofDXVA_AYUVsample2);
  const view = new DataView(buf.buffer);
  // 0x00: u8
  if (data?.bCrValue !== undefined) view.setUint8(0, Number(data.bCrValue));
  // 0x01: u8
  if (data?.bCbValue !== undefined) view.setUint8(1, Number(data.bCbValue));
  // 0x02: u8
  if (data?.bY_Value !== undefined) view.setUint8(2, Number(data.bY_Value));
  // 0x03: u8
  if (data?.bSampleAlpha8 !== undefined) view.setUint8(3, Number(data.bSampleAlpha8));
  // 0x04: pad4
  return buf;
}

export class DXVA_AYUVsample2View {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u8
  get bCrValue(): number {
    return this.view.getUint8(0);
  }

  // 0x01: u8
  get bCbValue(): number {
    return this.view.getUint8(1);
  }

  // 0x02: u8
  get bY_Value(): number {
    return this.view.getUint8(2);
  }

  // 0x03: u8
  get bSampleAlpha8(): number {
    return this.view.getUint8(3);
  }

  // 0x04: pad4

  // 0x00: u8
  set bCrValue(value: number) {
    this.view.setUint8(0, value);
  }

  // 0x01: u8
  set bCbValue(value: number) {
    this.view.setUint8(1, value);
  }

  // 0x02: u8
  set bY_Value(value: number) {
    this.view.setUint8(2, value);
  }

  // 0x03: u8
  set bSampleAlpha8(value: number) {
    this.view.setUint8(3, value);
  }

  // 0x04: pad4
}

/**
 * Windows.Win32.Media.MediaFoundation.DXVA_DeinterlaceBltEx32 (size: 56)
 */
export interface DXVA_DeinterlaceBltEx32 {
  /** u32 */
  Size: number;
  /** Windows.Win32.Media.MediaFoundation.DXVA_AYUVsample2 */
  BackgroundColor: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.Foundation.RECT */
  rcTarget: Uint8Array | Deno.PointerValue;
  /** i64 */
  rtTarget: bigint | number;
  /** u32 */
  NumSourceSurfaces: number;
  /** f32 */
  Alpha: number;
  /** array */
  Source: Deno.PointerValue;
  /** u32 */
  DestinationFormat: number;
  /** u32 */
  DestinationFlags: number;
}

export const sizeofDXVA_DeinterlaceBltEx32 = 56;

export function allocDXVA_DeinterlaceBltEx32(data?: Partial<DXVA_DeinterlaceBltEx32>): Uint8Array {
  const buf = new Uint8Array(sizeofDXVA_DeinterlaceBltEx32);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.Size !== undefined) view.setUint32(0, Number(data.Size), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.BackgroundColor !== undefined) view.setBigUint64(8, data.BackgroundColor === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.BackgroundColor))), true);
  // 0x10: pointer
  if (data?.rcTarget !== undefined) view.setBigUint64(16, data.rcTarget === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.rcTarget))), true);
  // 0x18: i64
  if (data?.rtTarget !== undefined) view.setBigInt64(24, BigInt(data.rtTarget), true);
  // 0x20: u32
  if (data?.NumSourceSurfaces !== undefined) view.setUint32(32, Number(data.NumSourceSurfaces), true);
  // 0x24: f32
  if (data?.Alpha !== undefined) view.setFloat32(36, Number(data.Alpha), true);
  // 0x28: pointer
  if (data?.Source !== undefined) view.setBigUint64(40, data.Source === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.Source))), true);
  // 0x30: u32
  if (data?.DestinationFormat !== undefined) view.setUint32(48, Number(data.DestinationFormat), true);
  // 0x34: u32
  if (data?.DestinationFlags !== undefined) view.setUint32(52, Number(data.DestinationFlags), true);
  return buf;
}

export class DXVA_DeinterlaceBltEx32View {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get Size(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  get BackgroundColor(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x10: pointer
  get rcTarget(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(16, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x18: i64
  get rtTarget(): bigint | number {
    return Number(this.view.getBigInt64(24, true));
  }

  // 0x20: u32
  get NumSourceSurfaces(): number {
    return this.view.getUint32(32, true);
  }

  // 0x24: f32
  get Alpha(): number {
    return this.view.getFloat32(36, true);
  }

  // 0x28: pointer
  get Source(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(40, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x30: u32
  get DestinationFormat(): number {
    return this.view.getUint32(48, true);
  }

  // 0x34: u32
  get DestinationFlags(): number {
    return this.view.getUint32(52, true);
  }

  // 0x00: u32
  set Size(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  set BackgroundColor(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x10: pointer
  set rcTarget(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(16, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x18: i64
  set rtTarget(value: bigint | number) {
    this.view.setBigInt64(24, BigInt(value), true);
  }

  // 0x20: u32
  set NumSourceSurfaces(value: number) {
    this.view.setUint32(32, value, true);
  }

  // 0x24: f32
  set Alpha(value: number) {
    this.view.setFloat32(36, value, true);
  }

  // 0x28: pointer
  set Source(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(40, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x30: u32
  set DestinationFormat(value: number) {
    this.view.setUint32(48, value, true);
  }

  // 0x34: u32
  set DestinationFlags(value: number) {
    this.view.setUint32(52, value, true);
  }
}

/**
 * Windows.Win32.Media.MediaFoundation.D3DOVERLAYCAPS (size: 16)
 */
export interface D3DOVERLAYCAPS {
  /** u32 */
  Caps: number;
  /** u32 */
  MaxOverlayDisplayWidth: number;
  /** u32 */
  MaxOverlayDisplayHeight: number;
}

export const sizeofD3DOVERLAYCAPS = 16;

export function allocD3DOVERLAYCAPS(data?: Partial<D3DOVERLAYCAPS>): Uint8Array {
  const buf = new Uint8Array(sizeofD3DOVERLAYCAPS);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.Caps !== undefined) view.setUint32(0, Number(data.Caps), true);
  // 0x04: u32
  if (data?.MaxOverlayDisplayWidth !== undefined) view.setUint32(4, Number(data.MaxOverlayDisplayWidth), true);
  // 0x08: u32
  if (data?.MaxOverlayDisplayHeight !== undefined) view.setUint32(8, Number(data.MaxOverlayDisplayHeight), true);
  // 0x0c: pad4
  return buf;
}

export class D3DOVERLAYCAPSView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get Caps(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: u32
  get MaxOverlayDisplayWidth(): number {
    return this.view.getUint32(4, true);
  }

  // 0x08: u32
  get MaxOverlayDisplayHeight(): number {
    return this.view.getUint32(8, true);
  }

  // 0x0c: pad4

  // 0x00: u32
  set Caps(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: u32
  set MaxOverlayDisplayWidth(value: number) {
    this.view.setUint32(4, value, true);
  }

  // 0x08: u32
  set MaxOverlayDisplayHeight(value: number) {
    this.view.setUint32(8, value, true);
  }

  // 0x0c: pad4
}

/**
 * Windows.Win32.Media.MediaFoundation.D3D12_VIDEO_FORMAT (size: 8)
 */
export interface D3D12_VIDEO_FORMAT {
  /** Windows.Win32.Graphics.Dxgi.Common.DXGI_FORMAT */
  Format: DXGI_FORMAT;
  /** Windows.Win32.Graphics.Dxgi.Common.DXGI_COLOR_SPACE_TYPE */
  ColorSpace: DXGI_COLOR_SPACE_TYPE;
}

export const sizeofD3D12_VIDEO_FORMAT = 8;

export function allocD3D12_VIDEO_FORMAT(data?: Partial<D3D12_VIDEO_FORMAT>): Uint8Array {
  const buf = new Uint8Array(sizeofD3D12_VIDEO_FORMAT);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.Format !== undefined) view.setUint32(0, Number(data.Format), true);
  // 0x04: i32
  if (data?.ColorSpace !== undefined) view.setInt32(4, Number(data.ColorSpace), true);
  return buf;
}

export class D3D12_VIDEO_FORMATView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get Format(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: i32
  get ColorSpace(): number {
    return this.view.getInt32(4, true);
  }

  // 0x00: u32
  set Format(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: i32
  set ColorSpace(value: number) {
    this.view.setInt32(4, value, true);
  }
}

/**
 * Windows.Win32.Media.MediaFoundation.D3D12_VIDEO_SAMPLE (size: 16)
 */
export interface D3D12_VIDEO_SAMPLE {
  /** u32 */
  Width: number;
  /** u32 */
  Height: number;
  /** Windows.Win32.Media.MediaFoundation.D3D12_VIDEO_FORMAT */
  Format: Uint8Array | Deno.PointerValue;
}

export const sizeofD3D12_VIDEO_SAMPLE = 16;

export function allocD3D12_VIDEO_SAMPLE(data?: Partial<D3D12_VIDEO_SAMPLE>): Uint8Array {
  const buf = new Uint8Array(sizeofD3D12_VIDEO_SAMPLE);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.Width !== undefined) view.setUint32(0, Number(data.Width), true);
  // 0x04: u32
  if (data?.Height !== undefined) view.setUint32(4, Number(data.Height), true);
  // 0x08: pointer
  if (data?.Format !== undefined) view.setBigUint64(8, data.Format === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.Format))), true);
  return buf;
}

export class D3D12_VIDEO_SAMPLEView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get Width(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: u32
  get Height(): number {
    return this.view.getUint32(4, true);
  }

  // 0x08: pointer
  get Format(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: u32
  set Width(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: u32
  set Height(value: number) {
    this.view.setUint32(4, value, true);
  }

  // 0x08: pointer
  set Format(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.Media.MediaFoundation.D3D12_VIDEO_DECODE_CONFIGURATION (size: 16)
 */
export interface D3D12_VIDEO_DECODE_CONFIGURATION {
  /** System.Guid */
  DecodeProfile: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.Media.MediaFoundation.D3D12_BITSTREAM_ENCRYPTION_TYPE */
  BitstreamEncryption: D3D12_BITSTREAM_ENCRYPTION_TYPE;
  /** Windows.Win32.Media.MediaFoundation.D3D12_VIDEO_FRAME_CODED_INTERLACE_TYPE */
  InterlaceType: D3D12_VIDEO_FRAME_CODED_INTERLACE_TYPE;
}

export const sizeofD3D12_VIDEO_DECODE_CONFIGURATION = 16;

export function allocD3D12_VIDEO_DECODE_CONFIGURATION(data?: Partial<D3D12_VIDEO_DECODE_CONFIGURATION>): Uint8Array {
  const buf = new Uint8Array(sizeofD3D12_VIDEO_DECODE_CONFIGURATION);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.DecodeProfile !== undefined) view.setBigUint64(0, data.DecodeProfile === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.DecodeProfile))), true);
  // 0x08: i32
  if (data?.BitstreamEncryption !== undefined) view.setInt32(8, Number(data.BitstreamEncryption), true);
  // 0x0c: i32
  if (data?.InterlaceType !== undefined) view.setInt32(12, Number(data.InterlaceType), true);
  return buf;
}

export class D3D12_VIDEO_DECODE_CONFIGURATIONView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get DecodeProfile(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(0, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x08: i32
  get BitstreamEncryption(): number {
    return this.view.getInt32(8, true);
  }

  // 0x0c: i32
  get InterlaceType(): number {
    return this.view.getInt32(12, true);
  }

  // 0x00: pointer
  set DecodeProfile(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(0, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x08: i32
  set BitstreamEncryption(value: number) {
    this.view.setInt32(8, value, true);
  }

  // 0x0c: i32
  set InterlaceType(value: number) {
    this.view.setInt32(12, value, true);
  }
}

/**
 * Windows.Win32.Media.MediaFoundation.D3D12_VIDEO_DECODER_DESC (size: 16)
 */
export interface D3D12_VIDEO_DECODER_DESC {
  /** u32 */
  NodeMask: number;
  /** Windows.Win32.Media.MediaFoundation.D3D12_VIDEO_DECODE_CONFIGURATION */
  Configuration: Uint8Array | Deno.PointerValue;
}

export const sizeofD3D12_VIDEO_DECODER_DESC = 16;

export function allocD3D12_VIDEO_DECODER_DESC(data?: Partial<D3D12_VIDEO_DECODER_DESC>): Uint8Array {
  const buf = new Uint8Array(sizeofD3D12_VIDEO_DECODER_DESC);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.NodeMask !== undefined) view.setUint32(0, Number(data.NodeMask), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.Configuration !== undefined) view.setBigUint64(8, data.Configuration === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.Configuration))), true);
  return buf;
}

export class D3D12_VIDEO_DECODER_DESCView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get NodeMask(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  get Configuration(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: u32
  set NodeMask(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  set Configuration(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.Graphics.Dxgi.Common.DXGI_RATIONAL (size: 8)
 */
export interface DXGI_RATIONAL {
  /** u32 */
  Numerator: number;
  /** u32 */
  Denominator: number;
}

export const sizeofDXGI_RATIONAL = 8;

export function allocDXGI_RATIONAL(data?: Partial<DXGI_RATIONAL>): Uint8Array {
  const buf = new Uint8Array(sizeofDXGI_RATIONAL);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.Numerator !== undefined) view.setUint32(0, Number(data.Numerator), true);
  // 0x04: u32
  if (data?.Denominator !== undefined) view.setUint32(4, Number(data.Denominator), true);
  return buf;
}

export class DXGI_RATIONALView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get Numerator(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: u32
  get Denominator(): number {
    return this.view.getUint32(4, true);
  }

  // 0x00: u32
  set Numerator(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: u32
  set Denominator(value: number) {
    this.view.setUint32(4, value, true);
  }
}

/**
 * Windows.Win32.Media.MediaFoundation.D3D12_VIDEO_DECODER_HEAP_DESC (size: 48)
 */
export interface D3D12_VIDEO_DECODER_HEAP_DESC {
  /** u32 */
  NodeMask: number;
  /** Windows.Win32.Media.MediaFoundation.D3D12_VIDEO_DECODE_CONFIGURATION */
  Configuration: Uint8Array | Deno.PointerValue;
  /** u32 */
  DecodeWidth: number;
  /** u32 */
  DecodeHeight: number;
  /** Windows.Win32.Graphics.Dxgi.Common.DXGI_FORMAT */
  Format: DXGI_FORMAT;
  /** Windows.Win32.Graphics.Dxgi.Common.DXGI_RATIONAL */
  FrameRate: Uint8Array | Deno.PointerValue;
  /** u32 */
  BitRate: number;
  /** u32 */
  MaxDecodePictureBufferCount: number;
}

export const sizeofD3D12_VIDEO_DECODER_HEAP_DESC = 48;

export function allocD3D12_VIDEO_DECODER_HEAP_DESC(data?: Partial<D3D12_VIDEO_DECODER_HEAP_DESC>): Uint8Array {
  const buf = new Uint8Array(sizeofD3D12_VIDEO_DECODER_HEAP_DESC);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.NodeMask !== undefined) view.setUint32(0, Number(data.NodeMask), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.Configuration !== undefined) view.setBigUint64(8, data.Configuration === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.Configuration))), true);
  // 0x10: u32
  if (data?.DecodeWidth !== undefined) view.setUint32(16, Number(data.DecodeWidth), true);
  // 0x14: u32
  if (data?.DecodeHeight !== undefined) view.setUint32(20, Number(data.DecodeHeight), true);
  // 0x18: u32
  if (data?.Format !== undefined) view.setUint32(24, Number(data.Format), true);
  // 0x1c: pad4
  // 0x20: pointer
  if (data?.FrameRate !== undefined) view.setBigUint64(32, data.FrameRate === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.FrameRate))), true);
  // 0x28: u32
  if (data?.BitRate !== undefined) view.setUint32(40, Number(data.BitRate), true);
  // 0x2c: u32
  if (data?.MaxDecodePictureBufferCount !== undefined) view.setUint32(44, Number(data.MaxDecodePictureBufferCount), true);
  return buf;
}

export class D3D12_VIDEO_DECODER_HEAP_DESCView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get NodeMask(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  get Configuration(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x10: u32
  get DecodeWidth(): number {
    return this.view.getUint32(16, true);
  }

  // 0x14: u32
  get DecodeHeight(): number {
    return this.view.getUint32(20, true);
  }

  // 0x18: u32
  get Format(): number {
    return this.view.getUint32(24, true);
  }

  // 0x1c: pad4

  // 0x20: pointer
  get FrameRate(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(32, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x28: u32
  get BitRate(): number {
    return this.view.getUint32(40, true);
  }

  // 0x2c: u32
  get MaxDecodePictureBufferCount(): number {
    return this.view.getUint32(44, true);
  }

  // 0x00: u32
  set NodeMask(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  set Configuration(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x10: u32
  set DecodeWidth(value: number) {
    this.view.setUint32(16, value, true);
  }

  // 0x14: u32
  set DecodeHeight(value: number) {
    this.view.setUint32(20, value, true);
  }

  // 0x18: u32
  set Format(value: number) {
    this.view.setUint32(24, value, true);
  }

  // 0x1c: pad4

  // 0x20: pointer
  set FrameRate(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(32, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x28: u32
  set BitRate(value: number) {
    this.view.setUint32(40, value, true);
  }

  // 0x2c: u32
  set MaxDecodePictureBufferCount(value: number) {
    this.view.setUint32(44, value, true);
  }
}

/**
 * Windows.Win32.Media.MediaFoundation.D3D12_VIDEO_SIZE_RANGE (size: 16)
 */
export interface D3D12_VIDEO_SIZE_RANGE {
  /** u32 */
  MaxWidth: number;
  /** u32 */
  MaxHeight: number;
  /** u32 */
  MinWidth: number;
  /** u32 */
  MinHeight: number;
}

export const sizeofD3D12_VIDEO_SIZE_RANGE = 16;

export function allocD3D12_VIDEO_SIZE_RANGE(data?: Partial<D3D12_VIDEO_SIZE_RANGE>): Uint8Array {
  const buf = new Uint8Array(sizeofD3D12_VIDEO_SIZE_RANGE);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.MaxWidth !== undefined) view.setUint32(0, Number(data.MaxWidth), true);
  // 0x04: u32
  if (data?.MaxHeight !== undefined) view.setUint32(4, Number(data.MaxHeight), true);
  // 0x08: u32
  if (data?.MinWidth !== undefined) view.setUint32(8, Number(data.MinWidth), true);
  // 0x0c: u32
  if (data?.MinHeight !== undefined) view.setUint32(12, Number(data.MinHeight), true);
  return buf;
}

export class D3D12_VIDEO_SIZE_RANGEView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get MaxWidth(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: u32
  get MaxHeight(): number {
    return this.view.getUint32(4, true);
  }

  // 0x08: u32
  get MinWidth(): number {
    return this.view.getUint32(8, true);
  }

  // 0x0c: u32
  get MinHeight(): number {
    return this.view.getUint32(12, true);
  }

  // 0x00: u32
  set MaxWidth(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: u32
  set MaxHeight(value: number) {
    this.view.setUint32(4, value, true);
  }

  // 0x08: u32
  set MinWidth(value: number) {
    this.view.setUint32(8, value, true);
  }

  // 0x0c: u32
  set MinHeight(value: number) {
    this.view.setUint32(12, value, true);
  }
}

/**
 * Windows.Win32.Media.MediaFoundation.D3D12_VIDEO_PROCESS_ALPHA_BLENDING (size: 8)
 */
export interface D3D12_VIDEO_PROCESS_ALPHA_BLENDING {
  /** Windows.Win32.Foundation.BOOL */
  Enable: boolean;
  /** f32 */
  Alpha: number;
}

export const sizeofD3D12_VIDEO_PROCESS_ALPHA_BLENDING = 8;

export function allocD3D12_VIDEO_PROCESS_ALPHA_BLENDING(data?: Partial<D3D12_VIDEO_PROCESS_ALPHA_BLENDING>): Uint8Array {
  const buf = new Uint8Array(sizeofD3D12_VIDEO_PROCESS_ALPHA_BLENDING);
  const view = new DataView(buf.buffer);
  // 0x00: i32
  if (data?.Enable !== undefined) view.setInt32(0, Number(data.Enable), true);
  // 0x04: f32
  if (data?.Alpha !== undefined) view.setFloat32(4, Number(data.Alpha), true);
  return buf;
}

export class D3D12_VIDEO_PROCESS_ALPHA_BLENDINGView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: i32
  get Enable(): number {
    return this.view.getInt32(0, true);
  }

  // 0x04: f32
  get Alpha(): number {
    return this.view.getFloat32(4, true);
  }

  // 0x00: i32
  set Enable(value: number) {
    this.view.setInt32(0, value, true);
  }

  // 0x04: f32
  set Alpha(value: number) {
    this.view.setFloat32(4, value, true);
  }
}

/**
 * Windows.Win32.Media.MediaFoundation.D3D12_VIDEO_PROCESS_LUMA_KEY (size: 16)
 */
export interface D3D12_VIDEO_PROCESS_LUMA_KEY {
  /** Windows.Win32.Foundation.BOOL */
  Enable: boolean;
  /** f32 */
  Lower: number;
  /** f32 */
  Upper: number;
}

export const sizeofD3D12_VIDEO_PROCESS_LUMA_KEY = 16;

export function allocD3D12_VIDEO_PROCESS_LUMA_KEY(data?: Partial<D3D12_VIDEO_PROCESS_LUMA_KEY>): Uint8Array {
  const buf = new Uint8Array(sizeofD3D12_VIDEO_PROCESS_LUMA_KEY);
  const view = new DataView(buf.buffer);
  // 0x00: i32
  if (data?.Enable !== undefined) view.setInt32(0, Number(data.Enable), true);
  // 0x04: f32
  if (data?.Lower !== undefined) view.setFloat32(4, Number(data.Lower), true);
  // 0x08: f32
  if (data?.Upper !== undefined) view.setFloat32(8, Number(data.Upper), true);
  // 0x0c: pad4
  return buf;
}

export class D3D12_VIDEO_PROCESS_LUMA_KEYView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: i32
  get Enable(): number {
    return this.view.getInt32(0, true);
  }

  // 0x04: f32
  get Lower(): number {
    return this.view.getFloat32(4, true);
  }

  // 0x08: f32
  get Upper(): number {
    return this.view.getFloat32(8, true);
  }

  // 0x0c: pad4

  // 0x00: i32
  set Enable(value: number) {
    this.view.setInt32(0, value, true);
  }

  // 0x04: f32
  set Lower(value: number) {
    this.view.setFloat32(4, value, true);
  }

  // 0x08: f32
  set Upper(value: number) {
    this.view.setFloat32(8, value, true);
  }

  // 0x0c: pad4
}

/**
 * Windows.Win32.Media.MediaFoundation.D3D12_VIDEO_PROCESS_INPUT_STREAM_DESC (size: 96)
 */
export interface D3D12_VIDEO_PROCESS_INPUT_STREAM_DESC {
  /** Windows.Win32.Graphics.Dxgi.Common.DXGI_FORMAT */
  Format: DXGI_FORMAT;
  /** Windows.Win32.Graphics.Dxgi.Common.DXGI_COLOR_SPACE_TYPE */
  ColorSpace: DXGI_COLOR_SPACE_TYPE;
  /** Windows.Win32.Graphics.Dxgi.Common.DXGI_RATIONAL */
  SourceAspectRatio: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.Graphics.Dxgi.Common.DXGI_RATIONAL */
  DestinationAspectRatio: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.Graphics.Dxgi.Common.DXGI_RATIONAL */
  FrameRate: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.Media.MediaFoundation.D3D12_VIDEO_SIZE_RANGE */
  SourceSizeRange: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.Media.MediaFoundation.D3D12_VIDEO_SIZE_RANGE */
  DestinationSizeRange: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.Foundation.BOOL */
  EnableOrientation: boolean;
  /** Windows.Win32.Media.MediaFoundation.D3D12_VIDEO_PROCESS_FILTER_FLAGS */
  FilterFlags: D3D12_VIDEO_PROCESS_FILTER_FLAGS;
  /** Windows.Win32.Media.MediaFoundation.D3D12_VIDEO_FRAME_STEREO_FORMAT */
  StereoFormat: D3D12_VIDEO_FRAME_STEREO_FORMAT;
  /** Windows.Win32.Media.MediaFoundation.D3D12_VIDEO_FIELD_TYPE */
  FieldType: D3D12_VIDEO_FIELD_TYPE;
  /** Windows.Win32.Media.MediaFoundation.D3D12_VIDEO_PROCESS_DEINTERLACE_FLAGS */
  DeinterlaceMode: D3D12_VIDEO_PROCESS_DEINTERLACE_FLAGS;
  /** Windows.Win32.Foundation.BOOL */
  EnableAlphaBlending: boolean;
  /** Windows.Win32.Media.MediaFoundation.D3D12_VIDEO_PROCESS_LUMA_KEY */
  LumaKey: Uint8Array | Deno.PointerValue;
  /** u32 */
  NumPastFrames: number;
  /** u32 */
  NumFutureFrames: number;
  /** Windows.Win32.Foundation.BOOL */
  EnableAutoProcessing: boolean;
}

export const sizeofD3D12_VIDEO_PROCESS_INPUT_STREAM_DESC = 96;

export function allocD3D12_VIDEO_PROCESS_INPUT_STREAM_DESC(data?: Partial<D3D12_VIDEO_PROCESS_INPUT_STREAM_DESC>): Uint8Array {
  const buf = new Uint8Array(sizeofD3D12_VIDEO_PROCESS_INPUT_STREAM_DESC);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.Format !== undefined) view.setUint32(0, Number(data.Format), true);
  // 0x04: i32
  if (data?.ColorSpace !== undefined) view.setInt32(4, Number(data.ColorSpace), true);
  // 0x08: pointer
  if (data?.SourceAspectRatio !== undefined) view.setBigUint64(8, data.SourceAspectRatio === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.SourceAspectRatio))), true);
  // 0x10: pointer
  if (data?.DestinationAspectRatio !== undefined) view.setBigUint64(16, data.DestinationAspectRatio === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.DestinationAspectRatio))), true);
  // 0x18: pointer
  if (data?.FrameRate !== undefined) view.setBigUint64(24, data.FrameRate === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.FrameRate))), true);
  // 0x20: pointer
  if (data?.SourceSizeRange !== undefined) view.setBigUint64(32, data.SourceSizeRange === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.SourceSizeRange))), true);
  // 0x28: pointer
  if (data?.DestinationSizeRange !== undefined) view.setBigUint64(40, data.DestinationSizeRange === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.DestinationSizeRange))), true);
  // 0x30: i32
  if (data?.EnableOrientation !== undefined) view.setInt32(48, Number(data.EnableOrientation), true);
  // 0x34: u32
  if (data?.FilterFlags !== undefined) view.setUint32(52, Number(data.FilterFlags), true);
  // 0x38: i32
  if (data?.StereoFormat !== undefined) view.setInt32(56, Number(data.StereoFormat), true);
  // 0x3c: i32
  if (data?.FieldType !== undefined) view.setInt32(60, Number(data.FieldType), true);
  // 0x40: u32
  if (data?.DeinterlaceMode !== undefined) view.setUint32(64, Number(data.DeinterlaceMode), true);
  // 0x44: i32
  if (data?.EnableAlphaBlending !== undefined) view.setInt32(68, Number(data.EnableAlphaBlending), true);
  // 0x48: pointer
  if (data?.LumaKey !== undefined) view.setBigUint64(72, data.LumaKey === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.LumaKey))), true);
  // 0x50: u32
  if (data?.NumPastFrames !== undefined) view.setUint32(80, Number(data.NumPastFrames), true);
  // 0x54: u32
  if (data?.NumFutureFrames !== undefined) view.setUint32(84, Number(data.NumFutureFrames), true);
  // 0x58: i32
  if (data?.EnableAutoProcessing !== undefined) view.setInt32(88, Number(data.EnableAutoProcessing), true);
  // 0x5c: pad4
  return buf;
}

export class D3D12_VIDEO_PROCESS_INPUT_STREAM_DESCView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get Format(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: i32
  get ColorSpace(): number {
    return this.view.getInt32(4, true);
  }

  // 0x08: pointer
  get SourceAspectRatio(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x10: pointer
  get DestinationAspectRatio(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(16, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x18: pointer
  get FrameRate(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(24, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x20: pointer
  get SourceSizeRange(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(32, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x28: pointer
  get DestinationSizeRange(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(40, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x30: i32
  get EnableOrientation(): number {
    return this.view.getInt32(48, true);
  }

  // 0x34: u32
  get FilterFlags(): number {
    return this.view.getUint32(52, true);
  }

  // 0x38: i32
  get StereoFormat(): number {
    return this.view.getInt32(56, true);
  }

  // 0x3c: i32
  get FieldType(): number {
    return this.view.getInt32(60, true);
  }

  // 0x40: u32
  get DeinterlaceMode(): number {
    return this.view.getUint32(64, true);
  }

  // 0x44: i32
  get EnableAlphaBlending(): number {
    return this.view.getInt32(68, true);
  }

  // 0x48: pointer
  get LumaKey(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(72, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x50: u32
  get NumPastFrames(): number {
    return this.view.getUint32(80, true);
  }

  // 0x54: u32
  get NumFutureFrames(): number {
    return this.view.getUint32(84, true);
  }

  // 0x58: i32
  get EnableAutoProcessing(): number {
    return this.view.getInt32(88, true);
  }

  // 0x5c: pad4

  // 0x00: u32
  set Format(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: i32
  set ColorSpace(value: number) {
    this.view.setInt32(4, value, true);
  }

  // 0x08: pointer
  set SourceAspectRatio(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x10: pointer
  set DestinationAspectRatio(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(16, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x18: pointer
  set FrameRate(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(24, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x20: pointer
  set SourceSizeRange(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(32, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x28: pointer
  set DestinationSizeRange(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(40, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x30: i32
  set EnableOrientation(value: number) {
    this.view.setInt32(48, value, true);
  }

  // 0x34: u32
  set FilterFlags(value: number) {
    this.view.setUint32(52, value, true);
  }

  // 0x38: i32
  set StereoFormat(value: number) {
    this.view.setInt32(56, value, true);
  }

  // 0x3c: i32
  set FieldType(value: number) {
    this.view.setInt32(60, value, true);
  }

  // 0x40: u32
  set DeinterlaceMode(value: number) {
    this.view.setUint32(64, value, true);
  }

  // 0x44: i32
  set EnableAlphaBlending(value: number) {
    this.view.setInt32(68, value, true);
  }

  // 0x48: pointer
  set LumaKey(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(72, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x50: u32
  set NumPastFrames(value: number) {
    this.view.setUint32(80, value, true);
  }

  // 0x54: u32
  set NumFutureFrames(value: number) {
    this.view.setUint32(84, value, true);
  }

  // 0x58: i32
  set EnableAutoProcessing(value: number) {
    this.view.setInt32(88, value, true);
  }

  // 0x5c: pad4
}

/**
 * Windows.Win32.Media.MediaFoundation.D3D12_VIDEO_PROCESS_OUTPUT_STREAM_DESC (size: 40)
 */
export interface D3D12_VIDEO_PROCESS_OUTPUT_STREAM_DESC {
  /** Windows.Win32.Graphics.Dxgi.Common.DXGI_FORMAT */
  Format: DXGI_FORMAT;
  /** Windows.Win32.Graphics.Dxgi.Common.DXGI_COLOR_SPACE_TYPE */
  ColorSpace: DXGI_COLOR_SPACE_TYPE;
  /** Windows.Win32.Media.MediaFoundation.D3D12_VIDEO_PROCESS_ALPHA_FILL_MODE */
  AlphaFillMode: D3D12_VIDEO_PROCESS_ALPHA_FILL_MODE;
  /** u32 */
  AlphaFillModeSourceStreamIndex: number;
  /** array */
  BackgroundColor: Deno.PointerValue;
  /** Windows.Win32.Graphics.Dxgi.Common.DXGI_RATIONAL */
  FrameRate: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.Foundation.BOOL */
  EnableStereo: boolean;
}

export const sizeofD3D12_VIDEO_PROCESS_OUTPUT_STREAM_DESC = 40;

export function allocD3D12_VIDEO_PROCESS_OUTPUT_STREAM_DESC(data?: Partial<D3D12_VIDEO_PROCESS_OUTPUT_STREAM_DESC>): Uint8Array {
  const buf = new Uint8Array(sizeofD3D12_VIDEO_PROCESS_OUTPUT_STREAM_DESC);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.Format !== undefined) view.setUint32(0, Number(data.Format), true);
  // 0x04: i32
  if (data?.ColorSpace !== undefined) view.setInt32(4, Number(data.ColorSpace), true);
  // 0x08: i32
  if (data?.AlphaFillMode !== undefined) view.setInt32(8, Number(data.AlphaFillMode), true);
  // 0x0c: u32
  if (data?.AlphaFillModeSourceStreamIndex !== undefined) view.setUint32(12, Number(data.AlphaFillModeSourceStreamIndex), true);
  // 0x10: pointer
  if (data?.BackgroundColor !== undefined) view.setBigUint64(16, data.BackgroundColor === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.BackgroundColor))), true);
  // 0x18: pointer
  if (data?.FrameRate !== undefined) view.setBigUint64(24, data.FrameRate === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.FrameRate))), true);
  // 0x20: i32
  if (data?.EnableStereo !== undefined) view.setInt32(32, Number(data.EnableStereo), true);
  // 0x24: pad4
  return buf;
}

export class D3D12_VIDEO_PROCESS_OUTPUT_STREAM_DESCView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get Format(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: i32
  get ColorSpace(): number {
    return this.view.getInt32(4, true);
  }

  // 0x08: i32
  get AlphaFillMode(): number {
    return this.view.getInt32(8, true);
  }

  // 0x0c: u32
  get AlphaFillModeSourceStreamIndex(): number {
    return this.view.getUint32(12, true);
  }

  // 0x10: pointer
  get BackgroundColor(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(16, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x18: pointer
  get FrameRate(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(24, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x20: i32
  get EnableStereo(): number {
    return this.view.getInt32(32, true);
  }

  // 0x24: pad4

  // 0x00: u32
  set Format(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: i32
  set ColorSpace(value: number) {
    this.view.setInt32(4, value, true);
  }

  // 0x08: i32
  set AlphaFillMode(value: number) {
    this.view.setInt32(8, value, true);
  }

  // 0x0c: u32
  set AlphaFillModeSourceStreamIndex(value: number) {
    this.view.setUint32(12, value, true);
  }

  // 0x10: pointer
  set BackgroundColor(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(16, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x18: pointer
  set FrameRate(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(24, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x20: i32
  set EnableStereo(value: number) {
    this.view.setInt32(32, value, true);
  }

  // 0x24: pad4
}

/**
 * Windows.Win32.Media.MediaFoundation.D3D12_FEATURE_DATA_VIDEO_DECODE_SUPPORT (size: 56)
 */
export interface D3D12_FEATURE_DATA_VIDEO_DECODE_SUPPORT {
  /** u32 */
  NodeIndex: number;
  /** Windows.Win32.Media.MediaFoundation.D3D12_VIDEO_DECODE_CONFIGURATION */
  Configuration: Uint8Array | Deno.PointerValue;
  /** u32 */
  Width: number;
  /** u32 */
  Height: number;
  /** Windows.Win32.Graphics.Dxgi.Common.DXGI_FORMAT */
  DecodeFormat: DXGI_FORMAT;
  /** Windows.Win32.Graphics.Dxgi.Common.DXGI_RATIONAL */
  FrameRate: Uint8Array | Deno.PointerValue;
  /** u32 */
  BitRate: number;
  /** Windows.Win32.Media.MediaFoundation.D3D12_VIDEO_DECODE_SUPPORT_FLAGS */
  SupportFlags: D3D12_VIDEO_DECODE_SUPPORT_FLAGS;
  /** Windows.Win32.Media.MediaFoundation.D3D12_VIDEO_DECODE_CONFIGURATION_FLAGS */
  ConfigurationFlags: D3D12_VIDEO_DECODE_CONFIGURATION_FLAGS;
  /** Windows.Win32.Media.MediaFoundation.D3D12_VIDEO_DECODE_TIER */
  DecodeTier: D3D12_VIDEO_DECODE_TIER;
}

export const sizeofD3D12_FEATURE_DATA_VIDEO_DECODE_SUPPORT = 56;

export function allocD3D12_FEATURE_DATA_VIDEO_DECODE_SUPPORT(data?: Partial<D3D12_FEATURE_DATA_VIDEO_DECODE_SUPPORT>): Uint8Array {
  const buf = new Uint8Array(sizeofD3D12_FEATURE_DATA_VIDEO_DECODE_SUPPORT);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.NodeIndex !== undefined) view.setUint32(0, Number(data.NodeIndex), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.Configuration !== undefined) view.setBigUint64(8, data.Configuration === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.Configuration))), true);
  // 0x10: u32
  if (data?.Width !== undefined) view.setUint32(16, Number(data.Width), true);
  // 0x14: u32
  if (data?.Height !== undefined) view.setUint32(20, Number(data.Height), true);
  // 0x18: u32
  if (data?.DecodeFormat !== undefined) view.setUint32(24, Number(data.DecodeFormat), true);
  // 0x1c: pad4
  // 0x20: pointer
  if (data?.FrameRate !== undefined) view.setBigUint64(32, data.FrameRate === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.FrameRate))), true);
  // 0x28: u32
  if (data?.BitRate !== undefined) view.setUint32(40, Number(data.BitRate), true);
  // 0x2c: u32
  if (data?.SupportFlags !== undefined) view.setUint32(44, Number(data.SupportFlags), true);
  // 0x30: u32
  if (data?.ConfigurationFlags !== undefined) view.setUint32(48, Number(data.ConfigurationFlags), true);
  // 0x34: i32
  if (data?.DecodeTier !== undefined) view.setInt32(52, Number(data.DecodeTier), true);
  return buf;
}

export class D3D12_FEATURE_DATA_VIDEO_DECODE_SUPPORTView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get NodeIndex(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  get Configuration(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x10: u32
  get Width(): number {
    return this.view.getUint32(16, true);
  }

  // 0x14: u32
  get Height(): number {
    return this.view.getUint32(20, true);
  }

  // 0x18: u32
  get DecodeFormat(): number {
    return this.view.getUint32(24, true);
  }

  // 0x1c: pad4

  // 0x20: pointer
  get FrameRate(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(32, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x28: u32
  get BitRate(): number {
    return this.view.getUint32(40, true);
  }

  // 0x2c: u32
  get SupportFlags(): number {
    return this.view.getUint32(44, true);
  }

  // 0x30: u32
  get ConfigurationFlags(): number {
    return this.view.getUint32(48, true);
  }

  // 0x34: i32
  get DecodeTier(): number {
    return this.view.getInt32(52, true);
  }

  // 0x00: u32
  set NodeIndex(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  set Configuration(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x10: u32
  set Width(value: number) {
    this.view.setUint32(16, value, true);
  }

  // 0x14: u32
  set Height(value: number) {
    this.view.setUint32(20, value, true);
  }

  // 0x18: u32
  set DecodeFormat(value: number) {
    this.view.setUint32(24, value, true);
  }

  // 0x1c: pad4

  // 0x20: pointer
  set FrameRate(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(32, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x28: u32
  set BitRate(value: number) {
    this.view.setUint32(40, value, true);
  }

  // 0x2c: u32
  set SupportFlags(value: number) {
    this.view.setUint32(44, value, true);
  }

  // 0x30: u32
  set ConfigurationFlags(value: number) {
    this.view.setUint32(48, value, true);
  }

  // 0x34: i32
  set DecodeTier(value: number) {
    this.view.setInt32(52, value, true);
  }
}

/**
 * Windows.Win32.Media.MediaFoundation.D3D12_FEATURE_DATA_VIDEO_DECODE_PROFILE_COUNT (size: 8)
 */
export interface D3D12_FEATURE_DATA_VIDEO_DECODE_PROFILE_COUNT {
  /** u32 */
  NodeIndex: number;
  /** u32 */
  ProfileCount: number;
}

export const sizeofD3D12_FEATURE_DATA_VIDEO_DECODE_PROFILE_COUNT = 8;

export function allocD3D12_FEATURE_DATA_VIDEO_DECODE_PROFILE_COUNT(data?: Partial<D3D12_FEATURE_DATA_VIDEO_DECODE_PROFILE_COUNT>): Uint8Array {
  const buf = new Uint8Array(sizeofD3D12_FEATURE_DATA_VIDEO_DECODE_PROFILE_COUNT);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.NodeIndex !== undefined) view.setUint32(0, Number(data.NodeIndex), true);
  // 0x04: u32
  if (data?.ProfileCount !== undefined) view.setUint32(4, Number(data.ProfileCount), true);
  return buf;
}

export class D3D12_FEATURE_DATA_VIDEO_DECODE_PROFILE_COUNTView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get NodeIndex(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: u32
  get ProfileCount(): number {
    return this.view.getUint32(4, true);
  }

  // 0x00: u32
  set NodeIndex(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: u32
  set ProfileCount(value: number) {
    this.view.setUint32(4, value, true);
  }
}

/**
 * Windows.Win32.Media.MediaFoundation.D3D12_FEATURE_DATA_VIDEO_DECODE_PROFILES (size: 16)
 */
export interface D3D12_FEATURE_DATA_VIDEO_DECODE_PROFILES {
  /** u32 */
  NodeIndex: number;
  /** u32 */
  ProfileCount: number;
  /** ptr */
  pProfiles: Deno.PointerValue | Uint8Array;
}

export const sizeofD3D12_FEATURE_DATA_VIDEO_DECODE_PROFILES = 16;

export function allocD3D12_FEATURE_DATA_VIDEO_DECODE_PROFILES(data?: Partial<D3D12_FEATURE_DATA_VIDEO_DECODE_PROFILES>): Uint8Array {
  const buf = new Uint8Array(sizeofD3D12_FEATURE_DATA_VIDEO_DECODE_PROFILES);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.NodeIndex !== undefined) view.setUint32(0, Number(data.NodeIndex), true);
  // 0x04: u32
  if (data?.ProfileCount !== undefined) view.setUint32(4, Number(data.ProfileCount), true);
  // 0x08: pointer
  if (data?.pProfiles !== undefined) view.setBigUint64(8, data.pProfiles === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.pProfiles))), true);
  return buf;
}

export class D3D12_FEATURE_DATA_VIDEO_DECODE_PROFILESView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get NodeIndex(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: u32
  get ProfileCount(): number {
    return this.view.getUint32(4, true);
  }

  // 0x08: pointer
  get pProfiles(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: u32
  set NodeIndex(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: u32
  set ProfileCount(value: number) {
    this.view.setUint32(4, value, true);
  }

  // 0x08: pointer
  set pProfiles(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.Media.MediaFoundation.D3D12_FEATURE_DATA_VIDEO_DECODE_FORMAT_COUNT (size: 24)
 */
export interface D3D12_FEATURE_DATA_VIDEO_DECODE_FORMAT_COUNT {
  /** u32 */
  NodeIndex: number;
  /** Windows.Win32.Media.MediaFoundation.D3D12_VIDEO_DECODE_CONFIGURATION */
  Configuration: Uint8Array | Deno.PointerValue;
  /** u32 */
  FormatCount: number;
}

export const sizeofD3D12_FEATURE_DATA_VIDEO_DECODE_FORMAT_COUNT = 24;

export function allocD3D12_FEATURE_DATA_VIDEO_DECODE_FORMAT_COUNT(data?: Partial<D3D12_FEATURE_DATA_VIDEO_DECODE_FORMAT_COUNT>): Uint8Array {
  const buf = new Uint8Array(sizeofD3D12_FEATURE_DATA_VIDEO_DECODE_FORMAT_COUNT);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.NodeIndex !== undefined) view.setUint32(0, Number(data.NodeIndex), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.Configuration !== undefined) view.setBigUint64(8, data.Configuration === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.Configuration))), true);
  // 0x10: u32
  if (data?.FormatCount !== undefined) view.setUint32(16, Number(data.FormatCount), true);
  // 0x14: pad4
  return buf;
}

export class D3D12_FEATURE_DATA_VIDEO_DECODE_FORMAT_COUNTView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get NodeIndex(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  get Configuration(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x10: u32
  get FormatCount(): number {
    return this.view.getUint32(16, true);
  }

  // 0x14: pad4

  // 0x00: u32
  set NodeIndex(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  set Configuration(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x10: u32
  set FormatCount(value: number) {
    this.view.setUint32(16, value, true);
  }

  // 0x14: pad4
}

/**
 * Windows.Win32.Media.MediaFoundation.D3D12_FEATURE_DATA_VIDEO_DECODE_FORMATS (size: 32)
 */
export interface D3D12_FEATURE_DATA_VIDEO_DECODE_FORMATS {
  /** u32 */
  NodeIndex: number;
  /** Windows.Win32.Media.MediaFoundation.D3D12_VIDEO_DECODE_CONFIGURATION */
  Configuration: Uint8Array | Deno.PointerValue;
  /** u32 */
  FormatCount: number;
  /** ptr */
  pOutputFormats: Deno.PointerValue | Uint8Array;
}

export const sizeofD3D12_FEATURE_DATA_VIDEO_DECODE_FORMATS = 32;

export function allocD3D12_FEATURE_DATA_VIDEO_DECODE_FORMATS(data?: Partial<D3D12_FEATURE_DATA_VIDEO_DECODE_FORMATS>): Uint8Array {
  const buf = new Uint8Array(sizeofD3D12_FEATURE_DATA_VIDEO_DECODE_FORMATS);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.NodeIndex !== undefined) view.setUint32(0, Number(data.NodeIndex), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.Configuration !== undefined) view.setBigUint64(8, data.Configuration === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.Configuration))), true);
  // 0x10: u32
  if (data?.FormatCount !== undefined) view.setUint32(16, Number(data.FormatCount), true);
  // 0x14: pad4
  // 0x18: pointer
  if (data?.pOutputFormats !== undefined) view.setBigUint64(24, data.pOutputFormats === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.pOutputFormats))), true);
  return buf;
}

export class D3D12_FEATURE_DATA_VIDEO_DECODE_FORMATSView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get NodeIndex(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  get Configuration(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x10: u32
  get FormatCount(): number {
    return this.view.getUint32(16, true);
  }

  // 0x14: pad4

  // 0x18: pointer
  get pOutputFormats(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(24, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: u32
  set NodeIndex(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  set Configuration(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x10: u32
  set FormatCount(value: number) {
    this.view.setUint32(16, value, true);
  }

  // 0x14: pad4

  // 0x18: pointer
  set pOutputFormats(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(24, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.Media.MediaFoundation.D3D12_FEATURE_DATA_VIDEO_ARCHITECTURE (size: 8)
 */
export interface D3D12_FEATURE_DATA_VIDEO_ARCHITECTURE {
  /** Windows.Win32.Foundation.BOOL */
  IOCoherent: boolean;
}

export const sizeofD3D12_FEATURE_DATA_VIDEO_ARCHITECTURE = 8;

export function allocD3D12_FEATURE_DATA_VIDEO_ARCHITECTURE(data?: Partial<D3D12_FEATURE_DATA_VIDEO_ARCHITECTURE>): Uint8Array {
  const buf = new Uint8Array(sizeofD3D12_FEATURE_DATA_VIDEO_ARCHITECTURE);
  const view = new DataView(buf.buffer);
  // 0x00: i32
  if (data?.IOCoherent !== undefined) view.setInt32(0, Number(data.IOCoherent), true);
  // 0x04: pad4
  return buf;
}

export class D3D12_FEATURE_DATA_VIDEO_ARCHITECTUREView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: i32
  get IOCoherent(): number {
    return this.view.getInt32(0, true);
  }

  // 0x04: pad4

  // 0x00: i32
  set IOCoherent(value: number) {
    this.view.setInt32(0, value, true);
  }

  // 0x04: pad4
}

/**
 * Windows.Win32.Media.MediaFoundation.D3D12_FEATURE_DATA_VIDEO_DECODE_HISTOGRAM (size: 40)
 */
export interface D3D12_FEATURE_DATA_VIDEO_DECODE_HISTOGRAM {
  /** u32 */
  NodeIndex: number;
  /** System.Guid */
  DecodeProfile: Uint8Array | Deno.PointerValue;
  /** u32 */
  Width: number;
  /** u32 */
  Height: number;
  /** Windows.Win32.Graphics.Dxgi.Common.DXGI_FORMAT */
  DecodeFormat: DXGI_FORMAT;
  /** Windows.Win32.Media.MediaFoundation.D3D12_VIDEO_DECODE_HISTOGRAM_COMPONENT_FLAGS */
  Components: D3D12_VIDEO_DECODE_HISTOGRAM_COMPONENT_FLAGS;
  /** u32 */
  BinCount: number;
  /** u32 */
  CounterBitDepth: number;
}

export const sizeofD3D12_FEATURE_DATA_VIDEO_DECODE_HISTOGRAM = 40;

export function allocD3D12_FEATURE_DATA_VIDEO_DECODE_HISTOGRAM(data?: Partial<D3D12_FEATURE_DATA_VIDEO_DECODE_HISTOGRAM>): Uint8Array {
  const buf = new Uint8Array(sizeofD3D12_FEATURE_DATA_VIDEO_DECODE_HISTOGRAM);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.NodeIndex !== undefined) view.setUint32(0, Number(data.NodeIndex), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.DecodeProfile !== undefined) view.setBigUint64(8, data.DecodeProfile === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.DecodeProfile))), true);
  // 0x10: u32
  if (data?.Width !== undefined) view.setUint32(16, Number(data.Width), true);
  // 0x14: u32
  if (data?.Height !== undefined) view.setUint32(20, Number(data.Height), true);
  // 0x18: u32
  if (data?.DecodeFormat !== undefined) view.setUint32(24, Number(data.DecodeFormat), true);
  // 0x1c: u32
  if (data?.Components !== undefined) view.setUint32(28, Number(data.Components), true);
  // 0x20: u32
  if (data?.BinCount !== undefined) view.setUint32(32, Number(data.BinCount), true);
  // 0x24: u32
  if (data?.CounterBitDepth !== undefined) view.setUint32(36, Number(data.CounterBitDepth), true);
  return buf;
}

export class D3D12_FEATURE_DATA_VIDEO_DECODE_HISTOGRAMView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get NodeIndex(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  get DecodeProfile(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x10: u32
  get Width(): number {
    return this.view.getUint32(16, true);
  }

  // 0x14: u32
  get Height(): number {
    return this.view.getUint32(20, true);
  }

  // 0x18: u32
  get DecodeFormat(): number {
    return this.view.getUint32(24, true);
  }

  // 0x1c: u32
  get Components(): number {
    return this.view.getUint32(28, true);
  }

  // 0x20: u32
  get BinCount(): number {
    return this.view.getUint32(32, true);
  }

  // 0x24: u32
  get CounterBitDepth(): number {
    return this.view.getUint32(36, true);
  }

  // 0x00: u32
  set NodeIndex(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  set DecodeProfile(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x10: u32
  set Width(value: number) {
    this.view.setUint32(16, value, true);
  }

  // 0x14: u32
  set Height(value: number) {
    this.view.setUint32(20, value, true);
  }

  // 0x18: u32
  set DecodeFormat(value: number) {
    this.view.setUint32(24, value, true);
  }

  // 0x1c: u32
  set Components(value: number) {
    this.view.setUint32(28, value, true);
  }

  // 0x20: u32
  set BinCount(value: number) {
    this.view.setUint32(32, value, true);
  }

  // 0x24: u32
  set CounterBitDepth(value: number) {
    this.view.setUint32(36, value, true);
  }
}

/**
 * Windows.Win32.Media.MediaFoundation.D3D12_VIDEO_SCALE_SUPPORT (size: 16)
 */
export interface D3D12_VIDEO_SCALE_SUPPORT {
  /** Windows.Win32.Media.MediaFoundation.D3D12_VIDEO_SIZE_RANGE */
  OutputSizeRange: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.Media.MediaFoundation.D3D12_VIDEO_SCALE_SUPPORT_FLAGS */
  Flags: D3D12_VIDEO_SCALE_SUPPORT_FLAGS;
}

export const sizeofD3D12_VIDEO_SCALE_SUPPORT = 16;

export function allocD3D12_VIDEO_SCALE_SUPPORT(data?: Partial<D3D12_VIDEO_SCALE_SUPPORT>): Uint8Array {
  const buf = new Uint8Array(sizeofD3D12_VIDEO_SCALE_SUPPORT);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.OutputSizeRange !== undefined) view.setBigUint64(0, data.OutputSizeRange === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.OutputSizeRange))), true);
  // 0x08: u32
  if (data?.Flags !== undefined) view.setUint32(8, Number(data.Flags), true);
  // 0x0c: pad4
  return buf;
}

export class D3D12_VIDEO_SCALE_SUPPORTView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get OutputSizeRange(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(0, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x08: u32
  get Flags(): number {
    return this.view.getUint32(8, true);
  }

  // 0x0c: pad4

  // 0x00: pointer
  set OutputSizeRange(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(0, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x08: u32
  set Flags(value: number) {
    this.view.setUint32(8, value, true);
  }

  // 0x0c: pad4
}

/**
 * Windows.Win32.Media.MediaFoundation.D3D12_FEATURE_DATA_VIDEO_DECODE_CONVERSION_SUPPORT (size: 56)
 */
export interface D3D12_FEATURE_DATA_VIDEO_DECODE_CONVERSION_SUPPORT {
  /** u32 */
  NodeIndex: number;
  /** Windows.Win32.Media.MediaFoundation.D3D12_VIDEO_DECODE_CONFIGURATION */
  Configuration: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.Media.MediaFoundation.D3D12_VIDEO_SAMPLE */
  DecodeSample: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.Media.MediaFoundation.D3D12_VIDEO_FORMAT */
  OutputFormat: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.Graphics.Dxgi.Common.DXGI_RATIONAL */
  FrameRate: Uint8Array | Deno.PointerValue;
  /** u32 */
  BitRate: number;
  /** Windows.Win32.Media.MediaFoundation.D3D12_VIDEO_DECODE_CONVERSION_SUPPORT_FLAGS */
  SupportFlags: D3D12_VIDEO_DECODE_CONVERSION_SUPPORT_FLAGS;
  /** Windows.Win32.Media.MediaFoundation.D3D12_VIDEO_SCALE_SUPPORT */
  ScaleSupport: Uint8Array | Deno.PointerValue;
}

export const sizeofD3D12_FEATURE_DATA_VIDEO_DECODE_CONVERSION_SUPPORT = 56;

export function allocD3D12_FEATURE_DATA_VIDEO_DECODE_CONVERSION_SUPPORT(data?: Partial<D3D12_FEATURE_DATA_VIDEO_DECODE_CONVERSION_SUPPORT>): Uint8Array {
  const buf = new Uint8Array(sizeofD3D12_FEATURE_DATA_VIDEO_DECODE_CONVERSION_SUPPORT);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.NodeIndex !== undefined) view.setUint32(0, Number(data.NodeIndex), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.Configuration !== undefined) view.setBigUint64(8, data.Configuration === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.Configuration))), true);
  // 0x10: pointer
  if (data?.DecodeSample !== undefined) view.setBigUint64(16, data.DecodeSample === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.DecodeSample))), true);
  // 0x18: pointer
  if (data?.OutputFormat !== undefined) view.setBigUint64(24, data.OutputFormat === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.OutputFormat))), true);
  // 0x20: pointer
  if (data?.FrameRate !== undefined) view.setBigUint64(32, data.FrameRate === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.FrameRate))), true);
  // 0x28: u32
  if (data?.BitRate !== undefined) view.setUint32(40, Number(data.BitRate), true);
  // 0x2c: u32
  if (data?.SupportFlags !== undefined) view.setUint32(44, Number(data.SupportFlags), true);
  // 0x30: pointer
  if (data?.ScaleSupport !== undefined) view.setBigUint64(48, data.ScaleSupport === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.ScaleSupport))), true);
  return buf;
}

export class D3D12_FEATURE_DATA_VIDEO_DECODE_CONVERSION_SUPPORTView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get NodeIndex(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  get Configuration(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x10: pointer
  get DecodeSample(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(16, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x18: pointer
  get OutputFormat(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(24, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x20: pointer
  get FrameRate(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(32, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x28: u32
  get BitRate(): number {
    return this.view.getUint32(40, true);
  }

  // 0x2c: u32
  get SupportFlags(): number {
    return this.view.getUint32(44, true);
  }

  // 0x30: pointer
  get ScaleSupport(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(48, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: u32
  set NodeIndex(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  set Configuration(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x10: pointer
  set DecodeSample(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(16, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x18: pointer
  set OutputFormat(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(24, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x20: pointer
  set FrameRate(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(32, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x28: u32
  set BitRate(value: number) {
    this.view.setUint32(40, value, true);
  }

  // 0x2c: u32
  set SupportFlags(value: number) {
    this.view.setUint32(44, value, true);
  }

  // 0x30: pointer
  set ScaleSupport(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(48, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.Media.MediaFoundation.D3D12_FEATURE_DATA_VIDEO_DECODER_HEAP_SIZE (size: 24)
 */
export interface D3D12_FEATURE_DATA_VIDEO_DECODER_HEAP_SIZE {
  /** Windows.Win32.Media.MediaFoundation.D3D12_VIDEO_DECODER_HEAP_DESC */
  VideoDecoderHeapDesc: Uint8Array | Deno.PointerValue;
  /** u64 */
  MemoryPoolL0Size: bigint | number;
  /** u64 */
  MemoryPoolL1Size: bigint | number;
}

export const sizeofD3D12_FEATURE_DATA_VIDEO_DECODER_HEAP_SIZE = 24;

export function allocD3D12_FEATURE_DATA_VIDEO_DECODER_HEAP_SIZE(data?: Partial<D3D12_FEATURE_DATA_VIDEO_DECODER_HEAP_SIZE>): Uint8Array {
  const buf = new Uint8Array(sizeofD3D12_FEATURE_DATA_VIDEO_DECODER_HEAP_SIZE);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.VideoDecoderHeapDesc !== undefined) view.setBigUint64(0, data.VideoDecoderHeapDesc === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.VideoDecoderHeapDesc))), true);
  // 0x08: u64
  if (data?.MemoryPoolL0Size !== undefined) view.setBigUint64(8, BigInt(data.MemoryPoolL0Size), true);
  // 0x10: u64
  if (data?.MemoryPoolL1Size !== undefined) view.setBigUint64(16, BigInt(data.MemoryPoolL1Size), true);
  return buf;
}

export class D3D12_FEATURE_DATA_VIDEO_DECODER_HEAP_SIZEView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get VideoDecoderHeapDesc(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(0, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x08: u64
  get MemoryPoolL0Size(): bigint | number {
    return Number(this.view.getBigUint64(8, true));
  }

  // 0x10: u64
  get MemoryPoolL1Size(): bigint | number {
    return Number(this.view.getBigUint64(16, true));
  }

  // 0x00: pointer
  set VideoDecoderHeapDesc(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(0, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x08: u64
  set MemoryPoolL0Size(value: bigint | number) {
    this.view.setBigUint64(8, BigInt(value), true);
  }

  // 0x10: u64
  set MemoryPoolL1Size(value: bigint | number) {
    this.view.setBigUint64(16, BigInt(value), true);
  }
}

/**
 * Windows.Win32.Media.MediaFoundation.D3D12_FEATURE_DATA_VIDEO_PROCESSOR_SIZE (size: 48)
 */
export interface D3D12_FEATURE_DATA_VIDEO_PROCESSOR_SIZE {
  /** u32 */
  NodeMask: number;
  /** ptr */
  pOutputStreamDesc: Deno.PointerValue | Uint8Array;
  /** u32 */
  NumInputStreamDescs: number;
  /** ptr */
  pInputStreamDescs: Deno.PointerValue | Uint8Array;
  /** u64 */
  MemoryPoolL0Size: bigint | number;
  /** u64 */
  MemoryPoolL1Size: bigint | number;
}

export const sizeofD3D12_FEATURE_DATA_VIDEO_PROCESSOR_SIZE = 48;

export function allocD3D12_FEATURE_DATA_VIDEO_PROCESSOR_SIZE(data?: Partial<D3D12_FEATURE_DATA_VIDEO_PROCESSOR_SIZE>): Uint8Array {
  const buf = new Uint8Array(sizeofD3D12_FEATURE_DATA_VIDEO_PROCESSOR_SIZE);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.NodeMask !== undefined) view.setUint32(0, Number(data.NodeMask), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.pOutputStreamDesc !== undefined) view.setBigUint64(8, data.pOutputStreamDesc === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.pOutputStreamDesc))), true);
  // 0x10: u32
  if (data?.NumInputStreamDescs !== undefined) view.setUint32(16, Number(data.NumInputStreamDescs), true);
  // 0x14: pad4
  // 0x18: pointer
  if (data?.pInputStreamDescs !== undefined) view.setBigUint64(24, data.pInputStreamDescs === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.pInputStreamDescs))), true);
  // 0x20: u64
  if (data?.MemoryPoolL0Size !== undefined) view.setBigUint64(32, BigInt(data.MemoryPoolL0Size), true);
  // 0x28: u64
  if (data?.MemoryPoolL1Size !== undefined) view.setBigUint64(40, BigInt(data.MemoryPoolL1Size), true);
  return buf;
}

export class D3D12_FEATURE_DATA_VIDEO_PROCESSOR_SIZEView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get NodeMask(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  get pOutputStreamDesc(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x10: u32
  get NumInputStreamDescs(): number {
    return this.view.getUint32(16, true);
  }

  // 0x14: pad4

  // 0x18: pointer
  get pInputStreamDescs(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(24, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x20: u64
  get MemoryPoolL0Size(): bigint | number {
    return Number(this.view.getBigUint64(32, true));
  }

  // 0x28: u64
  get MemoryPoolL1Size(): bigint | number {
    return Number(this.view.getBigUint64(40, true));
  }

  // 0x00: u32
  set NodeMask(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  set pOutputStreamDesc(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x10: u32
  set NumInputStreamDescs(value: number) {
    this.view.setUint32(16, value, true);
  }

  // 0x14: pad4

  // 0x18: pointer
  set pInputStreamDescs(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(24, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x20: u64
  set MemoryPoolL0Size(value: bigint | number) {
    this.view.setBigUint64(32, BigInt(value), true);
  }

  // 0x28: u64
  set MemoryPoolL1Size(value: bigint | number) {
    this.view.setBigUint64(40, BigInt(value), true);
  }
}

/**
 * Windows.Win32.Media.MediaFoundation.D3D12_QUERY_DATA_VIDEO_DECODE_STATISTICS (size: 32)
 */
export interface D3D12_QUERY_DATA_VIDEO_DECODE_STATISTICS {
  /** u64 */
  Status: bigint | number;
  /** u64 */
  NumMacroblocksAffected: bigint | number;
  /** Windows.Win32.Graphics.Dxgi.Common.DXGI_RATIONAL */
  FrameRate: Uint8Array | Deno.PointerValue;
  /** u32 */
  BitRate: number;
}

export const sizeofD3D12_QUERY_DATA_VIDEO_DECODE_STATISTICS = 32;

export function allocD3D12_QUERY_DATA_VIDEO_DECODE_STATISTICS(data?: Partial<D3D12_QUERY_DATA_VIDEO_DECODE_STATISTICS>): Uint8Array {
  const buf = new Uint8Array(sizeofD3D12_QUERY_DATA_VIDEO_DECODE_STATISTICS);
  const view = new DataView(buf.buffer);
  // 0x00: u64
  if (data?.Status !== undefined) view.setBigUint64(0, BigInt(data.Status), true);
  // 0x08: u64
  if (data?.NumMacroblocksAffected !== undefined) view.setBigUint64(8, BigInt(data.NumMacroblocksAffected), true);
  // 0x10: pointer
  if (data?.FrameRate !== undefined) view.setBigUint64(16, data.FrameRate === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.FrameRate))), true);
  // 0x18: u32
  if (data?.BitRate !== undefined) view.setUint32(24, Number(data.BitRate), true);
  // 0x1c: pad4
  return buf;
}

export class D3D12_QUERY_DATA_VIDEO_DECODE_STATISTICSView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u64
  get Status(): bigint | number {
    return Number(this.view.getBigUint64(0, true));
  }

  // 0x08: u64
  get NumMacroblocksAffected(): bigint | number {
    return Number(this.view.getBigUint64(8, true));
  }

  // 0x10: pointer
  get FrameRate(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(16, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x18: u32
  get BitRate(): number {
    return this.view.getUint32(24, true);
  }

  // 0x1c: pad4

  // 0x00: u64
  set Status(value: bigint | number) {
    this.view.setBigUint64(0, BigInt(value), true);
  }

  // 0x08: u64
  set NumMacroblocksAffected(value: bigint | number) {
    this.view.setBigUint64(8, BigInt(value), true);
  }

  // 0x10: pointer
  set FrameRate(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(16, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x18: u32
  set BitRate(value: number) {
    this.view.setUint32(24, value, true);
  }

  // 0x1c: pad4
}

/**
 * Windows.Win32.Media.MediaFoundation.D3D12_VIDEO_DECODE_FRAME_ARGUMENT (size: 16)
 */
export interface D3D12_VIDEO_DECODE_FRAME_ARGUMENT {
  /** Windows.Win32.Media.MediaFoundation.D3D12_VIDEO_DECODE_ARGUMENT_TYPE */
  Type: D3D12_VIDEO_DECODE_ARGUMENT_TYPE;
  /** u32 */
  Size: number;
  /** ptr */
  pData: Deno.PointerValue | Uint8Array;
}

export const sizeofD3D12_VIDEO_DECODE_FRAME_ARGUMENT = 16;

export function allocD3D12_VIDEO_DECODE_FRAME_ARGUMENT(data?: Partial<D3D12_VIDEO_DECODE_FRAME_ARGUMENT>): Uint8Array {
  const buf = new Uint8Array(sizeofD3D12_VIDEO_DECODE_FRAME_ARGUMENT);
  const view = new DataView(buf.buffer);
  // 0x00: i32
  if (data?.Type !== undefined) view.setInt32(0, Number(data.Type), true);
  // 0x04: u32
  if (data?.Size !== undefined) view.setUint32(4, Number(data.Size), true);
  // 0x08: pointer
  if (data?.pData !== undefined) view.setBigUint64(8, data.pData === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.pData))), true);
  return buf;
}

export class D3D12_VIDEO_DECODE_FRAME_ARGUMENTView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: i32
  get Type(): number {
    return this.view.getInt32(0, true);
  }

  // 0x04: u32
  get Size(): number {
    return this.view.getUint32(4, true);
  }

  // 0x08: pointer
  get pData(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: i32
  set Type(value: number) {
    this.view.setInt32(0, value, true);
  }

  // 0x04: u32
  set Size(value: number) {
    this.view.setUint32(4, value, true);
  }

  // 0x08: pointer
  set pData(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.Media.MediaFoundation.D3D12_VIDEO_DECODE_REFERENCE_FRAMES (size: 32)
 */
export interface D3D12_VIDEO_DECODE_REFERENCE_FRAMES {
  /** u32 */
  NumTexture2Ds: number;
  /** ptr */
  ppTexture2Ds: Deno.PointerValue | Uint8Array;
  /** ptr */
  pSubresources: Deno.PointerValue | Uint8Array;
  /** ptr */
  ppHeaps: Deno.PointerValue | Uint8Array;
}

export const sizeofD3D12_VIDEO_DECODE_REFERENCE_FRAMES = 32;

export function allocD3D12_VIDEO_DECODE_REFERENCE_FRAMES(data?: Partial<D3D12_VIDEO_DECODE_REFERENCE_FRAMES>): Uint8Array {
  const buf = new Uint8Array(sizeofD3D12_VIDEO_DECODE_REFERENCE_FRAMES);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.NumTexture2Ds !== undefined) view.setUint32(0, Number(data.NumTexture2Ds), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.ppTexture2Ds !== undefined) view.setBigUint64(8, data.ppTexture2Ds === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.ppTexture2Ds))), true);
  // 0x10: pointer
  if (data?.pSubresources !== undefined) view.setBigUint64(16, data.pSubresources === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.pSubresources))), true);
  // 0x18: pointer
  if (data?.ppHeaps !== undefined) view.setBigUint64(24, data.ppHeaps === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.ppHeaps))), true);
  return buf;
}

export class D3D12_VIDEO_DECODE_REFERENCE_FRAMESView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get NumTexture2Ds(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  get ppTexture2Ds(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x10: pointer
  get pSubresources(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(16, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x18: pointer
  get ppHeaps(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(24, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: u32
  set NumTexture2Ds(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  set ppTexture2Ds(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x10: pointer
  set pSubresources(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(16, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x18: pointer
  set ppHeaps(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(24, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.Media.MediaFoundation.D3D12_VIDEO_DECODE_COMPRESSED_BITSTREAM (size: 24)
 */
export interface D3D12_VIDEO_DECODE_COMPRESSED_BITSTREAM {
  /** Windows.Win32.Graphics.Direct3D12.ID3D12Resource */
  pBuffer: Uint8Array | Deno.PointerValue;
  /** u64 */
  Offset: bigint | number;
  /** u64 */
  Size: bigint | number;
}

export const sizeofD3D12_VIDEO_DECODE_COMPRESSED_BITSTREAM = 24;

export function allocD3D12_VIDEO_DECODE_COMPRESSED_BITSTREAM(data?: Partial<D3D12_VIDEO_DECODE_COMPRESSED_BITSTREAM>): Uint8Array {
  const buf = new Uint8Array(sizeofD3D12_VIDEO_DECODE_COMPRESSED_BITSTREAM);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.pBuffer !== undefined) view.setBigUint64(0, data.pBuffer === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.pBuffer))), true);
  // 0x08: u64
  if (data?.Offset !== undefined) view.setBigUint64(8, BigInt(data.Offset), true);
  // 0x10: u64
  if (data?.Size !== undefined) view.setBigUint64(16, BigInt(data.Size), true);
  return buf;
}

export class D3D12_VIDEO_DECODE_COMPRESSED_BITSTREAMView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get pBuffer(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(0, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x08: u64
  get Offset(): bigint | number {
    return Number(this.view.getBigUint64(8, true));
  }

  // 0x10: u64
  get Size(): bigint | number {
    return Number(this.view.getBigUint64(16, true));
  }

  // 0x00: pointer
  set pBuffer(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(0, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x08: u64
  set Offset(value: bigint | number) {
    this.view.setBigUint64(8, BigInt(value), true);
  }

  // 0x10: u64
  set Size(value: bigint | number) {
    this.view.setBigUint64(16, BigInt(value), true);
  }
}

/**
 * Windows.Win32.Media.MediaFoundation.D3D12_VIDEO_DECODE_CONVERSION_ARGUMENTS (size: 32)
 */
export interface D3D12_VIDEO_DECODE_CONVERSION_ARGUMENTS {
  /** Windows.Win32.Foundation.BOOL */
  Enable: boolean;
  /** Windows.Win32.Graphics.Direct3D12.ID3D12Resource */
  pReferenceTexture2D: Uint8Array | Deno.PointerValue;
  /** u32 */
  ReferenceSubresource: number;
  /** Windows.Win32.Graphics.Dxgi.Common.DXGI_COLOR_SPACE_TYPE */
  OutputColorSpace: DXGI_COLOR_SPACE_TYPE;
  /** Windows.Win32.Graphics.Dxgi.Common.DXGI_COLOR_SPACE_TYPE */
  DecodeColorSpace: DXGI_COLOR_SPACE_TYPE;
}

export const sizeofD3D12_VIDEO_DECODE_CONVERSION_ARGUMENTS = 32;

export function allocD3D12_VIDEO_DECODE_CONVERSION_ARGUMENTS(data?: Partial<D3D12_VIDEO_DECODE_CONVERSION_ARGUMENTS>): Uint8Array {
  const buf = new Uint8Array(sizeofD3D12_VIDEO_DECODE_CONVERSION_ARGUMENTS);
  const view = new DataView(buf.buffer);
  // 0x00: i32
  if (data?.Enable !== undefined) view.setInt32(0, Number(data.Enable), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.pReferenceTexture2D !== undefined) view.setBigUint64(8, data.pReferenceTexture2D === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.pReferenceTexture2D))), true);
  // 0x10: u32
  if (data?.ReferenceSubresource !== undefined) view.setUint32(16, Number(data.ReferenceSubresource), true);
  // 0x14: i32
  if (data?.OutputColorSpace !== undefined) view.setInt32(20, Number(data.OutputColorSpace), true);
  // 0x18: i32
  if (data?.DecodeColorSpace !== undefined) view.setInt32(24, Number(data.DecodeColorSpace), true);
  // 0x1c: pad4
  return buf;
}

export class D3D12_VIDEO_DECODE_CONVERSION_ARGUMENTSView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: i32
  get Enable(): number {
    return this.view.getInt32(0, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  get pReferenceTexture2D(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x10: u32
  get ReferenceSubresource(): number {
    return this.view.getUint32(16, true);
  }

  // 0x14: i32
  get OutputColorSpace(): number {
    return this.view.getInt32(20, true);
  }

  // 0x18: i32
  get DecodeColorSpace(): number {
    return this.view.getInt32(24, true);
  }

  // 0x1c: pad4

  // 0x00: i32
  set Enable(value: number) {
    this.view.setInt32(0, value, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  set pReferenceTexture2D(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x10: u32
  set ReferenceSubresource(value: number) {
    this.view.setUint32(16, value, true);
  }

  // 0x14: i32
  set OutputColorSpace(value: number) {
    this.view.setInt32(20, value, true);
  }

  // 0x18: i32
  set DecodeColorSpace(value: number) {
    this.view.setInt32(24, value, true);
  }

  // 0x1c: pad4
}

/**
 * Windows.Win32.Media.MediaFoundation.D3D12_VIDEO_DECODE_INPUT_STREAM_ARGUMENTS (size: 40)
 */
export interface D3D12_VIDEO_DECODE_INPUT_STREAM_ARGUMENTS {
  /** u32 */
  NumFrameArguments: number;
  /** array */
  FrameArguments: Deno.PointerValue;
  /** Windows.Win32.Media.MediaFoundation.D3D12_VIDEO_DECODE_REFERENCE_FRAMES */
  ReferenceFrames: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.Media.MediaFoundation.D3D12_VIDEO_DECODE_COMPRESSED_BITSTREAM */
  CompressedBitstream: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.Media.MediaFoundation.ID3D12VideoDecoderHeap */
  pHeap: Uint8Array | Deno.PointerValue;
}

export const sizeofD3D12_VIDEO_DECODE_INPUT_STREAM_ARGUMENTS = 40;

export function allocD3D12_VIDEO_DECODE_INPUT_STREAM_ARGUMENTS(data?: Partial<D3D12_VIDEO_DECODE_INPUT_STREAM_ARGUMENTS>): Uint8Array {
  const buf = new Uint8Array(sizeofD3D12_VIDEO_DECODE_INPUT_STREAM_ARGUMENTS);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.NumFrameArguments !== undefined) view.setUint32(0, Number(data.NumFrameArguments), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.FrameArguments !== undefined) view.setBigUint64(8, data.FrameArguments === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.FrameArguments))), true);
  // 0x10: pointer
  if (data?.ReferenceFrames !== undefined) view.setBigUint64(16, data.ReferenceFrames === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.ReferenceFrames))), true);
  // 0x18: pointer
  if (data?.CompressedBitstream !== undefined) view.setBigUint64(24, data.CompressedBitstream === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.CompressedBitstream))), true);
  // 0x20: pointer
  if (data?.pHeap !== undefined) view.setBigUint64(32, data.pHeap === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.pHeap))), true);
  return buf;
}

export class D3D12_VIDEO_DECODE_INPUT_STREAM_ARGUMENTSView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get NumFrameArguments(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  get FrameArguments(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x10: pointer
  get ReferenceFrames(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(16, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x18: pointer
  get CompressedBitstream(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(24, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x20: pointer
  get pHeap(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(32, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: u32
  set NumFrameArguments(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  set FrameArguments(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x10: pointer
  set ReferenceFrames(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(16, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x18: pointer
  set CompressedBitstream(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(24, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x20: pointer
  set pHeap(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(32, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.Media.MediaFoundation.D3D12_VIDEO_DECODE_OUTPUT_STREAM_ARGUMENTS (size: 24)
 */
export interface D3D12_VIDEO_DECODE_OUTPUT_STREAM_ARGUMENTS {
  /** Windows.Win32.Graphics.Direct3D12.ID3D12Resource */
  pOutputTexture2D: Uint8Array | Deno.PointerValue;
  /** u32 */
  OutputSubresource: number;
  /** Windows.Win32.Media.MediaFoundation.D3D12_VIDEO_DECODE_CONVERSION_ARGUMENTS */
  ConversionArguments: Uint8Array | Deno.PointerValue;
}

export const sizeofD3D12_VIDEO_DECODE_OUTPUT_STREAM_ARGUMENTS = 24;

export function allocD3D12_VIDEO_DECODE_OUTPUT_STREAM_ARGUMENTS(data?: Partial<D3D12_VIDEO_DECODE_OUTPUT_STREAM_ARGUMENTS>): Uint8Array {
  const buf = new Uint8Array(sizeofD3D12_VIDEO_DECODE_OUTPUT_STREAM_ARGUMENTS);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.pOutputTexture2D !== undefined) view.setBigUint64(0, data.pOutputTexture2D === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.pOutputTexture2D))), true);
  // 0x08: u32
  if (data?.OutputSubresource !== undefined) view.setUint32(8, Number(data.OutputSubresource), true);
  // 0x0c: pad4
  // 0x10: pointer
  if (data?.ConversionArguments !== undefined) view.setBigUint64(16, data.ConversionArguments === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.ConversionArguments))), true);
  return buf;
}

export class D3D12_VIDEO_DECODE_OUTPUT_STREAM_ARGUMENTSView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get pOutputTexture2D(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(0, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x08: u32
  get OutputSubresource(): number {
    return this.view.getUint32(8, true);
  }

  // 0x0c: pad4

  // 0x10: pointer
  get ConversionArguments(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(16, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: pointer
  set pOutputTexture2D(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(0, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x08: u32
  set OutputSubresource(value: number) {
    this.view.setUint32(8, value, true);
  }

  // 0x0c: pad4

  // 0x10: pointer
  set ConversionArguments(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(16, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.Media.MediaFoundation.D3D12_VIDEO_PROCESS_FILTER_RANGE (size: 16)
 */
export interface D3D12_VIDEO_PROCESS_FILTER_RANGE {
  /** i32 */
  Minimum: number;
  /** i32 */
  Maximum: number;
  /** i32 */
  Default: number;
  /** f32 */
  Multiplier: number;
}

export const sizeofD3D12_VIDEO_PROCESS_FILTER_RANGE = 16;

export function allocD3D12_VIDEO_PROCESS_FILTER_RANGE(data?: Partial<D3D12_VIDEO_PROCESS_FILTER_RANGE>): Uint8Array {
  const buf = new Uint8Array(sizeofD3D12_VIDEO_PROCESS_FILTER_RANGE);
  const view = new DataView(buf.buffer);
  // 0x00: i32
  if (data?.Minimum !== undefined) view.setInt32(0, Number(data.Minimum), true);
  // 0x04: i32
  if (data?.Maximum !== undefined) view.setInt32(4, Number(data.Maximum), true);
  // 0x08: i32
  if (data?.Default !== undefined) view.setInt32(8, Number(data.Default), true);
  // 0x0c: f32
  if (data?.Multiplier !== undefined) view.setFloat32(12, Number(data.Multiplier), true);
  return buf;
}

export class D3D12_VIDEO_PROCESS_FILTER_RANGEView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: i32
  get Minimum(): number {
    return this.view.getInt32(0, true);
  }

  // 0x04: i32
  get Maximum(): number {
    return this.view.getInt32(4, true);
  }

  // 0x08: i32
  get Default(): number {
    return this.view.getInt32(8, true);
  }

  // 0x0c: f32
  get Multiplier(): number {
    return this.view.getFloat32(12, true);
  }

  // 0x00: i32
  set Minimum(value: number) {
    this.view.setInt32(0, value, true);
  }

  // 0x04: i32
  set Maximum(value: number) {
    this.view.setInt32(4, value, true);
  }

  // 0x08: i32
  set Default(value: number) {
    this.view.setInt32(8, value, true);
  }

  // 0x0c: f32
  set Multiplier(value: number) {
    this.view.setFloat32(12, value, true);
  }
}

/**
 * Windows.Win32.Media.MediaFoundation.D3D12_FEATURE_DATA_VIDEO_PROCESS_SUPPORT (size: 96)
 */
export interface D3D12_FEATURE_DATA_VIDEO_PROCESS_SUPPORT {
  /** u32 */
  NodeIndex: number;
  /** Windows.Win32.Media.MediaFoundation.D3D12_VIDEO_SAMPLE */
  InputSample: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.Media.MediaFoundation.D3D12_VIDEO_FIELD_TYPE */
  InputFieldType: D3D12_VIDEO_FIELD_TYPE;
  /** Windows.Win32.Media.MediaFoundation.D3D12_VIDEO_FRAME_STEREO_FORMAT */
  InputStereoFormat: D3D12_VIDEO_FRAME_STEREO_FORMAT;
  /** Windows.Win32.Graphics.Dxgi.Common.DXGI_RATIONAL */
  InputFrameRate: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.Media.MediaFoundation.D3D12_VIDEO_FORMAT */
  OutputFormat: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.Media.MediaFoundation.D3D12_VIDEO_FRAME_STEREO_FORMAT */
  OutputStereoFormat: D3D12_VIDEO_FRAME_STEREO_FORMAT;
  /** Windows.Win32.Graphics.Dxgi.Common.DXGI_RATIONAL */
  OutputFrameRate: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.Media.MediaFoundation.D3D12_VIDEO_PROCESS_SUPPORT_FLAGS */
  SupportFlags: D3D12_VIDEO_PROCESS_SUPPORT_FLAGS;
  /** Windows.Win32.Media.MediaFoundation.D3D12_VIDEO_SCALE_SUPPORT */
  ScaleSupport: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.Media.MediaFoundation.D3D12_VIDEO_PROCESS_FEATURE_FLAGS */
  FeatureSupport: D3D12_VIDEO_PROCESS_FEATURE_FLAGS;
  /** Windows.Win32.Media.MediaFoundation.D3D12_VIDEO_PROCESS_DEINTERLACE_FLAGS */
  DeinterlaceSupport: D3D12_VIDEO_PROCESS_DEINTERLACE_FLAGS;
  /** Windows.Win32.Media.MediaFoundation.D3D12_VIDEO_PROCESS_AUTO_PROCESSING_FLAGS */
  AutoProcessingSupport: D3D12_VIDEO_PROCESS_AUTO_PROCESSING_FLAGS;
  /** Windows.Win32.Media.MediaFoundation.D3D12_VIDEO_PROCESS_FILTER_FLAGS */
  FilterSupport: D3D12_VIDEO_PROCESS_FILTER_FLAGS;
  /** array */
  FilterRangeSupport: Deno.PointerValue;
}

export const sizeofD3D12_FEATURE_DATA_VIDEO_PROCESS_SUPPORT = 96;

export function allocD3D12_FEATURE_DATA_VIDEO_PROCESS_SUPPORT(data?: Partial<D3D12_FEATURE_DATA_VIDEO_PROCESS_SUPPORT>): Uint8Array {
  const buf = new Uint8Array(sizeofD3D12_FEATURE_DATA_VIDEO_PROCESS_SUPPORT);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.NodeIndex !== undefined) view.setUint32(0, Number(data.NodeIndex), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.InputSample !== undefined) view.setBigUint64(8, data.InputSample === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.InputSample))), true);
  // 0x10: i32
  if (data?.InputFieldType !== undefined) view.setInt32(16, Number(data.InputFieldType), true);
  // 0x14: i32
  if (data?.InputStereoFormat !== undefined) view.setInt32(20, Number(data.InputStereoFormat), true);
  // 0x18: pointer
  if (data?.InputFrameRate !== undefined) view.setBigUint64(24, data.InputFrameRate === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.InputFrameRate))), true);
  // 0x20: pointer
  if (data?.OutputFormat !== undefined) view.setBigUint64(32, data.OutputFormat === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.OutputFormat))), true);
  // 0x28: i32
  if (data?.OutputStereoFormat !== undefined) view.setInt32(40, Number(data.OutputStereoFormat), true);
  // 0x2c: pad4
  // 0x30: pointer
  if (data?.OutputFrameRate !== undefined) view.setBigUint64(48, data.OutputFrameRate === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.OutputFrameRate))), true);
  // 0x38: u32
  if (data?.SupportFlags !== undefined) view.setUint32(56, Number(data.SupportFlags), true);
  // 0x3c: pad4
  // 0x40: pointer
  if (data?.ScaleSupport !== undefined) view.setBigUint64(64, data.ScaleSupport === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.ScaleSupport))), true);
  // 0x48: u32
  if (data?.FeatureSupport !== undefined) view.setUint32(72, Number(data.FeatureSupport), true);
  // 0x4c: u32
  if (data?.DeinterlaceSupport !== undefined) view.setUint32(76, Number(data.DeinterlaceSupport), true);
  // 0x50: u32
  if (data?.AutoProcessingSupport !== undefined) view.setUint32(80, Number(data.AutoProcessingSupport), true);
  // 0x54: u32
  if (data?.FilterSupport !== undefined) view.setUint32(84, Number(data.FilterSupport), true);
  // 0x58: pointer
  if (data?.FilterRangeSupport !== undefined) view.setBigUint64(88, data.FilterRangeSupport === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.FilterRangeSupport))), true);
  return buf;
}

export class D3D12_FEATURE_DATA_VIDEO_PROCESS_SUPPORTView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get NodeIndex(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  get InputSample(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x10: i32
  get InputFieldType(): number {
    return this.view.getInt32(16, true);
  }

  // 0x14: i32
  get InputStereoFormat(): number {
    return this.view.getInt32(20, true);
  }

  // 0x18: pointer
  get InputFrameRate(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(24, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x20: pointer
  get OutputFormat(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(32, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x28: i32
  get OutputStereoFormat(): number {
    return this.view.getInt32(40, true);
  }

  // 0x2c: pad4

  // 0x30: pointer
  get OutputFrameRate(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(48, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x38: u32
  get SupportFlags(): number {
    return this.view.getUint32(56, true);
  }

  // 0x3c: pad4

  // 0x40: pointer
  get ScaleSupport(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(64, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x48: u32
  get FeatureSupport(): number {
    return this.view.getUint32(72, true);
  }

  // 0x4c: u32
  get DeinterlaceSupport(): number {
    return this.view.getUint32(76, true);
  }

  // 0x50: u32
  get AutoProcessingSupport(): number {
    return this.view.getUint32(80, true);
  }

  // 0x54: u32
  get FilterSupport(): number {
    return this.view.getUint32(84, true);
  }

  // 0x58: pointer
  get FilterRangeSupport(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(88, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: u32
  set NodeIndex(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  set InputSample(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x10: i32
  set InputFieldType(value: number) {
    this.view.setInt32(16, value, true);
  }

  // 0x14: i32
  set InputStereoFormat(value: number) {
    this.view.setInt32(20, value, true);
  }

  // 0x18: pointer
  set InputFrameRate(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(24, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x20: pointer
  set OutputFormat(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(32, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x28: i32
  set OutputStereoFormat(value: number) {
    this.view.setInt32(40, value, true);
  }

  // 0x2c: pad4

  // 0x30: pointer
  set OutputFrameRate(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(48, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x38: u32
  set SupportFlags(value: number) {
    this.view.setUint32(56, value, true);
  }

  // 0x3c: pad4

  // 0x40: pointer
  set ScaleSupport(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(64, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x48: u32
  set FeatureSupport(value: number) {
    this.view.setUint32(72, value, true);
  }

  // 0x4c: u32
  set DeinterlaceSupport(value: number) {
    this.view.setUint32(76, value, true);
  }

  // 0x50: u32
  set AutoProcessingSupport(value: number) {
    this.view.setUint32(80, value, true);
  }

  // 0x54: u32
  set FilterSupport(value: number) {
    this.view.setUint32(84, value, true);
  }

  // 0x58: pointer
  set FilterRangeSupport(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(88, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.Media.MediaFoundation.D3D12_FEATURE_DATA_VIDEO_PROCESS_MAX_INPUT_STREAMS (size: 8)
 */
export interface D3D12_FEATURE_DATA_VIDEO_PROCESS_MAX_INPUT_STREAMS {
  /** u32 */
  NodeIndex: number;
  /** u32 */
  MaxInputStreams: number;
}

export const sizeofD3D12_FEATURE_DATA_VIDEO_PROCESS_MAX_INPUT_STREAMS = 8;

export function allocD3D12_FEATURE_DATA_VIDEO_PROCESS_MAX_INPUT_STREAMS(data?: Partial<D3D12_FEATURE_DATA_VIDEO_PROCESS_MAX_INPUT_STREAMS>): Uint8Array {
  const buf = new Uint8Array(sizeofD3D12_FEATURE_DATA_VIDEO_PROCESS_MAX_INPUT_STREAMS);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.NodeIndex !== undefined) view.setUint32(0, Number(data.NodeIndex), true);
  // 0x04: u32
  if (data?.MaxInputStreams !== undefined) view.setUint32(4, Number(data.MaxInputStreams), true);
  return buf;
}

export class D3D12_FEATURE_DATA_VIDEO_PROCESS_MAX_INPUT_STREAMSView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get NodeIndex(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: u32
  get MaxInputStreams(): number {
    return this.view.getUint32(4, true);
  }

  // 0x00: u32
  set NodeIndex(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: u32
  set MaxInputStreams(value: number) {
    this.view.setUint32(4, value, true);
  }
}

/**
 * Windows.Win32.Media.MediaFoundation.D3D12_FEATURE_DATA_VIDEO_PROCESS_REFERENCE_INFO (size: 48)
 */
export interface D3D12_FEATURE_DATA_VIDEO_PROCESS_REFERENCE_INFO {
  /** u32 */
  NodeIndex: number;
  /** Windows.Win32.Media.MediaFoundation.D3D12_VIDEO_PROCESS_DEINTERLACE_FLAGS */
  DeinterlaceMode: D3D12_VIDEO_PROCESS_DEINTERLACE_FLAGS;
  /** Windows.Win32.Media.MediaFoundation.D3D12_VIDEO_PROCESS_FILTER_FLAGS */
  Filters: D3D12_VIDEO_PROCESS_FILTER_FLAGS;
  /** Windows.Win32.Media.MediaFoundation.D3D12_VIDEO_PROCESS_FEATURE_FLAGS */
  FeatureSupport: D3D12_VIDEO_PROCESS_FEATURE_FLAGS;
  /** Windows.Win32.Graphics.Dxgi.Common.DXGI_RATIONAL */
  InputFrameRate: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.Graphics.Dxgi.Common.DXGI_RATIONAL */
  OutputFrameRate: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.Foundation.BOOL */
  EnableAutoProcessing: boolean;
  /** u32 */
  PastFrames: number;
  /** u32 */
  FutureFrames: number;
}

export const sizeofD3D12_FEATURE_DATA_VIDEO_PROCESS_REFERENCE_INFO = 48;

export function allocD3D12_FEATURE_DATA_VIDEO_PROCESS_REFERENCE_INFO(data?: Partial<D3D12_FEATURE_DATA_VIDEO_PROCESS_REFERENCE_INFO>): Uint8Array {
  const buf = new Uint8Array(sizeofD3D12_FEATURE_DATA_VIDEO_PROCESS_REFERENCE_INFO);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.NodeIndex !== undefined) view.setUint32(0, Number(data.NodeIndex), true);
  // 0x04: u32
  if (data?.DeinterlaceMode !== undefined) view.setUint32(4, Number(data.DeinterlaceMode), true);
  // 0x08: u32
  if (data?.Filters !== undefined) view.setUint32(8, Number(data.Filters), true);
  // 0x0c: u32
  if (data?.FeatureSupport !== undefined) view.setUint32(12, Number(data.FeatureSupport), true);
  // 0x10: pointer
  if (data?.InputFrameRate !== undefined) view.setBigUint64(16, data.InputFrameRate === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.InputFrameRate))), true);
  // 0x18: pointer
  if (data?.OutputFrameRate !== undefined) view.setBigUint64(24, data.OutputFrameRate === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.OutputFrameRate))), true);
  // 0x20: i32
  if (data?.EnableAutoProcessing !== undefined) view.setInt32(32, Number(data.EnableAutoProcessing), true);
  // 0x24: u32
  if (data?.PastFrames !== undefined) view.setUint32(36, Number(data.PastFrames), true);
  // 0x28: u32
  if (data?.FutureFrames !== undefined) view.setUint32(40, Number(data.FutureFrames), true);
  // 0x2c: pad4
  return buf;
}

export class D3D12_FEATURE_DATA_VIDEO_PROCESS_REFERENCE_INFOView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get NodeIndex(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: u32
  get DeinterlaceMode(): number {
    return this.view.getUint32(4, true);
  }

  // 0x08: u32
  get Filters(): number {
    return this.view.getUint32(8, true);
  }

  // 0x0c: u32
  get FeatureSupport(): number {
    return this.view.getUint32(12, true);
  }

  // 0x10: pointer
  get InputFrameRate(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(16, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x18: pointer
  get OutputFrameRate(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(24, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x20: i32
  get EnableAutoProcessing(): number {
    return this.view.getInt32(32, true);
  }

  // 0x24: u32
  get PastFrames(): number {
    return this.view.getUint32(36, true);
  }

  // 0x28: u32
  get FutureFrames(): number {
    return this.view.getUint32(40, true);
  }

  // 0x2c: pad4

  // 0x00: u32
  set NodeIndex(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: u32
  set DeinterlaceMode(value: number) {
    this.view.setUint32(4, value, true);
  }

  // 0x08: u32
  set Filters(value: number) {
    this.view.setUint32(8, value, true);
  }

  // 0x0c: u32
  set FeatureSupport(value: number) {
    this.view.setUint32(12, value, true);
  }

  // 0x10: pointer
  set InputFrameRate(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(16, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x18: pointer
  set OutputFrameRate(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(24, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x20: i32
  set EnableAutoProcessing(value: number) {
    this.view.setInt32(32, value, true);
  }

  // 0x24: u32
  set PastFrames(value: number) {
    this.view.setUint32(36, value, true);
  }

  // 0x28: u32
  set FutureFrames(value: number) {
    this.view.setUint32(40, value, true);
  }

  // 0x2c: pad4
}

/**
 * Windows.Win32.Media.MediaFoundation.D3D12_VIDEO_PROCESS_REFERENCE_SET (size: 48)
 */
export interface D3D12_VIDEO_PROCESS_REFERENCE_SET {
  /** u32 */
  NumPastFrames: number;
  /** ptr */
  ppPastFrames: Deno.PointerValue | Uint8Array;
  /** ptr */
  pPastSubresources: Deno.PointerValue | Uint8Array;
  /** u32 */
  NumFutureFrames: number;
  /** ptr */
  ppFutureFrames: Deno.PointerValue | Uint8Array;
  /** ptr */
  pFutureSubresources: Deno.PointerValue | Uint8Array;
}

export const sizeofD3D12_VIDEO_PROCESS_REFERENCE_SET = 48;

export function allocD3D12_VIDEO_PROCESS_REFERENCE_SET(data?: Partial<D3D12_VIDEO_PROCESS_REFERENCE_SET>): Uint8Array {
  const buf = new Uint8Array(sizeofD3D12_VIDEO_PROCESS_REFERENCE_SET);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.NumPastFrames !== undefined) view.setUint32(0, Number(data.NumPastFrames), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.ppPastFrames !== undefined) view.setBigUint64(8, data.ppPastFrames === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.ppPastFrames))), true);
  // 0x10: pointer
  if (data?.pPastSubresources !== undefined) view.setBigUint64(16, data.pPastSubresources === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.pPastSubresources))), true);
  // 0x18: u32
  if (data?.NumFutureFrames !== undefined) view.setUint32(24, Number(data.NumFutureFrames), true);
  // 0x1c: pad4
  // 0x20: pointer
  if (data?.ppFutureFrames !== undefined) view.setBigUint64(32, data.ppFutureFrames === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.ppFutureFrames))), true);
  // 0x28: pointer
  if (data?.pFutureSubresources !== undefined) view.setBigUint64(40, data.pFutureSubresources === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.pFutureSubresources))), true);
  return buf;
}

export class D3D12_VIDEO_PROCESS_REFERENCE_SETView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get NumPastFrames(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  get ppPastFrames(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x10: pointer
  get pPastSubresources(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(16, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x18: u32
  get NumFutureFrames(): number {
    return this.view.getUint32(24, true);
  }

  // 0x1c: pad4

  // 0x20: pointer
  get ppFutureFrames(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(32, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x28: pointer
  get pFutureSubresources(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(40, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: u32
  set NumPastFrames(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  set ppPastFrames(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x10: pointer
  set pPastSubresources(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(16, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x18: u32
  set NumFutureFrames(value: number) {
    this.view.setUint32(24, value, true);
  }

  // 0x1c: pad4

  // 0x20: pointer
  set ppFutureFrames(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(32, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x28: pointer
  set pFutureSubresources(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(40, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.Media.MediaFoundation.D3D12_VIDEO_PROCESS_TRANSFORM (size: 24)
 */
export interface D3D12_VIDEO_PROCESS_TRANSFORM {
  /** Windows.Win32.Foundation.RECT */
  SourceRectangle: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.Foundation.RECT */
  DestinationRectangle: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.Media.MediaFoundation.D3D12_VIDEO_PROCESS_ORIENTATION */
  Orientation: D3D12_VIDEO_PROCESS_ORIENTATION;
}

export const sizeofD3D12_VIDEO_PROCESS_TRANSFORM = 24;

export function allocD3D12_VIDEO_PROCESS_TRANSFORM(data?: Partial<D3D12_VIDEO_PROCESS_TRANSFORM>): Uint8Array {
  const buf = new Uint8Array(sizeofD3D12_VIDEO_PROCESS_TRANSFORM);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.SourceRectangle !== undefined) view.setBigUint64(0, data.SourceRectangle === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.SourceRectangle))), true);
  // 0x08: pointer
  if (data?.DestinationRectangle !== undefined) view.setBigUint64(8, data.DestinationRectangle === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.DestinationRectangle))), true);
  // 0x10: i32
  if (data?.Orientation !== undefined) view.setInt32(16, Number(data.Orientation), true);
  // 0x14: pad4
  return buf;
}

export class D3D12_VIDEO_PROCESS_TRANSFORMView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get SourceRectangle(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(0, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x08: pointer
  get DestinationRectangle(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x10: i32
  get Orientation(): number {
    return this.view.getInt32(16, true);
  }

  // 0x14: pad4

  // 0x00: pointer
  set SourceRectangle(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(0, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x08: pointer
  set DestinationRectangle(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x10: i32
  set Orientation(value: number) {
    this.view.setInt32(16, value, true);
  }

  // 0x14: pad4
}

/**
 * Windows.Win32.Media.MediaFoundation.D3D12_VIDEO_PROCESS_INPUT_STREAM_RATE (size: 8)
 */
export interface D3D12_VIDEO_PROCESS_INPUT_STREAM_RATE {
  /** u32 */
  OutputIndex: number;
  /** u32 */
  InputFrameOrField: number;
}

export const sizeofD3D12_VIDEO_PROCESS_INPUT_STREAM_RATE = 8;

export function allocD3D12_VIDEO_PROCESS_INPUT_STREAM_RATE(data?: Partial<D3D12_VIDEO_PROCESS_INPUT_STREAM_RATE>): Uint8Array {
  const buf = new Uint8Array(sizeofD3D12_VIDEO_PROCESS_INPUT_STREAM_RATE);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.OutputIndex !== undefined) view.setUint32(0, Number(data.OutputIndex), true);
  // 0x04: u32
  if (data?.InputFrameOrField !== undefined) view.setUint32(4, Number(data.InputFrameOrField), true);
  return buf;
}

export class D3D12_VIDEO_PROCESS_INPUT_STREAM_RATEView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get OutputIndex(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: u32
  get InputFrameOrField(): number {
    return this.view.getUint32(4, true);
  }

  // 0x00: u32
  set OutputIndex(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: u32
  set InputFrameOrField(value: number) {
    this.view.setUint32(4, value, true);
  }
}

/**
 * Windows.Win32.Media.MediaFoundation.D3D12_VIDEO_PROCESS_INPUT_STREAM (size: 24)
 */
export interface D3D12_VIDEO_PROCESS_INPUT_STREAM {
  /** Windows.Win32.Graphics.Direct3D12.ID3D12Resource */
  pTexture2D: Uint8Array | Deno.PointerValue;
  /** u32 */
  Subresource: number;
  /** Windows.Win32.Media.MediaFoundation.D3D12_VIDEO_PROCESS_REFERENCE_SET */
  ReferenceSet: Uint8Array | Deno.PointerValue;
}

export const sizeofD3D12_VIDEO_PROCESS_INPUT_STREAM = 24;

export function allocD3D12_VIDEO_PROCESS_INPUT_STREAM(data?: Partial<D3D12_VIDEO_PROCESS_INPUT_STREAM>): Uint8Array {
  const buf = new Uint8Array(sizeofD3D12_VIDEO_PROCESS_INPUT_STREAM);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.pTexture2D !== undefined) view.setBigUint64(0, data.pTexture2D === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.pTexture2D))), true);
  // 0x08: u32
  if (data?.Subresource !== undefined) view.setUint32(8, Number(data.Subresource), true);
  // 0x0c: pad4
  // 0x10: pointer
  if (data?.ReferenceSet !== undefined) view.setBigUint64(16, data.ReferenceSet === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.ReferenceSet))), true);
  return buf;
}

export class D3D12_VIDEO_PROCESS_INPUT_STREAMView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get pTexture2D(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(0, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x08: u32
  get Subresource(): number {
    return this.view.getUint32(8, true);
  }

  // 0x0c: pad4

  // 0x10: pointer
  get ReferenceSet(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(16, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: pointer
  set pTexture2D(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(0, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x08: u32
  set Subresource(value: number) {
    this.view.setUint32(8, value, true);
  }

  // 0x0c: pad4

  // 0x10: pointer
  set ReferenceSet(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(16, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.Media.MediaFoundation.D3D12_VIDEO_PROCESS_INPUT_STREAM_ARGUMENTS (size: 48)
 */
export interface D3D12_VIDEO_PROCESS_INPUT_STREAM_ARGUMENTS {
  /** array */
  InputStream: Deno.PointerValue;
  /** Windows.Win32.Media.MediaFoundation.D3D12_VIDEO_PROCESS_TRANSFORM */
  Transform: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.Media.MediaFoundation.D3D12_VIDEO_PROCESS_INPUT_STREAM_FLAGS */
  Flags: D3D12_VIDEO_PROCESS_INPUT_STREAM_FLAGS;
  /** Windows.Win32.Media.MediaFoundation.D3D12_VIDEO_PROCESS_INPUT_STREAM_RATE */
  RateInfo: Uint8Array | Deno.PointerValue;
  /** array */
  FilterLevels: Deno.PointerValue;
  /** Windows.Win32.Media.MediaFoundation.D3D12_VIDEO_PROCESS_ALPHA_BLENDING */
  AlphaBlending: Uint8Array | Deno.PointerValue;
}

export const sizeofD3D12_VIDEO_PROCESS_INPUT_STREAM_ARGUMENTS = 48;

export function allocD3D12_VIDEO_PROCESS_INPUT_STREAM_ARGUMENTS(data?: Partial<D3D12_VIDEO_PROCESS_INPUT_STREAM_ARGUMENTS>): Uint8Array {
  const buf = new Uint8Array(sizeofD3D12_VIDEO_PROCESS_INPUT_STREAM_ARGUMENTS);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.InputStream !== undefined) view.setBigUint64(0, data.InputStream === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.InputStream))), true);
  // 0x08: pointer
  if (data?.Transform !== undefined) view.setBigUint64(8, data.Transform === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.Transform))), true);
  // 0x10: u32
  if (data?.Flags !== undefined) view.setUint32(16, Number(data.Flags), true);
  // 0x14: pad4
  // 0x18: pointer
  if (data?.RateInfo !== undefined) view.setBigUint64(24, data.RateInfo === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.RateInfo))), true);
  // 0x20: pointer
  if (data?.FilterLevels !== undefined) view.setBigUint64(32, data.FilterLevels === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.FilterLevels))), true);
  // 0x28: pointer
  if (data?.AlphaBlending !== undefined) view.setBigUint64(40, data.AlphaBlending === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.AlphaBlending))), true);
  return buf;
}

export class D3D12_VIDEO_PROCESS_INPUT_STREAM_ARGUMENTSView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get InputStream(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(0, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x08: pointer
  get Transform(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x10: u32
  get Flags(): number {
    return this.view.getUint32(16, true);
  }

  // 0x14: pad4

  // 0x18: pointer
  get RateInfo(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(24, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x20: pointer
  get FilterLevels(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(32, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x28: pointer
  get AlphaBlending(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(40, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: pointer
  set InputStream(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(0, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x08: pointer
  set Transform(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x10: u32
  set Flags(value: number) {
    this.view.setUint32(16, value, true);
  }

  // 0x14: pad4

  // 0x18: pointer
  set RateInfo(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(24, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x20: pointer
  set FilterLevels(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(32, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x28: pointer
  set AlphaBlending(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(40, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.Media.MediaFoundation.D3D12_VIDEO_PROCESS_OUTPUT_STREAM (size: 16)
 */
export interface D3D12_VIDEO_PROCESS_OUTPUT_STREAM {
  /** Windows.Win32.Graphics.Direct3D12.ID3D12Resource */
  pTexture2D: Uint8Array | Deno.PointerValue;
  /** u32 */
  Subresource: number;
}

export const sizeofD3D12_VIDEO_PROCESS_OUTPUT_STREAM = 16;

export function allocD3D12_VIDEO_PROCESS_OUTPUT_STREAM(data?: Partial<D3D12_VIDEO_PROCESS_OUTPUT_STREAM>): Uint8Array {
  const buf = new Uint8Array(sizeofD3D12_VIDEO_PROCESS_OUTPUT_STREAM);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.pTexture2D !== undefined) view.setBigUint64(0, data.pTexture2D === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.pTexture2D))), true);
  // 0x08: u32
  if (data?.Subresource !== undefined) view.setUint32(8, Number(data.Subresource), true);
  // 0x0c: pad4
  return buf;
}

export class D3D12_VIDEO_PROCESS_OUTPUT_STREAMView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get pTexture2D(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(0, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x08: u32
  get Subresource(): number {
    return this.view.getUint32(8, true);
  }

  // 0x0c: pad4

  // 0x00: pointer
  set pTexture2D(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(0, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x08: u32
  set Subresource(value: number) {
    this.view.setUint32(8, value, true);
  }

  // 0x0c: pad4
}

/**
 * Windows.Win32.Media.MediaFoundation.D3D12_VIDEO_PROCESS_OUTPUT_STREAM_ARGUMENTS (size: 16)
 */
export interface D3D12_VIDEO_PROCESS_OUTPUT_STREAM_ARGUMENTS {
  /** array */
  OutputStream: Deno.PointerValue;
  /** Windows.Win32.Foundation.RECT */
  TargetRectangle: Uint8Array | Deno.PointerValue;
}

export const sizeofD3D12_VIDEO_PROCESS_OUTPUT_STREAM_ARGUMENTS = 16;

export function allocD3D12_VIDEO_PROCESS_OUTPUT_STREAM_ARGUMENTS(data?: Partial<D3D12_VIDEO_PROCESS_OUTPUT_STREAM_ARGUMENTS>): Uint8Array {
  const buf = new Uint8Array(sizeofD3D12_VIDEO_PROCESS_OUTPUT_STREAM_ARGUMENTS);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.OutputStream !== undefined) view.setBigUint64(0, data.OutputStream === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.OutputStream))), true);
  // 0x08: pointer
  if (data?.TargetRectangle !== undefined) view.setBigUint64(8, data.TargetRectangle === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.TargetRectangle))), true);
  return buf;
}

export class D3D12_VIDEO_PROCESS_OUTPUT_STREAM_ARGUMENTSView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get OutputStream(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(0, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x08: pointer
  get TargetRectangle(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: pointer
  set OutputStream(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(0, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x08: pointer
  set TargetRectangle(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.Media.MediaFoundation.D3D12_VIDEO_DECODE_OUTPUT_HISTOGRAM (size: 16)
 */
export interface D3D12_VIDEO_DECODE_OUTPUT_HISTOGRAM {
  /** u64 */
  Offset: bigint | number;
  /** Windows.Win32.Graphics.Direct3D12.ID3D12Resource */
  pBuffer: Uint8Array | Deno.PointerValue;
}

export const sizeofD3D12_VIDEO_DECODE_OUTPUT_HISTOGRAM = 16;

export function allocD3D12_VIDEO_DECODE_OUTPUT_HISTOGRAM(data?: Partial<D3D12_VIDEO_DECODE_OUTPUT_HISTOGRAM>): Uint8Array {
  const buf = new Uint8Array(sizeofD3D12_VIDEO_DECODE_OUTPUT_HISTOGRAM);
  const view = new DataView(buf.buffer);
  // 0x00: u64
  if (data?.Offset !== undefined) view.setBigUint64(0, BigInt(data.Offset), true);
  // 0x08: pointer
  if (data?.pBuffer !== undefined) view.setBigUint64(8, data.pBuffer === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.pBuffer))), true);
  return buf;
}

export class D3D12_VIDEO_DECODE_OUTPUT_HISTOGRAMView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u64
  get Offset(): bigint | number {
    return Number(this.view.getBigUint64(0, true));
  }

  // 0x08: pointer
  get pBuffer(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: u64
  set Offset(value: bigint | number) {
    this.view.setBigUint64(0, BigInt(value), true);
  }

  // 0x08: pointer
  set pBuffer(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.Media.MediaFoundation.D3D12_VIDEO_DECODE_CONVERSION_ARGUMENTS1 (size: 40)
 */
export interface D3D12_VIDEO_DECODE_CONVERSION_ARGUMENTS1 {
  /** Windows.Win32.Foundation.BOOL */
  Enable: boolean;
  /** Windows.Win32.Graphics.Direct3D12.ID3D12Resource */
  pReferenceTexture2D: Uint8Array | Deno.PointerValue;
  /** u32 */
  ReferenceSubresource: number;
  /** Windows.Win32.Graphics.Dxgi.Common.DXGI_COLOR_SPACE_TYPE */
  OutputColorSpace: DXGI_COLOR_SPACE_TYPE;
  /** Windows.Win32.Graphics.Dxgi.Common.DXGI_COLOR_SPACE_TYPE */
  DecodeColorSpace: DXGI_COLOR_SPACE_TYPE;
  /** u32 */
  OutputWidth: number;
  /** u32 */
  OutputHeight: number;
}

export const sizeofD3D12_VIDEO_DECODE_CONVERSION_ARGUMENTS1 = 40;

export function allocD3D12_VIDEO_DECODE_CONVERSION_ARGUMENTS1(data?: Partial<D3D12_VIDEO_DECODE_CONVERSION_ARGUMENTS1>): Uint8Array {
  const buf = new Uint8Array(sizeofD3D12_VIDEO_DECODE_CONVERSION_ARGUMENTS1);
  const view = new DataView(buf.buffer);
  // 0x00: i32
  if (data?.Enable !== undefined) view.setInt32(0, Number(data.Enable), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.pReferenceTexture2D !== undefined) view.setBigUint64(8, data.pReferenceTexture2D === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.pReferenceTexture2D))), true);
  // 0x10: u32
  if (data?.ReferenceSubresource !== undefined) view.setUint32(16, Number(data.ReferenceSubresource), true);
  // 0x14: i32
  if (data?.OutputColorSpace !== undefined) view.setInt32(20, Number(data.OutputColorSpace), true);
  // 0x18: i32
  if (data?.DecodeColorSpace !== undefined) view.setInt32(24, Number(data.DecodeColorSpace), true);
  // 0x1c: u32
  if (data?.OutputWidth !== undefined) view.setUint32(28, Number(data.OutputWidth), true);
  // 0x20: u32
  if (data?.OutputHeight !== undefined) view.setUint32(32, Number(data.OutputHeight), true);
  // 0x24: pad4
  return buf;
}

export class D3D12_VIDEO_DECODE_CONVERSION_ARGUMENTS1View {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: i32
  get Enable(): number {
    return this.view.getInt32(0, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  get pReferenceTexture2D(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x10: u32
  get ReferenceSubresource(): number {
    return this.view.getUint32(16, true);
  }

  // 0x14: i32
  get OutputColorSpace(): number {
    return this.view.getInt32(20, true);
  }

  // 0x18: i32
  get DecodeColorSpace(): number {
    return this.view.getInt32(24, true);
  }

  // 0x1c: u32
  get OutputWidth(): number {
    return this.view.getUint32(28, true);
  }

  // 0x20: u32
  get OutputHeight(): number {
    return this.view.getUint32(32, true);
  }

  // 0x24: pad4

  // 0x00: i32
  set Enable(value: number) {
    this.view.setInt32(0, value, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  set pReferenceTexture2D(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x10: u32
  set ReferenceSubresource(value: number) {
    this.view.setUint32(16, value, true);
  }

  // 0x14: i32
  set OutputColorSpace(value: number) {
    this.view.setInt32(20, value, true);
  }

  // 0x18: i32
  set DecodeColorSpace(value: number) {
    this.view.setInt32(24, value, true);
  }

  // 0x1c: u32
  set OutputWidth(value: number) {
    this.view.setUint32(28, value, true);
  }

  // 0x20: u32
  set OutputHeight(value: number) {
    this.view.setUint32(32, value, true);
  }

  // 0x24: pad4
}

/**
 * Windows.Win32.Media.MediaFoundation.D3D12_VIDEO_DECODE_OUTPUT_STREAM_ARGUMENTS1 (size: 32)
 */
export interface D3D12_VIDEO_DECODE_OUTPUT_STREAM_ARGUMENTS1 {
  /** Windows.Win32.Graphics.Direct3D12.ID3D12Resource */
  pOutputTexture2D: Uint8Array | Deno.PointerValue;
  /** u32 */
  OutputSubresource: number;
  /** Windows.Win32.Media.MediaFoundation.D3D12_VIDEO_DECODE_CONVERSION_ARGUMENTS1 */
  ConversionArguments: Uint8Array | Deno.PointerValue;
  /** array */
  Histograms: Deno.PointerValue;
}

export const sizeofD3D12_VIDEO_DECODE_OUTPUT_STREAM_ARGUMENTS1 = 32;

export function allocD3D12_VIDEO_DECODE_OUTPUT_STREAM_ARGUMENTS1(data?: Partial<D3D12_VIDEO_DECODE_OUTPUT_STREAM_ARGUMENTS1>): Uint8Array {
  const buf = new Uint8Array(sizeofD3D12_VIDEO_DECODE_OUTPUT_STREAM_ARGUMENTS1);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.pOutputTexture2D !== undefined) view.setBigUint64(0, data.pOutputTexture2D === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.pOutputTexture2D))), true);
  // 0x08: u32
  if (data?.OutputSubresource !== undefined) view.setUint32(8, Number(data.OutputSubresource), true);
  // 0x0c: pad4
  // 0x10: pointer
  if (data?.ConversionArguments !== undefined) view.setBigUint64(16, data.ConversionArguments === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.ConversionArguments))), true);
  // 0x18: pointer
  if (data?.Histograms !== undefined) view.setBigUint64(24, data.Histograms === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.Histograms))), true);
  return buf;
}

export class D3D12_VIDEO_DECODE_OUTPUT_STREAM_ARGUMENTS1View {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get pOutputTexture2D(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(0, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x08: u32
  get OutputSubresource(): number {
    return this.view.getUint32(8, true);
  }

  // 0x0c: pad4

  // 0x10: pointer
  get ConversionArguments(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(16, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x18: pointer
  get Histograms(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(24, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: pointer
  set pOutputTexture2D(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(0, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x08: u32
  set OutputSubresource(value: number) {
    this.view.setUint32(8, value, true);
  }

  // 0x0c: pad4

  // 0x10: pointer
  set ConversionArguments(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(16, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x18: pointer
  set Histograms(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(24, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.Media.MediaFoundation.D3D12_VIDEO_PROCESS_INPUT_STREAM_ARGUMENTS1 (size: 56)
 */
export interface D3D12_VIDEO_PROCESS_INPUT_STREAM_ARGUMENTS1 {
  /** array */
  InputStream: Deno.PointerValue;
  /** Windows.Win32.Media.MediaFoundation.D3D12_VIDEO_PROCESS_TRANSFORM */
  Transform: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.Media.MediaFoundation.D3D12_VIDEO_PROCESS_INPUT_STREAM_FLAGS */
  Flags: D3D12_VIDEO_PROCESS_INPUT_STREAM_FLAGS;
  /** Windows.Win32.Media.MediaFoundation.D3D12_VIDEO_PROCESS_INPUT_STREAM_RATE */
  RateInfo: Uint8Array | Deno.PointerValue;
  /** array */
  FilterLevels: Deno.PointerValue;
  /** Windows.Win32.Media.MediaFoundation.D3D12_VIDEO_PROCESS_ALPHA_BLENDING */
  AlphaBlending: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.Media.MediaFoundation.D3D12_VIDEO_FIELD_TYPE */
  FieldType: D3D12_VIDEO_FIELD_TYPE;
}

export const sizeofD3D12_VIDEO_PROCESS_INPUT_STREAM_ARGUMENTS1 = 56;

export function allocD3D12_VIDEO_PROCESS_INPUT_STREAM_ARGUMENTS1(data?: Partial<D3D12_VIDEO_PROCESS_INPUT_STREAM_ARGUMENTS1>): Uint8Array {
  const buf = new Uint8Array(sizeofD3D12_VIDEO_PROCESS_INPUT_STREAM_ARGUMENTS1);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.InputStream !== undefined) view.setBigUint64(0, data.InputStream === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.InputStream))), true);
  // 0x08: pointer
  if (data?.Transform !== undefined) view.setBigUint64(8, data.Transform === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.Transform))), true);
  // 0x10: u32
  if (data?.Flags !== undefined) view.setUint32(16, Number(data.Flags), true);
  // 0x14: pad4
  // 0x18: pointer
  if (data?.RateInfo !== undefined) view.setBigUint64(24, data.RateInfo === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.RateInfo))), true);
  // 0x20: pointer
  if (data?.FilterLevels !== undefined) view.setBigUint64(32, data.FilterLevels === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.FilterLevels))), true);
  // 0x28: pointer
  if (data?.AlphaBlending !== undefined) view.setBigUint64(40, data.AlphaBlending === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.AlphaBlending))), true);
  // 0x30: i32
  if (data?.FieldType !== undefined) view.setInt32(48, Number(data.FieldType), true);
  // 0x34: pad4
  return buf;
}

export class D3D12_VIDEO_PROCESS_INPUT_STREAM_ARGUMENTS1View {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get InputStream(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(0, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x08: pointer
  get Transform(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x10: u32
  get Flags(): number {
    return this.view.getUint32(16, true);
  }

  // 0x14: pad4

  // 0x18: pointer
  get RateInfo(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(24, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x20: pointer
  get FilterLevels(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(32, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x28: pointer
  get AlphaBlending(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(40, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x30: i32
  get FieldType(): number {
    return this.view.getInt32(48, true);
  }

  // 0x34: pad4

  // 0x00: pointer
  set InputStream(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(0, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x08: pointer
  set Transform(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x10: u32
  set Flags(value: number) {
    this.view.setUint32(16, value, true);
  }

  // 0x14: pad4

  // 0x18: pointer
  set RateInfo(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(24, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x20: pointer
  set FilterLevels(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(32, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x28: pointer
  set AlphaBlending(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(40, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x30: i32
  set FieldType(value: number) {
    this.view.setInt32(48, value, true);
  }

  // 0x34: pad4
}

/**
 * Windows.Win32.Media.MediaFoundation.D3D12_FEATURE_DATA_VIDEO_FEATURE_AREA_SUPPORT (size: 16)
 */
export interface D3D12_FEATURE_DATA_VIDEO_FEATURE_AREA_SUPPORT {
  /** u32 */
  NodeIndex: number;
  /** Windows.Win32.Foundation.BOOL */
  VideoDecodeSupport: boolean;
  /** Windows.Win32.Foundation.BOOL */
  VideoProcessSupport: boolean;
  /** Windows.Win32.Foundation.BOOL */
  VideoEncodeSupport: boolean;
}

export const sizeofD3D12_FEATURE_DATA_VIDEO_FEATURE_AREA_SUPPORT = 16;

export function allocD3D12_FEATURE_DATA_VIDEO_FEATURE_AREA_SUPPORT(data?: Partial<D3D12_FEATURE_DATA_VIDEO_FEATURE_AREA_SUPPORT>): Uint8Array {
  const buf = new Uint8Array(sizeofD3D12_FEATURE_DATA_VIDEO_FEATURE_AREA_SUPPORT);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.NodeIndex !== undefined) view.setUint32(0, Number(data.NodeIndex), true);
  // 0x04: i32
  if (data?.VideoDecodeSupport !== undefined) view.setInt32(4, Number(data.VideoDecodeSupport), true);
  // 0x08: i32
  if (data?.VideoProcessSupport !== undefined) view.setInt32(8, Number(data.VideoProcessSupport), true);
  // 0x0c: i32
  if (data?.VideoEncodeSupport !== undefined) view.setInt32(12, Number(data.VideoEncodeSupport), true);
  return buf;
}

export class D3D12_FEATURE_DATA_VIDEO_FEATURE_AREA_SUPPORTView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get NodeIndex(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: i32
  get VideoDecodeSupport(): number {
    return this.view.getInt32(4, true);
  }

  // 0x08: i32
  get VideoProcessSupport(): number {
    return this.view.getInt32(8, true);
  }

  // 0x0c: i32
  get VideoEncodeSupport(): number {
    return this.view.getInt32(12, true);
  }

  // 0x00: u32
  set NodeIndex(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: i32
  set VideoDecodeSupport(value: number) {
    this.view.setInt32(4, value, true);
  }

  // 0x08: i32
  set VideoProcessSupport(value: number) {
    this.view.setInt32(8, value, true);
  }

  // 0x0c: i32
  set VideoEncodeSupport(value: number) {
    this.view.setInt32(12, value, true);
  }
}

/**
 * Windows.Win32.Media.MediaFoundation.D3D12_FEATURE_DATA_VIDEO_MOTION_ESTIMATOR (size: 24)
 */
export interface D3D12_FEATURE_DATA_VIDEO_MOTION_ESTIMATOR {
  /** u32 */
  NodeIndex: number;
  /** Windows.Win32.Graphics.Dxgi.Common.DXGI_FORMAT */
  InputFormat: DXGI_FORMAT;
  /** Windows.Win32.Media.MediaFoundation.D3D12_VIDEO_MOTION_ESTIMATOR_SEARCH_BLOCK_SIZE_FLAGS */
  BlockSizeFlags: D3D12_VIDEO_MOTION_ESTIMATOR_SEARCH_BLOCK_SIZE_FLAGS;
  /** Windows.Win32.Media.MediaFoundation.D3D12_VIDEO_MOTION_ESTIMATOR_VECTOR_PRECISION_FLAGS */
  PrecisionFlags: D3D12_VIDEO_MOTION_ESTIMATOR_VECTOR_PRECISION_FLAGS;
  /** Windows.Win32.Media.MediaFoundation.D3D12_VIDEO_SIZE_RANGE */
  SizeRange: Uint8Array | Deno.PointerValue;
}

export const sizeofD3D12_FEATURE_DATA_VIDEO_MOTION_ESTIMATOR = 24;

export function allocD3D12_FEATURE_DATA_VIDEO_MOTION_ESTIMATOR(data?: Partial<D3D12_FEATURE_DATA_VIDEO_MOTION_ESTIMATOR>): Uint8Array {
  const buf = new Uint8Array(sizeofD3D12_FEATURE_DATA_VIDEO_MOTION_ESTIMATOR);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.NodeIndex !== undefined) view.setUint32(0, Number(data.NodeIndex), true);
  // 0x04: u32
  if (data?.InputFormat !== undefined) view.setUint32(4, Number(data.InputFormat), true);
  // 0x08: u32
  if (data?.BlockSizeFlags !== undefined) view.setUint32(8, Number(data.BlockSizeFlags), true);
  // 0x0c: u32
  if (data?.PrecisionFlags !== undefined) view.setUint32(12, Number(data.PrecisionFlags), true);
  // 0x10: pointer
  if (data?.SizeRange !== undefined) view.setBigUint64(16, data.SizeRange === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.SizeRange))), true);
  return buf;
}

export class D3D12_FEATURE_DATA_VIDEO_MOTION_ESTIMATORView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get NodeIndex(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: u32
  get InputFormat(): number {
    return this.view.getUint32(4, true);
  }

  // 0x08: u32
  get BlockSizeFlags(): number {
    return this.view.getUint32(8, true);
  }

  // 0x0c: u32
  get PrecisionFlags(): number {
    return this.view.getUint32(12, true);
  }

  // 0x10: pointer
  get SizeRange(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(16, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: u32
  set NodeIndex(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: u32
  set InputFormat(value: number) {
    this.view.setUint32(4, value, true);
  }

  // 0x08: u32
  set BlockSizeFlags(value: number) {
    this.view.setUint32(8, value, true);
  }

  // 0x0c: u32
  set PrecisionFlags(value: number) {
    this.view.setUint32(12, value, true);
  }

  // 0x10: pointer
  set SizeRange(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(16, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.Media.MediaFoundation.D3D12_FEATURE_DATA_VIDEO_MOTION_ESTIMATOR_SIZE (size: 64)
 */
export interface D3D12_FEATURE_DATA_VIDEO_MOTION_ESTIMATOR_SIZE {
  /** u32 */
  NodeIndex: number;
  /** Windows.Win32.Graphics.Dxgi.Common.DXGI_FORMAT */
  InputFormat: DXGI_FORMAT;
  /** Windows.Win32.Media.MediaFoundation.D3D12_VIDEO_MOTION_ESTIMATOR_SEARCH_BLOCK_SIZE */
  BlockSize: D3D12_VIDEO_MOTION_ESTIMATOR_SEARCH_BLOCK_SIZE;
  /** Windows.Win32.Media.MediaFoundation.D3D12_VIDEO_MOTION_ESTIMATOR_VECTOR_PRECISION */
  Precision: D3D12_VIDEO_MOTION_ESTIMATOR_VECTOR_PRECISION;
  /** Windows.Win32.Media.MediaFoundation.D3D12_VIDEO_SIZE_RANGE */
  SizeRange: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.Foundation.BOOL */
  Protected: boolean;
  /** u64 */
  MotionVectorHeapMemoryPoolL0Size: bigint | number;
  /** u64 */
  MotionVectorHeapMemoryPoolL1Size: bigint | number;
  /** u64 */
  MotionEstimatorMemoryPoolL0Size: bigint | number;
  /** u64 */
  MotionEstimatorMemoryPoolL1Size: bigint | number;
}

export const sizeofD3D12_FEATURE_DATA_VIDEO_MOTION_ESTIMATOR_SIZE = 64;

export function allocD3D12_FEATURE_DATA_VIDEO_MOTION_ESTIMATOR_SIZE(data?: Partial<D3D12_FEATURE_DATA_VIDEO_MOTION_ESTIMATOR_SIZE>): Uint8Array {
  const buf = new Uint8Array(sizeofD3D12_FEATURE_DATA_VIDEO_MOTION_ESTIMATOR_SIZE);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.NodeIndex !== undefined) view.setUint32(0, Number(data.NodeIndex), true);
  // 0x04: u32
  if (data?.InputFormat !== undefined) view.setUint32(4, Number(data.InputFormat), true);
  // 0x08: i32
  if (data?.BlockSize !== undefined) view.setInt32(8, Number(data.BlockSize), true);
  // 0x0c: i32
  if (data?.Precision !== undefined) view.setInt32(12, Number(data.Precision), true);
  // 0x10: pointer
  if (data?.SizeRange !== undefined) view.setBigUint64(16, data.SizeRange === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.SizeRange))), true);
  // 0x18: i32
  if (data?.Protected !== undefined) view.setInt32(24, Number(data.Protected), true);
  // 0x1c: pad4
  // 0x20: u64
  if (data?.MotionVectorHeapMemoryPoolL0Size !== undefined) view.setBigUint64(32, BigInt(data.MotionVectorHeapMemoryPoolL0Size), true);
  // 0x28: u64
  if (data?.MotionVectorHeapMemoryPoolL1Size !== undefined) view.setBigUint64(40, BigInt(data.MotionVectorHeapMemoryPoolL1Size), true);
  // 0x30: u64
  if (data?.MotionEstimatorMemoryPoolL0Size !== undefined) view.setBigUint64(48, BigInt(data.MotionEstimatorMemoryPoolL0Size), true);
  // 0x38: u64
  if (data?.MotionEstimatorMemoryPoolL1Size !== undefined) view.setBigUint64(56, BigInt(data.MotionEstimatorMemoryPoolL1Size), true);
  return buf;
}

export class D3D12_FEATURE_DATA_VIDEO_MOTION_ESTIMATOR_SIZEView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get NodeIndex(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: u32
  get InputFormat(): number {
    return this.view.getUint32(4, true);
  }

  // 0x08: i32
  get BlockSize(): number {
    return this.view.getInt32(8, true);
  }

  // 0x0c: i32
  get Precision(): number {
    return this.view.getInt32(12, true);
  }

  // 0x10: pointer
  get SizeRange(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(16, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x18: i32
  get Protected(): number {
    return this.view.getInt32(24, true);
  }

  // 0x1c: pad4

  // 0x20: u64
  get MotionVectorHeapMemoryPoolL0Size(): bigint | number {
    return Number(this.view.getBigUint64(32, true));
  }

  // 0x28: u64
  get MotionVectorHeapMemoryPoolL1Size(): bigint | number {
    return Number(this.view.getBigUint64(40, true));
  }

  // 0x30: u64
  get MotionEstimatorMemoryPoolL0Size(): bigint | number {
    return Number(this.view.getBigUint64(48, true));
  }

  // 0x38: u64
  get MotionEstimatorMemoryPoolL1Size(): bigint | number {
    return Number(this.view.getBigUint64(56, true));
  }

  // 0x00: u32
  set NodeIndex(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: u32
  set InputFormat(value: number) {
    this.view.setUint32(4, value, true);
  }

  // 0x08: i32
  set BlockSize(value: number) {
    this.view.setInt32(8, value, true);
  }

  // 0x0c: i32
  set Precision(value: number) {
    this.view.setInt32(12, value, true);
  }

  // 0x10: pointer
  set SizeRange(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(16, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x18: i32
  set Protected(value: number) {
    this.view.setInt32(24, value, true);
  }

  // 0x1c: pad4

  // 0x20: u64
  set MotionVectorHeapMemoryPoolL0Size(value: bigint | number) {
    this.view.setBigUint64(32, BigInt(value), true);
  }

  // 0x28: u64
  set MotionVectorHeapMemoryPoolL1Size(value: bigint | number) {
    this.view.setBigUint64(40, BigInt(value), true);
  }

  // 0x30: u64
  set MotionEstimatorMemoryPoolL0Size(value: bigint | number) {
    this.view.setBigUint64(48, BigInt(value), true);
  }

  // 0x38: u64
  set MotionEstimatorMemoryPoolL1Size(value: bigint | number) {
    this.view.setBigUint64(56, BigInt(value), true);
  }
}

/**
 * Windows.Win32.Media.MediaFoundation.D3D12_VIDEO_MOTION_ESTIMATOR_DESC (size: 24)
 */
export interface D3D12_VIDEO_MOTION_ESTIMATOR_DESC {
  /** u32 */
  NodeMask: number;
  /** Windows.Win32.Graphics.Dxgi.Common.DXGI_FORMAT */
  InputFormat: DXGI_FORMAT;
  /** Windows.Win32.Media.MediaFoundation.D3D12_VIDEO_MOTION_ESTIMATOR_SEARCH_BLOCK_SIZE */
  BlockSize: D3D12_VIDEO_MOTION_ESTIMATOR_SEARCH_BLOCK_SIZE;
  /** Windows.Win32.Media.MediaFoundation.D3D12_VIDEO_MOTION_ESTIMATOR_VECTOR_PRECISION */
  Precision: D3D12_VIDEO_MOTION_ESTIMATOR_VECTOR_PRECISION;
  /** Windows.Win32.Media.MediaFoundation.D3D12_VIDEO_SIZE_RANGE */
  SizeRange: Uint8Array | Deno.PointerValue;
}

export const sizeofD3D12_VIDEO_MOTION_ESTIMATOR_DESC = 24;

export function allocD3D12_VIDEO_MOTION_ESTIMATOR_DESC(data?: Partial<D3D12_VIDEO_MOTION_ESTIMATOR_DESC>): Uint8Array {
  const buf = new Uint8Array(sizeofD3D12_VIDEO_MOTION_ESTIMATOR_DESC);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.NodeMask !== undefined) view.setUint32(0, Number(data.NodeMask), true);
  // 0x04: u32
  if (data?.InputFormat !== undefined) view.setUint32(4, Number(data.InputFormat), true);
  // 0x08: i32
  if (data?.BlockSize !== undefined) view.setInt32(8, Number(data.BlockSize), true);
  // 0x0c: i32
  if (data?.Precision !== undefined) view.setInt32(12, Number(data.Precision), true);
  // 0x10: pointer
  if (data?.SizeRange !== undefined) view.setBigUint64(16, data.SizeRange === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.SizeRange))), true);
  return buf;
}

export class D3D12_VIDEO_MOTION_ESTIMATOR_DESCView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get NodeMask(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: u32
  get InputFormat(): number {
    return this.view.getUint32(4, true);
  }

  // 0x08: i32
  get BlockSize(): number {
    return this.view.getInt32(8, true);
  }

  // 0x0c: i32
  get Precision(): number {
    return this.view.getInt32(12, true);
  }

  // 0x10: pointer
  get SizeRange(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(16, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: u32
  set NodeMask(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: u32
  set InputFormat(value: number) {
    this.view.setUint32(4, value, true);
  }

  // 0x08: i32
  set BlockSize(value: number) {
    this.view.setInt32(8, value, true);
  }

  // 0x0c: i32
  set Precision(value: number) {
    this.view.setInt32(12, value, true);
  }

  // 0x10: pointer
  set SizeRange(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(16, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.Media.MediaFoundation.D3D12_VIDEO_MOTION_VECTOR_HEAP_DESC (size: 24)
 */
export interface D3D12_VIDEO_MOTION_VECTOR_HEAP_DESC {
  /** u32 */
  NodeMask: number;
  /** Windows.Win32.Graphics.Dxgi.Common.DXGI_FORMAT */
  InputFormat: DXGI_FORMAT;
  /** Windows.Win32.Media.MediaFoundation.D3D12_VIDEO_MOTION_ESTIMATOR_SEARCH_BLOCK_SIZE */
  BlockSize: D3D12_VIDEO_MOTION_ESTIMATOR_SEARCH_BLOCK_SIZE;
  /** Windows.Win32.Media.MediaFoundation.D3D12_VIDEO_MOTION_ESTIMATOR_VECTOR_PRECISION */
  Precision: D3D12_VIDEO_MOTION_ESTIMATOR_VECTOR_PRECISION;
  /** Windows.Win32.Media.MediaFoundation.D3D12_VIDEO_SIZE_RANGE */
  SizeRange: Uint8Array | Deno.PointerValue;
}

export const sizeofD3D12_VIDEO_MOTION_VECTOR_HEAP_DESC = 24;

export function allocD3D12_VIDEO_MOTION_VECTOR_HEAP_DESC(data?: Partial<D3D12_VIDEO_MOTION_VECTOR_HEAP_DESC>): Uint8Array {
  const buf = new Uint8Array(sizeofD3D12_VIDEO_MOTION_VECTOR_HEAP_DESC);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.NodeMask !== undefined) view.setUint32(0, Number(data.NodeMask), true);
  // 0x04: u32
  if (data?.InputFormat !== undefined) view.setUint32(4, Number(data.InputFormat), true);
  // 0x08: i32
  if (data?.BlockSize !== undefined) view.setInt32(8, Number(data.BlockSize), true);
  // 0x0c: i32
  if (data?.Precision !== undefined) view.setInt32(12, Number(data.Precision), true);
  // 0x10: pointer
  if (data?.SizeRange !== undefined) view.setBigUint64(16, data.SizeRange === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.SizeRange))), true);
  return buf;
}

export class D3D12_VIDEO_MOTION_VECTOR_HEAP_DESCView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get NodeMask(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: u32
  get InputFormat(): number {
    return this.view.getUint32(4, true);
  }

  // 0x08: i32
  get BlockSize(): number {
    return this.view.getInt32(8, true);
  }

  // 0x0c: i32
  get Precision(): number {
    return this.view.getInt32(12, true);
  }

  // 0x10: pointer
  get SizeRange(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(16, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: u32
  set NodeMask(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: u32
  set InputFormat(value: number) {
    this.view.setUint32(4, value, true);
  }

  // 0x08: i32
  set BlockSize(value: number) {
    this.view.setInt32(8, value, true);
  }

  // 0x0c: i32
  set Precision(value: number) {
    this.view.setInt32(12, value, true);
  }

  // 0x10: pointer
  set SizeRange(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(16, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.Media.MediaFoundation.D3D12_RESOURCE_COORDINATE (size: 24)
 */
export interface D3D12_RESOURCE_COORDINATE {
  /** u64 */
  X: bigint | number;
  /** u32 */
  Y: number;
  /** u32 */
  Z: number;
  /** u32 */
  SubresourceIndex: number;
}

export const sizeofD3D12_RESOURCE_COORDINATE = 24;

export function allocD3D12_RESOURCE_COORDINATE(data?: Partial<D3D12_RESOURCE_COORDINATE>): Uint8Array {
  const buf = new Uint8Array(sizeofD3D12_RESOURCE_COORDINATE);
  const view = new DataView(buf.buffer);
  // 0x00: u64
  if (data?.X !== undefined) view.setBigUint64(0, BigInt(data.X), true);
  // 0x08: u32
  if (data?.Y !== undefined) view.setUint32(8, Number(data.Y), true);
  // 0x0c: u32
  if (data?.Z !== undefined) view.setUint32(12, Number(data.Z), true);
  // 0x10: u32
  if (data?.SubresourceIndex !== undefined) view.setUint32(16, Number(data.SubresourceIndex), true);
  // 0x14: pad4
  return buf;
}

export class D3D12_RESOURCE_COORDINATEView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u64
  get X(): bigint | number {
    return Number(this.view.getBigUint64(0, true));
  }

  // 0x08: u32
  get Y(): number {
    return this.view.getUint32(8, true);
  }

  // 0x0c: u32
  get Z(): number {
    return this.view.getUint32(12, true);
  }

  // 0x10: u32
  get SubresourceIndex(): number {
    return this.view.getUint32(16, true);
  }

  // 0x14: pad4

  // 0x00: u64
  set X(value: bigint | number) {
    this.view.setBigUint64(0, BigInt(value), true);
  }

  // 0x08: u32
  set Y(value: number) {
    this.view.setUint32(8, value, true);
  }

  // 0x0c: u32
  set Z(value: number) {
    this.view.setUint32(12, value, true);
  }

  // 0x10: u32
  set SubresourceIndex(value: number) {
    this.view.setUint32(16, value, true);
  }

  // 0x14: pad4
}

/**
 * Windows.Win32.Media.MediaFoundation.D3D12_VIDEO_MOTION_ESTIMATOR_OUTPUT (size: 8)
 */
export interface D3D12_VIDEO_MOTION_ESTIMATOR_OUTPUT {
  /** Windows.Win32.Media.MediaFoundation.ID3D12VideoMotionVectorHeap */
  pMotionVectorHeap: Uint8Array | Deno.PointerValue;
}

export const sizeofD3D12_VIDEO_MOTION_ESTIMATOR_OUTPUT = 8;

export function allocD3D12_VIDEO_MOTION_ESTIMATOR_OUTPUT(data?: Partial<D3D12_VIDEO_MOTION_ESTIMATOR_OUTPUT>): Uint8Array {
  const buf = new Uint8Array(sizeofD3D12_VIDEO_MOTION_ESTIMATOR_OUTPUT);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.pMotionVectorHeap !== undefined) view.setBigUint64(0, data.pMotionVectorHeap === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.pMotionVectorHeap))), true);
  return buf;
}

export class D3D12_VIDEO_MOTION_ESTIMATOR_OUTPUTView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get pMotionVectorHeap(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(0, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: pointer
  set pMotionVectorHeap(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(0, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.Media.MediaFoundation.D3D12_VIDEO_MOTION_ESTIMATOR_INPUT (size: 40)
 */
export interface D3D12_VIDEO_MOTION_ESTIMATOR_INPUT {
  /** Windows.Win32.Graphics.Direct3D12.ID3D12Resource */
  pInputTexture2D: Uint8Array | Deno.PointerValue;
  /** u32 */
  InputSubresourceIndex: number;
  /** Windows.Win32.Graphics.Direct3D12.ID3D12Resource */
  pReferenceTexture2D: Uint8Array | Deno.PointerValue;
  /** u32 */
  ReferenceSubresourceIndex: number;
  /** Windows.Win32.Media.MediaFoundation.ID3D12VideoMotionVectorHeap */
  pHintMotionVectorHeap: Uint8Array | Deno.PointerValue;
}

export const sizeofD3D12_VIDEO_MOTION_ESTIMATOR_INPUT = 40;

export function allocD3D12_VIDEO_MOTION_ESTIMATOR_INPUT(data?: Partial<D3D12_VIDEO_MOTION_ESTIMATOR_INPUT>): Uint8Array {
  const buf = new Uint8Array(sizeofD3D12_VIDEO_MOTION_ESTIMATOR_INPUT);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.pInputTexture2D !== undefined) view.setBigUint64(0, data.pInputTexture2D === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.pInputTexture2D))), true);
  // 0x08: u32
  if (data?.InputSubresourceIndex !== undefined) view.setUint32(8, Number(data.InputSubresourceIndex), true);
  // 0x0c: pad4
  // 0x10: pointer
  if (data?.pReferenceTexture2D !== undefined) view.setBigUint64(16, data.pReferenceTexture2D === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.pReferenceTexture2D))), true);
  // 0x18: u32
  if (data?.ReferenceSubresourceIndex !== undefined) view.setUint32(24, Number(data.ReferenceSubresourceIndex), true);
  // 0x1c: pad4
  // 0x20: pointer
  if (data?.pHintMotionVectorHeap !== undefined) view.setBigUint64(32, data.pHintMotionVectorHeap === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.pHintMotionVectorHeap))), true);
  return buf;
}

export class D3D12_VIDEO_MOTION_ESTIMATOR_INPUTView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get pInputTexture2D(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(0, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x08: u32
  get InputSubresourceIndex(): number {
    return this.view.getUint32(8, true);
  }

  // 0x0c: pad4

  // 0x10: pointer
  get pReferenceTexture2D(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(16, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x18: u32
  get ReferenceSubresourceIndex(): number {
    return this.view.getUint32(24, true);
  }

  // 0x1c: pad4

  // 0x20: pointer
  get pHintMotionVectorHeap(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(32, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: pointer
  set pInputTexture2D(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(0, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x08: u32
  set InputSubresourceIndex(value: number) {
    this.view.setUint32(8, value, true);
  }

  // 0x0c: pad4

  // 0x10: pointer
  set pReferenceTexture2D(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(16, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x18: u32
  set ReferenceSubresourceIndex(value: number) {
    this.view.setUint32(24, value, true);
  }

  // 0x1c: pad4

  // 0x20: pointer
  set pHintMotionVectorHeap(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(32, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.Media.MediaFoundation.D3D12_RESOLVE_VIDEO_MOTION_VECTOR_HEAP_OUTPUT (size: 16)
 */
export interface D3D12_RESOLVE_VIDEO_MOTION_VECTOR_HEAP_OUTPUT {
  /** Windows.Win32.Graphics.Direct3D12.ID3D12Resource */
  pMotionVectorTexture2D: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.Media.MediaFoundation.D3D12_RESOURCE_COORDINATE */
  MotionVectorCoordinate: Uint8Array | Deno.PointerValue;
}

export const sizeofD3D12_RESOLVE_VIDEO_MOTION_VECTOR_HEAP_OUTPUT = 16;

export function allocD3D12_RESOLVE_VIDEO_MOTION_VECTOR_HEAP_OUTPUT(data?: Partial<D3D12_RESOLVE_VIDEO_MOTION_VECTOR_HEAP_OUTPUT>): Uint8Array {
  const buf = new Uint8Array(sizeofD3D12_RESOLVE_VIDEO_MOTION_VECTOR_HEAP_OUTPUT);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.pMotionVectorTexture2D !== undefined) view.setBigUint64(0, data.pMotionVectorTexture2D === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.pMotionVectorTexture2D))), true);
  // 0x08: pointer
  if (data?.MotionVectorCoordinate !== undefined) view.setBigUint64(8, data.MotionVectorCoordinate === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.MotionVectorCoordinate))), true);
  return buf;
}

export class D3D12_RESOLVE_VIDEO_MOTION_VECTOR_HEAP_OUTPUTView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get pMotionVectorTexture2D(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(0, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x08: pointer
  get MotionVectorCoordinate(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: pointer
  set pMotionVectorTexture2D(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(0, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x08: pointer
  set MotionVectorCoordinate(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.Media.MediaFoundation.D3D12_RESOLVE_VIDEO_MOTION_VECTOR_HEAP_INPUT (size: 16)
 */
export interface D3D12_RESOLVE_VIDEO_MOTION_VECTOR_HEAP_INPUT {
  /** Windows.Win32.Media.MediaFoundation.ID3D12VideoMotionVectorHeap */
  pMotionVectorHeap: Uint8Array | Deno.PointerValue;
  /** u32 */
  PixelWidth: number;
  /** u32 */
  PixelHeight: number;
}

export const sizeofD3D12_RESOLVE_VIDEO_MOTION_VECTOR_HEAP_INPUT = 16;

export function allocD3D12_RESOLVE_VIDEO_MOTION_VECTOR_HEAP_INPUT(data?: Partial<D3D12_RESOLVE_VIDEO_MOTION_VECTOR_HEAP_INPUT>): Uint8Array {
  const buf = new Uint8Array(sizeofD3D12_RESOLVE_VIDEO_MOTION_VECTOR_HEAP_INPUT);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.pMotionVectorHeap !== undefined) view.setBigUint64(0, data.pMotionVectorHeap === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.pMotionVectorHeap))), true);
  // 0x08: u32
  if (data?.PixelWidth !== undefined) view.setUint32(8, Number(data.PixelWidth), true);
  // 0x0c: u32
  if (data?.PixelHeight !== undefined) view.setUint32(12, Number(data.PixelHeight), true);
  return buf;
}

export class D3D12_RESOLVE_VIDEO_MOTION_VECTOR_HEAP_INPUTView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get pMotionVectorHeap(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(0, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x08: u32
  get PixelWidth(): number {
    return this.view.getUint32(8, true);
  }

  // 0x0c: u32
  get PixelHeight(): number {
    return this.view.getUint32(12, true);
  }

  // 0x00: pointer
  set pMotionVectorHeap(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(0, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x08: u32
  set PixelWidth(value: number) {
    this.view.setUint32(8, value, true);
  }

  // 0x0c: u32
  set PixelHeight(value: number) {
    this.view.setUint32(12, value, true);
  }
}

/**
 * Windows.Win32.Media.MediaFoundation.D3D12_FEATURE_DATA_VIDEO_DECODE_PROTECTED_RESOURCES (size: 24)
 */
export interface D3D12_FEATURE_DATA_VIDEO_DECODE_PROTECTED_RESOURCES {
  /** u32 */
  NodeIndex: number;
  /** Windows.Win32.Media.MediaFoundation.D3D12_VIDEO_DECODE_CONFIGURATION */
  Configuration: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.Media.MediaFoundation.D3D12_VIDEO_PROTECTED_RESOURCE_SUPPORT_FLAGS */
  SupportFlags: D3D12_VIDEO_PROTECTED_RESOURCE_SUPPORT_FLAGS;
}

export const sizeofD3D12_FEATURE_DATA_VIDEO_DECODE_PROTECTED_RESOURCES = 24;

export function allocD3D12_FEATURE_DATA_VIDEO_DECODE_PROTECTED_RESOURCES(data?: Partial<D3D12_FEATURE_DATA_VIDEO_DECODE_PROTECTED_RESOURCES>): Uint8Array {
  const buf = new Uint8Array(sizeofD3D12_FEATURE_DATA_VIDEO_DECODE_PROTECTED_RESOURCES);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.NodeIndex !== undefined) view.setUint32(0, Number(data.NodeIndex), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.Configuration !== undefined) view.setBigUint64(8, data.Configuration === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.Configuration))), true);
  // 0x10: u32
  if (data?.SupportFlags !== undefined) view.setUint32(16, Number(data.SupportFlags), true);
  // 0x14: pad4
  return buf;
}

export class D3D12_FEATURE_DATA_VIDEO_DECODE_PROTECTED_RESOURCESView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get NodeIndex(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  get Configuration(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x10: u32
  get SupportFlags(): number {
    return this.view.getUint32(16, true);
  }

  // 0x14: pad4

  // 0x00: u32
  set NodeIndex(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  set Configuration(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x10: u32
  set SupportFlags(value: number) {
    this.view.setUint32(16, value, true);
  }

  // 0x14: pad4
}

/**
 * Windows.Win32.Media.MediaFoundation.D3D12_FEATURE_DATA_VIDEO_PROCESS_PROTECTED_RESOURCES (size: 8)
 */
export interface D3D12_FEATURE_DATA_VIDEO_PROCESS_PROTECTED_RESOURCES {
  /** u32 */
  NodeIndex: number;
  /** Windows.Win32.Media.MediaFoundation.D3D12_VIDEO_PROTECTED_RESOURCE_SUPPORT_FLAGS */
  SupportFlags: D3D12_VIDEO_PROTECTED_RESOURCE_SUPPORT_FLAGS;
}

export const sizeofD3D12_FEATURE_DATA_VIDEO_PROCESS_PROTECTED_RESOURCES = 8;

export function allocD3D12_FEATURE_DATA_VIDEO_PROCESS_PROTECTED_RESOURCES(data?: Partial<D3D12_FEATURE_DATA_VIDEO_PROCESS_PROTECTED_RESOURCES>): Uint8Array {
  const buf = new Uint8Array(sizeofD3D12_FEATURE_DATA_VIDEO_PROCESS_PROTECTED_RESOURCES);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.NodeIndex !== undefined) view.setUint32(0, Number(data.NodeIndex), true);
  // 0x04: u32
  if (data?.SupportFlags !== undefined) view.setUint32(4, Number(data.SupportFlags), true);
  return buf;
}

export class D3D12_FEATURE_DATA_VIDEO_PROCESS_PROTECTED_RESOURCESView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get NodeIndex(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: u32
  get SupportFlags(): number {
    return this.view.getUint32(4, true);
  }

  // 0x00: u32
  set NodeIndex(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: u32
  set SupportFlags(value: number) {
    this.view.setUint32(4, value, true);
  }
}

/**
 * Windows.Win32.Media.MediaFoundation.D3D12_FEATURE_DATA_VIDEO_MOTION_ESTIMATOR_PROTECTED_RESOURCES (size: 8)
 */
export interface D3D12_FEATURE_DATA_VIDEO_MOTION_ESTIMATOR_PROTECTED_RESOURCES {
  /** u32 */
  NodeIndex: number;
  /** Windows.Win32.Media.MediaFoundation.D3D12_VIDEO_PROTECTED_RESOURCE_SUPPORT_FLAGS */
  SupportFlags: D3D12_VIDEO_PROTECTED_RESOURCE_SUPPORT_FLAGS;
}

export const sizeofD3D12_FEATURE_DATA_VIDEO_MOTION_ESTIMATOR_PROTECTED_RESOURCES = 8;

export function allocD3D12_FEATURE_DATA_VIDEO_MOTION_ESTIMATOR_PROTECTED_RESOURCES(data?: Partial<D3D12_FEATURE_DATA_VIDEO_MOTION_ESTIMATOR_PROTECTED_RESOURCES>): Uint8Array {
  const buf = new Uint8Array(sizeofD3D12_FEATURE_DATA_VIDEO_MOTION_ESTIMATOR_PROTECTED_RESOURCES);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.NodeIndex !== undefined) view.setUint32(0, Number(data.NodeIndex), true);
  // 0x04: u32
  if (data?.SupportFlags !== undefined) view.setUint32(4, Number(data.SupportFlags), true);
  return buf;
}

export class D3D12_FEATURE_DATA_VIDEO_MOTION_ESTIMATOR_PROTECTED_RESOURCESView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get NodeIndex(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: u32
  get SupportFlags(): number {
    return this.view.getUint32(4, true);
  }

  // 0x00: u32
  set NodeIndex(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: u32
  set SupportFlags(value: number) {
    this.view.setUint32(4, value, true);
  }
}

/**
 * Windows.Win32.Media.MediaFoundation.D3D12_FEATURE_DATA_VIDEO_DECODER_HEAP_SIZE1 (size: 32)
 */
export interface D3D12_FEATURE_DATA_VIDEO_DECODER_HEAP_SIZE1 {
  /** Windows.Win32.Media.MediaFoundation.D3D12_VIDEO_DECODER_HEAP_DESC */
  VideoDecoderHeapDesc: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.Foundation.BOOL */
  Protected: boolean;
  /** u64 */
  MemoryPoolL0Size: bigint | number;
  /** u64 */
  MemoryPoolL1Size: bigint | number;
}

export const sizeofD3D12_FEATURE_DATA_VIDEO_DECODER_HEAP_SIZE1 = 32;

export function allocD3D12_FEATURE_DATA_VIDEO_DECODER_HEAP_SIZE1(data?: Partial<D3D12_FEATURE_DATA_VIDEO_DECODER_HEAP_SIZE1>): Uint8Array {
  const buf = new Uint8Array(sizeofD3D12_FEATURE_DATA_VIDEO_DECODER_HEAP_SIZE1);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.VideoDecoderHeapDesc !== undefined) view.setBigUint64(0, data.VideoDecoderHeapDesc === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.VideoDecoderHeapDesc))), true);
  // 0x08: i32
  if (data?.Protected !== undefined) view.setInt32(8, Number(data.Protected), true);
  // 0x0c: pad4
  // 0x10: u64
  if (data?.MemoryPoolL0Size !== undefined) view.setBigUint64(16, BigInt(data.MemoryPoolL0Size), true);
  // 0x18: u64
  if (data?.MemoryPoolL1Size !== undefined) view.setBigUint64(24, BigInt(data.MemoryPoolL1Size), true);
  return buf;
}

export class D3D12_FEATURE_DATA_VIDEO_DECODER_HEAP_SIZE1View {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get VideoDecoderHeapDesc(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(0, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x08: i32
  get Protected(): number {
    return this.view.getInt32(8, true);
  }

  // 0x0c: pad4

  // 0x10: u64
  get MemoryPoolL0Size(): bigint | number {
    return Number(this.view.getBigUint64(16, true));
  }

  // 0x18: u64
  get MemoryPoolL1Size(): bigint | number {
    return Number(this.view.getBigUint64(24, true));
  }

  // 0x00: pointer
  set VideoDecoderHeapDesc(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(0, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x08: i32
  set Protected(value: number) {
    this.view.setInt32(8, value, true);
  }

  // 0x0c: pad4

  // 0x10: u64
  set MemoryPoolL0Size(value: bigint | number) {
    this.view.setBigUint64(16, BigInt(value), true);
  }

  // 0x18: u64
  set MemoryPoolL1Size(value: bigint | number) {
    this.view.setBigUint64(24, BigInt(value), true);
  }
}

/**
 * Windows.Win32.Media.MediaFoundation.D3D12_FEATURE_DATA_VIDEO_PROCESSOR_SIZE1 (size: 56)
 */
export interface D3D12_FEATURE_DATA_VIDEO_PROCESSOR_SIZE1 {
  /** u32 */
  NodeMask: number;
  /** ptr */
  pOutputStreamDesc: Deno.PointerValue | Uint8Array;
  /** u32 */
  NumInputStreamDescs: number;
  /** ptr */
  pInputStreamDescs: Deno.PointerValue | Uint8Array;
  /** Windows.Win32.Foundation.BOOL */
  Protected: boolean;
  /** u64 */
  MemoryPoolL0Size: bigint | number;
  /** u64 */
  MemoryPoolL1Size: bigint | number;
}

export const sizeofD3D12_FEATURE_DATA_VIDEO_PROCESSOR_SIZE1 = 56;

export function allocD3D12_FEATURE_DATA_VIDEO_PROCESSOR_SIZE1(data?: Partial<D3D12_FEATURE_DATA_VIDEO_PROCESSOR_SIZE1>): Uint8Array {
  const buf = new Uint8Array(sizeofD3D12_FEATURE_DATA_VIDEO_PROCESSOR_SIZE1);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.NodeMask !== undefined) view.setUint32(0, Number(data.NodeMask), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.pOutputStreamDesc !== undefined) view.setBigUint64(8, data.pOutputStreamDesc === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.pOutputStreamDesc))), true);
  // 0x10: u32
  if (data?.NumInputStreamDescs !== undefined) view.setUint32(16, Number(data.NumInputStreamDescs), true);
  // 0x14: pad4
  // 0x18: pointer
  if (data?.pInputStreamDescs !== undefined) view.setBigUint64(24, data.pInputStreamDescs === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.pInputStreamDescs))), true);
  // 0x20: i32
  if (data?.Protected !== undefined) view.setInt32(32, Number(data.Protected), true);
  // 0x24: pad4
  // 0x28: u64
  if (data?.MemoryPoolL0Size !== undefined) view.setBigUint64(40, BigInt(data.MemoryPoolL0Size), true);
  // 0x30: u64
  if (data?.MemoryPoolL1Size !== undefined) view.setBigUint64(48, BigInt(data.MemoryPoolL1Size), true);
  return buf;
}

export class D3D12_FEATURE_DATA_VIDEO_PROCESSOR_SIZE1View {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get NodeMask(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  get pOutputStreamDesc(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x10: u32
  get NumInputStreamDescs(): number {
    return this.view.getUint32(16, true);
  }

  // 0x14: pad4

  // 0x18: pointer
  get pInputStreamDescs(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(24, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x20: i32
  get Protected(): number {
    return this.view.getInt32(32, true);
  }

  // 0x24: pad4

  // 0x28: u64
  get MemoryPoolL0Size(): bigint | number {
    return Number(this.view.getBigUint64(40, true));
  }

  // 0x30: u64
  get MemoryPoolL1Size(): bigint | number {
    return Number(this.view.getBigUint64(48, true));
  }

  // 0x00: u32
  set NodeMask(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  set pOutputStreamDesc(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x10: u32
  set NumInputStreamDescs(value: number) {
    this.view.setUint32(16, value, true);
  }

  // 0x14: pad4

  // 0x18: pointer
  set pInputStreamDescs(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(24, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x20: i32
  set Protected(value: number) {
    this.view.setInt32(32, value, true);
  }

  // 0x24: pad4

  // 0x28: u64
  set MemoryPoolL0Size(value: bigint | number) {
    this.view.setBigUint64(40, BigInt(value), true);
  }

  // 0x30: u64
  set MemoryPoolL1Size(value: bigint | number) {
    this.view.setBigUint64(48, BigInt(value), true);
  }
}

/**
 * Windows.Win32.Media.MediaFoundation.D3D12_FEATURE_DATA_VIDEO_EXTENSION_COMMAND_COUNT (size: 8)
 */
export interface D3D12_FEATURE_DATA_VIDEO_EXTENSION_COMMAND_COUNT {
  /** u32 */
  NodeIndex: number;
  /** u32 */
  CommandCount: number;
}

export const sizeofD3D12_FEATURE_DATA_VIDEO_EXTENSION_COMMAND_COUNT = 8;

export function allocD3D12_FEATURE_DATA_VIDEO_EXTENSION_COMMAND_COUNT(data?: Partial<D3D12_FEATURE_DATA_VIDEO_EXTENSION_COMMAND_COUNT>): Uint8Array {
  const buf = new Uint8Array(sizeofD3D12_FEATURE_DATA_VIDEO_EXTENSION_COMMAND_COUNT);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.NodeIndex !== undefined) view.setUint32(0, Number(data.NodeIndex), true);
  // 0x04: u32
  if (data?.CommandCount !== undefined) view.setUint32(4, Number(data.CommandCount), true);
  return buf;
}

export class D3D12_FEATURE_DATA_VIDEO_EXTENSION_COMMAND_COUNTView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get NodeIndex(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: u32
  get CommandCount(): number {
    return this.view.getUint32(4, true);
  }

  // 0x00: u32
  set NodeIndex(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: u32
  set CommandCount(value: number) {
    this.view.setUint32(4, value, true);
  }
}

export type PWSTR = Deno.PointerValue | Uint8Array;

/**
 * Windows.Win32.Media.MediaFoundation.D3D12_VIDEO_EXTENSION_COMMAND_INFO (size: 24)
 */
export interface D3D12_VIDEO_EXTENSION_COMMAND_INFO {
  /** System.Guid */
  CommandId: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.Foundation.PWSTR */
  Name: string | null | Uint8Array | Uint16Array;
  /** Windows.Win32.Graphics.Direct3D12.D3D12_COMMAND_LIST_SUPPORT_FLAGS */
  CommandListSupportFlags: D3D12_COMMAND_LIST_SUPPORT_FLAGS;
}

export const sizeofD3D12_VIDEO_EXTENSION_COMMAND_INFO = 24;

export function allocD3D12_VIDEO_EXTENSION_COMMAND_INFO(data?: Partial<D3D12_VIDEO_EXTENSION_COMMAND_INFO>): Uint8Array {
  const buf = new Uint8Array(sizeofD3D12_VIDEO_EXTENSION_COMMAND_INFO);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.CommandId !== undefined) view.setBigUint64(0, data.CommandId === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.CommandId))), true);
  // 0x08: buffer
  if (data?.Name !== undefined) {
    (buf as any)._f8 = util.pwstrToFfi(data.Name);
    view.setBigUint64(8, (buf as any)._f8 === null ? 0n : BigInt(Deno.UnsafePointer.value(Deno.UnsafePointer.of((buf as any)._f8))), true);
  }
  // 0x10: u32
  if (data?.CommandListSupportFlags !== undefined) view.setUint32(16, Number(data.CommandListSupportFlags), true);
  // 0x14: pad4
  return buf;
}

export class D3D12_VIDEO_EXTENSION_COMMAND_INFOView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get CommandId(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(0, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x08: buffer
  get Name(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x10: u32
  get CommandListSupportFlags(): number {
    return this.view.getUint32(16, true);
  }

  // 0x14: pad4

  // 0x00: pointer
  set CommandId(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(0, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x08: buffer
  set Name(value: Uint8Array | Deno.PointerValue) {
    (this.buf as any)._f8 = value;
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer((this.buf as any)._f8))), true);
  }

  // 0x10: u32
  set CommandListSupportFlags(value: number) {
    this.view.setUint32(16, value, true);
  }

  // 0x14: pad4
}

/**
 * Windows.Win32.Media.MediaFoundation.D3D12_FEATURE_DATA_VIDEO_EXTENSION_COMMANDS (size: 16)
 */
export interface D3D12_FEATURE_DATA_VIDEO_EXTENSION_COMMANDS {
  /** u32 */
  NodeIndex: number;
  /** u32 */
  CommandCount: number;
  /** ptr */
  pCommandInfos: Deno.PointerValue | Uint8Array;
}

export const sizeofD3D12_FEATURE_DATA_VIDEO_EXTENSION_COMMANDS = 16;

export function allocD3D12_FEATURE_DATA_VIDEO_EXTENSION_COMMANDS(data?: Partial<D3D12_FEATURE_DATA_VIDEO_EXTENSION_COMMANDS>): Uint8Array {
  const buf = new Uint8Array(sizeofD3D12_FEATURE_DATA_VIDEO_EXTENSION_COMMANDS);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.NodeIndex !== undefined) view.setUint32(0, Number(data.NodeIndex), true);
  // 0x04: u32
  if (data?.CommandCount !== undefined) view.setUint32(4, Number(data.CommandCount), true);
  // 0x08: pointer
  if (data?.pCommandInfos !== undefined) view.setBigUint64(8, data.pCommandInfos === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.pCommandInfos))), true);
  return buf;
}

export class D3D12_FEATURE_DATA_VIDEO_EXTENSION_COMMANDSView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get NodeIndex(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: u32
  get CommandCount(): number {
    return this.view.getUint32(4, true);
  }

  // 0x08: pointer
  get pCommandInfos(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: u32
  set NodeIndex(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: u32
  set CommandCount(value: number) {
    this.view.setUint32(4, value, true);
  }

  // 0x08: pointer
  set pCommandInfos(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.Media.MediaFoundation.D3D12_FEATURE_DATA_VIDEO_EXTENSION_COMMAND_PARAMETER_COUNT (size: 24)
 */
export interface D3D12_FEATURE_DATA_VIDEO_EXTENSION_COMMAND_PARAMETER_COUNT {
  /** System.Guid */
  CommandId: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.Media.MediaFoundation.D3D12_VIDEO_EXTENSION_COMMAND_PARAMETER_STAGE */
  Stage: D3D12_VIDEO_EXTENSION_COMMAND_PARAMETER_STAGE;
  /** u32 */
  ParameterCount: number;
  /** u32 */
  ParameterPacking: number;
}

export const sizeofD3D12_FEATURE_DATA_VIDEO_EXTENSION_COMMAND_PARAMETER_COUNT = 24;

export function allocD3D12_FEATURE_DATA_VIDEO_EXTENSION_COMMAND_PARAMETER_COUNT(data?: Partial<D3D12_FEATURE_DATA_VIDEO_EXTENSION_COMMAND_PARAMETER_COUNT>): Uint8Array {
  const buf = new Uint8Array(sizeofD3D12_FEATURE_DATA_VIDEO_EXTENSION_COMMAND_PARAMETER_COUNT);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.CommandId !== undefined) view.setBigUint64(0, data.CommandId === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.CommandId))), true);
  // 0x08: i32
  if (data?.Stage !== undefined) view.setInt32(8, Number(data.Stage), true);
  // 0x0c: u32
  if (data?.ParameterCount !== undefined) view.setUint32(12, Number(data.ParameterCount), true);
  // 0x10: u32
  if (data?.ParameterPacking !== undefined) view.setUint32(16, Number(data.ParameterPacking), true);
  // 0x14: pad4
  return buf;
}

export class D3D12_FEATURE_DATA_VIDEO_EXTENSION_COMMAND_PARAMETER_COUNTView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get CommandId(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(0, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x08: i32
  get Stage(): number {
    return this.view.getInt32(8, true);
  }

  // 0x0c: u32
  get ParameterCount(): number {
    return this.view.getUint32(12, true);
  }

  // 0x10: u32
  get ParameterPacking(): number {
    return this.view.getUint32(16, true);
  }

  // 0x14: pad4

  // 0x00: pointer
  set CommandId(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(0, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x08: i32
  set Stage(value: number) {
    this.view.setInt32(8, value, true);
  }

  // 0x0c: u32
  set ParameterCount(value: number) {
    this.view.setUint32(12, value, true);
  }

  // 0x10: u32
  set ParameterPacking(value: number) {
    this.view.setUint32(16, value, true);
  }

  // 0x14: pad4
}

/**
 * Windows.Win32.Media.MediaFoundation.D3D12_VIDEO_EXTENSION_COMMAND_PARAMETER_INFO (size: 16)
 */
export interface D3D12_VIDEO_EXTENSION_COMMAND_PARAMETER_INFO {
  /** Windows.Win32.Foundation.PWSTR */
  Name: string | null | Uint8Array | Uint16Array;
  /** Windows.Win32.Media.MediaFoundation.D3D12_VIDEO_EXTENSION_COMMAND_PARAMETER_TYPE */
  Type: D3D12_VIDEO_EXTENSION_COMMAND_PARAMETER_TYPE;
  /** Windows.Win32.Media.MediaFoundation.D3D12_VIDEO_EXTENSION_COMMAND_PARAMETER_FLAGS */
  Flags: D3D12_VIDEO_EXTENSION_COMMAND_PARAMETER_FLAGS;
}

export const sizeofD3D12_VIDEO_EXTENSION_COMMAND_PARAMETER_INFO = 16;

export function allocD3D12_VIDEO_EXTENSION_COMMAND_PARAMETER_INFO(data?: Partial<D3D12_VIDEO_EXTENSION_COMMAND_PARAMETER_INFO>): Uint8Array {
  const buf = new Uint8Array(sizeofD3D12_VIDEO_EXTENSION_COMMAND_PARAMETER_INFO);
  const view = new DataView(buf.buffer);
  // 0x00: buffer
  if (data?.Name !== undefined) {
    (buf as any)._f0 = util.pwstrToFfi(data.Name);
    view.setBigUint64(0, (buf as any)._f0 === null ? 0n : BigInt(Deno.UnsafePointer.value(Deno.UnsafePointer.of((buf as any)._f0))), true);
  }
  // 0x08: i32
  if (data?.Type !== undefined) view.setInt32(8, Number(data.Type), true);
  // 0x0c: u32
  if (data?.Flags !== undefined) view.setUint32(12, Number(data.Flags), true);
  return buf;
}

export class D3D12_VIDEO_EXTENSION_COMMAND_PARAMETER_INFOView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: buffer
  get Name(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(0, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x08: i32
  get Type(): number {
    return this.view.getInt32(8, true);
  }

  // 0x0c: u32
  get Flags(): number {
    return this.view.getUint32(12, true);
  }

  // 0x00: buffer
  set Name(value: Uint8Array | Deno.PointerValue) {
    (this.buf as any)._f0 = value;
    this.view.setBigUint64(0, BigInt(Deno.UnsafePointer.value(util.toPointer((this.buf as any)._f0))), true);
  }

  // 0x08: i32
  set Type(value: number) {
    this.view.setInt32(8, value, true);
  }

  // 0x0c: u32
  set Flags(value: number) {
    this.view.setUint32(12, value, true);
  }
}

/**
 * Windows.Win32.Media.MediaFoundation.D3D12_FEATURE_DATA_VIDEO_EXTENSION_COMMAND_PARAMETERS (size: 24)
 */
export interface D3D12_FEATURE_DATA_VIDEO_EXTENSION_COMMAND_PARAMETERS {
  /** System.Guid */
  CommandId: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.Media.MediaFoundation.D3D12_VIDEO_EXTENSION_COMMAND_PARAMETER_STAGE */
  Stage: D3D12_VIDEO_EXTENSION_COMMAND_PARAMETER_STAGE;
  /** u32 */
  ParameterCount: number;
  /** ptr */
  pParameterInfos: Deno.PointerValue | Uint8Array;
}

export const sizeofD3D12_FEATURE_DATA_VIDEO_EXTENSION_COMMAND_PARAMETERS = 24;

export function allocD3D12_FEATURE_DATA_VIDEO_EXTENSION_COMMAND_PARAMETERS(data?: Partial<D3D12_FEATURE_DATA_VIDEO_EXTENSION_COMMAND_PARAMETERS>): Uint8Array {
  const buf = new Uint8Array(sizeofD3D12_FEATURE_DATA_VIDEO_EXTENSION_COMMAND_PARAMETERS);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.CommandId !== undefined) view.setBigUint64(0, data.CommandId === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.CommandId))), true);
  // 0x08: i32
  if (data?.Stage !== undefined) view.setInt32(8, Number(data.Stage), true);
  // 0x0c: u32
  if (data?.ParameterCount !== undefined) view.setUint32(12, Number(data.ParameterCount), true);
  // 0x10: pointer
  if (data?.pParameterInfos !== undefined) view.setBigUint64(16, data.pParameterInfos === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.pParameterInfos))), true);
  return buf;
}

export class D3D12_FEATURE_DATA_VIDEO_EXTENSION_COMMAND_PARAMETERSView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get CommandId(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(0, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x08: i32
  get Stage(): number {
    return this.view.getInt32(8, true);
  }

  // 0x0c: u32
  get ParameterCount(): number {
    return this.view.getUint32(12, true);
  }

  // 0x10: pointer
  get pParameterInfos(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(16, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: pointer
  set CommandId(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(0, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x08: i32
  set Stage(value: number) {
    this.view.setInt32(8, value, true);
  }

  // 0x0c: u32
  set ParameterCount(value: number) {
    this.view.setUint32(12, value, true);
  }

  // 0x10: pointer
  set pParameterInfos(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(16, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.Media.MediaFoundation.D3D12_FEATURE_DATA_VIDEO_EXTENSION_COMMAND_SUPPORT (size: 48)
 */
export interface D3D12_FEATURE_DATA_VIDEO_EXTENSION_COMMAND_SUPPORT {
  /** u32 */
  NodeIndex: number;
  /** System.Guid */
  CommandId: Uint8Array | Deno.PointerValue;
  /** ptr */
  pInputData: Deno.PointerValue | Uint8Array;
  /** usize */
  InputDataSizeInBytes: bigint | number;
  /** ptr */
  pOutputData: Deno.PointerValue | Uint8Array;
  /** usize */
  OutputDataSizeInBytes: bigint | number;
}

export const sizeofD3D12_FEATURE_DATA_VIDEO_EXTENSION_COMMAND_SUPPORT = 48;

export function allocD3D12_FEATURE_DATA_VIDEO_EXTENSION_COMMAND_SUPPORT(data?: Partial<D3D12_FEATURE_DATA_VIDEO_EXTENSION_COMMAND_SUPPORT>): Uint8Array {
  const buf = new Uint8Array(sizeofD3D12_FEATURE_DATA_VIDEO_EXTENSION_COMMAND_SUPPORT);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.NodeIndex !== undefined) view.setUint32(0, Number(data.NodeIndex), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.CommandId !== undefined) view.setBigUint64(8, data.CommandId === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.CommandId))), true);
  // 0x10: pointer
  if (data?.pInputData !== undefined) view.setBigUint64(16, data.pInputData === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.pInputData))), true);
  // 0x18: usize
  if (data?.InputDataSizeInBytes !== undefined) view.setBigUint64(24, BigInt(data.InputDataSizeInBytes), true);
  // 0x20: pointer
  if (data?.pOutputData !== undefined) view.setBigUint64(32, data.pOutputData === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.pOutputData))), true);
  // 0x28: usize
  if (data?.OutputDataSizeInBytes !== undefined) view.setBigUint64(40, BigInt(data.OutputDataSizeInBytes), true);
  return buf;
}

export class D3D12_FEATURE_DATA_VIDEO_EXTENSION_COMMAND_SUPPORTView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get NodeIndex(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  get CommandId(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x10: pointer
  get pInputData(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(16, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x18: usize
  get InputDataSizeInBytes(): bigint | number {
    return Number(this.view.getBigUint64(24, true));
  }

  // 0x20: pointer
  get pOutputData(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(32, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x28: usize
  get OutputDataSizeInBytes(): bigint | number {
    return Number(this.view.getBigUint64(40, true));
  }

  // 0x00: u32
  set NodeIndex(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  set CommandId(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x10: pointer
  set pInputData(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(16, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x18: usize
  set InputDataSizeInBytes(value: bigint | number) {
    this.view.setBigUint64(24, BigInt(value), true);
  }

  // 0x20: pointer
  set pOutputData(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(32, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x28: usize
  set OutputDataSizeInBytes(value: bigint | number) {
    this.view.setBigUint64(40, BigInt(value), true);
  }
}

/**
 * Windows.Win32.Media.MediaFoundation.D3D12_FEATURE_DATA_VIDEO_EXTENSION_COMMAND_SIZE (size: 48)
 */
export interface D3D12_FEATURE_DATA_VIDEO_EXTENSION_COMMAND_SIZE {
  /** u32 */
  NodeIndex: number;
  /** System.Guid */
  CommandId: Uint8Array | Deno.PointerValue;
  /** ptr */
  pCreationParameters: Deno.PointerValue | Uint8Array;
  /** usize */
  CreationParametersSizeInBytes: bigint | number;
  /** u64 */
  MemoryPoolL0Size: bigint | number;
  /** u64 */
  MemoryPoolL1Size: bigint | number;
}

export const sizeofD3D12_FEATURE_DATA_VIDEO_EXTENSION_COMMAND_SIZE = 48;

export function allocD3D12_FEATURE_DATA_VIDEO_EXTENSION_COMMAND_SIZE(data?: Partial<D3D12_FEATURE_DATA_VIDEO_EXTENSION_COMMAND_SIZE>): Uint8Array {
  const buf = new Uint8Array(sizeofD3D12_FEATURE_DATA_VIDEO_EXTENSION_COMMAND_SIZE);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.NodeIndex !== undefined) view.setUint32(0, Number(data.NodeIndex), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.CommandId !== undefined) view.setBigUint64(8, data.CommandId === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.CommandId))), true);
  // 0x10: pointer
  if (data?.pCreationParameters !== undefined) view.setBigUint64(16, data.pCreationParameters === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.pCreationParameters))), true);
  // 0x18: usize
  if (data?.CreationParametersSizeInBytes !== undefined) view.setBigUint64(24, BigInt(data.CreationParametersSizeInBytes), true);
  // 0x20: u64
  if (data?.MemoryPoolL0Size !== undefined) view.setBigUint64(32, BigInt(data.MemoryPoolL0Size), true);
  // 0x28: u64
  if (data?.MemoryPoolL1Size !== undefined) view.setBigUint64(40, BigInt(data.MemoryPoolL1Size), true);
  return buf;
}

export class D3D12_FEATURE_DATA_VIDEO_EXTENSION_COMMAND_SIZEView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get NodeIndex(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  get CommandId(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x10: pointer
  get pCreationParameters(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(16, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x18: usize
  get CreationParametersSizeInBytes(): bigint | number {
    return Number(this.view.getBigUint64(24, true));
  }

  // 0x20: u64
  get MemoryPoolL0Size(): bigint | number {
    return Number(this.view.getBigUint64(32, true));
  }

  // 0x28: u64
  get MemoryPoolL1Size(): bigint | number {
    return Number(this.view.getBigUint64(40, true));
  }

  // 0x00: u32
  set NodeIndex(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  set CommandId(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x10: pointer
  set pCreationParameters(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(16, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x18: usize
  set CreationParametersSizeInBytes(value: bigint | number) {
    this.view.setBigUint64(24, BigInt(value), true);
  }

  // 0x20: u64
  set MemoryPoolL0Size(value: bigint | number) {
    this.view.setBigUint64(32, BigInt(value), true);
  }

  // 0x28: u64
  set MemoryPoolL1Size(value: bigint | number) {
    this.view.setBigUint64(40, BigInt(value), true);
  }
}

/**
 * Windows.Win32.Media.MediaFoundation.D3D12_VIDEO_EXTENSION_COMMAND_DESC (size: 16)
 */
export interface D3D12_VIDEO_EXTENSION_COMMAND_DESC {
  /** u32 */
  NodeMask: number;
  /** System.Guid */
  CommandId: Uint8Array | Deno.PointerValue;
}

export const sizeofD3D12_VIDEO_EXTENSION_COMMAND_DESC = 16;

export function allocD3D12_VIDEO_EXTENSION_COMMAND_DESC(data?: Partial<D3D12_VIDEO_EXTENSION_COMMAND_DESC>): Uint8Array {
  const buf = new Uint8Array(sizeofD3D12_VIDEO_EXTENSION_COMMAND_DESC);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.NodeMask !== undefined) view.setUint32(0, Number(data.NodeMask), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.CommandId !== undefined) view.setBigUint64(8, data.CommandId === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.CommandId))), true);
  return buf;
}

export class D3D12_VIDEO_EXTENSION_COMMAND_DESCView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get NodeMask(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  get CommandId(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: u32
  set NodeMask(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  set CommandId(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.Media.MediaFoundation.D3D12_VIDEO_ENCODER_RATE_CONTROL_CQP (size: 16)
 */
export interface D3D12_VIDEO_ENCODER_RATE_CONTROL_CQP {
  /** u32 */
  ConstantQP_FullIntracodedFrame: number;
  /** u32 */
  ConstantQP_InterPredictedFrame_PrevRefOnly: number;
  /** u32 */
  ConstantQP_InterPredictedFrame_BiDirectionalRef: number;
}

export const sizeofD3D12_VIDEO_ENCODER_RATE_CONTROL_CQP = 16;

export function allocD3D12_VIDEO_ENCODER_RATE_CONTROL_CQP(data?: Partial<D3D12_VIDEO_ENCODER_RATE_CONTROL_CQP>): Uint8Array {
  const buf = new Uint8Array(sizeofD3D12_VIDEO_ENCODER_RATE_CONTROL_CQP);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.ConstantQP_FullIntracodedFrame !== undefined) view.setUint32(0, Number(data.ConstantQP_FullIntracodedFrame), true);
  // 0x04: u32
  if (data?.ConstantQP_InterPredictedFrame_PrevRefOnly !== undefined) view.setUint32(4, Number(data.ConstantQP_InterPredictedFrame_PrevRefOnly), true);
  // 0x08: u32
  if (data?.ConstantQP_InterPredictedFrame_BiDirectionalRef !== undefined) view.setUint32(8, Number(data.ConstantQP_InterPredictedFrame_BiDirectionalRef), true);
  // 0x0c: pad4
  return buf;
}

export class D3D12_VIDEO_ENCODER_RATE_CONTROL_CQPView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get ConstantQP_FullIntracodedFrame(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: u32
  get ConstantQP_InterPredictedFrame_PrevRefOnly(): number {
    return this.view.getUint32(4, true);
  }

  // 0x08: u32
  get ConstantQP_InterPredictedFrame_BiDirectionalRef(): number {
    return this.view.getUint32(8, true);
  }

  // 0x0c: pad4

  // 0x00: u32
  set ConstantQP_FullIntracodedFrame(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: u32
  set ConstantQP_InterPredictedFrame_PrevRefOnly(value: number) {
    this.view.setUint32(4, value, true);
  }

  // 0x08: u32
  set ConstantQP_InterPredictedFrame_BiDirectionalRef(value: number) {
    this.view.setUint32(8, value, true);
  }

  // 0x0c: pad4
}

/**
 * Windows.Win32.Media.MediaFoundation.D3D12_VIDEO_ENCODER_RATE_CONTROL_CBR (size: 48)
 */
export interface D3D12_VIDEO_ENCODER_RATE_CONTROL_CBR {
  /** u32 */
  InitialQP: number;
  /** u32 */
  MinQP: number;
  /** u32 */
  MaxQP: number;
  /** u64 */
  MaxFrameBitSize: bigint | number;
  /** u64 */
  TargetBitRate: bigint | number;
  /** u64 */
  VBVCapacity: bigint | number;
  /** u64 */
  InitialVBVFullness: bigint | number;
}

export const sizeofD3D12_VIDEO_ENCODER_RATE_CONTROL_CBR = 48;

export function allocD3D12_VIDEO_ENCODER_RATE_CONTROL_CBR(data?: Partial<D3D12_VIDEO_ENCODER_RATE_CONTROL_CBR>): Uint8Array {
  const buf = new Uint8Array(sizeofD3D12_VIDEO_ENCODER_RATE_CONTROL_CBR);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.InitialQP !== undefined) view.setUint32(0, Number(data.InitialQP), true);
  // 0x04: u32
  if (data?.MinQP !== undefined) view.setUint32(4, Number(data.MinQP), true);
  // 0x08: u32
  if (data?.MaxQP !== undefined) view.setUint32(8, Number(data.MaxQP), true);
  // 0x0c: pad4
  // 0x10: u64
  if (data?.MaxFrameBitSize !== undefined) view.setBigUint64(16, BigInt(data.MaxFrameBitSize), true);
  // 0x18: u64
  if (data?.TargetBitRate !== undefined) view.setBigUint64(24, BigInt(data.TargetBitRate), true);
  // 0x20: u64
  if (data?.VBVCapacity !== undefined) view.setBigUint64(32, BigInt(data.VBVCapacity), true);
  // 0x28: u64
  if (data?.InitialVBVFullness !== undefined) view.setBigUint64(40, BigInt(data.InitialVBVFullness), true);
  return buf;
}

export class D3D12_VIDEO_ENCODER_RATE_CONTROL_CBRView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get InitialQP(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: u32
  get MinQP(): number {
    return this.view.getUint32(4, true);
  }

  // 0x08: u32
  get MaxQP(): number {
    return this.view.getUint32(8, true);
  }

  // 0x0c: pad4

  // 0x10: u64
  get MaxFrameBitSize(): bigint | number {
    return Number(this.view.getBigUint64(16, true));
  }

  // 0x18: u64
  get TargetBitRate(): bigint | number {
    return Number(this.view.getBigUint64(24, true));
  }

  // 0x20: u64
  get VBVCapacity(): bigint | number {
    return Number(this.view.getBigUint64(32, true));
  }

  // 0x28: u64
  get InitialVBVFullness(): bigint | number {
    return Number(this.view.getBigUint64(40, true));
  }

  // 0x00: u32
  set InitialQP(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: u32
  set MinQP(value: number) {
    this.view.setUint32(4, value, true);
  }

  // 0x08: u32
  set MaxQP(value: number) {
    this.view.setUint32(8, value, true);
  }

  // 0x0c: pad4

  // 0x10: u64
  set MaxFrameBitSize(value: bigint | number) {
    this.view.setBigUint64(16, BigInt(value), true);
  }

  // 0x18: u64
  set TargetBitRate(value: bigint | number) {
    this.view.setBigUint64(24, BigInt(value), true);
  }

  // 0x20: u64
  set VBVCapacity(value: bigint | number) {
    this.view.setBigUint64(32, BigInt(value), true);
  }

  // 0x28: u64
  set InitialVBVFullness(value: bigint | number) {
    this.view.setBigUint64(40, BigInt(value), true);
  }
}

/**
 * Windows.Win32.Media.MediaFoundation.D3D12_VIDEO_ENCODER_RATE_CONTROL_VBR (size: 56)
 */
export interface D3D12_VIDEO_ENCODER_RATE_CONTROL_VBR {
  /** u32 */
  InitialQP: number;
  /** u32 */
  MinQP: number;
  /** u32 */
  MaxQP: number;
  /** u64 */
  MaxFrameBitSize: bigint | number;
  /** u64 */
  TargetAvgBitRate: bigint | number;
  /** u64 */
  PeakBitRate: bigint | number;
  /** u64 */
  VBVCapacity: bigint | number;
  /** u64 */
  InitialVBVFullness: bigint | number;
}

export const sizeofD3D12_VIDEO_ENCODER_RATE_CONTROL_VBR = 56;

export function allocD3D12_VIDEO_ENCODER_RATE_CONTROL_VBR(data?: Partial<D3D12_VIDEO_ENCODER_RATE_CONTROL_VBR>): Uint8Array {
  const buf = new Uint8Array(sizeofD3D12_VIDEO_ENCODER_RATE_CONTROL_VBR);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.InitialQP !== undefined) view.setUint32(0, Number(data.InitialQP), true);
  // 0x04: u32
  if (data?.MinQP !== undefined) view.setUint32(4, Number(data.MinQP), true);
  // 0x08: u32
  if (data?.MaxQP !== undefined) view.setUint32(8, Number(data.MaxQP), true);
  // 0x0c: pad4
  // 0x10: u64
  if (data?.MaxFrameBitSize !== undefined) view.setBigUint64(16, BigInt(data.MaxFrameBitSize), true);
  // 0x18: u64
  if (data?.TargetAvgBitRate !== undefined) view.setBigUint64(24, BigInt(data.TargetAvgBitRate), true);
  // 0x20: u64
  if (data?.PeakBitRate !== undefined) view.setBigUint64(32, BigInt(data.PeakBitRate), true);
  // 0x28: u64
  if (data?.VBVCapacity !== undefined) view.setBigUint64(40, BigInt(data.VBVCapacity), true);
  // 0x30: u64
  if (data?.InitialVBVFullness !== undefined) view.setBigUint64(48, BigInt(data.InitialVBVFullness), true);
  return buf;
}

export class D3D12_VIDEO_ENCODER_RATE_CONTROL_VBRView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get InitialQP(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: u32
  get MinQP(): number {
    return this.view.getUint32(4, true);
  }

  // 0x08: u32
  get MaxQP(): number {
    return this.view.getUint32(8, true);
  }

  // 0x0c: pad4

  // 0x10: u64
  get MaxFrameBitSize(): bigint | number {
    return Number(this.view.getBigUint64(16, true));
  }

  // 0x18: u64
  get TargetAvgBitRate(): bigint | number {
    return Number(this.view.getBigUint64(24, true));
  }

  // 0x20: u64
  get PeakBitRate(): bigint | number {
    return Number(this.view.getBigUint64(32, true));
  }

  // 0x28: u64
  get VBVCapacity(): bigint | number {
    return Number(this.view.getBigUint64(40, true));
  }

  // 0x30: u64
  get InitialVBVFullness(): bigint | number {
    return Number(this.view.getBigUint64(48, true));
  }

  // 0x00: u32
  set InitialQP(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: u32
  set MinQP(value: number) {
    this.view.setUint32(4, value, true);
  }

  // 0x08: u32
  set MaxQP(value: number) {
    this.view.setUint32(8, value, true);
  }

  // 0x0c: pad4

  // 0x10: u64
  set MaxFrameBitSize(value: bigint | number) {
    this.view.setBigUint64(16, BigInt(value), true);
  }

  // 0x18: u64
  set TargetAvgBitRate(value: bigint | number) {
    this.view.setBigUint64(24, BigInt(value), true);
  }

  // 0x20: u64
  set PeakBitRate(value: bigint | number) {
    this.view.setBigUint64(32, BigInt(value), true);
  }

  // 0x28: u64
  set VBVCapacity(value: bigint | number) {
    this.view.setBigUint64(40, BigInt(value), true);
  }

  // 0x30: u64
  set InitialVBVFullness(value: bigint | number) {
    this.view.setBigUint64(48, BigInt(value), true);
  }
}

/**
 * Windows.Win32.Media.MediaFoundation.D3D12_VIDEO_ENCODER_RATE_CONTROL_QVBR (size: 48)
 */
export interface D3D12_VIDEO_ENCODER_RATE_CONTROL_QVBR {
  /** u32 */
  InitialQP: number;
  /** u32 */
  MinQP: number;
  /** u32 */
  MaxQP: number;
  /** u64 */
  MaxFrameBitSize: bigint | number;
  /** u64 */
  TargetAvgBitRate: bigint | number;
  /** u64 */
  PeakBitRate: bigint | number;
  /** u32 */
  ConstantQualityTarget: number;
}

export const sizeofD3D12_VIDEO_ENCODER_RATE_CONTROL_QVBR = 48;

export function allocD3D12_VIDEO_ENCODER_RATE_CONTROL_QVBR(data?: Partial<D3D12_VIDEO_ENCODER_RATE_CONTROL_QVBR>): Uint8Array {
  const buf = new Uint8Array(sizeofD3D12_VIDEO_ENCODER_RATE_CONTROL_QVBR);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.InitialQP !== undefined) view.setUint32(0, Number(data.InitialQP), true);
  // 0x04: u32
  if (data?.MinQP !== undefined) view.setUint32(4, Number(data.MinQP), true);
  // 0x08: u32
  if (data?.MaxQP !== undefined) view.setUint32(8, Number(data.MaxQP), true);
  // 0x0c: pad4
  // 0x10: u64
  if (data?.MaxFrameBitSize !== undefined) view.setBigUint64(16, BigInt(data.MaxFrameBitSize), true);
  // 0x18: u64
  if (data?.TargetAvgBitRate !== undefined) view.setBigUint64(24, BigInt(data.TargetAvgBitRate), true);
  // 0x20: u64
  if (data?.PeakBitRate !== undefined) view.setBigUint64(32, BigInt(data.PeakBitRate), true);
  // 0x28: u32
  if (data?.ConstantQualityTarget !== undefined) view.setUint32(40, Number(data.ConstantQualityTarget), true);
  // 0x2c: pad4
  return buf;
}

export class D3D12_VIDEO_ENCODER_RATE_CONTROL_QVBRView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get InitialQP(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: u32
  get MinQP(): number {
    return this.view.getUint32(4, true);
  }

  // 0x08: u32
  get MaxQP(): number {
    return this.view.getUint32(8, true);
  }

  // 0x0c: pad4

  // 0x10: u64
  get MaxFrameBitSize(): bigint | number {
    return Number(this.view.getBigUint64(16, true));
  }

  // 0x18: u64
  get TargetAvgBitRate(): bigint | number {
    return Number(this.view.getBigUint64(24, true));
  }

  // 0x20: u64
  get PeakBitRate(): bigint | number {
    return Number(this.view.getBigUint64(32, true));
  }

  // 0x28: u32
  get ConstantQualityTarget(): number {
    return this.view.getUint32(40, true);
  }

  // 0x2c: pad4

  // 0x00: u32
  set InitialQP(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: u32
  set MinQP(value: number) {
    this.view.setUint32(4, value, true);
  }

  // 0x08: u32
  set MaxQP(value: number) {
    this.view.setUint32(8, value, true);
  }

  // 0x0c: pad4

  // 0x10: u64
  set MaxFrameBitSize(value: bigint | number) {
    this.view.setBigUint64(16, BigInt(value), true);
  }

  // 0x18: u64
  set TargetAvgBitRate(value: bigint | number) {
    this.view.setBigUint64(24, BigInt(value), true);
  }

  // 0x20: u64
  set PeakBitRate(value: bigint | number) {
    this.view.setBigUint64(32, BigInt(value), true);
  }

  // 0x28: u32
  set ConstantQualityTarget(value: number) {
    this.view.setUint32(40, value, true);
  }

  // 0x2c: pad4
}

/**
 * Windows.Win32.Media.MediaFoundation.D3D12_VIDEO_ENCODER_RATE_CONTROL_CONFIGURATION_PARAMS (size: 16)
 */
export interface D3D12_VIDEO_ENCODER_RATE_CONTROL_CONFIGURATION_PARAMS {
  /** u32 */
  DataSize: number;
  /** _Anonymous_e__Union */
  Anonymous: Uint8Array | Deno.PointerValue;
}

export const sizeofD3D12_VIDEO_ENCODER_RATE_CONTROL_CONFIGURATION_PARAMS = 16;

export function allocD3D12_VIDEO_ENCODER_RATE_CONTROL_CONFIGURATION_PARAMS(data?: Partial<D3D12_VIDEO_ENCODER_RATE_CONTROL_CONFIGURATION_PARAMS>): Uint8Array {
  const buf = new Uint8Array(sizeofD3D12_VIDEO_ENCODER_RATE_CONTROL_CONFIGURATION_PARAMS);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.DataSize !== undefined) view.setUint32(0, Number(data.DataSize), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.Anonymous !== undefined) view.setBigUint64(8, data.Anonymous === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.Anonymous))), true);
  return buf;
}

export class D3D12_VIDEO_ENCODER_RATE_CONTROL_CONFIGURATION_PARAMSView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get DataSize(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  get Anonymous(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: u32
  set DataSize(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  set Anonymous(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.Media.MediaFoundation.D3D12_VIDEO_ENCODER_RATE_CONTROL (size: 24)
 */
export interface D3D12_VIDEO_ENCODER_RATE_CONTROL {
  /** Windows.Win32.Media.MediaFoundation.D3D12_VIDEO_ENCODER_RATE_CONTROL_MODE */
  Mode: D3D12_VIDEO_ENCODER_RATE_CONTROL_MODE;
  /** Windows.Win32.Media.MediaFoundation.D3D12_VIDEO_ENCODER_RATE_CONTROL_FLAGS */
  Flags: D3D12_VIDEO_ENCODER_RATE_CONTROL_FLAGS;
  /** Windows.Win32.Media.MediaFoundation.D3D12_VIDEO_ENCODER_RATE_CONTROL_CONFIGURATION_PARAMS */
  ConfigParams: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.Graphics.Dxgi.Common.DXGI_RATIONAL */
  TargetFrameRate: Uint8Array | Deno.PointerValue;
}

export const sizeofD3D12_VIDEO_ENCODER_RATE_CONTROL = 24;

export function allocD3D12_VIDEO_ENCODER_RATE_CONTROL(data?: Partial<D3D12_VIDEO_ENCODER_RATE_CONTROL>): Uint8Array {
  const buf = new Uint8Array(sizeofD3D12_VIDEO_ENCODER_RATE_CONTROL);
  const view = new DataView(buf.buffer);
  // 0x00: i32
  if (data?.Mode !== undefined) view.setInt32(0, Number(data.Mode), true);
  // 0x04: u32
  if (data?.Flags !== undefined) view.setUint32(4, Number(data.Flags), true);
  // 0x08: pointer
  if (data?.ConfigParams !== undefined) view.setBigUint64(8, data.ConfigParams === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.ConfigParams))), true);
  // 0x10: pointer
  if (data?.TargetFrameRate !== undefined) view.setBigUint64(16, data.TargetFrameRate === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.TargetFrameRate))), true);
  return buf;
}

export class D3D12_VIDEO_ENCODER_RATE_CONTROLView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: i32
  get Mode(): number {
    return this.view.getInt32(0, true);
  }

  // 0x04: u32
  get Flags(): number {
    return this.view.getUint32(4, true);
  }

  // 0x08: pointer
  get ConfigParams(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x10: pointer
  get TargetFrameRate(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(16, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: i32
  set Mode(value: number) {
    this.view.setInt32(0, value, true);
  }

  // 0x04: u32
  set Flags(value: number) {
    this.view.setUint32(4, value, true);
  }

  // 0x08: pointer
  set ConfigParams(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x10: pointer
  set TargetFrameRate(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(16, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.Media.MediaFoundation.D3D12_FEATURE_DATA_VIDEO_ENCODER_CODEC (size: 16)
 */
export interface D3D12_FEATURE_DATA_VIDEO_ENCODER_CODEC {
  /** u32 */
  NodeIndex: number;
  /** Windows.Win32.Media.MediaFoundation.D3D12_VIDEO_ENCODER_CODEC */
  Codec: D3D12_VIDEO_ENCODER_CODEC;
  /** Windows.Win32.Foundation.BOOL */
  IsSupported: boolean;
}

export const sizeofD3D12_FEATURE_DATA_VIDEO_ENCODER_CODEC = 16;

export function allocD3D12_FEATURE_DATA_VIDEO_ENCODER_CODEC(data?: Partial<D3D12_FEATURE_DATA_VIDEO_ENCODER_CODEC>): Uint8Array {
  const buf = new Uint8Array(sizeofD3D12_FEATURE_DATA_VIDEO_ENCODER_CODEC);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.NodeIndex !== undefined) view.setUint32(0, Number(data.NodeIndex), true);
  // 0x04: i32
  if (data?.Codec !== undefined) view.setInt32(4, Number(data.Codec), true);
  // 0x08: i32
  if (data?.IsSupported !== undefined) view.setInt32(8, Number(data.IsSupported), true);
  // 0x0c: pad4
  return buf;
}

export class D3D12_FEATURE_DATA_VIDEO_ENCODER_CODECView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get NodeIndex(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: i32
  get Codec(): number {
    return this.view.getInt32(4, true);
  }

  // 0x08: i32
  get IsSupported(): number {
    return this.view.getInt32(8, true);
  }

  // 0x0c: pad4

  // 0x00: u32
  set NodeIndex(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: i32
  set Codec(value: number) {
    this.view.setInt32(4, value, true);
  }

  // 0x08: i32
  set IsSupported(value: number) {
    this.view.setInt32(8, value, true);
  }

  // 0x0c: pad4
}

/**
 * Windows.Win32.Media.MediaFoundation.D3D12_VIDEO_ENCODER_PROFILE_DESC (size: 16)
 */
export interface D3D12_VIDEO_ENCODER_PROFILE_DESC {
  /** u32 */
  DataSize: number;
  /** _Anonymous_e__Union */
  Anonymous: Uint8Array | Deno.PointerValue;
}

export const sizeofD3D12_VIDEO_ENCODER_PROFILE_DESC = 16;

export function allocD3D12_VIDEO_ENCODER_PROFILE_DESC(data?: Partial<D3D12_VIDEO_ENCODER_PROFILE_DESC>): Uint8Array {
  const buf = new Uint8Array(sizeofD3D12_VIDEO_ENCODER_PROFILE_DESC);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.DataSize !== undefined) view.setUint32(0, Number(data.DataSize), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.Anonymous !== undefined) view.setBigUint64(8, data.Anonymous === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.Anonymous))), true);
  return buf;
}

export class D3D12_VIDEO_ENCODER_PROFILE_DESCView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get DataSize(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  get Anonymous(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: u32
  set DataSize(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  set Anonymous(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.Media.MediaFoundation.D3D12_VIDEO_ENCODER_LEVEL_TIER_CONSTRAINTS_HEVC (size: 8)
 */
export interface D3D12_VIDEO_ENCODER_LEVEL_TIER_CONSTRAINTS_HEVC {
  /** Windows.Win32.Media.MediaFoundation.D3D12_VIDEO_ENCODER_LEVELS_HEVC */
  Level: D3D12_VIDEO_ENCODER_LEVELS_HEVC;
  /** Windows.Win32.Media.MediaFoundation.D3D12_VIDEO_ENCODER_TIER_HEVC */
  Tier: D3D12_VIDEO_ENCODER_TIER_HEVC;
}

export const sizeofD3D12_VIDEO_ENCODER_LEVEL_TIER_CONSTRAINTS_HEVC = 8;

export function allocD3D12_VIDEO_ENCODER_LEVEL_TIER_CONSTRAINTS_HEVC(data?: Partial<D3D12_VIDEO_ENCODER_LEVEL_TIER_CONSTRAINTS_HEVC>): Uint8Array {
  const buf = new Uint8Array(sizeofD3D12_VIDEO_ENCODER_LEVEL_TIER_CONSTRAINTS_HEVC);
  const view = new DataView(buf.buffer);
  // 0x00: i32
  if (data?.Level !== undefined) view.setInt32(0, Number(data.Level), true);
  // 0x04: i32
  if (data?.Tier !== undefined) view.setInt32(4, Number(data.Tier), true);
  return buf;
}

export class D3D12_VIDEO_ENCODER_LEVEL_TIER_CONSTRAINTS_HEVCView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: i32
  get Level(): number {
    return this.view.getInt32(0, true);
  }

  // 0x04: i32
  get Tier(): number {
    return this.view.getInt32(4, true);
  }

  // 0x00: i32
  set Level(value: number) {
    this.view.setInt32(0, value, true);
  }

  // 0x04: i32
  set Tier(value: number) {
    this.view.setInt32(4, value, true);
  }
}

/**
 * Windows.Win32.Media.MediaFoundation.D3D12_VIDEO_ENCODER_LEVEL_SETTING (size: 16)
 */
export interface D3D12_VIDEO_ENCODER_LEVEL_SETTING {
  /** u32 */
  DataSize: number;
  /** _Anonymous_e__Union */
  Anonymous: Uint8Array | Deno.PointerValue;
}

export const sizeofD3D12_VIDEO_ENCODER_LEVEL_SETTING = 16;

export function allocD3D12_VIDEO_ENCODER_LEVEL_SETTING(data?: Partial<D3D12_VIDEO_ENCODER_LEVEL_SETTING>): Uint8Array {
  const buf = new Uint8Array(sizeofD3D12_VIDEO_ENCODER_LEVEL_SETTING);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.DataSize !== undefined) view.setUint32(0, Number(data.DataSize), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.Anonymous !== undefined) view.setBigUint64(8, data.Anonymous === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.Anonymous))), true);
  return buf;
}

export class D3D12_VIDEO_ENCODER_LEVEL_SETTINGView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get DataSize(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  get Anonymous(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: u32
  set DataSize(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  set Anonymous(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.Media.MediaFoundation.D3D12_FEATURE_DATA_VIDEO_ENCODER_PROFILE_LEVEL (size: 40)
 */
export interface D3D12_FEATURE_DATA_VIDEO_ENCODER_PROFILE_LEVEL {
  /** u32 */
  NodeIndex: number;
  /** Windows.Win32.Media.MediaFoundation.D3D12_VIDEO_ENCODER_CODEC */
  Codec: D3D12_VIDEO_ENCODER_CODEC;
  /** Windows.Win32.Media.MediaFoundation.D3D12_VIDEO_ENCODER_PROFILE_DESC */
  Profile: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.Foundation.BOOL */
  IsSupported: boolean;
  /** Windows.Win32.Media.MediaFoundation.D3D12_VIDEO_ENCODER_LEVEL_SETTING */
  MinSupportedLevel: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.Media.MediaFoundation.D3D12_VIDEO_ENCODER_LEVEL_SETTING */
  MaxSupportedLevel: Uint8Array | Deno.PointerValue;
}

export const sizeofD3D12_FEATURE_DATA_VIDEO_ENCODER_PROFILE_LEVEL = 40;

export function allocD3D12_FEATURE_DATA_VIDEO_ENCODER_PROFILE_LEVEL(data?: Partial<D3D12_FEATURE_DATA_VIDEO_ENCODER_PROFILE_LEVEL>): Uint8Array {
  const buf = new Uint8Array(sizeofD3D12_FEATURE_DATA_VIDEO_ENCODER_PROFILE_LEVEL);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.NodeIndex !== undefined) view.setUint32(0, Number(data.NodeIndex), true);
  // 0x04: i32
  if (data?.Codec !== undefined) view.setInt32(4, Number(data.Codec), true);
  // 0x08: pointer
  if (data?.Profile !== undefined) view.setBigUint64(8, data.Profile === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.Profile))), true);
  // 0x10: i32
  if (data?.IsSupported !== undefined) view.setInt32(16, Number(data.IsSupported), true);
  // 0x14: pad4
  // 0x18: pointer
  if (data?.MinSupportedLevel !== undefined) view.setBigUint64(24, data.MinSupportedLevel === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.MinSupportedLevel))), true);
  // 0x20: pointer
  if (data?.MaxSupportedLevel !== undefined) view.setBigUint64(32, data.MaxSupportedLevel === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.MaxSupportedLevel))), true);
  return buf;
}

export class D3D12_FEATURE_DATA_VIDEO_ENCODER_PROFILE_LEVELView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get NodeIndex(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: i32
  get Codec(): number {
    return this.view.getInt32(4, true);
  }

  // 0x08: pointer
  get Profile(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x10: i32
  get IsSupported(): number {
    return this.view.getInt32(16, true);
  }

  // 0x14: pad4

  // 0x18: pointer
  get MinSupportedLevel(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(24, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x20: pointer
  get MaxSupportedLevel(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(32, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: u32
  set NodeIndex(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: i32
  set Codec(value: number) {
    this.view.setInt32(4, value, true);
  }

  // 0x08: pointer
  set Profile(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x10: i32
  set IsSupported(value: number) {
    this.view.setInt32(16, value, true);
  }

  // 0x14: pad4

  // 0x18: pointer
  set MinSupportedLevel(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(24, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x20: pointer
  set MaxSupportedLevel(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(32, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.Media.MediaFoundation.D3D12_VIDEO_ENCODER_PICTURE_RESOLUTION_DESC (size: 8)
 */
export interface D3D12_VIDEO_ENCODER_PICTURE_RESOLUTION_DESC {
  /** u32 */
  Width: number;
  /** u32 */
  Height: number;
}

export const sizeofD3D12_VIDEO_ENCODER_PICTURE_RESOLUTION_DESC = 8;

export function allocD3D12_VIDEO_ENCODER_PICTURE_RESOLUTION_DESC(data?: Partial<D3D12_VIDEO_ENCODER_PICTURE_RESOLUTION_DESC>): Uint8Array {
  const buf = new Uint8Array(sizeofD3D12_VIDEO_ENCODER_PICTURE_RESOLUTION_DESC);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.Width !== undefined) view.setUint32(0, Number(data.Width), true);
  // 0x04: u32
  if (data?.Height !== undefined) view.setUint32(4, Number(data.Height), true);
  return buf;
}

export class D3D12_VIDEO_ENCODER_PICTURE_RESOLUTION_DESCView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get Width(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: u32
  get Height(): number {
    return this.view.getUint32(4, true);
  }

  // 0x00: u32
  set Width(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: u32
  set Height(value: number) {
    this.view.setUint32(4, value, true);
  }
}

/**
 * Windows.Win32.Media.MediaFoundation.D3D12_VIDEO_ENCODER_PICTURE_RESOLUTION_RATIO_DESC (size: 8)
 */
export interface D3D12_VIDEO_ENCODER_PICTURE_RESOLUTION_RATIO_DESC {
  /** u32 */
  WidthRatio: number;
  /** u32 */
  HeightRatio: number;
}

export const sizeofD3D12_VIDEO_ENCODER_PICTURE_RESOLUTION_RATIO_DESC = 8;

export function allocD3D12_VIDEO_ENCODER_PICTURE_RESOLUTION_RATIO_DESC(data?: Partial<D3D12_VIDEO_ENCODER_PICTURE_RESOLUTION_RATIO_DESC>): Uint8Array {
  const buf = new Uint8Array(sizeofD3D12_VIDEO_ENCODER_PICTURE_RESOLUTION_RATIO_DESC);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.WidthRatio !== undefined) view.setUint32(0, Number(data.WidthRatio), true);
  // 0x04: u32
  if (data?.HeightRatio !== undefined) view.setUint32(4, Number(data.HeightRatio), true);
  return buf;
}

export class D3D12_VIDEO_ENCODER_PICTURE_RESOLUTION_RATIO_DESCView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get WidthRatio(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: u32
  get HeightRatio(): number {
    return this.view.getUint32(4, true);
  }

  // 0x00: u32
  set WidthRatio(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: u32
  set HeightRatio(value: number) {
    this.view.setUint32(4, value, true);
  }
}

/**
 * Windows.Win32.Media.MediaFoundation.D3D12_FEATURE_DATA_VIDEO_ENCODER_OUTPUT_RESOLUTION_RATIOS_COUNT (size: 16)
 */
export interface D3D12_FEATURE_DATA_VIDEO_ENCODER_OUTPUT_RESOLUTION_RATIOS_COUNT {
  /** u32 */
  NodeIndex: number;
  /** Windows.Win32.Media.MediaFoundation.D3D12_VIDEO_ENCODER_CODEC */
  Codec: D3D12_VIDEO_ENCODER_CODEC;
  /** u32 */
  ResolutionRatiosCount: number;
}

export const sizeofD3D12_FEATURE_DATA_VIDEO_ENCODER_OUTPUT_RESOLUTION_RATIOS_COUNT = 16;

export function allocD3D12_FEATURE_DATA_VIDEO_ENCODER_OUTPUT_RESOLUTION_RATIOS_COUNT(data?: Partial<D3D12_FEATURE_DATA_VIDEO_ENCODER_OUTPUT_RESOLUTION_RATIOS_COUNT>): Uint8Array {
  const buf = new Uint8Array(sizeofD3D12_FEATURE_DATA_VIDEO_ENCODER_OUTPUT_RESOLUTION_RATIOS_COUNT);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.NodeIndex !== undefined) view.setUint32(0, Number(data.NodeIndex), true);
  // 0x04: i32
  if (data?.Codec !== undefined) view.setInt32(4, Number(data.Codec), true);
  // 0x08: u32
  if (data?.ResolutionRatiosCount !== undefined) view.setUint32(8, Number(data.ResolutionRatiosCount), true);
  // 0x0c: pad4
  return buf;
}

export class D3D12_FEATURE_DATA_VIDEO_ENCODER_OUTPUT_RESOLUTION_RATIOS_COUNTView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get NodeIndex(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: i32
  get Codec(): number {
    return this.view.getInt32(4, true);
  }

  // 0x08: u32
  get ResolutionRatiosCount(): number {
    return this.view.getUint32(8, true);
  }

  // 0x0c: pad4

  // 0x00: u32
  set NodeIndex(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: i32
  set Codec(value: number) {
    this.view.setInt32(4, value, true);
  }

  // 0x08: u32
  set ResolutionRatiosCount(value: number) {
    this.view.setUint32(8, value, true);
  }

  // 0x0c: pad4
}

/**
 * Windows.Win32.Media.MediaFoundation.D3D12_FEATURE_DATA_VIDEO_ENCODER_OUTPUT_RESOLUTION (size: 48)
 */
export interface D3D12_FEATURE_DATA_VIDEO_ENCODER_OUTPUT_RESOLUTION {
  /** u32 */
  NodeIndex: number;
  /** Windows.Win32.Media.MediaFoundation.D3D12_VIDEO_ENCODER_CODEC */
  Codec: D3D12_VIDEO_ENCODER_CODEC;
  /** u32 */
  ResolutionRatiosCount: number;
  /** Windows.Win32.Foundation.BOOL */
  IsSupported: boolean;
  /** Windows.Win32.Media.MediaFoundation.D3D12_VIDEO_ENCODER_PICTURE_RESOLUTION_DESC */
  MinResolutionSupported: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.Media.MediaFoundation.D3D12_VIDEO_ENCODER_PICTURE_RESOLUTION_DESC */
  MaxResolutionSupported: Uint8Array | Deno.PointerValue;
  /** u32 */
  ResolutionWidthMultipleRequirement: number;
  /** u32 */
  ResolutionHeightMultipleRequirement: number;
  /** ptr */
  pResolutionRatios: Deno.PointerValue | Uint8Array;
}

export const sizeofD3D12_FEATURE_DATA_VIDEO_ENCODER_OUTPUT_RESOLUTION = 48;

export function allocD3D12_FEATURE_DATA_VIDEO_ENCODER_OUTPUT_RESOLUTION(data?: Partial<D3D12_FEATURE_DATA_VIDEO_ENCODER_OUTPUT_RESOLUTION>): Uint8Array {
  const buf = new Uint8Array(sizeofD3D12_FEATURE_DATA_VIDEO_ENCODER_OUTPUT_RESOLUTION);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.NodeIndex !== undefined) view.setUint32(0, Number(data.NodeIndex), true);
  // 0x04: i32
  if (data?.Codec !== undefined) view.setInt32(4, Number(data.Codec), true);
  // 0x08: u32
  if (data?.ResolutionRatiosCount !== undefined) view.setUint32(8, Number(data.ResolutionRatiosCount), true);
  // 0x0c: i32
  if (data?.IsSupported !== undefined) view.setInt32(12, Number(data.IsSupported), true);
  // 0x10: pointer
  if (data?.MinResolutionSupported !== undefined) view.setBigUint64(16, data.MinResolutionSupported === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.MinResolutionSupported))), true);
  // 0x18: pointer
  if (data?.MaxResolutionSupported !== undefined) view.setBigUint64(24, data.MaxResolutionSupported === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.MaxResolutionSupported))), true);
  // 0x20: u32
  if (data?.ResolutionWidthMultipleRequirement !== undefined) view.setUint32(32, Number(data.ResolutionWidthMultipleRequirement), true);
  // 0x24: u32
  if (data?.ResolutionHeightMultipleRequirement !== undefined) view.setUint32(36, Number(data.ResolutionHeightMultipleRequirement), true);
  // 0x28: pointer
  if (data?.pResolutionRatios !== undefined) view.setBigUint64(40, data.pResolutionRatios === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.pResolutionRatios))), true);
  return buf;
}

export class D3D12_FEATURE_DATA_VIDEO_ENCODER_OUTPUT_RESOLUTIONView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get NodeIndex(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: i32
  get Codec(): number {
    return this.view.getInt32(4, true);
  }

  // 0x08: u32
  get ResolutionRatiosCount(): number {
    return this.view.getUint32(8, true);
  }

  // 0x0c: i32
  get IsSupported(): number {
    return this.view.getInt32(12, true);
  }

  // 0x10: pointer
  get MinResolutionSupported(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(16, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x18: pointer
  get MaxResolutionSupported(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(24, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x20: u32
  get ResolutionWidthMultipleRequirement(): number {
    return this.view.getUint32(32, true);
  }

  // 0x24: u32
  get ResolutionHeightMultipleRequirement(): number {
    return this.view.getUint32(36, true);
  }

  // 0x28: pointer
  get pResolutionRatios(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(40, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: u32
  set NodeIndex(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: i32
  set Codec(value: number) {
    this.view.setInt32(4, value, true);
  }

  // 0x08: u32
  set ResolutionRatiosCount(value: number) {
    this.view.setUint32(8, value, true);
  }

  // 0x0c: i32
  set IsSupported(value: number) {
    this.view.setInt32(12, value, true);
  }

  // 0x10: pointer
  set MinResolutionSupported(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(16, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x18: pointer
  set MaxResolutionSupported(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(24, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x20: u32
  set ResolutionWidthMultipleRequirement(value: number) {
    this.view.setUint32(32, value, true);
  }

  // 0x24: u32
  set ResolutionHeightMultipleRequirement(value: number) {
    this.view.setUint32(36, value, true);
  }

  // 0x28: pointer
  set pResolutionRatios(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(40, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.Media.MediaFoundation.D3D12_FEATURE_DATA_VIDEO_ENCODER_INPUT_FORMAT (size: 24)
 */
export interface D3D12_FEATURE_DATA_VIDEO_ENCODER_INPUT_FORMAT {
  /** u32 */
  NodeIndex: number;
  /** Windows.Win32.Media.MediaFoundation.D3D12_VIDEO_ENCODER_CODEC */
  Codec: D3D12_VIDEO_ENCODER_CODEC;
  /** Windows.Win32.Media.MediaFoundation.D3D12_VIDEO_ENCODER_PROFILE_DESC */
  Profile: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.Graphics.Dxgi.Common.DXGI_FORMAT */
  Format: DXGI_FORMAT;
  /** Windows.Win32.Foundation.BOOL */
  IsSupported: boolean;
}

export const sizeofD3D12_FEATURE_DATA_VIDEO_ENCODER_INPUT_FORMAT = 24;

export function allocD3D12_FEATURE_DATA_VIDEO_ENCODER_INPUT_FORMAT(data?: Partial<D3D12_FEATURE_DATA_VIDEO_ENCODER_INPUT_FORMAT>): Uint8Array {
  const buf = new Uint8Array(sizeofD3D12_FEATURE_DATA_VIDEO_ENCODER_INPUT_FORMAT);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.NodeIndex !== undefined) view.setUint32(0, Number(data.NodeIndex), true);
  // 0x04: i32
  if (data?.Codec !== undefined) view.setInt32(4, Number(data.Codec), true);
  // 0x08: pointer
  if (data?.Profile !== undefined) view.setBigUint64(8, data.Profile === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.Profile))), true);
  // 0x10: u32
  if (data?.Format !== undefined) view.setUint32(16, Number(data.Format), true);
  // 0x14: i32
  if (data?.IsSupported !== undefined) view.setInt32(20, Number(data.IsSupported), true);
  return buf;
}

export class D3D12_FEATURE_DATA_VIDEO_ENCODER_INPUT_FORMATView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get NodeIndex(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: i32
  get Codec(): number {
    return this.view.getInt32(4, true);
  }

  // 0x08: pointer
  get Profile(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x10: u32
  get Format(): number {
    return this.view.getUint32(16, true);
  }

  // 0x14: i32
  get IsSupported(): number {
    return this.view.getInt32(20, true);
  }

  // 0x00: u32
  set NodeIndex(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: i32
  set Codec(value: number) {
    this.view.setInt32(4, value, true);
  }

  // 0x08: pointer
  set Profile(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x10: u32
  set Format(value: number) {
    this.view.setUint32(16, value, true);
  }

  // 0x14: i32
  set IsSupported(value: number) {
    this.view.setInt32(20, value, true);
  }
}

/**
 * Windows.Win32.Media.MediaFoundation.D3D12_FEATURE_DATA_VIDEO_ENCODER_RATE_CONTROL_MODE (size: 16)
 */
export interface D3D12_FEATURE_DATA_VIDEO_ENCODER_RATE_CONTROL_MODE {
  /** u32 */
  NodeIndex: number;
  /** Windows.Win32.Media.MediaFoundation.D3D12_VIDEO_ENCODER_CODEC */
  Codec: D3D12_VIDEO_ENCODER_CODEC;
  /** Windows.Win32.Media.MediaFoundation.D3D12_VIDEO_ENCODER_RATE_CONTROL_MODE */
  RateControlMode: D3D12_VIDEO_ENCODER_RATE_CONTROL_MODE;
  /** Windows.Win32.Foundation.BOOL */
  IsSupported: boolean;
}

export const sizeofD3D12_FEATURE_DATA_VIDEO_ENCODER_RATE_CONTROL_MODE = 16;

export function allocD3D12_FEATURE_DATA_VIDEO_ENCODER_RATE_CONTROL_MODE(data?: Partial<D3D12_FEATURE_DATA_VIDEO_ENCODER_RATE_CONTROL_MODE>): Uint8Array {
  const buf = new Uint8Array(sizeofD3D12_FEATURE_DATA_VIDEO_ENCODER_RATE_CONTROL_MODE);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.NodeIndex !== undefined) view.setUint32(0, Number(data.NodeIndex), true);
  // 0x04: i32
  if (data?.Codec !== undefined) view.setInt32(4, Number(data.Codec), true);
  // 0x08: i32
  if (data?.RateControlMode !== undefined) view.setInt32(8, Number(data.RateControlMode), true);
  // 0x0c: i32
  if (data?.IsSupported !== undefined) view.setInt32(12, Number(data.IsSupported), true);
  return buf;
}

export class D3D12_FEATURE_DATA_VIDEO_ENCODER_RATE_CONTROL_MODEView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get NodeIndex(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: i32
  get Codec(): number {
    return this.view.getInt32(4, true);
  }

  // 0x08: i32
  get RateControlMode(): number {
    return this.view.getInt32(8, true);
  }

  // 0x0c: i32
  get IsSupported(): number {
    return this.view.getInt32(12, true);
  }

  // 0x00: u32
  set NodeIndex(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: i32
  set Codec(value: number) {
    this.view.setInt32(4, value, true);
  }

  // 0x08: i32
  set RateControlMode(value: number) {
    this.view.setInt32(8, value, true);
  }

  // 0x0c: i32
  set IsSupported(value: number) {
    this.view.setInt32(12, value, true);
  }
}

/**
 * Windows.Win32.Media.MediaFoundation.D3D12_FEATURE_DATA_VIDEO_ENCODER_INTRA_REFRESH_MODE (size: 32)
 */
export interface D3D12_FEATURE_DATA_VIDEO_ENCODER_INTRA_REFRESH_MODE {
  /** u32 */
  NodeIndex: number;
  /** Windows.Win32.Media.MediaFoundation.D3D12_VIDEO_ENCODER_CODEC */
  Codec: D3D12_VIDEO_ENCODER_CODEC;
  /** Windows.Win32.Media.MediaFoundation.D3D12_VIDEO_ENCODER_PROFILE_DESC */
  Profile: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.Media.MediaFoundation.D3D12_VIDEO_ENCODER_LEVEL_SETTING */
  Level: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.Media.MediaFoundation.D3D12_VIDEO_ENCODER_INTRA_REFRESH_MODE */
  IntraRefreshMode: D3D12_VIDEO_ENCODER_INTRA_REFRESH_MODE;
  /** Windows.Win32.Foundation.BOOL */
  IsSupported: boolean;
}

export const sizeofD3D12_FEATURE_DATA_VIDEO_ENCODER_INTRA_REFRESH_MODE = 32;

export function allocD3D12_FEATURE_DATA_VIDEO_ENCODER_INTRA_REFRESH_MODE(data?: Partial<D3D12_FEATURE_DATA_VIDEO_ENCODER_INTRA_REFRESH_MODE>): Uint8Array {
  const buf = new Uint8Array(sizeofD3D12_FEATURE_DATA_VIDEO_ENCODER_INTRA_REFRESH_MODE);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.NodeIndex !== undefined) view.setUint32(0, Number(data.NodeIndex), true);
  // 0x04: i32
  if (data?.Codec !== undefined) view.setInt32(4, Number(data.Codec), true);
  // 0x08: pointer
  if (data?.Profile !== undefined) view.setBigUint64(8, data.Profile === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.Profile))), true);
  // 0x10: pointer
  if (data?.Level !== undefined) view.setBigUint64(16, data.Level === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.Level))), true);
  // 0x18: i32
  if (data?.IntraRefreshMode !== undefined) view.setInt32(24, Number(data.IntraRefreshMode), true);
  // 0x1c: i32
  if (data?.IsSupported !== undefined) view.setInt32(28, Number(data.IsSupported), true);
  return buf;
}

export class D3D12_FEATURE_DATA_VIDEO_ENCODER_INTRA_REFRESH_MODEView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get NodeIndex(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: i32
  get Codec(): number {
    return this.view.getInt32(4, true);
  }

  // 0x08: pointer
  get Profile(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x10: pointer
  get Level(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(16, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x18: i32
  get IntraRefreshMode(): number {
    return this.view.getInt32(24, true);
  }

  // 0x1c: i32
  get IsSupported(): number {
    return this.view.getInt32(28, true);
  }

  // 0x00: u32
  set NodeIndex(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: i32
  set Codec(value: number) {
    this.view.setInt32(4, value, true);
  }

  // 0x08: pointer
  set Profile(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x10: pointer
  set Level(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(16, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x18: i32
  set IntraRefreshMode(value: number) {
    this.view.setInt32(24, value, true);
  }

  // 0x1c: i32
  set IsSupported(value: number) {
    this.view.setInt32(28, value, true);
  }
}

/**
 * Windows.Win32.Media.MediaFoundation.D3D12_FEATURE_DATA_VIDEO_ENCODER_FRAME_SUBREGION_LAYOUT_MODE (size: 32)
 */
export interface D3D12_FEATURE_DATA_VIDEO_ENCODER_FRAME_SUBREGION_LAYOUT_MODE {
  /** u32 */
  NodeIndex: number;
  /** Windows.Win32.Media.MediaFoundation.D3D12_VIDEO_ENCODER_CODEC */
  Codec: D3D12_VIDEO_ENCODER_CODEC;
  /** Windows.Win32.Media.MediaFoundation.D3D12_VIDEO_ENCODER_PROFILE_DESC */
  Profile: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.Media.MediaFoundation.D3D12_VIDEO_ENCODER_LEVEL_SETTING */
  Level: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.Media.MediaFoundation.D3D12_VIDEO_ENCODER_FRAME_SUBREGION_LAYOUT_MODE */
  SubregionMode: D3D12_VIDEO_ENCODER_FRAME_SUBREGION_LAYOUT_MODE;
  /** Windows.Win32.Foundation.BOOL */
  IsSupported: boolean;
}

export const sizeofD3D12_FEATURE_DATA_VIDEO_ENCODER_FRAME_SUBREGION_LAYOUT_MODE = 32;

export function allocD3D12_FEATURE_DATA_VIDEO_ENCODER_FRAME_SUBREGION_LAYOUT_MODE(data?: Partial<D3D12_FEATURE_DATA_VIDEO_ENCODER_FRAME_SUBREGION_LAYOUT_MODE>): Uint8Array {
  const buf = new Uint8Array(sizeofD3D12_FEATURE_DATA_VIDEO_ENCODER_FRAME_SUBREGION_LAYOUT_MODE);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.NodeIndex !== undefined) view.setUint32(0, Number(data.NodeIndex), true);
  // 0x04: i32
  if (data?.Codec !== undefined) view.setInt32(4, Number(data.Codec), true);
  // 0x08: pointer
  if (data?.Profile !== undefined) view.setBigUint64(8, data.Profile === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.Profile))), true);
  // 0x10: pointer
  if (data?.Level !== undefined) view.setBigUint64(16, data.Level === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.Level))), true);
  // 0x18: i32
  if (data?.SubregionMode !== undefined) view.setInt32(24, Number(data.SubregionMode), true);
  // 0x1c: i32
  if (data?.IsSupported !== undefined) view.setInt32(28, Number(data.IsSupported), true);
  return buf;
}

export class D3D12_FEATURE_DATA_VIDEO_ENCODER_FRAME_SUBREGION_LAYOUT_MODEView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get NodeIndex(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: i32
  get Codec(): number {
    return this.view.getInt32(4, true);
  }

  // 0x08: pointer
  get Profile(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x10: pointer
  get Level(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(16, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x18: i32
  get SubregionMode(): number {
    return this.view.getInt32(24, true);
  }

  // 0x1c: i32
  get IsSupported(): number {
    return this.view.getInt32(28, true);
  }

  // 0x00: u32
  set NodeIndex(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: i32
  set Codec(value: number) {
    this.view.setInt32(4, value, true);
  }

  // 0x08: pointer
  set Profile(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x10: pointer
  set Level(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(16, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x18: i32
  set SubregionMode(value: number) {
    this.view.setInt32(24, value, true);
  }

  // 0x1c: i32
  set IsSupported(value: number) {
    this.view.setInt32(28, value, true);
  }
}

/**
 * Windows.Win32.Media.MediaFoundation.D3D12_VIDEO_ENCODER_HEAP_DESC (size: 48)
 */
export interface D3D12_VIDEO_ENCODER_HEAP_DESC {
  /** u32 */
  NodeMask: number;
  /** Windows.Win32.Media.MediaFoundation.D3D12_VIDEO_ENCODER_HEAP_FLAGS */
  Flags: D3D12_VIDEO_ENCODER_HEAP_FLAGS;
  /** Windows.Win32.Media.MediaFoundation.D3D12_VIDEO_ENCODER_CODEC */
  EncodeCodec: D3D12_VIDEO_ENCODER_CODEC;
  /** Windows.Win32.Media.MediaFoundation.D3D12_VIDEO_ENCODER_PROFILE_DESC */
  EncodeProfile: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.Media.MediaFoundation.D3D12_VIDEO_ENCODER_LEVEL_SETTING */
  EncodeLevel: Uint8Array | Deno.PointerValue;
  /** u32 */
  ResolutionsListCount: number;
  /** ptr */
  pResolutionList: Deno.PointerValue | Uint8Array;
}

export const sizeofD3D12_VIDEO_ENCODER_HEAP_DESC = 48;

export function allocD3D12_VIDEO_ENCODER_HEAP_DESC(data?: Partial<D3D12_VIDEO_ENCODER_HEAP_DESC>): Uint8Array {
  const buf = new Uint8Array(sizeofD3D12_VIDEO_ENCODER_HEAP_DESC);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.NodeMask !== undefined) view.setUint32(0, Number(data.NodeMask), true);
  // 0x04: u32
  if (data?.Flags !== undefined) view.setUint32(4, Number(data.Flags), true);
  // 0x08: i32
  if (data?.EncodeCodec !== undefined) view.setInt32(8, Number(data.EncodeCodec), true);
  // 0x0c: pad4
  // 0x10: pointer
  if (data?.EncodeProfile !== undefined) view.setBigUint64(16, data.EncodeProfile === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.EncodeProfile))), true);
  // 0x18: pointer
  if (data?.EncodeLevel !== undefined) view.setBigUint64(24, data.EncodeLevel === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.EncodeLevel))), true);
  // 0x20: u32
  if (data?.ResolutionsListCount !== undefined) view.setUint32(32, Number(data.ResolutionsListCount), true);
  // 0x24: pad4
  // 0x28: pointer
  if (data?.pResolutionList !== undefined) view.setBigUint64(40, data.pResolutionList === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.pResolutionList))), true);
  return buf;
}

export class D3D12_VIDEO_ENCODER_HEAP_DESCView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get NodeMask(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: u32
  get Flags(): number {
    return this.view.getUint32(4, true);
  }

  // 0x08: i32
  get EncodeCodec(): number {
    return this.view.getInt32(8, true);
  }

  // 0x0c: pad4

  // 0x10: pointer
  get EncodeProfile(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(16, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x18: pointer
  get EncodeLevel(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(24, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x20: u32
  get ResolutionsListCount(): number {
    return this.view.getUint32(32, true);
  }

  // 0x24: pad4

  // 0x28: pointer
  get pResolutionList(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(40, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: u32
  set NodeMask(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: u32
  set Flags(value: number) {
    this.view.setUint32(4, value, true);
  }

  // 0x08: i32
  set EncodeCodec(value: number) {
    this.view.setInt32(8, value, true);
  }

  // 0x0c: pad4

  // 0x10: pointer
  set EncodeProfile(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(16, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x18: pointer
  set EncodeLevel(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(24, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x20: u32
  set ResolutionsListCount(value: number) {
    this.view.setUint32(32, value, true);
  }

  // 0x24: pad4

  // 0x28: pointer
  set pResolutionList(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(40, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.Media.MediaFoundation.D3D12_FEATURE_DATA_VIDEO_ENCODER_HEAP_SIZE (size: 32)
 */
export interface D3D12_FEATURE_DATA_VIDEO_ENCODER_HEAP_SIZE {
  /** Windows.Win32.Media.MediaFoundation.D3D12_VIDEO_ENCODER_HEAP_DESC */
  HeapDesc: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.Foundation.BOOL */
  IsSupported: boolean;
  /** u64 */
  MemoryPoolL0Size: bigint | number;
  /** u64 */
  MemoryPoolL1Size: bigint | number;
}

export const sizeofD3D12_FEATURE_DATA_VIDEO_ENCODER_HEAP_SIZE = 32;

export function allocD3D12_FEATURE_DATA_VIDEO_ENCODER_HEAP_SIZE(data?: Partial<D3D12_FEATURE_DATA_VIDEO_ENCODER_HEAP_SIZE>): Uint8Array {
  const buf = new Uint8Array(sizeofD3D12_FEATURE_DATA_VIDEO_ENCODER_HEAP_SIZE);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.HeapDesc !== undefined) view.setBigUint64(0, data.HeapDesc === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.HeapDesc))), true);
  // 0x08: i32
  if (data?.IsSupported !== undefined) view.setInt32(8, Number(data.IsSupported), true);
  // 0x0c: pad4
  // 0x10: u64
  if (data?.MemoryPoolL0Size !== undefined) view.setBigUint64(16, BigInt(data.MemoryPoolL0Size), true);
  // 0x18: u64
  if (data?.MemoryPoolL1Size !== undefined) view.setBigUint64(24, BigInt(data.MemoryPoolL1Size), true);
  return buf;
}

export class D3D12_FEATURE_DATA_VIDEO_ENCODER_HEAP_SIZEView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get HeapDesc(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(0, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x08: i32
  get IsSupported(): number {
    return this.view.getInt32(8, true);
  }

  // 0x0c: pad4

  // 0x10: u64
  get MemoryPoolL0Size(): bigint | number {
    return Number(this.view.getBigUint64(16, true));
  }

  // 0x18: u64
  get MemoryPoolL1Size(): bigint | number {
    return Number(this.view.getBigUint64(24, true));
  }

  // 0x00: pointer
  set HeapDesc(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(0, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x08: i32
  set IsSupported(value: number) {
    this.view.setInt32(8, value, true);
  }

  // 0x0c: pad4

  // 0x10: u64
  set MemoryPoolL0Size(value: bigint | number) {
    this.view.setBigUint64(16, BigInt(value), true);
  }

  // 0x18: u64
  set MemoryPoolL1Size(value: bigint | number) {
    this.view.setBigUint64(24, BigInt(value), true);
  }
}

/**
 * Windows.Win32.Media.MediaFoundation.D3D12_VIDEO_ENCODER_CODEC_CONFIGURATION_SUPPORT_H264 (size: 8)
 */
export interface D3D12_VIDEO_ENCODER_CODEC_CONFIGURATION_SUPPORT_H264 {
  /** Windows.Win32.Media.MediaFoundation.D3D12_VIDEO_ENCODER_CODEC_CONFIGURATION_SUPPORT_H264_FLAGS */
  SupportFlags: D3D12_VIDEO_ENCODER_CODEC_CONFIGURATION_SUPPORT_H264_FLAGS;
  /** Windows.Win32.Media.MediaFoundation.D3D12_VIDEO_ENCODER_CODEC_CONFIGURATION_H264_SLICES_DEBLOCKING_MODE_FLAGS */
  DisableDeblockingFilterSupportedModes: D3D12_VIDEO_ENCODER_CODEC_CONFIGURATION_H264_SLICES_DEBLOCKING_MODE_FLAGS;
}

export const sizeofD3D12_VIDEO_ENCODER_CODEC_CONFIGURATION_SUPPORT_H264 = 8;

export function allocD3D12_VIDEO_ENCODER_CODEC_CONFIGURATION_SUPPORT_H264(data?: Partial<D3D12_VIDEO_ENCODER_CODEC_CONFIGURATION_SUPPORT_H264>): Uint8Array {
  const buf = new Uint8Array(sizeofD3D12_VIDEO_ENCODER_CODEC_CONFIGURATION_SUPPORT_H264);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.SupportFlags !== undefined) view.setUint32(0, Number(data.SupportFlags), true);
  // 0x04: u32
  if (data?.DisableDeblockingFilterSupportedModes !== undefined) view.setUint32(4, Number(data.DisableDeblockingFilterSupportedModes), true);
  return buf;
}

export class D3D12_VIDEO_ENCODER_CODEC_CONFIGURATION_SUPPORT_H264View {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get SupportFlags(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: u32
  get DisableDeblockingFilterSupportedModes(): number {
    return this.view.getUint32(4, true);
  }

  // 0x00: u32
  set SupportFlags(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: u32
  set DisableDeblockingFilterSupportedModes(value: number) {
    this.view.setUint32(4, value, true);
  }
}

/**
 * Windows.Win32.Media.MediaFoundation.D3D12_VIDEO_ENCODER_CODEC_CONFIGURATION_SUPPORT_HEVC (size: 24)
 */
export interface D3D12_VIDEO_ENCODER_CODEC_CONFIGURATION_SUPPORT_HEVC {
  /** Windows.Win32.Media.MediaFoundation.D3D12_VIDEO_ENCODER_CODEC_CONFIGURATION_SUPPORT_HEVC_FLAGS */
  SupportFlags: D3D12_VIDEO_ENCODER_CODEC_CONFIGURATION_SUPPORT_HEVC_FLAGS;
  /** Windows.Win32.Media.MediaFoundation.D3D12_VIDEO_ENCODER_CODEC_CONFIGURATION_HEVC_CUSIZE */
  MinLumaCodingUnitSize: D3D12_VIDEO_ENCODER_CODEC_CONFIGURATION_HEVC_CUSIZE;
  /** Windows.Win32.Media.MediaFoundation.D3D12_VIDEO_ENCODER_CODEC_CONFIGURATION_HEVC_CUSIZE */
  MaxLumaCodingUnitSize: D3D12_VIDEO_ENCODER_CODEC_CONFIGURATION_HEVC_CUSIZE;
  /** Windows.Win32.Media.MediaFoundation.D3D12_VIDEO_ENCODER_CODEC_CONFIGURATION_HEVC_TUSIZE */
  MinLumaTransformUnitSize: D3D12_VIDEO_ENCODER_CODEC_CONFIGURATION_HEVC_TUSIZE;
  /** Windows.Win32.Media.MediaFoundation.D3D12_VIDEO_ENCODER_CODEC_CONFIGURATION_HEVC_TUSIZE */
  MaxLumaTransformUnitSize: D3D12_VIDEO_ENCODER_CODEC_CONFIGURATION_HEVC_TUSIZE;
  /** u8 */
  max_transform_hierarchy_depth_inter: number;
  /** u8 */
  max_transform_hierarchy_depth_intra: number;
}

export const sizeofD3D12_VIDEO_ENCODER_CODEC_CONFIGURATION_SUPPORT_HEVC = 24;

export function allocD3D12_VIDEO_ENCODER_CODEC_CONFIGURATION_SUPPORT_HEVC(data?: Partial<D3D12_VIDEO_ENCODER_CODEC_CONFIGURATION_SUPPORT_HEVC>): Uint8Array {
  const buf = new Uint8Array(sizeofD3D12_VIDEO_ENCODER_CODEC_CONFIGURATION_SUPPORT_HEVC);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.SupportFlags !== undefined) view.setUint32(0, Number(data.SupportFlags), true);
  // 0x04: i32
  if (data?.MinLumaCodingUnitSize !== undefined) view.setInt32(4, Number(data.MinLumaCodingUnitSize), true);
  // 0x08: i32
  if (data?.MaxLumaCodingUnitSize !== undefined) view.setInt32(8, Number(data.MaxLumaCodingUnitSize), true);
  // 0x0c: i32
  if (data?.MinLumaTransformUnitSize !== undefined) view.setInt32(12, Number(data.MinLumaTransformUnitSize), true);
  // 0x10: i32
  if (data?.MaxLumaTransformUnitSize !== undefined) view.setInt32(16, Number(data.MaxLumaTransformUnitSize), true);
  // 0x14: u8
  if (data?.max_transform_hierarchy_depth_inter !== undefined) view.setUint8(20, Number(data.max_transform_hierarchy_depth_inter));
  // 0x15: u8
  if (data?.max_transform_hierarchy_depth_intra !== undefined) view.setUint8(21, Number(data.max_transform_hierarchy_depth_intra));
  // 0x16: pad2
  return buf;
}

export class D3D12_VIDEO_ENCODER_CODEC_CONFIGURATION_SUPPORT_HEVCView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get SupportFlags(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: i32
  get MinLumaCodingUnitSize(): number {
    return this.view.getInt32(4, true);
  }

  // 0x08: i32
  get MaxLumaCodingUnitSize(): number {
    return this.view.getInt32(8, true);
  }

  // 0x0c: i32
  get MinLumaTransformUnitSize(): number {
    return this.view.getInt32(12, true);
  }

  // 0x10: i32
  get MaxLumaTransformUnitSize(): number {
    return this.view.getInt32(16, true);
  }

  // 0x14: u8
  get max_transform_hierarchy_depth_inter(): number {
    return this.view.getUint8(20);
  }

  // 0x15: u8
  get max_transform_hierarchy_depth_intra(): number {
    return this.view.getUint8(21);
  }

  // 0x16: pad2

  // 0x00: u32
  set SupportFlags(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: i32
  set MinLumaCodingUnitSize(value: number) {
    this.view.setInt32(4, value, true);
  }

  // 0x08: i32
  set MaxLumaCodingUnitSize(value: number) {
    this.view.setInt32(8, value, true);
  }

  // 0x0c: i32
  set MinLumaTransformUnitSize(value: number) {
    this.view.setInt32(12, value, true);
  }

  // 0x10: i32
  set MaxLumaTransformUnitSize(value: number) {
    this.view.setInt32(16, value, true);
  }

  // 0x14: u8
  set max_transform_hierarchy_depth_inter(value: number) {
    this.view.setUint8(20, value);
  }

  // 0x15: u8
  set max_transform_hierarchy_depth_intra(value: number) {
    this.view.setUint8(21, value);
  }

  // 0x16: pad2
}

/**
 * Windows.Win32.Media.MediaFoundation.D3D12_VIDEO_ENCODER_CODEC_CONFIGURATION_SUPPORT (size: 16)
 */
export interface D3D12_VIDEO_ENCODER_CODEC_CONFIGURATION_SUPPORT {
  /** u32 */
  DataSize: number;
  /** _Anonymous_e__Union */
  Anonymous: Uint8Array | Deno.PointerValue;
}

export const sizeofD3D12_VIDEO_ENCODER_CODEC_CONFIGURATION_SUPPORT = 16;

export function allocD3D12_VIDEO_ENCODER_CODEC_CONFIGURATION_SUPPORT(data?: Partial<D3D12_VIDEO_ENCODER_CODEC_CONFIGURATION_SUPPORT>): Uint8Array {
  const buf = new Uint8Array(sizeofD3D12_VIDEO_ENCODER_CODEC_CONFIGURATION_SUPPORT);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.DataSize !== undefined) view.setUint32(0, Number(data.DataSize), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.Anonymous !== undefined) view.setBigUint64(8, data.Anonymous === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.Anonymous))), true);
  return buf;
}

export class D3D12_VIDEO_ENCODER_CODEC_CONFIGURATION_SUPPORTView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get DataSize(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  get Anonymous(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: u32
  set DataSize(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  set Anonymous(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.Media.MediaFoundation.D3D12_FEATURE_DATA_VIDEO_ENCODER_CODEC_CONFIGURATION_SUPPORT (size: 32)
 */
export interface D3D12_FEATURE_DATA_VIDEO_ENCODER_CODEC_CONFIGURATION_SUPPORT {
  /** u32 */
  NodeIndex: number;
  /** Windows.Win32.Media.MediaFoundation.D3D12_VIDEO_ENCODER_CODEC */
  Codec: D3D12_VIDEO_ENCODER_CODEC;
  /** Windows.Win32.Media.MediaFoundation.D3D12_VIDEO_ENCODER_PROFILE_DESC */
  Profile: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.Foundation.BOOL */
  IsSupported: boolean;
  /** Windows.Win32.Media.MediaFoundation.D3D12_VIDEO_ENCODER_CODEC_CONFIGURATION_SUPPORT */
  CodecSupportLimits: Uint8Array | Deno.PointerValue;
}

export const sizeofD3D12_FEATURE_DATA_VIDEO_ENCODER_CODEC_CONFIGURATION_SUPPORT = 32;

export function allocD3D12_FEATURE_DATA_VIDEO_ENCODER_CODEC_CONFIGURATION_SUPPORT(data?: Partial<D3D12_FEATURE_DATA_VIDEO_ENCODER_CODEC_CONFIGURATION_SUPPORT>): Uint8Array {
  const buf = new Uint8Array(sizeofD3D12_FEATURE_DATA_VIDEO_ENCODER_CODEC_CONFIGURATION_SUPPORT);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.NodeIndex !== undefined) view.setUint32(0, Number(data.NodeIndex), true);
  // 0x04: i32
  if (data?.Codec !== undefined) view.setInt32(4, Number(data.Codec), true);
  // 0x08: pointer
  if (data?.Profile !== undefined) view.setBigUint64(8, data.Profile === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.Profile))), true);
  // 0x10: i32
  if (data?.IsSupported !== undefined) view.setInt32(16, Number(data.IsSupported), true);
  // 0x14: pad4
  // 0x18: pointer
  if (data?.CodecSupportLimits !== undefined) view.setBigUint64(24, data.CodecSupportLimits === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.CodecSupportLimits))), true);
  return buf;
}

export class D3D12_FEATURE_DATA_VIDEO_ENCODER_CODEC_CONFIGURATION_SUPPORTView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get NodeIndex(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: i32
  get Codec(): number {
    return this.view.getInt32(4, true);
  }

  // 0x08: pointer
  get Profile(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x10: i32
  get IsSupported(): number {
    return this.view.getInt32(16, true);
  }

  // 0x14: pad4

  // 0x18: pointer
  get CodecSupportLimits(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(24, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: u32
  set NodeIndex(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: i32
  set Codec(value: number) {
    this.view.setInt32(4, value, true);
  }

  // 0x08: pointer
  set Profile(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x10: i32
  set IsSupported(value: number) {
    this.view.setInt32(16, value, true);
  }

  // 0x14: pad4

  // 0x18: pointer
  set CodecSupportLimits(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(24, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.Media.MediaFoundation.D3D12_VIDEO_ENCODER_CODEC_PICTURE_CONTROL_SUPPORT_H264 (size: 24)
 */
export interface D3D12_VIDEO_ENCODER_CODEC_PICTURE_CONTROL_SUPPORT_H264 {
  /** u32 */
  MaxL0ReferencesForP: number;
  /** u32 */
  MaxL0ReferencesForB: number;
  /** u32 */
  MaxL1ReferencesForB: number;
  /** u32 */
  MaxLongTermReferences: number;
  /** u32 */
  MaxDPBCapacity: number;
}

export const sizeofD3D12_VIDEO_ENCODER_CODEC_PICTURE_CONTROL_SUPPORT_H264 = 24;

export function allocD3D12_VIDEO_ENCODER_CODEC_PICTURE_CONTROL_SUPPORT_H264(data?: Partial<D3D12_VIDEO_ENCODER_CODEC_PICTURE_CONTROL_SUPPORT_H264>): Uint8Array {
  const buf = new Uint8Array(sizeofD3D12_VIDEO_ENCODER_CODEC_PICTURE_CONTROL_SUPPORT_H264);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.MaxL0ReferencesForP !== undefined) view.setUint32(0, Number(data.MaxL0ReferencesForP), true);
  // 0x04: u32
  if (data?.MaxL0ReferencesForB !== undefined) view.setUint32(4, Number(data.MaxL0ReferencesForB), true);
  // 0x08: u32
  if (data?.MaxL1ReferencesForB !== undefined) view.setUint32(8, Number(data.MaxL1ReferencesForB), true);
  // 0x0c: u32
  if (data?.MaxLongTermReferences !== undefined) view.setUint32(12, Number(data.MaxLongTermReferences), true);
  // 0x10: u32
  if (data?.MaxDPBCapacity !== undefined) view.setUint32(16, Number(data.MaxDPBCapacity), true);
  // 0x14: pad4
  return buf;
}

export class D3D12_VIDEO_ENCODER_CODEC_PICTURE_CONTROL_SUPPORT_H264View {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get MaxL0ReferencesForP(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: u32
  get MaxL0ReferencesForB(): number {
    return this.view.getUint32(4, true);
  }

  // 0x08: u32
  get MaxL1ReferencesForB(): number {
    return this.view.getUint32(8, true);
  }

  // 0x0c: u32
  get MaxLongTermReferences(): number {
    return this.view.getUint32(12, true);
  }

  // 0x10: u32
  get MaxDPBCapacity(): number {
    return this.view.getUint32(16, true);
  }

  // 0x14: pad4

  // 0x00: u32
  set MaxL0ReferencesForP(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: u32
  set MaxL0ReferencesForB(value: number) {
    this.view.setUint32(4, value, true);
  }

  // 0x08: u32
  set MaxL1ReferencesForB(value: number) {
    this.view.setUint32(8, value, true);
  }

  // 0x0c: u32
  set MaxLongTermReferences(value: number) {
    this.view.setUint32(12, value, true);
  }

  // 0x10: u32
  set MaxDPBCapacity(value: number) {
    this.view.setUint32(16, value, true);
  }

  // 0x14: pad4
}

/**
 * Windows.Win32.Media.MediaFoundation.D3D12_VIDEO_ENCODER_CODEC_PICTURE_CONTROL_SUPPORT_HEVC (size: 24)
 */
export interface D3D12_VIDEO_ENCODER_CODEC_PICTURE_CONTROL_SUPPORT_HEVC {
  /** u32 */
  MaxL0ReferencesForP: number;
  /** u32 */
  MaxL0ReferencesForB: number;
  /** u32 */
  MaxL1ReferencesForB: number;
  /** u32 */
  MaxLongTermReferences: number;
  /** u32 */
  MaxDPBCapacity: number;
}

export const sizeofD3D12_VIDEO_ENCODER_CODEC_PICTURE_CONTROL_SUPPORT_HEVC = 24;

export function allocD3D12_VIDEO_ENCODER_CODEC_PICTURE_CONTROL_SUPPORT_HEVC(data?: Partial<D3D12_VIDEO_ENCODER_CODEC_PICTURE_CONTROL_SUPPORT_HEVC>): Uint8Array {
  const buf = new Uint8Array(sizeofD3D12_VIDEO_ENCODER_CODEC_PICTURE_CONTROL_SUPPORT_HEVC);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.MaxL0ReferencesForP !== undefined) view.setUint32(0, Number(data.MaxL0ReferencesForP), true);
  // 0x04: u32
  if (data?.MaxL0ReferencesForB !== undefined) view.setUint32(4, Number(data.MaxL0ReferencesForB), true);
  // 0x08: u32
  if (data?.MaxL1ReferencesForB !== undefined) view.setUint32(8, Number(data.MaxL1ReferencesForB), true);
  // 0x0c: u32
  if (data?.MaxLongTermReferences !== undefined) view.setUint32(12, Number(data.MaxLongTermReferences), true);
  // 0x10: u32
  if (data?.MaxDPBCapacity !== undefined) view.setUint32(16, Number(data.MaxDPBCapacity), true);
  // 0x14: pad4
  return buf;
}

export class D3D12_VIDEO_ENCODER_CODEC_PICTURE_CONTROL_SUPPORT_HEVCView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get MaxL0ReferencesForP(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: u32
  get MaxL0ReferencesForB(): number {
    return this.view.getUint32(4, true);
  }

  // 0x08: u32
  get MaxL1ReferencesForB(): number {
    return this.view.getUint32(8, true);
  }

  // 0x0c: u32
  get MaxLongTermReferences(): number {
    return this.view.getUint32(12, true);
  }

  // 0x10: u32
  get MaxDPBCapacity(): number {
    return this.view.getUint32(16, true);
  }

  // 0x14: pad4

  // 0x00: u32
  set MaxL0ReferencesForP(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: u32
  set MaxL0ReferencesForB(value: number) {
    this.view.setUint32(4, value, true);
  }

  // 0x08: u32
  set MaxL1ReferencesForB(value: number) {
    this.view.setUint32(8, value, true);
  }

  // 0x0c: u32
  set MaxLongTermReferences(value: number) {
    this.view.setUint32(12, value, true);
  }

  // 0x10: u32
  set MaxDPBCapacity(value: number) {
    this.view.setUint32(16, value, true);
  }

  // 0x14: pad4
}

/**
 * Windows.Win32.Media.MediaFoundation.D3D12_VIDEO_ENCODER_CODEC_PICTURE_CONTROL_SUPPORT (size: 16)
 */
export interface D3D12_VIDEO_ENCODER_CODEC_PICTURE_CONTROL_SUPPORT {
  /** u32 */
  DataSize: number;
  /** _Anonymous_e__Union */
  Anonymous: Uint8Array | Deno.PointerValue;
}

export const sizeofD3D12_VIDEO_ENCODER_CODEC_PICTURE_CONTROL_SUPPORT = 16;

export function allocD3D12_VIDEO_ENCODER_CODEC_PICTURE_CONTROL_SUPPORT(data?: Partial<D3D12_VIDEO_ENCODER_CODEC_PICTURE_CONTROL_SUPPORT>): Uint8Array {
  const buf = new Uint8Array(sizeofD3D12_VIDEO_ENCODER_CODEC_PICTURE_CONTROL_SUPPORT);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.DataSize !== undefined) view.setUint32(0, Number(data.DataSize), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.Anonymous !== undefined) view.setBigUint64(8, data.Anonymous === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.Anonymous))), true);
  return buf;
}

export class D3D12_VIDEO_ENCODER_CODEC_PICTURE_CONTROL_SUPPORTView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get DataSize(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  get Anonymous(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: u32
  set DataSize(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  set Anonymous(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.Media.MediaFoundation.D3D12_FEATURE_DATA_VIDEO_ENCODER_CODEC_PICTURE_CONTROL_SUPPORT (size: 32)
 */
export interface D3D12_FEATURE_DATA_VIDEO_ENCODER_CODEC_PICTURE_CONTROL_SUPPORT {
  /** u32 */
  NodeIndex: number;
  /** Windows.Win32.Media.MediaFoundation.D3D12_VIDEO_ENCODER_CODEC */
  Codec: D3D12_VIDEO_ENCODER_CODEC;
  /** Windows.Win32.Media.MediaFoundation.D3D12_VIDEO_ENCODER_PROFILE_DESC */
  Profile: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.Foundation.BOOL */
  IsSupported: boolean;
  /** Windows.Win32.Media.MediaFoundation.D3D12_VIDEO_ENCODER_CODEC_PICTURE_CONTROL_SUPPORT */
  PictureSupport: Uint8Array | Deno.PointerValue;
}

export const sizeofD3D12_FEATURE_DATA_VIDEO_ENCODER_CODEC_PICTURE_CONTROL_SUPPORT = 32;

export function allocD3D12_FEATURE_DATA_VIDEO_ENCODER_CODEC_PICTURE_CONTROL_SUPPORT(data?: Partial<D3D12_FEATURE_DATA_VIDEO_ENCODER_CODEC_PICTURE_CONTROL_SUPPORT>): Uint8Array {
  const buf = new Uint8Array(sizeofD3D12_FEATURE_DATA_VIDEO_ENCODER_CODEC_PICTURE_CONTROL_SUPPORT);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.NodeIndex !== undefined) view.setUint32(0, Number(data.NodeIndex), true);
  // 0x04: i32
  if (data?.Codec !== undefined) view.setInt32(4, Number(data.Codec), true);
  // 0x08: pointer
  if (data?.Profile !== undefined) view.setBigUint64(8, data.Profile === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.Profile))), true);
  // 0x10: i32
  if (data?.IsSupported !== undefined) view.setInt32(16, Number(data.IsSupported), true);
  // 0x14: pad4
  // 0x18: pointer
  if (data?.PictureSupport !== undefined) view.setBigUint64(24, data.PictureSupport === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.PictureSupport))), true);
  return buf;
}

export class D3D12_FEATURE_DATA_VIDEO_ENCODER_CODEC_PICTURE_CONTROL_SUPPORTView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get NodeIndex(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: i32
  get Codec(): number {
    return this.view.getInt32(4, true);
  }

  // 0x08: pointer
  get Profile(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x10: i32
  get IsSupported(): number {
    return this.view.getInt32(16, true);
  }

  // 0x14: pad4

  // 0x18: pointer
  get PictureSupport(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(24, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: u32
  set NodeIndex(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: i32
  set Codec(value: number) {
    this.view.setInt32(4, value, true);
  }

  // 0x08: pointer
  set Profile(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x10: i32
  set IsSupported(value: number) {
    this.view.setInt32(16, value, true);
  }

  // 0x14: pad4

  // 0x18: pointer
  set PictureSupport(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(24, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.Media.MediaFoundation.D3D12_VIDEO_ENCODER_CODEC_CONFIGURATION_H264 (size: 16)
 */
export interface D3D12_VIDEO_ENCODER_CODEC_CONFIGURATION_H264 {
  /** Windows.Win32.Media.MediaFoundation.D3D12_VIDEO_ENCODER_CODEC_CONFIGURATION_H264_FLAGS */
  ConfigurationFlags: D3D12_VIDEO_ENCODER_CODEC_CONFIGURATION_H264_FLAGS;
  /** Windows.Win32.Media.MediaFoundation.D3D12_VIDEO_ENCODER_CODEC_CONFIGURATION_H264_DIRECT_MODES */
  DirectModeConfig: D3D12_VIDEO_ENCODER_CODEC_CONFIGURATION_H264_DIRECT_MODES;
  /** Windows.Win32.Media.MediaFoundation.D3D12_VIDEO_ENCODER_CODEC_CONFIGURATION_H264_SLICES_DEBLOCKING_MODES */
  DisableDeblockingFilterConfig: D3D12_VIDEO_ENCODER_CODEC_CONFIGURATION_H264_SLICES_DEBLOCKING_MODES;
}

export const sizeofD3D12_VIDEO_ENCODER_CODEC_CONFIGURATION_H264 = 16;

export function allocD3D12_VIDEO_ENCODER_CODEC_CONFIGURATION_H264(data?: Partial<D3D12_VIDEO_ENCODER_CODEC_CONFIGURATION_H264>): Uint8Array {
  const buf = new Uint8Array(sizeofD3D12_VIDEO_ENCODER_CODEC_CONFIGURATION_H264);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.ConfigurationFlags !== undefined) view.setUint32(0, Number(data.ConfigurationFlags), true);
  // 0x04: i32
  if (data?.DirectModeConfig !== undefined) view.setInt32(4, Number(data.DirectModeConfig), true);
  // 0x08: i32
  if (data?.DisableDeblockingFilterConfig !== undefined) view.setInt32(8, Number(data.DisableDeblockingFilterConfig), true);
  // 0x0c: pad4
  return buf;
}

export class D3D12_VIDEO_ENCODER_CODEC_CONFIGURATION_H264View {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get ConfigurationFlags(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: i32
  get DirectModeConfig(): number {
    return this.view.getInt32(4, true);
  }

  // 0x08: i32
  get DisableDeblockingFilterConfig(): number {
    return this.view.getInt32(8, true);
  }

  // 0x0c: pad4

  // 0x00: u32
  set ConfigurationFlags(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: i32
  set DirectModeConfig(value: number) {
    this.view.setInt32(4, value, true);
  }

  // 0x08: i32
  set DisableDeblockingFilterConfig(value: number) {
    this.view.setInt32(8, value, true);
  }

  // 0x0c: pad4
}

/**
 * Windows.Win32.Media.MediaFoundation.D3D12_VIDEO_ENCODER_CODEC_CONFIGURATION_HEVC (size: 24)
 */
export interface D3D12_VIDEO_ENCODER_CODEC_CONFIGURATION_HEVC {
  /** Windows.Win32.Media.MediaFoundation.D3D12_VIDEO_ENCODER_CODEC_CONFIGURATION_HEVC_FLAGS */
  ConfigurationFlags: D3D12_VIDEO_ENCODER_CODEC_CONFIGURATION_HEVC_FLAGS;
  /** Windows.Win32.Media.MediaFoundation.D3D12_VIDEO_ENCODER_CODEC_CONFIGURATION_HEVC_CUSIZE */
  MinLumaCodingUnitSize: D3D12_VIDEO_ENCODER_CODEC_CONFIGURATION_HEVC_CUSIZE;
  /** Windows.Win32.Media.MediaFoundation.D3D12_VIDEO_ENCODER_CODEC_CONFIGURATION_HEVC_CUSIZE */
  MaxLumaCodingUnitSize: D3D12_VIDEO_ENCODER_CODEC_CONFIGURATION_HEVC_CUSIZE;
  /** Windows.Win32.Media.MediaFoundation.D3D12_VIDEO_ENCODER_CODEC_CONFIGURATION_HEVC_TUSIZE */
  MinLumaTransformUnitSize: D3D12_VIDEO_ENCODER_CODEC_CONFIGURATION_HEVC_TUSIZE;
  /** Windows.Win32.Media.MediaFoundation.D3D12_VIDEO_ENCODER_CODEC_CONFIGURATION_HEVC_TUSIZE */
  MaxLumaTransformUnitSize: D3D12_VIDEO_ENCODER_CODEC_CONFIGURATION_HEVC_TUSIZE;
  /** u8 */
  max_transform_hierarchy_depth_inter: number;
  /** u8 */
  max_transform_hierarchy_depth_intra: number;
}

export const sizeofD3D12_VIDEO_ENCODER_CODEC_CONFIGURATION_HEVC = 24;

export function allocD3D12_VIDEO_ENCODER_CODEC_CONFIGURATION_HEVC(data?: Partial<D3D12_VIDEO_ENCODER_CODEC_CONFIGURATION_HEVC>): Uint8Array {
  const buf = new Uint8Array(sizeofD3D12_VIDEO_ENCODER_CODEC_CONFIGURATION_HEVC);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.ConfigurationFlags !== undefined) view.setUint32(0, Number(data.ConfigurationFlags), true);
  // 0x04: i32
  if (data?.MinLumaCodingUnitSize !== undefined) view.setInt32(4, Number(data.MinLumaCodingUnitSize), true);
  // 0x08: i32
  if (data?.MaxLumaCodingUnitSize !== undefined) view.setInt32(8, Number(data.MaxLumaCodingUnitSize), true);
  // 0x0c: i32
  if (data?.MinLumaTransformUnitSize !== undefined) view.setInt32(12, Number(data.MinLumaTransformUnitSize), true);
  // 0x10: i32
  if (data?.MaxLumaTransformUnitSize !== undefined) view.setInt32(16, Number(data.MaxLumaTransformUnitSize), true);
  // 0x14: u8
  if (data?.max_transform_hierarchy_depth_inter !== undefined) view.setUint8(20, Number(data.max_transform_hierarchy_depth_inter));
  // 0x15: u8
  if (data?.max_transform_hierarchy_depth_intra !== undefined) view.setUint8(21, Number(data.max_transform_hierarchy_depth_intra));
  // 0x16: pad2
  return buf;
}

export class D3D12_VIDEO_ENCODER_CODEC_CONFIGURATION_HEVCView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get ConfigurationFlags(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: i32
  get MinLumaCodingUnitSize(): number {
    return this.view.getInt32(4, true);
  }

  // 0x08: i32
  get MaxLumaCodingUnitSize(): number {
    return this.view.getInt32(8, true);
  }

  // 0x0c: i32
  get MinLumaTransformUnitSize(): number {
    return this.view.getInt32(12, true);
  }

  // 0x10: i32
  get MaxLumaTransformUnitSize(): number {
    return this.view.getInt32(16, true);
  }

  // 0x14: u8
  get max_transform_hierarchy_depth_inter(): number {
    return this.view.getUint8(20);
  }

  // 0x15: u8
  get max_transform_hierarchy_depth_intra(): number {
    return this.view.getUint8(21);
  }

  // 0x16: pad2

  // 0x00: u32
  set ConfigurationFlags(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: i32
  set MinLumaCodingUnitSize(value: number) {
    this.view.setInt32(4, value, true);
  }

  // 0x08: i32
  set MaxLumaCodingUnitSize(value: number) {
    this.view.setInt32(8, value, true);
  }

  // 0x0c: i32
  set MinLumaTransformUnitSize(value: number) {
    this.view.setInt32(12, value, true);
  }

  // 0x10: i32
  set MaxLumaTransformUnitSize(value: number) {
    this.view.setInt32(16, value, true);
  }

  // 0x14: u8
  set max_transform_hierarchy_depth_inter(value: number) {
    this.view.setUint8(20, value);
  }

  // 0x15: u8
  set max_transform_hierarchy_depth_intra(value: number) {
    this.view.setUint8(21, value);
  }

  // 0x16: pad2
}

/**
 * Windows.Win32.Media.MediaFoundation.D3D12_VIDEO_ENCODER_CODEC_CONFIGURATION (size: 16)
 */
export interface D3D12_VIDEO_ENCODER_CODEC_CONFIGURATION {
  /** u32 */
  DataSize: number;
  /** _Anonymous_e__Union */
  Anonymous: Uint8Array | Deno.PointerValue;
}

export const sizeofD3D12_VIDEO_ENCODER_CODEC_CONFIGURATION = 16;

export function allocD3D12_VIDEO_ENCODER_CODEC_CONFIGURATION(data?: Partial<D3D12_VIDEO_ENCODER_CODEC_CONFIGURATION>): Uint8Array {
  const buf = new Uint8Array(sizeofD3D12_VIDEO_ENCODER_CODEC_CONFIGURATION);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.DataSize !== undefined) view.setUint32(0, Number(data.DataSize), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.Anonymous !== undefined) view.setBigUint64(8, data.Anonymous === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.Anonymous))), true);
  return buf;
}

export class D3D12_VIDEO_ENCODER_CODEC_CONFIGURATIONView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get DataSize(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  get Anonymous(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: u32
  set DataSize(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  set Anonymous(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.Media.MediaFoundation.D3D12_VIDEO_ENCODER_INTRA_REFRESH (size: 8)
 */
export interface D3D12_VIDEO_ENCODER_INTRA_REFRESH {
  /** Windows.Win32.Media.MediaFoundation.D3D12_VIDEO_ENCODER_INTRA_REFRESH_MODE */
  Mode: D3D12_VIDEO_ENCODER_INTRA_REFRESH_MODE;
  /** u32 */
  IntraRefreshDuration: number;
}

export const sizeofD3D12_VIDEO_ENCODER_INTRA_REFRESH = 8;

export function allocD3D12_VIDEO_ENCODER_INTRA_REFRESH(data?: Partial<D3D12_VIDEO_ENCODER_INTRA_REFRESH>): Uint8Array {
  const buf = new Uint8Array(sizeofD3D12_VIDEO_ENCODER_INTRA_REFRESH);
  const view = new DataView(buf.buffer);
  // 0x00: i32
  if (data?.Mode !== undefined) view.setInt32(0, Number(data.Mode), true);
  // 0x04: u32
  if (data?.IntraRefreshDuration !== undefined) view.setUint32(4, Number(data.IntraRefreshDuration), true);
  return buf;
}

export class D3D12_VIDEO_ENCODER_INTRA_REFRESHView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: i32
  get Mode(): number {
    return this.view.getInt32(0, true);
  }

  // 0x04: u32
  get IntraRefreshDuration(): number {
    return this.view.getUint32(4, true);
  }

  // 0x00: i32
  set Mode(value: number) {
    this.view.setInt32(0, value, true);
  }

  // 0x04: u32
  set IntraRefreshDuration(value: number) {
    this.view.setUint32(4, value, true);
  }
}

/**
 * Windows.Win32.Media.MediaFoundation.D3D12_FEATURE_DATA_VIDEO_ENCODER_RESOLUTION_SUPPORT_LIMITS (size: 16)
 */
export interface D3D12_FEATURE_DATA_VIDEO_ENCODER_RESOLUTION_SUPPORT_LIMITS {
  /** u32 */
  MaxSubregionsNumber: number;
  /** u32 */
  MaxIntraRefreshFrameDuration: number;
  /** u32 */
  SubregionBlockPixelsSize: number;
  /** u32 */
  QPMapRegionPixelsSize: number;
}

export const sizeofD3D12_FEATURE_DATA_VIDEO_ENCODER_RESOLUTION_SUPPORT_LIMITS = 16;

export function allocD3D12_FEATURE_DATA_VIDEO_ENCODER_RESOLUTION_SUPPORT_LIMITS(data?: Partial<D3D12_FEATURE_DATA_VIDEO_ENCODER_RESOLUTION_SUPPORT_LIMITS>): Uint8Array {
  const buf = new Uint8Array(sizeofD3D12_FEATURE_DATA_VIDEO_ENCODER_RESOLUTION_SUPPORT_LIMITS);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.MaxSubregionsNumber !== undefined) view.setUint32(0, Number(data.MaxSubregionsNumber), true);
  // 0x04: u32
  if (data?.MaxIntraRefreshFrameDuration !== undefined) view.setUint32(4, Number(data.MaxIntraRefreshFrameDuration), true);
  // 0x08: u32
  if (data?.SubregionBlockPixelsSize !== undefined) view.setUint32(8, Number(data.SubregionBlockPixelsSize), true);
  // 0x0c: u32
  if (data?.QPMapRegionPixelsSize !== undefined) view.setUint32(12, Number(data.QPMapRegionPixelsSize), true);
  return buf;
}

export class D3D12_FEATURE_DATA_VIDEO_ENCODER_RESOLUTION_SUPPORT_LIMITSView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get MaxSubregionsNumber(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: u32
  get MaxIntraRefreshFrameDuration(): number {
    return this.view.getUint32(4, true);
  }

  // 0x08: u32
  get SubregionBlockPixelsSize(): number {
    return this.view.getUint32(8, true);
  }

  // 0x0c: u32
  get QPMapRegionPixelsSize(): number {
    return this.view.getUint32(12, true);
  }

  // 0x00: u32
  set MaxSubregionsNumber(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: u32
  set MaxIntraRefreshFrameDuration(value: number) {
    this.view.setUint32(4, value, true);
  }

  // 0x08: u32
  set SubregionBlockPixelsSize(value: number) {
    this.view.setUint32(8, value, true);
  }

  // 0x0c: u32
  set QPMapRegionPixelsSize(value: number) {
    this.view.setUint32(12, value, true);
  }
}

/**
 * Windows.Win32.Media.MediaFoundation.D3D12_VIDEO_ENCODER_SEQUENCE_GOP_STRUCTURE_H264 (size: 16)
 */
export interface D3D12_VIDEO_ENCODER_SEQUENCE_GOP_STRUCTURE_H264 {
  /** u32 */
  GOPLength: number;
  /** u32 */
  PPicturePeriod: number;
  /** u8 */
  pic_order_cnt_type: number;
  /** u8 */
  log2_max_frame_num_minus4: number;
  /** u8 */
  log2_max_pic_order_cnt_lsb_minus4: number;
}

export const sizeofD3D12_VIDEO_ENCODER_SEQUENCE_GOP_STRUCTURE_H264 = 16;

export function allocD3D12_VIDEO_ENCODER_SEQUENCE_GOP_STRUCTURE_H264(data?: Partial<D3D12_VIDEO_ENCODER_SEQUENCE_GOP_STRUCTURE_H264>): Uint8Array {
  const buf = new Uint8Array(sizeofD3D12_VIDEO_ENCODER_SEQUENCE_GOP_STRUCTURE_H264);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.GOPLength !== undefined) view.setUint32(0, Number(data.GOPLength), true);
  // 0x04: u32
  if (data?.PPicturePeriod !== undefined) view.setUint32(4, Number(data.PPicturePeriod), true);
  // 0x08: u8
  if (data?.pic_order_cnt_type !== undefined) view.setUint8(8, Number(data.pic_order_cnt_type));
  // 0x09: u8
  if (data?.log2_max_frame_num_minus4 !== undefined) view.setUint8(9, Number(data.log2_max_frame_num_minus4));
  // 0x0a: u8
  if (data?.log2_max_pic_order_cnt_lsb_minus4 !== undefined) view.setUint8(10, Number(data.log2_max_pic_order_cnt_lsb_minus4));
  // 0x0b: pad5
  return buf;
}

export class D3D12_VIDEO_ENCODER_SEQUENCE_GOP_STRUCTURE_H264View {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get GOPLength(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: u32
  get PPicturePeriod(): number {
    return this.view.getUint32(4, true);
  }

  // 0x08: u8
  get pic_order_cnt_type(): number {
    return this.view.getUint8(8);
  }

  // 0x09: u8
  get log2_max_frame_num_minus4(): number {
    return this.view.getUint8(9);
  }

  // 0x0a: u8
  get log2_max_pic_order_cnt_lsb_minus4(): number {
    return this.view.getUint8(10);
  }

  // 0x0b: pad5

  // 0x00: u32
  set GOPLength(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: u32
  set PPicturePeriod(value: number) {
    this.view.setUint32(4, value, true);
  }

  // 0x08: u8
  set pic_order_cnt_type(value: number) {
    this.view.setUint8(8, value);
  }

  // 0x09: u8
  set log2_max_frame_num_minus4(value: number) {
    this.view.setUint8(9, value);
  }

  // 0x0a: u8
  set log2_max_pic_order_cnt_lsb_minus4(value: number) {
    this.view.setUint8(10, value);
  }

  // 0x0b: pad5
}

/**
 * Windows.Win32.Media.MediaFoundation.D3D12_VIDEO_ENCODER_SEQUENCE_GOP_STRUCTURE_HEVC (size: 16)
 */
export interface D3D12_VIDEO_ENCODER_SEQUENCE_GOP_STRUCTURE_HEVC {
  /** u32 */
  GOPLength: number;
  /** u32 */
  PPicturePeriod: number;
  /** u8 */
  log2_max_pic_order_cnt_lsb_minus4: number;
}

export const sizeofD3D12_VIDEO_ENCODER_SEQUENCE_GOP_STRUCTURE_HEVC = 16;

export function allocD3D12_VIDEO_ENCODER_SEQUENCE_GOP_STRUCTURE_HEVC(data?: Partial<D3D12_VIDEO_ENCODER_SEQUENCE_GOP_STRUCTURE_HEVC>): Uint8Array {
  const buf = new Uint8Array(sizeofD3D12_VIDEO_ENCODER_SEQUENCE_GOP_STRUCTURE_HEVC);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.GOPLength !== undefined) view.setUint32(0, Number(data.GOPLength), true);
  // 0x04: u32
  if (data?.PPicturePeriod !== undefined) view.setUint32(4, Number(data.PPicturePeriod), true);
  // 0x08: u8
  if (data?.log2_max_pic_order_cnt_lsb_minus4 !== undefined) view.setUint8(8, Number(data.log2_max_pic_order_cnt_lsb_minus4));
  // 0x09: pad7
  return buf;
}

export class D3D12_VIDEO_ENCODER_SEQUENCE_GOP_STRUCTURE_HEVCView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get GOPLength(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: u32
  get PPicturePeriod(): number {
    return this.view.getUint32(4, true);
  }

  // 0x08: u8
  get log2_max_pic_order_cnt_lsb_minus4(): number {
    return this.view.getUint8(8);
  }

  // 0x09: pad7

  // 0x00: u32
  set GOPLength(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: u32
  set PPicturePeriod(value: number) {
    this.view.setUint32(4, value, true);
  }

  // 0x08: u8
  set log2_max_pic_order_cnt_lsb_minus4(value: number) {
    this.view.setUint8(8, value);
  }

  // 0x09: pad7
}

/**
 * Windows.Win32.Media.MediaFoundation.D3D12_VIDEO_ENCODER_SEQUENCE_GOP_STRUCTURE (size: 16)
 */
export interface D3D12_VIDEO_ENCODER_SEQUENCE_GOP_STRUCTURE {
  /** u32 */
  DataSize: number;
  /** _Anonymous_e__Union */
  Anonymous: Uint8Array | Deno.PointerValue;
}

export const sizeofD3D12_VIDEO_ENCODER_SEQUENCE_GOP_STRUCTURE = 16;

export function allocD3D12_VIDEO_ENCODER_SEQUENCE_GOP_STRUCTURE(data?: Partial<D3D12_VIDEO_ENCODER_SEQUENCE_GOP_STRUCTURE>): Uint8Array {
  const buf = new Uint8Array(sizeofD3D12_VIDEO_ENCODER_SEQUENCE_GOP_STRUCTURE);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.DataSize !== undefined) view.setUint32(0, Number(data.DataSize), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.Anonymous !== undefined) view.setBigUint64(8, data.Anonymous === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.Anonymous))), true);
  return buf;
}

export class D3D12_VIDEO_ENCODER_SEQUENCE_GOP_STRUCTUREView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get DataSize(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  get Anonymous(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: u32
  set DataSize(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  set Anonymous(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.Media.MediaFoundation.D3D12_FEATURE_DATA_VIDEO_ENCODER_SUPPORT (size: 104)
 */
export interface D3D12_FEATURE_DATA_VIDEO_ENCODER_SUPPORT {
  /** u32 */
  NodeIndex: number;
  /** Windows.Win32.Media.MediaFoundation.D3D12_VIDEO_ENCODER_CODEC */
  Codec: D3D12_VIDEO_ENCODER_CODEC;
  /** Windows.Win32.Graphics.Dxgi.Common.DXGI_FORMAT */
  InputFormat: DXGI_FORMAT;
  /** Windows.Win32.Media.MediaFoundation.D3D12_VIDEO_ENCODER_CODEC_CONFIGURATION */
  CodecConfiguration: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.Media.MediaFoundation.D3D12_VIDEO_ENCODER_SEQUENCE_GOP_STRUCTURE */
  CodecGopSequence: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.Media.MediaFoundation.D3D12_VIDEO_ENCODER_RATE_CONTROL */
  RateControl: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.Media.MediaFoundation.D3D12_VIDEO_ENCODER_INTRA_REFRESH_MODE */
  IntraRefresh: D3D12_VIDEO_ENCODER_INTRA_REFRESH_MODE;
  /** Windows.Win32.Media.MediaFoundation.D3D12_VIDEO_ENCODER_FRAME_SUBREGION_LAYOUT_MODE */
  SubregionFrameEncoding: D3D12_VIDEO_ENCODER_FRAME_SUBREGION_LAYOUT_MODE;
  /** u32 */
  ResolutionsListCount: number;
  /** ptr */
  pResolutionList: Deno.PointerValue | Uint8Array;
  /** u32 */
  MaxReferenceFramesInDPB: number;
  /** Windows.Win32.Media.MediaFoundation.D3D12_VIDEO_ENCODER_VALIDATION_FLAGS */
  ValidationFlags: D3D12_VIDEO_ENCODER_VALIDATION_FLAGS;
  /** Windows.Win32.Media.MediaFoundation.D3D12_VIDEO_ENCODER_SUPPORT_FLAGS */
  SupportFlags: D3D12_VIDEO_ENCODER_SUPPORT_FLAGS;
  /** Windows.Win32.Media.MediaFoundation.D3D12_VIDEO_ENCODER_PROFILE_DESC */
  SuggestedProfile: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.Media.MediaFoundation.D3D12_VIDEO_ENCODER_LEVEL_SETTING */
  SuggestedLevel: Uint8Array | Deno.PointerValue;
  /** ptr */
  pResolutionDependentSupport: Deno.PointerValue | Uint8Array;
}

export const sizeofD3D12_FEATURE_DATA_VIDEO_ENCODER_SUPPORT = 104;

export function allocD3D12_FEATURE_DATA_VIDEO_ENCODER_SUPPORT(data?: Partial<D3D12_FEATURE_DATA_VIDEO_ENCODER_SUPPORT>): Uint8Array {
  const buf = new Uint8Array(sizeofD3D12_FEATURE_DATA_VIDEO_ENCODER_SUPPORT);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.NodeIndex !== undefined) view.setUint32(0, Number(data.NodeIndex), true);
  // 0x04: i32
  if (data?.Codec !== undefined) view.setInt32(4, Number(data.Codec), true);
  // 0x08: u32
  if (data?.InputFormat !== undefined) view.setUint32(8, Number(data.InputFormat), true);
  // 0x0c: pad4
  // 0x10: pointer
  if (data?.CodecConfiguration !== undefined) view.setBigUint64(16, data.CodecConfiguration === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.CodecConfiguration))), true);
  // 0x18: pointer
  if (data?.CodecGopSequence !== undefined) view.setBigUint64(24, data.CodecGopSequence === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.CodecGopSequence))), true);
  // 0x20: pointer
  if (data?.RateControl !== undefined) view.setBigUint64(32, data.RateControl === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.RateControl))), true);
  // 0x28: i32
  if (data?.IntraRefresh !== undefined) view.setInt32(40, Number(data.IntraRefresh), true);
  // 0x2c: i32
  if (data?.SubregionFrameEncoding !== undefined) view.setInt32(44, Number(data.SubregionFrameEncoding), true);
  // 0x30: u32
  if (data?.ResolutionsListCount !== undefined) view.setUint32(48, Number(data.ResolutionsListCount), true);
  // 0x34: pad4
  // 0x38: pointer
  if (data?.pResolutionList !== undefined) view.setBigUint64(56, data.pResolutionList === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.pResolutionList))), true);
  // 0x40: u32
  if (data?.MaxReferenceFramesInDPB !== undefined) view.setUint32(64, Number(data.MaxReferenceFramesInDPB), true);
  // 0x44: u32
  if (data?.ValidationFlags !== undefined) view.setUint32(68, Number(data.ValidationFlags), true);
  // 0x48: u32
  if (data?.SupportFlags !== undefined) view.setUint32(72, Number(data.SupportFlags), true);
  // 0x4c: pad4
  // 0x50: pointer
  if (data?.SuggestedProfile !== undefined) view.setBigUint64(80, data.SuggestedProfile === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.SuggestedProfile))), true);
  // 0x58: pointer
  if (data?.SuggestedLevel !== undefined) view.setBigUint64(88, data.SuggestedLevel === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.SuggestedLevel))), true);
  // 0x60: pointer
  if (data?.pResolutionDependentSupport !== undefined) view.setBigUint64(96, data.pResolutionDependentSupport === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.pResolutionDependentSupport))), true);
  return buf;
}

export class D3D12_FEATURE_DATA_VIDEO_ENCODER_SUPPORTView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get NodeIndex(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: i32
  get Codec(): number {
    return this.view.getInt32(4, true);
  }

  // 0x08: u32
  get InputFormat(): number {
    return this.view.getUint32(8, true);
  }

  // 0x0c: pad4

  // 0x10: pointer
  get CodecConfiguration(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(16, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x18: pointer
  get CodecGopSequence(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(24, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x20: pointer
  get RateControl(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(32, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x28: i32
  get IntraRefresh(): number {
    return this.view.getInt32(40, true);
  }

  // 0x2c: i32
  get SubregionFrameEncoding(): number {
    return this.view.getInt32(44, true);
  }

  // 0x30: u32
  get ResolutionsListCount(): number {
    return this.view.getUint32(48, true);
  }

  // 0x34: pad4

  // 0x38: pointer
  get pResolutionList(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(56, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x40: u32
  get MaxReferenceFramesInDPB(): number {
    return this.view.getUint32(64, true);
  }

  // 0x44: u32
  get ValidationFlags(): number {
    return this.view.getUint32(68, true);
  }

  // 0x48: u32
  get SupportFlags(): number {
    return this.view.getUint32(72, true);
  }

  // 0x4c: pad4

  // 0x50: pointer
  get SuggestedProfile(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(80, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x58: pointer
  get SuggestedLevel(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(88, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x60: pointer
  get pResolutionDependentSupport(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(96, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: u32
  set NodeIndex(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: i32
  set Codec(value: number) {
    this.view.setInt32(4, value, true);
  }

  // 0x08: u32
  set InputFormat(value: number) {
    this.view.setUint32(8, value, true);
  }

  // 0x0c: pad4

  // 0x10: pointer
  set CodecConfiguration(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(16, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x18: pointer
  set CodecGopSequence(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(24, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x20: pointer
  set RateControl(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(32, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x28: i32
  set IntraRefresh(value: number) {
    this.view.setInt32(40, value, true);
  }

  // 0x2c: i32
  set SubregionFrameEncoding(value: number) {
    this.view.setInt32(44, value, true);
  }

  // 0x30: u32
  set ResolutionsListCount(value: number) {
    this.view.setUint32(48, value, true);
  }

  // 0x34: pad4

  // 0x38: pointer
  set pResolutionList(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(56, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x40: u32
  set MaxReferenceFramesInDPB(value: number) {
    this.view.setUint32(64, value, true);
  }

  // 0x44: u32
  set ValidationFlags(value: number) {
    this.view.setUint32(68, value, true);
  }

  // 0x48: u32
  set SupportFlags(value: number) {
    this.view.setUint32(72, value, true);
  }

  // 0x4c: pad4

  // 0x50: pointer
  set SuggestedProfile(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(80, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x58: pointer
  set SuggestedLevel(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(88, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x60: pointer
  set pResolutionDependentSupport(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(96, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.Media.MediaFoundation.D3D12_FEATURE_DATA_VIDEO_ENCODER_RESOURCE_REQUIREMENTS (size: 48)
 */
export interface D3D12_FEATURE_DATA_VIDEO_ENCODER_RESOURCE_REQUIREMENTS {
  /** u32 */
  NodeIndex: number;
  /** Windows.Win32.Media.MediaFoundation.D3D12_VIDEO_ENCODER_CODEC */
  Codec: D3D12_VIDEO_ENCODER_CODEC;
  /** Windows.Win32.Media.MediaFoundation.D3D12_VIDEO_ENCODER_PROFILE_DESC */
  Profile: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.Graphics.Dxgi.Common.DXGI_FORMAT */
  InputFormat: DXGI_FORMAT;
  /** Windows.Win32.Media.MediaFoundation.D3D12_VIDEO_ENCODER_PICTURE_RESOLUTION_DESC */
  PictureTargetResolution: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.Foundation.BOOL */
  IsSupported: boolean;
  /** u32 */
  CompressedBitstreamBufferAccessAlignment: number;
  /** u32 */
  EncoderMetadataBufferAccessAlignment: number;
  /** u32 */
  MaxEncoderOutputMetadataBufferSize: number;
}

export const sizeofD3D12_FEATURE_DATA_VIDEO_ENCODER_RESOURCE_REQUIREMENTS = 48;

export function allocD3D12_FEATURE_DATA_VIDEO_ENCODER_RESOURCE_REQUIREMENTS(data?: Partial<D3D12_FEATURE_DATA_VIDEO_ENCODER_RESOURCE_REQUIREMENTS>): Uint8Array {
  const buf = new Uint8Array(sizeofD3D12_FEATURE_DATA_VIDEO_ENCODER_RESOURCE_REQUIREMENTS);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.NodeIndex !== undefined) view.setUint32(0, Number(data.NodeIndex), true);
  // 0x04: i32
  if (data?.Codec !== undefined) view.setInt32(4, Number(data.Codec), true);
  // 0x08: pointer
  if (data?.Profile !== undefined) view.setBigUint64(8, data.Profile === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.Profile))), true);
  // 0x10: u32
  if (data?.InputFormat !== undefined) view.setUint32(16, Number(data.InputFormat), true);
  // 0x14: pad4
  // 0x18: pointer
  if (data?.PictureTargetResolution !== undefined) view.setBigUint64(24, data.PictureTargetResolution === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.PictureTargetResolution))), true);
  // 0x20: i32
  if (data?.IsSupported !== undefined) view.setInt32(32, Number(data.IsSupported), true);
  // 0x24: u32
  if (data?.CompressedBitstreamBufferAccessAlignment !== undefined) view.setUint32(36, Number(data.CompressedBitstreamBufferAccessAlignment), true);
  // 0x28: u32
  if (data?.EncoderMetadataBufferAccessAlignment !== undefined) view.setUint32(40, Number(data.EncoderMetadataBufferAccessAlignment), true);
  // 0x2c: u32
  if (data?.MaxEncoderOutputMetadataBufferSize !== undefined) view.setUint32(44, Number(data.MaxEncoderOutputMetadataBufferSize), true);
  return buf;
}

export class D3D12_FEATURE_DATA_VIDEO_ENCODER_RESOURCE_REQUIREMENTSView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get NodeIndex(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: i32
  get Codec(): number {
    return this.view.getInt32(4, true);
  }

  // 0x08: pointer
  get Profile(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x10: u32
  get InputFormat(): number {
    return this.view.getUint32(16, true);
  }

  // 0x14: pad4

  // 0x18: pointer
  get PictureTargetResolution(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(24, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x20: i32
  get IsSupported(): number {
    return this.view.getInt32(32, true);
  }

  // 0x24: u32
  get CompressedBitstreamBufferAccessAlignment(): number {
    return this.view.getUint32(36, true);
  }

  // 0x28: u32
  get EncoderMetadataBufferAccessAlignment(): number {
    return this.view.getUint32(40, true);
  }

  // 0x2c: u32
  get MaxEncoderOutputMetadataBufferSize(): number {
    return this.view.getUint32(44, true);
  }

  // 0x00: u32
  set NodeIndex(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: i32
  set Codec(value: number) {
    this.view.setInt32(4, value, true);
  }

  // 0x08: pointer
  set Profile(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x10: u32
  set InputFormat(value: number) {
    this.view.setUint32(16, value, true);
  }

  // 0x14: pad4

  // 0x18: pointer
  set PictureTargetResolution(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(24, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x20: i32
  set IsSupported(value: number) {
    this.view.setInt32(32, value, true);
  }

  // 0x24: u32
  set CompressedBitstreamBufferAccessAlignment(value: number) {
    this.view.setUint32(36, value, true);
  }

  // 0x28: u32
  set EncoderMetadataBufferAccessAlignment(value: number) {
    this.view.setUint32(40, value, true);
  }

  // 0x2c: u32
  set MaxEncoderOutputMetadataBufferSize(value: number) {
    this.view.setUint32(44, value, true);
  }
}

/**
 * Windows.Win32.Media.MediaFoundation.D3D12_VIDEO_ENCODER_DESC (size: 48)
 */
export interface D3D12_VIDEO_ENCODER_DESC {
  /** u32 */
  NodeMask: number;
  /** Windows.Win32.Media.MediaFoundation.D3D12_VIDEO_ENCODER_FLAGS */
  Flags: D3D12_VIDEO_ENCODER_FLAGS;
  /** Windows.Win32.Media.MediaFoundation.D3D12_VIDEO_ENCODER_CODEC */
  EncodeCodec: D3D12_VIDEO_ENCODER_CODEC;
  /** Windows.Win32.Media.MediaFoundation.D3D12_VIDEO_ENCODER_PROFILE_DESC */
  EncodeProfile: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.Graphics.Dxgi.Common.DXGI_FORMAT */
  InputFormat: DXGI_FORMAT;
  /** Windows.Win32.Media.MediaFoundation.D3D12_VIDEO_ENCODER_CODEC_CONFIGURATION */
  CodecConfiguration: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.Media.MediaFoundation.D3D12_VIDEO_ENCODER_MOTION_ESTIMATION_PRECISION_MODE */
  MaxMotionEstimationPrecision: D3D12_VIDEO_ENCODER_MOTION_ESTIMATION_PRECISION_MODE;
}

export const sizeofD3D12_VIDEO_ENCODER_DESC = 48;

export function allocD3D12_VIDEO_ENCODER_DESC(data?: Partial<D3D12_VIDEO_ENCODER_DESC>): Uint8Array {
  const buf = new Uint8Array(sizeofD3D12_VIDEO_ENCODER_DESC);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.NodeMask !== undefined) view.setUint32(0, Number(data.NodeMask), true);
  // 0x04: u32
  if (data?.Flags !== undefined) view.setUint32(4, Number(data.Flags), true);
  // 0x08: i32
  if (data?.EncodeCodec !== undefined) view.setInt32(8, Number(data.EncodeCodec), true);
  // 0x0c: pad4
  // 0x10: pointer
  if (data?.EncodeProfile !== undefined) view.setBigUint64(16, data.EncodeProfile === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.EncodeProfile))), true);
  // 0x18: u32
  if (data?.InputFormat !== undefined) view.setUint32(24, Number(data.InputFormat), true);
  // 0x1c: pad4
  // 0x20: pointer
  if (data?.CodecConfiguration !== undefined) view.setBigUint64(32, data.CodecConfiguration === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.CodecConfiguration))), true);
  // 0x28: i32
  if (data?.MaxMotionEstimationPrecision !== undefined) view.setInt32(40, Number(data.MaxMotionEstimationPrecision), true);
  // 0x2c: pad4
  return buf;
}

export class D3D12_VIDEO_ENCODER_DESCView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get NodeMask(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: u32
  get Flags(): number {
    return this.view.getUint32(4, true);
  }

  // 0x08: i32
  get EncodeCodec(): number {
    return this.view.getInt32(8, true);
  }

  // 0x0c: pad4

  // 0x10: pointer
  get EncodeProfile(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(16, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x18: u32
  get InputFormat(): number {
    return this.view.getUint32(24, true);
  }

  // 0x1c: pad4

  // 0x20: pointer
  get CodecConfiguration(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(32, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x28: i32
  get MaxMotionEstimationPrecision(): number {
    return this.view.getInt32(40, true);
  }

  // 0x2c: pad4

  // 0x00: u32
  set NodeMask(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: u32
  set Flags(value: number) {
    this.view.setUint32(4, value, true);
  }

  // 0x08: i32
  set EncodeCodec(value: number) {
    this.view.setInt32(8, value, true);
  }

  // 0x0c: pad4

  // 0x10: pointer
  set EncodeProfile(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(16, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x18: u32
  set InputFormat(value: number) {
    this.view.setUint32(24, value, true);
  }

  // 0x1c: pad4

  // 0x20: pointer
  set CodecConfiguration(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(32, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x28: i32
  set MaxMotionEstimationPrecision(value: number) {
    this.view.setInt32(40, value, true);
  }

  // 0x2c: pad4
}

/**
 * Windows.Win32.Media.MediaFoundation.D3D12_VIDEO_ENCODER_REFERENCE_PICTURE_DESCRIPTOR_H264 (size: 24)
 */
export interface D3D12_VIDEO_ENCODER_REFERENCE_PICTURE_DESCRIPTOR_H264 {
  /** u32 */
  ReconstructedPictureResourceIndex: number;
  /** Windows.Win32.Foundation.BOOL */
  IsLongTermReference: boolean;
  /** u32 */
  LongTermPictureIdx: number;
  /** u32 */
  PictureOrderCountNumber: number;
  /** u32 */
  FrameDecodingOrderNumber: number;
  /** u32 */
  TemporalLayerIndex: number;
}

export const sizeofD3D12_VIDEO_ENCODER_REFERENCE_PICTURE_DESCRIPTOR_H264 = 24;

export function allocD3D12_VIDEO_ENCODER_REFERENCE_PICTURE_DESCRIPTOR_H264(data?: Partial<D3D12_VIDEO_ENCODER_REFERENCE_PICTURE_DESCRIPTOR_H264>): Uint8Array {
  const buf = new Uint8Array(sizeofD3D12_VIDEO_ENCODER_REFERENCE_PICTURE_DESCRIPTOR_H264);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.ReconstructedPictureResourceIndex !== undefined) view.setUint32(0, Number(data.ReconstructedPictureResourceIndex), true);
  // 0x04: i32
  if (data?.IsLongTermReference !== undefined) view.setInt32(4, Number(data.IsLongTermReference), true);
  // 0x08: u32
  if (data?.LongTermPictureIdx !== undefined) view.setUint32(8, Number(data.LongTermPictureIdx), true);
  // 0x0c: u32
  if (data?.PictureOrderCountNumber !== undefined) view.setUint32(12, Number(data.PictureOrderCountNumber), true);
  // 0x10: u32
  if (data?.FrameDecodingOrderNumber !== undefined) view.setUint32(16, Number(data.FrameDecodingOrderNumber), true);
  // 0x14: u32
  if (data?.TemporalLayerIndex !== undefined) view.setUint32(20, Number(data.TemporalLayerIndex), true);
  return buf;
}

export class D3D12_VIDEO_ENCODER_REFERENCE_PICTURE_DESCRIPTOR_H264View {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get ReconstructedPictureResourceIndex(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: i32
  get IsLongTermReference(): number {
    return this.view.getInt32(4, true);
  }

  // 0x08: u32
  get LongTermPictureIdx(): number {
    return this.view.getUint32(8, true);
  }

  // 0x0c: u32
  get PictureOrderCountNumber(): number {
    return this.view.getUint32(12, true);
  }

  // 0x10: u32
  get FrameDecodingOrderNumber(): number {
    return this.view.getUint32(16, true);
  }

  // 0x14: u32
  get TemporalLayerIndex(): number {
    return this.view.getUint32(20, true);
  }

  // 0x00: u32
  set ReconstructedPictureResourceIndex(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: i32
  set IsLongTermReference(value: number) {
    this.view.setInt32(4, value, true);
  }

  // 0x08: u32
  set LongTermPictureIdx(value: number) {
    this.view.setUint32(8, value, true);
  }

  // 0x0c: u32
  set PictureOrderCountNumber(value: number) {
    this.view.setUint32(12, value, true);
  }

  // 0x10: u32
  set FrameDecodingOrderNumber(value: number) {
    this.view.setUint32(16, value, true);
  }

  // 0x14: u32
  set TemporalLayerIndex(value: number) {
    this.view.setUint32(20, value, true);
  }
}

/**
 * Windows.Win32.Media.MediaFoundation.D3D12_VIDEO_ENCODER_PICTURE_CONTROL_CODEC_DATA_H264_REFERENCE_PICTURE_MARKING_OPERATION (size: 24)
 */
export interface D3D12_VIDEO_ENCODER_PICTURE_CONTROL_CODEC_DATA_H264_REFERENCE_PICTURE_MARKING_OPERATION {
  /** u8 */
  memory_management_control_operation: number;
  /** u32 */
  difference_of_pic_nums_minus1: number;
  /** u32 */
  long_term_pic_num: number;
  /** u32 */
  long_term_frame_idx: number;
  /** u32 */
  max_long_term_frame_idx_plus1: number;
}

export const sizeofD3D12_VIDEO_ENCODER_PICTURE_CONTROL_CODEC_DATA_H264_REFERENCE_PICTURE_MARKING_OPERATION = 24;

export function allocD3D12_VIDEO_ENCODER_PICTURE_CONTROL_CODEC_DATA_H264_REFERENCE_PICTURE_MARKING_OPERATION(data?: Partial<D3D12_VIDEO_ENCODER_PICTURE_CONTROL_CODEC_DATA_H264_REFERENCE_PICTURE_MARKING_OPERATION>): Uint8Array {
  const buf = new Uint8Array(sizeofD3D12_VIDEO_ENCODER_PICTURE_CONTROL_CODEC_DATA_H264_REFERENCE_PICTURE_MARKING_OPERATION);
  const view = new DataView(buf.buffer);
  // 0x00: u8
  if (data?.memory_management_control_operation !== undefined) view.setUint8(0, Number(data.memory_management_control_operation));
  // 0x01: u32
  if (data?.difference_of_pic_nums_minus1 !== undefined) view.setUint32(1, Number(data.difference_of_pic_nums_minus1), true);
  // 0x05: u32
  if (data?.long_term_pic_num !== undefined) view.setUint32(5, Number(data.long_term_pic_num), true);
  // 0x09: u32
  if (data?.long_term_frame_idx !== undefined) view.setUint32(9, Number(data.long_term_frame_idx), true);
  // 0x0d: u32
  if (data?.max_long_term_frame_idx_plus1 !== undefined) view.setUint32(13, Number(data.max_long_term_frame_idx_plus1), true);
  // 0x11: pad7
  return buf;
}

export class D3D12_VIDEO_ENCODER_PICTURE_CONTROL_CODEC_DATA_H264_REFERENCE_PICTURE_MARKING_OPERATIONView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u8
  get memory_management_control_operation(): number {
    return this.view.getUint8(0);
  }

  // 0x01: u32
  get difference_of_pic_nums_minus1(): number {
    return this.view.getUint32(1, true);
  }

  // 0x05: u32
  get long_term_pic_num(): number {
    return this.view.getUint32(5, true);
  }

  // 0x09: u32
  get long_term_frame_idx(): number {
    return this.view.getUint32(9, true);
  }

  // 0x0d: u32
  get max_long_term_frame_idx_plus1(): number {
    return this.view.getUint32(13, true);
  }

  // 0x11: pad7

  // 0x00: u8
  set memory_management_control_operation(value: number) {
    this.view.setUint8(0, value);
  }

  // 0x01: u32
  set difference_of_pic_nums_minus1(value: number) {
    this.view.setUint32(1, value, true);
  }

  // 0x05: u32
  set long_term_pic_num(value: number) {
    this.view.setUint32(5, value, true);
  }

  // 0x09: u32
  set long_term_frame_idx(value: number) {
    this.view.setUint32(9, value, true);
  }

  // 0x0d: u32
  set max_long_term_frame_idx_plus1(value: number) {
    this.view.setUint32(13, value, true);
  }

  // 0x11: pad7
}

/**
 * Windows.Win32.Media.MediaFoundation.D3D12_VIDEO_ENCODER_PICTURE_CONTROL_CODEC_DATA_H264_REFERENCE_PICTURE_LIST_MODIFICATION_OPERATION (size: 16)
 */
export interface D3D12_VIDEO_ENCODER_PICTURE_CONTROL_CODEC_DATA_H264_REFERENCE_PICTURE_LIST_MODIFICATION_OPERATION {
  /** u8 */
  modification_of_pic_nums_idc: number;
  /** u32 */
  abs_diff_pic_num_minus1: number;
  /** u32 */
  long_term_pic_num: number;
}

export const sizeofD3D12_VIDEO_ENCODER_PICTURE_CONTROL_CODEC_DATA_H264_REFERENCE_PICTURE_LIST_MODIFICATION_OPERATION = 16;

export function allocD3D12_VIDEO_ENCODER_PICTURE_CONTROL_CODEC_DATA_H264_REFERENCE_PICTURE_LIST_MODIFICATION_OPERATION(data?: Partial<D3D12_VIDEO_ENCODER_PICTURE_CONTROL_CODEC_DATA_H264_REFERENCE_PICTURE_LIST_MODIFICATION_OPERATION>): Uint8Array {
  const buf = new Uint8Array(sizeofD3D12_VIDEO_ENCODER_PICTURE_CONTROL_CODEC_DATA_H264_REFERENCE_PICTURE_LIST_MODIFICATION_OPERATION);
  const view = new DataView(buf.buffer);
  // 0x00: u8
  if (data?.modification_of_pic_nums_idc !== undefined) view.setUint8(0, Number(data.modification_of_pic_nums_idc));
  // 0x01: u32
  if (data?.abs_diff_pic_num_minus1 !== undefined) view.setUint32(1, Number(data.abs_diff_pic_num_minus1), true);
  // 0x05: u32
  if (data?.long_term_pic_num !== undefined) view.setUint32(5, Number(data.long_term_pic_num), true);
  // 0x09: pad7
  return buf;
}

export class D3D12_VIDEO_ENCODER_PICTURE_CONTROL_CODEC_DATA_H264_REFERENCE_PICTURE_LIST_MODIFICATION_OPERATIONView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u8
  get modification_of_pic_nums_idc(): number {
    return this.view.getUint8(0);
  }

  // 0x01: u32
  get abs_diff_pic_num_minus1(): number {
    return this.view.getUint32(1, true);
  }

  // 0x05: u32
  get long_term_pic_num(): number {
    return this.view.getUint32(5, true);
  }

  // 0x09: pad7

  // 0x00: u8
  set modification_of_pic_nums_idc(value: number) {
    this.view.setUint8(0, value);
  }

  // 0x01: u32
  set abs_diff_pic_num_minus1(value: number) {
    this.view.setUint32(1, value, true);
  }

  // 0x05: u32
  set long_term_pic_num(value: number) {
    this.view.setUint32(5, value, true);
  }

  // 0x09: pad7
}

/**
 * Windows.Win32.Media.MediaFoundation.D3D12_VIDEO_ENCODER_PICTURE_CONTROL_CODEC_DATA_H264 (size: 136)
 */
export interface D3D12_VIDEO_ENCODER_PICTURE_CONTROL_CODEC_DATA_H264 {
  /** Windows.Win32.Media.MediaFoundation.D3D12_VIDEO_ENCODER_PICTURE_CONTROL_CODEC_DATA_H264_FLAGS */
  Flags: D3D12_VIDEO_ENCODER_PICTURE_CONTROL_CODEC_DATA_H264_FLAGS;
  /** Windows.Win32.Media.MediaFoundation.D3D12_VIDEO_ENCODER_FRAME_TYPE_H264 */
  FrameType: D3D12_VIDEO_ENCODER_FRAME_TYPE_H264;
  /** u32 */
  pic_parameter_set_id: number;
  /** u32 */
  idr_pic_id: number;
  /** u32 */
  PictureOrderCountNumber: number;
  /** u32 */
  FrameDecodingOrderNumber: number;
  /** u32 */
  TemporalLayerIndex: number;
  /** u32 */
  List0ReferenceFramesCount: number;
  /** ptr */
  pList0ReferenceFrames: Deno.PointerValue | Uint8Array;
  /** u32 */
  List1ReferenceFramesCount: number;
  /** ptr */
  pList1ReferenceFrames: Deno.PointerValue | Uint8Array;
  /** u32 */
  ReferenceFramesReconPictureDescriptorsCount: number;
  /** ptr */
  pReferenceFramesReconPictureDescriptors: Deno.PointerValue | Uint8Array;
  /** u8 */
  adaptive_ref_pic_marking_mode_flag: number;
  /** u32 */
  RefPicMarkingOperationsCommandsCount: number;
  /** ptr */
  pRefPicMarkingOperationsCommands: Deno.PointerValue | Uint8Array;
  /** u32 */
  List0RefPicModificationsCount: number;
  /** ptr */
  pList0RefPicModifications: Deno.PointerValue | Uint8Array;
  /** u32 */
  List1RefPicModificationsCount: number;
  /** ptr */
  pList1RefPicModifications: Deno.PointerValue | Uint8Array;
  /** u32 */
  QPMapValuesCount: number;
  /** ptr */
  pRateControlQPMap: Deno.PointerValue | Uint8Array;
}

export const sizeofD3D12_VIDEO_ENCODER_PICTURE_CONTROL_CODEC_DATA_H264 = 136;

export function allocD3D12_VIDEO_ENCODER_PICTURE_CONTROL_CODEC_DATA_H264(data?: Partial<D3D12_VIDEO_ENCODER_PICTURE_CONTROL_CODEC_DATA_H264>): Uint8Array {
  const buf = new Uint8Array(sizeofD3D12_VIDEO_ENCODER_PICTURE_CONTROL_CODEC_DATA_H264);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.Flags !== undefined) view.setUint32(0, Number(data.Flags), true);
  // 0x04: i32
  if (data?.FrameType !== undefined) view.setInt32(4, Number(data.FrameType), true);
  // 0x08: u32
  if (data?.pic_parameter_set_id !== undefined) view.setUint32(8, Number(data.pic_parameter_set_id), true);
  // 0x0c: u32
  if (data?.idr_pic_id !== undefined) view.setUint32(12, Number(data.idr_pic_id), true);
  // 0x10: u32
  if (data?.PictureOrderCountNumber !== undefined) view.setUint32(16, Number(data.PictureOrderCountNumber), true);
  // 0x14: u32
  if (data?.FrameDecodingOrderNumber !== undefined) view.setUint32(20, Number(data.FrameDecodingOrderNumber), true);
  // 0x18: u32
  if (data?.TemporalLayerIndex !== undefined) view.setUint32(24, Number(data.TemporalLayerIndex), true);
  // 0x1c: u32
  if (data?.List0ReferenceFramesCount !== undefined) view.setUint32(28, Number(data.List0ReferenceFramesCount), true);
  // 0x20: pointer
  if (data?.pList0ReferenceFrames !== undefined) view.setBigUint64(32, data.pList0ReferenceFrames === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.pList0ReferenceFrames))), true);
  // 0x28: u32
  if (data?.List1ReferenceFramesCount !== undefined) view.setUint32(40, Number(data.List1ReferenceFramesCount), true);
  // 0x2c: pad4
  // 0x30: pointer
  if (data?.pList1ReferenceFrames !== undefined) view.setBigUint64(48, data.pList1ReferenceFrames === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.pList1ReferenceFrames))), true);
  // 0x38: u32
  if (data?.ReferenceFramesReconPictureDescriptorsCount !== undefined) view.setUint32(56, Number(data.ReferenceFramesReconPictureDescriptorsCount), true);
  // 0x3c: pad4
  // 0x40: pointer
  if (data?.pReferenceFramesReconPictureDescriptors !== undefined) view.setBigUint64(64, data.pReferenceFramesReconPictureDescriptors === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.pReferenceFramesReconPictureDescriptors))), true);
  // 0x48: u8
  if (data?.adaptive_ref_pic_marking_mode_flag !== undefined) view.setUint8(72, Number(data.adaptive_ref_pic_marking_mode_flag));
  // 0x49: u32
  if (data?.RefPicMarkingOperationsCommandsCount !== undefined) view.setUint32(73, Number(data.RefPicMarkingOperationsCommandsCount), true);
  // 0x4d: pad3
  // 0x50: pointer
  if (data?.pRefPicMarkingOperationsCommands !== undefined) view.setBigUint64(80, data.pRefPicMarkingOperationsCommands === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.pRefPicMarkingOperationsCommands))), true);
  // 0x58: u32
  if (data?.List0RefPicModificationsCount !== undefined) view.setUint32(88, Number(data.List0RefPicModificationsCount), true);
  // 0x5c: pad4
  // 0x60: pointer
  if (data?.pList0RefPicModifications !== undefined) view.setBigUint64(96, data.pList0RefPicModifications === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.pList0RefPicModifications))), true);
  // 0x68: u32
  if (data?.List1RefPicModificationsCount !== undefined) view.setUint32(104, Number(data.List1RefPicModificationsCount), true);
  // 0x6c: pad4
  // 0x70: pointer
  if (data?.pList1RefPicModifications !== undefined) view.setBigUint64(112, data.pList1RefPicModifications === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.pList1RefPicModifications))), true);
  // 0x78: u32
  if (data?.QPMapValuesCount !== undefined) view.setUint32(120, Number(data.QPMapValuesCount), true);
  // 0x7c: pad4
  // 0x80: pointer
  if (data?.pRateControlQPMap !== undefined) view.setBigUint64(128, data.pRateControlQPMap === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.pRateControlQPMap))), true);
  return buf;
}

export class D3D12_VIDEO_ENCODER_PICTURE_CONTROL_CODEC_DATA_H264View {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get Flags(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: i32
  get FrameType(): number {
    return this.view.getInt32(4, true);
  }

  // 0x08: u32
  get pic_parameter_set_id(): number {
    return this.view.getUint32(8, true);
  }

  // 0x0c: u32
  get idr_pic_id(): number {
    return this.view.getUint32(12, true);
  }

  // 0x10: u32
  get PictureOrderCountNumber(): number {
    return this.view.getUint32(16, true);
  }

  // 0x14: u32
  get FrameDecodingOrderNumber(): number {
    return this.view.getUint32(20, true);
  }

  // 0x18: u32
  get TemporalLayerIndex(): number {
    return this.view.getUint32(24, true);
  }

  // 0x1c: u32
  get List0ReferenceFramesCount(): number {
    return this.view.getUint32(28, true);
  }

  // 0x20: pointer
  get pList0ReferenceFrames(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(32, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x28: u32
  get List1ReferenceFramesCount(): number {
    return this.view.getUint32(40, true);
  }

  // 0x2c: pad4

  // 0x30: pointer
  get pList1ReferenceFrames(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(48, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x38: u32
  get ReferenceFramesReconPictureDescriptorsCount(): number {
    return this.view.getUint32(56, true);
  }

  // 0x3c: pad4

  // 0x40: pointer
  get pReferenceFramesReconPictureDescriptors(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(64, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x48: u8
  get adaptive_ref_pic_marking_mode_flag(): number {
    return this.view.getUint8(72);
  }

  // 0x49: u32
  get RefPicMarkingOperationsCommandsCount(): number {
    return this.view.getUint32(73, true);
  }

  // 0x4d: pad3

  // 0x50: pointer
  get pRefPicMarkingOperationsCommands(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(80, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x58: u32
  get List0RefPicModificationsCount(): number {
    return this.view.getUint32(88, true);
  }

  // 0x5c: pad4

  // 0x60: pointer
  get pList0RefPicModifications(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(96, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x68: u32
  get List1RefPicModificationsCount(): number {
    return this.view.getUint32(104, true);
  }

  // 0x6c: pad4

  // 0x70: pointer
  get pList1RefPicModifications(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(112, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x78: u32
  get QPMapValuesCount(): number {
    return this.view.getUint32(120, true);
  }

  // 0x7c: pad4

  // 0x80: pointer
  get pRateControlQPMap(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(128, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: u32
  set Flags(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: i32
  set FrameType(value: number) {
    this.view.setInt32(4, value, true);
  }

  // 0x08: u32
  set pic_parameter_set_id(value: number) {
    this.view.setUint32(8, value, true);
  }

  // 0x0c: u32
  set idr_pic_id(value: number) {
    this.view.setUint32(12, value, true);
  }

  // 0x10: u32
  set PictureOrderCountNumber(value: number) {
    this.view.setUint32(16, value, true);
  }

  // 0x14: u32
  set FrameDecodingOrderNumber(value: number) {
    this.view.setUint32(20, value, true);
  }

  // 0x18: u32
  set TemporalLayerIndex(value: number) {
    this.view.setUint32(24, value, true);
  }

  // 0x1c: u32
  set List0ReferenceFramesCount(value: number) {
    this.view.setUint32(28, value, true);
  }

  // 0x20: pointer
  set pList0ReferenceFrames(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(32, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x28: u32
  set List1ReferenceFramesCount(value: number) {
    this.view.setUint32(40, value, true);
  }

  // 0x2c: pad4

  // 0x30: pointer
  set pList1ReferenceFrames(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(48, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x38: u32
  set ReferenceFramesReconPictureDescriptorsCount(value: number) {
    this.view.setUint32(56, value, true);
  }

  // 0x3c: pad4

  // 0x40: pointer
  set pReferenceFramesReconPictureDescriptors(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(64, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x48: u8
  set adaptive_ref_pic_marking_mode_flag(value: number) {
    this.view.setUint8(72, value);
  }

  // 0x49: u32
  set RefPicMarkingOperationsCommandsCount(value: number) {
    this.view.setUint32(73, value, true);
  }

  // 0x4d: pad3

  // 0x50: pointer
  set pRefPicMarkingOperationsCommands(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(80, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x58: u32
  set List0RefPicModificationsCount(value: number) {
    this.view.setUint32(88, value, true);
  }

  // 0x5c: pad4

  // 0x60: pointer
  set pList0RefPicModifications(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(96, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x68: u32
  set List1RefPicModificationsCount(value: number) {
    this.view.setUint32(104, value, true);
  }

  // 0x6c: pad4

  // 0x70: pointer
  set pList1RefPicModifications(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(112, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x78: u32
  set QPMapValuesCount(value: number) {
    this.view.setUint32(120, value, true);
  }

  // 0x7c: pad4

  // 0x80: pointer
  set pRateControlQPMap(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(128, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.Media.MediaFoundation.D3D12_VIDEO_ENCODER_REFERENCE_PICTURE_DESCRIPTOR_HEVC (size: 24)
 */
export interface D3D12_VIDEO_ENCODER_REFERENCE_PICTURE_DESCRIPTOR_HEVC {
  /** u32 */
  ReconstructedPictureResourceIndex: number;
  /** Windows.Win32.Foundation.BOOL */
  IsRefUsedByCurrentPic: boolean;
  /** Windows.Win32.Foundation.BOOL */
  IsLongTermReference: boolean;
  /** u32 */
  PictureOrderCountNumber: number;
  /** u32 */
  TemporalLayerIndex: number;
}

export const sizeofD3D12_VIDEO_ENCODER_REFERENCE_PICTURE_DESCRIPTOR_HEVC = 24;

export function allocD3D12_VIDEO_ENCODER_REFERENCE_PICTURE_DESCRIPTOR_HEVC(data?: Partial<D3D12_VIDEO_ENCODER_REFERENCE_PICTURE_DESCRIPTOR_HEVC>): Uint8Array {
  const buf = new Uint8Array(sizeofD3D12_VIDEO_ENCODER_REFERENCE_PICTURE_DESCRIPTOR_HEVC);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.ReconstructedPictureResourceIndex !== undefined) view.setUint32(0, Number(data.ReconstructedPictureResourceIndex), true);
  // 0x04: i32
  if (data?.IsRefUsedByCurrentPic !== undefined) view.setInt32(4, Number(data.IsRefUsedByCurrentPic), true);
  // 0x08: i32
  if (data?.IsLongTermReference !== undefined) view.setInt32(8, Number(data.IsLongTermReference), true);
  // 0x0c: u32
  if (data?.PictureOrderCountNumber !== undefined) view.setUint32(12, Number(data.PictureOrderCountNumber), true);
  // 0x10: u32
  if (data?.TemporalLayerIndex !== undefined) view.setUint32(16, Number(data.TemporalLayerIndex), true);
  // 0x14: pad4
  return buf;
}

export class D3D12_VIDEO_ENCODER_REFERENCE_PICTURE_DESCRIPTOR_HEVCView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get ReconstructedPictureResourceIndex(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: i32
  get IsRefUsedByCurrentPic(): number {
    return this.view.getInt32(4, true);
  }

  // 0x08: i32
  get IsLongTermReference(): number {
    return this.view.getInt32(8, true);
  }

  // 0x0c: u32
  get PictureOrderCountNumber(): number {
    return this.view.getUint32(12, true);
  }

  // 0x10: u32
  get TemporalLayerIndex(): number {
    return this.view.getUint32(16, true);
  }

  // 0x14: pad4

  // 0x00: u32
  set ReconstructedPictureResourceIndex(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: i32
  set IsRefUsedByCurrentPic(value: number) {
    this.view.setInt32(4, value, true);
  }

  // 0x08: i32
  set IsLongTermReference(value: number) {
    this.view.setInt32(8, value, true);
  }

  // 0x0c: u32
  set PictureOrderCountNumber(value: number) {
    this.view.setUint32(12, value, true);
  }

  // 0x10: u32
  set TemporalLayerIndex(value: number) {
    this.view.setUint32(16, value, true);
  }

  // 0x14: pad4
}

/**
 * Windows.Win32.Media.MediaFoundation.D3D12_VIDEO_ENCODER_PICTURE_CONTROL_CODEC_DATA_HEVC (size: 112)
 */
export interface D3D12_VIDEO_ENCODER_PICTURE_CONTROL_CODEC_DATA_HEVC {
  /** Windows.Win32.Media.MediaFoundation.D3D12_VIDEO_ENCODER_PICTURE_CONTROL_CODEC_DATA_HEVC_FLAGS */
  Flags: D3D12_VIDEO_ENCODER_PICTURE_CONTROL_CODEC_DATA_HEVC_FLAGS;
  /** Windows.Win32.Media.MediaFoundation.D3D12_VIDEO_ENCODER_FRAME_TYPE_HEVC */
  FrameType: D3D12_VIDEO_ENCODER_FRAME_TYPE_HEVC;
  /** u32 */
  slice_pic_parameter_set_id: number;
  /** u32 */
  PictureOrderCountNumber: number;
  /** u32 */
  TemporalLayerIndex: number;
  /** u32 */
  List0ReferenceFramesCount: number;
  /** ptr */
  pList0ReferenceFrames: Deno.PointerValue | Uint8Array;
  /** u32 */
  List1ReferenceFramesCount: number;
  /** ptr */
  pList1ReferenceFrames: Deno.PointerValue | Uint8Array;
  /** u32 */
  ReferenceFramesReconPictureDescriptorsCount: number;
  /** ptr */
  pReferenceFramesReconPictureDescriptors: Deno.PointerValue | Uint8Array;
  /** u32 */
  List0RefPicModificationsCount: number;
  /** ptr */
  pList0RefPicModifications: Deno.PointerValue | Uint8Array;
  /** u32 */
  List1RefPicModificationsCount: number;
  /** ptr */
  pList1RefPicModifications: Deno.PointerValue | Uint8Array;
  /** u32 */
  QPMapValuesCount: number;
  /** ptr */
  pRateControlQPMap: Deno.PointerValue | Uint8Array;
}

export const sizeofD3D12_VIDEO_ENCODER_PICTURE_CONTROL_CODEC_DATA_HEVC = 112;

export function allocD3D12_VIDEO_ENCODER_PICTURE_CONTROL_CODEC_DATA_HEVC(data?: Partial<D3D12_VIDEO_ENCODER_PICTURE_CONTROL_CODEC_DATA_HEVC>): Uint8Array {
  const buf = new Uint8Array(sizeofD3D12_VIDEO_ENCODER_PICTURE_CONTROL_CODEC_DATA_HEVC);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.Flags !== undefined) view.setUint32(0, Number(data.Flags), true);
  // 0x04: i32
  if (data?.FrameType !== undefined) view.setInt32(4, Number(data.FrameType), true);
  // 0x08: u32
  if (data?.slice_pic_parameter_set_id !== undefined) view.setUint32(8, Number(data.slice_pic_parameter_set_id), true);
  // 0x0c: u32
  if (data?.PictureOrderCountNumber !== undefined) view.setUint32(12, Number(data.PictureOrderCountNumber), true);
  // 0x10: u32
  if (data?.TemporalLayerIndex !== undefined) view.setUint32(16, Number(data.TemporalLayerIndex), true);
  // 0x14: u32
  if (data?.List0ReferenceFramesCount !== undefined) view.setUint32(20, Number(data.List0ReferenceFramesCount), true);
  // 0x18: pointer
  if (data?.pList0ReferenceFrames !== undefined) view.setBigUint64(24, data.pList0ReferenceFrames === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.pList0ReferenceFrames))), true);
  // 0x20: u32
  if (data?.List1ReferenceFramesCount !== undefined) view.setUint32(32, Number(data.List1ReferenceFramesCount), true);
  // 0x24: pad4
  // 0x28: pointer
  if (data?.pList1ReferenceFrames !== undefined) view.setBigUint64(40, data.pList1ReferenceFrames === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.pList1ReferenceFrames))), true);
  // 0x30: u32
  if (data?.ReferenceFramesReconPictureDescriptorsCount !== undefined) view.setUint32(48, Number(data.ReferenceFramesReconPictureDescriptorsCount), true);
  // 0x34: pad4
  // 0x38: pointer
  if (data?.pReferenceFramesReconPictureDescriptors !== undefined) view.setBigUint64(56, data.pReferenceFramesReconPictureDescriptors === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.pReferenceFramesReconPictureDescriptors))), true);
  // 0x40: u32
  if (data?.List0RefPicModificationsCount !== undefined) view.setUint32(64, Number(data.List0RefPicModificationsCount), true);
  // 0x44: pad4
  // 0x48: pointer
  if (data?.pList0RefPicModifications !== undefined) view.setBigUint64(72, data.pList0RefPicModifications === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.pList0RefPicModifications))), true);
  // 0x50: u32
  if (data?.List1RefPicModificationsCount !== undefined) view.setUint32(80, Number(data.List1RefPicModificationsCount), true);
  // 0x54: pad4
  // 0x58: pointer
  if (data?.pList1RefPicModifications !== undefined) view.setBigUint64(88, data.pList1RefPicModifications === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.pList1RefPicModifications))), true);
  // 0x60: u32
  if (data?.QPMapValuesCount !== undefined) view.setUint32(96, Number(data.QPMapValuesCount), true);
  // 0x64: pad4
  // 0x68: pointer
  if (data?.pRateControlQPMap !== undefined) view.setBigUint64(104, data.pRateControlQPMap === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.pRateControlQPMap))), true);
  return buf;
}

export class D3D12_VIDEO_ENCODER_PICTURE_CONTROL_CODEC_DATA_HEVCView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get Flags(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: i32
  get FrameType(): number {
    return this.view.getInt32(4, true);
  }

  // 0x08: u32
  get slice_pic_parameter_set_id(): number {
    return this.view.getUint32(8, true);
  }

  // 0x0c: u32
  get PictureOrderCountNumber(): number {
    return this.view.getUint32(12, true);
  }

  // 0x10: u32
  get TemporalLayerIndex(): number {
    return this.view.getUint32(16, true);
  }

  // 0x14: u32
  get List0ReferenceFramesCount(): number {
    return this.view.getUint32(20, true);
  }

  // 0x18: pointer
  get pList0ReferenceFrames(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(24, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x20: u32
  get List1ReferenceFramesCount(): number {
    return this.view.getUint32(32, true);
  }

  // 0x24: pad4

  // 0x28: pointer
  get pList1ReferenceFrames(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(40, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x30: u32
  get ReferenceFramesReconPictureDescriptorsCount(): number {
    return this.view.getUint32(48, true);
  }

  // 0x34: pad4

  // 0x38: pointer
  get pReferenceFramesReconPictureDescriptors(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(56, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x40: u32
  get List0RefPicModificationsCount(): number {
    return this.view.getUint32(64, true);
  }

  // 0x44: pad4

  // 0x48: pointer
  get pList0RefPicModifications(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(72, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x50: u32
  get List1RefPicModificationsCount(): number {
    return this.view.getUint32(80, true);
  }

  // 0x54: pad4

  // 0x58: pointer
  get pList1RefPicModifications(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(88, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x60: u32
  get QPMapValuesCount(): number {
    return this.view.getUint32(96, true);
  }

  // 0x64: pad4

  // 0x68: pointer
  get pRateControlQPMap(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(104, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: u32
  set Flags(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: i32
  set FrameType(value: number) {
    this.view.setInt32(4, value, true);
  }

  // 0x08: u32
  set slice_pic_parameter_set_id(value: number) {
    this.view.setUint32(8, value, true);
  }

  // 0x0c: u32
  set PictureOrderCountNumber(value: number) {
    this.view.setUint32(12, value, true);
  }

  // 0x10: u32
  set TemporalLayerIndex(value: number) {
    this.view.setUint32(16, value, true);
  }

  // 0x14: u32
  set List0ReferenceFramesCount(value: number) {
    this.view.setUint32(20, value, true);
  }

  // 0x18: pointer
  set pList0ReferenceFrames(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(24, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x20: u32
  set List1ReferenceFramesCount(value: number) {
    this.view.setUint32(32, value, true);
  }

  // 0x24: pad4

  // 0x28: pointer
  set pList1ReferenceFrames(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(40, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x30: u32
  set ReferenceFramesReconPictureDescriptorsCount(value: number) {
    this.view.setUint32(48, value, true);
  }

  // 0x34: pad4

  // 0x38: pointer
  set pReferenceFramesReconPictureDescriptors(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(56, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x40: u32
  set List0RefPicModificationsCount(value: number) {
    this.view.setUint32(64, value, true);
  }

  // 0x44: pad4

  // 0x48: pointer
  set pList0RefPicModifications(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(72, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x50: u32
  set List1RefPicModificationsCount(value: number) {
    this.view.setUint32(80, value, true);
  }

  // 0x54: pad4

  // 0x58: pointer
  set pList1RefPicModifications(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(88, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x60: u32
  set QPMapValuesCount(value: number) {
    this.view.setUint32(96, value, true);
  }

  // 0x64: pad4

  // 0x68: pointer
  set pRateControlQPMap(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(104, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.Media.MediaFoundation.D3D12_VIDEO_ENCODER_PICTURE_CONTROL_CODEC_DATA (size: 16)
 */
export interface D3D12_VIDEO_ENCODER_PICTURE_CONTROL_CODEC_DATA {
  /** u32 */
  DataSize: number;
  /** _Anonymous_e__Union */
  Anonymous: Uint8Array | Deno.PointerValue;
}

export const sizeofD3D12_VIDEO_ENCODER_PICTURE_CONTROL_CODEC_DATA = 16;

export function allocD3D12_VIDEO_ENCODER_PICTURE_CONTROL_CODEC_DATA(data?: Partial<D3D12_VIDEO_ENCODER_PICTURE_CONTROL_CODEC_DATA>): Uint8Array {
  const buf = new Uint8Array(sizeofD3D12_VIDEO_ENCODER_PICTURE_CONTROL_CODEC_DATA);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.DataSize !== undefined) view.setUint32(0, Number(data.DataSize), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.Anonymous !== undefined) view.setBigUint64(8, data.Anonymous === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.Anonymous))), true);
  return buf;
}

export class D3D12_VIDEO_ENCODER_PICTURE_CONTROL_CODEC_DATAView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get DataSize(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  get Anonymous(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: u32
  set DataSize(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  set Anonymous(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.Media.MediaFoundation.D3D12_VIDEO_ENCODE_REFERENCE_FRAMES (size: 24)
 */
export interface D3D12_VIDEO_ENCODE_REFERENCE_FRAMES {
  /** u32 */
  NumTexture2Ds: number;
  /** ptr */
  ppTexture2Ds: Deno.PointerValue | Uint8Array;
  /** ptr */
  pSubresources: Deno.PointerValue | Uint8Array;
}

export const sizeofD3D12_VIDEO_ENCODE_REFERENCE_FRAMES = 24;

export function allocD3D12_VIDEO_ENCODE_REFERENCE_FRAMES(data?: Partial<D3D12_VIDEO_ENCODE_REFERENCE_FRAMES>): Uint8Array {
  const buf = new Uint8Array(sizeofD3D12_VIDEO_ENCODE_REFERENCE_FRAMES);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.NumTexture2Ds !== undefined) view.setUint32(0, Number(data.NumTexture2Ds), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.ppTexture2Ds !== undefined) view.setBigUint64(8, data.ppTexture2Ds === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.ppTexture2Ds))), true);
  // 0x10: pointer
  if (data?.pSubresources !== undefined) view.setBigUint64(16, data.pSubresources === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.pSubresources))), true);
  return buf;
}

export class D3D12_VIDEO_ENCODE_REFERENCE_FRAMESView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get NumTexture2Ds(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  get ppTexture2Ds(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x10: pointer
  get pSubresources(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(16, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: u32
  set NumTexture2Ds(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  set ppTexture2Ds(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x10: pointer
  set pSubresources(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(16, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.Media.MediaFoundation.D3D12_VIDEO_ENCODER_PICTURE_CONTROL_DESC (size: 24)
 */
export interface D3D12_VIDEO_ENCODER_PICTURE_CONTROL_DESC {
  /** u32 */
  IntraRefreshFrameIndex: number;
  /** Windows.Win32.Media.MediaFoundation.D3D12_VIDEO_ENCODER_PICTURE_CONTROL_FLAGS */
  Flags: D3D12_VIDEO_ENCODER_PICTURE_CONTROL_FLAGS;
  /** Windows.Win32.Media.MediaFoundation.D3D12_VIDEO_ENCODER_PICTURE_CONTROL_CODEC_DATA */
  PictureControlCodecData: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.Media.MediaFoundation.D3D12_VIDEO_ENCODE_REFERENCE_FRAMES */
  ReferenceFrames: Uint8Array | Deno.PointerValue;
}

export const sizeofD3D12_VIDEO_ENCODER_PICTURE_CONTROL_DESC = 24;

export function allocD3D12_VIDEO_ENCODER_PICTURE_CONTROL_DESC(data?: Partial<D3D12_VIDEO_ENCODER_PICTURE_CONTROL_DESC>): Uint8Array {
  const buf = new Uint8Array(sizeofD3D12_VIDEO_ENCODER_PICTURE_CONTROL_DESC);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.IntraRefreshFrameIndex !== undefined) view.setUint32(0, Number(data.IntraRefreshFrameIndex), true);
  // 0x04: u32
  if (data?.Flags !== undefined) view.setUint32(4, Number(data.Flags), true);
  // 0x08: pointer
  if (data?.PictureControlCodecData !== undefined) view.setBigUint64(8, data.PictureControlCodecData === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.PictureControlCodecData))), true);
  // 0x10: pointer
  if (data?.ReferenceFrames !== undefined) view.setBigUint64(16, data.ReferenceFrames === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.ReferenceFrames))), true);
  return buf;
}

export class D3D12_VIDEO_ENCODER_PICTURE_CONTROL_DESCView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get IntraRefreshFrameIndex(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: u32
  get Flags(): number {
    return this.view.getUint32(4, true);
  }

  // 0x08: pointer
  get PictureControlCodecData(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x10: pointer
  get ReferenceFrames(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(16, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: u32
  set IntraRefreshFrameIndex(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: u32
  set Flags(value: number) {
    this.view.setUint32(4, value, true);
  }

  // 0x08: pointer
  set PictureControlCodecData(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x10: pointer
  set ReferenceFrames(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(16, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.Media.MediaFoundation.D3D12_VIDEO_ENCODER_PICTURE_CONTROL_SUBREGIONS_LAYOUT_DATA_SLICES (size: 8)
 */
export interface D3D12_VIDEO_ENCODER_PICTURE_CONTROL_SUBREGIONS_LAYOUT_DATA_SLICES {
  /** _Anonymous_e__Union */
  Anonymous: Uint8Array | Deno.PointerValue;
}

export const sizeofD3D12_VIDEO_ENCODER_PICTURE_CONTROL_SUBREGIONS_LAYOUT_DATA_SLICES = 8;

export function allocD3D12_VIDEO_ENCODER_PICTURE_CONTROL_SUBREGIONS_LAYOUT_DATA_SLICES(data?: Partial<D3D12_VIDEO_ENCODER_PICTURE_CONTROL_SUBREGIONS_LAYOUT_DATA_SLICES>): Uint8Array {
  const buf = new Uint8Array(sizeofD3D12_VIDEO_ENCODER_PICTURE_CONTROL_SUBREGIONS_LAYOUT_DATA_SLICES);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.Anonymous !== undefined) view.setBigUint64(0, data.Anonymous === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.Anonymous))), true);
  return buf;
}

export class D3D12_VIDEO_ENCODER_PICTURE_CONTROL_SUBREGIONS_LAYOUT_DATA_SLICESView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get Anonymous(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(0, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: pointer
  set Anonymous(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(0, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.Media.MediaFoundation.D3D12_VIDEO_ENCODER_PICTURE_CONTROL_SUBREGIONS_LAYOUT_DATA (size: 16)
 */
export interface D3D12_VIDEO_ENCODER_PICTURE_CONTROL_SUBREGIONS_LAYOUT_DATA {
  /** u32 */
  DataSize: number;
  /** _Anonymous_e__Union */
  Anonymous: Uint8Array | Deno.PointerValue;
}

export const sizeofD3D12_VIDEO_ENCODER_PICTURE_CONTROL_SUBREGIONS_LAYOUT_DATA = 16;

export function allocD3D12_VIDEO_ENCODER_PICTURE_CONTROL_SUBREGIONS_LAYOUT_DATA(data?: Partial<D3D12_VIDEO_ENCODER_PICTURE_CONTROL_SUBREGIONS_LAYOUT_DATA>): Uint8Array {
  const buf = new Uint8Array(sizeofD3D12_VIDEO_ENCODER_PICTURE_CONTROL_SUBREGIONS_LAYOUT_DATA);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.DataSize !== undefined) view.setUint32(0, Number(data.DataSize), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.Anonymous !== undefined) view.setBigUint64(8, data.Anonymous === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.Anonymous))), true);
  return buf;
}

export class D3D12_VIDEO_ENCODER_PICTURE_CONTROL_SUBREGIONS_LAYOUT_DATAView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get DataSize(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  get Anonymous(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: u32
  set DataSize(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  set Anonymous(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.Media.MediaFoundation.D3D12_VIDEO_ENCODER_SEQUENCE_CONTROL_DESC (size: 56)
 */
export interface D3D12_VIDEO_ENCODER_SEQUENCE_CONTROL_DESC {
  /** Windows.Win32.Media.MediaFoundation.D3D12_VIDEO_ENCODER_SEQUENCE_CONTROL_FLAGS */
  Flags: D3D12_VIDEO_ENCODER_SEQUENCE_CONTROL_FLAGS;
  /** Windows.Win32.Media.MediaFoundation.D3D12_VIDEO_ENCODER_INTRA_REFRESH */
  IntraRefreshConfig: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.Media.MediaFoundation.D3D12_VIDEO_ENCODER_RATE_CONTROL */
  RateControl: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.Media.MediaFoundation.D3D12_VIDEO_ENCODER_PICTURE_RESOLUTION_DESC */
  PictureTargetResolution: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.Media.MediaFoundation.D3D12_VIDEO_ENCODER_FRAME_SUBREGION_LAYOUT_MODE */
  SelectedLayoutMode: D3D12_VIDEO_ENCODER_FRAME_SUBREGION_LAYOUT_MODE;
  /** Windows.Win32.Media.MediaFoundation.D3D12_VIDEO_ENCODER_PICTURE_CONTROL_SUBREGIONS_LAYOUT_DATA */
  FrameSubregionsLayoutData: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.Media.MediaFoundation.D3D12_VIDEO_ENCODER_SEQUENCE_GOP_STRUCTURE */
  CodecGopSequence: Uint8Array | Deno.PointerValue;
}

export const sizeofD3D12_VIDEO_ENCODER_SEQUENCE_CONTROL_DESC = 56;

export function allocD3D12_VIDEO_ENCODER_SEQUENCE_CONTROL_DESC(data?: Partial<D3D12_VIDEO_ENCODER_SEQUENCE_CONTROL_DESC>): Uint8Array {
  const buf = new Uint8Array(sizeofD3D12_VIDEO_ENCODER_SEQUENCE_CONTROL_DESC);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.Flags !== undefined) view.setUint32(0, Number(data.Flags), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.IntraRefreshConfig !== undefined) view.setBigUint64(8, data.IntraRefreshConfig === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.IntraRefreshConfig))), true);
  // 0x10: pointer
  if (data?.RateControl !== undefined) view.setBigUint64(16, data.RateControl === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.RateControl))), true);
  // 0x18: pointer
  if (data?.PictureTargetResolution !== undefined) view.setBigUint64(24, data.PictureTargetResolution === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.PictureTargetResolution))), true);
  // 0x20: i32
  if (data?.SelectedLayoutMode !== undefined) view.setInt32(32, Number(data.SelectedLayoutMode), true);
  // 0x24: pad4
  // 0x28: pointer
  if (data?.FrameSubregionsLayoutData !== undefined) view.setBigUint64(40, data.FrameSubregionsLayoutData === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.FrameSubregionsLayoutData))), true);
  // 0x30: pointer
  if (data?.CodecGopSequence !== undefined) view.setBigUint64(48, data.CodecGopSequence === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.CodecGopSequence))), true);
  return buf;
}

export class D3D12_VIDEO_ENCODER_SEQUENCE_CONTROL_DESCView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get Flags(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  get IntraRefreshConfig(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x10: pointer
  get RateControl(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(16, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x18: pointer
  get PictureTargetResolution(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(24, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x20: i32
  get SelectedLayoutMode(): number {
    return this.view.getInt32(32, true);
  }

  // 0x24: pad4

  // 0x28: pointer
  get FrameSubregionsLayoutData(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(40, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x30: pointer
  get CodecGopSequence(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(48, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: u32
  set Flags(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  set IntraRefreshConfig(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x10: pointer
  set RateControl(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(16, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x18: pointer
  set PictureTargetResolution(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(24, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x20: i32
  set SelectedLayoutMode(value: number) {
    this.view.setInt32(32, value, true);
  }

  // 0x24: pad4

  // 0x28: pointer
  set FrameSubregionsLayoutData(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(40, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x30: pointer
  set CodecGopSequence(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(48, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.Media.MediaFoundation.D3D12_VIDEO_ENCODER_ENCODEFRAME_INPUT_ARGUMENTS (size: 32)
 */
export interface D3D12_VIDEO_ENCODER_ENCODEFRAME_INPUT_ARGUMENTS {
  /** Windows.Win32.Media.MediaFoundation.D3D12_VIDEO_ENCODER_SEQUENCE_CONTROL_DESC */
  SequenceControlDesc: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.Media.MediaFoundation.D3D12_VIDEO_ENCODER_PICTURE_CONTROL_DESC */
  PictureControlDesc: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.Graphics.Direct3D12.ID3D12Resource */
  pInputFrame: Uint8Array | Deno.PointerValue;
  /** u32 */
  InputFrameSubresource: number;
  /** u32 */
  CurrentFrameBitstreamMetadataSize: number;
}

export const sizeofD3D12_VIDEO_ENCODER_ENCODEFRAME_INPUT_ARGUMENTS = 32;

export function allocD3D12_VIDEO_ENCODER_ENCODEFRAME_INPUT_ARGUMENTS(data?: Partial<D3D12_VIDEO_ENCODER_ENCODEFRAME_INPUT_ARGUMENTS>): Uint8Array {
  const buf = new Uint8Array(sizeofD3D12_VIDEO_ENCODER_ENCODEFRAME_INPUT_ARGUMENTS);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.SequenceControlDesc !== undefined) view.setBigUint64(0, data.SequenceControlDesc === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.SequenceControlDesc))), true);
  // 0x08: pointer
  if (data?.PictureControlDesc !== undefined) view.setBigUint64(8, data.PictureControlDesc === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.PictureControlDesc))), true);
  // 0x10: pointer
  if (data?.pInputFrame !== undefined) view.setBigUint64(16, data.pInputFrame === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.pInputFrame))), true);
  // 0x18: u32
  if (data?.InputFrameSubresource !== undefined) view.setUint32(24, Number(data.InputFrameSubresource), true);
  // 0x1c: u32
  if (data?.CurrentFrameBitstreamMetadataSize !== undefined) view.setUint32(28, Number(data.CurrentFrameBitstreamMetadataSize), true);
  return buf;
}

export class D3D12_VIDEO_ENCODER_ENCODEFRAME_INPUT_ARGUMENTSView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get SequenceControlDesc(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(0, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x08: pointer
  get PictureControlDesc(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x10: pointer
  get pInputFrame(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(16, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x18: u32
  get InputFrameSubresource(): number {
    return this.view.getUint32(24, true);
  }

  // 0x1c: u32
  get CurrentFrameBitstreamMetadataSize(): number {
    return this.view.getUint32(28, true);
  }

  // 0x00: pointer
  set SequenceControlDesc(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(0, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x08: pointer
  set PictureControlDesc(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x10: pointer
  set pInputFrame(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(16, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x18: u32
  set InputFrameSubresource(value: number) {
    this.view.setUint32(24, value, true);
  }

  // 0x1c: u32
  set CurrentFrameBitstreamMetadataSize(value: number) {
    this.view.setUint32(28, value, true);
  }
}

/**
 * Windows.Win32.Media.MediaFoundation.D3D12_VIDEO_ENCODER_COMPRESSED_BITSTREAM (size: 16)
 */
export interface D3D12_VIDEO_ENCODER_COMPRESSED_BITSTREAM {
  /** Windows.Win32.Graphics.Direct3D12.ID3D12Resource */
  pBuffer: Uint8Array | Deno.PointerValue;
  /** u64 */
  FrameStartOffset: bigint | number;
}

export const sizeofD3D12_VIDEO_ENCODER_COMPRESSED_BITSTREAM = 16;

export function allocD3D12_VIDEO_ENCODER_COMPRESSED_BITSTREAM(data?: Partial<D3D12_VIDEO_ENCODER_COMPRESSED_BITSTREAM>): Uint8Array {
  const buf = new Uint8Array(sizeofD3D12_VIDEO_ENCODER_COMPRESSED_BITSTREAM);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.pBuffer !== undefined) view.setBigUint64(0, data.pBuffer === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.pBuffer))), true);
  // 0x08: u64
  if (data?.FrameStartOffset !== undefined) view.setBigUint64(8, BigInt(data.FrameStartOffset), true);
  return buf;
}

export class D3D12_VIDEO_ENCODER_COMPRESSED_BITSTREAMView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get pBuffer(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(0, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x08: u64
  get FrameStartOffset(): bigint | number {
    return Number(this.view.getBigUint64(8, true));
  }

  // 0x00: pointer
  set pBuffer(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(0, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x08: u64
  set FrameStartOffset(value: bigint | number) {
    this.view.setBigUint64(8, BigInt(value), true);
  }
}

/**
 * Windows.Win32.Media.MediaFoundation.D3D12_VIDEO_ENCODER_RECONSTRUCTED_PICTURE (size: 16)
 */
export interface D3D12_VIDEO_ENCODER_RECONSTRUCTED_PICTURE {
  /** Windows.Win32.Graphics.Direct3D12.ID3D12Resource */
  pReconstructedPicture: Uint8Array | Deno.PointerValue;
  /** u32 */
  ReconstructedPictureSubresource: number;
}

export const sizeofD3D12_VIDEO_ENCODER_RECONSTRUCTED_PICTURE = 16;

export function allocD3D12_VIDEO_ENCODER_RECONSTRUCTED_PICTURE(data?: Partial<D3D12_VIDEO_ENCODER_RECONSTRUCTED_PICTURE>): Uint8Array {
  const buf = new Uint8Array(sizeofD3D12_VIDEO_ENCODER_RECONSTRUCTED_PICTURE);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.pReconstructedPicture !== undefined) view.setBigUint64(0, data.pReconstructedPicture === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.pReconstructedPicture))), true);
  // 0x08: u32
  if (data?.ReconstructedPictureSubresource !== undefined) view.setUint32(8, Number(data.ReconstructedPictureSubresource), true);
  // 0x0c: pad4
  return buf;
}

export class D3D12_VIDEO_ENCODER_RECONSTRUCTED_PICTUREView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get pReconstructedPicture(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(0, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x08: u32
  get ReconstructedPictureSubresource(): number {
    return this.view.getUint32(8, true);
  }

  // 0x0c: pad4

  // 0x00: pointer
  set pReconstructedPicture(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(0, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x08: u32
  set ReconstructedPictureSubresource(value: number) {
    this.view.setUint32(8, value, true);
  }

  // 0x0c: pad4
}

/**
 * Windows.Win32.Media.MediaFoundation.D3D12_VIDEO_ENCODER_FRAME_SUBREGION_METADATA (size: 24)
 */
export interface D3D12_VIDEO_ENCODER_FRAME_SUBREGION_METADATA {
  /** u64 */
  bSize: bigint | number;
  /** u64 */
  bStartOffset: bigint | number;
  /** u64 */
  bHeaderSize: bigint | number;
}

export const sizeofD3D12_VIDEO_ENCODER_FRAME_SUBREGION_METADATA = 24;

export function allocD3D12_VIDEO_ENCODER_FRAME_SUBREGION_METADATA(data?: Partial<D3D12_VIDEO_ENCODER_FRAME_SUBREGION_METADATA>): Uint8Array {
  const buf = new Uint8Array(sizeofD3D12_VIDEO_ENCODER_FRAME_SUBREGION_METADATA);
  const view = new DataView(buf.buffer);
  // 0x00: u64
  if (data?.bSize !== undefined) view.setBigUint64(0, BigInt(data.bSize), true);
  // 0x08: u64
  if (data?.bStartOffset !== undefined) view.setBigUint64(8, BigInt(data.bStartOffset), true);
  // 0x10: u64
  if (data?.bHeaderSize !== undefined) view.setBigUint64(16, BigInt(data.bHeaderSize), true);
  return buf;
}

export class D3D12_VIDEO_ENCODER_FRAME_SUBREGION_METADATAView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u64
  get bSize(): bigint | number {
    return Number(this.view.getBigUint64(0, true));
  }

  // 0x08: u64
  get bStartOffset(): bigint | number {
    return Number(this.view.getBigUint64(8, true));
  }

  // 0x10: u64
  get bHeaderSize(): bigint | number {
    return Number(this.view.getBigUint64(16, true));
  }

  // 0x00: u64
  set bSize(value: bigint | number) {
    this.view.setBigUint64(0, BigInt(value), true);
  }

  // 0x08: u64
  set bStartOffset(value: bigint | number) {
    this.view.setBigUint64(8, BigInt(value), true);
  }

  // 0x10: u64
  set bHeaderSize(value: bigint | number) {
    this.view.setBigUint64(16, BigInt(value), true);
  }
}

/**
 * Windows.Win32.Media.MediaFoundation.D3D12_VIDEO_ENCODER_OUTPUT_METADATA_STATISTICS (size: 48)
 */
export interface D3D12_VIDEO_ENCODER_OUTPUT_METADATA_STATISTICS {
  /** u64 */
  AverageQP: bigint | number;
  /** u64 */
  IntraCodingUnitsCount: bigint | number;
  /** u64 */
  InterCodingUnitsCount: bigint | number;
  /** u64 */
  SkipCodingUnitsCount: bigint | number;
  /** u64 */
  AverageMotionEstimationXDirection: bigint | number;
  /** u64 */
  AverageMotionEstimationYDirection: bigint | number;
}

export const sizeofD3D12_VIDEO_ENCODER_OUTPUT_METADATA_STATISTICS = 48;

export function allocD3D12_VIDEO_ENCODER_OUTPUT_METADATA_STATISTICS(data?: Partial<D3D12_VIDEO_ENCODER_OUTPUT_METADATA_STATISTICS>): Uint8Array {
  const buf = new Uint8Array(sizeofD3D12_VIDEO_ENCODER_OUTPUT_METADATA_STATISTICS);
  const view = new DataView(buf.buffer);
  // 0x00: u64
  if (data?.AverageQP !== undefined) view.setBigUint64(0, BigInt(data.AverageQP), true);
  // 0x08: u64
  if (data?.IntraCodingUnitsCount !== undefined) view.setBigUint64(8, BigInt(data.IntraCodingUnitsCount), true);
  // 0x10: u64
  if (data?.InterCodingUnitsCount !== undefined) view.setBigUint64(16, BigInt(data.InterCodingUnitsCount), true);
  // 0x18: u64
  if (data?.SkipCodingUnitsCount !== undefined) view.setBigUint64(24, BigInt(data.SkipCodingUnitsCount), true);
  // 0x20: u64
  if (data?.AverageMotionEstimationXDirection !== undefined) view.setBigUint64(32, BigInt(data.AverageMotionEstimationXDirection), true);
  // 0x28: u64
  if (data?.AverageMotionEstimationYDirection !== undefined) view.setBigUint64(40, BigInt(data.AverageMotionEstimationYDirection), true);
  return buf;
}

export class D3D12_VIDEO_ENCODER_OUTPUT_METADATA_STATISTICSView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u64
  get AverageQP(): bigint | number {
    return Number(this.view.getBigUint64(0, true));
  }

  // 0x08: u64
  get IntraCodingUnitsCount(): bigint | number {
    return Number(this.view.getBigUint64(8, true));
  }

  // 0x10: u64
  get InterCodingUnitsCount(): bigint | number {
    return Number(this.view.getBigUint64(16, true));
  }

  // 0x18: u64
  get SkipCodingUnitsCount(): bigint | number {
    return Number(this.view.getBigUint64(24, true));
  }

  // 0x20: u64
  get AverageMotionEstimationXDirection(): bigint | number {
    return Number(this.view.getBigUint64(32, true));
  }

  // 0x28: u64
  get AverageMotionEstimationYDirection(): bigint | number {
    return Number(this.view.getBigUint64(40, true));
  }

  // 0x00: u64
  set AverageQP(value: bigint | number) {
    this.view.setBigUint64(0, BigInt(value), true);
  }

  // 0x08: u64
  set IntraCodingUnitsCount(value: bigint | number) {
    this.view.setBigUint64(8, BigInt(value), true);
  }

  // 0x10: u64
  set InterCodingUnitsCount(value: bigint | number) {
    this.view.setBigUint64(16, BigInt(value), true);
  }

  // 0x18: u64
  set SkipCodingUnitsCount(value: bigint | number) {
    this.view.setBigUint64(24, BigInt(value), true);
  }

  // 0x20: u64
  set AverageMotionEstimationXDirection(value: bigint | number) {
    this.view.setBigUint64(32, BigInt(value), true);
  }

  // 0x28: u64
  set AverageMotionEstimationYDirection(value: bigint | number) {
    this.view.setBigUint64(40, BigInt(value), true);
  }
}

/**
 * Windows.Win32.Media.MediaFoundation.D3D12_VIDEO_ENCODER_OUTPUT_METADATA (size: 32)
 */
export interface D3D12_VIDEO_ENCODER_OUTPUT_METADATA {
  /** u64 */
  EncodeErrorFlags: bigint | number;
  /** Windows.Win32.Media.MediaFoundation.D3D12_VIDEO_ENCODER_OUTPUT_METADATA_STATISTICS */
  EncodeStats: Uint8Array | Deno.PointerValue;
  /** u64 */
  EncodedBitstreamWrittenBytesCount: bigint | number;
  /** u64 */
  WrittenSubregionsCount: bigint | number;
}

export const sizeofD3D12_VIDEO_ENCODER_OUTPUT_METADATA = 32;

export function allocD3D12_VIDEO_ENCODER_OUTPUT_METADATA(data?: Partial<D3D12_VIDEO_ENCODER_OUTPUT_METADATA>): Uint8Array {
  const buf = new Uint8Array(sizeofD3D12_VIDEO_ENCODER_OUTPUT_METADATA);
  const view = new DataView(buf.buffer);
  // 0x00: u64
  if (data?.EncodeErrorFlags !== undefined) view.setBigUint64(0, BigInt(data.EncodeErrorFlags), true);
  // 0x08: pointer
  if (data?.EncodeStats !== undefined) view.setBigUint64(8, data.EncodeStats === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.EncodeStats))), true);
  // 0x10: u64
  if (data?.EncodedBitstreamWrittenBytesCount !== undefined) view.setBigUint64(16, BigInt(data.EncodedBitstreamWrittenBytesCount), true);
  // 0x18: u64
  if (data?.WrittenSubregionsCount !== undefined) view.setBigUint64(24, BigInt(data.WrittenSubregionsCount), true);
  return buf;
}

export class D3D12_VIDEO_ENCODER_OUTPUT_METADATAView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u64
  get EncodeErrorFlags(): bigint | number {
    return Number(this.view.getBigUint64(0, true));
  }

  // 0x08: pointer
  get EncodeStats(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x10: u64
  get EncodedBitstreamWrittenBytesCount(): bigint | number {
    return Number(this.view.getBigUint64(16, true));
  }

  // 0x18: u64
  get WrittenSubregionsCount(): bigint | number {
    return Number(this.view.getBigUint64(24, true));
  }

  // 0x00: u64
  set EncodeErrorFlags(value: bigint | number) {
    this.view.setBigUint64(0, BigInt(value), true);
  }

  // 0x08: pointer
  set EncodeStats(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x10: u64
  set EncodedBitstreamWrittenBytesCount(value: bigint | number) {
    this.view.setBigUint64(16, BigInt(value), true);
  }

  // 0x18: u64
  set WrittenSubregionsCount(value: bigint | number) {
    this.view.setBigUint64(24, BigInt(value), true);
  }
}

/**
 * Windows.Win32.Media.MediaFoundation.D3D12_VIDEO_ENCODER_ENCODE_OPERATION_METADATA_BUFFER (size: 16)
 */
export interface D3D12_VIDEO_ENCODER_ENCODE_OPERATION_METADATA_BUFFER {
  /** Windows.Win32.Graphics.Direct3D12.ID3D12Resource */
  pBuffer: Uint8Array | Deno.PointerValue;
  /** u64 */
  Offset: bigint | number;
}

export const sizeofD3D12_VIDEO_ENCODER_ENCODE_OPERATION_METADATA_BUFFER = 16;

export function allocD3D12_VIDEO_ENCODER_ENCODE_OPERATION_METADATA_BUFFER(data?: Partial<D3D12_VIDEO_ENCODER_ENCODE_OPERATION_METADATA_BUFFER>): Uint8Array {
  const buf = new Uint8Array(sizeofD3D12_VIDEO_ENCODER_ENCODE_OPERATION_METADATA_BUFFER);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.pBuffer !== undefined) view.setBigUint64(0, data.pBuffer === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.pBuffer))), true);
  // 0x08: u64
  if (data?.Offset !== undefined) view.setBigUint64(8, BigInt(data.Offset), true);
  return buf;
}

export class D3D12_VIDEO_ENCODER_ENCODE_OPERATION_METADATA_BUFFERView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get pBuffer(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(0, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x08: u64
  get Offset(): bigint | number {
    return Number(this.view.getBigUint64(8, true));
  }

  // 0x00: pointer
  set pBuffer(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(0, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x08: u64
  set Offset(value: bigint | number) {
    this.view.setBigUint64(8, BigInt(value), true);
  }
}

/**
 * Windows.Win32.Media.MediaFoundation.D3D12_VIDEO_ENCODER_RESOLVE_METADATA_INPUT_ARGUMENTS (size: 40)
 */
export interface D3D12_VIDEO_ENCODER_RESOLVE_METADATA_INPUT_ARGUMENTS {
  /** Windows.Win32.Media.MediaFoundation.D3D12_VIDEO_ENCODER_CODEC */
  EncoderCodec: D3D12_VIDEO_ENCODER_CODEC;
  /** Windows.Win32.Media.MediaFoundation.D3D12_VIDEO_ENCODER_PROFILE_DESC */
  EncoderProfile: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.Graphics.Dxgi.Common.DXGI_FORMAT */
  EncoderInputFormat: DXGI_FORMAT;
  /** Windows.Win32.Media.MediaFoundation.D3D12_VIDEO_ENCODER_PICTURE_RESOLUTION_DESC */
  EncodedPictureEffectiveResolution: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.Media.MediaFoundation.D3D12_VIDEO_ENCODER_ENCODE_OPERATION_METADATA_BUFFER */
  HWLayoutMetadata: Uint8Array | Deno.PointerValue;
}

export const sizeofD3D12_VIDEO_ENCODER_RESOLVE_METADATA_INPUT_ARGUMENTS = 40;

export function allocD3D12_VIDEO_ENCODER_RESOLVE_METADATA_INPUT_ARGUMENTS(data?: Partial<D3D12_VIDEO_ENCODER_RESOLVE_METADATA_INPUT_ARGUMENTS>): Uint8Array {
  const buf = new Uint8Array(sizeofD3D12_VIDEO_ENCODER_RESOLVE_METADATA_INPUT_ARGUMENTS);
  const view = new DataView(buf.buffer);
  // 0x00: i32
  if (data?.EncoderCodec !== undefined) view.setInt32(0, Number(data.EncoderCodec), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.EncoderProfile !== undefined) view.setBigUint64(8, data.EncoderProfile === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.EncoderProfile))), true);
  // 0x10: u32
  if (data?.EncoderInputFormat !== undefined) view.setUint32(16, Number(data.EncoderInputFormat), true);
  // 0x14: pad4
  // 0x18: pointer
  if (data?.EncodedPictureEffectiveResolution !== undefined) view.setBigUint64(24, data.EncodedPictureEffectiveResolution === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.EncodedPictureEffectiveResolution))), true);
  // 0x20: pointer
  if (data?.HWLayoutMetadata !== undefined) view.setBigUint64(32, data.HWLayoutMetadata === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.HWLayoutMetadata))), true);
  return buf;
}

export class D3D12_VIDEO_ENCODER_RESOLVE_METADATA_INPUT_ARGUMENTSView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: i32
  get EncoderCodec(): number {
    return this.view.getInt32(0, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  get EncoderProfile(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x10: u32
  get EncoderInputFormat(): number {
    return this.view.getUint32(16, true);
  }

  // 0x14: pad4

  // 0x18: pointer
  get EncodedPictureEffectiveResolution(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(24, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x20: pointer
  get HWLayoutMetadata(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(32, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: i32
  set EncoderCodec(value: number) {
    this.view.setInt32(0, value, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  set EncoderProfile(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x10: u32
  set EncoderInputFormat(value: number) {
    this.view.setUint32(16, value, true);
  }

  // 0x14: pad4

  // 0x18: pointer
  set EncodedPictureEffectiveResolution(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(24, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x20: pointer
  set HWLayoutMetadata(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(32, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.Media.MediaFoundation.D3D12_VIDEO_ENCODER_RESOLVE_METADATA_OUTPUT_ARGUMENTS (size: 8)
 */
export interface D3D12_VIDEO_ENCODER_RESOLVE_METADATA_OUTPUT_ARGUMENTS {
  /** Windows.Win32.Media.MediaFoundation.D3D12_VIDEO_ENCODER_ENCODE_OPERATION_METADATA_BUFFER */
  ResolvedLayoutMetadata: Uint8Array | Deno.PointerValue;
}

export const sizeofD3D12_VIDEO_ENCODER_RESOLVE_METADATA_OUTPUT_ARGUMENTS = 8;

export function allocD3D12_VIDEO_ENCODER_RESOLVE_METADATA_OUTPUT_ARGUMENTS(data?: Partial<D3D12_VIDEO_ENCODER_RESOLVE_METADATA_OUTPUT_ARGUMENTS>): Uint8Array {
  const buf = new Uint8Array(sizeofD3D12_VIDEO_ENCODER_RESOLVE_METADATA_OUTPUT_ARGUMENTS);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.ResolvedLayoutMetadata !== undefined) view.setBigUint64(0, data.ResolvedLayoutMetadata === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.ResolvedLayoutMetadata))), true);
  return buf;
}

export class D3D12_VIDEO_ENCODER_RESOLVE_METADATA_OUTPUT_ARGUMENTSView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get ResolvedLayoutMetadata(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(0, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: pointer
  set ResolvedLayoutMetadata(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(0, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.Media.MediaFoundation.D3D12_VIDEO_ENCODER_ENCODEFRAME_OUTPUT_ARGUMENTS (size: 24)
 */
export interface D3D12_VIDEO_ENCODER_ENCODEFRAME_OUTPUT_ARGUMENTS {
  /** Windows.Win32.Media.MediaFoundation.D3D12_VIDEO_ENCODER_COMPRESSED_BITSTREAM */
  Bitstream: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.Media.MediaFoundation.D3D12_VIDEO_ENCODER_RECONSTRUCTED_PICTURE */
  ReconstructedPicture: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.Media.MediaFoundation.D3D12_VIDEO_ENCODER_ENCODE_OPERATION_METADATA_BUFFER */
  EncoderOutputMetadata: Uint8Array | Deno.PointerValue;
}

export const sizeofD3D12_VIDEO_ENCODER_ENCODEFRAME_OUTPUT_ARGUMENTS = 24;

export function allocD3D12_VIDEO_ENCODER_ENCODEFRAME_OUTPUT_ARGUMENTS(data?: Partial<D3D12_VIDEO_ENCODER_ENCODEFRAME_OUTPUT_ARGUMENTS>): Uint8Array {
  const buf = new Uint8Array(sizeofD3D12_VIDEO_ENCODER_ENCODEFRAME_OUTPUT_ARGUMENTS);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.Bitstream !== undefined) view.setBigUint64(0, data.Bitstream === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.Bitstream))), true);
  // 0x08: pointer
  if (data?.ReconstructedPicture !== undefined) view.setBigUint64(8, data.ReconstructedPicture === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.ReconstructedPicture))), true);
  // 0x10: pointer
  if (data?.EncoderOutputMetadata !== undefined) view.setBigUint64(16, data.EncoderOutputMetadata === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.EncoderOutputMetadata))), true);
  return buf;
}

export class D3D12_VIDEO_ENCODER_ENCODEFRAME_OUTPUT_ARGUMENTSView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get Bitstream(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(0, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x08: pointer
  get ReconstructedPicture(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x10: pointer
  get EncoderOutputMetadata(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(16, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: pointer
  set Bitstream(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(0, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x08: pointer
  set ReconstructedPicture(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x10: pointer
  set EncoderOutputMetadata(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(16, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.Media.MediaFoundation.AecQualityMetrics_Struct (size: 56)
 */
export interface AecQualityMetrics_Struct {
  /** i64 */
  i64Timestamp: bigint | number;
  /** u8 */
  ConvergenceFlag: number;
  /** u8 */
  MicClippedFlag: number;
  /** u8 */
  MicSilenceFlag: number;
  /** u8 */
  PstvFeadbackFlag: number;
  /** u8 */
  SpkClippedFlag: number;
  /** u8 */
  SpkMuteFlag: number;
  /** u8 */
  GlitchFlag: number;
  /** u8 */
  DoubleTalkFlag: number;
  /** u32 */
  uGlitchCount: number;
  /** u32 */
  uMicClipCount: number;
  /** f32 */
  fDuration: number;
  /** f32 */
  fTSVariance: number;
  /** f32 */
  fTSDriftRate: number;
  /** f32 */
  fVoiceLevel: number;
  /** f32 */
  fNoiseLevel: number;
  /** f32 */
  fERLE: number;
  /** f32 */
  fAvgERLE: number;
  /** u32 */
  dwReserved: number;
}

export const sizeofAecQualityMetrics_Struct = 56;

export function allocAecQualityMetrics_Struct(data?: Partial<AecQualityMetrics_Struct>): Uint8Array {
  const buf = new Uint8Array(sizeofAecQualityMetrics_Struct);
  const view = new DataView(buf.buffer);
  // 0x00: i64
  if (data?.i64Timestamp !== undefined) view.setBigInt64(0, BigInt(data.i64Timestamp), true);
  // 0x08: u8
  if (data?.ConvergenceFlag !== undefined) view.setUint8(8, Number(data.ConvergenceFlag));
  // 0x09: u8
  if (data?.MicClippedFlag !== undefined) view.setUint8(9, Number(data.MicClippedFlag));
  // 0x0a: u8
  if (data?.MicSilenceFlag !== undefined) view.setUint8(10, Number(data.MicSilenceFlag));
  // 0x0b: u8
  if (data?.PstvFeadbackFlag !== undefined) view.setUint8(11, Number(data.PstvFeadbackFlag));
  // 0x0c: u8
  if (data?.SpkClippedFlag !== undefined) view.setUint8(12, Number(data.SpkClippedFlag));
  // 0x0d: u8
  if (data?.SpkMuteFlag !== undefined) view.setUint8(13, Number(data.SpkMuteFlag));
  // 0x0e: u8
  if (data?.GlitchFlag !== undefined) view.setUint8(14, Number(data.GlitchFlag));
  // 0x0f: u8
  if (data?.DoubleTalkFlag !== undefined) view.setUint8(15, Number(data.DoubleTalkFlag));
  // 0x10: u32
  if (data?.uGlitchCount !== undefined) view.setUint32(16, Number(data.uGlitchCount), true);
  // 0x14: u32
  if (data?.uMicClipCount !== undefined) view.setUint32(20, Number(data.uMicClipCount), true);
  // 0x18: f32
  if (data?.fDuration !== undefined) view.setFloat32(24, Number(data.fDuration), true);
  // 0x1c: f32
  if (data?.fTSVariance !== undefined) view.setFloat32(28, Number(data.fTSVariance), true);
  // 0x20: f32
  if (data?.fTSDriftRate !== undefined) view.setFloat32(32, Number(data.fTSDriftRate), true);
  // 0x24: f32
  if (data?.fVoiceLevel !== undefined) view.setFloat32(36, Number(data.fVoiceLevel), true);
  // 0x28: f32
  if (data?.fNoiseLevel !== undefined) view.setFloat32(40, Number(data.fNoiseLevel), true);
  // 0x2c: f32
  if (data?.fERLE !== undefined) view.setFloat32(44, Number(data.fERLE), true);
  // 0x30: f32
  if (data?.fAvgERLE !== undefined) view.setFloat32(48, Number(data.fAvgERLE), true);
  // 0x34: u32
  if (data?.dwReserved !== undefined) view.setUint32(52, Number(data.dwReserved), true);
  return buf;
}

export class AecQualityMetrics_StructView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: i64
  get i64Timestamp(): bigint | number {
    return Number(this.view.getBigInt64(0, true));
  }

  // 0x08: u8
  get ConvergenceFlag(): number {
    return this.view.getUint8(8);
  }

  // 0x09: u8
  get MicClippedFlag(): number {
    return this.view.getUint8(9);
  }

  // 0x0a: u8
  get MicSilenceFlag(): number {
    return this.view.getUint8(10);
  }

  // 0x0b: u8
  get PstvFeadbackFlag(): number {
    return this.view.getUint8(11);
  }

  // 0x0c: u8
  get SpkClippedFlag(): number {
    return this.view.getUint8(12);
  }

  // 0x0d: u8
  get SpkMuteFlag(): number {
    return this.view.getUint8(13);
  }

  // 0x0e: u8
  get GlitchFlag(): number {
    return this.view.getUint8(14);
  }

  // 0x0f: u8
  get DoubleTalkFlag(): number {
    return this.view.getUint8(15);
  }

  // 0x10: u32
  get uGlitchCount(): number {
    return this.view.getUint32(16, true);
  }

  // 0x14: u32
  get uMicClipCount(): number {
    return this.view.getUint32(20, true);
  }

  // 0x18: f32
  get fDuration(): number {
    return this.view.getFloat32(24, true);
  }

  // 0x1c: f32
  get fTSVariance(): number {
    return this.view.getFloat32(28, true);
  }

  // 0x20: f32
  get fTSDriftRate(): number {
    return this.view.getFloat32(32, true);
  }

  // 0x24: f32
  get fVoiceLevel(): number {
    return this.view.getFloat32(36, true);
  }

  // 0x28: f32
  get fNoiseLevel(): number {
    return this.view.getFloat32(40, true);
  }

  // 0x2c: f32
  get fERLE(): number {
    return this.view.getFloat32(44, true);
  }

  // 0x30: f32
  get fAvgERLE(): number {
    return this.view.getFloat32(48, true);
  }

  // 0x34: u32
  get dwReserved(): number {
    return this.view.getUint32(52, true);
  }

  // 0x00: i64
  set i64Timestamp(value: bigint | number) {
    this.view.setBigInt64(0, BigInt(value), true);
  }

  // 0x08: u8
  set ConvergenceFlag(value: number) {
    this.view.setUint8(8, value);
  }

  // 0x09: u8
  set MicClippedFlag(value: number) {
    this.view.setUint8(9, value);
  }

  // 0x0a: u8
  set MicSilenceFlag(value: number) {
    this.view.setUint8(10, value);
  }

  // 0x0b: u8
  set PstvFeadbackFlag(value: number) {
    this.view.setUint8(11, value);
  }

  // 0x0c: u8
  set SpkClippedFlag(value: number) {
    this.view.setUint8(12, value);
  }

  // 0x0d: u8
  set SpkMuteFlag(value: number) {
    this.view.setUint8(13, value);
  }

  // 0x0e: u8
  set GlitchFlag(value: number) {
    this.view.setUint8(14, value);
  }

  // 0x0f: u8
  set DoubleTalkFlag(value: number) {
    this.view.setUint8(15, value);
  }

  // 0x10: u32
  set uGlitchCount(value: number) {
    this.view.setUint32(16, value, true);
  }

  // 0x14: u32
  set uMicClipCount(value: number) {
    this.view.setUint32(20, value, true);
  }

  // 0x18: f32
  set fDuration(value: number) {
    this.view.setFloat32(24, value, true);
  }

  // 0x1c: f32
  set fTSVariance(value: number) {
    this.view.setFloat32(28, value, true);
  }

  // 0x20: f32
  set fTSDriftRate(value: number) {
    this.view.setFloat32(32, value, true);
  }

  // 0x24: f32
  set fVoiceLevel(value: number) {
    this.view.setFloat32(36, value, true);
  }

  // 0x28: f32
  set fNoiseLevel(value: number) {
    this.view.setFloat32(40, value, true);
  }

  // 0x2c: f32
  set fERLE(value: number) {
    this.view.setFloat32(44, value, true);
  }

  // 0x30: f32
  set fAvgERLE(value: number) {
    this.view.setFloat32(48, value, true);
  }

  // 0x34: u32
  set dwReserved(value: number) {
    this.view.setUint32(52, value, true);
  }
}

/**
 * Windows.Win32.Media.MediaFoundation.TOC_DESCRIPTOR (size: 32)
 */
export interface TOC_DESCRIPTOR {
  /** System.Guid */
  guidID: Uint8Array | Deno.PointerValue;
  /** u16 */
  wStreamNumber: number;
  /** System.Guid */
  guidType: Uint8Array | Deno.PointerValue;
  /** u16 */
  wLanguageIndex: number;
}

export const sizeofTOC_DESCRIPTOR = 32;

export function allocTOC_DESCRIPTOR(data?: Partial<TOC_DESCRIPTOR>): Uint8Array {
  const buf = new Uint8Array(sizeofTOC_DESCRIPTOR);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.guidID !== undefined) view.setBigUint64(0, data.guidID === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.guidID))), true);
  // 0x08: u16
  if (data?.wStreamNumber !== undefined) view.setUint16(8, Number(data.wStreamNumber), true);
  // 0x0a: pad6
  // 0x10: pointer
  if (data?.guidType !== undefined) view.setBigUint64(16, data.guidType === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.guidType))), true);
  // 0x18: u16
  if (data?.wLanguageIndex !== undefined) view.setUint16(24, Number(data.wLanguageIndex), true);
  // 0x1a: pad6
  return buf;
}

export class TOC_DESCRIPTORView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get guidID(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(0, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x08: u16
  get wStreamNumber(): number {
    return this.view.getUint16(8, true);
  }

  // 0x0a: pad6

  // 0x10: pointer
  get guidType(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(16, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x18: u16
  get wLanguageIndex(): number {
    return this.view.getUint16(24, true);
  }

  // 0x1a: pad6

  // 0x00: pointer
  set guidID(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(0, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x08: u16
  set wStreamNumber(value: number) {
    this.view.setUint16(8, value, true);
  }

  // 0x0a: pad6

  // 0x10: pointer
  set guidType(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(16, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x18: u16
  set wLanguageIndex(value: number) {
    this.view.setUint16(24, value, true);
  }

  // 0x1a: pad6
}

/**
 * Windows.Win32.Media.MediaFoundation.TOC_ENTRY_DESCRIPTOR (size: 40)
 */
export interface TOC_ENTRY_DESCRIPTOR {
  /** u64 */
  qwStartTime: bigint | number;
  /** u64 */
  qwEndTime: bigint | number;
  /** u64 */
  qwStartPacketOffset: bigint | number;
  /** u64 */
  qwEndPacketOffset: bigint | number;
  /** u64 */
  qwRepresentativeFrameTime: bigint | number;
}

export const sizeofTOC_ENTRY_DESCRIPTOR = 40;

export function allocTOC_ENTRY_DESCRIPTOR(data?: Partial<TOC_ENTRY_DESCRIPTOR>): Uint8Array {
  const buf = new Uint8Array(sizeofTOC_ENTRY_DESCRIPTOR);
  const view = new DataView(buf.buffer);
  // 0x00: u64
  if (data?.qwStartTime !== undefined) view.setBigUint64(0, BigInt(data.qwStartTime), true);
  // 0x08: u64
  if (data?.qwEndTime !== undefined) view.setBigUint64(8, BigInt(data.qwEndTime), true);
  // 0x10: u64
  if (data?.qwStartPacketOffset !== undefined) view.setBigUint64(16, BigInt(data.qwStartPacketOffset), true);
  // 0x18: u64
  if (data?.qwEndPacketOffset !== undefined) view.setBigUint64(24, BigInt(data.qwEndPacketOffset), true);
  // 0x20: u64
  if (data?.qwRepresentativeFrameTime !== undefined) view.setBigUint64(32, BigInt(data.qwRepresentativeFrameTime), true);
  return buf;
}

export class TOC_ENTRY_DESCRIPTORView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u64
  get qwStartTime(): bigint | number {
    return Number(this.view.getBigUint64(0, true));
  }

  // 0x08: u64
  get qwEndTime(): bigint | number {
    return Number(this.view.getBigUint64(8, true));
  }

  // 0x10: u64
  get qwStartPacketOffset(): bigint | number {
    return Number(this.view.getBigUint64(16, true));
  }

  // 0x18: u64
  get qwEndPacketOffset(): bigint | number {
    return Number(this.view.getBigUint64(24, true));
  }

  // 0x20: u64
  get qwRepresentativeFrameTime(): bigint | number {
    return Number(this.view.getBigUint64(32, true));
  }

  // 0x00: u64
  set qwStartTime(value: bigint | number) {
    this.view.setBigUint64(0, BigInt(value), true);
  }

  // 0x08: u64
  set qwEndTime(value: bigint | number) {
    this.view.setBigUint64(8, BigInt(value), true);
  }

  // 0x10: u64
  set qwStartPacketOffset(value: bigint | number) {
    this.view.setBigUint64(16, BigInt(value), true);
  }

  // 0x18: u64
  set qwEndPacketOffset(value: bigint | number) {
    this.view.setBigUint64(24, BigInt(value), true);
  }

  // 0x20: u64
  set qwRepresentativeFrameTime(value: bigint | number) {
    this.view.setBigUint64(32, BigInt(value), true);
  }
}

/**
 * Windows.Win32.Media.MediaFoundation.DXVA_BufferDescription (size: 40)
 */
export interface DXVA_BufferDescription {
  /** u32 */
  dwTypeIndex: number;
  /** u32 */
  dwBufferIndex: number;
  /** u32 */
  dwDataOffset: number;
  /** u32 */
  dwDataSize: number;
  /** u32 */
  dwFirstMBaddress: number;
  /** u32 */
  dwNumMBsInBuffer: number;
  /** u32 */
  dwWidth: number;
  /** u32 */
  dwHeight: number;
  /** u32 */
  dwStride: number;
  /** u32 */
  dwReservedBits: number;
}

export const sizeofDXVA_BufferDescription = 40;

export function allocDXVA_BufferDescription(data?: Partial<DXVA_BufferDescription>): Uint8Array {
  const buf = new Uint8Array(sizeofDXVA_BufferDescription);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.dwTypeIndex !== undefined) view.setUint32(0, Number(data.dwTypeIndex), true);
  // 0x04: u32
  if (data?.dwBufferIndex !== undefined) view.setUint32(4, Number(data.dwBufferIndex), true);
  // 0x08: u32
  if (data?.dwDataOffset !== undefined) view.setUint32(8, Number(data.dwDataOffset), true);
  // 0x0c: u32
  if (data?.dwDataSize !== undefined) view.setUint32(12, Number(data.dwDataSize), true);
  // 0x10: u32
  if (data?.dwFirstMBaddress !== undefined) view.setUint32(16, Number(data.dwFirstMBaddress), true);
  // 0x14: u32
  if (data?.dwNumMBsInBuffer !== undefined) view.setUint32(20, Number(data.dwNumMBsInBuffer), true);
  // 0x18: u32
  if (data?.dwWidth !== undefined) view.setUint32(24, Number(data.dwWidth), true);
  // 0x1c: u32
  if (data?.dwHeight !== undefined) view.setUint32(28, Number(data.dwHeight), true);
  // 0x20: u32
  if (data?.dwStride !== undefined) view.setUint32(32, Number(data.dwStride), true);
  // 0x24: u32
  if (data?.dwReservedBits !== undefined) view.setUint32(36, Number(data.dwReservedBits), true);
  return buf;
}

export class DXVA_BufferDescriptionView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get dwTypeIndex(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: u32
  get dwBufferIndex(): number {
    return this.view.getUint32(4, true);
  }

  // 0x08: u32
  get dwDataOffset(): number {
    return this.view.getUint32(8, true);
  }

  // 0x0c: u32
  get dwDataSize(): number {
    return this.view.getUint32(12, true);
  }

  // 0x10: u32
  get dwFirstMBaddress(): number {
    return this.view.getUint32(16, true);
  }

  // 0x14: u32
  get dwNumMBsInBuffer(): number {
    return this.view.getUint32(20, true);
  }

  // 0x18: u32
  get dwWidth(): number {
    return this.view.getUint32(24, true);
  }

  // 0x1c: u32
  get dwHeight(): number {
    return this.view.getUint32(28, true);
  }

  // 0x20: u32
  get dwStride(): number {
    return this.view.getUint32(32, true);
  }

  // 0x24: u32
  get dwReservedBits(): number {
    return this.view.getUint32(36, true);
  }

  // 0x00: u32
  set dwTypeIndex(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: u32
  set dwBufferIndex(value: number) {
    this.view.setUint32(4, value, true);
  }

  // 0x08: u32
  set dwDataOffset(value: number) {
    this.view.setUint32(8, value, true);
  }

  // 0x0c: u32
  set dwDataSize(value: number) {
    this.view.setUint32(12, value, true);
  }

  // 0x10: u32
  set dwFirstMBaddress(value: number) {
    this.view.setUint32(16, value, true);
  }

  // 0x14: u32
  set dwNumMBsInBuffer(value: number) {
    this.view.setUint32(20, value, true);
  }

  // 0x18: u32
  set dwWidth(value: number) {
    this.view.setUint32(24, value, true);
  }

  // 0x1c: u32
  set dwHeight(value: number) {
    this.view.setUint32(28, value, true);
  }

  // 0x20: u32
  set dwStride(value: number) {
    this.view.setUint32(32, value, true);
  }

  // 0x24: u32
  set dwReservedBits(value: number) {
    this.view.setUint32(36, value, true);
  }
}

/**
 * Windows.Win32.Media.MediaFoundation.DXVA_ConfigPictureDecode (size: 56)
 */
export interface DXVA_ConfigPictureDecode {
  /** u32 */
  dwFunction: number;
  /** array */
  dwReservedBits: Deno.PointerValue;
  /** System.Guid */
  guidConfigBitstreamEncryption: Uint8Array | Deno.PointerValue;
  /** System.Guid */
  guidConfigMBcontrolEncryption: Uint8Array | Deno.PointerValue;
  /** System.Guid */
  guidConfigResidDiffEncryption: Uint8Array | Deno.PointerValue;
  /** u8 */
  bConfigBitstreamRaw: number;
  /** u8 */
  bConfigMBcontrolRasterOrder: number;
  /** u8 */
  bConfigResidDiffHost: number;
  /** u8 */
  bConfigSpatialResid8: number;
  /** u8 */
  bConfigResid8Subtraction: number;
  /** u8 */
  bConfigSpatialHost8or9Clipping: number;
  /** u8 */
  bConfigSpatialResidInterleaved: number;
  /** u8 */
  bConfigIntraResidUnsigned: number;
  /** u8 */
  bConfigResidDiffAccelerator: number;
  /** u8 */
  bConfigHostInverseScan: number;
  /** u8 */
  bConfigSpecificIDCT: number;
  /** u8 */
  bConfig4GroupedCoefs: number;
}

export const sizeofDXVA_ConfigPictureDecode = 56;

export function allocDXVA_ConfigPictureDecode(data?: Partial<DXVA_ConfigPictureDecode>): Uint8Array {
  const buf = new Uint8Array(sizeofDXVA_ConfigPictureDecode);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.dwFunction !== undefined) view.setUint32(0, Number(data.dwFunction), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.dwReservedBits !== undefined) view.setBigUint64(8, data.dwReservedBits === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.dwReservedBits))), true);
  // 0x10: pointer
  if (data?.guidConfigBitstreamEncryption !== undefined) view.setBigUint64(16, data.guidConfigBitstreamEncryption === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.guidConfigBitstreamEncryption))), true);
  // 0x18: pointer
  if (data?.guidConfigMBcontrolEncryption !== undefined) view.setBigUint64(24, data.guidConfigMBcontrolEncryption === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.guidConfigMBcontrolEncryption))), true);
  // 0x20: pointer
  if (data?.guidConfigResidDiffEncryption !== undefined) view.setBigUint64(32, data.guidConfigResidDiffEncryption === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.guidConfigResidDiffEncryption))), true);
  // 0x28: u8
  if (data?.bConfigBitstreamRaw !== undefined) view.setUint8(40, Number(data.bConfigBitstreamRaw));
  // 0x29: u8
  if (data?.bConfigMBcontrolRasterOrder !== undefined) view.setUint8(41, Number(data.bConfigMBcontrolRasterOrder));
  // 0x2a: u8
  if (data?.bConfigResidDiffHost !== undefined) view.setUint8(42, Number(data.bConfigResidDiffHost));
  // 0x2b: u8
  if (data?.bConfigSpatialResid8 !== undefined) view.setUint8(43, Number(data.bConfigSpatialResid8));
  // 0x2c: u8
  if (data?.bConfigResid8Subtraction !== undefined) view.setUint8(44, Number(data.bConfigResid8Subtraction));
  // 0x2d: u8
  if (data?.bConfigSpatialHost8or9Clipping !== undefined) view.setUint8(45, Number(data.bConfigSpatialHost8or9Clipping));
  // 0x2e: u8
  if (data?.bConfigSpatialResidInterleaved !== undefined) view.setUint8(46, Number(data.bConfigSpatialResidInterleaved));
  // 0x2f: u8
  if (data?.bConfigIntraResidUnsigned !== undefined) view.setUint8(47, Number(data.bConfigIntraResidUnsigned));
  // 0x30: u8
  if (data?.bConfigResidDiffAccelerator !== undefined) view.setUint8(48, Number(data.bConfigResidDiffAccelerator));
  // 0x31: u8
  if (data?.bConfigHostInverseScan !== undefined) view.setUint8(49, Number(data.bConfigHostInverseScan));
  // 0x32: u8
  if (data?.bConfigSpecificIDCT !== undefined) view.setUint8(50, Number(data.bConfigSpecificIDCT));
  // 0x33: u8
  if (data?.bConfig4GroupedCoefs !== undefined) view.setUint8(51, Number(data.bConfig4GroupedCoefs));
  // 0x34: pad4
  return buf;
}

export class DXVA_ConfigPictureDecodeView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get dwFunction(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  get dwReservedBits(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x10: pointer
  get guidConfigBitstreamEncryption(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(16, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x18: pointer
  get guidConfigMBcontrolEncryption(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(24, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x20: pointer
  get guidConfigResidDiffEncryption(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(32, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x28: u8
  get bConfigBitstreamRaw(): number {
    return this.view.getUint8(40);
  }

  // 0x29: u8
  get bConfigMBcontrolRasterOrder(): number {
    return this.view.getUint8(41);
  }

  // 0x2a: u8
  get bConfigResidDiffHost(): number {
    return this.view.getUint8(42);
  }

  // 0x2b: u8
  get bConfigSpatialResid8(): number {
    return this.view.getUint8(43);
  }

  // 0x2c: u8
  get bConfigResid8Subtraction(): number {
    return this.view.getUint8(44);
  }

  // 0x2d: u8
  get bConfigSpatialHost8or9Clipping(): number {
    return this.view.getUint8(45);
  }

  // 0x2e: u8
  get bConfigSpatialResidInterleaved(): number {
    return this.view.getUint8(46);
  }

  // 0x2f: u8
  get bConfigIntraResidUnsigned(): number {
    return this.view.getUint8(47);
  }

  // 0x30: u8
  get bConfigResidDiffAccelerator(): number {
    return this.view.getUint8(48);
  }

  // 0x31: u8
  get bConfigHostInverseScan(): number {
    return this.view.getUint8(49);
  }

  // 0x32: u8
  get bConfigSpecificIDCT(): number {
    return this.view.getUint8(50);
  }

  // 0x33: u8
  get bConfig4GroupedCoefs(): number {
    return this.view.getUint8(51);
  }

  // 0x34: pad4

  // 0x00: u32
  set dwFunction(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  set dwReservedBits(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x10: pointer
  set guidConfigBitstreamEncryption(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(16, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x18: pointer
  set guidConfigMBcontrolEncryption(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(24, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x20: pointer
  set guidConfigResidDiffEncryption(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(32, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x28: u8
  set bConfigBitstreamRaw(value: number) {
    this.view.setUint8(40, value);
  }

  // 0x29: u8
  set bConfigMBcontrolRasterOrder(value: number) {
    this.view.setUint8(41, value);
  }

  // 0x2a: u8
  set bConfigResidDiffHost(value: number) {
    this.view.setUint8(42, value);
  }

  // 0x2b: u8
  set bConfigSpatialResid8(value: number) {
    this.view.setUint8(43, value);
  }

  // 0x2c: u8
  set bConfigResid8Subtraction(value: number) {
    this.view.setUint8(44, value);
  }

  // 0x2d: u8
  set bConfigSpatialHost8or9Clipping(value: number) {
    this.view.setUint8(45, value);
  }

  // 0x2e: u8
  set bConfigSpatialResidInterleaved(value: number) {
    this.view.setUint8(46, value);
  }

  // 0x2f: u8
  set bConfigIntraResidUnsigned(value: number) {
    this.view.setUint8(47, value);
  }

  // 0x30: u8
  set bConfigResidDiffAccelerator(value: number) {
    this.view.setUint8(48, value);
  }

  // 0x31: u8
  set bConfigHostInverseScan(value: number) {
    this.view.setUint8(49, value);
  }

  // 0x32: u8
  set bConfigSpecificIDCT(value: number) {
    this.view.setUint8(50, value);
  }

  // 0x33: u8
  set bConfig4GroupedCoefs(value: number) {
    this.view.setUint8(51, value);
  }

  // 0x34: pad4
}

/**
 * Windows.Win32.Media.MediaFoundation.DXVA_PictureParameters (size: 48)
 */
export interface DXVA_PictureParameters {
  /** u16 */
  wDecodedPictureIndex: number;
  /** u16 */
  wDeblockedPictureIndex: number;
  /** u16 */
  wForwardRefPictureIndex: number;
  /** u16 */
  wBackwardRefPictureIndex: number;
  /** u16 */
  wPicWidthInMBminus1: number;
  /** u16 */
  wPicHeightInMBminus1: number;
  /** u8 */
  bMacroblockWidthMinus1: number;
  /** u8 */
  bMacroblockHeightMinus1: number;
  /** u8 */
  bBlockWidthMinus1: number;
  /** u8 */
  bBlockHeightMinus1: number;
  /** u8 */
  bBPPminus1: number;
  /** u8 */
  bPicStructure: number;
  /** u8 */
  bSecondField: number;
  /** u8 */
  bPicIntra: number;
  /** u8 */
  bPicBackwardPrediction: number;
  /** u8 */
  bBidirectionalAveragingMode: number;
  /** u8 */
  bMVprecisionAndChromaRelation: number;
  /** u8 */
  bChromaFormat: number;
  /** u8 */
  bPicScanFixed: number;
  /** u8 */
  bPicScanMethod: number;
  /** u8 */
  bPicReadbackRequests: number;
  /** u8 */
  bRcontrol: number;
  /** u8 */
  bPicSpatialResid8: number;
  /** u8 */
  bPicOverflowBlocks: number;
  /** u8 */
  bPicExtrapolation: number;
  /** u8 */
  bPicDeblocked: number;
  /** u8 */
  bPicDeblockConfined: number;
  /** u8 */
  bPic4MVallowed: number;
  /** u8 */
  bPicOBMC: number;
  /** u8 */
  bPicBinPB: number;
  /** u8 */
  bMV_RPS: number;
  /** u8 */
  bReservedBits: number;
  /** u16 */
  wBitstreamFcodes: number;
  /** u16 */
  wBitstreamPCEelements: number;
  /** u8 */
  bBitstreamConcealmentNeed: number;
  /** u8 */
  bBitstreamConcealmentMethod: number;
}

export const sizeofDXVA_PictureParameters = 48;

export function allocDXVA_PictureParameters(data?: Partial<DXVA_PictureParameters>): Uint8Array {
  const buf = new Uint8Array(sizeofDXVA_PictureParameters);
  const view = new DataView(buf.buffer);
  // 0x00: u16
  if (data?.wDecodedPictureIndex !== undefined) view.setUint16(0, Number(data.wDecodedPictureIndex), true);
  // 0x02: u16
  if (data?.wDeblockedPictureIndex !== undefined) view.setUint16(2, Number(data.wDeblockedPictureIndex), true);
  // 0x04: u16
  if (data?.wForwardRefPictureIndex !== undefined) view.setUint16(4, Number(data.wForwardRefPictureIndex), true);
  // 0x06: u16
  if (data?.wBackwardRefPictureIndex !== undefined) view.setUint16(6, Number(data.wBackwardRefPictureIndex), true);
  // 0x08: u16
  if (data?.wPicWidthInMBminus1 !== undefined) view.setUint16(8, Number(data.wPicWidthInMBminus1), true);
  // 0x0a: u16
  if (data?.wPicHeightInMBminus1 !== undefined) view.setUint16(10, Number(data.wPicHeightInMBminus1), true);
  // 0x0c: u8
  if (data?.bMacroblockWidthMinus1 !== undefined) view.setUint8(12, Number(data.bMacroblockWidthMinus1));
  // 0x0d: u8
  if (data?.bMacroblockHeightMinus1 !== undefined) view.setUint8(13, Number(data.bMacroblockHeightMinus1));
  // 0x0e: u8
  if (data?.bBlockWidthMinus1 !== undefined) view.setUint8(14, Number(data.bBlockWidthMinus1));
  // 0x0f: u8
  if (data?.bBlockHeightMinus1 !== undefined) view.setUint8(15, Number(data.bBlockHeightMinus1));
  // 0x10: u8
  if (data?.bBPPminus1 !== undefined) view.setUint8(16, Number(data.bBPPminus1));
  // 0x11: u8
  if (data?.bPicStructure !== undefined) view.setUint8(17, Number(data.bPicStructure));
  // 0x12: u8
  if (data?.bSecondField !== undefined) view.setUint8(18, Number(data.bSecondField));
  // 0x13: u8
  if (data?.bPicIntra !== undefined) view.setUint8(19, Number(data.bPicIntra));
  // 0x14: u8
  if (data?.bPicBackwardPrediction !== undefined) view.setUint8(20, Number(data.bPicBackwardPrediction));
  // 0x15: u8
  if (data?.bBidirectionalAveragingMode !== undefined) view.setUint8(21, Number(data.bBidirectionalAveragingMode));
  // 0x16: u8
  if (data?.bMVprecisionAndChromaRelation !== undefined) view.setUint8(22, Number(data.bMVprecisionAndChromaRelation));
  // 0x17: u8
  if (data?.bChromaFormat !== undefined) view.setUint8(23, Number(data.bChromaFormat));
  // 0x18: u8
  if (data?.bPicScanFixed !== undefined) view.setUint8(24, Number(data.bPicScanFixed));
  // 0x19: u8
  if (data?.bPicScanMethod !== undefined) view.setUint8(25, Number(data.bPicScanMethod));
  // 0x1a: u8
  if (data?.bPicReadbackRequests !== undefined) view.setUint8(26, Number(data.bPicReadbackRequests));
  // 0x1b: u8
  if (data?.bRcontrol !== undefined) view.setUint8(27, Number(data.bRcontrol));
  // 0x1c: u8
  if (data?.bPicSpatialResid8 !== undefined) view.setUint8(28, Number(data.bPicSpatialResid8));
  // 0x1d: u8
  if (data?.bPicOverflowBlocks !== undefined) view.setUint8(29, Number(data.bPicOverflowBlocks));
  // 0x1e: u8
  if (data?.bPicExtrapolation !== undefined) view.setUint8(30, Number(data.bPicExtrapolation));
  // 0x1f: u8
  if (data?.bPicDeblocked !== undefined) view.setUint8(31, Number(data.bPicDeblocked));
  // 0x20: u8
  if (data?.bPicDeblockConfined !== undefined) view.setUint8(32, Number(data.bPicDeblockConfined));
  // 0x21: u8
  if (data?.bPic4MVallowed !== undefined) view.setUint8(33, Number(data.bPic4MVallowed));
  // 0x22: u8
  if (data?.bPicOBMC !== undefined) view.setUint8(34, Number(data.bPicOBMC));
  // 0x23: u8
  if (data?.bPicBinPB !== undefined) view.setUint8(35, Number(data.bPicBinPB));
  // 0x24: u8
  if (data?.bMV_RPS !== undefined) view.setUint8(36, Number(data.bMV_RPS));
  // 0x25: u8
  if (data?.bReservedBits !== undefined) view.setUint8(37, Number(data.bReservedBits));
  // 0x26: u16
  if (data?.wBitstreamFcodes !== undefined) view.setUint16(38, Number(data.wBitstreamFcodes), true);
  // 0x28: u16
  if (data?.wBitstreamPCEelements !== undefined) view.setUint16(40, Number(data.wBitstreamPCEelements), true);
  // 0x2a: u8
  if (data?.bBitstreamConcealmentNeed !== undefined) view.setUint8(42, Number(data.bBitstreamConcealmentNeed));
  // 0x2b: u8
  if (data?.bBitstreamConcealmentMethod !== undefined) view.setUint8(43, Number(data.bBitstreamConcealmentMethod));
  // 0x2c: pad4
  return buf;
}

export class DXVA_PictureParametersView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u16
  get wDecodedPictureIndex(): number {
    return this.view.getUint16(0, true);
  }

  // 0x02: u16
  get wDeblockedPictureIndex(): number {
    return this.view.getUint16(2, true);
  }

  // 0x04: u16
  get wForwardRefPictureIndex(): number {
    return this.view.getUint16(4, true);
  }

  // 0x06: u16
  get wBackwardRefPictureIndex(): number {
    return this.view.getUint16(6, true);
  }

  // 0x08: u16
  get wPicWidthInMBminus1(): number {
    return this.view.getUint16(8, true);
  }

  // 0x0a: u16
  get wPicHeightInMBminus1(): number {
    return this.view.getUint16(10, true);
  }

  // 0x0c: u8
  get bMacroblockWidthMinus1(): number {
    return this.view.getUint8(12);
  }

  // 0x0d: u8
  get bMacroblockHeightMinus1(): number {
    return this.view.getUint8(13);
  }

  // 0x0e: u8
  get bBlockWidthMinus1(): number {
    return this.view.getUint8(14);
  }

  // 0x0f: u8
  get bBlockHeightMinus1(): number {
    return this.view.getUint8(15);
  }

  // 0x10: u8
  get bBPPminus1(): number {
    return this.view.getUint8(16);
  }

  // 0x11: u8
  get bPicStructure(): number {
    return this.view.getUint8(17);
  }

  // 0x12: u8
  get bSecondField(): number {
    return this.view.getUint8(18);
  }

  // 0x13: u8
  get bPicIntra(): number {
    return this.view.getUint8(19);
  }

  // 0x14: u8
  get bPicBackwardPrediction(): number {
    return this.view.getUint8(20);
  }

  // 0x15: u8
  get bBidirectionalAveragingMode(): number {
    return this.view.getUint8(21);
  }

  // 0x16: u8
  get bMVprecisionAndChromaRelation(): number {
    return this.view.getUint8(22);
  }

  // 0x17: u8
  get bChromaFormat(): number {
    return this.view.getUint8(23);
  }

  // 0x18: u8
  get bPicScanFixed(): number {
    return this.view.getUint8(24);
  }

  // 0x19: u8
  get bPicScanMethod(): number {
    return this.view.getUint8(25);
  }

  // 0x1a: u8
  get bPicReadbackRequests(): number {
    return this.view.getUint8(26);
  }

  // 0x1b: u8
  get bRcontrol(): number {
    return this.view.getUint8(27);
  }

  // 0x1c: u8
  get bPicSpatialResid8(): number {
    return this.view.getUint8(28);
  }

  // 0x1d: u8
  get bPicOverflowBlocks(): number {
    return this.view.getUint8(29);
  }

  // 0x1e: u8
  get bPicExtrapolation(): number {
    return this.view.getUint8(30);
  }

  // 0x1f: u8
  get bPicDeblocked(): number {
    return this.view.getUint8(31);
  }

  // 0x20: u8
  get bPicDeblockConfined(): number {
    return this.view.getUint8(32);
  }

  // 0x21: u8
  get bPic4MVallowed(): number {
    return this.view.getUint8(33);
  }

  // 0x22: u8
  get bPicOBMC(): number {
    return this.view.getUint8(34);
  }

  // 0x23: u8
  get bPicBinPB(): number {
    return this.view.getUint8(35);
  }

  // 0x24: u8
  get bMV_RPS(): number {
    return this.view.getUint8(36);
  }

  // 0x25: u8
  get bReservedBits(): number {
    return this.view.getUint8(37);
  }

  // 0x26: u16
  get wBitstreamFcodes(): number {
    return this.view.getUint16(38, true);
  }

  // 0x28: u16
  get wBitstreamPCEelements(): number {
    return this.view.getUint16(40, true);
  }

  // 0x2a: u8
  get bBitstreamConcealmentNeed(): number {
    return this.view.getUint8(42);
  }

  // 0x2b: u8
  get bBitstreamConcealmentMethod(): number {
    return this.view.getUint8(43);
  }

  // 0x2c: pad4

  // 0x00: u16
  set wDecodedPictureIndex(value: number) {
    this.view.setUint16(0, value, true);
  }

  // 0x02: u16
  set wDeblockedPictureIndex(value: number) {
    this.view.setUint16(2, value, true);
  }

  // 0x04: u16
  set wForwardRefPictureIndex(value: number) {
    this.view.setUint16(4, value, true);
  }

  // 0x06: u16
  set wBackwardRefPictureIndex(value: number) {
    this.view.setUint16(6, value, true);
  }

  // 0x08: u16
  set wPicWidthInMBminus1(value: number) {
    this.view.setUint16(8, value, true);
  }

  // 0x0a: u16
  set wPicHeightInMBminus1(value: number) {
    this.view.setUint16(10, value, true);
  }

  // 0x0c: u8
  set bMacroblockWidthMinus1(value: number) {
    this.view.setUint8(12, value);
  }

  // 0x0d: u8
  set bMacroblockHeightMinus1(value: number) {
    this.view.setUint8(13, value);
  }

  // 0x0e: u8
  set bBlockWidthMinus1(value: number) {
    this.view.setUint8(14, value);
  }

  // 0x0f: u8
  set bBlockHeightMinus1(value: number) {
    this.view.setUint8(15, value);
  }

  // 0x10: u8
  set bBPPminus1(value: number) {
    this.view.setUint8(16, value);
  }

  // 0x11: u8
  set bPicStructure(value: number) {
    this.view.setUint8(17, value);
  }

  // 0x12: u8
  set bSecondField(value: number) {
    this.view.setUint8(18, value);
  }

  // 0x13: u8
  set bPicIntra(value: number) {
    this.view.setUint8(19, value);
  }

  // 0x14: u8
  set bPicBackwardPrediction(value: number) {
    this.view.setUint8(20, value);
  }

  // 0x15: u8
  set bBidirectionalAveragingMode(value: number) {
    this.view.setUint8(21, value);
  }

  // 0x16: u8
  set bMVprecisionAndChromaRelation(value: number) {
    this.view.setUint8(22, value);
  }

  // 0x17: u8
  set bChromaFormat(value: number) {
    this.view.setUint8(23, value);
  }

  // 0x18: u8
  set bPicScanFixed(value: number) {
    this.view.setUint8(24, value);
  }

  // 0x19: u8
  set bPicScanMethod(value: number) {
    this.view.setUint8(25, value);
  }

  // 0x1a: u8
  set bPicReadbackRequests(value: number) {
    this.view.setUint8(26, value);
  }

  // 0x1b: u8
  set bRcontrol(value: number) {
    this.view.setUint8(27, value);
  }

  // 0x1c: u8
  set bPicSpatialResid8(value: number) {
    this.view.setUint8(28, value);
  }

  // 0x1d: u8
  set bPicOverflowBlocks(value: number) {
    this.view.setUint8(29, value);
  }

  // 0x1e: u8
  set bPicExtrapolation(value: number) {
    this.view.setUint8(30, value);
  }

  // 0x1f: u8
  set bPicDeblocked(value: number) {
    this.view.setUint8(31, value);
  }

  // 0x20: u8
  set bPicDeblockConfined(value: number) {
    this.view.setUint8(32, value);
  }

  // 0x21: u8
  set bPic4MVallowed(value: number) {
    this.view.setUint8(33, value);
  }

  // 0x22: u8
  set bPicOBMC(value: number) {
    this.view.setUint8(34, value);
  }

  // 0x23: u8
  set bPicBinPB(value: number) {
    this.view.setUint8(35, value);
  }

  // 0x24: u8
  set bMV_RPS(value: number) {
    this.view.setUint8(36, value);
  }

  // 0x25: u8
  set bReservedBits(value: number) {
    this.view.setUint8(37, value);
  }

  // 0x26: u16
  set wBitstreamFcodes(value: number) {
    this.view.setUint16(38, value, true);
  }

  // 0x28: u16
  set wBitstreamPCEelements(value: number) {
    this.view.setUint16(40, value, true);
  }

  // 0x2a: u8
  set bBitstreamConcealmentNeed(value: number) {
    this.view.setUint8(42, value);
  }

  // 0x2b: u8
  set bBitstreamConcealmentMethod(value: number) {
    this.view.setUint8(43, value);
  }

  // 0x2c: pad4
}

/**
 * Windows.Win32.Media.MediaFoundation.DXVAUncompDataInfo (size: 16)
 */
export interface DXVAUncompDataInfo {
  /** u32 */
  UncompWidth: number;
  /** u32 */
  UncompHeight: number;
  /** Windows.Win32.Graphics.Direct3D9.D3DFORMAT */
  UncompFormat: D3DFORMAT;
}

export const sizeofDXVAUncompDataInfo = 16;

export function allocDXVAUncompDataInfo(data?: Partial<DXVAUncompDataInfo>): Uint8Array {
  const buf = new Uint8Array(sizeofDXVAUncompDataInfo);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.UncompWidth !== undefined) view.setUint32(0, Number(data.UncompWidth), true);
  // 0x04: u32
  if (data?.UncompHeight !== undefined) view.setUint32(4, Number(data.UncompHeight), true);
  // 0x08: u32
  if (data?.UncompFormat !== undefined) view.setUint32(8, Number(data.UncompFormat), true);
  // 0x0c: pad4
  return buf;
}

export class DXVAUncompDataInfoView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get UncompWidth(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: u32
  get UncompHeight(): number {
    return this.view.getUint32(4, true);
  }

  // 0x08: u32
  get UncompFormat(): number {
    return this.view.getUint32(8, true);
  }

  // 0x0c: pad4

  // 0x00: u32
  set UncompWidth(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: u32
  set UncompHeight(value: number) {
    this.view.setUint32(4, value, true);
  }

  // 0x08: u32
  set UncompFormat(value: number) {
    this.view.setUint32(8, value, true);
  }

  // 0x0c: pad4
}

/**
 * Windows.Win32.Media.MediaFoundation.DXVACompBufferInfo (size: 32)
 */
export interface DXVACompBufferInfo {
  /** u32 */
  NumCompBuffers: number;
  /** u32 */
  WidthToCreate: number;
  /** u32 */
  HeightToCreate: number;
  /** u32 */
  BytesToAllocate: number;
  /** u32 */
  Usage: number;
  /** Windows.Win32.Graphics.Direct3D9.D3DPOOL */
  Pool: D3DPOOL;
  /** Windows.Win32.Graphics.Direct3D9.D3DFORMAT */
  Format: D3DFORMAT;
}

export const sizeofDXVACompBufferInfo = 32;

export function allocDXVACompBufferInfo(data?: Partial<DXVACompBufferInfo>): Uint8Array {
  const buf = new Uint8Array(sizeofDXVACompBufferInfo);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.NumCompBuffers !== undefined) view.setUint32(0, Number(data.NumCompBuffers), true);
  // 0x04: u32
  if (data?.WidthToCreate !== undefined) view.setUint32(4, Number(data.WidthToCreate), true);
  // 0x08: u32
  if (data?.HeightToCreate !== undefined) view.setUint32(8, Number(data.HeightToCreate), true);
  // 0x0c: u32
  if (data?.BytesToAllocate !== undefined) view.setUint32(12, Number(data.BytesToAllocate), true);
  // 0x10: u32
  if (data?.Usage !== undefined) view.setUint32(16, Number(data.Usage), true);
  // 0x14: u32
  if (data?.Pool !== undefined) view.setUint32(20, Number(data.Pool), true);
  // 0x18: u32
  if (data?.Format !== undefined) view.setUint32(24, Number(data.Format), true);
  // 0x1c: pad4
  return buf;
}

export class DXVACompBufferInfoView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get NumCompBuffers(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: u32
  get WidthToCreate(): number {
    return this.view.getUint32(4, true);
  }

  // 0x08: u32
  get HeightToCreate(): number {
    return this.view.getUint32(8, true);
  }

  // 0x0c: u32
  get BytesToAllocate(): number {
    return this.view.getUint32(12, true);
  }

  // 0x10: u32
  get Usage(): number {
    return this.view.getUint32(16, true);
  }

  // 0x14: u32
  get Pool(): number {
    return this.view.getUint32(20, true);
  }

  // 0x18: u32
  get Format(): number {
    return this.view.getUint32(24, true);
  }

  // 0x1c: pad4

  // 0x00: u32
  set NumCompBuffers(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: u32
  set WidthToCreate(value: number) {
    this.view.setUint32(4, value, true);
  }

  // 0x08: u32
  set HeightToCreate(value: number) {
    this.view.setUint32(8, value, true);
  }

  // 0x0c: u32
  set BytesToAllocate(value: number) {
    this.view.setUint32(12, value, true);
  }

  // 0x10: u32
  set Usage(value: number) {
    this.view.setUint32(16, value, true);
  }

  // 0x14: u32
  set Pool(value: number) {
    this.view.setUint32(20, value, true);
  }

  // 0x18: u32
  set Format(value: number) {
    this.view.setUint32(24, value, true);
  }

  // 0x1c: pad4
}

/**
 * Windows.Win32.Media.MediaFoundation.DXVABufferInfo (size: 16)
 */
export interface DXVABufferInfo {
  /** ptr */
  pCompSurface: Deno.PointerValue | Uint8Array;
  /** u32 */
  DataOffset: number;
  /** u32 */
  DataSize: number;
}

export const sizeofDXVABufferInfo = 16;

export function allocDXVABufferInfo(data?: Partial<DXVABufferInfo>): Uint8Array {
  const buf = new Uint8Array(sizeofDXVABufferInfo);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.pCompSurface !== undefined) view.setBigUint64(0, data.pCompSurface === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.pCompSurface))), true);
  // 0x08: u32
  if (data?.DataOffset !== undefined) view.setUint32(8, Number(data.DataOffset), true);
  // 0x0c: u32
  if (data?.DataSize !== undefined) view.setUint32(12, Number(data.DataSize), true);
  return buf;
}

export class DXVABufferInfoView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get pCompSurface(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(0, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x08: u32
  get DataOffset(): number {
    return this.view.getUint32(8, true);
  }

  // 0x0c: u32
  get DataSize(): number {
    return this.view.getUint32(12, true);
  }

  // 0x00: pointer
  set pCompSurface(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(0, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x08: u32
  set DataOffset(value: number) {
    this.view.setUint32(8, value, true);
  }

  // 0x0c: u32
  set DataSize(value: number) {
    this.view.setUint32(12, value, true);
  }
}

/**
 * Windows.Win32.Media.MediaFoundation.DXVA_ExtendedFormat (size: 8)
 */
export interface DXVA_ExtendedFormat {
  /** u32 */
  _bitfield: number;
}

export const sizeofDXVA_ExtendedFormat = 8;

export function allocDXVA_ExtendedFormat(data?: Partial<DXVA_ExtendedFormat>): Uint8Array {
  const buf = new Uint8Array(sizeofDXVA_ExtendedFormat);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?._bitfield !== undefined) view.setUint32(0, Number(data._bitfield), true);
  // 0x04: pad4
  return buf;
}

export class DXVA_ExtendedFormatView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get _bitfield(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: pad4

  // 0x00: u32
  set _bitfield(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: pad4
}

/**
 * Windows.Win32.Media.MediaFoundation.DXVA_Frequency (size: 8)
 */
export interface DXVA_Frequency {
  /** u32 */
  Numerator: number;
  /** u32 */
  Denominator: number;
}

export const sizeofDXVA_Frequency = 8;

export function allocDXVA_Frequency(data?: Partial<DXVA_Frequency>): Uint8Array {
  const buf = new Uint8Array(sizeofDXVA_Frequency);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.Numerator !== undefined) view.setUint32(0, Number(data.Numerator), true);
  // 0x04: u32
  if (data?.Denominator !== undefined) view.setUint32(4, Number(data.Denominator), true);
  return buf;
}

export class DXVA_FrequencyView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get Numerator(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: u32
  get Denominator(): number {
    return this.view.getUint32(4, true);
  }

  // 0x00: u32
  set Numerator(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: u32
  set Denominator(value: number) {
    this.view.setUint32(4, value, true);
  }
}

/**
 * Windows.Win32.Media.MediaFoundation.DXVA_VideoDesc (size: 40)
 */
export interface DXVA_VideoDesc {
  /** u32 */
  Size: number;
  /** u32 */
  SampleWidth: number;
  /** u32 */
  SampleHeight: number;
  /** u32 */
  SampleFormat: number;
  /** Windows.Win32.Graphics.Direct3D9.D3DFORMAT */
  d3dFormat: D3DFORMAT;
  /** Windows.Win32.Media.MediaFoundation.DXVA_Frequency */
  InputSampleFreq: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.Media.MediaFoundation.DXVA_Frequency */
  OutputFrameFreq: Uint8Array | Deno.PointerValue;
}

export const sizeofDXVA_VideoDesc = 40;

export function allocDXVA_VideoDesc(data?: Partial<DXVA_VideoDesc>): Uint8Array {
  const buf = new Uint8Array(sizeofDXVA_VideoDesc);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.Size !== undefined) view.setUint32(0, Number(data.Size), true);
  // 0x04: u32
  if (data?.SampleWidth !== undefined) view.setUint32(4, Number(data.SampleWidth), true);
  // 0x08: u32
  if (data?.SampleHeight !== undefined) view.setUint32(8, Number(data.SampleHeight), true);
  // 0x0c: u32
  if (data?.SampleFormat !== undefined) view.setUint32(12, Number(data.SampleFormat), true);
  // 0x10: u32
  if (data?.d3dFormat !== undefined) view.setUint32(16, Number(data.d3dFormat), true);
  // 0x14: pad4
  // 0x18: pointer
  if (data?.InputSampleFreq !== undefined) view.setBigUint64(24, data.InputSampleFreq === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.InputSampleFreq))), true);
  // 0x20: pointer
  if (data?.OutputFrameFreq !== undefined) view.setBigUint64(32, data.OutputFrameFreq === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.OutputFrameFreq))), true);
  return buf;
}

export class DXVA_VideoDescView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get Size(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: u32
  get SampleWidth(): number {
    return this.view.getUint32(4, true);
  }

  // 0x08: u32
  get SampleHeight(): number {
    return this.view.getUint32(8, true);
  }

  // 0x0c: u32
  get SampleFormat(): number {
    return this.view.getUint32(12, true);
  }

  // 0x10: u32
  get d3dFormat(): number {
    return this.view.getUint32(16, true);
  }

  // 0x14: pad4

  // 0x18: pointer
  get InputSampleFreq(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(24, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x20: pointer
  get OutputFrameFreq(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(32, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: u32
  set Size(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: u32
  set SampleWidth(value: number) {
    this.view.setUint32(4, value, true);
  }

  // 0x08: u32
  set SampleHeight(value: number) {
    this.view.setUint32(8, value, true);
  }

  // 0x0c: u32
  set SampleFormat(value: number) {
    this.view.setUint32(12, value, true);
  }

  // 0x10: u32
  set d3dFormat(value: number) {
    this.view.setUint32(16, value, true);
  }

  // 0x14: pad4

  // 0x18: pointer
  set InputSampleFreq(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(24, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x20: pointer
  set OutputFrameFreq(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(32, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.Media.MediaFoundation.DXVA_VideoSample (size: 32)
 */
export interface DXVA_VideoSample {
  /** i64 */
  rtStart: bigint | number;
  /** i64 */
  rtEnd: bigint | number;
  /** Windows.Win32.Media.MediaFoundation.DXVA_SampleFormat */
  SampleFormat: DXVA_SampleFormat;
  /** ptr */
  lpDDSSrcSurface: Deno.PointerValue | Uint8Array;
}

export const sizeofDXVA_VideoSample = 32;

export function allocDXVA_VideoSample(data?: Partial<DXVA_VideoSample>): Uint8Array {
  const buf = new Uint8Array(sizeofDXVA_VideoSample);
  const view = new DataView(buf.buffer);
  // 0x00: i64
  if (data?.rtStart !== undefined) view.setBigInt64(0, BigInt(data.rtStart), true);
  // 0x08: i64
  if (data?.rtEnd !== undefined) view.setBigInt64(8, BigInt(data.rtEnd), true);
  // 0x10: i32
  if (data?.SampleFormat !== undefined) view.setInt32(16, Number(data.SampleFormat), true);
  // 0x14: pad4
  // 0x18: pointer
  if (data?.lpDDSSrcSurface !== undefined) view.setBigUint64(24, data.lpDDSSrcSurface === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.lpDDSSrcSurface))), true);
  return buf;
}

export class DXVA_VideoSampleView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: i64
  get rtStart(): bigint | number {
    return Number(this.view.getBigInt64(0, true));
  }

  // 0x08: i64
  get rtEnd(): bigint | number {
    return Number(this.view.getBigInt64(8, true));
  }

  // 0x10: i32
  get SampleFormat(): number {
    return this.view.getInt32(16, true);
  }

  // 0x14: pad4

  // 0x18: pointer
  get lpDDSSrcSurface(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(24, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: i64
  set rtStart(value: bigint | number) {
    this.view.setBigInt64(0, BigInt(value), true);
  }

  // 0x08: i64
  set rtEnd(value: bigint | number) {
    this.view.setBigInt64(8, BigInt(value), true);
  }

  // 0x10: i32
  set SampleFormat(value: number) {
    this.view.setInt32(16, value, true);
  }

  // 0x14: pad4

  // 0x18: pointer
  set lpDDSSrcSurface(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(24, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.Media.MediaFoundation.DXVA_DeinterlaceCaps (size: 32)
 */
export interface DXVA_DeinterlaceCaps {
  /** u32 */
  Size: number;
  /** u32 */
  NumPreviousOutputFrames: number;
  /** u32 */
  InputPool: number;
  /** u32 */
  NumForwardRefSamples: number;
  /** u32 */
  NumBackwardRefSamples: number;
  /** Windows.Win32.Graphics.Direct3D9.D3DFORMAT */
  d3dOutputFormat: D3DFORMAT;
  /** Windows.Win32.Media.MediaFoundation.DXVA_VideoProcessCaps */
  VideoProcessingCaps: DXVA_VideoProcessCaps;
  /** Windows.Win32.Media.MediaFoundation.DXVA_DeinterlaceTech */
  DeinterlaceTechnology: DXVA_DeinterlaceTech;
}

export const sizeofDXVA_DeinterlaceCaps = 32;

export function allocDXVA_DeinterlaceCaps(data?: Partial<DXVA_DeinterlaceCaps>): Uint8Array {
  const buf = new Uint8Array(sizeofDXVA_DeinterlaceCaps);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.Size !== undefined) view.setUint32(0, Number(data.Size), true);
  // 0x04: u32
  if (data?.NumPreviousOutputFrames !== undefined) view.setUint32(4, Number(data.NumPreviousOutputFrames), true);
  // 0x08: u32
  if (data?.InputPool !== undefined) view.setUint32(8, Number(data.InputPool), true);
  // 0x0c: u32
  if (data?.NumForwardRefSamples !== undefined) view.setUint32(12, Number(data.NumForwardRefSamples), true);
  // 0x10: u32
  if (data?.NumBackwardRefSamples !== undefined) view.setUint32(16, Number(data.NumBackwardRefSamples), true);
  // 0x14: u32
  if (data?.d3dOutputFormat !== undefined) view.setUint32(20, Number(data.d3dOutputFormat), true);
  // 0x18: i32
  if (data?.VideoProcessingCaps !== undefined) view.setInt32(24, Number(data.VideoProcessingCaps), true);
  // 0x1c: i32
  if (data?.DeinterlaceTechnology !== undefined) view.setInt32(28, Number(data.DeinterlaceTechnology), true);
  return buf;
}

export class DXVA_DeinterlaceCapsView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get Size(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: u32
  get NumPreviousOutputFrames(): number {
    return this.view.getUint32(4, true);
  }

  // 0x08: u32
  get InputPool(): number {
    return this.view.getUint32(8, true);
  }

  // 0x0c: u32
  get NumForwardRefSamples(): number {
    return this.view.getUint32(12, true);
  }

  // 0x10: u32
  get NumBackwardRefSamples(): number {
    return this.view.getUint32(16, true);
  }

  // 0x14: u32
  get d3dOutputFormat(): number {
    return this.view.getUint32(20, true);
  }

  // 0x18: i32
  get VideoProcessingCaps(): number {
    return this.view.getInt32(24, true);
  }

  // 0x1c: i32
  get DeinterlaceTechnology(): number {
    return this.view.getInt32(28, true);
  }

  // 0x00: u32
  set Size(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: u32
  set NumPreviousOutputFrames(value: number) {
    this.view.setUint32(4, value, true);
  }

  // 0x08: u32
  set InputPool(value: number) {
    this.view.setUint32(8, value, true);
  }

  // 0x0c: u32
  set NumForwardRefSamples(value: number) {
    this.view.setUint32(12, value, true);
  }

  // 0x10: u32
  set NumBackwardRefSamples(value: number) {
    this.view.setUint32(16, value, true);
  }

  // 0x14: u32
  set d3dOutputFormat(value: number) {
    this.view.setUint32(20, value, true);
  }

  // 0x18: i32
  set VideoProcessingCaps(value: number) {
    this.view.setInt32(24, value, true);
  }

  // 0x1c: i32
  set DeinterlaceTechnology(value: number) {
    this.view.setInt32(28, value, true);
  }
}

/**
 * Windows.Win32.Media.MediaFoundation.DXVA_DeinterlaceBlt (size: 48)
 */
export interface DXVA_DeinterlaceBlt {
  /** u32 */
  Size: number;
  /** u32 */
  Reserved: number;
  /** i64 */
  rtTarget: bigint | number;
  /** Windows.Win32.Foundation.RECT */
  DstRect: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.Foundation.RECT */
  SrcRect: Uint8Array | Deno.PointerValue;
  /** u32 */
  NumSourceSurfaces: number;
  /** f32 */
  Alpha: number;
  /** array */
  Source: Deno.PointerValue;
}

export const sizeofDXVA_DeinterlaceBlt = 48;

export function allocDXVA_DeinterlaceBlt(data?: Partial<DXVA_DeinterlaceBlt>): Uint8Array {
  const buf = new Uint8Array(sizeofDXVA_DeinterlaceBlt);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.Size !== undefined) view.setUint32(0, Number(data.Size), true);
  // 0x04: u32
  if (data?.Reserved !== undefined) view.setUint32(4, Number(data.Reserved), true);
  // 0x08: i64
  if (data?.rtTarget !== undefined) view.setBigInt64(8, BigInt(data.rtTarget), true);
  // 0x10: pointer
  if (data?.DstRect !== undefined) view.setBigUint64(16, data.DstRect === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.DstRect))), true);
  // 0x18: pointer
  if (data?.SrcRect !== undefined) view.setBigUint64(24, data.SrcRect === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.SrcRect))), true);
  // 0x20: u32
  if (data?.NumSourceSurfaces !== undefined) view.setUint32(32, Number(data.NumSourceSurfaces), true);
  // 0x24: f32
  if (data?.Alpha !== undefined) view.setFloat32(36, Number(data.Alpha), true);
  // 0x28: pointer
  if (data?.Source !== undefined) view.setBigUint64(40, data.Source === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.Source))), true);
  return buf;
}

export class DXVA_DeinterlaceBltView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get Size(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: u32
  get Reserved(): number {
    return this.view.getUint32(4, true);
  }

  // 0x08: i64
  get rtTarget(): bigint | number {
    return Number(this.view.getBigInt64(8, true));
  }

  // 0x10: pointer
  get DstRect(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(16, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x18: pointer
  get SrcRect(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(24, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x20: u32
  get NumSourceSurfaces(): number {
    return this.view.getUint32(32, true);
  }

  // 0x24: f32
  get Alpha(): number {
    return this.view.getFloat32(36, true);
  }

  // 0x28: pointer
  get Source(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(40, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: u32
  set Size(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: u32
  set Reserved(value: number) {
    this.view.setUint32(4, value, true);
  }

  // 0x08: i64
  set rtTarget(value: bigint | number) {
    this.view.setBigInt64(8, BigInt(value), true);
  }

  // 0x10: pointer
  set DstRect(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(16, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x18: pointer
  set SrcRect(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(24, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x20: u32
  set NumSourceSurfaces(value: number) {
    this.view.setUint32(32, value, true);
  }

  // 0x24: f32
  set Alpha(value: number) {
    this.view.setFloat32(36, value, true);
  }

  // 0x28: pointer
  set Source(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(40, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.Media.MediaFoundation.DXVA_DeinterlaceBltEx (size: 56)
 */
export interface DXVA_DeinterlaceBltEx {
  /** u32 */
  Size: number;
  /** Windows.Win32.Media.MediaFoundation.DXVA_AYUVsample2 */
  BackgroundColor: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.Foundation.RECT */
  rcTarget: Uint8Array | Deno.PointerValue;
  /** i64 */
  rtTarget: bigint | number;
  /** u32 */
  NumSourceSurfaces: number;
  /** f32 */
  Alpha: number;
  /** array */
  Source: Deno.PointerValue;
  /** u32 */
  DestinationFormat: number;
  /** u32 */
  DestinationFlags: number;
}

export const sizeofDXVA_DeinterlaceBltEx = 56;

export function allocDXVA_DeinterlaceBltEx(data?: Partial<DXVA_DeinterlaceBltEx>): Uint8Array {
  const buf = new Uint8Array(sizeofDXVA_DeinterlaceBltEx);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.Size !== undefined) view.setUint32(0, Number(data.Size), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.BackgroundColor !== undefined) view.setBigUint64(8, data.BackgroundColor === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.BackgroundColor))), true);
  // 0x10: pointer
  if (data?.rcTarget !== undefined) view.setBigUint64(16, data.rcTarget === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.rcTarget))), true);
  // 0x18: i64
  if (data?.rtTarget !== undefined) view.setBigInt64(24, BigInt(data.rtTarget), true);
  // 0x20: u32
  if (data?.NumSourceSurfaces !== undefined) view.setUint32(32, Number(data.NumSourceSurfaces), true);
  // 0x24: f32
  if (data?.Alpha !== undefined) view.setFloat32(36, Number(data.Alpha), true);
  // 0x28: pointer
  if (data?.Source !== undefined) view.setBigUint64(40, data.Source === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.Source))), true);
  // 0x30: u32
  if (data?.DestinationFormat !== undefined) view.setUint32(48, Number(data.DestinationFormat), true);
  // 0x34: u32
  if (data?.DestinationFlags !== undefined) view.setUint32(52, Number(data.DestinationFlags), true);
  return buf;
}

export class DXVA_DeinterlaceBltExView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get Size(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  get BackgroundColor(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x10: pointer
  get rcTarget(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(16, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x18: i64
  get rtTarget(): bigint | number {
    return Number(this.view.getBigInt64(24, true));
  }

  // 0x20: u32
  get NumSourceSurfaces(): number {
    return this.view.getUint32(32, true);
  }

  // 0x24: f32
  get Alpha(): number {
    return this.view.getFloat32(36, true);
  }

  // 0x28: pointer
  get Source(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(40, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x30: u32
  get DestinationFormat(): number {
    return this.view.getUint32(48, true);
  }

  // 0x34: u32
  get DestinationFlags(): number {
    return this.view.getUint32(52, true);
  }

  // 0x00: u32
  set Size(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  set BackgroundColor(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x10: pointer
  set rcTarget(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(16, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x18: i64
  set rtTarget(value: bigint | number) {
    this.view.setBigInt64(24, BigInt(value), true);
  }

  // 0x20: u32
  set NumSourceSurfaces(value: number) {
    this.view.setUint32(32, value, true);
  }

  // 0x24: f32
  set Alpha(value: number) {
    this.view.setFloat32(36, value, true);
  }

  // 0x28: pointer
  set Source(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(40, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x30: u32
  set DestinationFormat(value: number) {
    this.view.setUint32(48, value, true);
  }

  // 0x34: u32
  set DestinationFlags(value: number) {
    this.view.setUint32(52, value, true);
  }
}

/**
 * Windows.Win32.Media.MediaFoundation.DXVA_DeinterlaceQueryAvailableModes (size: 16)
 */
export interface DXVA_DeinterlaceQueryAvailableModes {
  /** u32 */
  Size: number;
  /** u32 */
  NumGuids: number;
  /** array */
  Guids: Deno.PointerValue;
}

export const sizeofDXVA_DeinterlaceQueryAvailableModes = 16;

export function allocDXVA_DeinterlaceQueryAvailableModes(data?: Partial<DXVA_DeinterlaceQueryAvailableModes>): Uint8Array {
  const buf = new Uint8Array(sizeofDXVA_DeinterlaceQueryAvailableModes);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.Size !== undefined) view.setUint32(0, Number(data.Size), true);
  // 0x04: u32
  if (data?.NumGuids !== undefined) view.setUint32(4, Number(data.NumGuids), true);
  // 0x08: pointer
  if (data?.Guids !== undefined) view.setBigUint64(8, data.Guids === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.Guids))), true);
  return buf;
}

export class DXVA_DeinterlaceQueryAvailableModesView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get Size(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: u32
  get NumGuids(): number {
    return this.view.getUint32(4, true);
  }

  // 0x08: pointer
  get Guids(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: u32
  set Size(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: u32
  set NumGuids(value: number) {
    this.view.setUint32(4, value, true);
  }

  // 0x08: pointer
  set Guids(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.Media.MediaFoundation.DXVA_DeinterlaceQueryModeCaps (size: 24)
 */
export interface DXVA_DeinterlaceQueryModeCaps {
  /** u32 */
  Size: number;
  /** System.Guid */
  Guid: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.Media.MediaFoundation.DXVA_VideoDesc */
  VideoDesc: Uint8Array | Deno.PointerValue;
}

export const sizeofDXVA_DeinterlaceQueryModeCaps = 24;

export function allocDXVA_DeinterlaceQueryModeCaps(data?: Partial<DXVA_DeinterlaceQueryModeCaps>): Uint8Array {
  const buf = new Uint8Array(sizeofDXVA_DeinterlaceQueryModeCaps);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.Size !== undefined) view.setUint32(0, Number(data.Size), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.Guid !== undefined) view.setBigUint64(8, data.Guid === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.Guid))), true);
  // 0x10: pointer
  if (data?.VideoDesc !== undefined) view.setBigUint64(16, data.VideoDesc === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.VideoDesc))), true);
  return buf;
}

export class DXVA_DeinterlaceQueryModeCapsView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get Size(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  get Guid(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x10: pointer
  get VideoDesc(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(16, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: u32
  set Size(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  set Guid(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x10: pointer
  set VideoDesc(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(16, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.Media.MediaFoundation.DXVA_ProcAmpControlCaps (size: 24)
 */
export interface DXVA_ProcAmpControlCaps {
  /** u32 */
  Size: number;
  /** u32 */
  InputPool: number;
  /** Windows.Win32.Graphics.Direct3D9.D3DFORMAT */
  d3dOutputFormat: D3DFORMAT;
  /** u32 */
  ProcAmpControlProps: number;
  /** u32 */
  VideoProcessingCaps: number;
}

export const sizeofDXVA_ProcAmpControlCaps = 24;

export function allocDXVA_ProcAmpControlCaps(data?: Partial<DXVA_ProcAmpControlCaps>): Uint8Array {
  const buf = new Uint8Array(sizeofDXVA_ProcAmpControlCaps);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.Size !== undefined) view.setUint32(0, Number(data.Size), true);
  // 0x04: u32
  if (data?.InputPool !== undefined) view.setUint32(4, Number(data.InputPool), true);
  // 0x08: u32
  if (data?.d3dOutputFormat !== undefined) view.setUint32(8, Number(data.d3dOutputFormat), true);
  // 0x0c: u32
  if (data?.ProcAmpControlProps !== undefined) view.setUint32(12, Number(data.ProcAmpControlProps), true);
  // 0x10: u32
  if (data?.VideoProcessingCaps !== undefined) view.setUint32(16, Number(data.VideoProcessingCaps), true);
  // 0x14: pad4
  return buf;
}

export class DXVA_ProcAmpControlCapsView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get Size(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: u32
  get InputPool(): number {
    return this.view.getUint32(4, true);
  }

  // 0x08: u32
  get d3dOutputFormat(): number {
    return this.view.getUint32(8, true);
  }

  // 0x0c: u32
  get ProcAmpControlProps(): number {
    return this.view.getUint32(12, true);
  }

  // 0x10: u32
  get VideoProcessingCaps(): number {
    return this.view.getUint32(16, true);
  }

  // 0x14: pad4

  // 0x00: u32
  set Size(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: u32
  set InputPool(value: number) {
    this.view.setUint32(4, value, true);
  }

  // 0x08: u32
  set d3dOutputFormat(value: number) {
    this.view.setUint32(8, value, true);
  }

  // 0x0c: u32
  set ProcAmpControlProps(value: number) {
    this.view.setUint32(12, value, true);
  }

  // 0x10: u32
  set VideoProcessingCaps(value: number) {
    this.view.setUint32(16, value, true);
  }

  // 0x14: pad4
}

/**
 * Windows.Win32.Media.MediaFoundation.DXVA_ProcAmpControlQueryRange (size: 16)
 */
export interface DXVA_ProcAmpControlQueryRange {
  /** u32 */
  Size: number;
  /** Windows.Win32.Media.MediaFoundation.DXVA_ProcAmpControlProp */
  ProcAmpControlProp: DXVA_ProcAmpControlProp;
  /** Windows.Win32.Media.MediaFoundation.DXVA_VideoDesc */
  VideoDesc: Uint8Array | Deno.PointerValue;
}

export const sizeofDXVA_ProcAmpControlQueryRange = 16;

export function allocDXVA_ProcAmpControlQueryRange(data?: Partial<DXVA_ProcAmpControlQueryRange>): Uint8Array {
  const buf = new Uint8Array(sizeofDXVA_ProcAmpControlQueryRange);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.Size !== undefined) view.setUint32(0, Number(data.Size), true);
  // 0x04: i32
  if (data?.ProcAmpControlProp !== undefined) view.setInt32(4, Number(data.ProcAmpControlProp), true);
  // 0x08: pointer
  if (data?.VideoDesc !== undefined) view.setBigUint64(8, data.VideoDesc === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.VideoDesc))), true);
  return buf;
}

export class DXVA_ProcAmpControlQueryRangeView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get Size(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: i32
  get ProcAmpControlProp(): number {
    return this.view.getInt32(4, true);
  }

  // 0x08: pointer
  get VideoDesc(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: u32
  set Size(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: i32
  set ProcAmpControlProp(value: number) {
    this.view.setInt32(4, value, true);
  }

  // 0x08: pointer
  set VideoDesc(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.Media.MediaFoundation.DXVA_VideoPropertyRange (size: 16)
 */
export interface DXVA_VideoPropertyRange {
  /** f32 */
  MinValue: number;
  /** f32 */
  MaxValue: number;
  /** f32 */
  DefaultValue: number;
  /** f32 */
  StepSize: number;
}

export const sizeofDXVA_VideoPropertyRange = 16;

export function allocDXVA_VideoPropertyRange(data?: Partial<DXVA_VideoPropertyRange>): Uint8Array {
  const buf = new Uint8Array(sizeofDXVA_VideoPropertyRange);
  const view = new DataView(buf.buffer);
  // 0x00: f32
  if (data?.MinValue !== undefined) view.setFloat32(0, Number(data.MinValue), true);
  // 0x04: f32
  if (data?.MaxValue !== undefined) view.setFloat32(4, Number(data.MaxValue), true);
  // 0x08: f32
  if (data?.DefaultValue !== undefined) view.setFloat32(8, Number(data.DefaultValue), true);
  // 0x0c: f32
  if (data?.StepSize !== undefined) view.setFloat32(12, Number(data.StepSize), true);
  return buf;
}

export class DXVA_VideoPropertyRangeView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: f32
  get MinValue(): number {
    return this.view.getFloat32(0, true);
  }

  // 0x04: f32
  get MaxValue(): number {
    return this.view.getFloat32(4, true);
  }

  // 0x08: f32
  get DefaultValue(): number {
    return this.view.getFloat32(8, true);
  }

  // 0x0c: f32
  get StepSize(): number {
    return this.view.getFloat32(12, true);
  }

  // 0x00: f32
  set MinValue(value: number) {
    this.view.setFloat32(0, value, true);
  }

  // 0x04: f32
  set MaxValue(value: number) {
    this.view.setFloat32(4, value, true);
  }

  // 0x08: f32
  set DefaultValue(value: number) {
    this.view.setFloat32(8, value, true);
  }

  // 0x0c: f32
  set StepSize(value: number) {
    this.view.setFloat32(12, value, true);
  }
}

/**
 * Windows.Win32.Media.MediaFoundation.DXVA_ProcAmpControlBlt (size: 48)
 */
export interface DXVA_ProcAmpControlBlt {
  /** u32 */
  Size: number;
  /** Windows.Win32.Foundation.RECT */
  DstRect: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.Foundation.RECT */
  SrcRect: Uint8Array | Deno.PointerValue;
  /** f32 */
  Alpha: number;
  /** f32 */
  Brightness: number;
  /** f32 */
  Contrast: number;
  /** f32 */
  Hue: number;
  /** f32 */
  Saturation: number;
}

export const sizeofDXVA_ProcAmpControlBlt = 48;

export function allocDXVA_ProcAmpControlBlt(data?: Partial<DXVA_ProcAmpControlBlt>): Uint8Array {
  const buf = new Uint8Array(sizeofDXVA_ProcAmpControlBlt);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.Size !== undefined) view.setUint32(0, Number(data.Size), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.DstRect !== undefined) view.setBigUint64(8, data.DstRect === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.DstRect))), true);
  // 0x10: pointer
  if (data?.SrcRect !== undefined) view.setBigUint64(16, data.SrcRect === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.SrcRect))), true);
  // 0x18: f32
  if (data?.Alpha !== undefined) view.setFloat32(24, Number(data.Alpha), true);
  // 0x1c: f32
  if (data?.Brightness !== undefined) view.setFloat32(28, Number(data.Brightness), true);
  // 0x20: f32
  if (data?.Contrast !== undefined) view.setFloat32(32, Number(data.Contrast), true);
  // 0x24: f32
  if (data?.Hue !== undefined) view.setFloat32(36, Number(data.Hue), true);
  // 0x28: f32
  if (data?.Saturation !== undefined) view.setFloat32(40, Number(data.Saturation), true);
  // 0x2c: pad4
  return buf;
}

export class DXVA_ProcAmpControlBltView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get Size(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  get DstRect(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x10: pointer
  get SrcRect(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(16, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x18: f32
  get Alpha(): number {
    return this.view.getFloat32(24, true);
  }

  // 0x1c: f32
  get Brightness(): number {
    return this.view.getFloat32(28, true);
  }

  // 0x20: f32
  get Contrast(): number {
    return this.view.getFloat32(32, true);
  }

  // 0x24: f32
  get Hue(): number {
    return this.view.getFloat32(36, true);
  }

  // 0x28: f32
  get Saturation(): number {
    return this.view.getFloat32(40, true);
  }

  // 0x2c: pad4

  // 0x00: u32
  set Size(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  set DstRect(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x10: pointer
  set SrcRect(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(16, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x18: f32
  set Alpha(value: number) {
    this.view.setFloat32(24, value, true);
  }

  // 0x1c: f32
  set Brightness(value: number) {
    this.view.setFloat32(28, value, true);
  }

  // 0x20: f32
  set Contrast(value: number) {
    this.view.setFloat32(32, value, true);
  }

  // 0x24: f32
  set Hue(value: number) {
    this.view.setFloat32(36, value, true);
  }

  // 0x28: f32
  set Saturation(value: number) {
    this.view.setFloat32(40, value, true);
  }

  // 0x2c: pad4
}

/**
 * Windows.Win32.Media.MediaFoundation.DXVA_COPPSignature (size: 8)
 */
export interface DXVA_COPPSignature {
  /** array */
  Signature: Deno.PointerValue;
}

export const sizeofDXVA_COPPSignature = 8;

export function allocDXVA_COPPSignature(data?: Partial<DXVA_COPPSignature>): Uint8Array {
  const buf = new Uint8Array(sizeofDXVA_COPPSignature);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.Signature !== undefined) view.setBigUint64(0, data.Signature === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.Signature))), true);
  return buf;
}

export class DXVA_COPPSignatureView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get Signature(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(0, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: pointer
  set Signature(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(0, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.Media.MediaFoundation.DXVA_COPPCommand (size: 32)
 */
export interface DXVA_COPPCommand {
  /** System.Guid */
  macKDI: Uint8Array | Deno.PointerValue;
  /** System.Guid */
  guidCommandID: Uint8Array | Deno.PointerValue;
  /** u32 */
  dwSequence: number;
  /** u32 */
  cbSizeData: number;
  /** array */
  CommandData: Deno.PointerValue;
}

export const sizeofDXVA_COPPCommand = 32;

export function allocDXVA_COPPCommand(data?: Partial<DXVA_COPPCommand>): Uint8Array {
  const buf = new Uint8Array(sizeofDXVA_COPPCommand);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.macKDI !== undefined) view.setBigUint64(0, data.macKDI === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.macKDI))), true);
  // 0x08: pointer
  if (data?.guidCommandID !== undefined) view.setBigUint64(8, data.guidCommandID === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.guidCommandID))), true);
  // 0x10: u32
  if (data?.dwSequence !== undefined) view.setUint32(16, Number(data.dwSequence), true);
  // 0x14: u32
  if (data?.cbSizeData !== undefined) view.setUint32(20, Number(data.cbSizeData), true);
  // 0x18: pointer
  if (data?.CommandData !== undefined) view.setBigUint64(24, data.CommandData === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.CommandData))), true);
  return buf;
}

export class DXVA_COPPCommandView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get macKDI(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(0, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x08: pointer
  get guidCommandID(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x10: u32
  get dwSequence(): number {
    return this.view.getUint32(16, true);
  }

  // 0x14: u32
  get cbSizeData(): number {
    return this.view.getUint32(20, true);
  }

  // 0x18: pointer
  get CommandData(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(24, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: pointer
  set macKDI(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(0, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x08: pointer
  set guidCommandID(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x10: u32
  set dwSequence(value: number) {
    this.view.setUint32(16, value, true);
  }

  // 0x14: u32
  set cbSizeData(value: number) {
    this.view.setUint32(20, value, true);
  }

  // 0x18: pointer
  set CommandData(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(24, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.Media.MediaFoundation.DXVA_COPPStatusInput (size: 32)
 */
export interface DXVA_COPPStatusInput {
  /** System.Guid */
  rApp: Uint8Array | Deno.PointerValue;
  /** System.Guid */
  guidStatusRequestID: Uint8Array | Deno.PointerValue;
  /** u32 */
  dwSequence: number;
  /** u32 */
  cbSizeData: number;
  /** array */
  StatusData: Deno.PointerValue;
}

export const sizeofDXVA_COPPStatusInput = 32;

export function allocDXVA_COPPStatusInput(data?: Partial<DXVA_COPPStatusInput>): Uint8Array {
  const buf = new Uint8Array(sizeofDXVA_COPPStatusInput);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.rApp !== undefined) view.setBigUint64(0, data.rApp === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.rApp))), true);
  // 0x08: pointer
  if (data?.guidStatusRequestID !== undefined) view.setBigUint64(8, data.guidStatusRequestID === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.guidStatusRequestID))), true);
  // 0x10: u32
  if (data?.dwSequence !== undefined) view.setUint32(16, Number(data.dwSequence), true);
  // 0x14: u32
  if (data?.cbSizeData !== undefined) view.setUint32(20, Number(data.cbSizeData), true);
  // 0x18: pointer
  if (data?.StatusData !== undefined) view.setBigUint64(24, data.StatusData === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.StatusData))), true);
  return buf;
}

export class DXVA_COPPStatusInputView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get rApp(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(0, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x08: pointer
  get guidStatusRequestID(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x10: u32
  get dwSequence(): number {
    return this.view.getUint32(16, true);
  }

  // 0x14: u32
  get cbSizeData(): number {
    return this.view.getUint32(20, true);
  }

  // 0x18: pointer
  get StatusData(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(24, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: pointer
  set rApp(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(0, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x08: pointer
  set guidStatusRequestID(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x10: u32
  set dwSequence(value: number) {
    this.view.setUint32(16, value, true);
  }

  // 0x14: u32
  set cbSizeData(value: number) {
    this.view.setUint32(20, value, true);
  }

  // 0x18: pointer
  set StatusData(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(24, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.Media.MediaFoundation.DXVA_COPPStatusOutput (size: 24)
 */
export interface DXVA_COPPStatusOutput {
  /** System.Guid */
  macKDI: Uint8Array | Deno.PointerValue;
  /** u32 */
  cbSizeData: number;
  /** array */
  COPPStatus: Deno.PointerValue;
}

export const sizeofDXVA_COPPStatusOutput = 24;

export function allocDXVA_COPPStatusOutput(data?: Partial<DXVA_COPPStatusOutput>): Uint8Array {
  const buf = new Uint8Array(sizeofDXVA_COPPStatusOutput);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.macKDI !== undefined) view.setBigUint64(0, data.macKDI === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.macKDI))), true);
  // 0x08: u32
  if (data?.cbSizeData !== undefined) view.setUint32(8, Number(data.cbSizeData), true);
  // 0x0c: pad4
  // 0x10: pointer
  if (data?.COPPStatus !== undefined) view.setBigUint64(16, data.COPPStatus === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.COPPStatus))), true);
  return buf;
}

export class DXVA_COPPStatusOutputView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get macKDI(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(0, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x08: u32
  get cbSizeData(): number {
    return this.view.getUint32(8, true);
  }

  // 0x0c: pad4

  // 0x10: pointer
  get COPPStatus(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(16, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: pointer
  set macKDI(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(0, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x08: u32
  set cbSizeData(value: number) {
    this.view.setUint32(8, value, true);
  }

  // 0x0c: pad4

  // 0x10: pointer
  set COPPStatus(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(16, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.Media.MediaFoundation.DXVAHD_RATIONAL (size: 8)
 */
export interface DXVAHD_RATIONAL {
  /** u32 */
  Numerator: number;
  /** u32 */
  Denominator: number;
}

export const sizeofDXVAHD_RATIONAL = 8;

export function allocDXVAHD_RATIONAL(data?: Partial<DXVAHD_RATIONAL>): Uint8Array {
  const buf = new Uint8Array(sizeofDXVAHD_RATIONAL);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.Numerator !== undefined) view.setUint32(0, Number(data.Numerator), true);
  // 0x04: u32
  if (data?.Denominator !== undefined) view.setUint32(4, Number(data.Denominator), true);
  return buf;
}

export class DXVAHD_RATIONALView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get Numerator(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: u32
  get Denominator(): number {
    return this.view.getUint32(4, true);
  }

  // 0x00: u32
  set Numerator(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: u32
  set Denominator(value: number) {
    this.view.setUint32(4, value, true);
  }
}

/**
 * Windows.Win32.Media.MediaFoundation.DXVAHD_COLOR_RGBA (size: 16)
 */
export interface DXVAHD_COLOR_RGBA {
  /** f32 */
  R: number;
  /** f32 */
  G: number;
  /** f32 */
  B: number;
  /** f32 */
  A: number;
}

export const sizeofDXVAHD_COLOR_RGBA = 16;

export function allocDXVAHD_COLOR_RGBA(data?: Partial<DXVAHD_COLOR_RGBA>): Uint8Array {
  const buf = new Uint8Array(sizeofDXVAHD_COLOR_RGBA);
  const view = new DataView(buf.buffer);
  // 0x00: f32
  if (data?.R !== undefined) view.setFloat32(0, Number(data.R), true);
  // 0x04: f32
  if (data?.G !== undefined) view.setFloat32(4, Number(data.G), true);
  // 0x08: f32
  if (data?.B !== undefined) view.setFloat32(8, Number(data.B), true);
  // 0x0c: f32
  if (data?.A !== undefined) view.setFloat32(12, Number(data.A), true);
  return buf;
}

export class DXVAHD_COLOR_RGBAView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: f32
  get R(): number {
    return this.view.getFloat32(0, true);
  }

  // 0x04: f32
  get G(): number {
    return this.view.getFloat32(4, true);
  }

  // 0x08: f32
  get B(): number {
    return this.view.getFloat32(8, true);
  }

  // 0x0c: f32
  get A(): number {
    return this.view.getFloat32(12, true);
  }

  // 0x00: f32
  set R(value: number) {
    this.view.setFloat32(0, value, true);
  }

  // 0x04: f32
  set G(value: number) {
    this.view.setFloat32(4, value, true);
  }

  // 0x08: f32
  set B(value: number) {
    this.view.setFloat32(8, value, true);
  }

  // 0x0c: f32
  set A(value: number) {
    this.view.setFloat32(12, value, true);
  }
}

/**
 * Windows.Win32.Media.MediaFoundation.DXVAHD_COLOR_YCbCrA (size: 16)
 */
export interface DXVAHD_COLOR_YCbCrA {
  /** f32 */
  Y: number;
  /** f32 */
  Cb: number;
  /** f32 */
  Cr: number;
  /** f32 */
  A: number;
}

export const sizeofDXVAHD_COLOR_YCbCrA = 16;

export function allocDXVAHD_COLOR_YCbCrA(data?: Partial<DXVAHD_COLOR_YCbCrA>): Uint8Array {
  const buf = new Uint8Array(sizeofDXVAHD_COLOR_YCbCrA);
  const view = new DataView(buf.buffer);
  // 0x00: f32
  if (data?.Y !== undefined) view.setFloat32(0, Number(data.Y), true);
  // 0x04: f32
  if (data?.Cb !== undefined) view.setFloat32(4, Number(data.Cb), true);
  // 0x08: f32
  if (data?.Cr !== undefined) view.setFloat32(8, Number(data.Cr), true);
  // 0x0c: f32
  if (data?.A !== undefined) view.setFloat32(12, Number(data.A), true);
  return buf;
}

export class DXVAHD_COLOR_YCbCrAView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: f32
  get Y(): number {
    return this.view.getFloat32(0, true);
  }

  // 0x04: f32
  get Cb(): number {
    return this.view.getFloat32(4, true);
  }

  // 0x08: f32
  get Cr(): number {
    return this.view.getFloat32(8, true);
  }

  // 0x0c: f32
  get A(): number {
    return this.view.getFloat32(12, true);
  }

  // 0x00: f32
  set Y(value: number) {
    this.view.setFloat32(0, value, true);
  }

  // 0x04: f32
  set Cb(value: number) {
    this.view.setFloat32(4, value, true);
  }

  // 0x08: f32
  set Cr(value: number) {
    this.view.setFloat32(8, value, true);
  }

  // 0x0c: f32
  set A(value: number) {
    this.view.setFloat32(12, value, true);
  }
}

/**
 * Windows.Win32.Media.MediaFoundation.DXVAHD_COLOR (size: 16)
 */
export interface DXVAHD_COLOR {
  /** Windows.Win32.Media.MediaFoundation.DXVAHD_COLOR_RGBA */
  RGB: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.Media.MediaFoundation.DXVAHD_COLOR_YCbCrA */
  YCbCr: Uint8Array | Deno.PointerValue;
}

export const sizeofDXVAHD_COLOR = 16;

export function allocDXVAHD_COLOR(data?: Partial<DXVAHD_COLOR>): Uint8Array {
  const buf = new Uint8Array(sizeofDXVAHD_COLOR);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.RGB !== undefined) view.setBigUint64(0, data.RGB === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.RGB))), true);
  // 0x08: pointer
  if (data?.YCbCr !== undefined) view.setBigUint64(8, data.YCbCr === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.YCbCr))), true);
  return buf;
}

export class DXVAHD_COLORView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get RGB(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(0, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x08: pointer
  get YCbCr(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: pointer
  set RGB(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(0, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x08: pointer
  set YCbCr(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.Media.MediaFoundation.DXVAHD_CONTENT_DESC (size: 40)
 */
export interface DXVAHD_CONTENT_DESC {
  /** Windows.Win32.Media.MediaFoundation.DXVAHD_FRAME_FORMAT */
  InputFrameFormat: DXVAHD_FRAME_FORMAT;
  /** Windows.Win32.Media.MediaFoundation.DXVAHD_RATIONAL */
  InputFrameRate: Uint8Array | Deno.PointerValue;
  /** u32 */
  InputWidth: number;
  /** u32 */
  InputHeight: number;
  /** Windows.Win32.Media.MediaFoundation.DXVAHD_RATIONAL */
  OutputFrameRate: Uint8Array | Deno.PointerValue;
  /** u32 */
  OutputWidth: number;
  /** u32 */
  OutputHeight: number;
}

export const sizeofDXVAHD_CONTENT_DESC = 40;

export function allocDXVAHD_CONTENT_DESC(data?: Partial<DXVAHD_CONTENT_DESC>): Uint8Array {
  const buf = new Uint8Array(sizeofDXVAHD_CONTENT_DESC);
  const view = new DataView(buf.buffer);
  // 0x00: i32
  if (data?.InputFrameFormat !== undefined) view.setInt32(0, Number(data.InputFrameFormat), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.InputFrameRate !== undefined) view.setBigUint64(8, data.InputFrameRate === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.InputFrameRate))), true);
  // 0x10: u32
  if (data?.InputWidth !== undefined) view.setUint32(16, Number(data.InputWidth), true);
  // 0x14: u32
  if (data?.InputHeight !== undefined) view.setUint32(20, Number(data.InputHeight), true);
  // 0x18: pointer
  if (data?.OutputFrameRate !== undefined) view.setBigUint64(24, data.OutputFrameRate === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.OutputFrameRate))), true);
  // 0x20: u32
  if (data?.OutputWidth !== undefined) view.setUint32(32, Number(data.OutputWidth), true);
  // 0x24: u32
  if (data?.OutputHeight !== undefined) view.setUint32(36, Number(data.OutputHeight), true);
  return buf;
}

export class DXVAHD_CONTENT_DESCView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: i32
  get InputFrameFormat(): number {
    return this.view.getInt32(0, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  get InputFrameRate(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x10: u32
  get InputWidth(): number {
    return this.view.getUint32(16, true);
  }

  // 0x14: u32
  get InputHeight(): number {
    return this.view.getUint32(20, true);
  }

  // 0x18: pointer
  get OutputFrameRate(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(24, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x20: u32
  get OutputWidth(): number {
    return this.view.getUint32(32, true);
  }

  // 0x24: u32
  get OutputHeight(): number {
    return this.view.getUint32(36, true);
  }

  // 0x00: i32
  set InputFrameFormat(value: number) {
    this.view.setInt32(0, value, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  set InputFrameRate(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x10: u32
  set InputWidth(value: number) {
    this.view.setUint32(16, value, true);
  }

  // 0x14: u32
  set InputHeight(value: number) {
    this.view.setUint32(20, value, true);
  }

  // 0x18: pointer
  set OutputFrameRate(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(24, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x20: u32
  set OutputWidth(value: number) {
    this.view.setUint32(32, value, true);
  }

  // 0x24: u32
  set OutputHeight(value: number) {
    this.view.setUint32(36, value, true);
  }
}

/**
 * Windows.Win32.Media.MediaFoundation.DXVAHD_VPDEVCAPS (size: 48)
 */
export interface DXVAHD_VPDEVCAPS {
  /** Windows.Win32.Media.MediaFoundation.DXVAHD_DEVICE_TYPE */
  DeviceType: DXVAHD_DEVICE_TYPE;
  /** u32 */
  DeviceCaps: number;
  /** u32 */
  FeatureCaps: number;
  /** u32 */
  FilterCaps: number;
  /** u32 */
  InputFormatCaps: number;
  /** Windows.Win32.Graphics.Direct3D9.D3DPOOL */
  InputPool: D3DPOOL;
  /** u32 */
  OutputFormatCount: number;
  /** u32 */
  InputFormatCount: number;
  /** u32 */
  VideoProcessorCount: number;
  /** u32 */
  MaxInputStreams: number;
  /** u32 */
  MaxStreamStates: number;
}

export const sizeofDXVAHD_VPDEVCAPS = 48;

export function allocDXVAHD_VPDEVCAPS(data?: Partial<DXVAHD_VPDEVCAPS>): Uint8Array {
  const buf = new Uint8Array(sizeofDXVAHD_VPDEVCAPS);
  const view = new DataView(buf.buffer);
  // 0x00: i32
  if (data?.DeviceType !== undefined) view.setInt32(0, Number(data.DeviceType), true);
  // 0x04: u32
  if (data?.DeviceCaps !== undefined) view.setUint32(4, Number(data.DeviceCaps), true);
  // 0x08: u32
  if (data?.FeatureCaps !== undefined) view.setUint32(8, Number(data.FeatureCaps), true);
  // 0x0c: u32
  if (data?.FilterCaps !== undefined) view.setUint32(12, Number(data.FilterCaps), true);
  // 0x10: u32
  if (data?.InputFormatCaps !== undefined) view.setUint32(16, Number(data.InputFormatCaps), true);
  // 0x14: u32
  if (data?.InputPool !== undefined) view.setUint32(20, Number(data.InputPool), true);
  // 0x18: u32
  if (data?.OutputFormatCount !== undefined) view.setUint32(24, Number(data.OutputFormatCount), true);
  // 0x1c: u32
  if (data?.InputFormatCount !== undefined) view.setUint32(28, Number(data.InputFormatCount), true);
  // 0x20: u32
  if (data?.VideoProcessorCount !== undefined) view.setUint32(32, Number(data.VideoProcessorCount), true);
  // 0x24: u32
  if (data?.MaxInputStreams !== undefined) view.setUint32(36, Number(data.MaxInputStreams), true);
  // 0x28: u32
  if (data?.MaxStreamStates !== undefined) view.setUint32(40, Number(data.MaxStreamStates), true);
  // 0x2c: pad4
  return buf;
}

export class DXVAHD_VPDEVCAPSView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: i32
  get DeviceType(): number {
    return this.view.getInt32(0, true);
  }

  // 0x04: u32
  get DeviceCaps(): number {
    return this.view.getUint32(4, true);
  }

  // 0x08: u32
  get FeatureCaps(): number {
    return this.view.getUint32(8, true);
  }

  // 0x0c: u32
  get FilterCaps(): number {
    return this.view.getUint32(12, true);
  }

  // 0x10: u32
  get InputFormatCaps(): number {
    return this.view.getUint32(16, true);
  }

  // 0x14: u32
  get InputPool(): number {
    return this.view.getUint32(20, true);
  }

  // 0x18: u32
  get OutputFormatCount(): number {
    return this.view.getUint32(24, true);
  }

  // 0x1c: u32
  get InputFormatCount(): number {
    return this.view.getUint32(28, true);
  }

  // 0x20: u32
  get VideoProcessorCount(): number {
    return this.view.getUint32(32, true);
  }

  // 0x24: u32
  get MaxInputStreams(): number {
    return this.view.getUint32(36, true);
  }

  // 0x28: u32
  get MaxStreamStates(): number {
    return this.view.getUint32(40, true);
  }

  // 0x2c: pad4

  // 0x00: i32
  set DeviceType(value: number) {
    this.view.setInt32(0, value, true);
  }

  // 0x04: u32
  set DeviceCaps(value: number) {
    this.view.setUint32(4, value, true);
  }

  // 0x08: u32
  set FeatureCaps(value: number) {
    this.view.setUint32(8, value, true);
  }

  // 0x0c: u32
  set FilterCaps(value: number) {
    this.view.setUint32(12, value, true);
  }

  // 0x10: u32
  set InputFormatCaps(value: number) {
    this.view.setUint32(16, value, true);
  }

  // 0x14: u32
  set InputPool(value: number) {
    this.view.setUint32(20, value, true);
  }

  // 0x18: u32
  set OutputFormatCount(value: number) {
    this.view.setUint32(24, value, true);
  }

  // 0x1c: u32
  set InputFormatCount(value: number) {
    this.view.setUint32(28, value, true);
  }

  // 0x20: u32
  set VideoProcessorCount(value: number) {
    this.view.setUint32(32, value, true);
  }

  // 0x24: u32
  set MaxInputStreams(value: number) {
    this.view.setUint32(36, value, true);
  }

  // 0x28: u32
  set MaxStreamStates(value: number) {
    this.view.setUint32(40, value, true);
  }

  // 0x2c: pad4
}

/**
 * Windows.Win32.Media.MediaFoundation.DXVAHD_VPCAPS (size: 32)
 */
export interface DXVAHD_VPCAPS {
  /** System.Guid */
  VPGuid: Uint8Array | Deno.PointerValue;
  /** u32 */
  PastFrames: number;
  /** u32 */
  FutureFrames: number;
  /** u32 */
  ProcessorCaps: number;
  /** u32 */
  ITelecineCaps: number;
  /** u32 */
  CustomRateCount: number;
}

export const sizeofDXVAHD_VPCAPS = 32;

export function allocDXVAHD_VPCAPS(data?: Partial<DXVAHD_VPCAPS>): Uint8Array {
  const buf = new Uint8Array(sizeofDXVAHD_VPCAPS);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.VPGuid !== undefined) view.setBigUint64(0, data.VPGuid === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.VPGuid))), true);
  // 0x08: u32
  if (data?.PastFrames !== undefined) view.setUint32(8, Number(data.PastFrames), true);
  // 0x0c: u32
  if (data?.FutureFrames !== undefined) view.setUint32(12, Number(data.FutureFrames), true);
  // 0x10: u32
  if (data?.ProcessorCaps !== undefined) view.setUint32(16, Number(data.ProcessorCaps), true);
  // 0x14: u32
  if (data?.ITelecineCaps !== undefined) view.setUint32(20, Number(data.ITelecineCaps), true);
  // 0x18: u32
  if (data?.CustomRateCount !== undefined) view.setUint32(24, Number(data.CustomRateCount), true);
  // 0x1c: pad4
  return buf;
}

export class DXVAHD_VPCAPSView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get VPGuid(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(0, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x08: u32
  get PastFrames(): number {
    return this.view.getUint32(8, true);
  }

  // 0x0c: u32
  get FutureFrames(): number {
    return this.view.getUint32(12, true);
  }

  // 0x10: u32
  get ProcessorCaps(): number {
    return this.view.getUint32(16, true);
  }

  // 0x14: u32
  get ITelecineCaps(): number {
    return this.view.getUint32(20, true);
  }

  // 0x18: u32
  get CustomRateCount(): number {
    return this.view.getUint32(24, true);
  }

  // 0x1c: pad4

  // 0x00: pointer
  set VPGuid(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(0, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x08: u32
  set PastFrames(value: number) {
    this.view.setUint32(8, value, true);
  }

  // 0x0c: u32
  set FutureFrames(value: number) {
    this.view.setUint32(12, value, true);
  }

  // 0x10: u32
  set ProcessorCaps(value: number) {
    this.view.setUint32(16, value, true);
  }

  // 0x14: u32
  set ITelecineCaps(value: number) {
    this.view.setUint32(20, value, true);
  }

  // 0x18: u32
  set CustomRateCount(value: number) {
    this.view.setUint32(24, value, true);
  }

  // 0x1c: pad4
}

/**
 * Windows.Win32.Media.MediaFoundation.DXVAHD_CUSTOM_RATE_DATA (size: 24)
 */
export interface DXVAHD_CUSTOM_RATE_DATA {
  /** Windows.Win32.Media.MediaFoundation.DXVAHD_RATIONAL */
  CustomRate: Uint8Array | Deno.PointerValue;
  /** u32 */
  OutputFrames: number;
  /** Windows.Win32.Foundation.BOOL */
  InputInterlaced: boolean;
  /** u32 */
  InputFramesOrFields: number;
}

export const sizeofDXVAHD_CUSTOM_RATE_DATA = 24;

export function allocDXVAHD_CUSTOM_RATE_DATA(data?: Partial<DXVAHD_CUSTOM_RATE_DATA>): Uint8Array {
  const buf = new Uint8Array(sizeofDXVAHD_CUSTOM_RATE_DATA);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.CustomRate !== undefined) view.setBigUint64(0, data.CustomRate === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.CustomRate))), true);
  // 0x08: u32
  if (data?.OutputFrames !== undefined) view.setUint32(8, Number(data.OutputFrames), true);
  // 0x0c: i32
  if (data?.InputInterlaced !== undefined) view.setInt32(12, Number(data.InputInterlaced), true);
  // 0x10: u32
  if (data?.InputFramesOrFields !== undefined) view.setUint32(16, Number(data.InputFramesOrFields), true);
  // 0x14: pad4
  return buf;
}

export class DXVAHD_CUSTOM_RATE_DATAView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get CustomRate(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(0, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x08: u32
  get OutputFrames(): number {
    return this.view.getUint32(8, true);
  }

  // 0x0c: i32
  get InputInterlaced(): number {
    return this.view.getInt32(12, true);
  }

  // 0x10: u32
  get InputFramesOrFields(): number {
    return this.view.getUint32(16, true);
  }

  // 0x14: pad4

  // 0x00: pointer
  set CustomRate(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(0, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x08: u32
  set OutputFrames(value: number) {
    this.view.setUint32(8, value, true);
  }

  // 0x0c: i32
  set InputInterlaced(value: number) {
    this.view.setInt32(12, value, true);
  }

  // 0x10: u32
  set InputFramesOrFields(value: number) {
    this.view.setUint32(16, value, true);
  }

  // 0x14: pad4
}

/**
 * Windows.Win32.Media.MediaFoundation.DXVAHD_FILTER_RANGE_DATA (size: 16)
 */
export interface DXVAHD_FILTER_RANGE_DATA {
  /** i32 */
  Minimum: number;
  /** i32 */
  Maximum: number;
  /** i32 */
  Default: number;
  /** f32 */
  Multiplier: number;
}

export const sizeofDXVAHD_FILTER_RANGE_DATA = 16;

export function allocDXVAHD_FILTER_RANGE_DATA(data?: Partial<DXVAHD_FILTER_RANGE_DATA>): Uint8Array {
  const buf = new Uint8Array(sizeofDXVAHD_FILTER_RANGE_DATA);
  const view = new DataView(buf.buffer);
  // 0x00: i32
  if (data?.Minimum !== undefined) view.setInt32(0, Number(data.Minimum), true);
  // 0x04: i32
  if (data?.Maximum !== undefined) view.setInt32(4, Number(data.Maximum), true);
  // 0x08: i32
  if (data?.Default !== undefined) view.setInt32(8, Number(data.Default), true);
  // 0x0c: f32
  if (data?.Multiplier !== undefined) view.setFloat32(12, Number(data.Multiplier), true);
  return buf;
}

export class DXVAHD_FILTER_RANGE_DATAView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: i32
  get Minimum(): number {
    return this.view.getInt32(0, true);
  }

  // 0x04: i32
  get Maximum(): number {
    return this.view.getInt32(4, true);
  }

  // 0x08: i32
  get Default(): number {
    return this.view.getInt32(8, true);
  }

  // 0x0c: f32
  get Multiplier(): number {
    return this.view.getFloat32(12, true);
  }

  // 0x00: i32
  set Minimum(value: number) {
    this.view.setInt32(0, value, true);
  }

  // 0x04: i32
  set Maximum(value: number) {
    this.view.setInt32(4, value, true);
  }

  // 0x08: i32
  set Default(value: number) {
    this.view.setInt32(8, value, true);
  }

  // 0x0c: f32
  set Multiplier(value: number) {
    this.view.setFloat32(12, value, true);
  }
}

/**
 * Windows.Win32.Media.MediaFoundation.DXVAHD_BLT_STATE_TARGET_RECT_DATA (size: 16)
 */
export interface DXVAHD_BLT_STATE_TARGET_RECT_DATA {
  /** Windows.Win32.Foundation.BOOL */
  Enable: boolean;
  /** Windows.Win32.Foundation.RECT */
  TargetRect: Uint8Array | Deno.PointerValue;
}

export const sizeofDXVAHD_BLT_STATE_TARGET_RECT_DATA = 16;

export function allocDXVAHD_BLT_STATE_TARGET_RECT_DATA(data?: Partial<DXVAHD_BLT_STATE_TARGET_RECT_DATA>): Uint8Array {
  const buf = new Uint8Array(sizeofDXVAHD_BLT_STATE_TARGET_RECT_DATA);
  const view = new DataView(buf.buffer);
  // 0x00: i32
  if (data?.Enable !== undefined) view.setInt32(0, Number(data.Enable), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.TargetRect !== undefined) view.setBigUint64(8, data.TargetRect === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.TargetRect))), true);
  return buf;
}

export class DXVAHD_BLT_STATE_TARGET_RECT_DATAView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: i32
  get Enable(): number {
    return this.view.getInt32(0, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  get TargetRect(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: i32
  set Enable(value: number) {
    this.view.setInt32(0, value, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  set TargetRect(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.Media.MediaFoundation.DXVAHD_BLT_STATE_BACKGROUND_COLOR_DATA (size: 16)
 */
export interface DXVAHD_BLT_STATE_BACKGROUND_COLOR_DATA {
  /** Windows.Win32.Foundation.BOOL */
  YCbCr: boolean;
  /** Windows.Win32.Media.MediaFoundation.DXVAHD_COLOR */
  BackgroundColor: Uint8Array | Deno.PointerValue;
}

export const sizeofDXVAHD_BLT_STATE_BACKGROUND_COLOR_DATA = 16;

export function allocDXVAHD_BLT_STATE_BACKGROUND_COLOR_DATA(data?: Partial<DXVAHD_BLT_STATE_BACKGROUND_COLOR_DATA>): Uint8Array {
  const buf = new Uint8Array(sizeofDXVAHD_BLT_STATE_BACKGROUND_COLOR_DATA);
  const view = new DataView(buf.buffer);
  // 0x00: i32
  if (data?.YCbCr !== undefined) view.setInt32(0, Number(data.YCbCr), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.BackgroundColor !== undefined) view.setBigUint64(8, data.BackgroundColor === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.BackgroundColor))), true);
  return buf;
}

export class DXVAHD_BLT_STATE_BACKGROUND_COLOR_DATAView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: i32
  get YCbCr(): number {
    return this.view.getInt32(0, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  get BackgroundColor(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: i32
  set YCbCr(value: number) {
    this.view.setInt32(0, value, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  set BackgroundColor(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.Media.MediaFoundation.DXVAHD_BLT_STATE_OUTPUT_COLOR_SPACE_DATA (size: 8)
 */
export interface DXVAHD_BLT_STATE_OUTPUT_COLOR_SPACE_DATA {
  /** _Anonymous_e__Union */
  Anonymous: Uint8Array | Deno.PointerValue;
}

export const sizeofDXVAHD_BLT_STATE_OUTPUT_COLOR_SPACE_DATA = 8;

export function allocDXVAHD_BLT_STATE_OUTPUT_COLOR_SPACE_DATA(data?: Partial<DXVAHD_BLT_STATE_OUTPUT_COLOR_SPACE_DATA>): Uint8Array {
  const buf = new Uint8Array(sizeofDXVAHD_BLT_STATE_OUTPUT_COLOR_SPACE_DATA);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.Anonymous !== undefined) view.setBigUint64(0, data.Anonymous === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.Anonymous))), true);
  return buf;
}

export class DXVAHD_BLT_STATE_OUTPUT_COLOR_SPACE_DATAView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get Anonymous(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(0, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: pointer
  set Anonymous(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(0, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.Media.MediaFoundation.DXVAHD_BLT_STATE_ALPHA_FILL_DATA (size: 8)
 */
export interface DXVAHD_BLT_STATE_ALPHA_FILL_DATA {
  /** Windows.Win32.Media.MediaFoundation.DXVAHD_ALPHA_FILL_MODE */
  Mode: DXVAHD_ALPHA_FILL_MODE;
  /** u32 */
  StreamNumber: number;
}

export const sizeofDXVAHD_BLT_STATE_ALPHA_FILL_DATA = 8;

export function allocDXVAHD_BLT_STATE_ALPHA_FILL_DATA(data?: Partial<DXVAHD_BLT_STATE_ALPHA_FILL_DATA>): Uint8Array {
  const buf = new Uint8Array(sizeofDXVAHD_BLT_STATE_ALPHA_FILL_DATA);
  const view = new DataView(buf.buffer);
  // 0x00: i32
  if (data?.Mode !== undefined) view.setInt32(0, Number(data.Mode), true);
  // 0x04: u32
  if (data?.StreamNumber !== undefined) view.setUint32(4, Number(data.StreamNumber), true);
  return buf;
}

export class DXVAHD_BLT_STATE_ALPHA_FILL_DATAView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: i32
  get Mode(): number {
    return this.view.getInt32(0, true);
  }

  // 0x04: u32
  get StreamNumber(): number {
    return this.view.getUint32(4, true);
  }

  // 0x00: i32
  set Mode(value: number) {
    this.view.setInt32(0, value, true);
  }

  // 0x04: u32
  set StreamNumber(value: number) {
    this.view.setUint32(4, value, true);
  }
}

/**
 * Windows.Win32.Foundation.SIZE (size: 8)
 */
export interface SIZE {
  /** i32 */
  cx: number;
  /** i32 */
  cy: number;
}

export const sizeofSIZE = 8;

export function allocSIZE(data?: Partial<SIZE>): Uint8Array {
  const buf = new Uint8Array(sizeofSIZE);
  const view = new DataView(buf.buffer);
  // 0x00: i32
  if (data?.cx !== undefined) view.setInt32(0, Number(data.cx), true);
  // 0x04: i32
  if (data?.cy !== undefined) view.setInt32(4, Number(data.cy), true);
  return buf;
}

export class SIZEView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: i32
  get cx(): number {
    return this.view.getInt32(0, true);
  }

  // 0x04: i32
  get cy(): number {
    return this.view.getInt32(4, true);
  }

  // 0x00: i32
  set cx(value: number) {
    this.view.setInt32(0, value, true);
  }

  // 0x04: i32
  set cy(value: number) {
    this.view.setInt32(4, value, true);
  }
}

/**
 * Windows.Win32.Media.MediaFoundation.DXVAHD_BLT_STATE_CONSTRICTION_DATA (size: 16)
 */
export interface DXVAHD_BLT_STATE_CONSTRICTION_DATA {
  /** Windows.Win32.Foundation.BOOL */
  Enable: boolean;
  /** Windows.Win32.Foundation.SIZE */
  Size: Uint8Array | Deno.PointerValue;
}

export const sizeofDXVAHD_BLT_STATE_CONSTRICTION_DATA = 16;

export function allocDXVAHD_BLT_STATE_CONSTRICTION_DATA(data?: Partial<DXVAHD_BLT_STATE_CONSTRICTION_DATA>): Uint8Array {
  const buf = new Uint8Array(sizeofDXVAHD_BLT_STATE_CONSTRICTION_DATA);
  const view = new DataView(buf.buffer);
  // 0x00: i32
  if (data?.Enable !== undefined) view.setInt32(0, Number(data.Enable), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.Size !== undefined) view.setBigUint64(8, data.Size === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.Size))), true);
  return buf;
}

export class DXVAHD_BLT_STATE_CONSTRICTION_DATAView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: i32
  get Enable(): number {
    return this.view.getInt32(0, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  get Size(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: i32
  set Enable(value: number) {
    this.view.setInt32(0, value, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  set Size(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.Media.MediaFoundation.DXVAHD_BLT_STATE_PRIVATE_DATA (size: 24)
 */
export interface DXVAHD_BLT_STATE_PRIVATE_DATA {
  /** System.Guid */
  Guid: Uint8Array | Deno.PointerValue;
  /** u32 */
  DataSize: number;
  /** ptr */
  pData: Deno.PointerValue | Uint8Array;
}

export const sizeofDXVAHD_BLT_STATE_PRIVATE_DATA = 24;

export function allocDXVAHD_BLT_STATE_PRIVATE_DATA(data?: Partial<DXVAHD_BLT_STATE_PRIVATE_DATA>): Uint8Array {
  const buf = new Uint8Array(sizeofDXVAHD_BLT_STATE_PRIVATE_DATA);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.Guid !== undefined) view.setBigUint64(0, data.Guid === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.Guid))), true);
  // 0x08: u32
  if (data?.DataSize !== undefined) view.setUint32(8, Number(data.DataSize), true);
  // 0x0c: pad4
  // 0x10: pointer
  if (data?.pData !== undefined) view.setBigUint64(16, data.pData === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.pData))), true);
  return buf;
}

export class DXVAHD_BLT_STATE_PRIVATE_DATAView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get Guid(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(0, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x08: u32
  get DataSize(): number {
    return this.view.getUint32(8, true);
  }

  // 0x0c: pad4

  // 0x10: pointer
  get pData(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(16, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: pointer
  set Guid(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(0, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x08: u32
  set DataSize(value: number) {
    this.view.setUint32(8, value, true);
  }

  // 0x0c: pad4

  // 0x10: pointer
  set pData(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(16, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.Media.MediaFoundation.DXVAHD_STREAM_STATE_D3DFORMAT_DATA (size: 8)
 */
export interface DXVAHD_STREAM_STATE_D3DFORMAT_DATA {
  /** Windows.Win32.Graphics.Direct3D9.D3DFORMAT */
  Format: D3DFORMAT;
}

export const sizeofDXVAHD_STREAM_STATE_D3DFORMAT_DATA = 8;

export function allocDXVAHD_STREAM_STATE_D3DFORMAT_DATA(data?: Partial<DXVAHD_STREAM_STATE_D3DFORMAT_DATA>): Uint8Array {
  const buf = new Uint8Array(sizeofDXVAHD_STREAM_STATE_D3DFORMAT_DATA);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.Format !== undefined) view.setUint32(0, Number(data.Format), true);
  // 0x04: pad4
  return buf;
}

export class DXVAHD_STREAM_STATE_D3DFORMAT_DATAView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get Format(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: pad4

  // 0x00: u32
  set Format(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: pad4
}

/**
 * Windows.Win32.Media.MediaFoundation.DXVAHD_STREAM_STATE_FRAME_FORMAT_DATA (size: 8)
 */
export interface DXVAHD_STREAM_STATE_FRAME_FORMAT_DATA {
  /** Windows.Win32.Media.MediaFoundation.DXVAHD_FRAME_FORMAT */
  FrameFormat: DXVAHD_FRAME_FORMAT;
}

export const sizeofDXVAHD_STREAM_STATE_FRAME_FORMAT_DATA = 8;

export function allocDXVAHD_STREAM_STATE_FRAME_FORMAT_DATA(data?: Partial<DXVAHD_STREAM_STATE_FRAME_FORMAT_DATA>): Uint8Array {
  const buf = new Uint8Array(sizeofDXVAHD_STREAM_STATE_FRAME_FORMAT_DATA);
  const view = new DataView(buf.buffer);
  // 0x00: i32
  if (data?.FrameFormat !== undefined) view.setInt32(0, Number(data.FrameFormat), true);
  // 0x04: pad4
  return buf;
}

export class DXVAHD_STREAM_STATE_FRAME_FORMAT_DATAView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: i32
  get FrameFormat(): number {
    return this.view.getInt32(0, true);
  }

  // 0x04: pad4

  // 0x00: i32
  set FrameFormat(value: number) {
    this.view.setInt32(0, value, true);
  }

  // 0x04: pad4
}

/**
 * Windows.Win32.Media.MediaFoundation.DXVAHD_STREAM_STATE_INPUT_COLOR_SPACE_DATA (size: 8)
 */
export interface DXVAHD_STREAM_STATE_INPUT_COLOR_SPACE_DATA {
  /** _Anonymous_e__Union */
  Anonymous: Uint8Array | Deno.PointerValue;
}

export const sizeofDXVAHD_STREAM_STATE_INPUT_COLOR_SPACE_DATA = 8;

export function allocDXVAHD_STREAM_STATE_INPUT_COLOR_SPACE_DATA(data?: Partial<DXVAHD_STREAM_STATE_INPUT_COLOR_SPACE_DATA>): Uint8Array {
  const buf = new Uint8Array(sizeofDXVAHD_STREAM_STATE_INPUT_COLOR_SPACE_DATA);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.Anonymous !== undefined) view.setBigUint64(0, data.Anonymous === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.Anonymous))), true);
  return buf;
}

export class DXVAHD_STREAM_STATE_INPUT_COLOR_SPACE_DATAView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get Anonymous(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(0, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: pointer
  set Anonymous(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(0, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.Media.MediaFoundation.DXVAHD_STREAM_STATE_OUTPUT_RATE_DATA (size: 16)
 */
export interface DXVAHD_STREAM_STATE_OUTPUT_RATE_DATA {
  /** Windows.Win32.Foundation.BOOL */
  RepeatFrame: boolean;
  /** Windows.Win32.Media.MediaFoundation.DXVAHD_OUTPUT_RATE */
  OutputRate: DXVAHD_OUTPUT_RATE;
  /** Windows.Win32.Media.MediaFoundation.DXVAHD_RATIONAL */
  CustomRate: Uint8Array | Deno.PointerValue;
}

export const sizeofDXVAHD_STREAM_STATE_OUTPUT_RATE_DATA = 16;

export function allocDXVAHD_STREAM_STATE_OUTPUT_RATE_DATA(data?: Partial<DXVAHD_STREAM_STATE_OUTPUT_RATE_DATA>): Uint8Array {
  const buf = new Uint8Array(sizeofDXVAHD_STREAM_STATE_OUTPUT_RATE_DATA);
  const view = new DataView(buf.buffer);
  // 0x00: i32
  if (data?.RepeatFrame !== undefined) view.setInt32(0, Number(data.RepeatFrame), true);
  // 0x04: i32
  if (data?.OutputRate !== undefined) view.setInt32(4, Number(data.OutputRate), true);
  // 0x08: pointer
  if (data?.CustomRate !== undefined) view.setBigUint64(8, data.CustomRate === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.CustomRate))), true);
  return buf;
}

export class DXVAHD_STREAM_STATE_OUTPUT_RATE_DATAView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: i32
  get RepeatFrame(): number {
    return this.view.getInt32(0, true);
  }

  // 0x04: i32
  get OutputRate(): number {
    return this.view.getInt32(4, true);
  }

  // 0x08: pointer
  get CustomRate(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: i32
  set RepeatFrame(value: number) {
    this.view.setInt32(0, value, true);
  }

  // 0x04: i32
  set OutputRate(value: number) {
    this.view.setInt32(4, value, true);
  }

  // 0x08: pointer
  set CustomRate(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.Media.MediaFoundation.DXVAHD_STREAM_STATE_SOURCE_RECT_DATA (size: 16)
 */
export interface DXVAHD_STREAM_STATE_SOURCE_RECT_DATA {
  /** Windows.Win32.Foundation.BOOL */
  Enable: boolean;
  /** Windows.Win32.Foundation.RECT */
  SourceRect: Uint8Array | Deno.PointerValue;
}

export const sizeofDXVAHD_STREAM_STATE_SOURCE_RECT_DATA = 16;

export function allocDXVAHD_STREAM_STATE_SOURCE_RECT_DATA(data?: Partial<DXVAHD_STREAM_STATE_SOURCE_RECT_DATA>): Uint8Array {
  const buf = new Uint8Array(sizeofDXVAHD_STREAM_STATE_SOURCE_RECT_DATA);
  const view = new DataView(buf.buffer);
  // 0x00: i32
  if (data?.Enable !== undefined) view.setInt32(0, Number(data.Enable), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.SourceRect !== undefined) view.setBigUint64(8, data.SourceRect === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.SourceRect))), true);
  return buf;
}

export class DXVAHD_STREAM_STATE_SOURCE_RECT_DATAView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: i32
  get Enable(): number {
    return this.view.getInt32(0, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  get SourceRect(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: i32
  set Enable(value: number) {
    this.view.setInt32(0, value, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  set SourceRect(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.Media.MediaFoundation.DXVAHD_STREAM_STATE_DESTINATION_RECT_DATA (size: 16)
 */
export interface DXVAHD_STREAM_STATE_DESTINATION_RECT_DATA {
  /** Windows.Win32.Foundation.BOOL */
  Enable: boolean;
  /** Windows.Win32.Foundation.RECT */
  DestinationRect: Uint8Array | Deno.PointerValue;
}

export const sizeofDXVAHD_STREAM_STATE_DESTINATION_RECT_DATA = 16;

export function allocDXVAHD_STREAM_STATE_DESTINATION_RECT_DATA(data?: Partial<DXVAHD_STREAM_STATE_DESTINATION_RECT_DATA>): Uint8Array {
  const buf = new Uint8Array(sizeofDXVAHD_STREAM_STATE_DESTINATION_RECT_DATA);
  const view = new DataView(buf.buffer);
  // 0x00: i32
  if (data?.Enable !== undefined) view.setInt32(0, Number(data.Enable), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.DestinationRect !== undefined) view.setBigUint64(8, data.DestinationRect === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.DestinationRect))), true);
  return buf;
}

export class DXVAHD_STREAM_STATE_DESTINATION_RECT_DATAView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: i32
  get Enable(): number {
    return this.view.getInt32(0, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  get DestinationRect(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: i32
  set Enable(value: number) {
    this.view.setInt32(0, value, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  set DestinationRect(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.Media.MediaFoundation.DXVAHD_STREAM_STATE_ALPHA_DATA (size: 8)
 */
export interface DXVAHD_STREAM_STATE_ALPHA_DATA {
  /** Windows.Win32.Foundation.BOOL */
  Enable: boolean;
  /** f32 */
  Alpha: number;
}

export const sizeofDXVAHD_STREAM_STATE_ALPHA_DATA = 8;

export function allocDXVAHD_STREAM_STATE_ALPHA_DATA(data?: Partial<DXVAHD_STREAM_STATE_ALPHA_DATA>): Uint8Array {
  const buf = new Uint8Array(sizeofDXVAHD_STREAM_STATE_ALPHA_DATA);
  const view = new DataView(buf.buffer);
  // 0x00: i32
  if (data?.Enable !== undefined) view.setInt32(0, Number(data.Enable), true);
  // 0x04: f32
  if (data?.Alpha !== undefined) view.setFloat32(4, Number(data.Alpha), true);
  return buf;
}

export class DXVAHD_STREAM_STATE_ALPHA_DATAView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: i32
  get Enable(): number {
    return this.view.getInt32(0, true);
  }

  // 0x04: f32
  get Alpha(): number {
    return this.view.getFloat32(4, true);
  }

  // 0x00: i32
  set Enable(value: number) {
    this.view.setInt32(0, value, true);
  }

  // 0x04: f32
  set Alpha(value: number) {
    this.view.setFloat32(4, value, true);
  }
}

/**
 * Windows.Win32.Media.MediaFoundation.DXVAHD_STREAM_STATE_PALETTE_DATA (size: 16)
 */
export interface DXVAHD_STREAM_STATE_PALETTE_DATA {
  /** u32 */
  Count: number;
  /** ptr */
  pEntries: Deno.PointerValue | Uint8Array;
}

export const sizeofDXVAHD_STREAM_STATE_PALETTE_DATA = 16;

export function allocDXVAHD_STREAM_STATE_PALETTE_DATA(data?: Partial<DXVAHD_STREAM_STATE_PALETTE_DATA>): Uint8Array {
  const buf = new Uint8Array(sizeofDXVAHD_STREAM_STATE_PALETTE_DATA);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.Count !== undefined) view.setUint32(0, Number(data.Count), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.pEntries !== undefined) view.setBigUint64(8, data.pEntries === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.pEntries))), true);
  return buf;
}

export class DXVAHD_STREAM_STATE_PALETTE_DATAView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get Count(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  get pEntries(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: u32
  set Count(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  set pEntries(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.Media.MediaFoundation.DXVAHD_STREAM_STATE_LUMA_KEY_DATA (size: 16)
 */
export interface DXVAHD_STREAM_STATE_LUMA_KEY_DATA {
  /** Windows.Win32.Foundation.BOOL */
  Enable: boolean;
  /** f32 */
  Lower: number;
  /** f32 */
  Upper: number;
}

export const sizeofDXVAHD_STREAM_STATE_LUMA_KEY_DATA = 16;

export function allocDXVAHD_STREAM_STATE_LUMA_KEY_DATA(data?: Partial<DXVAHD_STREAM_STATE_LUMA_KEY_DATA>): Uint8Array {
  const buf = new Uint8Array(sizeofDXVAHD_STREAM_STATE_LUMA_KEY_DATA);
  const view = new DataView(buf.buffer);
  // 0x00: i32
  if (data?.Enable !== undefined) view.setInt32(0, Number(data.Enable), true);
  // 0x04: f32
  if (data?.Lower !== undefined) view.setFloat32(4, Number(data.Lower), true);
  // 0x08: f32
  if (data?.Upper !== undefined) view.setFloat32(8, Number(data.Upper), true);
  // 0x0c: pad4
  return buf;
}

export class DXVAHD_STREAM_STATE_LUMA_KEY_DATAView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: i32
  get Enable(): number {
    return this.view.getInt32(0, true);
  }

  // 0x04: f32
  get Lower(): number {
    return this.view.getFloat32(4, true);
  }

  // 0x08: f32
  get Upper(): number {
    return this.view.getFloat32(8, true);
  }

  // 0x0c: pad4

  // 0x00: i32
  set Enable(value: number) {
    this.view.setInt32(0, value, true);
  }

  // 0x04: f32
  set Lower(value: number) {
    this.view.setFloat32(4, value, true);
  }

  // 0x08: f32
  set Upper(value: number) {
    this.view.setFloat32(8, value, true);
  }

  // 0x0c: pad4
}

/**
 * Windows.Win32.Media.MediaFoundation.DXVAHD_STREAM_STATE_ASPECT_RATIO_DATA (size: 24)
 */
export interface DXVAHD_STREAM_STATE_ASPECT_RATIO_DATA {
  /** Windows.Win32.Foundation.BOOL */
  Enable: boolean;
  /** Windows.Win32.Media.MediaFoundation.DXVAHD_RATIONAL */
  SourceAspectRatio: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.Media.MediaFoundation.DXVAHD_RATIONAL */
  DestinationAspectRatio: Uint8Array | Deno.PointerValue;
}

export const sizeofDXVAHD_STREAM_STATE_ASPECT_RATIO_DATA = 24;

export function allocDXVAHD_STREAM_STATE_ASPECT_RATIO_DATA(data?: Partial<DXVAHD_STREAM_STATE_ASPECT_RATIO_DATA>): Uint8Array {
  const buf = new Uint8Array(sizeofDXVAHD_STREAM_STATE_ASPECT_RATIO_DATA);
  const view = new DataView(buf.buffer);
  // 0x00: i32
  if (data?.Enable !== undefined) view.setInt32(0, Number(data.Enable), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.SourceAspectRatio !== undefined) view.setBigUint64(8, data.SourceAspectRatio === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.SourceAspectRatio))), true);
  // 0x10: pointer
  if (data?.DestinationAspectRatio !== undefined) view.setBigUint64(16, data.DestinationAspectRatio === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.DestinationAspectRatio))), true);
  return buf;
}

export class DXVAHD_STREAM_STATE_ASPECT_RATIO_DATAView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: i32
  get Enable(): number {
    return this.view.getInt32(0, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  get SourceAspectRatio(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x10: pointer
  get DestinationAspectRatio(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(16, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: i32
  set Enable(value: number) {
    this.view.setInt32(0, value, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  set SourceAspectRatio(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x10: pointer
  set DestinationAspectRatio(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(16, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.Media.MediaFoundation.DXVAHD_STREAM_STATE_FILTER_DATA (size: 8)
 */
export interface DXVAHD_STREAM_STATE_FILTER_DATA {
  /** Windows.Win32.Foundation.BOOL */
  Enable: boolean;
  /** i32 */
  Level: number;
}

export const sizeofDXVAHD_STREAM_STATE_FILTER_DATA = 8;

export function allocDXVAHD_STREAM_STATE_FILTER_DATA(data?: Partial<DXVAHD_STREAM_STATE_FILTER_DATA>): Uint8Array {
  const buf = new Uint8Array(sizeofDXVAHD_STREAM_STATE_FILTER_DATA);
  const view = new DataView(buf.buffer);
  // 0x00: i32
  if (data?.Enable !== undefined) view.setInt32(0, Number(data.Enable), true);
  // 0x04: i32
  if (data?.Level !== undefined) view.setInt32(4, Number(data.Level), true);
  return buf;
}

export class DXVAHD_STREAM_STATE_FILTER_DATAView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: i32
  get Enable(): number {
    return this.view.getInt32(0, true);
  }

  // 0x04: i32
  get Level(): number {
    return this.view.getInt32(4, true);
  }

  // 0x00: i32
  set Enable(value: number) {
    this.view.setInt32(0, value, true);
  }

  // 0x04: i32
  set Level(value: number) {
    this.view.setInt32(4, value, true);
  }
}

/**
 * Windows.Win32.Media.MediaFoundation.DXVAHD_STREAM_STATE_PRIVATE_DATA (size: 24)
 */
export interface DXVAHD_STREAM_STATE_PRIVATE_DATA {
  /** System.Guid */
  Guid: Uint8Array | Deno.PointerValue;
  /** u32 */
  DataSize: number;
  /** ptr */
  pData: Deno.PointerValue | Uint8Array;
}

export const sizeofDXVAHD_STREAM_STATE_PRIVATE_DATA = 24;

export function allocDXVAHD_STREAM_STATE_PRIVATE_DATA(data?: Partial<DXVAHD_STREAM_STATE_PRIVATE_DATA>): Uint8Array {
  const buf = new Uint8Array(sizeofDXVAHD_STREAM_STATE_PRIVATE_DATA);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.Guid !== undefined) view.setBigUint64(0, data.Guid === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.Guid))), true);
  // 0x08: u32
  if (data?.DataSize !== undefined) view.setUint32(8, Number(data.DataSize), true);
  // 0x0c: pad4
  // 0x10: pointer
  if (data?.pData !== undefined) view.setBigUint64(16, data.pData === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.pData))), true);
  return buf;
}

export class DXVAHD_STREAM_STATE_PRIVATE_DATAView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get Guid(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(0, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x08: u32
  get DataSize(): number {
    return this.view.getUint32(8, true);
  }

  // 0x0c: pad4

  // 0x10: pointer
  get pData(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(16, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: pointer
  set Guid(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(0, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x08: u32
  set DataSize(value: number) {
    this.view.setUint32(8, value, true);
  }

  // 0x0c: pad4

  // 0x10: pointer
  set pData(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(16, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.Media.MediaFoundation.DXVAHD_STREAM_DATA (size: 48)
 */
export interface DXVAHD_STREAM_DATA {
  /** Windows.Win32.Foundation.BOOL */
  Enable: boolean;
  /** u32 */
  OutputIndex: number;
  /** u32 */
  InputFrameOrField: number;
  /** u32 */
  PastFrames: number;
  /** u32 */
  FutureFrames: number;
  /** ptr */
  ppPastSurfaces: Deno.PointerValue | Uint8Array;
  /** Windows.Win32.Graphics.Direct3D9.IDirect3DSurface9 */
  pInputSurface: Uint8Array | Deno.PointerValue;
  /** ptr */
  ppFutureSurfaces: Deno.PointerValue | Uint8Array;
}

export const sizeofDXVAHD_STREAM_DATA = 48;

export function allocDXVAHD_STREAM_DATA(data?: Partial<DXVAHD_STREAM_DATA>): Uint8Array {
  const buf = new Uint8Array(sizeofDXVAHD_STREAM_DATA);
  const view = new DataView(buf.buffer);
  // 0x00: i32
  if (data?.Enable !== undefined) view.setInt32(0, Number(data.Enable), true);
  // 0x04: u32
  if (data?.OutputIndex !== undefined) view.setUint32(4, Number(data.OutputIndex), true);
  // 0x08: u32
  if (data?.InputFrameOrField !== undefined) view.setUint32(8, Number(data.InputFrameOrField), true);
  // 0x0c: u32
  if (data?.PastFrames !== undefined) view.setUint32(12, Number(data.PastFrames), true);
  // 0x10: u32
  if (data?.FutureFrames !== undefined) view.setUint32(16, Number(data.FutureFrames), true);
  // 0x14: pad4
  // 0x18: pointer
  if (data?.ppPastSurfaces !== undefined) view.setBigUint64(24, data.ppPastSurfaces === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.ppPastSurfaces))), true);
  // 0x20: pointer
  if (data?.pInputSurface !== undefined) view.setBigUint64(32, data.pInputSurface === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.pInputSurface))), true);
  // 0x28: pointer
  if (data?.ppFutureSurfaces !== undefined) view.setBigUint64(40, data.ppFutureSurfaces === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.ppFutureSurfaces))), true);
  return buf;
}

export class DXVAHD_STREAM_DATAView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: i32
  get Enable(): number {
    return this.view.getInt32(0, true);
  }

  // 0x04: u32
  get OutputIndex(): number {
    return this.view.getUint32(4, true);
  }

  // 0x08: u32
  get InputFrameOrField(): number {
    return this.view.getUint32(8, true);
  }

  // 0x0c: u32
  get PastFrames(): number {
    return this.view.getUint32(12, true);
  }

  // 0x10: u32
  get FutureFrames(): number {
    return this.view.getUint32(16, true);
  }

  // 0x14: pad4

  // 0x18: pointer
  get ppPastSurfaces(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(24, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x20: pointer
  get pInputSurface(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(32, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x28: pointer
  get ppFutureSurfaces(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(40, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: i32
  set Enable(value: number) {
    this.view.setInt32(0, value, true);
  }

  // 0x04: u32
  set OutputIndex(value: number) {
    this.view.setUint32(4, value, true);
  }

  // 0x08: u32
  set InputFrameOrField(value: number) {
    this.view.setUint32(8, value, true);
  }

  // 0x0c: u32
  set PastFrames(value: number) {
    this.view.setUint32(12, value, true);
  }

  // 0x10: u32
  set FutureFrames(value: number) {
    this.view.setUint32(16, value, true);
  }

  // 0x14: pad4

  // 0x18: pointer
  set ppPastSurfaces(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(24, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x20: pointer
  set pInputSurface(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(32, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x28: pointer
  set ppFutureSurfaces(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(40, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.Media.MediaFoundation.DXVAHD_STREAM_STATE_PRIVATE_IVTC_DATA (size: 16)
 */
export interface DXVAHD_STREAM_STATE_PRIVATE_IVTC_DATA {
  /** Windows.Win32.Foundation.BOOL */
  Enable: boolean;
  /** u32 */
  ITelecineFlags: number;
  /** u32 */
  Frames: number;
  /** u32 */
  InputField: number;
}

export const sizeofDXVAHD_STREAM_STATE_PRIVATE_IVTC_DATA = 16;

export function allocDXVAHD_STREAM_STATE_PRIVATE_IVTC_DATA(data?: Partial<DXVAHD_STREAM_STATE_PRIVATE_IVTC_DATA>): Uint8Array {
  const buf = new Uint8Array(sizeofDXVAHD_STREAM_STATE_PRIVATE_IVTC_DATA);
  const view = new DataView(buf.buffer);
  // 0x00: i32
  if (data?.Enable !== undefined) view.setInt32(0, Number(data.Enable), true);
  // 0x04: u32
  if (data?.ITelecineFlags !== undefined) view.setUint32(4, Number(data.ITelecineFlags), true);
  // 0x08: u32
  if (data?.Frames !== undefined) view.setUint32(8, Number(data.Frames), true);
  // 0x0c: u32
  if (data?.InputField !== undefined) view.setUint32(12, Number(data.InputField), true);
  return buf;
}

export class DXVAHD_STREAM_STATE_PRIVATE_IVTC_DATAView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: i32
  get Enable(): number {
    return this.view.getInt32(0, true);
  }

  // 0x04: u32
  get ITelecineFlags(): number {
    return this.view.getUint32(4, true);
  }

  // 0x08: u32
  get Frames(): number {
    return this.view.getUint32(8, true);
  }

  // 0x0c: u32
  get InputField(): number {
    return this.view.getUint32(12, true);
  }

  // 0x00: i32
  set Enable(value: number) {
    this.view.setInt32(0, value, true);
  }

  // 0x04: u32
  set ITelecineFlags(value: number) {
    this.view.setUint32(4, value, true);
  }

  // 0x08: u32
  set Frames(value: number) {
    this.view.setUint32(8, value, true);
  }

  // 0x0c: u32
  set InputField(value: number) {
    this.view.setUint32(12, value, true);
  }
}

/**
 * Windows.Win32.Media.MediaFoundation.DXVAHDSW_CALLBACKS (size: 128)
 */
export interface DXVAHDSW_CALLBACKS {
  /** Windows.Win32.Media.MediaFoundation.PDXVAHDSW_CreateDevice */
  CreateDevice: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.Media.MediaFoundation.PDXVAHDSW_ProposeVideoPrivateFormat */
  ProposeVideoPrivateFormat: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.Media.MediaFoundation.PDXVAHDSW_GetVideoProcessorDeviceCaps */
  GetVideoProcessorDeviceCaps: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.Media.MediaFoundation.PDXVAHDSW_GetVideoProcessorOutputFormats */
  GetVideoProcessorOutputFormats: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.Media.MediaFoundation.PDXVAHDSW_GetVideoProcessorInputFormats */
  GetVideoProcessorInputFormats: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.Media.MediaFoundation.PDXVAHDSW_GetVideoProcessorCaps */
  GetVideoProcessorCaps: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.Media.MediaFoundation.PDXVAHDSW_GetVideoProcessorCustomRates */
  GetVideoProcessorCustomRates: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.Media.MediaFoundation.PDXVAHDSW_GetVideoProcessorFilterRange */
  GetVideoProcessorFilterRange: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.Media.MediaFoundation.PDXVAHDSW_DestroyDevice */
  DestroyDevice: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.Media.MediaFoundation.PDXVAHDSW_CreateVideoProcessor */
  CreateVideoProcessor: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.Media.MediaFoundation.PDXVAHDSW_SetVideoProcessBltState */
  SetVideoProcessBltState: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.Media.MediaFoundation.PDXVAHDSW_GetVideoProcessBltStatePrivate */
  GetVideoProcessBltStatePrivate: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.Media.MediaFoundation.PDXVAHDSW_SetVideoProcessStreamState */
  SetVideoProcessStreamState: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.Media.MediaFoundation.PDXVAHDSW_GetVideoProcessStreamStatePrivate */
  GetVideoProcessStreamStatePrivate: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.Media.MediaFoundation.PDXVAHDSW_VideoProcessBltHD */
  VideoProcessBltHD: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.Media.MediaFoundation.PDXVAHDSW_DestroyVideoProcessor */
  DestroyVideoProcessor: Uint8Array | Deno.PointerValue;
}

export const sizeofDXVAHDSW_CALLBACKS = 128;

export function allocDXVAHDSW_CALLBACKS(data?: Partial<DXVAHDSW_CALLBACKS>): Uint8Array {
  const buf = new Uint8Array(sizeofDXVAHDSW_CALLBACKS);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.CreateDevice !== undefined) view.setBigUint64(0, data.CreateDevice === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.CreateDevice))), true);
  // 0x08: pointer
  if (data?.ProposeVideoPrivateFormat !== undefined) view.setBigUint64(8, data.ProposeVideoPrivateFormat === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.ProposeVideoPrivateFormat))), true);
  // 0x10: pointer
  if (data?.GetVideoProcessorDeviceCaps !== undefined) view.setBigUint64(16, data.GetVideoProcessorDeviceCaps === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.GetVideoProcessorDeviceCaps))), true);
  // 0x18: pointer
  if (data?.GetVideoProcessorOutputFormats !== undefined) view.setBigUint64(24, data.GetVideoProcessorOutputFormats === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.GetVideoProcessorOutputFormats))), true);
  // 0x20: pointer
  if (data?.GetVideoProcessorInputFormats !== undefined) view.setBigUint64(32, data.GetVideoProcessorInputFormats === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.GetVideoProcessorInputFormats))), true);
  // 0x28: pointer
  if (data?.GetVideoProcessorCaps !== undefined) view.setBigUint64(40, data.GetVideoProcessorCaps === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.GetVideoProcessorCaps))), true);
  // 0x30: pointer
  if (data?.GetVideoProcessorCustomRates !== undefined) view.setBigUint64(48, data.GetVideoProcessorCustomRates === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.GetVideoProcessorCustomRates))), true);
  // 0x38: pointer
  if (data?.GetVideoProcessorFilterRange !== undefined) view.setBigUint64(56, data.GetVideoProcessorFilterRange === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.GetVideoProcessorFilterRange))), true);
  // 0x40: pointer
  if (data?.DestroyDevice !== undefined) view.setBigUint64(64, data.DestroyDevice === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.DestroyDevice))), true);
  // 0x48: pointer
  if (data?.CreateVideoProcessor !== undefined) view.setBigUint64(72, data.CreateVideoProcessor === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.CreateVideoProcessor))), true);
  // 0x50: pointer
  if (data?.SetVideoProcessBltState !== undefined) view.setBigUint64(80, data.SetVideoProcessBltState === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.SetVideoProcessBltState))), true);
  // 0x58: pointer
  if (data?.GetVideoProcessBltStatePrivate !== undefined) view.setBigUint64(88, data.GetVideoProcessBltStatePrivate === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.GetVideoProcessBltStatePrivate))), true);
  // 0x60: pointer
  if (data?.SetVideoProcessStreamState !== undefined) view.setBigUint64(96, data.SetVideoProcessStreamState === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.SetVideoProcessStreamState))), true);
  // 0x68: pointer
  if (data?.GetVideoProcessStreamStatePrivate !== undefined) view.setBigUint64(104, data.GetVideoProcessStreamStatePrivate === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.GetVideoProcessStreamStatePrivate))), true);
  // 0x70: pointer
  if (data?.VideoProcessBltHD !== undefined) view.setBigUint64(112, data.VideoProcessBltHD === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.VideoProcessBltHD))), true);
  // 0x78: pointer
  if (data?.DestroyVideoProcessor !== undefined) view.setBigUint64(120, data.DestroyVideoProcessor === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.DestroyVideoProcessor))), true);
  return buf;
}

export class DXVAHDSW_CALLBACKSView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get CreateDevice(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(0, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x08: pointer
  get ProposeVideoPrivateFormat(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x10: pointer
  get GetVideoProcessorDeviceCaps(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(16, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x18: pointer
  get GetVideoProcessorOutputFormats(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(24, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x20: pointer
  get GetVideoProcessorInputFormats(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(32, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x28: pointer
  get GetVideoProcessorCaps(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(40, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x30: pointer
  get GetVideoProcessorCustomRates(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(48, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x38: pointer
  get GetVideoProcessorFilterRange(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(56, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x40: pointer
  get DestroyDevice(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(64, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x48: pointer
  get CreateVideoProcessor(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(72, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x50: pointer
  get SetVideoProcessBltState(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(80, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x58: pointer
  get GetVideoProcessBltStatePrivate(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(88, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x60: pointer
  get SetVideoProcessStreamState(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(96, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x68: pointer
  get GetVideoProcessStreamStatePrivate(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(104, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x70: pointer
  get VideoProcessBltHD(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(112, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x78: pointer
  get DestroyVideoProcessor(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(120, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: pointer
  set CreateDevice(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(0, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x08: pointer
  set ProposeVideoPrivateFormat(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x10: pointer
  set GetVideoProcessorDeviceCaps(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(16, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x18: pointer
  set GetVideoProcessorOutputFormats(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(24, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x20: pointer
  set GetVideoProcessorInputFormats(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(32, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x28: pointer
  set GetVideoProcessorCaps(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(40, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x30: pointer
  set GetVideoProcessorCustomRates(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(48, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x38: pointer
  set GetVideoProcessorFilterRange(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(56, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x40: pointer
  set DestroyDevice(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(64, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x48: pointer
  set CreateVideoProcessor(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(72, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x50: pointer
  set SetVideoProcessBltState(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(80, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x58: pointer
  set GetVideoProcessBltStatePrivate(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(88, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x60: pointer
  set SetVideoProcessStreamState(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(96, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x68: pointer
  set GetVideoProcessStreamStatePrivate(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(104, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x70: pointer
  set VideoProcessBltHD(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(112, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x78: pointer
  set DestroyVideoProcessor(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(120, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.Media.MediaFoundation.DXVAHDETW_CREATEVIDEOPROCESSOR (size: 24)
 */
export interface DXVAHDETW_CREATEVIDEOPROCESSOR {
  /** u64 */
  pObject: bigint | number;
  /** u64 */
  pD3D9Ex: bigint | number;
  /** System.Guid */
  VPGuid: Uint8Array | Deno.PointerValue;
}

export const sizeofDXVAHDETW_CREATEVIDEOPROCESSOR = 24;

export function allocDXVAHDETW_CREATEVIDEOPROCESSOR(data?: Partial<DXVAHDETW_CREATEVIDEOPROCESSOR>): Uint8Array {
  const buf = new Uint8Array(sizeofDXVAHDETW_CREATEVIDEOPROCESSOR);
  const view = new DataView(buf.buffer);
  // 0x00: u64
  if (data?.pObject !== undefined) view.setBigUint64(0, BigInt(data.pObject), true);
  // 0x08: u64
  if (data?.pD3D9Ex !== undefined) view.setBigUint64(8, BigInt(data.pD3D9Ex), true);
  // 0x10: pointer
  if (data?.VPGuid !== undefined) view.setBigUint64(16, data.VPGuid === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.VPGuid))), true);
  return buf;
}

export class DXVAHDETW_CREATEVIDEOPROCESSORView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u64
  get pObject(): bigint | number {
    return Number(this.view.getBigUint64(0, true));
  }

  // 0x08: u64
  get pD3D9Ex(): bigint | number {
    return Number(this.view.getBigUint64(8, true));
  }

  // 0x10: pointer
  get VPGuid(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(16, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: u64
  set pObject(value: bigint | number) {
    this.view.setBigUint64(0, BigInt(value), true);
  }

  // 0x08: u64
  set pD3D9Ex(value: bigint | number) {
    this.view.setBigUint64(8, BigInt(value), true);
  }

  // 0x10: pointer
  set VPGuid(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(16, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.Media.MediaFoundation.DXVAHDETW_VIDEOPROCESSBLTSTATE (size: 24)
 */
export interface DXVAHDETW_VIDEOPROCESSBLTSTATE {
  /** u64 */
  pObject: bigint | number;
  /** Windows.Win32.Media.MediaFoundation.DXVAHD_BLT_STATE */
  State: DXVAHD_BLT_STATE;
  /** u32 */
  DataSize: number;
  /** Windows.Win32.Foundation.BOOL */
  SetState: boolean;
}

export const sizeofDXVAHDETW_VIDEOPROCESSBLTSTATE = 24;

export function allocDXVAHDETW_VIDEOPROCESSBLTSTATE(data?: Partial<DXVAHDETW_VIDEOPROCESSBLTSTATE>): Uint8Array {
  const buf = new Uint8Array(sizeofDXVAHDETW_VIDEOPROCESSBLTSTATE);
  const view = new DataView(buf.buffer);
  // 0x00: u64
  if (data?.pObject !== undefined) view.setBigUint64(0, BigInt(data.pObject), true);
  // 0x08: i32
  if (data?.State !== undefined) view.setInt32(8, Number(data.State), true);
  // 0x0c: u32
  if (data?.DataSize !== undefined) view.setUint32(12, Number(data.DataSize), true);
  // 0x10: i32
  if (data?.SetState !== undefined) view.setInt32(16, Number(data.SetState), true);
  // 0x14: pad4
  return buf;
}

export class DXVAHDETW_VIDEOPROCESSBLTSTATEView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u64
  get pObject(): bigint | number {
    return Number(this.view.getBigUint64(0, true));
  }

  // 0x08: i32
  get State(): number {
    return this.view.getInt32(8, true);
  }

  // 0x0c: u32
  get DataSize(): number {
    return this.view.getUint32(12, true);
  }

  // 0x10: i32
  get SetState(): number {
    return this.view.getInt32(16, true);
  }

  // 0x14: pad4

  // 0x00: u64
  set pObject(value: bigint | number) {
    this.view.setBigUint64(0, BigInt(value), true);
  }

  // 0x08: i32
  set State(value: number) {
    this.view.setInt32(8, value, true);
  }

  // 0x0c: u32
  set DataSize(value: number) {
    this.view.setUint32(12, value, true);
  }

  // 0x10: i32
  set SetState(value: number) {
    this.view.setInt32(16, value, true);
  }

  // 0x14: pad4
}

/**
 * Windows.Win32.Media.MediaFoundation.DXVAHDETW_VIDEOPROCESSSTREAMSTATE (size: 24)
 */
export interface DXVAHDETW_VIDEOPROCESSSTREAMSTATE {
  /** u64 */
  pObject: bigint | number;
  /** u32 */
  StreamNumber: number;
  /** Windows.Win32.Media.MediaFoundation.DXVAHD_STREAM_STATE */
  State: DXVAHD_STREAM_STATE;
  /** u32 */
  DataSize: number;
  /** Windows.Win32.Foundation.BOOL */
  SetState: boolean;
}

export const sizeofDXVAHDETW_VIDEOPROCESSSTREAMSTATE = 24;

export function allocDXVAHDETW_VIDEOPROCESSSTREAMSTATE(data?: Partial<DXVAHDETW_VIDEOPROCESSSTREAMSTATE>): Uint8Array {
  const buf = new Uint8Array(sizeofDXVAHDETW_VIDEOPROCESSSTREAMSTATE);
  const view = new DataView(buf.buffer);
  // 0x00: u64
  if (data?.pObject !== undefined) view.setBigUint64(0, BigInt(data.pObject), true);
  // 0x08: u32
  if (data?.StreamNumber !== undefined) view.setUint32(8, Number(data.StreamNumber), true);
  // 0x0c: i32
  if (data?.State !== undefined) view.setInt32(12, Number(data.State), true);
  // 0x10: u32
  if (data?.DataSize !== undefined) view.setUint32(16, Number(data.DataSize), true);
  // 0x14: i32
  if (data?.SetState !== undefined) view.setInt32(20, Number(data.SetState), true);
  return buf;
}

export class DXVAHDETW_VIDEOPROCESSSTREAMSTATEView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u64
  get pObject(): bigint | number {
    return Number(this.view.getBigUint64(0, true));
  }

  // 0x08: u32
  get StreamNumber(): number {
    return this.view.getUint32(8, true);
  }

  // 0x0c: i32
  get State(): number {
    return this.view.getInt32(12, true);
  }

  // 0x10: u32
  get DataSize(): number {
    return this.view.getUint32(16, true);
  }

  // 0x14: i32
  get SetState(): number {
    return this.view.getInt32(20, true);
  }

  // 0x00: u64
  set pObject(value: bigint | number) {
    this.view.setBigUint64(0, BigInt(value), true);
  }

  // 0x08: u32
  set StreamNumber(value: number) {
    this.view.setUint32(8, value, true);
  }

  // 0x0c: i32
  set State(value: number) {
    this.view.setInt32(12, value, true);
  }

  // 0x10: u32
  set DataSize(value: number) {
    this.view.setUint32(16, value, true);
  }

  // 0x14: i32
  set SetState(value: number) {
    this.view.setInt32(20, value, true);
  }
}

/**
 * Windows.Win32.Media.MediaFoundation.DXVAHDETW_VIDEOPROCESSBLTHD (size: 48)
 */
export interface DXVAHDETW_VIDEOPROCESSBLTHD {
  /** u64 */
  pObject: bigint | number;
  /** u64 */
  pOutputSurface: bigint | number;
  /** Windows.Win32.Foundation.RECT */
  TargetRect: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.Graphics.Direct3D9.D3DFORMAT */
  OutputFormat: D3DFORMAT;
  /** u32 */
  ColorSpace: number;
  /** u32 */
  OutputFrame: number;
  /** u32 */
  StreamCount: number;
  /** Windows.Win32.Foundation.BOOL */
  Enter: boolean;
}

export const sizeofDXVAHDETW_VIDEOPROCESSBLTHD = 48;

export function allocDXVAHDETW_VIDEOPROCESSBLTHD(data?: Partial<DXVAHDETW_VIDEOPROCESSBLTHD>): Uint8Array {
  const buf = new Uint8Array(sizeofDXVAHDETW_VIDEOPROCESSBLTHD);
  const view = new DataView(buf.buffer);
  // 0x00: u64
  if (data?.pObject !== undefined) view.setBigUint64(0, BigInt(data.pObject), true);
  // 0x08: u64
  if (data?.pOutputSurface !== undefined) view.setBigUint64(8, BigInt(data.pOutputSurface), true);
  // 0x10: pointer
  if (data?.TargetRect !== undefined) view.setBigUint64(16, data.TargetRect === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.TargetRect))), true);
  // 0x18: u32
  if (data?.OutputFormat !== undefined) view.setUint32(24, Number(data.OutputFormat), true);
  // 0x1c: u32
  if (data?.ColorSpace !== undefined) view.setUint32(28, Number(data.ColorSpace), true);
  // 0x20: u32
  if (data?.OutputFrame !== undefined) view.setUint32(32, Number(data.OutputFrame), true);
  // 0x24: u32
  if (data?.StreamCount !== undefined) view.setUint32(36, Number(data.StreamCount), true);
  // 0x28: i32
  if (data?.Enter !== undefined) view.setInt32(40, Number(data.Enter), true);
  // 0x2c: pad4
  return buf;
}

export class DXVAHDETW_VIDEOPROCESSBLTHDView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u64
  get pObject(): bigint | number {
    return Number(this.view.getBigUint64(0, true));
  }

  // 0x08: u64
  get pOutputSurface(): bigint | number {
    return Number(this.view.getBigUint64(8, true));
  }

  // 0x10: pointer
  get TargetRect(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(16, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x18: u32
  get OutputFormat(): number {
    return this.view.getUint32(24, true);
  }

  // 0x1c: u32
  get ColorSpace(): number {
    return this.view.getUint32(28, true);
  }

  // 0x20: u32
  get OutputFrame(): number {
    return this.view.getUint32(32, true);
  }

  // 0x24: u32
  get StreamCount(): number {
    return this.view.getUint32(36, true);
  }

  // 0x28: i32
  get Enter(): number {
    return this.view.getInt32(40, true);
  }

  // 0x2c: pad4

  // 0x00: u64
  set pObject(value: bigint | number) {
    this.view.setBigUint64(0, BigInt(value), true);
  }

  // 0x08: u64
  set pOutputSurface(value: bigint | number) {
    this.view.setBigUint64(8, BigInt(value), true);
  }

  // 0x10: pointer
  set TargetRect(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(16, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x18: u32
  set OutputFormat(value: number) {
    this.view.setUint32(24, value, true);
  }

  // 0x1c: u32
  set ColorSpace(value: number) {
    this.view.setUint32(28, value, true);
  }

  // 0x20: u32
  set OutputFrame(value: number) {
    this.view.setUint32(32, value, true);
  }

  // 0x24: u32
  set StreamCount(value: number) {
    this.view.setUint32(36, value, true);
  }

  // 0x28: i32
  set Enter(value: number) {
    this.view.setInt32(40, value, true);
  }

  // 0x2c: pad4
}

/**
 * Windows.Win32.Media.MediaFoundation.DXVAHDETW_VIDEOPROCESSBLTHD_STREAM (size: 64)
 */
export interface DXVAHDETW_VIDEOPROCESSBLTHD_STREAM {
  /** u64 */
  pObject: bigint | number;
  /** u64 */
  pInputSurface: bigint | number;
  /** Windows.Win32.Foundation.RECT */
  SourceRect: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.Foundation.RECT */
  DestinationRect: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.Graphics.Direct3D9.D3DFORMAT */
  InputFormat: D3DFORMAT;
  /** Windows.Win32.Media.MediaFoundation.DXVAHD_FRAME_FORMAT */
  FrameFormat: DXVAHD_FRAME_FORMAT;
  /** u32 */
  ColorSpace: number;
  /** u32 */
  StreamNumber: number;
  /** u32 */
  OutputIndex: number;
  /** u32 */
  InputFrameOrField: number;
  /** u32 */
  PastFrames: number;
  /** u32 */
  FutureFrames: number;
}

export const sizeofDXVAHDETW_VIDEOPROCESSBLTHD_STREAM = 64;

export function allocDXVAHDETW_VIDEOPROCESSBLTHD_STREAM(data?: Partial<DXVAHDETW_VIDEOPROCESSBLTHD_STREAM>): Uint8Array {
  const buf = new Uint8Array(sizeofDXVAHDETW_VIDEOPROCESSBLTHD_STREAM);
  const view = new DataView(buf.buffer);
  // 0x00: u64
  if (data?.pObject !== undefined) view.setBigUint64(0, BigInt(data.pObject), true);
  // 0x08: u64
  if (data?.pInputSurface !== undefined) view.setBigUint64(8, BigInt(data.pInputSurface), true);
  // 0x10: pointer
  if (data?.SourceRect !== undefined) view.setBigUint64(16, data.SourceRect === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.SourceRect))), true);
  // 0x18: pointer
  if (data?.DestinationRect !== undefined) view.setBigUint64(24, data.DestinationRect === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.DestinationRect))), true);
  // 0x20: u32
  if (data?.InputFormat !== undefined) view.setUint32(32, Number(data.InputFormat), true);
  // 0x24: i32
  if (data?.FrameFormat !== undefined) view.setInt32(36, Number(data.FrameFormat), true);
  // 0x28: u32
  if (data?.ColorSpace !== undefined) view.setUint32(40, Number(data.ColorSpace), true);
  // 0x2c: u32
  if (data?.StreamNumber !== undefined) view.setUint32(44, Number(data.StreamNumber), true);
  // 0x30: u32
  if (data?.OutputIndex !== undefined) view.setUint32(48, Number(data.OutputIndex), true);
  // 0x34: u32
  if (data?.InputFrameOrField !== undefined) view.setUint32(52, Number(data.InputFrameOrField), true);
  // 0x38: u32
  if (data?.PastFrames !== undefined) view.setUint32(56, Number(data.PastFrames), true);
  // 0x3c: u32
  if (data?.FutureFrames !== undefined) view.setUint32(60, Number(data.FutureFrames), true);
  return buf;
}

export class DXVAHDETW_VIDEOPROCESSBLTHD_STREAMView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u64
  get pObject(): bigint | number {
    return Number(this.view.getBigUint64(0, true));
  }

  // 0x08: u64
  get pInputSurface(): bigint | number {
    return Number(this.view.getBigUint64(8, true));
  }

  // 0x10: pointer
  get SourceRect(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(16, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x18: pointer
  get DestinationRect(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(24, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x20: u32
  get InputFormat(): number {
    return this.view.getUint32(32, true);
  }

  // 0x24: i32
  get FrameFormat(): number {
    return this.view.getInt32(36, true);
  }

  // 0x28: u32
  get ColorSpace(): number {
    return this.view.getUint32(40, true);
  }

  // 0x2c: u32
  get StreamNumber(): number {
    return this.view.getUint32(44, true);
  }

  // 0x30: u32
  get OutputIndex(): number {
    return this.view.getUint32(48, true);
  }

  // 0x34: u32
  get InputFrameOrField(): number {
    return this.view.getUint32(52, true);
  }

  // 0x38: u32
  get PastFrames(): number {
    return this.view.getUint32(56, true);
  }

  // 0x3c: u32
  get FutureFrames(): number {
    return this.view.getUint32(60, true);
  }

  // 0x00: u64
  set pObject(value: bigint | number) {
    this.view.setBigUint64(0, BigInt(value), true);
  }

  // 0x08: u64
  set pInputSurface(value: bigint | number) {
    this.view.setBigUint64(8, BigInt(value), true);
  }

  // 0x10: pointer
  set SourceRect(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(16, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x18: pointer
  set DestinationRect(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(24, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x20: u32
  set InputFormat(value: number) {
    this.view.setUint32(32, value, true);
  }

  // 0x24: i32
  set FrameFormat(value: number) {
    this.view.setInt32(36, value, true);
  }

  // 0x28: u32
  set ColorSpace(value: number) {
    this.view.setUint32(40, value, true);
  }

  // 0x2c: u32
  set StreamNumber(value: number) {
    this.view.setUint32(44, value, true);
  }

  // 0x30: u32
  set OutputIndex(value: number) {
    this.view.setUint32(48, value, true);
  }

  // 0x34: u32
  set InputFrameOrField(value: number) {
    this.view.setUint32(52, value, true);
  }

  // 0x38: u32
  set PastFrames(value: number) {
    this.view.setUint32(56, value, true);
  }

  // 0x3c: u32
  set FutureFrames(value: number) {
    this.view.setUint32(60, value, true);
  }
}

/**
 * Windows.Win32.Media.MediaFoundation.DXVAHDETW_DESTROYVIDEOPROCESSOR (size: 8)
 */
export interface DXVAHDETW_DESTROYVIDEOPROCESSOR {
  /** u64 */
  pObject: bigint | number;
}

export const sizeofDXVAHDETW_DESTROYVIDEOPROCESSOR = 8;

export function allocDXVAHDETW_DESTROYVIDEOPROCESSOR(data?: Partial<DXVAHDETW_DESTROYVIDEOPROCESSOR>): Uint8Array {
  const buf = new Uint8Array(sizeofDXVAHDETW_DESTROYVIDEOPROCESSOR);
  const view = new DataView(buf.buffer);
  // 0x00: u64
  if (data?.pObject !== undefined) view.setBigUint64(0, BigInt(data.pObject), true);
  return buf;
}

export class DXVAHDETW_DESTROYVIDEOPROCESSORView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u64
  get pObject(): bigint | number {
    return Number(this.view.getBigUint64(0, true));
  }

  // 0x00: u64
  set pObject(value: bigint | number) {
    this.view.setBigUint64(0, BigInt(value), true);
  }
}

/**
 * Windows.Win32.Media.MediaFoundation.DXVA2_ExtendedFormat (size: 8)
 */
export interface DXVA2_ExtendedFormat {
  /** _Anonymous_e__Union */
  Anonymous: Uint8Array | Deno.PointerValue;
}

export const sizeofDXVA2_ExtendedFormat = 8;

export function allocDXVA2_ExtendedFormat(data?: Partial<DXVA2_ExtendedFormat>): Uint8Array {
  const buf = new Uint8Array(sizeofDXVA2_ExtendedFormat);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.Anonymous !== undefined) view.setBigUint64(0, data.Anonymous === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.Anonymous))), true);
  return buf;
}

export class DXVA2_ExtendedFormatView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get Anonymous(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(0, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: pointer
  set Anonymous(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(0, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.Media.MediaFoundation.DXVA2_Frequency (size: 8)
 */
export interface DXVA2_Frequency {
  /** u32 */
  Numerator: number;
  /** u32 */
  Denominator: number;
}

export const sizeofDXVA2_Frequency = 8;

export function allocDXVA2_Frequency(data?: Partial<DXVA2_Frequency>): Uint8Array {
  const buf = new Uint8Array(sizeofDXVA2_Frequency);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.Numerator !== undefined) view.setUint32(0, Number(data.Numerator), true);
  // 0x04: u32
  if (data?.Denominator !== undefined) view.setUint32(4, Number(data.Denominator), true);
  return buf;
}

export class DXVA2_FrequencyView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get Numerator(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: u32
  get Denominator(): number {
    return this.view.getUint32(4, true);
  }

  // 0x00: u32
  set Numerator(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: u32
  set Denominator(value: number) {
    this.view.setUint32(4, value, true);
  }
}

/**
 * Windows.Win32.Media.MediaFoundation.DXVA2_VideoDesc (size: 48)
 */
export interface DXVA2_VideoDesc {
  /** u32 */
  SampleWidth: number;
  /** u32 */
  SampleHeight: number;
  /** Windows.Win32.Media.MediaFoundation.DXVA2_ExtendedFormat */
  SampleFormat: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.Graphics.Direct3D9.D3DFORMAT */
  Format: D3DFORMAT;
  /** Windows.Win32.Media.MediaFoundation.DXVA2_Frequency */
  InputSampleFreq: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.Media.MediaFoundation.DXVA2_Frequency */
  OutputFrameFreq: Uint8Array | Deno.PointerValue;
  /** u32 */
  UABProtectionLevel: number;
  /** u32 */
  Reserved: number;
}

export const sizeofDXVA2_VideoDesc = 48;

export function allocDXVA2_VideoDesc(data?: Partial<DXVA2_VideoDesc>): Uint8Array {
  const buf = new Uint8Array(sizeofDXVA2_VideoDesc);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.SampleWidth !== undefined) view.setUint32(0, Number(data.SampleWidth), true);
  // 0x04: u32
  if (data?.SampleHeight !== undefined) view.setUint32(4, Number(data.SampleHeight), true);
  // 0x08: pointer
  if (data?.SampleFormat !== undefined) view.setBigUint64(8, data.SampleFormat === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.SampleFormat))), true);
  // 0x10: u32
  if (data?.Format !== undefined) view.setUint32(16, Number(data.Format), true);
  // 0x14: pad4
  // 0x18: pointer
  if (data?.InputSampleFreq !== undefined) view.setBigUint64(24, data.InputSampleFreq === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.InputSampleFreq))), true);
  // 0x20: pointer
  if (data?.OutputFrameFreq !== undefined) view.setBigUint64(32, data.OutputFrameFreq === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.OutputFrameFreq))), true);
  // 0x28: u32
  if (data?.UABProtectionLevel !== undefined) view.setUint32(40, Number(data.UABProtectionLevel), true);
  // 0x2c: u32
  if (data?.Reserved !== undefined) view.setUint32(44, Number(data.Reserved), true);
  return buf;
}

export class DXVA2_VideoDescView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get SampleWidth(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: u32
  get SampleHeight(): number {
    return this.view.getUint32(4, true);
  }

  // 0x08: pointer
  get SampleFormat(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x10: u32
  get Format(): number {
    return this.view.getUint32(16, true);
  }

  // 0x14: pad4

  // 0x18: pointer
  get InputSampleFreq(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(24, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x20: pointer
  get OutputFrameFreq(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(32, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x28: u32
  get UABProtectionLevel(): number {
    return this.view.getUint32(40, true);
  }

  // 0x2c: u32
  get Reserved(): number {
    return this.view.getUint32(44, true);
  }

  // 0x00: u32
  set SampleWidth(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: u32
  set SampleHeight(value: number) {
    this.view.setUint32(4, value, true);
  }

  // 0x08: pointer
  set SampleFormat(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x10: u32
  set Format(value: number) {
    this.view.setUint32(16, value, true);
  }

  // 0x14: pad4

  // 0x18: pointer
  set InputSampleFreq(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(24, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x20: pointer
  set OutputFrameFreq(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(32, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x28: u32
  set UABProtectionLevel(value: number) {
    this.view.setUint32(40, value, true);
  }

  // 0x2c: u32
  set Reserved(value: number) {
    this.view.setUint32(44, value, true);
  }
}

/**
 * Windows.Win32.Media.MediaFoundation.DXVA2_VideoProcessorCaps (size: 40)
 */
export interface DXVA2_VideoProcessorCaps {
  /** u32 */
  DeviceCaps: number;
  /** Windows.Win32.Graphics.Direct3D9.D3DPOOL */
  InputPool: D3DPOOL;
  /** u32 */
  NumForwardRefSamples: number;
  /** u32 */
  NumBackwardRefSamples: number;
  /** u32 */
  Reserved: number;
  /** u32 */
  DeinterlaceTechnology: number;
  /** u32 */
  ProcAmpControlCaps: number;
  /** u32 */
  VideoProcessorOperations: number;
  /** u32 */
  NoiseFilterTechnology: number;
  /** u32 */
  DetailFilterTechnology: number;
}

export const sizeofDXVA2_VideoProcessorCaps = 40;

export function allocDXVA2_VideoProcessorCaps(data?: Partial<DXVA2_VideoProcessorCaps>): Uint8Array {
  const buf = new Uint8Array(sizeofDXVA2_VideoProcessorCaps);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.DeviceCaps !== undefined) view.setUint32(0, Number(data.DeviceCaps), true);
  // 0x04: u32
  if (data?.InputPool !== undefined) view.setUint32(4, Number(data.InputPool), true);
  // 0x08: u32
  if (data?.NumForwardRefSamples !== undefined) view.setUint32(8, Number(data.NumForwardRefSamples), true);
  // 0x0c: u32
  if (data?.NumBackwardRefSamples !== undefined) view.setUint32(12, Number(data.NumBackwardRefSamples), true);
  // 0x10: u32
  if (data?.Reserved !== undefined) view.setUint32(16, Number(data.Reserved), true);
  // 0x14: u32
  if (data?.DeinterlaceTechnology !== undefined) view.setUint32(20, Number(data.DeinterlaceTechnology), true);
  // 0x18: u32
  if (data?.ProcAmpControlCaps !== undefined) view.setUint32(24, Number(data.ProcAmpControlCaps), true);
  // 0x1c: u32
  if (data?.VideoProcessorOperations !== undefined) view.setUint32(28, Number(data.VideoProcessorOperations), true);
  // 0x20: u32
  if (data?.NoiseFilterTechnology !== undefined) view.setUint32(32, Number(data.NoiseFilterTechnology), true);
  // 0x24: u32
  if (data?.DetailFilterTechnology !== undefined) view.setUint32(36, Number(data.DetailFilterTechnology), true);
  return buf;
}

export class DXVA2_VideoProcessorCapsView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get DeviceCaps(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: u32
  get InputPool(): number {
    return this.view.getUint32(4, true);
  }

  // 0x08: u32
  get NumForwardRefSamples(): number {
    return this.view.getUint32(8, true);
  }

  // 0x0c: u32
  get NumBackwardRefSamples(): number {
    return this.view.getUint32(12, true);
  }

  // 0x10: u32
  get Reserved(): number {
    return this.view.getUint32(16, true);
  }

  // 0x14: u32
  get DeinterlaceTechnology(): number {
    return this.view.getUint32(20, true);
  }

  // 0x18: u32
  get ProcAmpControlCaps(): number {
    return this.view.getUint32(24, true);
  }

  // 0x1c: u32
  get VideoProcessorOperations(): number {
    return this.view.getUint32(28, true);
  }

  // 0x20: u32
  get NoiseFilterTechnology(): number {
    return this.view.getUint32(32, true);
  }

  // 0x24: u32
  get DetailFilterTechnology(): number {
    return this.view.getUint32(36, true);
  }

  // 0x00: u32
  set DeviceCaps(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: u32
  set InputPool(value: number) {
    this.view.setUint32(4, value, true);
  }

  // 0x08: u32
  set NumForwardRefSamples(value: number) {
    this.view.setUint32(8, value, true);
  }

  // 0x0c: u32
  set NumBackwardRefSamples(value: number) {
    this.view.setUint32(12, value, true);
  }

  // 0x10: u32
  set Reserved(value: number) {
    this.view.setUint32(16, value, true);
  }

  // 0x14: u32
  set DeinterlaceTechnology(value: number) {
    this.view.setUint32(20, value, true);
  }

  // 0x18: u32
  set ProcAmpControlCaps(value: number) {
    this.view.setUint32(24, value, true);
  }

  // 0x1c: u32
  set VideoProcessorOperations(value: number) {
    this.view.setUint32(28, value, true);
  }

  // 0x20: u32
  set NoiseFilterTechnology(value: number) {
    this.view.setUint32(32, value, true);
  }

  // 0x24: u32
  set DetailFilterTechnology(value: number) {
    this.view.setUint32(36, value, true);
  }
}

/**
 * Windows.Win32.Media.MediaFoundation.DXVA2_Fixed32 (size: 8)
 */
export interface DXVA2_Fixed32 {
  /** _Anonymous_e__Union */
  Anonymous: Uint8Array | Deno.PointerValue;
}

export const sizeofDXVA2_Fixed32 = 8;

export function allocDXVA2_Fixed32(data?: Partial<DXVA2_Fixed32>): Uint8Array {
  const buf = new Uint8Array(sizeofDXVA2_Fixed32);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.Anonymous !== undefined) view.setBigUint64(0, data.Anonymous === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.Anonymous))), true);
  return buf;
}

export class DXVA2_Fixed32View {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get Anonymous(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(0, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: pointer
  set Anonymous(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(0, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.Media.MediaFoundation.DXVA2_AYUVSample8 (size: 8)
 */
export interface DXVA2_AYUVSample8 {
  /** u8 */
  Cr: number;
  /** u8 */
  Cb: number;
  /** u8 */
  Y: number;
  /** u8 */
  Alpha: number;
}

export const sizeofDXVA2_AYUVSample8 = 8;

export function allocDXVA2_AYUVSample8(data?: Partial<DXVA2_AYUVSample8>): Uint8Array {
  const buf = new Uint8Array(sizeofDXVA2_AYUVSample8);
  const view = new DataView(buf.buffer);
  // 0x00: u8
  if (data?.Cr !== undefined) view.setUint8(0, Number(data.Cr));
  // 0x01: u8
  if (data?.Cb !== undefined) view.setUint8(1, Number(data.Cb));
  // 0x02: u8
  if (data?.Y !== undefined) view.setUint8(2, Number(data.Y));
  // 0x03: u8
  if (data?.Alpha !== undefined) view.setUint8(3, Number(data.Alpha));
  // 0x04: pad4
  return buf;
}

export class DXVA2_AYUVSample8View {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u8
  get Cr(): number {
    return this.view.getUint8(0);
  }

  // 0x01: u8
  get Cb(): number {
    return this.view.getUint8(1);
  }

  // 0x02: u8
  get Y(): number {
    return this.view.getUint8(2);
  }

  // 0x03: u8
  get Alpha(): number {
    return this.view.getUint8(3);
  }

  // 0x04: pad4

  // 0x00: u8
  set Cr(value: number) {
    this.view.setUint8(0, value);
  }

  // 0x01: u8
  set Cb(value: number) {
    this.view.setUint8(1, value);
  }

  // 0x02: u8
  set Y(value: number) {
    this.view.setUint8(2, value);
  }

  // 0x03: u8
  set Alpha(value: number) {
    this.view.setUint8(3, value);
  }

  // 0x04: pad4
}

/**
 * Windows.Win32.Media.MediaFoundation.DXVA2_AYUVSample16 (size: 8)
 */
export interface DXVA2_AYUVSample16 {
  /** u16 */
  Cr: number;
  /** u16 */
  Cb: number;
  /** u16 */
  Y: number;
  /** u16 */
  Alpha: number;
}

export const sizeofDXVA2_AYUVSample16 = 8;

export function allocDXVA2_AYUVSample16(data?: Partial<DXVA2_AYUVSample16>): Uint8Array {
  const buf = new Uint8Array(sizeofDXVA2_AYUVSample16);
  const view = new DataView(buf.buffer);
  // 0x00: u16
  if (data?.Cr !== undefined) view.setUint16(0, Number(data.Cr), true);
  // 0x02: u16
  if (data?.Cb !== undefined) view.setUint16(2, Number(data.Cb), true);
  // 0x04: u16
  if (data?.Y !== undefined) view.setUint16(4, Number(data.Y), true);
  // 0x06: u16
  if (data?.Alpha !== undefined) view.setUint16(6, Number(data.Alpha), true);
  return buf;
}

export class DXVA2_AYUVSample16View {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u16
  get Cr(): number {
    return this.view.getUint16(0, true);
  }

  // 0x02: u16
  get Cb(): number {
    return this.view.getUint16(2, true);
  }

  // 0x04: u16
  get Y(): number {
    return this.view.getUint16(4, true);
  }

  // 0x06: u16
  get Alpha(): number {
    return this.view.getUint16(6, true);
  }

  // 0x00: u16
  set Cr(value: number) {
    this.view.setUint16(0, value, true);
  }

  // 0x02: u16
  set Cb(value: number) {
    this.view.setUint16(2, value, true);
  }

  // 0x04: u16
  set Y(value: number) {
    this.view.setUint16(4, value, true);
  }

  // 0x06: u16
  set Alpha(value: number) {
    this.view.setUint16(6, value, true);
  }
}

/**
 * Windows.Win32.Media.MediaFoundation.DXVA2_VideoSample (size: 72)
 */
export interface DXVA2_VideoSample {
  /** i64 */
  Start: bigint | number;
  /** i64 */
  End: bigint | number;
  /** Windows.Win32.Media.MediaFoundation.DXVA2_ExtendedFormat */
  SampleFormat: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.Graphics.Direct3D9.IDirect3DSurface9 */
  SrcSurface: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.Foundation.RECT */
  SrcRect: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.Foundation.RECT */
  DstRect: Uint8Array | Deno.PointerValue;
  /** array */
  Pal: Deno.PointerValue;
  /** Windows.Win32.Media.MediaFoundation.DXVA2_Fixed32 */
  PlanarAlpha: Uint8Array | Deno.PointerValue;
  /** u32 */
  SampleData: number;
}

export const sizeofDXVA2_VideoSample = 72;

export function allocDXVA2_VideoSample(data?: Partial<DXVA2_VideoSample>): Uint8Array {
  const buf = new Uint8Array(sizeofDXVA2_VideoSample);
  const view = new DataView(buf.buffer);
  // 0x00: i64
  if (data?.Start !== undefined) view.setBigInt64(0, BigInt(data.Start), true);
  // 0x08: i64
  if (data?.End !== undefined) view.setBigInt64(8, BigInt(data.End), true);
  // 0x10: pointer
  if (data?.SampleFormat !== undefined) view.setBigUint64(16, data.SampleFormat === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.SampleFormat))), true);
  // 0x18: pointer
  if (data?.SrcSurface !== undefined) view.setBigUint64(24, data.SrcSurface === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.SrcSurface))), true);
  // 0x20: pointer
  if (data?.SrcRect !== undefined) view.setBigUint64(32, data.SrcRect === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.SrcRect))), true);
  // 0x28: pointer
  if (data?.DstRect !== undefined) view.setBigUint64(40, data.DstRect === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.DstRect))), true);
  // 0x30: pointer
  if (data?.Pal !== undefined) view.setBigUint64(48, data.Pal === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.Pal))), true);
  // 0x38: pointer
  if (data?.PlanarAlpha !== undefined) view.setBigUint64(56, data.PlanarAlpha === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.PlanarAlpha))), true);
  // 0x40: u32
  if (data?.SampleData !== undefined) view.setUint32(64, Number(data.SampleData), true);
  // 0x44: pad4
  return buf;
}

export class DXVA2_VideoSampleView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: i64
  get Start(): bigint | number {
    return Number(this.view.getBigInt64(0, true));
  }

  // 0x08: i64
  get End(): bigint | number {
    return Number(this.view.getBigInt64(8, true));
  }

  // 0x10: pointer
  get SampleFormat(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(16, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x18: pointer
  get SrcSurface(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(24, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x20: pointer
  get SrcRect(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(32, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x28: pointer
  get DstRect(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(40, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x30: pointer
  get Pal(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(48, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x38: pointer
  get PlanarAlpha(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(56, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x40: u32
  get SampleData(): number {
    return this.view.getUint32(64, true);
  }

  // 0x44: pad4

  // 0x00: i64
  set Start(value: bigint | number) {
    this.view.setBigInt64(0, BigInt(value), true);
  }

  // 0x08: i64
  set End(value: bigint | number) {
    this.view.setBigInt64(8, BigInt(value), true);
  }

  // 0x10: pointer
  set SampleFormat(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(16, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x18: pointer
  set SrcSurface(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(24, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x20: pointer
  set SrcRect(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(32, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x28: pointer
  set DstRect(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(40, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x30: pointer
  set Pal(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(48, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x38: pointer
  set PlanarAlpha(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(56, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x40: u32
  set SampleData(value: number) {
    this.view.setUint32(64, value, true);
  }

  // 0x44: pad4
}

/**
 * Windows.Win32.Media.MediaFoundation.DXVA2_ValueRange (size: 32)
 */
export interface DXVA2_ValueRange {
  /** Windows.Win32.Media.MediaFoundation.DXVA2_Fixed32 */
  MinValue: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.Media.MediaFoundation.DXVA2_Fixed32 */
  MaxValue: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.Media.MediaFoundation.DXVA2_Fixed32 */
  DefaultValue: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.Media.MediaFoundation.DXVA2_Fixed32 */
  StepSize: Uint8Array | Deno.PointerValue;
}

export const sizeofDXVA2_ValueRange = 32;

export function allocDXVA2_ValueRange(data?: Partial<DXVA2_ValueRange>): Uint8Array {
  const buf = new Uint8Array(sizeofDXVA2_ValueRange);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.MinValue !== undefined) view.setBigUint64(0, data.MinValue === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.MinValue))), true);
  // 0x08: pointer
  if (data?.MaxValue !== undefined) view.setBigUint64(8, data.MaxValue === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.MaxValue))), true);
  // 0x10: pointer
  if (data?.DefaultValue !== undefined) view.setBigUint64(16, data.DefaultValue === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.DefaultValue))), true);
  // 0x18: pointer
  if (data?.StepSize !== undefined) view.setBigUint64(24, data.StepSize === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.StepSize))), true);
  return buf;
}

export class DXVA2_ValueRangeView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get MinValue(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(0, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x08: pointer
  get MaxValue(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x10: pointer
  get DefaultValue(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(16, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x18: pointer
  get StepSize(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(24, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: pointer
  set MinValue(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(0, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x08: pointer
  set MaxValue(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x10: pointer
  set DefaultValue(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(16, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x18: pointer
  set StepSize(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(24, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.Media.MediaFoundation.DXVA2_ProcAmpValues (size: 32)
 */
export interface DXVA2_ProcAmpValues {
  /** Windows.Win32.Media.MediaFoundation.DXVA2_Fixed32 */
  Brightness: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.Media.MediaFoundation.DXVA2_Fixed32 */
  Contrast: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.Media.MediaFoundation.DXVA2_Fixed32 */
  Hue: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.Media.MediaFoundation.DXVA2_Fixed32 */
  Saturation: Uint8Array | Deno.PointerValue;
}

export const sizeofDXVA2_ProcAmpValues = 32;

export function allocDXVA2_ProcAmpValues(data?: Partial<DXVA2_ProcAmpValues>): Uint8Array {
  const buf = new Uint8Array(sizeofDXVA2_ProcAmpValues);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.Brightness !== undefined) view.setBigUint64(0, data.Brightness === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.Brightness))), true);
  // 0x08: pointer
  if (data?.Contrast !== undefined) view.setBigUint64(8, data.Contrast === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.Contrast))), true);
  // 0x10: pointer
  if (data?.Hue !== undefined) view.setBigUint64(16, data.Hue === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.Hue))), true);
  // 0x18: pointer
  if (data?.Saturation !== undefined) view.setBigUint64(24, data.Saturation === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.Saturation))), true);
  return buf;
}

export class DXVA2_ProcAmpValuesView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get Brightness(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(0, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x08: pointer
  get Contrast(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x10: pointer
  get Hue(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(16, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x18: pointer
  get Saturation(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(24, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: pointer
  set Brightness(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(0, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x08: pointer
  set Contrast(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x10: pointer
  set Hue(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(16, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x18: pointer
  set Saturation(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(24, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.Media.MediaFoundation.DXVA2_FilterValues (size: 24)
 */
export interface DXVA2_FilterValues {
  /** Windows.Win32.Media.MediaFoundation.DXVA2_Fixed32 */
  Level: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.Media.MediaFoundation.DXVA2_Fixed32 */
  Threshold: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.Media.MediaFoundation.DXVA2_Fixed32 */
  Radius: Uint8Array | Deno.PointerValue;
}

export const sizeofDXVA2_FilterValues = 24;

export function allocDXVA2_FilterValues(data?: Partial<DXVA2_FilterValues>): Uint8Array {
  const buf = new Uint8Array(sizeofDXVA2_FilterValues);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.Level !== undefined) view.setBigUint64(0, data.Level === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.Level))), true);
  // 0x08: pointer
  if (data?.Threshold !== undefined) view.setBigUint64(8, data.Threshold === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.Threshold))), true);
  // 0x10: pointer
  if (data?.Radius !== undefined) view.setBigUint64(16, data.Radius === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.Radius))), true);
  return buf;
}

export class DXVA2_FilterValuesView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get Level(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(0, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x08: pointer
  get Threshold(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x10: pointer
  get Radius(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(16, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: pointer
  set Level(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(0, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x08: pointer
  set Threshold(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x10: pointer
  set Radius(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(16, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.Media.MediaFoundation.DXVA2_VideoProcessBltParams (size: 104)
 */
export interface DXVA2_VideoProcessBltParams {
  /** i64 */
  TargetFrame: bigint | number;
  /** Windows.Win32.Foundation.RECT */
  TargetRect: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.Foundation.SIZE */
  ConstrictionSize: Uint8Array | Deno.PointerValue;
  /** u32 */
  StreamingFlags: number;
  /** Windows.Win32.Media.MediaFoundation.DXVA2_AYUVSample16 */
  BackgroundColor: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.Media.MediaFoundation.DXVA2_ExtendedFormat */
  DestFormat: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.Media.MediaFoundation.DXVA2_ProcAmpValues */
  ProcAmpValues: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.Media.MediaFoundation.DXVA2_Fixed32 */
  Alpha: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.Media.MediaFoundation.DXVA2_FilterValues */
  NoiseFilterLuma: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.Media.MediaFoundation.DXVA2_FilterValues */
  NoiseFilterChroma: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.Media.MediaFoundation.DXVA2_FilterValues */
  DetailFilterLuma: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.Media.MediaFoundation.DXVA2_FilterValues */
  DetailFilterChroma: Uint8Array | Deno.PointerValue;
  /** u32 */
  DestData: number;
}

export const sizeofDXVA2_VideoProcessBltParams = 104;

export function allocDXVA2_VideoProcessBltParams(data?: Partial<DXVA2_VideoProcessBltParams>): Uint8Array {
  const buf = new Uint8Array(sizeofDXVA2_VideoProcessBltParams);
  const view = new DataView(buf.buffer);
  // 0x00: i64
  if (data?.TargetFrame !== undefined) view.setBigInt64(0, BigInt(data.TargetFrame), true);
  // 0x08: pointer
  if (data?.TargetRect !== undefined) view.setBigUint64(8, data.TargetRect === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.TargetRect))), true);
  // 0x10: pointer
  if (data?.ConstrictionSize !== undefined) view.setBigUint64(16, data.ConstrictionSize === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.ConstrictionSize))), true);
  // 0x18: u32
  if (data?.StreamingFlags !== undefined) view.setUint32(24, Number(data.StreamingFlags), true);
  // 0x1c: pad4
  // 0x20: pointer
  if (data?.BackgroundColor !== undefined) view.setBigUint64(32, data.BackgroundColor === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.BackgroundColor))), true);
  // 0x28: pointer
  if (data?.DestFormat !== undefined) view.setBigUint64(40, data.DestFormat === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.DestFormat))), true);
  // 0x30: pointer
  if (data?.ProcAmpValues !== undefined) view.setBigUint64(48, data.ProcAmpValues === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.ProcAmpValues))), true);
  // 0x38: pointer
  if (data?.Alpha !== undefined) view.setBigUint64(56, data.Alpha === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.Alpha))), true);
  // 0x40: pointer
  if (data?.NoiseFilterLuma !== undefined) view.setBigUint64(64, data.NoiseFilterLuma === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.NoiseFilterLuma))), true);
  // 0x48: pointer
  if (data?.NoiseFilterChroma !== undefined) view.setBigUint64(72, data.NoiseFilterChroma === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.NoiseFilterChroma))), true);
  // 0x50: pointer
  if (data?.DetailFilterLuma !== undefined) view.setBigUint64(80, data.DetailFilterLuma === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.DetailFilterLuma))), true);
  // 0x58: pointer
  if (data?.DetailFilterChroma !== undefined) view.setBigUint64(88, data.DetailFilterChroma === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.DetailFilterChroma))), true);
  // 0x60: u32
  if (data?.DestData !== undefined) view.setUint32(96, Number(data.DestData), true);
  // 0x64: pad4
  return buf;
}

export class DXVA2_VideoProcessBltParamsView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: i64
  get TargetFrame(): bigint | number {
    return Number(this.view.getBigInt64(0, true));
  }

  // 0x08: pointer
  get TargetRect(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x10: pointer
  get ConstrictionSize(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(16, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x18: u32
  get StreamingFlags(): number {
    return this.view.getUint32(24, true);
  }

  // 0x1c: pad4

  // 0x20: pointer
  get BackgroundColor(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(32, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x28: pointer
  get DestFormat(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(40, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x30: pointer
  get ProcAmpValues(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(48, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x38: pointer
  get Alpha(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(56, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x40: pointer
  get NoiseFilterLuma(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(64, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x48: pointer
  get NoiseFilterChroma(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(72, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x50: pointer
  get DetailFilterLuma(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(80, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x58: pointer
  get DetailFilterChroma(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(88, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x60: u32
  get DestData(): number {
    return this.view.getUint32(96, true);
  }

  // 0x64: pad4

  // 0x00: i64
  set TargetFrame(value: bigint | number) {
    this.view.setBigInt64(0, BigInt(value), true);
  }

  // 0x08: pointer
  set TargetRect(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x10: pointer
  set ConstrictionSize(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(16, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x18: u32
  set StreamingFlags(value: number) {
    this.view.setUint32(24, value, true);
  }

  // 0x1c: pad4

  // 0x20: pointer
  set BackgroundColor(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(32, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x28: pointer
  set DestFormat(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(40, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x30: pointer
  set ProcAmpValues(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(48, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x38: pointer
  set Alpha(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(56, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x40: pointer
  set NoiseFilterLuma(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(64, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x48: pointer
  set NoiseFilterChroma(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(72, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x50: pointer
  set DetailFilterLuma(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(80, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x58: pointer
  set DetailFilterChroma(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(88, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x60: u32
  set DestData(value: number) {
    this.view.setUint32(96, value, true);
  }

  // 0x64: pad4
}

/**
 * Windows.Win32.Media.MediaFoundation.DXVA2_ConfigPictureDecode (size: 80)
 */
export interface DXVA2_ConfigPictureDecode {
  /** System.Guid */
  guidConfigBitstreamEncryption: Uint8Array | Deno.PointerValue;
  /** System.Guid */
  guidConfigMBcontrolEncryption: Uint8Array | Deno.PointerValue;
  /** System.Guid */
  guidConfigResidDiffEncryption: Uint8Array | Deno.PointerValue;
  /** u32 */
  ConfigBitstreamRaw: number;
  /** u32 */
  ConfigMBcontrolRasterOrder: number;
  /** u32 */
  ConfigResidDiffHost: number;
  /** u32 */
  ConfigSpatialResid8: number;
  /** u32 */
  ConfigResid8Subtraction: number;
  /** u32 */
  ConfigSpatialHost8or9Clipping: number;
  /** u32 */
  ConfigSpatialResidInterleaved: number;
  /** u32 */
  ConfigIntraResidUnsigned: number;
  /** u32 */
  ConfigResidDiffAccelerator: number;
  /** u32 */
  ConfigHostInverseScan: number;
  /** u32 */
  ConfigSpecificIDCT: number;
  /** u32 */
  Config4GroupedCoefs: number;
  /** u16 */
  ConfigMinRenderTargetBuffCount: number;
  /** u16 */
  ConfigDecoderSpecific: number;
}

export const sizeofDXVA2_ConfigPictureDecode = 80;

export function allocDXVA2_ConfigPictureDecode(data?: Partial<DXVA2_ConfigPictureDecode>): Uint8Array {
  const buf = new Uint8Array(sizeofDXVA2_ConfigPictureDecode);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.guidConfigBitstreamEncryption !== undefined) view.setBigUint64(0, data.guidConfigBitstreamEncryption === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.guidConfigBitstreamEncryption))), true);
  // 0x08: pointer
  if (data?.guidConfigMBcontrolEncryption !== undefined) view.setBigUint64(8, data.guidConfigMBcontrolEncryption === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.guidConfigMBcontrolEncryption))), true);
  // 0x10: pointer
  if (data?.guidConfigResidDiffEncryption !== undefined) view.setBigUint64(16, data.guidConfigResidDiffEncryption === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.guidConfigResidDiffEncryption))), true);
  // 0x18: u32
  if (data?.ConfigBitstreamRaw !== undefined) view.setUint32(24, Number(data.ConfigBitstreamRaw), true);
  // 0x1c: u32
  if (data?.ConfigMBcontrolRasterOrder !== undefined) view.setUint32(28, Number(data.ConfigMBcontrolRasterOrder), true);
  // 0x20: u32
  if (data?.ConfigResidDiffHost !== undefined) view.setUint32(32, Number(data.ConfigResidDiffHost), true);
  // 0x24: u32
  if (data?.ConfigSpatialResid8 !== undefined) view.setUint32(36, Number(data.ConfigSpatialResid8), true);
  // 0x28: u32
  if (data?.ConfigResid8Subtraction !== undefined) view.setUint32(40, Number(data.ConfigResid8Subtraction), true);
  // 0x2c: u32
  if (data?.ConfigSpatialHost8or9Clipping !== undefined) view.setUint32(44, Number(data.ConfigSpatialHost8or9Clipping), true);
  // 0x30: u32
  if (data?.ConfigSpatialResidInterleaved !== undefined) view.setUint32(48, Number(data.ConfigSpatialResidInterleaved), true);
  // 0x34: u32
  if (data?.ConfigIntraResidUnsigned !== undefined) view.setUint32(52, Number(data.ConfigIntraResidUnsigned), true);
  // 0x38: u32
  if (data?.ConfigResidDiffAccelerator !== undefined) view.setUint32(56, Number(data.ConfigResidDiffAccelerator), true);
  // 0x3c: u32
  if (data?.ConfigHostInverseScan !== undefined) view.setUint32(60, Number(data.ConfigHostInverseScan), true);
  // 0x40: u32
  if (data?.ConfigSpecificIDCT !== undefined) view.setUint32(64, Number(data.ConfigSpecificIDCT), true);
  // 0x44: u32
  if (data?.Config4GroupedCoefs !== undefined) view.setUint32(68, Number(data.Config4GroupedCoefs), true);
  // 0x48: u16
  if (data?.ConfigMinRenderTargetBuffCount !== undefined) view.setUint16(72, Number(data.ConfigMinRenderTargetBuffCount), true);
  // 0x4a: u16
  if (data?.ConfigDecoderSpecific !== undefined) view.setUint16(74, Number(data.ConfigDecoderSpecific), true);
  // 0x4c: pad4
  return buf;
}

export class DXVA2_ConfigPictureDecodeView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get guidConfigBitstreamEncryption(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(0, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x08: pointer
  get guidConfigMBcontrolEncryption(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x10: pointer
  get guidConfigResidDiffEncryption(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(16, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x18: u32
  get ConfigBitstreamRaw(): number {
    return this.view.getUint32(24, true);
  }

  // 0x1c: u32
  get ConfigMBcontrolRasterOrder(): number {
    return this.view.getUint32(28, true);
  }

  // 0x20: u32
  get ConfigResidDiffHost(): number {
    return this.view.getUint32(32, true);
  }

  // 0x24: u32
  get ConfigSpatialResid8(): number {
    return this.view.getUint32(36, true);
  }

  // 0x28: u32
  get ConfigResid8Subtraction(): number {
    return this.view.getUint32(40, true);
  }

  // 0x2c: u32
  get ConfigSpatialHost8or9Clipping(): number {
    return this.view.getUint32(44, true);
  }

  // 0x30: u32
  get ConfigSpatialResidInterleaved(): number {
    return this.view.getUint32(48, true);
  }

  // 0x34: u32
  get ConfigIntraResidUnsigned(): number {
    return this.view.getUint32(52, true);
  }

  // 0x38: u32
  get ConfigResidDiffAccelerator(): number {
    return this.view.getUint32(56, true);
  }

  // 0x3c: u32
  get ConfigHostInverseScan(): number {
    return this.view.getUint32(60, true);
  }

  // 0x40: u32
  get ConfigSpecificIDCT(): number {
    return this.view.getUint32(64, true);
  }

  // 0x44: u32
  get Config4GroupedCoefs(): number {
    return this.view.getUint32(68, true);
  }

  // 0x48: u16
  get ConfigMinRenderTargetBuffCount(): number {
    return this.view.getUint16(72, true);
  }

  // 0x4a: u16
  get ConfigDecoderSpecific(): number {
    return this.view.getUint16(74, true);
  }

  // 0x4c: pad4

  // 0x00: pointer
  set guidConfigBitstreamEncryption(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(0, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x08: pointer
  set guidConfigMBcontrolEncryption(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x10: pointer
  set guidConfigResidDiffEncryption(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(16, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x18: u32
  set ConfigBitstreamRaw(value: number) {
    this.view.setUint32(24, value, true);
  }

  // 0x1c: u32
  set ConfigMBcontrolRasterOrder(value: number) {
    this.view.setUint32(28, value, true);
  }

  // 0x20: u32
  set ConfigResidDiffHost(value: number) {
    this.view.setUint32(32, value, true);
  }

  // 0x24: u32
  set ConfigSpatialResid8(value: number) {
    this.view.setUint32(36, value, true);
  }

  // 0x28: u32
  set ConfigResid8Subtraction(value: number) {
    this.view.setUint32(40, value, true);
  }

  // 0x2c: u32
  set ConfigSpatialHost8or9Clipping(value: number) {
    this.view.setUint32(44, value, true);
  }

  // 0x30: u32
  set ConfigSpatialResidInterleaved(value: number) {
    this.view.setUint32(48, value, true);
  }

  // 0x34: u32
  set ConfigIntraResidUnsigned(value: number) {
    this.view.setUint32(52, value, true);
  }

  // 0x38: u32
  set ConfigResidDiffAccelerator(value: number) {
    this.view.setUint32(56, value, true);
  }

  // 0x3c: u32
  set ConfigHostInverseScan(value: number) {
    this.view.setUint32(60, value, true);
  }

  // 0x40: u32
  set ConfigSpecificIDCT(value: number) {
    this.view.setUint32(64, value, true);
  }

  // 0x44: u32
  set Config4GroupedCoefs(value: number) {
    this.view.setUint32(68, value, true);
  }

  // 0x48: u16
  set ConfigMinRenderTargetBuffCount(value: number) {
    this.view.setUint16(72, value, true);
  }

  // 0x4a: u16
  set ConfigDecoderSpecific(value: number) {
    this.view.setUint16(74, value, true);
  }

  // 0x4c: pad4
}

/**
 * Windows.Win32.Media.MediaFoundation.DXVA2_DecodeBufferDesc (size: 48)
 */
export interface DXVA2_DecodeBufferDesc {
  /** Windows.Win32.Media.MediaFoundation.DXVA2_BufferfType */
  CompressedBufferType: DXVA2_BufferfType;
  /** u32 */
  BufferIndex: number;
  /** u32 */
  DataOffset: number;
  /** u32 */
  DataSize: number;
  /** u32 */
  FirstMBaddress: number;
  /** u32 */
  NumMBsInBuffer: number;
  /** u32 */
  Width: number;
  /** u32 */
  Height: number;
  /** u32 */
  Stride: number;
  /** u32 */
  ReservedBits: number;
  /** ptr */
  pvPVPState: Deno.PointerValue | Uint8Array;
}

export const sizeofDXVA2_DecodeBufferDesc = 48;

export function allocDXVA2_DecodeBufferDesc(data?: Partial<DXVA2_DecodeBufferDesc>): Uint8Array {
  const buf = new Uint8Array(sizeofDXVA2_DecodeBufferDesc);
  const view = new DataView(buf.buffer);
  // 0x00: i32
  if (data?.CompressedBufferType !== undefined) view.setInt32(0, Number(data.CompressedBufferType), true);
  // 0x04: u32
  if (data?.BufferIndex !== undefined) view.setUint32(4, Number(data.BufferIndex), true);
  // 0x08: u32
  if (data?.DataOffset !== undefined) view.setUint32(8, Number(data.DataOffset), true);
  // 0x0c: u32
  if (data?.DataSize !== undefined) view.setUint32(12, Number(data.DataSize), true);
  // 0x10: u32
  if (data?.FirstMBaddress !== undefined) view.setUint32(16, Number(data.FirstMBaddress), true);
  // 0x14: u32
  if (data?.NumMBsInBuffer !== undefined) view.setUint32(20, Number(data.NumMBsInBuffer), true);
  // 0x18: u32
  if (data?.Width !== undefined) view.setUint32(24, Number(data.Width), true);
  // 0x1c: u32
  if (data?.Height !== undefined) view.setUint32(28, Number(data.Height), true);
  // 0x20: u32
  if (data?.Stride !== undefined) view.setUint32(32, Number(data.Stride), true);
  // 0x24: u32
  if (data?.ReservedBits !== undefined) view.setUint32(36, Number(data.ReservedBits), true);
  // 0x28: pointer
  if (data?.pvPVPState !== undefined) view.setBigUint64(40, data.pvPVPState === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.pvPVPState))), true);
  return buf;
}

export class DXVA2_DecodeBufferDescView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: i32
  get CompressedBufferType(): number {
    return this.view.getInt32(0, true);
  }

  // 0x04: u32
  get BufferIndex(): number {
    return this.view.getUint32(4, true);
  }

  // 0x08: u32
  get DataOffset(): number {
    return this.view.getUint32(8, true);
  }

  // 0x0c: u32
  get DataSize(): number {
    return this.view.getUint32(12, true);
  }

  // 0x10: u32
  get FirstMBaddress(): number {
    return this.view.getUint32(16, true);
  }

  // 0x14: u32
  get NumMBsInBuffer(): number {
    return this.view.getUint32(20, true);
  }

  // 0x18: u32
  get Width(): number {
    return this.view.getUint32(24, true);
  }

  // 0x1c: u32
  get Height(): number {
    return this.view.getUint32(28, true);
  }

  // 0x20: u32
  get Stride(): number {
    return this.view.getUint32(32, true);
  }

  // 0x24: u32
  get ReservedBits(): number {
    return this.view.getUint32(36, true);
  }

  // 0x28: pointer
  get pvPVPState(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(40, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: i32
  set CompressedBufferType(value: number) {
    this.view.setInt32(0, value, true);
  }

  // 0x04: u32
  set BufferIndex(value: number) {
    this.view.setUint32(4, value, true);
  }

  // 0x08: u32
  set DataOffset(value: number) {
    this.view.setUint32(8, value, true);
  }

  // 0x0c: u32
  set DataSize(value: number) {
    this.view.setUint32(12, value, true);
  }

  // 0x10: u32
  set FirstMBaddress(value: number) {
    this.view.setUint32(16, value, true);
  }

  // 0x14: u32
  set NumMBsInBuffer(value: number) {
    this.view.setUint32(20, value, true);
  }

  // 0x18: u32
  set Width(value: number) {
    this.view.setUint32(24, value, true);
  }

  // 0x1c: u32
  set Height(value: number) {
    this.view.setUint32(28, value, true);
  }

  // 0x20: u32
  set Stride(value: number) {
    this.view.setUint32(32, value, true);
  }

  // 0x24: u32
  set ReservedBits(value: number) {
    this.view.setUint32(36, value, true);
  }

  // 0x28: pointer
  set pvPVPState(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(40, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.Media.MediaFoundation.DXVA2_AES_CTR_IV (size: 16)
 */
export interface DXVA2_AES_CTR_IV {
  /** u64 */
  IV: bigint | number;
  /** u64 */
  Count: bigint | number;
}

export const sizeofDXVA2_AES_CTR_IV = 16;

export function allocDXVA2_AES_CTR_IV(data?: Partial<DXVA2_AES_CTR_IV>): Uint8Array {
  const buf = new Uint8Array(sizeofDXVA2_AES_CTR_IV);
  const view = new DataView(buf.buffer);
  // 0x00: u64
  if (data?.IV !== undefined) view.setBigUint64(0, BigInt(data.IV), true);
  // 0x08: u64
  if (data?.Count !== undefined) view.setBigUint64(8, BigInt(data.Count), true);
  return buf;
}

export class DXVA2_AES_CTR_IVView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u64
  get IV(): bigint | number {
    return Number(this.view.getBigUint64(0, true));
  }

  // 0x08: u64
  get Count(): bigint | number {
    return Number(this.view.getBigUint64(8, true));
  }

  // 0x00: u64
  set IV(value: bigint | number) {
    this.view.setBigUint64(0, BigInt(value), true);
  }

  // 0x08: u64
  set Count(value: bigint | number) {
    this.view.setBigUint64(8, BigInt(value), true);
  }
}

/**
 * Windows.Win32.Media.MediaFoundation.DXVA2_DecodeExtensionData (size: 40)
 */
export interface DXVA2_DecodeExtensionData {
  /** u32 */
  Function: number;
  /** ptr */
  pPrivateInputData: Deno.PointerValue | Uint8Array;
  /** u32 */
  PrivateInputDataSize: number;
  /** ptr */
  pPrivateOutputData: Deno.PointerValue | Uint8Array;
  /** u32 */
  PrivateOutputDataSize: number;
}

export const sizeofDXVA2_DecodeExtensionData = 40;

export function allocDXVA2_DecodeExtensionData(data?: Partial<DXVA2_DecodeExtensionData>): Uint8Array {
  const buf = new Uint8Array(sizeofDXVA2_DecodeExtensionData);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.Function !== undefined) view.setUint32(0, Number(data.Function), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.pPrivateInputData !== undefined) view.setBigUint64(8, data.pPrivateInputData === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.pPrivateInputData))), true);
  // 0x10: u32
  if (data?.PrivateInputDataSize !== undefined) view.setUint32(16, Number(data.PrivateInputDataSize), true);
  // 0x14: pad4
  // 0x18: pointer
  if (data?.pPrivateOutputData !== undefined) view.setBigUint64(24, data.pPrivateOutputData === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.pPrivateOutputData))), true);
  // 0x20: u32
  if (data?.PrivateOutputDataSize !== undefined) view.setUint32(32, Number(data.PrivateOutputDataSize), true);
  // 0x24: pad4
  return buf;
}

export class DXVA2_DecodeExtensionDataView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get Function(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  get pPrivateInputData(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x10: u32
  get PrivateInputDataSize(): number {
    return this.view.getUint32(16, true);
  }

  // 0x14: pad4

  // 0x18: pointer
  get pPrivateOutputData(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(24, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x20: u32
  get PrivateOutputDataSize(): number {
    return this.view.getUint32(32, true);
  }

  // 0x24: pad4

  // 0x00: u32
  set Function(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  set pPrivateInputData(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x10: u32
  set PrivateInputDataSize(value: number) {
    this.view.setUint32(16, value, true);
  }

  // 0x14: pad4

  // 0x18: pointer
  set pPrivateOutputData(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(24, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x20: u32
  set PrivateOutputDataSize(value: number) {
    this.view.setUint32(32, value, true);
  }

  // 0x24: pad4
}

/**
 * Windows.Win32.Media.MediaFoundation.DXVA2_DecodeExecuteParams (size: 24)
 */
export interface DXVA2_DecodeExecuteParams {
  /** u32 */
  NumCompBuffers: number;
  /** ptr */
  pCompressedBuffers: Deno.PointerValue | Uint8Array;
  /** ptr */
  pExtensionData: Deno.PointerValue | Uint8Array;
}

export const sizeofDXVA2_DecodeExecuteParams = 24;

export function allocDXVA2_DecodeExecuteParams(data?: Partial<DXVA2_DecodeExecuteParams>): Uint8Array {
  const buf = new Uint8Array(sizeofDXVA2_DecodeExecuteParams);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.NumCompBuffers !== undefined) view.setUint32(0, Number(data.NumCompBuffers), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.pCompressedBuffers !== undefined) view.setBigUint64(8, data.pCompressedBuffers === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.pCompressedBuffers))), true);
  // 0x10: pointer
  if (data?.pExtensionData !== undefined) view.setBigUint64(16, data.pExtensionData === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.pExtensionData))), true);
  return buf;
}

export class DXVA2_DecodeExecuteParamsView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get NumCompBuffers(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  get pCompressedBuffers(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x10: pointer
  get pExtensionData(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(16, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: u32
  set NumCompBuffers(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  set pCompressedBuffers(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x10: pointer
  set pExtensionData(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(16, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.Media.MediaFoundation.OPM_RANDOM_NUMBER (size: 8)
 */
export interface OPM_RANDOM_NUMBER {
  /** array */
  abRandomNumber: Deno.PointerValue;
}

export const sizeofOPM_RANDOM_NUMBER = 8;

export function allocOPM_RANDOM_NUMBER(data?: Partial<OPM_RANDOM_NUMBER>): Uint8Array {
  const buf = new Uint8Array(sizeofOPM_RANDOM_NUMBER);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.abRandomNumber !== undefined) view.setBigUint64(0, data.abRandomNumber === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.abRandomNumber))), true);
  return buf;
}

export class OPM_RANDOM_NUMBERView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get abRandomNumber(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(0, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: pointer
  set abRandomNumber(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(0, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.Media.MediaFoundation.OPM_OMAC (size: 8)
 */
export interface OPM_OMAC {
  /** array */
  abOMAC: Deno.PointerValue;
}

export const sizeofOPM_OMAC = 8;

export function allocOPM_OMAC(data?: Partial<OPM_OMAC>): Uint8Array {
  const buf = new Uint8Array(sizeofOPM_OMAC);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.abOMAC !== undefined) view.setBigUint64(0, data.abOMAC === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.abOMAC))), true);
  return buf;
}

export class OPM_OMACView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get abOMAC(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(0, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: pointer
  set abOMAC(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(0, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.Media.MediaFoundation.OPM_ENCRYPTED_INITIALIZATION_PARAMETERS (size: 8)
 */
export interface OPM_ENCRYPTED_INITIALIZATION_PARAMETERS {
  /** array */
  abEncryptedInitializationParameters: Deno.PointerValue;
}

export const sizeofOPM_ENCRYPTED_INITIALIZATION_PARAMETERS = 8;

export function allocOPM_ENCRYPTED_INITIALIZATION_PARAMETERS(data?: Partial<OPM_ENCRYPTED_INITIALIZATION_PARAMETERS>): Uint8Array {
  const buf = new Uint8Array(sizeofOPM_ENCRYPTED_INITIALIZATION_PARAMETERS);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.abEncryptedInitializationParameters !== undefined) view.setBigUint64(0, data.abEncryptedInitializationParameters === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.abEncryptedInitializationParameters))), true);
  return buf;
}

export class OPM_ENCRYPTED_INITIALIZATION_PARAMETERSView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get abEncryptedInitializationParameters(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(0, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: pointer
  set abEncryptedInitializationParameters(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(0, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.Media.MediaFoundation.OPM_GET_INFO_PARAMETERS (size: 40)
 */
export interface OPM_GET_INFO_PARAMETERS {
  /** Windows.Win32.Media.MediaFoundation.OPM_OMAC */
  omac: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.Media.MediaFoundation.OPM_RANDOM_NUMBER */
  rnRandomNumber: Uint8Array | Deno.PointerValue;
  /** System.Guid */
  guidInformation: Uint8Array | Deno.PointerValue;
  /** u32 */
  ulSequenceNumber: number;
  /** u32 */
  cbParametersSize: number;
  /** array */
  abParameters: Deno.PointerValue;
}

export const sizeofOPM_GET_INFO_PARAMETERS = 40;

export function allocOPM_GET_INFO_PARAMETERS(data?: Partial<OPM_GET_INFO_PARAMETERS>): Uint8Array {
  const buf = new Uint8Array(sizeofOPM_GET_INFO_PARAMETERS);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.omac !== undefined) view.setBigUint64(0, data.omac === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.omac))), true);
  // 0x08: pointer
  if (data?.rnRandomNumber !== undefined) view.setBigUint64(8, data.rnRandomNumber === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.rnRandomNumber))), true);
  // 0x10: pointer
  if (data?.guidInformation !== undefined) view.setBigUint64(16, data.guidInformation === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.guidInformation))), true);
  // 0x18: u32
  if (data?.ulSequenceNumber !== undefined) view.setUint32(24, Number(data.ulSequenceNumber), true);
  // 0x1c: u32
  if (data?.cbParametersSize !== undefined) view.setUint32(28, Number(data.cbParametersSize), true);
  // 0x20: pointer
  if (data?.abParameters !== undefined) view.setBigUint64(32, data.abParameters === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.abParameters))), true);
  return buf;
}

export class OPM_GET_INFO_PARAMETERSView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get omac(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(0, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x08: pointer
  get rnRandomNumber(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x10: pointer
  get guidInformation(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(16, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x18: u32
  get ulSequenceNumber(): number {
    return this.view.getUint32(24, true);
  }

  // 0x1c: u32
  get cbParametersSize(): number {
    return this.view.getUint32(28, true);
  }

  // 0x20: pointer
  get abParameters(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(32, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: pointer
  set omac(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(0, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x08: pointer
  set rnRandomNumber(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x10: pointer
  set guidInformation(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(16, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x18: u32
  set ulSequenceNumber(value: number) {
    this.view.setUint32(24, value, true);
  }

  // 0x1c: u32
  set cbParametersSize(value: number) {
    this.view.setUint32(28, value, true);
  }

  // 0x20: pointer
  set abParameters(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(32, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.Media.MediaFoundation.OPM_COPP_COMPATIBLE_GET_INFO_PARAMETERS (size: 32)
 */
export interface OPM_COPP_COMPATIBLE_GET_INFO_PARAMETERS {
  /** Windows.Win32.Media.MediaFoundation.OPM_RANDOM_NUMBER */
  rnRandomNumber: Uint8Array | Deno.PointerValue;
  /** System.Guid */
  guidInformation: Uint8Array | Deno.PointerValue;
  /** u32 */
  ulSequenceNumber: number;
  /** u32 */
  cbParametersSize: number;
  /** array */
  abParameters: Deno.PointerValue;
}

export const sizeofOPM_COPP_COMPATIBLE_GET_INFO_PARAMETERS = 32;

export function allocOPM_COPP_COMPATIBLE_GET_INFO_PARAMETERS(data?: Partial<OPM_COPP_COMPATIBLE_GET_INFO_PARAMETERS>): Uint8Array {
  const buf = new Uint8Array(sizeofOPM_COPP_COMPATIBLE_GET_INFO_PARAMETERS);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.rnRandomNumber !== undefined) view.setBigUint64(0, data.rnRandomNumber === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.rnRandomNumber))), true);
  // 0x08: pointer
  if (data?.guidInformation !== undefined) view.setBigUint64(8, data.guidInformation === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.guidInformation))), true);
  // 0x10: u32
  if (data?.ulSequenceNumber !== undefined) view.setUint32(16, Number(data.ulSequenceNumber), true);
  // 0x14: u32
  if (data?.cbParametersSize !== undefined) view.setUint32(20, Number(data.cbParametersSize), true);
  // 0x18: pointer
  if (data?.abParameters !== undefined) view.setBigUint64(24, data.abParameters === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.abParameters))), true);
  return buf;
}

export class OPM_COPP_COMPATIBLE_GET_INFO_PARAMETERSView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get rnRandomNumber(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(0, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x08: pointer
  get guidInformation(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x10: u32
  get ulSequenceNumber(): number {
    return this.view.getUint32(16, true);
  }

  // 0x14: u32
  get cbParametersSize(): number {
    return this.view.getUint32(20, true);
  }

  // 0x18: pointer
  get abParameters(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(24, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: pointer
  set rnRandomNumber(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(0, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x08: pointer
  set guidInformation(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x10: u32
  set ulSequenceNumber(value: number) {
    this.view.setUint32(16, value, true);
  }

  // 0x14: u32
  set cbParametersSize(value: number) {
    this.view.setUint32(20, value, true);
  }

  // 0x18: pointer
  set abParameters(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(24, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.Media.MediaFoundation.OPM_HDCP_KEY_SELECTION_VECTOR (size: 8)
 */
export interface OPM_HDCP_KEY_SELECTION_VECTOR {
  /** array */
  abKeySelectionVector: Deno.PointerValue;
}

export const sizeofOPM_HDCP_KEY_SELECTION_VECTOR = 8;

export function allocOPM_HDCP_KEY_SELECTION_VECTOR(data?: Partial<OPM_HDCP_KEY_SELECTION_VECTOR>): Uint8Array {
  const buf = new Uint8Array(sizeofOPM_HDCP_KEY_SELECTION_VECTOR);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.abKeySelectionVector !== undefined) view.setBigUint64(0, data.abKeySelectionVector === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.abKeySelectionVector))), true);
  return buf;
}

export class OPM_HDCP_KEY_SELECTION_VECTORView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get abKeySelectionVector(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(0, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: pointer
  set abKeySelectionVector(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(0, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.Media.MediaFoundation.OPM_CONNECTED_HDCP_DEVICE_INFORMATION (size: 48)
 */
export interface OPM_CONNECTED_HDCP_DEVICE_INFORMATION {
  /** Windows.Win32.Media.MediaFoundation.OPM_RANDOM_NUMBER */
  rnRandomNumber: Uint8Array | Deno.PointerValue;
  /** u32 */
  ulStatusFlags: number;
  /** u32 */
  ulHDCPFlags: number;
  /** Windows.Win32.Media.MediaFoundation.OPM_HDCP_KEY_SELECTION_VECTOR */
  ksvB: Uint8Array | Deno.PointerValue;
  /** array */
  Reserved: Deno.PointerValue;
  /** array */
  Reserved2: Deno.PointerValue;
  /** array */
  Reserved3: Deno.PointerValue;
}

export const sizeofOPM_CONNECTED_HDCP_DEVICE_INFORMATION = 48;

export function allocOPM_CONNECTED_HDCP_DEVICE_INFORMATION(data?: Partial<OPM_CONNECTED_HDCP_DEVICE_INFORMATION>): Uint8Array {
  const buf = new Uint8Array(sizeofOPM_CONNECTED_HDCP_DEVICE_INFORMATION);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.rnRandomNumber !== undefined) view.setBigUint64(0, data.rnRandomNumber === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.rnRandomNumber))), true);
  // 0x08: u32
  if (data?.ulStatusFlags !== undefined) view.setUint32(8, Number(data.ulStatusFlags), true);
  // 0x0c: u32
  if (data?.ulHDCPFlags !== undefined) view.setUint32(12, Number(data.ulHDCPFlags), true);
  // 0x10: pointer
  if (data?.ksvB !== undefined) view.setBigUint64(16, data.ksvB === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.ksvB))), true);
  // 0x18: pointer
  if (data?.Reserved !== undefined) view.setBigUint64(24, data.Reserved === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.Reserved))), true);
  // 0x20: pointer
  if (data?.Reserved2 !== undefined) view.setBigUint64(32, data.Reserved2 === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.Reserved2))), true);
  // 0x28: pointer
  if (data?.Reserved3 !== undefined) view.setBigUint64(40, data.Reserved3 === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.Reserved3))), true);
  return buf;
}

export class OPM_CONNECTED_HDCP_DEVICE_INFORMATIONView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get rnRandomNumber(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(0, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x08: u32
  get ulStatusFlags(): number {
    return this.view.getUint32(8, true);
  }

  // 0x0c: u32
  get ulHDCPFlags(): number {
    return this.view.getUint32(12, true);
  }

  // 0x10: pointer
  get ksvB(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(16, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x18: pointer
  get Reserved(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(24, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x20: pointer
  get Reserved2(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(32, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x28: pointer
  get Reserved3(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(40, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: pointer
  set rnRandomNumber(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(0, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x08: u32
  set ulStatusFlags(value: number) {
    this.view.setUint32(8, value, true);
  }

  // 0x0c: u32
  set ulHDCPFlags(value: number) {
    this.view.setUint32(12, value, true);
  }

  // 0x10: pointer
  set ksvB(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(16, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x18: pointer
  set Reserved(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(24, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x20: pointer
  set Reserved2(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(32, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x28: pointer
  set Reserved3(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(40, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.Media.MediaFoundation.OPM_REQUESTED_INFORMATION (size: 24)
 */
export interface OPM_REQUESTED_INFORMATION {
  /** Windows.Win32.Media.MediaFoundation.OPM_OMAC */
  omac: Uint8Array | Deno.PointerValue;
  /** u32 */
  cbRequestedInformationSize: number;
  /** array */
  abRequestedInformation: Deno.PointerValue;
}

export const sizeofOPM_REQUESTED_INFORMATION = 24;

export function allocOPM_REQUESTED_INFORMATION(data?: Partial<OPM_REQUESTED_INFORMATION>): Uint8Array {
  const buf = new Uint8Array(sizeofOPM_REQUESTED_INFORMATION);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.omac !== undefined) view.setBigUint64(0, data.omac === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.omac))), true);
  // 0x08: u32
  if (data?.cbRequestedInformationSize !== undefined) view.setUint32(8, Number(data.cbRequestedInformationSize), true);
  // 0x0c: pad4
  // 0x10: pointer
  if (data?.abRequestedInformation !== undefined) view.setBigUint64(16, data.abRequestedInformation === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.abRequestedInformation))), true);
  return buf;
}

export class OPM_REQUESTED_INFORMATIONView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get omac(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(0, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x08: u32
  get cbRequestedInformationSize(): number {
    return this.view.getUint32(8, true);
  }

  // 0x0c: pad4

  // 0x10: pointer
  get abRequestedInformation(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(16, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: pointer
  set omac(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(0, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x08: u32
  set cbRequestedInformationSize(value: number) {
    this.view.setUint32(8, value, true);
  }

  // 0x0c: pad4

  // 0x10: pointer
  set abRequestedInformation(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(16, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.Media.MediaFoundation.OPM_STANDARD_INFORMATION (size: 24)
 */
export interface OPM_STANDARD_INFORMATION {
  /** Windows.Win32.Media.MediaFoundation.OPM_RANDOM_NUMBER */
  rnRandomNumber: Uint8Array | Deno.PointerValue;
  /** u32 */
  ulStatusFlags: number;
  /** u32 */
  ulInformation: number;
  /** u32 */
  ulReserved: number;
  /** u32 */
  ulReserved2: number;
}

export const sizeofOPM_STANDARD_INFORMATION = 24;

export function allocOPM_STANDARD_INFORMATION(data?: Partial<OPM_STANDARD_INFORMATION>): Uint8Array {
  const buf = new Uint8Array(sizeofOPM_STANDARD_INFORMATION);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.rnRandomNumber !== undefined) view.setBigUint64(0, data.rnRandomNumber === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.rnRandomNumber))), true);
  // 0x08: u32
  if (data?.ulStatusFlags !== undefined) view.setUint32(8, Number(data.ulStatusFlags), true);
  // 0x0c: u32
  if (data?.ulInformation !== undefined) view.setUint32(12, Number(data.ulInformation), true);
  // 0x10: u32
  if (data?.ulReserved !== undefined) view.setUint32(16, Number(data.ulReserved), true);
  // 0x14: u32
  if (data?.ulReserved2 !== undefined) view.setUint32(20, Number(data.ulReserved2), true);
  return buf;
}

export class OPM_STANDARD_INFORMATIONView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get rnRandomNumber(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(0, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x08: u32
  get ulStatusFlags(): number {
    return this.view.getUint32(8, true);
  }

  // 0x0c: u32
  get ulInformation(): number {
    return this.view.getUint32(12, true);
  }

  // 0x10: u32
  get ulReserved(): number {
    return this.view.getUint32(16, true);
  }

  // 0x14: u32
  get ulReserved2(): number {
    return this.view.getUint32(20, true);
  }

  // 0x00: pointer
  set rnRandomNumber(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(0, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x08: u32
  set ulStatusFlags(value: number) {
    this.view.setUint32(8, value, true);
  }

  // 0x0c: u32
  set ulInformation(value: number) {
    this.view.setUint32(12, value, true);
  }

  // 0x10: u32
  set ulReserved(value: number) {
    this.view.setUint32(16, value, true);
  }

  // 0x14: u32
  set ulReserved2(value: number) {
    this.view.setUint32(20, value, true);
  }
}

/**
 * Windows.Win32.Media.MediaFoundation.OPM_ACTUAL_OUTPUT_FORMAT (size: 40)
 */
export interface OPM_ACTUAL_OUTPUT_FORMAT {
  /** Windows.Win32.Media.MediaFoundation.OPM_RANDOM_NUMBER */
  rnRandomNumber: Uint8Array | Deno.PointerValue;
  /** u32 */
  ulStatusFlags: number;
  /** u32 */
  ulDisplayWidth: number;
  /** u32 */
  ulDisplayHeight: number;
  /** Windows.Win32.Media.MediaFoundation.DXVA2_SampleFormat */
  dsfSampleInterleaveFormat: DXVA2_SampleFormat;
  /** Windows.Win32.Graphics.Direct3D9.D3DFORMAT */
  d3dFormat: D3DFORMAT;
  /** u32 */
  ulFrequencyNumerator: number;
  /** u32 */
  ulFrequencyDenominator: number;
}

export const sizeofOPM_ACTUAL_OUTPUT_FORMAT = 40;

export function allocOPM_ACTUAL_OUTPUT_FORMAT(data?: Partial<OPM_ACTUAL_OUTPUT_FORMAT>): Uint8Array {
  const buf = new Uint8Array(sizeofOPM_ACTUAL_OUTPUT_FORMAT);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.rnRandomNumber !== undefined) view.setBigUint64(0, data.rnRandomNumber === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.rnRandomNumber))), true);
  // 0x08: u32
  if (data?.ulStatusFlags !== undefined) view.setUint32(8, Number(data.ulStatusFlags), true);
  // 0x0c: u32
  if (data?.ulDisplayWidth !== undefined) view.setUint32(12, Number(data.ulDisplayWidth), true);
  // 0x10: u32
  if (data?.ulDisplayHeight !== undefined) view.setUint32(16, Number(data.ulDisplayHeight), true);
  // 0x14: i32
  if (data?.dsfSampleInterleaveFormat !== undefined) view.setInt32(20, Number(data.dsfSampleInterleaveFormat), true);
  // 0x18: u32
  if (data?.d3dFormat !== undefined) view.setUint32(24, Number(data.d3dFormat), true);
  // 0x1c: u32
  if (data?.ulFrequencyNumerator !== undefined) view.setUint32(28, Number(data.ulFrequencyNumerator), true);
  // 0x20: u32
  if (data?.ulFrequencyDenominator !== undefined) view.setUint32(32, Number(data.ulFrequencyDenominator), true);
  // 0x24: pad4
  return buf;
}

export class OPM_ACTUAL_OUTPUT_FORMATView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get rnRandomNumber(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(0, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x08: u32
  get ulStatusFlags(): number {
    return this.view.getUint32(8, true);
  }

  // 0x0c: u32
  get ulDisplayWidth(): number {
    return this.view.getUint32(12, true);
  }

  // 0x10: u32
  get ulDisplayHeight(): number {
    return this.view.getUint32(16, true);
  }

  // 0x14: i32
  get dsfSampleInterleaveFormat(): number {
    return this.view.getInt32(20, true);
  }

  // 0x18: u32
  get d3dFormat(): number {
    return this.view.getUint32(24, true);
  }

  // 0x1c: u32
  get ulFrequencyNumerator(): number {
    return this.view.getUint32(28, true);
  }

  // 0x20: u32
  get ulFrequencyDenominator(): number {
    return this.view.getUint32(32, true);
  }

  // 0x24: pad4

  // 0x00: pointer
  set rnRandomNumber(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(0, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x08: u32
  set ulStatusFlags(value: number) {
    this.view.setUint32(8, value, true);
  }

  // 0x0c: u32
  set ulDisplayWidth(value: number) {
    this.view.setUint32(12, value, true);
  }

  // 0x10: u32
  set ulDisplayHeight(value: number) {
    this.view.setUint32(16, value, true);
  }

  // 0x14: i32
  set dsfSampleInterleaveFormat(value: number) {
    this.view.setInt32(20, value, true);
  }

  // 0x18: u32
  set d3dFormat(value: number) {
    this.view.setUint32(24, value, true);
  }

  // 0x1c: u32
  set ulFrequencyNumerator(value: number) {
    this.view.setUint32(28, value, true);
  }

  // 0x20: u32
  set ulFrequencyDenominator(value: number) {
    this.view.setUint32(32, value, true);
  }

  // 0x24: pad4
}

/**
 * Windows.Win32.Media.MediaFoundation.OPM_ACP_AND_CGMSA_SIGNALING (size: 64)
 */
export interface OPM_ACP_AND_CGMSA_SIGNALING {
  /** Windows.Win32.Media.MediaFoundation.OPM_RANDOM_NUMBER */
  rnRandomNumber: Uint8Array | Deno.PointerValue;
  /** u32 */
  ulStatusFlags: number;
  /** u32 */
  ulAvailableTVProtectionStandards: number;
  /** u32 */
  ulActiveTVProtectionStandard: number;
  /** u32 */
  ulReserved: number;
  /** u32 */
  ulAspectRatioValidMask1: number;
  /** u32 */
  ulAspectRatioData1: number;
  /** u32 */
  ulAspectRatioValidMask2: number;
  /** u32 */
  ulAspectRatioData2: number;
  /** u32 */
  ulAspectRatioValidMask3: number;
  /** u32 */
  ulAspectRatioData3: number;
  /** array */
  ulReserved2: Deno.PointerValue;
  /** array */
  ulReserved3: Deno.PointerValue;
}

export const sizeofOPM_ACP_AND_CGMSA_SIGNALING = 64;

export function allocOPM_ACP_AND_CGMSA_SIGNALING(data?: Partial<OPM_ACP_AND_CGMSA_SIGNALING>): Uint8Array {
  const buf = new Uint8Array(sizeofOPM_ACP_AND_CGMSA_SIGNALING);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.rnRandomNumber !== undefined) view.setBigUint64(0, data.rnRandomNumber === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.rnRandomNumber))), true);
  // 0x08: u32
  if (data?.ulStatusFlags !== undefined) view.setUint32(8, Number(data.ulStatusFlags), true);
  // 0x0c: u32
  if (data?.ulAvailableTVProtectionStandards !== undefined) view.setUint32(12, Number(data.ulAvailableTVProtectionStandards), true);
  // 0x10: u32
  if (data?.ulActiveTVProtectionStandard !== undefined) view.setUint32(16, Number(data.ulActiveTVProtectionStandard), true);
  // 0x14: u32
  if (data?.ulReserved !== undefined) view.setUint32(20, Number(data.ulReserved), true);
  // 0x18: u32
  if (data?.ulAspectRatioValidMask1 !== undefined) view.setUint32(24, Number(data.ulAspectRatioValidMask1), true);
  // 0x1c: u32
  if (data?.ulAspectRatioData1 !== undefined) view.setUint32(28, Number(data.ulAspectRatioData1), true);
  // 0x20: u32
  if (data?.ulAspectRatioValidMask2 !== undefined) view.setUint32(32, Number(data.ulAspectRatioValidMask2), true);
  // 0x24: u32
  if (data?.ulAspectRatioData2 !== undefined) view.setUint32(36, Number(data.ulAspectRatioData2), true);
  // 0x28: u32
  if (data?.ulAspectRatioValidMask3 !== undefined) view.setUint32(40, Number(data.ulAspectRatioValidMask3), true);
  // 0x2c: u32
  if (data?.ulAspectRatioData3 !== undefined) view.setUint32(44, Number(data.ulAspectRatioData3), true);
  // 0x30: pointer
  if (data?.ulReserved2 !== undefined) view.setBigUint64(48, data.ulReserved2 === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.ulReserved2))), true);
  // 0x38: pointer
  if (data?.ulReserved3 !== undefined) view.setBigUint64(56, data.ulReserved3 === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.ulReserved3))), true);
  return buf;
}

export class OPM_ACP_AND_CGMSA_SIGNALINGView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get rnRandomNumber(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(0, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x08: u32
  get ulStatusFlags(): number {
    return this.view.getUint32(8, true);
  }

  // 0x0c: u32
  get ulAvailableTVProtectionStandards(): number {
    return this.view.getUint32(12, true);
  }

  // 0x10: u32
  get ulActiveTVProtectionStandard(): number {
    return this.view.getUint32(16, true);
  }

  // 0x14: u32
  get ulReserved(): number {
    return this.view.getUint32(20, true);
  }

  // 0x18: u32
  get ulAspectRatioValidMask1(): number {
    return this.view.getUint32(24, true);
  }

  // 0x1c: u32
  get ulAspectRatioData1(): number {
    return this.view.getUint32(28, true);
  }

  // 0x20: u32
  get ulAspectRatioValidMask2(): number {
    return this.view.getUint32(32, true);
  }

  // 0x24: u32
  get ulAspectRatioData2(): number {
    return this.view.getUint32(36, true);
  }

  // 0x28: u32
  get ulAspectRatioValidMask3(): number {
    return this.view.getUint32(40, true);
  }

  // 0x2c: u32
  get ulAspectRatioData3(): number {
    return this.view.getUint32(44, true);
  }

  // 0x30: pointer
  get ulReserved2(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(48, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x38: pointer
  get ulReserved3(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(56, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: pointer
  set rnRandomNumber(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(0, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x08: u32
  set ulStatusFlags(value: number) {
    this.view.setUint32(8, value, true);
  }

  // 0x0c: u32
  set ulAvailableTVProtectionStandards(value: number) {
    this.view.setUint32(12, value, true);
  }

  // 0x10: u32
  set ulActiveTVProtectionStandard(value: number) {
    this.view.setUint32(16, value, true);
  }

  // 0x14: u32
  set ulReserved(value: number) {
    this.view.setUint32(20, value, true);
  }

  // 0x18: u32
  set ulAspectRatioValidMask1(value: number) {
    this.view.setUint32(24, value, true);
  }

  // 0x1c: u32
  set ulAspectRatioData1(value: number) {
    this.view.setUint32(28, value, true);
  }

  // 0x20: u32
  set ulAspectRatioValidMask2(value: number) {
    this.view.setUint32(32, value, true);
  }

  // 0x24: u32
  set ulAspectRatioData2(value: number) {
    this.view.setUint32(36, value, true);
  }

  // 0x28: u32
  set ulAspectRatioValidMask3(value: number) {
    this.view.setUint32(40, value, true);
  }

  // 0x2c: u32
  set ulAspectRatioData3(value: number) {
    this.view.setUint32(44, value, true);
  }

  // 0x30: pointer
  set ulReserved2(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(48, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x38: pointer
  set ulReserved3(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(56, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.Media.MediaFoundation.OPM_OUTPUT_ID_DATA (size: 24)
 */
export interface OPM_OUTPUT_ID_DATA {
  /** Windows.Win32.Media.MediaFoundation.OPM_RANDOM_NUMBER */
  rnRandomNumber: Uint8Array | Deno.PointerValue;
  /** u32 */
  ulStatusFlags: number;
  /** u64 */
  OutputId: bigint | number;
}

export const sizeofOPM_OUTPUT_ID_DATA = 24;

export function allocOPM_OUTPUT_ID_DATA(data?: Partial<OPM_OUTPUT_ID_DATA>): Uint8Array {
  const buf = new Uint8Array(sizeofOPM_OUTPUT_ID_DATA);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.rnRandomNumber !== undefined) view.setBigUint64(0, data.rnRandomNumber === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.rnRandomNumber))), true);
  // 0x08: u32
  if (data?.ulStatusFlags !== undefined) view.setUint32(8, Number(data.ulStatusFlags), true);
  // 0x0c: pad4
  // 0x10: u64
  if (data?.OutputId !== undefined) view.setBigUint64(16, BigInt(data.OutputId), true);
  return buf;
}

export class OPM_OUTPUT_ID_DATAView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get rnRandomNumber(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(0, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x08: u32
  get ulStatusFlags(): number {
    return this.view.getUint32(8, true);
  }

  // 0x0c: pad4

  // 0x10: u64
  get OutputId(): bigint | number {
    return Number(this.view.getBigUint64(16, true));
  }

  // 0x00: pointer
  set rnRandomNumber(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(0, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x08: u32
  set ulStatusFlags(value: number) {
    this.view.setUint32(8, value, true);
  }

  // 0x0c: pad4

  // 0x10: u64
  set OutputId(value: bigint | number) {
    this.view.setBigUint64(16, BigInt(value), true);
  }
}

/**
 * Windows.Win32.Media.MediaFoundation.OPM_CONFIGURE_PARAMETERS (size: 32)
 */
export interface OPM_CONFIGURE_PARAMETERS {
  /** Windows.Win32.Media.MediaFoundation.OPM_OMAC */
  omac: Uint8Array | Deno.PointerValue;
  /** System.Guid */
  guidSetting: Uint8Array | Deno.PointerValue;
  /** u32 */
  ulSequenceNumber: number;
  /** u32 */
  cbParametersSize: number;
  /** array */
  abParameters: Deno.PointerValue;
}

export const sizeofOPM_CONFIGURE_PARAMETERS = 32;

export function allocOPM_CONFIGURE_PARAMETERS(data?: Partial<OPM_CONFIGURE_PARAMETERS>): Uint8Array {
  const buf = new Uint8Array(sizeofOPM_CONFIGURE_PARAMETERS);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.omac !== undefined) view.setBigUint64(0, data.omac === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.omac))), true);
  // 0x08: pointer
  if (data?.guidSetting !== undefined) view.setBigUint64(8, data.guidSetting === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.guidSetting))), true);
  // 0x10: u32
  if (data?.ulSequenceNumber !== undefined) view.setUint32(16, Number(data.ulSequenceNumber), true);
  // 0x14: u32
  if (data?.cbParametersSize !== undefined) view.setUint32(20, Number(data.cbParametersSize), true);
  // 0x18: pointer
  if (data?.abParameters !== undefined) view.setBigUint64(24, data.abParameters === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.abParameters))), true);
  return buf;
}

export class OPM_CONFIGURE_PARAMETERSView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get omac(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(0, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x08: pointer
  get guidSetting(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x10: u32
  get ulSequenceNumber(): number {
    return this.view.getUint32(16, true);
  }

  // 0x14: u32
  get cbParametersSize(): number {
    return this.view.getUint32(20, true);
  }

  // 0x18: pointer
  get abParameters(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(24, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: pointer
  set omac(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(0, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x08: pointer
  set guidSetting(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x10: u32
  set ulSequenceNumber(value: number) {
    this.view.setUint32(16, value, true);
  }

  // 0x14: u32
  set cbParametersSize(value: number) {
    this.view.setUint32(20, value, true);
  }

  // 0x18: pointer
  set abParameters(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(24, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.Media.MediaFoundation.OPM_SET_PROTECTION_LEVEL_PARAMETERS (size: 16)
 */
export interface OPM_SET_PROTECTION_LEVEL_PARAMETERS {
  /** u32 */
  ulProtectionType: number;
  /** u32 */
  ulProtectionLevel: number;
  /** u32 */
  Reserved: number;
  /** u32 */
  Reserved2: number;
}

export const sizeofOPM_SET_PROTECTION_LEVEL_PARAMETERS = 16;

export function allocOPM_SET_PROTECTION_LEVEL_PARAMETERS(data?: Partial<OPM_SET_PROTECTION_LEVEL_PARAMETERS>): Uint8Array {
  const buf = new Uint8Array(sizeofOPM_SET_PROTECTION_LEVEL_PARAMETERS);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.ulProtectionType !== undefined) view.setUint32(0, Number(data.ulProtectionType), true);
  // 0x04: u32
  if (data?.ulProtectionLevel !== undefined) view.setUint32(4, Number(data.ulProtectionLevel), true);
  // 0x08: u32
  if (data?.Reserved !== undefined) view.setUint32(8, Number(data.Reserved), true);
  // 0x0c: u32
  if (data?.Reserved2 !== undefined) view.setUint32(12, Number(data.Reserved2), true);
  return buf;
}

export class OPM_SET_PROTECTION_LEVEL_PARAMETERSView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get ulProtectionType(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: u32
  get ulProtectionLevel(): number {
    return this.view.getUint32(4, true);
  }

  // 0x08: u32
  get Reserved(): number {
    return this.view.getUint32(8, true);
  }

  // 0x0c: u32
  get Reserved2(): number {
    return this.view.getUint32(12, true);
  }

  // 0x00: u32
  set ulProtectionType(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: u32
  set ulProtectionLevel(value: number) {
    this.view.setUint32(4, value, true);
  }

  // 0x08: u32
  set Reserved(value: number) {
    this.view.setUint32(8, value, true);
  }

  // 0x0c: u32
  set Reserved2(value: number) {
    this.view.setUint32(12, value, true);
  }
}

/**
 * Windows.Win32.Media.MediaFoundation.OPM_SET_ACP_AND_CGMSA_SIGNALING_PARAMETERS (size: 56)
 */
export interface OPM_SET_ACP_AND_CGMSA_SIGNALING_PARAMETERS {
  /** u32 */
  ulNewTVProtectionStandard: number;
  /** u32 */
  ulAspectRatioChangeMask1: number;
  /** u32 */
  ulAspectRatioData1: number;
  /** u32 */
  ulAspectRatioChangeMask2: number;
  /** u32 */
  ulAspectRatioData2: number;
  /** u32 */
  ulAspectRatioChangeMask3: number;
  /** u32 */
  ulAspectRatioData3: number;
  /** array */
  ulReserved: Deno.PointerValue;
  /** array */
  ulReserved2: Deno.PointerValue;
  /** u32 */
  ulReserved3: number;
}

export const sizeofOPM_SET_ACP_AND_CGMSA_SIGNALING_PARAMETERS = 56;

export function allocOPM_SET_ACP_AND_CGMSA_SIGNALING_PARAMETERS(data?: Partial<OPM_SET_ACP_AND_CGMSA_SIGNALING_PARAMETERS>): Uint8Array {
  const buf = new Uint8Array(sizeofOPM_SET_ACP_AND_CGMSA_SIGNALING_PARAMETERS);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.ulNewTVProtectionStandard !== undefined) view.setUint32(0, Number(data.ulNewTVProtectionStandard), true);
  // 0x04: u32
  if (data?.ulAspectRatioChangeMask1 !== undefined) view.setUint32(4, Number(data.ulAspectRatioChangeMask1), true);
  // 0x08: u32
  if (data?.ulAspectRatioData1 !== undefined) view.setUint32(8, Number(data.ulAspectRatioData1), true);
  // 0x0c: u32
  if (data?.ulAspectRatioChangeMask2 !== undefined) view.setUint32(12, Number(data.ulAspectRatioChangeMask2), true);
  // 0x10: u32
  if (data?.ulAspectRatioData2 !== undefined) view.setUint32(16, Number(data.ulAspectRatioData2), true);
  // 0x14: u32
  if (data?.ulAspectRatioChangeMask3 !== undefined) view.setUint32(20, Number(data.ulAspectRatioChangeMask3), true);
  // 0x18: u32
  if (data?.ulAspectRatioData3 !== undefined) view.setUint32(24, Number(data.ulAspectRatioData3), true);
  // 0x1c: pad4
  // 0x20: pointer
  if (data?.ulReserved !== undefined) view.setBigUint64(32, data.ulReserved === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.ulReserved))), true);
  // 0x28: pointer
  if (data?.ulReserved2 !== undefined) view.setBigUint64(40, data.ulReserved2 === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.ulReserved2))), true);
  // 0x30: u32
  if (data?.ulReserved3 !== undefined) view.setUint32(48, Number(data.ulReserved3), true);
  // 0x34: pad4
  return buf;
}

export class OPM_SET_ACP_AND_CGMSA_SIGNALING_PARAMETERSView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get ulNewTVProtectionStandard(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: u32
  get ulAspectRatioChangeMask1(): number {
    return this.view.getUint32(4, true);
  }

  // 0x08: u32
  get ulAspectRatioData1(): number {
    return this.view.getUint32(8, true);
  }

  // 0x0c: u32
  get ulAspectRatioChangeMask2(): number {
    return this.view.getUint32(12, true);
  }

  // 0x10: u32
  get ulAspectRatioData2(): number {
    return this.view.getUint32(16, true);
  }

  // 0x14: u32
  get ulAspectRatioChangeMask3(): number {
    return this.view.getUint32(20, true);
  }

  // 0x18: u32
  get ulAspectRatioData3(): number {
    return this.view.getUint32(24, true);
  }

  // 0x1c: pad4

  // 0x20: pointer
  get ulReserved(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(32, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x28: pointer
  get ulReserved2(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(40, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x30: u32
  get ulReserved3(): number {
    return this.view.getUint32(48, true);
  }

  // 0x34: pad4

  // 0x00: u32
  set ulNewTVProtectionStandard(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: u32
  set ulAspectRatioChangeMask1(value: number) {
    this.view.setUint32(4, value, true);
  }

  // 0x08: u32
  set ulAspectRatioData1(value: number) {
    this.view.setUint32(8, value, true);
  }

  // 0x0c: u32
  set ulAspectRatioChangeMask2(value: number) {
    this.view.setUint32(12, value, true);
  }

  // 0x10: u32
  set ulAspectRatioData2(value: number) {
    this.view.setUint32(16, value, true);
  }

  // 0x14: u32
  set ulAspectRatioChangeMask3(value: number) {
    this.view.setUint32(20, value, true);
  }

  // 0x18: u32
  set ulAspectRatioData3(value: number) {
    this.view.setUint32(24, value, true);
  }

  // 0x1c: pad4

  // 0x20: pointer
  set ulReserved(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(32, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x28: pointer
  set ulReserved2(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(40, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x30: u32
  set ulReserved3(value: number) {
    this.view.setUint32(48, value, true);
  }

  // 0x34: pad4
}

/**
 * Windows.Win32.Media.MediaFoundation.OPM_SET_HDCP_SRM_PARAMETERS (size: 8)
 */
export interface OPM_SET_HDCP_SRM_PARAMETERS {
  /** u32 */
  ulSRMVersion: number;
}

export const sizeofOPM_SET_HDCP_SRM_PARAMETERS = 8;

export function allocOPM_SET_HDCP_SRM_PARAMETERS(data?: Partial<OPM_SET_HDCP_SRM_PARAMETERS>): Uint8Array {
  const buf = new Uint8Array(sizeofOPM_SET_HDCP_SRM_PARAMETERS);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.ulSRMVersion !== undefined) view.setUint32(0, Number(data.ulSRMVersion), true);
  // 0x04: pad4
  return buf;
}

export class OPM_SET_HDCP_SRM_PARAMETERSView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get ulSRMVersion(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: pad4

  // 0x00: u32
  set ulSRMVersion(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: pad4
}

/**
 * Windows.Win32.Media.MediaFoundation.OPM_GET_CODEC_INFO_PARAMETERS (size: 16)
 */
export interface OPM_GET_CODEC_INFO_PARAMETERS {
  /** u32 */
  cbVerifier: number;
  /** array */
  Verifier: Deno.PointerValue;
}

export const sizeofOPM_GET_CODEC_INFO_PARAMETERS = 16;

export function allocOPM_GET_CODEC_INFO_PARAMETERS(data?: Partial<OPM_GET_CODEC_INFO_PARAMETERS>): Uint8Array {
  const buf = new Uint8Array(sizeofOPM_GET_CODEC_INFO_PARAMETERS);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.cbVerifier !== undefined) view.setUint32(0, Number(data.cbVerifier), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.Verifier !== undefined) view.setBigUint64(8, data.Verifier === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.Verifier))), true);
  return buf;
}

export class OPM_GET_CODEC_INFO_PARAMETERSView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get cbVerifier(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  get Verifier(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: u32
  set cbVerifier(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  set Verifier(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.Media.MediaFoundation.OPM_GET_CODEC_INFO_INFORMATION (size: 16)
 */
export interface OPM_GET_CODEC_INFO_INFORMATION {
  /** Windows.Win32.Media.MediaFoundation.OPM_RANDOM_NUMBER */
  rnRandomNumber: Uint8Array | Deno.PointerValue;
  /** u32 */
  Merit: number;
}

export const sizeofOPM_GET_CODEC_INFO_INFORMATION = 16;

export function allocOPM_GET_CODEC_INFO_INFORMATION(data?: Partial<OPM_GET_CODEC_INFO_INFORMATION>): Uint8Array {
  const buf = new Uint8Array(sizeofOPM_GET_CODEC_INFO_INFORMATION);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.rnRandomNumber !== undefined) view.setBigUint64(0, data.rnRandomNumber === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.rnRandomNumber))), true);
  // 0x08: u32
  if (data?.Merit !== undefined) view.setUint32(8, Number(data.Merit), true);
  // 0x0c: pad4
  return buf;
}

export class OPM_GET_CODEC_INFO_INFORMATIONView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get rnRandomNumber(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(0, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x08: u32
  get Merit(): number {
    return this.view.getUint32(8, true);
  }

  // 0x0c: pad4

  // 0x00: pointer
  set rnRandomNumber(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(0, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x08: u32
  set Merit(value: number) {
    this.view.setUint32(8, value, true);
  }

  // 0x0c: pad4
}

/**
 * Windows.Win32.Media.MediaFoundation.MFT_REGISTER_TYPE_INFO (size: 16)
 */
export interface MFT_REGISTER_TYPE_INFO {
  /** System.Guid */
  guidMajorType: Uint8Array | Deno.PointerValue;
  /** System.Guid */
  guidSubtype: Uint8Array | Deno.PointerValue;
}

export const sizeofMFT_REGISTER_TYPE_INFO = 16;

export function allocMFT_REGISTER_TYPE_INFO(data?: Partial<MFT_REGISTER_TYPE_INFO>): Uint8Array {
  const buf = new Uint8Array(sizeofMFT_REGISTER_TYPE_INFO);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.guidMajorType !== undefined) view.setBigUint64(0, data.guidMajorType === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.guidMajorType))), true);
  // 0x08: pointer
  if (data?.guidSubtype !== undefined) view.setBigUint64(8, data.guidSubtype === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.guidSubtype))), true);
  return buf;
}

export class MFT_REGISTER_TYPE_INFOView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get guidMajorType(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(0, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x08: pointer
  get guidSubtype(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: pointer
  set guidMajorType(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(0, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x08: pointer
  set guidSubtype(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.Media.MediaFoundation.MFRatio (size: 8)
 */
export interface MFRatio {
  /** u32 */
  Numerator: number;
  /** u32 */
  Denominator: number;
}

export const sizeofMFRatio = 8;

export function allocMFRatio(data?: Partial<MFRatio>): Uint8Array {
  const buf = new Uint8Array(sizeofMFRatio);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.Numerator !== undefined) view.setUint32(0, Number(data.Numerator), true);
  // 0x04: u32
  if (data?.Denominator !== undefined) view.setUint32(4, Number(data.Denominator), true);
  return buf;
}

export class MFRatioView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get Numerator(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: u32
  get Denominator(): number {
    return this.view.getUint32(4, true);
  }

  // 0x00: u32
  set Numerator(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: u32
  set Denominator(value: number) {
    this.view.setUint32(4, value, true);
  }
}

/**
 * Windows.Win32.Media.MediaFoundation.MFOffset (size: 8)
 */
export interface MFOffset {
  /** u16 */
  fract: number;
  /** i16 */
  value: number;
}

export const sizeofMFOffset = 8;

export function allocMFOffset(data?: Partial<MFOffset>): Uint8Array {
  const buf = new Uint8Array(sizeofMFOffset);
  const view = new DataView(buf.buffer);
  // 0x00: u16
  if (data?.fract !== undefined) view.setUint16(0, Number(data.fract), true);
  // 0x02: i16
  if (data?.value !== undefined) view.setInt16(2, Number(data.value), true);
  // 0x04: pad4
  return buf;
}

export class MFOffsetView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u16
  get fract(): number {
    return this.view.getUint16(0, true);
  }

  // 0x02: i16
  get value(): number {
    return this.view.getInt16(2, true);
  }

  // 0x04: pad4

  // 0x00: u16
  set fract(value: number) {
    this.view.setUint16(0, value, true);
  }

  // 0x02: i16
  set value(value: number) {
    this.view.setInt16(2, value, true);
  }

  // 0x04: pad4
}

/**
 * Windows.Win32.Media.MediaFoundation.MFVideoArea (size: 24)
 */
export interface MFVideoArea {
  /** Windows.Win32.Media.MediaFoundation.MFOffset */
  OffsetX: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.Media.MediaFoundation.MFOffset */
  OffsetY: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.Foundation.SIZE */
  Area: Uint8Array | Deno.PointerValue;
}

export const sizeofMFVideoArea = 24;

export function allocMFVideoArea(data?: Partial<MFVideoArea>): Uint8Array {
  const buf = new Uint8Array(sizeofMFVideoArea);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.OffsetX !== undefined) view.setBigUint64(0, data.OffsetX === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.OffsetX))), true);
  // 0x08: pointer
  if (data?.OffsetY !== undefined) view.setBigUint64(8, data.OffsetY === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.OffsetY))), true);
  // 0x10: pointer
  if (data?.Area !== undefined) view.setBigUint64(16, data.Area === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.Area))), true);
  return buf;
}

export class MFVideoAreaView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get OffsetX(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(0, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x08: pointer
  get OffsetY(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x10: pointer
  get Area(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(16, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: pointer
  set OffsetX(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(0, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x08: pointer
  set OffsetY(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x10: pointer
  set Area(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(16, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.Media.MediaFoundation.MFVideoInfo (size: 88)
 */
export interface MFVideoInfo {
  /** u32 */
  dwWidth: number;
  /** u32 */
  dwHeight: number;
  /** Windows.Win32.Media.MediaFoundation.MFRatio */
  PixelAspectRatio: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.Media.MediaFoundation.MFVideoChromaSubsampling */
  SourceChromaSubsampling: MFVideoChromaSubsampling;
  /** Windows.Win32.Media.MediaFoundation.MFVideoInterlaceMode */
  InterlaceMode: MFVideoInterlaceMode;
  /** Windows.Win32.Media.MediaFoundation.MFVideoTransferFunction */
  TransferFunction: MFVideoTransferFunction;
  /** Windows.Win32.Media.MediaFoundation.MFVideoPrimaries */
  ColorPrimaries: MFVideoPrimaries;
  /** Windows.Win32.Media.MediaFoundation.MFVideoTransferMatrix */
  TransferMatrix: MFVideoTransferMatrix;
  /** Windows.Win32.Media.MediaFoundation.MFVideoLighting */
  SourceLighting: MFVideoLighting;
  /** Windows.Win32.Media.MediaFoundation.MFRatio */
  FramesPerSecond: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.Media.MediaFoundation.MFNominalRange */
  NominalRange: MFNominalRange;
  /** Windows.Win32.Media.MediaFoundation.MFVideoArea */
  GeometricAperture: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.Media.MediaFoundation.MFVideoArea */
  MinimumDisplayAperture: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.Media.MediaFoundation.MFVideoArea */
  PanScanAperture: Uint8Array | Deno.PointerValue;
  /** u64 */
  VideoFlags: bigint | number;
}

export const sizeofMFVideoInfo = 88;

export function allocMFVideoInfo(data?: Partial<MFVideoInfo>): Uint8Array {
  const buf = new Uint8Array(sizeofMFVideoInfo);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.dwWidth !== undefined) view.setUint32(0, Number(data.dwWidth), true);
  // 0x04: u32
  if (data?.dwHeight !== undefined) view.setUint32(4, Number(data.dwHeight), true);
  // 0x08: pointer
  if (data?.PixelAspectRatio !== undefined) view.setBigUint64(8, data.PixelAspectRatio === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.PixelAspectRatio))), true);
  // 0x10: i32
  if (data?.SourceChromaSubsampling !== undefined) view.setInt32(16, Number(data.SourceChromaSubsampling), true);
  // 0x14: i32
  if (data?.InterlaceMode !== undefined) view.setInt32(20, Number(data.InterlaceMode), true);
  // 0x18: i32
  if (data?.TransferFunction !== undefined) view.setInt32(24, Number(data.TransferFunction), true);
  // 0x1c: i32
  if (data?.ColorPrimaries !== undefined) view.setInt32(28, Number(data.ColorPrimaries), true);
  // 0x20: i32
  if (data?.TransferMatrix !== undefined) view.setInt32(32, Number(data.TransferMatrix), true);
  // 0x24: i32
  if (data?.SourceLighting !== undefined) view.setInt32(36, Number(data.SourceLighting), true);
  // 0x28: pointer
  if (data?.FramesPerSecond !== undefined) view.setBigUint64(40, data.FramesPerSecond === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.FramesPerSecond))), true);
  // 0x30: i32
  if (data?.NominalRange !== undefined) view.setInt32(48, Number(data.NominalRange), true);
  // 0x34: pad4
  // 0x38: pointer
  if (data?.GeometricAperture !== undefined) view.setBigUint64(56, data.GeometricAperture === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.GeometricAperture))), true);
  // 0x40: pointer
  if (data?.MinimumDisplayAperture !== undefined) view.setBigUint64(64, data.MinimumDisplayAperture === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.MinimumDisplayAperture))), true);
  // 0x48: pointer
  if (data?.PanScanAperture !== undefined) view.setBigUint64(72, data.PanScanAperture === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.PanScanAperture))), true);
  // 0x50: u64
  if (data?.VideoFlags !== undefined) view.setBigUint64(80, BigInt(data.VideoFlags), true);
  return buf;
}

export class MFVideoInfoView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get dwWidth(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: u32
  get dwHeight(): number {
    return this.view.getUint32(4, true);
  }

  // 0x08: pointer
  get PixelAspectRatio(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x10: i32
  get SourceChromaSubsampling(): number {
    return this.view.getInt32(16, true);
  }

  // 0x14: i32
  get InterlaceMode(): number {
    return this.view.getInt32(20, true);
  }

  // 0x18: i32
  get TransferFunction(): number {
    return this.view.getInt32(24, true);
  }

  // 0x1c: i32
  get ColorPrimaries(): number {
    return this.view.getInt32(28, true);
  }

  // 0x20: i32
  get TransferMatrix(): number {
    return this.view.getInt32(32, true);
  }

  // 0x24: i32
  get SourceLighting(): number {
    return this.view.getInt32(36, true);
  }

  // 0x28: pointer
  get FramesPerSecond(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(40, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x30: i32
  get NominalRange(): number {
    return this.view.getInt32(48, true);
  }

  // 0x34: pad4

  // 0x38: pointer
  get GeometricAperture(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(56, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x40: pointer
  get MinimumDisplayAperture(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(64, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x48: pointer
  get PanScanAperture(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(72, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x50: u64
  get VideoFlags(): bigint | number {
    return Number(this.view.getBigUint64(80, true));
  }

  // 0x00: u32
  set dwWidth(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: u32
  set dwHeight(value: number) {
    this.view.setUint32(4, value, true);
  }

  // 0x08: pointer
  set PixelAspectRatio(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x10: i32
  set SourceChromaSubsampling(value: number) {
    this.view.setInt32(16, value, true);
  }

  // 0x14: i32
  set InterlaceMode(value: number) {
    this.view.setInt32(20, value, true);
  }

  // 0x18: i32
  set TransferFunction(value: number) {
    this.view.setInt32(24, value, true);
  }

  // 0x1c: i32
  set ColorPrimaries(value: number) {
    this.view.setInt32(28, value, true);
  }

  // 0x20: i32
  set TransferMatrix(value: number) {
    this.view.setInt32(32, value, true);
  }

  // 0x24: i32
  set SourceLighting(value: number) {
    this.view.setInt32(36, value, true);
  }

  // 0x28: pointer
  set FramesPerSecond(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(40, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x30: i32
  set NominalRange(value: number) {
    this.view.setInt32(48, value, true);
  }

  // 0x34: pad4

  // 0x38: pointer
  set GeometricAperture(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(56, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x40: pointer
  set MinimumDisplayAperture(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(64, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x48: pointer
  set PanScanAperture(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(72, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x50: u64
  set VideoFlags(value: bigint | number) {
    this.view.setBigUint64(80, BigInt(value), true);
  }
}

/**
 * Windows.Win32.Media.MediaFoundation.MFAYUVSample (size: 8)
 */
export interface MFAYUVSample {
  /** u8 */
  bCrValue: number;
  /** u8 */
  bCbValue: number;
  /** u8 */
  bYValue: number;
  /** u8 */
  bSampleAlpha8: number;
}

export const sizeofMFAYUVSample = 8;

export function allocMFAYUVSample(data?: Partial<MFAYUVSample>): Uint8Array {
  const buf = new Uint8Array(sizeofMFAYUVSample);
  const view = new DataView(buf.buffer);
  // 0x00: u8
  if (data?.bCrValue !== undefined) view.setUint8(0, Number(data.bCrValue));
  // 0x01: u8
  if (data?.bCbValue !== undefined) view.setUint8(1, Number(data.bCbValue));
  // 0x02: u8
  if (data?.bYValue !== undefined) view.setUint8(2, Number(data.bYValue));
  // 0x03: u8
  if (data?.bSampleAlpha8 !== undefined) view.setUint8(3, Number(data.bSampleAlpha8));
  // 0x04: pad4
  return buf;
}

export class MFAYUVSampleView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u8
  get bCrValue(): number {
    return this.view.getUint8(0);
  }

  // 0x01: u8
  get bCbValue(): number {
    return this.view.getUint8(1);
  }

  // 0x02: u8
  get bYValue(): number {
    return this.view.getUint8(2);
  }

  // 0x03: u8
  get bSampleAlpha8(): number {
    return this.view.getUint8(3);
  }

  // 0x04: pad4

  // 0x00: u8
  set bCrValue(value: number) {
    this.view.setUint8(0, value);
  }

  // 0x01: u8
  set bCbValue(value: number) {
    this.view.setUint8(1, value);
  }

  // 0x02: u8
  set bYValue(value: number) {
    this.view.setUint8(2, value);
  }

  // 0x03: u8
  set bSampleAlpha8(value: number) {
    this.view.setUint8(3, value);
  }

  // 0x04: pad4
}

/**
 * Windows.Win32.Media.MediaFoundation.MFARGB (size: 8)
 */
export interface MFARGB {
  /** u8 */
  rgbBlue: number;
  /** u8 */
  rgbGreen: number;
  /** u8 */
  rgbRed: number;
  /** u8 */
  rgbAlpha: number;
}

export const sizeofMFARGB = 8;

export function allocMFARGB(data?: Partial<MFARGB>): Uint8Array {
  const buf = new Uint8Array(sizeofMFARGB);
  const view = new DataView(buf.buffer);
  // 0x00: u8
  if (data?.rgbBlue !== undefined) view.setUint8(0, Number(data.rgbBlue));
  // 0x01: u8
  if (data?.rgbGreen !== undefined) view.setUint8(1, Number(data.rgbGreen));
  // 0x02: u8
  if (data?.rgbRed !== undefined) view.setUint8(2, Number(data.rgbRed));
  // 0x03: u8
  if (data?.rgbAlpha !== undefined) view.setUint8(3, Number(data.rgbAlpha));
  // 0x04: pad4
  return buf;
}

export class MFARGBView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u8
  get rgbBlue(): number {
    return this.view.getUint8(0);
  }

  // 0x01: u8
  get rgbGreen(): number {
    return this.view.getUint8(1);
  }

  // 0x02: u8
  get rgbRed(): number {
    return this.view.getUint8(2);
  }

  // 0x03: u8
  get rgbAlpha(): number {
    return this.view.getUint8(3);
  }

  // 0x04: pad4

  // 0x00: u8
  set rgbBlue(value: number) {
    this.view.setUint8(0, value);
  }

  // 0x01: u8
  set rgbGreen(value: number) {
    this.view.setUint8(1, value);
  }

  // 0x02: u8
  set rgbRed(value: number) {
    this.view.setUint8(2, value);
  }

  // 0x03: u8
  set rgbAlpha(value: number) {
    this.view.setUint8(3, value);
  }

  // 0x04: pad4
}

/**
 * Windows.Win32.Media.MediaFoundation.MFPaletteEntry (size: 16)
 */
export interface MFPaletteEntry {
  /** Windows.Win32.Media.MediaFoundation.MFARGB */
  ARGB: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.Media.MediaFoundation.MFAYUVSample */
  AYCbCr: Uint8Array | Deno.PointerValue;
}

export const sizeofMFPaletteEntry = 16;

export function allocMFPaletteEntry(data?: Partial<MFPaletteEntry>): Uint8Array {
  const buf = new Uint8Array(sizeofMFPaletteEntry);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.ARGB !== undefined) view.setBigUint64(0, data.ARGB === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.ARGB))), true);
  // 0x08: pointer
  if (data?.AYCbCr !== undefined) view.setBigUint64(8, data.AYCbCr === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.AYCbCr))), true);
  return buf;
}

export class MFPaletteEntryView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get ARGB(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(0, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x08: pointer
  get AYCbCr(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: pointer
  set ARGB(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(0, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x08: pointer
  set AYCbCr(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.Media.MediaFoundation.MFVideoSurfaceInfo (size: 16)
 */
export interface MFVideoSurfaceInfo {
  /** u32 */
  Format: number;
  /** u32 */
  PaletteEntries: number;
  /** array */
  Palette: Deno.PointerValue;
}

export const sizeofMFVideoSurfaceInfo = 16;

export function allocMFVideoSurfaceInfo(data?: Partial<MFVideoSurfaceInfo>): Uint8Array {
  const buf = new Uint8Array(sizeofMFVideoSurfaceInfo);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.Format !== undefined) view.setUint32(0, Number(data.Format), true);
  // 0x04: u32
  if (data?.PaletteEntries !== undefined) view.setUint32(4, Number(data.PaletteEntries), true);
  // 0x08: pointer
  if (data?.Palette !== undefined) view.setBigUint64(8, data.Palette === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.Palette))), true);
  return buf;
}

export class MFVideoSurfaceInfoView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get Format(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: u32
  get PaletteEntries(): number {
    return this.view.getUint32(4, true);
  }

  // 0x08: pointer
  get Palette(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: u32
  set Format(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: u32
  set PaletteEntries(value: number) {
    this.view.setUint32(4, value, true);
  }

  // 0x08: pointer
  set Palette(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.Media.MediaFoundation.MFVideoCompressedInfo (size: 24)
 */
export interface MFVideoCompressedInfo {
  /** i64 */
  AvgBitrate: bigint | number;
  /** i64 */
  AvgBitErrorRate: bigint | number;
  /** u32 */
  MaxKeyFrameSpacing: number;
}

export const sizeofMFVideoCompressedInfo = 24;

export function allocMFVideoCompressedInfo(data?: Partial<MFVideoCompressedInfo>): Uint8Array {
  const buf = new Uint8Array(sizeofMFVideoCompressedInfo);
  const view = new DataView(buf.buffer);
  // 0x00: i64
  if (data?.AvgBitrate !== undefined) view.setBigInt64(0, BigInt(data.AvgBitrate), true);
  // 0x08: i64
  if (data?.AvgBitErrorRate !== undefined) view.setBigInt64(8, BigInt(data.AvgBitErrorRate), true);
  // 0x10: u32
  if (data?.MaxKeyFrameSpacing !== undefined) view.setUint32(16, Number(data.MaxKeyFrameSpacing), true);
  // 0x14: pad4
  return buf;
}

export class MFVideoCompressedInfoView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: i64
  get AvgBitrate(): bigint | number {
    return Number(this.view.getBigInt64(0, true));
  }

  // 0x08: i64
  get AvgBitErrorRate(): bigint | number {
    return Number(this.view.getBigInt64(8, true));
  }

  // 0x10: u32
  get MaxKeyFrameSpacing(): number {
    return this.view.getUint32(16, true);
  }

  // 0x14: pad4

  // 0x00: i64
  set AvgBitrate(value: bigint | number) {
    this.view.setBigInt64(0, BigInt(value), true);
  }

  // 0x08: i64
  set AvgBitErrorRate(value: bigint | number) {
    this.view.setBigInt64(8, BigInt(value), true);
  }

  // 0x10: u32
  set MaxKeyFrameSpacing(value: number) {
    this.view.setUint32(16, value, true);
  }

  // 0x14: pad4
}

/**
 * Windows.Win32.Media.MediaFoundation.MFVIDEOFORMAT (size: 40)
 */
export interface MFVIDEOFORMAT {
  /** u32 */
  dwSize: number;
  /** Windows.Win32.Media.MediaFoundation.MFVideoInfo */
  videoInfo: Uint8Array | Deno.PointerValue;
  /** System.Guid */
  guidFormat: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.Media.MediaFoundation.MFVideoCompressedInfo */
  compressedInfo: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.Media.MediaFoundation.MFVideoSurfaceInfo */
  surfaceInfo: Uint8Array | Deno.PointerValue;
}

export const sizeofMFVIDEOFORMAT = 40;

export function allocMFVIDEOFORMAT(data?: Partial<MFVIDEOFORMAT>): Uint8Array {
  const buf = new Uint8Array(sizeofMFVIDEOFORMAT);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.dwSize !== undefined) view.setUint32(0, Number(data.dwSize), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.videoInfo !== undefined) view.setBigUint64(8, data.videoInfo === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.videoInfo))), true);
  // 0x10: pointer
  if (data?.guidFormat !== undefined) view.setBigUint64(16, data.guidFormat === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.guidFormat))), true);
  // 0x18: pointer
  if (data?.compressedInfo !== undefined) view.setBigUint64(24, data.compressedInfo === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.compressedInfo))), true);
  // 0x20: pointer
  if (data?.surfaceInfo !== undefined) view.setBigUint64(32, data.surfaceInfo === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.surfaceInfo))), true);
  return buf;
}

export class MFVIDEOFORMATView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get dwSize(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  get videoInfo(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x10: pointer
  get guidFormat(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(16, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x18: pointer
  get compressedInfo(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(24, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x20: pointer
  get surfaceInfo(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(32, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: u32
  set dwSize(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  set videoInfo(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x10: pointer
  set guidFormat(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(16, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x18: pointer
  set compressedInfo(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(24, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x20: pointer
  set surfaceInfo(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(32, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.Media.MediaFoundation.MFT_INPUT_STREAM_INFO (size: 24)
 */
export interface MFT_INPUT_STREAM_INFO {
  /** i64 */
  hnsMaxLatency: bigint | number;
  /** u32 */
  dwFlags: number;
  /** u32 */
  cbSize: number;
  /** u32 */
  cbMaxLookahead: number;
  /** u32 */
  cbAlignment: number;
}

export const sizeofMFT_INPUT_STREAM_INFO = 24;

export function allocMFT_INPUT_STREAM_INFO(data?: Partial<MFT_INPUT_STREAM_INFO>): Uint8Array {
  const buf = new Uint8Array(sizeofMFT_INPUT_STREAM_INFO);
  const view = new DataView(buf.buffer);
  // 0x00: i64
  if (data?.hnsMaxLatency !== undefined) view.setBigInt64(0, BigInt(data.hnsMaxLatency), true);
  // 0x08: u32
  if (data?.dwFlags !== undefined) view.setUint32(8, Number(data.dwFlags), true);
  // 0x0c: u32
  if (data?.cbSize !== undefined) view.setUint32(12, Number(data.cbSize), true);
  // 0x10: u32
  if (data?.cbMaxLookahead !== undefined) view.setUint32(16, Number(data.cbMaxLookahead), true);
  // 0x14: u32
  if (data?.cbAlignment !== undefined) view.setUint32(20, Number(data.cbAlignment), true);
  return buf;
}

export class MFT_INPUT_STREAM_INFOView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: i64
  get hnsMaxLatency(): bigint | number {
    return Number(this.view.getBigInt64(0, true));
  }

  // 0x08: u32
  get dwFlags(): number {
    return this.view.getUint32(8, true);
  }

  // 0x0c: u32
  get cbSize(): number {
    return this.view.getUint32(12, true);
  }

  // 0x10: u32
  get cbMaxLookahead(): number {
    return this.view.getUint32(16, true);
  }

  // 0x14: u32
  get cbAlignment(): number {
    return this.view.getUint32(20, true);
  }

  // 0x00: i64
  set hnsMaxLatency(value: bigint | number) {
    this.view.setBigInt64(0, BigInt(value), true);
  }

  // 0x08: u32
  set dwFlags(value: number) {
    this.view.setUint32(8, value, true);
  }

  // 0x0c: u32
  set cbSize(value: number) {
    this.view.setUint32(12, value, true);
  }

  // 0x10: u32
  set cbMaxLookahead(value: number) {
    this.view.setUint32(16, value, true);
  }

  // 0x14: u32
  set cbAlignment(value: number) {
    this.view.setUint32(20, value, true);
  }
}

/**
 * Windows.Win32.Media.MediaFoundation.MFT_OUTPUT_STREAM_INFO (size: 16)
 */
export interface MFT_OUTPUT_STREAM_INFO {
  /** u32 */
  dwFlags: number;
  /** u32 */
  cbSize: number;
  /** u32 */
  cbAlignment: number;
}

export const sizeofMFT_OUTPUT_STREAM_INFO = 16;

export function allocMFT_OUTPUT_STREAM_INFO(data?: Partial<MFT_OUTPUT_STREAM_INFO>): Uint8Array {
  const buf = new Uint8Array(sizeofMFT_OUTPUT_STREAM_INFO);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.dwFlags !== undefined) view.setUint32(0, Number(data.dwFlags), true);
  // 0x04: u32
  if (data?.cbSize !== undefined) view.setUint32(4, Number(data.cbSize), true);
  // 0x08: u32
  if (data?.cbAlignment !== undefined) view.setUint32(8, Number(data.cbAlignment), true);
  // 0x0c: pad4
  return buf;
}

export class MFT_OUTPUT_STREAM_INFOView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get dwFlags(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: u32
  get cbSize(): number {
    return this.view.getUint32(4, true);
  }

  // 0x08: u32
  get cbAlignment(): number {
    return this.view.getUint32(8, true);
  }

  // 0x0c: pad4

  // 0x00: u32
  set dwFlags(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: u32
  set cbSize(value: number) {
    this.view.setUint32(4, value, true);
  }

  // 0x08: u32
  set cbAlignment(value: number) {
    this.view.setUint32(8, value, true);
  }

  // 0x0c: pad4
}

/**
 * Windows.Win32.Media.MediaFoundation.MFT_OUTPUT_DATA_BUFFER (size: 32)
 */
export interface MFT_OUTPUT_DATA_BUFFER {
  /** u32 */
  dwStreamID: number;
  /** Windows.Win32.Media.MediaFoundation.IMFSample */
  pSample: Uint8Array | Deno.PointerValue;
  /** u32 */
  dwStatus: number;
  /** Windows.Win32.Media.MediaFoundation.IMFCollection */
  pEvents: Uint8Array | Deno.PointerValue;
}

export const sizeofMFT_OUTPUT_DATA_BUFFER = 32;

export function allocMFT_OUTPUT_DATA_BUFFER(data?: Partial<MFT_OUTPUT_DATA_BUFFER>): Uint8Array {
  const buf = new Uint8Array(sizeofMFT_OUTPUT_DATA_BUFFER);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.dwStreamID !== undefined) view.setUint32(0, Number(data.dwStreamID), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.pSample !== undefined) view.setBigUint64(8, data.pSample === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.pSample))), true);
  // 0x10: u32
  if (data?.dwStatus !== undefined) view.setUint32(16, Number(data.dwStatus), true);
  // 0x14: pad4
  // 0x18: pointer
  if (data?.pEvents !== undefined) view.setBigUint64(24, data.pEvents === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.pEvents))), true);
  return buf;
}

export class MFT_OUTPUT_DATA_BUFFERView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get dwStreamID(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  get pSample(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x10: u32
  get dwStatus(): number {
    return this.view.getUint32(16, true);
  }

  // 0x14: pad4

  // 0x18: pointer
  get pEvents(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(24, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: u32
  set dwStreamID(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  set pSample(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x10: u32
  set dwStatus(value: number) {
    this.view.setUint32(16, value, true);
  }

  // 0x14: pad4

  // 0x18: pointer
  set pEvents(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(24, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.Media.MediaFoundation.STREAM_MEDIUM (size: 16)
 */
export interface STREAM_MEDIUM {
  /** System.Guid */
  gidMedium: Uint8Array | Deno.PointerValue;
  /** u32 */
  unMediumInstance: number;
}

export const sizeofSTREAM_MEDIUM = 16;

export function allocSTREAM_MEDIUM(data?: Partial<STREAM_MEDIUM>): Uint8Array {
  const buf = new Uint8Array(sizeofSTREAM_MEDIUM);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.gidMedium !== undefined) view.setBigUint64(0, data.gidMedium === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.gidMedium))), true);
  // 0x08: u32
  if (data?.unMediumInstance !== undefined) view.setUint32(8, Number(data.unMediumInstance), true);
  // 0x0c: pad4
  return buf;
}

export class STREAM_MEDIUMView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get gidMedium(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(0, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x08: u32
  get unMediumInstance(): number {
    return this.view.getUint32(8, true);
  }

  // 0x0c: pad4

  // 0x00: pointer
  set gidMedium(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(0, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x08: u32
  set unMediumInstance(value: number) {
    this.view.setUint32(8, value, true);
  }

  // 0x0c: pad4
}

/**
 * Windows.Win32.Media.MediaFoundation.MFAudioDecoderDegradationInfo (size: 8)
 */
export interface MFAudioDecoderDegradationInfo {
  /** Windows.Win32.Media.MediaFoundation.MFT_AUDIO_DECODER_DEGRADATION_REASON */
  eDegradationReason: MFT_AUDIO_DECODER_DEGRADATION_REASON;
  /** Windows.Win32.Media.MediaFoundation.MFT_AUDIO_DECODER_DEGRADATION_TYPE */
  eType: MFT_AUDIO_DECODER_DEGRADATION_TYPE;
}

export const sizeofMFAudioDecoderDegradationInfo = 8;

export function allocMFAudioDecoderDegradationInfo(data?: Partial<MFAudioDecoderDegradationInfo>): Uint8Array {
  const buf = new Uint8Array(sizeofMFAudioDecoderDegradationInfo);
  const view = new DataView(buf.buffer);
  // 0x00: i32
  if (data?.eDegradationReason !== undefined) view.setInt32(0, Number(data.eDegradationReason), true);
  // 0x04: i32
  if (data?.eType !== undefined) view.setInt32(4, Number(data.eType), true);
  return buf;
}

export class MFAudioDecoderDegradationInfoView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: i32
  get eDegradationReason(): number {
    return this.view.getInt32(0, true);
  }

  // 0x04: i32
  get eType(): number {
    return this.view.getInt32(4, true);
  }

  // 0x00: i32
  set eDegradationReason(value: number) {
    this.view.setInt32(0, value, true);
  }

  // 0x04: i32
  set eType(value: number) {
    this.view.setInt32(4, value, true);
  }
}

/**
 * Windows.Win32.Media.MediaFoundation.MFT_STREAM_STATE_PARAM (size: 8)
 */
export interface MFT_STREAM_STATE_PARAM {
  /** u32 */
  StreamId: number;
  /** Windows.Win32.Media.MediaFoundation.MF_STREAM_STATE */
  State: MF_STREAM_STATE;
}

export const sizeofMFT_STREAM_STATE_PARAM = 8;

export function allocMFT_STREAM_STATE_PARAM(data?: Partial<MFT_STREAM_STATE_PARAM>): Uint8Array {
  const buf = new Uint8Array(sizeofMFT_STREAM_STATE_PARAM);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.StreamId !== undefined) view.setUint32(0, Number(data.StreamId), true);
  // 0x04: i32
  if (data?.State !== undefined) view.setInt32(4, Number(data.State), true);
  return buf;
}

export class MFT_STREAM_STATE_PARAMView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get StreamId(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: i32
  get State(): number {
    return this.view.getInt32(4, true);
  }

  // 0x00: u32
  set StreamId(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: i32
  set State(value: number) {
    this.view.setInt32(4, value, true);
  }
}

/**
 * Windows.Win32.Media.MediaFoundation.MFCLOCK_PROPERTIES (size: 40)
 */
export interface MFCLOCK_PROPERTIES {
  /** u64 */
  qwCorrelationRate: bigint | number;
  /** System.Guid */
  guidClockId: Uint8Array | Deno.PointerValue;
  /** u32 */
  dwClockFlags: number;
  /** u64 */
  qwClockFrequency: bigint | number;
  /** u32 */
  dwClockTolerance: number;
  /** u32 */
  dwClockJitter: number;
}

export const sizeofMFCLOCK_PROPERTIES = 40;

export function allocMFCLOCK_PROPERTIES(data?: Partial<MFCLOCK_PROPERTIES>): Uint8Array {
  const buf = new Uint8Array(sizeofMFCLOCK_PROPERTIES);
  const view = new DataView(buf.buffer);
  // 0x00: u64
  if (data?.qwCorrelationRate !== undefined) view.setBigUint64(0, BigInt(data.qwCorrelationRate), true);
  // 0x08: pointer
  if (data?.guidClockId !== undefined) view.setBigUint64(8, data.guidClockId === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.guidClockId))), true);
  // 0x10: u32
  if (data?.dwClockFlags !== undefined) view.setUint32(16, Number(data.dwClockFlags), true);
  // 0x14: pad4
  // 0x18: u64
  if (data?.qwClockFrequency !== undefined) view.setBigUint64(24, BigInt(data.qwClockFrequency), true);
  // 0x20: u32
  if (data?.dwClockTolerance !== undefined) view.setUint32(32, Number(data.dwClockTolerance), true);
  // 0x24: u32
  if (data?.dwClockJitter !== undefined) view.setUint32(36, Number(data.dwClockJitter), true);
  return buf;
}

export class MFCLOCK_PROPERTIESView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u64
  get qwCorrelationRate(): bigint | number {
    return Number(this.view.getBigUint64(0, true));
  }

  // 0x08: pointer
  get guidClockId(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x10: u32
  get dwClockFlags(): number {
    return this.view.getUint32(16, true);
  }

  // 0x14: pad4

  // 0x18: u64
  get qwClockFrequency(): bigint | number {
    return Number(this.view.getBigUint64(24, true));
  }

  // 0x20: u32
  get dwClockTolerance(): number {
    return this.view.getUint32(32, true);
  }

  // 0x24: u32
  get dwClockJitter(): number {
    return this.view.getUint32(36, true);
  }

  // 0x00: u64
  set qwCorrelationRate(value: bigint | number) {
    this.view.setBigUint64(0, BigInt(value), true);
  }

  // 0x08: pointer
  set guidClockId(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x10: u32
  set dwClockFlags(value: number) {
    this.view.setUint32(16, value, true);
  }

  // 0x14: pad4

  // 0x18: u64
  set qwClockFrequency(value: bigint | number) {
    this.view.setBigUint64(24, BigInt(value), true);
  }

  // 0x20: u32
  set dwClockTolerance(value: number) {
    this.view.setUint32(32, value, true);
  }

  // 0x24: u32
  set dwClockJitter(value: number) {
    this.view.setUint32(36, value, true);
  }
}

/**
 * Windows.Win32.Media.MediaFoundation.MFRR_COMPONENT_HASH_INFO (size: 32)
 */
export interface MFRR_COMPONENT_HASH_INFO {
  /** u32 */
  ulReason: number;
  /** array */
  rgHeaderHash: Deno.PointerValue;
  /** array */
  rgPublicKeyHash: Deno.PointerValue;
  /** array */
  wszName: Deno.PointerValue;
}

export const sizeofMFRR_COMPONENT_HASH_INFO = 32;

export function allocMFRR_COMPONENT_HASH_INFO(data?: Partial<MFRR_COMPONENT_HASH_INFO>): Uint8Array {
  const buf = new Uint8Array(sizeofMFRR_COMPONENT_HASH_INFO);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.ulReason !== undefined) view.setUint32(0, Number(data.ulReason), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.rgHeaderHash !== undefined) view.setBigUint64(8, data.rgHeaderHash === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.rgHeaderHash))), true);
  // 0x10: pointer
  if (data?.rgPublicKeyHash !== undefined) view.setBigUint64(16, data.rgPublicKeyHash === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.rgPublicKeyHash))), true);
  // 0x18: pointer
  if (data?.wszName !== undefined) view.setBigUint64(24, data.wszName === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.wszName))), true);
  return buf;
}

export class MFRR_COMPONENT_HASH_INFOView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get ulReason(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  get rgHeaderHash(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x10: pointer
  get rgPublicKeyHash(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(16, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x18: pointer
  get wszName(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(24, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: u32
  set ulReason(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  set rgHeaderHash(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x10: pointer
  set rgPublicKeyHash(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(16, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x18: pointer
  set wszName(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(24, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.Media.MediaFoundation.MFRR_COMPONENTS (size: 16)
 */
export interface MFRR_COMPONENTS {
  /** u32 */
  dwRRInfoVersion: number;
  /** u32 */
  dwRRComponents: number;
  /** ptr */
  pRRComponents: Deno.PointerValue | Uint8Array;
}

export const sizeofMFRR_COMPONENTS = 16;

export function allocMFRR_COMPONENTS(data?: Partial<MFRR_COMPONENTS>): Uint8Array {
  const buf = new Uint8Array(sizeofMFRR_COMPONENTS);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.dwRRInfoVersion !== undefined) view.setUint32(0, Number(data.dwRRInfoVersion), true);
  // 0x04: u32
  if (data?.dwRRComponents !== undefined) view.setUint32(4, Number(data.dwRRComponents), true);
  // 0x08: pointer
  if (data?.pRRComponents !== undefined) view.setBigUint64(8, data.pRRComponents === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.pRRComponents))), true);
  return buf;
}

export class MFRR_COMPONENTSView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get dwRRInfoVersion(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: u32
  get dwRRComponents(): number {
    return this.view.getUint32(4, true);
  }

  // 0x08: pointer
  get pRRComponents(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: u32
  set dwRRInfoVersion(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: u32
  set dwRRComponents(value: number) {
    this.view.setUint32(4, value, true);
  }

  // 0x08: pointer
  set pRRComponents(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.Media.MediaFoundation.ASF_FLAT_PICTURE (size: 8)
 */
export interface ASF_FLAT_PICTURE {
  /** u8 */
  bPictureType: number;
  /** u32 */
  dwDataLen: number;
}

export const sizeofASF_FLAT_PICTURE = 8;

export function allocASF_FLAT_PICTURE(data?: Partial<ASF_FLAT_PICTURE>): Uint8Array {
  const buf = new Uint8Array(sizeofASF_FLAT_PICTURE);
  const view = new DataView(buf.buffer);
  // 0x00: u8
  if (data?.bPictureType !== undefined) view.setUint8(0, Number(data.bPictureType));
  // 0x01: u32
  if (data?.dwDataLen !== undefined) view.setUint32(1, Number(data.dwDataLen), true);
  // 0x05: pad3
  return buf;
}

export class ASF_FLAT_PICTUREView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u8
  get bPictureType(): number {
    return this.view.getUint8(0);
  }

  // 0x01: u32
  get dwDataLen(): number {
    return this.view.getUint32(1, true);
  }

  // 0x05: pad3

  // 0x00: u8
  set bPictureType(value: number) {
    this.view.setUint8(0, value);
  }

  // 0x01: u32
  set dwDataLen(value: number) {
    this.view.setUint32(1, value, true);
  }

  // 0x05: pad3
}

/**
 * Windows.Win32.Media.MediaFoundation.ASF_FLAT_SYNCHRONISED_LYRICS (size: 8)
 */
export interface ASF_FLAT_SYNCHRONISED_LYRICS {
  /** u8 */
  bTimeStampFormat: number;
  /** u8 */
  bContentType: number;
  /** u32 */
  dwLyricsLen: number;
}

export const sizeofASF_FLAT_SYNCHRONISED_LYRICS = 8;

export function allocASF_FLAT_SYNCHRONISED_LYRICS(data?: Partial<ASF_FLAT_SYNCHRONISED_LYRICS>): Uint8Array {
  const buf = new Uint8Array(sizeofASF_FLAT_SYNCHRONISED_LYRICS);
  const view = new DataView(buf.buffer);
  // 0x00: u8
  if (data?.bTimeStampFormat !== undefined) view.setUint8(0, Number(data.bTimeStampFormat));
  // 0x01: u8
  if (data?.bContentType !== undefined) view.setUint8(1, Number(data.bContentType));
  // 0x02: u32
  if (data?.dwLyricsLen !== undefined) view.setUint32(2, Number(data.dwLyricsLen), true);
  // 0x06: pad2
  return buf;
}

export class ASF_FLAT_SYNCHRONISED_LYRICSView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u8
  get bTimeStampFormat(): number {
    return this.view.getUint8(0);
  }

  // 0x01: u8
  get bContentType(): number {
    return this.view.getUint8(1);
  }

  // 0x02: u32
  get dwLyricsLen(): number {
    return this.view.getUint32(2, true);
  }

  // 0x06: pad2

  // 0x00: u8
  set bTimeStampFormat(value: number) {
    this.view.setUint8(0, value);
  }

  // 0x01: u8
  set bContentType(value: number) {
    this.view.setUint8(1, value);
  }

  // 0x02: u32
  set dwLyricsLen(value: number) {
    this.view.setUint32(2, value, true);
  }

  // 0x06: pad2
}

/**
 * Windows.Win32.Media.MediaFoundation.MFTOPONODE_ATTRIBUTE_UPDATE (size: 32)
 */
export interface MFTOPONODE_ATTRIBUTE_UPDATE {
  /** u64 */
  NodeId: bigint | number;
  /** System.Guid */
  guidAttributeKey: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.Media.MediaFoundation.MF_ATTRIBUTE_TYPE */
  attrType: MF_ATTRIBUTE_TYPE;
  /** _Anonymous_e__Union */
  Anonymous: Uint8Array | Deno.PointerValue;
}

export const sizeofMFTOPONODE_ATTRIBUTE_UPDATE = 32;

export function allocMFTOPONODE_ATTRIBUTE_UPDATE(data?: Partial<MFTOPONODE_ATTRIBUTE_UPDATE>): Uint8Array {
  const buf = new Uint8Array(sizeofMFTOPONODE_ATTRIBUTE_UPDATE);
  const view = new DataView(buf.buffer);
  // 0x00: u64
  if (data?.NodeId !== undefined) view.setBigUint64(0, BigInt(data.NodeId), true);
  // 0x08: pointer
  if (data?.guidAttributeKey !== undefined) view.setBigUint64(8, data.guidAttributeKey === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.guidAttributeKey))), true);
  // 0x10: i32
  if (data?.attrType !== undefined) view.setInt32(16, Number(data.attrType), true);
  // 0x14: pad4
  // 0x18: pointer
  if (data?.Anonymous !== undefined) view.setBigUint64(24, data.Anonymous === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.Anonymous))), true);
  return buf;
}

export class MFTOPONODE_ATTRIBUTE_UPDATEView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u64
  get NodeId(): bigint | number {
    return Number(this.view.getBigUint64(0, true));
  }

  // 0x08: pointer
  get guidAttributeKey(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x10: i32
  get attrType(): number {
    return this.view.getInt32(16, true);
  }

  // 0x14: pad4

  // 0x18: pointer
  get Anonymous(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(24, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: u64
  set NodeId(value: bigint | number) {
    this.view.setBigUint64(0, BigInt(value), true);
  }

  // 0x08: pointer
  set guidAttributeKey(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x10: i32
  set attrType(value: number) {
    this.view.setInt32(16, value, true);
  }

  // 0x14: pad4

  // 0x18: pointer
  set Anonymous(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(24, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.Media.MediaFoundation.MF_LEAKY_BUCKET_PAIR (size: 8)
 */
export interface MF_LEAKY_BUCKET_PAIR {
  /** u32 */
  dwBitrate: number;
  /** u32 */
  msBufferWindow: number;
}

export const sizeofMF_LEAKY_BUCKET_PAIR = 8;

export function allocMF_LEAKY_BUCKET_PAIR(data?: Partial<MF_LEAKY_BUCKET_PAIR>): Uint8Array {
  const buf = new Uint8Array(sizeofMF_LEAKY_BUCKET_PAIR);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.dwBitrate !== undefined) view.setUint32(0, Number(data.dwBitrate), true);
  // 0x04: u32
  if (data?.msBufferWindow !== undefined) view.setUint32(4, Number(data.msBufferWindow), true);
  return buf;
}

export class MF_LEAKY_BUCKET_PAIRView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get dwBitrate(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: u32
  get msBufferWindow(): number {
    return this.view.getUint32(4, true);
  }

  // 0x00: u32
  set dwBitrate(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: u32
  set msBufferWindow(value: number) {
    this.view.setUint32(4, value, true);
  }
}

/**
 * Windows.Win32.Media.MediaFoundation.MFBYTESTREAM_BUFFERING_PARAMS (size: 64)
 */
export interface MFBYTESTREAM_BUFFERING_PARAMS {
  /** u64 */
  cbTotalFileSize: bigint | number;
  /** u64 */
  cbPlayableDataSize: bigint | number;
  /** ptr */
  prgBuckets: Deno.PointerValue | Uint8Array;
  /** u32 */
  cBuckets: number;
  /** u64 */
  qwNetBufferingTime: bigint | number;
  /** u64 */
  qwExtraBufferingTimeDuringSeek: bigint | number;
  /** u64 */
  qwPlayDuration: bigint | number;
  /** f32 */
  dRate: number;
}

export const sizeofMFBYTESTREAM_BUFFERING_PARAMS = 64;

export function allocMFBYTESTREAM_BUFFERING_PARAMS(data?: Partial<MFBYTESTREAM_BUFFERING_PARAMS>): Uint8Array {
  const buf = new Uint8Array(sizeofMFBYTESTREAM_BUFFERING_PARAMS);
  const view = new DataView(buf.buffer);
  // 0x00: u64
  if (data?.cbTotalFileSize !== undefined) view.setBigUint64(0, BigInt(data.cbTotalFileSize), true);
  // 0x08: u64
  if (data?.cbPlayableDataSize !== undefined) view.setBigUint64(8, BigInt(data.cbPlayableDataSize), true);
  // 0x10: pointer
  if (data?.prgBuckets !== undefined) view.setBigUint64(16, data.prgBuckets === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.prgBuckets))), true);
  // 0x18: u32
  if (data?.cBuckets !== undefined) view.setUint32(24, Number(data.cBuckets), true);
  // 0x1c: pad4
  // 0x20: u64
  if (data?.qwNetBufferingTime !== undefined) view.setBigUint64(32, BigInt(data.qwNetBufferingTime), true);
  // 0x28: u64
  if (data?.qwExtraBufferingTimeDuringSeek !== undefined) view.setBigUint64(40, BigInt(data.qwExtraBufferingTimeDuringSeek), true);
  // 0x30: u64
  if (data?.qwPlayDuration !== undefined) view.setBigUint64(48, BigInt(data.qwPlayDuration), true);
  // 0x38: f32
  if (data?.dRate !== undefined) view.setFloat32(56, Number(data.dRate), true);
  // 0x3c: pad4
  return buf;
}

export class MFBYTESTREAM_BUFFERING_PARAMSView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u64
  get cbTotalFileSize(): bigint | number {
    return Number(this.view.getBigUint64(0, true));
  }

  // 0x08: u64
  get cbPlayableDataSize(): bigint | number {
    return Number(this.view.getBigUint64(8, true));
  }

  // 0x10: pointer
  get prgBuckets(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(16, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x18: u32
  get cBuckets(): number {
    return this.view.getUint32(24, true);
  }

  // 0x1c: pad4

  // 0x20: u64
  get qwNetBufferingTime(): bigint | number {
    return Number(this.view.getBigUint64(32, true));
  }

  // 0x28: u64
  get qwExtraBufferingTimeDuringSeek(): bigint | number {
    return Number(this.view.getBigUint64(40, true));
  }

  // 0x30: u64
  get qwPlayDuration(): bigint | number {
    return Number(this.view.getBigUint64(48, true));
  }

  // 0x38: f32
  get dRate(): number {
    return this.view.getFloat32(56, true);
  }

  // 0x3c: pad4

  // 0x00: u64
  set cbTotalFileSize(value: bigint | number) {
    this.view.setBigUint64(0, BigInt(value), true);
  }

  // 0x08: u64
  set cbPlayableDataSize(value: bigint | number) {
    this.view.setBigUint64(8, BigInt(value), true);
  }

  // 0x10: pointer
  set prgBuckets(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(16, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x18: u32
  set cBuckets(value: number) {
    this.view.setUint32(24, value, true);
  }

  // 0x1c: pad4

  // 0x20: u64
  set qwNetBufferingTime(value: bigint | number) {
    this.view.setBigUint64(32, BigInt(value), true);
  }

  // 0x28: u64
  set qwExtraBufferingTimeDuringSeek(value: bigint | number) {
    this.view.setBigUint64(40, BigInt(value), true);
  }

  // 0x30: u64
  set qwPlayDuration(value: bigint | number) {
    this.view.setBigUint64(48, BigInt(value), true);
  }

  // 0x38: f32
  set dRate(value: number) {
    this.view.setFloat32(56, value, true);
  }

  // 0x3c: pad4
}

/**
 * Windows.Win32.Media.MediaFoundation.MF_BYTE_STREAM_CACHE_RANGE (size: 16)
 */
export interface MF_BYTE_STREAM_CACHE_RANGE {
  /** u64 */
  qwStartOffset: bigint | number;
  /** u64 */
  qwEndOffset: bigint | number;
}

export const sizeofMF_BYTE_STREAM_CACHE_RANGE = 16;

export function allocMF_BYTE_STREAM_CACHE_RANGE(data?: Partial<MF_BYTE_STREAM_CACHE_RANGE>): Uint8Array {
  const buf = new Uint8Array(sizeofMF_BYTE_STREAM_CACHE_RANGE);
  const view = new DataView(buf.buffer);
  // 0x00: u64
  if (data?.qwStartOffset !== undefined) view.setBigUint64(0, BigInt(data.qwStartOffset), true);
  // 0x08: u64
  if (data?.qwEndOffset !== undefined) view.setBigUint64(8, BigInt(data.qwEndOffset), true);
  return buf;
}

export class MF_BYTE_STREAM_CACHE_RANGEView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u64
  get qwStartOffset(): bigint | number {
    return Number(this.view.getBigUint64(0, true));
  }

  // 0x08: u64
  get qwEndOffset(): bigint | number {
    return Number(this.view.getBigUint64(8, true));
  }

  // 0x00: u64
  set qwStartOffset(value: bigint | number) {
    this.view.setBigUint64(0, BigInt(value), true);
  }

  // 0x08: u64
  set qwEndOffset(value: bigint | number) {
    this.view.setBigUint64(8, BigInt(value), true);
  }
}

export type HRESULT = number;

/**
 * Windows.Win32.Media.MediaFoundation.MFNetCredentialManagerGetParam (size: 56)
 */
export interface MFNetCredentialManagerGetParam {
  /** Windows.Win32.Foundation.HRESULT */
  hrOp: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.Foundation.BOOL */
  fAllowLoggedOnUser: boolean;
  /** Windows.Win32.Foundation.BOOL */
  fClearTextPackage: boolean;
  /** Windows.Win32.Foundation.PWSTR */
  pszUrl: string | null | Uint8Array | Uint16Array;
  /** Windows.Win32.Foundation.PWSTR */
  pszSite: string | null | Uint8Array | Uint16Array;
  /** Windows.Win32.Foundation.PWSTR */
  pszRealm: string | null | Uint8Array | Uint16Array;
  /** Windows.Win32.Foundation.PWSTR */
  pszPackage: string | null | Uint8Array | Uint16Array;
  /** i32 */
  nRetries: number;
}

export const sizeofMFNetCredentialManagerGetParam = 56;

export function allocMFNetCredentialManagerGetParam(data?: Partial<MFNetCredentialManagerGetParam>): Uint8Array {
  const buf = new Uint8Array(sizeofMFNetCredentialManagerGetParam);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.hrOp !== undefined) view.setBigUint64(0, data.hrOp === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.hrOp))), true);
  // 0x08: i32
  if (data?.fAllowLoggedOnUser !== undefined) view.setInt32(8, Number(data.fAllowLoggedOnUser), true);
  // 0x0c: i32
  if (data?.fClearTextPackage !== undefined) view.setInt32(12, Number(data.fClearTextPackage), true);
  // 0x10: buffer
  if (data?.pszUrl !== undefined) {
    (buf as any)._f16 = util.pwstrToFfi(data.pszUrl);
    view.setBigUint64(16, (buf as any)._f16 === null ? 0n : BigInt(Deno.UnsafePointer.value(Deno.UnsafePointer.of((buf as any)._f16))), true);
  }
  // 0x18: buffer
  if (data?.pszSite !== undefined) {
    (buf as any)._f24 = util.pwstrToFfi(data.pszSite);
    view.setBigUint64(24, (buf as any)._f24 === null ? 0n : BigInt(Deno.UnsafePointer.value(Deno.UnsafePointer.of((buf as any)._f24))), true);
  }
  // 0x20: buffer
  if (data?.pszRealm !== undefined) {
    (buf as any)._f32 = util.pwstrToFfi(data.pszRealm);
    view.setBigUint64(32, (buf as any)._f32 === null ? 0n : BigInt(Deno.UnsafePointer.value(Deno.UnsafePointer.of((buf as any)._f32))), true);
  }
  // 0x28: buffer
  if (data?.pszPackage !== undefined) {
    (buf as any)._f40 = util.pwstrToFfi(data.pszPackage);
    view.setBigUint64(40, (buf as any)._f40 === null ? 0n : BigInt(Deno.UnsafePointer.value(Deno.UnsafePointer.of((buf as any)._f40))), true);
  }
  // 0x30: i32
  if (data?.nRetries !== undefined) view.setInt32(48, Number(data.nRetries), true);
  // 0x34: pad4
  return buf;
}

export class MFNetCredentialManagerGetParamView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get hrOp(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(0, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x08: i32
  get fAllowLoggedOnUser(): number {
    return this.view.getInt32(8, true);
  }

  // 0x0c: i32
  get fClearTextPackage(): number {
    return this.view.getInt32(12, true);
  }

  // 0x10: buffer
  get pszUrl(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(16, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x18: buffer
  get pszSite(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(24, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x20: buffer
  get pszRealm(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(32, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x28: buffer
  get pszPackage(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(40, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x30: i32
  get nRetries(): number {
    return this.view.getInt32(48, true);
  }

  // 0x34: pad4

  // 0x00: pointer
  set hrOp(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(0, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x08: i32
  set fAllowLoggedOnUser(value: number) {
    this.view.setInt32(8, value, true);
  }

  // 0x0c: i32
  set fClearTextPackage(value: number) {
    this.view.setInt32(12, value, true);
  }

  // 0x10: buffer
  set pszUrl(value: Uint8Array | Deno.PointerValue) {
    (this.buf as any)._f16 = value;
    this.view.setBigUint64(16, BigInt(Deno.UnsafePointer.value(util.toPointer((this.buf as any)._f16))), true);
  }

  // 0x18: buffer
  set pszSite(value: Uint8Array | Deno.PointerValue) {
    (this.buf as any)._f24 = value;
    this.view.setBigUint64(24, BigInt(Deno.UnsafePointer.value(util.toPointer((this.buf as any)._f24))), true);
  }

  // 0x20: buffer
  set pszRealm(value: Uint8Array | Deno.PointerValue) {
    (this.buf as any)._f32 = value;
    this.view.setBigUint64(32, BigInt(Deno.UnsafePointer.value(util.toPointer((this.buf as any)._f32))), true);
  }

  // 0x28: buffer
  set pszPackage(value: Uint8Array | Deno.PointerValue) {
    (this.buf as any)._f40 = value;
    this.view.setBigUint64(40, BigInt(Deno.UnsafePointer.value(util.toPointer((this.buf as any)._f40))), true);
  }

  // 0x30: i32
  set nRetries(value: number) {
    this.view.setInt32(48, value, true);
  }

  // 0x34: pad4
}

/**
 * Windows.Win32.Media.MediaFoundation.MFINPUTTRUSTAUTHORITY_ACCESS_ACTION (size: 24)
 */
export interface MFINPUTTRUSTAUTHORITY_ACCESS_ACTION {
  /** Windows.Win32.Media.MediaFoundation.MFPOLICYMANAGER_ACTION */
  Action: MFPOLICYMANAGER_ACTION;
  /** ptr */
  pbTicket: Deno.PointerValue | Uint8Array;
  /** u32 */
  cbTicket: number;
}

export const sizeofMFINPUTTRUSTAUTHORITY_ACCESS_ACTION = 24;

export function allocMFINPUTTRUSTAUTHORITY_ACCESS_ACTION(data?: Partial<MFINPUTTRUSTAUTHORITY_ACCESS_ACTION>): Uint8Array {
  const buf = new Uint8Array(sizeofMFINPUTTRUSTAUTHORITY_ACCESS_ACTION);
  const view = new DataView(buf.buffer);
  // 0x00: i32
  if (data?.Action !== undefined) view.setInt32(0, Number(data.Action), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.pbTicket !== undefined) view.setBigUint64(8, data.pbTicket === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.pbTicket))), true);
  // 0x10: u32
  if (data?.cbTicket !== undefined) view.setUint32(16, Number(data.cbTicket), true);
  // 0x14: pad4
  return buf;
}

export class MFINPUTTRUSTAUTHORITY_ACCESS_ACTIONView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: i32
  get Action(): number {
    return this.view.getInt32(0, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  get pbTicket(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x10: u32
  get cbTicket(): number {
    return this.view.getUint32(16, true);
  }

  // 0x14: pad4

  // 0x00: i32
  set Action(value: number) {
    this.view.setInt32(0, value, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  set pbTicket(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x10: u32
  set cbTicket(value: number) {
    this.view.setUint32(16, value, true);
  }

  // 0x14: pad4
}

/**
 * Windows.Win32.Media.MediaFoundation.MFINPUTTRUSTAUTHORITY_ACCESS_PARAMS (size: 40)
 */
export interface MFINPUTTRUSTAUTHORITY_ACCESS_PARAMS {
  /** u32 */
  dwSize: number;
  /** u32 */
  dwVer: number;
  /** u32 */
  cbSignatureOffset: number;
  /** u32 */
  cbSignatureSize: number;
  /** u32 */
  cbExtensionOffset: number;
  /** u32 */
  cbExtensionSize: number;
  /** u32 */
  cActions: number;
  /** array */
  rgOutputActions: Deno.PointerValue;
}

export const sizeofMFINPUTTRUSTAUTHORITY_ACCESS_PARAMS = 40;

export function allocMFINPUTTRUSTAUTHORITY_ACCESS_PARAMS(data?: Partial<MFINPUTTRUSTAUTHORITY_ACCESS_PARAMS>): Uint8Array {
  const buf = new Uint8Array(sizeofMFINPUTTRUSTAUTHORITY_ACCESS_PARAMS);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.dwSize !== undefined) view.setUint32(0, Number(data.dwSize), true);
  // 0x04: u32
  if (data?.dwVer !== undefined) view.setUint32(4, Number(data.dwVer), true);
  // 0x08: u32
  if (data?.cbSignatureOffset !== undefined) view.setUint32(8, Number(data.cbSignatureOffset), true);
  // 0x0c: u32
  if (data?.cbSignatureSize !== undefined) view.setUint32(12, Number(data.cbSignatureSize), true);
  // 0x10: u32
  if (data?.cbExtensionOffset !== undefined) view.setUint32(16, Number(data.cbExtensionOffset), true);
  // 0x14: u32
  if (data?.cbExtensionSize !== undefined) view.setUint32(20, Number(data.cbExtensionSize), true);
  // 0x18: u32
  if (data?.cActions !== undefined) view.setUint32(24, Number(data.cActions), true);
  // 0x1c: pad4
  // 0x20: pointer
  if (data?.rgOutputActions !== undefined) view.setBigUint64(32, data.rgOutputActions === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.rgOutputActions))), true);
  return buf;
}

export class MFINPUTTRUSTAUTHORITY_ACCESS_PARAMSView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get dwSize(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: u32
  get dwVer(): number {
    return this.view.getUint32(4, true);
  }

  // 0x08: u32
  get cbSignatureOffset(): number {
    return this.view.getUint32(8, true);
  }

  // 0x0c: u32
  get cbSignatureSize(): number {
    return this.view.getUint32(12, true);
  }

  // 0x10: u32
  get cbExtensionOffset(): number {
    return this.view.getUint32(16, true);
  }

  // 0x14: u32
  get cbExtensionSize(): number {
    return this.view.getUint32(20, true);
  }

  // 0x18: u32
  get cActions(): number {
    return this.view.getUint32(24, true);
  }

  // 0x1c: pad4

  // 0x20: pointer
  get rgOutputActions(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(32, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: u32
  set dwSize(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: u32
  set dwVer(value: number) {
    this.view.setUint32(4, value, true);
  }

  // 0x08: u32
  set cbSignatureOffset(value: number) {
    this.view.setUint32(8, value, true);
  }

  // 0x0c: u32
  set cbSignatureSize(value: number) {
    this.view.setUint32(12, value, true);
  }

  // 0x10: u32
  set cbExtensionOffset(value: number) {
    this.view.setUint32(16, value, true);
  }

  // 0x14: u32
  set cbExtensionSize(value: number) {
    this.view.setUint32(20, value, true);
  }

  // 0x18: u32
  set cActions(value: number) {
    this.view.setUint32(24, value, true);
  }

  // 0x1c: pad4

  // 0x20: pointer
  set rgOutputActions(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(32, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.Media.MediaFoundation.MF_TRANSCODE_SINK_INFO (size: 32)
 */
export interface MF_TRANSCODE_SINK_INFO {
  /** u32 */
  dwVideoStreamID: number;
  /** Windows.Win32.Media.MediaFoundation.IMFMediaType */
  pVideoMediaType: Uint8Array | Deno.PointerValue;
  /** u32 */
  dwAudioStreamID: number;
  /** Windows.Win32.Media.MediaFoundation.IMFMediaType */
  pAudioMediaType: Uint8Array | Deno.PointerValue;
}

export const sizeofMF_TRANSCODE_SINK_INFO = 32;

export function allocMF_TRANSCODE_SINK_INFO(data?: Partial<MF_TRANSCODE_SINK_INFO>): Uint8Array {
  const buf = new Uint8Array(sizeofMF_TRANSCODE_SINK_INFO);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.dwVideoStreamID !== undefined) view.setUint32(0, Number(data.dwVideoStreamID), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.pVideoMediaType !== undefined) view.setBigUint64(8, data.pVideoMediaType === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.pVideoMediaType))), true);
  // 0x10: u32
  if (data?.dwAudioStreamID !== undefined) view.setUint32(16, Number(data.dwAudioStreamID), true);
  // 0x14: pad4
  // 0x18: pointer
  if (data?.pAudioMediaType !== undefined) view.setBigUint64(24, data.pAudioMediaType === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.pAudioMediaType))), true);
  return buf;
}

export class MF_TRANSCODE_SINK_INFOView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get dwVideoStreamID(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  get pVideoMediaType(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x10: u32
  get dwAudioStreamID(): number {
    return this.view.getUint32(16, true);
  }

  // 0x14: pad4

  // 0x18: pointer
  get pAudioMediaType(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(24, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: u32
  set dwVideoStreamID(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  set pVideoMediaType(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x10: u32
  set dwAudioStreamID(value: number) {
    this.view.setUint32(16, value, true);
  }

  // 0x14: pad4

  // 0x18: pointer
  set pAudioMediaType(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(24, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.Media.MediaFoundation.MFT_REGISTRATION_INFO (size: 64)
 */
export interface MFT_REGISTRATION_INFO {
  /** System.Guid */
  clsid: Uint8Array | Deno.PointerValue;
  /** System.Guid */
  guidCategory: Uint8Array | Deno.PointerValue;
  /** u32 */
  uiFlags: number;
  /** Windows.Win32.Foundation.PWSTR */
  pszName: string | null | Uint8Array | Uint16Array;
  /** u32 */
  cInTypes: number;
  /** ptr */
  pInTypes: Deno.PointerValue | Uint8Array;
  /** u32 */
  cOutTypes: number;
  /** ptr */
  pOutTypes: Deno.PointerValue | Uint8Array;
}

export const sizeofMFT_REGISTRATION_INFO = 64;

export function allocMFT_REGISTRATION_INFO(data?: Partial<MFT_REGISTRATION_INFO>): Uint8Array {
  const buf = new Uint8Array(sizeofMFT_REGISTRATION_INFO);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.clsid !== undefined) view.setBigUint64(0, data.clsid === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.clsid))), true);
  // 0x08: pointer
  if (data?.guidCategory !== undefined) view.setBigUint64(8, data.guidCategory === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.guidCategory))), true);
  // 0x10: u32
  if (data?.uiFlags !== undefined) view.setUint32(16, Number(data.uiFlags), true);
  // 0x14: pad4
  // 0x18: buffer
  if (data?.pszName !== undefined) {
    (buf as any)._f24 = util.pwstrToFfi(data.pszName);
    view.setBigUint64(24, (buf as any)._f24 === null ? 0n : BigInt(Deno.UnsafePointer.value(Deno.UnsafePointer.of((buf as any)._f24))), true);
  }
  // 0x20: u32
  if (data?.cInTypes !== undefined) view.setUint32(32, Number(data.cInTypes), true);
  // 0x24: pad4
  // 0x28: pointer
  if (data?.pInTypes !== undefined) view.setBigUint64(40, data.pInTypes === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.pInTypes))), true);
  // 0x30: u32
  if (data?.cOutTypes !== undefined) view.setUint32(48, Number(data.cOutTypes), true);
  // 0x34: pad4
  // 0x38: pointer
  if (data?.pOutTypes !== undefined) view.setBigUint64(56, data.pOutTypes === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.pOutTypes))), true);
  return buf;
}

export class MFT_REGISTRATION_INFOView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get clsid(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(0, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x08: pointer
  get guidCategory(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x10: u32
  get uiFlags(): number {
    return this.view.getUint32(16, true);
  }

  // 0x14: pad4

  // 0x18: buffer
  get pszName(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(24, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x20: u32
  get cInTypes(): number {
    return this.view.getUint32(32, true);
  }

  // 0x24: pad4

  // 0x28: pointer
  get pInTypes(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(40, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x30: u32
  get cOutTypes(): number {
    return this.view.getUint32(48, true);
  }

  // 0x34: pad4

  // 0x38: pointer
  get pOutTypes(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(56, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: pointer
  set clsid(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(0, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x08: pointer
  set guidCategory(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x10: u32
  set uiFlags(value: number) {
    this.view.setUint32(16, value, true);
  }

  // 0x14: pad4

  // 0x18: buffer
  set pszName(value: Uint8Array | Deno.PointerValue) {
    (this.buf as any)._f24 = value;
    this.view.setBigUint64(24, BigInt(Deno.UnsafePointer.value(util.toPointer((this.buf as any)._f24))), true);
  }

  // 0x20: u32
  set cInTypes(value: number) {
    this.view.setUint32(32, value, true);
  }

  // 0x24: pad4

  // 0x28: pointer
  set pInTypes(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(40, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x30: u32
  set cOutTypes(value: number) {
    this.view.setUint32(48, value, true);
  }

  // 0x34: pad4

  // 0x38: pointer
  set pOutTypes(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(56, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.Media.MediaFoundation.MFCONTENTPROTECTIONDEVICE_INPUT_DATA (size: 24)
 */
export interface MFCONTENTPROTECTIONDEVICE_INPUT_DATA {
  /** u32 */
  HWProtectionFunctionID: number;
  /** u32 */
  PrivateDataByteCount: number;
  /** u32 */
  HWProtectionDataByteCount: number;
  /** u32 */
  Reserved: number;
  /** array */
  InputData: Deno.PointerValue;
}

export const sizeofMFCONTENTPROTECTIONDEVICE_INPUT_DATA = 24;

export function allocMFCONTENTPROTECTIONDEVICE_INPUT_DATA(data?: Partial<MFCONTENTPROTECTIONDEVICE_INPUT_DATA>): Uint8Array {
  const buf = new Uint8Array(sizeofMFCONTENTPROTECTIONDEVICE_INPUT_DATA);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.HWProtectionFunctionID !== undefined) view.setUint32(0, Number(data.HWProtectionFunctionID), true);
  // 0x04: u32
  if (data?.PrivateDataByteCount !== undefined) view.setUint32(4, Number(data.PrivateDataByteCount), true);
  // 0x08: u32
  if (data?.HWProtectionDataByteCount !== undefined) view.setUint32(8, Number(data.HWProtectionDataByteCount), true);
  // 0x0c: u32
  if (data?.Reserved !== undefined) view.setUint32(12, Number(data.Reserved), true);
  // 0x10: pointer
  if (data?.InputData !== undefined) view.setBigUint64(16, data.InputData === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.InputData))), true);
  return buf;
}

export class MFCONTENTPROTECTIONDEVICE_INPUT_DATAView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get HWProtectionFunctionID(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: u32
  get PrivateDataByteCount(): number {
    return this.view.getUint32(4, true);
  }

  // 0x08: u32
  get HWProtectionDataByteCount(): number {
    return this.view.getUint32(8, true);
  }

  // 0x0c: u32
  get Reserved(): number {
    return this.view.getUint32(12, true);
  }

  // 0x10: pointer
  get InputData(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(16, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: u32
  set HWProtectionFunctionID(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: u32
  set PrivateDataByteCount(value: number) {
    this.view.setUint32(4, value, true);
  }

  // 0x08: u32
  set HWProtectionDataByteCount(value: number) {
    this.view.setUint32(8, value, true);
  }

  // 0x0c: u32
  set Reserved(value: number) {
    this.view.setUint32(12, value, true);
  }

  // 0x10: pointer
  set InputData(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(16, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.Media.MediaFoundation.MFCONTENTPROTECTIONDEVICE_OUTPUT_DATA (size: 48)
 */
export interface MFCONTENTPROTECTIONDEVICE_OUTPUT_DATA {
  /** u32 */
  PrivateDataByteCount: number;
  /** u32 */
  MaxHWProtectionDataByteCount: number;
  /** u32 */
  HWProtectionDataByteCount: number;
  /** Windows.Win32.Foundation.HRESULT */
  Status: Uint8Array | Deno.PointerValue;
  /** i64 */
  TransportTimeInHundredsOfNanoseconds: bigint | number;
  /** i64 */
  ExecutionTimeInHundredsOfNanoseconds: bigint | number;
  /** array */
  OutputData: Deno.PointerValue;
}

export const sizeofMFCONTENTPROTECTIONDEVICE_OUTPUT_DATA = 48;

export function allocMFCONTENTPROTECTIONDEVICE_OUTPUT_DATA(data?: Partial<MFCONTENTPROTECTIONDEVICE_OUTPUT_DATA>): Uint8Array {
  const buf = new Uint8Array(sizeofMFCONTENTPROTECTIONDEVICE_OUTPUT_DATA);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.PrivateDataByteCount !== undefined) view.setUint32(0, Number(data.PrivateDataByteCount), true);
  // 0x04: u32
  if (data?.MaxHWProtectionDataByteCount !== undefined) view.setUint32(4, Number(data.MaxHWProtectionDataByteCount), true);
  // 0x08: u32
  if (data?.HWProtectionDataByteCount !== undefined) view.setUint32(8, Number(data.HWProtectionDataByteCount), true);
  // 0x0c: pad4
  // 0x10: pointer
  if (data?.Status !== undefined) view.setBigUint64(16, data.Status === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.Status))), true);
  // 0x18: i64
  if (data?.TransportTimeInHundredsOfNanoseconds !== undefined) view.setBigInt64(24, BigInt(data.TransportTimeInHundredsOfNanoseconds), true);
  // 0x20: i64
  if (data?.ExecutionTimeInHundredsOfNanoseconds !== undefined) view.setBigInt64(32, BigInt(data.ExecutionTimeInHundredsOfNanoseconds), true);
  // 0x28: pointer
  if (data?.OutputData !== undefined) view.setBigUint64(40, data.OutputData === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.OutputData))), true);
  return buf;
}

export class MFCONTENTPROTECTIONDEVICE_OUTPUT_DATAView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get PrivateDataByteCount(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: u32
  get MaxHWProtectionDataByteCount(): number {
    return this.view.getUint32(4, true);
  }

  // 0x08: u32
  get HWProtectionDataByteCount(): number {
    return this.view.getUint32(8, true);
  }

  // 0x0c: pad4

  // 0x10: pointer
  get Status(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(16, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x18: i64
  get TransportTimeInHundredsOfNanoseconds(): bigint | number {
    return Number(this.view.getBigInt64(24, true));
  }

  // 0x20: i64
  get ExecutionTimeInHundredsOfNanoseconds(): bigint | number {
    return Number(this.view.getBigInt64(32, true));
  }

  // 0x28: pointer
  get OutputData(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(40, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: u32
  set PrivateDataByteCount(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: u32
  set MaxHWProtectionDataByteCount(value: number) {
    this.view.setUint32(4, value, true);
  }

  // 0x08: u32
  set HWProtectionDataByteCount(value: number) {
    this.view.setUint32(8, value, true);
  }

  // 0x0c: pad4

  // 0x10: pointer
  set Status(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(16, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x18: i64
  set TransportTimeInHundredsOfNanoseconds(value: bigint | number) {
    this.view.setBigInt64(24, BigInt(value), true);
  }

  // 0x20: i64
  set ExecutionTimeInHundredsOfNanoseconds(value: bigint | number) {
    this.view.setBigInt64(32, BigInt(value), true);
  }

  // 0x28: pointer
  set OutputData(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(40, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.Media.MediaFoundation.MFCONTENTPROTECTIONDEVICE_REALTIMECLIENT_DATA (size: 24)
 */
export interface MFCONTENTPROTECTIONDEVICE_REALTIMECLIENT_DATA {
  /** u32 */
  TaskIndex: number;
  /** array */
  ClassName: Deno.PointerValue;
  /** i32 */
  BasePriority: number;
}

export const sizeofMFCONTENTPROTECTIONDEVICE_REALTIMECLIENT_DATA = 24;

export function allocMFCONTENTPROTECTIONDEVICE_REALTIMECLIENT_DATA(data?: Partial<MFCONTENTPROTECTIONDEVICE_REALTIMECLIENT_DATA>): Uint8Array {
  const buf = new Uint8Array(sizeofMFCONTENTPROTECTIONDEVICE_REALTIMECLIENT_DATA);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.TaskIndex !== undefined) view.setUint32(0, Number(data.TaskIndex), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.ClassName !== undefined) view.setBigUint64(8, data.ClassName === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.ClassName))), true);
  // 0x10: i32
  if (data?.BasePriority !== undefined) view.setInt32(16, Number(data.BasePriority), true);
  // 0x14: pad4
  return buf;
}

export class MFCONTENTPROTECTIONDEVICE_REALTIMECLIENT_DATAView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get TaskIndex(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  get ClassName(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x10: i32
  get BasePriority(): number {
    return this.view.getInt32(16, true);
  }

  // 0x14: pad4

  // 0x00: u32
  set TaskIndex(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  set ClassName(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x10: i32
  set BasePriority(value: number) {
    this.view.setInt32(16, value, true);
  }

  // 0x14: pad4
}

/**
 * Windows.Win32.Media.MediaFoundation.MFMediaKeyStatus (size: 16)
 */
export interface MFMediaKeyStatus {
  /** ptr */
  pbKeyId: Deno.PointerValue | Uint8Array;
  /** u32 */
  cbKeyId: number;
  /** Windows.Win32.Media.MediaFoundation.MF_MEDIAKEY_STATUS */
  eMediaKeyStatus: MF_MEDIAKEY_STATUS;
}

export const sizeofMFMediaKeyStatus = 16;

export function allocMFMediaKeyStatus(data?: Partial<MFMediaKeyStatus>): Uint8Array {
  const buf = new Uint8Array(sizeofMFMediaKeyStatus);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.pbKeyId !== undefined) view.setBigUint64(0, data.pbKeyId === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.pbKeyId))), true);
  // 0x08: u32
  if (data?.cbKeyId !== undefined) view.setUint32(8, Number(data.cbKeyId), true);
  // 0x0c: i32
  if (data?.eMediaKeyStatus !== undefined) view.setInt32(12, Number(data.eMediaKeyStatus), true);
  return buf;
}

export class MFMediaKeyStatusView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get pbKeyId(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(0, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x08: u32
  get cbKeyId(): number {
    return this.view.getUint32(8, true);
  }

  // 0x0c: i32
  get eMediaKeyStatus(): number {
    return this.view.getInt32(12, true);
  }

  // 0x00: pointer
  set pbKeyId(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(0, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x08: u32
  set cbKeyId(value: number) {
    this.view.setUint32(8, value, true);
  }

  // 0x0c: i32
  set eMediaKeyStatus(value: number) {
    this.view.setInt32(12, value, true);
  }
}

/**
 * Windows.Win32.Media.MediaFoundation.MF_VIDEO_SPHERICAL_VIEWDIRECTION (size: 16)
 */
export interface MF_VIDEO_SPHERICAL_VIEWDIRECTION {
  /** i32 */
  iHeading: number;
  /** i32 */
  iPitch: number;
  /** i32 */
  iRoll: number;
}

export const sizeofMF_VIDEO_SPHERICAL_VIEWDIRECTION = 16;

export function allocMF_VIDEO_SPHERICAL_VIEWDIRECTION(data?: Partial<MF_VIDEO_SPHERICAL_VIEWDIRECTION>): Uint8Array {
  const buf = new Uint8Array(sizeofMF_VIDEO_SPHERICAL_VIEWDIRECTION);
  const view = new DataView(buf.buffer);
  // 0x00: i32
  if (data?.iHeading !== undefined) view.setInt32(0, Number(data.iHeading), true);
  // 0x04: i32
  if (data?.iPitch !== undefined) view.setInt32(4, Number(data.iPitch), true);
  // 0x08: i32
  if (data?.iRoll !== undefined) view.setInt32(8, Number(data.iRoll), true);
  // 0x0c: pad4
  return buf;
}

export class MF_VIDEO_SPHERICAL_VIEWDIRECTIONView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: i32
  get iHeading(): number {
    return this.view.getInt32(0, true);
  }

  // 0x04: i32
  get iPitch(): number {
    return this.view.getInt32(4, true);
  }

  // 0x08: i32
  get iRoll(): number {
    return this.view.getInt32(8, true);
  }

  // 0x0c: pad4

  // 0x00: i32
  set iHeading(value: number) {
    this.view.setInt32(0, value, true);
  }

  // 0x04: i32
  set iPitch(value: number) {
    this.view.setInt32(4, value, true);
  }

  // 0x08: i32
  set iRoll(value: number) {
    this.view.setInt32(8, value, true);
  }

  // 0x0c: pad4
}

/**
 * Windows.Win32.Media.MediaFoundation.SENSORPROFILEID (size: 16)
 */
export interface SENSORPROFILEID {
  /** System.Guid */
  Type: Uint8Array | Deno.PointerValue;
  /** u32 */
  Index: number;
  /** u32 */
  Unused: number;
}

export const sizeofSENSORPROFILEID = 16;

export function allocSENSORPROFILEID(data?: Partial<SENSORPROFILEID>): Uint8Array {
  const buf = new Uint8Array(sizeofSENSORPROFILEID);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.Type !== undefined) view.setBigUint64(0, data.Type === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.Type))), true);
  // 0x08: u32
  if (data?.Index !== undefined) view.setUint32(8, Number(data.Index), true);
  // 0x0c: u32
  if (data?.Unused !== undefined) view.setUint32(12, Number(data.Unused), true);
  return buf;
}

export class SENSORPROFILEIDView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get Type(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(0, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x08: u32
  get Index(): number {
    return this.view.getUint32(8, true);
  }

  // 0x0c: u32
  get Unused(): number {
    return this.view.getUint32(12, true);
  }

  // 0x00: pointer
  set Type(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(0, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x08: u32
  set Index(value: number) {
    this.view.setUint32(8, value, true);
  }

  // 0x0c: u32
  set Unused(value: number) {
    this.view.setUint32(12, value, true);
  }
}

/**
 * Windows.Win32.Media.MediaFoundation.MFCameraIntrinsic_CameraModel (size: 16)
 */
export interface MFCameraIntrinsic_CameraModel {
  /** f32 */
  FocalLength_x: number;
  /** f32 */
  FocalLength_y: number;
  /** f32 */
  PrincipalPoint_x: number;
  /** f32 */
  PrincipalPoint_y: number;
}

export const sizeofMFCameraIntrinsic_CameraModel = 16;

export function allocMFCameraIntrinsic_CameraModel(data?: Partial<MFCameraIntrinsic_CameraModel>): Uint8Array {
  const buf = new Uint8Array(sizeofMFCameraIntrinsic_CameraModel);
  const view = new DataView(buf.buffer);
  // 0x00: f32
  if (data?.FocalLength_x !== undefined) view.setFloat32(0, Number(data.FocalLength_x), true);
  // 0x04: f32
  if (data?.FocalLength_y !== undefined) view.setFloat32(4, Number(data.FocalLength_y), true);
  // 0x08: f32
  if (data?.PrincipalPoint_x !== undefined) view.setFloat32(8, Number(data.PrincipalPoint_x), true);
  // 0x0c: f32
  if (data?.PrincipalPoint_y !== undefined) view.setFloat32(12, Number(data.PrincipalPoint_y), true);
  return buf;
}

export class MFCameraIntrinsic_CameraModelView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: f32
  get FocalLength_x(): number {
    return this.view.getFloat32(0, true);
  }

  // 0x04: f32
  get FocalLength_y(): number {
    return this.view.getFloat32(4, true);
  }

  // 0x08: f32
  get PrincipalPoint_x(): number {
    return this.view.getFloat32(8, true);
  }

  // 0x0c: f32
  get PrincipalPoint_y(): number {
    return this.view.getFloat32(12, true);
  }

  // 0x00: f32
  set FocalLength_x(value: number) {
    this.view.setFloat32(0, value, true);
  }

  // 0x04: f32
  set FocalLength_y(value: number) {
    this.view.setFloat32(4, value, true);
  }

  // 0x08: f32
  set PrincipalPoint_x(value: number) {
    this.view.setFloat32(8, value, true);
  }

  // 0x0c: f32
  set PrincipalPoint_y(value: number) {
    this.view.setFloat32(12, value, true);
  }
}

/**
 * Windows.Win32.Media.MediaFoundation.MFCameraIntrinsic_DistortionModel6KT (size: 32)
 */
export interface MFCameraIntrinsic_DistortionModel6KT {
  /** f32 */
  Radial_k1: number;
  /** f32 */
  Radial_k2: number;
  /** f32 */
  Radial_k3: number;
  /** f32 */
  Radial_k4: number;
  /** f32 */
  Radial_k5: number;
  /** f32 */
  Radial_k6: number;
  /** f32 */
  Tangential_p1: number;
  /** f32 */
  Tangential_p2: number;
}

export const sizeofMFCameraIntrinsic_DistortionModel6KT = 32;

export function allocMFCameraIntrinsic_DistortionModel6KT(data?: Partial<MFCameraIntrinsic_DistortionModel6KT>): Uint8Array {
  const buf = new Uint8Array(sizeofMFCameraIntrinsic_DistortionModel6KT);
  const view = new DataView(buf.buffer);
  // 0x00: f32
  if (data?.Radial_k1 !== undefined) view.setFloat32(0, Number(data.Radial_k1), true);
  // 0x04: f32
  if (data?.Radial_k2 !== undefined) view.setFloat32(4, Number(data.Radial_k2), true);
  // 0x08: f32
  if (data?.Radial_k3 !== undefined) view.setFloat32(8, Number(data.Radial_k3), true);
  // 0x0c: f32
  if (data?.Radial_k4 !== undefined) view.setFloat32(12, Number(data.Radial_k4), true);
  // 0x10: f32
  if (data?.Radial_k5 !== undefined) view.setFloat32(16, Number(data.Radial_k5), true);
  // 0x14: f32
  if (data?.Radial_k6 !== undefined) view.setFloat32(20, Number(data.Radial_k6), true);
  // 0x18: f32
  if (data?.Tangential_p1 !== undefined) view.setFloat32(24, Number(data.Tangential_p1), true);
  // 0x1c: f32
  if (data?.Tangential_p2 !== undefined) view.setFloat32(28, Number(data.Tangential_p2), true);
  return buf;
}

export class MFCameraIntrinsic_DistortionModel6KTView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: f32
  get Radial_k1(): number {
    return this.view.getFloat32(0, true);
  }

  // 0x04: f32
  get Radial_k2(): number {
    return this.view.getFloat32(4, true);
  }

  // 0x08: f32
  get Radial_k3(): number {
    return this.view.getFloat32(8, true);
  }

  // 0x0c: f32
  get Radial_k4(): number {
    return this.view.getFloat32(12, true);
  }

  // 0x10: f32
  get Radial_k5(): number {
    return this.view.getFloat32(16, true);
  }

  // 0x14: f32
  get Radial_k6(): number {
    return this.view.getFloat32(20, true);
  }

  // 0x18: f32
  get Tangential_p1(): number {
    return this.view.getFloat32(24, true);
  }

  // 0x1c: f32
  get Tangential_p2(): number {
    return this.view.getFloat32(28, true);
  }

  // 0x00: f32
  set Radial_k1(value: number) {
    this.view.setFloat32(0, value, true);
  }

  // 0x04: f32
  set Radial_k2(value: number) {
    this.view.setFloat32(4, value, true);
  }

  // 0x08: f32
  set Radial_k3(value: number) {
    this.view.setFloat32(8, value, true);
  }

  // 0x0c: f32
  set Radial_k4(value: number) {
    this.view.setFloat32(12, value, true);
  }

  // 0x10: f32
  set Radial_k5(value: number) {
    this.view.setFloat32(16, value, true);
  }

  // 0x14: f32
  set Radial_k6(value: number) {
    this.view.setFloat32(20, value, true);
  }

  // 0x18: f32
  set Tangential_p1(value: number) {
    this.view.setFloat32(24, value, true);
  }

  // 0x1c: f32
  set Tangential_p2(value: number) {
    this.view.setFloat32(28, value, true);
  }
}

/**
 * Windows.Win32.Media.MediaFoundation.MFCameraIntrinsic_DistortionModelArcTan (size: 24)
 */
export interface MFCameraIntrinsic_DistortionModelArcTan {
  /** f32 */
  Radial_k0: number;
  /** f32 */
  DistortionCenter_x: number;
  /** f32 */
  DistortionCenter_y: number;
  /** f32 */
  Tangential_x: number;
  /** f32 */
  Tangential_y: number;
}

export const sizeofMFCameraIntrinsic_DistortionModelArcTan = 24;

export function allocMFCameraIntrinsic_DistortionModelArcTan(data?: Partial<MFCameraIntrinsic_DistortionModelArcTan>): Uint8Array {
  const buf = new Uint8Array(sizeofMFCameraIntrinsic_DistortionModelArcTan);
  const view = new DataView(buf.buffer);
  // 0x00: f32
  if (data?.Radial_k0 !== undefined) view.setFloat32(0, Number(data.Radial_k0), true);
  // 0x04: f32
  if (data?.DistortionCenter_x !== undefined) view.setFloat32(4, Number(data.DistortionCenter_x), true);
  // 0x08: f32
  if (data?.DistortionCenter_y !== undefined) view.setFloat32(8, Number(data.DistortionCenter_y), true);
  // 0x0c: f32
  if (data?.Tangential_x !== undefined) view.setFloat32(12, Number(data.Tangential_x), true);
  // 0x10: f32
  if (data?.Tangential_y !== undefined) view.setFloat32(16, Number(data.Tangential_y), true);
  // 0x14: pad4
  return buf;
}

export class MFCameraIntrinsic_DistortionModelArcTanView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: f32
  get Radial_k0(): number {
    return this.view.getFloat32(0, true);
  }

  // 0x04: f32
  get DistortionCenter_x(): number {
    return this.view.getFloat32(4, true);
  }

  // 0x08: f32
  get DistortionCenter_y(): number {
    return this.view.getFloat32(8, true);
  }

  // 0x0c: f32
  get Tangential_x(): number {
    return this.view.getFloat32(12, true);
  }

  // 0x10: f32
  get Tangential_y(): number {
    return this.view.getFloat32(16, true);
  }

  // 0x14: pad4

  // 0x00: f32
  set Radial_k0(value: number) {
    this.view.setFloat32(0, value, true);
  }

  // 0x04: f32
  set DistortionCenter_x(value: number) {
    this.view.setFloat32(4, value, true);
  }

  // 0x08: f32
  set DistortionCenter_y(value: number) {
    this.view.setFloat32(8, value, true);
  }

  // 0x0c: f32
  set Tangential_x(value: number) {
    this.view.setFloat32(12, value, true);
  }

  // 0x10: f32
  set Tangential_y(value: number) {
    this.view.setFloat32(16, value, true);
  }

  // 0x14: pad4
}

/**
 * Windows.Win32.Media.MediaFoundation.MFExtendedCameraIntrinsic_IntrinsicModel (size: 24)
 */
export interface MFExtendedCameraIntrinsic_IntrinsicModel {
  /** u32 */
  Width: number;
  /** u32 */
  Height: number;
  /** u32 */
  SplitFrameId: number;
  /** Windows.Win32.Media.MediaFoundation.MFCameraIntrinsic_CameraModel */
  CameraModel: Uint8Array | Deno.PointerValue;
}

export const sizeofMFExtendedCameraIntrinsic_IntrinsicModel = 24;

export function allocMFExtendedCameraIntrinsic_IntrinsicModel(data?: Partial<MFExtendedCameraIntrinsic_IntrinsicModel>): Uint8Array {
  const buf = new Uint8Array(sizeofMFExtendedCameraIntrinsic_IntrinsicModel);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.Width !== undefined) view.setUint32(0, Number(data.Width), true);
  // 0x04: u32
  if (data?.Height !== undefined) view.setUint32(4, Number(data.Height), true);
  // 0x08: u32
  if (data?.SplitFrameId !== undefined) view.setUint32(8, Number(data.SplitFrameId), true);
  // 0x0c: pad4
  // 0x10: pointer
  if (data?.CameraModel !== undefined) view.setBigUint64(16, data.CameraModel === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.CameraModel))), true);
  return buf;
}

export class MFExtendedCameraIntrinsic_IntrinsicModelView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get Width(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: u32
  get Height(): number {
    return this.view.getUint32(4, true);
  }

  // 0x08: u32
  get SplitFrameId(): number {
    return this.view.getUint32(8, true);
  }

  // 0x0c: pad4

  // 0x10: pointer
  get CameraModel(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(16, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: u32
  set Width(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: u32
  set Height(value: number) {
    this.view.setUint32(4, value, true);
  }

  // 0x08: u32
  set SplitFrameId(value: number) {
    this.view.setUint32(8, value, true);
  }

  // 0x0c: pad4

  // 0x10: pointer
  set CameraModel(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(16, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.Media.MediaFoundation.ASF_INDEX_IDENTIFIER (size: 16)
 */
export interface ASF_INDEX_IDENTIFIER {
  /** System.Guid */
  guidIndexType: Uint8Array | Deno.PointerValue;
  /** u16 */
  wStreamNumber: number;
}

export const sizeofASF_INDEX_IDENTIFIER = 16;

export function allocASF_INDEX_IDENTIFIER(data?: Partial<ASF_INDEX_IDENTIFIER>): Uint8Array {
  const buf = new Uint8Array(sizeofASF_INDEX_IDENTIFIER);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.guidIndexType !== undefined) view.setBigUint64(0, data.guidIndexType === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.guidIndexType))), true);
  // 0x08: u16
  if (data?.wStreamNumber !== undefined) view.setUint16(8, Number(data.wStreamNumber), true);
  // 0x0a: pad6
  return buf;
}

export class ASF_INDEX_IDENTIFIERView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get guidIndexType(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(0, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x08: u16
  get wStreamNumber(): number {
    return this.view.getUint16(8, true);
  }

  // 0x0a: pad6

  // 0x00: pointer
  set guidIndexType(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(0, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x08: u16
  set wStreamNumber(value: number) {
    this.view.setUint16(8, value, true);
  }

  // 0x0a: pad6
}

/**
 * Windows.Win32.Media.MediaFoundation.ASF_INDEX_DESCRIPTOR (size: 32)
 */
export interface ASF_INDEX_DESCRIPTOR {
  /** Windows.Win32.Media.MediaFoundation.ASF_INDEX_IDENTIFIER */
  Identifier: Uint8Array | Deno.PointerValue;
  /** u16 */
  cPerEntryBytes: number;
  /** array */
  szDescription: Deno.PointerValue;
  /** u32 */
  dwInterval: number;
}

export const sizeofASF_INDEX_DESCRIPTOR = 32;

export function allocASF_INDEX_DESCRIPTOR(data?: Partial<ASF_INDEX_DESCRIPTOR>): Uint8Array {
  const buf = new Uint8Array(sizeofASF_INDEX_DESCRIPTOR);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.Identifier !== undefined) view.setBigUint64(0, data.Identifier === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.Identifier))), true);
  // 0x08: u16
  if (data?.cPerEntryBytes !== undefined) view.setUint16(8, Number(data.cPerEntryBytes), true);
  // 0x0a: pad6
  // 0x10: pointer
  if (data?.szDescription !== undefined) view.setBigUint64(16, data.szDescription === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.szDescription))), true);
  // 0x18: u32
  if (data?.dwInterval !== undefined) view.setUint32(24, Number(data.dwInterval), true);
  // 0x1c: pad4
  return buf;
}

export class ASF_INDEX_DESCRIPTORView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get Identifier(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(0, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x08: u16
  get cPerEntryBytes(): number {
    return this.view.getUint16(8, true);
  }

  // 0x0a: pad6

  // 0x10: pointer
  get szDescription(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(16, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x18: u32
  get dwInterval(): number {
    return this.view.getUint32(24, true);
  }

  // 0x1c: pad4

  // 0x00: pointer
  set Identifier(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(0, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x08: u16
  set cPerEntryBytes(value: number) {
    this.view.setUint16(8, value, true);
  }

  // 0x0a: pad6

  // 0x10: pointer
  set szDescription(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(16, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x18: u32
  set dwInterval(value: number) {
    this.view.setUint32(24, value, true);
  }

  // 0x1c: pad4
}

/**
 * Windows.Win32.Media.MediaFoundation.ASF_MUX_STATISTICS (size: 8)
 */
export interface ASF_MUX_STATISTICS {
  /** u32 */
  cFramesWritten: number;
  /** u32 */
  cFramesDropped: number;
}

export const sizeofASF_MUX_STATISTICS = 8;

export function allocASF_MUX_STATISTICS(data?: Partial<ASF_MUX_STATISTICS>): Uint8Array {
  const buf = new Uint8Array(sizeofASF_MUX_STATISTICS);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.cFramesWritten !== undefined) view.setUint32(0, Number(data.cFramesWritten), true);
  // 0x04: u32
  if (data?.cFramesDropped !== undefined) view.setUint32(4, Number(data.cFramesDropped), true);
  return buf;
}

export class ASF_MUX_STATISTICSView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get cFramesWritten(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: u32
  get cFramesDropped(): number {
    return this.view.getUint32(4, true);
  }

  // 0x00: u32
  set cFramesWritten(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: u32
  set cFramesDropped(value: number) {
    this.view.setUint32(4, value, true);
  }
}

/**
 * Windows.Win32.Media.MediaFoundation.MFVideoNormalizedRect (size: 16)
 */
export interface MFVideoNormalizedRect {
  /** f32 */
  left: number;
  /** f32 */
  top: number;
  /** f32 */
  right: number;
  /** f32 */
  bottom: number;
}

export const sizeofMFVideoNormalizedRect = 16;

export function allocMFVideoNormalizedRect(data?: Partial<MFVideoNormalizedRect>): Uint8Array {
  const buf = new Uint8Array(sizeofMFVideoNormalizedRect);
  const view = new DataView(buf.buffer);
  // 0x00: f32
  if (data?.left !== undefined) view.setFloat32(0, Number(data.left), true);
  // 0x04: f32
  if (data?.top !== undefined) view.setFloat32(4, Number(data.top), true);
  // 0x08: f32
  if (data?.right !== undefined) view.setFloat32(8, Number(data.right), true);
  // 0x0c: f32
  if (data?.bottom !== undefined) view.setFloat32(12, Number(data.bottom), true);
  return buf;
}

export class MFVideoNormalizedRectView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: f32
  get left(): number {
    return this.view.getFloat32(0, true);
  }

  // 0x04: f32
  get top(): number {
    return this.view.getFloat32(4, true);
  }

  // 0x08: f32
  get right(): number {
    return this.view.getFloat32(8, true);
  }

  // 0x0c: f32
  get bottom(): number {
    return this.view.getFloat32(12, true);
  }

  // 0x00: f32
  set left(value: number) {
    this.view.setFloat32(0, value, true);
  }

  // 0x04: f32
  set top(value: number) {
    this.view.setFloat32(4, value, true);
  }

  // 0x08: f32
  set right(value: number) {
    this.view.setFloat32(8, value, true);
  }

  // 0x0c: f32
  set bottom(value: number) {
    this.view.setFloat32(12, value, true);
  }
}

/**
 * Windows.Win32.Foundation.POINT (size: 8)
 */
export interface POINT {
  /** i32 */
  x: number;
  /** i32 */
  y: number;
}

export const sizeofPOINT = 8;

export function allocPOINT(data?: Partial<POINT>): Uint8Array {
  const buf = new Uint8Array(sizeofPOINT);
  const view = new DataView(buf.buffer);
  // 0x00: i32
  if (data?.x !== undefined) view.setInt32(0, Number(data.x), true);
  // 0x04: i32
  if (data?.y !== undefined) view.setInt32(4, Number(data.y), true);
  return buf;
}

export class POINTView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: i32
  get x(): number {
    return this.view.getInt32(0, true);
  }

  // 0x04: i32
  get y(): number {
    return this.view.getInt32(4, true);
  }

  // 0x00: i32
  set x(value: number) {
    this.view.setInt32(0, value, true);
  }

  // 0x04: i32
  set y(value: number) {
    this.view.setInt32(4, value, true);
  }
}

/**
 * Windows.Win32.Media.MediaFoundation.MOVE_RECT (size: 16)
 */
export interface MOVE_RECT {
  /** Windows.Win32.Foundation.POINT */
  SourcePoint: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.Foundation.RECT */
  DestRect: Uint8Array | Deno.PointerValue;
}

export const sizeofMOVE_RECT = 16;

export function allocMOVE_RECT(data?: Partial<MOVE_RECT>): Uint8Array {
  const buf = new Uint8Array(sizeofMOVE_RECT);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.SourcePoint !== undefined) view.setBigUint64(0, data.SourcePoint === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.SourcePoint))), true);
  // 0x08: pointer
  if (data?.DestRect !== undefined) view.setBigUint64(8, data.DestRect === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.DestRect))), true);
  return buf;
}

export class MOVE_RECTView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get SourcePoint(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(0, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x08: pointer
  get DestRect(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: pointer
  set SourcePoint(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(0, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x08: pointer
  set DestRect(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.Media.MediaFoundation.DIRTYRECT_INFO (size: 16)
 */
export interface DIRTYRECT_INFO {
  /** u32 */
  FrameNumber: number;
  /** u32 */
  NumDirtyRects: number;
  /** array */
  DirtyRects: Deno.PointerValue;
}

export const sizeofDIRTYRECT_INFO = 16;

export function allocDIRTYRECT_INFO(data?: Partial<DIRTYRECT_INFO>): Uint8Array {
  const buf = new Uint8Array(sizeofDIRTYRECT_INFO);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.FrameNumber !== undefined) view.setUint32(0, Number(data.FrameNumber), true);
  // 0x04: u32
  if (data?.NumDirtyRects !== undefined) view.setUint32(4, Number(data.NumDirtyRects), true);
  // 0x08: pointer
  if (data?.DirtyRects !== undefined) view.setBigUint64(8, data.DirtyRects === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.DirtyRects))), true);
  return buf;
}

export class DIRTYRECT_INFOView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get FrameNumber(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: u32
  get NumDirtyRects(): number {
    return this.view.getUint32(4, true);
  }

  // 0x08: pointer
  get DirtyRects(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: u32
  set FrameNumber(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: u32
  set NumDirtyRects(value: number) {
    this.view.setUint32(4, value, true);
  }

  // 0x08: pointer
  set DirtyRects(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.Media.MediaFoundation.MOVEREGION_INFO (size: 16)
 */
export interface MOVEREGION_INFO {
  /** u32 */
  FrameNumber: number;
  /** u32 */
  NumMoveRegions: number;
  /** array */
  MoveRegions: Deno.PointerValue;
}

export const sizeofMOVEREGION_INFO = 16;

export function allocMOVEREGION_INFO(data?: Partial<MOVEREGION_INFO>): Uint8Array {
  const buf = new Uint8Array(sizeofMOVEREGION_INFO);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.FrameNumber !== undefined) view.setUint32(0, Number(data.FrameNumber), true);
  // 0x04: u32
  if (data?.NumMoveRegions !== undefined) view.setUint32(4, Number(data.NumMoveRegions), true);
  // 0x08: pointer
  if (data?.MoveRegions !== undefined) view.setBigUint64(8, data.MoveRegions === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.MoveRegions))), true);
  return buf;
}

export class MOVEREGION_INFOView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get FrameNumber(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: u32
  get NumMoveRegions(): number {
    return this.view.getUint32(4, true);
  }

  // 0x08: pointer
  get MoveRegions(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: u32
  set FrameNumber(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: u32
  set NumMoveRegions(value: number) {
    this.view.setUint32(4, value, true);
  }

  // 0x08: pointer
  set MoveRegions(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.Media.MediaFoundation.ROI_AREA (size: 16)
 */
export interface ROI_AREA {
  /** Windows.Win32.Foundation.RECT */
  rect: Uint8Array | Deno.PointerValue;
  /** i32 */
  QPDelta: number;
}

export const sizeofROI_AREA = 16;

export function allocROI_AREA(data?: Partial<ROI_AREA>): Uint8Array {
  const buf = new Uint8Array(sizeofROI_AREA);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.rect !== undefined) view.setBigUint64(0, data.rect === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.rect))), true);
  // 0x08: i32
  if (data?.QPDelta !== undefined) view.setInt32(8, Number(data.QPDelta), true);
  // 0x0c: pad4
  return buf;
}

export class ROI_AREAView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get rect(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(0, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x08: i32
  get QPDelta(): number {
    return this.view.getInt32(8, true);
  }

  // 0x0c: pad4

  // 0x00: pointer
  set rect(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(0, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x08: i32
  set QPDelta(value: number) {
    this.view.setInt32(8, value, true);
  }

  // 0x0c: pad4
}

/**
 * Windows.Win32.Media.MediaFoundation.MACROBLOCK_DATA (size: 16)
 */
export interface MACROBLOCK_DATA {
  /** u32 */
  flags: number;
  /** i16 */
  motionVectorX: number;
  /** i16 */
  motionVectorY: number;
  /** i32 */
  QPDelta: number;
}

export const sizeofMACROBLOCK_DATA = 16;

export function allocMACROBLOCK_DATA(data?: Partial<MACROBLOCK_DATA>): Uint8Array {
  const buf = new Uint8Array(sizeofMACROBLOCK_DATA);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.flags !== undefined) view.setUint32(0, Number(data.flags), true);
  // 0x04: i16
  if (data?.motionVectorX !== undefined) view.setInt16(4, Number(data.motionVectorX), true);
  // 0x06: i16
  if (data?.motionVectorY !== undefined) view.setInt16(6, Number(data.motionVectorY), true);
  // 0x08: i32
  if (data?.QPDelta !== undefined) view.setInt32(8, Number(data.QPDelta), true);
  // 0x0c: pad4
  return buf;
}

export class MACROBLOCK_DATAView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get flags(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: i16
  get motionVectorX(): number {
    return this.view.getInt16(4, true);
  }

  // 0x06: i16
  get motionVectorY(): number {
    return this.view.getInt16(6, true);
  }

  // 0x08: i32
  get QPDelta(): number {
    return this.view.getInt32(8, true);
  }

  // 0x0c: pad4

  // 0x00: u32
  set flags(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: i16
  set motionVectorX(value: number) {
    this.view.setInt16(4, value, true);
  }

  // 0x06: i16
  set motionVectorY(value: number) {
    this.view.setInt16(6, value, true);
  }

  // 0x08: i32
  set QPDelta(value: number) {
    this.view.setInt32(8, value, true);
  }

  // 0x0c: pad4
}

/**
 * Windows.Win32.Media.MediaFoundation.DigitalWindowSetting (size: 24)
 */
export interface DigitalWindowSetting {
  /** f64 */
  OriginX: number;
  /** f64 */
  OriginY: number;
  /** f64 */
  WindowSize: number;
}

export const sizeofDigitalWindowSetting = 24;

export function allocDigitalWindowSetting(data?: Partial<DigitalWindowSetting>): Uint8Array {
  const buf = new Uint8Array(sizeofDigitalWindowSetting);
  const view = new DataView(buf.buffer);
  // 0x00: f64
  if (data?.OriginX !== undefined) view.setFloat64(0, Number(data.OriginX), true);
  // 0x08: f64
  if (data?.OriginY !== undefined) view.setFloat64(8, Number(data.OriginY), true);
  // 0x10: f64
  if (data?.WindowSize !== undefined) view.setFloat64(16, Number(data.WindowSize), true);
  return buf;
}

export class DigitalWindowSettingView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: f64
  get OriginX(): number {
    return this.view.getFloat64(0, true);
  }

  // 0x08: f64
  get OriginY(): number {
    return this.view.getFloat64(8, true);
  }

  // 0x10: f64
  get WindowSize(): number {
    return this.view.getFloat64(16, true);
  }

  // 0x00: f64
  set OriginX(value: number) {
    this.view.setFloat64(0, value, true);
  }

  // 0x08: f64
  set OriginY(value: number) {
    this.view.setFloat64(8, value, true);
  }

  // 0x10: f64
  set WindowSize(value: number) {
    this.view.setFloat64(16, value, true);
  }
}

/**
 * Windows.Win32.Media.MediaFoundation.MFFOLDDOWN_MATRIX (size: 24)
 */
export interface MFFOLDDOWN_MATRIX {
  /** u32 */
  cbSize: number;
  /** u32 */
  cSrcChannels: number;
  /** u32 */
  cDstChannels: number;
  /** u32 */
  dwChannelMask: number;
  /** array */
  Coeff: Deno.PointerValue;
}

export const sizeofMFFOLDDOWN_MATRIX = 24;

export function allocMFFOLDDOWN_MATRIX(data?: Partial<MFFOLDDOWN_MATRIX>): Uint8Array {
  const buf = new Uint8Array(sizeofMFFOLDDOWN_MATRIX);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.cbSize !== undefined) view.setUint32(0, Number(data.cbSize), true);
  // 0x04: u32
  if (data?.cSrcChannels !== undefined) view.setUint32(4, Number(data.cSrcChannels), true);
  // 0x08: u32
  if (data?.cDstChannels !== undefined) view.setUint32(8, Number(data.cDstChannels), true);
  // 0x0c: u32
  if (data?.dwChannelMask !== undefined) view.setUint32(12, Number(data.dwChannelMask), true);
  // 0x10: pointer
  if (data?.Coeff !== undefined) view.setBigUint64(16, data.Coeff === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.Coeff))), true);
  return buf;
}

export class MFFOLDDOWN_MATRIXView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get cbSize(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: u32
  get cSrcChannels(): number {
    return this.view.getUint32(4, true);
  }

  // 0x08: u32
  get cDstChannels(): number {
    return this.view.getUint32(8, true);
  }

  // 0x0c: u32
  get dwChannelMask(): number {
    return this.view.getUint32(12, true);
  }

  // 0x10: pointer
  get Coeff(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(16, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: u32
  set cbSize(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: u32
  set cSrcChannels(value: number) {
    this.view.setUint32(4, value, true);
  }

  // 0x08: u32
  set cDstChannels(value: number) {
    this.view.setUint32(8, value, true);
  }

  // 0x0c: u32
  set dwChannelMask(value: number) {
    this.view.setUint32(12, value, true);
  }

  // 0x10: pointer
  set Coeff(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(16, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.Media.MediaFoundation.MT_CUSTOM_VIDEO_PRIMARIES (size: 32)
 */
export interface MT_CUSTOM_VIDEO_PRIMARIES {
  /** f32 */
  fRx: number;
  /** f32 */
  fRy: number;
  /** f32 */
  fGx: number;
  /** f32 */
  fGy: number;
  /** f32 */
  fBx: number;
  /** f32 */
  fBy: number;
  /** f32 */
  fWx: number;
  /** f32 */
  fWy: number;
}

export const sizeofMT_CUSTOM_VIDEO_PRIMARIES = 32;

export function allocMT_CUSTOM_VIDEO_PRIMARIES(data?: Partial<MT_CUSTOM_VIDEO_PRIMARIES>): Uint8Array {
  const buf = new Uint8Array(sizeofMT_CUSTOM_VIDEO_PRIMARIES);
  const view = new DataView(buf.buffer);
  // 0x00: f32
  if (data?.fRx !== undefined) view.setFloat32(0, Number(data.fRx), true);
  // 0x04: f32
  if (data?.fRy !== undefined) view.setFloat32(4, Number(data.fRy), true);
  // 0x08: f32
  if (data?.fGx !== undefined) view.setFloat32(8, Number(data.fGx), true);
  // 0x0c: f32
  if (data?.fGy !== undefined) view.setFloat32(12, Number(data.fGy), true);
  // 0x10: f32
  if (data?.fBx !== undefined) view.setFloat32(16, Number(data.fBx), true);
  // 0x14: f32
  if (data?.fBy !== undefined) view.setFloat32(20, Number(data.fBy), true);
  // 0x18: f32
  if (data?.fWx !== undefined) view.setFloat32(24, Number(data.fWx), true);
  // 0x1c: f32
  if (data?.fWy !== undefined) view.setFloat32(28, Number(data.fWy), true);
  return buf;
}

export class MT_CUSTOM_VIDEO_PRIMARIESView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: f32
  get fRx(): number {
    return this.view.getFloat32(0, true);
  }

  // 0x04: f32
  get fRy(): number {
    return this.view.getFloat32(4, true);
  }

  // 0x08: f32
  get fGx(): number {
    return this.view.getFloat32(8, true);
  }

  // 0x0c: f32
  get fGy(): number {
    return this.view.getFloat32(12, true);
  }

  // 0x10: f32
  get fBx(): number {
    return this.view.getFloat32(16, true);
  }

  // 0x14: f32
  get fBy(): number {
    return this.view.getFloat32(20, true);
  }

  // 0x18: f32
  get fWx(): number {
    return this.view.getFloat32(24, true);
  }

  // 0x1c: f32
  get fWy(): number {
    return this.view.getFloat32(28, true);
  }

  // 0x00: f32
  set fRx(value: number) {
    this.view.setFloat32(0, value, true);
  }

  // 0x04: f32
  set fRy(value: number) {
    this.view.setFloat32(4, value, true);
  }

  // 0x08: f32
  set fGx(value: number) {
    this.view.setFloat32(8, value, true);
  }

  // 0x0c: f32
  set fGy(value: number) {
    this.view.setFloat32(12, value, true);
  }

  // 0x10: f32
  set fBx(value: number) {
    this.view.setFloat32(16, value, true);
  }

  // 0x14: f32
  set fBy(value: number) {
    this.view.setFloat32(20, value, true);
  }

  // 0x18: f32
  set fWx(value: number) {
    this.view.setFloat32(24, value, true);
  }

  // 0x1c: f32
  set fWy(value: number) {
    this.view.setFloat32(28, value, true);
  }
}

/**
 * Windows.Win32.Media.MediaFoundation.MT_ARBITRARY_HEADER (size: 40)
 */
export interface MT_ARBITRARY_HEADER {
  /** System.Guid */
  majortype: Uint8Array | Deno.PointerValue;
  /** System.Guid */
  subtype: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.Foundation.BOOL */
  bFixedSizeSamples: boolean;
  /** Windows.Win32.Foundation.BOOL */
  bTemporalCompression: boolean;
  /** u32 */
  lSampleSize: number;
  /** System.Guid */
  formattype: Uint8Array | Deno.PointerValue;
}

export const sizeofMT_ARBITRARY_HEADER = 40;

export function allocMT_ARBITRARY_HEADER(data?: Partial<MT_ARBITRARY_HEADER>): Uint8Array {
  const buf = new Uint8Array(sizeofMT_ARBITRARY_HEADER);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.majortype !== undefined) view.setBigUint64(0, data.majortype === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.majortype))), true);
  // 0x08: pointer
  if (data?.subtype !== undefined) view.setBigUint64(8, data.subtype === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.subtype))), true);
  // 0x10: i32
  if (data?.bFixedSizeSamples !== undefined) view.setInt32(16, Number(data.bFixedSizeSamples), true);
  // 0x14: i32
  if (data?.bTemporalCompression !== undefined) view.setInt32(20, Number(data.bTemporalCompression), true);
  // 0x18: u32
  if (data?.lSampleSize !== undefined) view.setUint32(24, Number(data.lSampleSize), true);
  // 0x1c: pad4
  // 0x20: pointer
  if (data?.formattype !== undefined) view.setBigUint64(32, data.formattype === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.formattype))), true);
  return buf;
}

export class MT_ARBITRARY_HEADERView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get majortype(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(0, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x08: pointer
  get subtype(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x10: i32
  get bFixedSizeSamples(): number {
    return this.view.getInt32(16, true);
  }

  // 0x14: i32
  get bTemporalCompression(): number {
    return this.view.getInt32(20, true);
  }

  // 0x18: u32
  get lSampleSize(): number {
    return this.view.getUint32(24, true);
  }

  // 0x1c: pad4

  // 0x20: pointer
  get formattype(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(32, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: pointer
  set majortype(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(0, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x08: pointer
  set subtype(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x10: i32
  set bFixedSizeSamples(value: number) {
    this.view.setInt32(16, value, true);
  }

  // 0x14: i32
  set bTemporalCompression(value: number) {
    this.view.setInt32(20, value, true);
  }

  // 0x18: u32
  set lSampleSize(value: number) {
    this.view.setUint32(24, value, true);
  }

  // 0x1c: pad4

  // 0x20: pointer
  set formattype(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(32, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.Media.MediaFoundation.MF_FLOAT2 (size: 8)
 */
export interface MF_FLOAT2 {
  /** f32 */
  x: number;
  /** f32 */
  y: number;
}

export const sizeofMF_FLOAT2 = 8;

export function allocMF_FLOAT2(data?: Partial<MF_FLOAT2>): Uint8Array {
  const buf = new Uint8Array(sizeofMF_FLOAT2);
  const view = new DataView(buf.buffer);
  // 0x00: f32
  if (data?.x !== undefined) view.setFloat32(0, Number(data.x), true);
  // 0x04: f32
  if (data?.y !== undefined) view.setFloat32(4, Number(data.y), true);
  return buf;
}

export class MF_FLOAT2View {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: f32
  get x(): number {
    return this.view.getFloat32(0, true);
  }

  // 0x04: f32
  get y(): number {
    return this.view.getFloat32(4, true);
  }

  // 0x00: f32
  set x(value: number) {
    this.view.setFloat32(0, value, true);
  }

  // 0x04: f32
  set y(value: number) {
    this.view.setFloat32(4, value, true);
  }
}

/**
 * Windows.Win32.Media.MediaFoundation.MF_FLOAT3 (size: 16)
 */
export interface MF_FLOAT3 {
  /** f32 */
  x: number;
  /** f32 */
  y: number;
  /** f32 */
  z: number;
}

export const sizeofMF_FLOAT3 = 16;

export function allocMF_FLOAT3(data?: Partial<MF_FLOAT3>): Uint8Array {
  const buf = new Uint8Array(sizeofMF_FLOAT3);
  const view = new DataView(buf.buffer);
  // 0x00: f32
  if (data?.x !== undefined) view.setFloat32(0, Number(data.x), true);
  // 0x04: f32
  if (data?.y !== undefined) view.setFloat32(4, Number(data.y), true);
  // 0x08: f32
  if (data?.z !== undefined) view.setFloat32(8, Number(data.z), true);
  // 0x0c: pad4
  return buf;
}

export class MF_FLOAT3View {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: f32
  get x(): number {
    return this.view.getFloat32(0, true);
  }

  // 0x04: f32
  get y(): number {
    return this.view.getFloat32(4, true);
  }

  // 0x08: f32
  get z(): number {
    return this.view.getFloat32(8, true);
  }

  // 0x0c: pad4

  // 0x00: f32
  set x(value: number) {
    this.view.setFloat32(0, value, true);
  }

  // 0x04: f32
  set y(value: number) {
    this.view.setFloat32(4, value, true);
  }

  // 0x08: f32
  set z(value: number) {
    this.view.setFloat32(8, value, true);
  }

  // 0x0c: pad4
}

/**
 * Windows.Win32.Media.MediaFoundation.MF_QUATERNION (size: 16)
 */
export interface MF_QUATERNION {
  /** f32 */
  x: number;
  /** f32 */
  y: number;
  /** f32 */
  z: number;
  /** f32 */
  w: number;
}

export const sizeofMF_QUATERNION = 16;

export function allocMF_QUATERNION(data?: Partial<MF_QUATERNION>): Uint8Array {
  const buf = new Uint8Array(sizeofMF_QUATERNION);
  const view = new DataView(buf.buffer);
  // 0x00: f32
  if (data?.x !== undefined) view.setFloat32(0, Number(data.x), true);
  // 0x04: f32
  if (data?.y !== undefined) view.setFloat32(4, Number(data.y), true);
  // 0x08: f32
  if (data?.z !== undefined) view.setFloat32(8, Number(data.z), true);
  // 0x0c: f32
  if (data?.w !== undefined) view.setFloat32(12, Number(data.w), true);
  return buf;
}

export class MF_QUATERNIONView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: f32
  get x(): number {
    return this.view.getFloat32(0, true);
  }

  // 0x04: f32
  get y(): number {
    return this.view.getFloat32(4, true);
  }

  // 0x08: f32
  get z(): number {
    return this.view.getFloat32(8, true);
  }

  // 0x0c: f32
  get w(): number {
    return this.view.getFloat32(12, true);
  }

  // 0x00: f32
  set x(value: number) {
    this.view.setFloat32(0, value, true);
  }

  // 0x04: f32
  set y(value: number) {
    this.view.setFloat32(4, value, true);
  }

  // 0x08: f32
  set z(value: number) {
    this.view.setFloat32(8, value, true);
  }

  // 0x0c: f32
  set w(value: number) {
    this.view.setFloat32(12, value, true);
  }
}

/**
 * Windows.Win32.Media.MediaFoundation.MFCameraExtrinsic_CalibratedTransform (size: 24)
 */
export interface MFCameraExtrinsic_CalibratedTransform {
  /** System.Guid */
  CalibrationId: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.Media.MediaFoundation.MF_FLOAT3 */
  Position: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.Media.MediaFoundation.MF_QUATERNION */
  Orientation: Uint8Array | Deno.PointerValue;
}

export const sizeofMFCameraExtrinsic_CalibratedTransform = 24;

export function allocMFCameraExtrinsic_CalibratedTransform(data?: Partial<MFCameraExtrinsic_CalibratedTransform>): Uint8Array {
  const buf = new Uint8Array(sizeofMFCameraExtrinsic_CalibratedTransform);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.CalibrationId !== undefined) view.setBigUint64(0, data.CalibrationId === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.CalibrationId))), true);
  // 0x08: pointer
  if (data?.Position !== undefined) view.setBigUint64(8, data.Position === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.Position))), true);
  // 0x10: pointer
  if (data?.Orientation !== undefined) view.setBigUint64(16, data.Orientation === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.Orientation))), true);
  return buf;
}

export class MFCameraExtrinsic_CalibratedTransformView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get CalibrationId(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(0, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x08: pointer
  get Position(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x10: pointer
  get Orientation(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(16, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: pointer
  set CalibrationId(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(0, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x08: pointer
  set Position(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x10: pointer
  set Orientation(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(16, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.Media.MediaFoundation.MFCameraExtrinsics (size: 16)
 */
export interface MFCameraExtrinsics {
  /** u32 */
  TransformCount: number;
  /** array */
  CalibratedTransforms: Deno.PointerValue;
}

export const sizeofMFCameraExtrinsics = 16;

export function allocMFCameraExtrinsics(data?: Partial<MFCameraExtrinsics>): Uint8Array {
  const buf = new Uint8Array(sizeofMFCameraExtrinsics);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.TransformCount !== undefined) view.setUint32(0, Number(data.TransformCount), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.CalibratedTransforms !== undefined) view.setBigUint64(8, data.CalibratedTransforms === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.CalibratedTransforms))), true);
  return buf;
}

export class MFCameraExtrinsicsView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get TransformCount(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  get CalibratedTransforms(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: u32
  set TransformCount(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  set CalibratedTransforms(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.Media.MediaFoundation.MFCameraIntrinsic_PinholeCameraModel (size: 16)
 */
export interface MFCameraIntrinsic_PinholeCameraModel {
  /** Windows.Win32.Media.MediaFoundation.MF_FLOAT2 */
  FocalLength: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.Media.MediaFoundation.MF_FLOAT2 */
  PrincipalPoint: Uint8Array | Deno.PointerValue;
}

export const sizeofMFCameraIntrinsic_PinholeCameraModel = 16;

export function allocMFCameraIntrinsic_PinholeCameraModel(data?: Partial<MFCameraIntrinsic_PinholeCameraModel>): Uint8Array {
  const buf = new Uint8Array(sizeofMFCameraIntrinsic_PinholeCameraModel);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.FocalLength !== undefined) view.setBigUint64(0, data.FocalLength === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.FocalLength))), true);
  // 0x08: pointer
  if (data?.PrincipalPoint !== undefined) view.setBigUint64(8, data.PrincipalPoint === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.PrincipalPoint))), true);
  return buf;
}

export class MFCameraIntrinsic_PinholeCameraModelView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get FocalLength(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(0, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x08: pointer
  get PrincipalPoint(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: pointer
  set FocalLength(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(0, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x08: pointer
  set PrincipalPoint(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.Media.MediaFoundation.MFCameraIntrinsic_DistortionModel (size: 24)
 */
export interface MFCameraIntrinsic_DistortionModel {
  /** f32 */
  Radial_k1: number;
  /** f32 */
  Radial_k2: number;
  /** f32 */
  Radial_k3: number;
  /** f32 */
  Tangential_p1: number;
  /** f32 */
  Tangential_p2: number;
}

export const sizeofMFCameraIntrinsic_DistortionModel = 24;

export function allocMFCameraIntrinsic_DistortionModel(data?: Partial<MFCameraIntrinsic_DistortionModel>): Uint8Array {
  const buf = new Uint8Array(sizeofMFCameraIntrinsic_DistortionModel);
  const view = new DataView(buf.buffer);
  // 0x00: f32
  if (data?.Radial_k1 !== undefined) view.setFloat32(0, Number(data.Radial_k1), true);
  // 0x04: f32
  if (data?.Radial_k2 !== undefined) view.setFloat32(4, Number(data.Radial_k2), true);
  // 0x08: f32
  if (data?.Radial_k3 !== undefined) view.setFloat32(8, Number(data.Radial_k3), true);
  // 0x0c: f32
  if (data?.Tangential_p1 !== undefined) view.setFloat32(12, Number(data.Tangential_p1), true);
  // 0x10: f32
  if (data?.Tangential_p2 !== undefined) view.setFloat32(16, Number(data.Tangential_p2), true);
  // 0x14: pad4
  return buf;
}

export class MFCameraIntrinsic_DistortionModelView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: f32
  get Radial_k1(): number {
    return this.view.getFloat32(0, true);
  }

  // 0x04: f32
  get Radial_k2(): number {
    return this.view.getFloat32(4, true);
  }

  // 0x08: f32
  get Radial_k3(): number {
    return this.view.getFloat32(8, true);
  }

  // 0x0c: f32
  get Tangential_p1(): number {
    return this.view.getFloat32(12, true);
  }

  // 0x10: f32
  get Tangential_p2(): number {
    return this.view.getFloat32(16, true);
  }

  // 0x14: pad4

  // 0x00: f32
  set Radial_k1(value: number) {
    this.view.setFloat32(0, value, true);
  }

  // 0x04: f32
  set Radial_k2(value: number) {
    this.view.setFloat32(4, value, true);
  }

  // 0x08: f32
  set Radial_k3(value: number) {
    this.view.setFloat32(8, value, true);
  }

  // 0x0c: f32
  set Tangential_p1(value: number) {
    this.view.setFloat32(12, value, true);
  }

  // 0x10: f32
  set Tangential_p2(value: number) {
    this.view.setFloat32(16, value, true);
  }

  // 0x14: pad4
}

/**
 * Windows.Win32.Media.MediaFoundation.MFPinholeCameraIntrinsic_IntrinsicModel (size: 24)
 */
export interface MFPinholeCameraIntrinsic_IntrinsicModel {
  /** u32 */
  Width: number;
  /** u32 */
  Height: number;
  /** Windows.Win32.Media.MediaFoundation.MFCameraIntrinsic_PinholeCameraModel */
  CameraModel: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.Media.MediaFoundation.MFCameraIntrinsic_DistortionModel */
  DistortionModel: Uint8Array | Deno.PointerValue;
}

export const sizeofMFPinholeCameraIntrinsic_IntrinsicModel = 24;

export function allocMFPinholeCameraIntrinsic_IntrinsicModel(data?: Partial<MFPinholeCameraIntrinsic_IntrinsicModel>): Uint8Array {
  const buf = new Uint8Array(sizeofMFPinholeCameraIntrinsic_IntrinsicModel);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.Width !== undefined) view.setUint32(0, Number(data.Width), true);
  // 0x04: u32
  if (data?.Height !== undefined) view.setUint32(4, Number(data.Height), true);
  // 0x08: pointer
  if (data?.CameraModel !== undefined) view.setBigUint64(8, data.CameraModel === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.CameraModel))), true);
  // 0x10: pointer
  if (data?.DistortionModel !== undefined) view.setBigUint64(16, data.DistortionModel === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.DistortionModel))), true);
  return buf;
}

export class MFPinholeCameraIntrinsic_IntrinsicModelView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get Width(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: u32
  get Height(): number {
    return this.view.getUint32(4, true);
  }

  // 0x08: pointer
  get CameraModel(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x10: pointer
  get DistortionModel(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(16, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: u32
  set Width(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: u32
  set Height(value: number) {
    this.view.setUint32(4, value, true);
  }

  // 0x08: pointer
  set CameraModel(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x10: pointer
  set DistortionModel(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(16, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.Media.MediaFoundation.MFPinholeCameraIntrinsics (size: 16)
 */
export interface MFPinholeCameraIntrinsics {
  /** u32 */
  IntrinsicModelCount: number;
  /** array */
  IntrinsicModels: Deno.PointerValue;
}

export const sizeofMFPinholeCameraIntrinsics = 16;

export function allocMFPinholeCameraIntrinsics(data?: Partial<MFPinholeCameraIntrinsics>): Uint8Array {
  const buf = new Uint8Array(sizeofMFPinholeCameraIntrinsics);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.IntrinsicModelCount !== undefined) view.setUint32(0, Number(data.IntrinsicModelCount), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.IntrinsicModels !== undefined) view.setBigUint64(8, data.IntrinsicModels === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.IntrinsicModels))), true);
  return buf;
}

export class MFPinholeCameraIntrinsicsView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get IntrinsicModelCount(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  get IntrinsicModels(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: u32
  set IntrinsicModelCount(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  set IntrinsicModels(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.Media.MediaFoundation.MFMPEG2DLNASINKSTATS (size: 88)
 */
export interface MFMPEG2DLNASINKSTATS {
  /** u64 */
  cBytesWritten: bigint | number;
  /** Windows.Win32.Foundation.BOOL */
  fPAL: boolean;
  /** u32 */
  fccVideo: number;
  /** u32 */
  dwVideoWidth: number;
  /** u32 */
  dwVideoHeight: number;
  /** u64 */
  cVideoFramesReceived: bigint | number;
  /** u64 */
  cVideoFramesEncoded: bigint | number;
  /** u64 */
  cVideoFramesSkipped: bigint | number;
  /** u64 */
  cBlackVideoFramesEncoded: bigint | number;
  /** u64 */
  cVideoFramesDuplicated: bigint | number;
  /** u32 */
  cAudioSamplesPerSec: number;
  /** u32 */
  cAudioChannels: number;
  /** u64 */
  cAudioBytesReceived: bigint | number;
  /** u64 */
  cAudioFramesEncoded: bigint | number;
}

export const sizeofMFMPEG2DLNASINKSTATS = 88;

export function allocMFMPEG2DLNASINKSTATS(data?: Partial<MFMPEG2DLNASINKSTATS>): Uint8Array {
  const buf = new Uint8Array(sizeofMFMPEG2DLNASINKSTATS);
  const view = new DataView(buf.buffer);
  // 0x00: u64
  if (data?.cBytesWritten !== undefined) view.setBigUint64(0, BigInt(data.cBytesWritten), true);
  // 0x08: i32
  if (data?.fPAL !== undefined) view.setInt32(8, Number(data.fPAL), true);
  // 0x0c: u32
  if (data?.fccVideo !== undefined) view.setUint32(12, Number(data.fccVideo), true);
  // 0x10: u32
  if (data?.dwVideoWidth !== undefined) view.setUint32(16, Number(data.dwVideoWidth), true);
  // 0x14: u32
  if (data?.dwVideoHeight !== undefined) view.setUint32(20, Number(data.dwVideoHeight), true);
  // 0x18: u64
  if (data?.cVideoFramesReceived !== undefined) view.setBigUint64(24, BigInt(data.cVideoFramesReceived), true);
  // 0x20: u64
  if (data?.cVideoFramesEncoded !== undefined) view.setBigUint64(32, BigInt(data.cVideoFramesEncoded), true);
  // 0x28: u64
  if (data?.cVideoFramesSkipped !== undefined) view.setBigUint64(40, BigInt(data.cVideoFramesSkipped), true);
  // 0x30: u64
  if (data?.cBlackVideoFramesEncoded !== undefined) view.setBigUint64(48, BigInt(data.cBlackVideoFramesEncoded), true);
  // 0x38: u64
  if (data?.cVideoFramesDuplicated !== undefined) view.setBigUint64(56, BigInt(data.cVideoFramesDuplicated), true);
  // 0x40: u32
  if (data?.cAudioSamplesPerSec !== undefined) view.setUint32(64, Number(data.cAudioSamplesPerSec), true);
  // 0x44: u32
  if (data?.cAudioChannels !== undefined) view.setUint32(68, Number(data.cAudioChannels), true);
  // 0x48: u64
  if (data?.cAudioBytesReceived !== undefined) view.setBigUint64(72, BigInt(data.cAudioBytesReceived), true);
  // 0x50: u64
  if (data?.cAudioFramesEncoded !== undefined) view.setBigUint64(80, BigInt(data.cAudioFramesEncoded), true);
  return buf;
}

export class MFMPEG2DLNASINKSTATSView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u64
  get cBytesWritten(): bigint | number {
    return Number(this.view.getBigUint64(0, true));
  }

  // 0x08: i32
  get fPAL(): number {
    return this.view.getInt32(8, true);
  }

  // 0x0c: u32
  get fccVideo(): number {
    return this.view.getUint32(12, true);
  }

  // 0x10: u32
  get dwVideoWidth(): number {
    return this.view.getUint32(16, true);
  }

  // 0x14: u32
  get dwVideoHeight(): number {
    return this.view.getUint32(20, true);
  }

  // 0x18: u64
  get cVideoFramesReceived(): bigint | number {
    return Number(this.view.getBigUint64(24, true));
  }

  // 0x20: u64
  get cVideoFramesEncoded(): bigint | number {
    return Number(this.view.getBigUint64(32, true));
  }

  // 0x28: u64
  get cVideoFramesSkipped(): bigint | number {
    return Number(this.view.getBigUint64(40, true));
  }

  // 0x30: u64
  get cBlackVideoFramesEncoded(): bigint | number {
    return Number(this.view.getBigUint64(48, true));
  }

  // 0x38: u64
  get cVideoFramesDuplicated(): bigint | number {
    return Number(this.view.getBigUint64(56, true));
  }

  // 0x40: u32
  get cAudioSamplesPerSec(): number {
    return this.view.getUint32(64, true);
  }

  // 0x44: u32
  get cAudioChannels(): number {
    return this.view.getUint32(68, true);
  }

  // 0x48: u64
  get cAudioBytesReceived(): bigint | number {
    return Number(this.view.getBigUint64(72, true));
  }

  // 0x50: u64
  get cAudioFramesEncoded(): bigint | number {
    return Number(this.view.getBigUint64(80, true));
  }

  // 0x00: u64
  set cBytesWritten(value: bigint | number) {
    this.view.setBigUint64(0, BigInt(value), true);
  }

  // 0x08: i32
  set fPAL(value: number) {
    this.view.setInt32(8, value, true);
  }

  // 0x0c: u32
  set fccVideo(value: number) {
    this.view.setUint32(12, value, true);
  }

  // 0x10: u32
  set dwVideoWidth(value: number) {
    this.view.setUint32(16, value, true);
  }

  // 0x14: u32
  set dwVideoHeight(value: number) {
    this.view.setUint32(20, value, true);
  }

  // 0x18: u64
  set cVideoFramesReceived(value: bigint | number) {
    this.view.setBigUint64(24, BigInt(value), true);
  }

  // 0x20: u64
  set cVideoFramesEncoded(value: bigint | number) {
    this.view.setBigUint64(32, BigInt(value), true);
  }

  // 0x28: u64
  set cVideoFramesSkipped(value: bigint | number) {
    this.view.setBigUint64(40, BigInt(value), true);
  }

  // 0x30: u64
  set cBlackVideoFramesEncoded(value: bigint | number) {
    this.view.setBigUint64(48, BigInt(value), true);
  }

  // 0x38: u64
  set cVideoFramesDuplicated(value: bigint | number) {
    this.view.setBigUint64(56, BigInt(value), true);
  }

  // 0x40: u32
  set cAudioSamplesPerSec(value: number) {
    this.view.setUint32(64, value, true);
  }

  // 0x44: u32
  set cAudioChannels(value: number) {
    this.view.setUint32(68, value, true);
  }

  // 0x48: u64
  set cAudioBytesReceived(value: bigint | number) {
    this.view.setBigUint64(72, BigInt(value), true);
  }

  // 0x50: u64
  set cAudioFramesEncoded(value: bigint | number) {
    this.view.setBigUint64(80, BigInt(value), true);
  }
}

/**
 * Windows.Win32.Media.MediaFoundation.MF_SINK_WRITER_STATISTICS (size: 112)
 */
export interface MF_SINK_WRITER_STATISTICS {
  /** u32 */
  cb: number;
  /** i64 */
  llLastTimestampReceived: bigint | number;
  /** i64 */
  llLastTimestampEncoded: bigint | number;
  /** i64 */
  llLastTimestampProcessed: bigint | number;
  /** i64 */
  llLastStreamTickReceived: bigint | number;
  /** i64 */
  llLastSinkSampleRequest: bigint | number;
  /** u64 */
  qwNumSamplesReceived: bigint | number;
  /** u64 */
  qwNumSamplesEncoded: bigint | number;
  /** u64 */
  qwNumSamplesProcessed: bigint | number;
  /** u64 */
  qwNumStreamTicksReceived: bigint | number;
  /** u32 */
  dwByteCountQueued: number;
  /** u64 */
  qwByteCountProcessed: bigint | number;
  /** u32 */
  dwNumOutstandingSinkSampleRequests: number;
  /** u32 */
  dwAverageSampleRateReceived: number;
  /** u32 */
  dwAverageSampleRateEncoded: number;
  /** u32 */
  dwAverageSampleRateProcessed: number;
}

export const sizeofMF_SINK_WRITER_STATISTICS = 112;

export function allocMF_SINK_WRITER_STATISTICS(data?: Partial<MF_SINK_WRITER_STATISTICS>): Uint8Array {
  const buf = new Uint8Array(sizeofMF_SINK_WRITER_STATISTICS);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.cb !== undefined) view.setUint32(0, Number(data.cb), true);
  // 0x04: pad4
  // 0x08: i64
  if (data?.llLastTimestampReceived !== undefined) view.setBigInt64(8, BigInt(data.llLastTimestampReceived), true);
  // 0x10: i64
  if (data?.llLastTimestampEncoded !== undefined) view.setBigInt64(16, BigInt(data.llLastTimestampEncoded), true);
  // 0x18: i64
  if (data?.llLastTimestampProcessed !== undefined) view.setBigInt64(24, BigInt(data.llLastTimestampProcessed), true);
  // 0x20: i64
  if (data?.llLastStreamTickReceived !== undefined) view.setBigInt64(32, BigInt(data.llLastStreamTickReceived), true);
  // 0x28: i64
  if (data?.llLastSinkSampleRequest !== undefined) view.setBigInt64(40, BigInt(data.llLastSinkSampleRequest), true);
  // 0x30: u64
  if (data?.qwNumSamplesReceived !== undefined) view.setBigUint64(48, BigInt(data.qwNumSamplesReceived), true);
  // 0x38: u64
  if (data?.qwNumSamplesEncoded !== undefined) view.setBigUint64(56, BigInt(data.qwNumSamplesEncoded), true);
  // 0x40: u64
  if (data?.qwNumSamplesProcessed !== undefined) view.setBigUint64(64, BigInt(data.qwNumSamplesProcessed), true);
  // 0x48: u64
  if (data?.qwNumStreamTicksReceived !== undefined) view.setBigUint64(72, BigInt(data.qwNumStreamTicksReceived), true);
  // 0x50: u32
  if (data?.dwByteCountQueued !== undefined) view.setUint32(80, Number(data.dwByteCountQueued), true);
  // 0x54: pad4
  // 0x58: u64
  if (data?.qwByteCountProcessed !== undefined) view.setBigUint64(88, BigInt(data.qwByteCountProcessed), true);
  // 0x60: u32
  if (data?.dwNumOutstandingSinkSampleRequests !== undefined) view.setUint32(96, Number(data.dwNumOutstandingSinkSampleRequests), true);
  // 0x64: u32
  if (data?.dwAverageSampleRateReceived !== undefined) view.setUint32(100, Number(data.dwAverageSampleRateReceived), true);
  // 0x68: u32
  if (data?.dwAverageSampleRateEncoded !== undefined) view.setUint32(104, Number(data.dwAverageSampleRateEncoded), true);
  // 0x6c: u32
  if (data?.dwAverageSampleRateProcessed !== undefined) view.setUint32(108, Number(data.dwAverageSampleRateProcessed), true);
  return buf;
}

export class MF_SINK_WRITER_STATISTICSView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get cb(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: pad4

  // 0x08: i64
  get llLastTimestampReceived(): bigint | number {
    return Number(this.view.getBigInt64(8, true));
  }

  // 0x10: i64
  get llLastTimestampEncoded(): bigint | number {
    return Number(this.view.getBigInt64(16, true));
  }

  // 0x18: i64
  get llLastTimestampProcessed(): bigint | number {
    return Number(this.view.getBigInt64(24, true));
  }

  // 0x20: i64
  get llLastStreamTickReceived(): bigint | number {
    return Number(this.view.getBigInt64(32, true));
  }

  // 0x28: i64
  get llLastSinkSampleRequest(): bigint | number {
    return Number(this.view.getBigInt64(40, true));
  }

  // 0x30: u64
  get qwNumSamplesReceived(): bigint | number {
    return Number(this.view.getBigUint64(48, true));
  }

  // 0x38: u64
  get qwNumSamplesEncoded(): bigint | number {
    return Number(this.view.getBigUint64(56, true));
  }

  // 0x40: u64
  get qwNumSamplesProcessed(): bigint | number {
    return Number(this.view.getBigUint64(64, true));
  }

  // 0x48: u64
  get qwNumStreamTicksReceived(): bigint | number {
    return Number(this.view.getBigUint64(72, true));
  }

  // 0x50: u32
  get dwByteCountQueued(): number {
    return this.view.getUint32(80, true);
  }

  // 0x54: pad4

  // 0x58: u64
  get qwByteCountProcessed(): bigint | number {
    return Number(this.view.getBigUint64(88, true));
  }

  // 0x60: u32
  get dwNumOutstandingSinkSampleRequests(): number {
    return this.view.getUint32(96, true);
  }

  // 0x64: u32
  get dwAverageSampleRateReceived(): number {
    return this.view.getUint32(100, true);
  }

  // 0x68: u32
  get dwAverageSampleRateEncoded(): number {
    return this.view.getUint32(104, true);
  }

  // 0x6c: u32
  get dwAverageSampleRateProcessed(): number {
    return this.view.getUint32(108, true);
  }

  // 0x00: u32
  set cb(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: pad4

  // 0x08: i64
  set llLastTimestampReceived(value: bigint | number) {
    this.view.setBigInt64(8, BigInt(value), true);
  }

  // 0x10: i64
  set llLastTimestampEncoded(value: bigint | number) {
    this.view.setBigInt64(16, BigInt(value), true);
  }

  // 0x18: i64
  set llLastTimestampProcessed(value: bigint | number) {
    this.view.setBigInt64(24, BigInt(value), true);
  }

  // 0x20: i64
  set llLastStreamTickReceived(value: bigint | number) {
    this.view.setBigInt64(32, BigInt(value), true);
  }

  // 0x28: i64
  set llLastSinkSampleRequest(value: bigint | number) {
    this.view.setBigInt64(40, BigInt(value), true);
  }

  // 0x30: u64
  set qwNumSamplesReceived(value: bigint | number) {
    this.view.setBigUint64(48, BigInt(value), true);
  }

  // 0x38: u64
  set qwNumSamplesEncoded(value: bigint | number) {
    this.view.setBigUint64(56, BigInt(value), true);
  }

  // 0x40: u64
  set qwNumSamplesProcessed(value: bigint | number) {
    this.view.setBigUint64(64, BigInt(value), true);
  }

  // 0x48: u64
  set qwNumStreamTicksReceived(value: bigint | number) {
    this.view.setBigUint64(72, BigInt(value), true);
  }

  // 0x50: u32
  set dwByteCountQueued(value: number) {
    this.view.setUint32(80, value, true);
  }

  // 0x54: pad4

  // 0x58: u64
  set qwByteCountProcessed(value: bigint | number) {
    this.view.setBigUint64(88, BigInt(value), true);
  }

  // 0x60: u32
  set dwNumOutstandingSinkSampleRequests(value: number) {
    this.view.setUint32(96, value, true);
  }

  // 0x64: u32
  set dwAverageSampleRateReceived(value: number) {
    this.view.setUint32(100, value, true);
  }

  // 0x68: u32
  set dwAverageSampleRateEncoded(value: number) {
    this.view.setUint32(104, value, true);
  }

  // 0x6c: u32
  set dwAverageSampleRateProcessed(value: number) {
    this.view.setUint32(108, value, true);
  }
}

/**
 * Windows.Win32.Media.MediaFoundation.MFP_EVENT_HEADER (size: 40)
 */
export interface MFP_EVENT_HEADER {
  /** Windows.Win32.Media.MediaFoundation.MFP_EVENT_TYPE */
  eEventType: MFP_EVENT_TYPE;
  /** Windows.Win32.Foundation.HRESULT */
  hrEvent: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.Media.MediaFoundation.IMFPMediaPlayer */
  pMediaPlayer: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.Media.MediaFoundation.MFP_MEDIAPLAYER_STATE */
  eState: MFP_MEDIAPLAYER_STATE;
  /** Windows.Win32.UI.Shell.PropertiesSystem.IPropertyStore */
  pPropertyStore: Uint8Array | Deno.PointerValue;
}

export const sizeofMFP_EVENT_HEADER = 40;

export function allocMFP_EVENT_HEADER(data?: Partial<MFP_EVENT_HEADER>): Uint8Array {
  const buf = new Uint8Array(sizeofMFP_EVENT_HEADER);
  const view = new DataView(buf.buffer);
  // 0x00: i32
  if (data?.eEventType !== undefined) view.setInt32(0, Number(data.eEventType), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.hrEvent !== undefined) view.setBigUint64(8, data.hrEvent === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.hrEvent))), true);
  // 0x10: pointer
  if (data?.pMediaPlayer !== undefined) view.setBigUint64(16, data.pMediaPlayer === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.pMediaPlayer))), true);
  // 0x18: i32
  if (data?.eState !== undefined) view.setInt32(24, Number(data.eState), true);
  // 0x1c: pad4
  // 0x20: pointer
  if (data?.pPropertyStore !== undefined) view.setBigUint64(32, data.pPropertyStore === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.pPropertyStore))), true);
  return buf;
}

export class MFP_EVENT_HEADERView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: i32
  get eEventType(): number {
    return this.view.getInt32(0, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  get hrEvent(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x10: pointer
  get pMediaPlayer(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(16, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x18: i32
  get eState(): number {
    return this.view.getInt32(24, true);
  }

  // 0x1c: pad4

  // 0x20: pointer
  get pPropertyStore(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(32, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: i32
  set eEventType(value: number) {
    this.view.setInt32(0, value, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  set hrEvent(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x10: pointer
  set pMediaPlayer(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(16, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x18: i32
  set eState(value: number) {
    this.view.setInt32(24, value, true);
  }

  // 0x1c: pad4

  // 0x20: pointer
  set pPropertyStore(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(32, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.Media.MediaFoundation.MFP_PLAY_EVENT (size: 16)
 */
export interface MFP_PLAY_EVENT {
  /** Windows.Win32.Media.MediaFoundation.MFP_EVENT_HEADER */
  header: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.Media.MediaFoundation.IMFPMediaItem */
  pMediaItem: Uint8Array | Deno.PointerValue;
}

export const sizeofMFP_PLAY_EVENT = 16;

export function allocMFP_PLAY_EVENT(data?: Partial<MFP_PLAY_EVENT>): Uint8Array {
  const buf = new Uint8Array(sizeofMFP_PLAY_EVENT);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.header !== undefined) view.setBigUint64(0, data.header === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.header))), true);
  // 0x08: pointer
  if (data?.pMediaItem !== undefined) view.setBigUint64(8, data.pMediaItem === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.pMediaItem))), true);
  return buf;
}

export class MFP_PLAY_EVENTView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get header(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(0, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x08: pointer
  get pMediaItem(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: pointer
  set header(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(0, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x08: pointer
  set pMediaItem(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.Media.MediaFoundation.MFP_PAUSE_EVENT (size: 16)
 */
export interface MFP_PAUSE_EVENT {
  /** Windows.Win32.Media.MediaFoundation.MFP_EVENT_HEADER */
  header: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.Media.MediaFoundation.IMFPMediaItem */
  pMediaItem: Uint8Array | Deno.PointerValue;
}

export const sizeofMFP_PAUSE_EVENT = 16;

export function allocMFP_PAUSE_EVENT(data?: Partial<MFP_PAUSE_EVENT>): Uint8Array {
  const buf = new Uint8Array(sizeofMFP_PAUSE_EVENT);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.header !== undefined) view.setBigUint64(0, data.header === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.header))), true);
  // 0x08: pointer
  if (data?.pMediaItem !== undefined) view.setBigUint64(8, data.pMediaItem === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.pMediaItem))), true);
  return buf;
}

export class MFP_PAUSE_EVENTView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get header(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(0, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x08: pointer
  get pMediaItem(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: pointer
  set header(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(0, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x08: pointer
  set pMediaItem(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.Media.MediaFoundation.MFP_STOP_EVENT (size: 16)
 */
export interface MFP_STOP_EVENT {
  /** Windows.Win32.Media.MediaFoundation.MFP_EVENT_HEADER */
  header: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.Media.MediaFoundation.IMFPMediaItem */
  pMediaItem: Uint8Array | Deno.PointerValue;
}

export const sizeofMFP_STOP_EVENT = 16;

export function allocMFP_STOP_EVENT(data?: Partial<MFP_STOP_EVENT>): Uint8Array {
  const buf = new Uint8Array(sizeofMFP_STOP_EVENT);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.header !== undefined) view.setBigUint64(0, data.header === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.header))), true);
  // 0x08: pointer
  if (data?.pMediaItem !== undefined) view.setBigUint64(8, data.pMediaItem === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.pMediaItem))), true);
  return buf;
}

export class MFP_STOP_EVENTView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get header(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(0, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x08: pointer
  get pMediaItem(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: pointer
  set header(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(0, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x08: pointer
  set pMediaItem(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.Media.MediaFoundation.MFP_POSITION_SET_EVENT (size: 16)
 */
export interface MFP_POSITION_SET_EVENT {
  /** Windows.Win32.Media.MediaFoundation.MFP_EVENT_HEADER */
  header: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.Media.MediaFoundation.IMFPMediaItem */
  pMediaItem: Uint8Array | Deno.PointerValue;
}

export const sizeofMFP_POSITION_SET_EVENT = 16;

export function allocMFP_POSITION_SET_EVENT(data?: Partial<MFP_POSITION_SET_EVENT>): Uint8Array {
  const buf = new Uint8Array(sizeofMFP_POSITION_SET_EVENT);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.header !== undefined) view.setBigUint64(0, data.header === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.header))), true);
  // 0x08: pointer
  if (data?.pMediaItem !== undefined) view.setBigUint64(8, data.pMediaItem === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.pMediaItem))), true);
  return buf;
}

export class MFP_POSITION_SET_EVENTView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get header(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(0, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x08: pointer
  get pMediaItem(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: pointer
  set header(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(0, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x08: pointer
  set pMediaItem(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.Media.MediaFoundation.MFP_RATE_SET_EVENT (size: 24)
 */
export interface MFP_RATE_SET_EVENT {
  /** Windows.Win32.Media.MediaFoundation.MFP_EVENT_HEADER */
  header: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.Media.MediaFoundation.IMFPMediaItem */
  pMediaItem: Uint8Array | Deno.PointerValue;
  /** f32 */
  flRate: number;
}

export const sizeofMFP_RATE_SET_EVENT = 24;

export function allocMFP_RATE_SET_EVENT(data?: Partial<MFP_RATE_SET_EVENT>): Uint8Array {
  const buf = new Uint8Array(sizeofMFP_RATE_SET_EVENT);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.header !== undefined) view.setBigUint64(0, data.header === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.header))), true);
  // 0x08: pointer
  if (data?.pMediaItem !== undefined) view.setBigUint64(8, data.pMediaItem === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.pMediaItem))), true);
  // 0x10: f32
  if (data?.flRate !== undefined) view.setFloat32(16, Number(data.flRate), true);
  // 0x14: pad4
  return buf;
}

export class MFP_RATE_SET_EVENTView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get header(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(0, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x08: pointer
  get pMediaItem(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x10: f32
  get flRate(): number {
    return this.view.getFloat32(16, true);
  }

  // 0x14: pad4

  // 0x00: pointer
  set header(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(0, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x08: pointer
  set pMediaItem(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x10: f32
  set flRate(value: number) {
    this.view.setFloat32(16, value, true);
  }

  // 0x14: pad4
}

/**
 * Windows.Win32.Media.MediaFoundation.MFP_MEDIAITEM_CREATED_EVENT (size: 24)
 */
export interface MFP_MEDIAITEM_CREATED_EVENT {
  /** Windows.Win32.Media.MediaFoundation.MFP_EVENT_HEADER */
  header: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.Media.MediaFoundation.IMFPMediaItem */
  pMediaItem: Uint8Array | Deno.PointerValue;
  /** usize */
  dwUserData: bigint | number;
}

export const sizeofMFP_MEDIAITEM_CREATED_EVENT = 24;

export function allocMFP_MEDIAITEM_CREATED_EVENT(data?: Partial<MFP_MEDIAITEM_CREATED_EVENT>): Uint8Array {
  const buf = new Uint8Array(sizeofMFP_MEDIAITEM_CREATED_EVENT);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.header !== undefined) view.setBigUint64(0, data.header === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.header))), true);
  // 0x08: pointer
  if (data?.pMediaItem !== undefined) view.setBigUint64(8, data.pMediaItem === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.pMediaItem))), true);
  // 0x10: usize
  if (data?.dwUserData !== undefined) view.setBigUint64(16, BigInt(data.dwUserData), true);
  return buf;
}

export class MFP_MEDIAITEM_CREATED_EVENTView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get header(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(0, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x08: pointer
  get pMediaItem(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x10: usize
  get dwUserData(): bigint | number {
    return Number(this.view.getBigUint64(16, true));
  }

  // 0x00: pointer
  set header(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(0, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x08: pointer
  set pMediaItem(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x10: usize
  set dwUserData(value: bigint | number) {
    this.view.setBigUint64(16, BigInt(value), true);
  }
}

/**
 * Windows.Win32.Media.MediaFoundation.MFP_MEDIAITEM_SET_EVENT (size: 16)
 */
export interface MFP_MEDIAITEM_SET_EVENT {
  /** Windows.Win32.Media.MediaFoundation.MFP_EVENT_HEADER */
  header: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.Media.MediaFoundation.IMFPMediaItem */
  pMediaItem: Uint8Array | Deno.PointerValue;
}

export const sizeofMFP_MEDIAITEM_SET_EVENT = 16;

export function allocMFP_MEDIAITEM_SET_EVENT(data?: Partial<MFP_MEDIAITEM_SET_EVENT>): Uint8Array {
  const buf = new Uint8Array(sizeofMFP_MEDIAITEM_SET_EVENT);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.header !== undefined) view.setBigUint64(0, data.header === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.header))), true);
  // 0x08: pointer
  if (data?.pMediaItem !== undefined) view.setBigUint64(8, data.pMediaItem === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.pMediaItem))), true);
  return buf;
}

export class MFP_MEDIAITEM_SET_EVENTView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get header(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(0, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x08: pointer
  get pMediaItem(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: pointer
  set header(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(0, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x08: pointer
  set pMediaItem(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.Media.MediaFoundation.MFP_FRAME_STEP_EVENT (size: 16)
 */
export interface MFP_FRAME_STEP_EVENT {
  /** Windows.Win32.Media.MediaFoundation.MFP_EVENT_HEADER */
  header: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.Media.MediaFoundation.IMFPMediaItem */
  pMediaItem: Uint8Array | Deno.PointerValue;
}

export const sizeofMFP_FRAME_STEP_EVENT = 16;

export function allocMFP_FRAME_STEP_EVENT(data?: Partial<MFP_FRAME_STEP_EVENT>): Uint8Array {
  const buf = new Uint8Array(sizeofMFP_FRAME_STEP_EVENT);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.header !== undefined) view.setBigUint64(0, data.header === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.header))), true);
  // 0x08: pointer
  if (data?.pMediaItem !== undefined) view.setBigUint64(8, data.pMediaItem === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.pMediaItem))), true);
  return buf;
}

export class MFP_FRAME_STEP_EVENTView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get header(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(0, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x08: pointer
  get pMediaItem(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: pointer
  set header(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(0, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x08: pointer
  set pMediaItem(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.Media.MediaFoundation.MFP_MEDIAITEM_CLEARED_EVENT (size: 16)
 */
export interface MFP_MEDIAITEM_CLEARED_EVENT {
  /** Windows.Win32.Media.MediaFoundation.MFP_EVENT_HEADER */
  header: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.Media.MediaFoundation.IMFPMediaItem */
  pMediaItem: Uint8Array | Deno.PointerValue;
}

export const sizeofMFP_MEDIAITEM_CLEARED_EVENT = 16;

export function allocMFP_MEDIAITEM_CLEARED_EVENT(data?: Partial<MFP_MEDIAITEM_CLEARED_EVENT>): Uint8Array {
  const buf = new Uint8Array(sizeofMFP_MEDIAITEM_CLEARED_EVENT);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.header !== undefined) view.setBigUint64(0, data.header === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.header))), true);
  // 0x08: pointer
  if (data?.pMediaItem !== undefined) view.setBigUint64(8, data.pMediaItem === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.pMediaItem))), true);
  return buf;
}

export class MFP_MEDIAITEM_CLEARED_EVENTView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get header(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(0, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x08: pointer
  get pMediaItem(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: pointer
  set header(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(0, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x08: pointer
  set pMediaItem(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.Media.MediaFoundation.MFP_MF_EVENT (size: 32)
 */
export interface MFP_MF_EVENT {
  /** Windows.Win32.Media.MediaFoundation.MFP_EVENT_HEADER */
  header: Uint8Array | Deno.PointerValue;
  /** u32 */
  MFEventType: number;
  /** Windows.Win32.Media.MediaFoundation.IMFMediaEvent */
  pMFMediaEvent: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.Media.MediaFoundation.IMFPMediaItem */
  pMediaItem: Uint8Array | Deno.PointerValue;
}

export const sizeofMFP_MF_EVENT = 32;

export function allocMFP_MF_EVENT(data?: Partial<MFP_MF_EVENT>): Uint8Array {
  const buf = new Uint8Array(sizeofMFP_MF_EVENT);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.header !== undefined) view.setBigUint64(0, data.header === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.header))), true);
  // 0x08: u32
  if (data?.MFEventType !== undefined) view.setUint32(8, Number(data.MFEventType), true);
  // 0x0c: pad4
  // 0x10: pointer
  if (data?.pMFMediaEvent !== undefined) view.setBigUint64(16, data.pMFMediaEvent === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.pMFMediaEvent))), true);
  // 0x18: pointer
  if (data?.pMediaItem !== undefined) view.setBigUint64(24, data.pMediaItem === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.pMediaItem))), true);
  return buf;
}

export class MFP_MF_EVENTView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get header(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(0, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x08: u32
  get MFEventType(): number {
    return this.view.getUint32(8, true);
  }

  // 0x0c: pad4

  // 0x10: pointer
  get pMFMediaEvent(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(16, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x18: pointer
  get pMediaItem(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(24, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: pointer
  set header(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(0, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x08: u32
  set MFEventType(value: number) {
    this.view.setUint32(8, value, true);
  }

  // 0x0c: pad4

  // 0x10: pointer
  set pMFMediaEvent(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(16, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x18: pointer
  set pMediaItem(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(24, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.Media.MediaFoundation.MFP_ERROR_EVENT (size: 8)
 */
export interface MFP_ERROR_EVENT {
  /** Windows.Win32.Media.MediaFoundation.MFP_EVENT_HEADER */
  header: Uint8Array | Deno.PointerValue;
}

export const sizeofMFP_ERROR_EVENT = 8;

export function allocMFP_ERROR_EVENT(data?: Partial<MFP_ERROR_EVENT>): Uint8Array {
  const buf = new Uint8Array(sizeofMFP_ERROR_EVENT);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.header !== undefined) view.setBigUint64(0, data.header === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.header))), true);
  return buf;
}

export class MFP_ERROR_EVENTView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get header(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(0, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: pointer
  set header(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(0, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.Media.MediaFoundation.MFP_PLAYBACK_ENDED_EVENT (size: 16)
 */
export interface MFP_PLAYBACK_ENDED_EVENT {
  /** Windows.Win32.Media.MediaFoundation.MFP_EVENT_HEADER */
  header: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.Media.MediaFoundation.IMFPMediaItem */
  pMediaItem: Uint8Array | Deno.PointerValue;
}

export const sizeofMFP_PLAYBACK_ENDED_EVENT = 16;

export function allocMFP_PLAYBACK_ENDED_EVENT(data?: Partial<MFP_PLAYBACK_ENDED_EVENT>): Uint8Array {
  const buf = new Uint8Array(sizeofMFP_PLAYBACK_ENDED_EVENT);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.header !== undefined) view.setBigUint64(0, data.header === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.header))), true);
  // 0x08: pointer
  if (data?.pMediaItem !== undefined) view.setBigUint64(8, data.pMediaItem === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.pMediaItem))), true);
  return buf;
}

export class MFP_PLAYBACK_ENDED_EVENTView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get header(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(0, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x08: pointer
  get pMediaItem(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: pointer
  set header(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(0, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x08: pointer
  set pMediaItem(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.Media.MediaFoundation.MFP_ACQUIRE_USER_CREDENTIAL_EVENT (size: 80)
 */
export interface MFP_ACQUIRE_USER_CREDENTIAL_EVENT {
  /** Windows.Win32.Media.MediaFoundation.MFP_EVENT_HEADER */
  header: Uint8Array | Deno.PointerValue;
  /** usize */
  dwUserData: bigint | number;
  /** Windows.Win32.Foundation.BOOL */
  fProceedWithAuthentication: boolean;
  /** Windows.Win32.Foundation.HRESULT */
  hrAuthenticationStatus: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.Foundation.PWSTR */
  pwszURL: string | null | Uint8Array | Uint16Array;
  /** Windows.Win32.Foundation.PWSTR */
  pwszSite: string | null | Uint8Array | Uint16Array;
  /** Windows.Win32.Foundation.PWSTR */
  pwszRealm: string | null | Uint8Array | Uint16Array;
  /** Windows.Win32.Foundation.PWSTR */
  pwszPackage: string | null | Uint8Array | Uint16Array;
  /** i32 */
  nRetries: number;
  /** u32 */
  flags: number;
  /** Windows.Win32.Media.MediaFoundation.IMFNetCredential */
  pCredential: Uint8Array | Deno.PointerValue;
}

export const sizeofMFP_ACQUIRE_USER_CREDENTIAL_EVENT = 80;

export function allocMFP_ACQUIRE_USER_CREDENTIAL_EVENT(data?: Partial<MFP_ACQUIRE_USER_CREDENTIAL_EVENT>): Uint8Array {
  const buf = new Uint8Array(sizeofMFP_ACQUIRE_USER_CREDENTIAL_EVENT);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.header !== undefined) view.setBigUint64(0, data.header === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.header))), true);
  // 0x08: usize
  if (data?.dwUserData !== undefined) view.setBigUint64(8, BigInt(data.dwUserData), true);
  // 0x10: i32
  if (data?.fProceedWithAuthentication !== undefined) view.setInt32(16, Number(data.fProceedWithAuthentication), true);
  // 0x14: pad4
  // 0x18: pointer
  if (data?.hrAuthenticationStatus !== undefined) view.setBigUint64(24, data.hrAuthenticationStatus === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.hrAuthenticationStatus))), true);
  // 0x20: buffer
  if (data?.pwszURL !== undefined) {
    (buf as any)._f32 = util.pwstrToFfi(data.pwszURL);
    view.setBigUint64(32, (buf as any)._f32 === null ? 0n : BigInt(Deno.UnsafePointer.value(Deno.UnsafePointer.of((buf as any)._f32))), true);
  }
  // 0x28: buffer
  if (data?.pwszSite !== undefined) {
    (buf as any)._f40 = util.pwstrToFfi(data.pwszSite);
    view.setBigUint64(40, (buf as any)._f40 === null ? 0n : BigInt(Deno.UnsafePointer.value(Deno.UnsafePointer.of((buf as any)._f40))), true);
  }
  // 0x30: buffer
  if (data?.pwszRealm !== undefined) {
    (buf as any)._f48 = util.pwstrToFfi(data.pwszRealm);
    view.setBigUint64(48, (buf as any)._f48 === null ? 0n : BigInt(Deno.UnsafePointer.value(Deno.UnsafePointer.of((buf as any)._f48))), true);
  }
  // 0x38: buffer
  if (data?.pwszPackage !== undefined) {
    (buf as any)._f56 = util.pwstrToFfi(data.pwszPackage);
    view.setBigUint64(56, (buf as any)._f56 === null ? 0n : BigInt(Deno.UnsafePointer.value(Deno.UnsafePointer.of((buf as any)._f56))), true);
  }
  // 0x40: i32
  if (data?.nRetries !== undefined) view.setInt32(64, Number(data.nRetries), true);
  // 0x44: u32
  if (data?.flags !== undefined) view.setUint32(68, Number(data.flags), true);
  // 0x48: pointer
  if (data?.pCredential !== undefined) view.setBigUint64(72, data.pCredential === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.pCredential))), true);
  return buf;
}

export class MFP_ACQUIRE_USER_CREDENTIAL_EVENTView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get header(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(0, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x08: usize
  get dwUserData(): bigint | number {
    return Number(this.view.getBigUint64(8, true));
  }

  // 0x10: i32
  get fProceedWithAuthentication(): number {
    return this.view.getInt32(16, true);
  }

  // 0x14: pad4

  // 0x18: pointer
  get hrAuthenticationStatus(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(24, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x20: buffer
  get pwszURL(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(32, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x28: buffer
  get pwszSite(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(40, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x30: buffer
  get pwszRealm(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(48, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x38: buffer
  get pwszPackage(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(56, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x40: i32
  get nRetries(): number {
    return this.view.getInt32(64, true);
  }

  // 0x44: u32
  get flags(): number {
    return this.view.getUint32(68, true);
  }

  // 0x48: pointer
  get pCredential(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(72, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: pointer
  set header(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(0, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x08: usize
  set dwUserData(value: bigint | number) {
    this.view.setBigUint64(8, BigInt(value), true);
  }

  // 0x10: i32
  set fProceedWithAuthentication(value: number) {
    this.view.setInt32(16, value, true);
  }

  // 0x14: pad4

  // 0x18: pointer
  set hrAuthenticationStatus(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(24, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x20: buffer
  set pwszURL(value: Uint8Array | Deno.PointerValue) {
    (this.buf as any)._f32 = value;
    this.view.setBigUint64(32, BigInt(Deno.UnsafePointer.value(util.toPointer((this.buf as any)._f32))), true);
  }

  // 0x28: buffer
  set pwszSite(value: Uint8Array | Deno.PointerValue) {
    (this.buf as any)._f40 = value;
    this.view.setBigUint64(40, BigInt(Deno.UnsafePointer.value(util.toPointer((this.buf as any)._f40))), true);
  }

  // 0x30: buffer
  set pwszRealm(value: Uint8Array | Deno.PointerValue) {
    (this.buf as any)._f48 = value;
    this.view.setBigUint64(48, BigInt(Deno.UnsafePointer.value(util.toPointer((this.buf as any)._f48))), true);
  }

  // 0x38: buffer
  set pwszPackage(value: Uint8Array | Deno.PointerValue) {
    (this.buf as any)._f56 = value;
    this.view.setBigUint64(56, BigInt(Deno.UnsafePointer.value(util.toPointer((this.buf as any)._f56))), true);
  }

  // 0x40: i32
  set nRetries(value: number) {
    this.view.setInt32(64, value, true);
  }

  // 0x44: u32
  set flags(value: number) {
    this.view.setUint32(68, value, true);
  }

  // 0x48: pointer
  set pCredential(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(72, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

export type BSTR = Deno.PointerValue | Uint8Array;

/**
 * Windows.Win32.Media.MediaFoundation.DEVICE_INFO (size: 40)
 */
export interface DEVICE_INFO {
  /** Windows.Win32.Foundation.BSTR */
  pFriendlyDeviceName: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.Foundation.BSTR */
  pUniqueDeviceName: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.Foundation.BSTR */
  pManufacturerName: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.Foundation.BSTR */
  pModelName: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.Foundation.BSTR */
  pIconURL: Uint8Array | Deno.PointerValue;
}

export const sizeofDEVICE_INFO = 40;

export function allocDEVICE_INFO(data?: Partial<DEVICE_INFO>): Uint8Array {
  const buf = new Uint8Array(sizeofDEVICE_INFO);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.pFriendlyDeviceName !== undefined) view.setBigUint64(0, data.pFriendlyDeviceName === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.pFriendlyDeviceName))), true);
  // 0x08: pointer
  if (data?.pUniqueDeviceName !== undefined) view.setBigUint64(8, data.pUniqueDeviceName === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.pUniqueDeviceName))), true);
  // 0x10: pointer
  if (data?.pManufacturerName !== undefined) view.setBigUint64(16, data.pManufacturerName === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.pManufacturerName))), true);
  // 0x18: pointer
  if (data?.pModelName !== undefined) view.setBigUint64(24, data.pModelName === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.pModelName))), true);
  // 0x20: pointer
  if (data?.pIconURL !== undefined) view.setBigUint64(32, data.pIconURL === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.pIconURL))), true);
  return buf;
}

export class DEVICE_INFOView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get pFriendlyDeviceName(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(0, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x08: pointer
  get pUniqueDeviceName(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x10: pointer
  get pManufacturerName(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(16, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x18: pointer
  get pModelName(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(24, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x20: pointer
  get pIconURL(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(32, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: pointer
  set pFriendlyDeviceName(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(0, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x08: pointer
  set pUniqueDeviceName(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x10: pointer
  set pManufacturerName(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(16, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x18: pointer
  set pModelName(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(24, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x20: pointer
  set pIconURL(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(32, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

export type COLORREF = number;

/**
 * Windows.Win32.Media.MediaFoundation.MFVideoAlphaBitmapParams (size: 40)
 */
export interface MFVideoAlphaBitmapParams {
  /** u32 */
  dwFlags: number;
  /** Windows.Win32.Foundation.COLORREF */
  clrSrcKey: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.Foundation.RECT */
  rcSrc: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.Media.MediaFoundation.MFVideoNormalizedRect */
  nrcDest: Uint8Array | Deno.PointerValue;
  /** f32 */
  fAlpha: number;
  /** u32 */
  dwFilterMode: number;
}

export const sizeofMFVideoAlphaBitmapParams = 40;

export function allocMFVideoAlphaBitmapParams(data?: Partial<MFVideoAlphaBitmapParams>): Uint8Array {
  const buf = new Uint8Array(sizeofMFVideoAlphaBitmapParams);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.dwFlags !== undefined) view.setUint32(0, Number(data.dwFlags), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.clrSrcKey !== undefined) view.setBigUint64(8, data.clrSrcKey === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.clrSrcKey))), true);
  // 0x10: pointer
  if (data?.rcSrc !== undefined) view.setBigUint64(16, data.rcSrc === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.rcSrc))), true);
  // 0x18: pointer
  if (data?.nrcDest !== undefined) view.setBigUint64(24, data.nrcDest === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.nrcDest))), true);
  // 0x20: f32
  if (data?.fAlpha !== undefined) view.setFloat32(32, Number(data.fAlpha), true);
  // 0x24: u32
  if (data?.dwFilterMode !== undefined) view.setUint32(36, Number(data.dwFilterMode), true);
  return buf;
}

export class MFVideoAlphaBitmapParamsView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get dwFlags(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  get clrSrcKey(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x10: pointer
  get rcSrc(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(16, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x18: pointer
  get nrcDest(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(24, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x20: f32
  get fAlpha(): number {
    return this.view.getFloat32(32, true);
  }

  // 0x24: u32
  get dwFilterMode(): number {
    return this.view.getUint32(36, true);
  }

  // 0x00: u32
  set dwFlags(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  set clrSrcKey(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x10: pointer
  set rcSrc(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(16, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x18: pointer
  set nrcDest(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(24, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x20: f32
  set fAlpha(value: number) {
    this.view.setFloat32(32, value, true);
  }

  // 0x24: u32
  set dwFilterMode(value: number) {
    this.view.setUint32(36, value, true);
  }
}

export type HDC = bigint | number;

/**
 * _bitmap_e__Union (size: 16)
 */
export interface _bitmap_e__Union {
  /** Windows.Win32.Graphics.Gdi.HDC */
  hdc: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.Graphics.Direct3D9.IDirect3DSurface9 */
  pDDS: Uint8Array | Deno.PointerValue;
}

export const sizeof_bitmap_e__Union = 16;

export function alloc_bitmap_e__Union(data?: Partial<_bitmap_e__Union>): Uint8Array {
  const buf = new Uint8Array(sizeof_bitmap_e__Union);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.hdc !== undefined) view.setBigUint64(0, data.hdc === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.hdc))), true);
  // 0x08: pointer
  if (data?.pDDS !== undefined) view.setBigUint64(8, data.pDDS === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.pDDS))), true);
  return buf;
}

export class _bitmap_e__UnionView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get hdc(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(0, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x08: pointer
  get pDDS(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: pointer
  set hdc(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(0, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x08: pointer
  set pDDS(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.Media.MediaFoundation.MFVideoAlphaBitmap (size: 24)
 */
export interface MFVideoAlphaBitmap {
  /** Windows.Win32.Foundation.BOOL */
  GetBitmapFromDC: boolean;
  /** _bitmap_e__Union */
  bitmap: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.Media.MediaFoundation.MFVideoAlphaBitmapParams */
  params: Uint8Array | Deno.PointerValue;
}

export const sizeofMFVideoAlphaBitmap = 24;

export function allocMFVideoAlphaBitmap(data?: Partial<MFVideoAlphaBitmap>): Uint8Array {
  const buf = new Uint8Array(sizeofMFVideoAlphaBitmap);
  const view = new DataView(buf.buffer);
  // 0x00: i32
  if (data?.GetBitmapFromDC !== undefined) view.setInt32(0, Number(data.GetBitmapFromDC), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.bitmap !== undefined) view.setBigUint64(8, data.bitmap === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.bitmap))), true);
  // 0x10: pointer
  if (data?.params !== undefined) view.setBigUint64(16, data.params === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.params))), true);
  return buf;
}

export class MFVideoAlphaBitmapView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: i32
  get GetBitmapFromDC(): number {
    return this.view.getInt32(0, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  get bitmap(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x10: pointer
  get params(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(16, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: i32
  set GetBitmapFromDC(value: number) {
    this.view.setInt32(0, value, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  set bitmap(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x10: pointer
  set params(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(16, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

export type HMONITOR = bigint | number;

export type HWND = bigint | number;

export type HANDLE = bigint | number;

export type PSTR = Deno.PointerValue | Uint8Array;

// Native Libraries

try {
  var libdxva2_dll = Deno.dlopen("dxva2.dll", {
    DXVAHD_CreateDevice: {
      parameters: ["pointer", "pointer", "i32", "pointer", "pointer"],
      result: "pointer",
      optional: true,
    },
    DXVA2CreateDirect3DDeviceManager9: {
      parameters: ["pointer", "pointer"],
      result: "pointer",
      optional: true,
    },
    DXVA2CreateVideoService: {
      parameters: ["pointer", "pointer", "pointer"],
      result: "pointer",
      optional: true,
    },
    OPMGetVideoOutputsFromHMONITOR: {
      parameters: ["pointer", "i32", "pointer", "pointer"],
      result: "pointer",
      optional: true,
    },
    OPMGetVideoOutputForTarget: {
      parameters: ["pointer", "u32", "i32", "pointer"],
      result: "pointer",
      optional: true,
    },
    OPMGetVideoOutputsFromIDirect3DDevice9Object: {
      parameters: ["pointer", "i32", "pointer", "pointer"],
      result: "pointer",
      optional: true,
    },
  }).symbols;
} catch(e) { /* ignore */ }

try {
  var libMFPlat_dll = Deno.dlopen("MFPlat.dll", {
    MFSerializeAttributesToStream: {
      parameters: ["pointer", "u32", "pointer"],
      result: "pointer",
      optional: true,
    },
    MFDeserializeAttributesFromStream: {
      parameters: ["pointer", "u32", "pointer"],
      result: "pointer",
      optional: true,
    },
    MFCreateTransformActivate: {
      parameters: ["pointer"],
      result: "pointer",
      optional: true,
    },
    MFCreateSourceResolver: {
      parameters: ["pointer"],
      result: "pointer",
      optional: true,
    },
    CreatePropertyStore: {
      parameters: ["pointer"],
      result: "pointer",
      optional: true,
    },
    MFGetSupportedSchemes: {
      parameters: ["pointer"],
      result: "pointer",
      optional: true,
    },
    MFGetSupportedMimeTypes: {
      parameters: ["pointer"],
      result: "pointer",
      optional: true,
    },
    MFGetSystemTime: {
      parameters: [],
      result: "i64",
      optional: true,
    },
    MFCreateSystemTimeSource: {
      parameters: ["pointer"],
      result: "pointer",
      optional: true,
    },
    MFCreatePresentationDescriptor: {
      parameters: ["u32", "pointer", "pointer"],
      result: "pointer",
      optional: true,
    },
    MFSerializePresentationDescriptor: {
      parameters: ["pointer", "pointer", "pointer"],
      result: "pointer",
      optional: true,
    },
    MFDeserializePresentationDescriptor: {
      parameters: ["u32", "pointer", "pointer"],
      result: "pointer",
      optional: true,
    },
    MFCreateStreamDescriptor: {
      parameters: ["u32", "u32", "pointer", "pointer"],
      result: "pointer",
      optional: true,
    },
    MFCreateTrackedSample: {
      parameters: ["pointer"],
      result: "pointer",
      optional: true,
    },
    MFCreateMFByteStreamOnStream: {
      parameters: ["pointer", "pointer"],
      result: "pointer",
      optional: true,
    },
    MFCreateStreamOnMFByteStream: {
      parameters: ["pointer", "pointer"],
      result: "pointer",
      optional: true,
    },
    MFCreateMFByteStreamOnStreamEx: {
      parameters: ["pointer", "pointer"],
      result: "pointer",
      optional: true,
    },
    MFCreateStreamOnMFByteStreamEx: {
      parameters: ["pointer", "pointer", "pointer"],
      result: "pointer",
      optional: true,
    },
    MFCreateMediaTypeFromProperties: {
      parameters: ["pointer", "pointer"],
      result: "pointer",
      optional: true,
    },
    MFCreatePropertiesFromMediaType: {
      parameters: ["pointer", "pointer", "pointer"],
      result: "pointer",
      optional: true,
    },
    MFCreateContentProtectionDevice: {
      parameters: ["pointer", "pointer"],
      result: "pointer",
      optional: true,
    },
    MFIsContentProtectionDeviceSupported: {
      parameters: ["pointer", "pointer"],
      result: "pointer",
      optional: true,
    },
    MFCreateContentDecryptorContext: {
      parameters: ["pointer", "pointer", "pointer", "pointer"],
      result: "pointer",
      optional: true,
    },
    MFCreateD3D12SynchronizationObject: {
      parameters: ["pointer", "pointer", "pointer"],
      result: "pointer",
      optional: true,
    },
    MFStartup: {
      parameters: ["u32", "u32"],
      result: "pointer",
      optional: true,
    },
    MFShutdown: {
      parameters: [],
      result: "pointer",
      optional: true,
    },
    MFLockPlatform: {
      parameters: [],
      result: "pointer",
      optional: true,
    },
    MFUnlockPlatform: {
      parameters: [],
      result: "pointer",
      optional: true,
    },
    MFPutWorkItem: {
      parameters: ["u32", "pointer", "pointer"],
      result: "pointer",
      optional: true,
    },
    MFPutWorkItem2: {
      parameters: ["u32", "i32", "pointer", "pointer"],
      result: "pointer",
      optional: true,
    },
    MFPutWorkItemEx: {
      parameters: ["u32", "pointer"],
      result: "pointer",
      optional: true,
    },
    MFPutWorkItemEx2: {
      parameters: ["u32", "i32", "pointer"],
      result: "pointer",
      optional: true,
    },
    MFPutWaitingWorkItem: {
      parameters: ["pointer", "i32", "pointer", "pointer"],
      result: "pointer",
      optional: true,
    },
    MFAllocateSerialWorkQueue: {
      parameters: ["u32", "pointer"],
      result: "pointer",
      optional: true,
    },
    MFScheduleWorkItemEx: {
      parameters: ["pointer", "i64", "pointer"],
      result: "pointer",
      optional: true,
    },
    MFScheduleWorkItem: {
      parameters: ["pointer", "pointer", "i64", "pointer"],
      result: "pointer",
      optional: true,
    },
    MFCancelWorkItem: {
      parameters: ["u64"],
      result: "pointer",
      optional: true,
    },
    MFGetTimerPeriodicity: {
      parameters: ["pointer"],
      result: "pointer",
      optional: true,
    },
    MFAddPeriodicCallback: {
      parameters: ["pointer", "pointer", "pointer"],
      result: "pointer",
      optional: true,
    },
    MFRemovePeriodicCallback: {
      parameters: ["u32"],
      result: "pointer",
      optional: true,
    },
    MFAllocateWorkQueueEx: {
      parameters: ["i32", "pointer"],
      result: "pointer",
      optional: true,
    },
    MFAllocateWorkQueue: {
      parameters: ["pointer"],
      result: "pointer",
      optional: true,
    },
    MFLockWorkQueue: {
      parameters: ["u32"],
      result: "pointer",
      optional: true,
    },
    MFUnlockWorkQueue: {
      parameters: ["u32"],
      result: "pointer",
      optional: true,
    },
    MFBeginRegisterWorkQueueWithMMCSS: {
      parameters: ["u32", "buffer", "u32", "pointer", "pointer"],
      result: "pointer",
      optional: true,
    },
    MFBeginRegisterWorkQueueWithMMCSSEx: {
      parameters: ["u32", "buffer", "u32", "i32", "pointer", "pointer"],
      result: "pointer",
      optional: true,
    },
    MFEndRegisterWorkQueueWithMMCSS: {
      parameters: ["pointer", "pointer"],
      result: "pointer",
      optional: true,
    },
    MFBeginUnregisterWorkQueueWithMMCSS: {
      parameters: ["u32", "pointer", "pointer"],
      result: "pointer",
      optional: true,
    },
    MFEndUnregisterWorkQueueWithMMCSS: {
      parameters: ["pointer"],
      result: "pointer",
      optional: true,
    },
    MFGetWorkQueueMMCSSClass: {
      parameters: ["u32", "buffer", "pointer"],
      result: "pointer",
      optional: true,
    },
    MFGetWorkQueueMMCSSTaskId: {
      parameters: ["u32", "pointer"],
      result: "pointer",
      optional: true,
    },
    MFRegisterPlatformWithMMCSS: {
      parameters: ["buffer", "pointer", "i32"],
      result: "pointer",
      optional: true,
    },
    MFUnregisterPlatformFromMMCSS: {
      parameters: [],
      result: "pointer",
      optional: true,
    },
    MFLockSharedWorkQueue: {
      parameters: ["buffer", "i32", "pointer", "pointer"],
      result: "pointer",
      optional: true,
    },
    MFGetWorkQueueMMCSSPriority: {
      parameters: ["u32", "pointer"],
      result: "pointer",
      optional: true,
    },
    MFCreateAsyncResult: {
      parameters: ["pointer", "pointer", "pointer", "pointer"],
      result: "pointer",
      optional: true,
    },
    MFInvokeCallback: {
      parameters: ["pointer"],
      result: "pointer",
      optional: true,
    },
    MFCreateFile: {
      parameters: ["i32", "i32", "i32", "buffer", "pointer"],
      result: "pointer",
      optional: true,
    },
    MFCreateTempFile: {
      parameters: ["i32", "i32", "i32", "pointer"],
      result: "pointer",
      optional: true,
    },
    MFBeginCreateFile: {
      parameters: ["i32", "i32", "i32", "buffer", "pointer", "pointer", "pointer"],
      result: "pointer",
      optional: true,
    },
    MFEndCreateFile: {
      parameters: ["pointer", "pointer"],
      result: "pointer",
      optional: true,
    },
    MFCancelCreateFile: {
      parameters: ["pointer"],
      result: "pointer",
      optional: true,
    },
    MFCreateMemoryBuffer: {
      parameters: ["u32", "pointer"],
      result: "pointer",
      optional: true,
    },
    MFCreateMediaBufferWrapper: {
      parameters: ["pointer", "u32", "u32", "pointer"],
      result: "pointer",
      optional: true,
    },
    MFCreateLegacyMediaBufferOnMFMediaBuffer: {
      parameters: ["pointer", "pointer", "u32", "pointer"],
      result: "pointer",
      optional: true,
    },
    MFMapDX9FormatToDXGIFormat: {
      parameters: ["u32"],
      result: "u32",
      optional: true,
    },
    MFMapDXGIFormatToDX9Format: {
      parameters: ["u32"],
      result: "u32",
      optional: true,
    },
    MFLockDXGIDeviceManager: {
      parameters: ["pointer", "pointer"],
      result: "pointer",
      optional: true,
    },
    MFUnlockDXGIDeviceManager: {
      parameters: [],
      result: "pointer",
      optional: true,
    },
    MFCreateDXSurfaceBuffer: {
      parameters: ["pointer", "pointer", "i32", "pointer"],
      result: "pointer",
      optional: true,
    },
    MFCreateWICBitmapBuffer: {
      parameters: ["pointer", "pointer", "pointer"],
      result: "pointer",
      optional: true,
    },
    MFCreateDXGISurfaceBuffer: {
      parameters: ["pointer", "pointer", "u32", "i32", "pointer"],
      result: "pointer",
      optional: true,
    },
    MFCreateVideoSampleAllocatorEx: {
      parameters: ["pointer", "pointer"],
      result: "pointer",
      optional: true,
    },
    MFCreateDXGIDeviceManager: {
      parameters: ["pointer", "pointer"],
      result: "pointer",
      optional: true,
    },
    MFCreateAlignedMemoryBuffer: {
      parameters: ["u32", "u32", "pointer"],
      result: "pointer",
      optional: true,
    },
    MFCreateMediaEvent: {
      parameters: ["u32", "pointer", "pointer", "pointer", "pointer"],
      result: "pointer",
      optional: true,
    },
    MFCreateEventQueue: {
      parameters: ["pointer"],
      result: "pointer",
      optional: true,
    },
    MFCreateSample: {
      parameters: ["pointer"],
      result: "pointer",
      optional: true,
    },
    MFCreateAttributes: {
      parameters: ["pointer", "u32"],
      result: "pointer",
      optional: true,
    },
    MFInitAttributesFromBlob: {
      parameters: ["pointer", "pointer", "u32"],
      result: "pointer",
      optional: true,
    },
    MFGetAttributesAsBlobSize: {
      parameters: ["pointer", "pointer"],
      result: "pointer",
      optional: true,
    },
    MFGetAttributesAsBlob: {
      parameters: ["pointer", "pointer", "u32"],
      result: "pointer",
      optional: true,
    },
    MFTRegister: {
      parameters: ["pointer", "pointer", "buffer", "u32", "u32", "pointer", "u32", "pointer", "pointer"],
      result: "pointer",
      optional: true,
    },
    MFTUnregister: {
      parameters: ["pointer"],
      result: "pointer",
      optional: true,
    },
    MFTRegisterLocal: {
      parameters: ["pointer", "pointer", "buffer", "u32", "u32", "pointer", "u32", "pointer"],
      result: "pointer",
      optional: true,
    },
    MFTUnregisterLocal: {
      parameters: ["pointer"],
      result: "pointer",
      optional: true,
    },
    MFTRegisterLocalByCLSID: {
      parameters: ["pointer", "pointer", "buffer", "u32", "u32", "pointer", "u32", "pointer"],
      result: "pointer",
      optional: true,
    },
    MFTUnregisterLocalByCLSID: {
      parameters: ["pointer"],
      result: "pointer",
      optional: true,
    },
    MFTEnum: {
      parameters: ["pointer", "u32", "pointer", "pointer", "pointer", "pointer", "pointer"],
      result: "pointer",
      optional: true,
    },
    MFTEnumEx: {
      parameters: ["pointer", "u32", "pointer", "pointer", "pointer", "pointer"],
      result: "pointer",
      optional: true,
    },
    MFTEnum2: {
      parameters: ["pointer", "u32", "pointer", "pointer", "pointer", "pointer", "pointer"],
      result: "pointer",
      optional: true,
    },
    MFTGetInfo: {
      parameters: ["pointer", "pointer", "pointer", "pointer", "pointer", "pointer", "pointer"],
      result: "pointer",
      optional: true,
    },
    MFGetPluginControl: {
      parameters: ["pointer"],
      result: "pointer",
      optional: true,
    },
    MFGetMFTMerit: {
      parameters: ["pointer", "u32", "pointer", "pointer"],
      result: "pointer",
      optional: true,
    },
    MFRegisterLocalSchemeHandler: {
      parameters: ["buffer", "pointer"],
      result: "pointer",
      optional: true,
    },
    MFRegisterLocalByteStreamHandler: {
      parameters: ["buffer", "buffer", "pointer"],
      result: "pointer",
      optional: true,
    },
    MFCreateMFByteStreamWrapper: {
      parameters: ["pointer", "pointer"],
      result: "pointer",
      optional: true,
    },
    MFCreateMediaExtensionActivate: {
      parameters: ["buffer", "pointer", "pointer", "pointer"],
      result: "pointer",
      optional: true,
    },
    MFCreateMuxStreamAttributes: {
      parameters: ["pointer", "pointer"],
      result: "pointer",
      optional: true,
    },
    MFCreateMuxStreamMediaType: {
      parameters: ["pointer", "pointer"],
      result: "pointer",
      optional: true,
    },
    MFCreateMuxStreamSample: {
      parameters: ["pointer", "pointer"],
      result: "pointer",
      optional: true,
    },
    MFValidateMediaTypeSize: {
      parameters: ["pointer", "pointer", "u32"],
      result: "pointer",
      optional: true,
    },
    MFCreateMediaType: {
      parameters: ["pointer"],
      result: "pointer",
      optional: true,
    },
    MFCreateMFVideoFormatFromMFMediaType: {
      parameters: ["pointer", "pointer", "pointer"],
      result: "pointer",
      optional: true,
    },
    MFCreateWaveFormatExFromMFMediaType: {
      parameters: ["pointer", "pointer", "pointer", "u32"],
      result: "pointer",
      optional: true,
    },
    MFInitMediaTypeFromVideoInfoHeader: {
      parameters: ["pointer", "pointer", "u32", "pointer"],
      result: "pointer",
      optional: true,
    },
    MFInitMediaTypeFromVideoInfoHeader2: {
      parameters: ["pointer", "pointer", "u32", "pointer"],
      result: "pointer",
      optional: true,
    },
    MFInitMediaTypeFromMPEG1VideoInfo: {
      parameters: ["pointer", "pointer", "u32", "pointer"],
      result: "pointer",
      optional: true,
    },
    MFInitMediaTypeFromMPEG2VideoInfo: {
      parameters: ["pointer", "pointer", "u32", "pointer"],
      result: "pointer",
      optional: true,
    },
    MFCalculateBitmapImageSize: {
      parameters: ["pointer", "u32", "pointer", "pointer"],
      result: "pointer",
      optional: true,
    },
    MFCalculateImageSize: {
      parameters: ["pointer", "u32", "u32", "pointer"],
      result: "pointer",
      optional: true,
    },
    MFFrameRateToAverageTimePerFrame: {
      parameters: ["u32", "u32", "pointer"],
      result: "pointer",
      optional: true,
    },
    MFAverageTimePerFrameToFrameRate: {
      parameters: ["u64", "pointer", "pointer"],
      result: "pointer",
      optional: true,
    },
    MFInitMediaTypeFromMFVideoFormat: {
      parameters: ["pointer", "pointer", "u32"],
      result: "pointer",
      optional: true,
    },
    MFInitMediaTypeFromWaveFormatEx: {
      parameters: ["pointer", "pointer", "u32"],
      result: "pointer",
      optional: true,
    },
    MFInitMediaTypeFromAMMediaType: {
      parameters: ["pointer", "pointer"],
      result: "pointer",
      optional: true,
    },
    MFInitAMMediaTypeFromMFMediaType: {
      parameters: ["pointer", "pointer", "pointer"],
      result: "pointer",
      optional: true,
    },
    MFCreateAMMediaTypeFromMFMediaType: {
      parameters: ["pointer", "pointer", "pointer"],
      result: "pointer",
      optional: true,
    },
    MFCompareFullToPartialMediaType: {
      parameters: ["pointer", "pointer"],
      result: "i32",
      optional: true,
    },
    MFWrapMediaType: {
      parameters: ["pointer", "pointer", "pointer", "pointer"],
      result: "pointer",
      optional: true,
    },
    MFUnwrapMediaType: {
      parameters: ["pointer", "pointer"],
      result: "pointer",
      optional: true,
    },
    MFCreateVideoMediaType: {
      parameters: ["pointer", "pointer"],
      result: "pointer",
      optional: true,
    },
    MFCreateVideoMediaTypeFromSubtype: {
      parameters: ["pointer", "pointer"],
      result: "pointer",
      optional: true,
    },
    MFCreateVideoMediaTypeFromBitMapInfoHeader: {
      parameters: ["pointer", "u32", "u32", "i32", "u64", "u64", "u64", "u32", "pointer"],
      result: "pointer",
      optional: true,
    },
    MFGetStrideForBitmapInfoHeader: {
      parameters: ["u32", "u32", "pointer"],
      result: "pointer",
      optional: true,
    },
    MFCreateVideoMediaTypeFromBitMapInfoHeaderEx: {
      parameters: ["pointer", "u32", "u32", "u32", "i32", "u64", "u32", "u32", "u32", "pointer"],
      result: "pointer",
      optional: true,
    },
    MFCreateMediaTypeFromRepresentation: {
      parameters: ["pointer", "pointer", "pointer"],
      result: "pointer",
      optional: true,
    },
    MFCreateAudioMediaType: {
      parameters: ["pointer", "pointer"],
      result: "pointer",
      optional: true,
    },
    MFGetUncompressedVideoFormat: {
      parameters: ["pointer"],
      result: "u32",
      optional: true,
    },
    MFInitVideoFormat: {
      parameters: ["pointer", "i32"],
      result: "pointer",
      optional: true,
    },
    MFInitVideoFormat_RGB: {
      parameters: ["pointer", "u32", "u32", "u32"],
      result: "pointer",
      optional: true,
    },
    MFConvertColorInfoToDXVA: {
      parameters: ["pointer", "pointer"],
      result: "pointer",
      optional: true,
    },
    MFConvertColorInfoFromDXVA: {
      parameters: ["pointer", "u32"],
      result: "pointer",
      optional: true,
    },
    MFCopyImage: {
      parameters: ["pointer", "i32", "pointer", "i32", "u32", "u32"],
      result: "pointer",
      optional: true,
    },
    MFConvertFromFP16Array: {
      parameters: ["pointer", "pointer", "u32"],
      result: "pointer",
      optional: true,
    },
    MFConvertToFP16Array: {
      parameters: ["pointer", "pointer", "u32"],
      result: "pointer",
      optional: true,
    },
    MFCreate2DMediaBuffer: {
      parameters: ["u32", "u32", "u32", "i32", "pointer"],
      result: "pointer",
      optional: true,
    },
    MFCreateMediaBufferFromMediaType: {
      parameters: ["pointer", "i64", "u32", "u32", "pointer"],
      result: "pointer",
      optional: true,
    },
    MFCreateCollection: {
      parameters: ["pointer"],
      result: "pointer",
      optional: true,
    },
    MFHeapAlloc: {
      parameters: ["usize", "u32", "buffer", "i32", "i32"],
      result: "pointer",
      optional: true,
    },
    MFHeapFree: {
      parameters: ["pointer"],
      result: "void",
      optional: true,
    },
    MFllMulDiv: {
      parameters: ["i64", "i64", "i64", "i64"],
      result: "i64",
      optional: true,
    },
    MFGetContentProtectionSystemCLSID: {
      parameters: ["pointer", "pointer"],
      result: "pointer",
      optional: true,
    },
    MFCombineSamples: {
      parameters: ["pointer", "pointer", "u32", "pointer"],
      result: "pointer",
      optional: true,
    },
    MFSplitSample: {
      parameters: ["pointer", "pointer", "u32", "pointer"],
      result: "pointer",
      optional: true,
    },
  }).symbols;
} catch(e) { /* ignore */ }

try {
  var libMF_dll = Deno.dlopen("MF.dll", {
    MFCreateMediaSession: {
      parameters: ["pointer", "pointer"],
      result: "pointer",
      optional: true,
    },
    MFCreatePMPMediaSession: {
      parameters: ["u32", "pointer", "pointer", "pointer"],
      result: "pointer",
      optional: true,
    },
    MFCreateTopology: {
      parameters: ["pointer"],
      result: "pointer",
      optional: true,
    },
    MFCreateTopologyNode: {
      parameters: ["i32", "pointer"],
      result: "pointer",
      optional: true,
    },
    MFGetTopoNodeCurrentType: {
      parameters: ["pointer", "u32", "i32", "pointer"],
      result: "pointer",
      optional: true,
    },
    MFGetService: {
      parameters: ["pointer", "pointer", "pointer", "pointer"],
      result: "pointer",
      optional: true,
    },
    MFCreatePresentationClock: {
      parameters: ["pointer"],
      result: "pointer",
      optional: true,
    },
    MFRequireProtectedEnvironment: {
      parameters: ["pointer"],
      result: "pointer",
      optional: true,
    },
    MFCreateSimpleTypeHandler: {
      parameters: ["pointer"],
      result: "pointer",
      optional: true,
    },
    MFShutdownObject: {
      parameters: ["pointer"],
      result: "pointer",
      optional: true,
    },
    MFCreateAudioRenderer: {
      parameters: ["pointer", "pointer"],
      result: "pointer",
      optional: true,
    },
    MFCreateAudioRendererActivate: {
      parameters: ["pointer"],
      result: "pointer",
      optional: true,
    },
    MFCreateVideoRendererActivate: {
      parameters: ["pointer", "pointer"],
      result: "pointer",
      optional: true,
    },
    MFCreateMPEG4MediaSink: {
      parameters: ["pointer", "pointer", "pointer", "pointer"],
      result: "pointer",
      optional: true,
    },
    MFCreate3GPMediaSink: {
      parameters: ["pointer", "pointer", "pointer", "pointer"],
      result: "pointer",
      optional: true,
    },
    MFCreateMP3MediaSink: {
      parameters: ["pointer", "pointer"],
      result: "pointer",
      optional: true,
    },
    MFCreateAC3MediaSink: {
      parameters: ["pointer", "pointer", "pointer"],
      result: "pointer",
      optional: true,
    },
    MFCreateADTSMediaSink: {
      parameters: ["pointer", "pointer", "pointer"],
      result: "pointer",
      optional: true,
    },
    MFCreateMuxSink: {
      parameters: ["pointer", "pointer", "pointer", "pointer"],
      result: "pointer",
      optional: true,
    },
    MFCreateFMPEG4MediaSink: {
      parameters: ["pointer", "pointer", "pointer", "pointer"],
      result: "pointer",
      optional: true,
    },
    MFCreateTopoLoader: {
      parameters: ["pointer"],
      result: "pointer",
      optional: true,
    },
    MFCreateSampleGrabberSinkActivate: {
      parameters: ["pointer", "pointer", "pointer"],
      result: "pointer",
      optional: true,
    },
    MFCreateStandardQualityManager: {
      parameters: ["pointer"],
      result: "pointer",
      optional: true,
    },
    MFCreateSequencerSource: {
      parameters: ["pointer", "pointer"],
      result: "pointer",
      optional: true,
    },
    MFCreateSequencerSegmentOffset: {
      parameters: ["u32", "i64", "pointer"],
      result: "pointer",
      optional: true,
    },
    MFCreateAggregateSource: {
      parameters: ["pointer", "pointer"],
      result: "pointer",
      optional: true,
    },
    MFCreateCredentialCache: {
      parameters: ["pointer"],
      result: "pointer",
      optional: true,
    },
    MFCreateProxyLocator: {
      parameters: ["buffer", "pointer", "pointer"],
      result: "pointer",
      optional: true,
    },
    MFCreateNetSchemePlugin: {
      parameters: ["pointer", "pointer"],
      result: "pointer",
      optional: true,
    },
    MFCreatePMPServer: {
      parameters: ["u32", "pointer"],
      result: "pointer",
      optional: true,
    },
    MFCreateRemoteDesktopPlugin: {
      parameters: ["pointer"],
      result: "pointer",
      optional: true,
    },
    CreateNamedPropertyStore: {
      parameters: ["pointer"],
      result: "pointer",
      optional: true,
    },
    MFCreateSampleCopierMFT: {
      parameters: ["pointer"],
      result: "pointer",
      optional: true,
    },
    MFCreateTranscodeProfile: {
      parameters: ["pointer"],
      result: "pointer",
      optional: true,
    },
    MFCreateTranscodeTopology: {
      parameters: ["pointer", "buffer", "pointer", "pointer"],
      result: "pointer",
      optional: true,
    },
    MFCreateTranscodeTopologyFromByteStream: {
      parameters: ["pointer", "pointer", "pointer", "pointer"],
      result: "pointer",
      optional: true,
    },
    MFTranscodeGetAudioOutputAvailableTypes: {
      parameters: ["pointer", "u32", "pointer", "pointer"],
      result: "pointer",
      optional: true,
    },
    MFCreateTranscodeSinkActivate: {
      parameters: ["pointer"],
      result: "pointer",
      optional: true,
    },
    MFEnumDeviceSources: {
      parameters: ["pointer", "pointer", "pointer"],
      result: "pointer",
      optional: true,
    },
    MFCreateDeviceSource: {
      parameters: ["pointer", "pointer"],
      result: "pointer",
      optional: true,
    },
    MFCreateDeviceSourceActivate: {
      parameters: ["pointer", "pointer"],
      result: "pointer",
      optional: true,
    },
    MFCreateProtectedEnvironmentAccess: {
      parameters: ["pointer"],
      result: "pointer",
      optional: true,
    },
    MFLoadSignedLibrary: {
      parameters: ["buffer", "pointer"],
      result: "pointer",
      optional: true,
    },
    MFGetSystemId: {
      parameters: ["pointer"],
      result: "pointer",
      optional: true,
    },
    MFGetLocalId: {
      parameters: ["pointer", "u32", "pointer"],
      result: "pointer",
      optional: true,
    },
    MFCreateASFContentInfo: {
      parameters: ["pointer"],
      result: "pointer",
      optional: true,
    },
    MFCreateASFIndexer: {
      parameters: ["pointer"],
      result: "pointer",
      optional: true,
    },
    MFCreateASFIndexerByteStream: {
      parameters: ["pointer", "u64", "pointer"],
      result: "pointer",
      optional: true,
    },
    MFCreateASFSplitter: {
      parameters: ["pointer"],
      result: "pointer",
      optional: true,
    },
    MFCreateASFProfile: {
      parameters: ["pointer"],
      result: "pointer",
      optional: true,
    },
    MFCreateASFProfileFromPresentationDescriptor: {
      parameters: ["pointer", "pointer"],
      result: "pointer",
      optional: true,
    },
    MFCreatePresentationDescriptorFromASFProfile: {
      parameters: ["pointer", "pointer"],
      result: "pointer",
      optional: true,
    },
    MFCreateASFMultiplexer: {
      parameters: ["pointer"],
      result: "pointer",
      optional: true,
    },
    MFCreateASFStreamSelector: {
      parameters: ["pointer", "pointer"],
      result: "pointer",
      optional: true,
    },
    MFCreateASFMediaSink: {
      parameters: ["pointer", "pointer"],
      result: "pointer",
      optional: true,
    },
    MFCreateASFMediaSinkActivate: {
      parameters: ["buffer", "pointer", "pointer"],
      result: "pointer",
      optional: true,
    },
    MFCreateWMVEncoderActivate: {
      parameters: ["pointer", "pointer", "pointer"],
      result: "pointer",
      optional: true,
    },
    MFCreateWMAEncoderActivate: {
      parameters: ["pointer", "pointer", "pointer"],
      result: "pointer",
      optional: true,
    },
    MFCreateASFStreamingMediaSink: {
      parameters: ["pointer", "pointer"],
      result: "pointer",
      optional: true,
    },
    MFCreateASFStreamingMediaSinkActivate: {
      parameters: ["pointer", "pointer", "pointer"],
      result: "pointer",
      optional: true,
    },
    MFCreateVideoRenderer: {
      parameters: ["pointer", "pointer"],
      result: "pointer",
      optional: true,
    },
    MFCreateEncryptedMediaExtensionsStoreActivate: {
      parameters: ["pointer", "pointer", "buffer", "pointer"],
      result: "pointer",
      optional: true,
    },
  }).symbols;
} catch(e) { /* ignore */ }

try {
  var libmfsrcsnk_dll = Deno.dlopen("mfsrcsnk.dll", {
    MFCreateAVIMediaSink: {
      parameters: ["pointer", "pointer", "pointer", "pointer"],
      result: "pointer",
      optional: true,
    },
    MFCreateWAVEMediaSink: {
      parameters: ["pointer", "pointer", "pointer"],
      result: "pointer",
      optional: true,
    },
  }).symbols;
} catch(e) { /* ignore */ }

try {
  var libMFSENSORGROUP_dll = Deno.dlopen("MFSENSORGROUP.dll", {
    MFCreateSensorGroup: {
      parameters: ["buffer", "pointer"],
      result: "pointer",
      optional: true,
    },
    MFCreateSensorStream: {
      parameters: ["u32", "pointer", "pointer", "pointer"],
      result: "pointer",
      optional: true,
    },
    MFCreateSensorProfile: {
      parameters: ["pointer", "u32", "buffer", "pointer"],
      result: "pointer",
      optional: true,
    },
    MFCreateSensorProfileCollection: {
      parameters: ["pointer"],
      result: "pointer",
      optional: true,
    },
    MFCreateSensorActivityMonitor: {
      parameters: ["pointer", "pointer"],
      result: "pointer",
      optional: true,
    },
    MFCreateRelativePanelWatcher: {
      parameters: ["buffer", "buffer", "pointer"],
      result: "pointer",
      optional: true,
    },
    MFCreateCameraOcclusionStateMonitor: {
      parameters: ["buffer", "pointer", "pointer"],
      result: "pointer",
      optional: true,
    },
    MFCreateVirtualCamera: {
      parameters: ["i32", "i32", "i32", "buffer", "buffer", "pointer", "u32", "pointer"],
      result: "pointer",
      optional: true,
    },
    MFIsVirtualCameraTypeSupported: {
      parameters: ["i32", "pointer"],
      result: "pointer",
      optional: true,
    },
  }).symbols;
} catch(e) { /* ignore */ }

try {
  var libMFCORE_dll = Deno.dlopen("MFCORE.dll", {
    MFCreateExtendedCameraIntrinsics: {
      parameters: ["pointer"],
      result: "pointer",
      optional: true,
    },
    MFCreateExtendedCameraIntrinsicModel: {
      parameters: ["i32", "pointer"],
      result: "pointer",
      optional: true,
    },
  }).symbols;
} catch(e) { /* ignore */ }

try {
  var libEVR_dll = Deno.dlopen("EVR.dll", {
    MFIsFormatYUV: {
      parameters: ["u32"],
      result: "i32",
      optional: true,
    },
    MFGetPlaneSize: {
      parameters: ["u32", "u32", "u32", "pointer"],
      result: "pointer",
      optional: true,
    },
    MFCreateVideoPresenter: {
      parameters: ["pointer", "pointer", "pointer", "pointer"],
      result: "pointer",
      optional: true,
    },
    MFCreateVideoMixer: {
      parameters: ["pointer", "pointer", "pointer", "pointer"],
      result: "pointer",
      optional: true,
    },
    MFCreateVideoMixerAndPresenter: {
      parameters: ["pointer", "pointer", "pointer", "pointer", "pointer", "pointer"],
      result: "pointer",
      optional: true,
    },
    MFCreateVideoSampleFromSurface: {
      parameters: ["pointer", "pointer"],
      result: "pointer",
      optional: true,
    },
    MFCreateVideoSampleAllocator: {
      parameters: ["pointer", "pointer"],
      result: "pointer",
      optional: true,
    },
  }).symbols;
} catch(e) { /* ignore */ }

try {
  var libMFReadWrite_dll = Deno.dlopen("MFReadWrite.dll", {
    MFCreateSourceReaderFromURL: {
      parameters: ["buffer", "pointer", "pointer"],
      result: "pointer",
      optional: true,
    },
    MFCreateSourceReaderFromByteStream: {
      parameters: ["pointer", "pointer", "pointer"],
      result: "pointer",
      optional: true,
    },
    MFCreateSourceReaderFromMediaSource: {
      parameters: ["pointer", "pointer", "pointer"],
      result: "pointer",
      optional: true,
    },
    MFCreateSinkWriterFromURL: {
      parameters: ["buffer", "pointer", "pointer", "pointer"],
      result: "pointer",
      optional: true,
    },
    MFCreateSinkWriterFromMediaSink: {
      parameters: ["pointer", "pointer", "pointer"],
      result: "pointer",
      optional: true,
    },
  }).symbols;
} catch(e) { /* ignore */ }

try {
  var libMFPlay_dll = Deno.dlopen("MFPlay.dll", {
    MFPCreateMediaPlayer: {
      parameters: ["buffer", "i32", "i32", "pointer", "pointer", "pointer"],
      result: "pointer",
      optional: true,
    },
  }).symbols;
} catch(e) { /* ignore */ }

try {
  var libOPMXbox_dll = Deno.dlopen("OPMXbox.dll", {
    OPMXboxEnableHDCP: {
      parameters: ["i32"],
      result: "pointer",
      optional: true,
    },
    OPMXboxGetHDCPStatus: {
      parameters: ["pointer"],
      result: "pointer",
      optional: true,
    },
    OPMXboxGetHDCPStatusAndType: {
      parameters: ["pointer", "pointer"],
      result: "pointer",
      optional: true,
    },
  }).symbols;
} catch(e) { /* ignore */ }

// Symbols

export function DXVAHD_CreateDevice(
  pD3DDevice: Uint8Array | Deno.PointerValue /* Windows.Win32.Graphics.Direct3D9.IDirect3DDevice9Ex */,
  pContentDesc: Deno.PointerValue | Uint8Array /* ptr */,
  Usage: DXVAHD_DEVICE_USAGE /* Windows.Win32.Media.MediaFoundation.DXVAHD_DEVICE_USAGE */,
  pPlugin: Uint8Array | Deno.PointerValue /* Windows.Win32.Media.MediaFoundation.PDXVAHDSW_Plugin */,
  ppDevice: Deno.PointerValue | Uint8Array /* ptr */,
): Deno.PointerValue /* Windows.Win32.Foundation.HRESULT */ {
  return libdxva2_dll.DXVAHD_CreateDevice!(util.toPointer(pD3DDevice), util.toPointer(pContentDesc), Usage, util.toPointer(pPlugin), util.toPointer(ppDevice));
}

export function DXVA2CreateDirect3DDeviceManager9(
  pResetToken: Deno.PointerValue | Uint8Array /* ptr */,
  ppDeviceManager: Deno.PointerValue | Uint8Array /* ptr */,
): Deno.PointerValue /* Windows.Win32.Foundation.HRESULT */ {
  return libdxva2_dll.DXVA2CreateDirect3DDeviceManager9!(util.toPointer(pResetToken), util.toPointer(ppDeviceManager));
}

export function DXVA2CreateVideoService(
  pDD: Uint8Array | Deno.PointerValue /* Windows.Win32.Graphics.Direct3D9.IDirect3DDevice9 */,
  riid: Deno.PointerValue | Uint8Array /* ptr */,
  ppService: Deno.PointerValue | Uint8Array /* ptr */,
): Deno.PointerValue /* Windows.Win32.Foundation.HRESULT */ {
  return libdxva2_dll.DXVA2CreateVideoService!(util.toPointer(pDD), util.toPointer(riid), util.toPointer(ppService));
}

export function OPMGetVideoOutputsFromHMONITOR(
  hMonitor: Uint8Array | Deno.PointerValue /* Windows.Win32.Graphics.Gdi.HMONITOR */,
  vos: OPM_VIDEO_OUTPUT_SEMANTICS /* Windows.Win32.Media.MediaFoundation.OPM_VIDEO_OUTPUT_SEMANTICS */,
  pulNumVideoOutputs: Deno.PointerValue | Uint8Array /* ptr */,
  pppOPMVideoOutputArray: Deno.PointerValue | Uint8Array /* ptr */,
): Deno.PointerValue /* Windows.Win32.Foundation.HRESULT */ {
  return libdxva2_dll.OPMGetVideoOutputsFromHMONITOR!(util.toPointer(hMonitor), vos, util.toPointer(pulNumVideoOutputs), util.toPointer(pppOPMVideoOutputArray));
}

export function OPMGetVideoOutputForTarget(
  pAdapterLuid: Deno.PointerValue | Uint8Array /* ptr */,
  VidPnTarget: number /* u32 */,
  vos: OPM_VIDEO_OUTPUT_SEMANTICS /* Windows.Win32.Media.MediaFoundation.OPM_VIDEO_OUTPUT_SEMANTICS */,
  ppOPMVideoOutput: Deno.PointerValue | Uint8Array /* ptr */,
): Deno.PointerValue /* Windows.Win32.Foundation.HRESULT */ {
  return libdxva2_dll.OPMGetVideoOutputForTarget!(util.toPointer(pAdapterLuid), VidPnTarget, vos, util.toPointer(ppOPMVideoOutput));
}

export function OPMGetVideoOutputsFromIDirect3DDevice9Object(
  pDirect3DDevice9: Uint8Array | Deno.PointerValue /* Windows.Win32.Graphics.Direct3D9.IDirect3DDevice9 */,
  vos: OPM_VIDEO_OUTPUT_SEMANTICS /* Windows.Win32.Media.MediaFoundation.OPM_VIDEO_OUTPUT_SEMANTICS */,
  pulNumVideoOutputs: Deno.PointerValue | Uint8Array /* ptr */,
  pppOPMVideoOutputArray: Deno.PointerValue | Uint8Array /* ptr */,
): Deno.PointerValue /* Windows.Win32.Foundation.HRESULT */ {
  return libdxva2_dll.OPMGetVideoOutputsFromIDirect3DDevice9Object!(util.toPointer(pDirect3DDevice9), vos, util.toPointer(pulNumVideoOutputs), util.toPointer(pppOPMVideoOutputArray));
}

export function MFSerializeAttributesToStream(
  pAttr: Uint8Array | Deno.PointerValue /* Windows.Win32.Media.MediaFoundation.IMFAttributes */,
  dwOptions: number /* u32 */,
  pStm: Uint8Array | Deno.PointerValue /* Windows.Win32.System.Com.IStream */,
): Deno.PointerValue /* Windows.Win32.Foundation.HRESULT */ {
  return libMFPlat_dll.MFSerializeAttributesToStream!(util.toPointer(pAttr), dwOptions, util.toPointer(pStm));
}

export function MFDeserializeAttributesFromStream(
  pAttr: Uint8Array | Deno.PointerValue /* Windows.Win32.Media.MediaFoundation.IMFAttributes */,
  dwOptions: number /* u32 */,
  pStm: Uint8Array | Deno.PointerValue /* Windows.Win32.System.Com.IStream */,
): Deno.PointerValue /* Windows.Win32.Foundation.HRESULT */ {
  return libMFPlat_dll.MFDeserializeAttributesFromStream!(util.toPointer(pAttr), dwOptions, util.toPointer(pStm));
}

export function MFCreateTransformActivate(
  ppActivate: Deno.PointerValue | Uint8Array /* ptr */,
): Deno.PointerValue /* Windows.Win32.Foundation.HRESULT */ {
  return libMFPlat_dll.MFCreateTransformActivate!(util.toPointer(ppActivate));
}

export function MFCreateMediaSession(
  pConfiguration: Uint8Array | Deno.PointerValue /* Windows.Win32.Media.MediaFoundation.IMFAttributes */,
  ppMediaSession: Deno.PointerValue | Uint8Array /* ptr */,
): Deno.PointerValue /* Windows.Win32.Foundation.HRESULT */ {
  return libMF_dll.MFCreateMediaSession!(util.toPointer(pConfiguration), util.toPointer(ppMediaSession));
}

export function MFCreatePMPMediaSession(
  dwCreationFlags: number /* u32 */,
  pConfiguration: Uint8Array | Deno.PointerValue /* Windows.Win32.Media.MediaFoundation.IMFAttributes */,
  ppMediaSession: Deno.PointerValue | Uint8Array /* ptr */,
  ppEnablerActivate: Deno.PointerValue | Uint8Array /* ptr */,
): Deno.PointerValue /* Windows.Win32.Foundation.HRESULT */ {
  return libMF_dll.MFCreatePMPMediaSession!(dwCreationFlags, util.toPointer(pConfiguration), util.toPointer(ppMediaSession), util.toPointer(ppEnablerActivate));
}

export function MFCreateSourceResolver(
  ppISourceResolver: Deno.PointerValue | Uint8Array /* ptr */,
): Deno.PointerValue /* Windows.Win32.Foundation.HRESULT */ {
  return libMFPlat_dll.MFCreateSourceResolver!(util.toPointer(ppISourceResolver));
}

export function CreatePropertyStore(
  ppStore: Deno.PointerValue | Uint8Array /* ptr */,
): Deno.PointerValue /* Windows.Win32.Foundation.HRESULT */ {
  return libMFPlat_dll.CreatePropertyStore!(util.toPointer(ppStore));
}

export function MFGetSupportedSchemes(
  pPropVarSchemeArray: Deno.PointerValue | Uint8Array /* ptr */,
): Deno.PointerValue /* Windows.Win32.Foundation.HRESULT */ {
  return libMFPlat_dll.MFGetSupportedSchemes!(util.toPointer(pPropVarSchemeArray));
}

export function MFGetSupportedMimeTypes(
  pPropVarMimeTypeArray: Deno.PointerValue | Uint8Array /* ptr */,
): Deno.PointerValue /* Windows.Win32.Foundation.HRESULT */ {
  return libMFPlat_dll.MFGetSupportedMimeTypes!(util.toPointer(pPropVarMimeTypeArray));
}

export function MFCreateTopology(
  ppTopo: Deno.PointerValue | Uint8Array /* ptr */,
): Deno.PointerValue /* Windows.Win32.Foundation.HRESULT */ {
  return libMF_dll.MFCreateTopology!(util.toPointer(ppTopo));
}

export function MFCreateTopologyNode(
  NodeType: MF_TOPOLOGY_TYPE /* Windows.Win32.Media.MediaFoundation.MF_TOPOLOGY_TYPE */,
  ppNode: Deno.PointerValue | Uint8Array /* ptr */,
): Deno.PointerValue /* Windows.Win32.Foundation.HRESULT */ {
  return libMF_dll.MFCreateTopologyNode!(NodeType, util.toPointer(ppNode));
}

export function MFGetTopoNodeCurrentType(
  pNode: Uint8Array | Deno.PointerValue /* Windows.Win32.Media.MediaFoundation.IMFTopologyNode */,
  dwStreamIndex: number /* u32 */,
  fOutput: boolean /* Windows.Win32.Foundation.BOOL */,
  ppType: Deno.PointerValue | Uint8Array /* ptr */,
): Deno.PointerValue /* Windows.Win32.Foundation.HRESULT */ {
  return libMF_dll.MFGetTopoNodeCurrentType!(util.toPointer(pNode), dwStreamIndex, util.boolToFfi(fOutput), util.toPointer(ppType));
}

export function MFGetService(
  punkObject: Uint8Array | Deno.PointerValue /* Windows.Win32.System.Com.IUnknown */,
  guidService: Deno.PointerValue | Uint8Array /* ptr */,
  riid: Deno.PointerValue | Uint8Array /* ptr */,
  ppvObject: Deno.PointerValue | Uint8Array /* ptr */,
): Deno.PointerValue /* Windows.Win32.Foundation.HRESULT */ {
  return libMF_dll.MFGetService!(util.toPointer(punkObject), util.toPointer(guidService), util.toPointer(riid), util.toPointer(ppvObject));
}

export function MFGetSystemTime(): bigint | number /* i64 */ {
  return libMFPlat_dll.MFGetSystemTime!();
}

export function MFCreatePresentationClock(
  ppPresentationClock: Deno.PointerValue | Uint8Array /* ptr */,
): Deno.PointerValue /* Windows.Win32.Foundation.HRESULT */ {
  return libMF_dll.MFCreatePresentationClock!(util.toPointer(ppPresentationClock));
}

export function MFCreateSystemTimeSource(
  ppSystemTimeSource: Deno.PointerValue | Uint8Array /* ptr */,
): Deno.PointerValue /* Windows.Win32.Foundation.HRESULT */ {
  return libMFPlat_dll.MFCreateSystemTimeSource!(util.toPointer(ppSystemTimeSource));
}

export function MFCreatePresentationDescriptor(
  cStreamDescriptors: number /* u32 */,
  apStreamDescriptors: Deno.PointerValue | Uint8Array /* ptr */,
  ppPresentationDescriptor: Deno.PointerValue | Uint8Array /* ptr */,
): Deno.PointerValue /* Windows.Win32.Foundation.HRESULT */ {
  return libMFPlat_dll.MFCreatePresentationDescriptor!(cStreamDescriptors, util.toPointer(apStreamDescriptors), util.toPointer(ppPresentationDescriptor));
}

export function MFRequireProtectedEnvironment(
  pPresentationDescriptor: Uint8Array | Deno.PointerValue /* Windows.Win32.Media.MediaFoundation.IMFPresentationDescriptor */,
): Deno.PointerValue /* Windows.Win32.Foundation.HRESULT */ {
  return libMF_dll.MFRequireProtectedEnvironment!(util.toPointer(pPresentationDescriptor));
}

export function MFSerializePresentationDescriptor(
  pPD: Uint8Array | Deno.PointerValue /* Windows.Win32.Media.MediaFoundation.IMFPresentationDescriptor */,
  pcbData: Deno.PointerValue | Uint8Array /* ptr */,
  ppbData: Deno.PointerValue | Uint8Array /* ptr */,
): Deno.PointerValue /* Windows.Win32.Foundation.HRESULT */ {
  return libMFPlat_dll.MFSerializePresentationDescriptor!(util.toPointer(pPD), util.toPointer(pcbData), util.toPointer(ppbData));
}

export function MFDeserializePresentationDescriptor(
  cbData: number /* u32 */,
  pbData: Deno.PointerValue | Uint8Array /* ptr */,
  ppPD: Deno.PointerValue | Uint8Array /* ptr */,
): Deno.PointerValue /* Windows.Win32.Foundation.HRESULT */ {
  return libMFPlat_dll.MFDeserializePresentationDescriptor!(cbData, util.toPointer(pbData), util.toPointer(ppPD));
}

export function MFCreateStreamDescriptor(
  dwStreamIdentifier: number /* u32 */,
  cMediaTypes: number /* u32 */,
  apMediaTypes: Deno.PointerValue | Uint8Array /* ptr */,
  ppDescriptor: Deno.PointerValue | Uint8Array /* ptr */,
): Deno.PointerValue /* Windows.Win32.Foundation.HRESULT */ {
  return libMFPlat_dll.MFCreateStreamDescriptor!(dwStreamIdentifier, cMediaTypes, util.toPointer(apMediaTypes), util.toPointer(ppDescriptor));
}

export function MFCreateSimpleTypeHandler(
  ppHandler: Deno.PointerValue | Uint8Array /* ptr */,
): Deno.PointerValue /* Windows.Win32.Foundation.HRESULT */ {
  return libMF_dll.MFCreateSimpleTypeHandler!(util.toPointer(ppHandler));
}

export function MFShutdownObject(
  pUnk: Uint8Array | Deno.PointerValue /* Windows.Win32.System.Com.IUnknown */,
): Deno.PointerValue /* Windows.Win32.Foundation.HRESULT */ {
  return libMF_dll.MFShutdownObject!(util.toPointer(pUnk));
}

export function MFCreateAudioRenderer(
  pAudioAttributes: Uint8Array | Deno.PointerValue /* Windows.Win32.Media.MediaFoundation.IMFAttributes */,
  ppSink: Deno.PointerValue | Uint8Array /* ptr */,
): Deno.PointerValue /* Windows.Win32.Foundation.HRESULT */ {
  return libMF_dll.MFCreateAudioRenderer!(util.toPointer(pAudioAttributes), util.toPointer(ppSink));
}

export function MFCreateAudioRendererActivate(
  ppActivate: Deno.PointerValue | Uint8Array /* ptr */,
): Deno.PointerValue /* Windows.Win32.Foundation.HRESULT */ {
  return libMF_dll.MFCreateAudioRendererActivate!(util.toPointer(ppActivate));
}

export function MFCreateVideoRendererActivate(
  hwndVideo: Deno.PointerValue /* Windows.Win32.Foundation.HWND */,
  ppActivate: Deno.PointerValue | Uint8Array /* ptr */,
): Deno.PointerValue /* Windows.Win32.Foundation.HRESULT */ {
  return libMF_dll.MFCreateVideoRendererActivate!((hwndVideo), util.toPointer(ppActivate));
}

export function MFCreateMPEG4MediaSink(
  pIByteStream: Uint8Array | Deno.PointerValue /* Windows.Win32.Media.MediaFoundation.IMFByteStream */,
  pVideoMediaType: Uint8Array | Deno.PointerValue /* Windows.Win32.Media.MediaFoundation.IMFMediaType */,
  pAudioMediaType: Uint8Array | Deno.PointerValue /* Windows.Win32.Media.MediaFoundation.IMFMediaType */,
  ppIMediaSink: Deno.PointerValue | Uint8Array /* ptr */,
): Deno.PointerValue /* Windows.Win32.Foundation.HRESULT */ {
  return libMF_dll.MFCreateMPEG4MediaSink!(util.toPointer(pIByteStream), util.toPointer(pVideoMediaType), util.toPointer(pAudioMediaType), util.toPointer(ppIMediaSink));
}

export function MFCreate3GPMediaSink(
  pIByteStream: Uint8Array | Deno.PointerValue /* Windows.Win32.Media.MediaFoundation.IMFByteStream */,
  pVideoMediaType: Uint8Array | Deno.PointerValue /* Windows.Win32.Media.MediaFoundation.IMFMediaType */,
  pAudioMediaType: Uint8Array | Deno.PointerValue /* Windows.Win32.Media.MediaFoundation.IMFMediaType */,
  ppIMediaSink: Deno.PointerValue | Uint8Array /* ptr */,
): Deno.PointerValue /* Windows.Win32.Foundation.HRESULT */ {
  return libMF_dll.MFCreate3GPMediaSink!(util.toPointer(pIByteStream), util.toPointer(pVideoMediaType), util.toPointer(pAudioMediaType), util.toPointer(ppIMediaSink));
}

export function MFCreateMP3MediaSink(
  pTargetByteStream: Uint8Array | Deno.PointerValue /* Windows.Win32.Media.MediaFoundation.IMFByteStream */,
  ppMediaSink: Deno.PointerValue | Uint8Array /* ptr */,
): Deno.PointerValue /* Windows.Win32.Foundation.HRESULT */ {
  return libMF_dll.MFCreateMP3MediaSink!(util.toPointer(pTargetByteStream), util.toPointer(ppMediaSink));
}

export function MFCreateAC3MediaSink(
  pTargetByteStream: Uint8Array | Deno.PointerValue /* Windows.Win32.Media.MediaFoundation.IMFByteStream */,
  pAudioMediaType: Uint8Array | Deno.PointerValue /* Windows.Win32.Media.MediaFoundation.IMFMediaType */,
  ppMediaSink: Deno.PointerValue | Uint8Array /* ptr */,
): Deno.PointerValue /* Windows.Win32.Foundation.HRESULT */ {
  return libMF_dll.MFCreateAC3MediaSink!(util.toPointer(pTargetByteStream), util.toPointer(pAudioMediaType), util.toPointer(ppMediaSink));
}

export function MFCreateADTSMediaSink(
  pTargetByteStream: Uint8Array | Deno.PointerValue /* Windows.Win32.Media.MediaFoundation.IMFByteStream */,
  pAudioMediaType: Uint8Array | Deno.PointerValue /* Windows.Win32.Media.MediaFoundation.IMFMediaType */,
  ppMediaSink: Deno.PointerValue | Uint8Array /* ptr */,
): Deno.PointerValue /* Windows.Win32.Foundation.HRESULT */ {
  return libMF_dll.MFCreateADTSMediaSink!(util.toPointer(pTargetByteStream), util.toPointer(pAudioMediaType), util.toPointer(ppMediaSink));
}

export function MFCreateMuxSink(
  guidOutputSubType: Uint8Array | Deno.PointerValue /* System.Guid */,
  pOutputAttributes: Uint8Array | Deno.PointerValue /* Windows.Win32.Media.MediaFoundation.IMFAttributes */,
  pOutputByteStream: Uint8Array | Deno.PointerValue /* Windows.Win32.Media.MediaFoundation.IMFByteStream */,
  ppMuxSink: Deno.PointerValue | Uint8Array /* ptr */,
): Deno.PointerValue /* Windows.Win32.Foundation.HRESULT */ {
  return libMF_dll.MFCreateMuxSink!(util.toPointer(guidOutputSubType), util.toPointer(pOutputAttributes), util.toPointer(pOutputByteStream), util.toPointer(ppMuxSink));
}

export function MFCreateFMPEG4MediaSink(
  pIByteStream: Uint8Array | Deno.PointerValue /* Windows.Win32.Media.MediaFoundation.IMFByteStream */,
  pVideoMediaType: Uint8Array | Deno.PointerValue /* Windows.Win32.Media.MediaFoundation.IMFMediaType */,
  pAudioMediaType: Uint8Array | Deno.PointerValue /* Windows.Win32.Media.MediaFoundation.IMFMediaType */,
  ppIMediaSink: Deno.PointerValue | Uint8Array /* ptr */,
): Deno.PointerValue /* Windows.Win32.Foundation.HRESULT */ {
  return libMF_dll.MFCreateFMPEG4MediaSink!(util.toPointer(pIByteStream), util.toPointer(pVideoMediaType), util.toPointer(pAudioMediaType), util.toPointer(ppIMediaSink));
}

export function MFCreateAVIMediaSink(
  pIByteStream: Uint8Array | Deno.PointerValue /* Windows.Win32.Media.MediaFoundation.IMFByteStream */,
  pVideoMediaType: Uint8Array | Deno.PointerValue /* Windows.Win32.Media.MediaFoundation.IMFMediaType */,
  pAudioMediaType: Uint8Array | Deno.PointerValue /* Windows.Win32.Media.MediaFoundation.IMFMediaType */,
  ppIMediaSink: Deno.PointerValue | Uint8Array /* ptr */,
): Deno.PointerValue /* Windows.Win32.Foundation.HRESULT */ {
  return libmfsrcsnk_dll.MFCreateAVIMediaSink!(util.toPointer(pIByteStream), util.toPointer(pVideoMediaType), util.toPointer(pAudioMediaType), util.toPointer(ppIMediaSink));
}

export function MFCreateWAVEMediaSink(
  pTargetByteStream: Uint8Array | Deno.PointerValue /* Windows.Win32.Media.MediaFoundation.IMFByteStream */,
  pAudioMediaType: Uint8Array | Deno.PointerValue /* Windows.Win32.Media.MediaFoundation.IMFMediaType */,
  ppMediaSink: Deno.PointerValue | Uint8Array /* ptr */,
): Deno.PointerValue /* Windows.Win32.Foundation.HRESULT */ {
  return libmfsrcsnk_dll.MFCreateWAVEMediaSink!(util.toPointer(pTargetByteStream), util.toPointer(pAudioMediaType), util.toPointer(ppMediaSink));
}

export function MFCreateTopoLoader(
  ppObj: Deno.PointerValue | Uint8Array /* ptr */,
): Deno.PointerValue /* Windows.Win32.Foundation.HRESULT */ {
  return libMF_dll.MFCreateTopoLoader!(util.toPointer(ppObj));
}

export function MFCreateSampleGrabberSinkActivate(
  pIMFMediaType: Uint8Array | Deno.PointerValue /* Windows.Win32.Media.MediaFoundation.IMFMediaType */,
  pIMFSampleGrabberSinkCallback: Uint8Array | Deno.PointerValue /* Windows.Win32.Media.MediaFoundation.IMFSampleGrabberSinkCallback */,
  ppIActivate: Deno.PointerValue | Uint8Array /* ptr */,
): Deno.PointerValue /* Windows.Win32.Foundation.HRESULT */ {
  return libMF_dll.MFCreateSampleGrabberSinkActivate!(util.toPointer(pIMFMediaType), util.toPointer(pIMFSampleGrabberSinkCallback), util.toPointer(ppIActivate));
}

export function MFCreateStandardQualityManager(
  ppQualityManager: Deno.PointerValue | Uint8Array /* ptr */,
): Deno.PointerValue /* Windows.Win32.Foundation.HRESULT */ {
  return libMF_dll.MFCreateStandardQualityManager!(util.toPointer(ppQualityManager));
}

export function MFCreateSequencerSource(
  pReserved: Uint8Array | Deno.PointerValue /* Windows.Win32.System.Com.IUnknown */,
  ppSequencerSource: Deno.PointerValue | Uint8Array /* ptr */,
): Deno.PointerValue /* Windows.Win32.Foundation.HRESULT */ {
  return libMF_dll.MFCreateSequencerSource!(util.toPointer(pReserved), util.toPointer(ppSequencerSource));
}

export function MFCreateSequencerSegmentOffset(
  dwId: number /* u32 */,
  hnsOffset: bigint | number /* i64 */,
  pvarSegmentOffset: Deno.PointerValue | Uint8Array /* ptr */,
): Deno.PointerValue /* Windows.Win32.Foundation.HRESULT */ {
  return libMF_dll.MFCreateSequencerSegmentOffset!(dwId, hnsOffset, util.toPointer(pvarSegmentOffset));
}

export function MFCreateAggregateSource(
  pSourceCollection: Uint8Array | Deno.PointerValue /* Windows.Win32.Media.MediaFoundation.IMFCollection */,
  ppAggSource: Deno.PointerValue | Uint8Array /* ptr */,
): Deno.PointerValue /* Windows.Win32.Foundation.HRESULT */ {
  return libMF_dll.MFCreateAggregateSource!(util.toPointer(pSourceCollection), util.toPointer(ppAggSource));
}

export function MFCreateCredentialCache(
  ppCache: Deno.PointerValue | Uint8Array /* ptr */,
): Deno.PointerValue /* Windows.Win32.Foundation.HRESULT */ {
  return libMF_dll.MFCreateCredentialCache!(util.toPointer(ppCache));
}

export function MFCreateProxyLocator(
  pszProtocol: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  pProxyConfig: Uint8Array | Deno.PointerValue /* Windows.Win32.UI.Shell.PropertiesSystem.IPropertyStore */,
  ppProxyLocator: Deno.PointerValue | Uint8Array /* ptr */,
): Deno.PointerValue /* Windows.Win32.Foundation.HRESULT */ {
  return libMF_dll.MFCreateProxyLocator!(util.pwstrToFfi(pszProtocol), util.toPointer(pProxyConfig), util.toPointer(ppProxyLocator));
}

export function MFCreateNetSchemePlugin(
  riid: Deno.PointerValue | Uint8Array /* ptr */,
  ppvHandler: Deno.PointerValue | Uint8Array /* ptr */,
): Deno.PointerValue /* Windows.Win32.Foundation.HRESULT */ {
  return libMF_dll.MFCreateNetSchemePlugin!(util.toPointer(riid), util.toPointer(ppvHandler));
}

export function MFCreatePMPServer(
  dwCreationFlags: number /* u32 */,
  ppPMPServer: Deno.PointerValue | Uint8Array /* ptr */,
): Deno.PointerValue /* Windows.Win32.Foundation.HRESULT */ {
  return libMF_dll.MFCreatePMPServer!(dwCreationFlags, util.toPointer(ppPMPServer));
}

export function MFCreateRemoteDesktopPlugin(
  ppPlugin: Deno.PointerValue | Uint8Array /* ptr */,
): Deno.PointerValue /* Windows.Win32.Foundation.HRESULT */ {
  return libMF_dll.MFCreateRemoteDesktopPlugin!(util.toPointer(ppPlugin));
}

export function CreateNamedPropertyStore(
  ppStore: Deno.PointerValue | Uint8Array /* ptr */,
): Deno.PointerValue /* Windows.Win32.Foundation.HRESULT */ {
  return libMF_dll.CreateNamedPropertyStore!(util.toPointer(ppStore));
}

export function MFCreateSampleCopierMFT(
  ppCopierMFT: Deno.PointerValue | Uint8Array /* ptr */,
): Deno.PointerValue /* Windows.Win32.Foundation.HRESULT */ {
  return libMF_dll.MFCreateSampleCopierMFT!(util.toPointer(ppCopierMFT));
}

export function MFCreateTranscodeProfile(
  ppTranscodeProfile: Deno.PointerValue | Uint8Array /* ptr */,
): Deno.PointerValue /* Windows.Win32.Foundation.HRESULT */ {
  return libMF_dll.MFCreateTranscodeProfile!(util.toPointer(ppTranscodeProfile));
}

export function MFCreateTranscodeTopology(
  pSrc: Uint8Array | Deno.PointerValue /* Windows.Win32.Media.MediaFoundation.IMFMediaSource */,
  pwszOutputFilePath: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  pProfile: Uint8Array | Deno.PointerValue /* Windows.Win32.Media.MediaFoundation.IMFTranscodeProfile */,
  ppTranscodeTopo: Deno.PointerValue | Uint8Array /* ptr */,
): Deno.PointerValue /* Windows.Win32.Foundation.HRESULT */ {
  return libMF_dll.MFCreateTranscodeTopology!(util.toPointer(pSrc), util.pwstrToFfi(pwszOutputFilePath), util.toPointer(pProfile), util.toPointer(ppTranscodeTopo));
}

export function MFCreateTranscodeTopologyFromByteStream(
  pSrc: Uint8Array | Deno.PointerValue /* Windows.Win32.Media.MediaFoundation.IMFMediaSource */,
  pOutputStream: Uint8Array | Deno.PointerValue /* Windows.Win32.Media.MediaFoundation.IMFByteStream */,
  pProfile: Uint8Array | Deno.PointerValue /* Windows.Win32.Media.MediaFoundation.IMFTranscodeProfile */,
  ppTranscodeTopo: Deno.PointerValue | Uint8Array /* ptr */,
): Deno.PointerValue /* Windows.Win32.Foundation.HRESULT */ {
  return libMF_dll.MFCreateTranscodeTopologyFromByteStream!(util.toPointer(pSrc), util.toPointer(pOutputStream), util.toPointer(pProfile), util.toPointer(ppTranscodeTopo));
}

export function MFTranscodeGetAudioOutputAvailableTypes(
  guidSubType: Deno.PointerValue | Uint8Array /* ptr */,
  dwMFTFlags: number /* u32 */,
  pCodecConfig: Uint8Array | Deno.PointerValue /* Windows.Win32.Media.MediaFoundation.IMFAttributes */,
  ppAvailableTypes: Deno.PointerValue | Uint8Array /* ptr */,
): Deno.PointerValue /* Windows.Win32.Foundation.HRESULT */ {
  return libMF_dll.MFTranscodeGetAudioOutputAvailableTypes!(util.toPointer(guidSubType), dwMFTFlags, util.toPointer(pCodecConfig), util.toPointer(ppAvailableTypes));
}

export function MFCreateTranscodeSinkActivate(
  ppActivate: Deno.PointerValue | Uint8Array /* ptr */,
): Deno.PointerValue /* Windows.Win32.Foundation.HRESULT */ {
  return libMF_dll.MFCreateTranscodeSinkActivate!(util.toPointer(ppActivate));
}

export function MFCreateTrackedSample(
  ppMFSample: Deno.PointerValue | Uint8Array /* ptr */,
): Deno.PointerValue /* Windows.Win32.Foundation.HRESULT */ {
  return libMFPlat_dll.MFCreateTrackedSample!(util.toPointer(ppMFSample));
}

export function MFCreateMFByteStreamOnStream(
  pStream: Uint8Array | Deno.PointerValue /* Windows.Win32.System.Com.IStream */,
  ppByteStream: Deno.PointerValue | Uint8Array /* ptr */,
): Deno.PointerValue /* Windows.Win32.Foundation.HRESULT */ {
  return libMFPlat_dll.MFCreateMFByteStreamOnStream!(util.toPointer(pStream), util.toPointer(ppByteStream));
}

export function MFCreateStreamOnMFByteStream(
  pByteStream: Uint8Array | Deno.PointerValue /* Windows.Win32.Media.MediaFoundation.IMFByteStream */,
  ppStream: Deno.PointerValue | Uint8Array /* ptr */,
): Deno.PointerValue /* Windows.Win32.Foundation.HRESULT */ {
  return libMFPlat_dll.MFCreateStreamOnMFByteStream!(util.toPointer(pByteStream), util.toPointer(ppStream));
}

export function MFCreateMFByteStreamOnStreamEx(
  punkStream: Uint8Array | Deno.PointerValue /* Windows.Win32.System.Com.IUnknown */,
  ppByteStream: Deno.PointerValue | Uint8Array /* ptr */,
): Deno.PointerValue /* Windows.Win32.Foundation.HRESULT */ {
  return libMFPlat_dll.MFCreateMFByteStreamOnStreamEx!(util.toPointer(punkStream), util.toPointer(ppByteStream));
}

export function MFCreateStreamOnMFByteStreamEx(
  pByteStream: Uint8Array | Deno.PointerValue /* Windows.Win32.Media.MediaFoundation.IMFByteStream */,
  riid: Deno.PointerValue | Uint8Array /* ptr */,
  ppv: Deno.PointerValue | Uint8Array /* ptr */,
): Deno.PointerValue /* Windows.Win32.Foundation.HRESULT */ {
  return libMFPlat_dll.MFCreateStreamOnMFByteStreamEx!(util.toPointer(pByteStream), util.toPointer(riid), util.toPointer(ppv));
}

export function MFCreateMediaTypeFromProperties(
  punkStream: Uint8Array | Deno.PointerValue /* Windows.Win32.System.Com.IUnknown */,
  ppMediaType: Deno.PointerValue | Uint8Array /* ptr */,
): Deno.PointerValue /* Windows.Win32.Foundation.HRESULT */ {
  return libMFPlat_dll.MFCreateMediaTypeFromProperties!(util.toPointer(punkStream), util.toPointer(ppMediaType));
}

export function MFCreatePropertiesFromMediaType(
  pMediaType: Uint8Array | Deno.PointerValue /* Windows.Win32.Media.MediaFoundation.IMFMediaType */,
  riid: Deno.PointerValue | Uint8Array /* ptr */,
  ppv: Deno.PointerValue | Uint8Array /* ptr */,
): Deno.PointerValue /* Windows.Win32.Foundation.HRESULT */ {
  return libMFPlat_dll.MFCreatePropertiesFromMediaType!(util.toPointer(pMediaType), util.toPointer(riid), util.toPointer(ppv));
}

export function MFEnumDeviceSources(
  pAttributes: Uint8Array | Deno.PointerValue /* Windows.Win32.Media.MediaFoundation.IMFAttributes */,
  pppSourceActivate: Deno.PointerValue | Uint8Array /* ptr */,
  pcSourceActivate: Deno.PointerValue | Uint8Array /* ptr */,
): Deno.PointerValue /* Windows.Win32.Foundation.HRESULT */ {
  return libMF_dll.MFEnumDeviceSources!(util.toPointer(pAttributes), util.toPointer(pppSourceActivate), util.toPointer(pcSourceActivate));
}

export function MFCreateDeviceSource(
  pAttributes: Uint8Array | Deno.PointerValue /* Windows.Win32.Media.MediaFoundation.IMFAttributes */,
  ppSource: Deno.PointerValue | Uint8Array /* ptr */,
): Deno.PointerValue /* Windows.Win32.Foundation.HRESULT */ {
  return libMF_dll.MFCreateDeviceSource!(util.toPointer(pAttributes), util.toPointer(ppSource));
}

export function MFCreateDeviceSourceActivate(
  pAttributes: Uint8Array | Deno.PointerValue /* Windows.Win32.Media.MediaFoundation.IMFAttributes */,
  ppActivate: Deno.PointerValue | Uint8Array /* ptr */,
): Deno.PointerValue /* Windows.Win32.Foundation.HRESULT */ {
  return libMF_dll.MFCreateDeviceSourceActivate!(util.toPointer(pAttributes), util.toPointer(ppActivate));
}

export function MFCreateProtectedEnvironmentAccess(
  ppAccess: Deno.PointerValue | Uint8Array /* ptr */,
): Deno.PointerValue /* Windows.Win32.Foundation.HRESULT */ {
  return libMF_dll.MFCreateProtectedEnvironmentAccess!(util.toPointer(ppAccess));
}

export function MFLoadSignedLibrary(
  pszName: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  ppLib: Deno.PointerValue | Uint8Array /* ptr */,
): Deno.PointerValue /* Windows.Win32.Foundation.HRESULT */ {
  return libMF_dll.MFLoadSignedLibrary!(util.pwstrToFfi(pszName), util.toPointer(ppLib));
}

export function MFGetSystemId(
  ppId: Deno.PointerValue | Uint8Array /* ptr */,
): Deno.PointerValue /* Windows.Win32.Foundation.HRESULT */ {
  return libMF_dll.MFGetSystemId!(util.toPointer(ppId));
}

export function MFGetLocalId(
  verifier: Deno.PointerValue | Uint8Array /* ptr */,
  size: number /* u32 */,
  id: Deno.PointerValue | Uint8Array /* ptr */,
): Deno.PointerValue /* Windows.Win32.Foundation.HRESULT */ {
  return libMF_dll.MFGetLocalId!(util.toPointer(verifier), size, util.toPointer(id));
}

export function MFCreateContentProtectionDevice(
  ProtectionSystemId: Deno.PointerValue | Uint8Array /* ptr */,
  ContentProtectionDevice: Deno.PointerValue | Uint8Array /* ptr */,
): Deno.PointerValue /* Windows.Win32.Foundation.HRESULT */ {
  return libMFPlat_dll.MFCreateContentProtectionDevice!(util.toPointer(ProtectionSystemId), util.toPointer(ContentProtectionDevice));
}

export function MFIsContentProtectionDeviceSupported(
  ProtectionSystemId: Deno.PointerValue | Uint8Array /* ptr */,
  isSupported: Deno.PointerValue | Uint8Array /* ptr */,
): Deno.PointerValue /* Windows.Win32.Foundation.HRESULT */ {
  return libMFPlat_dll.MFIsContentProtectionDeviceSupported!(util.toPointer(ProtectionSystemId), util.toPointer(isSupported));
}

export function MFCreateContentDecryptorContext(
  guidMediaProtectionSystemId: Deno.PointerValue | Uint8Array /* ptr */,
  pD3DManager: Uint8Array | Deno.PointerValue /* Windows.Win32.Media.MediaFoundation.IMFDXGIDeviceManager */,
  pContentProtectionDevice: Uint8Array | Deno.PointerValue /* Windows.Win32.Media.MediaFoundation.IMFContentProtectionDevice */,
  ppContentDecryptorContext: Deno.PointerValue | Uint8Array /* ptr */,
): Deno.PointerValue /* Windows.Win32.Foundation.HRESULT */ {
  return libMFPlat_dll.MFCreateContentDecryptorContext!(util.toPointer(guidMediaProtectionSystemId), util.toPointer(pD3DManager), util.toPointer(pContentProtectionDevice), util.toPointer(ppContentDecryptorContext));
}

export function MFCreateSensorGroup(
  SensorGroupSymbolicLink: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  ppSensorGroup: Deno.PointerValue | Uint8Array /* ptr */,
): Deno.PointerValue /* Windows.Win32.Foundation.HRESULT */ {
  return libMFSENSORGROUP_dll.MFCreateSensorGroup!(util.pwstrToFfi(SensorGroupSymbolicLink), util.toPointer(ppSensorGroup));
}

export function MFCreateSensorStream(
  StreamId: number /* u32 */,
  pAttributes: Uint8Array | Deno.PointerValue /* Windows.Win32.Media.MediaFoundation.IMFAttributes */,
  pMediaTypeCollection: Uint8Array | Deno.PointerValue /* Windows.Win32.Media.MediaFoundation.IMFCollection */,
  ppStream: Deno.PointerValue | Uint8Array /* ptr */,
): Deno.PointerValue /* Windows.Win32.Foundation.HRESULT */ {
  return libMFSENSORGROUP_dll.MFCreateSensorStream!(StreamId, util.toPointer(pAttributes), util.toPointer(pMediaTypeCollection), util.toPointer(ppStream));
}

export function MFCreateSensorProfile(
  ProfileType: Deno.PointerValue | Uint8Array /* ptr */,
  ProfileIndex: number /* u32 */,
  Constraints: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  ppProfile: Deno.PointerValue | Uint8Array /* ptr */,
): Deno.PointerValue /* Windows.Win32.Foundation.HRESULT */ {
  return libMFSENSORGROUP_dll.MFCreateSensorProfile!(util.toPointer(ProfileType), ProfileIndex, util.pwstrToFfi(Constraints), util.toPointer(ppProfile));
}

export function MFCreateSensorProfileCollection(
  ppSensorProfile: Deno.PointerValue | Uint8Array /* ptr */,
): Deno.PointerValue /* Windows.Win32.Foundation.HRESULT */ {
  return libMFSENSORGROUP_dll.MFCreateSensorProfileCollection!(util.toPointer(ppSensorProfile));
}

export function MFCreateSensorActivityMonitor(
  pCallback: Uint8Array | Deno.PointerValue /* Windows.Win32.Media.MediaFoundation.IMFSensorActivitiesReportCallback */,
  ppActivityMonitor: Deno.PointerValue | Uint8Array /* ptr */,
): Deno.PointerValue /* Windows.Win32.Foundation.HRESULT */ {
  return libMFSENSORGROUP_dll.MFCreateSensorActivityMonitor!(util.toPointer(pCallback), util.toPointer(ppActivityMonitor));
}

export function MFCreateExtendedCameraIntrinsics(
  ppExtendedCameraIntrinsics: Deno.PointerValue | Uint8Array /* ptr */,
): Deno.PointerValue /* Windows.Win32.Foundation.HRESULT */ {
  return libMFCORE_dll.MFCreateExtendedCameraIntrinsics!(util.toPointer(ppExtendedCameraIntrinsics));
}

export function MFCreateExtendedCameraIntrinsicModel(
  distortionModelType: MFCameraIntrinsic_DistortionModelType /* Windows.Win32.Media.MediaFoundation.MFCameraIntrinsic_DistortionModelType */,
  ppExtendedCameraIntrinsicModel: Deno.PointerValue | Uint8Array /* ptr */,
): Deno.PointerValue /* Windows.Win32.Foundation.HRESULT */ {
  return libMFCORE_dll.MFCreateExtendedCameraIntrinsicModel!(distortionModelType, util.toPointer(ppExtendedCameraIntrinsicModel));
}

export function MFCreateRelativePanelWatcher(
  videoDeviceId: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  displayMonitorDeviceId: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  ppRelativePanelWatcher: Deno.PointerValue | Uint8Array /* ptr */,
): Deno.PointerValue /* Windows.Win32.Foundation.HRESULT */ {
  return libMFSENSORGROUP_dll.MFCreateRelativePanelWatcher!(util.pwstrToFfi(videoDeviceId), util.pwstrToFfi(displayMonitorDeviceId), util.toPointer(ppRelativePanelWatcher));
}

export function MFCreateCameraOcclusionStateMonitor(
  symbolicLink: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  callback: Uint8Array | Deno.PointerValue /* Windows.Win32.Media.MediaFoundation.IMFCameraOcclusionStateReportCallback */,
  occlusionStateMonitor: Deno.PointerValue | Uint8Array /* ptr */,
): Deno.PointerValue /* Windows.Win32.Foundation.HRESULT */ {
  return libMFSENSORGROUP_dll.MFCreateCameraOcclusionStateMonitor!(util.pwstrToFfi(symbolicLink), util.toPointer(callback), util.toPointer(occlusionStateMonitor));
}

export function MFCreateASFContentInfo(
  ppIContentInfo: Deno.PointerValue | Uint8Array /* ptr */,
): Deno.PointerValue /* Windows.Win32.Foundation.HRESULT */ {
  return libMF_dll.MFCreateASFContentInfo!(util.toPointer(ppIContentInfo));
}

export function MFCreateASFIndexer(
  ppIIndexer: Deno.PointerValue | Uint8Array /* ptr */,
): Deno.PointerValue /* Windows.Win32.Foundation.HRESULT */ {
  return libMF_dll.MFCreateASFIndexer!(util.toPointer(ppIIndexer));
}

export function MFCreateASFIndexerByteStream(
  pIContentByteStream: Uint8Array | Deno.PointerValue /* Windows.Win32.Media.MediaFoundation.IMFByteStream */,
  cbIndexStartOffset: bigint | number /* u64 */,
  pIIndexByteStream: Deno.PointerValue | Uint8Array /* ptr */,
): Deno.PointerValue /* Windows.Win32.Foundation.HRESULT */ {
  return libMF_dll.MFCreateASFIndexerByteStream!(util.toPointer(pIContentByteStream), cbIndexStartOffset, util.toPointer(pIIndexByteStream));
}

export function MFCreateASFSplitter(
  ppISplitter: Deno.PointerValue | Uint8Array /* ptr */,
): Deno.PointerValue /* Windows.Win32.Foundation.HRESULT */ {
  return libMF_dll.MFCreateASFSplitter!(util.toPointer(ppISplitter));
}

export function MFCreateASFProfile(
  ppIProfile: Deno.PointerValue | Uint8Array /* ptr */,
): Deno.PointerValue /* Windows.Win32.Foundation.HRESULT */ {
  return libMF_dll.MFCreateASFProfile!(util.toPointer(ppIProfile));
}

export function MFCreateASFProfileFromPresentationDescriptor(
  pIPD: Uint8Array | Deno.PointerValue /* Windows.Win32.Media.MediaFoundation.IMFPresentationDescriptor */,
  ppIProfile: Deno.PointerValue | Uint8Array /* ptr */,
): Deno.PointerValue /* Windows.Win32.Foundation.HRESULT */ {
  return libMF_dll.MFCreateASFProfileFromPresentationDescriptor!(util.toPointer(pIPD), util.toPointer(ppIProfile));
}

export function MFCreatePresentationDescriptorFromASFProfile(
  pIProfile: Uint8Array | Deno.PointerValue /* Windows.Win32.Media.MediaFoundation.IMFASFProfile */,
  ppIPD: Deno.PointerValue | Uint8Array /* ptr */,
): Deno.PointerValue /* Windows.Win32.Foundation.HRESULT */ {
  return libMF_dll.MFCreatePresentationDescriptorFromASFProfile!(util.toPointer(pIProfile), util.toPointer(ppIPD));
}

export function MFCreateASFMultiplexer(
  ppIMultiplexer: Deno.PointerValue | Uint8Array /* ptr */,
): Deno.PointerValue /* Windows.Win32.Foundation.HRESULT */ {
  return libMF_dll.MFCreateASFMultiplexer!(util.toPointer(ppIMultiplexer));
}

export function MFCreateASFStreamSelector(
  pIASFProfile: Uint8Array | Deno.PointerValue /* Windows.Win32.Media.MediaFoundation.IMFASFProfile */,
  ppSelector: Deno.PointerValue | Uint8Array /* ptr */,
): Deno.PointerValue /* Windows.Win32.Foundation.HRESULT */ {
  return libMF_dll.MFCreateASFStreamSelector!(util.toPointer(pIASFProfile), util.toPointer(ppSelector));
}

export function MFCreateASFMediaSink(
  pIByteStream: Uint8Array | Deno.PointerValue /* Windows.Win32.Media.MediaFoundation.IMFByteStream */,
  ppIMediaSink: Deno.PointerValue | Uint8Array /* ptr */,
): Deno.PointerValue /* Windows.Win32.Foundation.HRESULT */ {
  return libMF_dll.MFCreateASFMediaSink!(util.toPointer(pIByteStream), util.toPointer(ppIMediaSink));
}

export function MFCreateASFMediaSinkActivate(
  pwszFileName: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  pContentInfo: Uint8Array | Deno.PointerValue /* Windows.Win32.Media.MediaFoundation.IMFASFContentInfo */,
  ppIActivate: Deno.PointerValue | Uint8Array /* ptr */,
): Deno.PointerValue /* Windows.Win32.Foundation.HRESULT */ {
  return libMF_dll.MFCreateASFMediaSinkActivate!(util.pwstrToFfi(pwszFileName), util.toPointer(pContentInfo), util.toPointer(ppIActivate));
}

export function MFCreateWMVEncoderActivate(
  pMediaType: Uint8Array | Deno.PointerValue /* Windows.Win32.Media.MediaFoundation.IMFMediaType */,
  pEncodingConfigurationProperties: Uint8Array | Deno.PointerValue /* Windows.Win32.UI.Shell.PropertiesSystem.IPropertyStore */,
  ppActivate: Deno.PointerValue | Uint8Array /* ptr */,
): Deno.PointerValue /* Windows.Win32.Foundation.HRESULT */ {
  return libMF_dll.MFCreateWMVEncoderActivate!(util.toPointer(pMediaType), util.toPointer(pEncodingConfigurationProperties), util.toPointer(ppActivate));
}

export function MFCreateWMAEncoderActivate(
  pMediaType: Uint8Array | Deno.PointerValue /* Windows.Win32.Media.MediaFoundation.IMFMediaType */,
  pEncodingConfigurationProperties: Uint8Array | Deno.PointerValue /* Windows.Win32.UI.Shell.PropertiesSystem.IPropertyStore */,
  ppActivate: Deno.PointerValue | Uint8Array /* ptr */,
): Deno.PointerValue /* Windows.Win32.Foundation.HRESULT */ {
  return libMF_dll.MFCreateWMAEncoderActivate!(util.toPointer(pMediaType), util.toPointer(pEncodingConfigurationProperties), util.toPointer(ppActivate));
}

export function MFCreateASFStreamingMediaSink(
  pIByteStream: Uint8Array | Deno.PointerValue /* Windows.Win32.Media.MediaFoundation.IMFByteStream */,
  ppIMediaSink: Deno.PointerValue | Uint8Array /* ptr */,
): Deno.PointerValue /* Windows.Win32.Foundation.HRESULT */ {
  return libMF_dll.MFCreateASFStreamingMediaSink!(util.toPointer(pIByteStream), util.toPointer(ppIMediaSink));
}

export function MFCreateASFStreamingMediaSinkActivate(
  pByteStreamActivate: Uint8Array | Deno.PointerValue /* Windows.Win32.Media.MediaFoundation.IMFActivate */,
  pContentInfo: Uint8Array | Deno.PointerValue /* Windows.Win32.Media.MediaFoundation.IMFASFContentInfo */,
  ppIActivate: Deno.PointerValue | Uint8Array /* ptr */,
): Deno.PointerValue /* Windows.Win32.Foundation.HRESULT */ {
  return libMF_dll.MFCreateASFStreamingMediaSinkActivate!(util.toPointer(pByteStreamActivate), util.toPointer(pContentInfo), util.toPointer(ppIActivate));
}

export function MFCreateD3D12SynchronizationObject(
  pDevice: Uint8Array | Deno.PointerValue /* Windows.Win32.Graphics.Direct3D12.ID3D12Device */,
  riid: Deno.PointerValue | Uint8Array /* ptr */,
  ppvSyncObject: Deno.PointerValue | Uint8Array /* ptr */,
): Deno.PointerValue /* Windows.Win32.Foundation.HRESULT */ {
  return libMFPlat_dll.MFCreateD3D12SynchronizationObject!(util.toPointer(pDevice), util.toPointer(riid), util.toPointer(ppvSyncObject));
}

export function MFStartup(
  Version: number /* u32 */,
  dwFlags: number /* u32 */,
): Deno.PointerValue /* Windows.Win32.Foundation.HRESULT */ {
  return libMFPlat_dll.MFStartup!(Version, dwFlags);
}

export function MFShutdown(): Deno.PointerValue /* Windows.Win32.Foundation.HRESULT */ {
  return libMFPlat_dll.MFShutdown!();
}

export function MFLockPlatform(): Deno.PointerValue /* Windows.Win32.Foundation.HRESULT */ {
  return libMFPlat_dll.MFLockPlatform!();
}

export function MFUnlockPlatform(): Deno.PointerValue /* Windows.Win32.Foundation.HRESULT */ {
  return libMFPlat_dll.MFUnlockPlatform!();
}

export function MFPutWorkItem(
  dwQueue: number /* u32 */,
  pCallback: Uint8Array | Deno.PointerValue /* Windows.Win32.Media.MediaFoundation.IMFAsyncCallback */,
  pState: Uint8Array | Deno.PointerValue /* Windows.Win32.System.Com.IUnknown */,
): Deno.PointerValue /* Windows.Win32.Foundation.HRESULT */ {
  return libMFPlat_dll.MFPutWorkItem!(dwQueue, util.toPointer(pCallback), util.toPointer(pState));
}

export function MFPutWorkItem2(
  dwQueue: number /* u32 */,
  Priority: number /* i32 */,
  pCallback: Uint8Array | Deno.PointerValue /* Windows.Win32.Media.MediaFoundation.IMFAsyncCallback */,
  pState: Uint8Array | Deno.PointerValue /* Windows.Win32.System.Com.IUnknown */,
): Deno.PointerValue /* Windows.Win32.Foundation.HRESULT */ {
  return libMFPlat_dll.MFPutWorkItem2!(dwQueue, Priority, util.toPointer(pCallback), util.toPointer(pState));
}

export function MFPutWorkItemEx(
  dwQueue: number /* u32 */,
  pResult: Uint8Array | Deno.PointerValue /* Windows.Win32.Media.MediaFoundation.IMFAsyncResult */,
): Deno.PointerValue /* Windows.Win32.Foundation.HRESULT */ {
  return libMFPlat_dll.MFPutWorkItemEx!(dwQueue, util.toPointer(pResult));
}

export function MFPutWorkItemEx2(
  dwQueue: number /* u32 */,
  Priority: number /* i32 */,
  pResult: Uint8Array | Deno.PointerValue /* Windows.Win32.Media.MediaFoundation.IMFAsyncResult */,
): Deno.PointerValue /* Windows.Win32.Foundation.HRESULT */ {
  return libMFPlat_dll.MFPutWorkItemEx2!(dwQueue, Priority, util.toPointer(pResult));
}

export function MFPutWaitingWorkItem(
  hEvent: Uint8Array | Deno.PointerValue /* Windows.Win32.Foundation.HANDLE */,
  Priority: number /* i32 */,
  pResult: Uint8Array | Deno.PointerValue /* Windows.Win32.Media.MediaFoundation.IMFAsyncResult */,
  pKey: Deno.PointerValue | Uint8Array /* ptr */,
): Deno.PointerValue /* Windows.Win32.Foundation.HRESULT */ {
  return libMFPlat_dll.MFPutWaitingWorkItem!(util.toPointer(hEvent), Priority, util.toPointer(pResult), util.toPointer(pKey));
}

export function MFAllocateSerialWorkQueue(
  dwWorkQueue: number /* u32 */,
  pdwWorkQueue: Deno.PointerValue | Uint8Array /* ptr */,
): Deno.PointerValue /* Windows.Win32.Foundation.HRESULT */ {
  return libMFPlat_dll.MFAllocateSerialWorkQueue!(dwWorkQueue, util.toPointer(pdwWorkQueue));
}

export function MFScheduleWorkItemEx(
  pResult: Uint8Array | Deno.PointerValue /* Windows.Win32.Media.MediaFoundation.IMFAsyncResult */,
  Timeout: bigint | number /* i64 */,
  pKey: Deno.PointerValue | Uint8Array /* ptr */,
): Deno.PointerValue /* Windows.Win32.Foundation.HRESULT */ {
  return libMFPlat_dll.MFScheduleWorkItemEx!(util.toPointer(pResult), Timeout, util.toPointer(pKey));
}

export function MFScheduleWorkItem(
  pCallback: Uint8Array | Deno.PointerValue /* Windows.Win32.Media.MediaFoundation.IMFAsyncCallback */,
  pState: Uint8Array | Deno.PointerValue /* Windows.Win32.System.Com.IUnknown */,
  Timeout: bigint | number /* i64 */,
  pKey: Deno.PointerValue | Uint8Array /* ptr */,
): Deno.PointerValue /* Windows.Win32.Foundation.HRESULT */ {
  return libMFPlat_dll.MFScheduleWorkItem!(util.toPointer(pCallback), util.toPointer(pState), Timeout, util.toPointer(pKey));
}

export function MFCancelWorkItem(
  Key: bigint | number /* u64 */,
): Deno.PointerValue /* Windows.Win32.Foundation.HRESULT */ {
  return libMFPlat_dll.MFCancelWorkItem!(Key);
}

export function MFGetTimerPeriodicity(
  Periodicity: Deno.PointerValue | Uint8Array /* ptr */,
): Deno.PointerValue /* Windows.Win32.Foundation.HRESULT */ {
  return libMFPlat_dll.MFGetTimerPeriodicity!(util.toPointer(Periodicity));
}

export function MFAddPeriodicCallback(
  Callback: Uint8Array | Deno.PointerValue /* Windows.Win32.Media.MediaFoundation.MFPERIODICCALLBACK */,
  pContext: Uint8Array | Deno.PointerValue /* Windows.Win32.System.Com.IUnknown */,
  pdwKey: Deno.PointerValue | Uint8Array /* ptr */,
): Deno.PointerValue /* Windows.Win32.Foundation.HRESULT */ {
  return libMFPlat_dll.MFAddPeriodicCallback!(util.toPointer(Callback), util.toPointer(pContext), util.toPointer(pdwKey));
}

export function MFRemovePeriodicCallback(
  dwKey: number /* u32 */,
): Deno.PointerValue /* Windows.Win32.Foundation.HRESULT */ {
  return libMFPlat_dll.MFRemovePeriodicCallback!(dwKey);
}

export function MFAllocateWorkQueueEx(
  WorkQueueType: MFASYNC_WORKQUEUE_TYPE /* Windows.Win32.Media.MediaFoundation.MFASYNC_WORKQUEUE_TYPE */,
  pdwWorkQueue: Deno.PointerValue | Uint8Array /* ptr */,
): Deno.PointerValue /* Windows.Win32.Foundation.HRESULT */ {
  return libMFPlat_dll.MFAllocateWorkQueueEx!(WorkQueueType, util.toPointer(pdwWorkQueue));
}

export function MFAllocateWorkQueue(
  pdwWorkQueue: Deno.PointerValue | Uint8Array /* ptr */,
): Deno.PointerValue /* Windows.Win32.Foundation.HRESULT */ {
  return libMFPlat_dll.MFAllocateWorkQueue!(util.toPointer(pdwWorkQueue));
}

export function MFLockWorkQueue(
  dwWorkQueue: number /* u32 */,
): Deno.PointerValue /* Windows.Win32.Foundation.HRESULT */ {
  return libMFPlat_dll.MFLockWorkQueue!(dwWorkQueue);
}

export function MFUnlockWorkQueue(
  dwWorkQueue: number /* u32 */,
): Deno.PointerValue /* Windows.Win32.Foundation.HRESULT */ {
  return libMFPlat_dll.MFUnlockWorkQueue!(dwWorkQueue);
}

export function MFBeginRegisterWorkQueueWithMMCSS(
  dwWorkQueueId: number /* u32 */,
  wszClass: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  dwTaskId: number /* u32 */,
  pDoneCallback: Uint8Array | Deno.PointerValue /* Windows.Win32.Media.MediaFoundation.IMFAsyncCallback */,
  pDoneState: Uint8Array | Deno.PointerValue /* Windows.Win32.System.Com.IUnknown */,
): Deno.PointerValue /* Windows.Win32.Foundation.HRESULT */ {
  return libMFPlat_dll.MFBeginRegisterWorkQueueWithMMCSS!(dwWorkQueueId, util.pwstrToFfi(wszClass), dwTaskId, util.toPointer(pDoneCallback), util.toPointer(pDoneState));
}

export function MFBeginRegisterWorkQueueWithMMCSSEx(
  dwWorkQueueId: number /* u32 */,
  wszClass: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  dwTaskId: number /* u32 */,
  lPriority: number /* i32 */,
  pDoneCallback: Uint8Array | Deno.PointerValue /* Windows.Win32.Media.MediaFoundation.IMFAsyncCallback */,
  pDoneState: Uint8Array | Deno.PointerValue /* Windows.Win32.System.Com.IUnknown */,
): Deno.PointerValue /* Windows.Win32.Foundation.HRESULT */ {
  return libMFPlat_dll.MFBeginRegisterWorkQueueWithMMCSSEx!(dwWorkQueueId, util.pwstrToFfi(wszClass), dwTaskId, lPriority, util.toPointer(pDoneCallback), util.toPointer(pDoneState));
}

export function MFEndRegisterWorkQueueWithMMCSS(
  pResult: Uint8Array | Deno.PointerValue /* Windows.Win32.Media.MediaFoundation.IMFAsyncResult */,
  pdwTaskId: Deno.PointerValue | Uint8Array /* ptr */,
): Deno.PointerValue /* Windows.Win32.Foundation.HRESULT */ {
  return libMFPlat_dll.MFEndRegisterWorkQueueWithMMCSS!(util.toPointer(pResult), util.toPointer(pdwTaskId));
}

export function MFBeginUnregisterWorkQueueWithMMCSS(
  dwWorkQueueId: number /* u32 */,
  pDoneCallback: Uint8Array | Deno.PointerValue /* Windows.Win32.Media.MediaFoundation.IMFAsyncCallback */,
  pDoneState: Uint8Array | Deno.PointerValue /* Windows.Win32.System.Com.IUnknown */,
): Deno.PointerValue /* Windows.Win32.Foundation.HRESULT */ {
  return libMFPlat_dll.MFBeginUnregisterWorkQueueWithMMCSS!(dwWorkQueueId, util.toPointer(pDoneCallback), util.toPointer(pDoneState));
}

export function MFEndUnregisterWorkQueueWithMMCSS(
  pResult: Uint8Array | Deno.PointerValue /* Windows.Win32.Media.MediaFoundation.IMFAsyncResult */,
): Deno.PointerValue /* Windows.Win32.Foundation.HRESULT */ {
  return libMFPlat_dll.MFEndUnregisterWorkQueueWithMMCSS!(util.toPointer(pResult));
}

export function MFGetWorkQueueMMCSSClass(
  dwWorkQueueId: number /* u32 */,
  pwszClass: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  pcchClass: Deno.PointerValue | Uint8Array /* ptr */,
): Deno.PointerValue /* Windows.Win32.Foundation.HRESULT */ {
  return libMFPlat_dll.MFGetWorkQueueMMCSSClass!(dwWorkQueueId, util.pwstrToFfi(pwszClass), util.toPointer(pcchClass));
}

export function MFGetWorkQueueMMCSSTaskId(
  dwWorkQueueId: number /* u32 */,
  pdwTaskId: Deno.PointerValue | Uint8Array /* ptr */,
): Deno.PointerValue /* Windows.Win32.Foundation.HRESULT */ {
  return libMFPlat_dll.MFGetWorkQueueMMCSSTaskId!(dwWorkQueueId, util.toPointer(pdwTaskId));
}

export function MFRegisterPlatformWithMMCSS(
  wszClass: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  pdwTaskId: Deno.PointerValue | Uint8Array /* ptr */,
  lPriority: number /* i32 */,
): Deno.PointerValue /* Windows.Win32.Foundation.HRESULT */ {
  return libMFPlat_dll.MFRegisterPlatformWithMMCSS!(util.pwstrToFfi(wszClass), util.toPointer(pdwTaskId), lPriority);
}

export function MFUnregisterPlatformFromMMCSS(): Deno.PointerValue /* Windows.Win32.Foundation.HRESULT */ {
  return libMFPlat_dll.MFUnregisterPlatformFromMMCSS!();
}

export function MFLockSharedWorkQueue(
  wszClass: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  BasePriority: number /* i32 */,
  pdwTaskId: Deno.PointerValue | Uint8Array /* ptr */,
  pID: Deno.PointerValue | Uint8Array /* ptr */,
): Deno.PointerValue /* Windows.Win32.Foundation.HRESULT */ {
  return libMFPlat_dll.MFLockSharedWorkQueue!(util.pwstrToFfi(wszClass), BasePriority, util.toPointer(pdwTaskId), util.toPointer(pID));
}

export function MFGetWorkQueueMMCSSPriority(
  dwWorkQueueId: number /* u32 */,
  lPriority: Deno.PointerValue | Uint8Array /* ptr */,
): Deno.PointerValue /* Windows.Win32.Foundation.HRESULT */ {
  return libMFPlat_dll.MFGetWorkQueueMMCSSPriority!(dwWorkQueueId, util.toPointer(lPriority));
}

export function MFCreateAsyncResult(
  punkObject: Uint8Array | Deno.PointerValue /* Windows.Win32.System.Com.IUnknown */,
  pCallback: Uint8Array | Deno.PointerValue /* Windows.Win32.Media.MediaFoundation.IMFAsyncCallback */,
  punkState: Uint8Array | Deno.PointerValue /* Windows.Win32.System.Com.IUnknown */,
  ppAsyncResult: Deno.PointerValue | Uint8Array /* ptr */,
): Deno.PointerValue /* Windows.Win32.Foundation.HRESULT */ {
  return libMFPlat_dll.MFCreateAsyncResult!(util.toPointer(punkObject), util.toPointer(pCallback), util.toPointer(punkState), util.toPointer(ppAsyncResult));
}

export function MFInvokeCallback(
  pAsyncResult: Uint8Array | Deno.PointerValue /* Windows.Win32.Media.MediaFoundation.IMFAsyncResult */,
): Deno.PointerValue /* Windows.Win32.Foundation.HRESULT */ {
  return libMFPlat_dll.MFInvokeCallback!(util.toPointer(pAsyncResult));
}

export function MFCreateFile(
  AccessMode: MF_FILE_ACCESSMODE /* Windows.Win32.Media.MediaFoundation.MF_FILE_ACCESSMODE */,
  OpenMode: MF_FILE_OPENMODE /* Windows.Win32.Media.MediaFoundation.MF_FILE_OPENMODE */,
  fFlags: MF_FILE_FLAGS /* Windows.Win32.Media.MediaFoundation.MF_FILE_FLAGS */,
  pwszFileURL: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  ppIByteStream: Deno.PointerValue | Uint8Array /* ptr */,
): Deno.PointerValue /* Windows.Win32.Foundation.HRESULT */ {
  return libMFPlat_dll.MFCreateFile!(AccessMode, OpenMode, fFlags, util.pwstrToFfi(pwszFileURL), util.toPointer(ppIByteStream));
}

export function MFCreateTempFile(
  AccessMode: MF_FILE_ACCESSMODE /* Windows.Win32.Media.MediaFoundation.MF_FILE_ACCESSMODE */,
  OpenMode: MF_FILE_OPENMODE /* Windows.Win32.Media.MediaFoundation.MF_FILE_OPENMODE */,
  fFlags: MF_FILE_FLAGS /* Windows.Win32.Media.MediaFoundation.MF_FILE_FLAGS */,
  ppIByteStream: Deno.PointerValue | Uint8Array /* ptr */,
): Deno.PointerValue /* Windows.Win32.Foundation.HRESULT */ {
  return libMFPlat_dll.MFCreateTempFile!(AccessMode, OpenMode, fFlags, util.toPointer(ppIByteStream));
}

export function MFBeginCreateFile(
  AccessMode: MF_FILE_ACCESSMODE /* Windows.Win32.Media.MediaFoundation.MF_FILE_ACCESSMODE */,
  OpenMode: MF_FILE_OPENMODE /* Windows.Win32.Media.MediaFoundation.MF_FILE_OPENMODE */,
  fFlags: MF_FILE_FLAGS /* Windows.Win32.Media.MediaFoundation.MF_FILE_FLAGS */,
  pwszFilePath: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  pCallback: Uint8Array | Deno.PointerValue /* Windows.Win32.Media.MediaFoundation.IMFAsyncCallback */,
  pState: Uint8Array | Deno.PointerValue /* Windows.Win32.System.Com.IUnknown */,
  ppCancelCookie: Deno.PointerValue | Uint8Array /* ptr */,
): Deno.PointerValue /* Windows.Win32.Foundation.HRESULT */ {
  return libMFPlat_dll.MFBeginCreateFile!(AccessMode, OpenMode, fFlags, util.pwstrToFfi(pwszFilePath), util.toPointer(pCallback), util.toPointer(pState), util.toPointer(ppCancelCookie));
}

export function MFEndCreateFile(
  pResult: Uint8Array | Deno.PointerValue /* Windows.Win32.Media.MediaFoundation.IMFAsyncResult */,
  ppFile: Deno.PointerValue | Uint8Array /* ptr */,
): Deno.PointerValue /* Windows.Win32.Foundation.HRESULT */ {
  return libMFPlat_dll.MFEndCreateFile!(util.toPointer(pResult), util.toPointer(ppFile));
}

export function MFCancelCreateFile(
  pCancelCookie: Uint8Array | Deno.PointerValue /* Windows.Win32.System.Com.IUnknown */,
): Deno.PointerValue /* Windows.Win32.Foundation.HRESULT */ {
  return libMFPlat_dll.MFCancelCreateFile!(util.toPointer(pCancelCookie));
}

export function MFCreateMemoryBuffer(
  cbMaxLength: number /* u32 */,
  ppBuffer: Deno.PointerValue | Uint8Array /* ptr */,
): Deno.PointerValue /* Windows.Win32.Foundation.HRESULT */ {
  return libMFPlat_dll.MFCreateMemoryBuffer!(cbMaxLength, util.toPointer(ppBuffer));
}

export function MFCreateMediaBufferWrapper(
  pBuffer: Uint8Array | Deno.PointerValue /* Windows.Win32.Media.MediaFoundation.IMFMediaBuffer */,
  cbOffset: number /* u32 */,
  dwLength: number /* u32 */,
  ppBuffer: Deno.PointerValue | Uint8Array /* ptr */,
): Deno.PointerValue /* Windows.Win32.Foundation.HRESULT */ {
  return libMFPlat_dll.MFCreateMediaBufferWrapper!(util.toPointer(pBuffer), cbOffset, dwLength, util.toPointer(ppBuffer));
}

export function MFCreateLegacyMediaBufferOnMFMediaBuffer(
  pSample: Uint8Array | Deno.PointerValue /* Windows.Win32.Media.MediaFoundation.IMFSample */,
  pMFMediaBuffer: Uint8Array | Deno.PointerValue /* Windows.Win32.Media.MediaFoundation.IMFMediaBuffer */,
  cbOffset: number /* u32 */,
  ppMediaBuffer: Deno.PointerValue | Uint8Array /* ptr */,
): Deno.PointerValue /* Windows.Win32.Foundation.HRESULT */ {
  return libMFPlat_dll.MFCreateLegacyMediaBufferOnMFMediaBuffer!(util.toPointer(pSample), util.toPointer(pMFMediaBuffer), cbOffset, util.toPointer(ppMediaBuffer));
}

export function MFMapDX9FormatToDXGIFormat(
  dx9: number /* u32 */,
): DXGI_FORMAT /* Windows.Win32.Graphics.Dxgi.Common.DXGI_FORMAT */ {
  return libMFPlat_dll.MFMapDX9FormatToDXGIFormat!(dx9);
}

export function MFMapDXGIFormatToDX9Format(
  dx11: DXGI_FORMAT /* Windows.Win32.Graphics.Dxgi.Common.DXGI_FORMAT */,
): number /* u32 */ {
  return libMFPlat_dll.MFMapDXGIFormatToDX9Format!(dx11);
}

export function MFLockDXGIDeviceManager(
  pResetToken: Deno.PointerValue | Uint8Array /* ptr */,
  ppManager: Deno.PointerValue | Uint8Array /* ptr */,
): Deno.PointerValue /* Windows.Win32.Foundation.HRESULT */ {
  return libMFPlat_dll.MFLockDXGIDeviceManager!(util.toPointer(pResetToken), util.toPointer(ppManager));
}

export function MFUnlockDXGIDeviceManager(): Deno.PointerValue /* Windows.Win32.Foundation.HRESULT */ {
  return libMFPlat_dll.MFUnlockDXGIDeviceManager!();
}

export function MFCreateDXSurfaceBuffer(
  riid: Deno.PointerValue | Uint8Array /* ptr */,
  punkSurface: Uint8Array | Deno.PointerValue /* Windows.Win32.System.Com.IUnknown */,
  fBottomUpWhenLinear: boolean /* Windows.Win32.Foundation.BOOL */,
  ppBuffer: Deno.PointerValue | Uint8Array /* ptr */,
): Deno.PointerValue /* Windows.Win32.Foundation.HRESULT */ {
  return libMFPlat_dll.MFCreateDXSurfaceBuffer!(util.toPointer(riid), util.toPointer(punkSurface), util.boolToFfi(fBottomUpWhenLinear), util.toPointer(ppBuffer));
}

export function MFCreateWICBitmapBuffer(
  riid: Deno.PointerValue | Uint8Array /* ptr */,
  punkSurface: Uint8Array | Deno.PointerValue /* Windows.Win32.System.Com.IUnknown */,
  ppBuffer: Deno.PointerValue | Uint8Array /* ptr */,
): Deno.PointerValue /* Windows.Win32.Foundation.HRESULT */ {
  return libMFPlat_dll.MFCreateWICBitmapBuffer!(util.toPointer(riid), util.toPointer(punkSurface), util.toPointer(ppBuffer));
}

export function MFCreateDXGISurfaceBuffer(
  riid: Deno.PointerValue | Uint8Array /* ptr */,
  punkSurface: Uint8Array | Deno.PointerValue /* Windows.Win32.System.Com.IUnknown */,
  uSubresourceIndex: number /* u32 */,
  fBottomUpWhenLinear: boolean /* Windows.Win32.Foundation.BOOL */,
  ppBuffer: Deno.PointerValue | Uint8Array /* ptr */,
): Deno.PointerValue /* Windows.Win32.Foundation.HRESULT */ {
  return libMFPlat_dll.MFCreateDXGISurfaceBuffer!(util.toPointer(riid), util.toPointer(punkSurface), uSubresourceIndex, util.boolToFfi(fBottomUpWhenLinear), util.toPointer(ppBuffer));
}

export function MFCreateVideoSampleAllocatorEx(
  riid: Deno.PointerValue | Uint8Array /* ptr */,
  ppSampleAllocator: Deno.PointerValue | Uint8Array /* ptr */,
): Deno.PointerValue /* Windows.Win32.Foundation.HRESULT */ {
  return libMFPlat_dll.MFCreateVideoSampleAllocatorEx!(util.toPointer(riid), util.toPointer(ppSampleAllocator));
}

export function MFCreateDXGIDeviceManager(
  resetToken: Deno.PointerValue | Uint8Array /* ptr */,
  ppDeviceManager: Deno.PointerValue | Uint8Array /* ptr */,
): Deno.PointerValue /* Windows.Win32.Foundation.HRESULT */ {
  return libMFPlat_dll.MFCreateDXGIDeviceManager!(util.toPointer(resetToken), util.toPointer(ppDeviceManager));
}

export function MFCreateAlignedMemoryBuffer(
  cbMaxLength: number /* u32 */,
  cbAligment: number /* u32 */,
  ppBuffer: Deno.PointerValue | Uint8Array /* ptr */,
): Deno.PointerValue /* Windows.Win32.Foundation.HRESULT */ {
  return libMFPlat_dll.MFCreateAlignedMemoryBuffer!(cbMaxLength, cbAligment, util.toPointer(ppBuffer));
}

export function MFCreateMediaEvent(
  met: number /* u32 */,
  guidExtendedType: Deno.PointerValue | Uint8Array /* ptr */,
  hrStatus: Uint8Array | Deno.PointerValue /* Windows.Win32.Foundation.HRESULT */,
  pvValue: Deno.PointerValue | Uint8Array /* ptr */,
  ppEvent: Deno.PointerValue | Uint8Array /* ptr */,
): Deno.PointerValue /* Windows.Win32.Foundation.HRESULT */ {
  return libMFPlat_dll.MFCreateMediaEvent!(met, util.toPointer(guidExtendedType), util.toPointer(hrStatus), util.toPointer(pvValue), util.toPointer(ppEvent));
}

export function MFCreateEventQueue(
  ppMediaEventQueue: Deno.PointerValue | Uint8Array /* ptr */,
): Deno.PointerValue /* Windows.Win32.Foundation.HRESULT */ {
  return libMFPlat_dll.MFCreateEventQueue!(util.toPointer(ppMediaEventQueue));
}

export function MFCreateSample(
  ppIMFSample: Deno.PointerValue | Uint8Array /* ptr */,
): Deno.PointerValue /* Windows.Win32.Foundation.HRESULT */ {
  return libMFPlat_dll.MFCreateSample!(util.toPointer(ppIMFSample));
}

export function MFCreateAttributes(
  ppMFAttributes: Deno.PointerValue | Uint8Array /* ptr */,
  cInitialSize: number /* u32 */,
): Deno.PointerValue /* Windows.Win32.Foundation.HRESULT */ {
  return libMFPlat_dll.MFCreateAttributes!(util.toPointer(ppMFAttributes), cInitialSize);
}

export function MFInitAttributesFromBlob(
  pAttributes: Uint8Array | Deno.PointerValue /* Windows.Win32.Media.MediaFoundation.IMFAttributes */,
  pBuf: Deno.PointerValue | Uint8Array /* ptr */,
  cbBufSize: number /* u32 */,
): Deno.PointerValue /* Windows.Win32.Foundation.HRESULT */ {
  return libMFPlat_dll.MFInitAttributesFromBlob!(util.toPointer(pAttributes), util.toPointer(pBuf), cbBufSize);
}

export function MFGetAttributesAsBlobSize(
  pAttributes: Uint8Array | Deno.PointerValue /* Windows.Win32.Media.MediaFoundation.IMFAttributes */,
  pcbBufSize: Deno.PointerValue | Uint8Array /* ptr */,
): Deno.PointerValue /* Windows.Win32.Foundation.HRESULT */ {
  return libMFPlat_dll.MFGetAttributesAsBlobSize!(util.toPointer(pAttributes), util.toPointer(pcbBufSize));
}

export function MFGetAttributesAsBlob(
  pAttributes: Uint8Array | Deno.PointerValue /* Windows.Win32.Media.MediaFoundation.IMFAttributes */,
  pBuf: Deno.PointerValue | Uint8Array /* ptr */,
  cbBufSize: number /* u32 */,
): Deno.PointerValue /* Windows.Win32.Foundation.HRESULT */ {
  return libMFPlat_dll.MFGetAttributesAsBlob!(util.toPointer(pAttributes), util.toPointer(pBuf), cbBufSize);
}

export function MFTRegister(
  clsidMFT: Uint8Array | Deno.PointerValue /* System.Guid */,
  guidCategory: Uint8Array | Deno.PointerValue /* System.Guid */,
  pszName: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  Flags: number /* u32 */,
  cInputTypes: number /* u32 */,
  pInputTypes: Deno.PointerValue | Uint8Array /* ptr */,
  cOutputTypes: number /* u32 */,
  pOutputTypes: Deno.PointerValue | Uint8Array /* ptr */,
  pAttributes: Uint8Array | Deno.PointerValue /* Windows.Win32.Media.MediaFoundation.IMFAttributes */,
): Deno.PointerValue /* Windows.Win32.Foundation.HRESULT */ {
  return libMFPlat_dll.MFTRegister!(util.toPointer(clsidMFT), util.toPointer(guidCategory), util.pwstrToFfi(pszName), Flags, cInputTypes, util.toPointer(pInputTypes), cOutputTypes, util.toPointer(pOutputTypes), util.toPointer(pAttributes));
}

export function MFTUnregister(
  clsidMFT: Uint8Array | Deno.PointerValue /* System.Guid */,
): Deno.PointerValue /* Windows.Win32.Foundation.HRESULT */ {
  return libMFPlat_dll.MFTUnregister!(util.toPointer(clsidMFT));
}

export function MFTRegisterLocal(
  pClassFactory: Uint8Array | Deno.PointerValue /* Windows.Win32.System.Com.IClassFactory */,
  guidCategory: Deno.PointerValue | Uint8Array /* ptr */,
  pszName: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  Flags: number /* u32 */,
  cInputTypes: number /* u32 */,
  pInputTypes: Deno.PointerValue | Uint8Array /* ptr */,
  cOutputTypes: number /* u32 */,
  pOutputTypes: Deno.PointerValue | Uint8Array /* ptr */,
): Deno.PointerValue /* Windows.Win32.Foundation.HRESULT */ {
  return libMFPlat_dll.MFTRegisterLocal!(util.toPointer(pClassFactory), util.toPointer(guidCategory), util.pwstrToFfi(pszName), Flags, cInputTypes, util.toPointer(pInputTypes), cOutputTypes, util.toPointer(pOutputTypes));
}

export function MFTUnregisterLocal(
  pClassFactory: Uint8Array | Deno.PointerValue /* Windows.Win32.System.Com.IClassFactory */,
): Deno.PointerValue /* Windows.Win32.Foundation.HRESULT */ {
  return libMFPlat_dll.MFTUnregisterLocal!(util.toPointer(pClassFactory));
}

export function MFTRegisterLocalByCLSID(
  clisdMFT: Deno.PointerValue | Uint8Array /* ptr */,
  guidCategory: Deno.PointerValue | Uint8Array /* ptr */,
  pszName: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  Flags: number /* u32 */,
  cInputTypes: number /* u32 */,
  pInputTypes: Deno.PointerValue | Uint8Array /* ptr */,
  cOutputTypes: number /* u32 */,
  pOutputTypes: Deno.PointerValue | Uint8Array /* ptr */,
): Deno.PointerValue /* Windows.Win32.Foundation.HRESULT */ {
  return libMFPlat_dll.MFTRegisterLocalByCLSID!(util.toPointer(clisdMFT), util.toPointer(guidCategory), util.pwstrToFfi(pszName), Flags, cInputTypes, util.toPointer(pInputTypes), cOutputTypes, util.toPointer(pOutputTypes));
}

export function MFTUnregisterLocalByCLSID(
  clsidMFT: Uint8Array | Deno.PointerValue /* System.Guid */,
): Deno.PointerValue /* Windows.Win32.Foundation.HRESULT */ {
  return libMFPlat_dll.MFTUnregisterLocalByCLSID!(util.toPointer(clsidMFT));
}

export function MFTEnum(
  guidCategory: Uint8Array | Deno.PointerValue /* System.Guid */,
  Flags: number /* u32 */,
  pInputType: Deno.PointerValue | Uint8Array /* ptr */,
  pOutputType: Deno.PointerValue | Uint8Array /* ptr */,
  pAttributes: Uint8Array | Deno.PointerValue /* Windows.Win32.Media.MediaFoundation.IMFAttributes */,
  ppclsidMFT: Deno.PointerValue | Uint8Array /* ptr */,
  pcMFTs: Deno.PointerValue | Uint8Array /* ptr */,
): Deno.PointerValue /* Windows.Win32.Foundation.HRESULT */ {
  return libMFPlat_dll.MFTEnum!(util.toPointer(guidCategory), Flags, util.toPointer(pInputType), util.toPointer(pOutputType), util.toPointer(pAttributes), util.toPointer(ppclsidMFT), util.toPointer(pcMFTs));
}

export function MFTEnumEx(
  guidCategory: Uint8Array | Deno.PointerValue /* System.Guid */,
  Flags: MFT_ENUM_FLAG /* Windows.Win32.Media.MediaFoundation.MFT_ENUM_FLAG */,
  pInputType: Deno.PointerValue | Uint8Array /* ptr */,
  pOutputType: Deno.PointerValue | Uint8Array /* ptr */,
  pppMFTActivate: Deno.PointerValue | Uint8Array /* ptr */,
  pnumMFTActivate: Deno.PointerValue | Uint8Array /* ptr */,
): Deno.PointerValue /* Windows.Win32.Foundation.HRESULT */ {
  return libMFPlat_dll.MFTEnumEx!(util.toPointer(guidCategory), Flags, util.toPointer(pInputType), util.toPointer(pOutputType), util.toPointer(pppMFTActivate), util.toPointer(pnumMFTActivate));
}

export function MFTEnum2(
  guidCategory: Uint8Array | Deno.PointerValue /* System.Guid */,
  Flags: MFT_ENUM_FLAG /* Windows.Win32.Media.MediaFoundation.MFT_ENUM_FLAG */,
  pInputType: Deno.PointerValue | Uint8Array /* ptr */,
  pOutputType: Deno.PointerValue | Uint8Array /* ptr */,
  pAttributes: Uint8Array | Deno.PointerValue /* Windows.Win32.Media.MediaFoundation.IMFAttributes */,
  pppMFTActivate: Deno.PointerValue | Uint8Array /* ptr */,
  pnumMFTActivate: Deno.PointerValue | Uint8Array /* ptr */,
): Deno.PointerValue /* Windows.Win32.Foundation.HRESULT */ {
  return libMFPlat_dll.MFTEnum2!(util.toPointer(guidCategory), Flags, util.toPointer(pInputType), util.toPointer(pOutputType), util.toPointer(pAttributes), util.toPointer(pppMFTActivate), util.toPointer(pnumMFTActivate));
}

export function MFTGetInfo(
  clsidMFT: Uint8Array | Deno.PointerValue /* System.Guid */,
  pszName: Deno.PointerValue | Uint8Array /* ptr */,
  ppInputTypes: Deno.PointerValue | Uint8Array /* ptr */,
  pcInputTypes: Deno.PointerValue | Uint8Array /* ptr */,
  ppOutputTypes: Deno.PointerValue | Uint8Array /* ptr */,
  pcOutputTypes: Deno.PointerValue | Uint8Array /* ptr */,
  ppAttributes: Deno.PointerValue | Uint8Array /* ptr */,
): Deno.PointerValue /* Windows.Win32.Foundation.HRESULT */ {
  return libMFPlat_dll.MFTGetInfo!(util.toPointer(clsidMFT), util.toPointer(pszName), util.toPointer(ppInputTypes), util.toPointer(pcInputTypes), util.toPointer(ppOutputTypes), util.toPointer(pcOutputTypes), util.toPointer(ppAttributes));
}

export function MFGetPluginControl(
  ppPluginControl: Deno.PointerValue | Uint8Array /* ptr */,
): Deno.PointerValue /* Windows.Win32.Foundation.HRESULT */ {
  return libMFPlat_dll.MFGetPluginControl!(util.toPointer(ppPluginControl));
}

export function MFGetMFTMerit(
  pMFT: Uint8Array | Deno.PointerValue /* Windows.Win32.System.Com.IUnknown */,
  cbVerifier: number /* u32 */,
  verifier: Deno.PointerValue | Uint8Array /* ptr */,
  merit: Deno.PointerValue | Uint8Array /* ptr */,
): Deno.PointerValue /* Windows.Win32.Foundation.HRESULT */ {
  return libMFPlat_dll.MFGetMFTMerit!(util.toPointer(pMFT), cbVerifier, util.toPointer(verifier), util.toPointer(merit));
}

export function MFRegisterLocalSchemeHandler(
  szScheme: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  pActivate: Uint8Array | Deno.PointerValue /* Windows.Win32.Media.MediaFoundation.IMFActivate */,
): Deno.PointerValue /* Windows.Win32.Foundation.HRESULT */ {
  return libMFPlat_dll.MFRegisterLocalSchemeHandler!(util.pwstrToFfi(szScheme), util.toPointer(pActivate));
}

export function MFRegisterLocalByteStreamHandler(
  szFileExtension: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  szMimeType: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  pActivate: Uint8Array | Deno.PointerValue /* Windows.Win32.Media.MediaFoundation.IMFActivate */,
): Deno.PointerValue /* Windows.Win32.Foundation.HRESULT */ {
  return libMFPlat_dll.MFRegisterLocalByteStreamHandler!(util.pwstrToFfi(szFileExtension), util.pwstrToFfi(szMimeType), util.toPointer(pActivate));
}

export function MFCreateMFByteStreamWrapper(
  pStream: Uint8Array | Deno.PointerValue /* Windows.Win32.Media.MediaFoundation.IMFByteStream */,
  ppStreamWrapper: Deno.PointerValue | Uint8Array /* ptr */,
): Deno.PointerValue /* Windows.Win32.Foundation.HRESULT */ {
  return libMFPlat_dll.MFCreateMFByteStreamWrapper!(util.toPointer(pStream), util.toPointer(ppStreamWrapper));
}

export function MFCreateMediaExtensionActivate(
  szActivatableClassId: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  pConfiguration: Uint8Array | Deno.PointerValue /* Windows.Win32.System.Com.IUnknown */,
  riid: Deno.PointerValue | Uint8Array /* ptr */,
  ppvObject: Deno.PointerValue | Uint8Array /* ptr */,
): Deno.PointerValue /* Windows.Win32.Foundation.HRESULT */ {
  return libMFPlat_dll.MFCreateMediaExtensionActivate!(util.pwstrToFfi(szActivatableClassId), util.toPointer(pConfiguration), util.toPointer(riid), util.toPointer(ppvObject));
}

export function MFCreateMuxStreamAttributes(
  pAttributesToMux: Uint8Array | Deno.PointerValue /* Windows.Win32.Media.MediaFoundation.IMFCollection */,
  ppMuxAttribs: Deno.PointerValue | Uint8Array /* ptr */,
): Deno.PointerValue /* Windows.Win32.Foundation.HRESULT */ {
  return libMFPlat_dll.MFCreateMuxStreamAttributes!(util.toPointer(pAttributesToMux), util.toPointer(ppMuxAttribs));
}

export function MFCreateMuxStreamMediaType(
  pMediaTypesToMux: Uint8Array | Deno.PointerValue /* Windows.Win32.Media.MediaFoundation.IMFCollection */,
  ppMuxMediaType: Deno.PointerValue | Uint8Array /* ptr */,
): Deno.PointerValue /* Windows.Win32.Foundation.HRESULT */ {
  return libMFPlat_dll.MFCreateMuxStreamMediaType!(util.toPointer(pMediaTypesToMux), util.toPointer(ppMuxMediaType));
}

export function MFCreateMuxStreamSample(
  pSamplesToMux: Uint8Array | Deno.PointerValue /* Windows.Win32.Media.MediaFoundation.IMFCollection */,
  ppMuxSample: Deno.PointerValue | Uint8Array /* ptr */,
): Deno.PointerValue /* Windows.Win32.Foundation.HRESULT */ {
  return libMFPlat_dll.MFCreateMuxStreamSample!(util.toPointer(pSamplesToMux), util.toPointer(ppMuxSample));
}

export function MFValidateMediaTypeSize(
  FormatType: Uint8Array | Deno.PointerValue /* System.Guid */,
  pBlock: Deno.PointerValue | Uint8Array /* ptr */,
  cbSize: number /* u32 */,
): Deno.PointerValue /* Windows.Win32.Foundation.HRESULT */ {
  return libMFPlat_dll.MFValidateMediaTypeSize!(util.toPointer(FormatType), util.toPointer(pBlock), cbSize);
}

export function MFCreateMediaType(
  ppMFType: Deno.PointerValue | Uint8Array /* ptr */,
): Deno.PointerValue /* Windows.Win32.Foundation.HRESULT */ {
  return libMFPlat_dll.MFCreateMediaType!(util.toPointer(ppMFType));
}

export function MFCreateMFVideoFormatFromMFMediaType(
  pMFType: Uint8Array | Deno.PointerValue /* Windows.Win32.Media.MediaFoundation.IMFMediaType */,
  ppMFVF: Deno.PointerValue | Uint8Array /* ptr */,
  pcbSize: Deno.PointerValue | Uint8Array /* ptr */,
): Deno.PointerValue /* Windows.Win32.Foundation.HRESULT */ {
  return libMFPlat_dll.MFCreateMFVideoFormatFromMFMediaType!(util.toPointer(pMFType), util.toPointer(ppMFVF), util.toPointer(pcbSize));
}

export function MFCreateWaveFormatExFromMFMediaType(
  pMFType: Uint8Array | Deno.PointerValue /* Windows.Win32.Media.MediaFoundation.IMFMediaType */,
  ppWF: Deno.PointerValue | Uint8Array /* ptr */,
  pcbSize: Deno.PointerValue | Uint8Array /* ptr */,
  Flags: number /* u32 */,
): Deno.PointerValue /* Windows.Win32.Foundation.HRESULT */ {
  return libMFPlat_dll.MFCreateWaveFormatExFromMFMediaType!(util.toPointer(pMFType), util.toPointer(ppWF), util.toPointer(pcbSize), Flags);
}

export function MFInitMediaTypeFromVideoInfoHeader(
  pMFType: Uint8Array | Deno.PointerValue /* Windows.Win32.Media.MediaFoundation.IMFMediaType */,
  pVIH: Deno.PointerValue | Uint8Array /* ptr */,
  cbBufSize: number /* u32 */,
  pSubtype: Deno.PointerValue | Uint8Array /* ptr */,
): Deno.PointerValue /* Windows.Win32.Foundation.HRESULT */ {
  return libMFPlat_dll.MFInitMediaTypeFromVideoInfoHeader!(util.toPointer(pMFType), util.toPointer(pVIH), cbBufSize, util.toPointer(pSubtype));
}

export function MFInitMediaTypeFromVideoInfoHeader2(
  pMFType: Uint8Array | Deno.PointerValue /* Windows.Win32.Media.MediaFoundation.IMFMediaType */,
  pVIH2: Deno.PointerValue | Uint8Array /* ptr */,
  cbBufSize: number /* u32 */,
  pSubtype: Deno.PointerValue | Uint8Array /* ptr */,
): Deno.PointerValue /* Windows.Win32.Foundation.HRESULT */ {
  return libMFPlat_dll.MFInitMediaTypeFromVideoInfoHeader2!(util.toPointer(pMFType), util.toPointer(pVIH2), cbBufSize, util.toPointer(pSubtype));
}

export function MFInitMediaTypeFromMPEG1VideoInfo(
  pMFType: Uint8Array | Deno.PointerValue /* Windows.Win32.Media.MediaFoundation.IMFMediaType */,
  pMP1VI: Deno.PointerValue | Uint8Array /* ptr */,
  cbBufSize: number /* u32 */,
  pSubtype: Deno.PointerValue | Uint8Array /* ptr */,
): Deno.PointerValue /* Windows.Win32.Foundation.HRESULT */ {
  return libMFPlat_dll.MFInitMediaTypeFromMPEG1VideoInfo!(util.toPointer(pMFType), util.toPointer(pMP1VI), cbBufSize, util.toPointer(pSubtype));
}

export function MFInitMediaTypeFromMPEG2VideoInfo(
  pMFType: Uint8Array | Deno.PointerValue /* Windows.Win32.Media.MediaFoundation.IMFMediaType */,
  pMP2VI: Deno.PointerValue | Uint8Array /* ptr */,
  cbBufSize: number /* u32 */,
  pSubtype: Deno.PointerValue | Uint8Array /* ptr */,
): Deno.PointerValue /* Windows.Win32.Foundation.HRESULT */ {
  return libMFPlat_dll.MFInitMediaTypeFromMPEG2VideoInfo!(util.toPointer(pMFType), util.toPointer(pMP2VI), cbBufSize, util.toPointer(pSubtype));
}

export function MFCalculateBitmapImageSize(
  pBMIH: Deno.PointerValue | Uint8Array /* ptr */,
  cbBufSize: number /* u32 */,
  pcbImageSize: Deno.PointerValue | Uint8Array /* ptr */,
  pbKnown: Deno.PointerValue | Uint8Array /* ptr */,
): Deno.PointerValue /* Windows.Win32.Foundation.HRESULT */ {
  return libMFPlat_dll.MFCalculateBitmapImageSize!(util.toPointer(pBMIH), cbBufSize, util.toPointer(pcbImageSize), util.toPointer(pbKnown));
}

export function MFCalculateImageSize(
  guidSubtype: Deno.PointerValue | Uint8Array /* ptr */,
  unWidth: number /* u32 */,
  unHeight: number /* u32 */,
  pcbImageSize: Deno.PointerValue | Uint8Array /* ptr */,
): Deno.PointerValue /* Windows.Win32.Foundation.HRESULT */ {
  return libMFPlat_dll.MFCalculateImageSize!(util.toPointer(guidSubtype), unWidth, unHeight, util.toPointer(pcbImageSize));
}

export function MFFrameRateToAverageTimePerFrame(
  unNumerator: number /* u32 */,
  unDenominator: number /* u32 */,
  punAverageTimePerFrame: Deno.PointerValue | Uint8Array /* ptr */,
): Deno.PointerValue /* Windows.Win32.Foundation.HRESULT */ {
  return libMFPlat_dll.MFFrameRateToAverageTimePerFrame!(unNumerator, unDenominator, util.toPointer(punAverageTimePerFrame));
}

export function MFAverageTimePerFrameToFrameRate(
  unAverageTimePerFrame: bigint | number /* u64 */,
  punNumerator: Deno.PointerValue | Uint8Array /* ptr */,
  punDenominator: Deno.PointerValue | Uint8Array /* ptr */,
): Deno.PointerValue /* Windows.Win32.Foundation.HRESULT */ {
  return libMFPlat_dll.MFAverageTimePerFrameToFrameRate!(unAverageTimePerFrame, util.toPointer(punNumerator), util.toPointer(punDenominator));
}

export function MFInitMediaTypeFromMFVideoFormat(
  pMFType: Uint8Array | Deno.PointerValue /* Windows.Win32.Media.MediaFoundation.IMFMediaType */,
  pMFVF: Deno.PointerValue | Uint8Array /* ptr */,
  cbBufSize: number /* u32 */,
): Deno.PointerValue /* Windows.Win32.Foundation.HRESULT */ {
  return libMFPlat_dll.MFInitMediaTypeFromMFVideoFormat!(util.toPointer(pMFType), util.toPointer(pMFVF), cbBufSize);
}

export function MFInitMediaTypeFromWaveFormatEx(
  pMFType: Uint8Array | Deno.PointerValue /* Windows.Win32.Media.MediaFoundation.IMFMediaType */,
  pWaveFormat: Deno.PointerValue | Uint8Array /* ptr */,
  cbBufSize: number /* u32 */,
): Deno.PointerValue /* Windows.Win32.Foundation.HRESULT */ {
  return libMFPlat_dll.MFInitMediaTypeFromWaveFormatEx!(util.toPointer(pMFType), util.toPointer(pWaveFormat), cbBufSize);
}

export function MFInitMediaTypeFromAMMediaType(
  pMFType: Uint8Array | Deno.PointerValue /* Windows.Win32.Media.MediaFoundation.IMFMediaType */,
  pAMType: Deno.PointerValue | Uint8Array /* ptr */,
): Deno.PointerValue /* Windows.Win32.Foundation.HRESULT */ {
  return libMFPlat_dll.MFInitMediaTypeFromAMMediaType!(util.toPointer(pMFType), util.toPointer(pAMType));
}

export function MFInitAMMediaTypeFromMFMediaType(
  pMFType: Uint8Array | Deno.PointerValue /* Windows.Win32.Media.MediaFoundation.IMFMediaType */,
  guidFormatBlockType: Uint8Array | Deno.PointerValue /* System.Guid */,
  pAMType: Deno.PointerValue | Uint8Array /* ptr */,
): Deno.PointerValue /* Windows.Win32.Foundation.HRESULT */ {
  return libMFPlat_dll.MFInitAMMediaTypeFromMFMediaType!(util.toPointer(pMFType), util.toPointer(guidFormatBlockType), util.toPointer(pAMType));
}

export function MFCreateAMMediaTypeFromMFMediaType(
  pMFType: Uint8Array | Deno.PointerValue /* Windows.Win32.Media.MediaFoundation.IMFMediaType */,
  guidFormatBlockType: Uint8Array | Deno.PointerValue /* System.Guid */,
  ppAMType: Deno.PointerValue | Uint8Array /* ptr */,
): Deno.PointerValue /* Windows.Win32.Foundation.HRESULT */ {
  return libMFPlat_dll.MFCreateAMMediaTypeFromMFMediaType!(util.toPointer(pMFType), util.toPointer(guidFormatBlockType), util.toPointer(ppAMType));
}

export function MFCompareFullToPartialMediaType(
  pMFTypeFull: Uint8Array | Deno.PointerValue /* Windows.Win32.Media.MediaFoundation.IMFMediaType */,
  pMFTypePartial: Uint8Array | Deno.PointerValue /* Windows.Win32.Media.MediaFoundation.IMFMediaType */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libMFPlat_dll.MFCompareFullToPartialMediaType!(util.toPointer(pMFTypeFull), util.toPointer(pMFTypePartial)));
}

export function MFWrapMediaType(
  pOrig: Uint8Array | Deno.PointerValue /* Windows.Win32.Media.MediaFoundation.IMFMediaType */,
  MajorType: Deno.PointerValue | Uint8Array /* ptr */,
  SubType: Deno.PointerValue | Uint8Array /* ptr */,
  ppWrap: Deno.PointerValue | Uint8Array /* ptr */,
): Deno.PointerValue /* Windows.Win32.Foundation.HRESULT */ {
  return libMFPlat_dll.MFWrapMediaType!(util.toPointer(pOrig), util.toPointer(MajorType), util.toPointer(SubType), util.toPointer(ppWrap));
}

export function MFUnwrapMediaType(
  pWrap: Uint8Array | Deno.PointerValue /* Windows.Win32.Media.MediaFoundation.IMFMediaType */,
  ppOrig: Deno.PointerValue | Uint8Array /* ptr */,
): Deno.PointerValue /* Windows.Win32.Foundation.HRESULT */ {
  return libMFPlat_dll.MFUnwrapMediaType!(util.toPointer(pWrap), util.toPointer(ppOrig));
}

export function MFCreateVideoMediaType(
  pVideoFormat: Deno.PointerValue | Uint8Array /* ptr */,
  ppIVideoMediaType: Deno.PointerValue | Uint8Array /* ptr */,
): Deno.PointerValue /* Windows.Win32.Foundation.HRESULT */ {
  return libMFPlat_dll.MFCreateVideoMediaType!(util.toPointer(pVideoFormat), util.toPointer(ppIVideoMediaType));
}

export function MFCreateVideoMediaTypeFromSubtype(
  pAMSubtype: Deno.PointerValue | Uint8Array /* ptr */,
  ppIVideoMediaType: Deno.PointerValue | Uint8Array /* ptr */,
): Deno.PointerValue /* Windows.Win32.Foundation.HRESULT */ {
  return libMFPlat_dll.MFCreateVideoMediaTypeFromSubtype!(util.toPointer(pAMSubtype), util.toPointer(ppIVideoMediaType));
}

export function MFIsFormatYUV(
  Format: number /* u32 */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libEVR_dll.MFIsFormatYUV!(Format));
}

export function MFCreateVideoMediaTypeFromBitMapInfoHeader(
  pbmihBitMapInfoHeader: Deno.PointerValue | Uint8Array /* ptr */,
  dwPixelAspectRatioX: number /* u32 */,
  dwPixelAspectRatioY: number /* u32 */,
  InterlaceMode: MFVideoInterlaceMode /* Windows.Win32.Media.MediaFoundation.MFVideoInterlaceMode */,
  VideoFlags: bigint | number /* u64 */,
  qwFramesPerSecondNumerator: bigint | number /* u64 */,
  qwFramesPerSecondDenominator: bigint | number /* u64 */,
  dwMaxBitRate: number /* u32 */,
  ppIVideoMediaType: Deno.PointerValue | Uint8Array /* ptr */,
): Deno.PointerValue /* Windows.Win32.Foundation.HRESULT */ {
  return libMFPlat_dll.MFCreateVideoMediaTypeFromBitMapInfoHeader!(util.toPointer(pbmihBitMapInfoHeader), dwPixelAspectRatioX, dwPixelAspectRatioY, InterlaceMode, VideoFlags, qwFramesPerSecondNumerator, qwFramesPerSecondDenominator, dwMaxBitRate, util.toPointer(ppIVideoMediaType));
}

export function MFGetStrideForBitmapInfoHeader(
  format: number /* u32 */,
  dwWidth: number /* u32 */,
  pStride: Deno.PointerValue | Uint8Array /* ptr */,
): Deno.PointerValue /* Windows.Win32.Foundation.HRESULT */ {
  return libMFPlat_dll.MFGetStrideForBitmapInfoHeader!(format, dwWidth, util.toPointer(pStride));
}

export function MFGetPlaneSize(
  format: number /* u32 */,
  dwWidth: number /* u32 */,
  dwHeight: number /* u32 */,
  pdwPlaneSize: Deno.PointerValue | Uint8Array /* ptr */,
): Deno.PointerValue /* Windows.Win32.Foundation.HRESULT */ {
  return libEVR_dll.MFGetPlaneSize!(format, dwWidth, dwHeight, util.toPointer(pdwPlaneSize));
}

export function MFCreateVideoMediaTypeFromBitMapInfoHeaderEx(
  pbmihBitMapInfoHeader: Deno.PointerValue | Uint8Array /* ptr */,
  cbBitMapInfoHeader: number /* u32 */,
  dwPixelAspectRatioX: number /* u32 */,
  dwPixelAspectRatioY: number /* u32 */,
  InterlaceMode: MFVideoInterlaceMode /* Windows.Win32.Media.MediaFoundation.MFVideoInterlaceMode */,
  VideoFlags: bigint | number /* u64 */,
  dwFramesPerSecondNumerator: number /* u32 */,
  dwFramesPerSecondDenominator: number /* u32 */,
  dwMaxBitRate: number /* u32 */,
  ppIVideoMediaType: Deno.PointerValue | Uint8Array /* ptr */,
): Deno.PointerValue /* Windows.Win32.Foundation.HRESULT */ {
  return libMFPlat_dll.MFCreateVideoMediaTypeFromBitMapInfoHeaderEx!(util.toPointer(pbmihBitMapInfoHeader), cbBitMapInfoHeader, dwPixelAspectRatioX, dwPixelAspectRatioY, InterlaceMode, VideoFlags, dwFramesPerSecondNumerator, dwFramesPerSecondDenominator, dwMaxBitRate, util.toPointer(ppIVideoMediaType));
}

export function MFCreateMediaTypeFromRepresentation(
  guidRepresentation: Uint8Array | Deno.PointerValue /* System.Guid */,
  pvRepresentation: Deno.PointerValue | Uint8Array /* ptr */,
  ppIMediaType: Deno.PointerValue | Uint8Array /* ptr */,
): Deno.PointerValue /* Windows.Win32.Foundation.HRESULT */ {
  return libMFPlat_dll.MFCreateMediaTypeFromRepresentation!(util.toPointer(guidRepresentation), util.toPointer(pvRepresentation), util.toPointer(ppIMediaType));
}

export function MFCreateAudioMediaType(
  pAudioFormat: Deno.PointerValue | Uint8Array /* ptr */,
  ppIAudioMediaType: Deno.PointerValue | Uint8Array /* ptr */,
): Deno.PointerValue /* Windows.Win32.Foundation.HRESULT */ {
  return libMFPlat_dll.MFCreateAudioMediaType!(util.toPointer(pAudioFormat), util.toPointer(ppIAudioMediaType));
}

export function MFGetUncompressedVideoFormat(
  pVideoFormat: Deno.PointerValue | Uint8Array /* ptr */,
): number /* u32 */ {
  return libMFPlat_dll.MFGetUncompressedVideoFormat!(util.toPointer(pVideoFormat));
}

export function MFInitVideoFormat(
  pVideoFormat: Deno.PointerValue | Uint8Array /* ptr */,
  type: MFStandardVideoFormat /* Windows.Win32.Media.MediaFoundation.MFStandardVideoFormat */,
): Deno.PointerValue /* Windows.Win32.Foundation.HRESULT */ {
  return libMFPlat_dll.MFInitVideoFormat!(util.toPointer(pVideoFormat), type);
}

export function MFInitVideoFormat_RGB(
  pVideoFormat: Deno.PointerValue | Uint8Array /* ptr */,
  dwWidth: number /* u32 */,
  dwHeight: number /* u32 */,
  D3Dfmt: number /* u32 */,
): Deno.PointerValue /* Windows.Win32.Foundation.HRESULT */ {
  return libMFPlat_dll.MFInitVideoFormat_RGB!(util.toPointer(pVideoFormat), dwWidth, dwHeight, D3Dfmt);
}

export function MFConvertColorInfoToDXVA(
  pdwToDXVA: Deno.PointerValue | Uint8Array /* ptr */,
  pFromFormat: Deno.PointerValue | Uint8Array /* ptr */,
): Deno.PointerValue /* Windows.Win32.Foundation.HRESULT */ {
  return libMFPlat_dll.MFConvertColorInfoToDXVA!(util.toPointer(pdwToDXVA), util.toPointer(pFromFormat));
}

export function MFConvertColorInfoFromDXVA(
  pToFormat: Deno.PointerValue | Uint8Array /* ptr */,
  dwFromDXVA: number /* u32 */,
): Deno.PointerValue /* Windows.Win32.Foundation.HRESULT */ {
  return libMFPlat_dll.MFConvertColorInfoFromDXVA!(util.toPointer(pToFormat), dwFromDXVA);
}

export function MFCopyImage(
  pDest: Deno.PointerValue | Uint8Array /* ptr */,
  lDestStride: number /* i32 */,
  pSrc: Deno.PointerValue | Uint8Array /* ptr */,
  lSrcStride: number /* i32 */,
  dwWidthInBytes: number /* u32 */,
  dwLines: number /* u32 */,
): Deno.PointerValue /* Windows.Win32.Foundation.HRESULT */ {
  return libMFPlat_dll.MFCopyImage!(util.toPointer(pDest), lDestStride, util.toPointer(pSrc), lSrcStride, dwWidthInBytes, dwLines);
}

export function MFConvertFromFP16Array(
  pDest: Deno.PointerValue | Uint8Array /* ptr */,
  pSrc: Deno.PointerValue | Uint8Array /* ptr */,
  dwCount: number /* u32 */,
): Deno.PointerValue /* Windows.Win32.Foundation.HRESULT */ {
  return libMFPlat_dll.MFConvertFromFP16Array!(util.toPointer(pDest), util.toPointer(pSrc), dwCount);
}

export function MFConvertToFP16Array(
  pDest: Deno.PointerValue | Uint8Array /* ptr */,
  pSrc: Deno.PointerValue | Uint8Array /* ptr */,
  dwCount: number /* u32 */,
): Deno.PointerValue /* Windows.Win32.Foundation.HRESULT */ {
  return libMFPlat_dll.MFConvertToFP16Array!(util.toPointer(pDest), util.toPointer(pSrc), dwCount);
}

export function MFCreate2DMediaBuffer(
  dwWidth: number /* u32 */,
  dwHeight: number /* u32 */,
  dwFourCC: number /* u32 */,
  fBottomUp: boolean /* Windows.Win32.Foundation.BOOL */,
  ppBuffer: Deno.PointerValue | Uint8Array /* ptr */,
): Deno.PointerValue /* Windows.Win32.Foundation.HRESULT */ {
  return libMFPlat_dll.MFCreate2DMediaBuffer!(dwWidth, dwHeight, dwFourCC, util.boolToFfi(fBottomUp), util.toPointer(ppBuffer));
}

export function MFCreateMediaBufferFromMediaType(
  pMediaType: Uint8Array | Deno.PointerValue /* Windows.Win32.Media.MediaFoundation.IMFMediaType */,
  llDuration: bigint | number /* i64 */,
  dwMinLength: number /* u32 */,
  dwMinAlignment: number /* u32 */,
  ppBuffer: Deno.PointerValue | Uint8Array /* ptr */,
): Deno.PointerValue /* Windows.Win32.Foundation.HRESULT */ {
  return libMFPlat_dll.MFCreateMediaBufferFromMediaType!(util.toPointer(pMediaType), llDuration, dwMinLength, dwMinAlignment, util.toPointer(ppBuffer));
}

export function MFCreateCollection(
  ppIMFCollection: Deno.PointerValue | Uint8Array /* ptr */,
): Deno.PointerValue /* Windows.Win32.Foundation.HRESULT */ {
  return libMFPlat_dll.MFCreateCollection!(util.toPointer(ppIMFCollection));
}

export function MFHeapAlloc(
  nSize: bigint | number /* usize */,
  dwFlags: number /* u32 */,
  pszFile: string | null | Uint8Array /* Windows.Win32.Foundation.PSTR */,
  line: number /* i32 */,
  eat: EAllocationType /* Windows.Win32.Media.MediaFoundation.EAllocationType */,
): Deno.PointerValue /* ptr */ {
  return libMFPlat_dll.MFHeapAlloc!(nSize, dwFlags, util.pstrToFfi(pszFile), line, eat);
}

export function MFHeapFree(
  pv: Deno.PointerValue | Uint8Array /* ptr */,
): void /* void */ {
  return libMFPlat_dll.MFHeapFree!(util.toPointer(pv));
}

export function MFllMulDiv(
  a: bigint | number /* i64 */,
  b: bigint | number /* i64 */,
  c: bigint | number /* i64 */,
  d: bigint | number /* i64 */,
): bigint | number /* i64 */ {
  return libMFPlat_dll.MFllMulDiv!(a, b, c, d);
}

export function MFGetContentProtectionSystemCLSID(
  guidProtectionSystemID: Deno.PointerValue | Uint8Array /* ptr */,
  pclsid: Deno.PointerValue | Uint8Array /* ptr */,
): Deno.PointerValue /* Windows.Win32.Foundation.HRESULT */ {
  return libMFPlat_dll.MFGetContentProtectionSystemCLSID!(util.toPointer(guidProtectionSystemID), util.toPointer(pclsid));
}

export function MFCombineSamples(
  pSample: Uint8Array | Deno.PointerValue /* Windows.Win32.Media.MediaFoundation.IMFSample */,
  pSampleToAdd: Uint8Array | Deno.PointerValue /* Windows.Win32.Media.MediaFoundation.IMFSample */,
  dwMaxMergedDurationInMS: number /* u32 */,
  pMerged: Deno.PointerValue | Uint8Array /* ptr */,
): Deno.PointerValue /* Windows.Win32.Foundation.HRESULT */ {
  return libMFPlat_dll.MFCombineSamples!(util.toPointer(pSample), util.toPointer(pSampleToAdd), dwMaxMergedDurationInMS, util.toPointer(pMerged));
}

export function MFSplitSample(
  pSample: Uint8Array | Deno.PointerValue /* Windows.Win32.Media.MediaFoundation.IMFSample */,
  pOutputSamples: Deno.PointerValue | Uint8Array /* ptr */,
  dwOutputSampleMaxCount: number /* u32 */,
  pdwOutputSampleCount: Deno.PointerValue | Uint8Array /* ptr */,
): Deno.PointerValue /* Windows.Win32.Foundation.HRESULT */ {
  return libMFPlat_dll.MFSplitSample!(util.toPointer(pSample), util.toPointer(pOutputSamples), dwOutputSampleMaxCount, util.toPointer(pdwOutputSampleCount));
}

export function MFCreateSourceReaderFromURL(
  pwszURL: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  pAttributes: Uint8Array | Deno.PointerValue /* Windows.Win32.Media.MediaFoundation.IMFAttributes */,
  ppSourceReader: Deno.PointerValue | Uint8Array /* ptr */,
): Deno.PointerValue /* Windows.Win32.Foundation.HRESULT */ {
  return libMFReadWrite_dll.MFCreateSourceReaderFromURL!(util.pwstrToFfi(pwszURL), util.toPointer(pAttributes), util.toPointer(ppSourceReader));
}

export function MFCreateSourceReaderFromByteStream(
  pByteStream: Uint8Array | Deno.PointerValue /* Windows.Win32.Media.MediaFoundation.IMFByteStream */,
  pAttributes: Uint8Array | Deno.PointerValue /* Windows.Win32.Media.MediaFoundation.IMFAttributes */,
  ppSourceReader: Deno.PointerValue | Uint8Array /* ptr */,
): Deno.PointerValue /* Windows.Win32.Foundation.HRESULT */ {
  return libMFReadWrite_dll.MFCreateSourceReaderFromByteStream!(util.toPointer(pByteStream), util.toPointer(pAttributes), util.toPointer(ppSourceReader));
}

export function MFCreateSourceReaderFromMediaSource(
  pMediaSource: Uint8Array | Deno.PointerValue /* Windows.Win32.Media.MediaFoundation.IMFMediaSource */,
  pAttributes: Uint8Array | Deno.PointerValue /* Windows.Win32.Media.MediaFoundation.IMFAttributes */,
  ppSourceReader: Deno.PointerValue | Uint8Array /* ptr */,
): Deno.PointerValue /* Windows.Win32.Foundation.HRESULT */ {
  return libMFReadWrite_dll.MFCreateSourceReaderFromMediaSource!(util.toPointer(pMediaSource), util.toPointer(pAttributes), util.toPointer(ppSourceReader));
}

export function MFCreateSinkWriterFromURL(
  pwszOutputURL: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  pByteStream: Uint8Array | Deno.PointerValue /* Windows.Win32.Media.MediaFoundation.IMFByteStream */,
  pAttributes: Uint8Array | Deno.PointerValue /* Windows.Win32.Media.MediaFoundation.IMFAttributes */,
  ppSinkWriter: Deno.PointerValue | Uint8Array /* ptr */,
): Deno.PointerValue /* Windows.Win32.Foundation.HRESULT */ {
  return libMFReadWrite_dll.MFCreateSinkWriterFromURL!(util.pwstrToFfi(pwszOutputURL), util.toPointer(pByteStream), util.toPointer(pAttributes), util.toPointer(ppSinkWriter));
}

export function MFCreateSinkWriterFromMediaSink(
  pMediaSink: Uint8Array | Deno.PointerValue /* Windows.Win32.Media.MediaFoundation.IMFMediaSink */,
  pAttributes: Uint8Array | Deno.PointerValue /* Windows.Win32.Media.MediaFoundation.IMFAttributes */,
  ppSinkWriter: Deno.PointerValue | Uint8Array /* ptr */,
): Deno.PointerValue /* Windows.Win32.Foundation.HRESULT */ {
  return libMFReadWrite_dll.MFCreateSinkWriterFromMediaSink!(util.toPointer(pMediaSink), util.toPointer(pAttributes), util.toPointer(ppSinkWriter));
}

export function MFCreateVideoPresenter(
  pOwner: Uint8Array | Deno.PointerValue /* Windows.Win32.System.Com.IUnknown */,
  riidDevice: Deno.PointerValue | Uint8Array /* ptr */,
  riid: Deno.PointerValue | Uint8Array /* ptr */,
  ppVideoPresenter: Deno.PointerValue | Uint8Array /* ptr */,
): Deno.PointerValue /* Windows.Win32.Foundation.HRESULT */ {
  return libEVR_dll.MFCreateVideoPresenter!(util.toPointer(pOwner), util.toPointer(riidDevice), util.toPointer(riid), util.toPointer(ppVideoPresenter));
}

export function MFCreateVideoMixer(
  pOwner: Uint8Array | Deno.PointerValue /* Windows.Win32.System.Com.IUnknown */,
  riidDevice: Deno.PointerValue | Uint8Array /* ptr */,
  riid: Deno.PointerValue | Uint8Array /* ptr */,
  ppv: Deno.PointerValue | Uint8Array /* ptr */,
): Deno.PointerValue /* Windows.Win32.Foundation.HRESULT */ {
  return libEVR_dll.MFCreateVideoMixer!(util.toPointer(pOwner), util.toPointer(riidDevice), util.toPointer(riid), util.toPointer(ppv));
}

export function MFCreateVideoMixerAndPresenter(
  pMixerOwner: Uint8Array | Deno.PointerValue /* Windows.Win32.System.Com.IUnknown */,
  pPresenterOwner: Uint8Array | Deno.PointerValue /* Windows.Win32.System.Com.IUnknown */,
  riidMixer: Deno.PointerValue | Uint8Array /* ptr */,
  ppvVideoMixer: Deno.PointerValue | Uint8Array /* ptr */,
  riidPresenter: Deno.PointerValue | Uint8Array /* ptr */,
  ppvVideoPresenter: Deno.PointerValue | Uint8Array /* ptr */,
): Deno.PointerValue /* Windows.Win32.Foundation.HRESULT */ {
  return libEVR_dll.MFCreateVideoMixerAndPresenter!(util.toPointer(pMixerOwner), util.toPointer(pPresenterOwner), util.toPointer(riidMixer), util.toPointer(ppvVideoMixer), util.toPointer(riidPresenter), util.toPointer(ppvVideoPresenter));
}

export function MFCreateVideoRenderer(
  riidRenderer: Deno.PointerValue | Uint8Array /* ptr */,
  ppVideoRenderer: Deno.PointerValue | Uint8Array /* ptr */,
): Deno.PointerValue /* Windows.Win32.Foundation.HRESULT */ {
  return libMF_dll.MFCreateVideoRenderer!(util.toPointer(riidRenderer), util.toPointer(ppVideoRenderer));
}

export function MFCreateVideoSampleFromSurface(
  pUnkSurface: Uint8Array | Deno.PointerValue /* Windows.Win32.System.Com.IUnknown */,
  ppSample: Deno.PointerValue | Uint8Array /* ptr */,
): Deno.PointerValue /* Windows.Win32.Foundation.HRESULT */ {
  return libEVR_dll.MFCreateVideoSampleFromSurface!(util.toPointer(pUnkSurface), util.toPointer(ppSample));
}

export function MFCreateVideoSampleAllocator(
  riid: Deno.PointerValue | Uint8Array /* ptr */,
  ppSampleAllocator: Deno.PointerValue | Uint8Array /* ptr */,
): Deno.PointerValue /* Windows.Win32.Foundation.HRESULT */ {
  return libEVR_dll.MFCreateVideoSampleAllocator!(util.toPointer(riid), util.toPointer(ppSampleAllocator));
}

export function MFPCreateMediaPlayer(
  pwszURL: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  fStartPlayback: boolean /* Windows.Win32.Foundation.BOOL */,
  creationOptions: MFP_CREATION_OPTIONS /* Windows.Win32.Media.MediaFoundation.MFP_CREATION_OPTIONS */,
  pCallback: Uint8Array | Deno.PointerValue /* Windows.Win32.Media.MediaFoundation.IMFPMediaPlayerCallback */,
  hWnd: Deno.PointerValue /* Windows.Win32.Foundation.HWND */,
  ppMediaPlayer: Deno.PointerValue | Uint8Array /* ptr */,
): Deno.PointerValue /* Windows.Win32.Foundation.HRESULT */ {
  return libMFPlay_dll.MFPCreateMediaPlayer!(util.pwstrToFfi(pwszURL), util.boolToFfi(fStartPlayback), creationOptions, util.toPointer(pCallback), (hWnd), util.toPointer(ppMediaPlayer));
}

export function MFCreateEncryptedMediaExtensionsStoreActivate(
  pmpHost: Uint8Array | Deno.PointerValue /* Windows.Win32.Media.MediaFoundation.IMFPMPHostApp */,
  objectStream: Uint8Array | Deno.PointerValue /* Windows.Win32.System.Com.IStream */,
  classId: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  activate: Deno.PointerValue | Uint8Array /* ptr */,
): Deno.PointerValue /* Windows.Win32.Foundation.HRESULT */ {
  return libMF_dll.MFCreateEncryptedMediaExtensionsStoreActivate!(util.toPointer(pmpHost), util.toPointer(objectStream), util.pwstrToFfi(classId), util.toPointer(activate));
}

export function MFCreateVirtualCamera(
  type: MFVirtualCameraType /* Windows.Win32.Media.MediaFoundation.MFVirtualCameraType */,
  lifetime: MFVirtualCameraLifetime /* Windows.Win32.Media.MediaFoundation.MFVirtualCameraLifetime */,
  access: MFVirtualCameraAccess /* Windows.Win32.Media.MediaFoundation.MFVirtualCameraAccess */,
  friendlyName: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  sourceId: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  categories: Deno.PointerValue | Uint8Array /* ptr */,
  categoryCount: number /* u32 */,
  virtualCamera: Deno.PointerValue | Uint8Array /* ptr */,
): Deno.PointerValue /* Windows.Win32.Foundation.HRESULT */ {
  return libMFSENSORGROUP_dll.MFCreateVirtualCamera!(type, lifetime, access, util.pwstrToFfi(friendlyName), util.pwstrToFfi(sourceId), util.toPointer(categories), categoryCount, util.toPointer(virtualCamera));
}

export function MFIsVirtualCameraTypeSupported(
  type: MFVirtualCameraType /* Windows.Win32.Media.MediaFoundation.MFVirtualCameraType */,
  supported: Deno.PointerValue | Uint8Array /* ptr */,
): Deno.PointerValue /* Windows.Win32.Foundation.HRESULT */ {
  return libMFSENSORGROUP_dll.MFIsVirtualCameraTypeSupported!(type, util.toPointer(supported));
}

export function OPMXboxEnableHDCP(
  HDCPType: OPM_HDCP_TYPE /* Windows.Win32.Media.MediaFoundation.OPM_HDCP_TYPE */,
): Deno.PointerValue /* Windows.Win32.Foundation.HRESULT */ {
  return libOPMXbox_dll.OPMXboxEnableHDCP!(HDCPType);
}

export function OPMXboxGetHDCPStatus(
  pHDCPStatus: Deno.PointerValue | Uint8Array /* ptr */,
): Deno.PointerValue /* Windows.Win32.Foundation.HRESULT */ {
  return libOPMXbox_dll.OPMXboxGetHDCPStatus!(util.toPointer(pHDCPStatus));
}

export function OPMXboxGetHDCPStatusAndType(
  pHDCPStatus: Deno.PointerValue | Uint8Array /* ptr */,
  pHDCPType: Deno.PointerValue | Uint8Array /* ptr */,
): Deno.PointerValue /* Windows.Win32.Foundation.HRESULT */ {
  return libOPMXbox_dll.OPMXboxGetHDCPStatusAndType!(util.toPointer(pHDCPStatus), util.toPointer(pHDCPType));
}

