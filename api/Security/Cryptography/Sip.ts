/// Auto-generated by Deno Win32: Windows.Win32.Security.Cryptography.Sip.Apis

import * as util from "../../../util.ts";

// Enums
export type CERT_QUERY_ENCODING_TYPE = number;

// Constants
export const MSSIP_FLAGS_PROHIBIT_RESIZE_ON_CREATE = 65536;
export const MSSIP_FLAGS_USE_CATALOG = 131072;
export const MSSIP_FLAGS_MULTI_HASH = 262144;
export const SPC_INC_PE_RESOURCES_FLAG = 128;
export const SPC_INC_PE_DEBUG_INFO_FLAG = 64;
export const SPC_INC_PE_IMPORT_ADDR_TABLE_FLAG = 32;
export const SPC_EXC_PE_PAGE_HASHES_FLAG = 16;
export const SPC_INC_PE_PAGE_HASHES_FLAG = 256;
export const SPC_DIGEST_GENERATE_FLAG = 512;
export const SPC_DIGEST_SIGN_FLAG = 1024;
export const SPC_DIGEST_SIGN_EX_FLAG = 16384;
export const SPC_RELAXED_PE_MARKER_CHECK = 2048;
export const SPC_MARKER_CHECK_SKIP_SIP_INDIRECT_DATA_FLAG = 1;
export const SPC_MARKER_CHECK_CURRENTLY_SUPPORTED_FLAGS = 1;
export const MSSIP_ADDINFO_NONE = 0;
export const MSSIP_ADDINFO_FLAT = 1;
export const MSSIP_ADDINFO_CATMEMBER = 2;
export const MSSIP_ADDINFO_BLOB = 3;
export const MSSIP_ADDINFO_NONMSSIP = 500;
export const SIP_CAP_SET_VERSION_2 = 2;
export const SIP_CAP_SET_VERSION_3 = 3;
export const SIP_CAP_SET_CUR_VER = 3;
export const SIP_CAP_FLAG_SEALING = 1;
export const SIP_MAX_MAGIC_NUMBER = 4;
export const X509_ASN_ENCODING = 1;
export const PKCS_7_ASN_ENCODING = 65536;

// Structs

export type HANDLE = Deno.PointerValue;

export type PWSTR = Deno.PointerValue | Uint8Array | null;

export type PSTR = Deno.PointerValue | Uint8Array | null;

/**
 * Windows.Win32.Security.Cryptography.CRYPTOAPI_BLOB (size: 16)
 */
export interface CRYPTOAPI_BLOB {
  /** u32 */
  cbData: number;
  /** ptr */
  pbData: Deno.PointerValue | Uint8Array | null;
}

export const sizeofCRYPTOAPI_BLOB = 16;

export function allocCRYPTOAPI_BLOB(data?: Partial<CRYPTOAPI_BLOB>): Uint8Array {
  const buf = new Uint8Array(sizeofCRYPTOAPI_BLOB);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.cbData !== undefined) view.setUint32(0, Number(data.cbData), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.pbData !== undefined) view.setBigUint64(8, data.pbData === null ? 0n : BigInt(util.toPointer(data.pbData)), true);
  return buf;
}

/**
 * Windows.Win32.Security.Cryptography.CRYPT_ALGORITHM_IDENTIFIER (size: 16)
 */
export interface CRYPT_ALGORITHM_IDENTIFIER {
  /** Windows.Win32.Foundation.PSTR */
  pszObjId: string | null | Uint8Array;
  /** Windows.Win32.Security.Cryptography.CRYPTOAPI_BLOB */
  Parameters: Uint8Array | Deno.PointerValue | null;
}

export const sizeofCRYPT_ALGORITHM_IDENTIFIER = 16;

export function allocCRYPT_ALGORITHM_IDENTIFIER(data?: Partial<CRYPT_ALGORITHM_IDENTIFIER>): Uint8Array {
  const buf = new Uint8Array(sizeofCRYPT_ALGORITHM_IDENTIFIER);
  const view = new DataView(buf.buffer);
  // 0x00: buffer
  if (data?.pszObjId !== undefined) {
    (buf as any)._f0 = util.pstrToFfi(data.pszObjId);
    view.setBigUint64(0, (buf as any)._f0 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f0)), true);
  }
  // 0x08: pointer
  if (data?.Parameters !== undefined) view.setBigUint64(8, data.Parameters === null ? 0n : BigInt(util.toPointer(data.Parameters)), true);
  return buf;
}

/**
 * _Anonymous_e__Struct (size: 16)
 */
export interface _Anonymous_e__Struct {
  /** u64 */
  Alignment: Deno.PointerValue;
  /** u64 */
  Region: Deno.PointerValue;
}

export const sizeof_Anonymous_e__Struct = 16;

export function alloc_Anonymous_e__Struct(data?: Partial<_Anonymous_e__Struct>): Uint8Array {
  const buf = new Uint8Array(sizeof_Anonymous_e__Struct);
  const view = new DataView(buf.buffer);
  // 0x00: u64
  if (data?.Alignment !== undefined) view.setBigUint64(0, BigInt(data.Alignment), true);
  // 0x08: u64
  if (data?.Region !== undefined) view.setBigUint64(8, BigInt(data.Region), true);
  return buf;
}

/**
 * _Anonymous_e__Union (size: 16)
 */
export interface _Anonymous_e__Union {
  /** _Anonymous_e__Struct */
  Anonymous: Uint8Array | Deno.PointerValue | null;
  /** array */
  X: Deno.PointerValue | null;
}

export const sizeof_Anonymous_e__Union = 16;

export function alloc_Anonymous_e__Union(data?: Partial<_Anonymous_e__Union>): Uint8Array {
  const buf = new Uint8Array(sizeof_Anonymous_e__Union);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.Anonymous !== undefined) view.setBigUint64(0, data.Anonymous === null ? 0n : BigInt(util.toPointer(data.Anonymous)), true);
  // 0x08: pointer
  if (data?.X !== undefined) view.setBigUint64(8, data.X === null ? 0n : BigInt(util.toPointer(data.X)), true);
  return buf;
}

/**
 * Windows.Win32.Security.Cryptography.Sip.SIP_SUBJECTINFO (size: 112)
 */
export interface SIP_SUBJECTINFO {
  /** u32 */
  cbSize: number;
  /** ptr */
  pgSubjectType: Deno.PointerValue | Uint8Array | null;
  /** Windows.Win32.Foundation.HANDLE */
  hFile: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Foundation.PWSTR */
  pwsFileName: string | null | Uint8Array | Uint16Array;
  /** Windows.Win32.Foundation.PWSTR */
  pwsDisplayName: string | null | Uint8Array | Uint16Array;
  /** u32 */
  dwReserved1: number;
  /** u32 */
  dwIntVersion: number;
  /** usize */
  hProv: Deno.PointerValue;
  /** Windows.Win32.Security.Cryptography.CRYPT_ALGORITHM_IDENTIFIER */
  DigestAlgorithm: Uint8Array | Deno.PointerValue | null;
  /** u32 */
  dwFlags: number;
  /** u32 */
  dwEncodingType: number;
  /** u32 */
  dwReserved2: number;
  /** u32 */
  fdwCAPISettings: number;
  /** u32 */
  fdwSecuritySettings: number;
  /** u32 */
  dwIndex: number;
  /** u32 */
  dwUnionChoice: number;
  /** _Anonymous_e__Union */
  Anonymous: Uint8Array | Deno.PointerValue | null;
  /** ptr */
  pClientData: Deno.PointerValue | Uint8Array | null;
}

export const sizeofSIP_SUBJECTINFO = 112;

export function allocSIP_SUBJECTINFO(data?: Partial<SIP_SUBJECTINFO>): Uint8Array {
  const buf = new Uint8Array(sizeofSIP_SUBJECTINFO);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.cbSize !== undefined) view.setUint32(0, Number(data.cbSize), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.pgSubjectType !== undefined) view.setBigUint64(8, data.pgSubjectType === null ? 0n : BigInt(util.toPointer(data.pgSubjectType)), true);
  // 0x10: pointer
  if (data?.hFile !== undefined) view.setBigUint64(16, data.hFile === null ? 0n : BigInt(util.toPointer(data.hFile)), true);
  // 0x18: buffer
  if (data?.pwsFileName !== undefined) {
    (buf as any)._f24 = util.pwstrToFfi(data.pwsFileName);
    view.setBigUint64(24, (buf as any)._f24 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f24)), true);
  }
  // 0x20: buffer
  if (data?.pwsDisplayName !== undefined) {
    (buf as any)._f32 = util.pwstrToFfi(data.pwsDisplayName);
    view.setBigUint64(32, (buf as any)._f32 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f32)), true);
  }
  // 0x28: u32
  if (data?.dwReserved1 !== undefined) view.setUint32(40, Number(data.dwReserved1), true);
  // 0x2c: u32
  if (data?.dwIntVersion !== undefined) view.setUint32(44, Number(data.dwIntVersion), true);
  // 0x30: usize
  if (data?.hProv !== undefined) view.setBigUint64(48, BigInt(data.hProv), true);
  // 0x38: pointer
  if (data?.DigestAlgorithm !== undefined) view.setBigUint64(56, data.DigestAlgorithm === null ? 0n : BigInt(util.toPointer(data.DigestAlgorithm)), true);
  // 0x40: u32
  if (data?.dwFlags !== undefined) view.setUint32(64, Number(data.dwFlags), true);
  // 0x44: u32
  if (data?.dwEncodingType !== undefined) view.setUint32(68, Number(data.dwEncodingType), true);
  // 0x48: u32
  if (data?.dwReserved2 !== undefined) view.setUint32(72, Number(data.dwReserved2), true);
  // 0x4c: u32
  if (data?.fdwCAPISettings !== undefined) view.setUint32(76, Number(data.fdwCAPISettings), true);
  // 0x50: u32
  if (data?.fdwSecuritySettings !== undefined) view.setUint32(80, Number(data.fdwSecuritySettings), true);
  // 0x54: u32
  if (data?.dwIndex !== undefined) view.setUint32(84, Number(data.dwIndex), true);
  // 0x58: u32
  if (data?.dwUnionChoice !== undefined) view.setUint32(88, Number(data.dwUnionChoice), true);
  // 0x5c: pad4
  // 0x60: pointer
  if (data?.Anonymous !== undefined) view.setBigUint64(96, data.Anonymous === null ? 0n : BigInt(util.toPointer(data.Anonymous)), true);
  // 0x68: pointer
  if (data?.pClientData !== undefined) view.setBigUint64(104, data.pClientData === null ? 0n : BigInt(util.toPointer(data.pClientData)), true);
  return buf;
}

/**
 * Windows.Win32.Security.Cryptography.Sip.MS_ADDINFO_FLAT (size: 16)
 */
export interface MS_ADDINFO_FLAT {
  /** u32 */
  cbStruct: number;
  /** ptr */
  pIndirectData: Deno.PointerValue | Uint8Array | null;
}

export const sizeofMS_ADDINFO_FLAT = 16;

export function allocMS_ADDINFO_FLAT(data?: Partial<MS_ADDINFO_FLAT>): Uint8Array {
  const buf = new Uint8Array(sizeofMS_ADDINFO_FLAT);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.cbStruct !== undefined) view.setUint32(0, Number(data.cbStruct), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.pIndirectData !== undefined) view.setBigUint64(8, data.pIndirectData === null ? 0n : BigInt(util.toPointer(data.pIndirectData)), true);
  return buf;
}

/**
 * Windows.Win32.Security.Cryptography.Sip.MS_ADDINFO_BLOB (size: 32)
 */
export interface MS_ADDINFO_BLOB {
  /** u32 */
  cbStruct: number;
  /** u32 */
  cbMemObject: number;
  /** ptr */
  pbMemObject: Deno.PointerValue | Uint8Array | null;
  /** u32 */
  cbMemSignedMsg: number;
  /** ptr */
  pbMemSignedMsg: Deno.PointerValue | Uint8Array | null;
}

export const sizeofMS_ADDINFO_BLOB = 32;

export function allocMS_ADDINFO_BLOB(data?: Partial<MS_ADDINFO_BLOB>): Uint8Array {
  const buf = new Uint8Array(sizeofMS_ADDINFO_BLOB);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.cbStruct !== undefined) view.setUint32(0, Number(data.cbStruct), true);
  // 0x04: u32
  if (data?.cbMemObject !== undefined) view.setUint32(4, Number(data.cbMemObject), true);
  // 0x08: pointer
  if (data?.pbMemObject !== undefined) view.setBigUint64(8, data.pbMemObject === null ? 0n : BigInt(util.toPointer(data.pbMemObject)), true);
  // 0x10: u32
  if (data?.cbMemSignedMsg !== undefined) view.setUint32(16, Number(data.cbMemSignedMsg), true);
  // 0x14: pad4
  // 0x18: pointer
  if (data?.pbMemSignedMsg !== undefined) view.setBigUint64(24, data.pbMemSignedMsg === null ? 0n : BigInt(util.toPointer(data.pbMemSignedMsg)), true);
  return buf;
}

export type BOOL = number;

/**
 * Windows.Win32.Security.Cryptography.Sip.SIP_CAP_SET_V2 (size: 16)
 */
export interface SIP_CAP_SET_V2 {
  /** u32 */
  cbSize: number;
  /** u32 */
  dwVersion: number;
  /** Windows.Win32.Foundation.BOOL */
  isMultiSign: boolean;
  /** u32 */
  dwReserved: number;
}

export const sizeofSIP_CAP_SET_V2 = 16;

export function allocSIP_CAP_SET_V2(data?: Partial<SIP_CAP_SET_V2>): Uint8Array {
  const buf = new Uint8Array(sizeofSIP_CAP_SET_V2);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.cbSize !== undefined) view.setUint32(0, Number(data.cbSize), true);
  // 0x04: u32
  if (data?.dwVersion !== undefined) view.setUint32(4, Number(data.dwVersion), true);
  // 0x08: i32
  if (data?.isMultiSign !== undefined) view.setInt32(8, Number(data.isMultiSign), true);
  // 0x0c: u32
  if (data?.dwReserved !== undefined) view.setUint32(12, Number(data.dwReserved), true);
  return buf;
}

/**
 * Windows.Win32.Security.Cryptography.Sip.SIP_CAP_SET_V3 (size: 24)
 */
export interface SIP_CAP_SET_V3 {
  /** u32 */
  cbSize: number;
  /** u32 */
  dwVersion: number;
  /** Windows.Win32.Foundation.BOOL */
  isMultiSign: boolean;
  /** _Anonymous_e__Union */
  Anonymous: Uint8Array | Deno.PointerValue | null;
}

export const sizeofSIP_CAP_SET_V3 = 24;

export function allocSIP_CAP_SET_V3(data?: Partial<SIP_CAP_SET_V3>): Uint8Array {
  const buf = new Uint8Array(sizeofSIP_CAP_SET_V3);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.cbSize !== undefined) view.setUint32(0, Number(data.cbSize), true);
  // 0x04: u32
  if (data?.dwVersion !== undefined) view.setUint32(4, Number(data.dwVersion), true);
  // 0x08: i32
  if (data?.isMultiSign !== undefined) view.setInt32(8, Number(data.isMultiSign), true);
  // 0x0c: pad4
  // 0x10: pointer
  if (data?.Anonymous !== undefined) view.setBigUint64(16, data.Anonymous === null ? 0n : BigInt(util.toPointer(data.Anonymous)), true);
  return buf;
}

/**
 * Windows.Win32.Security.Cryptography.CRYPT_ATTRIBUTE_TYPE_VALUE (size: 16)
 */
export interface CRYPT_ATTRIBUTE_TYPE_VALUE {
  /** Windows.Win32.Foundation.PSTR */
  pszObjId: string | null | Uint8Array;
  /** Windows.Win32.Security.Cryptography.CRYPTOAPI_BLOB */
  Value: Uint8Array | Deno.PointerValue | null;
}

export const sizeofCRYPT_ATTRIBUTE_TYPE_VALUE = 16;

export function allocCRYPT_ATTRIBUTE_TYPE_VALUE(data?: Partial<CRYPT_ATTRIBUTE_TYPE_VALUE>): Uint8Array {
  const buf = new Uint8Array(sizeofCRYPT_ATTRIBUTE_TYPE_VALUE);
  const view = new DataView(buf.buffer);
  // 0x00: buffer
  if (data?.pszObjId !== undefined) {
    (buf as any)._f0 = util.pstrToFfi(data.pszObjId);
    view.setBigUint64(0, (buf as any)._f0 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f0)), true);
  }
  // 0x08: pointer
  if (data?.Value !== undefined) view.setBigUint64(8, data.Value === null ? 0n : BigInt(util.toPointer(data.Value)), true);
  return buf;
}

/**
 * Windows.Win32.Security.Cryptography.Sip.SIP_INDIRECT_DATA (size: 24)
 */
export interface SIP_INDIRECT_DATA {
  /** Windows.Win32.Security.Cryptography.CRYPT_ATTRIBUTE_TYPE_VALUE */
  Data: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Security.Cryptography.CRYPT_ALGORITHM_IDENTIFIER */
  DigestAlgorithm: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Security.Cryptography.CRYPTOAPI_BLOB */
  Digest: Uint8Array | Deno.PointerValue | null;
}

export const sizeofSIP_INDIRECT_DATA = 24;

export function allocSIP_INDIRECT_DATA(data?: Partial<SIP_INDIRECT_DATA>): Uint8Array {
  const buf = new Uint8Array(sizeofSIP_INDIRECT_DATA);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.Data !== undefined) view.setBigUint64(0, data.Data === null ? 0n : BigInt(util.toPointer(data.Data)), true);
  // 0x08: pointer
  if (data?.DigestAlgorithm !== undefined) view.setBigUint64(8, data.DigestAlgorithm === null ? 0n : BigInt(util.toPointer(data.DigestAlgorithm)), true);
  // 0x10: pointer
  if (data?.Digest !== undefined) view.setBigUint64(16, data.Digest === null ? 0n : BigInt(util.toPointer(data.Digest)), true);
  return buf;
}

/**
 * Windows.Win32.Security.Cryptography.Sip.SIP_DISPATCH_INFO (size: 56)
 */
export interface SIP_DISPATCH_INFO {
  /** u32 */
  cbSize: number;
  /** Windows.Win32.Foundation.HANDLE */
  hSIP: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Security.Cryptography.Sip.pCryptSIPGetSignedDataMsg */
  pfGet: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Security.Cryptography.Sip.pCryptSIPPutSignedDataMsg */
  pfPut: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Security.Cryptography.Sip.pCryptSIPCreateIndirectData */
  pfCreate: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Security.Cryptography.Sip.pCryptSIPVerifyIndirectData */
  pfVerify: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Security.Cryptography.Sip.pCryptSIPRemoveSignedDataMsg */
  pfRemove: Uint8Array | Deno.PointerValue | null;
}

export const sizeofSIP_DISPATCH_INFO = 56;

export function allocSIP_DISPATCH_INFO(data?: Partial<SIP_DISPATCH_INFO>): Uint8Array {
  const buf = new Uint8Array(sizeofSIP_DISPATCH_INFO);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.cbSize !== undefined) view.setUint32(0, Number(data.cbSize), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.hSIP !== undefined) view.setBigUint64(8, data.hSIP === null ? 0n : BigInt(util.toPointer(data.hSIP)), true);
  // 0x10: pointer
  if (data?.pfGet !== undefined) view.setBigUint64(16, data.pfGet === null ? 0n : BigInt(util.toPointer(data.pfGet)), true);
  // 0x18: pointer
  if (data?.pfPut !== undefined) view.setBigUint64(24, data.pfPut === null ? 0n : BigInt(util.toPointer(data.pfPut)), true);
  // 0x20: pointer
  if (data?.pfCreate !== undefined) view.setBigUint64(32, data.pfCreate === null ? 0n : BigInt(util.toPointer(data.pfCreate)), true);
  // 0x28: pointer
  if (data?.pfVerify !== undefined) view.setBigUint64(40, data.pfVerify === null ? 0n : BigInt(util.toPointer(data.pfVerify)), true);
  // 0x30: pointer
  if (data?.pfRemove !== undefined) view.setBigUint64(48, data.pfRemove === null ? 0n : BigInt(util.toPointer(data.pfRemove)), true);
  return buf;
}

/**
 * Windows.Win32.Security.Cryptography.Sip.SIP_ADD_NEWPROVIDER (size: 96)
 */
export interface SIP_ADD_NEWPROVIDER {
  /** u32 */
  cbStruct: number;
  /** ptr */
  pgSubject: Deno.PointerValue | Uint8Array | null;
  /** Windows.Win32.Foundation.PWSTR */
  pwszDLLFileName: string | null | Uint8Array | Uint16Array;
  /** Windows.Win32.Foundation.PWSTR */
  pwszMagicNumber: string | null | Uint8Array | Uint16Array;
  /** Windows.Win32.Foundation.PWSTR */
  pwszIsFunctionName: string | null | Uint8Array | Uint16Array;
  /** Windows.Win32.Foundation.PWSTR */
  pwszGetFuncName: string | null | Uint8Array | Uint16Array;
  /** Windows.Win32.Foundation.PWSTR */
  pwszPutFuncName: string | null | Uint8Array | Uint16Array;
  /** Windows.Win32.Foundation.PWSTR */
  pwszCreateFuncName: string | null | Uint8Array | Uint16Array;
  /** Windows.Win32.Foundation.PWSTR */
  pwszVerifyFuncName: string | null | Uint8Array | Uint16Array;
  /** Windows.Win32.Foundation.PWSTR */
  pwszRemoveFuncName: string | null | Uint8Array | Uint16Array;
  /** Windows.Win32.Foundation.PWSTR */
  pwszIsFunctionNameFmt2: string | null | Uint8Array | Uint16Array;
  /** Windows.Win32.Foundation.PWSTR */
  pwszGetCapFuncName: string | null | Uint8Array | Uint16Array;
}

export const sizeofSIP_ADD_NEWPROVIDER = 96;

export function allocSIP_ADD_NEWPROVIDER(data?: Partial<SIP_ADD_NEWPROVIDER>): Uint8Array {
  const buf = new Uint8Array(sizeofSIP_ADD_NEWPROVIDER);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.cbStruct !== undefined) view.setUint32(0, Number(data.cbStruct), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.pgSubject !== undefined) view.setBigUint64(8, data.pgSubject === null ? 0n : BigInt(util.toPointer(data.pgSubject)), true);
  // 0x10: buffer
  if (data?.pwszDLLFileName !== undefined) {
    (buf as any)._f16 = util.pwstrToFfi(data.pwszDLLFileName);
    view.setBigUint64(16, (buf as any)._f16 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f16)), true);
  }
  // 0x18: buffer
  if (data?.pwszMagicNumber !== undefined) {
    (buf as any)._f24 = util.pwstrToFfi(data.pwszMagicNumber);
    view.setBigUint64(24, (buf as any)._f24 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f24)), true);
  }
  // 0x20: buffer
  if (data?.pwszIsFunctionName !== undefined) {
    (buf as any)._f32 = util.pwstrToFfi(data.pwszIsFunctionName);
    view.setBigUint64(32, (buf as any)._f32 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f32)), true);
  }
  // 0x28: buffer
  if (data?.pwszGetFuncName !== undefined) {
    (buf as any)._f40 = util.pwstrToFfi(data.pwszGetFuncName);
    view.setBigUint64(40, (buf as any)._f40 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f40)), true);
  }
  // 0x30: buffer
  if (data?.pwszPutFuncName !== undefined) {
    (buf as any)._f48 = util.pwstrToFfi(data.pwszPutFuncName);
    view.setBigUint64(48, (buf as any)._f48 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f48)), true);
  }
  // 0x38: buffer
  if (data?.pwszCreateFuncName !== undefined) {
    (buf as any)._f56 = util.pwstrToFfi(data.pwszCreateFuncName);
    view.setBigUint64(56, (buf as any)._f56 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f56)), true);
  }
  // 0x40: buffer
  if (data?.pwszVerifyFuncName !== undefined) {
    (buf as any)._f64 = util.pwstrToFfi(data.pwszVerifyFuncName);
    view.setBigUint64(64, (buf as any)._f64 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f64)), true);
  }
  // 0x48: buffer
  if (data?.pwszRemoveFuncName !== undefined) {
    (buf as any)._f72 = util.pwstrToFfi(data.pwszRemoveFuncName);
    view.setBigUint64(72, (buf as any)._f72 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f72)), true);
  }
  // 0x50: buffer
  if (data?.pwszIsFunctionNameFmt2 !== undefined) {
    (buf as any)._f80 = util.pwstrToFfi(data.pwszIsFunctionNameFmt2);
    view.setBigUint64(80, (buf as any)._f80 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f80)), true);
  }
  // 0x58: buffer
  if (data?.pwszGetCapFuncName !== undefined) {
    (buf as any)._f88 = util.pwstrToFfi(data.pwszGetCapFuncName);
    view.setBigUint64(88, (buf as any)._f88 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f88)), true);
  }
  return buf;
}

// Native Libraries

try {
  var libWINTRUST_dll = Deno.dlopen("WINTRUST.dll", {
    CryptSIPGetSignedDataMsg: {
      parameters: ["pointer", "pointer", "u32", "pointer", "pointer"],
      result: "i32",
    },
    CryptSIPPutSignedDataMsg: {
      parameters: ["pointer", "u32", "pointer", "u32", "pointer"],
      result: "i32",
    },
    CryptSIPCreateIndirectData: {
      parameters: ["pointer", "pointer", "pointer"],
      result: "i32",
    },
    CryptSIPVerifyIndirectData: {
      parameters: ["pointer", "pointer"],
      result: "i32",
    },
    CryptSIPRemoveSignedDataMsg: {
      parameters: ["pointer", "u32"],
      result: "i32",
    },
    CryptSIPGetCaps: {
      parameters: ["pointer", "pointer"],
      result: "i32",
    },
    CryptSIPGetSealedDigest: {
      parameters: ["pointer", "pointer", "u32", "pointer", "pointer"],
      result: "i32",
    },
  }).symbols;
} catch(e) { /* ignore */ }

try {
  var libCRYPT32_dll = Deno.dlopen("CRYPT32.dll", {
    CryptSIPLoad: {
      parameters: ["pointer", "u32", "pointer"],
      result: "i32",
    },
    CryptSIPRetrieveSubjectGuid: {
      parameters: ["buffer", "pointer", "pointer"],
      result: "i32",
    },
    CryptSIPRetrieveSubjectGuidForCatalogFile: {
      parameters: ["buffer", "pointer", "pointer"],
      result: "i32",
    },
    CryptSIPAddProvider: {
      parameters: ["pointer"],
      result: "i32",
    },
    CryptSIPRemoveProvider: {
      parameters: ["pointer"],
      result: "i32",
    },
  }).symbols;
} catch(e) { /* ignore */ }

// Symbols

export function CryptSIPGetSignedDataMsg(
  pSubjectInfo: Deno.PointerValue | Uint8Array | null /* ptr */,
  pdwEncodingType: Deno.PointerValue | Uint8Array | null /* ptr */,
  dwIndex: number /* u32 */,
  pcbSignedDataMsg: Deno.PointerValue | Uint8Array | null /* ptr */,
  pbSignedDataMsg: Deno.PointerValue | Uint8Array | null /* ptr */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libWINTRUST_dll.CryptSIPGetSignedDataMsg(util.toPointer(pSubjectInfo), util.toPointer(pdwEncodingType), dwIndex, util.toPointer(pcbSignedDataMsg), util.toPointer(pbSignedDataMsg)));
}

export function CryptSIPPutSignedDataMsg(
  pSubjectInfo: Deno.PointerValue | Uint8Array | null /* ptr */,
  dwEncodingType: CERT_QUERY_ENCODING_TYPE /* Windows.Win32.Security.Cryptography.CERT_QUERY_ENCODING_TYPE */,
  pdwIndex: Deno.PointerValue | Uint8Array | null /* ptr */,
  cbSignedDataMsg: number /* u32 */,
  pbSignedDataMsg: Deno.PointerValue | Uint8Array | null /* ptr */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libWINTRUST_dll.CryptSIPPutSignedDataMsg(util.toPointer(pSubjectInfo), dwEncodingType, util.toPointer(pdwIndex), cbSignedDataMsg, util.toPointer(pbSignedDataMsg)));
}

export function CryptSIPCreateIndirectData(
  pSubjectInfo: Deno.PointerValue | Uint8Array | null /* ptr */,
  pcbIndirectData: Deno.PointerValue | Uint8Array | null /* ptr */,
  pIndirectData: Deno.PointerValue | Uint8Array | null /* ptr */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libWINTRUST_dll.CryptSIPCreateIndirectData(util.toPointer(pSubjectInfo), util.toPointer(pcbIndirectData), util.toPointer(pIndirectData)));
}

export function CryptSIPVerifyIndirectData(
  pSubjectInfo: Deno.PointerValue | Uint8Array | null /* ptr */,
  pIndirectData: Deno.PointerValue | Uint8Array | null /* ptr */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libWINTRUST_dll.CryptSIPVerifyIndirectData(util.toPointer(pSubjectInfo), util.toPointer(pIndirectData)));
}

export function CryptSIPRemoveSignedDataMsg(
  pSubjectInfo: Deno.PointerValue | Uint8Array | null /* ptr */,
  dwIndex: number /* u32 */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libWINTRUST_dll.CryptSIPRemoveSignedDataMsg(util.toPointer(pSubjectInfo), dwIndex));
}

export function CryptSIPLoad(
  pgSubject: Deno.PointerValue | Uint8Array | null /* ptr */,
  dwFlags: number /* u32 */,
  pSipDispatch: Deno.PointerValue | Uint8Array | null /* ptr */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libCRYPT32_dll.CryptSIPLoad(util.toPointer(pgSubject), dwFlags, util.toPointer(pSipDispatch)));
}

export function CryptSIPRetrieveSubjectGuid(
  FileName: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  hFileIn: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Foundation.HANDLE */,
  pgSubject: Deno.PointerValue | Uint8Array | null /* ptr */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libCRYPT32_dll.CryptSIPRetrieveSubjectGuid(util.pwstrToFfi(FileName), util.toPointer(hFileIn), util.toPointer(pgSubject)));
}

export function CryptSIPRetrieveSubjectGuidForCatalogFile(
  FileName: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  hFileIn: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Foundation.HANDLE */,
  pgSubject: Deno.PointerValue | Uint8Array | null /* ptr */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libCRYPT32_dll.CryptSIPRetrieveSubjectGuidForCatalogFile(util.pwstrToFfi(FileName), util.toPointer(hFileIn), util.toPointer(pgSubject)));
}

export function CryptSIPAddProvider(
  psNewProv: Deno.PointerValue | Uint8Array | null /* ptr */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libCRYPT32_dll.CryptSIPAddProvider(util.toPointer(psNewProv)));
}

export function CryptSIPRemoveProvider(
  pgProv: Deno.PointerValue | Uint8Array | null /* ptr */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libCRYPT32_dll.CryptSIPRemoveProvider(util.toPointer(pgProv)));
}

export function CryptSIPGetCaps(
  pSubjInfo: Deno.PointerValue | Uint8Array | null /* ptr */,
  pCaps: Deno.PointerValue | Uint8Array | null /* ptr */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libWINTRUST_dll.CryptSIPGetCaps(util.toPointer(pSubjInfo), util.toPointer(pCaps)));
}

export function CryptSIPGetSealedDigest(
  pSubjectInfo: Deno.PointerValue | Uint8Array | null /* ptr */,
  pSig: Deno.PointerValue | Uint8Array | null /* ptr */,
  dwSig: number /* u32 */,
  pbDigest: Deno.PointerValue | Uint8Array | null /* ptr */,
  pcbDigest: Deno.PointerValue | Uint8Array | null /* ptr */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libWINTRUST_dll.CryptSIPGetSealedDigest(util.toPointer(pSubjectInfo), util.toPointer(pSig), dwSig, util.toPointer(pbDigest), util.toPointer(pcbDigest)));
}

