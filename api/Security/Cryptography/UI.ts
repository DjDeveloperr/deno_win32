/// Auto-generated by Deno Win32: Windows.Win32.Security.Cryptography.UI.Apis

import * as util from "../../../util.ts";

// Enums
export type CRYPTUI_WIZ_FLAGS = number;
export type CRYPTUI_VIEWCERTIFICATE_FLAGS = number;
export type CERT_SELECT_STRUCT_FLAGS = number;
export type CRYPTUI_WIZ_IMPORT_SUBJECT_OPTION = number;
export type CRYPTUI_WIZ_DIGITAL_SIGN_SUBJECT = number;
export type CRYPTUI_WIZ_DIGITAL_SIGN = number;
export type CRYPTUI_WIZ_EXPORT_SUBJECT = number;
export type CRYPTUI_WIZ_DIGITAL_SIGN_SIG_TYPE = number;
export type CRYPTUI_WIZ_DIGITAL_SIGN_PVK_OPTION = number;
export type CERT_VIEWPROPERTIES_STRUCT_FLAGS = number;
export type CRYPTUI_WIZ_EXPORT_FORMAT = number;
export type CRYPTUI_WIZ_DIGITAL_ADDITIONAL_CERT_CHOICE = number;
export type CTL_MODIFY_REQUEST_OPERATION = number;
export type CRYPT_KEY_FLAGS = number;

// Constants
export const CRYPTUI_WIZ_NO_UI = 1;
export const CRYPTUI_WIZ_IGNORE_NO_UI_FLAG_FOR_CSPS = 2;
export const CRYPTUI_WIZ_NO_UI_EXCEPT_CSP = 3;
export const CRYPTUI_WIZ_IMPORT_ALLOW_CERT = 131072;
export const CRYPTUI_WIZ_IMPORT_ALLOW_CRL = 262144;
export const CRYPTUI_WIZ_IMPORT_ALLOW_CTL = 524288;
export const CRYPTUI_WIZ_IMPORT_NO_CHANGE_DEST_STORE = 65536;
export const CRYPTUI_WIZ_IMPORT_TO_LOCALMACHINE = 1048576;
export const CRYPTUI_WIZ_IMPORT_TO_CURRENTUSER = 2097152;
export const CRYPTUI_WIZ_IMPORT_REMOTE_DEST_STORE = 4194304;
export const CRYPTUI_WIZ_EXPORT_PRIVATE_KEY = 256;
export const CRYPTUI_WIZ_EXPORT_NO_DELETE_PRIVATE_KEY = 512;
export const CRYPTUI_HIDE_HIERARCHYPAGE = 1;
export const CRYPTUI_HIDE_DETAILPAGE = 2;
export const CRYPTUI_DISABLE_EDITPROPERTIES = 4;
export const CRYPTUI_ENABLE_EDITPROPERTIES = 8;
export const CRYPTUI_DISABLE_ADDTOSTORE = 16;
export const CRYPTUI_ENABLE_ADDTOSTORE = 32;
export const CRYPTUI_ACCEPT_DECLINE_STYLE = 64;
export const CRYPTUI_IGNORE_UNTRUSTED_ROOT = 128;
export const CRYPTUI_DONT_OPEN_STORES = 256;
export const CRYPTUI_ONLY_OPEN_ROOT_STORE = 512;
export const CRYPTUI_WARN_UNTRUSTED_ROOT = 1024;
export const CRYPTUI_ENABLE_REVOCATION_CHECKING = 2048;
export const CRYPTUI_WARN_REMOTE_TRUST = 4096;
export const CRYPTUI_DISABLE_EXPORT = 8192;
export const CRYPTUI_ENABLE_REVOCATION_CHECK_END_CERT = 16384;
export const CRYPTUI_ENABLE_REVOCATION_CHECK_CHAIN = 32768;
export const CRYPTUI_ENABLE_REVOCATION_CHECK_CHAIN_EXCLUDE_ROOT = 2048;
export const CRYPTUI_DISABLE_HTMLLINK = 65536;
export const CRYPTUI_DISABLE_ISSUERSTATEMENT = 131072;
export const CRYPTUI_CACHE_ONLY_URL_RETRIEVAL = 262144;
export const CSS_HIDE_PROPERTIES = 1;
export const CSS_ENABLEHOOK = 2;
export const CSS_ALLOWMULTISELECT = 4;
export const CSS_SHOW_HELP = 16;
export const CSS_ENABLETEMPLATE = 32;
export const CSS_ENABLETEMPLATEHANDLE = 64;
export const CRYPTUI_WIZ_IMPORT_SUBJECT_FILE = 1;
export const CRYPTUI_WIZ_IMPORT_SUBJECT_CERT_CONTEXT = 2;
export const CRYPTUI_WIZ_IMPORT_SUBJECT_CTL_CONTEXT = 3;
export const CRYPTUI_WIZ_IMPORT_SUBJECT_CRL_CONTEXT = 4;
export const CRYPTUI_WIZ_IMPORT_SUBJECT_CERT_STORE = 5;
export const CRYPTUI_WIZ_DIGITAL_SIGN_SUBJECT_BLOB = 2;
export const CRYPTUI_WIZ_DIGITAL_SIGN_SUBJECT_FILE = 1;
export const CRYPTUI_WIZ_DIGITAL_SIGN_SUBJECT_NONE = 0;
export const CRYPTUI_WIZ_DIGITAL_SIGN_CERT = 1;
export const CRYPTUI_WIZ_DIGITAL_SIGN_STORE = 2;
export const CRYPTUI_WIZ_DIGITAL_SIGN_PVK = 3;
export const CRYPTUI_WIZ_DIGITAL_SIGN_NONE = 0;
export const CRYPTUI_WIZ_EXPORT_CERT_CONTEXT = 1;
export const CRYPTUI_WIZ_EXPORT_CTL_CONTEXT = 2;
export const CRYPTUI_WIZ_EXPORT_CRL_CONTEXT = 3;
export const CRYPTUI_WIZ_EXPORT_CERT_STORE = 4;
export const CRYPTUI_WIZ_EXPORT_CERT_STORE_CERTIFICATES_ONLY = 5;
export const CRYPTUI_WIZ_DIGITAL_SIGN_COMMERCIAL = 1;
export const CRYPTUI_WIZ_DIGITAL_SIGN_INDIVIDUAL = 2;
export const CRYPTUI_WIZ_DIGITAL_SIGN_PVK_FILE = 1;
export const CRYPTUI_WIZ_DIGITAL_SIGN_PVK_PROV = 2;
export const CM_ENABLEHOOK = 1;
export const CM_SHOW_HELP = 2;
export const CM_SHOW_HELPICON = 4;
export const CM_ENABLETEMPLATE = 8;
export const CM_HIDE_ADVANCEPAGE = 16;
export const CM_HIDE_TRUSTPAGE = 32;
export const CM_NO_NAMECHANGE = 64;
export const CM_NO_EDITTRUST = 128;
export const CM_HIDE_DETAILPAGE = 256;
export const CM_ADD_CERT_STORES = 512;
export const CRYPTUI_WIZ_EXPORT_FORMAT_DER = 1;
export const CRYPTUI_WIZ_EXPORT_FORMAT_PFX = 2;
export const CRYPTUI_WIZ_EXPORT_FORMAT_PKCS7 = 3;
export const CRYPTUI_WIZ_EXPORT_FORMAT_BASE64 = 4;
export const CRYPTUI_WIZ_EXPORT_FORMAT_CRL = 6;
export const CRYPTUI_WIZ_EXPORT_FORMAT_CTL = 7;
export const CRYPTUI_WIZ_DIGITAL_SIGN_ADD_CHAIN = 1;
export const CRYPTUI_WIZ_DIGITAL_SIGN_ADD_CHAIN_NO_ROOT = 2;
export const CRYPTUI_WIZ_DIGITAL_SIGN_ADD_NONE = 0;
export const CTL_MODIFY_REQUEST_ADD_TRUSTED = 3;
export const CTL_MODIFY_REQUEST_ADD_NOT_TRUSTED = 1;
export const CTL_MODIFY_REQUEST_REMOVE = 2;
export const CRYTPDLG_FLAGS_MASK = 4278190080;
export const CRYPTDLG_REVOCATION_DEFAULT = 0;
export const CRYPTDLG_REVOCATION_ONLINE = 2147483648;
export const CRYPTDLG_REVOCATION_CACHE = 1073741824;
export const CRYPTDLG_REVOCATION_NONE = 536870912;
export const CRYPTDLG_CACHE_ONLY_URL_RETRIEVAL = 268435456;
export const CRYPTDLG_DISABLE_AIA = 134217728;
export const CRYPTDLG_POLICY_MASK = 65535;
export const POLICY_IGNORE_NON_CRITICAL_BC = 1;
export const CRYPTDLG_ACTION_MASK = 4294901760;
export const ACTION_REVOCATION_DEFAULT_ONLINE = 65536;
export const ACTION_REVOCATION_DEFAULT_CACHE = 131072;
export const CERT_DISPWELL_SELECT = 1;
export const CERT_DISPWELL_TRUST_CA_CERT = 2;
export const CERT_DISPWELL_TRUST_LEAF_CERT = 3;
export const CERT_DISPWELL_TRUST_ADD_CA_CERT = 4;
export const CERT_DISPWELL_TRUST_ADD_LEAF_CERT = 5;
export const CERT_DISPWELL_DISTRUST_CA_CERT = 6;
export const CERT_DISPWELL_DISTRUST_LEAF_CERT = 7;
export const CERT_DISPWELL_DISTRUST_ADD_CA_CERT = 8;
export const CERT_DISPWELL_DISTRUST_ADD_LEAF_CERT = 9;
export const CSS_SELECTCERT_MASK = 16777215;
export const SELCERT_PROPERTIES = 100;
export const SELCERT_FINEPRINT = 101;
export const SELCERT_CERTLIST = 102;
export const SELCERT_ISSUED_TO = 103;
export const SELCERT_VALIDITY = 104;
export const SELCERT_ALGORITHM = 105;
export const SELCERT_SERIAL_NUM = 106;
export const SELCERT_THUMBPRINT = 107;
export const CM_VIEWFLAGS_MASK = 16777215;
export const CERTVIEW_CRYPTUI_LPARAM = 8388608;
export const CERT_FILTER_OP_EXISTS = 1;
export const CERT_FILTER_OP_NOT_EXISTS = 2;
export const CERT_FILTER_OP_EQUALITY = 3;
export const CERT_FILTER_INCLUDE_V1_CERTS = 1;
export const CERT_FILTER_VALID_TIME_RANGE = 2;
export const CERT_FILTER_VALID_SIGNATURE = 4;
export const CERT_FILTER_LEAF_CERTS_ONLY = 8;
export const CERT_FILTER_ISSUER_CERTS_ONLY = 16;
export const CERT_FILTER_KEY_EXISTS = 32;
export const szCERT_CERTIFICATE_ACTION_VERIFY = `{7801ebd0-cf4b-11d0-851f-0060979387ea}`;
export const CERT_VALIDITY_BEFORE_START = 1;
export const CERT_VALIDITY_AFTER_END = 2;
export const CERT_VALIDITY_SIGNATURE_FAILS = 4;
export const CERT_VALIDITY_CERTIFICATE_REVOKED = 8;
export const CERT_VALIDITY_KEY_USAGE_EXT_FAILURE = 16;
export const CERT_VALIDITY_EXTENDED_USAGE_FAILURE = 32;
export const CERT_VALIDITY_NAME_CONSTRAINTS_FAILURE = 64;
export const CERT_VALIDITY_UNKNOWN_CRITICAL_EXTENSION = 128;
export const CERT_VALIDITY_ISSUER_INVALID = 256;
export const CERT_VALIDITY_OTHER_EXTENSION_FAILURE = 512;
export const CERT_VALIDITY_PERIOD_NESTING_FAILURE = 1024;
export const CERT_VALIDITY_OTHER_ERROR = 2048;
export const CERT_VALIDITY_ISSUER_DISTRUST = 33554432;
export const CERT_VALIDITY_EXPLICITLY_DISTRUSTED = 16777216;
export const CERT_VALIDITY_NO_ISSUER_CERT_FOUND = 268435456;
export const CERT_VALIDITY_NO_CRL_FOUND = 536870912;
export const CERT_VALIDITY_CRL_OUT_OF_DATE = 1073741824;
export const CERT_VALIDITY_NO_TRUST_DATA = 2147483648;
export const CERT_VALIDITY_MASK_TRUST = 4294901760;
export const CERT_VALIDITY_MASK_VALIDITY = 65535;
export const CERT_TRUST_MASK = 16777215;
export const CERT_TRUST_DO_FULL_SEARCH = 1;
export const CERT_TRUST_PERMIT_MISSING_CRLS = 2;
export const CERT_TRUST_DO_FULL_TRUST = 5;
export const CERT_CREDENTIAL_PROVIDER_ID = `-509`;
export const CRYPTUI_SELECT_ISSUEDTO_COLUMN = 1;
export const CRYPTUI_SELECT_ISSUEDBY_COLUMN = 2;
export const CRYPTUI_SELECT_INTENDEDUSE_COLUMN = 4;
export const CRYPTUI_SELECT_FRIENDLYNAME_COLUMN = 8;
export const CRYPTUI_SELECT_LOCATION_COLUMN = 16;
export const CRYPTUI_SELECT_EXPIRATION_COLUMN = 32;
export const CRYPTUI_CERT_MGR_TAB_MASK = 15;
export const CRYPTUI_CERT_MGR_PUBLISHER_TAB = 4;
export const CRYPTUI_CERT_MGR_SINGLE_TAB_FLAG = 32768;
export const CRYPTUI_WIZ_DIGITAL_SIGN_EXCLUDE_PAGE_HASHES = 2;
export const CRYPTUI_WIZ_DIGITAL_SIGN_INCLUDE_PAGE_HASHES = 4;
export const CRYPTUI_WIZ_EXPORT_FORMAT_SERIALIZED_CERT_STORE = 5;
export const CRYPT_EXPORTABLE = 1;
export const CRYPT_USER_PROTECTED = 2;
export const CRYPT_ARCHIVABLE = 16384;
export const CRYPT_CREATE_IV = 512;
export const CRYPT_CREATE_SALT = 4;
export const CRYPT_DATA_KEY = 2048;
export const CRYPT_FORCE_KEY_PROTECTION_HIGH = 32768;
export const CRYPT_KEK = 1024;
export const CRYPT_INITIATOR = 64;
export const CRYPT_NO_SALT = 16;
export const CRYPT_ONLINE = 128;
export const CRYPT_PREGEN = 64;
export const CRYPT_RECIPIENT = 16;
export const CRYPT_SF = 256;
export const CRYPT_SGCKEY = 8192;
export const CRYPT_VOLATILE = 4096;
export const CRYPT_MACHINE_KEYSET = 32;
export const CRYPT_USER_KEYSET = 4096;
export const PKCS12_PREFER_CNG_KSP = 256;
export const PKCS12_ALWAYS_CNG_KSP = 512;
export const PKCS12_ALLOW_OVERWRITE_KEY = 16384;
export const PKCS12_NO_PERSIST_KEY = 32768;
export const PKCS12_INCLUDE_EXTENDED_PROPERTIES = 16;
export const CRYPT_OAEP = 64;
export const CRYPT_BLOB_VER3 = 128;
export const CRYPT_DESTROYKEY = 4;
export const CRYPT_SSL2_FALLBACK = 2;
export const CRYPT_Y_ONLY = 1;
export const CRYPT_IPSEC_HMAC_KEY = 256;
export const CERT_SET_KEY_PROV_HANDLE_PROP_ID = 1;
export const CERT_SET_KEY_CONTEXT_PROP_ID = 1;

// Structs

export type HWND = Deno.PointerValue;

export type HINSTANCE = Deno.PointerValue;

export type PSTR = Deno.PointerValue | Uint8Array | null;

export type LPARAM = Deno.PointerValue;

/**
 * Windows.Win32.Security.Cryptography.UI.CERT_SELECT_STRUCT_A (size: 136)
 */
export interface CERT_SELECT_STRUCT_A {
  /** u32 */
  dwSize: number;
  /** Windows.Win32.Foundation.HWND */
  hwndParent: Deno.PointerValue | null;
  /** Windows.Win32.Foundation.HINSTANCE */
  hInstance: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Foundation.PSTR */
  pTemplateName: string | null | Uint8Array;
  /** Windows.Win32.Security.Cryptography.UI.CERT_SELECT_STRUCT_FLAGS */
  dwFlags: CERT_SELECT_STRUCT_FLAGS;
  /** Windows.Win32.Foundation.PSTR */
  szTitle: string | null | Uint8Array;
  /** u32 */
  cCertStore: number;
  /** ptr */
  arrayCertStore: Deno.PointerValue | Uint8Array | null;
  /** Windows.Win32.Foundation.PSTR */
  szPurposeOid: string | null | Uint8Array;
  /** u32 */
  cCertContext: number;
  /** ptr */
  arrayCertContext: Deno.PointerValue | Uint8Array | null;
  /** Windows.Win32.Foundation.LPARAM */
  lCustData: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Security.Cryptography.UI.PFNCMHOOKPROC */
  pfnHook: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Security.Cryptography.UI.PFNCMFILTERPROC */
  pfnFilter: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Foundation.PSTR */
  szHelpFileName: string | null | Uint8Array;
  /** u32 */
  dwHelpId: number;
  /** usize */
  hprov: Deno.PointerValue;
}

export const sizeofCERT_SELECT_STRUCT_A = 136;

export function allocCERT_SELECT_STRUCT_A(data?: Partial<CERT_SELECT_STRUCT_A>): Uint8Array {
  const buf = new Uint8Array(sizeofCERT_SELECT_STRUCT_A);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.dwSize !== undefined) view.setUint32(0, Number(data.dwSize), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.hwndParent !== undefined) view.setBigUint64(8, data.hwndParent === null ? 0n : BigInt(util.toPointer(data.hwndParent)), true);
  // 0x10: pointer
  if (data?.hInstance !== undefined) view.setBigUint64(16, data.hInstance === null ? 0n : BigInt(util.toPointer(data.hInstance)), true);
  // 0x18: buffer
  if (data?.pTemplateName !== undefined) {
    (buf as any)._f24 = util.pstrToFfi(data.pTemplateName);
    view.setBigUint64(24, (buf as any)._f24 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f24)), true);
  }
  // 0x20: u32
  if (data?.dwFlags !== undefined) view.setUint32(32, Number(data.dwFlags), true);
  // 0x24: pad4
  // 0x28: buffer
  if (data?.szTitle !== undefined) {
    (buf as any)._f40 = util.pstrToFfi(data.szTitle);
    view.setBigUint64(40, (buf as any)._f40 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f40)), true);
  }
  // 0x30: u32
  if (data?.cCertStore !== undefined) view.setUint32(48, Number(data.cCertStore), true);
  // 0x34: pad4
  // 0x38: pointer
  if (data?.arrayCertStore !== undefined) view.setBigUint64(56, data.arrayCertStore === null ? 0n : BigInt(util.toPointer(data.arrayCertStore)), true);
  // 0x40: buffer
  if (data?.szPurposeOid !== undefined) {
    (buf as any)._f64 = util.pstrToFfi(data.szPurposeOid);
    view.setBigUint64(64, (buf as any)._f64 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f64)), true);
  }
  // 0x48: u32
  if (data?.cCertContext !== undefined) view.setUint32(72, Number(data.cCertContext), true);
  // 0x4c: pad4
  // 0x50: pointer
  if (data?.arrayCertContext !== undefined) view.setBigUint64(80, data.arrayCertContext === null ? 0n : BigInt(util.toPointer(data.arrayCertContext)), true);
  // 0x58: pointer
  if (data?.lCustData !== undefined) view.setBigUint64(88, data.lCustData === null ? 0n : BigInt(util.toPointer(data.lCustData)), true);
  // 0x60: pointer
  if (data?.pfnHook !== undefined) view.setBigUint64(96, data.pfnHook === null ? 0n : BigInt(util.toPointer(data.pfnHook)), true);
  // 0x68: pointer
  if (data?.pfnFilter !== undefined) view.setBigUint64(104, data.pfnFilter === null ? 0n : BigInt(util.toPointer(data.pfnFilter)), true);
  // 0x70: buffer
  if (data?.szHelpFileName !== undefined) {
    (buf as any)._f112 = util.pstrToFfi(data.szHelpFileName);
    view.setBigUint64(112, (buf as any)._f112 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f112)), true);
  }
  // 0x78: u32
  if (data?.dwHelpId !== undefined) view.setUint32(120, Number(data.dwHelpId), true);
  // 0x7c: pad4
  // 0x80: usize
  if (data?.hprov !== undefined) view.setBigUint64(128, BigInt(data.hprov), true);
  return buf;
}

export type PWSTR = Deno.PointerValue | Uint8Array | null;

/**
 * Windows.Win32.Security.Cryptography.UI.CERT_SELECT_STRUCT_W (size: 136)
 */
export interface CERT_SELECT_STRUCT_W {
  /** u32 */
  dwSize: number;
  /** Windows.Win32.Foundation.HWND */
  hwndParent: Deno.PointerValue | null;
  /** Windows.Win32.Foundation.HINSTANCE */
  hInstance: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Foundation.PWSTR */
  pTemplateName: string | null | Uint8Array | Uint16Array;
  /** Windows.Win32.Security.Cryptography.UI.CERT_SELECT_STRUCT_FLAGS */
  dwFlags: CERT_SELECT_STRUCT_FLAGS;
  /** Windows.Win32.Foundation.PWSTR */
  szTitle: string | null | Uint8Array | Uint16Array;
  /** u32 */
  cCertStore: number;
  /** ptr */
  arrayCertStore: Deno.PointerValue | Uint8Array | null;
  /** Windows.Win32.Foundation.PSTR */
  szPurposeOid: string | null | Uint8Array;
  /** u32 */
  cCertContext: number;
  /** ptr */
  arrayCertContext: Deno.PointerValue | Uint8Array | null;
  /** Windows.Win32.Foundation.LPARAM */
  lCustData: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Security.Cryptography.UI.PFNCMHOOKPROC */
  pfnHook: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Security.Cryptography.UI.PFNCMFILTERPROC */
  pfnFilter: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Foundation.PWSTR */
  szHelpFileName: string | null | Uint8Array | Uint16Array;
  /** u32 */
  dwHelpId: number;
  /** usize */
  hprov: Deno.PointerValue;
}

export const sizeofCERT_SELECT_STRUCT_W = 136;

export function allocCERT_SELECT_STRUCT_W(data?: Partial<CERT_SELECT_STRUCT_W>): Uint8Array {
  const buf = new Uint8Array(sizeofCERT_SELECT_STRUCT_W);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.dwSize !== undefined) view.setUint32(0, Number(data.dwSize), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.hwndParent !== undefined) view.setBigUint64(8, data.hwndParent === null ? 0n : BigInt(util.toPointer(data.hwndParent)), true);
  // 0x10: pointer
  if (data?.hInstance !== undefined) view.setBigUint64(16, data.hInstance === null ? 0n : BigInt(util.toPointer(data.hInstance)), true);
  // 0x18: buffer
  if (data?.pTemplateName !== undefined) {
    (buf as any)._f24 = util.pwstrToFfi(data.pTemplateName);
    view.setBigUint64(24, (buf as any)._f24 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f24)), true);
  }
  // 0x20: u32
  if (data?.dwFlags !== undefined) view.setUint32(32, Number(data.dwFlags), true);
  // 0x24: pad4
  // 0x28: buffer
  if (data?.szTitle !== undefined) {
    (buf as any)._f40 = util.pwstrToFfi(data.szTitle);
    view.setBigUint64(40, (buf as any)._f40 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f40)), true);
  }
  // 0x30: u32
  if (data?.cCertStore !== undefined) view.setUint32(48, Number(data.cCertStore), true);
  // 0x34: pad4
  // 0x38: pointer
  if (data?.arrayCertStore !== undefined) view.setBigUint64(56, data.arrayCertStore === null ? 0n : BigInt(util.toPointer(data.arrayCertStore)), true);
  // 0x40: buffer
  if (data?.szPurposeOid !== undefined) {
    (buf as any)._f64 = util.pstrToFfi(data.szPurposeOid);
    view.setBigUint64(64, (buf as any)._f64 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f64)), true);
  }
  // 0x48: u32
  if (data?.cCertContext !== undefined) view.setUint32(72, Number(data.cCertContext), true);
  // 0x4c: pad4
  // 0x50: pointer
  if (data?.arrayCertContext !== undefined) view.setBigUint64(80, data.arrayCertContext === null ? 0n : BigInt(util.toPointer(data.arrayCertContext)), true);
  // 0x58: pointer
  if (data?.lCustData !== undefined) view.setBigUint64(88, data.lCustData === null ? 0n : BigInt(util.toPointer(data.lCustData)), true);
  // 0x60: pointer
  if (data?.pfnHook !== undefined) view.setBigUint64(96, data.pfnHook === null ? 0n : BigInt(util.toPointer(data.pfnHook)), true);
  // 0x68: pointer
  if (data?.pfnFilter !== undefined) view.setBigUint64(104, data.pfnFilter === null ? 0n : BigInt(util.toPointer(data.pfnFilter)), true);
  // 0x70: buffer
  if (data?.szHelpFileName !== undefined) {
    (buf as any)._f112 = util.pwstrToFfi(data.szHelpFileName);
    view.setBigUint64(112, (buf as any)._f112 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f112)), true);
  }
  // 0x78: u32
  if (data?.dwHelpId !== undefined) view.setUint32(120, Number(data.dwHelpId), true);
  // 0x7c: pad4
  // 0x80: usize
  if (data?.hprov !== undefined) view.setBigUint64(128, BigInt(data.hprov), true);
  return buf;
}

/**
 * Windows.Win32.Security.Cryptography.UI.CERT_VIEWPROPERTIES_STRUCT_A (size: 160)
 */
export interface CERT_VIEWPROPERTIES_STRUCT_A {
  /** u32 */
  dwSize: number;
  /** Windows.Win32.Foundation.HWND */
  hwndParent: Deno.PointerValue | null;
  /** Windows.Win32.Foundation.HINSTANCE */
  hInstance: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Security.Cryptography.UI.CERT_VIEWPROPERTIES_STRUCT_FLAGS */
  dwFlags: CERT_VIEWPROPERTIES_STRUCT_FLAGS;
  /** Windows.Win32.Foundation.PSTR */
  szTitle: string | null | Uint8Array;
  /** ptr */
  pCertContext: Deno.PointerValue | Uint8Array | null;
  /** ptr */
  arrayPurposes: Deno.PointerValue | Uint8Array | null;
  /** u32 */
  cArrayPurposes: number;
  /** u32 */
  cRootStores: number;
  /** ptr */
  rghstoreRoots: Deno.PointerValue | Uint8Array | null;
  /** u32 */
  cStores: number;
  /** ptr */
  rghstoreCAs: Deno.PointerValue | Uint8Array | null;
  /** u32 */
  cTrustStores: number;
  /** ptr */
  rghstoreTrust: Deno.PointerValue | Uint8Array | null;
  /** usize */
  hprov: Deno.PointerValue;
  /** Windows.Win32.Foundation.LPARAM */
  lCustData: Uint8Array | Deno.PointerValue | null;
  /** u32 */
  dwPad: number;
  /** Windows.Win32.Foundation.PSTR */
  szHelpFileName: string | null | Uint8Array;
  /** u32 */
  dwHelpId: number;
  /** u32 */
  nStartPage: number;
  /** u32 */
  cArrayPropSheetPages: number;
  /** ptr */
  arrayPropSheetPages: Deno.PointerValue | Uint8Array | null;
}

export const sizeofCERT_VIEWPROPERTIES_STRUCT_A = 160;

export function allocCERT_VIEWPROPERTIES_STRUCT_A(data?: Partial<CERT_VIEWPROPERTIES_STRUCT_A>): Uint8Array {
  const buf = new Uint8Array(sizeofCERT_VIEWPROPERTIES_STRUCT_A);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.dwSize !== undefined) view.setUint32(0, Number(data.dwSize), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.hwndParent !== undefined) view.setBigUint64(8, data.hwndParent === null ? 0n : BigInt(util.toPointer(data.hwndParent)), true);
  // 0x10: pointer
  if (data?.hInstance !== undefined) view.setBigUint64(16, data.hInstance === null ? 0n : BigInt(util.toPointer(data.hInstance)), true);
  // 0x18: u32
  if (data?.dwFlags !== undefined) view.setUint32(24, Number(data.dwFlags), true);
  // 0x1c: pad4
  // 0x20: buffer
  if (data?.szTitle !== undefined) {
    (buf as any)._f32 = util.pstrToFfi(data.szTitle);
    view.setBigUint64(32, (buf as any)._f32 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f32)), true);
  }
  // 0x28: pointer
  if (data?.pCertContext !== undefined) view.setBigUint64(40, data.pCertContext === null ? 0n : BigInt(util.toPointer(data.pCertContext)), true);
  // 0x30: pointer
  if (data?.arrayPurposes !== undefined) view.setBigUint64(48, data.arrayPurposes === null ? 0n : BigInt(util.toPointer(data.arrayPurposes)), true);
  // 0x38: u32
  if (data?.cArrayPurposes !== undefined) view.setUint32(56, Number(data.cArrayPurposes), true);
  // 0x3c: u32
  if (data?.cRootStores !== undefined) view.setUint32(60, Number(data.cRootStores), true);
  // 0x40: pointer
  if (data?.rghstoreRoots !== undefined) view.setBigUint64(64, data.rghstoreRoots === null ? 0n : BigInt(util.toPointer(data.rghstoreRoots)), true);
  // 0x48: u32
  if (data?.cStores !== undefined) view.setUint32(72, Number(data.cStores), true);
  // 0x4c: pad4
  // 0x50: pointer
  if (data?.rghstoreCAs !== undefined) view.setBigUint64(80, data.rghstoreCAs === null ? 0n : BigInt(util.toPointer(data.rghstoreCAs)), true);
  // 0x58: u32
  if (data?.cTrustStores !== undefined) view.setUint32(88, Number(data.cTrustStores), true);
  // 0x5c: pad4
  // 0x60: pointer
  if (data?.rghstoreTrust !== undefined) view.setBigUint64(96, data.rghstoreTrust === null ? 0n : BigInt(util.toPointer(data.rghstoreTrust)), true);
  // 0x68: usize
  if (data?.hprov !== undefined) view.setBigUint64(104, BigInt(data.hprov), true);
  // 0x70: pointer
  if (data?.lCustData !== undefined) view.setBigUint64(112, data.lCustData === null ? 0n : BigInt(util.toPointer(data.lCustData)), true);
  // 0x78: u32
  if (data?.dwPad !== undefined) view.setUint32(120, Number(data.dwPad), true);
  // 0x7c: pad4
  // 0x80: buffer
  if (data?.szHelpFileName !== undefined) {
    (buf as any)._f128 = util.pstrToFfi(data.szHelpFileName);
    view.setBigUint64(128, (buf as any)._f128 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f128)), true);
  }
  // 0x88: u32
  if (data?.dwHelpId !== undefined) view.setUint32(136, Number(data.dwHelpId), true);
  // 0x8c: u32
  if (data?.nStartPage !== undefined) view.setUint32(140, Number(data.nStartPage), true);
  // 0x90: u32
  if (data?.cArrayPropSheetPages !== undefined) view.setUint32(144, Number(data.cArrayPropSheetPages), true);
  // 0x94: pad4
  // 0x98: pointer
  if (data?.arrayPropSheetPages !== undefined) view.setBigUint64(152, data.arrayPropSheetPages === null ? 0n : BigInt(util.toPointer(data.arrayPropSheetPages)), true);
  return buf;
}

/**
 * Windows.Win32.Security.Cryptography.UI.CERT_VIEWPROPERTIES_STRUCT_W (size: 160)
 */
export interface CERT_VIEWPROPERTIES_STRUCT_W {
  /** u32 */
  dwSize: number;
  /** Windows.Win32.Foundation.HWND */
  hwndParent: Deno.PointerValue | null;
  /** Windows.Win32.Foundation.HINSTANCE */
  hInstance: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Security.Cryptography.UI.CERT_VIEWPROPERTIES_STRUCT_FLAGS */
  dwFlags: CERT_VIEWPROPERTIES_STRUCT_FLAGS;
  /** Windows.Win32.Foundation.PWSTR */
  szTitle: string | null | Uint8Array | Uint16Array;
  /** ptr */
  pCertContext: Deno.PointerValue | Uint8Array | null;
  /** ptr */
  arrayPurposes: Deno.PointerValue | Uint8Array | null;
  /** u32 */
  cArrayPurposes: number;
  /** u32 */
  cRootStores: number;
  /** ptr */
  rghstoreRoots: Deno.PointerValue | Uint8Array | null;
  /** u32 */
  cStores: number;
  /** ptr */
  rghstoreCAs: Deno.PointerValue | Uint8Array | null;
  /** u32 */
  cTrustStores: number;
  /** ptr */
  rghstoreTrust: Deno.PointerValue | Uint8Array | null;
  /** usize */
  hprov: Deno.PointerValue;
  /** Windows.Win32.Foundation.LPARAM */
  lCustData: Uint8Array | Deno.PointerValue | null;
  /** u32 */
  dwPad: number;
  /** Windows.Win32.Foundation.PWSTR */
  szHelpFileName: string | null | Uint8Array | Uint16Array;
  /** u32 */
  dwHelpId: number;
  /** u32 */
  nStartPage: number;
  /** u32 */
  cArrayPropSheetPages: number;
  /** ptr */
  arrayPropSheetPages: Deno.PointerValue | Uint8Array | null;
}

export const sizeofCERT_VIEWPROPERTIES_STRUCT_W = 160;

export function allocCERT_VIEWPROPERTIES_STRUCT_W(data?: Partial<CERT_VIEWPROPERTIES_STRUCT_W>): Uint8Array {
  const buf = new Uint8Array(sizeofCERT_VIEWPROPERTIES_STRUCT_W);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.dwSize !== undefined) view.setUint32(0, Number(data.dwSize), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.hwndParent !== undefined) view.setBigUint64(8, data.hwndParent === null ? 0n : BigInt(util.toPointer(data.hwndParent)), true);
  // 0x10: pointer
  if (data?.hInstance !== undefined) view.setBigUint64(16, data.hInstance === null ? 0n : BigInt(util.toPointer(data.hInstance)), true);
  // 0x18: u32
  if (data?.dwFlags !== undefined) view.setUint32(24, Number(data.dwFlags), true);
  // 0x1c: pad4
  // 0x20: buffer
  if (data?.szTitle !== undefined) {
    (buf as any)._f32 = util.pwstrToFfi(data.szTitle);
    view.setBigUint64(32, (buf as any)._f32 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f32)), true);
  }
  // 0x28: pointer
  if (data?.pCertContext !== undefined) view.setBigUint64(40, data.pCertContext === null ? 0n : BigInt(util.toPointer(data.pCertContext)), true);
  // 0x30: pointer
  if (data?.arrayPurposes !== undefined) view.setBigUint64(48, data.arrayPurposes === null ? 0n : BigInt(util.toPointer(data.arrayPurposes)), true);
  // 0x38: u32
  if (data?.cArrayPurposes !== undefined) view.setUint32(56, Number(data.cArrayPurposes), true);
  // 0x3c: u32
  if (data?.cRootStores !== undefined) view.setUint32(60, Number(data.cRootStores), true);
  // 0x40: pointer
  if (data?.rghstoreRoots !== undefined) view.setBigUint64(64, data.rghstoreRoots === null ? 0n : BigInt(util.toPointer(data.rghstoreRoots)), true);
  // 0x48: u32
  if (data?.cStores !== undefined) view.setUint32(72, Number(data.cStores), true);
  // 0x4c: pad4
  // 0x50: pointer
  if (data?.rghstoreCAs !== undefined) view.setBigUint64(80, data.rghstoreCAs === null ? 0n : BigInt(util.toPointer(data.rghstoreCAs)), true);
  // 0x58: u32
  if (data?.cTrustStores !== undefined) view.setUint32(88, Number(data.cTrustStores), true);
  // 0x5c: pad4
  // 0x60: pointer
  if (data?.rghstoreTrust !== undefined) view.setBigUint64(96, data.rghstoreTrust === null ? 0n : BigInt(util.toPointer(data.rghstoreTrust)), true);
  // 0x68: usize
  if (data?.hprov !== undefined) view.setBigUint64(104, BigInt(data.hprov), true);
  // 0x70: pointer
  if (data?.lCustData !== undefined) view.setBigUint64(112, data.lCustData === null ? 0n : BigInt(util.toPointer(data.lCustData)), true);
  // 0x78: u32
  if (data?.dwPad !== undefined) view.setUint32(120, Number(data.dwPad), true);
  // 0x7c: pad4
  // 0x80: buffer
  if (data?.szHelpFileName !== undefined) {
    (buf as any)._f128 = util.pwstrToFfi(data.szHelpFileName);
    view.setBigUint64(128, (buf as any)._f128 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f128)), true);
  }
  // 0x88: u32
  if (data?.dwHelpId !== undefined) view.setUint32(136, Number(data.dwHelpId), true);
  // 0x8c: u32
  if (data?.nStartPage !== undefined) view.setUint32(140, Number(data.nStartPage), true);
  // 0x90: u32
  if (data?.cArrayPropSheetPages !== undefined) view.setUint32(144, Number(data.cArrayPropSheetPages), true);
  // 0x94: pad4
  // 0x98: pointer
  if (data?.arrayPropSheetPages !== undefined) view.setBigUint64(152, data.arrayPropSheetPages === null ? 0n : BigInt(util.toPointer(data.arrayPropSheetPages)), true);
  return buf;
}

/**
 * Windows.Win32.Security.Cryptography.UI.CERT_FILTER_EXTENSION_MATCH (size: 32)
 */
export interface CERT_FILTER_EXTENSION_MATCH {
  /** Windows.Win32.Foundation.PSTR */
  szExtensionOID: string | null | Uint8Array;
  /** u32 */
  dwTestOperation: number;
  /** ptr */
  pbTestData: Deno.PointerValue | Uint8Array | null;
  /** u32 */
  cbTestData: number;
}

export const sizeofCERT_FILTER_EXTENSION_MATCH = 32;

export function allocCERT_FILTER_EXTENSION_MATCH(data?: Partial<CERT_FILTER_EXTENSION_MATCH>): Uint8Array {
  const buf = new Uint8Array(sizeofCERT_FILTER_EXTENSION_MATCH);
  const view = new DataView(buf.buffer);
  // 0x00: buffer
  if (data?.szExtensionOID !== undefined) {
    (buf as any)._f0 = util.pstrToFfi(data.szExtensionOID);
    view.setBigUint64(0, (buf as any)._f0 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f0)), true);
  }
  // 0x08: u32
  if (data?.dwTestOperation !== undefined) view.setUint32(8, Number(data.dwTestOperation), true);
  // 0x0c: pad4
  // 0x10: pointer
  if (data?.pbTestData !== undefined) view.setBigUint64(16, data.pbTestData === null ? 0n : BigInt(util.toPointer(data.pbTestData)), true);
  // 0x18: u32
  if (data?.cbTestData !== undefined) view.setUint32(24, Number(data.cbTestData), true);
  // 0x1c: pad4
  return buf;
}

/**
 * Windows.Win32.Security.Cryptography.UI.CERT_FILTER_DATA (size: 24)
 */
export interface CERT_FILTER_DATA {
  /** u32 */
  dwSize: number;
  /** u32 */
  cExtensionChecks: number;
  /** ptr */
  arrayExtensionChecks: Deno.PointerValue | Uint8Array | null;
  /** u32 */
  dwCheckingFlags: number;
}

export const sizeofCERT_FILTER_DATA = 24;

export function allocCERT_FILTER_DATA(data?: Partial<CERT_FILTER_DATA>): Uint8Array {
  const buf = new Uint8Array(sizeofCERT_FILTER_DATA);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.dwSize !== undefined) view.setUint32(0, Number(data.dwSize), true);
  // 0x04: u32
  if (data?.cExtensionChecks !== undefined) view.setUint32(4, Number(data.cExtensionChecks), true);
  // 0x08: pointer
  if (data?.arrayExtensionChecks !== undefined) view.setBigUint64(8, data.arrayExtensionChecks === null ? 0n : BigInt(util.toPointer(data.arrayExtensionChecks)), true);
  // 0x10: u32
  if (data?.dwCheckingFlags !== undefined) view.setUint32(16, Number(data.dwCheckingFlags), true);
  // 0x14: pad4
  return buf;
}

/**
 * Windows.Win32.Security.Cryptography.UI.CERT_VERIFY_CERTIFICATE_TRUST (size: 144)
 */
export interface CERT_VERIFY_CERTIFICATE_TRUST {
  /** u32 */
  cbSize: number;
  /** ptr */
  pccert: Deno.PointerValue | Uint8Array | null;
  /** u32 */
  dwFlags: number;
  /** u32 */
  dwIgnoreErr: number;
  /** ptr */
  pdwErrors: Deno.PointerValue | Uint8Array | null;
  /** Windows.Win32.Foundation.PSTR */
  pszUsageOid: string | null | Uint8Array;
  /** usize */
  hprov: Deno.PointerValue;
  /** u32 */
  cRootStores: number;
  /** ptr */
  rghstoreRoots: Deno.PointerValue | Uint8Array | null;
  /** u32 */
  cStores: number;
  /** ptr */
  rghstoreCAs: Deno.PointerValue | Uint8Array | null;
  /** u32 */
  cTrustStores: number;
  /** ptr */
  rghstoreTrust: Deno.PointerValue | Uint8Array | null;
  /** Windows.Win32.Foundation.LPARAM */
  lCustData: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Security.Cryptography.UI.PFNTRUSTHELPER */
  pfnTrustHelper: Uint8Array | Deno.PointerValue | null;
  /** ptr */
  pcChain: Deno.PointerValue | Uint8Array | null;
  /** ptr */
  prgChain: Deno.PointerValue | Uint8Array | null;
  /** ptr */
  prgdwErrors: Deno.PointerValue | Uint8Array | null;
  /** ptr */
  prgpbTrustInfo: Deno.PointerValue | Uint8Array | null;
}

export const sizeofCERT_VERIFY_CERTIFICATE_TRUST = 144;

export function allocCERT_VERIFY_CERTIFICATE_TRUST(data?: Partial<CERT_VERIFY_CERTIFICATE_TRUST>): Uint8Array {
  const buf = new Uint8Array(sizeofCERT_VERIFY_CERTIFICATE_TRUST);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.cbSize !== undefined) view.setUint32(0, Number(data.cbSize), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.pccert !== undefined) view.setBigUint64(8, data.pccert === null ? 0n : BigInt(util.toPointer(data.pccert)), true);
  // 0x10: u32
  if (data?.dwFlags !== undefined) view.setUint32(16, Number(data.dwFlags), true);
  // 0x14: u32
  if (data?.dwIgnoreErr !== undefined) view.setUint32(20, Number(data.dwIgnoreErr), true);
  // 0x18: pointer
  if (data?.pdwErrors !== undefined) view.setBigUint64(24, data.pdwErrors === null ? 0n : BigInt(util.toPointer(data.pdwErrors)), true);
  // 0x20: buffer
  if (data?.pszUsageOid !== undefined) {
    (buf as any)._f32 = util.pstrToFfi(data.pszUsageOid);
    view.setBigUint64(32, (buf as any)._f32 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f32)), true);
  }
  // 0x28: usize
  if (data?.hprov !== undefined) view.setBigUint64(40, BigInt(data.hprov), true);
  // 0x30: u32
  if (data?.cRootStores !== undefined) view.setUint32(48, Number(data.cRootStores), true);
  // 0x34: pad4
  // 0x38: pointer
  if (data?.rghstoreRoots !== undefined) view.setBigUint64(56, data.rghstoreRoots === null ? 0n : BigInt(util.toPointer(data.rghstoreRoots)), true);
  // 0x40: u32
  if (data?.cStores !== undefined) view.setUint32(64, Number(data.cStores), true);
  // 0x44: pad4
  // 0x48: pointer
  if (data?.rghstoreCAs !== undefined) view.setBigUint64(72, data.rghstoreCAs === null ? 0n : BigInt(util.toPointer(data.rghstoreCAs)), true);
  // 0x50: u32
  if (data?.cTrustStores !== undefined) view.setUint32(80, Number(data.cTrustStores), true);
  // 0x54: pad4
  // 0x58: pointer
  if (data?.rghstoreTrust !== undefined) view.setBigUint64(88, data.rghstoreTrust === null ? 0n : BigInt(util.toPointer(data.rghstoreTrust)), true);
  // 0x60: pointer
  if (data?.lCustData !== undefined) view.setBigUint64(96, data.lCustData === null ? 0n : BigInt(util.toPointer(data.lCustData)), true);
  // 0x68: pointer
  if (data?.pfnTrustHelper !== undefined) view.setBigUint64(104, data.pfnTrustHelper === null ? 0n : BigInt(util.toPointer(data.pfnTrustHelper)), true);
  // 0x70: pointer
  if (data?.pcChain !== undefined) view.setBigUint64(112, data.pcChain === null ? 0n : BigInt(util.toPointer(data.pcChain)), true);
  // 0x78: pointer
  if (data?.prgChain !== undefined) view.setBigUint64(120, data.prgChain === null ? 0n : BigInt(util.toPointer(data.prgChain)), true);
  // 0x80: pointer
  if (data?.prgdwErrors !== undefined) view.setBigUint64(128, data.prgdwErrors === null ? 0n : BigInt(util.toPointer(data.prgdwErrors)), true);
  // 0x88: pointer
  if (data?.prgpbTrustInfo !== undefined) view.setBigUint64(136, data.prgpbTrustInfo === null ? 0n : BigInt(util.toPointer(data.prgpbTrustInfo)), true);
  return buf;
}

/**
 * Windows.Win32.Security.Cryptography.UI.CTL_MODIFY_REQUEST (size: 16)
 */
export interface CTL_MODIFY_REQUEST {
  /** ptr */
  pccert: Deno.PointerValue | Uint8Array | null;
  /** Windows.Win32.Security.Cryptography.UI.CTL_MODIFY_REQUEST_OPERATION */
  dwOperation: CTL_MODIFY_REQUEST_OPERATION;
  /** u32 */
  dwError: number;
}

export const sizeofCTL_MODIFY_REQUEST = 16;

export function allocCTL_MODIFY_REQUEST(data?: Partial<CTL_MODIFY_REQUEST>): Uint8Array {
  const buf = new Uint8Array(sizeofCTL_MODIFY_REQUEST);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.pccert !== undefined) view.setBigUint64(0, data.pccert === null ? 0n : BigInt(util.toPointer(data.pccert)), true);
  // 0x08: u32
  if (data?.dwOperation !== undefined) view.setUint32(8, Number(data.dwOperation), true);
  // 0x0c: u32
  if (data?.dwError !== undefined) view.setUint32(12, Number(data.dwError), true);
  return buf;
}

export type HCERTSTORE = Deno.PointerValue | Uint8Array | null;

/**
 * Windows.Win32.Security.Cryptography.UI.CERT_SELECTUI_INPUT (size: 24)
 */
export interface CERT_SELECTUI_INPUT {
  /** Windows.Win32.Security.Cryptography.HCERTSTORE */
  hStore: Uint8Array | Deno.PointerValue | null;
  /** ptr */
  prgpChain: Deno.PointerValue | Uint8Array | null;
  /** u32 */
  cChain: number;
}

export const sizeofCERT_SELECTUI_INPUT = 24;

export function allocCERT_SELECTUI_INPUT(data?: Partial<CERT_SELECTUI_INPUT>): Uint8Array {
  const buf = new Uint8Array(sizeofCERT_SELECTUI_INPUT);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.hStore !== undefined) view.setBigUint64(0, data.hStore === null ? 0n : BigInt(util.toPointer(data.hStore)), true);
  // 0x08: pointer
  if (data?.prgpChain !== undefined) view.setBigUint64(8, data.prgpChain === null ? 0n : BigInt(util.toPointer(data.prgpChain)), true);
  // 0x10: u32
  if (data?.cChain !== undefined) view.setUint32(16, Number(data.cChain), true);
  // 0x14: pad4
  return buf;
}

/**
 * Windows.Win32.Security.Cryptography.UI.CRYPTUI_CERT_MGR_STRUCT (size: 40)
 */
export interface CRYPTUI_CERT_MGR_STRUCT {
  /** u32 */
  dwSize: number;
  /** Windows.Win32.Foundation.HWND */
  hwndParent: Deno.PointerValue | null;
  /** u32 */
  dwFlags: number;
  /** Windows.Win32.Foundation.PWSTR */
  pwszTitle: string | null | Uint8Array | Uint16Array;
  /** Windows.Win32.Foundation.PSTR */
  pszInitUsageOID: string | null | Uint8Array;
}

export const sizeofCRYPTUI_CERT_MGR_STRUCT = 40;

export function allocCRYPTUI_CERT_MGR_STRUCT(data?: Partial<CRYPTUI_CERT_MGR_STRUCT>): Uint8Array {
  const buf = new Uint8Array(sizeofCRYPTUI_CERT_MGR_STRUCT);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.dwSize !== undefined) view.setUint32(0, Number(data.dwSize), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.hwndParent !== undefined) view.setBigUint64(8, data.hwndParent === null ? 0n : BigInt(util.toPointer(data.hwndParent)), true);
  // 0x10: u32
  if (data?.dwFlags !== undefined) view.setUint32(16, Number(data.dwFlags), true);
  // 0x14: pad4
  // 0x18: buffer
  if (data?.pwszTitle !== undefined) {
    (buf as any)._f24 = util.pwstrToFfi(data.pwszTitle);
    view.setBigUint64(24, (buf as any)._f24 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f24)), true);
  }
  // 0x20: buffer
  if (data?.pszInitUsageOID !== undefined) {
    (buf as any)._f32 = util.pstrToFfi(data.pszInitUsageOID);
    view.setBigUint64(32, (buf as any)._f32 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f32)), true);
  }
  return buf;
}

/**
 * Windows.Win32.Security.Cryptography.UI.CRYPTUI_WIZ_DIGITAL_SIGN_BLOB_INFO (size: 40)
 */
export interface CRYPTUI_WIZ_DIGITAL_SIGN_BLOB_INFO {
  /** u32 */
  dwSize: number;
  /** ptr */
  pGuidSubject: Deno.PointerValue | Uint8Array | null;
  /** u32 */
  cbBlob: number;
  /** ptr */
  pbBlob: Deno.PointerValue | Uint8Array | null;
  /** Windows.Win32.Foundation.PWSTR */
  pwszDisplayName: string | null | Uint8Array | Uint16Array;
}

export const sizeofCRYPTUI_WIZ_DIGITAL_SIGN_BLOB_INFO = 40;

export function allocCRYPTUI_WIZ_DIGITAL_SIGN_BLOB_INFO(data?: Partial<CRYPTUI_WIZ_DIGITAL_SIGN_BLOB_INFO>): Uint8Array {
  const buf = new Uint8Array(sizeofCRYPTUI_WIZ_DIGITAL_SIGN_BLOB_INFO);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.dwSize !== undefined) view.setUint32(0, Number(data.dwSize), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.pGuidSubject !== undefined) view.setBigUint64(8, data.pGuidSubject === null ? 0n : BigInt(util.toPointer(data.pGuidSubject)), true);
  // 0x10: u32
  if (data?.cbBlob !== undefined) view.setUint32(16, Number(data.cbBlob), true);
  // 0x14: pad4
  // 0x18: pointer
  if (data?.pbBlob !== undefined) view.setBigUint64(24, data.pbBlob === null ? 0n : BigInt(util.toPointer(data.pbBlob)), true);
  // 0x20: buffer
  if (data?.pwszDisplayName !== undefined) {
    (buf as any)._f32 = util.pwstrToFfi(data.pwszDisplayName);
    view.setBigUint64(32, (buf as any)._f32 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f32)), true);
  }
  return buf;
}

/**
 * Windows.Win32.Security.Cryptography.UI.CRYPTUI_WIZ_DIGITAL_SIGN_STORE_INFO (size: 32)
 */
export interface CRYPTUI_WIZ_DIGITAL_SIGN_STORE_INFO {
  /** u32 */
  dwSize: number;
  /** u32 */
  cCertStore: number;
  /** ptr */
  rghCertStore: Deno.PointerValue | Uint8Array | null;
  /** Windows.Win32.Security.Cryptography.UI.PFNCFILTERPROC */
  pFilterCallback: Uint8Array | Deno.PointerValue | null;
  /** ptr */
  pvCallbackData: Deno.PointerValue | Uint8Array | null;
}

export const sizeofCRYPTUI_WIZ_DIGITAL_SIGN_STORE_INFO = 32;

export function allocCRYPTUI_WIZ_DIGITAL_SIGN_STORE_INFO(data?: Partial<CRYPTUI_WIZ_DIGITAL_SIGN_STORE_INFO>): Uint8Array {
  const buf = new Uint8Array(sizeofCRYPTUI_WIZ_DIGITAL_SIGN_STORE_INFO);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.dwSize !== undefined) view.setUint32(0, Number(data.dwSize), true);
  // 0x04: u32
  if (data?.cCertStore !== undefined) view.setUint32(4, Number(data.cCertStore), true);
  // 0x08: pointer
  if (data?.rghCertStore !== undefined) view.setBigUint64(8, data.rghCertStore === null ? 0n : BigInt(util.toPointer(data.rghCertStore)), true);
  // 0x10: pointer
  if (data?.pFilterCallback !== undefined) view.setBigUint64(16, data.pFilterCallback === null ? 0n : BigInt(util.toPointer(data.pFilterCallback)), true);
  // 0x18: pointer
  if (data?.pvCallbackData !== undefined) view.setBigUint64(24, data.pvCallbackData === null ? 0n : BigInt(util.toPointer(data.pvCallbackData)), true);
  return buf;
}

/**
 * Windows.Win32.Security.Cryptography.UI.CRYPTUI_WIZ_DIGITAL_SIGN_PVK_FILE_INFO (size: 32)
 */
export interface CRYPTUI_WIZ_DIGITAL_SIGN_PVK_FILE_INFO {
  /** u32 */
  dwSize: number;
  /** Windows.Win32.Foundation.PWSTR */
  pwszPvkFileName: string | null | Uint8Array | Uint16Array;
  /** Windows.Win32.Foundation.PWSTR */
  pwszProvName: string | null | Uint8Array | Uint16Array;
  /** u32 */
  dwProvType: number;
}

export const sizeofCRYPTUI_WIZ_DIGITAL_SIGN_PVK_FILE_INFO = 32;

export function allocCRYPTUI_WIZ_DIGITAL_SIGN_PVK_FILE_INFO(data?: Partial<CRYPTUI_WIZ_DIGITAL_SIGN_PVK_FILE_INFO>): Uint8Array {
  const buf = new Uint8Array(sizeofCRYPTUI_WIZ_DIGITAL_SIGN_PVK_FILE_INFO);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.dwSize !== undefined) view.setUint32(0, Number(data.dwSize), true);
  // 0x04: pad4
  // 0x08: buffer
  if (data?.pwszPvkFileName !== undefined) {
    (buf as any)._f8 = util.pwstrToFfi(data.pwszPvkFileName);
    view.setBigUint64(8, (buf as any)._f8 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f8)), true);
  }
  // 0x10: buffer
  if (data?.pwszProvName !== undefined) {
    (buf as any)._f16 = util.pwstrToFfi(data.pwszProvName);
    view.setBigUint64(16, (buf as any)._f16 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f16)), true);
  }
  // 0x18: u32
  if (data?.dwProvType !== undefined) view.setUint32(24, Number(data.dwProvType), true);
  // 0x1c: pad4
  return buf;
}

/**
 * _Anonymous_e__Struct (size: 16)
 */
export interface _Anonymous_e__Struct {
  /** u64 */
  Alignment: Deno.PointerValue;
  /** u64 */
  Region: Deno.PointerValue;
}

export const sizeof_Anonymous_e__Struct = 16;

export function alloc_Anonymous_e__Struct(data?: Partial<_Anonymous_e__Struct>): Uint8Array {
  const buf = new Uint8Array(sizeof_Anonymous_e__Struct);
  const view = new DataView(buf.buffer);
  // 0x00: u64
  if (data?.Alignment !== undefined) view.setBigUint64(0, BigInt(data.Alignment), true);
  // 0x08: u64
  if (data?.Region !== undefined) view.setBigUint64(8, BigInt(data.Region), true);
  return buf;
}

/**
 * _Anonymous_e__Union (size: 16)
 */
export interface _Anonymous_e__Union {
  /** _Anonymous_e__Struct */
  Anonymous: Uint8Array | Deno.PointerValue | null;
  /** array */
  X: Deno.PointerValue | null;
}

export const sizeof_Anonymous_e__Union = 16;

export function alloc_Anonymous_e__Union(data?: Partial<_Anonymous_e__Union>): Uint8Array {
  const buf = new Uint8Array(sizeof_Anonymous_e__Union);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.Anonymous !== undefined) view.setBigUint64(0, data.Anonymous === null ? 0n : BigInt(util.toPointer(data.Anonymous)), true);
  // 0x08: pointer
  if (data?.X !== undefined) view.setBigUint64(8, data.X === null ? 0n : BigInt(util.toPointer(data.X)), true);
  return buf;
}

/**
 * Windows.Win32.Security.Cryptography.UI.CRYPTUI_WIZ_DIGITAL_SIGN_CERT_PVK_INFO (size: 32)
 */
export interface CRYPTUI_WIZ_DIGITAL_SIGN_CERT_PVK_INFO {
  /** u32 */
  dwSize: number;
  /** Windows.Win32.Foundation.PWSTR */
  pwszSigningCertFileName: string | null | Uint8Array | Uint16Array;
  /** Windows.Win32.Security.Cryptography.UI.CRYPTUI_WIZ_DIGITAL_SIGN_PVK_OPTION */
  dwPvkChoice: CRYPTUI_WIZ_DIGITAL_SIGN_PVK_OPTION;
  /** _Anonymous_e__Union */
  Anonymous: Uint8Array | Deno.PointerValue | null;
}

export const sizeofCRYPTUI_WIZ_DIGITAL_SIGN_CERT_PVK_INFO = 32;

export function allocCRYPTUI_WIZ_DIGITAL_SIGN_CERT_PVK_INFO(data?: Partial<CRYPTUI_WIZ_DIGITAL_SIGN_CERT_PVK_INFO>): Uint8Array {
  const buf = new Uint8Array(sizeofCRYPTUI_WIZ_DIGITAL_SIGN_CERT_PVK_INFO);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.dwSize !== undefined) view.setUint32(0, Number(data.dwSize), true);
  // 0x04: pad4
  // 0x08: buffer
  if (data?.pwszSigningCertFileName !== undefined) {
    (buf as any)._f8 = util.pwstrToFfi(data.pwszSigningCertFileName);
    view.setBigUint64(8, (buf as any)._f8 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f8)), true);
  }
  // 0x10: u32
  if (data?.dwPvkChoice !== undefined) view.setUint32(16, Number(data.dwPvkChoice), true);
  // 0x14: pad4
  // 0x18: pointer
  if (data?.Anonymous !== undefined) view.setBigUint64(24, data.Anonymous === null ? 0n : BigInt(util.toPointer(data.Anonymous)), true);
  return buf;
}

/**
 * Windows.Win32.Security.Cryptography.UI.CRYPTUI_WIZ_DIGITAL_SIGN_EXTENDED_INFO (size: 64)
 */
export interface CRYPTUI_WIZ_DIGITAL_SIGN_EXTENDED_INFO {
  /** u32 */
  dwSize: number;
  /** Windows.Win32.Security.Cryptography.UI.CRYPTUI_WIZ_DIGITAL_SIGN_SIG_TYPE */
  dwAttrFlags: CRYPTUI_WIZ_DIGITAL_SIGN_SIG_TYPE;
  /** Windows.Win32.Foundation.PWSTR */
  pwszDescription: string | null | Uint8Array | Uint16Array;
  /** Windows.Win32.Foundation.PWSTR */
  pwszMoreInfoLocation: string | null | Uint8Array | Uint16Array;
  /** Windows.Win32.Foundation.PSTR */
  pszHashAlg: string | null | Uint8Array;
  /** Windows.Win32.Foundation.PWSTR */
  pwszSigningCertDisplayString: string | null | Uint8Array | Uint16Array;
  /** Windows.Win32.Security.Cryptography.HCERTSTORE */
  hAdditionalCertStore: Uint8Array | Deno.PointerValue | null;
  /** ptr */
  psAuthenticated: Deno.PointerValue | Uint8Array | null;
  /** ptr */
  psUnauthenticated: Deno.PointerValue | Uint8Array | null;
}

export const sizeofCRYPTUI_WIZ_DIGITAL_SIGN_EXTENDED_INFO = 64;

export function allocCRYPTUI_WIZ_DIGITAL_SIGN_EXTENDED_INFO(data?: Partial<CRYPTUI_WIZ_DIGITAL_SIGN_EXTENDED_INFO>): Uint8Array {
  const buf = new Uint8Array(sizeofCRYPTUI_WIZ_DIGITAL_SIGN_EXTENDED_INFO);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.dwSize !== undefined) view.setUint32(0, Number(data.dwSize), true);
  // 0x04: u32
  if (data?.dwAttrFlags !== undefined) view.setUint32(4, Number(data.dwAttrFlags), true);
  // 0x08: buffer
  if (data?.pwszDescription !== undefined) {
    (buf as any)._f8 = util.pwstrToFfi(data.pwszDescription);
    view.setBigUint64(8, (buf as any)._f8 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f8)), true);
  }
  // 0x10: buffer
  if (data?.pwszMoreInfoLocation !== undefined) {
    (buf as any)._f16 = util.pwstrToFfi(data.pwszMoreInfoLocation);
    view.setBigUint64(16, (buf as any)._f16 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f16)), true);
  }
  // 0x18: buffer
  if (data?.pszHashAlg !== undefined) {
    (buf as any)._f24 = util.pstrToFfi(data.pszHashAlg);
    view.setBigUint64(24, (buf as any)._f24 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f24)), true);
  }
  // 0x20: buffer
  if (data?.pwszSigningCertDisplayString !== undefined) {
    (buf as any)._f32 = util.pwstrToFfi(data.pwszSigningCertDisplayString);
    view.setBigUint64(32, (buf as any)._f32 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f32)), true);
  }
  // 0x28: pointer
  if (data?.hAdditionalCertStore !== undefined) view.setBigUint64(40, data.hAdditionalCertStore === null ? 0n : BigInt(util.toPointer(data.hAdditionalCertStore)), true);
  // 0x30: pointer
  if (data?.psAuthenticated !== undefined) view.setBigUint64(48, data.psAuthenticated === null ? 0n : BigInt(util.toPointer(data.psAuthenticated)), true);
  // 0x38: pointer
  if (data?.psUnauthenticated !== undefined) view.setBigUint64(56, data.psUnauthenticated === null ? 0n : BigInt(util.toPointer(data.psUnauthenticated)), true);
  return buf;
}

/**
 * _Anonymous1_e__Union (size: 64)
 */
export interface _Anonymous1_e__Union {
  /** usize */
  Data0: Deno.PointerValue;
  /** Windows.Win32.Foundation.PWSTR */
  String: string | null | Uint8Array | Uint16Array;
  /** usize */
  u: Deno.PointerValue;
  /** ptr */
  psid: Deno.PointerValue | Uint8Array | null;
  /** ptr */
  pguid: Deno.PointerValue | Uint8Array | null;
  /** u32 */
  LogonId_LowPart: number;
  /** ptr */
  pObjectTypes: Deno.PointerValue | Uint8Array | null;
  /** ptr */
  pIpAddress: Deno.PointerValue | Uint8Array | null;
}

export const sizeof_Anonymous1_e__Union = 64;

export function alloc_Anonymous1_e__Union(data?: Partial<_Anonymous1_e__Union>): Uint8Array {
  const buf = new Uint8Array(sizeof_Anonymous1_e__Union);
  const view = new DataView(buf.buffer);
  // 0x00: usize
  if (data?.Data0 !== undefined) view.setBigUint64(0, BigInt(data.Data0), true);
  // 0x08: buffer
  if (data?.String !== undefined) {
    (buf as any)._f8 = util.pwstrToFfi(data.String);
    view.setBigUint64(8, (buf as any)._f8 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f8)), true);
  }
  // 0x10: usize
  if (data?.u !== undefined) view.setBigUint64(16, BigInt(data.u), true);
  // 0x18: pointer
  if (data?.psid !== undefined) view.setBigUint64(24, data.psid === null ? 0n : BigInt(util.toPointer(data.psid)), true);
  // 0x20: pointer
  if (data?.pguid !== undefined) view.setBigUint64(32, data.pguid === null ? 0n : BigInt(util.toPointer(data.pguid)), true);
  // 0x28: u32
  if (data?.LogonId_LowPart !== undefined) view.setUint32(40, Number(data.LogonId_LowPart), true);
  // 0x2c: pad4
  // 0x30: pointer
  if (data?.pObjectTypes !== undefined) view.setBigUint64(48, data.pObjectTypes === null ? 0n : BigInt(util.toPointer(data.pObjectTypes)), true);
  // 0x38: pointer
  if (data?.pIpAddress !== undefined) view.setBigUint64(56, data.pIpAddress === null ? 0n : BigInt(util.toPointer(data.pIpAddress)), true);
  return buf;
}

/**
 * _Anonymous2_e__Union (size: 16)
 */
export interface _Anonymous2_e__Union {
  /** usize */
  Data1: Deno.PointerValue;
  /** i32 */
  LogonId_HighPart: number;
}

export const sizeof_Anonymous2_e__Union = 16;

export function alloc_Anonymous2_e__Union(data?: Partial<_Anonymous2_e__Union>): Uint8Array {
  const buf = new Uint8Array(sizeof_Anonymous2_e__Union);
  const view = new DataView(buf.buffer);
  // 0x00: usize
  if (data?.Data1 !== undefined) view.setBigUint64(0, BigInt(data.Data1), true);
  // 0x08: i32
  if (data?.LogonId_HighPart !== undefined) view.setInt32(8, Number(data.LogonId_HighPart), true);
  // 0x0c: pad4
  return buf;
}

/**
 * Windows.Win32.Security.Cryptography.UI.CRYPTUI_WIZ_DIGITAL_SIGN_INFO (size: 56)
 */
export interface CRYPTUI_WIZ_DIGITAL_SIGN_INFO {
  /** u32 */
  dwSize: number;
  /** Windows.Win32.Security.Cryptography.UI.CRYPTUI_WIZ_DIGITAL_SIGN_SUBJECT */
  dwSubjectChoice: CRYPTUI_WIZ_DIGITAL_SIGN_SUBJECT;
  /** _Anonymous1_e__Union */
  Anonymous1: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Security.Cryptography.UI.CRYPTUI_WIZ_DIGITAL_SIGN */
  dwSigningCertChoice: CRYPTUI_WIZ_DIGITAL_SIGN;
  /** _Anonymous2_e__Union */
  Anonymous2: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Foundation.PWSTR */
  pwszTimestampURL: string | null | Uint8Array | Uint16Array;
  /** Windows.Win32.Security.Cryptography.UI.CRYPTUI_WIZ_DIGITAL_ADDITIONAL_CERT_CHOICE */
  dwAdditionalCertChoice: CRYPTUI_WIZ_DIGITAL_ADDITIONAL_CERT_CHOICE;
  /** ptr */
  pSignExtInfo: Deno.PointerValue | Uint8Array | null;
}

export const sizeofCRYPTUI_WIZ_DIGITAL_SIGN_INFO = 56;

export function allocCRYPTUI_WIZ_DIGITAL_SIGN_INFO(data?: Partial<CRYPTUI_WIZ_DIGITAL_SIGN_INFO>): Uint8Array {
  const buf = new Uint8Array(sizeofCRYPTUI_WIZ_DIGITAL_SIGN_INFO);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.dwSize !== undefined) view.setUint32(0, Number(data.dwSize), true);
  // 0x04: u32
  if (data?.dwSubjectChoice !== undefined) view.setUint32(4, Number(data.dwSubjectChoice), true);
  // 0x08: pointer
  if (data?.Anonymous1 !== undefined) view.setBigUint64(8, data.Anonymous1 === null ? 0n : BigInt(util.toPointer(data.Anonymous1)), true);
  // 0x10: u32
  if (data?.dwSigningCertChoice !== undefined) view.setUint32(16, Number(data.dwSigningCertChoice), true);
  // 0x14: pad4
  // 0x18: pointer
  if (data?.Anonymous2 !== undefined) view.setBigUint64(24, data.Anonymous2 === null ? 0n : BigInt(util.toPointer(data.Anonymous2)), true);
  // 0x20: buffer
  if (data?.pwszTimestampURL !== undefined) {
    (buf as any)._f32 = util.pwstrToFfi(data.pwszTimestampURL);
    view.setBigUint64(32, (buf as any)._f32 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f32)), true);
  }
  // 0x28: u32
  if (data?.dwAdditionalCertChoice !== undefined) view.setUint32(40, Number(data.dwAdditionalCertChoice), true);
  // 0x2c: pad4
  // 0x30: pointer
  if (data?.pSignExtInfo !== undefined) view.setBigUint64(48, data.pSignExtInfo === null ? 0n : BigInt(util.toPointer(data.pSignExtInfo)), true);
  return buf;
}

/**
 * Windows.Win32.Security.Cryptography.UI.CRYPTUI_WIZ_DIGITAL_SIGN_CONTEXT (size: 16)
 */
export interface CRYPTUI_WIZ_DIGITAL_SIGN_CONTEXT {
  /** u32 */
  dwSize: number;
  /** u32 */
  cbBlob: number;
  /** ptr */
  pbBlob: Deno.PointerValue | Uint8Array | null;
}

export const sizeofCRYPTUI_WIZ_DIGITAL_SIGN_CONTEXT = 16;

export function allocCRYPTUI_WIZ_DIGITAL_SIGN_CONTEXT(data?: Partial<CRYPTUI_WIZ_DIGITAL_SIGN_CONTEXT>): Uint8Array {
  const buf = new Uint8Array(sizeofCRYPTUI_WIZ_DIGITAL_SIGN_CONTEXT);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.dwSize !== undefined) view.setUint32(0, Number(data.dwSize), true);
  // 0x04: u32
  if (data?.cbBlob !== undefined) view.setUint32(4, Number(data.cbBlob), true);
  // 0x08: pointer
  if (data?.pbBlob !== undefined) view.setBigUint64(8, data.pbBlob === null ? 0n : BigInt(util.toPointer(data.pbBlob)), true);
  return buf;
}

/**
 * Windows.Win32.Security.Cryptography.UI.CRYPTUI_INITDIALOG_STRUCT (size: 16)
 */
export interface CRYPTUI_INITDIALOG_STRUCT {
  /** Windows.Win32.Foundation.LPARAM */
  lParam: Uint8Array | Deno.PointerValue | null;
  /** ptr */
  pCertContext: Deno.PointerValue | Uint8Array | null;
}

export const sizeofCRYPTUI_INITDIALOG_STRUCT = 16;

export function allocCRYPTUI_INITDIALOG_STRUCT(data?: Partial<CRYPTUI_INITDIALOG_STRUCT>): Uint8Array {
  const buf = new Uint8Array(sizeofCRYPTUI_INITDIALOG_STRUCT);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.lParam !== undefined) view.setBigUint64(0, data.lParam === null ? 0n : BigInt(util.toPointer(data.lParam)), true);
  // 0x08: pointer
  if (data?.pCertContext !== undefined) view.setBigUint64(8, data.pCertContext === null ? 0n : BigInt(util.toPointer(data.pCertContext)), true);
  return buf;
}

export type BOOL = number;

/**
 * Windows.Win32.Security.Cryptography.UI.CRYPTUI_VIEWCERTIFICATE_STRUCTW (size: 120)
 */
export interface CRYPTUI_VIEWCERTIFICATE_STRUCTW {
  /** u32 */
  dwSize: number;
  /** Windows.Win32.Foundation.HWND */
  hwndParent: Deno.PointerValue | null;
  /** Windows.Win32.Security.Cryptography.UI.CRYPTUI_VIEWCERTIFICATE_FLAGS */
  dwFlags: CRYPTUI_VIEWCERTIFICATE_FLAGS;
  /** Windows.Win32.Foundation.PWSTR */
  szTitle: string | null | Uint8Array | Uint16Array;
  /** ptr */
  pCertContext: Deno.PointerValue | Uint8Array | null;
  /** ptr */
  rgszPurposes: Deno.PointerValue | Uint8Array | null;
  /** u32 */
  cPurposes: number;
  /** _Anonymous_e__Union */
  Anonymous: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Foundation.BOOL */
  fpCryptProviderDataTrustedUsage: boolean;
  /** u32 */
  idxSigner: number;
  /** u32 */
  idxCert: number;
  /** Windows.Win32.Foundation.BOOL */
  fCounterSigner: boolean;
  /** u32 */
  idxCounterSigner: number;
  /** u32 */
  cStores: number;
  /** ptr */
  rghStores: Deno.PointerValue | Uint8Array | null;
  /** u32 */
  cPropSheetPages: number;
  /** ptr */
  rgPropSheetPages: Deno.PointerValue | Uint8Array | null;
  /** u32 */
  nStartPage: number;
}

export const sizeofCRYPTUI_VIEWCERTIFICATE_STRUCTW = 120;

export function allocCRYPTUI_VIEWCERTIFICATE_STRUCTW(data?: Partial<CRYPTUI_VIEWCERTIFICATE_STRUCTW>): Uint8Array {
  const buf = new Uint8Array(sizeofCRYPTUI_VIEWCERTIFICATE_STRUCTW);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.dwSize !== undefined) view.setUint32(0, Number(data.dwSize), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.hwndParent !== undefined) view.setBigUint64(8, data.hwndParent === null ? 0n : BigInt(util.toPointer(data.hwndParent)), true);
  // 0x10: u32
  if (data?.dwFlags !== undefined) view.setUint32(16, Number(data.dwFlags), true);
  // 0x14: pad4
  // 0x18: buffer
  if (data?.szTitle !== undefined) {
    (buf as any)._f24 = util.pwstrToFfi(data.szTitle);
    view.setBigUint64(24, (buf as any)._f24 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f24)), true);
  }
  // 0x20: pointer
  if (data?.pCertContext !== undefined) view.setBigUint64(32, data.pCertContext === null ? 0n : BigInt(util.toPointer(data.pCertContext)), true);
  // 0x28: pointer
  if (data?.rgszPurposes !== undefined) view.setBigUint64(40, data.rgszPurposes === null ? 0n : BigInt(util.toPointer(data.rgszPurposes)), true);
  // 0x30: u32
  if (data?.cPurposes !== undefined) view.setUint32(48, Number(data.cPurposes), true);
  // 0x34: pad4
  // 0x38: pointer
  if (data?.Anonymous !== undefined) view.setBigUint64(56, data.Anonymous === null ? 0n : BigInt(util.toPointer(data.Anonymous)), true);
  // 0x40: i32
  if (data?.fpCryptProviderDataTrustedUsage !== undefined) view.setInt32(64, Number(data.fpCryptProviderDataTrustedUsage), true);
  // 0x44: u32
  if (data?.idxSigner !== undefined) view.setUint32(68, Number(data.idxSigner), true);
  // 0x48: u32
  if (data?.idxCert !== undefined) view.setUint32(72, Number(data.idxCert), true);
  // 0x4c: i32
  if (data?.fCounterSigner !== undefined) view.setInt32(76, Number(data.fCounterSigner), true);
  // 0x50: u32
  if (data?.idxCounterSigner !== undefined) view.setUint32(80, Number(data.idxCounterSigner), true);
  // 0x54: u32
  if (data?.cStores !== undefined) view.setUint32(84, Number(data.cStores), true);
  // 0x58: pointer
  if (data?.rghStores !== undefined) view.setBigUint64(88, data.rghStores === null ? 0n : BigInt(util.toPointer(data.rghStores)), true);
  // 0x60: u32
  if (data?.cPropSheetPages !== undefined) view.setUint32(96, Number(data.cPropSheetPages), true);
  // 0x64: pad4
  // 0x68: pointer
  if (data?.rgPropSheetPages !== undefined) view.setBigUint64(104, data.rgPropSheetPages === null ? 0n : BigInt(util.toPointer(data.rgPropSheetPages)), true);
  // 0x70: u32
  if (data?.nStartPage !== undefined) view.setUint32(112, Number(data.nStartPage), true);
  // 0x74: pad4
  return buf;
}

/**
 * Windows.Win32.Security.Cryptography.UI.CRYPTUI_VIEWCERTIFICATE_STRUCTA (size: 120)
 */
export interface CRYPTUI_VIEWCERTIFICATE_STRUCTA {
  /** u32 */
  dwSize: number;
  /** Windows.Win32.Foundation.HWND */
  hwndParent: Deno.PointerValue | null;
  /** Windows.Win32.Security.Cryptography.UI.CRYPTUI_VIEWCERTIFICATE_FLAGS */
  dwFlags: CRYPTUI_VIEWCERTIFICATE_FLAGS;
  /** Windows.Win32.Foundation.PSTR */
  szTitle: string | null | Uint8Array;
  /** ptr */
  pCertContext: Deno.PointerValue | Uint8Array | null;
  /** ptr */
  rgszPurposes: Deno.PointerValue | Uint8Array | null;
  /** u32 */
  cPurposes: number;
  /** _Anonymous_e__Union */
  Anonymous: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Foundation.BOOL */
  fpCryptProviderDataTrustedUsage: boolean;
  /** u32 */
  idxSigner: number;
  /** u32 */
  idxCert: number;
  /** Windows.Win32.Foundation.BOOL */
  fCounterSigner: boolean;
  /** u32 */
  idxCounterSigner: number;
  /** u32 */
  cStores: number;
  /** ptr */
  rghStores: Deno.PointerValue | Uint8Array | null;
  /** u32 */
  cPropSheetPages: number;
  /** ptr */
  rgPropSheetPages: Deno.PointerValue | Uint8Array | null;
  /** u32 */
  nStartPage: number;
}

export const sizeofCRYPTUI_VIEWCERTIFICATE_STRUCTA = 120;

export function allocCRYPTUI_VIEWCERTIFICATE_STRUCTA(data?: Partial<CRYPTUI_VIEWCERTIFICATE_STRUCTA>): Uint8Array {
  const buf = new Uint8Array(sizeofCRYPTUI_VIEWCERTIFICATE_STRUCTA);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.dwSize !== undefined) view.setUint32(0, Number(data.dwSize), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.hwndParent !== undefined) view.setBigUint64(8, data.hwndParent === null ? 0n : BigInt(util.toPointer(data.hwndParent)), true);
  // 0x10: u32
  if (data?.dwFlags !== undefined) view.setUint32(16, Number(data.dwFlags), true);
  // 0x14: pad4
  // 0x18: buffer
  if (data?.szTitle !== undefined) {
    (buf as any)._f24 = util.pstrToFfi(data.szTitle);
    view.setBigUint64(24, (buf as any)._f24 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f24)), true);
  }
  // 0x20: pointer
  if (data?.pCertContext !== undefined) view.setBigUint64(32, data.pCertContext === null ? 0n : BigInt(util.toPointer(data.pCertContext)), true);
  // 0x28: pointer
  if (data?.rgszPurposes !== undefined) view.setBigUint64(40, data.rgszPurposes === null ? 0n : BigInt(util.toPointer(data.rgszPurposes)), true);
  // 0x30: u32
  if (data?.cPurposes !== undefined) view.setUint32(48, Number(data.cPurposes), true);
  // 0x34: pad4
  // 0x38: pointer
  if (data?.Anonymous !== undefined) view.setBigUint64(56, data.Anonymous === null ? 0n : BigInt(util.toPointer(data.Anonymous)), true);
  // 0x40: i32
  if (data?.fpCryptProviderDataTrustedUsage !== undefined) view.setInt32(64, Number(data.fpCryptProviderDataTrustedUsage), true);
  // 0x44: u32
  if (data?.idxSigner !== undefined) view.setUint32(68, Number(data.idxSigner), true);
  // 0x48: u32
  if (data?.idxCert !== undefined) view.setUint32(72, Number(data.idxCert), true);
  // 0x4c: i32
  if (data?.fCounterSigner !== undefined) view.setInt32(76, Number(data.fCounterSigner), true);
  // 0x50: u32
  if (data?.idxCounterSigner !== undefined) view.setUint32(80, Number(data.idxCounterSigner), true);
  // 0x54: u32
  if (data?.cStores !== undefined) view.setUint32(84, Number(data.cStores), true);
  // 0x58: pointer
  if (data?.rghStores !== undefined) view.setBigUint64(88, data.rghStores === null ? 0n : BigInt(util.toPointer(data.rghStores)), true);
  // 0x60: u32
  if (data?.cPropSheetPages !== undefined) view.setUint32(96, Number(data.cPropSheetPages), true);
  // 0x64: pad4
  // 0x68: pointer
  if (data?.rgPropSheetPages !== undefined) view.setBigUint64(104, data.rgPropSheetPages === null ? 0n : BigInt(util.toPointer(data.rgPropSheetPages)), true);
  // 0x70: u32
  if (data?.nStartPage !== undefined) view.setUint32(112, Number(data.nStartPage), true);
  // 0x74: pad4
  return buf;
}

/**
 * Windows.Win32.Security.Cryptography.UI.CRYPTUI_WIZ_EXPORT_INFO (size: 48)
 */
export interface CRYPTUI_WIZ_EXPORT_INFO {
  /** u32 */
  dwSize: number;
  /** Windows.Win32.Foundation.PWSTR */
  pwszExportFileName: string | null | Uint8Array | Uint16Array;
  /** Windows.Win32.Security.Cryptography.UI.CRYPTUI_WIZ_EXPORT_SUBJECT */
  dwSubjectChoice: CRYPTUI_WIZ_EXPORT_SUBJECT;
  /** _Anonymous_e__Union */
  Anonymous: Uint8Array | Deno.PointerValue | null;
  /** u32 */
  cStores: number;
  /** ptr */
  rghStores: Deno.PointerValue | Uint8Array | null;
}

export const sizeofCRYPTUI_WIZ_EXPORT_INFO = 48;

export function allocCRYPTUI_WIZ_EXPORT_INFO(data?: Partial<CRYPTUI_WIZ_EXPORT_INFO>): Uint8Array {
  const buf = new Uint8Array(sizeofCRYPTUI_WIZ_EXPORT_INFO);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.dwSize !== undefined) view.setUint32(0, Number(data.dwSize), true);
  // 0x04: pad4
  // 0x08: buffer
  if (data?.pwszExportFileName !== undefined) {
    (buf as any)._f8 = util.pwstrToFfi(data.pwszExportFileName);
    view.setBigUint64(8, (buf as any)._f8 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f8)), true);
  }
  // 0x10: u32
  if (data?.dwSubjectChoice !== undefined) view.setUint32(16, Number(data.dwSubjectChoice), true);
  // 0x14: pad4
  // 0x18: pointer
  if (data?.Anonymous !== undefined) view.setBigUint64(24, data.Anonymous === null ? 0n : BigInt(util.toPointer(data.Anonymous)), true);
  // 0x20: u32
  if (data?.cStores !== undefined) view.setUint32(32, Number(data.cStores), true);
  // 0x24: pad4
  // 0x28: pointer
  if (data?.rghStores !== undefined) view.setBigUint64(40, data.rghStores === null ? 0n : BigInt(util.toPointer(data.rghStores)), true);
  return buf;
}

/**
 * Windows.Win32.Security.Cryptography.UI.CRYPTUI_WIZ_EXPORT_CERTCONTEXT_INFO (size: 32)
 */
export interface CRYPTUI_WIZ_EXPORT_CERTCONTEXT_INFO {
  /** u32 */
  dwSize: number;
  /** Windows.Win32.Security.Cryptography.UI.CRYPTUI_WIZ_EXPORT_FORMAT */
  dwExportFormat: CRYPTUI_WIZ_EXPORT_FORMAT;
  /** Windows.Win32.Foundation.BOOL */
  fExportChain: boolean;
  /** Windows.Win32.Foundation.BOOL */
  fExportPrivateKeys: boolean;
  /** Windows.Win32.Foundation.PWSTR */
  pwszPassword: string | null | Uint8Array | Uint16Array;
  /** Windows.Win32.Foundation.BOOL */
  fStrongEncryption: boolean;
}

export const sizeofCRYPTUI_WIZ_EXPORT_CERTCONTEXT_INFO = 32;

export function allocCRYPTUI_WIZ_EXPORT_CERTCONTEXT_INFO(data?: Partial<CRYPTUI_WIZ_EXPORT_CERTCONTEXT_INFO>): Uint8Array {
  const buf = new Uint8Array(sizeofCRYPTUI_WIZ_EXPORT_CERTCONTEXT_INFO);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.dwSize !== undefined) view.setUint32(0, Number(data.dwSize), true);
  // 0x04: u32
  if (data?.dwExportFormat !== undefined) view.setUint32(4, Number(data.dwExportFormat), true);
  // 0x08: i32
  if (data?.fExportChain !== undefined) view.setInt32(8, Number(data.fExportChain), true);
  // 0x0c: i32
  if (data?.fExportPrivateKeys !== undefined) view.setInt32(12, Number(data.fExportPrivateKeys), true);
  // 0x10: buffer
  if (data?.pwszPassword !== undefined) {
    (buf as any)._f16 = util.pwstrToFfi(data.pwszPassword);
    view.setBigUint64(16, (buf as any)._f16 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f16)), true);
  }
  // 0x18: i32
  if (data?.fStrongEncryption !== undefined) view.setInt32(24, Number(data.fStrongEncryption), true);
  // 0x1c: pad4
  return buf;
}

/**
 * Windows.Win32.Security.Cryptography.UI.CRYPTUI_WIZ_IMPORT_SRC_INFO (size: 32)
 */
export interface CRYPTUI_WIZ_IMPORT_SRC_INFO {
  /** u32 */
  dwSize: number;
  /** Windows.Win32.Security.Cryptography.UI.CRYPTUI_WIZ_IMPORT_SUBJECT_OPTION */
  dwSubjectChoice: CRYPTUI_WIZ_IMPORT_SUBJECT_OPTION;
  /** _Anonymous_e__Union */
  Anonymous: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Security.Cryptography.CRYPT_KEY_FLAGS */
  dwFlags: CRYPT_KEY_FLAGS;
  /** Windows.Win32.Foundation.PWSTR */
  pwszPassword: string | null | Uint8Array | Uint16Array;
}

export const sizeofCRYPTUI_WIZ_IMPORT_SRC_INFO = 32;

export function allocCRYPTUI_WIZ_IMPORT_SRC_INFO(data?: Partial<CRYPTUI_WIZ_IMPORT_SRC_INFO>): Uint8Array {
  const buf = new Uint8Array(sizeofCRYPTUI_WIZ_IMPORT_SRC_INFO);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.dwSize !== undefined) view.setUint32(0, Number(data.dwSize), true);
  // 0x04: u32
  if (data?.dwSubjectChoice !== undefined) view.setUint32(4, Number(data.dwSubjectChoice), true);
  // 0x08: pointer
  if (data?.Anonymous !== undefined) view.setBigUint64(8, data.Anonymous === null ? 0n : BigInt(util.toPointer(data.Anonymous)), true);
  // 0x10: u32
  if (data?.dwFlags !== undefined) view.setUint32(16, Number(data.dwFlags), true);
  // 0x14: pad4
  // 0x18: buffer
  if (data?.pwszPassword !== undefined) {
    (buf as any)._f24 = util.pwstrToFfi(data.pwszPassword);
    view.setBigUint64(24, (buf as any)._f24 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f24)), true);
  }
  return buf;
}

export type HRESULT = number;

// Native Libraries

try {
  var libCRYPTUI_dll = Deno.dlopen("CRYPTUI.dll", {
    CryptUIDlgViewContext: {
      parameters: ["u32", "pointer", "pointer", "buffer", "u32", "pointer"],
      result: "i32",
    },
    CryptUIDlgSelectCertificateFromStore: {
      parameters: ["pointer", "pointer", "buffer", "buffer", "u32", "u32", "pointer"],
      result: "pointer",
    },
    CertSelectionGetSerializedBlob: {
      parameters: ["pointer", "pointer", "pointer"],
      result: "pointer",
    },
    CryptUIDlgCertMgr: {
      parameters: ["pointer"],
      result: "i32",
    },
    CryptUIWizDigitalSign: {
      parameters: ["u32", "pointer", "buffer", "pointer", "pointer"],
      result: "i32",
    },
    CryptUIWizFreeDigitalSignContext: {
      parameters: ["pointer"],
      result: "i32",
    },
    CryptUIDlgViewCertificateW: {
      parameters: ["pointer", "pointer"],
      result: "i32",
    },
    CryptUIDlgViewCertificateA: {
      parameters: ["pointer", "pointer"],
      result: "i32",
    },
    CryptUIWizExport: {
      parameters: ["u32", "pointer", "buffer", "pointer", "pointer"],
      result: "i32",
    },
    CryptUIWizImport: {
      parameters: ["u32", "pointer", "buffer", "pointer", "pointer"],
      result: "i32",
    },
  }).symbols;
} catch(e) { /* ignore */ }

// Symbols

export function CryptUIDlgViewContext(
  dwContextType: number /* u32 */,
  pvContext: Deno.PointerValue | Uint8Array | null /* ptr */,
  hwnd: Deno.PointerValue | null /* Windows.Win32.Foundation.HWND */,
  pwszTitle: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  dwFlags: number /* u32 */,
  pvReserved: Deno.PointerValue | Uint8Array | null /* ptr */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libCRYPTUI_dll.CryptUIDlgViewContext(dwContextType, util.toPointer(pvContext), util.hwndToFfi(hwnd), util.pwstrToFfi(pwszTitle), dwFlags, util.toPointer(pvReserved)));
}

export function CryptUIDlgSelectCertificateFromStore(
  hCertStore: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Security.Cryptography.HCERTSTORE */,
  hwnd: Deno.PointerValue | null /* Windows.Win32.Foundation.HWND */,
  pwszTitle: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  pwszDisplayString: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  dwDontUseColumn: number /* u32 */,
  dwFlags: number /* u32 */,
  pvReserved: Deno.PointerValue | Uint8Array | null /* ptr */,
): Deno.PointerValue | null /* ptr */ {
  return util.pointerFromFfi(libCRYPTUI_dll.CryptUIDlgSelectCertificateFromStore(util.toPointer(hCertStore), util.hwndToFfi(hwnd), util.pwstrToFfi(pwszTitle), util.pwstrToFfi(pwszDisplayString), dwDontUseColumn, dwFlags, util.toPointer(pvReserved)));
}

export function CertSelectionGetSerializedBlob(
  pcsi: Deno.PointerValue | Uint8Array | null /* ptr */,
  ppOutBuffer: Deno.PointerValue | Uint8Array | null /* ptr */,
  pulOutBufferSize: Deno.PointerValue | Uint8Array | null /* ptr */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libCRYPTUI_dll.CertSelectionGetSerializedBlob(util.toPointer(pcsi), util.toPointer(ppOutBuffer), util.toPointer(pulOutBufferSize)));
}

export function CryptUIDlgCertMgr(
  pCryptUICertMgr: Deno.PointerValue | Uint8Array | null /* ptr */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libCRYPTUI_dll.CryptUIDlgCertMgr(util.toPointer(pCryptUICertMgr)));
}

export function CryptUIWizDigitalSign(
  dwFlags: number /* u32 */,
  hwndParent: Deno.PointerValue | null /* Windows.Win32.Foundation.HWND */,
  pwszWizardTitle: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  pDigitalSignInfo: Deno.PointerValue | Uint8Array | null /* ptr */,
  ppSignContext: Deno.PointerValue | Uint8Array | null /* ptr */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libCRYPTUI_dll.CryptUIWizDigitalSign(dwFlags, util.hwndToFfi(hwndParent), util.pwstrToFfi(pwszWizardTitle), util.toPointer(pDigitalSignInfo), util.toPointer(ppSignContext)));
}

export function CryptUIWizFreeDigitalSignContext(
  pSignContext: Deno.PointerValue | Uint8Array | null /* ptr */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libCRYPTUI_dll.CryptUIWizFreeDigitalSignContext(util.toPointer(pSignContext)));
}

export function CryptUIDlgViewCertificateW(
  pCertViewInfo: Deno.PointerValue | Uint8Array | null /* ptr */,
  pfPropertiesChanged: Deno.PointerValue | Uint8Array | null /* ptr */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libCRYPTUI_dll.CryptUIDlgViewCertificateW(util.toPointer(pCertViewInfo), util.toPointer(pfPropertiesChanged)));
}

export function CryptUIDlgViewCertificateA(
  pCertViewInfo: Deno.PointerValue | Uint8Array | null /* ptr */,
  pfPropertiesChanged: Deno.PointerValue | Uint8Array | null /* ptr */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libCRYPTUI_dll.CryptUIDlgViewCertificateA(util.toPointer(pCertViewInfo), util.toPointer(pfPropertiesChanged)));
}

export function CryptUIWizExport(
  dwFlags: CRYPTUI_WIZ_FLAGS /* Windows.Win32.Security.Cryptography.UI.CRYPTUI_WIZ_FLAGS */,
  hwndParent: Deno.PointerValue | null /* Windows.Win32.Foundation.HWND */,
  pwszWizardTitle: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  pExportInfo: Deno.PointerValue | Uint8Array | null /* ptr */,
  pvoid: Deno.PointerValue | Uint8Array | null /* ptr */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libCRYPTUI_dll.CryptUIWizExport(dwFlags, util.hwndToFfi(hwndParent), util.pwstrToFfi(pwszWizardTitle), util.toPointer(pExportInfo), util.toPointer(pvoid)));
}

export function CryptUIWizImport(
  dwFlags: CRYPTUI_WIZ_FLAGS /* Windows.Win32.Security.Cryptography.UI.CRYPTUI_WIZ_FLAGS */,
  hwndParent: Deno.PointerValue | null /* Windows.Win32.Foundation.HWND */,
  pwszWizardTitle: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  pImportSrc: Deno.PointerValue | Uint8Array | null /* ptr */,
  hDestCertStore: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Security.Cryptography.HCERTSTORE */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libCRYPTUI_dll.CryptUIWizImport(dwFlags, util.hwndToFfi(hwndParent), util.pwstrToFfi(pwszWizardTitle), util.toPointer(pImportSrc), util.toPointer(hDestCertStore)));
}

