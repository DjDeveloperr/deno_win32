/// Auto-generated by Deno Win32: Windows.Win32.Security.NetworkAccessProtection.Apis

import * as util from "../../util.ts";

// Enums
export type IsolationState = number;
export type ExtendedIsolationState = number;
export type NapTracingLevel = number;
export type FailureCategory = number;
export type FixupState = number;
export type NapNotifyType = number;
export type RemoteConfigurationType = number;

// Constants
export const maxSoHAttributeCount = 100;
export const maxSoHAttributeSize = 4000;
export const minNetworkSoHSize = 12;
export const maxNetworkSoHSize = 4000;
export const maxStringLength = 1024;
export const maxSystemHealthEntityCount = 20;
export const maxEnforcerCount = 20;
export const maxPrivateDataSize = 200;
export const maxConnectionCountPerEnforcer = 20;
export const freshSoHRequest = 1;
export const shaFixup = 1;
export const failureCategoryCount = 5;
export const ComponentTypeEnforcementClientSoH = 1;
export const ComponentTypeEnforcementClientRp = 2;
export const percentageNotSupported = 101;
export const isolationStateNotRestricted = 1;
export const isolationStateInProbation = 2;
export const isolationStateRestrictedAccess = 3;
export const extendedIsolationStateNoData = 0;
export const extendedIsolationStateTransition = 1;
export const extendedIsolationStateInfected = 2;
export const extendedIsolationStateUnknown = 3;
export const tracingLevelUndefined = 0;
export const tracingLevelBasic = 1;
export const tracingLevelAdvanced = 2;
export const tracingLevelDebug = 3;
export const failureCategoryNone = 0;
export const failureCategoryOther = 1;
export const failureCategoryClientComponent = 2;
export const failureCategoryClientCommunication = 3;
export const failureCategoryServerComponent = 4;
export const failureCategoryServerCommunication = 5;
export const fixupStateSuccess = 0;
export const fixupStateInProgress = 1;
export const fixupStateCouldNotUpdate = 2;
export const napNotifyTypeUnknown = 0;
export const napNotifyTypeServiceState = 1;
export const napNotifyTypeQuarState = 2;
export const remoteConfigTypeMachine = 1;
export const remoteConfigTypeConfigBlob = 2;

// Structs

export type PWSTR = Deno.PointerValue | Uint8Array;

/**
 * Windows.Win32.Security.NetworkAccessProtection.CountedString (size: 16)
 */
export interface CountedString {
  /** u16 */
  length: number;
  /** Windows.Win32.Foundation.PWSTR */
  string: string | null | Uint8Array | Uint16Array;
}

export const sizeofCountedString = 16;

export function allocCountedString(data?: Partial<CountedString>): Uint8Array {
  const buf = new Uint8Array(sizeofCountedString);
  const view = new DataView(buf.buffer);
  // 0x00: u16
  if (data?.length !== undefined) view.setUint16(0, Number(data.length), true);
  // 0x02: pad6
  // 0x08: buffer
  if (data?.string !== undefined) {
    (buf as any)._f8 = util.pwstrToFfi(data.string);
    view.setBigUint64(8, (buf as any)._f8 === null ? 0n : BigInt(Deno.UnsafePointer.value(Deno.UnsafePointer.of((buf as any)._f8))), true);
  }
  return buf;
}

export class CountedStringView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u16
  get length(): number {
    return this.view.getUint16(0, true);
  }

  // 0x02: pad6

  // 0x08: buffer
  get string(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: u16
  set length(value: number) {
    this.view.setUint16(0, value, true);
  }

  // 0x02: pad6

  // 0x08: buffer
  set string(value: Uint8Array | Deno.PointerValue) {
    (this.buf as any)._f8 = value;
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer((this.buf as any)._f8))), true);
  }
}

/**
 * Windows.Win32.Foundation.FILETIME (size: 8)
 */
export interface FILETIME {
  /** u32 */
  dwLowDateTime: number;
  /** u32 */
  dwHighDateTime: number;
}

export const sizeofFILETIME = 8;

export function allocFILETIME(data?: Partial<FILETIME>): Uint8Array {
  const buf = new Uint8Array(sizeofFILETIME);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.dwLowDateTime !== undefined) view.setUint32(0, Number(data.dwLowDateTime), true);
  // 0x04: u32
  if (data?.dwHighDateTime !== undefined) view.setUint32(4, Number(data.dwHighDateTime), true);
  return buf;
}

export class FILETIMEView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get dwLowDateTime(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: u32
  get dwHighDateTime(): number {
    return this.view.getUint32(4, true);
  }

  // 0x00: u32
  set dwLowDateTime(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: u32
  set dwHighDateTime(value: number) {
    this.view.setUint32(4, value, true);
  }
}

/**
 * Windows.Win32.Security.NetworkAccessProtection.IsolationInfo (size: 24)
 */
export interface IsolationInfo {
  /** Windows.Win32.Security.NetworkAccessProtection.IsolationState */
  isolationState: IsolationState;
  /** Windows.Win32.Foundation.FILETIME */
  probEndTime: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.Security.NetworkAccessProtection.CountedString */
  failureUrl: Uint8Array | Deno.PointerValue;
}

export const sizeofIsolationInfo = 24;

export function allocIsolationInfo(data?: Partial<IsolationInfo>): Uint8Array {
  const buf = new Uint8Array(sizeofIsolationInfo);
  const view = new DataView(buf.buffer);
  // 0x00: i32
  if (data?.isolationState !== undefined) view.setInt32(0, Number(data.isolationState), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.probEndTime !== undefined) view.setBigUint64(8, data.probEndTime === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.probEndTime))), true);
  // 0x10: pointer
  if (data?.failureUrl !== undefined) view.setBigUint64(16, data.failureUrl === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.failureUrl))), true);
  return buf;
}

export class IsolationInfoView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: i32
  get isolationState(): number {
    return this.view.getInt32(0, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  get probEndTime(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x10: pointer
  get failureUrl(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(16, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: i32
  set isolationState(value: number) {
    this.view.setInt32(0, value, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  set probEndTime(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x10: pointer
  set failureUrl(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(16, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.Security.NetworkAccessProtection.IsolationInfoEx (size: 24)
 */
export interface IsolationInfoEx {
  /** Windows.Win32.Security.NetworkAccessProtection.IsolationState */
  isolationState: IsolationState;
  /** Windows.Win32.Security.NetworkAccessProtection.ExtendedIsolationState */
  extendedIsolationState: ExtendedIsolationState;
  /** Windows.Win32.Foundation.FILETIME */
  probEndTime: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.Security.NetworkAccessProtection.CountedString */
  failureUrl: Uint8Array | Deno.PointerValue;
}

export const sizeofIsolationInfoEx = 24;

export function allocIsolationInfoEx(data?: Partial<IsolationInfoEx>): Uint8Array {
  const buf = new Uint8Array(sizeofIsolationInfoEx);
  const view = new DataView(buf.buffer);
  // 0x00: i32
  if (data?.isolationState !== undefined) view.setInt32(0, Number(data.isolationState), true);
  // 0x04: i32
  if (data?.extendedIsolationState !== undefined) view.setInt32(4, Number(data.extendedIsolationState), true);
  // 0x08: pointer
  if (data?.probEndTime !== undefined) view.setBigUint64(8, data.probEndTime === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.probEndTime))), true);
  // 0x10: pointer
  if (data?.failureUrl !== undefined) view.setBigUint64(16, data.failureUrl === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.failureUrl))), true);
  return buf;
}

export class IsolationInfoExView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: i32
  get isolationState(): number {
    return this.view.getInt32(0, true);
  }

  // 0x04: i32
  get extendedIsolationState(): number {
    return this.view.getInt32(4, true);
  }

  // 0x08: pointer
  get probEndTime(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x10: pointer
  get failureUrl(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(16, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: i32
  set isolationState(value: number) {
    this.view.setInt32(0, value, true);
  }

  // 0x04: i32
  set extendedIsolationState(value: number) {
    this.view.setInt32(4, value, true);
  }

  // 0x08: pointer
  set probEndTime(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x10: pointer
  set failureUrl(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(16, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.Security.NetworkAccessProtection.FailureCategoryMapping (size: 8)
 */
export interface FailureCategoryMapping {
  /** array */
  mappingCompliance: Deno.PointerValue;
}

export const sizeofFailureCategoryMapping = 8;

export function allocFailureCategoryMapping(data?: Partial<FailureCategoryMapping>): Uint8Array {
  const buf = new Uint8Array(sizeofFailureCategoryMapping);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.mappingCompliance !== undefined) view.setBigUint64(0, data.mappingCompliance === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.mappingCompliance))), true);
  return buf;
}

export class FailureCategoryMappingView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get mappingCompliance(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(0, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: pointer
  set mappingCompliance(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(0, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.Security.NetworkAccessProtection.CorrelationId (size: 16)
 */
export interface CorrelationId {
  /** System.Guid */
  connId: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.Foundation.FILETIME */
  timeStamp: Uint8Array | Deno.PointerValue;
}

export const sizeofCorrelationId = 16;

export function allocCorrelationId(data?: Partial<CorrelationId>): Uint8Array {
  const buf = new Uint8Array(sizeofCorrelationId);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.connId !== undefined) view.setBigUint64(0, data.connId === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.connId))), true);
  // 0x08: pointer
  if (data?.timeStamp !== undefined) view.setBigUint64(8, data.timeStamp === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.timeStamp))), true);
  return buf;
}

export class CorrelationIdView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get connId(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(0, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x08: pointer
  get timeStamp(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: pointer
  set connId(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(0, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x08: pointer
  set timeStamp(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.Security.NetworkAccessProtection.ResultCodes (size: 16)
 */
export interface ResultCodes {
  /** u16 */
  count: number;
  /** ptr */
  results: Deno.PointerValue | Uint8Array;
}

export const sizeofResultCodes = 16;

export function allocResultCodes(data?: Partial<ResultCodes>): Uint8Array {
  const buf = new Uint8Array(sizeofResultCodes);
  const view = new DataView(buf.buffer);
  // 0x00: u16
  if (data?.count !== undefined) view.setUint16(0, Number(data.count), true);
  // 0x02: pad6
  // 0x08: pointer
  if (data?.results !== undefined) view.setBigUint64(8, data.results === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.results))), true);
  return buf;
}

export class ResultCodesView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u16
  get count(): number {
    return this.view.getUint16(0, true);
  }

  // 0x02: pad6

  // 0x08: pointer
  get results(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: u16
  set count(value: number) {
    this.view.setUint16(0, value, true);
  }

  // 0x02: pad6

  // 0x08: pointer
  set results(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.Security.NetworkAccessProtection.Ipv4Address (size: 8)
 */
export interface Ipv4Address {
  /** array */
  addr: Deno.PointerValue;
}

export const sizeofIpv4Address = 8;

export function allocIpv4Address(data?: Partial<Ipv4Address>): Uint8Array {
  const buf = new Uint8Array(sizeofIpv4Address);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.addr !== undefined) view.setBigUint64(0, data.addr === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.addr))), true);
  return buf;
}

export class Ipv4AddressView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get addr(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(0, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: pointer
  set addr(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(0, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.Security.NetworkAccessProtection.Ipv6Address (size: 8)
 */
export interface Ipv6Address {
  /** array */
  addr: Deno.PointerValue;
}

export const sizeofIpv6Address = 8;

export function allocIpv6Address(data?: Partial<Ipv6Address>): Uint8Array {
  const buf = new Uint8Array(sizeofIpv6Address);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.addr !== undefined) view.setBigUint64(0, data.addr === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.addr))), true);
  return buf;
}

export class Ipv6AddressView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get addr(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(0, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: pointer
  set addr(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(0, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.Security.NetworkAccessProtection.FixupInfo (size: 24)
 */
export interface FixupInfo {
  /** Windows.Win32.Security.NetworkAccessProtection.FixupState */
  state: FixupState;
  /** u8 */
  percentage: number;
  /** Windows.Win32.Security.NetworkAccessProtection.ResultCodes */
  resultCodes: Uint8Array | Deno.PointerValue;
  /** u32 */
  fixupMsgId: number;
}

export const sizeofFixupInfo = 24;

export function allocFixupInfo(data?: Partial<FixupInfo>): Uint8Array {
  const buf = new Uint8Array(sizeofFixupInfo);
  const view = new DataView(buf.buffer);
  // 0x00: i32
  if (data?.state !== undefined) view.setInt32(0, Number(data.state), true);
  // 0x04: u8
  if (data?.percentage !== undefined) view.setUint8(4, Number(data.percentage));
  // 0x05: pad3
  // 0x08: pointer
  if (data?.resultCodes !== undefined) view.setBigUint64(8, data.resultCodes === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.resultCodes))), true);
  // 0x10: u32
  if (data?.fixupMsgId !== undefined) view.setUint32(16, Number(data.fixupMsgId), true);
  // 0x14: pad4
  return buf;
}

export class FixupInfoView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: i32
  get state(): number {
    return this.view.getInt32(0, true);
  }

  // 0x04: u8
  get percentage(): number {
    return this.view.getUint8(4);
  }

  // 0x05: pad3

  // 0x08: pointer
  get resultCodes(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x10: u32
  get fixupMsgId(): number {
    return this.view.getUint32(16, true);
  }

  // 0x14: pad4

  // 0x00: i32
  set state(value: number) {
    this.view.setInt32(0, value, true);
  }

  // 0x04: u8
  set percentage(value: number) {
    this.view.setUint8(4, value);
  }

  // 0x05: pad3

  // 0x08: pointer
  set resultCodes(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x10: u32
  set fixupMsgId(value: number) {
    this.view.setUint32(16, value, true);
  }

  // 0x14: pad4
}

/**
 * Windows.Win32.Security.NetworkAccessProtection.SystemHealthAgentState (size: 32)
 */
export interface SystemHealthAgentState {
  /** u32 */
  id: number;
  /** Windows.Win32.Security.NetworkAccessProtection.ResultCodes */
  shaResultCodes: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.Security.NetworkAccessProtection.FailureCategory */
  failureCategory: FailureCategory;
  /** Windows.Win32.Security.NetworkAccessProtection.FixupInfo */
  fixupInfo: Uint8Array | Deno.PointerValue;
}

export const sizeofSystemHealthAgentState = 32;

export function allocSystemHealthAgentState(data?: Partial<SystemHealthAgentState>): Uint8Array {
  const buf = new Uint8Array(sizeofSystemHealthAgentState);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.id !== undefined) view.setUint32(0, Number(data.id), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.shaResultCodes !== undefined) view.setBigUint64(8, data.shaResultCodes === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.shaResultCodes))), true);
  // 0x10: i32
  if (data?.failureCategory !== undefined) view.setInt32(16, Number(data.failureCategory), true);
  // 0x14: pad4
  // 0x18: pointer
  if (data?.fixupInfo !== undefined) view.setBigUint64(24, data.fixupInfo === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.fixupInfo))), true);
  return buf;
}

export class SystemHealthAgentStateView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get id(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  get shaResultCodes(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x10: i32
  get failureCategory(): number {
    return this.view.getInt32(16, true);
  }

  // 0x14: pad4

  // 0x18: pointer
  get fixupInfo(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(24, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: u32
  set id(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  set shaResultCodes(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x10: i32
  set failureCategory(value: number) {
    this.view.setInt32(16, value, true);
  }

  // 0x14: pad4

  // 0x18: pointer
  set fixupInfo(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(24, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.Security.NetworkAccessProtection.SoHAttribute (size: 16)
 */
export interface SoHAttribute {
  /** u16 */
  type: number;
  /** u16 */
  size: number;
  /** ptr */
  value: Deno.PointerValue | Uint8Array;
}

export const sizeofSoHAttribute = 16;

export function allocSoHAttribute(data?: Partial<SoHAttribute>): Uint8Array {
  const buf = new Uint8Array(sizeofSoHAttribute);
  const view = new DataView(buf.buffer);
  // 0x00: u16
  if (data?.type !== undefined) view.setUint16(0, Number(data.type), true);
  // 0x02: u16
  if (data?.size !== undefined) view.setUint16(2, Number(data.size), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.value !== undefined) view.setBigUint64(8, data.value === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.value))), true);
  return buf;
}

export class SoHAttributeView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u16
  get type(): number {
    return this.view.getUint16(0, true);
  }

  // 0x02: u16
  get size(): number {
    return this.view.getUint16(2, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  get value(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: u16
  set type(value: number) {
    this.view.setUint16(0, value, true);
  }

  // 0x02: u16
  set size(value: number) {
    this.view.setUint16(2, value, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  set value(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.Security.NetworkAccessProtection.SoH (size: 16)
 */
export interface SoH {
  /** u16 */
  count: number;
  /** ptr */
  attributes: Deno.PointerValue | Uint8Array;
}

export const sizeofSoH = 16;

export function allocSoH(data?: Partial<SoH>): Uint8Array {
  const buf = new Uint8Array(sizeofSoH);
  const view = new DataView(buf.buffer);
  // 0x00: u16
  if (data?.count !== undefined) view.setUint16(0, Number(data.count), true);
  // 0x02: pad6
  // 0x08: pointer
  if (data?.attributes !== undefined) view.setBigUint64(8, data.attributes === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.attributes))), true);
  return buf;
}

export class SoHView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u16
  get count(): number {
    return this.view.getUint16(0, true);
  }

  // 0x02: pad6

  // 0x08: pointer
  get attributes(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: u16
  set count(value: number) {
    this.view.setUint16(0, value, true);
  }

  // 0x02: pad6

  // 0x08: pointer
  set attributes(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.Security.NetworkAccessProtection.NetworkSoH (size: 16)
 */
export interface NetworkSoH {
  /** u16 */
  size: number;
  /** ptr */
  data: Deno.PointerValue | Uint8Array;
}

export const sizeofNetworkSoH = 16;

export function allocNetworkSoH(data?: Partial<NetworkSoH>): Uint8Array {
  const buf = new Uint8Array(sizeofNetworkSoH);
  const view = new DataView(buf.buffer);
  // 0x00: u16
  if (data?.size !== undefined) view.setUint16(0, Number(data.size), true);
  // 0x02: pad6
  // 0x08: pointer
  if (data?.data !== undefined) view.setBigUint64(8, data.data === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.data))), true);
  return buf;
}

export class NetworkSoHView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u16
  get size(): number {
    return this.view.getUint16(0, true);
  }

  // 0x02: pad6

  // 0x08: pointer
  get data(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: u16
  set size(value: number) {
    this.view.setUint16(0, value, true);
  }

  // 0x02: pad6

  // 0x08: pointer
  set data(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.Security.NetworkAccessProtection.PrivateData (size: 16)
 */
export interface PrivateData {
  /** u16 */
  size: number;
  /** ptr */
  data: Deno.PointerValue | Uint8Array;
}

export const sizeofPrivateData = 16;

export function allocPrivateData(data?: Partial<PrivateData>): Uint8Array {
  const buf = new Uint8Array(sizeofPrivateData);
  const view = new DataView(buf.buffer);
  // 0x00: u16
  if (data?.size !== undefined) view.setUint16(0, Number(data.size), true);
  // 0x02: pad6
  // 0x08: pointer
  if (data?.data !== undefined) view.setBigUint64(8, data.data === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.data))), true);
  return buf;
}

export class PrivateDataView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u16
  get size(): number {
    return this.view.getUint16(0, true);
  }

  // 0x02: pad6

  // 0x08: pointer
  get data(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: u16
  set size(value: number) {
    this.view.setUint16(0, value, true);
  }

  // 0x02: pad6

  // 0x08: pointer
  set data(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.Security.NetworkAccessProtection.NapComponentRegistrationInfo (size: 72)
 */
export interface NapComponentRegistrationInfo {
  /** u32 */
  id: number;
  /** Windows.Win32.Security.NetworkAccessProtection.CountedString */
  friendlyName: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.Security.NetworkAccessProtection.CountedString */
  description: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.Security.NetworkAccessProtection.CountedString */
  version: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.Security.NetworkAccessProtection.CountedString */
  vendorName: Uint8Array | Deno.PointerValue;
  /** System.Guid */
  infoClsid: Uint8Array | Deno.PointerValue;
  /** System.Guid */
  configClsid: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.Foundation.FILETIME */
  registrationDate: Uint8Array | Deno.PointerValue;
  /** u32 */
  componentType: number;
}

export const sizeofNapComponentRegistrationInfo = 72;

export function allocNapComponentRegistrationInfo(data?: Partial<NapComponentRegistrationInfo>): Uint8Array {
  const buf = new Uint8Array(sizeofNapComponentRegistrationInfo);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.id !== undefined) view.setUint32(0, Number(data.id), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.friendlyName !== undefined) view.setBigUint64(8, data.friendlyName === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.friendlyName))), true);
  // 0x10: pointer
  if (data?.description !== undefined) view.setBigUint64(16, data.description === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.description))), true);
  // 0x18: pointer
  if (data?.version !== undefined) view.setBigUint64(24, data.version === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.version))), true);
  // 0x20: pointer
  if (data?.vendorName !== undefined) view.setBigUint64(32, data.vendorName === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.vendorName))), true);
  // 0x28: pointer
  if (data?.infoClsid !== undefined) view.setBigUint64(40, data.infoClsid === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.infoClsid))), true);
  // 0x30: pointer
  if (data?.configClsid !== undefined) view.setBigUint64(48, data.configClsid === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.configClsid))), true);
  // 0x38: pointer
  if (data?.registrationDate !== undefined) view.setBigUint64(56, data.registrationDate === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.registrationDate))), true);
  // 0x40: u32
  if (data?.componentType !== undefined) view.setUint32(64, Number(data.componentType), true);
  // 0x44: pad4
  return buf;
}

export class NapComponentRegistrationInfoView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get id(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  get friendlyName(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x10: pointer
  get description(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(16, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x18: pointer
  get version(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(24, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x20: pointer
  get vendorName(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(32, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x28: pointer
  get infoClsid(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(40, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x30: pointer
  get configClsid(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(48, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x38: pointer
  get registrationDate(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(56, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x40: u32
  get componentType(): number {
    return this.view.getUint32(64, true);
  }

  // 0x44: pad4

  // 0x00: u32
  set id(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  set friendlyName(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x10: pointer
  set description(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(16, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x18: pointer
  set version(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(24, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x20: pointer
  set vendorName(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(32, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x28: pointer
  set infoClsid(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(40, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x30: pointer
  set configClsid(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(48, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x38: pointer
  set registrationDate(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(56, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x40: u32
  set componentType(value: number) {
    this.view.setUint32(64, value, true);
  }

  // 0x44: pad4
}

// Native Libraries

// Symbols

