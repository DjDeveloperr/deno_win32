/// Auto-generated by Deno Win32: Windows.Win32.Security.Authentication.Identity.Apis

import * as util from "../../../util.ts";

// Enums
export type SECPKG_ATTR = number;
export type MSV1_0 = number;
export type SECPKG_CRED = number;
export type MSV_SUB_AUTHENTICATION_FILTER = number;
export type EXPORT_SECURITY_CONTEXT_FLAGS = number;
export type KERB_TICKET_FLAGS = number;
export type KERB_ADDRESS_TYPE = number;
export type SCHANNEL_CRED_FLAGS = number;
export type DOMAIN_PASSWORD_PROPERTIES = number;
export type SCHANNEL_ALERT_TOKEN_ALERT_TYPE = number;
export type TRUSTED_DOMAIN_TRUST_TYPE = number;
export type MSV_SUBAUTH_LOGON_PARAMETER_CONTROL = number;
export type KERB_REQUEST_FLAGS = number;
export type TRUSTED_DOMAIN_TRUST_DIRECTION = number;
export type MSV_SUPPLEMENTAL_CREDENTIAL_FLAGS = number;
export type SECURITY_PACKAGE_OPTIONS_TYPE = number;
export type SCHANNEL_SESSION_TOKEN_FLAGS = number;
export type KERB_CRYPTO_KEY_TYPE = number;
export type LSA_AUTH_INFORMATION_AUTH_TYPE = number;
export type SECPKG_PACKAGE_CHANGE_TYPE = number;
export type TRUSTED_DOMAIN_TRUST_ATTRIBUTES = number;
export type ISC_REQ_HIGH_FLAGS = Deno.PointerValue;
export type ISC_REQ_FLAGS = number;
export type ASC_REQ_HIGH_FLAGS = Deno.PointerValue;
export type ASC_REQ_FLAGS = number;
export type SID_NAME_USE = number;
export type LSA_LOOKUP_DOMAIN_INFO_CLASS = number;
export type SECURITY_LOGON_TYPE = number;
export type SE_ADT_PARAMETER_TYPE = number;
export type POLICY_AUDIT_EVENT_TYPE = number;
export type POLICY_LSA_SERVER_ROLE = number;
export type POLICY_INFORMATION_CLASS = number;
export type POLICY_DOMAIN_INFORMATION_CLASS = number;
export type POLICY_NOTIFICATION_INFORMATION_CLASS = number;
export type TRUSTED_INFORMATION_CLASS = number;
export type LSA_FOREST_TRUST_RECORD_TYPE = number;
export type LSA_FOREST_TRUST_COLLISION_RECORD_TYPE = number;
export type NEGOTIATE_MESSAGES = number;
export type MSV1_0_LOGON_SUBMIT_TYPE = number;
export type MSV1_0_PROFILE_BUFFER_TYPE = number;
export type MSV1_0_CREDENTIAL_KEY_TYPE = number;
export type MSV1_0_AVID = number;
export type MSV1_0_PROTOCOL_MESSAGE_TYPE = number;
export type KERB_LOGON_SUBMIT_TYPE = number;
export type KERB_PROFILE_BUFFER_TYPE = number;
export type KERB_PROTOCOL_MESSAGE_TYPE = number;
export type KERB_CERTIFICATE_INFO_TYPE = number;
export type PKU2U_LOGON_SUBMIT_TYPE = number;
export type SEC_APPLICATION_PROTOCOL_NEGOTIATION_EXT = number;
export type SEC_TRAFFIC_SECRET_TYPE = number;
export type SECPKG_CRED_CLASS = number;
export type SECPKG_ATTR_LCT_STATUS = number;
export type SEC_APPLICATION_PROTOCOL_NEGOTIATION_STATUS = number;
export type SecDelegationType = number;
export type SASL_AUTHZID_STATE = number;
export type SEC_WINNT_AUTH_IDENTITY = number;
export type LSA_TOKEN_INFORMATION_TYPE = number;
export type SECURITY_IMPERSONATION_LEVEL = number;
export type SECPKG_EXTENDED_INFORMATION_CLASS = number;
export type NtmsDriveState = number;
export type FILE_DEVICE_TYPE = number;
export type NtmsLibraryType = number;
export type NtmsInventoryMethod = number;
export type NtmsLibraryFlags = number;
export type NtmsDoorState = number;
export type NtmsPortContent = number;
export type NtmsPortPosition = number;
export type NtmsBarCodeState = number;
export type NtmsMediaState = number;
export type NtmsPartitionState = number;
export type NtmsReadWriteCharacteristics = number;
export type NtmsLmOperation = number;
export type NtmsLmState = number;
export type NtmsOpreqCommand = number;
export type NtmsOpreqState = number;
export type NtmsObjectsTypes = number;
export type SECPKG_CALL_PACKAGE_MESSAGE_TYPE = number;
export type SECPKG_SESSIONINFO_TYPE = number;
export type SECPKG_NAME_TYPE = number;
export type CRED_FETCH = number;
export type CRED_FLAGS = number;
export type CRED_TYPE = number;
export type CRED_PERSIST = number;
export type KSEC_CONTEXT_TYPE = number;
export type eTlsSignatureAlgorithm = number;
export type eTlsHashAlgorithm = number;
export type SchGetExtensionsOptions = number;
export type NETLOGON_LOGON_INFO_CLASS = number;
export type TOKENBINDING_TYPE = number;
export type TOKENBINDING_EXTENSION_FORMAT = number;
export type TOKENBINDING_KEY_PARAMETERS_TYPE = number;
export type EXTENDED_NAME_FORMAT = number;
export type SLDATATYPE = number;
export type SLIDTYPE = number;
export type SLLICENSINGSTATUS = number;
export type SL_ACTIVATION_TYPE = number;
export type SLREFERRALTYPE = number;
export type SL_GENUINE_STATE = number;
export type IDENTITY_TYPE = number;
export type IdentityUpdateEvent = number;
export type IDENTITY_URL = number;
export type ACCOUNT_STATE = number;

// Constants
export const SECPKG_ATTR_C_ACCESS_TOKEN = 2147483666;
export const SECPKG_ATTR_C_FULL_ACCESS_TOKEN = 2147483778;
export const SECPKG_ATTR_CERT_TRUST_STATUS = 2147483780;
export const SECPKG_ATTR_CREDS = 2147483776;
export const SECPKG_ATTR_CREDS_2 = 2147483782;
export const SECPKG_ATTR_NEGOTIATION_PACKAGE = 2147483777;
export const SECPKG_ATTR_PACKAGE_INFO = 10;
export const SECPKG_ATTR_SERVER_AUTH_FLAGS = 2147483779;
export const SECPKG_ATTR_SIZES = 0;
export const SECPKG_ATTR_SUBJECT_SECURITY_ATTRIBUTES = 124;
export const SECPKG_ATTR_APP_DATA = 94;
export const SECPKG_ATTR_EAP_PRF_INFO = 101;
export const SECPKG_ATTR_EARLY_START = 105;
export const SECPKG_ATTR_DTLS_MTU = 34;
export const SECPKG_ATTR_KEYING_MATERIAL_INFO = 106;
export const SECPKG_ATTR_ACCESS_TOKEN = 18;
export const SECPKG_ATTR_AUTHORITY = 6;
export const SECPKG_ATTR_CLIENT_SPECIFIED_TARGET = 27;
export const SECPKG_ATTR_CONNECTION_INFO = 90;
export const SECPKG_ATTR_DCE_INFO = 3;
export const SECPKG_ATTR_ENDPOINT_BINDINGS = 26;
export const SECPKG_ATTR_EAP_KEY_BLOCK = 91;
export const SECPKG_ATTR_FLAGS = 14;
export const SECPKG_ATTR_ISSUER_LIST_EX = 89;
export const SECPKG_ATTR_KEY_INFO = 5;
export const SECPKG_ATTR_LAST_CLIENT_TOKEN_STATUS = 30;
export const SECPKG_ATTR_LIFESPAN = 2;
export const SECPKG_ATTR_LOCAL_CERT_CONTEXT = 84;
export const SECPKG_ATTR_LOCAL_CRED = 82;
export const SECPKG_ATTR_NAMES = 1;
export const SECPKG_ATTR_NATIVE_NAMES = 13;
export const SECPKG_ATTR_NEGOTIATION_INFO = 12;
export const SECPKG_ATTR_PASSWORD_EXPIRY = 8;
export const SECPKG_ATTR_REMOTE_CERT_CONTEXT = 83;
export const SECPKG_ATTR_ROOT_STORE = 85;
export const SECPKG_ATTR_SESSION_KEY = 9;
export const SECPKG_ATTR_SESSION_INFO = 93;
export const SECPKG_ATTR_STREAM_SIZES = 4;
export const SECPKG_ATTR_SUPPORTED_SIGNATURES = 102;
export const SECPKG_ATTR_TARGET_INFORMATION = 17;
export const SECPKG_ATTR_UNIQUE_BINDINGS = 25;
export const MSV1_0_PASSTHRU = 1;
export const MSV1_0_GUEST_LOGON = 2;
export const SECPKG_CRED_INBOUND = 1;
export const SECPKG_CRED_OUTBOUND = 2;
export const LOGON_GUEST = 1;
export const LOGON_NOENCRYPTION = 2;
export const LOGON_CACHED_ACCOUNT = 4;
export const LOGON_USED_LM_PASSWORD = 8;
export const LOGON_EXTRA_SIDS = 32;
export const LOGON_SUBAUTH_SESSION_KEY = 64;
export const LOGON_SERVER_TRUST_ACCOUNT = 128;
export const LOGON_PROFILE_PATH_RETURNED = 1024;
export const LOGON_RESOURCE_GROUPS = 512;
export const SECPKG_CONTEXT_EXPORT_RESET_NEW = 1;
export const SECPKG_CONTEXT_EXPORT_DELETE_OLD = 2;
export const SECPKG_CONTEXT_EXPORT_TO_KERNEL = 4;
export const KERB_TICKET_FLAGS_forwardable = 1073741824;
export const KERB_TICKET_FLAGS_forwarded = 536870912;
export const KERB_TICKET_FLAGS_hw_authent = 1048576;
export const KERB_TICKET_FLAGS_initial = 4194304;
export const KERB_TICKET_FLAGS_invalid = 16777216;
export const KERB_TICKET_FLAGS_may_postdate = 67108864;
export const KERB_TICKET_FLAGS_ok_as_delegate = 262144;
export const KERB_TICKET_FLAGS_postdated = 33554432;
export const KERB_TICKET_FLAGS_pre_authent = 2097152;
export const KERB_TICKET_FLAGS_proxiable = 268435456;
export const KERB_TICKET_FLAGS_proxy = 134217728;
export const KERB_TICKET_FLAGS_renewable = 8388608;
export const KERB_TICKET_FLAGS_reserved = 2147483648;
export const KERB_TICKET_FLAGS_reserved1 = 1;
export const DS_INET_ADDRESS = 1;
export const DS_NETBIOS_ADDRESS = 2;
export const SCH_CRED_AUTO_CRED_VALIDATION = 32;
export const SCH_CRED_CACHE_ONLY_URL_RETRIEVAL_ON_CREATE = 131072;
export const SCH_DISABLE_RECONNECTS = 128;
export const SCH_CRED_IGNORE_NO_REVOCATION_CHECK = 2048;
export const SCH_CRED_IGNORE_REVOCATION_OFFLINE = 4096;
export const SCH_CRED_MANUAL_CRED_VALIDATION = 8;
export const SCH_CRED_NO_DEFAULT_CREDS = 16;
export const SCH_CRED_NO_SERVERNAME_CHECK = 4;
export const SCH_CRED_NO_SYSTEM_MAPPER = 2;
export const SCH_CRED_REVOCATION_CHECK_CHAIN = 512;
export const SCH_CRED_REVOCATION_CHECK_CHAIN_EXCLUDE_ROOT = 1024;
export const SCH_CRED_REVOCATION_CHECK_END_CERT = 256;
export const SCH_CRED_USE_DEFAULT_CREDS = 64;
export const SCH_SEND_AUX_RECORD = 2097152;
export const SCH_SEND_ROOT_CERT = 262144;
export const SCH_USE_STRONG_CRYPTO = 4194304;
export const SCH_USE_PRESHAREDKEY_ONLY = 8388608;
export const DOMAIN_PASSWORD_COMPLEX = 1;
export const DOMAIN_PASSWORD_NO_ANON_CHANGE = 2;
export const DOMAIN_PASSWORD_NO_CLEAR_CHANGE = 4;
export const DOMAIN_LOCKOUT_ADMINS = 8;
export const DOMAIN_PASSWORD_STORE_CLEARTEXT = 16;
export const DOMAIN_REFUSE_PASSWORD_CHANGE = 32;
export const TLS1_ALERT_WARNING = 1;
export const TLS1_ALERT_FATAL = 2;
export const TRUST_TYPE_DOWNLEVEL = 1;
export const TRUST_TYPE_UPLEVEL = 2;
export const TRUST_TYPE_MIT = 3;
export const TRUST_TYPE_DCE = 4;
export const MSV1_0_CLEARTEXT_PASSWORD_ALLOWED = 2;
export const MSV1_0_UPDATE_LOGON_STATISTICS = 4;
export const MSV1_0_RETURN_USER_PARAMETERS = 8;
export const MSV1_0_DONT_TRY_GUEST_ACCOUNT = 16;
export const MSV1_0_ALLOW_SERVER_TRUST_ACCOUNT = 32;
export const MSV1_0_RETURN_PASSWORD_EXPIRY = 64;
export const MSV1_0_ALLOW_WORKSTATION_TRUST_ACCOUNT = 2048;
export const MSV1_0_TRY_GUEST_ACCOUNT_ONLY = 256;
export const MSV1_0_RETURN_PROFILE_PATH = 512;
export const MSV1_0_TRY_SPECIFIED_DOMAIN_ONLY = 1024;
export const KERB_REQUEST_ADD_CREDENTIAL = 1;
export const KERB_REQUEST_REPLACE_CREDENTIAL = 2;
export const KERB_REQUEST_REMOVE_CREDENTIAL = 4;
export const TRUST_DIRECTION_DISABLED = 0;
export const TRUST_DIRECTION_INBOUND = 1;
export const TRUST_DIRECTION_OUTBOUND = 2;
export const TRUST_DIRECTION_BIDIRECTIONAL = 3;
export const MSV1_0_CRED_LM_PRESENT = 1;
export const MSV1_0_CRED_NT_PRESENT = 2;
export const MSV1_0_CRED_VERSION = 0;
export const SECPKG_OPTIONS_TYPE_UNKNOWN = 0;
export const SECPKG_OPTIONS_TYPE_LSA = 1;
export const SECPKG_OPTIONS_TYPE_SSPI = 2;
export const SSL_SESSION_ENABLE_RECONNECTS = 1;
export const SSL_SESSION_DISABLE_RECONNECTS = 2;
export const KERB_ETYPE_DES_CBC_CRC = 1;
export const KERB_ETYPE_DES_CBC_MD4 = 2;
export const KERB_ETYPE_DES_CBC_MD5 = 3;
export const KERB_ETYPE_NULL = 0;
export const KERB_ETYPE_RC4_HMAC_NT = 23;
export const KERB_ETYPE_RC4_MD4 = `-128`;
export const TRUST_AUTH_TYPE_NONE = 0;
export const TRUST_AUTH_TYPE_NT4OWF = 1;
export const TRUST_AUTH_TYPE_CLEAR = 2;
export const TRUST_AUTH_TYPE_VERSION = 3;
export const SECPKG_PACKAGE_CHANGE_LOAD = 0;
export const SECPKG_PACKAGE_CHANGE_UNLOAD = 1;
export const SECPKG_PACKAGE_CHANGE_SELECT = 2;
export const TRUST_ATTRIBUTE_NON_TRANSITIVE = 1;
export const TRUST_ATTRIBUTE_UPLEVEL_ONLY = 2;
export const TRUST_ATTRIBUTE_FILTER_SIDS = 4;
export const TRUST_ATTRIBUTE_FOREST_TRANSITIVE = 8;
export const TRUST_ATTRIBUTE_CROSS_ORGANIZATION = 16;
export const TRUST_ATTRIBUTE_TREAT_AS_EXTERNAL = 64;
export const TRUST_ATTRIBUTE_WITHIN_FOREST = 32;
export const ISC_REQ_MESSAGES = 4294967296;
export const ISC_REQ_DEFERRED_CRED_VALIDATION = 8589934592;
export const ISC_REQ_DELEGATE = 1;
export const ISC_REQ_MUTUAL_AUTH = 2;
export const ISC_REQ_REPLAY_DETECT = 4;
export const ISC_REQ_SEQUENCE_DETECT = 8;
export const ISC_REQ_CONFIDENTIALITY = 16;
export const ISC_REQ_USE_SESSION_KEY = 32;
export const ISC_REQ_PROMPT_FOR_CREDS = 64;
export const ISC_REQ_USE_SUPPLIED_CREDS = 128;
export const ISC_REQ_ALLOCATE_MEMORY = 256;
export const ISC_REQ_USE_DCE_STYLE = 512;
export const ISC_REQ_DATAGRAM = 1024;
export const ISC_REQ_CONNECTION = 2048;
export const ISC_REQ_CALL_LEVEL = 4096;
export const ISC_REQ_FRAGMENT_SUPPLIED = 8192;
export const ISC_REQ_EXTENDED_ERROR = 16384;
export const ISC_REQ_STREAM = 32768;
export const ISC_REQ_INTEGRITY = 65536;
export const ISC_REQ_IDENTIFY = 131072;
export const ISC_REQ_NULL_SESSION = 262144;
export const ISC_REQ_MANUAL_CRED_VALIDATION = 524288;
export const ISC_REQ_RESERVED1 = 1048576;
export const ISC_REQ_FRAGMENT_TO_FIT = 2097152;
export const ISC_REQ_FORWARD_CREDENTIALS = 4194304;
export const ISC_REQ_NO_INTEGRITY = 8388608;
export const ISC_REQ_USE_HTTP_STYLE = 16777216;
export const ISC_REQ_UNVERIFIED_TARGET_NAME = 536870912;
export const ISC_REQ_CONFIDENTIALITY_ONLY = 1073741824;
export const ASC_REQ_MESSAGES = 4294967296;
export const ASC_REQ_DELEGATE = 1;
export const ASC_REQ_MUTUAL_AUTH = 2;
export const ASC_REQ_REPLAY_DETECT = 4;
export const ASC_REQ_SEQUENCE_DETECT = 8;
export const ASC_REQ_CONFIDENTIALITY = 16;
export const ASC_REQ_USE_SESSION_KEY = 32;
export const ASC_REQ_SESSION_TICKET = 64;
export const ASC_REQ_ALLOCATE_MEMORY = 256;
export const ASC_REQ_USE_DCE_STYLE = 512;
export const ASC_REQ_DATAGRAM = 1024;
export const ASC_REQ_CONNECTION = 2048;
export const ASC_REQ_CALL_LEVEL = 4096;
export const ASC_REQ_FRAGMENT_SUPPLIED = 8192;
export const ASC_REQ_EXTENDED_ERROR = 32768;
export const ASC_REQ_STREAM = 65536;
export const ASC_REQ_INTEGRITY = 131072;
export const ASC_REQ_LICENSING = 262144;
export const ASC_REQ_IDENTIFY = 524288;
export const ASC_REQ_ALLOW_NULL_SESSION = 1048576;
export const ASC_REQ_ALLOW_NON_USER_LOGONS = 2097152;
export const ASC_REQ_ALLOW_CONTEXT_REPLAY = 4194304;
export const ASC_REQ_FRAGMENT_TO_FIT = 8388608;
export const ASC_REQ_NO_TOKEN = 16777216;
export const ASC_REQ_PROXY_BINDINGS = 67108864;
export const ASC_REQ_ALLOW_MISSING_BINDINGS = 268435456;
export const NTLMSP_NAME_A = `NTLM`;
export const NTLMSP_NAME = `NTLM`;
export const MICROSOFT_KERBEROS_NAME_A = `Kerberos`;
export const MICROSOFT_KERBEROS_NAME_W = `Kerberos`;
export const MICROSOFT_KERBEROS_NAME = `Kerberos`;
export const NEGOSSP_NAME_W = `Negotiate`;
export const NEGOSSP_NAME_A = `Negotiate`;
export const NEGOSSP_NAME = `Negotiate`;
export const CLOUDAP_NAME_W = `CloudAP`;
export const ClOUDAP_NAME_A = `CloudAP`;
export const CLOUDAP_NAME = `CloudAP`;
export const ISSP_LEVEL = 32;
export const ISSP_MODE = 1;
export const SECPKG_FLAG_INTEGRITY = 1;
export const SECPKG_FLAG_PRIVACY = 2;
export const SECPKG_FLAG_TOKEN_ONLY = 4;
export const SECPKG_FLAG_DATAGRAM = 8;
export const SECPKG_FLAG_CONNECTION = 16;
export const SECPKG_FLAG_MULTI_REQUIRED = 32;
export const SECPKG_FLAG_CLIENT_ONLY = 64;
export const SECPKG_FLAG_EXTENDED_ERROR = 128;
export const SECPKG_FLAG_IMPERSONATION = 256;
export const SECPKG_FLAG_ACCEPT_WIN32_NAME = 512;
export const SECPKG_FLAG_STREAM = 1024;
export const SECPKG_FLAG_NEGOTIABLE = 2048;
export const SECPKG_FLAG_GSS_COMPATIBLE = 4096;
export const SECPKG_FLAG_LOGON = 8192;
export const SECPKG_FLAG_ASCII_BUFFERS = 16384;
export const SECPKG_FLAG_FRAGMENT = 32768;
export const SECPKG_FLAG_MUTUAL_AUTH = 65536;
export const SECPKG_FLAG_DELEGATION = 131072;
export const SECPKG_FLAG_READONLY_WITH_CHECKSUM = 262144;
export const SECPKG_FLAG_RESTRICTED_TOKENS = 524288;
export const SECPKG_FLAG_NEGO_EXTENDER = 1048576;
export const SECPKG_FLAG_NEGOTIABLE2 = 2097152;
export const SECPKG_FLAG_APPCONTAINER_PASSTHROUGH = 4194304;
export const SECPKG_FLAG_APPCONTAINER_CHECKS = 8388608;
export const SECPKG_FLAG_CREDENTIAL_ISOLATION_ENABLED = 16777216;
export const SECPKG_FLAG_APPLY_LOOPBACK = 33554432;
export const SECPKG_ID_NONE = 65535;
export const SECPKG_CALLFLAGS_APPCONTAINER = 1;
export const SECPKG_CALLFLAGS_APPCONTAINER_AUTHCAPABLE = 2;
export const SECPKG_CALLFLAGS_FORCE_SUPPLIED = 4;
export const SECPKG_CALLFLAGS_APPCONTAINER_UPNCAPABLE = 8;
export const SECBUFFER_VERSION = 0;
export const SECBUFFER_EMPTY = 0;
export const SECBUFFER_DATA = 1;
export const SECBUFFER_TOKEN = 2;
export const SECBUFFER_PKG_PARAMS = 3;
export const SECBUFFER_MISSING = 4;
export const SECBUFFER_EXTRA = 5;
export const SECBUFFER_STREAM_TRAILER = 6;
export const SECBUFFER_STREAM_HEADER = 7;
export const SECBUFFER_NEGOTIATION_INFO = 8;
export const SECBUFFER_PADDING = 9;
export const SECBUFFER_STREAM = 10;
export const SECBUFFER_MECHLIST = 11;
export const SECBUFFER_MECHLIST_SIGNATURE = 12;
export const SECBUFFER_TARGET = 13;
export const SECBUFFER_CHANNEL_BINDINGS = 14;
export const SECBUFFER_CHANGE_PASS_RESPONSE = 15;
export const SECBUFFER_TARGET_HOST = 16;
export const SECBUFFER_ALERT = 17;
export const SECBUFFER_APPLICATION_PROTOCOLS = 18;
export const SECBUFFER_SRTP_PROTECTION_PROFILES = 19;
export const SECBUFFER_SRTP_MASTER_KEY_IDENTIFIER = 20;
export const SECBUFFER_TOKEN_BINDING = 21;
export const SECBUFFER_PRESHARED_KEY = 22;
export const SECBUFFER_PRESHARED_KEY_IDENTITY = 23;
export const SECBUFFER_DTLS_MTU = 24;
export const SECBUFFER_SEND_GENERIC_TLS_EXTENSION = 25;
export const SECBUFFER_SUBSCRIBE_GENERIC_TLS_EXTENSION = 26;
export const SECBUFFER_FLAGS = 27;
export const SECBUFFER_TRAFFIC_SECRETS = 28;
export const SECBUFFER_ATTRMASK = 4026531840;
export const SECBUFFER_READONLY = 2147483648;
export const SECBUFFER_READONLY_WITH_CHECKSUM = 268435456;
export const SECBUFFER_RESERVED = 1610612736;
export const SZ_ALG_MAX_SIZE = 64;
export const SECURITY_NATIVE_DREP = 16;
export const SECURITY_NETWORK_DREP = 0;
export const SECPKG_CRED_BOTH = 3;
export const SECPKG_CRED_DEFAULT = 4;
export const SECPKG_CRED_RESERVED = 4026531840;
export const SECPKG_CRED_AUTOLOGON_RESTRICTED = 16;
export const SECPKG_CRED_PROCESS_POLICY_ONLY = 32;
export const ISC_RET_DELEGATE = 1;
export const ISC_RET_MUTUAL_AUTH = 2;
export const ISC_RET_REPLAY_DETECT = 4;
export const ISC_RET_SEQUENCE_DETECT = 8;
export const ISC_RET_CONFIDENTIALITY = 16;
export const ISC_RET_USE_SESSION_KEY = 32;
export const ISC_RET_USED_COLLECTED_CREDS = 64;
export const ISC_RET_USED_SUPPLIED_CREDS = 128;
export const ISC_RET_ALLOCATED_MEMORY = 256;
export const ISC_RET_USED_DCE_STYLE = 512;
export const ISC_RET_DATAGRAM = 1024;
export const ISC_RET_CONNECTION = 2048;
export const ISC_RET_INTERMEDIATE_RETURN = 4096;
export const ISC_RET_CALL_LEVEL = 8192;
export const ISC_RET_EXTENDED_ERROR = 16384;
export const ISC_RET_STREAM = 32768;
export const ISC_RET_INTEGRITY = 65536;
export const ISC_RET_IDENTIFY = 131072;
export const ISC_RET_NULL_SESSION = 262144;
export const ISC_RET_MANUAL_CRED_VALIDATION = 524288;
export const ISC_RET_RESERVED1 = 1048576;
export const ISC_RET_FRAGMENT_ONLY = 2097152;
export const ISC_RET_FORWARD_CREDENTIALS = 4194304;
export const ISC_RET_USED_HTTP_STYLE = 16777216;
export const ISC_RET_NO_ADDITIONAL_TOKEN = 33554432;
export const ISC_RET_REAUTHENTICATION = 134217728;
export const ISC_RET_CONFIDENTIALITY_ONLY = 1073741824;
export const ISC_RET_MESSAGES = 4294967296;
export const ISC_RET_DEFERRED_CRED_VALIDATION = 8589934592;
export const ASC_RET_DELEGATE = 1;
export const ASC_RET_MUTUAL_AUTH = 2;
export const ASC_RET_REPLAY_DETECT = 4;
export const ASC_RET_SEQUENCE_DETECT = 8;
export const ASC_RET_CONFIDENTIALITY = 16;
export const ASC_RET_USE_SESSION_KEY = 32;
export const ASC_RET_SESSION_TICKET = 64;
export const ASC_RET_ALLOCATED_MEMORY = 256;
export const ASC_RET_USED_DCE_STYLE = 512;
export const ASC_RET_DATAGRAM = 1024;
export const ASC_RET_CONNECTION = 2048;
export const ASC_RET_CALL_LEVEL = 8192;
export const ASC_RET_THIRD_LEG_FAILED = 16384;
export const ASC_RET_EXTENDED_ERROR = 32768;
export const ASC_RET_STREAM = 65536;
export const ASC_RET_INTEGRITY = 131072;
export const ASC_RET_LICENSING = 262144;
export const ASC_RET_IDENTIFY = 524288;
export const ASC_RET_NULL_SESSION = 1048576;
export const ASC_RET_ALLOW_NON_USER_LOGONS = 2097152;
export const ASC_RET_ALLOW_CONTEXT_REPLAY = 4194304;
export const ASC_RET_FRAGMENT_ONLY = 8388608;
export const ASC_RET_NO_TOKEN = 16777216;
export const ASC_RET_NO_ADDITIONAL_TOKEN = 33554432;
export const ASC_RET_MESSAGES = 4294967296;
export const SECPKG_CRED_ATTR_NAMES = 1;
export const SECPKG_CRED_ATTR_SSI_PROVIDER = 2;
export const SECPKG_CRED_ATTR_KDC_PROXY_SETTINGS = 3;
export const SECPKG_CRED_ATTR_CERT = 4;
export const SECPKG_CRED_ATTR_PAC_BYPASS = 5;
export const KDC_PROXY_SETTINGS_V1 = 1;
export const KDC_PROXY_SETTINGS_FLAGS_FORCEPROXY = 1;
export const SECPKG_ATTR_PROTO_INFO = 7;
export const SECPKG_ATTR_USER_FLAGS = 11;
export const SECPKG_ATTR_USE_VALIDATED = 15;
export const SECPKG_ATTR_CREDENTIAL_NAME = 16;
export const SECPKG_ATTR_TARGET = 19;
export const SECPKG_ATTR_AUTHENTICATION_ID = 20;
export const SECPKG_ATTR_LOGOFF_TIME = 21;
export const SECPKG_ATTR_NEGO_KEYS = 22;
export const SECPKG_ATTR_PROMPTING_NEEDED = 24;
export const SECPKG_ATTR_NEGO_PKG_INFO = 31;
export const SECPKG_ATTR_NEGO_STATUS = 32;
export const SECPKG_ATTR_CONTEXT_DELETED = 33;
export const SECPKG_ATTR_APPLICATION_PROTOCOL = 35;
export const SECPKG_ATTR_NEGOTIATED_TLS_EXTENSIONS = 36;
export const SECPKG_ATTR_IS_LOOPBACK = 37;
export const SECPKG_ATTR_NEGO_INFO_FLAG_NO_KERBEROS = 1;
export const SECPKG_ATTR_NEGO_INFO_FLAG_NO_NTLM = 2;
export const SECPKG_NEGOTIATION_COMPLETE = 0;
export const SECPKG_NEGOTIATION_OPTIMISTIC = 1;
export const SECPKG_NEGOTIATION_IN_PROGRESS = 2;
export const SECPKG_NEGOTIATION_DIRECT = 3;
export const SECPKG_NEGOTIATION_TRY_MULTICRED = 4;
export const MAX_PROTOCOL_ID_SIZE = 255;
export const SECQOP_WRAP_NO_ENCRYPT = 2147483649;
export const SECQOP_WRAP_OOB_DATA = 1073741824;
export const SECURITY_ENTRYPOINT_ANSIW = `InitSecurityInterfaceW`;
export const SECURITY_ENTRYPOINT_ANSIA = `InitSecurityInterfaceA`;
export const SECURITY_ENTRYPOINT16 = `INITSECURITYINTERFACEA`;
export const SECURITY_ENTRYPOINT_ANSI = `InitSecurityInterfaceW`;
export const SECURITY_ENTRYPOINT = `INITSECURITYINTERFACEA`;
export const SECURITY_SUPPORT_PROVIDER_INTERFACE_VERSION = 1;
export const SECURITY_SUPPORT_PROVIDER_INTERFACE_VERSION_2 = 2;
export const SECURITY_SUPPORT_PROVIDER_INTERFACE_VERSION_3 = 3;
export const SECURITY_SUPPORT_PROVIDER_INTERFACE_VERSION_4 = 4;
export const SECURITY_SUPPORT_PROVIDER_INTERFACE_VERSION_5 = 5;
export const SASL_OPTION_SEND_SIZE = 1;
export const SASL_OPTION_RECV_SIZE = 2;
export const SASL_OPTION_AUTHZ_STRING = 3;
export const SASL_OPTION_AUTHZ_PROCESSING = 4;
export const SEC_WINNT_AUTH_IDENTITY_VERSION_2 = 513;
export const SEC_WINNT_AUTH_IDENTITY_VERSION = 512;
export const SEC_WINNT_AUTH_IDENTITY_FLAGS_PROCESS_ENCRYPTED = 16;
export const SEC_WINNT_AUTH_IDENTITY_FLAGS_SYSTEM_PROTECTED = 32;
export const SEC_WINNT_AUTH_IDENTITY_FLAGS_USER_PROTECTED = 64;
export const SEC_WINNT_AUTH_IDENTITY_FLAGS_SYSTEM_ENCRYPTED = 128;
export const SEC_WINNT_AUTH_IDENTITY_FLAGS_RESERVED = 65536;
export const SEC_WINNT_AUTH_IDENTITY_FLAGS_NULL_USER = 131072;
export const SEC_WINNT_AUTH_IDENTITY_FLAGS_NULL_DOMAIN = 262144;
export const SEC_WINNT_AUTH_IDENTITY_FLAGS_ID_PROVIDER = 524288;
export const SEC_WINNT_AUTH_IDENTITY_FLAGS_SSPIPFC_USE_MASK = 4278190080;
export const SEC_WINNT_AUTH_IDENTITY_FLAGS_SSPIPFC_CREDPROV_DO_NOT_SAVE = 2147483648;
export const SEC_WINNT_AUTH_IDENTITY_FLAGS_SSPIPFC_SAVE_CRED_BY_CALLER = 2147483648;
export const SEC_WINNT_AUTH_IDENTITY_FLAGS_SSPIPFC_SAVE_CRED_CHECKED = 1073741824;
export const SEC_WINNT_AUTH_IDENTITY_FLAGS_SSPIPFC_NO_CHECKBOX = 536870912;
export const SEC_WINNT_AUTH_IDENTITY_FLAGS_SSPIPFC_CREDPROV_DO_NOT_LOAD = 268435456;
export const SSPIPFC_CREDPROV_DO_NOT_SAVE = 1;
export const SSPIPFC_SAVE_CRED_BY_CALLER = 1;
export const SSPIPFC_NO_CHECKBOX = 2;
export const SSPIPFC_CREDPROV_DO_NOT_LOAD = 4;
export const SSPIPFC_USE_CREDUIBROKER = 8;
export const NGC_DATA_FLAG_KERB_CERTIFICATE_LOGON_FLAG_CHECK_DUPLICATES = 1;
export const NGC_DATA_FLAG_KERB_CERTIFICATE_LOGON_FLAG_USE_CERTIFICATE_INFO = 2;
export const NGC_DATA_FLAG_IS_SMARTCARD_DATA = 4;
export const NGC_DATA_FLAG_IS_CLOUD_TRUST_CRED = 8;
export const SEC_WINNT_AUTH_IDENTITY_ENCRYPT_SAME_LOGON = 1;
export const SEC_WINNT_AUTH_IDENTITY_ENCRYPT_SAME_PROCESS = 2;
export const SEC_WINNT_AUTH_IDENTITY_ENCRYPT_FOR_SYSTEM = 4;
export const SEC_WINNT_AUTH_IDENTITY_MARSHALLED = 4;
export const SEC_WINNT_AUTH_IDENTITY_ONLY = 8;
export const SECPKG_OPTIONS_PERMANENT = 1;
export const LOOKUP_VIEW_LOCAL_INFORMATION = 1;
export const LOOKUP_TRANSLATE_NAMES = 2048;
export const SECPKG_ATTR_ISSUER_LIST = 80;
export const SECPKG_ATTR_REMOTE_CRED = 81;
export const SECPKG_ATTR_SUPPORTED_ALGS = 86;
export const SECPKG_ATTR_CIPHER_STRENGTHS = 87;
export const SECPKG_ATTR_SUPPORTED_PROTOCOLS = 88;
export const SECPKG_ATTR_MAPPED_CRED_ATTR = 92;
export const SECPKG_ATTR_REMOTE_CERTIFICATES = 95;
export const SECPKG_ATTR_CLIENT_CERT_POLICY = 96;
export const SECPKG_ATTR_CC_POLICY_RESULT = 97;
export const SECPKG_ATTR_USE_NCRYPT = 98;
export const SECPKG_ATTR_LOCAL_CERT_INFO = 99;
export const SECPKG_ATTR_CIPHER_INFO = 100;
export const SECPKG_ATTR_REMOTE_CERT_CHAIN = 103;
export const SECPKG_ATTR_UI_INFO = 104;
export const SECPKG_ATTR_KEYING_MATERIAL = 107;
export const SECPKG_ATTR_SRTP_PARAMETERS = 108;
export const SECPKG_ATTR_TOKEN_BINDING = 109;
export const SECPKG_ATTR_CONNECTION_INFO_EX = 110;
export const SECPKG_ATTR_KEYING_MATERIAL_TOKEN_BINDING = 111;
export const SECPKG_ATTR_KEYING_MATERIAL_INPROC = 112;
export const SECPKG_ATTR_CERT_CHECK_RESULT = 113;
export const SECPKG_ATTR_CERT_CHECK_RESULT_INPROC = 114;
export const SECPKG_ATTR_SESSION_TICKET_KEYS = 115;
export const SESSION_TICKET_INFO_V0 = 0;
export const SESSION_TICKET_INFO_VERSION = 0;
export const LSA_MODE_PASSWORD_PROTECTED = 1;
export const LSA_MODE_INDIVIDUAL_ACCOUNTS = 2;
export const LSA_MODE_MANDATORY_ACCESS = 4;
export const LSA_MODE_LOG_FULL = 8;
export const LSA_MAXIMUM_SID_COUNT = 256;
export const LSA_MAXIMUM_ENUMERATION_LENGTH = 32000;
export const LSA_CALL_LICENSE_SERVER = 2147483648;
export const SE_ADT_OBJECT_ONLY = 1;
export const SE_MAX_AUDIT_PARAMETERS = 32;
export const SE_MAX_GENERIC_AUDIT_PARAMETERS = 28;
export const SE_ADT_PARAMETERS_SELF_RELATIVE = 1;
export const SE_ADT_PARAMETERS_SEND_TO_LSA = 2;
export const SE_ADT_PARAMETER_EXTENSIBLE_AUDIT = 4;
export const SE_ADT_PARAMETER_GENERIC_AUDIT = 8;
export const SE_ADT_PARAMETER_WRITE_SYNCHRONOUS = 16;
export const LSA_ADT_SECURITY_SOURCE_NAME = `Microsoft-Windows-Security-Auditing`;
export const LSA_ADT_LEGACY_SECURITY_SOURCE_NAME = `Security`;
export const SE_ADT_POLICY_AUDIT_EVENT_TYPE_EX_BEGIN = 100;
export const POLICY_AUDIT_EVENT_UNCHANGED = 0;
export const POLICY_AUDIT_EVENT_SUCCESS = 1;
export const POLICY_AUDIT_EVENT_FAILURE = 2;
export const POLICY_AUDIT_EVENT_NONE = 4;
export const LSA_AP_NAME_INITIALIZE_PACKAGE = `LsaApInitializePackage\0`;
export const LSA_AP_NAME_LOGON_USER = `LsaApLogonUser\0`;
export const LSA_AP_NAME_LOGON_USER_EX = `LsaApLogonUserEx\0`;
export const LSA_AP_NAME_CALL_PACKAGE = `LsaApCallPackage\0`;
export const LSA_AP_NAME_LOGON_TERMINATED = `LsaApLogonTerminated\0`;
export const LSA_AP_NAME_CALL_PACKAGE_UNTRUSTED = `LsaApCallPackageUntrusted\0`;
export const LSA_AP_NAME_CALL_PACKAGE_PASSTHROUGH = `LsaApCallPackagePassthrough\0`;
export const POLICY_VIEW_LOCAL_INFORMATION = 1;
export const POLICY_VIEW_AUDIT_INFORMATION = 2;
export const POLICY_GET_PRIVATE_INFORMATION = 4;
export const POLICY_TRUST_ADMIN = 8;
export const POLICY_CREATE_ACCOUNT = 16;
export const POLICY_CREATE_SECRET = 32;
export const POLICY_CREATE_PRIVILEGE = 64;
export const POLICY_SET_DEFAULT_QUOTA_LIMITS = 128;
export const POLICY_SET_AUDIT_REQUIREMENTS = 256;
export const POLICY_AUDIT_LOG_ADMIN = 512;
export const POLICY_SERVER_ADMIN = 1024;
export const POLICY_LOOKUP_NAMES = 2048;
export const POLICY_NOTIFICATION = 4096;
export const LSA_LOOKUP_ISOLATED_AS_LOCAL = 2147483648;
export const LSA_LOOKUP_DISALLOW_CONNECTED_ACCOUNT_INTERNET_SID = 2147483648;
export const LSA_LOOKUP_PREFER_INTERNET_NAMES = 1073741824;
export const PER_USER_POLICY_UNCHANGED = 0;
export const PER_USER_AUDIT_SUCCESS_INCLUDE = 1;
export const PER_USER_AUDIT_SUCCESS_EXCLUDE = 2;
export const PER_USER_AUDIT_FAILURE_INCLUDE = 4;
export const PER_USER_AUDIT_FAILURE_EXCLUDE = 8;
export const PER_USER_AUDIT_NONE = 16;
export const POLICY_QOS_SCHANNEL_REQUIRED = 1;
export const POLICY_QOS_OUTBOUND_INTEGRITY = 2;
export const POLICY_QOS_OUTBOUND_CONFIDENTIALITY = 4;
export const POLICY_QOS_INBOUND_INTEGRITY = 8;
export const POLICY_QOS_INBOUND_CONFIDENTIALITY = 16;
export const POLICY_QOS_ALLOW_LOCAL_ROOT_CERT_STORE = 32;
export const POLICY_QOS_RAS_SERVER_ALLOWED = 64;
export const POLICY_QOS_DHCP_SERVER_ALLOWED = 128;
export const POLICY_KERBEROS_VALIDATE_CLIENT = 128;
export const ACCOUNT_VIEW = 1;
export const ACCOUNT_ADJUST_PRIVILEGES = 2;
export const ACCOUNT_ADJUST_QUOTAS = 4;
export const ACCOUNT_ADJUST_SYSTEM_ACCESS = 8;
export const TRUSTED_QUERY_DOMAIN_NAME = 1;
export const TRUSTED_QUERY_CONTROLLERS = 2;
export const TRUSTED_SET_CONTROLLERS = 4;
export const TRUSTED_QUERY_POSIX = 8;
export const TRUSTED_SET_POSIX = 16;
export const TRUSTED_SET_AUTH = 32;
export const TRUSTED_QUERY_AUTH = 64;
export const TRUST_ATTRIBUTE_TREE_PARENT = 4194304;
export const TRUST_ATTRIBUTE_TREE_ROOT = 8388608;
export const TRUST_ATTRIBUTES_VALID = 4278386687;
export const TRUST_ATTRIBUTE_QUARANTINED_DOMAIN = 4;
export const TRUST_ATTRIBUTE_TRUST_USES_RC4_ENCRYPTION = 128;
export const TRUST_ATTRIBUTE_TRUST_USES_AES_KEYS = 256;
export const TRUST_ATTRIBUTE_CROSS_ORGANIZATION_NO_TGT_DELEGATION = 512;
export const TRUST_ATTRIBUTE_PIM_TRUST = 1024;
export const TRUST_ATTRIBUTE_CROSS_ORGANIZATION_ENABLE_TGT_DELEGATION = 2048;
export const TRUST_ATTRIBUTES_USER = 4278190080;
export const LSA_FOREST_TRUST_RECORD_TYPE_UNRECOGNIZED = 2147483648;
export const LSA_FTRECORD_DISABLED_REASONS = 65535;
export const LSA_TLN_DISABLED_NEW = 1;
export const LSA_TLN_DISABLED_ADMIN = 2;
export const LSA_TLN_DISABLED_CONFLICT = 4;
export const LSA_SID_DISABLED_ADMIN = 1;
export const LSA_SID_DISABLED_CONFLICT = 2;
export const LSA_NB_DISABLED_ADMIN = 4;
export const LSA_NB_DISABLED_CONFLICT = 8;
export const MAX_RECORDS_IN_FOREST_TRUST_INFO = 4000;
export const SECRET_SET_VALUE = 1;
export const SECRET_QUERY_VALUE = 2;
export const LSA_GLOBAL_SECRET_PREFIX = `G$`;
export const LSA_GLOBAL_SECRET_PREFIX_LENGTH = 2;
export const LSA_LOCAL_SECRET_PREFIX = `L$`;
export const LSA_LOCAL_SECRET_PREFIX_LENGTH = 2;
export const LSA_MACHINE_SECRET_PREFIX = `M$`;
export const LSA_SECRET_MAXIMUM_COUNT = 4096;
export const LSA_SECRET_MAXIMUM_LENGTH = 512;
export const MAXIMUM_CAPES_PER_CAP = 127;
export const CENTRAL_ACCESS_POLICY_OWNER_RIGHTS_PRESENT_FLAG = 1;
export const CENTRAL_ACCESS_POLICY_STAGED_OWNER_RIGHTS_PRESENT_FLAG = 256;
export const CENTRAL_ACCESS_POLICY_STAGED_FLAG = 65536;
export const LSASETCAPS_RELOAD_FLAG = 1;
export const LSASETCAPS_VALID_FLAG_MASK = 1;
export const SE_INTERACTIVE_LOGON_NAME = `SeInteractiveLogonRight`;
export const SE_NETWORK_LOGON_NAME = `SeNetworkLogonRight`;
export const SE_BATCH_LOGON_NAME = `SeBatchLogonRight`;
export const SE_SERVICE_LOGON_NAME = `SeServiceLogonRight`;
export const SE_DENY_INTERACTIVE_LOGON_NAME = `SeDenyInteractiveLogonRight`;
export const SE_DENY_NETWORK_LOGON_NAME = `SeDenyNetworkLogonRight`;
export const SE_DENY_BATCH_LOGON_NAME = `SeDenyBatchLogonRight`;
export const SE_DENY_SERVICE_LOGON_NAME = `SeDenyServiceLogonRight`;
export const SE_REMOTE_INTERACTIVE_LOGON_NAME = `SeRemoteInteractiveLogonRight`;
export const SE_DENY_REMOTE_INTERACTIVE_LOGON_NAME = `SeDenyRemoteInteractiveLogonRight`;
export const NEGOTIATE_MAX_PREFIX = 32;
export const NEGOTIATE_ALLOW_NTLM = 268435456;
export const NEGOTIATE_NEG_NTLM = 536870912;
export const MAX_USER_RECORDS = 1000;
export const DOMAIN_NO_LM_OWF_CHANGE = 64;
export const SAM_PASSWORD_CHANGE_NOTIFY_ROUTINE = `PasswordChangeNotify`;
export const SAM_INIT_NOTIFICATION_ROUTINE = `InitializeChangeNotify`;
export const SAM_PASSWORD_FILTER_ROUTINE = `PasswordFilter`;
export const MSV1_0_PACKAGE_NAME = `MICROSOFT_AUTHENTICATION_PACKAGE_V1_0`;
export const MSV1_0_PACKAGE_NAMEW = `MICROSOFT_AUTHENTICATION_PACKAGE_V1_0`;
export const MSV1_0_SUBAUTHENTICATION_KEY = `SYSTEM\\CurrentControlSet\\Control\\Lsa\\MSV1_0`;
export const MSV1_0_SUBAUTHENTICATION_VALUE = `Auth`;
export const MSV1_0_CHALLENGE_LENGTH = 8;
export const MSV1_0_USER_SESSION_KEY_LENGTH = 16;
export const MSV1_0_LANMAN_SESSION_KEY_LENGTH = 8;
export const MSV1_0_USE_CLIENT_CHALLENGE = 128;
export const MSV1_0_DISABLE_PERSONAL_FALLBACK = 4096;
export const MSV1_0_ALLOW_FORCE_GUEST = 8192;
export const MSV1_0_CLEARTEXT_PASSWORD_SUPPLIED = 16384;
export const MSV1_0_USE_DOMAIN_FOR_ROUTING_ONLY = 32768;
export const MSV1_0_SUBAUTHENTICATION_DLL_EX = 1048576;
export const MSV1_0_ALLOW_MSVCHAPV2 = 65536;
export const MSV1_0_S4U2SELF = 131072;
export const MSV1_0_CHECK_LOGONHOURS_FOR_S4U = 262144;
export const MSV1_0_INTERNET_DOMAIN = 524288;
export const MSV1_0_SUBAUTHENTICATION_DLL = 4278190080;
export const MSV1_0_SUBAUTHENTICATION_DLL_SHIFT = 24;
export const MSV1_0_MNS_LOGON = 16777216;
export const MSV1_0_SUBAUTHENTICATION_DLL_RAS = 2;
export const MSV1_0_SUBAUTHENTICATION_DLL_IIS = 132;
export const MSV1_0_S4U_LOGON_FLAG_CHECK_LOGONHOURS = 2;
export const LOGON_NTLMV2_ENABLED = 256;
export const LOGON_NT_V2 = 2048;
export const LOGON_LM_V2 = 4096;
export const LOGON_NTLM_V2 = 8192;
export const LOGON_OPTIMIZED = 16384;
export const LOGON_WINLOGON = 32768;
export const LOGON_PKINIT = 65536;
export const LOGON_NO_OPTIMIZED = 131072;
export const LOGON_NO_ELEVATION = 262144;
export const LOGON_MANAGED_SERVICE = 524288;
export const MSV1_0_SUBAUTHENTICATION_FLAGS = 4278190080;
export const LOGON_GRACE_LOGON = 16777216;
export const MSV1_0_OWF_PASSWORD_LENGTH = 16;
export const MSV1_0_SHA_PASSWORD_LENGTH = 20;
export const MSV1_0_CREDENTIAL_KEY_LENGTH = 20;
export const MSV1_0_CRED_REMOVED = 4;
export const MSV1_0_CRED_CREDKEY_PRESENT = 8;
export const MSV1_0_CRED_SHA_PRESENT = 16;
export const MSV1_0_CRED_VERSION_V2 = 2;
export const MSV1_0_CRED_VERSION_V3 = 4;
export const MSV1_0_CRED_VERSION_IUM = 4294901761;
export const MSV1_0_CRED_VERSION_REMOTE = 4294901762;
export const MSV1_0_CRED_VERSION_ARSO = 4294901763;
export const MSV1_0_CRED_VERSION_RESERVED_1 = 4294967294;
export const MSV1_0_CRED_VERSION_INVALID = 4294967295;
export const MSV1_0_NTLM3_RESPONSE_LENGTH = 16;
export const MSV1_0_NTLM3_OWF_LENGTH = 16;
export const MSV1_0_MAX_NTLM3_LIFE = 1800;
export const MSV1_0_MAX_AVL_SIZE = 64000;
export const MSV1_0_AV_FLAG_FORCE_GUEST = 1;
export const MSV1_0_AV_FLAG_MIC_HANDSHAKE_MESSAGES = 2;
export const MSV1_0_AV_FLAG_UNVERIFIED_TARGET = 4;
export const RTL_ENCRYPT_MEMORY_SIZE = 8;
export const RTL_ENCRYPT_OPTION_CROSS_PROCESS = 1;
export const RTL_ENCRYPT_OPTION_SAME_LOGON = 2;
export const RTL_ENCRYPT_OPTION_FOR_SYSTEM = 4;
export const KERBEROS_VERSION = 5;
export const KERBEROS_REVISION = 6;
export const KERB_ETYPE_AES128_CTS_HMAC_SHA1_96 = 17;
export const KERB_ETYPE_AES256_CTS_HMAC_SHA1_96 = 18;
export const KERB_ETYPE_RC4_PLAIN2 = `-129`;
export const KERB_ETYPE_RC4_LM = `-130`;
export const KERB_ETYPE_RC4_SHA = `-131`;
export const KERB_ETYPE_DES_PLAIN = `-132`;
export const KERB_ETYPE_RC4_HMAC_OLD = `-133`;
export const KERB_ETYPE_RC4_PLAIN_OLD = `-134`;
export const KERB_ETYPE_RC4_HMAC_OLD_EXP = `-135`;
export const KERB_ETYPE_RC4_PLAIN_OLD_EXP = `-136`;
export const KERB_ETYPE_RC4_PLAIN = `-140`;
export const KERB_ETYPE_RC4_PLAIN_EXP = `-141`;
export const KERB_ETYPE_AES128_CTS_HMAC_SHA1_96_PLAIN = `-148`;
export const KERB_ETYPE_AES256_CTS_HMAC_SHA1_96_PLAIN = `-149`;
export const KERB_ETYPE_DSA_SHA1_CMS = 9;
export const KERB_ETYPE_RSA_MD5_CMS = 10;
export const KERB_ETYPE_RSA_SHA1_CMS = 11;
export const KERB_ETYPE_RC2_CBC_ENV = 12;
export const KERB_ETYPE_RSA_ENV = 13;
export const KERB_ETYPE_RSA_ES_OEAP_ENV = 14;
export const KERB_ETYPE_DES_EDE3_CBC_ENV = 15;
export const KERB_ETYPE_DSA_SIGN = 8;
export const KERB_ETYPE_RSA_PRIV = 9;
export const KERB_ETYPE_RSA_PUB = 10;
export const KERB_ETYPE_RSA_PUB_MD5 = 11;
export const KERB_ETYPE_RSA_PUB_SHA1 = 12;
export const KERB_ETYPE_PKCS7_PUB = 13;
export const KERB_ETYPE_DES3_CBC_MD5 = 5;
export const KERB_ETYPE_DES3_CBC_SHA1 = 7;
export const KERB_ETYPE_DES3_CBC_SHA1_KD = 16;
export const KERB_ETYPE_DES_CBC_MD5_NT = 20;
export const KERB_ETYPE_RC4_HMAC_NT_EXP = 24;
export const KERB_CHECKSUM_NONE = 0;
export const KERB_CHECKSUM_CRC32 = 1;
export const KERB_CHECKSUM_MD4 = 2;
export const KERB_CHECKSUM_KRB_DES_MAC = 4;
export const KERB_CHECKSUM_KRB_DES_MAC_K = 5;
export const KERB_CHECKSUM_MD5 = 7;
export const KERB_CHECKSUM_MD5_DES = 8;
export const KERB_CHECKSUM_SHA1_NEW = 14;
export const KERB_CHECKSUM_HMAC_SHA1_96_AES128 = 15;
export const KERB_CHECKSUM_HMAC_SHA1_96_AES256 = 16;
export const KERB_CHECKSUM_LM = `-130`;
export const KERB_CHECKSUM_SHA1 = `-131`;
export const KERB_CHECKSUM_REAL_CRC32 = `-132`;
export const KERB_CHECKSUM_DES_MAC = `-133`;
export const KERB_CHECKSUM_DES_MAC_MD5 = `-134`;
export const KERB_CHECKSUM_MD25 = `-135`;
export const KERB_CHECKSUM_RC4_MD5 = `-136`;
export const KERB_CHECKSUM_MD5_HMAC = `-137`;
export const KERB_CHECKSUM_HMAC_MD5 = `-138`;
export const KERB_CHECKSUM_HMAC_SHA1_96_AES128_Ki = `-150`;
export const KERB_CHECKSUM_HMAC_SHA1_96_AES256_Ki = `-151`;
export const AUTH_REQ_ALLOW_FORWARDABLE = 1;
export const AUTH_REQ_ALLOW_PROXIABLE = 2;
export const AUTH_REQ_ALLOW_POSTDATE = 4;
export const AUTH_REQ_ALLOW_RENEWABLE = 8;
export const AUTH_REQ_ALLOW_NOADDRESS = 16;
export const AUTH_REQ_ALLOW_ENC_TKT_IN_SKEY = 32;
export const AUTH_REQ_ALLOW_VALIDATE = 64;
export const AUTH_REQ_VALIDATE_CLIENT = 128;
export const AUTH_REQ_OK_AS_DELEGATE = 256;
export const AUTH_REQ_PREAUTH_REQUIRED = 512;
export const AUTH_REQ_TRANSITIVE_TRUST = 1024;
export const AUTH_REQ_ALLOW_S4U_DELEGATE = 2048;
export const KERB_TICKET_FLAGS_name_canonicalize = 65536;
export const KERB_TICKET_FLAGS_cname_in_pa_data = 262144;
export const KERB_TICKET_FLAGS_enc_pa_rep = 65536;
export const KRB_NT_UNKNOWN = 0;
export const KRB_NT_PRINCIPAL = 1;
export const KRB_NT_PRINCIPAL_AND_ID = `-131`;
export const KRB_NT_SRV_INST = 2;
export const KRB_NT_SRV_INST_AND_ID = `-132`;
export const KRB_NT_SRV_HST = 3;
export const KRB_NT_SRV_XHST = 4;
export const KRB_NT_UID = 5;
export const KRB_NT_ENTERPRISE_PRINCIPAL = 10;
export const KRB_NT_WELLKNOWN = 11;
export const KRB_NT_ENT_PRINCIPAL_AND_ID = `-130`;
export const KRB_NT_MS_PRINCIPAL = `-128`;
export const KRB_NT_MS_PRINCIPAL_AND_ID = `-129`;
export const KRB_NT_MS_BRANCH_ID = `-133`;
export const KRB_NT_X500_PRINCIPAL = 6;
export const KRB_WELLKNOWN_STRING = `WELLKNOWN`;
export const KRB_ANONYMOUS_STRING = `ANONYMOUS`;
export const KERB_WRAP_NO_ENCRYPT = 2147483649;
export const KERB_CERTIFICATE_LOGON_FLAG_CHECK_DUPLICATES = 1;
export const KERB_CERTIFICATE_LOGON_FLAG_USE_CERTIFICATE_INFO = 2;
export const KERB_CERTIFICATE_S4U_LOGON_FLAG_CHECK_DUPLICATES = 1;
export const KERB_CERTIFICATE_S4U_LOGON_FLAG_CHECK_LOGONHOURS = 2;
export const KERB_CERTIFICATE_S4U_LOGON_FLAG_FAIL_IF_NT_AUTH_POLICY_REQUIRED = 4;
export const KERB_CERTIFICATE_S4U_LOGON_FLAG_IDENTIFY = 8;
export const KERB_LOGON_FLAG_ALLOW_EXPIRED_TICKET = 1;
export const KERB_LOGON_FLAG_REDIRECTED = 2;
export const KERB_S4U_LOGON_FLAG_CHECK_LOGONHOURS = 2;
export const KERB_S4U_LOGON_FLAG_IDENTIFY = 8;
export const KERB_USE_DEFAULT_TICKET_FLAGS = 0;
export const KERB_RETRIEVE_TICKET_DEFAULT = 0;
export const KERB_RETRIEVE_TICKET_DONT_USE_CACHE = 1;
export const KERB_RETRIEVE_TICKET_USE_CACHE_ONLY = 2;
export const KERB_RETRIEVE_TICKET_USE_CREDHANDLE = 4;
export const KERB_RETRIEVE_TICKET_AS_KERB_CRED = 8;
export const KERB_RETRIEVE_TICKET_WITH_SEC_CRED = 16;
export const KERB_RETRIEVE_TICKET_CACHE_TICKET = 32;
export const KERB_RETRIEVE_TICKET_MAX_LIFETIME = 64;
export const KERB_ETYPE_DEFAULT = 0;
export const KERB_PURGE_ALL_TICKETS = 1;
export const KERB_S4U2PROXY_CACHE_ENTRY_INFO_FLAG_NEGATIVE = 1;
export const KERB_S4U2PROXY_CRED_FLAG_NEGATIVE = 1;
export const KERB_REFRESH_POLICY_KERBEROS = 1;
export const KERB_REFRESH_POLICY_KDC = 2;
export const KERB_CLOUD_KERBEROS_DEBUG_DATA_VERSION = 0;
export const DS_UNKNOWN_ADDRESS_TYPE = 0;
export const KERB_SETPASS_USE_LOGONID = 1;
export const KERB_SETPASS_USE_CREDHANDLE = 2;
export const KERB_DECRYPT_FLAG_DEFAULT_KEY = 1;
export const KERB_REFRESH_SCCRED_RELEASE = 0;
export const KERB_REFRESH_SCCRED_GETTGT = 1;
export const KERB_TRANSFER_CRED_WITH_TICKETS = 1;
export const KERB_TRANSFER_CRED_CLEANUP_CREDENTIALS = 2;
export const KERB_QUERY_DOMAIN_EXTENDED_POLICIES_RESPONSE_FLAG_DAC_DISABLED = 1;
export const AUDIT_SET_SYSTEM_POLICY = 1;
export const AUDIT_QUERY_SYSTEM_POLICY = 2;
export const AUDIT_SET_USER_POLICY = 4;
export const AUDIT_QUERY_USER_POLICY = 8;
export const AUDIT_ENUMERATE_USERS = 16;
export const AUDIT_SET_MISC_POLICY = 32;
export const AUDIT_QUERY_MISC_POLICY = 64;
export const PKU2U_PACKAGE_NAME_A = `pku2u`;
export const PKU2U_PACKAGE_NAME = `pku2u`;
export const PKU2U_PACKAGE_NAME_W = `pku2u`;
export const SAM_CREDENTIAL_UPDATE_NOTIFY_ROUTINE = `CredentialUpdateNotify`;
export const SAM_CREDENTIAL_UPDATE_REGISTER_ROUTINE = `CredentialUpdateRegister`;
export const SAM_CREDENTIAL_UPDATE_FREE_ROUTINE = `CredentialUpdateFree`;
export const SAM_CREDENTIAL_UPDATE_REGISTER_MAPPED_ENTRYPOINTS_ROUTINE = `RegisterMappedEntrypoints`;
export const SECPKG_CLIENT_PROCESS_TERMINATED = 1;
export const SECPKG_CLIENT_THREAD_TERMINATED = 2;
export const SECPKG_CALL_KERNEL_MODE = 1;
export const SECPKG_CALL_ANSI = 2;
export const SECPKG_CALL_URGENT = 4;
export const SECPKG_CALL_RECURSIVE = 8;
export const SECPKG_CALL_IN_PROC = 16;
export const SECPKG_CALL_CLEANUP = 32;
export const SECPKG_CALL_WOWCLIENT = 64;
export const SECPKG_CALL_THREAD_TERM = 128;
export const SECPKG_CALL_PROCESS_TERM = 256;
export const SECPKG_CALL_IS_TCB = 512;
export const SECPKG_CALL_NETWORK_ONLY = 1024;
export const SECPKG_CALL_WINLOGON = 2048;
export const SECPKG_CALL_ASYNC_UPDATE = 4096;
export const SECPKG_CALL_SYSTEM_PROC = 8192;
export const SECPKG_CALL_NEGO = 16384;
export const SECPKG_CALL_NEGO_EXTENDER = 32768;
export const SECPKG_CALL_BUFFER_MARSHAL = 65536;
export const SECPKG_CALL_UNLOCK = 131072;
export const SECPKG_CALL_CLOUDAP_CONNECT = 262144;
export const SECPKG_CALL_WOWX86 = 64;
export const SECPKG_CALL_WOWA32 = 262144;
export const SECPKG_CREDENTIAL_VERSION = 201;
export const SECPKG_CREDENTIAL_FLAGS_CALLER_HAS_TCB = 1;
export const SECPKG_CREDENTIAL_FLAGS_CREDMAN_CRED = 2;
export const SECPKG_SURROGATE_LOGON_VERSION_1 = 1;
export const SECBUFFER_UNMAPPED = 1073741824;
export const SECBUFFER_KERNEL_MAP = 536870912;
export const PRIMARY_CRED_CLEAR_PASSWORD = 1;
export const PRIMARY_CRED_OWF_PASSWORD = 2;
export const PRIMARY_CRED_UPDATE = 4;
export const PRIMARY_CRED_CACHED_LOGON = 8;
export const PRIMARY_CRED_LOGON_NO_TCB = 16;
export const PRIMARY_CRED_LOGON_LUA = 32;
export const PRIMARY_CRED_INTERACTIVE_SMARTCARD_LOGON = 64;
export const PRIMARY_CRED_REFRESH_NEEDED = 128;
export const PRIMARY_CRED_INTERNET_USER = 256;
export const PRIMARY_CRED_AUTH_ID = 512;
export const PRIMARY_CRED_DO_NOT_SPLIT = 1024;
export const PRIMARY_CRED_PROTECTED_USER = 2048;
export const PRIMARY_CRED_EX = 4096;
export const PRIMARY_CRED_TRANSFER = 8192;
export const PRIMARY_CRED_RESTRICTED_TS = 16384;
export const PRIMARY_CRED_PACKED_CREDS = 32768;
export const PRIMARY_CRED_ENTERPRISE_INTERNET_USER = 65536;
export const PRIMARY_CRED_ENCRYPTED_CREDGUARD_PASSWORD = 131072;
export const PRIMARY_CRED_CACHED_INTERACTIVE_LOGON = 262144;
export const PRIMARY_CRED_INTERACTIVE_NGC_LOGON = 524288;
export const PRIMARY_CRED_INTERACTIVE_FIDO_LOGON = 1048576;
export const PRIMARY_CRED_ARSO_LOGON = 2097152;
export const PRIMARY_CRED_SUPPLEMENTAL = 4194304;
export const PRIMARY_CRED_LOGON_PACKAGE_SHIFT = 24;
export const PRIMARY_CRED_PACKAGE_MASK = 4278190080;
export const SECPKG_PRIMARY_CRED_EX_FLAGS_EX_DELEGATION_TOKEN = 1;
export const MAX_CRED_SIZE = 1024;
export const SECPKG_STATE_ENCRYPTION_PERMITTED = 1;
export const SECPKG_STATE_STRONG_ENCRYPTION_PERMITTED = 2;
export const SECPKG_STATE_DOMAIN_CONTROLLER = 4;
export const SECPKG_STATE_WORKSTATION = 8;
export const SECPKG_STATE_STANDALONE = 16;
export const SECPKG_STATE_CRED_ISOLATION_ENABLED = 32;
export const SECPKG_STATE_RESERVED_1 = 2147483648;
export const SECPKG_MAX_OID_LENGTH = 32;
export const SECPKG_ATTR_SASL_CONTEXT = 65536;
export const SECPKG_ATTR_THUNK_ALL = 65536;
export const UNDERSTANDS_LONG_NAMES = 1;
export const NO_LONG_NAMES = 2;
export const SECPKG_CALL_PACKAGE_TRANSFER_CRED_REQUEST_FLAG_OPTIMISTIC_LOGON = 1;
export const SECPKG_CALL_PACKAGE_TRANSFER_CRED_REQUEST_FLAG_CLEANUP_CREDENTIALS = 2;
export const SECPKG_CALL_PACKAGE_TRANSFER_CRED_REQUEST_FLAG_TO_SSO_SESSION = 4;
export const NOTIFIER_FLAG_NEW_THREAD = 1;
export const NOTIFIER_FLAG_ONE_SHOT = 2;
export const NOTIFIER_FLAG_SECONDS = 2147483648;
export const NOTIFIER_TYPE_INTERVAL = 1;
export const NOTIFIER_TYPE_HANDLE_WAIT = 2;
export const NOTIFIER_TYPE_STATE_CHANGE = 3;
export const NOTIFIER_TYPE_NOTIFY_EVENT = 4;
export const NOTIFIER_TYPE_IMMEDIATE = 16;
export const NOTIFY_CLASS_PACKAGE_CHANGE = 1;
export const NOTIFY_CLASS_ROLE_CHANGE = 2;
export const NOTIFY_CLASS_DOMAIN_CHANGE = 3;
export const NOTIFY_CLASS_REGISTRY_CHANGE = 4;
export const LSA_QUERY_CLIENT_PRELOGON_SESSION_ID = 1;
export const CREDP_FLAGS_IN_PROCESS = 1;
export const CREDP_FLAGS_USE_MIDL_HEAP = 2;
export const CREDP_FLAGS_DONT_CACHE_TI = 4;
export const CREDP_FLAGS_CLEAR_PASSWORD = 8;
export const CREDP_FLAGS_USER_ENCRYPTED_PASSWORD = 16;
export const CREDP_FLAGS_TRUSTED_CALLER = 32;
export const CREDP_FLAGS_VALIDATE_PROXY_TARGET = 64;
export const CRED_MARSHALED_TI_SIZE_SIZE = 12;
export const LSA_AP_NAME_LOGON_USER_EX2 = `LsaApLogonUserEx2\0`;
export const SP_ACCEPT_CREDENTIALS_NAME = `SpAcceptCredentials\0`;
export const SECPKG_UNICODE_ATTRIBUTE = 2147483648;
export const SECPKG_ANSI_ATTRIBUTE = 0;
export const SECPKG_CREDENTIAL_ATTRIBUTE = 0;
export const SECPKG_LSAMODEINIT_NAME = `SpLsaModeInitialize`;
export const SECPKG_USERMODEINIT_NAME = `SpUserModeInitialize`;
export const SECPKG_INTERFACE_VERSION = 65536;
export const SECPKG_INTERFACE_VERSION_2 = 131072;
export const SECPKG_INTERFACE_VERSION_3 = 262144;
export const SECPKG_INTERFACE_VERSION_4 = 524288;
export const SECPKG_INTERFACE_VERSION_5 = 1048576;
export const SECPKG_INTERFACE_VERSION_6 = 2097152;
export const SECPKG_INTERFACE_VERSION_7 = 4194304;
export const SECPKG_INTERFACE_VERSION_8 = 8388608;
export const SECPKG_INTERFACE_VERSION_9 = 16777216;
export const SECPKG_INTERFACE_VERSION_10 = 33554432;
export const UNISP_NAME_A = `Microsoft Unified Security Protocol Provider`;
export const UNISP_NAME_W = `Microsoft Unified Security Protocol Provider`;
export const SSL2SP_NAME_A = `Microsoft SSL 2.0`;
export const SSL2SP_NAME_W = `Microsoft SSL 2.0`;
export const SSL3SP_NAME_A = `Microsoft SSL 3.0`;
export const SSL3SP_NAME_W = `Microsoft SSL 3.0`;
export const TLS1SP_NAME_A = `Microsoft TLS 1.0`;
export const TLS1SP_NAME_W = `Microsoft TLS 1.0`;
export const PCT1SP_NAME_A = `Microsoft PCT 1.0`;
export const PCT1SP_NAME_W = `Microsoft PCT 1.0`;
export const SCHANNEL_NAME_A = `Schannel`;
export const SCHANNEL_NAME_W = `Schannel`;
export const DEFAULT_TLS_SSP_NAME_A = `Default TLS SSP`;
export const DEFAULT_TLS_SSP_NAME_W = `Default TLS SSP`;
export const UNISP_NAME = `Microsoft Unified Security Protocol Provider`;
export const PCT1SP_NAME = `Microsoft PCT 1.0`;
export const SSL2SP_NAME = `Microsoft SSL 2.0`;
export const SSL3SP_NAME = `Microsoft SSL 3.0`;
export const TLS1SP_NAME = `Microsoft TLS 1.0`;
export const SCHANNEL_NAME = `Schannel`;
export const DEFAULT_TLS_SSP_NAME = `Default TLS SSP`;
export const UNISP_RPC_ID = 14;
export const RCRED_STATUS_NOCRED = 0;
export const RCRED_CRED_EXISTS = 1;
export const RCRED_STATUS_UNKNOWN_ISSUER = 2;
export const LCRED_STATUS_NOCRED = 0;
export const LCRED_CRED_EXISTS = 1;
export const LCRED_STATUS_UNKNOWN_ISSUER = 2;
export const SECPKGCONTEXT_CONNECTION_INFO_EX_V1 = 1;
export const SECPKGCONTEXT_CIPHERINFO_V1 = 1;
export const SSL_SESSION_RECONNECT = 1;
export const KERN_CONTEXT_CERT_INFO_V1 = 0;
export const ENABLE_TLS_CLIENT_EARLY_START = 1;
export const SCH_CRED_V1 = 1;
export const SCH_CRED_V2 = 2;
export const SCH_CRED_VERSION = 2;
export const SCH_CRED_V3 = 3;
export const SCHANNEL_CRED_VERSION = 4;
export const SCH_CREDENTIALS_VERSION = 5;
export const TLS_PARAMS_OPTIONAL = 1;
export const SCH_CRED_MAX_SUPPORTED_PARAMETERS = 16;
export const SCH_CRED_MAX_SUPPORTED_ALPN_IDS = 16;
export const SCH_CRED_MAX_SUPPORTED_CRYPTO_SETTINGS = 16;
export const SCH_CRED_MAX_SUPPORTED_CHAINING_MODES = 16;
export const SCH_MAX_EXT_SUBSCRIPTIONS = 2;
export const SCH_CRED_FORMAT_CERT_CONTEXT = 0;
export const SCH_CRED_FORMAT_CERT_HASH = 1;
export const SCH_CRED_FORMAT_CERT_HASH_STORE = 2;
export const SCH_CRED_MAX_STORE_NAME_SIZE = 128;
export const SCH_CRED_MAX_SUPPORTED_ALGS = 256;
export const SCH_CRED_MAX_SUPPORTED_CERTS = 100;
export const SCH_MACHINE_CERT_HASH = 1;
export const SCH_CRED_DISABLE_RECONNECTS = 128;
export const SCH_CRED_RESTRICTED_ROOTS = 8192;
export const SCH_CRED_REVOCATION_CHECK_CACHE_ONLY = 16384;
export const SCH_CRED_CACHE_ONLY_URL_RETRIEVAL = 32768;
export const SCH_CRED_MEMORY_STORE_CERT = 65536;
export const SCH_CRED_SNI_CREDENTIAL = 524288;
export const SCH_CRED_SNI_ENABLE_OCSP = 1048576;
export const SCH_USE_DTLS_ONLY = 16777216;
export const SCH_ALLOW_NULL_ENCRYPTION = 33554432;
export const SCH_CRED_DEFERRED_CRED_VALIDATION = 67108864;
export const SCHANNEL_RENEGOTIATE = 0;
export const SCHANNEL_SHUTDOWN = 1;
export const SCHANNEL_ALERT = 2;
export const SCHANNEL_SESSION = 3;
export const TLS1_ALERT_CLOSE_NOTIFY = 0;
export const TLS1_ALERT_UNEXPECTED_MESSAGE = 10;
export const TLS1_ALERT_BAD_RECORD_MAC = 20;
export const TLS1_ALERT_DECRYPTION_FAILED = 21;
export const TLS1_ALERT_RECORD_OVERFLOW = 22;
export const TLS1_ALERT_DECOMPRESSION_FAIL = 30;
export const TLS1_ALERT_HANDSHAKE_FAILURE = 40;
export const TLS1_ALERT_BAD_CERTIFICATE = 42;
export const TLS1_ALERT_UNSUPPORTED_CERT = 43;
export const TLS1_ALERT_CERTIFICATE_REVOKED = 44;
export const TLS1_ALERT_CERTIFICATE_EXPIRED = 45;
export const TLS1_ALERT_CERTIFICATE_UNKNOWN = 46;
export const TLS1_ALERT_ILLEGAL_PARAMETER = 47;
export const TLS1_ALERT_UNKNOWN_CA = 48;
export const TLS1_ALERT_ACCESS_DENIED = 49;
export const TLS1_ALERT_DECODE_ERROR = 50;
export const TLS1_ALERT_DECRYPT_ERROR = 51;
export const TLS1_ALERT_EXPORT_RESTRICTION = 60;
export const TLS1_ALERT_PROTOCOL_VERSION = 70;
export const TLS1_ALERT_INSUFFIENT_SECURITY = 71;
export const TLS1_ALERT_INTERNAL_ERROR = 80;
export const TLS1_ALERT_USER_CANCELED = 90;
export const TLS1_ALERT_NO_RENEGOTIATION = 100;
export const TLS1_ALERT_UNSUPPORTED_EXT = 110;
export const TLS1_ALERT_UNKNOWN_PSK_IDENTITY = 115;
export const TLS1_ALERT_NO_APP_PROTOCOL = 120;
export const SP_PROT_PCT1_SERVER = 1;
export const SP_PROT_PCT1_CLIENT = 2;
export const SP_PROT_SSL2_SERVER = 4;
export const SP_PROT_SSL2_CLIENT = 8;
export const SP_PROT_SSL3_SERVER = 16;
export const SP_PROT_SSL3_CLIENT = 32;
export const SP_PROT_TLS1_SERVER = 64;
export const SP_PROT_TLS1_CLIENT = 128;
export const SP_PROT_UNI_SERVER = 1073741824;
export const SP_PROT_UNI_CLIENT = 2147483648;
export const SP_PROT_ALL = 4294967295;
export const SP_PROT_NONE = 0;
export const SP_PROT_TLS1_0_SERVER = 64;
export const SP_PROT_TLS1_0_CLIENT = 128;
export const SP_PROT_TLS1_1_SERVER = 256;
export const SP_PROT_TLS1_1_CLIENT = 512;
export const SP_PROT_TLS1_2_SERVER = 1024;
export const SP_PROT_TLS1_2_CLIENT = 2048;
export const SP_PROT_TLS1_3_SERVER = 4096;
export const SP_PROT_TLS1_3_CLIENT = 8192;
export const SP_PROT_DTLS_SERVER = 65536;
export const SP_PROT_DTLS_CLIENT = 131072;
export const SP_PROT_DTLS1_0_SERVER = 65536;
export const SP_PROT_DTLS1_0_CLIENT = 131072;
export const SP_PROT_DTLS1_2_SERVER = 262144;
export const SP_PROT_DTLS1_2_CLIENT = 524288;
export const SP_PROT_TLS1_3PLUS_SERVER = 4096;
export const SP_PROT_TLS1_3PLUS_CLIENT = 8192;
export const SCHANNEL_SECRET_TYPE_CAPI = 1;
export const SCHANNEL_SECRET_PRIVKEY = 2;
export const SCH_CRED_X509_CERTCHAIN = 1;
export const SCH_CRED_X509_CAPI = 2;
export const SCH_CRED_CERT_CONTEXT = 3;
export const SSL_CRACK_CERTIFICATE_NAME = `SslCrackCertificate`;
export const SSL_FREE_CERTIFICATE_NAME = `SslFreeCertificate`;
export const SL_INFO_KEY_CHANNEL = `Channel`;
export const SL_INFO_KEY_NAME = `Name`;
export const SL_INFO_KEY_AUTHOR = `Author`;
export const SL_INFO_KEY_DESCRIPTION = `Description`;
export const SL_INFO_KEY_LICENSOR_URL = `LicensorUrl`;
export const SL_INFO_KEY_DIGITAL_PID = `DigitalPID`;
export const SL_INFO_KEY_DIGITAL_PID2 = `DigitalPID2`;
export const SL_INFO_KEY_PARTIAL_PRODUCT_KEY = `PartialProductKey`;
export const SL_INFO_KEY_PRODUCT_SKU_ID = `ProductSkuId`;
export const SL_INFO_KEY_LICENSE_TYPE = `LicenseType`;
export const SL_INFO_KEY_VERSION = `Version`;
export const SL_INFO_KEY_SYSTEM_STATE = `SystemState`;
export const SL_INFO_KEY_ACTIVE_PLUGINS = `ActivePlugins`;
export const SL_INFO_KEY_SECURE_STORE_ID = `SecureStoreId`;
export const SL_INFO_KEY_BIOS_PKEY = `BiosProductKey`;
export const SL_INFO_KEY_BIOS_SLIC_STATE = `BiosSlicState`;
export const SL_INFO_KEY_BIOS_OA2_MINOR_VERSION = `BiosOA2MinorVersion`;
export const SL_INFO_KEY_BIOS_PKEY_DESCRIPTION = `BiosProductKeyDescription`;
export const SL_INFO_KEY_BIOS_PKEY_PKPN = `BiosProductKeyPkPn`;
export const SL_INFO_KEY_SECURE_PROCESSOR_ACTIVATION_URL = `SPCURL`;
export const SL_INFO_KEY_RIGHT_ACCOUNT_ACTIVATION_URL = `RACURL`;
export const SL_INFO_KEY_PRODUCT_KEY_ACTIVATION_URL = `PKCURL`;
export const SL_INFO_KEY_USE_LICENSE_ACTIVATION_URL = `EULURL`;
export const SL_INFO_KEY_IS_KMS = `IsKeyManagementService`;
export const SL_INFO_KEY_KMS_CURRENT_COUNT = `KeyManagementServiceCurrentCount`;
export const SL_INFO_KEY_KMS_REQUIRED_CLIENT_COUNT = `KeyManagementServiceRequiredClientCount`;
export const SL_INFO_KEY_KMS_UNLICENSED_REQUESTS = `KeyManagementServiceUnlicensedRequests`;
export const SL_INFO_KEY_KMS_LICENSED_REQUESTS = `KeyManagementServiceLicensedRequests`;
export const SL_INFO_KEY_KMS_OOB_GRACE_REQUESTS = `KeyManagementServiceOOBGraceRequests`;
export const SL_INFO_KEY_KMS_OOT_GRACE_REQUESTS = `KeyManagementServiceOOTGraceRequests`;
export const SL_INFO_KEY_KMS_NON_GENUINE_GRACE_REQUESTS = `KeyManagementServiceNonGenuineGraceRequests`;
export const SL_INFO_KEY_KMS_NOTIFICATION_REQUESTS = `KeyManagementServiceNotificationRequests`;
export const SL_INFO_KEY_KMS_TOTAL_REQUESTS = `KeyManagementServiceTotalRequests`;
export const SL_INFO_KEY_KMS_FAILED_REQUESTS = `KeyManagementServiceFailedRequests`;
export const SL_INFO_KEY_IS_PRS = `IsPRS`;
export const SL_PKEY_MS2005 = `msft:rm/algorithm/pkey/2005`;
export const SL_PKEY_MS2009 = `msft:rm/algorithm/pkey/2009`;
export const SL_PKEY_DETECT = `msft:rm/algorithm/pkey/detect`;
export const SL_EVENT_LICENSING_STATE_CHANGED = `msft:rm/event/licensingstatechanged`;
export const SL_EVENT_POLICY_CHANGED = `msft:rm/event/policychanged`;
export const SL_EVENT_USER_NOTIFICATION = `msft:rm/event/usernotification`;
export const SL_SYSTEM_STATE_REBOOT_POLICY_FOUND = 1;
export const SL_SYSTEM_STATE_TAMPERED = 2;
export const SL_REARM_REBOOT_REQUIRED = 1;
export const SPP_MIGRATION_GATHER_MIGRATABLE_APPS = 1;
export const SPP_MIGRATION_GATHER_ACTIVATED_WINDOWS_STATE = 2;
export const SPP_MIGRATION_GATHER_ALL = 4294967295;
export const SL_PROP_BRT_DATA = `SL_BRT_DATA`;
export const SL_PROP_BRT_COMMIT = `SL_BRT_COMMIT`;
export const SL_PROP_GENUINE_RESULT = `SL_GENUINE_RESULT`;
export const SL_PROP_NONGENUINE_GRACE_FLAG = `SL_NONGENUINE_GRACE_FLAG`;
export const SL_PROP_GET_GENUINE_AUTHZ = `SL_GET_GENUINE_AUTHZ`;
export const SL_PROP_GET_GENUINE_SERVER_AUTHZ = `SL_GET_GENUINE_SERVER_AUTHZ`;
export const SL_PROP_LAST_ACT_ATTEMPT_HRESULT = `SL_LAST_ACT_ATTEMPT_HRESULT`;
export const SL_PROP_LAST_ACT_ATTEMPT_TIME = `SL_LAST_ACT_ATTEMPT_TIME`;
export const SL_PROP_LAST_ACT_ATTEMPT_SERVER_FLAGS = `SL_LAST_ACT_ATTEMPT_SERVER_FLAGS`;
export const SL_PROP_ACTIVATION_VALIDATION_IN_PROGRESS = `SL_ACTIVATION_VALIDATION_IN_PROGRESS`;
export const SL_POLICY_EVALUATION_MODE_ENABLED = `Security-SPP-EvaluationModeEnabled`;
export const SL_DEFAULT_MIGRATION_ENCRYPTOR_URI = `msft:spp/migrationencryptor/tokenact/1.0`;
export const ID_CAP_SLAPI = `slapiQueryLicenseValue`;
export const USER_ACCOUNT_DISABLED = 1;
export const USER_HOME_DIRECTORY_REQUIRED = 2;
export const USER_PASSWORD_NOT_REQUIRED = 4;
export const USER_TEMP_DUPLICATE_ACCOUNT = 8;
export const USER_NORMAL_ACCOUNT = 16;
export const USER_MNS_LOGON_ACCOUNT = 32;
export const USER_INTERDOMAIN_TRUST_ACCOUNT = 64;
export const USER_WORKSTATION_TRUST_ACCOUNT = 128;
export const USER_SERVER_TRUST_ACCOUNT = 256;
export const USER_DONT_EXPIRE_PASSWORD = 512;
export const USER_ACCOUNT_AUTO_LOCKED = 1024;
export const USER_ENCRYPTED_TEXT_PASSWORD_ALLOWED = 2048;
export const USER_SMARTCARD_REQUIRED = 4096;
export const USER_TRUSTED_FOR_DELEGATION = 8192;
export const USER_NOT_DELEGATED = 16384;
export const USER_USE_DES_KEY_ONLY = 32768;
export const USER_DONT_REQUIRE_PREAUTH = 65536;
export const USER_PASSWORD_EXPIRED = 131072;
export const USER_TRUSTED_TO_AUTHENTICATE_FOR_DELEGATION = 262144;
export const USER_NO_AUTH_DATA_REQUIRED = 524288;
export const USER_PARTIAL_SECRETS_ACCOUNT = 1048576;
export const USER_USE_AES_KEYS = 2097152;
export const SAM_DAYS_PER_WEEK = 7;
export const USER_ALL_PARAMETERS = 2097152;
export const CLEAR_BLOCK_LENGTH = 8;
export const CYPHER_BLOCK_LENGTH = 8;
export const MSV1_0_VALIDATION_LOGOFF_TIME = 1;
export const MSV1_0_VALIDATION_KICKOFF_TIME = 2;
export const MSV1_0_VALIDATION_LOGON_SERVER = 4;
export const MSV1_0_VALIDATION_LOGON_DOMAIN = 8;
export const MSV1_0_VALIDATION_SESSION_KEY = 16;
export const MSV1_0_VALIDATION_USER_FLAGS = 32;
export const MSV1_0_VALIDATION_USER_ID = 64;
export const MSV1_0_SUBAUTH_ACCOUNT_DISABLED = 1;
export const MSV1_0_SUBAUTH_PASSWORD = 2;
export const MSV1_0_SUBAUTH_WORKSTATIONS = 4;
export const MSV1_0_SUBAUTH_LOGON_HOURS = 8;
export const MSV1_0_SUBAUTH_ACCOUNT_EXPIRY = 16;
export const MSV1_0_SUBAUTH_PASSWORD_EXPIRY = 32;
export const MSV1_0_SUBAUTH_ACCOUNT_TYPE = 64;
export const MSV1_0_SUBAUTH_LOCKOUT = 128;
export const SL_MDOLLAR_ZONE = 40960;
export const SL_SERVER_ZONE = 45056;
export const SL_MSCH_ZONE = 49152;
export const SL_INTERNAL_ZONE = 57344;
export const SL_CLIENTAPI_ZONE = 61440;
export const FACILITY_SL_ITF = 4;
export const _FACILITY_WINDOWS_STORE = 63;
export const SL_E_SRV_INVALID_PUBLISH_LICENSE = 337772191477444609n;
export const SL_E_SRV_INVALID_PRODUCT_KEY_LICENSE = 337773290989072386n;
export const SL_E_SRV_INVALID_RIGHTS_ACCOUNT_LICENSE = 337774390500700163n;
export const SL_E_SRV_INVALID_LICENSE_STRUCTURE = 337775490012327940n;
export const SL_E_SRV_AUTHORIZATION_FAILED = 337776589523955717n;
export const SL_E_SRV_INVALID_BINDING = 337777689035583494n;
export const SL_E_SRV_SERVER_PONG = 337778788547211271n;
export const SL_E_SRV_INVALID_PAYLOAD = 337779888058839048n;
export const SL_E_SRV_INVALID_SECURITY_PROCESSOR_LICENSE = 337787584640233481n;
export const SL_E_SRV_BUSINESS_TOKEN_ENTRY_NOT_FOUND = 337788684151861264n;
export const SL_E_SRV_CLIENT_CLOCK_OUT_OF_SYNC = 338051467430899729n;
export const SL_E_SRV_GENERAL_ERROR = 342274691593187584n;
export const SL_E_CHPA_PRODUCT_KEY_OUT_OF_RANGE = 342275791104819201n;
export const SL_E_CHPA_INVALID_BINDING = 342276890616446978n;
export const SL_E_CHPA_PRODUCT_KEY_BLOCKED = 342277990128074755n;
export const SL_E_CHPA_INVALID_PRODUCT_KEY = 342279089639702532n;
export const SL_E_CHPA_BINDING_NOT_FOUND = 342280189151330309n;
export const SL_E_CHPA_BINDING_MAPPING_NOT_FOUND = 342281288662958086n;
export const SL_E_CHPA_UNSUPPORTED_PRODUCT_KEY = 342282388174585863n;
export const SL_E_CHPA_MAXIMUM_UNLOCK_EXCEEDED = 342283487686213640n;
export const SL_E_CHPA_ACTCONFIG_ID_NOT_FOUND = 342284587197841417n;
export const SL_E_CHPA_INVALID_PRODUCT_DATA_ID = 342285686709469194n;
export const SL_E_CHPA_INVALID_PRODUCT_DATA = 342286786221096971n;
export const SL_E_CHPA_SYSTEM_ERROR = 342287885732724748n;
export const SL_E_CHPA_INVALID_ACTCONFIG_ID = 342288985244352525n;
export const SL_E_CHPA_INVALID_PRODUCT_KEY_LENGTH = 342290084755980302n;
export const SL_E_CHPA_INVALID_PRODUCT_KEY_FORMAT = 342291184267608079n;
export const SL_E_CHPA_INVALID_PRODUCT_KEY_CHAR = 342292283779235856n;
export const SL_E_CHPA_INVALID_BINDING_URI = 342293383290863633n;
export const SL_E_CHPA_NETWORK_ERROR = 342294482802491410n;
export const SL_E_CHPA_DATABASE_ERROR = 342295582314119187n;
export const SL_E_CHPA_INVALID_ARGUMENT = 342308776453652500n;
export const SL_E_CHPA_DMAK_LIMIT_EXCEEDED = 342309875965280288n;
export const SL_E_CHPA_DMAK_EXTENSION_LIMIT_EXCEEDED = 342310975476908065n;
export const SL_E_CHPA_REISSUANCE_LIMIT_NOT_FOUND = 342312074988535842n;
export const SL_E_CHPA_OVERRIDE_REQUEST_NOT_FOUND = 342297781337374755n;
export const SL_E_CHPA_OEM_SLP_COA0 = 342298880849002518n;
export const SL_E_CHPA_PRODUCT_KEY_BLOCKED_IPLOCATION = 342296681825746967n;
export const SL_E_CHPA_RESPONSE_NOT_AVAILABLE = 342361553011785749n;
export const SL_E_CHPA_GENERAL_ERROR = 342326368639696976n;
export const SL_E_CHPA_TIMEBASED_ACTIVATION_BEFORE_START_DATE = 342327468151324720n;
export const SL_E_CHPA_TIMEBASED_ACTIVATION_AFTER_END_DATE = 342328567662952497n;
export const SL_E_CHPA_TIMEBASED_ACTIVATION_NOT_AVAILABLE = 342329667174580274n;
export const SL_E_CHPA_TIMEBASED_PRODUCT_KEY_NOT_CONFIGURED = 342360453500158003n;
export const SL_E_CHPA_NO_RULES_TO_ACTIVATE = 342362652523413583n;
export const SL_E_CHPA_DIGITALMARKER_INVALID_BINDING = 342363752035041361n;
export const SL_E_CHPA_DIGITALMARKER_BINDING_NOT_CONFIGURED = 342379145197830226n;
export const SL_E_CHPA_DYNAMICALLY_BLOCKED_PRODUCT_KEY = 343398392476778592n;
export const SL_E_CHPA_MSCH_RESPONSE_NOT_AVAILABLE_VGA = 344243916918539263n;
export const SL_E_CHPA_BUSINESS_RULE_INPUT_NOT_FOUND = 344331877848762112n;
export const SL_E_CHPA_NULL_VALUE_FOR_PROPERTY_NAME_OR_ID = 344332977360389968n;
export const SL_E_CHPA_UNKNOWN_PROPERTY_NAME = 344334076872017745n;
export const SL_E_CHPA_UNKNOWN_PROPERTY_ID = 344337375406901074n;
export const SL_E_CHPA_FAILED_TO_UPDATE_PRODUCTKEY_BINDING = 344338474918528853n;
export const SL_E_CHPA_FAILED_TO_INSERT_PRODUCTKEY_BINDING = 344339574430156630n;
export const SL_E_CHPA_FAILED_TO_DELETE_PRODUCTKEY_BINDING = 344340673941784407n;
export const SL_E_CHPA_FAILED_TO_PROCESS_PRODUCT_KEY_BINDINGS_XML = 344342872965039960n;
export const SL_E_CHPA_FAILED_TO_INSERT_PRODUCT_KEY_PROPERTY = 344343972476667738n;
export const SL_E_CHPA_FAILED_TO_UPDATE_PRODUCT_KEY_PROPERTY = 344345071988295515n;
export const SL_E_CHPA_FAILED_TO_DELETE_PRODUCT_KEY_PROPERTY = 344353868081317724n;
export const SL_E_CHPA_UNKNOWN_PRODUCT_KEY_TYPE = 344367062220851044n;
export const SL_E_CHPA_PRODUCT_KEY_BEING_USED = 344384654406895472n;
export const SL_E_CHPA_FAILED_TO_INSERT_PRODUCT_KEY_RECORD = 344385753918523264n;
export const SL_E_CHPA_FAILED_TO_UPDATE_PRODUCT_KEY_RECORD = 342995971221014401n;
export const SL_E_INVALID_LICENSE_STATE_BREACH_GRACE = 342997070732640913n;
export const SL_E_INVALID_LICENSE_STATE_BREACH_GRACE_EXPIRED = 343107021895418514n;
export const SL_E_INVALID_TEMPLATE_ID = 343111419941929718n;
export const SL_E_INVALID_XML_BLOB = 343160897965179642n;
export const SL_E_VALIDATION_BLOB_PARAM_NOT_FOUND = 343161997476807463n;
export const SL_E_INVALID_CLIENT_TOKEN = 343163096988435240n;
export const SL_E_INVALID_OFFLINE_BLOB = 343164196500063017n;
export const SL_E_OFFLINE_VALIDATION_BLOB_PARAM_NOT_FOUND = 343165296011690794n;
export const SL_E_INVALID_OSVERSION_TEMPLATEID = 343166395523318571n;
export const SL_E_OFFLINE_GENUINE_BLOB_REVOKED = 343167495034946348n;
export const SL_E_OFFLINE_GENUINE_BLOB_NOT_FOUND = 343400591500034861n;
export const SL_E_INVALID_OS_FOR_PRODUCT_KEY = 343576513360479233n;
export const SL_E_INVALID_FILE_HASH = 343577612872107169n;
export const SL_E_VALIDATION_BLOCKED_PRODUCT_KEY = 343579811895362722n;
export const SL_E_MISMATCHED_KEY_TYPES = 343580911406990500n;
export const SL_E_VALIDATION_INVALID_PRODUCT_KEY = 343583110430246053n;
export const SL_E_INVALID_OEM_OR_VOLUME_BINDING_DATA = 343584209941873831n;
export const SL_E_INVALID_LICENSE_STATE = 343585309453501608n;
export const SL_E_IP_LOCATION_FALIED = 343587508476757161n;
export const SL_E_SOFTMOD_EXPLOIT_DETECTED = 343588607988384939n;
export const SL_E_INVALID_TOKEN_DATA = 343589707500012716n;
export const SL_E_HEALTH_CHECK_FAILED_NEUTRAL_FILES = 343590807011640493n;
export const SL_E_HEALTH_CHECK_FAILED_MUI_FILES = 343591906523268270n;
export const SL_E_INVALID_AD_DATA = 343593006034896047n;
export const SL_E_INVALID_RSDP_COUNT = 343594105546523824n;
export const SL_E_ENGINE_DETECTED_EXPLOIT = 343962441941828785n;
export const SL_E_NON_GENUINE_STATUS_LAST = 343734843034879488n;
export const SL_E_NOTIFICATION_BREACH_DETECTED = 343735942546507057n;
export const SL_E_NOTIFICATION_GRACE_EXPIRED = 343737042058134834n;
export const SL_E_NOTIFICATION_OTHER_REASONS = 351281890847933747n;
export const SL_E_INVALID_CONTEXT = 351282990359568385n;
export const SL_E_TOKEN_STORE_INVALID_STATE = 351284089871196162n;
export const SL_E_EVALUATION_FAILED = 351285189382823939n;
export const SL_E_NOT_EVALUATED = 351286288894451716n;
export const SL_E_NOT_ACTIVATED = 351287388406079493n;
export const SL_E_INVALID_GUID = 351288487917707270n;
export const SL_E_TOKSTO_TOKEN_NOT_FOUND = 351289587429335047n;
export const SL_E_TOKSTO_NO_PROPERTIES = 351290686940962824n;
export const SL_E_TOKSTO_NOT_INITIALIZED = 351291786452590601n;
export const SL_E_TOKSTO_ALREADY_INITIALIZED = 351292885964218378n;
export const SL_E_TOKSTO_NO_ID_SET = 351293985475846155n;
export const SL_E_TOKSTO_CANT_CREATE_FILE = 351295084987473932n;
export const SL_E_TOKSTO_CANT_WRITE_TO_FILE = 351296184499101709n;
export const SL_E_TOKSTO_CANT_READ_FILE = 351297284010729486n;
export const SL_E_TOKSTO_CANT_PARSE_PROPERTIES = 351298383522357263n;
export const SL_E_TOKSTO_PROPERTY_NOT_FOUND = 351299483033985040n;
export const SL_E_TOKSTO_INVALID_FILE = 351300582545612817n;
export const SL_E_TOKSTO_CANT_CREATE_MUTEX = 351301682057240594n;
export const SL_E_TOKSTO_CANT_ACQUIRE_MUTEX = 351302781568868371n;
export const SL_E_TOKSTO_NO_TOKEN_DATA = 351303881080496148n;
export const SL_E_EUL_CONSUMPTION_FAILED = 351304980592123925n;
export const SL_E_PKEY_INVALID_CONFIG = 351306080103751702n;
export const SL_E_PKEY_INVALID_UNIQUEID = 351307179615379479n;
export const SL_E_PKEY_INVALID_ALGORITHM = 351308279127007256n;
export const SL_E_PKEY_INTERNAL_ERROR = 351309378638635033n;
export const SL_E_LICENSE_INVALID_ADDON_INFO = 351310478150262810n;
export const SL_E_HWID_ERROR = 351311577661890587n;
export const SL_E_PKEY_INVALID_KEYCHANGE1 = 351312677173518364n;
export const SL_E_PKEY_INVALID_KEYCHANGE2 = 351313776685146141n;
export const SL_E_PKEY_INVALID_KEYCHANGE3 = 351315975708401694n;
export const SL_E_POLICY_OTHERINFO_MISMATCH = 351317075220029472n;
export const SL_E_PRODUCT_UNIQUENESS_GROUP_ID_INVALID = 351318174731657249n;
export const SL_E_SECURE_STORE_ID_MISMATCH = 351319274243285026n;
export const SL_E_INVALID_RULESET_RULE = 351320373754912803n;
export const SL_E_INVALID_CONTEXT_DATA = 351321473266540580n;
export const SL_E_INVALID_HASH = 351323672289796133n;
export const SL_E_INVALID_USE_OF_ADD_ON_PKEY = 351323671216054310n;
export const SL_E_WINDOWS_VERSION_MISMATCH = 351324771801423911n;
export const SL_E_ACTIVATION_IN_PROGRESS = 351325871313051688n;
export const SL_E_STORE_UPGRADE_TOKEN_REQUIRED = 351326970824679465n;
export const SL_E_STORE_UPGRADE_TOKEN_WRONG_EDITION = 351328070336307242n;
export const SL_E_STORE_UPGRADE_TOKEN_WRONG_PID = 351329169847935019n;
export const SL_E_STORE_UPGRADE_TOKEN_NOT_PRS_SIGNED = 351330269359562796n;
export const SL_E_STORE_UPGRADE_TOKEN_WRONG_VERSION = 351331368871190573n;
export const SL_E_STORE_UPGRADE_TOKEN_NOT_AUTHORIZED = 351563365824651310n;
export const SL_E_SFS_INVALID_FS_VERSION = 351564464262537473n;
export const SL_E_SFS_INVALID_FD_TABLE = 351565563774165250n;
export const SL_E_SFS_INVALID_SYNC = 351566663285793027n;
export const SL_E_SFS_BAD_TOKEN_NAME = 351567762797420804n;
export const SL_E_SFS_BAD_TOKEN_EXT = 351568862309048581n;
export const SL_E_SFS_DUPLICATE_TOKEN_NAME = 351569961820676358n;
export const SL_E_SFS_TOKEN_SIZE_MISMATCH = 351571061332304135n;
export const SL_E_SFS_INVALID_TOKEN_DATA_HASH = 351572160843931912n;
export const SL_E_SFS_FILE_READ_ERROR = 351573260355559689n;
export const SL_E_SFS_FILE_WRITE_ERROR = 351574359867187466n;
export const SL_E_SFS_INVALID_FILE_POSITION = 351575459378815243n;
export const SL_E_SFS_NO_ACTIVE_TRANSACTION = 351576558890443020n;
export const SL_E_SFS_INVALID_FS_HEADER = 351577658402070797n;
export const SL_E_SFS_INVALID_TOKEN_DESCRIPTOR = 355787688424825102n;
export const SL_E_INTERNAL_ERROR = 355786589986942977n;
export const SL_E_RIGHT_NOT_CONSUMED = 355788789010198530n;
export const SL_E_USE_LICENSE_NOT_INSTALLED = 355792087545081859n;
export const SL_E_MISMATCHED_PKEY_RANGE = 355789888521826308n;
export const SL_E_MISMATCHED_PID = 355790988033454085n;
export const SL_E_EXTERNAL_SIGNATURE_NOT_FOUND = 355793187056709638n;
export const SL_E_RAC_NOT_AVAILABLE = 355794286568337415n;
export const SL_E_SPC_NOT_AVAILABLE = 10520409918170001416n;
export const SL_E_GRACE_TIME_EXPIRED = 355795386079965193n;
export const SL_E_MISMATCHED_APPID = 355796485591592970n;
export const SL_E_NO_PID_CONFIG_DATA = 355797585103220747n;
export const SL_I_OOB_GRACE_PERIOD = 355798682467364876n;
export const SL_I_OOT_GRACE_PERIOD = 355799781978992653n;
export const SL_E_MISMATCHED_SECURITY_PROCESSOR = 355800883638104078n;
export const SL_E_OUT_OF_TOLERANCE = 355801983149731855n;
export const SL_E_INVALID_PKEY = 355803082661359632n;
export const SL_E_LICENSE_FILE_NOT_INSTALLED = 355804182172987409n;
export const SL_E_VALUE_NOT_FOUND = 355805281684615186n;
export const SL_E_RIGHT_NOT_GRANTED = 355806381196242963n;
export const SL_E_PKEY_NOT_INSTALLED = 355807480707870740n;
export const SL_E_PRODUCT_SKU_NOT_INSTALLED = 355808580219498517n;
export const SL_E_NOT_SUPPORTED = 355809679731126294n;
export const SL_E_PUBLISHING_LICENSE_NOT_INSTALLED = 355810779242754071n;
export const SL_E_LICENSE_SERVER_URL_NOT_FOUND = 355811878754381848n;
export const SL_E_INVALID_EVENT_ID = 355812978266009625n;
export const SL_E_EVENT_NOT_REGISTERED = 355814077777637402n;
export const SL_E_EVENT_ALREADY_REGISTERED = 355815177289265179n;
export const SL_E_DECRYPTION_LICENSES_NOT_AVAILABLE = 355816276800892956n;
export const SL_E_LICENSE_SIGNATURE_VERIFICATION_FAILED = 355817376312520733n;
export const SL_E_DATATYPE_MISMATCHED = 355818475824148510n;
export const SL_E_INVALID_LICENSE = 355819575335776287n;
export const SL_E_INVALID_PACKAGE = 355820674847404064n;
export const SL_E_VALIDITY_TIME_EXPIRED = 355821774359031841n;
export const SL_E_LICENSE_AUTHORIZATION_FAILED = 355822873870659618n;
export const SL_E_LICENSE_DECRYPTION_FAILED = 355823973382287395n;
export const SL_E_WINDOWS_INVALID_LICENSE_STATE = 355825072893915172n;
export const SL_E_LUA_ACCESSDENIED = 355826172405542949n;
export const SL_E_PROXY_KEY_NOT_FOUND = 355827271917170726n;
export const SL_E_TAMPER_DETECTED = 355828371428798503n;
export const SL_E_POLICY_CACHE_INVALID = 355829470940426280n;
export const SL_E_INVALID_RUNNING_MODE = 355830570452054057n;
export const SL_E_SLP_NOT_SIGNED = 355832769475309610n;
export const SL_E_CIDIID_INVALID_DATA = 355833868986937388n;
export const SL_E_CIDIID_INVALID_VERSION = 355834968498565165n;
export const SL_E_CIDIID_VERSION_NOT_SUPPORTED = 355836068010192942n;
export const SL_E_CIDIID_INVALID_DATA_LENGTH = 355837167521820719n;
export const SL_E_CIDIID_NOT_DEPOSITED = 355838267033448496n;
export const SL_E_CIDIID_MISMATCHED = 355839366545076273n;
export const SL_E_INVALID_BINDING_BLOB = 355840466056704050n;
export const SL_E_PRODUCT_KEY_INSTALLATION_NOT_ALLOWED = 355841565568331827n;
export const SL_E_EUL_NOT_AVAILABLE = 355842665079959604n;
export const SL_E_VL_NOT_WINDOWS_SLP = 355845963614842933n;
export const SL_E_VL_NOT_ENOUGH_COUNT = 355847063126470712n;
export const SL_E_VL_BINDING_SERVICE_NOT_ENABLED = 355854759707865145n;
export const SL_E_VL_INFO_PRODUCT_USER_RIGHT = 355855857072009280n;
export const SL_E_VL_KEY_MANAGEMENT_SERVICE_NOT_ACTIVATED = 355856958731120705n;
export const SL_E_VL_KEY_MANAGEMENT_SERVICE_ID_MISMATCH = 355862456289259586n;
export const SL_E_PROXY_POLICY_NOT_UPDATED = 355869053359026247n;
export const SL_E_CIDIID_INVALID_CHECK_DIGITS = 355871252382281805n;
export const SL_E_LICENSE_MANAGEMENT_DATA_NOT_FOUND = 355872351893909583n;
export const SL_E_INVALID_PRODUCT_KEY = 355873451405537360n;
export const SL_E_BLOCKED_PRODUCT_KEY = 355874550917165137n;
export const SL_E_DUPLICATE_POLICY = 355875650428792914n;
export const SL_E_MISSING_OVERRIDE_ONLY_ATTRIBUTE = 355876749940420691n;
export const SL_E_LICENSE_MANAGEMENT_DATA_DUPLICATED = 355877849452048468n;
export const SL_E_BASE_SKU_NOT_AVAILABLE = 355878948963676245n;
export const SL_E_VL_MACHINE_NOT_BOUND = 355880048475304022n;
export const SL_E_SLP_MISSING_ACPI_SLIC = 355881147986931799n;
export const SL_E_SLP_MISSING_SLP_MARKER = 355882247498559576n;
export const SL_E_SLP_BAD_FORMAT = 355889944079954009n;
export const SL_E_INVALID_PACKAGE_VERSION = 355891043591581792n;
export const SL_E_PKEY_INVALID_UPGRADE = 355892143103209569n;
export const SL_E_ISSUANCE_LICENSE_NOT_INSTALLED = 355893242614837346n;
export const SL_E_SLP_OEM_CERT_MISSING = 355894342126465123n;
export const SL_E_NONGENUINE_GRACE_TIME_EXPIRED = 355895441638092900n;
export const SL_I_NONGENUINE_GRACE_PERIOD = 355896539002237029n;
export const SL_E_DEPENDENT_PROPERTY_NOT_SET = 355897640661348454n;
export const SL_E_NONGENUINE_GRACE_TIME_EXPIRED_2 = 355898740172976231n;
export const SL_I_NONGENUINE_GRACE_PERIOD_2 = 355899837537120360n;
export const SL_E_MISMATCHED_PRODUCT_SKU = 355900939196231785n;
export const SL_E_OPERATION_NOT_ALLOWED = 355902038707859562n;
export const SL_E_VL_KEY_MANAGEMENT_SERVICE_VM_NOT_SUPPORTED = 355903138219487339n;
export const SL_E_VL_INVALID_TIMESTAMP = 355908635777626220n;
export const SL_E_PLUGIN_INVALID_MANIFEST = 355909735289254001n;
export const SL_E_APPLICATION_POLICIES_MISSING = 355910834800881778n;
export const SL_E_APPLICATION_POLICIES_NOT_LOADED = 355911934312509555n;
export const SL_E_VL_BINDING_SERVICE_UNAVAILABLE = 355913033824137332n;
export const SL_E_SERVICE_STOPPING = 355914133335765109n;
export const SL_E_PLUGIN_NOT_REGISTERED = 355915232847392886n;
export const SL_E_AUTHN_WRONG_VERSION = 355916332359020663n;
export const SL_E_AUTHN_MISMATCHED_KEY = 355917431870648440n;
export const SL_E_AUTHN_CHALLENGE_NOT_SET = 355918531382276217n;
export const SL_E_AUTHN_CANT_VERIFY = 355919630893903994n;
export const SL_E_SERVICE_RUNNING = 355920730405531771n;
export const SL_E_SLP_INVALID_MARKER_VERSION = 355921829917159548n;
export const SL_E_INVALID_PRODUCT_KEY_TYPE = 355922929428787325n;
export const SL_E_CIDIID_MISMATCHED_PKEY = 355924028940415102n;
export const SL_E_CIDIID_NOT_BOUND = 355925128452042879n;
export const SL_E_LICENSE_NOT_BOUND = 355926227963670656n;
export const SL_E_VL_AD_AO_NOT_FOUND = 355927327475298433n;
export const SL_E_VL_AD_AO_NAME_TOO_LONG = 355928426986926210n;
export const SL_E_VL_AD_SCHEMA_VERSION_NOT_SUPPORTED = 356347340917108867n;
export const SL_E_NOT_GENUINE = 356364933103153664n;
export const SL_E_EDITION_MISMATCHED = 356366032614781456n;
export const SL_E_HWID_CHANGED = 356367132126409233n;
export const SL_E_OEM_KEY_EDITION_MISMATCH = 356368231638037010n;
export const SL_E_NO_PRODUCT_KEY_FOUND = 356369331149664787n;
export const SL_E_DOWNLEVEL_SETUP_KEY = 356370430661292564n;
export const SL_E_BIOS_KEY = 356629915405447701n;
export const SL_E_TKA_CHALLENGE_EXPIRED = 356631014917075713n;
export const SL_E_TKA_SILENT_ACTIVATION_FAILURE = 356632114428703490n;
export const SL_E_TKA_INVALID_CERT_CHAIN = 356633213940331267n;
export const SL_E_TKA_GRANT_NOT_FOUND = 356634313451959044n;
export const SL_E_TKA_CERT_NOT_FOUND = 356635412963586821n;
export const SL_E_TKA_INVALID_SKU_ID = 356636512475214598n;
export const SL_E_TKA_INVALID_BLOB = 356637611986842375n;
export const SL_E_TKA_TAMPERED_CERT_CHAIN = 356638711498470152n;
export const SL_E_TKA_CHALLENGE_MISMATCH = 356639811010097929n;
export const SL_E_TKA_INVALID_CERTIFICATE = 356640910521725706n;
export const SL_E_TKA_INVALID_SMARTCARD = 356642010033353483n;
export const SL_E_TKA_FAILED_GRANT_PARSING = 356643109544981260n;
export const SL_E_TKA_INVALID_THUMBPRINT = 356644209056609037n;
export const SL_E_TKA_THUMBPRINT_CERT_NOT_FOUND = 356645308568236814n;
export const SL_E_TKA_CRITERIA_MISMATCH = 356646408079864591n;
export const SL_E_TKA_TPID_MISMATCH = 356647507591492368n;
export const SL_E_TKA_SOFT_CERT_DISALLOWED = 356648607103120145n;
export const SL_E_TKA_SOFT_CERT_INVALID = 356649706614747922n;
export const SL_E_TKA_CERT_CNG_NOT_AVAILABLE = 356911390382158611n;
export const SL_I_STORE_BASED_ACTIVATION = 359165387071616001n;
export const E_RM_UNKNOWN_ERROR = 359166488730729475n;
export const SL_I_TIMEBASED_VALIDITY_PERIOD = 359167586094873604n;
export const SL_I_PERPETUAL_OOB_GRACE_PERIOD = 359168685606501381n;
export const SL_I_TIMEBASED_EXTENDED_GRACE_PERIOD = 359169785118129158n;
export const SL_E_VALIDITY_PERIOD_EXPIRED = 359443565660929031n;
export const SL_E_IA_THROTTLE_LIMIT_EXCEEDED = 359444665172557056n;
export const SL_E_IA_INVALID_VIRTUALIZATION_PLATFORM = 359445764684184833n;
export const SL_E_IA_PARENT_PARTITION_NOT_ACTIVATED = 359446864195812610n;
export const SL_E_IA_ID_MISMATCH = 359447963707440387n;
export const SL_E_IA_MACHINE_NOT_BOUND = 359725040637639940n;
export const SL_E_TAMPER_RECOVERY_REQUIRES_ACTIVATION = 347059766197288448n;
export const SL_REMAPPING_SP_PUB_GENERAL_NOT_INITIALIZED = 347060865708904705n;
export const SL_REMAPPING_SP_STATUS_SYSTEM_TIME_SKEWED = 347061964146790658n;
export const SL_REMAPPING_SP_STATUS_GENERIC_FAILURE = 347063064732160259n;
export const SL_REMAPPING_SP_STATUS_INVALIDARG = 347064164243788036n;
export const SL_REMAPPING_SP_STATUS_ALREADY_EXISTS = 347066363267043589n;
export const SL_REMAPPING_SP_STATUS_INSUFFICIENT_BUFFER = 347067462778671367n;
export const SL_REMAPPING_SP_STATUS_INVALIDDATA = 347068562290299144n;
export const SL_REMAPPING_SP_STATUS_INVALID_SPAPI_CALL = 347069661801926921n;
export const SL_REMAPPING_SP_STATUS_INVALID_SPAPI_VERSION = 347070761313554698n;
export const SL_REMAPPING_SP_STATUS_DEBUGGER_DETECTED = 347071859751440651n;
export const SL_REMAPPING_SP_STATUS_NO_MORE_DATA = 347341241173987596n;
export const SL_REMAPPING_SP_PUB_CRYPTO_INVALID_KEYLENGTH = 347342340685615617n;
export const SL_REMAPPING_SP_PUB_CRYPTO_INVALID_BLOCKLENGTH = 347343440197243394n;
export const SL_REMAPPING_SP_PUB_CRYPTO_INVALID_CIPHER = 347344539708871171n;
export const SL_REMAPPING_SP_PUB_CRYPTO_INVALID_CIPHERMODE = 347345639220498948n;
export const SL_REMAPPING_SP_PUB_CRYPTO_UNKNOWN_PROVIDERID = 347346738732126725n;
export const SL_REMAPPING_SP_PUB_CRYPTO_UNKNOWN_KEYID = 347347838243754502n;
export const SL_REMAPPING_SP_PUB_CRYPTO_UNKNOWN_HASHID = 347348937755382279n;
export const SL_REMAPPING_SP_PUB_CRYPTO_UNKNOWN_ATTRIBUTEID = 347350037267010056n;
export const SL_REMAPPING_SP_PUB_CRYPTO_HASH_FINALIZED = 347351136778637833n;
export const SL_REMAPPING_SP_PUB_CRYPTO_KEY_NOT_AVAILABLE = 347352236290265610n;
export const SL_REMAPPING_SP_PUB_CRYPTO_KEY_NOT_FOUND = 347353335801893387n;
export const SL_REMAPPING_SP_PUB_CRYPTO_NOT_BLOCK_ALIGNED = 347354435313521164n;
export const SL_REMAPPING_SP_PUB_CRYPTO_INVALID_SIGNATURELENGTH = 347355534825148941n;
export const SL_REMAPPING_SP_PUB_CRYPTO_INVALID_SIGNATURE = 347356634336776718n;
export const SL_REMAPPING_SP_PUB_CRYPTO_INVALID_BLOCK = 347357733848404495n;
export const SL_REMAPPING_SP_PUB_CRYPTO_INVALID_FORMAT = 347358833360032272n;
export const SL_REMAPPING_SP_PUB_CRYPTO_INVALID_PADDING = 347622716150698513n;
export const SL_REMAPPING_SP_PUB_TS_TAMPERED = 347623815662326529n;
export const SL_REMAPPING_SP_PUB_TS_REARMED = 347624915173954306n;
export const SL_REMAPPING_SP_PUB_TS_RECREATED = 347626014685582083n;
export const SL_REMAPPING_SP_PUB_TS_ENTRY_KEY_NOT_FOUND = 347627114197209860n;
export const SL_REMAPPING_SP_PUB_TS_ENTRY_KEY_ALREADY_EXISTS = 347628213708837637n;
export const SL_REMAPPING_SP_PUB_TS_ENTRY_KEY_SIZE_TOO_BIG = 347629313220465414n;
export const SL_REMAPPING_SP_PUB_TS_MAX_REARM_REACHED = 347630412732093191n;
export const SL_REMAPPING_SP_PUB_TS_DATA_SIZE_TOO_BIG = 347631512243720968n;
export const SL_REMAPPING_SP_PUB_TS_INVALID_HW_BINDING = 347632611755348745n;
export const SL_REMAPPING_SP_PUB_TIMER_ALREADY_EXISTS = 347633711266976522n;
export const SL_REMAPPING_SP_PUB_TIMER_NOT_FOUND = 347634810778604299n;
export const SL_REMAPPING_SP_PUB_TIMER_EXPIRED = 347635910290232076n;
export const SL_REMAPPING_SP_PUB_TIMER_NAME_SIZE_TOO_BIG = 347637009801859853n;
export const SL_REMAPPING_SP_PUB_TS_FULL = 347638109313487630n;
export const SL_REMAPPING_SP_PUB_TRUSTED_TIME_OK = 347639206677631759n;
export const SL_REMAPPING_SP_PUB_TS_ENTRY_READ_ONLY = 347640308336743184n;
export const SL_REMAPPING_SP_PUB_TIMER_READ_ONLY = 347641407848370961n;
export const SL_REMAPPING_SP_PUB_TS_ATTRIBUTE_READ_ONLY = 347642507359998738n;
export const SL_REMAPPING_SP_PUB_TS_ATTRIBUTE_NOT_FOUND = 347643606871626515n;
export const SL_REMAPPING_SP_PUB_TS_ACCESS_DENIED = 347644706383254292n;
export const SL_REMAPPING_SP_PUB_TS_NAMESPACE_NOT_FOUND = 347645805894882069n;
export const SL_REMAPPING_SP_PUB_TS_NAMESPACE_IN_USE = 347646905406509846n;
export const SL_REMAPPING_SP_PUB_TS_TAMPERED_BREADCRUMB_LOAD_INVALID = 347648004918137623n;
export const SL_REMAPPING_SP_PUB_TS_TAMPERED_BREADCRUMB_GENERATION = 347649104429765400n;
export const SL_REMAPPING_SP_PUB_TS_TAMPERED_INVALID_DATA = 347650203941393177n;
export const SL_REMAPPING_SP_PUB_TS_TAMPERED_NO_DATA = 347651303453020954n;
export const SL_REMAPPING_SP_PUB_TS_TAMPERED_DATA_BREADCRUMB_MISMATCH = 347652402964648731n;
export const SL_REMAPPING_SP_PUB_TS_TAMPERED_DATA_VERSION_MISMATCH = 347904191127409436n;
export const SL_REMAPPING_SP_PUB_TAMPER_MODULE_AUTHENTICATION = 347905290639037441n;
export const SL_REMAPPING_SP_PUB_TAMPER_SECURITY_PROCESSOR_PATCHED = 348185666104120322n;
export const SL_REMAPPING_SP_PUB_KM_CACHE_TAMPER = 348186765615748353n;
export const SL_REMAPPING_SP_PUB_KM_CACHE_TAMPER_RESTORE_FAILED = 348467141080831234n;
export const SL_REMAPPING_SP_PUB_KM_CACHE_IDENTICAL = 348468238444975617n;
export const SL_REMAPPING_SP_PUB_KM_CACHE_POLICY_CHANGED = 348748613910058498n;
export const SL_REMAPPING_SP_STATUS_PUSHKEY_CONFLICT = 348749715569170177n;
export const SL_REMAPPING_SP_PUB_PROXY_SOFT_TAMPER = 346777191708940034n;
export const SL_REMAPPING_SP_PUB_API_INVALID_LICENSE = 346787087313588224n;
export const SL_REMAPPING_SP_PUB_API_INVALID_ALGORITHM_TYPE = 346790385848471561n;
export const SL_REMAPPING_SP_PUB_API_TOO_MANY_LOADED_ENVIRONMENTS = 346796982918238220n;
export const SL_REMAPPING_SP_PUB_API_BAD_GET_INFO_QUERY = 346825570220560402n;
export const SL_REMAPPING_SP_PUB_API_INVALID_HANDLE = 346870650197299244n;
export const SL_REMAPPING_SP_PUB_API_INVALID_KEY_LENGTH = 346903635546132565n;
export const SL_REMAPPING_SP_PUB_API_NO_AES_PROVIDER = 346919028708921459n;
export const SL_REMAPPING_SP_PUB_API_HANDLE_NOT_COMMITED = 4584775491738980481n;
export const SL_REMAPPING_MDOLLAR_PRODUCT_KEY_OUT_OF_RANGE = 4584776590180720741n;
export const SL_REMAPPING_MDOLLAR_INVALID_BINDING = 4584777689692348518n;
export const SL_REMAPPING_MDOLLAR_PRODUCT_KEY_BLOCKED = 4584778789203976295n;
export const SL_REMAPPING_MDOLLAR_INVALID_PRODUCT_KEY = 4584783187250487400n;
export const SL_REMAPPING_MDOLLAR_UNSUPPORTED_PRODUCT_KEY = 4584788684808626284n;
export const SL_REMAPPING_MDOLLAR_MAXIMUM_UNLOCK_EXCEEDED = 4584790883831881841n;
export const SL_REMAPPING_MDOLLAR_INVALID_PRODUCT_DATA_ID = 4584791983343509619n;
export const SL_REMAPPING_MDOLLAR_INVALID_PRODUCT_DATA = 4584794182366765172n;
export const SL_REMAPPING_MDOLLAR_INVALID_ACTCONFIG_ID = 4584795281878392950n;
export const SL_REMAPPING_MDOLLAR_INVALID_PRODUCT_KEY_LENGTH = 4584796381390020727n;
export const SL_REMAPPING_MDOLLAR_INVALID_PRODUCT_KEY_FORMAT = 4584798580413276280n;
export const SL_REMAPPING_MDOLLAR_INVALID_BINDING_URI = 4584801878948159610n;
export const SL_REMAPPING_MDOLLAR_INVALID_ARGUMENT = 4584804077971415165n;
export const SL_REMAPPING_MDOLLAR_DMAK_LIMIT_EXCEEDED = 4584805177483042943n;
export const SL_REMAPPING_MDOLLAR_DMAK_EXTENSION_LIMIT_EXCEEDED = 4584808476017926272n;
export const SL_REMAPPING_MDOLLAR_OEM_SLP_COA0 = 4584819471134204035n;
export const SL_REMAPPING_MDOLLAR_CIDIID_INVALID_VERSION = 4584820570645831821n;
export const SL_REMAPPING_MDOLLAR_CIDIID_INVALID_DATA = 4584821670157459598n;
export const SL_REMAPPING_MDOLLAR_CIDIID_INVALID_DATA_LENGTH = 4584822769669087375n;
export const SL_REMAPPING_MDOLLAR_CIDIID_INVALID_CHECK_DIGITS = 4584830466250481808n;
export const SL_REMAPPING_MDOLLAR_TIMEBASED_ACTIVATION_BEFORE_START_DATE = 4584831565762109591n;
export const SL_REMAPPING_MDOLLAR_TIMEBASED_ACTIVATION_AFTER_END_DATE = 4584832665273737368n;
export const SL_REMAPPING_MDOLLAR_TIMEBASED_ACTIVATION_NOT_AVAILABLE = 4584833764785365145n;
export const SL_REMAPPING_MDOLLAR_TIMEBASED_PRODUCT_KEY_NOT_CONFIGURED = 4584884342320242842n;
export const SL_REMAPPING_MDOLLAR_NO_RULES_TO_ACTIVATE = 4584887640855126216n;
export const SL_REMAPPING_MDOLLAR_PRODUCT_KEY_BLOCKED_IPLOCATION = 4584896436948148427n;
export const SL_REMAPPING_MDOLLAR_DIGITALMARKER_INVALID_BINDING = 4584897536459776211n;
export const SL_REMAPPING_MDOLLAR_DIGITALMARKER_BINDING_NOT_CONFIGURED = 4584898635971403988n;
export const SL_REMAPPING_MDOLLAR_ROT_OVERRIDE_LIMIT_REACHED = 4584899735483031765n;
export const SL_REMAPPING_MDOLLAR_DMAK_OVERRIDE_LIMIT_REACHED = 4585790339901530326n;
export const SL_REMAPPING_MDOLLAR_FREE_OFFER_EXPIRED = 4587962974878016512n;
export const SL_REMAPPING_MDOLLAR_OSR_DONOR_HWID_NO_ENTITLEMENT = 4587964074389646264n;
export const SL_REMAPPING_MDOLLAR_OSR_GENERIC_ERROR = 4587965173901274041n;
export const SL_REMAPPING_MDOLLAR_OSR_NO_ASSOCIATION = 4587966273412901818n;
export const SL_REMAPPING_MDOLLAR_OSR_NOT_ADMIN = 4587967372924529595n;
export const SL_REMAPPING_MDOLLAR_OSR_USER_THROTTLED = 4587968472436157372n;
export const SL_REMAPPING_MDOLLAR_OSR_LICENSE_THROTTLED = 4587969571947785149n;
export const SL_REMAPPING_MDOLLAR_OSR_DEVICE_THROTTLED = 4587970671459412926n;
export const SL_REMAPPING_MDOLLAR_OSR_GP_DISABLED = 4587971770971040703n;
export const SL_REMAPPING_MDOLLAR_OSR_HARDWARE_BLOCKED = 4587972870482668480n;
export const SL_REMAPPING_MDOLLAR_OSR_USER_BLOCKED = 4587973969994296257n;
export const SL_REMAPPING_MDOLLAR_OSR_LICENSE_BLOCKED = 4587975069505924034n;
export const SL_REMAPPING_MDOLLAR_OSR_DEVICE_BLOCKED = 3746996077534882755n;
export const WDIGEST_SP_NAME_A = `WDigest`;
export const WDIGEST_SP_NAME_W = `WDigest`;
export const WDIGEST_SP_NAME = `WDigest`;
export const IDENTITY_KEYWORD_ASSOCIATED = `associated`;
export const IDENTITY_KEYWORD_LOCAL = `local`;
export const IDENTITY_KEYWORD_HOMEGROUP = `homegroup`;
export const IDENTITY_KEYWORD_CONNECTED = `connected`;
export const STR_OUT_OF_BOX_EXPERIENCE = `OutOfBoxExperience`;
export const STR_MODERN_SETTINGS_ADD_USER = `ModernSettingsAddUser`;
export const STR_OUT_OF_BOX_UPGRADE_EXPERIENCE = `OutOfBoxUpgradeExperience`;
export const STR_COMPLETE_ACCOUNT = `CompleteAccount`;
export const STR_NTH_USER_FIRST_AUTH = `NthUserFirstAuth`;
export const STR_USER_NAME = `Username`;
export const STR_PROPERTY_STORE = `PropertyStore`;
export const SidTypeUser = 1;
export const SidTypeGroup = 2;
export const SidTypeDomain = 3;
export const SidTypeAlias = 4;
export const SidTypeWellKnownGroup = 5;
export const SidTypeDeletedAccount = 6;
export const SidTypeInvalid = 7;
export const SidTypeUnknown = 8;
export const SidTypeComputer = 9;
export const SidTypeLabel = 10;
export const SidTypeLogonSession = 11;
export const AccountDomainInformation = 5;
export const DnsDomainInformation = 12;
export const UndefinedLogonType = 0;
export const Interactive = 2;
export const Network = 3;
export const Batch = 4;
export const Service = 5;
export const Proxy = 6;
export const Unlock = 7;
export const NetworkCleartext = 8;
export const NewCredentials = 9;
export const RemoteInteractive = 10;
export const CachedInteractive = 11;
export const CachedRemoteInteractive = 12;
export const CachedUnlock = 13;
export const SeAdtParmTypeNone = 0;
export const SeAdtParmTypeString = 1;
export const SeAdtParmTypeFileSpec = 2;
export const SeAdtParmTypeUlong = 3;
export const SeAdtParmTypeSid = 4;
export const SeAdtParmTypeLogonId = 5;
export const SeAdtParmTypeNoLogonId = 6;
export const SeAdtParmTypeAccessMask = 7;
export const SeAdtParmTypePrivs = 8;
export const SeAdtParmTypeObjectTypes = 9;
export const SeAdtParmTypeHexUlong = 10;
export const SeAdtParmTypePtr = 11;
export const SeAdtParmTypeTime = 12;
export const SeAdtParmTypeGuid = 13;
export const SeAdtParmTypeLuid = 14;
export const SeAdtParmTypeHexInt64 = 15;
export const SeAdtParmTypeStringList = 16;
export const SeAdtParmTypeSidList = 17;
export const SeAdtParmTypeDuration = 18;
export const SeAdtParmTypeUserAccountControl = 19;
export const SeAdtParmTypeNoUac = 20;
export const SeAdtParmTypeMessage = 21;
export const SeAdtParmTypeDateTime = 22;
export const SeAdtParmTypeSockAddr = 23;
export const SeAdtParmTypeSD = 24;
export const SeAdtParmTypeLogonHours = 25;
export const SeAdtParmTypeLogonIdNoSid = 26;
export const SeAdtParmTypeUlongNoConv = 27;
export const SeAdtParmTypeSockAddrNoPort = 28;
export const SeAdtParmTypeAccessReason = 29;
export const SeAdtParmTypeStagingReason = 30;
export const SeAdtParmTypeResourceAttribute = 31;
export const SeAdtParmTypeClaims = 32;
export const SeAdtParmTypeLogonIdAsSid = 33;
export const SeAdtParmTypeMultiSzString = 34;
export const SeAdtParmTypeLogonIdEx = 35;
export const AuditCategorySystem = 0;
export const AuditCategoryLogon = 1;
export const AuditCategoryObjectAccess = 2;
export const AuditCategoryPrivilegeUse = 3;
export const AuditCategoryDetailedTracking = 4;
export const AuditCategoryPolicyChange = 5;
export const AuditCategoryAccountManagement = 6;
export const AuditCategoryDirectoryServiceAccess = 7;
export const AuditCategoryAccountLogon = 8;
export const PolicyServerRoleBackup = 2;
export const PolicyServerRolePrimary = 3;
export const PolicyAuditLogInformation = 1;
export const PolicyAuditEventsInformation = 2;
export const PolicyPrimaryDomainInformation = 3;
export const PolicyPdAccountInformation = 4;
export const PolicyAccountDomainInformation = 5;
export const PolicyLsaServerRoleInformation = 6;
export const PolicyReplicaSourceInformation = 7;
export const PolicyDefaultQuotaInformation = 8;
export const PolicyModificationInformation = 9;
export const PolicyAuditFullSetInformation = 10;
export const PolicyAuditFullQueryInformation = 11;
export const PolicyDnsDomainInformation = 12;
export const PolicyDnsDomainInformationInt = 13;
export const PolicyLocalAccountDomainInformation = 14;
export const PolicyMachineAccountInformation = 15;
export const PolicyLastEntry = 16;
export const PolicyDomainEfsInformation = 2;
export const PolicyDomainKerberosTicketInformation = 3;
export const PolicyNotifyAuditEventsInformation = 1;
export const PolicyNotifyAccountDomainInformation = 2;
export const PolicyNotifyServerRoleInformation = 3;
export const PolicyNotifyDnsDomainInformation = 4;
export const PolicyNotifyDomainEfsInformation = 5;
export const PolicyNotifyDomainKerberosTicketInformation = 6;
export const PolicyNotifyMachineAccountPasswordInformation = 7;
export const PolicyNotifyGlobalSaclInformation = 8;
export const PolicyNotifyMax = 9;
export const TrustedDomainNameInformation = 1;
export const TrustedControllersInformation = 2;
export const TrustedPosixOffsetInformation = 3;
export const TrustedPasswordInformation = 4;
export const TrustedDomainInformationBasic = 5;
export const TrustedDomainInformationEx = 6;
export const TrustedDomainAuthInformation = 7;
export const TrustedDomainFullInformation = 8;
export const TrustedDomainAuthInformationInternal = 9;
export const TrustedDomainFullInformationInternal = 10;
export const TrustedDomainInformationEx2Internal = 11;
export const TrustedDomainFullInformation2Internal = 12;
export const TrustedDomainSupportedEncryptionTypes = 13;
export const ForestTrustTopLevelName = 0;
export const ForestTrustTopLevelNameEx = 1;
export const ForestTrustDomainInfo = 2;
export const ForestTrustRecordTypeLast = 2;
export const CollisionTdo = 0;
export const CollisionXref = 1;
export const CollisionOther = 2;
export const NegEnumPackagePrefixes = 0;
export const NegGetCallerName = 1;
export const NegTransferCredentials = 2;
export const NegMsgReserved1 = 3;
export const NegCallPackageMax = 4;
export const MsV1_0InteractiveLogon = 2;
export const MsV1_0Lm20Logon = 3;
export const MsV1_0NetworkLogon = 4;
export const MsV1_0SubAuthLogon = 5;
export const MsV1_0WorkstationUnlockLogon = 7;
export const MsV1_0S4ULogon = 12;
export const MsV1_0VirtualLogon = 82;
export const MsV1_0NoElevationLogon = 83;
export const MsV1_0LuidLogon = 84;
export const MsV1_0InteractiveProfile = 2;
export const MsV1_0Lm20LogonProfile = 3;
export const MsV1_0SmartCardProfile = 4;
export const InvalidCredKey = 0;
export const DeprecatedIUMCredKey = 1;
export const DomainUserCredKey = 2;
export const LocalUserCredKey = 3;
export const ExternallySuppliedCredKey = 4;
export const MsvAvEOL = 0;
export const MsvAvNbComputerName = 1;
export const MsvAvNbDomainName = 2;
export const MsvAvDnsComputerName = 3;
export const MsvAvDnsDomainName = 4;
export const MsvAvDnsTreeName = 5;
export const MsvAvFlags = 6;
export const MsvAvTimestamp = 7;
export const MsvAvRestrictions = 8;
export const MsvAvTargetName = 9;
export const MsvAvChannelBindings = 10;
export const MsV1_0Lm20ChallengeRequest = 0;
export const MsV1_0Lm20GetChallengeResponse = 1;
export const MsV1_0EnumerateUsers = 2;
export const MsV1_0GetUserInfo = 3;
export const MsV1_0ReLogonUsers = 4;
export const MsV1_0ChangePassword = 5;
export const MsV1_0ChangeCachedPassword = 6;
export const MsV1_0GenericPassthrough = 7;
export const MsV1_0CacheLogon = 8;
export const MsV1_0SubAuth = 9;
export const MsV1_0DeriveCredential = 10;
export const MsV1_0CacheLookup = 11;
export const MsV1_0SetProcessOption = 12;
export const MsV1_0ConfigLocalAliases = 13;
export const MsV1_0ClearCachedCredentials = 14;
export const MsV1_0LookupToken = 15;
export const MsV1_0ValidateAuth = 16;
export const MsV1_0CacheLookupEx = 17;
export const MsV1_0GetCredentialKey = 18;
export const MsV1_0SetThreadOption = 19;
export const MsV1_0DecryptDpapiMasterKey = 20;
export const MsV1_0GetStrongCredentialKey = 21;
export const MsV1_0TransferCred = 22;
export const MsV1_0ProvisionTbal = 23;
export const MsV1_0DeleteTbalSecrets = 24;
export const KerbInteractiveLogon = 2;
export const KerbSmartCardLogon = 6;
export const KerbWorkstationUnlockLogon = 7;
export const KerbSmartCardUnlockLogon = 8;
export const KerbProxyLogon = 9;
export const KerbTicketLogon = 10;
export const KerbTicketUnlockLogon = 11;
export const KerbS4ULogon = 12;
export const KerbCertificateLogon = 13;
export const KerbCertificateS4ULogon = 14;
export const KerbCertificateUnlockLogon = 15;
export const KerbNoElevationLogon = 83;
export const KerbLuidLogon = 84;
export const KerbInteractiveProfile = 2;
export const KerbSmartCardProfile = 4;
export const KerbTicketProfile = 6;
export const KerbDebugRequestMessage = 0;
export const KerbQueryTicketCacheMessage = 1;
export const KerbChangeMachinePasswordMessage = 2;
export const KerbVerifyPacMessage = 3;
export const KerbRetrieveTicketMessage = 4;
export const KerbUpdateAddressesMessage = 5;
export const KerbPurgeTicketCacheMessage = 6;
export const KerbChangePasswordMessage = 7;
export const KerbRetrieveEncodedTicketMessage = 8;
export const KerbDecryptDataMessage = 9;
export const KerbAddBindingCacheEntryMessage = 10;
export const KerbSetPasswordMessage = 11;
export const KerbSetPasswordExMessage = 12;
export const KerbVerifyCredentialsMessage = 13;
export const KerbQueryTicketCacheExMessage = 14;
export const KerbPurgeTicketCacheExMessage = 15;
export const KerbRefreshSmartcardCredentialsMessage = 16;
export const KerbAddExtraCredentialsMessage = 17;
export const KerbQuerySupplementalCredentialsMessage = 18;
export const KerbTransferCredentialsMessage = 19;
export const KerbQueryTicketCacheEx2Message = 20;
export const KerbSubmitTicketMessage = 21;
export const KerbAddExtraCredentialsExMessage = 22;
export const KerbQueryKdcProxyCacheMessage = 23;
export const KerbPurgeKdcProxyCacheMessage = 24;
export const KerbQueryTicketCacheEx3Message = 25;
export const KerbCleanupMachinePkinitCredsMessage = 26;
export const KerbAddBindingCacheEntryExMessage = 27;
export const KerbQueryBindingCacheMessage = 28;
export const KerbPurgeBindingCacheMessage = 29;
export const KerbPinKdcMessage = 30;
export const KerbUnpinAllKdcsMessage = 31;
export const KerbQueryDomainExtendedPoliciesMessage = 32;
export const KerbQueryS4U2ProxyCacheMessage = 33;
export const KerbRetrieveKeyTabMessage = 34;
export const KerbRefreshPolicyMessage = 35;
export const KerbPrintCloudKerberosDebugMessage = 36;
export const CertHashInfo = 1;
export const Pku2uCertificateS4ULogon = 14;
export const SecApplicationProtocolNegotiationExt_None = 0;
export const SecApplicationProtocolNegotiationExt_NPN = 1;
export const SecApplicationProtocolNegotiationExt_ALPN = 2;
export const SecTrafficSecret_None = 0;
export const SecTrafficSecret_Client = 1;
export const SecTrafficSecret_Server = 2;
export const SecPkgCredClass_None = 0;
export const SecPkgCredClass_Ephemeral = 10;
export const SecPkgCredClass_PersistedGeneric = 20;
export const SecPkgCredClass_PersistedSpecific = 30;
export const SecPkgCredClass_Explicit = 40;
export const SecPkgAttrLastClientTokenYes = 0;
export const SecPkgAttrLastClientTokenNo = 1;
export const SecPkgAttrLastClientTokenMaybe = 2;
export const SecApplicationProtocolNegotiationStatus_None = 0;
export const SecApplicationProtocolNegotiationStatus_Success = 1;
export const SecApplicationProtocolNegotiationStatus_SelectedClientOnly = 2;
export const SecFull = 0;
export const SecService = 1;
export const SecTree = 2;
export const SecDirectory = 3;
export const SecObject = 4;
export const Sasl_AuthZIDForbidden = 0;
export const Sasl_AuthZIDProcessed = 1;
export const SEC_WINNT_AUTH_IDENTITY_ANSI = 1;
export const SEC_WINNT_AUTH_IDENTITY_UNICODE = 2;
export const LsaTokenInformationNull = 0;
export const LsaTokenInformationV1 = 1;
export const LsaTokenInformationV2 = 2;
export const LsaTokenInformationV3 = 3;
export const SecurityAnonymous = 0;
export const SecurityIdentification = 1;
export const SecurityImpersonation = 2;
export const SecurityDelegation = 3;
export const SecpkgGssInfo = 1;
export const SecpkgContextThunks = 2;
export const SecpkgMutualAuthLevel = 3;
export const SecpkgWowClientDll = 4;
export const SecpkgExtraOids = 5;
export const SecpkgMaxInfo = 6;
export const SecpkgNego2Info = 7;
export const NTMS_DRIVESTATE_DISMOUNTED = 0;
export const NTMS_DRIVESTATE_MOUNTED = 1;
export const NTMS_DRIVESTATE_LOADED = 2;
export const NTMS_DRIVESTATE_UNLOADED = 5;
export const NTMS_DRIVESTATE_BEING_CLEANED = 6;
export const NTMS_DRIVESTATE_DISMOUNTABLE = 7;
export const FILE_DEVICE_CD_ROM = 2;
export const FILE_DEVICE_DISK = 7;
export const FILE_DEVICE_TAPE = 31;
export const FILE_DEVICE_DVD = 51;
export const NTMS_LIBRARYTYPE_UNKNOWN = 0;
export const NTMS_LIBRARYTYPE_OFFLINE = 1;
export const NTMS_LIBRARYTYPE_ONLINE = 2;
export const NTMS_LIBRARYTYPE_STANDALONE = 3;
export const NTMS_INVENTORY_NONE = 0;
export const NTMS_INVENTORY_FAST = 1;
export const NTMS_INVENTORY_OMID = 2;
export const NTMS_INVENTORY_DEFAULT = 3;
export const NTMS_INVENTORY_SLOT = 4;
export const NTMS_INVENTORY_STOP = 5;
export const NTMS_INVENTORY_MAX = 6;
export const NTMS_LIBRARYFLAG_FIXEDOFFLINE = 1;
export const NTMS_LIBRARYFLAG_CLEANERPRESENT = 2;
export const NTMS_LIBRARYFLAG_AUTODETECTCHANGE = 4;
export const NTMS_LIBRARYFLAG_IGNORECLEANERUSESREMAINING = 8;
export const NTMS_LIBRARYFLAG_RECOGNIZECLEANERBARCODE = 16;
export const NTMS_DOORSTATE_UNKNOWN = 0;
export const NTMS_DOORSTATE_CLOSED = 1;
export const NTMS_DOORSTATE_OPEN = 2;
export const NTMS_PORTCONTENT_UNKNOWN = 0;
export const NTMS_PORTCONTENT_FULL = 1;
export const NTMS_PORTCONTENT_EMPTY = 2;
export const NTMS_PORTPOSITION_UNKNOWN = 0;
export const NTMS_PORTPOSITION_EXTENDED = 1;
export const NTMS_PORTPOSITION_RETRACTED = 2;
export const NTMS_BARCODESTATE_OK = 1;
export const NTMS_BARCODESTATE_UNREADABLE = 2;
export const NTMS_MEDIASTATE_IDLE = 0;
export const NTMS_MEDIASTATE_INUSE = 1;
export const NTMS_MEDIASTATE_MOUNTED = 2;
export const NTMS_MEDIASTATE_LOADED = 3;
export const NTMS_MEDIASTATE_UNLOADED = 4;
export const NTMS_MEDIASTATE_OPERROR = 5;
export const NTMS_MEDIASTATE_OPREQ = 6;
export const NTMS_PARTSTATE_UNKNOWN = 0;
export const NTMS_PARTSTATE_UNPREPARED = 1;
export const NTMS_PARTSTATE_INCOMPATIBLE = 2;
export const NTMS_PARTSTATE_DECOMMISSIONED = 3;
export const NTMS_PARTSTATE_AVAILABLE = 4;
export const NTMS_PARTSTATE_ALLOCATED = 5;
export const NTMS_PARTSTATE_COMPLETE = 6;
export const NTMS_PARTSTATE_FOREIGN = 7;
export const NTMS_PARTSTATE_IMPORT = 8;
export const NTMS_PARTSTATE_RESERVED = 9;
export const NTMS_MEDIARW_UNKNOWN = 0;
export const NTMS_MEDIARW_REWRITABLE = 1;
export const NTMS_MEDIARW_WRITEONCE = 2;
export const NTMS_MEDIARW_READONLY = 3;
export const NTMS_LM_REMOVE = 0;
export const NTMS_LM_DISABLECHANGER = 1;
export const NTMS_LM_DISABLELIBRARY = 1;
export const NTMS_LM_ENABLECHANGER = 2;
export const NTMS_LM_ENABLELIBRARY = 2;
export const NTMS_LM_DISABLEDRIVE = 3;
export const NTMS_LM_ENABLEDRIVE = 4;
export const NTMS_LM_DISABLEMEDIA = 5;
export const NTMS_LM_ENABLEMEDIA = 6;
export const NTMS_LM_UPDATEOMID = 7;
export const NTMS_LM_INVENTORY = 8;
export const NTMS_LM_DOORACCESS = 9;
export const NTMS_LM_EJECT = 10;
export const NTMS_LM_EJECTCLEANER = 11;
export const NTMS_LM_INJECT = 12;
export const NTMS_LM_INJECTCLEANER = 13;
export const NTMS_LM_PROCESSOMID = 14;
export const NTMS_LM_CLEANDRIVE = 15;
export const NTMS_LM_DISMOUNT = 16;
export const NTMS_LM_MOUNT = 17;
export const NTMS_LM_WRITESCRATCH = 18;
export const NTMS_LM_CLASSIFY = 19;
export const NTMS_LM_RESERVECLEANER = 20;
export const NTMS_LM_RELEASECLEANER = 21;
export const NTMS_LM_MAXWORKITEM = 22;
export const NTMS_LM_QUEUED = 0;
export const NTMS_LM_INPROCESS = 1;
export const NTMS_LM_PASSED = 2;
export const NTMS_LM_FAILED = 3;
export const NTMS_LM_INVALID = 4;
export const NTMS_LM_WAITING = 5;
export const NTMS_LM_DEFERRED = 6;
export const NTMS_LM_DEFFERED = 6;
export const NTMS_LM_CANCELLED = 7;
export const NTMS_LM_STOPPED = 8;
export const NTMS_OPREQ_UNKNOWN = 0;
export const NTMS_OPREQ_NEWMEDIA = 1;
export const NTMS_OPREQ_CLEANER = 2;
export const NTMS_OPREQ_DEVICESERVICE = 3;
export const NTMS_OPREQ_MOVEMEDIA = 4;
export const NTMS_OPREQ_MESSAGE = 5;
export const NTMS_OPSTATE_UNKNOWN = 0;
export const NTMS_OPSTATE_SUBMITTED = 1;
export const NTMS_OPSTATE_ACTIVE = 2;
export const NTMS_OPSTATE_INPROGRESS = 3;
export const NTMS_OPSTATE_REFUSED = 4;
export const NTMS_OPSTATE_COMPLETE = 5;
export const NTMS_UNKNOWN = 0;
export const NTMS_OBJECT = 1;
export const NTMS_CHANGER = 2;
export const NTMS_CHANGER_TYPE = 3;
export const NTMS_COMPUTER = 4;
export const NTMS_DRIVE = 5;
export const NTMS_DRIVE_TYPE = 6;
export const NTMS_IEDOOR = 7;
export const NTMS_IEPORT = 8;
export const NTMS_LIBRARY = 9;
export const NTMS_LIBREQUEST = 10;
export const NTMS_LOGICAL_MEDIA = 11;
export const NTMS_MEDIA_POOL = 12;
export const NTMS_MEDIA_TYPE = 13;
export const NTMS_PARTITION = 14;
export const NTMS_PHYSICAL_MEDIA = 15;
export const NTMS_STORAGESLOT = 16;
export const NTMS_OPREQUEST = 17;
export const NTMS_UI_DESTINATION = 18;
export const NTMS_NUMBER_OF_OBJECT_TYPES = 19;
export const SecPkgCallPackageMinMessage = 1024;
export const SecPkgCallPackagePinDcMessage = 1024;
export const SecPkgCallPackageUnpinAllDcsMessage = 1025;
export const SecPkgCallPackageTransferCredMessage = 1026;
export const SecPkgCallPackageMaxMessage = 1026;
export const SecSessionPrimaryCred = 0;
export const SecNameSamCompatible = 0;
export const SecNameAlternateId = 1;
export const SecNameFlat = 2;
export const SecNameDN = 3;
export const SecNameSPN = 4;
export const CredFetchDefault = 0;
export const CredFetchDPAPI = 1;
export const CredFetchForced = 2;
export const CRED_FLAGS_PASSWORD_FOR_CERT = 1;
export const CRED_FLAGS_PROMPT_NOW = 2;
export const CRED_FLAGS_USERNAME_TARGET = 4;
export const CRED_FLAGS_OWF_CRED_BLOB = 8;
export const CRED_FLAGS_REQUIRE_CONFIRMATION = 16;
export const CRED_FLAGS_WILDCARD_MATCH = 32;
export const CRED_FLAGS_VSM_PROTECTED = 64;
export const CRED_FLAGS_NGC_CERT = 128;
export const CRED_FLAGS_VALID_FLAGS = 61695;
export const CRED_FLAGS_VALID_INPUT_FLAGS = 61599;
export const CRED_TYPE_GENERIC = 1;
export const CRED_TYPE_DOMAIN_PASSWORD = 2;
export const CRED_TYPE_DOMAIN_CERTIFICATE = 3;
export const CRED_TYPE_DOMAIN_VISIBLE_PASSWORD = 4;
export const CRED_TYPE_GENERIC_CERTIFICATE = 5;
export const CRED_TYPE_DOMAIN_EXTENDED = 6;
export const CRED_TYPE_MAXIMUM = 7;
export const CRED_TYPE_MAXIMUM_EX = 1007;
export const CRED_PERSIST_NONE = 0;
export const CRED_PERSIST_SESSION = 1;
export const CRED_PERSIST_LOCAL_MACHINE = 2;
export const CRED_PERSIST_ENTERPRISE = 3;
export const KSecPaged = 0;
export const KSecNonPaged = 1;
export const TlsSignatureAlgorithm_Anonymous = 0;
export const TlsSignatureAlgorithm_Rsa = 1;
export const TlsSignatureAlgorithm_Dsa = 2;
export const TlsSignatureAlgorithm_Ecdsa = 3;
export const TlsHashAlgorithm_None = 0;
export const TlsHashAlgorithm_Md5 = 1;
export const TlsHashAlgorithm_Sha1 = 2;
export const TlsHashAlgorithm_Sha224 = 3;
export const TlsHashAlgorithm_Sha256 = 4;
export const TlsHashAlgorithm_Sha384 = 5;
export const TlsHashAlgorithm_Sha512 = 6;
export const SCH_EXTENSIONS_OPTIONS_NONE = 0;
export const SCH_NO_RECORD_HEADER = 1;
export const NetlogonInteractiveInformation = 1;
export const NetlogonNetworkInformation = 2;
export const NetlogonServiceInformation = 3;
export const NetlogonGenericInformation = 4;
export const NetlogonInteractiveTransitiveInformation = 5;
export const NetlogonNetworkTransitiveInformation = 6;
export const NetlogonServiceTransitiveInformation = 7;
export const TOKENBINDING_TYPE_PROVIDED = 0;
export const TOKENBINDING_TYPE_REFERRED = 1;
export const TOKENBINDING_EXTENSION_FORMAT_UNDEFINED = 0;
export const TOKENBINDING_KEY_PARAMETERS_TYPE_RSA2048_PKCS = 0;
export const TOKENBINDING_KEY_PARAMETERS_TYPE_RSA2048_PSS = 1;
export const TOKENBINDING_KEY_PARAMETERS_TYPE_ECDSAP256 = 2;
export const TOKENBINDING_KEY_PARAMETERS_TYPE_ANYEXISTING = 255;
export const NameUnknown = 0;
export const NameFullyQualifiedDN = 1;
export const NameSamCompatible = 2;
export const NameDisplay = 3;
export const NameUniqueId = 6;
export const NameCanonical = 7;
export const NameUserPrincipal = 8;
export const NameCanonicalEx = 9;
export const NameServicePrincipal = 10;
export const NameDnsDomain = 12;
export const NameGivenName = 13;
export const NameSurname = 14;
export const SL_DATA_NONE = 0;
export const SL_DATA_SZ = 1;
export const SL_DATA_DWORD = 4;
export const SL_DATA_BINARY = 3;
export const SL_DATA_MULTI_SZ = 7;
export const SL_DATA_SUM = 100;
export const SL_ID_APPLICATION = 0;
export const SL_ID_PRODUCT_SKU = 1;
export const SL_ID_LICENSE_FILE = 2;
export const SL_ID_LICENSE = 3;
export const SL_ID_PKEY = 4;
export const SL_ID_ALL_LICENSES = 5;
export const SL_ID_ALL_LICENSE_FILES = 6;
export const SL_ID_STORE_TOKEN = 7;
export const SL_ID_LAST = 8;
export const SL_LICENSING_STATUS_UNLICENSED = 0;
export const SL_LICENSING_STATUS_LICENSED = 1;
export const SL_LICENSING_STATUS_IN_GRACE_PERIOD = 2;
export const SL_LICENSING_STATUS_NOTIFICATION = 3;
export const SL_LICENSING_STATUS_LAST = 4;
export const SL_ACTIVATION_TYPE_DEFAULT = 0;
export const SL_ACTIVATION_TYPE_ACTIVE_DIRECTORY = 1;
export const SL_REFERRALTYPE_SKUID = 0;
export const SL_REFERRALTYPE_APPID = 1;
export const SL_REFERRALTYPE_OVERRIDE_SKUID = 2;
export const SL_REFERRALTYPE_OVERRIDE_APPID = 3;
export const SL_REFERRALTYPE_BEST_MATCH = 4;
export const SL_GEN_STATE_IS_GENUINE = 0;
export const SL_GEN_STATE_INVALID_LICENSE = 1;
export const SL_GEN_STATE_TAMPERED = 2;
export const SL_GEN_STATE_OFFLINE = 3;
export const SL_GEN_STATE_LAST = 4;
export const IDENTITIES_ALL = 0;
export const IDENTITIES_ME_ONLY = 1;
export const IDENTITY_ASSOCIATED = 1;
export const IDENTITY_DISASSOCIATED = 2;
export const IDENTITY_CREATED = 4;
export const IDENTITY_IMPORTED = 8;
export const IDENTITY_DELETED = 16;
export const IDENTITY_PROPCHANGED = 32;
export const IDENTITY_CONNECTED = 64;
export const IDENTITY_DISCONNECTED = 128;
export const IDENTITY_URL_CREATE_ACCOUNT_WIZARD = 0;
export const IDENTITY_URL_SIGN_IN_WIZARD = 1;
export const IDENTITY_URL_CHANGE_PASSWORD_WIZARD = 2;
export const IDENTITY_URL_IFEXISTS_WIZARD = 3;
export const IDENTITY_URL_ACCOUNT_SETTINGS = 4;
export const IDENTITY_URL_RESTORE_WIZARD = 5;
export const IDENTITY_URL_CONNECT_WIZARD = 6;
export const NOT_CONNECTED = 0;
export const CONNECTING = 1;
export const CONNECT_COMPLETED = 2;

// Structs

export type LsaHandle = Deno.PointerValue;

export type PWSTR = Deno.PointerValue | Uint8Array;

/**
 * Windows.Win32.Foundation.UNICODE_STRING (size: 16)
 */
export interface UNICODE_STRING {
  /** u16 */
  Length: number;
  /** u16 */
  MaximumLength: number;
  /** Windows.Win32.Foundation.PWSTR */
  Buffer: string | null | Uint8Array | Uint16Array;
}

export const sizeofUNICODE_STRING = 16;

export function allocUNICODE_STRING(data?: Partial<UNICODE_STRING>): Uint8Array {
  const buf = new Uint8Array(sizeofUNICODE_STRING);
  const view = new DataView(buf.buffer);
  // 0x00: u16
  if (data?.Length !== undefined) view.setUint16(0, Number(data.Length), true);
  // 0x02: u16
  if (data?.MaximumLength !== undefined) view.setUint16(2, Number(data.MaximumLength), true);
  // 0x04: pad4
  // 0x08: buffer
  if (data?.Buffer !== undefined) {
    (buf as any)._f8 = util.pwstrToFfi(data.Buffer);
    view.setBigUint64(8, (buf as any)._f8 === null ? 0n : BigInt(Deno.UnsafePointer.value(Deno.UnsafePointer.of((buf as any)._f8))), true);
  }
  return buf;
}

export class UNICODE_STRINGView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u16
  get Length(): number {
    return this.view.getUint16(0, true);
  }

  // 0x02: u16
  get MaximumLength(): number {
    return this.view.getUint16(2, true);
  }

  // 0x04: pad4

  // 0x08: buffer
  get Buffer(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: u16
  set Length(value: number) {
    this.view.setUint16(0, value, true);
  }

  // 0x02: u16
  set MaximumLength(value: number) {
    this.view.setUint16(2, value, true);
  }

  // 0x04: pad4

  // 0x08: buffer
  set Buffer(value: Uint8Array | Deno.PointerValue) {
    (this.buf as any)._f8 = value;
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer((this.buf as any)._f8))), true);
  }
}

export type PSID = Deno.PointerValue | Uint8Array;

/**
 * Windows.Win32.Security.Authentication.Identity.LSA_TRUST_INFORMATION (size: 16)
 */
export interface LSA_TRUST_INFORMATION {
  /** Windows.Win32.Foundation.UNICODE_STRING */
  Name: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.Foundation.PSID */
  Sid: Uint8Array | Deno.PointerValue;
}

export const sizeofLSA_TRUST_INFORMATION = 16;

export function allocLSA_TRUST_INFORMATION(data?: Partial<LSA_TRUST_INFORMATION>): Uint8Array {
  const buf = new Uint8Array(sizeofLSA_TRUST_INFORMATION);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.Name !== undefined) view.setBigUint64(0, data.Name === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.Name))), true);
  // 0x08: pointer
  if (data?.Sid !== undefined) view.setBigUint64(8, data.Sid === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.Sid))), true);
  return buf;
}

export class LSA_TRUST_INFORMATIONView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get Name(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(0, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x08: pointer
  get Sid(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: pointer
  set Name(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(0, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x08: pointer
  set Sid(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.Security.Authentication.Identity.LSA_REFERENCED_DOMAIN_LIST (size: 16)
 */
export interface LSA_REFERENCED_DOMAIN_LIST {
  /** u32 */
  Entries: number;
  /** ptr */
  Domains: Deno.PointerValue | Uint8Array;
}

export const sizeofLSA_REFERENCED_DOMAIN_LIST = 16;

export function allocLSA_REFERENCED_DOMAIN_LIST(data?: Partial<LSA_REFERENCED_DOMAIN_LIST>): Uint8Array {
  const buf = new Uint8Array(sizeofLSA_REFERENCED_DOMAIN_LIST);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.Entries !== undefined) view.setUint32(0, Number(data.Entries), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.Domains !== undefined) view.setBigUint64(8, data.Domains === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.Domains))), true);
  return buf;
}

export class LSA_REFERENCED_DOMAIN_LISTView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get Entries(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  get Domains(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: u32
  set Entries(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  set Domains(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.Security.Authentication.Identity.LSA_TRANSLATED_SID2 (size: 24)
 */
export interface LSA_TRANSLATED_SID2 {
  /** Windows.Win32.Security.SID_NAME_USE */
  Use: SID_NAME_USE;
  /** Windows.Win32.Foundation.PSID */
  Sid: Uint8Array | Deno.PointerValue;
  /** i32 */
  DomainIndex: number;
  /** u32 */
  Flags: number;
}

export const sizeofLSA_TRANSLATED_SID2 = 24;

export function allocLSA_TRANSLATED_SID2(data?: Partial<LSA_TRANSLATED_SID2>): Uint8Array {
  const buf = new Uint8Array(sizeofLSA_TRANSLATED_SID2);
  const view = new DataView(buf.buffer);
  // 0x00: i32
  if (data?.Use !== undefined) view.setInt32(0, Number(data.Use), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.Sid !== undefined) view.setBigUint64(8, data.Sid === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.Sid))), true);
  // 0x10: i32
  if (data?.DomainIndex !== undefined) view.setInt32(16, Number(data.DomainIndex), true);
  // 0x14: u32
  if (data?.Flags !== undefined) view.setUint32(20, Number(data.Flags), true);
  return buf;
}

export class LSA_TRANSLATED_SID2View {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: i32
  get Use(): number {
    return this.view.getInt32(0, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  get Sid(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x10: i32
  get DomainIndex(): number {
    return this.view.getInt32(16, true);
  }

  // 0x14: u32
  get Flags(): number {
    return this.view.getUint32(20, true);
  }

  // 0x00: i32
  set Use(value: number) {
    this.view.setInt32(0, value, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  set Sid(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x10: i32
  set DomainIndex(value: number) {
    this.view.setInt32(16, value, true);
  }

  // 0x14: u32
  set Flags(value: number) {
    this.view.setUint32(20, value, true);
  }
}

/**
 * Windows.Win32.Security.Authentication.Identity.LSA_TRANSLATED_NAME (size: 24)
 */
export interface LSA_TRANSLATED_NAME {
  /** Windows.Win32.Security.SID_NAME_USE */
  Use: SID_NAME_USE;
  /** Windows.Win32.Foundation.UNICODE_STRING */
  Name: Uint8Array | Deno.PointerValue;
  /** i32 */
  DomainIndex: number;
}

export const sizeofLSA_TRANSLATED_NAME = 24;

export function allocLSA_TRANSLATED_NAME(data?: Partial<LSA_TRANSLATED_NAME>): Uint8Array {
  const buf = new Uint8Array(sizeofLSA_TRANSLATED_NAME);
  const view = new DataView(buf.buffer);
  // 0x00: i32
  if (data?.Use !== undefined) view.setInt32(0, Number(data.Use), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.Name !== undefined) view.setBigUint64(8, data.Name === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.Name))), true);
  // 0x10: i32
  if (data?.DomainIndex !== undefined) view.setInt32(16, Number(data.DomainIndex), true);
  // 0x14: pad4
  return buf;
}

export class LSA_TRANSLATED_NAMEView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: i32
  get Use(): number {
    return this.view.getInt32(0, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  get Name(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x10: i32
  get DomainIndex(): number {
    return this.view.getInt32(16, true);
  }

  // 0x14: pad4

  // 0x00: i32
  set Use(value: number) {
    this.view.setInt32(0, value, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  set Name(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x10: i32
  set DomainIndex(value: number) {
    this.view.setInt32(16, value, true);
  }

  // 0x14: pad4
}

/**
 * Windows.Win32.Security.Authentication.Identity.POLICY_ACCOUNT_DOMAIN_INFO (size: 16)
 */
export interface POLICY_ACCOUNT_DOMAIN_INFO {
  /** Windows.Win32.Foundation.UNICODE_STRING */
  DomainName: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.Foundation.PSID */
  DomainSid: Uint8Array | Deno.PointerValue;
}

export const sizeofPOLICY_ACCOUNT_DOMAIN_INFO = 16;

export function allocPOLICY_ACCOUNT_DOMAIN_INFO(data?: Partial<POLICY_ACCOUNT_DOMAIN_INFO>): Uint8Array {
  const buf = new Uint8Array(sizeofPOLICY_ACCOUNT_DOMAIN_INFO);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.DomainName !== undefined) view.setBigUint64(0, data.DomainName === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.DomainName))), true);
  // 0x08: pointer
  if (data?.DomainSid !== undefined) view.setBigUint64(8, data.DomainSid === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.DomainSid))), true);
  return buf;
}

export class POLICY_ACCOUNT_DOMAIN_INFOView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get DomainName(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(0, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x08: pointer
  get DomainSid(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: pointer
  set DomainName(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(0, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x08: pointer
  set DomainSid(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.Security.Authentication.Identity.POLICY_DNS_DOMAIN_INFO (size: 40)
 */
export interface POLICY_DNS_DOMAIN_INFO {
  /** Windows.Win32.Foundation.UNICODE_STRING */
  Name: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.Foundation.UNICODE_STRING */
  DnsDomainName: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.Foundation.UNICODE_STRING */
  DnsForestName: Uint8Array | Deno.PointerValue;
  /** System.Guid */
  DomainGuid: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.Foundation.PSID */
  Sid: Uint8Array | Deno.PointerValue;
}

export const sizeofPOLICY_DNS_DOMAIN_INFO = 40;

export function allocPOLICY_DNS_DOMAIN_INFO(data?: Partial<POLICY_DNS_DOMAIN_INFO>): Uint8Array {
  const buf = new Uint8Array(sizeofPOLICY_DNS_DOMAIN_INFO);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.Name !== undefined) view.setBigUint64(0, data.Name === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.Name))), true);
  // 0x08: pointer
  if (data?.DnsDomainName !== undefined) view.setBigUint64(8, data.DnsDomainName === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.DnsDomainName))), true);
  // 0x10: pointer
  if (data?.DnsForestName !== undefined) view.setBigUint64(16, data.DnsForestName === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.DnsForestName))), true);
  // 0x18: pointer
  if (data?.DomainGuid !== undefined) view.setBigUint64(24, data.DomainGuid === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.DomainGuid))), true);
  // 0x20: pointer
  if (data?.Sid !== undefined) view.setBigUint64(32, data.Sid === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.Sid))), true);
  return buf;
}

export class POLICY_DNS_DOMAIN_INFOView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get Name(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(0, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x08: pointer
  get DnsDomainName(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x10: pointer
  get DnsForestName(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(16, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x18: pointer
  get DomainGuid(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(24, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x20: pointer
  get Sid(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(32, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: pointer
  set Name(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(0, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x08: pointer
  set DnsDomainName(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x10: pointer
  set DnsForestName(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(16, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x18: pointer
  set DomainGuid(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(24, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x20: pointer
  set Sid(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(32, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.Security.Authentication.Identity.SE_ADT_OBJECT_TYPE (size: 16)
 */
export interface SE_ADT_OBJECT_TYPE {
  /** System.Guid */
  ObjectType: Uint8Array | Deno.PointerValue;
  /** u16 */
  Flags: number;
  /** u16 */
  Level: number;
  /** u32 */
  AccessMask: number;
}

export const sizeofSE_ADT_OBJECT_TYPE = 16;

export function allocSE_ADT_OBJECT_TYPE(data?: Partial<SE_ADT_OBJECT_TYPE>): Uint8Array {
  const buf = new Uint8Array(sizeofSE_ADT_OBJECT_TYPE);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.ObjectType !== undefined) view.setBigUint64(0, data.ObjectType === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.ObjectType))), true);
  // 0x08: u16
  if (data?.Flags !== undefined) view.setUint16(8, Number(data.Flags), true);
  // 0x0a: u16
  if (data?.Level !== undefined) view.setUint16(10, Number(data.Level), true);
  // 0x0c: u32
  if (data?.AccessMask !== undefined) view.setUint32(12, Number(data.AccessMask), true);
  return buf;
}

export class SE_ADT_OBJECT_TYPEView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get ObjectType(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(0, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x08: u16
  get Flags(): number {
    return this.view.getUint16(8, true);
  }

  // 0x0a: u16
  get Level(): number {
    return this.view.getUint16(10, true);
  }

  // 0x0c: u32
  get AccessMask(): number {
    return this.view.getUint32(12, true);
  }

  // 0x00: pointer
  set ObjectType(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(0, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x08: u16
  set Flags(value: number) {
    this.view.setUint16(8, value, true);
  }

  // 0x0a: u16
  set Level(value: number) {
    this.view.setUint16(10, value, true);
  }

  // 0x0c: u32
  set AccessMask(value: number) {
    this.view.setUint32(12, value, true);
  }
}

/**
 * Windows.Win32.Security.Authentication.Identity.SE_ADT_PARAMETER_ARRAY_ENTRY (size: 24)
 */
export interface SE_ADT_PARAMETER_ARRAY_ENTRY {
  /** Windows.Win32.Security.Authentication.Identity.SE_ADT_PARAMETER_TYPE */
  Type: SE_ADT_PARAMETER_TYPE;
  /** u32 */
  Length: number;
  /** array */
  Data: Deno.PointerValue;
  /** ptr */
  Address: Deno.PointerValue | Uint8Array;
}

export const sizeofSE_ADT_PARAMETER_ARRAY_ENTRY = 24;

export function allocSE_ADT_PARAMETER_ARRAY_ENTRY(data?: Partial<SE_ADT_PARAMETER_ARRAY_ENTRY>): Uint8Array {
  const buf = new Uint8Array(sizeofSE_ADT_PARAMETER_ARRAY_ENTRY);
  const view = new DataView(buf.buffer);
  // 0x00: i32
  if (data?.Type !== undefined) view.setInt32(0, Number(data.Type), true);
  // 0x04: u32
  if (data?.Length !== undefined) view.setUint32(4, Number(data.Length), true);
  // 0x08: pointer
  if (data?.Data !== undefined) view.setBigUint64(8, data.Data === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.Data))), true);
  // 0x10: pointer
  if (data?.Address !== undefined) view.setBigUint64(16, data.Address === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.Address))), true);
  return buf;
}

export class SE_ADT_PARAMETER_ARRAY_ENTRYView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: i32
  get Type(): number {
    return this.view.getInt32(0, true);
  }

  // 0x04: u32
  get Length(): number {
    return this.view.getUint32(4, true);
  }

  // 0x08: pointer
  get Data(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x10: pointer
  get Address(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(16, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: i32
  set Type(value: number) {
    this.view.setInt32(0, value, true);
  }

  // 0x04: u32
  set Length(value: number) {
    this.view.setUint32(4, value, true);
  }

  // 0x08: pointer
  set Data(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x10: pointer
  set Address(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(16, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

export type PSECURITY_DESCRIPTOR = Deno.PointerValue | Uint8Array;

/**
 * Windows.Win32.Security.Authentication.Identity.SE_ADT_ACCESS_REASON (size: 32)
 */
export interface SE_ADT_ACCESS_REASON {
  /** u32 */
  AccessMask: number;
  /** array */
  AccessReasons: Deno.PointerValue;
  /** u32 */
  ObjectTypeIndex: number;
  /** u32 */
  AccessGranted: number;
  /** Windows.Win32.Security.PSECURITY_DESCRIPTOR */
  SecurityDescriptor: Uint8Array | Deno.PointerValue;
}

export const sizeofSE_ADT_ACCESS_REASON = 32;

export function allocSE_ADT_ACCESS_REASON(data?: Partial<SE_ADT_ACCESS_REASON>): Uint8Array {
  const buf = new Uint8Array(sizeofSE_ADT_ACCESS_REASON);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.AccessMask !== undefined) view.setUint32(0, Number(data.AccessMask), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.AccessReasons !== undefined) view.setBigUint64(8, data.AccessReasons === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.AccessReasons))), true);
  // 0x10: u32
  if (data?.ObjectTypeIndex !== undefined) view.setUint32(16, Number(data.ObjectTypeIndex), true);
  // 0x14: u32
  if (data?.AccessGranted !== undefined) view.setUint32(20, Number(data.AccessGranted), true);
  // 0x18: pointer
  if (data?.SecurityDescriptor !== undefined) view.setBigUint64(24, data.SecurityDescriptor === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.SecurityDescriptor))), true);
  return buf;
}

export class SE_ADT_ACCESS_REASONView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get AccessMask(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  get AccessReasons(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x10: u32
  get ObjectTypeIndex(): number {
    return this.view.getUint32(16, true);
  }

  // 0x14: u32
  get AccessGranted(): number {
    return this.view.getUint32(20, true);
  }

  // 0x18: pointer
  get SecurityDescriptor(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(24, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: u32
  set AccessMask(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  set AccessReasons(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x10: u32
  set ObjectTypeIndex(value: number) {
    this.view.setUint32(16, value, true);
  }

  // 0x14: u32
  set AccessGranted(value: number) {
    this.view.setUint32(20, value, true);
  }

  // 0x18: pointer
  set SecurityDescriptor(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(24, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.Security.Authentication.Identity.SE_ADT_CLAIMS (size: 16)
 */
export interface SE_ADT_CLAIMS {
  /** u32 */
  Length: number;
  /** ptr */
  Claims: Deno.PointerValue | Uint8Array;
}

export const sizeofSE_ADT_CLAIMS = 16;

export function allocSE_ADT_CLAIMS(data?: Partial<SE_ADT_CLAIMS>): Uint8Array {
  const buf = new Uint8Array(sizeofSE_ADT_CLAIMS);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.Length !== undefined) view.setUint32(0, Number(data.Length), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.Claims !== undefined) view.setBigUint64(8, data.Claims === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.Claims))), true);
  return buf;
}

export class SE_ADT_CLAIMSView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get Length(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  get Claims(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: u32
  set Length(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  set Claims(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.Security.Authentication.Identity.SE_ADT_PARAMETER_ARRAY (size: 32)
 */
export interface SE_ADT_PARAMETER_ARRAY {
  /** u32 */
  CategoryId: number;
  /** u32 */
  AuditId: number;
  /** u32 */
  ParameterCount: number;
  /** u32 */
  Length: number;
  /** u16 */
  FlatSubCategoryId: number;
  /** u16 */
  Type: number;
  /** u32 */
  Flags: number;
  /** array */
  Parameters: Deno.PointerValue;
}

export const sizeofSE_ADT_PARAMETER_ARRAY = 32;

export function allocSE_ADT_PARAMETER_ARRAY(data?: Partial<SE_ADT_PARAMETER_ARRAY>): Uint8Array {
  const buf = new Uint8Array(sizeofSE_ADT_PARAMETER_ARRAY);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.CategoryId !== undefined) view.setUint32(0, Number(data.CategoryId), true);
  // 0x04: u32
  if (data?.AuditId !== undefined) view.setUint32(4, Number(data.AuditId), true);
  // 0x08: u32
  if (data?.ParameterCount !== undefined) view.setUint32(8, Number(data.ParameterCount), true);
  // 0x0c: u32
  if (data?.Length !== undefined) view.setUint32(12, Number(data.Length), true);
  // 0x10: u16
  if (data?.FlatSubCategoryId !== undefined) view.setUint16(16, Number(data.FlatSubCategoryId), true);
  // 0x12: u16
  if (data?.Type !== undefined) view.setUint16(18, Number(data.Type), true);
  // 0x14: u32
  if (data?.Flags !== undefined) view.setUint32(20, Number(data.Flags), true);
  // 0x18: pointer
  if (data?.Parameters !== undefined) view.setBigUint64(24, data.Parameters === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.Parameters))), true);
  return buf;
}

export class SE_ADT_PARAMETER_ARRAYView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get CategoryId(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: u32
  get AuditId(): number {
    return this.view.getUint32(4, true);
  }

  // 0x08: u32
  get ParameterCount(): number {
    return this.view.getUint32(8, true);
  }

  // 0x0c: u32
  get Length(): number {
    return this.view.getUint32(12, true);
  }

  // 0x10: u16
  get FlatSubCategoryId(): number {
    return this.view.getUint16(16, true);
  }

  // 0x12: u16
  get Type(): number {
    return this.view.getUint16(18, true);
  }

  // 0x14: u32
  get Flags(): number {
    return this.view.getUint32(20, true);
  }

  // 0x18: pointer
  get Parameters(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(24, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: u32
  set CategoryId(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: u32
  set AuditId(value: number) {
    this.view.setUint32(4, value, true);
  }

  // 0x08: u32
  set ParameterCount(value: number) {
    this.view.setUint32(8, value, true);
  }

  // 0x0c: u32
  set Length(value: number) {
    this.view.setUint32(12, value, true);
  }

  // 0x10: u16
  set FlatSubCategoryId(value: number) {
    this.view.setUint16(16, value, true);
  }

  // 0x12: u16
  set Type(value: number) {
    this.view.setUint16(18, value, true);
  }

  // 0x14: u32
  set Flags(value: number) {
    this.view.setUint32(20, value, true);
  }

  // 0x18: pointer
  set Parameters(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(24, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.Security.Authentication.Identity.SE_ADT_PARAMETER_ARRAY_EX (size: 40)
 */
export interface SE_ADT_PARAMETER_ARRAY_EX {
  /** u32 */
  CategoryId: number;
  /** u32 */
  AuditId: number;
  /** u32 */
  Version: number;
  /** u32 */
  ParameterCount: number;
  /** u32 */
  Length: number;
  /** u16 */
  FlatSubCategoryId: number;
  /** u16 */
  Type: number;
  /** u32 */
  Flags: number;
  /** array */
  Parameters: Deno.PointerValue;
}

export const sizeofSE_ADT_PARAMETER_ARRAY_EX = 40;

export function allocSE_ADT_PARAMETER_ARRAY_EX(data?: Partial<SE_ADT_PARAMETER_ARRAY_EX>): Uint8Array {
  const buf = new Uint8Array(sizeofSE_ADT_PARAMETER_ARRAY_EX);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.CategoryId !== undefined) view.setUint32(0, Number(data.CategoryId), true);
  // 0x04: u32
  if (data?.AuditId !== undefined) view.setUint32(4, Number(data.AuditId), true);
  // 0x08: u32
  if (data?.Version !== undefined) view.setUint32(8, Number(data.Version), true);
  // 0x0c: u32
  if (data?.ParameterCount !== undefined) view.setUint32(12, Number(data.ParameterCount), true);
  // 0x10: u32
  if (data?.Length !== undefined) view.setUint32(16, Number(data.Length), true);
  // 0x14: u16
  if (data?.FlatSubCategoryId !== undefined) view.setUint16(20, Number(data.FlatSubCategoryId), true);
  // 0x16: u16
  if (data?.Type !== undefined) view.setUint16(22, Number(data.Type), true);
  // 0x18: u32
  if (data?.Flags !== undefined) view.setUint32(24, Number(data.Flags), true);
  // 0x1c: pad4
  // 0x20: pointer
  if (data?.Parameters !== undefined) view.setBigUint64(32, data.Parameters === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.Parameters))), true);
  return buf;
}

export class SE_ADT_PARAMETER_ARRAY_EXView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get CategoryId(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: u32
  get AuditId(): number {
    return this.view.getUint32(4, true);
  }

  // 0x08: u32
  get Version(): number {
    return this.view.getUint32(8, true);
  }

  // 0x0c: u32
  get ParameterCount(): number {
    return this.view.getUint32(12, true);
  }

  // 0x10: u32
  get Length(): number {
    return this.view.getUint32(16, true);
  }

  // 0x14: u16
  get FlatSubCategoryId(): number {
    return this.view.getUint16(20, true);
  }

  // 0x16: u16
  get Type(): number {
    return this.view.getUint16(22, true);
  }

  // 0x18: u32
  get Flags(): number {
    return this.view.getUint32(24, true);
  }

  // 0x1c: pad4

  // 0x20: pointer
  get Parameters(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(32, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: u32
  set CategoryId(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: u32
  set AuditId(value: number) {
    this.view.setUint32(4, value, true);
  }

  // 0x08: u32
  set Version(value: number) {
    this.view.setUint32(8, value, true);
  }

  // 0x0c: u32
  set ParameterCount(value: number) {
    this.view.setUint32(12, value, true);
  }

  // 0x10: u32
  set Length(value: number) {
    this.view.setUint32(16, value, true);
  }

  // 0x14: u16
  set FlatSubCategoryId(value: number) {
    this.view.setUint16(20, value, true);
  }

  // 0x16: u16
  set Type(value: number) {
    this.view.setUint16(22, value, true);
  }

  // 0x18: u32
  set Flags(value: number) {
    this.view.setUint32(24, value, true);
  }

  // 0x1c: pad4

  // 0x20: pointer
  set Parameters(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(32, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.Security.Authentication.Identity.LSA_TRANSLATED_SID (size: 16)
 */
export interface LSA_TRANSLATED_SID {
  /** Windows.Win32.Security.SID_NAME_USE */
  Use: SID_NAME_USE;
  /** u32 */
  RelativeId: number;
  /** i32 */
  DomainIndex: number;
}

export const sizeofLSA_TRANSLATED_SID = 16;

export function allocLSA_TRANSLATED_SID(data?: Partial<LSA_TRANSLATED_SID>): Uint8Array {
  const buf = new Uint8Array(sizeofLSA_TRANSLATED_SID);
  const view = new DataView(buf.buffer);
  // 0x00: i32
  if (data?.Use !== undefined) view.setInt32(0, Number(data.Use), true);
  // 0x04: u32
  if (data?.RelativeId !== undefined) view.setUint32(4, Number(data.RelativeId), true);
  // 0x08: i32
  if (data?.DomainIndex !== undefined) view.setInt32(8, Number(data.DomainIndex), true);
  // 0x0c: pad4
  return buf;
}

export class LSA_TRANSLATED_SIDView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: i32
  get Use(): number {
    return this.view.getInt32(0, true);
  }

  // 0x04: u32
  get RelativeId(): number {
    return this.view.getUint32(4, true);
  }

  // 0x08: i32
  get DomainIndex(): number {
    return this.view.getInt32(8, true);
  }

  // 0x0c: pad4

  // 0x00: i32
  set Use(value: number) {
    this.view.setInt32(0, value, true);
  }

  // 0x04: u32
  set RelativeId(value: number) {
    this.view.setUint32(4, value, true);
  }

  // 0x08: i32
  set DomainIndex(value: number) {
    this.view.setInt32(8, value, true);
  }

  // 0x0c: pad4
}

/**
 * _Anonymous_e__Struct (size: 16)
 */
export interface _Anonymous_e__Struct {
  /** u64 */
  Alignment: Deno.PointerValue;
  /** u64 */
  Region: Deno.PointerValue;
}

export const sizeof_Anonymous_e__Struct = 16;

export function alloc_Anonymous_e__Struct(data?: Partial<_Anonymous_e__Struct>): Uint8Array {
  const buf = new Uint8Array(sizeof_Anonymous_e__Struct);
  const view = new DataView(buf.buffer);
  // 0x00: u64
  if (data?.Alignment !== undefined) view.setBigUint64(0, BigInt(data.Alignment), true);
  // 0x08: u64
  if (data?.Region !== undefined) view.setBigUint64(8, BigInt(data.Region), true);
  return buf;
}

export class _Anonymous_e__StructView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u64
  get Alignment(): Deno.PointerValue {
    return Number(this.view.getBigUint64(0, true));
  }

  // 0x08: u64
  get Region(): Deno.PointerValue {
    return Number(this.view.getBigUint64(8, true));
  }

  // 0x00: u64
  set Alignment(value: Deno.PointerValue) {
    this.view.setBigUint64(0, BigInt(value), true);
  }

  // 0x08: u64
  set Region(value: Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(value), true);
  }
}

/**
 * _u_e__Struct (size: 16)
 */
export interface _u_e__Struct {
  /** u32 */
  dwValue: number;
  /** Windows.Win32.Foundation.PWSTR */
  pwszName: string | null | Uint8Array | Uint16Array;
}

export const sizeof_u_e__Struct = 16;

export function alloc_u_e__Struct(data?: Partial<_u_e__Struct>): Uint8Array {
  const buf = new Uint8Array(sizeof_u_e__Struct);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.dwValue !== undefined) view.setUint32(0, Number(data.dwValue), true);
  // 0x04: pad4
  // 0x08: buffer
  if (data?.pwszName !== undefined) {
    (buf as any)._f8 = util.pwstrToFfi(data.pwszName);
    view.setBigUint64(8, (buf as any)._f8 === null ? 0n : BigInt(Deno.UnsafePointer.value(Deno.UnsafePointer.of((buf as any)._f8))), true);
  }
  return buf;
}

export class _u_e__StructView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get dwValue(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: pad4

  // 0x08: buffer
  get pwszName(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: u32
  set dwValue(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: pad4

  // 0x08: buffer
  set pwszName(value: Uint8Array | Deno.PointerValue) {
    (this.buf as any)._f8 = value;
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer((this.buf as any)._f8))), true);
  }
}

/**
 * Windows.Win32.Foundation.LARGE_INTEGER (size: 24)
 */
export interface LARGE_INTEGER {
  /** _Anonymous_e__Struct */
  Anonymous: Uint8Array | Deno.PointerValue;
  /** _u_e__Struct */
  u: Uint8Array | Deno.PointerValue;
  /** i64 */
  QuadPart: Deno.PointerValue;
}

export const sizeofLARGE_INTEGER = 24;

export function allocLARGE_INTEGER(data?: Partial<LARGE_INTEGER>): Uint8Array {
  const buf = new Uint8Array(sizeofLARGE_INTEGER);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.Anonymous !== undefined) view.setBigUint64(0, data.Anonymous === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.Anonymous))), true);
  // 0x08: pointer
  if (data?.u !== undefined) view.setBigUint64(8, data.u === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.u))), true);
  // 0x10: i64
  if (data?.QuadPart !== undefined) view.setBigInt64(16, BigInt(data.QuadPart), true);
  return buf;
}

export class LARGE_INTEGERView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get Anonymous(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(0, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x08: pointer
  get u(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x10: i64
  get QuadPart(): Deno.PointerValue {
    return Number(this.view.getBigInt64(16, true));
  }

  // 0x00: pointer
  set Anonymous(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(0, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x08: pointer
  set u(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x10: i64
  set QuadPart(value: Deno.PointerValue) {
    this.view.setBigInt64(16, BigInt(value), true);
  }
}

export type BOOLEAN = number;

/**
 * Windows.Win32.Security.Authentication.Identity.POLICY_AUDIT_LOG_INFO (size: 40)
 */
export interface POLICY_AUDIT_LOG_INFO {
  /** u32 */
  AuditLogPercentFull: number;
  /** u32 */
  MaximumLogSize: number;
  /** Windows.Win32.Foundation.LARGE_INTEGER */
  AuditRetentionPeriod: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.Foundation.BOOLEAN */
  AuditLogFullShutdownInProgress: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.Foundation.LARGE_INTEGER */
  TimeToShutdown: Uint8Array | Deno.PointerValue;
  /** u32 */
  NextAuditRecordId: number;
}

export const sizeofPOLICY_AUDIT_LOG_INFO = 40;

export function allocPOLICY_AUDIT_LOG_INFO(data?: Partial<POLICY_AUDIT_LOG_INFO>): Uint8Array {
  const buf = new Uint8Array(sizeofPOLICY_AUDIT_LOG_INFO);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.AuditLogPercentFull !== undefined) view.setUint32(0, Number(data.AuditLogPercentFull), true);
  // 0x04: u32
  if (data?.MaximumLogSize !== undefined) view.setUint32(4, Number(data.MaximumLogSize), true);
  // 0x08: pointer
  if (data?.AuditRetentionPeriod !== undefined) view.setBigUint64(8, data.AuditRetentionPeriod === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.AuditRetentionPeriod))), true);
  // 0x10: pointer
  if (data?.AuditLogFullShutdownInProgress !== undefined) view.setBigUint64(16, data.AuditLogFullShutdownInProgress === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.AuditLogFullShutdownInProgress))), true);
  // 0x18: pointer
  if (data?.TimeToShutdown !== undefined) view.setBigUint64(24, data.TimeToShutdown === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.TimeToShutdown))), true);
  // 0x20: u32
  if (data?.NextAuditRecordId !== undefined) view.setUint32(32, Number(data.NextAuditRecordId), true);
  // 0x24: pad4
  return buf;
}

export class POLICY_AUDIT_LOG_INFOView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get AuditLogPercentFull(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: u32
  get MaximumLogSize(): number {
    return this.view.getUint32(4, true);
  }

  // 0x08: pointer
  get AuditRetentionPeriod(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x10: pointer
  get AuditLogFullShutdownInProgress(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(16, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x18: pointer
  get TimeToShutdown(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(24, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x20: u32
  get NextAuditRecordId(): number {
    return this.view.getUint32(32, true);
  }

  // 0x24: pad4

  // 0x00: u32
  set AuditLogPercentFull(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: u32
  set MaximumLogSize(value: number) {
    this.view.setUint32(4, value, true);
  }

  // 0x08: pointer
  set AuditRetentionPeriod(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x10: pointer
  set AuditLogFullShutdownInProgress(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(16, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x18: pointer
  set TimeToShutdown(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(24, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x20: u32
  set NextAuditRecordId(value: number) {
    this.view.setUint32(32, value, true);
  }

  // 0x24: pad4
}

/**
 * Windows.Win32.Security.Authentication.Identity.POLICY_AUDIT_EVENTS_INFO (size: 24)
 */
export interface POLICY_AUDIT_EVENTS_INFO {
  /** Windows.Win32.Foundation.BOOLEAN */
  AuditingMode: Uint8Array | Deno.PointerValue;
  /** ptr */
  EventAuditingOptions: Deno.PointerValue | Uint8Array;
  /** u32 */
  MaximumAuditEventCount: number;
}

export const sizeofPOLICY_AUDIT_EVENTS_INFO = 24;

export function allocPOLICY_AUDIT_EVENTS_INFO(data?: Partial<POLICY_AUDIT_EVENTS_INFO>): Uint8Array {
  const buf = new Uint8Array(sizeofPOLICY_AUDIT_EVENTS_INFO);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.AuditingMode !== undefined) view.setBigUint64(0, data.AuditingMode === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.AuditingMode))), true);
  // 0x08: pointer
  if (data?.EventAuditingOptions !== undefined) view.setBigUint64(8, data.EventAuditingOptions === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.EventAuditingOptions))), true);
  // 0x10: u32
  if (data?.MaximumAuditEventCount !== undefined) view.setUint32(16, Number(data.MaximumAuditEventCount), true);
  // 0x14: pad4
  return buf;
}

export class POLICY_AUDIT_EVENTS_INFOView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get AuditingMode(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(0, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x08: pointer
  get EventAuditingOptions(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x10: u32
  get MaximumAuditEventCount(): number {
    return this.view.getUint32(16, true);
  }

  // 0x14: pad4

  // 0x00: pointer
  set AuditingMode(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(0, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x08: pointer
  set EventAuditingOptions(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x10: u32
  set MaximumAuditEventCount(value: number) {
    this.view.setUint32(16, value, true);
  }

  // 0x14: pad4
}

/**
 * Windows.Win32.Security.Authentication.Identity.POLICY_AUDIT_SUBCATEGORIES_INFO (size: 16)
 */
export interface POLICY_AUDIT_SUBCATEGORIES_INFO {
  /** u32 */
  MaximumSubCategoryCount: number;
  /** ptr */
  EventAuditingOptions: Deno.PointerValue | Uint8Array;
}

export const sizeofPOLICY_AUDIT_SUBCATEGORIES_INFO = 16;

export function allocPOLICY_AUDIT_SUBCATEGORIES_INFO(data?: Partial<POLICY_AUDIT_SUBCATEGORIES_INFO>): Uint8Array {
  const buf = new Uint8Array(sizeofPOLICY_AUDIT_SUBCATEGORIES_INFO);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.MaximumSubCategoryCount !== undefined) view.setUint32(0, Number(data.MaximumSubCategoryCount), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.EventAuditingOptions !== undefined) view.setBigUint64(8, data.EventAuditingOptions === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.EventAuditingOptions))), true);
  return buf;
}

export class POLICY_AUDIT_SUBCATEGORIES_INFOView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get MaximumSubCategoryCount(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  get EventAuditingOptions(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: u32
  set MaximumSubCategoryCount(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  set EventAuditingOptions(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.Security.Authentication.Identity.POLICY_AUDIT_CATEGORIES_INFO (size: 16)
 */
export interface POLICY_AUDIT_CATEGORIES_INFO {
  /** u32 */
  MaximumCategoryCount: number;
  /** ptr */
  SubCategoriesInfo: Deno.PointerValue | Uint8Array;
}

export const sizeofPOLICY_AUDIT_CATEGORIES_INFO = 16;

export function allocPOLICY_AUDIT_CATEGORIES_INFO(data?: Partial<POLICY_AUDIT_CATEGORIES_INFO>): Uint8Array {
  const buf = new Uint8Array(sizeofPOLICY_AUDIT_CATEGORIES_INFO);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.MaximumCategoryCount !== undefined) view.setUint32(0, Number(data.MaximumCategoryCount), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.SubCategoriesInfo !== undefined) view.setBigUint64(8, data.SubCategoriesInfo === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.SubCategoriesInfo))), true);
  return buf;
}

export class POLICY_AUDIT_CATEGORIES_INFOView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get MaximumCategoryCount(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  get SubCategoriesInfo(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: u32
  set MaximumCategoryCount(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  set SubCategoriesInfo(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.Security.Authentication.Identity.POLICY_PRIMARY_DOMAIN_INFO (size: 16)
 */
export interface POLICY_PRIMARY_DOMAIN_INFO {
  /** Windows.Win32.Foundation.UNICODE_STRING */
  Name: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.Foundation.PSID */
  Sid: Uint8Array | Deno.PointerValue;
}

export const sizeofPOLICY_PRIMARY_DOMAIN_INFO = 16;

export function allocPOLICY_PRIMARY_DOMAIN_INFO(data?: Partial<POLICY_PRIMARY_DOMAIN_INFO>): Uint8Array {
  const buf = new Uint8Array(sizeofPOLICY_PRIMARY_DOMAIN_INFO);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.Name !== undefined) view.setBigUint64(0, data.Name === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.Name))), true);
  // 0x08: pointer
  if (data?.Sid !== undefined) view.setBigUint64(8, data.Sid === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.Sid))), true);
  return buf;
}

export class POLICY_PRIMARY_DOMAIN_INFOView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get Name(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(0, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x08: pointer
  get Sid(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: pointer
  set Name(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(0, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x08: pointer
  set Sid(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.Security.Authentication.Identity.POLICY_PD_ACCOUNT_INFO (size: 8)
 */
export interface POLICY_PD_ACCOUNT_INFO {
  /** Windows.Win32.Foundation.UNICODE_STRING */
  Name: Uint8Array | Deno.PointerValue;
}

export const sizeofPOLICY_PD_ACCOUNT_INFO = 8;

export function allocPOLICY_PD_ACCOUNT_INFO(data?: Partial<POLICY_PD_ACCOUNT_INFO>): Uint8Array {
  const buf = new Uint8Array(sizeofPOLICY_PD_ACCOUNT_INFO);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.Name !== undefined) view.setBigUint64(0, data.Name === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.Name))), true);
  return buf;
}

export class POLICY_PD_ACCOUNT_INFOView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get Name(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(0, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: pointer
  set Name(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(0, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.Security.Authentication.Identity.POLICY_LSA_SERVER_ROLE_INFO (size: 8)
 */
export interface POLICY_LSA_SERVER_ROLE_INFO {
  /** Windows.Win32.Security.Authentication.Identity.POLICY_LSA_SERVER_ROLE */
  LsaServerRole: POLICY_LSA_SERVER_ROLE;
}

export const sizeofPOLICY_LSA_SERVER_ROLE_INFO = 8;

export function allocPOLICY_LSA_SERVER_ROLE_INFO(data?: Partial<POLICY_LSA_SERVER_ROLE_INFO>): Uint8Array {
  const buf = new Uint8Array(sizeofPOLICY_LSA_SERVER_ROLE_INFO);
  const view = new DataView(buf.buffer);
  // 0x00: i32
  if (data?.LsaServerRole !== undefined) view.setInt32(0, Number(data.LsaServerRole), true);
  // 0x04: pad4
  return buf;
}

export class POLICY_LSA_SERVER_ROLE_INFOView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: i32
  get LsaServerRole(): number {
    return this.view.getInt32(0, true);
  }

  // 0x04: pad4

  // 0x00: i32
  set LsaServerRole(value: number) {
    this.view.setInt32(0, value, true);
  }

  // 0x04: pad4
}

/**
 * Windows.Win32.Security.Authentication.Identity.POLICY_REPLICA_SOURCE_INFO (size: 16)
 */
export interface POLICY_REPLICA_SOURCE_INFO {
  /** Windows.Win32.Foundation.UNICODE_STRING */
  ReplicaSource: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.Foundation.UNICODE_STRING */
  ReplicaAccountName: Uint8Array | Deno.PointerValue;
}

export const sizeofPOLICY_REPLICA_SOURCE_INFO = 16;

export function allocPOLICY_REPLICA_SOURCE_INFO(data?: Partial<POLICY_REPLICA_SOURCE_INFO>): Uint8Array {
  const buf = new Uint8Array(sizeofPOLICY_REPLICA_SOURCE_INFO);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.ReplicaSource !== undefined) view.setBigUint64(0, data.ReplicaSource === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.ReplicaSource))), true);
  // 0x08: pointer
  if (data?.ReplicaAccountName !== undefined) view.setBigUint64(8, data.ReplicaAccountName === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.ReplicaAccountName))), true);
  return buf;
}

export class POLICY_REPLICA_SOURCE_INFOView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get ReplicaSource(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(0, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x08: pointer
  get ReplicaAccountName(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: pointer
  set ReplicaSource(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(0, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x08: pointer
  set ReplicaAccountName(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.Security.QUOTA_LIMITS (size: 48)
 */
export interface QUOTA_LIMITS {
  /** usize */
  PagedPoolLimit: Deno.PointerValue;
  /** usize */
  NonPagedPoolLimit: Deno.PointerValue;
  /** usize */
  MinimumWorkingSetSize: Deno.PointerValue;
  /** usize */
  MaximumWorkingSetSize: Deno.PointerValue;
  /** usize */
  PagefileLimit: Deno.PointerValue;
  /** Windows.Win32.Foundation.LARGE_INTEGER */
  TimeLimit: Uint8Array | Deno.PointerValue;
}

export const sizeofQUOTA_LIMITS = 48;

export function allocQUOTA_LIMITS(data?: Partial<QUOTA_LIMITS>): Uint8Array {
  const buf = new Uint8Array(sizeofQUOTA_LIMITS);
  const view = new DataView(buf.buffer);
  // 0x00: usize
  if (data?.PagedPoolLimit !== undefined) view.setBigUint64(0, BigInt(data.PagedPoolLimit), true);
  // 0x08: usize
  if (data?.NonPagedPoolLimit !== undefined) view.setBigUint64(8, BigInt(data.NonPagedPoolLimit), true);
  // 0x10: usize
  if (data?.MinimumWorkingSetSize !== undefined) view.setBigUint64(16, BigInt(data.MinimumWorkingSetSize), true);
  // 0x18: usize
  if (data?.MaximumWorkingSetSize !== undefined) view.setBigUint64(24, BigInt(data.MaximumWorkingSetSize), true);
  // 0x20: usize
  if (data?.PagefileLimit !== undefined) view.setBigUint64(32, BigInt(data.PagefileLimit), true);
  // 0x28: pointer
  if (data?.TimeLimit !== undefined) view.setBigUint64(40, data.TimeLimit === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.TimeLimit))), true);
  return buf;
}

export class QUOTA_LIMITSView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: usize
  get PagedPoolLimit(): Deno.PointerValue {
    return Number(this.view.getBigUint64(0, true));
  }

  // 0x08: usize
  get NonPagedPoolLimit(): Deno.PointerValue {
    return Number(this.view.getBigUint64(8, true));
  }

  // 0x10: usize
  get MinimumWorkingSetSize(): Deno.PointerValue {
    return Number(this.view.getBigUint64(16, true));
  }

  // 0x18: usize
  get MaximumWorkingSetSize(): Deno.PointerValue {
    return Number(this.view.getBigUint64(24, true));
  }

  // 0x20: usize
  get PagefileLimit(): Deno.PointerValue {
    return Number(this.view.getBigUint64(32, true));
  }

  // 0x28: pointer
  get TimeLimit(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(40, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: usize
  set PagedPoolLimit(value: Deno.PointerValue) {
    this.view.setBigUint64(0, BigInt(value), true);
  }

  // 0x08: usize
  set NonPagedPoolLimit(value: Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(value), true);
  }

  // 0x10: usize
  set MinimumWorkingSetSize(value: Deno.PointerValue) {
    this.view.setBigUint64(16, BigInt(value), true);
  }

  // 0x18: usize
  set MaximumWorkingSetSize(value: Deno.PointerValue) {
    this.view.setBigUint64(24, BigInt(value), true);
  }

  // 0x20: usize
  set PagefileLimit(value: Deno.PointerValue) {
    this.view.setBigUint64(32, BigInt(value), true);
  }

  // 0x28: pointer
  set TimeLimit(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(40, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.Security.Authentication.Identity.POLICY_DEFAULT_QUOTA_INFO (size: 8)
 */
export interface POLICY_DEFAULT_QUOTA_INFO {
  /** Windows.Win32.Security.QUOTA_LIMITS */
  QuotaLimits: Uint8Array | Deno.PointerValue;
}

export const sizeofPOLICY_DEFAULT_QUOTA_INFO = 8;

export function allocPOLICY_DEFAULT_QUOTA_INFO(data?: Partial<POLICY_DEFAULT_QUOTA_INFO>): Uint8Array {
  const buf = new Uint8Array(sizeofPOLICY_DEFAULT_QUOTA_INFO);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.QuotaLimits !== undefined) view.setBigUint64(0, data.QuotaLimits === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.QuotaLimits))), true);
  return buf;
}

export class POLICY_DEFAULT_QUOTA_INFOView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get QuotaLimits(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(0, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: pointer
  set QuotaLimits(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(0, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.Security.Authentication.Identity.POLICY_MODIFICATION_INFO (size: 16)
 */
export interface POLICY_MODIFICATION_INFO {
  /** Windows.Win32.Foundation.LARGE_INTEGER */
  ModifiedId: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.Foundation.LARGE_INTEGER */
  DatabaseCreationTime: Uint8Array | Deno.PointerValue;
}

export const sizeofPOLICY_MODIFICATION_INFO = 16;

export function allocPOLICY_MODIFICATION_INFO(data?: Partial<POLICY_MODIFICATION_INFO>): Uint8Array {
  const buf = new Uint8Array(sizeofPOLICY_MODIFICATION_INFO);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.ModifiedId !== undefined) view.setBigUint64(0, data.ModifiedId === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.ModifiedId))), true);
  // 0x08: pointer
  if (data?.DatabaseCreationTime !== undefined) view.setBigUint64(8, data.DatabaseCreationTime === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.DatabaseCreationTime))), true);
  return buf;
}

export class POLICY_MODIFICATION_INFOView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get ModifiedId(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(0, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x08: pointer
  get DatabaseCreationTime(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: pointer
  set ModifiedId(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(0, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x08: pointer
  set DatabaseCreationTime(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.Security.Authentication.Identity.POLICY_AUDIT_FULL_SET_INFO (size: 8)
 */
export interface POLICY_AUDIT_FULL_SET_INFO {
  /** Windows.Win32.Foundation.BOOLEAN */
  ShutDownOnFull: Uint8Array | Deno.PointerValue;
}

export const sizeofPOLICY_AUDIT_FULL_SET_INFO = 8;

export function allocPOLICY_AUDIT_FULL_SET_INFO(data?: Partial<POLICY_AUDIT_FULL_SET_INFO>): Uint8Array {
  const buf = new Uint8Array(sizeofPOLICY_AUDIT_FULL_SET_INFO);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.ShutDownOnFull !== undefined) view.setBigUint64(0, data.ShutDownOnFull === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.ShutDownOnFull))), true);
  return buf;
}

export class POLICY_AUDIT_FULL_SET_INFOView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get ShutDownOnFull(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(0, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: pointer
  set ShutDownOnFull(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(0, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.Security.Authentication.Identity.POLICY_AUDIT_FULL_QUERY_INFO (size: 16)
 */
export interface POLICY_AUDIT_FULL_QUERY_INFO {
  /** Windows.Win32.Foundation.BOOLEAN */
  ShutDownOnFull: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.Foundation.BOOLEAN */
  LogIsFull: Uint8Array | Deno.PointerValue;
}

export const sizeofPOLICY_AUDIT_FULL_QUERY_INFO = 16;

export function allocPOLICY_AUDIT_FULL_QUERY_INFO(data?: Partial<POLICY_AUDIT_FULL_QUERY_INFO>): Uint8Array {
  const buf = new Uint8Array(sizeofPOLICY_AUDIT_FULL_QUERY_INFO);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.ShutDownOnFull !== undefined) view.setBigUint64(0, data.ShutDownOnFull === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.ShutDownOnFull))), true);
  // 0x08: pointer
  if (data?.LogIsFull !== undefined) view.setBigUint64(8, data.LogIsFull === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.LogIsFull))), true);
  return buf;
}

export class POLICY_AUDIT_FULL_QUERY_INFOView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get ShutDownOnFull(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(0, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x08: pointer
  get LogIsFull(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: pointer
  set ShutDownOnFull(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(0, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x08: pointer
  set LogIsFull(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.Security.Authentication.Identity.POLICY_DOMAIN_EFS_INFO (size: 16)
 */
export interface POLICY_DOMAIN_EFS_INFO {
  /** u32 */
  InfoLength: number;
  /** ptr */
  EfsBlob: Deno.PointerValue | Uint8Array;
}

export const sizeofPOLICY_DOMAIN_EFS_INFO = 16;

export function allocPOLICY_DOMAIN_EFS_INFO(data?: Partial<POLICY_DOMAIN_EFS_INFO>): Uint8Array {
  const buf = new Uint8Array(sizeofPOLICY_DOMAIN_EFS_INFO);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.InfoLength !== undefined) view.setUint32(0, Number(data.InfoLength), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.EfsBlob !== undefined) view.setBigUint64(8, data.EfsBlob === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.EfsBlob))), true);
  return buf;
}

export class POLICY_DOMAIN_EFS_INFOView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get InfoLength(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  get EfsBlob(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: u32
  set InfoLength(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  set EfsBlob(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.Security.Authentication.Identity.POLICY_DOMAIN_KERBEROS_TICKET_INFO (size: 48)
 */
export interface POLICY_DOMAIN_KERBEROS_TICKET_INFO {
  /** u32 */
  AuthenticationOptions: number;
  /** Windows.Win32.Foundation.LARGE_INTEGER */
  MaxServiceTicketAge: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.Foundation.LARGE_INTEGER */
  MaxTicketAge: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.Foundation.LARGE_INTEGER */
  MaxRenewAge: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.Foundation.LARGE_INTEGER */
  MaxClockSkew: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.Foundation.LARGE_INTEGER */
  Reserved: Uint8Array | Deno.PointerValue;
}

export const sizeofPOLICY_DOMAIN_KERBEROS_TICKET_INFO = 48;

export function allocPOLICY_DOMAIN_KERBEROS_TICKET_INFO(data?: Partial<POLICY_DOMAIN_KERBEROS_TICKET_INFO>): Uint8Array {
  const buf = new Uint8Array(sizeofPOLICY_DOMAIN_KERBEROS_TICKET_INFO);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.AuthenticationOptions !== undefined) view.setUint32(0, Number(data.AuthenticationOptions), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.MaxServiceTicketAge !== undefined) view.setBigUint64(8, data.MaxServiceTicketAge === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.MaxServiceTicketAge))), true);
  // 0x10: pointer
  if (data?.MaxTicketAge !== undefined) view.setBigUint64(16, data.MaxTicketAge === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.MaxTicketAge))), true);
  // 0x18: pointer
  if (data?.MaxRenewAge !== undefined) view.setBigUint64(24, data.MaxRenewAge === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.MaxRenewAge))), true);
  // 0x20: pointer
  if (data?.MaxClockSkew !== undefined) view.setBigUint64(32, data.MaxClockSkew === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.MaxClockSkew))), true);
  // 0x28: pointer
  if (data?.Reserved !== undefined) view.setBigUint64(40, data.Reserved === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.Reserved))), true);
  return buf;
}

export class POLICY_DOMAIN_KERBEROS_TICKET_INFOView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get AuthenticationOptions(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  get MaxServiceTicketAge(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x10: pointer
  get MaxTicketAge(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(16, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x18: pointer
  get MaxRenewAge(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(24, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x20: pointer
  get MaxClockSkew(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(32, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x28: pointer
  get Reserved(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(40, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: u32
  set AuthenticationOptions(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  set MaxServiceTicketAge(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x10: pointer
  set MaxTicketAge(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(16, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x18: pointer
  set MaxRenewAge(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(24, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x20: pointer
  set MaxClockSkew(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(32, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x28: pointer
  set Reserved(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(40, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.Security.Authentication.Identity.POLICY_MACHINE_ACCT_INFO (size: 16)
 */
export interface POLICY_MACHINE_ACCT_INFO {
  /** u32 */
  Rid: number;
  /** Windows.Win32.Foundation.PSID */
  Sid: Uint8Array | Deno.PointerValue;
}

export const sizeofPOLICY_MACHINE_ACCT_INFO = 16;

export function allocPOLICY_MACHINE_ACCT_INFO(data?: Partial<POLICY_MACHINE_ACCT_INFO>): Uint8Array {
  const buf = new Uint8Array(sizeofPOLICY_MACHINE_ACCT_INFO);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.Rid !== undefined) view.setUint32(0, Number(data.Rid), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.Sid !== undefined) view.setBigUint64(8, data.Sid === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.Sid))), true);
  return buf;
}

export class POLICY_MACHINE_ACCT_INFOView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get Rid(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  get Sid(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: u32
  set Rid(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  set Sid(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.Security.Authentication.Identity.TRUSTED_DOMAIN_NAME_INFO (size: 8)
 */
export interface TRUSTED_DOMAIN_NAME_INFO {
  /** Windows.Win32.Foundation.UNICODE_STRING */
  Name: Uint8Array | Deno.PointerValue;
}

export const sizeofTRUSTED_DOMAIN_NAME_INFO = 8;

export function allocTRUSTED_DOMAIN_NAME_INFO(data?: Partial<TRUSTED_DOMAIN_NAME_INFO>): Uint8Array {
  const buf = new Uint8Array(sizeofTRUSTED_DOMAIN_NAME_INFO);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.Name !== undefined) view.setBigUint64(0, data.Name === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.Name))), true);
  return buf;
}

export class TRUSTED_DOMAIN_NAME_INFOView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get Name(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(0, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: pointer
  set Name(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(0, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.Security.Authentication.Identity.TRUSTED_CONTROLLERS_INFO (size: 16)
 */
export interface TRUSTED_CONTROLLERS_INFO {
  /** u32 */
  Entries: number;
  /** ptr */
  Names: Deno.PointerValue | Uint8Array;
}

export const sizeofTRUSTED_CONTROLLERS_INFO = 16;

export function allocTRUSTED_CONTROLLERS_INFO(data?: Partial<TRUSTED_CONTROLLERS_INFO>): Uint8Array {
  const buf = new Uint8Array(sizeofTRUSTED_CONTROLLERS_INFO);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.Entries !== undefined) view.setUint32(0, Number(data.Entries), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.Names !== undefined) view.setBigUint64(8, data.Names === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.Names))), true);
  return buf;
}

export class TRUSTED_CONTROLLERS_INFOView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get Entries(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  get Names(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: u32
  set Entries(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  set Names(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.Security.Authentication.Identity.TRUSTED_POSIX_OFFSET_INFO (size: 8)
 */
export interface TRUSTED_POSIX_OFFSET_INFO {
  /** u32 */
  Offset: number;
}

export const sizeofTRUSTED_POSIX_OFFSET_INFO = 8;

export function allocTRUSTED_POSIX_OFFSET_INFO(data?: Partial<TRUSTED_POSIX_OFFSET_INFO>): Uint8Array {
  const buf = new Uint8Array(sizeofTRUSTED_POSIX_OFFSET_INFO);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.Offset !== undefined) view.setUint32(0, Number(data.Offset), true);
  // 0x04: pad4
  return buf;
}

export class TRUSTED_POSIX_OFFSET_INFOView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get Offset(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: pad4

  // 0x00: u32
  set Offset(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: pad4
}

/**
 * Windows.Win32.Security.Authentication.Identity.TRUSTED_PASSWORD_INFO (size: 16)
 */
export interface TRUSTED_PASSWORD_INFO {
  /** Windows.Win32.Foundation.UNICODE_STRING */
  Password: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.Foundation.UNICODE_STRING */
  OldPassword: Uint8Array | Deno.PointerValue;
}

export const sizeofTRUSTED_PASSWORD_INFO = 16;

export function allocTRUSTED_PASSWORD_INFO(data?: Partial<TRUSTED_PASSWORD_INFO>): Uint8Array {
  const buf = new Uint8Array(sizeofTRUSTED_PASSWORD_INFO);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.Password !== undefined) view.setBigUint64(0, data.Password === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.Password))), true);
  // 0x08: pointer
  if (data?.OldPassword !== undefined) view.setBigUint64(8, data.OldPassword === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.OldPassword))), true);
  return buf;
}

export class TRUSTED_PASSWORD_INFOView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get Password(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(0, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x08: pointer
  get OldPassword(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: pointer
  set Password(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(0, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x08: pointer
  set OldPassword(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.Security.Authentication.Identity.TRUSTED_DOMAIN_INFORMATION_EX (size: 40)
 */
export interface TRUSTED_DOMAIN_INFORMATION_EX {
  /** Windows.Win32.Foundation.UNICODE_STRING */
  Name: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.Foundation.UNICODE_STRING */
  FlatName: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.Foundation.PSID */
  Sid: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.Security.Authentication.Identity.TRUSTED_DOMAIN_TRUST_DIRECTION */
  TrustDirection: TRUSTED_DOMAIN_TRUST_DIRECTION;
  /** Windows.Win32.Security.Authentication.Identity.TRUSTED_DOMAIN_TRUST_TYPE */
  TrustType: TRUSTED_DOMAIN_TRUST_TYPE;
  /** Windows.Win32.Security.Authentication.Identity.TRUSTED_DOMAIN_TRUST_ATTRIBUTES */
  TrustAttributes: TRUSTED_DOMAIN_TRUST_ATTRIBUTES;
}

export const sizeofTRUSTED_DOMAIN_INFORMATION_EX = 40;

export function allocTRUSTED_DOMAIN_INFORMATION_EX(data?: Partial<TRUSTED_DOMAIN_INFORMATION_EX>): Uint8Array {
  const buf = new Uint8Array(sizeofTRUSTED_DOMAIN_INFORMATION_EX);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.Name !== undefined) view.setBigUint64(0, data.Name === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.Name))), true);
  // 0x08: pointer
  if (data?.FlatName !== undefined) view.setBigUint64(8, data.FlatName === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.FlatName))), true);
  // 0x10: pointer
  if (data?.Sid !== undefined) view.setBigUint64(16, data.Sid === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.Sid))), true);
  // 0x18: u32
  if (data?.TrustDirection !== undefined) view.setUint32(24, Number(data.TrustDirection), true);
  // 0x1c: u32
  if (data?.TrustType !== undefined) view.setUint32(28, Number(data.TrustType), true);
  // 0x20: u32
  if (data?.TrustAttributes !== undefined) view.setUint32(32, Number(data.TrustAttributes), true);
  // 0x24: pad4
  return buf;
}

export class TRUSTED_DOMAIN_INFORMATION_EXView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get Name(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(0, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x08: pointer
  get FlatName(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x10: pointer
  get Sid(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(16, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x18: u32
  get TrustDirection(): number {
    return this.view.getUint32(24, true);
  }

  // 0x1c: u32
  get TrustType(): number {
    return this.view.getUint32(28, true);
  }

  // 0x20: u32
  get TrustAttributes(): number {
    return this.view.getUint32(32, true);
  }

  // 0x24: pad4

  // 0x00: pointer
  set Name(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(0, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x08: pointer
  set FlatName(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x10: pointer
  set Sid(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(16, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x18: u32
  set TrustDirection(value: number) {
    this.view.setUint32(24, value, true);
  }

  // 0x1c: u32
  set TrustType(value: number) {
    this.view.setUint32(28, value, true);
  }

  // 0x20: u32
  set TrustAttributes(value: number) {
    this.view.setUint32(32, value, true);
  }

  // 0x24: pad4
}

/**
 * Windows.Win32.Security.Authentication.Identity.TRUSTED_DOMAIN_INFORMATION_EX2 (size: 48)
 */
export interface TRUSTED_DOMAIN_INFORMATION_EX2 {
  /** Windows.Win32.Foundation.UNICODE_STRING */
  Name: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.Foundation.UNICODE_STRING */
  FlatName: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.Foundation.PSID */
  Sid: Uint8Array | Deno.PointerValue;
  /** u32 */
  TrustDirection: number;
  /** u32 */
  TrustType: number;
  /** u32 */
  TrustAttributes: number;
  /** u32 */
  ForestTrustLength: number;
  /** ptr */
  ForestTrustInfo: Deno.PointerValue | Uint8Array;
}

export const sizeofTRUSTED_DOMAIN_INFORMATION_EX2 = 48;

export function allocTRUSTED_DOMAIN_INFORMATION_EX2(data?: Partial<TRUSTED_DOMAIN_INFORMATION_EX2>): Uint8Array {
  const buf = new Uint8Array(sizeofTRUSTED_DOMAIN_INFORMATION_EX2);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.Name !== undefined) view.setBigUint64(0, data.Name === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.Name))), true);
  // 0x08: pointer
  if (data?.FlatName !== undefined) view.setBigUint64(8, data.FlatName === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.FlatName))), true);
  // 0x10: pointer
  if (data?.Sid !== undefined) view.setBigUint64(16, data.Sid === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.Sid))), true);
  // 0x18: u32
  if (data?.TrustDirection !== undefined) view.setUint32(24, Number(data.TrustDirection), true);
  // 0x1c: u32
  if (data?.TrustType !== undefined) view.setUint32(28, Number(data.TrustType), true);
  // 0x20: u32
  if (data?.TrustAttributes !== undefined) view.setUint32(32, Number(data.TrustAttributes), true);
  // 0x24: u32
  if (data?.ForestTrustLength !== undefined) view.setUint32(36, Number(data.ForestTrustLength), true);
  // 0x28: pointer
  if (data?.ForestTrustInfo !== undefined) view.setBigUint64(40, data.ForestTrustInfo === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.ForestTrustInfo))), true);
  return buf;
}

export class TRUSTED_DOMAIN_INFORMATION_EX2View {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get Name(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(0, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x08: pointer
  get FlatName(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x10: pointer
  get Sid(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(16, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x18: u32
  get TrustDirection(): number {
    return this.view.getUint32(24, true);
  }

  // 0x1c: u32
  get TrustType(): number {
    return this.view.getUint32(28, true);
  }

  // 0x20: u32
  get TrustAttributes(): number {
    return this.view.getUint32(32, true);
  }

  // 0x24: u32
  get ForestTrustLength(): number {
    return this.view.getUint32(36, true);
  }

  // 0x28: pointer
  get ForestTrustInfo(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(40, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: pointer
  set Name(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(0, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x08: pointer
  set FlatName(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x10: pointer
  set Sid(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(16, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x18: u32
  set TrustDirection(value: number) {
    this.view.setUint32(24, value, true);
  }

  // 0x1c: u32
  set TrustType(value: number) {
    this.view.setUint32(28, value, true);
  }

  // 0x20: u32
  set TrustAttributes(value: number) {
    this.view.setUint32(32, value, true);
  }

  // 0x24: u32
  set ForestTrustLength(value: number) {
    this.view.setUint32(36, value, true);
  }

  // 0x28: pointer
  set ForestTrustInfo(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(40, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.Security.Authentication.Identity.LSA_AUTH_INFORMATION (size: 24)
 */
export interface LSA_AUTH_INFORMATION {
  /** Windows.Win32.Foundation.LARGE_INTEGER */
  LastUpdateTime: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.Security.Authentication.Identity.LSA_AUTH_INFORMATION_AUTH_TYPE */
  AuthType: LSA_AUTH_INFORMATION_AUTH_TYPE;
  /** u32 */
  AuthInfoLength: number;
  /** ptr */
  AuthInfo: Deno.PointerValue | Uint8Array;
}

export const sizeofLSA_AUTH_INFORMATION = 24;

export function allocLSA_AUTH_INFORMATION(data?: Partial<LSA_AUTH_INFORMATION>): Uint8Array {
  const buf = new Uint8Array(sizeofLSA_AUTH_INFORMATION);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.LastUpdateTime !== undefined) view.setBigUint64(0, data.LastUpdateTime === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.LastUpdateTime))), true);
  // 0x08: u32
  if (data?.AuthType !== undefined) view.setUint32(8, Number(data.AuthType), true);
  // 0x0c: u32
  if (data?.AuthInfoLength !== undefined) view.setUint32(12, Number(data.AuthInfoLength), true);
  // 0x10: pointer
  if (data?.AuthInfo !== undefined) view.setBigUint64(16, data.AuthInfo === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.AuthInfo))), true);
  return buf;
}

export class LSA_AUTH_INFORMATIONView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get LastUpdateTime(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(0, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x08: u32
  get AuthType(): number {
    return this.view.getUint32(8, true);
  }

  // 0x0c: u32
  get AuthInfoLength(): number {
    return this.view.getUint32(12, true);
  }

  // 0x10: pointer
  get AuthInfo(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(16, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: pointer
  set LastUpdateTime(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(0, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x08: u32
  set AuthType(value: number) {
    this.view.setUint32(8, value, true);
  }

  // 0x0c: u32
  set AuthInfoLength(value: number) {
    this.view.setUint32(12, value, true);
  }

  // 0x10: pointer
  set AuthInfo(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(16, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.Security.Authentication.Identity.TRUSTED_DOMAIN_AUTH_INFORMATION (size: 48)
 */
export interface TRUSTED_DOMAIN_AUTH_INFORMATION {
  /** u32 */
  IncomingAuthInfos: number;
  /** ptr */
  IncomingAuthenticationInformation: Deno.PointerValue | Uint8Array;
  /** ptr */
  IncomingPreviousAuthenticationInformation: Deno.PointerValue | Uint8Array;
  /** u32 */
  OutgoingAuthInfos: number;
  /** ptr */
  OutgoingAuthenticationInformation: Deno.PointerValue | Uint8Array;
  /** ptr */
  OutgoingPreviousAuthenticationInformation: Deno.PointerValue | Uint8Array;
}

export const sizeofTRUSTED_DOMAIN_AUTH_INFORMATION = 48;

export function allocTRUSTED_DOMAIN_AUTH_INFORMATION(data?: Partial<TRUSTED_DOMAIN_AUTH_INFORMATION>): Uint8Array {
  const buf = new Uint8Array(sizeofTRUSTED_DOMAIN_AUTH_INFORMATION);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.IncomingAuthInfos !== undefined) view.setUint32(0, Number(data.IncomingAuthInfos), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.IncomingAuthenticationInformation !== undefined) view.setBigUint64(8, data.IncomingAuthenticationInformation === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.IncomingAuthenticationInformation))), true);
  // 0x10: pointer
  if (data?.IncomingPreviousAuthenticationInformation !== undefined) view.setBigUint64(16, data.IncomingPreviousAuthenticationInformation === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.IncomingPreviousAuthenticationInformation))), true);
  // 0x18: u32
  if (data?.OutgoingAuthInfos !== undefined) view.setUint32(24, Number(data.OutgoingAuthInfos), true);
  // 0x1c: pad4
  // 0x20: pointer
  if (data?.OutgoingAuthenticationInformation !== undefined) view.setBigUint64(32, data.OutgoingAuthenticationInformation === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.OutgoingAuthenticationInformation))), true);
  // 0x28: pointer
  if (data?.OutgoingPreviousAuthenticationInformation !== undefined) view.setBigUint64(40, data.OutgoingPreviousAuthenticationInformation === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.OutgoingPreviousAuthenticationInformation))), true);
  return buf;
}

export class TRUSTED_DOMAIN_AUTH_INFORMATIONView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get IncomingAuthInfos(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  get IncomingAuthenticationInformation(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x10: pointer
  get IncomingPreviousAuthenticationInformation(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(16, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x18: u32
  get OutgoingAuthInfos(): number {
    return this.view.getUint32(24, true);
  }

  // 0x1c: pad4

  // 0x20: pointer
  get OutgoingAuthenticationInformation(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(32, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x28: pointer
  get OutgoingPreviousAuthenticationInformation(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(40, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: u32
  set IncomingAuthInfos(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  set IncomingAuthenticationInformation(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x10: pointer
  set IncomingPreviousAuthenticationInformation(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(16, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x18: u32
  set OutgoingAuthInfos(value: number) {
    this.view.setUint32(24, value, true);
  }

  // 0x1c: pad4

  // 0x20: pointer
  set OutgoingAuthenticationInformation(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(32, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x28: pointer
  set OutgoingPreviousAuthenticationInformation(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(40, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.Security.Authentication.Identity.TRUSTED_DOMAIN_FULL_INFORMATION (size: 24)
 */
export interface TRUSTED_DOMAIN_FULL_INFORMATION {
  /** Windows.Win32.Security.Authentication.Identity.TRUSTED_DOMAIN_INFORMATION_EX */
  Information: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.Security.Authentication.Identity.TRUSTED_POSIX_OFFSET_INFO */
  PosixOffset: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.Security.Authentication.Identity.TRUSTED_DOMAIN_AUTH_INFORMATION */
  AuthInformation: Uint8Array | Deno.PointerValue;
}

export const sizeofTRUSTED_DOMAIN_FULL_INFORMATION = 24;

export function allocTRUSTED_DOMAIN_FULL_INFORMATION(data?: Partial<TRUSTED_DOMAIN_FULL_INFORMATION>): Uint8Array {
  const buf = new Uint8Array(sizeofTRUSTED_DOMAIN_FULL_INFORMATION);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.Information !== undefined) view.setBigUint64(0, data.Information === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.Information))), true);
  // 0x08: pointer
  if (data?.PosixOffset !== undefined) view.setBigUint64(8, data.PosixOffset === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.PosixOffset))), true);
  // 0x10: pointer
  if (data?.AuthInformation !== undefined) view.setBigUint64(16, data.AuthInformation === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.AuthInformation))), true);
  return buf;
}

export class TRUSTED_DOMAIN_FULL_INFORMATIONView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get Information(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(0, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x08: pointer
  get PosixOffset(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x10: pointer
  get AuthInformation(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(16, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: pointer
  set Information(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(0, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x08: pointer
  set PosixOffset(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x10: pointer
  set AuthInformation(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(16, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.Security.Authentication.Identity.TRUSTED_DOMAIN_FULL_INFORMATION2 (size: 24)
 */
export interface TRUSTED_DOMAIN_FULL_INFORMATION2 {
  /** Windows.Win32.Security.Authentication.Identity.TRUSTED_DOMAIN_INFORMATION_EX2 */
  Information: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.Security.Authentication.Identity.TRUSTED_POSIX_OFFSET_INFO */
  PosixOffset: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.Security.Authentication.Identity.TRUSTED_DOMAIN_AUTH_INFORMATION */
  AuthInformation: Uint8Array | Deno.PointerValue;
}

export const sizeofTRUSTED_DOMAIN_FULL_INFORMATION2 = 24;

export function allocTRUSTED_DOMAIN_FULL_INFORMATION2(data?: Partial<TRUSTED_DOMAIN_FULL_INFORMATION2>): Uint8Array {
  const buf = new Uint8Array(sizeofTRUSTED_DOMAIN_FULL_INFORMATION2);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.Information !== undefined) view.setBigUint64(0, data.Information === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.Information))), true);
  // 0x08: pointer
  if (data?.PosixOffset !== undefined) view.setBigUint64(8, data.PosixOffset === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.PosixOffset))), true);
  // 0x10: pointer
  if (data?.AuthInformation !== undefined) view.setBigUint64(16, data.AuthInformation === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.AuthInformation))), true);
  return buf;
}

export class TRUSTED_DOMAIN_FULL_INFORMATION2View {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get Information(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(0, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x08: pointer
  get PosixOffset(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x10: pointer
  get AuthInformation(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(16, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: pointer
  set Information(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(0, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x08: pointer
  set PosixOffset(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x10: pointer
  set AuthInformation(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(16, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.Security.Authentication.Identity.TRUSTED_DOMAIN_SUPPORTED_ENCRYPTION_TYPES (size: 8)
 */
export interface TRUSTED_DOMAIN_SUPPORTED_ENCRYPTION_TYPES {
  /** u32 */
  SupportedEncryptionTypes: number;
}

export const sizeofTRUSTED_DOMAIN_SUPPORTED_ENCRYPTION_TYPES = 8;

export function allocTRUSTED_DOMAIN_SUPPORTED_ENCRYPTION_TYPES(data?: Partial<TRUSTED_DOMAIN_SUPPORTED_ENCRYPTION_TYPES>): Uint8Array {
  const buf = new Uint8Array(sizeofTRUSTED_DOMAIN_SUPPORTED_ENCRYPTION_TYPES);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.SupportedEncryptionTypes !== undefined) view.setUint32(0, Number(data.SupportedEncryptionTypes), true);
  // 0x04: pad4
  return buf;
}

export class TRUSTED_DOMAIN_SUPPORTED_ENCRYPTION_TYPESView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get SupportedEncryptionTypes(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: pad4

  // 0x00: u32
  set SupportedEncryptionTypes(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: pad4
}

/**
 * Windows.Win32.Security.Authentication.Identity.LSA_FOREST_TRUST_DOMAIN_INFO (size: 24)
 */
export interface LSA_FOREST_TRUST_DOMAIN_INFO {
  /** Windows.Win32.Foundation.PSID */
  Sid: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.Foundation.UNICODE_STRING */
  DnsName: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.Foundation.UNICODE_STRING */
  NetbiosName: Uint8Array | Deno.PointerValue;
}

export const sizeofLSA_FOREST_TRUST_DOMAIN_INFO = 24;

export function allocLSA_FOREST_TRUST_DOMAIN_INFO(data?: Partial<LSA_FOREST_TRUST_DOMAIN_INFO>): Uint8Array {
  const buf = new Uint8Array(sizeofLSA_FOREST_TRUST_DOMAIN_INFO);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.Sid !== undefined) view.setBigUint64(0, data.Sid === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.Sid))), true);
  // 0x08: pointer
  if (data?.DnsName !== undefined) view.setBigUint64(8, data.DnsName === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.DnsName))), true);
  // 0x10: pointer
  if (data?.NetbiosName !== undefined) view.setBigUint64(16, data.NetbiosName === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.NetbiosName))), true);
  return buf;
}

export class LSA_FOREST_TRUST_DOMAIN_INFOView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get Sid(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(0, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x08: pointer
  get DnsName(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x10: pointer
  get NetbiosName(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(16, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: pointer
  set Sid(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(0, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x08: pointer
  set DnsName(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x10: pointer
  set NetbiosName(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(16, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.Security.Authentication.Identity.LSA_FOREST_TRUST_BINARY_DATA (size: 16)
 */
export interface LSA_FOREST_TRUST_BINARY_DATA {
  /** u32 */
  Length: number;
  /** ptr */
  Buffer: Deno.PointerValue | Uint8Array;
}

export const sizeofLSA_FOREST_TRUST_BINARY_DATA = 16;

export function allocLSA_FOREST_TRUST_BINARY_DATA(data?: Partial<LSA_FOREST_TRUST_BINARY_DATA>): Uint8Array {
  const buf = new Uint8Array(sizeofLSA_FOREST_TRUST_BINARY_DATA);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.Length !== undefined) view.setUint32(0, Number(data.Length), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.Buffer !== undefined) view.setBigUint64(8, data.Buffer === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.Buffer))), true);
  return buf;
}

export class LSA_FOREST_TRUST_BINARY_DATAView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get Length(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  get Buffer(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: u32
  set Length(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  set Buffer(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * _ForestTrustData_e__Union (size: 24)
 */
export interface _ForestTrustData_e__Union {
  /** Windows.Win32.Foundation.UNICODE_STRING */
  TopLevelName: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.Security.Authentication.Identity.LSA_FOREST_TRUST_DOMAIN_INFO */
  DomainInfo: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.Security.Authentication.Identity.LSA_FOREST_TRUST_BINARY_DATA */
  Data: Uint8Array | Deno.PointerValue;
}

export const sizeof_ForestTrustData_e__Union = 24;

export function alloc_ForestTrustData_e__Union(data?: Partial<_ForestTrustData_e__Union>): Uint8Array {
  const buf = new Uint8Array(sizeof_ForestTrustData_e__Union);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.TopLevelName !== undefined) view.setBigUint64(0, data.TopLevelName === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.TopLevelName))), true);
  // 0x08: pointer
  if (data?.DomainInfo !== undefined) view.setBigUint64(8, data.DomainInfo === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.DomainInfo))), true);
  // 0x10: pointer
  if (data?.Data !== undefined) view.setBigUint64(16, data.Data === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.Data))), true);
  return buf;
}

export class _ForestTrustData_e__UnionView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get TopLevelName(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(0, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x08: pointer
  get DomainInfo(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x10: pointer
  get Data(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(16, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: pointer
  set TopLevelName(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(0, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x08: pointer
  set DomainInfo(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x10: pointer
  set Data(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(16, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.Security.Authentication.Identity.LSA_FOREST_TRUST_RECORD (size: 24)
 */
export interface LSA_FOREST_TRUST_RECORD {
  /** u32 */
  Flags: number;
  /** Windows.Win32.Security.Authentication.Identity.LSA_FOREST_TRUST_RECORD_TYPE */
  ForestTrustType: LSA_FOREST_TRUST_RECORD_TYPE;
  /** Windows.Win32.Foundation.LARGE_INTEGER */
  Time: Uint8Array | Deno.PointerValue;
  /** _ForestTrustData_e__Union */
  ForestTrustData: Uint8Array | Deno.PointerValue;
}

export const sizeofLSA_FOREST_TRUST_RECORD = 24;

export function allocLSA_FOREST_TRUST_RECORD(data?: Partial<LSA_FOREST_TRUST_RECORD>): Uint8Array {
  const buf = new Uint8Array(sizeofLSA_FOREST_TRUST_RECORD);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.Flags !== undefined) view.setUint32(0, Number(data.Flags), true);
  // 0x04: i32
  if (data?.ForestTrustType !== undefined) view.setInt32(4, Number(data.ForestTrustType), true);
  // 0x08: pointer
  if (data?.Time !== undefined) view.setBigUint64(8, data.Time === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.Time))), true);
  // 0x10: pointer
  if (data?.ForestTrustData !== undefined) view.setBigUint64(16, data.ForestTrustData === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.ForestTrustData))), true);
  return buf;
}

export class LSA_FOREST_TRUST_RECORDView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get Flags(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: i32
  get ForestTrustType(): number {
    return this.view.getInt32(4, true);
  }

  // 0x08: pointer
  get Time(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x10: pointer
  get ForestTrustData(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(16, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: u32
  set Flags(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: i32
  set ForestTrustType(value: number) {
    this.view.setInt32(4, value, true);
  }

  // 0x08: pointer
  set Time(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x10: pointer
  set ForestTrustData(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(16, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.Security.Authentication.Identity.LSA_FOREST_TRUST_INFORMATION (size: 16)
 */
export interface LSA_FOREST_TRUST_INFORMATION {
  /** u32 */
  RecordCount: number;
  /** ptr */
  Entries: Deno.PointerValue | Uint8Array;
}

export const sizeofLSA_FOREST_TRUST_INFORMATION = 16;

export function allocLSA_FOREST_TRUST_INFORMATION(data?: Partial<LSA_FOREST_TRUST_INFORMATION>): Uint8Array {
  const buf = new Uint8Array(sizeofLSA_FOREST_TRUST_INFORMATION);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.RecordCount !== undefined) view.setUint32(0, Number(data.RecordCount), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.Entries !== undefined) view.setBigUint64(8, data.Entries === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.Entries))), true);
  return buf;
}

export class LSA_FOREST_TRUST_INFORMATIONView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get RecordCount(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  get Entries(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: u32
  set RecordCount(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  set Entries(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.Security.Authentication.Identity.LSA_FOREST_TRUST_COLLISION_RECORD (size: 24)
 */
export interface LSA_FOREST_TRUST_COLLISION_RECORD {
  /** u32 */
  Index: number;
  /** Windows.Win32.Security.Authentication.Identity.LSA_FOREST_TRUST_COLLISION_RECORD_TYPE */
  Type: LSA_FOREST_TRUST_COLLISION_RECORD_TYPE;
  /** u32 */
  Flags: number;
  /** Windows.Win32.Foundation.UNICODE_STRING */
  Name: Uint8Array | Deno.PointerValue;
}

export const sizeofLSA_FOREST_TRUST_COLLISION_RECORD = 24;

export function allocLSA_FOREST_TRUST_COLLISION_RECORD(data?: Partial<LSA_FOREST_TRUST_COLLISION_RECORD>): Uint8Array {
  const buf = new Uint8Array(sizeofLSA_FOREST_TRUST_COLLISION_RECORD);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.Index !== undefined) view.setUint32(0, Number(data.Index), true);
  // 0x04: i32
  if (data?.Type !== undefined) view.setInt32(4, Number(data.Type), true);
  // 0x08: u32
  if (data?.Flags !== undefined) view.setUint32(8, Number(data.Flags), true);
  // 0x0c: pad4
  // 0x10: pointer
  if (data?.Name !== undefined) view.setBigUint64(16, data.Name === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.Name))), true);
  return buf;
}

export class LSA_FOREST_TRUST_COLLISION_RECORDView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get Index(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: i32
  get Type(): number {
    return this.view.getInt32(4, true);
  }

  // 0x08: u32
  get Flags(): number {
    return this.view.getUint32(8, true);
  }

  // 0x0c: pad4

  // 0x10: pointer
  get Name(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(16, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: u32
  set Index(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: i32
  set Type(value: number) {
    this.view.setInt32(4, value, true);
  }

  // 0x08: u32
  set Flags(value: number) {
    this.view.setUint32(8, value, true);
  }

  // 0x0c: pad4

  // 0x10: pointer
  set Name(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(16, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.Security.Authentication.Identity.LSA_FOREST_TRUST_COLLISION_INFORMATION (size: 16)
 */
export interface LSA_FOREST_TRUST_COLLISION_INFORMATION {
  /** u32 */
  RecordCount: number;
  /** ptr */
  Entries: Deno.PointerValue | Uint8Array;
}

export const sizeofLSA_FOREST_TRUST_COLLISION_INFORMATION = 16;

export function allocLSA_FOREST_TRUST_COLLISION_INFORMATION(data?: Partial<LSA_FOREST_TRUST_COLLISION_INFORMATION>): Uint8Array {
  const buf = new Uint8Array(sizeofLSA_FOREST_TRUST_COLLISION_INFORMATION);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.RecordCount !== undefined) view.setUint32(0, Number(data.RecordCount), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.Entries !== undefined) view.setBigUint64(8, data.Entries === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.Entries))), true);
  return buf;
}

export class LSA_FOREST_TRUST_COLLISION_INFORMATIONView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get RecordCount(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  get Entries(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: u32
  set RecordCount(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  set Entries(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.Security.Authentication.Identity.LSA_ENUMERATION_INFORMATION (size: 8)
 */
export interface LSA_ENUMERATION_INFORMATION {
  /** Windows.Win32.Foundation.PSID */
  Sid: Uint8Array | Deno.PointerValue;
}

export const sizeofLSA_ENUMERATION_INFORMATION = 8;

export function allocLSA_ENUMERATION_INFORMATION(data?: Partial<LSA_ENUMERATION_INFORMATION>): Uint8Array {
  const buf = new Uint8Array(sizeofLSA_ENUMERATION_INFORMATION);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.Sid !== undefined) view.setBigUint64(0, data.Sid === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.Sid))), true);
  return buf;
}

export class LSA_ENUMERATION_INFORMATIONView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get Sid(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(0, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: pointer
  set Sid(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(0, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.Security.Authentication.Identity.LSA_LAST_INTER_LOGON_INFO (size: 24)
 */
export interface LSA_LAST_INTER_LOGON_INFO {
  /** Windows.Win32.Foundation.LARGE_INTEGER */
  LastSuccessfulLogon: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.Foundation.LARGE_INTEGER */
  LastFailedLogon: Uint8Array | Deno.PointerValue;
  /** u32 */
  FailedAttemptCountSinceLastSuccessfulLogon: number;
}

export const sizeofLSA_LAST_INTER_LOGON_INFO = 24;

export function allocLSA_LAST_INTER_LOGON_INFO(data?: Partial<LSA_LAST_INTER_LOGON_INFO>): Uint8Array {
  const buf = new Uint8Array(sizeofLSA_LAST_INTER_LOGON_INFO);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.LastSuccessfulLogon !== undefined) view.setBigUint64(0, data.LastSuccessfulLogon === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.LastSuccessfulLogon))), true);
  // 0x08: pointer
  if (data?.LastFailedLogon !== undefined) view.setBigUint64(8, data.LastFailedLogon === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.LastFailedLogon))), true);
  // 0x10: u32
  if (data?.FailedAttemptCountSinceLastSuccessfulLogon !== undefined) view.setUint32(16, Number(data.FailedAttemptCountSinceLastSuccessfulLogon), true);
  // 0x14: pad4
  return buf;
}

export class LSA_LAST_INTER_LOGON_INFOView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get LastSuccessfulLogon(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(0, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x08: pointer
  get LastFailedLogon(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x10: u32
  get FailedAttemptCountSinceLastSuccessfulLogon(): number {
    return this.view.getUint32(16, true);
  }

  // 0x14: pad4

  // 0x00: pointer
  set LastSuccessfulLogon(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(0, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x08: pointer
  set LastFailedLogon(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x10: u32
  set FailedAttemptCountSinceLastSuccessfulLogon(value: number) {
    this.view.setUint32(16, value, true);
  }

  // 0x14: pad4
}

/**
 * Windows.Win32.Foundation.LUID (size: 8)
 */
export interface LUID {
  /** u32 */
  LowPart: number;
  /** i32 */
  HighPart: number;
}

export const sizeofLUID = 8;

export function allocLUID(data?: Partial<LUID>): Uint8Array {
  const buf = new Uint8Array(sizeofLUID);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.LowPart !== undefined) view.setUint32(0, Number(data.LowPart), true);
  // 0x04: i32
  if (data?.HighPart !== undefined) view.setInt32(4, Number(data.HighPart), true);
  return buf;
}

export class LUIDView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get LowPart(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: i32
  get HighPart(): number {
    return this.view.getInt32(4, true);
  }

  // 0x00: u32
  set LowPart(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: i32
  set HighPart(value: number) {
    this.view.setInt32(4, value, true);
  }
}

/**
 * Windows.Win32.Security.Authentication.Identity.SECURITY_LOGON_SESSION_DATA (size: 176)
 */
export interface SECURITY_LOGON_SESSION_DATA {
  /** u32 */
  Size: number;
  /** Windows.Win32.Foundation.LUID */
  LogonId: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.Foundation.UNICODE_STRING */
  UserName: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.Foundation.UNICODE_STRING */
  LogonDomain: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.Foundation.UNICODE_STRING */
  AuthenticationPackage: Uint8Array | Deno.PointerValue;
  /** u32 */
  LogonType: number;
  /** u32 */
  Session: number;
  /** Windows.Win32.Foundation.PSID */
  Sid: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.Foundation.LARGE_INTEGER */
  LogonTime: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.Foundation.UNICODE_STRING */
  LogonServer: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.Foundation.UNICODE_STRING */
  DnsDomainName: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.Foundation.UNICODE_STRING */
  Upn: Uint8Array | Deno.PointerValue;
  /** u32 */
  UserFlags: number;
  /** Windows.Win32.Security.Authentication.Identity.LSA_LAST_INTER_LOGON_INFO */
  LastLogonInfo: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.Foundation.UNICODE_STRING */
  LogonScript: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.Foundation.UNICODE_STRING */
  ProfilePath: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.Foundation.UNICODE_STRING */
  HomeDirectory: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.Foundation.UNICODE_STRING */
  HomeDirectoryDrive: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.Foundation.LARGE_INTEGER */
  LogoffTime: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.Foundation.LARGE_INTEGER */
  KickOffTime: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.Foundation.LARGE_INTEGER */
  PasswordLastSet: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.Foundation.LARGE_INTEGER */
  PasswordCanChange: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.Foundation.LARGE_INTEGER */
  PasswordMustChange: Uint8Array | Deno.PointerValue;
}

export const sizeofSECURITY_LOGON_SESSION_DATA = 176;

export function allocSECURITY_LOGON_SESSION_DATA(data?: Partial<SECURITY_LOGON_SESSION_DATA>): Uint8Array {
  const buf = new Uint8Array(sizeofSECURITY_LOGON_SESSION_DATA);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.Size !== undefined) view.setUint32(0, Number(data.Size), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.LogonId !== undefined) view.setBigUint64(8, data.LogonId === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.LogonId))), true);
  // 0x10: pointer
  if (data?.UserName !== undefined) view.setBigUint64(16, data.UserName === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.UserName))), true);
  // 0x18: pointer
  if (data?.LogonDomain !== undefined) view.setBigUint64(24, data.LogonDomain === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.LogonDomain))), true);
  // 0x20: pointer
  if (data?.AuthenticationPackage !== undefined) view.setBigUint64(32, data.AuthenticationPackage === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.AuthenticationPackage))), true);
  // 0x28: u32
  if (data?.LogonType !== undefined) view.setUint32(40, Number(data.LogonType), true);
  // 0x2c: u32
  if (data?.Session !== undefined) view.setUint32(44, Number(data.Session), true);
  // 0x30: pointer
  if (data?.Sid !== undefined) view.setBigUint64(48, data.Sid === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.Sid))), true);
  // 0x38: pointer
  if (data?.LogonTime !== undefined) view.setBigUint64(56, data.LogonTime === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.LogonTime))), true);
  // 0x40: pointer
  if (data?.LogonServer !== undefined) view.setBigUint64(64, data.LogonServer === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.LogonServer))), true);
  // 0x48: pointer
  if (data?.DnsDomainName !== undefined) view.setBigUint64(72, data.DnsDomainName === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.DnsDomainName))), true);
  // 0x50: pointer
  if (data?.Upn !== undefined) view.setBigUint64(80, data.Upn === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.Upn))), true);
  // 0x58: u32
  if (data?.UserFlags !== undefined) view.setUint32(88, Number(data.UserFlags), true);
  // 0x5c: pad4
  // 0x60: pointer
  if (data?.LastLogonInfo !== undefined) view.setBigUint64(96, data.LastLogonInfo === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.LastLogonInfo))), true);
  // 0x68: pointer
  if (data?.LogonScript !== undefined) view.setBigUint64(104, data.LogonScript === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.LogonScript))), true);
  // 0x70: pointer
  if (data?.ProfilePath !== undefined) view.setBigUint64(112, data.ProfilePath === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.ProfilePath))), true);
  // 0x78: pointer
  if (data?.HomeDirectory !== undefined) view.setBigUint64(120, data.HomeDirectory === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.HomeDirectory))), true);
  // 0x80: pointer
  if (data?.HomeDirectoryDrive !== undefined) view.setBigUint64(128, data.HomeDirectoryDrive === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.HomeDirectoryDrive))), true);
  // 0x88: pointer
  if (data?.LogoffTime !== undefined) view.setBigUint64(136, data.LogoffTime === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.LogoffTime))), true);
  // 0x90: pointer
  if (data?.KickOffTime !== undefined) view.setBigUint64(144, data.KickOffTime === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.KickOffTime))), true);
  // 0x98: pointer
  if (data?.PasswordLastSet !== undefined) view.setBigUint64(152, data.PasswordLastSet === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.PasswordLastSet))), true);
  // 0xa0: pointer
  if (data?.PasswordCanChange !== undefined) view.setBigUint64(160, data.PasswordCanChange === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.PasswordCanChange))), true);
  // 0xa8: pointer
  if (data?.PasswordMustChange !== undefined) view.setBigUint64(168, data.PasswordMustChange === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.PasswordMustChange))), true);
  return buf;
}

export class SECURITY_LOGON_SESSION_DATAView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get Size(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  get LogonId(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x10: pointer
  get UserName(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(16, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x18: pointer
  get LogonDomain(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(24, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x20: pointer
  get AuthenticationPackage(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(32, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x28: u32
  get LogonType(): number {
    return this.view.getUint32(40, true);
  }

  // 0x2c: u32
  get Session(): number {
    return this.view.getUint32(44, true);
  }

  // 0x30: pointer
  get Sid(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(48, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x38: pointer
  get LogonTime(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(56, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x40: pointer
  get LogonServer(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(64, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x48: pointer
  get DnsDomainName(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(72, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x50: pointer
  get Upn(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(80, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x58: u32
  get UserFlags(): number {
    return this.view.getUint32(88, true);
  }

  // 0x5c: pad4

  // 0x60: pointer
  get LastLogonInfo(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(96, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x68: pointer
  get LogonScript(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(104, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x70: pointer
  get ProfilePath(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(112, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x78: pointer
  get HomeDirectory(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(120, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x80: pointer
  get HomeDirectoryDrive(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(128, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x88: pointer
  get LogoffTime(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(136, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x90: pointer
  get KickOffTime(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(144, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x98: pointer
  get PasswordLastSet(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(152, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0xa0: pointer
  get PasswordCanChange(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(160, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0xa8: pointer
  get PasswordMustChange(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(168, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: u32
  set Size(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  set LogonId(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x10: pointer
  set UserName(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(16, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x18: pointer
  set LogonDomain(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(24, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x20: pointer
  set AuthenticationPackage(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(32, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x28: u32
  set LogonType(value: number) {
    this.view.setUint32(40, value, true);
  }

  // 0x2c: u32
  set Session(value: number) {
    this.view.setUint32(44, value, true);
  }

  // 0x30: pointer
  set Sid(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(48, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x38: pointer
  set LogonTime(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(56, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x40: pointer
  set LogonServer(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(64, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x48: pointer
  set DnsDomainName(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(72, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x50: pointer
  set Upn(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(80, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x58: u32
  set UserFlags(value: number) {
    this.view.setUint32(88, value, true);
  }

  // 0x5c: pad4

  // 0x60: pointer
  set LastLogonInfo(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(96, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x68: pointer
  set LogonScript(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(104, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x70: pointer
  set ProfilePath(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(112, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x78: pointer
  set HomeDirectory(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(120, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x80: pointer
  set HomeDirectoryDrive(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(128, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x88: pointer
  set LogoffTime(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(136, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x90: pointer
  set KickOffTime(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(144, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x98: pointer
  set PasswordLastSet(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(152, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0xa0: pointer
  set PasswordCanChange(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(160, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0xa8: pointer
  set PasswordMustChange(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(168, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.Security.Authentication.Identity.CENTRAL_ACCESS_POLICY_ENTRY (size: 80)
 */
export interface CENTRAL_ACCESS_POLICY_ENTRY {
  /** Windows.Win32.Foundation.UNICODE_STRING */
  Name: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.Foundation.UNICODE_STRING */
  Description: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.Foundation.UNICODE_STRING */
  ChangeId: Uint8Array | Deno.PointerValue;
  /** u32 */
  LengthAppliesTo: number;
  /** ptr */
  AppliesTo: Deno.PointerValue | Uint8Array;
  /** u32 */
  LengthSD: number;
  /** Windows.Win32.Security.PSECURITY_DESCRIPTOR */
  SD: Uint8Array | Deno.PointerValue;
  /** u32 */
  LengthStagedSD: number;
  /** Windows.Win32.Security.PSECURITY_DESCRIPTOR */
  StagedSD: Uint8Array | Deno.PointerValue;
  /** u32 */
  Flags: number;
}

export const sizeofCENTRAL_ACCESS_POLICY_ENTRY = 80;

export function allocCENTRAL_ACCESS_POLICY_ENTRY(data?: Partial<CENTRAL_ACCESS_POLICY_ENTRY>): Uint8Array {
  const buf = new Uint8Array(sizeofCENTRAL_ACCESS_POLICY_ENTRY);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.Name !== undefined) view.setBigUint64(0, data.Name === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.Name))), true);
  // 0x08: pointer
  if (data?.Description !== undefined) view.setBigUint64(8, data.Description === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.Description))), true);
  // 0x10: pointer
  if (data?.ChangeId !== undefined) view.setBigUint64(16, data.ChangeId === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.ChangeId))), true);
  // 0x18: u32
  if (data?.LengthAppliesTo !== undefined) view.setUint32(24, Number(data.LengthAppliesTo), true);
  // 0x1c: pad4
  // 0x20: pointer
  if (data?.AppliesTo !== undefined) view.setBigUint64(32, data.AppliesTo === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.AppliesTo))), true);
  // 0x28: u32
  if (data?.LengthSD !== undefined) view.setUint32(40, Number(data.LengthSD), true);
  // 0x2c: pad4
  // 0x30: pointer
  if (data?.SD !== undefined) view.setBigUint64(48, data.SD === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.SD))), true);
  // 0x38: u32
  if (data?.LengthStagedSD !== undefined) view.setUint32(56, Number(data.LengthStagedSD), true);
  // 0x3c: pad4
  // 0x40: pointer
  if (data?.StagedSD !== undefined) view.setBigUint64(64, data.StagedSD === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.StagedSD))), true);
  // 0x48: u32
  if (data?.Flags !== undefined) view.setUint32(72, Number(data.Flags), true);
  // 0x4c: pad4
  return buf;
}

export class CENTRAL_ACCESS_POLICY_ENTRYView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get Name(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(0, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x08: pointer
  get Description(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x10: pointer
  get ChangeId(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(16, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x18: u32
  get LengthAppliesTo(): number {
    return this.view.getUint32(24, true);
  }

  // 0x1c: pad4

  // 0x20: pointer
  get AppliesTo(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(32, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x28: u32
  get LengthSD(): number {
    return this.view.getUint32(40, true);
  }

  // 0x2c: pad4

  // 0x30: pointer
  get SD(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(48, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x38: u32
  get LengthStagedSD(): number {
    return this.view.getUint32(56, true);
  }

  // 0x3c: pad4

  // 0x40: pointer
  get StagedSD(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(64, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x48: u32
  get Flags(): number {
    return this.view.getUint32(72, true);
  }

  // 0x4c: pad4

  // 0x00: pointer
  set Name(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(0, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x08: pointer
  set Description(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x10: pointer
  set ChangeId(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(16, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x18: u32
  set LengthAppliesTo(value: number) {
    this.view.setUint32(24, value, true);
  }

  // 0x1c: pad4

  // 0x20: pointer
  set AppliesTo(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(32, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x28: u32
  set LengthSD(value: number) {
    this.view.setUint32(40, value, true);
  }

  // 0x2c: pad4

  // 0x30: pointer
  set SD(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(48, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x38: u32
  set LengthStagedSD(value: number) {
    this.view.setUint32(56, value, true);
  }

  // 0x3c: pad4

  // 0x40: pointer
  set StagedSD(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(64, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x48: u32
  set Flags(value: number) {
    this.view.setUint32(72, value, true);
  }

  // 0x4c: pad4
}

/**
 * Windows.Win32.Security.Authentication.Identity.CENTRAL_ACCESS_POLICY (size: 48)
 */
export interface CENTRAL_ACCESS_POLICY {
  /** Windows.Win32.Foundation.PSID */
  CAPID: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.Foundation.UNICODE_STRING */
  Name: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.Foundation.UNICODE_STRING */
  Description: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.Foundation.UNICODE_STRING */
  ChangeId: Uint8Array | Deno.PointerValue;
  /** u32 */
  Flags: number;
  /** u32 */
  CAPECount: number;
  /** ptr */
  CAPEs: Deno.PointerValue | Uint8Array;
}

export const sizeofCENTRAL_ACCESS_POLICY = 48;

export function allocCENTRAL_ACCESS_POLICY(data?: Partial<CENTRAL_ACCESS_POLICY>): Uint8Array {
  const buf = new Uint8Array(sizeofCENTRAL_ACCESS_POLICY);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.CAPID !== undefined) view.setBigUint64(0, data.CAPID === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.CAPID))), true);
  // 0x08: pointer
  if (data?.Name !== undefined) view.setBigUint64(8, data.Name === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.Name))), true);
  // 0x10: pointer
  if (data?.Description !== undefined) view.setBigUint64(16, data.Description === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.Description))), true);
  // 0x18: pointer
  if (data?.ChangeId !== undefined) view.setBigUint64(24, data.ChangeId === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.ChangeId))), true);
  // 0x20: u32
  if (data?.Flags !== undefined) view.setUint32(32, Number(data.Flags), true);
  // 0x24: u32
  if (data?.CAPECount !== undefined) view.setUint32(36, Number(data.CAPECount), true);
  // 0x28: pointer
  if (data?.CAPEs !== undefined) view.setBigUint64(40, data.CAPEs === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.CAPEs))), true);
  return buf;
}

export class CENTRAL_ACCESS_POLICYView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get CAPID(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(0, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x08: pointer
  get Name(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x10: pointer
  get Description(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(16, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x18: pointer
  get ChangeId(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(24, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x20: u32
  get Flags(): number {
    return this.view.getUint32(32, true);
  }

  // 0x24: u32
  get CAPECount(): number {
    return this.view.getUint32(36, true);
  }

  // 0x28: pointer
  get CAPEs(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(40, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: pointer
  set CAPID(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(0, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x08: pointer
  set Name(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x10: pointer
  set Description(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(16, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x18: pointer
  set ChangeId(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(24, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x20: u32
  set Flags(value: number) {
    this.view.setUint32(32, value, true);
  }

  // 0x24: u32
  set CAPECount(value: number) {
    this.view.setUint32(36, value, true);
  }

  // 0x28: pointer
  set CAPEs(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(40, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.Security.Authentication.Identity.NEGOTIATE_PACKAGE_PREFIX (size: 40)
 */
export interface NEGOTIATE_PACKAGE_PREFIX {
  /** usize */
  PackageId: Deno.PointerValue;
  /** ptr */
  PackageDataA: Deno.PointerValue | Uint8Array;
  /** ptr */
  PackageDataW: Deno.PointerValue | Uint8Array;
  /** usize */
  PrefixLen: Deno.PointerValue;
  /** array */
  Prefix: Deno.PointerValue;
}

export const sizeofNEGOTIATE_PACKAGE_PREFIX = 40;

export function allocNEGOTIATE_PACKAGE_PREFIX(data?: Partial<NEGOTIATE_PACKAGE_PREFIX>): Uint8Array {
  const buf = new Uint8Array(sizeofNEGOTIATE_PACKAGE_PREFIX);
  const view = new DataView(buf.buffer);
  // 0x00: usize
  if (data?.PackageId !== undefined) view.setBigUint64(0, BigInt(data.PackageId), true);
  // 0x08: pointer
  if (data?.PackageDataA !== undefined) view.setBigUint64(8, data.PackageDataA === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.PackageDataA))), true);
  // 0x10: pointer
  if (data?.PackageDataW !== undefined) view.setBigUint64(16, data.PackageDataW === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.PackageDataW))), true);
  // 0x18: usize
  if (data?.PrefixLen !== undefined) view.setBigUint64(24, BigInt(data.PrefixLen), true);
  // 0x20: pointer
  if (data?.Prefix !== undefined) view.setBigUint64(32, data.Prefix === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.Prefix))), true);
  return buf;
}

export class NEGOTIATE_PACKAGE_PREFIXView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: usize
  get PackageId(): Deno.PointerValue {
    return Number(this.view.getBigUint64(0, true));
  }

  // 0x08: pointer
  get PackageDataA(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x10: pointer
  get PackageDataW(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(16, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x18: usize
  get PrefixLen(): Deno.PointerValue {
    return Number(this.view.getBigUint64(24, true));
  }

  // 0x20: pointer
  get Prefix(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(32, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: usize
  set PackageId(value: Deno.PointerValue) {
    this.view.setBigUint64(0, BigInt(value), true);
  }

  // 0x08: pointer
  set PackageDataA(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x10: pointer
  set PackageDataW(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(16, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x18: usize
  set PrefixLen(value: Deno.PointerValue) {
    this.view.setBigUint64(24, BigInt(value), true);
  }

  // 0x20: pointer
  set Prefix(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(32, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.Security.Authentication.Identity.NEGOTIATE_PACKAGE_PREFIXES (size: 16)
 */
export interface NEGOTIATE_PACKAGE_PREFIXES {
  /** u32 */
  MessageType: number;
  /** u32 */
  PrefixCount: number;
  /** u32 */
  Offset: number;
  /** u32 */
  Pad: number;
}

export const sizeofNEGOTIATE_PACKAGE_PREFIXES = 16;

export function allocNEGOTIATE_PACKAGE_PREFIXES(data?: Partial<NEGOTIATE_PACKAGE_PREFIXES>): Uint8Array {
  const buf = new Uint8Array(sizeofNEGOTIATE_PACKAGE_PREFIXES);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.MessageType !== undefined) view.setUint32(0, Number(data.MessageType), true);
  // 0x04: u32
  if (data?.PrefixCount !== undefined) view.setUint32(4, Number(data.PrefixCount), true);
  // 0x08: u32
  if (data?.Offset !== undefined) view.setUint32(8, Number(data.Offset), true);
  // 0x0c: u32
  if (data?.Pad !== undefined) view.setUint32(12, Number(data.Pad), true);
  return buf;
}

export class NEGOTIATE_PACKAGE_PREFIXESView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get MessageType(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: u32
  get PrefixCount(): number {
    return this.view.getUint32(4, true);
  }

  // 0x08: u32
  get Offset(): number {
    return this.view.getUint32(8, true);
  }

  // 0x0c: u32
  get Pad(): number {
    return this.view.getUint32(12, true);
  }

  // 0x00: u32
  set MessageType(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: u32
  set PrefixCount(value: number) {
    this.view.setUint32(4, value, true);
  }

  // 0x08: u32
  set Offset(value: number) {
    this.view.setUint32(8, value, true);
  }

  // 0x0c: u32
  set Pad(value: number) {
    this.view.setUint32(12, value, true);
  }
}

/**
 * Windows.Win32.Security.Authentication.Identity.NEGOTIATE_CALLER_NAME_REQUEST (size: 16)
 */
export interface NEGOTIATE_CALLER_NAME_REQUEST {
  /** u32 */
  MessageType: number;
  /** Windows.Win32.Foundation.LUID */
  LogonId: Uint8Array | Deno.PointerValue;
}

export const sizeofNEGOTIATE_CALLER_NAME_REQUEST = 16;

export function allocNEGOTIATE_CALLER_NAME_REQUEST(data?: Partial<NEGOTIATE_CALLER_NAME_REQUEST>): Uint8Array {
  const buf = new Uint8Array(sizeofNEGOTIATE_CALLER_NAME_REQUEST);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.MessageType !== undefined) view.setUint32(0, Number(data.MessageType), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.LogonId !== undefined) view.setBigUint64(8, data.LogonId === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.LogonId))), true);
  return buf;
}

export class NEGOTIATE_CALLER_NAME_REQUESTView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get MessageType(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  get LogonId(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: u32
  set MessageType(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  set LogonId(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.Security.Authentication.Identity.NEGOTIATE_CALLER_NAME_RESPONSE (size: 16)
 */
export interface NEGOTIATE_CALLER_NAME_RESPONSE {
  /** u32 */
  MessageType: number;
  /** Windows.Win32.Foundation.PWSTR */
  CallerName: string | null | Uint8Array | Uint16Array;
}

export const sizeofNEGOTIATE_CALLER_NAME_RESPONSE = 16;

export function allocNEGOTIATE_CALLER_NAME_RESPONSE(data?: Partial<NEGOTIATE_CALLER_NAME_RESPONSE>): Uint8Array {
  const buf = new Uint8Array(sizeofNEGOTIATE_CALLER_NAME_RESPONSE);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.MessageType !== undefined) view.setUint32(0, Number(data.MessageType), true);
  // 0x04: pad4
  // 0x08: buffer
  if (data?.CallerName !== undefined) {
    (buf as any)._f8 = util.pwstrToFfi(data.CallerName);
    view.setBigUint64(8, (buf as any)._f8 === null ? 0n : BigInt(Deno.UnsafePointer.value(Deno.UnsafePointer.of((buf as any)._f8))), true);
  }
  return buf;
}

export class NEGOTIATE_CALLER_NAME_RESPONSEView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get MessageType(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: pad4

  // 0x08: buffer
  get CallerName(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: u32
  set MessageType(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: pad4

  // 0x08: buffer
  set CallerName(value: Uint8Array | Deno.PointerValue) {
    (this.buf as any)._f8 = value;
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer((this.buf as any)._f8))), true);
  }
}

/**
 * Windows.Win32.Security.Authentication.Identity.DOMAIN_PASSWORD_INFORMATION (size: 24)
 */
export interface DOMAIN_PASSWORD_INFORMATION {
  /** u16 */
  MinPasswordLength: number;
  /** u16 */
  PasswordHistoryLength: number;
  /** Windows.Win32.Security.Authentication.Identity.DOMAIN_PASSWORD_PROPERTIES */
  PasswordProperties: DOMAIN_PASSWORD_PROPERTIES;
  /** Windows.Win32.Foundation.LARGE_INTEGER */
  MaxPasswordAge: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.Foundation.LARGE_INTEGER */
  MinPasswordAge: Uint8Array | Deno.PointerValue;
}

export const sizeofDOMAIN_PASSWORD_INFORMATION = 24;

export function allocDOMAIN_PASSWORD_INFORMATION(data?: Partial<DOMAIN_PASSWORD_INFORMATION>): Uint8Array {
  const buf = new Uint8Array(sizeofDOMAIN_PASSWORD_INFORMATION);
  const view = new DataView(buf.buffer);
  // 0x00: u16
  if (data?.MinPasswordLength !== undefined) view.setUint16(0, Number(data.MinPasswordLength), true);
  // 0x02: u16
  if (data?.PasswordHistoryLength !== undefined) view.setUint16(2, Number(data.PasswordHistoryLength), true);
  // 0x04: u32
  if (data?.PasswordProperties !== undefined) view.setUint32(4, Number(data.PasswordProperties), true);
  // 0x08: pointer
  if (data?.MaxPasswordAge !== undefined) view.setBigUint64(8, data.MaxPasswordAge === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.MaxPasswordAge))), true);
  // 0x10: pointer
  if (data?.MinPasswordAge !== undefined) view.setBigUint64(16, data.MinPasswordAge === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.MinPasswordAge))), true);
  return buf;
}

export class DOMAIN_PASSWORD_INFORMATIONView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u16
  get MinPasswordLength(): number {
    return this.view.getUint16(0, true);
  }

  // 0x02: u16
  get PasswordHistoryLength(): number {
    return this.view.getUint16(2, true);
  }

  // 0x04: u32
  get PasswordProperties(): number {
    return this.view.getUint32(4, true);
  }

  // 0x08: pointer
  get MaxPasswordAge(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x10: pointer
  get MinPasswordAge(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(16, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: u16
  set MinPasswordLength(value: number) {
    this.view.setUint16(0, value, true);
  }

  // 0x02: u16
  set PasswordHistoryLength(value: number) {
    this.view.setUint16(2, value, true);
  }

  // 0x04: u32
  set PasswordProperties(value: number) {
    this.view.setUint32(4, value, true);
  }

  // 0x08: pointer
  set MaxPasswordAge(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x10: pointer
  set MinPasswordAge(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(16, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.Security.Authentication.Identity.MSV1_0_INTERACTIVE_LOGON (size: 32)
 */
export interface MSV1_0_INTERACTIVE_LOGON {
  /** Windows.Win32.Security.Authentication.Identity.MSV1_0_LOGON_SUBMIT_TYPE */
  MessageType: MSV1_0_LOGON_SUBMIT_TYPE;
  /** Windows.Win32.Foundation.UNICODE_STRING */
  LogonDomainName: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.Foundation.UNICODE_STRING */
  UserName: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.Foundation.UNICODE_STRING */
  Password: Uint8Array | Deno.PointerValue;
}

export const sizeofMSV1_0_INTERACTIVE_LOGON = 32;

export function allocMSV1_0_INTERACTIVE_LOGON(data?: Partial<MSV1_0_INTERACTIVE_LOGON>): Uint8Array {
  const buf = new Uint8Array(sizeofMSV1_0_INTERACTIVE_LOGON);
  const view = new DataView(buf.buffer);
  // 0x00: i32
  if (data?.MessageType !== undefined) view.setInt32(0, Number(data.MessageType), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.LogonDomainName !== undefined) view.setBigUint64(8, data.LogonDomainName === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.LogonDomainName))), true);
  // 0x10: pointer
  if (data?.UserName !== undefined) view.setBigUint64(16, data.UserName === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.UserName))), true);
  // 0x18: pointer
  if (data?.Password !== undefined) view.setBigUint64(24, data.Password === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.Password))), true);
  return buf;
}

export class MSV1_0_INTERACTIVE_LOGONView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: i32
  get MessageType(): number {
    return this.view.getInt32(0, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  get LogonDomainName(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x10: pointer
  get UserName(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(16, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x18: pointer
  get Password(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(24, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: i32
  set MessageType(value: number) {
    this.view.setInt32(0, value, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  set LogonDomainName(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x10: pointer
  set UserName(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(16, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x18: pointer
  set Password(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(24, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.Security.Authentication.Identity.MSV1_0_INTERACTIVE_PROFILE (size: 112)
 */
export interface MSV1_0_INTERACTIVE_PROFILE {
  /** Windows.Win32.Security.Authentication.Identity.MSV1_0_PROFILE_BUFFER_TYPE */
  MessageType: MSV1_0_PROFILE_BUFFER_TYPE;
  /** u16 */
  LogonCount: number;
  /** u16 */
  BadPasswordCount: number;
  /** Windows.Win32.Foundation.LARGE_INTEGER */
  LogonTime: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.Foundation.LARGE_INTEGER */
  LogoffTime: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.Foundation.LARGE_INTEGER */
  KickOffTime: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.Foundation.LARGE_INTEGER */
  PasswordLastSet: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.Foundation.LARGE_INTEGER */
  PasswordCanChange: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.Foundation.LARGE_INTEGER */
  PasswordMustChange: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.Foundation.UNICODE_STRING */
  LogonScript: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.Foundation.UNICODE_STRING */
  HomeDirectory: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.Foundation.UNICODE_STRING */
  FullName: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.Foundation.UNICODE_STRING */
  ProfilePath: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.Foundation.UNICODE_STRING */
  HomeDirectoryDrive: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.Foundation.UNICODE_STRING */
  LogonServer: Uint8Array | Deno.PointerValue;
  /** u32 */
  UserFlags: number;
}

export const sizeofMSV1_0_INTERACTIVE_PROFILE = 112;

export function allocMSV1_0_INTERACTIVE_PROFILE(data?: Partial<MSV1_0_INTERACTIVE_PROFILE>): Uint8Array {
  const buf = new Uint8Array(sizeofMSV1_0_INTERACTIVE_PROFILE);
  const view = new DataView(buf.buffer);
  // 0x00: i32
  if (data?.MessageType !== undefined) view.setInt32(0, Number(data.MessageType), true);
  // 0x04: u16
  if (data?.LogonCount !== undefined) view.setUint16(4, Number(data.LogonCount), true);
  // 0x06: u16
  if (data?.BadPasswordCount !== undefined) view.setUint16(6, Number(data.BadPasswordCount), true);
  // 0x08: pointer
  if (data?.LogonTime !== undefined) view.setBigUint64(8, data.LogonTime === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.LogonTime))), true);
  // 0x10: pointer
  if (data?.LogoffTime !== undefined) view.setBigUint64(16, data.LogoffTime === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.LogoffTime))), true);
  // 0x18: pointer
  if (data?.KickOffTime !== undefined) view.setBigUint64(24, data.KickOffTime === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.KickOffTime))), true);
  // 0x20: pointer
  if (data?.PasswordLastSet !== undefined) view.setBigUint64(32, data.PasswordLastSet === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.PasswordLastSet))), true);
  // 0x28: pointer
  if (data?.PasswordCanChange !== undefined) view.setBigUint64(40, data.PasswordCanChange === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.PasswordCanChange))), true);
  // 0x30: pointer
  if (data?.PasswordMustChange !== undefined) view.setBigUint64(48, data.PasswordMustChange === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.PasswordMustChange))), true);
  // 0x38: pointer
  if (data?.LogonScript !== undefined) view.setBigUint64(56, data.LogonScript === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.LogonScript))), true);
  // 0x40: pointer
  if (data?.HomeDirectory !== undefined) view.setBigUint64(64, data.HomeDirectory === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.HomeDirectory))), true);
  // 0x48: pointer
  if (data?.FullName !== undefined) view.setBigUint64(72, data.FullName === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.FullName))), true);
  // 0x50: pointer
  if (data?.ProfilePath !== undefined) view.setBigUint64(80, data.ProfilePath === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.ProfilePath))), true);
  // 0x58: pointer
  if (data?.HomeDirectoryDrive !== undefined) view.setBigUint64(88, data.HomeDirectoryDrive === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.HomeDirectoryDrive))), true);
  // 0x60: pointer
  if (data?.LogonServer !== undefined) view.setBigUint64(96, data.LogonServer === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.LogonServer))), true);
  // 0x68: u32
  if (data?.UserFlags !== undefined) view.setUint32(104, Number(data.UserFlags), true);
  // 0x6c: pad4
  return buf;
}

export class MSV1_0_INTERACTIVE_PROFILEView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: i32
  get MessageType(): number {
    return this.view.getInt32(0, true);
  }

  // 0x04: u16
  get LogonCount(): number {
    return this.view.getUint16(4, true);
  }

  // 0x06: u16
  get BadPasswordCount(): number {
    return this.view.getUint16(6, true);
  }

  // 0x08: pointer
  get LogonTime(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x10: pointer
  get LogoffTime(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(16, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x18: pointer
  get KickOffTime(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(24, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x20: pointer
  get PasswordLastSet(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(32, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x28: pointer
  get PasswordCanChange(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(40, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x30: pointer
  get PasswordMustChange(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(48, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x38: pointer
  get LogonScript(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(56, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x40: pointer
  get HomeDirectory(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(64, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x48: pointer
  get FullName(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(72, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x50: pointer
  get ProfilePath(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(80, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x58: pointer
  get HomeDirectoryDrive(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(88, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x60: pointer
  get LogonServer(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(96, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x68: u32
  get UserFlags(): number {
    return this.view.getUint32(104, true);
  }

  // 0x6c: pad4

  // 0x00: i32
  set MessageType(value: number) {
    this.view.setInt32(0, value, true);
  }

  // 0x04: u16
  set LogonCount(value: number) {
    this.view.setUint16(4, value, true);
  }

  // 0x06: u16
  set BadPasswordCount(value: number) {
    this.view.setUint16(6, value, true);
  }

  // 0x08: pointer
  set LogonTime(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x10: pointer
  set LogoffTime(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(16, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x18: pointer
  set KickOffTime(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(24, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x20: pointer
  set PasswordLastSet(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(32, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x28: pointer
  set PasswordCanChange(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(40, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x30: pointer
  set PasswordMustChange(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(48, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x38: pointer
  set LogonScript(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(56, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x40: pointer
  set HomeDirectory(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(64, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x48: pointer
  set FullName(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(72, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x50: pointer
  set ProfilePath(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(80, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x58: pointer
  set HomeDirectoryDrive(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(88, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x60: pointer
  set LogonServer(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(96, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x68: u32
  set UserFlags(value: number) {
    this.view.setUint32(104, value, true);
  }

  // 0x6c: pad4
}

export type PSTR = Deno.PointerValue | Uint8Array;

/**
 * Windows.Win32.System.Kernel.STRING (size: 16)
 */
export interface STRING {
  /** u16 */
  Length: number;
  /** u16 */
  MaximumLength: number;
  /** Windows.Win32.Foundation.PSTR */
  Buffer: string | null | Uint8Array;
}

export const sizeofSTRING = 16;

export function allocSTRING(data?: Partial<STRING>): Uint8Array {
  const buf = new Uint8Array(sizeofSTRING);
  const view = new DataView(buf.buffer);
  // 0x00: u16
  if (data?.Length !== undefined) view.setUint16(0, Number(data.Length), true);
  // 0x02: u16
  if (data?.MaximumLength !== undefined) view.setUint16(2, Number(data.MaximumLength), true);
  // 0x04: pad4
  // 0x08: buffer
  if (data?.Buffer !== undefined) {
    (buf as any)._f8 = util.pstrToFfi(data.Buffer);
    view.setBigUint64(8, (buf as any)._f8 === null ? 0n : BigInt(Deno.UnsafePointer.value(Deno.UnsafePointer.of((buf as any)._f8))), true);
  }
  return buf;
}

export class STRINGView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u16
  get Length(): number {
    return this.view.getUint16(0, true);
  }

  // 0x02: u16
  get MaximumLength(): number {
    return this.view.getUint16(2, true);
  }

  // 0x04: pad4

  // 0x08: buffer
  get Buffer(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: u16
  set Length(value: number) {
    this.view.setUint16(0, value, true);
  }

  // 0x02: u16
  set MaximumLength(value: number) {
    this.view.setUint16(2, value, true);
  }

  // 0x04: pad4

  // 0x08: buffer
  set Buffer(value: Uint8Array | Deno.PointerValue) {
    (this.buf as any)._f8 = value;
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer((this.buf as any)._f8))), true);
  }
}

/**
 * Windows.Win32.Security.Authentication.Identity.MSV1_0_LM20_LOGON (size: 64)
 */
export interface MSV1_0_LM20_LOGON {
  /** Windows.Win32.Security.Authentication.Identity.MSV1_0_LOGON_SUBMIT_TYPE */
  MessageType: MSV1_0_LOGON_SUBMIT_TYPE;
  /** Windows.Win32.Foundation.UNICODE_STRING */
  LogonDomainName: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.Foundation.UNICODE_STRING */
  UserName: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.Foundation.UNICODE_STRING */
  Workstation: Uint8Array | Deno.PointerValue;
  /** array */
  ChallengeToClient: Deno.PointerValue;
  /** Windows.Win32.System.Kernel.STRING */
  CaseSensitiveChallengeResponse: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.System.Kernel.STRING */
  CaseInsensitiveChallengeResponse: Uint8Array | Deno.PointerValue;
  /** u32 */
  ParameterControl: number;
}

export const sizeofMSV1_0_LM20_LOGON = 64;

export function allocMSV1_0_LM20_LOGON(data?: Partial<MSV1_0_LM20_LOGON>): Uint8Array {
  const buf = new Uint8Array(sizeofMSV1_0_LM20_LOGON);
  const view = new DataView(buf.buffer);
  // 0x00: i32
  if (data?.MessageType !== undefined) view.setInt32(0, Number(data.MessageType), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.LogonDomainName !== undefined) view.setBigUint64(8, data.LogonDomainName === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.LogonDomainName))), true);
  // 0x10: pointer
  if (data?.UserName !== undefined) view.setBigUint64(16, data.UserName === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.UserName))), true);
  // 0x18: pointer
  if (data?.Workstation !== undefined) view.setBigUint64(24, data.Workstation === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.Workstation))), true);
  // 0x20: pointer
  if (data?.ChallengeToClient !== undefined) view.setBigUint64(32, data.ChallengeToClient === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.ChallengeToClient))), true);
  // 0x28: pointer
  if (data?.CaseSensitiveChallengeResponse !== undefined) view.setBigUint64(40, data.CaseSensitiveChallengeResponse === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.CaseSensitiveChallengeResponse))), true);
  // 0x30: pointer
  if (data?.CaseInsensitiveChallengeResponse !== undefined) view.setBigUint64(48, data.CaseInsensitiveChallengeResponse === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.CaseInsensitiveChallengeResponse))), true);
  // 0x38: u32
  if (data?.ParameterControl !== undefined) view.setUint32(56, Number(data.ParameterControl), true);
  // 0x3c: pad4
  return buf;
}

export class MSV1_0_LM20_LOGONView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: i32
  get MessageType(): number {
    return this.view.getInt32(0, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  get LogonDomainName(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x10: pointer
  get UserName(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(16, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x18: pointer
  get Workstation(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(24, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x20: pointer
  get ChallengeToClient(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(32, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x28: pointer
  get CaseSensitiveChallengeResponse(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(40, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x30: pointer
  get CaseInsensitiveChallengeResponse(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(48, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x38: u32
  get ParameterControl(): number {
    return this.view.getUint32(56, true);
  }

  // 0x3c: pad4

  // 0x00: i32
  set MessageType(value: number) {
    this.view.setInt32(0, value, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  set LogonDomainName(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x10: pointer
  set UserName(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(16, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x18: pointer
  set Workstation(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(24, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x20: pointer
  set ChallengeToClient(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(32, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x28: pointer
  set CaseSensitiveChallengeResponse(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(40, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x30: pointer
  set CaseInsensitiveChallengeResponse(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(48, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x38: u32
  set ParameterControl(value: number) {
    this.view.setUint32(56, value, true);
  }

  // 0x3c: pad4
}

/**
 * Windows.Win32.Security.Authentication.Identity.MSV1_0_SUBAUTH_LOGON (size: 64)
 */
export interface MSV1_0_SUBAUTH_LOGON {
  /** Windows.Win32.Security.Authentication.Identity.MSV1_0_LOGON_SUBMIT_TYPE */
  MessageType: MSV1_0_LOGON_SUBMIT_TYPE;
  /** Windows.Win32.Foundation.UNICODE_STRING */
  LogonDomainName: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.Foundation.UNICODE_STRING */
  UserName: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.Foundation.UNICODE_STRING */
  Workstation: Uint8Array | Deno.PointerValue;
  /** array */
  ChallengeToClient: Deno.PointerValue;
  /** Windows.Win32.System.Kernel.STRING */
  AuthenticationInfo1: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.System.Kernel.STRING */
  AuthenticationInfo2: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.Security.Authentication.Identity.MSV_SUBAUTH_LOGON_PARAMETER_CONTROL */
  ParameterControl: MSV_SUBAUTH_LOGON_PARAMETER_CONTROL;
  /** u32 */
  SubAuthPackageId: number;
}

export const sizeofMSV1_0_SUBAUTH_LOGON = 64;

export function allocMSV1_0_SUBAUTH_LOGON(data?: Partial<MSV1_0_SUBAUTH_LOGON>): Uint8Array {
  const buf = new Uint8Array(sizeofMSV1_0_SUBAUTH_LOGON);
  const view = new DataView(buf.buffer);
  // 0x00: i32
  if (data?.MessageType !== undefined) view.setInt32(0, Number(data.MessageType), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.LogonDomainName !== undefined) view.setBigUint64(8, data.LogonDomainName === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.LogonDomainName))), true);
  // 0x10: pointer
  if (data?.UserName !== undefined) view.setBigUint64(16, data.UserName === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.UserName))), true);
  // 0x18: pointer
  if (data?.Workstation !== undefined) view.setBigUint64(24, data.Workstation === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.Workstation))), true);
  // 0x20: pointer
  if (data?.ChallengeToClient !== undefined) view.setBigUint64(32, data.ChallengeToClient === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.ChallengeToClient))), true);
  // 0x28: pointer
  if (data?.AuthenticationInfo1 !== undefined) view.setBigUint64(40, data.AuthenticationInfo1 === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.AuthenticationInfo1))), true);
  // 0x30: pointer
  if (data?.AuthenticationInfo2 !== undefined) view.setBigUint64(48, data.AuthenticationInfo2 === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.AuthenticationInfo2))), true);
  // 0x38: u32
  if (data?.ParameterControl !== undefined) view.setUint32(56, Number(data.ParameterControl), true);
  // 0x3c: u32
  if (data?.SubAuthPackageId !== undefined) view.setUint32(60, Number(data.SubAuthPackageId), true);
  return buf;
}

export class MSV1_0_SUBAUTH_LOGONView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: i32
  get MessageType(): number {
    return this.view.getInt32(0, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  get LogonDomainName(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x10: pointer
  get UserName(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(16, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x18: pointer
  get Workstation(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(24, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x20: pointer
  get ChallengeToClient(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(32, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x28: pointer
  get AuthenticationInfo1(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(40, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x30: pointer
  get AuthenticationInfo2(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(48, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x38: u32
  get ParameterControl(): number {
    return this.view.getUint32(56, true);
  }

  // 0x3c: u32
  get SubAuthPackageId(): number {
    return this.view.getUint32(60, true);
  }

  // 0x00: i32
  set MessageType(value: number) {
    this.view.setInt32(0, value, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  set LogonDomainName(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x10: pointer
  set UserName(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(16, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x18: pointer
  set Workstation(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(24, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x20: pointer
  set ChallengeToClient(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(32, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x28: pointer
  set AuthenticationInfo1(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(40, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x30: pointer
  set AuthenticationInfo2(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(48, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x38: u32
  set ParameterControl(value: number) {
    this.view.setUint32(56, value, true);
  }

  // 0x3c: u32
  set SubAuthPackageId(value: number) {
    this.view.setUint32(60, value, true);
  }
}

/**
 * Windows.Win32.Security.Authentication.Identity.MSV1_0_S4U_LOGON (size: 24)
 */
export interface MSV1_0_S4U_LOGON {
  /** Windows.Win32.Security.Authentication.Identity.MSV1_0_LOGON_SUBMIT_TYPE */
  MessageType: MSV1_0_LOGON_SUBMIT_TYPE;
  /** u32 */
  Flags: number;
  /** Windows.Win32.Foundation.UNICODE_STRING */
  UserPrincipalName: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.Foundation.UNICODE_STRING */
  DomainName: Uint8Array | Deno.PointerValue;
}

export const sizeofMSV1_0_S4U_LOGON = 24;

export function allocMSV1_0_S4U_LOGON(data?: Partial<MSV1_0_S4U_LOGON>): Uint8Array {
  const buf = new Uint8Array(sizeofMSV1_0_S4U_LOGON);
  const view = new DataView(buf.buffer);
  // 0x00: i32
  if (data?.MessageType !== undefined) view.setInt32(0, Number(data.MessageType), true);
  // 0x04: u32
  if (data?.Flags !== undefined) view.setUint32(4, Number(data.Flags), true);
  // 0x08: pointer
  if (data?.UserPrincipalName !== undefined) view.setBigUint64(8, data.UserPrincipalName === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.UserPrincipalName))), true);
  // 0x10: pointer
  if (data?.DomainName !== undefined) view.setBigUint64(16, data.DomainName === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.DomainName))), true);
  return buf;
}

export class MSV1_0_S4U_LOGONView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: i32
  get MessageType(): number {
    return this.view.getInt32(0, true);
  }

  // 0x04: u32
  get Flags(): number {
    return this.view.getUint32(4, true);
  }

  // 0x08: pointer
  get UserPrincipalName(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x10: pointer
  get DomainName(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(16, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: i32
  set MessageType(value: number) {
    this.view.setInt32(0, value, true);
  }

  // 0x04: u32
  set Flags(value: number) {
    this.view.setUint32(4, value, true);
  }

  // 0x08: pointer
  set UserPrincipalName(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x10: pointer
  set DomainName(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(16, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.Security.Authentication.Identity.MSV1_0_LM20_LOGON_PROFILE (size: 72)
 */
export interface MSV1_0_LM20_LOGON_PROFILE {
  /** Windows.Win32.Security.Authentication.Identity.MSV1_0_PROFILE_BUFFER_TYPE */
  MessageType: MSV1_0_PROFILE_BUFFER_TYPE;
  /** Windows.Win32.Foundation.LARGE_INTEGER */
  KickOffTime: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.Foundation.LARGE_INTEGER */
  LogoffTime: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.Security.Authentication.Identity.MSV_SUB_AUTHENTICATION_FILTER */
  UserFlags: MSV_SUB_AUTHENTICATION_FILTER;
  /** array */
  UserSessionKey: Deno.PointerValue;
  /** Windows.Win32.Foundation.UNICODE_STRING */
  LogonDomainName: Uint8Array | Deno.PointerValue;
  /** array */
  LanmanSessionKey: Deno.PointerValue;
  /** Windows.Win32.Foundation.UNICODE_STRING */
  LogonServer: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.Foundation.UNICODE_STRING */
  UserParameters: Uint8Array | Deno.PointerValue;
}

export const sizeofMSV1_0_LM20_LOGON_PROFILE = 72;

export function allocMSV1_0_LM20_LOGON_PROFILE(data?: Partial<MSV1_0_LM20_LOGON_PROFILE>): Uint8Array {
  const buf = new Uint8Array(sizeofMSV1_0_LM20_LOGON_PROFILE);
  const view = new DataView(buf.buffer);
  // 0x00: i32
  if (data?.MessageType !== undefined) view.setInt32(0, Number(data.MessageType), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.KickOffTime !== undefined) view.setBigUint64(8, data.KickOffTime === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.KickOffTime))), true);
  // 0x10: pointer
  if (data?.LogoffTime !== undefined) view.setBigUint64(16, data.LogoffTime === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.LogoffTime))), true);
  // 0x18: u32
  if (data?.UserFlags !== undefined) view.setUint32(24, Number(data.UserFlags), true);
  // 0x1c: pad4
  // 0x20: pointer
  if (data?.UserSessionKey !== undefined) view.setBigUint64(32, data.UserSessionKey === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.UserSessionKey))), true);
  // 0x28: pointer
  if (data?.LogonDomainName !== undefined) view.setBigUint64(40, data.LogonDomainName === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.LogonDomainName))), true);
  // 0x30: pointer
  if (data?.LanmanSessionKey !== undefined) view.setBigUint64(48, data.LanmanSessionKey === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.LanmanSessionKey))), true);
  // 0x38: pointer
  if (data?.LogonServer !== undefined) view.setBigUint64(56, data.LogonServer === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.LogonServer))), true);
  // 0x40: pointer
  if (data?.UserParameters !== undefined) view.setBigUint64(64, data.UserParameters === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.UserParameters))), true);
  return buf;
}

export class MSV1_0_LM20_LOGON_PROFILEView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: i32
  get MessageType(): number {
    return this.view.getInt32(0, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  get KickOffTime(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x10: pointer
  get LogoffTime(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(16, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x18: u32
  get UserFlags(): number {
    return this.view.getUint32(24, true);
  }

  // 0x1c: pad4

  // 0x20: pointer
  get UserSessionKey(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(32, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x28: pointer
  get LogonDomainName(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(40, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x30: pointer
  get LanmanSessionKey(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(48, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x38: pointer
  get LogonServer(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(56, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x40: pointer
  get UserParameters(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(64, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: i32
  set MessageType(value: number) {
    this.view.setInt32(0, value, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  set KickOffTime(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x10: pointer
  set LogoffTime(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(16, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x18: u32
  set UserFlags(value: number) {
    this.view.setUint32(24, value, true);
  }

  // 0x1c: pad4

  // 0x20: pointer
  set UserSessionKey(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(32, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x28: pointer
  set LogonDomainName(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(40, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x30: pointer
  set LanmanSessionKey(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(48, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x38: pointer
  set LogonServer(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(56, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x40: pointer
  set UserParameters(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(64, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.Security.Authentication.Identity.MSV1_0_CREDENTIAL_KEY (size: 8)
 */
export interface MSV1_0_CREDENTIAL_KEY {
  /** array */
  Data: Deno.PointerValue;
}

export const sizeofMSV1_0_CREDENTIAL_KEY = 8;

export function allocMSV1_0_CREDENTIAL_KEY(data?: Partial<MSV1_0_CREDENTIAL_KEY>): Uint8Array {
  const buf = new Uint8Array(sizeofMSV1_0_CREDENTIAL_KEY);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.Data !== undefined) view.setBigUint64(0, data.Data === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.Data))), true);
  return buf;
}

export class MSV1_0_CREDENTIAL_KEYView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get Data(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(0, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: pointer
  set Data(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(0, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.Security.Authentication.Identity.MSV1_0_SUPPLEMENTAL_CREDENTIAL (size: 24)
 */
export interface MSV1_0_SUPPLEMENTAL_CREDENTIAL {
  /** u32 */
  Version: number;
  /** Windows.Win32.Security.Authentication.Identity.MSV_SUPPLEMENTAL_CREDENTIAL_FLAGS */
  Flags: MSV_SUPPLEMENTAL_CREDENTIAL_FLAGS;
  /** array */
  LmPassword: Deno.PointerValue;
  /** array */
  NtPassword: Deno.PointerValue;
}

export const sizeofMSV1_0_SUPPLEMENTAL_CREDENTIAL = 24;

export function allocMSV1_0_SUPPLEMENTAL_CREDENTIAL(data?: Partial<MSV1_0_SUPPLEMENTAL_CREDENTIAL>): Uint8Array {
  const buf = new Uint8Array(sizeofMSV1_0_SUPPLEMENTAL_CREDENTIAL);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.Version !== undefined) view.setUint32(0, Number(data.Version), true);
  // 0x04: u32
  if (data?.Flags !== undefined) view.setUint32(4, Number(data.Flags), true);
  // 0x08: pointer
  if (data?.LmPassword !== undefined) view.setBigUint64(8, data.LmPassword === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.LmPassword))), true);
  // 0x10: pointer
  if (data?.NtPassword !== undefined) view.setBigUint64(16, data.NtPassword === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.NtPassword))), true);
  return buf;
}

export class MSV1_0_SUPPLEMENTAL_CREDENTIALView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get Version(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: u32
  get Flags(): number {
    return this.view.getUint32(4, true);
  }

  // 0x08: pointer
  get LmPassword(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x10: pointer
  get NtPassword(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(16, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: u32
  set Version(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: u32
  set Flags(value: number) {
    this.view.setUint32(4, value, true);
  }

  // 0x08: pointer
  set LmPassword(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x10: pointer
  set NtPassword(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(16, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.Security.Authentication.Identity.MSV1_0_SUPPLEMENTAL_CREDENTIAL_V2 (size: 24)
 */
export interface MSV1_0_SUPPLEMENTAL_CREDENTIAL_V2 {
  /** u32 */
  Version: number;
  /** u32 */
  Flags: number;
  /** array */
  NtPassword: Deno.PointerValue;
  /** Windows.Win32.Security.Authentication.Identity.MSV1_0_CREDENTIAL_KEY */
  CredentialKey: Uint8Array | Deno.PointerValue;
}

export const sizeofMSV1_0_SUPPLEMENTAL_CREDENTIAL_V2 = 24;

export function allocMSV1_0_SUPPLEMENTAL_CREDENTIAL_V2(data?: Partial<MSV1_0_SUPPLEMENTAL_CREDENTIAL_V2>): Uint8Array {
  const buf = new Uint8Array(sizeofMSV1_0_SUPPLEMENTAL_CREDENTIAL_V2);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.Version !== undefined) view.setUint32(0, Number(data.Version), true);
  // 0x04: u32
  if (data?.Flags !== undefined) view.setUint32(4, Number(data.Flags), true);
  // 0x08: pointer
  if (data?.NtPassword !== undefined) view.setBigUint64(8, data.NtPassword === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.NtPassword))), true);
  // 0x10: pointer
  if (data?.CredentialKey !== undefined) view.setBigUint64(16, data.CredentialKey === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.CredentialKey))), true);
  return buf;
}

export class MSV1_0_SUPPLEMENTAL_CREDENTIAL_V2View {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get Version(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: u32
  get Flags(): number {
    return this.view.getUint32(4, true);
  }

  // 0x08: pointer
  get NtPassword(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x10: pointer
  get CredentialKey(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(16, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: u32
  set Version(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: u32
  set Flags(value: number) {
    this.view.setUint32(4, value, true);
  }

  // 0x08: pointer
  set NtPassword(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x10: pointer
  set CredentialKey(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(16, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.Security.Authentication.Identity.MSV1_0_SUPPLEMENTAL_CREDENTIAL_V3 (size: 40)
 */
export interface MSV1_0_SUPPLEMENTAL_CREDENTIAL_V3 {
  /** u32 */
  Version: number;
  /** u32 */
  Flags: number;
  /** Windows.Win32.Security.Authentication.Identity.MSV1_0_CREDENTIAL_KEY_TYPE */
  CredentialKeyType: MSV1_0_CREDENTIAL_KEY_TYPE;
  /** array */
  NtPassword: Deno.PointerValue;
  /** Windows.Win32.Security.Authentication.Identity.MSV1_0_CREDENTIAL_KEY */
  CredentialKey: Uint8Array | Deno.PointerValue;
  /** array */
  ShaPassword: Deno.PointerValue;
}

export const sizeofMSV1_0_SUPPLEMENTAL_CREDENTIAL_V3 = 40;

export function allocMSV1_0_SUPPLEMENTAL_CREDENTIAL_V3(data?: Partial<MSV1_0_SUPPLEMENTAL_CREDENTIAL_V3>): Uint8Array {
  const buf = new Uint8Array(sizeofMSV1_0_SUPPLEMENTAL_CREDENTIAL_V3);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.Version !== undefined) view.setUint32(0, Number(data.Version), true);
  // 0x04: u32
  if (data?.Flags !== undefined) view.setUint32(4, Number(data.Flags), true);
  // 0x08: i32
  if (data?.CredentialKeyType !== undefined) view.setInt32(8, Number(data.CredentialKeyType), true);
  // 0x0c: pad4
  // 0x10: pointer
  if (data?.NtPassword !== undefined) view.setBigUint64(16, data.NtPassword === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.NtPassword))), true);
  // 0x18: pointer
  if (data?.CredentialKey !== undefined) view.setBigUint64(24, data.CredentialKey === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.CredentialKey))), true);
  // 0x20: pointer
  if (data?.ShaPassword !== undefined) view.setBigUint64(32, data.ShaPassword === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.ShaPassword))), true);
  return buf;
}

export class MSV1_0_SUPPLEMENTAL_CREDENTIAL_V3View {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get Version(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: u32
  get Flags(): number {
    return this.view.getUint32(4, true);
  }

  // 0x08: i32
  get CredentialKeyType(): number {
    return this.view.getInt32(8, true);
  }

  // 0x0c: pad4

  // 0x10: pointer
  get NtPassword(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(16, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x18: pointer
  get CredentialKey(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(24, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x20: pointer
  get ShaPassword(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(32, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: u32
  set Version(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: u32
  set Flags(value: number) {
    this.view.setUint32(4, value, true);
  }

  // 0x08: i32
  set CredentialKeyType(value: number) {
    this.view.setInt32(8, value, true);
  }

  // 0x0c: pad4

  // 0x10: pointer
  set NtPassword(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(16, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x18: pointer
  set CredentialKey(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(24, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x20: pointer
  set ShaPassword(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(32, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.Security.Authentication.Identity.MSV1_0_IUM_SUPPLEMENTAL_CREDENTIAL (size: 16)
 */
export interface MSV1_0_IUM_SUPPLEMENTAL_CREDENTIAL {
  /** u32 */
  Version: number;
  /** u32 */
  EncryptedCredsSize: number;
  /** array */
  EncryptedCreds: Deno.PointerValue;
}

export const sizeofMSV1_0_IUM_SUPPLEMENTAL_CREDENTIAL = 16;

export function allocMSV1_0_IUM_SUPPLEMENTAL_CREDENTIAL(data?: Partial<MSV1_0_IUM_SUPPLEMENTAL_CREDENTIAL>): Uint8Array {
  const buf = new Uint8Array(sizeofMSV1_0_IUM_SUPPLEMENTAL_CREDENTIAL);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.Version !== undefined) view.setUint32(0, Number(data.Version), true);
  // 0x04: u32
  if (data?.EncryptedCredsSize !== undefined) view.setUint32(4, Number(data.EncryptedCredsSize), true);
  // 0x08: pointer
  if (data?.EncryptedCreds !== undefined) view.setBigUint64(8, data.EncryptedCreds === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.EncryptedCreds))), true);
  return buf;
}

export class MSV1_0_IUM_SUPPLEMENTAL_CREDENTIALView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get Version(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: u32
  get EncryptedCredsSize(): number {
    return this.view.getUint32(4, true);
  }

  // 0x08: pointer
  get EncryptedCreds(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: u32
  set Version(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: u32
  set EncryptedCredsSize(value: number) {
    this.view.setUint32(4, value, true);
  }

  // 0x08: pointer
  set EncryptedCreds(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.Security.Authentication.Identity.MSV1_0_REMOTE_SUPPLEMENTAL_CREDENTIAL (size: 32)
 */
export interface MSV1_0_REMOTE_SUPPLEMENTAL_CREDENTIAL {
  /** u32 */
  Version: number;
  /** u32 */
  Flags: number;
  /** Windows.Win32.Security.Authentication.Identity.MSV1_0_CREDENTIAL_KEY */
  CredentialKey: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.Security.Authentication.Identity.MSV1_0_CREDENTIAL_KEY_TYPE */
  CredentialKeyType: MSV1_0_CREDENTIAL_KEY_TYPE;
  /** u32 */
  EncryptedCredsSize: number;
  /** array */
  EncryptedCreds: Deno.PointerValue;
}

export const sizeofMSV1_0_REMOTE_SUPPLEMENTAL_CREDENTIAL = 32;

export function allocMSV1_0_REMOTE_SUPPLEMENTAL_CREDENTIAL(data?: Partial<MSV1_0_REMOTE_SUPPLEMENTAL_CREDENTIAL>): Uint8Array {
  const buf = new Uint8Array(sizeofMSV1_0_REMOTE_SUPPLEMENTAL_CREDENTIAL);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.Version !== undefined) view.setUint32(0, Number(data.Version), true);
  // 0x04: u32
  if (data?.Flags !== undefined) view.setUint32(4, Number(data.Flags), true);
  // 0x08: pointer
  if (data?.CredentialKey !== undefined) view.setBigUint64(8, data.CredentialKey === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.CredentialKey))), true);
  // 0x10: i32
  if (data?.CredentialKeyType !== undefined) view.setInt32(16, Number(data.CredentialKeyType), true);
  // 0x14: u32
  if (data?.EncryptedCredsSize !== undefined) view.setUint32(20, Number(data.EncryptedCredsSize), true);
  // 0x18: pointer
  if (data?.EncryptedCreds !== undefined) view.setBigUint64(24, data.EncryptedCreds === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.EncryptedCreds))), true);
  return buf;
}

export class MSV1_0_REMOTE_SUPPLEMENTAL_CREDENTIALView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get Version(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: u32
  get Flags(): number {
    return this.view.getUint32(4, true);
  }

  // 0x08: pointer
  get CredentialKey(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x10: i32
  get CredentialKeyType(): number {
    return this.view.getInt32(16, true);
  }

  // 0x14: u32
  get EncryptedCredsSize(): number {
    return this.view.getUint32(20, true);
  }

  // 0x18: pointer
  get EncryptedCreds(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(24, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: u32
  set Version(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: u32
  set Flags(value: number) {
    this.view.setUint32(4, value, true);
  }

  // 0x08: pointer
  set CredentialKey(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x10: i32
  set CredentialKeyType(value: number) {
    this.view.setInt32(16, value, true);
  }

  // 0x14: u32
  set EncryptedCredsSize(value: number) {
    this.view.setUint32(20, value, true);
  }

  // 0x18: pointer
  set EncryptedCreds(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(24, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.Security.Authentication.Identity.MSV1_0_NTLM3_RESPONSE (size: 48)
 */
export interface MSV1_0_NTLM3_RESPONSE {
  /** array */
  Response: Deno.PointerValue;
  /** u8 */
  RespType: number;
  /** u8 */
  HiRespType: number;
  /** u16 */
  Flags: number;
  /** u32 */
  MsgWord: number;
  /** u64 */
  TimeStamp: Deno.PointerValue;
  /** array */
  ChallengeFromClient: Deno.PointerValue;
  /** u32 */
  AvPairsOff: number;
  /** array */
  Buffer: Deno.PointerValue;
}

export const sizeofMSV1_0_NTLM3_RESPONSE = 48;

export function allocMSV1_0_NTLM3_RESPONSE(data?: Partial<MSV1_0_NTLM3_RESPONSE>): Uint8Array {
  const buf = new Uint8Array(sizeofMSV1_0_NTLM3_RESPONSE);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.Response !== undefined) view.setBigUint64(0, data.Response === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.Response))), true);
  // 0x08: u8
  if (data?.RespType !== undefined) view.setUint8(8, Number(data.RespType));
  // 0x09: u8
  if (data?.HiRespType !== undefined) view.setUint8(9, Number(data.HiRespType));
  // 0x0a: u16
  if (data?.Flags !== undefined) view.setUint16(10, Number(data.Flags), true);
  // 0x0c: u32
  if (data?.MsgWord !== undefined) view.setUint32(12, Number(data.MsgWord), true);
  // 0x10: u64
  if (data?.TimeStamp !== undefined) view.setBigUint64(16, BigInt(data.TimeStamp), true);
  // 0x18: pointer
  if (data?.ChallengeFromClient !== undefined) view.setBigUint64(24, data.ChallengeFromClient === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.ChallengeFromClient))), true);
  // 0x20: u32
  if (data?.AvPairsOff !== undefined) view.setUint32(32, Number(data.AvPairsOff), true);
  // 0x24: pad4
  // 0x28: pointer
  if (data?.Buffer !== undefined) view.setBigUint64(40, data.Buffer === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.Buffer))), true);
  return buf;
}

export class MSV1_0_NTLM3_RESPONSEView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get Response(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(0, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x08: u8
  get RespType(): number {
    return this.view.getUint8(8);
  }

  // 0x09: u8
  get HiRespType(): number {
    return this.view.getUint8(9);
  }

  // 0x0a: u16
  get Flags(): number {
    return this.view.getUint16(10, true);
  }

  // 0x0c: u32
  get MsgWord(): number {
    return this.view.getUint32(12, true);
  }

  // 0x10: u64
  get TimeStamp(): Deno.PointerValue {
    return Number(this.view.getBigUint64(16, true));
  }

  // 0x18: pointer
  get ChallengeFromClient(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(24, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x20: u32
  get AvPairsOff(): number {
    return this.view.getUint32(32, true);
  }

  // 0x24: pad4

  // 0x28: pointer
  get Buffer(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(40, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: pointer
  set Response(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(0, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x08: u8
  set RespType(value: number) {
    this.view.setUint8(8, value);
  }

  // 0x09: u8
  set HiRespType(value: number) {
    this.view.setUint8(9, value);
  }

  // 0x0a: u16
  set Flags(value: number) {
    this.view.setUint16(10, value, true);
  }

  // 0x0c: u32
  set MsgWord(value: number) {
    this.view.setUint32(12, value, true);
  }

  // 0x10: u64
  set TimeStamp(value: Deno.PointerValue) {
    this.view.setBigUint64(16, BigInt(value), true);
  }

  // 0x18: pointer
  set ChallengeFromClient(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(24, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x20: u32
  set AvPairsOff(value: number) {
    this.view.setUint32(32, value, true);
  }

  // 0x24: pad4

  // 0x28: pointer
  set Buffer(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(40, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.Security.Authentication.Identity.MSV1_0_AV_PAIR (size: 8)
 */
export interface MSV1_0_AV_PAIR {
  /** u16 */
  AvId: number;
  /** u16 */
  AvLen: number;
}

export const sizeofMSV1_0_AV_PAIR = 8;

export function allocMSV1_0_AV_PAIR(data?: Partial<MSV1_0_AV_PAIR>): Uint8Array {
  const buf = new Uint8Array(sizeofMSV1_0_AV_PAIR);
  const view = new DataView(buf.buffer);
  // 0x00: u16
  if (data?.AvId !== undefined) view.setUint16(0, Number(data.AvId), true);
  // 0x02: u16
  if (data?.AvLen !== undefined) view.setUint16(2, Number(data.AvLen), true);
  // 0x04: pad4
  return buf;
}

export class MSV1_0_AV_PAIRView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u16
  get AvId(): number {
    return this.view.getUint16(0, true);
  }

  // 0x02: u16
  get AvLen(): number {
    return this.view.getUint16(2, true);
  }

  // 0x04: pad4

  // 0x00: u16
  set AvId(value: number) {
    this.view.setUint16(0, value, true);
  }

  // 0x02: u16
  set AvLen(value: number) {
    this.view.setUint16(2, value, true);
  }

  // 0x04: pad4
}

/**
 * Windows.Win32.Security.Authentication.Identity.MSV1_0_CHANGEPASSWORD_REQUEST (size: 48)
 */
export interface MSV1_0_CHANGEPASSWORD_REQUEST {
  /** Windows.Win32.Security.Authentication.Identity.MSV1_0_PROTOCOL_MESSAGE_TYPE */
  MessageType: MSV1_0_PROTOCOL_MESSAGE_TYPE;
  /** Windows.Win32.Foundation.UNICODE_STRING */
  DomainName: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.Foundation.UNICODE_STRING */
  AccountName: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.Foundation.UNICODE_STRING */
  OldPassword: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.Foundation.UNICODE_STRING */
  NewPassword: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.Foundation.BOOLEAN */
  Impersonating: Uint8Array | Deno.PointerValue;
}

export const sizeofMSV1_0_CHANGEPASSWORD_REQUEST = 48;

export function allocMSV1_0_CHANGEPASSWORD_REQUEST(data?: Partial<MSV1_0_CHANGEPASSWORD_REQUEST>): Uint8Array {
  const buf = new Uint8Array(sizeofMSV1_0_CHANGEPASSWORD_REQUEST);
  const view = new DataView(buf.buffer);
  // 0x00: i32
  if (data?.MessageType !== undefined) view.setInt32(0, Number(data.MessageType), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.DomainName !== undefined) view.setBigUint64(8, data.DomainName === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.DomainName))), true);
  // 0x10: pointer
  if (data?.AccountName !== undefined) view.setBigUint64(16, data.AccountName === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.AccountName))), true);
  // 0x18: pointer
  if (data?.OldPassword !== undefined) view.setBigUint64(24, data.OldPassword === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.OldPassword))), true);
  // 0x20: pointer
  if (data?.NewPassword !== undefined) view.setBigUint64(32, data.NewPassword === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.NewPassword))), true);
  // 0x28: pointer
  if (data?.Impersonating !== undefined) view.setBigUint64(40, data.Impersonating === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.Impersonating))), true);
  return buf;
}

export class MSV1_0_CHANGEPASSWORD_REQUESTView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: i32
  get MessageType(): number {
    return this.view.getInt32(0, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  get DomainName(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x10: pointer
  get AccountName(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(16, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x18: pointer
  get OldPassword(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(24, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x20: pointer
  get NewPassword(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(32, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x28: pointer
  get Impersonating(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(40, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: i32
  set MessageType(value: number) {
    this.view.setInt32(0, value, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  set DomainName(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x10: pointer
  set AccountName(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(16, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x18: pointer
  set OldPassword(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(24, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x20: pointer
  set NewPassword(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(32, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x28: pointer
  set Impersonating(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(40, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.Security.Authentication.Identity.MSV1_0_CHANGEPASSWORD_RESPONSE (size: 24)
 */
export interface MSV1_0_CHANGEPASSWORD_RESPONSE {
  /** Windows.Win32.Security.Authentication.Identity.MSV1_0_PROTOCOL_MESSAGE_TYPE */
  MessageType: MSV1_0_PROTOCOL_MESSAGE_TYPE;
  /** Windows.Win32.Foundation.BOOLEAN */
  PasswordInfoValid: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.Security.Authentication.Identity.DOMAIN_PASSWORD_INFORMATION */
  DomainPasswordInfo: Uint8Array | Deno.PointerValue;
}

export const sizeofMSV1_0_CHANGEPASSWORD_RESPONSE = 24;

export function allocMSV1_0_CHANGEPASSWORD_RESPONSE(data?: Partial<MSV1_0_CHANGEPASSWORD_RESPONSE>): Uint8Array {
  const buf = new Uint8Array(sizeofMSV1_0_CHANGEPASSWORD_RESPONSE);
  const view = new DataView(buf.buffer);
  // 0x00: i32
  if (data?.MessageType !== undefined) view.setInt32(0, Number(data.MessageType), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.PasswordInfoValid !== undefined) view.setBigUint64(8, data.PasswordInfoValid === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.PasswordInfoValid))), true);
  // 0x10: pointer
  if (data?.DomainPasswordInfo !== undefined) view.setBigUint64(16, data.DomainPasswordInfo === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.DomainPasswordInfo))), true);
  return buf;
}

export class MSV1_0_CHANGEPASSWORD_RESPONSEView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: i32
  get MessageType(): number {
    return this.view.getInt32(0, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  get PasswordInfoValid(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x10: pointer
  get DomainPasswordInfo(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(16, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: i32
  set MessageType(value: number) {
    this.view.setInt32(0, value, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  set PasswordInfoValid(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x10: pointer
  set DomainPasswordInfo(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(16, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.Security.Authentication.Identity.MSV1_0_PASSTHROUGH_REQUEST (size: 48)
 */
export interface MSV1_0_PASSTHROUGH_REQUEST {
  /** Windows.Win32.Security.Authentication.Identity.MSV1_0_PROTOCOL_MESSAGE_TYPE */
  MessageType: MSV1_0_PROTOCOL_MESSAGE_TYPE;
  /** Windows.Win32.Foundation.UNICODE_STRING */
  DomainName: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.Foundation.UNICODE_STRING */
  PackageName: Uint8Array | Deno.PointerValue;
  /** u32 */
  DataLength: number;
  /** ptr */
  LogonData: Deno.PointerValue | Uint8Array;
  /** u32 */
  Pad: number;
}

export const sizeofMSV1_0_PASSTHROUGH_REQUEST = 48;

export function allocMSV1_0_PASSTHROUGH_REQUEST(data?: Partial<MSV1_0_PASSTHROUGH_REQUEST>): Uint8Array {
  const buf = new Uint8Array(sizeofMSV1_0_PASSTHROUGH_REQUEST);
  const view = new DataView(buf.buffer);
  // 0x00: i32
  if (data?.MessageType !== undefined) view.setInt32(0, Number(data.MessageType), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.DomainName !== undefined) view.setBigUint64(8, data.DomainName === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.DomainName))), true);
  // 0x10: pointer
  if (data?.PackageName !== undefined) view.setBigUint64(16, data.PackageName === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.PackageName))), true);
  // 0x18: u32
  if (data?.DataLength !== undefined) view.setUint32(24, Number(data.DataLength), true);
  // 0x1c: pad4
  // 0x20: pointer
  if (data?.LogonData !== undefined) view.setBigUint64(32, data.LogonData === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.LogonData))), true);
  // 0x28: u32
  if (data?.Pad !== undefined) view.setUint32(40, Number(data.Pad), true);
  // 0x2c: pad4
  return buf;
}

export class MSV1_0_PASSTHROUGH_REQUESTView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: i32
  get MessageType(): number {
    return this.view.getInt32(0, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  get DomainName(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x10: pointer
  get PackageName(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(16, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x18: u32
  get DataLength(): number {
    return this.view.getUint32(24, true);
  }

  // 0x1c: pad4

  // 0x20: pointer
  get LogonData(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(32, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x28: u32
  get Pad(): number {
    return this.view.getUint32(40, true);
  }

  // 0x2c: pad4

  // 0x00: i32
  set MessageType(value: number) {
    this.view.setInt32(0, value, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  set DomainName(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x10: pointer
  set PackageName(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(16, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x18: u32
  set DataLength(value: number) {
    this.view.setUint32(24, value, true);
  }

  // 0x1c: pad4

  // 0x20: pointer
  set LogonData(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(32, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x28: u32
  set Pad(value: number) {
    this.view.setUint32(40, value, true);
  }

  // 0x2c: pad4
}

/**
 * Windows.Win32.Security.Authentication.Identity.MSV1_0_PASSTHROUGH_RESPONSE (size: 24)
 */
export interface MSV1_0_PASSTHROUGH_RESPONSE {
  /** Windows.Win32.Security.Authentication.Identity.MSV1_0_PROTOCOL_MESSAGE_TYPE */
  MessageType: MSV1_0_PROTOCOL_MESSAGE_TYPE;
  /** u32 */
  Pad: number;
  /** u32 */
  DataLength: number;
  /** ptr */
  ValidationData: Deno.PointerValue | Uint8Array;
}

export const sizeofMSV1_0_PASSTHROUGH_RESPONSE = 24;

export function allocMSV1_0_PASSTHROUGH_RESPONSE(data?: Partial<MSV1_0_PASSTHROUGH_RESPONSE>): Uint8Array {
  const buf = new Uint8Array(sizeofMSV1_0_PASSTHROUGH_RESPONSE);
  const view = new DataView(buf.buffer);
  // 0x00: i32
  if (data?.MessageType !== undefined) view.setInt32(0, Number(data.MessageType), true);
  // 0x04: u32
  if (data?.Pad !== undefined) view.setUint32(4, Number(data.Pad), true);
  // 0x08: u32
  if (data?.DataLength !== undefined) view.setUint32(8, Number(data.DataLength), true);
  // 0x0c: pad4
  // 0x10: pointer
  if (data?.ValidationData !== undefined) view.setBigUint64(16, data.ValidationData === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.ValidationData))), true);
  return buf;
}

export class MSV1_0_PASSTHROUGH_RESPONSEView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: i32
  get MessageType(): number {
    return this.view.getInt32(0, true);
  }

  // 0x04: u32
  get Pad(): number {
    return this.view.getUint32(4, true);
  }

  // 0x08: u32
  get DataLength(): number {
    return this.view.getUint32(8, true);
  }

  // 0x0c: pad4

  // 0x10: pointer
  get ValidationData(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(16, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: i32
  set MessageType(value: number) {
    this.view.setInt32(0, value, true);
  }

  // 0x04: u32
  set Pad(value: number) {
    this.view.setUint32(4, value, true);
  }

  // 0x08: u32
  set DataLength(value: number) {
    this.view.setUint32(8, value, true);
  }

  // 0x0c: pad4

  // 0x10: pointer
  set ValidationData(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(16, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.Security.Authentication.Identity.MSV1_0_SUBAUTH_REQUEST (size: 24)
 */
export interface MSV1_0_SUBAUTH_REQUEST {
  /** Windows.Win32.Security.Authentication.Identity.MSV1_0_PROTOCOL_MESSAGE_TYPE */
  MessageType: MSV1_0_PROTOCOL_MESSAGE_TYPE;
  /** u32 */
  SubAuthPackageId: number;
  /** u32 */
  SubAuthInfoLength: number;
  /** ptr */
  SubAuthSubmitBuffer: Deno.PointerValue | Uint8Array;
}

export const sizeofMSV1_0_SUBAUTH_REQUEST = 24;

export function allocMSV1_0_SUBAUTH_REQUEST(data?: Partial<MSV1_0_SUBAUTH_REQUEST>): Uint8Array {
  const buf = new Uint8Array(sizeofMSV1_0_SUBAUTH_REQUEST);
  const view = new DataView(buf.buffer);
  // 0x00: i32
  if (data?.MessageType !== undefined) view.setInt32(0, Number(data.MessageType), true);
  // 0x04: u32
  if (data?.SubAuthPackageId !== undefined) view.setUint32(4, Number(data.SubAuthPackageId), true);
  // 0x08: u32
  if (data?.SubAuthInfoLength !== undefined) view.setUint32(8, Number(data.SubAuthInfoLength), true);
  // 0x0c: pad4
  // 0x10: pointer
  if (data?.SubAuthSubmitBuffer !== undefined) view.setBigUint64(16, data.SubAuthSubmitBuffer === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.SubAuthSubmitBuffer))), true);
  return buf;
}

export class MSV1_0_SUBAUTH_REQUESTView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: i32
  get MessageType(): number {
    return this.view.getInt32(0, true);
  }

  // 0x04: u32
  get SubAuthPackageId(): number {
    return this.view.getUint32(4, true);
  }

  // 0x08: u32
  get SubAuthInfoLength(): number {
    return this.view.getUint32(8, true);
  }

  // 0x0c: pad4

  // 0x10: pointer
  get SubAuthSubmitBuffer(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(16, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: i32
  set MessageType(value: number) {
    this.view.setInt32(0, value, true);
  }

  // 0x04: u32
  set SubAuthPackageId(value: number) {
    this.view.setUint32(4, value, true);
  }

  // 0x08: u32
  set SubAuthInfoLength(value: number) {
    this.view.setUint32(8, value, true);
  }

  // 0x0c: pad4

  // 0x10: pointer
  set SubAuthSubmitBuffer(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(16, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.Security.Authentication.Identity.MSV1_0_SUBAUTH_RESPONSE (size: 16)
 */
export interface MSV1_0_SUBAUTH_RESPONSE {
  /** Windows.Win32.Security.Authentication.Identity.MSV1_0_PROTOCOL_MESSAGE_TYPE */
  MessageType: MSV1_0_PROTOCOL_MESSAGE_TYPE;
  /** u32 */
  SubAuthInfoLength: number;
  /** ptr */
  SubAuthReturnBuffer: Deno.PointerValue | Uint8Array;
}

export const sizeofMSV1_0_SUBAUTH_RESPONSE = 16;

export function allocMSV1_0_SUBAUTH_RESPONSE(data?: Partial<MSV1_0_SUBAUTH_RESPONSE>): Uint8Array {
  const buf = new Uint8Array(sizeofMSV1_0_SUBAUTH_RESPONSE);
  const view = new DataView(buf.buffer);
  // 0x00: i32
  if (data?.MessageType !== undefined) view.setInt32(0, Number(data.MessageType), true);
  // 0x04: u32
  if (data?.SubAuthInfoLength !== undefined) view.setUint32(4, Number(data.SubAuthInfoLength), true);
  // 0x08: pointer
  if (data?.SubAuthReturnBuffer !== undefined) view.setBigUint64(8, data.SubAuthReturnBuffer === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.SubAuthReturnBuffer))), true);
  return buf;
}

export class MSV1_0_SUBAUTH_RESPONSEView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: i32
  get MessageType(): number {
    return this.view.getInt32(0, true);
  }

  // 0x04: u32
  get SubAuthInfoLength(): number {
    return this.view.getUint32(4, true);
  }

  // 0x08: pointer
  get SubAuthReturnBuffer(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: i32
  set MessageType(value: number) {
    this.view.setInt32(0, value, true);
  }

  // 0x04: u32
  set SubAuthInfoLength(value: number) {
    this.view.setUint32(4, value, true);
  }

  // 0x08: pointer
  set SubAuthReturnBuffer(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.Security.Authentication.Identity.KERB_INTERACTIVE_LOGON (size: 32)
 */
export interface KERB_INTERACTIVE_LOGON {
  /** Windows.Win32.Security.Authentication.Identity.KERB_LOGON_SUBMIT_TYPE */
  MessageType: KERB_LOGON_SUBMIT_TYPE;
  /** Windows.Win32.Foundation.UNICODE_STRING */
  LogonDomainName: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.Foundation.UNICODE_STRING */
  UserName: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.Foundation.UNICODE_STRING */
  Password: Uint8Array | Deno.PointerValue;
}

export const sizeofKERB_INTERACTIVE_LOGON = 32;

export function allocKERB_INTERACTIVE_LOGON(data?: Partial<KERB_INTERACTIVE_LOGON>): Uint8Array {
  const buf = new Uint8Array(sizeofKERB_INTERACTIVE_LOGON);
  const view = new DataView(buf.buffer);
  // 0x00: i32
  if (data?.MessageType !== undefined) view.setInt32(0, Number(data.MessageType), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.LogonDomainName !== undefined) view.setBigUint64(8, data.LogonDomainName === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.LogonDomainName))), true);
  // 0x10: pointer
  if (data?.UserName !== undefined) view.setBigUint64(16, data.UserName === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.UserName))), true);
  // 0x18: pointer
  if (data?.Password !== undefined) view.setBigUint64(24, data.Password === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.Password))), true);
  return buf;
}

export class KERB_INTERACTIVE_LOGONView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: i32
  get MessageType(): number {
    return this.view.getInt32(0, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  get LogonDomainName(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x10: pointer
  get UserName(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(16, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x18: pointer
  get Password(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(24, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: i32
  set MessageType(value: number) {
    this.view.setInt32(0, value, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  set LogonDomainName(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x10: pointer
  set UserName(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(16, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x18: pointer
  set Password(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(24, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.Security.Authentication.Identity.KERB_INTERACTIVE_UNLOCK_LOGON (size: 16)
 */
export interface KERB_INTERACTIVE_UNLOCK_LOGON {
  /** Windows.Win32.Security.Authentication.Identity.KERB_INTERACTIVE_LOGON */
  Logon: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.Foundation.LUID */
  LogonId: Uint8Array | Deno.PointerValue;
}

export const sizeofKERB_INTERACTIVE_UNLOCK_LOGON = 16;

export function allocKERB_INTERACTIVE_UNLOCK_LOGON(data?: Partial<KERB_INTERACTIVE_UNLOCK_LOGON>): Uint8Array {
  const buf = new Uint8Array(sizeofKERB_INTERACTIVE_UNLOCK_LOGON);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.Logon !== undefined) view.setBigUint64(0, data.Logon === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.Logon))), true);
  // 0x08: pointer
  if (data?.LogonId !== undefined) view.setBigUint64(8, data.LogonId === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.LogonId))), true);
  return buf;
}

export class KERB_INTERACTIVE_UNLOCK_LOGONView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get Logon(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(0, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x08: pointer
  get LogonId(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: pointer
  set Logon(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(0, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x08: pointer
  set LogonId(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.Security.Authentication.Identity.KERB_SMART_CARD_LOGON (size: 32)
 */
export interface KERB_SMART_CARD_LOGON {
  /** Windows.Win32.Security.Authentication.Identity.KERB_LOGON_SUBMIT_TYPE */
  MessageType: KERB_LOGON_SUBMIT_TYPE;
  /** Windows.Win32.Foundation.UNICODE_STRING */
  Pin: Uint8Array | Deno.PointerValue;
  /** u32 */
  CspDataLength: number;
  /** ptr */
  CspData: Deno.PointerValue | Uint8Array;
}

export const sizeofKERB_SMART_CARD_LOGON = 32;

export function allocKERB_SMART_CARD_LOGON(data?: Partial<KERB_SMART_CARD_LOGON>): Uint8Array {
  const buf = new Uint8Array(sizeofKERB_SMART_CARD_LOGON);
  const view = new DataView(buf.buffer);
  // 0x00: i32
  if (data?.MessageType !== undefined) view.setInt32(0, Number(data.MessageType), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.Pin !== undefined) view.setBigUint64(8, data.Pin === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.Pin))), true);
  // 0x10: u32
  if (data?.CspDataLength !== undefined) view.setUint32(16, Number(data.CspDataLength), true);
  // 0x14: pad4
  // 0x18: pointer
  if (data?.CspData !== undefined) view.setBigUint64(24, data.CspData === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.CspData))), true);
  return buf;
}

export class KERB_SMART_CARD_LOGONView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: i32
  get MessageType(): number {
    return this.view.getInt32(0, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  get Pin(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x10: u32
  get CspDataLength(): number {
    return this.view.getUint32(16, true);
  }

  // 0x14: pad4

  // 0x18: pointer
  get CspData(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(24, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: i32
  set MessageType(value: number) {
    this.view.setInt32(0, value, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  set Pin(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x10: u32
  set CspDataLength(value: number) {
    this.view.setUint32(16, value, true);
  }

  // 0x14: pad4

  // 0x18: pointer
  set CspData(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(24, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.Security.Authentication.Identity.KERB_SMART_CARD_UNLOCK_LOGON (size: 16)
 */
export interface KERB_SMART_CARD_UNLOCK_LOGON {
  /** Windows.Win32.Security.Authentication.Identity.KERB_SMART_CARD_LOGON */
  Logon: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.Foundation.LUID */
  LogonId: Uint8Array | Deno.PointerValue;
}

export const sizeofKERB_SMART_CARD_UNLOCK_LOGON = 16;

export function allocKERB_SMART_CARD_UNLOCK_LOGON(data?: Partial<KERB_SMART_CARD_UNLOCK_LOGON>): Uint8Array {
  const buf = new Uint8Array(sizeofKERB_SMART_CARD_UNLOCK_LOGON);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.Logon !== undefined) view.setBigUint64(0, data.Logon === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.Logon))), true);
  // 0x08: pointer
  if (data?.LogonId !== undefined) view.setBigUint64(8, data.LogonId === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.LogonId))), true);
  return buf;
}

export class KERB_SMART_CARD_UNLOCK_LOGONView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get Logon(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(0, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x08: pointer
  get LogonId(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: pointer
  set Logon(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(0, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x08: pointer
  set LogonId(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.Security.Authentication.Identity.KERB_CERTIFICATE_LOGON (size: 48)
 */
export interface KERB_CERTIFICATE_LOGON {
  /** Windows.Win32.Security.Authentication.Identity.KERB_LOGON_SUBMIT_TYPE */
  MessageType: KERB_LOGON_SUBMIT_TYPE;
  /** Windows.Win32.Foundation.UNICODE_STRING */
  DomainName: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.Foundation.UNICODE_STRING */
  UserName: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.Foundation.UNICODE_STRING */
  Pin: Uint8Array | Deno.PointerValue;
  /** u32 */
  Flags: number;
  /** u32 */
  CspDataLength: number;
  /** ptr */
  CspData: Deno.PointerValue | Uint8Array;
}

export const sizeofKERB_CERTIFICATE_LOGON = 48;

export function allocKERB_CERTIFICATE_LOGON(data?: Partial<KERB_CERTIFICATE_LOGON>): Uint8Array {
  const buf = new Uint8Array(sizeofKERB_CERTIFICATE_LOGON);
  const view = new DataView(buf.buffer);
  // 0x00: i32
  if (data?.MessageType !== undefined) view.setInt32(0, Number(data.MessageType), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.DomainName !== undefined) view.setBigUint64(8, data.DomainName === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.DomainName))), true);
  // 0x10: pointer
  if (data?.UserName !== undefined) view.setBigUint64(16, data.UserName === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.UserName))), true);
  // 0x18: pointer
  if (data?.Pin !== undefined) view.setBigUint64(24, data.Pin === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.Pin))), true);
  // 0x20: u32
  if (data?.Flags !== undefined) view.setUint32(32, Number(data.Flags), true);
  // 0x24: u32
  if (data?.CspDataLength !== undefined) view.setUint32(36, Number(data.CspDataLength), true);
  // 0x28: pointer
  if (data?.CspData !== undefined) view.setBigUint64(40, data.CspData === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.CspData))), true);
  return buf;
}

export class KERB_CERTIFICATE_LOGONView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: i32
  get MessageType(): number {
    return this.view.getInt32(0, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  get DomainName(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x10: pointer
  get UserName(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(16, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x18: pointer
  get Pin(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(24, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x20: u32
  get Flags(): number {
    return this.view.getUint32(32, true);
  }

  // 0x24: u32
  get CspDataLength(): number {
    return this.view.getUint32(36, true);
  }

  // 0x28: pointer
  get CspData(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(40, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: i32
  set MessageType(value: number) {
    this.view.setInt32(0, value, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  set DomainName(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x10: pointer
  set UserName(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(16, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x18: pointer
  set Pin(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(24, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x20: u32
  set Flags(value: number) {
    this.view.setUint32(32, value, true);
  }

  // 0x24: u32
  set CspDataLength(value: number) {
    this.view.setUint32(36, value, true);
  }

  // 0x28: pointer
  set CspData(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(40, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.Security.Authentication.Identity.KERB_CERTIFICATE_UNLOCK_LOGON (size: 16)
 */
export interface KERB_CERTIFICATE_UNLOCK_LOGON {
  /** Windows.Win32.Security.Authentication.Identity.KERB_CERTIFICATE_LOGON */
  Logon: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.Foundation.LUID */
  LogonId: Uint8Array | Deno.PointerValue;
}

export const sizeofKERB_CERTIFICATE_UNLOCK_LOGON = 16;

export function allocKERB_CERTIFICATE_UNLOCK_LOGON(data?: Partial<KERB_CERTIFICATE_UNLOCK_LOGON>): Uint8Array {
  const buf = new Uint8Array(sizeofKERB_CERTIFICATE_UNLOCK_LOGON);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.Logon !== undefined) view.setBigUint64(0, data.Logon === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.Logon))), true);
  // 0x08: pointer
  if (data?.LogonId !== undefined) view.setBigUint64(8, data.LogonId === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.LogonId))), true);
  return buf;
}

export class KERB_CERTIFICATE_UNLOCK_LOGONView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get Logon(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(0, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x08: pointer
  get LogonId(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: pointer
  set Logon(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(0, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x08: pointer
  set LogonId(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.Security.Authentication.Identity.KERB_CERTIFICATE_S4U_LOGON (size: 40)
 */
export interface KERB_CERTIFICATE_S4U_LOGON {
  /** Windows.Win32.Security.Authentication.Identity.KERB_LOGON_SUBMIT_TYPE */
  MessageType: KERB_LOGON_SUBMIT_TYPE;
  /** u32 */
  Flags: number;
  /** Windows.Win32.Foundation.UNICODE_STRING */
  UserPrincipalName: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.Foundation.UNICODE_STRING */
  DomainName: Uint8Array | Deno.PointerValue;
  /** u32 */
  CertificateLength: number;
  /** ptr */
  Certificate: Deno.PointerValue | Uint8Array;
}

export const sizeofKERB_CERTIFICATE_S4U_LOGON = 40;

export function allocKERB_CERTIFICATE_S4U_LOGON(data?: Partial<KERB_CERTIFICATE_S4U_LOGON>): Uint8Array {
  const buf = new Uint8Array(sizeofKERB_CERTIFICATE_S4U_LOGON);
  const view = new DataView(buf.buffer);
  // 0x00: i32
  if (data?.MessageType !== undefined) view.setInt32(0, Number(data.MessageType), true);
  // 0x04: u32
  if (data?.Flags !== undefined) view.setUint32(4, Number(data.Flags), true);
  // 0x08: pointer
  if (data?.UserPrincipalName !== undefined) view.setBigUint64(8, data.UserPrincipalName === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.UserPrincipalName))), true);
  // 0x10: pointer
  if (data?.DomainName !== undefined) view.setBigUint64(16, data.DomainName === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.DomainName))), true);
  // 0x18: u32
  if (data?.CertificateLength !== undefined) view.setUint32(24, Number(data.CertificateLength), true);
  // 0x1c: pad4
  // 0x20: pointer
  if (data?.Certificate !== undefined) view.setBigUint64(32, data.Certificate === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.Certificate))), true);
  return buf;
}

export class KERB_CERTIFICATE_S4U_LOGONView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: i32
  get MessageType(): number {
    return this.view.getInt32(0, true);
  }

  // 0x04: u32
  get Flags(): number {
    return this.view.getUint32(4, true);
  }

  // 0x08: pointer
  get UserPrincipalName(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x10: pointer
  get DomainName(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(16, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x18: u32
  get CertificateLength(): number {
    return this.view.getUint32(24, true);
  }

  // 0x1c: pad4

  // 0x20: pointer
  get Certificate(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(32, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: i32
  set MessageType(value: number) {
    this.view.setInt32(0, value, true);
  }

  // 0x04: u32
  set Flags(value: number) {
    this.view.setUint32(4, value, true);
  }

  // 0x08: pointer
  set UserPrincipalName(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x10: pointer
  set DomainName(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(16, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x18: u32
  set CertificateLength(value: number) {
    this.view.setUint32(24, value, true);
  }

  // 0x1c: pad4

  // 0x20: pointer
  set Certificate(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(32, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.Security.Authentication.Identity.KERB_TICKET_LOGON (size: 32)
 */
export interface KERB_TICKET_LOGON {
  /** Windows.Win32.Security.Authentication.Identity.KERB_LOGON_SUBMIT_TYPE */
  MessageType: KERB_LOGON_SUBMIT_TYPE;
  /** u32 */
  Flags: number;
  /** u32 */
  ServiceTicketLength: number;
  /** u32 */
  TicketGrantingTicketLength: number;
  /** ptr */
  ServiceTicket: Deno.PointerValue | Uint8Array;
  /** ptr */
  TicketGrantingTicket: Deno.PointerValue | Uint8Array;
}

export const sizeofKERB_TICKET_LOGON = 32;

export function allocKERB_TICKET_LOGON(data?: Partial<KERB_TICKET_LOGON>): Uint8Array {
  const buf = new Uint8Array(sizeofKERB_TICKET_LOGON);
  const view = new DataView(buf.buffer);
  // 0x00: i32
  if (data?.MessageType !== undefined) view.setInt32(0, Number(data.MessageType), true);
  // 0x04: u32
  if (data?.Flags !== undefined) view.setUint32(4, Number(data.Flags), true);
  // 0x08: u32
  if (data?.ServiceTicketLength !== undefined) view.setUint32(8, Number(data.ServiceTicketLength), true);
  // 0x0c: u32
  if (data?.TicketGrantingTicketLength !== undefined) view.setUint32(12, Number(data.TicketGrantingTicketLength), true);
  // 0x10: pointer
  if (data?.ServiceTicket !== undefined) view.setBigUint64(16, data.ServiceTicket === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.ServiceTicket))), true);
  // 0x18: pointer
  if (data?.TicketGrantingTicket !== undefined) view.setBigUint64(24, data.TicketGrantingTicket === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.TicketGrantingTicket))), true);
  return buf;
}

export class KERB_TICKET_LOGONView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: i32
  get MessageType(): number {
    return this.view.getInt32(0, true);
  }

  // 0x04: u32
  get Flags(): number {
    return this.view.getUint32(4, true);
  }

  // 0x08: u32
  get ServiceTicketLength(): number {
    return this.view.getUint32(8, true);
  }

  // 0x0c: u32
  get TicketGrantingTicketLength(): number {
    return this.view.getUint32(12, true);
  }

  // 0x10: pointer
  get ServiceTicket(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(16, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x18: pointer
  get TicketGrantingTicket(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(24, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: i32
  set MessageType(value: number) {
    this.view.setInt32(0, value, true);
  }

  // 0x04: u32
  set Flags(value: number) {
    this.view.setUint32(4, value, true);
  }

  // 0x08: u32
  set ServiceTicketLength(value: number) {
    this.view.setUint32(8, value, true);
  }

  // 0x0c: u32
  set TicketGrantingTicketLength(value: number) {
    this.view.setUint32(12, value, true);
  }

  // 0x10: pointer
  set ServiceTicket(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(16, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x18: pointer
  set TicketGrantingTicket(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(24, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.Security.Authentication.Identity.KERB_TICKET_UNLOCK_LOGON (size: 16)
 */
export interface KERB_TICKET_UNLOCK_LOGON {
  /** Windows.Win32.Security.Authentication.Identity.KERB_TICKET_LOGON */
  Logon: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.Foundation.LUID */
  LogonId: Uint8Array | Deno.PointerValue;
}

export const sizeofKERB_TICKET_UNLOCK_LOGON = 16;

export function allocKERB_TICKET_UNLOCK_LOGON(data?: Partial<KERB_TICKET_UNLOCK_LOGON>): Uint8Array {
  const buf = new Uint8Array(sizeofKERB_TICKET_UNLOCK_LOGON);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.Logon !== undefined) view.setBigUint64(0, data.Logon === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.Logon))), true);
  // 0x08: pointer
  if (data?.LogonId !== undefined) view.setBigUint64(8, data.LogonId === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.LogonId))), true);
  return buf;
}

export class KERB_TICKET_UNLOCK_LOGONView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get Logon(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(0, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x08: pointer
  get LogonId(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: pointer
  set Logon(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(0, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x08: pointer
  set LogonId(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.Security.Authentication.Identity.KERB_S4U_LOGON (size: 24)
 */
export interface KERB_S4U_LOGON {
  /** Windows.Win32.Security.Authentication.Identity.KERB_LOGON_SUBMIT_TYPE */
  MessageType: KERB_LOGON_SUBMIT_TYPE;
  /** u32 */
  Flags: number;
  /** Windows.Win32.Foundation.UNICODE_STRING */
  ClientUpn: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.Foundation.UNICODE_STRING */
  ClientRealm: Uint8Array | Deno.PointerValue;
}

export const sizeofKERB_S4U_LOGON = 24;

export function allocKERB_S4U_LOGON(data?: Partial<KERB_S4U_LOGON>): Uint8Array {
  const buf = new Uint8Array(sizeofKERB_S4U_LOGON);
  const view = new DataView(buf.buffer);
  // 0x00: i32
  if (data?.MessageType !== undefined) view.setInt32(0, Number(data.MessageType), true);
  // 0x04: u32
  if (data?.Flags !== undefined) view.setUint32(4, Number(data.Flags), true);
  // 0x08: pointer
  if (data?.ClientUpn !== undefined) view.setBigUint64(8, data.ClientUpn === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.ClientUpn))), true);
  // 0x10: pointer
  if (data?.ClientRealm !== undefined) view.setBigUint64(16, data.ClientRealm === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.ClientRealm))), true);
  return buf;
}

export class KERB_S4U_LOGONView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: i32
  get MessageType(): number {
    return this.view.getInt32(0, true);
  }

  // 0x04: u32
  get Flags(): number {
    return this.view.getUint32(4, true);
  }

  // 0x08: pointer
  get ClientUpn(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x10: pointer
  get ClientRealm(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(16, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: i32
  set MessageType(value: number) {
    this.view.setInt32(0, value, true);
  }

  // 0x04: u32
  set Flags(value: number) {
    this.view.setUint32(4, value, true);
  }

  // 0x08: pointer
  set ClientUpn(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x10: pointer
  set ClientRealm(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(16, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.Security.Authentication.Identity.KERB_INTERACTIVE_PROFILE (size: 112)
 */
export interface KERB_INTERACTIVE_PROFILE {
  /** Windows.Win32.Security.Authentication.Identity.KERB_PROFILE_BUFFER_TYPE */
  MessageType: KERB_PROFILE_BUFFER_TYPE;
  /** u16 */
  LogonCount: number;
  /** u16 */
  BadPasswordCount: number;
  /** Windows.Win32.Foundation.LARGE_INTEGER */
  LogonTime: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.Foundation.LARGE_INTEGER */
  LogoffTime: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.Foundation.LARGE_INTEGER */
  KickOffTime: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.Foundation.LARGE_INTEGER */
  PasswordLastSet: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.Foundation.LARGE_INTEGER */
  PasswordCanChange: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.Foundation.LARGE_INTEGER */
  PasswordMustChange: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.Foundation.UNICODE_STRING */
  LogonScript: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.Foundation.UNICODE_STRING */
  HomeDirectory: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.Foundation.UNICODE_STRING */
  FullName: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.Foundation.UNICODE_STRING */
  ProfilePath: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.Foundation.UNICODE_STRING */
  HomeDirectoryDrive: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.Foundation.UNICODE_STRING */
  LogonServer: Uint8Array | Deno.PointerValue;
  /** u32 */
  UserFlags: number;
}

export const sizeofKERB_INTERACTIVE_PROFILE = 112;

export function allocKERB_INTERACTIVE_PROFILE(data?: Partial<KERB_INTERACTIVE_PROFILE>): Uint8Array {
  const buf = new Uint8Array(sizeofKERB_INTERACTIVE_PROFILE);
  const view = new DataView(buf.buffer);
  // 0x00: i32
  if (data?.MessageType !== undefined) view.setInt32(0, Number(data.MessageType), true);
  // 0x04: u16
  if (data?.LogonCount !== undefined) view.setUint16(4, Number(data.LogonCount), true);
  // 0x06: u16
  if (data?.BadPasswordCount !== undefined) view.setUint16(6, Number(data.BadPasswordCount), true);
  // 0x08: pointer
  if (data?.LogonTime !== undefined) view.setBigUint64(8, data.LogonTime === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.LogonTime))), true);
  // 0x10: pointer
  if (data?.LogoffTime !== undefined) view.setBigUint64(16, data.LogoffTime === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.LogoffTime))), true);
  // 0x18: pointer
  if (data?.KickOffTime !== undefined) view.setBigUint64(24, data.KickOffTime === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.KickOffTime))), true);
  // 0x20: pointer
  if (data?.PasswordLastSet !== undefined) view.setBigUint64(32, data.PasswordLastSet === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.PasswordLastSet))), true);
  // 0x28: pointer
  if (data?.PasswordCanChange !== undefined) view.setBigUint64(40, data.PasswordCanChange === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.PasswordCanChange))), true);
  // 0x30: pointer
  if (data?.PasswordMustChange !== undefined) view.setBigUint64(48, data.PasswordMustChange === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.PasswordMustChange))), true);
  // 0x38: pointer
  if (data?.LogonScript !== undefined) view.setBigUint64(56, data.LogonScript === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.LogonScript))), true);
  // 0x40: pointer
  if (data?.HomeDirectory !== undefined) view.setBigUint64(64, data.HomeDirectory === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.HomeDirectory))), true);
  // 0x48: pointer
  if (data?.FullName !== undefined) view.setBigUint64(72, data.FullName === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.FullName))), true);
  // 0x50: pointer
  if (data?.ProfilePath !== undefined) view.setBigUint64(80, data.ProfilePath === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.ProfilePath))), true);
  // 0x58: pointer
  if (data?.HomeDirectoryDrive !== undefined) view.setBigUint64(88, data.HomeDirectoryDrive === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.HomeDirectoryDrive))), true);
  // 0x60: pointer
  if (data?.LogonServer !== undefined) view.setBigUint64(96, data.LogonServer === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.LogonServer))), true);
  // 0x68: u32
  if (data?.UserFlags !== undefined) view.setUint32(104, Number(data.UserFlags), true);
  // 0x6c: pad4
  return buf;
}

export class KERB_INTERACTIVE_PROFILEView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: i32
  get MessageType(): number {
    return this.view.getInt32(0, true);
  }

  // 0x04: u16
  get LogonCount(): number {
    return this.view.getUint16(4, true);
  }

  // 0x06: u16
  get BadPasswordCount(): number {
    return this.view.getUint16(6, true);
  }

  // 0x08: pointer
  get LogonTime(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x10: pointer
  get LogoffTime(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(16, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x18: pointer
  get KickOffTime(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(24, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x20: pointer
  get PasswordLastSet(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(32, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x28: pointer
  get PasswordCanChange(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(40, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x30: pointer
  get PasswordMustChange(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(48, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x38: pointer
  get LogonScript(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(56, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x40: pointer
  get HomeDirectory(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(64, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x48: pointer
  get FullName(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(72, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x50: pointer
  get ProfilePath(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(80, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x58: pointer
  get HomeDirectoryDrive(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(88, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x60: pointer
  get LogonServer(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(96, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x68: u32
  get UserFlags(): number {
    return this.view.getUint32(104, true);
  }

  // 0x6c: pad4

  // 0x00: i32
  set MessageType(value: number) {
    this.view.setInt32(0, value, true);
  }

  // 0x04: u16
  set LogonCount(value: number) {
    this.view.setUint16(4, value, true);
  }

  // 0x06: u16
  set BadPasswordCount(value: number) {
    this.view.setUint16(6, value, true);
  }

  // 0x08: pointer
  set LogonTime(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x10: pointer
  set LogoffTime(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(16, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x18: pointer
  set KickOffTime(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(24, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x20: pointer
  set PasswordLastSet(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(32, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x28: pointer
  set PasswordCanChange(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(40, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x30: pointer
  set PasswordMustChange(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(48, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x38: pointer
  set LogonScript(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(56, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x40: pointer
  set HomeDirectory(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(64, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x48: pointer
  set FullName(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(72, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x50: pointer
  set ProfilePath(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(80, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x58: pointer
  set HomeDirectoryDrive(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(88, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x60: pointer
  set LogonServer(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(96, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x68: u32
  set UserFlags(value: number) {
    this.view.setUint32(104, value, true);
  }

  // 0x6c: pad4
}

/**
 * Windows.Win32.Security.Authentication.Identity.KERB_SMART_CARD_PROFILE (size: 24)
 */
export interface KERB_SMART_CARD_PROFILE {
  /** Windows.Win32.Security.Authentication.Identity.KERB_INTERACTIVE_PROFILE */
  Profile: Uint8Array | Deno.PointerValue;
  /** u32 */
  CertificateSize: number;
  /** ptr */
  CertificateData: Deno.PointerValue | Uint8Array;
}

export const sizeofKERB_SMART_CARD_PROFILE = 24;

export function allocKERB_SMART_CARD_PROFILE(data?: Partial<KERB_SMART_CARD_PROFILE>): Uint8Array {
  const buf = new Uint8Array(sizeofKERB_SMART_CARD_PROFILE);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.Profile !== undefined) view.setBigUint64(0, data.Profile === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.Profile))), true);
  // 0x08: u32
  if (data?.CertificateSize !== undefined) view.setUint32(8, Number(data.CertificateSize), true);
  // 0x0c: pad4
  // 0x10: pointer
  if (data?.CertificateData !== undefined) view.setBigUint64(16, data.CertificateData === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.CertificateData))), true);
  return buf;
}

export class KERB_SMART_CARD_PROFILEView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get Profile(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(0, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x08: u32
  get CertificateSize(): number {
    return this.view.getUint32(8, true);
  }

  // 0x0c: pad4

  // 0x10: pointer
  get CertificateData(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(16, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: pointer
  set Profile(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(0, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x08: u32
  set CertificateSize(value: number) {
    this.view.setUint32(8, value, true);
  }

  // 0x0c: pad4

  // 0x10: pointer
  set CertificateData(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(16, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.Security.Authentication.Identity.KERB_CRYPTO_KEY (size: 16)
 */
export interface KERB_CRYPTO_KEY {
  /** Windows.Win32.Security.Authentication.Identity.KERB_CRYPTO_KEY_TYPE */
  KeyType: KERB_CRYPTO_KEY_TYPE;
  /** u32 */
  Length: number;
  /** ptr */
  Value: Deno.PointerValue | Uint8Array;
}

export const sizeofKERB_CRYPTO_KEY = 16;

export function allocKERB_CRYPTO_KEY(data?: Partial<KERB_CRYPTO_KEY>): Uint8Array {
  const buf = new Uint8Array(sizeofKERB_CRYPTO_KEY);
  const view = new DataView(buf.buffer);
  // 0x00: i32
  if (data?.KeyType !== undefined) view.setInt32(0, Number(data.KeyType), true);
  // 0x04: u32
  if (data?.Length !== undefined) view.setUint32(4, Number(data.Length), true);
  // 0x08: pointer
  if (data?.Value !== undefined) view.setBigUint64(8, data.Value === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.Value))), true);
  return buf;
}

export class KERB_CRYPTO_KEYView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: i32
  get KeyType(): number {
    return this.view.getInt32(0, true);
  }

  // 0x04: u32
  get Length(): number {
    return this.view.getUint32(4, true);
  }

  // 0x08: pointer
  get Value(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: i32
  set KeyType(value: number) {
    this.view.setInt32(0, value, true);
  }

  // 0x04: u32
  set Length(value: number) {
    this.view.setUint32(4, value, true);
  }

  // 0x08: pointer
  set Value(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.Security.Authentication.Identity.KERB_CRYPTO_KEY32 (size: 16)
 */
export interface KERB_CRYPTO_KEY32 {
  /** i32 */
  KeyType: number;
  /** u32 */
  Length: number;
  /** u32 */
  Offset: number;
}

export const sizeofKERB_CRYPTO_KEY32 = 16;

export function allocKERB_CRYPTO_KEY32(data?: Partial<KERB_CRYPTO_KEY32>): Uint8Array {
  const buf = new Uint8Array(sizeofKERB_CRYPTO_KEY32);
  const view = new DataView(buf.buffer);
  // 0x00: i32
  if (data?.KeyType !== undefined) view.setInt32(0, Number(data.KeyType), true);
  // 0x04: u32
  if (data?.Length !== undefined) view.setUint32(4, Number(data.Length), true);
  // 0x08: u32
  if (data?.Offset !== undefined) view.setUint32(8, Number(data.Offset), true);
  // 0x0c: pad4
  return buf;
}

export class KERB_CRYPTO_KEY32View {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: i32
  get KeyType(): number {
    return this.view.getInt32(0, true);
  }

  // 0x04: u32
  get Length(): number {
    return this.view.getUint32(4, true);
  }

  // 0x08: u32
  get Offset(): number {
    return this.view.getUint32(8, true);
  }

  // 0x0c: pad4

  // 0x00: i32
  set KeyType(value: number) {
    this.view.setInt32(0, value, true);
  }

  // 0x04: u32
  set Length(value: number) {
    this.view.setUint32(4, value, true);
  }

  // 0x08: u32
  set Offset(value: number) {
    this.view.setUint32(8, value, true);
  }

  // 0x0c: pad4
}

/**
 * Windows.Win32.Security.Authentication.Identity.KERB_TICKET_PROFILE (size: 16)
 */
export interface KERB_TICKET_PROFILE {
  /** Windows.Win32.Security.Authentication.Identity.KERB_INTERACTIVE_PROFILE */
  Profile: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.Security.Authentication.Identity.KERB_CRYPTO_KEY */
  SessionKey: Uint8Array | Deno.PointerValue;
}

export const sizeofKERB_TICKET_PROFILE = 16;

export function allocKERB_TICKET_PROFILE(data?: Partial<KERB_TICKET_PROFILE>): Uint8Array {
  const buf = new Uint8Array(sizeofKERB_TICKET_PROFILE);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.Profile !== undefined) view.setBigUint64(0, data.Profile === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.Profile))), true);
  // 0x08: pointer
  if (data?.SessionKey !== undefined) view.setBigUint64(8, data.SessionKey === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.SessionKey))), true);
  return buf;
}

export class KERB_TICKET_PROFILEView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get Profile(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(0, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x08: pointer
  get SessionKey(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: pointer
  set Profile(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(0, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x08: pointer
  set SessionKey(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.Security.Authentication.Identity.KERB_QUERY_TKT_CACHE_REQUEST (size: 16)
 */
export interface KERB_QUERY_TKT_CACHE_REQUEST {
  /** Windows.Win32.Security.Authentication.Identity.KERB_PROTOCOL_MESSAGE_TYPE */
  MessageType: KERB_PROTOCOL_MESSAGE_TYPE;
  /** Windows.Win32.Foundation.LUID */
  LogonId: Uint8Array | Deno.PointerValue;
}

export const sizeofKERB_QUERY_TKT_CACHE_REQUEST = 16;

export function allocKERB_QUERY_TKT_CACHE_REQUEST(data?: Partial<KERB_QUERY_TKT_CACHE_REQUEST>): Uint8Array {
  const buf = new Uint8Array(sizeofKERB_QUERY_TKT_CACHE_REQUEST);
  const view = new DataView(buf.buffer);
  // 0x00: i32
  if (data?.MessageType !== undefined) view.setInt32(0, Number(data.MessageType), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.LogonId !== undefined) view.setBigUint64(8, data.LogonId === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.LogonId))), true);
  return buf;
}

export class KERB_QUERY_TKT_CACHE_REQUESTView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: i32
  get MessageType(): number {
    return this.view.getInt32(0, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  get LogonId(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: i32
  set MessageType(value: number) {
    this.view.setInt32(0, value, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  set LogonId(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.Security.Authentication.Identity.KERB_TICKET_CACHE_INFO (size: 48)
 */
export interface KERB_TICKET_CACHE_INFO {
  /** Windows.Win32.Foundation.UNICODE_STRING */
  ServerName: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.Foundation.UNICODE_STRING */
  RealmName: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.Foundation.LARGE_INTEGER */
  StartTime: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.Foundation.LARGE_INTEGER */
  EndTime: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.Foundation.LARGE_INTEGER */
  RenewTime: Uint8Array | Deno.PointerValue;
  /** i32 */
  EncryptionType: number;
  /** Windows.Win32.Security.Authentication.Identity.KERB_TICKET_FLAGS */
  TicketFlags: KERB_TICKET_FLAGS;
}

export const sizeofKERB_TICKET_CACHE_INFO = 48;

export function allocKERB_TICKET_CACHE_INFO(data?: Partial<KERB_TICKET_CACHE_INFO>): Uint8Array {
  const buf = new Uint8Array(sizeofKERB_TICKET_CACHE_INFO);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.ServerName !== undefined) view.setBigUint64(0, data.ServerName === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.ServerName))), true);
  // 0x08: pointer
  if (data?.RealmName !== undefined) view.setBigUint64(8, data.RealmName === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.RealmName))), true);
  // 0x10: pointer
  if (data?.StartTime !== undefined) view.setBigUint64(16, data.StartTime === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.StartTime))), true);
  // 0x18: pointer
  if (data?.EndTime !== undefined) view.setBigUint64(24, data.EndTime === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.EndTime))), true);
  // 0x20: pointer
  if (data?.RenewTime !== undefined) view.setBigUint64(32, data.RenewTime === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.RenewTime))), true);
  // 0x28: i32
  if (data?.EncryptionType !== undefined) view.setInt32(40, Number(data.EncryptionType), true);
  // 0x2c: u32
  if (data?.TicketFlags !== undefined) view.setUint32(44, Number(data.TicketFlags), true);
  return buf;
}

export class KERB_TICKET_CACHE_INFOView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get ServerName(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(0, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x08: pointer
  get RealmName(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x10: pointer
  get StartTime(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(16, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x18: pointer
  get EndTime(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(24, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x20: pointer
  get RenewTime(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(32, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x28: i32
  get EncryptionType(): number {
    return this.view.getInt32(40, true);
  }

  // 0x2c: u32
  get TicketFlags(): number {
    return this.view.getUint32(44, true);
  }

  // 0x00: pointer
  set ServerName(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(0, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x08: pointer
  set RealmName(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x10: pointer
  set StartTime(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(16, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x18: pointer
  set EndTime(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(24, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x20: pointer
  set RenewTime(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(32, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x28: i32
  set EncryptionType(value: number) {
    this.view.setInt32(40, value, true);
  }

  // 0x2c: u32
  set TicketFlags(value: number) {
    this.view.setUint32(44, value, true);
  }
}

/**
 * Windows.Win32.Security.Authentication.Identity.KERB_TICKET_CACHE_INFO_EX (size: 64)
 */
export interface KERB_TICKET_CACHE_INFO_EX {
  /** Windows.Win32.Foundation.UNICODE_STRING */
  ClientName: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.Foundation.UNICODE_STRING */
  ClientRealm: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.Foundation.UNICODE_STRING */
  ServerName: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.Foundation.UNICODE_STRING */
  ServerRealm: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.Foundation.LARGE_INTEGER */
  StartTime: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.Foundation.LARGE_INTEGER */
  EndTime: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.Foundation.LARGE_INTEGER */
  RenewTime: Uint8Array | Deno.PointerValue;
  /** i32 */
  EncryptionType: number;
  /** u32 */
  TicketFlags: number;
}

export const sizeofKERB_TICKET_CACHE_INFO_EX = 64;

export function allocKERB_TICKET_CACHE_INFO_EX(data?: Partial<KERB_TICKET_CACHE_INFO_EX>): Uint8Array {
  const buf = new Uint8Array(sizeofKERB_TICKET_CACHE_INFO_EX);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.ClientName !== undefined) view.setBigUint64(0, data.ClientName === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.ClientName))), true);
  // 0x08: pointer
  if (data?.ClientRealm !== undefined) view.setBigUint64(8, data.ClientRealm === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.ClientRealm))), true);
  // 0x10: pointer
  if (data?.ServerName !== undefined) view.setBigUint64(16, data.ServerName === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.ServerName))), true);
  // 0x18: pointer
  if (data?.ServerRealm !== undefined) view.setBigUint64(24, data.ServerRealm === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.ServerRealm))), true);
  // 0x20: pointer
  if (data?.StartTime !== undefined) view.setBigUint64(32, data.StartTime === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.StartTime))), true);
  // 0x28: pointer
  if (data?.EndTime !== undefined) view.setBigUint64(40, data.EndTime === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.EndTime))), true);
  // 0x30: pointer
  if (data?.RenewTime !== undefined) view.setBigUint64(48, data.RenewTime === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.RenewTime))), true);
  // 0x38: i32
  if (data?.EncryptionType !== undefined) view.setInt32(56, Number(data.EncryptionType), true);
  // 0x3c: u32
  if (data?.TicketFlags !== undefined) view.setUint32(60, Number(data.TicketFlags), true);
  return buf;
}

export class KERB_TICKET_CACHE_INFO_EXView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get ClientName(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(0, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x08: pointer
  get ClientRealm(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x10: pointer
  get ServerName(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(16, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x18: pointer
  get ServerRealm(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(24, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x20: pointer
  get StartTime(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(32, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x28: pointer
  get EndTime(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(40, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x30: pointer
  get RenewTime(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(48, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x38: i32
  get EncryptionType(): number {
    return this.view.getInt32(56, true);
  }

  // 0x3c: u32
  get TicketFlags(): number {
    return this.view.getUint32(60, true);
  }

  // 0x00: pointer
  set ClientName(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(0, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x08: pointer
  set ClientRealm(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x10: pointer
  set ServerName(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(16, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x18: pointer
  set ServerRealm(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(24, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x20: pointer
  set StartTime(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(32, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x28: pointer
  set EndTime(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(40, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x30: pointer
  set RenewTime(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(48, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x38: i32
  set EncryptionType(value: number) {
    this.view.setInt32(56, value, true);
  }

  // 0x3c: u32
  set TicketFlags(value: number) {
    this.view.setUint32(60, value, true);
  }
}

/**
 * Windows.Win32.Security.Authentication.Identity.KERB_TICKET_CACHE_INFO_EX2 (size: 72)
 */
export interface KERB_TICKET_CACHE_INFO_EX2 {
  /** Windows.Win32.Foundation.UNICODE_STRING */
  ClientName: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.Foundation.UNICODE_STRING */
  ClientRealm: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.Foundation.UNICODE_STRING */
  ServerName: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.Foundation.UNICODE_STRING */
  ServerRealm: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.Foundation.LARGE_INTEGER */
  StartTime: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.Foundation.LARGE_INTEGER */
  EndTime: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.Foundation.LARGE_INTEGER */
  RenewTime: Uint8Array | Deno.PointerValue;
  /** i32 */
  EncryptionType: number;
  /** u32 */
  TicketFlags: number;
  /** u32 */
  SessionKeyType: number;
  /** u32 */
  BranchId: number;
}

export const sizeofKERB_TICKET_CACHE_INFO_EX2 = 72;

export function allocKERB_TICKET_CACHE_INFO_EX2(data?: Partial<KERB_TICKET_CACHE_INFO_EX2>): Uint8Array {
  const buf = new Uint8Array(sizeofKERB_TICKET_CACHE_INFO_EX2);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.ClientName !== undefined) view.setBigUint64(0, data.ClientName === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.ClientName))), true);
  // 0x08: pointer
  if (data?.ClientRealm !== undefined) view.setBigUint64(8, data.ClientRealm === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.ClientRealm))), true);
  // 0x10: pointer
  if (data?.ServerName !== undefined) view.setBigUint64(16, data.ServerName === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.ServerName))), true);
  // 0x18: pointer
  if (data?.ServerRealm !== undefined) view.setBigUint64(24, data.ServerRealm === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.ServerRealm))), true);
  // 0x20: pointer
  if (data?.StartTime !== undefined) view.setBigUint64(32, data.StartTime === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.StartTime))), true);
  // 0x28: pointer
  if (data?.EndTime !== undefined) view.setBigUint64(40, data.EndTime === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.EndTime))), true);
  // 0x30: pointer
  if (data?.RenewTime !== undefined) view.setBigUint64(48, data.RenewTime === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.RenewTime))), true);
  // 0x38: i32
  if (data?.EncryptionType !== undefined) view.setInt32(56, Number(data.EncryptionType), true);
  // 0x3c: u32
  if (data?.TicketFlags !== undefined) view.setUint32(60, Number(data.TicketFlags), true);
  // 0x40: u32
  if (data?.SessionKeyType !== undefined) view.setUint32(64, Number(data.SessionKeyType), true);
  // 0x44: u32
  if (data?.BranchId !== undefined) view.setUint32(68, Number(data.BranchId), true);
  return buf;
}

export class KERB_TICKET_CACHE_INFO_EX2View {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get ClientName(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(0, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x08: pointer
  get ClientRealm(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x10: pointer
  get ServerName(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(16, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x18: pointer
  get ServerRealm(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(24, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x20: pointer
  get StartTime(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(32, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x28: pointer
  get EndTime(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(40, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x30: pointer
  get RenewTime(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(48, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x38: i32
  get EncryptionType(): number {
    return this.view.getInt32(56, true);
  }

  // 0x3c: u32
  get TicketFlags(): number {
    return this.view.getUint32(60, true);
  }

  // 0x40: u32
  get SessionKeyType(): number {
    return this.view.getUint32(64, true);
  }

  // 0x44: u32
  get BranchId(): number {
    return this.view.getUint32(68, true);
  }

  // 0x00: pointer
  set ClientName(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(0, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x08: pointer
  set ClientRealm(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x10: pointer
  set ServerName(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(16, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x18: pointer
  set ServerRealm(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(24, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x20: pointer
  set StartTime(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(32, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x28: pointer
  set EndTime(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(40, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x30: pointer
  set RenewTime(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(48, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x38: i32
  set EncryptionType(value: number) {
    this.view.setInt32(56, value, true);
  }

  // 0x3c: u32
  set TicketFlags(value: number) {
    this.view.setUint32(60, value, true);
  }

  // 0x40: u32
  set SessionKeyType(value: number) {
    this.view.setUint32(64, value, true);
  }

  // 0x44: u32
  set BranchId(value: number) {
    this.view.setUint32(68, value, true);
  }
}

/**
 * Windows.Win32.Security.Authentication.Identity.KERB_TICKET_CACHE_INFO_EX3 (size: 88)
 */
export interface KERB_TICKET_CACHE_INFO_EX3 {
  /** Windows.Win32.Foundation.UNICODE_STRING */
  ClientName: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.Foundation.UNICODE_STRING */
  ClientRealm: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.Foundation.UNICODE_STRING */
  ServerName: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.Foundation.UNICODE_STRING */
  ServerRealm: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.Foundation.LARGE_INTEGER */
  StartTime: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.Foundation.LARGE_INTEGER */
  EndTime: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.Foundation.LARGE_INTEGER */
  RenewTime: Uint8Array | Deno.PointerValue;
  /** i32 */
  EncryptionType: number;
  /** u32 */
  TicketFlags: number;
  /** u32 */
  SessionKeyType: number;
  /** u32 */
  BranchId: number;
  /** u32 */
  CacheFlags: number;
  /** Windows.Win32.Foundation.UNICODE_STRING */
  KdcCalled: Uint8Array | Deno.PointerValue;
}

export const sizeofKERB_TICKET_CACHE_INFO_EX3 = 88;

export function allocKERB_TICKET_CACHE_INFO_EX3(data?: Partial<KERB_TICKET_CACHE_INFO_EX3>): Uint8Array {
  const buf = new Uint8Array(sizeofKERB_TICKET_CACHE_INFO_EX3);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.ClientName !== undefined) view.setBigUint64(0, data.ClientName === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.ClientName))), true);
  // 0x08: pointer
  if (data?.ClientRealm !== undefined) view.setBigUint64(8, data.ClientRealm === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.ClientRealm))), true);
  // 0x10: pointer
  if (data?.ServerName !== undefined) view.setBigUint64(16, data.ServerName === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.ServerName))), true);
  // 0x18: pointer
  if (data?.ServerRealm !== undefined) view.setBigUint64(24, data.ServerRealm === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.ServerRealm))), true);
  // 0x20: pointer
  if (data?.StartTime !== undefined) view.setBigUint64(32, data.StartTime === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.StartTime))), true);
  // 0x28: pointer
  if (data?.EndTime !== undefined) view.setBigUint64(40, data.EndTime === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.EndTime))), true);
  // 0x30: pointer
  if (data?.RenewTime !== undefined) view.setBigUint64(48, data.RenewTime === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.RenewTime))), true);
  // 0x38: i32
  if (data?.EncryptionType !== undefined) view.setInt32(56, Number(data.EncryptionType), true);
  // 0x3c: u32
  if (data?.TicketFlags !== undefined) view.setUint32(60, Number(data.TicketFlags), true);
  // 0x40: u32
  if (data?.SessionKeyType !== undefined) view.setUint32(64, Number(data.SessionKeyType), true);
  // 0x44: u32
  if (data?.BranchId !== undefined) view.setUint32(68, Number(data.BranchId), true);
  // 0x48: u32
  if (data?.CacheFlags !== undefined) view.setUint32(72, Number(data.CacheFlags), true);
  // 0x4c: pad4
  // 0x50: pointer
  if (data?.KdcCalled !== undefined) view.setBigUint64(80, data.KdcCalled === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.KdcCalled))), true);
  return buf;
}

export class KERB_TICKET_CACHE_INFO_EX3View {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get ClientName(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(0, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x08: pointer
  get ClientRealm(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x10: pointer
  get ServerName(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(16, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x18: pointer
  get ServerRealm(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(24, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x20: pointer
  get StartTime(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(32, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x28: pointer
  get EndTime(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(40, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x30: pointer
  get RenewTime(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(48, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x38: i32
  get EncryptionType(): number {
    return this.view.getInt32(56, true);
  }

  // 0x3c: u32
  get TicketFlags(): number {
    return this.view.getUint32(60, true);
  }

  // 0x40: u32
  get SessionKeyType(): number {
    return this.view.getUint32(64, true);
  }

  // 0x44: u32
  get BranchId(): number {
    return this.view.getUint32(68, true);
  }

  // 0x48: u32
  get CacheFlags(): number {
    return this.view.getUint32(72, true);
  }

  // 0x4c: pad4

  // 0x50: pointer
  get KdcCalled(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(80, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: pointer
  set ClientName(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(0, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x08: pointer
  set ClientRealm(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x10: pointer
  set ServerName(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(16, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x18: pointer
  set ServerRealm(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(24, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x20: pointer
  set StartTime(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(32, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x28: pointer
  set EndTime(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(40, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x30: pointer
  set RenewTime(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(48, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x38: i32
  set EncryptionType(value: number) {
    this.view.setInt32(56, value, true);
  }

  // 0x3c: u32
  set TicketFlags(value: number) {
    this.view.setUint32(60, value, true);
  }

  // 0x40: u32
  set SessionKeyType(value: number) {
    this.view.setUint32(64, value, true);
  }

  // 0x44: u32
  set BranchId(value: number) {
    this.view.setUint32(68, value, true);
  }

  // 0x48: u32
  set CacheFlags(value: number) {
    this.view.setUint32(72, value, true);
  }

  // 0x4c: pad4

  // 0x50: pointer
  set KdcCalled(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(80, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.Security.Authentication.Identity.KERB_QUERY_TKT_CACHE_RESPONSE (size: 16)
 */
export interface KERB_QUERY_TKT_CACHE_RESPONSE {
  /** Windows.Win32.Security.Authentication.Identity.KERB_PROTOCOL_MESSAGE_TYPE */
  MessageType: KERB_PROTOCOL_MESSAGE_TYPE;
  /** u32 */
  CountOfTickets: number;
  /** array */
  Tickets: Deno.PointerValue;
}

export const sizeofKERB_QUERY_TKT_CACHE_RESPONSE = 16;

export function allocKERB_QUERY_TKT_CACHE_RESPONSE(data?: Partial<KERB_QUERY_TKT_CACHE_RESPONSE>): Uint8Array {
  const buf = new Uint8Array(sizeofKERB_QUERY_TKT_CACHE_RESPONSE);
  const view = new DataView(buf.buffer);
  // 0x00: i32
  if (data?.MessageType !== undefined) view.setInt32(0, Number(data.MessageType), true);
  // 0x04: u32
  if (data?.CountOfTickets !== undefined) view.setUint32(4, Number(data.CountOfTickets), true);
  // 0x08: pointer
  if (data?.Tickets !== undefined) view.setBigUint64(8, data.Tickets === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.Tickets))), true);
  return buf;
}

export class KERB_QUERY_TKT_CACHE_RESPONSEView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: i32
  get MessageType(): number {
    return this.view.getInt32(0, true);
  }

  // 0x04: u32
  get CountOfTickets(): number {
    return this.view.getUint32(4, true);
  }

  // 0x08: pointer
  get Tickets(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: i32
  set MessageType(value: number) {
    this.view.setInt32(0, value, true);
  }

  // 0x04: u32
  set CountOfTickets(value: number) {
    this.view.setUint32(4, value, true);
  }

  // 0x08: pointer
  set Tickets(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.Security.Authentication.Identity.KERB_QUERY_TKT_CACHE_EX_RESPONSE (size: 16)
 */
export interface KERB_QUERY_TKT_CACHE_EX_RESPONSE {
  /** Windows.Win32.Security.Authentication.Identity.KERB_PROTOCOL_MESSAGE_TYPE */
  MessageType: KERB_PROTOCOL_MESSAGE_TYPE;
  /** u32 */
  CountOfTickets: number;
  /** array */
  Tickets: Deno.PointerValue;
}

export const sizeofKERB_QUERY_TKT_CACHE_EX_RESPONSE = 16;

export function allocKERB_QUERY_TKT_CACHE_EX_RESPONSE(data?: Partial<KERB_QUERY_TKT_CACHE_EX_RESPONSE>): Uint8Array {
  const buf = new Uint8Array(sizeofKERB_QUERY_TKT_CACHE_EX_RESPONSE);
  const view = new DataView(buf.buffer);
  // 0x00: i32
  if (data?.MessageType !== undefined) view.setInt32(0, Number(data.MessageType), true);
  // 0x04: u32
  if (data?.CountOfTickets !== undefined) view.setUint32(4, Number(data.CountOfTickets), true);
  // 0x08: pointer
  if (data?.Tickets !== undefined) view.setBigUint64(8, data.Tickets === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.Tickets))), true);
  return buf;
}

export class KERB_QUERY_TKT_CACHE_EX_RESPONSEView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: i32
  get MessageType(): number {
    return this.view.getInt32(0, true);
  }

  // 0x04: u32
  get CountOfTickets(): number {
    return this.view.getUint32(4, true);
  }

  // 0x08: pointer
  get Tickets(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: i32
  set MessageType(value: number) {
    this.view.setInt32(0, value, true);
  }

  // 0x04: u32
  set CountOfTickets(value: number) {
    this.view.setUint32(4, value, true);
  }

  // 0x08: pointer
  set Tickets(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.Security.Authentication.Identity.KERB_QUERY_TKT_CACHE_EX2_RESPONSE (size: 16)
 */
export interface KERB_QUERY_TKT_CACHE_EX2_RESPONSE {
  /** Windows.Win32.Security.Authentication.Identity.KERB_PROTOCOL_MESSAGE_TYPE */
  MessageType: KERB_PROTOCOL_MESSAGE_TYPE;
  /** u32 */
  CountOfTickets: number;
  /** array */
  Tickets: Deno.PointerValue;
}

export const sizeofKERB_QUERY_TKT_CACHE_EX2_RESPONSE = 16;

export function allocKERB_QUERY_TKT_CACHE_EX2_RESPONSE(data?: Partial<KERB_QUERY_TKT_CACHE_EX2_RESPONSE>): Uint8Array {
  const buf = new Uint8Array(sizeofKERB_QUERY_TKT_CACHE_EX2_RESPONSE);
  const view = new DataView(buf.buffer);
  // 0x00: i32
  if (data?.MessageType !== undefined) view.setInt32(0, Number(data.MessageType), true);
  // 0x04: u32
  if (data?.CountOfTickets !== undefined) view.setUint32(4, Number(data.CountOfTickets), true);
  // 0x08: pointer
  if (data?.Tickets !== undefined) view.setBigUint64(8, data.Tickets === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.Tickets))), true);
  return buf;
}

export class KERB_QUERY_TKT_CACHE_EX2_RESPONSEView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: i32
  get MessageType(): number {
    return this.view.getInt32(0, true);
  }

  // 0x04: u32
  get CountOfTickets(): number {
    return this.view.getUint32(4, true);
  }

  // 0x08: pointer
  get Tickets(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: i32
  set MessageType(value: number) {
    this.view.setInt32(0, value, true);
  }

  // 0x04: u32
  set CountOfTickets(value: number) {
    this.view.setUint32(4, value, true);
  }

  // 0x08: pointer
  set Tickets(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.Security.Authentication.Identity.KERB_QUERY_TKT_CACHE_EX3_RESPONSE (size: 16)
 */
export interface KERB_QUERY_TKT_CACHE_EX3_RESPONSE {
  /** Windows.Win32.Security.Authentication.Identity.KERB_PROTOCOL_MESSAGE_TYPE */
  MessageType: KERB_PROTOCOL_MESSAGE_TYPE;
  /** u32 */
  CountOfTickets: number;
  /** array */
  Tickets: Deno.PointerValue;
}

export const sizeofKERB_QUERY_TKT_CACHE_EX3_RESPONSE = 16;

export function allocKERB_QUERY_TKT_CACHE_EX3_RESPONSE(data?: Partial<KERB_QUERY_TKT_CACHE_EX3_RESPONSE>): Uint8Array {
  const buf = new Uint8Array(sizeofKERB_QUERY_TKT_CACHE_EX3_RESPONSE);
  const view = new DataView(buf.buffer);
  // 0x00: i32
  if (data?.MessageType !== undefined) view.setInt32(0, Number(data.MessageType), true);
  // 0x04: u32
  if (data?.CountOfTickets !== undefined) view.setUint32(4, Number(data.CountOfTickets), true);
  // 0x08: pointer
  if (data?.Tickets !== undefined) view.setBigUint64(8, data.Tickets === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.Tickets))), true);
  return buf;
}

export class KERB_QUERY_TKT_CACHE_EX3_RESPONSEView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: i32
  get MessageType(): number {
    return this.view.getInt32(0, true);
  }

  // 0x04: u32
  get CountOfTickets(): number {
    return this.view.getUint32(4, true);
  }

  // 0x08: pointer
  get Tickets(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: i32
  set MessageType(value: number) {
    this.view.setInt32(0, value, true);
  }

  // 0x04: u32
  set CountOfTickets(value: number) {
    this.view.setUint32(4, value, true);
  }

  // 0x08: pointer
  set Tickets(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.Security.Authentication.Identity.KERB_AUTH_DATA (size: 16)
 */
export interface KERB_AUTH_DATA {
  /** u32 */
  Type: number;
  /** u32 */
  Length: number;
  /** ptr */
  Data: Deno.PointerValue | Uint8Array;
}

export const sizeofKERB_AUTH_DATA = 16;

export function allocKERB_AUTH_DATA(data?: Partial<KERB_AUTH_DATA>): Uint8Array {
  const buf = new Uint8Array(sizeofKERB_AUTH_DATA);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.Type !== undefined) view.setUint32(0, Number(data.Type), true);
  // 0x04: u32
  if (data?.Length !== undefined) view.setUint32(4, Number(data.Length), true);
  // 0x08: pointer
  if (data?.Data !== undefined) view.setBigUint64(8, data.Data === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.Data))), true);
  return buf;
}

export class KERB_AUTH_DATAView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get Type(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: u32
  get Length(): number {
    return this.view.getUint32(4, true);
  }

  // 0x08: pointer
  get Data(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: u32
  set Type(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: u32
  set Length(value: number) {
    this.view.setUint32(4, value, true);
  }

  // 0x08: pointer
  set Data(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.Security.Authentication.Identity.KERB_NET_ADDRESS (size: 16)
 */
export interface KERB_NET_ADDRESS {
  /** u32 */
  Family: number;
  /** u32 */
  Length: number;
  /** Windows.Win32.Foundation.PSTR */
  Address: string | null | Uint8Array;
}

export const sizeofKERB_NET_ADDRESS = 16;

export function allocKERB_NET_ADDRESS(data?: Partial<KERB_NET_ADDRESS>): Uint8Array {
  const buf = new Uint8Array(sizeofKERB_NET_ADDRESS);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.Family !== undefined) view.setUint32(0, Number(data.Family), true);
  // 0x04: u32
  if (data?.Length !== undefined) view.setUint32(4, Number(data.Length), true);
  // 0x08: buffer
  if (data?.Address !== undefined) {
    (buf as any)._f8 = util.pstrToFfi(data.Address);
    view.setBigUint64(8, (buf as any)._f8 === null ? 0n : BigInt(Deno.UnsafePointer.value(Deno.UnsafePointer.of((buf as any)._f8))), true);
  }
  return buf;
}

export class KERB_NET_ADDRESSView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get Family(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: u32
  get Length(): number {
    return this.view.getUint32(4, true);
  }

  // 0x08: buffer
  get Address(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: u32
  set Family(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: u32
  set Length(value: number) {
    this.view.setUint32(4, value, true);
  }

  // 0x08: buffer
  set Address(value: Uint8Array | Deno.PointerValue) {
    (this.buf as any)._f8 = value;
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer((this.buf as any)._f8))), true);
  }
}

/**
 * Windows.Win32.Security.Authentication.Identity.KERB_NET_ADDRESSES (size: 16)
 */
export interface KERB_NET_ADDRESSES {
  /** u32 */
  Number: number;
  /** array */
  Addresses: Deno.PointerValue;
}

export const sizeofKERB_NET_ADDRESSES = 16;

export function allocKERB_NET_ADDRESSES(data?: Partial<KERB_NET_ADDRESSES>): Uint8Array {
  const buf = new Uint8Array(sizeofKERB_NET_ADDRESSES);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.Number !== undefined) view.setUint32(0, Number(data.Number), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.Addresses !== undefined) view.setBigUint64(8, data.Addresses === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.Addresses))), true);
  return buf;
}

export class KERB_NET_ADDRESSESView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get Number(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  get Addresses(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: u32
  set Number(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  set Addresses(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.Security.Authentication.Identity.KERB_EXTERNAL_NAME (size: 16)
 */
export interface KERB_EXTERNAL_NAME {
  /** i16 */
  NameType: number;
  /** u16 */
  NameCount: number;
  /** array */
  Names: Deno.PointerValue;
}

export const sizeofKERB_EXTERNAL_NAME = 16;

export function allocKERB_EXTERNAL_NAME(data?: Partial<KERB_EXTERNAL_NAME>): Uint8Array {
  const buf = new Uint8Array(sizeofKERB_EXTERNAL_NAME);
  const view = new DataView(buf.buffer);
  // 0x00: i16
  if (data?.NameType !== undefined) view.setInt16(0, Number(data.NameType), true);
  // 0x02: u16
  if (data?.NameCount !== undefined) view.setUint16(2, Number(data.NameCount), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.Names !== undefined) view.setBigUint64(8, data.Names === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.Names))), true);
  return buf;
}

export class KERB_EXTERNAL_NAMEView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: i16
  get NameType(): number {
    return this.view.getInt16(0, true);
  }

  // 0x02: u16
  get NameCount(): number {
    return this.view.getUint16(2, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  get Names(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: i16
  set NameType(value: number) {
    this.view.setInt16(0, value, true);
  }

  // 0x02: u16
  set NameCount(value: number) {
    this.view.setUint16(2, value, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  set Names(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.Security.Authentication.Identity.KERB_EXTERNAL_TICKET (size: 120)
 */
export interface KERB_EXTERNAL_TICKET {
  /** ptr */
  ServiceName: Deno.PointerValue | Uint8Array;
  /** ptr */
  TargetName: Deno.PointerValue | Uint8Array;
  /** ptr */
  ClientName: Deno.PointerValue | Uint8Array;
  /** Windows.Win32.Foundation.UNICODE_STRING */
  DomainName: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.Foundation.UNICODE_STRING */
  TargetDomainName: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.Foundation.UNICODE_STRING */
  AltTargetDomainName: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.Security.Authentication.Identity.KERB_CRYPTO_KEY */
  SessionKey: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.Security.Authentication.Identity.KERB_TICKET_FLAGS */
  TicketFlags: KERB_TICKET_FLAGS;
  /** u32 */
  Flags: number;
  /** Windows.Win32.Foundation.LARGE_INTEGER */
  KeyExpirationTime: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.Foundation.LARGE_INTEGER */
  StartTime: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.Foundation.LARGE_INTEGER */
  EndTime: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.Foundation.LARGE_INTEGER */
  RenewUntil: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.Foundation.LARGE_INTEGER */
  TimeSkew: Uint8Array | Deno.PointerValue;
  /** u32 */
  EncodedTicketSize: number;
  /** ptr */
  EncodedTicket: Deno.PointerValue | Uint8Array;
}

export const sizeofKERB_EXTERNAL_TICKET = 120;

export function allocKERB_EXTERNAL_TICKET(data?: Partial<KERB_EXTERNAL_TICKET>): Uint8Array {
  const buf = new Uint8Array(sizeofKERB_EXTERNAL_TICKET);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.ServiceName !== undefined) view.setBigUint64(0, data.ServiceName === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.ServiceName))), true);
  // 0x08: pointer
  if (data?.TargetName !== undefined) view.setBigUint64(8, data.TargetName === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.TargetName))), true);
  // 0x10: pointer
  if (data?.ClientName !== undefined) view.setBigUint64(16, data.ClientName === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.ClientName))), true);
  // 0x18: pointer
  if (data?.DomainName !== undefined) view.setBigUint64(24, data.DomainName === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.DomainName))), true);
  // 0x20: pointer
  if (data?.TargetDomainName !== undefined) view.setBigUint64(32, data.TargetDomainName === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.TargetDomainName))), true);
  // 0x28: pointer
  if (data?.AltTargetDomainName !== undefined) view.setBigUint64(40, data.AltTargetDomainName === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.AltTargetDomainName))), true);
  // 0x30: pointer
  if (data?.SessionKey !== undefined) view.setBigUint64(48, data.SessionKey === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.SessionKey))), true);
  // 0x38: u32
  if (data?.TicketFlags !== undefined) view.setUint32(56, Number(data.TicketFlags), true);
  // 0x3c: u32
  if (data?.Flags !== undefined) view.setUint32(60, Number(data.Flags), true);
  // 0x40: pointer
  if (data?.KeyExpirationTime !== undefined) view.setBigUint64(64, data.KeyExpirationTime === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.KeyExpirationTime))), true);
  // 0x48: pointer
  if (data?.StartTime !== undefined) view.setBigUint64(72, data.StartTime === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.StartTime))), true);
  // 0x50: pointer
  if (data?.EndTime !== undefined) view.setBigUint64(80, data.EndTime === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.EndTime))), true);
  // 0x58: pointer
  if (data?.RenewUntil !== undefined) view.setBigUint64(88, data.RenewUntil === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.RenewUntil))), true);
  // 0x60: pointer
  if (data?.TimeSkew !== undefined) view.setBigUint64(96, data.TimeSkew === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.TimeSkew))), true);
  // 0x68: u32
  if (data?.EncodedTicketSize !== undefined) view.setUint32(104, Number(data.EncodedTicketSize), true);
  // 0x6c: pad4
  // 0x70: pointer
  if (data?.EncodedTicket !== undefined) view.setBigUint64(112, data.EncodedTicket === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.EncodedTicket))), true);
  return buf;
}

export class KERB_EXTERNAL_TICKETView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get ServiceName(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(0, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x08: pointer
  get TargetName(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x10: pointer
  get ClientName(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(16, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x18: pointer
  get DomainName(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(24, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x20: pointer
  get TargetDomainName(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(32, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x28: pointer
  get AltTargetDomainName(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(40, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x30: pointer
  get SessionKey(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(48, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x38: u32
  get TicketFlags(): number {
    return this.view.getUint32(56, true);
  }

  // 0x3c: u32
  get Flags(): number {
    return this.view.getUint32(60, true);
  }

  // 0x40: pointer
  get KeyExpirationTime(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(64, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x48: pointer
  get StartTime(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(72, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x50: pointer
  get EndTime(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(80, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x58: pointer
  get RenewUntil(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(88, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x60: pointer
  get TimeSkew(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(96, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x68: u32
  get EncodedTicketSize(): number {
    return this.view.getUint32(104, true);
  }

  // 0x6c: pad4

  // 0x70: pointer
  get EncodedTicket(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(112, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: pointer
  set ServiceName(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(0, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x08: pointer
  set TargetName(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x10: pointer
  set ClientName(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(16, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x18: pointer
  set DomainName(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(24, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x20: pointer
  set TargetDomainName(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(32, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x28: pointer
  set AltTargetDomainName(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(40, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x30: pointer
  set SessionKey(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(48, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x38: u32
  set TicketFlags(value: number) {
    this.view.setUint32(56, value, true);
  }

  // 0x3c: u32
  set Flags(value: number) {
    this.view.setUint32(60, value, true);
  }

  // 0x40: pointer
  set KeyExpirationTime(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(64, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x48: pointer
  set StartTime(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(72, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x50: pointer
  set EndTime(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(80, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x58: pointer
  set RenewUntil(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(88, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x60: pointer
  set TimeSkew(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(96, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x68: u32
  set EncodedTicketSize(value: number) {
    this.view.setUint32(104, value, true);
  }

  // 0x6c: pad4

  // 0x70: pointer
  set EncodedTicket(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(112, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.Security.Credentials.SecHandle (size: 16)
 */
export interface SecHandle {
  /** usize */
  dwLower: Deno.PointerValue;
  /** usize */
  dwUpper: Deno.PointerValue;
}

export const sizeofSecHandle = 16;

export function allocSecHandle(data?: Partial<SecHandle>): Uint8Array {
  const buf = new Uint8Array(sizeofSecHandle);
  const view = new DataView(buf.buffer);
  // 0x00: usize
  if (data?.dwLower !== undefined) view.setBigUint64(0, BigInt(data.dwLower), true);
  // 0x08: usize
  if (data?.dwUpper !== undefined) view.setBigUint64(8, BigInt(data.dwUpper), true);
  return buf;
}

export class SecHandleView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: usize
  get dwLower(): Deno.PointerValue {
    return Number(this.view.getBigUint64(0, true));
  }

  // 0x08: usize
  get dwUpper(): Deno.PointerValue {
    return Number(this.view.getBigUint64(8, true));
  }

  // 0x00: usize
  set dwLower(value: Deno.PointerValue) {
    this.view.setBigUint64(0, BigInt(value), true);
  }

  // 0x08: usize
  set dwUpper(value: Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(value), true);
  }
}

/**
 * Windows.Win32.Security.Authentication.Identity.KERB_RETRIEVE_TKT_REQUEST (size: 48)
 */
export interface KERB_RETRIEVE_TKT_REQUEST {
  /** Windows.Win32.Security.Authentication.Identity.KERB_PROTOCOL_MESSAGE_TYPE */
  MessageType: KERB_PROTOCOL_MESSAGE_TYPE;
  /** Windows.Win32.Foundation.LUID */
  LogonId: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.Foundation.UNICODE_STRING */
  TargetName: Uint8Array | Deno.PointerValue;
  /** u32 */
  TicketFlags: number;
  /** u32 */
  CacheOptions: number;
  /** Windows.Win32.Security.Authentication.Identity.KERB_CRYPTO_KEY_TYPE */
  EncryptionType: KERB_CRYPTO_KEY_TYPE;
  /** Windows.Win32.Security.Credentials.SecHandle */
  CredentialsHandle: Uint8Array | Deno.PointerValue;
}

export const sizeofKERB_RETRIEVE_TKT_REQUEST = 48;

export function allocKERB_RETRIEVE_TKT_REQUEST(data?: Partial<KERB_RETRIEVE_TKT_REQUEST>): Uint8Array {
  const buf = new Uint8Array(sizeofKERB_RETRIEVE_TKT_REQUEST);
  const view = new DataView(buf.buffer);
  // 0x00: i32
  if (data?.MessageType !== undefined) view.setInt32(0, Number(data.MessageType), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.LogonId !== undefined) view.setBigUint64(8, data.LogonId === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.LogonId))), true);
  // 0x10: pointer
  if (data?.TargetName !== undefined) view.setBigUint64(16, data.TargetName === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.TargetName))), true);
  // 0x18: u32
  if (data?.TicketFlags !== undefined) view.setUint32(24, Number(data.TicketFlags), true);
  // 0x1c: u32
  if (data?.CacheOptions !== undefined) view.setUint32(28, Number(data.CacheOptions), true);
  // 0x20: i32
  if (data?.EncryptionType !== undefined) view.setInt32(32, Number(data.EncryptionType), true);
  // 0x24: pad4
  // 0x28: pointer
  if (data?.CredentialsHandle !== undefined) view.setBigUint64(40, data.CredentialsHandle === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.CredentialsHandle))), true);
  return buf;
}

export class KERB_RETRIEVE_TKT_REQUESTView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: i32
  get MessageType(): number {
    return this.view.getInt32(0, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  get LogonId(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x10: pointer
  get TargetName(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(16, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x18: u32
  get TicketFlags(): number {
    return this.view.getUint32(24, true);
  }

  // 0x1c: u32
  get CacheOptions(): number {
    return this.view.getUint32(28, true);
  }

  // 0x20: i32
  get EncryptionType(): number {
    return this.view.getInt32(32, true);
  }

  // 0x24: pad4

  // 0x28: pointer
  get CredentialsHandle(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(40, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: i32
  set MessageType(value: number) {
    this.view.setInt32(0, value, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  set LogonId(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x10: pointer
  set TargetName(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(16, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x18: u32
  set TicketFlags(value: number) {
    this.view.setUint32(24, value, true);
  }

  // 0x1c: u32
  set CacheOptions(value: number) {
    this.view.setUint32(28, value, true);
  }

  // 0x20: i32
  set EncryptionType(value: number) {
    this.view.setInt32(32, value, true);
  }

  // 0x24: pad4

  // 0x28: pointer
  set CredentialsHandle(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(40, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.Security.Authentication.Identity.KERB_RETRIEVE_TKT_RESPONSE (size: 8)
 */
export interface KERB_RETRIEVE_TKT_RESPONSE {
  /** Windows.Win32.Security.Authentication.Identity.KERB_EXTERNAL_TICKET */
  Ticket: Uint8Array | Deno.PointerValue;
}

export const sizeofKERB_RETRIEVE_TKT_RESPONSE = 8;

export function allocKERB_RETRIEVE_TKT_RESPONSE(data?: Partial<KERB_RETRIEVE_TKT_RESPONSE>): Uint8Array {
  const buf = new Uint8Array(sizeofKERB_RETRIEVE_TKT_RESPONSE);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.Ticket !== undefined) view.setBigUint64(0, data.Ticket === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.Ticket))), true);
  return buf;
}

export class KERB_RETRIEVE_TKT_RESPONSEView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get Ticket(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(0, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: pointer
  set Ticket(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(0, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.Security.Authentication.Identity.KERB_PURGE_TKT_CACHE_REQUEST (size: 32)
 */
export interface KERB_PURGE_TKT_CACHE_REQUEST {
  /** Windows.Win32.Security.Authentication.Identity.KERB_PROTOCOL_MESSAGE_TYPE */
  MessageType: KERB_PROTOCOL_MESSAGE_TYPE;
  /** Windows.Win32.Foundation.LUID */
  LogonId: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.Foundation.UNICODE_STRING */
  ServerName: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.Foundation.UNICODE_STRING */
  RealmName: Uint8Array | Deno.PointerValue;
}

export const sizeofKERB_PURGE_TKT_CACHE_REQUEST = 32;

export function allocKERB_PURGE_TKT_CACHE_REQUEST(data?: Partial<KERB_PURGE_TKT_CACHE_REQUEST>): Uint8Array {
  const buf = new Uint8Array(sizeofKERB_PURGE_TKT_CACHE_REQUEST);
  const view = new DataView(buf.buffer);
  // 0x00: i32
  if (data?.MessageType !== undefined) view.setInt32(0, Number(data.MessageType), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.LogonId !== undefined) view.setBigUint64(8, data.LogonId === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.LogonId))), true);
  // 0x10: pointer
  if (data?.ServerName !== undefined) view.setBigUint64(16, data.ServerName === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.ServerName))), true);
  // 0x18: pointer
  if (data?.RealmName !== undefined) view.setBigUint64(24, data.RealmName === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.RealmName))), true);
  return buf;
}

export class KERB_PURGE_TKT_CACHE_REQUESTView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: i32
  get MessageType(): number {
    return this.view.getInt32(0, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  get LogonId(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x10: pointer
  get ServerName(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(16, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x18: pointer
  get RealmName(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(24, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: i32
  set MessageType(value: number) {
    this.view.setInt32(0, value, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  set LogonId(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x10: pointer
  set ServerName(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(16, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x18: pointer
  set RealmName(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(24, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.Security.Authentication.Identity.KERB_PURGE_TKT_CACHE_EX_REQUEST (size: 32)
 */
export interface KERB_PURGE_TKT_CACHE_EX_REQUEST {
  /** Windows.Win32.Security.Authentication.Identity.KERB_PROTOCOL_MESSAGE_TYPE */
  MessageType: KERB_PROTOCOL_MESSAGE_TYPE;
  /** Windows.Win32.Foundation.LUID */
  LogonId: Uint8Array | Deno.PointerValue;
  /** u32 */
  Flags: number;
  /** Windows.Win32.Security.Authentication.Identity.KERB_TICKET_CACHE_INFO_EX */
  TicketTemplate: Uint8Array | Deno.PointerValue;
}

export const sizeofKERB_PURGE_TKT_CACHE_EX_REQUEST = 32;

export function allocKERB_PURGE_TKT_CACHE_EX_REQUEST(data?: Partial<KERB_PURGE_TKT_CACHE_EX_REQUEST>): Uint8Array {
  const buf = new Uint8Array(sizeofKERB_PURGE_TKT_CACHE_EX_REQUEST);
  const view = new DataView(buf.buffer);
  // 0x00: i32
  if (data?.MessageType !== undefined) view.setInt32(0, Number(data.MessageType), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.LogonId !== undefined) view.setBigUint64(8, data.LogonId === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.LogonId))), true);
  // 0x10: u32
  if (data?.Flags !== undefined) view.setUint32(16, Number(data.Flags), true);
  // 0x14: pad4
  // 0x18: pointer
  if (data?.TicketTemplate !== undefined) view.setBigUint64(24, data.TicketTemplate === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.TicketTemplate))), true);
  return buf;
}

export class KERB_PURGE_TKT_CACHE_EX_REQUESTView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: i32
  get MessageType(): number {
    return this.view.getInt32(0, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  get LogonId(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x10: u32
  get Flags(): number {
    return this.view.getUint32(16, true);
  }

  // 0x14: pad4

  // 0x18: pointer
  get TicketTemplate(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(24, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: i32
  set MessageType(value: number) {
    this.view.setInt32(0, value, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  set LogonId(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x10: u32
  set Flags(value: number) {
    this.view.setUint32(16, value, true);
  }

  // 0x14: pad4

  // 0x18: pointer
  set TicketTemplate(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(24, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.Security.Authentication.Identity.KERB_SUBMIT_TKT_REQUEST (size: 40)
 */
export interface KERB_SUBMIT_TKT_REQUEST {
  /** Windows.Win32.Security.Authentication.Identity.KERB_PROTOCOL_MESSAGE_TYPE */
  MessageType: KERB_PROTOCOL_MESSAGE_TYPE;
  /** Windows.Win32.Foundation.LUID */
  LogonId: Uint8Array | Deno.PointerValue;
  /** u32 */
  Flags: number;
  /** Windows.Win32.Security.Authentication.Identity.KERB_CRYPTO_KEY32 */
  Key: Uint8Array | Deno.PointerValue;
  /** u32 */
  KerbCredSize: number;
  /** u32 */
  KerbCredOffset: number;
}

export const sizeofKERB_SUBMIT_TKT_REQUEST = 40;

export function allocKERB_SUBMIT_TKT_REQUEST(data?: Partial<KERB_SUBMIT_TKT_REQUEST>): Uint8Array {
  const buf = new Uint8Array(sizeofKERB_SUBMIT_TKT_REQUEST);
  const view = new DataView(buf.buffer);
  // 0x00: i32
  if (data?.MessageType !== undefined) view.setInt32(0, Number(data.MessageType), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.LogonId !== undefined) view.setBigUint64(8, data.LogonId === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.LogonId))), true);
  // 0x10: u32
  if (data?.Flags !== undefined) view.setUint32(16, Number(data.Flags), true);
  // 0x14: pad4
  // 0x18: pointer
  if (data?.Key !== undefined) view.setBigUint64(24, data.Key === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.Key))), true);
  // 0x20: u32
  if (data?.KerbCredSize !== undefined) view.setUint32(32, Number(data.KerbCredSize), true);
  // 0x24: u32
  if (data?.KerbCredOffset !== undefined) view.setUint32(36, Number(data.KerbCredOffset), true);
  return buf;
}

export class KERB_SUBMIT_TKT_REQUESTView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: i32
  get MessageType(): number {
    return this.view.getInt32(0, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  get LogonId(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x10: u32
  get Flags(): number {
    return this.view.getUint32(16, true);
  }

  // 0x14: pad4

  // 0x18: pointer
  get Key(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(24, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x20: u32
  get KerbCredSize(): number {
    return this.view.getUint32(32, true);
  }

  // 0x24: u32
  get KerbCredOffset(): number {
    return this.view.getUint32(36, true);
  }

  // 0x00: i32
  set MessageType(value: number) {
    this.view.setInt32(0, value, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  set LogonId(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x10: u32
  set Flags(value: number) {
    this.view.setUint32(16, value, true);
  }

  // 0x14: pad4

  // 0x18: pointer
  set Key(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(24, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x20: u32
  set KerbCredSize(value: number) {
    this.view.setUint32(32, value, true);
  }

  // 0x24: u32
  set KerbCredOffset(value: number) {
    this.view.setUint32(36, value, true);
  }
}

/**
 * Windows.Win32.Security.Authentication.Identity.KERB_QUERY_KDC_PROXY_CACHE_REQUEST (size: 16)
 */
export interface KERB_QUERY_KDC_PROXY_CACHE_REQUEST {
  /** Windows.Win32.Security.Authentication.Identity.KERB_PROTOCOL_MESSAGE_TYPE */
  MessageType: KERB_PROTOCOL_MESSAGE_TYPE;
  /** u32 */
  Flags: number;
  /** Windows.Win32.Foundation.LUID */
  LogonId: Uint8Array | Deno.PointerValue;
}

export const sizeofKERB_QUERY_KDC_PROXY_CACHE_REQUEST = 16;

export function allocKERB_QUERY_KDC_PROXY_CACHE_REQUEST(data?: Partial<KERB_QUERY_KDC_PROXY_CACHE_REQUEST>): Uint8Array {
  const buf = new Uint8Array(sizeofKERB_QUERY_KDC_PROXY_CACHE_REQUEST);
  const view = new DataView(buf.buffer);
  // 0x00: i32
  if (data?.MessageType !== undefined) view.setInt32(0, Number(data.MessageType), true);
  // 0x04: u32
  if (data?.Flags !== undefined) view.setUint32(4, Number(data.Flags), true);
  // 0x08: pointer
  if (data?.LogonId !== undefined) view.setBigUint64(8, data.LogonId === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.LogonId))), true);
  return buf;
}

export class KERB_QUERY_KDC_PROXY_CACHE_REQUESTView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: i32
  get MessageType(): number {
    return this.view.getInt32(0, true);
  }

  // 0x04: u32
  get Flags(): number {
    return this.view.getUint32(4, true);
  }

  // 0x08: pointer
  get LogonId(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: i32
  set MessageType(value: number) {
    this.view.setInt32(0, value, true);
  }

  // 0x04: u32
  set Flags(value: number) {
    this.view.setUint32(4, value, true);
  }

  // 0x08: pointer
  set LogonId(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.Security.Authentication.Identity.KDC_PROXY_CACHE_ENTRY_DATA (size: 72)
 */
export interface KDC_PROXY_CACHE_ENTRY_DATA {
  /** u64 */
  SinceLastUsed: Deno.PointerValue;
  /** Windows.Win32.Foundation.UNICODE_STRING */
  DomainName: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.Foundation.UNICODE_STRING */
  ProxyServerName: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.Foundation.UNICODE_STRING */
  ProxyServerVdir: Uint8Array | Deno.PointerValue;
  /** u16 */
  ProxyServerPort: number;
  /** Windows.Win32.Foundation.LUID */
  LogonId: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.Foundation.UNICODE_STRING */
  CredUserName: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.Foundation.UNICODE_STRING */
  CredDomainName: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.Foundation.BOOLEAN */
  GlobalCache: Uint8Array | Deno.PointerValue;
}

export const sizeofKDC_PROXY_CACHE_ENTRY_DATA = 72;

export function allocKDC_PROXY_CACHE_ENTRY_DATA(data?: Partial<KDC_PROXY_CACHE_ENTRY_DATA>): Uint8Array {
  const buf = new Uint8Array(sizeofKDC_PROXY_CACHE_ENTRY_DATA);
  const view = new DataView(buf.buffer);
  // 0x00: u64
  if (data?.SinceLastUsed !== undefined) view.setBigUint64(0, BigInt(data.SinceLastUsed), true);
  // 0x08: pointer
  if (data?.DomainName !== undefined) view.setBigUint64(8, data.DomainName === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.DomainName))), true);
  // 0x10: pointer
  if (data?.ProxyServerName !== undefined) view.setBigUint64(16, data.ProxyServerName === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.ProxyServerName))), true);
  // 0x18: pointer
  if (data?.ProxyServerVdir !== undefined) view.setBigUint64(24, data.ProxyServerVdir === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.ProxyServerVdir))), true);
  // 0x20: u16
  if (data?.ProxyServerPort !== undefined) view.setUint16(32, Number(data.ProxyServerPort), true);
  // 0x22: pad6
  // 0x28: pointer
  if (data?.LogonId !== undefined) view.setBigUint64(40, data.LogonId === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.LogonId))), true);
  // 0x30: pointer
  if (data?.CredUserName !== undefined) view.setBigUint64(48, data.CredUserName === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.CredUserName))), true);
  // 0x38: pointer
  if (data?.CredDomainName !== undefined) view.setBigUint64(56, data.CredDomainName === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.CredDomainName))), true);
  // 0x40: pointer
  if (data?.GlobalCache !== undefined) view.setBigUint64(64, data.GlobalCache === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.GlobalCache))), true);
  return buf;
}

export class KDC_PROXY_CACHE_ENTRY_DATAView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u64
  get SinceLastUsed(): Deno.PointerValue {
    return Number(this.view.getBigUint64(0, true));
  }

  // 0x08: pointer
  get DomainName(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x10: pointer
  get ProxyServerName(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(16, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x18: pointer
  get ProxyServerVdir(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(24, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x20: u16
  get ProxyServerPort(): number {
    return this.view.getUint16(32, true);
  }

  // 0x22: pad6

  // 0x28: pointer
  get LogonId(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(40, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x30: pointer
  get CredUserName(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(48, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x38: pointer
  get CredDomainName(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(56, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x40: pointer
  get GlobalCache(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(64, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: u64
  set SinceLastUsed(value: Deno.PointerValue) {
    this.view.setBigUint64(0, BigInt(value), true);
  }

  // 0x08: pointer
  set DomainName(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x10: pointer
  set ProxyServerName(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(16, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x18: pointer
  set ProxyServerVdir(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(24, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x20: u16
  set ProxyServerPort(value: number) {
    this.view.setUint16(32, value, true);
  }

  // 0x22: pad6

  // 0x28: pointer
  set LogonId(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(40, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x30: pointer
  set CredUserName(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(48, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x38: pointer
  set CredDomainName(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(56, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x40: pointer
  set GlobalCache(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(64, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.Security.Authentication.Identity.KERB_QUERY_KDC_PROXY_CACHE_RESPONSE (size: 16)
 */
export interface KERB_QUERY_KDC_PROXY_CACHE_RESPONSE {
  /** Windows.Win32.Security.Authentication.Identity.KERB_PROTOCOL_MESSAGE_TYPE */
  MessageType: KERB_PROTOCOL_MESSAGE_TYPE;
  /** u32 */
  CountOfEntries: number;
  /** ptr */
  Entries: Deno.PointerValue | Uint8Array;
}

export const sizeofKERB_QUERY_KDC_PROXY_CACHE_RESPONSE = 16;

export function allocKERB_QUERY_KDC_PROXY_CACHE_RESPONSE(data?: Partial<KERB_QUERY_KDC_PROXY_CACHE_RESPONSE>): Uint8Array {
  const buf = new Uint8Array(sizeofKERB_QUERY_KDC_PROXY_CACHE_RESPONSE);
  const view = new DataView(buf.buffer);
  // 0x00: i32
  if (data?.MessageType !== undefined) view.setInt32(0, Number(data.MessageType), true);
  // 0x04: u32
  if (data?.CountOfEntries !== undefined) view.setUint32(4, Number(data.CountOfEntries), true);
  // 0x08: pointer
  if (data?.Entries !== undefined) view.setBigUint64(8, data.Entries === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.Entries))), true);
  return buf;
}

export class KERB_QUERY_KDC_PROXY_CACHE_RESPONSEView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: i32
  get MessageType(): number {
    return this.view.getInt32(0, true);
  }

  // 0x04: u32
  get CountOfEntries(): number {
    return this.view.getUint32(4, true);
  }

  // 0x08: pointer
  get Entries(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: i32
  set MessageType(value: number) {
    this.view.setInt32(0, value, true);
  }

  // 0x04: u32
  set CountOfEntries(value: number) {
    this.view.setUint32(4, value, true);
  }

  // 0x08: pointer
  set Entries(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.Security.Authentication.Identity.KERB_PURGE_KDC_PROXY_CACHE_REQUEST (size: 16)
 */
export interface KERB_PURGE_KDC_PROXY_CACHE_REQUEST {
  /** Windows.Win32.Security.Authentication.Identity.KERB_PROTOCOL_MESSAGE_TYPE */
  MessageType: KERB_PROTOCOL_MESSAGE_TYPE;
  /** u32 */
  Flags: number;
  /** Windows.Win32.Foundation.LUID */
  LogonId: Uint8Array | Deno.PointerValue;
}

export const sizeofKERB_PURGE_KDC_PROXY_CACHE_REQUEST = 16;

export function allocKERB_PURGE_KDC_PROXY_CACHE_REQUEST(data?: Partial<KERB_PURGE_KDC_PROXY_CACHE_REQUEST>): Uint8Array {
  const buf = new Uint8Array(sizeofKERB_PURGE_KDC_PROXY_CACHE_REQUEST);
  const view = new DataView(buf.buffer);
  // 0x00: i32
  if (data?.MessageType !== undefined) view.setInt32(0, Number(data.MessageType), true);
  // 0x04: u32
  if (data?.Flags !== undefined) view.setUint32(4, Number(data.Flags), true);
  // 0x08: pointer
  if (data?.LogonId !== undefined) view.setBigUint64(8, data.LogonId === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.LogonId))), true);
  return buf;
}

export class KERB_PURGE_KDC_PROXY_CACHE_REQUESTView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: i32
  get MessageType(): number {
    return this.view.getInt32(0, true);
  }

  // 0x04: u32
  get Flags(): number {
    return this.view.getUint32(4, true);
  }

  // 0x08: pointer
  get LogonId(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: i32
  set MessageType(value: number) {
    this.view.setInt32(0, value, true);
  }

  // 0x04: u32
  set Flags(value: number) {
    this.view.setUint32(4, value, true);
  }

  // 0x08: pointer
  set LogonId(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.Security.Authentication.Identity.KERB_PURGE_KDC_PROXY_CACHE_RESPONSE (size: 8)
 */
export interface KERB_PURGE_KDC_PROXY_CACHE_RESPONSE {
  /** Windows.Win32.Security.Authentication.Identity.KERB_PROTOCOL_MESSAGE_TYPE */
  MessageType: KERB_PROTOCOL_MESSAGE_TYPE;
  /** u32 */
  CountOfPurged: number;
}

export const sizeofKERB_PURGE_KDC_PROXY_CACHE_RESPONSE = 8;

export function allocKERB_PURGE_KDC_PROXY_CACHE_RESPONSE(data?: Partial<KERB_PURGE_KDC_PROXY_CACHE_RESPONSE>): Uint8Array {
  const buf = new Uint8Array(sizeofKERB_PURGE_KDC_PROXY_CACHE_RESPONSE);
  const view = new DataView(buf.buffer);
  // 0x00: i32
  if (data?.MessageType !== undefined) view.setInt32(0, Number(data.MessageType), true);
  // 0x04: u32
  if (data?.CountOfPurged !== undefined) view.setUint32(4, Number(data.CountOfPurged), true);
  return buf;
}

export class KERB_PURGE_KDC_PROXY_CACHE_RESPONSEView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: i32
  get MessageType(): number {
    return this.view.getInt32(0, true);
  }

  // 0x04: u32
  get CountOfPurged(): number {
    return this.view.getUint32(4, true);
  }

  // 0x00: i32
  set MessageType(value: number) {
    this.view.setInt32(0, value, true);
  }

  // 0x04: u32
  set CountOfPurged(value: number) {
    this.view.setUint32(4, value, true);
  }
}

export type NTSTATUS = number;

/**
 * Windows.Win32.Security.Authentication.Identity.KERB_S4U2PROXY_CACHE_ENTRY_INFO (size: 32)
 */
export interface KERB_S4U2PROXY_CACHE_ENTRY_INFO {
  /** Windows.Win32.Foundation.UNICODE_STRING */
  ServerName: Uint8Array | Deno.PointerValue;
  /** u32 */
  Flags: number;
  /** Windows.Win32.Foundation.NTSTATUS */
  LastStatus: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.Foundation.LARGE_INTEGER */
  Expiry: Uint8Array | Deno.PointerValue;
}

export const sizeofKERB_S4U2PROXY_CACHE_ENTRY_INFO = 32;

export function allocKERB_S4U2PROXY_CACHE_ENTRY_INFO(data?: Partial<KERB_S4U2PROXY_CACHE_ENTRY_INFO>): Uint8Array {
  const buf = new Uint8Array(sizeofKERB_S4U2PROXY_CACHE_ENTRY_INFO);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.ServerName !== undefined) view.setBigUint64(0, data.ServerName === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.ServerName))), true);
  // 0x08: u32
  if (data?.Flags !== undefined) view.setUint32(8, Number(data.Flags), true);
  // 0x0c: pad4
  // 0x10: pointer
  if (data?.LastStatus !== undefined) view.setBigUint64(16, data.LastStatus === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.LastStatus))), true);
  // 0x18: pointer
  if (data?.Expiry !== undefined) view.setBigUint64(24, data.Expiry === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.Expiry))), true);
  return buf;
}

export class KERB_S4U2PROXY_CACHE_ENTRY_INFOView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get ServerName(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(0, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x08: u32
  get Flags(): number {
    return this.view.getUint32(8, true);
  }

  // 0x0c: pad4

  // 0x10: pointer
  get LastStatus(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(16, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x18: pointer
  get Expiry(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(24, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: pointer
  set ServerName(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(0, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x08: u32
  set Flags(value: number) {
    this.view.setUint32(8, value, true);
  }

  // 0x0c: pad4

  // 0x10: pointer
  set LastStatus(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(16, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x18: pointer
  set Expiry(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(24, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.Security.Authentication.Identity.KERB_S4U2PROXY_CRED (size: 56)
 */
export interface KERB_S4U2PROXY_CRED {
  /** Windows.Win32.Foundation.UNICODE_STRING */
  UserName: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.Foundation.UNICODE_STRING */
  DomainName: Uint8Array | Deno.PointerValue;
  /** u32 */
  Flags: number;
  /** Windows.Win32.Foundation.NTSTATUS */
  LastStatus: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.Foundation.LARGE_INTEGER */
  Expiry: Uint8Array | Deno.PointerValue;
  /** u32 */
  CountOfEntries: number;
  /** ptr */
  Entries: Deno.PointerValue | Uint8Array;
}

export const sizeofKERB_S4U2PROXY_CRED = 56;

export function allocKERB_S4U2PROXY_CRED(data?: Partial<KERB_S4U2PROXY_CRED>): Uint8Array {
  const buf = new Uint8Array(sizeofKERB_S4U2PROXY_CRED);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.UserName !== undefined) view.setBigUint64(0, data.UserName === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.UserName))), true);
  // 0x08: pointer
  if (data?.DomainName !== undefined) view.setBigUint64(8, data.DomainName === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.DomainName))), true);
  // 0x10: u32
  if (data?.Flags !== undefined) view.setUint32(16, Number(data.Flags), true);
  // 0x14: pad4
  // 0x18: pointer
  if (data?.LastStatus !== undefined) view.setBigUint64(24, data.LastStatus === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.LastStatus))), true);
  // 0x20: pointer
  if (data?.Expiry !== undefined) view.setBigUint64(32, data.Expiry === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.Expiry))), true);
  // 0x28: u32
  if (data?.CountOfEntries !== undefined) view.setUint32(40, Number(data.CountOfEntries), true);
  // 0x2c: pad4
  // 0x30: pointer
  if (data?.Entries !== undefined) view.setBigUint64(48, data.Entries === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.Entries))), true);
  return buf;
}

export class KERB_S4U2PROXY_CREDView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get UserName(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(0, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x08: pointer
  get DomainName(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x10: u32
  get Flags(): number {
    return this.view.getUint32(16, true);
  }

  // 0x14: pad4

  // 0x18: pointer
  get LastStatus(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(24, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x20: pointer
  get Expiry(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(32, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x28: u32
  get CountOfEntries(): number {
    return this.view.getUint32(40, true);
  }

  // 0x2c: pad4

  // 0x30: pointer
  get Entries(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(48, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: pointer
  set UserName(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(0, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x08: pointer
  set DomainName(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x10: u32
  set Flags(value: number) {
    this.view.setUint32(16, value, true);
  }

  // 0x14: pad4

  // 0x18: pointer
  set LastStatus(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(24, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x20: pointer
  set Expiry(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(32, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x28: u32
  set CountOfEntries(value: number) {
    this.view.setUint32(40, value, true);
  }

  // 0x2c: pad4

  // 0x30: pointer
  set Entries(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(48, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.Security.Authentication.Identity.KERB_QUERY_S4U2PROXY_CACHE_REQUEST (size: 16)
 */
export interface KERB_QUERY_S4U2PROXY_CACHE_REQUEST {
  /** Windows.Win32.Security.Authentication.Identity.KERB_PROTOCOL_MESSAGE_TYPE */
  MessageType: KERB_PROTOCOL_MESSAGE_TYPE;
  /** u32 */
  Flags: number;
  /** Windows.Win32.Foundation.LUID */
  LogonId: Uint8Array | Deno.PointerValue;
}

export const sizeofKERB_QUERY_S4U2PROXY_CACHE_REQUEST = 16;

export function allocKERB_QUERY_S4U2PROXY_CACHE_REQUEST(data?: Partial<KERB_QUERY_S4U2PROXY_CACHE_REQUEST>): Uint8Array {
  const buf = new Uint8Array(sizeofKERB_QUERY_S4U2PROXY_CACHE_REQUEST);
  const view = new DataView(buf.buffer);
  // 0x00: i32
  if (data?.MessageType !== undefined) view.setInt32(0, Number(data.MessageType), true);
  // 0x04: u32
  if (data?.Flags !== undefined) view.setUint32(4, Number(data.Flags), true);
  // 0x08: pointer
  if (data?.LogonId !== undefined) view.setBigUint64(8, data.LogonId === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.LogonId))), true);
  return buf;
}

export class KERB_QUERY_S4U2PROXY_CACHE_REQUESTView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: i32
  get MessageType(): number {
    return this.view.getInt32(0, true);
  }

  // 0x04: u32
  get Flags(): number {
    return this.view.getUint32(4, true);
  }

  // 0x08: pointer
  get LogonId(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: i32
  set MessageType(value: number) {
    this.view.setInt32(0, value, true);
  }

  // 0x04: u32
  set Flags(value: number) {
    this.view.setUint32(4, value, true);
  }

  // 0x08: pointer
  set LogonId(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.Security.Authentication.Identity.KERB_QUERY_S4U2PROXY_CACHE_RESPONSE (size: 16)
 */
export interface KERB_QUERY_S4U2PROXY_CACHE_RESPONSE {
  /** Windows.Win32.Security.Authentication.Identity.KERB_PROTOCOL_MESSAGE_TYPE */
  MessageType: KERB_PROTOCOL_MESSAGE_TYPE;
  /** u32 */
  CountOfCreds: number;
  /** ptr */
  Creds: Deno.PointerValue | Uint8Array;
}

export const sizeofKERB_QUERY_S4U2PROXY_CACHE_RESPONSE = 16;

export function allocKERB_QUERY_S4U2PROXY_CACHE_RESPONSE(data?: Partial<KERB_QUERY_S4U2PROXY_CACHE_RESPONSE>): Uint8Array {
  const buf = new Uint8Array(sizeofKERB_QUERY_S4U2PROXY_CACHE_RESPONSE);
  const view = new DataView(buf.buffer);
  // 0x00: i32
  if (data?.MessageType !== undefined) view.setInt32(0, Number(data.MessageType), true);
  // 0x04: u32
  if (data?.CountOfCreds !== undefined) view.setUint32(4, Number(data.CountOfCreds), true);
  // 0x08: pointer
  if (data?.Creds !== undefined) view.setBigUint64(8, data.Creds === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.Creds))), true);
  return buf;
}

export class KERB_QUERY_S4U2PROXY_CACHE_RESPONSEView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: i32
  get MessageType(): number {
    return this.view.getInt32(0, true);
  }

  // 0x04: u32
  get CountOfCreds(): number {
    return this.view.getUint32(4, true);
  }

  // 0x08: pointer
  get Creds(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: i32
  set MessageType(value: number) {
    this.view.setInt32(0, value, true);
  }

  // 0x04: u32
  set CountOfCreds(value: number) {
    this.view.setUint32(4, value, true);
  }

  // 0x08: pointer
  set Creds(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.Security.Authentication.Identity.KERB_RETRIEVE_KEY_TAB_REQUEST (size: 32)
 */
export interface KERB_RETRIEVE_KEY_TAB_REQUEST {
  /** Windows.Win32.Security.Authentication.Identity.KERB_PROTOCOL_MESSAGE_TYPE */
  MessageType: KERB_PROTOCOL_MESSAGE_TYPE;
  /** u32 */
  Flags: number;
  /** Windows.Win32.Foundation.UNICODE_STRING */
  UserName: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.Foundation.UNICODE_STRING */
  DomainName: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.Foundation.UNICODE_STRING */
  Password: Uint8Array | Deno.PointerValue;
}

export const sizeofKERB_RETRIEVE_KEY_TAB_REQUEST = 32;

export function allocKERB_RETRIEVE_KEY_TAB_REQUEST(data?: Partial<KERB_RETRIEVE_KEY_TAB_REQUEST>): Uint8Array {
  const buf = new Uint8Array(sizeofKERB_RETRIEVE_KEY_TAB_REQUEST);
  const view = new DataView(buf.buffer);
  // 0x00: i32
  if (data?.MessageType !== undefined) view.setInt32(0, Number(data.MessageType), true);
  // 0x04: u32
  if (data?.Flags !== undefined) view.setUint32(4, Number(data.Flags), true);
  // 0x08: pointer
  if (data?.UserName !== undefined) view.setBigUint64(8, data.UserName === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.UserName))), true);
  // 0x10: pointer
  if (data?.DomainName !== undefined) view.setBigUint64(16, data.DomainName === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.DomainName))), true);
  // 0x18: pointer
  if (data?.Password !== undefined) view.setBigUint64(24, data.Password === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.Password))), true);
  return buf;
}

export class KERB_RETRIEVE_KEY_TAB_REQUESTView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: i32
  get MessageType(): number {
    return this.view.getInt32(0, true);
  }

  // 0x04: u32
  get Flags(): number {
    return this.view.getUint32(4, true);
  }

  // 0x08: pointer
  get UserName(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x10: pointer
  get DomainName(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(16, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x18: pointer
  get Password(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(24, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: i32
  set MessageType(value: number) {
    this.view.setInt32(0, value, true);
  }

  // 0x04: u32
  set Flags(value: number) {
    this.view.setUint32(4, value, true);
  }

  // 0x08: pointer
  set UserName(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x10: pointer
  set DomainName(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(16, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x18: pointer
  set Password(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(24, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.Security.Authentication.Identity.KERB_RETRIEVE_KEY_TAB_RESPONSE (size: 16)
 */
export interface KERB_RETRIEVE_KEY_TAB_RESPONSE {
  /** Windows.Win32.Security.Authentication.Identity.KERB_PROTOCOL_MESSAGE_TYPE */
  MessageType: KERB_PROTOCOL_MESSAGE_TYPE;
  /** u32 */
  KeyTabLength: number;
  /** ptr */
  KeyTab: Deno.PointerValue | Uint8Array;
}

export const sizeofKERB_RETRIEVE_KEY_TAB_RESPONSE = 16;

export function allocKERB_RETRIEVE_KEY_TAB_RESPONSE(data?: Partial<KERB_RETRIEVE_KEY_TAB_RESPONSE>): Uint8Array {
  const buf = new Uint8Array(sizeofKERB_RETRIEVE_KEY_TAB_RESPONSE);
  const view = new DataView(buf.buffer);
  // 0x00: i32
  if (data?.MessageType !== undefined) view.setInt32(0, Number(data.MessageType), true);
  // 0x04: u32
  if (data?.KeyTabLength !== undefined) view.setUint32(4, Number(data.KeyTabLength), true);
  // 0x08: pointer
  if (data?.KeyTab !== undefined) view.setBigUint64(8, data.KeyTab === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.KeyTab))), true);
  return buf;
}

export class KERB_RETRIEVE_KEY_TAB_RESPONSEView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: i32
  get MessageType(): number {
    return this.view.getInt32(0, true);
  }

  // 0x04: u32
  get KeyTabLength(): number {
    return this.view.getUint32(4, true);
  }

  // 0x08: pointer
  get KeyTab(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: i32
  set MessageType(value: number) {
    this.view.setInt32(0, value, true);
  }

  // 0x04: u32
  set KeyTabLength(value: number) {
    this.view.setUint32(4, value, true);
  }

  // 0x08: pointer
  set KeyTab(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.Security.Authentication.Identity.KERB_REFRESH_POLICY_REQUEST (size: 8)
 */
export interface KERB_REFRESH_POLICY_REQUEST {
  /** Windows.Win32.Security.Authentication.Identity.KERB_PROTOCOL_MESSAGE_TYPE */
  MessageType: KERB_PROTOCOL_MESSAGE_TYPE;
  /** u32 */
  Flags: number;
}

export const sizeofKERB_REFRESH_POLICY_REQUEST = 8;

export function allocKERB_REFRESH_POLICY_REQUEST(data?: Partial<KERB_REFRESH_POLICY_REQUEST>): Uint8Array {
  const buf = new Uint8Array(sizeofKERB_REFRESH_POLICY_REQUEST);
  const view = new DataView(buf.buffer);
  // 0x00: i32
  if (data?.MessageType !== undefined) view.setInt32(0, Number(data.MessageType), true);
  // 0x04: u32
  if (data?.Flags !== undefined) view.setUint32(4, Number(data.Flags), true);
  return buf;
}

export class KERB_REFRESH_POLICY_REQUESTView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: i32
  get MessageType(): number {
    return this.view.getInt32(0, true);
  }

  // 0x04: u32
  get Flags(): number {
    return this.view.getUint32(4, true);
  }

  // 0x00: i32
  set MessageType(value: number) {
    this.view.setInt32(0, value, true);
  }

  // 0x04: u32
  set Flags(value: number) {
    this.view.setUint32(4, value, true);
  }
}

/**
 * Windows.Win32.Security.Authentication.Identity.KERB_REFRESH_POLICY_RESPONSE (size: 8)
 */
export interface KERB_REFRESH_POLICY_RESPONSE {
  /** Windows.Win32.Security.Authentication.Identity.KERB_PROTOCOL_MESSAGE_TYPE */
  MessageType: KERB_PROTOCOL_MESSAGE_TYPE;
  /** u32 */
  Flags: number;
}

export const sizeofKERB_REFRESH_POLICY_RESPONSE = 8;

export function allocKERB_REFRESH_POLICY_RESPONSE(data?: Partial<KERB_REFRESH_POLICY_RESPONSE>): Uint8Array {
  const buf = new Uint8Array(sizeofKERB_REFRESH_POLICY_RESPONSE);
  const view = new DataView(buf.buffer);
  // 0x00: i32
  if (data?.MessageType !== undefined) view.setInt32(0, Number(data.MessageType), true);
  // 0x04: u32
  if (data?.Flags !== undefined) view.setUint32(4, Number(data.Flags), true);
  return buf;
}

export class KERB_REFRESH_POLICY_RESPONSEView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: i32
  get MessageType(): number {
    return this.view.getInt32(0, true);
  }

  // 0x04: u32
  get Flags(): number {
    return this.view.getUint32(4, true);
  }

  // 0x00: i32
  set MessageType(value: number) {
    this.view.setInt32(0, value, true);
  }

  // 0x04: u32
  set Flags(value: number) {
    this.view.setUint32(4, value, true);
  }
}

/**
 * Windows.Win32.Security.Authentication.Identity.KERB_CLOUD_KERBEROS_DEBUG_REQUEST (size: 16)
 */
export interface KERB_CLOUD_KERBEROS_DEBUG_REQUEST {
  /** Windows.Win32.Security.Authentication.Identity.KERB_PROTOCOL_MESSAGE_TYPE */
  MessageType: KERB_PROTOCOL_MESSAGE_TYPE;
  /** Windows.Win32.Foundation.LUID */
  LogonId: Uint8Array | Deno.PointerValue;
}

export const sizeofKERB_CLOUD_KERBEROS_DEBUG_REQUEST = 16;

export function allocKERB_CLOUD_KERBEROS_DEBUG_REQUEST(data?: Partial<KERB_CLOUD_KERBEROS_DEBUG_REQUEST>): Uint8Array {
  const buf = new Uint8Array(sizeofKERB_CLOUD_KERBEROS_DEBUG_REQUEST);
  const view = new DataView(buf.buffer);
  // 0x00: i32
  if (data?.MessageType !== undefined) view.setInt32(0, Number(data.MessageType), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.LogonId !== undefined) view.setBigUint64(8, data.LogonId === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.LogonId))), true);
  return buf;
}

export class KERB_CLOUD_KERBEROS_DEBUG_REQUESTView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: i32
  get MessageType(): number {
    return this.view.getInt32(0, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  get LogonId(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: i32
  set MessageType(value: number) {
    this.view.setInt32(0, value, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  set LogonId(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.Security.Authentication.Identity.KERB_CLOUD_KERBEROS_DEBUG_RESPONSE (size: 24)
 */
export interface KERB_CLOUD_KERBEROS_DEBUG_RESPONSE {
  /** Windows.Win32.Security.Authentication.Identity.KERB_PROTOCOL_MESSAGE_TYPE */
  MessageType: KERB_PROTOCOL_MESSAGE_TYPE;
  /** u32 */
  Version: number;
  /** u32 */
  Length: number;
  /** array */
  Data: Deno.PointerValue;
}

export const sizeofKERB_CLOUD_KERBEROS_DEBUG_RESPONSE = 24;

export function allocKERB_CLOUD_KERBEROS_DEBUG_RESPONSE(data?: Partial<KERB_CLOUD_KERBEROS_DEBUG_RESPONSE>): Uint8Array {
  const buf = new Uint8Array(sizeofKERB_CLOUD_KERBEROS_DEBUG_RESPONSE);
  const view = new DataView(buf.buffer);
  // 0x00: i32
  if (data?.MessageType !== undefined) view.setInt32(0, Number(data.MessageType), true);
  // 0x04: u32
  if (data?.Version !== undefined) view.setUint32(4, Number(data.Version), true);
  // 0x08: u32
  if (data?.Length !== undefined) view.setUint32(8, Number(data.Length), true);
  // 0x0c: pad4
  // 0x10: pointer
  if (data?.Data !== undefined) view.setBigUint64(16, data.Data === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.Data))), true);
  return buf;
}

export class KERB_CLOUD_KERBEROS_DEBUG_RESPONSEView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: i32
  get MessageType(): number {
    return this.view.getInt32(0, true);
  }

  // 0x04: u32
  get Version(): number {
    return this.view.getUint32(4, true);
  }

  // 0x08: u32
  get Length(): number {
    return this.view.getUint32(8, true);
  }

  // 0x0c: pad4

  // 0x10: pointer
  get Data(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(16, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: i32
  set MessageType(value: number) {
    this.view.setInt32(0, value, true);
  }

  // 0x04: u32
  set Version(value: number) {
    this.view.setUint32(4, value, true);
  }

  // 0x08: u32
  set Length(value: number) {
    this.view.setUint32(8, value, true);
  }

  // 0x0c: pad4

  // 0x10: pointer
  set Data(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(16, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.Security.Authentication.Identity.KERB_CLOUD_KERBEROS_DEBUG_DATA_V0 (size: 8)
 */
export interface KERB_CLOUD_KERBEROS_DEBUG_DATA_V0 {
  /** i32 */
  _bitfield: number;
}

export const sizeofKERB_CLOUD_KERBEROS_DEBUG_DATA_V0 = 8;

export function allocKERB_CLOUD_KERBEROS_DEBUG_DATA_V0(data?: Partial<KERB_CLOUD_KERBEROS_DEBUG_DATA_V0>): Uint8Array {
  const buf = new Uint8Array(sizeofKERB_CLOUD_KERBEROS_DEBUG_DATA_V0);
  const view = new DataView(buf.buffer);
  // 0x00: i32
  if (data?._bitfield !== undefined) view.setInt32(0, Number(data._bitfield), true);
  // 0x04: pad4
  return buf;
}

export class KERB_CLOUD_KERBEROS_DEBUG_DATA_V0View {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: i32
  get _bitfield(): number {
    return this.view.getInt32(0, true);
  }

  // 0x04: pad4

  // 0x00: i32
  set _bitfield(value: number) {
    this.view.setInt32(0, value, true);
  }

  // 0x04: pad4
}

/**
 * Windows.Win32.Security.Authentication.Identity.KERB_CHANGEPASSWORD_REQUEST (size: 48)
 */
export interface KERB_CHANGEPASSWORD_REQUEST {
  /** Windows.Win32.Security.Authentication.Identity.KERB_PROTOCOL_MESSAGE_TYPE */
  MessageType: KERB_PROTOCOL_MESSAGE_TYPE;
  /** Windows.Win32.Foundation.UNICODE_STRING */
  DomainName: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.Foundation.UNICODE_STRING */
  AccountName: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.Foundation.UNICODE_STRING */
  OldPassword: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.Foundation.UNICODE_STRING */
  NewPassword: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.Foundation.BOOLEAN */
  Impersonating: Uint8Array | Deno.PointerValue;
}

export const sizeofKERB_CHANGEPASSWORD_REQUEST = 48;

export function allocKERB_CHANGEPASSWORD_REQUEST(data?: Partial<KERB_CHANGEPASSWORD_REQUEST>): Uint8Array {
  const buf = new Uint8Array(sizeofKERB_CHANGEPASSWORD_REQUEST);
  const view = new DataView(buf.buffer);
  // 0x00: i32
  if (data?.MessageType !== undefined) view.setInt32(0, Number(data.MessageType), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.DomainName !== undefined) view.setBigUint64(8, data.DomainName === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.DomainName))), true);
  // 0x10: pointer
  if (data?.AccountName !== undefined) view.setBigUint64(16, data.AccountName === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.AccountName))), true);
  // 0x18: pointer
  if (data?.OldPassword !== undefined) view.setBigUint64(24, data.OldPassword === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.OldPassword))), true);
  // 0x20: pointer
  if (data?.NewPassword !== undefined) view.setBigUint64(32, data.NewPassword === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.NewPassword))), true);
  // 0x28: pointer
  if (data?.Impersonating !== undefined) view.setBigUint64(40, data.Impersonating === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.Impersonating))), true);
  return buf;
}

export class KERB_CHANGEPASSWORD_REQUESTView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: i32
  get MessageType(): number {
    return this.view.getInt32(0, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  get DomainName(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x10: pointer
  get AccountName(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(16, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x18: pointer
  get OldPassword(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(24, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x20: pointer
  get NewPassword(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(32, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x28: pointer
  get Impersonating(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(40, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: i32
  set MessageType(value: number) {
    this.view.setInt32(0, value, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  set DomainName(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x10: pointer
  set AccountName(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(16, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x18: pointer
  set OldPassword(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(24, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x20: pointer
  set NewPassword(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(32, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x28: pointer
  set Impersonating(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(40, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.Security.Authentication.Identity.KERB_SETPASSWORD_REQUEST (size: 56)
 */
export interface KERB_SETPASSWORD_REQUEST {
  /** Windows.Win32.Security.Authentication.Identity.KERB_PROTOCOL_MESSAGE_TYPE */
  MessageType: KERB_PROTOCOL_MESSAGE_TYPE;
  /** Windows.Win32.Foundation.LUID */
  LogonId: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.Security.Credentials.SecHandle */
  CredentialsHandle: Uint8Array | Deno.PointerValue;
  /** u32 */
  Flags: number;
  /** Windows.Win32.Foundation.UNICODE_STRING */
  DomainName: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.Foundation.UNICODE_STRING */
  AccountName: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.Foundation.UNICODE_STRING */
  Password: Uint8Array | Deno.PointerValue;
}

export const sizeofKERB_SETPASSWORD_REQUEST = 56;

export function allocKERB_SETPASSWORD_REQUEST(data?: Partial<KERB_SETPASSWORD_REQUEST>): Uint8Array {
  const buf = new Uint8Array(sizeofKERB_SETPASSWORD_REQUEST);
  const view = new DataView(buf.buffer);
  // 0x00: i32
  if (data?.MessageType !== undefined) view.setInt32(0, Number(data.MessageType), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.LogonId !== undefined) view.setBigUint64(8, data.LogonId === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.LogonId))), true);
  // 0x10: pointer
  if (data?.CredentialsHandle !== undefined) view.setBigUint64(16, data.CredentialsHandle === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.CredentialsHandle))), true);
  // 0x18: u32
  if (data?.Flags !== undefined) view.setUint32(24, Number(data.Flags), true);
  // 0x1c: pad4
  // 0x20: pointer
  if (data?.DomainName !== undefined) view.setBigUint64(32, data.DomainName === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.DomainName))), true);
  // 0x28: pointer
  if (data?.AccountName !== undefined) view.setBigUint64(40, data.AccountName === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.AccountName))), true);
  // 0x30: pointer
  if (data?.Password !== undefined) view.setBigUint64(48, data.Password === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.Password))), true);
  return buf;
}

export class KERB_SETPASSWORD_REQUESTView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: i32
  get MessageType(): number {
    return this.view.getInt32(0, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  get LogonId(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x10: pointer
  get CredentialsHandle(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(16, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x18: u32
  get Flags(): number {
    return this.view.getUint32(24, true);
  }

  // 0x1c: pad4

  // 0x20: pointer
  get DomainName(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(32, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x28: pointer
  get AccountName(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(40, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x30: pointer
  get Password(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(48, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: i32
  set MessageType(value: number) {
    this.view.setInt32(0, value, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  set LogonId(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x10: pointer
  set CredentialsHandle(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(16, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x18: u32
  set Flags(value: number) {
    this.view.setUint32(24, value, true);
  }

  // 0x1c: pad4

  // 0x20: pointer
  set DomainName(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(32, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x28: pointer
  set AccountName(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(40, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x30: pointer
  set Password(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(48, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.Security.Authentication.Identity.KERB_SETPASSWORD_EX_REQUEST (size: 96)
 */
export interface KERB_SETPASSWORD_EX_REQUEST {
  /** Windows.Win32.Security.Authentication.Identity.KERB_PROTOCOL_MESSAGE_TYPE */
  MessageType: KERB_PROTOCOL_MESSAGE_TYPE;
  /** Windows.Win32.Foundation.LUID */
  LogonId: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.Security.Credentials.SecHandle */
  CredentialsHandle: Uint8Array | Deno.PointerValue;
  /** u32 */
  Flags: number;
  /** Windows.Win32.Foundation.UNICODE_STRING */
  AccountRealm: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.Foundation.UNICODE_STRING */
  AccountName: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.Foundation.UNICODE_STRING */
  Password: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.Foundation.UNICODE_STRING */
  ClientRealm: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.Foundation.UNICODE_STRING */
  ClientName: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.Foundation.BOOLEAN */
  Impersonating: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.Foundation.UNICODE_STRING */
  KdcAddress: Uint8Array | Deno.PointerValue;
  /** u32 */
  KdcAddressType: number;
}

export const sizeofKERB_SETPASSWORD_EX_REQUEST = 96;

export function allocKERB_SETPASSWORD_EX_REQUEST(data?: Partial<KERB_SETPASSWORD_EX_REQUEST>): Uint8Array {
  const buf = new Uint8Array(sizeofKERB_SETPASSWORD_EX_REQUEST);
  const view = new DataView(buf.buffer);
  // 0x00: i32
  if (data?.MessageType !== undefined) view.setInt32(0, Number(data.MessageType), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.LogonId !== undefined) view.setBigUint64(8, data.LogonId === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.LogonId))), true);
  // 0x10: pointer
  if (data?.CredentialsHandle !== undefined) view.setBigUint64(16, data.CredentialsHandle === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.CredentialsHandle))), true);
  // 0x18: u32
  if (data?.Flags !== undefined) view.setUint32(24, Number(data.Flags), true);
  // 0x1c: pad4
  // 0x20: pointer
  if (data?.AccountRealm !== undefined) view.setBigUint64(32, data.AccountRealm === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.AccountRealm))), true);
  // 0x28: pointer
  if (data?.AccountName !== undefined) view.setBigUint64(40, data.AccountName === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.AccountName))), true);
  // 0x30: pointer
  if (data?.Password !== undefined) view.setBigUint64(48, data.Password === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.Password))), true);
  // 0x38: pointer
  if (data?.ClientRealm !== undefined) view.setBigUint64(56, data.ClientRealm === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.ClientRealm))), true);
  // 0x40: pointer
  if (data?.ClientName !== undefined) view.setBigUint64(64, data.ClientName === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.ClientName))), true);
  // 0x48: pointer
  if (data?.Impersonating !== undefined) view.setBigUint64(72, data.Impersonating === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.Impersonating))), true);
  // 0x50: pointer
  if (data?.KdcAddress !== undefined) view.setBigUint64(80, data.KdcAddress === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.KdcAddress))), true);
  // 0x58: u32
  if (data?.KdcAddressType !== undefined) view.setUint32(88, Number(data.KdcAddressType), true);
  // 0x5c: pad4
  return buf;
}

export class KERB_SETPASSWORD_EX_REQUESTView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: i32
  get MessageType(): number {
    return this.view.getInt32(0, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  get LogonId(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x10: pointer
  get CredentialsHandle(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(16, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x18: u32
  get Flags(): number {
    return this.view.getUint32(24, true);
  }

  // 0x1c: pad4

  // 0x20: pointer
  get AccountRealm(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(32, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x28: pointer
  get AccountName(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(40, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x30: pointer
  get Password(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(48, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x38: pointer
  get ClientRealm(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(56, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x40: pointer
  get ClientName(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(64, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x48: pointer
  get Impersonating(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(72, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x50: pointer
  get KdcAddress(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(80, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x58: u32
  get KdcAddressType(): number {
    return this.view.getUint32(88, true);
  }

  // 0x5c: pad4

  // 0x00: i32
  set MessageType(value: number) {
    this.view.setInt32(0, value, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  set LogonId(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x10: pointer
  set CredentialsHandle(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(16, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x18: u32
  set Flags(value: number) {
    this.view.setUint32(24, value, true);
  }

  // 0x1c: pad4

  // 0x20: pointer
  set AccountRealm(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(32, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x28: pointer
  set AccountName(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(40, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x30: pointer
  set Password(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(48, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x38: pointer
  set ClientRealm(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(56, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x40: pointer
  set ClientName(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(64, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x48: pointer
  set Impersonating(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(72, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x50: pointer
  set KdcAddress(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(80, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x58: u32
  set KdcAddressType(value: number) {
    this.view.setUint32(88, value, true);
  }

  // 0x5c: pad4
}

/**
 * Windows.Win32.Security.Authentication.Identity.KERB_DECRYPT_REQUEST (size: 64)
 */
export interface KERB_DECRYPT_REQUEST {
  /** Windows.Win32.Security.Authentication.Identity.KERB_PROTOCOL_MESSAGE_TYPE */
  MessageType: KERB_PROTOCOL_MESSAGE_TYPE;
  /** Windows.Win32.Foundation.LUID */
  LogonId: Uint8Array | Deno.PointerValue;
  /** u32 */
  Flags: number;
  /** i32 */
  CryptoType: number;
  /** i32 */
  KeyUsage: number;
  /** Windows.Win32.Security.Authentication.Identity.KERB_CRYPTO_KEY */
  Key: Uint8Array | Deno.PointerValue;
  /** u32 */
  EncryptedDataSize: number;
  /** u32 */
  InitialVectorSize: number;
  /** ptr */
  InitialVector: Deno.PointerValue | Uint8Array;
  /** ptr */
  EncryptedData: Deno.PointerValue | Uint8Array;
}

export const sizeofKERB_DECRYPT_REQUEST = 64;

export function allocKERB_DECRYPT_REQUEST(data?: Partial<KERB_DECRYPT_REQUEST>): Uint8Array {
  const buf = new Uint8Array(sizeofKERB_DECRYPT_REQUEST);
  const view = new DataView(buf.buffer);
  // 0x00: i32
  if (data?.MessageType !== undefined) view.setInt32(0, Number(data.MessageType), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.LogonId !== undefined) view.setBigUint64(8, data.LogonId === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.LogonId))), true);
  // 0x10: u32
  if (data?.Flags !== undefined) view.setUint32(16, Number(data.Flags), true);
  // 0x14: i32
  if (data?.CryptoType !== undefined) view.setInt32(20, Number(data.CryptoType), true);
  // 0x18: i32
  if (data?.KeyUsage !== undefined) view.setInt32(24, Number(data.KeyUsage), true);
  // 0x1c: pad4
  // 0x20: pointer
  if (data?.Key !== undefined) view.setBigUint64(32, data.Key === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.Key))), true);
  // 0x28: u32
  if (data?.EncryptedDataSize !== undefined) view.setUint32(40, Number(data.EncryptedDataSize), true);
  // 0x2c: u32
  if (data?.InitialVectorSize !== undefined) view.setUint32(44, Number(data.InitialVectorSize), true);
  // 0x30: pointer
  if (data?.InitialVector !== undefined) view.setBigUint64(48, data.InitialVector === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.InitialVector))), true);
  // 0x38: pointer
  if (data?.EncryptedData !== undefined) view.setBigUint64(56, data.EncryptedData === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.EncryptedData))), true);
  return buf;
}

export class KERB_DECRYPT_REQUESTView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: i32
  get MessageType(): number {
    return this.view.getInt32(0, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  get LogonId(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x10: u32
  get Flags(): number {
    return this.view.getUint32(16, true);
  }

  // 0x14: i32
  get CryptoType(): number {
    return this.view.getInt32(20, true);
  }

  // 0x18: i32
  get KeyUsage(): number {
    return this.view.getInt32(24, true);
  }

  // 0x1c: pad4

  // 0x20: pointer
  get Key(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(32, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x28: u32
  get EncryptedDataSize(): number {
    return this.view.getUint32(40, true);
  }

  // 0x2c: u32
  get InitialVectorSize(): number {
    return this.view.getUint32(44, true);
  }

  // 0x30: pointer
  get InitialVector(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(48, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x38: pointer
  get EncryptedData(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(56, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: i32
  set MessageType(value: number) {
    this.view.setInt32(0, value, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  set LogonId(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x10: u32
  set Flags(value: number) {
    this.view.setUint32(16, value, true);
  }

  // 0x14: i32
  set CryptoType(value: number) {
    this.view.setInt32(20, value, true);
  }

  // 0x18: i32
  set KeyUsage(value: number) {
    this.view.setInt32(24, value, true);
  }

  // 0x1c: pad4

  // 0x20: pointer
  set Key(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(32, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x28: u32
  set EncryptedDataSize(value: number) {
    this.view.setUint32(40, value, true);
  }

  // 0x2c: u32
  set InitialVectorSize(value: number) {
    this.view.setUint32(44, value, true);
  }

  // 0x30: pointer
  set InitialVector(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(48, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x38: pointer
  set EncryptedData(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(56, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.Security.Authentication.Identity.KERB_DECRYPT_RESPONSE (size: 8)
 */
export interface KERB_DECRYPT_RESPONSE {
  /** array */
  DecryptedData: Deno.PointerValue;
}

export const sizeofKERB_DECRYPT_RESPONSE = 8;

export function allocKERB_DECRYPT_RESPONSE(data?: Partial<KERB_DECRYPT_RESPONSE>): Uint8Array {
  const buf = new Uint8Array(sizeofKERB_DECRYPT_RESPONSE);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.DecryptedData !== undefined) view.setBigUint64(0, data.DecryptedData === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.DecryptedData))), true);
  return buf;
}

export class KERB_DECRYPT_RESPONSEView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get DecryptedData(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(0, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: pointer
  set DecryptedData(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(0, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.Security.Authentication.Identity.KERB_ADD_BINDING_CACHE_ENTRY_REQUEST (size: 32)
 */
export interface KERB_ADD_BINDING_CACHE_ENTRY_REQUEST {
  /** Windows.Win32.Security.Authentication.Identity.KERB_PROTOCOL_MESSAGE_TYPE */
  MessageType: KERB_PROTOCOL_MESSAGE_TYPE;
  /** Windows.Win32.Foundation.UNICODE_STRING */
  RealmName: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.Foundation.UNICODE_STRING */
  KdcAddress: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.Security.Authentication.Identity.KERB_ADDRESS_TYPE */
  AddressType: KERB_ADDRESS_TYPE;
}

export const sizeofKERB_ADD_BINDING_CACHE_ENTRY_REQUEST = 32;

export function allocKERB_ADD_BINDING_CACHE_ENTRY_REQUEST(data?: Partial<KERB_ADD_BINDING_CACHE_ENTRY_REQUEST>): Uint8Array {
  const buf = new Uint8Array(sizeofKERB_ADD_BINDING_CACHE_ENTRY_REQUEST);
  const view = new DataView(buf.buffer);
  // 0x00: i32
  if (data?.MessageType !== undefined) view.setInt32(0, Number(data.MessageType), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.RealmName !== undefined) view.setBigUint64(8, data.RealmName === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.RealmName))), true);
  // 0x10: pointer
  if (data?.KdcAddress !== undefined) view.setBigUint64(16, data.KdcAddress === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.KdcAddress))), true);
  // 0x18: u32
  if (data?.AddressType !== undefined) view.setUint32(24, Number(data.AddressType), true);
  // 0x1c: pad4
  return buf;
}

export class KERB_ADD_BINDING_CACHE_ENTRY_REQUESTView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: i32
  get MessageType(): number {
    return this.view.getInt32(0, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  get RealmName(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x10: pointer
  get KdcAddress(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(16, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x18: u32
  get AddressType(): number {
    return this.view.getUint32(24, true);
  }

  // 0x1c: pad4

  // 0x00: i32
  set MessageType(value: number) {
    this.view.setInt32(0, value, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  set RealmName(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x10: pointer
  set KdcAddress(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(16, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x18: u32
  set AddressType(value: number) {
    this.view.setUint32(24, value, true);
  }

  // 0x1c: pad4
}

/**
 * Windows.Win32.Security.Authentication.Identity.KERB_REFRESH_SCCRED_REQUEST (size: 32)
 */
export interface KERB_REFRESH_SCCRED_REQUEST {
  /** Windows.Win32.Security.Authentication.Identity.KERB_PROTOCOL_MESSAGE_TYPE */
  MessageType: KERB_PROTOCOL_MESSAGE_TYPE;
  /** Windows.Win32.Foundation.UNICODE_STRING */
  CredentialBlob: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.Foundation.LUID */
  LogonId: Uint8Array | Deno.PointerValue;
  /** u32 */
  Flags: number;
}

export const sizeofKERB_REFRESH_SCCRED_REQUEST = 32;

export function allocKERB_REFRESH_SCCRED_REQUEST(data?: Partial<KERB_REFRESH_SCCRED_REQUEST>): Uint8Array {
  const buf = new Uint8Array(sizeofKERB_REFRESH_SCCRED_REQUEST);
  const view = new DataView(buf.buffer);
  // 0x00: i32
  if (data?.MessageType !== undefined) view.setInt32(0, Number(data.MessageType), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.CredentialBlob !== undefined) view.setBigUint64(8, data.CredentialBlob === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.CredentialBlob))), true);
  // 0x10: pointer
  if (data?.LogonId !== undefined) view.setBigUint64(16, data.LogonId === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.LogonId))), true);
  // 0x18: u32
  if (data?.Flags !== undefined) view.setUint32(24, Number(data.Flags), true);
  // 0x1c: pad4
  return buf;
}

export class KERB_REFRESH_SCCRED_REQUESTView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: i32
  get MessageType(): number {
    return this.view.getInt32(0, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  get CredentialBlob(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x10: pointer
  get LogonId(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(16, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x18: u32
  get Flags(): number {
    return this.view.getUint32(24, true);
  }

  // 0x1c: pad4

  // 0x00: i32
  set MessageType(value: number) {
    this.view.setInt32(0, value, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  set CredentialBlob(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x10: pointer
  set LogonId(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(16, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x18: u32
  set Flags(value: number) {
    this.view.setUint32(24, value, true);
  }

  // 0x1c: pad4
}

/**
 * Windows.Win32.Security.Authentication.Identity.KERB_ADD_CREDENTIALS_REQUEST (size: 48)
 */
export interface KERB_ADD_CREDENTIALS_REQUEST {
  /** Windows.Win32.Security.Authentication.Identity.KERB_PROTOCOL_MESSAGE_TYPE */
  MessageType: KERB_PROTOCOL_MESSAGE_TYPE;
  /** Windows.Win32.Foundation.UNICODE_STRING */
  UserName: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.Foundation.UNICODE_STRING */
  DomainName: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.Foundation.UNICODE_STRING */
  Password: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.Foundation.LUID */
  LogonId: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.Security.Authentication.Identity.KERB_REQUEST_FLAGS */
  Flags: KERB_REQUEST_FLAGS;
}

export const sizeofKERB_ADD_CREDENTIALS_REQUEST = 48;

export function allocKERB_ADD_CREDENTIALS_REQUEST(data?: Partial<KERB_ADD_CREDENTIALS_REQUEST>): Uint8Array {
  const buf = new Uint8Array(sizeofKERB_ADD_CREDENTIALS_REQUEST);
  const view = new DataView(buf.buffer);
  // 0x00: i32
  if (data?.MessageType !== undefined) view.setInt32(0, Number(data.MessageType), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.UserName !== undefined) view.setBigUint64(8, data.UserName === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.UserName))), true);
  // 0x10: pointer
  if (data?.DomainName !== undefined) view.setBigUint64(16, data.DomainName === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.DomainName))), true);
  // 0x18: pointer
  if (data?.Password !== undefined) view.setBigUint64(24, data.Password === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.Password))), true);
  // 0x20: pointer
  if (data?.LogonId !== undefined) view.setBigUint64(32, data.LogonId === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.LogonId))), true);
  // 0x28: u32
  if (data?.Flags !== undefined) view.setUint32(40, Number(data.Flags), true);
  // 0x2c: pad4
  return buf;
}

export class KERB_ADD_CREDENTIALS_REQUESTView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: i32
  get MessageType(): number {
    return this.view.getInt32(0, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  get UserName(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x10: pointer
  get DomainName(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(16, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x18: pointer
  get Password(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(24, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x20: pointer
  get LogonId(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(32, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x28: u32
  get Flags(): number {
    return this.view.getUint32(40, true);
  }

  // 0x2c: pad4

  // 0x00: i32
  set MessageType(value: number) {
    this.view.setInt32(0, value, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  set UserName(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x10: pointer
  set DomainName(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(16, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x18: pointer
  set Password(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(24, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x20: pointer
  set LogonId(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(32, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x28: u32
  set Flags(value: number) {
    this.view.setUint32(40, value, true);
  }

  // 0x2c: pad4
}

/**
 * Windows.Win32.Security.Authentication.Identity.KERB_ADD_CREDENTIALS_REQUEST_EX (size: 24)
 */
export interface KERB_ADD_CREDENTIALS_REQUEST_EX {
  /** Windows.Win32.Security.Authentication.Identity.KERB_ADD_CREDENTIALS_REQUEST */
  Credentials: Uint8Array | Deno.PointerValue;
  /** u32 */
  PrincipalNameCount: number;
  /** array */
  PrincipalNames: Deno.PointerValue;
}

export const sizeofKERB_ADD_CREDENTIALS_REQUEST_EX = 24;

export function allocKERB_ADD_CREDENTIALS_REQUEST_EX(data?: Partial<KERB_ADD_CREDENTIALS_REQUEST_EX>): Uint8Array {
  const buf = new Uint8Array(sizeofKERB_ADD_CREDENTIALS_REQUEST_EX);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.Credentials !== undefined) view.setBigUint64(0, data.Credentials === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.Credentials))), true);
  // 0x08: u32
  if (data?.PrincipalNameCount !== undefined) view.setUint32(8, Number(data.PrincipalNameCount), true);
  // 0x0c: pad4
  // 0x10: pointer
  if (data?.PrincipalNames !== undefined) view.setBigUint64(16, data.PrincipalNames === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.PrincipalNames))), true);
  return buf;
}

export class KERB_ADD_CREDENTIALS_REQUEST_EXView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get Credentials(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(0, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x08: u32
  get PrincipalNameCount(): number {
    return this.view.getUint32(8, true);
  }

  // 0x0c: pad4

  // 0x10: pointer
  get PrincipalNames(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(16, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: pointer
  set Credentials(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(0, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x08: u32
  set PrincipalNameCount(value: number) {
    this.view.setUint32(8, value, true);
  }

  // 0x0c: pad4

  // 0x10: pointer
  set PrincipalNames(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(16, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.Security.Authentication.Identity.KERB_TRANSFER_CRED_REQUEST (size: 32)
 */
export interface KERB_TRANSFER_CRED_REQUEST {
  /** Windows.Win32.Security.Authentication.Identity.KERB_PROTOCOL_MESSAGE_TYPE */
  MessageType: KERB_PROTOCOL_MESSAGE_TYPE;
  /** Windows.Win32.Foundation.LUID */
  OriginLogonId: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.Foundation.LUID */
  DestinationLogonId: Uint8Array | Deno.PointerValue;
  /** u32 */
  Flags: number;
}

export const sizeofKERB_TRANSFER_CRED_REQUEST = 32;

export function allocKERB_TRANSFER_CRED_REQUEST(data?: Partial<KERB_TRANSFER_CRED_REQUEST>): Uint8Array {
  const buf = new Uint8Array(sizeofKERB_TRANSFER_CRED_REQUEST);
  const view = new DataView(buf.buffer);
  // 0x00: i32
  if (data?.MessageType !== undefined) view.setInt32(0, Number(data.MessageType), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.OriginLogonId !== undefined) view.setBigUint64(8, data.OriginLogonId === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.OriginLogonId))), true);
  // 0x10: pointer
  if (data?.DestinationLogonId !== undefined) view.setBigUint64(16, data.DestinationLogonId === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.DestinationLogonId))), true);
  // 0x18: u32
  if (data?.Flags !== undefined) view.setUint32(24, Number(data.Flags), true);
  // 0x1c: pad4
  return buf;
}

export class KERB_TRANSFER_CRED_REQUESTView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: i32
  get MessageType(): number {
    return this.view.getInt32(0, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  get OriginLogonId(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x10: pointer
  get DestinationLogonId(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(16, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x18: u32
  get Flags(): number {
    return this.view.getUint32(24, true);
  }

  // 0x1c: pad4

  // 0x00: i32
  set MessageType(value: number) {
    this.view.setInt32(0, value, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  set OriginLogonId(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x10: pointer
  set DestinationLogonId(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(16, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x18: u32
  set Flags(value: number) {
    this.view.setUint32(24, value, true);
  }

  // 0x1c: pad4
}

/**
 * Windows.Win32.Security.Authentication.Identity.KERB_CLEANUP_MACHINE_PKINIT_CREDS_REQUEST (size: 16)
 */
export interface KERB_CLEANUP_MACHINE_PKINIT_CREDS_REQUEST {
  /** Windows.Win32.Security.Authentication.Identity.KERB_PROTOCOL_MESSAGE_TYPE */
  MessageType: KERB_PROTOCOL_MESSAGE_TYPE;
  /** Windows.Win32.Foundation.LUID */
  LogonId: Uint8Array | Deno.PointerValue;
}

export const sizeofKERB_CLEANUP_MACHINE_PKINIT_CREDS_REQUEST = 16;

export function allocKERB_CLEANUP_MACHINE_PKINIT_CREDS_REQUEST(data?: Partial<KERB_CLEANUP_MACHINE_PKINIT_CREDS_REQUEST>): Uint8Array {
  const buf = new Uint8Array(sizeofKERB_CLEANUP_MACHINE_PKINIT_CREDS_REQUEST);
  const view = new DataView(buf.buffer);
  // 0x00: i32
  if (data?.MessageType !== undefined) view.setInt32(0, Number(data.MessageType), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.LogonId !== undefined) view.setBigUint64(8, data.LogonId === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.LogonId))), true);
  return buf;
}

export class KERB_CLEANUP_MACHINE_PKINIT_CREDS_REQUESTView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: i32
  get MessageType(): number {
    return this.view.getInt32(0, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  get LogonId(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: i32
  set MessageType(value: number) {
    this.view.setInt32(0, value, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  set LogonId(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.Security.Authentication.Identity.KERB_BINDING_CACHE_ENTRY_DATA (size: 48)
 */
export interface KERB_BINDING_CACHE_ENTRY_DATA {
  /** u64 */
  DiscoveryTime: Deno.PointerValue;
  /** Windows.Win32.Foundation.UNICODE_STRING */
  RealmName: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.Foundation.UNICODE_STRING */
  KdcAddress: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.Security.Authentication.Identity.KERB_ADDRESS_TYPE */
  AddressType: KERB_ADDRESS_TYPE;
  /** u32 */
  Flags: number;
  /** u32 */
  DcFlags: number;
  /** u32 */
  CacheFlags: number;
  /** Windows.Win32.Foundation.UNICODE_STRING */
  KdcName: Uint8Array | Deno.PointerValue;
}

export const sizeofKERB_BINDING_CACHE_ENTRY_DATA = 48;

export function allocKERB_BINDING_CACHE_ENTRY_DATA(data?: Partial<KERB_BINDING_CACHE_ENTRY_DATA>): Uint8Array {
  const buf = new Uint8Array(sizeofKERB_BINDING_CACHE_ENTRY_DATA);
  const view = new DataView(buf.buffer);
  // 0x00: u64
  if (data?.DiscoveryTime !== undefined) view.setBigUint64(0, BigInt(data.DiscoveryTime), true);
  // 0x08: pointer
  if (data?.RealmName !== undefined) view.setBigUint64(8, data.RealmName === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.RealmName))), true);
  // 0x10: pointer
  if (data?.KdcAddress !== undefined) view.setBigUint64(16, data.KdcAddress === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.KdcAddress))), true);
  // 0x18: u32
  if (data?.AddressType !== undefined) view.setUint32(24, Number(data.AddressType), true);
  // 0x1c: u32
  if (data?.Flags !== undefined) view.setUint32(28, Number(data.Flags), true);
  // 0x20: u32
  if (data?.DcFlags !== undefined) view.setUint32(32, Number(data.DcFlags), true);
  // 0x24: u32
  if (data?.CacheFlags !== undefined) view.setUint32(36, Number(data.CacheFlags), true);
  // 0x28: pointer
  if (data?.KdcName !== undefined) view.setBigUint64(40, data.KdcName === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.KdcName))), true);
  return buf;
}

export class KERB_BINDING_CACHE_ENTRY_DATAView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u64
  get DiscoveryTime(): Deno.PointerValue {
    return Number(this.view.getBigUint64(0, true));
  }

  // 0x08: pointer
  get RealmName(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x10: pointer
  get KdcAddress(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(16, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x18: u32
  get AddressType(): number {
    return this.view.getUint32(24, true);
  }

  // 0x1c: u32
  get Flags(): number {
    return this.view.getUint32(28, true);
  }

  // 0x20: u32
  get DcFlags(): number {
    return this.view.getUint32(32, true);
  }

  // 0x24: u32
  get CacheFlags(): number {
    return this.view.getUint32(36, true);
  }

  // 0x28: pointer
  get KdcName(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(40, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: u64
  set DiscoveryTime(value: Deno.PointerValue) {
    this.view.setBigUint64(0, BigInt(value), true);
  }

  // 0x08: pointer
  set RealmName(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x10: pointer
  set KdcAddress(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(16, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x18: u32
  set AddressType(value: number) {
    this.view.setUint32(24, value, true);
  }

  // 0x1c: u32
  set Flags(value: number) {
    this.view.setUint32(28, value, true);
  }

  // 0x20: u32
  set DcFlags(value: number) {
    this.view.setUint32(32, value, true);
  }

  // 0x24: u32
  set CacheFlags(value: number) {
    this.view.setUint32(36, value, true);
  }

  // 0x28: pointer
  set KdcName(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(40, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.Security.Authentication.Identity.KERB_QUERY_BINDING_CACHE_RESPONSE (size: 16)
 */
export interface KERB_QUERY_BINDING_CACHE_RESPONSE {
  /** Windows.Win32.Security.Authentication.Identity.KERB_PROTOCOL_MESSAGE_TYPE */
  MessageType: KERB_PROTOCOL_MESSAGE_TYPE;
  /** u32 */
  CountOfEntries: number;
  /** ptr */
  Entries: Deno.PointerValue | Uint8Array;
}

export const sizeofKERB_QUERY_BINDING_CACHE_RESPONSE = 16;

export function allocKERB_QUERY_BINDING_CACHE_RESPONSE(data?: Partial<KERB_QUERY_BINDING_CACHE_RESPONSE>): Uint8Array {
  const buf = new Uint8Array(sizeofKERB_QUERY_BINDING_CACHE_RESPONSE);
  const view = new DataView(buf.buffer);
  // 0x00: i32
  if (data?.MessageType !== undefined) view.setInt32(0, Number(data.MessageType), true);
  // 0x04: u32
  if (data?.CountOfEntries !== undefined) view.setUint32(4, Number(data.CountOfEntries), true);
  // 0x08: pointer
  if (data?.Entries !== undefined) view.setBigUint64(8, data.Entries === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.Entries))), true);
  return buf;
}

export class KERB_QUERY_BINDING_CACHE_RESPONSEView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: i32
  get MessageType(): number {
    return this.view.getInt32(0, true);
  }

  // 0x04: u32
  get CountOfEntries(): number {
    return this.view.getUint32(4, true);
  }

  // 0x08: pointer
  get Entries(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: i32
  set MessageType(value: number) {
    this.view.setInt32(0, value, true);
  }

  // 0x04: u32
  set CountOfEntries(value: number) {
    this.view.setUint32(4, value, true);
  }

  // 0x08: pointer
  set Entries(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.Security.Authentication.Identity.KERB_ADD_BINDING_CACHE_ENTRY_EX_REQUEST (size: 32)
 */
export interface KERB_ADD_BINDING_CACHE_ENTRY_EX_REQUEST {
  /** Windows.Win32.Security.Authentication.Identity.KERB_PROTOCOL_MESSAGE_TYPE */
  MessageType: KERB_PROTOCOL_MESSAGE_TYPE;
  /** Windows.Win32.Foundation.UNICODE_STRING */
  RealmName: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.Foundation.UNICODE_STRING */
  KdcAddress: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.Security.Authentication.Identity.KERB_ADDRESS_TYPE */
  AddressType: KERB_ADDRESS_TYPE;
  /** u32 */
  DcFlags: number;
}

export const sizeofKERB_ADD_BINDING_CACHE_ENTRY_EX_REQUEST = 32;

export function allocKERB_ADD_BINDING_CACHE_ENTRY_EX_REQUEST(data?: Partial<KERB_ADD_BINDING_CACHE_ENTRY_EX_REQUEST>): Uint8Array {
  const buf = new Uint8Array(sizeofKERB_ADD_BINDING_CACHE_ENTRY_EX_REQUEST);
  const view = new DataView(buf.buffer);
  // 0x00: i32
  if (data?.MessageType !== undefined) view.setInt32(0, Number(data.MessageType), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.RealmName !== undefined) view.setBigUint64(8, data.RealmName === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.RealmName))), true);
  // 0x10: pointer
  if (data?.KdcAddress !== undefined) view.setBigUint64(16, data.KdcAddress === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.KdcAddress))), true);
  // 0x18: u32
  if (data?.AddressType !== undefined) view.setUint32(24, Number(data.AddressType), true);
  // 0x1c: u32
  if (data?.DcFlags !== undefined) view.setUint32(28, Number(data.DcFlags), true);
  return buf;
}

export class KERB_ADD_BINDING_CACHE_ENTRY_EX_REQUESTView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: i32
  get MessageType(): number {
    return this.view.getInt32(0, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  get RealmName(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x10: pointer
  get KdcAddress(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(16, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x18: u32
  get AddressType(): number {
    return this.view.getUint32(24, true);
  }

  // 0x1c: u32
  get DcFlags(): number {
    return this.view.getUint32(28, true);
  }

  // 0x00: i32
  set MessageType(value: number) {
    this.view.setInt32(0, value, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  set RealmName(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x10: pointer
  set KdcAddress(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(16, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x18: u32
  set AddressType(value: number) {
    this.view.setUint32(24, value, true);
  }

  // 0x1c: u32
  set DcFlags(value: number) {
    this.view.setUint32(28, value, true);
  }
}

/**
 * Windows.Win32.Security.Authentication.Identity.KERB_QUERY_BINDING_CACHE_REQUEST (size: 8)
 */
export interface KERB_QUERY_BINDING_CACHE_REQUEST {
  /** Windows.Win32.Security.Authentication.Identity.KERB_PROTOCOL_MESSAGE_TYPE */
  MessageType: KERB_PROTOCOL_MESSAGE_TYPE;
}

export const sizeofKERB_QUERY_BINDING_CACHE_REQUEST = 8;

export function allocKERB_QUERY_BINDING_CACHE_REQUEST(data?: Partial<KERB_QUERY_BINDING_CACHE_REQUEST>): Uint8Array {
  const buf = new Uint8Array(sizeofKERB_QUERY_BINDING_CACHE_REQUEST);
  const view = new DataView(buf.buffer);
  // 0x00: i32
  if (data?.MessageType !== undefined) view.setInt32(0, Number(data.MessageType), true);
  // 0x04: pad4
  return buf;
}

export class KERB_QUERY_BINDING_CACHE_REQUESTView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: i32
  get MessageType(): number {
    return this.view.getInt32(0, true);
  }

  // 0x04: pad4

  // 0x00: i32
  set MessageType(value: number) {
    this.view.setInt32(0, value, true);
  }

  // 0x04: pad4
}

/**
 * Windows.Win32.Security.Authentication.Identity.KERB_PURGE_BINDING_CACHE_REQUEST (size: 8)
 */
export interface KERB_PURGE_BINDING_CACHE_REQUEST {
  /** Windows.Win32.Security.Authentication.Identity.KERB_PROTOCOL_MESSAGE_TYPE */
  MessageType: KERB_PROTOCOL_MESSAGE_TYPE;
}

export const sizeofKERB_PURGE_BINDING_CACHE_REQUEST = 8;

export function allocKERB_PURGE_BINDING_CACHE_REQUEST(data?: Partial<KERB_PURGE_BINDING_CACHE_REQUEST>): Uint8Array {
  const buf = new Uint8Array(sizeofKERB_PURGE_BINDING_CACHE_REQUEST);
  const view = new DataView(buf.buffer);
  // 0x00: i32
  if (data?.MessageType !== undefined) view.setInt32(0, Number(data.MessageType), true);
  // 0x04: pad4
  return buf;
}

export class KERB_PURGE_BINDING_CACHE_REQUESTView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: i32
  get MessageType(): number {
    return this.view.getInt32(0, true);
  }

  // 0x04: pad4

  // 0x00: i32
  set MessageType(value: number) {
    this.view.setInt32(0, value, true);
  }

  // 0x04: pad4
}

/**
 * Windows.Win32.Security.Authentication.Identity.KERB_QUERY_DOMAIN_EXTENDED_POLICIES_REQUEST (size: 16)
 */
export interface KERB_QUERY_DOMAIN_EXTENDED_POLICIES_REQUEST {
  /** Windows.Win32.Security.Authentication.Identity.KERB_PROTOCOL_MESSAGE_TYPE */
  MessageType: KERB_PROTOCOL_MESSAGE_TYPE;
  /** u32 */
  Flags: number;
  /** Windows.Win32.Foundation.UNICODE_STRING */
  DomainName: Uint8Array | Deno.PointerValue;
}

export const sizeofKERB_QUERY_DOMAIN_EXTENDED_POLICIES_REQUEST = 16;

export function allocKERB_QUERY_DOMAIN_EXTENDED_POLICIES_REQUEST(data?: Partial<KERB_QUERY_DOMAIN_EXTENDED_POLICIES_REQUEST>): Uint8Array {
  const buf = new Uint8Array(sizeofKERB_QUERY_DOMAIN_EXTENDED_POLICIES_REQUEST);
  const view = new DataView(buf.buffer);
  // 0x00: i32
  if (data?.MessageType !== undefined) view.setInt32(0, Number(data.MessageType), true);
  // 0x04: u32
  if (data?.Flags !== undefined) view.setUint32(4, Number(data.Flags), true);
  // 0x08: pointer
  if (data?.DomainName !== undefined) view.setBigUint64(8, data.DomainName === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.DomainName))), true);
  return buf;
}

export class KERB_QUERY_DOMAIN_EXTENDED_POLICIES_REQUESTView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: i32
  get MessageType(): number {
    return this.view.getInt32(0, true);
  }

  // 0x04: u32
  get Flags(): number {
    return this.view.getUint32(4, true);
  }

  // 0x08: pointer
  get DomainName(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: i32
  set MessageType(value: number) {
    this.view.setInt32(0, value, true);
  }

  // 0x04: u32
  set Flags(value: number) {
    this.view.setUint32(4, value, true);
  }

  // 0x08: pointer
  set DomainName(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.Security.Authentication.Identity.KERB_QUERY_DOMAIN_EXTENDED_POLICIES_RESPONSE (size: 16)
 */
export interface KERB_QUERY_DOMAIN_EXTENDED_POLICIES_RESPONSE {
  /** Windows.Win32.Security.Authentication.Identity.KERB_PROTOCOL_MESSAGE_TYPE */
  MessageType: KERB_PROTOCOL_MESSAGE_TYPE;
  /** u32 */
  Flags: number;
  /** u32 */
  ExtendedPolicies: number;
  /** u32 */
  DsFlags: number;
}

export const sizeofKERB_QUERY_DOMAIN_EXTENDED_POLICIES_RESPONSE = 16;

export function allocKERB_QUERY_DOMAIN_EXTENDED_POLICIES_RESPONSE(data?: Partial<KERB_QUERY_DOMAIN_EXTENDED_POLICIES_RESPONSE>): Uint8Array {
  const buf = new Uint8Array(sizeofKERB_QUERY_DOMAIN_EXTENDED_POLICIES_RESPONSE);
  const view = new DataView(buf.buffer);
  // 0x00: i32
  if (data?.MessageType !== undefined) view.setInt32(0, Number(data.MessageType), true);
  // 0x04: u32
  if (data?.Flags !== undefined) view.setUint32(4, Number(data.Flags), true);
  // 0x08: u32
  if (data?.ExtendedPolicies !== undefined) view.setUint32(8, Number(data.ExtendedPolicies), true);
  // 0x0c: u32
  if (data?.DsFlags !== undefined) view.setUint32(12, Number(data.DsFlags), true);
  return buf;
}

export class KERB_QUERY_DOMAIN_EXTENDED_POLICIES_RESPONSEView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: i32
  get MessageType(): number {
    return this.view.getInt32(0, true);
  }

  // 0x04: u32
  get Flags(): number {
    return this.view.getUint32(4, true);
  }

  // 0x08: u32
  get ExtendedPolicies(): number {
    return this.view.getUint32(8, true);
  }

  // 0x0c: u32
  get DsFlags(): number {
    return this.view.getUint32(12, true);
  }

  // 0x00: i32
  set MessageType(value: number) {
    this.view.setInt32(0, value, true);
  }

  // 0x04: u32
  set Flags(value: number) {
    this.view.setUint32(4, value, true);
  }

  // 0x08: u32
  set ExtendedPolicies(value: number) {
    this.view.setUint32(8, value, true);
  }

  // 0x0c: u32
  set DsFlags(value: number) {
    this.view.setUint32(12, value, true);
  }
}

/**
 * Windows.Win32.Security.Authentication.Identity.KERB_CERTIFICATE_HASHINFO (size: 8)
 */
export interface KERB_CERTIFICATE_HASHINFO {
  /** u16 */
  StoreNameLength: number;
  /** u16 */
  HashLength: number;
}

export const sizeofKERB_CERTIFICATE_HASHINFO = 8;

export function allocKERB_CERTIFICATE_HASHINFO(data?: Partial<KERB_CERTIFICATE_HASHINFO>): Uint8Array {
  const buf = new Uint8Array(sizeofKERB_CERTIFICATE_HASHINFO);
  const view = new DataView(buf.buffer);
  // 0x00: u16
  if (data?.StoreNameLength !== undefined) view.setUint16(0, Number(data.StoreNameLength), true);
  // 0x02: u16
  if (data?.HashLength !== undefined) view.setUint16(2, Number(data.HashLength), true);
  // 0x04: pad4
  return buf;
}

export class KERB_CERTIFICATE_HASHINFOView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u16
  get StoreNameLength(): number {
    return this.view.getUint16(0, true);
  }

  // 0x02: u16
  get HashLength(): number {
    return this.view.getUint16(2, true);
  }

  // 0x04: pad4

  // 0x00: u16
  set StoreNameLength(value: number) {
    this.view.setUint16(0, value, true);
  }

  // 0x02: u16
  set HashLength(value: number) {
    this.view.setUint16(2, value, true);
  }

  // 0x04: pad4
}

/**
 * Windows.Win32.Security.Authentication.Identity.KERB_CERTIFICATE_INFO (size: 8)
 */
export interface KERB_CERTIFICATE_INFO {
  /** u32 */
  CertInfoSize: number;
  /** u32 */
  InfoType: number;
}

export const sizeofKERB_CERTIFICATE_INFO = 8;

export function allocKERB_CERTIFICATE_INFO(data?: Partial<KERB_CERTIFICATE_INFO>): Uint8Array {
  const buf = new Uint8Array(sizeofKERB_CERTIFICATE_INFO);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.CertInfoSize !== undefined) view.setUint32(0, Number(data.CertInfoSize), true);
  // 0x04: u32
  if (data?.InfoType !== undefined) view.setUint32(4, Number(data.InfoType), true);
  return buf;
}

export class KERB_CERTIFICATE_INFOView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get CertInfoSize(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: u32
  get InfoType(): number {
    return this.view.getUint32(4, true);
  }

  // 0x00: u32
  set CertInfoSize(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: u32
  set InfoType(value: number) {
    this.view.setUint32(4, value, true);
  }
}

/**
 * Windows.Win32.Security.Authentication.Identity.POLICY_AUDIT_SID_ARRAY (size: 16)
 */
export interface POLICY_AUDIT_SID_ARRAY {
  /** u32 */
  UsersCount: number;
  /** ptr */
  UserSidArray: Deno.PointerValue | Uint8Array;
}

export const sizeofPOLICY_AUDIT_SID_ARRAY = 16;

export function allocPOLICY_AUDIT_SID_ARRAY(data?: Partial<POLICY_AUDIT_SID_ARRAY>): Uint8Array {
  const buf = new Uint8Array(sizeofPOLICY_AUDIT_SID_ARRAY);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.UsersCount !== undefined) view.setUint32(0, Number(data.UsersCount), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.UserSidArray !== undefined) view.setBigUint64(8, data.UserSidArray === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.UserSidArray))), true);
  return buf;
}

export class POLICY_AUDIT_SID_ARRAYView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get UsersCount(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  get UserSidArray(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: u32
  set UsersCount(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  set UserSidArray(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.Security.Authentication.Identity.AUDIT_POLICY_INFORMATION (size: 24)
 */
export interface AUDIT_POLICY_INFORMATION {
  /** System.Guid */
  AuditSubCategoryGuid: Uint8Array | Deno.PointerValue;
  /** u32 */
  AuditingInformation: number;
  /** System.Guid */
  AuditCategoryGuid: Uint8Array | Deno.PointerValue;
}

export const sizeofAUDIT_POLICY_INFORMATION = 24;

export function allocAUDIT_POLICY_INFORMATION(data?: Partial<AUDIT_POLICY_INFORMATION>): Uint8Array {
  const buf = new Uint8Array(sizeofAUDIT_POLICY_INFORMATION);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.AuditSubCategoryGuid !== undefined) view.setBigUint64(0, data.AuditSubCategoryGuid === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.AuditSubCategoryGuid))), true);
  // 0x08: u32
  if (data?.AuditingInformation !== undefined) view.setUint32(8, Number(data.AuditingInformation), true);
  // 0x0c: pad4
  // 0x10: pointer
  if (data?.AuditCategoryGuid !== undefined) view.setBigUint64(16, data.AuditCategoryGuid === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.AuditCategoryGuid))), true);
  return buf;
}

export class AUDIT_POLICY_INFORMATIONView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get AuditSubCategoryGuid(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(0, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x08: u32
  get AuditingInformation(): number {
    return this.view.getUint32(8, true);
  }

  // 0x0c: pad4

  // 0x10: pointer
  get AuditCategoryGuid(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(16, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: pointer
  set AuditSubCategoryGuid(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(0, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x08: u32
  set AuditingInformation(value: number) {
    this.view.setUint32(8, value, true);
  }

  // 0x0c: pad4

  // 0x10: pointer
  set AuditCategoryGuid(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(16, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.Security.Authentication.Identity.PKU2U_CERT_BLOB (size: 8)
 */
export interface PKU2U_CERT_BLOB {
  /** u32 */
  CertOffset: number;
  /** u16 */
  CertLength: number;
}

export const sizeofPKU2U_CERT_BLOB = 8;

export function allocPKU2U_CERT_BLOB(data?: Partial<PKU2U_CERT_BLOB>): Uint8Array {
  const buf = new Uint8Array(sizeofPKU2U_CERT_BLOB);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.CertOffset !== undefined) view.setUint32(0, Number(data.CertOffset), true);
  // 0x04: u16
  if (data?.CertLength !== undefined) view.setUint16(4, Number(data.CertLength), true);
  // 0x06: pad2
  return buf;
}

export class PKU2U_CERT_BLOBView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get CertOffset(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: u16
  get CertLength(): number {
    return this.view.getUint16(4, true);
  }

  // 0x06: pad2

  // 0x00: u32
  set CertOffset(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: u16
  set CertLength(value: number) {
    this.view.setUint16(4, value, true);
  }

  // 0x06: pad2
}

/**
 * Windows.Win32.Security.Authentication.Identity.PKU2U_CREDUI_CONTEXT (size: 24)
 */
export interface PKU2U_CREDUI_CONTEXT {
  /** u64 */
  Version: Deno.PointerValue;
  /** u16 */
  cbHeaderLength: number;
  /** u32 */
  cbStructureLength: number;
  /** u16 */
  CertArrayCount: number;
  /** u32 */
  CertArrayOffset: number;
}

export const sizeofPKU2U_CREDUI_CONTEXT = 24;

export function allocPKU2U_CREDUI_CONTEXT(data?: Partial<PKU2U_CREDUI_CONTEXT>): Uint8Array {
  const buf = new Uint8Array(sizeofPKU2U_CREDUI_CONTEXT);
  const view = new DataView(buf.buffer);
  // 0x00: u64
  if (data?.Version !== undefined) view.setBigUint64(0, BigInt(data.Version), true);
  // 0x08: u16
  if (data?.cbHeaderLength !== undefined) view.setUint16(8, Number(data.cbHeaderLength), true);
  // 0x0a: u32
  if (data?.cbStructureLength !== undefined) view.setUint32(10, Number(data.cbStructureLength), true);
  // 0x0e: u16
  if (data?.CertArrayCount !== undefined) view.setUint16(14, Number(data.CertArrayCount), true);
  // 0x10: u32
  if (data?.CertArrayOffset !== undefined) view.setUint32(16, Number(data.CertArrayOffset), true);
  // 0x14: pad4
  return buf;
}

export class PKU2U_CREDUI_CONTEXTView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u64
  get Version(): Deno.PointerValue {
    return Number(this.view.getBigUint64(0, true));
  }

  // 0x08: u16
  get cbHeaderLength(): number {
    return this.view.getUint16(8, true);
  }

  // 0x0a: u32
  get cbStructureLength(): number {
    return this.view.getUint32(10, true);
  }

  // 0x0e: u16
  get CertArrayCount(): number {
    return this.view.getUint16(14, true);
  }

  // 0x10: u32
  get CertArrayOffset(): number {
    return this.view.getUint32(16, true);
  }

  // 0x14: pad4

  // 0x00: u64
  set Version(value: Deno.PointerValue) {
    this.view.setBigUint64(0, BigInt(value), true);
  }

  // 0x08: u16
  set cbHeaderLength(value: number) {
    this.view.setUint16(8, value, true);
  }

  // 0x0a: u32
  set cbStructureLength(value: number) {
    this.view.setUint32(10, value, true);
  }

  // 0x0e: u16
  set CertArrayCount(value: number) {
    this.view.setUint16(14, value, true);
  }

  // 0x10: u32
  set CertArrayOffset(value: number) {
    this.view.setUint32(16, value, true);
  }

  // 0x14: pad4
}

/**
 * Windows.Win32.Security.Authentication.Identity.PKU2U_CERTIFICATE_S4U_LOGON (size: 40)
 */
export interface PKU2U_CERTIFICATE_S4U_LOGON {
  /** Windows.Win32.Security.Authentication.Identity.PKU2U_LOGON_SUBMIT_TYPE */
  MessageType: PKU2U_LOGON_SUBMIT_TYPE;
  /** u32 */
  Flags: number;
  /** Windows.Win32.Foundation.UNICODE_STRING */
  UserPrincipalName: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.Foundation.UNICODE_STRING */
  DomainName: Uint8Array | Deno.PointerValue;
  /** u32 */
  CertificateLength: number;
  /** ptr */
  Certificate: Deno.PointerValue | Uint8Array;
}

export const sizeofPKU2U_CERTIFICATE_S4U_LOGON = 40;

export function allocPKU2U_CERTIFICATE_S4U_LOGON(data?: Partial<PKU2U_CERTIFICATE_S4U_LOGON>): Uint8Array {
  const buf = new Uint8Array(sizeofPKU2U_CERTIFICATE_S4U_LOGON);
  const view = new DataView(buf.buffer);
  // 0x00: i32
  if (data?.MessageType !== undefined) view.setInt32(0, Number(data.MessageType), true);
  // 0x04: u32
  if (data?.Flags !== undefined) view.setUint32(4, Number(data.Flags), true);
  // 0x08: pointer
  if (data?.UserPrincipalName !== undefined) view.setBigUint64(8, data.UserPrincipalName === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.UserPrincipalName))), true);
  // 0x10: pointer
  if (data?.DomainName !== undefined) view.setBigUint64(16, data.DomainName === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.DomainName))), true);
  // 0x18: u32
  if (data?.CertificateLength !== undefined) view.setUint32(24, Number(data.CertificateLength), true);
  // 0x1c: pad4
  // 0x20: pointer
  if (data?.Certificate !== undefined) view.setBigUint64(32, data.Certificate === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.Certificate))), true);
  return buf;
}

export class PKU2U_CERTIFICATE_S4U_LOGONView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: i32
  get MessageType(): number {
    return this.view.getInt32(0, true);
  }

  // 0x04: u32
  get Flags(): number {
    return this.view.getUint32(4, true);
  }

  // 0x08: pointer
  get UserPrincipalName(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x10: pointer
  get DomainName(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(16, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x18: u32
  get CertificateLength(): number {
    return this.view.getUint32(24, true);
  }

  // 0x1c: pad4

  // 0x20: pointer
  get Certificate(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(32, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: i32
  set MessageType(value: number) {
    this.view.setInt32(0, value, true);
  }

  // 0x04: u32
  set Flags(value: number) {
    this.view.setUint32(4, value, true);
  }

  // 0x08: pointer
  set UserPrincipalName(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x10: pointer
  set DomainName(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(16, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x18: u32
  set CertificateLength(value: number) {
    this.view.setUint32(24, value, true);
  }

  // 0x1c: pad4

  // 0x20: pointer
  set Certificate(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(32, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.Security.Authentication.Identity.SecPkgInfoW (size: 32)
 */
export interface SecPkgInfoW {
  /** u32 */
  fCapabilities: number;
  /** u16 */
  wVersion: number;
  /** u16 */
  wRPCID: number;
  /** u32 */
  cbMaxToken: number;
  /** ptr */
  Name: Deno.PointerValue | Uint8Array;
  /** ptr */
  Comment: Deno.PointerValue | Uint8Array;
}

export const sizeofSecPkgInfoW = 32;

export function allocSecPkgInfoW(data?: Partial<SecPkgInfoW>): Uint8Array {
  const buf = new Uint8Array(sizeofSecPkgInfoW);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.fCapabilities !== undefined) view.setUint32(0, Number(data.fCapabilities), true);
  // 0x04: u16
  if (data?.wVersion !== undefined) view.setUint16(4, Number(data.wVersion), true);
  // 0x06: u16
  if (data?.wRPCID !== undefined) view.setUint16(6, Number(data.wRPCID), true);
  // 0x08: u32
  if (data?.cbMaxToken !== undefined) view.setUint32(8, Number(data.cbMaxToken), true);
  // 0x0c: pad4
  // 0x10: pointer
  if (data?.Name !== undefined) view.setBigUint64(16, data.Name === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.Name))), true);
  // 0x18: pointer
  if (data?.Comment !== undefined) view.setBigUint64(24, data.Comment === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.Comment))), true);
  return buf;
}

export class SecPkgInfoWView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get fCapabilities(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: u16
  get wVersion(): number {
    return this.view.getUint16(4, true);
  }

  // 0x06: u16
  get wRPCID(): number {
    return this.view.getUint16(6, true);
  }

  // 0x08: u32
  get cbMaxToken(): number {
    return this.view.getUint32(8, true);
  }

  // 0x0c: pad4

  // 0x10: pointer
  get Name(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(16, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x18: pointer
  get Comment(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(24, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: u32
  set fCapabilities(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: u16
  set wVersion(value: number) {
    this.view.setUint16(4, value, true);
  }

  // 0x06: u16
  set wRPCID(value: number) {
    this.view.setUint16(6, value, true);
  }

  // 0x08: u32
  set cbMaxToken(value: number) {
    this.view.setUint32(8, value, true);
  }

  // 0x0c: pad4

  // 0x10: pointer
  set Name(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(16, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x18: pointer
  set Comment(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(24, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.Security.Authentication.Identity.SecPkgInfoA (size: 32)
 */
export interface SecPkgInfoA {
  /** u32 */
  fCapabilities: number;
  /** u16 */
  wVersion: number;
  /** u16 */
  wRPCID: number;
  /** u32 */
  cbMaxToken: number;
  /** ptr */
  Name: Deno.PointerValue | Uint8Array;
  /** ptr */
  Comment: Deno.PointerValue | Uint8Array;
}

export const sizeofSecPkgInfoA = 32;

export function allocSecPkgInfoA(data?: Partial<SecPkgInfoA>): Uint8Array {
  const buf = new Uint8Array(sizeofSecPkgInfoA);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.fCapabilities !== undefined) view.setUint32(0, Number(data.fCapabilities), true);
  // 0x04: u16
  if (data?.wVersion !== undefined) view.setUint16(4, Number(data.wVersion), true);
  // 0x06: u16
  if (data?.wRPCID !== undefined) view.setUint16(6, Number(data.wRPCID), true);
  // 0x08: u32
  if (data?.cbMaxToken !== undefined) view.setUint32(8, Number(data.cbMaxToken), true);
  // 0x0c: pad4
  // 0x10: pointer
  if (data?.Name !== undefined) view.setBigUint64(16, data.Name === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.Name))), true);
  // 0x18: pointer
  if (data?.Comment !== undefined) view.setBigUint64(24, data.Comment === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.Comment))), true);
  return buf;
}

export class SecPkgInfoAView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get fCapabilities(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: u16
  get wVersion(): number {
    return this.view.getUint16(4, true);
  }

  // 0x06: u16
  get wRPCID(): number {
    return this.view.getUint16(6, true);
  }

  // 0x08: u32
  get cbMaxToken(): number {
    return this.view.getUint32(8, true);
  }

  // 0x0c: pad4

  // 0x10: pointer
  get Name(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(16, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x18: pointer
  get Comment(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(24, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: u32
  set fCapabilities(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: u16
  set wVersion(value: number) {
    this.view.setUint16(4, value, true);
  }

  // 0x06: u16
  set wRPCID(value: number) {
    this.view.setUint16(6, value, true);
  }

  // 0x08: u32
  set cbMaxToken(value: number) {
    this.view.setUint32(8, value, true);
  }

  // 0x0c: pad4

  // 0x10: pointer
  set Name(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(16, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x18: pointer
  set Comment(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(24, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.Security.Authentication.Identity.SecBuffer (size: 16)
 */
export interface SecBuffer {
  /** u32 */
  cbBuffer: number;
  /** u32 */
  BufferType: number;
  /** ptr */
  pvBuffer: Deno.PointerValue | Uint8Array;
}

export const sizeofSecBuffer = 16;

export function allocSecBuffer(data?: Partial<SecBuffer>): Uint8Array {
  const buf = new Uint8Array(sizeofSecBuffer);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.cbBuffer !== undefined) view.setUint32(0, Number(data.cbBuffer), true);
  // 0x04: u32
  if (data?.BufferType !== undefined) view.setUint32(4, Number(data.BufferType), true);
  // 0x08: pointer
  if (data?.pvBuffer !== undefined) view.setBigUint64(8, data.pvBuffer === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.pvBuffer))), true);
  return buf;
}

export class SecBufferView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get cbBuffer(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: u32
  get BufferType(): number {
    return this.view.getUint32(4, true);
  }

  // 0x08: pointer
  get pvBuffer(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: u32
  set cbBuffer(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: u32
  set BufferType(value: number) {
    this.view.setUint32(4, value, true);
  }

  // 0x08: pointer
  set pvBuffer(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.Security.Authentication.Identity.SecBufferDesc (size: 16)
 */
export interface SecBufferDesc {
  /** u32 */
  ulVersion: number;
  /** u32 */
  cBuffers: number;
  /** ptr */
  pBuffers: Deno.PointerValue | Uint8Array;
}

export const sizeofSecBufferDesc = 16;

export function allocSecBufferDesc(data?: Partial<SecBufferDesc>): Uint8Array {
  const buf = new Uint8Array(sizeofSecBufferDesc);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.ulVersion !== undefined) view.setUint32(0, Number(data.ulVersion), true);
  // 0x04: u32
  if (data?.cBuffers !== undefined) view.setUint32(4, Number(data.cBuffers), true);
  // 0x08: pointer
  if (data?.pBuffers !== undefined) view.setBigUint64(8, data.pBuffers === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.pBuffers))), true);
  return buf;
}

export class SecBufferDescView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get ulVersion(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: u32
  get cBuffers(): number {
    return this.view.getUint32(4, true);
  }

  // 0x08: pointer
  get pBuffers(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: u32
  set ulVersion(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: u32
  set cBuffers(value: number) {
    this.view.setUint32(4, value, true);
  }

  // 0x08: pointer
  set pBuffers(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.Security.Authentication.Identity.SEC_NEGOTIATION_INFO (size: 24)
 */
export interface SEC_NEGOTIATION_INFO {
  /** u32 */
  Size: number;
  /** u32 */
  NameLength: number;
  /** ptr */
  Name: Deno.PointerValue | Uint8Array;
  /** ptr */
  Reserved: Deno.PointerValue | Uint8Array;
}

export const sizeofSEC_NEGOTIATION_INFO = 24;

export function allocSEC_NEGOTIATION_INFO(data?: Partial<SEC_NEGOTIATION_INFO>): Uint8Array {
  const buf = new Uint8Array(sizeofSEC_NEGOTIATION_INFO);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.Size !== undefined) view.setUint32(0, Number(data.Size), true);
  // 0x04: u32
  if (data?.NameLength !== undefined) view.setUint32(4, Number(data.NameLength), true);
  // 0x08: pointer
  if (data?.Name !== undefined) view.setBigUint64(8, data.Name === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.Name))), true);
  // 0x10: pointer
  if (data?.Reserved !== undefined) view.setBigUint64(16, data.Reserved === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.Reserved))), true);
  return buf;
}

export class SEC_NEGOTIATION_INFOView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get Size(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: u32
  get NameLength(): number {
    return this.view.getUint32(4, true);
  }

  // 0x08: pointer
  get Name(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x10: pointer
  get Reserved(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(16, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: u32
  set Size(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: u32
  set NameLength(value: number) {
    this.view.setUint32(4, value, true);
  }

  // 0x08: pointer
  set Name(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x10: pointer
  set Reserved(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(16, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.Security.Authentication.Identity.SEC_CHANNEL_BINDINGS (size: 32)
 */
export interface SEC_CHANNEL_BINDINGS {
  /** u32 */
  dwInitiatorAddrType: number;
  /** u32 */
  cbInitiatorLength: number;
  /** u32 */
  dwInitiatorOffset: number;
  /** u32 */
  dwAcceptorAddrType: number;
  /** u32 */
  cbAcceptorLength: number;
  /** u32 */
  dwAcceptorOffset: number;
  /** u32 */
  cbApplicationDataLength: number;
  /** u32 */
  dwApplicationDataOffset: number;
}

export const sizeofSEC_CHANNEL_BINDINGS = 32;

export function allocSEC_CHANNEL_BINDINGS(data?: Partial<SEC_CHANNEL_BINDINGS>): Uint8Array {
  const buf = new Uint8Array(sizeofSEC_CHANNEL_BINDINGS);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.dwInitiatorAddrType !== undefined) view.setUint32(0, Number(data.dwInitiatorAddrType), true);
  // 0x04: u32
  if (data?.cbInitiatorLength !== undefined) view.setUint32(4, Number(data.cbInitiatorLength), true);
  // 0x08: u32
  if (data?.dwInitiatorOffset !== undefined) view.setUint32(8, Number(data.dwInitiatorOffset), true);
  // 0x0c: u32
  if (data?.dwAcceptorAddrType !== undefined) view.setUint32(12, Number(data.dwAcceptorAddrType), true);
  // 0x10: u32
  if (data?.cbAcceptorLength !== undefined) view.setUint32(16, Number(data.cbAcceptorLength), true);
  // 0x14: u32
  if (data?.dwAcceptorOffset !== undefined) view.setUint32(20, Number(data.dwAcceptorOffset), true);
  // 0x18: u32
  if (data?.cbApplicationDataLength !== undefined) view.setUint32(24, Number(data.cbApplicationDataLength), true);
  // 0x1c: u32
  if (data?.dwApplicationDataOffset !== undefined) view.setUint32(28, Number(data.dwApplicationDataOffset), true);
  return buf;
}

export class SEC_CHANNEL_BINDINGSView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get dwInitiatorAddrType(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: u32
  get cbInitiatorLength(): number {
    return this.view.getUint32(4, true);
  }

  // 0x08: u32
  get dwInitiatorOffset(): number {
    return this.view.getUint32(8, true);
  }

  // 0x0c: u32
  get dwAcceptorAddrType(): number {
    return this.view.getUint32(12, true);
  }

  // 0x10: u32
  get cbAcceptorLength(): number {
    return this.view.getUint32(16, true);
  }

  // 0x14: u32
  get dwAcceptorOffset(): number {
    return this.view.getUint32(20, true);
  }

  // 0x18: u32
  get cbApplicationDataLength(): number {
    return this.view.getUint32(24, true);
  }

  // 0x1c: u32
  get dwApplicationDataOffset(): number {
    return this.view.getUint32(28, true);
  }

  // 0x00: u32
  set dwInitiatorAddrType(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: u32
  set cbInitiatorLength(value: number) {
    this.view.setUint32(4, value, true);
  }

  // 0x08: u32
  set dwInitiatorOffset(value: number) {
    this.view.setUint32(8, value, true);
  }

  // 0x0c: u32
  set dwAcceptorAddrType(value: number) {
    this.view.setUint32(12, value, true);
  }

  // 0x10: u32
  set cbAcceptorLength(value: number) {
    this.view.setUint32(16, value, true);
  }

  // 0x14: u32
  set dwAcceptorOffset(value: number) {
    this.view.setUint32(20, value, true);
  }

  // 0x18: u32
  set cbApplicationDataLength(value: number) {
    this.view.setUint32(24, value, true);
  }

  // 0x1c: u32
  set dwApplicationDataOffset(value: number) {
    this.view.setUint32(28, value, true);
  }
}

/**
 * Windows.Win32.Security.Authentication.Identity.SEC_APPLICATION_PROTOCOL_LIST (size: 16)
 */
export interface SEC_APPLICATION_PROTOCOL_LIST {
  /** Windows.Win32.Security.Authentication.Identity.SEC_APPLICATION_PROTOCOL_NEGOTIATION_EXT */
  ProtoNegoExt: SEC_APPLICATION_PROTOCOL_NEGOTIATION_EXT;
  /** u16 */
  ProtocolListSize: number;
  /** array */
  ProtocolList: Deno.PointerValue;
}

export const sizeofSEC_APPLICATION_PROTOCOL_LIST = 16;

export function allocSEC_APPLICATION_PROTOCOL_LIST(data?: Partial<SEC_APPLICATION_PROTOCOL_LIST>): Uint8Array {
  const buf = new Uint8Array(sizeofSEC_APPLICATION_PROTOCOL_LIST);
  const view = new DataView(buf.buffer);
  // 0x00: i32
  if (data?.ProtoNegoExt !== undefined) view.setInt32(0, Number(data.ProtoNegoExt), true);
  // 0x04: u16
  if (data?.ProtocolListSize !== undefined) view.setUint16(4, Number(data.ProtocolListSize), true);
  // 0x06: pad2
  // 0x08: pointer
  if (data?.ProtocolList !== undefined) view.setBigUint64(8, data.ProtocolList === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.ProtocolList))), true);
  return buf;
}

export class SEC_APPLICATION_PROTOCOL_LISTView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: i32
  get ProtoNegoExt(): number {
    return this.view.getInt32(0, true);
  }

  // 0x04: u16
  get ProtocolListSize(): number {
    return this.view.getUint16(4, true);
  }

  // 0x06: pad2

  // 0x08: pointer
  get ProtocolList(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: i32
  set ProtoNegoExt(value: number) {
    this.view.setInt32(0, value, true);
  }

  // 0x04: u16
  set ProtocolListSize(value: number) {
    this.view.setUint16(4, value, true);
  }

  // 0x06: pad2

  // 0x08: pointer
  set ProtocolList(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.Security.Authentication.Identity.SEC_APPLICATION_PROTOCOLS (size: 16)
 */
export interface SEC_APPLICATION_PROTOCOLS {
  /** u32 */
  ProtocolListsSize: number;
  /** array */
  ProtocolLists: Deno.PointerValue;
}

export const sizeofSEC_APPLICATION_PROTOCOLS = 16;

export function allocSEC_APPLICATION_PROTOCOLS(data?: Partial<SEC_APPLICATION_PROTOCOLS>): Uint8Array {
  const buf = new Uint8Array(sizeofSEC_APPLICATION_PROTOCOLS);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.ProtocolListsSize !== undefined) view.setUint32(0, Number(data.ProtocolListsSize), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.ProtocolLists !== undefined) view.setBigUint64(8, data.ProtocolLists === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.ProtocolLists))), true);
  return buf;
}

export class SEC_APPLICATION_PROTOCOLSView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get ProtocolListsSize(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  get ProtocolLists(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: u32
  set ProtocolListsSize(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  set ProtocolLists(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.Security.Authentication.Identity.SEC_SRTP_PROTECTION_PROFILES (size: 16)
 */
export interface SEC_SRTP_PROTECTION_PROFILES {
  /** u16 */
  ProfilesSize: number;
  /** array */
  ProfilesList: Deno.PointerValue;
}

export const sizeofSEC_SRTP_PROTECTION_PROFILES = 16;

export function allocSEC_SRTP_PROTECTION_PROFILES(data?: Partial<SEC_SRTP_PROTECTION_PROFILES>): Uint8Array {
  const buf = new Uint8Array(sizeofSEC_SRTP_PROTECTION_PROFILES);
  const view = new DataView(buf.buffer);
  // 0x00: u16
  if (data?.ProfilesSize !== undefined) view.setUint16(0, Number(data.ProfilesSize), true);
  // 0x02: pad6
  // 0x08: pointer
  if (data?.ProfilesList !== undefined) view.setBigUint64(8, data.ProfilesList === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.ProfilesList))), true);
  return buf;
}

export class SEC_SRTP_PROTECTION_PROFILESView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u16
  get ProfilesSize(): number {
    return this.view.getUint16(0, true);
  }

  // 0x02: pad6

  // 0x08: pointer
  get ProfilesList(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: u16
  set ProfilesSize(value: number) {
    this.view.setUint16(0, value, true);
  }

  // 0x02: pad6

  // 0x08: pointer
  set ProfilesList(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.Security.Authentication.Identity.SEC_SRTP_MASTER_KEY_IDENTIFIER (size: 16)
 */
export interface SEC_SRTP_MASTER_KEY_IDENTIFIER {
  /** u8 */
  MasterKeyIdentifierSize: number;
  /** array */
  MasterKeyIdentifier: Deno.PointerValue;
}

export const sizeofSEC_SRTP_MASTER_KEY_IDENTIFIER = 16;

export function allocSEC_SRTP_MASTER_KEY_IDENTIFIER(data?: Partial<SEC_SRTP_MASTER_KEY_IDENTIFIER>): Uint8Array {
  const buf = new Uint8Array(sizeofSEC_SRTP_MASTER_KEY_IDENTIFIER);
  const view = new DataView(buf.buffer);
  // 0x00: u8
  if (data?.MasterKeyIdentifierSize !== undefined) view.setUint8(0, Number(data.MasterKeyIdentifierSize));
  // 0x01: pad7
  // 0x08: pointer
  if (data?.MasterKeyIdentifier !== undefined) view.setBigUint64(8, data.MasterKeyIdentifier === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.MasterKeyIdentifier))), true);
  return buf;
}

export class SEC_SRTP_MASTER_KEY_IDENTIFIERView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u8
  get MasterKeyIdentifierSize(): number {
    return this.view.getUint8(0);
  }

  // 0x01: pad7

  // 0x08: pointer
  get MasterKeyIdentifier(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: u8
  set MasterKeyIdentifierSize(value: number) {
    this.view.setUint8(0, value);
  }

  // 0x01: pad7

  // 0x08: pointer
  set MasterKeyIdentifier(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.Security.Authentication.Identity.SEC_TOKEN_BINDING (size: 16)
 */
export interface SEC_TOKEN_BINDING {
  /** u8 */
  MajorVersion: number;
  /** u8 */
  MinorVersion: number;
  /** u16 */
  KeyParametersSize: number;
  /** array */
  KeyParameters: Deno.PointerValue;
}

export const sizeofSEC_TOKEN_BINDING = 16;

export function allocSEC_TOKEN_BINDING(data?: Partial<SEC_TOKEN_BINDING>): Uint8Array {
  const buf = new Uint8Array(sizeofSEC_TOKEN_BINDING);
  const view = new DataView(buf.buffer);
  // 0x00: u8
  if (data?.MajorVersion !== undefined) view.setUint8(0, Number(data.MajorVersion));
  // 0x01: u8
  if (data?.MinorVersion !== undefined) view.setUint8(1, Number(data.MinorVersion));
  // 0x02: u16
  if (data?.KeyParametersSize !== undefined) view.setUint16(2, Number(data.KeyParametersSize), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.KeyParameters !== undefined) view.setBigUint64(8, data.KeyParameters === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.KeyParameters))), true);
  return buf;
}

export class SEC_TOKEN_BINDINGView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u8
  get MajorVersion(): number {
    return this.view.getUint8(0);
  }

  // 0x01: u8
  get MinorVersion(): number {
    return this.view.getUint8(1);
  }

  // 0x02: u16
  get KeyParametersSize(): number {
    return this.view.getUint16(2, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  get KeyParameters(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: u8
  set MajorVersion(value: number) {
    this.view.setUint8(0, value);
  }

  // 0x01: u8
  set MinorVersion(value: number) {
    this.view.setUint8(1, value);
  }

  // 0x02: u16
  set KeyParametersSize(value: number) {
    this.view.setUint16(2, value, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  set KeyParameters(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.Security.Authentication.Identity.SEC_PRESHAREDKEY (size: 16)
 */
export interface SEC_PRESHAREDKEY {
  /** u16 */
  KeySize: number;
  /** array */
  Key: Deno.PointerValue;
}

export const sizeofSEC_PRESHAREDKEY = 16;

export function allocSEC_PRESHAREDKEY(data?: Partial<SEC_PRESHAREDKEY>): Uint8Array {
  const buf = new Uint8Array(sizeofSEC_PRESHAREDKEY);
  const view = new DataView(buf.buffer);
  // 0x00: u16
  if (data?.KeySize !== undefined) view.setUint16(0, Number(data.KeySize), true);
  // 0x02: pad6
  // 0x08: pointer
  if (data?.Key !== undefined) view.setBigUint64(8, data.Key === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.Key))), true);
  return buf;
}

export class SEC_PRESHAREDKEYView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u16
  get KeySize(): number {
    return this.view.getUint16(0, true);
  }

  // 0x02: pad6

  // 0x08: pointer
  get Key(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: u16
  set KeySize(value: number) {
    this.view.setUint16(0, value, true);
  }

  // 0x02: pad6

  // 0x08: pointer
  set Key(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.Security.Authentication.Identity.SEC_PRESHAREDKEY_IDENTITY (size: 16)
 */
export interface SEC_PRESHAREDKEY_IDENTITY {
  /** u16 */
  KeyIdentitySize: number;
  /** array */
  KeyIdentity: Deno.PointerValue;
}

export const sizeofSEC_PRESHAREDKEY_IDENTITY = 16;

export function allocSEC_PRESHAREDKEY_IDENTITY(data?: Partial<SEC_PRESHAREDKEY_IDENTITY>): Uint8Array {
  const buf = new Uint8Array(sizeofSEC_PRESHAREDKEY_IDENTITY);
  const view = new DataView(buf.buffer);
  // 0x00: u16
  if (data?.KeyIdentitySize !== undefined) view.setUint16(0, Number(data.KeyIdentitySize), true);
  // 0x02: pad6
  // 0x08: pointer
  if (data?.KeyIdentity !== undefined) view.setBigUint64(8, data.KeyIdentity === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.KeyIdentity))), true);
  return buf;
}

export class SEC_PRESHAREDKEY_IDENTITYView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u16
  get KeyIdentitySize(): number {
    return this.view.getUint16(0, true);
  }

  // 0x02: pad6

  // 0x08: pointer
  get KeyIdentity(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: u16
  set KeyIdentitySize(value: number) {
    this.view.setUint16(0, value, true);
  }

  // 0x02: pad6

  // 0x08: pointer
  set KeyIdentity(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.Security.Authentication.Identity.SEC_DTLS_MTU (size: 8)
 */
export interface SEC_DTLS_MTU {
  /** u16 */
  PathMTU: number;
}

export const sizeofSEC_DTLS_MTU = 8;

export function allocSEC_DTLS_MTU(data?: Partial<SEC_DTLS_MTU>): Uint8Array {
  const buf = new Uint8Array(sizeofSEC_DTLS_MTU);
  const view = new DataView(buf.buffer);
  // 0x00: u16
  if (data?.PathMTU !== undefined) view.setUint16(0, Number(data.PathMTU), true);
  // 0x02: pad6
  return buf;
}

export class SEC_DTLS_MTUView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u16
  get PathMTU(): number {
    return this.view.getUint16(0, true);
  }

  // 0x02: pad6

  // 0x00: u16
  set PathMTU(value: number) {
    this.view.setUint16(0, value, true);
  }

  // 0x02: pad6
}

/**
 * Windows.Win32.Security.Authentication.Identity.SEC_FLAGS (size: 8)
 */
export interface SEC_FLAGS {
  /** u64 */
  Flags: Deno.PointerValue;
}

export const sizeofSEC_FLAGS = 8;

export function allocSEC_FLAGS(data?: Partial<SEC_FLAGS>): Uint8Array {
  const buf = new Uint8Array(sizeofSEC_FLAGS);
  const view = new DataView(buf.buffer);
  // 0x00: u64
  if (data?.Flags !== undefined) view.setBigUint64(0, BigInt(data.Flags), true);
  return buf;
}

export class SEC_FLAGSView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u64
  get Flags(): Deno.PointerValue {
    return Number(this.view.getBigUint64(0, true));
  }

  // 0x00: u64
  set Flags(value: Deno.PointerValue) {
    this.view.setBigUint64(0, BigInt(value), true);
  }
}

/**
 * Windows.Win32.Security.Authentication.Identity.SEC_TRAFFIC_SECRETS (size: 48)
 */
export interface SEC_TRAFFIC_SECRETS {
  /** array */
  SymmetricAlgId: Deno.PointerValue;
  /** array */
  ChainingMode: Deno.PointerValue;
  /** array */
  HashAlgId: Deno.PointerValue;
  /** u16 */
  KeySize: number;
  /** u16 */
  IvSize: number;
  /** u16 */
  MsgSequenceStart: number;
  /** u16 */
  MsgSequenceEnd: number;
  /** Windows.Win32.Security.Authentication.Identity.SEC_TRAFFIC_SECRET_TYPE */
  TrafficSecretType: SEC_TRAFFIC_SECRET_TYPE;
  /** u16 */
  TrafficSecretSize: number;
  /** array */
  TrafficSecret: Deno.PointerValue;
}

export const sizeofSEC_TRAFFIC_SECRETS = 48;

export function allocSEC_TRAFFIC_SECRETS(data?: Partial<SEC_TRAFFIC_SECRETS>): Uint8Array {
  const buf = new Uint8Array(sizeofSEC_TRAFFIC_SECRETS);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.SymmetricAlgId !== undefined) view.setBigUint64(0, data.SymmetricAlgId === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.SymmetricAlgId))), true);
  // 0x08: pointer
  if (data?.ChainingMode !== undefined) view.setBigUint64(8, data.ChainingMode === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.ChainingMode))), true);
  // 0x10: pointer
  if (data?.HashAlgId !== undefined) view.setBigUint64(16, data.HashAlgId === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.HashAlgId))), true);
  // 0x18: u16
  if (data?.KeySize !== undefined) view.setUint16(24, Number(data.KeySize), true);
  // 0x1a: u16
  if (data?.IvSize !== undefined) view.setUint16(26, Number(data.IvSize), true);
  // 0x1c: u16
  if (data?.MsgSequenceStart !== undefined) view.setUint16(28, Number(data.MsgSequenceStart), true);
  // 0x1e: u16
  if (data?.MsgSequenceEnd !== undefined) view.setUint16(30, Number(data.MsgSequenceEnd), true);
  // 0x20: i32
  if (data?.TrafficSecretType !== undefined) view.setInt32(32, Number(data.TrafficSecretType), true);
  // 0x24: u16
  if (data?.TrafficSecretSize !== undefined) view.setUint16(36, Number(data.TrafficSecretSize), true);
  // 0x26: pad2
  // 0x28: pointer
  if (data?.TrafficSecret !== undefined) view.setBigUint64(40, data.TrafficSecret === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.TrafficSecret))), true);
  return buf;
}

export class SEC_TRAFFIC_SECRETSView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get SymmetricAlgId(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(0, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x08: pointer
  get ChainingMode(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x10: pointer
  get HashAlgId(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(16, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x18: u16
  get KeySize(): number {
    return this.view.getUint16(24, true);
  }

  // 0x1a: u16
  get IvSize(): number {
    return this.view.getUint16(26, true);
  }

  // 0x1c: u16
  get MsgSequenceStart(): number {
    return this.view.getUint16(28, true);
  }

  // 0x1e: u16
  get MsgSequenceEnd(): number {
    return this.view.getUint16(30, true);
  }

  // 0x20: i32
  get TrafficSecretType(): number {
    return this.view.getInt32(32, true);
  }

  // 0x24: u16
  get TrafficSecretSize(): number {
    return this.view.getUint16(36, true);
  }

  // 0x26: pad2

  // 0x28: pointer
  get TrafficSecret(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(40, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: pointer
  set SymmetricAlgId(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(0, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x08: pointer
  set ChainingMode(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x10: pointer
  set HashAlgId(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(16, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x18: u16
  set KeySize(value: number) {
    this.view.setUint16(24, value, true);
  }

  // 0x1a: u16
  set IvSize(value: number) {
    this.view.setUint16(26, value, true);
  }

  // 0x1c: u16
  set MsgSequenceStart(value: number) {
    this.view.setUint16(28, value, true);
  }

  // 0x1e: u16
  set MsgSequenceEnd(value: number) {
    this.view.setUint16(30, value, true);
  }

  // 0x20: i32
  set TrafficSecretType(value: number) {
    this.view.setInt32(32, value, true);
  }

  // 0x24: u16
  set TrafficSecretSize(value: number) {
    this.view.setUint16(36, value, true);
  }

  // 0x26: pad2

  // 0x28: pointer
  set TrafficSecret(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(40, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.Security.Authentication.Identity.SecPkgCredentials_NamesW (size: 8)
 */
export interface SecPkgCredentials_NamesW {
  /** ptr */
  sUserName: Deno.PointerValue | Uint8Array;
}

export const sizeofSecPkgCredentials_NamesW = 8;

export function allocSecPkgCredentials_NamesW(data?: Partial<SecPkgCredentials_NamesW>): Uint8Array {
  const buf = new Uint8Array(sizeofSecPkgCredentials_NamesW);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.sUserName !== undefined) view.setBigUint64(0, data.sUserName === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.sUserName))), true);
  return buf;
}

export class SecPkgCredentials_NamesWView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get sUserName(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(0, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: pointer
  set sUserName(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(0, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.Security.Authentication.Identity.SecPkgCredentials_NamesA (size: 8)
 */
export interface SecPkgCredentials_NamesA {
  /** ptr */
  sUserName: Deno.PointerValue | Uint8Array;
}

export const sizeofSecPkgCredentials_NamesA = 8;

export function allocSecPkgCredentials_NamesA(data?: Partial<SecPkgCredentials_NamesA>): Uint8Array {
  const buf = new Uint8Array(sizeofSecPkgCredentials_NamesA);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.sUserName !== undefined) view.setBigUint64(0, data.sUserName === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.sUserName))), true);
  return buf;
}

export class SecPkgCredentials_NamesAView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get sUserName(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(0, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: pointer
  set sUserName(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(0, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.Security.Authentication.Identity.SecPkgCredentials_SSIProviderW (size: 24)
 */
export interface SecPkgCredentials_SSIProviderW {
  /** ptr */
  sProviderName: Deno.PointerValue | Uint8Array;
  /** u32 */
  ProviderInfoLength: number;
  /** Windows.Win32.Foundation.PSTR */
  ProviderInfo: string | null | Uint8Array;
}

export const sizeofSecPkgCredentials_SSIProviderW = 24;

export function allocSecPkgCredentials_SSIProviderW(data?: Partial<SecPkgCredentials_SSIProviderW>): Uint8Array {
  const buf = new Uint8Array(sizeofSecPkgCredentials_SSIProviderW);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.sProviderName !== undefined) view.setBigUint64(0, data.sProviderName === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.sProviderName))), true);
  // 0x08: u32
  if (data?.ProviderInfoLength !== undefined) view.setUint32(8, Number(data.ProviderInfoLength), true);
  // 0x0c: pad4
  // 0x10: buffer
  if (data?.ProviderInfo !== undefined) {
    (buf as any)._f16 = util.pstrToFfi(data.ProviderInfo);
    view.setBigUint64(16, (buf as any)._f16 === null ? 0n : BigInt(Deno.UnsafePointer.value(Deno.UnsafePointer.of((buf as any)._f16))), true);
  }
  return buf;
}

export class SecPkgCredentials_SSIProviderWView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get sProviderName(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(0, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x08: u32
  get ProviderInfoLength(): number {
    return this.view.getUint32(8, true);
  }

  // 0x0c: pad4

  // 0x10: buffer
  get ProviderInfo(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(16, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: pointer
  set sProviderName(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(0, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x08: u32
  set ProviderInfoLength(value: number) {
    this.view.setUint32(8, value, true);
  }

  // 0x0c: pad4

  // 0x10: buffer
  set ProviderInfo(value: Uint8Array | Deno.PointerValue) {
    (this.buf as any)._f16 = value;
    this.view.setBigUint64(16, BigInt(Deno.UnsafePointer.value(util.toPointer((this.buf as any)._f16))), true);
  }
}

/**
 * Windows.Win32.Security.Authentication.Identity.SecPkgCredentials_SSIProviderA (size: 24)
 */
export interface SecPkgCredentials_SSIProviderA {
  /** ptr */
  sProviderName: Deno.PointerValue | Uint8Array;
  /** u32 */
  ProviderInfoLength: number;
  /** Windows.Win32.Foundation.PSTR */
  ProviderInfo: string | null | Uint8Array;
}

export const sizeofSecPkgCredentials_SSIProviderA = 24;

export function allocSecPkgCredentials_SSIProviderA(data?: Partial<SecPkgCredentials_SSIProviderA>): Uint8Array {
  const buf = new Uint8Array(sizeofSecPkgCredentials_SSIProviderA);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.sProviderName !== undefined) view.setBigUint64(0, data.sProviderName === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.sProviderName))), true);
  // 0x08: u32
  if (data?.ProviderInfoLength !== undefined) view.setUint32(8, Number(data.ProviderInfoLength), true);
  // 0x0c: pad4
  // 0x10: buffer
  if (data?.ProviderInfo !== undefined) {
    (buf as any)._f16 = util.pstrToFfi(data.ProviderInfo);
    view.setBigUint64(16, (buf as any)._f16 === null ? 0n : BigInt(Deno.UnsafePointer.value(Deno.UnsafePointer.of((buf as any)._f16))), true);
  }
  return buf;
}

export class SecPkgCredentials_SSIProviderAView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get sProviderName(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(0, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x08: u32
  get ProviderInfoLength(): number {
    return this.view.getUint32(8, true);
  }

  // 0x0c: pad4

  // 0x10: buffer
  get ProviderInfo(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(16, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: pointer
  set sProviderName(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(0, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x08: u32
  set ProviderInfoLength(value: number) {
    this.view.setUint32(8, value, true);
  }

  // 0x0c: pad4

  // 0x10: buffer
  set ProviderInfo(value: Uint8Array | Deno.PointerValue) {
    (this.buf as any)._f16 = value;
    this.view.setBigUint64(16, BigInt(Deno.UnsafePointer.value(util.toPointer((this.buf as any)._f16))), true);
  }
}

/**
 * Windows.Win32.Security.Authentication.Identity.SecPkgCredentials_KdcProxySettingsW (size: 16)
 */
export interface SecPkgCredentials_KdcProxySettingsW {
  /** u32 */
  Version: number;
  /** u32 */
  Flags: number;
  /** u16 */
  ProxyServerOffset: number;
  /** u16 */
  ProxyServerLength: number;
  /** u16 */
  ClientTlsCredOffset: number;
  /** u16 */
  ClientTlsCredLength: number;
}

export const sizeofSecPkgCredentials_KdcProxySettingsW = 16;

export function allocSecPkgCredentials_KdcProxySettingsW(data?: Partial<SecPkgCredentials_KdcProxySettingsW>): Uint8Array {
  const buf = new Uint8Array(sizeofSecPkgCredentials_KdcProxySettingsW);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.Version !== undefined) view.setUint32(0, Number(data.Version), true);
  // 0x04: u32
  if (data?.Flags !== undefined) view.setUint32(4, Number(data.Flags), true);
  // 0x08: u16
  if (data?.ProxyServerOffset !== undefined) view.setUint16(8, Number(data.ProxyServerOffset), true);
  // 0x0a: u16
  if (data?.ProxyServerLength !== undefined) view.setUint16(10, Number(data.ProxyServerLength), true);
  // 0x0c: u16
  if (data?.ClientTlsCredOffset !== undefined) view.setUint16(12, Number(data.ClientTlsCredOffset), true);
  // 0x0e: u16
  if (data?.ClientTlsCredLength !== undefined) view.setUint16(14, Number(data.ClientTlsCredLength), true);
  return buf;
}

export class SecPkgCredentials_KdcProxySettingsWView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get Version(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: u32
  get Flags(): number {
    return this.view.getUint32(4, true);
  }

  // 0x08: u16
  get ProxyServerOffset(): number {
    return this.view.getUint16(8, true);
  }

  // 0x0a: u16
  get ProxyServerLength(): number {
    return this.view.getUint16(10, true);
  }

  // 0x0c: u16
  get ClientTlsCredOffset(): number {
    return this.view.getUint16(12, true);
  }

  // 0x0e: u16
  get ClientTlsCredLength(): number {
    return this.view.getUint16(14, true);
  }

  // 0x00: u32
  set Version(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: u32
  set Flags(value: number) {
    this.view.setUint32(4, value, true);
  }

  // 0x08: u16
  set ProxyServerOffset(value: number) {
    this.view.setUint16(8, value, true);
  }

  // 0x0a: u16
  set ProxyServerLength(value: number) {
    this.view.setUint16(10, value, true);
  }

  // 0x0c: u16
  set ClientTlsCredOffset(value: number) {
    this.view.setUint16(12, value, true);
  }

  // 0x0e: u16
  set ClientTlsCredLength(value: number) {
    this.view.setUint16(14, value, true);
  }
}

/**
 * Windows.Win32.Security.Authentication.Identity.SecPkgCredentials_Cert (size: 16)
 */
export interface SecPkgCredentials_Cert {
  /** u32 */
  EncodedCertSize: number;
  /** ptr */
  EncodedCert: Deno.PointerValue | Uint8Array;
}

export const sizeofSecPkgCredentials_Cert = 16;

export function allocSecPkgCredentials_Cert(data?: Partial<SecPkgCredentials_Cert>): Uint8Array {
  const buf = new Uint8Array(sizeofSecPkgCredentials_Cert);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.EncodedCertSize !== undefined) view.setUint32(0, Number(data.EncodedCertSize), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.EncodedCert !== undefined) view.setBigUint64(8, data.EncodedCert === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.EncodedCert))), true);
  return buf;
}

export class SecPkgCredentials_CertView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get EncodedCertSize(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  get EncodedCert(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: u32
  set EncodedCertSize(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  set EncodedCert(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.Security.Authentication.Identity.SecPkgContext_SubjectAttributes (size: 8)
 */
export interface SecPkgContext_SubjectAttributes {
  /** ptr */
  AttributeInfo: Deno.PointerValue | Uint8Array;
}

export const sizeofSecPkgContext_SubjectAttributes = 8;

export function allocSecPkgContext_SubjectAttributes(data?: Partial<SecPkgContext_SubjectAttributes>): Uint8Array {
  const buf = new Uint8Array(sizeofSecPkgContext_SubjectAttributes);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.AttributeInfo !== undefined) view.setBigUint64(0, data.AttributeInfo === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.AttributeInfo))), true);
  return buf;
}

export class SecPkgContext_SubjectAttributesView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get AttributeInfo(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(0, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: pointer
  set AttributeInfo(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(0, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.Security.Authentication.Identity.SecPkgContext_CredInfo (size: 8)
 */
export interface SecPkgContext_CredInfo {
  /** Windows.Win32.Security.Authentication.Identity.SECPKG_CRED_CLASS */
  CredClass: SECPKG_CRED_CLASS;
  /** u32 */
  IsPromptingNeeded: number;
}

export const sizeofSecPkgContext_CredInfo = 8;

export function allocSecPkgContext_CredInfo(data?: Partial<SecPkgContext_CredInfo>): Uint8Array {
  const buf = new Uint8Array(sizeofSecPkgContext_CredInfo);
  const view = new DataView(buf.buffer);
  // 0x00: i32
  if (data?.CredClass !== undefined) view.setInt32(0, Number(data.CredClass), true);
  // 0x04: u32
  if (data?.IsPromptingNeeded !== undefined) view.setUint32(4, Number(data.IsPromptingNeeded), true);
  return buf;
}

export class SecPkgContext_CredInfoView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: i32
  get CredClass(): number {
    return this.view.getInt32(0, true);
  }

  // 0x04: u32
  get IsPromptingNeeded(): number {
    return this.view.getUint32(4, true);
  }

  // 0x00: i32
  set CredClass(value: number) {
    this.view.setInt32(0, value, true);
  }

  // 0x04: u32
  set IsPromptingNeeded(value: number) {
    this.view.setUint32(4, value, true);
  }
}

/**
 * Windows.Win32.Security.Authentication.Identity.SecPkgContext_NegoPackageInfo (size: 8)
 */
export interface SecPkgContext_NegoPackageInfo {
  /** u32 */
  PackageMask: number;
}

export const sizeofSecPkgContext_NegoPackageInfo = 8;

export function allocSecPkgContext_NegoPackageInfo(data?: Partial<SecPkgContext_NegoPackageInfo>): Uint8Array {
  const buf = new Uint8Array(sizeofSecPkgContext_NegoPackageInfo);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.PackageMask !== undefined) view.setUint32(0, Number(data.PackageMask), true);
  // 0x04: pad4
  return buf;
}

export class SecPkgContext_NegoPackageInfoView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get PackageMask(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: pad4

  // 0x00: u32
  set PackageMask(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: pad4
}

/**
 * Windows.Win32.Security.Authentication.Identity.SecPkgContext_NegoStatus (size: 8)
 */
export interface SecPkgContext_NegoStatus {
  /** u32 */
  LastStatus: number;
}

export const sizeofSecPkgContext_NegoStatus = 8;

export function allocSecPkgContext_NegoStatus(data?: Partial<SecPkgContext_NegoStatus>): Uint8Array {
  const buf = new Uint8Array(sizeofSecPkgContext_NegoStatus);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.LastStatus !== undefined) view.setUint32(0, Number(data.LastStatus), true);
  // 0x04: pad4
  return buf;
}

export class SecPkgContext_NegoStatusView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get LastStatus(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: pad4

  // 0x00: u32
  set LastStatus(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: pad4
}

/**
 * Windows.Win32.Security.Authentication.Identity.SecPkgContext_Sizes (size: 16)
 */
export interface SecPkgContext_Sizes {
  /** u32 */
  cbMaxToken: number;
  /** u32 */
  cbMaxSignature: number;
  /** u32 */
  cbBlockSize: number;
  /** u32 */
  cbSecurityTrailer: number;
}

export const sizeofSecPkgContext_Sizes = 16;

export function allocSecPkgContext_Sizes(data?: Partial<SecPkgContext_Sizes>): Uint8Array {
  const buf = new Uint8Array(sizeofSecPkgContext_Sizes);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.cbMaxToken !== undefined) view.setUint32(0, Number(data.cbMaxToken), true);
  // 0x04: u32
  if (data?.cbMaxSignature !== undefined) view.setUint32(4, Number(data.cbMaxSignature), true);
  // 0x08: u32
  if (data?.cbBlockSize !== undefined) view.setUint32(8, Number(data.cbBlockSize), true);
  // 0x0c: u32
  if (data?.cbSecurityTrailer !== undefined) view.setUint32(12, Number(data.cbSecurityTrailer), true);
  return buf;
}

export class SecPkgContext_SizesView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get cbMaxToken(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: u32
  get cbMaxSignature(): number {
    return this.view.getUint32(4, true);
  }

  // 0x08: u32
  get cbBlockSize(): number {
    return this.view.getUint32(8, true);
  }

  // 0x0c: u32
  get cbSecurityTrailer(): number {
    return this.view.getUint32(12, true);
  }

  // 0x00: u32
  set cbMaxToken(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: u32
  set cbMaxSignature(value: number) {
    this.view.setUint32(4, value, true);
  }

  // 0x08: u32
  set cbBlockSize(value: number) {
    this.view.setUint32(8, value, true);
  }

  // 0x0c: u32
  set cbSecurityTrailer(value: number) {
    this.view.setUint32(12, value, true);
  }
}

/**
 * Windows.Win32.Security.Authentication.Identity.SecPkgContext_StreamSizes (size: 24)
 */
export interface SecPkgContext_StreamSizes {
  /** u32 */
  cbHeader: number;
  /** u32 */
  cbTrailer: number;
  /** u32 */
  cbMaximumMessage: number;
  /** u32 */
  cBuffers: number;
  /** u32 */
  cbBlockSize: number;
}

export const sizeofSecPkgContext_StreamSizes = 24;

export function allocSecPkgContext_StreamSizes(data?: Partial<SecPkgContext_StreamSizes>): Uint8Array {
  const buf = new Uint8Array(sizeofSecPkgContext_StreamSizes);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.cbHeader !== undefined) view.setUint32(0, Number(data.cbHeader), true);
  // 0x04: u32
  if (data?.cbTrailer !== undefined) view.setUint32(4, Number(data.cbTrailer), true);
  // 0x08: u32
  if (data?.cbMaximumMessage !== undefined) view.setUint32(8, Number(data.cbMaximumMessage), true);
  // 0x0c: u32
  if (data?.cBuffers !== undefined) view.setUint32(12, Number(data.cBuffers), true);
  // 0x10: u32
  if (data?.cbBlockSize !== undefined) view.setUint32(16, Number(data.cbBlockSize), true);
  // 0x14: pad4
  return buf;
}

export class SecPkgContext_StreamSizesView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get cbHeader(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: u32
  get cbTrailer(): number {
    return this.view.getUint32(4, true);
  }

  // 0x08: u32
  get cbMaximumMessage(): number {
    return this.view.getUint32(8, true);
  }

  // 0x0c: u32
  get cBuffers(): number {
    return this.view.getUint32(12, true);
  }

  // 0x10: u32
  get cbBlockSize(): number {
    return this.view.getUint32(16, true);
  }

  // 0x14: pad4

  // 0x00: u32
  set cbHeader(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: u32
  set cbTrailer(value: number) {
    this.view.setUint32(4, value, true);
  }

  // 0x08: u32
  set cbMaximumMessage(value: number) {
    this.view.setUint32(8, value, true);
  }

  // 0x0c: u32
  set cBuffers(value: number) {
    this.view.setUint32(12, value, true);
  }

  // 0x10: u32
  set cbBlockSize(value: number) {
    this.view.setUint32(16, value, true);
  }

  // 0x14: pad4
}

/**
 * Windows.Win32.Security.Authentication.Identity.SecPkgContext_NamesW (size: 8)
 */
export interface SecPkgContext_NamesW {
  /** ptr */
  sUserName: Deno.PointerValue | Uint8Array;
}

export const sizeofSecPkgContext_NamesW = 8;

export function allocSecPkgContext_NamesW(data?: Partial<SecPkgContext_NamesW>): Uint8Array {
  const buf = new Uint8Array(sizeofSecPkgContext_NamesW);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.sUserName !== undefined) view.setBigUint64(0, data.sUserName === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.sUserName))), true);
  return buf;
}

export class SecPkgContext_NamesWView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get sUserName(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(0, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: pointer
  set sUserName(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(0, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.Security.Authentication.Identity.SecPkgContext_LastClientTokenStatus (size: 8)
 */
export interface SecPkgContext_LastClientTokenStatus {
  /** Windows.Win32.Security.Authentication.Identity.SECPKG_ATTR_LCT_STATUS */
  LastClientTokenStatus: SECPKG_ATTR_LCT_STATUS;
}

export const sizeofSecPkgContext_LastClientTokenStatus = 8;

export function allocSecPkgContext_LastClientTokenStatus(data?: Partial<SecPkgContext_LastClientTokenStatus>): Uint8Array {
  const buf = new Uint8Array(sizeofSecPkgContext_LastClientTokenStatus);
  const view = new DataView(buf.buffer);
  // 0x00: i32
  if (data?.LastClientTokenStatus !== undefined) view.setInt32(0, Number(data.LastClientTokenStatus), true);
  // 0x04: pad4
  return buf;
}

export class SecPkgContext_LastClientTokenStatusView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: i32
  get LastClientTokenStatus(): number {
    return this.view.getInt32(0, true);
  }

  // 0x04: pad4

  // 0x00: i32
  set LastClientTokenStatus(value: number) {
    this.view.setInt32(0, value, true);
  }

  // 0x04: pad4
}

/**
 * Windows.Win32.Security.Authentication.Identity.SecPkgContext_NamesA (size: 8)
 */
export interface SecPkgContext_NamesA {
  /** ptr */
  sUserName: Deno.PointerValue | Uint8Array;
}

export const sizeofSecPkgContext_NamesA = 8;

export function allocSecPkgContext_NamesA(data?: Partial<SecPkgContext_NamesA>): Uint8Array {
  const buf = new Uint8Array(sizeofSecPkgContext_NamesA);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.sUserName !== undefined) view.setBigUint64(0, data.sUserName === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.sUserName))), true);
  return buf;
}

export class SecPkgContext_NamesAView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get sUserName(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(0, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: pointer
  set sUserName(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(0, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.Security.Authentication.Identity.SecPkgContext_Lifespan (size: 16)
 */
export interface SecPkgContext_Lifespan {
  /** Windows.Win32.Foundation.LARGE_INTEGER */
  tsStart: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.Foundation.LARGE_INTEGER */
  tsExpiry: Uint8Array | Deno.PointerValue;
}

export const sizeofSecPkgContext_Lifespan = 16;

export function allocSecPkgContext_Lifespan(data?: Partial<SecPkgContext_Lifespan>): Uint8Array {
  const buf = new Uint8Array(sizeofSecPkgContext_Lifespan);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.tsStart !== undefined) view.setBigUint64(0, data.tsStart === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.tsStart))), true);
  // 0x08: pointer
  if (data?.tsExpiry !== undefined) view.setBigUint64(8, data.tsExpiry === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.tsExpiry))), true);
  return buf;
}

export class SecPkgContext_LifespanView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get tsStart(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(0, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x08: pointer
  get tsExpiry(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: pointer
  set tsStart(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(0, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x08: pointer
  set tsExpiry(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.Security.Authentication.Identity.SecPkgContext_DceInfo (size: 16)
 */
export interface SecPkgContext_DceInfo {
  /** u32 */
  AuthzSvc: number;
  /** ptr */
  pPac: Deno.PointerValue | Uint8Array;
}

export const sizeofSecPkgContext_DceInfo = 16;

export function allocSecPkgContext_DceInfo(data?: Partial<SecPkgContext_DceInfo>): Uint8Array {
  const buf = new Uint8Array(sizeofSecPkgContext_DceInfo);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.AuthzSvc !== undefined) view.setUint32(0, Number(data.AuthzSvc), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.pPac !== undefined) view.setBigUint64(8, data.pPac === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.pPac))), true);
  return buf;
}

export class SecPkgContext_DceInfoView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get AuthzSvc(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  get pPac(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: u32
  set AuthzSvc(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  set pPac(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.Security.Authentication.Identity.SecPkgContext_KeyInfoA (size: 32)
 */
export interface SecPkgContext_KeyInfoA {
  /** ptr */
  sSignatureAlgorithmName: Deno.PointerValue | Uint8Array;
  /** ptr */
  sEncryptAlgorithmName: Deno.PointerValue | Uint8Array;
  /** u32 */
  KeySize: number;
  /** u32 */
  SignatureAlgorithm: number;
  /** u32 */
  EncryptAlgorithm: number;
}

export const sizeofSecPkgContext_KeyInfoA = 32;

export function allocSecPkgContext_KeyInfoA(data?: Partial<SecPkgContext_KeyInfoA>): Uint8Array {
  const buf = new Uint8Array(sizeofSecPkgContext_KeyInfoA);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.sSignatureAlgorithmName !== undefined) view.setBigUint64(0, data.sSignatureAlgorithmName === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.sSignatureAlgorithmName))), true);
  // 0x08: pointer
  if (data?.sEncryptAlgorithmName !== undefined) view.setBigUint64(8, data.sEncryptAlgorithmName === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.sEncryptAlgorithmName))), true);
  // 0x10: u32
  if (data?.KeySize !== undefined) view.setUint32(16, Number(data.KeySize), true);
  // 0x14: u32
  if (data?.SignatureAlgorithm !== undefined) view.setUint32(20, Number(data.SignatureAlgorithm), true);
  // 0x18: u32
  if (data?.EncryptAlgorithm !== undefined) view.setUint32(24, Number(data.EncryptAlgorithm), true);
  // 0x1c: pad4
  return buf;
}

export class SecPkgContext_KeyInfoAView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get sSignatureAlgorithmName(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(0, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x08: pointer
  get sEncryptAlgorithmName(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x10: u32
  get KeySize(): number {
    return this.view.getUint32(16, true);
  }

  // 0x14: u32
  get SignatureAlgorithm(): number {
    return this.view.getUint32(20, true);
  }

  // 0x18: u32
  get EncryptAlgorithm(): number {
    return this.view.getUint32(24, true);
  }

  // 0x1c: pad4

  // 0x00: pointer
  set sSignatureAlgorithmName(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(0, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x08: pointer
  set sEncryptAlgorithmName(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x10: u32
  set KeySize(value: number) {
    this.view.setUint32(16, value, true);
  }

  // 0x14: u32
  set SignatureAlgorithm(value: number) {
    this.view.setUint32(20, value, true);
  }

  // 0x18: u32
  set EncryptAlgorithm(value: number) {
    this.view.setUint32(24, value, true);
  }

  // 0x1c: pad4
}

/**
 * Windows.Win32.Security.Authentication.Identity.SecPkgContext_KeyInfoW (size: 32)
 */
export interface SecPkgContext_KeyInfoW {
  /** ptr */
  sSignatureAlgorithmName: Deno.PointerValue | Uint8Array;
  /** ptr */
  sEncryptAlgorithmName: Deno.PointerValue | Uint8Array;
  /** u32 */
  KeySize: number;
  /** u32 */
  SignatureAlgorithm: number;
  /** u32 */
  EncryptAlgorithm: number;
}

export const sizeofSecPkgContext_KeyInfoW = 32;

export function allocSecPkgContext_KeyInfoW(data?: Partial<SecPkgContext_KeyInfoW>): Uint8Array {
  const buf = new Uint8Array(sizeofSecPkgContext_KeyInfoW);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.sSignatureAlgorithmName !== undefined) view.setBigUint64(0, data.sSignatureAlgorithmName === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.sSignatureAlgorithmName))), true);
  // 0x08: pointer
  if (data?.sEncryptAlgorithmName !== undefined) view.setBigUint64(8, data.sEncryptAlgorithmName === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.sEncryptAlgorithmName))), true);
  // 0x10: u32
  if (data?.KeySize !== undefined) view.setUint32(16, Number(data.KeySize), true);
  // 0x14: u32
  if (data?.SignatureAlgorithm !== undefined) view.setUint32(20, Number(data.SignatureAlgorithm), true);
  // 0x18: u32
  if (data?.EncryptAlgorithm !== undefined) view.setUint32(24, Number(data.EncryptAlgorithm), true);
  // 0x1c: pad4
  return buf;
}

export class SecPkgContext_KeyInfoWView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get sSignatureAlgorithmName(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(0, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x08: pointer
  get sEncryptAlgorithmName(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x10: u32
  get KeySize(): number {
    return this.view.getUint32(16, true);
  }

  // 0x14: u32
  get SignatureAlgorithm(): number {
    return this.view.getUint32(20, true);
  }

  // 0x18: u32
  get EncryptAlgorithm(): number {
    return this.view.getUint32(24, true);
  }

  // 0x1c: pad4

  // 0x00: pointer
  set sSignatureAlgorithmName(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(0, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x08: pointer
  set sEncryptAlgorithmName(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x10: u32
  set KeySize(value: number) {
    this.view.setUint32(16, value, true);
  }

  // 0x14: u32
  set SignatureAlgorithm(value: number) {
    this.view.setUint32(20, value, true);
  }

  // 0x18: u32
  set EncryptAlgorithm(value: number) {
    this.view.setUint32(24, value, true);
  }

  // 0x1c: pad4
}

/**
 * Windows.Win32.Security.Authentication.Identity.SecPkgContext_AuthorityA (size: 8)
 */
export interface SecPkgContext_AuthorityA {
  /** ptr */
  sAuthorityName: Deno.PointerValue | Uint8Array;
}

export const sizeofSecPkgContext_AuthorityA = 8;

export function allocSecPkgContext_AuthorityA(data?: Partial<SecPkgContext_AuthorityA>): Uint8Array {
  const buf = new Uint8Array(sizeofSecPkgContext_AuthorityA);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.sAuthorityName !== undefined) view.setBigUint64(0, data.sAuthorityName === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.sAuthorityName))), true);
  return buf;
}

export class SecPkgContext_AuthorityAView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get sAuthorityName(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(0, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: pointer
  set sAuthorityName(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(0, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.Security.Authentication.Identity.SecPkgContext_AuthorityW (size: 8)
 */
export interface SecPkgContext_AuthorityW {
  /** ptr */
  sAuthorityName: Deno.PointerValue | Uint8Array;
}

export const sizeofSecPkgContext_AuthorityW = 8;

export function allocSecPkgContext_AuthorityW(data?: Partial<SecPkgContext_AuthorityW>): Uint8Array {
  const buf = new Uint8Array(sizeofSecPkgContext_AuthorityW);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.sAuthorityName !== undefined) view.setBigUint64(0, data.sAuthorityName === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.sAuthorityName))), true);
  return buf;
}

export class SecPkgContext_AuthorityWView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get sAuthorityName(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(0, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: pointer
  set sAuthorityName(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(0, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.Security.Authentication.Identity.SecPkgContext_ProtoInfoA (size: 16)
 */
export interface SecPkgContext_ProtoInfoA {
  /** ptr */
  sProtocolName: Deno.PointerValue | Uint8Array;
  /** u32 */
  majorVersion: number;
  /** u32 */
  minorVersion: number;
}

export const sizeofSecPkgContext_ProtoInfoA = 16;

export function allocSecPkgContext_ProtoInfoA(data?: Partial<SecPkgContext_ProtoInfoA>): Uint8Array {
  const buf = new Uint8Array(sizeofSecPkgContext_ProtoInfoA);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.sProtocolName !== undefined) view.setBigUint64(0, data.sProtocolName === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.sProtocolName))), true);
  // 0x08: u32
  if (data?.majorVersion !== undefined) view.setUint32(8, Number(data.majorVersion), true);
  // 0x0c: u32
  if (data?.minorVersion !== undefined) view.setUint32(12, Number(data.minorVersion), true);
  return buf;
}

export class SecPkgContext_ProtoInfoAView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get sProtocolName(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(0, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x08: u32
  get majorVersion(): number {
    return this.view.getUint32(8, true);
  }

  // 0x0c: u32
  get minorVersion(): number {
    return this.view.getUint32(12, true);
  }

  // 0x00: pointer
  set sProtocolName(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(0, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x08: u32
  set majorVersion(value: number) {
    this.view.setUint32(8, value, true);
  }

  // 0x0c: u32
  set minorVersion(value: number) {
    this.view.setUint32(12, value, true);
  }
}

/**
 * Windows.Win32.Security.Authentication.Identity.SecPkgContext_ProtoInfoW (size: 16)
 */
export interface SecPkgContext_ProtoInfoW {
  /** ptr */
  sProtocolName: Deno.PointerValue | Uint8Array;
  /** u32 */
  majorVersion: number;
  /** u32 */
  minorVersion: number;
}

export const sizeofSecPkgContext_ProtoInfoW = 16;

export function allocSecPkgContext_ProtoInfoW(data?: Partial<SecPkgContext_ProtoInfoW>): Uint8Array {
  const buf = new Uint8Array(sizeofSecPkgContext_ProtoInfoW);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.sProtocolName !== undefined) view.setBigUint64(0, data.sProtocolName === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.sProtocolName))), true);
  // 0x08: u32
  if (data?.majorVersion !== undefined) view.setUint32(8, Number(data.majorVersion), true);
  // 0x0c: u32
  if (data?.minorVersion !== undefined) view.setUint32(12, Number(data.minorVersion), true);
  return buf;
}

export class SecPkgContext_ProtoInfoWView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get sProtocolName(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(0, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x08: u32
  get majorVersion(): number {
    return this.view.getUint32(8, true);
  }

  // 0x0c: u32
  get minorVersion(): number {
    return this.view.getUint32(12, true);
  }

  // 0x00: pointer
  set sProtocolName(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(0, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x08: u32
  set majorVersion(value: number) {
    this.view.setUint32(8, value, true);
  }

  // 0x0c: u32
  set minorVersion(value: number) {
    this.view.setUint32(12, value, true);
  }
}

/**
 * Windows.Win32.Security.Authentication.Identity.SecPkgContext_PasswordExpiry (size: 8)
 */
export interface SecPkgContext_PasswordExpiry {
  /** Windows.Win32.Foundation.LARGE_INTEGER */
  tsPasswordExpires: Uint8Array | Deno.PointerValue;
}

export const sizeofSecPkgContext_PasswordExpiry = 8;

export function allocSecPkgContext_PasswordExpiry(data?: Partial<SecPkgContext_PasswordExpiry>): Uint8Array {
  const buf = new Uint8Array(sizeofSecPkgContext_PasswordExpiry);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.tsPasswordExpires !== undefined) view.setBigUint64(0, data.tsPasswordExpires === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.tsPasswordExpires))), true);
  return buf;
}

export class SecPkgContext_PasswordExpiryView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get tsPasswordExpires(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(0, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: pointer
  set tsPasswordExpires(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(0, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.Security.Authentication.Identity.SecPkgContext_LogoffTime (size: 8)
 */
export interface SecPkgContext_LogoffTime {
  /** Windows.Win32.Foundation.LARGE_INTEGER */
  tsLogoffTime: Uint8Array | Deno.PointerValue;
}

export const sizeofSecPkgContext_LogoffTime = 8;

export function allocSecPkgContext_LogoffTime(data?: Partial<SecPkgContext_LogoffTime>): Uint8Array {
  const buf = new Uint8Array(sizeofSecPkgContext_LogoffTime);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.tsLogoffTime !== undefined) view.setBigUint64(0, data.tsLogoffTime === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.tsLogoffTime))), true);
  return buf;
}

export class SecPkgContext_LogoffTimeView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get tsLogoffTime(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(0, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: pointer
  set tsLogoffTime(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(0, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.Security.Authentication.Identity.SecPkgContext_SessionKey (size: 16)
 */
export interface SecPkgContext_SessionKey {
  /** u32 */
  SessionKeyLength: number;
  /** ptr */
  SessionKey: Deno.PointerValue | Uint8Array;
}

export const sizeofSecPkgContext_SessionKey = 16;

export function allocSecPkgContext_SessionKey(data?: Partial<SecPkgContext_SessionKey>): Uint8Array {
  const buf = new Uint8Array(sizeofSecPkgContext_SessionKey);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.SessionKeyLength !== undefined) view.setUint32(0, Number(data.SessionKeyLength), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.SessionKey !== undefined) view.setBigUint64(8, data.SessionKey === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.SessionKey))), true);
  return buf;
}

export class SecPkgContext_SessionKeyView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get SessionKeyLength(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  get SessionKey(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: u32
  set SessionKeyLength(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  set SessionKey(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.Security.Authentication.Identity.SecPkgContext_NegoKeys (size: 32)
 */
export interface SecPkgContext_NegoKeys {
  /** u32 */
  KeyType: number;
  /** u16 */
  KeyLength: number;
  /** ptr */
  KeyValue: Deno.PointerValue | Uint8Array;
  /** u32 */
  VerifyKeyType: number;
  /** u16 */
  VerifyKeyLength: number;
  /** ptr */
  VerifyKeyValue: Deno.PointerValue | Uint8Array;
}

export const sizeofSecPkgContext_NegoKeys = 32;

export function allocSecPkgContext_NegoKeys(data?: Partial<SecPkgContext_NegoKeys>): Uint8Array {
  const buf = new Uint8Array(sizeofSecPkgContext_NegoKeys);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.KeyType !== undefined) view.setUint32(0, Number(data.KeyType), true);
  // 0x04: u16
  if (data?.KeyLength !== undefined) view.setUint16(4, Number(data.KeyLength), true);
  // 0x06: pad2
  // 0x08: pointer
  if (data?.KeyValue !== undefined) view.setBigUint64(8, data.KeyValue === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.KeyValue))), true);
  // 0x10: u32
  if (data?.VerifyKeyType !== undefined) view.setUint32(16, Number(data.VerifyKeyType), true);
  // 0x14: u16
  if (data?.VerifyKeyLength !== undefined) view.setUint16(20, Number(data.VerifyKeyLength), true);
  // 0x16: pad2
  // 0x18: pointer
  if (data?.VerifyKeyValue !== undefined) view.setBigUint64(24, data.VerifyKeyValue === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.VerifyKeyValue))), true);
  return buf;
}

export class SecPkgContext_NegoKeysView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get KeyType(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: u16
  get KeyLength(): number {
    return this.view.getUint16(4, true);
  }

  // 0x06: pad2

  // 0x08: pointer
  get KeyValue(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x10: u32
  get VerifyKeyType(): number {
    return this.view.getUint32(16, true);
  }

  // 0x14: u16
  get VerifyKeyLength(): number {
    return this.view.getUint16(20, true);
  }

  // 0x16: pad2

  // 0x18: pointer
  get VerifyKeyValue(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(24, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: u32
  set KeyType(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: u16
  set KeyLength(value: number) {
    this.view.setUint16(4, value, true);
  }

  // 0x06: pad2

  // 0x08: pointer
  set KeyValue(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x10: u32
  set VerifyKeyType(value: number) {
    this.view.setUint32(16, value, true);
  }

  // 0x14: u16
  set VerifyKeyLength(value: number) {
    this.view.setUint16(20, value, true);
  }

  // 0x16: pad2

  // 0x18: pointer
  set VerifyKeyValue(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(24, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.Security.Authentication.Identity.SecPkgContext_PackageInfoW (size: 8)
 */
export interface SecPkgContext_PackageInfoW {
  /** ptr */
  PackageInfo: Deno.PointerValue | Uint8Array;
}

export const sizeofSecPkgContext_PackageInfoW = 8;

export function allocSecPkgContext_PackageInfoW(data?: Partial<SecPkgContext_PackageInfoW>): Uint8Array {
  const buf = new Uint8Array(sizeofSecPkgContext_PackageInfoW);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.PackageInfo !== undefined) view.setBigUint64(0, data.PackageInfo === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.PackageInfo))), true);
  return buf;
}

export class SecPkgContext_PackageInfoWView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get PackageInfo(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(0, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: pointer
  set PackageInfo(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(0, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.Security.Authentication.Identity.SecPkgContext_PackageInfoA (size: 8)
 */
export interface SecPkgContext_PackageInfoA {
  /** ptr */
  PackageInfo: Deno.PointerValue | Uint8Array;
}

export const sizeofSecPkgContext_PackageInfoA = 8;

export function allocSecPkgContext_PackageInfoA(data?: Partial<SecPkgContext_PackageInfoA>): Uint8Array {
  const buf = new Uint8Array(sizeofSecPkgContext_PackageInfoA);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.PackageInfo !== undefined) view.setBigUint64(0, data.PackageInfo === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.PackageInfo))), true);
  return buf;
}

export class SecPkgContext_PackageInfoAView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get PackageInfo(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(0, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: pointer
  set PackageInfo(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(0, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.Security.Authentication.Identity.SecPkgContext_UserFlags (size: 8)
 */
export interface SecPkgContext_UserFlags {
  /** u32 */
  UserFlags: number;
}

export const sizeofSecPkgContext_UserFlags = 8;

export function allocSecPkgContext_UserFlags(data?: Partial<SecPkgContext_UserFlags>): Uint8Array {
  const buf = new Uint8Array(sizeofSecPkgContext_UserFlags);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.UserFlags !== undefined) view.setUint32(0, Number(data.UserFlags), true);
  // 0x04: pad4
  return buf;
}

export class SecPkgContext_UserFlagsView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get UserFlags(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: pad4

  // 0x00: u32
  set UserFlags(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: pad4
}

/**
 * Windows.Win32.Security.Authentication.Identity.SecPkgContext_Flags (size: 8)
 */
export interface SecPkgContext_Flags {
  /** u32 */
  Flags: number;
}

export const sizeofSecPkgContext_Flags = 8;

export function allocSecPkgContext_Flags(data?: Partial<SecPkgContext_Flags>): Uint8Array {
  const buf = new Uint8Array(sizeofSecPkgContext_Flags);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.Flags !== undefined) view.setUint32(0, Number(data.Flags), true);
  // 0x04: pad4
  return buf;
}

export class SecPkgContext_FlagsView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get Flags(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: pad4

  // 0x00: u32
  set Flags(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: pad4
}

/**
 * Windows.Win32.Security.Authentication.Identity.SecPkgContext_NegotiationInfoA (size: 16)
 */
export interface SecPkgContext_NegotiationInfoA {
  /** ptr */
  PackageInfo: Deno.PointerValue | Uint8Array;
  /** u32 */
  NegotiationState: number;
}

export const sizeofSecPkgContext_NegotiationInfoA = 16;

export function allocSecPkgContext_NegotiationInfoA(data?: Partial<SecPkgContext_NegotiationInfoA>): Uint8Array {
  const buf = new Uint8Array(sizeofSecPkgContext_NegotiationInfoA);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.PackageInfo !== undefined) view.setBigUint64(0, data.PackageInfo === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.PackageInfo))), true);
  // 0x08: u32
  if (data?.NegotiationState !== undefined) view.setUint32(8, Number(data.NegotiationState), true);
  // 0x0c: pad4
  return buf;
}

export class SecPkgContext_NegotiationInfoAView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get PackageInfo(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(0, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x08: u32
  get NegotiationState(): number {
    return this.view.getUint32(8, true);
  }

  // 0x0c: pad4

  // 0x00: pointer
  set PackageInfo(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(0, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x08: u32
  set NegotiationState(value: number) {
    this.view.setUint32(8, value, true);
  }

  // 0x0c: pad4
}

/**
 * Windows.Win32.Security.Authentication.Identity.SecPkgContext_NegotiationInfoW (size: 16)
 */
export interface SecPkgContext_NegotiationInfoW {
  /** ptr */
  PackageInfo: Deno.PointerValue | Uint8Array;
  /** u32 */
  NegotiationState: number;
}

export const sizeofSecPkgContext_NegotiationInfoW = 16;

export function allocSecPkgContext_NegotiationInfoW(data?: Partial<SecPkgContext_NegotiationInfoW>): Uint8Array {
  const buf = new Uint8Array(sizeofSecPkgContext_NegotiationInfoW);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.PackageInfo !== undefined) view.setBigUint64(0, data.PackageInfo === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.PackageInfo))), true);
  // 0x08: u32
  if (data?.NegotiationState !== undefined) view.setUint32(8, Number(data.NegotiationState), true);
  // 0x0c: pad4
  return buf;
}

export class SecPkgContext_NegotiationInfoWView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get PackageInfo(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(0, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x08: u32
  get NegotiationState(): number {
    return this.view.getUint32(8, true);
  }

  // 0x0c: pad4

  // 0x00: pointer
  set PackageInfo(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(0, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x08: u32
  set NegotiationState(value: number) {
    this.view.setUint32(8, value, true);
  }

  // 0x0c: pad4
}

/**
 * Windows.Win32.Security.Authentication.Identity.SecPkgContext_NativeNamesW (size: 16)
 */
export interface SecPkgContext_NativeNamesW {
  /** ptr */
  sClientName: Deno.PointerValue | Uint8Array;
  /** ptr */
  sServerName: Deno.PointerValue | Uint8Array;
}

export const sizeofSecPkgContext_NativeNamesW = 16;

export function allocSecPkgContext_NativeNamesW(data?: Partial<SecPkgContext_NativeNamesW>): Uint8Array {
  const buf = new Uint8Array(sizeofSecPkgContext_NativeNamesW);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.sClientName !== undefined) view.setBigUint64(0, data.sClientName === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.sClientName))), true);
  // 0x08: pointer
  if (data?.sServerName !== undefined) view.setBigUint64(8, data.sServerName === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.sServerName))), true);
  return buf;
}

export class SecPkgContext_NativeNamesWView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get sClientName(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(0, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x08: pointer
  get sServerName(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: pointer
  set sClientName(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(0, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x08: pointer
  set sServerName(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.Security.Authentication.Identity.SecPkgContext_NativeNamesA (size: 16)
 */
export interface SecPkgContext_NativeNamesA {
  /** ptr */
  sClientName: Deno.PointerValue | Uint8Array;
  /** ptr */
  sServerName: Deno.PointerValue | Uint8Array;
}

export const sizeofSecPkgContext_NativeNamesA = 16;

export function allocSecPkgContext_NativeNamesA(data?: Partial<SecPkgContext_NativeNamesA>): Uint8Array {
  const buf = new Uint8Array(sizeofSecPkgContext_NativeNamesA);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.sClientName !== undefined) view.setBigUint64(0, data.sClientName === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.sClientName))), true);
  // 0x08: pointer
  if (data?.sServerName !== undefined) view.setBigUint64(8, data.sServerName === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.sServerName))), true);
  return buf;
}

export class SecPkgContext_NativeNamesAView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get sClientName(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(0, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x08: pointer
  get sServerName(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: pointer
  set sClientName(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(0, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x08: pointer
  set sServerName(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.Security.Authentication.Identity.SecPkgContext_CredentialNameW (size: 16)
 */
export interface SecPkgContext_CredentialNameW {
  /** u32 */
  CredentialType: number;
  /** ptr */
  sCredentialName: Deno.PointerValue | Uint8Array;
}

export const sizeofSecPkgContext_CredentialNameW = 16;

export function allocSecPkgContext_CredentialNameW(data?: Partial<SecPkgContext_CredentialNameW>): Uint8Array {
  const buf = new Uint8Array(sizeofSecPkgContext_CredentialNameW);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.CredentialType !== undefined) view.setUint32(0, Number(data.CredentialType), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.sCredentialName !== undefined) view.setBigUint64(8, data.sCredentialName === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.sCredentialName))), true);
  return buf;
}

export class SecPkgContext_CredentialNameWView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get CredentialType(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  get sCredentialName(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: u32
  set CredentialType(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  set sCredentialName(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.Security.Authentication.Identity.SecPkgContext_CredentialNameA (size: 16)
 */
export interface SecPkgContext_CredentialNameA {
  /** u32 */
  CredentialType: number;
  /** ptr */
  sCredentialName: Deno.PointerValue | Uint8Array;
}

export const sizeofSecPkgContext_CredentialNameA = 16;

export function allocSecPkgContext_CredentialNameA(data?: Partial<SecPkgContext_CredentialNameA>): Uint8Array {
  const buf = new Uint8Array(sizeofSecPkgContext_CredentialNameA);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.CredentialType !== undefined) view.setUint32(0, Number(data.CredentialType), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.sCredentialName !== undefined) view.setBigUint64(8, data.sCredentialName === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.sCredentialName))), true);
  return buf;
}

export class SecPkgContext_CredentialNameAView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get CredentialType(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  get sCredentialName(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: u32
  set CredentialType(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  set sCredentialName(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.Security.Authentication.Identity.SecPkgContext_AccessToken (size: 8)
 */
export interface SecPkgContext_AccessToken {
  /** ptr */
  AccessToken: Deno.PointerValue | Uint8Array;
}

export const sizeofSecPkgContext_AccessToken = 8;

export function allocSecPkgContext_AccessToken(data?: Partial<SecPkgContext_AccessToken>): Uint8Array {
  const buf = new Uint8Array(sizeofSecPkgContext_AccessToken);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.AccessToken !== undefined) view.setBigUint64(0, data.AccessToken === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.AccessToken))), true);
  return buf;
}

export class SecPkgContext_AccessTokenView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get AccessToken(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(0, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: pointer
  set AccessToken(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(0, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.Security.Authentication.Identity.SecPkgContext_TargetInformation (size: 16)
 */
export interface SecPkgContext_TargetInformation {
  /** u32 */
  MarshalledTargetInfoLength: number;
  /** ptr */
  MarshalledTargetInfo: Deno.PointerValue | Uint8Array;
}

export const sizeofSecPkgContext_TargetInformation = 16;

export function allocSecPkgContext_TargetInformation(data?: Partial<SecPkgContext_TargetInformation>): Uint8Array {
  const buf = new Uint8Array(sizeofSecPkgContext_TargetInformation);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.MarshalledTargetInfoLength !== undefined) view.setUint32(0, Number(data.MarshalledTargetInfoLength), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.MarshalledTargetInfo !== undefined) view.setBigUint64(8, data.MarshalledTargetInfo === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.MarshalledTargetInfo))), true);
  return buf;
}

export class SecPkgContext_TargetInformationView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get MarshalledTargetInfoLength(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  get MarshalledTargetInfo(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: u32
  set MarshalledTargetInfoLength(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  set MarshalledTargetInfo(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.Security.Authentication.Identity.SecPkgContext_AuthzID (size: 16)
 */
export interface SecPkgContext_AuthzID {
  /** u32 */
  AuthzIDLength: number;
  /** Windows.Win32.Foundation.PSTR */
  AuthzID: string | null | Uint8Array;
}

export const sizeofSecPkgContext_AuthzID = 16;

export function allocSecPkgContext_AuthzID(data?: Partial<SecPkgContext_AuthzID>): Uint8Array {
  const buf = new Uint8Array(sizeofSecPkgContext_AuthzID);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.AuthzIDLength !== undefined) view.setUint32(0, Number(data.AuthzIDLength), true);
  // 0x04: pad4
  // 0x08: buffer
  if (data?.AuthzID !== undefined) {
    (buf as any)._f8 = util.pstrToFfi(data.AuthzID);
    view.setBigUint64(8, (buf as any)._f8 === null ? 0n : BigInt(Deno.UnsafePointer.value(Deno.UnsafePointer.of((buf as any)._f8))), true);
  }
  return buf;
}

export class SecPkgContext_AuthzIDView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get AuthzIDLength(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: pad4

  // 0x08: buffer
  get AuthzID(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: u32
  set AuthzIDLength(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: pad4

  // 0x08: buffer
  set AuthzID(value: Uint8Array | Deno.PointerValue) {
    (this.buf as any)._f8 = value;
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer((this.buf as any)._f8))), true);
  }
}

/**
 * Windows.Win32.Security.Authentication.Identity.SecPkgContext_Target (size: 16)
 */
export interface SecPkgContext_Target {
  /** u32 */
  TargetLength: number;
  /** Windows.Win32.Foundation.PSTR */
  Target: string | null | Uint8Array;
}

export const sizeofSecPkgContext_Target = 16;

export function allocSecPkgContext_Target(data?: Partial<SecPkgContext_Target>): Uint8Array {
  const buf = new Uint8Array(sizeofSecPkgContext_Target);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.TargetLength !== undefined) view.setUint32(0, Number(data.TargetLength), true);
  // 0x04: pad4
  // 0x08: buffer
  if (data?.Target !== undefined) {
    (buf as any)._f8 = util.pstrToFfi(data.Target);
    view.setBigUint64(8, (buf as any)._f8 === null ? 0n : BigInt(Deno.UnsafePointer.value(Deno.UnsafePointer.of((buf as any)._f8))), true);
  }
  return buf;
}

export class SecPkgContext_TargetView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get TargetLength(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: pad4

  // 0x08: buffer
  get Target(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: u32
  set TargetLength(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: pad4

  // 0x08: buffer
  set Target(value: Uint8Array | Deno.PointerValue) {
    (this.buf as any)._f8 = value;
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer((this.buf as any)._f8))), true);
  }
}

/**
 * Windows.Win32.Security.Authentication.Identity.SecPkgContext_ClientSpecifiedTarget (size: 8)
 */
export interface SecPkgContext_ClientSpecifiedTarget {
  /** ptr */
  sTargetName: Deno.PointerValue | Uint8Array;
}

export const sizeofSecPkgContext_ClientSpecifiedTarget = 8;

export function allocSecPkgContext_ClientSpecifiedTarget(data?: Partial<SecPkgContext_ClientSpecifiedTarget>): Uint8Array {
  const buf = new Uint8Array(sizeofSecPkgContext_ClientSpecifiedTarget);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.sTargetName !== undefined) view.setBigUint64(0, data.sTargetName === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.sTargetName))), true);
  return buf;
}

export class SecPkgContext_ClientSpecifiedTargetView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get sTargetName(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(0, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: pointer
  set sTargetName(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(0, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.Security.Authentication.Identity.SecPkgContext_Bindings (size: 16)
 */
export interface SecPkgContext_Bindings {
  /** u32 */
  BindingsLength: number;
  /** ptr */
  Bindings: Deno.PointerValue | Uint8Array;
}

export const sizeofSecPkgContext_Bindings = 16;

export function allocSecPkgContext_Bindings(data?: Partial<SecPkgContext_Bindings>): Uint8Array {
  const buf = new Uint8Array(sizeofSecPkgContext_Bindings);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.BindingsLength !== undefined) view.setUint32(0, Number(data.BindingsLength), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.Bindings !== undefined) view.setBigUint64(8, data.Bindings === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.Bindings))), true);
  return buf;
}

export class SecPkgContext_BindingsView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get BindingsLength(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  get Bindings(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: u32
  set BindingsLength(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  set Bindings(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.Security.Authentication.Identity.SecPkgContext_ApplicationProtocol (size: 24)
 */
export interface SecPkgContext_ApplicationProtocol {
  /** Windows.Win32.Security.Authentication.Identity.SEC_APPLICATION_PROTOCOL_NEGOTIATION_STATUS */
  ProtoNegoStatus: SEC_APPLICATION_PROTOCOL_NEGOTIATION_STATUS;
  /** Windows.Win32.Security.Authentication.Identity.SEC_APPLICATION_PROTOCOL_NEGOTIATION_EXT */
  ProtoNegoExt: SEC_APPLICATION_PROTOCOL_NEGOTIATION_EXT;
  /** u8 */
  ProtocolIdSize: number;
  /** array */
  ProtocolId: Deno.PointerValue;
}

export const sizeofSecPkgContext_ApplicationProtocol = 24;

export function allocSecPkgContext_ApplicationProtocol(data?: Partial<SecPkgContext_ApplicationProtocol>): Uint8Array {
  const buf = new Uint8Array(sizeofSecPkgContext_ApplicationProtocol);
  const view = new DataView(buf.buffer);
  // 0x00: i32
  if (data?.ProtoNegoStatus !== undefined) view.setInt32(0, Number(data.ProtoNegoStatus), true);
  // 0x04: i32
  if (data?.ProtoNegoExt !== undefined) view.setInt32(4, Number(data.ProtoNegoExt), true);
  // 0x08: u8
  if (data?.ProtocolIdSize !== undefined) view.setUint8(8, Number(data.ProtocolIdSize));
  // 0x09: pad7
  // 0x10: pointer
  if (data?.ProtocolId !== undefined) view.setBigUint64(16, data.ProtocolId === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.ProtocolId))), true);
  return buf;
}

export class SecPkgContext_ApplicationProtocolView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: i32
  get ProtoNegoStatus(): number {
    return this.view.getInt32(0, true);
  }

  // 0x04: i32
  get ProtoNegoExt(): number {
    return this.view.getInt32(4, true);
  }

  // 0x08: u8
  get ProtocolIdSize(): number {
    return this.view.getUint8(8);
  }

  // 0x09: pad7

  // 0x10: pointer
  get ProtocolId(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(16, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: i32
  set ProtoNegoStatus(value: number) {
    this.view.setInt32(0, value, true);
  }

  // 0x04: i32
  set ProtoNegoExt(value: number) {
    this.view.setInt32(4, value, true);
  }

  // 0x08: u8
  set ProtocolIdSize(value: number) {
    this.view.setUint8(8, value);
  }

  // 0x09: pad7

  // 0x10: pointer
  set ProtocolId(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(16, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.Security.Authentication.Identity.SecPkgContext_NegotiatedTlsExtensions (size: 16)
 */
export interface SecPkgContext_NegotiatedTlsExtensions {
  /** u32 */
  ExtensionsCount: number;
  /** ptr */
  Extensions: Deno.PointerValue | Uint8Array;
}

export const sizeofSecPkgContext_NegotiatedTlsExtensions = 16;

export function allocSecPkgContext_NegotiatedTlsExtensions(data?: Partial<SecPkgContext_NegotiatedTlsExtensions>): Uint8Array {
  const buf = new Uint8Array(sizeofSecPkgContext_NegotiatedTlsExtensions);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.ExtensionsCount !== undefined) view.setUint32(0, Number(data.ExtensionsCount), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.Extensions !== undefined) view.setBigUint64(8, data.Extensions === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.Extensions))), true);
  return buf;
}

export class SecPkgContext_NegotiatedTlsExtensionsView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get ExtensionsCount(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  get Extensions(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: u32
  set ExtensionsCount(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  set Extensions(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.Security.Authentication.Identity.SECPKG_APP_MODE_INFO (size: 40)
 */
export interface SECPKG_APP_MODE_INFO {
  /** u32 */
  UserFunction: number;
  /** usize */
  Argument1: Deno.PointerValue;
  /** usize */
  Argument2: Deno.PointerValue;
  /** Windows.Win32.Security.Authentication.Identity.SecBuffer */
  UserData: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.Foundation.BOOLEAN */
  ReturnToLsa: Uint8Array | Deno.PointerValue;
}

export const sizeofSECPKG_APP_MODE_INFO = 40;

export function allocSECPKG_APP_MODE_INFO(data?: Partial<SECPKG_APP_MODE_INFO>): Uint8Array {
  const buf = new Uint8Array(sizeofSECPKG_APP_MODE_INFO);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.UserFunction !== undefined) view.setUint32(0, Number(data.UserFunction), true);
  // 0x04: pad4
  // 0x08: usize
  if (data?.Argument1 !== undefined) view.setBigUint64(8, BigInt(data.Argument1), true);
  // 0x10: usize
  if (data?.Argument2 !== undefined) view.setBigUint64(16, BigInt(data.Argument2), true);
  // 0x18: pointer
  if (data?.UserData !== undefined) view.setBigUint64(24, data.UserData === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.UserData))), true);
  // 0x20: pointer
  if (data?.ReturnToLsa !== undefined) view.setBigUint64(32, data.ReturnToLsa === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.ReturnToLsa))), true);
  return buf;
}

export class SECPKG_APP_MODE_INFOView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get UserFunction(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: pad4

  // 0x08: usize
  get Argument1(): Deno.PointerValue {
    return Number(this.view.getBigUint64(8, true));
  }

  // 0x10: usize
  get Argument2(): Deno.PointerValue {
    return Number(this.view.getBigUint64(16, true));
  }

  // 0x18: pointer
  get UserData(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(24, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x20: pointer
  get ReturnToLsa(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(32, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: u32
  set UserFunction(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: pad4

  // 0x08: usize
  set Argument1(value: Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(value), true);
  }

  // 0x10: usize
  set Argument2(value: Deno.PointerValue) {
    this.view.setBigUint64(16, BigInt(value), true);
  }

  // 0x18: pointer
  set UserData(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(24, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x20: pointer
  set ReturnToLsa(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(32, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.Security.Authentication.Identity.SecurityFunctionTableW (size: 256)
 */
export interface SecurityFunctionTableW {
  /** u32 */
  dwVersion: number;
  /** Windows.Win32.Security.Authentication.Identity.ENUMERATE_SECURITY_PACKAGES_FN_W */
  EnumerateSecurityPackagesW: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.Security.Authentication.Identity.QUERY_CREDENTIALS_ATTRIBUTES_FN_W */
  QueryCredentialsAttributesW: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.Security.Authentication.Identity.ACQUIRE_CREDENTIALS_HANDLE_FN_W */
  AcquireCredentialsHandleW: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.Security.Authentication.Identity.FREE_CREDENTIALS_HANDLE_FN */
  FreeCredentialsHandle: Uint8Array | Deno.PointerValue;
  /** ptr */
  Reserved2: Deno.PointerValue | Uint8Array;
  /** Windows.Win32.Security.Authentication.Identity.INITIALIZE_SECURITY_CONTEXT_FN_W */
  InitializeSecurityContextW: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.Security.Authentication.Identity.ACCEPT_SECURITY_CONTEXT_FN */
  AcceptSecurityContext: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.Security.Authentication.Identity.COMPLETE_AUTH_TOKEN_FN */
  CompleteAuthToken: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.Security.Authentication.Identity.DELETE_SECURITY_CONTEXT_FN */
  DeleteSecurityContext: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.Security.Authentication.Identity.APPLY_CONTROL_TOKEN_FN */
  ApplyControlToken: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.Security.Authentication.Identity.QUERY_CONTEXT_ATTRIBUTES_FN_W */
  QueryContextAttributesW: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.Security.Authentication.Identity.IMPERSONATE_SECURITY_CONTEXT_FN */
  ImpersonateSecurityContext: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.Security.Authentication.Identity.REVERT_SECURITY_CONTEXT_FN */
  RevertSecurityContext: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.Security.Authentication.Identity.MAKE_SIGNATURE_FN */
  MakeSignature: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.Security.Authentication.Identity.VERIFY_SIGNATURE_FN */
  VerifySignature: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.Security.Authentication.Identity.FREE_CONTEXT_BUFFER_FN */
  FreeContextBuffer: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.Security.Authentication.Identity.QUERY_SECURITY_PACKAGE_INFO_FN_W */
  QuerySecurityPackageInfoW: Uint8Array | Deno.PointerValue;
  /** ptr */
  Reserved3: Deno.PointerValue | Uint8Array;
  /** ptr */
  Reserved4: Deno.PointerValue | Uint8Array;
  /** Windows.Win32.Security.Authentication.Identity.EXPORT_SECURITY_CONTEXT_FN */
  ExportSecurityContext: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.Security.Authentication.Identity.IMPORT_SECURITY_CONTEXT_FN_W */
  ImportSecurityContextW: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.Security.Authentication.Identity.ADD_CREDENTIALS_FN_W */
  AddCredentialsW: Uint8Array | Deno.PointerValue;
  /** ptr */
  Reserved8: Deno.PointerValue | Uint8Array;
  /** Windows.Win32.Security.Authentication.Identity.QUERY_SECURITY_CONTEXT_TOKEN_FN */
  QuerySecurityContextToken: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.Security.Authentication.Identity.ENCRYPT_MESSAGE_FN */
  EncryptMessage: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.Security.Authentication.Identity.DECRYPT_MESSAGE_FN */
  DecryptMessage: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.Security.Authentication.Identity.SET_CONTEXT_ATTRIBUTES_FN_W */
  SetContextAttributesW: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.Security.Authentication.Identity.SET_CREDENTIALS_ATTRIBUTES_FN_W */
  SetCredentialsAttributesW: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.Security.Authentication.Identity.CHANGE_PASSWORD_FN_W */
  ChangeAccountPasswordW: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.Security.Authentication.Identity.QUERY_CONTEXT_ATTRIBUTES_EX_FN_W */
  QueryContextAttributesExW: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.Security.Authentication.Identity.QUERY_CREDENTIALS_ATTRIBUTES_EX_FN_W */
  QueryCredentialsAttributesExW: Uint8Array | Deno.PointerValue;
}

export const sizeofSecurityFunctionTableW = 256;

export function allocSecurityFunctionTableW(data?: Partial<SecurityFunctionTableW>): Uint8Array {
  const buf = new Uint8Array(sizeofSecurityFunctionTableW);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.dwVersion !== undefined) view.setUint32(0, Number(data.dwVersion), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.EnumerateSecurityPackagesW !== undefined) view.setBigUint64(8, data.EnumerateSecurityPackagesW === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.EnumerateSecurityPackagesW))), true);
  // 0x10: pointer
  if (data?.QueryCredentialsAttributesW !== undefined) view.setBigUint64(16, data.QueryCredentialsAttributesW === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.QueryCredentialsAttributesW))), true);
  // 0x18: pointer
  if (data?.AcquireCredentialsHandleW !== undefined) view.setBigUint64(24, data.AcquireCredentialsHandleW === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.AcquireCredentialsHandleW))), true);
  // 0x20: pointer
  if (data?.FreeCredentialsHandle !== undefined) view.setBigUint64(32, data.FreeCredentialsHandle === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.FreeCredentialsHandle))), true);
  // 0x28: pointer
  if (data?.Reserved2 !== undefined) view.setBigUint64(40, data.Reserved2 === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.Reserved2))), true);
  // 0x30: pointer
  if (data?.InitializeSecurityContextW !== undefined) view.setBigUint64(48, data.InitializeSecurityContextW === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.InitializeSecurityContextW))), true);
  // 0x38: pointer
  if (data?.AcceptSecurityContext !== undefined) view.setBigUint64(56, data.AcceptSecurityContext === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.AcceptSecurityContext))), true);
  // 0x40: pointer
  if (data?.CompleteAuthToken !== undefined) view.setBigUint64(64, data.CompleteAuthToken === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.CompleteAuthToken))), true);
  // 0x48: pointer
  if (data?.DeleteSecurityContext !== undefined) view.setBigUint64(72, data.DeleteSecurityContext === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.DeleteSecurityContext))), true);
  // 0x50: pointer
  if (data?.ApplyControlToken !== undefined) view.setBigUint64(80, data.ApplyControlToken === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.ApplyControlToken))), true);
  // 0x58: pointer
  if (data?.QueryContextAttributesW !== undefined) view.setBigUint64(88, data.QueryContextAttributesW === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.QueryContextAttributesW))), true);
  // 0x60: pointer
  if (data?.ImpersonateSecurityContext !== undefined) view.setBigUint64(96, data.ImpersonateSecurityContext === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.ImpersonateSecurityContext))), true);
  // 0x68: pointer
  if (data?.RevertSecurityContext !== undefined) view.setBigUint64(104, data.RevertSecurityContext === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.RevertSecurityContext))), true);
  // 0x70: pointer
  if (data?.MakeSignature !== undefined) view.setBigUint64(112, data.MakeSignature === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.MakeSignature))), true);
  // 0x78: pointer
  if (data?.VerifySignature !== undefined) view.setBigUint64(120, data.VerifySignature === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.VerifySignature))), true);
  // 0x80: pointer
  if (data?.FreeContextBuffer !== undefined) view.setBigUint64(128, data.FreeContextBuffer === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.FreeContextBuffer))), true);
  // 0x88: pointer
  if (data?.QuerySecurityPackageInfoW !== undefined) view.setBigUint64(136, data.QuerySecurityPackageInfoW === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.QuerySecurityPackageInfoW))), true);
  // 0x90: pointer
  if (data?.Reserved3 !== undefined) view.setBigUint64(144, data.Reserved3 === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.Reserved3))), true);
  // 0x98: pointer
  if (data?.Reserved4 !== undefined) view.setBigUint64(152, data.Reserved4 === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.Reserved4))), true);
  // 0xa0: pointer
  if (data?.ExportSecurityContext !== undefined) view.setBigUint64(160, data.ExportSecurityContext === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.ExportSecurityContext))), true);
  // 0xa8: pointer
  if (data?.ImportSecurityContextW !== undefined) view.setBigUint64(168, data.ImportSecurityContextW === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.ImportSecurityContextW))), true);
  // 0xb0: pointer
  if (data?.AddCredentialsW !== undefined) view.setBigUint64(176, data.AddCredentialsW === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.AddCredentialsW))), true);
  // 0xb8: pointer
  if (data?.Reserved8 !== undefined) view.setBigUint64(184, data.Reserved8 === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.Reserved8))), true);
  // 0xc0: pointer
  if (data?.QuerySecurityContextToken !== undefined) view.setBigUint64(192, data.QuerySecurityContextToken === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.QuerySecurityContextToken))), true);
  // 0xc8: pointer
  if (data?.EncryptMessage !== undefined) view.setBigUint64(200, data.EncryptMessage === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.EncryptMessage))), true);
  // 0xd0: pointer
  if (data?.DecryptMessage !== undefined) view.setBigUint64(208, data.DecryptMessage === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.DecryptMessage))), true);
  // 0xd8: pointer
  if (data?.SetContextAttributesW !== undefined) view.setBigUint64(216, data.SetContextAttributesW === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.SetContextAttributesW))), true);
  // 0xe0: pointer
  if (data?.SetCredentialsAttributesW !== undefined) view.setBigUint64(224, data.SetCredentialsAttributesW === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.SetCredentialsAttributesW))), true);
  // 0xe8: pointer
  if (data?.ChangeAccountPasswordW !== undefined) view.setBigUint64(232, data.ChangeAccountPasswordW === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.ChangeAccountPasswordW))), true);
  // 0xf0: pointer
  if (data?.QueryContextAttributesExW !== undefined) view.setBigUint64(240, data.QueryContextAttributesExW === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.QueryContextAttributesExW))), true);
  // 0xf8: pointer
  if (data?.QueryCredentialsAttributesExW !== undefined) view.setBigUint64(248, data.QueryCredentialsAttributesExW === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.QueryCredentialsAttributesExW))), true);
  return buf;
}

export class SecurityFunctionTableWView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get dwVersion(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  get EnumerateSecurityPackagesW(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x10: pointer
  get QueryCredentialsAttributesW(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(16, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x18: pointer
  get AcquireCredentialsHandleW(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(24, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x20: pointer
  get FreeCredentialsHandle(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(32, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x28: pointer
  get Reserved2(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(40, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x30: pointer
  get InitializeSecurityContextW(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(48, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x38: pointer
  get AcceptSecurityContext(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(56, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x40: pointer
  get CompleteAuthToken(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(64, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x48: pointer
  get DeleteSecurityContext(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(72, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x50: pointer
  get ApplyControlToken(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(80, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x58: pointer
  get QueryContextAttributesW(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(88, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x60: pointer
  get ImpersonateSecurityContext(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(96, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x68: pointer
  get RevertSecurityContext(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(104, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x70: pointer
  get MakeSignature(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(112, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x78: pointer
  get VerifySignature(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(120, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x80: pointer
  get FreeContextBuffer(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(128, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x88: pointer
  get QuerySecurityPackageInfoW(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(136, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x90: pointer
  get Reserved3(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(144, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x98: pointer
  get Reserved4(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(152, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0xa0: pointer
  get ExportSecurityContext(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(160, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0xa8: pointer
  get ImportSecurityContextW(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(168, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0xb0: pointer
  get AddCredentialsW(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(176, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0xb8: pointer
  get Reserved8(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(184, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0xc0: pointer
  get QuerySecurityContextToken(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(192, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0xc8: pointer
  get EncryptMessage(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(200, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0xd0: pointer
  get DecryptMessage(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(208, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0xd8: pointer
  get SetContextAttributesW(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(216, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0xe0: pointer
  get SetCredentialsAttributesW(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(224, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0xe8: pointer
  get ChangeAccountPasswordW(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(232, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0xf0: pointer
  get QueryContextAttributesExW(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(240, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0xf8: pointer
  get QueryCredentialsAttributesExW(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(248, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: u32
  set dwVersion(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  set EnumerateSecurityPackagesW(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x10: pointer
  set QueryCredentialsAttributesW(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(16, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x18: pointer
  set AcquireCredentialsHandleW(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(24, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x20: pointer
  set FreeCredentialsHandle(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(32, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x28: pointer
  set Reserved2(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(40, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x30: pointer
  set InitializeSecurityContextW(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(48, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x38: pointer
  set AcceptSecurityContext(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(56, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x40: pointer
  set CompleteAuthToken(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(64, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x48: pointer
  set DeleteSecurityContext(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(72, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x50: pointer
  set ApplyControlToken(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(80, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x58: pointer
  set QueryContextAttributesW(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(88, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x60: pointer
  set ImpersonateSecurityContext(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(96, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x68: pointer
  set RevertSecurityContext(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(104, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x70: pointer
  set MakeSignature(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(112, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x78: pointer
  set VerifySignature(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(120, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x80: pointer
  set FreeContextBuffer(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(128, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x88: pointer
  set QuerySecurityPackageInfoW(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(136, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x90: pointer
  set Reserved3(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(144, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x98: pointer
  set Reserved4(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(152, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0xa0: pointer
  set ExportSecurityContext(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(160, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0xa8: pointer
  set ImportSecurityContextW(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(168, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0xb0: pointer
  set AddCredentialsW(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(176, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0xb8: pointer
  set Reserved8(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(184, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0xc0: pointer
  set QuerySecurityContextToken(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(192, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0xc8: pointer
  set EncryptMessage(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(200, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0xd0: pointer
  set DecryptMessage(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(208, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0xd8: pointer
  set SetContextAttributesW(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(216, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0xe0: pointer
  set SetCredentialsAttributesW(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(224, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0xe8: pointer
  set ChangeAccountPasswordW(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(232, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0xf0: pointer
  set QueryContextAttributesExW(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(240, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0xf8: pointer
  set QueryCredentialsAttributesExW(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(248, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.Security.Authentication.Identity.SecurityFunctionTableA (size: 256)
 */
export interface SecurityFunctionTableA {
  /** u32 */
  dwVersion: number;
  /** Windows.Win32.Security.Authentication.Identity.ENUMERATE_SECURITY_PACKAGES_FN_A */
  EnumerateSecurityPackagesA: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.Security.Authentication.Identity.QUERY_CREDENTIALS_ATTRIBUTES_FN_A */
  QueryCredentialsAttributesA: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.Security.Authentication.Identity.ACQUIRE_CREDENTIALS_HANDLE_FN_A */
  AcquireCredentialsHandleA: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.Security.Authentication.Identity.FREE_CREDENTIALS_HANDLE_FN */
  FreeCredentialsHandle: Uint8Array | Deno.PointerValue;
  /** ptr */
  Reserved2: Deno.PointerValue | Uint8Array;
  /** Windows.Win32.Security.Authentication.Identity.INITIALIZE_SECURITY_CONTEXT_FN_A */
  InitializeSecurityContextA: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.Security.Authentication.Identity.ACCEPT_SECURITY_CONTEXT_FN */
  AcceptSecurityContext: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.Security.Authentication.Identity.COMPLETE_AUTH_TOKEN_FN */
  CompleteAuthToken: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.Security.Authentication.Identity.DELETE_SECURITY_CONTEXT_FN */
  DeleteSecurityContext: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.Security.Authentication.Identity.APPLY_CONTROL_TOKEN_FN */
  ApplyControlToken: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.Security.Authentication.Identity.QUERY_CONTEXT_ATTRIBUTES_FN_A */
  QueryContextAttributesA: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.Security.Authentication.Identity.IMPERSONATE_SECURITY_CONTEXT_FN */
  ImpersonateSecurityContext: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.Security.Authentication.Identity.REVERT_SECURITY_CONTEXT_FN */
  RevertSecurityContext: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.Security.Authentication.Identity.MAKE_SIGNATURE_FN */
  MakeSignature: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.Security.Authentication.Identity.VERIFY_SIGNATURE_FN */
  VerifySignature: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.Security.Authentication.Identity.FREE_CONTEXT_BUFFER_FN */
  FreeContextBuffer: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.Security.Authentication.Identity.QUERY_SECURITY_PACKAGE_INFO_FN_A */
  QuerySecurityPackageInfoA: Uint8Array | Deno.PointerValue;
  /** ptr */
  Reserved3: Deno.PointerValue | Uint8Array;
  /** ptr */
  Reserved4: Deno.PointerValue | Uint8Array;
  /** Windows.Win32.Security.Authentication.Identity.EXPORT_SECURITY_CONTEXT_FN */
  ExportSecurityContext: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.Security.Authentication.Identity.IMPORT_SECURITY_CONTEXT_FN_A */
  ImportSecurityContextA: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.Security.Authentication.Identity.ADD_CREDENTIALS_FN_A */
  AddCredentialsA: Uint8Array | Deno.PointerValue;
  /** ptr */
  Reserved8: Deno.PointerValue | Uint8Array;
  /** Windows.Win32.Security.Authentication.Identity.QUERY_SECURITY_CONTEXT_TOKEN_FN */
  QuerySecurityContextToken: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.Security.Authentication.Identity.ENCRYPT_MESSAGE_FN */
  EncryptMessage: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.Security.Authentication.Identity.DECRYPT_MESSAGE_FN */
  DecryptMessage: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.Security.Authentication.Identity.SET_CONTEXT_ATTRIBUTES_FN_A */
  SetContextAttributesA: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.Security.Authentication.Identity.SET_CREDENTIALS_ATTRIBUTES_FN_A */
  SetCredentialsAttributesA: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.Security.Authentication.Identity.CHANGE_PASSWORD_FN_A */
  ChangeAccountPasswordA: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.Security.Authentication.Identity.QUERY_CONTEXT_ATTRIBUTES_EX_FN_A */
  QueryContextAttributesExA: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.Security.Authentication.Identity.QUERY_CREDENTIALS_ATTRIBUTES_EX_FN_A */
  QueryCredentialsAttributesExA: Uint8Array | Deno.PointerValue;
}

export const sizeofSecurityFunctionTableA = 256;

export function allocSecurityFunctionTableA(data?: Partial<SecurityFunctionTableA>): Uint8Array {
  const buf = new Uint8Array(sizeofSecurityFunctionTableA);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.dwVersion !== undefined) view.setUint32(0, Number(data.dwVersion), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.EnumerateSecurityPackagesA !== undefined) view.setBigUint64(8, data.EnumerateSecurityPackagesA === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.EnumerateSecurityPackagesA))), true);
  // 0x10: pointer
  if (data?.QueryCredentialsAttributesA !== undefined) view.setBigUint64(16, data.QueryCredentialsAttributesA === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.QueryCredentialsAttributesA))), true);
  // 0x18: pointer
  if (data?.AcquireCredentialsHandleA !== undefined) view.setBigUint64(24, data.AcquireCredentialsHandleA === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.AcquireCredentialsHandleA))), true);
  // 0x20: pointer
  if (data?.FreeCredentialsHandle !== undefined) view.setBigUint64(32, data.FreeCredentialsHandle === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.FreeCredentialsHandle))), true);
  // 0x28: pointer
  if (data?.Reserved2 !== undefined) view.setBigUint64(40, data.Reserved2 === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.Reserved2))), true);
  // 0x30: pointer
  if (data?.InitializeSecurityContextA !== undefined) view.setBigUint64(48, data.InitializeSecurityContextA === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.InitializeSecurityContextA))), true);
  // 0x38: pointer
  if (data?.AcceptSecurityContext !== undefined) view.setBigUint64(56, data.AcceptSecurityContext === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.AcceptSecurityContext))), true);
  // 0x40: pointer
  if (data?.CompleteAuthToken !== undefined) view.setBigUint64(64, data.CompleteAuthToken === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.CompleteAuthToken))), true);
  // 0x48: pointer
  if (data?.DeleteSecurityContext !== undefined) view.setBigUint64(72, data.DeleteSecurityContext === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.DeleteSecurityContext))), true);
  // 0x50: pointer
  if (data?.ApplyControlToken !== undefined) view.setBigUint64(80, data.ApplyControlToken === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.ApplyControlToken))), true);
  // 0x58: pointer
  if (data?.QueryContextAttributesA !== undefined) view.setBigUint64(88, data.QueryContextAttributesA === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.QueryContextAttributesA))), true);
  // 0x60: pointer
  if (data?.ImpersonateSecurityContext !== undefined) view.setBigUint64(96, data.ImpersonateSecurityContext === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.ImpersonateSecurityContext))), true);
  // 0x68: pointer
  if (data?.RevertSecurityContext !== undefined) view.setBigUint64(104, data.RevertSecurityContext === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.RevertSecurityContext))), true);
  // 0x70: pointer
  if (data?.MakeSignature !== undefined) view.setBigUint64(112, data.MakeSignature === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.MakeSignature))), true);
  // 0x78: pointer
  if (data?.VerifySignature !== undefined) view.setBigUint64(120, data.VerifySignature === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.VerifySignature))), true);
  // 0x80: pointer
  if (data?.FreeContextBuffer !== undefined) view.setBigUint64(128, data.FreeContextBuffer === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.FreeContextBuffer))), true);
  // 0x88: pointer
  if (data?.QuerySecurityPackageInfoA !== undefined) view.setBigUint64(136, data.QuerySecurityPackageInfoA === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.QuerySecurityPackageInfoA))), true);
  // 0x90: pointer
  if (data?.Reserved3 !== undefined) view.setBigUint64(144, data.Reserved3 === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.Reserved3))), true);
  // 0x98: pointer
  if (data?.Reserved4 !== undefined) view.setBigUint64(152, data.Reserved4 === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.Reserved4))), true);
  // 0xa0: pointer
  if (data?.ExportSecurityContext !== undefined) view.setBigUint64(160, data.ExportSecurityContext === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.ExportSecurityContext))), true);
  // 0xa8: pointer
  if (data?.ImportSecurityContextA !== undefined) view.setBigUint64(168, data.ImportSecurityContextA === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.ImportSecurityContextA))), true);
  // 0xb0: pointer
  if (data?.AddCredentialsA !== undefined) view.setBigUint64(176, data.AddCredentialsA === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.AddCredentialsA))), true);
  // 0xb8: pointer
  if (data?.Reserved8 !== undefined) view.setBigUint64(184, data.Reserved8 === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.Reserved8))), true);
  // 0xc0: pointer
  if (data?.QuerySecurityContextToken !== undefined) view.setBigUint64(192, data.QuerySecurityContextToken === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.QuerySecurityContextToken))), true);
  // 0xc8: pointer
  if (data?.EncryptMessage !== undefined) view.setBigUint64(200, data.EncryptMessage === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.EncryptMessage))), true);
  // 0xd0: pointer
  if (data?.DecryptMessage !== undefined) view.setBigUint64(208, data.DecryptMessage === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.DecryptMessage))), true);
  // 0xd8: pointer
  if (data?.SetContextAttributesA !== undefined) view.setBigUint64(216, data.SetContextAttributesA === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.SetContextAttributesA))), true);
  // 0xe0: pointer
  if (data?.SetCredentialsAttributesA !== undefined) view.setBigUint64(224, data.SetCredentialsAttributesA === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.SetCredentialsAttributesA))), true);
  // 0xe8: pointer
  if (data?.ChangeAccountPasswordA !== undefined) view.setBigUint64(232, data.ChangeAccountPasswordA === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.ChangeAccountPasswordA))), true);
  // 0xf0: pointer
  if (data?.QueryContextAttributesExA !== undefined) view.setBigUint64(240, data.QueryContextAttributesExA === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.QueryContextAttributesExA))), true);
  // 0xf8: pointer
  if (data?.QueryCredentialsAttributesExA !== undefined) view.setBigUint64(248, data.QueryCredentialsAttributesExA === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.QueryCredentialsAttributesExA))), true);
  return buf;
}

export class SecurityFunctionTableAView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get dwVersion(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  get EnumerateSecurityPackagesA(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x10: pointer
  get QueryCredentialsAttributesA(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(16, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x18: pointer
  get AcquireCredentialsHandleA(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(24, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x20: pointer
  get FreeCredentialsHandle(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(32, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x28: pointer
  get Reserved2(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(40, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x30: pointer
  get InitializeSecurityContextA(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(48, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x38: pointer
  get AcceptSecurityContext(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(56, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x40: pointer
  get CompleteAuthToken(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(64, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x48: pointer
  get DeleteSecurityContext(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(72, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x50: pointer
  get ApplyControlToken(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(80, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x58: pointer
  get QueryContextAttributesA(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(88, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x60: pointer
  get ImpersonateSecurityContext(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(96, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x68: pointer
  get RevertSecurityContext(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(104, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x70: pointer
  get MakeSignature(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(112, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x78: pointer
  get VerifySignature(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(120, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x80: pointer
  get FreeContextBuffer(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(128, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x88: pointer
  get QuerySecurityPackageInfoA(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(136, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x90: pointer
  get Reserved3(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(144, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x98: pointer
  get Reserved4(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(152, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0xa0: pointer
  get ExportSecurityContext(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(160, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0xa8: pointer
  get ImportSecurityContextA(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(168, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0xb0: pointer
  get AddCredentialsA(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(176, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0xb8: pointer
  get Reserved8(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(184, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0xc0: pointer
  get QuerySecurityContextToken(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(192, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0xc8: pointer
  get EncryptMessage(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(200, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0xd0: pointer
  get DecryptMessage(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(208, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0xd8: pointer
  get SetContextAttributesA(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(216, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0xe0: pointer
  get SetCredentialsAttributesA(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(224, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0xe8: pointer
  get ChangeAccountPasswordA(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(232, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0xf0: pointer
  get QueryContextAttributesExA(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(240, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0xf8: pointer
  get QueryCredentialsAttributesExA(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(248, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: u32
  set dwVersion(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  set EnumerateSecurityPackagesA(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x10: pointer
  set QueryCredentialsAttributesA(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(16, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x18: pointer
  set AcquireCredentialsHandleA(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(24, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x20: pointer
  set FreeCredentialsHandle(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(32, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x28: pointer
  set Reserved2(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(40, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x30: pointer
  set InitializeSecurityContextA(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(48, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x38: pointer
  set AcceptSecurityContext(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(56, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x40: pointer
  set CompleteAuthToken(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(64, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x48: pointer
  set DeleteSecurityContext(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(72, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x50: pointer
  set ApplyControlToken(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(80, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x58: pointer
  set QueryContextAttributesA(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(88, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x60: pointer
  set ImpersonateSecurityContext(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(96, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x68: pointer
  set RevertSecurityContext(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(104, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x70: pointer
  set MakeSignature(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(112, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x78: pointer
  set VerifySignature(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(120, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x80: pointer
  set FreeContextBuffer(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(128, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x88: pointer
  set QuerySecurityPackageInfoA(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(136, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x90: pointer
  set Reserved3(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(144, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x98: pointer
  set Reserved4(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(152, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0xa0: pointer
  set ExportSecurityContext(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(160, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0xa8: pointer
  set ImportSecurityContextA(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(168, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0xb0: pointer
  set AddCredentialsA(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(176, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0xb8: pointer
  set Reserved8(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(184, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0xc0: pointer
  set QuerySecurityContextToken(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(192, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0xc8: pointer
  set EncryptMessage(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(200, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0xd0: pointer
  set DecryptMessage(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(208, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0xd8: pointer
  set SetContextAttributesA(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(216, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0xe0: pointer
  set SetCredentialsAttributesA(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(224, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0xe8: pointer
  set ChangeAccountPasswordA(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(232, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0xf0: pointer
  set QueryContextAttributesExA(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(240, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0xf8: pointer
  set QueryCredentialsAttributesExA(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(248, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.Security.Authentication.Identity.SEC_WINNT_AUTH_IDENTITY_EX2 (size: 40)
 */
export interface SEC_WINNT_AUTH_IDENTITY_EX2 {
  /** u32 */
  Version: number;
  /** u16 */
  cbHeaderLength: number;
  /** u32 */
  cbStructureLength: number;
  /** u32 */
  UserOffset: number;
  /** u16 */
  UserLength: number;
  /** u32 */
  DomainOffset: number;
  /** u16 */
  DomainLength: number;
  /** u32 */
  PackedCredentialsOffset: number;
  /** u16 */
  PackedCredentialsLength: number;
  /** u32 */
  Flags: number;
  /** u32 */
  PackageListOffset: number;
  /** u16 */
  PackageListLength: number;
}

export const sizeofSEC_WINNT_AUTH_IDENTITY_EX2 = 40;

export function allocSEC_WINNT_AUTH_IDENTITY_EX2(data?: Partial<SEC_WINNT_AUTH_IDENTITY_EX2>): Uint8Array {
  const buf = new Uint8Array(sizeofSEC_WINNT_AUTH_IDENTITY_EX2);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.Version !== undefined) view.setUint32(0, Number(data.Version), true);
  // 0x04: u16
  if (data?.cbHeaderLength !== undefined) view.setUint16(4, Number(data.cbHeaderLength), true);
  // 0x06: u32
  if (data?.cbStructureLength !== undefined) view.setUint32(6, Number(data.cbStructureLength), true);
  // 0x0a: u32
  if (data?.UserOffset !== undefined) view.setUint32(10, Number(data.UserOffset), true);
  // 0x0e: u16
  if (data?.UserLength !== undefined) view.setUint16(14, Number(data.UserLength), true);
  // 0x10: u32
  if (data?.DomainOffset !== undefined) view.setUint32(16, Number(data.DomainOffset), true);
  // 0x14: u16
  if (data?.DomainLength !== undefined) view.setUint16(20, Number(data.DomainLength), true);
  // 0x16: u32
  if (data?.PackedCredentialsOffset !== undefined) view.setUint32(22, Number(data.PackedCredentialsOffset), true);
  // 0x1a: u16
  if (data?.PackedCredentialsLength !== undefined) view.setUint16(26, Number(data.PackedCredentialsLength), true);
  // 0x1c: u32
  if (data?.Flags !== undefined) view.setUint32(28, Number(data.Flags), true);
  // 0x20: u32
  if (data?.PackageListOffset !== undefined) view.setUint32(32, Number(data.PackageListOffset), true);
  // 0x24: u16
  if (data?.PackageListLength !== undefined) view.setUint16(36, Number(data.PackageListLength), true);
  // 0x26: pad2
  return buf;
}

export class SEC_WINNT_AUTH_IDENTITY_EX2View {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get Version(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: u16
  get cbHeaderLength(): number {
    return this.view.getUint16(4, true);
  }

  // 0x06: u32
  get cbStructureLength(): number {
    return this.view.getUint32(6, true);
  }

  // 0x0a: u32
  get UserOffset(): number {
    return this.view.getUint32(10, true);
  }

  // 0x0e: u16
  get UserLength(): number {
    return this.view.getUint16(14, true);
  }

  // 0x10: u32
  get DomainOffset(): number {
    return this.view.getUint32(16, true);
  }

  // 0x14: u16
  get DomainLength(): number {
    return this.view.getUint16(20, true);
  }

  // 0x16: u32
  get PackedCredentialsOffset(): number {
    return this.view.getUint32(22, true);
  }

  // 0x1a: u16
  get PackedCredentialsLength(): number {
    return this.view.getUint16(26, true);
  }

  // 0x1c: u32
  get Flags(): number {
    return this.view.getUint32(28, true);
  }

  // 0x20: u32
  get PackageListOffset(): number {
    return this.view.getUint32(32, true);
  }

  // 0x24: u16
  get PackageListLength(): number {
    return this.view.getUint16(36, true);
  }

  // 0x26: pad2

  // 0x00: u32
  set Version(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: u16
  set cbHeaderLength(value: number) {
    this.view.setUint16(4, value, true);
  }

  // 0x06: u32
  set cbStructureLength(value: number) {
    this.view.setUint32(6, value, true);
  }

  // 0x0a: u32
  set UserOffset(value: number) {
    this.view.setUint32(10, value, true);
  }

  // 0x0e: u16
  set UserLength(value: number) {
    this.view.setUint16(14, value, true);
  }

  // 0x10: u32
  set DomainOffset(value: number) {
    this.view.setUint32(16, value, true);
  }

  // 0x14: u16
  set DomainLength(value: number) {
    this.view.setUint16(20, value, true);
  }

  // 0x16: u32
  set PackedCredentialsOffset(value: number) {
    this.view.setUint32(22, value, true);
  }

  // 0x1a: u16
  set PackedCredentialsLength(value: number) {
    this.view.setUint16(26, value, true);
  }

  // 0x1c: u32
  set Flags(value: number) {
    this.view.setUint32(28, value, true);
  }

  // 0x20: u32
  set PackageListOffset(value: number) {
    this.view.setUint32(32, value, true);
  }

  // 0x24: u16
  set PackageListLength(value: number) {
    this.view.setUint16(36, value, true);
  }

  // 0x26: pad2
}

/**
 * Windows.Win32.Security.Authentication.Identity.SEC_WINNT_AUTH_IDENTITY_EXW (size: 72)
 */
export interface SEC_WINNT_AUTH_IDENTITY_EXW {
  /** u32 */
  Version: number;
  /** u32 */
  Length: number;
  /** ptr */
  User: Deno.PointerValue | Uint8Array;
  /** u32 */
  UserLength: number;
  /** ptr */
  Domain: Deno.PointerValue | Uint8Array;
  /** u32 */
  DomainLength: number;
  /** ptr */
  Password: Deno.PointerValue | Uint8Array;
  /** u32 */
  PasswordLength: number;
  /** u32 */
  Flags: number;
  /** ptr */
  PackageList: Deno.PointerValue | Uint8Array;
  /** u32 */
  PackageListLength: number;
}

export const sizeofSEC_WINNT_AUTH_IDENTITY_EXW = 72;

export function allocSEC_WINNT_AUTH_IDENTITY_EXW(data?: Partial<SEC_WINNT_AUTH_IDENTITY_EXW>): Uint8Array {
  const buf = new Uint8Array(sizeofSEC_WINNT_AUTH_IDENTITY_EXW);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.Version !== undefined) view.setUint32(0, Number(data.Version), true);
  // 0x04: u32
  if (data?.Length !== undefined) view.setUint32(4, Number(data.Length), true);
  // 0x08: pointer
  if (data?.User !== undefined) view.setBigUint64(8, data.User === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.User))), true);
  // 0x10: u32
  if (data?.UserLength !== undefined) view.setUint32(16, Number(data.UserLength), true);
  // 0x14: pad4
  // 0x18: pointer
  if (data?.Domain !== undefined) view.setBigUint64(24, data.Domain === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.Domain))), true);
  // 0x20: u32
  if (data?.DomainLength !== undefined) view.setUint32(32, Number(data.DomainLength), true);
  // 0x24: pad4
  // 0x28: pointer
  if (data?.Password !== undefined) view.setBigUint64(40, data.Password === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.Password))), true);
  // 0x30: u32
  if (data?.PasswordLength !== undefined) view.setUint32(48, Number(data.PasswordLength), true);
  // 0x34: u32
  if (data?.Flags !== undefined) view.setUint32(52, Number(data.Flags), true);
  // 0x38: pointer
  if (data?.PackageList !== undefined) view.setBigUint64(56, data.PackageList === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.PackageList))), true);
  // 0x40: u32
  if (data?.PackageListLength !== undefined) view.setUint32(64, Number(data.PackageListLength), true);
  // 0x44: pad4
  return buf;
}

export class SEC_WINNT_AUTH_IDENTITY_EXWView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get Version(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: u32
  get Length(): number {
    return this.view.getUint32(4, true);
  }

  // 0x08: pointer
  get User(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x10: u32
  get UserLength(): number {
    return this.view.getUint32(16, true);
  }

  // 0x14: pad4

  // 0x18: pointer
  get Domain(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(24, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x20: u32
  get DomainLength(): number {
    return this.view.getUint32(32, true);
  }

  // 0x24: pad4

  // 0x28: pointer
  get Password(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(40, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x30: u32
  get PasswordLength(): number {
    return this.view.getUint32(48, true);
  }

  // 0x34: u32
  get Flags(): number {
    return this.view.getUint32(52, true);
  }

  // 0x38: pointer
  get PackageList(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(56, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x40: u32
  get PackageListLength(): number {
    return this.view.getUint32(64, true);
  }

  // 0x44: pad4

  // 0x00: u32
  set Version(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: u32
  set Length(value: number) {
    this.view.setUint32(4, value, true);
  }

  // 0x08: pointer
  set User(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x10: u32
  set UserLength(value: number) {
    this.view.setUint32(16, value, true);
  }

  // 0x14: pad4

  // 0x18: pointer
  set Domain(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(24, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x20: u32
  set DomainLength(value: number) {
    this.view.setUint32(32, value, true);
  }

  // 0x24: pad4

  // 0x28: pointer
  set Password(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(40, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x30: u32
  set PasswordLength(value: number) {
    this.view.setUint32(48, value, true);
  }

  // 0x34: u32
  set Flags(value: number) {
    this.view.setUint32(52, value, true);
  }

  // 0x38: pointer
  set PackageList(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(56, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x40: u32
  set PackageListLength(value: number) {
    this.view.setUint32(64, value, true);
  }

  // 0x44: pad4
}

/**
 * Windows.Win32.Security.Authentication.Identity.SEC_WINNT_AUTH_IDENTITY_EXA (size: 72)
 */
export interface SEC_WINNT_AUTH_IDENTITY_EXA {
  /** u32 */
  Version: number;
  /** u32 */
  Length: number;
  /** ptr */
  User: Deno.PointerValue | Uint8Array;
  /** u32 */
  UserLength: number;
  /** ptr */
  Domain: Deno.PointerValue | Uint8Array;
  /** u32 */
  DomainLength: number;
  /** ptr */
  Password: Deno.PointerValue | Uint8Array;
  /** u32 */
  PasswordLength: number;
  /** u32 */
  Flags: number;
  /** ptr */
  PackageList: Deno.PointerValue | Uint8Array;
  /** u32 */
  PackageListLength: number;
}

export const sizeofSEC_WINNT_AUTH_IDENTITY_EXA = 72;

export function allocSEC_WINNT_AUTH_IDENTITY_EXA(data?: Partial<SEC_WINNT_AUTH_IDENTITY_EXA>): Uint8Array {
  const buf = new Uint8Array(sizeofSEC_WINNT_AUTH_IDENTITY_EXA);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.Version !== undefined) view.setUint32(0, Number(data.Version), true);
  // 0x04: u32
  if (data?.Length !== undefined) view.setUint32(4, Number(data.Length), true);
  // 0x08: pointer
  if (data?.User !== undefined) view.setBigUint64(8, data.User === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.User))), true);
  // 0x10: u32
  if (data?.UserLength !== undefined) view.setUint32(16, Number(data.UserLength), true);
  // 0x14: pad4
  // 0x18: pointer
  if (data?.Domain !== undefined) view.setBigUint64(24, data.Domain === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.Domain))), true);
  // 0x20: u32
  if (data?.DomainLength !== undefined) view.setUint32(32, Number(data.DomainLength), true);
  // 0x24: pad4
  // 0x28: pointer
  if (data?.Password !== undefined) view.setBigUint64(40, data.Password === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.Password))), true);
  // 0x30: u32
  if (data?.PasswordLength !== undefined) view.setUint32(48, Number(data.PasswordLength), true);
  // 0x34: u32
  if (data?.Flags !== undefined) view.setUint32(52, Number(data.Flags), true);
  // 0x38: pointer
  if (data?.PackageList !== undefined) view.setBigUint64(56, data.PackageList === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.PackageList))), true);
  // 0x40: u32
  if (data?.PackageListLength !== undefined) view.setUint32(64, Number(data.PackageListLength), true);
  // 0x44: pad4
  return buf;
}

export class SEC_WINNT_AUTH_IDENTITY_EXAView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get Version(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: u32
  get Length(): number {
    return this.view.getUint32(4, true);
  }

  // 0x08: pointer
  get User(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x10: u32
  get UserLength(): number {
    return this.view.getUint32(16, true);
  }

  // 0x14: pad4

  // 0x18: pointer
  get Domain(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(24, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x20: u32
  get DomainLength(): number {
    return this.view.getUint32(32, true);
  }

  // 0x24: pad4

  // 0x28: pointer
  get Password(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(40, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x30: u32
  get PasswordLength(): number {
    return this.view.getUint32(48, true);
  }

  // 0x34: u32
  get Flags(): number {
    return this.view.getUint32(52, true);
  }

  // 0x38: pointer
  get PackageList(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(56, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x40: u32
  get PackageListLength(): number {
    return this.view.getUint32(64, true);
  }

  // 0x44: pad4

  // 0x00: u32
  set Version(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: u32
  set Length(value: number) {
    this.view.setUint32(4, value, true);
  }

  // 0x08: pointer
  set User(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x10: u32
  set UserLength(value: number) {
    this.view.setUint32(16, value, true);
  }

  // 0x14: pad4

  // 0x18: pointer
  set Domain(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(24, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x20: u32
  set DomainLength(value: number) {
    this.view.setUint32(32, value, true);
  }

  // 0x24: pad4

  // 0x28: pointer
  set Password(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(40, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x30: u32
  set PasswordLength(value: number) {
    this.view.setUint32(48, value, true);
  }

  // 0x34: u32
  set Flags(value: number) {
    this.view.setUint32(52, value, true);
  }

  // 0x38: pointer
  set PackageList(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(56, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x40: u32
  set PackageListLength(value: number) {
    this.view.setUint32(64, value, true);
  }

  // 0x44: pad4
}

/**
 * Windows.Win32.System.Rpc.SEC_WINNT_AUTH_IDENTITY_A (size: 48)
 */
export interface SEC_WINNT_AUTH_IDENTITY_A {
  /** ptr */
  User: Deno.PointerValue | Uint8Array;
  /** u32 */
  UserLength: number;
  /** ptr */
  Domain: Deno.PointerValue | Uint8Array;
  /** u32 */
  DomainLength: number;
  /** ptr */
  Password: Deno.PointerValue | Uint8Array;
  /** u32 */
  PasswordLength: number;
  /** Windows.Win32.System.Rpc.SEC_WINNT_AUTH_IDENTITY */
  Flags: SEC_WINNT_AUTH_IDENTITY;
}

export const sizeofSEC_WINNT_AUTH_IDENTITY_A = 48;

export function allocSEC_WINNT_AUTH_IDENTITY_A(data?: Partial<SEC_WINNT_AUTH_IDENTITY_A>): Uint8Array {
  const buf = new Uint8Array(sizeofSEC_WINNT_AUTH_IDENTITY_A);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.User !== undefined) view.setBigUint64(0, data.User === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.User))), true);
  // 0x08: u32
  if (data?.UserLength !== undefined) view.setUint32(8, Number(data.UserLength), true);
  // 0x0c: pad4
  // 0x10: pointer
  if (data?.Domain !== undefined) view.setBigUint64(16, data.Domain === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.Domain))), true);
  // 0x18: u32
  if (data?.DomainLength !== undefined) view.setUint32(24, Number(data.DomainLength), true);
  // 0x1c: pad4
  // 0x20: pointer
  if (data?.Password !== undefined) view.setBigUint64(32, data.Password === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.Password))), true);
  // 0x28: u32
  if (data?.PasswordLength !== undefined) view.setUint32(40, Number(data.PasswordLength), true);
  // 0x2c: u32
  if (data?.Flags !== undefined) view.setUint32(44, Number(data.Flags), true);
  return buf;
}

export class SEC_WINNT_AUTH_IDENTITY_AView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get User(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(0, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x08: u32
  get UserLength(): number {
    return this.view.getUint32(8, true);
  }

  // 0x0c: pad4

  // 0x10: pointer
  get Domain(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(16, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x18: u32
  get DomainLength(): number {
    return this.view.getUint32(24, true);
  }

  // 0x1c: pad4

  // 0x20: pointer
  get Password(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(32, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x28: u32
  get PasswordLength(): number {
    return this.view.getUint32(40, true);
  }

  // 0x2c: u32
  get Flags(): number {
    return this.view.getUint32(44, true);
  }

  // 0x00: pointer
  set User(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(0, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x08: u32
  set UserLength(value: number) {
    this.view.setUint32(8, value, true);
  }

  // 0x0c: pad4

  // 0x10: pointer
  set Domain(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(16, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x18: u32
  set DomainLength(value: number) {
    this.view.setUint32(24, value, true);
  }

  // 0x1c: pad4

  // 0x20: pointer
  set Password(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(32, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x28: u32
  set PasswordLength(value: number) {
    this.view.setUint32(40, value, true);
  }

  // 0x2c: u32
  set Flags(value: number) {
    this.view.setUint32(44, value, true);
  }
}

/**
 * Windows.Win32.System.Rpc.SEC_WINNT_AUTH_IDENTITY_W (size: 48)
 */
export interface SEC_WINNT_AUTH_IDENTITY_W {
  /** ptr */
  User: Deno.PointerValue | Uint8Array;
  /** u32 */
  UserLength: number;
  /** ptr */
  Domain: Deno.PointerValue | Uint8Array;
  /** u32 */
  DomainLength: number;
  /** ptr */
  Password: Deno.PointerValue | Uint8Array;
  /** u32 */
  PasswordLength: number;
  /** Windows.Win32.System.Rpc.SEC_WINNT_AUTH_IDENTITY */
  Flags: SEC_WINNT_AUTH_IDENTITY;
}

export const sizeofSEC_WINNT_AUTH_IDENTITY_W = 48;

export function allocSEC_WINNT_AUTH_IDENTITY_W(data?: Partial<SEC_WINNT_AUTH_IDENTITY_W>): Uint8Array {
  const buf = new Uint8Array(sizeofSEC_WINNT_AUTH_IDENTITY_W);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.User !== undefined) view.setBigUint64(0, data.User === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.User))), true);
  // 0x08: u32
  if (data?.UserLength !== undefined) view.setUint32(8, Number(data.UserLength), true);
  // 0x0c: pad4
  // 0x10: pointer
  if (data?.Domain !== undefined) view.setBigUint64(16, data.Domain === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.Domain))), true);
  // 0x18: u32
  if (data?.DomainLength !== undefined) view.setUint32(24, Number(data.DomainLength), true);
  // 0x1c: pad4
  // 0x20: pointer
  if (data?.Password !== undefined) view.setBigUint64(32, data.Password === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.Password))), true);
  // 0x28: u32
  if (data?.PasswordLength !== undefined) view.setUint32(40, Number(data.PasswordLength), true);
  // 0x2c: u32
  if (data?.Flags !== undefined) view.setUint32(44, Number(data.Flags), true);
  return buf;
}

export class SEC_WINNT_AUTH_IDENTITY_WView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get User(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(0, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x08: u32
  get UserLength(): number {
    return this.view.getUint32(8, true);
  }

  // 0x0c: pad4

  // 0x10: pointer
  get Domain(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(16, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x18: u32
  get DomainLength(): number {
    return this.view.getUint32(24, true);
  }

  // 0x1c: pad4

  // 0x20: pointer
  get Password(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(32, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x28: u32
  get PasswordLength(): number {
    return this.view.getUint32(40, true);
  }

  // 0x2c: u32
  get Flags(): number {
    return this.view.getUint32(44, true);
  }

  // 0x00: pointer
  set User(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(0, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x08: u32
  set UserLength(value: number) {
    this.view.setUint32(8, value, true);
  }

  // 0x0c: pad4

  // 0x10: pointer
  set Domain(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(16, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x18: u32
  set DomainLength(value: number) {
    this.view.setUint32(24, value, true);
  }

  // 0x1c: pad4

  // 0x20: pointer
  set Password(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(32, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x28: u32
  set PasswordLength(value: number) {
    this.view.setUint32(40, value, true);
  }

  // 0x2c: u32
  set Flags(value: number) {
    this.view.setUint32(44, value, true);
  }
}

/**
 * Windows.Win32.Security.Authentication.Identity.SEC_WINNT_AUTH_IDENTITY_INFO (size: 40)
 */
export interface SEC_WINNT_AUTH_IDENTITY_INFO {
  /** Windows.Win32.Security.Authentication.Identity.SEC_WINNT_AUTH_IDENTITY_EXW */
  AuthIdExw: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.Security.Authentication.Identity.SEC_WINNT_AUTH_IDENTITY_EXA */
  AuthIdExa: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.System.Rpc.SEC_WINNT_AUTH_IDENTITY_A */
  AuthId_a: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.System.Rpc.SEC_WINNT_AUTH_IDENTITY_W */
  AuthId_w: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.Security.Authentication.Identity.SEC_WINNT_AUTH_IDENTITY_EX2 */
  AuthIdEx2: Uint8Array | Deno.PointerValue;
}

export const sizeofSEC_WINNT_AUTH_IDENTITY_INFO = 40;

export function allocSEC_WINNT_AUTH_IDENTITY_INFO(data?: Partial<SEC_WINNT_AUTH_IDENTITY_INFO>): Uint8Array {
  const buf = new Uint8Array(sizeofSEC_WINNT_AUTH_IDENTITY_INFO);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.AuthIdExw !== undefined) view.setBigUint64(0, data.AuthIdExw === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.AuthIdExw))), true);
  // 0x08: pointer
  if (data?.AuthIdExa !== undefined) view.setBigUint64(8, data.AuthIdExa === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.AuthIdExa))), true);
  // 0x10: pointer
  if (data?.AuthId_a !== undefined) view.setBigUint64(16, data.AuthId_a === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.AuthId_a))), true);
  // 0x18: pointer
  if (data?.AuthId_w !== undefined) view.setBigUint64(24, data.AuthId_w === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.AuthId_w))), true);
  // 0x20: pointer
  if (data?.AuthIdEx2 !== undefined) view.setBigUint64(32, data.AuthIdEx2 === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.AuthIdEx2))), true);
  return buf;
}

export class SEC_WINNT_AUTH_IDENTITY_INFOView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get AuthIdExw(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(0, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x08: pointer
  get AuthIdExa(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x10: pointer
  get AuthId_a(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(16, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x18: pointer
  get AuthId_w(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(24, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x20: pointer
  get AuthIdEx2(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(32, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: pointer
  set AuthIdExw(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(0, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x08: pointer
  set AuthIdExa(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x10: pointer
  set AuthId_a(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(16, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x18: pointer
  set AuthId_w(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(24, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x20: pointer
  set AuthIdEx2(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(32, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.Security.Authentication.Identity.SECURITY_PACKAGE_OPTIONS (size: 24)
 */
export interface SECURITY_PACKAGE_OPTIONS {
  /** u32 */
  Size: number;
  /** Windows.Win32.Security.Authentication.Identity.SECURITY_PACKAGE_OPTIONS_TYPE */
  Type: SECURITY_PACKAGE_OPTIONS_TYPE;
  /** u32 */
  Flags: number;
  /** u32 */
  SignatureSize: number;
  /** ptr */
  Signature: Deno.PointerValue | Uint8Array;
}

export const sizeofSECURITY_PACKAGE_OPTIONS = 24;

export function allocSECURITY_PACKAGE_OPTIONS(data?: Partial<SECURITY_PACKAGE_OPTIONS>): Uint8Array {
  const buf = new Uint8Array(sizeofSECURITY_PACKAGE_OPTIONS);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.Size !== undefined) view.setUint32(0, Number(data.Size), true);
  // 0x04: u32
  if (data?.Type !== undefined) view.setUint32(4, Number(data.Type), true);
  // 0x08: u32
  if (data?.Flags !== undefined) view.setUint32(8, Number(data.Flags), true);
  // 0x0c: u32
  if (data?.SignatureSize !== undefined) view.setUint32(12, Number(data.SignatureSize), true);
  // 0x10: pointer
  if (data?.Signature !== undefined) view.setBigUint64(16, data.Signature === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.Signature))), true);
  return buf;
}

export class SECURITY_PACKAGE_OPTIONSView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get Size(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: u32
  get Type(): number {
    return this.view.getUint32(4, true);
  }

  // 0x08: u32
  get Flags(): number {
    return this.view.getUint32(8, true);
  }

  // 0x0c: u32
  get SignatureSize(): number {
    return this.view.getUint32(12, true);
  }

  // 0x10: pointer
  get Signature(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(16, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: u32
  set Size(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: u32
  set Type(value: number) {
    this.view.setUint32(4, value, true);
  }

  // 0x08: u32
  set Flags(value: number) {
    this.view.setUint32(8, value, true);
  }

  // 0x0c: u32
  set SignatureSize(value: number) {
    this.view.setUint32(12, value, true);
  }

  // 0x10: pointer
  set Signature(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(16, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.Security.Authentication.Identity.LSA_TOKEN_INFORMATION_NULL (size: 16)
 */
export interface LSA_TOKEN_INFORMATION_NULL {
  /** Windows.Win32.Foundation.LARGE_INTEGER */
  ExpirationTime: Uint8Array | Deno.PointerValue;
  /** ptr */
  Groups: Deno.PointerValue | Uint8Array;
}

export const sizeofLSA_TOKEN_INFORMATION_NULL = 16;

export function allocLSA_TOKEN_INFORMATION_NULL(data?: Partial<LSA_TOKEN_INFORMATION_NULL>): Uint8Array {
  const buf = new Uint8Array(sizeofLSA_TOKEN_INFORMATION_NULL);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.ExpirationTime !== undefined) view.setBigUint64(0, data.ExpirationTime === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.ExpirationTime))), true);
  // 0x08: pointer
  if (data?.Groups !== undefined) view.setBigUint64(8, data.Groups === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.Groups))), true);
  return buf;
}

export class LSA_TOKEN_INFORMATION_NULLView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get ExpirationTime(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(0, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x08: pointer
  get Groups(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: pointer
  set ExpirationTime(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(0, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x08: pointer
  set Groups(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.Security.SID_AND_ATTRIBUTES (size: 16)
 */
export interface SID_AND_ATTRIBUTES {
  /** Windows.Win32.Foundation.PSID */
  Sid: Uint8Array | Deno.PointerValue;
  /** u32 */
  Attributes: number;
}

export const sizeofSID_AND_ATTRIBUTES = 16;

export function allocSID_AND_ATTRIBUTES(data?: Partial<SID_AND_ATTRIBUTES>): Uint8Array {
  const buf = new Uint8Array(sizeofSID_AND_ATTRIBUTES);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.Sid !== undefined) view.setBigUint64(0, data.Sid === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.Sid))), true);
  // 0x08: u32
  if (data?.Attributes !== undefined) view.setUint32(8, Number(data.Attributes), true);
  // 0x0c: pad4
  return buf;
}

export class SID_AND_ATTRIBUTESView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get Sid(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(0, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x08: u32
  get Attributes(): number {
    return this.view.getUint32(8, true);
  }

  // 0x0c: pad4

  // 0x00: pointer
  set Sid(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(0, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x08: u32
  set Attributes(value: number) {
    this.view.setUint32(8, value, true);
  }

  // 0x0c: pad4
}

/**
 * Windows.Win32.Security.TOKEN_USER (size: 8)
 */
export interface TOKEN_USER {
  /** Windows.Win32.Security.SID_AND_ATTRIBUTES */
  User: Uint8Array | Deno.PointerValue;
}

export const sizeofTOKEN_USER = 8;

export function allocTOKEN_USER(data?: Partial<TOKEN_USER>): Uint8Array {
  const buf = new Uint8Array(sizeofTOKEN_USER);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.User !== undefined) view.setBigUint64(0, data.User === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.User))), true);
  return buf;
}

export class TOKEN_USERView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get User(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(0, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: pointer
  set User(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(0, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.Security.TOKEN_PRIMARY_GROUP (size: 8)
 */
export interface TOKEN_PRIMARY_GROUP {
  /** Windows.Win32.Foundation.PSID */
  PrimaryGroup: Uint8Array | Deno.PointerValue;
}

export const sizeofTOKEN_PRIMARY_GROUP = 8;

export function allocTOKEN_PRIMARY_GROUP(data?: Partial<TOKEN_PRIMARY_GROUP>): Uint8Array {
  const buf = new Uint8Array(sizeofTOKEN_PRIMARY_GROUP);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.PrimaryGroup !== undefined) view.setBigUint64(0, data.PrimaryGroup === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.PrimaryGroup))), true);
  return buf;
}

export class TOKEN_PRIMARY_GROUPView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get PrimaryGroup(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(0, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: pointer
  set PrimaryGroup(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(0, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.Security.TOKEN_OWNER (size: 8)
 */
export interface TOKEN_OWNER {
  /** Windows.Win32.Foundation.PSID */
  Owner: Uint8Array | Deno.PointerValue;
}

export const sizeofTOKEN_OWNER = 8;

export function allocTOKEN_OWNER(data?: Partial<TOKEN_OWNER>): Uint8Array {
  const buf = new Uint8Array(sizeofTOKEN_OWNER);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.Owner !== undefined) view.setBigUint64(0, data.Owner === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.Owner))), true);
  return buf;
}

export class TOKEN_OWNERView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get Owner(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(0, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: pointer
  set Owner(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(0, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.Security.TOKEN_DEFAULT_DACL (size: 8)
 */
export interface TOKEN_DEFAULT_DACL {
  /** ptr */
  DefaultDacl: Deno.PointerValue | Uint8Array;
}

export const sizeofTOKEN_DEFAULT_DACL = 8;

export function allocTOKEN_DEFAULT_DACL(data?: Partial<TOKEN_DEFAULT_DACL>): Uint8Array {
  const buf = new Uint8Array(sizeofTOKEN_DEFAULT_DACL);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.DefaultDacl !== undefined) view.setBigUint64(0, data.DefaultDacl === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.DefaultDacl))), true);
  return buf;
}

export class TOKEN_DEFAULT_DACLView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get DefaultDacl(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(0, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: pointer
  set DefaultDacl(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(0, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.Security.Authentication.Identity.LSA_TOKEN_INFORMATION_V1 (size: 56)
 */
export interface LSA_TOKEN_INFORMATION_V1 {
  /** Windows.Win32.Foundation.LARGE_INTEGER */
  ExpirationTime: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.Security.TOKEN_USER */
  User: Uint8Array | Deno.PointerValue;
  /** ptr */
  Groups: Deno.PointerValue | Uint8Array;
  /** Windows.Win32.Security.TOKEN_PRIMARY_GROUP */
  PrimaryGroup: Uint8Array | Deno.PointerValue;
  /** ptr */
  Privileges: Deno.PointerValue | Uint8Array;
  /** Windows.Win32.Security.TOKEN_OWNER */
  Owner: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.Security.TOKEN_DEFAULT_DACL */
  DefaultDacl: Uint8Array | Deno.PointerValue;
}

export const sizeofLSA_TOKEN_INFORMATION_V1 = 56;

export function allocLSA_TOKEN_INFORMATION_V1(data?: Partial<LSA_TOKEN_INFORMATION_V1>): Uint8Array {
  const buf = new Uint8Array(sizeofLSA_TOKEN_INFORMATION_V1);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.ExpirationTime !== undefined) view.setBigUint64(0, data.ExpirationTime === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.ExpirationTime))), true);
  // 0x08: pointer
  if (data?.User !== undefined) view.setBigUint64(8, data.User === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.User))), true);
  // 0x10: pointer
  if (data?.Groups !== undefined) view.setBigUint64(16, data.Groups === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.Groups))), true);
  // 0x18: pointer
  if (data?.PrimaryGroup !== undefined) view.setBigUint64(24, data.PrimaryGroup === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.PrimaryGroup))), true);
  // 0x20: pointer
  if (data?.Privileges !== undefined) view.setBigUint64(32, data.Privileges === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.Privileges))), true);
  // 0x28: pointer
  if (data?.Owner !== undefined) view.setBigUint64(40, data.Owner === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.Owner))), true);
  // 0x30: pointer
  if (data?.DefaultDacl !== undefined) view.setBigUint64(48, data.DefaultDacl === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.DefaultDacl))), true);
  return buf;
}

export class LSA_TOKEN_INFORMATION_V1View {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get ExpirationTime(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(0, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x08: pointer
  get User(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x10: pointer
  get Groups(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(16, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x18: pointer
  get PrimaryGroup(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(24, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x20: pointer
  get Privileges(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(32, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x28: pointer
  get Owner(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(40, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x30: pointer
  get DefaultDacl(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(48, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: pointer
  set ExpirationTime(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(0, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x08: pointer
  set User(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x10: pointer
  set Groups(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(16, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x18: pointer
  set PrimaryGroup(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(24, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x20: pointer
  set Privileges(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(32, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x28: pointer
  set Owner(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(40, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x30: pointer
  set DefaultDacl(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(48, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.Security.TOKEN_USER_CLAIMS (size: 8)
 */
export interface TOKEN_USER_CLAIMS {
  /** ptr */
  UserClaims: Deno.PointerValue | Uint8Array;
}

export const sizeofTOKEN_USER_CLAIMS = 8;

export function allocTOKEN_USER_CLAIMS(data?: Partial<TOKEN_USER_CLAIMS>): Uint8Array {
  const buf = new Uint8Array(sizeofTOKEN_USER_CLAIMS);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.UserClaims !== undefined) view.setBigUint64(0, data.UserClaims === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.UserClaims))), true);
  return buf;
}

export class TOKEN_USER_CLAIMSView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get UserClaims(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(0, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: pointer
  set UserClaims(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(0, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.Security.TOKEN_DEVICE_CLAIMS (size: 8)
 */
export interface TOKEN_DEVICE_CLAIMS {
  /** ptr */
  DeviceClaims: Deno.PointerValue | Uint8Array;
}

export const sizeofTOKEN_DEVICE_CLAIMS = 8;

export function allocTOKEN_DEVICE_CLAIMS(data?: Partial<TOKEN_DEVICE_CLAIMS>): Uint8Array {
  const buf = new Uint8Array(sizeofTOKEN_DEVICE_CLAIMS);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.DeviceClaims !== undefined) view.setBigUint64(0, data.DeviceClaims === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.DeviceClaims))), true);
  return buf;
}

export class TOKEN_DEVICE_CLAIMSView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get DeviceClaims(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(0, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: pointer
  set DeviceClaims(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(0, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.Security.Authentication.Identity.LSA_TOKEN_INFORMATION_V3 (size: 80)
 */
export interface LSA_TOKEN_INFORMATION_V3 {
  /** Windows.Win32.Foundation.LARGE_INTEGER */
  ExpirationTime: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.Security.TOKEN_USER */
  User: Uint8Array | Deno.PointerValue;
  /** ptr */
  Groups: Deno.PointerValue | Uint8Array;
  /** Windows.Win32.Security.TOKEN_PRIMARY_GROUP */
  PrimaryGroup: Uint8Array | Deno.PointerValue;
  /** ptr */
  Privileges: Deno.PointerValue | Uint8Array;
  /** Windows.Win32.Security.TOKEN_OWNER */
  Owner: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.Security.TOKEN_DEFAULT_DACL */
  DefaultDacl: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.Security.TOKEN_USER_CLAIMS */
  UserClaims: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.Security.TOKEN_DEVICE_CLAIMS */
  DeviceClaims: Uint8Array | Deno.PointerValue;
  /** ptr */
  DeviceGroups: Deno.PointerValue | Uint8Array;
}

export const sizeofLSA_TOKEN_INFORMATION_V3 = 80;

export function allocLSA_TOKEN_INFORMATION_V3(data?: Partial<LSA_TOKEN_INFORMATION_V3>): Uint8Array {
  const buf = new Uint8Array(sizeofLSA_TOKEN_INFORMATION_V3);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.ExpirationTime !== undefined) view.setBigUint64(0, data.ExpirationTime === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.ExpirationTime))), true);
  // 0x08: pointer
  if (data?.User !== undefined) view.setBigUint64(8, data.User === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.User))), true);
  // 0x10: pointer
  if (data?.Groups !== undefined) view.setBigUint64(16, data.Groups === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.Groups))), true);
  // 0x18: pointer
  if (data?.PrimaryGroup !== undefined) view.setBigUint64(24, data.PrimaryGroup === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.PrimaryGroup))), true);
  // 0x20: pointer
  if (data?.Privileges !== undefined) view.setBigUint64(32, data.Privileges === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.Privileges))), true);
  // 0x28: pointer
  if (data?.Owner !== undefined) view.setBigUint64(40, data.Owner === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.Owner))), true);
  // 0x30: pointer
  if (data?.DefaultDacl !== undefined) view.setBigUint64(48, data.DefaultDacl === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.DefaultDacl))), true);
  // 0x38: pointer
  if (data?.UserClaims !== undefined) view.setBigUint64(56, data.UserClaims === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.UserClaims))), true);
  // 0x40: pointer
  if (data?.DeviceClaims !== undefined) view.setBigUint64(64, data.DeviceClaims === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.DeviceClaims))), true);
  // 0x48: pointer
  if (data?.DeviceGroups !== undefined) view.setBigUint64(72, data.DeviceGroups === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.DeviceGroups))), true);
  return buf;
}

export class LSA_TOKEN_INFORMATION_V3View {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get ExpirationTime(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(0, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x08: pointer
  get User(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x10: pointer
  get Groups(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(16, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x18: pointer
  get PrimaryGroup(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(24, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x20: pointer
  get Privileges(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(32, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x28: pointer
  get Owner(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(40, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x30: pointer
  get DefaultDacl(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(48, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x38: pointer
  get UserClaims(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(56, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x40: pointer
  get DeviceClaims(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(64, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x48: pointer
  get DeviceGroups(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(72, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: pointer
  set ExpirationTime(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(0, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x08: pointer
  set User(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x10: pointer
  set Groups(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(16, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x18: pointer
  set PrimaryGroup(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(24, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x20: pointer
  set Privileges(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(32, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x28: pointer
  set Owner(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(40, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x30: pointer
  set DefaultDacl(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(48, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x38: pointer
  set UserClaims(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(56, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x40: pointer
  set DeviceClaims(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(64, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x48: pointer
  set DeviceGroups(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(72, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.Security.Authentication.Identity.LSA_DISPATCH_TABLE (size: 88)
 */
export interface LSA_DISPATCH_TABLE {
  /** Windows.Win32.Security.Authentication.Identity.PLSA_CREATE_LOGON_SESSION */
  CreateLogonSession: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.Security.Authentication.Identity.PLSA_DELETE_LOGON_SESSION */
  DeleteLogonSession: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.Security.Authentication.Identity.PLSA_ADD_CREDENTIAL */
  AddCredential: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.Security.Authentication.Identity.PLSA_GET_CREDENTIALS */
  GetCredentials: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.Security.Authentication.Identity.PLSA_DELETE_CREDENTIAL */
  DeleteCredential: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.Security.Authentication.Identity.PLSA_ALLOCATE_LSA_HEAP */
  AllocateLsaHeap: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.Security.Authentication.Identity.PLSA_FREE_LSA_HEAP */
  FreeLsaHeap: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.Security.Authentication.Identity.PLSA_ALLOCATE_CLIENT_BUFFER */
  AllocateClientBuffer: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.Security.Authentication.Identity.PLSA_FREE_CLIENT_BUFFER */
  FreeClientBuffer: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.Security.Authentication.Identity.PLSA_COPY_TO_CLIENT_BUFFER */
  CopyToClientBuffer: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.Security.Authentication.Identity.PLSA_COPY_FROM_CLIENT_BUFFER */
  CopyFromClientBuffer: Uint8Array | Deno.PointerValue;
}

export const sizeofLSA_DISPATCH_TABLE = 88;

export function allocLSA_DISPATCH_TABLE(data?: Partial<LSA_DISPATCH_TABLE>): Uint8Array {
  const buf = new Uint8Array(sizeofLSA_DISPATCH_TABLE);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.CreateLogonSession !== undefined) view.setBigUint64(0, data.CreateLogonSession === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.CreateLogonSession))), true);
  // 0x08: pointer
  if (data?.DeleteLogonSession !== undefined) view.setBigUint64(8, data.DeleteLogonSession === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.DeleteLogonSession))), true);
  // 0x10: pointer
  if (data?.AddCredential !== undefined) view.setBigUint64(16, data.AddCredential === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.AddCredential))), true);
  // 0x18: pointer
  if (data?.GetCredentials !== undefined) view.setBigUint64(24, data.GetCredentials === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.GetCredentials))), true);
  // 0x20: pointer
  if (data?.DeleteCredential !== undefined) view.setBigUint64(32, data.DeleteCredential === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.DeleteCredential))), true);
  // 0x28: pointer
  if (data?.AllocateLsaHeap !== undefined) view.setBigUint64(40, data.AllocateLsaHeap === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.AllocateLsaHeap))), true);
  // 0x30: pointer
  if (data?.FreeLsaHeap !== undefined) view.setBigUint64(48, data.FreeLsaHeap === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.FreeLsaHeap))), true);
  // 0x38: pointer
  if (data?.AllocateClientBuffer !== undefined) view.setBigUint64(56, data.AllocateClientBuffer === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.AllocateClientBuffer))), true);
  // 0x40: pointer
  if (data?.FreeClientBuffer !== undefined) view.setBigUint64(64, data.FreeClientBuffer === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.FreeClientBuffer))), true);
  // 0x48: pointer
  if (data?.CopyToClientBuffer !== undefined) view.setBigUint64(72, data.CopyToClientBuffer === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.CopyToClientBuffer))), true);
  // 0x50: pointer
  if (data?.CopyFromClientBuffer !== undefined) view.setBigUint64(80, data.CopyFromClientBuffer === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.CopyFromClientBuffer))), true);
  return buf;
}

export class LSA_DISPATCH_TABLEView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get CreateLogonSession(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(0, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x08: pointer
  get DeleteLogonSession(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x10: pointer
  get AddCredential(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(16, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x18: pointer
  get GetCredentials(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(24, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x20: pointer
  get DeleteCredential(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(32, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x28: pointer
  get AllocateLsaHeap(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(40, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x30: pointer
  get FreeLsaHeap(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(48, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x38: pointer
  get AllocateClientBuffer(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(56, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x40: pointer
  get FreeClientBuffer(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(64, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x48: pointer
  get CopyToClientBuffer(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(72, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x50: pointer
  get CopyFromClientBuffer(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(80, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: pointer
  set CreateLogonSession(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(0, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x08: pointer
  set DeleteLogonSession(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x10: pointer
  set AddCredential(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(16, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x18: pointer
  set GetCredentials(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(24, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x20: pointer
  set DeleteCredential(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(32, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x28: pointer
  set AllocateLsaHeap(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(40, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x30: pointer
  set FreeLsaHeap(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(48, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x38: pointer
  set AllocateClientBuffer(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(56, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x40: pointer
  set FreeClientBuffer(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(64, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x48: pointer
  set CopyToClientBuffer(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(72, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x50: pointer
  set CopyFromClientBuffer(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(80, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.Security.Authentication.Identity.SAM_REGISTER_MAPPING_ELEMENT (size: 24)
 */
export interface SAM_REGISTER_MAPPING_ELEMENT {
  /** Windows.Win32.Foundation.PSTR */
  Original: string | null | Uint8Array;
  /** Windows.Win32.Foundation.PSTR */
  Mapped: string | null | Uint8Array;
  /** Windows.Win32.Foundation.BOOLEAN */
  Continuable: Uint8Array | Deno.PointerValue;
}

export const sizeofSAM_REGISTER_MAPPING_ELEMENT = 24;

export function allocSAM_REGISTER_MAPPING_ELEMENT(data?: Partial<SAM_REGISTER_MAPPING_ELEMENT>): Uint8Array {
  const buf = new Uint8Array(sizeofSAM_REGISTER_MAPPING_ELEMENT);
  const view = new DataView(buf.buffer);
  // 0x00: buffer
  if (data?.Original !== undefined) {
    (buf as any)._f0 = util.pstrToFfi(data.Original);
    view.setBigUint64(0, (buf as any)._f0 === null ? 0n : BigInt(Deno.UnsafePointer.value(Deno.UnsafePointer.of((buf as any)._f0))), true);
  }
  // 0x08: buffer
  if (data?.Mapped !== undefined) {
    (buf as any)._f8 = util.pstrToFfi(data.Mapped);
    view.setBigUint64(8, (buf as any)._f8 === null ? 0n : BigInt(Deno.UnsafePointer.value(Deno.UnsafePointer.of((buf as any)._f8))), true);
  }
  // 0x10: pointer
  if (data?.Continuable !== undefined) view.setBigUint64(16, data.Continuable === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.Continuable))), true);
  return buf;
}

export class SAM_REGISTER_MAPPING_ELEMENTView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: buffer
  get Original(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(0, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x08: buffer
  get Mapped(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x10: pointer
  get Continuable(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(16, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: buffer
  set Original(value: Uint8Array | Deno.PointerValue) {
    (this.buf as any)._f0 = value;
    this.view.setBigUint64(0, BigInt(Deno.UnsafePointer.value(util.toPointer((this.buf as any)._f0))), true);
  }

  // 0x08: buffer
  set Mapped(value: Uint8Array | Deno.PointerValue) {
    (this.buf as any)._f8 = value;
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer((this.buf as any)._f8))), true);
  }

  // 0x10: pointer
  set Continuable(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(16, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.Security.Authentication.Identity.SAM_REGISTER_MAPPING_LIST (size: 16)
 */
export interface SAM_REGISTER_MAPPING_LIST {
  /** u32 */
  Count: number;
  /** ptr */
  Elements: Deno.PointerValue | Uint8Array;
}

export const sizeofSAM_REGISTER_MAPPING_LIST = 16;

export function allocSAM_REGISTER_MAPPING_LIST(data?: Partial<SAM_REGISTER_MAPPING_LIST>): Uint8Array {
  const buf = new Uint8Array(sizeofSAM_REGISTER_MAPPING_LIST);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.Count !== undefined) view.setUint32(0, Number(data.Count), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.Elements !== undefined) view.setBigUint64(8, data.Elements === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.Elements))), true);
  return buf;
}

export class SAM_REGISTER_MAPPING_LISTView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get Count(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  get Elements(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: u32
  set Count(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  set Elements(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.Security.Authentication.Identity.SAM_REGISTER_MAPPING_TABLE (size: 16)
 */
export interface SAM_REGISTER_MAPPING_TABLE {
  /** u32 */
  Count: number;
  /** ptr */
  Lists: Deno.PointerValue | Uint8Array;
}

export const sizeofSAM_REGISTER_MAPPING_TABLE = 16;

export function allocSAM_REGISTER_MAPPING_TABLE(data?: Partial<SAM_REGISTER_MAPPING_TABLE>): Uint8Array {
  const buf = new Uint8Array(sizeofSAM_REGISTER_MAPPING_TABLE);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.Count !== undefined) view.setUint32(0, Number(data.Count), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.Lists !== undefined) view.setBigUint64(8, data.Lists === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.Lists))), true);
  return buf;
}

export class SAM_REGISTER_MAPPING_TABLEView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get Count(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  get Lists(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: u32
  set Count(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  set Lists(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

export type HANDLE = Deno.PointerValue;

/**
 * Windows.Win32.Security.Authentication.Identity.SECPKG_CLIENT_INFO (size: 56)
 */
export interface SECPKG_CLIENT_INFO {
  /** Windows.Win32.Foundation.LUID */
  LogonId: Uint8Array | Deno.PointerValue;
  /** u32 */
  ProcessID: number;
  /** u32 */
  ThreadID: number;
  /** Windows.Win32.Foundation.BOOLEAN */
  HasTcbPrivilege: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.Foundation.BOOLEAN */
  Impersonating: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.Foundation.BOOLEAN */
  Restricted: Uint8Array | Deno.PointerValue;
  /** u8 */
  ClientFlags: number;
  /** Windows.Win32.Security.SECURITY_IMPERSONATION_LEVEL */
  ImpersonationLevel: SECURITY_IMPERSONATION_LEVEL;
  /** Windows.Win32.Foundation.HANDLE */
  ClientToken: Uint8Array | Deno.PointerValue;
}

export const sizeofSECPKG_CLIENT_INFO = 56;

export function allocSECPKG_CLIENT_INFO(data?: Partial<SECPKG_CLIENT_INFO>): Uint8Array {
  const buf = new Uint8Array(sizeofSECPKG_CLIENT_INFO);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.LogonId !== undefined) view.setBigUint64(0, data.LogonId === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.LogonId))), true);
  // 0x08: u32
  if (data?.ProcessID !== undefined) view.setUint32(8, Number(data.ProcessID), true);
  // 0x0c: u32
  if (data?.ThreadID !== undefined) view.setUint32(12, Number(data.ThreadID), true);
  // 0x10: pointer
  if (data?.HasTcbPrivilege !== undefined) view.setBigUint64(16, data.HasTcbPrivilege === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.HasTcbPrivilege))), true);
  // 0x18: pointer
  if (data?.Impersonating !== undefined) view.setBigUint64(24, data.Impersonating === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.Impersonating))), true);
  // 0x20: pointer
  if (data?.Restricted !== undefined) view.setBigUint64(32, data.Restricted === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.Restricted))), true);
  // 0x28: u8
  if (data?.ClientFlags !== undefined) view.setUint8(40, Number(data.ClientFlags));
  // 0x29: i32
  if (data?.ImpersonationLevel !== undefined) view.setInt32(41, Number(data.ImpersonationLevel), true);
  // 0x2d: pad3
  // 0x30: pointer
  if (data?.ClientToken !== undefined) view.setBigUint64(48, data.ClientToken === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.ClientToken))), true);
  return buf;
}

export class SECPKG_CLIENT_INFOView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get LogonId(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(0, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x08: u32
  get ProcessID(): number {
    return this.view.getUint32(8, true);
  }

  // 0x0c: u32
  get ThreadID(): number {
    return this.view.getUint32(12, true);
  }

  // 0x10: pointer
  get HasTcbPrivilege(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(16, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x18: pointer
  get Impersonating(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(24, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x20: pointer
  get Restricted(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(32, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x28: u8
  get ClientFlags(): number {
    return this.view.getUint8(40);
  }

  // 0x29: i32
  get ImpersonationLevel(): number {
    return this.view.getInt32(41, true);
  }

  // 0x2d: pad3

  // 0x30: pointer
  get ClientToken(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(48, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: pointer
  set LogonId(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(0, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x08: u32
  set ProcessID(value: number) {
    this.view.setUint32(8, value, true);
  }

  // 0x0c: u32
  set ThreadID(value: number) {
    this.view.setUint32(12, value, true);
  }

  // 0x10: pointer
  set HasTcbPrivilege(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(16, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x18: pointer
  set Impersonating(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(24, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x20: pointer
  set Restricted(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(32, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x28: u8
  set ClientFlags(value: number) {
    this.view.setUint8(40, value);
  }

  // 0x29: i32
  set ImpersonationLevel(value: number) {
    this.view.setInt32(41, value, true);
  }

  // 0x2d: pad3

  // 0x30: pointer
  set ClientToken(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(48, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.Security.Authentication.Identity.SECPKG_CALL_INFO (size: 24)
 */
export interface SECPKG_CALL_INFO {
  /** u32 */
  ProcessId: number;
  /** u32 */
  ThreadId: number;
  /** u32 */
  Attributes: number;
  /** u32 */
  CallCount: number;
  /** ptr */
  MechOid: Deno.PointerValue | Uint8Array;
}

export const sizeofSECPKG_CALL_INFO = 24;

export function allocSECPKG_CALL_INFO(data?: Partial<SECPKG_CALL_INFO>): Uint8Array {
  const buf = new Uint8Array(sizeofSECPKG_CALL_INFO);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.ProcessId !== undefined) view.setUint32(0, Number(data.ProcessId), true);
  // 0x04: u32
  if (data?.ThreadId !== undefined) view.setUint32(4, Number(data.ThreadId), true);
  // 0x08: u32
  if (data?.Attributes !== undefined) view.setUint32(8, Number(data.Attributes), true);
  // 0x0c: u32
  if (data?.CallCount !== undefined) view.setUint32(12, Number(data.CallCount), true);
  // 0x10: pointer
  if (data?.MechOid !== undefined) view.setBigUint64(16, data.MechOid === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.MechOid))), true);
  return buf;
}

export class SECPKG_CALL_INFOView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get ProcessId(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: u32
  get ThreadId(): number {
    return this.view.getUint32(4, true);
  }

  // 0x08: u32
  get Attributes(): number {
    return this.view.getUint32(8, true);
  }

  // 0x0c: u32
  get CallCount(): number {
    return this.view.getUint32(12, true);
  }

  // 0x10: pointer
  get MechOid(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(16, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: u32
  set ProcessId(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: u32
  set ThreadId(value: number) {
    this.view.setUint32(4, value, true);
  }

  // 0x08: u32
  set Attributes(value: number) {
    this.view.setUint32(8, value, true);
  }

  // 0x0c: u32
  set CallCount(value: number) {
    this.view.setUint32(12, value, true);
  }

  // 0x10: pointer
  set MechOid(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(16, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.Security.Authentication.Identity.SECPKG_SUPPLEMENTAL_CRED (size: 24)
 */
export interface SECPKG_SUPPLEMENTAL_CRED {
  /** Windows.Win32.Foundation.UNICODE_STRING */
  PackageName: Uint8Array | Deno.PointerValue;
  /** u32 */
  CredentialSize: number;
  /** ptr */
  Credentials: Deno.PointerValue | Uint8Array;
}

export const sizeofSECPKG_SUPPLEMENTAL_CRED = 24;

export function allocSECPKG_SUPPLEMENTAL_CRED(data?: Partial<SECPKG_SUPPLEMENTAL_CRED>): Uint8Array {
  const buf = new Uint8Array(sizeofSECPKG_SUPPLEMENTAL_CRED);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.PackageName !== undefined) view.setBigUint64(0, data.PackageName === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.PackageName))), true);
  // 0x08: u32
  if (data?.CredentialSize !== undefined) view.setUint32(8, Number(data.CredentialSize), true);
  // 0x0c: pad4
  // 0x10: pointer
  if (data?.Credentials !== undefined) view.setBigUint64(16, data.Credentials === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.Credentials))), true);
  return buf;
}

export class SECPKG_SUPPLEMENTAL_CREDView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get PackageName(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(0, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x08: u32
  get CredentialSize(): number {
    return this.view.getUint32(8, true);
  }

  // 0x0c: pad4

  // 0x10: pointer
  get Credentials(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(16, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: pointer
  set PackageName(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(0, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x08: u32
  set CredentialSize(value: number) {
    this.view.setUint32(8, value, true);
  }

  // 0x0c: pad4

  // 0x10: pointer
  set Credentials(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(16, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.Security.Authentication.Identity.SECPKG_BYTE_VECTOR (size: 8)
 */
export interface SECPKG_BYTE_VECTOR {
  /** u32 */
  ByteArrayOffset: number;
  /** u16 */
  ByteArrayLength: number;
}

export const sizeofSECPKG_BYTE_VECTOR = 8;

export function allocSECPKG_BYTE_VECTOR(data?: Partial<SECPKG_BYTE_VECTOR>): Uint8Array {
  const buf = new Uint8Array(sizeofSECPKG_BYTE_VECTOR);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.ByteArrayOffset !== undefined) view.setUint32(0, Number(data.ByteArrayOffset), true);
  // 0x04: u16
  if (data?.ByteArrayLength !== undefined) view.setUint16(4, Number(data.ByteArrayLength), true);
  // 0x06: pad2
  return buf;
}

export class SECPKG_BYTE_VECTORView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get ByteArrayOffset(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: u16
  get ByteArrayLength(): number {
    return this.view.getUint16(4, true);
  }

  // 0x06: pad2

  // 0x00: u32
  set ByteArrayOffset(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: u16
  set ByteArrayLength(value: number) {
    this.view.setUint16(4, value, true);
  }

  // 0x06: pad2
}

/**
 * Windows.Win32.Security.Authentication.Identity.SECPKG_SHORT_VECTOR (size: 8)
 */
export interface SECPKG_SHORT_VECTOR {
  /** u32 */
  ShortArrayOffset: number;
  /** u16 */
  ShortArrayCount: number;
}

export const sizeofSECPKG_SHORT_VECTOR = 8;

export function allocSECPKG_SHORT_VECTOR(data?: Partial<SECPKG_SHORT_VECTOR>): Uint8Array {
  const buf = new Uint8Array(sizeofSECPKG_SHORT_VECTOR);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.ShortArrayOffset !== undefined) view.setUint32(0, Number(data.ShortArrayOffset), true);
  // 0x04: u16
  if (data?.ShortArrayCount !== undefined) view.setUint16(4, Number(data.ShortArrayCount), true);
  // 0x06: pad2
  return buf;
}

export class SECPKG_SHORT_VECTORView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get ShortArrayOffset(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: u16
  get ShortArrayCount(): number {
    return this.view.getUint16(4, true);
  }

  // 0x06: pad2

  // 0x00: u32
  set ShortArrayOffset(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: u16
  set ShortArrayCount(value: number) {
    this.view.setUint16(4, value, true);
  }

  // 0x06: pad2
}

/**
 * Windows.Win32.Security.Authentication.Identity.SECPKG_SUPPLIED_CREDENTIAL (size: 40)
 */
export interface SECPKG_SUPPLIED_CREDENTIAL {
  /** u16 */
  cbHeaderLength: number;
  /** u16 */
  cbStructureLength: number;
  /** Windows.Win32.Security.Authentication.Identity.SECPKG_SHORT_VECTOR */
  UserName: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.Security.Authentication.Identity.SECPKG_SHORT_VECTOR */
  DomainName: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.Security.Authentication.Identity.SECPKG_BYTE_VECTOR */
  PackedCredentials: Uint8Array | Deno.PointerValue;
  /** u32 */
  CredFlags: number;
}

export const sizeofSECPKG_SUPPLIED_CREDENTIAL = 40;

export function allocSECPKG_SUPPLIED_CREDENTIAL(data?: Partial<SECPKG_SUPPLIED_CREDENTIAL>): Uint8Array {
  const buf = new Uint8Array(sizeofSECPKG_SUPPLIED_CREDENTIAL);
  const view = new DataView(buf.buffer);
  // 0x00: u16
  if (data?.cbHeaderLength !== undefined) view.setUint16(0, Number(data.cbHeaderLength), true);
  // 0x02: u16
  if (data?.cbStructureLength !== undefined) view.setUint16(2, Number(data.cbStructureLength), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.UserName !== undefined) view.setBigUint64(8, data.UserName === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.UserName))), true);
  // 0x10: pointer
  if (data?.DomainName !== undefined) view.setBigUint64(16, data.DomainName === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.DomainName))), true);
  // 0x18: pointer
  if (data?.PackedCredentials !== undefined) view.setBigUint64(24, data.PackedCredentials === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.PackedCredentials))), true);
  // 0x20: u32
  if (data?.CredFlags !== undefined) view.setUint32(32, Number(data.CredFlags), true);
  // 0x24: pad4
  return buf;
}

export class SECPKG_SUPPLIED_CREDENTIALView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u16
  get cbHeaderLength(): number {
    return this.view.getUint16(0, true);
  }

  // 0x02: u16
  get cbStructureLength(): number {
    return this.view.getUint16(2, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  get UserName(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x10: pointer
  get DomainName(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(16, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x18: pointer
  get PackedCredentials(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(24, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x20: u32
  get CredFlags(): number {
    return this.view.getUint32(32, true);
  }

  // 0x24: pad4

  // 0x00: u16
  set cbHeaderLength(value: number) {
    this.view.setUint16(0, value, true);
  }

  // 0x02: u16
  set cbStructureLength(value: number) {
    this.view.setUint16(2, value, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  set UserName(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x10: pointer
  set DomainName(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(16, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x18: pointer
  set PackedCredentials(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(24, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x20: u32
  set CredFlags(value: number) {
    this.view.setUint32(32, value, true);
  }

  // 0x24: pad4
}

/**
 * Windows.Win32.Security.Authentication.Identity.SECPKG_CREDENTIAL (size: 88)
 */
export interface SECPKG_CREDENTIAL {
  /** u64 */
  Version: Deno.PointerValue;
  /** u16 */
  cbHeaderLength: number;
  /** u32 */
  cbStructureLength: number;
  /** u32 */
  ClientProcess: number;
  /** u32 */
  ClientThread: number;
  /** Windows.Win32.Foundation.LUID */
  LogonId: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.Foundation.HANDLE */
  ClientToken: Uint8Array | Deno.PointerValue;
  /** u32 */
  SessionId: number;
  /** Windows.Win32.Foundation.LUID */
  ModifiedId: Uint8Array | Deno.PointerValue;
  /** u32 */
  fCredentials: number;
  /** u32 */
  Flags: number;
  /** Windows.Win32.Security.Authentication.Identity.SECPKG_BYTE_VECTOR */
  PrincipalName: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.Security.Authentication.Identity.SECPKG_BYTE_VECTOR */
  PackageList: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.Security.Authentication.Identity.SECPKG_BYTE_VECTOR */
  MarshaledSuppliedCreds: Uint8Array | Deno.PointerValue;
}

export const sizeofSECPKG_CREDENTIAL = 88;

export function allocSECPKG_CREDENTIAL(data?: Partial<SECPKG_CREDENTIAL>): Uint8Array {
  const buf = new Uint8Array(sizeofSECPKG_CREDENTIAL);
  const view = new DataView(buf.buffer);
  // 0x00: u64
  if (data?.Version !== undefined) view.setBigUint64(0, BigInt(data.Version), true);
  // 0x08: u16
  if (data?.cbHeaderLength !== undefined) view.setUint16(8, Number(data.cbHeaderLength), true);
  // 0x0a: u32
  if (data?.cbStructureLength !== undefined) view.setUint32(10, Number(data.cbStructureLength), true);
  // 0x0e: u32
  if (data?.ClientProcess !== undefined) view.setUint32(14, Number(data.ClientProcess), true);
  // 0x12: u32
  if (data?.ClientThread !== undefined) view.setUint32(18, Number(data.ClientThread), true);
  // 0x16: pad2
  // 0x18: pointer
  if (data?.LogonId !== undefined) view.setBigUint64(24, data.LogonId === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.LogonId))), true);
  // 0x20: pointer
  if (data?.ClientToken !== undefined) view.setBigUint64(32, data.ClientToken === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.ClientToken))), true);
  // 0x28: u32
  if (data?.SessionId !== undefined) view.setUint32(40, Number(data.SessionId), true);
  // 0x2c: pad4
  // 0x30: pointer
  if (data?.ModifiedId !== undefined) view.setBigUint64(48, data.ModifiedId === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.ModifiedId))), true);
  // 0x38: u32
  if (data?.fCredentials !== undefined) view.setUint32(56, Number(data.fCredentials), true);
  // 0x3c: u32
  if (data?.Flags !== undefined) view.setUint32(60, Number(data.Flags), true);
  // 0x40: pointer
  if (data?.PrincipalName !== undefined) view.setBigUint64(64, data.PrincipalName === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.PrincipalName))), true);
  // 0x48: pointer
  if (data?.PackageList !== undefined) view.setBigUint64(72, data.PackageList === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.PackageList))), true);
  // 0x50: pointer
  if (data?.MarshaledSuppliedCreds !== undefined) view.setBigUint64(80, data.MarshaledSuppliedCreds === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.MarshaledSuppliedCreds))), true);
  return buf;
}

export class SECPKG_CREDENTIALView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u64
  get Version(): Deno.PointerValue {
    return Number(this.view.getBigUint64(0, true));
  }

  // 0x08: u16
  get cbHeaderLength(): number {
    return this.view.getUint16(8, true);
  }

  // 0x0a: u32
  get cbStructureLength(): number {
    return this.view.getUint32(10, true);
  }

  // 0x0e: u32
  get ClientProcess(): number {
    return this.view.getUint32(14, true);
  }

  // 0x12: u32
  get ClientThread(): number {
    return this.view.getUint32(18, true);
  }

  // 0x16: pad2

  // 0x18: pointer
  get LogonId(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(24, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x20: pointer
  get ClientToken(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(32, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x28: u32
  get SessionId(): number {
    return this.view.getUint32(40, true);
  }

  // 0x2c: pad4

  // 0x30: pointer
  get ModifiedId(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(48, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x38: u32
  get fCredentials(): number {
    return this.view.getUint32(56, true);
  }

  // 0x3c: u32
  get Flags(): number {
    return this.view.getUint32(60, true);
  }

  // 0x40: pointer
  get PrincipalName(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(64, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x48: pointer
  get PackageList(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(72, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x50: pointer
  get MarshaledSuppliedCreds(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(80, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: u64
  set Version(value: Deno.PointerValue) {
    this.view.setBigUint64(0, BigInt(value), true);
  }

  // 0x08: u16
  set cbHeaderLength(value: number) {
    this.view.setUint16(8, value, true);
  }

  // 0x0a: u32
  set cbStructureLength(value: number) {
    this.view.setUint32(10, value, true);
  }

  // 0x0e: u32
  set ClientProcess(value: number) {
    this.view.setUint32(14, value, true);
  }

  // 0x12: u32
  set ClientThread(value: number) {
    this.view.setUint32(18, value, true);
  }

  // 0x16: pad2

  // 0x18: pointer
  set LogonId(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(24, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x20: pointer
  set ClientToken(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(32, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x28: u32
  set SessionId(value: number) {
    this.view.setUint32(40, value, true);
  }

  // 0x2c: pad4

  // 0x30: pointer
  set ModifiedId(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(48, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x38: u32
  set fCredentials(value: number) {
    this.view.setUint32(56, value, true);
  }

  // 0x3c: u32
  set Flags(value: number) {
    this.view.setUint32(60, value, true);
  }

  // 0x40: pointer
  set PrincipalName(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(64, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x48: pointer
  set PackageList(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(72, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x50: pointer
  set MarshaledSuppliedCreds(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(80, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.Security.Authentication.Identity.SECPKG_SUPPLEMENTAL_CRED_ARRAY (size: 16)
 */
export interface SECPKG_SUPPLEMENTAL_CRED_ARRAY {
  /** u32 */
  CredentialCount: number;
  /** array */
  Credentials: Deno.PointerValue;
}

export const sizeofSECPKG_SUPPLEMENTAL_CRED_ARRAY = 16;

export function allocSECPKG_SUPPLEMENTAL_CRED_ARRAY(data?: Partial<SECPKG_SUPPLEMENTAL_CRED_ARRAY>): Uint8Array {
  const buf = new Uint8Array(sizeofSECPKG_SUPPLEMENTAL_CRED_ARRAY);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.CredentialCount !== undefined) view.setUint32(0, Number(data.CredentialCount), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.Credentials !== undefined) view.setBigUint64(8, data.Credentials === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.Credentials))), true);
  return buf;
}

export class SECPKG_SUPPLEMENTAL_CRED_ARRAYView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get CredentialCount(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  get Credentials(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: u32
  set CredentialCount(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  set Credentials(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.Security.Authentication.Identity.SECPKG_SURROGATE_LOGON_ENTRY (size: 16)
 */
export interface SECPKG_SURROGATE_LOGON_ENTRY {
  /** System.Guid */
  Type: Uint8Array | Deno.PointerValue;
  /** ptr */
  Data: Deno.PointerValue | Uint8Array;
}

export const sizeofSECPKG_SURROGATE_LOGON_ENTRY = 16;

export function allocSECPKG_SURROGATE_LOGON_ENTRY(data?: Partial<SECPKG_SURROGATE_LOGON_ENTRY>): Uint8Array {
  const buf = new Uint8Array(sizeofSECPKG_SURROGATE_LOGON_ENTRY);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.Type !== undefined) view.setBigUint64(0, data.Type === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.Type))), true);
  // 0x08: pointer
  if (data?.Data !== undefined) view.setBigUint64(8, data.Data === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.Data))), true);
  return buf;
}

export class SECPKG_SURROGATE_LOGON_ENTRYView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get Type(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(0, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x08: pointer
  get Data(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: pointer
  set Type(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(0, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x08: pointer
  set Data(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.Security.Authentication.Identity.SECPKG_SURROGATE_LOGON (size: 32)
 */
export interface SECPKG_SURROGATE_LOGON {
  /** u32 */
  Version: number;
  /** Windows.Win32.Foundation.LUID */
  SurrogateLogonID: Uint8Array | Deno.PointerValue;
  /** u32 */
  EntryCount: number;
  /** ptr */
  Entries: Deno.PointerValue | Uint8Array;
}

export const sizeofSECPKG_SURROGATE_LOGON = 32;

export function allocSECPKG_SURROGATE_LOGON(data?: Partial<SECPKG_SURROGATE_LOGON>): Uint8Array {
  const buf = new Uint8Array(sizeofSECPKG_SURROGATE_LOGON);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.Version !== undefined) view.setUint32(0, Number(data.Version), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.SurrogateLogonID !== undefined) view.setBigUint64(8, data.SurrogateLogonID === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.SurrogateLogonID))), true);
  // 0x10: u32
  if (data?.EntryCount !== undefined) view.setUint32(16, Number(data.EntryCount), true);
  // 0x14: pad4
  // 0x18: pointer
  if (data?.Entries !== undefined) view.setBigUint64(24, data.Entries === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.Entries))), true);
  return buf;
}

export class SECPKG_SURROGATE_LOGONView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get Version(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  get SurrogateLogonID(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x10: u32
  get EntryCount(): number {
    return this.view.getUint32(16, true);
  }

  // 0x14: pad4

  // 0x18: pointer
  get Entries(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(24, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: u32
  set Version(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  set SurrogateLogonID(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x10: u32
  set EntryCount(value: number) {
    this.view.setUint32(16, value, true);
  }

  // 0x14: pad4

  // 0x18: pointer
  set Entries(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(24, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.Security.Authentication.Identity.SECPKG_PRIMARY_CRED (size: 112)
 */
export interface SECPKG_PRIMARY_CRED {
  /** Windows.Win32.Foundation.LUID */
  LogonId: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.Foundation.UNICODE_STRING */
  DownlevelName: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.Foundation.UNICODE_STRING */
  DomainName: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.Foundation.UNICODE_STRING */
  Password: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.Foundation.UNICODE_STRING */
  OldPassword: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.Foundation.PSID */
  UserSid: Uint8Array | Deno.PointerValue;
  /** u32 */
  Flags: number;
  /** Windows.Win32.Foundation.UNICODE_STRING */
  DnsDomainName: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.Foundation.UNICODE_STRING */
  Upn: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.Foundation.UNICODE_STRING */
  LogonServer: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.Foundation.UNICODE_STRING */
  Spare1: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.Foundation.UNICODE_STRING */
  Spare2: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.Foundation.UNICODE_STRING */
  Spare3: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.Foundation.UNICODE_STRING */
  Spare4: Uint8Array | Deno.PointerValue;
}

export const sizeofSECPKG_PRIMARY_CRED = 112;

export function allocSECPKG_PRIMARY_CRED(data?: Partial<SECPKG_PRIMARY_CRED>): Uint8Array {
  const buf = new Uint8Array(sizeofSECPKG_PRIMARY_CRED);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.LogonId !== undefined) view.setBigUint64(0, data.LogonId === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.LogonId))), true);
  // 0x08: pointer
  if (data?.DownlevelName !== undefined) view.setBigUint64(8, data.DownlevelName === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.DownlevelName))), true);
  // 0x10: pointer
  if (data?.DomainName !== undefined) view.setBigUint64(16, data.DomainName === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.DomainName))), true);
  // 0x18: pointer
  if (data?.Password !== undefined) view.setBigUint64(24, data.Password === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.Password))), true);
  // 0x20: pointer
  if (data?.OldPassword !== undefined) view.setBigUint64(32, data.OldPassword === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.OldPassword))), true);
  // 0x28: pointer
  if (data?.UserSid !== undefined) view.setBigUint64(40, data.UserSid === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.UserSid))), true);
  // 0x30: u32
  if (data?.Flags !== undefined) view.setUint32(48, Number(data.Flags), true);
  // 0x34: pad4
  // 0x38: pointer
  if (data?.DnsDomainName !== undefined) view.setBigUint64(56, data.DnsDomainName === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.DnsDomainName))), true);
  // 0x40: pointer
  if (data?.Upn !== undefined) view.setBigUint64(64, data.Upn === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.Upn))), true);
  // 0x48: pointer
  if (data?.LogonServer !== undefined) view.setBigUint64(72, data.LogonServer === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.LogonServer))), true);
  // 0x50: pointer
  if (data?.Spare1 !== undefined) view.setBigUint64(80, data.Spare1 === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.Spare1))), true);
  // 0x58: pointer
  if (data?.Spare2 !== undefined) view.setBigUint64(88, data.Spare2 === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.Spare2))), true);
  // 0x60: pointer
  if (data?.Spare3 !== undefined) view.setBigUint64(96, data.Spare3 === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.Spare3))), true);
  // 0x68: pointer
  if (data?.Spare4 !== undefined) view.setBigUint64(104, data.Spare4 === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.Spare4))), true);
  return buf;
}

export class SECPKG_PRIMARY_CREDView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get LogonId(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(0, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x08: pointer
  get DownlevelName(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x10: pointer
  get DomainName(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(16, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x18: pointer
  get Password(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(24, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x20: pointer
  get OldPassword(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(32, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x28: pointer
  get UserSid(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(40, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x30: u32
  get Flags(): number {
    return this.view.getUint32(48, true);
  }

  // 0x34: pad4

  // 0x38: pointer
  get DnsDomainName(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(56, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x40: pointer
  get Upn(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(64, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x48: pointer
  get LogonServer(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(72, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x50: pointer
  get Spare1(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(80, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x58: pointer
  get Spare2(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(88, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x60: pointer
  get Spare3(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(96, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x68: pointer
  get Spare4(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(104, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: pointer
  set LogonId(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(0, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x08: pointer
  set DownlevelName(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x10: pointer
  set DomainName(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(16, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x18: pointer
  set Password(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(24, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x20: pointer
  set OldPassword(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(32, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x28: pointer
  set UserSid(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(40, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x30: u32
  set Flags(value: number) {
    this.view.setUint32(48, value, true);
  }

  // 0x34: pad4

  // 0x38: pointer
  set DnsDomainName(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(56, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x40: pointer
  set Upn(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(64, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x48: pointer
  set LogonServer(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(72, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x50: pointer
  set Spare1(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(80, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x58: pointer
  set Spare2(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(88, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x60: pointer
  set Spare3(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(96, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x68: pointer
  set Spare4(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(104, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.Security.Authentication.Identity.SECPKG_PRIMARY_CRED_EX (size: 136)
 */
export interface SECPKG_PRIMARY_CRED_EX {
  /** Windows.Win32.Foundation.LUID */
  LogonId: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.Foundation.UNICODE_STRING */
  DownlevelName: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.Foundation.UNICODE_STRING */
  DomainName: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.Foundation.UNICODE_STRING */
  Password: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.Foundation.UNICODE_STRING */
  OldPassword: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.Foundation.PSID */
  UserSid: Uint8Array | Deno.PointerValue;
  /** u32 */
  Flags: number;
  /** Windows.Win32.Foundation.UNICODE_STRING */
  DnsDomainName: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.Foundation.UNICODE_STRING */
  Upn: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.Foundation.UNICODE_STRING */
  LogonServer: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.Foundation.UNICODE_STRING */
  Spare1: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.Foundation.UNICODE_STRING */
  Spare2: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.Foundation.UNICODE_STRING */
  Spare3: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.Foundation.UNICODE_STRING */
  Spare4: Uint8Array | Deno.PointerValue;
  /** usize */
  PackageId: Deno.PointerValue;
  /** Windows.Win32.Foundation.LUID */
  PrevLogonId: Uint8Array | Deno.PointerValue;
  /** u32 */
  FlagsEx: number;
}

export const sizeofSECPKG_PRIMARY_CRED_EX = 136;

export function allocSECPKG_PRIMARY_CRED_EX(data?: Partial<SECPKG_PRIMARY_CRED_EX>): Uint8Array {
  const buf = new Uint8Array(sizeofSECPKG_PRIMARY_CRED_EX);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.LogonId !== undefined) view.setBigUint64(0, data.LogonId === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.LogonId))), true);
  // 0x08: pointer
  if (data?.DownlevelName !== undefined) view.setBigUint64(8, data.DownlevelName === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.DownlevelName))), true);
  // 0x10: pointer
  if (data?.DomainName !== undefined) view.setBigUint64(16, data.DomainName === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.DomainName))), true);
  // 0x18: pointer
  if (data?.Password !== undefined) view.setBigUint64(24, data.Password === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.Password))), true);
  // 0x20: pointer
  if (data?.OldPassword !== undefined) view.setBigUint64(32, data.OldPassword === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.OldPassword))), true);
  // 0x28: pointer
  if (data?.UserSid !== undefined) view.setBigUint64(40, data.UserSid === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.UserSid))), true);
  // 0x30: u32
  if (data?.Flags !== undefined) view.setUint32(48, Number(data.Flags), true);
  // 0x34: pad4
  // 0x38: pointer
  if (data?.DnsDomainName !== undefined) view.setBigUint64(56, data.DnsDomainName === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.DnsDomainName))), true);
  // 0x40: pointer
  if (data?.Upn !== undefined) view.setBigUint64(64, data.Upn === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.Upn))), true);
  // 0x48: pointer
  if (data?.LogonServer !== undefined) view.setBigUint64(72, data.LogonServer === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.LogonServer))), true);
  // 0x50: pointer
  if (data?.Spare1 !== undefined) view.setBigUint64(80, data.Spare1 === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.Spare1))), true);
  // 0x58: pointer
  if (data?.Spare2 !== undefined) view.setBigUint64(88, data.Spare2 === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.Spare2))), true);
  // 0x60: pointer
  if (data?.Spare3 !== undefined) view.setBigUint64(96, data.Spare3 === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.Spare3))), true);
  // 0x68: pointer
  if (data?.Spare4 !== undefined) view.setBigUint64(104, data.Spare4 === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.Spare4))), true);
  // 0x70: usize
  if (data?.PackageId !== undefined) view.setBigUint64(112, BigInt(data.PackageId), true);
  // 0x78: pointer
  if (data?.PrevLogonId !== undefined) view.setBigUint64(120, data.PrevLogonId === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.PrevLogonId))), true);
  // 0x80: u32
  if (data?.FlagsEx !== undefined) view.setUint32(128, Number(data.FlagsEx), true);
  // 0x84: pad4
  return buf;
}

export class SECPKG_PRIMARY_CRED_EXView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get LogonId(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(0, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x08: pointer
  get DownlevelName(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x10: pointer
  get DomainName(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(16, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x18: pointer
  get Password(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(24, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x20: pointer
  get OldPassword(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(32, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x28: pointer
  get UserSid(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(40, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x30: u32
  get Flags(): number {
    return this.view.getUint32(48, true);
  }

  // 0x34: pad4

  // 0x38: pointer
  get DnsDomainName(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(56, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x40: pointer
  get Upn(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(64, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x48: pointer
  get LogonServer(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(72, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x50: pointer
  get Spare1(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(80, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x58: pointer
  get Spare2(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(88, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x60: pointer
  get Spare3(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(96, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x68: pointer
  get Spare4(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(104, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x70: usize
  get PackageId(): Deno.PointerValue {
    return Number(this.view.getBigUint64(112, true));
  }

  // 0x78: pointer
  get PrevLogonId(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(120, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x80: u32
  get FlagsEx(): number {
    return this.view.getUint32(128, true);
  }

  // 0x84: pad4

  // 0x00: pointer
  set LogonId(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(0, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x08: pointer
  set DownlevelName(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x10: pointer
  set DomainName(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(16, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x18: pointer
  set Password(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(24, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x20: pointer
  set OldPassword(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(32, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x28: pointer
  set UserSid(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(40, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x30: u32
  set Flags(value: number) {
    this.view.setUint32(48, value, true);
  }

  // 0x34: pad4

  // 0x38: pointer
  set DnsDomainName(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(56, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x40: pointer
  set Upn(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(64, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x48: pointer
  set LogonServer(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(72, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x50: pointer
  set Spare1(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(80, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x58: pointer
  set Spare2(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(88, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x60: pointer
  set Spare3(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(96, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x68: pointer
  set Spare4(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(104, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x70: usize
  set PackageId(value: Deno.PointerValue) {
    this.view.setBigUint64(112, BigInt(value), true);
  }

  // 0x78: pointer
  set PrevLogonId(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(120, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x80: u32
  set FlagsEx(value: number) {
    this.view.setUint32(128, value, true);
  }

  // 0x84: pad4
}

/**
 * Windows.Win32.Security.Authentication.Identity.SECPKG_PARAMETERS (size: 48)
 */
export interface SECPKG_PARAMETERS {
  /** u32 */
  Version: number;
  /** u32 */
  MachineState: number;
  /** u32 */
  SetupMode: number;
  /** Windows.Win32.Foundation.PSID */
  DomainSid: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.Foundation.UNICODE_STRING */
  DomainName: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.Foundation.UNICODE_STRING */
  DnsDomainName: Uint8Array | Deno.PointerValue;
  /** System.Guid */
  DomainGuid: Uint8Array | Deno.PointerValue;
}

export const sizeofSECPKG_PARAMETERS = 48;

export function allocSECPKG_PARAMETERS(data?: Partial<SECPKG_PARAMETERS>): Uint8Array {
  const buf = new Uint8Array(sizeofSECPKG_PARAMETERS);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.Version !== undefined) view.setUint32(0, Number(data.Version), true);
  // 0x04: u32
  if (data?.MachineState !== undefined) view.setUint32(4, Number(data.MachineState), true);
  // 0x08: u32
  if (data?.SetupMode !== undefined) view.setUint32(8, Number(data.SetupMode), true);
  // 0x0c: pad4
  // 0x10: pointer
  if (data?.DomainSid !== undefined) view.setBigUint64(16, data.DomainSid === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.DomainSid))), true);
  // 0x18: pointer
  if (data?.DomainName !== undefined) view.setBigUint64(24, data.DomainName === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.DomainName))), true);
  // 0x20: pointer
  if (data?.DnsDomainName !== undefined) view.setBigUint64(32, data.DnsDomainName === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.DnsDomainName))), true);
  // 0x28: pointer
  if (data?.DomainGuid !== undefined) view.setBigUint64(40, data.DomainGuid === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.DomainGuid))), true);
  return buf;
}

export class SECPKG_PARAMETERSView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get Version(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: u32
  get MachineState(): number {
    return this.view.getUint32(4, true);
  }

  // 0x08: u32
  get SetupMode(): number {
    return this.view.getUint32(8, true);
  }

  // 0x0c: pad4

  // 0x10: pointer
  get DomainSid(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(16, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x18: pointer
  get DomainName(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(24, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x20: pointer
  get DnsDomainName(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(32, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x28: pointer
  get DomainGuid(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(40, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: u32
  set Version(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: u32
  set MachineState(value: number) {
    this.view.setUint32(4, value, true);
  }

  // 0x08: u32
  set SetupMode(value: number) {
    this.view.setUint32(8, value, true);
  }

  // 0x0c: pad4

  // 0x10: pointer
  set DomainSid(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(16, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x18: pointer
  set DomainName(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(24, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x20: pointer
  set DnsDomainName(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(32, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x28: pointer
  set DomainGuid(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(40, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.Security.Authentication.Identity.SECPKG_GSS_INFO (size: 16)
 */
export interface SECPKG_GSS_INFO {
  /** u32 */
  EncodedIdLength: number;
  /** array */
  EncodedId: Deno.PointerValue;
}

export const sizeofSECPKG_GSS_INFO = 16;

export function allocSECPKG_GSS_INFO(data?: Partial<SECPKG_GSS_INFO>): Uint8Array {
  const buf = new Uint8Array(sizeofSECPKG_GSS_INFO);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.EncodedIdLength !== undefined) view.setUint32(0, Number(data.EncodedIdLength), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.EncodedId !== undefined) view.setBigUint64(8, data.EncodedId === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.EncodedId))), true);
  return buf;
}

export class SECPKG_GSS_INFOView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get EncodedIdLength(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  get EncodedId(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: u32
  set EncodedIdLength(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  set EncodedId(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.Security.Authentication.Identity.SECPKG_CONTEXT_THUNKS (size: 16)
 */
export interface SECPKG_CONTEXT_THUNKS {
  /** u32 */
  InfoLevelCount: number;
  /** array */
  Levels: Deno.PointerValue;
}

export const sizeofSECPKG_CONTEXT_THUNKS = 16;

export function allocSECPKG_CONTEXT_THUNKS(data?: Partial<SECPKG_CONTEXT_THUNKS>): Uint8Array {
  const buf = new Uint8Array(sizeofSECPKG_CONTEXT_THUNKS);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.InfoLevelCount !== undefined) view.setUint32(0, Number(data.InfoLevelCount), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.Levels !== undefined) view.setBigUint64(8, data.Levels === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.Levels))), true);
  return buf;
}

export class SECPKG_CONTEXT_THUNKSView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get InfoLevelCount(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  get Levels(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: u32
  set InfoLevelCount(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  set Levels(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.Security.Authentication.Identity.SECPKG_MUTUAL_AUTH_LEVEL (size: 8)
 */
export interface SECPKG_MUTUAL_AUTH_LEVEL {
  /** u32 */
  MutualAuthLevel: number;
}

export const sizeofSECPKG_MUTUAL_AUTH_LEVEL = 8;

export function allocSECPKG_MUTUAL_AUTH_LEVEL(data?: Partial<SECPKG_MUTUAL_AUTH_LEVEL>): Uint8Array {
  const buf = new Uint8Array(sizeofSECPKG_MUTUAL_AUTH_LEVEL);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.MutualAuthLevel !== undefined) view.setUint32(0, Number(data.MutualAuthLevel), true);
  // 0x04: pad4
  return buf;
}

export class SECPKG_MUTUAL_AUTH_LEVELView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get MutualAuthLevel(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: pad4

  // 0x00: u32
  set MutualAuthLevel(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: pad4
}

/**
 * Windows.Win32.Security.Authentication.Identity.SECPKG_WOW_CLIENT_DLL (size: 8)
 */
export interface SECPKG_WOW_CLIENT_DLL {
  /** Windows.Win32.Foundation.UNICODE_STRING */
  WowClientDllPath: Uint8Array | Deno.PointerValue;
}

export const sizeofSECPKG_WOW_CLIENT_DLL = 8;

export function allocSECPKG_WOW_CLIENT_DLL(data?: Partial<SECPKG_WOW_CLIENT_DLL>): Uint8Array {
  const buf = new Uint8Array(sizeofSECPKG_WOW_CLIENT_DLL);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.WowClientDllPath !== undefined) view.setBigUint64(0, data.WowClientDllPath === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.WowClientDllPath))), true);
  return buf;
}

export class SECPKG_WOW_CLIENT_DLLView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get WowClientDllPath(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(0, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: pointer
  set WowClientDllPath(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(0, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.Security.Authentication.Identity.SECPKG_SERIALIZED_OID (size: 16)
 */
export interface SECPKG_SERIALIZED_OID {
  /** u32 */
  OidLength: number;
  /** u32 */
  OidAttributes: number;
  /** array */
  OidValue: Deno.PointerValue;
}

export const sizeofSECPKG_SERIALIZED_OID = 16;

export function allocSECPKG_SERIALIZED_OID(data?: Partial<SECPKG_SERIALIZED_OID>): Uint8Array {
  const buf = new Uint8Array(sizeofSECPKG_SERIALIZED_OID);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.OidLength !== undefined) view.setUint32(0, Number(data.OidLength), true);
  // 0x04: u32
  if (data?.OidAttributes !== undefined) view.setUint32(4, Number(data.OidAttributes), true);
  // 0x08: pointer
  if (data?.OidValue !== undefined) view.setBigUint64(8, data.OidValue === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.OidValue))), true);
  return buf;
}

export class SECPKG_SERIALIZED_OIDView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get OidLength(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: u32
  get OidAttributes(): number {
    return this.view.getUint32(4, true);
  }

  // 0x08: pointer
  get OidValue(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: u32
  set OidLength(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: u32
  set OidAttributes(value: number) {
    this.view.setUint32(4, value, true);
  }

  // 0x08: pointer
  set OidValue(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.Security.Authentication.Identity.SECPKG_EXTRA_OIDS (size: 16)
 */
export interface SECPKG_EXTRA_OIDS {
  /** u32 */
  OidCount: number;
  /** array */
  Oids: Deno.PointerValue;
}

export const sizeofSECPKG_EXTRA_OIDS = 16;

export function allocSECPKG_EXTRA_OIDS(data?: Partial<SECPKG_EXTRA_OIDS>): Uint8Array {
  const buf = new Uint8Array(sizeofSECPKG_EXTRA_OIDS);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.OidCount !== undefined) view.setUint32(0, Number(data.OidCount), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.Oids !== undefined) view.setBigUint64(8, data.Oids === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.Oids))), true);
  return buf;
}

export class SECPKG_EXTRA_OIDSView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get OidCount(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  get Oids(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: u32
  set OidCount(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  set Oids(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.Security.Authentication.Identity.SECPKG_NEGO2_INFO (size: 16)
 */
export interface SECPKG_NEGO2_INFO {
  /** array */
  AuthScheme: Deno.PointerValue;
  /** u32 */
  PackageFlags: number;
}

export const sizeofSECPKG_NEGO2_INFO = 16;

export function allocSECPKG_NEGO2_INFO(data?: Partial<SECPKG_NEGO2_INFO>): Uint8Array {
  const buf = new Uint8Array(sizeofSECPKG_NEGO2_INFO);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.AuthScheme !== undefined) view.setBigUint64(0, data.AuthScheme === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.AuthScheme))), true);
  // 0x08: u32
  if (data?.PackageFlags !== undefined) view.setUint32(8, Number(data.PackageFlags), true);
  // 0x0c: pad4
  return buf;
}

export class SECPKG_NEGO2_INFOView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get AuthScheme(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(0, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x08: u32
  get PackageFlags(): number {
    return this.view.getUint32(8, true);
  }

  // 0x0c: pad4

  // 0x00: pointer
  set AuthScheme(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(0, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x08: u32
  set PackageFlags(value: number) {
    this.view.setUint32(8, value, true);
  }

  // 0x0c: pad4
}

/**
 * Windows.Win32.Foundation.SYSTEMTIME (size: 16)
 */
export interface SYSTEMTIME {
  /** u16 */
  wYear: number;
  /** u16 */
  wMonth: number;
  /** u16 */
  wDayOfWeek: number;
  /** u16 */
  wDay: number;
  /** u16 */
  wHour: number;
  /** u16 */
  wMinute: number;
  /** u16 */
  wSecond: number;
  /** u16 */
  wMilliseconds: number;
}

export const sizeofSYSTEMTIME = 16;

export function allocSYSTEMTIME(data?: Partial<SYSTEMTIME>): Uint8Array {
  const buf = new Uint8Array(sizeofSYSTEMTIME);
  const view = new DataView(buf.buffer);
  // 0x00: u16
  if (data?.wYear !== undefined) view.setUint16(0, Number(data.wYear), true);
  // 0x02: u16
  if (data?.wMonth !== undefined) view.setUint16(2, Number(data.wMonth), true);
  // 0x04: u16
  if (data?.wDayOfWeek !== undefined) view.setUint16(4, Number(data.wDayOfWeek), true);
  // 0x06: u16
  if (data?.wDay !== undefined) view.setUint16(6, Number(data.wDay), true);
  // 0x08: u16
  if (data?.wHour !== undefined) view.setUint16(8, Number(data.wHour), true);
  // 0x0a: u16
  if (data?.wMinute !== undefined) view.setUint16(10, Number(data.wMinute), true);
  // 0x0c: u16
  if (data?.wSecond !== undefined) view.setUint16(12, Number(data.wSecond), true);
  // 0x0e: u16
  if (data?.wMilliseconds !== undefined) view.setUint16(14, Number(data.wMilliseconds), true);
  return buf;
}

export class SYSTEMTIMEView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u16
  get wYear(): number {
    return this.view.getUint16(0, true);
  }

  // 0x02: u16
  get wMonth(): number {
    return this.view.getUint16(2, true);
  }

  // 0x04: u16
  get wDayOfWeek(): number {
    return this.view.getUint16(4, true);
  }

  // 0x06: u16
  get wDay(): number {
    return this.view.getUint16(6, true);
  }

  // 0x08: u16
  get wHour(): number {
    return this.view.getUint16(8, true);
  }

  // 0x0a: u16
  get wMinute(): number {
    return this.view.getUint16(10, true);
  }

  // 0x0c: u16
  get wSecond(): number {
    return this.view.getUint16(12, true);
  }

  // 0x0e: u16
  get wMilliseconds(): number {
    return this.view.getUint16(14, true);
  }

  // 0x00: u16
  set wYear(value: number) {
    this.view.setUint16(0, value, true);
  }

  // 0x02: u16
  set wMonth(value: number) {
    this.view.setUint16(2, value, true);
  }

  // 0x04: u16
  set wDayOfWeek(value: number) {
    this.view.setUint16(4, value, true);
  }

  // 0x06: u16
  set wDay(value: number) {
    this.view.setUint16(6, value, true);
  }

  // 0x08: u16
  set wHour(value: number) {
    this.view.setUint16(8, value, true);
  }

  // 0x0a: u16
  set wMinute(value: number) {
    this.view.setUint16(10, value, true);
  }

  // 0x0c: u16
  set wSecond(value: number) {
    this.view.setUint16(12, value, true);
  }

  // 0x0e: u16
  set wMilliseconds(value: number) {
    this.view.setUint16(14, value, true);
  }
}

/**
 * Windows.Win32.Storage.FileSystem.NTMS_DRIVEINFORMATIONA (size: 96)
 */
export interface NTMS_DRIVEINFORMATIONA {
  /** u32 */
  Number: number;
  /** Windows.Win32.Storage.FileSystem.NtmsDriveState */
  State: NtmsDriveState;
  /** System.Guid */
  DriveType: Uint8Array | Deno.PointerValue;
  /** array */
  szDeviceName: Deno.PointerValue;
  /** array */
  szSerialNumber: Deno.PointerValue;
  /** array */
  szRevision: Deno.PointerValue;
  /** u16 */
  ScsiPort: number;
  /** u16 */
  ScsiBus: number;
  /** u16 */
  ScsiTarget: number;
  /** u16 */
  ScsiLun: number;
  /** u32 */
  dwMountCount: number;
  /** Windows.Win32.Foundation.SYSTEMTIME */
  LastCleanedTs: Uint8Array | Deno.PointerValue;
  /** System.Guid */
  SavedPartitionId: Uint8Array | Deno.PointerValue;
  /** System.Guid */
  Library: Uint8Array | Deno.PointerValue;
  /** System.Guid */
  Reserved: Uint8Array | Deno.PointerValue;
  /** u32 */
  dwDeferDismountDelay: number;
}

export const sizeofNTMS_DRIVEINFORMATIONA = 96;

export function allocNTMS_DRIVEINFORMATIONA(data?: Partial<NTMS_DRIVEINFORMATIONA>): Uint8Array {
  const buf = new Uint8Array(sizeofNTMS_DRIVEINFORMATIONA);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.Number !== undefined) view.setUint32(0, Number(data.Number), true);
  // 0x04: i32
  if (data?.State !== undefined) view.setInt32(4, Number(data.State), true);
  // 0x08: pointer
  if (data?.DriveType !== undefined) view.setBigUint64(8, data.DriveType === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.DriveType))), true);
  // 0x10: pointer
  if (data?.szDeviceName !== undefined) view.setBigUint64(16, data.szDeviceName === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.szDeviceName))), true);
  // 0x18: pointer
  if (data?.szSerialNumber !== undefined) view.setBigUint64(24, data.szSerialNumber === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.szSerialNumber))), true);
  // 0x20: pointer
  if (data?.szRevision !== undefined) view.setBigUint64(32, data.szRevision === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.szRevision))), true);
  // 0x28: u16
  if (data?.ScsiPort !== undefined) view.setUint16(40, Number(data.ScsiPort), true);
  // 0x2a: u16
  if (data?.ScsiBus !== undefined) view.setUint16(42, Number(data.ScsiBus), true);
  // 0x2c: u16
  if (data?.ScsiTarget !== undefined) view.setUint16(44, Number(data.ScsiTarget), true);
  // 0x2e: u16
  if (data?.ScsiLun !== undefined) view.setUint16(46, Number(data.ScsiLun), true);
  // 0x30: u32
  if (data?.dwMountCount !== undefined) view.setUint32(48, Number(data.dwMountCount), true);
  // 0x34: pad4
  // 0x38: pointer
  if (data?.LastCleanedTs !== undefined) view.setBigUint64(56, data.LastCleanedTs === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.LastCleanedTs))), true);
  // 0x40: pointer
  if (data?.SavedPartitionId !== undefined) view.setBigUint64(64, data.SavedPartitionId === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.SavedPartitionId))), true);
  // 0x48: pointer
  if (data?.Library !== undefined) view.setBigUint64(72, data.Library === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.Library))), true);
  // 0x50: pointer
  if (data?.Reserved !== undefined) view.setBigUint64(80, data.Reserved === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.Reserved))), true);
  // 0x58: u32
  if (data?.dwDeferDismountDelay !== undefined) view.setUint32(88, Number(data.dwDeferDismountDelay), true);
  // 0x5c: pad4
  return buf;
}

export class NTMS_DRIVEINFORMATIONAView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get Number(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: i32
  get State(): number {
    return this.view.getInt32(4, true);
  }

  // 0x08: pointer
  get DriveType(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x10: pointer
  get szDeviceName(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(16, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x18: pointer
  get szSerialNumber(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(24, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x20: pointer
  get szRevision(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(32, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x28: u16
  get ScsiPort(): number {
    return this.view.getUint16(40, true);
  }

  // 0x2a: u16
  get ScsiBus(): number {
    return this.view.getUint16(42, true);
  }

  // 0x2c: u16
  get ScsiTarget(): number {
    return this.view.getUint16(44, true);
  }

  // 0x2e: u16
  get ScsiLun(): number {
    return this.view.getUint16(46, true);
  }

  // 0x30: u32
  get dwMountCount(): number {
    return this.view.getUint32(48, true);
  }

  // 0x34: pad4

  // 0x38: pointer
  get LastCleanedTs(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(56, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x40: pointer
  get SavedPartitionId(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(64, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x48: pointer
  get Library(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(72, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x50: pointer
  get Reserved(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(80, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x58: u32
  get dwDeferDismountDelay(): number {
    return this.view.getUint32(88, true);
  }

  // 0x5c: pad4

  // 0x00: u32
  set Number(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: i32
  set State(value: number) {
    this.view.setInt32(4, value, true);
  }

  // 0x08: pointer
  set DriveType(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x10: pointer
  set szDeviceName(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(16, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x18: pointer
  set szSerialNumber(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(24, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x20: pointer
  set szRevision(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(32, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x28: u16
  set ScsiPort(value: number) {
    this.view.setUint16(40, value, true);
  }

  // 0x2a: u16
  set ScsiBus(value: number) {
    this.view.setUint16(42, value, true);
  }

  // 0x2c: u16
  set ScsiTarget(value: number) {
    this.view.setUint16(44, value, true);
  }

  // 0x2e: u16
  set ScsiLun(value: number) {
    this.view.setUint16(46, value, true);
  }

  // 0x30: u32
  set dwMountCount(value: number) {
    this.view.setUint32(48, value, true);
  }

  // 0x34: pad4

  // 0x38: pointer
  set LastCleanedTs(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(56, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x40: pointer
  set SavedPartitionId(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(64, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x48: pointer
  set Library(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(72, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x50: pointer
  set Reserved(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(80, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x58: u32
  set dwDeferDismountDelay(value: number) {
    this.view.setUint32(88, value, true);
  }

  // 0x5c: pad4
}

/**
 * Windows.Win32.Storage.FileSystem.NTMS_DRIVETYPEINFORMATIONA (size: 24)
 */
export interface NTMS_DRIVETYPEINFORMATIONA {
  /** array */
  szVendor: Deno.PointerValue;
  /** array */
  szProduct: Deno.PointerValue;
  /** u32 */
  NumberOfHeads: number;
  /** Windows.Win32.Storage.FileSystem.FILE_DEVICE_TYPE */
  DeviceType: FILE_DEVICE_TYPE;
}

export const sizeofNTMS_DRIVETYPEINFORMATIONA = 24;

export function allocNTMS_DRIVETYPEINFORMATIONA(data?: Partial<NTMS_DRIVETYPEINFORMATIONA>): Uint8Array {
  const buf = new Uint8Array(sizeofNTMS_DRIVETYPEINFORMATIONA);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.szVendor !== undefined) view.setBigUint64(0, data.szVendor === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.szVendor))), true);
  // 0x08: pointer
  if (data?.szProduct !== undefined) view.setBigUint64(8, data.szProduct === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.szProduct))), true);
  // 0x10: u32
  if (data?.NumberOfHeads !== undefined) view.setUint32(16, Number(data.NumberOfHeads), true);
  // 0x14: u32
  if (data?.DeviceType !== undefined) view.setUint32(20, Number(data.DeviceType), true);
  return buf;
}

export class NTMS_DRIVETYPEINFORMATIONAView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get szVendor(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(0, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x08: pointer
  get szProduct(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x10: u32
  get NumberOfHeads(): number {
    return this.view.getUint32(16, true);
  }

  // 0x14: u32
  get DeviceType(): number {
    return this.view.getUint32(20, true);
  }

  // 0x00: pointer
  set szVendor(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(0, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x08: pointer
  set szProduct(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x10: u32
  set NumberOfHeads(value: number) {
    this.view.setUint32(16, value, true);
  }

  // 0x14: u32
  set DeviceType(value: number) {
    this.view.setUint32(20, value, true);
  }
}

export type BOOL = number;

/**
 * Windows.Win32.Storage.FileSystem.NTMS_LIBRARYINFORMATION (size: 112)
 */
export interface NTMS_LIBRARYINFORMATION {
  /** Windows.Win32.Storage.FileSystem.NtmsLibraryType */
  LibraryType: NtmsLibraryType;
  /** System.Guid */
  CleanerSlot: Uint8Array | Deno.PointerValue;
  /** System.Guid */
  CleanerSlotDefault: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.Foundation.BOOL */
  LibrarySupportsDriveCleaning: boolean;
  /** Windows.Win32.Foundation.BOOL */
  BarCodeReaderInstalled: boolean;
  /** Windows.Win32.Storage.FileSystem.NtmsInventoryMethod */
  InventoryMethod: NtmsInventoryMethod;
  /** u32 */
  dwCleanerUsesRemaining: number;
  /** u32 */
  FirstDriveNumber: number;
  /** u32 */
  dwNumberOfDrives: number;
  /** u32 */
  FirstSlotNumber: number;
  /** u32 */
  dwNumberOfSlots: number;
  /** u32 */
  FirstDoorNumber: number;
  /** u32 */
  dwNumberOfDoors: number;
  /** u32 */
  FirstPortNumber: number;
  /** u32 */
  dwNumberOfPorts: number;
  /** u32 */
  FirstChangerNumber: number;
  /** u32 */
  dwNumberOfChangers: number;
  /** u32 */
  dwNumberOfMedia: number;
  /** u32 */
  dwNumberOfMediaTypes: number;
  /** u32 */
  dwNumberOfLibRequests: number;
  /** System.Guid */
  Reserved: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.Foundation.BOOL */
  AutoRecovery: boolean;
  /** Windows.Win32.Storage.FileSystem.NtmsLibraryFlags */
  dwFlags: NtmsLibraryFlags;
}

export const sizeofNTMS_LIBRARYINFORMATION = 112;

export function allocNTMS_LIBRARYINFORMATION(data?: Partial<NTMS_LIBRARYINFORMATION>): Uint8Array {
  const buf = new Uint8Array(sizeofNTMS_LIBRARYINFORMATION);
  const view = new DataView(buf.buffer);
  // 0x00: i32
  if (data?.LibraryType !== undefined) view.setInt32(0, Number(data.LibraryType), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.CleanerSlot !== undefined) view.setBigUint64(8, data.CleanerSlot === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.CleanerSlot))), true);
  // 0x10: pointer
  if (data?.CleanerSlotDefault !== undefined) view.setBigUint64(16, data.CleanerSlotDefault === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.CleanerSlotDefault))), true);
  // 0x18: i32
  if (data?.LibrarySupportsDriveCleaning !== undefined) view.setInt32(24, Number(data.LibrarySupportsDriveCleaning), true);
  // 0x1c: i32
  if (data?.BarCodeReaderInstalled !== undefined) view.setInt32(28, Number(data.BarCodeReaderInstalled), true);
  // 0x20: i32
  if (data?.InventoryMethod !== undefined) view.setInt32(32, Number(data.InventoryMethod), true);
  // 0x24: u32
  if (data?.dwCleanerUsesRemaining !== undefined) view.setUint32(36, Number(data.dwCleanerUsesRemaining), true);
  // 0x28: u32
  if (data?.FirstDriveNumber !== undefined) view.setUint32(40, Number(data.FirstDriveNumber), true);
  // 0x2c: u32
  if (data?.dwNumberOfDrives !== undefined) view.setUint32(44, Number(data.dwNumberOfDrives), true);
  // 0x30: u32
  if (data?.FirstSlotNumber !== undefined) view.setUint32(48, Number(data.FirstSlotNumber), true);
  // 0x34: u32
  if (data?.dwNumberOfSlots !== undefined) view.setUint32(52, Number(data.dwNumberOfSlots), true);
  // 0x38: u32
  if (data?.FirstDoorNumber !== undefined) view.setUint32(56, Number(data.FirstDoorNumber), true);
  // 0x3c: u32
  if (data?.dwNumberOfDoors !== undefined) view.setUint32(60, Number(data.dwNumberOfDoors), true);
  // 0x40: u32
  if (data?.FirstPortNumber !== undefined) view.setUint32(64, Number(data.FirstPortNumber), true);
  // 0x44: u32
  if (data?.dwNumberOfPorts !== undefined) view.setUint32(68, Number(data.dwNumberOfPorts), true);
  // 0x48: u32
  if (data?.FirstChangerNumber !== undefined) view.setUint32(72, Number(data.FirstChangerNumber), true);
  // 0x4c: u32
  if (data?.dwNumberOfChangers !== undefined) view.setUint32(76, Number(data.dwNumberOfChangers), true);
  // 0x50: u32
  if (data?.dwNumberOfMedia !== undefined) view.setUint32(80, Number(data.dwNumberOfMedia), true);
  // 0x54: u32
  if (data?.dwNumberOfMediaTypes !== undefined) view.setUint32(84, Number(data.dwNumberOfMediaTypes), true);
  // 0x58: u32
  if (data?.dwNumberOfLibRequests !== undefined) view.setUint32(88, Number(data.dwNumberOfLibRequests), true);
  // 0x5c: pad4
  // 0x60: pointer
  if (data?.Reserved !== undefined) view.setBigUint64(96, data.Reserved === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.Reserved))), true);
  // 0x68: i32
  if (data?.AutoRecovery !== undefined) view.setInt32(104, Number(data.AutoRecovery), true);
  // 0x6c: i32
  if (data?.dwFlags !== undefined) view.setInt32(108, Number(data.dwFlags), true);
  return buf;
}

export class NTMS_LIBRARYINFORMATIONView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: i32
  get LibraryType(): number {
    return this.view.getInt32(0, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  get CleanerSlot(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x10: pointer
  get CleanerSlotDefault(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(16, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x18: i32
  get LibrarySupportsDriveCleaning(): number {
    return this.view.getInt32(24, true);
  }

  // 0x1c: i32
  get BarCodeReaderInstalled(): number {
    return this.view.getInt32(28, true);
  }

  // 0x20: i32
  get InventoryMethod(): number {
    return this.view.getInt32(32, true);
  }

  // 0x24: u32
  get dwCleanerUsesRemaining(): number {
    return this.view.getUint32(36, true);
  }

  // 0x28: u32
  get FirstDriveNumber(): number {
    return this.view.getUint32(40, true);
  }

  // 0x2c: u32
  get dwNumberOfDrives(): number {
    return this.view.getUint32(44, true);
  }

  // 0x30: u32
  get FirstSlotNumber(): number {
    return this.view.getUint32(48, true);
  }

  // 0x34: u32
  get dwNumberOfSlots(): number {
    return this.view.getUint32(52, true);
  }

  // 0x38: u32
  get FirstDoorNumber(): number {
    return this.view.getUint32(56, true);
  }

  // 0x3c: u32
  get dwNumberOfDoors(): number {
    return this.view.getUint32(60, true);
  }

  // 0x40: u32
  get FirstPortNumber(): number {
    return this.view.getUint32(64, true);
  }

  // 0x44: u32
  get dwNumberOfPorts(): number {
    return this.view.getUint32(68, true);
  }

  // 0x48: u32
  get FirstChangerNumber(): number {
    return this.view.getUint32(72, true);
  }

  // 0x4c: u32
  get dwNumberOfChangers(): number {
    return this.view.getUint32(76, true);
  }

  // 0x50: u32
  get dwNumberOfMedia(): number {
    return this.view.getUint32(80, true);
  }

  // 0x54: u32
  get dwNumberOfMediaTypes(): number {
    return this.view.getUint32(84, true);
  }

  // 0x58: u32
  get dwNumberOfLibRequests(): number {
    return this.view.getUint32(88, true);
  }

  // 0x5c: pad4

  // 0x60: pointer
  get Reserved(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(96, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x68: i32
  get AutoRecovery(): number {
    return this.view.getInt32(104, true);
  }

  // 0x6c: i32
  get dwFlags(): number {
    return this.view.getInt32(108, true);
  }

  // 0x00: i32
  set LibraryType(value: number) {
    this.view.setInt32(0, value, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  set CleanerSlot(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x10: pointer
  set CleanerSlotDefault(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(16, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x18: i32
  set LibrarySupportsDriveCleaning(value: number) {
    this.view.setInt32(24, value, true);
  }

  // 0x1c: i32
  set BarCodeReaderInstalled(value: number) {
    this.view.setInt32(28, value, true);
  }

  // 0x20: i32
  set InventoryMethod(value: number) {
    this.view.setInt32(32, value, true);
  }

  // 0x24: u32
  set dwCleanerUsesRemaining(value: number) {
    this.view.setUint32(36, value, true);
  }

  // 0x28: u32
  set FirstDriveNumber(value: number) {
    this.view.setUint32(40, value, true);
  }

  // 0x2c: u32
  set dwNumberOfDrives(value: number) {
    this.view.setUint32(44, value, true);
  }

  // 0x30: u32
  set FirstSlotNumber(value: number) {
    this.view.setUint32(48, value, true);
  }

  // 0x34: u32
  set dwNumberOfSlots(value: number) {
    this.view.setUint32(52, value, true);
  }

  // 0x38: u32
  set FirstDoorNumber(value: number) {
    this.view.setUint32(56, value, true);
  }

  // 0x3c: u32
  set dwNumberOfDoors(value: number) {
    this.view.setUint32(60, value, true);
  }

  // 0x40: u32
  set FirstPortNumber(value: number) {
    this.view.setUint32(64, value, true);
  }

  // 0x44: u32
  set dwNumberOfPorts(value: number) {
    this.view.setUint32(68, value, true);
  }

  // 0x48: u32
  set FirstChangerNumber(value: number) {
    this.view.setUint32(72, value, true);
  }

  // 0x4c: u32
  set dwNumberOfChangers(value: number) {
    this.view.setUint32(76, value, true);
  }

  // 0x50: u32
  set dwNumberOfMedia(value: number) {
    this.view.setUint32(80, value, true);
  }

  // 0x54: u32
  set dwNumberOfMediaTypes(value: number) {
    this.view.setUint32(84, value, true);
  }

  // 0x58: u32
  set dwNumberOfLibRequests(value: number) {
    this.view.setUint32(88, value, true);
  }

  // 0x5c: pad4

  // 0x60: pointer
  set Reserved(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(96, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x68: i32
  set AutoRecovery(value: number) {
    this.view.setInt32(104, value, true);
  }

  // 0x6c: i32
  set dwFlags(value: number) {
    this.view.setInt32(108, value, true);
  }
}

/**
 * Windows.Win32.Storage.FileSystem.NTMS_CHANGERINFORMATIONA (size: 56)
 */
export interface NTMS_CHANGERINFORMATIONA {
  /** u32 */
  Number: number;
  /** System.Guid */
  ChangerType: Uint8Array | Deno.PointerValue;
  /** array */
  szSerialNumber: Deno.PointerValue;
  /** array */
  szRevision: Deno.PointerValue;
  /** array */
  szDeviceName: Deno.PointerValue;
  /** u16 */
  ScsiPort: number;
  /** u16 */
  ScsiBus: number;
  /** u16 */
  ScsiTarget: number;
  /** u16 */
  ScsiLun: number;
  /** System.Guid */
  Library: Uint8Array | Deno.PointerValue;
}

export const sizeofNTMS_CHANGERINFORMATIONA = 56;

export function allocNTMS_CHANGERINFORMATIONA(data?: Partial<NTMS_CHANGERINFORMATIONA>): Uint8Array {
  const buf = new Uint8Array(sizeofNTMS_CHANGERINFORMATIONA);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.Number !== undefined) view.setUint32(0, Number(data.Number), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.ChangerType !== undefined) view.setBigUint64(8, data.ChangerType === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.ChangerType))), true);
  // 0x10: pointer
  if (data?.szSerialNumber !== undefined) view.setBigUint64(16, data.szSerialNumber === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.szSerialNumber))), true);
  // 0x18: pointer
  if (data?.szRevision !== undefined) view.setBigUint64(24, data.szRevision === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.szRevision))), true);
  // 0x20: pointer
  if (data?.szDeviceName !== undefined) view.setBigUint64(32, data.szDeviceName === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.szDeviceName))), true);
  // 0x28: u16
  if (data?.ScsiPort !== undefined) view.setUint16(40, Number(data.ScsiPort), true);
  // 0x2a: u16
  if (data?.ScsiBus !== undefined) view.setUint16(42, Number(data.ScsiBus), true);
  // 0x2c: u16
  if (data?.ScsiTarget !== undefined) view.setUint16(44, Number(data.ScsiTarget), true);
  // 0x2e: u16
  if (data?.ScsiLun !== undefined) view.setUint16(46, Number(data.ScsiLun), true);
  // 0x30: pointer
  if (data?.Library !== undefined) view.setBigUint64(48, data.Library === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.Library))), true);
  return buf;
}

export class NTMS_CHANGERINFORMATIONAView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get Number(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  get ChangerType(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x10: pointer
  get szSerialNumber(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(16, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x18: pointer
  get szRevision(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(24, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x20: pointer
  get szDeviceName(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(32, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x28: u16
  get ScsiPort(): number {
    return this.view.getUint16(40, true);
  }

  // 0x2a: u16
  get ScsiBus(): number {
    return this.view.getUint16(42, true);
  }

  // 0x2c: u16
  get ScsiTarget(): number {
    return this.view.getUint16(44, true);
  }

  // 0x2e: u16
  get ScsiLun(): number {
    return this.view.getUint16(46, true);
  }

  // 0x30: pointer
  get Library(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(48, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: u32
  set Number(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  set ChangerType(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x10: pointer
  set szSerialNumber(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(16, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x18: pointer
  set szRevision(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(24, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x20: pointer
  set szDeviceName(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(32, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x28: u16
  set ScsiPort(value: number) {
    this.view.setUint16(40, value, true);
  }

  // 0x2a: u16
  set ScsiBus(value: number) {
    this.view.setUint16(42, value, true);
  }

  // 0x2c: u16
  set ScsiTarget(value: number) {
    this.view.setUint16(44, value, true);
  }

  // 0x2e: u16
  set ScsiLun(value: number) {
    this.view.setUint16(46, value, true);
  }

  // 0x30: pointer
  set Library(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(48, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.Storage.FileSystem.NTMS_CHANGERTYPEINFORMATIONA (size: 24)
 */
export interface NTMS_CHANGERTYPEINFORMATIONA {
  /** array */
  szVendor: Deno.PointerValue;
  /** array */
  szProduct: Deno.PointerValue;
  /** u32 */
  DeviceType: number;
}

export const sizeofNTMS_CHANGERTYPEINFORMATIONA = 24;

export function allocNTMS_CHANGERTYPEINFORMATIONA(data?: Partial<NTMS_CHANGERTYPEINFORMATIONA>): Uint8Array {
  const buf = new Uint8Array(sizeofNTMS_CHANGERTYPEINFORMATIONA);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.szVendor !== undefined) view.setBigUint64(0, data.szVendor === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.szVendor))), true);
  // 0x08: pointer
  if (data?.szProduct !== undefined) view.setBigUint64(8, data.szProduct === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.szProduct))), true);
  // 0x10: u32
  if (data?.DeviceType !== undefined) view.setUint32(16, Number(data.DeviceType), true);
  // 0x14: pad4
  return buf;
}

export class NTMS_CHANGERTYPEINFORMATIONAView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get szVendor(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(0, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x08: pointer
  get szProduct(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x10: u32
  get DeviceType(): number {
    return this.view.getUint32(16, true);
  }

  // 0x14: pad4

  // 0x00: pointer
  set szVendor(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(0, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x08: pointer
  set szProduct(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x10: u32
  set DeviceType(value: number) {
    this.view.setUint32(16, value, true);
  }

  // 0x14: pad4
}

/**
 * Windows.Win32.Storage.FileSystem.NTMS_STORAGESLOTINFORMATION (size: 16)
 */
export interface NTMS_STORAGESLOTINFORMATION {
  /** u32 */
  Number: number;
  /** u32 */
  State: number;
  /** System.Guid */
  Library: Uint8Array | Deno.PointerValue;
}

export const sizeofNTMS_STORAGESLOTINFORMATION = 16;

export function allocNTMS_STORAGESLOTINFORMATION(data?: Partial<NTMS_STORAGESLOTINFORMATION>): Uint8Array {
  const buf = new Uint8Array(sizeofNTMS_STORAGESLOTINFORMATION);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.Number !== undefined) view.setUint32(0, Number(data.Number), true);
  // 0x04: u32
  if (data?.State !== undefined) view.setUint32(4, Number(data.State), true);
  // 0x08: pointer
  if (data?.Library !== undefined) view.setBigUint64(8, data.Library === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.Library))), true);
  return buf;
}

export class NTMS_STORAGESLOTINFORMATIONView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get Number(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: u32
  get State(): number {
    return this.view.getUint32(4, true);
  }

  // 0x08: pointer
  get Library(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: u32
  set Number(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: u32
  set State(value: number) {
    this.view.setUint32(4, value, true);
  }

  // 0x08: pointer
  set Library(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.Storage.FileSystem.NTMS_IEDOORINFORMATION (size: 24)
 */
export interface NTMS_IEDOORINFORMATION {
  /** u32 */
  Number: number;
  /** Windows.Win32.Storage.FileSystem.NtmsDoorState */
  State: NtmsDoorState;
  /** u16 */
  MaxOpenSecs: number;
  /** System.Guid */
  Library: Uint8Array | Deno.PointerValue;
}

export const sizeofNTMS_IEDOORINFORMATION = 24;

export function allocNTMS_IEDOORINFORMATION(data?: Partial<NTMS_IEDOORINFORMATION>): Uint8Array {
  const buf = new Uint8Array(sizeofNTMS_IEDOORINFORMATION);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.Number !== undefined) view.setUint32(0, Number(data.Number), true);
  // 0x04: i32
  if (data?.State !== undefined) view.setInt32(4, Number(data.State), true);
  // 0x08: u16
  if (data?.MaxOpenSecs !== undefined) view.setUint16(8, Number(data.MaxOpenSecs), true);
  // 0x0a: pad6
  // 0x10: pointer
  if (data?.Library !== undefined) view.setBigUint64(16, data.Library === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.Library))), true);
  return buf;
}

export class NTMS_IEDOORINFORMATIONView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get Number(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: i32
  get State(): number {
    return this.view.getInt32(4, true);
  }

  // 0x08: u16
  get MaxOpenSecs(): number {
    return this.view.getUint16(8, true);
  }

  // 0x0a: pad6

  // 0x10: pointer
  get Library(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(16, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: u32
  set Number(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: i32
  set State(value: number) {
    this.view.setInt32(4, value, true);
  }

  // 0x08: u16
  set MaxOpenSecs(value: number) {
    this.view.setUint16(8, value, true);
  }

  // 0x0a: pad6

  // 0x10: pointer
  set Library(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(16, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.Storage.FileSystem.NTMS_IEPORTINFORMATION (size: 24)
 */
export interface NTMS_IEPORTINFORMATION {
  /** u32 */
  Number: number;
  /** Windows.Win32.Storage.FileSystem.NtmsPortContent */
  Content: NtmsPortContent;
  /** Windows.Win32.Storage.FileSystem.NtmsPortPosition */
  Position: NtmsPortPosition;
  /** u16 */
  MaxExtendSecs: number;
  /** System.Guid */
  Library: Uint8Array | Deno.PointerValue;
}

export const sizeofNTMS_IEPORTINFORMATION = 24;

export function allocNTMS_IEPORTINFORMATION(data?: Partial<NTMS_IEPORTINFORMATION>): Uint8Array {
  const buf = new Uint8Array(sizeofNTMS_IEPORTINFORMATION);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.Number !== undefined) view.setUint32(0, Number(data.Number), true);
  // 0x04: i32
  if (data?.Content !== undefined) view.setInt32(4, Number(data.Content), true);
  // 0x08: i32
  if (data?.Position !== undefined) view.setInt32(8, Number(data.Position), true);
  // 0x0c: u16
  if (data?.MaxExtendSecs !== undefined) view.setUint16(12, Number(data.MaxExtendSecs), true);
  // 0x0e: pad2
  // 0x10: pointer
  if (data?.Library !== undefined) view.setBigUint64(16, data.Library === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.Library))), true);
  return buf;
}

export class NTMS_IEPORTINFORMATIONView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get Number(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: i32
  get Content(): number {
    return this.view.getInt32(4, true);
  }

  // 0x08: i32
  get Position(): number {
    return this.view.getInt32(8, true);
  }

  // 0x0c: u16
  get MaxExtendSecs(): number {
    return this.view.getUint16(12, true);
  }

  // 0x0e: pad2

  // 0x10: pointer
  get Library(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(16, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: u32
  set Number(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: i32
  set Content(value: number) {
    this.view.setInt32(4, value, true);
  }

  // 0x08: i32
  set Position(value: number) {
    this.view.setInt32(8, value, true);
  }

  // 0x0c: u16
  set MaxExtendSecs(value: number) {
    this.view.setUint16(12, value, true);
  }

  // 0x0e: pad2

  // 0x10: pointer
  set Library(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(16, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.Storage.FileSystem.NTMS_PMIDINFORMATIONA (size: 96)
 */
export interface NTMS_PMIDINFORMATIONA {
  /** System.Guid */
  CurrentLibrary: Uint8Array | Deno.PointerValue;
  /** System.Guid */
  MediaPool: Uint8Array | Deno.PointerValue;
  /** System.Guid */
  Location: Uint8Array | Deno.PointerValue;
  /** u32 */
  LocationType: number;
  /** System.Guid */
  MediaType: Uint8Array | Deno.PointerValue;
  /** System.Guid */
  HomeSlot: Uint8Array | Deno.PointerValue;
  /** array */
  szBarCode: Deno.PointerValue;
  /** Windows.Win32.Storage.FileSystem.NtmsBarCodeState */
  BarCodeState: NtmsBarCodeState;
  /** array */
  szSequenceNumber: Deno.PointerValue;
  /** Windows.Win32.Storage.FileSystem.NtmsMediaState */
  MediaState: NtmsMediaState;
  /** u32 */
  dwNumberOfPartitions: number;
  /** u32 */
  dwMediaTypeCode: number;
  /** u32 */
  dwDensityCode: number;
  /** System.Guid */
  MountedPartition: Uint8Array | Deno.PointerValue;
}

export const sizeofNTMS_PMIDINFORMATIONA = 96;

export function allocNTMS_PMIDINFORMATIONA(data?: Partial<NTMS_PMIDINFORMATIONA>): Uint8Array {
  const buf = new Uint8Array(sizeofNTMS_PMIDINFORMATIONA);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.CurrentLibrary !== undefined) view.setBigUint64(0, data.CurrentLibrary === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.CurrentLibrary))), true);
  // 0x08: pointer
  if (data?.MediaPool !== undefined) view.setBigUint64(8, data.MediaPool === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.MediaPool))), true);
  // 0x10: pointer
  if (data?.Location !== undefined) view.setBigUint64(16, data.Location === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.Location))), true);
  // 0x18: u32
  if (data?.LocationType !== undefined) view.setUint32(24, Number(data.LocationType), true);
  // 0x1c: pad4
  // 0x20: pointer
  if (data?.MediaType !== undefined) view.setBigUint64(32, data.MediaType === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.MediaType))), true);
  // 0x28: pointer
  if (data?.HomeSlot !== undefined) view.setBigUint64(40, data.HomeSlot === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.HomeSlot))), true);
  // 0x30: pointer
  if (data?.szBarCode !== undefined) view.setBigUint64(48, data.szBarCode === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.szBarCode))), true);
  // 0x38: i32
  if (data?.BarCodeState !== undefined) view.setInt32(56, Number(data.BarCodeState), true);
  // 0x3c: pad4
  // 0x40: pointer
  if (data?.szSequenceNumber !== undefined) view.setBigUint64(64, data.szSequenceNumber === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.szSequenceNumber))), true);
  // 0x48: i32
  if (data?.MediaState !== undefined) view.setInt32(72, Number(data.MediaState), true);
  // 0x4c: u32
  if (data?.dwNumberOfPartitions !== undefined) view.setUint32(76, Number(data.dwNumberOfPartitions), true);
  // 0x50: u32
  if (data?.dwMediaTypeCode !== undefined) view.setUint32(80, Number(data.dwMediaTypeCode), true);
  // 0x54: u32
  if (data?.dwDensityCode !== undefined) view.setUint32(84, Number(data.dwDensityCode), true);
  // 0x58: pointer
  if (data?.MountedPartition !== undefined) view.setBigUint64(88, data.MountedPartition === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.MountedPartition))), true);
  return buf;
}

export class NTMS_PMIDINFORMATIONAView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get CurrentLibrary(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(0, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x08: pointer
  get MediaPool(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x10: pointer
  get Location(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(16, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x18: u32
  get LocationType(): number {
    return this.view.getUint32(24, true);
  }

  // 0x1c: pad4

  // 0x20: pointer
  get MediaType(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(32, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x28: pointer
  get HomeSlot(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(40, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x30: pointer
  get szBarCode(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(48, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x38: i32
  get BarCodeState(): number {
    return this.view.getInt32(56, true);
  }

  // 0x3c: pad4

  // 0x40: pointer
  get szSequenceNumber(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(64, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x48: i32
  get MediaState(): number {
    return this.view.getInt32(72, true);
  }

  // 0x4c: u32
  get dwNumberOfPartitions(): number {
    return this.view.getUint32(76, true);
  }

  // 0x50: u32
  get dwMediaTypeCode(): number {
    return this.view.getUint32(80, true);
  }

  // 0x54: u32
  get dwDensityCode(): number {
    return this.view.getUint32(84, true);
  }

  // 0x58: pointer
  get MountedPartition(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(88, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: pointer
  set CurrentLibrary(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(0, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x08: pointer
  set MediaPool(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x10: pointer
  set Location(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(16, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x18: u32
  set LocationType(value: number) {
    this.view.setUint32(24, value, true);
  }

  // 0x1c: pad4

  // 0x20: pointer
  set MediaType(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(32, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x28: pointer
  set HomeSlot(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(40, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x30: pointer
  set szBarCode(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(48, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x38: i32
  set BarCodeState(value: number) {
    this.view.setInt32(56, value, true);
  }

  // 0x3c: pad4

  // 0x40: pointer
  set szSequenceNumber(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(64, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x48: i32
  set MediaState(value: number) {
    this.view.setInt32(72, value, true);
  }

  // 0x4c: u32
  set dwNumberOfPartitions(value: number) {
    this.view.setUint32(76, value, true);
  }

  // 0x50: u32
  set dwMediaTypeCode(value: number) {
    this.view.setUint32(80, value, true);
  }

  // 0x54: u32
  set dwDensityCode(value: number) {
    this.view.setUint32(84, value, true);
  }

  // 0x58: pointer
  set MountedPartition(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(88, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.Storage.FileSystem.NTMS_LMIDINFORMATION (size: 16)
 */
export interface NTMS_LMIDINFORMATION {
  /** System.Guid */
  MediaPool: Uint8Array | Deno.PointerValue;
  /** u32 */
  dwNumberOfPartitions: number;
}

export const sizeofNTMS_LMIDINFORMATION = 16;

export function allocNTMS_LMIDINFORMATION(data?: Partial<NTMS_LMIDINFORMATION>): Uint8Array {
  const buf = new Uint8Array(sizeofNTMS_LMIDINFORMATION);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.MediaPool !== undefined) view.setBigUint64(0, data.MediaPool === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.MediaPool))), true);
  // 0x08: u32
  if (data?.dwNumberOfPartitions !== undefined) view.setUint32(8, Number(data.dwNumberOfPartitions), true);
  // 0x0c: pad4
  return buf;
}

export class NTMS_LMIDINFORMATIONView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get MediaPool(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(0, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x08: u32
  get dwNumberOfPartitions(): number {
    return this.view.getUint32(8, true);
  }

  // 0x0c: pad4

  // 0x00: pointer
  set MediaPool(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(0, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x08: u32
  set dwNumberOfPartitions(value: number) {
    this.view.setUint32(8, value, true);
  }

  // 0x0c: pad4
}

/**
 * Windows.Win32.Storage.FileSystem.NTMS_PARTITIONINFORMATIONA (size: 72)
 */
export interface NTMS_PARTITIONINFORMATIONA {
  /** System.Guid */
  PhysicalMedia: Uint8Array | Deno.PointerValue;
  /** System.Guid */
  LogicalMedia: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.Storage.FileSystem.NtmsPartitionState */
  State: NtmsPartitionState;
  /** u16 */
  Side: number;
  /** u32 */
  dwOmidLabelIdLength: number;
  /** array */
  OmidLabelId: Deno.PointerValue;
  /** array */
  szOmidLabelType: Deno.PointerValue;
  /** array */
  szOmidLabelInfo: Deno.PointerValue;
  /** u32 */
  dwMountCount: number;
  /** u32 */
  dwAllocateCount: number;
  /** Windows.Win32.Foundation.LARGE_INTEGER */
  Capacity: Uint8Array | Deno.PointerValue;
}

export const sizeofNTMS_PARTITIONINFORMATIONA = 72;

export function allocNTMS_PARTITIONINFORMATIONA(data?: Partial<NTMS_PARTITIONINFORMATIONA>): Uint8Array {
  const buf = new Uint8Array(sizeofNTMS_PARTITIONINFORMATIONA);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.PhysicalMedia !== undefined) view.setBigUint64(0, data.PhysicalMedia === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.PhysicalMedia))), true);
  // 0x08: pointer
  if (data?.LogicalMedia !== undefined) view.setBigUint64(8, data.LogicalMedia === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.LogicalMedia))), true);
  // 0x10: i32
  if (data?.State !== undefined) view.setInt32(16, Number(data.State), true);
  // 0x14: u16
  if (data?.Side !== undefined) view.setUint16(20, Number(data.Side), true);
  // 0x16: u32
  if (data?.dwOmidLabelIdLength !== undefined) view.setUint32(22, Number(data.dwOmidLabelIdLength), true);
  // 0x1a: pad6
  // 0x20: pointer
  if (data?.OmidLabelId !== undefined) view.setBigUint64(32, data.OmidLabelId === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.OmidLabelId))), true);
  // 0x28: pointer
  if (data?.szOmidLabelType !== undefined) view.setBigUint64(40, data.szOmidLabelType === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.szOmidLabelType))), true);
  // 0x30: pointer
  if (data?.szOmidLabelInfo !== undefined) view.setBigUint64(48, data.szOmidLabelInfo === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.szOmidLabelInfo))), true);
  // 0x38: u32
  if (data?.dwMountCount !== undefined) view.setUint32(56, Number(data.dwMountCount), true);
  // 0x3c: u32
  if (data?.dwAllocateCount !== undefined) view.setUint32(60, Number(data.dwAllocateCount), true);
  // 0x40: pointer
  if (data?.Capacity !== undefined) view.setBigUint64(64, data.Capacity === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.Capacity))), true);
  return buf;
}

export class NTMS_PARTITIONINFORMATIONAView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get PhysicalMedia(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(0, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x08: pointer
  get LogicalMedia(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x10: i32
  get State(): number {
    return this.view.getInt32(16, true);
  }

  // 0x14: u16
  get Side(): number {
    return this.view.getUint16(20, true);
  }

  // 0x16: u32
  get dwOmidLabelIdLength(): number {
    return this.view.getUint32(22, true);
  }

  // 0x1a: pad6

  // 0x20: pointer
  get OmidLabelId(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(32, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x28: pointer
  get szOmidLabelType(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(40, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x30: pointer
  get szOmidLabelInfo(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(48, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x38: u32
  get dwMountCount(): number {
    return this.view.getUint32(56, true);
  }

  // 0x3c: u32
  get dwAllocateCount(): number {
    return this.view.getUint32(60, true);
  }

  // 0x40: pointer
  get Capacity(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(64, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: pointer
  set PhysicalMedia(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(0, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x08: pointer
  set LogicalMedia(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x10: i32
  set State(value: number) {
    this.view.setInt32(16, value, true);
  }

  // 0x14: u16
  set Side(value: number) {
    this.view.setUint16(20, value, true);
  }

  // 0x16: u32
  set dwOmidLabelIdLength(value: number) {
    this.view.setUint32(22, value, true);
  }

  // 0x1a: pad6

  // 0x20: pointer
  set OmidLabelId(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(32, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x28: pointer
  set szOmidLabelType(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(40, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x30: pointer
  set szOmidLabelInfo(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(48, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x38: u32
  set dwMountCount(value: number) {
    this.view.setUint32(56, value, true);
  }

  // 0x3c: u32
  set dwAllocateCount(value: number) {
    this.view.setUint32(60, value, true);
  }

  // 0x40: pointer
  set Capacity(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(64, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.Storage.FileSystem.NTMS_MEDIAPOOLINFORMATION (size: 48)
 */
export interface NTMS_MEDIAPOOLINFORMATION {
  /** u32 */
  PoolType: number;
  /** System.Guid */
  MediaType: Uint8Array | Deno.PointerValue;
  /** System.Guid */
  Parent: Uint8Array | Deno.PointerValue;
  /** u32 */
  AllocationPolicy: number;
  /** u32 */
  DeallocationPolicy: number;
  /** u32 */
  dwMaxAllocates: number;
  /** u32 */
  dwNumberOfPhysicalMedia: number;
  /** u32 */
  dwNumberOfLogicalMedia: number;
  /** u32 */
  dwNumberOfMediaPools: number;
}

export const sizeofNTMS_MEDIAPOOLINFORMATION = 48;

export function allocNTMS_MEDIAPOOLINFORMATION(data?: Partial<NTMS_MEDIAPOOLINFORMATION>): Uint8Array {
  const buf = new Uint8Array(sizeofNTMS_MEDIAPOOLINFORMATION);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.PoolType !== undefined) view.setUint32(0, Number(data.PoolType), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.MediaType !== undefined) view.setBigUint64(8, data.MediaType === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.MediaType))), true);
  // 0x10: pointer
  if (data?.Parent !== undefined) view.setBigUint64(16, data.Parent === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.Parent))), true);
  // 0x18: u32
  if (data?.AllocationPolicy !== undefined) view.setUint32(24, Number(data.AllocationPolicy), true);
  // 0x1c: u32
  if (data?.DeallocationPolicy !== undefined) view.setUint32(28, Number(data.DeallocationPolicy), true);
  // 0x20: u32
  if (data?.dwMaxAllocates !== undefined) view.setUint32(32, Number(data.dwMaxAllocates), true);
  // 0x24: u32
  if (data?.dwNumberOfPhysicalMedia !== undefined) view.setUint32(36, Number(data.dwNumberOfPhysicalMedia), true);
  // 0x28: u32
  if (data?.dwNumberOfLogicalMedia !== undefined) view.setUint32(40, Number(data.dwNumberOfLogicalMedia), true);
  // 0x2c: u32
  if (data?.dwNumberOfMediaPools !== undefined) view.setUint32(44, Number(data.dwNumberOfMediaPools), true);
  return buf;
}

export class NTMS_MEDIAPOOLINFORMATIONView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get PoolType(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  get MediaType(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x10: pointer
  get Parent(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(16, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x18: u32
  get AllocationPolicy(): number {
    return this.view.getUint32(24, true);
  }

  // 0x1c: u32
  get DeallocationPolicy(): number {
    return this.view.getUint32(28, true);
  }

  // 0x20: u32
  get dwMaxAllocates(): number {
    return this.view.getUint32(32, true);
  }

  // 0x24: u32
  get dwNumberOfPhysicalMedia(): number {
    return this.view.getUint32(36, true);
  }

  // 0x28: u32
  get dwNumberOfLogicalMedia(): number {
    return this.view.getUint32(40, true);
  }

  // 0x2c: u32
  get dwNumberOfMediaPools(): number {
    return this.view.getUint32(44, true);
  }

  // 0x00: u32
  set PoolType(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  set MediaType(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x10: pointer
  set Parent(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(16, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x18: u32
  set AllocationPolicy(value: number) {
    this.view.setUint32(24, value, true);
  }

  // 0x1c: u32
  set DeallocationPolicy(value: number) {
    this.view.setUint32(28, value, true);
  }

  // 0x20: u32
  set dwMaxAllocates(value: number) {
    this.view.setUint32(32, value, true);
  }

  // 0x24: u32
  set dwNumberOfPhysicalMedia(value: number) {
    this.view.setUint32(36, value, true);
  }

  // 0x28: u32
  set dwNumberOfLogicalMedia(value: number) {
    this.view.setUint32(40, value, true);
  }

  // 0x2c: u32
  set dwNumberOfMediaPools(value: number) {
    this.view.setUint32(44, value, true);
  }
}

/**
 * Windows.Win32.Storage.FileSystem.NTMS_MEDIATYPEINFORMATION (size: 16)
 */
export interface NTMS_MEDIATYPEINFORMATION {
  /** u32 */
  MediaType: number;
  /** u32 */
  NumberOfSides: number;
  /** Windows.Win32.Storage.FileSystem.NtmsReadWriteCharacteristics */
  ReadWriteCharacteristics: NtmsReadWriteCharacteristics;
  /** Windows.Win32.Storage.FileSystem.FILE_DEVICE_TYPE */
  DeviceType: FILE_DEVICE_TYPE;
}

export const sizeofNTMS_MEDIATYPEINFORMATION = 16;

export function allocNTMS_MEDIATYPEINFORMATION(data?: Partial<NTMS_MEDIATYPEINFORMATION>): Uint8Array {
  const buf = new Uint8Array(sizeofNTMS_MEDIATYPEINFORMATION);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.MediaType !== undefined) view.setUint32(0, Number(data.MediaType), true);
  // 0x04: u32
  if (data?.NumberOfSides !== undefined) view.setUint32(4, Number(data.NumberOfSides), true);
  // 0x08: i32
  if (data?.ReadWriteCharacteristics !== undefined) view.setInt32(8, Number(data.ReadWriteCharacteristics), true);
  // 0x0c: u32
  if (data?.DeviceType !== undefined) view.setUint32(12, Number(data.DeviceType), true);
  return buf;
}

export class NTMS_MEDIATYPEINFORMATIONView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get MediaType(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: u32
  get NumberOfSides(): number {
    return this.view.getUint32(4, true);
  }

  // 0x08: i32
  get ReadWriteCharacteristics(): number {
    return this.view.getInt32(8, true);
  }

  // 0x0c: u32
  get DeviceType(): number {
    return this.view.getUint32(12, true);
  }

  // 0x00: u32
  set MediaType(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: u32
  set NumberOfSides(value: number) {
    this.view.setUint32(4, value, true);
  }

  // 0x08: i32
  set ReadWriteCharacteristics(value: number) {
    this.view.setInt32(8, value, true);
  }

  // 0x0c: u32
  set DeviceType(value: number) {
    this.view.setUint32(12, value, true);
  }
}

/**
 * Windows.Win32.Storage.FileSystem.NTMS_LIBREQUESTINFORMATIONA (size: 120)
 */
export interface NTMS_LIBREQUESTINFORMATIONA {
  /** Windows.Win32.Storage.FileSystem.NtmsLmOperation */
  OperationCode: NtmsLmOperation;
  /** u32 */
  OperationOption: number;
  /** Windows.Win32.Storage.FileSystem.NtmsLmState */
  State: NtmsLmState;
  /** System.Guid */
  PartitionId: Uint8Array | Deno.PointerValue;
  /** System.Guid */
  DriveId: Uint8Array | Deno.PointerValue;
  /** System.Guid */
  PhysMediaId: Uint8Array | Deno.PointerValue;
  /** System.Guid */
  Library: Uint8Array | Deno.PointerValue;
  /** System.Guid */
  SlotId: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.Foundation.SYSTEMTIME */
  TimeQueued: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.Foundation.SYSTEMTIME */
  TimeCompleted: Uint8Array | Deno.PointerValue;
  /** array */
  szApplication: Deno.PointerValue;
  /** array */
  szUser: Deno.PointerValue;
  /** array */
  szComputer: Deno.PointerValue;
  /** u32 */
  dwErrorCode: number;
  /** System.Guid */
  WorkItemId: Uint8Array | Deno.PointerValue;
  /** u32 */
  dwPriority: number;
}

export const sizeofNTMS_LIBREQUESTINFORMATIONA = 120;

export function allocNTMS_LIBREQUESTINFORMATIONA(data?: Partial<NTMS_LIBREQUESTINFORMATIONA>): Uint8Array {
  const buf = new Uint8Array(sizeofNTMS_LIBREQUESTINFORMATIONA);
  const view = new DataView(buf.buffer);
  // 0x00: i32
  if (data?.OperationCode !== undefined) view.setInt32(0, Number(data.OperationCode), true);
  // 0x04: u32
  if (data?.OperationOption !== undefined) view.setUint32(4, Number(data.OperationOption), true);
  // 0x08: i32
  if (data?.State !== undefined) view.setInt32(8, Number(data.State), true);
  // 0x0c: pad4
  // 0x10: pointer
  if (data?.PartitionId !== undefined) view.setBigUint64(16, data.PartitionId === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.PartitionId))), true);
  // 0x18: pointer
  if (data?.DriveId !== undefined) view.setBigUint64(24, data.DriveId === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.DriveId))), true);
  // 0x20: pointer
  if (data?.PhysMediaId !== undefined) view.setBigUint64(32, data.PhysMediaId === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.PhysMediaId))), true);
  // 0x28: pointer
  if (data?.Library !== undefined) view.setBigUint64(40, data.Library === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.Library))), true);
  // 0x30: pointer
  if (data?.SlotId !== undefined) view.setBigUint64(48, data.SlotId === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.SlotId))), true);
  // 0x38: pointer
  if (data?.TimeQueued !== undefined) view.setBigUint64(56, data.TimeQueued === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.TimeQueued))), true);
  // 0x40: pointer
  if (data?.TimeCompleted !== undefined) view.setBigUint64(64, data.TimeCompleted === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.TimeCompleted))), true);
  // 0x48: pointer
  if (data?.szApplication !== undefined) view.setBigUint64(72, data.szApplication === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.szApplication))), true);
  // 0x50: pointer
  if (data?.szUser !== undefined) view.setBigUint64(80, data.szUser === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.szUser))), true);
  // 0x58: pointer
  if (data?.szComputer !== undefined) view.setBigUint64(88, data.szComputer === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.szComputer))), true);
  // 0x60: u32
  if (data?.dwErrorCode !== undefined) view.setUint32(96, Number(data.dwErrorCode), true);
  // 0x64: pad4
  // 0x68: pointer
  if (data?.WorkItemId !== undefined) view.setBigUint64(104, data.WorkItemId === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.WorkItemId))), true);
  // 0x70: u32
  if (data?.dwPriority !== undefined) view.setUint32(112, Number(data.dwPriority), true);
  // 0x74: pad4
  return buf;
}

export class NTMS_LIBREQUESTINFORMATIONAView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: i32
  get OperationCode(): number {
    return this.view.getInt32(0, true);
  }

  // 0x04: u32
  get OperationOption(): number {
    return this.view.getUint32(4, true);
  }

  // 0x08: i32
  get State(): number {
    return this.view.getInt32(8, true);
  }

  // 0x0c: pad4

  // 0x10: pointer
  get PartitionId(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(16, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x18: pointer
  get DriveId(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(24, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x20: pointer
  get PhysMediaId(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(32, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x28: pointer
  get Library(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(40, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x30: pointer
  get SlotId(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(48, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x38: pointer
  get TimeQueued(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(56, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x40: pointer
  get TimeCompleted(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(64, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x48: pointer
  get szApplication(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(72, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x50: pointer
  get szUser(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(80, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x58: pointer
  get szComputer(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(88, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x60: u32
  get dwErrorCode(): number {
    return this.view.getUint32(96, true);
  }

  // 0x64: pad4

  // 0x68: pointer
  get WorkItemId(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(104, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x70: u32
  get dwPriority(): number {
    return this.view.getUint32(112, true);
  }

  // 0x74: pad4

  // 0x00: i32
  set OperationCode(value: number) {
    this.view.setInt32(0, value, true);
  }

  // 0x04: u32
  set OperationOption(value: number) {
    this.view.setUint32(4, value, true);
  }

  // 0x08: i32
  set State(value: number) {
    this.view.setInt32(8, value, true);
  }

  // 0x0c: pad4

  // 0x10: pointer
  set PartitionId(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(16, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x18: pointer
  set DriveId(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(24, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x20: pointer
  set PhysMediaId(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(32, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x28: pointer
  set Library(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(40, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x30: pointer
  set SlotId(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(48, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x38: pointer
  set TimeQueued(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(56, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x40: pointer
  set TimeCompleted(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(64, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x48: pointer
  set szApplication(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(72, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x50: pointer
  set szUser(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(80, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x58: pointer
  set szComputer(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(88, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x60: u32
  set dwErrorCode(value: number) {
    this.view.setUint32(96, value, true);
  }

  // 0x64: pad4

  // 0x68: pointer
  set WorkItemId(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(104, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x70: u32
  set dwPriority(value: number) {
    this.view.setUint32(112, value, true);
  }

  // 0x74: pad4
}

/**
 * Windows.Win32.Storage.FileSystem.NTMS_OPREQUESTINFORMATIONA (size: 88)
 */
export interface NTMS_OPREQUESTINFORMATIONA {
  /** Windows.Win32.Storage.FileSystem.NtmsOpreqCommand */
  Request: NtmsOpreqCommand;
  /** Windows.Win32.Foundation.SYSTEMTIME */
  Submitted: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.Storage.FileSystem.NtmsOpreqState */
  State: NtmsOpreqState;
  /** array */
  szMessage: Deno.PointerValue;
  /** Windows.Win32.Storage.FileSystem.NtmsObjectsTypes */
  Arg1Type: NtmsObjectsTypes;
  /** System.Guid */
  Arg1: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.Storage.FileSystem.NtmsObjectsTypes */
  Arg2Type: NtmsObjectsTypes;
  /** System.Guid */
  Arg2: Uint8Array | Deno.PointerValue;
  /** array */
  szApplication: Deno.PointerValue;
  /** array */
  szUser: Deno.PointerValue;
  /** array */
  szComputer: Deno.PointerValue;
}

export const sizeofNTMS_OPREQUESTINFORMATIONA = 88;

export function allocNTMS_OPREQUESTINFORMATIONA(data?: Partial<NTMS_OPREQUESTINFORMATIONA>): Uint8Array {
  const buf = new Uint8Array(sizeofNTMS_OPREQUESTINFORMATIONA);
  const view = new DataView(buf.buffer);
  // 0x00: i32
  if (data?.Request !== undefined) view.setInt32(0, Number(data.Request), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.Submitted !== undefined) view.setBigUint64(8, data.Submitted === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.Submitted))), true);
  // 0x10: i32
  if (data?.State !== undefined) view.setInt32(16, Number(data.State), true);
  // 0x14: pad4
  // 0x18: pointer
  if (data?.szMessage !== undefined) view.setBigUint64(24, data.szMessage === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.szMessage))), true);
  // 0x20: i32
  if (data?.Arg1Type !== undefined) view.setInt32(32, Number(data.Arg1Type), true);
  // 0x24: pad4
  // 0x28: pointer
  if (data?.Arg1 !== undefined) view.setBigUint64(40, data.Arg1 === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.Arg1))), true);
  // 0x30: i32
  if (data?.Arg2Type !== undefined) view.setInt32(48, Number(data.Arg2Type), true);
  // 0x34: pad4
  // 0x38: pointer
  if (data?.Arg2 !== undefined) view.setBigUint64(56, data.Arg2 === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.Arg2))), true);
  // 0x40: pointer
  if (data?.szApplication !== undefined) view.setBigUint64(64, data.szApplication === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.szApplication))), true);
  // 0x48: pointer
  if (data?.szUser !== undefined) view.setBigUint64(72, data.szUser === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.szUser))), true);
  // 0x50: pointer
  if (data?.szComputer !== undefined) view.setBigUint64(80, data.szComputer === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.szComputer))), true);
  return buf;
}

export class NTMS_OPREQUESTINFORMATIONAView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: i32
  get Request(): number {
    return this.view.getInt32(0, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  get Submitted(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x10: i32
  get State(): number {
    return this.view.getInt32(16, true);
  }

  // 0x14: pad4

  // 0x18: pointer
  get szMessage(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(24, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x20: i32
  get Arg1Type(): number {
    return this.view.getInt32(32, true);
  }

  // 0x24: pad4

  // 0x28: pointer
  get Arg1(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(40, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x30: i32
  get Arg2Type(): number {
    return this.view.getInt32(48, true);
  }

  // 0x34: pad4

  // 0x38: pointer
  get Arg2(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(56, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x40: pointer
  get szApplication(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(64, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x48: pointer
  get szUser(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(72, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x50: pointer
  get szComputer(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(80, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: i32
  set Request(value: number) {
    this.view.setInt32(0, value, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  set Submitted(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x10: i32
  set State(value: number) {
    this.view.setInt32(16, value, true);
  }

  // 0x14: pad4

  // 0x18: pointer
  set szMessage(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(24, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x20: i32
  set Arg1Type(value: number) {
    this.view.setInt32(32, value, true);
  }

  // 0x24: pad4

  // 0x28: pointer
  set Arg1(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(40, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x30: i32
  set Arg2Type(value: number) {
    this.view.setInt32(48, value, true);
  }

  // 0x34: pad4

  // 0x38: pointer
  set Arg2(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(56, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x40: pointer
  set szApplication(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(64, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x48: pointer
  set szUser(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(72, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x50: pointer
  set szComputer(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(80, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.Storage.FileSystem.NTMS_COMPUTERINFORMATION (size: 24)
 */
export interface NTMS_COMPUTERINFORMATION {
  /** u32 */
  dwLibRequestPurgeTime: number;
  /** u32 */
  dwOpRequestPurgeTime: number;
  /** u32 */
  dwLibRequestFlags: number;
  /** u32 */
  dwOpRequestFlags: number;
  /** u32 */
  dwMediaPoolPolicy: number;
}

export const sizeofNTMS_COMPUTERINFORMATION = 24;

export function allocNTMS_COMPUTERINFORMATION(data?: Partial<NTMS_COMPUTERINFORMATION>): Uint8Array {
  const buf = new Uint8Array(sizeofNTMS_COMPUTERINFORMATION);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.dwLibRequestPurgeTime !== undefined) view.setUint32(0, Number(data.dwLibRequestPurgeTime), true);
  // 0x04: u32
  if (data?.dwOpRequestPurgeTime !== undefined) view.setUint32(4, Number(data.dwOpRequestPurgeTime), true);
  // 0x08: u32
  if (data?.dwLibRequestFlags !== undefined) view.setUint32(8, Number(data.dwLibRequestFlags), true);
  // 0x0c: u32
  if (data?.dwOpRequestFlags !== undefined) view.setUint32(12, Number(data.dwOpRequestFlags), true);
  // 0x10: u32
  if (data?.dwMediaPoolPolicy !== undefined) view.setUint32(16, Number(data.dwMediaPoolPolicy), true);
  // 0x14: pad4
  return buf;
}

export class NTMS_COMPUTERINFORMATIONView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get dwLibRequestPurgeTime(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: u32
  get dwOpRequestPurgeTime(): number {
    return this.view.getUint32(4, true);
  }

  // 0x08: u32
  get dwLibRequestFlags(): number {
    return this.view.getUint32(8, true);
  }

  // 0x0c: u32
  get dwOpRequestFlags(): number {
    return this.view.getUint32(12, true);
  }

  // 0x10: u32
  get dwMediaPoolPolicy(): number {
    return this.view.getUint32(16, true);
  }

  // 0x14: pad4

  // 0x00: u32
  set dwLibRequestPurgeTime(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: u32
  set dwOpRequestPurgeTime(value: number) {
    this.view.setUint32(4, value, true);
  }

  // 0x08: u32
  set dwLibRequestFlags(value: number) {
    this.view.setUint32(8, value, true);
  }

  // 0x0c: u32
  set dwOpRequestFlags(value: number) {
    this.view.setUint32(12, value, true);
  }

  // 0x10: u32
  set dwMediaPoolPolicy(value: number) {
    this.view.setUint32(16, value, true);
  }

  // 0x14: pad4
}

/**
 * _Info_e__Union (size: 128)
 */
export interface _Info_e__Union {
  /** Windows.Win32.Storage.FileSystem.NTMS_DRIVEINFORMATIONA */
  Drive: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.Storage.FileSystem.NTMS_DRIVETYPEINFORMATIONA */
  DriveType: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.Storage.FileSystem.NTMS_LIBRARYINFORMATION */
  Library: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.Storage.FileSystem.NTMS_CHANGERINFORMATIONA */
  Changer: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.Storage.FileSystem.NTMS_CHANGERTYPEINFORMATIONA */
  ChangerType: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.Storage.FileSystem.NTMS_STORAGESLOTINFORMATION */
  StorageSlot: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.Storage.FileSystem.NTMS_IEDOORINFORMATION */
  IEDoor: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.Storage.FileSystem.NTMS_IEPORTINFORMATION */
  IEPort: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.Storage.FileSystem.NTMS_PMIDINFORMATIONA */
  PhysicalMedia: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.Storage.FileSystem.NTMS_LMIDINFORMATION */
  LogicalMedia: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.Storage.FileSystem.NTMS_PARTITIONINFORMATIONA */
  Partition: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.Storage.FileSystem.NTMS_MEDIAPOOLINFORMATION */
  MediaPool: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.Storage.FileSystem.NTMS_MEDIATYPEINFORMATION */
  MediaType: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.Storage.FileSystem.NTMS_LIBREQUESTINFORMATIONA */
  LibRequest: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.Storage.FileSystem.NTMS_OPREQUESTINFORMATIONA */
  OpRequest: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.Storage.FileSystem.NTMS_COMPUTERINFORMATION */
  Computer: Uint8Array | Deno.PointerValue;
}

export const sizeof_Info_e__Union = 128;

export function alloc_Info_e__Union(data?: Partial<_Info_e__Union>): Uint8Array {
  const buf = new Uint8Array(sizeof_Info_e__Union);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.Drive !== undefined) view.setBigUint64(0, data.Drive === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.Drive))), true);
  // 0x08: pointer
  if (data?.DriveType !== undefined) view.setBigUint64(8, data.DriveType === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.DriveType))), true);
  // 0x10: pointer
  if (data?.Library !== undefined) view.setBigUint64(16, data.Library === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.Library))), true);
  // 0x18: pointer
  if (data?.Changer !== undefined) view.setBigUint64(24, data.Changer === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.Changer))), true);
  // 0x20: pointer
  if (data?.ChangerType !== undefined) view.setBigUint64(32, data.ChangerType === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.ChangerType))), true);
  // 0x28: pointer
  if (data?.StorageSlot !== undefined) view.setBigUint64(40, data.StorageSlot === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.StorageSlot))), true);
  // 0x30: pointer
  if (data?.IEDoor !== undefined) view.setBigUint64(48, data.IEDoor === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.IEDoor))), true);
  // 0x38: pointer
  if (data?.IEPort !== undefined) view.setBigUint64(56, data.IEPort === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.IEPort))), true);
  // 0x40: pointer
  if (data?.PhysicalMedia !== undefined) view.setBigUint64(64, data.PhysicalMedia === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.PhysicalMedia))), true);
  // 0x48: pointer
  if (data?.LogicalMedia !== undefined) view.setBigUint64(72, data.LogicalMedia === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.LogicalMedia))), true);
  // 0x50: pointer
  if (data?.Partition !== undefined) view.setBigUint64(80, data.Partition === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.Partition))), true);
  // 0x58: pointer
  if (data?.MediaPool !== undefined) view.setBigUint64(88, data.MediaPool === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.MediaPool))), true);
  // 0x60: pointer
  if (data?.MediaType !== undefined) view.setBigUint64(96, data.MediaType === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.MediaType))), true);
  // 0x68: pointer
  if (data?.LibRequest !== undefined) view.setBigUint64(104, data.LibRequest === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.LibRequest))), true);
  // 0x70: pointer
  if (data?.OpRequest !== undefined) view.setBigUint64(112, data.OpRequest === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.OpRequest))), true);
  // 0x78: pointer
  if (data?.Computer !== undefined) view.setBigUint64(120, data.Computer === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.Computer))), true);
  return buf;
}

export class _Info_e__UnionView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get Drive(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(0, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x08: pointer
  get DriveType(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x10: pointer
  get Library(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(16, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x18: pointer
  get Changer(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(24, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x20: pointer
  get ChangerType(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(32, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x28: pointer
  get StorageSlot(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(40, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x30: pointer
  get IEDoor(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(48, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x38: pointer
  get IEPort(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(56, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x40: pointer
  get PhysicalMedia(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(64, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x48: pointer
  get LogicalMedia(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(72, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x50: pointer
  get Partition(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(80, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x58: pointer
  get MediaPool(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(88, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x60: pointer
  get MediaType(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(96, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x68: pointer
  get LibRequest(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(104, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x70: pointer
  get OpRequest(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(112, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x78: pointer
  get Computer(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(120, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: pointer
  set Drive(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(0, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x08: pointer
  set DriveType(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x10: pointer
  set Library(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(16, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x18: pointer
  set Changer(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(24, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x20: pointer
  set ChangerType(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(32, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x28: pointer
  set StorageSlot(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(40, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x30: pointer
  set IEDoor(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(48, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x38: pointer
  set IEPort(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(56, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x40: pointer
  set PhysicalMedia(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(64, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x48: pointer
  set LogicalMedia(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(72, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x50: pointer
  set Partition(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(80, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x58: pointer
  set MediaPool(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(88, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x60: pointer
  set MediaType(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(96, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x68: pointer
  set LibRequest(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(104, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x70: pointer
  set OpRequest(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(112, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x78: pointer
  set Computer(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(120, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.Security.Authentication.Identity.SECPKG_EXTENDED_INFORMATION (size: 16)
 */
export interface SECPKG_EXTENDED_INFORMATION {
  /** Windows.Win32.Security.Authentication.Identity.SECPKG_EXTENDED_INFORMATION_CLASS */
  Class: SECPKG_EXTENDED_INFORMATION_CLASS;
  /** _Info_e__Union */
  Info: Uint8Array | Deno.PointerValue;
}

export const sizeofSECPKG_EXTENDED_INFORMATION = 16;

export function allocSECPKG_EXTENDED_INFORMATION(data?: Partial<SECPKG_EXTENDED_INFORMATION>): Uint8Array {
  const buf = new Uint8Array(sizeofSECPKG_EXTENDED_INFORMATION);
  const view = new DataView(buf.buffer);
  // 0x00: i32
  if (data?.Class !== undefined) view.setInt32(0, Number(data.Class), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.Info !== undefined) view.setBigUint64(8, data.Info === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.Info))), true);
  return buf;
}

export class SECPKG_EXTENDED_INFORMATIONView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: i32
  get Class(): number {
    return this.view.getInt32(0, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  get Info(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: i32
  set Class(value: number) {
    this.view.setInt32(0, value, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  set Info(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.Security.Authentication.Identity.SECPKG_TARGETINFO (size: 16)
 */
export interface SECPKG_TARGETINFO {
  /** Windows.Win32.Foundation.PSID */
  DomainSid: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.Foundation.PWSTR */
  ComputerName: string | null | Uint8Array | Uint16Array;
}

export const sizeofSECPKG_TARGETINFO = 16;

export function allocSECPKG_TARGETINFO(data?: Partial<SECPKG_TARGETINFO>): Uint8Array {
  const buf = new Uint8Array(sizeofSECPKG_TARGETINFO);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.DomainSid !== undefined) view.setBigUint64(0, data.DomainSid === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.DomainSid))), true);
  // 0x08: buffer
  if (data?.ComputerName !== undefined) {
    (buf as any)._f8 = util.pwstrToFfi(data.ComputerName);
    view.setBigUint64(8, (buf as any)._f8 === null ? 0n : BigInt(Deno.UnsafePointer.value(Deno.UnsafePointer.of((buf as any)._f8))), true);
  }
  return buf;
}

export class SECPKG_TARGETINFOView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get DomainSid(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(0, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x08: buffer
  get ComputerName(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: pointer
  set DomainSid(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(0, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x08: buffer
  set ComputerName(value: Uint8Array | Deno.PointerValue) {
    (this.buf as any)._f8 = value;
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer((this.buf as any)._f8))), true);
  }
}

/**
 * Windows.Win32.Security.Authentication.Identity.SecPkgContext_SaslContext (size: 8)
 */
export interface SecPkgContext_SaslContext {
  /** ptr */
  SaslContext: Deno.PointerValue | Uint8Array;
}

export const sizeofSecPkgContext_SaslContext = 8;

export function allocSecPkgContext_SaslContext(data?: Partial<SecPkgContext_SaslContext>): Uint8Array {
  const buf = new Uint8Array(sizeofSecPkgContext_SaslContext);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.SaslContext !== undefined) view.setBigUint64(0, data.SaslContext === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.SaslContext))), true);
  return buf;
}

export class SecPkgContext_SaslContextView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get SaslContext(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(0, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: pointer
  set SaslContext(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(0, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.Security.Authentication.Identity.SECURITY_USER_DATA (size: 32)
 */
export interface SECURITY_USER_DATA {
  /** Windows.Win32.Foundation.UNICODE_STRING */
  UserName: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.Foundation.UNICODE_STRING */
  LogonDomainName: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.Foundation.UNICODE_STRING */
  LogonServer: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.Foundation.PSID */
  pSid: Uint8Array | Deno.PointerValue;
}

export const sizeofSECURITY_USER_DATA = 32;

export function allocSECURITY_USER_DATA(data?: Partial<SECURITY_USER_DATA>): Uint8Array {
  const buf = new Uint8Array(sizeofSECURITY_USER_DATA);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.UserName !== undefined) view.setBigUint64(0, data.UserName === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.UserName))), true);
  // 0x08: pointer
  if (data?.LogonDomainName !== undefined) view.setBigUint64(8, data.LogonDomainName === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.LogonDomainName))), true);
  // 0x10: pointer
  if (data?.LogonServer !== undefined) view.setBigUint64(16, data.LogonServer === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.LogonServer))), true);
  // 0x18: pointer
  if (data?.pSid !== undefined) view.setBigUint64(24, data.pSid === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.pSid))), true);
  return buf;
}

export class SECURITY_USER_DATAView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get UserName(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(0, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x08: pointer
  get LogonDomainName(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x10: pointer
  get LogonServer(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(16, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x18: pointer
  get pSid(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(24, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: pointer
  set UserName(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(0, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x08: pointer
  set LogonDomainName(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x10: pointer
  set LogonServer(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(16, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x18: pointer
  set pSid(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(24, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.Security.Authentication.Identity.SECPKG_CALL_PACKAGE_PIN_DC_REQUEST (size: 32)
 */
export interface SECPKG_CALL_PACKAGE_PIN_DC_REQUEST {
  /** u32 */
  MessageType: number;
  /** u32 */
  Flags: number;
  /** Windows.Win32.Foundation.UNICODE_STRING */
  DomainName: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.Foundation.UNICODE_STRING */
  DcName: Uint8Array | Deno.PointerValue;
  /** u32 */
  DcFlags: number;
}

export const sizeofSECPKG_CALL_PACKAGE_PIN_DC_REQUEST = 32;

export function allocSECPKG_CALL_PACKAGE_PIN_DC_REQUEST(data?: Partial<SECPKG_CALL_PACKAGE_PIN_DC_REQUEST>): Uint8Array {
  const buf = new Uint8Array(sizeofSECPKG_CALL_PACKAGE_PIN_DC_REQUEST);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.MessageType !== undefined) view.setUint32(0, Number(data.MessageType), true);
  // 0x04: u32
  if (data?.Flags !== undefined) view.setUint32(4, Number(data.Flags), true);
  // 0x08: pointer
  if (data?.DomainName !== undefined) view.setBigUint64(8, data.DomainName === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.DomainName))), true);
  // 0x10: pointer
  if (data?.DcName !== undefined) view.setBigUint64(16, data.DcName === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.DcName))), true);
  // 0x18: u32
  if (data?.DcFlags !== undefined) view.setUint32(24, Number(data.DcFlags), true);
  // 0x1c: pad4
  return buf;
}

export class SECPKG_CALL_PACKAGE_PIN_DC_REQUESTView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get MessageType(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: u32
  get Flags(): number {
    return this.view.getUint32(4, true);
  }

  // 0x08: pointer
  get DomainName(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x10: pointer
  get DcName(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(16, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x18: u32
  get DcFlags(): number {
    return this.view.getUint32(24, true);
  }

  // 0x1c: pad4

  // 0x00: u32
  set MessageType(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: u32
  set Flags(value: number) {
    this.view.setUint32(4, value, true);
  }

  // 0x08: pointer
  set DomainName(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x10: pointer
  set DcName(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(16, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x18: u32
  set DcFlags(value: number) {
    this.view.setUint32(24, value, true);
  }

  // 0x1c: pad4
}

/**
 * Windows.Win32.Security.Authentication.Identity.SECPKG_CALL_PACKAGE_UNPIN_ALL_DCS_REQUEST (size: 8)
 */
export interface SECPKG_CALL_PACKAGE_UNPIN_ALL_DCS_REQUEST {
  /** u32 */
  MessageType: number;
  /** u32 */
  Flags: number;
}

export const sizeofSECPKG_CALL_PACKAGE_UNPIN_ALL_DCS_REQUEST = 8;

export function allocSECPKG_CALL_PACKAGE_UNPIN_ALL_DCS_REQUEST(data?: Partial<SECPKG_CALL_PACKAGE_UNPIN_ALL_DCS_REQUEST>): Uint8Array {
  const buf = new Uint8Array(sizeofSECPKG_CALL_PACKAGE_UNPIN_ALL_DCS_REQUEST);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.MessageType !== undefined) view.setUint32(0, Number(data.MessageType), true);
  // 0x04: u32
  if (data?.Flags !== undefined) view.setUint32(4, Number(data.Flags), true);
  return buf;
}

export class SECPKG_CALL_PACKAGE_UNPIN_ALL_DCS_REQUESTView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get MessageType(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: u32
  get Flags(): number {
    return this.view.getUint32(4, true);
  }

  // 0x00: u32
  set MessageType(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: u32
  set Flags(value: number) {
    this.view.setUint32(4, value, true);
  }
}

/**
 * Windows.Win32.Security.Authentication.Identity.SECPKG_CALL_PACKAGE_TRANSFER_CRED_REQUEST (size: 32)
 */
export interface SECPKG_CALL_PACKAGE_TRANSFER_CRED_REQUEST {
  /** u32 */
  MessageType: number;
  /** Windows.Win32.Foundation.LUID */
  OriginLogonId: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.Foundation.LUID */
  DestinationLogonId: Uint8Array | Deno.PointerValue;
  /** u32 */
  Flags: number;
}

export const sizeofSECPKG_CALL_PACKAGE_TRANSFER_CRED_REQUEST = 32;

export function allocSECPKG_CALL_PACKAGE_TRANSFER_CRED_REQUEST(data?: Partial<SECPKG_CALL_PACKAGE_TRANSFER_CRED_REQUEST>): Uint8Array {
  const buf = new Uint8Array(sizeofSECPKG_CALL_PACKAGE_TRANSFER_CRED_REQUEST);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.MessageType !== undefined) view.setUint32(0, Number(data.MessageType), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.OriginLogonId !== undefined) view.setBigUint64(8, data.OriginLogonId === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.OriginLogonId))), true);
  // 0x10: pointer
  if (data?.DestinationLogonId !== undefined) view.setBigUint64(16, data.DestinationLogonId === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.DestinationLogonId))), true);
  // 0x18: u32
  if (data?.Flags !== undefined) view.setUint32(24, Number(data.Flags), true);
  // 0x1c: pad4
  return buf;
}

export class SECPKG_CALL_PACKAGE_TRANSFER_CRED_REQUESTView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get MessageType(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  get OriginLogonId(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x10: pointer
  get DestinationLogonId(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(16, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x18: u32
  get Flags(): number {
    return this.view.getUint32(24, true);
  }

  // 0x1c: pad4

  // 0x00: u32
  set MessageType(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  set OriginLogonId(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x10: pointer
  set DestinationLogonId(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(16, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x18: u32
  set Flags(value: number) {
    this.view.setUint32(24, value, true);
  }

  // 0x1c: pad4
}

/**
 * Windows.Win32.Security.Authentication.Identity.SECPKG_REDIRECTED_LOGON_BUFFER (size: 56)
 */
export interface SECPKG_REDIRECTED_LOGON_BUFFER {
  /** System.Guid */
  RedirectedLogonGuid: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.Foundation.HANDLE */
  RedirectedLogonHandle: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.Security.Authentication.Identity.PLSA_REDIRECTED_LOGON_INIT */
  Init: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.Security.Authentication.Identity.PLSA_REDIRECTED_LOGON_CALLBACK */
  Callback: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.Security.Authentication.Identity.PLSA_REDIRECTED_LOGON_CLEANUP_CALLBACK */
  CleanupCallback: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.Security.Authentication.Identity.PLSA_REDIRECTED_LOGON_GET_LOGON_CREDS */
  GetLogonCreds: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.Security.Authentication.Identity.PLSA_REDIRECTED_LOGON_GET_SUPP_CREDS */
  GetSupplementalCreds: Uint8Array | Deno.PointerValue;
}

export const sizeofSECPKG_REDIRECTED_LOGON_BUFFER = 56;

export function allocSECPKG_REDIRECTED_LOGON_BUFFER(data?: Partial<SECPKG_REDIRECTED_LOGON_BUFFER>): Uint8Array {
  const buf = new Uint8Array(sizeofSECPKG_REDIRECTED_LOGON_BUFFER);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.RedirectedLogonGuid !== undefined) view.setBigUint64(0, data.RedirectedLogonGuid === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.RedirectedLogonGuid))), true);
  // 0x08: pointer
  if (data?.RedirectedLogonHandle !== undefined) view.setBigUint64(8, data.RedirectedLogonHandle === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.RedirectedLogonHandle))), true);
  // 0x10: pointer
  if (data?.Init !== undefined) view.setBigUint64(16, data.Init === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.Init))), true);
  // 0x18: pointer
  if (data?.Callback !== undefined) view.setBigUint64(24, data.Callback === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.Callback))), true);
  // 0x20: pointer
  if (data?.CleanupCallback !== undefined) view.setBigUint64(32, data.CleanupCallback === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.CleanupCallback))), true);
  // 0x28: pointer
  if (data?.GetLogonCreds !== undefined) view.setBigUint64(40, data.GetLogonCreds === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.GetLogonCreds))), true);
  // 0x30: pointer
  if (data?.GetSupplementalCreds !== undefined) view.setBigUint64(48, data.GetSupplementalCreds === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.GetSupplementalCreds))), true);
  return buf;
}

export class SECPKG_REDIRECTED_LOGON_BUFFERView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get RedirectedLogonGuid(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(0, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x08: pointer
  get RedirectedLogonHandle(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x10: pointer
  get Init(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(16, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x18: pointer
  get Callback(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(24, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x20: pointer
  get CleanupCallback(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(32, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x28: pointer
  get GetLogonCreds(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(40, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x30: pointer
  get GetSupplementalCreds(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(48, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: pointer
  set RedirectedLogonGuid(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(0, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x08: pointer
  set RedirectedLogonHandle(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x10: pointer
  set Init(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(16, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x18: pointer
  set Callback(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(24, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x20: pointer
  set CleanupCallback(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(32, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x28: pointer
  set GetLogonCreds(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(40, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x30: pointer
  set GetSupplementalCreds(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(48, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.Security.Authentication.Identity.SECPKG_POST_LOGON_USER_INFO (size: 24)
 */
export interface SECPKG_POST_LOGON_USER_INFO {
  /** u32 */
  Flags: number;
  /** Windows.Win32.Foundation.LUID */
  LogonId: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.Foundation.LUID */
  LinkedLogonId: Uint8Array | Deno.PointerValue;
}

export const sizeofSECPKG_POST_LOGON_USER_INFO = 24;

export function allocSECPKG_POST_LOGON_USER_INFO(data?: Partial<SECPKG_POST_LOGON_USER_INFO>): Uint8Array {
  const buf = new Uint8Array(sizeofSECPKG_POST_LOGON_USER_INFO);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.Flags !== undefined) view.setUint32(0, Number(data.Flags), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.LogonId !== undefined) view.setBigUint64(8, data.LogonId === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.LogonId))), true);
  // 0x10: pointer
  if (data?.LinkedLogonId !== undefined) view.setBigUint64(16, data.LinkedLogonId === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.LinkedLogonId))), true);
  return buf;
}

export class SECPKG_POST_LOGON_USER_INFOView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get Flags(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  get LogonId(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x10: pointer
  get LinkedLogonId(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(16, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: u32
  set Flags(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  set LogonId(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x10: pointer
  set LinkedLogonId(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(16, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.Security.Authentication.Identity.SECPKG_EVENT_PACKAGE_CHANGE (size: 24)
 */
export interface SECPKG_EVENT_PACKAGE_CHANGE {
  /** Windows.Win32.Security.Authentication.Identity.SECPKG_PACKAGE_CHANGE_TYPE */
  ChangeType: SECPKG_PACKAGE_CHANGE_TYPE;
  /** usize */
  PackageId: Deno.PointerValue;
  /** Windows.Win32.Foundation.UNICODE_STRING */
  PackageName: Uint8Array | Deno.PointerValue;
}

export const sizeofSECPKG_EVENT_PACKAGE_CHANGE = 24;

export function allocSECPKG_EVENT_PACKAGE_CHANGE(data?: Partial<SECPKG_EVENT_PACKAGE_CHANGE>): Uint8Array {
  const buf = new Uint8Array(sizeofSECPKG_EVENT_PACKAGE_CHANGE);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.ChangeType !== undefined) view.setUint32(0, Number(data.ChangeType), true);
  // 0x04: pad4
  // 0x08: usize
  if (data?.PackageId !== undefined) view.setBigUint64(8, BigInt(data.PackageId), true);
  // 0x10: pointer
  if (data?.PackageName !== undefined) view.setBigUint64(16, data.PackageName === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.PackageName))), true);
  return buf;
}

export class SECPKG_EVENT_PACKAGE_CHANGEView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get ChangeType(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: pad4

  // 0x08: usize
  get PackageId(): Deno.PointerValue {
    return Number(this.view.getBigUint64(8, true));
  }

  // 0x10: pointer
  get PackageName(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(16, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: u32
  set ChangeType(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: pad4

  // 0x08: usize
  set PackageId(value: Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(value), true);
  }

  // 0x10: pointer
  set PackageName(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(16, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.Security.Authentication.Identity.SECPKG_EVENT_ROLE_CHANGE (size: 8)
 */
export interface SECPKG_EVENT_ROLE_CHANGE {
  /** u32 */
  PreviousRole: number;
  /** u32 */
  NewRole: number;
}

export const sizeofSECPKG_EVENT_ROLE_CHANGE = 8;

export function allocSECPKG_EVENT_ROLE_CHANGE(data?: Partial<SECPKG_EVENT_ROLE_CHANGE>): Uint8Array {
  const buf = new Uint8Array(sizeofSECPKG_EVENT_ROLE_CHANGE);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.PreviousRole !== undefined) view.setUint32(0, Number(data.PreviousRole), true);
  // 0x04: u32
  if (data?.NewRole !== undefined) view.setUint32(4, Number(data.NewRole), true);
  return buf;
}

export class SECPKG_EVENT_ROLE_CHANGEView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get PreviousRole(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: u32
  get NewRole(): number {
    return this.view.getUint32(4, true);
  }

  // 0x00: u32
  set PreviousRole(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: u32
  set NewRole(value: number) {
    this.view.setUint32(4, value, true);
  }
}

/**
 * Windows.Win32.Security.Authentication.Identity.SECPKG_EVENT_NOTIFY (size: 32)
 */
export interface SECPKG_EVENT_NOTIFY {
  /** u32 */
  EventClass: number;
  /** u32 */
  Reserved: number;
  /** u32 */
  EventDataSize: number;
  /** ptr */
  EventData: Deno.PointerValue | Uint8Array;
  /** ptr */
  PackageParameter: Deno.PointerValue | Uint8Array;
}

export const sizeofSECPKG_EVENT_NOTIFY = 32;

export function allocSECPKG_EVENT_NOTIFY(data?: Partial<SECPKG_EVENT_NOTIFY>): Uint8Array {
  const buf = new Uint8Array(sizeofSECPKG_EVENT_NOTIFY);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.EventClass !== undefined) view.setUint32(0, Number(data.EventClass), true);
  // 0x04: u32
  if (data?.Reserved !== undefined) view.setUint32(4, Number(data.Reserved), true);
  // 0x08: u32
  if (data?.EventDataSize !== undefined) view.setUint32(8, Number(data.EventDataSize), true);
  // 0x0c: pad4
  // 0x10: pointer
  if (data?.EventData !== undefined) view.setBigUint64(16, data.EventData === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.EventData))), true);
  // 0x18: pointer
  if (data?.PackageParameter !== undefined) view.setBigUint64(24, data.PackageParameter === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.PackageParameter))), true);
  return buf;
}

export class SECPKG_EVENT_NOTIFYView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get EventClass(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: u32
  get Reserved(): number {
    return this.view.getUint32(4, true);
  }

  // 0x08: u32
  get EventDataSize(): number {
    return this.view.getUint32(8, true);
  }

  // 0x0c: pad4

  // 0x10: pointer
  get EventData(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(16, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x18: pointer
  get PackageParameter(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(24, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: u32
  set EventClass(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: u32
  set Reserved(value: number) {
    this.view.setUint32(4, value, true);
  }

  // 0x08: u32
  set EventDataSize(value: number) {
    this.view.setUint32(8, value, true);
  }

  // 0x0c: pad4

  // 0x10: pointer
  set EventData(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(16, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x18: pointer
  set PackageParameter(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(24, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.Foundation.FILETIME (size: 8)
 */
export interface FILETIME {
  /** u32 */
  dwLowDateTime: number;
  /** u32 */
  dwHighDateTime: number;
}

export const sizeofFILETIME = 8;

export function allocFILETIME(data?: Partial<FILETIME>): Uint8Array {
  const buf = new Uint8Array(sizeofFILETIME);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.dwLowDateTime !== undefined) view.setUint32(0, Number(data.dwLowDateTime), true);
  // 0x04: u32
  if (data?.dwHighDateTime !== undefined) view.setUint32(4, Number(data.dwHighDateTime), true);
  return buf;
}

export class FILETIMEView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get dwLowDateTime(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: u32
  get dwHighDateTime(): number {
    return this.view.getUint32(4, true);
  }

  // 0x00: u32
  set dwLowDateTime(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: u32
  set dwHighDateTime(value: number) {
    this.view.setUint32(4, value, true);
  }
}

/**
 * Windows.Win32.Security.Credentials.CREDENTIALW (size: 80)
 */
export interface CREDENTIALW {
  /** Windows.Win32.Security.Credentials.CRED_FLAGS */
  Flags: CRED_FLAGS;
  /** Windows.Win32.Security.Credentials.CRED_TYPE */
  Type: CRED_TYPE;
  /** Windows.Win32.Foundation.PWSTR */
  TargetName: string | null | Uint8Array | Uint16Array;
  /** Windows.Win32.Foundation.PWSTR */
  Comment: string | null | Uint8Array | Uint16Array;
  /** Windows.Win32.Foundation.FILETIME */
  LastWritten: Uint8Array | Deno.PointerValue;
  /** u32 */
  CredentialBlobSize: number;
  /** ptr */
  CredentialBlob: Deno.PointerValue | Uint8Array;
  /** Windows.Win32.Security.Credentials.CRED_PERSIST */
  Persist: CRED_PERSIST;
  /** u32 */
  AttributeCount: number;
  /** ptr */
  Attributes: Deno.PointerValue | Uint8Array;
  /** Windows.Win32.Foundation.PWSTR */
  TargetAlias: string | null | Uint8Array | Uint16Array;
  /** Windows.Win32.Foundation.PWSTR */
  UserName: string | null | Uint8Array | Uint16Array;
}

export const sizeofCREDENTIALW = 80;

export function allocCREDENTIALW(data?: Partial<CREDENTIALW>): Uint8Array {
  const buf = new Uint8Array(sizeofCREDENTIALW);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.Flags !== undefined) view.setUint32(0, Number(data.Flags), true);
  // 0x04: u32
  if (data?.Type !== undefined) view.setUint32(4, Number(data.Type), true);
  // 0x08: buffer
  if (data?.TargetName !== undefined) {
    (buf as any)._f8 = util.pwstrToFfi(data.TargetName);
    view.setBigUint64(8, (buf as any)._f8 === null ? 0n : BigInt(Deno.UnsafePointer.value(Deno.UnsafePointer.of((buf as any)._f8))), true);
  }
  // 0x10: buffer
  if (data?.Comment !== undefined) {
    (buf as any)._f16 = util.pwstrToFfi(data.Comment);
    view.setBigUint64(16, (buf as any)._f16 === null ? 0n : BigInt(Deno.UnsafePointer.value(Deno.UnsafePointer.of((buf as any)._f16))), true);
  }
  // 0x18: pointer
  if (data?.LastWritten !== undefined) view.setBigUint64(24, data.LastWritten === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.LastWritten))), true);
  // 0x20: u32
  if (data?.CredentialBlobSize !== undefined) view.setUint32(32, Number(data.CredentialBlobSize), true);
  // 0x24: pad4
  // 0x28: pointer
  if (data?.CredentialBlob !== undefined) view.setBigUint64(40, data.CredentialBlob === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.CredentialBlob))), true);
  // 0x30: u32
  if (data?.Persist !== undefined) view.setUint32(48, Number(data.Persist), true);
  // 0x34: u32
  if (data?.AttributeCount !== undefined) view.setUint32(52, Number(data.AttributeCount), true);
  // 0x38: pointer
  if (data?.Attributes !== undefined) view.setBigUint64(56, data.Attributes === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.Attributes))), true);
  // 0x40: buffer
  if (data?.TargetAlias !== undefined) {
    (buf as any)._f64 = util.pwstrToFfi(data.TargetAlias);
    view.setBigUint64(64, (buf as any)._f64 === null ? 0n : BigInt(Deno.UnsafePointer.value(Deno.UnsafePointer.of((buf as any)._f64))), true);
  }
  // 0x48: buffer
  if (data?.UserName !== undefined) {
    (buf as any)._f72 = util.pwstrToFfi(data.UserName);
    view.setBigUint64(72, (buf as any)._f72 === null ? 0n : BigInt(Deno.UnsafePointer.value(Deno.UnsafePointer.of((buf as any)._f72))), true);
  }
  return buf;
}

export class CREDENTIALWView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get Flags(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: u32
  get Type(): number {
    return this.view.getUint32(4, true);
  }

  // 0x08: buffer
  get TargetName(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x10: buffer
  get Comment(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(16, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x18: pointer
  get LastWritten(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(24, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x20: u32
  get CredentialBlobSize(): number {
    return this.view.getUint32(32, true);
  }

  // 0x24: pad4

  // 0x28: pointer
  get CredentialBlob(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(40, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x30: u32
  get Persist(): number {
    return this.view.getUint32(48, true);
  }

  // 0x34: u32
  get AttributeCount(): number {
    return this.view.getUint32(52, true);
  }

  // 0x38: pointer
  get Attributes(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(56, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x40: buffer
  get TargetAlias(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(64, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x48: buffer
  get UserName(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(72, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: u32
  set Flags(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: u32
  set Type(value: number) {
    this.view.setUint32(4, value, true);
  }

  // 0x08: buffer
  set TargetName(value: Uint8Array | Deno.PointerValue) {
    (this.buf as any)._f8 = value;
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer((this.buf as any)._f8))), true);
  }

  // 0x10: buffer
  set Comment(value: Uint8Array | Deno.PointerValue) {
    (this.buf as any)._f16 = value;
    this.view.setBigUint64(16, BigInt(Deno.UnsafePointer.value(util.toPointer((this.buf as any)._f16))), true);
  }

  // 0x18: pointer
  set LastWritten(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(24, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x20: u32
  set CredentialBlobSize(value: number) {
    this.view.setUint32(32, value, true);
  }

  // 0x24: pad4

  // 0x28: pointer
  set CredentialBlob(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(40, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x30: u32
  set Persist(value: number) {
    this.view.setUint32(48, value, true);
  }

  // 0x34: u32
  set AttributeCount(value: number) {
    this.view.setUint32(52, value, true);
  }

  // 0x38: pointer
  set Attributes(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(56, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x40: buffer
  set TargetAlias(value: Uint8Array | Deno.PointerValue) {
    (this.buf as any)._f64 = value;
    this.view.setBigUint64(64, BigInt(Deno.UnsafePointer.value(util.toPointer((this.buf as any)._f64))), true);
  }

  // 0x48: buffer
  set UserName(value: Uint8Array | Deno.PointerValue) {
    (this.buf as any)._f72 = value;
    this.view.setBigUint64(72, BigInt(Deno.UnsafePointer.value(util.toPointer((this.buf as any)._f72))), true);
  }
}

/**
 * Windows.Win32.Security.Authentication.Identity.ENCRYPTED_CREDENTIALW (size: 16)
 */
export interface ENCRYPTED_CREDENTIALW {
  /** Windows.Win32.Security.Credentials.CREDENTIALW */
  Cred: Uint8Array | Deno.PointerValue;
  /** u32 */
  ClearCredentialBlobSize: number;
}

export const sizeofENCRYPTED_CREDENTIALW = 16;

export function allocENCRYPTED_CREDENTIALW(data?: Partial<ENCRYPTED_CREDENTIALW>): Uint8Array {
  const buf = new Uint8Array(sizeofENCRYPTED_CREDENTIALW);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.Cred !== undefined) view.setBigUint64(0, data.Cred === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.Cred))), true);
  // 0x08: u32
  if (data?.ClearCredentialBlobSize !== undefined) view.setUint32(8, Number(data.ClearCredentialBlobSize), true);
  // 0x0c: pad4
  return buf;
}

export class ENCRYPTED_CREDENTIALWView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get Cred(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(0, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x08: u32
  get ClearCredentialBlobSize(): number {
    return this.view.getUint32(8, true);
  }

  // 0x0c: pad4

  // 0x00: pointer
  set Cred(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(0, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x08: u32
  set ClearCredentialBlobSize(value: number) {
    this.view.setUint32(8, value, true);
  }

  // 0x0c: pad4
}

/**
 * Windows.Win32.Security.Authentication.Identity.SEC_WINNT_AUTH_IDENTITY32 (size: 32)
 */
export interface SEC_WINNT_AUTH_IDENTITY32 {
  /** u32 */
  User: number;
  /** u32 */
  UserLength: number;
  /** u32 */
  Domain: number;
  /** u32 */
  DomainLength: number;
  /** u32 */
  Password: number;
  /** u32 */
  PasswordLength: number;
  /** u32 */
  Flags: number;
}

export const sizeofSEC_WINNT_AUTH_IDENTITY32 = 32;

export function allocSEC_WINNT_AUTH_IDENTITY32(data?: Partial<SEC_WINNT_AUTH_IDENTITY32>): Uint8Array {
  const buf = new Uint8Array(sizeofSEC_WINNT_AUTH_IDENTITY32);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.User !== undefined) view.setUint32(0, Number(data.User), true);
  // 0x04: u32
  if (data?.UserLength !== undefined) view.setUint32(4, Number(data.UserLength), true);
  // 0x08: u32
  if (data?.Domain !== undefined) view.setUint32(8, Number(data.Domain), true);
  // 0x0c: u32
  if (data?.DomainLength !== undefined) view.setUint32(12, Number(data.DomainLength), true);
  // 0x10: u32
  if (data?.Password !== undefined) view.setUint32(16, Number(data.Password), true);
  // 0x14: u32
  if (data?.PasswordLength !== undefined) view.setUint32(20, Number(data.PasswordLength), true);
  // 0x18: u32
  if (data?.Flags !== undefined) view.setUint32(24, Number(data.Flags), true);
  // 0x1c: pad4
  return buf;
}

export class SEC_WINNT_AUTH_IDENTITY32View {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get User(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: u32
  get UserLength(): number {
    return this.view.getUint32(4, true);
  }

  // 0x08: u32
  get Domain(): number {
    return this.view.getUint32(8, true);
  }

  // 0x0c: u32
  get DomainLength(): number {
    return this.view.getUint32(12, true);
  }

  // 0x10: u32
  get Password(): number {
    return this.view.getUint32(16, true);
  }

  // 0x14: u32
  get PasswordLength(): number {
    return this.view.getUint32(20, true);
  }

  // 0x18: u32
  get Flags(): number {
    return this.view.getUint32(24, true);
  }

  // 0x1c: pad4

  // 0x00: u32
  set User(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: u32
  set UserLength(value: number) {
    this.view.setUint32(4, value, true);
  }

  // 0x08: u32
  set Domain(value: number) {
    this.view.setUint32(8, value, true);
  }

  // 0x0c: u32
  set DomainLength(value: number) {
    this.view.setUint32(12, value, true);
  }

  // 0x10: u32
  set Password(value: number) {
    this.view.setUint32(16, value, true);
  }

  // 0x14: u32
  set PasswordLength(value: number) {
    this.view.setUint32(20, value, true);
  }

  // 0x18: u32
  set Flags(value: number) {
    this.view.setUint32(24, value, true);
  }

  // 0x1c: pad4
}

/**
 * Windows.Win32.Security.Authentication.Identity.SEC_WINNT_AUTH_IDENTITY_EX32 (size: 48)
 */
export interface SEC_WINNT_AUTH_IDENTITY_EX32 {
  /** u32 */
  Version: number;
  /** u32 */
  Length: number;
  /** u32 */
  User: number;
  /** u32 */
  UserLength: number;
  /** u32 */
  Domain: number;
  /** u32 */
  DomainLength: number;
  /** u32 */
  Password: number;
  /** u32 */
  PasswordLength: number;
  /** u32 */
  Flags: number;
  /** u32 */
  PackageList: number;
  /** u32 */
  PackageListLength: number;
}

export const sizeofSEC_WINNT_AUTH_IDENTITY_EX32 = 48;

export function allocSEC_WINNT_AUTH_IDENTITY_EX32(data?: Partial<SEC_WINNT_AUTH_IDENTITY_EX32>): Uint8Array {
  const buf = new Uint8Array(sizeofSEC_WINNT_AUTH_IDENTITY_EX32);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.Version !== undefined) view.setUint32(0, Number(data.Version), true);
  // 0x04: u32
  if (data?.Length !== undefined) view.setUint32(4, Number(data.Length), true);
  // 0x08: u32
  if (data?.User !== undefined) view.setUint32(8, Number(data.User), true);
  // 0x0c: u32
  if (data?.UserLength !== undefined) view.setUint32(12, Number(data.UserLength), true);
  // 0x10: u32
  if (data?.Domain !== undefined) view.setUint32(16, Number(data.Domain), true);
  // 0x14: u32
  if (data?.DomainLength !== undefined) view.setUint32(20, Number(data.DomainLength), true);
  // 0x18: u32
  if (data?.Password !== undefined) view.setUint32(24, Number(data.Password), true);
  // 0x1c: u32
  if (data?.PasswordLength !== undefined) view.setUint32(28, Number(data.PasswordLength), true);
  // 0x20: u32
  if (data?.Flags !== undefined) view.setUint32(32, Number(data.Flags), true);
  // 0x24: u32
  if (data?.PackageList !== undefined) view.setUint32(36, Number(data.PackageList), true);
  // 0x28: u32
  if (data?.PackageListLength !== undefined) view.setUint32(40, Number(data.PackageListLength), true);
  // 0x2c: pad4
  return buf;
}

export class SEC_WINNT_AUTH_IDENTITY_EX32View {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get Version(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: u32
  get Length(): number {
    return this.view.getUint32(4, true);
  }

  // 0x08: u32
  get User(): number {
    return this.view.getUint32(8, true);
  }

  // 0x0c: u32
  get UserLength(): number {
    return this.view.getUint32(12, true);
  }

  // 0x10: u32
  get Domain(): number {
    return this.view.getUint32(16, true);
  }

  // 0x14: u32
  get DomainLength(): number {
    return this.view.getUint32(20, true);
  }

  // 0x18: u32
  get Password(): number {
    return this.view.getUint32(24, true);
  }

  // 0x1c: u32
  get PasswordLength(): number {
    return this.view.getUint32(28, true);
  }

  // 0x20: u32
  get Flags(): number {
    return this.view.getUint32(32, true);
  }

  // 0x24: u32
  get PackageList(): number {
    return this.view.getUint32(36, true);
  }

  // 0x28: u32
  get PackageListLength(): number {
    return this.view.getUint32(40, true);
  }

  // 0x2c: pad4

  // 0x00: u32
  set Version(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: u32
  set Length(value: number) {
    this.view.setUint32(4, value, true);
  }

  // 0x08: u32
  set User(value: number) {
    this.view.setUint32(8, value, true);
  }

  // 0x0c: u32
  set UserLength(value: number) {
    this.view.setUint32(12, value, true);
  }

  // 0x10: u32
  set Domain(value: number) {
    this.view.setUint32(16, value, true);
  }

  // 0x14: u32
  set DomainLength(value: number) {
    this.view.setUint32(20, value, true);
  }

  // 0x18: u32
  set Password(value: number) {
    this.view.setUint32(24, value, true);
  }

  // 0x1c: u32
  set PasswordLength(value: number) {
    this.view.setUint32(28, value, true);
  }

  // 0x20: u32
  set Flags(value: number) {
    this.view.setUint32(32, value, true);
  }

  // 0x24: u32
  set PackageList(value: number) {
    this.view.setUint32(36, value, true);
  }

  // 0x28: u32
  set PackageListLength(value: number) {
    this.view.setUint32(40, value, true);
  }

  // 0x2c: pad4
}

/**
 * Windows.Win32.Security.Authentication.Identity.LSA_SECPKG_FUNCTION_TABLE (size: 504)
 */
export interface LSA_SECPKG_FUNCTION_TABLE {
  /** Windows.Win32.Security.Authentication.Identity.PLSA_CREATE_LOGON_SESSION */
  CreateLogonSession: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.Security.Authentication.Identity.PLSA_DELETE_LOGON_SESSION */
  DeleteLogonSession: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.Security.Authentication.Identity.PLSA_ADD_CREDENTIAL */
  AddCredential: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.Security.Authentication.Identity.PLSA_GET_CREDENTIALS */
  GetCredentials: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.Security.Authentication.Identity.PLSA_DELETE_CREDENTIAL */
  DeleteCredential: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.Security.Authentication.Identity.PLSA_ALLOCATE_LSA_HEAP */
  AllocateLsaHeap: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.Security.Authentication.Identity.PLSA_FREE_LSA_HEAP */
  FreeLsaHeap: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.Security.Authentication.Identity.PLSA_ALLOCATE_CLIENT_BUFFER */
  AllocateClientBuffer: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.Security.Authentication.Identity.PLSA_FREE_CLIENT_BUFFER */
  FreeClientBuffer: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.Security.Authentication.Identity.PLSA_COPY_TO_CLIENT_BUFFER */
  CopyToClientBuffer: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.Security.Authentication.Identity.PLSA_COPY_FROM_CLIENT_BUFFER */
  CopyFromClientBuffer: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.Security.Authentication.Identity.PLSA_IMPERSONATE_CLIENT */
  ImpersonateClient: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.Security.Authentication.Identity.PLSA_UNLOAD_PACKAGE */
  UnloadPackage: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.Security.Authentication.Identity.PLSA_DUPLICATE_HANDLE */
  DuplicateHandle: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.Security.Authentication.Identity.PLSA_SAVE_SUPPLEMENTAL_CREDENTIALS */
  SaveSupplementalCredentials: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.Security.Authentication.Identity.PLSA_CREATE_THREAD */
  CreateThread: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.Security.Authentication.Identity.PLSA_GET_CLIENT_INFO */
  GetClientInfo: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.Security.Authentication.Identity.PLSA_REGISTER_NOTIFICATION */
  RegisterNotification: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.Security.Authentication.Identity.PLSA_CANCEL_NOTIFICATION */
  CancelNotification: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.Security.Authentication.Identity.PLSA_MAP_BUFFER */
  MapBuffer: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.Security.Authentication.Identity.PLSA_CREATE_TOKEN */
  CreateToken: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.Security.Authentication.Identity.PLSA_AUDIT_LOGON */
  AuditLogon: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.Security.Authentication.Identity.PLSA_CALL_PACKAGE */
  CallPackage: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.Security.Authentication.Identity.PLSA_FREE_LSA_HEAP */
  FreeReturnBuffer: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.Security.Authentication.Identity.PLSA_GET_CALL_INFO */
  GetCallInfo: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.Security.Authentication.Identity.PLSA_CALL_PACKAGEEX */
  CallPackageEx: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.Security.Authentication.Identity.PLSA_CREATE_SHARED_MEMORY */
  CreateSharedMemory: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.Security.Authentication.Identity.PLSA_ALLOCATE_SHARED_MEMORY */
  AllocateSharedMemory: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.Security.Authentication.Identity.PLSA_FREE_SHARED_MEMORY */
  FreeSharedMemory: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.Security.Authentication.Identity.PLSA_DELETE_SHARED_MEMORY */
  DeleteSharedMemory: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.Security.Authentication.Identity.PLSA_OPEN_SAM_USER */
  OpenSamUser: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.Security.Authentication.Identity.PLSA_GET_USER_CREDENTIALS */
  GetUserCredentials: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.Security.Authentication.Identity.PLSA_GET_USER_AUTH_DATA */
  GetUserAuthData: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.Security.Authentication.Identity.PLSA_CLOSE_SAM_USER */
  CloseSamUser: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.Security.Authentication.Identity.PLSA_CONVERT_AUTH_DATA_TO_TOKEN */
  ConvertAuthDataToToken: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.Security.Authentication.Identity.PLSA_CLIENT_CALLBACK */
  ClientCallback: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.Security.Authentication.Identity.PLSA_UPDATE_PRIMARY_CREDENTIALS */
  UpdateCredentials: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.Security.Authentication.Identity.PLSA_GET_AUTH_DATA_FOR_USER */
  GetAuthDataForUser: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.Security.Authentication.Identity.PLSA_CRACK_SINGLE_NAME */
  CrackSingleName: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.Security.Authentication.Identity.PLSA_AUDIT_ACCOUNT_LOGON */
  AuditAccountLogon: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.Security.Authentication.Identity.PLSA_CALL_PACKAGE_PASSTHROUGH */
  CallPackagePassthrough: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.Security.Authentication.Identity.CredReadFn */
  CrediRead: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.Security.Authentication.Identity.CredReadDomainCredentialsFn */
  CrediReadDomainCredentials: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.Security.Authentication.Identity.CredFreeCredentialsFn */
  CrediFreeCredentials: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.Security.Authentication.Identity.PLSA_PROTECT_MEMORY */
  LsaProtectMemory: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.Security.Authentication.Identity.PLSA_PROTECT_MEMORY */
  LsaUnprotectMemory: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.Security.Authentication.Identity.PLSA_OPEN_TOKEN_BY_LOGON_ID */
  OpenTokenByLogonId: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.Security.Authentication.Identity.PLSA_EXPAND_AUTH_DATA_FOR_DOMAIN */
  ExpandAuthDataForDomain: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.Security.Authentication.Identity.PLSA_ALLOCATE_PRIVATE_HEAP */
  AllocatePrivateHeap: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.Security.Authentication.Identity.PLSA_FREE_PRIVATE_HEAP */
  FreePrivateHeap: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.Security.Authentication.Identity.PLSA_CREATE_TOKEN_EX */
  CreateTokenEx: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.Security.Authentication.Identity.CredWriteFn */
  CrediWrite: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.Security.Authentication.Identity.CrediUnmarshalandDecodeStringFn */
  CrediUnmarshalandDecodeString: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.Security.Authentication.Identity.PLSA_PROTECT_MEMORY */
  DummyFunction6: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.Security.Authentication.Identity.PLSA_GET_EXTENDED_CALL_FLAGS */
  GetExtendedCallFlags: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.Security.Authentication.Identity.PLSA_DUPLICATE_HANDLE */
  DuplicateTokenHandle: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.Security.Authentication.Identity.PLSA_GET_SERVICE_ACCOUNT_PASSWORD */
  GetServiceAccountPassword: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.Security.Authentication.Identity.PLSA_PROTECT_MEMORY */
  DummyFunction7: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.Security.Authentication.Identity.PLSA_AUDIT_LOGON_EX */
  AuditLogonEx: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.Security.Authentication.Identity.PLSA_CHECK_PROTECTED_USER_BY_TOKEN */
  CheckProtectedUserByToken: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.Security.Authentication.Identity.PLSA_QUERY_CLIENT_REQUEST */
  QueryClientRequest: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.Security.Authentication.Identity.PLSA_GET_APP_MODE_INFO */
  GetAppModeInfo: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.Security.Authentication.Identity.PLSA_SET_APP_MODE_INFO */
  SetAppModeInfo: Uint8Array | Deno.PointerValue;
}

export const sizeofLSA_SECPKG_FUNCTION_TABLE = 504;

export function allocLSA_SECPKG_FUNCTION_TABLE(data?: Partial<LSA_SECPKG_FUNCTION_TABLE>): Uint8Array {
  const buf = new Uint8Array(sizeofLSA_SECPKG_FUNCTION_TABLE);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.CreateLogonSession !== undefined) view.setBigUint64(0, data.CreateLogonSession === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.CreateLogonSession))), true);
  // 0x08: pointer
  if (data?.DeleteLogonSession !== undefined) view.setBigUint64(8, data.DeleteLogonSession === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.DeleteLogonSession))), true);
  // 0x10: pointer
  if (data?.AddCredential !== undefined) view.setBigUint64(16, data.AddCredential === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.AddCredential))), true);
  // 0x18: pointer
  if (data?.GetCredentials !== undefined) view.setBigUint64(24, data.GetCredentials === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.GetCredentials))), true);
  // 0x20: pointer
  if (data?.DeleteCredential !== undefined) view.setBigUint64(32, data.DeleteCredential === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.DeleteCredential))), true);
  // 0x28: pointer
  if (data?.AllocateLsaHeap !== undefined) view.setBigUint64(40, data.AllocateLsaHeap === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.AllocateLsaHeap))), true);
  // 0x30: pointer
  if (data?.FreeLsaHeap !== undefined) view.setBigUint64(48, data.FreeLsaHeap === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.FreeLsaHeap))), true);
  // 0x38: pointer
  if (data?.AllocateClientBuffer !== undefined) view.setBigUint64(56, data.AllocateClientBuffer === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.AllocateClientBuffer))), true);
  // 0x40: pointer
  if (data?.FreeClientBuffer !== undefined) view.setBigUint64(64, data.FreeClientBuffer === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.FreeClientBuffer))), true);
  // 0x48: pointer
  if (data?.CopyToClientBuffer !== undefined) view.setBigUint64(72, data.CopyToClientBuffer === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.CopyToClientBuffer))), true);
  // 0x50: pointer
  if (data?.CopyFromClientBuffer !== undefined) view.setBigUint64(80, data.CopyFromClientBuffer === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.CopyFromClientBuffer))), true);
  // 0x58: pointer
  if (data?.ImpersonateClient !== undefined) view.setBigUint64(88, data.ImpersonateClient === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.ImpersonateClient))), true);
  // 0x60: pointer
  if (data?.UnloadPackage !== undefined) view.setBigUint64(96, data.UnloadPackage === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.UnloadPackage))), true);
  // 0x68: pointer
  if (data?.DuplicateHandle !== undefined) view.setBigUint64(104, data.DuplicateHandle === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.DuplicateHandle))), true);
  // 0x70: pointer
  if (data?.SaveSupplementalCredentials !== undefined) view.setBigUint64(112, data.SaveSupplementalCredentials === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.SaveSupplementalCredentials))), true);
  // 0x78: pointer
  if (data?.CreateThread !== undefined) view.setBigUint64(120, data.CreateThread === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.CreateThread))), true);
  // 0x80: pointer
  if (data?.GetClientInfo !== undefined) view.setBigUint64(128, data.GetClientInfo === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.GetClientInfo))), true);
  // 0x88: pointer
  if (data?.RegisterNotification !== undefined) view.setBigUint64(136, data.RegisterNotification === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.RegisterNotification))), true);
  // 0x90: pointer
  if (data?.CancelNotification !== undefined) view.setBigUint64(144, data.CancelNotification === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.CancelNotification))), true);
  // 0x98: pointer
  if (data?.MapBuffer !== undefined) view.setBigUint64(152, data.MapBuffer === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.MapBuffer))), true);
  // 0xa0: pointer
  if (data?.CreateToken !== undefined) view.setBigUint64(160, data.CreateToken === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.CreateToken))), true);
  // 0xa8: pointer
  if (data?.AuditLogon !== undefined) view.setBigUint64(168, data.AuditLogon === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.AuditLogon))), true);
  // 0xb0: pointer
  if (data?.CallPackage !== undefined) view.setBigUint64(176, data.CallPackage === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.CallPackage))), true);
  // 0xb8: pointer
  if (data?.FreeReturnBuffer !== undefined) view.setBigUint64(184, data.FreeReturnBuffer === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.FreeReturnBuffer))), true);
  // 0xc0: pointer
  if (data?.GetCallInfo !== undefined) view.setBigUint64(192, data.GetCallInfo === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.GetCallInfo))), true);
  // 0xc8: pointer
  if (data?.CallPackageEx !== undefined) view.setBigUint64(200, data.CallPackageEx === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.CallPackageEx))), true);
  // 0xd0: pointer
  if (data?.CreateSharedMemory !== undefined) view.setBigUint64(208, data.CreateSharedMemory === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.CreateSharedMemory))), true);
  // 0xd8: pointer
  if (data?.AllocateSharedMemory !== undefined) view.setBigUint64(216, data.AllocateSharedMemory === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.AllocateSharedMemory))), true);
  // 0xe0: pointer
  if (data?.FreeSharedMemory !== undefined) view.setBigUint64(224, data.FreeSharedMemory === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.FreeSharedMemory))), true);
  // 0xe8: pointer
  if (data?.DeleteSharedMemory !== undefined) view.setBigUint64(232, data.DeleteSharedMemory === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.DeleteSharedMemory))), true);
  // 0xf0: pointer
  if (data?.OpenSamUser !== undefined) view.setBigUint64(240, data.OpenSamUser === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.OpenSamUser))), true);
  // 0xf8: pointer
  if (data?.GetUserCredentials !== undefined) view.setBigUint64(248, data.GetUserCredentials === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.GetUserCredentials))), true);
  // 0x100: pointer
  if (data?.GetUserAuthData !== undefined) view.setBigUint64(256, data.GetUserAuthData === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.GetUserAuthData))), true);
  // 0x108: pointer
  if (data?.CloseSamUser !== undefined) view.setBigUint64(264, data.CloseSamUser === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.CloseSamUser))), true);
  // 0x110: pointer
  if (data?.ConvertAuthDataToToken !== undefined) view.setBigUint64(272, data.ConvertAuthDataToToken === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.ConvertAuthDataToToken))), true);
  // 0x118: pointer
  if (data?.ClientCallback !== undefined) view.setBigUint64(280, data.ClientCallback === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.ClientCallback))), true);
  // 0x120: pointer
  if (data?.UpdateCredentials !== undefined) view.setBigUint64(288, data.UpdateCredentials === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.UpdateCredentials))), true);
  // 0x128: pointer
  if (data?.GetAuthDataForUser !== undefined) view.setBigUint64(296, data.GetAuthDataForUser === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.GetAuthDataForUser))), true);
  // 0x130: pointer
  if (data?.CrackSingleName !== undefined) view.setBigUint64(304, data.CrackSingleName === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.CrackSingleName))), true);
  // 0x138: pointer
  if (data?.AuditAccountLogon !== undefined) view.setBigUint64(312, data.AuditAccountLogon === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.AuditAccountLogon))), true);
  // 0x140: pointer
  if (data?.CallPackagePassthrough !== undefined) view.setBigUint64(320, data.CallPackagePassthrough === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.CallPackagePassthrough))), true);
  // 0x148: pointer
  if (data?.CrediRead !== undefined) view.setBigUint64(328, data.CrediRead === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.CrediRead))), true);
  // 0x150: pointer
  if (data?.CrediReadDomainCredentials !== undefined) view.setBigUint64(336, data.CrediReadDomainCredentials === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.CrediReadDomainCredentials))), true);
  // 0x158: pointer
  if (data?.CrediFreeCredentials !== undefined) view.setBigUint64(344, data.CrediFreeCredentials === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.CrediFreeCredentials))), true);
  // 0x160: pointer
  if (data?.LsaProtectMemory !== undefined) view.setBigUint64(352, data.LsaProtectMemory === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.LsaProtectMemory))), true);
  // 0x168: pointer
  if (data?.LsaUnprotectMemory !== undefined) view.setBigUint64(360, data.LsaUnprotectMemory === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.LsaUnprotectMemory))), true);
  // 0x170: pointer
  if (data?.OpenTokenByLogonId !== undefined) view.setBigUint64(368, data.OpenTokenByLogonId === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.OpenTokenByLogonId))), true);
  // 0x178: pointer
  if (data?.ExpandAuthDataForDomain !== undefined) view.setBigUint64(376, data.ExpandAuthDataForDomain === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.ExpandAuthDataForDomain))), true);
  // 0x180: pointer
  if (data?.AllocatePrivateHeap !== undefined) view.setBigUint64(384, data.AllocatePrivateHeap === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.AllocatePrivateHeap))), true);
  // 0x188: pointer
  if (data?.FreePrivateHeap !== undefined) view.setBigUint64(392, data.FreePrivateHeap === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.FreePrivateHeap))), true);
  // 0x190: pointer
  if (data?.CreateTokenEx !== undefined) view.setBigUint64(400, data.CreateTokenEx === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.CreateTokenEx))), true);
  // 0x198: pointer
  if (data?.CrediWrite !== undefined) view.setBigUint64(408, data.CrediWrite === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.CrediWrite))), true);
  // 0x1a0: pointer
  if (data?.CrediUnmarshalandDecodeString !== undefined) view.setBigUint64(416, data.CrediUnmarshalandDecodeString === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.CrediUnmarshalandDecodeString))), true);
  // 0x1a8: pointer
  if (data?.DummyFunction6 !== undefined) view.setBigUint64(424, data.DummyFunction6 === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.DummyFunction6))), true);
  // 0x1b0: pointer
  if (data?.GetExtendedCallFlags !== undefined) view.setBigUint64(432, data.GetExtendedCallFlags === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.GetExtendedCallFlags))), true);
  // 0x1b8: pointer
  if (data?.DuplicateTokenHandle !== undefined) view.setBigUint64(440, data.DuplicateTokenHandle === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.DuplicateTokenHandle))), true);
  // 0x1c0: pointer
  if (data?.GetServiceAccountPassword !== undefined) view.setBigUint64(448, data.GetServiceAccountPassword === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.GetServiceAccountPassword))), true);
  // 0x1c8: pointer
  if (data?.DummyFunction7 !== undefined) view.setBigUint64(456, data.DummyFunction7 === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.DummyFunction7))), true);
  // 0x1d0: pointer
  if (data?.AuditLogonEx !== undefined) view.setBigUint64(464, data.AuditLogonEx === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.AuditLogonEx))), true);
  // 0x1d8: pointer
  if (data?.CheckProtectedUserByToken !== undefined) view.setBigUint64(472, data.CheckProtectedUserByToken === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.CheckProtectedUserByToken))), true);
  // 0x1e0: pointer
  if (data?.QueryClientRequest !== undefined) view.setBigUint64(480, data.QueryClientRequest === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.QueryClientRequest))), true);
  // 0x1e8: pointer
  if (data?.GetAppModeInfo !== undefined) view.setBigUint64(488, data.GetAppModeInfo === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.GetAppModeInfo))), true);
  // 0x1f0: pointer
  if (data?.SetAppModeInfo !== undefined) view.setBigUint64(496, data.SetAppModeInfo === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.SetAppModeInfo))), true);
  return buf;
}

export class LSA_SECPKG_FUNCTION_TABLEView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get CreateLogonSession(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(0, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x08: pointer
  get DeleteLogonSession(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x10: pointer
  get AddCredential(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(16, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x18: pointer
  get GetCredentials(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(24, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x20: pointer
  get DeleteCredential(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(32, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x28: pointer
  get AllocateLsaHeap(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(40, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x30: pointer
  get FreeLsaHeap(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(48, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x38: pointer
  get AllocateClientBuffer(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(56, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x40: pointer
  get FreeClientBuffer(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(64, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x48: pointer
  get CopyToClientBuffer(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(72, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x50: pointer
  get CopyFromClientBuffer(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(80, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x58: pointer
  get ImpersonateClient(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(88, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x60: pointer
  get UnloadPackage(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(96, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x68: pointer
  get DuplicateHandle(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(104, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x70: pointer
  get SaveSupplementalCredentials(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(112, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x78: pointer
  get CreateThread(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(120, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x80: pointer
  get GetClientInfo(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(128, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x88: pointer
  get RegisterNotification(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(136, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x90: pointer
  get CancelNotification(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(144, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x98: pointer
  get MapBuffer(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(152, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0xa0: pointer
  get CreateToken(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(160, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0xa8: pointer
  get AuditLogon(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(168, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0xb0: pointer
  get CallPackage(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(176, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0xb8: pointer
  get FreeReturnBuffer(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(184, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0xc0: pointer
  get GetCallInfo(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(192, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0xc8: pointer
  get CallPackageEx(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(200, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0xd0: pointer
  get CreateSharedMemory(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(208, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0xd8: pointer
  get AllocateSharedMemory(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(216, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0xe0: pointer
  get FreeSharedMemory(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(224, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0xe8: pointer
  get DeleteSharedMemory(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(232, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0xf0: pointer
  get OpenSamUser(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(240, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0xf8: pointer
  get GetUserCredentials(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(248, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x100: pointer
  get GetUserAuthData(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(256, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x108: pointer
  get CloseSamUser(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(264, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x110: pointer
  get ConvertAuthDataToToken(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(272, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x118: pointer
  get ClientCallback(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(280, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x120: pointer
  get UpdateCredentials(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(288, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x128: pointer
  get GetAuthDataForUser(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(296, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x130: pointer
  get CrackSingleName(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(304, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x138: pointer
  get AuditAccountLogon(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(312, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x140: pointer
  get CallPackagePassthrough(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(320, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x148: pointer
  get CrediRead(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(328, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x150: pointer
  get CrediReadDomainCredentials(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(336, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x158: pointer
  get CrediFreeCredentials(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(344, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x160: pointer
  get LsaProtectMemory(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(352, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x168: pointer
  get LsaUnprotectMemory(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(360, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x170: pointer
  get OpenTokenByLogonId(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(368, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x178: pointer
  get ExpandAuthDataForDomain(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(376, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x180: pointer
  get AllocatePrivateHeap(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(384, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x188: pointer
  get FreePrivateHeap(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(392, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x190: pointer
  get CreateTokenEx(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(400, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x198: pointer
  get CrediWrite(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(408, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x1a0: pointer
  get CrediUnmarshalandDecodeString(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(416, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x1a8: pointer
  get DummyFunction6(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(424, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x1b0: pointer
  get GetExtendedCallFlags(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(432, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x1b8: pointer
  get DuplicateTokenHandle(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(440, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x1c0: pointer
  get GetServiceAccountPassword(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(448, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x1c8: pointer
  get DummyFunction7(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(456, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x1d0: pointer
  get AuditLogonEx(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(464, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x1d8: pointer
  get CheckProtectedUserByToken(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(472, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x1e0: pointer
  get QueryClientRequest(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(480, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x1e8: pointer
  get GetAppModeInfo(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(488, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x1f0: pointer
  get SetAppModeInfo(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(496, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: pointer
  set CreateLogonSession(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(0, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x08: pointer
  set DeleteLogonSession(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x10: pointer
  set AddCredential(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(16, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x18: pointer
  set GetCredentials(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(24, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x20: pointer
  set DeleteCredential(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(32, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x28: pointer
  set AllocateLsaHeap(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(40, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x30: pointer
  set FreeLsaHeap(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(48, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x38: pointer
  set AllocateClientBuffer(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(56, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x40: pointer
  set FreeClientBuffer(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(64, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x48: pointer
  set CopyToClientBuffer(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(72, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x50: pointer
  set CopyFromClientBuffer(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(80, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x58: pointer
  set ImpersonateClient(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(88, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x60: pointer
  set UnloadPackage(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(96, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x68: pointer
  set DuplicateHandle(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(104, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x70: pointer
  set SaveSupplementalCredentials(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(112, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x78: pointer
  set CreateThread(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(120, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x80: pointer
  set GetClientInfo(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(128, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x88: pointer
  set RegisterNotification(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(136, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x90: pointer
  set CancelNotification(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(144, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x98: pointer
  set MapBuffer(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(152, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0xa0: pointer
  set CreateToken(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(160, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0xa8: pointer
  set AuditLogon(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(168, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0xb0: pointer
  set CallPackage(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(176, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0xb8: pointer
  set FreeReturnBuffer(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(184, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0xc0: pointer
  set GetCallInfo(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(192, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0xc8: pointer
  set CallPackageEx(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(200, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0xd0: pointer
  set CreateSharedMemory(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(208, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0xd8: pointer
  set AllocateSharedMemory(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(216, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0xe0: pointer
  set FreeSharedMemory(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(224, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0xe8: pointer
  set DeleteSharedMemory(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(232, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0xf0: pointer
  set OpenSamUser(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(240, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0xf8: pointer
  set GetUserCredentials(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(248, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x100: pointer
  set GetUserAuthData(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(256, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x108: pointer
  set CloseSamUser(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(264, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x110: pointer
  set ConvertAuthDataToToken(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(272, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x118: pointer
  set ClientCallback(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(280, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x120: pointer
  set UpdateCredentials(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(288, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x128: pointer
  set GetAuthDataForUser(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(296, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x130: pointer
  set CrackSingleName(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(304, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x138: pointer
  set AuditAccountLogon(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(312, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x140: pointer
  set CallPackagePassthrough(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(320, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x148: pointer
  set CrediRead(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(328, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x150: pointer
  set CrediReadDomainCredentials(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(336, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x158: pointer
  set CrediFreeCredentials(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(344, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x160: pointer
  set LsaProtectMemory(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(352, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x168: pointer
  set LsaUnprotectMemory(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(360, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x170: pointer
  set OpenTokenByLogonId(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(368, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x178: pointer
  set ExpandAuthDataForDomain(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(376, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x180: pointer
  set AllocatePrivateHeap(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(384, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x188: pointer
  set FreePrivateHeap(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(392, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x190: pointer
  set CreateTokenEx(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(400, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x198: pointer
  set CrediWrite(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(408, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x1a0: pointer
  set CrediUnmarshalandDecodeString(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(416, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x1a8: pointer
  set DummyFunction6(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(424, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x1b0: pointer
  set GetExtendedCallFlags(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(432, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x1b8: pointer
  set DuplicateTokenHandle(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(440, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x1c0: pointer
  set GetServiceAccountPassword(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(448, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x1c8: pointer
  set DummyFunction7(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(456, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x1d0: pointer
  set AuditLogonEx(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(464, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x1d8: pointer
  set CheckProtectedUserByToken(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(472, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x1e0: pointer
  set QueryClientRequest(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(480, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x1e8: pointer
  set GetAppModeInfo(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(488, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x1f0: pointer
  set SetAppModeInfo(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(496, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.Security.Authentication.Identity.SECPKG_DLL_FUNCTIONS (size: 32)
 */
export interface SECPKG_DLL_FUNCTIONS {
  /** Windows.Win32.Security.Authentication.Identity.PLSA_ALLOCATE_LSA_HEAP */
  AllocateHeap: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.Security.Authentication.Identity.PLSA_FREE_LSA_HEAP */
  FreeHeap: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.Security.Authentication.Identity.PLSA_REGISTER_CALLBACK */
  RegisterCallback: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.Security.Authentication.Identity.PLSA_LOCATE_PKG_BY_ID */
  LocatePackageById: Uint8Array | Deno.PointerValue;
}

export const sizeofSECPKG_DLL_FUNCTIONS = 32;

export function allocSECPKG_DLL_FUNCTIONS(data?: Partial<SECPKG_DLL_FUNCTIONS>): Uint8Array {
  const buf = new Uint8Array(sizeofSECPKG_DLL_FUNCTIONS);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.AllocateHeap !== undefined) view.setBigUint64(0, data.AllocateHeap === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.AllocateHeap))), true);
  // 0x08: pointer
  if (data?.FreeHeap !== undefined) view.setBigUint64(8, data.FreeHeap === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.FreeHeap))), true);
  // 0x10: pointer
  if (data?.RegisterCallback !== undefined) view.setBigUint64(16, data.RegisterCallback === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.RegisterCallback))), true);
  // 0x18: pointer
  if (data?.LocatePackageById !== undefined) view.setBigUint64(24, data.LocatePackageById === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.LocatePackageById))), true);
  return buf;
}

export class SECPKG_DLL_FUNCTIONSView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get AllocateHeap(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(0, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x08: pointer
  get FreeHeap(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x10: pointer
  get RegisterCallback(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(16, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x18: pointer
  get LocatePackageById(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(24, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: pointer
  set AllocateHeap(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(0, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x08: pointer
  set FreeHeap(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x10: pointer
  set RegisterCallback(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(16, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x18: pointer
  set LocatePackageById(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(24, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.Security.Authentication.Identity.SECPKG_FUNCTION_TABLE (size: 336)
 */
export interface SECPKG_FUNCTION_TABLE {
  /** Windows.Win32.Security.Authentication.Identity.PLSA_AP_INITIALIZE_PACKAGE */
  InitializePackage: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.Security.Authentication.Identity.PLSA_AP_LOGON_USER */
  LogonUserA: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.Security.Authentication.Identity.PLSA_AP_CALL_PACKAGE */
  CallPackage: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.Security.Authentication.Identity.PLSA_AP_LOGON_TERMINATED */
  LogonTerminated: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.Security.Authentication.Identity.PLSA_AP_CALL_PACKAGE */
  CallPackageUntrusted: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.Security.Authentication.Identity.PLSA_AP_CALL_PACKAGE_PASSTHROUGH */
  CallPackagePassthrough: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.Security.Authentication.Identity.PLSA_AP_LOGON_USER_EX */
  LogonUserExA: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.Security.Authentication.Identity.PLSA_AP_LOGON_USER_EX2 */
  LogonUserEx2: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.Security.Authentication.Identity.SpInitializeFn */
  Initialize: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.Security.Authentication.Identity.SpShutdownFn */
  Shutdown: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.Security.Authentication.Identity.SpGetInfoFn */
  GetInfo: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.Security.Authentication.Identity.SpAcceptCredentialsFn */
  AcceptCredentials: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.Security.Authentication.Identity.SpAcquireCredentialsHandleFn */
  AcquireCredentialsHandleA: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.Security.Authentication.Identity.SpQueryCredentialsAttributesFn */
  QueryCredentialsAttributesA: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.Security.Authentication.Identity.SpFreeCredentialsHandleFn */
  FreeCredentialsHandle: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.Security.Authentication.Identity.SpSaveCredentialsFn */
  SaveCredentials: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.Security.Authentication.Identity.SpGetCredentialsFn */
  GetCredentials: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.Security.Authentication.Identity.SpDeleteCredentialsFn */
  DeleteCredentials: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.Security.Authentication.Identity.SpInitLsaModeContextFn */
  InitLsaModeContext: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.Security.Authentication.Identity.SpAcceptLsaModeContextFn */
  AcceptLsaModeContext: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.Security.Authentication.Identity.SpDeleteContextFn */
  DeleteContext: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.Security.Authentication.Identity.SpApplyControlTokenFn */
  ApplyControlToken: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.Security.Authentication.Identity.SpGetUserInfoFn */
  GetUserInfo: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.Security.Authentication.Identity.SpGetExtendedInformationFn */
  GetExtendedInformation: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.Security.Authentication.Identity.SpQueryContextAttributesFn */
  QueryContextAttributesA: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.Security.Authentication.Identity.SpAddCredentialsFn */
  AddCredentialsA: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.Security.Authentication.Identity.SpSetExtendedInformationFn */
  SetExtendedInformation: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.Security.Authentication.Identity.SpSetContextAttributesFn */
  SetContextAttributesA: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.Security.Authentication.Identity.SpSetCredentialsAttributesFn */
  SetCredentialsAttributesA: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.Security.Authentication.Identity.SpChangeAccountPasswordFn */
  ChangeAccountPasswordA: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.Security.Authentication.Identity.SpQueryMetaDataFn */
  QueryMetaData: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.Security.Authentication.Identity.SpExchangeMetaDataFn */
  ExchangeMetaData: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.Security.Authentication.Identity.SpGetCredUIContextFn */
  GetCredUIContext: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.Security.Authentication.Identity.SpUpdateCredentialsFn */
  UpdateCredentials: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.Security.Authentication.Identity.SpValidateTargetInfoFn */
  ValidateTargetInfo: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.Security.Authentication.Identity.LSA_AP_POST_LOGON_USER */
  PostLogonUser: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.Security.Authentication.Identity.SpGetRemoteCredGuardLogonBufferFn */
  GetRemoteCredGuardLogonBuffer: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.Security.Authentication.Identity.SpGetRemoteCredGuardSupplementalCredsFn */
  GetRemoteCredGuardSupplementalCreds: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.Security.Authentication.Identity.SpGetTbalSupplementalCredsFn */
  GetTbalSupplementalCreds: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.Security.Authentication.Identity.PLSA_AP_LOGON_USER_EX3 */
  LogonUserEx3: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.Security.Authentication.Identity.PLSA_AP_PRE_LOGON_USER_SURROGATE */
  PreLogonUserSurrogate: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.Security.Authentication.Identity.PLSA_AP_POST_LOGON_USER_SURROGATE */
  PostLogonUserSurrogate: Uint8Array | Deno.PointerValue;
}

export const sizeofSECPKG_FUNCTION_TABLE = 336;

export function allocSECPKG_FUNCTION_TABLE(data?: Partial<SECPKG_FUNCTION_TABLE>): Uint8Array {
  const buf = new Uint8Array(sizeofSECPKG_FUNCTION_TABLE);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.InitializePackage !== undefined) view.setBigUint64(0, data.InitializePackage === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.InitializePackage))), true);
  // 0x08: pointer
  if (data?.LogonUserA !== undefined) view.setBigUint64(8, data.LogonUserA === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.LogonUserA))), true);
  // 0x10: pointer
  if (data?.CallPackage !== undefined) view.setBigUint64(16, data.CallPackage === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.CallPackage))), true);
  // 0x18: pointer
  if (data?.LogonTerminated !== undefined) view.setBigUint64(24, data.LogonTerminated === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.LogonTerminated))), true);
  // 0x20: pointer
  if (data?.CallPackageUntrusted !== undefined) view.setBigUint64(32, data.CallPackageUntrusted === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.CallPackageUntrusted))), true);
  // 0x28: pointer
  if (data?.CallPackagePassthrough !== undefined) view.setBigUint64(40, data.CallPackagePassthrough === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.CallPackagePassthrough))), true);
  // 0x30: pointer
  if (data?.LogonUserExA !== undefined) view.setBigUint64(48, data.LogonUserExA === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.LogonUserExA))), true);
  // 0x38: pointer
  if (data?.LogonUserEx2 !== undefined) view.setBigUint64(56, data.LogonUserEx2 === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.LogonUserEx2))), true);
  // 0x40: pointer
  if (data?.Initialize !== undefined) view.setBigUint64(64, data.Initialize === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.Initialize))), true);
  // 0x48: pointer
  if (data?.Shutdown !== undefined) view.setBigUint64(72, data.Shutdown === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.Shutdown))), true);
  // 0x50: pointer
  if (data?.GetInfo !== undefined) view.setBigUint64(80, data.GetInfo === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.GetInfo))), true);
  // 0x58: pointer
  if (data?.AcceptCredentials !== undefined) view.setBigUint64(88, data.AcceptCredentials === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.AcceptCredentials))), true);
  // 0x60: pointer
  if (data?.AcquireCredentialsHandleA !== undefined) view.setBigUint64(96, data.AcquireCredentialsHandleA === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.AcquireCredentialsHandleA))), true);
  // 0x68: pointer
  if (data?.QueryCredentialsAttributesA !== undefined) view.setBigUint64(104, data.QueryCredentialsAttributesA === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.QueryCredentialsAttributesA))), true);
  // 0x70: pointer
  if (data?.FreeCredentialsHandle !== undefined) view.setBigUint64(112, data.FreeCredentialsHandle === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.FreeCredentialsHandle))), true);
  // 0x78: pointer
  if (data?.SaveCredentials !== undefined) view.setBigUint64(120, data.SaveCredentials === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.SaveCredentials))), true);
  // 0x80: pointer
  if (data?.GetCredentials !== undefined) view.setBigUint64(128, data.GetCredentials === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.GetCredentials))), true);
  // 0x88: pointer
  if (data?.DeleteCredentials !== undefined) view.setBigUint64(136, data.DeleteCredentials === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.DeleteCredentials))), true);
  // 0x90: pointer
  if (data?.InitLsaModeContext !== undefined) view.setBigUint64(144, data.InitLsaModeContext === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.InitLsaModeContext))), true);
  // 0x98: pointer
  if (data?.AcceptLsaModeContext !== undefined) view.setBigUint64(152, data.AcceptLsaModeContext === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.AcceptLsaModeContext))), true);
  // 0xa0: pointer
  if (data?.DeleteContext !== undefined) view.setBigUint64(160, data.DeleteContext === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.DeleteContext))), true);
  // 0xa8: pointer
  if (data?.ApplyControlToken !== undefined) view.setBigUint64(168, data.ApplyControlToken === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.ApplyControlToken))), true);
  // 0xb0: pointer
  if (data?.GetUserInfo !== undefined) view.setBigUint64(176, data.GetUserInfo === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.GetUserInfo))), true);
  // 0xb8: pointer
  if (data?.GetExtendedInformation !== undefined) view.setBigUint64(184, data.GetExtendedInformation === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.GetExtendedInformation))), true);
  // 0xc0: pointer
  if (data?.QueryContextAttributesA !== undefined) view.setBigUint64(192, data.QueryContextAttributesA === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.QueryContextAttributesA))), true);
  // 0xc8: pointer
  if (data?.AddCredentialsA !== undefined) view.setBigUint64(200, data.AddCredentialsA === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.AddCredentialsA))), true);
  // 0xd0: pointer
  if (data?.SetExtendedInformation !== undefined) view.setBigUint64(208, data.SetExtendedInformation === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.SetExtendedInformation))), true);
  // 0xd8: pointer
  if (data?.SetContextAttributesA !== undefined) view.setBigUint64(216, data.SetContextAttributesA === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.SetContextAttributesA))), true);
  // 0xe0: pointer
  if (data?.SetCredentialsAttributesA !== undefined) view.setBigUint64(224, data.SetCredentialsAttributesA === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.SetCredentialsAttributesA))), true);
  // 0xe8: pointer
  if (data?.ChangeAccountPasswordA !== undefined) view.setBigUint64(232, data.ChangeAccountPasswordA === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.ChangeAccountPasswordA))), true);
  // 0xf0: pointer
  if (data?.QueryMetaData !== undefined) view.setBigUint64(240, data.QueryMetaData === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.QueryMetaData))), true);
  // 0xf8: pointer
  if (data?.ExchangeMetaData !== undefined) view.setBigUint64(248, data.ExchangeMetaData === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.ExchangeMetaData))), true);
  // 0x100: pointer
  if (data?.GetCredUIContext !== undefined) view.setBigUint64(256, data.GetCredUIContext === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.GetCredUIContext))), true);
  // 0x108: pointer
  if (data?.UpdateCredentials !== undefined) view.setBigUint64(264, data.UpdateCredentials === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.UpdateCredentials))), true);
  // 0x110: pointer
  if (data?.ValidateTargetInfo !== undefined) view.setBigUint64(272, data.ValidateTargetInfo === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.ValidateTargetInfo))), true);
  // 0x118: pointer
  if (data?.PostLogonUser !== undefined) view.setBigUint64(280, data.PostLogonUser === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.PostLogonUser))), true);
  // 0x120: pointer
  if (data?.GetRemoteCredGuardLogonBuffer !== undefined) view.setBigUint64(288, data.GetRemoteCredGuardLogonBuffer === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.GetRemoteCredGuardLogonBuffer))), true);
  // 0x128: pointer
  if (data?.GetRemoteCredGuardSupplementalCreds !== undefined) view.setBigUint64(296, data.GetRemoteCredGuardSupplementalCreds === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.GetRemoteCredGuardSupplementalCreds))), true);
  // 0x130: pointer
  if (data?.GetTbalSupplementalCreds !== undefined) view.setBigUint64(304, data.GetTbalSupplementalCreds === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.GetTbalSupplementalCreds))), true);
  // 0x138: pointer
  if (data?.LogonUserEx3 !== undefined) view.setBigUint64(312, data.LogonUserEx3 === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.LogonUserEx3))), true);
  // 0x140: pointer
  if (data?.PreLogonUserSurrogate !== undefined) view.setBigUint64(320, data.PreLogonUserSurrogate === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.PreLogonUserSurrogate))), true);
  // 0x148: pointer
  if (data?.PostLogonUserSurrogate !== undefined) view.setBigUint64(328, data.PostLogonUserSurrogate === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.PostLogonUserSurrogate))), true);
  return buf;
}

export class SECPKG_FUNCTION_TABLEView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get InitializePackage(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(0, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x08: pointer
  get LogonUserA(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x10: pointer
  get CallPackage(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(16, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x18: pointer
  get LogonTerminated(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(24, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x20: pointer
  get CallPackageUntrusted(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(32, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x28: pointer
  get CallPackagePassthrough(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(40, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x30: pointer
  get LogonUserExA(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(48, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x38: pointer
  get LogonUserEx2(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(56, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x40: pointer
  get Initialize(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(64, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x48: pointer
  get Shutdown(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(72, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x50: pointer
  get GetInfo(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(80, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x58: pointer
  get AcceptCredentials(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(88, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x60: pointer
  get AcquireCredentialsHandleA(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(96, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x68: pointer
  get QueryCredentialsAttributesA(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(104, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x70: pointer
  get FreeCredentialsHandle(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(112, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x78: pointer
  get SaveCredentials(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(120, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x80: pointer
  get GetCredentials(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(128, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x88: pointer
  get DeleteCredentials(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(136, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x90: pointer
  get InitLsaModeContext(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(144, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x98: pointer
  get AcceptLsaModeContext(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(152, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0xa0: pointer
  get DeleteContext(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(160, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0xa8: pointer
  get ApplyControlToken(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(168, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0xb0: pointer
  get GetUserInfo(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(176, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0xb8: pointer
  get GetExtendedInformation(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(184, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0xc0: pointer
  get QueryContextAttributesA(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(192, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0xc8: pointer
  get AddCredentialsA(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(200, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0xd0: pointer
  get SetExtendedInformation(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(208, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0xd8: pointer
  get SetContextAttributesA(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(216, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0xe0: pointer
  get SetCredentialsAttributesA(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(224, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0xe8: pointer
  get ChangeAccountPasswordA(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(232, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0xf0: pointer
  get QueryMetaData(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(240, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0xf8: pointer
  get ExchangeMetaData(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(248, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x100: pointer
  get GetCredUIContext(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(256, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x108: pointer
  get UpdateCredentials(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(264, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x110: pointer
  get ValidateTargetInfo(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(272, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x118: pointer
  get PostLogonUser(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(280, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x120: pointer
  get GetRemoteCredGuardLogonBuffer(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(288, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x128: pointer
  get GetRemoteCredGuardSupplementalCreds(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(296, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x130: pointer
  get GetTbalSupplementalCreds(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(304, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x138: pointer
  get LogonUserEx3(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(312, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x140: pointer
  get PreLogonUserSurrogate(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(320, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x148: pointer
  get PostLogonUserSurrogate(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(328, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: pointer
  set InitializePackage(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(0, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x08: pointer
  set LogonUserA(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x10: pointer
  set CallPackage(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(16, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x18: pointer
  set LogonTerminated(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(24, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x20: pointer
  set CallPackageUntrusted(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(32, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x28: pointer
  set CallPackagePassthrough(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(40, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x30: pointer
  set LogonUserExA(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(48, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x38: pointer
  set LogonUserEx2(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(56, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x40: pointer
  set Initialize(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(64, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x48: pointer
  set Shutdown(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(72, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x50: pointer
  set GetInfo(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(80, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x58: pointer
  set AcceptCredentials(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(88, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x60: pointer
  set AcquireCredentialsHandleA(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(96, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x68: pointer
  set QueryCredentialsAttributesA(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(104, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x70: pointer
  set FreeCredentialsHandle(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(112, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x78: pointer
  set SaveCredentials(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(120, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x80: pointer
  set GetCredentials(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(128, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x88: pointer
  set DeleteCredentials(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(136, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x90: pointer
  set InitLsaModeContext(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(144, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x98: pointer
  set AcceptLsaModeContext(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(152, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0xa0: pointer
  set DeleteContext(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(160, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0xa8: pointer
  set ApplyControlToken(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(168, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0xb0: pointer
  set GetUserInfo(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(176, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0xb8: pointer
  set GetExtendedInformation(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(184, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0xc0: pointer
  set QueryContextAttributesA(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(192, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0xc8: pointer
  set AddCredentialsA(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(200, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0xd0: pointer
  set SetExtendedInformation(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(208, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0xd8: pointer
  set SetContextAttributesA(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(216, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0xe0: pointer
  set SetCredentialsAttributesA(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(224, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0xe8: pointer
  set ChangeAccountPasswordA(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(232, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0xf0: pointer
  set QueryMetaData(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(240, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0xf8: pointer
  set ExchangeMetaData(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(248, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x100: pointer
  set GetCredUIContext(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(256, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x108: pointer
  set UpdateCredentials(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(264, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x110: pointer
  set ValidateTargetInfo(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(272, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x118: pointer
  set PostLogonUser(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(280, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x120: pointer
  set GetRemoteCredGuardLogonBuffer(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(288, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x128: pointer
  set GetRemoteCredGuardSupplementalCreds(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(296, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x130: pointer
  set GetTbalSupplementalCreds(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(304, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x138: pointer
  set LogonUserEx3(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(312, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x140: pointer
  set PreLogonUserSurrogate(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(320, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x148: pointer
  set PostLogonUserSurrogate(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(328, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.Security.Authentication.Identity.SECPKG_USER_FUNCTION_TABLE (size: 120)
 */
export interface SECPKG_USER_FUNCTION_TABLE {
  /** Windows.Win32.Security.Authentication.Identity.SpInstanceInitFn */
  InstanceInit: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.Security.Authentication.Identity.SpInitUserModeContextFn */
  InitUserModeContext: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.Security.Authentication.Identity.SpMakeSignatureFn */
  MakeSignature: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.Security.Authentication.Identity.SpVerifySignatureFn */
  VerifySignature: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.Security.Authentication.Identity.SpSealMessageFn */
  SealMessage: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.Security.Authentication.Identity.SpUnsealMessageFn */
  UnsealMessage: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.Security.Authentication.Identity.SpGetContextTokenFn */
  GetContextToken: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.Security.Authentication.Identity.SpQueryContextAttributesFn */
  QueryContextAttributesA: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.Security.Authentication.Identity.SpCompleteAuthTokenFn */
  CompleteAuthToken: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.Security.Authentication.Identity.SpDeleteContextFn */
  DeleteUserModeContext: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.Security.Authentication.Identity.SpFormatCredentialsFn */
  FormatCredentials: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.Security.Authentication.Identity.SpMarshallSupplementalCredsFn */
  MarshallSupplementalCreds: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.Security.Authentication.Identity.SpExportSecurityContextFn */
  ExportContext: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.Security.Authentication.Identity.SpImportSecurityContextFn */
  ImportContext: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.Security.Authentication.Identity.SpMarshalAttributeDataFn */
  MarshalAttributeData: Uint8Array | Deno.PointerValue;
}

export const sizeofSECPKG_USER_FUNCTION_TABLE = 120;

export function allocSECPKG_USER_FUNCTION_TABLE(data?: Partial<SECPKG_USER_FUNCTION_TABLE>): Uint8Array {
  const buf = new Uint8Array(sizeofSECPKG_USER_FUNCTION_TABLE);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.InstanceInit !== undefined) view.setBigUint64(0, data.InstanceInit === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.InstanceInit))), true);
  // 0x08: pointer
  if (data?.InitUserModeContext !== undefined) view.setBigUint64(8, data.InitUserModeContext === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.InitUserModeContext))), true);
  // 0x10: pointer
  if (data?.MakeSignature !== undefined) view.setBigUint64(16, data.MakeSignature === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.MakeSignature))), true);
  // 0x18: pointer
  if (data?.VerifySignature !== undefined) view.setBigUint64(24, data.VerifySignature === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.VerifySignature))), true);
  // 0x20: pointer
  if (data?.SealMessage !== undefined) view.setBigUint64(32, data.SealMessage === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.SealMessage))), true);
  // 0x28: pointer
  if (data?.UnsealMessage !== undefined) view.setBigUint64(40, data.UnsealMessage === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.UnsealMessage))), true);
  // 0x30: pointer
  if (data?.GetContextToken !== undefined) view.setBigUint64(48, data.GetContextToken === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.GetContextToken))), true);
  // 0x38: pointer
  if (data?.QueryContextAttributesA !== undefined) view.setBigUint64(56, data.QueryContextAttributesA === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.QueryContextAttributesA))), true);
  // 0x40: pointer
  if (data?.CompleteAuthToken !== undefined) view.setBigUint64(64, data.CompleteAuthToken === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.CompleteAuthToken))), true);
  // 0x48: pointer
  if (data?.DeleteUserModeContext !== undefined) view.setBigUint64(72, data.DeleteUserModeContext === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.DeleteUserModeContext))), true);
  // 0x50: pointer
  if (data?.FormatCredentials !== undefined) view.setBigUint64(80, data.FormatCredentials === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.FormatCredentials))), true);
  // 0x58: pointer
  if (data?.MarshallSupplementalCreds !== undefined) view.setBigUint64(88, data.MarshallSupplementalCreds === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.MarshallSupplementalCreds))), true);
  // 0x60: pointer
  if (data?.ExportContext !== undefined) view.setBigUint64(96, data.ExportContext === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.ExportContext))), true);
  // 0x68: pointer
  if (data?.ImportContext !== undefined) view.setBigUint64(104, data.ImportContext === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.ImportContext))), true);
  // 0x70: pointer
  if (data?.MarshalAttributeData !== undefined) view.setBigUint64(112, data.MarshalAttributeData === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.MarshalAttributeData))), true);
  return buf;
}

export class SECPKG_USER_FUNCTION_TABLEView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get InstanceInit(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(0, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x08: pointer
  get InitUserModeContext(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x10: pointer
  get MakeSignature(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(16, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x18: pointer
  get VerifySignature(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(24, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x20: pointer
  get SealMessage(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(32, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x28: pointer
  get UnsealMessage(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(40, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x30: pointer
  get GetContextToken(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(48, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x38: pointer
  get QueryContextAttributesA(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(56, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x40: pointer
  get CompleteAuthToken(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(64, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x48: pointer
  get DeleteUserModeContext(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(72, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x50: pointer
  get FormatCredentials(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(80, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x58: pointer
  get MarshallSupplementalCreds(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(88, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x60: pointer
  get ExportContext(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(96, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x68: pointer
  get ImportContext(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(104, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x70: pointer
  get MarshalAttributeData(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(112, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: pointer
  set InstanceInit(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(0, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x08: pointer
  set InitUserModeContext(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x10: pointer
  set MakeSignature(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(16, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x18: pointer
  set VerifySignature(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(24, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x20: pointer
  set SealMessage(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(32, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x28: pointer
  set UnsealMessage(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(40, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x30: pointer
  set GetContextToken(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(48, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x38: pointer
  set QueryContextAttributesA(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(56, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x40: pointer
  set CompleteAuthToken(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(64, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x48: pointer
  set DeleteUserModeContext(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(72, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x50: pointer
  set FormatCredentials(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(80, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x58: pointer
  set MarshallSupplementalCreds(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(88, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x60: pointer
  set ExportContext(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(96, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x68: pointer
  set ImportContext(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(104, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x70: pointer
  set MarshalAttributeData(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(112, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.System.Kernel.LIST_ENTRY (size: 16)
 */
export interface LIST_ENTRY {
  /** ptr */
  Flink: Deno.PointerValue | Uint8Array;
  /** ptr */
  Blink: Deno.PointerValue | Uint8Array;
}

export const sizeofLIST_ENTRY = 16;

export function allocLIST_ENTRY(data?: Partial<LIST_ENTRY>): Uint8Array {
  const buf = new Uint8Array(sizeofLIST_ENTRY);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.Flink !== undefined) view.setBigUint64(0, data.Flink === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.Flink))), true);
  // 0x08: pointer
  if (data?.Blink !== undefined) view.setBigUint64(8, data.Blink === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.Blink))), true);
  return buf;
}

export class LIST_ENTRYView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get Flink(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(0, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x08: pointer
  get Blink(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: pointer
  set Flink(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(0, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x08: pointer
  set Blink(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.Security.Authentication.Identity.KSEC_LIST_ENTRY (size: 32)
 */
export interface KSEC_LIST_ENTRY {
  /** Windows.Win32.System.Kernel.LIST_ENTRY */
  List: Uint8Array | Deno.PointerValue;
  /** i32 */
  RefCount: number;
  /** u32 */
  Signature: number;
  /** ptr */
  OwningList: Deno.PointerValue | Uint8Array;
  /** ptr */
  Reserved: Deno.PointerValue | Uint8Array;
}

export const sizeofKSEC_LIST_ENTRY = 32;

export function allocKSEC_LIST_ENTRY(data?: Partial<KSEC_LIST_ENTRY>): Uint8Array {
  const buf = new Uint8Array(sizeofKSEC_LIST_ENTRY);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.List !== undefined) view.setBigUint64(0, data.List === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.List))), true);
  // 0x08: i32
  if (data?.RefCount !== undefined) view.setInt32(8, Number(data.RefCount), true);
  // 0x0c: u32
  if (data?.Signature !== undefined) view.setUint32(12, Number(data.Signature), true);
  // 0x10: pointer
  if (data?.OwningList !== undefined) view.setBigUint64(16, data.OwningList === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.OwningList))), true);
  // 0x18: pointer
  if (data?.Reserved !== undefined) view.setBigUint64(24, data.Reserved === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.Reserved))), true);
  return buf;
}

export class KSEC_LIST_ENTRYView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get List(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(0, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x08: i32
  get RefCount(): number {
    return this.view.getInt32(8, true);
  }

  // 0x0c: u32
  get Signature(): number {
    return this.view.getUint32(12, true);
  }

  // 0x10: pointer
  get OwningList(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(16, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x18: pointer
  get Reserved(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(24, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: pointer
  set List(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(0, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x08: i32
  set RefCount(value: number) {
    this.view.setInt32(8, value, true);
  }

  // 0x0c: u32
  set Signature(value: number) {
    this.view.setUint32(12, value, true);
  }

  // 0x10: pointer
  set OwningList(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(16, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x18: pointer
  set Reserved(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(24, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.Security.Authentication.Identity.SECPKG_KERNEL_FUNCTIONS (size: 72)
 */
export interface SECPKG_KERNEL_FUNCTIONS {
  /** Windows.Win32.Security.Authentication.Identity.PLSA_ALLOCATE_LSA_HEAP */
  AllocateHeap: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.Security.Authentication.Identity.PLSA_FREE_LSA_HEAP */
  FreeHeap: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.Security.Authentication.Identity.PKSEC_CREATE_CONTEXT_LIST */
  CreateContextList: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.Security.Authentication.Identity.PKSEC_INSERT_LIST_ENTRY */
  InsertListEntry: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.Security.Authentication.Identity.PKSEC_REFERENCE_LIST_ENTRY */
  ReferenceListEntry: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.Security.Authentication.Identity.PKSEC_DEREFERENCE_LIST_ENTRY */
  DereferenceListEntry: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.Security.Authentication.Identity.PKSEC_SERIALIZE_WINNT_AUTH_DATA */
  SerializeWinntAuthData: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.Security.Authentication.Identity.PKSEC_SERIALIZE_SCHANNEL_AUTH_DATA */
  SerializeSchannelAuthData: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.Security.Authentication.Identity.PKSEC_LOCATE_PKG_BY_ID */
  LocatePackageById: Uint8Array | Deno.PointerValue;
}

export const sizeofSECPKG_KERNEL_FUNCTIONS = 72;

export function allocSECPKG_KERNEL_FUNCTIONS(data?: Partial<SECPKG_KERNEL_FUNCTIONS>): Uint8Array {
  const buf = new Uint8Array(sizeofSECPKG_KERNEL_FUNCTIONS);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.AllocateHeap !== undefined) view.setBigUint64(0, data.AllocateHeap === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.AllocateHeap))), true);
  // 0x08: pointer
  if (data?.FreeHeap !== undefined) view.setBigUint64(8, data.FreeHeap === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.FreeHeap))), true);
  // 0x10: pointer
  if (data?.CreateContextList !== undefined) view.setBigUint64(16, data.CreateContextList === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.CreateContextList))), true);
  // 0x18: pointer
  if (data?.InsertListEntry !== undefined) view.setBigUint64(24, data.InsertListEntry === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.InsertListEntry))), true);
  // 0x20: pointer
  if (data?.ReferenceListEntry !== undefined) view.setBigUint64(32, data.ReferenceListEntry === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.ReferenceListEntry))), true);
  // 0x28: pointer
  if (data?.DereferenceListEntry !== undefined) view.setBigUint64(40, data.DereferenceListEntry === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.DereferenceListEntry))), true);
  // 0x30: pointer
  if (data?.SerializeWinntAuthData !== undefined) view.setBigUint64(48, data.SerializeWinntAuthData === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.SerializeWinntAuthData))), true);
  // 0x38: pointer
  if (data?.SerializeSchannelAuthData !== undefined) view.setBigUint64(56, data.SerializeSchannelAuthData === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.SerializeSchannelAuthData))), true);
  // 0x40: pointer
  if (data?.LocatePackageById !== undefined) view.setBigUint64(64, data.LocatePackageById === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.LocatePackageById))), true);
  return buf;
}

export class SECPKG_KERNEL_FUNCTIONSView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get AllocateHeap(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(0, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x08: pointer
  get FreeHeap(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x10: pointer
  get CreateContextList(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(16, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x18: pointer
  get InsertListEntry(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(24, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x20: pointer
  get ReferenceListEntry(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(32, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x28: pointer
  get DereferenceListEntry(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(40, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x30: pointer
  get SerializeWinntAuthData(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(48, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x38: pointer
  get SerializeSchannelAuthData(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(56, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x40: pointer
  get LocatePackageById(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(64, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: pointer
  set AllocateHeap(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(0, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x08: pointer
  set FreeHeap(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x10: pointer
  set CreateContextList(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(16, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x18: pointer
  set InsertListEntry(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(24, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x20: pointer
  set ReferenceListEntry(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(32, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x28: pointer
  set DereferenceListEntry(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(40, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x30: pointer
  set SerializeWinntAuthData(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(48, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x38: pointer
  set SerializeSchannelAuthData(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(56, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x40: pointer
  set LocatePackageById(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(64, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.Security.Authentication.Identity.SECPKG_KERNEL_FUNCTION_TABLE (size: 120)
 */
export interface SECPKG_KERNEL_FUNCTION_TABLE {
  /** Windows.Win32.Security.Authentication.Identity.KspInitPackageFn */
  Initialize: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.Security.Authentication.Identity.KspDeleteContextFn */
  DeleteContext: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.Security.Authentication.Identity.KspInitContextFn */
  InitContext: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.Security.Authentication.Identity.KspMapHandleFn */
  MapHandle: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.Security.Authentication.Identity.KspMakeSignatureFn */
  Sign: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.Security.Authentication.Identity.KspVerifySignatureFn */
  Verify: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.Security.Authentication.Identity.KspSealMessageFn */
  Seal: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.Security.Authentication.Identity.KspUnsealMessageFn */
  Unseal: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.Security.Authentication.Identity.KspGetTokenFn */
  GetToken: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.Security.Authentication.Identity.KspQueryAttributesFn */
  QueryAttributes: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.Security.Authentication.Identity.KspCompleteTokenFn */
  CompleteToken: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.Security.Authentication.Identity.SpExportSecurityContextFn */
  ExportContext: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.Security.Authentication.Identity.SpImportSecurityContextFn */
  ImportContext: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.Security.Authentication.Identity.KspSetPagingModeFn */
  SetPackagePagingMode: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.Security.Authentication.Identity.KspSerializeAuthDataFn */
  SerializeAuthData: Uint8Array | Deno.PointerValue;
}

export const sizeofSECPKG_KERNEL_FUNCTION_TABLE = 120;

export function allocSECPKG_KERNEL_FUNCTION_TABLE(data?: Partial<SECPKG_KERNEL_FUNCTION_TABLE>): Uint8Array {
  const buf = new Uint8Array(sizeofSECPKG_KERNEL_FUNCTION_TABLE);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.Initialize !== undefined) view.setBigUint64(0, data.Initialize === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.Initialize))), true);
  // 0x08: pointer
  if (data?.DeleteContext !== undefined) view.setBigUint64(8, data.DeleteContext === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.DeleteContext))), true);
  // 0x10: pointer
  if (data?.InitContext !== undefined) view.setBigUint64(16, data.InitContext === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.InitContext))), true);
  // 0x18: pointer
  if (data?.MapHandle !== undefined) view.setBigUint64(24, data.MapHandle === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.MapHandle))), true);
  // 0x20: pointer
  if (data?.Sign !== undefined) view.setBigUint64(32, data.Sign === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.Sign))), true);
  // 0x28: pointer
  if (data?.Verify !== undefined) view.setBigUint64(40, data.Verify === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.Verify))), true);
  // 0x30: pointer
  if (data?.Seal !== undefined) view.setBigUint64(48, data.Seal === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.Seal))), true);
  // 0x38: pointer
  if (data?.Unseal !== undefined) view.setBigUint64(56, data.Unseal === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.Unseal))), true);
  // 0x40: pointer
  if (data?.GetToken !== undefined) view.setBigUint64(64, data.GetToken === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.GetToken))), true);
  // 0x48: pointer
  if (data?.QueryAttributes !== undefined) view.setBigUint64(72, data.QueryAttributes === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.QueryAttributes))), true);
  // 0x50: pointer
  if (data?.CompleteToken !== undefined) view.setBigUint64(80, data.CompleteToken === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.CompleteToken))), true);
  // 0x58: pointer
  if (data?.ExportContext !== undefined) view.setBigUint64(88, data.ExportContext === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.ExportContext))), true);
  // 0x60: pointer
  if (data?.ImportContext !== undefined) view.setBigUint64(96, data.ImportContext === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.ImportContext))), true);
  // 0x68: pointer
  if (data?.SetPackagePagingMode !== undefined) view.setBigUint64(104, data.SetPackagePagingMode === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.SetPackagePagingMode))), true);
  // 0x70: pointer
  if (data?.SerializeAuthData !== undefined) view.setBigUint64(112, data.SerializeAuthData === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.SerializeAuthData))), true);
  return buf;
}

export class SECPKG_KERNEL_FUNCTION_TABLEView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get Initialize(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(0, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x08: pointer
  get DeleteContext(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x10: pointer
  get InitContext(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(16, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x18: pointer
  get MapHandle(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(24, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x20: pointer
  get Sign(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(32, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x28: pointer
  get Verify(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(40, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x30: pointer
  get Seal(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(48, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x38: pointer
  get Unseal(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(56, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x40: pointer
  get GetToken(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(64, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x48: pointer
  get QueryAttributes(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(72, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x50: pointer
  get CompleteToken(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(80, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x58: pointer
  get ExportContext(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(88, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x60: pointer
  get ImportContext(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(96, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x68: pointer
  get SetPackagePagingMode(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(104, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x70: pointer
  get SerializeAuthData(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(112, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: pointer
  set Initialize(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(0, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x08: pointer
  set DeleteContext(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x10: pointer
  set InitContext(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(16, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x18: pointer
  set MapHandle(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(24, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x20: pointer
  set Sign(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(32, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x28: pointer
  set Verify(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(40, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x30: pointer
  set Seal(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(48, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x38: pointer
  set Unseal(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(56, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x40: pointer
  set GetToken(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(64, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x48: pointer
  set QueryAttributes(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(72, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x50: pointer
  set CompleteToken(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(80, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x58: pointer
  set ExportContext(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(88, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x60: pointer
  set ImportContext(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(96, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x68: pointer
  set SetPackagePagingMode(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(104, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x70: pointer
  set SerializeAuthData(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(112, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.Security.Authentication.Identity.SecPkgCred_SupportedAlgs (size: 16)
 */
export interface SecPkgCred_SupportedAlgs {
  /** u32 */
  cSupportedAlgs: number;
  /** ptr */
  palgSupportedAlgs: Deno.PointerValue | Uint8Array;
}

export const sizeofSecPkgCred_SupportedAlgs = 16;

export function allocSecPkgCred_SupportedAlgs(data?: Partial<SecPkgCred_SupportedAlgs>): Uint8Array {
  const buf = new Uint8Array(sizeofSecPkgCred_SupportedAlgs);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.cSupportedAlgs !== undefined) view.setUint32(0, Number(data.cSupportedAlgs), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.palgSupportedAlgs !== undefined) view.setBigUint64(8, data.palgSupportedAlgs === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.palgSupportedAlgs))), true);
  return buf;
}

export class SecPkgCred_SupportedAlgsView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get cSupportedAlgs(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  get palgSupportedAlgs(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: u32
  set cSupportedAlgs(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  set palgSupportedAlgs(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.Security.Authentication.Identity.SecPkgCred_CipherStrengths (size: 8)
 */
export interface SecPkgCred_CipherStrengths {
  /** u32 */
  dwMinimumCipherStrength: number;
  /** u32 */
  dwMaximumCipherStrength: number;
}

export const sizeofSecPkgCred_CipherStrengths = 8;

export function allocSecPkgCred_CipherStrengths(data?: Partial<SecPkgCred_CipherStrengths>): Uint8Array {
  const buf = new Uint8Array(sizeofSecPkgCred_CipherStrengths);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.dwMinimumCipherStrength !== undefined) view.setUint32(0, Number(data.dwMinimumCipherStrength), true);
  // 0x04: u32
  if (data?.dwMaximumCipherStrength !== undefined) view.setUint32(4, Number(data.dwMaximumCipherStrength), true);
  return buf;
}

export class SecPkgCred_CipherStrengthsView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get dwMinimumCipherStrength(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: u32
  get dwMaximumCipherStrength(): number {
    return this.view.getUint32(4, true);
  }

  // 0x00: u32
  set dwMinimumCipherStrength(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: u32
  set dwMaximumCipherStrength(value: number) {
    this.view.setUint32(4, value, true);
  }
}

/**
 * Windows.Win32.Security.Authentication.Identity.SecPkgCred_SupportedProtocols (size: 8)
 */
export interface SecPkgCred_SupportedProtocols {
  /** u32 */
  grbitProtocol: number;
}

export const sizeofSecPkgCred_SupportedProtocols = 8;

export function allocSecPkgCred_SupportedProtocols(data?: Partial<SecPkgCred_SupportedProtocols>): Uint8Array {
  const buf = new Uint8Array(sizeofSecPkgCred_SupportedProtocols);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.grbitProtocol !== undefined) view.setUint32(0, Number(data.grbitProtocol), true);
  // 0x04: pad4
  return buf;
}

export class SecPkgCred_SupportedProtocolsView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get grbitProtocol(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: pad4

  // 0x00: u32
  set grbitProtocol(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: pad4
}

/**
 * Windows.Win32.Security.Authentication.Identity.SecPkgCred_ClientCertPolicy (size: 56)
 */
export interface SecPkgCred_ClientCertPolicy {
  /** u32 */
  dwFlags: number;
  /** System.Guid */
  guidPolicyId: Uint8Array | Deno.PointerValue;
  /** u32 */
  dwCertFlags: number;
  /** u32 */
  dwUrlRetrievalTimeout: number;
  /** Windows.Win32.Foundation.BOOL */
  fCheckRevocationFreshnessTime: boolean;
  /** u32 */
  dwRevocationFreshnessTime: number;
  /** Windows.Win32.Foundation.BOOL */
  fOmitUsageCheck: boolean;
  /** Windows.Win32.Foundation.PWSTR */
  pwszSslCtlStoreName: string | null | Uint8Array | Uint16Array;
  /** Windows.Win32.Foundation.PWSTR */
  pwszSslCtlIdentifier: string | null | Uint8Array | Uint16Array;
}

export const sizeofSecPkgCred_ClientCertPolicy = 56;

export function allocSecPkgCred_ClientCertPolicy(data?: Partial<SecPkgCred_ClientCertPolicy>): Uint8Array {
  const buf = new Uint8Array(sizeofSecPkgCred_ClientCertPolicy);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.dwFlags !== undefined) view.setUint32(0, Number(data.dwFlags), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.guidPolicyId !== undefined) view.setBigUint64(8, data.guidPolicyId === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.guidPolicyId))), true);
  // 0x10: u32
  if (data?.dwCertFlags !== undefined) view.setUint32(16, Number(data.dwCertFlags), true);
  // 0x14: u32
  if (data?.dwUrlRetrievalTimeout !== undefined) view.setUint32(20, Number(data.dwUrlRetrievalTimeout), true);
  // 0x18: i32
  if (data?.fCheckRevocationFreshnessTime !== undefined) view.setInt32(24, Number(data.fCheckRevocationFreshnessTime), true);
  // 0x1c: u32
  if (data?.dwRevocationFreshnessTime !== undefined) view.setUint32(28, Number(data.dwRevocationFreshnessTime), true);
  // 0x20: i32
  if (data?.fOmitUsageCheck !== undefined) view.setInt32(32, Number(data.fOmitUsageCheck), true);
  // 0x24: pad4
  // 0x28: buffer
  if (data?.pwszSslCtlStoreName !== undefined) {
    (buf as any)._f40 = util.pwstrToFfi(data.pwszSslCtlStoreName);
    view.setBigUint64(40, (buf as any)._f40 === null ? 0n : BigInt(Deno.UnsafePointer.value(Deno.UnsafePointer.of((buf as any)._f40))), true);
  }
  // 0x30: buffer
  if (data?.pwszSslCtlIdentifier !== undefined) {
    (buf as any)._f48 = util.pwstrToFfi(data.pwszSslCtlIdentifier);
    view.setBigUint64(48, (buf as any)._f48 === null ? 0n : BigInt(Deno.UnsafePointer.value(Deno.UnsafePointer.of((buf as any)._f48))), true);
  }
  return buf;
}

export class SecPkgCred_ClientCertPolicyView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get dwFlags(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  get guidPolicyId(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x10: u32
  get dwCertFlags(): number {
    return this.view.getUint32(16, true);
  }

  // 0x14: u32
  get dwUrlRetrievalTimeout(): number {
    return this.view.getUint32(20, true);
  }

  // 0x18: i32
  get fCheckRevocationFreshnessTime(): number {
    return this.view.getInt32(24, true);
  }

  // 0x1c: u32
  get dwRevocationFreshnessTime(): number {
    return this.view.getUint32(28, true);
  }

  // 0x20: i32
  get fOmitUsageCheck(): number {
    return this.view.getInt32(32, true);
  }

  // 0x24: pad4

  // 0x28: buffer
  get pwszSslCtlStoreName(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(40, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x30: buffer
  get pwszSslCtlIdentifier(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(48, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: u32
  set dwFlags(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  set guidPolicyId(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x10: u32
  set dwCertFlags(value: number) {
    this.view.setUint32(16, value, true);
  }

  // 0x14: u32
  set dwUrlRetrievalTimeout(value: number) {
    this.view.setUint32(20, value, true);
  }

  // 0x18: i32
  set fCheckRevocationFreshnessTime(value: number) {
    this.view.setInt32(24, value, true);
  }

  // 0x1c: u32
  set dwRevocationFreshnessTime(value: number) {
    this.view.setUint32(28, value, true);
  }

  // 0x20: i32
  set fOmitUsageCheck(value: number) {
    this.view.setInt32(32, value, true);
  }

  // 0x24: pad4

  // 0x28: buffer
  set pwszSslCtlStoreName(value: Uint8Array | Deno.PointerValue) {
    (this.buf as any)._f40 = value;
    this.view.setBigUint64(40, BigInt(Deno.UnsafePointer.value(util.toPointer((this.buf as any)._f40))), true);
  }

  // 0x30: buffer
  set pwszSslCtlIdentifier(value: Uint8Array | Deno.PointerValue) {
    (this.buf as any)._f48 = value;
    this.view.setBigUint64(48, BigInt(Deno.UnsafePointer.value(util.toPointer((this.buf as any)._f48))), true);
  }
}

/**
 * Windows.Win32.Security.Authentication.Identity.SecPkgCred_SessionTicketKey (size: 32)
 */
export interface SecPkgCred_SessionTicketKey {
  /** u32 */
  TicketInfoVersion: number;
  /** array */
  KeyId: Deno.PointerValue;
  /** array */
  KeyingMaterial: Deno.PointerValue;
  /** u8 */
  KeyingMaterialSize: number;
}

export const sizeofSecPkgCred_SessionTicketKey = 32;

export function allocSecPkgCred_SessionTicketKey(data?: Partial<SecPkgCred_SessionTicketKey>): Uint8Array {
  const buf = new Uint8Array(sizeofSecPkgCred_SessionTicketKey);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.TicketInfoVersion !== undefined) view.setUint32(0, Number(data.TicketInfoVersion), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.KeyId !== undefined) view.setBigUint64(8, data.KeyId === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.KeyId))), true);
  // 0x10: pointer
  if (data?.KeyingMaterial !== undefined) view.setBigUint64(16, data.KeyingMaterial === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.KeyingMaterial))), true);
  // 0x18: u8
  if (data?.KeyingMaterialSize !== undefined) view.setUint8(24, Number(data.KeyingMaterialSize));
  // 0x19: pad7
  return buf;
}

export class SecPkgCred_SessionTicketKeyView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get TicketInfoVersion(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  get KeyId(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x10: pointer
  get KeyingMaterial(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(16, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x18: u8
  get KeyingMaterialSize(): number {
    return this.view.getUint8(24);
  }

  // 0x19: pad7

  // 0x00: u32
  set TicketInfoVersion(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  set KeyId(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x10: pointer
  set KeyingMaterial(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(16, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x18: u8
  set KeyingMaterialSize(value: number) {
    this.view.setUint8(24, value);
  }

  // 0x19: pad7
}

/**
 * Windows.Win32.Security.Authentication.Identity.SecPkgCred_SessionTicketKeys (size: 16)
 */
export interface SecPkgCred_SessionTicketKeys {
  /** u32 */
  cSessionTicketKeys: number;
  /** ptr */
  pSessionTicketKeys: Deno.PointerValue | Uint8Array;
}

export const sizeofSecPkgCred_SessionTicketKeys = 16;

export function allocSecPkgCred_SessionTicketKeys(data?: Partial<SecPkgCred_SessionTicketKeys>): Uint8Array {
  const buf = new Uint8Array(sizeofSecPkgCred_SessionTicketKeys);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.cSessionTicketKeys !== undefined) view.setUint32(0, Number(data.cSessionTicketKeys), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.pSessionTicketKeys !== undefined) view.setBigUint64(8, data.pSessionTicketKeys === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.pSessionTicketKeys))), true);
  return buf;
}

export class SecPkgCred_SessionTicketKeysView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get cSessionTicketKeys(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  get pSessionTicketKeys(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: u32
  set cSessionTicketKeys(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  set pSessionTicketKeys(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.Security.Authentication.Identity.SecPkgContext_RemoteCredentialInfo (size: 32)
 */
export interface SecPkgContext_RemoteCredentialInfo {
  /** u32 */
  cbCertificateChain: number;
  /** ptr */
  pbCertificateChain: Deno.PointerValue | Uint8Array;
  /** u32 */
  cCertificates: number;
  /** u32 */
  fFlags: number;
  /** u32 */
  dwBits: number;
}

export const sizeofSecPkgContext_RemoteCredentialInfo = 32;

export function allocSecPkgContext_RemoteCredentialInfo(data?: Partial<SecPkgContext_RemoteCredentialInfo>): Uint8Array {
  const buf = new Uint8Array(sizeofSecPkgContext_RemoteCredentialInfo);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.cbCertificateChain !== undefined) view.setUint32(0, Number(data.cbCertificateChain), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.pbCertificateChain !== undefined) view.setBigUint64(8, data.pbCertificateChain === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.pbCertificateChain))), true);
  // 0x10: u32
  if (data?.cCertificates !== undefined) view.setUint32(16, Number(data.cCertificates), true);
  // 0x14: u32
  if (data?.fFlags !== undefined) view.setUint32(20, Number(data.fFlags), true);
  // 0x18: u32
  if (data?.dwBits !== undefined) view.setUint32(24, Number(data.dwBits), true);
  // 0x1c: pad4
  return buf;
}

export class SecPkgContext_RemoteCredentialInfoView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get cbCertificateChain(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  get pbCertificateChain(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x10: u32
  get cCertificates(): number {
    return this.view.getUint32(16, true);
  }

  // 0x14: u32
  get fFlags(): number {
    return this.view.getUint32(20, true);
  }

  // 0x18: u32
  get dwBits(): number {
    return this.view.getUint32(24, true);
  }

  // 0x1c: pad4

  // 0x00: u32
  set cbCertificateChain(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  set pbCertificateChain(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x10: u32
  set cCertificates(value: number) {
    this.view.setUint32(16, value, true);
  }

  // 0x14: u32
  set fFlags(value: number) {
    this.view.setUint32(20, value, true);
  }

  // 0x18: u32
  set dwBits(value: number) {
    this.view.setUint32(24, value, true);
  }

  // 0x1c: pad4
}

/**
 * Windows.Win32.Security.Authentication.Identity.SecPkgContext_LocalCredentialInfo (size: 32)
 */
export interface SecPkgContext_LocalCredentialInfo {
  /** u32 */
  cbCertificateChain: number;
  /** ptr */
  pbCertificateChain: Deno.PointerValue | Uint8Array;
  /** u32 */
  cCertificates: number;
  /** u32 */
  fFlags: number;
  /** u32 */
  dwBits: number;
}

export const sizeofSecPkgContext_LocalCredentialInfo = 32;

export function allocSecPkgContext_LocalCredentialInfo(data?: Partial<SecPkgContext_LocalCredentialInfo>): Uint8Array {
  const buf = new Uint8Array(sizeofSecPkgContext_LocalCredentialInfo);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.cbCertificateChain !== undefined) view.setUint32(0, Number(data.cbCertificateChain), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.pbCertificateChain !== undefined) view.setBigUint64(8, data.pbCertificateChain === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.pbCertificateChain))), true);
  // 0x10: u32
  if (data?.cCertificates !== undefined) view.setUint32(16, Number(data.cCertificates), true);
  // 0x14: u32
  if (data?.fFlags !== undefined) view.setUint32(20, Number(data.fFlags), true);
  // 0x18: u32
  if (data?.dwBits !== undefined) view.setUint32(24, Number(data.dwBits), true);
  // 0x1c: pad4
  return buf;
}

export class SecPkgContext_LocalCredentialInfoView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get cbCertificateChain(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  get pbCertificateChain(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x10: u32
  get cCertificates(): number {
    return this.view.getUint32(16, true);
  }

  // 0x14: u32
  get fFlags(): number {
    return this.view.getUint32(20, true);
  }

  // 0x18: u32
  get dwBits(): number {
    return this.view.getUint32(24, true);
  }

  // 0x1c: pad4

  // 0x00: u32
  set cbCertificateChain(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  set pbCertificateChain(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x10: u32
  set cCertificates(value: number) {
    this.view.setUint32(16, value, true);
  }

  // 0x14: u32
  set fFlags(value: number) {
    this.view.setUint32(20, value, true);
  }

  // 0x18: u32
  set dwBits(value: number) {
    this.view.setUint32(24, value, true);
  }

  // 0x1c: pad4
}

export type HRESULT = number;

/**
 * Windows.Win32.Security.Authentication.Identity.SecPkgContext_ClientCertPolicyResult (size: 16)
 */
export interface SecPkgContext_ClientCertPolicyResult {
  /** Windows.Win32.Foundation.HRESULT */
  dwPolicyResult: Uint8Array | Deno.PointerValue;
  /** System.Guid */
  guidPolicyId: Uint8Array | Deno.PointerValue;
}

export const sizeofSecPkgContext_ClientCertPolicyResult = 16;

export function allocSecPkgContext_ClientCertPolicyResult(data?: Partial<SecPkgContext_ClientCertPolicyResult>): Uint8Array {
  const buf = new Uint8Array(sizeofSecPkgContext_ClientCertPolicyResult);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.dwPolicyResult !== undefined) view.setBigUint64(0, data.dwPolicyResult === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.dwPolicyResult))), true);
  // 0x08: pointer
  if (data?.guidPolicyId !== undefined) view.setBigUint64(8, data.guidPolicyId === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.guidPolicyId))), true);
  return buf;
}

export class SecPkgContext_ClientCertPolicyResultView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get dwPolicyResult(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(0, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x08: pointer
  get guidPolicyId(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: pointer
  set dwPolicyResult(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(0, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x08: pointer
  set guidPolicyId(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.Security.Authentication.Identity.SecPkgContext_IssuerListInfoEx (size: 16)
 */
export interface SecPkgContext_IssuerListInfoEx {
  /** ptr */
  aIssuers: Deno.PointerValue | Uint8Array;
  /** u32 */
  cIssuers: number;
}

export const sizeofSecPkgContext_IssuerListInfoEx = 16;

export function allocSecPkgContext_IssuerListInfoEx(data?: Partial<SecPkgContext_IssuerListInfoEx>): Uint8Array {
  const buf = new Uint8Array(sizeofSecPkgContext_IssuerListInfoEx);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.aIssuers !== undefined) view.setBigUint64(0, data.aIssuers === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.aIssuers))), true);
  // 0x08: u32
  if (data?.cIssuers !== undefined) view.setUint32(8, Number(data.cIssuers), true);
  // 0x0c: pad4
  return buf;
}

export class SecPkgContext_IssuerListInfoExView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get aIssuers(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(0, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x08: u32
  get cIssuers(): number {
    return this.view.getUint32(8, true);
  }

  // 0x0c: pad4

  // 0x00: pointer
  set aIssuers(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(0, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x08: u32
  set cIssuers(value: number) {
    this.view.setUint32(8, value, true);
  }

  // 0x0c: pad4
}

/**
 * Windows.Win32.Security.Authentication.Identity.SecPkgContext_ConnectionInfo (size: 32)
 */
export interface SecPkgContext_ConnectionInfo {
  /** u32 */
  dwProtocol: number;
  /** u32 */
  aiCipher: number;
  /** u32 */
  dwCipherStrength: number;
  /** u32 */
  aiHash: number;
  /** u32 */
  dwHashStrength: number;
  /** u32 */
  aiExch: number;
  /** u32 */
  dwExchStrength: number;
}

export const sizeofSecPkgContext_ConnectionInfo = 32;

export function allocSecPkgContext_ConnectionInfo(data?: Partial<SecPkgContext_ConnectionInfo>): Uint8Array {
  const buf = new Uint8Array(sizeofSecPkgContext_ConnectionInfo);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.dwProtocol !== undefined) view.setUint32(0, Number(data.dwProtocol), true);
  // 0x04: u32
  if (data?.aiCipher !== undefined) view.setUint32(4, Number(data.aiCipher), true);
  // 0x08: u32
  if (data?.dwCipherStrength !== undefined) view.setUint32(8, Number(data.dwCipherStrength), true);
  // 0x0c: u32
  if (data?.aiHash !== undefined) view.setUint32(12, Number(data.aiHash), true);
  // 0x10: u32
  if (data?.dwHashStrength !== undefined) view.setUint32(16, Number(data.dwHashStrength), true);
  // 0x14: u32
  if (data?.aiExch !== undefined) view.setUint32(20, Number(data.aiExch), true);
  // 0x18: u32
  if (data?.dwExchStrength !== undefined) view.setUint32(24, Number(data.dwExchStrength), true);
  // 0x1c: pad4
  return buf;
}

export class SecPkgContext_ConnectionInfoView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get dwProtocol(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: u32
  get aiCipher(): number {
    return this.view.getUint32(4, true);
  }

  // 0x08: u32
  get dwCipherStrength(): number {
    return this.view.getUint32(8, true);
  }

  // 0x0c: u32
  get aiHash(): number {
    return this.view.getUint32(12, true);
  }

  // 0x10: u32
  get dwHashStrength(): number {
    return this.view.getUint32(16, true);
  }

  // 0x14: u32
  get aiExch(): number {
    return this.view.getUint32(20, true);
  }

  // 0x18: u32
  get dwExchStrength(): number {
    return this.view.getUint32(24, true);
  }

  // 0x1c: pad4

  // 0x00: u32
  set dwProtocol(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: u32
  set aiCipher(value: number) {
    this.view.setUint32(4, value, true);
  }

  // 0x08: u32
  set dwCipherStrength(value: number) {
    this.view.setUint32(8, value, true);
  }

  // 0x0c: u32
  set aiHash(value: number) {
    this.view.setUint32(12, value, true);
  }

  // 0x10: u32
  set dwHashStrength(value: number) {
    this.view.setUint32(16, value, true);
  }

  // 0x14: u32
  set aiExch(value: number) {
    this.view.setUint32(20, value, true);
  }

  // 0x18: u32
  set dwExchStrength(value: number) {
    this.view.setUint32(24, value, true);
  }

  // 0x1c: pad4
}

/**
 * Windows.Win32.Security.Authentication.Identity.SecPkgContext_ConnectionInfoEx (size: 56)
 */
export interface SecPkgContext_ConnectionInfoEx {
  /** u32 */
  dwVersion: number;
  /** u32 */
  dwProtocol: number;
  /** array */
  szCipher: Deno.PointerValue;
  /** u32 */
  dwCipherStrength: number;
  /** array */
  szHash: Deno.PointerValue;
  /** u32 */
  dwHashStrength: number;
  /** array */
  szExchange: Deno.PointerValue;
  /** u32 */
  dwExchStrength: number;
}

export const sizeofSecPkgContext_ConnectionInfoEx = 56;

export function allocSecPkgContext_ConnectionInfoEx(data?: Partial<SecPkgContext_ConnectionInfoEx>): Uint8Array {
  const buf = new Uint8Array(sizeofSecPkgContext_ConnectionInfoEx);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.dwVersion !== undefined) view.setUint32(0, Number(data.dwVersion), true);
  // 0x04: u32
  if (data?.dwProtocol !== undefined) view.setUint32(4, Number(data.dwProtocol), true);
  // 0x08: pointer
  if (data?.szCipher !== undefined) view.setBigUint64(8, data.szCipher === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.szCipher))), true);
  // 0x10: u32
  if (data?.dwCipherStrength !== undefined) view.setUint32(16, Number(data.dwCipherStrength), true);
  // 0x14: pad4
  // 0x18: pointer
  if (data?.szHash !== undefined) view.setBigUint64(24, data.szHash === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.szHash))), true);
  // 0x20: u32
  if (data?.dwHashStrength !== undefined) view.setUint32(32, Number(data.dwHashStrength), true);
  // 0x24: pad4
  // 0x28: pointer
  if (data?.szExchange !== undefined) view.setBigUint64(40, data.szExchange === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.szExchange))), true);
  // 0x30: u32
  if (data?.dwExchStrength !== undefined) view.setUint32(48, Number(data.dwExchStrength), true);
  // 0x34: pad4
  return buf;
}

export class SecPkgContext_ConnectionInfoExView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get dwVersion(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: u32
  get dwProtocol(): number {
    return this.view.getUint32(4, true);
  }

  // 0x08: pointer
  get szCipher(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x10: u32
  get dwCipherStrength(): number {
    return this.view.getUint32(16, true);
  }

  // 0x14: pad4

  // 0x18: pointer
  get szHash(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(24, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x20: u32
  get dwHashStrength(): number {
    return this.view.getUint32(32, true);
  }

  // 0x24: pad4

  // 0x28: pointer
  get szExchange(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(40, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x30: u32
  get dwExchStrength(): number {
    return this.view.getUint32(48, true);
  }

  // 0x34: pad4

  // 0x00: u32
  set dwVersion(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: u32
  set dwProtocol(value: number) {
    this.view.setUint32(4, value, true);
  }

  // 0x08: pointer
  set szCipher(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x10: u32
  set dwCipherStrength(value: number) {
    this.view.setUint32(16, value, true);
  }

  // 0x14: pad4

  // 0x18: pointer
  set szHash(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(24, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x20: u32
  set dwHashStrength(value: number) {
    this.view.setUint32(32, value, true);
  }

  // 0x24: pad4

  // 0x28: pointer
  set szExchange(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(40, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x30: u32
  set dwExchStrength(value: number) {
    this.view.setUint32(48, value, true);
  }

  // 0x34: pad4
}

/**
 * Windows.Win32.Security.Authentication.Identity.SecPkgContext_CipherInfo (size: 88)
 */
export interface SecPkgContext_CipherInfo {
  /** u32 */
  dwVersion: number;
  /** u32 */
  dwProtocol: number;
  /** u32 */
  dwCipherSuite: number;
  /** u32 */
  dwBaseCipherSuite: number;
  /** array */
  szCipherSuite: Deno.PointerValue;
  /** array */
  szCipher: Deno.PointerValue;
  /** u32 */
  dwCipherLen: number;
  /** u32 */
  dwCipherBlockLen: number;
  /** array */
  szHash: Deno.PointerValue;
  /** u32 */
  dwHashLen: number;
  /** array */
  szExchange: Deno.PointerValue;
  /** u32 */
  dwMinExchangeLen: number;
  /** u32 */
  dwMaxExchangeLen: number;
  /** array */
  szCertificate: Deno.PointerValue;
  /** u32 */
  dwKeyType: number;
}

export const sizeofSecPkgContext_CipherInfo = 88;

export function allocSecPkgContext_CipherInfo(data?: Partial<SecPkgContext_CipherInfo>): Uint8Array {
  const buf = new Uint8Array(sizeofSecPkgContext_CipherInfo);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.dwVersion !== undefined) view.setUint32(0, Number(data.dwVersion), true);
  // 0x04: u32
  if (data?.dwProtocol !== undefined) view.setUint32(4, Number(data.dwProtocol), true);
  // 0x08: u32
  if (data?.dwCipherSuite !== undefined) view.setUint32(8, Number(data.dwCipherSuite), true);
  // 0x0c: u32
  if (data?.dwBaseCipherSuite !== undefined) view.setUint32(12, Number(data.dwBaseCipherSuite), true);
  // 0x10: pointer
  if (data?.szCipherSuite !== undefined) view.setBigUint64(16, data.szCipherSuite === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.szCipherSuite))), true);
  // 0x18: pointer
  if (data?.szCipher !== undefined) view.setBigUint64(24, data.szCipher === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.szCipher))), true);
  // 0x20: u32
  if (data?.dwCipherLen !== undefined) view.setUint32(32, Number(data.dwCipherLen), true);
  // 0x24: u32
  if (data?.dwCipherBlockLen !== undefined) view.setUint32(36, Number(data.dwCipherBlockLen), true);
  // 0x28: pointer
  if (data?.szHash !== undefined) view.setBigUint64(40, data.szHash === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.szHash))), true);
  // 0x30: u32
  if (data?.dwHashLen !== undefined) view.setUint32(48, Number(data.dwHashLen), true);
  // 0x34: pad4
  // 0x38: pointer
  if (data?.szExchange !== undefined) view.setBigUint64(56, data.szExchange === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.szExchange))), true);
  // 0x40: u32
  if (data?.dwMinExchangeLen !== undefined) view.setUint32(64, Number(data.dwMinExchangeLen), true);
  // 0x44: u32
  if (data?.dwMaxExchangeLen !== undefined) view.setUint32(68, Number(data.dwMaxExchangeLen), true);
  // 0x48: pointer
  if (data?.szCertificate !== undefined) view.setBigUint64(72, data.szCertificate === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.szCertificate))), true);
  // 0x50: u32
  if (data?.dwKeyType !== undefined) view.setUint32(80, Number(data.dwKeyType), true);
  // 0x54: pad4
  return buf;
}

export class SecPkgContext_CipherInfoView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get dwVersion(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: u32
  get dwProtocol(): number {
    return this.view.getUint32(4, true);
  }

  // 0x08: u32
  get dwCipherSuite(): number {
    return this.view.getUint32(8, true);
  }

  // 0x0c: u32
  get dwBaseCipherSuite(): number {
    return this.view.getUint32(12, true);
  }

  // 0x10: pointer
  get szCipherSuite(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(16, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x18: pointer
  get szCipher(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(24, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x20: u32
  get dwCipherLen(): number {
    return this.view.getUint32(32, true);
  }

  // 0x24: u32
  get dwCipherBlockLen(): number {
    return this.view.getUint32(36, true);
  }

  // 0x28: pointer
  get szHash(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(40, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x30: u32
  get dwHashLen(): number {
    return this.view.getUint32(48, true);
  }

  // 0x34: pad4

  // 0x38: pointer
  get szExchange(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(56, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x40: u32
  get dwMinExchangeLen(): number {
    return this.view.getUint32(64, true);
  }

  // 0x44: u32
  get dwMaxExchangeLen(): number {
    return this.view.getUint32(68, true);
  }

  // 0x48: pointer
  get szCertificate(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(72, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x50: u32
  get dwKeyType(): number {
    return this.view.getUint32(80, true);
  }

  // 0x54: pad4

  // 0x00: u32
  set dwVersion(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: u32
  set dwProtocol(value: number) {
    this.view.setUint32(4, value, true);
  }

  // 0x08: u32
  set dwCipherSuite(value: number) {
    this.view.setUint32(8, value, true);
  }

  // 0x0c: u32
  set dwBaseCipherSuite(value: number) {
    this.view.setUint32(12, value, true);
  }

  // 0x10: pointer
  set szCipherSuite(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(16, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x18: pointer
  set szCipher(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(24, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x20: u32
  set dwCipherLen(value: number) {
    this.view.setUint32(32, value, true);
  }

  // 0x24: u32
  set dwCipherBlockLen(value: number) {
    this.view.setUint32(36, value, true);
  }

  // 0x28: pointer
  set szHash(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(40, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x30: u32
  set dwHashLen(value: number) {
    this.view.setUint32(48, value, true);
  }

  // 0x34: pad4

  // 0x38: pointer
  set szExchange(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(56, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x40: u32
  set dwMinExchangeLen(value: number) {
    this.view.setUint32(64, value, true);
  }

  // 0x44: u32
  set dwMaxExchangeLen(value: number) {
    this.view.setUint32(68, value, true);
  }

  // 0x48: pointer
  set szCertificate(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(72, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x50: u32
  set dwKeyType(value: number) {
    this.view.setUint32(80, value, true);
  }

  // 0x54: pad4
}

/**
 * Windows.Win32.Security.Authentication.Identity.SecPkgContext_EapKeyBlock (size: 16)
 */
export interface SecPkgContext_EapKeyBlock {
  /** array */
  rgbKeys: Deno.PointerValue;
  /** array */
  rgbIVs: Deno.PointerValue;
}

export const sizeofSecPkgContext_EapKeyBlock = 16;

export function allocSecPkgContext_EapKeyBlock(data?: Partial<SecPkgContext_EapKeyBlock>): Uint8Array {
  const buf = new Uint8Array(sizeofSecPkgContext_EapKeyBlock);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.rgbKeys !== undefined) view.setBigUint64(0, data.rgbKeys === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.rgbKeys))), true);
  // 0x08: pointer
  if (data?.rgbIVs !== undefined) view.setBigUint64(8, data.rgbIVs === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.rgbIVs))), true);
  return buf;
}

export class SecPkgContext_EapKeyBlockView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get rgbKeys(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(0, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x08: pointer
  get rgbIVs(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: pointer
  set rgbKeys(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(0, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x08: pointer
  set rgbIVs(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.Security.Authentication.Identity.SecPkgContext_MappedCredAttr (size: 16)
 */
export interface SecPkgContext_MappedCredAttr {
  /** u32 */
  dwAttribute: number;
  /** ptr */
  pvBuffer: Deno.PointerValue | Uint8Array;
}

export const sizeofSecPkgContext_MappedCredAttr = 16;

export function allocSecPkgContext_MappedCredAttr(data?: Partial<SecPkgContext_MappedCredAttr>): Uint8Array {
  const buf = new Uint8Array(sizeofSecPkgContext_MappedCredAttr);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.dwAttribute !== undefined) view.setUint32(0, Number(data.dwAttribute), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.pvBuffer !== undefined) view.setBigUint64(8, data.pvBuffer === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.pvBuffer))), true);
  return buf;
}

export class SecPkgContext_MappedCredAttrView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get dwAttribute(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  get pvBuffer(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: u32
  set dwAttribute(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  set pvBuffer(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.Security.Authentication.Identity.SecPkgContext_SessionInfo (size: 16)
 */
export interface SecPkgContext_SessionInfo {
  /** u32 */
  dwFlags: number;
  /** u32 */
  cbSessionId: number;
  /** array */
  rgbSessionId: Deno.PointerValue;
}

export const sizeofSecPkgContext_SessionInfo = 16;

export function allocSecPkgContext_SessionInfo(data?: Partial<SecPkgContext_SessionInfo>): Uint8Array {
  const buf = new Uint8Array(sizeofSecPkgContext_SessionInfo);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.dwFlags !== undefined) view.setUint32(0, Number(data.dwFlags), true);
  // 0x04: u32
  if (data?.cbSessionId !== undefined) view.setUint32(4, Number(data.cbSessionId), true);
  // 0x08: pointer
  if (data?.rgbSessionId !== undefined) view.setBigUint64(8, data.rgbSessionId === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.rgbSessionId))), true);
  return buf;
}

export class SecPkgContext_SessionInfoView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get dwFlags(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: u32
  get cbSessionId(): number {
    return this.view.getUint32(4, true);
  }

  // 0x08: pointer
  get rgbSessionId(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: u32
  set dwFlags(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: u32
  set cbSessionId(value: number) {
    this.view.setUint32(4, value, true);
  }

  // 0x08: pointer
  set rgbSessionId(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.Security.Authentication.Identity.SecPkgContext_SessionAppData (size: 16)
 */
export interface SecPkgContext_SessionAppData {
  /** u32 */
  dwFlags: number;
  /** u32 */
  cbAppData: number;
  /** ptr */
  pbAppData: Deno.PointerValue | Uint8Array;
}

export const sizeofSecPkgContext_SessionAppData = 16;

export function allocSecPkgContext_SessionAppData(data?: Partial<SecPkgContext_SessionAppData>): Uint8Array {
  const buf = new Uint8Array(sizeofSecPkgContext_SessionAppData);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.dwFlags !== undefined) view.setUint32(0, Number(data.dwFlags), true);
  // 0x04: u32
  if (data?.cbAppData !== undefined) view.setUint32(4, Number(data.cbAppData), true);
  // 0x08: pointer
  if (data?.pbAppData !== undefined) view.setBigUint64(8, data.pbAppData === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.pbAppData))), true);
  return buf;
}

export class SecPkgContext_SessionAppDataView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get dwFlags(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: u32
  get cbAppData(): number {
    return this.view.getUint32(4, true);
  }

  // 0x08: pointer
  get pbAppData(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: u32
  set dwFlags(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: u32
  set cbAppData(value: number) {
    this.view.setUint32(4, value, true);
  }

  // 0x08: pointer
  set pbAppData(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.Security.Authentication.Identity.SecPkgContext_EapPrfInfo (size: 16)
 */
export interface SecPkgContext_EapPrfInfo {
  /** u32 */
  dwVersion: number;
  /** u32 */
  cbPrfData: number;
  /** ptr */
  pbPrfData: Deno.PointerValue | Uint8Array;
}

export const sizeofSecPkgContext_EapPrfInfo = 16;

export function allocSecPkgContext_EapPrfInfo(data?: Partial<SecPkgContext_EapPrfInfo>): Uint8Array {
  const buf = new Uint8Array(sizeofSecPkgContext_EapPrfInfo);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.dwVersion !== undefined) view.setUint32(0, Number(data.dwVersion), true);
  // 0x04: u32
  if (data?.cbPrfData !== undefined) view.setUint32(4, Number(data.cbPrfData), true);
  // 0x08: pointer
  if (data?.pbPrfData !== undefined) view.setBigUint64(8, data.pbPrfData === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.pbPrfData))), true);
  return buf;
}

export class SecPkgContext_EapPrfInfoView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get dwVersion(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: u32
  get cbPrfData(): number {
    return this.view.getUint32(4, true);
  }

  // 0x08: pointer
  get pbPrfData(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: u32
  set dwVersion(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: u32
  set cbPrfData(value: number) {
    this.view.setUint32(4, value, true);
  }

  // 0x08: pointer
  set pbPrfData(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.Security.Authentication.Identity.SecPkgContext_SupportedSignatures (size: 16)
 */
export interface SecPkgContext_SupportedSignatures {
  /** u16 */
  cSignatureAndHashAlgorithms: number;
  /** ptr */
  pSignatureAndHashAlgorithms: Deno.PointerValue | Uint8Array;
}

export const sizeofSecPkgContext_SupportedSignatures = 16;

export function allocSecPkgContext_SupportedSignatures(data?: Partial<SecPkgContext_SupportedSignatures>): Uint8Array {
  const buf = new Uint8Array(sizeofSecPkgContext_SupportedSignatures);
  const view = new DataView(buf.buffer);
  // 0x00: u16
  if (data?.cSignatureAndHashAlgorithms !== undefined) view.setUint16(0, Number(data.cSignatureAndHashAlgorithms), true);
  // 0x02: pad6
  // 0x08: pointer
  if (data?.pSignatureAndHashAlgorithms !== undefined) view.setBigUint64(8, data.pSignatureAndHashAlgorithms === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.pSignatureAndHashAlgorithms))), true);
  return buf;
}

export class SecPkgContext_SupportedSignaturesView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u16
  get cSignatureAndHashAlgorithms(): number {
    return this.view.getUint16(0, true);
  }

  // 0x02: pad6

  // 0x08: pointer
  get pSignatureAndHashAlgorithms(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: u16
  set cSignatureAndHashAlgorithms(value: number) {
    this.view.setUint16(0, value, true);
  }

  // 0x02: pad6

  // 0x08: pointer
  set pSignatureAndHashAlgorithms(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.Security.Authentication.Identity.SecPkgContext_Certificates (size: 16)
 */
export interface SecPkgContext_Certificates {
  /** u32 */
  cCertificates: number;
  /** u32 */
  cbCertificateChain: number;
  /** ptr */
  pbCertificateChain: Deno.PointerValue | Uint8Array;
}

export const sizeofSecPkgContext_Certificates = 16;

export function allocSecPkgContext_Certificates(data?: Partial<SecPkgContext_Certificates>): Uint8Array {
  const buf = new Uint8Array(sizeofSecPkgContext_Certificates);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.cCertificates !== undefined) view.setUint32(0, Number(data.cCertificates), true);
  // 0x04: u32
  if (data?.cbCertificateChain !== undefined) view.setUint32(4, Number(data.cbCertificateChain), true);
  // 0x08: pointer
  if (data?.pbCertificateChain !== undefined) view.setBigUint64(8, data.pbCertificateChain === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.pbCertificateChain))), true);
  return buf;
}

export class SecPkgContext_CertificatesView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get cCertificates(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: u32
  get cbCertificateChain(): number {
    return this.view.getUint32(4, true);
  }

  // 0x08: pointer
  get pbCertificateChain(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: u32
  set cCertificates(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: u32
  set cbCertificateChain(value: number) {
    this.view.setUint32(4, value, true);
  }

  // 0x08: pointer
  set pbCertificateChain(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.Security.Authentication.Identity.SecPkgContext_CertInfo (size: 40)
 */
export interface SecPkgContext_CertInfo {
  /** u32 */
  dwVersion: number;
  /** u32 */
  cbSubjectName: number;
  /** Windows.Win32.Foundation.PWSTR */
  pwszSubjectName: string | null | Uint8Array | Uint16Array;
  /** u32 */
  cbIssuerName: number;
  /** Windows.Win32.Foundation.PWSTR */
  pwszIssuerName: string | null | Uint8Array | Uint16Array;
  /** u32 */
  dwKeySize: number;
}

export const sizeofSecPkgContext_CertInfo = 40;

export function allocSecPkgContext_CertInfo(data?: Partial<SecPkgContext_CertInfo>): Uint8Array {
  const buf = new Uint8Array(sizeofSecPkgContext_CertInfo);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.dwVersion !== undefined) view.setUint32(0, Number(data.dwVersion), true);
  // 0x04: u32
  if (data?.cbSubjectName !== undefined) view.setUint32(4, Number(data.cbSubjectName), true);
  // 0x08: buffer
  if (data?.pwszSubjectName !== undefined) {
    (buf as any)._f8 = util.pwstrToFfi(data.pwszSubjectName);
    view.setBigUint64(8, (buf as any)._f8 === null ? 0n : BigInt(Deno.UnsafePointer.value(Deno.UnsafePointer.of((buf as any)._f8))), true);
  }
  // 0x10: u32
  if (data?.cbIssuerName !== undefined) view.setUint32(16, Number(data.cbIssuerName), true);
  // 0x14: pad4
  // 0x18: buffer
  if (data?.pwszIssuerName !== undefined) {
    (buf as any)._f24 = util.pwstrToFfi(data.pwszIssuerName);
    view.setBigUint64(24, (buf as any)._f24 === null ? 0n : BigInt(Deno.UnsafePointer.value(Deno.UnsafePointer.of((buf as any)._f24))), true);
  }
  // 0x20: u32
  if (data?.dwKeySize !== undefined) view.setUint32(32, Number(data.dwKeySize), true);
  // 0x24: pad4
  return buf;
}

export class SecPkgContext_CertInfoView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get dwVersion(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: u32
  get cbSubjectName(): number {
    return this.view.getUint32(4, true);
  }

  // 0x08: buffer
  get pwszSubjectName(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x10: u32
  get cbIssuerName(): number {
    return this.view.getUint32(16, true);
  }

  // 0x14: pad4

  // 0x18: buffer
  get pwszIssuerName(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(24, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x20: u32
  get dwKeySize(): number {
    return this.view.getUint32(32, true);
  }

  // 0x24: pad4

  // 0x00: u32
  set dwVersion(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: u32
  set cbSubjectName(value: number) {
    this.view.setUint32(4, value, true);
  }

  // 0x08: buffer
  set pwszSubjectName(value: Uint8Array | Deno.PointerValue) {
    (this.buf as any)._f8 = value;
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer((this.buf as any)._f8))), true);
  }

  // 0x10: u32
  set cbIssuerName(value: number) {
    this.view.setUint32(16, value, true);
  }

  // 0x14: pad4

  // 0x18: buffer
  set pwszIssuerName(value: Uint8Array | Deno.PointerValue) {
    (this.buf as any)._f24 = value;
    this.view.setBigUint64(24, BigInt(Deno.UnsafePointer.value(util.toPointer((this.buf as any)._f24))), true);
  }

  // 0x20: u32
  set dwKeySize(value: number) {
    this.view.setUint32(32, value, true);
  }

  // 0x24: pad4
}

export type HWND = Deno.PointerValue;

/**
 * Windows.Win32.Security.Authentication.Identity.SecPkgContext_UiInfo (size: 8)
 */
export interface SecPkgContext_UiInfo {
  /** Windows.Win32.Foundation.HWND */
  hParentWindow: Deno.PointerValue;
}

export const sizeofSecPkgContext_UiInfo = 8;

export function allocSecPkgContext_UiInfo(data?: Partial<SecPkgContext_UiInfo>): Uint8Array {
  const buf = new Uint8Array(sizeofSecPkgContext_UiInfo);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.hParentWindow !== undefined) view.setBigUint64(0, data.hParentWindow === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.hParentWindow))), true);
  return buf;
}

export class SecPkgContext_UiInfoView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get hParentWindow(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(0, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: pointer
  set hParentWindow(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(0, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.Security.Authentication.Identity.SecPkgContext_EarlyStart (size: 8)
 */
export interface SecPkgContext_EarlyStart {
  /** u32 */
  dwEarlyStartFlags: number;
}

export const sizeofSecPkgContext_EarlyStart = 8;

export function allocSecPkgContext_EarlyStart(data?: Partial<SecPkgContext_EarlyStart>): Uint8Array {
  const buf = new Uint8Array(sizeofSecPkgContext_EarlyStart);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.dwEarlyStartFlags !== undefined) view.setUint32(0, Number(data.dwEarlyStartFlags), true);
  // 0x04: pad4
  return buf;
}

export class SecPkgContext_EarlyStartView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get dwEarlyStartFlags(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: pad4

  // 0x00: u32
  set dwEarlyStartFlags(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: pad4
}

/**
 * Windows.Win32.Security.Authentication.Identity.SecPkgContext_KeyingMaterialInfo (size: 40)
 */
export interface SecPkgContext_KeyingMaterialInfo {
  /** u16 */
  cbLabel: number;
  /** Windows.Win32.Foundation.PSTR */
  pszLabel: string | null | Uint8Array;
  /** u16 */
  cbContextValue: number;
  /** ptr */
  pbContextValue: Deno.PointerValue | Uint8Array;
  /** u32 */
  cbKeyingMaterial: number;
}

export const sizeofSecPkgContext_KeyingMaterialInfo = 40;

export function allocSecPkgContext_KeyingMaterialInfo(data?: Partial<SecPkgContext_KeyingMaterialInfo>): Uint8Array {
  const buf = new Uint8Array(sizeofSecPkgContext_KeyingMaterialInfo);
  const view = new DataView(buf.buffer);
  // 0x00: u16
  if (data?.cbLabel !== undefined) view.setUint16(0, Number(data.cbLabel), true);
  // 0x02: pad6
  // 0x08: buffer
  if (data?.pszLabel !== undefined) {
    (buf as any)._f8 = util.pstrToFfi(data.pszLabel);
    view.setBigUint64(8, (buf as any)._f8 === null ? 0n : BigInt(Deno.UnsafePointer.value(Deno.UnsafePointer.of((buf as any)._f8))), true);
  }
  // 0x10: u16
  if (data?.cbContextValue !== undefined) view.setUint16(16, Number(data.cbContextValue), true);
  // 0x12: pad6
  // 0x18: pointer
  if (data?.pbContextValue !== undefined) view.setBigUint64(24, data.pbContextValue === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.pbContextValue))), true);
  // 0x20: u32
  if (data?.cbKeyingMaterial !== undefined) view.setUint32(32, Number(data.cbKeyingMaterial), true);
  // 0x24: pad4
  return buf;
}

export class SecPkgContext_KeyingMaterialInfoView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u16
  get cbLabel(): number {
    return this.view.getUint16(0, true);
  }

  // 0x02: pad6

  // 0x08: buffer
  get pszLabel(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x10: u16
  get cbContextValue(): number {
    return this.view.getUint16(16, true);
  }

  // 0x12: pad6

  // 0x18: pointer
  get pbContextValue(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(24, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x20: u32
  get cbKeyingMaterial(): number {
    return this.view.getUint32(32, true);
  }

  // 0x24: pad4

  // 0x00: u16
  set cbLabel(value: number) {
    this.view.setUint16(0, value, true);
  }

  // 0x02: pad6

  // 0x08: buffer
  set pszLabel(value: Uint8Array | Deno.PointerValue) {
    (this.buf as any)._f8 = value;
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer((this.buf as any)._f8))), true);
  }

  // 0x10: u16
  set cbContextValue(value: number) {
    this.view.setUint16(16, value, true);
  }

  // 0x12: pad6

  // 0x18: pointer
  set pbContextValue(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(24, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x20: u32
  set cbKeyingMaterial(value: number) {
    this.view.setUint32(32, value, true);
  }

  // 0x24: pad4
}

/**
 * Windows.Win32.Security.Authentication.Identity.SecPkgContext_KeyingMaterial (size: 16)
 */
export interface SecPkgContext_KeyingMaterial {
  /** u32 */
  cbKeyingMaterial: number;
  /** ptr */
  pbKeyingMaterial: Deno.PointerValue | Uint8Array;
}

export const sizeofSecPkgContext_KeyingMaterial = 16;

export function allocSecPkgContext_KeyingMaterial(data?: Partial<SecPkgContext_KeyingMaterial>): Uint8Array {
  const buf = new Uint8Array(sizeofSecPkgContext_KeyingMaterial);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.cbKeyingMaterial !== undefined) view.setUint32(0, Number(data.cbKeyingMaterial), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.pbKeyingMaterial !== undefined) view.setBigUint64(8, data.pbKeyingMaterial === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.pbKeyingMaterial))), true);
  return buf;
}

export class SecPkgContext_KeyingMaterialView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get cbKeyingMaterial(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  get pbKeyingMaterial(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: u32
  set cbKeyingMaterial(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  set pbKeyingMaterial(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.Security.Authentication.Identity.SecPkgContext_KeyingMaterial_Inproc (size: 48)
 */
export interface SecPkgContext_KeyingMaterial_Inproc {
  /** u16 */
  cbLabel: number;
  /** Windows.Win32.Foundation.PSTR */
  pszLabel: string | null | Uint8Array;
  /** u16 */
  cbContextValue: number;
  /** ptr */
  pbContextValue: Deno.PointerValue | Uint8Array;
  /** u32 */
  cbKeyingMaterial: number;
  /** ptr */
  pbKeyingMaterial: Deno.PointerValue | Uint8Array;
}

export const sizeofSecPkgContext_KeyingMaterial_Inproc = 48;

export function allocSecPkgContext_KeyingMaterial_Inproc(data?: Partial<SecPkgContext_KeyingMaterial_Inproc>): Uint8Array {
  const buf = new Uint8Array(sizeofSecPkgContext_KeyingMaterial_Inproc);
  const view = new DataView(buf.buffer);
  // 0x00: u16
  if (data?.cbLabel !== undefined) view.setUint16(0, Number(data.cbLabel), true);
  // 0x02: pad6
  // 0x08: buffer
  if (data?.pszLabel !== undefined) {
    (buf as any)._f8 = util.pstrToFfi(data.pszLabel);
    view.setBigUint64(8, (buf as any)._f8 === null ? 0n : BigInt(Deno.UnsafePointer.value(Deno.UnsafePointer.of((buf as any)._f8))), true);
  }
  // 0x10: u16
  if (data?.cbContextValue !== undefined) view.setUint16(16, Number(data.cbContextValue), true);
  // 0x12: pad6
  // 0x18: pointer
  if (data?.pbContextValue !== undefined) view.setBigUint64(24, data.pbContextValue === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.pbContextValue))), true);
  // 0x20: u32
  if (data?.cbKeyingMaterial !== undefined) view.setUint32(32, Number(data.cbKeyingMaterial), true);
  // 0x24: pad4
  // 0x28: pointer
  if (data?.pbKeyingMaterial !== undefined) view.setBigUint64(40, data.pbKeyingMaterial === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.pbKeyingMaterial))), true);
  return buf;
}

export class SecPkgContext_KeyingMaterial_InprocView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u16
  get cbLabel(): number {
    return this.view.getUint16(0, true);
  }

  // 0x02: pad6

  // 0x08: buffer
  get pszLabel(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x10: u16
  get cbContextValue(): number {
    return this.view.getUint16(16, true);
  }

  // 0x12: pad6

  // 0x18: pointer
  get pbContextValue(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(24, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x20: u32
  get cbKeyingMaterial(): number {
    return this.view.getUint32(32, true);
  }

  // 0x24: pad4

  // 0x28: pointer
  get pbKeyingMaterial(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(40, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: u16
  set cbLabel(value: number) {
    this.view.setUint16(0, value, true);
  }

  // 0x02: pad6

  // 0x08: buffer
  set pszLabel(value: Uint8Array | Deno.PointerValue) {
    (this.buf as any)._f8 = value;
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer((this.buf as any)._f8))), true);
  }

  // 0x10: u16
  set cbContextValue(value: number) {
    this.view.setUint16(16, value, true);
  }

  // 0x12: pad6

  // 0x18: pointer
  set pbContextValue(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(24, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x20: u32
  set cbKeyingMaterial(value: number) {
    this.view.setUint32(32, value, true);
  }

  // 0x24: pad4

  // 0x28: pointer
  set pbKeyingMaterial(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(40, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.Security.Authentication.Identity.SecPkgContext_SrtpParameters (size: 16)
 */
export interface SecPkgContext_SrtpParameters {
  /** u16 */
  ProtectionProfile: number;
  /** u8 */
  MasterKeyIdentifierSize: number;
  /** ptr */
  MasterKeyIdentifier: Deno.PointerValue | Uint8Array;
}

export const sizeofSecPkgContext_SrtpParameters = 16;

export function allocSecPkgContext_SrtpParameters(data?: Partial<SecPkgContext_SrtpParameters>): Uint8Array {
  const buf = new Uint8Array(sizeofSecPkgContext_SrtpParameters);
  const view = new DataView(buf.buffer);
  // 0x00: u16
  if (data?.ProtectionProfile !== undefined) view.setUint16(0, Number(data.ProtectionProfile), true);
  // 0x02: u8
  if (data?.MasterKeyIdentifierSize !== undefined) view.setUint8(2, Number(data.MasterKeyIdentifierSize));
  // 0x03: pad5
  // 0x08: pointer
  if (data?.MasterKeyIdentifier !== undefined) view.setBigUint64(8, data.MasterKeyIdentifier === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.MasterKeyIdentifier))), true);
  return buf;
}

export class SecPkgContext_SrtpParametersView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u16
  get ProtectionProfile(): number {
    return this.view.getUint16(0, true);
  }

  // 0x02: u8
  get MasterKeyIdentifierSize(): number {
    return this.view.getUint8(2);
  }

  // 0x03: pad5

  // 0x08: pointer
  get MasterKeyIdentifier(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: u16
  set ProtectionProfile(value: number) {
    this.view.setUint16(0, value, true);
  }

  // 0x02: u8
  set MasterKeyIdentifierSize(value: number) {
    this.view.setUint8(2, value);
  }

  // 0x03: pad5

  // 0x08: pointer
  set MasterKeyIdentifier(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.Security.Authentication.Identity.SecPkgContext_TokenBinding (size: 16)
 */
export interface SecPkgContext_TokenBinding {
  /** u8 */
  MajorVersion: number;
  /** u8 */
  MinorVersion: number;
  /** u16 */
  KeyParametersSize: number;
  /** ptr */
  KeyParameters: Deno.PointerValue | Uint8Array;
}

export const sizeofSecPkgContext_TokenBinding = 16;

export function allocSecPkgContext_TokenBinding(data?: Partial<SecPkgContext_TokenBinding>): Uint8Array {
  const buf = new Uint8Array(sizeofSecPkgContext_TokenBinding);
  const view = new DataView(buf.buffer);
  // 0x00: u8
  if (data?.MajorVersion !== undefined) view.setUint8(0, Number(data.MajorVersion));
  // 0x01: u8
  if (data?.MinorVersion !== undefined) view.setUint8(1, Number(data.MinorVersion));
  // 0x02: u16
  if (data?.KeyParametersSize !== undefined) view.setUint16(2, Number(data.KeyParametersSize), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.KeyParameters !== undefined) view.setBigUint64(8, data.KeyParameters === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.KeyParameters))), true);
  return buf;
}

export class SecPkgContext_TokenBindingView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u8
  get MajorVersion(): number {
    return this.view.getUint8(0);
  }

  // 0x01: u8
  get MinorVersion(): number {
    return this.view.getUint8(1);
  }

  // 0x02: u16
  get KeyParametersSize(): number {
    return this.view.getUint16(2, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  get KeyParameters(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: u8
  set MajorVersion(value: number) {
    this.view.setUint8(0, value);
  }

  // 0x01: u8
  set MinorVersion(value: number) {
    this.view.setUint8(1, value);
  }

  // 0x02: u16
  set KeyParametersSize(value: number) {
    this.view.setUint16(2, value, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  set KeyParameters(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.Security.Authentication.Identity.SecPkgContext_CertificateValidationResult (size: 16)
 */
export interface SecPkgContext_CertificateValidationResult {
  /** u32 */
  dwChainErrorStatus: number;
  /** Windows.Win32.Foundation.HRESULT */
  hrVerifyChainStatus: Uint8Array | Deno.PointerValue;
}

export const sizeofSecPkgContext_CertificateValidationResult = 16;

export function allocSecPkgContext_CertificateValidationResult(data?: Partial<SecPkgContext_CertificateValidationResult>): Uint8Array {
  const buf = new Uint8Array(sizeofSecPkgContext_CertificateValidationResult);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.dwChainErrorStatus !== undefined) view.setUint32(0, Number(data.dwChainErrorStatus), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.hrVerifyChainStatus !== undefined) view.setBigUint64(8, data.hrVerifyChainStatus === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.hrVerifyChainStatus))), true);
  return buf;
}

export class SecPkgContext_CertificateValidationResultView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get dwChainErrorStatus(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  get hrVerifyChainStatus(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: u32
  set dwChainErrorStatus(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  set hrVerifyChainStatus(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

export type HCERTSTORE = Deno.PointerValue | Uint8Array;

/**
 * Windows.Win32.Security.Authentication.Identity.SCHANNEL_CRED (size: 80)
 */
export interface SCHANNEL_CRED {
  /** u32 */
  dwVersion: number;
  /** u32 */
  cCreds: number;
  /** ptr */
  paCred: Deno.PointerValue | Uint8Array;
  /** Windows.Win32.Security.Cryptography.HCERTSTORE */
  hRootStore: Uint8Array | Deno.PointerValue;
  /** u32 */
  cMappers: number;
  /** ptr */
  aphMappers: Deno.PointerValue | Uint8Array;
  /** u32 */
  cSupportedAlgs: number;
  /** ptr */
  palgSupportedAlgs: Deno.PointerValue | Uint8Array;
  /** u32 */
  grbitEnabledProtocols: number;
  /** u32 */
  dwMinimumCipherStrength: number;
  /** u32 */
  dwMaximumCipherStrength: number;
  /** u32 */
  dwSessionLifespan: number;
  /** Windows.Win32.Security.Authentication.Identity.SCHANNEL_CRED_FLAGS */
  dwFlags: SCHANNEL_CRED_FLAGS;
  /** u32 */
  dwCredFormat: number;
}

export const sizeofSCHANNEL_CRED = 80;

export function allocSCHANNEL_CRED(data?: Partial<SCHANNEL_CRED>): Uint8Array {
  const buf = new Uint8Array(sizeofSCHANNEL_CRED);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.dwVersion !== undefined) view.setUint32(0, Number(data.dwVersion), true);
  // 0x04: u32
  if (data?.cCreds !== undefined) view.setUint32(4, Number(data.cCreds), true);
  // 0x08: pointer
  if (data?.paCred !== undefined) view.setBigUint64(8, data.paCred === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.paCred))), true);
  // 0x10: pointer
  if (data?.hRootStore !== undefined) view.setBigUint64(16, data.hRootStore === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.hRootStore))), true);
  // 0x18: u32
  if (data?.cMappers !== undefined) view.setUint32(24, Number(data.cMappers), true);
  // 0x1c: pad4
  // 0x20: pointer
  if (data?.aphMappers !== undefined) view.setBigUint64(32, data.aphMappers === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.aphMappers))), true);
  // 0x28: u32
  if (data?.cSupportedAlgs !== undefined) view.setUint32(40, Number(data.cSupportedAlgs), true);
  // 0x2c: pad4
  // 0x30: pointer
  if (data?.palgSupportedAlgs !== undefined) view.setBigUint64(48, data.palgSupportedAlgs === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.palgSupportedAlgs))), true);
  // 0x38: u32
  if (data?.grbitEnabledProtocols !== undefined) view.setUint32(56, Number(data.grbitEnabledProtocols), true);
  // 0x3c: u32
  if (data?.dwMinimumCipherStrength !== undefined) view.setUint32(60, Number(data.dwMinimumCipherStrength), true);
  // 0x40: u32
  if (data?.dwMaximumCipherStrength !== undefined) view.setUint32(64, Number(data.dwMaximumCipherStrength), true);
  // 0x44: u32
  if (data?.dwSessionLifespan !== undefined) view.setUint32(68, Number(data.dwSessionLifespan), true);
  // 0x48: u32
  if (data?.dwFlags !== undefined) view.setUint32(72, Number(data.dwFlags), true);
  // 0x4c: u32
  if (data?.dwCredFormat !== undefined) view.setUint32(76, Number(data.dwCredFormat), true);
  return buf;
}

export class SCHANNEL_CREDView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get dwVersion(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: u32
  get cCreds(): number {
    return this.view.getUint32(4, true);
  }

  // 0x08: pointer
  get paCred(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x10: pointer
  get hRootStore(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(16, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x18: u32
  get cMappers(): number {
    return this.view.getUint32(24, true);
  }

  // 0x1c: pad4

  // 0x20: pointer
  get aphMappers(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(32, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x28: u32
  get cSupportedAlgs(): number {
    return this.view.getUint32(40, true);
  }

  // 0x2c: pad4

  // 0x30: pointer
  get palgSupportedAlgs(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(48, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x38: u32
  get grbitEnabledProtocols(): number {
    return this.view.getUint32(56, true);
  }

  // 0x3c: u32
  get dwMinimumCipherStrength(): number {
    return this.view.getUint32(60, true);
  }

  // 0x40: u32
  get dwMaximumCipherStrength(): number {
    return this.view.getUint32(64, true);
  }

  // 0x44: u32
  get dwSessionLifespan(): number {
    return this.view.getUint32(68, true);
  }

  // 0x48: u32
  get dwFlags(): number {
    return this.view.getUint32(72, true);
  }

  // 0x4c: u32
  get dwCredFormat(): number {
    return this.view.getUint32(76, true);
  }

  // 0x00: u32
  set dwVersion(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: u32
  set cCreds(value: number) {
    this.view.setUint32(4, value, true);
  }

  // 0x08: pointer
  set paCred(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x10: pointer
  set hRootStore(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(16, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x18: u32
  set cMappers(value: number) {
    this.view.setUint32(24, value, true);
  }

  // 0x1c: pad4

  // 0x20: pointer
  set aphMappers(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(32, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x28: u32
  set cSupportedAlgs(value: number) {
    this.view.setUint32(40, value, true);
  }

  // 0x2c: pad4

  // 0x30: pointer
  set palgSupportedAlgs(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(48, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x38: u32
  set grbitEnabledProtocols(value: number) {
    this.view.setUint32(56, value, true);
  }

  // 0x3c: u32
  set dwMinimumCipherStrength(value: number) {
    this.view.setUint32(60, value, true);
  }

  // 0x40: u32
  set dwMaximumCipherStrength(value: number) {
    this.view.setUint32(64, value, true);
  }

  // 0x44: u32
  set dwSessionLifespan(value: number) {
    this.view.setUint32(68, value, true);
  }

  // 0x48: u32
  set dwFlags(value: number) {
    this.view.setUint32(72, value, true);
  }

  // 0x4c: u32
  set dwCredFormat(value: number) {
    this.view.setUint32(76, value, true);
  }
}

/**
 * Windows.Win32.Security.Authentication.Identity.SEND_GENERIC_TLS_EXTENSION (size: 24)
 */
export interface SEND_GENERIC_TLS_EXTENSION {
  /** u16 */
  ExtensionType: number;
  /** u16 */
  HandshakeType: number;
  /** u32 */
  Flags: number;
  /** u16 */
  BufferSize: number;
  /** array */
  Buffer: Deno.PointerValue;
}

export const sizeofSEND_GENERIC_TLS_EXTENSION = 24;

export function allocSEND_GENERIC_TLS_EXTENSION(data?: Partial<SEND_GENERIC_TLS_EXTENSION>): Uint8Array {
  const buf = new Uint8Array(sizeofSEND_GENERIC_TLS_EXTENSION);
  const view = new DataView(buf.buffer);
  // 0x00: u16
  if (data?.ExtensionType !== undefined) view.setUint16(0, Number(data.ExtensionType), true);
  // 0x02: u16
  if (data?.HandshakeType !== undefined) view.setUint16(2, Number(data.HandshakeType), true);
  // 0x04: u32
  if (data?.Flags !== undefined) view.setUint32(4, Number(data.Flags), true);
  // 0x08: u16
  if (data?.BufferSize !== undefined) view.setUint16(8, Number(data.BufferSize), true);
  // 0x0a: pad6
  // 0x10: pointer
  if (data?.Buffer !== undefined) view.setBigUint64(16, data.Buffer === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.Buffer))), true);
  return buf;
}

export class SEND_GENERIC_TLS_EXTENSIONView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u16
  get ExtensionType(): number {
    return this.view.getUint16(0, true);
  }

  // 0x02: u16
  get HandshakeType(): number {
    return this.view.getUint16(2, true);
  }

  // 0x04: u32
  get Flags(): number {
    return this.view.getUint32(4, true);
  }

  // 0x08: u16
  get BufferSize(): number {
    return this.view.getUint16(8, true);
  }

  // 0x0a: pad6

  // 0x10: pointer
  get Buffer(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(16, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: u16
  set ExtensionType(value: number) {
    this.view.setUint16(0, value, true);
  }

  // 0x02: u16
  set HandshakeType(value: number) {
    this.view.setUint16(2, value, true);
  }

  // 0x04: u32
  set Flags(value: number) {
    this.view.setUint32(4, value, true);
  }

  // 0x08: u16
  set BufferSize(value: number) {
    this.view.setUint16(8, value, true);
  }

  // 0x0a: pad6

  // 0x10: pointer
  set Buffer(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(16, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.Security.Authentication.Identity.TLS_EXTENSION_SUBSCRIPTION (size: 8)
 */
export interface TLS_EXTENSION_SUBSCRIPTION {
  /** u16 */
  ExtensionType: number;
  /** u16 */
  HandshakeType: number;
}

export const sizeofTLS_EXTENSION_SUBSCRIPTION = 8;

export function allocTLS_EXTENSION_SUBSCRIPTION(data?: Partial<TLS_EXTENSION_SUBSCRIPTION>): Uint8Array {
  const buf = new Uint8Array(sizeofTLS_EXTENSION_SUBSCRIPTION);
  const view = new DataView(buf.buffer);
  // 0x00: u16
  if (data?.ExtensionType !== undefined) view.setUint16(0, Number(data.ExtensionType), true);
  // 0x02: u16
  if (data?.HandshakeType !== undefined) view.setUint16(2, Number(data.HandshakeType), true);
  // 0x04: pad4
  return buf;
}

export class TLS_EXTENSION_SUBSCRIPTIONView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u16
  get ExtensionType(): number {
    return this.view.getUint16(0, true);
  }

  // 0x02: u16
  get HandshakeType(): number {
    return this.view.getUint16(2, true);
  }

  // 0x04: pad4

  // 0x00: u16
  set ExtensionType(value: number) {
    this.view.setUint16(0, value, true);
  }

  // 0x02: u16
  set HandshakeType(value: number) {
    this.view.setUint16(2, value, true);
  }

  // 0x04: pad4
}

/**
 * Windows.Win32.Security.Authentication.Identity.SUBSCRIBE_GENERIC_TLS_EXTENSION (size: 16)
 */
export interface SUBSCRIBE_GENERIC_TLS_EXTENSION {
  /** u32 */
  Flags: number;
  /** u32 */
  SubscriptionsCount: number;
  /** array */
  Subscriptions: Deno.PointerValue;
}

export const sizeofSUBSCRIBE_GENERIC_TLS_EXTENSION = 16;

export function allocSUBSCRIBE_GENERIC_TLS_EXTENSION(data?: Partial<SUBSCRIBE_GENERIC_TLS_EXTENSION>): Uint8Array {
  const buf = new Uint8Array(sizeofSUBSCRIBE_GENERIC_TLS_EXTENSION);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.Flags !== undefined) view.setUint32(0, Number(data.Flags), true);
  // 0x04: u32
  if (data?.SubscriptionsCount !== undefined) view.setUint32(4, Number(data.SubscriptionsCount), true);
  // 0x08: pointer
  if (data?.Subscriptions !== undefined) view.setBigUint64(8, data.Subscriptions === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.Subscriptions))), true);
  return buf;
}

export class SUBSCRIBE_GENERIC_TLS_EXTENSIONView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get Flags(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: u32
  get SubscriptionsCount(): number {
    return this.view.getUint32(4, true);
  }

  // 0x08: pointer
  get Subscriptions(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: u32
  set Flags(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: u32
  set SubscriptionsCount(value: number) {
    this.view.setUint32(4, value, true);
  }

  // 0x08: pointer
  set Subscriptions(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.Security.Authentication.Identity.SCHANNEL_CERT_HASH (size: 24)
 */
export interface SCHANNEL_CERT_HASH {
  /** u32 */
  dwLength: number;
  /** u32 */
  dwFlags: number;
  /** usize */
  hProv: Deno.PointerValue;
  /** array */
  ShaHash: Deno.PointerValue;
}

export const sizeofSCHANNEL_CERT_HASH = 24;

export function allocSCHANNEL_CERT_HASH(data?: Partial<SCHANNEL_CERT_HASH>): Uint8Array {
  const buf = new Uint8Array(sizeofSCHANNEL_CERT_HASH);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.dwLength !== undefined) view.setUint32(0, Number(data.dwLength), true);
  // 0x04: u32
  if (data?.dwFlags !== undefined) view.setUint32(4, Number(data.dwFlags), true);
  // 0x08: usize
  if (data?.hProv !== undefined) view.setBigUint64(8, BigInt(data.hProv), true);
  // 0x10: pointer
  if (data?.ShaHash !== undefined) view.setBigUint64(16, data.ShaHash === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.ShaHash))), true);
  return buf;
}

export class SCHANNEL_CERT_HASHView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get dwLength(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: u32
  get dwFlags(): number {
    return this.view.getUint32(4, true);
  }

  // 0x08: usize
  get hProv(): Deno.PointerValue {
    return Number(this.view.getBigUint64(8, true));
  }

  // 0x10: pointer
  get ShaHash(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(16, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: u32
  set dwLength(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: u32
  set dwFlags(value: number) {
    this.view.setUint32(4, value, true);
  }

  // 0x08: usize
  set hProv(value: Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(value), true);
  }

  // 0x10: pointer
  set ShaHash(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(16, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.Security.Authentication.Identity.SCHANNEL_CERT_HASH_STORE (size: 32)
 */
export interface SCHANNEL_CERT_HASH_STORE {
  /** u32 */
  dwLength: number;
  /** u32 */
  dwFlags: number;
  /** usize */
  hProv: Deno.PointerValue;
  /** array */
  ShaHash: Deno.PointerValue;
  /** array */
  pwszStoreName: Deno.PointerValue;
}

export const sizeofSCHANNEL_CERT_HASH_STORE = 32;

export function allocSCHANNEL_CERT_HASH_STORE(data?: Partial<SCHANNEL_CERT_HASH_STORE>): Uint8Array {
  const buf = new Uint8Array(sizeofSCHANNEL_CERT_HASH_STORE);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.dwLength !== undefined) view.setUint32(0, Number(data.dwLength), true);
  // 0x04: u32
  if (data?.dwFlags !== undefined) view.setUint32(4, Number(data.dwFlags), true);
  // 0x08: usize
  if (data?.hProv !== undefined) view.setBigUint64(8, BigInt(data.hProv), true);
  // 0x10: pointer
  if (data?.ShaHash !== undefined) view.setBigUint64(16, data.ShaHash === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.ShaHash))), true);
  // 0x18: pointer
  if (data?.pwszStoreName !== undefined) view.setBigUint64(24, data.pwszStoreName === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.pwszStoreName))), true);
  return buf;
}

export class SCHANNEL_CERT_HASH_STOREView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get dwLength(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: u32
  get dwFlags(): number {
    return this.view.getUint32(4, true);
  }

  // 0x08: usize
  get hProv(): Deno.PointerValue {
    return Number(this.view.getBigUint64(8, true));
  }

  // 0x10: pointer
  get ShaHash(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(16, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x18: pointer
  get pwszStoreName(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(24, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: u32
  set dwLength(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: u32
  set dwFlags(value: number) {
    this.view.setUint32(4, value, true);
  }

  // 0x08: usize
  set hProv(value: Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(value), true);
  }

  // 0x10: pointer
  set ShaHash(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(16, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x18: pointer
  set pwszStoreName(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(24, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.Security.Authentication.Identity.SCHANNEL_ALERT_TOKEN (size: 16)
 */
export interface SCHANNEL_ALERT_TOKEN {
  /** u32 */
  dwTokenType: number;
  /** Windows.Win32.Security.Authentication.Identity.SCHANNEL_ALERT_TOKEN_ALERT_TYPE */
  dwAlertType: SCHANNEL_ALERT_TOKEN_ALERT_TYPE;
  /** u32 */
  dwAlertNumber: number;
}

export const sizeofSCHANNEL_ALERT_TOKEN = 16;

export function allocSCHANNEL_ALERT_TOKEN(data?: Partial<SCHANNEL_ALERT_TOKEN>): Uint8Array {
  const buf = new Uint8Array(sizeofSCHANNEL_ALERT_TOKEN);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.dwTokenType !== undefined) view.setUint32(0, Number(data.dwTokenType), true);
  // 0x04: u32
  if (data?.dwAlertType !== undefined) view.setUint32(4, Number(data.dwAlertType), true);
  // 0x08: u32
  if (data?.dwAlertNumber !== undefined) view.setUint32(8, Number(data.dwAlertNumber), true);
  // 0x0c: pad4
  return buf;
}

export class SCHANNEL_ALERT_TOKENView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get dwTokenType(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: u32
  get dwAlertType(): number {
    return this.view.getUint32(4, true);
  }

  // 0x08: u32
  get dwAlertNumber(): number {
    return this.view.getUint32(8, true);
  }

  // 0x0c: pad4

  // 0x00: u32
  set dwTokenType(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: u32
  set dwAlertType(value: number) {
    this.view.setUint32(4, value, true);
  }

  // 0x08: u32
  set dwAlertNumber(value: number) {
    this.view.setUint32(8, value, true);
  }

  // 0x0c: pad4
}

/**
 * Windows.Win32.Security.Authentication.Identity.SCHANNEL_SESSION_TOKEN (size: 8)
 */
export interface SCHANNEL_SESSION_TOKEN {
  /** u32 */
  dwTokenType: number;
  /** Windows.Win32.Security.Authentication.Identity.SCHANNEL_SESSION_TOKEN_FLAGS */
  dwFlags: SCHANNEL_SESSION_TOKEN_FLAGS;
}

export const sizeofSCHANNEL_SESSION_TOKEN = 8;

export function allocSCHANNEL_SESSION_TOKEN(data?: Partial<SCHANNEL_SESSION_TOKEN>): Uint8Array {
  const buf = new Uint8Array(sizeofSCHANNEL_SESSION_TOKEN);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.dwTokenType !== undefined) view.setUint32(0, Number(data.dwTokenType), true);
  // 0x04: u32
  if (data?.dwFlags !== undefined) view.setUint32(4, Number(data.dwFlags), true);
  return buf;
}

export class SCHANNEL_SESSION_TOKENView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get dwTokenType(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: u32
  get dwFlags(): number {
    return this.view.getUint32(4, true);
  }

  // 0x00: u32
  set dwTokenType(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: u32
  set dwFlags(value: number) {
    this.view.setUint32(4, value, true);
  }
}

/**
 * Windows.Win32.Security.Authentication.Identity.SCHANNEL_CLIENT_SIGNATURE (size: 32)
 */
export interface SCHANNEL_CLIENT_SIGNATURE {
  /** u32 */
  cbLength: number;
  /** u32 */
  aiHash: number;
  /** u32 */
  cbHash: number;
  /** array */
  HashValue: Deno.PointerValue;
  /** array */
  CertThumbprint: Deno.PointerValue;
}

export const sizeofSCHANNEL_CLIENT_SIGNATURE = 32;

export function allocSCHANNEL_CLIENT_SIGNATURE(data?: Partial<SCHANNEL_CLIENT_SIGNATURE>): Uint8Array {
  const buf = new Uint8Array(sizeofSCHANNEL_CLIENT_SIGNATURE);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.cbLength !== undefined) view.setUint32(0, Number(data.cbLength), true);
  // 0x04: u32
  if (data?.aiHash !== undefined) view.setUint32(4, Number(data.aiHash), true);
  // 0x08: u32
  if (data?.cbHash !== undefined) view.setUint32(8, Number(data.cbHash), true);
  // 0x0c: pad4
  // 0x10: pointer
  if (data?.HashValue !== undefined) view.setBigUint64(16, data.HashValue === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.HashValue))), true);
  // 0x18: pointer
  if (data?.CertThumbprint !== undefined) view.setBigUint64(24, data.CertThumbprint === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.CertThumbprint))), true);
  return buf;
}

export class SCHANNEL_CLIENT_SIGNATUREView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get cbLength(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: u32
  get aiHash(): number {
    return this.view.getUint32(4, true);
  }

  // 0x08: u32
  get cbHash(): number {
    return this.view.getUint32(8, true);
  }

  // 0x0c: pad4

  // 0x10: pointer
  get HashValue(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(16, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x18: pointer
  get CertThumbprint(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(24, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: u32
  set cbLength(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: u32
  set aiHash(value: number) {
    this.view.setUint32(4, value, true);
  }

  // 0x08: u32
  set cbHash(value: number) {
    this.view.setUint32(8, value, true);
  }

  // 0x0c: pad4

  // 0x10: pointer
  set HashValue(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(16, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x18: pointer
  set CertThumbprint(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(24, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.Security.Authentication.Identity.SSL_CREDENTIAL_CERTIFICATE (size: 40)
 */
export interface SSL_CREDENTIAL_CERTIFICATE {
  /** u32 */
  cbPrivateKey: number;
  /** ptr */
  pPrivateKey: Deno.PointerValue | Uint8Array;
  /** u32 */
  cbCertificate: number;
  /** ptr */
  pCertificate: Deno.PointerValue | Uint8Array;
  /** Windows.Win32.Foundation.PSTR */
  pszPassword: string | null | Uint8Array;
}

export const sizeofSSL_CREDENTIAL_CERTIFICATE = 40;

export function allocSSL_CREDENTIAL_CERTIFICATE(data?: Partial<SSL_CREDENTIAL_CERTIFICATE>): Uint8Array {
  const buf = new Uint8Array(sizeofSSL_CREDENTIAL_CERTIFICATE);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.cbPrivateKey !== undefined) view.setUint32(0, Number(data.cbPrivateKey), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.pPrivateKey !== undefined) view.setBigUint64(8, data.pPrivateKey === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.pPrivateKey))), true);
  // 0x10: u32
  if (data?.cbCertificate !== undefined) view.setUint32(16, Number(data.cbCertificate), true);
  // 0x14: pad4
  // 0x18: pointer
  if (data?.pCertificate !== undefined) view.setBigUint64(24, data.pCertificate === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.pCertificate))), true);
  // 0x20: buffer
  if (data?.pszPassword !== undefined) {
    (buf as any)._f32 = util.pstrToFfi(data.pszPassword);
    view.setBigUint64(32, (buf as any)._f32 === null ? 0n : BigInt(Deno.UnsafePointer.value(Deno.UnsafePointer.of((buf as any)._f32))), true);
  }
  return buf;
}

export class SSL_CREDENTIAL_CERTIFICATEView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get cbPrivateKey(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  get pPrivateKey(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x10: u32
  get cbCertificate(): number {
    return this.view.getUint32(16, true);
  }

  // 0x14: pad4

  // 0x18: pointer
  get pCertificate(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(24, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x20: buffer
  get pszPassword(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(32, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: u32
  set cbPrivateKey(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  set pPrivateKey(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x10: u32
  set cbCertificate(value: number) {
    this.view.setUint32(16, value, true);
  }

  // 0x14: pad4

  // 0x18: pointer
  set pCertificate(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(24, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x20: buffer
  set pszPassword(value: Uint8Array | Deno.PointerValue) {
    (this.buf as any)._f32 = value;
    this.view.setBigUint64(32, BigInt(Deno.UnsafePointer.value(util.toPointer((this.buf as any)._f32))), true);
  }
}

/**
 * Windows.Win32.Security.Authentication.Identity.SCH_CRED (size: 40)
 */
export interface SCH_CRED {
  /** u32 */
  dwVersion: number;
  /** u32 */
  cCreds: number;
  /** ptr */
  paSecret: Deno.PointerValue | Uint8Array;
  /** ptr */
  paPublic: Deno.PointerValue | Uint8Array;
  /** u32 */
  cMappers: number;
  /** ptr */
  aphMappers: Deno.PointerValue | Uint8Array;
}

export const sizeofSCH_CRED = 40;

export function allocSCH_CRED(data?: Partial<SCH_CRED>): Uint8Array {
  const buf = new Uint8Array(sizeofSCH_CRED);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.dwVersion !== undefined) view.setUint32(0, Number(data.dwVersion), true);
  // 0x04: u32
  if (data?.cCreds !== undefined) view.setUint32(4, Number(data.cCreds), true);
  // 0x08: pointer
  if (data?.paSecret !== undefined) view.setBigUint64(8, data.paSecret === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.paSecret))), true);
  // 0x10: pointer
  if (data?.paPublic !== undefined) view.setBigUint64(16, data.paPublic === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.paPublic))), true);
  // 0x18: u32
  if (data?.cMappers !== undefined) view.setUint32(24, Number(data.cMappers), true);
  // 0x1c: pad4
  // 0x20: pointer
  if (data?.aphMappers !== undefined) view.setBigUint64(32, data.aphMappers === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.aphMappers))), true);
  return buf;
}

export class SCH_CREDView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get dwVersion(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: u32
  get cCreds(): number {
    return this.view.getUint32(4, true);
  }

  // 0x08: pointer
  get paSecret(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x10: pointer
  get paPublic(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(16, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x18: u32
  get cMappers(): number {
    return this.view.getUint32(24, true);
  }

  // 0x1c: pad4

  // 0x20: pointer
  get aphMappers(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(32, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: u32
  set dwVersion(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: u32
  set cCreds(value: number) {
    this.view.setUint32(4, value, true);
  }

  // 0x08: pointer
  set paSecret(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x10: pointer
  set paPublic(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(16, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x18: u32
  set cMappers(value: number) {
    this.view.setUint32(24, value, true);
  }

  // 0x1c: pad4

  // 0x20: pointer
  set aphMappers(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(32, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.Security.Authentication.Identity.SCH_CRED_SECRET_CAPI (size: 16)
 */
export interface SCH_CRED_SECRET_CAPI {
  /** u32 */
  dwType: number;
  /** usize */
  hProv: Deno.PointerValue;
}

export const sizeofSCH_CRED_SECRET_CAPI = 16;

export function allocSCH_CRED_SECRET_CAPI(data?: Partial<SCH_CRED_SECRET_CAPI>): Uint8Array {
  const buf = new Uint8Array(sizeofSCH_CRED_SECRET_CAPI);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.dwType !== undefined) view.setUint32(0, Number(data.dwType), true);
  // 0x04: pad4
  // 0x08: usize
  if (data?.hProv !== undefined) view.setBigUint64(8, BigInt(data.hProv), true);
  return buf;
}

export class SCH_CRED_SECRET_CAPIView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get dwType(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: pad4

  // 0x08: usize
  get hProv(): Deno.PointerValue {
    return Number(this.view.getBigUint64(8, true));
  }

  // 0x00: u32
  set dwType(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: pad4

  // 0x08: usize
  set hProv(value: Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(value), true);
  }
}

/**
 * Windows.Win32.Security.Authentication.Identity.SCH_CRED_SECRET_PRIVKEY (size: 32)
 */
export interface SCH_CRED_SECRET_PRIVKEY {
  /** u32 */
  dwType: number;
  /** ptr */
  pPrivateKey: Deno.PointerValue | Uint8Array;
  /** u32 */
  cbPrivateKey: number;
  /** Windows.Win32.Foundation.PSTR */
  pszPassword: string | null | Uint8Array;
}

export const sizeofSCH_CRED_SECRET_PRIVKEY = 32;

export function allocSCH_CRED_SECRET_PRIVKEY(data?: Partial<SCH_CRED_SECRET_PRIVKEY>): Uint8Array {
  const buf = new Uint8Array(sizeofSCH_CRED_SECRET_PRIVKEY);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.dwType !== undefined) view.setUint32(0, Number(data.dwType), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.pPrivateKey !== undefined) view.setBigUint64(8, data.pPrivateKey === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.pPrivateKey))), true);
  // 0x10: u32
  if (data?.cbPrivateKey !== undefined) view.setUint32(16, Number(data.cbPrivateKey), true);
  // 0x14: pad4
  // 0x18: buffer
  if (data?.pszPassword !== undefined) {
    (buf as any)._f24 = util.pstrToFfi(data.pszPassword);
    view.setBigUint64(24, (buf as any)._f24 === null ? 0n : BigInt(Deno.UnsafePointer.value(Deno.UnsafePointer.of((buf as any)._f24))), true);
  }
  return buf;
}

export class SCH_CRED_SECRET_PRIVKEYView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get dwType(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  get pPrivateKey(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x10: u32
  get cbPrivateKey(): number {
    return this.view.getUint32(16, true);
  }

  // 0x14: pad4

  // 0x18: buffer
  get pszPassword(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(24, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: u32
  set dwType(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  set pPrivateKey(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x10: u32
  set cbPrivateKey(value: number) {
    this.view.setUint32(16, value, true);
  }

  // 0x14: pad4

  // 0x18: buffer
  set pszPassword(value: Uint8Array | Deno.PointerValue) {
    (this.buf as any)._f24 = value;
    this.view.setBigUint64(24, BigInt(Deno.UnsafePointer.value(util.toPointer((this.buf as any)._f24))), true);
  }
}

/**
 * Windows.Win32.Security.Authentication.Identity.SCH_CRED_PUBLIC_CERTCHAIN (size: 16)
 */
export interface SCH_CRED_PUBLIC_CERTCHAIN {
  /** u32 */
  dwType: number;
  /** u32 */
  cbCertChain: number;
  /** ptr */
  pCertChain: Deno.PointerValue | Uint8Array;
}

export const sizeofSCH_CRED_PUBLIC_CERTCHAIN = 16;

export function allocSCH_CRED_PUBLIC_CERTCHAIN(data?: Partial<SCH_CRED_PUBLIC_CERTCHAIN>): Uint8Array {
  const buf = new Uint8Array(sizeofSCH_CRED_PUBLIC_CERTCHAIN);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.dwType !== undefined) view.setUint32(0, Number(data.dwType), true);
  // 0x04: u32
  if (data?.cbCertChain !== undefined) view.setUint32(4, Number(data.cbCertChain), true);
  // 0x08: pointer
  if (data?.pCertChain !== undefined) view.setBigUint64(8, data.pCertChain === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.pCertChain))), true);
  return buf;
}

export class SCH_CRED_PUBLIC_CERTCHAINView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get dwType(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: u32
  get cbCertChain(): number {
    return this.view.getUint32(4, true);
  }

  // 0x08: pointer
  get pCertChain(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: u32
  set dwType(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: u32
  set cbCertChain(value: number) {
    this.view.setUint32(4, value, true);
  }

  // 0x08: pointer
  set pCertChain(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.Security.Authentication.Identity.PctPublicKey (size: 16)
 */
export interface PctPublicKey {
  /** u32 */
  Type: number;
  /** u32 */
  cbKey: number;
  /** array */
  pKey: Deno.PointerValue;
}

export const sizeofPctPublicKey = 16;

export function allocPctPublicKey(data?: Partial<PctPublicKey>): Uint8Array {
  const buf = new Uint8Array(sizeofPctPublicKey);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.Type !== undefined) view.setUint32(0, Number(data.Type), true);
  // 0x04: u32
  if (data?.cbKey !== undefined) view.setUint32(4, Number(data.cbKey), true);
  // 0x08: pointer
  if (data?.pKey !== undefined) view.setBigUint64(8, data.pKey === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.pKey))), true);
  return buf;
}

export class PctPublicKeyView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get Type(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: u32
  get cbKey(): number {
    return this.view.getUint32(4, true);
  }

  // 0x08: pointer
  get pKey(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: u32
  set Type(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: u32
  set cbKey(value: number) {
    this.view.setUint32(4, value, true);
  }

  // 0x08: pointer
  set pKey(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.Security.Authentication.Identity.X509Certificate (size: 64)
 */
export interface X509Certificate {
  /** u32 */
  Version: number;
  /** array */
  SerialNumber: Deno.PointerValue;
  /** u32 */
  SignatureAlgorithm: number;
  /** Windows.Win32.Foundation.FILETIME */
  ValidFrom: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.Foundation.FILETIME */
  ValidUntil: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.Foundation.PSTR */
  pszIssuer: string | null | Uint8Array;
  /** Windows.Win32.Foundation.PSTR */
  pszSubject: string | null | Uint8Array;
  /** ptr */
  pPublicKey: Deno.PointerValue | Uint8Array;
}

export const sizeofX509Certificate = 64;

export function allocX509Certificate(data?: Partial<X509Certificate>): Uint8Array {
  const buf = new Uint8Array(sizeofX509Certificate);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.Version !== undefined) view.setUint32(0, Number(data.Version), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.SerialNumber !== undefined) view.setBigUint64(8, data.SerialNumber === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.SerialNumber))), true);
  // 0x10: u32
  if (data?.SignatureAlgorithm !== undefined) view.setUint32(16, Number(data.SignatureAlgorithm), true);
  // 0x14: pad4
  // 0x18: pointer
  if (data?.ValidFrom !== undefined) view.setBigUint64(24, data.ValidFrom === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.ValidFrom))), true);
  // 0x20: pointer
  if (data?.ValidUntil !== undefined) view.setBigUint64(32, data.ValidUntil === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.ValidUntil))), true);
  // 0x28: buffer
  if (data?.pszIssuer !== undefined) {
    (buf as any)._f40 = util.pstrToFfi(data.pszIssuer);
    view.setBigUint64(40, (buf as any)._f40 === null ? 0n : BigInt(Deno.UnsafePointer.value(Deno.UnsafePointer.of((buf as any)._f40))), true);
  }
  // 0x30: buffer
  if (data?.pszSubject !== undefined) {
    (buf as any)._f48 = util.pstrToFfi(data.pszSubject);
    view.setBigUint64(48, (buf as any)._f48 === null ? 0n : BigInt(Deno.UnsafePointer.value(Deno.UnsafePointer.of((buf as any)._f48))), true);
  }
  // 0x38: pointer
  if (data?.pPublicKey !== undefined) view.setBigUint64(56, data.pPublicKey === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.pPublicKey))), true);
  return buf;
}

export class X509CertificateView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get Version(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  get SerialNumber(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x10: u32
  get SignatureAlgorithm(): number {
    return this.view.getUint32(16, true);
  }

  // 0x14: pad4

  // 0x18: pointer
  get ValidFrom(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(24, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x20: pointer
  get ValidUntil(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(32, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x28: buffer
  get pszIssuer(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(40, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x30: buffer
  get pszSubject(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(48, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x38: pointer
  get pPublicKey(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(56, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: u32
  set Version(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  set SerialNumber(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x10: u32
  set SignatureAlgorithm(value: number) {
    this.view.setUint32(16, value, true);
  }

  // 0x14: pad4

  // 0x18: pointer
  set ValidFrom(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(24, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x20: pointer
  set ValidUntil(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(32, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x28: buffer
  set pszIssuer(value: Uint8Array | Deno.PointerValue) {
    (this.buf as any)._f40 = value;
    this.view.setBigUint64(40, BigInt(Deno.UnsafePointer.value(util.toPointer((this.buf as any)._f40))), true);
  }

  // 0x30: buffer
  set pszSubject(value: Uint8Array | Deno.PointerValue) {
    (this.buf as any)._f48 = value;
    this.view.setBigUint64(48, BigInt(Deno.UnsafePointer.value(util.toPointer((this.buf as any)._f48))), true);
  }

  // 0x38: pointer
  set pPublicKey(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(56, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.Security.Authentication.Identity.SCH_EXTENSION_DATA (size: 24)
 */
export interface SCH_EXTENSION_DATA {
  /** u16 */
  ExtensionType: number;
  /** ptr */
  pExtData: Deno.PointerValue | Uint8Array;
  /** u32 */
  cbExtData: number;
}

export const sizeofSCH_EXTENSION_DATA = 24;

export function allocSCH_EXTENSION_DATA(data?: Partial<SCH_EXTENSION_DATA>): Uint8Array {
  const buf = new Uint8Array(sizeofSCH_EXTENSION_DATA);
  const view = new DataView(buf.buffer);
  // 0x00: u16
  if (data?.ExtensionType !== undefined) view.setUint16(0, Number(data.ExtensionType), true);
  // 0x02: pad6
  // 0x08: pointer
  if (data?.pExtData !== undefined) view.setBigUint64(8, data.pExtData === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.pExtData))), true);
  // 0x10: u32
  if (data?.cbExtData !== undefined) view.setUint32(16, Number(data.cbExtData), true);
  // 0x14: pad4
  return buf;
}

export class SCH_EXTENSION_DATAView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u16
  get ExtensionType(): number {
    return this.view.getUint16(0, true);
  }

  // 0x02: pad6

  // 0x08: pointer
  get pExtData(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x10: u32
  get cbExtData(): number {
    return this.view.getUint32(16, true);
  }

  // 0x14: pad4

  // 0x00: u16
  set ExtensionType(value: number) {
    this.view.setUint16(0, value, true);
  }

  // 0x02: pad6

  // 0x08: pointer
  set pExtData(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x10: u32
  set cbExtData(value: number) {
    this.view.setUint32(16, value, true);
  }

  // 0x14: pad4
}

/**
 * Windows.Win32.Security.Authentication.Identity.LOGON_HOURS (size: 16)
 */
export interface LOGON_HOURS {
  /** u16 */
  UnitsPerWeek: number;
  /** ptr */
  LogonHours: Deno.PointerValue | Uint8Array;
}

export const sizeofLOGON_HOURS = 16;

export function allocLOGON_HOURS(data?: Partial<LOGON_HOURS>): Uint8Array {
  const buf = new Uint8Array(sizeofLOGON_HOURS);
  const view = new DataView(buf.buffer);
  // 0x00: u16
  if (data?.UnitsPerWeek !== undefined) view.setUint16(0, Number(data.UnitsPerWeek), true);
  // 0x02: pad6
  // 0x08: pointer
  if (data?.LogonHours !== undefined) view.setBigUint64(8, data.LogonHours === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.LogonHours))), true);
  return buf;
}

export class LOGON_HOURSView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u16
  get UnitsPerWeek(): number {
    return this.view.getUint16(0, true);
  }

  // 0x02: pad6

  // 0x08: pointer
  get LogonHours(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: u16
  set UnitsPerWeek(value: number) {
    this.view.setUint16(0, value, true);
  }

  // 0x02: pad6

  // 0x08: pointer
  set LogonHours(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.Security.Authentication.Identity.SR_SECURITY_DESCRIPTOR (size: 16)
 */
export interface SR_SECURITY_DESCRIPTOR {
  /** u32 */
  Length: number;
  /** ptr */
  SecurityDescriptor: Deno.PointerValue | Uint8Array;
}

export const sizeofSR_SECURITY_DESCRIPTOR = 16;

export function allocSR_SECURITY_DESCRIPTOR(data?: Partial<SR_SECURITY_DESCRIPTOR>): Uint8Array {
  const buf = new Uint8Array(sizeofSR_SECURITY_DESCRIPTOR);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.Length !== undefined) view.setUint32(0, Number(data.Length), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.SecurityDescriptor !== undefined) view.setBigUint64(8, data.SecurityDescriptor === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.SecurityDescriptor))), true);
  return buf;
}

export class SR_SECURITY_DESCRIPTORView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get Length(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  get SecurityDescriptor(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: u32
  set Length(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  set SecurityDescriptor(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.Security.Authentication.Identity.USER_ALL_INFORMATION (size: 224)
 */
export interface USER_ALL_INFORMATION {
  /** Windows.Win32.Foundation.LARGE_INTEGER */
  LastLogon: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.Foundation.LARGE_INTEGER */
  LastLogoff: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.Foundation.LARGE_INTEGER */
  PasswordLastSet: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.Foundation.LARGE_INTEGER */
  AccountExpires: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.Foundation.LARGE_INTEGER */
  PasswordCanChange: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.Foundation.LARGE_INTEGER */
  PasswordMustChange: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.Foundation.UNICODE_STRING */
  UserName: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.Foundation.UNICODE_STRING */
  FullName: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.Foundation.UNICODE_STRING */
  HomeDirectory: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.Foundation.UNICODE_STRING */
  HomeDirectoryDrive: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.Foundation.UNICODE_STRING */
  ScriptPath: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.Foundation.UNICODE_STRING */
  ProfilePath: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.Foundation.UNICODE_STRING */
  AdminComment: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.Foundation.UNICODE_STRING */
  WorkStations: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.Foundation.UNICODE_STRING */
  UserComment: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.Foundation.UNICODE_STRING */
  Parameters: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.Foundation.UNICODE_STRING */
  LmPassword: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.Foundation.UNICODE_STRING */
  NtPassword: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.Foundation.UNICODE_STRING */
  PrivateData: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.Security.Authentication.Identity.SR_SECURITY_DESCRIPTOR */
  SecurityDescriptor: Uint8Array | Deno.PointerValue;
  /** u32 */
  UserId: number;
  /** u32 */
  PrimaryGroupId: number;
  /** u32 */
  UserAccountControl: number;
  /** u32 */
  WhichFields: number;
  /** Windows.Win32.Security.Authentication.Identity.LOGON_HOURS */
  LogonHours: Uint8Array | Deno.PointerValue;
  /** u16 */
  BadPasswordCount: number;
  /** u16 */
  LogonCount: number;
  /** u16 */
  CountryCode: number;
  /** u16 */
  CodePage: number;
  /** Windows.Win32.Foundation.BOOLEAN */
  LmPasswordPresent: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.Foundation.BOOLEAN */
  NtPasswordPresent: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.Foundation.BOOLEAN */
  PasswordExpired: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.Foundation.BOOLEAN */
  PrivateDataSensitive: Uint8Array | Deno.PointerValue;
}

export const sizeofUSER_ALL_INFORMATION = 224;

export function allocUSER_ALL_INFORMATION(data?: Partial<USER_ALL_INFORMATION>): Uint8Array {
  const buf = new Uint8Array(sizeofUSER_ALL_INFORMATION);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.LastLogon !== undefined) view.setBigUint64(0, data.LastLogon === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.LastLogon))), true);
  // 0x08: pointer
  if (data?.LastLogoff !== undefined) view.setBigUint64(8, data.LastLogoff === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.LastLogoff))), true);
  // 0x10: pointer
  if (data?.PasswordLastSet !== undefined) view.setBigUint64(16, data.PasswordLastSet === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.PasswordLastSet))), true);
  // 0x18: pointer
  if (data?.AccountExpires !== undefined) view.setBigUint64(24, data.AccountExpires === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.AccountExpires))), true);
  // 0x20: pointer
  if (data?.PasswordCanChange !== undefined) view.setBigUint64(32, data.PasswordCanChange === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.PasswordCanChange))), true);
  // 0x28: pointer
  if (data?.PasswordMustChange !== undefined) view.setBigUint64(40, data.PasswordMustChange === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.PasswordMustChange))), true);
  // 0x30: pointer
  if (data?.UserName !== undefined) view.setBigUint64(48, data.UserName === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.UserName))), true);
  // 0x38: pointer
  if (data?.FullName !== undefined) view.setBigUint64(56, data.FullName === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.FullName))), true);
  // 0x40: pointer
  if (data?.HomeDirectory !== undefined) view.setBigUint64(64, data.HomeDirectory === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.HomeDirectory))), true);
  // 0x48: pointer
  if (data?.HomeDirectoryDrive !== undefined) view.setBigUint64(72, data.HomeDirectoryDrive === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.HomeDirectoryDrive))), true);
  // 0x50: pointer
  if (data?.ScriptPath !== undefined) view.setBigUint64(80, data.ScriptPath === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.ScriptPath))), true);
  // 0x58: pointer
  if (data?.ProfilePath !== undefined) view.setBigUint64(88, data.ProfilePath === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.ProfilePath))), true);
  // 0x60: pointer
  if (data?.AdminComment !== undefined) view.setBigUint64(96, data.AdminComment === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.AdminComment))), true);
  // 0x68: pointer
  if (data?.WorkStations !== undefined) view.setBigUint64(104, data.WorkStations === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.WorkStations))), true);
  // 0x70: pointer
  if (data?.UserComment !== undefined) view.setBigUint64(112, data.UserComment === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.UserComment))), true);
  // 0x78: pointer
  if (data?.Parameters !== undefined) view.setBigUint64(120, data.Parameters === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.Parameters))), true);
  // 0x80: pointer
  if (data?.LmPassword !== undefined) view.setBigUint64(128, data.LmPassword === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.LmPassword))), true);
  // 0x88: pointer
  if (data?.NtPassword !== undefined) view.setBigUint64(136, data.NtPassword === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.NtPassword))), true);
  // 0x90: pointer
  if (data?.PrivateData !== undefined) view.setBigUint64(144, data.PrivateData === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.PrivateData))), true);
  // 0x98: pointer
  if (data?.SecurityDescriptor !== undefined) view.setBigUint64(152, data.SecurityDescriptor === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.SecurityDescriptor))), true);
  // 0xa0: u32
  if (data?.UserId !== undefined) view.setUint32(160, Number(data.UserId), true);
  // 0xa4: u32
  if (data?.PrimaryGroupId !== undefined) view.setUint32(164, Number(data.PrimaryGroupId), true);
  // 0xa8: u32
  if (data?.UserAccountControl !== undefined) view.setUint32(168, Number(data.UserAccountControl), true);
  // 0xac: u32
  if (data?.WhichFields !== undefined) view.setUint32(172, Number(data.WhichFields), true);
  // 0xb0: pointer
  if (data?.LogonHours !== undefined) view.setBigUint64(176, data.LogonHours === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.LogonHours))), true);
  // 0xb8: u16
  if (data?.BadPasswordCount !== undefined) view.setUint16(184, Number(data.BadPasswordCount), true);
  // 0xba: u16
  if (data?.LogonCount !== undefined) view.setUint16(186, Number(data.LogonCount), true);
  // 0xbc: u16
  if (data?.CountryCode !== undefined) view.setUint16(188, Number(data.CountryCode), true);
  // 0xbe: u16
  if (data?.CodePage !== undefined) view.setUint16(190, Number(data.CodePage), true);
  // 0xc0: pointer
  if (data?.LmPasswordPresent !== undefined) view.setBigUint64(192, data.LmPasswordPresent === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.LmPasswordPresent))), true);
  // 0xc8: pointer
  if (data?.NtPasswordPresent !== undefined) view.setBigUint64(200, data.NtPasswordPresent === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.NtPasswordPresent))), true);
  // 0xd0: pointer
  if (data?.PasswordExpired !== undefined) view.setBigUint64(208, data.PasswordExpired === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.PasswordExpired))), true);
  // 0xd8: pointer
  if (data?.PrivateDataSensitive !== undefined) view.setBigUint64(216, data.PrivateDataSensitive === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.PrivateDataSensitive))), true);
  return buf;
}

export class USER_ALL_INFORMATIONView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get LastLogon(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(0, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x08: pointer
  get LastLogoff(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x10: pointer
  get PasswordLastSet(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(16, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x18: pointer
  get AccountExpires(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(24, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x20: pointer
  get PasswordCanChange(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(32, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x28: pointer
  get PasswordMustChange(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(40, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x30: pointer
  get UserName(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(48, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x38: pointer
  get FullName(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(56, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x40: pointer
  get HomeDirectory(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(64, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x48: pointer
  get HomeDirectoryDrive(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(72, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x50: pointer
  get ScriptPath(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(80, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x58: pointer
  get ProfilePath(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(88, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x60: pointer
  get AdminComment(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(96, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x68: pointer
  get WorkStations(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(104, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x70: pointer
  get UserComment(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(112, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x78: pointer
  get Parameters(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(120, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x80: pointer
  get LmPassword(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(128, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x88: pointer
  get NtPassword(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(136, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x90: pointer
  get PrivateData(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(144, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x98: pointer
  get SecurityDescriptor(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(152, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0xa0: u32
  get UserId(): number {
    return this.view.getUint32(160, true);
  }

  // 0xa4: u32
  get PrimaryGroupId(): number {
    return this.view.getUint32(164, true);
  }

  // 0xa8: u32
  get UserAccountControl(): number {
    return this.view.getUint32(168, true);
  }

  // 0xac: u32
  get WhichFields(): number {
    return this.view.getUint32(172, true);
  }

  // 0xb0: pointer
  get LogonHours(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(176, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0xb8: u16
  get BadPasswordCount(): number {
    return this.view.getUint16(184, true);
  }

  // 0xba: u16
  get LogonCount(): number {
    return this.view.getUint16(186, true);
  }

  // 0xbc: u16
  get CountryCode(): number {
    return this.view.getUint16(188, true);
  }

  // 0xbe: u16
  get CodePage(): number {
    return this.view.getUint16(190, true);
  }

  // 0xc0: pointer
  get LmPasswordPresent(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(192, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0xc8: pointer
  get NtPasswordPresent(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(200, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0xd0: pointer
  get PasswordExpired(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(208, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0xd8: pointer
  get PrivateDataSensitive(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(216, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: pointer
  set LastLogon(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(0, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x08: pointer
  set LastLogoff(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x10: pointer
  set PasswordLastSet(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(16, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x18: pointer
  set AccountExpires(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(24, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x20: pointer
  set PasswordCanChange(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(32, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x28: pointer
  set PasswordMustChange(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(40, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x30: pointer
  set UserName(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(48, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x38: pointer
  set FullName(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(56, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x40: pointer
  set HomeDirectory(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(64, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x48: pointer
  set HomeDirectoryDrive(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(72, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x50: pointer
  set ScriptPath(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(80, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x58: pointer
  set ProfilePath(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(88, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x60: pointer
  set AdminComment(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(96, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x68: pointer
  set WorkStations(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(104, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x70: pointer
  set UserComment(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(112, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x78: pointer
  set Parameters(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(120, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x80: pointer
  set LmPassword(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(128, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x88: pointer
  set NtPassword(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(136, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x90: pointer
  set PrivateData(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(144, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x98: pointer
  set SecurityDescriptor(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(152, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0xa0: u32
  set UserId(value: number) {
    this.view.setUint32(160, value, true);
  }

  // 0xa4: u32
  set PrimaryGroupId(value: number) {
    this.view.setUint32(164, value, true);
  }

  // 0xa8: u32
  set UserAccountControl(value: number) {
    this.view.setUint32(168, value, true);
  }

  // 0xac: u32
  set WhichFields(value: number) {
    this.view.setUint32(172, value, true);
  }

  // 0xb0: pointer
  set LogonHours(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(176, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0xb8: u16
  set BadPasswordCount(value: number) {
    this.view.setUint16(184, value, true);
  }

  // 0xba: u16
  set LogonCount(value: number) {
    this.view.setUint16(186, value, true);
  }

  // 0xbc: u16
  set CountryCode(value: number) {
    this.view.setUint16(188, value, true);
  }

  // 0xbe: u16
  set CodePage(value: number) {
    this.view.setUint16(190, value, true);
  }

  // 0xc0: pointer
  set LmPasswordPresent(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(192, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0xc8: pointer
  set NtPasswordPresent(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(200, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0xd0: pointer
  set PasswordExpired(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(208, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0xd8: pointer
  set PrivateDataSensitive(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(216, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.Security.Authentication.Identity.CLEAR_BLOCK (size: 8)
 */
export interface CLEAR_BLOCK {
  /** array */
  data: Deno.PointerValue;
}

export const sizeofCLEAR_BLOCK = 8;

export function allocCLEAR_BLOCK(data?: Partial<CLEAR_BLOCK>): Uint8Array {
  const buf = new Uint8Array(sizeofCLEAR_BLOCK);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.data !== undefined) view.setBigUint64(0, data.data === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.data))), true);
  return buf;
}

export class CLEAR_BLOCKView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get data(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(0, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: pointer
  set data(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(0, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.Security.Authentication.Identity.USER_SESSION_KEY (size: 8)
 */
export interface USER_SESSION_KEY {
  /** array */
  data: Deno.PointerValue;
}

export const sizeofUSER_SESSION_KEY = 8;

export function allocUSER_SESSION_KEY(data?: Partial<USER_SESSION_KEY>): Uint8Array {
  const buf = new Uint8Array(sizeofUSER_SESSION_KEY);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.data !== undefined) view.setBigUint64(0, data.data === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.data))), true);
  return buf;
}

export class USER_SESSION_KEYView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get data(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(0, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: pointer
  set data(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(0, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.Security.Authentication.Identity.NETLOGON_LOGON_IDENTITY_INFO (size: 40)
 */
export interface NETLOGON_LOGON_IDENTITY_INFO {
  /** Windows.Win32.Foundation.UNICODE_STRING */
  LogonDomainName: Uint8Array | Deno.PointerValue;
  /** u32 */
  ParameterControl: number;
  /** Windows.Win32.Foundation.LARGE_INTEGER */
  LogonId: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.Foundation.UNICODE_STRING */
  UserName: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.Foundation.UNICODE_STRING */
  Workstation: Uint8Array | Deno.PointerValue;
}

export const sizeofNETLOGON_LOGON_IDENTITY_INFO = 40;

export function allocNETLOGON_LOGON_IDENTITY_INFO(data?: Partial<NETLOGON_LOGON_IDENTITY_INFO>): Uint8Array {
  const buf = new Uint8Array(sizeofNETLOGON_LOGON_IDENTITY_INFO);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.LogonDomainName !== undefined) view.setBigUint64(0, data.LogonDomainName === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.LogonDomainName))), true);
  // 0x08: u32
  if (data?.ParameterControl !== undefined) view.setUint32(8, Number(data.ParameterControl), true);
  // 0x0c: pad4
  // 0x10: pointer
  if (data?.LogonId !== undefined) view.setBigUint64(16, data.LogonId === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.LogonId))), true);
  // 0x18: pointer
  if (data?.UserName !== undefined) view.setBigUint64(24, data.UserName === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.UserName))), true);
  // 0x20: pointer
  if (data?.Workstation !== undefined) view.setBigUint64(32, data.Workstation === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.Workstation))), true);
  return buf;
}

export class NETLOGON_LOGON_IDENTITY_INFOView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get LogonDomainName(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(0, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x08: u32
  get ParameterControl(): number {
    return this.view.getUint32(8, true);
  }

  // 0x0c: pad4

  // 0x10: pointer
  get LogonId(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(16, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x18: pointer
  get UserName(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(24, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x20: pointer
  get Workstation(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(32, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: pointer
  set LogonDomainName(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(0, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x08: u32
  set ParameterControl(value: number) {
    this.view.setUint32(8, value, true);
  }

  // 0x0c: pad4

  // 0x10: pointer
  set LogonId(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(16, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x18: pointer
  set UserName(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(24, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x20: pointer
  set Workstation(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(32, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.System.PasswordManagement.LM_OWF_PASSWORD (size: 8)
 */
export interface LM_OWF_PASSWORD {
  /** array */
  data: Deno.PointerValue;
}

export const sizeofLM_OWF_PASSWORD = 8;

export function allocLM_OWF_PASSWORD(data?: Partial<LM_OWF_PASSWORD>): Uint8Array {
  const buf = new Uint8Array(sizeofLM_OWF_PASSWORD);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.data !== undefined) view.setBigUint64(0, data.data === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.data))), true);
  return buf;
}

export class LM_OWF_PASSWORDView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get data(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(0, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: pointer
  set data(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(0, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.Security.Authentication.Identity.NETLOGON_INTERACTIVE_INFO (size: 24)
 */
export interface NETLOGON_INTERACTIVE_INFO {
  /** Windows.Win32.Security.Authentication.Identity.NETLOGON_LOGON_IDENTITY_INFO */
  Identity: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.System.PasswordManagement.LM_OWF_PASSWORD */
  LmOwfPassword: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.System.PasswordManagement.LM_OWF_PASSWORD */
  NtOwfPassword: Uint8Array | Deno.PointerValue;
}

export const sizeofNETLOGON_INTERACTIVE_INFO = 24;

export function allocNETLOGON_INTERACTIVE_INFO(data?: Partial<NETLOGON_INTERACTIVE_INFO>): Uint8Array {
  const buf = new Uint8Array(sizeofNETLOGON_INTERACTIVE_INFO);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.Identity !== undefined) view.setBigUint64(0, data.Identity === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.Identity))), true);
  // 0x08: pointer
  if (data?.LmOwfPassword !== undefined) view.setBigUint64(8, data.LmOwfPassword === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.LmOwfPassword))), true);
  // 0x10: pointer
  if (data?.NtOwfPassword !== undefined) view.setBigUint64(16, data.NtOwfPassword === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.NtOwfPassword))), true);
  return buf;
}

export class NETLOGON_INTERACTIVE_INFOView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get Identity(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(0, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x08: pointer
  get LmOwfPassword(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x10: pointer
  get NtOwfPassword(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(16, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: pointer
  set Identity(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(0, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x08: pointer
  set LmOwfPassword(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x10: pointer
  set NtOwfPassword(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(16, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.Security.Authentication.Identity.NETLOGON_SERVICE_INFO (size: 24)
 */
export interface NETLOGON_SERVICE_INFO {
  /** Windows.Win32.Security.Authentication.Identity.NETLOGON_LOGON_IDENTITY_INFO */
  Identity: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.System.PasswordManagement.LM_OWF_PASSWORD */
  LmOwfPassword: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.System.PasswordManagement.LM_OWF_PASSWORD */
  NtOwfPassword: Uint8Array | Deno.PointerValue;
}

export const sizeofNETLOGON_SERVICE_INFO = 24;

export function allocNETLOGON_SERVICE_INFO(data?: Partial<NETLOGON_SERVICE_INFO>): Uint8Array {
  const buf = new Uint8Array(sizeofNETLOGON_SERVICE_INFO);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.Identity !== undefined) view.setBigUint64(0, data.Identity === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.Identity))), true);
  // 0x08: pointer
  if (data?.LmOwfPassword !== undefined) view.setBigUint64(8, data.LmOwfPassword === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.LmOwfPassword))), true);
  // 0x10: pointer
  if (data?.NtOwfPassword !== undefined) view.setBigUint64(16, data.NtOwfPassword === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.NtOwfPassword))), true);
  return buf;
}

export class NETLOGON_SERVICE_INFOView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get Identity(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(0, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x08: pointer
  get LmOwfPassword(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x10: pointer
  get NtOwfPassword(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(16, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: pointer
  set Identity(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(0, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x08: pointer
  set LmOwfPassword(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x10: pointer
  set NtOwfPassword(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(16, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.Security.Authentication.Identity.NETLOGON_NETWORK_INFO (size: 32)
 */
export interface NETLOGON_NETWORK_INFO {
  /** Windows.Win32.Security.Authentication.Identity.NETLOGON_LOGON_IDENTITY_INFO */
  Identity: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.Security.Authentication.Identity.CLEAR_BLOCK */
  LmChallenge: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.System.Kernel.STRING */
  NtChallengeResponse: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.System.Kernel.STRING */
  LmChallengeResponse: Uint8Array | Deno.PointerValue;
}

export const sizeofNETLOGON_NETWORK_INFO = 32;

export function allocNETLOGON_NETWORK_INFO(data?: Partial<NETLOGON_NETWORK_INFO>): Uint8Array {
  const buf = new Uint8Array(sizeofNETLOGON_NETWORK_INFO);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.Identity !== undefined) view.setBigUint64(0, data.Identity === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.Identity))), true);
  // 0x08: pointer
  if (data?.LmChallenge !== undefined) view.setBigUint64(8, data.LmChallenge === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.LmChallenge))), true);
  // 0x10: pointer
  if (data?.NtChallengeResponse !== undefined) view.setBigUint64(16, data.NtChallengeResponse === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.NtChallengeResponse))), true);
  // 0x18: pointer
  if (data?.LmChallengeResponse !== undefined) view.setBigUint64(24, data.LmChallengeResponse === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.LmChallengeResponse))), true);
  return buf;
}

export class NETLOGON_NETWORK_INFOView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get Identity(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(0, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x08: pointer
  get LmChallenge(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x10: pointer
  get NtChallengeResponse(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(16, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x18: pointer
  get LmChallengeResponse(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(24, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: pointer
  set Identity(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(0, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x08: pointer
  set LmChallenge(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x10: pointer
  set NtChallengeResponse(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(16, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x18: pointer
  set LmChallengeResponse(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(24, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.Security.Authentication.Identity.NETLOGON_GENERIC_INFO (size: 32)
 */
export interface NETLOGON_GENERIC_INFO {
  /** Windows.Win32.Security.Authentication.Identity.NETLOGON_LOGON_IDENTITY_INFO */
  Identity: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.Foundation.UNICODE_STRING */
  PackageName: Uint8Array | Deno.PointerValue;
  /** u32 */
  DataLength: number;
  /** ptr */
  LogonData: Deno.PointerValue | Uint8Array;
}

export const sizeofNETLOGON_GENERIC_INFO = 32;

export function allocNETLOGON_GENERIC_INFO(data?: Partial<NETLOGON_GENERIC_INFO>): Uint8Array {
  const buf = new Uint8Array(sizeofNETLOGON_GENERIC_INFO);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.Identity !== undefined) view.setBigUint64(0, data.Identity === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.Identity))), true);
  // 0x08: pointer
  if (data?.PackageName !== undefined) view.setBigUint64(8, data.PackageName === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.PackageName))), true);
  // 0x10: u32
  if (data?.DataLength !== undefined) view.setUint32(16, Number(data.DataLength), true);
  // 0x14: pad4
  // 0x18: pointer
  if (data?.LogonData !== undefined) view.setBigUint64(24, data.LogonData === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.LogonData))), true);
  return buf;
}

export class NETLOGON_GENERIC_INFOView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get Identity(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(0, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x08: pointer
  get PackageName(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x10: u32
  get DataLength(): number {
    return this.view.getUint32(16, true);
  }

  // 0x14: pad4

  // 0x18: pointer
  get LogonData(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(24, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: pointer
  set Identity(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(0, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x08: pointer
  set PackageName(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x10: u32
  set DataLength(value: number) {
    this.view.setUint32(16, value, true);
  }

  // 0x14: pad4

  // 0x18: pointer
  set LogonData(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(24, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.Security.Authentication.Identity.MSV1_0_VALIDATION_INFO (size: 64)
 */
export interface MSV1_0_VALIDATION_INFO {
  /** Windows.Win32.Foundation.LARGE_INTEGER */
  LogoffTime: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.Foundation.LARGE_INTEGER */
  KickoffTime: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.Foundation.UNICODE_STRING */
  LogonServer: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.Foundation.UNICODE_STRING */
  LogonDomainName: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.Security.Authentication.Identity.USER_SESSION_KEY */
  SessionKey: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.Foundation.BOOLEAN */
  Authoritative: Uint8Array | Deno.PointerValue;
  /** u32 */
  UserFlags: number;
  /** u32 */
  WhichFields: number;
  /** u32 */
  UserId: number;
}

export const sizeofMSV1_0_VALIDATION_INFO = 64;

export function allocMSV1_0_VALIDATION_INFO(data?: Partial<MSV1_0_VALIDATION_INFO>): Uint8Array {
  const buf = new Uint8Array(sizeofMSV1_0_VALIDATION_INFO);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.LogoffTime !== undefined) view.setBigUint64(0, data.LogoffTime === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.LogoffTime))), true);
  // 0x08: pointer
  if (data?.KickoffTime !== undefined) view.setBigUint64(8, data.KickoffTime === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.KickoffTime))), true);
  // 0x10: pointer
  if (data?.LogonServer !== undefined) view.setBigUint64(16, data.LogonServer === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.LogonServer))), true);
  // 0x18: pointer
  if (data?.LogonDomainName !== undefined) view.setBigUint64(24, data.LogonDomainName === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.LogonDomainName))), true);
  // 0x20: pointer
  if (data?.SessionKey !== undefined) view.setBigUint64(32, data.SessionKey === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.SessionKey))), true);
  // 0x28: pointer
  if (data?.Authoritative !== undefined) view.setBigUint64(40, data.Authoritative === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.Authoritative))), true);
  // 0x30: u32
  if (data?.UserFlags !== undefined) view.setUint32(48, Number(data.UserFlags), true);
  // 0x34: u32
  if (data?.WhichFields !== undefined) view.setUint32(52, Number(data.WhichFields), true);
  // 0x38: u32
  if (data?.UserId !== undefined) view.setUint32(56, Number(data.UserId), true);
  // 0x3c: pad4
  return buf;
}

export class MSV1_0_VALIDATION_INFOView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get LogoffTime(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(0, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x08: pointer
  get KickoffTime(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x10: pointer
  get LogonServer(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(16, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x18: pointer
  get LogonDomainName(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(24, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x20: pointer
  get SessionKey(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(32, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x28: pointer
  get Authoritative(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(40, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x30: u32
  get UserFlags(): number {
    return this.view.getUint32(48, true);
  }

  // 0x34: u32
  get WhichFields(): number {
    return this.view.getUint32(52, true);
  }

  // 0x38: u32
  get UserId(): number {
    return this.view.getUint32(56, true);
  }

  // 0x3c: pad4

  // 0x00: pointer
  set LogoffTime(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(0, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x08: pointer
  set KickoffTime(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x10: pointer
  set LogonServer(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(16, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x18: pointer
  set LogonDomainName(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(24, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x20: pointer
  set SessionKey(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(32, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x28: pointer
  set Authoritative(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(40, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x30: u32
  set UserFlags(value: number) {
    this.view.setUint32(48, value, true);
  }

  // 0x34: u32
  set WhichFields(value: number) {
    this.view.setUint32(52, value, true);
  }

  // 0x38: u32
  set UserId(value: number) {
    this.view.setUint32(56, value, true);
  }

  // 0x3c: pad4
}

/**
 * Windows.Win32.Security.Authentication.Identity.TOKENBINDING_IDENTIFIER (size: 8)
 */
export interface TOKENBINDING_IDENTIFIER {
  /** u8 */
  keyType: number;
}

export const sizeofTOKENBINDING_IDENTIFIER = 8;

export function allocTOKENBINDING_IDENTIFIER(data?: Partial<TOKENBINDING_IDENTIFIER>): Uint8Array {
  const buf = new Uint8Array(sizeofTOKENBINDING_IDENTIFIER);
  const view = new DataView(buf.buffer);
  // 0x00: u8
  if (data?.keyType !== undefined) view.setUint8(0, Number(data.keyType));
  // 0x01: pad7
  return buf;
}

export class TOKENBINDING_IDENTIFIERView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u8
  get keyType(): number {
    return this.view.getUint8(0);
  }

  // 0x01: pad7

  // 0x00: u8
  set keyType(value: number) {
    this.view.setUint8(0, value);
  }

  // 0x01: pad7
}

/**
 * Windows.Win32.Security.Authentication.Identity.TOKENBINDING_RESULT_DATA (size: 32)
 */
export interface TOKENBINDING_RESULT_DATA {
  /** Windows.Win32.Security.Authentication.Identity.TOKENBINDING_TYPE */
  bindingType: TOKENBINDING_TYPE;
  /** u32 */
  identifierSize: number;
  /** ptr */
  identifierData: Deno.PointerValue | Uint8Array;
  /** Windows.Win32.Security.Authentication.Identity.TOKENBINDING_EXTENSION_FORMAT */
  extensionFormat: TOKENBINDING_EXTENSION_FORMAT;
  /** u32 */
  extensionSize: number;
  /** ptr */
  extensionData: Deno.PointerValue | Uint8Array;
}

export const sizeofTOKENBINDING_RESULT_DATA = 32;

export function allocTOKENBINDING_RESULT_DATA(data?: Partial<TOKENBINDING_RESULT_DATA>): Uint8Array {
  const buf = new Uint8Array(sizeofTOKENBINDING_RESULT_DATA);
  const view = new DataView(buf.buffer);
  // 0x00: i32
  if (data?.bindingType !== undefined) view.setInt32(0, Number(data.bindingType), true);
  // 0x04: u32
  if (data?.identifierSize !== undefined) view.setUint32(4, Number(data.identifierSize), true);
  // 0x08: pointer
  if (data?.identifierData !== undefined) view.setBigUint64(8, data.identifierData === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.identifierData))), true);
  // 0x10: i32
  if (data?.extensionFormat !== undefined) view.setInt32(16, Number(data.extensionFormat), true);
  // 0x14: u32
  if (data?.extensionSize !== undefined) view.setUint32(20, Number(data.extensionSize), true);
  // 0x18: pointer
  if (data?.extensionData !== undefined) view.setBigUint64(24, data.extensionData === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.extensionData))), true);
  return buf;
}

export class TOKENBINDING_RESULT_DATAView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: i32
  get bindingType(): number {
    return this.view.getInt32(0, true);
  }

  // 0x04: u32
  get identifierSize(): number {
    return this.view.getUint32(4, true);
  }

  // 0x08: pointer
  get identifierData(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x10: i32
  get extensionFormat(): number {
    return this.view.getInt32(16, true);
  }

  // 0x14: u32
  get extensionSize(): number {
    return this.view.getUint32(20, true);
  }

  // 0x18: pointer
  get extensionData(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(24, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: i32
  set bindingType(value: number) {
    this.view.setInt32(0, value, true);
  }

  // 0x04: u32
  set identifierSize(value: number) {
    this.view.setUint32(4, value, true);
  }

  // 0x08: pointer
  set identifierData(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x10: i32
  set extensionFormat(value: number) {
    this.view.setInt32(16, value, true);
  }

  // 0x14: u32
  set extensionSize(value: number) {
    this.view.setUint32(20, value, true);
  }

  // 0x18: pointer
  set extensionData(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(24, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.Security.Authentication.Identity.TOKENBINDING_RESULT_LIST (size: 16)
 */
export interface TOKENBINDING_RESULT_LIST {
  /** u32 */
  resultCount: number;
  /** ptr */
  resultData: Deno.PointerValue | Uint8Array;
}

export const sizeofTOKENBINDING_RESULT_LIST = 16;

export function allocTOKENBINDING_RESULT_LIST(data?: Partial<TOKENBINDING_RESULT_LIST>): Uint8Array {
  const buf = new Uint8Array(sizeofTOKENBINDING_RESULT_LIST);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.resultCount !== undefined) view.setUint32(0, Number(data.resultCount), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.resultData !== undefined) view.setBigUint64(8, data.resultData === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.resultData))), true);
  return buf;
}

export class TOKENBINDING_RESULT_LISTView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get resultCount(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  get resultData(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: u32
  set resultCount(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  set resultData(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.Security.Authentication.Identity.TOKENBINDING_KEY_TYPES (size: 16)
 */
export interface TOKENBINDING_KEY_TYPES {
  /** u32 */
  keyCount: number;
  /** ptr */
  keyType: Deno.PointerValue | Uint8Array;
}

export const sizeofTOKENBINDING_KEY_TYPES = 16;

export function allocTOKENBINDING_KEY_TYPES(data?: Partial<TOKENBINDING_KEY_TYPES>): Uint8Array {
  const buf = new Uint8Array(sizeofTOKENBINDING_KEY_TYPES);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.keyCount !== undefined) view.setUint32(0, Number(data.keyCount), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.keyType !== undefined) view.setBigUint64(8, data.keyType === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.keyType))), true);
  return buf;
}

export class TOKENBINDING_KEY_TYPESView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get keyCount(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  get keyType(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: u32
  set keyCount(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  set keyType(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.Security.Authentication.Identity.SL_LICENSING_STATUS (size: 40)
 */
export interface SL_LICENSING_STATUS {
  /** System.Guid */
  SkuId: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.Security.Authentication.Identity.SLLICENSINGSTATUS */
  eStatus: SLLICENSINGSTATUS;
  /** u32 */
  dwGraceTime: number;
  /** u32 */
  dwTotalGraceDays: number;
  /** Windows.Win32.Foundation.HRESULT */
  hrReason: Uint8Array | Deno.PointerValue;
  /** u64 */
  qwValidityExpiration: Deno.PointerValue;
}

export const sizeofSL_LICENSING_STATUS = 40;

export function allocSL_LICENSING_STATUS(data?: Partial<SL_LICENSING_STATUS>): Uint8Array {
  const buf = new Uint8Array(sizeofSL_LICENSING_STATUS);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.SkuId !== undefined) view.setBigUint64(0, data.SkuId === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.SkuId))), true);
  // 0x08: i32
  if (data?.eStatus !== undefined) view.setInt32(8, Number(data.eStatus), true);
  // 0x0c: u32
  if (data?.dwGraceTime !== undefined) view.setUint32(12, Number(data.dwGraceTime), true);
  // 0x10: u32
  if (data?.dwTotalGraceDays !== undefined) view.setUint32(16, Number(data.dwTotalGraceDays), true);
  // 0x14: pad4
  // 0x18: pointer
  if (data?.hrReason !== undefined) view.setBigUint64(24, data.hrReason === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.hrReason))), true);
  // 0x20: u64
  if (data?.qwValidityExpiration !== undefined) view.setBigUint64(32, BigInt(data.qwValidityExpiration), true);
  return buf;
}

export class SL_LICENSING_STATUSView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get SkuId(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(0, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x08: i32
  get eStatus(): number {
    return this.view.getInt32(8, true);
  }

  // 0x0c: u32
  get dwGraceTime(): number {
    return this.view.getUint32(12, true);
  }

  // 0x10: u32
  get dwTotalGraceDays(): number {
    return this.view.getUint32(16, true);
  }

  // 0x14: pad4

  // 0x18: pointer
  get hrReason(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(24, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x20: u64
  get qwValidityExpiration(): Deno.PointerValue {
    return Number(this.view.getBigUint64(32, true));
  }

  // 0x00: pointer
  set SkuId(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(0, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x08: i32
  set eStatus(value: number) {
    this.view.setInt32(8, value, true);
  }

  // 0x0c: u32
  set dwGraceTime(value: number) {
    this.view.setUint32(12, value, true);
  }

  // 0x10: u32
  set dwTotalGraceDays(value: number) {
    this.view.setUint32(16, value, true);
  }

  // 0x14: pad4

  // 0x18: pointer
  set hrReason(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(24, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x20: u64
  set qwValidityExpiration(value: Deno.PointerValue) {
    this.view.setBigUint64(32, BigInt(value), true);
  }
}

/**
 * Windows.Win32.Security.Authentication.Identity.SL_ACTIVATION_INFO_HEADER (size: 8)
 */
export interface SL_ACTIVATION_INFO_HEADER {
  /** u32 */
  cbSize: number;
  /** Windows.Win32.Security.Authentication.Identity.SL_ACTIVATION_TYPE */
  type: SL_ACTIVATION_TYPE;
}

export const sizeofSL_ACTIVATION_INFO_HEADER = 8;

export function allocSL_ACTIVATION_INFO_HEADER(data?: Partial<SL_ACTIVATION_INFO_HEADER>): Uint8Array {
  const buf = new Uint8Array(sizeofSL_ACTIVATION_INFO_HEADER);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.cbSize !== undefined) view.setUint32(0, Number(data.cbSize), true);
  // 0x04: i32
  if (data?.type !== undefined) view.setInt32(4, Number(data.type), true);
  return buf;
}

export class SL_ACTIVATION_INFO_HEADERView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get cbSize(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: i32
  get type(): number {
    return this.view.getInt32(4, true);
  }

  // 0x00: u32
  set cbSize(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: i32
  set type(value: number) {
    this.view.setInt32(4, value, true);
  }
}

/**
 * Windows.Win32.Security.Authentication.Identity.SL_AD_ACTIVATION_INFO (size: 24)
 */
export interface SL_AD_ACTIVATION_INFO {
  /** Windows.Win32.Security.Authentication.Identity.SL_ACTIVATION_INFO_HEADER */
  header: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.Foundation.PWSTR */
  pwszProductKey: string | null | Uint8Array | Uint16Array;
  /** Windows.Win32.Foundation.PWSTR */
  pwszActivationObjectName: string | null | Uint8Array | Uint16Array;
}

export const sizeofSL_AD_ACTIVATION_INFO = 24;

export function allocSL_AD_ACTIVATION_INFO(data?: Partial<SL_AD_ACTIVATION_INFO>): Uint8Array {
  const buf = new Uint8Array(sizeofSL_AD_ACTIVATION_INFO);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.header !== undefined) view.setBigUint64(0, data.header === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.header))), true);
  // 0x08: buffer
  if (data?.pwszProductKey !== undefined) {
    (buf as any)._f8 = util.pwstrToFfi(data.pwszProductKey);
    view.setBigUint64(8, (buf as any)._f8 === null ? 0n : BigInt(Deno.UnsafePointer.value(Deno.UnsafePointer.of((buf as any)._f8))), true);
  }
  // 0x10: buffer
  if (data?.pwszActivationObjectName !== undefined) {
    (buf as any)._f16 = util.pwstrToFfi(data.pwszActivationObjectName);
    view.setBigUint64(16, (buf as any)._f16 === null ? 0n : BigInt(Deno.UnsafePointer.value(Deno.UnsafePointer.of((buf as any)._f16))), true);
  }
  return buf;
}

export class SL_AD_ACTIVATION_INFOView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get header(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(0, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x08: buffer
  get pwszProductKey(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x10: buffer
  get pwszActivationObjectName(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(16, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: pointer
  set header(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(0, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x08: buffer
  set pwszProductKey(value: Uint8Array | Deno.PointerValue) {
    (this.buf as any)._f8 = value;
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer((this.buf as any)._f8))), true);
  }

  // 0x10: buffer
  set pwszActivationObjectName(value: Uint8Array | Deno.PointerValue) {
    (this.buf as any)._f16 = value;
    this.view.setBigUint64(16, BigInt(Deno.UnsafePointer.value(util.toPointer((this.buf as any)._f16))), true);
  }
}

/**
 * Windows.Win32.Security.Authentication.Identity.SL_NONGENUINE_UI_OPTIONS (size: 24)
 */
export interface SL_NONGENUINE_UI_OPTIONS {
  /** u32 */
  cbSize: number;
  /** ptr */
  pComponentId: Deno.PointerValue | Uint8Array;
  /** Windows.Win32.Foundation.HRESULT */
  hResultUI: Uint8Array | Deno.PointerValue;
}

export const sizeofSL_NONGENUINE_UI_OPTIONS = 24;

export function allocSL_NONGENUINE_UI_OPTIONS(data?: Partial<SL_NONGENUINE_UI_OPTIONS>): Uint8Array {
  const buf = new Uint8Array(sizeofSL_NONGENUINE_UI_OPTIONS);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.cbSize !== undefined) view.setUint32(0, Number(data.cbSize), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.pComponentId !== undefined) view.setBigUint64(8, data.pComponentId === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.pComponentId))), true);
  // 0x10: pointer
  if (data?.hResultUI !== undefined) view.setBigUint64(16, data.hResultUI === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.hResultUI))), true);
  return buf;
}

export class SL_NONGENUINE_UI_OPTIONSView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get cbSize(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  get pComponentId(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x10: pointer
  get hResultUI(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(16, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: u32
  set cbSize(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  set pComponentId(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x10: pointer
  set hResultUI(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(16, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.Security.Authentication.Identity.SL_SYSTEM_POLICY_INFORMATION (size: 16)
 */
export interface SL_SYSTEM_POLICY_INFORMATION {
  /** array */
  Reserved1: Deno.PointerValue;
  /** array */
  Reserved2: Deno.PointerValue;
}

export const sizeofSL_SYSTEM_POLICY_INFORMATION = 16;

export function allocSL_SYSTEM_POLICY_INFORMATION(data?: Partial<SL_SYSTEM_POLICY_INFORMATION>): Uint8Array {
  const buf = new Uint8Array(sizeofSL_SYSTEM_POLICY_INFORMATION);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.Reserved1 !== undefined) view.setBigUint64(0, data.Reserved1 === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.Reserved1))), true);
  // 0x08: pointer
  if (data?.Reserved2 !== undefined) view.setBigUint64(8, data.Reserved2 === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.Reserved2))), true);
  return buf;
}

export class SL_SYSTEM_POLICY_INFORMATIONView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get Reserved1(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(0, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x08: pointer
  get Reserved2(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: pointer
  set Reserved1(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(0, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x08: pointer
  set Reserved2(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

// Native Libraries

try {
  var libSECUR32_dll = Deno.dlopen("SECUR32.dll", {
    LsaRegisterLogonProcess: {
      parameters: ["pointer", "pointer", "pointer"],
      result: "pointer",
    },
    LsaLogonUser: {
      parameters: ["pointer", "pointer", "i32", "u32", "pointer", "u32", "pointer", "pointer", "pointer", "pointer", "pointer", "pointer", "pointer", "pointer"],
      result: "pointer",
    },
    LsaLookupAuthenticationPackage: {
      parameters: ["pointer", "pointer", "pointer"],
      result: "pointer",
    },
    LsaFreeReturnBuffer: {
      parameters: ["pointer"],
      result: "pointer",
    },
    LsaCallAuthenticationPackage: {
      parameters: ["pointer", "u32", "pointer", "u32", "pointer", "pointer", "pointer"],
      result: "pointer",
    },
    LsaDeregisterLogonProcess: {
      parameters: ["pointer"],
      result: "pointer",
    },
    LsaConnectUntrusted: {
      parameters: ["pointer"],
      result: "pointer",
    },
    LsaEnumerateLogonSessions: {
      parameters: ["pointer", "pointer"],
      result: "pointer",
    },
    LsaGetLogonSessionData: {
      parameters: ["pointer", "pointer"],
      result: "pointer",
    },
    LsaRegisterPolicyChangeNotification: {
      parameters: ["i32", "pointer"],
      result: "pointer",
    },
    LsaUnregisterPolicyChangeNotification: {
      parameters: ["i32", "pointer"],
      result: "pointer",
    },
    AcquireCredentialsHandleW: {
      parameters: ["buffer", "buffer", "u32", "pointer", "pointer", "pointer", "pointer", "pointer", "pointer"],
      result: "pointer",
    },
    AcquireCredentialsHandleA: {
      parameters: ["buffer", "buffer", "u32", "pointer", "pointer", "pointer", "pointer", "pointer", "pointer"],
      result: "pointer",
    },
    FreeCredentialsHandle: {
      parameters: ["pointer"],
      result: "pointer",
    },
    AddCredentialsW: {
      parameters: ["pointer", "buffer", "buffer", "u32", "pointer", "pointer", "pointer", "pointer"],
      result: "pointer",
    },
    AddCredentialsA: {
      parameters: ["pointer", "buffer", "buffer", "u32", "pointer", "pointer", "pointer", "pointer"],
      result: "pointer",
    },
    ChangeAccountPasswordW: {
      parameters: ["pointer", "pointer", "pointer", "pointer", "pointer", "pointer", "u32", "pointer"],
      result: "pointer",
    },
    ChangeAccountPasswordA: {
      parameters: ["pointer", "pointer", "pointer", "pointer", "pointer", "pointer", "u32", "pointer"],
      result: "pointer",
    },
    InitializeSecurityContextW: {
      parameters: ["pointer", "pointer", "pointer", "u32", "u32", "u32", "pointer", "u32", "pointer", "pointer", "pointer", "pointer"],
      result: "pointer",
    },
    InitializeSecurityContextA: {
      parameters: ["pointer", "pointer", "pointer", "u32", "u32", "u32", "pointer", "u32", "pointer", "pointer", "pointer", "pointer"],
      result: "pointer",
    },
    AcceptSecurityContext: {
      parameters: ["pointer", "pointer", "pointer", "u32", "u32", "pointer", "pointer", "pointer", "pointer"],
      result: "pointer",
    },
    CompleteAuthToken: {
      parameters: ["pointer", "pointer"],
      result: "pointer",
    },
    ImpersonateSecurityContext: {
      parameters: ["pointer"],
      result: "pointer",
    },
    RevertSecurityContext: {
      parameters: ["pointer"],
      result: "pointer",
    },
    QuerySecurityContextToken: {
      parameters: ["pointer", "pointer"],
      result: "pointer",
    },
    DeleteSecurityContext: {
      parameters: ["pointer"],
      result: "pointer",
    },
    ApplyControlToken: {
      parameters: ["pointer", "pointer"],
      result: "pointer",
    },
    QueryContextAttributesW: {
      parameters: ["pointer", "u32", "pointer"],
      result: "pointer",
    },
    QueryContextAttributesA: {
      parameters: ["pointer", "u32", "pointer"],
      result: "pointer",
    },
    SetContextAttributesW: {
      parameters: ["pointer", "u32", "pointer", "u32"],
      result: "pointer",
    },
    SetContextAttributesA: {
      parameters: ["pointer", "u32", "pointer", "u32"],
      result: "pointer",
    },
    QueryCredentialsAttributesW: {
      parameters: ["pointer", "u32", "pointer"],
      result: "pointer",
    },
    QueryCredentialsAttributesA: {
      parameters: ["pointer", "u32", "pointer"],
      result: "pointer",
    },
    SetCredentialsAttributesW: {
      parameters: ["pointer", "u32", "pointer", "u32"],
      result: "pointer",
    },
    SetCredentialsAttributesA: {
      parameters: ["pointer", "u32", "pointer", "u32"],
      result: "pointer",
    },
    FreeContextBuffer: {
      parameters: ["pointer"],
      result: "pointer",
    },
    MakeSignature: {
      parameters: ["pointer", "u32", "pointer", "u32"],
      result: "pointer",
    },
    VerifySignature: {
      parameters: ["pointer", "pointer", "u32", "pointer"],
      result: "pointer",
    },
    EncryptMessage: {
      parameters: ["pointer", "u32", "pointer", "u32"],
      result: "pointer",
    },
    DecryptMessage: {
      parameters: ["pointer", "pointer", "u32", "pointer"],
      result: "pointer",
    },
    EnumerateSecurityPackagesW: {
      parameters: ["pointer", "pointer"],
      result: "pointer",
    },
    EnumerateSecurityPackagesA: {
      parameters: ["pointer", "pointer"],
      result: "pointer",
    },
    QuerySecurityPackageInfoW: {
      parameters: ["buffer", "pointer"],
      result: "pointer",
    },
    QuerySecurityPackageInfoA: {
      parameters: ["buffer", "pointer"],
      result: "pointer",
    },
    ExportSecurityContext: {
      parameters: ["pointer", "u32", "pointer", "pointer"],
      result: "pointer",
    },
    ImportSecurityContextW: {
      parameters: ["buffer", "pointer", "pointer", "pointer"],
      result: "pointer",
    },
    ImportSecurityContextA: {
      parameters: ["buffer", "pointer", "pointer", "pointer"],
      result: "pointer",
    },
    InitSecurityInterfaceA: {
      parameters: [],
      result: "pointer",
    },
    InitSecurityInterfaceW: {
      parameters: [],
      result: "pointer",
    },
    SaslEnumerateProfilesA: {
      parameters: ["pointer", "pointer"],
      result: "pointer",
    },
    SaslEnumerateProfilesW: {
      parameters: ["pointer", "pointer"],
      result: "pointer",
    },
    SaslGetProfilePackageA: {
      parameters: ["buffer", "pointer"],
      result: "pointer",
    },
    SaslGetProfilePackageW: {
      parameters: ["buffer", "pointer"],
      result: "pointer",
    },
    SaslIdentifyPackageA: {
      parameters: ["pointer", "pointer"],
      result: "pointer",
    },
    SaslIdentifyPackageW: {
      parameters: ["pointer", "pointer"],
      result: "pointer",
    },
    SaslInitializeSecurityContextW: {
      parameters: ["pointer", "pointer", "buffer", "u32", "u32", "u32", "pointer", "u32", "pointer", "pointer", "pointer", "pointer"],
      result: "pointer",
    },
    SaslInitializeSecurityContextA: {
      parameters: ["pointer", "pointer", "buffer", "u32", "u32", "u32", "pointer", "u32", "pointer", "pointer", "pointer", "pointer"],
      result: "pointer",
    },
    SaslAcceptSecurityContext: {
      parameters: ["pointer", "pointer", "pointer", "u32", "u32", "pointer", "pointer", "pointer", "pointer"],
      result: "pointer",
    },
    SaslSetContextOption: {
      parameters: ["pointer", "u32", "pointer", "u32"],
      result: "pointer",
    },
    SaslGetContextOption: {
      parameters: ["pointer", "u32", "pointer", "u32", "pointer"],
      result: "pointer",
    },
    SspiPrepareForCredRead: {
      parameters: ["pointer", "buffer", "pointer", "pointer"],
      result: "pointer",
    },
    SspiPrepareForCredWrite: {
      parameters: ["pointer", "buffer", "pointer", "pointer", "pointer", "pointer", "pointer"],
      result: "pointer",
    },
    SspiEncryptAuthIdentity: {
      parameters: ["pointer"],
      result: "pointer",
    },
    SspiDecryptAuthIdentity: {
      parameters: ["pointer"],
      result: "pointer",
    },
    SspiIsAuthIdentityEncrypted: {
      parameters: ["pointer"],
      result: "pointer",
    },
    SspiEncodeAuthIdentityAsStrings: {
      parameters: ["pointer", "pointer", "pointer", "pointer"],
      result: "pointer",
    },
    SspiValidateAuthIdentity: {
      parameters: ["pointer"],
      result: "pointer",
    },
    SspiCopyAuthIdentity: {
      parameters: ["pointer", "pointer"],
      result: "pointer",
    },
    SspiFreeAuthIdentity: {
      parameters: ["pointer"],
      result: "void",
    },
    SspiZeroAuthIdentity: {
      parameters: ["pointer"],
      result: "void",
    },
    SspiLocalFree: {
      parameters: ["pointer"],
      result: "void",
    },
    SspiEncodeStringsAsAuthIdentity: {
      parameters: ["buffer", "buffer", "buffer", "pointer"],
      result: "pointer",
    },
    SspiCompareAuthIdentities: {
      parameters: ["pointer", "pointer", "pointer", "pointer"],
      result: "pointer",
    },
    SspiMarshalAuthIdentity: {
      parameters: ["pointer", "pointer", "pointer"],
      result: "pointer",
    },
    SspiUnmarshalAuthIdentity: {
      parameters: ["u32", "buffer", "pointer"],
      result: "pointer",
    },
    SspiGetTargetHostName: {
      parameters: ["buffer", "pointer"],
      result: "pointer",
    },
    SspiExcludePackage: {
      parameters: ["pointer", "buffer", "pointer"],
      result: "pointer",
    },
    AddSecurityPackageA: {
      parameters: ["buffer", "pointer"],
      result: "pointer",
    },
    AddSecurityPackageW: {
      parameters: ["buffer", "pointer"],
      result: "pointer",
    },
    DeleteSecurityPackageA: {
      parameters: ["buffer"],
      result: "pointer",
    },
    DeleteSecurityPackageW: {
      parameters: ["buffer"],
      result: "pointer",
    },
    CredMarshalTargetInfo: {
      parameters: ["pointer", "pointer", "pointer"],
      result: "pointer",
    },
    CredUnmarshalTargetInfo: {
      parameters: ["pointer", "u32", "pointer", "pointer"],
      result: "pointer",
    },
    GetUserNameExA: {
      parameters: ["i32", "buffer", "pointer"],
      result: "pointer",
    },
    GetUserNameExW: {
      parameters: ["i32", "buffer", "pointer"],
      result: "pointer",
    },
    GetComputerObjectNameA: {
      parameters: ["i32", "buffer", "pointer"],
      result: "pointer",
    },
    GetComputerObjectNameW: {
      parameters: ["i32", "buffer", "pointer"],
      result: "pointer",
    },
    TranslateNameA: {
      parameters: ["buffer", "i32", "i32", "buffer", "pointer"],
      result: "pointer",
    },
    TranslateNameW: {
      parameters: ["buffer", "i32", "i32", "buffer", "pointer"],
      result: "pointer",
    },
  }).symbols;
} catch(e) { /* ignore */ }

try {
  var libADVAPI32_dll = Deno.dlopen("ADVAPI32.dll", {
    LsaFreeMemory: {
      parameters: ["pointer"],
      result: "pointer",
    },
    LsaClose: {
      parameters: ["pointer"],
      result: "pointer",
    },
    LsaOpenPolicy: {
      parameters: ["pointer", "pointer", "u32", "pointer"],
      result: "pointer",
    },
    LsaSetCAPs: {
      parameters: ["pointer", "u32", "u32"],
      result: "pointer",
    },
    LsaGetAppliedCAPIDs: {
      parameters: ["pointer", "pointer", "pointer"],
      result: "pointer",
    },
    LsaQueryCAPs: {
      parameters: ["pointer", "u32", "pointer", "pointer"],
      result: "pointer",
    },
    LsaQueryInformationPolicy: {
      parameters: ["pointer", "i32", "pointer"],
      result: "pointer",
    },
    LsaSetInformationPolicy: {
      parameters: ["pointer", "i32", "pointer"],
      result: "pointer",
    },
    LsaQueryDomainInformationPolicy: {
      parameters: ["pointer", "i32", "pointer"],
      result: "pointer",
    },
    LsaSetDomainInformationPolicy: {
      parameters: ["pointer", "i32", "pointer"],
      result: "pointer",
    },
    LsaEnumerateTrustedDomains: {
      parameters: ["pointer", "pointer", "pointer", "u32", "pointer"],
      result: "pointer",
    },
    LsaLookupNames: {
      parameters: ["pointer", "u32", "pointer", "pointer", "pointer"],
      result: "pointer",
    },
    LsaLookupNames2: {
      parameters: ["pointer", "u32", "u32", "pointer", "pointer", "pointer"],
      result: "pointer",
    },
    LsaLookupSids: {
      parameters: ["pointer", "u32", "pointer", "pointer", "pointer"],
      result: "pointer",
    },
    LsaLookupSids2: {
      parameters: ["pointer", "u32", "u32", "pointer", "pointer", "pointer"],
      result: "pointer",
    },
    LsaEnumerateAccountsWithUserRight: {
      parameters: ["pointer", "pointer", "pointer", "pointer"],
      result: "pointer",
    },
    LsaEnumerateAccountRights: {
      parameters: ["pointer", "pointer", "pointer", "pointer"],
      result: "pointer",
    },
    LsaAddAccountRights: {
      parameters: ["pointer", "pointer", "pointer", "u32"],
      result: "pointer",
    },
    LsaRemoveAccountRights: {
      parameters: ["pointer", "pointer", "pointer", "pointer", "u32"],
      result: "pointer",
    },
    LsaOpenTrustedDomainByName: {
      parameters: ["pointer", "pointer", "u32", "pointer"],
      result: "pointer",
    },
    LsaQueryTrustedDomainInfo: {
      parameters: ["pointer", "pointer", "i32", "pointer"],
      result: "pointer",
    },
    LsaSetTrustedDomainInformation: {
      parameters: ["pointer", "pointer", "i32", "pointer"],
      result: "pointer",
    },
    LsaDeleteTrustedDomain: {
      parameters: ["pointer", "pointer"],
      result: "pointer",
    },
    LsaQueryTrustedDomainInfoByName: {
      parameters: ["pointer", "pointer", "i32", "pointer"],
      result: "pointer",
    },
    LsaSetTrustedDomainInfoByName: {
      parameters: ["pointer", "pointer", "i32", "pointer"],
      result: "pointer",
    },
    LsaEnumerateTrustedDomainsEx: {
      parameters: ["pointer", "pointer", "pointer", "u32", "pointer"],
      result: "pointer",
    },
    LsaCreateTrustedDomainEx: {
      parameters: ["pointer", "pointer", "pointer", "u32", "pointer"],
      result: "pointer",
    },
    LsaQueryForestTrustInformation: {
      parameters: ["pointer", "pointer", "pointer"],
      result: "pointer",
    },
    LsaSetForestTrustInformation: {
      parameters: ["pointer", "pointer", "pointer", "pointer", "pointer"],
      result: "pointer",
    },
    LsaStorePrivateData: {
      parameters: ["pointer", "pointer", "pointer"],
      result: "pointer",
    },
    LsaRetrievePrivateData: {
      parameters: ["pointer", "pointer", "pointer"],
      result: "pointer",
    },
    LsaNtStatusToWinError: {
      parameters: ["pointer"],
      result: "u32",
    },
    SystemFunction036: {
      parameters: ["pointer", "u32"],
      result: "pointer",
    },
    SystemFunction040: {
      parameters: ["pointer", "u32", "u32"],
      result: "pointer",
    },
    SystemFunction041: {
      parameters: ["pointer", "u32", "u32"],
      result: "pointer",
    },
    AuditSetSystemPolicy: {
      parameters: ["pointer", "u32"],
      result: "pointer",
    },
    AuditSetPerUserPolicy: {
      parameters: ["pointer", "pointer", "u32"],
      result: "pointer",
    },
    AuditQuerySystemPolicy: {
      parameters: ["pointer", "u32", "pointer"],
      result: "pointer",
    },
    AuditQueryPerUserPolicy: {
      parameters: ["pointer", "pointer", "u32", "pointer"],
      result: "pointer",
    },
    AuditEnumeratePerUserPolicy: {
      parameters: ["pointer"],
      result: "pointer",
    },
    AuditComputeEffectivePolicyBySid: {
      parameters: ["pointer", "pointer", "u32", "pointer"],
      result: "pointer",
    },
    AuditComputeEffectivePolicyByToken: {
      parameters: ["pointer", "pointer", "u32", "pointer"],
      result: "pointer",
    },
    AuditEnumerateCategories: {
      parameters: ["pointer", "pointer"],
      result: "pointer",
    },
    AuditEnumerateSubCategories: {
      parameters: ["pointer", "pointer", "pointer", "pointer"],
      result: "pointer",
    },
    AuditLookupCategoryNameW: {
      parameters: ["pointer", "pointer"],
      result: "pointer",
    },
    AuditLookupCategoryNameA: {
      parameters: ["pointer", "pointer"],
      result: "pointer",
    },
    AuditLookupSubCategoryNameW: {
      parameters: ["pointer", "pointer"],
      result: "pointer",
    },
    AuditLookupSubCategoryNameA: {
      parameters: ["pointer", "pointer"],
      result: "pointer",
    },
    AuditLookupCategoryIdFromCategoryGuid: {
      parameters: ["pointer", "pointer"],
      result: "pointer",
    },
    AuditLookupCategoryGuidFromCategoryId: {
      parameters: ["i32", "pointer"],
      result: "pointer",
    },
    AuditSetSecurity: {
      parameters: ["u32", "pointer"],
      result: "pointer",
    },
    AuditQuerySecurity: {
      parameters: ["u32", "pointer"],
      result: "pointer",
    },
    AuditSetGlobalSaclW: {
      parameters: ["buffer", "pointer"],
      result: "pointer",
    },
    AuditSetGlobalSaclA: {
      parameters: ["buffer", "pointer"],
      result: "pointer",
    },
    AuditQueryGlobalSaclW: {
      parameters: ["buffer", "pointer"],
      result: "pointer",
    },
    AuditQueryGlobalSaclA: {
      parameters: ["buffer", "pointer"],
      result: "pointer",
    },
    AuditFree: {
      parameters: ["pointer"],
      result: "void",
    },
  }).symbols;
} catch(e) { /* ignore */ }

try {
  var libSspiCli_dll = Deno.dlopen("SspiCli.dll", {
    QueryContextAttributesExW: {
      parameters: ["pointer", "u32", "pointer", "u32"],
      result: "pointer",
    },
    QueryContextAttributesExA: {
      parameters: ["pointer", "u32", "pointer", "u32"],
      result: "pointer",
    },
    QueryCredentialsAttributesExW: {
      parameters: ["pointer", "u32", "pointer", "u32"],
      result: "pointer",
    },
    QueryCredentialsAttributesExA: {
      parameters: ["pointer", "u32", "pointer", "u32"],
      result: "pointer",
    },
    SspiEncryptAuthIdentityEx: {
      parameters: ["u32", "pointer"],
      result: "pointer",
    },
    SspiDecryptAuthIdentityEx: {
      parameters: ["u32", "pointer"],
      result: "pointer",
    },
  }).symbols;
} catch(e) { /* ignore */ }

try {
  var libcredui_dll = Deno.dlopen("credui.dll", {
    SspiPromptForCredentialsW: {
      parameters: ["buffer", "pointer", "u32", "buffer", "pointer", "pointer", "pointer", "u32"],
      result: "u32",
    },
    SspiPromptForCredentialsA: {
      parameters: ["buffer", "pointer", "u32", "buffer", "pointer", "pointer", "pointer", "u32"],
      result: "u32",
    },
    SspiIsPromptingNeeded: {
      parameters: ["u32"],
      result: "pointer",
    },
  }).symbols;
} catch(e) { /* ignore */ }

try {
  var libSCHANNEL_dll = Deno.dlopen("SCHANNEL.dll", {
    SslEmptyCacheA: {
      parameters: ["buffer", "u32"],
      result: "i32",
    },
    SslEmptyCacheW: {
      parameters: ["buffer", "u32"],
      result: "i32",
    },
    SslGenerateRandomBits: {
      parameters: ["pointer", "i32"],
      result: "void",
    },
    SslCrackCertificate: {
      parameters: ["pointer", "u32", "u32", "pointer"],
      result: "i32",
    },
    SslFreeCertificate: {
      parameters: ["pointer"],
      result: "void",
    },
    SslGetMaximumKeySize: {
      parameters: ["u32"],
      result: "u32",
    },
    SslGetServerIdentity: {
      parameters: ["pointer", "u32", "pointer", "pointer", "u32"],
      result: "pointer",
    },
    SslGetExtensions: {
      parameters: ["pointer", "u32", "pointer", "u8", "pointer", "u32"],
      result: "pointer",
    },
  }).symbols;
} catch(e) { /* ignore */ }

try {
  var libTOKENBINDING_dll = Deno.dlopen("TOKENBINDING.dll", {
    TokenBindingGenerateBinding: {
      parameters: ["i32", "buffer", "i32", "pointer", "u32", "i32", "pointer", "pointer", "pointer", "pointer"],
      result: "pointer",
    },
    TokenBindingGenerateMessage: {
      parameters: ["pointer", "pointer", "u32", "pointer", "pointer"],
      result: "pointer",
    },
    TokenBindingVerifyMessage: {
      parameters: ["pointer", "u32", "i32", "pointer", "u32", "pointer"],
      result: "pointer",
    },
    TokenBindingGetKeyTypesClient: {
      parameters: ["pointer"],
      result: "pointer",
    },
    TokenBindingGetKeyTypesServer: {
      parameters: ["pointer"],
      result: "pointer",
    },
    TokenBindingDeleteBinding: {
      parameters: ["buffer"],
      result: "pointer",
    },
    TokenBindingDeleteAllBindings: {
      parameters: [],
      result: "pointer",
    },
    TokenBindingGenerateID: {
      parameters: ["i32", "pointer", "u32", "pointer"],
      result: "pointer",
    },
    TokenBindingGenerateIDForUri: {
      parameters: ["i32", "buffer", "pointer"],
      result: "pointer",
    },
    TokenBindingGetHighestSupportedVersion: {
      parameters: ["pointer", "pointer"],
      result: "pointer",
    },
  }).symbols;
} catch(e) { /* ignore */ }

try {
  var libSLC_dll = Deno.dlopen("SLC.dll", {
    SLOpen: {
      parameters: ["pointer"],
      result: "pointer",
    },
    SLClose: {
      parameters: ["pointer"],
      result: "pointer",
    },
    SLInstallProofOfPurchase: {
      parameters: ["pointer", "buffer", "buffer", "u32", "pointer", "pointer"],
      result: "pointer",
    },
    SLUninstallProofOfPurchase: {
      parameters: ["pointer", "pointer"],
      result: "pointer",
    },
    SLInstallLicense: {
      parameters: ["pointer", "u32", "pointer", "pointer"],
      result: "pointer",
    },
    SLUninstallLicense: {
      parameters: ["pointer", "pointer"],
      result: "pointer",
    },
    SLConsumeRight: {
      parameters: ["pointer", "pointer", "pointer", "buffer", "pointer"],
      result: "pointer",
    },
    SLGetProductSkuInformation: {
      parameters: ["pointer", "pointer", "buffer", "pointer", "pointer", "pointer"],
      result: "pointer",
    },
    SLGetPKeyInformation: {
      parameters: ["pointer", "pointer", "buffer", "pointer", "pointer", "pointer"],
      result: "pointer",
    },
    SLGetLicenseInformation: {
      parameters: ["pointer", "pointer", "buffer", "pointer", "pointer", "pointer"],
      result: "pointer",
    },
    SLGetLicensingStatusInformation: {
      parameters: ["pointer", "pointer", "pointer", "buffer", "pointer", "pointer"],
      result: "pointer",
    },
    SLGetPolicyInformation: {
      parameters: ["pointer", "buffer", "pointer", "pointer", "pointer"],
      result: "pointer",
    },
    SLGetPolicyInformationDWORD: {
      parameters: ["pointer", "buffer", "pointer"],
      result: "pointer",
    },
    SLGetServiceInformation: {
      parameters: ["pointer", "buffer", "pointer", "pointer", "pointer"],
      result: "pointer",
    },
    SLGetApplicationInformation: {
      parameters: ["pointer", "pointer", "buffer", "pointer", "pointer", "pointer"],
      result: "pointer",
    },
    SLGenerateOfflineInstallationId: {
      parameters: ["pointer", "pointer", "pointer"],
      result: "pointer",
    },
    SLGenerateOfflineInstallationIdEx: {
      parameters: ["pointer", "pointer", "pointer", "pointer"],
      result: "pointer",
    },
    SLDepositOfflineConfirmationId: {
      parameters: ["pointer", "pointer", "buffer", "buffer"],
      result: "pointer",
    },
    SLDepositOfflineConfirmationIdEx: {
      parameters: ["pointer", "pointer", "pointer", "buffer", "buffer"],
      result: "pointer",
    },
    SLGetPKeyId: {
      parameters: ["pointer", "buffer", "buffer", "u32", "pointer", "pointer"],
      result: "pointer",
    },
    SLGetInstalledProductKeyIds: {
      parameters: ["pointer", "pointer", "pointer", "pointer"],
      result: "pointer",
    },
    SLSetCurrentProductKey: {
      parameters: ["pointer", "pointer", "pointer"],
      result: "pointer",
    },
    SLGetSLIDList: {
      parameters: ["pointer", "i32", "pointer", "i32", "pointer", "pointer"],
      result: "pointer",
    },
    SLGetLicenseFileId: {
      parameters: ["pointer", "u32", "pointer", "pointer"],
      result: "pointer",
    },
    SLGetLicense: {
      parameters: ["pointer", "pointer", "pointer", "pointer"],
      result: "pointer",
    },
    SLFireEvent: {
      parameters: ["pointer", "buffer", "pointer"],
      result: "pointer",
    },
    SLRegisterEvent: {
      parameters: ["pointer", "buffer", "pointer", "pointer"],
      result: "pointer",
    },
    SLUnregisterEvent: {
      parameters: ["pointer", "buffer", "pointer", "pointer"],
      result: "pointer",
    },
    SLGetWindowsInformation: {
      parameters: ["buffer", "pointer", "pointer", "pointer"],
      result: "pointer",
    },
    SLGetWindowsInformationDWORD: {
      parameters: ["buffer", "pointer"],
      result: "pointer",
    },
    SLSetGenuineInformation: {
      parameters: ["pointer", "buffer", "u32", "u32", "pointer"],
      result: "pointer",
    },
    SLGetGenuineInformation: {
      parameters: ["pointer", "buffer", "pointer", "pointer", "pointer"],
      result: "pointer",
    },
  }).symbols;
} catch(e) { /* ignore */ }

try {
  var libslcext_dll = Deno.dlopen("slcext.dll", {
    SLActivateProduct: {
      parameters: ["pointer", "pointer", "u32", "pointer", "pointer", "buffer", "u16"],
      result: "pointer",
    },
    SLGetServerStatus: {
      parameters: ["buffer", "buffer", "buffer", "u16", "pointer"],
      result: "pointer",
    },
    SLAcquireGenuineTicket: {
      parameters: ["pointer", "pointer", "buffer", "buffer", "buffer"],
      result: "pointer",
    },
    SLGetReferralInformation: {
      parameters: ["pointer", "i32", "pointer", "buffer", "pointer"],
      result: "pointer",
    },
  }).symbols;
} catch(e) { /* ignore */ }

try {
  var libSLWGA_dll = Deno.dlopen("SLWGA.dll", {
    SLIsGenuineLocal: {
      parameters: ["pointer", "pointer", "pointer"],
      result: "pointer",
    },
  }).symbols;
} catch(e) { /* ignore */ }

try {
  var libapi_ms_win_core_slapi_l1_1_0_dll = Deno.dlopen("api-ms-win-core-slapi-l1-1-0.dll", {
    SLQueryLicenseValueFromApp: {
      parameters: ["buffer", "pointer", "pointer", "u32", "pointer"],
      result: "pointer",
    },
  }).symbols;
} catch(e) { /* ignore */ }

// Symbols

export function LsaRegisterLogonProcess(
  LogonProcessName: Deno.PointerValue | Uint8Array /* ptr */,
  LsaHandle: Deno.PointerValue | Uint8Array /* ptr */,
  SecurityMode: Deno.PointerValue | Uint8Array /* ptr */,
): Deno.PointerValue /* Windows.Win32.Foundation.NTSTATUS */ {
  return libSECUR32_dll.LsaRegisterLogonProcess(util.toPointer(LogonProcessName), util.toPointer(LsaHandle), util.toPointer(SecurityMode));
}

export function LsaLogonUser(
  LsaHandle: Uint8Array | Deno.PointerValue /* Windows.Win32.Foundation.HANDLE */,
  OriginName: Deno.PointerValue | Uint8Array /* ptr */,
  LogonType: SECURITY_LOGON_TYPE /* Windows.Win32.Security.Authentication.Identity.SECURITY_LOGON_TYPE */,
  AuthenticationPackage: number /* u32 */,
  AuthenticationInformation: Deno.PointerValue | Uint8Array /* ptr */,
  AuthenticationInformationLength: number /* u32 */,
  LocalGroups: Deno.PointerValue | Uint8Array /* ptr */,
  SourceContext: Deno.PointerValue | Uint8Array /* ptr */,
  ProfileBuffer: Deno.PointerValue | Uint8Array /* ptr */,
  ProfileBufferLength: Deno.PointerValue | Uint8Array /* ptr */,
  LogonId: Deno.PointerValue | Uint8Array /* ptr */,
  Token: Deno.PointerValue | Uint8Array /* ptr */,
  Quotas: Deno.PointerValue | Uint8Array /* ptr */,
  SubStatus: Deno.PointerValue | Uint8Array /* ptr */,
): Deno.PointerValue /* Windows.Win32.Foundation.NTSTATUS */ {
  return libSECUR32_dll.LsaLogonUser(util.toPointer(LsaHandle), util.toPointer(OriginName), LogonType, AuthenticationPackage, util.toPointer(AuthenticationInformation), AuthenticationInformationLength, util.toPointer(LocalGroups), util.toPointer(SourceContext), util.toPointer(ProfileBuffer), util.toPointer(ProfileBufferLength), util.toPointer(LogonId), util.toPointer(Token), util.toPointer(Quotas), util.toPointer(SubStatus));
}

export function LsaLookupAuthenticationPackage(
  LsaHandle: Uint8Array | Deno.PointerValue /* Windows.Win32.Foundation.HANDLE */,
  PackageName: Deno.PointerValue | Uint8Array /* ptr */,
  AuthenticationPackage: Deno.PointerValue | Uint8Array /* ptr */,
): Deno.PointerValue /* Windows.Win32.Foundation.NTSTATUS */ {
  return libSECUR32_dll.LsaLookupAuthenticationPackage(util.toPointer(LsaHandle), util.toPointer(PackageName), util.toPointer(AuthenticationPackage));
}

export function LsaFreeReturnBuffer(
  Buffer: Deno.PointerValue | Uint8Array /* ptr */,
): Deno.PointerValue /* Windows.Win32.Foundation.NTSTATUS */ {
  return libSECUR32_dll.LsaFreeReturnBuffer(util.toPointer(Buffer));
}

export function LsaCallAuthenticationPackage(
  LsaHandle: Uint8Array | Deno.PointerValue /* Windows.Win32.Foundation.HANDLE */,
  AuthenticationPackage: number /* u32 */,
  ProtocolSubmitBuffer: Deno.PointerValue | Uint8Array /* ptr */,
  SubmitBufferLength: number /* u32 */,
  ProtocolReturnBuffer: Deno.PointerValue | Uint8Array /* ptr */,
  ReturnBufferLength: Deno.PointerValue | Uint8Array /* ptr */,
  ProtocolStatus: Deno.PointerValue | Uint8Array /* ptr */,
): Deno.PointerValue /* Windows.Win32.Foundation.NTSTATUS */ {
  return libSECUR32_dll.LsaCallAuthenticationPackage(util.toPointer(LsaHandle), AuthenticationPackage, util.toPointer(ProtocolSubmitBuffer), SubmitBufferLength, util.toPointer(ProtocolReturnBuffer), util.toPointer(ReturnBufferLength), util.toPointer(ProtocolStatus));
}

export function LsaDeregisterLogonProcess(
  LsaHandle: Uint8Array | Deno.PointerValue /* Windows.Win32.Security.Authentication.Identity.LsaHandle */,
): Deno.PointerValue /* Windows.Win32.Foundation.NTSTATUS */ {
  return libSECUR32_dll.LsaDeregisterLogonProcess(util.toPointer(LsaHandle));
}

export function LsaConnectUntrusted(
  LsaHandle: Deno.PointerValue | Uint8Array /* ptr */,
): Deno.PointerValue /* Windows.Win32.Foundation.NTSTATUS */ {
  return libSECUR32_dll.LsaConnectUntrusted(util.toPointer(LsaHandle));
}

export function LsaFreeMemory(
  Buffer: Deno.PointerValue | Uint8Array /* ptr */,
): Deno.PointerValue /* Windows.Win32.Foundation.NTSTATUS */ {
  return libADVAPI32_dll.LsaFreeMemory(util.toPointer(Buffer));
}

export function LsaClose(
  ObjectHandle: Deno.PointerValue | Uint8Array /* ptr */,
): Deno.PointerValue /* Windows.Win32.Foundation.NTSTATUS */ {
  return libADVAPI32_dll.LsaClose(util.toPointer(ObjectHandle));
}

export function LsaEnumerateLogonSessions(
  LogonSessionCount: Deno.PointerValue | Uint8Array /* ptr */,
  LogonSessionList: Deno.PointerValue | Uint8Array /* ptr */,
): Deno.PointerValue /* Windows.Win32.Foundation.NTSTATUS */ {
  return libSECUR32_dll.LsaEnumerateLogonSessions(util.toPointer(LogonSessionCount), util.toPointer(LogonSessionList));
}

export function LsaGetLogonSessionData(
  LogonId: Deno.PointerValue | Uint8Array /* ptr */,
  ppLogonSessionData: Deno.PointerValue | Uint8Array /* ptr */,
): Deno.PointerValue /* Windows.Win32.Foundation.NTSTATUS */ {
  return libSECUR32_dll.LsaGetLogonSessionData(util.toPointer(LogonId), util.toPointer(ppLogonSessionData));
}

export function LsaOpenPolicy(
  SystemName: Deno.PointerValue | Uint8Array /* ptr */,
  ObjectAttributes: Deno.PointerValue | Uint8Array /* ptr */,
  DesiredAccess: number /* u32 */,
  PolicyHandle: Deno.PointerValue | Uint8Array /* ptr */,
): Deno.PointerValue /* Windows.Win32.Foundation.NTSTATUS */ {
  return libADVAPI32_dll.LsaOpenPolicy(util.toPointer(SystemName), util.toPointer(ObjectAttributes), DesiredAccess, util.toPointer(PolicyHandle));
}

export function LsaSetCAPs(
  CAPDNs: Deno.PointerValue | Uint8Array /* ptr */,
  CAPDNCount: number /* u32 */,
  Flags: number /* u32 */,
): Deno.PointerValue /* Windows.Win32.Foundation.NTSTATUS */ {
  return libADVAPI32_dll.LsaSetCAPs(util.toPointer(CAPDNs), CAPDNCount, Flags);
}

export function LsaGetAppliedCAPIDs(
  SystemName: Deno.PointerValue | Uint8Array /* ptr */,
  CAPIDs: Deno.PointerValue | Uint8Array /* ptr */,
  CAPIDCount: Deno.PointerValue | Uint8Array /* ptr */,
): Deno.PointerValue /* Windows.Win32.Foundation.NTSTATUS */ {
  return libADVAPI32_dll.LsaGetAppliedCAPIDs(util.toPointer(SystemName), util.toPointer(CAPIDs), util.toPointer(CAPIDCount));
}

export function LsaQueryCAPs(
  CAPIDs: Deno.PointerValue | Uint8Array /* ptr */,
  CAPIDCount: number /* u32 */,
  CAPs: Deno.PointerValue | Uint8Array /* ptr */,
  CAPCount: Deno.PointerValue | Uint8Array /* ptr */,
): Deno.PointerValue /* Windows.Win32.Foundation.NTSTATUS */ {
  return libADVAPI32_dll.LsaQueryCAPs(util.toPointer(CAPIDs), CAPIDCount, util.toPointer(CAPs), util.toPointer(CAPCount));
}

export function LsaQueryInformationPolicy(
  PolicyHandle: Deno.PointerValue | Uint8Array /* ptr */,
  InformationClass: POLICY_INFORMATION_CLASS /* Windows.Win32.Security.Authentication.Identity.POLICY_INFORMATION_CLASS */,
  Buffer: Deno.PointerValue | Uint8Array /* ptr */,
): Deno.PointerValue /* Windows.Win32.Foundation.NTSTATUS */ {
  return libADVAPI32_dll.LsaQueryInformationPolicy(util.toPointer(PolicyHandle), InformationClass, util.toPointer(Buffer));
}

export function LsaSetInformationPolicy(
  PolicyHandle: Deno.PointerValue | Uint8Array /* ptr */,
  InformationClass: POLICY_INFORMATION_CLASS /* Windows.Win32.Security.Authentication.Identity.POLICY_INFORMATION_CLASS */,
  Buffer: Deno.PointerValue | Uint8Array /* ptr */,
): Deno.PointerValue /* Windows.Win32.Foundation.NTSTATUS */ {
  return libADVAPI32_dll.LsaSetInformationPolicy(util.toPointer(PolicyHandle), InformationClass, util.toPointer(Buffer));
}

export function LsaQueryDomainInformationPolicy(
  PolicyHandle: Deno.PointerValue | Uint8Array /* ptr */,
  InformationClass: POLICY_DOMAIN_INFORMATION_CLASS /* Windows.Win32.Security.Authentication.Identity.POLICY_DOMAIN_INFORMATION_CLASS */,
  Buffer: Deno.PointerValue | Uint8Array /* ptr */,
): Deno.PointerValue /* Windows.Win32.Foundation.NTSTATUS */ {
  return libADVAPI32_dll.LsaQueryDomainInformationPolicy(util.toPointer(PolicyHandle), InformationClass, util.toPointer(Buffer));
}

export function LsaSetDomainInformationPolicy(
  PolicyHandle: Deno.PointerValue | Uint8Array /* ptr */,
  InformationClass: POLICY_DOMAIN_INFORMATION_CLASS /* Windows.Win32.Security.Authentication.Identity.POLICY_DOMAIN_INFORMATION_CLASS */,
  Buffer: Deno.PointerValue | Uint8Array /* ptr */,
): Deno.PointerValue /* Windows.Win32.Foundation.NTSTATUS */ {
  return libADVAPI32_dll.LsaSetDomainInformationPolicy(util.toPointer(PolicyHandle), InformationClass, util.toPointer(Buffer));
}

export function LsaRegisterPolicyChangeNotification(
  InformationClass: POLICY_NOTIFICATION_INFORMATION_CLASS /* Windows.Win32.Security.Authentication.Identity.POLICY_NOTIFICATION_INFORMATION_CLASS */,
  NotificationEventHandle: Uint8Array | Deno.PointerValue /* Windows.Win32.Foundation.HANDLE */,
): Deno.PointerValue /* Windows.Win32.Foundation.NTSTATUS */ {
  return libSECUR32_dll.LsaRegisterPolicyChangeNotification(InformationClass, util.toPointer(NotificationEventHandle));
}

export function LsaUnregisterPolicyChangeNotification(
  InformationClass: POLICY_NOTIFICATION_INFORMATION_CLASS /* Windows.Win32.Security.Authentication.Identity.POLICY_NOTIFICATION_INFORMATION_CLASS */,
  NotificationEventHandle: Uint8Array | Deno.PointerValue /* Windows.Win32.Foundation.HANDLE */,
): Deno.PointerValue /* Windows.Win32.Foundation.NTSTATUS */ {
  return libSECUR32_dll.LsaUnregisterPolicyChangeNotification(InformationClass, util.toPointer(NotificationEventHandle));
}

export function LsaEnumerateTrustedDomains(
  PolicyHandle: Deno.PointerValue | Uint8Array /* ptr */,
  EnumerationContext: Deno.PointerValue | Uint8Array /* ptr */,
  Buffer: Deno.PointerValue | Uint8Array /* ptr */,
  PreferedMaximumLength: number /* u32 */,
  CountReturned: Deno.PointerValue | Uint8Array /* ptr */,
): Deno.PointerValue /* Windows.Win32.Foundation.NTSTATUS */ {
  return libADVAPI32_dll.LsaEnumerateTrustedDomains(util.toPointer(PolicyHandle), util.toPointer(EnumerationContext), util.toPointer(Buffer), PreferedMaximumLength, util.toPointer(CountReturned));
}

export function LsaLookupNames(
  PolicyHandle: Deno.PointerValue | Uint8Array /* ptr */,
  Count: number /* u32 */,
  Names: Deno.PointerValue | Uint8Array /* ptr */,
  ReferencedDomains: Deno.PointerValue | Uint8Array /* ptr */,
  Sids: Deno.PointerValue | Uint8Array /* ptr */,
): Deno.PointerValue /* Windows.Win32.Foundation.NTSTATUS */ {
  return libADVAPI32_dll.LsaLookupNames(util.toPointer(PolicyHandle), Count, util.toPointer(Names), util.toPointer(ReferencedDomains), util.toPointer(Sids));
}

export function LsaLookupNames2(
  PolicyHandle: Deno.PointerValue | Uint8Array /* ptr */,
  Flags: number /* u32 */,
  Count: number /* u32 */,
  Names: Deno.PointerValue | Uint8Array /* ptr */,
  ReferencedDomains: Deno.PointerValue | Uint8Array /* ptr */,
  Sids: Deno.PointerValue | Uint8Array /* ptr */,
): Deno.PointerValue /* Windows.Win32.Foundation.NTSTATUS */ {
  return libADVAPI32_dll.LsaLookupNames2(util.toPointer(PolicyHandle), Flags, Count, util.toPointer(Names), util.toPointer(ReferencedDomains), util.toPointer(Sids));
}

export function LsaLookupSids(
  PolicyHandle: Deno.PointerValue | Uint8Array /* ptr */,
  Count: number /* u32 */,
  Sids: Deno.PointerValue | Uint8Array /* ptr */,
  ReferencedDomains: Deno.PointerValue | Uint8Array /* ptr */,
  Names: Deno.PointerValue | Uint8Array /* ptr */,
): Deno.PointerValue /* Windows.Win32.Foundation.NTSTATUS */ {
  return libADVAPI32_dll.LsaLookupSids(util.toPointer(PolicyHandle), Count, util.toPointer(Sids), util.toPointer(ReferencedDomains), util.toPointer(Names));
}

export function LsaLookupSids2(
  PolicyHandle: Deno.PointerValue | Uint8Array /* ptr */,
  LookupOptions: number /* u32 */,
  Count: number /* u32 */,
  Sids: Deno.PointerValue | Uint8Array /* ptr */,
  ReferencedDomains: Deno.PointerValue | Uint8Array /* ptr */,
  Names: Deno.PointerValue | Uint8Array /* ptr */,
): Deno.PointerValue /* Windows.Win32.Foundation.NTSTATUS */ {
  return libADVAPI32_dll.LsaLookupSids2(util.toPointer(PolicyHandle), LookupOptions, Count, util.toPointer(Sids), util.toPointer(ReferencedDomains), util.toPointer(Names));
}

export function LsaEnumerateAccountsWithUserRight(
  PolicyHandle: Deno.PointerValue | Uint8Array /* ptr */,
  UserRight: Deno.PointerValue | Uint8Array /* ptr */,
  Buffer: Deno.PointerValue | Uint8Array /* ptr */,
  CountReturned: Deno.PointerValue | Uint8Array /* ptr */,
): Deno.PointerValue /* Windows.Win32.Foundation.NTSTATUS */ {
  return libADVAPI32_dll.LsaEnumerateAccountsWithUserRight(util.toPointer(PolicyHandle), util.toPointer(UserRight), util.toPointer(Buffer), util.toPointer(CountReturned));
}

export function LsaEnumerateAccountRights(
  PolicyHandle: Deno.PointerValue | Uint8Array /* ptr */,
  AccountSid: Uint8Array | Deno.PointerValue /* Windows.Win32.Foundation.PSID */,
  UserRights: Deno.PointerValue | Uint8Array /* ptr */,
  CountOfRights: Deno.PointerValue | Uint8Array /* ptr */,
): Deno.PointerValue /* Windows.Win32.Foundation.NTSTATUS */ {
  return libADVAPI32_dll.LsaEnumerateAccountRights(util.toPointer(PolicyHandle), util.toPointer(AccountSid), util.toPointer(UserRights), util.toPointer(CountOfRights));
}

export function LsaAddAccountRights(
  PolicyHandle: Deno.PointerValue | Uint8Array /* ptr */,
  AccountSid: Uint8Array | Deno.PointerValue /* Windows.Win32.Foundation.PSID */,
  UserRights: Deno.PointerValue | Uint8Array /* ptr */,
  CountOfRights: number /* u32 */,
): Deno.PointerValue /* Windows.Win32.Foundation.NTSTATUS */ {
  return libADVAPI32_dll.LsaAddAccountRights(util.toPointer(PolicyHandle), util.toPointer(AccountSid), util.toPointer(UserRights), CountOfRights);
}

export function LsaRemoveAccountRights(
  PolicyHandle: Deno.PointerValue | Uint8Array /* ptr */,
  AccountSid: Uint8Array | Deno.PointerValue /* Windows.Win32.Foundation.PSID */,
  AllRights: Uint8Array | Deno.PointerValue /* Windows.Win32.Foundation.BOOLEAN */,
  UserRights: Deno.PointerValue | Uint8Array /* ptr */,
  CountOfRights: number /* u32 */,
): Deno.PointerValue /* Windows.Win32.Foundation.NTSTATUS */ {
  return libADVAPI32_dll.LsaRemoveAccountRights(util.toPointer(PolicyHandle), util.toPointer(AccountSid), util.toPointer(AllRights), util.toPointer(UserRights), CountOfRights);
}

export function LsaOpenTrustedDomainByName(
  PolicyHandle: Deno.PointerValue | Uint8Array /* ptr */,
  TrustedDomainName: Deno.PointerValue | Uint8Array /* ptr */,
  DesiredAccess: number /* u32 */,
  TrustedDomainHandle: Deno.PointerValue | Uint8Array /* ptr */,
): Deno.PointerValue /* Windows.Win32.Foundation.NTSTATUS */ {
  return libADVAPI32_dll.LsaOpenTrustedDomainByName(util.toPointer(PolicyHandle), util.toPointer(TrustedDomainName), DesiredAccess, util.toPointer(TrustedDomainHandle));
}

export function LsaQueryTrustedDomainInfo(
  PolicyHandle: Deno.PointerValue | Uint8Array /* ptr */,
  TrustedDomainSid: Uint8Array | Deno.PointerValue /* Windows.Win32.Foundation.PSID */,
  InformationClass: TRUSTED_INFORMATION_CLASS /* Windows.Win32.Security.Authentication.Identity.TRUSTED_INFORMATION_CLASS */,
  Buffer: Deno.PointerValue | Uint8Array /* ptr */,
): Deno.PointerValue /* Windows.Win32.Foundation.NTSTATUS */ {
  return libADVAPI32_dll.LsaQueryTrustedDomainInfo(util.toPointer(PolicyHandle), util.toPointer(TrustedDomainSid), InformationClass, util.toPointer(Buffer));
}

export function LsaSetTrustedDomainInformation(
  PolicyHandle: Deno.PointerValue | Uint8Array /* ptr */,
  TrustedDomainSid: Uint8Array | Deno.PointerValue /* Windows.Win32.Foundation.PSID */,
  InformationClass: TRUSTED_INFORMATION_CLASS /* Windows.Win32.Security.Authentication.Identity.TRUSTED_INFORMATION_CLASS */,
  Buffer: Deno.PointerValue | Uint8Array /* ptr */,
): Deno.PointerValue /* Windows.Win32.Foundation.NTSTATUS */ {
  return libADVAPI32_dll.LsaSetTrustedDomainInformation(util.toPointer(PolicyHandle), util.toPointer(TrustedDomainSid), InformationClass, util.toPointer(Buffer));
}

export function LsaDeleteTrustedDomain(
  PolicyHandle: Deno.PointerValue | Uint8Array /* ptr */,
  TrustedDomainSid: Uint8Array | Deno.PointerValue /* Windows.Win32.Foundation.PSID */,
): Deno.PointerValue /* Windows.Win32.Foundation.NTSTATUS */ {
  return libADVAPI32_dll.LsaDeleteTrustedDomain(util.toPointer(PolicyHandle), util.toPointer(TrustedDomainSid));
}

export function LsaQueryTrustedDomainInfoByName(
  PolicyHandle: Deno.PointerValue | Uint8Array /* ptr */,
  TrustedDomainName: Deno.PointerValue | Uint8Array /* ptr */,
  InformationClass: TRUSTED_INFORMATION_CLASS /* Windows.Win32.Security.Authentication.Identity.TRUSTED_INFORMATION_CLASS */,
  Buffer: Deno.PointerValue | Uint8Array /* ptr */,
): Deno.PointerValue /* Windows.Win32.Foundation.NTSTATUS */ {
  return libADVAPI32_dll.LsaQueryTrustedDomainInfoByName(util.toPointer(PolicyHandle), util.toPointer(TrustedDomainName), InformationClass, util.toPointer(Buffer));
}

export function LsaSetTrustedDomainInfoByName(
  PolicyHandle: Deno.PointerValue | Uint8Array /* ptr */,
  TrustedDomainName: Deno.PointerValue | Uint8Array /* ptr */,
  InformationClass: TRUSTED_INFORMATION_CLASS /* Windows.Win32.Security.Authentication.Identity.TRUSTED_INFORMATION_CLASS */,
  Buffer: Deno.PointerValue | Uint8Array /* ptr */,
): Deno.PointerValue /* Windows.Win32.Foundation.NTSTATUS */ {
  return libADVAPI32_dll.LsaSetTrustedDomainInfoByName(util.toPointer(PolicyHandle), util.toPointer(TrustedDomainName), InformationClass, util.toPointer(Buffer));
}

export function LsaEnumerateTrustedDomainsEx(
  PolicyHandle: Deno.PointerValue | Uint8Array /* ptr */,
  EnumerationContext: Deno.PointerValue | Uint8Array /* ptr */,
  Buffer: Deno.PointerValue | Uint8Array /* ptr */,
  PreferedMaximumLength: number /* u32 */,
  CountReturned: Deno.PointerValue | Uint8Array /* ptr */,
): Deno.PointerValue /* Windows.Win32.Foundation.NTSTATUS */ {
  return libADVAPI32_dll.LsaEnumerateTrustedDomainsEx(util.toPointer(PolicyHandle), util.toPointer(EnumerationContext), util.toPointer(Buffer), PreferedMaximumLength, util.toPointer(CountReturned));
}

export function LsaCreateTrustedDomainEx(
  PolicyHandle: Deno.PointerValue | Uint8Array /* ptr */,
  TrustedDomainInformation: Deno.PointerValue | Uint8Array /* ptr */,
  AuthenticationInformation: Deno.PointerValue | Uint8Array /* ptr */,
  DesiredAccess: number /* u32 */,
  TrustedDomainHandle: Deno.PointerValue | Uint8Array /* ptr */,
): Deno.PointerValue /* Windows.Win32.Foundation.NTSTATUS */ {
  return libADVAPI32_dll.LsaCreateTrustedDomainEx(util.toPointer(PolicyHandle), util.toPointer(TrustedDomainInformation), util.toPointer(AuthenticationInformation), DesiredAccess, util.toPointer(TrustedDomainHandle));
}

export function LsaQueryForestTrustInformation(
  PolicyHandle: Deno.PointerValue | Uint8Array /* ptr */,
  TrustedDomainName: Deno.PointerValue | Uint8Array /* ptr */,
  ForestTrustInfo: Deno.PointerValue | Uint8Array /* ptr */,
): Deno.PointerValue /* Windows.Win32.Foundation.NTSTATUS */ {
  return libADVAPI32_dll.LsaQueryForestTrustInformation(util.toPointer(PolicyHandle), util.toPointer(TrustedDomainName), util.toPointer(ForestTrustInfo));
}

export function LsaSetForestTrustInformation(
  PolicyHandle: Deno.PointerValue | Uint8Array /* ptr */,
  TrustedDomainName: Deno.PointerValue | Uint8Array /* ptr */,
  ForestTrustInfo: Deno.PointerValue | Uint8Array /* ptr */,
  CheckOnly: Uint8Array | Deno.PointerValue /* Windows.Win32.Foundation.BOOLEAN */,
  CollisionInfo: Deno.PointerValue | Uint8Array /* ptr */,
): Deno.PointerValue /* Windows.Win32.Foundation.NTSTATUS */ {
  return libADVAPI32_dll.LsaSetForestTrustInformation(util.toPointer(PolicyHandle), util.toPointer(TrustedDomainName), util.toPointer(ForestTrustInfo), util.toPointer(CheckOnly), util.toPointer(CollisionInfo));
}

export function LsaStorePrivateData(
  PolicyHandle: Deno.PointerValue | Uint8Array /* ptr */,
  KeyName: Deno.PointerValue | Uint8Array /* ptr */,
  PrivateData: Deno.PointerValue | Uint8Array /* ptr */,
): Deno.PointerValue /* Windows.Win32.Foundation.NTSTATUS */ {
  return libADVAPI32_dll.LsaStorePrivateData(util.toPointer(PolicyHandle), util.toPointer(KeyName), util.toPointer(PrivateData));
}

export function LsaRetrievePrivateData(
  PolicyHandle: Deno.PointerValue | Uint8Array /* ptr */,
  KeyName: Deno.PointerValue | Uint8Array /* ptr */,
  PrivateData: Deno.PointerValue | Uint8Array /* ptr */,
): Deno.PointerValue /* Windows.Win32.Foundation.NTSTATUS */ {
  return libADVAPI32_dll.LsaRetrievePrivateData(util.toPointer(PolicyHandle), util.toPointer(KeyName), util.toPointer(PrivateData));
}

export function LsaNtStatusToWinError(
  Status: Uint8Array | Deno.PointerValue /* Windows.Win32.Foundation.NTSTATUS */,
): number /* u32 */ {
  return libADVAPI32_dll.LsaNtStatusToWinError(util.toPointer(Status));
}

export function SystemFunction036(
  RandomBuffer: Deno.PointerValue | Uint8Array /* ptr */,
  RandomBufferLength: number /* u32 */,
): Deno.PointerValue /* Windows.Win32.Foundation.BOOLEAN */ {
  return libADVAPI32_dll.SystemFunction036(util.toPointer(RandomBuffer), RandomBufferLength);
}

export function SystemFunction040(
  Memory: Deno.PointerValue | Uint8Array /* ptr */,
  MemorySize: number /* u32 */,
  OptionFlags: number /* u32 */,
): Deno.PointerValue /* Windows.Win32.Foundation.NTSTATUS */ {
  return libADVAPI32_dll.SystemFunction040(util.toPointer(Memory), MemorySize, OptionFlags);
}

export function SystemFunction041(
  Memory: Deno.PointerValue | Uint8Array /* ptr */,
  MemorySize: number /* u32 */,
  OptionFlags: number /* u32 */,
): Deno.PointerValue /* Windows.Win32.Foundation.NTSTATUS */ {
  return libADVAPI32_dll.SystemFunction041(util.toPointer(Memory), MemorySize, OptionFlags);
}

export function AuditSetSystemPolicy(
  pAuditPolicy: Deno.PointerValue | Uint8Array /* ptr */,
  dwPolicyCount: number /* u32 */,
): Deno.PointerValue /* Windows.Win32.Foundation.BOOLEAN */ {
  return libADVAPI32_dll.AuditSetSystemPolicy(util.toPointer(pAuditPolicy), dwPolicyCount);
}

export function AuditSetPerUserPolicy(
  pSid: Uint8Array | Deno.PointerValue /* Windows.Win32.Foundation.PSID */,
  pAuditPolicy: Deno.PointerValue | Uint8Array /* ptr */,
  dwPolicyCount: number /* u32 */,
): Deno.PointerValue /* Windows.Win32.Foundation.BOOLEAN */ {
  return libADVAPI32_dll.AuditSetPerUserPolicy(util.toPointer(pSid), util.toPointer(pAuditPolicy), dwPolicyCount);
}

export function AuditQuerySystemPolicy(
  pSubCategoryGuids: Deno.PointerValue | Uint8Array /* ptr */,
  dwPolicyCount: number /* u32 */,
  ppAuditPolicy: Deno.PointerValue | Uint8Array /* ptr */,
): Deno.PointerValue /* Windows.Win32.Foundation.BOOLEAN */ {
  return libADVAPI32_dll.AuditQuerySystemPolicy(util.toPointer(pSubCategoryGuids), dwPolicyCount, util.toPointer(ppAuditPolicy));
}

export function AuditQueryPerUserPolicy(
  pSid: Uint8Array | Deno.PointerValue /* Windows.Win32.Foundation.PSID */,
  pSubCategoryGuids: Deno.PointerValue | Uint8Array /* ptr */,
  dwPolicyCount: number /* u32 */,
  ppAuditPolicy: Deno.PointerValue | Uint8Array /* ptr */,
): Deno.PointerValue /* Windows.Win32.Foundation.BOOLEAN */ {
  return libADVAPI32_dll.AuditQueryPerUserPolicy(util.toPointer(pSid), util.toPointer(pSubCategoryGuids), dwPolicyCount, util.toPointer(ppAuditPolicy));
}

export function AuditEnumeratePerUserPolicy(
  ppAuditSidArray: Deno.PointerValue | Uint8Array /* ptr */,
): Deno.PointerValue /* Windows.Win32.Foundation.BOOLEAN */ {
  return libADVAPI32_dll.AuditEnumeratePerUserPolicy(util.toPointer(ppAuditSidArray));
}

export function AuditComputeEffectivePolicyBySid(
  pSid: Uint8Array | Deno.PointerValue /* Windows.Win32.Foundation.PSID */,
  pSubCategoryGuids: Deno.PointerValue | Uint8Array /* ptr */,
  dwPolicyCount: number /* u32 */,
  ppAuditPolicy: Deno.PointerValue | Uint8Array /* ptr */,
): Deno.PointerValue /* Windows.Win32.Foundation.BOOLEAN */ {
  return libADVAPI32_dll.AuditComputeEffectivePolicyBySid(util.toPointer(pSid), util.toPointer(pSubCategoryGuids), dwPolicyCount, util.toPointer(ppAuditPolicy));
}

export function AuditComputeEffectivePolicyByToken(
  hTokenHandle: Uint8Array | Deno.PointerValue /* Windows.Win32.Foundation.HANDLE */,
  pSubCategoryGuids: Deno.PointerValue | Uint8Array /* ptr */,
  dwPolicyCount: number /* u32 */,
  ppAuditPolicy: Deno.PointerValue | Uint8Array /* ptr */,
): Deno.PointerValue /* Windows.Win32.Foundation.BOOLEAN */ {
  return libADVAPI32_dll.AuditComputeEffectivePolicyByToken(util.toPointer(hTokenHandle), util.toPointer(pSubCategoryGuids), dwPolicyCount, util.toPointer(ppAuditPolicy));
}

export function AuditEnumerateCategories(
  ppAuditCategoriesArray: Deno.PointerValue | Uint8Array /* ptr */,
  pdwCountReturned: Deno.PointerValue | Uint8Array /* ptr */,
): Deno.PointerValue /* Windows.Win32.Foundation.BOOLEAN */ {
  return libADVAPI32_dll.AuditEnumerateCategories(util.toPointer(ppAuditCategoriesArray), util.toPointer(pdwCountReturned));
}

export function AuditEnumerateSubCategories(
  pAuditCategoryGuid: Deno.PointerValue | Uint8Array /* ptr */,
  bRetrieveAllSubCategories: Uint8Array | Deno.PointerValue /* Windows.Win32.Foundation.BOOLEAN */,
  ppAuditSubCategoriesArray: Deno.PointerValue | Uint8Array /* ptr */,
  pdwCountReturned: Deno.PointerValue | Uint8Array /* ptr */,
): Deno.PointerValue /* Windows.Win32.Foundation.BOOLEAN */ {
  return libADVAPI32_dll.AuditEnumerateSubCategories(util.toPointer(pAuditCategoryGuid), util.toPointer(bRetrieveAllSubCategories), util.toPointer(ppAuditSubCategoriesArray), util.toPointer(pdwCountReturned));
}

export function AuditLookupCategoryNameW(
  pAuditCategoryGuid: Deno.PointerValue | Uint8Array /* ptr */,
  ppszCategoryName: Deno.PointerValue | Uint8Array /* ptr */,
): Deno.PointerValue /* Windows.Win32.Foundation.BOOLEAN */ {
  return libADVAPI32_dll.AuditLookupCategoryNameW(util.toPointer(pAuditCategoryGuid), util.toPointer(ppszCategoryName));
}

export function AuditLookupCategoryNameA(
  pAuditCategoryGuid: Deno.PointerValue | Uint8Array /* ptr */,
  ppszCategoryName: Deno.PointerValue | Uint8Array /* ptr */,
): Deno.PointerValue /* Windows.Win32.Foundation.BOOLEAN */ {
  return libADVAPI32_dll.AuditLookupCategoryNameA(util.toPointer(pAuditCategoryGuid), util.toPointer(ppszCategoryName));
}

export function AuditLookupSubCategoryNameW(
  pAuditSubCategoryGuid: Deno.PointerValue | Uint8Array /* ptr */,
  ppszSubCategoryName: Deno.PointerValue | Uint8Array /* ptr */,
): Deno.PointerValue /* Windows.Win32.Foundation.BOOLEAN */ {
  return libADVAPI32_dll.AuditLookupSubCategoryNameW(util.toPointer(pAuditSubCategoryGuid), util.toPointer(ppszSubCategoryName));
}

export function AuditLookupSubCategoryNameA(
  pAuditSubCategoryGuid: Deno.PointerValue | Uint8Array /* ptr */,
  ppszSubCategoryName: Deno.PointerValue | Uint8Array /* ptr */,
): Deno.PointerValue /* Windows.Win32.Foundation.BOOLEAN */ {
  return libADVAPI32_dll.AuditLookupSubCategoryNameA(util.toPointer(pAuditSubCategoryGuid), util.toPointer(ppszSubCategoryName));
}

export function AuditLookupCategoryIdFromCategoryGuid(
  pAuditCategoryGuid: Deno.PointerValue | Uint8Array /* ptr */,
  pAuditCategoryId: Deno.PointerValue | Uint8Array /* ptr */,
): Deno.PointerValue /* Windows.Win32.Foundation.BOOLEAN */ {
  return libADVAPI32_dll.AuditLookupCategoryIdFromCategoryGuid(util.toPointer(pAuditCategoryGuid), util.toPointer(pAuditCategoryId));
}

export function AuditLookupCategoryGuidFromCategoryId(
  AuditCategoryId: POLICY_AUDIT_EVENT_TYPE /* Windows.Win32.Security.Authentication.Identity.POLICY_AUDIT_EVENT_TYPE */,
  pAuditCategoryGuid: Deno.PointerValue | Uint8Array /* ptr */,
): Deno.PointerValue /* Windows.Win32.Foundation.BOOLEAN */ {
  return libADVAPI32_dll.AuditLookupCategoryGuidFromCategoryId(AuditCategoryId, util.toPointer(pAuditCategoryGuid));
}

export function AuditSetSecurity(
  SecurityInformation: number /* u32 */,
  pSecurityDescriptor: Uint8Array | Deno.PointerValue /* Windows.Win32.Security.PSECURITY_DESCRIPTOR */,
): Deno.PointerValue /* Windows.Win32.Foundation.BOOLEAN */ {
  return libADVAPI32_dll.AuditSetSecurity(SecurityInformation, util.toPointer(pSecurityDescriptor));
}

export function AuditQuerySecurity(
  SecurityInformation: number /* u32 */,
  ppSecurityDescriptor: Deno.PointerValue | Uint8Array /* ptr */,
): Deno.PointerValue /* Windows.Win32.Foundation.BOOLEAN */ {
  return libADVAPI32_dll.AuditQuerySecurity(SecurityInformation, util.toPointer(ppSecurityDescriptor));
}

export function AuditSetGlobalSaclW(
  ObjectTypeName: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  Acl: Deno.PointerValue | Uint8Array /* ptr */,
): Deno.PointerValue /* Windows.Win32.Foundation.BOOLEAN */ {
  return libADVAPI32_dll.AuditSetGlobalSaclW(util.pwstrToFfi(ObjectTypeName), util.toPointer(Acl));
}

export function AuditSetGlobalSaclA(
  ObjectTypeName: string | null | Uint8Array /* Windows.Win32.Foundation.PSTR */,
  Acl: Deno.PointerValue | Uint8Array /* ptr */,
): Deno.PointerValue /* Windows.Win32.Foundation.BOOLEAN */ {
  return libADVAPI32_dll.AuditSetGlobalSaclA(util.pstrToFfi(ObjectTypeName), util.toPointer(Acl));
}

export function AuditQueryGlobalSaclW(
  ObjectTypeName: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  Acl: Deno.PointerValue | Uint8Array /* ptr */,
): Deno.PointerValue /* Windows.Win32.Foundation.BOOLEAN */ {
  return libADVAPI32_dll.AuditQueryGlobalSaclW(util.pwstrToFfi(ObjectTypeName), util.toPointer(Acl));
}

export function AuditQueryGlobalSaclA(
  ObjectTypeName: string | null | Uint8Array /* Windows.Win32.Foundation.PSTR */,
  Acl: Deno.PointerValue | Uint8Array /* ptr */,
): Deno.PointerValue /* Windows.Win32.Foundation.BOOLEAN */ {
  return libADVAPI32_dll.AuditQueryGlobalSaclA(util.pstrToFfi(ObjectTypeName), util.toPointer(Acl));
}

export function AuditFree(
  Buffer: Deno.PointerValue | Uint8Array /* ptr */,
): void /* void */ {
  return libADVAPI32_dll.AuditFree(util.toPointer(Buffer));
}

export function AcquireCredentialsHandleW(
  pszPrincipal: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  pszPackage: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  fCredentialUse: SECPKG_CRED /* Windows.Win32.Security.Authentication.Identity.SECPKG_CRED */,
  pvLogonId: Deno.PointerValue | Uint8Array /* ptr */,
  pAuthData: Deno.PointerValue | Uint8Array /* ptr */,
  pGetKeyFn: Uint8Array | Deno.PointerValue /* Windows.Win32.Security.Authentication.Identity.SEC_GET_KEY_FN */,
  pvGetKeyArgument: Deno.PointerValue | Uint8Array /* ptr */,
  phCredential: Deno.PointerValue | Uint8Array /* ptr */,
  ptsExpiry: Deno.PointerValue | Uint8Array /* ptr */,
): Deno.PointerValue /* Windows.Win32.Foundation.HRESULT */ {
  return libSECUR32_dll.AcquireCredentialsHandleW(util.pwstrToFfi(pszPrincipal), util.pwstrToFfi(pszPackage), fCredentialUse, util.toPointer(pvLogonId), util.toPointer(pAuthData), util.toPointer(pGetKeyFn), util.toPointer(pvGetKeyArgument), util.toPointer(phCredential), util.toPointer(ptsExpiry));
}

export function AcquireCredentialsHandleA(
  pszPrincipal: string | null | Uint8Array /* Windows.Win32.Foundation.PSTR */,
  pszPackage: string | null | Uint8Array /* Windows.Win32.Foundation.PSTR */,
  fCredentialUse: SECPKG_CRED /* Windows.Win32.Security.Authentication.Identity.SECPKG_CRED */,
  pvLogonId: Deno.PointerValue | Uint8Array /* ptr */,
  pAuthData: Deno.PointerValue | Uint8Array /* ptr */,
  pGetKeyFn: Uint8Array | Deno.PointerValue /* Windows.Win32.Security.Authentication.Identity.SEC_GET_KEY_FN */,
  pvGetKeyArgument: Deno.PointerValue | Uint8Array /* ptr */,
  phCredential: Deno.PointerValue | Uint8Array /* ptr */,
  ptsExpiry: Deno.PointerValue | Uint8Array /* ptr */,
): Deno.PointerValue /* Windows.Win32.Foundation.HRESULT */ {
  return libSECUR32_dll.AcquireCredentialsHandleA(util.pstrToFfi(pszPrincipal), util.pstrToFfi(pszPackage), fCredentialUse, util.toPointer(pvLogonId), util.toPointer(pAuthData), util.toPointer(pGetKeyFn), util.toPointer(pvGetKeyArgument), util.toPointer(phCredential), util.toPointer(ptsExpiry));
}

export function FreeCredentialsHandle(
  phCredential: Deno.PointerValue | Uint8Array /* ptr */,
): Deno.PointerValue /* Windows.Win32.Foundation.HRESULT */ {
  return libSECUR32_dll.FreeCredentialsHandle(util.toPointer(phCredential));
}

export function AddCredentialsW(
  hCredentials: Deno.PointerValue | Uint8Array /* ptr */,
  pszPrincipal: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  pszPackage: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  fCredentialUse: number /* u32 */,
  pAuthData: Deno.PointerValue | Uint8Array /* ptr */,
  pGetKeyFn: Uint8Array | Deno.PointerValue /* Windows.Win32.Security.Authentication.Identity.SEC_GET_KEY_FN */,
  pvGetKeyArgument: Deno.PointerValue | Uint8Array /* ptr */,
  ptsExpiry: Deno.PointerValue | Uint8Array /* ptr */,
): Deno.PointerValue /* Windows.Win32.Foundation.HRESULT */ {
  return libSECUR32_dll.AddCredentialsW(util.toPointer(hCredentials), util.pwstrToFfi(pszPrincipal), util.pwstrToFfi(pszPackage), fCredentialUse, util.toPointer(pAuthData), util.toPointer(pGetKeyFn), util.toPointer(pvGetKeyArgument), util.toPointer(ptsExpiry));
}

export function AddCredentialsA(
  hCredentials: Deno.PointerValue | Uint8Array /* ptr */,
  pszPrincipal: string | null | Uint8Array /* Windows.Win32.Foundation.PSTR */,
  pszPackage: string | null | Uint8Array /* Windows.Win32.Foundation.PSTR */,
  fCredentialUse: number /* u32 */,
  pAuthData: Deno.PointerValue | Uint8Array /* ptr */,
  pGetKeyFn: Uint8Array | Deno.PointerValue /* Windows.Win32.Security.Authentication.Identity.SEC_GET_KEY_FN */,
  pvGetKeyArgument: Deno.PointerValue | Uint8Array /* ptr */,
  ptsExpiry: Deno.PointerValue | Uint8Array /* ptr */,
): Deno.PointerValue /* Windows.Win32.Foundation.HRESULT */ {
  return libSECUR32_dll.AddCredentialsA(util.toPointer(hCredentials), util.pstrToFfi(pszPrincipal), util.pstrToFfi(pszPackage), fCredentialUse, util.toPointer(pAuthData), util.toPointer(pGetKeyFn), util.toPointer(pvGetKeyArgument), util.toPointer(ptsExpiry));
}

export function ChangeAccountPasswordW(
  pszPackageName: Deno.PointerValue | Uint8Array /* ptr */,
  pszDomainName: Deno.PointerValue | Uint8Array /* ptr */,
  pszAccountName: Deno.PointerValue | Uint8Array /* ptr */,
  pszOldPassword: Deno.PointerValue | Uint8Array /* ptr */,
  pszNewPassword: Deno.PointerValue | Uint8Array /* ptr */,
  bImpersonating: Uint8Array | Deno.PointerValue /* Windows.Win32.Foundation.BOOLEAN */,
  dwReserved: number /* u32 */,
  pOutput: Deno.PointerValue | Uint8Array /* ptr */,
): Deno.PointerValue /* Windows.Win32.Foundation.HRESULT */ {
  return libSECUR32_dll.ChangeAccountPasswordW(util.toPointer(pszPackageName), util.toPointer(pszDomainName), util.toPointer(pszAccountName), util.toPointer(pszOldPassword), util.toPointer(pszNewPassword), util.toPointer(bImpersonating), dwReserved, util.toPointer(pOutput));
}

export function ChangeAccountPasswordA(
  pszPackageName: Deno.PointerValue | Uint8Array /* ptr */,
  pszDomainName: Deno.PointerValue | Uint8Array /* ptr */,
  pszAccountName: Deno.PointerValue | Uint8Array /* ptr */,
  pszOldPassword: Deno.PointerValue | Uint8Array /* ptr */,
  pszNewPassword: Deno.PointerValue | Uint8Array /* ptr */,
  bImpersonating: Uint8Array | Deno.PointerValue /* Windows.Win32.Foundation.BOOLEAN */,
  dwReserved: number /* u32 */,
  pOutput: Deno.PointerValue | Uint8Array /* ptr */,
): Deno.PointerValue /* Windows.Win32.Foundation.HRESULT */ {
  return libSECUR32_dll.ChangeAccountPasswordA(util.toPointer(pszPackageName), util.toPointer(pszDomainName), util.toPointer(pszAccountName), util.toPointer(pszOldPassword), util.toPointer(pszNewPassword), util.toPointer(bImpersonating), dwReserved, util.toPointer(pOutput));
}

export function InitializeSecurityContextW(
  phCredential: Deno.PointerValue | Uint8Array /* ptr */,
  phContext: Deno.PointerValue | Uint8Array /* ptr */,
  pszTargetName: Deno.PointerValue | Uint8Array /* ptr */,
  fContextReq: ISC_REQ_FLAGS /* Windows.Win32.Security.Authentication.Identity.ISC_REQ_FLAGS */,
  Reserved1: number /* u32 */,
  TargetDataRep: number /* u32 */,
  pInput: Deno.PointerValue | Uint8Array /* ptr */,
  Reserved2: number /* u32 */,
  phNewContext: Deno.PointerValue | Uint8Array /* ptr */,
  pOutput: Deno.PointerValue | Uint8Array /* ptr */,
  pfContextAttr: Deno.PointerValue | Uint8Array /* ptr */,
  ptsExpiry: Deno.PointerValue | Uint8Array /* ptr */,
): Deno.PointerValue /* Windows.Win32.Foundation.HRESULT */ {
  return libSECUR32_dll.InitializeSecurityContextW(util.toPointer(phCredential), util.toPointer(phContext), util.toPointer(pszTargetName), fContextReq, Reserved1, TargetDataRep, util.toPointer(pInput), Reserved2, util.toPointer(phNewContext), util.toPointer(pOutput), util.toPointer(pfContextAttr), util.toPointer(ptsExpiry));
}

export function InitializeSecurityContextA(
  phCredential: Deno.PointerValue | Uint8Array /* ptr */,
  phContext: Deno.PointerValue | Uint8Array /* ptr */,
  pszTargetName: Deno.PointerValue | Uint8Array /* ptr */,
  fContextReq: ISC_REQ_FLAGS /* Windows.Win32.Security.Authentication.Identity.ISC_REQ_FLAGS */,
  Reserved1: number /* u32 */,
  TargetDataRep: number /* u32 */,
  pInput: Deno.PointerValue | Uint8Array /* ptr */,
  Reserved2: number /* u32 */,
  phNewContext: Deno.PointerValue | Uint8Array /* ptr */,
  pOutput: Deno.PointerValue | Uint8Array /* ptr */,
  pfContextAttr: Deno.PointerValue | Uint8Array /* ptr */,
  ptsExpiry: Deno.PointerValue | Uint8Array /* ptr */,
): Deno.PointerValue /* Windows.Win32.Foundation.HRESULT */ {
  return libSECUR32_dll.InitializeSecurityContextA(util.toPointer(phCredential), util.toPointer(phContext), util.toPointer(pszTargetName), fContextReq, Reserved1, TargetDataRep, util.toPointer(pInput), Reserved2, util.toPointer(phNewContext), util.toPointer(pOutput), util.toPointer(pfContextAttr), util.toPointer(ptsExpiry));
}

export function AcceptSecurityContext(
  phCredential: Deno.PointerValue | Uint8Array /* ptr */,
  phContext: Deno.PointerValue | Uint8Array /* ptr */,
  pInput: Deno.PointerValue | Uint8Array /* ptr */,
  fContextReq: ASC_REQ_FLAGS /* Windows.Win32.Security.Authentication.Identity.ASC_REQ_FLAGS */,
  TargetDataRep: number /* u32 */,
  phNewContext: Deno.PointerValue | Uint8Array /* ptr */,
  pOutput: Deno.PointerValue | Uint8Array /* ptr */,
  pfContextAttr: Deno.PointerValue | Uint8Array /* ptr */,
  ptsExpiry: Deno.PointerValue | Uint8Array /* ptr */,
): Deno.PointerValue /* Windows.Win32.Foundation.HRESULT */ {
  return libSECUR32_dll.AcceptSecurityContext(util.toPointer(phCredential), util.toPointer(phContext), util.toPointer(pInput), fContextReq, TargetDataRep, util.toPointer(phNewContext), util.toPointer(pOutput), util.toPointer(pfContextAttr), util.toPointer(ptsExpiry));
}

export function CompleteAuthToken(
  phContext: Deno.PointerValue | Uint8Array /* ptr */,
  pToken: Deno.PointerValue | Uint8Array /* ptr */,
): Deno.PointerValue /* Windows.Win32.Foundation.HRESULT */ {
  return libSECUR32_dll.CompleteAuthToken(util.toPointer(phContext), util.toPointer(pToken));
}

export function ImpersonateSecurityContext(
  phContext: Deno.PointerValue | Uint8Array /* ptr */,
): Deno.PointerValue /* Windows.Win32.Foundation.HRESULT */ {
  return libSECUR32_dll.ImpersonateSecurityContext(util.toPointer(phContext));
}

export function RevertSecurityContext(
  phContext: Deno.PointerValue | Uint8Array /* ptr */,
): Deno.PointerValue /* Windows.Win32.Foundation.HRESULT */ {
  return libSECUR32_dll.RevertSecurityContext(util.toPointer(phContext));
}

export function QuerySecurityContextToken(
  phContext: Deno.PointerValue | Uint8Array /* ptr */,
  Token: Deno.PointerValue | Uint8Array /* ptr */,
): Deno.PointerValue /* Windows.Win32.Foundation.HRESULT */ {
  return libSECUR32_dll.QuerySecurityContextToken(util.toPointer(phContext), util.toPointer(Token));
}

export function DeleteSecurityContext(
  phContext: Deno.PointerValue | Uint8Array /* ptr */,
): Deno.PointerValue /* Windows.Win32.Foundation.HRESULT */ {
  return libSECUR32_dll.DeleteSecurityContext(util.toPointer(phContext));
}

export function ApplyControlToken(
  phContext: Deno.PointerValue | Uint8Array /* ptr */,
  pInput: Deno.PointerValue | Uint8Array /* ptr */,
): Deno.PointerValue /* Windows.Win32.Foundation.HRESULT */ {
  return libSECUR32_dll.ApplyControlToken(util.toPointer(phContext), util.toPointer(pInput));
}

export function QueryContextAttributesW(
  phContext: Deno.PointerValue | Uint8Array /* ptr */,
  ulAttribute: SECPKG_ATTR /* Windows.Win32.Security.Authentication.Identity.SECPKG_ATTR */,
  pBuffer: Deno.PointerValue | Uint8Array /* ptr */,
): Deno.PointerValue /* Windows.Win32.Foundation.HRESULT */ {
  return libSECUR32_dll.QueryContextAttributesW(util.toPointer(phContext), ulAttribute, util.toPointer(pBuffer));
}

export function QueryContextAttributesExW(
  phContext: Deno.PointerValue | Uint8Array /* ptr */,
  ulAttribute: SECPKG_ATTR /* Windows.Win32.Security.Authentication.Identity.SECPKG_ATTR */,
  pBuffer: Deno.PointerValue | Uint8Array /* ptr */,
  cbBuffer: number /* u32 */,
): Deno.PointerValue /* Windows.Win32.Foundation.HRESULT */ {
  return libSspiCli_dll.QueryContextAttributesExW(util.toPointer(phContext), ulAttribute, util.toPointer(pBuffer), cbBuffer);
}

export function QueryContextAttributesA(
  phContext: Deno.PointerValue | Uint8Array /* ptr */,
  ulAttribute: SECPKG_ATTR /* Windows.Win32.Security.Authentication.Identity.SECPKG_ATTR */,
  pBuffer: Deno.PointerValue | Uint8Array /* ptr */,
): Deno.PointerValue /* Windows.Win32.Foundation.HRESULT */ {
  return libSECUR32_dll.QueryContextAttributesA(util.toPointer(phContext), ulAttribute, util.toPointer(pBuffer));
}

export function QueryContextAttributesExA(
  phContext: Deno.PointerValue | Uint8Array /* ptr */,
  ulAttribute: SECPKG_ATTR /* Windows.Win32.Security.Authentication.Identity.SECPKG_ATTR */,
  pBuffer: Deno.PointerValue | Uint8Array /* ptr */,
  cbBuffer: number /* u32 */,
): Deno.PointerValue /* Windows.Win32.Foundation.HRESULT */ {
  return libSspiCli_dll.QueryContextAttributesExA(util.toPointer(phContext), ulAttribute, util.toPointer(pBuffer), cbBuffer);
}

export function SetContextAttributesW(
  phContext: Deno.PointerValue | Uint8Array /* ptr */,
  ulAttribute: SECPKG_ATTR /* Windows.Win32.Security.Authentication.Identity.SECPKG_ATTR */,
  pBuffer: Deno.PointerValue | Uint8Array /* ptr */,
  cbBuffer: number /* u32 */,
): Deno.PointerValue /* Windows.Win32.Foundation.HRESULT */ {
  return libSECUR32_dll.SetContextAttributesW(util.toPointer(phContext), ulAttribute, util.toPointer(pBuffer), cbBuffer);
}

export function SetContextAttributesA(
  phContext: Deno.PointerValue | Uint8Array /* ptr */,
  ulAttribute: SECPKG_ATTR /* Windows.Win32.Security.Authentication.Identity.SECPKG_ATTR */,
  pBuffer: Deno.PointerValue | Uint8Array /* ptr */,
  cbBuffer: number /* u32 */,
): Deno.PointerValue /* Windows.Win32.Foundation.HRESULT */ {
  return libSECUR32_dll.SetContextAttributesA(util.toPointer(phContext), ulAttribute, util.toPointer(pBuffer), cbBuffer);
}

export function QueryCredentialsAttributesW(
  phCredential: Deno.PointerValue | Uint8Array /* ptr */,
  ulAttribute: number /* u32 */,
  pBuffer: Deno.PointerValue | Uint8Array /* ptr */,
): Deno.PointerValue /* Windows.Win32.Foundation.HRESULT */ {
  return libSECUR32_dll.QueryCredentialsAttributesW(util.toPointer(phCredential), ulAttribute, util.toPointer(pBuffer));
}

export function QueryCredentialsAttributesExW(
  phCredential: Deno.PointerValue | Uint8Array /* ptr */,
  ulAttribute: number /* u32 */,
  pBuffer: Deno.PointerValue | Uint8Array /* ptr */,
  cbBuffer: number /* u32 */,
): Deno.PointerValue /* Windows.Win32.Foundation.HRESULT */ {
  return libSspiCli_dll.QueryCredentialsAttributesExW(util.toPointer(phCredential), ulAttribute, util.toPointer(pBuffer), cbBuffer);
}

export function QueryCredentialsAttributesA(
  phCredential: Deno.PointerValue | Uint8Array /* ptr */,
  ulAttribute: number /* u32 */,
  pBuffer: Deno.PointerValue | Uint8Array /* ptr */,
): Deno.PointerValue /* Windows.Win32.Foundation.HRESULT */ {
  return libSECUR32_dll.QueryCredentialsAttributesA(util.toPointer(phCredential), ulAttribute, util.toPointer(pBuffer));
}

export function QueryCredentialsAttributesExA(
  phCredential: Deno.PointerValue | Uint8Array /* ptr */,
  ulAttribute: number /* u32 */,
  pBuffer: Deno.PointerValue | Uint8Array /* ptr */,
  cbBuffer: number /* u32 */,
): Deno.PointerValue /* Windows.Win32.Foundation.HRESULT */ {
  return libSspiCli_dll.QueryCredentialsAttributesExA(util.toPointer(phCredential), ulAttribute, util.toPointer(pBuffer), cbBuffer);
}

export function SetCredentialsAttributesW(
  phCredential: Deno.PointerValue | Uint8Array /* ptr */,
  ulAttribute: number /* u32 */,
  pBuffer: Deno.PointerValue | Uint8Array /* ptr */,
  cbBuffer: number /* u32 */,
): Deno.PointerValue /* Windows.Win32.Foundation.HRESULT */ {
  return libSECUR32_dll.SetCredentialsAttributesW(util.toPointer(phCredential), ulAttribute, util.toPointer(pBuffer), cbBuffer);
}

export function SetCredentialsAttributesA(
  phCredential: Deno.PointerValue | Uint8Array /* ptr */,
  ulAttribute: number /* u32 */,
  pBuffer: Deno.PointerValue | Uint8Array /* ptr */,
  cbBuffer: number /* u32 */,
): Deno.PointerValue /* Windows.Win32.Foundation.HRESULT */ {
  return libSECUR32_dll.SetCredentialsAttributesA(util.toPointer(phCredential), ulAttribute, util.toPointer(pBuffer), cbBuffer);
}

export function FreeContextBuffer(
  pvContextBuffer: Deno.PointerValue | Uint8Array /* ptr */,
): Deno.PointerValue /* Windows.Win32.Foundation.HRESULT */ {
  return libSECUR32_dll.FreeContextBuffer(util.toPointer(pvContextBuffer));
}

export function MakeSignature(
  phContext: Deno.PointerValue | Uint8Array /* ptr */,
  fQOP: number /* u32 */,
  pMessage: Deno.PointerValue | Uint8Array /* ptr */,
  MessageSeqNo: number /* u32 */,
): Deno.PointerValue /* Windows.Win32.Foundation.HRESULT */ {
  return libSECUR32_dll.MakeSignature(util.toPointer(phContext), fQOP, util.toPointer(pMessage), MessageSeqNo);
}

export function VerifySignature(
  phContext: Deno.PointerValue | Uint8Array /* ptr */,
  pMessage: Deno.PointerValue | Uint8Array /* ptr */,
  MessageSeqNo: number /* u32 */,
  pfQOP: Deno.PointerValue | Uint8Array /* ptr */,
): Deno.PointerValue /* Windows.Win32.Foundation.HRESULT */ {
  return libSECUR32_dll.VerifySignature(util.toPointer(phContext), util.toPointer(pMessage), MessageSeqNo, util.toPointer(pfQOP));
}

export function EncryptMessage(
  phContext: Deno.PointerValue | Uint8Array /* ptr */,
  fQOP: number /* u32 */,
  pMessage: Deno.PointerValue | Uint8Array /* ptr */,
  MessageSeqNo: number /* u32 */,
): Deno.PointerValue /* Windows.Win32.Foundation.HRESULT */ {
  return libSECUR32_dll.EncryptMessage(util.toPointer(phContext), fQOP, util.toPointer(pMessage), MessageSeqNo);
}

export function DecryptMessage(
  phContext: Deno.PointerValue | Uint8Array /* ptr */,
  pMessage: Deno.PointerValue | Uint8Array /* ptr */,
  MessageSeqNo: number /* u32 */,
  pfQOP: Deno.PointerValue | Uint8Array /* ptr */,
): Deno.PointerValue /* Windows.Win32.Foundation.HRESULT */ {
  return libSECUR32_dll.DecryptMessage(util.toPointer(phContext), util.toPointer(pMessage), MessageSeqNo, util.toPointer(pfQOP));
}

export function EnumerateSecurityPackagesW(
  pcPackages: Deno.PointerValue | Uint8Array /* ptr */,
  ppPackageInfo: Deno.PointerValue | Uint8Array /* ptr */,
): Deno.PointerValue /* Windows.Win32.Foundation.HRESULT */ {
  return libSECUR32_dll.EnumerateSecurityPackagesW(util.toPointer(pcPackages), util.toPointer(ppPackageInfo));
}

export function EnumerateSecurityPackagesA(
  pcPackages: Deno.PointerValue | Uint8Array /* ptr */,
  ppPackageInfo: Deno.PointerValue | Uint8Array /* ptr */,
): Deno.PointerValue /* Windows.Win32.Foundation.HRESULT */ {
  return libSECUR32_dll.EnumerateSecurityPackagesA(util.toPointer(pcPackages), util.toPointer(ppPackageInfo));
}

export function QuerySecurityPackageInfoW(
  pszPackageName: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  ppPackageInfo: Deno.PointerValue | Uint8Array /* ptr */,
): Deno.PointerValue /* Windows.Win32.Foundation.HRESULT */ {
  return libSECUR32_dll.QuerySecurityPackageInfoW(util.pwstrToFfi(pszPackageName), util.toPointer(ppPackageInfo));
}

export function QuerySecurityPackageInfoA(
  pszPackageName: string | null | Uint8Array /* Windows.Win32.Foundation.PSTR */,
  ppPackageInfo: Deno.PointerValue | Uint8Array /* ptr */,
): Deno.PointerValue /* Windows.Win32.Foundation.HRESULT */ {
  return libSECUR32_dll.QuerySecurityPackageInfoA(util.pstrToFfi(pszPackageName), util.toPointer(ppPackageInfo));
}

export function ExportSecurityContext(
  phContext: Deno.PointerValue | Uint8Array /* ptr */,
  fFlags: EXPORT_SECURITY_CONTEXT_FLAGS /* Windows.Win32.Security.Authentication.Identity.EXPORT_SECURITY_CONTEXT_FLAGS */,
  pPackedContext: Deno.PointerValue | Uint8Array /* ptr */,
  pToken: Deno.PointerValue | Uint8Array /* ptr */,
): Deno.PointerValue /* Windows.Win32.Foundation.HRESULT */ {
  return libSECUR32_dll.ExportSecurityContext(util.toPointer(phContext), fFlags, util.toPointer(pPackedContext), util.toPointer(pToken));
}

export function ImportSecurityContextW(
  pszPackage: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  pPackedContext: Deno.PointerValue | Uint8Array /* ptr */,
  Token: Deno.PointerValue | Uint8Array /* ptr */,
  phContext: Deno.PointerValue | Uint8Array /* ptr */,
): Deno.PointerValue /* Windows.Win32.Foundation.HRESULT */ {
  return libSECUR32_dll.ImportSecurityContextW(util.pwstrToFfi(pszPackage), util.toPointer(pPackedContext), util.toPointer(Token), util.toPointer(phContext));
}

export function ImportSecurityContextA(
  pszPackage: string | null | Uint8Array /* Windows.Win32.Foundation.PSTR */,
  pPackedContext: Deno.PointerValue | Uint8Array /* ptr */,
  Token: Deno.PointerValue | Uint8Array /* ptr */,
  phContext: Deno.PointerValue | Uint8Array /* ptr */,
): Deno.PointerValue /* Windows.Win32.Foundation.HRESULT */ {
  return libSECUR32_dll.ImportSecurityContextA(util.pstrToFfi(pszPackage), util.toPointer(pPackedContext), util.toPointer(Token), util.toPointer(phContext));
}

export function InitSecurityInterfaceA(): Deno.PointerValue /* ptr */ {
  return libSECUR32_dll.InitSecurityInterfaceA();
}

export function InitSecurityInterfaceW(): Deno.PointerValue /* ptr */ {
  return libSECUR32_dll.InitSecurityInterfaceW();
}

export function SaslEnumerateProfilesA(
  ProfileList: Deno.PointerValue | Uint8Array /* ptr */,
  ProfileCount: Deno.PointerValue | Uint8Array /* ptr */,
): Deno.PointerValue /* Windows.Win32.Foundation.HRESULT */ {
  return libSECUR32_dll.SaslEnumerateProfilesA(util.toPointer(ProfileList), util.toPointer(ProfileCount));
}

export function SaslEnumerateProfilesW(
  ProfileList: Deno.PointerValue | Uint8Array /* ptr */,
  ProfileCount: Deno.PointerValue | Uint8Array /* ptr */,
): Deno.PointerValue /* Windows.Win32.Foundation.HRESULT */ {
  return libSECUR32_dll.SaslEnumerateProfilesW(util.toPointer(ProfileList), util.toPointer(ProfileCount));
}

export function SaslGetProfilePackageA(
  ProfileName: string | null | Uint8Array /* Windows.Win32.Foundation.PSTR */,
  PackageInfo: Deno.PointerValue | Uint8Array /* ptr */,
): Deno.PointerValue /* Windows.Win32.Foundation.HRESULT */ {
  return libSECUR32_dll.SaslGetProfilePackageA(util.pstrToFfi(ProfileName), util.toPointer(PackageInfo));
}

export function SaslGetProfilePackageW(
  ProfileName: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  PackageInfo: Deno.PointerValue | Uint8Array /* ptr */,
): Deno.PointerValue /* Windows.Win32.Foundation.HRESULT */ {
  return libSECUR32_dll.SaslGetProfilePackageW(util.pwstrToFfi(ProfileName), util.toPointer(PackageInfo));
}

export function SaslIdentifyPackageA(
  pInput: Deno.PointerValue | Uint8Array /* ptr */,
  PackageInfo: Deno.PointerValue | Uint8Array /* ptr */,
): Deno.PointerValue /* Windows.Win32.Foundation.HRESULT */ {
  return libSECUR32_dll.SaslIdentifyPackageA(util.toPointer(pInput), util.toPointer(PackageInfo));
}

export function SaslIdentifyPackageW(
  pInput: Deno.PointerValue | Uint8Array /* ptr */,
  PackageInfo: Deno.PointerValue | Uint8Array /* ptr */,
): Deno.PointerValue /* Windows.Win32.Foundation.HRESULT */ {
  return libSECUR32_dll.SaslIdentifyPackageW(util.toPointer(pInput), util.toPointer(PackageInfo));
}

export function SaslInitializeSecurityContextW(
  phCredential: Deno.PointerValue | Uint8Array /* ptr */,
  phContext: Deno.PointerValue | Uint8Array /* ptr */,
  pszTargetName: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  fContextReq: ISC_REQ_FLAGS /* Windows.Win32.Security.Authentication.Identity.ISC_REQ_FLAGS */,
  Reserved1: number /* u32 */,
  TargetDataRep: number /* u32 */,
  pInput: Deno.PointerValue | Uint8Array /* ptr */,
  Reserved2: number /* u32 */,
  phNewContext: Deno.PointerValue | Uint8Array /* ptr */,
  pOutput: Deno.PointerValue | Uint8Array /* ptr */,
  pfContextAttr: Deno.PointerValue | Uint8Array /* ptr */,
  ptsExpiry: Deno.PointerValue | Uint8Array /* ptr */,
): Deno.PointerValue /* Windows.Win32.Foundation.HRESULT */ {
  return libSECUR32_dll.SaslInitializeSecurityContextW(util.toPointer(phCredential), util.toPointer(phContext), util.pwstrToFfi(pszTargetName), fContextReq, Reserved1, TargetDataRep, util.toPointer(pInput), Reserved2, util.toPointer(phNewContext), util.toPointer(pOutput), util.toPointer(pfContextAttr), util.toPointer(ptsExpiry));
}

export function SaslInitializeSecurityContextA(
  phCredential: Deno.PointerValue | Uint8Array /* ptr */,
  phContext: Deno.PointerValue | Uint8Array /* ptr */,
  pszTargetName: string | null | Uint8Array /* Windows.Win32.Foundation.PSTR */,
  fContextReq: ISC_REQ_FLAGS /* Windows.Win32.Security.Authentication.Identity.ISC_REQ_FLAGS */,
  Reserved1: number /* u32 */,
  TargetDataRep: number /* u32 */,
  pInput: Deno.PointerValue | Uint8Array /* ptr */,
  Reserved2: number /* u32 */,
  phNewContext: Deno.PointerValue | Uint8Array /* ptr */,
  pOutput: Deno.PointerValue | Uint8Array /* ptr */,
  pfContextAttr: Deno.PointerValue | Uint8Array /* ptr */,
  ptsExpiry: Deno.PointerValue | Uint8Array /* ptr */,
): Deno.PointerValue /* Windows.Win32.Foundation.HRESULT */ {
  return libSECUR32_dll.SaslInitializeSecurityContextA(util.toPointer(phCredential), util.toPointer(phContext), util.pstrToFfi(pszTargetName), fContextReq, Reserved1, TargetDataRep, util.toPointer(pInput), Reserved2, util.toPointer(phNewContext), util.toPointer(pOutput), util.toPointer(pfContextAttr), util.toPointer(ptsExpiry));
}

export function SaslAcceptSecurityContext(
  phCredential: Deno.PointerValue | Uint8Array /* ptr */,
  phContext: Deno.PointerValue | Uint8Array /* ptr */,
  pInput: Deno.PointerValue | Uint8Array /* ptr */,
  fContextReq: ASC_REQ_FLAGS /* Windows.Win32.Security.Authentication.Identity.ASC_REQ_FLAGS */,
  TargetDataRep: number /* u32 */,
  phNewContext: Deno.PointerValue | Uint8Array /* ptr */,
  pOutput: Deno.PointerValue | Uint8Array /* ptr */,
  pfContextAttr: Deno.PointerValue | Uint8Array /* ptr */,
  ptsExpiry: Deno.PointerValue | Uint8Array /* ptr */,
): Deno.PointerValue /* Windows.Win32.Foundation.HRESULT */ {
  return libSECUR32_dll.SaslAcceptSecurityContext(util.toPointer(phCredential), util.toPointer(phContext), util.toPointer(pInput), fContextReq, TargetDataRep, util.toPointer(phNewContext), util.toPointer(pOutput), util.toPointer(pfContextAttr), util.toPointer(ptsExpiry));
}

export function SaslSetContextOption(
  ContextHandle: Deno.PointerValue | Uint8Array /* ptr */,
  Option: number /* u32 */,
  Value: Deno.PointerValue | Uint8Array /* ptr */,
  Size: number /* u32 */,
): Deno.PointerValue /* Windows.Win32.Foundation.HRESULT */ {
  return libSECUR32_dll.SaslSetContextOption(util.toPointer(ContextHandle), Option, util.toPointer(Value), Size);
}

export function SaslGetContextOption(
  ContextHandle: Deno.PointerValue | Uint8Array /* ptr */,
  Option: number /* u32 */,
  Value: Deno.PointerValue | Uint8Array /* ptr */,
  Size: number /* u32 */,
  Needed: Deno.PointerValue | Uint8Array /* ptr */,
): Deno.PointerValue /* Windows.Win32.Foundation.HRESULT */ {
  return libSECUR32_dll.SaslGetContextOption(util.toPointer(ContextHandle), Option, util.toPointer(Value), Size, util.toPointer(Needed));
}

export function SspiPromptForCredentialsW(
  pszTargetName: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  pUiInfo: Deno.PointerValue | Uint8Array /* ptr */,
  dwAuthError: number /* u32 */,
  pszPackage: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  pInputAuthIdentity: Deno.PointerValue | Uint8Array /* ptr */,
  ppAuthIdentity: Deno.PointerValue | Uint8Array /* ptr */,
  pfSave: Deno.PointerValue | Uint8Array /* ptr */,
  dwFlags: number /* u32 */,
): number /* u32 */ {
  return libcredui_dll.SspiPromptForCredentialsW(util.pwstrToFfi(pszTargetName), util.toPointer(pUiInfo), dwAuthError, util.pwstrToFfi(pszPackage), util.toPointer(pInputAuthIdentity), util.toPointer(ppAuthIdentity), util.toPointer(pfSave), dwFlags);
}

export function SspiPromptForCredentialsA(
  pszTargetName: string | null | Uint8Array /* Windows.Win32.Foundation.PSTR */,
  pUiInfo: Deno.PointerValue | Uint8Array /* ptr */,
  dwAuthError: number /* u32 */,
  pszPackage: string | null | Uint8Array /* Windows.Win32.Foundation.PSTR */,
  pInputAuthIdentity: Deno.PointerValue | Uint8Array /* ptr */,
  ppAuthIdentity: Deno.PointerValue | Uint8Array /* ptr */,
  pfSave: Deno.PointerValue | Uint8Array /* ptr */,
  dwFlags: number /* u32 */,
): number /* u32 */ {
  return libcredui_dll.SspiPromptForCredentialsA(util.pstrToFfi(pszTargetName), util.toPointer(pUiInfo), dwAuthError, util.pstrToFfi(pszPackage), util.toPointer(pInputAuthIdentity), util.toPointer(ppAuthIdentity), util.toPointer(pfSave), dwFlags);
}

export function SspiPrepareForCredRead(
  AuthIdentity: Deno.PointerValue | Uint8Array /* ptr */,
  pszTargetName: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  pCredmanCredentialType: Deno.PointerValue | Uint8Array /* ptr */,
  ppszCredmanTargetName: Deno.PointerValue | Uint8Array /* ptr */,
): Deno.PointerValue /* Windows.Win32.Foundation.HRESULT */ {
  return libSECUR32_dll.SspiPrepareForCredRead(util.toPointer(AuthIdentity), util.pwstrToFfi(pszTargetName), util.toPointer(pCredmanCredentialType), util.toPointer(ppszCredmanTargetName));
}

export function SspiPrepareForCredWrite(
  AuthIdentity: Deno.PointerValue | Uint8Array /* ptr */,
  pszTargetName: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  pCredmanCredentialType: Deno.PointerValue | Uint8Array /* ptr */,
  ppszCredmanTargetName: Deno.PointerValue | Uint8Array /* ptr */,
  ppszCredmanUserName: Deno.PointerValue | Uint8Array /* ptr */,
  ppCredentialBlob: Deno.PointerValue | Uint8Array /* ptr */,
  pCredentialBlobSize: Deno.PointerValue | Uint8Array /* ptr */,
): Deno.PointerValue /* Windows.Win32.Foundation.HRESULT */ {
  return libSECUR32_dll.SspiPrepareForCredWrite(util.toPointer(AuthIdentity), util.pwstrToFfi(pszTargetName), util.toPointer(pCredmanCredentialType), util.toPointer(ppszCredmanTargetName), util.toPointer(ppszCredmanUserName), util.toPointer(ppCredentialBlob), util.toPointer(pCredentialBlobSize));
}

export function SspiEncryptAuthIdentity(
  AuthData: Deno.PointerValue | Uint8Array /* ptr */,
): Deno.PointerValue /* Windows.Win32.Foundation.HRESULT */ {
  return libSECUR32_dll.SspiEncryptAuthIdentity(util.toPointer(AuthData));
}

export function SspiEncryptAuthIdentityEx(
  Options: number /* u32 */,
  AuthData: Deno.PointerValue | Uint8Array /* ptr */,
): Deno.PointerValue /* Windows.Win32.Foundation.HRESULT */ {
  return libSspiCli_dll.SspiEncryptAuthIdentityEx(Options, util.toPointer(AuthData));
}

export function SspiDecryptAuthIdentity(
  EncryptedAuthData: Deno.PointerValue | Uint8Array /* ptr */,
): Deno.PointerValue /* Windows.Win32.Foundation.HRESULT */ {
  return libSECUR32_dll.SspiDecryptAuthIdentity(util.toPointer(EncryptedAuthData));
}

export function SspiDecryptAuthIdentityEx(
  Options: number /* u32 */,
  EncryptedAuthData: Deno.PointerValue | Uint8Array /* ptr */,
): Deno.PointerValue /* Windows.Win32.Foundation.HRESULT */ {
  return libSspiCli_dll.SspiDecryptAuthIdentityEx(Options, util.toPointer(EncryptedAuthData));
}

export function SspiIsAuthIdentityEncrypted(
  EncryptedAuthData: Deno.PointerValue | Uint8Array /* ptr */,
): Deno.PointerValue /* Windows.Win32.Foundation.BOOLEAN */ {
  return libSECUR32_dll.SspiIsAuthIdentityEncrypted(util.toPointer(EncryptedAuthData));
}

export function SspiEncodeAuthIdentityAsStrings(
  pAuthIdentity: Deno.PointerValue | Uint8Array /* ptr */,
  ppszUserName: Deno.PointerValue | Uint8Array /* ptr */,
  ppszDomainName: Deno.PointerValue | Uint8Array /* ptr */,
  ppszPackedCredentialsString: Deno.PointerValue | Uint8Array /* ptr */,
): Deno.PointerValue /* Windows.Win32.Foundation.HRESULT */ {
  return libSECUR32_dll.SspiEncodeAuthIdentityAsStrings(util.toPointer(pAuthIdentity), util.toPointer(ppszUserName), util.toPointer(ppszDomainName), util.toPointer(ppszPackedCredentialsString));
}

export function SspiValidateAuthIdentity(
  AuthData: Deno.PointerValue | Uint8Array /* ptr */,
): Deno.PointerValue /* Windows.Win32.Foundation.HRESULT */ {
  return libSECUR32_dll.SspiValidateAuthIdentity(util.toPointer(AuthData));
}

export function SspiCopyAuthIdentity(
  AuthData: Deno.PointerValue | Uint8Array /* ptr */,
  AuthDataCopy: Deno.PointerValue | Uint8Array /* ptr */,
): Deno.PointerValue /* Windows.Win32.Foundation.HRESULT */ {
  return libSECUR32_dll.SspiCopyAuthIdentity(util.toPointer(AuthData), util.toPointer(AuthDataCopy));
}

export function SspiFreeAuthIdentity(
  AuthData: Deno.PointerValue | Uint8Array /* ptr */,
): void /* void */ {
  return libSECUR32_dll.SspiFreeAuthIdentity(util.toPointer(AuthData));
}

export function SspiZeroAuthIdentity(
  AuthData: Deno.PointerValue | Uint8Array /* ptr */,
): void /* void */ {
  return libSECUR32_dll.SspiZeroAuthIdentity(util.toPointer(AuthData));
}

export function SspiLocalFree(
  DataBuffer: Deno.PointerValue | Uint8Array /* ptr */,
): void /* void */ {
  return libSECUR32_dll.SspiLocalFree(util.toPointer(DataBuffer));
}

export function SspiEncodeStringsAsAuthIdentity(
  pszUserName: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  pszDomainName: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  pszPackedCredentialsString: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  ppAuthIdentity: Deno.PointerValue | Uint8Array /* ptr */,
): Deno.PointerValue /* Windows.Win32.Foundation.HRESULT */ {
  return libSECUR32_dll.SspiEncodeStringsAsAuthIdentity(util.pwstrToFfi(pszUserName), util.pwstrToFfi(pszDomainName), util.pwstrToFfi(pszPackedCredentialsString), util.toPointer(ppAuthIdentity));
}

export function SspiCompareAuthIdentities(
  AuthIdentity1: Deno.PointerValue | Uint8Array /* ptr */,
  AuthIdentity2: Deno.PointerValue | Uint8Array /* ptr */,
  SameSuppliedUser: Deno.PointerValue | Uint8Array /* ptr */,
  SameSuppliedIdentity: Deno.PointerValue | Uint8Array /* ptr */,
): Deno.PointerValue /* Windows.Win32.Foundation.HRESULT */ {
  return libSECUR32_dll.SspiCompareAuthIdentities(util.toPointer(AuthIdentity1), util.toPointer(AuthIdentity2), util.toPointer(SameSuppliedUser), util.toPointer(SameSuppliedIdentity));
}

export function SspiMarshalAuthIdentity(
  AuthIdentity: Deno.PointerValue | Uint8Array /* ptr */,
  AuthIdentityLength: Deno.PointerValue | Uint8Array /* ptr */,
  AuthIdentityByteArray: Deno.PointerValue | Uint8Array /* ptr */,
): Deno.PointerValue /* Windows.Win32.Foundation.HRESULT */ {
  return libSECUR32_dll.SspiMarshalAuthIdentity(util.toPointer(AuthIdentity), util.toPointer(AuthIdentityLength), util.toPointer(AuthIdentityByteArray));
}

export function SspiUnmarshalAuthIdentity(
  AuthIdentityLength: number /* u32 */,
  AuthIdentityByteArray: string | null | Uint8Array /* Windows.Win32.Foundation.PSTR */,
  ppAuthIdentity: Deno.PointerValue | Uint8Array /* ptr */,
): Deno.PointerValue /* Windows.Win32.Foundation.HRESULT */ {
  return libSECUR32_dll.SspiUnmarshalAuthIdentity(AuthIdentityLength, util.pstrToFfi(AuthIdentityByteArray), util.toPointer(ppAuthIdentity));
}

export function SspiIsPromptingNeeded(
  ErrorOrNtStatus: number /* u32 */,
): Deno.PointerValue /* Windows.Win32.Foundation.BOOLEAN */ {
  return libcredui_dll.SspiIsPromptingNeeded(ErrorOrNtStatus);
}

export function SspiGetTargetHostName(
  pszTargetName: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  pszHostName: Deno.PointerValue | Uint8Array /* ptr */,
): Deno.PointerValue /* Windows.Win32.Foundation.HRESULT */ {
  return libSECUR32_dll.SspiGetTargetHostName(util.pwstrToFfi(pszTargetName), util.toPointer(pszHostName));
}

export function SspiExcludePackage(
  AuthIdentity: Deno.PointerValue | Uint8Array /* ptr */,
  pszPackageName: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  ppNewAuthIdentity: Deno.PointerValue | Uint8Array /* ptr */,
): Deno.PointerValue /* Windows.Win32.Foundation.HRESULT */ {
  return libSECUR32_dll.SspiExcludePackage(util.toPointer(AuthIdentity), util.pwstrToFfi(pszPackageName), util.toPointer(ppNewAuthIdentity));
}

export function AddSecurityPackageA(
  pszPackageName: string | null | Uint8Array /* Windows.Win32.Foundation.PSTR */,
  pOptions: Deno.PointerValue | Uint8Array /* ptr */,
): Deno.PointerValue /* Windows.Win32.Foundation.HRESULT */ {
  return libSECUR32_dll.AddSecurityPackageA(util.pstrToFfi(pszPackageName), util.toPointer(pOptions));
}

export function AddSecurityPackageW(
  pszPackageName: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  pOptions: Deno.PointerValue | Uint8Array /* ptr */,
): Deno.PointerValue /* Windows.Win32.Foundation.HRESULT */ {
  return libSECUR32_dll.AddSecurityPackageW(util.pwstrToFfi(pszPackageName), util.toPointer(pOptions));
}

export function DeleteSecurityPackageA(
  pszPackageName: string | null | Uint8Array /* Windows.Win32.Foundation.PSTR */,
): Deno.PointerValue /* Windows.Win32.Foundation.HRESULT */ {
  return libSECUR32_dll.DeleteSecurityPackageA(util.pstrToFfi(pszPackageName));
}

export function DeleteSecurityPackageW(
  pszPackageName: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
): Deno.PointerValue /* Windows.Win32.Foundation.HRESULT */ {
  return libSECUR32_dll.DeleteSecurityPackageW(util.pwstrToFfi(pszPackageName));
}

export function CredMarshalTargetInfo(
  InTargetInfo: Deno.PointerValue | Uint8Array /* ptr */,
  Buffer: Deno.PointerValue | Uint8Array /* ptr */,
  BufferSize: Deno.PointerValue | Uint8Array /* ptr */,
): Deno.PointerValue /* Windows.Win32.Foundation.NTSTATUS */ {
  return libSECUR32_dll.CredMarshalTargetInfo(util.toPointer(InTargetInfo), util.toPointer(Buffer), util.toPointer(BufferSize));
}

export function CredUnmarshalTargetInfo(
  Buffer: Deno.PointerValue | Uint8Array /* ptr */,
  BufferSize: number /* u32 */,
  RetTargetInfo: Deno.PointerValue | Uint8Array /* ptr */,
  RetActualSize: Deno.PointerValue | Uint8Array /* ptr */,
): Deno.PointerValue /* Windows.Win32.Foundation.NTSTATUS */ {
  return libSECUR32_dll.CredUnmarshalTargetInfo(util.toPointer(Buffer), BufferSize, util.toPointer(RetTargetInfo), util.toPointer(RetActualSize));
}

export function SslEmptyCacheA(
  pszTargetName: string | null | Uint8Array /* Windows.Win32.Foundation.PSTR */,
  dwFlags: number /* u32 */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libSCHANNEL_dll.SslEmptyCacheA(util.pstrToFfi(pszTargetName), dwFlags));
}

export function SslEmptyCacheW(
  pszTargetName: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  dwFlags: number /* u32 */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libSCHANNEL_dll.SslEmptyCacheW(util.pwstrToFfi(pszTargetName), dwFlags));
}

export function SslGenerateRandomBits(
  pRandomData: Deno.PointerValue | Uint8Array /* ptr */,
  cRandomData: number /* i32 */,
): void /* void */ {
  return libSCHANNEL_dll.SslGenerateRandomBits(util.toPointer(pRandomData), cRandomData);
}

export function SslCrackCertificate(
  pbCertificate: Deno.PointerValue | Uint8Array /* ptr */,
  cbCertificate: number /* u32 */,
  dwFlags: number /* u32 */,
  ppCertificate: Deno.PointerValue | Uint8Array /* ptr */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libSCHANNEL_dll.SslCrackCertificate(util.toPointer(pbCertificate), cbCertificate, dwFlags, util.toPointer(ppCertificate)));
}

export function SslFreeCertificate(
  pCertificate: Deno.PointerValue | Uint8Array /* ptr */,
): void /* void */ {
  return libSCHANNEL_dll.SslFreeCertificate(util.toPointer(pCertificate));
}

export function SslGetMaximumKeySize(
  Reserved: number /* u32 */,
): number /* u32 */ {
  return libSCHANNEL_dll.SslGetMaximumKeySize(Reserved);
}

export function SslGetServerIdentity(
  ClientHello: Deno.PointerValue | Uint8Array /* ptr */,
  ClientHelloSize: number /* u32 */,
  ServerIdentity: Deno.PointerValue | Uint8Array /* ptr */,
  ServerIdentitySize: Deno.PointerValue | Uint8Array /* ptr */,
  Flags: number /* u32 */,
): Deno.PointerValue /* Windows.Win32.Foundation.HRESULT */ {
  return libSCHANNEL_dll.SslGetServerIdentity(util.toPointer(ClientHello), ClientHelloSize, util.toPointer(ServerIdentity), util.toPointer(ServerIdentitySize), Flags);
}

export function SslGetExtensions(
  clientHello: Deno.PointerValue | Uint8Array /* ptr */,
  clientHelloByteSize: number /* u32 */,
  genericExtensions: Deno.PointerValue | Uint8Array /* ptr */,
  genericExtensionsCount: number /* u8 */,
  bytesToRead: Deno.PointerValue | Uint8Array /* ptr */,
  flags: SchGetExtensionsOptions /* Windows.Win32.Security.Authentication.Identity.SchGetExtensionsOptions */,
): Deno.PointerValue /* Windows.Win32.Foundation.HRESULT */ {
  return libSCHANNEL_dll.SslGetExtensions(util.toPointer(clientHello), clientHelloByteSize, util.toPointer(genericExtensions), genericExtensionsCount, util.toPointer(bytesToRead), flags);
}

export function TokenBindingGenerateBinding(
  keyType: TOKENBINDING_KEY_PARAMETERS_TYPE /* Windows.Win32.Security.Authentication.Identity.TOKENBINDING_KEY_PARAMETERS_TYPE */,
  targetURL: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  bindingType: TOKENBINDING_TYPE /* Windows.Win32.Security.Authentication.Identity.TOKENBINDING_TYPE */,
  tlsEKM: Deno.PointerValue | Uint8Array /* ptr */,
  tlsEKMSize: number /* u32 */,
  extensionFormat: TOKENBINDING_EXTENSION_FORMAT /* Windows.Win32.Security.Authentication.Identity.TOKENBINDING_EXTENSION_FORMAT */,
  extensionData: Deno.PointerValue | Uint8Array /* ptr */,
  tokenBinding: Deno.PointerValue | Uint8Array /* ptr */,
  tokenBindingSize: Deno.PointerValue | Uint8Array /* ptr */,
  resultData: Deno.PointerValue | Uint8Array /* ptr */,
): Deno.PointerValue /* Windows.Win32.Foundation.HRESULT */ {
  return libTOKENBINDING_dll.TokenBindingGenerateBinding(keyType, util.pwstrToFfi(targetURL), bindingType, util.toPointer(tlsEKM), tlsEKMSize, extensionFormat, util.toPointer(extensionData), util.toPointer(tokenBinding), util.toPointer(tokenBindingSize), util.toPointer(resultData));
}

export function TokenBindingGenerateMessage(
  tokenBindings: Deno.PointerValue | Uint8Array /* ptr */,
  tokenBindingsSize: Deno.PointerValue | Uint8Array /* ptr */,
  tokenBindingsCount: number /* u32 */,
  tokenBindingMessage: Deno.PointerValue | Uint8Array /* ptr */,
  tokenBindingMessageSize: Deno.PointerValue | Uint8Array /* ptr */,
): Deno.PointerValue /* Windows.Win32.Foundation.HRESULT */ {
  return libTOKENBINDING_dll.TokenBindingGenerateMessage(util.toPointer(tokenBindings), util.toPointer(tokenBindingsSize), tokenBindingsCount, util.toPointer(tokenBindingMessage), util.toPointer(tokenBindingMessageSize));
}

export function TokenBindingVerifyMessage(
  tokenBindingMessage: Deno.PointerValue | Uint8Array /* ptr */,
  tokenBindingMessageSize: number /* u32 */,
  keyType: TOKENBINDING_KEY_PARAMETERS_TYPE /* Windows.Win32.Security.Authentication.Identity.TOKENBINDING_KEY_PARAMETERS_TYPE */,
  tlsEKM: Deno.PointerValue | Uint8Array /* ptr */,
  tlsEKMSize: number /* u32 */,
  resultList: Deno.PointerValue | Uint8Array /* ptr */,
): Deno.PointerValue /* Windows.Win32.Foundation.HRESULT */ {
  return libTOKENBINDING_dll.TokenBindingVerifyMessage(util.toPointer(tokenBindingMessage), tokenBindingMessageSize, keyType, util.toPointer(tlsEKM), tlsEKMSize, util.toPointer(resultList));
}

export function TokenBindingGetKeyTypesClient(
  keyTypes: Deno.PointerValue | Uint8Array /* ptr */,
): Deno.PointerValue /* Windows.Win32.Foundation.HRESULT */ {
  return libTOKENBINDING_dll.TokenBindingGetKeyTypesClient(util.toPointer(keyTypes));
}

export function TokenBindingGetKeyTypesServer(
  keyTypes: Deno.PointerValue | Uint8Array /* ptr */,
): Deno.PointerValue /* Windows.Win32.Foundation.HRESULT */ {
  return libTOKENBINDING_dll.TokenBindingGetKeyTypesServer(util.toPointer(keyTypes));
}

export function TokenBindingDeleteBinding(
  targetURL: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
): Deno.PointerValue /* Windows.Win32.Foundation.HRESULT */ {
  return libTOKENBINDING_dll.TokenBindingDeleteBinding(util.pwstrToFfi(targetURL));
}

export function TokenBindingDeleteAllBindings(): Deno.PointerValue /* Windows.Win32.Foundation.HRESULT */ {
  return libTOKENBINDING_dll.TokenBindingDeleteAllBindings();
}

export function TokenBindingGenerateID(
  keyType: TOKENBINDING_KEY_PARAMETERS_TYPE /* Windows.Win32.Security.Authentication.Identity.TOKENBINDING_KEY_PARAMETERS_TYPE */,
  publicKey: Deno.PointerValue | Uint8Array /* ptr */,
  publicKeySize: number /* u32 */,
  resultData: Deno.PointerValue | Uint8Array /* ptr */,
): Deno.PointerValue /* Windows.Win32.Foundation.HRESULT */ {
  return libTOKENBINDING_dll.TokenBindingGenerateID(keyType, util.toPointer(publicKey), publicKeySize, util.toPointer(resultData));
}

export function TokenBindingGenerateIDForUri(
  keyType: TOKENBINDING_KEY_PARAMETERS_TYPE /* Windows.Win32.Security.Authentication.Identity.TOKENBINDING_KEY_PARAMETERS_TYPE */,
  targetUri: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  resultData: Deno.PointerValue | Uint8Array /* ptr */,
): Deno.PointerValue /* Windows.Win32.Foundation.HRESULT */ {
  return libTOKENBINDING_dll.TokenBindingGenerateIDForUri(keyType, util.pwstrToFfi(targetUri), util.toPointer(resultData));
}

export function TokenBindingGetHighestSupportedVersion(
  majorVersion: Deno.PointerValue | Uint8Array /* ptr */,
  minorVersion: Deno.PointerValue | Uint8Array /* ptr */,
): Deno.PointerValue /* Windows.Win32.Foundation.HRESULT */ {
  return libTOKENBINDING_dll.TokenBindingGetHighestSupportedVersion(util.toPointer(majorVersion), util.toPointer(minorVersion));
}

export function GetUserNameExA(
  NameFormat: EXTENDED_NAME_FORMAT /* Windows.Win32.Security.Authentication.Identity.EXTENDED_NAME_FORMAT */,
  lpNameBuffer: string | null | Uint8Array /* Windows.Win32.Foundation.PSTR */,
  nSize: Deno.PointerValue | Uint8Array /* ptr */,
): Deno.PointerValue /* Windows.Win32.Foundation.BOOLEAN */ {
  return libSECUR32_dll.GetUserNameExA(NameFormat, util.pstrToFfi(lpNameBuffer), util.toPointer(nSize));
}

export function GetUserNameExW(
  NameFormat: EXTENDED_NAME_FORMAT /* Windows.Win32.Security.Authentication.Identity.EXTENDED_NAME_FORMAT */,
  lpNameBuffer: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  nSize: Deno.PointerValue | Uint8Array /* ptr */,
): Deno.PointerValue /* Windows.Win32.Foundation.BOOLEAN */ {
  return libSECUR32_dll.GetUserNameExW(NameFormat, util.pwstrToFfi(lpNameBuffer), util.toPointer(nSize));
}

export function GetComputerObjectNameA(
  NameFormat: EXTENDED_NAME_FORMAT /* Windows.Win32.Security.Authentication.Identity.EXTENDED_NAME_FORMAT */,
  lpNameBuffer: string | null | Uint8Array /* Windows.Win32.Foundation.PSTR */,
  nSize: Deno.PointerValue | Uint8Array /* ptr */,
): Deno.PointerValue /* Windows.Win32.Foundation.BOOLEAN */ {
  return libSECUR32_dll.GetComputerObjectNameA(NameFormat, util.pstrToFfi(lpNameBuffer), util.toPointer(nSize));
}

export function GetComputerObjectNameW(
  NameFormat: EXTENDED_NAME_FORMAT /* Windows.Win32.Security.Authentication.Identity.EXTENDED_NAME_FORMAT */,
  lpNameBuffer: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  nSize: Deno.PointerValue | Uint8Array /* ptr */,
): Deno.PointerValue /* Windows.Win32.Foundation.BOOLEAN */ {
  return libSECUR32_dll.GetComputerObjectNameW(NameFormat, util.pwstrToFfi(lpNameBuffer), util.toPointer(nSize));
}

export function TranslateNameA(
  lpAccountName: string | null | Uint8Array /* Windows.Win32.Foundation.PSTR */,
  AccountNameFormat: EXTENDED_NAME_FORMAT /* Windows.Win32.Security.Authentication.Identity.EXTENDED_NAME_FORMAT */,
  DesiredNameFormat: EXTENDED_NAME_FORMAT /* Windows.Win32.Security.Authentication.Identity.EXTENDED_NAME_FORMAT */,
  lpTranslatedName: string | null | Uint8Array /* Windows.Win32.Foundation.PSTR */,
  nSize: Deno.PointerValue | Uint8Array /* ptr */,
): Deno.PointerValue /* Windows.Win32.Foundation.BOOLEAN */ {
  return libSECUR32_dll.TranslateNameA(util.pstrToFfi(lpAccountName), AccountNameFormat, DesiredNameFormat, util.pstrToFfi(lpTranslatedName), util.toPointer(nSize));
}

export function TranslateNameW(
  lpAccountName: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  AccountNameFormat: EXTENDED_NAME_FORMAT /* Windows.Win32.Security.Authentication.Identity.EXTENDED_NAME_FORMAT */,
  DesiredNameFormat: EXTENDED_NAME_FORMAT /* Windows.Win32.Security.Authentication.Identity.EXTENDED_NAME_FORMAT */,
  lpTranslatedName: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  nSize: Deno.PointerValue | Uint8Array /* ptr */,
): Deno.PointerValue /* Windows.Win32.Foundation.BOOLEAN */ {
  return libSECUR32_dll.TranslateNameW(util.pwstrToFfi(lpAccountName), AccountNameFormat, DesiredNameFormat, util.pwstrToFfi(lpTranslatedName), util.toPointer(nSize));
}

export function SLOpen(
  phSLC: Deno.PointerValue | Uint8Array /* ptr */,
): Deno.PointerValue /* Windows.Win32.Foundation.HRESULT */ {
  return libSLC_dll.SLOpen(util.toPointer(phSLC));
}

export function SLClose(
  hSLC: Deno.PointerValue | Uint8Array /* ptr */,
): Deno.PointerValue /* Windows.Win32.Foundation.HRESULT */ {
  return libSLC_dll.SLClose(util.toPointer(hSLC));
}

export function SLInstallProofOfPurchase(
  hSLC: Deno.PointerValue | Uint8Array /* ptr */,
  pwszPKeyAlgorithm: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  pwszPKeyString: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  cbPKeySpecificData: number /* u32 */,
  pbPKeySpecificData: Deno.PointerValue | Uint8Array /* ptr */,
  pPkeyId: Deno.PointerValue | Uint8Array /* ptr */,
): Deno.PointerValue /* Windows.Win32.Foundation.HRESULT */ {
  return libSLC_dll.SLInstallProofOfPurchase(util.toPointer(hSLC), util.pwstrToFfi(pwszPKeyAlgorithm), util.pwstrToFfi(pwszPKeyString), cbPKeySpecificData, util.toPointer(pbPKeySpecificData), util.toPointer(pPkeyId));
}

export function SLUninstallProofOfPurchase(
  hSLC: Deno.PointerValue | Uint8Array /* ptr */,
  pPKeyId: Deno.PointerValue | Uint8Array /* ptr */,
): Deno.PointerValue /* Windows.Win32.Foundation.HRESULT */ {
  return libSLC_dll.SLUninstallProofOfPurchase(util.toPointer(hSLC), util.toPointer(pPKeyId));
}

export function SLInstallLicense(
  hSLC: Deno.PointerValue | Uint8Array /* ptr */,
  cbLicenseBlob: number /* u32 */,
  pbLicenseBlob: Deno.PointerValue | Uint8Array /* ptr */,
  pLicenseFileId: Deno.PointerValue | Uint8Array /* ptr */,
): Deno.PointerValue /* Windows.Win32.Foundation.HRESULT */ {
  return libSLC_dll.SLInstallLicense(util.toPointer(hSLC), cbLicenseBlob, util.toPointer(pbLicenseBlob), util.toPointer(pLicenseFileId));
}

export function SLUninstallLicense(
  hSLC: Deno.PointerValue | Uint8Array /* ptr */,
  pLicenseFileId: Deno.PointerValue | Uint8Array /* ptr */,
): Deno.PointerValue /* Windows.Win32.Foundation.HRESULT */ {
  return libSLC_dll.SLUninstallLicense(util.toPointer(hSLC), util.toPointer(pLicenseFileId));
}

export function SLConsumeRight(
  hSLC: Deno.PointerValue | Uint8Array /* ptr */,
  pAppId: Deno.PointerValue | Uint8Array /* ptr */,
  pProductSkuId: Deno.PointerValue | Uint8Array /* ptr */,
  pwszRightName: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  pvReserved: Deno.PointerValue | Uint8Array /* ptr */,
): Deno.PointerValue /* Windows.Win32.Foundation.HRESULT */ {
  return libSLC_dll.SLConsumeRight(util.toPointer(hSLC), util.toPointer(pAppId), util.toPointer(pProductSkuId), util.pwstrToFfi(pwszRightName), util.toPointer(pvReserved));
}

export function SLGetProductSkuInformation(
  hSLC: Deno.PointerValue | Uint8Array /* ptr */,
  pProductSkuId: Deno.PointerValue | Uint8Array /* ptr */,
  pwszValueName: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  peDataType: Deno.PointerValue | Uint8Array /* ptr */,
  pcbValue: Deno.PointerValue | Uint8Array /* ptr */,
  ppbValue: Deno.PointerValue | Uint8Array /* ptr */,
): Deno.PointerValue /* Windows.Win32.Foundation.HRESULT */ {
  return libSLC_dll.SLGetProductSkuInformation(util.toPointer(hSLC), util.toPointer(pProductSkuId), util.pwstrToFfi(pwszValueName), util.toPointer(peDataType), util.toPointer(pcbValue), util.toPointer(ppbValue));
}

export function SLGetPKeyInformation(
  hSLC: Deno.PointerValue | Uint8Array /* ptr */,
  pPKeyId: Deno.PointerValue | Uint8Array /* ptr */,
  pwszValueName: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  peDataType: Deno.PointerValue | Uint8Array /* ptr */,
  pcbValue: Deno.PointerValue | Uint8Array /* ptr */,
  ppbValue: Deno.PointerValue | Uint8Array /* ptr */,
): Deno.PointerValue /* Windows.Win32.Foundation.HRESULT */ {
  return libSLC_dll.SLGetPKeyInformation(util.toPointer(hSLC), util.toPointer(pPKeyId), util.pwstrToFfi(pwszValueName), util.toPointer(peDataType), util.toPointer(pcbValue), util.toPointer(ppbValue));
}

export function SLGetLicenseInformation(
  hSLC: Deno.PointerValue | Uint8Array /* ptr */,
  pSLLicenseId: Deno.PointerValue | Uint8Array /* ptr */,
  pwszValueName: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  peDataType: Deno.PointerValue | Uint8Array /* ptr */,
  pcbValue: Deno.PointerValue | Uint8Array /* ptr */,
  ppbValue: Deno.PointerValue | Uint8Array /* ptr */,
): Deno.PointerValue /* Windows.Win32.Foundation.HRESULT */ {
  return libSLC_dll.SLGetLicenseInformation(util.toPointer(hSLC), util.toPointer(pSLLicenseId), util.pwstrToFfi(pwszValueName), util.toPointer(peDataType), util.toPointer(pcbValue), util.toPointer(ppbValue));
}

export function SLGetLicensingStatusInformation(
  hSLC: Deno.PointerValue | Uint8Array /* ptr */,
  pAppID: Deno.PointerValue | Uint8Array /* ptr */,
  pProductSkuId: Deno.PointerValue | Uint8Array /* ptr */,
  pwszRightName: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  pnStatusCount: Deno.PointerValue | Uint8Array /* ptr */,
  ppLicensingStatus: Deno.PointerValue | Uint8Array /* ptr */,
): Deno.PointerValue /* Windows.Win32.Foundation.HRESULT */ {
  return libSLC_dll.SLGetLicensingStatusInformation(util.toPointer(hSLC), util.toPointer(pAppID), util.toPointer(pProductSkuId), util.pwstrToFfi(pwszRightName), util.toPointer(pnStatusCount), util.toPointer(ppLicensingStatus));
}

export function SLGetPolicyInformation(
  hSLC: Deno.PointerValue | Uint8Array /* ptr */,
  pwszValueName: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  peDataType: Deno.PointerValue | Uint8Array /* ptr */,
  pcbValue: Deno.PointerValue | Uint8Array /* ptr */,
  ppbValue: Deno.PointerValue | Uint8Array /* ptr */,
): Deno.PointerValue /* Windows.Win32.Foundation.HRESULT */ {
  return libSLC_dll.SLGetPolicyInformation(util.toPointer(hSLC), util.pwstrToFfi(pwszValueName), util.toPointer(peDataType), util.toPointer(pcbValue), util.toPointer(ppbValue));
}

export function SLGetPolicyInformationDWORD(
  hSLC: Deno.PointerValue | Uint8Array /* ptr */,
  pwszValueName: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  pdwValue: Deno.PointerValue | Uint8Array /* ptr */,
): Deno.PointerValue /* Windows.Win32.Foundation.HRESULT */ {
  return libSLC_dll.SLGetPolicyInformationDWORD(util.toPointer(hSLC), util.pwstrToFfi(pwszValueName), util.toPointer(pdwValue));
}

export function SLGetServiceInformation(
  hSLC: Deno.PointerValue | Uint8Array /* ptr */,
  pwszValueName: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  peDataType: Deno.PointerValue | Uint8Array /* ptr */,
  pcbValue: Deno.PointerValue | Uint8Array /* ptr */,
  ppbValue: Deno.PointerValue | Uint8Array /* ptr */,
): Deno.PointerValue /* Windows.Win32.Foundation.HRESULT */ {
  return libSLC_dll.SLGetServiceInformation(util.toPointer(hSLC), util.pwstrToFfi(pwszValueName), util.toPointer(peDataType), util.toPointer(pcbValue), util.toPointer(ppbValue));
}

export function SLGetApplicationInformation(
  hSLC: Deno.PointerValue | Uint8Array /* ptr */,
  pApplicationId: Deno.PointerValue | Uint8Array /* ptr */,
  pwszValueName: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  peDataType: Deno.PointerValue | Uint8Array /* ptr */,
  pcbValue: Deno.PointerValue | Uint8Array /* ptr */,
  ppbValue: Deno.PointerValue | Uint8Array /* ptr */,
): Deno.PointerValue /* Windows.Win32.Foundation.HRESULT */ {
  return libSLC_dll.SLGetApplicationInformation(util.toPointer(hSLC), util.toPointer(pApplicationId), util.pwstrToFfi(pwszValueName), util.toPointer(peDataType), util.toPointer(pcbValue), util.toPointer(ppbValue));
}

export function SLActivateProduct(
  hSLC: Deno.PointerValue | Uint8Array /* ptr */,
  pProductSkuId: Deno.PointerValue | Uint8Array /* ptr */,
  cbAppSpecificData: number /* u32 */,
  pvAppSpecificData: Deno.PointerValue | Uint8Array /* ptr */,
  pActivationInfo: Deno.PointerValue | Uint8Array /* ptr */,
  pwszProxyServer: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  wProxyPort: number /* u16 */,
): Deno.PointerValue /* Windows.Win32.Foundation.HRESULT */ {
  return libslcext_dll.SLActivateProduct(util.toPointer(hSLC), util.toPointer(pProductSkuId), cbAppSpecificData, util.toPointer(pvAppSpecificData), util.toPointer(pActivationInfo), util.pwstrToFfi(pwszProxyServer), wProxyPort);
}

export function SLGetServerStatus(
  pwszServerURL: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  pwszAcquisitionType: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  pwszProxyServer: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  wProxyPort: number /* u16 */,
  phrStatus: Deno.PointerValue | Uint8Array /* ptr */,
): Deno.PointerValue /* Windows.Win32.Foundation.HRESULT */ {
  return libslcext_dll.SLGetServerStatus(util.pwstrToFfi(pwszServerURL), util.pwstrToFfi(pwszAcquisitionType), util.pwstrToFfi(pwszProxyServer), wProxyPort, util.toPointer(phrStatus));
}

export function SLGenerateOfflineInstallationId(
  hSLC: Deno.PointerValue | Uint8Array /* ptr */,
  pProductSkuId: Deno.PointerValue | Uint8Array /* ptr */,
  ppwszInstallationId: Deno.PointerValue | Uint8Array /* ptr */,
): Deno.PointerValue /* Windows.Win32.Foundation.HRESULT */ {
  return libSLC_dll.SLGenerateOfflineInstallationId(util.toPointer(hSLC), util.toPointer(pProductSkuId), util.toPointer(ppwszInstallationId));
}

export function SLGenerateOfflineInstallationIdEx(
  hSLC: Deno.PointerValue | Uint8Array /* ptr */,
  pProductSkuId: Deno.PointerValue | Uint8Array /* ptr */,
  pActivationInfo: Deno.PointerValue | Uint8Array /* ptr */,
  ppwszInstallationId: Deno.PointerValue | Uint8Array /* ptr */,
): Deno.PointerValue /* Windows.Win32.Foundation.HRESULT */ {
  return libSLC_dll.SLGenerateOfflineInstallationIdEx(util.toPointer(hSLC), util.toPointer(pProductSkuId), util.toPointer(pActivationInfo), util.toPointer(ppwszInstallationId));
}

export function SLDepositOfflineConfirmationId(
  hSLC: Deno.PointerValue | Uint8Array /* ptr */,
  pProductSkuId: Deno.PointerValue | Uint8Array /* ptr */,
  pwszInstallationId: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  pwszConfirmationId: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
): Deno.PointerValue /* Windows.Win32.Foundation.HRESULT */ {
  return libSLC_dll.SLDepositOfflineConfirmationId(util.toPointer(hSLC), util.toPointer(pProductSkuId), util.pwstrToFfi(pwszInstallationId), util.pwstrToFfi(pwszConfirmationId));
}

export function SLDepositOfflineConfirmationIdEx(
  hSLC: Deno.PointerValue | Uint8Array /* ptr */,
  pProductSkuId: Deno.PointerValue | Uint8Array /* ptr */,
  pActivationInfo: Deno.PointerValue | Uint8Array /* ptr */,
  pwszInstallationId: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  pwszConfirmationId: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
): Deno.PointerValue /* Windows.Win32.Foundation.HRESULT */ {
  return libSLC_dll.SLDepositOfflineConfirmationIdEx(util.toPointer(hSLC), util.toPointer(pProductSkuId), util.toPointer(pActivationInfo), util.pwstrToFfi(pwszInstallationId), util.pwstrToFfi(pwszConfirmationId));
}

export function SLGetPKeyId(
  hSLC: Deno.PointerValue | Uint8Array /* ptr */,
  pwszPKeyAlgorithm: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  pwszPKeyString: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  cbPKeySpecificData: number /* u32 */,
  pbPKeySpecificData: Deno.PointerValue | Uint8Array /* ptr */,
  pPKeyId: Deno.PointerValue | Uint8Array /* ptr */,
): Deno.PointerValue /* Windows.Win32.Foundation.HRESULT */ {
  return libSLC_dll.SLGetPKeyId(util.toPointer(hSLC), util.pwstrToFfi(pwszPKeyAlgorithm), util.pwstrToFfi(pwszPKeyString), cbPKeySpecificData, util.toPointer(pbPKeySpecificData), util.toPointer(pPKeyId));
}

export function SLGetInstalledProductKeyIds(
  hSLC: Deno.PointerValue | Uint8Array /* ptr */,
  pProductSkuId: Deno.PointerValue | Uint8Array /* ptr */,
  pnProductKeyIds: Deno.PointerValue | Uint8Array /* ptr */,
  ppProductKeyIds: Deno.PointerValue | Uint8Array /* ptr */,
): Deno.PointerValue /* Windows.Win32.Foundation.HRESULT */ {
  return libSLC_dll.SLGetInstalledProductKeyIds(util.toPointer(hSLC), util.toPointer(pProductSkuId), util.toPointer(pnProductKeyIds), util.toPointer(ppProductKeyIds));
}

export function SLSetCurrentProductKey(
  hSLC: Deno.PointerValue | Uint8Array /* ptr */,
  pProductSkuId: Deno.PointerValue | Uint8Array /* ptr */,
  pProductKeyId: Deno.PointerValue | Uint8Array /* ptr */,
): Deno.PointerValue /* Windows.Win32.Foundation.HRESULT */ {
  return libSLC_dll.SLSetCurrentProductKey(util.toPointer(hSLC), util.toPointer(pProductSkuId), util.toPointer(pProductKeyId));
}

export function SLGetSLIDList(
  hSLC: Deno.PointerValue | Uint8Array /* ptr */,
  eQueryIdType: SLIDTYPE /* Windows.Win32.Security.Authentication.Identity.SLIDTYPE */,
  pQueryId: Deno.PointerValue | Uint8Array /* ptr */,
  eReturnIdType: SLIDTYPE /* Windows.Win32.Security.Authentication.Identity.SLIDTYPE */,
  pnReturnIds: Deno.PointerValue | Uint8Array /* ptr */,
  ppReturnIds: Deno.PointerValue | Uint8Array /* ptr */,
): Deno.PointerValue /* Windows.Win32.Foundation.HRESULT */ {
  return libSLC_dll.SLGetSLIDList(util.toPointer(hSLC), eQueryIdType, util.toPointer(pQueryId), eReturnIdType, util.toPointer(pnReturnIds), util.toPointer(ppReturnIds));
}

export function SLGetLicenseFileId(
  hSLC: Deno.PointerValue | Uint8Array /* ptr */,
  cbLicenseBlob: number /* u32 */,
  pbLicenseBlob: Deno.PointerValue | Uint8Array /* ptr */,
  pLicenseFileId: Deno.PointerValue | Uint8Array /* ptr */,
): Deno.PointerValue /* Windows.Win32.Foundation.HRESULT */ {
  return libSLC_dll.SLGetLicenseFileId(util.toPointer(hSLC), cbLicenseBlob, util.toPointer(pbLicenseBlob), util.toPointer(pLicenseFileId));
}

export function SLGetLicense(
  hSLC: Deno.PointerValue | Uint8Array /* ptr */,
  pLicenseFileId: Deno.PointerValue | Uint8Array /* ptr */,
  pcbLicenseFile: Deno.PointerValue | Uint8Array /* ptr */,
  ppbLicenseFile: Deno.PointerValue | Uint8Array /* ptr */,
): Deno.PointerValue /* Windows.Win32.Foundation.HRESULT */ {
  return libSLC_dll.SLGetLicense(util.toPointer(hSLC), util.toPointer(pLicenseFileId), util.toPointer(pcbLicenseFile), util.toPointer(ppbLicenseFile));
}

export function SLFireEvent(
  hSLC: Deno.PointerValue | Uint8Array /* ptr */,
  pwszEventId: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  pApplicationId: Deno.PointerValue | Uint8Array /* ptr */,
): Deno.PointerValue /* Windows.Win32.Foundation.HRESULT */ {
  return libSLC_dll.SLFireEvent(util.toPointer(hSLC), util.pwstrToFfi(pwszEventId), util.toPointer(pApplicationId));
}

export function SLRegisterEvent(
  hSLC: Deno.PointerValue | Uint8Array /* ptr */,
  pwszEventId: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  pApplicationId: Deno.PointerValue | Uint8Array /* ptr */,
  hEvent: Uint8Array | Deno.PointerValue /* Windows.Win32.Foundation.HANDLE */,
): Deno.PointerValue /* Windows.Win32.Foundation.HRESULT */ {
  return libSLC_dll.SLRegisterEvent(util.toPointer(hSLC), util.pwstrToFfi(pwszEventId), util.toPointer(pApplicationId), util.toPointer(hEvent));
}

export function SLUnregisterEvent(
  hSLC: Deno.PointerValue | Uint8Array /* ptr */,
  pwszEventId: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  pApplicationId: Deno.PointerValue | Uint8Array /* ptr */,
  hEvent: Uint8Array | Deno.PointerValue /* Windows.Win32.Foundation.HANDLE */,
): Deno.PointerValue /* Windows.Win32.Foundation.HRESULT */ {
  return libSLC_dll.SLUnregisterEvent(util.toPointer(hSLC), util.pwstrToFfi(pwszEventId), util.toPointer(pApplicationId), util.toPointer(hEvent));
}

export function SLGetWindowsInformation(
  pwszValueName: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  peDataType: Deno.PointerValue | Uint8Array /* ptr */,
  pcbValue: Deno.PointerValue | Uint8Array /* ptr */,
  ppbValue: Deno.PointerValue | Uint8Array /* ptr */,
): Deno.PointerValue /* Windows.Win32.Foundation.HRESULT */ {
  return libSLC_dll.SLGetWindowsInformation(util.pwstrToFfi(pwszValueName), util.toPointer(peDataType), util.toPointer(pcbValue), util.toPointer(ppbValue));
}

export function SLGetWindowsInformationDWORD(
  pwszValueName: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  pdwValue: Deno.PointerValue | Uint8Array /* ptr */,
): Deno.PointerValue /* Windows.Win32.Foundation.HRESULT */ {
  return libSLC_dll.SLGetWindowsInformationDWORD(util.pwstrToFfi(pwszValueName), util.toPointer(pdwValue));
}

export function SLIsGenuineLocal(
  pAppId: Deno.PointerValue | Uint8Array /* ptr */,
  pGenuineState: Deno.PointerValue | Uint8Array /* ptr */,
  pUIOptions: Deno.PointerValue | Uint8Array /* ptr */,
): Deno.PointerValue /* Windows.Win32.Foundation.HRESULT */ {
  return libSLWGA_dll.SLIsGenuineLocal(util.toPointer(pAppId), util.toPointer(pGenuineState), util.toPointer(pUIOptions));
}

export function SLAcquireGenuineTicket(
  ppTicketBlob: Deno.PointerValue | Uint8Array /* ptr */,
  pcbTicketBlob: Deno.PointerValue | Uint8Array /* ptr */,
  pwszTemplateId: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  pwszServerUrl: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  pwszClientToken: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
): Deno.PointerValue /* Windows.Win32.Foundation.HRESULT */ {
  return libslcext_dll.SLAcquireGenuineTicket(util.toPointer(ppTicketBlob), util.toPointer(pcbTicketBlob), util.pwstrToFfi(pwszTemplateId), util.pwstrToFfi(pwszServerUrl), util.pwstrToFfi(pwszClientToken));
}

export function SLSetGenuineInformation(
  pQueryId: Deno.PointerValue | Uint8Array /* ptr */,
  pwszValueName: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  eDataType: SLDATATYPE /* Windows.Win32.Security.Authentication.Identity.SLDATATYPE */,
  cbValue: number /* u32 */,
  pbValue: Deno.PointerValue | Uint8Array /* ptr */,
): Deno.PointerValue /* Windows.Win32.Foundation.HRESULT */ {
  return libSLC_dll.SLSetGenuineInformation(util.toPointer(pQueryId), util.pwstrToFfi(pwszValueName), eDataType, cbValue, util.toPointer(pbValue));
}

export function SLGetReferralInformation(
  hSLC: Deno.PointerValue | Uint8Array /* ptr */,
  eReferralType: SLREFERRALTYPE /* Windows.Win32.Security.Authentication.Identity.SLREFERRALTYPE */,
  pSkuOrAppId: Deno.PointerValue | Uint8Array /* ptr */,
  pwszValueName: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  ppwszValue: Deno.PointerValue | Uint8Array /* ptr */,
): Deno.PointerValue /* Windows.Win32.Foundation.HRESULT */ {
  return libslcext_dll.SLGetReferralInformation(util.toPointer(hSLC), eReferralType, util.toPointer(pSkuOrAppId), util.pwstrToFfi(pwszValueName), util.toPointer(ppwszValue));
}

export function SLGetGenuineInformation(
  pQueryId: Deno.PointerValue | Uint8Array /* ptr */,
  pwszValueName: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  peDataType: Deno.PointerValue | Uint8Array /* ptr */,
  pcbValue: Deno.PointerValue | Uint8Array /* ptr */,
  ppbValue: Deno.PointerValue | Uint8Array /* ptr */,
): Deno.PointerValue /* Windows.Win32.Foundation.HRESULT */ {
  return libSLC_dll.SLGetGenuineInformation(util.toPointer(pQueryId), util.pwstrToFfi(pwszValueName), util.toPointer(peDataType), util.toPointer(pcbValue), util.toPointer(ppbValue));
}

export function SLQueryLicenseValueFromApp(
  valueName: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  valueType: Deno.PointerValue | Uint8Array /* ptr */,
  dataBuffer: Deno.PointerValue | Uint8Array /* ptr */,
  dataSize: number /* u32 */,
  resultDataSize: Deno.PointerValue | Uint8Array /* ptr */,
): Deno.PointerValue /* Windows.Win32.Foundation.HRESULT */ {
  return libapi_ms_win_core_slapi_l1_1_0_dll.SLQueryLicenseValueFromApp(util.pwstrToFfi(valueName), util.toPointer(valueType), util.toPointer(dataBuffer), dataSize, util.toPointer(resultDataSize));
}

