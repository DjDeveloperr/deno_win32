/// Auto-generated by Deno Win32: Windows.Win32.Security.DiagnosticDataQuery.Apis

import * as util from "../../util.ts";

// Enums
export type DdqAccessLevel = number;

// Constants
export const NoData = 0;
export const CurrentUserData = 1;
export const AllUserData = 2;

// Structs

export type PWSTR = Deno.PointerValue | Uint8Array;

export type BOOL = number;

/**
 * Windows.Win32.Security.DiagnosticDataQuery.DIAGNOSTIC_DATA_RECORD (size: 104)
 */
export interface DIAGNOSTIC_DATA_RECORD {
  /** i64 */
  rowId: Deno.PointerValue;
  /** u64 */
  timestamp: Deno.PointerValue;
  /** u64 */
  eventKeywords: Deno.PointerValue;
  /** Windows.Win32.Foundation.PWSTR */
  fullEventName: string | null | Uint8Array | Uint16Array;
  /** Windows.Win32.Foundation.PWSTR */
  providerGroupGuid: string | null | Uint8Array | Uint16Array;
  /** Windows.Win32.Foundation.PWSTR */
  producerName: string | null | Uint8Array | Uint16Array;
  /** ptr */
  privacyTags: Deno.PointerValue | Uint8Array;
  /** u32 */
  privacyTagCount: number;
  /** ptr */
  categoryIds: Deno.PointerValue | Uint8Array;
  /** u32 */
  categoryIdCount: number;
  /** Windows.Win32.Foundation.BOOL */
  isCoreData: boolean;
  /** Windows.Win32.Foundation.PWSTR */
  extra1: string | null | Uint8Array | Uint16Array;
  /** Windows.Win32.Foundation.PWSTR */
  extra2: string | null | Uint8Array | Uint16Array;
  /** Windows.Win32.Foundation.PWSTR */
  extra3: string | null | Uint8Array | Uint16Array;
}

export const sizeofDIAGNOSTIC_DATA_RECORD = 104;

export function allocDIAGNOSTIC_DATA_RECORD(data?: Partial<DIAGNOSTIC_DATA_RECORD>): Uint8Array {
  const buf = new Uint8Array(sizeofDIAGNOSTIC_DATA_RECORD);
  const view = new DataView(buf.buffer);
  // 0x00: i64
  if (data?.rowId !== undefined) view.setBigInt64(0, BigInt(data.rowId), true);
  // 0x08: u64
  if (data?.timestamp !== undefined) view.setBigUint64(8, BigInt(data.timestamp), true);
  // 0x10: u64
  if (data?.eventKeywords !== undefined) view.setBigUint64(16, BigInt(data.eventKeywords), true);
  // 0x18: buffer
  if (data?.fullEventName !== undefined) {
    (buf as any)._f24 = util.pwstrToFfi(data.fullEventName);
    view.setBigUint64(24, (buf as any)._f24 === null ? 0n : BigInt(Deno.UnsafePointer.value(Deno.UnsafePointer.of((buf as any)._f24))), true);
  }
  // 0x20: buffer
  if (data?.providerGroupGuid !== undefined) {
    (buf as any)._f32 = util.pwstrToFfi(data.providerGroupGuid);
    view.setBigUint64(32, (buf as any)._f32 === null ? 0n : BigInt(Deno.UnsafePointer.value(Deno.UnsafePointer.of((buf as any)._f32))), true);
  }
  // 0x28: buffer
  if (data?.producerName !== undefined) {
    (buf as any)._f40 = util.pwstrToFfi(data.producerName);
    view.setBigUint64(40, (buf as any)._f40 === null ? 0n : BigInt(Deno.UnsafePointer.value(Deno.UnsafePointer.of((buf as any)._f40))), true);
  }
  // 0x30: pointer
  if (data?.privacyTags !== undefined) view.setBigUint64(48, data.privacyTags === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.privacyTags))), true);
  // 0x38: u32
  if (data?.privacyTagCount !== undefined) view.setUint32(56, Number(data.privacyTagCount), true);
  // 0x3c: pad4
  // 0x40: pointer
  if (data?.categoryIds !== undefined) view.setBigUint64(64, data.categoryIds === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.categoryIds))), true);
  // 0x48: u32
  if (data?.categoryIdCount !== undefined) view.setUint32(72, Number(data.categoryIdCount), true);
  // 0x4c: i32
  if (data?.isCoreData !== undefined) view.setInt32(76, Number(data.isCoreData), true);
  // 0x50: buffer
  if (data?.extra1 !== undefined) {
    (buf as any)._f80 = util.pwstrToFfi(data.extra1);
    view.setBigUint64(80, (buf as any)._f80 === null ? 0n : BigInt(Deno.UnsafePointer.value(Deno.UnsafePointer.of((buf as any)._f80))), true);
  }
  // 0x58: buffer
  if (data?.extra2 !== undefined) {
    (buf as any)._f88 = util.pwstrToFfi(data.extra2);
    view.setBigUint64(88, (buf as any)._f88 === null ? 0n : BigInt(Deno.UnsafePointer.value(Deno.UnsafePointer.of((buf as any)._f88))), true);
  }
  // 0x60: buffer
  if (data?.extra3 !== undefined) {
    (buf as any)._f96 = util.pwstrToFfi(data.extra3);
    view.setBigUint64(96, (buf as any)._f96 === null ? 0n : BigInt(Deno.UnsafePointer.value(Deno.UnsafePointer.of((buf as any)._f96))), true);
  }
  return buf;
}

export class DIAGNOSTIC_DATA_RECORDView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: i64
  get rowId(): Deno.PointerValue {
    return Number(this.view.getBigInt64(0, true));
  }

  // 0x08: u64
  get timestamp(): Deno.PointerValue {
    return Number(this.view.getBigUint64(8, true));
  }

  // 0x10: u64
  get eventKeywords(): Deno.PointerValue {
    return Number(this.view.getBigUint64(16, true));
  }

  // 0x18: buffer
  get fullEventName(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(24, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x20: buffer
  get providerGroupGuid(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(32, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x28: buffer
  get producerName(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(40, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x30: pointer
  get privacyTags(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(48, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x38: u32
  get privacyTagCount(): number {
    return this.view.getUint32(56, true);
  }

  // 0x3c: pad4

  // 0x40: pointer
  get categoryIds(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(64, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x48: u32
  get categoryIdCount(): number {
    return this.view.getUint32(72, true);
  }

  // 0x4c: i32
  get isCoreData(): number {
    return this.view.getInt32(76, true);
  }

  // 0x50: buffer
  get extra1(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(80, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x58: buffer
  get extra2(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(88, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x60: buffer
  get extra3(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(96, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: i64
  set rowId(value: Deno.PointerValue) {
    this.view.setBigInt64(0, BigInt(value), true);
  }

  // 0x08: u64
  set timestamp(value: Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(value), true);
  }

  // 0x10: u64
  set eventKeywords(value: Deno.PointerValue) {
    this.view.setBigUint64(16, BigInt(value), true);
  }

  // 0x18: buffer
  set fullEventName(value: Uint8Array | Deno.PointerValue) {
    (this.buf as any)._f24 = value;
    this.view.setBigUint64(24, BigInt(Deno.UnsafePointer.value(util.toPointer((this.buf as any)._f24))), true);
  }

  // 0x20: buffer
  set providerGroupGuid(value: Uint8Array | Deno.PointerValue) {
    (this.buf as any)._f32 = value;
    this.view.setBigUint64(32, BigInt(Deno.UnsafePointer.value(util.toPointer((this.buf as any)._f32))), true);
  }

  // 0x28: buffer
  set producerName(value: Uint8Array | Deno.PointerValue) {
    (this.buf as any)._f40 = value;
    this.view.setBigUint64(40, BigInt(Deno.UnsafePointer.value(util.toPointer((this.buf as any)._f40))), true);
  }

  // 0x30: pointer
  set privacyTags(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(48, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x38: u32
  set privacyTagCount(value: number) {
    this.view.setUint32(56, value, true);
  }

  // 0x3c: pad4

  // 0x40: pointer
  set categoryIds(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(64, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x48: u32
  set categoryIdCount(value: number) {
    this.view.setUint32(72, value, true);
  }

  // 0x4c: i32
  set isCoreData(value: number) {
    this.view.setInt32(76, value, true);
  }

  // 0x50: buffer
  set extra1(value: Uint8Array | Deno.PointerValue) {
    (this.buf as any)._f80 = value;
    this.view.setBigUint64(80, BigInt(Deno.UnsafePointer.value(util.toPointer((this.buf as any)._f80))), true);
  }

  // 0x58: buffer
  set extra2(value: Uint8Array | Deno.PointerValue) {
    (this.buf as any)._f88 = value;
    this.view.setBigUint64(88, BigInt(Deno.UnsafePointer.value(util.toPointer((this.buf as any)._f88))), true);
  }

  // 0x60: buffer
  set extra3(value: Uint8Array | Deno.PointerValue) {
    (this.buf as any)._f96 = value;
    this.view.setBigUint64(96, BigInt(Deno.UnsafePointer.value(util.toPointer((this.buf as any)._f96))), true);
  }
}

/**
 * Windows.Win32.Security.DiagnosticDataQuery.DIAGNOSTIC_DATA_SEARCH_CRITERIA (size: 56)
 */
export interface DIAGNOSTIC_DATA_SEARCH_CRITERIA {
  /** ptr */
  producerNames: Deno.PointerValue | Uint8Array;
  /** u32 */
  producerNameCount: number;
  /** Windows.Win32.Foundation.PWSTR */
  textToMatch: string | null | Uint8Array | Uint16Array;
  /** ptr */
  categoryIds: Deno.PointerValue | Uint8Array;
  /** u32 */
  categoryIdCount: number;
  /** ptr */
  privacyTags: Deno.PointerValue | Uint8Array;
  /** u32 */
  privacyTagCount: number;
  /** Windows.Win32.Foundation.BOOL */
  coreDataOnly: boolean;
}

export const sizeofDIAGNOSTIC_DATA_SEARCH_CRITERIA = 56;

export function allocDIAGNOSTIC_DATA_SEARCH_CRITERIA(data?: Partial<DIAGNOSTIC_DATA_SEARCH_CRITERIA>): Uint8Array {
  const buf = new Uint8Array(sizeofDIAGNOSTIC_DATA_SEARCH_CRITERIA);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.producerNames !== undefined) view.setBigUint64(0, data.producerNames === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.producerNames))), true);
  // 0x08: u32
  if (data?.producerNameCount !== undefined) view.setUint32(8, Number(data.producerNameCount), true);
  // 0x0c: pad4
  // 0x10: buffer
  if (data?.textToMatch !== undefined) {
    (buf as any)._f16 = util.pwstrToFfi(data.textToMatch);
    view.setBigUint64(16, (buf as any)._f16 === null ? 0n : BigInt(Deno.UnsafePointer.value(Deno.UnsafePointer.of((buf as any)._f16))), true);
  }
  // 0x18: pointer
  if (data?.categoryIds !== undefined) view.setBigUint64(24, data.categoryIds === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.categoryIds))), true);
  // 0x20: u32
  if (data?.categoryIdCount !== undefined) view.setUint32(32, Number(data.categoryIdCount), true);
  // 0x24: pad4
  // 0x28: pointer
  if (data?.privacyTags !== undefined) view.setBigUint64(40, data.privacyTags === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.privacyTags))), true);
  // 0x30: u32
  if (data?.privacyTagCount !== undefined) view.setUint32(48, Number(data.privacyTagCount), true);
  // 0x34: i32
  if (data?.coreDataOnly !== undefined) view.setInt32(52, Number(data.coreDataOnly), true);
  return buf;
}

export class DIAGNOSTIC_DATA_SEARCH_CRITERIAView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get producerNames(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(0, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x08: u32
  get producerNameCount(): number {
    return this.view.getUint32(8, true);
  }

  // 0x0c: pad4

  // 0x10: buffer
  get textToMatch(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(16, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x18: pointer
  get categoryIds(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(24, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x20: u32
  get categoryIdCount(): number {
    return this.view.getUint32(32, true);
  }

  // 0x24: pad4

  // 0x28: pointer
  get privacyTags(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(40, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x30: u32
  get privacyTagCount(): number {
    return this.view.getUint32(48, true);
  }

  // 0x34: i32
  get coreDataOnly(): number {
    return this.view.getInt32(52, true);
  }

  // 0x00: pointer
  set producerNames(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(0, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x08: u32
  set producerNameCount(value: number) {
    this.view.setUint32(8, value, true);
  }

  // 0x0c: pad4

  // 0x10: buffer
  set textToMatch(value: Uint8Array | Deno.PointerValue) {
    (this.buf as any)._f16 = value;
    this.view.setBigUint64(16, BigInt(Deno.UnsafePointer.value(util.toPointer((this.buf as any)._f16))), true);
  }

  // 0x18: pointer
  set categoryIds(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(24, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x20: u32
  set categoryIdCount(value: number) {
    this.view.setUint32(32, value, true);
  }

  // 0x24: pad4

  // 0x28: pointer
  set privacyTags(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(40, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x30: u32
  set privacyTagCount(value: number) {
    this.view.setUint32(48, value, true);
  }

  // 0x34: i32
  set coreDataOnly(value: number) {
    this.view.setInt32(52, value, true);
  }
}

/**
 * Windows.Win32.Security.DiagnosticDataQuery.DIAGNOSTIC_DATA_EVENT_TAG_DESCRIPTION (size: 24)
 */
export interface DIAGNOSTIC_DATA_EVENT_TAG_DESCRIPTION {
  /** i32 */
  privacyTag: number;
  /** Windows.Win32.Foundation.PWSTR */
  name: string | null | Uint8Array | Uint16Array;
  /** Windows.Win32.Foundation.PWSTR */
  description: string | null | Uint8Array | Uint16Array;
}

export const sizeofDIAGNOSTIC_DATA_EVENT_TAG_DESCRIPTION = 24;

export function allocDIAGNOSTIC_DATA_EVENT_TAG_DESCRIPTION(data?: Partial<DIAGNOSTIC_DATA_EVENT_TAG_DESCRIPTION>): Uint8Array {
  const buf = new Uint8Array(sizeofDIAGNOSTIC_DATA_EVENT_TAG_DESCRIPTION);
  const view = new DataView(buf.buffer);
  // 0x00: i32
  if (data?.privacyTag !== undefined) view.setInt32(0, Number(data.privacyTag), true);
  // 0x04: pad4
  // 0x08: buffer
  if (data?.name !== undefined) {
    (buf as any)._f8 = util.pwstrToFfi(data.name);
    view.setBigUint64(8, (buf as any)._f8 === null ? 0n : BigInt(Deno.UnsafePointer.value(Deno.UnsafePointer.of((buf as any)._f8))), true);
  }
  // 0x10: buffer
  if (data?.description !== undefined) {
    (buf as any)._f16 = util.pwstrToFfi(data.description);
    view.setBigUint64(16, (buf as any)._f16 === null ? 0n : BigInt(Deno.UnsafePointer.value(Deno.UnsafePointer.of((buf as any)._f16))), true);
  }
  return buf;
}

export class DIAGNOSTIC_DATA_EVENT_TAG_DESCRIPTIONView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: i32
  get privacyTag(): number {
    return this.view.getInt32(0, true);
  }

  // 0x04: pad4

  // 0x08: buffer
  get name(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x10: buffer
  get description(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(16, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: i32
  set privacyTag(value: number) {
    this.view.setInt32(0, value, true);
  }

  // 0x04: pad4

  // 0x08: buffer
  set name(value: Uint8Array | Deno.PointerValue) {
    (this.buf as any)._f8 = value;
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer((this.buf as any)._f8))), true);
  }

  // 0x10: buffer
  set description(value: Uint8Array | Deno.PointerValue) {
    (this.buf as any)._f16 = value;
    this.view.setBigUint64(16, BigInt(Deno.UnsafePointer.value(util.toPointer((this.buf as any)._f16))), true);
  }
}

/**
 * Windows.Win32.Security.DiagnosticDataQuery.DIAGNOSTIC_DATA_EVENT_PRODUCER_DESCRIPTION (size: 8)
 */
export interface DIAGNOSTIC_DATA_EVENT_PRODUCER_DESCRIPTION {
  /** Windows.Win32.Foundation.PWSTR */
  name: string | null | Uint8Array | Uint16Array;
}

export const sizeofDIAGNOSTIC_DATA_EVENT_PRODUCER_DESCRIPTION = 8;

export function allocDIAGNOSTIC_DATA_EVENT_PRODUCER_DESCRIPTION(data?: Partial<DIAGNOSTIC_DATA_EVENT_PRODUCER_DESCRIPTION>): Uint8Array {
  const buf = new Uint8Array(sizeofDIAGNOSTIC_DATA_EVENT_PRODUCER_DESCRIPTION);
  const view = new DataView(buf.buffer);
  // 0x00: buffer
  if (data?.name !== undefined) {
    (buf as any)._f0 = util.pwstrToFfi(data.name);
    view.setBigUint64(0, (buf as any)._f0 === null ? 0n : BigInt(Deno.UnsafePointer.value(Deno.UnsafePointer.of((buf as any)._f0))), true);
  }
  return buf;
}

export class DIAGNOSTIC_DATA_EVENT_PRODUCER_DESCRIPTIONView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: buffer
  get name(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(0, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: buffer
  set name(value: Uint8Array | Deno.PointerValue) {
    (this.buf as any)._f0 = value;
    this.view.setBigUint64(0, BigInt(Deno.UnsafePointer.value(util.toPointer((this.buf as any)._f0))), true);
  }
}

/**
 * Windows.Win32.Security.DiagnosticDataQuery.DIAGNOSTIC_DATA_EVENT_CATEGORY_DESCRIPTION (size: 16)
 */
export interface DIAGNOSTIC_DATA_EVENT_CATEGORY_DESCRIPTION {
  /** i32 */
  id: number;
  /** Windows.Win32.Foundation.PWSTR */
  name: string | null | Uint8Array | Uint16Array;
}

export const sizeofDIAGNOSTIC_DATA_EVENT_CATEGORY_DESCRIPTION = 16;

export function allocDIAGNOSTIC_DATA_EVENT_CATEGORY_DESCRIPTION(data?: Partial<DIAGNOSTIC_DATA_EVENT_CATEGORY_DESCRIPTION>): Uint8Array {
  const buf = new Uint8Array(sizeofDIAGNOSTIC_DATA_EVENT_CATEGORY_DESCRIPTION);
  const view = new DataView(buf.buffer);
  // 0x00: i32
  if (data?.id !== undefined) view.setInt32(0, Number(data.id), true);
  // 0x04: pad4
  // 0x08: buffer
  if (data?.name !== undefined) {
    (buf as any)._f8 = util.pwstrToFfi(data.name);
    view.setBigUint64(8, (buf as any)._f8 === null ? 0n : BigInt(Deno.UnsafePointer.value(Deno.UnsafePointer.of((buf as any)._f8))), true);
  }
  return buf;
}

export class DIAGNOSTIC_DATA_EVENT_CATEGORY_DESCRIPTIONView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: i32
  get id(): number {
    return this.view.getInt32(0, true);
  }

  // 0x04: pad4

  // 0x08: buffer
  get name(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: i32
  set id(value: number) {
    this.view.setInt32(0, value, true);
  }

  // 0x04: pad4

  // 0x08: buffer
  set name(value: Uint8Array | Deno.PointerValue) {
    (this.buf as any)._f8 = value;
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer((this.buf as any)._f8))), true);
  }
}

/**
 * Windows.Win32.Security.DiagnosticDataQuery.DIAGNOSTIC_DATA_EVENT_TAG_STATS (size: 8)
 */
export interface DIAGNOSTIC_DATA_EVENT_TAG_STATS {
  /** i32 */
  privacyTag: number;
  /** u32 */
  eventCount: number;
}

export const sizeofDIAGNOSTIC_DATA_EVENT_TAG_STATS = 8;

export function allocDIAGNOSTIC_DATA_EVENT_TAG_STATS(data?: Partial<DIAGNOSTIC_DATA_EVENT_TAG_STATS>): Uint8Array {
  const buf = new Uint8Array(sizeofDIAGNOSTIC_DATA_EVENT_TAG_STATS);
  const view = new DataView(buf.buffer);
  // 0x00: i32
  if (data?.privacyTag !== undefined) view.setInt32(0, Number(data.privacyTag), true);
  // 0x04: u32
  if (data?.eventCount !== undefined) view.setUint32(4, Number(data.eventCount), true);
  return buf;
}

export class DIAGNOSTIC_DATA_EVENT_TAG_STATSView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: i32
  get privacyTag(): number {
    return this.view.getInt32(0, true);
  }

  // 0x04: u32
  get eventCount(): number {
    return this.view.getUint32(4, true);
  }

  // 0x00: i32
  set privacyTag(value: number) {
    this.view.setInt32(0, value, true);
  }

  // 0x04: u32
  set eventCount(value: number) {
    this.view.setUint32(4, value, true);
  }
}

/**
 * Windows.Win32.Security.DiagnosticDataQuery.DIAGNOSTIC_DATA_EVENT_BINARY_STATS (size: 32)
 */
export interface DIAGNOSTIC_DATA_EVENT_BINARY_STATS {
  /** Windows.Win32.Foundation.PWSTR */
  moduleName: string | null | Uint8Array | Uint16Array;
  /** Windows.Win32.Foundation.PWSTR */
  friendlyModuleName: string | null | Uint8Array | Uint16Array;
  /** u32 */
  eventCount: number;
  /** u64 */
  uploadSizeBytes: Deno.PointerValue;
}

export const sizeofDIAGNOSTIC_DATA_EVENT_BINARY_STATS = 32;

export function allocDIAGNOSTIC_DATA_EVENT_BINARY_STATS(data?: Partial<DIAGNOSTIC_DATA_EVENT_BINARY_STATS>): Uint8Array {
  const buf = new Uint8Array(sizeofDIAGNOSTIC_DATA_EVENT_BINARY_STATS);
  const view = new DataView(buf.buffer);
  // 0x00: buffer
  if (data?.moduleName !== undefined) {
    (buf as any)._f0 = util.pwstrToFfi(data.moduleName);
    view.setBigUint64(0, (buf as any)._f0 === null ? 0n : BigInt(Deno.UnsafePointer.value(Deno.UnsafePointer.of((buf as any)._f0))), true);
  }
  // 0x08: buffer
  if (data?.friendlyModuleName !== undefined) {
    (buf as any)._f8 = util.pwstrToFfi(data.friendlyModuleName);
    view.setBigUint64(8, (buf as any)._f8 === null ? 0n : BigInt(Deno.UnsafePointer.value(Deno.UnsafePointer.of((buf as any)._f8))), true);
  }
  // 0x10: u32
  if (data?.eventCount !== undefined) view.setUint32(16, Number(data.eventCount), true);
  // 0x14: pad4
  // 0x18: u64
  if (data?.uploadSizeBytes !== undefined) view.setBigUint64(24, BigInt(data.uploadSizeBytes), true);
  return buf;
}

export class DIAGNOSTIC_DATA_EVENT_BINARY_STATSView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: buffer
  get moduleName(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(0, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x08: buffer
  get friendlyModuleName(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x10: u32
  get eventCount(): number {
    return this.view.getUint32(16, true);
  }

  // 0x14: pad4

  // 0x18: u64
  get uploadSizeBytes(): Deno.PointerValue {
    return Number(this.view.getBigUint64(24, true));
  }

  // 0x00: buffer
  set moduleName(value: Uint8Array | Deno.PointerValue) {
    (this.buf as any)._f0 = value;
    this.view.setBigUint64(0, BigInt(Deno.UnsafePointer.value(util.toPointer((this.buf as any)._f0))), true);
  }

  // 0x08: buffer
  set friendlyModuleName(value: Uint8Array | Deno.PointerValue) {
    (this.buf as any)._f8 = value;
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer((this.buf as any)._f8))), true);
  }

  // 0x10: u32
  set eventCount(value: number) {
    this.view.setUint32(16, value, true);
  }

  // 0x14: pad4

  // 0x18: u64
  set uploadSizeBytes(value: Deno.PointerValue) {
    this.view.setBigUint64(24, BigInt(value), true);
  }
}

/**
 * Windows.Win32.Security.DiagnosticDataQuery.DIAGNOSTIC_DATA_GENERAL_STATS (size: 32)
 */
export interface DIAGNOSTIC_DATA_GENERAL_STATS {
  /** u32 */
  optInLevel: number;
  /** u64 */
  transcriptSizeBytes: Deno.PointerValue;
  /** u64 */
  oldestEventTimestamp: Deno.PointerValue;
  /** u32 */
  totalEventCountLast24Hours: number;
  /** f32 */
  averageDailyEvents: number;
}

export const sizeofDIAGNOSTIC_DATA_GENERAL_STATS = 32;

export function allocDIAGNOSTIC_DATA_GENERAL_STATS(data?: Partial<DIAGNOSTIC_DATA_GENERAL_STATS>): Uint8Array {
  const buf = new Uint8Array(sizeofDIAGNOSTIC_DATA_GENERAL_STATS);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.optInLevel !== undefined) view.setUint32(0, Number(data.optInLevel), true);
  // 0x04: pad4
  // 0x08: u64
  if (data?.transcriptSizeBytes !== undefined) view.setBigUint64(8, BigInt(data.transcriptSizeBytes), true);
  // 0x10: u64
  if (data?.oldestEventTimestamp !== undefined) view.setBigUint64(16, BigInt(data.oldestEventTimestamp), true);
  // 0x18: u32
  if (data?.totalEventCountLast24Hours !== undefined) view.setUint32(24, Number(data.totalEventCountLast24Hours), true);
  // 0x1c: f32
  if (data?.averageDailyEvents !== undefined) view.setFloat32(28, Number(data.averageDailyEvents), true);
  return buf;
}

export class DIAGNOSTIC_DATA_GENERAL_STATSView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get optInLevel(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: pad4

  // 0x08: u64
  get transcriptSizeBytes(): Deno.PointerValue {
    return Number(this.view.getBigUint64(8, true));
  }

  // 0x10: u64
  get oldestEventTimestamp(): Deno.PointerValue {
    return Number(this.view.getBigUint64(16, true));
  }

  // 0x18: u32
  get totalEventCountLast24Hours(): number {
    return this.view.getUint32(24, true);
  }

  // 0x1c: f32
  get averageDailyEvents(): number {
    return this.view.getFloat32(28, true);
  }

  // 0x00: u32
  set optInLevel(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: pad4

  // 0x08: u64
  set transcriptSizeBytes(value: Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(value), true);
  }

  // 0x10: u64
  set oldestEventTimestamp(value: Deno.PointerValue) {
    this.view.setBigUint64(16, BigInt(value), true);
  }

  // 0x18: u32
  set totalEventCountLast24Hours(value: number) {
    this.view.setUint32(24, value, true);
  }

  // 0x1c: f32
  set averageDailyEvents(value: number) {
    this.view.setFloat32(28, value, true);
  }
}

/**
 * Windows.Win32.Security.DiagnosticDataQuery.DIAGNOSTIC_DATA_EVENT_TRANSCRIPT_CONFIGURATION (size: 16)
 */
export interface DIAGNOSTIC_DATA_EVENT_TRANSCRIPT_CONFIGURATION {
  /** u32 */
  hoursOfHistoryToKeep: number;
  /** u32 */
  maxStoreMegabytes: number;
  /** u32 */
  requestedMaxStoreMegabytes: number;
}

export const sizeofDIAGNOSTIC_DATA_EVENT_TRANSCRIPT_CONFIGURATION = 16;

export function allocDIAGNOSTIC_DATA_EVENT_TRANSCRIPT_CONFIGURATION(data?: Partial<DIAGNOSTIC_DATA_EVENT_TRANSCRIPT_CONFIGURATION>): Uint8Array {
  const buf = new Uint8Array(sizeofDIAGNOSTIC_DATA_EVENT_TRANSCRIPT_CONFIGURATION);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.hoursOfHistoryToKeep !== undefined) view.setUint32(0, Number(data.hoursOfHistoryToKeep), true);
  // 0x04: u32
  if (data?.maxStoreMegabytes !== undefined) view.setUint32(4, Number(data.maxStoreMegabytes), true);
  // 0x08: u32
  if (data?.requestedMaxStoreMegabytes !== undefined) view.setUint32(8, Number(data.requestedMaxStoreMegabytes), true);
  // 0x0c: pad4
  return buf;
}

export class DIAGNOSTIC_DATA_EVENT_TRANSCRIPT_CONFIGURATIONView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get hoursOfHistoryToKeep(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: u32
  get maxStoreMegabytes(): number {
    return this.view.getUint32(4, true);
  }

  // 0x08: u32
  get requestedMaxStoreMegabytes(): number {
    return this.view.getUint32(8, true);
  }

  // 0x0c: pad4

  // 0x00: u32
  set hoursOfHistoryToKeep(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: u32
  set maxStoreMegabytes(value: number) {
    this.view.setUint32(4, value, true);
  }

  // 0x08: u32
  set requestedMaxStoreMegabytes(value: number) {
    this.view.setUint32(8, value, true);
  }

  // 0x0c: pad4
}

/**
 * Windows.Win32.Security.DiagnosticDataQuery.DIAGNOSTIC_REPORT_PARAMETER (size: 16)
 */
export interface DIAGNOSTIC_REPORT_PARAMETER {
  /** array */
  name: Deno.PointerValue;
  /** array */
  value: Deno.PointerValue;
}

export const sizeofDIAGNOSTIC_REPORT_PARAMETER = 16;

export function allocDIAGNOSTIC_REPORT_PARAMETER(data?: Partial<DIAGNOSTIC_REPORT_PARAMETER>): Uint8Array {
  const buf = new Uint8Array(sizeofDIAGNOSTIC_REPORT_PARAMETER);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.name !== undefined) view.setBigUint64(0, data.name === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.name))), true);
  // 0x08: pointer
  if (data?.value !== undefined) view.setBigUint64(8, data.value === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.value))), true);
  return buf;
}

export class DIAGNOSTIC_REPORT_PARAMETERView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get name(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(0, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x08: pointer
  get value(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: pointer
  set name(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(0, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x08: pointer
  set value(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.Security.DiagnosticDataQuery.DIAGNOSTIC_REPORT_SIGNATURE (size: 16)
 */
export interface DIAGNOSTIC_REPORT_SIGNATURE {
  /** array */
  eventName: Deno.PointerValue;
  /** array */
  parameters: Deno.PointerValue;
}

export const sizeofDIAGNOSTIC_REPORT_SIGNATURE = 16;

export function allocDIAGNOSTIC_REPORT_SIGNATURE(data?: Partial<DIAGNOSTIC_REPORT_SIGNATURE>): Uint8Array {
  const buf = new Uint8Array(sizeofDIAGNOSTIC_REPORT_SIGNATURE);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.eventName !== undefined) view.setBigUint64(0, data.eventName === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.eventName))), true);
  // 0x08: pointer
  if (data?.parameters !== undefined) view.setBigUint64(8, data.parameters === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.parameters))), true);
  return buf;
}

export class DIAGNOSTIC_REPORT_SIGNATUREView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get eventName(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(0, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x08: pointer
  get parameters(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: pointer
  set eventName(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(0, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x08: pointer
  set parameters(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.Foundation.FILETIME (size: 8)
 */
export interface FILETIME {
  /** u32 */
  dwLowDateTime: number;
  /** u32 */
  dwHighDateTime: number;
}

export const sizeofFILETIME = 8;

export function allocFILETIME(data?: Partial<FILETIME>): Uint8Array {
  const buf = new Uint8Array(sizeofFILETIME);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.dwLowDateTime !== undefined) view.setUint32(0, Number(data.dwLowDateTime), true);
  // 0x04: u32
  if (data?.dwHighDateTime !== undefined) view.setUint32(4, Number(data.dwHighDateTime), true);
  return buf;
}

export class FILETIMEView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get dwLowDateTime(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: u32
  get dwHighDateTime(): number {
    return this.view.getUint32(4, true);
  }

  // 0x00: u32
  set dwLowDateTime(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: u32
  set dwHighDateTime(value: number) {
    this.view.setUint32(4, value, true);
  }
}

/**
 * Windows.Win32.Security.DiagnosticDataQuery.DIAGNOSTIC_REPORT_DATA (size: 136)
 */
export interface DIAGNOSTIC_REPORT_DATA {
  /** Windows.Win32.Security.DiagnosticDataQuery.DIAGNOSTIC_REPORT_SIGNATURE */
  signature: Uint8Array | Deno.PointerValue;
  /** System.Guid */
  bucketId: Uint8Array | Deno.PointerValue;
  /** System.Guid */
  reportId: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.Foundation.FILETIME */
  creationTime: Uint8Array | Deno.PointerValue;
  /** u64 */
  sizeInBytes: Deno.PointerValue;
  /** Windows.Win32.Foundation.PWSTR */
  cabId: string | null | Uint8Array | Uint16Array;
  /** u32 */
  reportStatus: number;
  /** System.Guid */
  reportIntegratorId: Uint8Array | Deno.PointerValue;
  /** ptr */
  fileNames: Deno.PointerValue | Uint8Array;
  /** u32 */
  fileCount: number;
  /** Windows.Win32.Foundation.PWSTR */
  friendlyEventName: string | null | Uint8Array | Uint16Array;
  /** Windows.Win32.Foundation.PWSTR */
  applicationName: string | null | Uint8Array | Uint16Array;
  /** Windows.Win32.Foundation.PWSTR */
  applicationPath: string | null | Uint8Array | Uint16Array;
  /** Windows.Win32.Foundation.PWSTR */
  description: string | null | Uint8Array | Uint16Array;
  /** Windows.Win32.Foundation.PWSTR */
  bucketIdString: string | null | Uint8Array | Uint16Array;
  /** u64 */
  legacyBucketId: Deno.PointerValue;
  /** Windows.Win32.Foundation.PWSTR */
  reportKey: string | null | Uint8Array | Uint16Array;
}

export const sizeofDIAGNOSTIC_REPORT_DATA = 136;

export function allocDIAGNOSTIC_REPORT_DATA(data?: Partial<DIAGNOSTIC_REPORT_DATA>): Uint8Array {
  const buf = new Uint8Array(sizeofDIAGNOSTIC_REPORT_DATA);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.signature !== undefined) view.setBigUint64(0, data.signature === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.signature))), true);
  // 0x08: pointer
  if (data?.bucketId !== undefined) view.setBigUint64(8, data.bucketId === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.bucketId))), true);
  // 0x10: pointer
  if (data?.reportId !== undefined) view.setBigUint64(16, data.reportId === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.reportId))), true);
  // 0x18: pointer
  if (data?.creationTime !== undefined) view.setBigUint64(24, data.creationTime === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.creationTime))), true);
  // 0x20: u64
  if (data?.sizeInBytes !== undefined) view.setBigUint64(32, BigInt(data.sizeInBytes), true);
  // 0x28: buffer
  if (data?.cabId !== undefined) {
    (buf as any)._f40 = util.pwstrToFfi(data.cabId);
    view.setBigUint64(40, (buf as any)._f40 === null ? 0n : BigInt(Deno.UnsafePointer.value(Deno.UnsafePointer.of((buf as any)._f40))), true);
  }
  // 0x30: u32
  if (data?.reportStatus !== undefined) view.setUint32(48, Number(data.reportStatus), true);
  // 0x34: pad4
  // 0x38: pointer
  if (data?.reportIntegratorId !== undefined) view.setBigUint64(56, data.reportIntegratorId === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.reportIntegratorId))), true);
  // 0x40: pointer
  if (data?.fileNames !== undefined) view.setBigUint64(64, data.fileNames === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.fileNames))), true);
  // 0x48: u32
  if (data?.fileCount !== undefined) view.setUint32(72, Number(data.fileCount), true);
  // 0x4c: pad4
  // 0x50: buffer
  if (data?.friendlyEventName !== undefined) {
    (buf as any)._f80 = util.pwstrToFfi(data.friendlyEventName);
    view.setBigUint64(80, (buf as any)._f80 === null ? 0n : BigInt(Deno.UnsafePointer.value(Deno.UnsafePointer.of((buf as any)._f80))), true);
  }
  // 0x58: buffer
  if (data?.applicationName !== undefined) {
    (buf as any)._f88 = util.pwstrToFfi(data.applicationName);
    view.setBigUint64(88, (buf as any)._f88 === null ? 0n : BigInt(Deno.UnsafePointer.value(Deno.UnsafePointer.of((buf as any)._f88))), true);
  }
  // 0x60: buffer
  if (data?.applicationPath !== undefined) {
    (buf as any)._f96 = util.pwstrToFfi(data.applicationPath);
    view.setBigUint64(96, (buf as any)._f96 === null ? 0n : BigInt(Deno.UnsafePointer.value(Deno.UnsafePointer.of((buf as any)._f96))), true);
  }
  // 0x68: buffer
  if (data?.description !== undefined) {
    (buf as any)._f104 = util.pwstrToFfi(data.description);
    view.setBigUint64(104, (buf as any)._f104 === null ? 0n : BigInt(Deno.UnsafePointer.value(Deno.UnsafePointer.of((buf as any)._f104))), true);
  }
  // 0x70: buffer
  if (data?.bucketIdString !== undefined) {
    (buf as any)._f112 = util.pwstrToFfi(data.bucketIdString);
    view.setBigUint64(112, (buf as any)._f112 === null ? 0n : BigInt(Deno.UnsafePointer.value(Deno.UnsafePointer.of((buf as any)._f112))), true);
  }
  // 0x78: u64
  if (data?.legacyBucketId !== undefined) view.setBigUint64(120, BigInt(data.legacyBucketId), true);
  // 0x80: buffer
  if (data?.reportKey !== undefined) {
    (buf as any)._f128 = util.pwstrToFfi(data.reportKey);
    view.setBigUint64(128, (buf as any)._f128 === null ? 0n : BigInt(Deno.UnsafePointer.value(Deno.UnsafePointer.of((buf as any)._f128))), true);
  }
  return buf;
}

export class DIAGNOSTIC_REPORT_DATAView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get signature(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(0, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x08: pointer
  get bucketId(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x10: pointer
  get reportId(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(16, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x18: pointer
  get creationTime(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(24, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x20: u64
  get sizeInBytes(): Deno.PointerValue {
    return Number(this.view.getBigUint64(32, true));
  }

  // 0x28: buffer
  get cabId(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(40, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x30: u32
  get reportStatus(): number {
    return this.view.getUint32(48, true);
  }

  // 0x34: pad4

  // 0x38: pointer
  get reportIntegratorId(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(56, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x40: pointer
  get fileNames(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(64, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x48: u32
  get fileCount(): number {
    return this.view.getUint32(72, true);
  }

  // 0x4c: pad4

  // 0x50: buffer
  get friendlyEventName(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(80, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x58: buffer
  get applicationName(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(88, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x60: buffer
  get applicationPath(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(96, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x68: buffer
  get description(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(104, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x70: buffer
  get bucketIdString(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(112, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x78: u64
  get legacyBucketId(): Deno.PointerValue {
    return Number(this.view.getBigUint64(120, true));
  }

  // 0x80: buffer
  get reportKey(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(128, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: pointer
  set signature(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(0, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x08: pointer
  set bucketId(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x10: pointer
  set reportId(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(16, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x18: pointer
  set creationTime(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(24, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x20: u64
  set sizeInBytes(value: Deno.PointerValue) {
    this.view.setBigUint64(32, BigInt(value), true);
  }

  // 0x28: buffer
  set cabId(value: Uint8Array | Deno.PointerValue) {
    (this.buf as any)._f40 = value;
    this.view.setBigUint64(40, BigInt(Deno.UnsafePointer.value(util.toPointer((this.buf as any)._f40))), true);
  }

  // 0x30: u32
  set reportStatus(value: number) {
    this.view.setUint32(48, value, true);
  }

  // 0x34: pad4

  // 0x38: pointer
  set reportIntegratorId(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(56, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x40: pointer
  set fileNames(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(64, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x48: u32
  set fileCount(value: number) {
    this.view.setUint32(72, value, true);
  }

  // 0x4c: pad4

  // 0x50: buffer
  set friendlyEventName(value: Uint8Array | Deno.PointerValue) {
    (this.buf as any)._f80 = value;
    this.view.setBigUint64(80, BigInt(Deno.UnsafePointer.value(util.toPointer((this.buf as any)._f80))), true);
  }

  // 0x58: buffer
  set applicationName(value: Uint8Array | Deno.PointerValue) {
    (this.buf as any)._f88 = value;
    this.view.setBigUint64(88, BigInt(Deno.UnsafePointer.value(util.toPointer((this.buf as any)._f88))), true);
  }

  // 0x60: buffer
  set applicationPath(value: Uint8Array | Deno.PointerValue) {
    (this.buf as any)._f96 = value;
    this.view.setBigUint64(96, BigInt(Deno.UnsafePointer.value(util.toPointer((this.buf as any)._f96))), true);
  }

  // 0x68: buffer
  set description(value: Uint8Array | Deno.PointerValue) {
    (this.buf as any)._f104 = value;
    this.view.setBigUint64(104, BigInt(Deno.UnsafePointer.value(util.toPointer((this.buf as any)._f104))), true);
  }

  // 0x70: buffer
  set bucketIdString(value: Uint8Array | Deno.PointerValue) {
    (this.buf as any)._f112 = value;
    this.view.setBigUint64(112, BigInt(Deno.UnsafePointer.value(util.toPointer((this.buf as any)._f112))), true);
  }

  // 0x78: u64
  set legacyBucketId(value: Deno.PointerValue) {
    this.view.setBigUint64(120, BigInt(value), true);
  }

  // 0x80: buffer
  set reportKey(value: Uint8Array | Deno.PointerValue) {
    (this.buf as any)._f128 = value;
    this.view.setBigUint64(128, BigInt(Deno.UnsafePointer.value(util.toPointer((this.buf as any)._f128))), true);
  }
}

export type HRESULT = number;

export type HDIAGNOSTIC_DATA_QUERY_SESSION = Deno.PointerValue;

export type HDIAGNOSTIC_EVENT_TAG_DESCRIPTION = Deno.PointerValue;

export type HDIAGNOSTIC_EVENT_PRODUCER_DESCRIPTION = Deno.PointerValue;

export type HDIAGNOSTIC_EVENT_CATEGORY_DESCRIPTION = Deno.PointerValue;

export type HDIAGNOSTIC_RECORD = Deno.PointerValue;

export type HDIAGNOSTIC_REPORT = Deno.PointerValue;

// Native Libraries

try {
  var libDiagnosticDataQuery_dll = Deno.dlopen("DiagnosticDataQuery.dll", {
    DdqCreateSession: {
      parameters: ["i32", "pointer"],
      result: "pointer",
    },
    DdqCloseSession: {
      parameters: ["pointer"],
      result: "pointer",
    },
    DdqGetSessionAccessLevel: {
      parameters: ["pointer", "pointer"],
      result: "pointer",
    },
    DdqGetDiagnosticDataAccessLevelAllowed: {
      parameters: ["pointer"],
      result: "pointer",
    },
    DdqGetDiagnosticRecordStats: {
      parameters: ["pointer", "pointer", "pointer", "pointer", "pointer"],
      result: "pointer",
    },
    DdqGetDiagnosticRecordPayload: {
      parameters: ["pointer", "i64", "pointer"],
      result: "pointer",
    },
    DdqGetDiagnosticRecordLocaleTags: {
      parameters: ["pointer", "buffer", "pointer"],
      result: "pointer",
    },
    DdqFreeDiagnosticRecordLocaleTags: {
      parameters: ["pointer"],
      result: "pointer",
    },
    DdqGetDiagnosticRecordLocaleTagAtIndex: {
      parameters: ["pointer", "u32", "pointer"],
      result: "pointer",
    },
    DdqGetDiagnosticRecordLocaleTagCount: {
      parameters: ["pointer", "pointer"],
      result: "pointer",
    },
    DdqGetDiagnosticRecordProducers: {
      parameters: ["pointer", "pointer"],
      result: "pointer",
    },
    DdqFreeDiagnosticRecordProducers: {
      parameters: ["pointer"],
      result: "pointer",
    },
    DdqGetDiagnosticRecordProducerAtIndex: {
      parameters: ["pointer", "u32", "pointer"],
      result: "pointer",
    },
    DdqGetDiagnosticRecordProducerCount: {
      parameters: ["pointer", "pointer"],
      result: "pointer",
    },
    DdqGetDiagnosticRecordProducerCategories: {
      parameters: ["pointer", "buffer", "pointer"],
      result: "pointer",
    },
    DdqFreeDiagnosticRecordProducerCategories: {
      parameters: ["pointer"],
      result: "pointer",
    },
    DdqGetDiagnosticRecordCategoryAtIndex: {
      parameters: ["pointer", "u32", "pointer"],
      result: "pointer",
    },
    DdqGetDiagnosticRecordCategoryCount: {
      parameters: ["pointer", "pointer"],
      result: "pointer",
    },
    DdqIsDiagnosticRecordSampledIn: {
      parameters: ["pointer", "pointer", "pointer", "buffer", "pointer", "buffer", "pointer", "pointer", "pointer"],
      result: "pointer",
    },
    DdqGetDiagnosticRecordPage: {
      parameters: ["pointer", "pointer", "u32", "u32", "i64", "pointer"],
      result: "pointer",
    },
    DdqFreeDiagnosticRecordPage: {
      parameters: ["pointer"],
      result: "pointer",
    },
    DdqGetDiagnosticRecordAtIndex: {
      parameters: ["pointer", "u32", "pointer"],
      result: "pointer",
    },
    DdqGetDiagnosticRecordCount: {
      parameters: ["pointer", "pointer"],
      result: "pointer",
    },
    DdqGetDiagnosticReportStoreReportCount: {
      parameters: ["pointer", "u32", "pointer"],
      result: "pointer",
    },
    DdqCancelDiagnosticRecordOperation: {
      parameters: ["pointer"],
      result: "pointer",
    },
    DdqGetDiagnosticReport: {
      parameters: ["pointer", "u32", "pointer"],
      result: "pointer",
    },
    DdqFreeDiagnosticReport: {
      parameters: ["pointer"],
      result: "pointer",
    },
    DdqGetDiagnosticReportAtIndex: {
      parameters: ["pointer", "u32", "pointer"],
      result: "pointer",
    },
    DdqGetDiagnosticReportCount: {
      parameters: ["pointer", "pointer"],
      result: "pointer",
    },
    DdqExtractDiagnosticReport: {
      parameters: ["pointer", "u32", "buffer", "buffer"],
      result: "pointer",
    },
    DdqGetDiagnosticRecordTagDistribution: {
      parameters: ["pointer", "pointer", "u32", "pointer", "pointer"],
      result: "pointer",
    },
    DdqGetDiagnosticRecordBinaryDistribution: {
      parameters: ["pointer", "pointer", "u32", "u32", "pointer", "pointer"],
      result: "pointer",
    },
    DdqGetDiagnosticRecordSummary: {
      parameters: ["pointer", "pointer", "u32", "pointer"],
      result: "pointer",
    },
    DdqSetTranscriptConfiguration: {
      parameters: ["pointer", "pointer"],
      result: "pointer",
    },
    DdqGetTranscriptConfiguration: {
      parameters: ["pointer", "pointer"],
      result: "pointer",
    },
  }).symbols;
} catch(e) { /* ignore */ }

// Symbols

export function DdqCreateSession(
  accessLevel: DdqAccessLevel /* Windows.Win32.Security.DiagnosticDataQuery.DdqAccessLevel */,
  hSession: Deno.PointerValue | Uint8Array /* ptr */,
): Deno.PointerValue /* Windows.Win32.Foundation.HRESULT */ {
  return libDiagnosticDataQuery_dll.DdqCreateSession(accessLevel, util.toPointer(hSession));
}

export function DdqCloseSession(
  hSession: Uint8Array | Deno.PointerValue /* Windows.Win32.Security.HDIAGNOSTIC_DATA_QUERY_SESSION */,
): Deno.PointerValue /* Windows.Win32.Foundation.HRESULT */ {
  return libDiagnosticDataQuery_dll.DdqCloseSession(util.toPointer(hSession));
}

export function DdqGetSessionAccessLevel(
  hSession: Uint8Array | Deno.PointerValue /* Windows.Win32.Security.HDIAGNOSTIC_DATA_QUERY_SESSION */,
  accessLevel: Deno.PointerValue | Uint8Array /* ptr */,
): Deno.PointerValue /* Windows.Win32.Foundation.HRESULT */ {
  return libDiagnosticDataQuery_dll.DdqGetSessionAccessLevel(util.toPointer(hSession), util.toPointer(accessLevel));
}

export function DdqGetDiagnosticDataAccessLevelAllowed(
  accessLevel: Deno.PointerValue | Uint8Array /* ptr */,
): Deno.PointerValue /* Windows.Win32.Foundation.HRESULT */ {
  return libDiagnosticDataQuery_dll.DdqGetDiagnosticDataAccessLevelAllowed(util.toPointer(accessLevel));
}

export function DdqGetDiagnosticRecordStats(
  hSession: Uint8Array | Deno.PointerValue /* Windows.Win32.Security.HDIAGNOSTIC_DATA_QUERY_SESSION */,
  searchCriteria: Deno.PointerValue | Uint8Array /* ptr */,
  recordCount: Deno.PointerValue | Uint8Array /* ptr */,
  minRowId: Deno.PointerValue | Uint8Array /* ptr */,
  maxRowId: Deno.PointerValue | Uint8Array /* ptr */,
): Deno.PointerValue /* Windows.Win32.Foundation.HRESULT */ {
  return libDiagnosticDataQuery_dll.DdqGetDiagnosticRecordStats(util.toPointer(hSession), util.toPointer(searchCriteria), util.toPointer(recordCount), util.toPointer(minRowId), util.toPointer(maxRowId));
}

export function DdqGetDiagnosticRecordPayload(
  hSession: Uint8Array | Deno.PointerValue /* Windows.Win32.Security.HDIAGNOSTIC_DATA_QUERY_SESSION */,
  rowId: Deno.PointerValue /* i64 */,
  payload: Deno.PointerValue | Uint8Array /* ptr */,
): Deno.PointerValue /* Windows.Win32.Foundation.HRESULT */ {
  return libDiagnosticDataQuery_dll.DdqGetDiagnosticRecordPayload(util.toPointer(hSession), rowId, util.toPointer(payload));
}

export function DdqGetDiagnosticRecordLocaleTags(
  hSession: Uint8Array | Deno.PointerValue /* Windows.Win32.Security.HDIAGNOSTIC_DATA_QUERY_SESSION */,
  locale: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  hTagDescription: Deno.PointerValue | Uint8Array /* ptr */,
): Deno.PointerValue /* Windows.Win32.Foundation.HRESULT */ {
  return libDiagnosticDataQuery_dll.DdqGetDiagnosticRecordLocaleTags(util.toPointer(hSession), util.pwstrToFfi(locale), util.toPointer(hTagDescription));
}

export function DdqFreeDiagnosticRecordLocaleTags(
  hTagDescription: Uint8Array | Deno.PointerValue /* Windows.Win32.Security.HDIAGNOSTIC_EVENT_TAG_DESCRIPTION */,
): Deno.PointerValue /* Windows.Win32.Foundation.HRESULT */ {
  return libDiagnosticDataQuery_dll.DdqFreeDiagnosticRecordLocaleTags(util.toPointer(hTagDescription));
}

export function DdqGetDiagnosticRecordLocaleTagAtIndex(
  hTagDescription: Uint8Array | Deno.PointerValue /* Windows.Win32.Security.HDIAGNOSTIC_EVENT_TAG_DESCRIPTION */,
  index: number /* u32 */,
  tagDescription: Deno.PointerValue | Uint8Array /* ptr */,
): Deno.PointerValue /* Windows.Win32.Foundation.HRESULT */ {
  return libDiagnosticDataQuery_dll.DdqGetDiagnosticRecordLocaleTagAtIndex(util.toPointer(hTagDescription), index, util.toPointer(tagDescription));
}

export function DdqGetDiagnosticRecordLocaleTagCount(
  hTagDescription: Uint8Array | Deno.PointerValue /* Windows.Win32.Security.HDIAGNOSTIC_EVENT_TAG_DESCRIPTION */,
  tagDescriptionCount: Deno.PointerValue | Uint8Array /* ptr */,
): Deno.PointerValue /* Windows.Win32.Foundation.HRESULT */ {
  return libDiagnosticDataQuery_dll.DdqGetDiagnosticRecordLocaleTagCount(util.toPointer(hTagDescription), util.toPointer(tagDescriptionCount));
}

export function DdqGetDiagnosticRecordProducers(
  hSession: Uint8Array | Deno.PointerValue /* Windows.Win32.Security.HDIAGNOSTIC_DATA_QUERY_SESSION */,
  hProducerDescription: Deno.PointerValue | Uint8Array /* ptr */,
): Deno.PointerValue /* Windows.Win32.Foundation.HRESULT */ {
  return libDiagnosticDataQuery_dll.DdqGetDiagnosticRecordProducers(util.toPointer(hSession), util.toPointer(hProducerDescription));
}

export function DdqFreeDiagnosticRecordProducers(
  hProducerDescription: Uint8Array | Deno.PointerValue /* Windows.Win32.Security.HDIAGNOSTIC_EVENT_PRODUCER_DESCRIPTION */,
): Deno.PointerValue /* Windows.Win32.Foundation.HRESULT */ {
  return libDiagnosticDataQuery_dll.DdqFreeDiagnosticRecordProducers(util.toPointer(hProducerDescription));
}

export function DdqGetDiagnosticRecordProducerAtIndex(
  hProducerDescription: Uint8Array | Deno.PointerValue /* Windows.Win32.Security.HDIAGNOSTIC_EVENT_PRODUCER_DESCRIPTION */,
  index: number /* u32 */,
  producerDescription: Deno.PointerValue | Uint8Array /* ptr */,
): Deno.PointerValue /* Windows.Win32.Foundation.HRESULT */ {
  return libDiagnosticDataQuery_dll.DdqGetDiagnosticRecordProducerAtIndex(util.toPointer(hProducerDescription), index, util.toPointer(producerDescription));
}

export function DdqGetDiagnosticRecordProducerCount(
  hProducerDescription: Uint8Array | Deno.PointerValue /* Windows.Win32.Security.HDIAGNOSTIC_EVENT_PRODUCER_DESCRIPTION */,
  producerDescriptionCount: Deno.PointerValue | Uint8Array /* ptr */,
): Deno.PointerValue /* Windows.Win32.Foundation.HRESULT */ {
  return libDiagnosticDataQuery_dll.DdqGetDiagnosticRecordProducerCount(util.toPointer(hProducerDescription), util.toPointer(producerDescriptionCount));
}

export function DdqGetDiagnosticRecordProducerCategories(
  hSession: Uint8Array | Deno.PointerValue /* Windows.Win32.Security.HDIAGNOSTIC_DATA_QUERY_SESSION */,
  producerName: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  hCategoryDescription: Deno.PointerValue | Uint8Array /* ptr */,
): Deno.PointerValue /* Windows.Win32.Foundation.HRESULT */ {
  return libDiagnosticDataQuery_dll.DdqGetDiagnosticRecordProducerCategories(util.toPointer(hSession), util.pwstrToFfi(producerName), util.toPointer(hCategoryDescription));
}

export function DdqFreeDiagnosticRecordProducerCategories(
  hCategoryDescription: Uint8Array | Deno.PointerValue /* Windows.Win32.Security.HDIAGNOSTIC_EVENT_CATEGORY_DESCRIPTION */,
): Deno.PointerValue /* Windows.Win32.Foundation.HRESULT */ {
  return libDiagnosticDataQuery_dll.DdqFreeDiagnosticRecordProducerCategories(util.toPointer(hCategoryDescription));
}

export function DdqGetDiagnosticRecordCategoryAtIndex(
  hCategoryDescription: Uint8Array | Deno.PointerValue /* Windows.Win32.Security.HDIAGNOSTIC_EVENT_CATEGORY_DESCRIPTION */,
  index: number /* u32 */,
  categoryDescription: Deno.PointerValue | Uint8Array /* ptr */,
): Deno.PointerValue /* Windows.Win32.Foundation.HRESULT */ {
  return libDiagnosticDataQuery_dll.DdqGetDiagnosticRecordCategoryAtIndex(util.toPointer(hCategoryDescription), index, util.toPointer(categoryDescription));
}

export function DdqGetDiagnosticRecordCategoryCount(
  hCategoryDescription: Uint8Array | Deno.PointerValue /* Windows.Win32.Security.HDIAGNOSTIC_EVENT_CATEGORY_DESCRIPTION */,
  categoryDescriptionCount: Deno.PointerValue | Uint8Array /* ptr */,
): Deno.PointerValue /* Windows.Win32.Foundation.HRESULT */ {
  return libDiagnosticDataQuery_dll.DdqGetDiagnosticRecordCategoryCount(util.toPointer(hCategoryDescription), util.toPointer(categoryDescriptionCount));
}

export function DdqIsDiagnosticRecordSampledIn(
  hSession: Uint8Array | Deno.PointerValue /* Windows.Win32.Security.HDIAGNOSTIC_DATA_QUERY_SESSION */,
  providerGroup: Deno.PointerValue | Uint8Array /* ptr */,
  providerId: Deno.PointerValue | Uint8Array /* ptr */,
  providerName: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  eventId: Deno.PointerValue | Uint8Array /* ptr */,
  eventName: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  eventVersion: Deno.PointerValue | Uint8Array /* ptr */,
  eventKeywords: Deno.PointerValue | Uint8Array /* ptr */,
  isSampledIn: Deno.PointerValue | Uint8Array /* ptr */,
): Deno.PointerValue /* Windows.Win32.Foundation.HRESULT */ {
  return libDiagnosticDataQuery_dll.DdqIsDiagnosticRecordSampledIn(util.toPointer(hSession), util.toPointer(providerGroup), util.toPointer(providerId), util.pwstrToFfi(providerName), util.toPointer(eventId), util.pwstrToFfi(eventName), util.toPointer(eventVersion), util.toPointer(eventKeywords), util.toPointer(isSampledIn));
}

export function DdqGetDiagnosticRecordPage(
  hSession: Uint8Array | Deno.PointerValue /* Windows.Win32.Security.HDIAGNOSTIC_DATA_QUERY_SESSION */,
  searchCriteria: Deno.PointerValue | Uint8Array /* ptr */,
  offset: number /* u32 */,
  pageRecordCount: number /* u32 */,
  baseRowId: Deno.PointerValue /* i64 */,
  hRecord: Deno.PointerValue | Uint8Array /* ptr */,
): Deno.PointerValue /* Windows.Win32.Foundation.HRESULT */ {
  return libDiagnosticDataQuery_dll.DdqGetDiagnosticRecordPage(util.toPointer(hSession), util.toPointer(searchCriteria), offset, pageRecordCount, baseRowId, util.toPointer(hRecord));
}

export function DdqFreeDiagnosticRecordPage(
  hRecord: Uint8Array | Deno.PointerValue /* Windows.Win32.Security.HDIAGNOSTIC_RECORD */,
): Deno.PointerValue /* Windows.Win32.Foundation.HRESULT */ {
  return libDiagnosticDataQuery_dll.DdqFreeDiagnosticRecordPage(util.toPointer(hRecord));
}

export function DdqGetDiagnosticRecordAtIndex(
  hRecord: Uint8Array | Deno.PointerValue /* Windows.Win32.Security.HDIAGNOSTIC_RECORD */,
  index: number /* u32 */,
  record: Deno.PointerValue | Uint8Array /* ptr */,
): Deno.PointerValue /* Windows.Win32.Foundation.HRESULT */ {
  return libDiagnosticDataQuery_dll.DdqGetDiagnosticRecordAtIndex(util.toPointer(hRecord), index, util.toPointer(record));
}

export function DdqGetDiagnosticRecordCount(
  hRecord: Uint8Array | Deno.PointerValue /* Windows.Win32.Security.HDIAGNOSTIC_RECORD */,
  recordCount: Deno.PointerValue | Uint8Array /* ptr */,
): Deno.PointerValue /* Windows.Win32.Foundation.HRESULT */ {
  return libDiagnosticDataQuery_dll.DdqGetDiagnosticRecordCount(util.toPointer(hRecord), util.toPointer(recordCount));
}

export function DdqGetDiagnosticReportStoreReportCount(
  hSession: Uint8Array | Deno.PointerValue /* Windows.Win32.Security.HDIAGNOSTIC_DATA_QUERY_SESSION */,
  reportStoreType: number /* u32 */,
  reportCount: Deno.PointerValue | Uint8Array /* ptr */,
): Deno.PointerValue /* Windows.Win32.Foundation.HRESULT */ {
  return libDiagnosticDataQuery_dll.DdqGetDiagnosticReportStoreReportCount(util.toPointer(hSession), reportStoreType, util.toPointer(reportCount));
}

export function DdqCancelDiagnosticRecordOperation(
  hSession: Uint8Array | Deno.PointerValue /* Windows.Win32.Security.HDIAGNOSTIC_DATA_QUERY_SESSION */,
): Deno.PointerValue /* Windows.Win32.Foundation.HRESULT */ {
  return libDiagnosticDataQuery_dll.DdqCancelDiagnosticRecordOperation(util.toPointer(hSession));
}

export function DdqGetDiagnosticReport(
  hSession: Uint8Array | Deno.PointerValue /* Windows.Win32.Security.HDIAGNOSTIC_DATA_QUERY_SESSION */,
  reportStoreType: number /* u32 */,
  hReport: Deno.PointerValue | Uint8Array /* ptr */,
): Deno.PointerValue /* Windows.Win32.Foundation.HRESULT */ {
  return libDiagnosticDataQuery_dll.DdqGetDiagnosticReport(util.toPointer(hSession), reportStoreType, util.toPointer(hReport));
}

export function DdqFreeDiagnosticReport(
  hReport: Uint8Array | Deno.PointerValue /* Windows.Win32.Security.HDIAGNOSTIC_REPORT */,
): Deno.PointerValue /* Windows.Win32.Foundation.HRESULT */ {
  return libDiagnosticDataQuery_dll.DdqFreeDiagnosticReport(util.toPointer(hReport));
}

export function DdqGetDiagnosticReportAtIndex(
  hReport: Uint8Array | Deno.PointerValue /* Windows.Win32.Security.HDIAGNOSTIC_REPORT */,
  index: number /* u32 */,
  report: Deno.PointerValue | Uint8Array /* ptr */,
): Deno.PointerValue /* Windows.Win32.Foundation.HRESULT */ {
  return libDiagnosticDataQuery_dll.DdqGetDiagnosticReportAtIndex(util.toPointer(hReport), index, util.toPointer(report));
}

export function DdqGetDiagnosticReportCount(
  hReport: Uint8Array | Deno.PointerValue /* Windows.Win32.Security.HDIAGNOSTIC_REPORT */,
  reportCount: Deno.PointerValue | Uint8Array /* ptr */,
): Deno.PointerValue /* Windows.Win32.Foundation.HRESULT */ {
  return libDiagnosticDataQuery_dll.DdqGetDiagnosticReportCount(util.toPointer(hReport), util.toPointer(reportCount));
}

export function DdqExtractDiagnosticReport(
  hSession: Uint8Array | Deno.PointerValue /* Windows.Win32.Security.HDIAGNOSTIC_DATA_QUERY_SESSION */,
  reportStoreType: number /* u32 */,
  reportKey: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  destinationPath: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
): Deno.PointerValue /* Windows.Win32.Foundation.HRESULT */ {
  return libDiagnosticDataQuery_dll.DdqExtractDiagnosticReport(util.toPointer(hSession), reportStoreType, util.pwstrToFfi(reportKey), util.pwstrToFfi(destinationPath));
}

export function DdqGetDiagnosticRecordTagDistribution(
  hSession: Uint8Array | Deno.PointerValue /* Windows.Win32.Security.HDIAGNOSTIC_DATA_QUERY_SESSION */,
  producerNames: Deno.PointerValue | Uint8Array /* ptr */,
  producerNameCount: number /* u32 */,
  tagStats: Deno.PointerValue | Uint8Array /* ptr */,
  statCount: Deno.PointerValue | Uint8Array /* ptr */,
): Deno.PointerValue /* Windows.Win32.Foundation.HRESULT */ {
  return libDiagnosticDataQuery_dll.DdqGetDiagnosticRecordTagDistribution(util.toPointer(hSession), util.toPointer(producerNames), producerNameCount, util.toPointer(tagStats), util.toPointer(statCount));
}

export function DdqGetDiagnosticRecordBinaryDistribution(
  hSession: Uint8Array | Deno.PointerValue /* Windows.Win32.Security.HDIAGNOSTIC_DATA_QUERY_SESSION */,
  producerNames: Deno.PointerValue | Uint8Array /* ptr */,
  producerNameCount: number /* u32 */,
  topNBinaries: number /* u32 */,
  binaryStats: Deno.PointerValue | Uint8Array /* ptr */,
  statCount: Deno.PointerValue | Uint8Array /* ptr */,
): Deno.PointerValue /* Windows.Win32.Foundation.HRESULT */ {
  return libDiagnosticDataQuery_dll.DdqGetDiagnosticRecordBinaryDistribution(util.toPointer(hSession), util.toPointer(producerNames), producerNameCount, topNBinaries, util.toPointer(binaryStats), util.toPointer(statCount));
}

export function DdqGetDiagnosticRecordSummary(
  hSession: Uint8Array | Deno.PointerValue /* Windows.Win32.Security.HDIAGNOSTIC_DATA_QUERY_SESSION */,
  producerNames: Deno.PointerValue | Uint8Array /* ptr */,
  producerNameCount: number /* u32 */,
  generalStats: Deno.PointerValue | Uint8Array /* ptr */,
): Deno.PointerValue /* Windows.Win32.Foundation.HRESULT */ {
  return libDiagnosticDataQuery_dll.DdqGetDiagnosticRecordSummary(util.toPointer(hSession), util.toPointer(producerNames), producerNameCount, util.toPointer(generalStats));
}

export function DdqSetTranscriptConfiguration(
  hSession: Uint8Array | Deno.PointerValue /* Windows.Win32.Security.HDIAGNOSTIC_DATA_QUERY_SESSION */,
  desiredConfig: Deno.PointerValue | Uint8Array /* ptr */,
): Deno.PointerValue /* Windows.Win32.Foundation.HRESULT */ {
  return libDiagnosticDataQuery_dll.DdqSetTranscriptConfiguration(util.toPointer(hSession), util.toPointer(desiredConfig));
}

export function DdqGetTranscriptConfiguration(
  hSession: Uint8Array | Deno.PointerValue /* Windows.Win32.Security.HDIAGNOSTIC_DATA_QUERY_SESSION */,
  currentConfig: Deno.PointerValue | Uint8Array /* ptr */,
): Deno.PointerValue /* Windows.Win32.Foundation.HRESULT */ {
  return libDiagnosticDataQuery_dll.DdqGetTranscriptConfiguration(util.toPointer(hSession), util.toPointer(currentConfig));
}

