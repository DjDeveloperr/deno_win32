/// Auto-generated by Deno Win32: Windows.Win32.Security.WinTrust.Apis

import * as util from "../../util.ts";

// Enums
export type WINTRUST_GET_DEFAULT_FOR_USAGE_ACTION = number;
export type WINTRUST_POLICY_FLAGS = number;
export type WINTRUST_DATA_PROVIDER_FLAGS = number;
export type WINTRUST_DATA_UICHOICE = number;
export type WINTRUST_SIGNATURE_SETTINGS_FLAGS = number;
export type WINTRUST_DATA_STATE_ACTION = number;
export type WINTRUST_DATA_UNION_CHOICE = number;
export type WINTRUST_DATA_REVOCATION_CHECKS = number;
export type WINTRUST_DATA_UICONTEXT = number;

// Constants
export const DWACTION_ALLOCANDFILL = 1;
export const DWACTION_FREE = 2;
export const WTPF_TRUSTTEST = 32;
export const WTPF_TESTCANBEVALID = 128;
export const WTPF_IGNOREEXPIRATION = 256;
export const WTPF_IGNOREREVOKATION = 512;
export const WTPF_OFFLINEOK_IND = 1024;
export const WTPF_OFFLINEOK_COM = 2048;
export const WTPF_OFFLINEOKNBU_IND = 4096;
export const WTPF_OFFLINEOKNBU_COM = 8192;
export const WTPF_VERIFY_V1_OFF = 65536;
export const WTPF_IGNOREREVOCATIONONTS = 131072;
export const WTPF_ALLOWONLYPERTRUST = 262144;
export const WTD_USE_IE4_TRUST_FLAG = 1;
export const WTD_NO_IE4_CHAIN_FLAG = 2;
export const WTD_NO_POLICY_USAGE_FLAG = 4;
export const WTD_REVOCATION_CHECK_NONE = 16;
export const WTD_REVOCATION_CHECK_END_CERT = 32;
export const WTD_REVOCATION_CHECK_CHAIN = 64;
export const WTD_REVOCATION_CHECK_CHAIN_EXCLUDE_ROOT = 128;
export const WTD_SAFER_FLAG = 256;
export const WTD_HASH_ONLY_FLAG = 512;
export const WTD_USE_DEFAULT_OSVER_CHECK = 1024;
export const WTD_LIFETIME_SIGNING_FLAG = 2048;
export const WTD_CACHE_ONLY_URL_RETRIEVAL = 4096;
export const WTD_DISABLE_MD2_MD4 = 8192;
export const WTD_MOTW = 16384;
export const WTD_UI_ALL = 1;
export const WTD_UI_NONE = 2;
export const WTD_UI_NOBAD = 3;
export const WTD_UI_NOGOOD = 4;
export const WSS_VERIFY_SPECIFIC = 1;
export const WSS_GET_SECONDARY_SIG_COUNT = 2;
export const WTD_STATEACTION_IGNORE = 0;
export const WTD_STATEACTION_VERIFY = 1;
export const WTD_STATEACTION_CLOSE = 2;
export const WTD_STATEACTION_AUTO_CACHE = 3;
export const WTD_STATEACTION_AUTO_CACHE_FLUSH = 4;
export const WTD_CHOICE_FILE = 1;
export const WTD_CHOICE_CATALOG = 2;
export const WTD_CHOICE_BLOB = 3;
export const WTD_CHOICE_SIGNER = 4;
export const WTD_CHOICE_CERT = 5;
export const WTD_REVOKE_NONE = 0;
export const WTD_REVOKE_WHOLECHAIN = 1;
export const WTD_UICONTEXT_EXECUTE = 0;
export const WTD_UICONTEXT_INSTALL = 1;
export const WINTRUST_CONFIG_REGPATH = `Software\\Microsoft\\Cryptography\\Wintrust\\Config`;
export const WINTRUST_MAX_HEADER_BYTES_TO_MAP_VALUE_NAME = `MaxHeaderBytesToMap`;
export const WINTRUST_MAX_HEADER_BYTES_TO_MAP_DEFAULT = 10485760;
export const WINTRUST_MAX_HASH_BYTES_TO_MAP_VALUE_NAME = `MaxHashBytesToMap`;
export const WINTRUST_MAX_HASH_BYTES_TO_MAP_DEFAULT = 1048576;
export const WTD_PROV_FLAGS_MASK = 65535;
export const WTD_CODE_INTEGRITY_DRIVER_MODE = 32768;
export const WSS_VERIFY_SEALING = 4;
export const WSS_INPUT_FLAG_MASK = 7;
export const WSS_OUT_SEALING_STATUS_VERIFIED = 2147483648;
export const WSS_OUT_HAS_SEALING_INTENT = 1073741824;
export const WSS_OUT_FILE_SUPPORTS_SEAL = 536870912;
export const WSS_OUTPUT_FLAG_MASK = 3758096384;
export const WTCI_DONT_OPEN_STORES = 1;
export const WTCI_OPEN_ONLY_ROOT = 2;
export const WTCI_USE_LOCAL_MACHINE = 4;
export const TRUSTERROR_STEP_WVTPARAMS = 0;
export const TRUSTERROR_STEP_FILEIO = 2;
export const TRUSTERROR_STEP_SIP = 3;
export const TRUSTERROR_STEP_SIPSUBJINFO = 5;
export const TRUSTERROR_STEP_CATALOGFILE = 6;
export const TRUSTERROR_STEP_CERTSTORE = 7;
export const TRUSTERROR_STEP_MESSAGE = 8;
export const TRUSTERROR_STEP_MSG_SIGNERCOUNT = 9;
export const TRUSTERROR_STEP_MSG_INNERCNTTYPE = 10;
export const TRUSTERROR_STEP_MSG_INNERCNT = 11;
export const TRUSTERROR_STEP_MSG_STORE = 12;
export const TRUSTERROR_STEP_MSG_SIGNERINFO = 13;
export const TRUSTERROR_STEP_MSG_SIGNERCERT = 14;
export const TRUSTERROR_STEP_MSG_CERTCHAIN = 15;
export const TRUSTERROR_STEP_MSG_COUNTERSIGINFO = 16;
export const TRUSTERROR_STEP_MSG_COUNTERSIGCERT = 17;
export const TRUSTERROR_STEP_VERIFY_MSGHASH = 18;
export const TRUSTERROR_STEP_VERIFY_MSGINDIRECTDATA = 19;
export const TRUSTERROR_STEP_FINAL_WVTINIT = 30;
export const TRUSTERROR_STEP_FINAL_INITPROV = 31;
export const TRUSTERROR_STEP_FINAL_OBJPROV = 32;
export const TRUSTERROR_STEP_FINAL_SIGPROV = 33;
export const TRUSTERROR_STEP_FINAL_CERTPROV = 34;
export const TRUSTERROR_STEP_FINAL_CERTCHKPROV = 35;
export const TRUSTERROR_STEP_FINAL_POLICYPROV = 36;
export const TRUSTERROR_STEP_FINAL_UIPROV = 37;
export const TRUSTERROR_MAX_STEPS = 38;
export const CPD_CHOICE_SIP = 1;
export const CPD_USE_NT5_CHAIN_FLAG = 2147483648;
export const CPD_REVOCATION_CHECK_NONE = 65536;
export const CPD_REVOCATION_CHECK_END_CERT = 131072;
export const CPD_REVOCATION_CHECK_CHAIN = 262144;
export const CPD_REVOCATION_CHECK_CHAIN_EXCLUDE_ROOT = 524288;
export const CPD_RETURN_LOWER_QUALITY_CHAINS = 1048576;
export const CPD_UISTATE_MODE_PROMPT = 0;
export const CPD_UISTATE_MODE_BLOCK = 1;
export const CPD_UISTATE_MODE_ALLOW = 2;
export const CPD_UISTATE_MODE_MASK = 3;
export const WSS_OBJTRUST_SUPPORT = 1;
export const WSS_SIGTRUST_SUPPORT = 2;
export const WSS_CERTTRUST_SUPPORT = 4;
export const SGNR_TYPE_TIMESTAMP = 16;
export const CERT_CONFIDENCE_SIG = 268435456;
export const CERT_CONFIDENCE_TIME = 16777216;
export const CERT_CONFIDENCE_TIMENEST = 1048576;
export const CERT_CONFIDENCE_AUTHIDEXT = 65536;
export const CERT_CONFIDENCE_HYGIENE = 4096;
export const CERT_CONFIDENCE_HIGHEST = 286330880;
export const WT_CURRENT_VERSION = 512;
export const WT_PROVIDER_DLL_NAME = `WINTRUST.DLL`;
export const WT_PROVIDER_CERTTRUST_FUNCTION = `WintrustCertificateTrust`;
export const WT_ADD_ACTION_ID_RET_RESULT_FLAG = 1;
export const szOID_TRUSTED_CODESIGNING_CA_LIST = `1.3.6.1.4.1.311.2.2.1`;
export const szOID_TRUSTED_CLIENT_AUTH_CA_LIST = `1.3.6.1.4.1.311.2.2.2`;
export const szOID_TRUSTED_SERVER_AUTH_CA_LIST = `1.3.6.1.4.1.311.2.2.3`;
export const SPC_COMMON_NAME_OBJID = `2.5.4.3`;
export const SPC_TIME_STAMP_REQUEST_OBJID = `1.3.6.1.4.1.311.3.2.1`;
export const SPC_INDIRECT_DATA_OBJID = `1.3.6.1.4.1.311.2.1.4`;
export const SPC_SP_AGENCY_INFO_OBJID = `1.3.6.1.4.1.311.2.1.10`;
export const SPC_STATEMENT_TYPE_OBJID = `1.3.6.1.4.1.311.2.1.11`;
export const SPC_SP_OPUS_INFO_OBJID = `1.3.6.1.4.1.311.2.1.12`;
export const SPC_CERT_EXTENSIONS_OBJID = `1.3.6.1.4.1.311.2.1.14`;
export const SPC_PE_IMAGE_DATA_OBJID = `1.3.6.1.4.1.311.2.1.15`;
export const SPC_RAW_FILE_DATA_OBJID = `1.3.6.1.4.1.311.2.1.18`;
export const SPC_STRUCTURED_STORAGE_DATA_OBJID = `1.3.6.1.4.1.311.2.1.19`;
export const SPC_JAVA_CLASS_DATA_OBJID = `1.3.6.1.4.1.311.2.1.20`;
export const SPC_INDIVIDUAL_SP_KEY_PURPOSE_OBJID = `1.3.6.1.4.1.311.2.1.21`;
export const SPC_COMMERCIAL_SP_KEY_PURPOSE_OBJID = `1.3.6.1.4.1.311.2.1.22`;
export const SPC_CAB_DATA_OBJID = `1.3.6.1.4.1.311.2.1.25`;
export const SPC_GLUE_RDN_OBJID = `1.3.6.1.4.1.311.2.1.25`;
export const SPC_MINIMAL_CRITERIA_OBJID = `1.3.6.1.4.1.311.2.1.26`;
export const SPC_FINANCIAL_CRITERIA_OBJID = `1.3.6.1.4.1.311.2.1.27`;
export const SPC_LINK_OBJID = `1.3.6.1.4.1.311.2.1.28`;
export const SPC_SIGINFO_OBJID = `1.3.6.1.4.1.311.2.1.30`;
export const SPC_PE_IMAGE_PAGE_HASHES_V1_OBJID = `1.3.6.1.4.1.311.2.3.1`;
export const SPC_PE_IMAGE_PAGE_HASHES_V2_OBJID = `1.3.6.1.4.1.311.2.3.2`;
export const szOID_NESTED_SIGNATURE = `1.3.6.1.4.1.311.2.4.1`;
export const szOID_INTENT_TO_SEAL = `1.3.6.1.4.1.311.2.4.2`;
export const szOID_SEALING_SIGNATURE = `1.3.6.1.4.1.311.2.4.3`;
export const szOID_SEALING_TIMESTAMP = `1.3.6.1.4.1.311.2.4.4`;
export const szOID_ENHANCED_HASH = `1.3.6.1.4.1.311.2.5.1`;
export const SPC_RELAXED_PE_MARKER_CHECK_OBJID = `1.3.6.1.4.1.311.2.6.1`;
export const SPC_ENCRYPTED_DIGEST_RETRY_COUNT_OBJID = `1.3.6.1.4.1.311.2.6.2`;
export const szOID_PKCS_9_SEQUENCE_NUMBER = `1.2.840.113549.1.9.25.4`;
export const CAT_NAMEVALUE_OBJID = `1.3.6.1.4.1.311.12.2.1`;
export const CAT_MEMBERINFO_OBJID = `1.3.6.1.4.1.311.12.2.2`;
export const CAT_MEMBERINFO2_OBJID = `1.3.6.1.4.1.311.12.2.3`;
export const SPC_WINDOWS_HELLO_COMPATIBILITY_OBJID = `1.3.6.1.4.1.311.10.41.1`;
export const SPC_NATURAL_AUTH_PLUGIN_OBJID = `1.3.6.1.4.1.311.96.1.1`;
export const SPC_SP_AGENCY_INFO_STRUCT = 2200139947050960;
export const SPC_MINIMAL_CRITERIA_STRUCT = 2201239458678737;
export const SPC_FINANCIAL_CRITERIA_STRUCT = 2202338970306514;
export const SPC_INDIRECT_DATA_CONTENT_STRUCT = 2203438481934291;
export const SPC_PE_IMAGE_DATA_STRUCT = 2204537993562068;
export const SPC_LINK_STRUCT = 2210035551700949;
export const SPC_STATEMENT_TYPE_STRUCT = 2206737016817622;
export const SPC_SP_OPUS_INFO_STRUCT = 2350773040056279;
export const SPC_CAB_DATA_STRUCT = 2324384760989656;
export const SPC_JAVA_CLASS_DATA_STRUCT = 2226528226117593;
export const INTENT_TO_SEAL_ATTRIBUTE_STRUCT = 2212234574956506;
export const SEALING_SIGNATURE_ATTRIBUTE_STRUCT = 16971004890035783643n;
export const SEALING_TIMESTAMP_ATTRIBUTE_STRUCT = 2213334086584284;
export const SPC_SIGINFO_STRUCT = 2343076458661970;
export const CAT_NAMEVALUE_STRUCT = 2443132016789677;
export const CAT_MEMBERINFO_STRUCT = 2451928109811886;
export const CAT_MEMBERINFO2_STRUCT = 2446430551673007;
export const SPC_UUID_LENGTH = 16;
export const SPC_URL_LINK_CHOICE = 1;
export const SPC_MONIKER_LINK_CHOICE = 2;
export const SPC_FILE_LINK_CHOICE = 3;
export const WIN_CERT_REVISION_1_0 = 256;
export const WIN_CERT_REVISION_2_0 = 512;
export const WIN_CERT_TYPE_X509 = 1;
export const WIN_CERT_TYPE_PKCS_SIGNED_DATA = 2;
export const WIN_CERT_TYPE_RESERVED_1 = 3;
export const WIN_CERT_TYPE_TS_STACK_SIGNED = 4;
export const WT_TRUSTDBDIALOG_NO_UI_FLAG = 1;
export const WT_TRUSTDBDIALOG_ONLY_PUB_TAB_FLAG = 2;
export const WT_TRUSTDBDIALOG_WRITE_LEGACY_REG_FLAG = 256;
export const WT_TRUSTDBDIALOG_WRITE_IEAK_STORE_FLAG = 512;
export const SP_POLICY_PROVIDER_DLL_NAME = `WINTRUST.DLL`;
export const SP_INIT_FUNCTION = `SoftpubInitialize`;
export const SP_OBJTRUST_FUNCTION = `SoftpubLoadMessage`;
export const SP_SIGTRUST_FUNCTION = `SoftpubLoadSignature`;
export const SP_CHKCERT_FUNCTION = `SoftpubCheckCert`;
export const SP_FINALPOLICY_FUNCTION = `SoftpubAuthenticode`;
export const SP_CLEANUPPOLICY_FUNCTION = `SoftpubCleanup`;
export const SP_TESTDUMPPOLICY_FUNCTION_TEST = `SoftpubDumpStructure`;
export const SP_GENERIC_CERT_INIT_FUNCTION = `SoftpubDefCertInit`;
export const GENERIC_CHAIN_FINALPOLICY_FUNCTION = `GenericChainFinalProv`;
export const GENERIC_CHAIN_CERTTRUST_FUNCTION = `GenericChainCertificateTrust`;
export const HTTPS_FINALPOLICY_FUNCTION = `HTTPSFinalProv`;
export const HTTPS_CHKCERT_FUNCTION = `HTTPSCheckCertProv`;
export const HTTPS_CERTTRUST_FUNCTION = `HTTPSCertificateTrust`;
export const OFFICE_POLICY_PROVIDER_DLL_NAME = `WINTRUST.DLL`;
export const OFFICE_INITPROV_FUNCTION = `OfficeInitializePolicy`;
export const OFFICE_CLEANUPPOLICY_FUNCTION = `OfficeCleanupPolicy`;
export const DRIVER_INITPROV_FUNCTION = `DriverInitializePolicy`;
export const DRIVER_FINALPOLPROV_FUNCTION = `DriverFinalPolicy`;
export const DRIVER_CLEANUPPOLICY_FUNCTION = `DriverCleanupPolicy`;
export const CCPI_RESULT_ALLOW = 1;
export const CCPI_RESULT_DENY = 2;
export const CCPI_RESULT_AUDIT = 3;

// Structs

/**
 * _Anonymous_e__Struct (size: 16)
 */
export interface _Anonymous_e__Struct {
  /** u64 */
  Alignment: Deno.PointerValue;
  /** u64 */
  Region: Deno.PointerValue;
}

export const sizeof_Anonymous_e__Struct = 16;

export function alloc_Anonymous_e__Struct(data?: Partial<_Anonymous_e__Struct>): Uint8Array {
  const buf = new Uint8Array(sizeof_Anonymous_e__Struct);
  const view = new DataView(buf.buffer);
  // 0x00: u64
  if (data?.Alignment !== undefined) view.setBigUint64(0, BigInt(data.Alignment), true);
  // 0x08: u64
  if (data?.Region !== undefined) view.setBigUint64(8, BigInt(data.Region), true);
  return buf;
}

/**
 * _Anonymous_e__Union (size: 16)
 */
export interface _Anonymous_e__Union {
  /** _Anonymous_e__Struct */
  Anonymous: Uint8Array | Deno.PointerValue | null;
  /** array */
  X: Deno.PointerValue | null;
}

export const sizeof_Anonymous_e__Union = 16;

export function alloc_Anonymous_e__Union(data?: Partial<_Anonymous_e__Union>): Uint8Array {
  const buf = new Uint8Array(sizeof_Anonymous_e__Union);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.Anonymous !== undefined) view.setBigUint64(0, data.Anonymous === null ? 0n : BigInt(util.toPointer(data.Anonymous)), true);
  // 0x08: pointer
  if (data?.X !== undefined) view.setBigUint64(8, data.X === null ? 0n : BigInt(util.toPointer(data.X)), true);
  return buf;
}

export type HANDLE = Deno.PointerValue;

export type PWSTR = Deno.PointerValue | Uint8Array | null;

/**
 * Windows.Win32.Security.WinTrust.WINTRUST_DATA (size: 88)
 */
export interface WINTRUST_DATA {
  /** u32 */
  cbStruct: number;
  /** ptr */
  pPolicyCallbackData: Deno.PointerValue | Uint8Array | null;
  /** ptr */
  pSIPClientData: Deno.PointerValue | Uint8Array | null;
  /** Windows.Win32.Security.WinTrust.WINTRUST_DATA_UICHOICE */
  dwUIChoice: WINTRUST_DATA_UICHOICE;
  /** Windows.Win32.Security.WinTrust.WINTRUST_DATA_REVOCATION_CHECKS */
  fdwRevocationChecks: WINTRUST_DATA_REVOCATION_CHECKS;
  /** Windows.Win32.Security.WinTrust.WINTRUST_DATA_UNION_CHOICE */
  dwUnionChoice: WINTRUST_DATA_UNION_CHOICE;
  /** _Anonymous_e__Union */
  Anonymous: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Security.WinTrust.WINTRUST_DATA_STATE_ACTION */
  dwStateAction: WINTRUST_DATA_STATE_ACTION;
  /** Windows.Win32.Foundation.HANDLE */
  hWVTStateData: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Foundation.PWSTR */
  pwszURLReference: string | null;
  /** Windows.Win32.Security.WinTrust.WINTRUST_DATA_PROVIDER_FLAGS */
  dwProvFlags: WINTRUST_DATA_PROVIDER_FLAGS;
  /** Windows.Win32.Security.WinTrust.WINTRUST_DATA_UICONTEXT */
  dwUIContext: WINTRUST_DATA_UICONTEXT;
  /** ptr */
  pSignatureSettings: Deno.PointerValue | Uint8Array | null;
}

export const sizeofWINTRUST_DATA = 88;

export function allocWINTRUST_DATA(data?: Partial<WINTRUST_DATA>): Uint8Array {
  const buf = new Uint8Array(sizeofWINTRUST_DATA);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.cbStruct !== undefined) view.setUint32(0, Number(data.cbStruct), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.pPolicyCallbackData !== undefined) view.setBigUint64(8, data.pPolicyCallbackData === null ? 0n : BigInt(util.toPointer(data.pPolicyCallbackData)), true);
  // 0x10: pointer
  if (data?.pSIPClientData !== undefined) view.setBigUint64(16, data.pSIPClientData === null ? 0n : BigInt(util.toPointer(data.pSIPClientData)), true);
  // 0x18: u32
  if (data?.dwUIChoice !== undefined) view.setUint32(24, Number(data.dwUIChoice), true);
  // 0x1c: u32
  if (data?.fdwRevocationChecks !== undefined) view.setUint32(28, Number(data.fdwRevocationChecks), true);
  // 0x20: u32
  if (data?.dwUnionChoice !== undefined) view.setUint32(32, Number(data.dwUnionChoice), true);
  // 0x24: pad4
  // 0x28: pointer
  if (data?.Anonymous !== undefined) view.setBigUint64(40, data.Anonymous === null ? 0n : BigInt(util.toPointer(data.Anonymous)), true);
  // 0x30: u32
  if (data?.dwStateAction !== undefined) view.setUint32(48, Number(data.dwStateAction), true);
  // 0x34: pad4
  // 0x38: pointer
  if (data?.hWVTStateData !== undefined) view.setBigUint64(56, data.hWVTStateData === null ? 0n : BigInt(util.toPointer(data.hWVTStateData)), true);
  // 0x40: buffer
  if (data?.pwszURLReference !== undefined) {
    (buf as any)._f64 = util.pwstrToFfi(data.pwszURLReference);
    view.setBigUint64(64, (buf as any)._f64 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f64)), true);
  }
  // 0x48: u32
  if (data?.dwProvFlags !== undefined) view.setUint32(72, Number(data.dwProvFlags), true);
  // 0x4c: u32
  if (data?.dwUIContext !== undefined) view.setUint32(76, Number(data.dwUIContext), true);
  // 0x50: pointer
  if (data?.pSignatureSettings !== undefined) view.setBigUint64(80, data.pSignatureSettings === null ? 0n : BigInt(util.toPointer(data.pSignatureSettings)), true);
  return buf;
}

/**
 * Windows.Win32.Security.WinTrust.WINTRUST_SIGNATURE_SETTINGS (size: 32)
 */
export interface WINTRUST_SIGNATURE_SETTINGS {
  /** u32 */
  cbStruct: number;
  /** u32 */
  dwIndex: number;
  /** Windows.Win32.Security.WinTrust.WINTRUST_SIGNATURE_SETTINGS_FLAGS */
  dwFlags: WINTRUST_SIGNATURE_SETTINGS_FLAGS;
  /** u32 */
  cSecondarySigs: number;
  /** u32 */
  dwVerifiedSigIndex: number;
  /** ptr */
  pCryptoPolicy: Deno.PointerValue | Uint8Array | null;
}

export const sizeofWINTRUST_SIGNATURE_SETTINGS = 32;

export function allocWINTRUST_SIGNATURE_SETTINGS(data?: Partial<WINTRUST_SIGNATURE_SETTINGS>): Uint8Array {
  const buf = new Uint8Array(sizeofWINTRUST_SIGNATURE_SETTINGS);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.cbStruct !== undefined) view.setUint32(0, Number(data.cbStruct), true);
  // 0x04: u32
  if (data?.dwIndex !== undefined) view.setUint32(4, Number(data.dwIndex), true);
  // 0x08: u32
  if (data?.dwFlags !== undefined) view.setUint32(8, Number(data.dwFlags), true);
  // 0x0c: u32
  if (data?.cSecondarySigs !== undefined) view.setUint32(12, Number(data.cSecondarySigs), true);
  // 0x10: u32
  if (data?.dwVerifiedSigIndex !== undefined) view.setUint32(16, Number(data.dwVerifiedSigIndex), true);
  // 0x14: pad4
  // 0x18: pointer
  if (data?.pCryptoPolicy !== undefined) view.setBigUint64(24, data.pCryptoPolicy === null ? 0n : BigInt(util.toPointer(data.pCryptoPolicy)), true);
  return buf;
}

/**
 * Windows.Win32.Security.WinTrust.WINTRUST_FILE_INFO (size: 32)
 */
export interface WINTRUST_FILE_INFO {
  /** u32 */
  cbStruct: number;
  /** Windows.Win32.Foundation.PWSTR */
  pcwszFilePath: string | null;
  /** Windows.Win32.Foundation.HANDLE */
  hFile: Uint8Array | Deno.PointerValue | null;
  /** ptr */
  pgKnownSubject: Deno.PointerValue | Uint8Array | null;
}

export const sizeofWINTRUST_FILE_INFO = 32;

export function allocWINTRUST_FILE_INFO(data?: Partial<WINTRUST_FILE_INFO>): Uint8Array {
  const buf = new Uint8Array(sizeofWINTRUST_FILE_INFO);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.cbStruct !== undefined) view.setUint32(0, Number(data.cbStruct), true);
  // 0x04: pad4
  // 0x08: buffer
  if (data?.pcwszFilePath !== undefined) {
    (buf as any)._f8 = util.pwstrToFfi(data.pcwszFilePath);
    view.setBigUint64(8, (buf as any)._f8 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f8)), true);
  }
  // 0x10: pointer
  if (data?.hFile !== undefined) view.setBigUint64(16, data.hFile === null ? 0n : BigInt(util.toPointer(data.hFile)), true);
  // 0x18: pointer
  if (data?.pgKnownSubject !== undefined) view.setBigUint64(24, data.pgKnownSubject === null ? 0n : BigInt(util.toPointer(data.pgKnownSubject)), true);
  return buf;
}

/**
 * Windows.Win32.Security.WinTrust.WINTRUST_CATALOG_INFO (size: 72)
 */
export interface WINTRUST_CATALOG_INFO {
  /** u32 */
  cbStruct: number;
  /** u32 */
  dwCatalogVersion: number;
  /** Windows.Win32.Foundation.PWSTR */
  pcwszCatalogFilePath: string | null;
  /** Windows.Win32.Foundation.PWSTR */
  pcwszMemberTag: string | null;
  /** Windows.Win32.Foundation.PWSTR */
  pcwszMemberFilePath: string | null;
  /** Windows.Win32.Foundation.HANDLE */
  hMemberFile: Uint8Array | Deno.PointerValue | null;
  /** ptr */
  pbCalculatedFileHash: Deno.PointerValue | Uint8Array | null;
  /** u32 */
  cbCalculatedFileHash: number;
  /** ptr */
  pcCatalogContext: Deno.PointerValue | Uint8Array | null;
  /** isize */
  hCatAdmin: Deno.PointerValue;
}

export const sizeofWINTRUST_CATALOG_INFO = 72;

export function allocWINTRUST_CATALOG_INFO(data?: Partial<WINTRUST_CATALOG_INFO>): Uint8Array {
  const buf = new Uint8Array(sizeofWINTRUST_CATALOG_INFO);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.cbStruct !== undefined) view.setUint32(0, Number(data.cbStruct), true);
  // 0x04: u32
  if (data?.dwCatalogVersion !== undefined) view.setUint32(4, Number(data.dwCatalogVersion), true);
  // 0x08: buffer
  if (data?.pcwszCatalogFilePath !== undefined) {
    (buf as any)._f8 = util.pwstrToFfi(data.pcwszCatalogFilePath);
    view.setBigUint64(8, (buf as any)._f8 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f8)), true);
  }
  // 0x10: buffer
  if (data?.pcwszMemberTag !== undefined) {
    (buf as any)._f16 = util.pwstrToFfi(data.pcwszMemberTag);
    view.setBigUint64(16, (buf as any)._f16 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f16)), true);
  }
  // 0x18: buffer
  if (data?.pcwszMemberFilePath !== undefined) {
    (buf as any)._f24 = util.pwstrToFfi(data.pcwszMemberFilePath);
    view.setBigUint64(24, (buf as any)._f24 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f24)), true);
  }
  // 0x20: pointer
  if (data?.hMemberFile !== undefined) view.setBigUint64(32, data.hMemberFile === null ? 0n : BigInt(util.toPointer(data.hMemberFile)), true);
  // 0x28: pointer
  if (data?.pbCalculatedFileHash !== undefined) view.setBigUint64(40, data.pbCalculatedFileHash === null ? 0n : BigInt(util.toPointer(data.pbCalculatedFileHash)), true);
  // 0x30: u32
  if (data?.cbCalculatedFileHash !== undefined) view.setUint32(48, Number(data.cbCalculatedFileHash), true);
  // 0x34: pad4
  // 0x38: pointer
  if (data?.pcCatalogContext !== undefined) view.setBigUint64(56, data.pcCatalogContext === null ? 0n : BigInt(util.toPointer(data.pcCatalogContext)), true);
  // 0x40: isize
  if (data?.hCatAdmin !== undefined) view.setBigInt64(64, BigInt(data.hCatAdmin), true);
  return buf;
}

/**
 * Windows.Win32.Security.WinTrust.WINTRUST_BLOB_INFO (size: 56)
 */
export interface WINTRUST_BLOB_INFO {
  /** u32 */
  cbStruct: number;
  /** System.Guid */
  gSubject: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Foundation.PWSTR */
  pcwszDisplayName: string | null;
  /** u32 */
  cbMemObject: number;
  /** ptr */
  pbMemObject: Deno.PointerValue | Uint8Array | null;
  /** u32 */
  cbMemSignedMsg: number;
  /** ptr */
  pbMemSignedMsg: Deno.PointerValue | Uint8Array | null;
}

export const sizeofWINTRUST_BLOB_INFO = 56;

export function allocWINTRUST_BLOB_INFO(data?: Partial<WINTRUST_BLOB_INFO>): Uint8Array {
  const buf = new Uint8Array(sizeofWINTRUST_BLOB_INFO);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.cbStruct !== undefined) view.setUint32(0, Number(data.cbStruct), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.gSubject !== undefined) view.setBigUint64(8, data.gSubject === null ? 0n : BigInt(util.toPointer(data.gSubject)), true);
  // 0x10: buffer
  if (data?.pcwszDisplayName !== undefined) {
    (buf as any)._f16 = util.pwstrToFfi(data.pcwszDisplayName);
    view.setBigUint64(16, (buf as any)._f16 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f16)), true);
  }
  // 0x18: u32
  if (data?.cbMemObject !== undefined) view.setUint32(24, Number(data.cbMemObject), true);
  // 0x1c: pad4
  // 0x20: pointer
  if (data?.pbMemObject !== undefined) view.setBigUint64(32, data.pbMemObject === null ? 0n : BigInt(util.toPointer(data.pbMemObject)), true);
  // 0x28: u32
  if (data?.cbMemSignedMsg !== undefined) view.setUint32(40, Number(data.cbMemSignedMsg), true);
  // 0x2c: pad4
  // 0x30: pointer
  if (data?.pbMemSignedMsg !== undefined) view.setBigUint64(48, data.pbMemSignedMsg === null ? 0n : BigInt(util.toPointer(data.pbMemSignedMsg)), true);
  return buf;
}

/**
 * Windows.Win32.Security.WinTrust.WINTRUST_SGNR_INFO (size: 40)
 */
export interface WINTRUST_SGNR_INFO {
  /** u32 */
  cbStruct: number;
  /** Windows.Win32.Foundation.PWSTR */
  pcwszDisplayName: string | null;
  /** ptr */
  psSignerInfo: Deno.PointerValue | Uint8Array | null;
  /** u32 */
  chStores: number;
  /** ptr */
  pahStores: Deno.PointerValue | Uint8Array | null;
}

export const sizeofWINTRUST_SGNR_INFO = 40;

export function allocWINTRUST_SGNR_INFO(data?: Partial<WINTRUST_SGNR_INFO>): Uint8Array {
  const buf = new Uint8Array(sizeofWINTRUST_SGNR_INFO);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.cbStruct !== undefined) view.setUint32(0, Number(data.cbStruct), true);
  // 0x04: pad4
  // 0x08: buffer
  if (data?.pcwszDisplayName !== undefined) {
    (buf as any)._f8 = util.pwstrToFfi(data.pcwszDisplayName);
    view.setBigUint64(8, (buf as any)._f8 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f8)), true);
  }
  // 0x10: pointer
  if (data?.psSignerInfo !== undefined) view.setBigUint64(16, data.psSignerInfo === null ? 0n : BigInt(util.toPointer(data.psSignerInfo)), true);
  // 0x18: u32
  if (data?.chStores !== undefined) view.setUint32(24, Number(data.chStores), true);
  // 0x1c: pad4
  // 0x20: pointer
  if (data?.pahStores !== undefined) view.setBigUint64(32, data.pahStores === null ? 0n : BigInt(util.toPointer(data.pahStores)), true);
  return buf;
}

/**
 * Windows.Win32.Security.WinTrust.WINTRUST_CERT_INFO (size: 56)
 */
export interface WINTRUST_CERT_INFO {
  /** u32 */
  cbStruct: number;
  /** Windows.Win32.Foundation.PWSTR */
  pcwszDisplayName: string | null;
  /** ptr */
  psCertContext: Deno.PointerValue | Uint8Array | null;
  /** u32 */
  chStores: number;
  /** ptr */
  pahStores: Deno.PointerValue | Uint8Array | null;
  /** u32 */
  dwFlags: number;
  /** ptr */
  psftVerifyAsOf: Deno.PointerValue | Uint8Array | null;
}

export const sizeofWINTRUST_CERT_INFO = 56;

export function allocWINTRUST_CERT_INFO(data?: Partial<WINTRUST_CERT_INFO>): Uint8Array {
  const buf = new Uint8Array(sizeofWINTRUST_CERT_INFO);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.cbStruct !== undefined) view.setUint32(0, Number(data.cbStruct), true);
  // 0x04: pad4
  // 0x08: buffer
  if (data?.pcwszDisplayName !== undefined) {
    (buf as any)._f8 = util.pwstrToFfi(data.pcwszDisplayName);
    view.setBigUint64(8, (buf as any)._f8 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f8)), true);
  }
  // 0x10: pointer
  if (data?.psCertContext !== undefined) view.setBigUint64(16, data.psCertContext === null ? 0n : BigInt(util.toPointer(data.psCertContext)), true);
  // 0x18: u32
  if (data?.chStores !== undefined) view.setUint32(24, Number(data.chStores), true);
  // 0x1c: pad4
  // 0x20: pointer
  if (data?.pahStores !== undefined) view.setBigUint64(32, data.pahStores === null ? 0n : BigInt(util.toPointer(data.pahStores)), true);
  // 0x28: u32
  if (data?.dwFlags !== undefined) view.setUint32(40, Number(data.dwFlags), true);
  // 0x2c: pad4
  // 0x30: pointer
  if (data?.psftVerifyAsOf !== undefined) view.setBigUint64(48, data.psftVerifyAsOf === null ? 0n : BigInt(util.toPointer(data.psftVerifyAsOf)), true);
  return buf;
}

export type BOOL = number;

export type HWND = Deno.PointerValue;

export type PSTR = Deno.PointerValue | Uint8Array | null;

/**
 * Windows.Win32.Foundation.FILETIME (size: 8)
 */
export interface FILETIME {
  /** u32 */
  dwLowDateTime: number;
  /** u32 */
  dwHighDateTime: number;
}

export const sizeofFILETIME = 8;

export function allocFILETIME(data?: Partial<FILETIME>): Uint8Array {
  const buf = new Uint8Array(sizeofFILETIME);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.dwLowDateTime !== undefined) view.setUint32(0, Number(data.dwLowDateTime), true);
  // 0x04: u32
  if (data?.dwHighDateTime !== undefined) view.setUint32(4, Number(data.dwHighDateTime), true);
  return buf;
}

/**
 * Windows.Win32.Security.WinTrust.CRYPT_PROVIDER_DATA (size: 240)
 */
export interface CRYPT_PROVIDER_DATA {
  /** u32 */
  cbStruct: number;
  /** ptr */
  pWintrustData: Deno.PointerValue | Uint8Array | null;
  /** Windows.Win32.Foundation.BOOL */
  fOpenedFile: boolean;
  /** Windows.Win32.Foundation.HWND */
  hWndParent: Deno.PointerValue | null;
  /** ptr */
  pgActionID: Deno.PointerValue | Uint8Array | null;
  /** usize */
  hProv: Deno.PointerValue;
  /** u32 */
  dwError: number;
  /** u32 */
  dwRegSecuritySettings: number;
  /** u32 */
  dwRegPolicySettings: number;
  /** ptr */
  psPfns: Deno.PointerValue | Uint8Array | null;
  /** u32 */
  cdwTrustStepErrors: number;
  /** ptr */
  padwTrustStepErrors: Deno.PointerValue | Uint8Array | null;
  /** u32 */
  chStores: number;
  /** ptr */
  pahStores: Deno.PointerValue | Uint8Array | null;
  /** u32 */
  dwEncoding: number;
  /** ptr */
  hMsg: Deno.PointerValue | Uint8Array | null;
  /** u32 */
  csSigners: number;
  /** ptr */
  pasSigners: Deno.PointerValue | Uint8Array | null;
  /** u32 */
  csProvPrivData: number;
  /** ptr */
  pasProvPrivData: Deno.PointerValue | Uint8Array | null;
  /** u32 */
  dwSubjectChoice: number;
  /** _Anonymous_e__Union */
  Anonymous: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Foundation.PSTR */
  pszUsageOID: string | null;
  /** Windows.Win32.Foundation.BOOL */
  fRecallWithState: boolean;
  /** Windows.Win32.Foundation.FILETIME */
  sftSystemTime: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Foundation.PSTR */
  pszCTLSignerUsageOID: string | null;
  /** u32 */
  dwProvFlags: number;
  /** u32 */
  dwFinalError: number;
  /** ptr */
  pRequestUsage: Deno.PointerValue | Uint8Array | null;
  /** u32 */
  dwTrustPubSettings: number;
  /** u32 */
  dwUIStateFlags: number;
  /** ptr */
  pSigState: Deno.PointerValue | Uint8Array | null;
  /** ptr */
  pSigSettings: Deno.PointerValue | Uint8Array | null;
}

export const sizeofCRYPT_PROVIDER_DATA = 240;

export function allocCRYPT_PROVIDER_DATA(data?: Partial<CRYPT_PROVIDER_DATA>): Uint8Array {
  const buf = new Uint8Array(sizeofCRYPT_PROVIDER_DATA);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.cbStruct !== undefined) view.setUint32(0, Number(data.cbStruct), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.pWintrustData !== undefined) view.setBigUint64(8, data.pWintrustData === null ? 0n : BigInt(util.toPointer(data.pWintrustData)), true);
  // 0x10: i32
  if (data?.fOpenedFile !== undefined) view.setInt32(16, Number(data.fOpenedFile), true);
  // 0x14: pad4
  // 0x18: pointer
  if (data?.hWndParent !== undefined) view.setBigUint64(24, data.hWndParent === null ? 0n : BigInt(util.toPointer(data.hWndParent)), true);
  // 0x20: pointer
  if (data?.pgActionID !== undefined) view.setBigUint64(32, data.pgActionID === null ? 0n : BigInt(util.toPointer(data.pgActionID)), true);
  // 0x28: usize
  if (data?.hProv !== undefined) view.setBigUint64(40, BigInt(data.hProv), true);
  // 0x30: u32
  if (data?.dwError !== undefined) view.setUint32(48, Number(data.dwError), true);
  // 0x34: u32
  if (data?.dwRegSecuritySettings !== undefined) view.setUint32(52, Number(data.dwRegSecuritySettings), true);
  // 0x38: u32
  if (data?.dwRegPolicySettings !== undefined) view.setUint32(56, Number(data.dwRegPolicySettings), true);
  // 0x3c: pad4
  // 0x40: pointer
  if (data?.psPfns !== undefined) view.setBigUint64(64, data.psPfns === null ? 0n : BigInt(util.toPointer(data.psPfns)), true);
  // 0x48: u32
  if (data?.cdwTrustStepErrors !== undefined) view.setUint32(72, Number(data.cdwTrustStepErrors), true);
  // 0x4c: pad4
  // 0x50: pointer
  if (data?.padwTrustStepErrors !== undefined) view.setBigUint64(80, data.padwTrustStepErrors === null ? 0n : BigInt(util.toPointer(data.padwTrustStepErrors)), true);
  // 0x58: u32
  if (data?.chStores !== undefined) view.setUint32(88, Number(data.chStores), true);
  // 0x5c: pad4
  // 0x60: pointer
  if (data?.pahStores !== undefined) view.setBigUint64(96, data.pahStores === null ? 0n : BigInt(util.toPointer(data.pahStores)), true);
  // 0x68: u32
  if (data?.dwEncoding !== undefined) view.setUint32(104, Number(data.dwEncoding), true);
  // 0x6c: pad4
  // 0x70: pointer
  if (data?.hMsg !== undefined) view.setBigUint64(112, data.hMsg === null ? 0n : BigInt(util.toPointer(data.hMsg)), true);
  // 0x78: u32
  if (data?.csSigners !== undefined) view.setUint32(120, Number(data.csSigners), true);
  // 0x7c: pad4
  // 0x80: pointer
  if (data?.pasSigners !== undefined) view.setBigUint64(128, data.pasSigners === null ? 0n : BigInt(util.toPointer(data.pasSigners)), true);
  // 0x88: u32
  if (data?.csProvPrivData !== undefined) view.setUint32(136, Number(data.csProvPrivData), true);
  // 0x8c: pad4
  // 0x90: pointer
  if (data?.pasProvPrivData !== undefined) view.setBigUint64(144, data.pasProvPrivData === null ? 0n : BigInt(util.toPointer(data.pasProvPrivData)), true);
  // 0x98: u32
  if (data?.dwSubjectChoice !== undefined) view.setUint32(152, Number(data.dwSubjectChoice), true);
  // 0x9c: pad4
  // 0xa0: pointer
  if (data?.Anonymous !== undefined) view.setBigUint64(160, data.Anonymous === null ? 0n : BigInt(util.toPointer(data.Anonymous)), true);
  // 0xa8: buffer
  if (data?.pszUsageOID !== undefined) {
    (buf as any)._f168 = util.pstrToFfi(data.pszUsageOID);
    view.setBigUint64(168, (buf as any)._f168 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f168)), true);
  }
  // 0xb0: i32
  if (data?.fRecallWithState !== undefined) view.setInt32(176, Number(data.fRecallWithState), true);
  // 0xb4: pad4
  // 0xb8: pointer
  if (data?.sftSystemTime !== undefined) view.setBigUint64(184, data.sftSystemTime === null ? 0n : BigInt(util.toPointer(data.sftSystemTime)), true);
  // 0xc0: buffer
  if (data?.pszCTLSignerUsageOID !== undefined) {
    (buf as any)._f192 = util.pstrToFfi(data.pszCTLSignerUsageOID);
    view.setBigUint64(192, (buf as any)._f192 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f192)), true);
  }
  // 0xc8: u32
  if (data?.dwProvFlags !== undefined) view.setUint32(200, Number(data.dwProvFlags), true);
  // 0xcc: u32
  if (data?.dwFinalError !== undefined) view.setUint32(204, Number(data.dwFinalError), true);
  // 0xd0: pointer
  if (data?.pRequestUsage !== undefined) view.setBigUint64(208, data.pRequestUsage === null ? 0n : BigInt(util.toPointer(data.pRequestUsage)), true);
  // 0xd8: u32
  if (data?.dwTrustPubSettings !== undefined) view.setUint32(216, Number(data.dwTrustPubSettings), true);
  // 0xdc: u32
  if (data?.dwUIStateFlags !== undefined) view.setUint32(220, Number(data.dwUIStateFlags), true);
  // 0xe0: pointer
  if (data?.pSigState !== undefined) view.setBigUint64(224, data.pSigState === null ? 0n : BigInt(util.toPointer(data.pSigState)), true);
  // 0xe8: pointer
  if (data?.pSigSettings !== undefined) view.setBigUint64(232, data.pSigSettings === null ? 0n : BigInt(util.toPointer(data.pSigSettings)), true);
  return buf;
}

/**
 * Windows.Win32.Security.WinTrust.CRYPT_PROVIDER_SIGSTATE (size: 64)
 */
export interface CRYPT_PROVIDER_SIGSTATE {
  /** u32 */
  cbStruct: number;
  /** ptr */
  rhSecondarySigs: Deno.PointerValue | Uint8Array | null;
  /** ptr */
  hPrimarySig: Deno.PointerValue | Uint8Array | null;
  /** Windows.Win32.Foundation.BOOL */
  fFirstAttemptMade: boolean;
  /** Windows.Win32.Foundation.BOOL */
  fNoMoreSigs: boolean;
  /** u32 */
  cSecondarySigs: number;
  /** u32 */
  dwCurrentIndex: number;
  /** Windows.Win32.Foundation.BOOL */
  fSupportMultiSig: boolean;
  /** u32 */
  dwCryptoPolicySupport: number;
  /** u32 */
  iAttemptCount: number;
  /** Windows.Win32.Foundation.BOOL */
  fCheckedSealing: boolean;
  /** ptr */
  pSealingSignature: Deno.PointerValue | Uint8Array | null;
}

export const sizeofCRYPT_PROVIDER_SIGSTATE = 64;

export function allocCRYPT_PROVIDER_SIGSTATE(data?: Partial<CRYPT_PROVIDER_SIGSTATE>): Uint8Array {
  const buf = new Uint8Array(sizeofCRYPT_PROVIDER_SIGSTATE);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.cbStruct !== undefined) view.setUint32(0, Number(data.cbStruct), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.rhSecondarySigs !== undefined) view.setBigUint64(8, data.rhSecondarySigs === null ? 0n : BigInt(util.toPointer(data.rhSecondarySigs)), true);
  // 0x10: pointer
  if (data?.hPrimarySig !== undefined) view.setBigUint64(16, data.hPrimarySig === null ? 0n : BigInt(util.toPointer(data.hPrimarySig)), true);
  // 0x18: i32
  if (data?.fFirstAttemptMade !== undefined) view.setInt32(24, Number(data.fFirstAttemptMade), true);
  // 0x1c: i32
  if (data?.fNoMoreSigs !== undefined) view.setInt32(28, Number(data.fNoMoreSigs), true);
  // 0x20: u32
  if (data?.cSecondarySigs !== undefined) view.setUint32(32, Number(data.cSecondarySigs), true);
  // 0x24: u32
  if (data?.dwCurrentIndex !== undefined) view.setUint32(36, Number(data.dwCurrentIndex), true);
  // 0x28: i32
  if (data?.fSupportMultiSig !== undefined) view.setInt32(40, Number(data.fSupportMultiSig), true);
  // 0x2c: u32
  if (data?.dwCryptoPolicySupport !== undefined) view.setUint32(44, Number(data.dwCryptoPolicySupport), true);
  // 0x30: u32
  if (data?.iAttemptCount !== undefined) view.setUint32(48, Number(data.iAttemptCount), true);
  // 0x34: i32
  if (data?.fCheckedSealing !== undefined) view.setInt32(52, Number(data.fCheckedSealing), true);
  // 0x38: pointer
  if (data?.pSealingSignature !== undefined) view.setBigUint64(56, data.pSealingSignature === null ? 0n : BigInt(util.toPointer(data.pSealingSignature)), true);
  return buf;
}

/**
 * Windows.Win32.Security.WinTrust.CRYPT_PROVIDER_FUNCTIONS (size: 128)
 */
export interface CRYPT_PROVIDER_FUNCTIONS {
  /** u32 */
  cbStruct: number;
  /** Windows.Win32.Security.WinTrust.PFN_CPD_MEM_ALLOC */
  pfnAlloc: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Security.WinTrust.PFN_CPD_MEM_FREE */
  pfnFree: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Security.WinTrust.PFN_CPD_ADD_STORE */
  pfnAddStore2Chain: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Security.WinTrust.PFN_CPD_ADD_SGNR */
  pfnAddSgnr2Chain: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Security.WinTrust.PFN_CPD_ADD_CERT */
  pfnAddCert2Chain: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Security.WinTrust.PFN_CPD_ADD_PRIVDATA */
  pfnAddPrivData2Chain: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Security.WinTrust.PFN_PROVIDER_INIT_CALL */
  pfnInitialize: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Security.WinTrust.PFN_PROVIDER_OBJTRUST_CALL */
  pfnObjectTrust: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Security.WinTrust.PFN_PROVIDER_SIGTRUST_CALL */
  pfnSignatureTrust: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Security.WinTrust.PFN_PROVIDER_CERTTRUST_CALL */
  pfnCertificateTrust: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Security.WinTrust.PFN_PROVIDER_FINALPOLICY_CALL */
  pfnFinalPolicy: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Security.WinTrust.PFN_PROVIDER_CERTCHKPOLICY_CALL */
  pfnCertCheckPolicy: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Security.WinTrust.PFN_PROVIDER_TESTFINALPOLICY_CALL */
  pfnTestFinalPolicy: Uint8Array | Deno.PointerValue | null;
  /** ptr */
  psUIpfns: Deno.PointerValue | Uint8Array | null;
  /** Windows.Win32.Security.WinTrust.PFN_PROVIDER_CLEANUP_CALL */
  pfnCleanupPolicy: Uint8Array | Deno.PointerValue | null;
}

export const sizeofCRYPT_PROVIDER_FUNCTIONS = 128;

export function allocCRYPT_PROVIDER_FUNCTIONS(data?: Partial<CRYPT_PROVIDER_FUNCTIONS>): Uint8Array {
  const buf = new Uint8Array(sizeofCRYPT_PROVIDER_FUNCTIONS);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.cbStruct !== undefined) view.setUint32(0, Number(data.cbStruct), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.pfnAlloc !== undefined) view.setBigUint64(8, data.pfnAlloc === null ? 0n : BigInt(util.toPointer(data.pfnAlloc)), true);
  // 0x10: pointer
  if (data?.pfnFree !== undefined) view.setBigUint64(16, data.pfnFree === null ? 0n : BigInt(util.toPointer(data.pfnFree)), true);
  // 0x18: pointer
  if (data?.pfnAddStore2Chain !== undefined) view.setBigUint64(24, data.pfnAddStore2Chain === null ? 0n : BigInt(util.toPointer(data.pfnAddStore2Chain)), true);
  // 0x20: pointer
  if (data?.pfnAddSgnr2Chain !== undefined) view.setBigUint64(32, data.pfnAddSgnr2Chain === null ? 0n : BigInt(util.toPointer(data.pfnAddSgnr2Chain)), true);
  // 0x28: pointer
  if (data?.pfnAddCert2Chain !== undefined) view.setBigUint64(40, data.pfnAddCert2Chain === null ? 0n : BigInt(util.toPointer(data.pfnAddCert2Chain)), true);
  // 0x30: pointer
  if (data?.pfnAddPrivData2Chain !== undefined) view.setBigUint64(48, data.pfnAddPrivData2Chain === null ? 0n : BigInt(util.toPointer(data.pfnAddPrivData2Chain)), true);
  // 0x38: pointer
  if (data?.pfnInitialize !== undefined) view.setBigUint64(56, data.pfnInitialize === null ? 0n : BigInt(util.toPointer(data.pfnInitialize)), true);
  // 0x40: pointer
  if (data?.pfnObjectTrust !== undefined) view.setBigUint64(64, data.pfnObjectTrust === null ? 0n : BigInt(util.toPointer(data.pfnObjectTrust)), true);
  // 0x48: pointer
  if (data?.pfnSignatureTrust !== undefined) view.setBigUint64(72, data.pfnSignatureTrust === null ? 0n : BigInt(util.toPointer(data.pfnSignatureTrust)), true);
  // 0x50: pointer
  if (data?.pfnCertificateTrust !== undefined) view.setBigUint64(80, data.pfnCertificateTrust === null ? 0n : BigInt(util.toPointer(data.pfnCertificateTrust)), true);
  // 0x58: pointer
  if (data?.pfnFinalPolicy !== undefined) view.setBigUint64(88, data.pfnFinalPolicy === null ? 0n : BigInt(util.toPointer(data.pfnFinalPolicy)), true);
  // 0x60: pointer
  if (data?.pfnCertCheckPolicy !== undefined) view.setBigUint64(96, data.pfnCertCheckPolicy === null ? 0n : BigInt(util.toPointer(data.pfnCertCheckPolicy)), true);
  // 0x68: pointer
  if (data?.pfnTestFinalPolicy !== undefined) view.setBigUint64(104, data.pfnTestFinalPolicy === null ? 0n : BigInt(util.toPointer(data.pfnTestFinalPolicy)), true);
  // 0x70: pointer
  if (data?.psUIpfns !== undefined) view.setBigUint64(112, data.psUIpfns === null ? 0n : BigInt(util.toPointer(data.psUIpfns)), true);
  // 0x78: pointer
  if (data?.pfnCleanupPolicy !== undefined) view.setBigUint64(120, data.pfnCleanupPolicy === null ? 0n : BigInt(util.toPointer(data.pfnCleanupPolicy)), true);
  return buf;
}

/**
 * Windows.Win32.Security.WinTrust.CRYPT_PROVUI_FUNCS (size: 48)
 */
export interface CRYPT_PROVUI_FUNCS {
  /** u32 */
  cbStruct: number;
  /** ptr */
  psUIData: Deno.PointerValue | Uint8Array | null;
  /** Windows.Win32.Security.WinTrust.PFN_PROVUI_CALL */
  pfnOnMoreInfoClick: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Security.WinTrust.PFN_PROVUI_CALL */
  pfnOnMoreInfoClickDefault: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Security.WinTrust.PFN_PROVUI_CALL */
  pfnOnAdvancedClick: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Security.WinTrust.PFN_PROVUI_CALL */
  pfnOnAdvancedClickDefault: Uint8Array | Deno.PointerValue | null;
}

export const sizeofCRYPT_PROVUI_FUNCS = 48;

export function allocCRYPT_PROVUI_FUNCS(data?: Partial<CRYPT_PROVUI_FUNCS>): Uint8Array {
  const buf = new Uint8Array(sizeofCRYPT_PROVUI_FUNCS);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.cbStruct !== undefined) view.setUint32(0, Number(data.cbStruct), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.psUIData !== undefined) view.setBigUint64(8, data.psUIData === null ? 0n : BigInt(util.toPointer(data.psUIData)), true);
  // 0x10: pointer
  if (data?.pfnOnMoreInfoClick !== undefined) view.setBigUint64(16, data.pfnOnMoreInfoClick === null ? 0n : BigInt(util.toPointer(data.pfnOnMoreInfoClick)), true);
  // 0x18: pointer
  if (data?.pfnOnMoreInfoClickDefault !== undefined) view.setBigUint64(24, data.pfnOnMoreInfoClickDefault === null ? 0n : BigInt(util.toPointer(data.pfnOnMoreInfoClickDefault)), true);
  // 0x20: pointer
  if (data?.pfnOnAdvancedClick !== undefined) view.setBigUint64(32, data.pfnOnAdvancedClick === null ? 0n : BigInt(util.toPointer(data.pfnOnAdvancedClick)), true);
  // 0x28: pointer
  if (data?.pfnOnAdvancedClickDefault !== undefined) view.setBigUint64(40, data.pfnOnAdvancedClickDefault === null ? 0n : BigInt(util.toPointer(data.pfnOnAdvancedClickDefault)), true);
  return buf;
}

/**
 * Windows.Win32.Security.WinTrust.CRYPT_PROVUI_DATA (size: 64)
 */
export interface CRYPT_PROVUI_DATA {
  /** u32 */
  cbStruct: number;
  /** u32 */
  dwFinalError: number;
  /** Windows.Win32.Foundation.PWSTR */
  pYesButtonText: string | null;
  /** Windows.Win32.Foundation.PWSTR */
  pNoButtonText: string | null;
  /** Windows.Win32.Foundation.PWSTR */
  pMoreInfoButtonText: string | null;
  /** Windows.Win32.Foundation.PWSTR */
  pAdvancedLinkText: string | null;
  /** Windows.Win32.Foundation.PWSTR */
  pCopyActionText: string | null;
  /** Windows.Win32.Foundation.PWSTR */
  pCopyActionTextNoTS: string | null;
  /** Windows.Win32.Foundation.PWSTR */
  pCopyActionTextNotSigned: string | null;
}

export const sizeofCRYPT_PROVUI_DATA = 64;

export function allocCRYPT_PROVUI_DATA(data?: Partial<CRYPT_PROVUI_DATA>): Uint8Array {
  const buf = new Uint8Array(sizeofCRYPT_PROVUI_DATA);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.cbStruct !== undefined) view.setUint32(0, Number(data.cbStruct), true);
  // 0x04: u32
  if (data?.dwFinalError !== undefined) view.setUint32(4, Number(data.dwFinalError), true);
  // 0x08: buffer
  if (data?.pYesButtonText !== undefined) {
    (buf as any)._f8 = util.pwstrToFfi(data.pYesButtonText);
    view.setBigUint64(8, (buf as any)._f8 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f8)), true);
  }
  // 0x10: buffer
  if (data?.pNoButtonText !== undefined) {
    (buf as any)._f16 = util.pwstrToFfi(data.pNoButtonText);
    view.setBigUint64(16, (buf as any)._f16 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f16)), true);
  }
  // 0x18: buffer
  if (data?.pMoreInfoButtonText !== undefined) {
    (buf as any)._f24 = util.pwstrToFfi(data.pMoreInfoButtonText);
    view.setBigUint64(24, (buf as any)._f24 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f24)), true);
  }
  // 0x20: buffer
  if (data?.pAdvancedLinkText !== undefined) {
    (buf as any)._f32 = util.pwstrToFfi(data.pAdvancedLinkText);
    view.setBigUint64(32, (buf as any)._f32 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f32)), true);
  }
  // 0x28: buffer
  if (data?.pCopyActionText !== undefined) {
    (buf as any)._f40 = util.pwstrToFfi(data.pCopyActionText);
    view.setBigUint64(40, (buf as any)._f40 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f40)), true);
  }
  // 0x30: buffer
  if (data?.pCopyActionTextNoTS !== undefined) {
    (buf as any)._f48 = util.pwstrToFfi(data.pCopyActionTextNoTS);
    view.setBigUint64(48, (buf as any)._f48 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f48)), true);
  }
  // 0x38: buffer
  if (data?.pCopyActionTextNotSigned !== undefined) {
    (buf as any)._f56 = util.pwstrToFfi(data.pCopyActionTextNotSigned);
    view.setBigUint64(56, (buf as any)._f56 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f56)), true);
  }
  return buf;
}

/**
 * Windows.Win32.Security.WinTrust.CRYPT_PROVIDER_SGNR (size: 72)
 */
export interface CRYPT_PROVIDER_SGNR {
  /** u32 */
  cbStruct: number;
  /** Windows.Win32.Foundation.FILETIME */
  sftVerifyAsOf: Uint8Array | Deno.PointerValue | null;
  /** u32 */
  csCertChain: number;
  /** ptr */
  pasCertChain: Deno.PointerValue | Uint8Array | null;
  /** u32 */
  dwSignerType: number;
  /** ptr */
  psSigner: Deno.PointerValue | Uint8Array | null;
  /** u32 */
  dwError: number;
  /** u32 */
  csCounterSigners: number;
  /** ptr */
  pasCounterSigners: Deno.PointerValue | Uint8Array | null;
  /** ptr */
  pChainContext: Deno.PointerValue | Uint8Array | null;
}

export const sizeofCRYPT_PROVIDER_SGNR = 72;

export function allocCRYPT_PROVIDER_SGNR(data?: Partial<CRYPT_PROVIDER_SGNR>): Uint8Array {
  const buf = new Uint8Array(sizeofCRYPT_PROVIDER_SGNR);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.cbStruct !== undefined) view.setUint32(0, Number(data.cbStruct), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.sftVerifyAsOf !== undefined) view.setBigUint64(8, data.sftVerifyAsOf === null ? 0n : BigInt(util.toPointer(data.sftVerifyAsOf)), true);
  // 0x10: u32
  if (data?.csCertChain !== undefined) view.setUint32(16, Number(data.csCertChain), true);
  // 0x14: pad4
  // 0x18: pointer
  if (data?.pasCertChain !== undefined) view.setBigUint64(24, data.pasCertChain === null ? 0n : BigInt(util.toPointer(data.pasCertChain)), true);
  // 0x20: u32
  if (data?.dwSignerType !== undefined) view.setUint32(32, Number(data.dwSignerType), true);
  // 0x24: pad4
  // 0x28: pointer
  if (data?.psSigner !== undefined) view.setBigUint64(40, data.psSigner === null ? 0n : BigInt(util.toPointer(data.psSigner)), true);
  // 0x30: u32
  if (data?.dwError !== undefined) view.setUint32(48, Number(data.dwError), true);
  // 0x34: u32
  if (data?.csCounterSigners !== undefined) view.setUint32(52, Number(data.csCounterSigners), true);
  // 0x38: pointer
  if (data?.pasCounterSigners !== undefined) view.setBigUint64(56, data.pasCounterSigners === null ? 0n : BigInt(util.toPointer(data.pasCounterSigners)), true);
  // 0x40: pointer
  if (data?.pChainContext !== undefined) view.setBigUint64(64, data.pChainContext === null ? 0n : BigInt(util.toPointer(data.pChainContext)), true);
  return buf;
}

/**
 * Windows.Win32.Security.WinTrust.CRYPT_PROVIDER_CERT (size: 88)
 */
export interface CRYPT_PROVIDER_CERT {
  /** u32 */
  cbStruct: number;
  /** ptr */
  pCert: Deno.PointerValue | Uint8Array | null;
  /** Windows.Win32.Foundation.BOOL */
  fCommercial: boolean;
  /** Windows.Win32.Foundation.BOOL */
  fTrustedRoot: boolean;
  /** Windows.Win32.Foundation.BOOL */
  fSelfSigned: boolean;
  /** Windows.Win32.Foundation.BOOL */
  fTestCert: boolean;
  /** u32 */
  dwRevokedReason: number;
  /** u32 */
  dwConfidence: number;
  /** u32 */
  dwError: number;
  /** ptr */
  pTrustListContext: Deno.PointerValue | Uint8Array | null;
  /** Windows.Win32.Foundation.BOOL */
  fTrustListSignerCert: boolean;
  /** ptr */
  pCtlContext: Deno.PointerValue | Uint8Array | null;
  /** u32 */
  dwCtlError: number;
  /** Windows.Win32.Foundation.BOOL */
  fIsCyclic: boolean;
  /** ptr */
  pChainElement: Deno.PointerValue | Uint8Array | null;
}

export const sizeofCRYPT_PROVIDER_CERT = 88;

export function allocCRYPT_PROVIDER_CERT(data?: Partial<CRYPT_PROVIDER_CERT>): Uint8Array {
  const buf = new Uint8Array(sizeofCRYPT_PROVIDER_CERT);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.cbStruct !== undefined) view.setUint32(0, Number(data.cbStruct), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.pCert !== undefined) view.setBigUint64(8, data.pCert === null ? 0n : BigInt(util.toPointer(data.pCert)), true);
  // 0x10: i32
  if (data?.fCommercial !== undefined) view.setInt32(16, Number(data.fCommercial), true);
  // 0x14: i32
  if (data?.fTrustedRoot !== undefined) view.setInt32(20, Number(data.fTrustedRoot), true);
  // 0x18: i32
  if (data?.fSelfSigned !== undefined) view.setInt32(24, Number(data.fSelfSigned), true);
  // 0x1c: i32
  if (data?.fTestCert !== undefined) view.setInt32(28, Number(data.fTestCert), true);
  // 0x20: u32
  if (data?.dwRevokedReason !== undefined) view.setUint32(32, Number(data.dwRevokedReason), true);
  // 0x24: u32
  if (data?.dwConfidence !== undefined) view.setUint32(36, Number(data.dwConfidence), true);
  // 0x28: u32
  if (data?.dwError !== undefined) view.setUint32(40, Number(data.dwError), true);
  // 0x2c: pad4
  // 0x30: pointer
  if (data?.pTrustListContext !== undefined) view.setBigUint64(48, data.pTrustListContext === null ? 0n : BigInt(util.toPointer(data.pTrustListContext)), true);
  // 0x38: i32
  if (data?.fTrustListSignerCert !== undefined) view.setInt32(56, Number(data.fTrustListSignerCert), true);
  // 0x3c: pad4
  // 0x40: pointer
  if (data?.pCtlContext !== undefined) view.setBigUint64(64, data.pCtlContext === null ? 0n : BigInt(util.toPointer(data.pCtlContext)), true);
  // 0x48: u32
  if (data?.dwCtlError !== undefined) view.setUint32(72, Number(data.dwCtlError), true);
  // 0x4c: i32
  if (data?.fIsCyclic !== undefined) view.setInt32(76, Number(data.fIsCyclic), true);
  // 0x50: pointer
  if (data?.pChainElement !== undefined) view.setBigUint64(80, data.pChainElement === null ? 0n : BigInt(util.toPointer(data.pChainElement)), true);
  return buf;
}

/**
 * Windows.Win32.Security.WinTrust.CRYPT_PROVIDER_PRIVDATA (size: 32)
 */
export interface CRYPT_PROVIDER_PRIVDATA {
  /** u32 */
  cbStruct: number;
  /** System.Guid */
  gProviderID: Uint8Array | Deno.PointerValue | null;
  /** u32 */
  cbProvData: number;
  /** ptr */
  pvProvData: Deno.PointerValue | Uint8Array | null;
}

export const sizeofCRYPT_PROVIDER_PRIVDATA = 32;

export function allocCRYPT_PROVIDER_PRIVDATA(data?: Partial<CRYPT_PROVIDER_PRIVDATA>): Uint8Array {
  const buf = new Uint8Array(sizeofCRYPT_PROVIDER_PRIVDATA);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.cbStruct !== undefined) view.setUint32(0, Number(data.cbStruct), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.gProviderID !== undefined) view.setBigUint64(8, data.gProviderID === null ? 0n : BigInt(util.toPointer(data.gProviderID)), true);
  // 0x10: u32
  if (data?.cbProvData !== undefined) view.setUint32(16, Number(data.cbProvData), true);
  // 0x14: pad4
  // 0x18: pointer
  if (data?.pvProvData !== undefined) view.setBigUint64(24, data.pvProvData === null ? 0n : BigInt(util.toPointer(data.pvProvData)), true);
  return buf;
}

/**
 * Windows.Win32.Security.WinTrust.PROVDATA_SIP (size: 56)
 */
export interface PROVDATA_SIP {
  /** u32 */
  cbStruct: number;
  /** System.Guid */
  gSubject: Uint8Array | Deno.PointerValue | null;
  /** ptr */
  pSip: Deno.PointerValue | Uint8Array | null;
  /** ptr */
  pCATSip: Deno.PointerValue | Uint8Array | null;
  /** ptr */
  psSipSubjectInfo: Deno.PointerValue | Uint8Array | null;
  /** ptr */
  psSipCATSubjectInfo: Deno.PointerValue | Uint8Array | null;
  /** ptr */
  psIndirectData: Deno.PointerValue | Uint8Array | null;
}

export const sizeofPROVDATA_SIP = 56;

export function allocPROVDATA_SIP(data?: Partial<PROVDATA_SIP>): Uint8Array {
  const buf = new Uint8Array(sizeofPROVDATA_SIP);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.cbStruct !== undefined) view.setUint32(0, Number(data.cbStruct), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.gSubject !== undefined) view.setBigUint64(8, data.gSubject === null ? 0n : BigInt(util.toPointer(data.gSubject)), true);
  // 0x10: pointer
  if (data?.pSip !== undefined) view.setBigUint64(16, data.pSip === null ? 0n : BigInt(util.toPointer(data.pSip)), true);
  // 0x18: pointer
  if (data?.pCATSip !== undefined) view.setBigUint64(24, data.pCATSip === null ? 0n : BigInt(util.toPointer(data.pCATSip)), true);
  // 0x20: pointer
  if (data?.psSipSubjectInfo !== undefined) view.setBigUint64(32, data.psSipSubjectInfo === null ? 0n : BigInt(util.toPointer(data.psSipSubjectInfo)), true);
  // 0x28: pointer
  if (data?.psSipCATSubjectInfo !== undefined) view.setBigUint64(40, data.psSipCATSubjectInfo === null ? 0n : BigInt(util.toPointer(data.psSipCATSubjectInfo)), true);
  // 0x30: pointer
  if (data?.psIndirectData !== undefined) view.setBigUint64(48, data.psIndirectData === null ? 0n : BigInt(util.toPointer(data.psIndirectData)), true);
  return buf;
}

/**
 * Windows.Win32.Security.WinTrust.CRYPT_TRUST_REG_ENTRY (size: 24)
 */
export interface CRYPT_TRUST_REG_ENTRY {
  /** u32 */
  cbStruct: number;
  /** Windows.Win32.Foundation.PWSTR */
  pwszDLLName: string | null;
  /** Windows.Win32.Foundation.PWSTR */
  pwszFunctionName: string | null;
}

export const sizeofCRYPT_TRUST_REG_ENTRY = 24;

export function allocCRYPT_TRUST_REG_ENTRY(data?: Partial<CRYPT_TRUST_REG_ENTRY>): Uint8Array {
  const buf = new Uint8Array(sizeofCRYPT_TRUST_REG_ENTRY);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.cbStruct !== undefined) view.setUint32(0, Number(data.cbStruct), true);
  // 0x04: pad4
  // 0x08: buffer
  if (data?.pwszDLLName !== undefined) {
    (buf as any)._f8 = util.pwstrToFfi(data.pwszDLLName);
    view.setBigUint64(8, (buf as any)._f8 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f8)), true);
  }
  // 0x10: buffer
  if (data?.pwszFunctionName !== undefined) {
    (buf as any)._f16 = util.pwstrToFfi(data.pwszFunctionName);
    view.setBigUint64(16, (buf as any)._f16 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f16)), true);
  }
  return buf;
}

/**
 * Windows.Win32.Security.WinTrust.CRYPT_REGISTER_ACTIONID (size: 72)
 */
export interface CRYPT_REGISTER_ACTIONID {
  /** u32 */
  cbStruct: number;
  /** Windows.Win32.Security.WinTrust.CRYPT_TRUST_REG_ENTRY */
  sInitProvider: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Security.WinTrust.CRYPT_TRUST_REG_ENTRY */
  sObjectProvider: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Security.WinTrust.CRYPT_TRUST_REG_ENTRY */
  sSignatureProvider: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Security.WinTrust.CRYPT_TRUST_REG_ENTRY */
  sCertificateProvider: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Security.WinTrust.CRYPT_TRUST_REG_ENTRY */
  sCertificatePolicyProvider: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Security.WinTrust.CRYPT_TRUST_REG_ENTRY */
  sFinalPolicyProvider: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Security.WinTrust.CRYPT_TRUST_REG_ENTRY */
  sTestPolicyProvider: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Security.WinTrust.CRYPT_TRUST_REG_ENTRY */
  sCleanupProvider: Uint8Array | Deno.PointerValue | null;
}

export const sizeofCRYPT_REGISTER_ACTIONID = 72;

export function allocCRYPT_REGISTER_ACTIONID(data?: Partial<CRYPT_REGISTER_ACTIONID>): Uint8Array {
  const buf = new Uint8Array(sizeofCRYPT_REGISTER_ACTIONID);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.cbStruct !== undefined) view.setUint32(0, Number(data.cbStruct), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.sInitProvider !== undefined) view.setBigUint64(8, data.sInitProvider === null ? 0n : BigInt(util.toPointer(data.sInitProvider)), true);
  // 0x10: pointer
  if (data?.sObjectProvider !== undefined) view.setBigUint64(16, data.sObjectProvider === null ? 0n : BigInt(util.toPointer(data.sObjectProvider)), true);
  // 0x18: pointer
  if (data?.sSignatureProvider !== undefined) view.setBigUint64(24, data.sSignatureProvider === null ? 0n : BigInt(util.toPointer(data.sSignatureProvider)), true);
  // 0x20: pointer
  if (data?.sCertificateProvider !== undefined) view.setBigUint64(32, data.sCertificateProvider === null ? 0n : BigInt(util.toPointer(data.sCertificateProvider)), true);
  // 0x28: pointer
  if (data?.sCertificatePolicyProvider !== undefined) view.setBigUint64(40, data.sCertificatePolicyProvider === null ? 0n : BigInt(util.toPointer(data.sCertificatePolicyProvider)), true);
  // 0x30: pointer
  if (data?.sFinalPolicyProvider !== undefined) view.setBigUint64(48, data.sFinalPolicyProvider === null ? 0n : BigInt(util.toPointer(data.sFinalPolicyProvider)), true);
  // 0x38: pointer
  if (data?.sTestPolicyProvider !== undefined) view.setBigUint64(56, data.sTestPolicyProvider === null ? 0n : BigInt(util.toPointer(data.sTestPolicyProvider)), true);
  // 0x40: pointer
  if (data?.sCleanupProvider !== undefined) view.setBigUint64(64, data.sCleanupProvider === null ? 0n : BigInt(util.toPointer(data.sCleanupProvider)), true);
  return buf;
}

/**
 * Windows.Win32.Security.WinTrust.CRYPT_PROVIDER_REGDEFUSAGE (size: 40)
 */
export interface CRYPT_PROVIDER_REGDEFUSAGE {
  /** u32 */
  cbStruct: number;
  /** ptr */
  pgActionID: Deno.PointerValue | Uint8Array | null;
  /** Windows.Win32.Foundation.PWSTR */
  pwszDllName: string | null;
  /** Windows.Win32.Foundation.PSTR */
  pwszLoadCallbackDataFunctionName: string | null;
  /** Windows.Win32.Foundation.PSTR */
  pwszFreeCallbackDataFunctionName: string | null;
}

export const sizeofCRYPT_PROVIDER_REGDEFUSAGE = 40;

export function allocCRYPT_PROVIDER_REGDEFUSAGE(data?: Partial<CRYPT_PROVIDER_REGDEFUSAGE>): Uint8Array {
  const buf = new Uint8Array(sizeofCRYPT_PROVIDER_REGDEFUSAGE);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.cbStruct !== undefined) view.setUint32(0, Number(data.cbStruct), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.pgActionID !== undefined) view.setBigUint64(8, data.pgActionID === null ? 0n : BigInt(util.toPointer(data.pgActionID)), true);
  // 0x10: buffer
  if (data?.pwszDllName !== undefined) {
    (buf as any)._f16 = util.pwstrToFfi(data.pwszDllName);
    view.setBigUint64(16, (buf as any)._f16 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f16)), true);
  }
  // 0x18: buffer
  if (data?.pwszLoadCallbackDataFunctionName !== undefined) {
    (buf as any)._f24 = util.pstrToFfi(data.pwszLoadCallbackDataFunctionName);
    view.setBigUint64(24, (buf as any)._f24 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f24)), true);
  }
  // 0x20: buffer
  if (data?.pwszFreeCallbackDataFunctionName !== undefined) {
    (buf as any)._f32 = util.pstrToFfi(data.pwszFreeCallbackDataFunctionName);
    view.setBigUint64(32, (buf as any)._f32 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f32)), true);
  }
  return buf;
}

/**
 * Windows.Win32.Security.WinTrust.CRYPT_PROVIDER_DEFUSAGE (size: 32)
 */
export interface CRYPT_PROVIDER_DEFUSAGE {
  /** u32 */
  cbStruct: number;
  /** System.Guid */
  gActionID: Uint8Array | Deno.PointerValue | null;
  /** ptr */
  pDefPolicyCallbackData: Deno.PointerValue | Uint8Array | null;
  /** ptr */
  pDefSIPClientData: Deno.PointerValue | Uint8Array | null;
}

export const sizeofCRYPT_PROVIDER_DEFUSAGE = 32;

export function allocCRYPT_PROVIDER_DEFUSAGE(data?: Partial<CRYPT_PROVIDER_DEFUSAGE>): Uint8Array {
  const buf = new Uint8Array(sizeofCRYPT_PROVIDER_DEFUSAGE);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.cbStruct !== undefined) view.setUint32(0, Number(data.cbStruct), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.gActionID !== undefined) view.setBigUint64(8, data.gActionID === null ? 0n : BigInt(util.toPointer(data.gActionID)), true);
  // 0x10: pointer
  if (data?.pDefPolicyCallbackData !== undefined) view.setBigUint64(16, data.pDefPolicyCallbackData === null ? 0n : BigInt(util.toPointer(data.pDefPolicyCallbackData)), true);
  // 0x18: pointer
  if (data?.pDefSIPClientData !== undefined) view.setBigUint64(24, data.pDefSIPClientData === null ? 0n : BigInt(util.toPointer(data.pDefSIPClientData)), true);
  return buf;
}

/**
 * Windows.Win32.Security.Cryptography.CRYPTOAPI_BLOB (size: 16)
 */
export interface CRYPTOAPI_BLOB {
  /** u32 */
  cbData: number;
  /** ptr */
  pbData: Deno.PointerValue | Uint8Array | null;
}

export const sizeofCRYPTOAPI_BLOB = 16;

export function allocCRYPTOAPI_BLOB(data?: Partial<CRYPTOAPI_BLOB>): Uint8Array {
  const buf = new Uint8Array(sizeofCRYPTOAPI_BLOB);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.cbData !== undefined) view.setUint32(0, Number(data.cbData), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.pbData !== undefined) view.setBigUint64(8, data.pbData === null ? 0n : BigInt(util.toPointer(data.pbData)), true);
  return buf;
}

/**
 * Windows.Win32.Security.WinTrust.SPC_SERIALIZED_OBJECT (size: 16)
 */
export interface SPC_SERIALIZED_OBJECT {
  /** array */
  ClassId: Deno.PointerValue | null;
  /** Windows.Win32.Security.Cryptography.CRYPTOAPI_BLOB */
  SerializedData: Uint8Array | Deno.PointerValue | null;
}

export const sizeofSPC_SERIALIZED_OBJECT = 16;

export function allocSPC_SERIALIZED_OBJECT(data?: Partial<SPC_SERIALIZED_OBJECT>): Uint8Array {
  const buf = new Uint8Array(sizeofSPC_SERIALIZED_OBJECT);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.ClassId !== undefined) view.setBigUint64(0, data.ClassId === null ? 0n : BigInt(util.toPointer(data.ClassId)), true);
  // 0x08: pointer
  if (data?.SerializedData !== undefined) view.setBigUint64(8, data.SerializedData === null ? 0n : BigInt(util.toPointer(data.SerializedData)), true);
  return buf;
}

/**
 * Windows.Win32.Security.WinTrust.SPC_SIGINFO (size: 40)
 */
export interface SPC_SIGINFO {
  /** u32 */
  dwSipVersion: number;
  /** System.Guid */
  gSIPGuid: Uint8Array | Deno.PointerValue | null;
  /** u32 */
  dwReserved1: number;
  /** u32 */
  dwReserved2: number;
  /** u32 */
  dwReserved3: number;
  /** u32 */
  dwReserved4: number;
  /** u32 */
  dwReserved5: number;
}

export const sizeofSPC_SIGINFO = 40;

export function allocSPC_SIGINFO(data?: Partial<SPC_SIGINFO>): Uint8Array {
  const buf = new Uint8Array(sizeofSPC_SIGINFO);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.dwSipVersion !== undefined) view.setUint32(0, Number(data.dwSipVersion), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.gSIPGuid !== undefined) view.setBigUint64(8, data.gSIPGuid === null ? 0n : BigInt(util.toPointer(data.gSIPGuid)), true);
  // 0x10: u32
  if (data?.dwReserved1 !== undefined) view.setUint32(16, Number(data.dwReserved1), true);
  // 0x14: u32
  if (data?.dwReserved2 !== undefined) view.setUint32(20, Number(data.dwReserved2), true);
  // 0x18: u32
  if (data?.dwReserved3 !== undefined) view.setUint32(24, Number(data.dwReserved3), true);
  // 0x1c: u32
  if (data?.dwReserved4 !== undefined) view.setUint32(28, Number(data.dwReserved4), true);
  // 0x20: u32
  if (data?.dwReserved5 !== undefined) view.setUint32(32, Number(data.dwReserved5), true);
  // 0x24: pad4
  return buf;
}

/**
 * Windows.Win32.Security.WinTrust.SPC_LINK (size: 16)
 */
export interface SPC_LINK {
  /** u32 */
  dwLinkChoice: number;
  /** _Anonymous_e__Union */
  Anonymous: Uint8Array | Deno.PointerValue | null;
}

export const sizeofSPC_LINK = 16;

export function allocSPC_LINK(data?: Partial<SPC_LINK>): Uint8Array {
  const buf = new Uint8Array(sizeofSPC_LINK);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.dwLinkChoice !== undefined) view.setUint32(0, Number(data.dwLinkChoice), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.Anonymous !== undefined) view.setBigUint64(8, data.Anonymous === null ? 0n : BigInt(util.toPointer(data.Anonymous)), true);
  return buf;
}

/**
 * Windows.Win32.Security.Cryptography.CRYPT_BIT_BLOB (size: 24)
 */
export interface CRYPT_BIT_BLOB {
  /** u32 */
  cbData: number;
  /** ptr */
  pbData: Deno.PointerValue | Uint8Array | null;
  /** u32 */
  cUnusedBits: number;
}

export const sizeofCRYPT_BIT_BLOB = 24;

export function allocCRYPT_BIT_BLOB(data?: Partial<CRYPT_BIT_BLOB>): Uint8Array {
  const buf = new Uint8Array(sizeofCRYPT_BIT_BLOB);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.cbData !== undefined) view.setUint32(0, Number(data.cbData), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.pbData !== undefined) view.setBigUint64(8, data.pbData === null ? 0n : BigInt(util.toPointer(data.pbData)), true);
  // 0x10: u32
  if (data?.cUnusedBits !== undefined) view.setUint32(16, Number(data.cUnusedBits), true);
  // 0x14: pad4
  return buf;
}

/**
 * Windows.Win32.Security.WinTrust.SPC_PE_IMAGE_DATA (size: 16)
 */
export interface SPC_PE_IMAGE_DATA {
  /** Windows.Win32.Security.Cryptography.CRYPT_BIT_BLOB */
  Flags: Uint8Array | Deno.PointerValue | null;
  /** ptr */
  pFile: Deno.PointerValue | Uint8Array | null;
}

export const sizeofSPC_PE_IMAGE_DATA = 16;

export function allocSPC_PE_IMAGE_DATA(data?: Partial<SPC_PE_IMAGE_DATA>): Uint8Array {
  const buf = new Uint8Array(sizeofSPC_PE_IMAGE_DATA);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.Flags !== undefined) view.setBigUint64(0, data.Flags === null ? 0n : BigInt(util.toPointer(data.Flags)), true);
  // 0x08: pointer
  if (data?.pFile !== undefined) view.setBigUint64(8, data.pFile === null ? 0n : BigInt(util.toPointer(data.pFile)), true);
  return buf;
}

/**
 * Windows.Win32.Security.Cryptography.CRYPT_ATTRIBUTE_TYPE_VALUE (size: 16)
 */
export interface CRYPT_ATTRIBUTE_TYPE_VALUE {
  /** Windows.Win32.Foundation.PSTR */
  pszObjId: string | null;
  /** Windows.Win32.Security.Cryptography.CRYPTOAPI_BLOB */
  Value: Uint8Array | Deno.PointerValue | null;
}

export const sizeofCRYPT_ATTRIBUTE_TYPE_VALUE = 16;

export function allocCRYPT_ATTRIBUTE_TYPE_VALUE(data?: Partial<CRYPT_ATTRIBUTE_TYPE_VALUE>): Uint8Array {
  const buf = new Uint8Array(sizeofCRYPT_ATTRIBUTE_TYPE_VALUE);
  const view = new DataView(buf.buffer);
  // 0x00: buffer
  if (data?.pszObjId !== undefined) {
    (buf as any)._f0 = util.pstrToFfi(data.pszObjId);
    view.setBigUint64(0, (buf as any)._f0 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f0)), true);
  }
  // 0x08: pointer
  if (data?.Value !== undefined) view.setBigUint64(8, data.Value === null ? 0n : BigInt(util.toPointer(data.Value)), true);
  return buf;
}

/**
 * Windows.Win32.Security.Cryptography.CRYPT_ALGORITHM_IDENTIFIER (size: 16)
 */
export interface CRYPT_ALGORITHM_IDENTIFIER {
  /** Windows.Win32.Foundation.PSTR */
  pszObjId: string | null;
  /** Windows.Win32.Security.Cryptography.CRYPTOAPI_BLOB */
  Parameters: Uint8Array | Deno.PointerValue | null;
}

export const sizeofCRYPT_ALGORITHM_IDENTIFIER = 16;

export function allocCRYPT_ALGORITHM_IDENTIFIER(data?: Partial<CRYPT_ALGORITHM_IDENTIFIER>): Uint8Array {
  const buf = new Uint8Array(sizeofCRYPT_ALGORITHM_IDENTIFIER);
  const view = new DataView(buf.buffer);
  // 0x00: buffer
  if (data?.pszObjId !== undefined) {
    (buf as any)._f0 = util.pstrToFfi(data.pszObjId);
    view.setBigUint64(0, (buf as any)._f0 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f0)), true);
  }
  // 0x08: pointer
  if (data?.Parameters !== undefined) view.setBigUint64(8, data.Parameters === null ? 0n : BigInt(util.toPointer(data.Parameters)), true);
  return buf;
}

/**
 * Windows.Win32.Security.WinTrust.SPC_INDIRECT_DATA_CONTENT (size: 24)
 */
export interface SPC_INDIRECT_DATA_CONTENT {
  /** Windows.Win32.Security.Cryptography.CRYPT_ATTRIBUTE_TYPE_VALUE */
  Data: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Security.Cryptography.CRYPT_ALGORITHM_IDENTIFIER */
  DigestAlgorithm: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Security.Cryptography.CRYPTOAPI_BLOB */
  Digest: Uint8Array | Deno.PointerValue | null;
}

export const sizeofSPC_INDIRECT_DATA_CONTENT = 24;

export function allocSPC_INDIRECT_DATA_CONTENT(data?: Partial<SPC_INDIRECT_DATA_CONTENT>): Uint8Array {
  const buf = new Uint8Array(sizeofSPC_INDIRECT_DATA_CONTENT);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.Data !== undefined) view.setBigUint64(0, data.Data === null ? 0n : BigInt(util.toPointer(data.Data)), true);
  // 0x08: pointer
  if (data?.DigestAlgorithm !== undefined) view.setBigUint64(8, data.DigestAlgorithm === null ? 0n : BigInt(util.toPointer(data.DigestAlgorithm)), true);
  // 0x10: pointer
  if (data?.Digest !== undefined) view.setBigUint64(16, data.Digest === null ? 0n : BigInt(util.toPointer(data.Digest)), true);
  return buf;
}

/**
 * Windows.Win32.Security.WinTrust.SPC_FINANCIAL_CRITERIA (size: 8)
 */
export interface SPC_FINANCIAL_CRITERIA {
  /** Windows.Win32.Foundation.BOOL */
  fFinancialInfoAvailable: boolean;
  /** Windows.Win32.Foundation.BOOL */
  fMeetsCriteria: boolean;
}

export const sizeofSPC_FINANCIAL_CRITERIA = 8;

export function allocSPC_FINANCIAL_CRITERIA(data?: Partial<SPC_FINANCIAL_CRITERIA>): Uint8Array {
  const buf = new Uint8Array(sizeofSPC_FINANCIAL_CRITERIA);
  const view = new DataView(buf.buffer);
  // 0x00: i32
  if (data?.fFinancialInfoAvailable !== undefined) view.setInt32(0, Number(data.fFinancialInfoAvailable), true);
  // 0x04: i32
  if (data?.fMeetsCriteria !== undefined) view.setInt32(4, Number(data.fMeetsCriteria), true);
  return buf;
}

/**
 * Windows.Win32.Security.WinTrust.SPC_IMAGE (size: 40)
 */
export interface SPC_IMAGE {
  /** ptr */
  pImageLink: Deno.PointerValue | Uint8Array | null;
  /** Windows.Win32.Security.Cryptography.CRYPTOAPI_BLOB */
  Bitmap: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Security.Cryptography.CRYPTOAPI_BLOB */
  Metafile: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Security.Cryptography.CRYPTOAPI_BLOB */
  EnhancedMetafile: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Security.Cryptography.CRYPTOAPI_BLOB */
  GifFile: Uint8Array | Deno.PointerValue | null;
}

export const sizeofSPC_IMAGE = 40;

export function allocSPC_IMAGE(data?: Partial<SPC_IMAGE>): Uint8Array {
  const buf = new Uint8Array(sizeofSPC_IMAGE);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.pImageLink !== undefined) view.setBigUint64(0, data.pImageLink === null ? 0n : BigInt(util.toPointer(data.pImageLink)), true);
  // 0x08: pointer
  if (data?.Bitmap !== undefined) view.setBigUint64(8, data.Bitmap === null ? 0n : BigInt(util.toPointer(data.Bitmap)), true);
  // 0x10: pointer
  if (data?.Metafile !== undefined) view.setBigUint64(16, data.Metafile === null ? 0n : BigInt(util.toPointer(data.Metafile)), true);
  // 0x18: pointer
  if (data?.EnhancedMetafile !== undefined) view.setBigUint64(24, data.EnhancedMetafile === null ? 0n : BigInt(util.toPointer(data.EnhancedMetafile)), true);
  // 0x20: pointer
  if (data?.GifFile !== undefined) view.setBigUint64(32, data.GifFile === null ? 0n : BigInt(util.toPointer(data.GifFile)), true);
  return buf;
}

/**
 * Windows.Win32.Security.WinTrust.SPC_SP_AGENCY_INFO (size: 32)
 */
export interface SPC_SP_AGENCY_INFO {
  /** ptr */
  pPolicyInformation: Deno.PointerValue | Uint8Array | null;
  /** Windows.Win32.Foundation.PWSTR */
  pwszPolicyDisplayText: string | null;
  /** ptr */
  pLogoImage: Deno.PointerValue | Uint8Array | null;
  /** ptr */
  pLogoLink: Deno.PointerValue | Uint8Array | null;
}

export const sizeofSPC_SP_AGENCY_INFO = 32;

export function allocSPC_SP_AGENCY_INFO(data?: Partial<SPC_SP_AGENCY_INFO>): Uint8Array {
  const buf = new Uint8Array(sizeofSPC_SP_AGENCY_INFO);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.pPolicyInformation !== undefined) view.setBigUint64(0, data.pPolicyInformation === null ? 0n : BigInt(util.toPointer(data.pPolicyInformation)), true);
  // 0x08: buffer
  if (data?.pwszPolicyDisplayText !== undefined) {
    (buf as any)._f8 = util.pwstrToFfi(data.pwszPolicyDisplayText);
    view.setBigUint64(8, (buf as any)._f8 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f8)), true);
  }
  // 0x10: pointer
  if (data?.pLogoImage !== undefined) view.setBigUint64(16, data.pLogoImage === null ? 0n : BigInt(util.toPointer(data.pLogoImage)), true);
  // 0x18: pointer
  if (data?.pLogoLink !== undefined) view.setBigUint64(24, data.pLogoLink === null ? 0n : BigInt(util.toPointer(data.pLogoLink)), true);
  return buf;
}

/**
 * Windows.Win32.Security.WinTrust.SPC_STATEMENT_TYPE (size: 16)
 */
export interface SPC_STATEMENT_TYPE {
  /** u32 */
  cKeyPurposeId: number;
  /** ptr */
  rgpszKeyPurposeId: Deno.PointerValue | Uint8Array | null;
}

export const sizeofSPC_STATEMENT_TYPE = 16;

export function allocSPC_STATEMENT_TYPE(data?: Partial<SPC_STATEMENT_TYPE>): Uint8Array {
  const buf = new Uint8Array(sizeofSPC_STATEMENT_TYPE);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.cKeyPurposeId !== undefined) view.setUint32(0, Number(data.cKeyPurposeId), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.rgpszKeyPurposeId !== undefined) view.setBigUint64(8, data.rgpszKeyPurposeId === null ? 0n : BigInt(util.toPointer(data.rgpszKeyPurposeId)), true);
  return buf;
}

/**
 * Windows.Win32.Security.WinTrust.SPC_SP_OPUS_INFO (size: 24)
 */
export interface SPC_SP_OPUS_INFO {
  /** Windows.Win32.Foundation.PWSTR */
  pwszProgramName: string | null;
  /** ptr */
  pMoreInfo: Deno.PointerValue | Uint8Array | null;
  /** ptr */
  pPublisherInfo: Deno.PointerValue | Uint8Array | null;
}

export const sizeofSPC_SP_OPUS_INFO = 24;

export function allocSPC_SP_OPUS_INFO(data?: Partial<SPC_SP_OPUS_INFO>): Uint8Array {
  const buf = new Uint8Array(sizeofSPC_SP_OPUS_INFO);
  const view = new DataView(buf.buffer);
  // 0x00: buffer
  if (data?.pwszProgramName !== undefined) {
    (buf as any)._f0 = util.pwstrToFfi(data.pwszProgramName);
    view.setBigUint64(0, (buf as any)._f0 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f0)), true);
  }
  // 0x08: pointer
  if (data?.pMoreInfo !== undefined) view.setBigUint64(8, data.pMoreInfo === null ? 0n : BigInt(util.toPointer(data.pMoreInfo)), true);
  // 0x10: pointer
  if (data?.pPublisherInfo !== undefined) view.setBigUint64(16, data.pPublisherInfo === null ? 0n : BigInt(util.toPointer(data.pPublisherInfo)), true);
  return buf;
}

/**
 * Windows.Win32.Security.WinTrust.CAT_NAMEVALUE (size: 24)
 */
export interface CAT_NAMEVALUE {
  /** Windows.Win32.Foundation.PWSTR */
  pwszTag: string | null;
  /** u32 */
  fdwFlags: number;
  /** Windows.Win32.Security.Cryptography.CRYPTOAPI_BLOB */
  Value: Uint8Array | Deno.PointerValue | null;
}

export const sizeofCAT_NAMEVALUE = 24;

export function allocCAT_NAMEVALUE(data?: Partial<CAT_NAMEVALUE>): Uint8Array {
  const buf = new Uint8Array(sizeofCAT_NAMEVALUE);
  const view = new DataView(buf.buffer);
  // 0x00: buffer
  if (data?.pwszTag !== undefined) {
    (buf as any)._f0 = util.pwstrToFfi(data.pwszTag);
    view.setBigUint64(0, (buf as any)._f0 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f0)), true);
  }
  // 0x08: u32
  if (data?.fdwFlags !== undefined) view.setUint32(8, Number(data.fdwFlags), true);
  // 0x0c: pad4
  // 0x10: pointer
  if (data?.Value !== undefined) view.setBigUint64(16, data.Value === null ? 0n : BigInt(util.toPointer(data.Value)), true);
  return buf;
}

/**
 * Windows.Win32.Security.WinTrust.CAT_MEMBERINFO (size: 16)
 */
export interface CAT_MEMBERINFO {
  /** Windows.Win32.Foundation.PWSTR */
  pwszSubjGuid: string | null;
  /** u32 */
  dwCertVersion: number;
}

export const sizeofCAT_MEMBERINFO = 16;

export function allocCAT_MEMBERINFO(data?: Partial<CAT_MEMBERINFO>): Uint8Array {
  const buf = new Uint8Array(sizeofCAT_MEMBERINFO);
  const view = new DataView(buf.buffer);
  // 0x00: buffer
  if (data?.pwszSubjGuid !== undefined) {
    (buf as any)._f0 = util.pwstrToFfi(data.pwszSubjGuid);
    view.setBigUint64(0, (buf as any)._f0 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f0)), true);
  }
  // 0x08: u32
  if (data?.dwCertVersion !== undefined) view.setUint32(8, Number(data.dwCertVersion), true);
  // 0x0c: pad4
  return buf;
}

/**
 * Windows.Win32.Security.WinTrust.CAT_MEMBERINFO2 (size: 16)
 */
export interface CAT_MEMBERINFO2 {
  /** System.Guid */
  SubjectGuid: Uint8Array | Deno.PointerValue | null;
  /** u32 */
  dwCertVersion: number;
}

export const sizeofCAT_MEMBERINFO2 = 16;

export function allocCAT_MEMBERINFO2(data?: Partial<CAT_MEMBERINFO2>): Uint8Array {
  const buf = new Uint8Array(sizeofCAT_MEMBERINFO2);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.SubjectGuid !== undefined) view.setBigUint64(0, data.SubjectGuid === null ? 0n : BigInt(util.toPointer(data.SubjectGuid)), true);
  // 0x08: u32
  if (data?.dwCertVersion !== undefined) view.setUint32(8, Number(data.dwCertVersion), true);
  // 0x0c: pad4
  return buf;
}

export type BOOLEAN = number;

/**
 * Windows.Win32.Security.WinTrust.INTENT_TO_SEAL_ATTRIBUTE (size: 16)
 */
export interface INTENT_TO_SEAL_ATTRIBUTE {
  /** u32 */
  version: number;
  /** Windows.Win32.Foundation.BOOLEAN */
  seal: Uint8Array | Deno.PointerValue | null;
}

export const sizeofINTENT_TO_SEAL_ATTRIBUTE = 16;

export function allocINTENT_TO_SEAL_ATTRIBUTE(data?: Partial<INTENT_TO_SEAL_ATTRIBUTE>): Uint8Array {
  const buf = new Uint8Array(sizeofINTENT_TO_SEAL_ATTRIBUTE);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.version !== undefined) view.setUint32(0, Number(data.version), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.seal !== undefined) view.setBigUint64(8, data.seal === null ? 0n : BigInt(util.toPointer(data.seal)), true);
  return buf;
}

/**
 * Windows.Win32.Security.WinTrust.SEALING_SIGNATURE_ATTRIBUTE (size: 24)
 */
export interface SEALING_SIGNATURE_ATTRIBUTE {
  /** u32 */
  version: number;
  /** u32 */
  signerIndex: number;
  /** Windows.Win32.Security.Cryptography.CRYPT_ALGORITHM_IDENTIFIER */
  signatureAlgorithm: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Security.Cryptography.CRYPTOAPI_BLOB */
  encryptedDigest: Uint8Array | Deno.PointerValue | null;
}

export const sizeofSEALING_SIGNATURE_ATTRIBUTE = 24;

export function allocSEALING_SIGNATURE_ATTRIBUTE(data?: Partial<SEALING_SIGNATURE_ATTRIBUTE>): Uint8Array {
  const buf = new Uint8Array(sizeofSEALING_SIGNATURE_ATTRIBUTE);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.version !== undefined) view.setUint32(0, Number(data.version), true);
  // 0x04: u32
  if (data?.signerIndex !== undefined) view.setUint32(4, Number(data.signerIndex), true);
  // 0x08: pointer
  if (data?.signatureAlgorithm !== undefined) view.setBigUint64(8, data.signatureAlgorithm === null ? 0n : BigInt(util.toPointer(data.signatureAlgorithm)), true);
  // 0x10: pointer
  if (data?.encryptedDigest !== undefined) view.setBigUint64(16, data.encryptedDigest === null ? 0n : BigInt(util.toPointer(data.encryptedDigest)), true);
  return buf;
}

/**
 * Windows.Win32.Security.WinTrust.SEALING_TIMESTAMP_ATTRIBUTE (size: 16)
 */
export interface SEALING_TIMESTAMP_ATTRIBUTE {
  /** u32 */
  version: number;
  /** u32 */
  signerIndex: number;
  /** Windows.Win32.Security.Cryptography.CRYPTOAPI_BLOB */
  sealTimeStampToken: Uint8Array | Deno.PointerValue | null;
}

export const sizeofSEALING_TIMESTAMP_ATTRIBUTE = 16;

export function allocSEALING_TIMESTAMP_ATTRIBUTE(data?: Partial<SEALING_TIMESTAMP_ATTRIBUTE>): Uint8Array {
  const buf = new Uint8Array(sizeofSEALING_TIMESTAMP_ATTRIBUTE);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.version !== undefined) view.setUint32(0, Number(data.version), true);
  // 0x04: u32
  if (data?.signerIndex !== undefined) view.setUint32(4, Number(data.signerIndex), true);
  // 0x08: pointer
  if (data?.sealTimeStampToken !== undefined) view.setBigUint64(8, data.sealTimeStampToken === null ? 0n : BigInt(util.toPointer(data.sealTimeStampToken)), true);
  return buf;
}

/**
 * Windows.Win32.Security.WinTrust.WIN_CERTIFICATE (size: 16)
 */
export interface WIN_CERTIFICATE {
  /** u32 */
  dwLength: number;
  /** u16 */
  wRevision: number;
  /** u16 */
  wCertificateType: number;
  /** array */
  bCertificate: Deno.PointerValue | null;
}

export const sizeofWIN_CERTIFICATE = 16;

export function allocWIN_CERTIFICATE(data?: Partial<WIN_CERTIFICATE>): Uint8Array {
  const buf = new Uint8Array(sizeofWIN_CERTIFICATE);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.dwLength !== undefined) view.setUint32(0, Number(data.dwLength), true);
  // 0x04: u16
  if (data?.wRevision !== undefined) view.setUint16(4, Number(data.wRevision), true);
  // 0x06: u16
  if (data?.wCertificateType !== undefined) view.setUint16(6, Number(data.wCertificateType), true);
  // 0x08: pointer
  if (data?.bCertificate !== undefined) view.setBigUint64(8, data.bCertificate === null ? 0n : BigInt(util.toPointer(data.bCertificate)), true);
  return buf;
}

/**
 * Windows.Win32.Security.WinTrust.WIN_TRUST_ACTDATA_CONTEXT_WITH_SUBJECT (size: 24)
 */
export interface WIN_TRUST_ACTDATA_CONTEXT_WITH_SUBJECT {
  /** Windows.Win32.Foundation.HANDLE */
  hClientToken: Uint8Array | Deno.PointerValue | null;
  /** ptr */
  SubjectType: Deno.PointerValue | Uint8Array | null;
  /** ptr */
  Subject: Deno.PointerValue | Uint8Array | null;
}

export const sizeofWIN_TRUST_ACTDATA_CONTEXT_WITH_SUBJECT = 24;

export function allocWIN_TRUST_ACTDATA_CONTEXT_WITH_SUBJECT(data?: Partial<WIN_TRUST_ACTDATA_CONTEXT_WITH_SUBJECT>): Uint8Array {
  const buf = new Uint8Array(sizeofWIN_TRUST_ACTDATA_CONTEXT_WITH_SUBJECT);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.hClientToken !== undefined) view.setBigUint64(0, data.hClientToken === null ? 0n : BigInt(util.toPointer(data.hClientToken)), true);
  // 0x08: pointer
  if (data?.SubjectType !== undefined) view.setBigUint64(8, data.SubjectType === null ? 0n : BigInt(util.toPointer(data.SubjectType)), true);
  // 0x10: pointer
  if (data?.Subject !== undefined) view.setBigUint64(16, data.Subject === null ? 0n : BigInt(util.toPointer(data.Subject)), true);
  return buf;
}

/**
 * Windows.Win32.Security.WinTrust.WIN_TRUST_ACTDATA_SUBJECT_ONLY (size: 16)
 */
export interface WIN_TRUST_ACTDATA_SUBJECT_ONLY {
  /** ptr */
  SubjectType: Deno.PointerValue | Uint8Array | null;
  /** ptr */
  Subject: Deno.PointerValue | Uint8Array | null;
}

export const sizeofWIN_TRUST_ACTDATA_SUBJECT_ONLY = 16;

export function allocWIN_TRUST_ACTDATA_SUBJECT_ONLY(data?: Partial<WIN_TRUST_ACTDATA_SUBJECT_ONLY>): Uint8Array {
  const buf = new Uint8Array(sizeofWIN_TRUST_ACTDATA_SUBJECT_ONLY);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.SubjectType !== undefined) view.setBigUint64(0, data.SubjectType === null ? 0n : BigInt(util.toPointer(data.SubjectType)), true);
  // 0x08: pointer
  if (data?.Subject !== undefined) view.setBigUint64(8, data.Subject === null ? 0n : BigInt(util.toPointer(data.Subject)), true);
  return buf;
}

/**
 * Windows.Win32.Security.WinTrust.WIN_TRUST_SUBJECT_FILE (size: 16)
 */
export interface WIN_TRUST_SUBJECT_FILE {
  /** Windows.Win32.Foundation.HANDLE */
  hFile: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Foundation.PWSTR */
  lpPath: string | null;
}

export const sizeofWIN_TRUST_SUBJECT_FILE = 16;

export function allocWIN_TRUST_SUBJECT_FILE(data?: Partial<WIN_TRUST_SUBJECT_FILE>): Uint8Array {
  const buf = new Uint8Array(sizeofWIN_TRUST_SUBJECT_FILE);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.hFile !== undefined) view.setBigUint64(0, data.hFile === null ? 0n : BigInt(util.toPointer(data.hFile)), true);
  // 0x08: buffer
  if (data?.lpPath !== undefined) {
    (buf as any)._f8 = util.pwstrToFfi(data.lpPath);
    view.setBigUint64(8, (buf as any)._f8 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f8)), true);
  }
  return buf;
}

/**
 * Windows.Win32.Security.WinTrust.WIN_TRUST_SUBJECT_FILE_AND_DISPLAY (size: 24)
 */
export interface WIN_TRUST_SUBJECT_FILE_AND_DISPLAY {
  /** Windows.Win32.Foundation.HANDLE */
  hFile: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Foundation.PWSTR */
  lpPath: string | null;
  /** Windows.Win32.Foundation.PWSTR */
  lpDisplayName: string | null;
}

export const sizeofWIN_TRUST_SUBJECT_FILE_AND_DISPLAY = 24;

export function allocWIN_TRUST_SUBJECT_FILE_AND_DISPLAY(data?: Partial<WIN_TRUST_SUBJECT_FILE_AND_DISPLAY>): Uint8Array {
  const buf = new Uint8Array(sizeofWIN_TRUST_SUBJECT_FILE_AND_DISPLAY);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.hFile !== undefined) view.setBigUint64(0, data.hFile === null ? 0n : BigInt(util.toPointer(data.hFile)), true);
  // 0x08: buffer
  if (data?.lpPath !== undefined) {
    (buf as any)._f8 = util.pwstrToFfi(data.lpPath);
    view.setBigUint64(8, (buf as any)._f8 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f8)), true);
  }
  // 0x10: buffer
  if (data?.lpDisplayName !== undefined) {
    (buf as any)._f16 = util.pwstrToFfi(data.lpDisplayName);
    view.setBigUint64(16, (buf as any)._f16 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f16)), true);
  }
  return buf;
}

/**
 * Windows.Win32.Security.WinTrust.WIN_SPUB_TRUSTED_PUBLISHER_DATA (size: 16)
 */
export interface WIN_SPUB_TRUSTED_PUBLISHER_DATA {
  /** Windows.Win32.Foundation.HANDLE */
  hClientToken: Uint8Array | Deno.PointerValue | null;
  /** ptr */
  lpCertificate: Deno.PointerValue | Uint8Array | null;
}

export const sizeofWIN_SPUB_TRUSTED_PUBLISHER_DATA = 16;

export function allocWIN_SPUB_TRUSTED_PUBLISHER_DATA(data?: Partial<WIN_SPUB_TRUSTED_PUBLISHER_DATA>): Uint8Array {
  const buf = new Uint8Array(sizeofWIN_SPUB_TRUSTED_PUBLISHER_DATA);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.hClientToken !== undefined) view.setBigUint64(0, data.hClientToken === null ? 0n : BigInt(util.toPointer(data.hClientToken)), true);
  // 0x08: pointer
  if (data?.lpCertificate !== undefined) view.setBigUint64(8, data.lpCertificate === null ? 0n : BigInt(util.toPointer(data.lpCertificate)), true);
  return buf;
}

/**
 * Windows.Win32.Security.WinTrust.WTD_GENERIC_CHAIN_POLICY_SIGNER_INFO (size: 48)
 */
export interface WTD_GENERIC_CHAIN_POLICY_SIGNER_INFO {
  /** _Anonymous_e__Union */
  Anonymous: Uint8Array | Deno.PointerValue | null;
  /** ptr */
  pChainContext: Deno.PointerValue | Uint8Array | null;
  /** u32 */
  dwSignerType: number;
  /** ptr */
  pMsgSignerInfo: Deno.PointerValue | Uint8Array | null;
  /** u32 */
  dwError: number;
  /** u32 */
  cCounterSigner: number;
  /** ptr */
  rgpCounterSigner: Deno.PointerValue | Uint8Array | null;
}

export const sizeofWTD_GENERIC_CHAIN_POLICY_SIGNER_INFO = 48;

export function allocWTD_GENERIC_CHAIN_POLICY_SIGNER_INFO(data?: Partial<WTD_GENERIC_CHAIN_POLICY_SIGNER_INFO>): Uint8Array {
  const buf = new Uint8Array(sizeofWTD_GENERIC_CHAIN_POLICY_SIGNER_INFO);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.Anonymous !== undefined) view.setBigUint64(0, data.Anonymous === null ? 0n : BigInt(util.toPointer(data.Anonymous)), true);
  // 0x08: pointer
  if (data?.pChainContext !== undefined) view.setBigUint64(8, data.pChainContext === null ? 0n : BigInt(util.toPointer(data.pChainContext)), true);
  // 0x10: u32
  if (data?.dwSignerType !== undefined) view.setUint32(16, Number(data.dwSignerType), true);
  // 0x14: pad4
  // 0x18: pointer
  if (data?.pMsgSignerInfo !== undefined) view.setBigUint64(24, data.pMsgSignerInfo === null ? 0n : BigInt(util.toPointer(data.pMsgSignerInfo)), true);
  // 0x20: u32
  if (data?.dwError !== undefined) view.setUint32(32, Number(data.dwError), true);
  // 0x24: u32
  if (data?.cCounterSigner !== undefined) view.setUint32(36, Number(data.cCounterSigner), true);
  // 0x28: pointer
  if (data?.rgpCounterSigner !== undefined) view.setBigUint64(40, data.rgpCounterSigner === null ? 0n : BigInt(util.toPointer(data.rgpCounterSigner)), true);
  return buf;
}

export type HCERTCHAINENGINE = Deno.PointerValue;

/**
 * Windows.Win32.Security.WinTrust.WTD_GENERIC_CHAIN_POLICY_CREATE_INFO (size: 40)
 */
export interface WTD_GENERIC_CHAIN_POLICY_CREATE_INFO {
  /** _Anonymous_e__Union */
  Anonymous: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Security.Cryptography.HCERTCHAINENGINE */
  hChainEngine: Uint8Array | Deno.PointerValue | null;
  /** ptr */
  pChainPara: Deno.PointerValue | Uint8Array | null;
  /** u32 */
  dwFlags: number;
  /** ptr */
  pvReserved: Deno.PointerValue | Uint8Array | null;
}

export const sizeofWTD_GENERIC_CHAIN_POLICY_CREATE_INFO = 40;

export function allocWTD_GENERIC_CHAIN_POLICY_CREATE_INFO(data?: Partial<WTD_GENERIC_CHAIN_POLICY_CREATE_INFO>): Uint8Array {
  const buf = new Uint8Array(sizeofWTD_GENERIC_CHAIN_POLICY_CREATE_INFO);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.Anonymous !== undefined) view.setBigUint64(0, data.Anonymous === null ? 0n : BigInt(util.toPointer(data.Anonymous)), true);
  // 0x08: pointer
  if (data?.hChainEngine !== undefined) view.setBigUint64(8, data.hChainEngine === null ? 0n : BigInt(util.toPointer(data.hChainEngine)), true);
  // 0x10: pointer
  if (data?.pChainPara !== undefined) view.setBigUint64(16, data.pChainPara === null ? 0n : BigInt(util.toPointer(data.pChainPara)), true);
  // 0x18: u32
  if (data?.dwFlags !== undefined) view.setUint32(24, Number(data.dwFlags), true);
  // 0x1c: pad4
  // 0x20: pointer
  if (data?.pvReserved !== undefined) view.setBigUint64(32, data.pvReserved === null ? 0n : BigInt(util.toPointer(data.pvReserved)), true);
  return buf;
}

/**
 * Windows.Win32.Security.WinTrust.WTD_GENERIC_CHAIN_POLICY_DATA (size: 40)
 */
export interface WTD_GENERIC_CHAIN_POLICY_DATA {
  /** _Anonymous_e__Union */
  Anonymous: Uint8Array | Deno.PointerValue | null;
  /** ptr */
  pSignerChainInfo: Deno.PointerValue | Uint8Array | null;
  /** ptr */
  pCounterSignerChainInfo: Deno.PointerValue | Uint8Array | null;
  /** Windows.Win32.Security.WinTrust.PFN_WTD_GENERIC_CHAIN_POLICY_CALLBACK */
  pfnPolicyCallback: Uint8Array | Deno.PointerValue | null;
  /** ptr */
  pvPolicyArg: Deno.PointerValue | Uint8Array | null;
}

export const sizeofWTD_GENERIC_CHAIN_POLICY_DATA = 40;

export function allocWTD_GENERIC_CHAIN_POLICY_DATA(data?: Partial<WTD_GENERIC_CHAIN_POLICY_DATA>): Uint8Array {
  const buf = new Uint8Array(sizeofWTD_GENERIC_CHAIN_POLICY_DATA);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.Anonymous !== undefined) view.setBigUint64(0, data.Anonymous === null ? 0n : BigInt(util.toPointer(data.Anonymous)), true);
  // 0x08: pointer
  if (data?.pSignerChainInfo !== undefined) view.setBigUint64(8, data.pSignerChainInfo === null ? 0n : BigInt(util.toPointer(data.pSignerChainInfo)), true);
  // 0x10: pointer
  if (data?.pCounterSignerChainInfo !== undefined) view.setBigUint64(16, data.pCounterSignerChainInfo === null ? 0n : BigInt(util.toPointer(data.pCounterSignerChainInfo)), true);
  // 0x18: pointer
  if (data?.pfnPolicyCallback !== undefined) view.setBigUint64(24, data.pfnPolicyCallback === null ? 0n : BigInt(util.toPointer(data.pfnPolicyCallback)), true);
  // 0x20: pointer
  if (data?.pvPolicyArg !== undefined) view.setBigUint64(32, data.pvPolicyArg === null ? 0n : BigInt(util.toPointer(data.pvPolicyArg)), true);
  return buf;
}

/**
 * Windows.Win32.Security.WinTrust.DRIVER_VER_MAJORMINOR (size: 8)
 */
export interface DRIVER_VER_MAJORMINOR {
  /** u32 */
  dwMajor: number;
  /** u32 */
  dwMinor: number;
}

export const sizeofDRIVER_VER_MAJORMINOR = 8;

export function allocDRIVER_VER_MAJORMINOR(data?: Partial<DRIVER_VER_MAJORMINOR>): Uint8Array {
  const buf = new Uint8Array(sizeofDRIVER_VER_MAJORMINOR);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.dwMajor !== undefined) view.setUint32(0, Number(data.dwMajor), true);
  // 0x04: u32
  if (data?.dwMinor !== undefined) view.setUint32(4, Number(data.dwMinor), true);
  return buf;
}

/**
 * Windows.Win32.Security.WinTrust.DRIVER_VER_INFO (size: 80)
 */
export interface DRIVER_VER_INFO {
  /** u32 */
  cbStruct: number;
  /** usize */
  dwReserved1: Deno.PointerValue;
  /** usize */
  dwReserved2: Deno.PointerValue;
  /** u32 */
  dwPlatform: number;
  /** u32 */
  dwVersion: number;
  /** array */
  wszVersion: Deno.PointerValue | null;
  /** array */
  wszSignedBy: Deno.PointerValue | null;
  /** ptr */
  pcSignerCertContext: Deno.PointerValue | Uint8Array | null;
  /** Windows.Win32.Security.WinTrust.DRIVER_VER_MAJORMINOR */
  sOSVersionLow: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Security.WinTrust.DRIVER_VER_MAJORMINOR */
  sOSVersionHigh: Uint8Array | Deno.PointerValue | null;
  /** u32 */
  dwBuildNumberLow: number;
  /** u32 */
  dwBuildNumberHigh: number;
}

export const sizeofDRIVER_VER_INFO = 80;

export function allocDRIVER_VER_INFO(data?: Partial<DRIVER_VER_INFO>): Uint8Array {
  const buf = new Uint8Array(sizeofDRIVER_VER_INFO);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.cbStruct !== undefined) view.setUint32(0, Number(data.cbStruct), true);
  // 0x04: pad4
  // 0x08: usize
  if (data?.dwReserved1 !== undefined) view.setBigUint64(8, BigInt(data.dwReserved1), true);
  // 0x10: usize
  if (data?.dwReserved2 !== undefined) view.setBigUint64(16, BigInt(data.dwReserved2), true);
  // 0x18: u32
  if (data?.dwPlatform !== undefined) view.setUint32(24, Number(data.dwPlatform), true);
  // 0x1c: u32
  if (data?.dwVersion !== undefined) view.setUint32(28, Number(data.dwVersion), true);
  // 0x20: pointer
  if (data?.wszVersion !== undefined) view.setBigUint64(32, data.wszVersion === null ? 0n : BigInt(util.toPointer(data.wszVersion)), true);
  // 0x28: pointer
  if (data?.wszSignedBy !== undefined) view.setBigUint64(40, data.wszSignedBy === null ? 0n : BigInt(util.toPointer(data.wszSignedBy)), true);
  // 0x30: pointer
  if (data?.pcSignerCertContext !== undefined) view.setBigUint64(48, data.pcSignerCertContext === null ? 0n : BigInt(util.toPointer(data.pcSignerCertContext)), true);
  // 0x38: pointer
  if (data?.sOSVersionLow !== undefined) view.setBigUint64(56, data.sOSVersionLow === null ? 0n : BigInt(util.toPointer(data.sOSVersionLow)), true);
  // 0x40: pointer
  if (data?.sOSVersionHigh !== undefined) view.setBigUint64(64, data.sOSVersionHigh === null ? 0n : BigInt(util.toPointer(data.sOSVersionHigh)), true);
  // 0x48: u32
  if (data?.dwBuildNumberLow !== undefined) view.setUint32(72, Number(data.dwBuildNumberLow), true);
  // 0x4c: u32
  if (data?.dwBuildNumberHigh !== undefined) view.setUint32(76, Number(data.dwBuildNumberHigh), true);
  return buf;
}

export type HRESULT = number;

/**
 * Windows.Win32.Security.WinTrust.CONFIG_CI_PROV_INFO_RESULT (size: 24)
 */
export interface CONFIG_CI_PROV_INFO_RESULT {
  /** Windows.Win32.Foundation.HRESULT */
  hr: Uint8Array | Deno.PointerValue | null;
  /** u32 */
  dwResult: number;
  /** u32 */
  dwPolicyIndex: number;
  /** Windows.Win32.Foundation.BOOLEAN */
  fIsExplicitDeny: Uint8Array | Deno.PointerValue | null;
}

export const sizeofCONFIG_CI_PROV_INFO_RESULT = 24;

export function allocCONFIG_CI_PROV_INFO_RESULT(data?: Partial<CONFIG_CI_PROV_INFO_RESULT>): Uint8Array {
  const buf = new Uint8Array(sizeofCONFIG_CI_PROV_INFO_RESULT);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.hr !== undefined) view.setBigUint64(0, data.hr === null ? 0n : BigInt(util.toPointer(data.hr)), true);
  // 0x08: u32
  if (data?.dwResult !== undefined) view.setUint32(8, Number(data.dwResult), true);
  // 0x0c: u32
  if (data?.dwPolicyIndex !== undefined) view.setUint32(12, Number(data.dwPolicyIndex), true);
  // 0x10: pointer
  if (data?.fIsExplicitDeny !== undefined) view.setBigUint64(16, data.fIsExplicitDeny === null ? 0n : BigInt(util.toPointer(data.fIsExplicitDeny)), true);
  return buf;
}

/**
 * Windows.Win32.Security.WinTrust.CONFIG_CI_PROV_INFO (size: 32)
 */
export interface CONFIG_CI_PROV_INFO {
  /** u32 */
  cbSize: number;
  /** u32 */
  dwPolicies: number;
  /** ptr */
  pPolicies: Deno.PointerValue | Uint8Array | null;
  /** Windows.Win32.Security.WinTrust.CONFIG_CI_PROV_INFO_RESULT */
  result: Uint8Array | Deno.PointerValue | null;
  /** u32 */
  dwScenario: number;
}

export const sizeofCONFIG_CI_PROV_INFO = 32;

export function allocCONFIG_CI_PROV_INFO(data?: Partial<CONFIG_CI_PROV_INFO>): Uint8Array {
  const buf = new Uint8Array(sizeofCONFIG_CI_PROV_INFO);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.cbSize !== undefined) view.setUint32(0, Number(data.cbSize), true);
  // 0x04: u32
  if (data?.dwPolicies !== undefined) view.setUint32(4, Number(data.dwPolicies), true);
  // 0x08: pointer
  if (data?.pPolicies !== undefined) view.setBigUint64(8, data.pPolicies === null ? 0n : BigInt(util.toPointer(data.pPolicies)), true);
  // 0x10: pointer
  if (data?.result !== undefined) view.setBigUint64(16, data.result === null ? 0n : BigInt(util.toPointer(data.result)), true);
  // 0x18: u32
  if (data?.dwScenario !== undefined) view.setUint32(24, Number(data.dwScenario), true);
  // 0x1c: pad4
  return buf;
}

// Native Libraries

try {
  var libWINTRUST_dll = Deno.dlopen("WINTRUST.dll", {
    WinVerifyTrust: {
      parameters: ["pointer", "pointer", "pointer"],
      result: "i32",
    },
    WinVerifyTrustEx: {
      parameters: ["pointer", "pointer", "pointer"],
      result: "i32",
    },
    WintrustGetRegPolicyFlags: {
      parameters: ["pointer"],
      result: "void",
    },
    WintrustSetRegPolicyFlags: {
      parameters: ["u32"],
      result: "i32",
    },
    WintrustAddActionID: {
      parameters: ["pointer", "u32", "pointer"],
      result: "i32",
    },
    WintrustRemoveActionID: {
      parameters: ["pointer"],
      result: "i32",
    },
    WintrustLoadFunctionPointers: {
      parameters: ["pointer", "pointer"],
      result: "i32",
    },
    WintrustAddDefaultForUsage: {
      parameters: ["buffer", "pointer"],
      result: "i32",
    },
    WintrustGetDefaultForUsage: {
      parameters: ["u32", "buffer", "pointer"],
      result: "i32",
    },
    WTHelperGetProvSignerFromChain: {
      parameters: ["pointer", "u32", "i32", "u32"],
      result: "pointer",
    },
    WTHelperGetProvCertFromChain: {
      parameters: ["pointer", "u32"],
      result: "pointer",
    },
    WTHelperProvDataFromStateData: {
      parameters: ["pointer"],
      result: "pointer",
    },
    WTHelperGetProvPrivateDataFromChain: {
      parameters: ["pointer", "pointer"],
      result: "pointer",
    },
    WTHelperCertIsSelfSigned: {
      parameters: ["u32", "pointer"],
      result: "i32",
    },
    WTHelperCertCheckValidSignature: {
      parameters: ["pointer"],
      result: "pointer",
    },
    OpenPersonalTrustDBDialogEx: {
      parameters: ["pointer", "u32", "pointer"],
      result: "i32",
    },
    OpenPersonalTrustDBDialog: {
      parameters: ["pointer"],
      result: "i32",
    },
    WintrustSetDefaultIncludePEPageHashes: {
      parameters: ["i32"],
      result: "void",
    },
  }).symbols;
} catch(e) { /* ignore */ }

// Symbols

export function WinVerifyTrust(
  hwnd: Deno.PointerValue | null /* Windows.Win32.Foundation.HWND */,
  pgActionID: Deno.PointerValue | Uint8Array | null /* ptr */,
  pWVTData: Deno.PointerValue | Uint8Array | null /* ptr */,
): number /* i32 */ {
  return libWINTRUST_dll.WinVerifyTrust(util.hwndToFfi(hwnd), util.toPointer(pgActionID), util.toPointer(pWVTData));
}

export function WinVerifyTrustEx(
  hwnd: Deno.PointerValue | null /* Windows.Win32.Foundation.HWND */,
  pgActionID: Deno.PointerValue | Uint8Array | null /* ptr */,
  pWinTrustData: Deno.PointerValue | Uint8Array | null /* ptr */,
): number /* i32 */ {
  return libWINTRUST_dll.WinVerifyTrustEx(util.hwndToFfi(hwnd), util.toPointer(pgActionID), util.toPointer(pWinTrustData));
}

export function WintrustGetRegPolicyFlags(
  pdwPolicyFlags: Deno.PointerValue | Uint8Array | null /* ptr */,
): void /* void */ {
  return libWINTRUST_dll.WintrustGetRegPolicyFlags(util.toPointer(pdwPolicyFlags));
}

export function WintrustSetRegPolicyFlags(
  dwPolicyFlags: WINTRUST_POLICY_FLAGS /* Windows.Win32.Security.WinTrust.WINTRUST_POLICY_FLAGS */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libWINTRUST_dll.WintrustSetRegPolicyFlags(dwPolicyFlags));
}

export function WintrustAddActionID(
  pgActionID: Deno.PointerValue | Uint8Array | null /* ptr */,
  fdwFlags: number /* u32 */,
  psProvInfo: Deno.PointerValue | Uint8Array | null /* ptr */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libWINTRUST_dll.WintrustAddActionID(util.toPointer(pgActionID), fdwFlags, util.toPointer(psProvInfo)));
}

export function WintrustRemoveActionID(
  pgActionID: Deno.PointerValue | Uint8Array | null /* ptr */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libWINTRUST_dll.WintrustRemoveActionID(util.toPointer(pgActionID)));
}

export function WintrustLoadFunctionPointers(
  pgActionID: Deno.PointerValue | Uint8Array | null /* ptr */,
  pPfns: Deno.PointerValue | Uint8Array | null /* ptr */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libWINTRUST_dll.WintrustLoadFunctionPointers(util.toPointer(pgActionID), util.toPointer(pPfns)));
}

export function WintrustAddDefaultForUsage(
  pszUsageOID: string | null /* Windows.Win32.Foundation.PSTR */,
  psDefUsage: Deno.PointerValue | Uint8Array | null /* ptr */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libWINTRUST_dll.WintrustAddDefaultForUsage(util.pstrToFfi(pszUsageOID), util.toPointer(psDefUsage)));
}

export function WintrustGetDefaultForUsage(
  dwAction: WINTRUST_GET_DEFAULT_FOR_USAGE_ACTION /* Windows.Win32.Security.WinTrust.WINTRUST_GET_DEFAULT_FOR_USAGE_ACTION */,
  pszUsageOID: string | null /* Windows.Win32.Foundation.PSTR */,
  psUsage: Deno.PointerValue | Uint8Array | null /* ptr */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libWINTRUST_dll.WintrustGetDefaultForUsage(dwAction, util.pstrToFfi(pszUsageOID), util.toPointer(psUsage)));
}

export function WTHelperGetProvSignerFromChain(
  pProvData: Deno.PointerValue | Uint8Array | null /* ptr */,
  idxSigner: number /* u32 */,
  fCounterSigner: boolean /* Windows.Win32.Foundation.BOOL */,
  idxCounterSigner: number /* u32 */,
): Deno.PointerValue | null /* ptr */ {
  return util.pointerFromFfi(libWINTRUST_dll.WTHelperGetProvSignerFromChain(util.toPointer(pProvData), idxSigner, util.boolToFfi(fCounterSigner), idxCounterSigner));
}

export function WTHelperGetProvCertFromChain(
  pSgnr: Deno.PointerValue | Uint8Array | null /* ptr */,
  idxCert: number /* u32 */,
): Deno.PointerValue | null /* ptr */ {
  return util.pointerFromFfi(libWINTRUST_dll.WTHelperGetProvCertFromChain(util.toPointer(pSgnr), idxCert));
}

export function WTHelperProvDataFromStateData(
  hStateData: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Foundation.HANDLE */,
): Deno.PointerValue | null /* ptr */ {
  return util.pointerFromFfi(libWINTRUST_dll.WTHelperProvDataFromStateData(util.toPointer(hStateData)));
}

export function WTHelperGetProvPrivateDataFromChain(
  pProvData: Deno.PointerValue | Uint8Array | null /* ptr */,
  pgProviderID: Deno.PointerValue | Uint8Array | null /* ptr */,
): Deno.PointerValue | null /* ptr */ {
  return util.pointerFromFfi(libWINTRUST_dll.WTHelperGetProvPrivateDataFromChain(util.toPointer(pProvData), util.toPointer(pgProviderID)));
}

export function WTHelperCertIsSelfSigned(
  dwEncoding: number /* u32 */,
  pCert: Deno.PointerValue | Uint8Array | null /* ptr */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libWINTRUST_dll.WTHelperCertIsSelfSigned(dwEncoding, util.toPointer(pCert)));
}

export function WTHelperCertCheckValidSignature(
  pProvData: Deno.PointerValue | Uint8Array | null /* ptr */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libWINTRUST_dll.WTHelperCertCheckValidSignature(util.toPointer(pProvData)));
}

export function OpenPersonalTrustDBDialogEx(
  hwndParent: Deno.PointerValue | null /* Windows.Win32.Foundation.HWND */,
  dwFlags: number /* u32 */,
  pvReserved: Deno.PointerValue | Uint8Array | null /* ptr */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libWINTRUST_dll.OpenPersonalTrustDBDialogEx(util.hwndToFfi(hwndParent), dwFlags, util.toPointer(pvReserved)));
}

export function OpenPersonalTrustDBDialog(
  hwndParent: Deno.PointerValue | null /* Windows.Win32.Foundation.HWND */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libWINTRUST_dll.OpenPersonalTrustDBDialog(util.hwndToFfi(hwndParent)));
}

export function WintrustSetDefaultIncludePEPageHashes(
  fIncludePEPageHashes: boolean /* Windows.Win32.Foundation.BOOL */,
): void /* void */ {
  return libWINTRUST_dll.WintrustSetDefaultIncludePEPageHashes(util.boolToFfi(fIncludePEPageHashes));
}

