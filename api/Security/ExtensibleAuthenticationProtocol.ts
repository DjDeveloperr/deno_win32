/// Auto-generated by Deno Win32: Windows.Win32.Security.ExtensibleAuthenticationProtocol.Apis

import * as util from "../../util.ts";

// Enums
export type RAS_AUTH_ATTRIBUTE_TYPE = number;
export type PPP_EAP_ACTION = number;
export type EAP_ATTRIBUTE_TYPE = number;
export type EAP_CONFIG_INPUT_FIELD_TYPE = number;
export type EAP_INTERACTIVE_UI_DATA_TYPE = number;
export type EAP_METHOD_PROPERTY_TYPE = number;
export type EAP_METHOD_PROPERTY_VALUE_TYPE = number;
export type EapCredentialType = number;
export type EapHostPeerMethodResultReason = number;
export type EapHostPeerResponseAction = number;
export type EapHostPeerAuthParams = number;
export type EAPHOST_AUTH_STATUS = number;
export type ISOLATION_STATE = number;
export type EapCode = number;
export type EAP_METHOD_AUTHENTICATOR_RESPONSE_ACTION = number;
export type EapPeerMethodResponseAction = number;
export type EapPeerMethodResultReason = number;
export type EAP_AUTHENTICATOR_SEND_TIMEOUT = number;

// Constants
export const FACILITY_EAP_MESSAGE = 2114;
export const EAP_GROUP_MASK = 65280;
export const EAP_E_EAPHOST_FIRST = "-2143158272";
export const EAP_E_EAPHOST_LAST = "-2143158017";
export const EAP_I_EAPHOST_FIRST = "-2143158272";
export const EAP_I_EAPHOST_LAST = "-2143158017";
export const EAP_E_CERT_STORE_INACCESSIBLE = 2151809040;
export const EAP_E_EAPHOST_METHOD_NOT_INSTALLED = 2151809041;
export const EAP_E_EAPHOST_THIRDPARTY_METHOD_HOST_RESET = 2151809042;
export const EAP_E_EAPHOST_EAPQEC_INACCESSIBLE = 2151809043;
export const EAP_E_EAPHOST_IDENTITY_UNKNOWN = 2151809044;
export const EAP_E_AUTHENTICATION_FAILED = 2151809045;
export const EAP_I_EAPHOST_EAP_NEGOTIATION_FAILED = 1078067222;
export const EAP_E_EAPHOST_METHOD_INVALID_PACKET = 2151809047;
export const EAP_E_EAPHOST_REMOTE_INVALID_PACKET = 2151809048;
export const EAP_E_EAPHOST_XML_MALFORMED = 2151809049;
export const EAP_E_METHOD_CONFIG_DOES_NOT_SUPPORT_SSO = 2151809050;
export const EAP_E_EAPHOST_METHOD_OPERATION_NOT_SUPPORTED = 2151809056;
export const EAP_E_USER_FIRST = "-2143158016";
export const EAP_E_USER_LAST = "-2143157761";
export const EAP_I_USER_FIRST = 1078067456;
export const EAP_I_USER_LAST = 1078067711;
export const EAP_E_USER_CERT_NOT_FOUND = 2151809280;
export const EAP_E_USER_CERT_INVALID = 2151809281;
export const EAP_E_USER_CERT_EXPIRED = 2151809282;
export const EAP_E_USER_CERT_REVOKED = 2151809283;
export const EAP_E_USER_CERT_OTHER_ERROR = 2151809284;
export const EAP_E_USER_CERT_REJECTED = 2151809285;
export const EAP_I_USER_ACCOUNT_OTHER_ERROR = 1078067472;
export const EAP_E_USER_CREDENTIALS_REJECTED = 2151809297;
export const EAP_E_USER_NAME_PASSWORD_REJECTED = 2151809298;
export const EAP_E_NO_SMART_CARD_READER = 2151809299;
export const EAP_E_SERVER_FIRST = "-2143157760";
export const EAP_E_SERVER_LAST = "-2143157505";
export const EAP_E_SERVER_CERT_NOT_FOUND = 2151809536;
export const EAP_E_SERVER_CERT_INVALID = 2151809537;
export const EAP_E_SERVER_CERT_EXPIRED = 2151809538;
export const EAP_E_SERVER_CERT_REVOKED = 2151809539;
export const EAP_E_SERVER_CERT_OTHER_ERROR = 2151809540;
export const EAP_E_USER_ROOT_CERT_FIRST = "-2143157504";
export const EAP_E_USER_ROOT_CERT_LAST = "-2143157249";
export const EAP_E_USER_ROOT_CERT_NOT_FOUND = 2151809792;
export const EAP_E_USER_ROOT_CERT_INVALID = 2151809793;
export const EAP_E_USER_ROOT_CERT_EXPIRED = 2151809794;
export const EAP_E_SERVER_ROOT_CERT_FIRST = "-2143157248";
export const EAP_E_SERVER_ROOT_CERT_LAST = "-2143156993";
export const EAP_E_SERVER_ROOT_CERT_NOT_FOUND = 2151810048;
export const EAP_E_SERVER_ROOT_CERT_INVALID = 2151810049;
export const EAP_E_SERVER_ROOT_CERT_NAME_REQUIRED = 2151810054;
export const EAP_E_SIM_NOT_VALID = 2151810304;
export const EAP_METHOD_INVALID_PACKET = 2151809047;
export const EAP_INVALID_PACKET = 2151809048;
export const EAP_PEER_FLAG_GUEST_ACCESS = 64;
export const EAP_FLAG_Reserved1 = 1;
export const EAP_FLAG_NON_INTERACTIVE = 2;
export const EAP_FLAG_LOGON = 4;
export const EAP_FLAG_PREVIEW = 8;
export const EAP_FLAG_Reserved2 = 16;
export const EAP_FLAG_MACHINE_AUTH = 32;
export const EAP_FLAG_GUEST_ACCESS = 64;
export const EAP_FLAG_Reserved3 = 128;
export const EAP_FLAG_Reserved4 = 256;
export const EAP_FLAG_RESUME_FROM_HIBERNATE = 512;
export const EAP_FLAG_Reserved5 = 1024;
export const EAP_FLAG_Reserved6 = 2048;
export const EAP_FLAG_FULL_AUTH = 4096;
export const EAP_FLAG_PREFER_ALT_CREDENTIALS = 8192;
export const EAP_FLAG_Reserved7 = 16384;
export const EAP_PEER_FLAG_HEALTH_STATE_CHANGE = 32768;
export const EAP_FLAG_SUPRESS_UI = 65536;
export const EAP_FLAG_PRE_LOGON = 131072;
export const EAP_FLAG_USER_AUTH = 262144;
export const EAP_FLAG_CONFG_READONLY = 524288;
export const EAP_FLAG_Reserved8 = 1048576;
export const EAP_FLAG_Reserved9 = 4194304;
export const EAP_FLAG_VPN = 8388608;
export const EAP_FLAG_ONLY_EAP_TLS = 16777216;
export const EAP_FLAG_SERVER_VALIDATION_REQUIRED = 33554432;
export const EAP_CONFIG_INPUT_FIELD_PROPS_DEFAULT = 0;
export const EAP_CONFIG_INPUT_FIELD_PROPS_NON_DISPLAYABLE = 1;
export const EAP_CONFIG_INPUT_FIELD_PROPS_NON_PERSIST = 2;
export const EAP_UI_INPUT_FIELD_PROPS_DEFAULT = 0;
export const EAP_UI_INPUT_FIELD_PROPS_NON_DISPLAYABLE = 1;
export const EAP_UI_INPUT_FIELD_PROPS_NON_PERSIST = 2;
export const EAP_UI_INPUT_FIELD_PROPS_READ_ONLY = 4;
export const EAP_CREDENTIAL_VERSION = 1;
export const EAP_INTERACTIVE_UI_DATA_VERSION = 1;
export const EAPHOST_PEER_API_VERSION = 1;
export const EAPHOST_METHOD_API_VERSION = 1;
export const MAX_EAP_CONFIG_INPUT_FIELD_LENGTH = 256;
export const MAX_EAP_CONFIG_INPUT_FIELD_VALUE_LENGTH = 1024;
export const CERTIFICATE_HASH_LENGTH = 20;
export const NCRYPT_PIN_CACHE_PIN_BYTE_LENGTH = 90;
export const EAP_METHOD_AUTHENTICATOR_CONFIG_IS_IDENTITY_PRIVACY = 1;
export const RAS_EAP_ROLE_AUTHENTICATOR = 1;
export const RAS_EAP_ROLE_AUTHENTICATEE = 2;
export const RAS_EAP_ROLE_EXCLUDE_IN_EAP = 4;
export const RAS_EAP_ROLE_EXCLUDE_IN_PEAP = 8;
export const RAS_EAP_ROLE_EXCLUDE_IN_VPN = 16;
export const EAPCODE_Request = 1;
export const EAPCODE_Response = 2;
export const EAPCODE_Success = 3;
export const EAPCODE_Failure = 4;
export const MAXEAPCODE = 4;
export const RAS_EAP_FLAG_ROUTER = 1;
export const RAS_EAP_FLAG_NON_INTERACTIVE = 2;
export const RAS_EAP_FLAG_LOGON = 4;
export const RAS_EAP_FLAG_PREVIEW = 8;
export const RAS_EAP_FLAG_FIRST_LINK = 16;
export const RAS_EAP_FLAG_MACHINE_AUTH = 32;
export const RAS_EAP_FLAG_GUEST_ACCESS = 64;
export const RAS_EAP_FLAG_8021X_AUTH = 128;
export const RAS_EAP_FLAG_HOSTED_IN_PEAP = 256;
export const RAS_EAP_FLAG_RESUME_FROM_HIBERNATE = 512;
export const RAS_EAP_FLAG_PEAP_UPFRONT = 1024;
export const RAS_EAP_FLAG_ALTERNATIVE_USER_DB = 2048;
export const RAS_EAP_FLAG_PEAP_FORCE_FULL_AUTH = 4096;
export const RAS_EAP_FLAG_PRE_LOGON = 131072;
export const RAS_EAP_FLAG_CONFG_READONLY = 524288;
export const RAS_EAP_FLAG_RESERVED = 1048576;
export const RAS_EAP_FLAG_SAVE_CREDMAN = 2097152;
export const RAS_EAP_FLAG_SERVER_VALIDATION_REQUIRED = 33554432;
export const raatMinimum = 0;
export const raatUserName = 1;
export const raatUserPassword = 2;
export const raatMD5CHAPPassword = 3;
export const raatNASIPAddress = 4;
export const raatNASPort = 5;
export const raatServiceType = 6;
export const raatFramedProtocol = 7;
export const raatFramedIPAddress = 8;
export const raatFramedIPNetmask = 9;
export const raatFramedRouting = 10;
export const raatFilterId = 11;
export const raatFramedMTU = 12;
export const raatFramedCompression = 13;
export const raatLoginIPHost = 14;
export const raatLoginService = 15;
export const raatLoginTCPPort = 16;
export const raatUnassigned17 = 17;
export const raatReplyMessage = 18;
export const raatCallbackNumber = 19;
export const raatCallbackId = 20;
export const raatUnassigned21 = 21;
export const raatFramedRoute = 22;
export const raatFramedIPXNetwork = 23;
export const raatState = 24;
export const raatClass = 25;
export const raatVendorSpecific = 26;
export const raatSessionTimeout = 27;
export const raatIdleTimeout = 28;
export const raatTerminationAction = 29;
export const raatCalledStationId = 30;
export const raatCallingStationId = 31;
export const raatNASIdentifier = 32;
export const raatProxyState = 33;
export const raatLoginLATService = 34;
export const raatLoginLATNode = 35;
export const raatLoginLATGroup = 36;
export const raatFramedAppleTalkLink = 37;
export const raatFramedAppleTalkNetwork = 38;
export const raatFramedAppleTalkZone = 39;
export const raatAcctStatusType = 40;
export const raatAcctDelayTime = 41;
export const raatAcctInputOctets = 42;
export const raatAcctOutputOctets = 43;
export const raatAcctSessionId = 44;
export const raatAcctAuthentic = 45;
export const raatAcctSessionTime = 46;
export const raatAcctInputPackets = 47;
export const raatAcctOutputPackets = 48;
export const raatAcctTerminateCause = 49;
export const raatAcctMultiSessionId = 50;
export const raatAcctLinkCount = 51;
export const raatAcctEventTimeStamp = 55;
export const raatMD5CHAPChallenge = 60;
export const raatNASPortType = 61;
export const raatPortLimit = 62;
export const raatLoginLATPort = 63;
export const raatTunnelType = 64;
export const raatTunnelMediumType = 65;
export const raatTunnelClientEndpoint = 66;
export const raatTunnelServerEndpoint = 67;
export const raatARAPPassword = 70;
export const raatARAPFeatures = 71;
export const raatARAPZoneAccess = 72;
export const raatARAPSecurity = 73;
export const raatARAPSecurityData = 74;
export const raatPasswordRetry = 75;
export const raatPrompt = 76;
export const raatConnectInfo = 77;
export const raatConfigurationToken = 78;
export const raatEAPMessage = 79;
export const raatSignature = 80;
export const raatARAPChallengeResponse = 84;
export const raatAcctInterimInterval = 85;
export const raatNASIPv6Address = 95;
export const raatFramedInterfaceId = 96;
export const raatFramedIPv6Prefix = 97;
export const raatLoginIPv6Host = 98;
export const raatFramedIPv6Route = 99;
export const raatFramedIPv6Pool = 100;
export const raatARAPGuestLogon = 8096;
export const raatCertificateOID = 8097;
export const raatEAPConfiguration = 8098;
export const raatPEAPEmbeddedEAPTypeId = 8099;
export const raatInnerEAPTypeId = 8099;
export const raatPEAPFastRoamedSession = 8100;
export const raatFastRoamedSession = 8100;
export const raatEAPTLV = 8102;
export const raatCredentialsChanged = 8103;
export const raatCertificateThumbprint = 8250;
export const raatPeerId = 9000;
export const raatServerId = 9001;
export const raatMethodId = 9002;
export const raatEMSK = 9003;
export const raatSessionId = 9004;
export const raatReserved = "-1";
export const EAPACTION_NoAction = 0;
export const EAPACTION_Authenticate = 1;
export const EAPACTION_Done = 2;
export const EAPACTION_SendAndDone = 3;
export const EAPACTION_Send = 4;
export const EAPACTION_SendWithTimeout = 5;
export const EAPACTION_SendWithTimeoutInteractive = 6;
export const EAPACTION_IndicateTLV = 7;
export const EAPACTION_IndicateIdentity = 8;
export const eatMinimum = 0;
export const eatUserName = 1;
export const eatUserPassword = 2;
export const eatMD5CHAPPassword = 3;
export const eatNASIPAddress = 4;
export const eatNASPort = 5;
export const eatServiceType = 6;
export const eatFramedProtocol = 7;
export const eatFramedIPAddress = 8;
export const eatFramedIPNetmask = 9;
export const eatFramedRouting = 10;
export const eatFilterId = 11;
export const eatFramedMTU = 12;
export const eatFramedCompression = 13;
export const eatLoginIPHost = 14;
export const eatLoginService = 15;
export const eatLoginTCPPort = 16;
export const eatUnassigned17 = 17;
export const eatReplyMessage = 18;
export const eatCallbackNumber = 19;
export const eatCallbackId = 20;
export const eatUnassigned21 = 21;
export const eatFramedRoute = 22;
export const eatFramedIPXNetwork = 23;
export const eatState = 24;
export const eatClass = 25;
export const eatVendorSpecific = 26;
export const eatSessionTimeout = 27;
export const eatIdleTimeout = 28;
export const eatTerminationAction = 29;
export const eatCalledStationId = 30;
export const eatCallingStationId = 31;
export const eatNASIdentifier = 32;
export const eatProxyState = 33;
export const eatLoginLATService = 34;
export const eatLoginLATNode = 35;
export const eatLoginLATGroup = 36;
export const eatFramedAppleTalkLink = 37;
export const eatFramedAppleTalkNetwork = 38;
export const eatFramedAppleTalkZone = 39;
export const eatAcctStatusType = 40;
export const eatAcctDelayTime = 41;
export const eatAcctInputOctets = 42;
export const eatAcctOutputOctets = 43;
export const eatAcctSessionId = 44;
export const eatAcctAuthentic = 45;
export const eatAcctSessionTime = 46;
export const eatAcctInputPackets = 47;
export const eatAcctOutputPackets = 48;
export const eatAcctTerminateCause = 49;
export const eatAcctMultiSessionId = 50;
export const eatAcctLinkCount = 51;
export const eatAcctEventTimeStamp = 55;
export const eatMD5CHAPChallenge = 60;
export const eatNASPortType = 61;
export const eatPortLimit = 62;
export const eatLoginLATPort = 63;
export const eatTunnelType = 64;
export const eatTunnelMediumType = 65;
export const eatTunnelClientEndpoint = 66;
export const eatTunnelServerEndpoint = 67;
export const eatARAPPassword = 70;
export const eatARAPFeatures = 71;
export const eatARAPZoneAccess = 72;
export const eatARAPSecurity = 73;
export const eatARAPSecurityData = 74;
export const eatPasswordRetry = 75;
export const eatPrompt = 76;
export const eatConnectInfo = 77;
export const eatConfigurationToken = 78;
export const eatEAPMessage = 79;
export const eatSignature = 80;
export const eatARAPChallengeResponse = 84;
export const eatAcctInterimInterval = 85;
export const eatNASIPv6Address = 95;
export const eatFramedInterfaceId = 96;
export const eatFramedIPv6Prefix = 97;
export const eatLoginIPv6Host = 98;
export const eatFramedIPv6Route = 99;
export const eatFramedIPv6Pool = 100;
export const eatARAPGuestLogon = 8096;
export const eatCertificateOID = 8097;
export const eatEAPConfiguration = 8098;
export const eatPEAPEmbeddedEAPTypeId = 8099;
export const eatPEAPFastRoamedSession = 8100;
export const eatFastRoamedSession = 8100;
export const eatEAPTLV = 8102;
export const eatCredentialsChanged = 8103;
export const eatInnerEapMethodType = 8104;
export const eatClearTextPassword = 8107;
export const eatQuarantineSoH = 8150;
export const eatCertificateThumbprint = 8250;
export const eatPeerId = 9000;
export const eatServerId = 9001;
export const eatMethodId = 9002;
export const eatEMSK = 9003;
export const eatSessionId = 9004;
export const eatReserved = "-1";
export const EapConfigInputUsername = 0;
export const EapConfigInputPassword = 1;
export const EapConfigInputNetworkUsername = 2;
export const EapConfigInputNetworkPassword = 3;
export const EapConfigInputPin = 4;
export const EapConfigInputPSK = 5;
export const EapConfigInputEdit = 6;
export const EapConfigSmartCardUsername = 7;
export const EapConfigSmartCardError = 8;
export const EapCredReq = 0;
export const EapCredResp = 1;
export const EapCredExpiryReq = 2;
export const EapCredExpiryResp = 3;
export const EapCredLogonReq = 4;
export const EapCredLogonResp = 5;
export const emptPropCipherSuiteNegotiation = 0;
export const emptPropMutualAuth = 1;
export const emptPropIntegrity = 2;
export const emptPropReplayProtection = 3;
export const emptPropConfidentiality = 4;
export const emptPropKeyDerivation = 5;
export const emptPropKeyStrength64 = 6;
export const emptPropKeyStrength128 = 7;
export const emptPropKeyStrength256 = 8;
export const emptPropKeyStrength512 = 9;
export const emptPropKeyStrength1024 = 10;
export const emptPropDictionaryAttackResistance = 11;
export const emptPropFastReconnect = 12;
export const emptPropCryptoBinding = 13;
export const emptPropSessionIndependence = 14;
export const emptPropFragmentation = 15;
export const emptPropChannelBinding = 16;
export const emptPropNap = 17;
export const emptPropStandalone = 18;
export const emptPropMppeEncryption = 19;
export const emptPropTunnelMethod = 20;
export const emptPropSupportsConfig = 21;
export const emptPropCertifiedMethod = 22;
export const emptPropHiddenMethod = 23;
export const emptPropMachineAuth = 24;
export const emptPropUserAuth = 25;
export const emptPropIdentityPrivacy = 26;
export const emptPropMethodChaining = 27;
export const emptPropSharedStateEquivalence = 28;
export const emptLegacyMethodPropertyFlag = 31;
export const emptPropVendorSpecific = 255;
export const empvtBool = 0;
export const empvtDword = 1;
export const empvtString = 2;
export const EAP_EMPTY_CREDENTIAL = 0;
export const EAP_USERNAME_PASSWORD_CREDENTIAL = 1;
export const EAP_WINLOGON_CREDENTIAL = 2;
export const EAP_CERTIFICATE_CREDENTIAL = 3;
export const EAP_SIM_CREDENTIAL = 4;
export const EapHostPeerMethodResultAltSuccessReceived = 1;
export const EapHostPeerMethodResultTimeout = 2;
export const EapHostPeerMethodResultFromMethod = 3;
export const EapHostPeerResponseDiscard = 0;
export const EapHostPeerResponseSend = 1;
export const EapHostPeerResponseResult = 2;
export const EapHostPeerResponseInvokeUi = 3;
export const EapHostPeerResponseRespond = 4;
export const EapHostPeerResponseStartAuthentication = 5;
export const EapHostPeerResponseNone = 6;
export const EapHostPeerAuthStatus = 1;
export const EapHostPeerIdentity = 2;
export const EapHostPeerIdentityExtendedInfo = 3;
export const EapHostNapInfo = 4;
export const EapHostInvalidSession = 0;
export const EapHostAuthNotStarted = 1;
export const EapHostAuthIdentityExchange = 2;
export const EapHostAuthNegotiatingType = 3;
export const EapHostAuthInProgress = 4;
export const EapHostAuthSucceeded = 5;
export const EapHostAuthFailed = 6;
export const ISOLATION_STATE_UNKNOWN = 0;
export const ISOLATION_STATE_NOT_RESTRICTED = 1;
export const ISOLATION_STATE_IN_PROBATION = 2;
export const ISOLATION_STATE_RESTRICTED_ACCESS = 3;
export const EapCodeMinimum = 1;
export const EapCodeRequest = 1;
export const EapCodeResponse = 2;
export const EapCodeSuccess = 3;
export const EapCodeFailure = 4;
export const EapCodeMaximum = 4;
export const EAP_METHOD_AUTHENTICATOR_RESPONSE_DISCARD = 0;
export const EAP_METHOD_AUTHENTICATOR_RESPONSE_SEND = 1;
export const EAP_METHOD_AUTHENTICATOR_RESPONSE_RESULT = 2;
export const EAP_METHOD_AUTHENTICATOR_RESPONSE_RESPOND = 3;
export const EAP_METHOD_AUTHENTICATOR_RESPONSE_AUTHENTICATE = 4;
export const EAP_METHOD_AUTHENTICATOR_RESPONSE_HANDLE_IDENTITY = 5;
export const EapPeerMethodResponseActionDiscard = 0;
export const EapPeerMethodResponseActionSend = 1;
export const EapPeerMethodResponseActionResult = 2;
export const EapPeerMethodResponseActionInvokeUI = 3;
export const EapPeerMethodResponseActionRespond = 4;
export const EapPeerMethodResponseActionNone = 5;
export const EapPeerMethodResultUnknown = 1;
export const EapPeerMethodResultSuccess = 2;
export const EapPeerMethodResultFailure = 3;
export const EAP_AUTHENTICATOR_SEND_TIMEOUT_NONE = 0;
export const EAP_AUTHENTICATOR_SEND_TIMEOUT_BASIC = 1;
export const EAP_AUTHENTICATOR_SEND_TIMEOUT_INTERACTIVE = 2;

// Structs

export type HANDLE = Deno.PointerValue;

/**
 * Windows.Win32.Security.ExtensibleAuthenticationProtocol.NgcTicketContext (size: 24)
 */
export interface NgcTicketContext {
  /** array */
  wszTicket: Deno.PointerValue | null;
  /** usize */
  hKey: Deno.PointerValue;
  /** Windows.Win32.Foundation.HANDLE */
  hImpersonateToken: Uint8Array | Deno.PointerValue | null;
}

export const sizeofNgcTicketContext = 24;

export function allocNgcTicketContext(data?: Partial<NgcTicketContext>): Uint8Array {
  const buf = new Uint8Array(sizeofNgcTicketContext);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.wszTicket !== undefined) view.setBigUint64(0, data.wszTicket === null ? 0n : BigInt(util.toPointer(data.wszTicket)), true);
  // 0x08: usize
  if (data?.hKey !== undefined) view.setBigUint64(8, BigInt(data.hKey), true);
  // 0x10: pointer
  if (data?.hImpersonateToken !== undefined) view.setBigUint64(16, data.hImpersonateToken === null ? 0n : BigInt(util.toPointer(data.hImpersonateToken)), true);
  return buf;
}

/**
 * Windows.Win32.Security.ExtensibleAuthenticationProtocol.RAS_AUTH_ATTRIBUTE (size: 16)
 */
export interface RAS_AUTH_ATTRIBUTE {
  /** Windows.Win32.Security.ExtensibleAuthenticationProtocol.RAS_AUTH_ATTRIBUTE_TYPE */
  raaType: RAS_AUTH_ATTRIBUTE_TYPE;
  /** u32 */
  dwLength: number;
  /** ptr */
  Value: Deno.PointerValue | Uint8Array | null;
}

export const sizeofRAS_AUTH_ATTRIBUTE = 16;

export function allocRAS_AUTH_ATTRIBUTE(data?: Partial<RAS_AUTH_ATTRIBUTE>): Uint8Array {
  const buf = new Uint8Array(sizeofRAS_AUTH_ATTRIBUTE);
  const view = new DataView(buf.buffer);
  // 0x00: i32
  if (data?.raaType !== undefined) view.setInt32(0, Number(data.raaType), true);
  // 0x04: u32
  if (data?.dwLength !== undefined) view.setUint32(4, Number(data.dwLength), true);
  // 0x08: pointer
  if (data?.Value !== undefined) view.setBigUint64(8, data.Value === null ? 0n : BigInt(util.toPointer(data.Value)), true);
  return buf;
}

/**
 * Windows.Win32.Security.ExtensibleAuthenticationProtocol.PPP_EAP_PACKET (size: 24)
 */
export interface PPP_EAP_PACKET {
  /** u8 */
  Code: number;
  /** u8 */
  Id: number;
  /** array */
  Length: Deno.PointerValue | null;
  /** array */
  Data: Deno.PointerValue | null;
}

export const sizeofPPP_EAP_PACKET = 24;

export function allocPPP_EAP_PACKET(data?: Partial<PPP_EAP_PACKET>): Uint8Array {
  const buf = new Uint8Array(sizeofPPP_EAP_PACKET);
  const view = new DataView(buf.buffer);
  // 0x00: u8
  if (data?.Code !== undefined) view.setUint8(0, Number(data.Code));
  // 0x01: u8
  if (data?.Id !== undefined) view.setUint8(1, Number(data.Id));
  // 0x02: pad6
  // 0x08: pointer
  if (data?.Length !== undefined) view.setBigUint64(8, data.Length === null ? 0n : BigInt(util.toPointer(data.Length)), true);
  // 0x10: pointer
  if (data?.Data !== undefined) view.setBigUint64(16, data.Data === null ? 0n : BigInt(util.toPointer(data.Data)), true);
  return buf;
}

export type BOOL = number;

export type PWSTR = Deno.PointerValue | Uint8Array | null;

/**
 * Windows.Win32.Security.ExtensibleAuthenticationProtocol.PPP_EAP_INPUT (size: 144)
 */
export interface PPP_EAP_INPUT {
  /** u32 */
  dwSizeInBytes: number;
  /** u32 */
  fFlags: number;
  /** Windows.Win32.Foundation.BOOL */
  fAuthenticator: boolean;
  /** Windows.Win32.Foundation.PWSTR */
  pwszIdentity: string | null;
  /** Windows.Win32.Foundation.PWSTR */
  pwszPassword: string | null;
  /** u8 */
  bInitialId: number;
  /** ptr */
  pUserAttributes: Deno.PointerValue | Uint8Array | null;
  /** Windows.Win32.Foundation.BOOL */
  fAuthenticationComplete: boolean;
  /** u32 */
  dwAuthResultCode: number;
  /** Windows.Win32.Foundation.HANDLE */
  hTokenImpersonateUser: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Foundation.BOOL */
  fSuccessPacketReceived: boolean;
  /** Windows.Win32.Foundation.BOOL */
  fDataReceivedFromInteractiveUI: boolean;
  /** ptr */
  pDataFromInteractiveUI: Deno.PointerValue | Uint8Array | null;
  /** u32 */
  dwSizeOfDataFromInteractiveUI: number;
  /** ptr */
  pConnectionData: Deno.PointerValue | Uint8Array | null;
  /** u32 */
  dwSizeOfConnectionData: number;
  /** ptr */
  pUserData: Deno.PointerValue | Uint8Array | null;
  /** u32 */
  dwSizeOfUserData: number;
  /** Windows.Win32.Foundation.HANDLE */
  hReserved: Uint8Array | Deno.PointerValue | null;
  /** System.Guid */
  guidConnectionId: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Foundation.BOOL */
  isVpn: boolean;
}

export const sizeofPPP_EAP_INPUT = 144;

export function allocPPP_EAP_INPUT(data?: Partial<PPP_EAP_INPUT>): Uint8Array {
  const buf = new Uint8Array(sizeofPPP_EAP_INPUT);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.dwSizeInBytes !== undefined) view.setUint32(0, Number(data.dwSizeInBytes), true);
  // 0x04: u32
  if (data?.fFlags !== undefined) view.setUint32(4, Number(data.fFlags), true);
  // 0x08: i32
  if (data?.fAuthenticator !== undefined) view.setInt32(8, Number(data.fAuthenticator), true);
  // 0x0c: pad4
  // 0x10: buffer
  if (data?.pwszIdentity !== undefined) {
    (buf as any)._f16 = util.pwstrToFfi(data.pwszIdentity);
    view.setBigUint64(16, (buf as any)._f16 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f16)), true);
  }
  // 0x18: buffer
  if (data?.pwszPassword !== undefined) {
    (buf as any)._f24 = util.pwstrToFfi(data.pwszPassword);
    view.setBigUint64(24, (buf as any)._f24 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f24)), true);
  }
  // 0x20: u8
  if (data?.bInitialId !== undefined) view.setUint8(32, Number(data.bInitialId));
  // 0x21: pad7
  // 0x28: pointer
  if (data?.pUserAttributes !== undefined) view.setBigUint64(40, data.pUserAttributes === null ? 0n : BigInt(util.toPointer(data.pUserAttributes)), true);
  // 0x30: i32
  if (data?.fAuthenticationComplete !== undefined) view.setInt32(48, Number(data.fAuthenticationComplete), true);
  // 0x34: u32
  if (data?.dwAuthResultCode !== undefined) view.setUint32(52, Number(data.dwAuthResultCode), true);
  // 0x38: pointer
  if (data?.hTokenImpersonateUser !== undefined) view.setBigUint64(56, data.hTokenImpersonateUser === null ? 0n : BigInt(util.toPointer(data.hTokenImpersonateUser)), true);
  // 0x40: i32
  if (data?.fSuccessPacketReceived !== undefined) view.setInt32(64, Number(data.fSuccessPacketReceived), true);
  // 0x44: i32
  if (data?.fDataReceivedFromInteractiveUI !== undefined) view.setInt32(68, Number(data.fDataReceivedFromInteractiveUI), true);
  // 0x48: pointer
  if (data?.pDataFromInteractiveUI !== undefined) view.setBigUint64(72, data.pDataFromInteractiveUI === null ? 0n : BigInt(util.toPointer(data.pDataFromInteractiveUI)), true);
  // 0x50: u32
  if (data?.dwSizeOfDataFromInteractiveUI !== undefined) view.setUint32(80, Number(data.dwSizeOfDataFromInteractiveUI), true);
  // 0x54: pad4
  // 0x58: pointer
  if (data?.pConnectionData !== undefined) view.setBigUint64(88, data.pConnectionData === null ? 0n : BigInt(util.toPointer(data.pConnectionData)), true);
  // 0x60: u32
  if (data?.dwSizeOfConnectionData !== undefined) view.setUint32(96, Number(data.dwSizeOfConnectionData), true);
  // 0x64: pad4
  // 0x68: pointer
  if (data?.pUserData !== undefined) view.setBigUint64(104, data.pUserData === null ? 0n : BigInt(util.toPointer(data.pUserData)), true);
  // 0x70: u32
  if (data?.dwSizeOfUserData !== undefined) view.setUint32(112, Number(data.dwSizeOfUserData), true);
  // 0x74: pad4
  // 0x78: pointer
  if (data?.hReserved !== undefined) view.setBigUint64(120, data.hReserved === null ? 0n : BigInt(util.toPointer(data.hReserved)), true);
  // 0x80: pointer
  if (data?.guidConnectionId !== undefined) view.setBigUint64(128, data.guidConnectionId === null ? 0n : BigInt(util.toPointer(data.guidConnectionId)), true);
  // 0x88: i32
  if (data?.isVpn !== undefined) view.setInt32(136, Number(data.isVpn), true);
  // 0x8c: pad4
  return buf;
}

/**
 * Windows.Win32.Security.ExtensibleAuthenticationProtocol.PPP_EAP_OUTPUT (size: 96)
 */
export interface PPP_EAP_OUTPUT {
  /** u32 */
  dwSizeInBytes: number;
  /** Windows.Win32.Security.ExtensibleAuthenticationProtocol.PPP_EAP_ACTION */
  Action: PPP_EAP_ACTION;
  /** u32 */
  dwAuthResultCode: number;
  /** ptr */
  pUserAttributes: Deno.PointerValue | Uint8Array | null;
  /** Windows.Win32.Foundation.BOOL */
  fInvokeInteractiveUI: boolean;
  /** ptr */
  pUIContextData: Deno.PointerValue | Uint8Array | null;
  /** u32 */
  dwSizeOfUIContextData: number;
  /** Windows.Win32.Foundation.BOOL */
  fSaveConnectionData: boolean;
  /** ptr */
  pConnectionData: Deno.PointerValue | Uint8Array | null;
  /** u32 */
  dwSizeOfConnectionData: number;
  /** Windows.Win32.Foundation.BOOL */
  fSaveUserData: boolean;
  /** ptr */
  pUserData: Deno.PointerValue | Uint8Array | null;
  /** u32 */
  dwSizeOfUserData: number;
  /** ptr */
  pNgcKerbTicket: Deno.PointerValue | Uint8Array | null;
  /** Windows.Win32.Foundation.BOOL */
  fSaveToCredMan: boolean;
}

export const sizeofPPP_EAP_OUTPUT = 96;

export function allocPPP_EAP_OUTPUT(data?: Partial<PPP_EAP_OUTPUT>): Uint8Array {
  const buf = new Uint8Array(sizeofPPP_EAP_OUTPUT);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.dwSizeInBytes !== undefined) view.setUint32(0, Number(data.dwSizeInBytes), true);
  // 0x04: i32
  if (data?.Action !== undefined) view.setInt32(4, Number(data.Action), true);
  // 0x08: u32
  if (data?.dwAuthResultCode !== undefined) view.setUint32(8, Number(data.dwAuthResultCode), true);
  // 0x0c: pad4
  // 0x10: pointer
  if (data?.pUserAttributes !== undefined) view.setBigUint64(16, data.pUserAttributes === null ? 0n : BigInt(util.toPointer(data.pUserAttributes)), true);
  // 0x18: i32
  if (data?.fInvokeInteractiveUI !== undefined) view.setInt32(24, Number(data.fInvokeInteractiveUI), true);
  // 0x1c: pad4
  // 0x20: pointer
  if (data?.pUIContextData !== undefined) view.setBigUint64(32, data.pUIContextData === null ? 0n : BigInt(util.toPointer(data.pUIContextData)), true);
  // 0x28: u32
  if (data?.dwSizeOfUIContextData !== undefined) view.setUint32(40, Number(data.dwSizeOfUIContextData), true);
  // 0x2c: i32
  if (data?.fSaveConnectionData !== undefined) view.setInt32(44, Number(data.fSaveConnectionData), true);
  // 0x30: pointer
  if (data?.pConnectionData !== undefined) view.setBigUint64(48, data.pConnectionData === null ? 0n : BigInt(util.toPointer(data.pConnectionData)), true);
  // 0x38: u32
  if (data?.dwSizeOfConnectionData !== undefined) view.setUint32(56, Number(data.dwSizeOfConnectionData), true);
  // 0x3c: i32
  if (data?.fSaveUserData !== undefined) view.setInt32(60, Number(data.fSaveUserData), true);
  // 0x40: pointer
  if (data?.pUserData !== undefined) view.setBigUint64(64, data.pUserData === null ? 0n : BigInt(util.toPointer(data.pUserData)), true);
  // 0x48: u32
  if (data?.dwSizeOfUserData !== undefined) view.setUint32(72, Number(data.dwSizeOfUserData), true);
  // 0x4c: pad4
  // 0x50: pointer
  if (data?.pNgcKerbTicket !== undefined) view.setBigUint64(80, data.pNgcKerbTicket === null ? 0n : BigInt(util.toPointer(data.pNgcKerbTicket)), true);
  // 0x58: i32
  if (data?.fSaveToCredMan !== undefined) view.setInt32(88, Number(data.fSaveToCredMan), true);
  // 0x5c: pad4
  return buf;
}

/**
 * Windows.Win32.Security.ExtensibleAuthenticationProtocol.PPP_EAP_INFO (size: 40)
 */
export interface PPP_EAP_INFO {
  /** u32 */
  dwSizeInBytes: number;
  /** u32 */
  dwEapTypeId: number;
  /** isize */
  RasEapInitialize: Deno.PointerValue;
  /** isize */
  RasEapBegin: Deno.PointerValue;
  /** isize */
  RasEapEnd: Deno.PointerValue;
  /** isize */
  RasEapMakeMessage: Deno.PointerValue;
}

export const sizeofPPP_EAP_INFO = 40;

export function allocPPP_EAP_INFO(data?: Partial<PPP_EAP_INFO>): Uint8Array {
  const buf = new Uint8Array(sizeofPPP_EAP_INFO);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.dwSizeInBytes !== undefined) view.setUint32(0, Number(data.dwSizeInBytes), true);
  // 0x04: u32
  if (data?.dwEapTypeId !== undefined) view.setUint32(4, Number(data.dwEapTypeId), true);
  // 0x08: isize
  if (data?.RasEapInitialize !== undefined) view.setBigInt64(8, BigInt(data.RasEapInitialize), true);
  // 0x10: isize
  if (data?.RasEapBegin !== undefined) view.setBigInt64(16, BigInt(data.RasEapBegin), true);
  // 0x18: isize
  if (data?.RasEapEnd !== undefined) view.setBigInt64(24, BigInt(data.RasEapEnd), true);
  // 0x20: isize
  if (data?.RasEapMakeMessage !== undefined) view.setBigInt64(32, BigInt(data.RasEapMakeMessage), true);
  return buf;
}

/**
 * Windows.Win32.Security.ExtensibleAuthenticationProtocol.LEGACY_IDENTITY_UI_PARAMS (size: 72)
 */
export interface LEGACY_IDENTITY_UI_PARAMS {
  /** u32 */
  eapType: number;
  /** u32 */
  dwFlags: number;
  /** u32 */
  dwSizeofConnectionData: number;
  /** ptr */
  pConnectionData: Deno.PointerValue | Uint8Array | null;
  /** u32 */
  dwSizeofUserData: number;
  /** ptr */
  pUserData: Deno.PointerValue | Uint8Array | null;
  /** u32 */
  dwSizeofUserDataOut: number;
  /** ptr */
  pUserDataOut: Deno.PointerValue | Uint8Array | null;
  /** Windows.Win32.Foundation.PWSTR */
  pwszIdentity: string | null;
  /** u32 */
  dwError: number;
}

export const sizeofLEGACY_IDENTITY_UI_PARAMS = 72;

export function allocLEGACY_IDENTITY_UI_PARAMS(data?: Partial<LEGACY_IDENTITY_UI_PARAMS>): Uint8Array {
  const buf = new Uint8Array(sizeofLEGACY_IDENTITY_UI_PARAMS);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.eapType !== undefined) view.setUint32(0, Number(data.eapType), true);
  // 0x04: u32
  if (data?.dwFlags !== undefined) view.setUint32(4, Number(data.dwFlags), true);
  // 0x08: u32
  if (data?.dwSizeofConnectionData !== undefined) view.setUint32(8, Number(data.dwSizeofConnectionData), true);
  // 0x0c: pad4
  // 0x10: pointer
  if (data?.pConnectionData !== undefined) view.setBigUint64(16, data.pConnectionData === null ? 0n : BigInt(util.toPointer(data.pConnectionData)), true);
  // 0x18: u32
  if (data?.dwSizeofUserData !== undefined) view.setUint32(24, Number(data.dwSizeofUserData), true);
  // 0x1c: pad4
  // 0x20: pointer
  if (data?.pUserData !== undefined) view.setBigUint64(32, data.pUserData === null ? 0n : BigInt(util.toPointer(data.pUserData)), true);
  // 0x28: u32
  if (data?.dwSizeofUserDataOut !== undefined) view.setUint32(40, Number(data.dwSizeofUserDataOut), true);
  // 0x2c: pad4
  // 0x30: pointer
  if (data?.pUserDataOut !== undefined) view.setBigUint64(48, data.pUserDataOut === null ? 0n : BigInt(util.toPointer(data.pUserDataOut)), true);
  // 0x38: buffer
  if (data?.pwszIdentity !== undefined) {
    (buf as any)._f56 = util.pwstrToFfi(data.pwszIdentity);
    view.setBigUint64(56, (buf as any)._f56 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f56)), true);
  }
  // 0x40: u32
  if (data?.dwError !== undefined) view.setUint32(64, Number(data.dwError), true);
  // 0x44: pad4
  return buf;
}

/**
 * Windows.Win32.Security.ExtensibleAuthenticationProtocol.LEGACY_INTERACTIVE_UI_PARAMS (size: 40)
 */
export interface LEGACY_INTERACTIVE_UI_PARAMS {
  /** u32 */
  eapType: number;
  /** u32 */
  dwSizeofContextData: number;
  /** ptr */
  pContextData: Deno.PointerValue | Uint8Array | null;
  /** u32 */
  dwSizeofInteractiveUIData: number;
  /** ptr */
  pInteractiveUIData: Deno.PointerValue | Uint8Array | null;
  /** u32 */
  dwError: number;
}

export const sizeofLEGACY_INTERACTIVE_UI_PARAMS = 40;

export function allocLEGACY_INTERACTIVE_UI_PARAMS(data?: Partial<LEGACY_INTERACTIVE_UI_PARAMS>): Uint8Array {
  const buf = new Uint8Array(sizeofLEGACY_INTERACTIVE_UI_PARAMS);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.eapType !== undefined) view.setUint32(0, Number(data.eapType), true);
  // 0x04: u32
  if (data?.dwSizeofContextData !== undefined) view.setUint32(4, Number(data.dwSizeofContextData), true);
  // 0x08: pointer
  if (data?.pContextData !== undefined) view.setBigUint64(8, data.pContextData === null ? 0n : BigInt(util.toPointer(data.pContextData)), true);
  // 0x10: u32
  if (data?.dwSizeofInteractiveUIData !== undefined) view.setUint32(16, Number(data.dwSizeofInteractiveUIData), true);
  // 0x14: pad4
  // 0x18: pointer
  if (data?.pInteractiveUIData !== undefined) view.setBigUint64(24, data.pInteractiveUIData === null ? 0n : BigInt(util.toPointer(data.pInteractiveUIData)), true);
  // 0x20: u32
  if (data?.dwError !== undefined) view.setUint32(32, Number(data.dwError), true);
  // 0x24: pad4
  return buf;
}

/**
 * Windows.Win32.Security.ExtensibleAuthenticationProtocol.EAP_TYPE (size: 16)
 */
export interface EAP_TYPE {
  /** u8 */
  type: number;
  /** u32 */
  dwVendorId: number;
  /** u32 */
  dwVendorType: number;
}

export const sizeofEAP_TYPE = 16;

export function allocEAP_TYPE(data?: Partial<EAP_TYPE>): Uint8Array {
  const buf = new Uint8Array(sizeofEAP_TYPE);
  const view = new DataView(buf.buffer);
  // 0x00: u8
  if (data?.type !== undefined) view.setUint8(0, Number(data.type));
  // 0x01: u32
  if (data?.dwVendorId !== undefined) view.setUint32(1, Number(data.dwVendorId), true);
  // 0x05: u32
  if (data?.dwVendorType !== undefined) view.setUint32(5, Number(data.dwVendorType), true);
  // 0x09: pad7
  return buf;
}

/**
 * Windows.Win32.Security.ExtensibleAuthenticationProtocol.EAP_METHOD_TYPE (size: 16)
 */
export interface EAP_METHOD_TYPE {
  /** Windows.Win32.Security.ExtensibleAuthenticationProtocol.EAP_TYPE */
  eapType: Uint8Array | Deno.PointerValue | null;
  /** u32 */
  dwAuthorId: number;
}

export const sizeofEAP_METHOD_TYPE = 16;

export function allocEAP_METHOD_TYPE(data?: Partial<EAP_METHOD_TYPE>): Uint8Array {
  const buf = new Uint8Array(sizeofEAP_METHOD_TYPE);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.eapType !== undefined) view.setBigUint64(0, data.eapType === null ? 0n : BigInt(util.toPointer(data.eapType)), true);
  // 0x08: u32
  if (data?.dwAuthorId !== undefined) view.setUint32(8, Number(data.dwAuthorId), true);
  // 0x0c: pad4
  return buf;
}

/**
 * Windows.Win32.Security.ExtensibleAuthenticationProtocol.EAP_METHOD_INFO (size: 40)
 */
export interface EAP_METHOD_INFO {
  /** Windows.Win32.Security.ExtensibleAuthenticationProtocol.EAP_METHOD_TYPE */
  eaptype: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Foundation.PWSTR */
  pwszAuthorName: string | null;
  /** Windows.Win32.Foundation.PWSTR */
  pwszFriendlyName: string | null;
  /** u32 */
  eapProperties: number;
  /** ptr */
  pInnerMethodInfo: Deno.PointerValue | Uint8Array | null;
}

export const sizeofEAP_METHOD_INFO = 40;

export function allocEAP_METHOD_INFO(data?: Partial<EAP_METHOD_INFO>): Uint8Array {
  const buf = new Uint8Array(sizeofEAP_METHOD_INFO);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.eaptype !== undefined) view.setBigUint64(0, data.eaptype === null ? 0n : BigInt(util.toPointer(data.eaptype)), true);
  // 0x08: buffer
  if (data?.pwszAuthorName !== undefined) {
    (buf as any)._f8 = util.pwstrToFfi(data.pwszAuthorName);
    view.setBigUint64(8, (buf as any)._f8 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f8)), true);
  }
  // 0x10: buffer
  if (data?.pwszFriendlyName !== undefined) {
    (buf as any)._f16 = util.pwstrToFfi(data.pwszFriendlyName);
    view.setBigUint64(16, (buf as any)._f16 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f16)), true);
  }
  // 0x18: u32
  if (data?.eapProperties !== undefined) view.setUint32(24, Number(data.eapProperties), true);
  // 0x1c: pad4
  // 0x20: pointer
  if (data?.pInnerMethodInfo !== undefined) view.setBigUint64(32, data.pInnerMethodInfo === null ? 0n : BigInt(util.toPointer(data.pInnerMethodInfo)), true);
  return buf;
}

/**
 * Windows.Win32.Security.ExtensibleAuthenticationProtocol.EAP_METHOD_INFO_EX (size: 40)
 */
export interface EAP_METHOD_INFO_EX {
  /** Windows.Win32.Security.ExtensibleAuthenticationProtocol.EAP_METHOD_TYPE */
  eaptype: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Foundation.PWSTR */
  pwszAuthorName: string | null;
  /** Windows.Win32.Foundation.PWSTR */
  pwszFriendlyName: string | null;
  /** u32 */
  eapProperties: number;
  /** ptr */
  pInnerMethodInfoArray: Deno.PointerValue | Uint8Array | null;
}

export const sizeofEAP_METHOD_INFO_EX = 40;

export function allocEAP_METHOD_INFO_EX(data?: Partial<EAP_METHOD_INFO_EX>): Uint8Array {
  const buf = new Uint8Array(sizeofEAP_METHOD_INFO_EX);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.eaptype !== undefined) view.setBigUint64(0, data.eaptype === null ? 0n : BigInt(util.toPointer(data.eaptype)), true);
  // 0x08: buffer
  if (data?.pwszAuthorName !== undefined) {
    (buf as any)._f8 = util.pwstrToFfi(data.pwszAuthorName);
    view.setBigUint64(8, (buf as any)._f8 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f8)), true);
  }
  // 0x10: buffer
  if (data?.pwszFriendlyName !== undefined) {
    (buf as any)._f16 = util.pwstrToFfi(data.pwszFriendlyName);
    view.setBigUint64(16, (buf as any)._f16 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f16)), true);
  }
  // 0x18: u32
  if (data?.eapProperties !== undefined) view.setUint32(24, Number(data.eapProperties), true);
  // 0x1c: pad4
  // 0x20: pointer
  if (data?.pInnerMethodInfoArray !== undefined) view.setBigUint64(32, data.pInnerMethodInfoArray === null ? 0n : BigInt(util.toPointer(data.pInnerMethodInfoArray)), true);
  return buf;
}

/**
 * Windows.Win32.Security.ExtensibleAuthenticationProtocol.EAP_METHOD_INFO_ARRAY (size: 16)
 */
export interface EAP_METHOD_INFO_ARRAY {
  /** u32 */
  dwNumberOfMethods: number;
  /** ptr */
  pEapMethods: Deno.PointerValue | Uint8Array | null;
}

export const sizeofEAP_METHOD_INFO_ARRAY = 16;

export function allocEAP_METHOD_INFO_ARRAY(data?: Partial<EAP_METHOD_INFO_ARRAY>): Uint8Array {
  const buf = new Uint8Array(sizeofEAP_METHOD_INFO_ARRAY);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.dwNumberOfMethods !== undefined) view.setUint32(0, Number(data.dwNumberOfMethods), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.pEapMethods !== undefined) view.setBigUint64(8, data.pEapMethods === null ? 0n : BigInt(util.toPointer(data.pEapMethods)), true);
  return buf;
}

/**
 * Windows.Win32.Security.ExtensibleAuthenticationProtocol.EAP_METHOD_INFO_ARRAY_EX (size: 16)
 */
export interface EAP_METHOD_INFO_ARRAY_EX {
  /** u32 */
  dwNumberOfMethods: number;
  /** ptr */
  pEapMethods: Deno.PointerValue | Uint8Array | null;
}

export const sizeofEAP_METHOD_INFO_ARRAY_EX = 16;

export function allocEAP_METHOD_INFO_ARRAY_EX(data?: Partial<EAP_METHOD_INFO_ARRAY_EX>): Uint8Array {
  const buf = new Uint8Array(sizeofEAP_METHOD_INFO_ARRAY_EX);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.dwNumberOfMethods !== undefined) view.setUint32(0, Number(data.dwNumberOfMethods), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.pEapMethods !== undefined) view.setBigUint64(8, data.pEapMethods === null ? 0n : BigInt(util.toPointer(data.pEapMethods)), true);
  return buf;
}

/**
 * Windows.Win32.Security.ExtensibleAuthenticationProtocol.EAP_ERROR (size: 64)
 */
export interface EAP_ERROR {
  /** u32 */
  dwWinError: number;
  /** Windows.Win32.Security.ExtensibleAuthenticationProtocol.EAP_METHOD_TYPE */
  type: Uint8Array | Deno.PointerValue | null;
  /** u32 */
  dwReasonCode: number;
  /** System.Guid */
  rootCauseGuid: Uint8Array | Deno.PointerValue | null;
  /** System.Guid */
  repairGuid: Uint8Array | Deno.PointerValue | null;
  /** System.Guid */
  helpLinkGuid: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Foundation.PWSTR */
  pRootCauseString: string | null;
  /** Windows.Win32.Foundation.PWSTR */
  pRepairString: string | null;
}

export const sizeofEAP_ERROR = 64;

export function allocEAP_ERROR(data?: Partial<EAP_ERROR>): Uint8Array {
  const buf = new Uint8Array(sizeofEAP_ERROR);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.dwWinError !== undefined) view.setUint32(0, Number(data.dwWinError), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.type !== undefined) view.setBigUint64(8, data.type === null ? 0n : BigInt(util.toPointer(data.type)), true);
  // 0x10: u32
  if (data?.dwReasonCode !== undefined) view.setUint32(16, Number(data.dwReasonCode), true);
  // 0x14: pad4
  // 0x18: pointer
  if (data?.rootCauseGuid !== undefined) view.setBigUint64(24, data.rootCauseGuid === null ? 0n : BigInt(util.toPointer(data.rootCauseGuid)), true);
  // 0x20: pointer
  if (data?.repairGuid !== undefined) view.setBigUint64(32, data.repairGuid === null ? 0n : BigInt(util.toPointer(data.repairGuid)), true);
  // 0x28: pointer
  if (data?.helpLinkGuid !== undefined) view.setBigUint64(40, data.helpLinkGuid === null ? 0n : BigInt(util.toPointer(data.helpLinkGuid)), true);
  // 0x30: buffer
  if (data?.pRootCauseString !== undefined) {
    (buf as any)._f48 = util.pwstrToFfi(data.pRootCauseString);
    view.setBigUint64(48, (buf as any)._f48 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f48)), true);
  }
  // 0x38: buffer
  if (data?.pRepairString !== undefined) {
    (buf as any)._f56 = util.pwstrToFfi(data.pRepairString);
    view.setBigUint64(56, (buf as any)._f56 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f56)), true);
  }
  return buf;
}

/**
 * Windows.Win32.Security.ExtensibleAuthenticationProtocol.EAP_ATTRIBUTE (size: 16)
 */
export interface EAP_ATTRIBUTE {
  /** Windows.Win32.Security.ExtensibleAuthenticationProtocol.EAP_ATTRIBUTE_TYPE */
  eaType: EAP_ATTRIBUTE_TYPE;
  /** u32 */
  dwLength: number;
  /** ptr */
  pValue: Deno.PointerValue | Uint8Array | null;
}

export const sizeofEAP_ATTRIBUTE = 16;

export function allocEAP_ATTRIBUTE(data?: Partial<EAP_ATTRIBUTE>): Uint8Array {
  const buf = new Uint8Array(sizeofEAP_ATTRIBUTE);
  const view = new DataView(buf.buffer);
  // 0x00: i32
  if (data?.eaType !== undefined) view.setInt32(0, Number(data.eaType), true);
  // 0x04: u32
  if (data?.dwLength !== undefined) view.setUint32(4, Number(data.dwLength), true);
  // 0x08: pointer
  if (data?.pValue !== undefined) view.setBigUint64(8, data.pValue === null ? 0n : BigInt(util.toPointer(data.pValue)), true);
  return buf;
}

/**
 * Windows.Win32.Security.ExtensibleAuthenticationProtocol.EAP_ATTRIBUTES (size: 16)
 */
export interface EAP_ATTRIBUTES {
  /** u32 */
  dwNumberOfAttributes: number;
  /** ptr */
  pAttribs: Deno.PointerValue | Uint8Array | null;
}

export const sizeofEAP_ATTRIBUTES = 16;

export function allocEAP_ATTRIBUTES(data?: Partial<EAP_ATTRIBUTES>): Uint8Array {
  const buf = new Uint8Array(sizeofEAP_ATTRIBUTES);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.dwNumberOfAttributes !== undefined) view.setUint32(0, Number(data.dwNumberOfAttributes), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.pAttribs !== undefined) view.setBigUint64(8, data.pAttribs === null ? 0n : BigInt(util.toPointer(data.pAttribs)), true);
  return buf;
}

/**
 * Windows.Win32.Security.ExtensibleAuthenticationProtocol.EAP_CONFIG_INPUT_FIELD_DATA (size: 40)
 */
export interface EAP_CONFIG_INPUT_FIELD_DATA {
  /** u32 */
  dwSize: number;
  /** Windows.Win32.Security.ExtensibleAuthenticationProtocol.EAP_CONFIG_INPUT_FIELD_TYPE */
  Type: EAP_CONFIG_INPUT_FIELD_TYPE;
  /** u32 */
  dwFlagProps: number;
  /** Windows.Win32.Foundation.PWSTR */
  pwszLabel: string | null;
  /** Windows.Win32.Foundation.PWSTR */
  pwszData: string | null;
  /** u32 */
  dwMinDataLength: number;
  /** u32 */
  dwMaxDataLength: number;
}

export const sizeofEAP_CONFIG_INPUT_FIELD_DATA = 40;

export function allocEAP_CONFIG_INPUT_FIELD_DATA(data?: Partial<EAP_CONFIG_INPUT_FIELD_DATA>): Uint8Array {
  const buf = new Uint8Array(sizeofEAP_CONFIG_INPUT_FIELD_DATA);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.dwSize !== undefined) view.setUint32(0, Number(data.dwSize), true);
  // 0x04: i32
  if (data?.Type !== undefined) view.setInt32(4, Number(data.Type), true);
  // 0x08: u32
  if (data?.dwFlagProps !== undefined) view.setUint32(8, Number(data.dwFlagProps), true);
  // 0x0c: pad4
  // 0x10: buffer
  if (data?.pwszLabel !== undefined) {
    (buf as any)._f16 = util.pwstrToFfi(data.pwszLabel);
    view.setBigUint64(16, (buf as any)._f16 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f16)), true);
  }
  // 0x18: buffer
  if (data?.pwszData !== undefined) {
    (buf as any)._f24 = util.pwstrToFfi(data.pwszData);
    view.setBigUint64(24, (buf as any)._f24 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f24)), true);
  }
  // 0x20: u32
  if (data?.dwMinDataLength !== undefined) view.setUint32(32, Number(data.dwMinDataLength), true);
  // 0x24: u32
  if (data?.dwMaxDataLength !== undefined) view.setUint32(36, Number(data.dwMaxDataLength), true);
  return buf;
}

/**
 * Windows.Win32.Security.ExtensibleAuthenticationProtocol.EAP_CONFIG_INPUT_FIELD_ARRAY (size: 16)
 */
export interface EAP_CONFIG_INPUT_FIELD_ARRAY {
  /** u32 */
  dwVersion: number;
  /** u32 */
  dwNumberOfFields: number;
  /** ptr */
  pFields: Deno.PointerValue | Uint8Array | null;
}

export const sizeofEAP_CONFIG_INPUT_FIELD_ARRAY = 16;

export function allocEAP_CONFIG_INPUT_FIELD_ARRAY(data?: Partial<EAP_CONFIG_INPUT_FIELD_ARRAY>): Uint8Array {
  const buf = new Uint8Array(sizeofEAP_CONFIG_INPUT_FIELD_ARRAY);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.dwVersion !== undefined) view.setUint32(0, Number(data.dwVersion), true);
  // 0x04: u32
  if (data?.dwNumberOfFields !== undefined) view.setUint32(4, Number(data.dwNumberOfFields), true);
  // 0x08: pointer
  if (data?.pFields !== undefined) view.setBigUint64(8, data.pFields === null ? 0n : BigInt(util.toPointer(data.pFields)), true);
  return buf;
}

/**
 * Windows.Win32.Security.ExtensibleAuthenticationProtocol.EAP_CRED_EXPIRY_REQ (size: 16)
 */
export interface EAP_CRED_EXPIRY_REQ {
  /** Windows.Win32.Security.ExtensibleAuthenticationProtocol.EAP_CONFIG_INPUT_FIELD_ARRAY */
  curCreds: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Security.ExtensibleAuthenticationProtocol.EAP_CONFIG_INPUT_FIELD_ARRAY */
  newCreds: Uint8Array | Deno.PointerValue | null;
}

export const sizeofEAP_CRED_EXPIRY_REQ = 16;

export function allocEAP_CRED_EXPIRY_REQ(data?: Partial<EAP_CRED_EXPIRY_REQ>): Uint8Array {
  const buf = new Uint8Array(sizeofEAP_CRED_EXPIRY_REQ);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.curCreds !== undefined) view.setBigUint64(0, data.curCreds === null ? 0n : BigInt(util.toPointer(data.curCreds)), true);
  // 0x08: pointer
  if (data?.newCreds !== undefined) view.setBigUint64(8, data.newCreds === null ? 0n : BigInt(util.toPointer(data.newCreds)), true);
  return buf;
}

/**
 * Windows.Win32.Security.ExtensibleAuthenticationProtocol.EAP_UI_DATA_FORMAT (size: 24)
 */
export interface EAP_UI_DATA_FORMAT {
  /** ptr */
  credData: Deno.PointerValue | Uint8Array | null;
  /** ptr */
  credExpiryData: Deno.PointerValue | Uint8Array | null;
  /** ptr */
  credLogonData: Deno.PointerValue | Uint8Array | null;
}

export const sizeofEAP_UI_DATA_FORMAT = 24;

export function allocEAP_UI_DATA_FORMAT(data?: Partial<EAP_UI_DATA_FORMAT>): Uint8Array {
  const buf = new Uint8Array(sizeofEAP_UI_DATA_FORMAT);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.credData !== undefined) view.setBigUint64(0, data.credData === null ? 0n : BigInt(util.toPointer(data.credData)), true);
  // 0x08: pointer
  if (data?.credExpiryData !== undefined) view.setBigUint64(8, data.credExpiryData === null ? 0n : BigInt(util.toPointer(data.credExpiryData)), true);
  // 0x10: pointer
  if (data?.credLogonData !== undefined) view.setBigUint64(16, data.credLogonData === null ? 0n : BigInt(util.toPointer(data.credLogonData)), true);
  return buf;
}

/**
 * Windows.Win32.Security.ExtensibleAuthenticationProtocol.EAP_INTERACTIVE_UI_DATA (size: 24)
 */
export interface EAP_INTERACTIVE_UI_DATA {
  /** u32 */
  dwVersion: number;
  /** u32 */
  dwSize: number;
  /** Windows.Win32.Security.ExtensibleAuthenticationProtocol.EAP_INTERACTIVE_UI_DATA_TYPE */
  dwDataType: EAP_INTERACTIVE_UI_DATA_TYPE;
  /** u32 */
  cbUiData: number;
  /** Windows.Win32.Security.ExtensibleAuthenticationProtocol.EAP_UI_DATA_FORMAT */
  pbUiData: Uint8Array | Deno.PointerValue | null;
}

export const sizeofEAP_INTERACTIVE_UI_DATA = 24;

export function allocEAP_INTERACTIVE_UI_DATA(data?: Partial<EAP_INTERACTIVE_UI_DATA>): Uint8Array {
  const buf = new Uint8Array(sizeofEAP_INTERACTIVE_UI_DATA);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.dwVersion !== undefined) view.setUint32(0, Number(data.dwVersion), true);
  // 0x04: u32
  if (data?.dwSize !== undefined) view.setUint32(4, Number(data.dwSize), true);
  // 0x08: i32
  if (data?.dwDataType !== undefined) view.setInt32(8, Number(data.dwDataType), true);
  // 0x0c: u32
  if (data?.cbUiData !== undefined) view.setUint32(12, Number(data.cbUiData), true);
  // 0x10: pointer
  if (data?.pbUiData !== undefined) view.setBigUint64(16, data.pbUiData === null ? 0n : BigInt(util.toPointer(data.pbUiData)), true);
  return buf;
}

/**
 * Windows.Win32.Security.ExtensibleAuthenticationProtocol.EAP_METHOD_PROPERTY_VALUE_BOOL (size: 8)
 */
export interface EAP_METHOD_PROPERTY_VALUE_BOOL {
  /** u32 */
  length: number;
  /** Windows.Win32.Foundation.BOOL */
  value: boolean;
}

export const sizeofEAP_METHOD_PROPERTY_VALUE_BOOL = 8;

export function allocEAP_METHOD_PROPERTY_VALUE_BOOL(data?: Partial<EAP_METHOD_PROPERTY_VALUE_BOOL>): Uint8Array {
  const buf = new Uint8Array(sizeofEAP_METHOD_PROPERTY_VALUE_BOOL);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.length !== undefined) view.setUint32(0, Number(data.length), true);
  // 0x04: i32
  if (data?.value !== undefined) view.setInt32(4, Number(data.value), true);
  return buf;
}

/**
 * Windows.Win32.Security.ExtensibleAuthenticationProtocol.EAP_METHOD_PROPERTY_VALUE_DWORD (size: 8)
 */
export interface EAP_METHOD_PROPERTY_VALUE_DWORD {
  /** u32 */
  length: number;
  /** u32 */
  value: number;
}

export const sizeofEAP_METHOD_PROPERTY_VALUE_DWORD = 8;

export function allocEAP_METHOD_PROPERTY_VALUE_DWORD(data?: Partial<EAP_METHOD_PROPERTY_VALUE_DWORD>): Uint8Array {
  const buf = new Uint8Array(sizeofEAP_METHOD_PROPERTY_VALUE_DWORD);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.length !== undefined) view.setUint32(0, Number(data.length), true);
  // 0x04: u32
  if (data?.value !== undefined) view.setUint32(4, Number(data.value), true);
  return buf;
}

/**
 * Windows.Win32.Security.ExtensibleAuthenticationProtocol.EAP_METHOD_PROPERTY_VALUE_STRING (size: 16)
 */
export interface EAP_METHOD_PROPERTY_VALUE_STRING {
  /** u32 */
  length: number;
  /** ptr */
  value: Deno.PointerValue | Uint8Array | null;
}

export const sizeofEAP_METHOD_PROPERTY_VALUE_STRING = 16;

export function allocEAP_METHOD_PROPERTY_VALUE_STRING(data?: Partial<EAP_METHOD_PROPERTY_VALUE_STRING>): Uint8Array {
  const buf = new Uint8Array(sizeofEAP_METHOD_PROPERTY_VALUE_STRING);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.length !== undefined) view.setUint32(0, Number(data.length), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.value !== undefined) view.setBigUint64(8, data.value === null ? 0n : BigInt(util.toPointer(data.value)), true);
  return buf;
}

/**
 * Windows.Win32.Security.ExtensibleAuthenticationProtocol.EAP_METHOD_PROPERTY_VALUE (size: 24)
 */
export interface EAP_METHOD_PROPERTY_VALUE {
  /** Windows.Win32.Security.ExtensibleAuthenticationProtocol.EAP_METHOD_PROPERTY_VALUE_BOOL */
  empvBool: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Security.ExtensibleAuthenticationProtocol.EAP_METHOD_PROPERTY_VALUE_DWORD */
  empvDword: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Security.ExtensibleAuthenticationProtocol.EAP_METHOD_PROPERTY_VALUE_STRING */
  empvString: Uint8Array | Deno.PointerValue | null;
}

export const sizeofEAP_METHOD_PROPERTY_VALUE = 24;

export function allocEAP_METHOD_PROPERTY_VALUE(data?: Partial<EAP_METHOD_PROPERTY_VALUE>): Uint8Array {
  const buf = new Uint8Array(sizeofEAP_METHOD_PROPERTY_VALUE);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.empvBool !== undefined) view.setBigUint64(0, data.empvBool === null ? 0n : BigInt(util.toPointer(data.empvBool)), true);
  // 0x08: pointer
  if (data?.empvDword !== undefined) view.setBigUint64(8, data.empvDword === null ? 0n : BigInt(util.toPointer(data.empvDword)), true);
  // 0x10: pointer
  if (data?.empvString !== undefined) view.setBigUint64(16, data.empvString === null ? 0n : BigInt(util.toPointer(data.empvString)), true);
  return buf;
}

/**
 * Windows.Win32.Security.ExtensibleAuthenticationProtocol.EAP_METHOD_PROPERTY (size: 16)
 */
export interface EAP_METHOD_PROPERTY {
  /** Windows.Win32.Security.ExtensibleAuthenticationProtocol.EAP_METHOD_PROPERTY_TYPE */
  eapMethodPropertyType: EAP_METHOD_PROPERTY_TYPE;
  /** Windows.Win32.Security.ExtensibleAuthenticationProtocol.EAP_METHOD_PROPERTY_VALUE_TYPE */
  eapMethodPropertyValueType: EAP_METHOD_PROPERTY_VALUE_TYPE;
  /** Windows.Win32.Security.ExtensibleAuthenticationProtocol.EAP_METHOD_PROPERTY_VALUE */
  eapMethodPropertyValue: Uint8Array | Deno.PointerValue | null;
}

export const sizeofEAP_METHOD_PROPERTY = 16;

export function allocEAP_METHOD_PROPERTY(data?: Partial<EAP_METHOD_PROPERTY>): Uint8Array {
  const buf = new Uint8Array(sizeofEAP_METHOD_PROPERTY);
  const view = new DataView(buf.buffer);
  // 0x00: i32
  if (data?.eapMethodPropertyType !== undefined) view.setInt32(0, Number(data.eapMethodPropertyType), true);
  // 0x04: i32
  if (data?.eapMethodPropertyValueType !== undefined) view.setInt32(4, Number(data.eapMethodPropertyValueType), true);
  // 0x08: pointer
  if (data?.eapMethodPropertyValue !== undefined) view.setBigUint64(8, data.eapMethodPropertyValue === null ? 0n : BigInt(util.toPointer(data.eapMethodPropertyValue)), true);
  return buf;
}

/**
 * Windows.Win32.Security.ExtensibleAuthenticationProtocol.EAP_METHOD_PROPERTY_ARRAY (size: 16)
 */
export interface EAP_METHOD_PROPERTY_ARRAY {
  /** u32 */
  dwNumberOfProperties: number;
  /** ptr */
  pMethodProperty: Deno.PointerValue | Uint8Array | null;
}

export const sizeofEAP_METHOD_PROPERTY_ARRAY = 16;

export function allocEAP_METHOD_PROPERTY_ARRAY(data?: Partial<EAP_METHOD_PROPERTY_ARRAY>): Uint8Array {
  const buf = new Uint8Array(sizeofEAP_METHOD_PROPERTY_ARRAY);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.dwNumberOfProperties !== undefined) view.setUint32(0, Number(data.dwNumberOfProperties), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.pMethodProperty !== undefined) view.setBigUint64(8, data.pMethodProperty === null ? 0n : BigInt(util.toPointer(data.pMethodProperty)), true);
  return buf;
}

/**
 * Windows.Win32.Security.ExtensibleAuthenticationProtocol.EAPHOST_IDENTITY_UI_PARAMS (size: 80)
 */
export interface EAPHOST_IDENTITY_UI_PARAMS {
  /** Windows.Win32.Security.ExtensibleAuthenticationProtocol.EAP_METHOD_TYPE */
  eapMethodType: Uint8Array | Deno.PointerValue | null;
  /** u32 */
  dwFlags: number;
  /** u32 */
  dwSizeofConnectionData: number;
  /** ptr */
  pConnectionData: Deno.PointerValue | Uint8Array | null;
  /** u32 */
  dwSizeofUserData: number;
  /** ptr */
  pUserData: Deno.PointerValue | Uint8Array | null;
  /** u32 */
  dwSizeofUserDataOut: number;
  /** ptr */
  pUserDataOut: Deno.PointerValue | Uint8Array | null;
  /** Windows.Win32.Foundation.PWSTR */
  pwszIdentity: string | null;
  /** u32 */
  dwError: number;
  /** ptr */
  pEapError: Deno.PointerValue | Uint8Array | null;
}

export const sizeofEAPHOST_IDENTITY_UI_PARAMS = 80;

export function allocEAPHOST_IDENTITY_UI_PARAMS(data?: Partial<EAPHOST_IDENTITY_UI_PARAMS>): Uint8Array {
  const buf = new Uint8Array(sizeofEAPHOST_IDENTITY_UI_PARAMS);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.eapMethodType !== undefined) view.setBigUint64(0, data.eapMethodType === null ? 0n : BigInt(util.toPointer(data.eapMethodType)), true);
  // 0x08: u32
  if (data?.dwFlags !== undefined) view.setUint32(8, Number(data.dwFlags), true);
  // 0x0c: u32
  if (data?.dwSizeofConnectionData !== undefined) view.setUint32(12, Number(data.dwSizeofConnectionData), true);
  // 0x10: pointer
  if (data?.pConnectionData !== undefined) view.setBigUint64(16, data.pConnectionData === null ? 0n : BigInt(util.toPointer(data.pConnectionData)), true);
  // 0x18: u32
  if (data?.dwSizeofUserData !== undefined) view.setUint32(24, Number(data.dwSizeofUserData), true);
  // 0x1c: pad4
  // 0x20: pointer
  if (data?.pUserData !== undefined) view.setBigUint64(32, data.pUserData === null ? 0n : BigInt(util.toPointer(data.pUserData)), true);
  // 0x28: u32
  if (data?.dwSizeofUserDataOut !== undefined) view.setUint32(40, Number(data.dwSizeofUserDataOut), true);
  // 0x2c: pad4
  // 0x30: pointer
  if (data?.pUserDataOut !== undefined) view.setBigUint64(48, data.pUserDataOut === null ? 0n : BigInt(util.toPointer(data.pUserDataOut)), true);
  // 0x38: buffer
  if (data?.pwszIdentity !== undefined) {
    (buf as any)._f56 = util.pwstrToFfi(data.pwszIdentity);
    view.setBigUint64(56, (buf as any)._f56 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f56)), true);
  }
  // 0x40: u32
  if (data?.dwError !== undefined) view.setUint32(64, Number(data.dwError), true);
  // 0x44: pad4
  // 0x48: pointer
  if (data?.pEapError !== undefined) view.setBigUint64(72, data.pEapError === null ? 0n : BigInt(util.toPointer(data.pEapError)), true);
  return buf;
}

/**
 * Windows.Win32.Security.ExtensibleAuthenticationProtocol.EAPHOST_INTERACTIVE_UI_PARAMS (size: 48)
 */
export interface EAPHOST_INTERACTIVE_UI_PARAMS {
  /** u32 */
  dwSizeofContextData: number;
  /** ptr */
  pContextData: Deno.PointerValue | Uint8Array | null;
  /** u32 */
  dwSizeofInteractiveUIData: number;
  /** ptr */
  pInteractiveUIData: Deno.PointerValue | Uint8Array | null;
  /** u32 */
  dwError: number;
  /** ptr */
  pEapError: Deno.PointerValue | Uint8Array | null;
}

export const sizeofEAPHOST_INTERACTIVE_UI_PARAMS = 48;

export function allocEAPHOST_INTERACTIVE_UI_PARAMS(data?: Partial<EAPHOST_INTERACTIVE_UI_PARAMS>): Uint8Array {
  const buf = new Uint8Array(sizeofEAPHOST_INTERACTIVE_UI_PARAMS);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.dwSizeofContextData !== undefined) view.setUint32(0, Number(data.dwSizeofContextData), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.pContextData !== undefined) view.setBigUint64(8, data.pContextData === null ? 0n : BigInt(util.toPointer(data.pContextData)), true);
  // 0x10: u32
  if (data?.dwSizeofInteractiveUIData !== undefined) view.setUint32(16, Number(data.dwSizeofInteractiveUIData), true);
  // 0x14: pad4
  // 0x18: pointer
  if (data?.pInteractiveUIData !== undefined) view.setBigUint64(24, data.pInteractiveUIData === null ? 0n : BigInt(util.toPointer(data.pInteractiveUIData)), true);
  // 0x20: u32
  if (data?.dwError !== undefined) view.setUint32(32, Number(data.dwError), true);
  // 0x24: pad4
  // 0x28: pointer
  if (data?.pEapError !== undefined) view.setBigUint64(40, data.pEapError === null ? 0n : BigInt(util.toPointer(data.pEapError)), true);
  return buf;
}

/**
 * Windows.Win32.Security.ExtensibleAuthenticationProtocol.EapUsernamePasswordCredential (size: 16)
 */
export interface EapUsernamePasswordCredential {
  /** Windows.Win32.Foundation.PWSTR */
  username: string | null;
  /** Windows.Win32.Foundation.PWSTR */
  password: string | null;
}

export const sizeofEapUsernamePasswordCredential = 16;

export function allocEapUsernamePasswordCredential(data?: Partial<EapUsernamePasswordCredential>): Uint8Array {
  const buf = new Uint8Array(sizeofEapUsernamePasswordCredential);
  const view = new DataView(buf.buffer);
  // 0x00: buffer
  if (data?.username !== undefined) {
    (buf as any)._f0 = util.pwstrToFfi(data.username);
    view.setBigUint64(0, (buf as any)._f0 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f0)), true);
  }
  // 0x08: buffer
  if (data?.password !== undefined) {
    (buf as any)._f8 = util.pwstrToFfi(data.password);
    view.setBigUint64(8, (buf as any)._f8 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f8)), true);
  }
  return buf;
}

/**
 * Windows.Win32.Security.ExtensibleAuthenticationProtocol.EapCertificateCredential (size: 16)
 */
export interface EapCertificateCredential {
  /** array */
  certHash: Deno.PointerValue | null;
  /** Windows.Win32.Foundation.PWSTR */
  password: string | null;
}

export const sizeofEapCertificateCredential = 16;

export function allocEapCertificateCredential(data?: Partial<EapCertificateCredential>): Uint8Array {
  const buf = new Uint8Array(sizeofEapCertificateCredential);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.certHash !== undefined) view.setBigUint64(0, data.certHash === null ? 0n : BigInt(util.toPointer(data.certHash)), true);
  // 0x08: buffer
  if (data?.password !== undefined) {
    (buf as any)._f8 = util.pwstrToFfi(data.password);
    view.setBigUint64(8, (buf as any)._f8 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f8)), true);
  }
  return buf;
}

/**
 * Windows.Win32.Security.ExtensibleAuthenticationProtocol.EapSimCredential (size: 8)
 */
export interface EapSimCredential {
  /** Windows.Win32.Foundation.PWSTR */
  iccID: string | null;
}

export const sizeofEapSimCredential = 8;

export function allocEapSimCredential(data?: Partial<EapSimCredential>): Uint8Array {
  const buf = new Uint8Array(sizeofEapSimCredential);
  const view = new DataView(buf.buffer);
  // 0x00: buffer
  if (data?.iccID !== undefined) {
    (buf as any)._f0 = util.pwstrToFfi(data.iccID);
    view.setBigUint64(0, (buf as any)._f0 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f0)), true);
  }
  return buf;
}

/**
 * Windows.Win32.Security.ExtensibleAuthenticationProtocol.EapCredentialTypeData (size: 24)
 */
export interface EapCredentialTypeData {
  /** Windows.Win32.Security.ExtensibleAuthenticationProtocol.EapUsernamePasswordCredential */
  username_password: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Security.ExtensibleAuthenticationProtocol.EapCertificateCredential */
  certificate: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Security.ExtensibleAuthenticationProtocol.EapSimCredential */
  sim: Uint8Array | Deno.PointerValue | null;
}

export const sizeofEapCredentialTypeData = 24;

export function allocEapCredentialTypeData(data?: Partial<EapCredentialTypeData>): Uint8Array {
  const buf = new Uint8Array(sizeofEapCredentialTypeData);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.username_password !== undefined) view.setBigUint64(0, data.username_password === null ? 0n : BigInt(util.toPointer(data.username_password)), true);
  // 0x08: pointer
  if (data?.certificate !== undefined) view.setBigUint64(8, data.certificate === null ? 0n : BigInt(util.toPointer(data.certificate)), true);
  // 0x10: pointer
  if (data?.sim !== undefined) view.setBigUint64(16, data.sim === null ? 0n : BigInt(util.toPointer(data.sim)), true);
  return buf;
}

/**
 * Windows.Win32.Security.ExtensibleAuthenticationProtocol.EapCredential (size: 16)
 */
export interface EapCredential {
  /** Windows.Win32.Security.ExtensibleAuthenticationProtocol.EapCredentialType */
  credType: EapCredentialType;
  /** Windows.Win32.Security.ExtensibleAuthenticationProtocol.EapCredentialTypeData */
  credData: Uint8Array | Deno.PointerValue | null;
}

export const sizeofEapCredential = 16;

export function allocEapCredential(data?: Partial<EapCredential>): Uint8Array {
  const buf = new Uint8Array(sizeofEapCredential);
  const view = new DataView(buf.buffer);
  // 0x00: i32
  if (data?.credType !== undefined) view.setInt32(0, Number(data.credType), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.credData !== undefined) view.setBigUint64(8, data.credData === null ? 0n : BigInt(util.toPointer(data.credData)), true);
  return buf;
}

/**
 * Windows.Win32.Security.ExtensibleAuthenticationProtocol.EAPHOST_AUTH_INFO (size: 16)
 */
export interface EAPHOST_AUTH_INFO {
  /** Windows.Win32.Security.ExtensibleAuthenticationProtocol.EAPHOST_AUTH_STATUS */
  status: EAPHOST_AUTH_STATUS;
  /** u32 */
  dwErrorCode: number;
  /** u32 */
  dwReasonCode: number;
}

export const sizeofEAPHOST_AUTH_INFO = 16;

export function allocEAPHOST_AUTH_INFO(data?: Partial<EAPHOST_AUTH_INFO>): Uint8Array {
  const buf = new Uint8Array(sizeofEAPHOST_AUTH_INFO);
  const view = new DataView(buf.buffer);
  // 0x00: i32
  if (data?.status !== undefined) view.setInt32(0, Number(data.status), true);
  // 0x04: u32
  if (data?.dwErrorCode !== undefined) view.setUint32(4, Number(data.dwErrorCode), true);
  // 0x08: u32
  if (data?.dwReasonCode !== undefined) view.setUint32(8, Number(data.dwReasonCode), true);
  // 0x0c: pad4
  return buf;
}

/**
 * Windows.Win32.Security.ExtensibleAuthenticationProtocol.EapHostPeerMethodResult (size: 72)
 */
export interface EapHostPeerMethodResult {
  /** Windows.Win32.Foundation.BOOL */
  fIsSuccess: boolean;
  /** u32 */
  dwFailureReasonCode: number;
  /** Windows.Win32.Foundation.BOOL */
  fSaveConnectionData: boolean;
  /** u32 */
  dwSizeofConnectionData: number;
  /** ptr */
  pConnectionData: Deno.PointerValue | Uint8Array | null;
  /** Windows.Win32.Foundation.BOOL */
  fSaveUserData: boolean;
  /** u32 */
  dwSizeofUserData: number;
  /** ptr */
  pUserData: Deno.PointerValue | Uint8Array | null;
  /** ptr */
  pAttribArray: Deno.PointerValue | Uint8Array | null;
  /** Windows.Win32.Security.ExtensibleAuthenticationProtocol.ISOLATION_STATE */
  isolationState: ISOLATION_STATE;
  /** ptr */
  pEapMethodInfo: Deno.PointerValue | Uint8Array | null;
  /** ptr */
  pEapError: Deno.PointerValue | Uint8Array | null;
}

export const sizeofEapHostPeerMethodResult = 72;

export function allocEapHostPeerMethodResult(data?: Partial<EapHostPeerMethodResult>): Uint8Array {
  const buf = new Uint8Array(sizeofEapHostPeerMethodResult);
  const view = new DataView(buf.buffer);
  // 0x00: i32
  if (data?.fIsSuccess !== undefined) view.setInt32(0, Number(data.fIsSuccess), true);
  // 0x04: u32
  if (data?.dwFailureReasonCode !== undefined) view.setUint32(4, Number(data.dwFailureReasonCode), true);
  // 0x08: i32
  if (data?.fSaveConnectionData !== undefined) view.setInt32(8, Number(data.fSaveConnectionData), true);
  // 0x0c: u32
  if (data?.dwSizeofConnectionData !== undefined) view.setUint32(12, Number(data.dwSizeofConnectionData), true);
  // 0x10: pointer
  if (data?.pConnectionData !== undefined) view.setBigUint64(16, data.pConnectionData === null ? 0n : BigInt(util.toPointer(data.pConnectionData)), true);
  // 0x18: i32
  if (data?.fSaveUserData !== undefined) view.setInt32(24, Number(data.fSaveUserData), true);
  // 0x1c: u32
  if (data?.dwSizeofUserData !== undefined) view.setUint32(28, Number(data.dwSizeofUserData), true);
  // 0x20: pointer
  if (data?.pUserData !== undefined) view.setBigUint64(32, data.pUserData === null ? 0n : BigInt(util.toPointer(data.pUserData)), true);
  // 0x28: pointer
  if (data?.pAttribArray !== undefined) view.setBigUint64(40, data.pAttribArray === null ? 0n : BigInt(util.toPointer(data.pAttribArray)), true);
  // 0x30: i32
  if (data?.isolationState !== undefined) view.setInt32(48, Number(data.isolationState), true);
  // 0x34: pad4
  // 0x38: pointer
  if (data?.pEapMethodInfo !== undefined) view.setBigUint64(56, data.pEapMethodInfo === null ? 0n : BigInt(util.toPointer(data.pEapMethodInfo)), true);
  // 0x40: pointer
  if (data?.pEapError !== undefined) view.setBigUint64(64, data.pEapError === null ? 0n : BigInt(util.toPointer(data.pEapError)), true);
  return buf;
}

/**
 * Windows.Win32.Security.ExtensibleAuthenticationProtocol.EapPacket (size: 24)
 */
export interface EapPacket {
  /** u8 */
  Code: number;
  /** u8 */
  Id: number;
  /** array */
  Length: Deno.PointerValue | null;
  /** array */
  Data: Deno.PointerValue | null;
}

export const sizeofEapPacket = 24;

export function allocEapPacket(data?: Partial<EapPacket>): Uint8Array {
  const buf = new Uint8Array(sizeofEapPacket);
  const view = new DataView(buf.buffer);
  // 0x00: u8
  if (data?.Code !== undefined) view.setUint8(0, Number(data.Code));
  // 0x01: u8
  if (data?.Id !== undefined) view.setUint8(1, Number(data.Id));
  // 0x02: pad6
  // 0x08: pointer
  if (data?.Length !== undefined) view.setBigUint64(8, data.Length === null ? 0n : BigInt(util.toPointer(data.Length)), true);
  // 0x10: pointer
  if (data?.Data !== undefined) view.setBigUint64(16, data.Data === null ? 0n : BigInt(util.toPointer(data.Data)), true);
  return buf;
}

/**
 * Windows.Win32.Security.ExtensibleAuthenticationProtocol.EAP_METHOD_AUTHENTICATOR_RESULT (size: 16)
 */
export interface EAP_METHOD_AUTHENTICATOR_RESULT {
  /** Windows.Win32.Foundation.BOOL */
  fIsSuccess: boolean;
  /** u32 */
  dwFailureReason: number;
  /** ptr */
  pAuthAttribs: Deno.PointerValue | Uint8Array | null;
}

export const sizeofEAP_METHOD_AUTHENTICATOR_RESULT = 16;

export function allocEAP_METHOD_AUTHENTICATOR_RESULT(data?: Partial<EAP_METHOD_AUTHENTICATOR_RESULT>): Uint8Array {
  const buf = new Uint8Array(sizeofEAP_METHOD_AUTHENTICATOR_RESULT);
  const view = new DataView(buf.buffer);
  // 0x00: i32
  if (data?.fIsSuccess !== undefined) view.setInt32(0, Number(data.fIsSuccess), true);
  // 0x04: u32
  if (data?.dwFailureReason !== undefined) view.setUint32(4, Number(data.dwFailureReason), true);
  // 0x08: pointer
  if (data?.pAuthAttribs !== undefined) view.setBigUint64(8, data.pAuthAttribs === null ? 0n : BigInt(util.toPointer(data.pAuthAttribs)), true);
  return buf;
}

/**
 * Windows.Win32.Security.ExtensibleAuthenticationProtocol.EapPeerMethodOutput (size: 8)
 */
export interface EapPeerMethodOutput {
  /** Windows.Win32.Security.ExtensibleAuthenticationProtocol.EapPeerMethodResponseAction */
  action: EapPeerMethodResponseAction;
  /** Windows.Win32.Foundation.BOOL */
  fAllowNotifications: boolean;
}

export const sizeofEapPeerMethodOutput = 8;

export function allocEapPeerMethodOutput(data?: Partial<EapPeerMethodOutput>): Uint8Array {
  const buf = new Uint8Array(sizeofEapPeerMethodOutput);
  const view = new DataView(buf.buffer);
  // 0x00: i32
  if (data?.action !== undefined) view.setInt32(0, Number(data.action), true);
  // 0x04: i32
  if (data?.fAllowNotifications !== undefined) view.setInt32(4, Number(data.fAllowNotifications), true);
  return buf;
}

/**
 * Windows.Win32.Security.ExtensibleAuthenticationProtocol.EapPeerMethodResult (size: 72)
 */
export interface EapPeerMethodResult {
  /** Windows.Win32.Foundation.BOOL */
  fIsSuccess: boolean;
  /** u32 */
  dwFailureReasonCode: number;
  /** Windows.Win32.Foundation.BOOL */
  fSaveConnectionData: boolean;
  /** u32 */
  dwSizeofConnectionData: number;
  /** ptr */
  pConnectionData: Deno.PointerValue | Uint8Array | null;
  /** Windows.Win32.Foundation.BOOL */
  fSaveUserData: boolean;
  /** u32 */
  dwSizeofUserData: number;
  /** ptr */
  pUserData: Deno.PointerValue | Uint8Array | null;
  /** ptr */
  pAttribArray: Deno.PointerValue | Uint8Array | null;
  /** ptr */
  pEapError: Deno.PointerValue | Uint8Array | null;
  /** ptr */
  pNgcKerbTicket: Deno.PointerValue | Uint8Array | null;
  /** Windows.Win32.Foundation.BOOL */
  fSaveToCredMan: boolean;
}

export const sizeofEapPeerMethodResult = 72;

export function allocEapPeerMethodResult(data?: Partial<EapPeerMethodResult>): Uint8Array {
  const buf = new Uint8Array(sizeofEapPeerMethodResult);
  const view = new DataView(buf.buffer);
  // 0x00: i32
  if (data?.fIsSuccess !== undefined) view.setInt32(0, Number(data.fIsSuccess), true);
  // 0x04: u32
  if (data?.dwFailureReasonCode !== undefined) view.setUint32(4, Number(data.dwFailureReasonCode), true);
  // 0x08: i32
  if (data?.fSaveConnectionData !== undefined) view.setInt32(8, Number(data.fSaveConnectionData), true);
  // 0x0c: u32
  if (data?.dwSizeofConnectionData !== undefined) view.setUint32(12, Number(data.dwSizeofConnectionData), true);
  // 0x10: pointer
  if (data?.pConnectionData !== undefined) view.setBigUint64(16, data.pConnectionData === null ? 0n : BigInt(util.toPointer(data.pConnectionData)), true);
  // 0x18: i32
  if (data?.fSaveUserData !== undefined) view.setInt32(24, Number(data.fSaveUserData), true);
  // 0x1c: u32
  if (data?.dwSizeofUserData !== undefined) view.setUint32(28, Number(data.dwSizeofUserData), true);
  // 0x20: pointer
  if (data?.pUserData !== undefined) view.setBigUint64(32, data.pUserData === null ? 0n : BigInt(util.toPointer(data.pUserData)), true);
  // 0x28: pointer
  if (data?.pAttribArray !== undefined) view.setBigUint64(40, data.pAttribArray === null ? 0n : BigInt(util.toPointer(data.pAttribArray)), true);
  // 0x30: pointer
  if (data?.pEapError !== undefined) view.setBigUint64(48, data.pEapError === null ? 0n : BigInt(util.toPointer(data.pEapError)), true);
  // 0x38: pointer
  if (data?.pNgcKerbTicket !== undefined) view.setBigUint64(56, data.pNgcKerbTicket === null ? 0n : BigInt(util.toPointer(data.pNgcKerbTicket)), true);
  // 0x40: i32
  if (data?.fSaveToCredMan !== undefined) view.setInt32(64, Number(data.fSaveToCredMan), true);
  // 0x44: pad4
  return buf;
}

/**
 * Windows.Win32.Security.ExtensibleAuthenticationProtocol.EAP_PEER_METHOD_ROUTINES (size: 120)
 */
export interface EAP_PEER_METHOD_ROUTINES {
  /** u32 */
  dwVersion: number;
  /** ptr */
  pEapType: Deno.PointerValue | Uint8Array | null;
  /** isize */
  EapPeerInitialize: Deno.PointerValue;
  /** isize */
  EapPeerGetIdentity: Deno.PointerValue;
  /** isize */
  EapPeerBeginSession: Deno.PointerValue;
  /** isize */
  EapPeerSetCredentials: Deno.PointerValue;
  /** isize */
  EapPeerProcessRequestPacket: Deno.PointerValue;
  /** isize */
  EapPeerGetResponsePacket: Deno.PointerValue;
  /** isize */
  EapPeerGetResult: Deno.PointerValue;
  /** isize */
  EapPeerGetUIContext: Deno.PointerValue;
  /** isize */
  EapPeerSetUIContext: Deno.PointerValue;
  /** isize */
  EapPeerGetResponseAttributes: Deno.PointerValue;
  /** isize */
  EapPeerSetResponseAttributes: Deno.PointerValue;
  /** isize */
  EapPeerEndSession: Deno.PointerValue;
  /** isize */
  EapPeerShutdown: Deno.PointerValue;
}

export const sizeofEAP_PEER_METHOD_ROUTINES = 120;

export function allocEAP_PEER_METHOD_ROUTINES(data?: Partial<EAP_PEER_METHOD_ROUTINES>): Uint8Array {
  const buf = new Uint8Array(sizeofEAP_PEER_METHOD_ROUTINES);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.dwVersion !== undefined) view.setUint32(0, Number(data.dwVersion), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.pEapType !== undefined) view.setBigUint64(8, data.pEapType === null ? 0n : BigInt(util.toPointer(data.pEapType)), true);
  // 0x10: isize
  if (data?.EapPeerInitialize !== undefined) view.setBigInt64(16, BigInt(data.EapPeerInitialize), true);
  // 0x18: isize
  if (data?.EapPeerGetIdentity !== undefined) view.setBigInt64(24, BigInt(data.EapPeerGetIdentity), true);
  // 0x20: isize
  if (data?.EapPeerBeginSession !== undefined) view.setBigInt64(32, BigInt(data.EapPeerBeginSession), true);
  // 0x28: isize
  if (data?.EapPeerSetCredentials !== undefined) view.setBigInt64(40, BigInt(data.EapPeerSetCredentials), true);
  // 0x30: isize
  if (data?.EapPeerProcessRequestPacket !== undefined) view.setBigInt64(48, BigInt(data.EapPeerProcessRequestPacket), true);
  // 0x38: isize
  if (data?.EapPeerGetResponsePacket !== undefined) view.setBigInt64(56, BigInt(data.EapPeerGetResponsePacket), true);
  // 0x40: isize
  if (data?.EapPeerGetResult !== undefined) view.setBigInt64(64, BigInt(data.EapPeerGetResult), true);
  // 0x48: isize
  if (data?.EapPeerGetUIContext !== undefined) view.setBigInt64(72, BigInt(data.EapPeerGetUIContext), true);
  // 0x50: isize
  if (data?.EapPeerSetUIContext !== undefined) view.setBigInt64(80, BigInt(data.EapPeerSetUIContext), true);
  // 0x58: isize
  if (data?.EapPeerGetResponseAttributes !== undefined) view.setBigInt64(88, BigInt(data.EapPeerGetResponseAttributes), true);
  // 0x60: isize
  if (data?.EapPeerSetResponseAttributes !== undefined) view.setBigInt64(96, BigInt(data.EapPeerSetResponseAttributes), true);
  // 0x68: isize
  if (data?.EapPeerEndSession !== undefined) view.setBigInt64(104, BigInt(data.EapPeerEndSession), true);
  // 0x70: isize
  if (data?.EapPeerShutdown !== undefined) view.setBigInt64(112, BigInt(data.EapPeerShutdown), true);
  return buf;
}

/**
 * Windows.Win32.Security.ExtensibleAuthenticationProtocol.EAP_AUTHENTICATOR_METHOD_ROUTINES (size: 96)
 */
export interface EAP_AUTHENTICATOR_METHOD_ROUTINES {
  /** u32 */
  dwSizeInBytes: number;
  /** ptr */
  pEapType: Deno.PointerValue | Uint8Array | null;
  /** isize */
  EapMethodAuthenticatorInitialize: Deno.PointerValue;
  /** isize */
  EapMethodAuthenticatorBeginSession: Deno.PointerValue;
  /** isize */
  EapMethodAuthenticatorUpdateInnerMethodParams: Deno.PointerValue;
  /** isize */
  EapMethodAuthenticatorReceivePacket: Deno.PointerValue;
  /** isize */
  EapMethodAuthenticatorSendPacket: Deno.PointerValue;
  /** isize */
  EapMethodAuthenticatorGetAttributes: Deno.PointerValue;
  /** isize */
  EapMethodAuthenticatorSetAttributes: Deno.PointerValue;
  /** isize */
  EapMethodAuthenticatorGetResult: Deno.PointerValue;
  /** isize */
  EapMethodAuthenticatorEndSession: Deno.PointerValue;
  /** isize */
  EapMethodAuthenticatorShutdown: Deno.PointerValue;
}

export const sizeofEAP_AUTHENTICATOR_METHOD_ROUTINES = 96;

export function allocEAP_AUTHENTICATOR_METHOD_ROUTINES(data?: Partial<EAP_AUTHENTICATOR_METHOD_ROUTINES>): Uint8Array {
  const buf = new Uint8Array(sizeofEAP_AUTHENTICATOR_METHOD_ROUTINES);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.dwSizeInBytes !== undefined) view.setUint32(0, Number(data.dwSizeInBytes), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.pEapType !== undefined) view.setBigUint64(8, data.pEapType === null ? 0n : BigInt(util.toPointer(data.pEapType)), true);
  // 0x10: isize
  if (data?.EapMethodAuthenticatorInitialize !== undefined) view.setBigInt64(16, BigInt(data.EapMethodAuthenticatorInitialize), true);
  // 0x18: isize
  if (data?.EapMethodAuthenticatorBeginSession !== undefined) view.setBigInt64(24, BigInt(data.EapMethodAuthenticatorBeginSession), true);
  // 0x20: isize
  if (data?.EapMethodAuthenticatorUpdateInnerMethodParams !== undefined) view.setBigInt64(32, BigInt(data.EapMethodAuthenticatorUpdateInnerMethodParams), true);
  // 0x28: isize
  if (data?.EapMethodAuthenticatorReceivePacket !== undefined) view.setBigInt64(40, BigInt(data.EapMethodAuthenticatorReceivePacket), true);
  // 0x30: isize
  if (data?.EapMethodAuthenticatorSendPacket !== undefined) view.setBigInt64(48, BigInt(data.EapMethodAuthenticatorSendPacket), true);
  // 0x38: isize
  if (data?.EapMethodAuthenticatorGetAttributes !== undefined) view.setBigInt64(56, BigInt(data.EapMethodAuthenticatorGetAttributes), true);
  // 0x40: isize
  if (data?.EapMethodAuthenticatorSetAttributes !== undefined) view.setBigInt64(64, BigInt(data.EapMethodAuthenticatorSetAttributes), true);
  // 0x48: isize
  if (data?.EapMethodAuthenticatorGetResult !== undefined) view.setBigInt64(72, BigInt(data.EapMethodAuthenticatorGetResult), true);
  // 0x50: isize
  if (data?.EapMethodAuthenticatorEndSession !== undefined) view.setBigInt64(80, BigInt(data.EapMethodAuthenticatorEndSession), true);
  // 0x58: isize
  if (data?.EapMethodAuthenticatorShutdown !== undefined) view.setBigInt64(88, BigInt(data.EapMethodAuthenticatorShutdown), true);
  return buf;
}

export type HWND = Deno.PointerValue;

// Native Libraries

try {
  var libeappcfg = Deno.dlopen("eappcfg", {
    EapHostPeerGetMethods: {
      parameters: ["pointer", "pointer"],
      result: "u32",
    },
    EapHostPeerGetMethodProperties: {
      parameters: ["u32", "u32", "pointer", "pointer", "u32", "pointer", "u32", "pointer", "pointer", "pointer"],
      result: "u32",
    },
    EapHostPeerInvokeConfigUI: {
      parameters: ["pointer", "u32", "pointer", "u32", "pointer", "pointer", "pointer", "pointer"],
      result: "u32",
    },
    EapHostPeerQueryCredentialInputFields: {
      parameters: ["pointer", "pointer", "u32", "u32", "pointer", "pointer", "pointer"],
      result: "u32",
    },
    EapHostPeerQueryUserBlobFromCredentialInputFields: {
      parameters: ["pointer", "pointer", "u32", "u32", "pointer", "pointer", "pointer", "pointer", "pointer"],
      result: "u32",
    },
    EapHostPeerInvokeIdentityUI: {
      parameters: ["u32", "pointer", "u32", "pointer", "u32", "pointer", "u32", "pointer", "pointer", "pointer", "pointer", "pointer", "pointer"],
      result: "u32",
    },
    EapHostPeerInvokeInteractiveUI: {
      parameters: ["pointer", "u32", "pointer", "pointer", "pointer", "pointer"],
      result: "u32",
    },
    EapHostPeerQueryInteractiveUIInputFields: {
      parameters: ["u32", "u32", "u32", "pointer", "pointer", "pointer", "pointer"],
      result: "u32",
    },
    EapHostPeerQueryUIBlobFromInteractiveUIInputFields: {
      parameters: ["u32", "u32", "u32", "pointer", "pointer", "pointer", "pointer", "pointer", "pointer"],
      result: "u32",
    },
    EapHostPeerConfigXml2Blob: {
      parameters: ["u32", "pointer", "pointer", "pointer", "pointer", "pointer"],
      result: "u32",
    },
    EapHostPeerCredentialsXml2Blob: {
      parameters: ["u32", "pointer", "u32", "pointer", "pointer", "pointer", "pointer", "pointer"],
      result: "u32",
    },
    EapHostPeerConfigBlob2Xml: {
      parameters: ["u32", "pointer", "u32", "pointer", "pointer", "pointer"],
      result: "u32",
    },
    EapHostPeerFreeMemory: {
      parameters: ["pointer"],
      result: "void",
    },
    EapHostPeerFreeErrorMemory: {
      parameters: ["pointer"],
      result: "void",
    },
  }).symbols;
} catch(e) { /* ignore */ }

try {
  var libeappprxy = Deno.dlopen("eappprxy", {
    EapHostPeerInitialize: {
      parameters: [],
      result: "u32",
    },
    EapHostPeerUninitialize: {
      parameters: [],
      result: "void",
    },
    EapHostPeerBeginSession: {
      parameters: ["u32", "pointer", "pointer", "pointer", "u32", "pointer", "u32", "pointer", "u32", "pointer", "pointer", "pointer", "pointer", "pointer"],
      result: "u32",
    },
    EapHostPeerProcessReceivedPacket: {
      parameters: ["u32", "u32", "pointer", "pointer", "pointer"],
      result: "u32",
    },
    EapHostPeerGetSendPacket: {
      parameters: ["u32", "pointer", "pointer", "pointer"],
      result: "u32",
    },
    EapHostPeerGetResult: {
      parameters: ["u32", "i32", "pointer", "pointer"],
      result: "u32",
    },
    EapHostPeerGetUIContext: {
      parameters: ["u32", "pointer", "pointer", "pointer"],
      result: "u32",
    },
    EapHostPeerSetUIContext: {
      parameters: ["u32", "u32", "pointer", "pointer", "pointer"],
      result: "u32",
    },
    EapHostPeerGetResponseAttributes: {
      parameters: ["u32", "pointer", "pointer"],
      result: "u32",
    },
    EapHostPeerSetResponseAttributes: {
      parameters: ["u32", "pointer", "pointer", "pointer"],
      result: "u32",
    },
    EapHostPeerGetAuthStatus: {
      parameters: ["u32", "i32", "pointer", "pointer", "pointer"],
      result: "u32",
    },
    EapHostPeerEndSession: {
      parameters: ["u32", "pointer"],
      result: "u32",
    },
    EapHostPeerGetDataToUnplumbCredentials: {
      parameters: ["pointer", "pointer", "u32", "pointer", "pointer"],
      result: "u32",
    },
    EapHostPeerClearConnection: {
      parameters: ["pointer", "pointer"],
      result: "u32",
    },
    EapHostPeerFreeEapError: {
      parameters: ["pointer"],
      result: "void",
    },
    EapHostPeerGetIdentity: {
      parameters: ["u32", "u32", "pointer", "u32", "pointer", "u32", "pointer", "pointer", "pointer", "pointer", "pointer", "pointer", "pointer", "pointer"],
      result: "u32",
    },
    EapHostPeerGetEncryptedPassword: {
      parameters: ["u32", "buffer", "pointer"],
      result: "u32",
    },
    EapHostPeerFreeRuntimeMemory: {
      parameters: ["pointer"],
      result: "void",
    },
  }).symbols;
} catch(e) { /* ignore */ }

// Symbols

export function EapHostPeerGetMethods(
  pEapMethodInfoArray: Deno.PointerValue | Uint8Array | null /* ptr */,
  ppEapError: Deno.PointerValue | Uint8Array | null /* ptr */,
): number /* u32 */ {
  return libeappcfg.EapHostPeerGetMethods(util.toPointer(pEapMethodInfoArray), util.toPointer(ppEapError));
}

export function EapHostPeerGetMethodProperties(
  dwVersion: number /* u32 */,
  dwFlags: number /* u32 */,
  eapMethodType: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Security.ExtensibleAuthenticationProtocol.EAP_METHOD_TYPE */,
  hUserImpersonationToken: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Foundation.HANDLE */,
  dwEapConnDataSize: number /* u32 */,
  pbEapConnData: Deno.PointerValue | Uint8Array | null /* ptr */,
  dwUserDataSize: number /* u32 */,
  pbUserData: Deno.PointerValue | Uint8Array | null /* ptr */,
  pMethodPropertyArray: Deno.PointerValue | Uint8Array | null /* ptr */,
  ppEapError: Deno.PointerValue | Uint8Array | null /* ptr */,
): number /* u32 */ {
  return libeappcfg.EapHostPeerGetMethodProperties(dwVersion, dwFlags, util.toPointer(eapMethodType), util.toPointer(hUserImpersonationToken), dwEapConnDataSize, util.toPointer(pbEapConnData), dwUserDataSize, util.toPointer(pbUserData), util.toPointer(pMethodPropertyArray), util.toPointer(ppEapError));
}

export function EapHostPeerInvokeConfigUI(
  hwndParent: Deno.PointerValue | null /* Windows.Win32.Foundation.HWND */,
  dwFlags: number /* u32 */,
  eapMethodType: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Security.ExtensibleAuthenticationProtocol.EAP_METHOD_TYPE */,
  dwSizeOfConfigIn: number /* u32 */,
  pConfigIn: Deno.PointerValue | Uint8Array | null /* ptr */,
  pdwSizeOfConfigOut: Deno.PointerValue | Uint8Array | null /* ptr */,
  ppConfigOut: Deno.PointerValue | Uint8Array | null /* ptr */,
  ppEapError: Deno.PointerValue | Uint8Array | null /* ptr */,
): number /* u32 */ {
  return libeappcfg.EapHostPeerInvokeConfigUI(util.hwndToFfi(hwndParent), dwFlags, util.toPointer(eapMethodType), dwSizeOfConfigIn, util.toPointer(pConfigIn), util.toPointer(pdwSizeOfConfigOut), util.toPointer(ppConfigOut), util.toPointer(ppEapError));
}

export function EapHostPeerQueryCredentialInputFields(
  hUserImpersonationToken: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Foundation.HANDLE */,
  eapMethodType: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Security.ExtensibleAuthenticationProtocol.EAP_METHOD_TYPE */,
  dwFlags: number /* u32 */,
  dwEapConnDataSize: number /* u32 */,
  pbEapConnData: Deno.PointerValue | Uint8Array | null /* ptr */,
  pEapConfigInputFieldArray: Deno.PointerValue | Uint8Array | null /* ptr */,
  ppEapError: Deno.PointerValue | Uint8Array | null /* ptr */,
): number /* u32 */ {
  return libeappcfg.EapHostPeerQueryCredentialInputFields(util.toPointer(hUserImpersonationToken), util.toPointer(eapMethodType), dwFlags, dwEapConnDataSize, util.toPointer(pbEapConnData), util.toPointer(pEapConfigInputFieldArray), util.toPointer(ppEapError));
}

export function EapHostPeerQueryUserBlobFromCredentialInputFields(
  hUserImpersonationToken: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Foundation.HANDLE */,
  eapMethodType: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Security.ExtensibleAuthenticationProtocol.EAP_METHOD_TYPE */,
  dwFlags: number /* u32 */,
  dwEapConnDataSize: number /* u32 */,
  pbEapConnData: Deno.PointerValue | Uint8Array | null /* ptr */,
  pEapConfigInputFieldArray: Deno.PointerValue | Uint8Array | null /* ptr */,
  pdwUserBlobSize: Deno.PointerValue | Uint8Array | null /* ptr */,
  ppbUserBlob: Deno.PointerValue | Uint8Array | null /* ptr */,
  ppEapError: Deno.PointerValue | Uint8Array | null /* ptr */,
): number /* u32 */ {
  return libeappcfg.EapHostPeerQueryUserBlobFromCredentialInputFields(util.toPointer(hUserImpersonationToken), util.toPointer(eapMethodType), dwFlags, dwEapConnDataSize, util.toPointer(pbEapConnData), util.toPointer(pEapConfigInputFieldArray), util.toPointer(pdwUserBlobSize), util.toPointer(ppbUserBlob), util.toPointer(ppEapError));
}

export function EapHostPeerInvokeIdentityUI(
  dwVersion: number /* u32 */,
  eapMethodType: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Security.ExtensibleAuthenticationProtocol.EAP_METHOD_TYPE */,
  dwFlags: number /* u32 */,
  hwndParent: Deno.PointerValue | null /* Windows.Win32.Foundation.HWND */,
  dwSizeofConnectionData: number /* u32 */,
  pConnectionData: Deno.PointerValue | Uint8Array | null /* ptr */,
  dwSizeofUserData: number /* u32 */,
  pUserData: Deno.PointerValue | Uint8Array | null /* ptr */,
  pdwSizeOfUserDataOut: Deno.PointerValue | Uint8Array | null /* ptr */,
  ppUserDataOut: Deno.PointerValue | Uint8Array | null /* ptr */,
  ppwszIdentity: Deno.PointerValue | Uint8Array | null /* ptr */,
  ppEapError: Deno.PointerValue | Uint8Array | null /* ptr */,
  ppvReserved: Deno.PointerValue | Uint8Array | null /* ptr */,
): number /* u32 */ {
  return libeappcfg.EapHostPeerInvokeIdentityUI(dwVersion, util.toPointer(eapMethodType), dwFlags, util.hwndToFfi(hwndParent), dwSizeofConnectionData, util.toPointer(pConnectionData), dwSizeofUserData, util.toPointer(pUserData), util.toPointer(pdwSizeOfUserDataOut), util.toPointer(ppUserDataOut), util.toPointer(ppwszIdentity), util.toPointer(ppEapError), util.toPointer(ppvReserved));
}

export function EapHostPeerInvokeInteractiveUI(
  hwndParent: Deno.PointerValue | null /* Windows.Win32.Foundation.HWND */,
  dwSizeofUIContextData: number /* u32 */,
  pUIContextData: Deno.PointerValue | Uint8Array | null /* ptr */,
  pdwSizeOfDataFromInteractiveUI: Deno.PointerValue | Uint8Array | null /* ptr */,
  ppDataFromInteractiveUI: Deno.PointerValue | Uint8Array | null /* ptr */,
  ppEapError: Deno.PointerValue | Uint8Array | null /* ptr */,
): number /* u32 */ {
  return libeappcfg.EapHostPeerInvokeInteractiveUI(util.hwndToFfi(hwndParent), dwSizeofUIContextData, util.toPointer(pUIContextData), util.toPointer(pdwSizeOfDataFromInteractiveUI), util.toPointer(ppDataFromInteractiveUI), util.toPointer(ppEapError));
}

export function EapHostPeerQueryInteractiveUIInputFields(
  dwVersion: number /* u32 */,
  dwFlags: number /* u32 */,
  dwSizeofUIContextData: number /* u32 */,
  pUIContextData: Deno.PointerValue | Uint8Array | null /* ptr */,
  pEapInteractiveUIData: Deno.PointerValue | Uint8Array | null /* ptr */,
  ppEapError: Deno.PointerValue | Uint8Array | null /* ptr */,
  ppvReserved: Deno.PointerValue | Uint8Array | null /* ptr */,
): number /* u32 */ {
  return libeappcfg.EapHostPeerQueryInteractiveUIInputFields(dwVersion, dwFlags, dwSizeofUIContextData, util.toPointer(pUIContextData), util.toPointer(pEapInteractiveUIData), util.toPointer(ppEapError), util.toPointer(ppvReserved));
}

export function EapHostPeerQueryUIBlobFromInteractiveUIInputFields(
  dwVersion: number /* u32 */,
  dwFlags: number /* u32 */,
  dwSizeofUIContextData: number /* u32 */,
  pUIContextData: Deno.PointerValue | Uint8Array | null /* ptr */,
  pEapInteractiveUIData: Deno.PointerValue | Uint8Array | null /* ptr */,
  pdwSizeOfDataFromInteractiveUI: Deno.PointerValue | Uint8Array | null /* ptr */,
  ppDataFromInteractiveUI: Deno.PointerValue | Uint8Array | null /* ptr */,
  ppEapError: Deno.PointerValue | Uint8Array | null /* ptr */,
  ppvReserved: Deno.PointerValue | Uint8Array | null /* ptr */,
): number /* u32 */ {
  return libeappcfg.EapHostPeerQueryUIBlobFromInteractiveUIInputFields(dwVersion, dwFlags, dwSizeofUIContextData, util.toPointer(pUIContextData), util.toPointer(pEapInteractiveUIData), util.toPointer(pdwSizeOfDataFromInteractiveUI), util.toPointer(ppDataFromInteractiveUI), util.toPointer(ppEapError), util.toPointer(ppvReserved));
}

export function EapHostPeerConfigXml2Blob(
  dwFlags: number /* u32 */,
  pConfigDoc: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Data.Xml.MsXml.IXMLDOMNode */,
  pdwSizeOfConfigOut: Deno.PointerValue | Uint8Array | null /* ptr */,
  ppConfigOut: Deno.PointerValue | Uint8Array | null /* ptr */,
  pEapMethodType: Deno.PointerValue | Uint8Array | null /* ptr */,
  ppEapError: Deno.PointerValue | Uint8Array | null /* ptr */,
): number /* u32 */ {
  return libeappcfg.EapHostPeerConfigXml2Blob(dwFlags, util.toPointer(pConfigDoc), util.toPointer(pdwSizeOfConfigOut), util.toPointer(ppConfigOut), util.toPointer(pEapMethodType), util.toPointer(ppEapError));
}

export function EapHostPeerCredentialsXml2Blob(
  dwFlags: number /* u32 */,
  pCredentialsDoc: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Data.Xml.MsXml.IXMLDOMNode */,
  dwSizeOfConfigIn: number /* u32 */,
  pConfigIn: Deno.PointerValue | Uint8Array | null /* ptr */,
  pdwSizeOfCredentialsOut: Deno.PointerValue | Uint8Array | null /* ptr */,
  ppCredentialsOut: Deno.PointerValue | Uint8Array | null /* ptr */,
  pEapMethodType: Deno.PointerValue | Uint8Array | null /* ptr */,
  ppEapError: Deno.PointerValue | Uint8Array | null /* ptr */,
): number /* u32 */ {
  return libeappcfg.EapHostPeerCredentialsXml2Blob(dwFlags, util.toPointer(pCredentialsDoc), dwSizeOfConfigIn, util.toPointer(pConfigIn), util.toPointer(pdwSizeOfCredentialsOut), util.toPointer(ppCredentialsOut), util.toPointer(pEapMethodType), util.toPointer(ppEapError));
}

export function EapHostPeerConfigBlob2Xml(
  dwFlags: number /* u32 */,
  eapMethodType: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Security.ExtensibleAuthenticationProtocol.EAP_METHOD_TYPE */,
  dwSizeOfConfigIn: number /* u32 */,
  pConfigIn: Deno.PointerValue | Uint8Array | null /* ptr */,
  ppConfigDoc: Deno.PointerValue | Uint8Array | null /* ptr */,
  ppEapError: Deno.PointerValue | Uint8Array | null /* ptr */,
): number /* u32 */ {
  return libeappcfg.EapHostPeerConfigBlob2Xml(dwFlags, util.toPointer(eapMethodType), dwSizeOfConfigIn, util.toPointer(pConfigIn), util.toPointer(ppConfigDoc), util.toPointer(ppEapError));
}

export function EapHostPeerFreeMemory(
  pData: Deno.PointerValue | Uint8Array | null /* ptr */,
): void /* void */ {
  return libeappcfg.EapHostPeerFreeMemory(util.toPointer(pData));
}

export function EapHostPeerFreeErrorMemory(
  pEapError: Deno.PointerValue | Uint8Array | null /* ptr */,
): void /* void */ {
  return libeappcfg.EapHostPeerFreeErrorMemory(util.toPointer(pEapError));
}

export function EapHostPeerInitialize(): number /* u32 */ {
  return libeappprxy.EapHostPeerInitialize();
}

export function EapHostPeerUninitialize(): void /* void */ {
  return libeappprxy.EapHostPeerUninitialize();
}

export function EapHostPeerBeginSession(
  dwFlags: number /* u32 */,
  eapType: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Security.ExtensibleAuthenticationProtocol.EAP_METHOD_TYPE */,
  pAttributeArray: Deno.PointerValue | Uint8Array | null /* ptr */,
  hTokenImpersonateUser: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Foundation.HANDLE */,
  dwSizeofConnectionData: number /* u32 */,
  pConnectionData: Deno.PointerValue | Uint8Array | null /* ptr */,
  dwSizeofUserData: number /* u32 */,
  pUserData: Deno.PointerValue | Uint8Array | null /* ptr */,
  dwMaxSendPacketSize: number /* u32 */,
  pConnectionId: Deno.PointerValue | Uint8Array | null /* ptr */,
  func: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Security.ExtensibleAuthenticationProtocol.NotificationHandler */,
  pContextData: Deno.PointerValue | Uint8Array | null /* ptr */,
  pSessionId: Deno.PointerValue | Uint8Array | null /* ptr */,
  ppEapError: Deno.PointerValue | Uint8Array | null /* ptr */,
): number /* u32 */ {
  return libeappprxy.EapHostPeerBeginSession(dwFlags, util.toPointer(eapType), util.toPointer(pAttributeArray), util.toPointer(hTokenImpersonateUser), dwSizeofConnectionData, util.toPointer(pConnectionData), dwSizeofUserData, util.toPointer(pUserData), dwMaxSendPacketSize, util.toPointer(pConnectionId), util.toPointer(func), util.toPointer(pContextData), util.toPointer(pSessionId), util.toPointer(ppEapError));
}

export function EapHostPeerProcessReceivedPacket(
  sessionHandle: number /* u32 */,
  cbReceivePacket: number /* u32 */,
  pReceivePacket: Deno.PointerValue | Uint8Array | null /* ptr */,
  pEapOutput: Deno.PointerValue | Uint8Array | null /* ptr */,
  ppEapError: Deno.PointerValue | Uint8Array | null /* ptr */,
): number /* u32 */ {
  return libeappprxy.EapHostPeerProcessReceivedPacket(sessionHandle, cbReceivePacket, util.toPointer(pReceivePacket), util.toPointer(pEapOutput), util.toPointer(ppEapError));
}

export function EapHostPeerGetSendPacket(
  sessionHandle: number /* u32 */,
  pcbSendPacket: Deno.PointerValue | Uint8Array | null /* ptr */,
  ppSendPacket: Deno.PointerValue | Uint8Array | null /* ptr */,
  ppEapError: Deno.PointerValue | Uint8Array | null /* ptr */,
): number /* u32 */ {
  return libeappprxy.EapHostPeerGetSendPacket(sessionHandle, util.toPointer(pcbSendPacket), util.toPointer(ppSendPacket), util.toPointer(ppEapError));
}

export function EapHostPeerGetResult(
  sessionHandle: number /* u32 */,
  reason: EapHostPeerMethodResultReason /* Windows.Win32.Security.ExtensibleAuthenticationProtocol.EapHostPeerMethodResultReason */,
  ppResult: Deno.PointerValue | Uint8Array | null /* ptr */,
  ppEapError: Deno.PointerValue | Uint8Array | null /* ptr */,
): number /* u32 */ {
  return libeappprxy.EapHostPeerGetResult(sessionHandle, reason, util.toPointer(ppResult), util.toPointer(ppEapError));
}

export function EapHostPeerGetUIContext(
  sessionHandle: number /* u32 */,
  pdwSizeOfUIContextData: Deno.PointerValue | Uint8Array | null /* ptr */,
  ppUIContextData: Deno.PointerValue | Uint8Array | null /* ptr */,
  ppEapError: Deno.PointerValue | Uint8Array | null /* ptr */,
): number /* u32 */ {
  return libeappprxy.EapHostPeerGetUIContext(sessionHandle, util.toPointer(pdwSizeOfUIContextData), util.toPointer(ppUIContextData), util.toPointer(ppEapError));
}

export function EapHostPeerSetUIContext(
  sessionHandle: number /* u32 */,
  dwSizeOfUIContextData: number /* u32 */,
  pUIContextData: Deno.PointerValue | Uint8Array | null /* ptr */,
  pEapOutput: Deno.PointerValue | Uint8Array | null /* ptr */,
  ppEapError: Deno.PointerValue | Uint8Array | null /* ptr */,
): number /* u32 */ {
  return libeappprxy.EapHostPeerSetUIContext(sessionHandle, dwSizeOfUIContextData, util.toPointer(pUIContextData), util.toPointer(pEapOutput), util.toPointer(ppEapError));
}

export function EapHostPeerGetResponseAttributes(
  sessionHandle: number /* u32 */,
  pAttribs: Deno.PointerValue | Uint8Array | null /* ptr */,
  ppEapError: Deno.PointerValue | Uint8Array | null /* ptr */,
): number /* u32 */ {
  return libeappprxy.EapHostPeerGetResponseAttributes(sessionHandle, util.toPointer(pAttribs), util.toPointer(ppEapError));
}

export function EapHostPeerSetResponseAttributes(
  sessionHandle: number /* u32 */,
  pAttribs: Deno.PointerValue | Uint8Array | null /* ptr */,
  pEapOutput: Deno.PointerValue | Uint8Array | null /* ptr */,
  ppEapError: Deno.PointerValue | Uint8Array | null /* ptr */,
): number /* u32 */ {
  return libeappprxy.EapHostPeerSetResponseAttributes(sessionHandle, util.toPointer(pAttribs), util.toPointer(pEapOutput), util.toPointer(ppEapError));
}

export function EapHostPeerGetAuthStatus(
  sessionHandle: number /* u32 */,
  authParam: EapHostPeerAuthParams /* Windows.Win32.Security.ExtensibleAuthenticationProtocol.EapHostPeerAuthParams */,
  pcbAuthData: Deno.PointerValue | Uint8Array | null /* ptr */,
  ppAuthData: Deno.PointerValue | Uint8Array | null /* ptr */,
  ppEapError: Deno.PointerValue | Uint8Array | null /* ptr */,
): number /* u32 */ {
  return libeappprxy.EapHostPeerGetAuthStatus(sessionHandle, authParam, util.toPointer(pcbAuthData), util.toPointer(ppAuthData), util.toPointer(ppEapError));
}

export function EapHostPeerEndSession(
  sessionHandle: number /* u32 */,
  ppEapError: Deno.PointerValue | Uint8Array | null /* ptr */,
): number /* u32 */ {
  return libeappprxy.EapHostPeerEndSession(sessionHandle, util.toPointer(ppEapError));
}

export function EapHostPeerGetDataToUnplumbCredentials(
  pConnectionIdThatLastSavedCreds: Deno.PointerValue | Uint8Array | null /* ptr */,
  phCredentialImpersonationToken: Deno.PointerValue | Uint8Array | null /* ptr */,
  sessionHandle: number /* u32 */,
  ppEapError: Deno.PointerValue | Uint8Array | null /* ptr */,
  fSaveToCredMan: Deno.PointerValue | Uint8Array | null /* ptr */,
): number /* u32 */ {
  return libeappprxy.EapHostPeerGetDataToUnplumbCredentials(util.toPointer(pConnectionIdThatLastSavedCreds), util.toPointer(phCredentialImpersonationToken), sessionHandle, util.toPointer(ppEapError), util.toPointer(fSaveToCredMan));
}

export function EapHostPeerClearConnection(
  pConnectionId: Deno.PointerValue | Uint8Array | null /* ptr */,
  ppEapError: Deno.PointerValue | Uint8Array | null /* ptr */,
): number /* u32 */ {
  return libeappprxy.EapHostPeerClearConnection(util.toPointer(pConnectionId), util.toPointer(ppEapError));
}

export function EapHostPeerFreeEapError(
  pEapError: Deno.PointerValue | Uint8Array | null /* ptr */,
): void /* void */ {
  return libeappprxy.EapHostPeerFreeEapError(util.toPointer(pEapError));
}

export function EapHostPeerGetIdentity(
  dwVersion: number /* u32 */,
  dwFlags: number /* u32 */,
  eapMethodType: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Security.ExtensibleAuthenticationProtocol.EAP_METHOD_TYPE */,
  dwSizeofConnectionData: number /* u32 */,
  pConnectionData: Deno.PointerValue | Uint8Array | null /* ptr */,
  dwSizeofUserData: number /* u32 */,
  pUserData: Deno.PointerValue | Uint8Array | null /* ptr */,
  hTokenImpersonateUser: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Foundation.HANDLE */,
  pfInvokeUI: Deno.PointerValue | Uint8Array | null /* ptr */,
  pdwSizeOfUserDataOut: Deno.PointerValue | Uint8Array | null /* ptr */,
  ppUserDataOut: Deno.PointerValue | Uint8Array | null /* ptr */,
  ppwszIdentity: Deno.PointerValue | Uint8Array | null /* ptr */,
  ppEapError: Deno.PointerValue | Uint8Array | null /* ptr */,
  ppvReserved: Deno.PointerValue | Uint8Array | null /* ptr */,
): number /* u32 */ {
  return libeappprxy.EapHostPeerGetIdentity(dwVersion, dwFlags, util.toPointer(eapMethodType), dwSizeofConnectionData, util.toPointer(pConnectionData), dwSizeofUserData, util.toPointer(pUserData), util.toPointer(hTokenImpersonateUser), util.toPointer(pfInvokeUI), util.toPointer(pdwSizeOfUserDataOut), util.toPointer(ppUserDataOut), util.toPointer(ppwszIdentity), util.toPointer(ppEapError), util.toPointer(ppvReserved));
}

export function EapHostPeerGetEncryptedPassword(
  dwSizeofPassword: number /* u32 */,
  szPassword: string | null /* Windows.Win32.Foundation.PWSTR */,
  ppszEncPassword: Deno.PointerValue | Uint8Array | null /* ptr */,
): number /* u32 */ {
  return libeappprxy.EapHostPeerGetEncryptedPassword(dwSizeofPassword, util.pwstrToFfi(szPassword), util.toPointer(ppszEncPassword));
}

export function EapHostPeerFreeRuntimeMemory(
  pData: Deno.PointerValue | Uint8Array | null /* ptr */,
): void /* void */ {
  return libeappprxy.EapHostPeerFreeRuntimeMemory(util.toPointer(pData));
}

